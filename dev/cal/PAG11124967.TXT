OBJECT Page 11124967 Hour Accounting by Day Subform
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Lines;
               NOR=Rader;
               SVE=Rader];
    SourceTable=Table11012039;
    DelayedInsert=Yes;
    PageType=ListPart;
    AutoSplitKey=Yes;
    RefreshOnActivate=Yes;
    OnInit=BEGIN
             ServiceEnabled := TRUE;
             PlantEnabled := TRUE;
             PlantRateEnabled := TRUE;

             ProjectNoEditable := TRUE;
             ExtensionContractEditable := TRUE;
             RentalUnitEditable := TRUE;
             PlantRateCodeEditable := TRUE;
             ElementEditable := TRUE;
             CostComponentEditable := TRUE;
             AmountEditable := TRUE;
             PostingDateEditable := TRUE;
             ReasonCodeEditable := FALSE;
             CostCodeEditable := TRUE;
             ServiceDataEditable := TRUE;

             HoursEditable := TRUE;
             QuantityEditable := TRUE;
             AmountLCYEditable := TRUE;
             ResourceRequestEditable := TRUE;
           END;

    OnOpenPage=VAR
                 FPSLicenseManagement@1100527400 : Codeunit 11229289;
               BEGIN
                 //**4PS.sn
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**FILTER NOT SET, ONLY FILTERTYPE FOR INPUT OF DEPARTMENT CODE
                 //**4PS.en
                 ServiceEnabled := FPSLicenseManagement.LicenseAndReadPermissionForTable(ServiceSetup);
                 IF FPSLicenseManagement.LicenseAndReadPermissionForTable(PlantSetup) THEN BEGIN
                   PlantEnabled := PlantSetup.GET;
                   PlantRateEnabled := PlantSetup."Rate Codes";
                 END ELSE
                   PlantEnabled := FALSE;

                 IF JobsSetup.GET THEN;
                 IF ServiceSetup.GET THEN;
               END;

    OnAfterGetRecord=BEGIN
                       AmountLCYHideValue := FALSE;
                       ProjDescrOtherCompany();
                       CostObjDescr();

                       ElementDescription;

                       FillHoursOfRegistrationDay;
                       OnAfterGetCurrRecord;
                       AmountLCYOnFormat;
                     END;

    OnNewRecord=BEGIN
                  Type := xRec.Type;
                  IF (Type = Type::Plant) AND (xRec."Plant Rate Code" <> '') THEN
                    "Plant Rate Code" := xRec."Plant Rate Code";

                  "Connection No." := 0;

                  FILTERGROUP := 4;
                  EVALUATE("Registration Day" , GETFILTER("Registration Day"));
                  FILTERGROUP := 0;
                  FillHoursOfRegistrationDay;
                  OnAfterGetCurrRecord;
                END;

    OnInsertRecord=VAR
                     lHourLineRec@1100525001 : Record 11012039;
                     lMaxHourLine@1100525002 : Integer;
                     lAddInt@1100525003 : Integer;
                   BEGIN
                     CheckIfHourAccLinesAreRefreshd;

                     lMaxHourLine := -1;
                     lHourLineRec.SETRANGE(Year, Year);
                     lHourLineRec.SETRANGE(Week, Week);
                     lHourLineRec.SETRANGE("Employee No.", "Employee No.");
                     lHourLineRec.SETFILTER("Line No.", '>%1' ,"Line No.");
                     lHourLineRec.SETRANGE("Registration Day", "Registration Day");
                     IF lHourLineRec.FINDFIRST THEN
                      lMaxHourLine := lHourLineRec."Line No.";

                     lHourLineRec.RESET;
                     lHourLineRec.SETRANGE(Year, Year);
                     lHourLineRec.SETRANGE(Week, Week);
                     lHourLineRec.SETRANGE("Employee No.", "Employee No.");
                     lHourLineRec.SETRANGE("Line No.", "Line No.");
                     IF lHourLineRec.FINDSET THEN BEGIN
                       REPEAT
                         IF lMaxHourLine > 0 THEN BEGIN
                           IF "Line No." < lMaxHourLine - 1 THEN BEGIN
                             lAddInt := ROUND((lMaxHourLine-"Line No.")/2, 1);
                             IF lAddInt > 0 THEN
                               "Line No." := "Line No." + lAddInt
                             ELSE
                               "Line No." += 10000;
                           END ELSE BEGIN
                             "Line No." += 10000;
                           END;
                           IF lMaxHourLine < "Line No." THEN
                             lMaxHourLine := -1;
                         END ELSE BEGIN
                           "Line No." += 10000;
                         END;
                         lHourLineRec.SETRANGE("Line No.", "Line No.");
                       UNTIL NOT lHourLineRec.FINDSET;
                     END;

                     "Connection No." := 0;

                     //mg.sn, 29-06-11: M27721
                     Monday := 0;
                     Tuesday := 0;
                     Wednesday := 0;
                     Thursday := 0;
                     Friday := 0;
                     Saturday := 0;
                     Sunday := 0;
                     CASE "Registration Day" OF
                       "Registration Day"::Monday:
                         VALIDATE(Monday, "Total Line");
                       "Registration Day"::Tuesday:
                         VALIDATE(Tuesday, "Total Line");
                       "Registration Day"::Wednesday:
                         VALIDATE(Wednesday, "Total Line");
                       "Registration Day"::Thursday:
                         VALIDATE(Thursday, "Total Line");
                       "Registration Day"::Friday:
                         VALIDATE(Friday, "Total Line");
                       "Registration Day"::Saturday:
                         VALIDATE(Saturday, "Total Line");
                       "Registration Day"::Sunday:
                         VALIDATE(Sunday, "Total Line");
                     END;
                     //mg.en, 29-06-11: M27721
                     //mg.sn, 29-06-11: M27722
                     IF CompTypeEditable THEN
                       VALIDATE("Wage Component");
                     //mg.en, 29-06-11: M27722
                   END;

    OnModifyRecord=BEGIN
                     CheckIfHourAccLinesAreRefreshd;

                     IF NOT LineIsEditable THEN BEGIN
                       CurrPage.UPDATE(FALSE);
                       EXIT(FALSE);
                     END;
                   END;

    OnDeleteRecord=BEGIN
                     CheckIfHourAccLinesAreRefreshd;

                     IF NOT LineIsEditable THEN BEGIN
                       CurrPage.UPDATE(FALSE);
                       EXIT(FALSE);
                     END;
                   END;

    ActionList=ACTIONS
    {
      { 1100525002;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525003;1 ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 NOR=Fu&nksjon;
                                 SVE=F&unktioner] }
      { 1100525006;2 ;Action    ;
                      CaptionML=[ENU=Copy Hours from Employee &Absence;
                                 SVE=Kopiera timmar fr†n &planering];
                      Image=Copy;
                      OnAction=VAR
                                 HourAccounting@1100525000 : Record 11012038;
                               BEGIN
                                 HourAccounting.GET(Year, Week, "Employee No.");
                                 GetHoursFromEmployeeAbsence(HourAccounting);
                               END;
                                }
      { 1100525005;2 ;Action    ;
                      CaptionML=[ENU=Copy hours from posted &hours;
                                 NOR=Kopier timer fra bokf›rte &timer;
                                 SVE=Kopiera timmar fr†n bokf”rda &timmar];
                      Image=Copy;
                      OnAction=VAR
                                 HourAccounting@1100525000 : Record 11012038;
                               BEGIN
                                 HourAccounting.GET(Year, Week, "Employee No.");
                                 GetHoursFromPostedHours(HourAccounting);
                               END;
                                }
      { 1100525004;2 ;Action    ;
                      CaptionML=[ENU=Copy Project/Service Order History;
                                 NOR=Kopier prosjekt-/Serviceordrehistorikk;
                                 SVE=Kopiera projekt-/serviceorderhistorik];
                      Image=Copy;
                      OnAction=VAR
                                 HourAccounting@1100525000 : Record 11012038;
                               BEGIN
                                 HourAccounting.GET(Year, Week, "Employee No.");
                                 GetProjAndServiceOrderData(HourAccounting);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 1100485902;2;Field  ;
                SourceExpr="Hour Set";
                Visible=FALSE }

    { 1210190014;2;Field  ;
                SourceExpr=Type;
                OnValidate=BEGIN
                             SetFieldsEditable;
                           END;
                            }

    { 2   ;2   ;Field     ;
                SourceExpr="Receiving Company";
                Visible=FALSE;
                OnValidate=BEGIN
                             SetFieldsEditable;
                           END;
                            }

    { 1210190012;2;Field  ;
                SourceExpr="Cost Code";
                Editable=CostCodeEditable;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;
                            }

    { 1100527551;2;Field  ;
                CaptionML=ENU=Cost Code Description;
                SourceExpr=GetCostCodeDescription;
                Visible=FALSE;
                Editable=FALSE }

    { 1210190000;2;Field  ;
                SourceExpr="Service Order No.";
                Enabled=ServiceEnabled;
                Editable=ServiceDataEditable;
                OnValidate=BEGIN
                             SetFieldsEditable;
                           END;
                            }

    { 1100485012;2;Field  ;
                DrillDown=No;
                SourceExpr="Service Order Description";
                Visible=FALSE }

    { 1210190002;2;Field  ;
                SourceExpr="Service Location No.";
                Enabled=ServiceEnabled;
                Editable=ServiceDataEditable }

    { 1100485010;2;Field  ;
                SourceExpr="Additional Cost (Service)";
                Visible=FALSE }

    { 4   ;2   ;Field     ;
                SourceExpr="Project No.";
                Editable=ProjectNoEditable;
                OnValidate=BEGIN
                             SetFieldsEditable;
                           END;
                            }

    { 11012000;2;Field    ;
                DrillDown=No;
                SourceExpr="Project Description";
                Visible=FALSE }

    { 1100530000;2;Field  ;
                DrillDown=No;
                SourceExpr="Project City";
                Visible=FALSE }

    { 8   ;2   ;Field     ;
                SourceExpr="Extension Contract";
                Visible=FALSE;
                Editable=ExtensionContractEditable }

    { 1100485002;2;Field  ;
                SourceExpr="Rental Unit";
                Visible=FALSE;
                Editable=RentalUnitEditable }

    { 1210190010;2;Field  ;
                SourceExpr="Estimate No.";
                Visible=FALSE }

    { 1210190008;2;Field  ;
                SourceExpr="Try-out No.";
                Visible=FALSE }

    { 1100485904;2;Field  ;
                SourceExpr="Plant Location";
                Enabled=PlantEnabled;
                OnControlAddIn=BEGIN
                                 SetFieldsEditable;
                               END;
                                }

    { 1100485906;2;Field  ;
                SourceExpr="Plant Type";
                Enabled=PlantEnabled }

    { 1100485908;2;Field  ;
                SourceExpr="Plant No.";
                Enabled=PlantEnabled }

    { 1100485914;2;Field  ;
                SourceExpr="Job Notice No.";
                Visible=FALSE }

    { 1100485912;2;Field  ;
                SourceExpr="Plant Rate Code";
                Enabled=PlantRateEnabled;
                Editable=PlantRateCodeEditable }

    { 1100485910;2;Field  ;
                SourceExpr="Cost Component Plant";
                Enabled=PlantEnabled }

    { 1100529600;2;Field  ;
                SourceExpr="Resource Req. Receiv. Company";
                Visible=FALSE;
                Editable=ResourceRequestEditable }

    { 1100529001;2;Field  ;
                SourceExpr="Resource Request No.";
                Editable=ResourceRequestEditable }

    { 1100529000;2;Field  ;
                DrillDown=No;
                CaptionML=[ENU=Request Description;
                           SVE=F”rfr†gan beskrivning];
                SourceExpr=ResourceRequestDescription();
                Visible=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr=Element;
                Editable=ElementEditable }

    { 1100525000;2;Field  ;
                DrillDown=No;
                SourceExpr="Element Description";
                Visible=FALSE;
                Editable=FALSE }

    { 1100409000;2;Field  ;
                SourceExpr="Department Code";
                OnValidate=BEGIN
                             //**4PS.sn
                             DPA_ChkDepartmentCodeAllowed(DPA_IsHardFilter);
                             //**4PS.en
                           END;
                            }

    { 10  ;2   ;Field     ;
                SourceExpr="Cost Object";
                LookupPageID=Cost Object List;
                OnValidate=BEGIN
                             SetFieldsEditable;
                             CurrPage.UPDATE;
                           END;
                            }

    { 1100485014;2;Field  ;
                SourceExpr="Cost Component";
                Editable=CostComponentEditable }

    { 1100485000;2;Field  ;
                DrillDown=No;
                SourceExpr="Cost Object Description";
                Visible=FALSE }

    { 12  ;2   ;Field     ;
                SourceExpr="Wage Component";
                OnValidate=VAR
                             SeSetup@1100583000 : Record 11128004;
                             TextRFC1097@1100583001 : TextConst 'NOR=Du kan ikke endre l›nnstypen for indirekte linjer;SVE=Du kan ej „ndra p† l”nearten f”r indirekta rader;ENG=You cannot change the salary type for indirect lines';
                           BEGIN
                             //ORANGO.PR
                             //RFC-1097
                             IF SeSetup.GET(SeSetup."Line type"::Setup,'TIME','INDIRECT') THEN BEGIN
                               IF SeSetup."Value (bool)" AND (Type = Type::Indirect) AND ("Wage Component" <> '') THEN BEGIN
                                 ERROR('%1',TextRFC1097);
                                 "Wage Component" := xRec."Wage Component";
                                 EXIT;
                               END;
                             END;
                             //RFC-1097
                             //ORANGO.PR
                             SetFieldsEditable;
                             CurrPage.UPDATE;
                           END;

                OnLookup=VAR
                           SeSetup@1000000000 : Record 11128004;
                           TextRFC1097@1000000001 : TextConst 'NOR=Du kan ikke endre l›nnstypen for indirekte linjer;SVE=Du kan ej „ndra p† l”nearten f”r indirekta rader;ENG=You cannot change the salary type for indirect lines';
                         BEGIN
                           //ORANGO.PR
                           //RFC-1097
                           IF SeSetup.GET(SeSetup."Line type"::Setup,'TIME','INDIRECT') THEN BEGIN
                             IF SeSetup."Value (bool)" AND (Type = Type::Indirect) AND ("Wage Component" <> '') THEN BEGIN
                               ERROR('%1',TextRFC1097);
                               "Wage Component" := xRec."Wage Component";
                               EXIT;
                             END;
                           END;
                           //RFC-1097
                           //ORANGO.PR
                           CurrPage.UPDATE;
                         END;
                          }

    { 1210190020;2;Field  ;
                DrillDown=No;
                SourceExpr=Description;
                Visible=FALSE }

    { 1210190026;2;Field  ;
                SourceExpr=Chargeable;
                Visible=FALSE }

    { 1100485006;2;Field  ;
                SourceExpr="Posting Date";
                Visible=FALSE;
                Editable=PostingDateEditable }

    { 1100525001;2;Field  ;
                Name=Hours of Registration Day;
                CaptionML=[ENU=Hours;
                           NOR="Timer ";
                           SVE=Timmar];
                DecimalPlaces=0:3;
                SourceExpr=HoursOfRegistrationDay;
                Editable=HoursEditable;
                OnValidate=BEGIN
                             FillHoursOfHourAccountingLine;
                             CurrPage.UPDATE;
                           END;
                            }

    { 28  ;2   ;Field     ;
                SourceExpr="Total Line";
                Visible=FALSE }

    { 1210190018;2;Field  ;
                SourceExpr=Quantity;
                Editable=QuantityEditable;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;
                            }

    { 1210190022;2;Field  ;
                SourceExpr="Amount (LCY)";
                Editable=AmountLCYEditable;
                HideValue=AmountLCYHideValue }

    { 1210190024;2;Field  ;
                SourceExpr="Cost Plus Entry Created";
                Visible=FALSE;
                Editable=FALSE }

    { 1100485008;2;Field  ;
                SourceExpr=Correction;
                Visible=FALSE }

    { 32  ;2   ;Field     ;
                SourceExpr=Comment;
                Visible=FALSE }

    { 1100485016;2;Field  ;
                SourceExpr="Department Code Employee";
                Visible=FALSE }

    { 1100485023;2;Field  ;
                SourceExpr="Cost Price Found at";
                Visible=FALSE }

    { 1100485018;2;Field  ;
                SourceExpr="Reason Code";
                Visible=FALSE;
                Editable=ReasonCodeEditable }

    { 1100294000;2;Field  ;
                SourceExpr=Denied }

    { 1100294001;2;Field  ;
                SourceExpr="Denied By" }

    { 1100294002;2;Field  ;
                SourceExpr="Deny Comment" }

  }
  CODE
  {
    VAR
      ServiceSetup@1210190001 : Record 11012800;
      JobsSetup@1100525019 : Record 315;
      DimMgt@1100485001 : Codeunit 408;
      DimValRec@1100485002 : Record 349;
      PlantSetup@1100485003 : Record 11012550;
      ServiceEnabled@19076448 : Boolean INDATASET;
      PlantEnabled@19026736 : Boolean INDATASET;
      PlantRateEnabled@19012926 : Boolean INDATASET;
      AmountLCYHideValue@19047794 : Boolean INDATASET;
      Text002@1100525015 : TextConst 'ENU=The lines of the %1 for %2 %3, %4 %5 and %6 %7 must be refreshed.;NOR=Linjene for %1 for %2 %3, %4 %5 og %6 %7 m† oppdateres.;SVE=Raderna f”r %1 f”r %2 %3, %4 %5 och %6 %7 m†ste uppdateras.';
      HoursOfRegistrationDay@1100525000 : Decimal;
      CostCodeEditable@1100525001 : Boolean INDATASET;
      ServiceDataEditable@1100525002 : Boolean INDATASET;
      ProjectNoEditable@1100525003 : Boolean INDATASET;
      ExtensionContractEditable@1100525004 : Boolean INDATASET;
      PlantRateCodeEditable@1100525017 : Boolean INDATASET;
      RentalUnitEditable@1100525005 : Boolean INDATASET;
      ElementEditable@1100525007 : Boolean INDATASET;
      CostComponentEditable@1100525008 : Boolean INDATASET;
      PostingDateEditable@1100525010 : Boolean INDATASET;
      HoursEditable@1100525011 : Boolean INDATASET;
      QuantityEditable@1100525012 : Boolean INDATASET;
      AmountEditable@1100525006 : Boolean INDATASET;
      AmountLCYEditable@1100525013 : Boolean INDATASET;
      ReasonCodeEditable@1100525014 : Boolean INDATASET;
      ResourceRequestEditable@1100529000 : Boolean INDATASET;
      DPA_IsHardFilter@1100525016 : Boolean;

    PROCEDURE GetHoursFromEmployeeAbsence@1100485000(iHourAccountingRec@1100485000 : Record 11012038);
    BEGIN
      GetHoursFromEmployeeAbsence(iHourAccountingRec);
    END;

    PROCEDURE GetHoursFromPostedHours@1100485001(iHourAccountingRec@1100485000 : Record 11012038);
    BEGIN
      GetHoursFromPostedHours(iHourAccountingRec);
    END;

    PROCEDURE GetProjAndServiceOrderData@1100485003(iHourAccountingRec@1100485000 : Record 11012038);
    BEGIN
      GetProjAndServiceOrderData(iHourAccountingRec);
    END;

    LOCAL PROCEDURE FillHoursOfRegistrationDay@1100525001();
    BEGIN
      CASE "Registration Day" OF
        "Registration Day"::Monday:
          HoursOfRegistrationDay := Monday;
        "Registration Day"::Tuesday:
          HoursOfRegistrationDay := Tuesday;
        "Registration Day"::Wednesday:
          HoursOfRegistrationDay := Wednesday;
        "Registration Day"::Thursday:
          HoursOfRegistrationDay := Thursday;
        "Registration Day"::Friday:
          HoursOfRegistrationDay := Friday;
        "Registration Day"::Saturday:
          HoursOfRegistrationDay := Saturday;
        "Registration Day"::Sunday:
          HoursOfRegistrationDay := Sunday;
      END;
    END;

    LOCAL PROCEDURE FillHoursOfHourAccountingLine@1100525002();
    BEGIN
      CASE "Registration Day" OF
        "Registration Day"::Monday:
          VALIDATE(Monday, HoursOfRegistrationDay);
        "Registration Day"::Tuesday:
          VALIDATE(Tuesday, HoursOfRegistrationDay);
        "Registration Day"::Wednesday:
          VALIDATE(Wednesday, HoursOfRegistrationDay);
        "Registration Day"::Thursday:
          VALIDATE(Thursday, HoursOfRegistrationDay);
        "Registration Day"::Friday:
          VALIDATE(Friday, HoursOfRegistrationDay);
        "Registration Day"::Saturday:
          VALIDATE(Saturday, HoursOfRegistrationDay);
        "Registration Day"::Sunday:
          VALIDATE(Sunday, HoursOfRegistrationDay);
      END;
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    BEGIN
      xRec := Rec;
      ProjDescrOtherCompany();
      CostObjDescr();
      ElementDescription;
      ServiceLocationDescription; // 33633.n

      CALCFIELDS("Total Monday", "Total Tuesday", "Total Wednesday", "Total Thursday", "Total Friday",
        "Total Saturday", "Total Sunday");
      CALCFIELDS("Overtime Monday", "Overtime Tuesday", "Overtime Wednesday", "Overtime Thursday", "Overtime Friday",
        "Overtime Saturday", "Overtime Sunday", "Overtime Hours");
      CALCFIELDS("Norm Hours", "Norm Days", "Normal Hours", "Posted Normal Hours");
      CALCFIELDS("Component Type");

      SetFieldsEditable;
    END;

    LOCAL PROCEDURE SetFieldsEditable@1100525003();
    BEGIN
      CALCFIELDS("Component Type");

      ReasonCodeEditable := "Line No." <> 0;
      PostingDateEditable := CompTypeEditable;

      // SESB.I038 ASH 10.07.2013 >>
      //QuantityEditable := ("Component Type" = "Component Type"::Expenses ) AND ("Wage Component" <>'');
      QuantityEditable := ("Component Type" IN ["Component Type"::Expenses,"Component Type"::"Expense hours"]) AND ("Wage Component" <>'');
      AmountEditable := QuantityEditable;

      // HoursEditable := "Component Type" = "Component Type"::Hours;
      HoursEditable := "Component Type" IN ["Component Type"::Hours,"Component Type"::"Expense hours"];
      // SESB.I038 ASH 10.07.2013 <<

      IF "Cost Object" <> '' THEN BEGIN
        DimValRec.CHANGECOMPANY("Receiving Company");
        DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, '');
        AmountEditable := (
          // SESB.I038 ASH 10.07.2013 >>
          //("Component Type" = "Component Type"::Expenses) AND
          ("Component Type" IN ["Component Type"::Expenses,"Component Type"::"Expense hours"]) AND
          // SESB.I038 ASH 10.07.2013 <<
          (DimValRec.Code <> '') AND
          NOT (DimValRec."Fixed at Hours Accounting")
                         );
      END;

      CostComponentEditable :=
        (("Project No." <> '') AND JobsSetup."Cost Component Editable") OR
        (("Service Order No." <> '') AND ServiceSetup."Cost Component Editable") OR
        (("Project No." = '') AND ("Service Order No." = ''));

      IF Type <> Type::Plant THEN
        ElementEditable := "Project No." <> ''
      ELSE
        ElementEditable := CheckPlantLocLinkedToProject;

      CostCodeEditable := (Type = Type::Indirect);

      PlantRateCodeEditable := (Type = Type::Plant);

      ServiceDataEditable := (Type = Type::Service);
      RentalUnitEditable := ("Project No." <> '');
      ExtensionContractEditable := ("Project No." <> '');
      ProjectNoEditable := (Type = Type::Project) AND ("Connection No." = 0);
      //* When connection then changing not allowed, otherwise the project houraccounting line will be delete at saving.

      AmountLCYEditable := ("Component Type" <> "Component Type"::Expenses); //to prevent showing people's salary
      ResourceRequestEditable := (Type <> Type::Indirect);
    END;

    LOCAL PROCEDURE AmountLCYOnFormat@19010038();
    BEGIN
      CALCFIELDS("Component Type");
      // SESB.I038 ASH 10.07.2013 >>
      // IF "Component Type" <> "Component Type"::Expenses THEN
      IF NOT("Component Type" IN ["Component Type"::Expenses,"Component Type"::"Expense hours"]) THEN
      // SESB.I038 ASH 10.07.2013 <<
        AmountLCYHideValue := TRUE; //to prevent showing people's salary
    END;

    LOCAL PROCEDURE CheckIfHourAccLinesAreRefreshd@1100525000();
    VAR
      HourAccounting@1100525000 : Record 11012038;
    BEGIN
      IF HourAccounting.GET(Year, Week, "Employee No.") THEN
        IF NOT HourAccounting.LinesHaveBeenRefreshed THEN
          ERROR(
            Text002,
            HourAccounting.TABLECAPTION,
            FIELDCAPTION(Year), Year,
            FIELDCAPTION(Week), Week,
            FIELDCAPTION("Employee No."), "Employee No.");
    END;

    BEGIN
    {
      SESB.I038 New Wage Component type
         ASH 10.07.2013 Trigger SetEditable changed
         ASH 10.07.2013 Trigger AmountLCYOnFormat changed

      SESB.I035.I036 FD Message when dissaproving-correcting hours
         VKO 29.07.2013 Control "Denied" added
         VKO 29.07.2013 Control "Denied By" added
         VKO 29.07.2013 Control "Deny Comment" added

      190218 ORANGO.PR RFC-1097 Not allowed to change "Wage Component" if Type = Indirect and SE SETUP - "Setup:Time:Indirect"- Value (bool) is True
    }
    END.
  }
}

