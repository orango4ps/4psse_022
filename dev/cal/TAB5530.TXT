OBJECT Table 5530 Inventory Event Buffer
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW113.00,4PS14.00;
  }
  PROPERTIES
  {
    ReplicateData=No;
    CaptionML=[ENU=Inventory Event Buffer;
               NOR=Buffer for lagerhendelse];
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Entry No.;
                                                              NOR=Lõpenr.;
                                                              SVE=Lîpnr];
                                                   Editable=No }
    { 9   ;   ;Source Line ID      ;RecordID      ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Source Line ID;
                                                              NOR=Kildelinje-ID;
                                                              SVE=Ursprungsrads-ID];
                                                   Editable=No }
    { 10  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Item No.;
                                                              NOR=Varenr.;
                                                              SVE=Artikelnr];
                                                   Editable=No }
    { 11  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Variant Code;
                                                              NOR=Variantkode;
                                                              SVE=Variantkod];
                                                   Editable=No }
    { 12  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Location Code;
                                                              NOR=Lokasjonskode;
                                                              SVE=LagerstÑllekod];
                                                   Editable=No }
    { 14  ;   ;Availability Date   ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Availability Date;
                                                              NOR=Tilgjengelighetsdato];
                                                   Editable=No }
    { 15  ;   ;Type                ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Type;
                                                              NOR=Type;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Inventory,Purchase,Sale,,,Transfer,Component,Production,Service,Job,Forecast,Blanket Sales Order,Plan,Plan Revert,Assembly Order,Assembly Component;
                                                                    NOR=Lager,Kjõp,Salg,,,Overfõring,Komponent,Produksjon,Service,Jobb,Prognose,Rammeordre,Plan,Tilbakestill plan,Monteringsordre,Monteringskomponent];
                                                   OptionString=Inventory,Purchase,Sale,,,Transfer,Component,Production,Service,Job,Forecast,Blanket Sales Order,Plan,Plan Revert,Assembly Order,Assembly Component;
                                                   Editable=No }
    { 20  ;   ;Remaining Quantity (Base);Decimal  ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Remaining Quantity (Base);
                                                              NOR=Restantall (l.enh.);
                                                              SVE=èterstÜende antal (bas)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 21  ;   ;Positive            ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Positive;
                                                              NOR=Positiv;
                                                              SVE=Positiv];
                                                   Editable=No }
    { 22  ;   ;Transfer Direction  ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Transfer Direction;
                                                              NOR=Overfõringsretning];
                                                   OptionCaptionML=[ENU=Outbound,Inbound;
                                                                    NOR=UtgÜende,InngÜende;
                                                                    SVE=AvgÜende,Ankommande];
                                                   OptionString=Outbound,Inbound;
                                                   Editable=No }
    { 23  ;   ;Reserved Quantity (Base);Decimal   ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Reserved Quantity (Base);
                                                              NOR=Reservert antall (l.enh.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 29  ;   ;Action Message      ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Action Message;
                                                              NOR=Handlingsmelding;
                                                              SVE=ètgÑrdsmeddelande];
                                                   OptionCaptionML=[ENU=" ,New,Change Qty.,Reschedule,Resched. & Chg. Qty.,Cancel";
                                                                    NOR=" ,Ny,Endre ant.,Tidsplanl. pÜ nytt,Tidsplanl. pÜ nytt og endre ant.,Kanseller";
                                                                    SVE=" ,Nytt,éndra antal,Omplanera,Omplanera & Ñndra antal,Avbryt"];
                                                   OptionString=[ ,New,Change Qty.,Reschedule,Resched. & Chg. Qty.,Cancel];
                                                   Editable=No }
    { 31  ;   ;Attached to Line No.;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              NOR=Knyttet til linjenr.;
                                                              SVE=Bifogad till radnr];
                                                   Editable=No }
    { 32  ;   ;Forecast Type       ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Forecast Type;
                                                              NOR=Prognosetype;
                                                              SVE=Prognostyp];
                                                   OptionCaptionML=[ENU=,Sales,Component;
                                                                    NOR=,Salg,Komponent];
                                                   OptionString=,Sales,Component;
                                                   Editable=No }
    { 33  ;   ;Derived from Blanket Order;Boolean ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Derived from Blanket Order;
                                                              NOR=Stammer fra rammeordre;
                                                              SVE=HÑmtad frÜn avropsorder];
                                                   Editable=No }
    { 34  ;   ;Ref. Order No.      ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Ref. Order No.;
                                                              NOR=Ref.ordrenr.;
                                                              SVE=Ref. ordernr];
                                                   Editable=No }
    { 35  ;   ;Orig. Quantity (Base);Decimal      ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Orig. Quantity (Base);
                                                              NOR=Oppr. antall (lagerenhet)];
                                                   Editable=No }
    { 37  ;   ;Ref. Order Type     ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Ref. Order Type;
                                                              NOR=Ref.ordretype;
                                                              SVE=Ref. ordertyp];
                                                   OptionCaptionML=[ENU=" ,Purchase,Prod. Order,Assembly,Transfer";
                                                                    NOR=" ,Kjõp,Prod.ordre,Montering,Overfõring"];
                                                   OptionString=[ ,Purchase,Prod. Order,Assembly,Transfer];
                                                   Editable=No }
    { 38  ;   ;Ref. Order Line No. ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Ref. Order Line No.;
                                                              NOR=Ref.ordrelinjenr.;
                                                              SVE=Ref. orderradnr];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Availability Date,Type                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RecRef@1000 : RecordRef;

    [External]
    PROCEDURE TransferFromSales@1(SalesLine@1000 : Record 37);
    VAR
      SalesLineReserve@1002 : Codeunit 99000832;
      RemQty@1001 : Decimal;
    BEGIN
      IF SalesLine.Type <> SalesLine.Type::Item THEN
        EXIT;

      INIT;
      RecRef.GETTABLE(SalesLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := SalesLine."No.";
      "Variant Code" := SalesLine."Variant Code";
      "Location Code" := SalesLine."Location Code";
      "Availability Date" := SalesLine."Shipment Date";
      Type := Type::Sale;
      SalesLineReserve.ReservQuantity(SalesLine,RemQty,"Remaining Quantity (Base)");
      SalesLine.CALCFIELDS("Reserved Qty. (Base)");
      "Remaining Quantity (Base)" := -"Remaining Quantity (Base)";
      "Reserved Quantity (Base)" := -SalesLine."Reserved Qty. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
      "Derived from Blanket Order" := SalesLine."Blanket Order No." <> '';
      IF "Derived from Blanket Order" THEN BEGIN
        "Ref. Order No." := SalesLine."Blanket Order No.";
        "Ref. Order Line No." := SalesLine."Blanket Order Line No.";
      END;

      OnAfterTransferFromSales(Rec,SalesLine);
    END;

    [External]
    PROCEDURE TransferFromSalesReturn@15(SalesLine@1000 : Record 37);
    VAR
      SalesLineReserve@1002 : Codeunit 99000832;
      RemQty@1001 : Decimal;
    BEGIN
      IF SalesLine.Type <> SalesLine.Type::Item THEN
        EXIT;

      INIT;
      RecRef.GETTABLE(SalesLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := SalesLine."No.";
      "Variant Code" := SalesLine."Variant Code";
      "Location Code" := SalesLine."Location Code";
      "Availability Date" := SalesLine."Shipment Date";
      Type := Type::Sale;
      SalesLineReserve.ReservQuantity(SalesLine,RemQty,"Remaining Quantity (Base)");
      SalesLine.CALCFIELDS("Reserved Qty. (Base)");
      "Remaining Quantity (Base)" := -"Remaining Quantity (Base)";
      "Reserved Quantity (Base)" := -SalesLine."Reserved Qty. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
      "Derived from Blanket Order" := SalesLine."Blanket Order No." <> '';
      IF "Derived from Blanket Order" THEN BEGIN
        "Ref. Order No." := SalesLine."Blanket Order No.";
        "Ref. Order Line No." := SalesLine."Blanket Order Line No.";
      END;

      OnAfterTransferFromSalesReturn(Rec,SalesLine);
    END;

    [External]
    PROCEDURE TransferFromProdComp@2(ProdOrderComp@1000 : Record 5407);
    BEGIN
      INIT;
      RecRef.GETTABLE(ProdOrderComp);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := ProdOrderComp."Item No.";
      "Variant Code" := ProdOrderComp."Variant Code";
      "Location Code" := ProdOrderComp."Location Code";
      "Availability Date" := ProdOrderComp."Due Date";
      Type := Type::Component;
      ProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
      "Remaining Quantity (Base)" := -ProdOrderComp."Remaining Qty. (Base)";
      "Reserved Quantity (Base)" := -ProdOrderComp."Reserved Qty. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);

      OnAfterTransferFromProdComp(Rec,ProdOrderComp);
    END;

    [External]
    PROCEDURE TransferFromJobNeed@3(JobPlanningLine@1000 : Record 11020401);
    BEGIN
      IF JobPlanningLine.Type <> JobPlanningLine.Type::Item THEN
        EXIT;

      INIT;
      RecRef.GETTABLE(JobPlanningLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := JobPlanningLine."No.";
      "Variant Code" := JobPlanningLine."Variant Code";
      "Location Code" := JobPlanningLine."Location Code";
      "Availability Date" := JobPlanningLine."Planning Date";
      Type := Type::Job;
      JobPlanningLine.CALCFIELDS("Reserved Qty. (Base)");
      "Remaining Quantity (Base)" := -JobPlanningLine."Remaining Qty. (Base)";
      "Reserved Quantity (Base)" := -JobPlanningLine."Reserved Qty. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);

      OnAfterTransferFromJobNeed(Rec,JobPlanningLine);
    END;

    [External]
    PROCEDURE TransferFromServiceNeed@4(ServLine@1000 : Record 5902);
    VAR
      ServLineReserve@1002 : Codeunit 99000842;
      RemQty@1001 : Decimal;
    BEGIN
      IF ServLine.Type <> ServLine.Type::Item THEN
        EXIT;

      INIT;
      RecRef.GETTABLE(ServLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := ServLine."No.";
      "Variant Code" := ServLine."Variant Code";
      "Location Code" := ServLine."Location Code";
      "Availability Date" := ServLine."Needed by Date";
      Type := Type::Service;
      ServLineReserve.ReservQuantity(ServLine,RemQty,"Remaining Quantity (Base)");
      ServLine.CALCFIELDS("Reserved Qty. (Base)");
      "Remaining Quantity (Base)" := -"Remaining Quantity (Base)";
      "Reserved Quantity (Base)" := -ServLine."Reserved Qty. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);

      OnAfterTransferFromServiceNeed(Rec,ServLine);
    END;

    [External]
    PROCEDURE TransferFromOutboundTransOrder@9(TransLine@1000 : Record 5741);
    BEGIN
      INIT;
      RecRef.GETTABLE(TransLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := TransLine."Item No.";
      "Variant Code" := TransLine."Variant Code";
      "Location Code" := TransLine."Transfer-from Code";
      "Availability Date" := TransLine."Shipment Date";
      Type := Type::Transfer;
      TransLine.CALCFIELDS("Reserved Qty. Outbnd. (Base)");
      "Remaining Quantity (Base)" := -TransLine."Outstanding Qty. (Base)";
      "Reserved Quantity (Base)" := -TransLine."Reserved Qty. Outbnd. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
      "Transfer Direction" := "Transfer Direction"::Outbound;

      OnAfterTransferFromOutboundTransfer(Rec,TransLine);
    END;

    [External]
    PROCEDURE TransferFromPlanProdComp@5(PlngComp@1000 : Record 99000829);
    VAR
      ReqLine@1001 : Record 246;
    BEGIN
      INIT;
      ReqLine.GET(PlngComp."Worksheet Template Name",PlngComp."Worksheet Batch Name",PlngComp."Worksheet Line No.");
      RecRef.GETTABLE(PlngComp);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := PlngComp."Item No.";
      "Variant Code" := PlngComp."Variant Code";
      "Location Code" := PlngComp."Location Code";
      "Availability Date" := PlngComp."Due Date";
      Type := Type::Plan;
      PlngComp.CALCFIELDS("Reserved Qty. (Base)");
      "Remaining Quantity (Base)" := -PlngComp."Expected Quantity (Base)";
      "Reserved Quantity (Base)" := -PlngComp."Reserved Qty. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
      "Action Message" := ReqLine."Action Message";
      "Ref. Order No." := ReqLine."Ref. Order No.";
      "Ref. Order Type" := GetRefOrderTypeFromReqLine(ReqLine."Ref. Order Type");

      OnAfterTransferFromPlanProdComp(Rec,PlngComp,ReqLine);
    END;

    [External]
    PROCEDURE TransferFromReqLineTransDemand@16(ReqLine@1000 : Record 246);
    BEGIN
      IF ReqLine.Type <> ReqLine.Type::Item THEN
        EXIT;

      INIT;
      RecRef.GETTABLE(ReqLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := ReqLine."No.";
      "Variant Code" := ReqLine."Variant Code";
      "Location Code" := ReqLine."Transfer-from Code";
      "Availability Date" := ReqLine."Transfer Shipment Date";
      Type := Type::Transfer;
      ReqLine.CALCFIELDS("Reserved Qty. (Base)");
      "Remaining Quantity (Base)" := -ReqLine."Quantity (Base)";
      "Reserved Quantity (Base)" := -ReqLine."Reserved Qty. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
      "Action Message" := ReqLine."Action Message";
      "Ref. Order No." := ReqLine."Ref. Order No.";
      "Ref. Order Type" := GetRefOrderTypeFromReqLine(ReqLine."Ref. Order Type");
      // Notice: Planned outbound transfer uses an opposite direction of transfer
      "Transfer Direction" := 1;

      OnAfterTransferFromReqLineTransDemand(Rec,ReqLine);
    END;

    [External]
    PROCEDURE TransferInventoryQty@6(ItemLedgEntry@1001 : Record 32);
    BEGIN
      INIT;
      RecRef.GETTABLE(ItemLedgEntry);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := ItemLedgEntry."Item No.";
      "Variant Code" := ItemLedgEntry."Variant Code";
      "Location Code" := ItemLedgEntry."Location Code";
      "Availability Date" := 0D;
      Type := Type::Inventory;
      "Remaining Quantity (Base)" := ItemLedgEntry."Remaining Quantity";
      //"Reserved Quantity (Base)" := CalcReservedQuantity(ItemLedgEntry);//**4PS.o
      "Reserved Quantity (Base)" := CalcReservedQuantity4PS(ItemLedgEntry);//**4PS.n

      Positive := NOT ("Remaining Quantity (Base)" < 0);

      OnAfterTransferInventoryQty(Rec,ItemLedgEntry);
    END;

    [External]
    PROCEDURE TransferFromPurchase@7(PurchLine@1002 : Record 39);
    VAR
      PurchLineReserve@1001 : Codeunit 99000834;
    BEGIN
      IF PurchLine.Type <> PurchLine.Type::Item THEN
        EXIT;

      INIT;
      RecRef.GETTABLE(PurchLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := PurchLine."No.";
      "Variant Code" := PurchLine."Variant Code";
      "Location Code" := PurchLine."Location Code";
      "Availability Date" := PurchLine."Expected Receipt Date";
      Type := Type::Purchase;
      PurchLine.CALCFIELDS("Reserved Qty. (Base)");
      "Remaining Quantity (Base)" := -PurchLineReserve.ReservQuantity(PurchLine);
      "Reserved Quantity (Base)" := PurchLine."Reserved Qty. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);

      OnAfterTransferFromPurchase(Rec,PurchLine);
    END;

    [External]
    PROCEDURE TransferFromPurchReturn@17(PurchLine@1002 : Record 39);
    VAR
      PurchLineReserve@1001 : Codeunit 99000834;
    BEGIN
      IF PurchLine.Type <> PurchLine.Type::Item THEN
        EXIT;

      INIT;
      RecRef.GETTABLE(PurchLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := PurchLine."No.";
      "Variant Code" := PurchLine."Variant Code";
      "Location Code" := PurchLine."Location Code";
      "Availability Date" := PurchLine."Expected Receipt Date";
      Type := Type::Purchase;
      PurchLine.CALCFIELDS("Reserved Qty. (Base)");
      "Remaining Quantity (Base)" := -PurchLineReserve.ReservQuantity(PurchLine);
      "Reserved Quantity (Base)" := PurchLine."Reserved Qty. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);

      OnAfterTransferFromPurchReturn(Rec,PurchLine);
    END;

    [External]
    PROCEDURE TransferFromProdOrder@8(ProdOrderLine@1000 : Record 5406);
    BEGIN
      INIT;
      RecRef.GETTABLE(ProdOrderLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := ProdOrderLine."Item No.";
      "Variant Code" := ProdOrderLine."Variant Code";
      "Location Code" := ProdOrderLine."Location Code";
      "Availability Date" := ProdOrderLine."Due Date";
      Type := Type::Production;
      ProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
      "Remaining Quantity (Base)" := ProdOrderLine."Remaining Qty. (Base)";
      "Reserved Quantity (Base)" := ProdOrderLine."Reserved Qty. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);

      OnAfterTransferFromProdOrder(Rec,ProdOrderLine);
    END;

    [External]
    PROCEDURE TransferFromInboundTransOrder@14(TransLine@1000 : Record 5741);
    BEGIN
      INIT;
      RecRef.GETTABLE(TransLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := TransLine."Item No.";
      "Variant Code" := TransLine."Variant Code";
      "Location Code" := TransLine."Transfer-to Code";
      "Availability Date" := TransLine."Receipt Date";
      Type := Type::Transfer;
      TransLine.CALCFIELDS("Reserved Qty. Inbnd. (Base)","Reserved Qty. Shipped (Base)");
      "Remaining Quantity (Base)" := TransLine."Quantity (Base)" - TransLine."Qty. Received (Base)";
      "Reserved Quantity (Base)" := TransLine."Reserved Qty. Inbnd. (Base)" + TransLine."Reserved Qty. Shipped (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
      "Transfer Direction" := "Transfer Direction"::Inbound;

      OnAfterTransferFromInboundTransOrder(Rec,TransLine);
    END;

    [External]
    PROCEDURE TransferFromReqLine@10(ReqLine@1000 : Record 246;AtLocation@1001 : Code[10];AtDate@1002 : Date;DeltaQtyBase@1003 : Decimal;RecID@1004 : RecordID);
    BEGIN
      IF ReqLine.Type <> ReqLine.Type::Item THEN
        EXIT;

      INIT;
      "Source Line ID" := RecID;
      "Item No." := ReqLine."No.";
      "Variant Code" := ReqLine."Variant Code";
      "Location Code" := AtLocation;
      "Availability Date" := AtDate;
      Type := Type::Plan;
      ReqLine.CALCFIELDS("Reserved Qty. (Base)");
      "Remaining Quantity (Base)" := DeltaQtyBase;
      "Reserved Quantity (Base)" := ReqLine."Reserved Qty. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
      "Action Message" := ReqLine."Action Message";
      "Ref. Order No." := ReqLine."Ref. Order No.";
      "Ref. Order Type" := GetRefOrderTypeFromReqLine(ReqLine."Ref. Order Type");

      OnAfterTransferFromReqLine(Rec,ReqLine);
    END;

    [External]
    PROCEDURE TransferFromForecast@11(ProdForecastEntry@1000 : Record 99000852;UnconsumedQtyBase@1001 : Decimal;ForecastOnLocation@1003 : Boolean);
    BEGIN
      INIT;
      RecRef.GETTABLE(ProdForecastEntry);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := ProdForecastEntry."Item No.";
      "Variant Code" := '';
      IF ForecastOnLocation THEN
        "Location Code" := ProdForecastEntry."Location Code"
      ELSE
        "Location Code" := '';
      "Availability Date" := ProdForecastEntry."Forecast Date";
      Type := Type::Forecast;
      IF ProdForecastEntry."Component Forecast" THEN
        "Forecast Type" := "Forecast Type"::Component
      ELSE
        "Forecast Type" := "Forecast Type"::Sales;
      "Remaining Quantity (Base)" := -UnconsumedQtyBase;
      "Reserved Quantity (Base)" := 0;
      "Orig. Quantity (Base)" := -ProdForecastEntry."Forecast Quantity (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);

      OnAfterTransferFromForecast(Rec,ProdForecastEntry);
    END;

    [External]
    PROCEDURE TransferFromSalesBlanketOrder@12(SalesLine@1000 : Record 37;UnconsumedQtyBase@1003 : Decimal);
    BEGIN
      IF SalesLine.Type <> SalesLine.Type::Item THEN
        EXIT;

      INIT;
      RecRef.GETTABLE(SalesLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := SalesLine."No.";
      "Variant Code" := SalesLine."Variant Code";
      "Location Code" := SalesLine."Location Code";
      "Availability Date" := SalesLine."Shipment Date";
      Type := Type::"Blanket Sales Order";
      "Remaining Quantity (Base)" := -UnconsumedQtyBase;
      "Reserved Quantity (Base)" := 0;
      "Orig. Quantity (Base)" := -SalesLine."Quantity (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);

      OnAfterTransferFromSalesBlanketOrder(Rec,SalesLine);
    END;

    [External]
    PROCEDURE PlanRevertEntry@13(InvtEventBuf@1000 : Record 5530;ParentActionMessage@1001 : Option);
    BEGIN
      Rec := InvtEventBuf;
      Type := Type::"Plan Revert";
      "Remaining Quantity (Base)" := -"Remaining Quantity (Base)";
      "Reserved Quantity (Base)" := 0;
      Positive := NOT ("Remaining Quantity (Base)" < 0);
      "Action Message" := ParentActionMessage;
      "Attached to Line No." := InvtEventBuf."Entry No.";
    END;

    [External]
    PROCEDURE TransferFromAsmOrder@18(AssemblyHeader@1000 : Record 900);
    BEGIN
      INIT;
      Type := Type::"Assembly Order";
      RecRef.GETTABLE(AssemblyHeader);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := AssemblyHeader."Item No.";
      "Variant Code" := AssemblyHeader."Variant Code";
      "Location Code" := AssemblyHeader."Location Code";
      "Availability Date" := AssemblyHeader."Due Date";
      AssemblyHeader.CALCFIELDS("Reserved Qty. (Base)");
      "Remaining Quantity (Base)" := AssemblyHeader."Remaining Quantity (Base)";
      "Reserved Quantity (Base)" := AssemblyHeader."Reserved Qty. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);

      OnAfterTransferFromAsmOrder(Rec,AssemblyHeader);
    END;

    [External]
    PROCEDURE TransferFromAsmOrderLine@19(AssemblyLine@1000 : Record 901);
    BEGIN
      INIT;
      Type := Type::"Assembly Component";
      RecRef.GETTABLE(AssemblyLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := AssemblyLine."No.";
      "Variant Code" := AssemblyLine."Variant Code";
      "Location Code" := AssemblyLine."Location Code";
      "Availability Date" := AssemblyLine."Due Date";
      AssemblyLine.CALCFIELDS("Reserved Qty. (Base)");
      "Remaining Quantity (Base)" := -AssemblyLine."Remaining Quantity (Base)";
      "Reserved Quantity (Base)" := -AssemblyLine."Reserved Qty. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);

      OnAfterTransferFromAsmOrderLine(Rec,AssemblyLine);
    END;

    LOCAL PROCEDURE GetRefOrderTypeFromReqLine@20(ReqLineRefOrderType@1000 : Option) : Integer;
    VAR
      ReqLine@1001 : Record 246;
    BEGIN
      CASE ReqLineRefOrderType OF
        ReqLine."Ref. Order Type"::" ":
          EXIT("Ref. Order Type"::" ");
        ReqLine."Ref. Order Type"::Purchase:
          EXIT("Ref. Order Type"::Purchase);
        ReqLine."Ref. Order Type"::"Prod. Order":
          EXIT("Ref. Order Type"::"Prod. Order");
        ReqLine."Ref. Order Type"::Transfer:
          EXIT("Ref. Order Type"::Transfer);
        ReqLine."Ref. Order Type"::Assembly:
          EXIT("Ref. Order Type"::Assembly);
      END;
    END;

    [External]
    PROCEDURE CalcReservedQuantity@22(ItemLedgEntry@1000 : Record 32) : Decimal;
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      ReservEntry.SETRANGE("Source ID",'');
      ReservEntry.SETRANGE("Source Type",DATABASE::"Item Ledger Entry");
      ReservEntry.SETRANGE("Source Subtype",0);
      ReservEntry.SETRANGE("Item No.",ItemLedgEntry."Item No.");
      ReservEntry.SETRANGE("Location Code",ItemLedgEntry."Location Code");
      ReservEntry.SETRANGE("Variant Code",ItemLedgEntry."Variant Code");
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
      ReservEntry.CALCSUMS("Quantity (Base)");
      EXIT(ReservEntry."Quantity (Base)");
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromSales@21(VAR InventoryEventBuffer@1000 : Record 5530;SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromSalesReturn@23(VAR InventoryEventBuffer@1001 : Record 5530;SalesLine@1000 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromProdComp@24(VAR InventoryEventBuffer@1000 : Record 5530;ProdOrderComponent@1001 : Record 5407);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromJobNeed@26(VAR InventoryEventBuffer@1000 : Record 5530;JobPlanningLine@1001 : Record 11020401);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromServiceNeed@27(VAR InventoryEventBuffer@1000 : Record 5530;ServiceLine@1001 : Record 5902);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromOutboundTransfer@28(VAR InventoryEventBuffer@1000 : Record 5530;TransferLine@1001 : Record 5741);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromPlanProdComp@29(VAR InventoryEventBuffer@1000 : Record 5530;PlanningComponent@1001 : Record 99000829;RequisitionLine@1002 : Record 246);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromReqLineTransDemand@30(VAR InventoryEventBuffer@1000 : Record 5530;RequisitionLine@1001 : Record 246);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferInventoryQty@31(VAR InventoryEventBuffer@1000 : Record 5530;ItemLedgerEntry@1001 : Record 32);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromPurchase@32(VAR InventoryEventBuffer@1000 : Record 5530;PurchaseLine@1001 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromPurchReturn@33(VAR InventoryEventBuffer@1000 : Record 5530;PurchaseLine@1001 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromProdOrder@34(VAR InventoryEventBuffer@1000 : Record 5530;ProdOrderLine@1001 : Record 5406);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromInboundTransOrder@35(VAR InventoryEventBuffer@1000 : Record 5530;TransferLine@1001 : Record 5741);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromReqLine@36(VAR InventoryEventBuffer@1000 : Record 5530;RequisitionLine@1001 : Record 246);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromForecast@37(VAR InventoryEventBuffer@1000 : Record 5530;ProdForecastEntry@1001 : Record 99000852);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromSalesBlanketOrder@38(VAR InventoryEventBuffer@1000 : Record 5530;SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromAsmOrder@39(VAR InventoryEventBuffer@1000 : Record 5530;AssemblyHeader@1001 : Record 900);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferFromAsmOrderLine@40(VAR InventoryEventBuffer@1000 : Record 5530;AssemblyLine@1001 : Record 901);
    BEGIN
    END;

    PROCEDURE CalcReservedQuantity4PS@1100525000(ItemLedgEntry@1000 : Record 32) : Decimal;
    VAR
      ItemJournalLine@1100525000 : Record 83;
    BEGIN
      ItemJournalLine.RESET;
      ItemJournalLine.SETRANGE("Item No.", ItemLedgEntry."Item No.");
      ItemJournalLine.SETRANGE("Entry Type", ItemJournalLine."Entry Type"::Sale);
      ItemJournalLine.CALCSUMS("Quantity (Reserved)");
      EXIT(ItemJournalLine."Quantity (Reserved)");
    END;

    BEGIN
    END.
  }
}

