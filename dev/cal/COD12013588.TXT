OBJECT Codeunit 12013588 Exflow-Get Receipt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF501000;
  }
  PROPERTIES
  {
    TableNo=12013588;
    OnRun=VAR
            ExFlowSetup@1100285000 : Record 12013601;
            PurchRcptLine@1100285002 : Record 121;
            GetReceipts@1100285001 : Page 12013589;
          BEGIN
            ExFlowSetup.GET;
            ExFlowSetup.TESTFIELD("Order Applies-to",ExFlowSetup."Order Applies-to"::"Receipts Lines");

            PurchHeader.GET("Inbound Document No.");
            PurchHeader.TESTFIELD("Document Type",PurchHeader."Document Type"::Invoice);

            PurchRcptLine.SETCURRENTKEY("Pay-to Vendor No.");
            PurchRcptLine.SETRANGE("Pay-to Vendor No.",PurchHeader."Pay-to Vendor No.");
            PurchRcptLine.SETRANGE("Buy-from Vendor No.",PurchHeader."Buy-from Vendor No.");
            PurchRcptLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>0');
            PurchRcptLine.SETRANGE("Currency Code",PurchHeader."Currency Code");

            GetReceipts.SETTABLEVIEW(PurchRcptLine);
            GetReceipts.LOOKUPMODE := TRUE;
            GetReceipts.SetPurchHeader(PurchHeader);
            IF (GetReceipts.RUNMODAL = ACTION::LookupOK) THEN
              DeleteProposedLines(PurchHeader);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The %1 on the %2 %3 and the %4 %5 must be the same.;SVE=%1 p† %2 %3 och %4 %5 m†ste vara samma.';
      PurchHeader@1100285003 : Record 12013587;
      Currency@1100285000 : Record 4;
      Text001@1100285001 : TextConst 'ENU=The program cannot find this purchase line.;SVE=Programmet kan inte hitta denna ink”psrad.';
      CurrencyRead@1100285002 : Boolean;
      EXF000@1100285004 : TextConst 'ENU=Receipt No. %1:;SVE=Inleveransnr %1:';
      EXF001@1100285005 : TextConst 'ENU=Unable to retrieve some of the Reciept lines because they are already matched against another Document;SVE=Det gick inte att h„mta n†gra av inleveransraderna eftersom de redan matchats mot ett annat dokument';

    PROCEDURE CreateInvLines@1(VAR PurchRcptLine2@1000 : Record 121;LineManuallyChanged@1100285010 : Boolean;CalledInBatch@1100285004 : Boolean);
    VAR
      PurchRcptHeader@1100285002 : Record 120;
      PurchLine@1100285000 : Record 12013588;
      PurchRcptLine@1100285006 : Record 121;
      ExFlowSetup@1100285008 : Record 12013601;
      ExFWorkFlowMgt@1100285001 : Codeunit 12013593;
      ExFlowDimMgt@1100285007 : Codeunit 12013605;
      TransferLine@1100285005 : Boolean;
      QtyMatched@1100285009 : Decimal;
      ShowMessage@1100285003 : Boolean;
    BEGIN
      WITH PurchRcptLine2 DO BEGIN
        SETFILTER("Qty. Rcd. Not Invoiced",'<>0');
        IF FIND('-') THEN BEGIN
          PurchLine.LOCKTABLE;
          PurchLine.SETRANGE("Inbound Document No.",PurchHeader."Inbound Document No.");
          PurchLine."Document Type" := PurchHeader."Document Type";
          PurchLine."Inbound Document No." := PurchHeader."Inbound Document No.";

          REPEAT
            IF PurchRcptHeader."No." <> "Document No." THEN BEGIN
              PurchRcptHeader.GET("Document No.");
              TransferLine := TRUE;
              IF PurchRcptHeader."Currency Code" <> PurchHeader."Currency Code" THEN BEGIN
                MESSAGE(
                  Text000,
                  PurchHeader.FIELDCAPTION("Currency Code"),
                  PurchHeader.TABLECAPTION, PurchHeader."Inbound Document No.",
                  PurchRcptHeader.TABLECAPTION,PurchRcptHeader."No.");
                TransferLine := FALSE;
              END;
              IF PurchRcptHeader."Pay-to Vendor No." <> PurchHeader."Pay-to Vendor No." THEN BEGIN
                MESSAGE(
                  Text000,
                  PurchHeader.FIELDCAPTION("Pay-to Vendor No."),
                  PurchHeader.TABLECAPTION, PurchHeader."Inbound Document No.",
                  PurchRcptHeader.TABLECAPTION,PurchRcptHeader."No.");
                TransferLine := FALSE;
              END;
            END;
            IF TransferLine THEN BEGIN
              IF NOT LineMatched(PurchRcptLine2,QtyMatched) THEN BEGIN
                PurchRcptLine := PurchRcptLine2;
                PurchRcptLine.TESTFIELD("VAT Bus. Posting Group",PurchHeader."VAT Bus. Posting Group");

                InsertExvInvLineFromRcptLine(PurchRcptLine,PurchLine,QtyMatched,LineManuallyChanged);

                IF Type = Type::"Charge (Item)" THEN
                  GetItemChargeAssgnt(PurchRcptLine2,PurchLine."Qty. to Invoice");

                ExFWorkFlowMgt.CreateProposals(PurchLine,TRUE,FALSE,TRUE,TRUE);
                PurchLine.MODIFY;
              END ELSE
                ShowMessage:=TRUE; //51
            END;
          UNTIL NEXT = 0;

         IF NOT CalledInBatch THEN
          IF ShowMessage THEN MESSAGE(EXF001); //51

          ExFlowSetup.GET;
          IF ExFlowSetup."Copy Line Dimensions to Header" THEN BEGIN
            PurchLine.RESET;
            PurchLine.SETRANGE("Inbound Document No.",PurchHeader."Inbound Document No.");
            PurchLine.SETFILTER(Quantity, '<>%1', 0);
            IF PurchLine.FINDLAST THEN BEGIN
              PurchHeader.GET(PurchHeader."Inbound Document No.");
              ExFlowDimMgt.UpdateDimHeaderImportWorksheet(PurchHeader);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE SetPurchHeader@2(VAR PurchHeader2@1000 : Record 12013587);
    BEGIN
      PurchHeader.GET(PurchHeader2."Inbound Document No.");
      PurchHeader.TESTFIELD("Document Type",PurchHeader."Document Type"::Invoice);
    END;

    PROCEDURE GetItemChargeAssgnt@5800(VAR PurchRcptLine@1000 : Record 121;QtyToInv@1003 : Decimal);
    VAR
      PurchOrderLine@1001 : Record 39;
      ItemChargeAssgntPurch@1002 : Record 5805;
    BEGIN
      WITH PurchRcptLine DO BEGIN
        IF PurchOrderLine.GET(PurchOrderLine."Document Type"::Order,"Order No.","Order Line No.")
        THEN BEGIN
          ItemChargeAssgntPurch.LOCKTABLE;
          ItemChargeAssgntPurch.RESET;
          ItemChargeAssgntPurch.SETRANGE("Document Type",PurchOrderLine."Document Type");
          ItemChargeAssgntPurch.SETRANGE("Document No.",PurchOrderLine."Document No.");
          ItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchOrderLine."Line No.");
          IF ItemChargeAssgntPurch.FINDFIRST THEN BEGIN
            ItemChargeAssgntPurch.CALCSUMS("Qty. to Assign");
            IF ItemChargeAssgntPurch."Qty. to Assign" <> 0 THEN
              CopyItemChargeAssgnt(
                PurchOrderLine,PurchRcptLine,ItemChargeAssgntPurch."Qty. to Assign",
                QtyToInv / ItemChargeAssgntPurch."Qty. to Assign");
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CopyItemChargeAssgnt@5801(PurchOrderLine@1000 : Record 39;PurchRcptLine@1001 : Record 121;QtyToAssign@1002 : Decimal;QtyFactor@1008 : Decimal);
    VAR
      PurchRcptLine2@1003 : Record 121;
      PurchLine2@1004 : Record 12013588;
      ItemChargeAssgntPurch@1005 : Record 5805;
      ItemChargeAssgntPurch2@1006 : Record 12013594;
      InsertChargeAssgnt@1007 : Boolean;
    BEGIN
      WITH PurchOrderLine DO BEGIN
        ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
        ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
        ItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
        IF ItemChargeAssgntPurch.FIND('-') THEN
          REPEAT
            IF ItemChargeAssgntPurch."Qty. to Assign" <> 0 THEN BEGIN
              ItemChargeAssgntPurch2."Line No." := ItemChargeAssgntPurch."Line No.";
              ItemChargeAssgntPurch2."Item Charge No." := ItemChargeAssgntPurch."Item Charge No.";
              ItemChargeAssgntPurch2."Item No." := ItemChargeAssgntPurch."Item No.";
              ItemChargeAssgntPurch2.Description := ItemChargeAssgntPurch.Description;
              ItemChargeAssgntPurch2."Qty. to Assign" := ItemChargeAssgntPurch."Qty. to Assign";
              ItemChargeAssgntPurch2."Qty. Assigned" := ItemChargeAssgntPurch."Qty. Assigned";
              ItemChargeAssgntPurch2."Unit Cost" := ItemChargeAssgntPurch."Unit Cost";
              ItemChargeAssgntPurch2."Amount to Assign" := ItemChargeAssgntPurch."Amount to Assign";
              ItemChargeAssgntPurch2."Applies-to Doc. Type" := ItemChargeAssgntPurch."Applies-to Doc. Type";
              ItemChargeAssgntPurch2."Applies-to Doc. No." := ItemChargeAssgntPurch."Applies-to Doc. No.";
              ItemChargeAssgntPurch2."Applies-to Doc. Line No." := ItemChargeAssgntPurch."Applies-to Doc. Line No.";
              ItemChargeAssgntPurch2."Applies-to Doc. Line Amount" := ItemChargeAssgntPurch."Applies-to Doc. Line Amount";
              ItemChargeAssgntPurch2."Qty. to Assign" := QtyFactor * ItemChargeAssgntPurch2."Qty. to Assign";

              PurchLine2.SETRANGE("Receipt No.",PurchRcptLine."Document No.");
              PurchLine2.SETRANGE("Receipt Line No.",PurchRcptLine."Line No.");
              IF PurchLine2.FIND('-') THEN
                REPEAT
                  PurchLine2.CALCFIELDS("Qty. to Assign");
                  InsertChargeAssgnt := PurchLine2."Qty. to Assign" <> PurchLine2.Quantity;
                UNTIL (PurchLine2.NEXT = 0) OR InsertChargeAssgnt;

              IF InsertChargeAssgnt THEN BEGIN
                ItemChargeAssgntPurch2."Document Type" := PurchLine2."Document Type";
                ItemChargeAssgntPurch2."Inbound Document No." := PurchLine2."Inbound Document No.";
                ItemChargeAssgntPurch2."Document Line No." := PurchLine2."Line No.";
                ItemChargeAssgntPurch2."Qty. Assigned" := 0;
                IF ABS(QtyToAssign) < ABS(ItemChargeAssgntPurch2."Qty. to Assign") THEN
                  ItemChargeAssgntPurch2."Qty. to Assign" := QtyToAssign;
                IF ABS(PurchLine2.Quantity - PurchLine2."Qty. to Assign") <
                   ABS(ItemChargeAssgntPurch2."Qty. to Assign")
                THEN
                  ItemChargeAssgntPurch2."Qty. to Assign" :=
                    PurchLine2.Quantity - PurchLine2."Qty. to Assign";
                ItemChargeAssgntPurch2.VALIDATE("Unit Cost");

                IF ItemChargeAssgntPurch2."Applies-to Doc. Type" = "Document Type" THEN BEGIN
                  ItemChargeAssgntPurch2."Applies-to Doc. Type" := PurchLine2."Document Type";
                  ItemChargeAssgntPurch2."Applies-to Doc. No." := FORMAT(PurchLine2."Inbound Document No.");
                  PurchRcptLine2.SETCURRENTKEY("Order No.","Order Line No.");
                  PurchRcptLine2.SETRANGE("Order No.",ItemChargeAssgntPurch."Applies-to Doc. No.");
                  PurchRcptLine2.SETRANGE("Order Line No.",ItemChargeAssgntPurch."Applies-to Doc. Line No.");
                  PurchRcptLine2.SETRANGE("Document No.",PurchRcptLine."Document No.");
                  IF PurchRcptLine2.FINDFIRST THEN BEGIN
                    PurchLine2.SETCURRENTKEY("Receipt No.","Receipt Line No.");
                    PurchLine2.SETRANGE("Document Type",PurchLine2."Document Type"::Invoice);
                    PurchLine2.SETRANGE("Receipt No.",PurchRcptLine2."Document No.");
                    PurchLine2.SETRANGE("Receipt Line No.",PurchRcptLine2."Line No.");
                    IF PurchLine2.FIND('-') AND (PurchLine2.Quantity <> 0) THEN
                      ItemChargeAssgntPurch2."Applies-to Doc. Line No." := PurchLine2."Line No."
                    ELSE
                      InsertChargeAssgnt := FALSE;
                  END ELSE
                    InsertChargeAssgnt := FALSE;
                END;
              END;

              IF InsertChargeAssgnt AND (ItemChargeAssgntPurch2."Qty. to Assign" <> 0) THEN BEGIN
                ItemChargeAssgntPurch2.INSERT;
                QtyToAssign := QtyToAssign - ItemChargeAssgntPurch2."Qty. to Assign";
              END;
            END;
          UNTIL ItemChargeAssgntPurch.NEXT = 0;
      END;
    END;

    PROCEDURE DeleteProposedLines@1100285000(ExfPurchDocHeader@1100285003 : Record 12013587);
    VAR
      ExfPurchDocLine@1100285000 : Record 12013588;
    BEGIN
      WITH ExfPurchDocHeader DO BEGIN
        ExfPurchDocLine.RESET;
        ExfPurchDocLine.SuspendStatusCheck(TRUE);
        ExfPurchDocLine.SETRANGE("Inbound Document No.","Inbound Document No.");
        ExfPurchDocLine.SETFILTER("Exflow-Created Entry",'>%1',0);
        ExfPurchDocLine.DELETEALL(TRUE);
      END;
    END;

    PROCEDURE MatchInvLine@1100285001(VAR precExfPuchHead@1100285000 : Record 12013587);
    VAR
      ExFlowSetup@1100285011 : Record 12013601;
      lrecExvPuchLine@1100285004 : Record 12013588;
      lrecExvPuchLine2@1100285005 : Record 12013588;
      PurchRcptLine2@1100285007 : Record 121;
      PurchRcptLine@1100285010 : Record 121;
      NewOutStanding@1100285008 : Boolean;
      FirstMatch@1100285009 : Boolean;
      QtyMatched@1100285012 : Decimal;
      OutStandingQty@1100285013 : Decimal;
    BEGIN
      precExfPuchHead.TESTFIELD("Document Type",PurchHeader."Document Type"::Invoice);
      ExFlowSetup.GET;

      REPEAT
        NewOutStanding := FALSE;
        lrecExvPuchLine.RESET;
        lrecExvPuchLine.SETCURRENTKEY("Outstanding Quantity (Order)");
        lrecExvPuchLine.SETRANGE("Inbound Document No.",precExfPuchHead."Inbound Document No.");
        lrecExvPuchLine.SETFILTER("Outstanding Quantity (Order)", '>%1', 0);
        lrecExvPuchLine.SETRANGE("Check Order Line (OCR)",TRUE);
        lrecExvPuchLine.SETFILTER("Order Line No.",'<>%1',0);
        IF lrecExvPuchLine.FINDSET(TRUE) THEN
          REPEAT
            FirstMatch := FALSE;
            PurchRcptLine.RESET;
            PurchRcptLine.SETCURRENTKEY("Order No.");
            PurchRcptLine.SETRANGE("Pay-to Vendor No.",precExfPuchHead."Pay-to Vendor No.");
            PurchRcptLine.SETRANGE("Currency Code",lrecExvPuchLine."Currency Code");
            PurchRcptLine.SETRANGE("Order No.",lrecExvPuchLine."Order No.");
            CASE ExFlowSetup."Retrieve Lines based on" OF
              ExFlowSetup."Retrieve Lines based on"::"Line No":
                PurchRcptLine.SETRANGE("Order Line No.",lrecExvPuchLine."Order Line No.");
              ExFlowSetup."Retrieve Lines based on"::"Item No":
                PurchRcptLine.SETRANGE("No.",lrecExvPuchLine."No.");
              ExFlowSetup."Retrieve Lines based on"::"Item No with Variants":
                BEGIN
                  PurchRcptLine.SETRANGE("No.",lrecExvPuchLine."No.");
                  PurchRcptLine.SETFILTER("Variant Code", '<>%1', '');
                END;
            END;

            OutStandingQty := lrecExvPuchLine."Outstanding Quantity (Order)";
            PurchRcptLine.SETRANGE("Qty. Rcd. Not Invoiced",lrecExvPuchLine.Quantity);
            IF PurchRcptLine.FINDSET THEN
              REPEAT
                IF NOT LineMatched(PurchRcptLine,QtyMatched) THEN BEGIN
                  lrecExvPuchLine2 := lrecExvPuchLine;
                  PurchRcptLine2 := PurchRcptLine;
                  InsertExvInvLineFromRcptLine(PurchRcptLine2,lrecExvPuchLine2,QtyMatched,FALSE);
                  FirstMatch := TRUE;
                  IF lrecExvPuchLine2."Outstanding Quantity (Order)" > 0 THEN
                    NewOutStanding := TRUE;

                  OutStandingQty := lrecExvPuchLine2."Outstanding Quantity (Order)";
                END;
              UNTIL (PurchRcptLine.NEXT = 0) OR (FirstMatch = TRUE);
            IF OutStandingQty > 0 THEN BEGIN
              PurchRcptLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>%1',0);
              IF PurchRcptLine.FINDSET THEN
                REPEAT
                  IF NOT LineMatched(PurchRcptLine,QtyMatched) THEN BEGIN
                    lrecExvPuchLine2 := lrecExvPuchLine;
                    PurchRcptLine2 := PurchRcptLine;
                    InsertExvInvLineFromRcptLine(PurchRcptLine2,lrecExvPuchLine2,QtyMatched,FALSE);
                    FirstMatch := TRUE;
                    IF lrecExvPuchLine2."Outstanding Quantity (Order)" > 0 THEN
                      NewOutStanding := TRUE;
                  END;
                UNTIL (PurchRcptLine.NEXT = 0) OR (FirstMatch = TRUE);
            END;
          UNTIL lrecExvPuchLine.NEXT = 0;
      UNTIL NewOutStanding = FALSE;
    END;

    PROCEDURE InsertExvInvLineFromRcptLine@1100285002(precPurchRcptLine@1100285002 : Record 121;VAR PurchLine@1000 : Record 12013588;QtyMatched@1100285005 : Decimal;LineManuallyChanged@1100285011 : Boolean);
    VAR
      PurchInvHeader@1010 : Record 12013587;
      PurchOrderHeader@1007 : Record 38;
      PurchOrderLine@1005 : Record 39;
      PurchLine2@1003 : Record 12013588;
      PurchSetup@1011 : Record 312;
      PurchRcptLine@1100285004 : Record 121;
      lrecPurchRcptLine@1100285003 : Record 121;
      ExFlowSetup@1100285001 : Record 12013601;
      Field@1100285006 : Record 2000000041;
      TransferOldExtLines@1002 : Codeunit 379;
      ExFlowWorkFlowMgt@1100285000 : Codeunit 12013593;
      NextLineNo@1001 : Integer;
      ExtTextLine@1006 : Boolean;
      RecRef@1100285007 : RecordRef;
      FldRef@1100285008 : FieldRef;
      RecRef2@1100285010 : RecordRef;
      FldRef2@1100285009 : FieldRef;
    BEGIN
      ExFlowSetup.GET;
      lrecPurchRcptLine := precPurchRcptLine;
      WITH lrecPurchRcptLine DO BEGIN

        SETRANGE("Document No.",PurchRcptLine."Document No.");

        PurchLine2 := PurchLine;

        PurchLine.RESET;
        PurchLine.SETRANGE("Inbound Document No.", PurchLine."Inbound Document No.");
        IF PurchLine.FIND('+') THEN
          NextLineNo := PurchLine."Line No." + 10000
        ELSE
          NextLineNo := 10000;

        IF PurchInvHeader."Inbound Document No." <> PurchLine2."Inbound Document No." THEN
          PurchInvHeader.GET(PurchLine2."Inbound Document No.");

        DisableProposal(PurchInvHeader);

        IF PurchLine."Receipt No." <> "Document No." THEN BEGIN
          PurchLine.INIT;
          PurchLine."Inbound Document No." := PurchLine."Inbound Document No.";
          PurchLine."Line No." := NextLineNo;
          PurchLine."Document Type" := PurchLine2."Document Type";
          PurchLine.Description := STRSUBSTNO(EXF000,"Document No.");
          PurchLine.INSERT;
          NextLineNo := NextLineNo + 10000;
        END;

        TransferOldExtLines.ClearLineNumbers;

        REPEAT
          ExtTextLine := (TransferOldExtLines.GetNewLineNumber("Attached to Line No.") <> 0);

          IF PurchOrderLine.GET(
              PurchOrderLine."Document Type"::Order,"Order No.","Order Line No.")
          THEN BEGIN
            IF (PurchOrderHeader."Document Type" <> PurchOrderLine."Document Type"::Order) OR
               (PurchOrderHeader."No." <> PurchOrderLine."Document No.")
            THEN
              PurchOrderHeader.GET(PurchOrderLine."Document Type"::Order,"Order No.");

            Field.SETRANGE(TableNo, 38);
            Field.SETRANGE("No.",11200); // EU 3-Party Trade
            IF Field.FINDFIRST THEN BEGIN
              RecRef.GETTABLE(PurchOrderHeader);
              FldRef := RecRef.FIELD(11200);
              RecRef2.GETTABLE(PurchInvHeader);
              FldRef2 := RecRef2.FIELD(11200);
              IF (FORMAT(FldRef2.VALUE,0,2) = '0') AND (FORMAT(FldRef.VALUE,0,2) = '1') THEN BEGIN
                FldRef2.VALUE := 1;
                RecRef2.MODIFY;
              END;
            END;

            IF PurchInvHeader."Prices Including VAT" <> PurchOrderHeader."Prices Including VAT" THEN
              InitCurrency("Currency Code");

            IF PurchInvHeader."Prices Including VAT" THEN BEGIN
              IF NOT PurchOrderHeader."Prices Including VAT" THEN
                PurchOrderLine."Direct Unit Cost" :=
                  ROUND(
                    PurchOrderLine."Direct Unit Cost" * (1 + PurchOrderLine."VAT %" / 100),
                    Currency."Unit-Amount Rounding Precision");
            END ELSE BEGIN
              IF PurchOrderHeader."Prices Including VAT" THEN
                PurchOrderLine."Direct Unit Cost" :=
                  ROUND(
                    PurchOrderLine."Direct Unit Cost" / (1 + PurchOrderLine."VAT %" / 100),
                    Currency."Unit-Amount Rounding Precision");
            END;
          END ELSE BEGIN
            IF ExtTextLine THEN BEGIN
              PurchOrderLine.INIT;
              PurchOrderLine."Line No." := "Order Line No.";
              PurchOrderLine.Description := Description;
              PurchOrderLine."Description 2" := "Description 2";
            END ELSE
              ERROR(Text001);
          END;
          PurchLine.INIT;
          PurchLine.TRANSFERFIELDS(PurchOrderLine);
          PurchLine."Inbound Document No." := PurchLine2."Inbound Document No.";
          PurchLine."Common Item No." := PurchLine2."Common Item No.";
          PurchLine."Line No." := NextLineNo;
          PurchLine."Document Type" := PurchLine2."Document Type";

          // OCR Imported lines
          PurchLine."Original No. (Import)" :=PurchLine2."Original No. (Import)";
          PurchLine."Quantity (Import)" := PurchLine2."Quantity (Import)";
          PurchLine."Line Amount (Import)" := PurchLine2."Line Amount (Import)";
          PurchLine."Direct Unit Cost (Import)" := PurchLine2."Direct Unit Cost (Import)";
          PurchLine."Description (Import)" := PurchLine2."Description (Import)";
          PurchLine."Order No. (Import)" := PurchLine2."Order No. (Import)";
          PurchLine."Check Order Line (OCR)" := PurchLine2."Check Order Line (OCR)";
          PurchLine."Line Discount % (Import)" := PurchLine2."Line Discount % (Import)";
          PurchLine."Unit of Measure (Import)" := PurchLine2."Unit of Measure (Import)";
          PurchLine."OCR Imported Line" := PurchLine2."OCR Imported Line";
          PurchLine."OCR Line No." := PurchLine2."OCR Line No.";

          PurchLine."Dimension 1 (Import)" := PurchLine2."Dimension 1 (Import)";
          PurchLine."Dimension 2 (Import)" := PurchLine2."Dimension 2 (Import)";

          PurchLine."Order Matching Method" := PurchLine2."Order Matching Method";

          IF PurchLine.Type > 0 THEN BEGIN
            // OCR
            PurchLine."Original No. (Matching)" :=PurchLine2."Original No. (Matching)";
            PurchLine."Quantity (Matching)" := PurchLine2."Quantity (Matching)";
            PurchLine."Direct Unit Cost (Matching)" := PurchLine2."Direct Unit Cost (Matching)";

            IF PurchLine2."Description (Import)" <> '' THEN
              PurchLine.Description := PurchLine2."Description (Import)";
            IF PurchLine2."Unit of Measure (Import)" <> '' THEN
              PurchLine."Unit of Measure" := PurchLine2."Unit of Measure (Import)";

            // Order
            PurchLine."Order No." := "Order No.";
            PurchLine."Order Line No." := "Order Line No.";

            ExFlowWorkFlowMgt.UpdateMatchedOrderInfo(PurchLine);

            IF PurchLine2."Price Check Inactivated" THEN
              PurchLine."Test Unit Costs" := FALSE
            ELSE
              PurchLine."Test Unit Costs" := ExFlowSetup."Check Unit Cost";

            PurchLine."Matching Comment" := PurchLine2."Matching Comment";

            PurchLine."Purchaser Code" := PurchOrderHeader."Purchaser Code";

            PurchLine."Template Rule" := PurchInvHeader."Template Rule";
            IF PurchLine."First Approver" = '' THEN
              PurchLine."First Approver" := PurchInvHeader."First Approver";

            PurchLine."PO Matched Document" := PurchInvHeader."PO Matched Document";
          END
          ELSE
            PurchLine."OCR Line is Text Only" := TRUE;

          PurchLine."Line manually changed" := LineManuallyChanged;

          PurchLine."Variant Code" := "Variant Code";
          PurchLine."Location Code" := "Location Code";

          PurchLine.ClearFields;

          PurchLine."Receipt No." := "Document No.";
          PurchLine."Receipt Line No." := "Line No.";
          IF NOT ExtTextLine THEN BEGIN
            IF NOT PurchLine."Check Order Line (OCR)" THEN
              PurchLine.VALIDATE(Quantity,Quantity - "Quantity Invoiced" - QtyMatched)
            ELSE BEGIN
              // OCR Line Matching->
              IF (PurchLine2."Outstanding Quantity (Order)" > (Quantity - "Quantity Invoiced" - QtyMatched)) THEN BEGIN
                // Outstanding Quant Overflow
                PurchLine.VALIDATE(Quantity,Quantity - "Quantity Invoiced" - QtyMatched);
                PurchLine."Outstanding Quantity (Order)" := PurchLine2."Outstanding Quantity (Order)" - PurchLine.Quantity;
              END ELSE BEGIN
                // Quantity can be assigned to recipt line
                PurchLine.VALIDATE(Quantity, PurchLine2."Outstanding Quantity (Order)");
                PurchLine."Outstanding Quantity (Order)" := 0;
              END;

              IF PurchLine."Line Amount (Import)" = 0 THEN
                PurchLine."Line Amount (Import)" := ROUND(PurchLine.Quantity * PurchLine."Direct Unit Cost (Matching)"
                                                    * (1 - PurchLine."Line Discount % (Import)"/100),0.01);

              // Source OCRLine unmatched
              IF PurchLine2."Receipt No." = '' THEN
                PurchLine2.DELETE(TRUE)
              ELSE IF PurchLine2."Outstanding Quantity (Order)" > 0 THEN BEGIN
                // Modify the line from which Outstanding Quant was found.
                PurchLine2."Outstanding Quantity (Order)" := 0;
                PurchLine2.MODIFY;
              END;
              // <-OCR Line Matching
            END;

            // OCR->
            IF PurchLine."Direct Unit Cost (Matching)" = 0 THEN
              PurchLine.VALIDATE("Direct Unit Cost",PurchOrderLine."Direct Unit Cost")
            ELSE
              PurchLine.VALIDATE("Direct Unit Cost",PurchLine."Direct Unit Cost (Matching)");

            IF PurchLine."Line Discount % (Import)" = 0 THEN
              PurchLine.VALIDATE("Line Discount %",PurchOrderLine."Line Discount %")
            ELSE
              PurchLine.VALIDATE("Line Discount %",PurchLine."Line Discount % (Import)");

            IF PurchLine."Line Amount (Import)" <> 0 THEN BEGIN
              IF (PurchLine.Quantity <> PurchLine."Quantity (Import)") AND (PurchLine."Quantity (Import)" <> 0)THEN
                PurchLine.VALIDATE("Line Amount", ROUND(PurchLine."Line Amount (Import)"*PurchLine.Quantity/PurchLine."Quantity (Import)",0.01))
              ELSE
                PurchLine.VALIDATE("Line Amount",PurchLine."Line Amount (Import)");
            END;
            // <-OCR

            PurchSetup.GET;
              IF NOT PurchSetup."Calc. Inv. Discount" THEN
              PurchLine.VALIDATE("Inv. Discount Amount",PurchOrderLine."Inv. Discount Amount");
          END;

          PurchLine."Attached to Line No." :=
            TransferOldExtLines.TransferExtendedText(
              "Line No.",
              NextLineNo,
              "Attached to Line No.");
          PurchLine."Shortcut Dimension 1 Code" := PurchOrderLine."Shortcut Dimension 1 Code";
          PurchLine."Shortcut Dimension 2 Code" := PurchOrderLine."Shortcut Dimension 2 Code";
          PurchLine."Dimension Set ID" := PurchOrderLine."Dimension Set ID";

          PurchLine.INSERT;

          NextLineNo := NextLineNo + 10000;
          IF "Attached to Line No." = 0 THEN
            SETRANGE("Attached to Line No.","Line No.");
        UNTIL (NEXT = 0) OR ("Attached to Line No." = 0);
      END;
    END;

    LOCAL PROCEDURE InitCurrency@7(CurrencyCode@1001 : Code[10]);
    BEGIN
      IF (Currency.Code = CurrencyCode) AND CurrencyRead THEN
        EXIT;

      IF CurrencyCode <> '' THEN
        Currency.GET(CurrencyCode)
      ELSE
        Currency.InitRoundingPrecision;
      CurrencyRead := TRUE;
    END;

    PROCEDURE LineMatched@1100285003(pPurchRcptLine2@1100285000 : Record 121;VAR MatchedQty@1100285005 : Decimal) : Boolean;
    VAR
      lrecExvPurchLine@1100285001 : Record 12013588;
      lrecPurchLine@1100285003 : Record 39;
    BEGIN
      MatchedQty := 0;

      lrecExvPurchLine.RESET;
      lrecExvPurchLine.SETCURRENTKEY("Receipt No.","Receipt Line No.");
      lrecExvPurchLine.SETRANGE("Receipt No.",pPurchRcptLine2."Document No.");
      lrecExvPurchLine.SETRANGE("Receipt Line No.",pPurchRcptLine2."Line No.");
      IF lrecExvPurchLine.FINDSET THEN
        REPEAT
          MatchedQty := MatchedQty + lrecExvPurchLine.Quantity;
        UNTIL lrecExvPurchLine.NEXT = 0;

      lrecPurchLine.RESET;
      lrecPurchLine.SETCURRENTKEY("Document Type","Receipt No.","Receipt Line No.");
      lrecPurchLine.SETRANGE("Document Type", lrecPurchLine."Document Type"::Invoice);
      lrecPurchLine.SETRANGE("Receipt No.",pPurchRcptLine2."Document No.");
      lrecPurchLine.SETRANGE("Receipt Line No.",pPurchRcptLine2."Line No.");
      IF lrecPurchLine.FINDSET THEN
        REPEAT
          MatchedQty := MatchedQty + lrecPurchLine.Quantity;
        UNTIL lrecPurchLine.NEXT = 0;

      IF ABS(MatchedQty) >= ABS((pPurchRcptLine2.Quantity - pPurchRcptLine2."Quantity Invoiced")) THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE DisableProposal@1100285004(VAR pvarrecExfDocHead@1100285000 : Record 12013587);
    VAR
      ExAppSetup@1100285001 : Record 12013601;
    BEGIN
      ExAppSetup.GET;
      IF (pvarrecExfDocHead."Propose Line" = TRUE) OR (pvarrecExfDocHead."Propose VAT Line" = TRUE) OR
         (pvarrecExfDocHead."Propose Diff. Line" <> ExAppSetup."Propose Diff. Line") THEN BEGIN
        pvarrecExfDocHead."Propose Line" := FALSE;
        pvarrecExfDocHead."Propose VAT Line" := FALSE;

        pvarrecExfDocHead."Propose Diff. Line" := ExAppSetup."Propose Diff. Line";
        pvarrecExfDocHead."PO Matched Document" := TRUE;
        pvarrecExfDocHead.MODIFY;
      END;
    END;

    BEGIN
    END.
  }
}

