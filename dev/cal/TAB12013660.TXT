OBJECT Table 12013660 EX Coding Rule
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF420000;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               ExCodingRule.RESET;
               ExCodingRule.SETCURRENTKEY(ID);
               IF ExCodingRule.FINDLAST THEN
                 ID := ExCodingRule.ID + 1
               ELSE
                 ID := 1;

               ExFlow.RuleLines(Rec);

               RecRef.GETTABLE(Rec);
               WebSetting.TableChange(RecRef);
             END;

    OnModify=BEGIN
               RecRef.GETTABLE(Rec);
               WebSetting.TableChange(RecRef);
             END;

    OnDelete=BEGIN
               ExCodingRuleLine.RESET;
               ExCodingRuleLine.SETRANGE(ID,ID);
               //4PS20200221
               //ExCodingRuleLine.DELETEALL;
               ExCodingRuleLine.DELETEALL(TRUE);
               //4PS20200221

               CodingRuleApprovalGroup.RESET;
               CodingRuleApprovalGroup.SETRANGE("Coding Rule ID", ID);
               CodingRuleApprovalGroup.DELETEALL;

               RecRef.GETTABLE(Rec);
               WebSetting.TableChange(RecRef);
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=[ENU=Coding Rule;
               SVE=Konteringsregler];
    LookupPageID=Page12013617;
  }
  FIELDS
  {
    { 2   ;   ;ID                  ;Integer       ;AutoIncrement=No;
                                                   CaptionML=[ENU=ID;
                                                              SVE=ID] }
    { 10  ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              SVE=Namn] }
    { 11  ;   ;Validation Message  ;Text250       ;CaptionML=[ENU=Validation Message;
                                                              SVE=Valideringsmeddelande] }
    { 12  ;   ;Memory Note         ;Text50        ;CaptionML=[ENU=Reminder Note;
                                                              SVE=Minnesnotering] }
    { 13  ;   ;Active              ;Boolean       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO(Active) THEN
                                                                  IF Active THEN
                                                                    IF NOT (IsAutofill OR "Is Validation" OR "Is Filter" OR "Is Subset") THEN
                                                                      ERROR(Text001);
                                                              END;

                                                   CaptionML=[ENU=Active;
                                                              SVE=Aktiv] }
    { 14  ;   ;Is Validation       ;Boolean       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN BEGIN
                                                                  IF "Is Validation" THEN
                                                                    BEGIN
                                                                      "Is Subset" := FALSE;
                                                                      IsAutofill := FALSE;
                                                                    END;

                                                                  IF NOT (IsAutofill OR "Is Validation" OR "Is Filter" OR "Is Subset") THEN
                                                                    Active := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Validation Rule;
                                                              SVE=Valideringsregel] }
    { 15  ;   ;Is Filter           ;Boolean       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN BEGIN
                                                                  IF "Is Filter" THEN
                                                                    BEGIN
                                                                      "Is Subset" := FALSE;
                                                                      IsAutofill := FALSE;
                                                                      IsDeny := FALSE;
                                                                    END;

                                                                  IF NOT (IsAutofill OR "Is Validation" OR "Is Filter" OR "Is Subset") THEN
                                                                    Active := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Filter Rule;
                                                              SVE=Filterregel] }
    { 16  ;   ;Is Subset           ;Boolean       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN BEGIN
                                                                  IF "Is Subset" THEN
                                                                    BEGIN
                                                                      "Is Validation" := FALSE;
                                                                      "Is Filter" := FALSE;
                                                                      IsAutofill := FALSE;
                                                                      IsDeny := FALSE;
                                                                    END;

                                                                  IF NOT (IsAutofill OR "Is Validation" OR "Is Filter" OR "Is Subset") THEN
                                                                    Active := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=User Rule;
                                                              SVE=Anv„ndarregel] }
    { 17  ;   ;Expression          ;Text250       ;CaptionML=[ENU=Expression;
                                                              SVE=Formel] }
    { 18  ;   ;IsAutofill          ;Boolean       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN BEGIN
                                                                  IF IsAutofill THEN
                                                                    BEGIN
                                                                      "Is Validation" := FALSE;
                                                                      "Is Filter" := FALSE;
                                                                      "Is Subset" := FALSE;
                                                                      IsDeny := FALSE;
                                                                      Active := TRUE;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Auto Fill;
                                                              SVE=Fyll automatiskt] }
    { 19  ;   ;IsDeny              ;Boolean       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN BEGIN
                                                                  IF IsDeny THEN
                                                                    BEGIN
                                                                      "Is Filter" := FALSE;
                                                                      "Is Subset" := FALSE;
                                                                      IsAutofill := FALSE;
                                                                      "Is Validation" := TRUE;
                                                                      Active := TRUE;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Deny;
                                                              SVE=Neka] }
    { 20  ;   ;TestExpression1     ;Text250       ;CaptionML=[ENU=TestExpression1;
                                                              SVE=Testuttryck1] }
    { 21  ;   ;TestExpression2     ;Text250       ;CaptionML=[ENU=TestExpression2;
                                                              SVE=Testuttryck2] }
    { 22  ;   ;TestExpression3     ;Text250       ;CaptionML=[ENU=TestExpression3;
                                                              SVE=Testuttryck3] }
    { 23  ;   ;TestExpression4     ;Text250       ;CaptionML=[ENU=TestExpression4;
                                                              SVE=Testuttryck4] }
    { 24  ;   ;TestExpression5     ;Text250       ;CaptionML=[ENU=TestExpression5;
                                                              SVE=Testuttryck5] }
    { 25  ;   ;Expression2         ;Text250       ;CaptionML=[ENU=Expression2;
                                                              SVE=Formel2] }
    { 26  ;   ;Expression3         ;Text250       ;CaptionML=[ENU=Expression3;
                                                              SVE=Formel3] }
    { 27  ;   ;Expression4         ;Text250       ;CaptionML=[ENU=Expression4;
                                                              SVE=Formel4] }
    { 100 ;   ;From Amount         ;Decimal       ;OnValidate=BEGIN
                                                                CreateTestExpr;
                                                              END;

                                                   CaptionML=[ENU=From Amount;
                                                              SVE=Fr†n belopp];
                                                   DecimalPlaces=0:5 }
    { 101 ;   ;To Amount           ;Decimal       ;OnValidate=BEGIN
                                                                CreateTestExpr;
                                                              END;

                                                   CaptionML=[ENU=To Amount;
                                                              SVE=Till belopp];
                                                   DecimalPlaces=0:5 }
    { 102 ;   ;Final Approver Only ;Boolean       ;OnValidate=BEGIN
                                                                CreateTest3Expr;
                                                              END;

                                                   CaptionML=[ENU=Final Approver Only;
                                                              SVE=Endast f”r slutattestanten] }
    { 200 ;   ;From Line Amount    ;Decimal       ;OnValidate=BEGIN
                                                                CreateTest2Expr;
                                                              END;

                                                   CaptionML=[ENU=From Line Amount;
                                                              SVE=Fr†n radbelopp];
                                                   DecimalPlaces=0:5 }
    { 201 ;   ;To Line Amount      ;Decimal       ;OnValidate=BEGIN
                                                                CreateTest2Expr;
                                                              END;

                                                   CaptionML=[ENU=To Line Amount;
                                                              SVE=Till radbelopp];
                                                   DecimalPlaces=0:5 }
    { 50000;  ;Rule for            ;Option        ;OnValidate=BEGIN
                                                                CreateTestExpr;
                                                              END;

                                                   CaptionML=[ENU=Rule for;
                                                              SVE=Regel f”r];
                                                   OptionCaptionML=[ENU=All,Quote,Invoice,Requisition,Quote&Invoice;
                                                                    SVE=Alla,Offert,Faktura,Rekvisition,Offert&Faktura];
                                                   OptionString=All,Quote,Invoice,Requisition,Quote&Invoice }
    { 55000;  ;AutoCreated         ;Boolean       ;CaptionML=[ENU=Auto Created;
                                                              SVE=Automatiskt skapad];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ExCodingRuleLine@1100285001 : Record 12013663;
      ExCodingRule@1100285006 : Record 12013660;
      CodingRuleApprovalGroup@1100285002 : Record 12013664;
      ExFlow@1100285000 : Codeunit 12013601;
      Text001@1100285004 : TextConst 'ENU=This coding rule cannot be made active since it has not been assigned a type (validation, filter, auto fill or subset)!;SVE=Denna regel kan ej g”ras aktiv d† den inte har blivit tilldelad en viss typ (validering, filter, automatisk fyll eller delm„ngd)!';
      Text003@1100285003 : TextConst 'ENU=You cannot rename a %1.;SVE=Du kan inte byta namn p† %1.';
      WebSetting@1100285007 : Record 12057071;
      RecRef@1100285005 : RecordRef;

    PROCEDURE RestartLines@1100285000(Rule@1100285000 : Record 12013660);
    VAR
      RuleLines@1100285001 : Record 12013663;
    BEGIN
      Expression := '';
      Expression2 := '';
      Expression3 := '';
      Expression4 := '';
      MODIFY(FALSE);

      RuleLines.RESET;
      RuleLines.SETRANGE(ID, Rule.ID);
      IF RuleLines.FIND('-') THEN
        //4PS20200221
        //RuleLines.DELETEALL(FALSE);
        RuleLines.DELETEALL(TRUE);
        //4PS20200221

      ExFlow.RuleLines(Rule);
    END;

    PROCEDURE MarkAll@1100285001(Rule@1100285000 : Record 12013660);
    VAR
      RuleLines@1100285001 : Record 12013663;
    BEGIN
      RuleLines.RESET;
      RuleLines.SETRANGE(ID, Rule.ID);
      IF RuleLines.FIND('-') THEN BEGIN
        REPEAT
          RuleLines.All := TRUE;
          IF NOT Rule."Is Subset" THEN
            RuleLines.VALIDATE(Empty, TRUE);

          // Exception for job task
          IF Rule."Is Filter" THEN
            IF RuleLines."Column Code" = 'JOBTASK' THEN BEGIN
              RuleLines.All := FALSE;
              RuleLines.Empty := FALSE;
            END;

          RuleLines.MODIFY(FALSE);
        UNTIL RuleLines.NEXT = 0;

        RuleLines.UpdateExpression;
      END;
    END;

    PROCEDURE CreateTestExpr@1100285002();
    BEGIN
      IF ("Rule for" = "Rule for"::All) AND ("From Amount" = 0) AND ("To Amount" = 0) THEN BEGIN
        TestExpression1 := '';

        EXIT;
      END;

      IF "Rule for" = "Rule for"::All THEN BEGIN
        IF "From Amount" <> 0 THEN BEGIN
          IF "To Amount" <> 0 THEN
            TestExpression1 := STRSUBSTNO('Document:NetAmount>=%1 AND NetAmount<=%2:COUNT(ID)>0',
                                          FORMAT("From Amount",0,2),FORMAT("To Amount",0,2))
          ELSE
            TestExpression1 := STRSUBSTNO('Document:NetAmount>=%1:COUNT(ID)>0',
                                          FORMAT("From Amount",0,2));
        END
        ELSE
          TestExpression1 := STRSUBSTNO('Document:NetAmount<=%1:COUNT(ID)>0',
                                        FORMAT("To Amount",0,2));
      END
      ELSE BEGIN
        IF ("From Amount" = 0) AND ("To Amount" = 0) THEN BEGIN
          CASE "Rule for" OF
            "Rule for"::Invoice: TestExpression1 := 'Document:DocType IN (2,3):COUNT(ID)>0';
            "Rule for"::Quote: TestExpression1 := 'Document:DocType IN (0):COUNT(ID)>0';
            "Rule for"::Requisition: TestExpression1 := 'Document:DocType IN (8):COUNT(ID)>0';
            "Rule for"::"Quote&Invoice": TestExpression1 := 'Document:DocType IN (0,2,3):COUNT(ID)>0';
          END;
        END
        ELSE BEGIN
          IF "From Amount" <> 0 THEN BEGIN
            IF "To Amount" <> 0 THEN BEGIN
              CASE "Rule for" OF
                "Rule for"::Invoice: TestExpression1 :=
                  STRSUBSTNO('Document:NetAmount>=%1 AND NetAmount<=%2 AND DocType IN (2,3):COUNT(ID)>0',
                             FORMAT("From Amount",0,2),FORMAT("To Amount",0,2));
                "Rule for"::Quote: TestExpression1 :=
                  STRSUBSTNO('Document:NetAmount>=%1 AND NetAmount<=%2 AND DocType IN (0):COUNT(ID)>0',
                             FORMAT("From Amount",0,2),FORMAT("To Amount",0,2));
                "Rule for"::Requisition: TestExpression1 :=
                  STRSUBSTNO('Document:NetAmount>=%1 AND NetAmount<=%2 AND DocType IN (8):COUNT(ID)>0',
                             FORMAT("From Amount",0,2),FORMAT("To Amount",0,2));
                "Rule for"::"Quote&Invoice": TestExpression1 :=
                  STRSUBSTNO('Document:NetAmount>=%1 AND NetAmount<=%2 AND DocType IN (0,2,3):COUNT(ID)>0',
                             FORMAT("From Amount",0,2),FORMAT("To Amount",0,2));
              END;
            END
            ELSE BEGIN
              CASE "Rule for" OF
                "Rule for"::Invoice: TestExpression1 :=
                  STRSUBSTNO('Document:NetAmount>=%1 AND DocType IN (2,3):COUNT(ID)>0',
                             FORMAT("From Amount",0,2));
                "Rule for"::Quote: TestExpression1 :=
                  STRSUBSTNO('Document:NetAmount>=%1 AND DocType IN (0):COUNT(ID)>0',
                             FORMAT("From Amount",0,2));
                "Rule for"::Requisition: TestExpression1 :=
                  STRSUBSTNO('Document:NetAmount>=%1 AND DocType IN (8):COUNT(ID)>0',
                             FORMAT("From Amount",0,2));
                "Rule for"::"Quote&Invoice": TestExpression1 :=
                  STRSUBSTNO('Document:NetAmount>=%1 AND DocType IN (0,2,3):COUNT(ID)>0',
                             FORMAT("From Amount",0,2));
              END;
            END;
          END
          ELSE BEGIN
            IF "To Amount" <> 0 THEN BEGIN
              CASE "Rule for" OF
                "Rule for"::Invoice: TestExpression1 :=
                  STRSUBSTNO('Document:NetAmount<=%1 AND DocType IN (2,3):COUNT(ID)>0',
                             FORMAT("To Amount",0,2));
                "Rule for"::Quote: TestExpression1 :=
                  STRSUBSTNO('Document:NetAmount<=%1 AND DocType IN (0):COUNT(ID)>0',
                             FORMAT("To Amount",0,2));
                "Rule for"::Requisition: TestExpression1 :=
                  STRSUBSTNO('Document:NetAmount<=%1 AND DocType IN (8):COUNT(ID)>0',
                             FORMAT("To Amount",0,2));
                "Rule for"::"Quote&Invoice": TestExpression1 :=
                  STRSUBSTNO('Document:NetAmount<=%1 AND DocType IN (0,2,3):COUNT(ID)>0',
                             FORMAT("To Amount",0,2));
              END;
            END
            ELSE BEGIN
              CASE "Rule for" OF
                "Rule for"::Invoice:
                  TestExpression1 := STRSUBSTNO('Document:DocType IN (2,3):COUNT(ID)>0');
                "Rule for"::Quote:
                  TestExpression1 := STRSUBSTNO('Document:DocType IN (0):COUNT(ID)>0');
                "Rule for"::Requisition:
                  TestExpression1 := STRSUBSTNO('Document:DocType IN (8):COUNT(ID)>0');
                "Rule for"::"Quote&Invoice":
                  TestExpression1 := STRSUBSTNO('Document:DocType IN (0,2,3):COUNT(ID)>0');
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CreateTest2Expr@1100285004();
    BEGIN
      IF ("From Line Amount" = 0) AND ("To Line Amount" = 0) THEN BEGIN
        TestExpression2 := '';

        EXIT;
      END;

      IF "From Line Amount" <> 0 THEN BEGIN
        IF "To Line Amount" <> 0 THEN
          TestExpression2 := STRSUBSTNO('DocumentLines:ID={ID} AND Amount>=%1 AND Amount<=%2:COUNT(ID)>0',
                                        FORMAT("From Line Amount",0,2),FORMAT("To Line Amount",0,2))
        ELSE
          TestExpression2 := STRSUBSTNO('DocumentLines:ID={ID} AND Amount>=%1:COUNT(ID)>0',
                                        FORMAT("From Line Amount",0,2));
      END
      ELSE
        TestExpression2 := STRSUBSTNO('DocumentLines:ID={ID} AND Amount<=%1:COUNT(ID)>0',
                                      FORMAT("To Line Amount",0,2));
    END;

    PROCEDURE CreateTest3Expr@1100285003();
    VAR
      SelectedGroups@1100285001 : Text[1024];
      CodingRuleMgt@1100285000 : Codeunit 12013615;
    BEGIN
      SelectedGroups := '';
      SelectedGroups := CodingRuleMgt.FindExistingCodingRules(Rec);

      IF "Final Approver Only" THEN BEGIN
        IF SelectedGroups <> '' THEN BEGIN
          TestExpression3 :=
            'DocumentLineApprovers:DocumentLineID = {DocumentLineID}:MAX(AppOrder)={AppOrder} AND NOT ' + '''' + '{Approver}' + '''';
          TestExpression3 := STRSUBSTNO('%1 IN (%2)', TestExpression3,SelectedGroups);
        END ELSE
          TestExpression3 :=
            'DocumentLineApprovers:DocumentLineID = {DocumentLineID} AND AppOrder>{AppOrder}:COUNT(ID)=0';
      END ELSE BEGIN
        IF SelectedGroups <> '' THEN
          TestExpression3 :=
            STRSUBSTNO('DocumentLineApprovers:DocumentLineID = {DocumentLineID} AND Approver IN (%1):COUNT(ID)=0', SelectedGroups)
        ELSE
          TestExpression3 := '';
      END;

      IF SelectedGroups <> '' THEN
        "Validation Message" := COPYSTR(STRSUBSTNO("Validation Message", SelectedGroups),1,
                                        MAXSTRLEN("Validation Message"));
      // EXF#128 ->>
    END;

    PROCEDURE CreateTest5Expr@1100285006();
    VAR
      SelectedGroups@1100285001 : Text[1024];
      CodingRuleMgt@1100285000 : Codeunit 12013615;
    BEGIN

      IF "Final Approver Only" THEN EXIT;

      SelectedGroups := '';

      SelectedGroups := CodingRuleMgt.FindExistingCodingRules(Rec);
      // UserDetails:UserID='{UserID}' AND UserID IN ('A1'):COUNT(UserID)>0

      IF SelectedGroups <> '' THEN
        TestExpression5 := STRSUBSTNO('UserDetails:UserID=''{UserID}'' AND UserID IN (%1):COUNT(UserID)>0', SelectedGroups)
      ELSE
        TestExpression5 := '';

      IF SelectedGroups <> '' THEN
        "Validation Message" := COPYSTR(STRSUBSTNO("Validation Message", SelectedGroups),1,MAXSTRLEN("Validation Message"));
      // EXF#128 <<-
    END;

    BEGIN
    {
      2017-02-27  CHMO  EXF#128
      4PS20200221 SICH DELETE(TRUE) on deleta and in RestartRoute
    }
    END.
  }
}

