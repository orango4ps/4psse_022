OBJECT Report 6036 Create Contract Service Orders
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=AuftrÑge fÅr VertrÑge erst.;
               ENU=Create Contract Service Orders;
               NLD=Contractserviceorders maken;
               NOR=Opprett kontraktserviceordrer;
               SVE=Skapa kontraktsserviceorder];
    ApplicationArea=#Service;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   ServMgtSetup.GET;
                   IF ServMgtSetup."Last Contract Service Date" <> 0D THEN
                     StartDate := ServMgtSetup."Last Contract Service Date" + 1;
                 END;

    OnPostReport=BEGIN
                   IF CreateServOrders = CreateServOrders::"Create Service Order" THEN BEGIN
                     ServMgtSetup.GET;
                     ServMgtSetup."Last Contract Service Date" := EndDate;
                     ServMgtSetup.MODIFY;

                     IF NOT HideDialog THEN
                       IF ServOrderCreated > 1 THEN
                         MESSAGE(Text000,ServOrderCreated)
                       ELSE
                         MESSAGE(Text001,ServOrderCreated)
                   END;
                 END;

  }
  DATASET
  {
    { 9952;    ;DataItem;                    ;
               DataItemTable=Table5965;
               DataItemTableView=WHERE(Contract Type=CONST(Contract),
                                       Change Status=CONST(Locked),
                                       Status=CONST(Signed));
               OnPreDataItem=BEGIN
                               IF CreateServOrders = CreateServOrders::"Print Only" THEN BEGIN
                                 CLEAR(ContrServOrdersTest);
                                 ContrServOrdersTest.InitVariables(StartDate,EndDate);
                                 ContrServOrdersTest.SETTABLEVIEW("Service Contract Header");
                                 ContrServOrdersTest.RUNMODAL;
                                 CurrReport.BREAK;
                               END;
                             END;

               OnAfterGetRecord=BEGIN
                                  VerifyServiceContractHeader;
                                END;

               ReqFilterFields=Contract No. }

    { 6062;1   ;DataItem;                    ;
               DataItemTable=Table5964;
               DataItemTableView=SORTING(Contract Type,Contract No.,Line No.)
                                 ORDER(Ascending)
                                 WHERE(Service Period=FILTER(<>''));
               OnPreDataItem=BEGIN
                               IF EndDate = 0D THEN
                                 ERROR(Text002);
                               IF EndDate < StartDate THEN
                                 ERROR(Text003);

                               IF StartDate <> 0D THEN BEGIN
                                 IF EndDate - StartDate + 1 > ServMgtSetup."Contract Serv. Ord.  Max. Days" THEN
                                   ERROR(
                                     Text004,
                                     ServMgtSetup.TABLECAPTION);
                               END;

                               SETRANGE("Next Planned Service Date",StartDate,EndDate);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF "Contract Expiration Date" <> 0D THEN BEGIN
                                    IF "Contract Expiration Date" <= "Next Planned Service Date" THEN
                                      CurrReport.SKIP;
                                  END ELSE
                                    IF ("Service Contract Header"."Expiration Date" <> 0D) AND
                                       ("Service Contract Header"."Expiration Date" <= "Next Planned Service Date")
                                    THEN
                                      CurrReport.SKIP;

                                  Cust.GET("Service Contract Header"."Bill-to Customer No.");
                                  IF Cust.Blocked = Cust.Blocked::All THEN
                                    CurrReport.SKIP;

                                  ServHeader.SETCURRENTKEY("Contract No.",Status,"Posting Date");
                                  ServHeader.SETRANGE("Document Type",ServHeader."Document Type"::Order);
                                  ServHeader.SETRANGE("Contract No.","Contract No.");
                                  ServHeader.SETRANGE(Status,ServHeader.Status::Pending);

                                  ServOrderExist := ServHeader.FINDFIRST;
                                  IF ServOrderExist THEN BEGIN
                                    ServItemLine.SETCURRENTKEY("Document Type","Document No.","Service Item No.");
                                    ServItemLine.SETRANGE("Document Type",ServHeader."Document Type");
                                    ServItemLine.SETRANGE("Document No.",ServHeader."No.");
                                    ServItemLine.SETRANGE("Contract No.","Contract No.");
                                    ServItemLine.SETRANGE("Contract Line No.","Line No.");
                                    IF ServItemLine.FINDFIRST THEN
                                      CurrReport.SKIP;
                                  END;
                                  CreateOrAddToServOrder;
                                END;

               DataItemLink=Contract Type=FIELD(Contract Type),
                            Contract No.=FIELD(Contract No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 5   ;2   ;Field     ;
                  Name=StartingDate;
                  CaptionML=[DEU=Startdatum;
                             ENU=Starting Date;
                             NLD=Begindatum;
                             NOR=Startdato;
                             SVE=Startdatum];
                  ToolTipML=[DEU=Gibt das Startdatum fÅr die Periode an, fÅr die ServiceauftrÑge fÅr VertrÑge erstellt werden sollen. Die Stapelverarbeitung umfasst VertrÑge mit Serviceartikeln, deren nÑchste geplante Servicedaten am oder nach diesem Datum liegen.;
                             ENU=Specifies the starting date for the period that you want to create contract service orders for. The batch job includes contracts with service items that have next planned service dates on or later than this date.;
                             NLD=Hiermee wordt de begindatum opgegeven van de periode waarvoor contractserviceorders moeten worden gemaakt. De batchtaak bevat contracten met serviceartikelen waarvoor de volgende geplande servicedatums op deze datum of eerder vallen.;
                             NOR=Angir startdatoen for perioden som du vil opprette kontraktserviceordrer for. Kjõrselen inkluderer kontrakter med servicevarer som har neste planlagte servicedatoer pÜ eller etter denne datoen.];
                  ApplicationArea=#Service;
                  SourceExpr=StartDate }

      { 1   ;2   ;Field     ;
                  Name=EndingDate;
                  CaptionML=[DEU=Enddatum;
                             ENU=Ending Date;
                             NLD=Einddatum;
                             NOR=Sluttdato;
                             SVE=Slutdatum];
                  ToolTipML=[DEU=Gibt das Enddatum fÅr die Periode an, fÅr die Sie ServiceauftrÑge fÅr VertrÑge erstellen mîchten. Die Stapelverarbeitung umfasst VertrÑge mit Serviceartikeln, deren nÑchste geplante Servicedaten an oder vor diesem Datum liegen.;
                             ENU=Specifies the ending date for the period that you want to create contract service orders for. The batch job includes contracts with service items with next planned service date on or earlier than this date.;
                             NLD=Hiermee wordt de einddatum opgegeven van de periode waarvoor u contractserviceorders wilt maken. De batchverwerking bevat contracten met serviceartikelen waarvoor de volgende geplande servicedatum valt op deze datum of eerder.;
                             NOR=Angir sluttdatoen for perioden som du vil opprette kontraktserviceordrer for. Kjõrselen inkluderer kontrakter med servicevarer som har neste planlagte servicedato pÜ eller tidligere enn denne datoen.];
                  ApplicationArea=#Service;
                  SourceExpr=EndDate;
                  OnValidate=BEGIN
                               IF EndDate < StartDate THEN
                                 ERROR(Text003);
                             END;
                              }

      { 8   ;2   ;Field     ;
                  Name=CreateServiceOrders;
                  CaptionML=[DEU=Aktion;
                             ENU=Action;
                             NLD=Actie;
                             NOR=Handling;
                             SVE=ètgÑrd];
                  ToolTipML=[DEU=Gibt die gewÅnschte Aktion fÅr VertragsserviceauftrÑge an.;
                             ENU=Specifies the desired action relating to contract service orders.;
                             NLD=Hiermee wordt de gewenste actie opgegeven met betrekking tot contractserviceorders.;
                             NOR=Angir den õnskede handlingen nÜr det gjelder kontraktserviceordrer.];
                  OptionCaptionML=[DEU=Serviceauftrag erstellen,Nur Drucken;
                                   ENU=Create Service Order,Print Only;
                                   NLD=Serviceorder maken,Alleen afdrukken;
                                   NOR=Opprett serviceordre,Kun utskrift];
                  ApplicationArea=#Service;
                  SourceExpr=CreateServOrders }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=%1 ServiceauftrÑge wurden erstellt.;ENU=%1 service orders were created.;NLD=%1 serviceorders werden gemaakt.;NOR=%1 serviceordrer ble opprettet.';
      Text001@1001 : TextConst 'DEU=%1 Serviceauftrag wurde erstellt.;ENU=%1 service order was created.;NLD=%1 serviceorder werd gemaakt.;NOR=%1 serviceordre ble opprettet.';
      Text002@1002 : TextConst 'DEU=Sie mÅssen das Enddatum eingeben.;ENU=You must fill in the ending date field.;NLD=U moet het veld Einddatum invullen.;NOR=Du mÜ fylle ut feltet Sluttdato.;SVE=Du mÜste fylla i fÑltet slutdatum.';
      Text003@1003 : TextConst 'DEU=Das Startdatum liegt nach dem Enddatum.;ENU=The starting date is after the ending date.;NLD=De begindatum valt na de einddatum.;NOR=Startdatoen er senere enn sluttdatoen.';
      Text004@1004 : TextConst 'DEU=Die von Ihnen eingegebene GÅltigkeit ist eine lÑngere Periode, als in der %1 zulÑssig ist.;ENU=The date range you have entered is a longer period than is allowed in the %1 table.;NLD=Het datuminterval dat u hebt ingevoerd, bestrijkt een langere periode dan is toegestaan in tabel %1.;NOR=Datointervallet du har angitt, er lengre enn det som er tillatt i tabellen %1.';
      ServMgtSetup@1006 : Record 5911;
      ServHeader@1007 : Record 5900;
      ServItemLine@1008 : Record 5901;
      Cust@1010 : Record 18;
      ServItem@1021 : Record 5940;
      Salesperson@1913 : Record 13;
      ContrServOrdersTest@1005 : Report 5988;
      ServOrderCreated@1011 : Integer;
      StartDate@1014 : Date;
      EndDate@1015 : Date;
      CreateServOrders@1016 : 'Create Service Order,Print Only';
      ServOrderExist@1018 : Boolean;
      HideDialog@1023 : Boolean;
      Text005@1009 : TextConst 'DEU=FÅr den Vertrag mit der Nr. %1 kann kein Serviceauftrag erstellt werden, weil Debitor Nr. %2 Åber keinen %3 verfÅgt.;ENU=A service order cannot be created for contract no. %1 because customer no. %2 does not have a %3.;NLD=Er kan geen serviceorder worden gemaakt voor contractnr. %1 omdat klantnr. %2 geen %3 heeft.;NOR=Kan ikke opprette en serviceordre for kontraktnummer %1 ettersom kundenummer %2 ikke har %3.';

    LOCAL PROCEDURE CreateOrAddToServOrder@2();
    VAR
      NextLineNo@1000 : Integer;
    BEGIN
      ServHeader.RESET;
      ServHeader.SETCURRENTKEY("Contract No.",Status,"Posting Date");
      ServHeader.SETRANGE("Document Type",ServHeader."Document Type"::Order);
      ServHeader.SETRANGE("Contract No.","Service Contract Header"."Contract No.");
      ServHeader.SETRANGE(Status,ServHeader.Status::Pending);
      ServHeader.SETFILTER("Order Date",'>=%1',"Service Contract Line"."Next Planned Service Date");
      IF NOT ServHeader.FINDFIRST THEN BEGIN
        CreateServiceHeader(ServHeader,"Service Contract Header");
        ServOrderCreated := ServOrderCreated + 1;
      END;

      NextLineNo := 0;
      ServItemLine.RESET;
      ServItemLine.SETRANGE("Document Type",ServHeader."Document Type");
      ServItemLine.SETRANGE("Document No.",ServHeader."No.");
      IF ServItemLine.FINDLAST THEN
        NextLineNo := ServItemLine."Line No."
      ELSE
        NextLineNo := 0;

      ServItemLine.RESET;
      ServItemLine.SETCURRENTKEY("Document Type","Document No.","Service Item No.");
      ServItemLine.SETRANGE("Document Type",ServHeader."Document Type");
      ServItemLine.SETRANGE("Document No.",ServHeader."No.");
      ServItemLine.SETRANGE("Contract No.","Service Contract Line"."Contract No.");
      ServItemLine.SETRANGE("Contract Line No.","Service Contract Line"."Line No.");
      IF NOT ServItemLine.FINDFIRST THEN
        CreateServiceItemLine(ServHeader,"Service Contract Line",NextLineNo);
    END;

    LOCAL PROCEDURE CreateServiceHeader@5(VAR ServiceHeader@1000 : Record 5900;ServiceContractHeader@1001 : Record 5965);
    BEGIN
      CLEAR(ServiceHeader);
      WITH ServiceHeader DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Order;
        INSERT(TRUE);
        SetHideValidationDialog(TRUE);
        "Contract No." := ServiceContractHeader."Contract No.";
        VALIDATE("Order Date","Service Contract Line"."Next Planned Service Date");
        VALIDATE("Customer No.",ServiceContractHeader."Customer No.");
        VALIDATE("Bill-to Customer No.",ServiceContractHeader."Bill-to Customer No.");
        "Default Response Time (Hours)" := ServiceContractHeader."Response Time (Hours)";
        VALIDATE("Ship-to Code",ServiceContractHeader."Ship-to Code");
        "Service Order Type" := ServiceContractHeader."Service Order Type";
        VALIDATE("Currency Code",ServiceContractHeader."Currency Code");
        SetSalespersonCode(ServiceContractHeader."Salesperson Code","Salesperson Code");
        "Max. Labor Unit Price" := ServiceContractHeader."Max. Labor Unit Price";
        "Your Reference" := ServiceContractHeader."Your Reference";
        "Service Zone Code" := ServiceContractHeader."Service Zone Code";
        "Shortcut Dimension 1 Code" := ServiceContractHeader."Shortcut Dimension 1 Code";
        "Shortcut Dimension 2 Code" := ServiceContractHeader."Shortcut Dimension 2 Code";
        VALIDATE("Service Order Type",ServiceContractHeader."Service Order Type");
        "Dimension Set ID" := ServiceContractHeader."Dimension Set ID";
        MODIFY(TRUE);
      END;
      OnAfterCreateServiceHeader(ServiceHeader,ServiceContractHeader);
    END;

    LOCAL PROCEDURE CreateServiceItemLine@9(ServiceHeader@1000 : Record 5900;ServiceContractLine@1001 : Record 5964;VAR NextLineNo@1003 : Integer);
    VAR
      RepairStatus@1002 : Record 5927;
    BEGIN
      WITH ServItemLine DO BEGIN
        INIT;
        SetHideDialogBox(TRUE);
        "Document No." := ServiceHeader."No.";
        "Document Type" := ServiceHeader."Document Type";
        RepairStatus.RESET;
        RepairStatus.Initial := TRUE;
        "Repair Status Code" := RepairStatus.ReturnStatusCode(RepairStatus);
        NextLineNo := NextLineNo + 10000;
        "Line No." := NextLineNo;
        IF "Service Contract Line"."Service Item No." <> '' THEN BEGIN
          ServItem.GET("Service Contract Line"."Service Item No.");
          VALIDATE("Service Item No.",ServItem."No.");
          "Location of Service Item" := ServItem."Location of Service Item";
          Priority := ServItem.Priority;
        END ELSE
          Description := "Service Contract Line".Description;
        "Serial No." := "Service Contract Line"."Serial No.";
        "Item No." := "Service Contract Line"."Item No.";
        "Variant Code" := "Service Contract Line"."Variant Code";
        "Contract No." := "Service Contract Line"."Contract No.";
        "Contract Line No." := "Service Contract Line"."Line No.";
        UpdateResponseTimeHours;
        INSERT(TRUE);
      END;

      OnAfterInsertServItemLine(ServItemLine,ServiceContractLine);
    END;

    [External]
    PROCEDURE SetHideDialog@3(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    [External]
    PROCEDURE InitializeRequest@4(StartDateFrom@1000 : Date;EndDateFrom@1001 : Date;CreateServOrdersFrom@1002 : Option);
    BEGIN
      StartDate := StartDateFrom;
      EndDate := EndDateFrom;
      CreateServOrders := CreateServOrdersFrom;
    END;

    LOCAL PROCEDURE VerifyServiceContractHeader@1();
    VAR
      ShipToAddress@1000 : Record 222;
    BEGIN
      WITH "Service Contract Header" DO
        IF "Ship-to Code" <> '' THEN
          IF NOT ShipToAddress.GET("Customer No.","Ship-to Code") THEN BEGIN
            MESSAGE(Text005,"Contract No.","Customer No.","Ship-to Code");
            CurrReport.SKIP;
          END;
    END;

    LOCAL PROCEDURE SetSalespersonCode@218(SalesPersonCodeToCheck@1000 : Code[20];VAR SalesPersonCodeToAssign@1001 : Code[20]);
    BEGIN
      IF SalesPersonCodeToCheck <> '' THEN
        IF Salesperson.GET(SalesPersonCodeToCheck) THEN
          IF Salesperson.VerifySalesPersonPurchaserPrivacyBlocked(Salesperson) THEN
            SalesPersonCodeToAssign := ''
          ELSE
            SalesPersonCodeToAssign := SalesPersonCodeToCheck;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateServiceHeader@7(VAR ServiceHeader@1001 : Record 5900;ServiceContractHeader@1000 : Record 5965);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertServItemLine@6(VAR ServiceItemLine@1000 : Record 5901;ServiceContractLine@1001 : Record 5964);
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

