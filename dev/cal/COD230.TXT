OBJECT Codeunit 230 GenJnlManagement
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.05,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 80=imd,
                TableData 232=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Fixed Asset G/L Journal;NOR=Aktivafinanskladd;SVE=Anl.tillg. redovisningsjournal';
      Text001@1001 : TextConst 'ENU=%1 journal;NOR=%1 kladd;SVE=%1 journal';
      Text002@1002 : TextConst 'ENU=RECURRING;NOR=GJENTAK.;SVE=èTERKOMMER';
      Text003@1003 : TextConst 'ENU=Recurring General Journal;NOR=Gjentakende finanskladd;SVE=èterkommande redov.journal';
      Text004@1004 : TextConst 'ENU=DEFAULT;NOR=STANDARD;SVE=STANDARD';
      Text005@1005 : TextConst 'ENU=Default Journal;NOR=Standardkladd;SVE=Standardjournal';
      LastGenJnlLine@1006 : Record 81;
      OpenFromBatch@1007 : Boolean;

    [External]
    PROCEDURE TemplateSelection@1(PageID@1005 : Integer;PageTemplate@1000 : 'General,Sales,Purchases,Cash Receipts,Payments,Assets,Intercompany,Jobs';RecurringJnl@1001 : Boolean;VAR GenJnlLine@1004 : Record 81;VAR JnlSelected@1003 : Boolean);
    VAR
      GenJnlTemplate@1002 : Record 80;
      GenJnlTemplateName@1006 : Code[10];
    BEGIN
      JnlSelected := TRUE;

      GenJnlTemplate.RESET;
      GenJnlTemplate.SETRANGE("Page ID",PageID);
      GenJnlTemplate.SETRANGE(Recurring,RecurringJnl);
      IF NOT RecurringJnl THEN
        GenJnlTemplate.SETRANGE(Type,PageTemplate);
      OnTemplateSelectionSetFilter(GenJnlTemplate,PageTemplate);

      CASE GenJnlTemplate.COUNT OF
        0:
          BEGIN
            GenJnlTemplate.INIT;
            GenJnlTemplate.Type := PageTemplate;
            GenJnlTemplate.Recurring := RecurringJnl;
            IF NOT RecurringJnl THEN BEGIN
              GenJnlTemplateName := FORMAT(GenJnlTemplate.Type,MAXSTRLEN(GenJnlTemplate.Name));
              GenJnlTemplate.Name := GetAvailableGeneralJournalTemplateName(GenJnlTemplateName);
              IF PageTemplate = PageTemplate::Assets THEN
                GenJnlTemplate.Description := Text000
              ELSE
                GenJnlTemplate.Description := STRSUBSTNO(Text001,GenJnlTemplate.Type);
            END ELSE BEGIN
              GenJnlTemplate.Name := Text002;
              GenJnlTemplate.Description := Text003;
            END;
            GenJnlTemplate.VALIDATE(Type);
            GenJnlTemplate.INSERT;
            COMMIT;
          END;
        1:
          GenJnlTemplate.FINDFIRST;
        ELSE
          JnlSelected := PAGE.RUNMODAL(0,GenJnlTemplate) = ACTION::LookupOK;
      END;
      IF JnlSelected THEN BEGIN
        GenJnlLine.FILTERGROUP := 2;
        GenJnlLine.SETRANGE("Journal Template Name",GenJnlTemplate.Name);
        GenJnlLine.FILTERGROUP := 0;
        IF OpenFromBatch THEN BEGIN
          GenJnlLine."Journal Template Name" := '';
          PAGE.RUN(GenJnlTemplate."Page ID",GenJnlLine);
        END;
      END;
    END;

    [External]
    PROCEDURE TemplateSelectionFromBatch@9(VAR GenJnlBatch@1000 : Record 232);
    VAR
      GenJnlLine@1002 : Record 81;
      GenJnlTemplate@1003 : Record 80;
    BEGIN
      OpenFromBatch := TRUE;
      GenJnlTemplate.GET(GenJnlBatch."Journal Template Name");
      GenJnlTemplate.TESTFIELD("Page ID");
      GenJnlBatch.TESTFIELD(Name);

      GenJnlLine.FILTERGROUP := 2;
      GenJnlLine.SETRANGE("Journal Template Name",GenJnlTemplate.Name);
      GenJnlLine.FILTERGROUP := 0;

      GenJnlLine."Journal Template Name" := '';
      GenJnlLine."Journal Batch Name" := GenJnlBatch.Name;
      PAGE.RUN(GenJnlTemplate."Page ID",GenJnlLine);
    END;

    [External]
    PROCEDURE OpenJnl@2(VAR CurrentJnlBatchName@1000 : Code[10];VAR GenJnlLine@1001 : Record 81);
    BEGIN
      IF (GenJnlLine."Journal Template Name" <> '') AND (GenJnlLine.GETFILTER("Journal Template Name") = '') THEN
        CheckTemplateName(GenJnlLine."Journal Template Name",CurrentJnlBatchName)
      ELSE
        CheckTemplateName(GenJnlLine.GETRANGEMAX("Journal Template Name"),CurrentJnlBatchName);
      GenJnlLine.FILTERGROUP := 2;
      GenJnlLine.SETRANGE("Journal Batch Name",CurrentJnlBatchName);
      GenJnlLine.FILTERGROUP := 0;
    END;

    [External]
    PROCEDURE OpenJnlBatch@10(VAR GenJnlBatch@1000 : Record 232);
    VAR
      GenJnlTemplate@1002 : Record 80;
      GenJnlLine@1004 : Record 81;
      JnlSelected@1003 : Boolean;
    BEGIN
      IF GenJnlBatch.GETFILTER("Journal Template Name") <> '' THEN
        EXIT;
      GenJnlBatch.FILTERGROUP(2);
      IF GenJnlBatch.GETFILTER("Journal Template Name") <> '' THEN BEGIN
        GenJnlBatch.FILTERGROUP(0);
        EXIT;
      END;
      GenJnlBatch.FILTERGROUP(0);

      IF NOT GenJnlBatch.FIND('-') THEN
        FOR GenJnlTemplate.Type := GenJnlTemplate.Type::General TO GenJnlTemplate.Type::Jobs DO BEGIN
          GenJnlTemplate.SETRANGE(Type,GenJnlTemplate.Type);
          IF NOT GenJnlTemplate.FINDFIRST THEN
            TemplateSelection(0,GenJnlTemplate.Type,FALSE,GenJnlLine,JnlSelected);
          IF GenJnlTemplate.FINDFIRST THEN
            CheckTemplateName(GenJnlTemplate.Name,GenJnlBatch.Name);
          IF GenJnlTemplate.Type = GenJnlTemplate.Type::General THEN BEGIN
            GenJnlTemplate.SETRANGE(Recurring,TRUE);
            IF NOT GenJnlTemplate.FINDFIRST THEN
              TemplateSelection(0,GenJnlTemplate.Type,TRUE,GenJnlLine,JnlSelected);
            IF GenJnlTemplate.FINDFIRST THEN
              CheckTemplateName(GenJnlTemplate.Name,GenJnlBatch.Name);
            GenJnlTemplate.SETRANGE(Recurring);
          END;
        END;

      GenJnlBatch.FIND('-');
      JnlSelected := TRUE;
      GenJnlBatch.CALCFIELDS("Template Type",Recurring);
      GenJnlTemplate.SETRANGE(Recurring,GenJnlBatch.Recurring);
      IF NOT GenJnlBatch.Recurring THEN
        GenJnlTemplate.SETRANGE(Type,GenJnlBatch."Template Type");
      IF GenJnlBatch.GETFILTER("Journal Template Name") <> '' THEN
        GenJnlTemplate.SETRANGE(Name,GenJnlBatch.GETFILTER("Journal Template Name"));
      CASE GenJnlTemplate.COUNT OF
        1:
          GenJnlTemplate.FINDFIRST;
        ELSE
          JnlSelected := PAGE.RUNMODAL(0,GenJnlTemplate) = ACTION::LookupOK;
      END;
      IF NOT JnlSelected THEN
        ERROR('');

      GenJnlBatch.FILTERGROUP(0);
      GenJnlBatch.SETRANGE("Journal Template Name",GenJnlTemplate.Name);
      GenJnlBatch.FILTERGROUP(2);
    END;

    LOCAL PROCEDURE CheckTemplateName@3(CurrentJnlTemplateName@1000 : Code[10];VAR CurrentJnlBatchName@1001 : Code[10]);
    VAR
      GenJnlBatch@1002 : Record 232;
    BEGIN
      GenJnlBatch.SETRANGE("Journal Template Name",CurrentJnlTemplateName);
      IF NOT GenJnlBatch.GET(CurrentJnlTemplateName,CurrentJnlBatchName) THEN BEGIN
        IF NOT GenJnlBatch.FINDFIRST THEN BEGIN
          GenJnlBatch.INIT;
          GenJnlBatch."Journal Template Name" := CurrentJnlTemplateName;
          GenJnlBatch.SetupNewBatch;
          GenJnlBatch.Name := Text004;
          GenJnlBatch.Description := Text005;
          GenJnlBatch.INSERT(TRUE);
          COMMIT;
        END;
        CurrentJnlBatchName := GenJnlBatch.Name
      END;
    END;

    [External]
    PROCEDURE CheckName@4(CurrentJnlBatchName@1000 : Code[10];VAR GenJnlLine@1001 : Record 81);
    VAR
      GenJnlBatch@1002 : Record 232;
    BEGIN
      GenJnlBatch.GET(GenJnlLine.GETRANGEMAX("Journal Template Name"),CurrentJnlBatchName);
    END;

    PROCEDURE CheckCurrencyCode@19(CurrencyCode@1000 : Code[10]);
    VAR
      Currency@1002 : Record 4;
    BEGIN
      Currency.GET(CurrencyCode);
    END;

    [External]
    PROCEDURE SetName@5(CurrentJnlBatchName@1000 : Code[10];VAR GenJnlLine@1001 : Record 81);
    BEGIN
      GenJnlLine.FILTERGROUP := 2;
      GenJnlLine.SETRANGE("Journal Batch Name",CurrentJnlBatchName);
      GenJnlLine.FILTERGROUP := 0;
      OnAfterSetName(GenJnlLine,CurrentJnlBatchName);
      IF GenJnlLine.FIND('-') THEN;
    END;

    [External]
    PROCEDURE SetJournalSimplePageModePreference@180(SetToSimpleMode@1000 : Boolean;PageIdToSet@1001 : Integer);
    VAR
      JournalUserPreferences@1002 : Record 1182;
      IsHandled@1003 : Boolean;
    BEGIN
      // sets journal page preference for a page
      // preference set to simple page if SetToSimpleMode is true; else set to classic mode

      IsHandled := FALSE;
      OnBeforeSetJournalSimplePageModePreference(SetToSimpleMode,PageIdToSet,IsHandled);
      IF IsHandled THEN
        EXIT;

      JournalUserPreferences.RESET;
      JournalUserPreferences.SETFILTER("User ID",'%1',USERSECURITYID);
      JournalUserPreferences.SETFILTER("Page ID",'%1',PageIdToSet);
      IF JournalUserPreferences.FINDFIRST THEN BEGIN
        JournalUserPreferences."Is Simple View" := SetToSimpleMode;
        JournalUserPreferences.MODIFY;
      END ELSE BEGIN
        CLEAR(JournalUserPreferences);
        JournalUserPreferences."Page ID" := PageIdToSet;
        JournalUserPreferences."Is Simple View" := SetToSimpleMode;
        JournalUserPreferences."User ID" := USERSECURITYID;
        JournalUserPreferences.INSERT;
      END;
    END;

    [External]
    PROCEDURE GetJournalSimplePageModePreference@209(PageIdToCheck@1001 : Integer) : Boolean;
    VAR
      JournalUserPreferences@1000 : Record 1182;
    BEGIN
      // Get journal page mode preference for a page; By defaults this returns TRUE unless a preference
      // is set
      JournalUserPreferences.RESET;
      JournalUserPreferences.SETFILTER("User ID",'%1',USERSECURITYID);
      JournalUserPreferences.SETFILTER("Page ID",'%1',PageIdToCheck);
      IF JournalUserPreferences.FINDFIRST THEN
        EXIT(JournalUserPreferences."Is Simple View");
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetLastViewedJournalBatchName@210(PageIdToCheck@1001 : Integer) : Code[10];
    VAR
      JournalUserPreferences@1000 : Record 1182;
    BEGIN
      JournalUserPreferences.RESET;
      JournalUserPreferences.SETFILTER("User ID",'%1',USERSECURITYID);
      JournalUserPreferences.SETFILTER("Page ID",'%1',PageIdToCheck);
      IF JournalUserPreferences.FINDFIRST THEN
        EXIT(JournalUserPreferences."Journal Batch Name");
      EXIT('');
    END;

    [External]
    PROCEDURE SetLastViewedJournalBatchName@211(PageIdToCheck@1000 : Integer;GenJnlBatch@1002 : Code[10]);
    VAR
      JournalUserPreferences@1001 : Record 1182;
    BEGIN
      JournalUserPreferences.RESET;
      JournalUserPreferences.SETFILTER("User ID",'%1',USERSECURITYID);
      JournalUserPreferences.SETFILTER("Page ID",'%1',PageIdToCheck);
      IF JournalUserPreferences.FINDFIRST THEN BEGIN
        JournalUserPreferences."Journal Batch Name" := GenJnlBatch;
        JournalUserPreferences.MODIFY;
      END;
    END;

    [External]
    PROCEDURE LookupName@6(VAR CurrentJnlBatchName@1000 : Code[10];VAR GenJnlLine@1001 : Record 81);
    VAR
      GenJnlBatch@1002 : Record 232;
    BEGIN
      COMMIT;
      GenJnlBatch."Journal Template Name" := GenJnlLine.GETRANGEMAX("Journal Template Name");
      GenJnlBatch.Name := GenJnlLine.GETRANGEMAX("Journal Batch Name");
      GenJnlBatch.FILTERGROUP(2);
      GenJnlBatch.SETRANGE("Journal Template Name",GenJnlBatch."Journal Template Name");
      GenJnlBatch.FILTERGROUP(0);
      OnBeforeLookupName(GenJnlBatch);
      IF PAGE.RUNMODAL(0,GenJnlBatch) = ACTION::LookupOK THEN BEGIN
        CurrentJnlBatchName := GenJnlBatch.Name;
        SetName(CurrentJnlBatchName,GenJnlLine);
      END;
    END;

    [External]
    PROCEDURE GetAccounts@7(VAR GenJnlLine@1000 : Record 81;VAR AccName@1001 : Text[100];VAR BalAccName@1002 : Text[100]);
    VAR
      GLAcc@1003 : Record 15;
      Cust@1004 : Record 18;
      Vend@1005 : Record 23;
      BankAcc@1006 : Record 270;
      FA@1007 : Record 5600;
      IC@1008 : Record 413;
      Employee@1009 : Record 5200;
    BEGIN
      IF (GenJnlLine."Account Type" <> LastGenJnlLine."Account Type") OR
         (GenJnlLine."Account No." <> LastGenJnlLine."Account No.")
      THEN BEGIN
        AccName := '';
        IF GenJnlLine."Account No." <> '' THEN
          CASE GenJnlLine."Account Type" OF
            GenJnlLine."Account Type"::"G/L Account":
              IF GLAcc.GET(GenJnlLine."Account No.") THEN
                AccName := GLAcc.Name;
            GenJnlLine."Account Type"::Customer:
              IF Cust.GET(GenJnlLine."Account No.") THEN
                AccName := Cust.Name;
            GenJnlLine."Account Type"::Vendor:
              IF Vend.GET(GenJnlLine."Account No.") THEN
                AccName := Vend.Name;
            GenJnlLine."Account Type"::"Bank Account":
              IF BankAcc.GET(GenJnlLine."Account No.") THEN
                AccName := BankAcc.Name;
            GenJnlLine."Account Type"::"Fixed Asset":
              IF FA.GET(GenJnlLine."Account No.") THEN
                AccName := FA.Description;
            GenJnlLine."Account Type"::"IC Partner":
              IF IC.GET(GenJnlLine."Account No.") THEN
                AccName := IC.Name;
            GenJnlLine."Account Type"::Employee:
              IF Employee.GET(GenJnlLine."Account No.") THEN
                AccName := Employee."First Name" + ' ' + Employee."Last Name";
          END;
      END;

      IF (GenJnlLine."Bal. Account Type" <> LastGenJnlLine."Bal. Account Type") OR
         (GenJnlLine."Bal. Account No." <> LastGenJnlLine."Bal. Account No.")
      THEN BEGIN
        BalAccName := '';
        IF GenJnlLine."Bal. Account No." <> '' THEN
          CASE GenJnlLine."Bal. Account Type" OF
            GenJnlLine."Bal. Account Type"::"G/L Account":
              IF GLAcc.GET(GenJnlLine."Bal. Account No.") THEN
                BalAccName := GLAcc.Name;
            GenJnlLine."Bal. Account Type"::Customer:
              IF Cust.GET(GenJnlLine."Bal. Account No.") THEN
                BalAccName := Cust.Name;
            GenJnlLine."Bal. Account Type"::Vendor:
              IF Vend.GET(GenJnlLine."Bal. Account No.") THEN
                BalAccName := Vend.Name;
            GenJnlLine."Bal. Account Type"::"Bank Account":
              IF BankAcc.GET(GenJnlLine."Bal. Account No.") THEN
                BalAccName := BankAcc.Name;
            GenJnlLine."Bal. Account Type"::"Fixed Asset":
              IF FA.GET(GenJnlLine."Bal. Account No.") THEN
                BalAccName := FA.Description;
            GenJnlLine."Bal. Account Type"::"IC Partner":
              IF IC.GET(GenJnlLine."Bal. Account No.") THEN
                BalAccName := IC.Name;
          END;
      END;

      LastGenJnlLine := GenJnlLine;
    END;

    [External]
    PROCEDURE CalcBalance@8(VAR GenJnlLine@1000 : Record 81;LastGenJnlLine@1001 : Record 81;VAR Balance@1002 : Decimal;VAR TotalBalance@1003 : Decimal;VAR ShowBalance@1004 : Boolean;VAR ShowTotalBalance@1005 : Boolean);
    VAR
      TempGenJnlLine@1006 : Record 81;
    BEGIN
      TempGenJnlLine.COPYFILTERS(GenJnlLine);
      ShowTotalBalance := TempGenJnlLine.CALCSUMS("Balance (LCY)");
      IF ShowTotalBalance THEN BEGIN
        TotalBalance := TempGenJnlLine."Balance (LCY)";
        IF GenJnlLine."Line No." = 0 THEN
          TotalBalance := TotalBalance + LastGenJnlLine."Balance (LCY)";
      END;

      IF GenJnlLine."Line No." <> 0 THEN BEGIN
        TempGenJnlLine.SETRANGE("Line No.",0,GenJnlLine."Line No.");
        ShowBalance := TempGenJnlLine.CALCSUMS("Balance (LCY)");
        IF ShowBalance THEN
          Balance := TempGenJnlLine."Balance (LCY)";
      END ELSE BEGIN
        TempGenJnlLine.SETRANGE("Line No.",0,LastGenJnlLine."Line No.");
        ShowBalance := TempGenJnlLine.CALCSUMS("Balance (LCY)");
        IF ShowBalance THEN BEGIN
          Balance := TempGenJnlLine."Balance (LCY)";
          TempGenJnlLine.COPYFILTERS(GenJnlLine);
          TempGenJnlLine := LastGenJnlLine;
          IF TempGenJnlLine.NEXT = 0 THEN
            Balance := Balance + LastGenJnlLine."Balance (LCY)";
        END;
      END;
    END;

    LOCAL PROCEDURE GetAvailableGeneralJournalTemplateName@13(TemplateName@1000 : Code[10]) : Code[10];
    VAR
      GenJnlTemplate@1001 : Record 80;
      PotentialTemplateName@1002 : Code[10];
      PotentialTemplateNameIncrement@1004 : Integer;
    BEGIN
      // Make sure proposed value + incrementer will fit in Name field
      IF STRLEN(TemplateName) > 9 THEN
        TemplateName := FORMAT(TemplateName,9);

      GenJnlTemplate.INIT;
      PotentialTemplateName := TemplateName;
      PotentialTemplateNameIncrement := 0;

      // Expecting few naming conflicts, but limiting to 10 iterations to avoid possible infinite loop.
      WHILE PotentialTemplateNameIncrement < 10 DO BEGIN
        GenJnlTemplate.SETFILTER(Name,PotentialTemplateName);
        IF GenJnlTemplate.COUNT = 0 THEN
          EXIT(PotentialTemplateName);

        PotentialTemplateNameIncrement := PotentialTemplateNameIncrement + 1;
        PotentialTemplateName := TemplateName + FORMAT(PotentialTemplateNameIncrement);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetName@11(VAR GenJournalLine@1000 : Record 81;CurrentJnlBatchName@1001 : Code[10]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeLookupName@15(VAR GenJnlBatch@1000 : Record 232);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSetJournalSimplePageModePreference@14(VAR SetToSimpleMode@1000 : Boolean;PageIdToSet@1001 : Integer;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnTemplateSelectionSetFilter@12(VAR GenJnlTemplate@1000 : Record 80;VAR PageTemplate@1001 : Option);
    BEGIN
    END;

    PROCEDURE TemplateSelectPurchInvApproval@1210190000(PageID@1000004 : Integer;PageTemplate@1210190000 : Option;VAR PurchInvoice@1000001 : Record 122;VAR JnlSelected@1000000 : Boolean);
    VAR
      GenJnlTemplate@1000 : Record 80;
      ListPage@1100525500 : Page 11130146;
    BEGIN
      //**4PS
      JnlSelected := TRUE;

      GenJnlTemplate.RESET;
      GenJnlTemplate.SETRANGE("Page ID",PageID);
      GenJnlTemplate.SETRANGE(Type,PageTemplate);

      CASE GenJnlTemplate.COUNT OF
        0:
          BEGIN
            GenJnlTemplate.INIT;
            GenJnlTemplate.Type := PageTemplate;
            GenJnlTemplate.Name := FORMAT(GenJnlTemplate.Type,MAXSTRLEN(GenJnlTemplate.Name));
            GenJnlTemplate.Description := STRSUBSTNO(Text001,GenJnlTemplate.Type);
            GenJnlTemplate.VALIDATE(Type);
            GenJnlTemplate.INSERT;
            COMMIT;
          END;
        1:
          GenJnlTemplate.FIND('-');
        ELSE BEGIN
          ListPage.SETTABLEVIEW(GenJnlTemplate);
          ListPage.LOOKUPMODE := TRUE;
          IF (ListPage.RUNMODAL = ACTION::LookupOK) THEN BEGIN
            ListPage.GETRECORD(GenJnlTemplate);
            JnlSelected := TRUE;
          END;
          IF ListPage.GetAction() THEN BEGIN
            ListPage.GETRECORD(GenJnlTemplate);
            JnlSelected := TRUE;
          END;
        END;
      END;

      IF JnlSelected THEN BEGIN
        PurchInvoice.FILTERGROUP(2);
        PurchInvoice.SETRANGE("Journal Template",GenJnlTemplate.Name);
        PurchInvoice.FILTERGROUP(0);
      END;
    END;

    PROCEDURE TemplateSelectPurchCrMemoAppr@1100525000(PageID@1000004 : Integer;PageTemplate@1210190000 : Option;VAR PurchCrMemo@1000001 : Record 124;VAR JnlSelected@1000000 : Boolean);
    VAR
      GenJnlTemplate@1000 : Record 80;
      ListPage@1100525500 : Page 11130146;
    BEGIN
      //**4PS
      JnlSelected := TRUE;

      GenJnlTemplate.RESET;
      GenJnlTemplate.SETRANGE("Page ID",PageID);
      GenJnlTemplate.SETRANGE(Type,PageTemplate);

      CASE GenJnlTemplate.COUNT OF
        0:
          BEGIN
            GenJnlTemplate.INIT;
            GenJnlTemplate.Type := PageTemplate;
            GenJnlTemplate.Name := FORMAT(GenJnlTemplate.Type,MAXSTRLEN(GenJnlTemplate.Name));
            GenJnlTemplate.Description := STRSUBSTNO(Text001,GenJnlTemplate.Type);
            GenJnlTemplate.VALIDATE(Type);
            GenJnlTemplate.INSERT;
            COMMIT;
          END;
        1:
          GenJnlTemplate.FIND('-');
        ELSE
          ListPage.SETTABLEVIEW(GenJnlTemplate);
          ListPage.LOOKUPMODE := TRUE;
          ListPage.SetCreditMemo();
          IF ListPage.RUNMODAL = ACTION::LookupOK THEN BEGIN
            ListPage.GETRECORD(GenJnlTemplate);
            JnlSelected := TRUE;
          END;
          IF ListPage.GetAction() THEN BEGIN
            ListPage.GETRECORD(GenJnlTemplate);
            JnlSelected := TRUE;
          END;
      END;

      IF JnlSelected THEN BEGIN
        PurchCrMemo.FILTERGROUP(2);
        PurchCrMemo.SETRANGE("Journal Template",GenJnlTemplate.Name);
        PurchCrMemo.FILTERGROUP(0);
      END;
    END;

    BEGIN
    END.
  }
}

