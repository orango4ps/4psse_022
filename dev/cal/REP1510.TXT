OBJECT Report 1510 Copy Workflow
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Workflow kopieren;
               ENU=Copy Workflow;
               NLD=Werkstroom kopi‰ren;
               NOR=Kopier arbeidsflyt;
               SVE=Kopiera arbetsfl”de];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  CopyWorkflow;
                END;

    UseRequestPage=No;
  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FromWorkflow@1003 : Record 1501;
      ToWorkflow@1004 : Record 1501;
      FromWorkflowCode@1000 : Code[20];
      StepsExistQst@1001 : TextConst 'DEU=Die vorhandenen Workflowschritte werden gel”scht.\\M”chten Sie fortfahren?;ENU=The existing workflow steps will be deleted.\\Do you want to continue?;NLD=De huidige werkstroomstappen worden verwijderd.\\Wilt u doorgaan?;NOR=Eksisterende arbeidsflyttrinn blir slettet.\\Vil du fortsette?';
      SelfCopyErr@1002 : TextConst 'DEU=Sie k”nnen einen Workflow nicht in sich selbst kopieren.;ENU=You cannot copy a workflow into itself.;NLD=U kunt een werkstroom niet naar zichzelf kopi‰ren.;NOR=Du kan ikke kopier en arbeidsflyt til seg selv.';

    LOCAL PROCEDURE CopyWorkflow@5();
    BEGIN
      FromWorkflow.GET(FromWorkflowCode);

      IF FromWorkflow.Code = ToWorkflow.Code THEN
        ERROR(SelfCopyErr);

      IF ToWorkflow.Description = '' THEN
        ToWorkflow.Description := FromWorkflow.Description;
      IF ToWorkflow.Category = '' THEN
        ToWorkflow.Category := FromWorkflow.Category;
      ToWorkflow.MODIFY;

      CopyWorkflowSteps;
    END;

    LOCAL PROCEDURE CopyWorkflowSteps@7();
    VAR
      FromWorkflowStep@1002 : Record 1502;
      FromWorkflowStepArgument@1000 : Record 1523;
      ToWorkflowStep@1004 : Record 1502;
    BEGIN
      ToWorkflowStep.SETRANGE("Workflow Code",ToWorkflow.Code);
      IF NOT ToWorkflowStep.ISEMPTY THEN
        IF NOT CONFIRM(StepsExistQst) THEN
          CurrReport.QUIT;

      ToWorkflowStep.DELETEALL(TRUE);

      FromWorkflowStep.SETRANGE("Workflow Code",FromWorkflow.Code);
      IF FromWorkflowStep.FINDSET THEN
        REPEAT
          ToWorkflowStep.COPY(FromWorkflowStep);
          ToWorkflowStep."Workflow Code" := ToWorkflow.Code;
          IF FromWorkflowStepArgument.GET(FromWorkflowStep.Argument) THEN
            ToWorkflowStep.Argument := FromWorkflowStepArgument.Clone;
          ToWorkflowStep.INSERT(TRUE);

          CopyWorkflowRules(FromWorkflowStep,ToWorkflowStep);
        UNTIL FromWorkflowStep.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyWorkflowRules@2(FromWorkflowStep@1000 : Record 1502;ToWorkflowStep@1001 : Record 1502);
    VAR
      FromWorkflowRule@1002 : Record 1524;
      ToWorkflowRule@1003 : Record 1524;
    BEGIN
      FromWorkflowStep.FindWorkflowRules(FromWorkflowRule);
      IF FromWorkflowRule.FINDSET THEN
        REPEAT
          ToWorkflowRule.COPY(FromWorkflowRule);
          ToWorkflowRule.ID := 0;
          ToWorkflowRule."Workflow Code" := ToWorkflowStep."Workflow Code";
          ToWorkflowRule."Workflow Step ID" := ToWorkflowStep.ID;
          ToWorkflowRule.INSERT(TRUE);
        UNTIL FromWorkflowRule.NEXT = 0;
    END;

    [External]
    PROCEDURE InitCopyWorkflow@3(NewFromWorkflow@1000 : Record 1501;NewToWorkflow@1001 : Record 1501);
    BEGIN
      FromWorkflowCode := NewFromWorkflow.Code;
      ToWorkflow := NewToWorkflow;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

