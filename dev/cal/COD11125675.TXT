OBJECT Codeunit 11125675 Imp. Construction Spec. (RSX)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ImpConstructionSpecRAW@1100528300 : Codeunit 11125666;
      XMLDOMManagement@1100528301 : Codeunit 11020220;
      StringFunctions@1100528302 : Codeunit 11012273;
      MaxFldLen@1100525000 : Integer;
      RawType@1100528500 : Integer;

    PROCEDURE ImportConstructionSpecRSX@1100528301(ConstrSpecNo@1100528302 : Code[20];FileName@1100528902 : Text;VAR ITempBlob@1100528901 : TEMPORARY Record 99008535);
    VAR
      FileMgt@1100528303 : Codeunit 419;
      XMLDoc@1100528304 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLRootNode@1100528305 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLParentNode@1100528300 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ConstructionSpecRAW@1100528900 : Record 11125666;
    BEGIN
      XMLDoc := XMLDoc.XmlDocument;
      XMLDOMManagement.LoadXMLFromBlob(XMLDoc, ITempBlob, TRUE);  //DP02188
      XMLRootNode := XMLDoc.DocumentElement;

      ImpConstructionSpecRAW.InitConstrSpecTables(ConstrSpecNo, FileName);

      //DP02278.sn
      RawType := 0;
      IF (XMLRootNode.Name IN ['raw.bestek']) THEN
        RawType := 1;
      IF (XMLRootNode.Name IN ['raw.raamovereenkomst']) THEN
        RawType := 2;
      IF (XMLRootNode.Name IN ['raw.nvi']) THEN
        RawType := 3;
      IF (XMLRootNode.Name IN ['raw.nvi.ro']) THEN
        RawType := 4;
      IF RawType = 0 THEN EXIT;

      IF (RawType = 1) OR (RawType = 3) THEN BEGIN
        ConstructionSpecRAW.GET(ConstrSpecNo);
        ConstructionSpecRAW."RAW Type":= ConstructionSpecRAW."RAW Type"::Job;
        ConstructionSpecRAW.MODIFY;
      END;
      IF (RawType = 2) OR (RawType = 4) THEN BEGIN
        ConstructionSpecRAW.GET(ConstrSpecNo);
        ConstructionSpecRAW."RAW Type":= ConstructionSpecRAW."RAW Type"::Contract;
        ConstructionSpecRAW.MODIFY;
      END;
      IF (RawType = 3) OR (RawType = 4) THEN BEGIN
        ConstructionSpecRAW.GET(ConstrSpecNo);
        ConstructionSpecRAW."Information Notice" := TRUE;
        ConstructionSpecRAW.MODIFY;
      END;
      //DP02278.en

      ImportGeneralConstrSpecInfo(ConstrSpecNo, XMLRootNode);
      ImportConstrSpecStatusInfo(ConstrSpecNo, XMLRootNode);
      ImportPageHeaderLines(ConstrSpecNo, XMLRootNode);
      ImportUserDefinedLine(ConstrSpecNo, XMLRootNode);
      ImportTextLine(ConstrSpecNo, XMLRootNode);
      ImportElementLine(ConstrSpecNo, XMLRootNode);  //DP02278
      IF XMLDOMManagement.FindNode(XMLRootNode, 'dl3.compleet', XMLParentNode) THEN BEGIN
        ImportConditionsLine(ConstrSpecNo, 1, XMLParentNode, 1, '000000'); // bpl.chapter0109
        ImportConditionsLine(ConstrSpecNo, 2, XMLParentNode, 1, '000000'); // bpl.chapter1199
      END;
      ImportBidFormLine(ConstrSpecNo, XMLRootNode);

      //ImpConstructionSpecRAW.CompressBidFormLines(ConstrSpecNo, '''*5)''');
      //ImpConstructionSpecRAW.CompressBidFormLines(ConstrSpecNo, '''*7)''');
      //ImpConstructionSpecRAW.SetContractorNo(ConstrSpecNo);
    END;

    LOCAL PROCEDURE ImportGeneralConstrSpecInfo@1100528300(ConstrSpecNo@1100528300 : Code[20];XMLRootNode@1100528301 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLNode@1100528302 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Line@1100528303 : Text[1024];
      String@1100528304 : Text[1024];
    BEGIN
      // 4.2.2
      IF (RawType = 3) OR (RawType = 4) THEN BEGIN
        IF NOT XMLDOMManagement.FindNode(XMLRootNode, 'raw.contractinfo.orig', XMLNode) THEN
          EXIT;  //DP02278
      END ELSE BEGIN
        IF NOT XMLDOMManagement.FindNode(XMLRootNode, 'raw.contractinfo', XMLNode) THEN
          EXIT;
      END;

      String := XMLDOMManagement.FindNodeText(XMLNode, 'versie.jaarversie');
      Line := ComposeLine(Line, COPYSTR(String, 1, 4), 13); // Catalog Version
      Line := ComposeLine(Line, COPYSTR(String, 6, 2), 17);

      String := XMLDOMManagement.FindNodeText(XMLNode, 'raw.bestek.nr');
      Line := ComposeLine(Line, COPYSTR(String, 1, 37), 23); // Specification ID

      String := XMLDOMManagement.FindNodeText(XMLNode, 'raw.contr.aangemaakt');
      Line := ComposeLine(Line, COPYSTR(String, 1, 4), 68); // Creation Date
      Line := ComposeLine(Line, COPYSTR(String, 6, 2), 72);
      Line := ComposeLine(Line, COPYSTR(String, 9, 2), 74);

      String := XMLDOMManagement.FindNodeText(XMLNode, 'raw.code.licentiehouder');
      Line := ComposeLine(Line, COPYSTR(String, 1, 4), 76); // RAW User No. (Creator)

      String := XMLDOMManagement.FindNodeText(XMLNode, 'raw.bestek.omschrijving');
      Line := ComposeLine(Line, COPYSTR(String, 1, 65), 100); // C060508: Description

      ImpConstructionSpecRAW.ImportGeneralConstrSpecInfo(ConstrSpecNo, Line);
    END;

    LOCAL PROCEDURE ImportConstrSpecStatusInfo@1100528305(ConstrSpecNo@1100528300 : Code[20];XMLRootNode@1100528301 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLNode@1100528302 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Line@1100528303 : Text[1024];
      String@1100528304 : Text[1024];
    BEGIN
      // 4.2.3
      IF (RawType = 3) OR (RawType = 4) THEN BEGIN
        IF NOT XMLDOMManagement.FindNode(XMLRootNode, 'raw.contractinfo.orig', XMLNode) THEN
          EXIT;  //DP02278
      END ELSE BEGIN
        IF NOT XMLDOMManagement.FindNode(XMLRootNode, 'raw.contractinfo', XMLNode) THEN
          EXIT;
      END;

      String := XMLDOMManagement.FindNodeText(XMLNode, 'raw.overeenkomst.nr');
      Line := ComposeLine(Line, COPYSTR(String, 1, 5), 11); // Registration No.

      String := XMLDOMManagement.FindNodeText(XMLNode, 'raw.ontgrendelcode');
      Line := ComposeLine(Line, COPYSTR(String, 1, 32), 16); // Unlock Code

      ImpConstructionSpecRAW.ImportConstrSpecStatusInfo(ConstrSpecNo, Line);
    END;

    LOCAL PROCEDURE ImportPageHeaderLines@1100528302(ConstrSpecNo@1100528300 : Code[20];XMLRootNode@1100528301 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLNode@1100528302 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NodePathArray@1100528305 : ARRAY [100] OF Text[200];
      NodePathIndex@1100528306 : Integer;
      PageHeaderText@1100528303 : Text[1024];
      PageHeaderText2@1100528304 : Text[1024];
    BEGIN
      // 4.2.4
      IF XMLDOMManagement.FindNode(XMLRootNode, 'dlx.koptekst', XMLNode) THEN BEGIN
        PageHeaderText := XMLNode.InnerXml; // Use xml instead of text. XML contains also <br />.
        //PageHeaderText := StringFunctions.ReplaceString(PageHeaderText, '<dlx.koptekst>', '');
        //PageHeaderText := StringFunctions.ReplaceString(PageHeaderText, '</dlx.koptekst>', '');
        ImportPageHeaderLine(ConstrSpecNo, 1, PageHeaderText);
      END;

      NodePathArray[11] := 'dlx.voor.compleet';
      NodePathArray[21] := 'dl0.compleet';
      NodePathArray[26] := 'dl1.compleet';
      NodePathArray[31] := 'dl2.compleet/dl21.compleet';
      NodePathArray[51] := 'dl2.compleet/dl22.compleet';
      NodePathArray[41] := 'dl2.compleet/dl22.compleet/dl22.verkl.compleet';
      NodePathArray[61] := 'dl3.compleet';
      NodePathArray[87] := 'dlx.na.compleet';
      NodePathArray[93] := 'dlx.voor.inschrijving.compleet';
      NodePathArray[71] := 'dlx.inschrijvingsbiljet';
      NodePathArray[81] := 'dlx.voorblad.inschrijvingsstaat';

      FOR NodePathIndex := 1 TO ARRAYLEN(NodePathArray) DO BEGIN
        IF NodePathArray[NodePathIndex] <> '' THEN BEGIN
          IF XMLDOMManagement.FindNode(XMLRootNode, NodePathArray[NodePathIndex], XMLNode) THEN BEGIN
            IF XMLDOMManagement.FindNode(XMLNode, 'dlx.koptekst', XMLNode) THEN BEGIN
              PageHeaderText2 := XMLNode.InnerXml;
              //PageHeaderText2 := StringFunctions.ReplaceString(PageHeaderText2, '<dlx.koptekst>', '');
              //PageHeaderText2 := StringFunctions.ReplaceString(PageHeaderText2, '</dlx.koptekst>', '');
            END ELSE
              PageHeaderText2 := PageHeaderText; // Use General
            ImportPageHeaderLine(ConstrSpecNo, NodePathIndex, PageHeaderText2)
          END;
        END
      END;
    END;

    LOCAL PROCEDURE ImportPageHeaderLine@1100528308(ConstrSpecNo@1100528301 : Code[20];RecordNo@1100528306 : Integer;String@1100528300 : Text[1024]);
    VAR
      StringArray@1100528304 : ARRAY [10] OF Text[250];
      Line@1100528305 : Text[1024];
      I@1100528303 : Integer;
      P@1100528302 : Integer;
      RecordNo2@1100528307 : Code[10];
    BEGIN
      IF STRPOS(String, '<br/>') > 0 THEN
        StringFunctions.SplitString(String, '<br/>', StringArray)
      ELSE IF STRPOS(String, '<br />') > 0 THEN
        StringFunctions.SplitString(String, '<br />', StringArray)
      ELSE IF STRPOS(String, '<br></br>') > 0 THEN
        StringFunctions.SplitString(String, '<br></br>', StringArray)
      ELSE BEGIN
        I := 0;
        P := 1;
        WHILE P <= STRLEN(String) DO BEGIN
          I := I + 1;
          StringArray[I] := COPYSTR(String, P, 65);
          P := P + STRLEN(StringArray[I]);
        END;
      END;

      FOR I := 1 TO 3 DO BEGIN
        IF StringArray[I] <> '' THEN BEGIN
          RecordNo2 := STRSUBSTNO('0%1', FORMAT(RecordNo + I - 1));
          RecordNo2 := COPYSTR(RecordNo2, STRLEN(RecordNo2) - 1);
          Line := '';
          Line := ComposeLine(Line, RecordNo2, 5);
          Line := ComposeLine(Line, COPYSTR(StringArray[I], 1, 65), 13);
          ImpConstructionSpecRAW.ImportPageHeaderLine(ConstrSpecNo, Line);
        END;
      END;
    END;

    LOCAL PROCEDURE ImportUserDefinedLine@1100528306(ConstrSpecNo@1100528300 : Code[20];XMLRootNode@1100528301 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLNode@1100528302 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList@1100528305 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NodePathArray@1100528308 : ARRAY [3] OF Text[100];
      NodePathIndex@1100528306 : Integer;
      Line@1100528303 : Text[1024];
      String@1100528304 : Text[1024];
      I@1100528309 : Integer;
    BEGIN
      // 4.3.2
      NodePathArray[1] := 'dlx.voor.compleet/dlx.paragraaf';
      NodePathArray[2] := 'dlx.na.compleet/dlx.paragraaf';
      NodePathArray[3] := 'dlx.voor.inschrijving.compleet/dlx.paragraaf';

      FOR NodePathIndex := 1 TO ARRAYLEN(NodePathArray) DO BEGIN
        IF NodePathArray[NodePathIndex] <> '' THEN
          IF XMLDOMManagement.FindNodes(XMLRootNode, NodePathArray[NodePathIndex], XMLNodeList) THEN BEGIN
            FOR I := 0 TO XMLNodeList.Count - 1 DO BEGIN
              XMLNode := XMLNodeList.Item(I);

              Line := '';
              String := XMLDOMManagement.FindNodeText(XMLNode, 'dlx.paragraafnummer');
              Line := ComposeLine(Line, COPYSTR(String, 1, 2), 3); // Paragraph No.

              IF XMLDOMManagement.FindNode(XMLNode, 'dlx.paragraaftekst', XMLNode) THEN
                ImportMultiLine(
                  ConstrSpecNo, XMLNode,
                  './/alinea.paragraaf',
                  Line, Line, 16, 65, 1, 1);
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE ImportTextLine@1100528304(ConstrSpecNo@1100528300 : Code[20];XMLRootNode@1100528301 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLNode@1100528302 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList@1100528305 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NodePathArray@1100528308 : ARRAY [22] OF Text[200];
      NodePathIndex@1100528306 : Integer;
      Line@1100528303 : Text[1024];
      String@1100528304 : Text[1024];
      I@1100528309 : Integer;
    BEGIN
      // 4.4.2
      NodePathArray[10] := 'dl0.compleet/dlx.paragraaf';
      NodePathArray[11] := 'dl1.compleet/dlx.paragraaf';
      NodePathArray[21] := 'dl2.compleet/dl21.compleet/dlx.paragraaf';
      NodePathArray[22] := 'dl2.compleet/dl22.compleet/dl22.verkl.compleet/dlx.paragraaf';

      FOR NodePathIndex := 1 TO ARRAYLEN(NodePathArray) DO BEGIN
        IF NodePathArray[NodePathIndex] <> '' THEN
          IF XMLDOMManagement.FindNodes(XMLRootNode, NodePathArray[NodePathIndex], XMLNodeList) THEN BEGIN
            FOR I := 0 TO XMLNodeList.Count - 1 DO BEGIN
              XMLNode := XMLNodeList.Item(I);

              Line := '';
              Line := ComposeLine(Line, FORMAT(NodePathIndex), 1); // Section Code

              String := XMLDOMManagement.FindNodeText(XMLNode, 'dlx.paragraafnummer');
              Line := ComposeLine(Line, COPYSTR(String, 1, 2), 3); // Paragraph No.

              String := XMLDOMManagement.FindNodeText(XMLNode, 'dlx.paragraafnaam');
              Line := ComposeLine(Line, COPYSTR(String, 1, 65), 15); // Text
              Line := ComposeLine(Line, PADSTR('', 3, '0'), 11); // Paragraph Title
              ImpConstructionSpecRAW.ImportTextLine(ConstrSpecNo, Line);
              Line := ComposeLine(Line, PADSTR('', 65), 15); // Text
              Line := ComposeLine(Line, PADSTR('', 3), 11); // Paragraph Title

              IF XMLDOMManagement.FindNode(XMLNode, 'dlx.paragraaftekst', XMLNode) THEN
                ImportMultiLine(
                  ConstrSpecNo, XMLNode,
                  './/alinea.paragraaf',
                  Line, Line, 15, 65, 1, 2);
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE ImportBidFormLine@1100528307(ConstrSpecNo@1100528300 : Code[20];XMLRootNode@1100528301 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLNode@1100528302 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NodePathArray@1100528308 : ARRAY [2] OF Text[100];
      NodePathIndex@1100528304 : Integer;
      Line@1100528303 : Text[1024];
      Position@1100528306 : Integer;
    BEGIN
      // 4.7.2 and 4.8.2
      NodePathArray[1] := 'dlx.inschrijvingsbiljet/inschrijvingsbiljet';
      NodePathArray[2] := 'dlx.voorblad.inschrijvingsstaat/inschrijvingsstaat';

      MaxFldLen := 80;  //DP01053: previous 65

      FOR NodePathIndex := 1 TO ARRAYLEN(NodePathArray) DO BEGIN
        IF NodePathArray[NodePathIndex] <> '' THEN
          IF XMLDOMManagement.FindNode(XMLRootNode, NodePathArray[NodePathIndex], XMLNode) THEN BEGIN
            Line := '';
            IF NodePathIndex = 1 THEN
              Position := 15
            ELSE
              Position := 14;
            ImportMultiLine(
              ConstrSpecNo, XMLNode,
              './/hoofdcode.vastetekst | ' +
              './/hoofdcode.vrijetekst | ' +
              './/hoofdcode.invultekst | ' +
              './/td.eenvoudig',
              Line, Line, Position, MaxFldLen, 1, 4);  //DP01053
          END;
      END;

      MaxFldLen := 0;  //DP01053
    END;

    LOCAL PROCEDURE ImportElementLine@1100528309(ConstrSpecNo@1100528300 : Code[20];XMLRootNode@1100528301 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLNode@1100528307 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNode2@1100528305 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList@1100528306 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NodePathArray@1100528310 : ARRAY [10] OF Text[1024];
      NodePathIndex@1100528308 : Integer;
      Line@1100528303 : Text[1024];
      NextLine@1100528313 : Text[1024];
      String@1100528304 : Text[1024];
      I@1100528302 : Integer;
      RawTypeTxt@1100528501 : Text;
      ExtensionTxt@1100528500 : Text;
      VolgTxt@1100528900 : Text;
    BEGIN
      // 4.5.2
      //DP02278: procedure redesigned
      IF (RawType = 1) OR (RawType = 3) THEN BEGIN
        IF RawType = 3 THEN ExtensionTxt := '.nvi';
      END;
      IF (RawType = 2) OR (RawType = 4) THEN BEGIN
        RawTypeTxt := '.ro';
        IF RawType = 2 THEN ExtensionTxt := '.ro';
        IF RawType = 4 THEN ExtensionTxt := '.nvi.ro';
      END;
      IF (RawType = 3) OR (RawType = 4) THEN
        VolgTxt := '.nvi';

      NodePathArray[1] :=
        './/dl22.vsub.compleet'+ExtensionTxt+'/dl22.bpost.tussenhoofd | ' +
        './/dl22.vsub.compleet'+ExtensionTxt+'/dl22.resultaatsverpl'+ExtensionTxt+'/dl22.bpost.6cijfer.0'+ExtensionTxt+' | ' +
        './/dl22.vsub.compleet'+ExtensionTxt+'/dl22.resultaatsverpl'+ExtensionTxt+'/dl22.bpost.6cijfer.volg'+VolgTxt;   //C058735

      NodePathArray[2] :=
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.1cijfer | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.6cijfer/dl22.staart.6cijfer.0';

      NodePathArray[3] :=
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.2cijfer.ek'+ExtensionTxt+' | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.tussenhfd.ek'+ExtensionTxt+' | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.6cijfer.ek/dl22.staart.6cijfer.0.ek'+ExtensionTxt+' | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.6cijfer.ek/dl22.staart.6cijfer.volg.ek'+ExtensionTxt+' | ' +

        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.6cijfer.ek.ovr | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.6cijfer.ek.tot | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.nr6.ek.ovr | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.nr6.ek.tot';  //C056978

      NodePathArray[4] :=
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.2cijfer.stelpost'+ExtensionTxt+' | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.tussenhfd.stelpost'+ExtensionTxt+' | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.6cijfer.stelpost'+ExtensionTxt+'/dl22.staart.6cijfer.0.stelpost'+ExtensionTxt+' | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.6cijfer.stelpost'+ExtensionTxt+'/dl22.staart.6cijfer.volg.stelpost'+ExtensionTxt+' | ' +

        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.2cijfer.overig'+ExtensionTxt+' | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.tussenhfd.overig'+ExtensionTxt+' | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.6cijfer.overig'+RawTypeTxt+'/dl22.staart.6cijfer.0.overig'+ExtensionTxt+' | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.6cijfer.overig'+RawTypeTxt+'/dl22.staart.6cijfer.volg.overig'+ExtensionTxt;

      NodePathArray[5] :=
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.2cijfer.krt'+RawTypeTxt+' | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.nr2.krt'+RawTypeTxt+' | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.6cijfer.krt'+RawTypeTxt+' | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.nr6.krt';

      NodePathArray[6] :=
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.2cijfer.uk | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.nr2.uk | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.6cijfer.uk'+RawTypeTxt+' | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.nr6.uk';

      NodePathArray[7] :=
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.2cijfer.ak | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.nr2.ak | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.6cijfer.ak'+RawTypeTxt+' | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.nr6.ak';

      NodePathArray[8] :=
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.2cijfer.wr | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.nr2.wr | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.6cijfer.wr'+RawTypeTxt+' | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.nr6.wr';

      NodePathArray[9] :=
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.2cijfer.bijdrage | ' +
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.nr2.bijdrage | '+
        './/dl22.staart.compleet'+ExtensionTxt+'/dl22.staart.6cijfer.bijdrage'+ExtensionTxt+'/dl22.staart.6cijfer.0.bijdrage'+ExtensionTxt;

      FOR NodePathIndex := 1 TO ARRAYLEN(NodePathArray) DO BEGIN
        IF NodePathArray[NodePathIndex] <> '' THEN BEGIN
          IF XMLDOMManagement.FindNodes(XMLRootNode, NodePathArray[NodePathIndex], XMLNodeList) THEN BEGIN
            FOR I := 0 TO XMLNodeList.Count - 1 DO BEGIN
              XMLNode := XMLNodeList.Item(I);

              Line := PADSTR('', 95);

              CASE TRUE OF
                XMLNode.Name IN ['dl22.bpost.tussenhoofd',
                                 'dl22.staart.1cijfer',
                                 'dl22.staart.2cijfer.krt'+RawTypeTxt,
                                 'dl22.staart.2cijfer.uk',
                                 'dl22.staart.2cijfer.ak',
                                 'dl22.staart.2cijfer.wr',
                                 'dl22.staart.2cijfer.ek', 'dl22.staart.tussenhfd.ek',
                                 'dl22.staart.2cijfer.stelpost', 'dl22.staart.tussenhfd.stelpost',
                                 'dl22.staart.2cijfer.bijdrage', 'dl22.staart.tussenhfd.bijdrage',
                                 'dl22.staart.2cijfer.overig', 'dl22.staart.tussenhfd.overig']:
                  BEGIN
                    IF XMLDOMManagement.FindNode(
                      XMLNode,
                      'dl22.bpost.tussenhoofdnr | ' +
                      'dl22.staart.nr1 |' +
                      'dl22.staart.nr2.krt'+RawTypeTxt+' | ' +
                      'dl22.staart.nr2.uk | ' +
                      'dl22.staart.nr2.ak | ' +
                      'dl22.staart.nr2.wr | ' +
                      'dl22.staart.nr2.ek | dl22.staart.tussenhoofdnr.ek | ' +
                      'dl22.staart.nr2.stelpost | dl22.staart.tussenhoofdnr.stelpost | ' +
                      'dl22.staart.nr2.bijdrage | dl22.staart.tussenhoofdnr.bijdrage | ' +
                      'dl22.staart.nr6.overig | dl22.staart.tussenhoofdnr.overig',
                      XMLNode2)
                    THEN
                      Line := ComposeLine(Line, COPYSTR(XMLNode2.InnerText, 1, 6), 3); // Element No.

                    Line := ComposeLine(Line, '00', 9);  // Defi Code Position
                    Line := ComposeLine(Line, '00', 72); // Defi Code Value
                    Line := ComposeLine(Line, '00', 11); // Line No.
                    Line := ComposeLine(Line, '0', 13);  // Page Break Before
                    Line := ComposeLine(Line, '0', 14);  // Modifications Allowed
                    Line := ComposeLine(Line, '000000', 66); // Activity

                    String := XMLDOMManagement.FindNodeText(XMLNode, 'romptekst'); // Text
                    Line := ComposeLine(Line, COPYSTR(String, 1, 50), 15);

                    ImpConstructionSpecRAW.ImportElementLine(ConstrSpecNo, Line); // Line 00

                    Line := ComposeLine(Line, '01', 11); // Line No.

                    NextLine := Line;
                    NextLine := ComposeLine(NextLine, '  ', 11); // Line No.

                    ImportMultiLine(
                      ConstrSpecNo, XMLNode,
                      'dl22.tussenhfd.tekst',
                      Line, NextLine, 15, 50, 1, 3); // Text
                  END;
                XMLNode.Name IN ['dl22.bpost.6cijfer.0'+ExtensionTxt,
                                 'dl22.bpost.6cijfer.volg'+VolgTxt,  //C058735
                                 'dl22.staart.6cijfer.krt'+RawTypeTxt,
                                 'dl22.staart.6cijfer.uk'+RawTypeTxt,
                                 'dl22.staart.6cijfer.ak'+RawTypeTxt,
                                 'dl22.staart.6cijfer.wr'+RawTypeTxt,
                                 'dl22.staart.6cijfer.ek.ovr',
                                 'dl22.staart.6cijfer.ek.tot',  //C056978
                                 'dl22.staart.6cijfer.0.ek'+ExtensionTxt,
                                 'dl22.staart.6cijfer.volg.ek'+ExtensionTxt,
                                 'dl22.staart.6cijfer.0',
                                 'dl22.staart.6cijfer.0.stelpost'+ExtensionTxt,
                                 'dl22.staart.6cijfer.volg.stelpost'+ExtensionTxt,
                                 'dl22.staart.6cijfer.0.bijdrage'+ExtensionTxt,
                                 'dl22.staart.6cijfer.0.overig'+ExtensionTxt,
                                 'dl22.staart.6cijfer.volg.overig'+ExtensionTxt]:
                  BEGIN
                    IF XMLDOMManagement.FindNode(
                      XMLNode,
                      'dl22.bpost.nr6.0 | ' +
                      'dl22.bpost.nr6.volg | ' +
                      'dl22.staart.nr6.krt | ' +
                      'dl22.staart.nr6.uk | ' +
                      'dl22.staart.nr6.ak | ' +
                      'dl22.staart.nr6.wr | ' +
                      'dl22.staart.nr6.ek.ovr | ' +
                      'dl22.staart.nr6.ek.tot | ' +  //C056978
                      'dl22.staart.nr6.0.ek | '+
                      'dl22.staart.nr6.volg.ek | ' +
                      'dl22.staart.nr6 | ' +
                      'dl22.staart.nr6.0.stelpost | '+
                      'dl22.staart.nr6.volg.stelpost | ' +
                      'dl22.staart.nr6.0.bijdrage | ' +
                      'dl22.staart.nr6.0.overig | ' +
                      'dl22.staart.nr6.volg.overig',
                      XMLNode2)
                    THEN
                      Line := ComposeLine(Line, COPYSTR(XMLNode2.InnerText, 1, 6), 3); // Element No.

                    Line := ComposeLine(Line, '00', 9);  // Defi Code Position
                    Line := ComposeLine(Line, '00', 72); // Defi Code Value
                    Line := ComposeLine(Line, '00', 11); // Line No.
                    Line := ComposeLine(Line, '0', 13);  // Page Break Before
                    Line := ComposeLine(Line, '0', 14);  // Modifications Allowed
                    String := XMLDOMManagement.FindNodeText(XMLNode, 'dl22.hoofdcode/werkcategorie.nr');
                    Line := ComposeLine(Line, COPYSTR(String, 1, 2), 66); // Activity
                    String := XMLDOMManagement.FindNodeText(XMLNode, 'dl22.hoofdcode/subwerkcategorie.nr');
                    Line := ComposeLine(Line, COPYSTR(String, 1, 2), 68); // Activity
                    String := XMLDOMManagement.FindNodeText(XMLNode, 'dl22.hoofdcode/hoofdcode.volgnr');
                    Line := ComposeLine(Line, COPYSTR(String, 1, 2), 70); // Activity
                    String := XMLDOMManagement.FindNodeText(XMLNode, 'romptekst');
                    Line := ComposeLine(Line, COPYSTR(String, 1, 50), 15); // Text

                    IF XMLDOMManagement.FindNode(
                      XMLNode,
                      'dl22.hoev.res.verpl'+RawTypeTxt+' | ' +
                      'dl22.hoev.ter.inl | ' +
                      'dl22.staart.hoev.res.verpl'+RawTypeTxt+' | ' +
                      'dl22.staart.hoev.res.verpl.stelpost',
                      XMLNode2)
                    THEN BEGIN
                      String := XMLDOMManagement.GetAttributeValue(XMLNode2, 'kenmerk');
                      Line := ComposeLine(Line, COPYSTR(String, 1, 1), 87); // Quantity type
                      Line := ComposeLine(Line, COPYSTR(GetQuantity(XMLNode2.InnerText, 2), 1, 9), 78); // Quantity
                    END;

                    IF XMLDOMManagement.FindNode(XMLNode, 'dl22.eenheid.res.verpl'+RawTypeTxt, XMLNode2) THEN BEGIN
                      Line := ComposeLine(Line, COPYSTR(XMLNode2.InnerText, 1, 4), 74); // External Unit of Measure Code
                      String := XMLDOMManagement.GetAttributeValue(XMLNode2, 'eenheidwijzigbaar');
                      Line := ComposeLine(Line, ModifyAllowed2Code(String), 14) // Modifications Allowed
                    END ELSE IF XMLDOMManagement.FindNode(XMLNode, 'dl22.staart.eenheid'+RawTypeTxt, XMLNode2) THEN
                      Line := ComposeLine(Line, COPYSTR(XMLNode2.InnerText, 1, 4), 74); // External Unit of Measure Code

                    ImpConstructionSpecRAW.ImportElementLine(ConstrSpecNo, Line); // Line 00

                    Line := ComposeLine(Line, '01', 11); // Line No.

                    // Headcode.Headtext
                    NextLine := Line;
                    NextLine := ComposeLine(NextLine, '  ', 11); // Line No.
                    NextLine := ComposeLine(NextLine, PADSTR('', 4), 74); // External Unit of Measure Code
                    NextLine := ComposeLine(NextLine, '0', 14); // Modifications Allowed
                    NextLine := ComposeLine(NextLine, PADSTR('', 9), 78); // Quantity
                    NextLine := ComposeLine(NextLine, ' ', 87); // Quantity Type
                    ImportMultiLine(
                      ConstrSpecNo, XMLNode,
                      'hoofdcode.hoofdtekst/hoofdcode.vastetekst | ' +
                      'hoofdcode.hoofdtekst/hoofdcode.titel.vrijetekst | ' +
                      'hoofdcode.hoofdtekst/hoofdcode.vrijetekst',
                      Line, NextLine, 15, 50, 1, 3);

                    Line := NextLine;

                    // Headcode.textblock
                    ImportMultiLine(
                      ConstrSpecNo, XMLNode,
                      'hoofdcode.tekstblok/alinea.hoofdcode/hoofdcode.vastetekst | ' +
                      'hoofdcode.tekstblok/alinea.hoofdcode/hoofdcode.vrijetekst | ' +
                      'hoofdcode.tekstblok/alinea.hoofdcode/hoofdcode.invultekst',
                      Line, Line, 15, 50, 1, 3);

                    // Deficode
                    ImportElementLineDeficode(ConstrSpecNo, XMLNode, Line);
                  END;
              END; // End Case
            END
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE ImportElementLineDeficode@1100528318(ConstrSpecNo@1100528301 : Code[20];XMLNode@1100528300 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Line@1100528302 : Text[1024]);
    VAR
      XMLNode1@1100528314 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNode2@1100528313 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList1@1100528310 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLNodeList2@1100528309 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NextLine@1100528307 : Text[1024];
      String@1100528306 : Text[1024];
      I@1100528305 : Integer;
      J@1100528304 : Integer;
      QuanTxt@1100525000 : Text[100];
    BEGIN
      IF XMLDOMManagement.FindNodes(XMLNode, 'deficode', XMLNodeList1) THEN BEGIN
        FOR I := 0 TO XMLNodeList1.Count - 1 DO BEGIN
          XMLNode1 := XMLNodeList1.Item(I);

          String := XMLDOMManagement.FindNodeText(XMLNode1, 'positie.nr');
          Line := ComposeLine(Line, COPYSTR(String, 1, 2), 9); // Defi Code Position
          String := XMLDOMManagement.FindNodeText(XMLNode1, 'inhoud.nr');
          Line := ComposeLine(Line, COPYSTR(String, 1, 2), 72); // Defi Code Value

          IF XMLDOMManagement.FindNodes(XMLNode1, 'deficode.inhoud.tekst/alinea.hoofdcode', XMLNodeList2) THEN BEGIN
            FOR J := 0 TO XMLNodeList2.Count - 1 DO BEGIN
              XMLNode2 := XMLNodeList2.Item(J);

              String := XMLDOMManagement.GetAttributeValue(XMLNode2, 'eenheid.bouwstof');
              Line := ComposeLine(Line, PADSTR('', 4), 74);
              Line := ComposeLine(Line, COPYSTR(String, 1, 4), 74); // External Unit of Measure Code
              String := XMLDOMManagement.GetAttributeValue(XMLNode2, 'eenheidwijzigbaar');
              Line := ComposeLine(Line, '0', 14);
              Line := ComposeLine(Line, ModifyAllowed2Code(String), 14); // Modifications Allowed
              String := XMLDOMManagement.GetAttributeValue(XMLNode2, 'hoev.bouwstof');
              Line := ComposeLine(Line, PADSTR('', 9), 78);
              QuanTxt := COPYSTR(GetQuantity(String, 2), 1, 9);  //C034000
              Line := ComposeLine(Line, COPYSTR(GetQuantity(String, 2), 1, 9), 78); // Quantity
              String := XMLDOMManagement.GetAttributeValue(XMLNode2, 'aard');
              Line := ComposeLine(Line, ' ', 87);
              Line := ComposeLine(Line, COPYSTR(String, 1, 1), 87); // Quantity type

              IF J = 0 THEN BEGIN
                NextLine := Line;
                NextLine := ComposeLine(NextLine, PADSTR('', 2), 9); // Defi Code Position
                NextLine := ComposeLine(NextLine, PADSTR('', 2), 72); // Defi Code Value
                NextLine := ComposeLine(NextLine, PADSTR('', 4), 74); // External Unit of Measure Code
                NextLine := ComposeLine(NextLine, '0', 14); // Modifications Allowed
                NextLine := ComposeLine(NextLine, PADSTR('', 9), 78); // Quantity
                NextLine := ComposeLine(NextLine, ' ', 87); // Quantity Type
              END ELSE BEGIN
                IF QuanTxt <> '' THEN BEGIN
                  //C034000.sn
                  //if more then 1 line avaible with filled specification of quantity per defi-code
                  Line := ComposeLine(Line, PADSTR('', 2), 9); // Defi Code Position
                  Line := ComposeLine(Line, PADSTR('', 2), 72); // Defi Code Value
                  //
                  NextLine := ComposeLine(NextLine, PADSTR('', 2), 9); // Defi Code Position
                  NextLine := ComposeLine(NextLine, PADSTR('', 2), 72); // Defi Code Value
                  NextLine := ComposeLine(NextLine, PADSTR('', 4), 74); // External Unit of Measure Code
                  NextLine := ComposeLine(NextLine, '0', 14); // Modifications Allowed
                  NextLine := ComposeLine(NextLine, PADSTR('', 9), 78); // Quantity
                  NextLine := ComposeLine(NextLine, ' ', 87); // Quantity Type
                  //C034000.en
                END ELSE BEGIN
                  Line := NextLine;
                END;
              END;

              ImportMultiLine(
                ConstrSpecNo, XMLNode2,
                'hoofdcode.vastetekst |' +
                'hoofdcode.vrijetekst |' +
                'hoofdcode.invultekst',
                Line, NextLine, 15, 50, 1, 3);
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE ImportConditionsLine@1100528310(ConstrSpecNo@1100528300 : Code[20];Type@1100528302 : Integer;XMLParentNode@1100528315 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Level@1100528317 : Integer;Paragraph@1100528310 : Text[30]);
    VAR
      XMLNode@1100528308 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList@1100528312 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NodePathArray@1100528306 : ARRAY [2,10,2] OF Text[100];
      ParagraphNrArray@1100528307 : ARRAY [2,10] OF Text[100];
      ParagraphNameArray@1100528309 : ARRAY [2,10] OF Text[100];
      NodePathChild@1100528301 : Text[100];
      Line@1100528305 : Text[1024];
      String@1100528304 : Text[1024];
      I@1100528303 : Integer;
    BEGIN
      // 4.6.2

      // array is a tree of nodes
      // array dimension 1 is type (1 = bpl.chapter0109, 2 = bpl.chapter1099)
      // array dimension 2 is sequence
      // array dimension 3 is parent or child (1 = parent, 2 = child)

      // This is a recursive function. This function call itself for the sub paragraph.

      // bpl.chapter0109
      NodePathArray[1,1,1] := 'dl3.compleet';
      NodePathArray[1,1,2] := 'bpl.hoofdstuk0109'; // minOccurs 0 maxOccurs 9
      NodePathArray[1,2,1] := 'bpl.hoofdstuk0109';
      NodePathArray[1,2,2] := 'bpl.paragraaf.hfd0109'; // minOccurs 0 maxOccurs 99
      NodePathArray[1,3,1] := 'bpl.paragraaf.hfd0109';
      NodePathArray[1,3,2] := 'bpl.artikel'; // minOccurs 0 maxOccurs 99
      NodePathArray[1,4,1] := 'bpl.artikel';
      NodePathArray[1,4,2] := 'bpl.lid'; // minOccurs 0 maxOccurs 99
      NodePathArray[1,5,1] := 'bpl.lid';
      NodePathArray[1,5,2] := '';

      ParagraphNrArray[1,1] := 'hoofdstuk.nr0109';
      ParagraphNrArray[1,2] := 'paragraaf.nr2';
      ParagraphNrArray[1,3] := 'artikel.nr';
      ParagraphNrArray[1,4] := 'lid.nr';

      ParagraphNameArray[1,1] := 'hoofdstuk.naam';
      ParagraphNameArray[1,2] := 'paragraaf.naam';
      ParagraphNameArray[1,3] := 'artikel.hoofd';
      ParagraphNameArray[1,4] := '';

      // bpl.chapter1099
      NodePathArray[2,1,1] := 'dl3.compleet';
      NodePathArray[2,1,2] := 'bpl.hoofdstuk1099'; // minOccurs 0 maxOccurs 90
      NodePathArray[2,2,1] := 'bpl.hoofdstuk1099';
      NodePathArray[2,2,2] := 'bpl.deelhoofdstuk'; // minOccurs 0 maxOccurs 10
      NodePathArray[2,3,1] := 'bpl.deelhoofdstuk';
      NodePathArray[2,3,2] := 'bpl.paragraaf.hfd1099'; // maxOccurs 7
      NodePathArray[2,4,1] := 'bpl.paragraaf.hfd1099';
      NodePathArray[2,4,2] := 'bpl.artikel'; // minOccurs 0 maxOccurs 99
      NodePathArray[2,5,1] := 'bpl.artikel';
      NodePathArray[2,5,2] := 'bpl.lid'; // minOccurs 0 maxOccurs 99
      NodePathArray[2,6,1] := 'bpl.lid';
      NodePathArray[2,6,2] := '';

      ParagraphNrArray[2,1] := 'hoofdstuk.nr1099';
      ParagraphNrArray[2,2] := 'deelhoofdstuk.nr';
      ParagraphNrArray[2,3] := 'paragraaf.nr1';
      ParagraphNrArray[2,4] := 'artikel.nr';
      ParagraphNrArray[2,5] := 'lid.nr';

      ParagraphNameArray[2,1] := 'hoofdstuk.naam';
      ParagraphNameArray[2,2] := 'deelhoofdstuk.naam';
      ParagraphNameArray[2,3] := 'paragraaf.naam';
      ParagraphNameArray[2,4] := 'artikel.hoofd';
      ParagraphNameArray[2,5] := '';

      FOR Level := Level TO ARRAYLEN(NodePathArray, 2) DO BEGIN
        IF NodePathArray[Type, Level, 1] = XMLParentNode.Name THEN BEGIN
          NodePathChild := NodePathArray[Type, Level, 2];
          IF NodePathChild <> '' THEN BEGIN
            IF XMLDOMManagement.FindNodes(XMLParentNode, NodePathChild, XMLNodeList) THEN BEGIN
              FOR I := 0 TO XMLNodeList.Count - 1 DO BEGIN
                XMLNode := XMLNodeList.Item(I);

                String := XMLDOMManagement.FindNodeText(XMLNode, ParagraphNrArray[Type, Level]);
                IF (Type = 1) OR (Level = 1) THEN
                  Paragraph := ComposeLine(Paragraph, COPYSTR(String, 1, 2), (1 + ((Level - 1) * 2)))
                ELSE BEGIN
                  IF (Level = 2) OR (Level = 3) THEN
                    Paragraph := ComposeLine(Paragraph, COPYSTR(String, 1, 1), Level + 1)
                  ELSE
                    Paragraph := ComposeLine(Paragraph, COPYSTR(String, 1, 2), (1 + ((Level - 2) * 2)))
                END;

                Line := '';
                Line := ComposeLine(Line, COPYSTR(Paragraph, 1, 8), 3); // Chapter No., Paragraph No., Section No., Subsection No.
                Line := ComposeLine(Line, '00', 11); // Title

                IF ParagraphNameArray[Type, Level] <> '' THEN BEGIN
                  String := XMLDOMManagement.FindNodeText(XMLNode, ParagraphNameArray[Type, Level]); // Text
                  Line := ComposeLine(Line, COPYSTR(String, 1, 59), 14);
                END;

                ImpConstructionSpecRAW.ImportConditionsLine(ConstrSpecNo, Line);

                ImportConditionsLine(ConstrSpecNo, Type, XMLNode, Level + 1, Paragraph);
              END;
            END;
          END ELSE BEGIN
            Line := '';
            Line := ComposeLine(Line, COPYSTR(Paragraph, 1, 8), 3); // Chapter No., Paragraph No., Section No., Subsection No.
            ImportMultiLine(
              ConstrSpecNo, XMLParentNode,
              'bpl.lidtekst//alinea.paragraaf',
              Line, Line, 14, 59, 1, 5);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE ComposeLine@1100528303(Line@1100528300 : Text[1024];String@1100528301 : Text[1024];Position@1100528302 : Integer) : Text[1024];
    VAR
      I@1100528303 : Integer;
    BEGIN
      IF STRLEN(Line) < Position + STRLEN(String) - 1 THEN
        Line := PADSTR(Line, Position + STRLEN(String) - 1);

      FOR I := 1 TO STRLEN(String) DO
        Line[Position + I - 1] := String[I];

      EXIT(Line);
    END;

    LOCAL PROCEDURE ImportMultiLine@1100528314(ConstrSpecNo@1100528301 : Code[20];XMLNode@1100528309 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodePath@1100528305 : Text[1024];FirstLine@1100528300 : Text[1024];NextLine@1100528313 : Text[1024];Position@1100528302 : Integer;LineLength@1100528303 : Integer;TabLength@1100528318 : Integer;Func@1100528304 : Integer);
    VAR
      XMLNode1@1100528314 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLParentNode@1100528308 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList1@1100528311 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      String@1100528307 : Text[1024];
      I@1100528306 : Integer;
      P@1100528310 : Integer;
      FormattedBT@1100528317 : BigText;
      First@1100528315 : Boolean;
      Ln@1100528316 : Text[1024];
    BEGIN
      First := TRUE;
      ImpConstructionSpecRAW.SetMaxFldLen(MaxFldLen);  //DP01053
      IF XMLDOMManagement.FindNodes(XMLNode, NodePath, XMLNodeList1) THEN BEGIN
        FOR I := 0 TO XMLNodeList1.Count - 1 DO BEGIN
          XMLNode1 := XMLNodeList1.Item(I);

          FormatBigText(XMLNode1.InnerText, FormattedBT, LineLength, TabLength);

          P := 1;
          WHILE P <= FormattedBT.LENGTH DO BEGIN
            P := P + FormattedBT.GETSUBTEXT(String, P, LineLength);
            IF First THEN
              Ln := FirstLine
            ELSE
              Ln := NextLine;
            Ln := ComposeLine(Ln, PADSTR('', LineLength), Position);
            Ln := ComposeLine(Ln, String, Position);
            CASE Func OF
              1:
                BEGIN
                  XMLParentNode := XMLNode.ParentNode;
                  XMLParentNode := XMLParentNode.ParentNode;
                  CASE TRUE OF
                    STRPOS(XMLParentNode.Name, 'dlx.voor.compleet') <> 0 :
                      ImpConstructionSpecRAW.ImportUserDefinedLine(ConstrSpecNo, Ln, 1);
                    STRPOS(XMLParentNode.Name, 'dlx.na.compleet') <> 0 :
                      ImpConstructionSpecRAW.ImportUserDefinedLine(ConstrSpecNo, Ln, 2);
                    STRPOS(XMLParentNode.Name, 'dlx.voor.inschrijving.compleet') <> 0 :
                      ImpConstructionSpecRAW.ImportUserDefinedLine(ConstrSpecNo, Ln, 3);
                  END;
                END;
              2: ImpConstructionSpecRAW.ImportTextLine(ConstrSpecNo, Ln);
              3: ImpConstructionSpecRAW.ImportElementLine(ConstrSpecNo, Ln);
              4:
                BEGIN
                  XMLParentNode := XMLNode.ParentNode;
                  CASE TRUE OF
                    STRPOS(XMLParentNode.Name, 'inschrijvingsbiljet') <> 0 :
                      ImpConstructionSpecRAW.ImportBidFormLine(ConstrSpecNo, Ln, 1);
                    STRPOS(XMLParentNode.Name, 'inschrijvingsstaat') <> 0 :
                      ImpConstructionSpecRAW.ImportBidFormLine(ConstrSpecNo, Ln, 2);
                  END;
                END;
              5: ImpConstructionSpecRAW.ImportConditionsLine(ConstrSpecNo, Ln);
            END; // End case
            First := FALSE;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE FormatBigText@1100528311(BT@1100528300 : Text;VAR FormattedBT@1100528306 : BigText;LineLength@1100528301 : Integer;TabLength@1100528302 : Integer);
    VAR
      String@1100528304 : Text;
      String2@1100528307 : Text;
      Word@1100528310 : Text;
      Word2@1100409000 : Text;
      Line@1100528305 : Text;
      P@1100528303 : Integer;
      P2@1100409001 : Integer;
    BEGIN
      //
      // Extend lines to line length, use word wrap, convert line breaks and tabs
      //
      CLEAR(FormattedBT);

      P := 1;
      WHILE P <= STRLEN(BT) DO BEGIN
        String := COPYSTR(BT, P);

        String2 := DELCHR(String, '<', ' ');
        P := P + STRLEN(String) - STRLEN(String2);
        String := String2;

        Word := FirstWord(String);

        P2 := 1;
        WHILE P2 <= STRLEN(Word) DO BEGIN
          Word2 := COPYSTR(Word, P2, LineLength);
          P2 := P2 + STRLEN(Word2);

          IF Word2 IN ['<br/>', '<br />'] THEN BEGIN
            Line := Line + PADSTR('', LineLength - STRLEN(Line));
            FormattedBT.ADDTEXT(Line);
            Line := '';
          END ELSE IF Word2 IN ['<tab/>', '<tab />'] THEN BEGIN
            IF STRLEN(Line) + TabLength > LineLength THEN BEGIN
              Line := Line + PADSTR('', LineLength - STRLEN(Line));
              FormattedBT.ADDTEXT(Line);
              Line := '';
            END ELSE
              Line := Line + PADSTR('', TabLength);
          END ELSE BEGIN
            IF STRLEN(Line) + STRLEN(Word2) + 1 > LineLength THEN BEGIN
              Line := Line + PADSTR('', LineLength - STRLEN(Line));
              FormattedBT.ADDTEXT(Line);
              Line := Word2;
            END ELSE
              IF Line = '' THEN BEGIN
                Line := Word2
              END ELSE
                Line := Line + ' ' + Word2;
          END;
        END;

        P := P + STRLEN(Word);
      END;

      IF Line <> '' THEN BEGIN
        Line := Line + PADSTR('', LineLength - STRLEN(Line));
        FormattedBT.ADDTEXT(Line);
      END;
    END;

    LOCAL PROCEDURE FirstWord@1100528312(String@1100528300 : Text) : Text;
    VAR
      P1@1100528301 : Integer;
      P2@1100528302 : Integer;
      P3@1100528303 : Integer;
    BEGIN
      IF String[1] = '<' THEN BEGIN
        P1 := STRPOS(String, '>');
        IF (P1 > 0) THEN
          EXIT(COPYSTR(String, 1, P1)); // e.q. <br/>
        P1 := STRPOS(String, ' ');
        IF (P1 > 0) THEN
          EXIT(COPYSTR(String, 1, P1 - 1));
      END ELSE BEGIN
        P1 := STRPOS(String, '<');
        P2 := STRPOS(String, '>');
        P3 := STRPOS(String, ' ');
        IF (P1 > 0) AND (P2 > 0) AND ((P1 < P3) OR (P3 = 0)) THEN
          EXIT(COPYSTR(String, 1, P1 - 1));
        IF (P3 > 0) THEN
          EXIT(COPYSTR(String, 1, P3 - 1));
      END;

      EXIT(String);
    END;

    LOCAL PROCEDURE ModifyAllowed2Code@1100528313(String@1100528300 : Text[30]) : Code[1];
    BEGIN
      IF LOWERCASE(String) = 'ja' THEN
        EXIT('1')
      ELSE
        EXIT('0');
    END;

    PROCEDURE GetQuantity@1100528315(Code@1100528300 : Code[10];NumDecimals@1100528301 : Integer) : Code[10];
    VAR
      Dec@1100528302 : Decimal;
    BEGIN
      Code := CONVERTSTR(Code, '.', ',');
      IF NOT EVALUATE(Dec, Code) THEN
        EXIT(Code);

      Dec := Dec * POWER(10, NumDecimals);

      EXIT(FORMAT(Dec, 0, '<Integer>'));
    END;

    BEGIN
    END.
  }
}

