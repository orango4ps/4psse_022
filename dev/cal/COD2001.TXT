OBJECT Codeunit 2001 Azure ML Connector
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AzureMLRequest@1000 : DotNet "'Microsoft.Dynamics.Nav.AzureMLWrapper, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.AzureMLWrapper.AzureMLRequest" WITHEVENTS;
      AzureMLParametersBuilder@1006 : DotNet "'Microsoft.Dynamics.Nav.AzureMLWrapper, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.AzureMLWrapper.AzureMLParametersBuilder" WITHEVENTS;
      AzureMLInputBuilder@1005 : DotNet "'Microsoft.Dynamics.Nav.AzureMLWrapper, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.AzureMLWrapper.AzureMLInputBuilder" WITHEVENTS;
      HttpMessageHandler@1007 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpMessageHandler";
      ProcessingTime@1001 : Decimal;
      OutputNameTxt@1004 : TextConst '@@@={Locked};ENU=Output1;NOR=Output1;SVE=Output1';
      InputNameTxt@1003 : TextConst '@@@={Locked};ENU=input1;NOR=input1;SVE=input1';
      ParametersNameTxt@1002 : TextConst '@@@={Locked};ENU=Parameters;NOR=Parameters;SVE=Parameters';
      InputName@1010 : Text;
      OutputName@1008 : Text;
      ParametersName@1009 : Text;

    [External]
    PROCEDURE Initialize@3(ApiKey@1000 : Text;ApiUri@1001 : Text;TimeOutSeconds@1002 : Integer);
    BEGIN
      AzureMLRequest := AzureMLRequest.AzureMLRequest(ApiKey,ApiUri,TimeOutSeconds);
      // To set HttpMessageHandler first call SetMessageHandler
      AzureMLRequest.SetHttpMessageHandler(HttpMessageHandler);

      AzureMLInputBuilder := AzureMLInputBuilder.AzureMLInputBuilder;

      AzureMLParametersBuilder := AzureMLParametersBuilder.AzureMLParametersBuilder;

      OutputName := OutputNameTxt;
      InputName := InputNameTxt;
      ParametersName := ParametersNameTxt;

      AzureMLRequest.SetInput(InputName,AzureMLInputBuilder);
      AzureMLRequest.SetParameter(ParametersName,AzureMLParametersBuilder);
    END;

    [External]
    PROCEDURE IsInitialized@1() : Boolean;
    BEGIN
      EXIT(NOT ISNULL(AzureMLRequest) AND NOT ISNULL(AzureMLInputBuilder) AND NOT ISNULL(AzureMLParametersBuilder));
    END;

    [Internal]
    PROCEDURE SendToAzureMLInternal@10(TrackUsage@1001 : Boolean) : Boolean;
    VAR
      CortanaIntelligenceUsage@1000 : Record 2003;
    BEGIN
      AzureMLRequest.SetUsingStandardCredentials(TrackUsage);

      IF NOT SendRequestToAzureML THEN
        EXIT(FALSE);

      IF TrackUsage THEN BEGIN
        // Convert to seconds
        ProcessingTime := ProcessingTime / 1000;
        CortanaIntelligenceUsage.IncrementTotalProcessingTime(CortanaIntelligenceUsage.Service::"Machine Learning",
          ProcessingTime);
      END;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE SendToAzureML@12() : Boolean;
    BEGIN
      EXIT(SendToAzureMLInternal(TRUE));
    END;

    [TryFunction]
    [Internal]
    PROCEDURE SendRequestToAzureML@2();
    BEGIN
      AzureMLRequest.SetHttpMessageHandler(HttpMessageHandler);
      ProcessingTime := AzureMLRequest.InvokeRequestResponseService;
    END;

    [Internal]
    PROCEDURE SetMessageHandler@7(MessageHandler@1000 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpMessageHandler");
    BEGIN
      HttpMessageHandler := MessageHandler;
    END;

    [TryFunction]
    [External]
    PROCEDURE SetInputName@9(Name@1000 : Text);
    BEGIN
      InputName := Name;
      AzureMLRequest.SetInput(InputName,AzureMLInputBuilder);
    END;

    [TryFunction]
    [External]
    PROCEDURE AddInputColumnName@8(ColumnName@1000 : Text);
    BEGIN
      AzureMLInputBuilder.AddColumnName(ColumnName);
    END;

    [TryFunction]
    [External]
    PROCEDURE AddInputRow@5();
    BEGIN
      AzureMLInputBuilder.AddRow;
    END;

    [TryFunction]
    [External]
    PROCEDURE AddInputValue@6(Value@1000 : Text);
    BEGIN
      AzureMLInputBuilder.AddValue(Value);
    END;

    [TryFunction]
    [External]
    PROCEDURE AddParameter@19(Name@1000 : Text;Value@1001 : Text);
    BEGIN
      AzureMLParametersBuilder.AddParameter(Name,Value);
    END;

    [TryFunction]
    [External]
    PROCEDURE SetParameterName@15(Name@1000 : Text);
    BEGIN
      ParametersName := Name;
      AzureMLRequest.SetParameter(ParametersName,AzureMLParametersBuilder);
    END;

    [TryFunction]
    [External]
    PROCEDURE SetOutputName@11(Name@1000 : Text);
    BEGIN
      OutputName := Name;
    END;

    [TryFunction]
    [External]
    PROCEDURE GetOutput@16(LineNo@1000 : Integer;ColumnNo@1001 : Integer;VAR OutputValue@1002 : Text);
    BEGIN
      OutputValue := AzureMLRequest.GetOutputValue(OutputName,LineNo - 1,ColumnNo - 1);
    END;

    [TryFunction]
    [External]
    PROCEDURE GetOutputLength@24(VAR Length@1000 : Integer);
    BEGIN
      Length := AzureMLRequest.GetOutputLength(OutputName);
    END;

    [TryFunction]
    [External]
    PROCEDURE GetInput@35(LineNo@1000 : Integer;ColumnNo@1001 : Integer;VAR InputValue@1002 : Text);
    BEGIN
      InputValue := AzureMLInputBuilder.GetValue(LineNo - 1,ColumnNo - 1);
    END;

    [TryFunction]
    [External]
    PROCEDURE GetInputLength@39(VAR Length@1000 : Integer);
    BEGIN
      Length := AzureMLInputBuilder.GetLength;
    END;

    [TryFunction]
    [External]
    PROCEDURE GetParameter@14(Name@1000 : Text;VAR ParameterValue@1001 : Text);
    BEGIN
      ParameterValue := AzureMLParametersBuilder.GetParameter(Name);
    END;

    BEGIN
    END.
  }
}

