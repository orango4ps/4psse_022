OBJECT Table 11020425 Unit Price Production Mot.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Project Principal");
               TestProjectStatus;
               DetermineOrderNo;

               IF ("Customer No." = '') THEN
                 "Customer No." := "Project Principal";

               //DP00659
               IF "No." = '' THEN BEGIN
                 ProjectSetup.GET;
                 IF ProjectSetup."Unit Price Prod. Mot. Nos." <> '' THEN
                   NoSeriesMgt.InitSeries(ProjectSetup."Unit Price Prod. Mot. Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;
               //
             END;

    OnModify=VAR
               UnitPriceProductionMotLine@1100528500 : Record 11020426;
             BEGIN
               TestProjectStatus;

               //C013394
               FilterLines(UnitPriceProductionMotLine);
               IF UnitPriceProductionMotLine.FINDSET(TRUE,FALSE) THEN
                 REPEAT
                   IF UnitPriceProductionMotLine.Status <> Status THEN BEGIN
                     UnitPriceProductionMotLine.Status := Status;
                     UnitPriceProductionMotLine.MODIFY;
                   END;
                 UNTIL UnitPriceProductionMotLine.NEXT = 0;
               //
             END;

    OnDelete=VAR
               UnitPriceProductionMotLine@1100485000 : Record 11020426;
             BEGIN
               TestProjectStatus;
               CheckInvoiced;

               FilterLines(UnitPriceProductionMotLine); //C011505
               UnitPriceProductionMotLine.DELETEALL;
             END;

    OnRename=BEGIN
               ERROR(Text009); //updating Order No. gives problems when renaming call 28611
             END;

    CaptionML=[ENU=Unit Price Production Motivation;
               NOR=Enhetspris for Produksjonmotivasjon;
               SVE=Enhetspris f”r Produktionsorsak];
    LookupPageID=Page11072523;
    DrillDownPageID=Page11072523;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=[ENU=Job No.;
                                                              NOR=Prosjektnr.;
                                                              SVE=Projekt Nr.];
                                                   NotBlank=Yes }
    { 15  ;   ;Project Principal   ;Code20        ;TableRelation=IF (Project No.=FILTER(<>'')) "Project Principal".Principal WHERE (Project No.=FIELD(Project No.))
                                                                 ELSE IF (Project No.=FILTER('')) Customer;
                                                   OnValidate=VAR
                                                                UnitPriceProductionMot@1100527450 : Record 11020425;
                                                              BEGIN
                                                                IF (CurrFieldNo = FIELDNO("Project Principal")) AND ("Project Principal" <> xRec."Project Principal") THEN
                                                                  IF UnitPriceProductionMot.GET("Project No.", xRec."Project Principal", "Production Date", Code) THEN
                                                                    ERROR(Text009);
                                                              END;

                                                   CaptionML=[ENU=Project Principal;
                                                              NOR=Prosjektoppdragsgiver;
                                                              SVE=Projektuppdragsgivare];
                                                   NotBlank=Yes }
    { 20  ;   ;Production Date     ;Date          ;OnValidate=VAR
                                                                UnitPriceProductionMot@1100527450 : Record 11020425;
                                                              BEGIN
                                                                IF (CurrFieldNo = FIELDNO("Production Date")) AND ("Production Date" <> xRec."Production Date") THEN
                                                                  IF UnitPriceProductionMot.GET("Project No.", "Project Principal", xRec."Production Date", Code) THEN
                                                                    ERROR(Text009);
                                                                IF Code = '' THEN
                                                                  DetermineNewCode;

                                                                DetermineOrderNo;
                                                              END;

                                                   CaptionML=[ENU=Production Date;
                                                              NOR=Produksjonsdato;
                                                              SVE=Produktionsdatum];
                                                   NotBlank=Yes }
    { 25  ;   ;Code                ;Code10        ;OnValidate=VAR
                                                                UnitPriceProductionMot@1100527450 : Record 11020425;
                                                              BEGIN
                                                                IF (CurrFieldNo = FIELDNO(Code)) AND (Code <> xRec.Code) THEN
                                                                  IF UnitPriceProductionMot.GET("Project No.", "Project Principal", "Production Date", xRec.Code) THEN
                                                                    ERROR(Text009);
                                                                DetermineOrderNo;
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   NotBlank=Yes }
    { 30  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 40  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                IF Status = Status::Approved THEN
                                                                  TESTFIELD("Approved Date");

                                                                IF Invoiced AND (xRec.Status = Status::Approved) AND (Status <> Status::Approved) THEN
                                                                  ERROR(Text006);
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=[ENU=Proposal,Offered,Approved,Expired;
                                                                    NOR=Forslag,Tilbudt,Godkjent,Forfalt;
                                                                    SVE=F”rslag,Erbjuden,Godk„nd,F”rfallen];
                                                   OptionString=Proposal,Offered,Approved,Expired }
    { 50  ;   ;Approved By         ;Code20        ;TableRelation=Contact.No. WHERE (Type=CONST(Person));
                                                   OnValidate=VAR
                                                                lvContactRec@1100485000 : Record 5050;
                                                                lvBusRelCompNo@1100485001 : Code[20];
                                                              BEGIN
                                                                IF "Approved By" <> '' THEN BEGIN
                                                                  IF lvContactRec.GET("Approved By") THEN BEGIN
                                                                    lvContactRec.TESTFIELD(Type, lvContactRec.Type::Person);
                                                                    lvBusRelCompNo := GetBusRelCompNo;
                                                                    IF lvBusRelCompNo = '' THEN
                                                                      ERROR(Text003, FIELDCAPTION("Approved By"),"Approved By")
                                                                    ELSE
                                                                      lvContactRec.TESTFIELD("Company No.", lvBusRelCompNo);

                                                                    //Get name for contact, this is not a flowfield, it may need modification
                                                                    "Approved By Name" := lvContactRec.Name;
                                                                  END;
                                                                END;
                                                                IF Status < Status::Approved THEN
                                                                  Status := Status::Approved;
                                                              END;

                                                   OnLookup=VAR
                                                              lvContactRec@1100485001 : Record 5050;
                                                              lvBusRelCompNo@1100485000 : Code[20];
                                                            BEGIN
                                                              lvContactRec.SETRANGE(Type, lvContactRec.Type::Person);
                                                              lvBusRelCompNo := GetBusRelCompNo;
                                                              lvContactRec.SETRANGE("Company No.", lvBusRelCompNo);
                                                              IF PAGE.RUNMODAL(0, lvContactRec) = ACTION::LookupOK THEN BEGIN
                                                                VALIDATE("Approved By", lvContactRec."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Approved By;
                                                              NOR=Godkjent av;
                                                              SVE=Godk„nd av] }
    { 60  ;   ;Approved By Name    ;Text50        ;CaptionML=[ENU=Approved By Name;
                                                              NOR=Godkjent av navn;
                                                              SVE=Godk„nt av namn];
                                                   Editable=Yes }
    { 70  ;   ;Approved Date       ;Date          ;OnValidate=BEGIN
                                                                IF Status < Status::Approved THEN
                                                                  Status := Status::Approved;
                                                              END;

                                                   CaptionML=[ENU=Approve date;
                                                              NOR=Dato for Godkjenning;
                                                              SVE=Datum f”r godk„nnande] }
    { 80  ;   ;Invoiced            ;Boolean       ;CaptionML=[ENU=Invoiced;
                                                              NOR=Fakturert;
                                                              SVE=Fakt. int„kt] }
    { 90  ;   ;Item Usage Posted   ;Boolean       ;CaptionML=[ENU=Item Usage Posted;
                                                              NOR=Artikkelbruk Bokf›rt;
                                                              SVE=Artikelanv„ndning redovisad];
                                                   Editable=No }
    { 100 ;   ;Order No.           ;Integer       ;OnValidate=BEGIN
                                                                UpdateOrderNoInLines("Order No.");
                                                              END;

                                                   CaptionML=[ENU=Entry No.;
                                                              NOR=L›penummer;
                                                              SVE=L”pnr];
                                                   Editable=No }
    { 110 ;   ;Reference Date      ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Principal"."Ref. Date Unit Price" WHERE (Project No.=FIELD(Project No.),
                                                                                                                        Principal=FIELD(Customer No.)));
                                                   CaptionML=[ENU=Reference Date;
                                                              NOR=Referansedato;
                                                              SVE=Referensdatum];
                                                   Editable=No }
    { 120 ;   ;Customer No.        ;Code20        ;TableRelation="Project Principal".Principal WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Principal Unit Price;
                                                              NOR=Enhetspris for Oppdragsgiver;
                                                              SVE=Huvudkund] }
    { 130 ;   ;Invoice Text        ;Text250       ;CaptionML=[ENU=Invoice Text;
                                                              NOR=Fakturatekst;
                                                              SVE=Fakturatext] }
    { 140 ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                //DP00659
                                                                IF ("No." <> xRec."No.") AND ("No. Series" <> '') THEN BEGIN
                                                                  ProjectSetup.GET;
                                                                  IF ProjectSetup."Unit Price Prod. Mot. Nos." <> '' THEN
                                                                    NoSeriesMgt.TestManual(ProjectSetup."Unit Price Prod. Mot. Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              NOR=Nr;
                                                              SVE=Nr] }
    { 150 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              NOR=Nr.serie;
                                                              SVE=Nr-serie];
                                                   Editable=No }
    { 160 ;   ;Register Date       ;Date          ;OnValidate=BEGIN
                                                                IF ("Register Date" <> 0D) AND (Status = Status::Proposal) THEN
                                                                  VALIDATE(Status, Status::Offered);
                                                              END;

                                                   CaptionML=[ENU=Register Date;
                                                              NOR=Registrer Dato;
                                                              SVE=Registrera datum] }
  }
  KEYS
  {
    {    ;Project No.,Project Principal,Production Date,Code;
                                                   Clustered=Yes }
    {    ;Project No.,Project Principal,Order No.  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100485001 : TextConst 'ENU=Production Motivation Lines are already created, it is not allowed to copy Project Unit Prices.;NOR=Rader for Produksjonsmotivasjon er allerede opprettet, det er ikke tillatt † kopiere Enhetspriser for prosjekt.;SVE=Rader f”r Produktionsorsak har redan skapats, det „r inte till†tet att kopiera projektenhetspriser.';
      Text003@1100485000 : TextConst 'ENU=%1 ''%2'' is not linked to the project principal.;NOR=%1 ''%2'' er ikke koblet til en prosjektoppdragsgiver.;SVE=%1 ''%2'' „r inte l„nkad till en projektuppdragsgivare.';
      Text005@1100485004 : TextConst 'ENU=%1 Item Journal Lines created.;NOR=%1 artikkeljournalrader er opprettet.;SVE=%1 artikeljournalsrader har skapats.';
      Text006@1100485005 : TextConst 'ENU=Not allowed because production motivation is already invoiced.;NOR=Det er ikke tillatt fordi Produksjonsmotivasjonen allerede er fakturert.;SVE=Det „r inte till†tet eftersom Produktionsorsaken redan har fakturerats.';
      Text007@1100485006 : TextConst 'ENU=Item Journal Lines updated.;NOR=Artikkeljournalradene er oppdatert.;SVE=Artikeljournalsraderna har uppdaterats.';
      Text008@1100525000 : TextConst 'ENU=%1 %2 has %3 %4.;NOR=%1 %2 har %3 %4.;SVE=%1 %2 har %3 %4.';
      Text009@1210190000 : TextConst 'ENU=Renaming is not allowed.;NOR=Ikke tillatt † gi nytt navn.;SVE=Att ge nytt namn „r inte till†tet.';
      Text010@1100525001 : TextConst 'ENU=First select records.;NOR=Marker poster f›rst;SVE=Markera f”rst poster';
      ProjectSetup@1100528501 : Record 315;
      NoSeriesMgt@1100528500 : Codeunit 396;

    PROCEDURE GetBusRelCompNo@1100485000() : Code[20];
    VAR
      lvContBusRelRec@1100485000 : Record 5054;
      lvBusRelCompNo@1100485001 : Code[20];
      lvJobRec@1100485002 : Record 11072003;
    BEGIN
      lvBusRelCompNo := '';
      lvJobRec.GET("Project No.");
      IF lvJobRec."Bill-to Customer No." = '' THEN
        EXIT;
      lvContBusRelRec.SETCURRENTKEY("Link to Table", "No.");
      lvContBusRelRec.SETRANGE("Link to Table", lvContBusRelRec."Link to Table"::Customer);
      lvContBusRelRec.SETRANGE("No.", lvJobRec."Bill-to Customer No.");
      IF lvContBusRelRec.FINDFIRST THEN
        lvBusRelCompNo := lvContBusRelRec."Contact No.";
      EXIT(lvBusRelCompNo);
    END;

    PROCEDURE GetCustomerName@1100525001() : Text[100];
    VAR
      lvCustRec@1100525001 : Record 18;
    BEGIN
      IF lvCustRec.GET("Customer No.") THEN
        EXIT(lvCustRec.Name);
      EXIT('');
    END;

    PROCEDURE CopyProjectUnitPrices@1100485001();
    VAR
      lvProjUPRec@1100485000 : Record 11020427;
      UnitPriceProductionMotLine@1100485001 : Record 11020426;
      lvNextLineNo@1100485002 : Integer;
    BEGIN
      //Copy all the unit prices from the tabel Project Unit Price to this production motivation

      FilterLines(UnitPriceProductionMotLine); //C011505
      IF UnitPriceProductionMotLine.FINDFIRST THEN
        ERROR(Text001);

      lvNextLineNo := 10000;
      lvProjUPRec.SETRANGE("Project No.", "Project No.");
      lvProjUPRec.SETRANGE("Customer No.", "Customer No."); //C010477.n
      WITH UnitPriceProductionMotLine DO BEGIN
        "Project No."  := Rec."Project No.";
        "Project Principal" := Rec."Project Principal";
        "Production Date" := Rec."Production Date";
        Code := Rec.Code;
        IF lvProjUPRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            "Line No." := lvNextLineNo;
            "Project Unit Price Line No." := lvProjUPRec."Line No."; //C012539
            "Price List" := lvProjUPRec."Price List";
            "Extension Contract No." := lvProjUPRec."Extension Contract No.";
            Element := lvProjUPRec.Element;
            INSERT(TRUE);
            DoCalcFields;  //to calculate Customer No.
            VALIDATE("Unit Price", lvProjUPRec."Unit Price");
            Quantity := lvProjUPRec.Quantity;
            //DP00659.sn
            "Sales Discount %" := lvProjUPRec."Sales Discount %";
            "Sales Surcharge %" := lvProjUPRec."Sales Surcharge %";
            //DP00659.en
            MODIFY;
            lvNextLineNo += 10000;
          UNTIL lvProjUPRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopyUnitPricesForm@1100485003();
    VAR
      lvUPForm@1100485000 : Page 11072522;
    BEGIN
      //Start the Unit Prices Overview to let the user select unit prices
      lvUPForm.SetCopy(Rec);
      lvUPForm.RUNMODAL;
    END;

    PROCEDURE CopyUnitPrices@1100485002(VAR iUnitPriceRec@1100485004 : Record 11020420);
    VAR
      UnitPriceProductionMotLine@1100485001 : Record 11020426;
      lvUnitPriceRec@1100485003 : Record 11020420;
      lvNextLineNo@1100485002 : Integer;
    BEGIN
      //Copy the selected unit prices to the current production motivation
      WITH lvUnitPriceRec DO BEGIN
        COPY(iUnitPriceRec);
        IF NOT FINDSET(FALSE, FALSE) THEN
          ERROR(Text010);

        FilterLines(UnitPriceProductionMotLine); //C011505
        IF UnitPriceProductionMotLine.FINDLAST THEN
          lvNextLineNo := UnitPriceProductionMotLine."Line No." + 10000
        ELSE
          lvNextLineNo := 10000;
        UnitPriceProductionMotLine.INIT; //C012539
        UnitPriceProductionMotLine."Project No."  := Rec."Project No.";
        UnitPriceProductionMotLine."Project Principal"  := Rec."Project Principal";
        UnitPriceProductionMotLine."Production Date" := Rec."Production Date";
        UnitPriceProductionMotLine.Code := Rec.Code;
        REPEAT
          UnitPriceProductionMotLine."Line No." := lvNextLineNo;
          UnitPriceProductionMotLine."Price List" := "Price List";
          UnitPriceProductionMotLine.INSERT(TRUE);
          UnitPriceProductionMotLine.DoCalcFields;  //to calculate Customer No.
          UnitPriceProductionMotLine.VALIDATE("Unit Price", Code);
          UnitPriceProductionMotLine.MODIFY;

          lvNextLineNo += 10000;
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CreateItemJournalLines@1100485004();
    VAR
      UnitPriceProductionMotLine@1100485000 : Record 11020426;
      lvUPRec@1100485001 : Record 11020420;
      lvUPLineRec@1100485002 : Record 11020421;
      lvJrnlLineRec@1100485003 : Record 83;
      lvJobSetupRec@1100485004 : Record 315;
      lvJobRec@1100485008 : Record 11072003;
      lvNextLineNo@1100485005 : Integer;
      lvCountCreated@1100485006 : Integer;
      lvCountUpdated@1100485007 : Integer;
      lvPrefLocationRec@1100525000 : Record 11020353;
      lvLocationRec@1100525001 : Record 14;
      lvItemRec@1100525002 : Record 27;
      JournalTemplate@1100525003 : Code[10];
      JournalBatch@1100525004 : Code[10];
      lvWarehouseEmployeeRec@1100525005 : Record 7301;
    BEGIN
      //Create journal lines for Items that are part of the Unit Prices on this production motivation.

      TESTFIELD("Item Usage Posted", FALSE);
      TESTFIELD(Status, Status::Approved);

      lvJobSetupRec.GET;
      lvJobRec.GET("Project No.");

      //get template and batch
      lvWarehouseEmployeeRec.SETRANGE("User ID",USERID);
      lvWarehouseEmployeeRec.SETRANGE(Default,TRUE);
      IF lvWarehouseEmployeeRec.ISEMPTY THEN
        lvWarehouseEmployeeRec.SETRANGE(Default);
      IF lvWarehouseEmployeeRec.FINDFIRST THEN BEGIN
        lvLocationRec.GET(lvWarehouseEmployeeRec."Location Code");
        IF (lvLocationRec."Unit Price Journal Template" <> '') AND (lvLocationRec."Unit Price Journal Batch" <> '') THEN BEGIN
          JournalTemplate := lvLocationRec."Unit Price Journal Template";
          JournalBatch := lvLocationRec."Unit Price Journal Batch";
        END ELSE BEGIN
          JournalTemplate := lvJobSetupRec."Item Journal Template";
          JournalBatch := lvJobSetupRec."Item Journal Batch";
        END;
      END ELSE BEGIN
        JournalTemplate := lvJobSetupRec."Item Journal Template";
        JournalBatch := lvJobSetupRec."Item Journal Batch";
      END;

      FilterLines(UnitPriceProductionMotLine); //C011505
      UnitPriceProductionMotLine.SETFILTER("Unit Price", '<>%1', '');
      IF UnitPriceProductionMotLine.FINDSET THEN BEGIN
        REPEAT
          UnitPriceProductionMotLine.DoCalcFields;
          IF lvUPRec.GET(UnitPriceProductionMotLine."Customer No.",
              UnitPriceProductionMotLine."Price List", UnitPriceProductionMotLine."Unit Price",
              UnitPriceProductionMotLine."Reference Date") THEN BEGIN
            lvUPLineRec.SETRANGE("Customer No.", lvUPRec."Customer No.");
            lvUPLineRec.SETRANGE("Price List", lvUPRec."Price List");
            lvUPLineRec.SETRANGE("Unit Price", lvUPRec.Code);
            lvUPLineRec.SETRANGE("Start Date", lvUPRec."Start Date");
            lvUPLineRec.SETFILTER("Item No.", '<>%1', '');
            IF lvUPLineRec.FINDSET THEN BEGIN
              lvJrnlLineRec.SETRANGE("Journal Template Name", lvJobSetupRec."Item Journal Template");
              lvJrnlLineRec.SETRANGE("Journal Batch Name", lvJobSetupRec."Item Journal Batch");
              IF lvJrnlLineRec.FINDLAST THEN
                lvNextLineNo := lvJrnlLineRec."Line No." + 10000
              ELSE
                lvNextLineNo := 10000;
              lvCountCreated := 0;
              REPEAT
                //create the item journal line
                lvJrnlLineRec.SETRANGE("Posting Date", WORKDATE);
                lvJrnlLineRec.SETRANGE("Entry Type", lvJrnlLineRec."Entry Type"::Sale);
                lvJrnlLineRec.SETRANGE("Journal Template Name",JournalTemplate);
                lvJrnlLineRec.SETRANGE("Journal Batch Name",JournalBatch);
                lvJrnlLineRec.SETRANGE("Job No.", "Project No.");
                lvJrnlLineRec.SETRANGE("Item No.", lvUPLineRec."Item No.");
                IF lvJrnlLineRec.FINDFIRST THEN BEGIN
                  lvJrnlLineRec.VALIDATE(
                    Quantity, lvJrnlLineRec.Quantity + lvUPLineRec.Quantity * UnitPriceProductionMotLine.Production);
                  lvJrnlLineRec.MODIFY(TRUE);
                  lvCountUpdated += 1;
                END ELSE BEGIN
                  lvJrnlLineRec.INIT;
                  lvJrnlLineRec."Posting Date" := WORKDATE;
                  lvJrnlLineRec."Entry Type" := lvJrnlLineRec."Entry Type"::Sale;
                  lvJrnlLineRec."Journal Template Name" := JournalTemplate;
                  lvJrnlLineRec."Journal Batch Name" := JournalBatch;
                  lvJrnlLineRec."Line No." := lvNextLineNo;
                  lvJrnlLineRec.VALIDATE("Job No.", "Project No.");
                  lvJrnlLineRec.VALIDATE("Item No.", lvUPLineRec."Item No.");
                  lvJrnlLineRec.VALIDATE(Quantity, lvUPLineRec.Quantity * UnitPriceProductionMotLine.Production);

                  //find location with inventory
                  CLEAR(lvLocationRec);
                  lvItemRec.GET(lvJrnlLineRec."Item No.");
                  lvPrefLocationRec.SETRANGE(Type,lvPrefLocationRec.Type::Job);
                  lvPrefLocationRec.SETRANGE("No.","Project No.");
                  lvPrefLocationRec.SETCURRENTKEY(Priority);
                  IF lvPrefLocationRec.FINDSET THEN
                    REPEAT
                      lvItemRec.SETRANGE("Location Filter",lvPrefLocationRec."Location Code");
                      lvItemRec.CALCFIELDS(Inventory);
                      IF lvItemRec.Inventory >= lvJrnlLineRec.Quantity THEN
                        lvJrnlLineRec."Location Code" := lvPrefLocationRec."Location Code";
                    UNTIL (lvPrefLocationRec.NEXT = 0) OR (lvJrnlLineRec."Location Code" <> '');
                  IF (lvJrnlLineRec."Location Code" = '') AND lvLocationRec.FINDSET THEN
                    REPEAT
                      lvItemRec.SETRANGE("Location Filter",lvLocationRec.Code);
                      lvItemRec.CALCFIELDS(Inventory);
                      IF lvItemRec.Inventory >= lvJrnlLineRec.Quantity THEN
                        lvJrnlLineRec."Location Code" := lvLocationRec.Code;
                    UNTIL lvLocationRec.NEXT = 0;
                  //IF lvJobRec."Default Deliver" = lvJobRec."Default Deliver"::Location THEN
                  //  lvJrnlLineRec."Location Code" := lvJobRec."Default Ship To Location";
                  IF lvJrnlLineRec."Location Code"  <> '' THEN  //**4PS.n
                    lvJrnlLineRec.VALIDATE("Location Code");    //**4PS.n
                  lvJrnlLineRec.INSERT(TRUE);
                  lvNextLineNo += 10000;
                  lvCountCreated += 1;
                END;
              UNTIL lvUPLineRec.NEXT = 0;
            END
          END;
        UNTIL UnitPriceProductionMotLine.NEXT = 0;
      END;
      "Item Usage Posted" := TRUE;
      MODIFY;
      IF (lvCountCreated = 0) AND (lvCountUpdated <> 0) THEN
        MESSAGE(Text007)
      ELSE
        MESSAGE(Text005, lvCountCreated);
    END;

    PROCEDURE CheckInvoiced@1100485005();
    BEGIN
      IF Invoiced THEN
        ERROR(Text006);
    END;

    PROCEDURE DetermineOrderNo@1100485006();
    VAR
      lvProdRec@1100485000 : Record 11020425;
      lvNext@1100485001 : Integer;
      lvPrev@1100485002 : Integer;
      lvCurr@1100485003 : Integer;
    BEGIN
      lvNext := 0;
      lvPrev := 0;
      lvProdRec := Rec;
      lvProdRec.SETRANGE("Project No.", "Project No.");
      lvProdRec.SETRANGE("Project Principal", "Project Principal");
      IF lvProdRec.NEXT <> 0 THEN
        lvNext := lvProdRec."Order No.";
      lvProdRec := Rec;
      IF lvProdRec.NEXT(-1) <> 0 THEN
        lvPrev := lvProdRec."Order No.";

      IF lvNext = 0 THEN
        lvCurr := lvPrev + 10000
      ELSE
        lvCurr := ROUND((lvPrev + lvNext)/2, 1);
      "Order No." := lvCurr;

      UpdateOrderNoInLines("Order No.");
    END;

    PROCEDURE UpdateOrderNoInLines@1210190000(NewOrderNo@1210190001 : Integer);
    VAR
      UnitPriceProductionMotLine@1210190002 : Record 11020426;
    BEGIN
      //Order No. is stored in a filter on the lines, modify that filter here
      FilterLines(UnitPriceProductionMotLine); //C011505
      IF UnitPriceProductionMotLine.FINDSET THEN
        REPEAT
          UnitPriceProductionMotLine."Curr. Production Filter" := '<=' + FORMAT(NewOrderNo);
          UnitPriceProductionMotLine."Prev. Production Filter" := '<' + FORMAT(NewOrderNo);
          UnitPriceProductionMotLine."Order No." := NewOrderNo;
          UnitPriceProductionMotLine.MODIFY;
        UNTIL UnitPriceProductionMotLine.NEXT = 0;
    END;

    PROCEDURE TestProjectStatus@1100525000();
    VAR
      JobRec@1100525000 : Record 11072003;
    BEGIN
      JobRec.GET("Project No.");
      IF (JobRec."Project Status" > JobRec."Project Status"::"Administrative Finished") THEN
        ERROR(Text008,JobRec.TABLECAPTION,"Project No.",JobRec.FIELDCAPTION("Project Status"),JobRec."Project Status");
    END;

    PROCEDURE RunUnitPriceProdMotList@1210190001(ProjNo@1210190002 : Code[20];PrinNo@1210190003 : Code[20];Level@1210190004 : 'Project,ProjPrincipal');
    VAR
      ProdMot@1210190000 : Record 11020425;
      ProjPrin@1210190001 : Record 11012005;
    BEGIN
      //ProdMot.FILTERGROUP(9); //PS.o, 12-07-13
      ProdMot.SETRANGE("Project No.", ProjNo);
      //ProdMot.FILTERGROUP(0); //PS.o, 12-07-13

      CASE Level OF
        Level::Project:
          BEGIN
            ProjPrin.SETRANGE("Project No.", ProjNo);
            ProjPrin.FINDFIRST;  //* Project must have at least 1 principal
            IF ProjPrin.NEXT = 0 THEN
              ProdMot.SETRANGE("Project Principal", ProjPrin.Principal);  //* If there is only one
          END;
        Level::ProjPrincipal:
          BEGIN
            ProjPrin.GET(ProjNo, PrinNo);  //* Must exist
            ProdMot.SETRANGE("Project Principal", PrinNo);
          END;
        ELSE
          EXIT;
      END;;
      PAGE.RUNMODAL(PAGE::"Unit Price Prod. Mot. List", ProdMot);  //C008585 List in stead of Card
    END;

    PROCEDURE FilterLines@1100525002(VAR UnitPriceProductionMotLine@1100525000 : Record 11020426);
    BEGIN
      //C011505
      UnitPriceProductionMotLine.SETRANGE("Project No.", "Project No.");
      UnitPriceProductionMotLine.SETRANGE("Project Principal", "Project Principal");
      UnitPriceProductionMotLine.SETRANGE("Production Date",  "Production Date");
      UnitPriceProductionMotLine.SETRANGE(Code, Code);
    END;

    LOCAL PROCEDURE DetermineNewCode@1100409000();
    VAR
      UnitPriceProductionMot@1100409000 : Record 11020425;
    BEGIN
      UnitPriceProductionMot.SETRANGE("Project No.","Project No.");
      UnitPriceProductionMot.SETRANGE("Project Principal", "Project Principal");
      UnitPriceProductionMot.SETRANGE("Production Date", "Production Date");
      IF UnitPriceProductionMot.FINDLAST THEN
        Code := INCSTR(UnitPriceProductionMot.Code)
      ELSE
        Code := '1';

      //C018463.sn
      UnitPriceProductionMot := Rec;
      WHILE UnitPriceProductionMot.FIND DO BEGIN
        Code := INCSTR(UnitPriceProductionMot.Code);
        UnitPriceProductionMot := Rec;
      END;
      //C018463.en
    END;

    BEGIN
    {
      4PS, 24-12-2013, C011505, Production values are set to zero when status becomes expired.
      4PS, 24-09-2014, T005358, Lookup on field Principal now possible in reports thx to advanced tablerelation
    }
    END.
  }
}

