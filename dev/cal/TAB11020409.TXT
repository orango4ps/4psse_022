OBJECT Table 11020409 Job Buffer
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00 (1017);
  }
  PROPERTIES
  {
    ReplicateData=No;
    CaptionML=[DEU=Projektpuffer;
               ENU=Job Buffer;
               NLD=Projectbuffer;
               NOR=Prosjektbuffer;
               SVE=Projektbuffert];
  }
  FIELDS
  {
    { 1   ;   ;Account No. 1       ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DEU=Kontonr. 1;
                                                              ENU=Account No. 1;
                                                              NLD=Rekening nr. 1;
                                                              NOR=Kontonr. 1;
                                                              SVE=Kontonr 1] }
    { 2   ;   ;Account No. 2       ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DEU=Kontonr. 2;
                                                              ENU=Account No. 2;
                                                              NLD=Rekening nr. 2;
                                                              NOR=Kontonr. 2;
                                                              SVE=Kontonr 2] }
    { 3   ;   ;Amount 1            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DEU=Betrag 1;
                                                              ENU=Amount 1;
                                                              NLD=Bedrag 1;
                                                              NOR=Bel›p 1;
                                                              SVE=Belopp 1] }
    { 4   ;   ;Amount 2            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DEU=Betrag 2;
                                                              ENU=Amount 2;
                                                              NLD=Bedrag 2;
                                                              NOR=Bel›p 2;
                                                              SVE=Belopp 2] }
    { 5   ;   ;Amount 3            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DEU=Betrag 3;
                                                              ENU=Amount 3;
                                                              NLD=Bedrag 3;
                                                              NOR=Bel›p 3;
                                                              SVE=Belopp 3] }
    { 6   ;   ;Amount 4            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DEU=Betrag 4;
                                                              ENU=Amount 4;
                                                              NLD=Bedrag 4;
                                                              NOR=Bel›p 4;
                                                              SVE=Belopp 4] }
    { 7   ;   ;Amount 5            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DEU=Betrag 5;
                                                              ENU=Amount 5;
                                                              NLD=Bedrag 5;
                                                              NOR=Bel›p 5;
                                                              SVE=Belopp 5] }
    { 10  ;   ;Description         ;Text100       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DEU=Beschreibung;
                                                              ENU=Description;
                                                              NLD=Omschrijving;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 11  ;   ;New Total           ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DEU=Neue Summe;
                                                              ENU=New Total;
                                                              NLD=Nieuw totaal;
                                                              NOR=Ny Sum;
                                                              SVE=Ny summa] }
  }
  KEYS
  {
    {    ;Account No. 1,Account No. 2             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      TempJobBuffer@1000 : ARRAY [2] OF TEMPORARY Record 11020409;

    [External]
    PROCEDURE InsertWorkInProgress@14(VAR Job@1000 : Record 11072003);
    VAR
      JobWIPGLEntry@1001 : Record 11020403;
    BEGIN
      CLEAR(TempJobBuffer);
      JobWIPGLEntry.SETCURRENTKEY("Job No.");
      JobWIPGLEntry.SETRANGE("Job No.",Job."No.");
      JobWIPGLEntry.SETRANGE(Reversed,FALSE);
      JobWIPGLEntry.SETRANGE("Job Complete",FALSE);

      JobWIPGLEntry.SETFILTER("Posting Date",Job.GETFILTER("Posting Date Filter"));
      IF JobWIPGLEntry.FIND('-') THEN
        REPEAT
          CLEAR(TempJobBuffer);
          IF JobWIPGLEntry."G/L Account No." <> '' THEN BEGIN
            TempJobBuffer[1]."Account No. 1" := JobWIPGLEntry."G/L Account No.";
            TempJobBuffer[1]."Account No. 2" := JobWIPGLEntry."Job Posting Group";
            IF (JobWIPGLEntry.Type = JobWIPGLEntry.Type::"Applied Costs") OR
               (JobWIPGLEntry.Type = JobWIPGLEntry.Type::"Recognized Costs")
            THEN
              TempJobBuffer[1]."Amount 1" := JobWIPGLEntry."WIP Entry Amount"
            ELSE
              IF JobWIPGLEntry.Type = JobWIPGLEntry.Type::"Accrued Costs" THEN
                TempJobBuffer[1]."Amount 2" := JobWIPGLEntry."WIP Entry Amount";
            IF (JobWIPGLEntry.Type = JobWIPGLEntry.Type::"Applied Sales") OR
               (JobWIPGLEntry.Type = JobWIPGLEntry.Type::"Recognized Sales")
            THEN
              TempJobBuffer[1]."Amount 4" := JobWIPGLEntry."WIP Entry Amount"
            ELSE
              IF JobWIPGLEntry.Type = JobWIPGLEntry.Type::"Accrued Sales" THEN
                TempJobBuffer[1]."Amount 5" := JobWIPGLEntry."WIP Entry Amount";
            TempJobBuffer[2] := TempJobBuffer[1];
            IF TempJobBuffer[2].FIND THEN BEGIN
              TempJobBuffer[2]."Amount 1" :=
                TempJobBuffer[2]."Amount 1" + TempJobBuffer[1]."Amount 1";
              TempJobBuffer[2]."Amount 2" :=
                TempJobBuffer[2]."Amount 2" + TempJobBuffer[1]."Amount 2";
              TempJobBuffer[2]."Amount 4" :=
                TempJobBuffer[2]."Amount 4" + TempJobBuffer[1]."Amount 4";
              TempJobBuffer[2]."Amount 5" :=
                TempJobBuffer[2]."Amount 5" + TempJobBuffer[1]."Amount 5";
              TempJobBuffer[2].MODIFY;
            END ELSE
              TempJobBuffer[1].INSERT;
          END;
        UNTIL JobWIPGLEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE InitJobBuffer@15();
    BEGIN
      CLEAR(TempJobBuffer);
      TempJobBuffer[1].DELETEALL;
    END;

    [External]
    PROCEDURE GetJobBuffer@1(VAR Job@1000 : Record 11072003;VAR JobBuffer2@1001 : Record 11020409);
    VAR
      GLEntry@1002 : Record 17;
      OldAcc@1003 : Code[20];
    BEGIN
      JobBuffer2.DELETEALL;
      GLEntry.SETCURRENTKEY("G/L Account No.","Job No.","Posting Date");
      GLEntry.SETFILTER("Posting Date",Job.GETFILTER("Posting Date Filter"));
      OldAcc := '';

      IF TempJobBuffer[1].FIND('+') THEN
        REPEAT
          IF TempJobBuffer[1]."Account No. 1" <> OldAcc THEN BEGIN
            GLEntry.SETRANGE("G/L Account No.",TempJobBuffer[1]."Account No. 1");
            GLEntry.SETFILTER("Job No.",Job.GETFILTER("No."));
            GLEntry.CALCSUMS(Amount);
            TempJobBuffer[1]."Amount 3" := GLEntry.Amount;
            IF TempJobBuffer[1]."Amount 3" <> 0 THEN
              TempJobBuffer[1]."New Total" := TRUE;
            OldAcc := TempJobBuffer[1]."Account No. 1";
          END;
          JobBuffer2 := TempJobBuffer[1];
          JobBuffer2.INSERT;
        UNTIL TempJobBuffer[1].NEXT(-1) = 0;
      TempJobBuffer[1].DELETEALL;
    END;

    [External]
    PROCEDURE ReportJobItem@2(VAR Job@1000 : Record 11072003;VAR item2@1001 : Record 27;VAR JobBuffer2@1002 : Record 11020409);
    VAR
      Item@1004 : Record 27;
      Item3@1007 : Record 27;
      JobLedgEntry@1003 : Record 11072005;
      InFilter@1005 : Boolean;
      Itemfilter@1006 : Boolean;
    BEGIN
      CLEAR(JobBuffer2);
      CLEAR(TempJobBuffer);
      JobBuffer2.DELETEALL;
      TempJobBuffer[1].DELETEALL;
      IF Job."No." = '' THEN
        EXIT;
      Item.COPY(item2);
      Itemfilter := Item.GETFILTERS <> '';
      Item.SETCURRENTKEY("No.");

      JobLedgEntry.SETCURRENTKEY("Job No.","Posting Date");
      JobLedgEntry.SETRANGE("Job No.",Job."No.");
      JobLedgEntry.SETFILTER("Posting Date",Job.GETFILTER("Posting Date Filter"));
      IF JobLedgEntry.FIND('-') THEN
        REPEAT
          IF (JobLedgEntry."Entry Type" = JobLedgEntry."Entry Type"::Usage) AND
             (JobLedgEntry.Type = JobLedgEntry.Type::Item) AND
             (JobLedgEntry."No." <> '')
          THEN BEGIN
            InFilter := TRUE;
            IF Itemfilter THEN BEGIN
              Item.INIT;
              Item."No." := JobLedgEntry."No.";
              InFilter := Item.FIND;
            END;
            IF InFilter THEN BEGIN
              Item3.INIT;
              IF Item3.GET(JobLedgEntry."No.") THEN;
              CLEAR(TempJobBuffer[1]);
              TempJobBuffer[1]."Account No. 1" := JobLedgEntry."No.";
              TempJobBuffer[1]."Account No. 2" := JobLedgEntry."Unit of Measure Code";
              TempJobBuffer[1].Description := Item3.Description;
              TempJobBuffer[1]."Amount 1" := JobLedgEntry.Quantity;
              TempJobBuffer[1]."Amount 2" := JobLedgEntry."Total Cost (LCY)";
              TempJobBuffer[1]."Amount 3" := JobLedgEntry."Line Amount (LCY)";
              TempJobBuffer[2] := TempJobBuffer[1];
              IF TempJobBuffer[2].FIND THEN BEGIN
                TempJobBuffer[2]."Amount 1" :=
                  TempJobBuffer[2]."Amount 1" + TempJobBuffer[1]."Amount 1";
                TempJobBuffer[2]."Amount 2" :=
                  TempJobBuffer[2]."Amount 2" + TempJobBuffer[1]."Amount 2";
                TempJobBuffer[2]."Amount 3" :=
                  TempJobBuffer[2]."Amount 3" + TempJobBuffer[1]."Amount 3";
                TempJobBuffer[2].MODIFY;
              END ELSE
                TempJobBuffer[1].INSERT;
            END;
          END;
        UNTIL JobLedgEntry.NEXT = 0;

      IF TempJobBuffer[1].FIND('-') THEN
        REPEAT
          JobBuffer2 := TempJobBuffer[1];
          JobBuffer2.INSERT;
        UNTIL TempJobBuffer[1].NEXT = 0;
      TempJobBuffer[1].DELETEALL;
    END;

    [External]
    PROCEDURE ReportItemJob@3(VAR Item@1001 : Record 27;VAR Job2@1000 : Record 11072003;VAR JobBuffer2@1002 : Record 11020409);
    VAR
      JobLedgEntry@1003 : Record 11072005;
      Job@1004 : Record 11072003;
      Job3@1007 : Record 11072003;
      InFilter@1005 : Boolean;
      JobFilter@1006 : Boolean;
    BEGIN
      CLEAR(JobBuffer2);
      CLEAR(TempJobBuffer);
      JobBuffer2.DELETEALL;
      TempJobBuffer[1].DELETEALL;
      IF Item."No." = '' THEN
        EXIT;
      Job.COPY(Job2);
      JobFilter := Job.GETFILTERS <> '';
      Job.SETCURRENTKEY("No.");

      JobLedgEntry.SETCURRENTKEY("Entry Type",Type,"No.","Posting Date");
      JobLedgEntry.SETRANGE("Entry Type",JobLedgEntry."Entry Type"::Usage);
      JobLedgEntry.SETRANGE(Type,JobLedgEntry.Type::Item);
      JobLedgEntry.SETRANGE("No.",Item."No.");
      JobLedgEntry.SETFILTER("Posting Date",Job.GETFILTER("Posting Date Filter"));
      IF JobLedgEntry.FIND('-') THEN
        REPEAT
          InFilter := TRUE;
          IF JobFilter THEN BEGIN
            Job.INIT;
            Job."No." := JobLedgEntry."Job No.";
            InFilter := Job.FIND;
          END;
          IF InFilter THEN BEGIN
            Job3.INIT;
            IF Job3.GET(JobLedgEntry."Job No.") THEN;
            CLEAR(TempJobBuffer[1]);
            TempJobBuffer[1]."Account No. 1" := JobLedgEntry."Job No.";
            TempJobBuffer[1]."Account No. 2" := JobLedgEntry."Unit of Measure Code";
            TempJobBuffer[1].Description := Job3.Description;
            TempJobBuffer[1]."Amount 1" := JobLedgEntry.Quantity;
            TempJobBuffer[1]."Amount 2" := JobLedgEntry."Total Cost (LCY)";
            TempJobBuffer[1]."Amount 3" := JobLedgEntry."Line Amount (LCY)";
            TempJobBuffer[2] := TempJobBuffer[1];
            IF TempJobBuffer[2].FIND THEN BEGIN
              TempJobBuffer[2]."Amount 1" :=
                TempJobBuffer[2]."Amount 1" + TempJobBuffer[1]."Amount 1";
              TempJobBuffer[2]."Amount 2" :=
                TempJobBuffer[2]."Amount 2" + TempJobBuffer[1]."Amount 2";
              TempJobBuffer[2]."Amount 3" :=
                TempJobBuffer[2]."Amount 3" + TempJobBuffer[1]."Amount 3";
              TempJobBuffer[2].MODIFY;
            END ELSE
              TempJobBuffer[1].INSERT;
          END;
        UNTIL JobLedgEntry.NEXT = 0;

      IF TempJobBuffer[1].FIND('-') THEN
        REPEAT
          JobBuffer2 := TempJobBuffer[1];
          JobBuffer2.INSERT;
        UNTIL TempJobBuffer[1].NEXT = 0;
      TempJobBuffer[1].DELETEALL;
    END;

    BEGIN
    END.
  }
}

