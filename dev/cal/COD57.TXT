OBJECT Codeunit 57 Document Totals
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TotalVATLbl@1002 : TextConst 'ENU=Total VAT;NOR=Total mva;SVE=Total moms';
      TotalAmountInclVatLbl@1001 : TextConst 'ENU=Total Incl. VAT;NOR=Totalt inkl. mva.;SVE=Totalt inkl. moms';
      TotalAmountExclVATLbl@1000 : TextConst 'ENU=Total Excl. VAT;NOR=Totalt eks. mva;SVE=Total exkl. moms';
      InvoiceDiscountAmountLbl@1004 : TextConst 'ENU=Invoice Discount Amount;NOR=Fakturarabattbel›p;SVE=Fakturarabatt';
      RefreshMsgTxt@1005 : TextConst 'ENU=Totals or discounts may not be up-to-date. Choose the link to update.;NOR=Det er ikke sikkert at totaler eller rabatter er oppdatert. Velg koblingen for † oppdatere.;SVE=Totalv„rden och/eller rabatter „r kanske inte aktuella. V„lj den l„nk du vill uppdatera.';
      SalesSetup@1014 : Record 311;
      PurchasesPayablesSetup@1003 : Record 312;
      PreviousTotalSalesHeader@1006 : Record 36;
      PreviousTotalPurchaseHeader@1007 : Record 38;
      SalesCalcDiscount@1012 : Codeunit 60;
      PurchCalcDiscount@1015 : Codeunit 70;
      ForceTotalsRecalculation@1008 : Boolean;
      PreviousTotalSalesVATDifference@1009 : Decimal;
      PreviousTotalPurchVATDifference@1010 : Decimal;
      TotalLineAmountLbl@1011 : TextConst 'ENU=Subtotal;NOR=Delsum;SVE=Delsumma';
      SalesLinesExist@1013 : Boolean;
      PurchaseLinesExist@1016 : Boolean;
      TotalsUpToDate@1017 : Boolean;
      NeedRefreshSalesLine@1018 : Boolean;
      NeedRefreshPurchaseLine@1019 : Boolean;

    [External]
    PROCEDURE CalculateSalesPageTotals@51(VAR TotalSalesLine@1000 : Record 37;VAR VATAmount@1001 : Decimal;VAR SalesLine@1002 : Record 37);
    VAR
      TotalSalesLine2@1006 : Record 37;
    BEGIN
      TotalSalesLine2 := TotalSalesLine;
      TotalSalesLine2.SETRANGE("Document Type",SalesLine."Document Type");
      TotalSalesLine2.SETRANGE("Document No.",SalesLine."Document No.");
      OnAfterSalesLineSetFilters(TotalSalesLine2,SalesLine);
      TotalSalesLine2.CALCSUMS("Line Amount",Amount,"Amount Including VAT","Inv. Discount Amount");
      VATAmount := TotalSalesLine2."Amount Including VAT" - TotalSalesLine2.Amount;
      TotalSalesLine := TotalSalesLine2;
    END;

    [External]
    PROCEDURE CalculateSalesTotals@11(VAR TotalSalesLine@1000 : Record 37;VAR VATAmount@1001 : Decimal;VAR SalesLine@1002 : Record 37);
    BEGIN
      CalculateSalesPageTotals(TotalSalesLine,VATAmount,SalesLine);
    END;

    [External]
    PROCEDURE CalculateSalesSubPageTotals@135(VAR TotalSalesHeader@1001 : Record 36;VAR TotalSalesLine@1000 : Record 37;VAR VATAmount@1003 : Decimal;VAR InvoiceDiscountAmount@1004 : Decimal;VAR InvoiceDiscountPct@1002 : Decimal);
    VAR
      SalesLine2@1005 : Record 37;
      TotalSalesLine2@1006 : Record 37;
    BEGIN
      IF TotalsUpToDate THEN
        EXIT;
      TotalsUpToDate := TRUE;
      NeedRefreshSalesLine := FALSE;

      SalesSetup.GetRecordOnce;
      TotalSalesLine2.COPY(TotalSalesLine);
      TotalSalesLine2.RESET;
      TotalSalesLine2.SETRANGE("Document Type",TotalSalesHeader."Document Type");
      TotalSalesLine2.SETRANGE("Document No.",TotalSalesHeader."No.");
      OnCalculateSalesSubPageTotalsOnAfterSetFilters(TotalSalesLine2,TotalSalesHeader);

      IF SalesSetup."Calc. Inv. Discount" AND (TotalSalesHeader."No." <> '') AND
         (TotalSalesHeader."Customer Posting Group" <> '')
      THEN BEGIN
        TotalSalesHeader.CALCFIELDS("Recalculate Invoice Disc.");
        IF TotalSalesHeader."Recalculate Invoice Disc." THEN
          IF TotalSalesLine2.FINDFIRST THEN BEGIN
            SalesCalcDiscount.CalculateInvoiceDiscountOnLine(TotalSalesLine2);
            NeedRefreshSalesLine := TRUE;
          END;
      END;

      TotalSalesLine2.CALCSUMS(Amount,"Amount Including VAT","Line Amount","Inv. Discount Amount");
      VATAmount := TotalSalesLine2."Amount Including VAT" - TotalSalesLine2.Amount;
      InvoiceDiscountAmount := TotalSalesLine2."Inv. Discount Amount";

      IF (InvoiceDiscountAmount = 0) OR (TotalSalesLine2."Line Amount" = 0) THEN
        InvoiceDiscountPct := 0
      ELSE
        WITH TotalSalesHeader DO
          CASE "Invoice Discount Calculation" OF
            "Invoice Discount Calculation"::"%":
              InvoiceDiscountPct := "Invoice Discount Value";
            "Invoice Discount Calculation"::None,
            "Invoice Discount Calculation"::Amount:
              BEGIN
                SalesLine2.COPYFILTERS(TotalSalesLine2);
                SalesLine2.SETRANGE("Allow Invoice Disc.",TRUE);
                SalesLine2.CALCSUMS("Line Amount");
                InvoiceDiscountPct := ROUND(InvoiceDiscountAmount / SalesLine2."Line Amount" * 100,0.00001);
              END;
          END;

      OnAfterCalculateSalesSubPageTotals(
        TotalSalesHeader,TotalSalesLine,VATAmount,InvoiceDiscountAmount,InvoiceDiscountPct,TotalSalesLine2);

      TotalSalesLine := TotalSalesLine2;
    END;

    [External]
    PROCEDURE CalculatePostedSalesInvoiceTotals@1(VAR SalesInvoiceHeader@1000 : Record 112;VAR VATAmount@1001 : Decimal;SalesInvoiceLine@1002 : Record 113);
    BEGIN
      IF SalesInvoiceHeader.GET(SalesInvoiceLine."Document No.") THEN BEGIN
        SalesInvoiceHeader.CALCFIELDS(Amount,"Amount Including VAT","Invoice Discount Amount");
        VATAmount := SalesInvoiceHeader."Amount Including VAT" - SalesInvoiceHeader.Amount;
      END;
    END;

    [External]
    PROCEDURE CalculatePostedSalesCreditMemoTotals@2(VAR SalesCrMemoHeader@1000 : Record 114;VAR VATAmount@1001 : Decimal;SalesCrMemoLine@1002 : Record 115);
    BEGIN
      IF SalesCrMemoHeader.GET(SalesCrMemoLine."Document No.") THEN BEGIN
        SalesCrMemoHeader.CALCFIELDS(Amount,"Amount Including VAT","Invoice Discount Amount");
        VATAmount := SalesCrMemoHeader."Amount Including VAT" - SalesCrMemoHeader.Amount;
      END;
    END;

    [External]
    PROCEDURE CalcTotalPurchAmountOnlyDiscountAllowed@33(PurchLine@1000 : Record 39) : Decimal;
    VAR
      TotalPurchLine@1001 : Record 39;
    BEGIN
      WITH TotalPurchLine DO BEGIN
        SETRANGE("Document Type",PurchLine."Document Type");
        SETRANGE("Document No.",PurchLine."Document No.");
        SETRANGE("Allow Invoice Disc.",TRUE);
        CALCSUMS("Line Amount");
        EXIT("Line Amount");
      END;
    END;

    [External]
    PROCEDURE CalcTotalSalesAmountOnlyDiscountAllowed@30(SalesLine@1000 : Record 37) : Decimal;
    VAR
      TotalSalesLine@1001 : Record 37;
    BEGIN
      WITH TotalSalesLine DO BEGIN
        SETRANGE("Document Type",SalesLine."Document Type");
        SETRANGE("Document No.",SalesLine."Document No.");
        SETRANGE("Allow Invoice Disc.",TRUE);
        CALCSUMS("Line Amount");
        EXIT("Line Amount");
      END;
    END;

    LOCAL PROCEDURE CalcTotalPurchVATDifference@21(PurchHeader@1000 : Record 38) : Decimal;
    VAR
      PurchLine@1001 : Record 39;
    BEGIN
      WITH PurchLine DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        CALCSUMS("VAT Difference");
        EXIT("VAT Difference");
      END;
    END;

    LOCAL PROCEDURE CalcTotalSalesVATDifference@3(SalesHeader@1000 : Record 36) : Decimal;
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        CALCSUMS("VAT Difference");
        EXIT("VAT Difference");
      END;
    END;

    LOCAL PROCEDURE CalculateTotalSalesLineAndVATAmount@36(SalesHeader@1001 : Record 36;VAR VATAmount@1000 : Decimal;VAR TempTotalSalesLine@1007 : TEMPORARY Record 37);
    VAR
      TempSalesLine@1009 : TEMPORARY Record 37;
      TempTotalSalesLineLCY@1008 : TEMPORARY Record 37;
      SalesPost@1006 : Codeunit 80;
      VATAmountText@1005 : Text[30];
      ProfitLCY@1004 : Decimal;
      ProfitPct@1003 : Decimal;
      TotalAdjCostLCY@1002 : Decimal;
    BEGIN
      SalesPost.GetSalesLines(SalesHeader,TempSalesLine,0);
      CLEAR(SalesPost);
      SalesPost.SumSalesLinesTemp(
        SalesHeader,TempSalesLine,0,TempTotalSalesLine,TempTotalSalesLineLCY,
        VATAmount,VATAmountText,ProfitLCY,ProfitPct,TotalAdjCostLCY);
    END;

    LOCAL PROCEDURE CalculateTotalPurchaseLineAndVATAmount@34(PurchaseHeader@1000 : Record 38;VAR VATAmount@1003 : Decimal;VAR TempTotalPurchaseLine@1006 : TEMPORARY Record 39);
    VAR
      TempTotalPurchaseLineLCY@1004 : TEMPORARY Record 39;
      TempPurchaseLine@1005 : TEMPORARY Record 39;
      PurchPost@1002 : Codeunit 90;
      VATAmountText@1001 : Text[30];
    BEGIN
      PurchPost.GetPurchLines(PurchaseHeader,TempPurchaseLine,0);
      CLEAR(PurchPost);

      PurchPost.SumPurchLinesTemp(
        PurchaseHeader,TempPurchaseLine,0,TempTotalPurchaseLine,TempTotalPurchaseLineLCY,VATAmount,VATAmountText);
    END;

    PROCEDURE RefreshSalesLine@64(VAR SalesLine@1000 : Record 37);
    BEGIN
      IF NeedRefreshSalesLine AND (SalesLine."Line No." <> 0) THEN
        IF SalesLine.FIND THEN;
    END;

    PROCEDURE RefreshPurchaseLine@65(VAR PurchaseLine@1000 : Record 39);
    BEGIN
      IF NeedRefreshPurchaseLine AND (PurchaseLine."Line No." <> 0) THEN
        IF PurchaseLine.FIND THEN;
    END;

    [External]
    PROCEDURE SalesUpdateTotalsControls@12(CurrentSalesLine@1007 : Record 37;VAR TotalSalesHeader@1009 : Record 36;VAR TotalsSalesLine@1003 : Record 37;VAR RefreshMessageEnabled@1000 : Boolean;VAR ControlStyle@1001 : Text;VAR RefreshMessageText@1002 : Text;VAR InvDiscAmountEditable@1005 : Boolean;CurrPageEditable@1004 : Boolean;VAR VATAmount@1008 : Decimal);
    VAR
      SalesLine@1010 : Record 37;
      SalesCalcDiscountByType@1006 : Codeunit 56;
      IsHandled@1011 : Boolean;
    BEGIN
      IF CurrentSalesLine."Document No." = '' THEN
        EXIT;

      TotalSalesHeader.GET(CurrentSalesLine."Document Type",CurrentSalesLine."Document No.");
      IsHandled := FALSE;
      OnBeforeSalesUpdateTotalsControls(TotalSalesHeader,InvDiscAmountEditable,IsHandled);
      RefreshMessageEnabled := SalesCalcDiscountByType.ShouldRedistributeInvoiceDiscountAmount(TotalSalesHeader);

      IF NOT RefreshMessageEnabled THEN
        RefreshMessageEnabled := NOT SalesUpdateTotals(TotalSalesHeader,CurrentSalesLine,TotalsSalesLine,VATAmount);

      SalesLine.SETRANGE("Document Type",CurrentSalesLine."Document Type");
      SalesLine.SETRANGE("Document No.",CurrentSalesLine."Document No.");
      IF NOT IsHandled THEN
        InvDiscAmountEditable := SalesLine.FINDFIRST AND
          SalesCalcDiscountByType.InvoiceDiscIsAllowed(TotalSalesHeader."Invoice Disc. Code") AND
          (NOT RefreshMessageEnabled) AND CurrPageEditable;

      TotalControlsUpdateStyle(RefreshMessageEnabled,ControlStyle,RefreshMessageText);

      IF RefreshMessageEnabled THEN
        ClearSalesAmounts(TotalsSalesLine,VATAmount);
    END;

    LOCAL PROCEDURE SalesUpdateTotals@31(VAR SalesHeader@1000 : Record 36;CurrentSalesLine@1005 : Record 37;VAR TotalsSalesLine@1004 : Record 37;VAR VATAmount@1006 : Decimal) : Boolean;
    BEGIN
      SalesHeader.CALCFIELDS(Amount,"Amount Including VAT","Invoice Discount Amount");

      IF SalesHeader."No." <> PreviousTotalSalesHeader."No." THEN
        ForceTotalsRecalculation := TRUE;

      IF (NOT ForceTotalsRecalculation) AND
         (PreviousTotalSalesHeader.Amount = SalesHeader.Amount) AND
         (PreviousTotalSalesHeader."Amount Including VAT" = SalesHeader."Amount Including VAT") AND
         (PreviousTotalSalesVATDifference = CalcTotalSalesVATDifference(SalesHeader))
      THEN
        EXIT(TRUE);

      ForceTotalsRecalculation := FALSE;

      IF NOT SalesCheckNumberOfLinesLimit(SalesHeader) THEN
        EXIT(FALSE);

      SalesCalculateTotalsWithInvoiceRounding(CurrentSalesLine,VATAmount,TotalsSalesLine);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SalesCalculateTotalsWithInvoiceRounding@16(VAR TempCurrentSalesLine@1000 : TEMPORARY Record 37;VAR VATAmount@1001 : Decimal;VAR TempTotalSalesLine@1002 : TEMPORARY Record 37);
    VAR
      SalesHeader@1010 : Record 36;
    BEGIN
      CLEAR(TempTotalSalesLine);
      IF SalesHeader.GET(TempCurrentSalesLine."Document Type",TempCurrentSalesLine."Document No.") THEN BEGIN
        CalculateTotalSalesLineAndVATAmount(SalesHeader,VATAmount,TempTotalSalesLine);

        IF PreviousTotalSalesHeader."No." <> TempCurrentSalesLine."Document No." THEN BEGIN
          PreviousTotalSalesHeader.GET(TempCurrentSalesLine."Document Type",TempCurrentSalesLine."Document No.");
          ForceTotalsRecalculation := TRUE;
        END;
        PreviousTotalSalesHeader.CALCFIELDS(Amount,"Amount Including VAT");
        PreviousTotalSalesVATDifference := CalcTotalSalesVATDifference(PreviousTotalSalesHeader);
      END;
    END;

    [External]
    PROCEDURE SalesRedistributeInvoiceDiscountAmounts@4(VAR TempSalesLine@1003 : TEMPORARY Record 37;VAR VATAmount@1002 : Decimal;VAR TempTotalSalesLine@1001 : TEMPORARY Record 37);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      WITH SalesHeader DO
        IF GET(TempSalesLine."Document Type",TempSalesLine."Document No.") THEN BEGIN
          CALCFIELDS("Recalculate Invoice Disc.");
          IF "Recalculate Invoice Disc." THEN
            CODEUNIT.RUN(CODEUNIT::"Sales - Calc Discount By Type",TempSalesLine);

          SalesCalculateTotalsWithInvoiceRounding(TempSalesLine,VATAmount,TempTotalSalesLine);
        END;

      OnAfterSalesRedistributeInvoiceDiscountAmounts(TempSalesLine,TempTotalSalesLine,VATAmount);
    END;

    [External]
    PROCEDURE SalesRedistributeInvoiceDiscountAmountsOnDocument@35(SalesHeader@1003 : Record 36);
    VAR
      TempSalesLine@1000 : TEMPORARY Record 37;
      TempSalesLineTotal@1001 : TEMPORARY Record 37;
      VATAmount@1002 : Decimal;
    BEGIN
      TempSalesLine."Document Type" := SalesHeader."Document Type";
      TempSalesLine."Document No." := SalesHeader."No.";
      SalesRedistributeInvoiceDiscountAmounts(TempSalesLine,VATAmount,TempSalesLineTotal);
    END;

    PROCEDURE SalesDocTotalsNotUpToDate@53();
    BEGIN
      TotalsUpToDate := FALSE;
    END;

    PROCEDURE SalesCheckIfDocumentChanged@50(VAR SalesLine@1001 : Record 37;VAR xSalesLine@1000 : Record 37);
    BEGIN
      IF (SalesLine."Document No." <> xSalesLine."Document No.") OR
         (SalesLine."Sell-to Customer No." <> xSalesLine."Sell-to Customer No.") OR
         (SalesLine."Bill-to Customer No." <> xSalesLine."Bill-to Customer No.") OR
         (SalesLine.Amount <> xSalesLine.Amount) OR
         (SalesLine."Amount Including VAT" <> xSalesLine."Amount Including VAT") OR
         (SalesLine."Inv. Discount Amount" <> xSalesLine."Inv. Discount Amount") OR
         (SalesLine."Currency Code" <> xSalesLine."Currency Code")
      THEN
        TotalsUpToDate := FALSE;
    END;

    PROCEDURE SalesCheckAndClearTotals@49(VAR SalesLine@1005 : Record 37;VAR xSalesLine@1006 : Record 37;VAR TotalSalesLine@1003 : Record 37;VAR VATAmount@1002 : Decimal;VAR InvoiceDiscountAmount@1001 : Decimal;VAR InvoiceDiscountPct@1000 : Decimal);
    BEGIN
      SalesLine.FILTERGROUP(4);
      IF SalesLine.GETFILTER("Document No.") <> '' THEN
        IF SalesLine.GETRANGEMIN("Document No.") <> xSalesLine."Document No." THEN BEGIN
          TotalsUpToDate := FALSE;
          CLEAR(TotalSalesLine);
          VATAmount := 0;
          InvoiceDiscountAmount := 0;
          InvoiceDiscountPct := 0;
        END;
      SalesLine.FILTERGROUP(0);
    END;

    PROCEDURE SalesDeltaUpdateTotals@54(VAR SalesLine@1007 : Record 37;VAR xSalesLine@1006 : Record 37;VAR TotalSalesLine@1004 : Record 37;VAR VATAmount@1003 : Decimal;VAR InvoiceDiscountAmount@1002 : Decimal;VAR InvoiceDiscountPct@1001 : Decimal);
    VAR
      InvDiscountBaseAmount@1000 : Decimal;
    BEGIN
      TotalSalesLine."Line Amount" += SalesLine."Line Amount" - xSalesLine."Line Amount";
      TotalSalesLine."Amount Including VAT" += SalesLine."Amount Including VAT" - xSalesLine."Amount Including VAT";
      TotalSalesLine.Amount += SalesLine.Amount - xSalesLine.Amount;
      VATAmount := TotalSalesLine."Amount Including VAT" - TotalSalesLine.Amount;
      IF SalesLine."Inv. Discount Amount" <> xSalesLine."Inv. Discount Amount" THEN BEGIN
        IF (InvoiceDiscountPct > -0.01) AND (InvoiceDiscountPct < 0.01) THEN // To avoid decimal overflow later
          InvDiscountBaseAmount := 0
        ELSE
          InvDiscountBaseAmount := InvoiceDiscountAmount / InvoiceDiscountPct * 100;
        InvoiceDiscountAmount += SalesLine."Inv. Discount Amount" - xSalesLine."Inv. Discount Amount";
        IF (InvoiceDiscountAmount = 0) OR (InvDiscountBaseAmount = 0) THEN
          InvoiceDiscountPct := 0
        ELSE
          InvoiceDiscountPct := ROUND(100 * InvoiceDiscountAmount / InvDiscountBaseAmount,0.00001);
      END;
    END;

    [External]
    PROCEDURE PurchaseUpdateTotalsControls@25(CurrentPurchaseLine@1007 : Record 39;VAR TotalPurchaseHeader@1009 : Record 38;VAR TotalsPurchaseLine@1003 : Record 39;VAR RefreshMessageEnabled@1000 : Boolean;VAR ControlStyle@1001 : Text;VAR RefreshMessageText@1002 : Text;VAR InvDiscAmountEditable@1005 : Boolean;VAR VATAmount@1008 : Decimal);
    BEGIN
      PurchaseUpdateTotalsControlsForceable(
        CurrentPurchaseLine,TotalPurchaseHeader,TotalsPurchaseLine,RefreshMessageEnabled,ControlStyle,RefreshMessageText,
        InvDiscAmountEditable,VATAmount,FALSE);
    END;

    [External]
    PROCEDURE PurchaseUpdateTotalsControlsForceable@37(CurrentPurchaseLine@1007 : Record 39;VAR TotalPurchaseHeader@1009 : Record 38;VAR TotalsPurchaseLine@1003 : Record 39;VAR RefreshMessageEnabled@1000 : Boolean;VAR ControlStyle@1001 : Text;VAR RefreshMessageText@1002 : Text;VAR InvDiscAmountEditable@1005 : Boolean;VAR VATAmount@1008 : Decimal;Force@1004 : Boolean);
    VAR
      PurchCalcDiscByType@1006 : Codeunit 66;
      IsHandled@1010 : Boolean;
    BEGIN
      ClearPurchaseAmounts(TotalsPurchaseLine,VATAmount);

      IF CurrentPurchaseLine."Document No." = '' THEN
        EXIT;

      TotalPurchaseHeader.GET(CurrentPurchaseLine."Document Type",CurrentPurchaseLine."Document No.");
      IsHandled := FALSE;
      OnBeforePurchUpdateTotalsControls(TotalPurchaseHeader,InvDiscAmountEditable,IsHandled);
      RefreshMessageEnabled := PurchCalcDiscByType.ShouldRedistributeInvoiceDiscountAmount(TotalPurchaseHeader);

      IF NOT RefreshMessageEnabled THEN
        RefreshMessageEnabled := NOT PurchaseUpdateTotals(TotalPurchaseHeader,CurrentPurchaseLine,TotalsPurchaseLine,VATAmount,Force);

      IF NOT IsHandled THEN
        InvDiscAmountEditable :=
          PurchCalcDiscByType.InvoiceDiscIsAllowed(TotalPurchaseHeader."Invoice Disc. Code") AND (NOT RefreshMessageEnabled);

      TotalControlsUpdateStyle(RefreshMessageEnabled,ControlStyle,RefreshMessageText);

      IF RefreshMessageEnabled THEN
        ClearPurchaseAmounts(TotalsPurchaseLine,VATAmount);
    END;

    LOCAL PROCEDURE PurchaseUpdateTotals@24(VAR PurchaseHeader@1000 : Record 38;CurrentPurchaseLine@1005 : Record 39;VAR TotalsPurchaseLine@1004 : Record 39;VAR VATAmount@1006 : Decimal;Force@1001 : Boolean) : Boolean;
    BEGIN
      PurchaseHeader.CALCFIELDS(Amount,"Amount Including VAT","Invoice Discount Amount");

      IF (PreviousTotalPurchaseHeader.Amount = PurchaseHeader.Amount) AND
         (PreviousTotalPurchaseHeader."Amount Including VAT" = PurchaseHeader."Amount Including VAT") AND
         (PreviousTotalPurchVATDifference = CalcTotalPurchVATDifference(PurchaseHeader))
      THEN
        EXIT(TRUE);

      IF NOT Force THEN
        IF NOT PurchaseCheckNumberOfLinesLimit(PurchaseHeader) THEN
          EXIT(FALSE);

      PurchaseCalculateTotalsWithInvoiceRounding(CurrentPurchaseLine,VATAmount,TotalsPurchaseLine);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE PurchaseCalculateTotalsWithInvoiceRounding@23(VAR TempCurrentPurchaseLine@1000 : TEMPORARY Record 39;VAR VATAmount@1001 : Decimal;VAR TempTotalPurchaseLine@1002 : TEMPORARY Record 39);
    VAR
      PurchaseHeader@1010 : Record 38;
    BEGIN
      CLEAR(TempTotalPurchaseLine);

      IF PurchaseHeader.GET(TempCurrentPurchaseLine."Document Type",TempCurrentPurchaseLine."Document No.") THEN BEGIN
        CalculateTotalPurchaseLineAndVATAmount(PurchaseHeader,VATAmount,TempTotalPurchaseLine);

        IF PreviousTotalPurchaseHeader."No." <> TempCurrentPurchaseLine."Document No." THEN
          PreviousTotalPurchaseHeader.GET(TempCurrentPurchaseLine."Document Type",TempCurrentPurchaseLine."Document No.");
        PreviousTotalPurchaseHeader.CALCFIELDS(Amount,"Amount Including VAT");
        PreviousTotalPurchVATDifference := CalcTotalPurchVATDifference(PreviousTotalPurchaseHeader);

        // calculate correct amount including vat if the VAT Calc type is Sales Tax
        IF TempCurrentPurchaseLine."VAT Calculation Type" = TempCurrentPurchaseLine."VAT Calculation Type"::"Sales Tax" THEN
          CalculateSalesTaxForTempTotalPurchaseLine(PurchaseHeader,TempCurrentPurchaseLine,TempTotalPurchaseLine);
      END;
    END;

    [External]
    PROCEDURE PurchaseRedistributeInvoiceDiscountAmounts@22(VAR TempPurchaseLine@1003 : TEMPORARY Record 39;VAR VATAmount@1002 : Decimal;VAR TempTotalPurchaseLine@1001 : TEMPORARY Record 39);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      WITH PurchaseHeader DO
        IF GET(TempPurchaseLine."Document Type",TempPurchaseLine."Document No.") THEN BEGIN
          CALCFIELDS("Recalculate Invoice Disc.");
          IF "Recalculate Invoice Disc." THEN
            CODEUNIT.RUN(CODEUNIT::"Purch - Calc Disc. By Type",TempPurchaseLine);

          PurchaseCalculateTotalsWithInvoiceRounding(TempPurchaseLine,VATAmount,TempTotalPurchaseLine);
        END;

      OnAfterPurchaseRedistributeInvoiceDiscountAmounts(TempPurchaseLine,TempTotalPurchaseLine,VATAmount);
    END;

    [External]
    PROCEDURE PurchaseRedistributeInvoiceDiscountAmountsOnDocument@38(PurchaseHeader@1000 : Record 38);
    VAR
      TempPurchaseLine@1006 : TEMPORARY Record 39;
      TempPurchaseLineTotal@1005 : TEMPORARY Record 39;
      VATAmount@1004 : Decimal;
    BEGIN
      TempPurchaseLine."Document Type" := PurchaseHeader."Document Type";
      TempPurchaseLine."Document No." := PurchaseHeader."No.";
      PurchaseRedistributeInvoiceDiscountAmounts(TempPurchaseLine,VATAmount,TempPurchaseLineTotal);
    END;

    PROCEDURE PurchaseDocTotalsNotUpToDate@58();
    BEGIN
      TotalsUpToDate := FALSE;
    END;

    PROCEDURE PurchaseCheckIfDocumentChanged@57(VAR PurchaseLine@1001 : Record 39;VAR xPurchaseLine@1000 : Record 39);
    BEGIN
      IF (PurchaseLine."Document No." <> xPurchaseLine."Document No.") OR
         (PurchaseLine."Buy-from Vendor No." <> xPurchaseLine."Buy-from Vendor No.") OR
         (PurchaseLine."Pay-to Vendor No." <> xPurchaseLine."Pay-to Vendor No.") OR
         (PurchaseLine.Amount <> xPurchaseLine.Amount) OR
         (PurchaseLine."Amount Including VAT" <> xPurchaseLine."Amount Including VAT") OR
         (PurchaseLine."Inv. Discount Amount" <> xPurchaseLine."Inv. Discount Amount") OR
         (PurchaseLine."Currency Code" <> xPurchaseLine."Currency Code")
      THEN
        TotalsUpToDate := FALSE;
    END;

    PROCEDURE PurchaseCheckAndClearTotals@56(VAR PurchaseLine@1005 : Record 39;VAR xPurchaseLine@1006 : Record 39;VAR TotalPurchaseLine@1003 : Record 39;VAR VATAmount@1002 : Decimal;VAR InvoiceDiscountAmount@1001 : Decimal;VAR InvoiceDiscountPct@1000 : Decimal);
    BEGIN
      PurchaseLine.FILTERGROUP(4);
      IF PurchaseLine.GETFILTER("Document No.") <> '' THEN
        IF PurchaseLine.GETRANGEMIN("Document No.") <> xPurchaseLine."Document No." THEN BEGIN
          TotalsUpToDate := FALSE;
          CLEAR(TotalPurchaseLine);
          VATAmount := 0;
          InvoiceDiscountAmount := 0;
          InvoiceDiscountPct := 0;
        END;
      PurchaseLine.FILTERGROUP(0);
    END;

    PROCEDURE PurchaseDeltaUpdateTotals@55(VAR PurchaseLine@1007 : Record 39;VAR xPurchaseLine@1006 : Record 39;VAR TotalPurchaseLine@1004 : Record 39;VAR VATAmount@1003 : Decimal;VAR InvoiceDiscountAmount@1002 : Decimal;VAR InvoiceDiscountPct@1001 : Decimal);
    VAR
      InvDiscountBaseAmount@1000 : Decimal;
    BEGIN
      TotalPurchaseLine."Line Amount" += PurchaseLine."Line Amount" - xPurchaseLine."Line Amount";
      TotalPurchaseLine."Amount Including VAT" += PurchaseLine."Amount Including VAT" - xPurchaseLine."Amount Including VAT";
      TotalPurchaseLine.Amount += PurchaseLine.Amount - xPurchaseLine.Amount;
      VATAmount := TotalPurchaseLine."Amount Including VAT" - TotalPurchaseLine.Amount;
      IF PurchaseLine."Inv. Discount Amount" <> xPurchaseLine."Inv. Discount Amount" THEN BEGIN
        IF (InvoiceDiscountPct > -0.01) AND (InvoiceDiscountPct < 0.01) THEN // To avoid decimal overflow later
          InvDiscountBaseAmount := 0
        ELSE
          InvDiscountBaseAmount := InvoiceDiscountAmount / InvoiceDiscountPct * 100;
        InvoiceDiscountAmount += PurchaseLine."Inv. Discount Amount" - xPurchaseLine."Inv. Discount Amount";
        IF (InvoiceDiscountAmount = 0) OR (InvDiscountBaseAmount = 0) THEN
          InvoiceDiscountPct := 0
        ELSE
          InvoiceDiscountPct := ROUND(100 * InvoiceDiscountAmount / InvDiscountBaseAmount,0.00001);
      END;
    END;

    [External]
    PROCEDURE CalculatePurchasePageTotals@52(VAR TotalPurchaseLine@1000 : Record 39;VAR VATAmount@1001 : Decimal;VAR PurchaseLine@1002 : Record 39);
    VAR
      TotalPurchaseLine2@1003 : Record 39;
    BEGIN
      TotalPurchaseLine2 := TotalPurchaseLine;
      TotalPurchaseLine2.SETRANGE("Document Type",PurchaseLine."Document Type");
      TotalPurchaseLine2.SETRANGE("Document No.",PurchaseLine."Document No.");
      OnAfterPurchaseLineSetFilters(TotalPurchaseLine2,PurchaseLine);
      TotalPurchaseLine2.CALCSUMS("Line Amount",Amount,"Amount Including VAT","Inv. Discount Amount");
      VATAmount := TotalPurchaseLine2."Amount Including VAT" - TotalPurchaseLine2.Amount;
      TotalPurchaseLine := TotalPurchaseLine2;
    END;

    [External]
    PROCEDURE CalculatePurchaseTotals@27(VAR TotalPurchaseLine@1000 : Record 39;VAR VATAmount@1001 : Decimal;VAR PurchaseLine@1002 : Record 39);
    BEGIN
      CalculatePurchasePageTotals(TotalPurchaseLine,VATAmount,PurchaseLine);
    END;

    [External]
    PROCEDURE CalculatePurchaseSubPageTotals@42(VAR TotalPurchaseHeader@1001 : Record 38;VAR TotalPurchaseLine@1000 : Record 39;VAR VATAmount@1003 : Decimal;VAR InvoiceDiscountAmount@1004 : Decimal;VAR InvoiceDiscountPct@1002 : Decimal);
    VAR
      PurchaseLine2@1005 : Record 39;
      TotalPurchaseLine2@1006 : Record 39;
    BEGIN
      IF TotalsUpToDate THEN
        EXIT;
      TotalsUpToDate := TRUE;
      NeedRefreshPurchaseLine := FALSE;

      PurchasesPayablesSetup.GetRecordOnce;
      TotalPurchaseLine2.COPY(TotalPurchaseLine);
      TotalPurchaseLine2.RESET;
      TotalPurchaseLine2.SETRANGE("Document Type",TotalPurchaseHeader."Document Type");
      TotalPurchaseLine2.SETRANGE("Document No.",TotalPurchaseHeader."No.");

      IF PurchasesPayablesSetup."Calc. Inv. Discount" AND (TotalPurchaseHeader."No." <> '') AND
         (TotalPurchaseHeader."Vendor Posting Group" <> '')
      THEN BEGIN
        TotalPurchaseHeader.CALCFIELDS("Recalculate Invoice Disc.");
        IF TotalPurchaseHeader."Recalculate Invoice Disc." THEN
          IF TotalPurchaseLine2.FINDFIRST THEN BEGIN
            PurchCalcDiscount.CalculateInvoiceDiscountOnLine(TotalPurchaseLine2);
            NeedRefreshPurchaseLine := TRUE;
          END;
      END;

      TotalPurchaseLine2.CALCSUMS(Amount,"Amount Including VAT","Line Amount","Inv. Discount Amount");
      VATAmount := TotalPurchaseLine2."Amount Including VAT" - TotalPurchaseLine2.Amount;
      InvoiceDiscountAmount := TotalPurchaseLine2."Inv. Discount Amount";

      IF (InvoiceDiscountAmount = 0) OR (TotalPurchaseLine2."Line Amount" = 0) THEN
        InvoiceDiscountPct := 0
      ELSE
        WITH TotalPurchaseHeader DO
          CASE "Invoice Discount Calculation" OF
            "Invoice Discount Calculation"::"%":
              InvoiceDiscountPct := "Invoice Discount Value";
            "Invoice Discount Calculation"::None,
            "Invoice Discount Calculation"::Amount:
              BEGIN
                PurchaseLine2.COPYFILTERS(TotalPurchaseLine2);
                PurchaseLine2.SETRANGE("Allow Invoice Disc.",TRUE);
                PurchaseLine2.CALCSUMS("Line Amount");
                InvoiceDiscountPct := ROUND(InvoiceDiscountAmount / PurchaseLine2."Line Amount" * 100,0.00001);
              END;
          END;

      OnAfterCalculatePurchaseSubPageTotals(
        TotalPurchaseHeader,TotalPurchaseLine,VATAmount,InvoiceDiscountAmount,InvoiceDiscountPct,TotalPurchaseLine2);

      TotalPurchaseLine := TotalPurchaseLine2;
    END;

    [External]
    PROCEDURE CalculatePostedPurchInvoiceTotals@5(VAR PurchInvHeader@1000 : Record 122;VAR VATAmount@1001 : Decimal;PurchInvLine@1002 : Record 123);
    BEGIN
      IF PurchInvHeader.GET(PurchInvLine."Document No.") THEN BEGIN
        PurchInvHeader.CALCFIELDS(Amount,"Amount Including VAT","Invoice Discount Amount");
        VATAmount := PurchInvHeader."Amount Including VAT" - PurchInvHeader.Amount;
      END;
    END;

    [External]
    PROCEDURE CalculatePostedPurchCreditMemoTotals@7(VAR PurchCrMemoHdr@1000 : Record 124;VAR VATAmount@1001 : Decimal;PurchCrMemoLine@1002 : Record 125);
    BEGIN
      IF PurchCrMemoHdr.GET(PurchCrMemoLine."Document No.") THEN BEGIN
        PurchCrMemoHdr.CALCFIELDS(Amount,"Amount Including VAT","Invoice Discount Amount");
        VATAmount := PurchCrMemoHdr."Amount Including VAT" - PurchCrMemoHdr.Amount;
      END;
    END;

    LOCAL PROCEDURE ClearSalesAmounts@19(VAR TotalsSalesLine@1000 : Record 37;VAR VATAmount@1001 : Decimal);
    BEGIN
      TotalsSalesLine.Amount := 0;
      TotalsSalesLine."Amount Including VAT" := 0;
      VATAmount := 0;
      CLEAR(PreviousTotalSalesHeader);
    END;

    LOCAL PROCEDURE ClearPurchaseAmounts@29(VAR TotalsPurchaseLine@1000 : Record 39;VAR VATAmount@1001 : Decimal);
    BEGIN
      TotalsPurchaseLine.Amount := 0;
      TotalsPurchaseLine."Amount Including VAT" := 0;
      VATAmount := 0;
      CLEAR(PreviousTotalPurchaseHeader);
    END;

    LOCAL PROCEDURE TotalControlsUpdateStyle@20(RefreshMessageEnabled@1000 : Boolean;VAR ControlStyle@1001 : Text;VAR RefreshMessageText@1002 : Text);
    BEGIN
      IF RefreshMessageEnabled THEN BEGIN
        ControlStyle := 'Subordinate';
        RefreshMessageText := RefreshMsgTxt;
      END ELSE BEGIN
        ControlStyle := 'Strong';
        RefreshMessageText := '';
      END;
    END;

    [External]
    PROCEDURE GetTotalVATCaption@10(CurrencyCode@1000 : Code[10]) : Text;
    BEGIN
      EXIT(GetCaptionClassWithCurrencyCode(TotalVATLbl,CurrencyCode));
    END;

    [External]
    PROCEDURE GetTotalInclVATCaption@13(CurrencyCode@1000 : Code[10]) : Text;
    BEGIN
      EXIT(GetCaptionClassWithCurrencyCode(TotalAmountInclVatLbl,CurrencyCode));
    END;

    [External]
    PROCEDURE GetTotalExclVATCaption@14(CurrencyCode@1000 : Code[10]) : Text;
    BEGIN
      EXIT(GetCaptionClassWithCurrencyCode(TotalAmountExclVATLbl,CurrencyCode));
    END;

    LOCAL PROCEDURE GetCaptionClassWithCurrencyCode@15(CaptionWithoutCurrencyCode@1001 : Text;CurrencyCode@1002 : Code[10]) : Text;
    BEGIN
      EXIT('3,' + GetCaptionWithCurrencyCode(CaptionWithoutCurrencyCode,CurrencyCode));
    END;

    LOCAL PROCEDURE GetCaptionWithCurrencyCode@28(CaptionWithoutCurrencyCode@1001 : Text;CurrencyCode@1002 : Code[10]) : Text;
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      IF CurrencyCode = '' THEN BEGIN
        GLSetup.GET;
        CurrencyCode := GLSetup.GetCurrencyCode(CurrencyCode);
      END;

      IF CurrencyCode <> '' THEN
        EXIT(CaptionWithoutCurrencyCode + STRSUBSTNO(' (%1)',CurrencyCode));

      EXIT(CaptionWithoutCurrencyCode);
    END;

    LOCAL PROCEDURE GetCaptionWithVATInfo@6(CaptionWithoutVATInfo@1001 : Text;IncludesVAT@1000 : Boolean) : Text;
    BEGIN
      IF IncludesVAT THEN
        EXIT('2,1,' + CaptionWithoutVATInfo);

      EXIT('2,0,' + CaptionWithoutVATInfo);
    END;

    [External]
    PROCEDURE GetTotalSalesHeaderAndCurrency@138(VAR SalesLine@1000 : Record 37;VAR TotalSalesHeader@1001 : Record 36;VAR Currency@1002 : Record 4);
    BEGIN
      IF NOT SalesLinesExist THEN
        SalesLinesExist := NOT SalesLine.ISEMPTY;
      IF NOT SalesLinesExist OR
         (TotalSalesHeader."Document Type" <> SalesLine."Document Type") OR (TotalSalesHeader."No." <> SalesLine."Document No.") OR
         (TotalSalesHeader."Sell-to Customer No." <> SalesLine."Sell-to Customer No.") OR
         (TotalSalesHeader."Currency Code" <> SalesLine."Currency Code")
      THEN BEGIN
        CLEAR(TotalSalesHeader);
        IF SalesLine."Document No." <> '' THEN
          IF TotalSalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.") THEN;
      END;
      IF Currency.Code <> TotalSalesHeader."Currency Code" THEN BEGIN
        CLEAR(Currency);
        Currency.Initialize(TotalSalesHeader."Currency Code");
      END;
    END;

    [External]
    PROCEDURE GetTotalPurchaseHeaderAndCurrency@46(VAR PurchaseLine@1000 : Record 39;VAR TotalPurchaseHeader@1001 : Record 38;VAR Currency@1002 : Record 4);
    BEGIN
      IF NOT PurchaseLinesExist THEN
        PurchaseLinesExist := NOT PurchaseLine.ISEMPTY;
      IF NOT PurchaseLinesExist OR
         (TotalPurchaseHeader."Document Type" <> PurchaseLine."Document Type") OR
         (TotalPurchaseHeader."No." <> PurchaseLine."Document No.") OR
         (TotalPurchaseHeader."Buy-from Vendor No." <> PurchaseLine."Buy-from Vendor No.") OR
         (TotalPurchaseHeader."Currency Code" <> PurchaseLine."Currency Code")
      THEN BEGIN
        CLEAR(TotalPurchaseHeader);
        IF PurchaseLine."Document No." <> '' THEN
          IF TotalPurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.") THEN;
      END;
      IF Currency.Code <> TotalPurchaseHeader."Currency Code" THEN BEGIN
        CLEAR(Currency);
        Currency.Initialize(TotalPurchaseHeader."Currency Code");
      END;
    END;

    [External]
    PROCEDURE GetInvoiceDiscAmountWithVATCaption@8(IncludesVAT@1000 : Boolean) : Text;
    BEGIN
      EXIT(GetCaptionWithVATInfo(InvoiceDiscountAmountLbl,IncludesVAT));
    END;

    [External]
    PROCEDURE GetInvoiceDiscAmountWithVATAndCurrencyCaption@18(InvDiscAmountCaptionClassWithVAT@1000 : Text;CurrencyCode@1001 : Code[10]) : Text;
    BEGIN
      EXIT(GetCaptionWithCurrencyCode(InvDiscAmountCaptionClassWithVAT,CurrencyCode));
    END;

    [External]
    PROCEDURE GetTotalLineAmountWithVATAndCurrencyCaption@32(CurrencyCode@1001 : Code[10];IncludesVAT@1000 : Boolean) : Text;
    BEGIN
      EXIT(GetCaptionWithCurrencyCode(CAPTIONCLASSTRANSLATE(GetCaptionWithVATInfo(TotalLineAmountLbl,IncludesVAT)),CurrencyCode));
    END;

    [External]
    PROCEDURE SalesCheckNumberOfLinesLimit@17(SalesHeader@1001 : Record 36) : Boolean;
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
      SalesLine.SETFILTER("No.",'<>%1','');

      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Order THEN
        EXIT(SalesLine.COUNT <= 10);

      EXIT(SalesLine.COUNT <= 100);
    END;

    [External]
    PROCEDURE PurchaseCheckNumberOfLinesLimit@9(PurchaseHeader@1001 : Record 38) : Boolean;
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETFILTER(Type,'<>%1',PurchaseLine.Type::" ");
      PurchaseLine.SETFILTER("No.",'<>%1','');

      IF PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Order THEN
        EXIT(PurchaseLine.COUNT <= 10);

      EXIT(PurchaseLine.COUNT <= 100);
    END;

    LOCAL PROCEDURE CalculateSalesTaxForTempTotalPurchaseLine@26(PurchaseHeader@1000 : Record 38;CurrentPurchaseLine@1001 : Record 39;VAR TempTotalPurchaseLine@1002 : TEMPORARY Record 39);
    VAR
      Currency@1003 : Record 4;
      SalesTaxCalculate@1004 : Codeunit 398;
      TotalVATAmount@1005 : Decimal;
    BEGIN
      IF PurchaseHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchaseHeader."Currency Code");

      CurrentPurchaseLine.SETRANGE("Document No.",CurrentPurchaseLine."Document No.");
      CurrentPurchaseLine.SETRANGE("Document Type",CurrentPurchaseLine."Document Type");
      CurrentPurchaseLine.FINDSET;
      TotalVATAmount := 0;

      // Loop through all purchase lines and calculate correct sales tax.
      REPEAT
        TotalVATAmount := TotalVATAmount + ROUND(
            SalesTaxCalculate.CalculateTax(
              CurrentPurchaseLine."Tax Area Code",CurrentPurchaseLine."Tax Group Code",CurrentPurchaseLine."Tax Liable",
              PurchaseHeader."Posting Date",
              CurrentPurchaseLine."Line Amount" - CurrentPurchaseLine."Inv. Discount Amount",
              CurrentPurchaseLine."Quantity (Base)",PurchaseHeader."Currency Factor"),
            Currency."Amount Rounding Precision");
      UNTIL CurrentPurchaseLine.NEXT = 0;

      TempTotalPurchaseLine."Amount Including VAT" := TempTotalPurchaseLine."Line Amount" -
        TempTotalPurchaseLine."Inv. Discount Amount" + TotalVATAmount;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalculateSalesSubPageTotals@47(VAR TotalSalesHeader@1000 : Record 36;VAR TotalSalesLine@1001 : Record 37;VAR VATAmount@1002 : Decimal;VAR InvoiceDiscountAmount@1003 : Decimal;VAR InvoiceDiscountPct@1004 : Decimal;VAR TotalSalesLine2@1005 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalculatePurchaseSubPageTotals@48(VAR TotalPurchHeader@1000 : Record 38;VAR TotalPurchLine@1001 : Record 39;VAR VATAmount@1002 : Decimal;VAR InvoiceDiscountAmount@1003 : Decimal;VAR InvoiceDiscountPct@1004 : Decimal;VAR TotalPurchaseLine2@1005 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesLineSetFilters@41(VAR TotalSalesLine@1000 : Record 37;SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesRedistributeInvoiceDiscountAmounts@45(VAR TempSalesLine@1000 : TEMPORARY Record 37;VAR TempTotalSalesLine@1001 : TEMPORARY Record 37;VAR VATAmount@1002 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPurchaseLineSetFilters@44(VAR TotalPurchaseLine@1000 : Record 39;PurchaseLine@1001 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPurchaseRedistributeInvoiceDiscountAmounts@43(VAR TempPurchaseLine@1000 : TEMPORARY Record 39;VAR TempTotalPurchaseLine@1001 : TEMPORARY Record 39;VAR VATAmount@1002 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSalesUpdateTotalsControls@39(VAR SalesHeader@1000 : Record 36;VAR InvDiscAmountEditable@1001 : Boolean;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePurchUpdateTotalsControls@40(VAR PurchaseHeader@1000 : Record 38;VAR InvDiscAmountEditable@1001 : Boolean;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalculateSalesSubPageTotalsOnAfterSetFilters@59(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36);
    BEGIN
    END;

    BEGIN
    END.
  }
}

