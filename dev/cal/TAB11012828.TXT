OBJECT Table 11012828 Service Contract Discount Term
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestUniqueInvoiceBase;
             END;

    OnModify=BEGIN
               TestUniqueInvoiceBase;
             END;

    CaptionML=[ENU=Service Contract Discount Term;
               NOR=Rabattvilk†r for servicekontrakt;
               SVE=Servicekontrakt, rabattvillkor];
    LookupPageID=Page11012836;
    DrillDownPageID=Page11012836;
  }
  FIELDS
  {
    { 5   ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract;
                                                   CaptionML=[ENU=Service Contract No.;
                                                              NOR=Servicekontraktnr;
                                                              SVE=Servicekontraktnr] }
    { 10  ;   ;Service Package     ;Code10        ;TableRelation="Service Package";
                                                   OnValidate=BEGIN
                                                                FindLino;
                                                              END;

                                                   CaptionML=[ENU=Service Package;
                                                              NOR=Servicepakke;
                                                              SVE=Servicepaket] }
    { 11  ;   ;Service Package Description;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Package".Description WHERE (Code=FIELD(Service Package)));
                                                   CaptionML=[ENU=Service Package Description;
                                                              NOR=Servicepakke, beskrivelse;
                                                              SVE=Servicepaket, beskrivning];
                                                   Editable=No }
    { 12  ;   ;Source Type         ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Package"."Source Type" WHERE (Code=FIELD(Service Package)));
                                                   CaptionML=[ENU=Source Type;
                                                              NOR=Kildetype;
                                                              SVE=Ursprungstyp];
                                                   OptionCaptionML=[ENU="Call,Contract,Direct,Estimate,,,,,,, ";
                                                                    NOR="Samtale,Kontrakt,Direkte,Kalkyle,,,,,,, ";
                                                                    SVE="Samtal,Kontrakt,Direkt,Kalkyl,,,,,,, "];
                                                   OptionString=Call,Contract,Direct,Estimate,,,,,,,None;
                                                   Editable=No }
    { 15  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr];
                                                   Editable=No }
    { 20  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 30  ;   ;Starting Date Discount;Date        ;CaptionML=[ENU=Starting Date Discount;
                                                              NOR=Startdato, rabatt;
                                                              SVE=Startdatum, rabatt] }
    { 40  ;   ;Discount Period     ;DateFormula   ;OnValidate=VAR
                                                                DiscountPeriod@1100528600 : DateFormula;
                                                              BEGIN
                                                                IF "Discount Period" <> xRec."Discount Period" THEN
                                                                  IF "Period Type" = "Period Type"::"Calendar Year" THEN BEGIN
                                                                    EVALUATE(DiscountPeriod, '<1Y>');
                                                                    TESTFIELD("Discount Period", DiscountPeriod);
                                                                  END;
                                                                TestPeriodTypeWithDiscountPeriod;
                                                              END;

                                                   CaptionML=[ENU=Discount Period;
                                                              NOR=Rabattperiode;
                                                              SVE=Rabattperiod] }
    { 50  ;   ;Percentage          ;Decimal       ;OnValidate=BEGIN
                                                                IF Level <> Level::Line THEN
                                                                  FIELDERROR(Level);
                                                              END;

                                                   CaptionML=[ENU=Percentage;
                                                              NOR=Prosent;
                                                              SVE=Procent] }
    { 60  ;   ;Cost Type           ;Option        ;InitValue=Sundry;
                                                   OnValidate=BEGIN
                                                                IF xRec."Cost Type" <> "Cost Type" THEN
                                                                  "Cost Object" := '';

                                                                IF ("Cost Type" <> "Cost Type"::Labor) AND (Level = Level::"Base Service Order") THEN
                                                                  TESTFIELD("Invoice Base Quantity", 0);
                                                              END;

                                                   CaptionML=[ENU=Cost Type;
                                                              NOR=Kostnadstype;
                                                              SVE=Kostnadstyp];
                                                   OptionCaptionML=[ENU=" ,Labor,Material,Subcontracting,Plant,Sundry";
                                                                    NOR=" ,Arbeidskraft,Materiale,Underentrepen›r,Maskin,Diverse";
                                                                    SVE=" ,Arbetskraft,Material,Underentreprenad,Maskin,Diverse"];
                                                   OptionString=[ ,Labor,Material,Subcontracting,Plant,Sundry] }
    { 70  ;   ;Discount Level      ;Option        ;CaptionML=[ENU=Discount Level;
                                                              NOR=Rabattniv†;
                                                              SVE=Rabattniv†];
                                                   OptionCaptionML=[ENU=Source Type,Cost Component;
                                                                    NOR=Kildetype,Kostdel;
                                                                    SVE=Ursprungstyp,Kostnadsdel];
                                                   OptionString=SourceType,CostComponent;
                                                   Editable=No }
    { 80  ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   OnValidate=BEGIN
                                                                IF "Cost Component" <> '' THEN
                                                                  TESTFIELD(Level, Level::Line);
                                                              END;

                                                   CaptionML=[ENU=Cost Component;
                                                              NOR=Kostnadskomponent;
                                                              SVE=Kostnadsdel] }
    { 90  ;   ;Level               ;Option        ;OnValidate=VAR
                                                                ServiceSetup@1100528600 : Record 11012800;
                                                                ServiceContract@1100528601 : Record 11012812;
                                                              BEGIN
                                                                ServiceSetup.GET;
                                                                CASE Level OF
                                                                  Level::"Base Service Order":
                                                                    BEGIN
                                                                      IF NOT ("Invoice Base Method" IN ["Invoice Base Method"::"total>base", "Invoice Base Method"::"total<base"]) OR ("Cost Type" <> "Cost Type"::Labor) THEN
                                                                        TESTFIELD("Invoice Base Quantity", 0);
                                                                      TESTFIELD("Cost Object", '');
                                                                      Percentage := 100;
                                                                    END;
                                                                  Level::Period,
                                                                  Level::"Object/Period":
                                                                    BEGIN
                                                                      TESTFIELD("Filter Group", '');
                                                                      TESTFIELD("Filter Group 2", '');
                                                                      IF Level <> Level::"Object/Period" THEN
                                                                        TESTFIELD("Object Filter Group", '');
                                                                      IF NOT ("Invoice Base Method" IN ["Invoice Base Method"::" ", "Invoice Base Method"::"total-base"]) THEN
                                                                        FIELDERROR("Invoice Base Method");
                                                                      VALIDATE("Based on", "Based on"::"Starting Date");
                                                                      Percentage := 100;
                                                                      IF ServiceContract.GET("Service Contract No.") THEN
                                                                        VALIDATE("Starting Date Discount", ServiceContract."Starting Date");
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Level;
                                                              NOR=Niv†;
                                                              SVE=Niv†];
                                                   OptionCaptionML=ENU=Line,Base Service Order,Period,Object/Period;
                                                   OptionString=Line,Base Service Order,Period,Object/Period }
    { 100 ;   ;Cost Object         ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=FILTER(<>Revenue),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=VAR
                                                                DimensionValue@1100528600 : Record 349;
                                                              BEGIN
                                                                IF "Cost Object" <> '' THEN
                                                                  TESTFIELD(Level, Level::Line);
                                                                DimensionValue.SETRANGE("Global Dimension No.", 2);
                                                                DimensionValue.SETRANGE(Code, "Cost Object");
                                                                IF DimensionValue.FINDFIRST THEN
                                                                  "Cost Type" := DimensionValue."Cost Type" +1;
                                                              END;

                                                   OnLookup=VAR
                                                              DimensionValue@1100528600 : Record 349;
                                                            BEGIN
                                                              DimensionValue.SETRANGE("Cost Type", "Cost Type" -1);
                                                              DimensionValue.SETRANGE("Global Dimension No.", 2);
                                                              IF PAGE.RUNMODAL(0, DimensionValue) = ACTION::LookupOK THEN
                                                                VALIDATE("Cost Object", DimensionValue.Code);
                                                            END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Kostnadsobjekt;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 110 ;   ;Invoice Base Method ;Option        ;OnValidate=BEGIN
                                                                CASE "Invoice Base Method" OF
                                                                  "Invoice Base Method"::" ":
                                                                    BEGIN
                                                                      "Invoice Base" := 0;
                                                                      "Invoice Base Quantity" := 0;
                                                                   END;
                                                                  "Invoice Base Method"::"total-base":
                                                                    IF Level IN [Level::"Base Service Order", Level::Period, Level::"Object/Period"] THEN
                                                                      TESTFIELD("Invoice Base Quantity", 0);
                                                                  "Invoice Base Method"::"base when total>base",
                                                                  "Invoice Base Method"::"base when total<base":
                                                                    IF NOT (Level IN [Level::"Base Service Order", Level::Period, Level::"Object/Period"]) THEN
                                                                      FIELDERROR(Level);
                                                                END;

                                                                IF NOT ("Invoice Base Method" IN ["Invoice Base Method"::" ", "Invoice Base Method"::"total-base"]) THEN
                                                                  IF Level IN [Level::Period, Level::"Object/Period"] THEN
                                                                    FIELDERROR(Level);
                                                              END;

                                                   CaptionML=[ENU=Invoice Base Method;
                                                              NOR=Faktura, Grunnmetode;
                                                              SVE=Faktura, basmetod];
                                                   OptionCaptionML=ENU=" ,Total - Invoice Base Amount,Total if exceeding Invoice Base Amount,Total if under Invoice Base Amount,Base when Total > Base,Base when Total < Base";
                                                   OptionString=[ ,total-base,total>base,total<base,base when total>base,base when total<base] }
    { 120 ;   ;Invoice Base        ;Decimal       ;OnValidate=VAR
                                                                ServiceContract@1100528600 : Record 11012812;
                                                              BEGIN
                                                                IF "Invoice Base" <> 0 THEN BEGIN
                                                                  TESTFIELD("Invoice Base Method");
                                                                  TESTFIELD("Invoice Base Quantity", 0);
                                                                  IF Level IN [Level::Period, Level::"Object/Period"] THEN
                                                                    IF ServiceContract.GET("Service Contract No.") THEN
                                                                      ServiceContract.TESTFIELD("Service Package");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Invoice Base;
                                                              NOR=Faktura, Basis;
                                                              SVE=Faktura bas] }
    { 130 ;   ;Invoice Base Quantity;Decimal      ;OnValidate=BEGIN
                                                                IF "Invoice Base Quantity" <> 0 THEN BEGIN
                                                                  IF Level IN [Level::"Base Service Order", Level::Period, Level::"Object/Period"] THEN BEGIN
                                                                    IF "Invoice Base Method" = "Invoice Base Method"::"total-base" THEN
                                                                      FIELDERROR("Invoice Base Method");
                                                                    TESTFIELD("Cost Type", "Cost Type"::Labor);
                                                                  END;
                                                                  TESTFIELD("Invoice Base Method");
                                                                  TESTFIELD("Invoice Base", 0);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Invoice Base Quantity;
                                                              NOR=Faktura, basisantall;
                                                              SVE=Faktura antal bas] }
    { 140 ;   ;Filter Group        ;Code20        ;TableRelation="Serv. Discount Filter Group" WHERE (Filter Type=CONST(Cost Plus));
                                                   OnValidate=BEGIN
                                                                IF "Filter Group" <> '' THEN
                                                                  TestFilterGroupLevel("Filter Group");
                                                              END;

                                                   CaptionML=[ENU=Filter Group;
                                                              NOR=Filtergruppe;
                                                              SVE=Filtergrupp] }
    { 145 ;   ;Filter Group Description;Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Serv. Discount Filter Group".Description WHERE (Code=FIELD(Filter Group)));
                                                   CaptionML=[ENU=Filter Group Description;
                                                              NOR=Filtergruppe, beskrivelse];
                                                   Editable=No }
    { 150 ;   ;Filter Groups Method;Option        ;OnValidate=BEGIN
                                                                IF "Filter Groups Method" = "Filter Groups Method"::Exclude THEN
                                                                  IF Level IN [Level::Period, Level::"Object/Period"] THEN
                                                                    FIELDERROR(Level);
                                                              END;

                                                   CaptionML=ENU=Filter Groups Method;
                                                   OptionCaptionML=[ENU=Include,Exclude;
                                                                    NOR=Inkluder,Ekskluder;
                                                                    SVE=Inkludera,Exkludera];
                                                   OptionString=Include,Exclude }
    { 160 ;   ;Filter Group 2      ;Code20        ;TableRelation="Serv. Discount Filter Group" WHERE (Filter Type=CONST(Cost Plus));
                                                   OnValidate=BEGIN
                                                                IF "Filter Group 2" <> '' THEN
                                                                  TestFilterGroupLevel("Filter Group");
                                                              END;

                                                   CaptionML=ENU=Filter Group 2 }
    { 165 ;   ;Filter Group 2 Description;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Serv. Discount Filter Group".Description WHERE (Code=FIELD(Filter Group 2)));
                                                   CaptionML=ENU=Filter Group 2 Description;
                                                   Editable=No }
    { 170 ;   ;Based on            ;Option        ;OnValidate=BEGIN
                                                                IF "Based on" <> "Based on"::" " THEN
                                                                  IF NOT (Level IN [Level::Period, Level::"Object/Period"]) THEN
                                                                    FIELDERROR(Level);
                                                              END;

                                                   CaptionML=[ENU=Based on;
                                                              NOR=Basert p†;
                                                              SVE=Baserad p†];
                                                   OptionCaptionML=ENU=" ,Starting Date,Order Date";
                                                   OptionString=[ ,Starting Date,Order Date] }
    { 180 ;   ;Proportionally      ;Boolean       ;OnValidate=BEGIN
                                                                IF Proportionally THEN BEGIN
                                                                  IF NOT (Level IN [Level::Period, Level::"Object/Period"]) THEN
                                                                    FIELDERROR(Level);
                                                                  TESTFIELD("Period Type", "Period Type"::"Calendar Year");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Proportionally }
    { 190 ;   ;Period Type         ;Option        ;OnValidate=VAR
                                                                DiscountPeriod@1100528600 : DateFormula;
                                                              BEGIN
                                                                IF "Period Type" <> "Period Type"::" " THEN
                                                                  IF NOT (Level IN [Level::Period, Level::"Object/Period"]) THEN
                                                                    FIELDERROR(Level);
                                                                IF "Period Type" = "Period Type"::"Calendar Year" THEN BEGIN
                                                                  EVALUATE(DiscountPeriod, '<1Y>');
                                                                  VALIDATE("Discount Period", DiscountPeriod);
                                                                END;
                                                                TestPeriodTypeWithDiscountPeriod;
                                                              END;

                                                   CaptionML=[ENU=Period Type;
                                                              NOR=Periodetype;
                                                              SVE=Periodtyp];
                                                   OptionCaptionML=ENU=" ,Contract Discount Period,Calendar Year";
                                                   OptionString=[ ,Contract Discount Period,Calendar Year] }
    { 200 ;   ;Object Filter Group ;Code20        ;TableRelation="Serv. Discount Filter Group" WHERE (Filter Type=CONST(Invoice Base));
                                                   OnValidate=BEGIN
                                                                IF "Object Filter Group" <> '' THEN BEGIN
                                                                  TESTFIELD(Level, Level::"Object/Period");
                                                                  TESTFIELD("Invoice Base Method");
                                                                  TESTFIELD("Filter Groups Method", "Filter Groups Method"::Include);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Object Filter Group }
    { 205 ;   ;Object Filter Group Desc.;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Serv. Discount Filter Group".Description WHERE (Code=FIELD(Object Filter Group)));
                                                   CaptionML=ENU=Object Filter Group Description;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Service Contract No.,Service Package,Line No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'ENU=Invoice Base on Level Base Service Order already exists;NOR=Fakturabasis p† Niv†et Basisserviceordre finnes allerede';
      Text001@1100528601 : TextConst 'ENU=Filter Group %1 contains lines which cannot be applied to level %2';
      Text002@1100528602 : TextConst 'ENU=Period Type Calendar Year combined with a Discount Period shorter than 1 year not allowed';

    PROCEDURE FindLino@1210190000();
    VAR
      ServDiscRec@1210190000 : Record 11012828;
    BEGIN
      ServDiscRec.SETRANGE("Service Contract No.", "Service Contract No.");
      ServDiscRec.SETRANGE("Service Package", "Service Package");
      IF ServDiscRec.FIND('+') THEN
        "Line No." := ServDiscRec."Line No." + 10000
      ELSE
        "Line No." := 10000;
    END;

    PROCEDURE TestUniqueInvoiceBase@1100528600();
    VAR
      ServiceContractDiscountTerm@1100528600 : Record 11012828;
    BEGIN
      IF Level = Level::Line THEN
        EXIT;
      ServiceContractDiscountTerm.SETRANGE("Service Contract No.", "Service Contract No.");
      ServiceContractDiscountTerm.SETRANGE("Service Package", "Service Package");
      ServiceContractDiscountTerm.SETRANGE(Level, Level);
      ServiceContractDiscountTerm.SETRANGE("Cost Type", "Cost Type");
      ServiceContractDiscountTerm.SETFILTER("Line No.", '<>%1', "Line No.");
      IF NOT ServiceContractDiscountTerm.ISEMPTY THEN
        ERROR(Text000);
    END;

    PROCEDURE TestFilterGroupLevel@1100528601(IFilterGroup@1100528601 : Code[20]);
    VAR
      ServDiscFilterGroupLine@1100528600 : Record 11071936;
    BEGIN
      CASE Level OF
        Level::Line,
        Level::Period,
        Level::"Object/Period":
          EXIT;
        Level::"Base Service Order":
          BEGIN
            ServDiscFilterGroupLine.SETRANGE(Code, IFilterGroup);
            ServDiscFilterGroupLine.SETFILTER(ServDiscFilterGroupLine."Table Type", '<>%1', ServDiscFilterGroupLine."Table Type"::"Service Order");
            IF NOT ServDiscFilterGroupLine.ISEMPTY THEN
              ERROR(Text001, IFilterGroup, Level);
          END;
      END;
    END;

    PROCEDURE GetDiscountPeriod@1100528602(ISeekDate@1100528600 : Date;ICorrected@1100528605 : Boolean;VAR ODiscountPeriodStart@1100528601 : Date;VAR ODiscountPeriodEnd@1100528602 : Date) : Boolean;
    VAR
      ServiceContract@1100528603 : Record 11012812;
      CurrentYear@1100528604 : Integer;
    BEGIN
      IF "Period Type" = "Period Type"::" " THEN
        EXIT(FALSE);
      IF FORMAT("Discount Period") = '' THEN
        EXIT(FALSE);
      CurrentYear := DATE2DMY(WORKDATE, 3);
      CASE "Period Type" OF
        "Period Type"::"Contract Discount Period":
          ODiscountPeriodStart := "Starting Date Discount";
        "Period Type"::"Calendar Year":
          ODiscountPeriodStart := DMY2DATE(1, 1, CurrentYear);
      END;
      IF ODiscountPeriodStart > ISeekDate THEN
        EXIT(FALSE);

      ODiscountPeriodEnd := CALCDATE("Discount Period", ODiscountPeriodStart) -1;
      WHILE ODiscountPeriodEnd < ISeekDate DO BEGIN
        ODiscountPeriodStart := ODiscountPeriodEnd +1;
        ODiscountPeriodEnd := CALCDATE("Discount Period", ODiscountPeriodStart) -1;
      END;
      IF NOT ServiceContract.GET("Service Contract No.") THEN
        ServiceContract.INIT;
      IF ICorrected THEN
        IF ODiscountPeriodStart < ServiceContract."Starting Date" THEN
          ODiscountPeriodStart := ServiceContract."Starting Date";
      EXIT(TRUE);
    END;

    PROCEDURE GetDiscountPeriodByServiceOrder@1100528604(IServiceOrder@1100528600 : Record 11012823;ICorrected@1100528603 : Boolean;VAR ODiscountPeriodStart@1100528601 : Date;VAR ODiscountPeriodEnd@1100528602 : Date) : Boolean;
    VAR
      SeekDate@1100528604 : Date;
    BEGIN
      SeekDate := GetSeekDate(IServiceOrder);
      EXIT(GetDiscountPeriod(SeekDate, ICorrected, ODiscountPeriodStart, ODiscountPeriodEnd));
    END;

    PROCEDURE GetSeekDate@1100528603(IServiceOrder@1100528600 : Record 11012823) : Date;
    BEGIN
      CASE "Based on" OF
        "Based on"::"Starting Date":
          IF IServiceOrder."Starting Date" <> 0D THEN
            EXIT(IServiceOrder."Starting Date")
          ELSE
            EXIT(IServiceOrder."Order Date");
        "Based on"::"Order Date":
          EXIT(IServiceOrder."Order Date");
      END;
    END;

    PROCEDURE GetProportionallyFactor@1100528607(ISeekDate@1100528601 : Date) : Decimal;
    VAR
      ServiceContract@1100528600 : Record 11012812;
      Date@1100528604 : Record 2000000007;
      DiscountPeriodStart@1100528602 : Date;
      DiscountPeriodEnd@1100528603 : Date;
      NoOfDaysDiscountPeriod@1100528605 : Integer;
    BEGIN
      IF NOT ServiceContract.GET("Service Contract No.") OR NOT Proportionally THEN
        EXIT(1);
      GetDiscountPeriod(ISeekDate, FALSE, DiscountPeriodStart, DiscountPeriodEnd);
      IF DiscountPeriodStart >= ServiceContract."Starting Date" THEN
        EXIT(1);
      Date.SETRANGE("Period Type", Date."Period Type"::Date);
      Date.SETRANGE("Period Start", DiscountPeriodStart, DiscountPeriodEnd);
      NoOfDaysDiscountPeriod := Date.COUNT;
      IF NoOfDaysDiscountPeriod = 0 THEN
        EXIT(0);
      Date.SETRANGE("Period Start", ServiceContract."Starting Date", DiscountPeriodEnd);
      EXIT(Date.COUNT/ NoOfDaysDiscountPeriod);
    END;

    PROCEDURE GetProportionallyFactorByServiceOrder@1100528605(IServiceOrder@1100528601 : Record 11012823) : Decimal;
    VAR
      ServiceContract@1100528600 : Record 11012812;
      Date@1100528604 : Record 2000000007;
      DiscountPeriodStart@1100528602 : Date;
      DiscountPeriodEnd@1100528603 : Date;
      NoOfDaysDiscountPeriod@1100528605 : Integer;
    BEGIN
      IF NOT ServiceContract.GET("Service Contract No.") OR NOT Proportionally THEN
        EXIT(1);
      GetDiscountPeriodByServiceOrder(IServiceOrder, FALSE, DiscountPeriodStart, DiscountPeriodEnd);
      IF DiscountPeriodStart >= ServiceContract."Starting Date" THEN
        EXIT(1);
      Date.SETRANGE("Period Type", Date."Period Type"::Date);
      Date.SETRANGE("Period Start", DiscountPeriodStart, DiscountPeriodEnd);
      NoOfDaysDiscountPeriod := Date.COUNT;
      IF NoOfDaysDiscountPeriod = 0 THEN
        EXIT(0);
      Date.SETRANGE("Period Start", ServiceContract."Starting Date", DiscountPeriodEnd);
      EXIT(Date.COUNT/ NoOfDaysDiscountPeriod);
    END;

    PROCEDURE GetRemainingBaseAmount@1100528606(ISeekDate@1100528600 : Date;IServiceObjectNo@1100528610 : Code[20]) : Decimal;
    VAR
      ServiceSetup@1100528604 : Record 11012800;
      ServiceOrder@1100528603 : Record 11012823;
      ServiceOrderCostPlusEntry@1100528606 : Record 11012825;
      ServiceCollectiveList@1100528608 : Record 11071730;
      DiscountPeriodStart@1100528602 : Date;
      DiscountPeriodEnd@1100528601 : Date;
      UsedBaseAmount@1100528605 : Decimal;
      RemainingBaseAmount@1100528607 : Decimal;
      ProportionallyFactor@1100528609 : Decimal;
    BEGIN
      IF NOT (Level IN [Level::Period, Level::"Object/Period"]) THEN
        EXIT(0);
      IF (Level = Level::"Object/Period") AND (IServiceObjectNo = '') THEN
        EXIT(0);
      IF "Invoice Base Method" <> "Invoice Base Method"::"total-base" THEN
        EXIT(0);
      IF NOT GetDiscountPeriod(ISeekDate, FALSE, DiscountPeriodStart, DiscountPeriodEnd) THEN
        EXIT;

      ServiceSetup.GET;

      ServiceOrder.SETRANGE("Service Contract No.", "Service Contract No.");
      ServiceOrder.SETFILTER(Status, '<%1', ServiceOrder.Status::Cancelled);
      ServiceOrder.SETRANGE("Settlement Method", ServiceOrder."Settlement Method"::"Cost Plus");
      ServiceOrder.SETRANGE("Charge Vendor (Warranty)", FALSE);
      GetDiscountPeriod(ISeekDate, FALSE, DiscountPeriodStart, DiscountPeriodEnd);
      CASE "Based on" OF
        "Based on"::" ",
        "Based on"::"Starting Date":
          BEGIN
            ServiceOrder.SETRANGE("Starting Date", DiscountPeriodStart, DiscountPeriodEnd);
            ServiceOrder.SETCURRENTKEY("Service Contract No.", Status, "Starting Date");
          END;
        "Based on"::"Order Date":
          BEGIN
            ServiceOrder.SETRANGE("Order Date", DiscountPeriodStart, DiscountPeriodEnd);
            ServiceOrder.SETCURRENTKEY("Service Contract No.", "Source Type", "Order Date");
          END;
      END;
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceOrderCostPlusEntry.SETCURRENTKEY("Service Order No.");
          ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", ServiceOrder."No.");
          IF IServiceObjectNo <> '' THEN
            ServiceOrderCostPlusEntry.SETRANGE("Object No.", IServiceObjectNo);
          ServiceOrderCostPlusEntry.SETRANGE("Cost Object", ServiceSetup."Cost Object Invoice Base");
          ServiceOrderCostPlusEntry.SETFILTER("Discount Term Level", '%1|%2|%3',
            ServiceOrderCostPlusEntry."Discount Term Level"::Period,
            ServiceOrderCostPlusEntry."Discount Term Level"::"Object/Period",
            ServiceOrderCostPlusEntry."Discount Term Level"::"Base Service Order");
          IF ServiceOrderCostPlusEntry.FINDSET THEN BEGIN
            REPEAT
              ServiceOrderCostPlusEntry.CALCFIELDS("Invoiced Price (LCY)", "Invoice in Process (LCY)", "Credit Memo in Process (LCY)");
              UsedBaseAmount -=
                (ServiceOrderCostPlusEntry."Invoiced Price (LCY)" +
                 ServiceOrderCostPlusEntry."Invoice in Process (LCY)" + ServiceOrderCostPlusEntry."Credit Memo in Process (LCY)");
              IF ServiceCollectiveList."No." <> ServiceOrderCostPlusEntry."Collective List No." THEN
                IF NOT ServiceCollectiveList.GET(ServiceOrderCostPlusEntry."Collective List No.") THEN
                  ServiceCollectiveList.INIT;
              IF (ServiceCollectiveList.Status = ServiceCollectiveList.Status::Released) AND ServiceOrderCostPlusEntry.Chargeable THEN
                UsedBaseAmount -= ServiceOrderCostPlusEntry."Invoice Price (LCY)";
            UNTIL ServiceOrderCostPlusEntry.NEXT = 0;
          END;
        UNTIL ServiceOrder.NEXT = 0;

      ProportionallyFactor := GetProportionallyFactor(ISeekDate);
      RemainingBaseAmount := "Invoice Base" * ProportionallyFactor - UsedBaseAmount;
      IF RemainingBaseAmount < 0 THEN
        RemainingBaseAmount := 0;
      EXIT(RemainingBaseAmount);
    END;

    LOCAL PROCEDURE TestPeriodTypeWithDiscountPeriod@1100528613();
    BEGIN
      IF ("Period Type" = "Period Type"::"Calendar Year") AND (FORMAT("Discount Period") <> '') THEN
        IF CALCDATE('<1Y>', TODAY) > CALCDATE("Discount Period", TODAY) THEN
          ERROR(Text002);
    END;

    BEGIN
    END.
  }
}

