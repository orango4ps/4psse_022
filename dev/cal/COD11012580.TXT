OBJECT Codeunit 11012580 Process Import Inspections
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11020579;
    OnRun=VAR
            SOPlantMaintenanceScheme@1100529000 : Record 11072210;
          BEGIN
            CASE Int1 OF
              DATABASE::"SO Plant Maintenance Scheme":  // Called from Web Service (create from Service Company in Plant Company)
                BEGIN
                  SOPlantMaintenanceScheme."Service Order No." := "Key Code1";
                  SOPlantMaintenanceScheme."Maintenance Scheme" := "Key Code4";
                  SOPlantMaintenanceScheme."Certificate No." := Code1;
                  SOPlantMaintenanceScheme."Certificate Date" := Date1;
                  SOPlantMaintenanceScheme."Inspected by" := Code2;
                  SOPlantMaintenanceScheme."Inspected on" := Date2;
                  SOPlantMaintenanceScheme."Inspection Location" := Code3;
                  SOPlantMaintenanceScheme."Report No." := Code4;
                  SOPlantMaintenanceScheme."Inspection Result" := Int2;
                  ServiceOrder_Process("Key Code2", "Key Code3", "Key Code5", SOPlantMaintenanceScheme);
                END;
            END;
          END;

  }
  CODE
  {
    VAR
      PlantTypeRec@1100485018 : Record 11012551;
      PlantNoRec@1100485019 : Record 11012552;
      InspectionTypeRec@1100485023 : Record 11012562;
      PlantInspecTypeRec@1100485020 : Record 11012563;
      InspectionRec@1100485021 : Record 11012564;
      EmplRec@1100485038 : Record 5200;
      TestResultRec@1100485008 : Record 11012537;
      TmpTestResultRec@1100485010 : TEMPORARY Record 11012537;
      TmpInspecErrorRec@1100485029 : TEMPORARY Record 11012564;
      SecutestPRXFormat@1100526001 : Record 11012650;
      SecutestPRXFormatField@1100526002 : Record 11012651;
      InspectedOn@1100485017 : Date;
      CertificateDate@1100485037 : Date;
      PATTextAllowed@1100485042 : Boolean;
      TestResultError@1100485028 : Boolean;
      TestDevice@1100485033 : Option;
      FirstErrorLineNo@1100485025 : Integer;
      LastErrorLineNo@1100485026 : Integer;
      LastUpdatedInspectionLino@1100485041 : Integer;
      InspectionType@1100485022 : Code[20];
      gInspectionType@1100485039 : Code[20];
      InspectedBy@1100485036 : Code[20];
      PlantType@1100485002 : Code[20];
      PlantNo@1100485003 : Code[10];
      MaintSchemeCode@1100529000 : Code[20];
      ReportNo@1100529001 : Code[20];
      InspectionLocation@1100529002 : Code[20];
      PlantTxt@1100485000 : Text[30];
      InspectedOnTxt@1100485001 : Text[30];
      Text000@1100485016 : TextConst 'DEU=Werkzeugart ''%1'' nicht gefunden.;ENU=Plant Type ''%1'' not found.;NLD=Materieelsoort ''%1'' niet gevonden.;NOR=Maskintype ''%1'' ikke funnet.;SVE=Maskintypen ''%1'' hittades inte.';
      Text001@1100485015 : TextConst 'DEU=Werkzeugart ''%1'' ist Masse.;ENU=Plant Type ''%1'' is bulk.;NLD=Materieelsoort ''%1'' is bulk.;NOR=Maskintype ''%1'' er bulk.;SVE=Maskintyp ''%1'' Ñr bulk.';
      Text002@1100485014 : TextConst 'DEU=Werkzeugnr. ''%1-%2'' nicht gefunden.;ENU=Plant Number ''%1-%2'' not found.;NLD=Materieelnummer ''%1-%2'' niet gevonden.;NOR=Maskinnr. ''%1Õ%2'' ikke funnet.;SVE=Maskinnr ''%1Õ%2'' hittades inte.';
      Text003@1100485013 : TextConst 'DEU=Inspektionstyp ''%1'' wurde nicht gefunden.;ENU=Inspection Type ''%1'' not found.;NLD=Keuringstype ''%1'' niet gevonden.;NOR=Inspeksjon Type %1 ikke funnet.;SVE=Inspektionstyp %1 hittades inte.';
      Text004@1100485012 : TextConst 'DEU=''%1'' ist kein Datum.;ENU=''%1'' is not a date.;NLD=''%1'' is geen datum.;NOR=%1'' er ikke en dato.;SVE=''%1'' Ñr inte ett datum.';
      Text005@1100485011 : TextConst 'DEU=Inspektionstyp ''%1'' unbekannt fÅr werkzeugart ''%2''.;ENU=Inspection Type ''%1'' unknown for Plant Type ''%2''.;NLD=Keuringstype ''%1'' onbekend voor materieelsoort ''%2''.;NOR=Inspeksjon Type ''%1'' er ukjent for maskintype ''%2''.;SVE=Inspektionstyp ''%1'' Ñr okÑnd fîr Maskinstyp ''%2''.';
      Text007@1100485009 : TextConst 'DEU=Von Werkzeugnr. ''%1-%2'' ist keine Lagermenge vorhanden.;ENU=No stock present for Plant Number ''%1-%2''.;NLD=Van materieelnummer ''%1-%2'' is geen voorraad aanwezig.;NOR=Det finnes ikke noe lager for maskinnr. ''%1-%2''.;SVE=Det finns inget lager fîr Maskinsnumret ''%1-%2''.';
      Text008@1100485031 : TextConst 'DEU=Leerer Inspektionstyp nicht gestattet.;ENU=Inspection Type empty not allowedmust be filled in.;NLD=Keuringstype leeg niet toegestaan.;NOR=Inspeksjon Type kan ikke stÜ tom, mÜ fylles ut.;SVE=Inspektionstyp fÜr inte vara tom utan mÜste fyllas i.';
      Text009@1100485007 : TextConst 'DEU=Inspiziert mit ''%1''.;ENU=Inspected with ''%1''.;NLD=Gekeurd met ''%1''.;NOR=Inspisert med ''%1''.;SVE=Inspekterad med ''%1''.';
      Text010@1100485006 : TextConst 'DEU=Inspektion von Werkzeugnr. ''%1-%2'' ''%3'' bereits am %4 vorhanden.;ENU=Inspection of Plant No.''%1-%2'' ''%3'' on %4  already exists.;NLD=Keuring van materieelnr. ''%1-%2'' ''%3''  op %4 bestaat reeds.;NOR=Inspeksjon av maskinnr. ''%1-%2'' ''%3'' av %4 finnes allerede.;SVE=Inspektion av Maskinsnummer ''%1-%2'' ''%3'' av %4 finns redan.';
      Text011@1100485005 : TextConst 'DEU=Bei der Verarbeitung wurden Fehler gefunden. Mîchten Sie diese ausdrucken?;ENU=Errors occurred while processing. Do you want to print these?;NLD=Bij het verwerken zijn fouten geconstateerd. Wilt u deze afdrukken?;NOR=Feil oppstod under prosessen. Vil du skrive ut disse?;SVE=Fel uppstod under bearbetningen. Vill du skriva ut dessa?';
      Text012@1100485004 : TextConst 'DEU=Werkzeugnr. ''%1-%2'' ist abgelehnt auf: %3.;ENU=Plant Number ''%1-%2'' is disapproved on: %3.;NLD=Materieelnummer ''%1-%2'' is afgekeurd op: %3.;NOR=Maskinnr. ''%1Õ%2'' ble ikke godkjent pÜ: %3.;SVE=Maskinnr ''%1Õ%2'' godkÑndes inte: %3.';
      InspectorName@1100529003 : Text;
      CommentTxt@1100485032 : Text[250];
      CertificateTxt@1100485034 : Text[30];
      CertificateDateTxt@1100485035 : Text[30];
      TestDeviceName@1100485027 : Text[30];
      MonthTextArray@1100485024 : ARRAY [12] OF Text[10];
      DisapprovalTxt@1100485030 : Text[100];
      Text013@1100485040 : TextConst 'DEU=Werkzeug wurde abgelehnt.;ENU=Plant is disapproved;NLD=Materieel is afgekeurd;NOR=Maskinen er ikke godkjent;SVE=Maskinen Ñr inte godkÑnd';
      HeaderColArray@1100528801 : ARRAY [18] OF Text[100];
      Counter@1100528800 : Integer;
      Text014@1100528802 : TextConst 'DEU=Inspektionsnr. ''%1'' nicht gefunden;ENU=Inspection No. ''%1'' not found;NLD=Keuringsnummer ''%1'' niet gevonden;NOR=Inspeksjon nr. ''%1'' ikke funnet';
      Text015@1100529900 : TextConst 'DEU=Werkzeug wurde abgelehnt. Der Status des Testes ist ''%1'';ENU=Plant is disapproved, the inspection status is ''%1'';NLD=Materieel is afgekeurd, de status van de test is ''%1'';NOR=Maskinen er ikke godkjendt, inspeksjonsstatus er ''%1'';SVE=Maskinen Ñr inte godkÑnd, inspektionsstatus Ñr ''%1''';

    PROCEDURE PATData_InitProcess@1100485013(IInspectionType@1100485000 : Code[20]);
    BEGIN
      //* Voor PAT-Data nog niet aangepast/ingebouwd want de structuur van XMLPort 11012556 wijkt af van de overige.
      //* Bovendien hebben we geen testbestand van dit testapparaat. Daarom (voorlopig) maar zo laten.

      //InitProcess(TestResultRec."Test Device"::"PAT Data", IInspectionType);
    END;

    PROCEDURE PATManager_InitProcess@1100485014(IInspectionType@1100485000 : Code[20]);
    BEGIN
      InitProcess(TestResultRec."Test Device"::"PAT Manager", IInspectionType);
    END;

    PROCEDURE PATManager_ProcessLine@1100485016(ITestLine@1100485000 : Text[500];IPlantTxt@1100485003 : Text[30];IInspectedOnTxt@1100485002 : Text[30];ITestStatus@1100485004 : Text[30];ICommentTxt@1100485001 : Text[250]);
    VAR
      HeaderTextCol@1100525000 : Text[30];
    BEGIN
      //*C-026793.o
      //IF IPlantTxt = 'Object ID' THEN  //* Kopregel met beschrijving kolommen (deze regel is niet altijd aanwezig)
      //  EXIT;
      //*C-026793.n   //* Not only 'Object ID' for first column header, can also be 'Testobject nr' or 'Testobject nummer'.
      HeaderTextCol := UPPERCASE(IPlantTxt);
      HeaderTextCol := DELCHR(HeaderTextCol, '=', ' ."');
      IF (STRPOS(HeaderTextCol, 'OBJECTID') <> 0) OR (STRPOS(HeaderTextCol, 'TESTOBJECTN') <> 0) THEN
        EXIT;  //* Skip header

      IF DELCHR(IPlantTxt, '<>') = '' THEN  //* Lege regel overslaan
        EXIT;

      DeleteTmpTestResultData();

      ITestLine := DELCHR(ITestLine, '<>');  //* Remove Leading and Trailing Spaces
      WriteTmpTestResultData('Object ID  : ' + IPlantTxt);        //* Zijn hier niet echt testwaarden, heeft geen zin om
      WriteTmpTestResultData('Teststatus : ' + ITestStatus);      //* nog meer testresultaten vast te leggen

      PlantTxt := IPlantTxt;
      PlantType := COPYSTR(PlantTxt, 1, STRLEN(PlantTxt) - 3);
      PlantNo := COPYSTR(PlantTxt, STRLEN(PlantTxt) - 2);
      PlantNoRec.GetPlantWithInspectionNo(PlantTxt, PlantType, PlantNo);
      InspectedOnTxt := IInspectedOnTxt;
      CommentTxt := ICommentTxt;
      CommentTxt := DELCHR(CommentTxt, '<>');
      IF ITestStatus = '' THEN ITestStatus := 'Goed';  //* Leeg is ook goed

      IF NOT PATManager_CheckErrors(ITestStatus) THEN
        WriteInspection();
      DeleteTmpTestResultData();
    END;

    PROCEDURE PATManager_CheckErrors@1100485017(ITestStatus@1100485001 : Text[30]) RetError@1210190000 : Boolean;
    VAR
      lvText001@1100485002 : TextConst 'DEU=Werkzeug wurde abgelehnt. Der Status des Testes ist ''%1'';ENU=Plant is disapproved, the inspection status is ''%1'';NLD=Materieel is afgekeurd, de status van de test is ''%1'';NOR=Maskinen er ikke godkjendt, inspeksjonsstatus er ''%1'';SVE=Maskinen Ñr inte godkÑnd, inspektionsstatus Ñr ''%1''';
    BEGIN
      RetError := FALSE;

      IF NOT EVALUATE(InspectedOn,InspectedOnTxt) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text004,InspectedOnTxt));
        RetError := TRUE;
      END;

      IF NOT PlantTypeRec.GET(PlantType) THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text000, PlantType));
        RetError := TRUE;
      END;
      IF PlantTypeRec.Bulk AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text001,PlantType));
        RetError := TRUE;
      END;

      //Strip zero one by one and check if plant no. exists
      WHILE (NOT RetError) AND (NOT PlantNoRec.GET(PlantType,PlantNo)) AND (COPYSTR(PlantNo,1,1) = '0') DO
        PlantNo := COPYSTR(PlantNo,2);
      IF NOT PlantNoRec.GET(PlantType,PlantNo) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text002,PlantType,PlantNo));
        RetError := TRUE;
      END;

      IF NOT RetError THEN BEGIN
        PlantNoRec.CALCFIELDS("Quantity in Stock");
        IF PlantNoRec."Quantity in Stock" <= 0 THEN BEGIN
          StoreMessage(PlantTxt, STRSUBSTNO(Text007,PlantType,PlantNo));
          RetError := TRUE;
        END;
      END;
      IF NOT PlantInspecTypeRec.GET(PlantType,InspectionType) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text005,InspectionType,PlantType));
        RetError := TRUE;
      END;

      IF ITestStatus <> 'Goed' THEN BEGIN  //* In principe worden alleen goedkeuringen aangeleverd, toch maar testen
        StoreMessage(PlantTxt, STRSUBSTNO(lvText001,ITestStatus));
        RetError := TRUE;
      END;

      IF NOT RetError THEN BEGIN
        InspectionRec.SETCURRENTKEY("Plant Type","Plant No.","Inspection Type","Inspected on");
        InspectionRec.SETRANGE("Plant Type",PlantType);
        InspectionRec.SETRANGE("Plant No.",PlantNo);
        InspectionRec.SETRANGE("Inspection Type",InspectionType);
        InspectionRec.SETRANGE("Inspected on",InspectedOn);
        InspectionRec.SETFILTER("Inspection Result", '%1|%2',
          InspectionRec."Inspection Result"::Approved, InspectionRec."Inspection Result"::"Exit Order");  //*18887
        IF InspectionRec.FINDFIRST THEN BEGIN
          StoreMessage(PlantTxt, STRSUBSTNO(Text010,PlantType,PlantNo,InspectionType,InspectedOn));
          RetError := TRUE;
        END;
      END;
    END;

    PROCEDURE MultiPATXE_InitProcess@1100485029(IInspectionType@1100485000 : Code[20]);
    BEGIN
      //* Bij MultiPAT (XE) is de lauoyt van het importbestand gelijk aan die van de PAT3140.
      //* Er zijn alleen een aantal extra tekstregels.
      //* Dus verder alle functie van PAT3140 gebruiken, 'PAT3140S_ProcessLine' is aangepast voor de tekstregels.

      InitProcess(TestResultRec."Test Device"::"MultiPAT (XE)", IInspectionType);
      PAT3140S_FillMonthArray();
    END;

    PROCEDURE MultiXA_InitProcess@1100528800(IInspectionType@1100485000 : Code[20]);
    BEGIN
      // dp00216.n
      InitProcess(TestResultRec."Test Device"::"Multiservicer XA", IInspectionType);
    END;

    PROCEDURE MultiXA_ProcessLine@1100528801(IPlantTxt@1100485003 : Text[30];IInspectedByTxt@1100525001 : Text;IInspectedOnTxt@1100485002 : Text[30];ITestStatus@1100485004 : Text[30];ILocationTxt@1100528801 : Text[30];ICommentTxt@1100485001 : Text[250];VAR ITestResult@1100528800 : ARRAY [18] OF Text[100]);
    VAR
      HeaderTextCol1@1100525000 : Text[30];
    BEGIN
      // dp00216.n
      HeaderTextCol1 := UPPERCASE(ITestStatus);
      HeaderTextCol1 := DELCHR(HeaderTextCol1, '=', ' ."');

      IF (HeaderTextCol1 = 'STATUS') THEN BEGIN
        COPYARRAY(HeaderColArray, ITestResult, 1);
        EXIT;  //* Skip header
      END;

      IF DELCHR(IPlantTxt, '<>') = '' THEN  //* Lege regel overslaan
        EXIT;

      DeleteTmpTestResultData();

      FOR Counter := 1 TO 18 DO
        WriteTmpTestResultDataGT(HeaderColArray[Counter], ITestResult[Counter]);

      PlantTxt := IPlantTxt;

      IF (STRPOS(IPlantTxt, '/') > 0) THEN
        PlantTxt := COPYSTR(IPlantTxt, 1, STRPOS(IPlantTxt, '/') - 1);

      PlantType := '';
      PlantNo := '';
      PlantNoRec.GetPlantWithInspectionNo(PlantTxt, PlantType, PlantNo);

      InspectedBy := '';
      IF (IInspectedByTxt <> '') AND (EmplRec.GET(IInspectedByTxt)) THEN
        InspectedBy := IInspectedByTxt
      ELSE
        InspectorName := IInspectedByTxt;
      InspectedOnTxt := IInspectedOnTxt;
      InspectionType := ILocationTxt;
      IF (InspectionType = '') AND (gInspectionType <> '') THEN
        InspectionType := gInspectionType;

      CommentTxt := ICommentTxt;
      CommentTxt := DELCHR(CommentTxt, '<>');
      IF ITestStatus = '' THEN ITestStatus := 'Goedgekeurd';  //* Leeg is ook goed

      IF NOT MultiXA_CheckErrors(ITestStatus) THEN
        WriteInspection();
      DeleteTmpTestResultData();
    END;

    PROCEDURE MultiXA_CheckErrors@1100528802(ITestStatus@1100485001 : Text[30]) RetError@1210190000 : Boolean;
    VAR
      lvText001@1100485002 : TextConst 'DEU=Werkzeug wurde abgelehnt. Der Status des Testes ist ''%1'';ENU=Plant is disapproved, the inspection status is ''%1'';NLD=Materieel is afgekeurd, de status van de test is ''%1'';NOR=Maskinen er ikke godkjendt, inspeksjonsstatus er ''%1'';SVE=Maskinen Ñr inte godkÑnd, inspektionsstatus Ñr ''%1''';
    BEGIN
      // dp00216.n
      RetError := FALSE;

      IF (PlantType = '') AND (PlantNo = '') THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text014, PlantTxt));
        RetError := TRUE;
        EXIT;
      END;

      IF NOT EVALUATE(InspectedOn,InspectedOnTxt) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text004,InspectedOnTxt));
        RetError := TRUE;
      END;

      IF NOT PlantTypeRec.GET(PlantType) THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text000, PlantType));
        RetError := TRUE;
      END;
      IF PlantTypeRec.Bulk AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text001,PlantType));
        RetError := TRUE;
      END;

      //Strip zero one by one and check if plant no. exists
      WHILE (NOT RetError) AND (NOT PlantNoRec.GET(PlantType,PlantNo)) AND (COPYSTR(PlantNo,1,1) = '0') DO
        PlantNo := COPYSTR(PlantNo,2);
      IF NOT PlantNoRec.GET(PlantType,PlantNo) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text002,PlantType,PlantNo));
        RetError := TRUE;
      END;

      IF NOT RetError THEN BEGIN
        PlantNoRec.CALCFIELDS("Quantity in Stock");
        IF PlantNoRec."Quantity in Stock" <= 0 THEN BEGIN
          StoreMessage(PlantTxt, STRSUBSTNO(Text007,PlantType,PlantNo));
          RetError := TRUE;
        END;
      END;
      IF NOT PlantInspecTypeRec.GET(PlantType,InspectionType) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text005,InspectionType,PlantType));
        RetError := TRUE;
      END;

      IF ITestStatus <> 'Goedgekeurd' THEN BEGIN  //* In principe worden alleen goedkeuringen aangeleverd, toch maar testen
        StoreMessage(PlantTxt, STRSUBSTNO(lvText001,ITestStatus));
        RetError := TRUE;
      END;

      IF NOT RetError THEN BEGIN
        InspectionRec.SETCURRENTKEY("Plant Type","Plant No.","Inspection Type","Inspected on");
        InspectionRec.SETRANGE("Plant Type",PlantType);
        InspectionRec.SETRANGE("Plant No.",PlantNo);
        InspectionRec.SETRANGE("Inspection Type",InspectionType);
        InspectionRec.SETRANGE("Inspected on",InspectedOn);
        InspectionRec.SETFILTER("Inspection Result", '%1|%2',
          InspectionRec."Inspection Result"::Approved, InspectionRec."Inspection Result"::"Exit Order");  //*18887
        IF InspectionRec.FINDFIRST THEN BEGIN
          StoreMessage(PlantTxt, STRSUBSTNO(Text010,PlantType,PlantNo,InspectionType,InspectedOn));
          RetError := TRUE;
        END;
      END;
    END;

    PROCEDURE PAT3140S_InitProcess@1100485009(IInspectionType@1100485000 : Code[20]);
    BEGIN
      InitProcess(TestResultRec."Test Device"::"PAT 3140S", IInspectionType);
      PAT3140S_FillMonthArray();
    END;

    PROCEDURE PAT3140S_FillMonthArray@1100485025();
    BEGIN
      MonthTextArray[1] := 'JAN';
      MonthTextArray[2] := 'FEB';
      MonthTextArray[3] := 'MRT';
      MonthTextArray[4] := 'APR';
      MonthTextArray[5] := 'MEI';
      MonthTextArray[6] := 'JUN';
      MonthTextArray[7] := 'JUL';
      MonthTextArray[8] := 'AUG';
      MonthTextArray[9] := 'SEP';
      MonthTextArray[10] := 'OKT';
      MonthTextArray[11] := 'NOV';
      MonthTextArray[12] := 'DEC';
    END;

    PROCEDURE PAT3140S_ProcessLine@1100485000(ITestLine@1100485000 : Text[500]);
    VAR
      lvText@1100485001 : Text[30];
    BEGIN
      ITestLine := DELCHR(ITestLine, '<');  //* Remove Leading Space

      IF COPYSTR(ITestLine,1,7) = 'TEST NU' THEN
        DeleteTmpTestResultData();
      WriteTmpTestResultData(ITestLine);

      CASE TRUE OF
        'TEST NU' = COPYSTR(ITestLine,1,7):
          BEGIN
            PlantTxt := '';
            InspectedOnTxt := '';
            TestResultError := FALSE;
            DisapprovalTxt := '';
            PATTextAllowed := FALSE;
          END;
        'DATUM' = COPYSTR(ITestLine,1,5):
          InspectedOnTxt := COPYSTR(ITestLine,9);
        'APP NR' = COPYSTR(ITestLine,1,6):
          BEGIN
            PlantTxt := COPYSTR(ITestLine,9);
            IF STRLEN(PlantTxt) <= 10 THEN BEGIN
              PlantType := COPYSTR(PlantTxt, 1, STRLEN(PlantTxt) - 3);
              PlantNo := COPYSTR(PlantTxt, STRLEN(PlantTxt) - 2);
            END ELSE BEGIN
               //* Er is ook en versie waarbij 'PlantNo' langer is dan 3 posities (min. 4 pos.)
               //* Materieelsoort max. 11 posities (recht uitgelijnd), materieelnr. begint op positie 12
              PlantType := COPYSTR(PlantTxt, 1, 11);
              PlantNo := COPYSTR(PlantTxt, 12);
            END;
            PlantNoRec.GetPlantWithInspectionNo(PlantTxt, PlantType, PlantNo);
          END;
        'VISUELE' = COPYSTR(ITestLine,1,7):
          IF (COPYSTR(ITestLine,18,1) = 'F') THEN BEGIN
            TestResultError := TRUE;
            FillDisapprovalText(COPYSTR(ITestLine,1,14));  //* Volledig: VISUELE CONTR.
          END;
        'AARD' = COPYSTR(ITestLine,1,4):
          IF (COPYSTR(ITestLine,18,1) = 'F') THEN BEGIN
            TestResultError := TRUE;
            FillDisapprovalText(COPYSTR(ITestLine,1,4));
          END;
        'ISO' = COPYSTR(ITestLine,1,3):
          IF (COPYSTR(ITestLine,18,1) = 'F') THEN BEGIN
            TestResultError := TRUE;
            FillDisapprovalText(COPYSTR(ITestLine,1,3));
          END;
        'A.LEK' = COPYSTR(ITestLine,1,5):
          IF (COPYSTR(ITestLine,18,1) = 'F') THEN  BEGIN
            TestResultError := TRUE;
            FillDisapprovalText(COPYSTR(ITestLine,1,5));
          END;
        'LEK STR' = COPYSTR(ITestLine,1,7):
          IF (COPYSTR(ITestLine,18,1) = 'F') THEN BEGIN
            TestResultError := TRUE;
            FillDisapprovalText(COPYSTR(ITestLine,1,7));
          END;
        'BELAST' = COPYSTR(ITestLine,1,6):
          IF (COPYSTR(ITestLine,18,1) = 'F') THEN BEGIN
            TestResultError := TRUE;
            FillDisapprovalText(COPYSTR(ITestLine,1,6));
          END;
        'GEBR.' = COPYSTR(ITestLine,1,5):
          BEGIN
            IF NOT PAT3140S_CheckErrors() THEN BEGIN
              WriteInspection();
              PATTextAllowed := TRUE;
            END;
            DeleteTmpTestResultData();
          END;
        'TEKST' = COPYSTR(ITestLine,1,5):
          BEGIN
            //* Bij de 'MultiPAT XE' tester kunnen direct na de eindtag 'GEBR.' nog een aantal tekstregels volgen
            //* Het aanmaken/bijwerken van de keuring is dan al geweest, daarom hier gelijk bijwerken.
            IF PATTextAllowed THEN BEGIN
              lvText := DELCHR(COPYSTR(ITestLine,9,20), '<>');  //* Tekst zal max 20 positie lang zijn
              IF (lvText <> '') THEN BEGIN
                IF InspectionRec.GET(PlantType, PlantNo, LastUpdatedInspectionLino) THEN BEGIN
                  IF InspectionRec.Comment = '' THEN
                    InspectionRec.Comment := lvText
                  ELSE
                    InspectionRec.Comment := COPYSTR(InspectionRec.Comment + ' ' + lvText, 1, MAXSTRLEN(InspectionRec.Comment));
                  InspectionRec.MODIFY;
                  WriteInspectionTestResultData();
                END;
              END;
              DeleteTmpTestResultData();
            END;
          END;
      END;

      IF PATTextAllowed THEN BEGIN
        IF (COPYSTR(ITestLine,1,5) <> 'GEBR.') AND (COPYSTR(ITestLine,1,5) <> 'TEKST') THEN
          PATTextAllowed := FALSE;
      END;
    END;

    PROCEDURE PAT3140S_CheckErrors@1210190000() RetError@1210190000 : Boolean;
    BEGIN
      PAT3140S_SubstMonthTextToNo(InspectedOnTxt);
      EXIT(CheckErrors);
    END;

    PROCEDURE PAT3140S_SubstMonthTextToNo@1210190014(VAR IODateTxt@1210190001 : Text[30]);
    VAR
      lPosMonthTxt@1210190000 : Integer;
      lCounter@1100485000 : Integer;
    BEGIN
      FOR lCounter := 1 TO 12 DO BEGIN
        lPosMonthTxt := STRPOS(IODateTxt, MonthTextArray[lCounter]);
        IF lPosMonthTxt > 0 THEN BEGIN
          IODateTxt := DELSTR(IODateTxt, lPosMonthTxt, 3);
          IODateTxt := INSSTR(IODateTxt, STRSUBSTNO('%1', lCounter), lPosMonthTxt);
          EXIT;
        END;
      END;
    END;

    PROCEDURE SECUTest_InitProcess@1100485019(IInspectionType@1100485000 : Code[20]);
    BEGIN
      InitProcess(TestResultRec."Test Device"::Secutest, IInspectionType);
      InspectedOnTxt := '';
    END;

    PROCEDURE SECUTest_ProcessLine@1100485018(ITestLine@1100485000 : Text[500]);
    BEGIN
      ITestLine := DELCHR(ITestLine, '<>');  //* Remove Spaces

      CASE TRUE OF
        'Datum: ' = COPYSTR(ITestLine,1,7):  //* Staat in kopregels van het bestand (dus niet bij elke keuring)
          InspectedOnTxt := COPYSTR(ITestLine,8,10);
        '--- toe' = COPYSTR(ITestLine,1,7):
          BEGIN
            DeleteTmpTestResultData();
            WriteTmpTestResultData(COPYSTR(ITestLine,5));
            CertificateTxt := '';
            PlantTxt := DELCHR(COPYSTR(ITestLine,17), '>','-');
            PlantType := COPYSTR(ITestLine,17,7);
            PlantNo := COPYSTR(ITestLine,24,3);
            PlantNo := DELCHR(PlantNo,'>','-');
            PlantNo := DELCHR(PlantNo,'>');
            PlantNoRec.GetPlantWithInspectionNo(PlantTxt, PlantType, PlantNo);
          END;
        '# Er we' = COPYSTR(ITestLine,1,7):
          BEGIN
            WriteTmpTestResultData(COPYSTR(ITestLine,3));
            CertificateTxt := COPYSTR(ITestLine,39,10);
            IF NOT SECUTest_CheckErrors() THEN
              WriteInspection();
            DeleteTmpTestResultData();
          END;
      END;
    END;

    PROCEDURE SECUTest_CheckErrors@1100485020() RetError@1210190000 : Boolean;
    BEGIN
      RetError := FALSE;

      IF NOT EVALUATE(InspectedOn,InspectedOnTxt) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text004,InspectedOnTxt));
        RetError := TRUE;
      END;

      IF NOT PlantTypeRec.GET(PlantType) THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text000, PlantType));
        RetError := TRUE;
      END;
      IF PlantTypeRec.Bulk AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text001,PlantType));
        RetError := TRUE;
      END;

      //Strip zero one by one and check if plant no. exists
      WHILE  (NOT RetError) AND (NOT PlantNoRec.GET(PlantType,PlantNo)) AND (COPYSTR(PlantNo,1,1) = '0') DO
        PlantNo := COPYSTR(PlantNo,2);
      IF NOT PlantNoRec.GET(PlantType,PlantNo) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text002,PlantType,PlantNo));
        RetError := TRUE;
      END;
      IF NOT RetError THEN BEGIN
        PlantNoRec.CALCFIELDS("Quantity in Stock");
        IF PlantNoRec."Quantity in Stock" <= 0 THEN BEGIN
          StoreMessage(PlantTxt, STRSUBSTNO(Text007,PlantType,PlantNo));
          RetError := TRUE;
        END;
      END;
      IF NOT PlantInspecTypeRec.GET(PlantType,InspectionType) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text005,InspectionType,PlantType));
        RetError := TRUE;
      END;

      IF NOT RetError THEN BEGIN
        InspectionRec.SETCURRENTKEY("Plant Type","Plant No.","Inspection Type","Inspected on");
        InspectionRec.SETRANGE("Plant Type",PlantType);
        InspectionRec.SETRANGE("Plant No.",PlantNo);
        InspectionRec.SETRANGE("Inspection Type",InspectionType);
        InspectionRec.SETRANGE("Inspected on",InspectedOn);
        InspectionRec.SETFILTER("Inspection Result", '%1|%2',
          InspectionRec."Inspection Result"::Approved, InspectionRec."Inspection Result"::"Exit Order");  //*18887
        IF InspectionRec.FINDFIRST THEN BEGIN
          StoreMessage(PlantTxt, STRSUBSTNO(Text010,PlantType,PlantNo,InspectionType,InspectedOn));
          RetError := TRUE;
        END;
      END;
    END;

    PROCEDURE SECUWindows_InitProcess@1100485024(IInspectionType@1100485000 : Code[20]);
    BEGIN
      InitProcess(TestResultRec."Test Device"::"Secutest Windows", IInspectionType);
    END;

    PROCEDURE SECUWindows_ProcessLine@1100485023(ITestLine@1100485000 : Text[500];IPlantTypeTxt@1100485003 : Text[20];IPlantNoTxt@1100485004 : Text[10];IInspectionType@1100485005 : Text[20];IInspectedOnTxt@1100485002 : Text[30];IInspectedBy@1100485006 : Text[20];ICertificateTxt@1100485007 : Text[20];ICertificateDateTxt@1100485008 : Text[20];IInspectResult@1100485009 : Text[30];ICommentTxt@1100485001 : Text[250]);
    BEGIN
      IF DELCHR(IPlantTypeTxt, '<>') = '' THEN  //* Lege regel overslaan
        EXIT;

      DeleteTmpTestResultData();

      ITestLine := DELCHR(ITestLine, '<>');  //* Remove Leading and Trailing Spaces

      PlantTxt := IPlantTypeTxt + IPlantNoTxt;
      PlantType := IPlantTypeTxt;
      PlantNo := IPlantNoTxt;
      PlantNoRec.GetPlantWithInspectionNo(PlantTxt, PlantType, PlantNo);
      InspectionType := IInspectionType;
      IF (InspectionType = '') AND (gInspectionType <> '') THEN
        InspectionType := gInspectionType;
      InspectedOnTxt := IInspectedOnTxt;
      InspectedBy := '';
      IF (IInspectedBy <> '') THEN BEGIN
        IF EmplRec.GET(IInspectedBy) THEN
          InspectedBy := IInspectedBy
        ELSE
          InspectorName := IInspectedBy;
      END;
      CertificateTxt := ICertificateTxt;
      CertificateDateTxt := ICertificateDateTxt;
      TestResultError := FALSE;
      IF DELCHR(IInspectResult, '<>') <> '1' THEN
        TestResultError := TRUE;
      CommentTxt := ICommentTxt;
      CommentTxt := DELCHR(CommentTxt, '<>');

      IF NOT SECUWindows_CheckErrors() THEN
        WriteInspection();
      DeleteTmpTestResultData();
    END;

    PROCEDURE SECUWindows_CheckErrors@1100485022() RetError@1210190000 : Boolean;
    BEGIN
      RetError := FALSE;

      IF NOT EVALUATE(InspectedOn,InspectedOnTxt) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text004,InspectedOnTxt));
        RetError := TRUE;
      END;
      IF NOT EVALUATE(CertificateDate,CertificateDateTxt) THEN
        CertificateDate := 0D;

      IF NOT PlantTypeRec.GET(PlantType) THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text000, PlantType));
        RetError := TRUE;
      END;
      IF PlantTypeRec.Bulk AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text001,PlantType));
        RetError := TRUE;
      END;

      //Strip zero one by one and check if plant no. exists
      WHILE (NOT RetError) AND (NOT PlantNoRec.GET(PlantType,PlantNo)) AND (COPYSTR(PlantNo,1,1) = '0') DO
        PlantNo := COPYSTR(PlantNo,2);
      IF NOT PlantNoRec.GET(PlantType,PlantNo) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text002,PlantType,PlantNo));
        RetError := TRUE;
      END;

      IF NOT RetError THEN BEGIN
        PlantNoRec.CALCFIELDS("Quantity in Stock");
        IF PlantNoRec."Quantity in Stock" <= 0 THEN BEGIN
          StoreMessage(PlantTxt, STRSUBSTNO(Text007,PlantType,PlantNo));
          RetError := TRUE;
        END;
      END;

      IF (NOT InspectionTypeRec.GET(InspectionType)) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text003,InspectionType));
        RetError := TRUE;
      END;
      IF NOT PlantInspecTypeRec.GET(PlantType,InspectionType) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text005,InspectionType,PlantType));
        RetError := TRUE;
      END;

      IF TestResultError AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text013));
        RetError := TRUE;
      END;

      IF NOT RetError THEN BEGIN
        InspectionRec.SETCURRENTKEY("Plant Type","Plant No.","Inspection Type","Inspected on");
        InspectionRec.SETRANGE("Plant Type",PlantType);
        InspectionRec.SETRANGE("Plant No.",PlantNo);
        InspectionRec.SETRANGE("Inspection Type",InspectionType);
        InspectionRec.SETRANGE("Inspected on",InspectedOn);
        InspectionRec.SETFILTER("Inspection Result", '%1|%2',
          InspectionRec."Inspection Result"::Approved, InspectionRec."Inspection Result"::"Exit Order");  //*18887
        IF InspectionRec.FINDFIRST THEN BEGIN
          StoreMessage(PlantTxt, STRSUBSTNO(Text010,PlantType,PlantNo,InspectionType,InspectedOn));
          RetError := TRUE;
        END;
      END;
    END;

    PROCEDURE SECUTestPRX_InitProcess@1100526000(InspectionType@1100485000 : Code[20];PRXFormatCode@1100526000 : Code[20]);
    BEGIN
      InitProcess(TestResultRec."Test Device"::"Secutest PRX",InspectionType);
      SECUTestPRX_GetPRXFormat(PRXFormatCode);
    END;

    PROCEDURE SECUTestPRX_ProcessLine@1100526001(TestLine@1100485000 : Text[1024]);
    VAR
      ApprovalCode@1100526000 : Code[20];
    BEGIN
      DeleteTmpTestResultData;
      DisapprovalTxt := '';

      PlantTxt := SECUTestPRX_GetFieldValue(TestLine,SecutestPRXFormat."Plant Test No. Field Index");
      PlantType := '';
      PlantNo := '';
      PlantNoRec.GetPlantWithInspectionNo(PlantTxt,PlantType,PlantNo);

      InspectedOnTxt := SECUTestPRX_GetFieldValue(TestLine,SecutestPRXFormat."Insp. Date Field Index");

      IF SecutestPRXFormatField.FINDFIRST THEN
        REPEAT
          //add fields here to keep funct parms the same
          TmpTestResultRec."Test Description" := SecutestPRXFormatField."Test Description";
          TmpTestResultRec."Print On Test Certificate" := SecutestPRXFormatField."Print On Test Certificate";
          WriteTmpTestResultData(
            DELCHR(SECUTestPRX_GetFieldValue(TestLine,SecutestPRXFormatField."Field Index"),
            '=',
            SecutestPRXFormatField."Skip Characters") );
        UNTIL SecutestPRXFormatField.NEXT = 0;

      ApprovalCode :=
        COPYSTR(
          SECUTestPRX_GetFieldValue(TestLine,SecutestPRXFormat."Insp. Result Field Index"),
          SecutestPRXFormat."Insp. Result Start Position",
          SecutestPRXFormat."Insp. Result Length");

      TestResultError := (ApprovalCode <> SecutestPRXFormat."Insp. Result OK Value");
      IF TestResultError THEN
        FillDisapprovalText(ApprovalCode);

      IF NOT CheckErrors THEN
        WriteInspection;
    END;

    PROCEDURE SECUTestPRX_GetStartRec@1100526002() : Text[30];
    BEGIN
      EXIT(SecutestPRXFormat."Rec. Start Delimiter");
    END;

    PROCEDURE SECUTestPRX_GetEndRec@1100526007() : Text[30];
    BEGIN
      EXIT(SecutestPRXFormat."Rec. End Delimiter");
    END;

    PROCEDURE SECUTestPRX_GetPRXFormat@1100526006(PRXFormatCode2@1100526000 : Code[20]);
    BEGIN
      SecutestPRXFormat.GET(PRXFormatCode2);

      SecutestPRXFormatField.SETRANGE("Format Code",SecutestPRXFormat.Code);

      SecutestPRXFormat.TESTFIELD("Rec. Start Delimiter");
      SecutestPRXFormat.TESTFIELD("Rec. End Delimiter");
      SecutestPRXFormat.TESTFIELD(SecutestPRXFormat."Field Delimiter");
    END;

    PROCEDURE SECUTestPRX_SkipFields@1000000000(Text2@1000000000 : Text[1024];NoOfFieldsToSkip@1000000001 : Integer) ResultText : Text[1024];
    BEGIN
      ResultText := Text2;

      REPEAT
        IF STRPOS(ResultText,SecutestPRXFormat."Field Delimiter") =  0 THEN BEGIN
          NoOfFieldsToSkip := 0;
          ResultText := '';
        END ELSE BEGIN
          ResultText := COPYSTR(ResultText,STRPOS(ResultText,SecutestPRXFormat."Field Delimiter"));
          ResultText := COPYSTR(ResultText,2);
          NoOfFieldsToSkip := NoOfFieldsToSkip - 1;
        END;
      UNTIL NoOfFieldsToSkip <= 0;

      EXIT(ResultText);
    END;

    PROCEDURE SECUTestPRX_GetFieldValue@1100526004(Text2@1000000000 : Text[1024];NoOfFieldsToSkip@1000000001 : Integer) ResultText : Text[1024];
    VAR
      DelimiterPos@1100526000 : Integer;
    BEGIN
      IF NoOfFieldsToSkip >= 1 THEN
        ResultText := SECUTestPRX_SkipFields(Text2,NoOfFieldsToSkip - 1)
      ELSE
        ResultText := Text2;

      DelimiterPos := STRPOS(ResultText,SecutestPRXFormat."Field Delimiter");
      IF DelimiterPos >= 1 THEN
        EXIT(COPYSTR(ResultText,1,DelimiterPos - 1))
      ELSE
        EXIT(ResultText);
    END;

    PROCEDURE EMRI_InitProcess@1100485001(IInspectionType@1100485000 : Code[20]);
    BEGIN
      //* EMRI is BNBM-specifiek (staat daarom ook niet in menu)
      InitProcess(TestResultRec."Test Device"::EMRI, IInspectionType);
    END;

    PROCEDURE EMRI_ProcessLine@1100485004(ITestLine@1100485000 : Text[500];IInspecLineNo@1100485005 : Integer);
    VAR
      lvLen@1100485006 : Integer;
      lvI@1100485007 : Integer;
    BEGIN
      ITestLine := DELCHR(ITestLine, '<>');

      IF IInspecLineNo = 1 THEN
        DeleteTmpTestResultData();
      WriteTmpTestResultData(ITestLine);

      CASE IInspecLineNo OF
        1:
          BEGIN
            PlantTxt := '';
            InspectedOnTxt := '';
            //* Op regel: Materieelnaam, Spatie, Materieelcode(X-XX-XX-XX-XXXX of X-XX-XX-XX-XXX) en eventueel
            //* gevolgd door UserId(-us-us). Voorbeeld: Mini 1-15-00-53-0999-kn-kn
            lvLen := STRLEN(ITestLine);
            IF lvLen >= 12 THEN BEGIN
              lvI := 1;  //* Niet 0, moet vanaf positie 2 testen op patroon van mintekens van de materieelcodering
              REPEAT
                lvI := lvI + 1;
                IF (COPYSTR(ITestLine, lvI, 1) = '-') AND (COPYSTR(ITestLine, lvI+3, 1) = '-') AND
                   (COPYSTR(ITestLine, lvI+6, 1) = '-') AND (COPYSTR(ITestLine, lvI+9, 1) = '-')
                THEN BEGIN
                  PlantTxt := COPYSTR(ITestLine,(lvI-1),15);
                  PlantTxt := DELCHR(PlantTxt, '>', '-');  //* Als laatste positie '-' dan weghalen (vlgn 3 pos. gevolgd UserId)
                END;
              UNTIL (lvI = (lvLen - 11)) OR (PlantTxt <> '');
            END;
            PlantTxt := DELCHR(PlantTxt, '<>');
            PlantType := COPYSTR(PlantTxt, 1, 10);
            PlantNo := COPYSTR(PlantTxt, 12);
            PlantType := DELCHR(PlantType, '<>');
            PlantType := DELCHR(PlantType, '=', '-');
            PlantNo := DELCHR(PlantNo, '<>');
            PlantNoRec.GetPlantWithInspectionNo(PlantTxt, PlantType, PlantNo);
          END;
        2:
          InspectedOnTxt := COPYSTR(ITestLine,1);
        ELSE
          IF COPYSTR(ITestLine,1,5) = '#####' THEN BEGIN
            IF NOT EMRI_CheckErrors() THEN
              WriteInspection();
            DeleteTmpTestResultData();
          END;
      END;
    END;

    PROCEDURE EMRI_CheckErrors@1100485011() RetError@1210190000 : Boolean;
    BEGIN
      RetError := FALSE;

      IF NOT PlantTypeRec.GET(PlantType) THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text000, PlantType));
        RetError := TRUE;
      END;
      IF PlantTypeRec.Bulk AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text001,PlantType));
        RetError := TRUE;
      END;

      //Strip zero one by one and check if plant no. exists
      WHILE (NOT RetError) AND (NOT PlantNoRec.GET(PlantType,PlantNo)) AND (COPYSTR(PlantNo,1,1) = '0') DO
        PlantNo := COPYSTR(PlantNo,2);
      IF NOT PlantNoRec.GET(PlantType,PlantNo) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text002,PlantType,PlantNo));
        RetError := TRUE;
      END;
      IF NOT RetError THEN BEGIN
        PlantNoRec.CALCFIELDS("Quantity in Stock");
        IF PlantNoRec."Quantity in Stock" <= 0 THEN BEGIN
          StoreMessage(PlantTxt, STRSUBSTNO(Text007,PlantType,PlantNo));
          RetError := TRUE;
        END;
      END;
      IF NOT PlantInspecTypeRec.GET(PlantType,InspectionType) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text005,InspectionType,PlantType));
        RetError := TRUE;
      END;

      IF NOT EVALUATE(InspectedOn,InspectedOnTxt) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text004,InspectedOnTxt));
        RetError := TRUE;
      END;

      //* Er hoeft niet getest te worden of keuringsresultaat goed is, er worden alleen files aangeleverd vanuit EMRI als
      //* het materieel is goedgekeurd.

      IF NOT RetError THEN BEGIN
        InspectionRec.SETCURRENTKEY("Plant Type","Plant No.","Inspection Type","Inspected on");
        InspectionRec.SETRANGE("Plant Type",PlantType);
        InspectionRec.SETRANGE("Plant No.",PlantNo);
        InspectionRec.SETRANGE("Inspection Type",InspectionType);
        InspectionRec.SETRANGE("Inspected on",InspectedOn);
        InspectionRec.SETFILTER("Inspection Result", '%1|%2',
          InspectionRec."Inspection Result"::Approved, InspectionRec."Inspection Result"::"Exit Order");  //*18887
        IF InspectionRec.FINDFIRST THEN BEGIN
          StoreMessage(PlantTxt, STRSUBSTNO(Text010,PlantType,PlantNo,InspectionType,InspectedOn));
          RetError := TRUE;
        END;
      END;
    END;

    PROCEDURE EMRI_GetFirstLastErrorLineNo@1100485005(VAR OFirstErrorLineNo@1100485001 : Integer;VAR OLastErrorLineNo@1100485000 : Integer);
    BEGIN
      OFirstErrorLineNo := FirstErrorLineNo;
      OLastErrorLineNo := LastErrorLineNo;
    END;

    PROCEDURE EMRI_SetFirstLastErrorLineNo@1100485007(IFirstErrorLineNo@1100485001 : Integer;ILastErrorLineNo@1100485000 : Integer);
    BEGIN
      FirstErrorLineNo := IFirstErrorLineNo;
      LastErrorLineNo := ILastErrorLineNo;
    END;

    PROCEDURE CertificateRegistration_Process@1100529000(PlantInspectionCertificate@1100529000 : Record 11229884;DocumentNo@1100529001 : Code[20]) : Integer;
    BEGIN
      //DP00899
      LastUpdatedInspectionLino := 0;
      TmpTestResultRec.RESET;
      TmpTestResultRec.DELETEALL;
      InitProcess(TestResultRec."Test Device"::"Certificate Registration", PlantInspectionCertificate."Inspection Type");

      PlantType := PlantInspectionCertificate."Plant Type";
      PlantNo := PlantInspectionCertificate."Plant No.";
      InspectedOn := PlantInspectionCertificate."Inspected on";
      InspectionTypeRec."Inspection Vendor" :=  PlantInspectionCertificate."Inspection Vendor";
      CertificateTxt := DocumentNo;
      CertificateDate := PlantInspectionCertificate."Document Date";
      CASE PlantInspectionCertificate."Inspection Result" OF
        PlantInspectionCertificate."Inspection Result"::Approved:
          WriteInspection();
        PlantInspectionCertificate."Inspection Result"::Disapproved:
          DisapproveInspection;
      END;
      EXIT(LastUpdatedInspectionLino);
    END;

    PROCEDURE ServiceOrder_Process@1100529001(PlantType2@1100529001 : Code[20];PlantNo2@1100529002 : Code[10];InspectionType2@1100529003 : Code[20];SOPlantMaintenanceScheme@1100529000 : Record 11072210) : Boolean;
    VAR
      ResourceWOP@1100529004 : Record 11229278;
    BEGIN
      InitProcess(TestResultRec."Test Device"::" ", InspectionType2);
      PlantType := PlantType2;
      PlantNo := PlantNo2;
      MaintSchemeCode := SOPlantMaintenanceScheme."Maintenance Scheme";
      CertificateTxt := SOPlantMaintenanceScheme."Certificate No.";
      CertificateDate := SOPlantMaintenanceScheme."Certificate Date";
      CommentTxt := SOPlantMaintenanceScheme.FIELDCAPTION("Service Order No.") + ': ' + SOPlantMaintenanceScheme."Service Order No.";
      IF SOPlantMaintenanceScheme."Inspected by" <> '' THEN BEGIN
        IF ResourceWOP.GET(SOPlantMaintenanceScheme."Inspected by") THEN BEGIN
          IF (ResourceWOP.Type = ResourceWOP.Type::Employee) AND (ResourceWOP."Source No." <> '') AND (ResourceWOP.Company = COMPANYNAME) THEN
            InspectedBy := ResourceWOP."Source No."
          ELSE
            InspectorName := ResourceWOP.Name;
        END;
      END;
      InspectedOn := SOPlantMaintenanceScheme."Inspected on";
      InspectionLocation := SOPlantMaintenanceScheme."Inspection Location";
      ReportNo := SOPlantMaintenanceScheme."Report No.";
      CASE SOPlantMaintenanceScheme."Inspection Result" OF
        SOPlantMaintenanceScheme."Inspection Result"::Approved:
          WriteInspection();
        SOPlantMaintenanceScheme."Inspection Result"::Disapproved:
          DisapproveInspection;
      ELSE
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE InitProcess@1100485021(ITestDevice@1100485001 : Option;IInspectionType@1100485000 : Code[20]);
    BEGIN
      FirstErrorLineNo := 0;
      LastErrorLineNo := 0;
      CertificateTxt := '';
      CertificateDate := 0D;
      InspectedBy := '';
      InspectorName := '';
      CommentTxt := '';
      MaintSchemeCode := '';
      InspectionLocation := '';
      ReportNo := '';

      TestDevice := ITestDevice;
      TestResultRec."Test Device" := TestDevice;
      TestDeviceName := STRSUBSTNO('%1', TestResultRec."Test Device");

      IF TestDevice IN
        [TestResultRec."Test Device"::"PAT Data",
        TestResultRec."Test Device"::"Secutest Windows"]
      THEN BEGIN
        InspectionType := IInspectionType;
        IF (InspectionType <> '') THEN
          CheckInspectionType(InspectionType);
      END ELSE BEGIN
        InspectionType := IInspectionType;
        CheckInspectionType(InspectionType);
      END;
      gInspectionType := InspectionType;

      TmpInspecErrorRec.RESET;
      TmpInspecErrorRec.DELETEALL;
    END;

    PROCEDURE CheckInspectionType@1100485015(IInspectionType@1100485000 : Code[20]);
    BEGIN
      IF (IInspectionType = '') THEN
        ERROR(Text008);

      IF NOT InspectionTypeRec.GET(IInspectionType) THEN
        ERROR(Text003,InspectionType);
    END;

    PROCEDURE FillDisapprovalText@1100526005(IText@1100485000 : Text[30]);
    VAR
      lvLen@1100485001 : Integer;
    BEGIN
      IText := DELCHR(IText, '>');  //* Remove Trailing Spaces
      lvLen := STRLEN(IText);
      IF lvLen = 0 THEN
        EXIT;

      IF DisapprovalTxt = '' THEN
        DisapprovalTxt := COPYSTR(IText,1,lvLen)
      ELSE BEGIN
        IF STRPOS(DisapprovalTxt, COPYSTR(IText,1,lvLen)) = 0 THEN
          DisapprovalTxt := DisapprovalTxt + ', ' + COPYSTR(IText,1,lvLen);
      END
    END;

    PROCEDURE CheckErrors@1100526003() RetError@1210190000 : Boolean;
    VAR
      lvErrorLineNo@1100485000 : Integer;
    BEGIN
      RetError := FALSE;

      IF NOT EVALUATE(InspectedOn,InspectedOnTxt) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text004,InspectedOnTxt));
        RetError := TRUE;
      END;

      //Strip zero one by one and check if plant type exists
      WHILE (NOT PlantTypeRec.GET(PlantType)) AND (COPYSTR(PlantType,1,1) = '0') DO
        PlantType := COPYSTR(PlantType,2);

      IF NOT PlantTypeRec.GET(PlantType) THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text000, PlantType));
        RetError := TRUE;
      END;
      IF PlantTypeRec.Bulk AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text001,PlantType));
        RetError := TRUE;
      END;

      //Strip zero one by one and check if plant no. exists
      WHILE  (NOT RetError) AND (NOT PlantNoRec.GET(PlantType,PlantNo)) AND (COPYSTR(PlantNo,1,1) = '0') DO
        PlantNo := COPYSTR(PlantNo,2);
      IF NOT PlantNoRec.GET(PlantType,PlantNo) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text002,PlantType,PlantNo));
        RetError := TRUE;
      END;
      IF NOT RetError THEN BEGIN
        PlantNoRec.CALCFIELDS("Quantity in Stock");
        IF PlantNoRec."Quantity in Stock" <= 0 THEN BEGIN
          StoreMessage(PlantTxt, STRSUBSTNO(Text007,PlantType,PlantNo));
          RetError := TRUE;
        END;
      END;
      IF NOT PlantInspecTypeRec.GET(PlantType,InspectionType) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text005,InspectionType,PlantType));
        RetError := TRUE;
      END;

      IF TestResultError THEN BEGIN
        //* No Message in this case. Most of the time a non-approved test is followed by an approved test.
        //* Nu wel weer een melding toevoegen, deze wordt weer verwijderd als in deze run mat hierna toch nog wordt goedgekeurd.
        lvErrorLineNo := StoreMessage(PlantTxt, STRSUBSTNO(Text012,PlantType,PlantNo,DisapprovalTxt));
        WriteTmpInspecError(PlantType, PlantNo, lvErrorLineNo);
        RetError := TRUE;
      END ELSE BEGIN
        DeleteTmpInspecError(PlantType, PlantNo);
      END;

      IF NOT RetError THEN BEGIN
        InspectionRec.SETCURRENTKEY("Plant Type","Plant No.","Inspection Type","Inspected on");
        InspectionRec.SETRANGE("Plant Type",PlantType);
        InspectionRec.SETRANGE("Plant No.",PlantNo);
        InspectionRec.SETRANGE("Inspection Type",InspectionType);
        InspectionRec.SETRANGE("Inspected on",InspectedOn);
        InspectionRec.SETFILTER("Inspection Result", '%1|%2',
          InspectionRec."Inspection Result"::Approved, InspectionRec."Inspection Result"::"Exit Order");  //*18887
        IF InspectionRec.FINDFIRST THEN BEGIN
          StoreMessage(PlantTxt, STRSUBSTNO(Text010,PlantType,PlantNo,InspectionType,InspectedOn));
          RetError := TRUE;
        END;
      END;
    END;

    PROCEDURE WriteInspection@1210190003();
    BEGIN
      InspectionRec.RESET;
      InspectionRec.SETRANGE("Plant Type",PlantType);
      InspectionRec.SETRANGE("Plant No.",PlantNo);
      InspectionRec.SETRANGE("Inspection Type",InspectionType);
      IF MaintSchemeCode <> '' THEN
        InspectionRec.SETRANGE("Maintenance Scheme",MaintSchemeCode);
      IF InspectionRec.FINDLAST THEN
        InspectionPresent
      ELSE
        InspectionNotPresent;
      InspectionRec.CreateNewInspections;
    END;

    PROCEDURE InspectionPresent@1210190010();
    BEGIN
      IF InspectionRec."Inspection Result" < InspectionRec."Inspection Result"::Approved THEN
        ApproveInspection
      ELSE
        ApproveNewInspection(TRUE);
    END;

    PROCEDURE InspectionNotPresent@1210190011();
    BEGIN
      ApproveNewInspection(FALSE);
    END;

    PROCEDURE ApproveNewInspection@1210190004(UsePrevValues@1100529000 : Boolean);
    VAR
      Inspection2@1100529001 : Record 11012564;
    BEGIN
      Inspection2 := InspectionRec;
      InspectionRec.INIT;
      InspectionRec."Plant Type" := PlantType;
      InspectionRec."Plant No." := PlantNo;
      InspectionRec."Inspection Type" := InspectionType;
      InspectionRec.Description := InspectionTypeRec.Description;
      InspectionRec."Inspected on" := InspectedOn;
      IF InspectedBy <> '' THEN BEGIN
        InspectionRec."Inspected by" := InspectedBy;
        InspectionRec.FillInspectorName;
      END ELSE BEGIN
        InspectionRec."Inspected by" := '';
        InspectionRec."Inspector Name" := InspectorName;
      END;
      InspectionRec."Inspection Result" := InspectionRec."Inspection Result"::Approved;
      InspectionRec."Inspection Vendor" := InspectionTypeRec."Inspection Vendor";
      IF CertificateTxt <> '' THEN BEGIN
        InspectionRec."Certificate No." := CertificateTxt;
        IF (CertificateDate <> 0D) THEN
          InspectionRec."Certificate Date" := CertificateDate
        ELSE
          InspectionRec."Certificate Date" := InspectedOn;
      END ELSE BEGIN
        IF (CertificateDate <> 0D) THEN
          InspectionRec."Certificate Date" := CertificateDate;
      END;
      { 'Gekeurd met' niet meer in comment zetten, er is nu veld 'Test Device'
      InspectionRec.Comment := STRSUBSTNO(Text009, TestDeviceName);
      IF (STRLEN(InspectionRec.Comment) + STRLEN(CommentTxt)) < MAXSTRLEN(InspectionRec.Comment) THEN
        InspectionRec.Comment := InspectionRec.Comment + '\'+ CommentTxt
      ELSE
        InspectionRec.Comment := CommentTxt;
      }
      InspectionRec."Test Device" := TestDevice;
      InspectionRec.Comment := CommentTxt;
      InspectionRec."Report No." := ReportNo;
      InspectionRec."Inspection Location" := InspectionLocation;
      InspectionRec."Maintenance Scheme" := MaintSchemeCode;
      IF UsePrevValues THEN BEGIN
        InspectionRec."Meter Reading Type" := Inspection2."Meter Reading Type";
        InspectionRec."Plant Meter" := Inspection2."Plant Meter";
        IF MaintSchemeCode = '' THEN
          InspectionRec."Maintenance Scheme" := Inspection2."Maintenance Scheme";
      END;

      InspectionRec.INSERT(TRUE);
      LastUpdatedInspectionLino := InspectionRec."Line No.";
      WriteInspectionTestResultData();
    END;

    PROCEDURE ApproveInspection@1210190005();
    BEGIN
      InspectionRec."Inspected on" := InspectedOn;
      IF InspectedBy <> '' THEN BEGIN
        InspectionRec."Inspected by" := InspectedBy;
        InspectionRec.FillInspectorName;
      END ELSE BEGIN
        InspectionRec."Inspected by" := '';
        InspectionRec."Inspector Name" := InspectorName;
      END;
      InspectionRec."Inspection Result" := InspectionRec."Inspection Result"::Approved;
      IF CertificateTxt <> '' THEN BEGIN
        InspectionRec."Certificate No." := CertificateTxt;
        IF (CertificateDate <> 0D) THEN
          InspectionRec."Certificate Date" := CertificateDate
        ELSE
          InspectionRec."Certificate Date" := InspectedOn;
      END ELSE BEGIN
        IF (CertificateDate <> 0D) THEN
          InspectionRec."Certificate Date" := CertificateDate;
      END;
      InspectionRec."Test Device" := TestDevice;
      InspectionRec.Comment := CommentTxt;
      InspectionRec."Report No." := ReportNo;
      InspectionRec."Inspection Location" := InspectionLocation;
      InspectionRec.MODIFY(TRUE);
      LastUpdatedInspectionLino := InspectionRec."Line No.";
      WriteInspectionTestResultData();
    END;

    LOCAL PROCEDURE DisapproveInspection@1100529005();
    BEGIN
      InspectionRec.RESET;
      InspectionRec.SETRANGE("Plant Type",PlantType);
      InspectionRec.SETRANGE("Plant No.",PlantNo);
      InspectionRec.SETRANGE("Inspection Type",InspectionType);
      IF MaintSchemeCode <> '' THEN
        InspectionRec.SETRANGE("Maintenance Scheme",MaintSchemeCode);
      IF InspectionRec.FINDLAST THEN BEGIN
        IF (InspectionRec."Inspection Result" < InspectionRec."Inspection Result"::Approved) THEN BEGIN
          InspectionRec."Inspected on" := InspectedOn;
          IF InspectedBy <> '' THEN BEGIN
            InspectionRec."Inspected by" := InspectedBy;
            InspectionRec.FillInspectorName;
          END ELSE BEGIN
            InspectionRec."Inspected by" := '';
            InspectionRec."Inspector Name" := InspectorName;
          END;
          InspectionRec."Inspection Result" := InspectionRec."Inspection Result"::Disapproved;
          InspectionRec."Inspection Vendor" := InspectionTypeRec."Inspection Vendor";
          InspectionRec."Test Device" := TestDevice;
          InspectionRec.Comment := CommentTxt;
          InspectionRec.MODIFY(TRUE);
          LastUpdatedInspectionLino := InspectionRec."Line No.";
        END;
      END;
    END;

    PROCEDURE WriteInspectionTestResultData@1100485006();
    VAR
      lvNextLineNo@1100485000 : Integer;
    BEGIN
      TmpTestResultRec.RESET;
      IF NOT TmpTestResultRec.FINDSET THEN
        EXIT;

      TestResultRec.RESET;
      TestResultRec.SETRANGE("Plant Type", InspectionRec."Plant Type");
      TestResultRec.SETRANGE("Plant No.", InspectionRec."Plant No.");
      TestResultRec.SETRANGE("Inspection Line No.", InspectionRec."Line No.");
      IF TestResultRec.FINDLAST THEN
        lvNextLineNo := TestResultRec."Line No." + 1
      ELSE
        lvNextLineNo := 1;

      REPEAT
        TestResultRec.INIT;
        TestResultRec."Plant Type" := InspectionRec."Plant Type";
        TestResultRec."Plant No." := InspectionRec."Plant No.";
        TestResultRec."Inspection Line No." := InspectionRec."Line No.";
        TestResultRec."Line No." := lvNextLineNo;
        TestResultRec."Inspection Text" := TmpTestResultRec."Inspection Text";
        TestResultRec."Test Description" := TmpTestResultRec."Test Description";
        TestResultRec."Print On Test Certificate" := TmpTestResultRec."Print On Test Certificate";
        TestResultRec."Test Device" := TmpTestResultRec."Test Device";
        TestResultRec.INSERT;
        lvNextLineNo := lvNextLineNo + 1;
      UNTIL TmpTestResultRec.NEXT = 0;
    END;

    PROCEDURE WriteTmpTestResultData@1100485002(ITestData@1100485000 : Text[500]);
    VAR
      lvText@1100485002 : Text[1024];
      lvMaxLen@1100485003 : Integer;
    BEGIN
      lvText := ITestData;
      lvText := DELCHR(lvText, '<>');
      lvMaxLen := MAXSTRLEN(TmpTestResultRec."Inspection Text");

      WHILE STRLEN(lvText) > 0 DO BEGIN
        TmpTestResultRec."Plant Type" := '';
        TmpTestResultRec."Plant No." := '';
        TmpTestResultRec."Inspection Line No." := 0;
        TmpTestResultRec."Line No." := TmpTestResultRec."Line No." + 1;
        TmpTestResultRec."Inspection Text" := COPYSTR(lvText, 1, lvMaxLen);
        lvText := COPYSTR(lvText, lvMaxLen + 1);
        TmpTestResultRec."Test Device" := TestDevice;
        TmpTestResultRec.INSERT;
      END;
    END;

    PROCEDURE WriteTmpTestResultDataGT@1100528803(TestDescription@1100528800 : Text[100];ITestData@1100485000 : Text[500]);
    VAR
      lvText@1100485002 : Text[1024];
      lvMaxLen@1100485003 : Integer;
    BEGIN
      // dp00216.n
      lvText := ITestData;
      lvText := DELCHR(lvText, '<>');
      lvMaxLen := MAXSTRLEN(TmpTestResultRec."Inspection Text");

      WHILE STRLEN(lvText) > 0 DO BEGIN
        TmpTestResultRec."Plant Type" := '';
        TmpTestResultRec."Plant No." := '';
        TmpTestResultRec."Inspection Line No." := 0;
        TmpTestResultRec."Line No." := TmpTestResultRec."Line No." + 1;
        TmpTestResultRec."Test Description" := COPYSTR(TestDescription, 1, 50);
        TmpTestResultRec."Inspection Text" := COPYSTR(lvText, 1, lvMaxLen);
        lvText := COPYSTR(lvText, lvMaxLen + 1);
        TmpTestResultRec."Test Device" := TestDevice;
        TmpTestResultRec.INSERT;
      END;
    END;

    PROCEDURE DeleteTmpTestResultData@1100485003();
    BEGIN
      TmpTestResultRec.RESET;
      TmpTestResultRec.DELETEALL;
      TmpTestResultRec."Line No." := 0;
    END;

    PROCEDURE WriteTmpInspecError@1100485010(IPlantType@1100485001 : Code[20];IPlantNo@1100485000 : Code[10];IErrorLineNo@1100485002 : Integer);
    BEGIN
      TmpInspecErrorRec."Plant Type" := IPlantType;
      TmpInspecErrorRec."Plant No." := IPlantNo;
      TmpInspecErrorRec."Line No." := IErrorLineNo;
      TmpInspecErrorRec.INSERT;
    END;

    PROCEDURE DeleteTmpInspecError@1100485012(IPlantType@1100485002 : Code[20];IPlantNo@1100485001 : Code[10]);
    VAR
      lvErrorRec@1100485000 : Record 11012051;
    BEGIN
      TmpInspecErrorRec.RESET;
      TmpInspecErrorRec.SETRANGE("Plant Type", PlantType);
      TmpInspecErrorRec.SETRANGE("Plant No.",PlantNo);
      IF TmpInspecErrorRec.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          IF lvErrorRec.GET(USERID, lvErrorRec."Source Type"::PlantTest, TmpInspecErrorRec."Line No.") THEN BEGIN
            IF lvErrorRec."Line No." = LastErrorLineNo THEN BEGIN
              IF LastErrorLineNo > FirstErrorLineNo THEN
                LastErrorLineNo := LastErrorLineNo - 1
              ELSE BEGIN
                FirstErrorLineNo := 0;
                LastErrorLineNo := 0;
              END;
            END;
            lvErrorRec.DELETE;
          END;
          TmpInspecErrorRec.DELETE;
        UNTIL TmpInspecErrorRec.NEXT = 0;
      END;
    END;

    PROCEDURE StoreMessage@1210190009(IDescription@1210190000 : Text[50];IErrorText@1210190001 : Text[250]) : Integer;
    VAR
      lvErrorRec@1100485000 : Record 11012051;
    BEGIN
      WITH lvErrorRec DO BEGIN
        SETRANGE("User ID", USERID);
        SETRANGE("Source Type", "Source Type"::PlantTest);
        IF FINDLAST THEN
          LastErrorLineNo := "Line No." + 1
        ELSE
          LastErrorLineNo := 1;

        IF FirstErrorLineNo = 0 THEN
          FirstErrorLineNo := LastErrorLineNo;

        INIT;
        "User ID" := USERID;
        "Source Type" := "Source Type"::PlantTest;
        "Line No." := LastErrorLineNo;
        "Posting Date" := InspectedOn;
        "Error message" := IErrorText;
        Description := IDescription;
        INSERT;

        EXIT(lvErrorRec."Line No.");
      END;
    END;

    PROCEDURE CheckPrintErrors@1100485030();
    VAR
      lvErrorRec@1100485000 : Record 11012051;
      lvReportErrors@1100525000 : Report 11012040;
    BEGIN
      IF LastErrorLineNo > 0 THEN BEGIN
        COMMIT;
        IF CONFIRM(Text011,TRUE) THEN BEGIN
          lvErrorRec.SETRANGE("User ID", USERID);
          lvErrorRec.SETRANGE("Source Type", lvErrorRec."Source Type"::PlantTest);
          lvErrorRec.SETRANGE("Line No.", FirstErrorLineNo, LastErrorLineNo);
          lvReportErrors.SETTABLEVIEW(lvErrorRec);
          lvReportErrors.RUNMODAL;
        END;
      END;
    END;

    PROCEDURE SecutestBase10_InitProcess@1100529902(IInspectionType@1100485000 : Code[20]);
    BEGIN
      InitProcess(TestResultRec."Test Device"::"Secutest (Base10)", IInspectionType);
    END;

    PROCEDURE SecutestBase10_ProcessLine@1100529901(ITestLine@1100485000 : Text[500];IPlantTxt@1100485003 : Text[30];IInspectedOnTxt@1100485002 : Text[30];ITestStatus@1100485004 : Text[30];ICommentTxt@1100485001 : Text[250]);
    VAR
      PlantSetup@1100529900 : Record 11012550;
      PlantTypeLength@1100529901 : Integer;
    BEGIN
      IF DELCHR(IPlantTxt, '<>') = '' THEN
        EXIT;

      DeleteTmpTestResultData();

      ITestLine := DELCHR(ITestLine, '<>');
      WriteTmpTestResultData('Object ID  : ' + IPlantTxt);
      WriteTmpTestResultData('Teststatus : ' + ITestStatus);

      PlantTxt := IPlantTxt;
      CLEAR(PlantType);
      CLEAR(PlantNo);
      PlantNoRec.GetPlantWithInspectionNo(PlantTxt, PlantType, PlantNo);
      IF (PlantType = '') AND (PlantNo = '') THEN BEGIN
        PlantSetup.GET;
        PlantTypeLength := PlantSetup."Level 1 Grouping No. of Char." + PlantSetup."Level 2 Grouping No. of Char." + PlantSetup."Level 3 Grouping No. of Char.";
        PlantType := COPYSTR(PlantTxt, 1, PlantTypeLength);
        PlantNo := COPYSTR(PlantTxt, PlantTypeLength + 1);
      END;
      InspectedOnTxt := IInspectedOnTxt;
      CommentTxt := DELCHR(ICommentTxt, '<>');

      IF NOT SecutestBase10_CheckErrors(ITestStatus) THEN
        WriteInspection();
      DeleteTmpTestResultData();
    END;

    PROCEDURE SecutestBase10_CheckErrors@1100529900(ITestStatus@1100485001 : Text[30]) RetError@1210190000 : Boolean;
    BEGIN
      RetError := FALSE;

      IF NOT EVALUATE(InspectedOn,InspectedOnTxt) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text004,InspectedOnTxt));
        RetError := TRUE;
      END;

      IF NOT PlantTypeRec.GET(PlantType) THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text000, PlantType));
        RetError := TRUE;
      END;
      IF PlantTypeRec.Bulk AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text001,PlantType));
        RetError := TRUE;
      END;

      WHILE (NOT RetError) AND (NOT PlantNoRec.GET(PlantType,PlantNo)) AND (COPYSTR(PlantNo,1,1) = '0') DO
        PlantNo := COPYSTR(PlantNo,2);
      IF NOT PlantNoRec.GET(PlantType,PlantNo) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text002,PlantType,PlantNo));
        RetError := TRUE;
      END;

      IF NOT RetError THEN BEGIN
        PlantNoRec.CALCFIELDS("Quantity in Stock");
        IF PlantNoRec."Quantity in Stock" <= 0 THEN BEGIN
          StoreMessage(PlantTxt, STRSUBSTNO(Text007,PlantType,PlantNo));
          RetError := TRUE;
        END;
      END;
      IF NOT PlantInspecTypeRec.GET(PlantType,InspectionType) AND NOT RetError THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text005,InspectionType,PlantType));
        RetError := TRUE;
      END;

      IF ITestStatus <> 'OK' THEN BEGIN
        StoreMessage(PlantTxt, STRSUBSTNO(Text015,ITestStatus));
        RetError := TRUE;
      END;

      IF NOT RetError THEN BEGIN
        InspectionRec.SETCURRENTKEY("Plant Type","Plant No.","Inspection Type","Inspected on");
        InspectionRec.SETRANGE("Plant Type",PlantType);
        InspectionRec.SETRANGE("Plant No.",PlantNo);
        InspectionRec.SETRANGE("Inspection Type",InspectionType);
        InspectionRec.SETRANGE("Inspected on",InspectedOn);
        InspectionRec.SETFILTER("Inspection Result", '%1|%2',
          InspectionRec."Inspection Result"::Approved, InspectionRec."Inspection Result"::"Exit Order");
        IF InspectionRec.FINDFIRST THEN BEGIN
          StoreMessage(PlantTxt, STRSUBSTNO(Text010,PlantType,PlantNo,InspectionType,InspectedOn));
          RetError := TRUE;
        END;
      END;
    END;

    BEGIN
    END.
  }
}

