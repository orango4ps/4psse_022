OBJECT Table 11012655 Returned Loss Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 PlantSetup.GET;
                 PlantSetup.TESTFIELD("Returned Loss Order Nos.");
                 NoSeriesMgt.InitSeries(PlantSetup."Returned Loss Order Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               "Return Date" := WORKDATE;
               Posted := FALSE;
               "Created by" := USERID;
               "Created on" := CURRENTDATETIME;

               //**4PS Generated Code. Do Not Change.sn05
               DPA_OnInsert;
               //**4PS Generated Code.en05
             END;

    OnModify=BEGIN
               TESTFIELD(Posted,FALSE);

               "Changed by" := USERID;
               "Changed on" := CURRENTDATETIME;
             END;

    OnDelete=BEGIN
               IF NOT DeleteAllowed THEN
                 ERROR(Text000,TABLECAPTION,"No.");

               ReturnOrderLineRec.RESET;
               ReturnOrderLineRec.SETRANGE("Returned Loss Order No.","No.");
               ReturnOrderLineRec.DELETEALL;

               OrderNoContactPlant.SETRANGE(Type, OrderNoContactPlant.Type::ReturnedLossOrder);
               OrderNoContactPlant.SETRANGE("Order No.", "No.");
               OrderNoContactPlant.DELETEALL;
             END;

    CaptionML=[ENU=Returned Loss Order;
               NOR=Returnert tapsordre;
               SVE=Returnerad f”rlustorder];
    PasteIsValid=No;
    LookupPageID=Page11072397;
  }
  FIELDS
  {
    { 10  ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  PlantSetup.GET;
                                                                  NoSeriesMgt.TestManual(PlantSetup."Returned Loss Order Nos.");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              NOR=Nr;
                                                              SVE=Nr] }
    { 20  ;   ;Exit Order No.      ;Code20        ;TableRelation="Exit Order" WHERE (Posted=CONST(Yes),
                                                                                     Type=CONST(Missing));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Exit Order Date");

                                                                IF "Exit Order No." <> xRec."Exit Order No." THEN BEGIN
                                                                  IF ReturnOrderLinesPresent() THEN
                                                                    FIELDERROR("Exit Order No.", Text004);

                                                                  CheckExitOrderNo();
                                                                  ExitOrderLineRec.RESET;
                                                                  ExitOrderLineRec.SETRANGE("Exit-order No.", "Exit Order No.");
                                                                  ExitOrderLineRec.SETRANGE(Bulk, FALSE);
                                                                  IF ExitOrderLineRec.ISEMPTY THEN
                                                                    ERROR(Text003, "Exit Order No.");
                                                                  ExitOrderLineRec.SETRANGE(Returned, ExitOrderLineRec.Returned::No);
                                                                  IF ExitOrderLineRec.ISEMPTY THEN
                                                                    ERROR(Text006, "Exit Order No.");

                                                                  Location := '';
                                                                  "Customer No." := '';
                                                                  "Bill-to Customer No." := '';
                                                                  //* Enter an exit order should be possible if location/customer is blocked/finished. If location/customer are validated here
                                                                  //* (also needed to fill other fields) then also the exit order is not allowed because of ERROR in OnValidate.
                                                                  //* So 'VALIDATE' is done via a codeunit with a 'IF' statement, so errors are suppressed.
                                                                  IF ExitOrderRec.Location <> '' THEN BEGIN
                                                                    Location := ExitOrderRec.Location;
                                                                    IF NOT CODEUNIT.RUN(CODEUNIT::"Returned Loss - On Exit Order", Rec) THEN
                                                                      Location := '';
                                                                  END ELSE BEGIN
                                                                    IF ExitOrderRec."Customer No." <> '' THEN BEGIN
                                                                      "Customer No." := ExitOrderRec."Customer No.";
                                                                      IF NOT CODEUNIT.RUN(CODEUNIT::"Returned Loss - On Exit Order", Rec) THEN
                                                                        "Customer No." := '';
                                                                    END;
                                                                  END;
                                                                  IF ("Return Date" <> 0D) AND ("Return Date" < "Exit Order Date") THEN
                                                                    "Return Date" := "Exit Order Date";
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupExitOrderNo();
                                                            END;

                                                   CaptionML=[ENU=Exit Order No.;
                                                              NOR=Sluttordrenr;
                                                              SVE=Slutordernr] }
    { 21  ;   ;Exit Order Date     ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Exit Order".Exit-date WHERE (No.=FIELD(Exit Order No.)));
                                                   CaptionML=[ENU=Exit Order Date;
                                                              NOR=Sluttordredato;
                                                              SVE=Slutorderdatum];
                                                   Editable=No }
    { 30  ;   ;Return Date         ;Date          ;OnValidate=BEGIN
                                                                CheckReturnDate();
                                                                CheckOrderDateAllowed();
                                                              END;

                                                   CaptionML=[ENU=Return Date;
                                                              NOR=Returdato;
                                                              SVE=Returdatum] }
    { 40  ;   ;Location            ;Code20        ;TableRelation="Plant Location";
                                                   OnValidate=BEGIN
                                                                IF Location <> '' THEN BEGIN
                                                                  CheckLocationCustBlock(FALSE);
                                                                  "Customer No." := PlantLocRec."Customer No.";
                                                                  IF PlantLocRec."Customer No." = '' THEN BEGIN
                                                                    Name := PlantLocRec.Description;
                                                                    "Name 2" := PlantLocRec."Description 2";
                                                                    Address := PlantLocRec.Address;
                                                                    "Address 2" := PlantLocRec."Address 2";
                                                                    City := PlantLocRec.City;
                                                                    "Post Code" := PlantLocRec."Post Code";
                                                                    County := PlantLocRec.County;
                                                                    "Country/Region Code" := PlantLocRec."Country/Region Code";
                                                                    Contact := PlantLocRec.Contact;
                                                                  END;
                                                                END;
                                                                VALIDATE("Customer No.");
                                                              END;

                                                   CaptionML=[ENU=Location;
                                                              NOR=Plassering;
                                                              SVE=Lagerst„lle] }
    { 50  ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF "Customer No." <> '' THEN BEGIN
                                                                  CheckLocationCustBlock(FALSE);
                                                                  Name := Customer.Name;
                                                                  "Name 2" := Customer."Name 2";
                                                                  Address := Customer.Address;
                                                                  "Address 2" := Customer."Address 2";
                                                                  City := Customer.City;
                                                                  "Post Code" := Customer."Post Code";
                                                                  County := Customer.County;
                                                                  "Country/Region Code" := Customer."Country/Region Code";
                                                                  Contact := Customer.Contact;
                                                                END ELSE
                                                                  Customer.INIT;

                                                                IF Customer."Bill-to Customer No." <> '' THEN
                                                                  VALIDATE("Bill-to Customer No.",Customer."Bill-to Customer No.")
                                                                ELSE
                                                                  VALIDATE("Bill-to Customer No.","Customer No.");
                                                              END;

                                                   CaptionML=[ENU=Customer No.;
                                                              NOR=Kundenr;
                                                              SVE=Kundnr] }
    { 60  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF "Bill-to Customer No." <> '' THEN BEGIN
                                                                  Customer.GET("Bill-to Customer No.");
                                                                  Customer.CheckBlockedCustOnDocs(Customer,1,FALSE,FALSE);
                                                                  Customer.TESTFIELD("Customer Posting Group");
                                                                  "Bill-to Name" := Customer.Name;
                                                                  "Bill-to Name 2" := Customer."Name 2";
                                                                  "Bill-to Address" := Customer.Address;
                                                                  "Bill-to Address 2" := Customer."Address 2";
                                                                  "Bill-to City" := Customer.City;
                                                                  "Bill-to Post Code" := Customer."Post Code";
                                                                  "Bill-to County" := Customer.County;
                                                                  "Bill-to Country/Region Code" := Customer."Country/Region Code";
                                                                  "Bill-to Contact" := Customer.Contact;
                                                                END ELSE
                                                                  IF "Customer No." <> '' THEN BEGIN
                                                                    Customer.GET("Customer No.");
                                                                    "Bill-to Name" := Customer.Name;
                                                                    "Bill-to Name 2" := Customer."Name 2";
                                                                    "Bill-to Address" := Customer.Address;
                                                                    "Bill-to Address 2" := Customer."Address 2";
                                                                    "Bill-to City" := Customer.City;
                                                                    "Bill-to Post Code" := Customer."Post Code";
                                                                    "Bill-to County" := Customer.County;
                                                                    "Bill-to Country/Region Code" := Customer."Country/Region Code";
                                                                    "Bill-to Contact" := Customer.Contact;
                                                                  END ELSE
                                                                    IF Location <> '' THEN BEGIN
                                                                      PlantLocRec.GET(Location);
                                                                      "Bill-to Name" := PlantLocRec.Description;
                                                                      "Bill-to Name 2" := PlantLocRec."Description 2";
                                                                      "Bill-to Address" := PlantLocRec.Address;
                                                                      "Bill-to Address 2" := PlantLocRec."Address 2";
                                                                      "Bill-to City" := PlantLocRec.City;
                                                                      "Bill-to Post Code" := PlantLocRec."Post Code";
                                                                      "Bill-to County" := PlantLocRec.County;
                                                                      "Bill-to Country/Region Code" := PlantLocRec."Country/Region Code";
                                                                      "Bill-to Contact" := PlantLocRec.Contact;
                                                                    END;
                                                              END;

                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              NOR=Faktura til-kundenr.;
                                                              SVE=Faktureringskundnr];
                                                   NotBlank=Yes }
    { 100 ;   ;Name                ;Text100       ;CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn] }
    { 101 ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              NOR=Navn 2;
                                                              SVE=Namn 2] }
    { 102 ;   ;Address             ;Text100       ;OnValidate=VAR
                                                                lDummy@1210190000 : Text[30];
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Address;
                                                              NOR=Adresse;
                                                              SVE=Adress] }
    { 103 ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              NOR=Adresse 2;
                                                              SVE=Adress 2] }
    { 104 ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              NOR=Postnr;
                                                              SVE=Postnr] }
    { 105 ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              NOR=Sted;
                                                              SVE=Ort] }
    { 106 ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              NOR=Delstat;
                                                              SVE=Delstat] }
    { 107 ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              NOR=Lands-/regionkode;
                                                              SVE=Lands-/regionkod] }
    { 110 ;   ;Contact             ;Text100       ;OnValidate=BEGIN
                                                                ContactRec.GetContactInfo(TRUE, Contact, "Contact Phone No.", "Mobile Phone No.", "E-mail", "Contact Name");
                                                              END;

                                                   CaptionML=[ENU=Contact;
                                                              NOR=Kontakt;
                                                              SVE=Kontakt] }
    { 120 ;   ;Bill-to Name        ;Text100       ;CaptionML=[ENU=Bill-to Name;
                                                              NOR=Faktura til-navn;
                                                              SVE=Faktureringsnamn] }
    { 121 ;   ;Bill-to Name 2      ;Text50        ;CaptionML=[ENU=Bill-to Name 2;
                                                              NOR=Faktura til-navn 2;
                                                              SVE=Faktureringsnamn 2] }
    { 122 ;   ;Bill-to Address     ;Text100       ;OnValidate=VAR
                                                                lDummy@1210190000 : Text[30];
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Bill-to Address;
                                                              NOR=Faktureringsadresse;
                                                              SVE=Faktureringsadress] }
    { 123 ;   ;Bill-to Address 2   ;Text50        ;CaptionML=[ENU=Bill-to Address 2;
                                                              NOR=Faktura til-adresse 2;
                                                              SVE=Faktureringsadress 2] }
    { 124 ;   ;Bill-to Post Code   ;Code20        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Bill-to City",
                                                                  "Bill-to Post Code",
                                                                  "Bill-to County",
                                                                  "Bill-to Country/Region Code",
                                                                  (CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to Post Code;
                                                              NOR=Faktura til-postnr.;
                                                              SVE=Faktureras postnr] }
    { 125 ;   ;Bill-to City        ;Text30        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Bill-to City",
                                                                  "Bill-to Post Code",
                                                                  "Bill-to County",
                                                                  "Bill-to Country/Region Code",
                                                                  (CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to City;
                                                              NOR=Faktureringsby;
                                                              SVE=Faktureras ort] }
    { 126 ;   ;Bill-to County      ;Text30        ;CaptionML=[ENU=Bill-to County;
                                                              NOR=Faktura til-fylke/delstat;
                                                              SVE=Faktureras delstat] }
    { 127 ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Bill-to Country/Region Code;
                                                              NOR=Kode for Faktureringsland/-Region;
                                                              SVE=Faktureringsland/-region] }
    { 130 ;   ;Bill-to Contact     ;Text100       ;CaptionML=[ENU=Bill-to Contact;
                                                              NOR=Faktura til-kontakt;
                                                              SVE=Faktureringskontakt] }
    { 140 ;   ;Created by          ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Created by;
                                                              NOR=Opprettet av;
                                                              SVE=Skapad av];
                                                   Editable=No }
    { 141 ;   ;Created on          ;DateTime      ;CaptionML=[ENU=Created on;
                                                              NOR=Opprettet den;
                                                              SVE=Skapades];
                                                   Editable=No }
    { 150 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              NOR=Nr-serie;
                                                              SVE=Nr-serie];
                                                   Editable=No }
    { 160 ;   ;Department Code     ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1, "Department Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              NOR=Avdelingskode;
                                                              SVE=Mottagande avdelningskod];
                                                   CaptionClass='1,1,1' }
    { 200 ;   ;Posted              ;Boolean       ;CaptionML=[ENU=Posted;
                                                              NOR=Bokf›rt;
                                                              SVE=Bokf”rd];
                                                   Editable=No }
    { 210 ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              NOR=Bokf›ringsdato;
                                                              SVE=Bokf”ringsdatum];
                                                   Editable=No }
    { 220 ;   ;Invoiced            ;Boolean       ;CaptionML=[ENU=Invoiced;
                                                              NOR=Fakturert;
                                                              SVE=Fakturerat] }
    { 230 ;   ;Invoice No.         ;Code20        ;TableRelation=IF (Invoice Status=CONST(Proposal)) "Sales Header".No. WHERE (Document Type=CONST(Invoice Proposal))
                                                                 ELSE IF (Invoice Status=CONST(Temporary)) "Sales Header".No. WHERE (Document Type=CONST(Invoice))
                                                                 ELSE IF (Invoice Status=CONST(Posted)) "Sales Invoice Header".No.;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Invoice No.;
                                                              NOR=Fakturanr.;
                                                              SVE=Fakturanummer];
                                                   Editable=No }
    { 240 ;   ;Invoice Status      ;Option        ;CaptionML=[ENU=Invoice Status;
                                                              NOR=Fakturastatus;
                                                              SVE=Fakturastatus];
                                                   OptionCaptionML=[ENU=,Proposal,Temporary,Posted;
                                                                    NOR=,Forslag,Midlertidig,Bokf›rt;
                                                                    SVE=,F”rslag,Tillf„lligt,Bokf”rt];
                                                   OptionString=,Proposal,Temporary,Posted;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 250 ;   ;Changed by          ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Changed by;
                                                              NOR=Endret av;
                                                              SVE=Žndrat av];
                                                   Editable=No }
    { 260 ;   ;Changed on          ;DateTime      ;CaptionML=[ENU=Changed on;
                                                              NOR=Endret den;
                                                              SVE=Žndrat den];
                                                   Editable=No }
    { 270 ;   ;Posted by           ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Posted by;
                                                              NOR=Bokf›rt av;
                                                              SVE=Bokf”rt av];
                                                   Editable=No }
    { 280 ;   ;Posted on           ;DateTime      ;CaptionML=[ENU=Posted on;
                                                              NOR=Bokf›rt den;
                                                              SVE=Bokf”rt den];
                                                   Editable=No }
    { 290 ;   ;E-mail              ;Text80        ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=E-Mail;
                                                              SVE=E-post] }
    { 300 ;   ;Contact Name        ;Text100       ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Contact Name;
                                                              SVE=Kontaktnamn] }
    { 310 ;   ;Contact Phone No.   ;Text30        ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Contact Phone No.;
                                                              SVE=Kontaktens telefonnr] }
    { 320 ;   ;Mobile Phone No.    ;Text30        ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Mobile Phone No.;
                                                              SVE=Mobiltelefonnr] }
    { 330 ;   ;Requested by (Contact);Text50      ;TableRelation=Contact;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Name Requested by (Contact)", "Phone No. Requested by (Cont.)", "Mob. Phone No. Req. by (Cont.)", "E-Mail Requested by (Contact)");
                                                              END;

                                                   CaptionML=ENU=Requested by (Contact) }
    { 340 ;   ;Name Requested by (Contact);Text100;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD("Requested by (Contact)")));
                                                   CaptionML=ENU=Name Requested by (Contact);
                                                   Editable=No }
    { 350 ;   ;Phone No. Requested by (Cont.);Text30;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Phone No." WHERE (No.=FIELD("Requested by (Contact)")));
                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. Requested by (Contact);
                                                   Editable=No }
    { 360 ;   ;Mob. Phone No. Req. by (Cont.);Text30;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Mobile Phone No." WHERE (No.=FIELD("Requested by (Contact)")));
                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Mobile Phone No. Requested by (Contact);
                                                   Editable=No }
    { 370 ;   ;E-Mail Requested by (Contact);Text80;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.E-Mail WHERE (No.=FIELD("Requested by (Contact)")));
                                                   CaptionML=ENU=Email Requested by (Contact);
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Invoice Status,Invoice No.               }
    {    ;Posted,Location,Invoiced,Return Date     }
    {    ;Location                                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@11012009 : TextConst 'ENU=%1 %2 is not deleted.;NOR=%1 %2 er ikke fjernet.;SVE=%1 %2 „r inte borttaget.';
      Text001@11012010 : TextConst 'ENU=%1 is not invoiced yet. Do you still want to delete the %1?;NOR=%1 er enda ikke fakturert. Vil du fortsatt fjerne %1?;SVE=%1 „r „nnu inte fakturerad. Vill du fortfarande ta bort %1?';
      Text002@11012011 : TextConst 'ENU=%1 is not invoiced completely. Do you still want to delete the %1?;NOR=%1 er enda ikke fullstendig fakturert. Vil du fortsatt fjerne %1?;SVE=%1 „r „nnu inte helt fakturerad. Vill du fortfarande ta bort %1?';
      PlantSetup@11012000 : Record 11012550;
      PlantLocRec@11012001 : Record 11012554;
      ExitOrderRec@11012002 : Record 11012559;
      ExitOrderLineRec@1100525001 : Record 11012560;
      PostCode@11012003 : Record 225;
      Customer@11012005 : Record 18;
      ReturnOrderRec@1100525000 : Record 11012655;
      ReturnOrderLineRec@11012006 : Record 11012656;
      ContactRec@1100527400 : Record 5050;
      OrderNoContactPlant@1100527401 : Record 11012536;
      NoSeriesMgt@11012008 : Codeunit 396;
      DimMgt@1100525008 : Codeunit 408;
      DPA_Management@1100000999 : Codeunit 11012783;
      Text003@1100525002 : TextConst 'ENU="No unique plant present on exit order ''%1''. ";NOR=Ingen unik maskin finnes p† Sluttordre ''%1''.;SVE="Ingen unik Maskin finns p† slutorder ''%1''. "';
      Text004@1100525003 : TextConst 'ENU=modify not allowed, already orderline(s) present;NOR=det er ikke tillatt † endre, ordrerad(er) finnes allerede;SVE=det „r inte till†tet att „ndra, orderrad(er) finns redan';
      Text005@1100525004 : TextConst 'ENU=may not be less than %1 ''%2'';NOR=kan ikke v‘re mindre enn %1 ''%2'';SVE=f†r inte vara mindre „n %1 ''%2''';
      Text006@1100525005 : TextConst 'ENU="Plant of exit order ''%1'' is already returned. ";NOR=Maskin for Sluttordre ''%1'' er allerede returnert.;SVE="Maskin f”r slutorder ''%1'' „r redan returnerad. "';
      SkipModify@1100528400 : Boolean;

    PROCEDURE AssistEdit@2(OldOrderRec@11012000 : Record 11012655) : Boolean;
    BEGIN
      WITH ReturnOrderRec DO BEGIN
        ReturnOrderRec := Rec;
        PlantSetup.GET;
        PlantSetup.TESTFIELD("Returned Loss Order Nos.");
        IF NoSeriesMgt.SelectSeries(PlantSetup."Returned Loss Order Nos.",OldOrderRec."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := ReturnOrderRec;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE DeleteAllowed@5() : Boolean;
    BEGIN
      IF NOT Posted THEN
        EXIT(TRUE);

      IF Location <> '' THEN BEGIN
        IF NOT PlantLocRec.GET(Location) THEN
          EXIT(TRUE);

        IF PlantLocRec.Depot THEN
          EXIT(TRUE);
      END;

      IF NOT Invoiced THEN BEGIN
        IF NOT CONFIRM(STRSUBSTNO(
          Text001,
          TABLECAPTION))
        THEN
          EXIT(FALSE);
      END ELSE
        IF "Invoice Status" IN ["Invoice Status"::Proposal,"Invoice Status"::"Temporary"] THEN
          IF NOT CONFIRM(STRSUBSTNO(
            Text002,TABLECAPTION))
          THEN
            EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE ReturnOrderLinesPresent@1100525001() : Boolean;
    BEGIN
      ReturnOrderLineRec.RESET;
      ReturnOrderLineRec.SETRANGE("Returned Loss Order No.", "No.");
      EXIT(NOT ReturnOrderLineRec.ISEMPTY);
    END;

    PROCEDURE CheckExitOrderNo@1100525003();
    BEGIN
      ExitOrderRec.GET("Exit Order No.");
      ExitOrderRec.TESTFIELD(Posted, TRUE);
      ExitOrderRec.TESTFIELD(Type, ExitOrderRec.Type::Missing);
    END;

    PROCEDURE CheckLocationCustBlock@1(Transaction@1210190000 : Boolean);
    BEGIN
      IF Location <> '' THEN BEGIN
        PlantLocRec.GET(Location);
        PlantLocRec.CheckBlock(1,FALSE,Transaction)
      END;

      IF "Customer No." <> '' THEN BEGIN
        Customer.GET("Customer No.");
        Customer.CheckBlockedCustOnDocs(Customer,1,FALSE,Transaction);
      END;
    END;

    PROCEDURE CheckReturnDate@1100525004();
    BEGIN
      IF "Return Date" = 0D THEN
        EXIT;
      CALCFIELDS("Exit Order Date");
      IF "Return Date" < "Exit Order Date" THEN
        FIELDERROR("Return Date", STRSUBSTNO(Text005, FIELDCAPTION("Exit Order Date"), "Exit Order Date"));
    END;

    PROCEDURE CheckOrderDateAllowed@1100525000();
    VAR
      lvLowerLimitDate@1100525000 : Date;
      lvUpperLimitDate@1100525001 : Date;
      lvText001@1100525002 : TextConst 'ENU=must be within the range %1..%2;NOR=m† v‘re innenfor intervallet %1..%2;SVE=m†ste vara inom intervallet %1..%2';
    BEGIN
      IF "Return Date" = 0D THEN
        EXIT;
      PlantSetup.GET;
      lvLowerLimitDate := PlantSetup.GetOrderDateLowerLimit(PlantSetup);
      lvUpperLimitDate := PlantSetup.GetOrderDateUpperLimit(PlantSetup);
      IF ("Return Date" < lvLowerLimitDate) OR ("Return Date" > lvUpperLimitDate) THEN
        FIELDERROR("Return Date", STRSUBSTNO(lvText001, lvLowerLimitDate, lvUpperLimitDate));
    END;

    PROCEDURE LookupExitOrderNo@1100409000();
    VAR
      ExitOrder@1100409000 : Record 11012559;
    BEGIN
      ExitOrder.SETRANGE(Type, ExitOrder.Type::Missing);
      ExitOrder."No." := "Exit Order No.";
      IF Posted THEN
        PAGE.RUNMODAL(PAGE::"Posted Exit Order List", ExitOrder)
      ELSE BEGIN
        IF PAGE.RUNMODAL(PAGE::"Posted Exit Order List", ExitOrder) = ACTION::LookupOK THEN
          VALIDATE("Exit Order No.", ExitOrder."No.");
      END;
    END;

    PROCEDURE LookupExitOrderLineList@1100525002();
    BEGIN
      ExitOrderLineRec.RESET;
      ExitOrderLineRec.SETRANGE("Exit Type", ExitOrderLineRec."Exit Type"::Missing);
      ExitOrderLineRec.SETRANGE(Type, ExitOrderLineRec.Type::Plant);
      ExitOrderLineRec.SETRANGE(Posted, TRUE);
      ExitOrderLineRec.SETRANGE(Bulk, FALSE);
      ExitOrderLineRec."Exit-order No." := "Exit Order No.";
      IF Posted THEN
        PAGE.RUNMODAL(PAGE::"Exit Order Line List", ExitOrderLineRec)
      ELSE BEGIN
        ExitOrderLineRec.SETRANGE(Returned, ExitOrderLineRec.Returned::No);
        IF PAGE.RUNMODAL(PAGE::"Exit Order Line List", ExitOrderLineRec) = ACTION::LookupOK THEN BEGIN
          IF (ExitOrderLineRec."Exit-order No." <> "Exit Order No.") AND (ExitOrderLineRec."Exit-order No." <> '') THEN
            VALIDATE("Exit Order No.", ExitOrderLineRec."Exit-order No.");
        END;
      END;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF NOT SkipModify THEN
        MODIFY;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_SetDefaultDpmtFromNoSeries@1100000995(xRecRef@1100525002 : RecordRef);
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      xRecRef.SETTABLE(xRec);
      DPA_Management.SetDepartmentCodeNoSeries(
        TABLENAME,
        "Department Code",
        "No. Series",
        xRec."No. Series" );
    END;

    LOCAL PROCEDURE DPA_OnInsert@1100000991();
    VAR
      Dimension1Code@1100528400 : Code[20];
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      Dimension1Code :=
        DPA_Management.GetNoSeriesDepartmentCode(
          "No. Series",
          xRec."No. Series",
          DATABASE::"Returned Loss Order");
      IF Dimension1Code <> '' THEN
        "Department Code" := Dimension1Code;

      IF "Department Code" <> '' THEN BEGIN
        SkipModify := TRUE;
        VALIDATE("Department Code");
        SkipModify := FALSE;
      END;
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012655) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012655');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Returned Loss Order", "Department Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Department Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Department Code");
    END;

    BEGIN
    END.
  }
}

