OBJECT Report 11012344 Update Recipe
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Aktualisieren Rezept;
               ENU=Update Recipes;
               NLD=Recepten bijwerken;
               NOR=Oppdater mal;
               SVE=Uppdatera mall];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   CheckCentralManagement;
                 END;

    UsageCategory=Tasks;
  }
  DATASET
  {
    { 4891;    ;DataItem;                    ;
               DataItemTable=Table11020582;
               DataItemTableView=SORTING(Recipe Group,Recipe);
               OnPreDataItem=BEGIN
                               RemoveMessage;
                               StartUpdate;
                               ShowMessage;
                               CurrReport.BREAK;
                             END;

               ReqFilterFields=Recipe Group,Recipe }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100528933;0;Container;
                  ContainerType=ContentArea }

      { 1100528932;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1100528931;2;Field  ;
                  CaptionClass=Text19016772;
                  Style=Strong;
                  StyleExpr=TRUE }

      { 1100528929;2;Field  ;
                  Name=ActNorm;
                  CaptionML=[DEU=Aktualisieren Norm;
                             ENU=Update Norm;
                             NLD=Bijwerken norm;
                             NOR=Oppdater norm;
                             SVE=Uppdatera norm];
                  SourceExpr=ActNorm }

      { 1100528928;2;Field  ;
                  Name=ActPrice;
                  CaptionML=[DEU=Aktualisieren Preis;
                             ENU=Update Price;
                             NLD=Bijwerken prijs;
                             NOR=Oppdater pris;
                             SVE=Uppdatera pris];
                  SourceExpr=ActPrice }

      { 1100528927;2;Field  ;
                  Name=PriceMethod;
                  CaptionML=[DEU=Berechnen Preis und Rabatt;
                             ENU=Calculate Price and Discount;
                             NLD=Berekenen prijs en korting;
                             NOR=Beregn pris og rabatt;
                             SVE=BerÑkna pris och rabatt];
                  OptionCaptionML=[DEU=Bruttopreis aktualisieren + Rabattprozentsatz + Nettopreis,Bruttopreis aktualisieren + Rabattprozentsatz festlegen+ Nettopreis berechnen,Bruttopreis festlegen + Rabattprozentsatz aktualisieren + Nettopreis berechnen,Bruttopreis festlegen + Rabattprozentsatz berechnen + Nettopreis aktualisieren,Bruttopreis berechnen + Rabattprozentsatz festlegen + Nettopreis aktualisieren;
                                   ENU=Update Gross Price + Discount Percentage + Net Price,Update Gross Price + Fix Discount Percentage + Calculate Net Price,Fix Gross Price + Update Discount Percentage + Calculate Net Price, Fix Gross Price + Calculate Discount Percentage + Update Net Price, Calculate Gross Price + Fix Discount Percentage + Update Net Price;
                                   NLD=Actualiseren brutoprijs + kortingspercentage + nettoprijs,Actualiseren brutoprijs + vasthouden kortingspercentage + berekenen nettoprijs,Vasthouden brutoprijs + actualiseren kortingspercentage + berekenen nettoprijs,Vasthouden brutoprijs + berekenen kortingspercentage + actualiseren nettoprijs,Berekenen brutoprijs + vasthouden kortingspercentage + actualiseren nettoprijs];
                  SourceExpr=PriceMethod }

      { 1100528900;2;Field  ;
                  Name=ActRate;
                  CaptionML=[DEU=Tarif aktualisieren;
                             ENU=Actualise Rate;
                             NLD=Actualiseren tarief];
                  SourceExpr=ActRate }

      { 1100528501;2;Field  ;
                  Name=ActSubcActivity;
                  CaptionML=[DEU=Aktualisieren Subunternehmer-AktivitÑt;
                             ENU=Update Subcontracting Activity;
                             NLD=Bijwerken onderaannemingsactiviteit];
                  SourceExpr=ActSubcActivity }

      { 1100528922;2;Field  ;
                  Name=ActPlantPrice;
                  CaptionML=[DEU=Aktualisieren Werkzeugpreis;
                             ENU=Update Plant Price;
                             NLD=Bijwerken materieelprijs;
                             NOR=Oppdater maskinpris;
                             SVE=Uppdatera Maskinspris];
                  SourceExpr=ActPlantPrice }

      { 1100528925;2;Field  ;
                  Name=ActSubOper;
                  CaptionML=[DEU=Aktualisieren Subarbeitsgang;
                             ENU=Update Sub Operation;
                             NLD=Bijwerken subbewerking;
                             NOR=Oppdater underinnsats;
                             SVE=Uppdatera underinsats];
                  SourceExpr=ActSubOper }

      { 1100528924;2;Field  ;
                  Name=ActCostObject;
                  CaptionML=[DEU=Aktualisieren KostentrÑger;
                             ENU=Update Cost Object;
                             NLD=Bijwerken kostendrager;
                             NOR=Oppdater kostobjekt;
                             SVE=Uppdatera kostnadsobjekt];
                  SourceExpr=ActCostObject }

      { 1100528923;2;Field  ;
                  Name=ActDesc;
                  CaptionML=[DEU=Aktualisieren Beschreibung;
                             ENU=Update Description;
                             NLD=Bijwerken omschrijving;
                             NOR=Oppdater Beskrivelse;
                             SVE=Uppdatera beskrivning];
                  SourceExpr=ActDesc }

      { 1100528921;2;Field  ;
                  Name=<Control11p00528921>;
                  CaptionClass=Text19003146;
                  Style=Strong;
                  StyleExpr=TRUE }

      { 1100528920;2;Field  ;
                  Name=PercNorm;
                  CaptionML=[DEU=Norm;
                             ENU=Norm;
                             NLD=Norm;
                             NOR=Norm;
                             SVE=Norm];
                  SourceExpr=PercNorm }

      { 1100528919;2;Field  ;
                  Name=PercItem;
                  CaptionML=[DEU=Material;
                             ENU=Material;
                             NLD=Materiaal;
                             NOR=Materialee;
                             SVE=Material];
                  SourceExpr=PercItem }

      { 1100528918;2;Field  ;
                  Name=PercSubc;
                  CaptionML=[DEU=Fremdarbeit;
                             ENU=Subcontracting;
                             NLD=Onderaanneming;
                             NOR=Underentrepenõr;
                             SVE=UE];
                  SourceExpr=PercSubc }

      { 1100528917;2;Field  ;
                  Name=PercEqmt;
                  CaptionML=[DEU=Werkzeug;
                             ENU=Plant;
                             NLD=Materieel;
                             NOR=Maskin;
                             SVE=Maskin];
                  SourceExpr=PercEqmt }

      { 1100528916;2;Field  ;
                  Name=PercSundry;
                  CaptionML=[DEU=öbriges;
                             ENU=Sundry;
                             NLD=Overig;
                             NOR=Diverse;
                             SVE=Diverse];
                  SourceExpr=PercSundry }

      { 1100528901;2;Field  ;
                  Name=CalcRemovalContribution;
                  CaptionML=[DEU=Entfernung berechnen;
                             ENU=Calculate Removal Contribution;
                             NLD=Verwijderingsbijdrage berekenen;
                             NOR=Beregn Fjerningsbidrag;
                             SVE=BerÑkna borttagningsbidrag];
                  SourceExpr=CalcRemovalContribution }

      { 1100528902;2;Field  ;
                  Name=InitAdjFact;
                  CaptionML=[DEU=Korrekturfaktor initialisieren;
                             ENU=Initialise Adjustment Factor;
                             NLD=Initialiseren correctiefactor];
                  SourceExpr=InitAdjFact }

      { 1100528903;2;Field  ;
                  Name=ActItemRelation;
                  CaptionML=[DEU=Handelsartikel Åber Artikelbeziehung prÅfen;
                             ENU=Renew Trade Item via Item Relation;
                             NLD=Bijwerken handelsartikel o.b.v. artikelrelatie];
                  SourceExpr=ActItemRelation }

      { 1100528909;2;Field  ;
                  Name=ReplaceVendor;
                  CaptionML=[DEU=Bevorzugten Kreditor ersetzen;
                             ENU=Replace Preferred Vendor;
                             NLD=Vervangen voorkeursleverancier];
                  SourceExpr=ReplaceVendor }

      { 1100528908;2;Field  ;
                  Name=OldVendor;
                  CaptionML=[DEU=Kreditor alt;
                             ENU=Vendor (Old);
                             NLD=Leverancier (oud);
                             NOR=Leverandõr (gammel);
                             SVE=Leverantîr (gammal)];
                  SourceExpr=OldVendor;
                  TableRelation="ETIM Vendor - Central Mgt";
                  OnValidate=BEGIN
                               ValidateOldVendor;
                             END;
                              }

      { 1100528907;2;Field  ;
                  Name=NewVendor;
                  CaptionML=[DEU=Kreditor (Handelsartikel);
                             ENU=Vendor (New);
                             NLD=Leverancier (nieuw);
                             NOR=Leverandõr (ny);
                             SVE=Leverantîr (ny)];
                  SourceExpr=NewVendor;
                  TableRelation="ETIM Vendor - Central Mgt";
                  OnValidate=BEGIN
                               ValidateNewVendor;
                             END;
                              }

      { 1100528910;2;Field  ;
                  Name=ActStdOption;
                  CaptionML=[DEU=Standardoption aktualisieren;
                             ENU=Update Standard Option;
                             NLD=Bijwerken standaard optie];
                  OptionCaptionML=[DEU=" ,Aktualisieren,Ersetzen";
                                   ENU=" ,Update,Replace";
                                   NLD=" ,Bijwerken,Vervangen";
                                   NOR=" ,Oppdater,Erstatt";
                                   SVE=" ,Uppdatera,ErsÑtt"];
                  SourceExpr=ActStdOption }

      { 1100528911;2;Field  ;
                  Name=ActPrjOption;
                  CaptionML=[DEU=Projektoption aktualisieren;
                             ENU=Update Project Option;
                             NLD=Bijwerken project optie;
                             NOR=Prosjektalternativ;
                             SVE=Projektalternativ];
                  OptionCaptionML=[DEU=" ,Aktualisieren,Ersetzen";
                                   ENU=" ,Update,Replace";
                                   NLD=" ,Bijwerken,Vervangen";
                                   NOR=" ,Oppdater,Erstatt";
                                   SVE=" ,Uppdatera,ErsÑtt"];
                  SourceExpr=ActPrjOption }

      { 1100528912;2;Field  ;
                  Name=ActEstRcp;
                  CaptionML=[DEU=Kalkulation aktualisieren;
                             ENU=Update Estimate;
                             NLD=Bijwerken calculatie;
                             NOR=Oppdater kalkyle;
                             SVE=Uppdatera kalkyl];
                  OptionCaptionML=[DEU=" ,Aktualisieren,Ersetzen";
                                   ENU=" ,Update,Replace";
                                   NLD=" ,Bijwerken,Vervangen";
                                   NOR=" ,Oppdater,Erstatt";
                                   SVE=" ,Uppdatera,ErsÑtt"];
                  SourceExpr=ActEstRcp;
                  OnValidate=BEGIN
                               IF ActEstRcp = ActEstRcp::" " THEN EstFilter := '';  //db, 15-03-17
                             END;
                              }

      { 1100528914;2;Field  ;
                  Name=EstFilter;
                  CaptionML=[DEU=Kalkulationsfilter;
                             ENU=Estimate Filter;
                             NLD=Calculatiefilter;
                             NOR=Kalkyle;
                             SVE=Kalkyl];
                  SourceExpr=EstFilter;
                  OnValidate=BEGIN
                               ValidateEstimate;
                             END;

                  OnLookup=BEGIN
                             LookupEstimate;
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      EstRec@1100525049 : Record 11012151;
      RecipeRec@1100525046 : Record 11020581;
      PlantTypeRec@1100525043 : Record 11012551;
      TempRec@1100525054 : TEMPORARY Record 11020582;
      ActDesc@1100525028 : Boolean;
      ActNorm@1100525027 : Boolean;
      ActPrice@1100525026 : Boolean;
      ActPlantPrice@1100525025 : Boolean;
      ActRate@1100525024 : Boolean;
      ActSubOper@1100525023 : Boolean;
      ActCostObject@1100525022 : Boolean;
      ActItemRelation@1100525040 : Boolean;
      ActStdOption@1100525021 : ' ,Update,Replace';
      ActPrjOption@1100525020 : ' ,Update,Replace';
      ActEstRcp@1100525019 : ' ,Update,Replace';
      InitAdjFact@1100525017 : Boolean;
      CalcRemovalContribution@1100525015 : Boolean;
      PriceMethod@1100525014 : 'Actualise GP+DP+NP,Actualise GP + Fix DP + Calculate NP,Fix GP + Actualise DP + Calculate NP,Fix GP + Calculate DP + Actualise NP,Calculate GP + Fix DP + Actualise NP';
      OldVendor@1100525009 : Code[20];
      NewVendor@1100525008 : Code[20];
      OldVendorTxt@1100525007 : Text[50];
      NewVendorTxt@1100525006 : Text[50];
      ReplaceVendor@1100525005 : Boolean;
      UpdateWithPerc@1100525004 : Boolean;
      PercNorm@1100525003 : Decimal;
      PercItem@1100525002 : Decimal;
      PercSubc@1100525001 : Decimal;
      PercEqmt@1100525000 : Decimal;
      Text000@1100525055 : TextConst 'DEU="Die Aktualisierung der Rezeptzeilen ist nur zulÑssig indem Unternehmen, das als Quelle fÅr die Zentrale Artikelverwaltung verwendet wird; die Aktualisierung verwandter Tabellen ist mîglich.";ENU="Update Recipe Lines only allowed in Company used as source for Central Item Management; update related tables possible.";NLD="Bijwerken receptregels alleen toegestaan in bronbedrijf centraal artikelbeheer; bijwerken gerelateerde tabellen mogelijk."';
      Text002@1100525053 : TextConst 'DEU=Rezept #1################# @2@@@@@@@@@@@@@;ENU=Recipe            #1################# @2@@@@@@@@@@@@@;NLD=Recept            #1################# @2@@@@@@@@@@@@@';
      Text004@1100525051 : TextConst 'DEU=Innerhalb dieser Selektion wurden keine Lieferanten ersetzt.;ENU=No Vendors modified within Selection.;NLD=Binnen de selectie zijn geen leveranciers vervangen.;NOR=Ingen leverandõrer er endret i utvalget.;SVE=Inga leverantîrer har Ñndrats i urvalet.';
      Text005@1100525050 : TextConst 'DEU=Werkzeugpreis auf %1 %2 %3 kann nicht aktualisiert werden wegen Differenz in Ma·einheit;ENU=Can not actualize Plant Price on %1 %2 %3 because of difference in Unit of Measurement;NLD="Materieelprijs op receptregel %1 %2 %3 kan niet worden geactualiseerd omdat eenheid afwijkt. "';
      PercSundry@1100528900 : Decimal;
      RcpBln@1100525052 : Boolean;
      EstFilter@1100525038 : Code[20];
      EstTxt@1100525037 : Text[50];
      UpdateEstimate@1100525012 : Codeunit 11012229;
      Text19016772@1100528904 : TextConst 'DEU=Aktualisieren;ENU=Actualise;NLD=Actualiseren;NOR=Aktualiser;SVE=Fîrverkliga';
      Text19003146@1100528903 : TextConst 'DEU=Aktualisieren mit ProzentsÑtzen;ENU=Update with Percentage;NLD=Bijwerken met percentage;NOR=Oppdater med prosentsats;SVE=Uppdatera med procentsats';
      Text999@1100528000 : TextConst 'DEU=%1 %2: Einheit %3 fÅr Artikel %4 prÅfen;ENU=%1 %2:  check Unit %3 for Item %4;NLD=%1 %2: controleer eenheid %3 voor artikel %4';
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
      ActSubcActivity@1100528500 : Boolean;
      UpdateCostSales@1100528901 : 'Cost,Sales,Both';

    PROCEDURE StartUpdate@1();
    VAR
      CopyMgt@1100525001 : Codeunit 11012068;
      UpdateRep@1100485005 : Report 11012318;
      lvFinal@1100525000 : 'Yes,Only Report';
      lvRcp@1100525002 : Code[20];
      lvRcpGrp@1100525003 : Code[20];
    BEGIN
      lvRcpGrp := "Base Recipe Line".GETFILTER("Recipe Group");
      lvRcp := "Base Recipe Line".GETFILTER(Recipe);

      IF RcpBln = FALSE THEN BEGIN
        UpdateRecipe;
        IF CalcRemovalContribution THEN
          UpdateEstimate.DetermineRemovalContribution(2, '', '', '', '', lvRcpGrp, lvRcp);
        IF InitAdjFact THEN
          UpdateEstimate.ResetAdjustmentFactor('', '', lvRcpGrp,lvRcp, 0, TRUE, 5, 0, 0);  //DP00555
      END;

      IF ActStdOption > ActStdOption::" " THEN BEGIN
        CLEAR(CopyMgt);
        CopyMgt.SetSelectionRecipe(DATABASE::"Option Budget",'','','',lvRcpGrp,lvRcp,'','','','',0);  //C027336
        CopyMgt.ReplaceRecipe(1);
      END;

      IF ActPrjOption > ActPrjOption::" " THEN BEGIN
        CLEAR(CopyMgt);
        CopyMgt.SetSelectionRecipe(DATABASE::"Option Budget",'','','',lvRcpGrp,lvRcp,'','','','',0);  //C027336
        CopyMgt.ReplaceRecipe(2);
      END;

      IF ActEstRcp > ActEstRcp::" " THEN
        UpdateEstimate.ReplaceRecipe(EstFilter, '', lvRcpGrp, lvRcp, ActEstRcp, UpdateCostSales::Both);  //C057728

      IF ReplaceVendor THEN BEGIN
        IF TempRec.COUNT = 0 THEN
          MESSAGE(Text004)
        ELSE BEGIN
          COMMIT;
          UpdateRep.SetTempRecipeLineNEW(TempRec,lvFinal::Yes);
          UpdateRep.SETTABLEVIEW(RecipeRec);
          UpdateRep.RUNMODAL;
        END;
      END;
    END;

    PROCEDURE UpdateRecipe@1100525001();
    VAR
      EstSetup@1100525034 : Record 11012150;
      TradeItemRec@1100525032 : Record 11012317;
      BasicItemRec@1100525031 : Record 11012316;
      ItemRec@1100525030 : Record 27;
      OperRec@1100525029 : Record 11012165;
      SubOperRec@1100525028 : Record 11012166;
      RcpLineRec@1100525027 : Record 11020582;
      RcpLineRec2@1100525026 : Record 11020582;
      OldRcpLineRec@1100525025 : Record 11020582;
      NewRcpLineRec@1100525024 : Record 11020582;
      CurrRcpLineRec@1100525020 : Record 11020582;
      RateRec@1100525015 : Record 11012162;
      BudgetRateRec@1100525022 : Record 11012000;
      HourRateRec@1100525000 : Record 11012022;
      InventorySetup@1210190000 : Record 313;
      ItemRelationRec@1100409000 : Record 11012319;
      ItemRelationPresent@1100409001 : Boolean;
      Status@1100525019 : Dialog;
      maxrec@1100525018 : Integer;
      currec@1100525017 : Integer;
      ItemTypeOpt@1100525016 : 'Item,Basic Item,Trade Item';
      Desc1Txt@1100525014 : Text[100];
      Desc2Txt@1100525013 : Text[100];
      CostObject1@1100525012 : Code[20];
      CostObject2@1100525011 : Code[20];
      OldCostObject@1100525010 : Code[20];
      OldDesc@1100525009 : Text[100];
      OldGrossPrice@1100525008 : Decimal;
      OldPurchDisc@1100525007 : Decimal;
      OldSalesDisc@1100528900 : Decimal;
      SubOperNew@1100525006 : Code[20];
      UnitOld@1100525005 : Code[20];
      UnitNew@1100525004 : Code[20];
      NewTradeItem@1100525002 : Code[20];
      PurchDisc@1100528901 : Decimal;
      CurrItem@1100525001 : Code[20];
      CurrVendor@1100525003 : Code[20];
    BEGIN
      Status.OPEN(Text002);
      CLEAR(currec);
      EstSetup.GET;

      RcpLineRec.COPY("Base Recipe Line");
      IF RcpLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        maxrec := RcpLineRec.COUNT;
        REPEAT
          OldRcpLineRec := RcpLineRec;
          RecipeRec.GET(RcpLineRec."Recipe Group", RcpLineRec.Recipe);

          OldCostObject := RcpLineRec."Cost Object Price";
          OldDesc := RcpLineRec.Description;
          OldGrossPrice := RcpLineRec."Gross Price";
          OldPurchDisc := RcpLineRec."Purchase Discount %";
          OldSalesDisc := RcpLineRec."Sales Discount %";

          IF ReplaceVendor = TRUE THEN BEGIN
            IF (RcpLineRec."Recipe (Child)" = '') AND
              ((RcpLineRec."Vendor (Trade Item)" = OldVendor) OR (OldVendor = '')) THEN
            BEGIN
              IF TradeItemRec.CheckReplaceVendor(
                RcpLineRec."Vendor (Trade Item)", RcpLineRec."Trade Item", NewVendor, NewTradeItem) THEN
              BEGIN
                TempRec := RcpLineRec;
                RcpLineRec2 := RcpLineRec;

                RcpLineRec2."Trade Item" := '';
                RcpLineRec2.VALIDATE("Vendor (Trade Item)", NewVendor);
                RcpLineRec2.VALIDATE("Trade Item", NewTradeItem);
                IF (RcpLineRec2."Vendor (Trade Item)" = NewVendor) AND
                   (RcpLineRec2."Trade Item" = NewTradeItem) THEN
                BEGIN
                  RcpLineRec."Trade Item" := '';
                  RcpLineRec.VALIDATE("Vendor (Trade Item)", NewVendor);
                  RcpLineRec.VALIDATE("Trade Item", NewTradeItem);
                  //C037366.sn
                  IF (RcpLineRec."Item No." <> TempRec."Item No.") THEN BEGIN
                    TradeItemRec.GET(NewVendor, NewTradeItem);
                    RcpLineRec."Item No." := TradeItemRec.GetItemCode;
                  END;
                  //C037366.en
                  TempRec.INSERT;
                END;
              END;
            END;
          END;

          IF ActRate = TRUE THEN BEGIN
            IF EstSetup."Rates Based On" = EstSetup."Rates Based On"::"Budget Rate" THEN BEGIN
              BudgetRateRec.SETRANGE(Code,RcpLineRec."Rate Code");
              BudgetRateRec.SETRANGE("Starting Date",0D,TODAY);
              BudgetRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, TODAY);
              IF BudgetRateRec.FINDLAST THEN
                RcpLineRec."Cost Rate" := BudgetRateRec.Rate;
              //DP00381
              HourRateRec.SETRANGE(Code,RcpLineRec."Rate Code");
              HourRateRec.SETRANGE("Starting Date",0D,TODAY);
              HourRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, TODAY);
              IF HourRateRec.FINDLAST THEN
                RcpLineRec."Sales Rate" := HourRateRec."Hour Rate";
            END ELSE BEGIN
              IF RateRec.GET(RecipeRec."Rate Group", RcpLineRec."Rate Code") THEN BEGIN
                RcpLineRec."Cost Rate" := RateRec."Cost Rate";
                RcpLineRec."Sales Rate" := RateRec."Sales Rate";
              END;
            END;
          END;

          IF ActNorm = TRUE THEN BEGIN
            IF ActSubOper = TRUE THEN
              SubOperNew := CheckSubOperation(RcpLineRec.Manufacturer, RcpLineRec."Vendor (Trade Item)",
                RcpLineRec."Item No.", RcpLineRec."Basic Item", RcpLineRec."Trade Item");
            IF SubOperNew <> '' THEN
              RcpLineRec.VALIDATE("Sub Operation Code", SubOperNew)
            ELSE
              RcpLineRec.VALIDATE("Sub Operation Code");
          END;

          IF ActPrice = TRUE THEN BEGIN
            CurrRcpLineRec := RcpLineRec;  //db, 10-11-15: due to check on OldRcpLineRec use other variable
            IF ActItemRelation THEN BEGIN
              IF RcpLineRec."Item No." <> '' THEN
                RcpLineRec.ValidateItem(ItemTypeOpt::Item, FALSE);
            END ELSE BEGIN
              IF RcpLineRec."Trade Item" <> '' THEN
                RcpLineRec.ValidateItem(ItemTypeOpt::"Trade Item",FALSE)
              ELSE
                IF RcpLineRec."Basic Item" <> '' THEN
                  RcpLineRec.ValidateItem(ItemTypeOpt::"Basic Item", FALSE)
                ELSE
                  IF RcpLineRec."Item No." <> '' THEN
                    RcpLineRec.ValidateItem(ItemTypeOpt::Item, FALSE);
            END;

            NewRcpLineRec := RcpLineRec;
            IF (NewRcpLineRec."Trade Item" = CurrRcpLineRec."Trade Item") AND
               (NewRcpLineRec."Basic Item" = CurrRcpLineRec."Basic Item") AND
               (NewRcpLineRec."Unit of Measure" <> CurrRcpLineRec."Unit of Measure") THEN BEGIN
              UnitOld := CurrRcpLineRec."Unit of Measure";
              UnitNew := NewRcpLineRec."Unit of Measure";
              NewRcpLineRec."Unit of Measure" := UnitOld;
              CurrRcpLineRec."Unit of Measure" := UnitNew;
              RcpLineRec.CheckItemUnitConversion(NewRcpLineRec, CurrRcpLineRec);
              RcpLineRec."Unit of Measure" := UnitOld;
              RcpLineRec."Gross Price":= NewRcpLineRec."Gross Price";
              RcpLineRec."Net Cost Price":= NewRcpLineRec."Net Cost Price";
              RcpLineRec."Net Sales Price":= NewRcpLineRec."Net Sales Price";
              //C017415.sn
              IF RcpLineRec."Trade Item" <> '' THEN BEGIN
                CurrItem := CurrRcpLineRec."Trade Item";
                CurrVendor := CurrRcpLineRec."Vendor (Trade Item)";
              END ELSE BEGIN
                CurrItem := RcpLineRec."Item No.";
                CurrVendor := CurrRcpLineRec.Vendor;
              END;
              StoreMessage(
                COPYSTR(CurrRcpLineRec.Description, 1,50),
                STRSUBSTNO(Text999,
                  CurrRcpLineRec.FIELDCAPTION(Recipe), CurrRcpLineRec.Recipe,
                  CurrRcpLineRec."Unit of Measure", CurrItem),
                CurrVendor,CurrItem);
              //C017415.en
            END;

            IF PriceMethod = PriceMethod::"Actualise GP + Fix DP + Calculate NP" THEN BEGIN
              RcpLineRec."Purchase Discount %" := OldPurchDisc;
              RcpLineRec."Sales Discount %" := OldSalesDisc;
              RcpLineRec.CalculateNetPrice;
            END;
            IF PriceMethod = PriceMethod::"Fix GP + Actualise DP + Calculate NP" THEN BEGIN
              RcpLineRec."Gross Price" := OldGrossPrice;
              RcpLineRec.CalculateNetPrice;
            END;
            IF PriceMethod = PriceMethod::"Fix GP + Calculate DP + Actualise NP" THEN BEGIN
              RcpLineRec."Gross Price" := OldGrossPrice;
              RcpLineRec.CalculateDiscount(FALSE);
            END;
            IF PriceMethod = PriceMethod::"Calculate GP + Fix DP + Actualise NP" THEN BEGIN
              RcpLineRec."Purchase Discount %" := OldPurchDisc;
              RcpLineRec."Sales Discount %" := OldSalesDisc;
              RcpLineRec.CalculateGrossPrice;
            END;

            IF (ActCostObject = FALSE) OR (RcpLineRec."Cost Object Price" = '') THEN
              RcpLineRec."Cost Object Price" := OldCostObject;
            IF ActDesc = FALSE THEN
              RcpLineRec.Description := OldDesc;
          END;

          IF ActSubcActivity THEN
            IF RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Subcontracting THEN  //C056716
              RcpLineRec.GetSubcontractorActivity(-1);

          IF (ActPlantPrice = TRUE) AND
             (FPSLicenseManagement.LicenseAndReadPermissionForTable(PlantTypeRec)) AND
             (RcpLineRec."Plant Type" <> '') THEN BEGIN
            PlantTypeRec.GET(RcpLineRec."Plant Type");
            IF NOT RcpLineRec."Price Agreement" THEN BEGIN
              IF RcpLineRec."Unit of Measure" = PlantTypeRec."Unit of Measure" THEN BEGIN
                RcpLineRec.GetDefaultsPlantType;
              END ELSE BEGIN
                MESSAGE(Text005, RcpLineRec."Recipe Group", RcpLineRec.Recipe, RcpLineRec."Line No.");
              END;
            END;
          END;

          IF (ActDesc = TRUE) AND
             (RcpLineRec."Plant Type" <> '') AND
             (FPSLicenseManagement.LicenseAndReadPermissionForTable(PlantTypeRec)) THEN
          BEGIN
            PlantTypeRec.GET(RcpLineRec."Plant Type");
            RcpLineRec.Description := PlantTypeRec.Description;
          END;
          IF (ActDesc = TRUE) OR (ActCostObject = TRUE) THEN BEGIN
            Desc1Txt := RcpLineRec.Description;
            Desc2Txt := '';
            CostObject1 := RcpLineRec."Cost Object Labor";
            CostObject2 := RcpLineRec."Cost Object Price";
            InventorySetup.GET;
            IF ItemRelationRec.GET(RcpLineRec."Item No.") THEN
              ItemRelationPresent := TRUE
            ELSE
              ItemRelationPresent := FALSE;
            IF (ItemRelationPresent = TRUE) AND (InventorySetup."Item Info Trade Item Leading" = FALSE) THEN BEGIN
              ItemRec.GET(RcpLineRec."Item No.");
              Desc1Txt := ItemRec.Description;
              Desc2Txt := ItemRec."Description 2";
              IF ItemRec."Global Dimension 2 Code" <> '' THEN
                CostObject2 := ItemRec."Global Dimension 2 Code";
            END ELSE BEGIN
              IF RcpLineRec."Trade Item" <> '' THEN BEGIN
                TradeItemRec.GET(RcpLineRec."Vendor (Trade Item)", RcpLineRec."Trade Item");
                Desc1Txt := TradeItemRec."Item Description";
                Desc2Txt := TradeItemRec."Item Description 2";
                IF TradeItemRec."Cost Object" <> '' THEN
                  CostObject2 := TradeItemRec."Cost Object";
              END ELSE BEGIN
                IF RcpLineRec."Basic Item" <> '' THEN BEGIN
                  BasicItemRec.GET(RcpLineRec.Manufacturer, RcpLineRec."Basic Item");
                  Desc1Txt := BasicItemRec."Product Description";
                  Desc2Txt := BasicItemRec."Product Description 2";
                  IF BasicItemRec."Cost Object" <> '' THEN
                    CostObject2 := BasicItemRec."Cost Object";
                END ELSE BEGIN
                  IF RcpLineRec."Item No." <> '' THEN BEGIN
                    ItemRec.GET(RcpLineRec."Item No.");
                    Desc1Txt := ItemRec.Description;
                    Desc2Txt := ItemRec."Description 2";
                    IF ItemRec."Global Dimension 2 Code" <> '' THEN
                      CostObject2 := ItemRec."Global Dimension 2 Code";
                  END ELSE BEGIN
                    IF RcpLineRec."Sub Operation Code" <> '' THEN BEGIN
                      IF SubOperRec.GET(RcpLineRec."Sub Operation Code") THEN BEGIN
                        Desc1Txt := COPYSTR(SubOperRec.Description, 1, MAXSTRLEN(Desc1Txt));  //C020235
                        IF OperRec.GET(SubOperRec.Operation) THEN
                          IF OperRec."Cost Object" <> '' THEN
                            CostObject1 := OperRec."Cost Object";
                      END;
                    END;
                  END;
                END;
              END;
            END;
            IF ActDesc = TRUE THEN BEGIN
              IF Desc2Txt = '' THEN
                RcpLineRec.Description := Desc1Txt
              ELSE
                RcpLineRec.Description := COPYSTR((Desc1Txt + '\' + Desc2Txt), 1, MAXSTRLEN(RcpLineRec.Description));
            END;
            IF ActCostObject = TRUE THEN BEGIN
              IF RcpLineRec."Item No." + RcpLineRec.Manufacturer + RcpLineRec."Vendor (Trade Item)" = '' THEN
                RcpLineRec."Cost Object Labor" := CostObject1
              ELSE
                RcpLineRec."Cost Object Price" := CostObject2;
            END;
          END;

          IF UpdateWithPerc = TRUE THEN BEGIN
            IF PercNorm <> 0 THEN
              RcpLineRec.Norm := ROUND(RcpLineRec.Norm * (100+PercNorm)/100, 0.00001);
            //DP00381.sn
            PurchDisc := 0;
            IF (RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Material) THEN
              PurchDisc := PercItem;
            IF (RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Subcontracting) THEN
              PurchDisc := PercSubc;
            IF (RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Plant) THEN
              PurchDisc := PercEqmt;
            IF (RcpLineRec."Cost Type (Price)" = RcpLineRec."Cost Type (Price)"::Sundry) THEN
              PurchDisc := PercSundry;

            IF PurchDisc <> 0 THEN BEGIN
              RcpLineRec."Net Cost Price" := ROUND(RcpLineRec."Net Cost Price" * (100+PurchDisc)/100, 0.00001);
              IF RcpLineRec."Purchase Discount %" = 0 THEN BEGIN
                RcpLineRec."Gross Price":= RcpLineRec."Net Cost Price";
              END ELSE BEGIN
                IF RcpLineRec."Gross Price" <> 0 THEN
                  RcpLineRec."Purchase Discount %" :=
                    ROUND(100 * (RcpLineRec."Gross Price" - RcpLineRec."Net Cost Price")/(RcpLineRec."Gross Price"), 0.00001);
              END;
            END;
            //DP00381.sn
          END;

          RcpLineRec.CalculateTotals;
          IF FORMAT(OldRcpLineRec) <> FORMAT(RcpLineRec) THEN  //db, 21-01-13: if record not changed, avoid update related companies
            RcpLineRec.MODIFY(TRUE);
          IF RcpLineRec."Surcharge Type" <> RcpLineRec."Surcharge Type"::" " THEN
            RcpLineRec.CheckRecipeCharge;

          COMMIT;
          RcpLineRec.UpdateRelatedRecipe(RcpLineRec."Recipe Group", RcpLineRec.Recipe);

          currec := currec + 1;
          Status.UPDATE(1, RcpLineRec.Recipe);
          Status.UPDATE(2, ROUND(currec / maxrec * 10000,1));
        UNTIL RcpLineRec.NEXT = 0;
      END;

      Status.CLOSE;
    END;

    PROCEDURE CheckSubOperation@1210190017(lvManufacturer@1210190004 : Code[20];lvVendor@1210190005 : Code[20];lvItem@1210190000 : Code[20];lvBasicItem@1210190001 : Code[20];lvTradeItem@1210190002 : Code[20]) : Code[20];
    VAR
      TradeItemRec@1210190008 : Record 11012317;
      BasicItemRec@1210190007 : Record 11012316;
      ItemRec@1210190006 : Record 27;
    BEGIN
      IF lvTradeItem <> '' THEN BEGIN
        IF NOT TradeItemRec.GET(lvVendor, lvTradeItem) THEN TradeItemRec.INIT;
        IF TradeItemRec."Sub Operation Code" <> '' THEN
          EXIT(TradeItemRec."Sub Operation Code");
      END;

      IF lvBasicItem <> '' THEN BEGIN
        IF NOT BasicItemRec.GET(lvManufacturer, lvBasicItem) THEN BasicItemRec.INIT;
        IF BasicItemRec."Sub Operation Code" <> '' THEN
          EXIT(BasicItemRec."Sub Operation Code");
      END;

      IF lvItem <> '' THEN BEGIN
        IF NOT ItemRec.GET(lvItem) THEN ItemRec.INIT;
        IF ItemRec."Sub Operation Code" <> '' THEN
          EXIT(ItemRec."Sub Operation Code");
      END;

      EXIT('');
    END;

    PROCEDURE CheckCentralManagement@1100525000();
    VAR
      CompRel@1100525003 : Record 11012059;
      CentrManagementCU@1100525002 : Codeunit 11012010;
      NavBln@1100525001 : Boolean;
      DiscBln@1100525000 : Boolean;
      DiscGrpBln@1100528300 : Boolean;
    BEGIN
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(CompRel) THEN BEGIN
        CentrManagementCU.ItemFormEditable(NavBln,DiscBln,DiscGrpBln,RcpBln);
        IF RcpBln THEN BEGIN
          MESSAGE(Text000);
          ActNorm := FALSE;
          ActPrice := FALSE;
          CLEAR(PriceMethod);
          ActRate := FALSE;
          ActPlantPrice := FALSE;
          ActSubOper := FALSE;
          ActCostObject := FALSE;
          ActDesc := FALSE;
          UpdateWithPerc := FALSE;
          PercNorm := 0;
          PercItem := 0;
          PercSubc := 0;
          PercEqmt := 0;
          PercSundry := 0;
          CalcRemovalContribution := FALSE;
          InitAdjFact := FALSE;
          ReplaceVendor := FALSE;
          OldVendor := '';
          NewVendor := '';
        END;
      END;
    END;

    PROCEDURE ValidateEstimate@1100525003();
    BEGIN
      IF ActEstRcp = ActEstRcp::" " THEN EstFilter := '';
      IF NOT EstRec.GET(EstFilter) THEN EstRec.INIT;
      EstTxt := EstRec.Description;
    END;

    PROCEDURE LookupEstimate@1100525004();
    BEGIN
      IF ActEstRcp = ActEstRcp::" " THEN EXIT;
      IF PAGE.RUNMODAL(0, EstRec) = ACTION::LookupOK THEN BEGIN
         EstFilter := EstRec."No.";
         EstTxt := EstRec.Description;
      END;
    END;

    PROCEDURE ValidateOldVendor@1100525009();
    VAR
      VendorRec@1100525000 : Record 11012304;
    BEGIN
      IF NOT VendorRec.GET(OldVendor) THEN VendorRec.INIT;
      OldVendorTxt := VendorRec.Name;
    END;

    PROCEDURE ValidateNewVendor@1100525010();
    VAR
      VendorRec@1100525000 : Record 11012304;
    BEGIN
      IF NOT VendorRec.GET(NewVendor) THEN VendorRec.INIT;
      NewVendorTxt := VendorRec.Name;
    END;

    PROCEDURE RemoveMessage@1100525011();
    VAR
      ErrorRec@1100525000 : Record 11012051;
    BEGIN
      //C017415
      ErrorRec.SETRANGE("User ID", USERID);
      ErrorRec.SETRANGE("Source Type", ErrorRec."Source Type"::Item);
      ErrorRec.DELETEALL;
      COMMIT;  //C025532
    END;

    PROCEDURE StoreMessage@5(lvDesc@11012000 : Text[50];lvMess@11012001 : Text[80];CurrVendor@1100525000 : Code[20];CurrItem@1100525001 : Code[20]);
    VAR
      ErrorRec@1210190000 : Record 11012051;
      lvError@11012002 : Integer;
    BEGIN
      //C017415
      WITH ErrorRec DO BEGIN
        SETRANGE("User ID", USERID);
        SETRANGE("Source Type", "Source Type"::Item);
        IF FINDLAST THEN
          lvError := "Line No." + 1
        ELSE
          lvError := 1;

        INIT;
        "User ID" := USERID;
        "Source Type" := "Source Type"::Item;
        "Vendor No.":= CurrVendor;
        "Item No." := CurrItem;
        "Line No." := lvError;
        "Error message" := lvMess;
        Description := lvDesc;
        INSERT;
      END;
    END;

    PROCEDURE ShowMessage@1100525012();
    VAR
      ErrorRec@1100525000 : Record 11012051;
    BEGIN
      //C017415
      ErrorRec.SETRANGE("User ID", USERID);
      ErrorRec.SETRANGE("Source Type", ErrorRec."Source Type"::Item);
      IF ErrorRec.FIND('-') THEN BEGIN
        COMMIT;
        PAGE.RUNMODAL(PAGE::Errors, ErrorRec);
      END;
    END;

    BEGIN
    {
      //db, 15-03-17: obsolete data (servicecontract/location) removed
    }
    END.
  }
  RDLDATA
  {
  }
}

