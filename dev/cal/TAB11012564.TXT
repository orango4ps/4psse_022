OBJECT Table 11012564 Inspection
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               InspectionRec@11012000 : Record 11012564;
             BEGIN
               PlantNoRec.GET("Plant Type","Plant No.");
               CheckStock();

               InspectionRec.SETRANGE("Plant Type","Plant Type");
               InspectionRec.SETRANGE("Plant No.","Plant No.");
               IF InspectionRec.FIND('+') THEN
                 "Line No." := InspectionRec."Line No." + 10
               ELSE
                 "Line No." := 10;

               IF ("Inspection Result" = "Inspection Result"::Approved) THEN
                 CheckMoveApprovedToRentalDepot(Rec);

               //"Department Code" := PlantNoRec."Department Code"; //**4PS.n DPA (Plant)   //DP00241.o (26914)
               FillDepartmentCode();  //DP00241.n (26914)
             END;

    OnModify=VAR
               lvInspectionXRec@1100485000 : Record 11012564;
             BEGIN
               //20170608.o KZ Does only work in UI, not via Code, Web Services
               //IF "Inspection Result" <> xRec."Inspection Result" THEN
               //  CreateNewInspections;

               IF ("Inspection Result" = "Inspection Result"::Approved) THEN BEGIN
                 //* Old 'Inspection' read record here, use of 'xRec' always works (i.a from xmlports testapparaten)
                 IF lvInspectionXRec.GET("Plant Type", "Plant No.", "Line No.") THEN BEGIN
                   IF (lvInspectionXRec."Inspection Result" <>  "Inspection Result"::Approved) THEN
                     CheckMoveApprovedToRentalDepot(Rec);  //* Only call when old status unequal to 'Approved'
                   IF (lvInspectionXRec."Inspection Result" = "Inspection Result"::Approved) AND
                      ("Inspected on" <> lvInspectionXRec."Inspected on")
                   THEN
                     UpdateNextInspectBefore();
                 END;
               END;
             END;

    OnDelete=VAR
               lvInspecTestDataRec@1100485000 : Record 11012537;
             BEGIN
               lvInspecTestDataRec.SETRANGE("Plant Type","Plant Type");
               lvInspecTestDataRec.SETRANGE("Plant No.","Plant No.");
               lvInspecTestDataRec.SETRANGE("Inspection Line No.", "Line No.");
               lvInspecTestDataRec.DELETEALL;
             END;

    OnRename=BEGIN
               FillDepartmentCode();  //DP00241.n (26914)
             END;

    CaptionML=[ENU=Inspection;
               NOR=Inspeksjon;
               SVE=Inspektion];
    LookupPageID=Page11012573;
    DrillDownPageID=Page11012573;
  }
  FIELDS
  {
    { 10  ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=BEGIN
                                                                PlantRec.GET("Plant Type");
                                                                PlantRec.TESTFIELD(Bulk,FALSE);
                                                              END;

                                                   CaptionML=[ENU=Plant Type;
                                                              NOR=Maskintype;
                                                              SVE=Maskintyp] }
    { 15  ;   ;Plant Description   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Number".Description WHERE (Plant Type=FIELD(Plant Type),
                                                                                                        No.=FIELD(Plant No.)));
                                                   CaptionML=[ENU=Plant Description;
                                                              NOR=Maskinbeskrivelse;
                                                              SVE=Maskinbeskrivning];
                                                   Editable=No }
    { 20  ;   ;Plant No.           ;Code10        ;TableRelation="Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Plant Description");  //C000220.n
                                                                FillDepartmentCode();  //DP00241.n (26914)
                                                                FillMeterReading; //**4PS.n BI049 KD 03-01-17
                                                              END;

                                                   CaptionML=[ENU=Plant No.;
                                                              NOR=Maskinnr.;
                                                              SVE=Maskinnr];
                                                   SQL Data Type=Integer;
                                                   NotBlank=Yes }
    { 30  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Inspection Entry No.;
                                                              NOR=Transaksjonsnr for inspeksjon;
                                                              SVE=Transaktionsnr f”r inspektion] }
    { 40  ;   ;Inspection Type     ;Code20        ;TableRelation="Plant Type Inspection Type"."Inspection Type" WHERE (Plant Type=FIELD(Plant Type));
                                                   OnValidate=BEGIN
                                                                IF "Inspection Type" <> xRec."Inspection Type" THEN BEGIN
                                                                  FillMeterReadingFromInspectionType;
                                                                  "Maintenance Scheme" := '';
                                                                  FillDefaultMaintenanceScheme;
                                                                END;
                                                                CALCFIELDS(Description, "Inspection Based on");  //DP00614.c
                                                              END;

                                                   CaptionML=[ENU=Inspection Type;
                                                              NOR=Inspeksjonstype;
                                                              SVE=Inspektionstyp];
                                                   NotBlank=Yes }
    { 50  ;   ;Description         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Inspection Type".Description WHERE (Code=FIELD(Inspection Type)));
                                                   CaptionML=[ENU=Inspection Type Description;
                                                              NOR=Beskrivelse av Inspeksjonstype];
                                                   Editable=No }
    { 51  ;   ;Meter Reading Type  ;Code10        ;TableRelation="Plant Meter Type"."Plant Meter Type" WHERE (Plant Type=FIELD(Plant Type),
                                                                                                              Plant No.=FIELD(Plant No.),
                                                                                                              Plant Meter=FIELD(Plant Meter));
                                                   CaptionML=ENU=Meter Reading Type;
                                                   Description=BI049 }
    { 52  ;   ;Inspection Based on ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Inspection Type"."Inspection Based on" WHERE (Code=FIELD(Inspection Type)));
                                                   CaptionML=ENU=Inspection Based on;
                                                   OptionCaptionML=[ENU=Time,Quantity,Both;
                                                                    SVE=Tid,Antal,B†da];
                                                   OptionString=Time,Quantity,Both;
                                                   Editable=No }
    { 53  ;   ;Plant Meter         ;Code10        ;TableRelation="Plant Meter Type"."Plant Meter" WHERE (Plant Type=FIELD(Plant Type),
                                                                                                         Plant No.=FIELD(Plant No.));
                                                   OnValidate=BEGIN
                                                                FillMeterReading; //**4PS.n BI049 KD 03-01-17
                                                              END;

                                                   CaptionML=[ENU=Plant Meter;
                                                              SVE=Maskinr„knare];
                                                   Description=BI049 }
    { 60  ;   ;Inspect before      ;Date          ;OnValidate=BEGIN
                                                                IF "Inspect before" <> 0D THEN BEGIN
                                                                  CALCFIELDS("Inspection Based on");
                                                                  IF "Inspection Based on" = "Inspection Based on"::Quantity THEN BEGIN
                                                                    MESSAGE('%1 %2', FIELDCAPTION("Inspection Based on"), "Inspection Based on");
                                                                    "Inspect before" := 0D;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Inspect before;
                                                              NOR=Inspiser f›r;
                                                              SVE=Inspektera f”re] }
    { 70  ;   ;Last Inspection Date;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Max(Inspection."Inspected on" WHERE (Plant Type=FIELD(Plant Type),
                                                                                                    Plant No.=FIELD(Plant No.),
                                                                                                    Inspection Type=FIELD(Inspection Type),
                                                                                                    Inspected on=FILTER(<>'')));
                                                   CaptionML=[ENU=Last Inspection Date;
                                                              NOR=Forrige inspeksjonsdato;
                                                              SVE=Senaste inspektionsdatum];
                                                   Editable=No }
    { 80  ;   ;Inspected on        ;Date          ;OnValidate=BEGIN
                                                                IF "Inspected on" > TODAY THEN
                                                                  MESSAGE(Text001, FIELDCAPTION("Inspected on"));
                                                              END;

                                                   CaptionML=[ENU=Inspected on;
                                                              NOR=Inspisert den;
                                                              SVE=Inspekterad den] }
    { 90  ;   ;Inspected by        ;Code20        ;TableRelation=Employee;
                                                   OnValidate=BEGIN
                                                                IF "Inspected by" = '' THEN BEGIN
                                                                  IF "Inspected by" <> xRec."Inspected by" THEN
                                                                    "Inspector Name" := '';
                                                                END ELSE
                                                                  FillInspectorName;
                                                              END;

                                                   CaptionML=[ENU=Inspected by;
                                                              NOR=Inspisert av;
                                                              SVE=Inspekterad av] }
    { 100 ;   ;Inspection Vendor   ;Code20        ;TableRelation=Vendor.No.;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Vendor Name")               //**evdb.n
                                                              END;

                                                   CaptionML=[ENU=Inspection Vendor;
                                                              NOR=Inspeksjonsleverand›r;
                                                              SVE=Inspektionsleverant”r] }
    { 110 ;   ;Certificate No.     ;Code20        ;CaptionML=[ENU=Certificate No.;
                                                              NOR=Sertifikatnr.;
                                                              SVE=Certifikatnr] }
    { 120 ;   ;Certificate Date    ;Date          ;CaptionML=[ENU=Certificate Date;
                                                              NOR=Sertifikatdato;
                                                              SVE=Certifikatdatum] }
    { 130 ;   ;Report No.          ;Code20        ;CaptionML=[ENU=Report No.;
                                                              NOR=Rapportnr.;
                                                              SVE=Rapportnr] }
    { 140 ;   ;Inspection Result   ;Option        ;OnValidate=BEGIN
                                                                IF "Inspection Result" <> 0 THEN
                                                                  TESTFIELD("Inspected on");
                                                                CreateNewInspections; //20170608.n KZ
                                                              END;

                                                   CaptionML=[ENU=Inspection Result;
                                                              NOR=Inspeksjonsresultat;
                                                              SVE=Inspektionsresultat];
                                                   OptionCaptionML=[ENU=" ,Approved,Disapproved,Exit Order";
                                                                    NOR=" ,Godkjent,Ikke godkjent,Sluttordre";
                                                                    SVE=" ,Godk„nd,Avslagen,Slutorder"];
                                                   OptionString=[ ,Approved,Disapproved,Exit Order];
                                                   BlankZero=Yes }
    { 145 ;   ;Department Code     ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1, "Department Code");
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              NOR=Avdelingskode;
                                                              SVE=Mottagande avdelningskod];
                                                   Editable=No;
                                                   CaptionClass='1,1,1' }
    { 150 ;   ;Comment             ;Text250       ;CaptionML=[ENU=Comment;
                                                              NOR=Kommentar;
                                                              SVE=Kommentar] }
    { 160 ;   ;Inspection Location ;Code20        ;TableRelation="Plant Location";
                                                   CaptionML=[ENU=Inspection Location;
                                                              NOR=Inspeksjon, lokasjon;
                                                              SVE=Inspektion, lagerst„lle] }
    { 170 ;   ;Present Location    ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Inventory".Location WHERE (Removed=CONST(No),
                                                                                                        Plant Type=FIELD(Plant Type),
                                                                                                        Plant No.=FIELD(Plant No.)));
                                                   TableRelation="Plant Location";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=Current Location;
                                                   Editable=No }
    { 171 ;   ;Current Rate Code   ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Inventory"."Rate Code" WHERE (Removed=CONST(No),
                                                                                                           Plant Type=FIELD(Plant Type),
                                                                                                           Plant No.=FIELD(Plant No.)));
                                                   CaptionML=[ENU=Present Location;
                                                              NOR=Aktuell lokasjon;
                                                              SVE=Aktuellt lagerst„lle];
                                                   Editable=No }
    { 175 ;   ;Responsible Employee (Current);Code20;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Inventory"."Employee No." WHERE (Removed=CONST(No),
                                                                                                              Plant Type=FIELD(Plant Type),
                                                                                                              Plant No.=FIELD(Plant No.)));
                                                   CaptionML=[ENU=Responsible Employee (Current);
                                                              NOR=Ansvarlig Ansatt (aktuell);
                                                              SVE=Ansvarig anst„lld (aktuell)];
                                                   Editable=No }
    { 176 ;   ;Employee Company    ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Inventory"."Employee Company" WHERE (Removed=CONST(No),
                                                                                                                  Plant Type=FIELD(Plant Type),
                                                                                                                  Plant No.=FIELD(Plant No.)));
                                                   CaptionML=[ENU=Employee Company;
                                                              NOR=Ansattes selskap;
                                                              SVE=Den anst„lldes f”retag];
                                                   Editable=No }
    { 180 ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              NOR=Datofilter;
                                                              SVE=Datumfilter] }
    { 190 ;   ;Plant to Inspect    ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist(Inspection WHERE (Plant Type=FIELD(Plant Type),
                                                                                       Plant No.=FIELD(Plant No.),
                                                                                       Line No.=FIELD(Line No.),
                                                                                       Inspect before=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Plant to Inspect;
                                                              NOR=Maskin † Inspisere;
                                                              SVE=Maskin att inspektera];
                                                   Editable=No }
    { 200 ;   ;Present Location Description;Text100;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Location".Description WHERE (Code=FIELD(Present Location)));
                                                   CaptionML=[ENU=Present Location Description;
                                                              NOR=Beskrivelse av aktuell lokasjon;
                                                              SVE=Beskrivning av aktuellt lagerst„lle];
                                                   Editable=No }
    { 210 ;   ;Test Device         ;Option        ;CaptionML=[ENU=Test Device;
                                                              NOR=Testenhet;
                                                              SVE=Testenhet];
                                                   OptionCaptionML=ENU=" ,Secutest,Secutest Windows,Secutest PRX,,,PAT Data,PAT Manager,PAT 3140S,MultiPAT (XE),Multiservicer XA,,,EMRI,Certificate Registration,Secutest (Base10)";
                                                   OptionString=[ ,Secutest,Secutest Windows,Secutest PRX,,,PAT Data,PAT Manager,PAT 3140S,MultiPAT (XE),Multiservicer XA,,,EMRI,Certificate Registration,Secutest (Base10)];
                                                   Description=Options should be equal to options of field 60 in table 11012537 }
    { 220 ;   ;Vendor Name         ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Inspection Vendor)));
                                                   CaptionML=[ENU=Vendor Name;
                                                              NOR=Leverand›rsnavn;
                                                              SVE=Leverant”rsnamn];
                                                   Editable=No }
    { 230 ;   ;Inspector Name      ;Text100       ;CaptionML=[ENU=Inspector Name;
                                                              NOR=Inspekt›rens navn;
                                                              SVE=Inspekt”rens namn] }
    { 240 ;   ;Inspection No.      ;Code30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Number"."Inspection No." WHERE (Plant Type=FIELD(Plant Type),
                                                                                                             No.=FIELD(Plant No.)));
                                                   CaptionML=[ENU=Inspection No.;
                                                              NOR=Inspeksjonnr.;
                                                              SVE=Inspektionsnr];
                                                   Editable=No }
    { 250 ;   ;Maintenance Scheme  ;Code20        ;TableRelation="Plant - Maintenance Scheme"."Maintenance Scheme" WHERE (Plant Type=FIELD(Plant Type),
                                                                                                                          Plant No.=FIELD(Plant No.));
                                                   OnValidate=VAR
                                                                PlantMaintenanceScheme@1100529001 : Record 11072677;
                                                              BEGIN
                                                                IF "Maintenance Scheme" <> '' THEN BEGIN
                                                                  TESTFIELD("Inspection Type");
                                                                  PlantMaintenanceScheme.GET("Plant Type", "Plant No.", "Maintenance Scheme");
                                                                  PlantMaintenanceScheme.TESTFIELD("Inspection Type", "Inspection Type");
                                                                END;
                                                                CALCFIELDS("Maintenance Scheme Description");
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupMaintenanceScheme(TRUE);
                                                            END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Maintenance Scheme;
                                                              SVE=Underh†llsschema] }
    { 251 ;   ;Maintenance Scheme Description;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Stnd. Maintenance Scheme".Description WHERE (Code=FIELD(Maintenance Scheme)));
                                                   CaptionML=[ENU=Maintenance Scheme Description;
                                                              SVE=Beskrivning av underh†llsschema];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Plant Type,Plant No.,Line No.           ;Clustered=Yes }
    {    ;Plant Type,Plant No.,Inspect before      }
    {    ;Plant Type,Plant No.,Inspection Type,Inspected on }
    {    ;Plant Type,Plant No.,Inspected on        }
    {    ;Inspected on                             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@11012003 : TextConst 'ENU=No stock present for %1 ''%2-%3''.;NOR=Intet lager finnes for %1 %2.;SVE=Inget lager finns f”r %1 %2.';
      InspectionTypeRec@11012000 : Record 11012562;
      PlantRec@11012001 : Record 11012551;
      PlantNoRec@11012002 : Record 11012552;
      PlantSetup@1100485001 : Record 11012550;
      Text001@1100485000 : TextConst 'ENU=Watch out, %1 lays in the future.;NOR=Obs, %1 ligger i framtiden.;SVE=Se upp, %1 ligger i framtiden.';
      DimMgt@1100525008 : Codeunit 408;
      DPA_Management@1100000999 : Codeunit 11012783;

    PROCEDURE CreateNewInspections@1();
    VAR
      lInspectionRec@11012000 : Record 11012564;
      lvNewInspectionDate@1210190000 : Date;
    BEGIN
      //20170608.c KZ
      IF "Inspection Result" <> "Inspection Result"::Approved THEN
        EXIT;

      lvNewInspectionDate := NewCallDate;
      IF lvNewInspectionDate >= EndOfLifetimeDate("Plant Type", "Plant No.","Inspection Type") THEN
        EXIT;

      lInspectionRec.SETRANGE("Plant Type", "Plant Type");
      lInspectionRec.SETRANGE("Plant No.", "Plant No.");
      lInspectionRec.SETFILTER("Line No.", '>%1', "Line No.");
      lInspectionRec.SETFILTER("Inspect before", '>=%1', lvNewInspectionDate);
      lInspectionRec.SETRANGE("Inspected on", 0D);
      lInspectionRec.SETRANGE("Inspection Type", "Inspection Type");
      IF (NOT lInspectionRec.ISEMPTY) THEN
        EXIT;

      lInspectionRec := Rec;
      lInspectionRec.INIT;
      lInspectionRec."Inspection Type" := "Inspection Type";
      lInspectionRec."Inspect before" := lvNewInspectionDate;
      lInspectionRec."Inspection Vendor" := "Inspection Vendor";
      lInspectionRec."Meter Reading Type" := "Meter Reading Type";
      lInspectionRec."Plant Meter" := "Plant Meter";
      lInspectionRec."Maintenance Scheme" := "Maintenance Scheme";
      lInspectionRec.INSERT(TRUE);
    END;

    PROCEDURE UpdateNextInspectBefore@1100525000();
    VAR
      lInspectionRec@1100525000 : Record 11012564;
      lvNewInspectionDate@1100525001 : Date;
    BEGIN
      lInspectionRec.SETRANGE("Plant Type", "Plant Type");
      lInspectionRec.SETRANGE("Plant No.", "Plant No.");
      lInspectionRec.SETFILTER("Line No.",  '>%1', "Line No.");
      lInspectionRec.SETRANGE("Inspection Type", "Inspection Type");
      IF NOT lInspectionRec.FINDFIRST THEN  //* Read next inspection of plant number with the same inspection type
        EXIT;
      IF lInspectionRec."Inspection Result" <> "Inspection Result"::" " THEN  //* Check next inspection is 'Open'
        EXIT;

      lvNewInspectionDate := NewCallDate;
      IF lInspectionRec."Inspect before" = lvNewInspectionDate THEN
        EXIT;

      lInspectionRec."Inspect before" := lvNewInspectionDate;
      lInspectionRec.MODIFY(FALSE);  //* FALSE!
    END;

    PROCEDURE NewCallDate@4() : Date;
    BEGIN
      InspectionTypeRec.GET("Inspection Type");
      IF InspectionTypeRec."Inspection Based on" = InspectionTypeRec."Inspection Based on"::Quantity THEN  //DP00614
        EXIT(0D);
      EXIT(CALCDATE(
        STRSUBSTNO(
          '%1%2',InspectionTypeRec."Inspect per",
          COPYSTR(STRSUBSTNO('%1',InspectionTypeRec."Period Length"),1,1)),
        "Inspected on"));
    END;

    PROCEDURE EndOfLifetimeDate@1210190001(IPlantType@1210190001 : Code[20];IPlantNo@1210190003 : Code[10];IInspectionType@1210190004 : Code[20]) : Date;
    VAR
      lvInspectionTypeRec@1210190002 : Record 11012562;
      lvPlantNoRec@1210190000 : Record 11012552;
    BEGIN
      lvInspectionTypeRec.GET(IInspectionType);
      IF FORMAT(lvInspectionTypeRec.Lifetime) <> '' THEN BEGIN
        lvPlantNoRec.GET(IPlantType, IPlantNo);
        IF lvPlantNoRec."Receipt Date" <> 0D THEN
          EXIT(CALCDATE(lvInspectionTypeRec.Lifetime, lvPlantNoRec."Receipt Date"));
      END;

      EXIT(DMY2DATE(31,12,9999));
    END;

    PROCEDURE CheckMoveApprovedToRentalDepot@1100485000(IInspectionRec@1100485000 : Record 11012564);
    VAR
      lvInventoryRec@1100485002 : Record 11012555;
      lvPlantOrderLineRec@1100485003 : Record 11012557;
      PlantLoc@1100409002 : Record 11012554;
      ReturnDepots@1100409003 : Record 11012668;
      lvInventoryMngmntCU@1100485001 : Codeunit 11012566;
      RentalDepot@1100409000 : Code[20];
      InspecDepot@1100409001 : Code[20];
    BEGIN
      //* This function may only be called when old status was unequal to 'Approved' (or new record).
      //* When new status is 'Approved' then move to 'Rental Depot', if present on return location (Inspection Depot).
      WITH IInspectionRec DO BEGIN
        PlantSetup.GET;
        IF (NOT PlantSetup."Move Approved to Rental Depot") OR
           //(PlantSetup.GetRentalDepot = '') OR  //DP00152.o
           ("Inspection Result" <> "Inspection Result"::Approved) OR
           ("Plant Type" = '') OR ("Plant No." = '')
        THEN
          EXIT;

        IF NOT PlantRec.GET("Plant Type") THEN
          EXIT;

        CALCFIELDS("Present Location");
        //DP00152.so
        //IF PlantRec.Bulk OR ("Present Location" = '') OR
        //   ("Present Location" = PlantSetup.GetRentalDepot) OR
        //   (("Present Location" <> PlantSetup.GetReturnDepot) AND ("Present Location" <> PlantRec."Return Depot"))
        //THEN
        //  EXIT;
        //DP00152.eo

        //DP00152.sn
        IF PlantRec.Bulk OR ("Present Location" = '') THEN
          EXIT;
        IF NOT PlantLoc.GET("Present Location") THEN EXIT;
        IF NOT PlantLoc.Depot THEN EXIT;
        IF PlantSetup."Deviating Return Depot base on" <> PlantSetup."Deviating Return Depot base on"::"Multiple Depots" THEN BEGIN
          RentalDepot := PlantSetup.GetRentalDepot;
          InspecDepot := PlantRec."Return Depot";
        END ELSE BEGIN
          IF NOT ReturnDepots.GET("Present Location") THEN
            EXIT;
          RentalDepot := ReturnDepots."Return Depot Approval";
          InspecDepot := "Present Location";
        END;
        IF (RentalDepot = '') OR (InspecDepot = '') THEN
          EXIT;
        IF NOT PlantLoc.GET(RentalDepot) THEN EXIT;
        IF (NOT PlantLoc.Depot) OR PlantLoc.Blocked THEN EXIT;
        IF NOT PlantLoc.GET(InspecDepot) THEN EXIT;
        IF NOT PlantLoc.Depot THEN EXIT;
        IF ("Present Location" = RentalDepot) OR ("Present Location" <> InspecDepot) THEN
          EXIT;
        //DP00152.en

        lvInventoryRec.SETRANGE(Removed, FALSE);
        lvInventoryRec.SETRANGE(Location, "Present Location");
        lvInventoryRec.SETRANGE("Plant Type", "Plant Type");
        lvInventoryRec.SETRANGE("Plant No.", "Plant No.");
        lvInventoryRec.SETRANGE(Quantity, 1);
        lvInventoryRec.SETRANGE("Present from", 0D, "Inspected on");
        IF lvInventoryRec.FIND('-') THEN BEGIN
          lvInventoryMngmntCU.SetApprovalMode();
          lvInventoryMngmntCU.PostInventory(
            lvInventoryRec."Arrival Order Type"::"Plant Order", '', 0, "Present Location",
            //PlantSetup.GetRentalDepot, "Plant Type", "Plant No.", "Inspected on", lvInventoryRec.Quantity, //DP00152.o
            RentalDepot, "Plant Type", "Plant No.", "Inspected on", lvInventoryRec.Quantity,  //DP00152.n
            FALSE, lvPlantOrderLineRec."Rental Type"::Rental,
            lvInventoryRec."Rate Code",PlantSetup."Default Rate Code",'','','',0, '');
        END;
      END;
    END;

    PROCEDURE CheckStock@1100485001();
    VAR
      lvInventoryRec@1100485000 : Record 11012555;
      lvPlantLocRec@1100485001 : Record 11012554;
    BEGIN
      PlantNoRec.CALCFIELDS("Quantity in Stock");
      IF PlantNoRec."Quantity in Stock" <= 0 THEN BEGIN
        PlantRec.GET("Plant Type");
        IF PlantRec."Rental Type" <> PlantRec."Rental Type"::Rental THEN BEGIN
          //* If S/BB Plant is solded and still stored in a not closed location, then also ok.
          lvInventoryRec.SETCURRENTKEY(Removed,"Plant Type","Plant No.");
          lvInventoryRec.SETRANGE(Removed, FALSE);
          lvInventoryRec.SETRANGE("Plant Type", "Plant Type");
          lvInventoryRec.SETRANGE("Plant No.", "Plant No.");
          lvInventoryRec.SETRANGE(Sold, TRUE);
          lvInventoryRec.SETRANGE(Quantity, 1);
          IF lvInventoryRec.FINDFIRST THEN BEGIN
            IF lvPlantLocRec.GET(lvInventoryRec.Location) THEN
              IF lvPlantLocRec.Status < lvPlantLocRec.Status::"Administrative Finished" THEN
                EXIT;
          END;
          //ERROR(Text000,"Plant Type","Plant No.");  //C000220.o
        END;
        ERROR(Text000,FIELDCAPTION("Plant Type"),"Plant Type","Plant No.");  //C000220.n
      END;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      MODIFY;
    END;

    PROCEDURE FillInspectorName@1100529015();
    VAR
      Employee@1100529000 : Record 5200;
    BEGIN
      IF "Inspected by" <> '' THEN BEGIN
        IF Employee.GET("Inspected by") THEN
          "Inspector Name" := COPYSTR(Employee."Full Name", 1, MAXSTRLEN("Inspector Name"));
      END;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012564) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012564');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::Inspection, "Department Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Department Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Department Code");
    END;

    PROCEDURE FillDepartmentCode@1100529000();
    VAR
      PlantType@1100529000 : Record 11012551;
      PlantNumber@1100529001 : Record 11012552;
    BEGIN
      //DP00241 (26914)
      PlantNumber.GET("Plant Type", "Plant No.");
      IF PlantNumber."Department Code" <> '' THEN
        "Department Code" := PlantNumber."Department Code"
      ELSE BEGIN
        PlantType.GET("Plant Type");
        "Department Code" := PlantType."Department Code";
      END;
    END;

    PROCEDURE ActualMeterReading@1100529005() : Decimal;
    VAR
      PlantMeterType@1100529001 : Record 11229921;
    BEGIN
      //DP00614
      //**4PS.so BI049 KD 03-01-17
      //CALCFIELDS("Meter Reading Type");
      //IF ("Plant Type" = '') OR ("Plant No." = '') OR ("Inspection Type" = '') OR ("Meter Reading Type" = '') THEN
      //  EXIT(0);
      //EXIT(MeterReading.GetActualMeterReading("Plant Type", "Plant No.", "Meter Reading Type", OServiceOrder));
      //**4PS.eo BI049 KD 03-01-17

      //**4PS.sn BI049 KD 03-01-17
      IF ("Plant Type" = '') OR ("Plant No." = '') OR ("Plant Meter" = '') OR ("Meter Reading Type" = '') THEN
        EXIT(0);
      //EXIT(MeterReading.GetActualMeterReadingMeter("Plant Type", "Plant No.", "Plant Meter", "Meter Reading Type", TRUE));
      PlantMeterType.CHANGECOMPANY(CURRENTCOMPANY);
      EXIT(PlantMeterType.ActualMeterReading("Plant Type", "Plant No.", "Plant Meter", "Meter Reading Type"));
      //**4PS.en BI049 KD 03-01-17
    END;

    PROCEDURE ActualMeterReadingUnit@1100529009() : Code[10];
    VAR
      MeterReadingType@1100529000 : Record 11072670;
    BEGIN
      //DP00614
      // CALCFIELDS("Meter Reading Type"); //**4PS.o BI049 KD 03-01-17
      IF "Meter Reading Type" = '' THEN
        EXIT('');
      MeterReadingType.CHANGECOMPANY(CURRENTCOMPANY);
      IF MeterReadingType.GET("Meter Reading Type") THEN
        EXIT(MeterReadingType."Unit of Measure");
      EXIT('');
    END;

    PROCEDURE DrillDownMeterReading@1100529011();
    VAR
      PlantMeterType@1100529000 : Record 11229921;
    BEGIN
      //DP00614
      TESTFIELD("Plant Type");
      TESTFIELD("Plant No.");
      PlantMeterType.ShowMeterReadings_General("Plant Type", "Plant No.", "Plant Meter", "Meter Reading Type", 0, '');
    END;

    PROCEDURE SkipInspection@1100529002(Inspection@1100529000 : Record 11012564;InspectionBasedOn@1100529001 : Option;DateFilter@1100529002 : Text;AvailableTo@1100529003 : Decimal) : Boolean;
    VAR
      PlantMeterType@1100529004 : Record 11229921;
      BasedOnTime@1100529005 : Boolean;
      AvailableMR@1100529006 : Decimal;
    BEGIN
      //DP00614
      // Check 'open' inspection within date/available filter
      Inspection.CALCFIELDS("Inspection Based on");
      IF (InspectionBasedOn <> Inspection."Inspection Based on"::Quantity) AND
         (Inspection."Inspection Based on" <> Inspection."Inspection Based on"::Quantity)
      THEN BEGIN
        IF DateFilter = '' THEN
          EXIT(FALSE);
        Inspection.SETFILTER("Date Filter", DateFilter);
        Inspection.CALCFIELDS("Plant to Inspect");
        IF Inspection."Plant to Inspect" THEN
          EXIT(FALSE);
      END;

      IF (InspectionBasedOn <> Inspection."Inspection Based on"::Time) AND
         (Inspection."Inspection Based on" <> Inspection."Inspection Based on"::Time)
      THEN BEGIN
        AvailableMR :=
          PlantMeterType.AvailableMeterReadingUntilNextInspection("Plant Type", "Plant No.", "Plant Meter", "Meter Reading Type", BasedOnTime);
        IF (AvailableMR <= AvailableTo) AND BasedOnTime THEN
          EXIT(FALSE)
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ShowDocuments@1100529007();
    VAR
      RecRef@1100525000 : RecordRef;
      DocumentFilters@1100525001 : Codeunit 11012432;
    BEGIN
      //DP00899
      TESTFIELD("Plant No.");
      TESTFIELD("Line No.");
      RecRef.GETTABLE(Rec);
      IF Rec.CURRENTCOMPANY <> COMPANYNAME THEN
        DocumentFilters.SetDocumentCompany(Rec.CURRENTCOMPANY);
      DocumentFilters.CreateTempFilterAndExecute1(RecRef, "Department Code", FALSE, TRUE);
    END;

    PROCEDURE FillMeterReading@1100529752();
    VAR
      PlantMeterType@1100529750 : Record 11229921;
    BEGIN
      //**4PS.sn BI049 KD 03-01-17
      IF CurrFieldNo <> FIELDNO("Plant Meter") THEN
        "Plant Meter" := '';
      "Meter Reading Type" := '';

      PlantMeterType.SETRANGE("Plant Type", "Plant Type");
      PlantMeterType.SETRANGE("Plant No.", "Plant No.");
      IF CurrFieldNo = FIELDNO("Plant Meter") THEN
        PlantMeterType.SETRANGE("Plant Meter", "Plant Meter");
      IF PlantMeterType.ISEMPTY THEN
        EXIT;
      IF PlantMeterType.COUNT > 1 THEN
        EXIT;

      PlantMeterType.FINDFIRST;
      IF CurrFieldNo <> FIELDNO("Plant Meter") THEN
        "Plant Meter" := PlantMeterType."Plant Meter";
      "Meter Reading Type" := PlantMeterType."Plant Meter Type";
      //**4PS.en BI049 KD 03-01-17
    END;

    PROCEDURE AvailableMeterReading@1100529003() : Decimal;
    VAR
      PlantMeterType@1100529002 : Record 11229921;
      BasedOnTime@1100529001 : Boolean;
      AvailableMR@1100529000 : Decimal;
    BEGIN
      PlantMeterType.CHANGECOMPANY(CURRENTCOMPANY);
      AvailableMR :=
        PlantMeterType.AvailableMeterReadingUntilNextInspection("Plant Type", "Plant No.", "Plant Meter", "Meter Reading Type", BasedOnTime);
      IF BasedOnTime THEN
        EXIT(AvailableMR);
      EXIT(0);
    END;

    PROCEDURE FillMeterReadingFromInspectionType@1100528500();
    VAR
      InspectionType@1100528500 : Record 11012562;
      PlantMeterType@1100528501 : Record 11229921;
    BEGIN
      IF "Inspection Type" = '' THEN
        EXIT;
      IF NOT InspectionType.GET("Inspection Type") THEN
        EXIT;
      IF InspectionType."Meter Reading Type" = '' THEN
        EXIT;
      "Meter Reading Type" := InspectionType."Meter Reading Type";
      PlantMeterType.SETRANGE("Plant Type", "Plant Type");
      PlantMeterType.SETRANGE("Plant No.", "Plant No.");
      PlantMeterType.SETRANGE("Plant Meter Type", "Meter Reading Type");
      IF PlantMeterType.COUNT = 1 THEN BEGIN
        PlantMeterType.FINDFIRST;
        "Plant Meter" := PlantMeterType."Plant Meter";
      END ELSE BEGIN
        IF "Plant Meter" <> '' THEN BEGIN
          IF NOT PlantMeterType.GET("Plant Type", "Plant No.", "Plant Meter", "Meter Reading Type") THEN
            "Plant Meter" := '';
         END;
      END;
    END;

    PROCEDURE FillDefaultMaintenanceScheme@1100529006();
    VAR
      PlantMaintenanceScheme@1100529000 : Record 11072677;
    BEGIN
      IF "Inspection Type" = '' THEN
        EXIT;
      PlantMaintenanceScheme.SETRANGE("Plant Type", "Plant Type");
      PlantMaintenanceScheme.SETRANGE("Plant No.", "Plant No.");
      PlantMaintenanceScheme.SETRANGE("Inspection Type", "Inspection Type");
      IF PlantMaintenanceScheme.FINDFIRST THEN BEGIN  // Only if only one is found (it is not usual that a plant number
        IF PlantMaintenanceScheme.NEXT = 0 THEN       // has more than one maint. scheme with same inspection type)
          "Maintenance Scheme" := PlantMaintenanceScheme."Maintenance Scheme";
      END;
    END;

    PROCEDURE LookupMaintenanceScheme@1100529014(EditableMode@1100529002 : Boolean);
    VAR
      PlantMaintenanceScheme@1100529000 : Record 11072677;
      PlantMaintenanceSchemes@1100529001 : Page 11125954;
    BEGIN
      IF "Inspection Type" = '' THEN
        EXIT;
      PlantMaintenanceScheme.FILTERGROUP(2);
      PlantMaintenanceScheme.SETRANGE("Plant Type", "Plant Type");
      PlantMaintenanceScheme.SETRANGE("Plant No.", "Plant No.");
      PlantMaintenanceScheme.SETRANGE("Inspection Type", "Inspection Type");
      PlantMaintenanceScheme.FILTERGROUP(0);
      PlantMaintenanceScheme."Plant Type" := "Plant Type";
      PlantMaintenanceScheme."Plant No." := "Plant No.";
      PlantMaintenanceScheme."Maintenance Scheme" := "Maintenance Scheme";
      PlantMaintenanceSchemes.SETTABLEVIEW(PlantMaintenanceScheme);
      PlantMaintenanceSchemes.SETRECORD(PlantMaintenanceScheme);
      PlantMaintenanceSchemes.EDITABLE(FALSE);
      PlantMaintenanceSchemes.SetSelectionLevel(TRUE);
      PlantMaintenanceSchemes.LOOKUPMODE(TRUE);
      IF NOT EditableMode THEN
        PlantMaintenanceSchemes.RUNMODAL
      ELSE BEGIN
        IF PlantMaintenanceSchemes.RUNMODAL = ACTION::LookupOK THEN
          VALIDATE("Maintenance Scheme", PlantMaintenanceScheme."Maintenance Scheme");
      END;
    END;

    PROCEDURE GetMaintenanceSchemeInspectionList@1100529008() : Code[20];
    VAR
      PlantMaintenanceScheme@1100529000 : Record 11072677;
    BEGIN
      IF ("Maintenance Scheme" <> '') AND ("Plant Type" <> '') AND ("Plant No." <> '') THEN BEGIN
        IF PlantMaintenanceScheme.GET("Plant Type", "Plant No.", "Maintenance Scheme") THEN BEGIN
          IF PlantMaintenanceScheme."Base Inspection List" <> '' THEN
            EXIT(PlantMaintenanceScheme."Base Inspection List");
        END;
      END;
      EXIT('');
    END;

    PROCEDURE GetMaintenanceSchemeNoOfActivities@1100529010() : Integer;
    VAR
      TmpPlantMaintSchemeVerLine@1100529000 : TEMPORARY Record 11072675;
      PlantMaintenanceManagement@1100529001 : Codeunit 11012872;
    BEGIN
      IF ("Maintenance Scheme" <> '') AND ("Plant Type" <> '') AND ("Plant No." <> '') THEN BEGIN
        PlantMaintenanceManagement.GetApplicableActivities(
          TmpPlantMaintSchemeVerLine, TmpPlantMaintSchemeVerLine.Level::"Plant Number",
          "Plant Type", "Plant No.", "Maintenance Scheme", MaintenanceSchemeIndexDate, FALSE, '');
        IF NOT TmpPlantMaintSchemeVerLine.ISEMPTY THEN
          EXIT(TmpPlantMaintSchemeVerLine.COUNT);
      END;
      EXIT(0);
    END;

    PROCEDURE GetMaintenanceSchemeNoOfInspections@1100529012() : Integer;
    VAR
      TmpPlantInspectionLine@1100529001 : TEMPORARY Record 11072684;
      PlantMaintenanceManagement@1100529002 : Codeunit 11012872;
      InspectionList@1100529000 : Code[20];
    BEGIN
      IF ("Maintenance Scheme" <> '') AND ("Plant Type" <> '') AND ("Plant No." <> '') THEN BEGIN
        InspectionList := GetMaintenanceSchemeInspectionList;
        IF InspectionList = '' THEN
          EXIT(0);
        PlantMaintenanceManagement.GetApplicableInspectionLines(
          TmpPlantInspectionLine, TmpPlantInspectionLine.Level::"Plant Number",
          "Plant Type", "Plant No.", "Maintenance Scheme", MaintenanceSchemeIndexDate, InspectionList, FALSE, '');
        IF NOT TmpPlantInspectionLine.ISEMPTY THEN
          EXIT(TmpPlantInspectionLine.COUNT);
      END;
    END;

    PROCEDURE ShowAllActivitiesMaintScheme@1100529004();
    VAR
      PlantMaintSchemeVersion@1100529001 : Record 11072674;
      TempPlantMaintSchemeVersion@1100529000 : Page 11229870;
    BEGIN
      IF "Maintenance Scheme" = '' THEN
        EXIT;
      TESTFIELD("Plant Type");
      TESTFIELD("Plant No.");
      TempPlantMaintSchemeVersion.SetSource(
        PlantMaintSchemeVersion.Level::"Plant Number",
        "Plant Type", "Plant No.", "Maintenance Scheme", MaintenanceSchemeIndexDate, FALSE, FALSE, '');
      TempPlantMaintSchemeVersion.RUNMODAL;
    END;

    PROCEDURE ShowAllInspectionsMaintScheme@1100529001();
    VAR
      PlantMaintSchemeVersion@1100529001 : Record 11072674;
      TempPlantInspectionLines@1100529000 : Page 11229869;
      InspectionList@1100529003 : Code[20];
    BEGIN
      IF "Maintenance Scheme" = '' THEN
        EXIT;
      TESTFIELD("Plant Type");
      TESTFIELD("Plant No.");
      InspectionList := GetMaintenanceSchemeInspectionList;
      IF InspectionList = '' THEN
        EXIT;
      TempPlantInspectionLines.SetSource(
        PlantMaintSchemeVersion.Level::"Plant Number",
        "Plant Type", "Plant No.", "Maintenance Scheme", InspectionList, MaintenanceSchemeIndexDate, FALSE, FALSE, '');
      TempPlantInspectionLines.RUNMODAL;
    END;

    LOCAL PROCEDURE MaintenanceSchemeIndexDate@1100529013() : Date;
    BEGIN
      IF "Inspected on" <> 0D THEN
        EXIT("Inspected on");
      EXIT(WORKDATE);
    END;

    PROCEDURE DetermineFlowFieldsInOtherCompany@1100529016();
    VAR
      PlantNumber@1100529000 : Record 11012552;
      InspectionType@1100529001 : Record 11012562;
      Inspection@1100529002 : Record 11012564;
      PlantInventory@1100529003 : Record 11012555;
      PlantLocation@1100529004 : Record 11012554;
      PlantStndMaintenanceScheme@1100529005 : Record 11072673;
    BEGIN
      IF CURRENTCOMPANY = COMPANYNAME THEN
        EXIT;

      PlantNumber.CHANGECOMPANY(CURRENTCOMPANY);
      InspectionType.CHANGECOMPANY(CURRENTCOMPANY);
      Inspection.CHANGECOMPANY(CURRENTCOMPANY);
      PlantInventory.CHANGECOMPANY(CURRENTCOMPANY);
      PlantLocation.CHANGECOMPANY(CURRENTCOMPANY);
      PlantStndMaintenanceScheme.CHANGECOMPANY(CURRENTCOMPANY);

      "Plant Description" := '';
      "Inspection No." := '';
      Description := '';
      "Last Inspection Date" := 0D;
      "Present Location" := '';
      "Present Location Description" := '';
      "Current Rate Code" := '';
      "Maintenance Scheme Description" := '';

      IF PlantNumber.GET("Plant Type", "Plant No.") THEN BEGIN
        "Plant Description" := PlantNumber.Description;
        "Inspection No." := PlantNumber."Inspection No.";
      END;
      IF InspectionType.GET("Inspection Type") THEN
        Description := InspectionType.Description;

      Inspection.SETCURRENTKEY("Plant Type", "Plant No.", "Inspection Type", "Inspected on");
      Inspection.SETRANGE("Plant Type", "Plant Type");
      Inspection.SETRANGE("Plant No.", "Plant No.");
      Inspection.SETRANGE("Inspection Type", "Inspection Type");
      Inspection.SETFILTER("Inspected on", '<>%1', 0D);
      IF Inspection.FINDLAST THEN
        "Last Inspection Date" := Inspection."Inspected on";

      PlantInventory.SETCURRENTKEY(Removed, "Plant Type", "Plant No.", "Rate Code", Location);
      PlantInventory.SETRANGE(Removed, FALSE);
      PlantInventory.SETRANGE("Plant Type", "Plant Type");
      PlantInventory.SETRANGE("Plant No.", "Plant No.");
      IF PlantInventory.FINDLAST THEN BEGIN
        "Present Location" := PlantInventory.Location;
        IF PlantLocation.GET("Present Location") THEN
          "Present Location Description" := PlantLocation.Description;
        "Current Rate Code" := PlantInventory."Rate Code";
      END;

      IF PlantStndMaintenanceScheme.GET("Maintenance Scheme") THEN
        "Maintenance Scheme Description" := PlantStndMaintenanceScheme.Description;
    END;

    BEGIN
    {
      4PS 03-01-17 UKR-C25593 KD: Multiple meter readings (BI049) - Added field "Plant Meter"; changed field "Meter Reading Type" (Flowfield -> Normal);
                                                                    changed triggers ActualMeterReading, ActualMeterReadingUnit, NextMeterReadingAt, DrillDownMeterReading
                                                                    added trigger FillMeterReading
    }
    END.
  }
}

