OBJECT Codeunit 11125706 Proj. Activ. Cap. Common Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528401 : TextConst 'DEU=Gesamtmenge Stunden pro Tag von %1 %2 muss gr”sser als 0 sein.;ENU=Total Number of Hours by Day of %1 %2 should be greater than 0.;NLD=Totaal aantal uren per dag van %1 %2 moet groter zijn dan 0.;NOR=Totalt antall timer per dag for %1 %2 skal v‘re mer enn 0;SVE=Totalt antal timmar efter dag av %1 %2 b”r vara st”rre „n 0.';
      Text001@1100528402 : TextConst 'DEU=%1 berechnen...;ENU=Calculating %1...;NLD=%1 berekenen...;NOR=Beregner %1...;SVE=Ber„knar %1ÿ...';

    PROCEDURE GetResourceDescription@1100525007(TableID@1100525005 : Integer;ResourceType@1100525004 : Integer;ResourceCode@1100525003 : Code[20];PlantNo@1100525011 : Code[10]) : Text[100];
    VAR
      TeamTypeResourceRec@1100525007 : Record 11125707;
      TeamResourceRec@1100525015 : Record 11012440;
      ReqActCapRec@1100525008 : Record 11125708;
      ReqActCapByDateRec@1100525009 : Record 11125709;
      AssignActCapRec@1100525013 : Record 11125710;
      AssignActCapByDateRec@1100525016 : Record 11125711;
      TeamTypeRec@1100525002 : Record 11125706;
      TeamRec@1100525014 : Record 11012437;
      DisciplineRec@1100525000 : Record 11020204;
      EmplRec@1100525010 : Record 5200;
      PlantTypeRec@1100525001 : Record 11012551;
      PlantNoRec@1100525012 : Record 11012552;
      VendorRec@1100528400 : Record 23;
      TypeResource@1100525006 : ',TeamType,Team,Discipline,Employee,Plant,Subcontractor';
    BEGIN
      IF ResourceCode = ''  THEN
        EXIT('');

      CASE TableID OF
        DATABASE::"Proj. Plan. Team Type Resource":
          CASE ResourceType OF
            TeamTypeResourceRec."Resource Type"::Discipline:  TypeResource := TypeResource::Discipline;
            TeamTypeResourceRec."Resource Type"::Plant:  TypeResource := TypeResource::Plant;
          END;
        DATABASE::"Project Planning Team Resource":
          CASE ResourceType OF
            TeamResourceRec."Resource Type"::Employee:  TypeResource := TypeResource::Employee;
            TeamResourceRec."Resource Type"::Plant:  TypeResource := TypeResource::Plant;
          END;
        DATABASE::"Requested Activity Capacity":
          CASE ResourceType OF
            ReqActCapRec."Resource Type"::TeamType:  TypeResource := TypeResource::TeamType;
            ReqActCapRec."Resource Type"::Discipline:  TypeResource := TypeResource::Discipline;
            ReqActCapRec."Resource Type"::Plant:  TypeResource := TypeResource::Plant;
          END;
        DATABASE::"Requested Activ. Cap. by Day":
          CASE ResourceType OF
            ReqActCapByDateRec."Resource Type"::Discipline:  TypeResource := TypeResource::Discipline;
            ReqActCapByDateRec."Resource Type"::Plant:  TypeResource := TypeResource::Plant;
          END;
        DATABASE::"Assigned Activity Capacity":
          CASE ResourceType OF
            AssignActCapRec."Resource Type"::Team:  TypeResource := TypeResource::Team;
            AssignActCapRec."Resource Type"::Employee:  TypeResource := TypeResource::Employee;
            AssignActCapRec."Resource Type"::Plant:  TypeResource := TypeResource::Plant;
            AssignActCapRec."Resource Type"::Subcontractor:  TypeResource := TypeResource::Subcontractor;
          END;
        DATABASE::"Assigned Activ. Cap. by Day":
          CASE ResourceType OF
            AssignActCapByDateRec."Resource Type"::Employee:  TypeResource := TypeResource::Employee;
            AssignActCapByDateRec."Resource Type"::Plant:  TypeResource := TypeResource::Plant;
          END;
      END;

      CASE TypeResource OF
        TypeResource::TeamType:
          IF TeamTypeRec.GET(ResourceCode) THEN
            EXIT(TeamTypeRec.Description);
        TypeResource::Team:
          IF TeamRec.GET(ResourceCode) THEN
            EXIT(TeamRec.Name);
        TypeResource::Discipline:
          IF DisciplineRec.GET(ResourceCode) THEN
            EXIT(DisciplineRec.Description);
        TypeResource::Employee:
          IF EmplRec.GET(ResourceCode) THEN
            EXIT(EmplRec."Full Name");
        TypeResource::Plant:
          BEGIN
            IF PlantNo <> '' THEN BEGIN
              IF PlantNoRec.GET(ResourceCode, PlantNo) THEN BEGIN
                IF PlantNoRec.Description <> '' THEN
                  EXIT(PlantNoRec.Description);
              END;
            END;
            IF PlantTypeRec.GET(ResourceCode) THEN
              EXIT(PlantTypeRec.Description);
          END;
        TypeResource::Subcontractor:
          IF VendorRec.GET(ResourceCode) THEN
            EXIT(VendorRec.Name);
      END;

      EXIT('');
    END;

    PROCEDURE GetReqActCapHoursFactor@1100528406(RequestedActivityCapacity@1100528400 : Record 11125708) HoursFactor : Decimal;
    VAR
      ProjPlanTeamTypeResource@1100528401 : Record 11125707;
    BEGIN
      RequestedActivityCapacity.TESTFIELD(Quantity);

      CASE RequestedActivityCapacity."Resource Type" OF
        RequestedActivityCapacity."Resource Type"::TeamType:
          BEGIN
            HoursFactor :=
              CalcTeamTypeFTE(RequestedActivityCapacity."Resource Code") * RequestedActivityCapacity.Quantity;
            IF (HoursFactor <= 0) THEN
              ERROR(Text000, ProjPlanTeamTypeResource.TABLECAPTION, RequestedActivityCapacity."Resource Code");
          END;
        RequestedActivityCapacity."Resource Type"::Discipline,
        RequestedActivityCapacity."Resource Type"::Plant:
          HoursFactor := RequestedActivityCapacity.Quantity;
      END;
    END;

    PROCEDURE GetReqActCapResourceHoursByDay@1100525000(ReqActCapRec@1100525000 : Record 11125708) HoursByDay : Decimal;
    VAR
      HrsDay@1100525002 : Decimal;
    BEGIN
      HrsDay := GetReqActCapDiffOrNormHrsByDay(ReqActCapRec."Hours by Day");
      CASE ReqActCapRec."Resource Type" OF
        ReqActCapRec."Resource Type"::TeamType:
          HoursByDay := CalcTeamTypeLaborHoursByDay(ReqActCapRec."Resource Code", HrsDay);
        ReqActCapRec."Resource Type"::Discipline,
        ReqActCapRec."Resource Type"::Plant:
          HoursByDay := HrsDay;
      END;
    END;

    PROCEDURE GetReqActCapDiffOrNormHrsByDay@1100525009(DifferentHoursByDay@1100525000 : Decimal) HoursByDay : Decimal;
    BEGIN
      HoursByDay := GetHrsSetupNormHours();
      IF (DifferentHoursByDay > 0) AND (DifferentHoursByDay < HoursByDay) THEN
        HoursByDay := DifferentHoursByDay;
    END;

    PROCEDURE CalcTeamTypeLaborHoursByDay@1100525005(TeamTypeCode@1100525000 : Code[20];HoursByDay@1100525002 : Decimal) Hours : Decimal;
    BEGIN
      Hours := CalcTeamTypeFTE(TeamTypeCode) * HoursByDay;
    END;

    PROCEDURE CalcTeamTypeFTE@1100528401(TeamTypeCode@1100528400 : Code[20]) TeamTypeFTE : Decimal;
    VAR
      TeamTypeResource@1100528401 : Record 11125707;
    BEGIN
      TeamTypeResource.SETRANGE("Team Type Code", TeamTypeCode);
      TeamTypeResource.SETRANGE("Resource Type", TeamTypeResource."Resource Type"::Discipline);
      IF TeamTypeResource.FINDSET THEN BEGIN
        REPEAT
          TeamTypeFTE := TeamTypeFTE + ROUND(TeamTypeResource.Quantity * (TeamTypeResource.Percentage / 100), 0.01);
        UNTIL TeamTypeResource.NEXT = 0;
      END;
    END;

    PROCEDURE CalcTeamLaborHoursByDay@1100528403(TeamCode@1100528400 : Code[20];HoursByDay@1100528401 : Decimal) Hours : Decimal;
    BEGIN
      Hours := CalcTeamFTE(TeamCode) * HoursByDay;
    END;

    PROCEDURE CalcTeamFTE@1100528404(TeamCode@1100528400 : Code[20]) TeamFTE : Decimal;
    VAR
      TeamResource@1100528401 : Record 11012440;
    BEGIN
      TeamResource.SETRANGE("Team Code", TeamCode);
      TeamResource.SETRANGE("Resource Type", TeamResource."Resource Type"::Employee);
      IF TeamResource.FINDSET THEN BEGIN
        REPEAT
          TeamFTE := TeamFTE + ROUND((TeamResource.Percentage / 100), 0.01);
        UNTIL TeamResource.NEXT = 0;
      END;
    END;

    PROCEDURE GetHrsSetupNormHours@1100525002() : Decimal;
    VAR
      HRSetupRec@1100525000 : Record 5218;
    BEGIN
      HRSetupRec.GET;
      HRSetupRec.TESTFIELD("Norm Hours");
      EXIT(HRSetupRec."Norm Hours");
    END;

    PROCEDURE GetCalendarCode@1100525001() : Code[10];
    VAR
      CompInfoRec@1100525001 : Record 79;
    BEGIN
      CompInfoRec.GET;
      IF CompInfoRec."Base Calendar Code" <> '' THEN
        EXIT(CompInfoRec."Base Calendar Code");

      EXIT('');
    END;

    PROCEDURE DateIsWorkingDate@1100528412(CalendarCode@1210190002 : Code[10];Date@1210190003 : Date) : Boolean;
    VAR
      CalendarManagement@1210190000 : Codeunit 7600;
      DummyDescr@1210190004 : Text[50];
    BEGIN
      EXIT(NOT CalendarManagement.CheckDateStatus(CalendarCode, Date, DummyDescr));
    END;

    PROCEDURE CheckResourceInTeamOnDate@1100525004(TeamCode@1100525001 : Code[20];ResourceType@1100525005 : Option;ResourceCode@1100525002 : Code[20];PlantNo@1100525003 : Code[10];PlanDate@1100525004 : Date) : Boolean;
    VAR
      TeamResPeriodRec@1100525000 : Record 11125714;
    BEGIN
      TeamResPeriodRec.SETRANGE("Team Code", TeamCode);
      TeamResPeriodRec.SETRANGE("Resource Type", ResourceType);
      TeamResPeriodRec.SETRANGE("Resource Code", ResourceCode);
      IF ResourceType <> TeamResPeriodRec."Resource Type"::Plant THEN
        TeamResPeriodRec.SETRANGE("Plant No.", '')
      ELSE
        TeamResPeriodRec.SETRANGE("Plant No.", PlantNo);
      TeamResPeriodRec.SETFILTER("Date in Team", '<=%1', PlanDate);
      TeamResPeriodRec.SETFILTER("Date out of Team", '>%1|%2', PlanDate, 0D);
      IF NOT TeamResPeriodRec.ISEMPTY THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE CalcAvailableEmplHoursOnDate@1100525003(EmplNo@1100525001 : Code[20];PlanDate@1100525002 : Date) : Decimal;
    VAR
      EmplRec@1100525003 : Record 5200;
      EmplTimeTableRec@1100525000 : Record 11012923;
      EmplAbsenceRec@1100525005 : Record 5207;
      WorkTimeFrom@1100525011 : Time;
      WorkTimeUntil@1100525012 : Time;
      PauseTimeFrom@1100525014 : Time;
      PauseTimeUntil@1100525013 : Time;
      TimeFrom@1100525009 : Time;
      TimeUntil@1100525008 : Time;
      Pause@1100525007 : Boolean;
      DayNo@1100525004 : Integer;
      WorkHours@1100525010 : Decimal;
      AbsenceHours@1100525006 : Decimal;
    BEGIN
      IF (EmplNo = '') OR (PlanDate = 0D) THEN
        EXIT(0);

      IF NOT EmplRec.GET(EmplNo) THEN
        EXIT(0);
      IF (PlanDate < EmplRec."Employment Date") OR
         ((PlanDate >= EmplRec."Termination Date") AND (EmplRec."Termination Date" <> 0D)) OR
         ((PlanDate >= EmplRec."Inactive Date") AND (EmplRec."Inactive Date" <> 0D))
      THEN
        EXIT(0);
      //IF NOT (EmplRec.Schedule IN [EmplRec.Schedule::Project, EmplRec.Schedule::Both]) THEN
      //  EXIT(0);

      EmplTimeTableRec.SETRANGE("Employee No.", EmplNo);
      EmplTimeTableRec.SETFILTER("Effective Date", '..%1', PlanDate);
      IF NOT EmplTimeTableRec.FINDLAST THEN
        EXIT(0);

      Pause := FALSE;
      WorkHours := 0;
      DayNo := DATE2DWY(PlanDate, 1);
      CASE DayNo OF
        1:
          BEGIN
           WorkHours := EmplTimeTableRec.Monday;
           WorkTimeFrom := EmplTimeTableRec."Monday Work From";
           WorkTimeUntil := EmplTimeTableRec."Monday Work Until";
           PauseTimeFrom := EmplTimeTableRec."Monday Pause From";
           PauseTimeUntil := EmplTimeTableRec."Monday Pause Until";
          END;
        2:
          BEGIN
           WorkHours := EmplTimeTableRec.Tuesday;
           WorkTimeFrom := EmplTimeTableRec."Tuesday Work From";
           WorkTimeUntil := EmplTimeTableRec."Tuesday Work Until";
           PauseTimeFrom := EmplTimeTableRec."Tuesday Pause From";
           PauseTimeUntil := EmplTimeTableRec."Tuesday Pause Until";
          END;
        3:
          BEGIN
           WorkHours := EmplTimeTableRec.Wednesday;
           WorkTimeFrom := EmplTimeTableRec."Wednesday Work From";
           WorkTimeUntil := EmplTimeTableRec."Wednesday Work Until";
           PauseTimeFrom := EmplTimeTableRec."Wednesday Pause From";
           PauseTimeUntil := EmplTimeTableRec."Wednesday Pause Until";
          END;
        4:
          BEGIN
           WorkHours := EmplTimeTableRec.Thursday;
           WorkTimeFrom := EmplTimeTableRec."Thursday Work From";
           WorkTimeUntil := EmplTimeTableRec."Thursday Work Until";
           PauseTimeFrom := EmplTimeTableRec."Thursday Pause From";
           PauseTimeUntil := EmplTimeTableRec."Thursday Pause Until";
          END;
        5:
          BEGIN
           WorkHours := EmplTimeTableRec.Friday;
           WorkTimeFrom := EmplTimeTableRec."Friday Work From";
           WorkTimeUntil := EmplTimeTableRec."Friday Work Until";
           PauseTimeFrom := EmplTimeTableRec."Friday Pause From";
           PauseTimeUntil := EmplTimeTableRec."Friday Pause Until";
          END;
        6:
          BEGIN
           WorkHours := EmplTimeTableRec.Saturday;
           WorkTimeFrom := EmplTimeTableRec."Saturday Work From";
           WorkTimeUntil := EmplTimeTableRec."Saturday Work Until";
           PauseTimeFrom := EmplTimeTableRec."Saturday Pause From";
           PauseTimeUntil := EmplTimeTableRec."Saturday Pause Until";
          END;
        7:
          BEGIN
           WorkHours := EmplTimeTableRec.Sunday;
           WorkTimeFrom := EmplTimeTableRec."Sunday Work From";
           WorkTimeUntil := EmplTimeTableRec."Sunday Work Until";
           PauseTimeFrom := EmplTimeTableRec."Sunday Pause From";
           PauseTimeUntil := EmplTimeTableRec."Sunday Pause Until";
          END;
      END;
      IF (PauseTimeFrom <> 0T) AND (PauseTimeUntil <> 0T) THEN
        Pause := TRUE;

      IF WorkHours > 0 THEN BEGIN
        EmplAbsenceRec.SETCURRENTKEY("Employee No.","From Date");
        EmplAbsenceRec.SETRANGE("Employee No.", EmplNo);
        EmplAbsenceRec.SETFILTER("From Date", '..%1', PlanDate);
        EmplAbsenceRec.SETFILTER("To Date", '%1..', PlanDate);
        IF EmplAbsenceRec.FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            TimeFrom := WorkTimeFrom;
            IF EmplAbsenceRec."From Time" > TimeFrom THEN
              TimeFrom := EmplAbsenceRec."From Time";
            TimeUntil := WorkTimeUntil;
            IF (EmplAbsenceRec."Until Time" < TimeUntil) AND (EmplAbsenceRec."Until Time" <> 0T) THEN
              TimeUntil := EmplAbsenceRec."Until Time";
            IF (TimeUntil > TimeFrom) THEN BEGIN
              AbsenceHours := (TimeUntil - TimeFrom) / 3600000;
              IF Pause THEN BEGIN
                TimeFrom := PauseTimeFrom;
                IF EmplAbsenceRec."From Time" > TimeFrom THEN
                  TimeFrom := EmplAbsenceRec."From Time";
                TimeUntil := PauseTimeUntil;
                IF (EmplAbsenceRec."Until Time" < TimeUntil) AND (EmplAbsenceRec."Until Time" <> 0T) THEN
                  TimeUntil := EmplAbsenceRec."Until Time";
                IF (TimeUntil > TimeFrom) THEN
                  AbsenceHours := AbsenceHours - (TimeUntil - TimeFrom) / 3600000;
              END;
            END;
            AbsenceHours := ROUND(AbsenceHours, 0.01);
            IF AbsenceHours > 0 THEN
              WorkHours := WorkHours - AbsenceHours;
          UNTIL (EmplAbsenceRec.NEXT = 0) OR (WorkHours <= 0);
        END;
      END;

      IF WorkHours < 0 THEN
        WorkHours := 0;

      EXIT(WorkHours);
    END;

    PROCEDURE CheckPlantNoAvailableOnDate@1100525006(PlantType@1100525001 : Code[20];PlantNo@1100525002 : Code[10];PlanDate@1100525000 : Date) : Boolean;
    VAR
      PlantNoRec@1100525003 : Record 11012552;
      ExitDate@1100525005 : Date;
    BEGIN
      IF (PlantType = '') OR (PlantNo = '') OR (PlanDate = 0D) THEN
        EXIT(FALSE);
      IF NOT PlantNoRec.GET(PlantType, PlantNo) THEN
        EXIT(FALSE);
      IF (PlanDate < PlantNoRec."Receipt Date") THEN
        EXIT(FALSE);

      ExitDate := DeterminePlantNoExitDate(PlantNoRec);
      IF (ExitDate <> 0D) AND (PlanDate >= ExitDate) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DeterminePlantNoExitDate@1100525008(PlantNoRec@1100525002 : Record 11012552) : Date;
    VAR
      PlantInventRec@1100525003 : Record 11012555;
    BEGIN
      IF PlantNoRec.Posted THEN BEGIN
        PlantNoRec.CALCFIELDS("Quantity in Stock");
        IF PlantNoRec."Quantity in Stock" = 0 THEN BEGIN  //* Only unique plant is plant, so 0/1
          PlantInventRec.SETCURRENTKEY("Plant Type", "Plant No.", "Present from");
          PlantInventRec.SETRANGE("Plant Type", PlantNoRec."Plant Type");
          PlantInventRec.SETRANGE("Plant No.", PlantNoRec."No.");
          PlantInventRec.SETRANGE(Removed, TRUE);
          PlantInventRec.SETRANGE("Removal Order Type", PlantInventRec."Removal Order Type"::"Exit Order");
          IF PlantInventRec.FINDLAST THEN
            EXIT(PlantInventRec."Removed on");
        END;
      END;
      EXIT(0D);
    END;

    PROCEDURE CalculateEndingDate@1100528410(StartingDate@1100528400 : Date;Duration@1100528401 : Decimal;DifferentHoursByDay@1100528407 : Decimal) EndingDate : Date;
    VAR
      Date@1100528402 : Record 2000000007;
      JobsSetup@1100528405 : Record 315;
      ProjectTimeTable@1100528406 : Record 11020684;
      ProjectPlanningActivity@1100528410 : Record 11012431;
      HoursByDay@1100528408 : Decimal;
      Window@1100528409 : Dialog;
      Duration2@1100528404 : Decimal;
      CalendarCode@1100528403 : Code[10];
      ShowDialog@1100528412 : Boolean;
    BEGIN
      IF StartingDate = 0D THEN
        EXIT;
      IF Duration < 0 THEN
        EXIT;

      IF (Duration > 12000) AND
         (GUIALLOWED)
      THEN
        //Only show a dialog when there is a long duration.
        ShowDialog := TRUE;

      IF ShowDialog THEN
        Window.OPEN(STRSUBSTNO(Text001, ProjectPlanningActivity.FIELDCAPTION("Ending Date")));

      JobsSetup.GET;
      JobsSetup.TESTFIELD("Project Time Table");
      ProjectTimeTable.GET(JobsSetup."Project Time Table");

      Duration2 := Duration;
      EndingDate := StartingDate;
      CalendarCode := GetCalendarCode;

      Date.SETRANGE("Period Type", Date."Period Type"::Date);
      Date.SETFILTER("Period Start", '>=%1', StartingDate);

      IF Date.FINDSET THEN
        REPEAT
          IF DateIsWorkingDate(CalendarCode, Date."Period Start") THEN BEGIN
            HoursByDay := GetHoursByDay(ProjectTimeTable, Date."Period Start", DifferentHoursByDay);
            Duration2 := Duration2 - HoursByDay;
          END;
          EndingDate := Date."Period Start";
          Date.NEXT;
        UNTIL Duration2 <= 0;

      IF ShowDialog THEN
        Window.CLOSE;
    END;

    PROCEDURE CalculateDuration@1100528407(StartingDate@1100528400 : Date;EndingDate@1100528401 : Date;DifferentHoursByDay@1100528407 : Decimal) Duration : Decimal;
    VAR
      Date@1100528402 : Record 2000000007;
      JobsSetup@1100528405 : Record 315;
      ProjectTimeTable@1100528406 : Record 11020684;
      ProjectPlanningActivity@1100528403 : Record 11012431;
      CalendarCode@1100528404 : Code[10];
      HoursByDay@1100528408 : Decimal;
      Window@1100528409 : Dialog;
      ShowDialog@1100528410 : Boolean;
    BEGIN
      IF StartingDate = 0D THEN
        EXIT;
      IF EndingDate = 0D THEN
        EXIT;

      IF (EndingDate - StartingDate > 2000) AND
         (GUIALLOWED)
      THEN
        //Only show a dialog when there is a big difference between ending date and starting date.
        ShowDialog := TRUE;

      IF ShowDialog THEN
        Window.OPEN(STRSUBSTNO(Text001, ProjectPlanningActivity.FIELDCAPTION(Duration)));

      JobsSetup.GET;
      JobsSetup.TESTFIELD("Project Time Table");
      ProjectTimeTable.GET(JobsSetup."Project Time Table");

      CalendarCode := GetCalendarCode;

      Date.SETRANGE("Period Type", Date."Period Type"::Date);
      Date.SETRANGE("Period Start", StartingDate, EndingDate);

      IF Date.FINDSET THEN
        REPEAT
          IF DateIsWorkingDate(CalendarCode, Date."Period Start") THEN BEGIN
            HoursByDay := GetHoursByDay(ProjectTimeTable, Date."Period Start", DifferentHoursByDay);
            Duration := Duration + HoursByDay;
          END;
        UNTIL Date.NEXT = 0;

      IF ShowDialog THEN
        Window.CLOSE;
    END;

    PROCEDURE GetHoursByDay@1100528416(ProjectTimeTable@1100528401 : Record 11020684;Date@1100528400 : Date;DifferentHoursByDay@1100528407 : Decimal) HoursByDay : Decimal;
    BEGIN
      HoursByDay := ProjectTimeTable.GetHoursByDay(Date);
      IF (DifferentHoursByDay > 0) AND
         (DifferentHoursByDay < HoursByDay)
      THEN
        HoursByDay := DifferentHoursByDay;
    END;

    PROCEDURE GetDateOfFirstWorkingDay@1100528405(DateFrom@1100528400 : Date) FirstWorkingDate : Date;
    VAR
      PlanDate@1100528402 : Date;
      CalendarCode@1100528401 : Code[10];
    BEGIN
      IF DateFrom = 0D THEN
        EXIT;

      CalendarCode := GetCalendarCode;
      IF CalendarCode <> '' THEN BEGIN
        PlanDate := DateFrom;
        REPEAT
          IF DateIsWorkingDate(CalendarCode, PlanDate) THEN
            FirstWorkingDate := PlanDate;
          PlanDate := PlanDate + 1;
        UNTIL FirstWorkingDate > 0D;
      END;
    END;

    PROCEDURE CalculateDurationDaysAndHours@1100529400(StartingDate@1100528400 : Date;EndingDate@1100528401 : Date;DifferentHoursByDay@1100528407 : Decimal;VAR DurationDays@1100529400 : Decimal;VAR DurationHours@1100529401 : Decimal);
    VAR
      Date@1100528402 : Record 2000000007;
      JobsSetup@1100528405 : Record 315;
      ProjectTimeTable@1100528406 : Record 11020684;
      ProjectPlanningActivity@1100528403 : Record 11012431;
      CalendarCode@1100528404 : Code[10];
      HoursByDay@1100528408 : Decimal;
      Window@1100528409 : Dialog;
      ShowDialog@1100528410 : Boolean;
    BEGIN
      //**4PS.sn BI014 KD 24-10-16
      // copy from CalculateDuration
      DurationDays := 0;
      DurationHours := 0;

      IF StartingDate = 0D THEN
        EXIT;
      IF EndingDate = 0D THEN
        EXIT;

      IF (EndingDate - StartingDate > 2000) AND
         (GUIALLOWED)
      THEN
        //Only show a dialog when there is a big difference between ending date and starting date.
        ShowDialog := TRUE;

      IF ShowDialog THEN
        Window.OPEN(STRSUBSTNO(Text001, ProjectPlanningActivity.FIELDCAPTION(Duration)));

      JobsSetup.GET;
      JobsSetup.TESTFIELD("Project Time Table");
      ProjectTimeTable.GET(JobsSetup."Project Time Table");

      CalendarCode := GetCalendarCode;

      Date.SETRANGE("Period Type", Date."Period Type"::Date);
      Date.SETRANGE("Period Start", StartingDate, EndingDate);

      IF Date.FINDSET THEN
        REPEAT
          IF DateIsWorkingDate(CalendarCode, Date."Period Start") THEN BEGIN
            HoursByDay := GetHoursByDay(ProjectTimeTable, Date."Period Start", DifferentHoursByDay);
            DurationHours := DurationHours + HoursByDay;
            DurationDays += 1;
          END;
        UNTIL Date.NEXT = 0;

      IF ShowDialog THEN
        Window.CLOSE;
      //**4PS.en BI014 KD 24-10-16
    END;

    BEGIN
    {
      4PS 24-10-16 UKR-C21174 KD: Import planning activities from P6 (BI014) - Added trigger CalculateDurationDaysAndHours
    }
    END.
  }
}

