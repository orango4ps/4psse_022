OBJECT Table 11012064 Budget Summary Sheet
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012001=rimd,
                TableData 11072003=rm;
    OnInsert=VAR
               ExtensionRec@1100485001 : Record 11012004;
               OptionRec@1100485000 : Record 11012502;
               SettlementQuantity@1100528200 : Record 11072243;
             BEGIN
               IF ProjectRec.GET("Project No.") THEN BEGIN
                 "Version Date" := ProjectRec."Version Date";
                 "Currency Code":= ProjectRec."Currency Code";  //DP00883
               END;

               IF Option <> '' THEN BEGIN
                 OptionRec.SETRANGE("Project No.","Project No.");
                 OptionRec.SETRANGE(Option,Option);
                 OptionRec.SETRANGE("Plot No.", "Plot No.");
                 IF OptionRec.FINDFIRST THEN
                   "Version Date" := OptionRec."Version Date";
               END;

               IF "Contract No." <> '' THEN BEGIN
                 ExtensionRec.SETRANGE("Project No.","Project No.");
                 ExtensionRec.SETRANGE("Contract No.","Contract No.");
                 IF ExtensionRec.FINDFIRST THEN
                   "Version Date" := ExtensionRec."Version Date";
               END;

               IF "Settlement Quantity Code"  <> '' THEN BEGIN
                 SettlementQuantity.SETRANGE("Project No.","Project No.");
                 SettlementQuantity.SETRANGE(Code, "Settlement Quantity Code");
                 IF SettlementQuantity.FINDFIRST THEN
                   "Version Date" := SettlementQuantity."Version Date";
               END;
             END;

    CaptionML=[ENU=Budget Summary Sheet;
               NOR=Budsjettsammendragsark;
               SVE=Budgetsammandragsark];
  }
  FIELDS
  {
    { 5   ;   ;Summary             ;Code10        ;TableRelation="Standard Summary Sheet".Summary;
                                                   CaptionML=[ENU=Summary;
                                                              NOR=Sammendrag;
                                                              SVE=Sammanfattning];
                                                   Description=not used: transferfield table 11012064 - 11020237 }
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr.;
                                                              SVE=Projektnr];
                                                   NotBlank=No }
    { 20  ;   ;Contract No.        ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Contract No.;
                                                              NOR=Kontraktsnr;
                                                              SVE=Kontraktsnr];
                                                   NotBlank=No }
    { 22  ;   ;Plot No.            ;Code10        ;TableRelation=Plot."Plot No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Plot No.;
                                                              NOR=Tegningnr;
                                                              SVE=Ritningnr] }
    { 23  ;   ;House Model         ;Code20        ;TableRelation="House Model".Model WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=House Model;
                                                              NOR=Husmodell;
                                                              SVE=Husmodell] }
    { 24  ;   ;Option              ;Code20        ;TableRelation=Option.Option WHERE (Project No.=FIELD(Project No.),
                                                                                      Plot No.=FIELD(Plot No.),
                                                                                      House Model=FIELD(House Model),
                                                                                      Main Group=FIELD(Main Group),
                                                                                      Group=FIELD(Group),
                                                                                      Sub Group=FIELD(Sub Group));
                                                   CaptionML=[ENU=Option;
                                                              NOR=Alternativ;
                                                              SVE=Alternativ] }
    { 25  ;   ;Main Group          ;Code20        ;TableRelation="Option Main Group".Code WHERE (Project No.=FIELD(Project No.),
                                                                                                 Plot No.=FIELD(Plot No.));
                                                   CaptionML=[ENU=Main Group;
                                                              NOR=Hovedgruppe;
                                                              SVE=Huvudgrupp] }
    { 26  ;   ;Group               ;Code20        ;TableRelation="Option Group".Code WHERE (Project No.=FIELD(Project No.),
                                                                                            Plot No.=FIELD(Plot No.));
                                                   CaptionML=[ENU=Group;
                                                              NOR=Gruppe;
                                                              SVE=Grupp] }
    { 27  ;   ;Sub Group           ;Code20        ;TableRelation="Option Sub Group".Code WHERE (Project No.=FIELD(Project No.),
                                                                                                Plot No.=FIELD(Plot No.));
                                                   CaptionML=[ENU=Sub Group;
                                                              NOR=Undergruppe;
                                                              SVE=Undergrupp] }
    { 28  ;   ;Settlement Quantity Code;Code20    ;TableRelation="Settlement Quantity".Code WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Settlement Quantity Code;
                                                              SVE=Avr„kningsantalkod] }
    { 31  ;   ;Row No.             ;Code10        ;CaptionML=[ENU=Row No.;
                                                              NOR=Rad-nr;
                                                              SVE=Rad-nr];
                                                   NotBlank=Yes;
                                                   Numeric=Yes }
    { 40  ;   ;Element             ;Code20        ;TableRelation=IF (Project No.=FILTER(<>'')) "Project Element".Element WHERE (Project No.=FIELD(Project No.))
                                                                 ELSE IF (Project No.=FILTER(='')) "Base Element".Code;
                                                   OnValidate=BEGIN
                                                                ElementFormat.FormatElem(Element,2,'');
                                                                IF Element <> '' THEN BEGIN
                                                                 IF "Project No." <> '' THEN
                                                                   ProjectElementRec.GET("Project No.",Element)
                                                                 ELSE
                                                                   ElementRec.GET(Element);
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Element;
                                                              NOR=Element;
                                                              SVE=Element] }
    { 50  ;   ;Cost Type           ;Option        ;InitValue=Sundry;
                                                   OnValidate=BEGIN
                                                                IF "Cost Object" <> '' THEN BEGIN
                                                                  IF "Cost Type" <> xRec."Cost Type" THEN
                                                                    IF CONFIRM(Text001,TRUE) THEN BEGIN
                                                                      "Cost Object" := '';
                                                                    END ELSE BEGIN
                                                                      "Cost Type" := xRec."Cost Type";
                                                                      EXIT;
                                                                    END;
                                                                END;

                                                                IF (Type = Type::Surcharge) AND
                                                                   ("Cost Type" = "Cost Type"::Labor) THEN
                                                                  VALIDATE("Cost Type Filter","Cost Type Filter"::Labor);

                                                                IF ("Cost Type" <> xRec."Cost Type") THEN BEGIN
                                                                  IF ("Cost Type" = "Cost Type"::Labor) THEN
                                                                    VALIDATE("Amount/Hours", "Amount/Hours"::Hours)
                                                                  ELSE
                                                                    VALIDATE("Amount/Hours", "Amount/Hours"::Amount);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Cost Type;
                                                              NOR=Kostnadstype;
                                                              SVE=Kostnadstyp];
                                                   OptionCaptionML=[ENU=Labor,Material,Subcontracting,Plant,Sundry;
                                                                    NOR=Arbeidskraft,Materiale,Underentrepen›r,Maskin,Diverse;
                                                                    SVE=Arbetskraft,Material,Underentreprenad,Maskin,Diverse];
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry }
    { 60  ;   ;Cost Object         ;Code20        ;TableRelation=IF (Cost Type=CONST(Labor)) "Dimension Value".Code WHERE (Cost Type=FILTER(Labor),
                                                                                                                           Global Dimension No.=CONST(2),
                                                                                                                           Project Filter=FIELD(Project No.))
                                                                                                                           ELSE IF (Cost Type=CONST(Material)) "Dimension Value".Code WHERE (Cost Type=FILTER(Material),
                                                                                                                                                                                             Global Dimension No.=CONST(2),
                                                                                                                                                                                             Project Filter=FIELD(Project No.))
                                                                                                                                                                                             ELSE IF (Cost Type=CONST(Plant)) "Dimension Value".Code WHERE (Cost Type=FILTER(Plant),
                                                                                                                                                                                                                                                            Global Dimension No.=CONST(2),
                                                                                                                                                                                                                                                            Project Filter=FIELD(Project No.))
                                                                                                                                                                                                                                                            ELSE IF (Cost Type=CONST(Sundry)) "Dimension Value".Code WHERE (Cost Type=FILTER(Sundry),
                                                                                                                                                                                                                                                                                                                            Global Dimension No.=CONST(2),
                                                                                                                                                                                                                                                                                                                            Project Filter=FIELD(Project No.))
                                                                                                                                                                                                                                                                                                                            ELSE IF (Cost Type=CONST(Subcontracting)) "Dimension Value".Code WHERE (Cost Type=FILTER(Subcontracting),
                                                                                                                                                                                                                                                                                                                                                                                                    Global Dimension No.=CONST(2),
                                                                                                                                                                                                                                                                                                                                                                                                    Project Filter=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                IF "Cost Object" <> '' THEN
                                                                  IF xRec."Cost Object" = '' THEN
                                                                    GetDefaultsCostObject()
                                                                  ELSE
                                                                    IF "Cost Object" <> xRec."Cost Object" THEN
                                                                      IF CONFIRM(
                                                                        Text002 +
                                                                        Text003)
                                                                      THEN
                                                                        GetDefaultsCostObject();
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Kostobjekt;
                                                              SVE=Global dimension 2 kod];
                                                   CaptionClass='1,1,2' }
    { 70  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 80  ;   ;Type                ;Option        ;InitValue=Amount;
                                                   OnValidate=BEGIN
                                                                IF (Type = Type::Surcharge) AND
                                                                   ("Cost Type" = "Cost Type"::Labor) THEN
                                                                  VALIDATE("Cost Type Filter","Cost Type Filter"::Labor)
                                                                ELSE
                                                                  "Cost Type Filter" := "Cost Type Filter"::All;

                                                                ResetValueFields();
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              NOR=Type;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Text,Surcharge,Amount,Subtotal;
                                                                    NOR=Tekst,Tilleggsgebyr,Bel›p,Delsum;
                                                                    SVE=Text,Till„ggsavgift,Belopp,Delsumma];
                                                   OptionString=Text,Surcharge,Amount,Subtotal }
    { 85  ;   ;Kind of Surcharge   ;Option        ;InitValue=Exclusive;
                                                   CaptionML=[ENU=Kind of Surcharge;
                                                              NOR=Type tilleggsgebyr;
                                                              SVE=Typ av till„ggsavgift];
                                                   OptionCaptionML=[ENU=Exclusive,Inclusive;
                                                                    NOR=Eksklusive,Inklusive;
                                                                    SVE=Exklusive,Inklusive];
                                                   OptionString=Exclusive,Inclusive }
    { 86  ;   ;Amount/Hours        ;Option        ;OnValidate=BEGIN
                                                                IF ("Cost Type" <> "Cost Type"::Labor) THEN
                                                                  TESTFIELD("Amount/Hours", "Amount/Hours"::Amount);

                                                                IF xRec."Amount/Hours" <> "Amount/Hours" THEN BEGIN
                                                                  IF "Amount/Hours" = "Amount/Hours"::Amount THEN BEGIN
                                                                    Norm := 0;
                                                                    "Rate Code" := '';
                                                                    "Rate (LCY)" := 0;
                                                                    Hours := 0;
                                                                  END ELSE BEGIN
                                                                    "Price (LCY)" := 0;
                                                                  END;
                                                                  IF "Cost Object" <> '' THEN
                                                                    GetDefaultsCostObject();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Amount/Hours;
                                                              NOR=Bel›p/timer;
                                                              SVE=Belopp/timmar];
                                                   OptionCaptionML=[ENU=Amount,Hours;
                                                                    NOR=Bel›p,Timer;
                                                                    SVE=Belopp,Timmar];
                                                   OptionString=Amount,Hours }
    { 90  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 100 ;   ;Norm                ;Decimal       ;CaptionML=[ENU=Norm;
                                                              NOR=Norm;
                                                              SVE=Norm];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 110 ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=[ENU=Unit of Measure;
                                                              NOR=M†leenhet;
                                                              SVE=Enhet] }
    { 120 ;   ;Rate Code           ;Code10        ;TableRelation="Budget Rate" WHERE (Project Filter=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                BudgetRateManagement@1100528600 : Codeunit 11012358;
                                                                BudgetRateFoundAt@1100528601 : Text[250];
                                                              BEGIN
                                                                IF ("Cost Type" = "Cost Type"::Labor) THEN BEGIN
                                                                  IF NOT ProjectRec.GET("Project No.") THEN
                                                                    ProjectRec.INIT;
                                                                  "Rate (LCY)" := BudgetRateManagement.GetBudgetRate(
                                                                    0, "Project No.", '', '', ProjectRec."Global Dimension 1 Code", "Rate Code", "Version Date", BudgetRateFoundAt);
                                                                  VALIDATE("Rate (LCY)");  //DP00883
                                                                END ELSE BEGIN
                                                                  MESSAGE(Text003, "Cost Type");
                                                                  "Rate Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Rate Code;
                                                              NOR=Avgiftskode;
                                                              SVE=Avgiftskod] }
    { 125 ;   ;Rate (LCY)          ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Rate (FCY)" := ExchangeAmtLCYToFCY("Rate (LCY)", FALSE, TRUE, FALSE);  //DP00883
                                                              END;

                                                   CaptionML=[ENU=Rate (LCY);
                                                              SVE=Avgift (BVA)];
                                                   BlankZero=Yes;
                                                   Description=DP00883;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 130 ;   ;Price (LCY)         ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT SkipValidateFCY THEN
                                                                  "Price (FCY)" := ExchangeAmtLCYToFCY("Price (LCY)", FALSE, TRUE, FALSE); //DP00883

                                                                CASE "Cost Type" OF
                                                                  "Cost Type"::Labor:
                                                                    BEGIN
                                                                      IF NOT ("Amount/Hours" = "Amount/Hours"::Amount) THEN BEGIN
                                                                        MESSAGE(Text004);
                                                                        "Price (LCY)" := 0;
                                                                      END;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Price (LCY);
                                                              SVE=Pris (BVA)];
                                                   BlankZero=Yes;
                                                   Description=DP00883;
                                                   AutoFormatType=2 }
    { 140 ;   ;Hours               ;Decimal       ;CaptionML=[ENU=Hours;
                                                              NOR="Timer ";
                                                              SVE=Timmar];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 150 ;   ;Amount (LCY)        ;Decimal       ;CaptionML=[ENU=Amount (LCY);
                                                              NOR=Bel›p (NOK);
                                                              SVE=Belopp (BVA)];
                                                   BlankZero=Yes;
                                                   Description=DP00883;
                                                   AutoFormatType=1 }
    { 155 ;   ;Subtotal            ;Decimal       ;CaptionML=[ENU=Subtotal;
                                                              NOR=Subtotal;
                                                              SVE=Subtotal];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 160 ;   ;Cost Type Filter    ;Option        ;InitValue=All;
                                                   CaptionML=[ENU=Cost Type Filter;
                                                              NOR=Kosttypefilter;
                                                              SVE=Filter f”r kostnadstyp];
                                                   OptionCaptionML=[ENU="Labor,Material,Subcontracting,Plant,Sundry,All, ";
                                                                    NOR="Arbeidskraft,Materiale,Underentrepen›r,Maskin,Diverse,Alle, ";
                                                                    SVE="Arbetskraft,Material,Underentreprenad,Maskin,Diverse,Alla, "];
                                                   OptionString=[Labor,Material,Subcontracting,Plant,Sundry,All, ] }
    { 170 ;   ;Cost Object Filter  ;Text80        ;FieldClass=Normal;
                                                   TableRelation=IF (Cost Type Filter=FILTER(All)) "Dimension Value".Code WHERE (Global Dimension No.=CONST(2))
                                                                 ELSE IF (Cost Type Filter=FILTER(<>All)) "Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                                                                        Cost Type=FIELD(Cost Type Filter));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Global Dimension 2 Filter;
                                                              NOR=Kostnadsobjekt, filter;
                                                              SVE=Filter f”r kostnadsb„rare];
                                                   CaptionClass='1,3,2' }
    { 180 ;   ;Element Filter      ;Text80        ;TableRelation=IF (Project No.=FILTER(<>'')) "Project Element".Element WHERE (Project No.=FIELD(Project No.))
                                                                 ELSE IF (Project No.=FILTER(='')) "Base Element".Code;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Element Filter;
                                                              NOR=Elementfilter;
                                                              SVE=Elementfilter] }
    { 190 ;   ;Totaling            ;Text250       ;InitValue=NVT;
                                                   CaptionML=[ENU=Totaling;
                                                              NOR=Summering;
                                                              SVE=Summeringsintervall] }
    { 200 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=[ENU=Cost Component;
                                                              NOR=Kostnadskomponent;
                                                              SVE=Kostnadskomponent] }
    { 210 ;   ;Version Date        ;Date          ;CaptionML=[ENU=Version Date;
                                                              NOR=Versjonsdato;
                                                              SVE=Versionsdatum] }
    { 220 ;   ;Delete Line if Order;Boolean       ;CaptionML=[ENU=Delete Line if Order;
                                                              NOR=Fjerne rad hvis Ordre;
                                                              SVE=Ta bort rad f”r order] }
    { 230 ;   ;Overhead Surcharge  ;Boolean       ;CaptionML=[ENU=Overhead Surcharge;
                                                              NOR=Overheadkost;
                                                              SVE=Overheadkostnad] }
    { 240 ;   ;Adjustment Filter   ;Code10        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Adjustment Filter;
                                                              NOR=Justeringsfilter;
                                                              SVE=Justeringsfilter] }
    { 256 ;   ;Option Direct Cost Labor;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Option Budget".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                                 Plot No.=FIELD(Plot No.),
                                                                                                 House Model=FIELD(House Model),
                                                                                                 Main Group=FIELD(Main Group),
                                                                                                 Group=FIELD(Group),
                                                                                                 Sub Group=FIELD(Sub Group),
                                                                                                 Option=FIELD(Option),
                                                                                                 Cost Type=CONST(Labor),
                                                                                                 Budget Summary Line=CONST(No)));
                                                   CaptionML=[ENU=Option Direct Cost Labor;
                                                              NOR=Alt. Direktekost, arbeidskraft];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 257 ;   ;Option Direct Cost Material;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Option Budget".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                                 Plot No.=FIELD(Plot No.),
                                                                                                 House Model=FIELD(House Model),
                                                                                                 Main Group=FIELD(Main Group),
                                                                                                 Group=FIELD(Group),
                                                                                                 Sub Group=FIELD(Sub Group),
                                                                                                 Option=FIELD(Option),
                                                                                                 Cost Type=CONST(Material),
                                                                                                 Budget Summary Line=CONST(No)));
                                                   CaptionML=[ENU=Option Direct Cost Material;
                                                              NOR=Alt. Direktekost, Materiale];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 258 ;   ;Option Direct Cost Subc.;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Option Budget".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                                 Plot No.=FIELD(Plot No.),
                                                                                                 House Model=FIELD(House Model),
                                                                                                 Main Group=FIELD(Main Group),
                                                                                                 Group=FIELD(Group),
                                                                                                 Sub Group=FIELD(Sub Group),
                                                                                                 Option=FIELD(Option),
                                                                                                 Cost Type=CONST(Subcontracting),
                                                                                                 Budget Summary Line=CONST(No)));
                                                   CaptionML=[ENU=Option Direct Cost Subc.;
                                                              NOR=Alt. Direktekost, underentrepen›r];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 259 ;   ;Option Direct Cost Plant;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Option Budget".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                                 Plot No.=FIELD(Plot No.),
                                                                                                 House Model=FIELD(House Model),
                                                                                                 Main Group=FIELD(Main Group),
                                                                                                 Group=FIELD(Group),
                                                                                                 Sub Group=FIELD(Sub Group),
                                                                                                 Option=FIELD(Option),
                                                                                                 Cost Type=CONST(Plant),
                                                                                                 Budget Summary Line=CONST(No)));
                                                   CaptionML=[ENU=Option Direct Cost Plant;
                                                              NOR=Alt. Direktekost, maskin];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 260 ;   ;Option Direct Cost Sundry;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Option Budget".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                                 Plot No.=FIELD(Plot No.),
                                                                                                 House Model=FIELD(House Model),
                                                                                                 Main Group=FIELD(Main Group),
                                                                                                 Group=FIELD(Group),
                                                                                                 Sub Group=FIELD(Sub Group),
                                                                                                 Option=FIELD(Option),
                                                                                                 Cost Type=CONST(Sundry),
                                                                                                 Budget Summary Line=CONST(No)));
                                                   CaptionML=[ENU=Option Direct Cost Sundry;
                                                              NOR=Alt. Direktekost, diverse];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 261 ;   ;Option Direct Cost Summary;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Option Budget".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                                 Plot No.=FIELD(Plot No.),
                                                                                                 House Model=FIELD(House Model),
                                                                                                 Main Group=FIELD(Main Group),
                                                                                                 Group=FIELD(Group),
                                                                                                 Sub Group=FIELD(Sub Group),
                                                                                                 Option=FIELD(Option),
                                                                                                 Budget Summary Line=CONST(Yes)));
                                                   CaptionML=[ENU=Option Direct Cost Summary;
                                                              NOR=Alt. Direktekost, Sammendrag.];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 262 ;   ;Option Direct Cost Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Option Budget".Amount WHERE (Project No.=FIELD(Project No.),
                                                                                                 Plot No.=FIELD(Plot No.),
                                                                                                 House Model=FIELD(House Model),
                                                                                                 Main Group=FIELD(Main Group),
                                                                                                 Group=FIELD(Group),
                                                                                                 Sub Group=FIELD(Sub Group),
                                                                                                 Option=FIELD(Option),
                                                                                                 Budget Summary Line=CONST(No)));
                                                   CaptionML=[ENU=Option Direct Cost Amount;
                                                              NOR=Alt. Direktekost, bel›p];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 263 ;   ;Option Direct Cost Hours;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Option Budget".Hours WHERE (Project No.=FIELD(Project No.),
                                                                                                Plot No.=FIELD(Plot No.),
                                                                                                House Model=FIELD(House Model),
                                                                                                Main Group=FIELD(Main Group),
                                                                                                Group=FIELD(Group),
                                                                                                Sub Group=FIELD(Sub Group),
                                                                                                Option=FIELD(Option),
                                                                                                Cost Type=CONST(Labor),
                                                                                                Budget Summary Line=CONST(No)));
                                                   CaptionML=[ENU=Option Direct Cost Hours;
                                                              NOR=Alt. Direktekost, timer];
                                                   Editable=No }
    { 264 ;   ;Summary Total Labor ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Summary Sheet"."Amount (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                Contract No.=FIELD(Contract No.),
                                                                                                                Plot No.=FIELD(Plot No.),
                                                                                                                House Model=FIELD(House Model),
                                                                                                                Main Group=FIELD(Main Group),
                                                                                                                Group=FIELD(Group),
                                                                                                                Sub Group=FIELD(Sub Group),
                                                                                                                Option=FIELD(Option),
                                                                                                                Cost Type=CONST(Labor),
                                                                                                                Settlement Quantity Code=FIELD(Settlement Quantity Code)));
                                                   CaptionML=[ENU=Summary Total Labor;
                                                              NOR=Sammendrag, arbeidskraft totalt;
                                                              SVE=Sammandrag, arbetskraft totalt];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 265 ;   ;Summary Total Material;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Summary Sheet"."Amount (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                Contract No.=FIELD(Contract No.),
                                                                                                                Plot No.=FIELD(Plot No.),
                                                                                                                House Model=FIELD(House Model),
                                                                                                                Main Group=FIELD(Main Group),
                                                                                                                Group=FIELD(Group),
                                                                                                                Sub Group=FIELD(Sub Group),
                                                                                                                Option=FIELD(Option),
                                                                                                                Cost Type=CONST(Material),
                                                                                                                Settlement Quantity Code=FIELD(Settlement Quantity Code)));
                                                   CaptionML=[ENU=Summary Total Material;
                                                              NOR=Sammendrag, Materiale totalt;
                                                              SVE=Sammandrag, material totalt];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 266 ;   ;Summary Total Subc. ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Summary Sheet"."Amount (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                Contract No.=FIELD(Contract No.),
                                                                                                                Plot No.=FIELD(Plot No.),
                                                                                                                House Model=FIELD(House Model),
                                                                                                                Main Group=FIELD(Main Group),
                                                                                                                Group=FIELD(Group),
                                                                                                                Sub Group=FIELD(Sub Group),
                                                                                                                Option=FIELD(Option),
                                                                                                                Cost Type=CONST(Subcontracting),
                                                                                                                Settlement Quantity Code=FIELD(Settlement Quantity Code)));
                                                   CaptionML=[ENU=Summary Total Subc.;
                                                              NOR=Sammendrag, underentrepen›r totalt;
                                                              SVE=Sammandrag, legotillv. totalt];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 267 ;   ;Summary Total Plant ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Summary Sheet"."Amount (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                Contract No.=FIELD(Contract No.),
                                                                                                                Plot No.=FIELD(Plot No.),
                                                                                                                House Model=FIELD(House Model),
                                                                                                                Main Group=FIELD(Main Group),
                                                                                                                Group=FIELD(Group),
                                                                                                                Sub Group=FIELD(Sub Group),
                                                                                                                Option=FIELD(Option),
                                                                                                                Cost Type=CONST(Plant),
                                                                                                                Settlement Quantity Code=FIELD(Settlement Quantity Code)));
                                                   CaptionML=[ENU=Summary Total Plant;
                                                              NOR=Sammendrag, maskin totalt;
                                                              SVE=Sammandrag, maskin totalt];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 268 ;   ;Summary Total Sundry;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Summary Sheet"."Amount (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                Contract No.=FIELD(Contract No.),
                                                                                                                Plot No.=FIELD(Plot No.),
                                                                                                                House Model=FIELD(House Model),
                                                                                                                Main Group=FIELD(Main Group),
                                                                                                                Group=FIELD(Group),
                                                                                                                Sub Group=FIELD(Sub Group),
                                                                                                                Option=FIELD(Option),
                                                                                                                Cost Type=CONST(Sundry),
                                                                                                                Settlement Quantity Code=FIELD(Settlement Quantity Code)));
                                                   CaptionML=[ENU=Summary Total Sundry;
                                                              NOR=Sammandrag, diverse totalt;
                                                              SVE=Sammandr, div.kostn. totalt];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 269 ;   ;Summary Total Amount;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Summary Sheet"."Amount (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                Contract No.=FIELD(Contract No.),
                                                                                                                Plot No.=FIELD(Plot No.),
                                                                                                                House Model=FIELD(House Model),
                                                                                                                Main Group=FIELD(Main Group),
                                                                                                                Group=FIELD(Group),
                                                                                                                Sub Group=FIELD(Sub Group),
                                                                                                                Option=FIELD(Option),
                                                                                                                Settlement Quantity Code=FIELD(Settlement Quantity Code)));
                                                   CaptionML=[ENU=Summary Total Amount;
                                                              NOR=Sammendrag, Totalt bel›p;
                                                              SVE=Sammandrag, totalt belopp];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 270 ;   ;Summary Total Hours ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Summary Sheet".Hours WHERE (Project No.=FIELD(Project No.),
                                                                                                       Contract No.=FIELD(Contract No.),
                                                                                                       Plot No.=FIELD(Plot No.),
                                                                                                       House Model=FIELD(House Model),
                                                                                                       Main Group=FIELD(Main Group),
                                                                                                       Group=FIELD(Group),
                                                                                                       Sub Group=FIELD(Sub Group),
                                                                                                       Option=FIELD(Option),
                                                                                                       Settlement Quantity Code=FIELD(Settlement Quantity Code)));
                                                   CaptionML=[ENU=Summary Total Hours;
                                                              NOR=Sammendrag, timer totalt;
                                                              SVE=Sammandrag, timmar totalt];
                                                   Editable=No }
    { 1000;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Rate Code");
                                                                VALIDATE("Price (LCY)");
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              NOR=Valutakode;
                                                              SVE=Valutakod];
                                                   Description=DP00883;
                                                   Editable=No }
    { 1010;   ;Price (FCY)         ;Decimal       ;OnValidate=BEGIN
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Price (LCY)", ExchangeAmtFCYToLCY("Price (FCY)", FALSE, TRUE, FALSE));
                                                              END;

                                                   CaptionML=[ENU=Price;
                                                              NOR=Pris;
                                                              SVE=Pris];
                                                   BlankZero=Yes;
                                                   Description=DP00883;
                                                   AutoFormatType=2 }
    { 1020;   ;Rate (FCY)          ;Decimal       ;OnValidate=BEGIN
                                                                SetSkipValidateFCY(TRUE);
                                                                VALIDATE("Rate (LCY)", ExchangeAmtFCYToLCY("Rate (FCY)", FALSE, TRUE, FALSE));
                                                              END;

                                                   CaptionML=[ENU=Rate;
                                                              NOR=Avgift;
                                                              SVE=Avgift];
                                                   BlankZero=Yes;
                                                   Description=DP00883;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 1030;   ;Amount (FCY)        ;Decimal       ;CaptionML=[ENU=Amount;
                                                              NOR=Bel›p;
                                                              SVE=Belopp];
                                                   Description=DP00883;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Project No.,Contract No.,Plot No.,House Model,Main Group,Group,Sub Group,Option,Settlement Quantity Code,Row No.;
                                                   Clustered=Yes }
    {    ;Project No.,Contract No.,Plot No.,House Model,Main Group,Group,Sub Group,Option,Settlement Quantity Code,Cost Type,Row No.;
                                                   SumIndexFields=Amount (LCY),Hours }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1210190000 : TextConst 'ENU=Change Cost Type ?;NOR=Endre kostnadstype?;SVE=Žndra kostnadstyp?';
      Text002@1210190002 : TextConst 'ENU=Copy Data from new Cost Object?\\;NOR=Kopier data fra nytt Kostnadsobjekt?\\;SVE=Kopiera data fr†n nytt kostnadsobjekt?\\';
      Text003@1210190001 : TextConst 'ENU=PS. Alleen lege velden worden gevuld. Bestaande gegevens worden niet overschreven.;NOR=P.S. Kun tomme felt fylt ut. Eksisterende data overskrives ikke.;SVE=P.S. Endast tomma f„lt fylls i. Existerande data skrivs inte ”ver.';
      DimValRec@1210190004 : Record 349;
      ProjectElementRec@1210190007 : Record 11012010;
      ElementRec@1210190009 : Record 11012060;
      ProjectRec@1210190010 : Record 11072003;
      ElementFormat@1210190006 : Codeunit 11012022;
      DimMgt@1210190003 : Codeunit 408;
      Text004@1210190008 : TextConst 'ENU=Unit Price not allowed because Cost Type of this record is Labor !;NOR=Enhetsprisen er ikke tillatt siden Kostnadstypen for denne posten er arbeidskraft!;SVE=Enhetspriset „r inte till†tet eftersom kostnadstypen f”r denna post „r arbetskraft!';
      Text005@1210190012 : TextConst 'ENU=Adjustment;NOR=Justering;SVE=Justering';
      Text006@1210190011 : TextConst 'ENU=There are summary sheet lines present on %1 level, cannot change summary sheet.;NOR=Det finnes sammendragsarkrader p† %1-niv†, sammendragsarket kan ikke endres.;SVE=Det finns sammandragsarkrader p† niv†n %1, sammandragsarket kan inte „ndras.';
      SkipValidateFCY@1100525000 : Boolean;

    PROCEDURE GetDefaultsCostObject@3();
    VAR
      BudgetRateManagement@1100528600 : Codeunit 11012358;
      BudgetRateFoundAt@1100528601 : Text[250];
    BEGIN
      DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, "Project No.");

      IF Description = '' THEN
        Description := DimValRec.Name;
      IF "Unit of Measure" = '' THEN
        "Unit of Measure" := DimValRec."Unit of Measure";
      IF "Cost Component" = '' THEN
        "Cost Component" := DimValRec."Cost Component";

      CASE "Cost Type" OF
        "Cost Type"::Labor:
          BEGIN
            IF Norm = 0 THEN
              Norm := DimValRec.Norm;
            IF ("Rate Code" = '') AND ("Rate (LCY)" = 0) THEN BEGIN
              "Rate Code" := DimValRec."Rate Code";
              IF NOT ProjectRec.GET("Project No.") THEN
                ProjectRec.INIT;
              "Rate (LCY)" := BudgetRateManagement.GetBudgetRate(
                0, "Project No.", '', '', ProjectRec."Global Dimension 1 Code", "Rate Code", "Version Date", BudgetRateFoundAt);
            END;
          END;
        ELSE
          IF "Price (LCY)" = 0 THEN
            "Price (LCY)" := DimValRec.Price;
      END;
    END;

    PROCEDURE ResetValueFields@1210190000();
    BEGIN
      Quantity := 0;
      Norm := 0;
      "Unit of Measure" := '';
      "Rate Code" := '';
      "Rate (LCY)" := 0;
      "Price (LCY)" := 0;
      Hours := 0;
      "Amount (LCY)" := 0;
      "Cost Object Filter" := '';
      "Cost Type Filter" := "Cost Type Filter"::All;
      "Element Filter" := '';
      Totaling :='';
      "Kind of Surcharge" := "Kind of Surcharge"::Exclusive;
      Subtotal := 0;
      //DP00883.sn
      "Rate (FCY)" := 0;
      "Price (FCY)" := 0;
      "Amount (FCY)" := 0;
      //DP00883.en
    END;

    PROCEDURE CalcTotals@1(lvAdjustment@1210190002 : Code[10]);
    VAR
      lBudgLineRec@1210190000 : Record 11012001;
      lSummaryRec@1210190001 : Record 11012064;
    BEGIN
      IF Type = Type::Amount THEN BEGIN
        IF ("Cost Type" <> "Cost Type"::Labor) OR ("Amount/Hours" = "Amount/Hours"::Amount) THEN BEGIN
          Hours := 0;
          "Amount (LCY)" := ROUND(Quantity * "Price (LCY)");
          "Amount (FCY)" := ROUND(Quantity * "Price (FCY)");  //DP00883
        END ELSE BEGIN
          Hours := ROUND(Quantity * Norm);
          "Amount (LCY)" := ROUND(Quantity * Norm * "Rate (LCY)");
          "Amount (FCY)" := ROUND(Quantity * Norm * "Rate (FCY)");  //DP00883
        END;
      END;

      IF ((Type = Type::Surcharge) OR (Type = Type::Subtotal)) AND
         ("Project No." <> '') THEN
      BEGIN
        lBudgLineRec.SETCURRENTKEY("Budget Summary Line","Project No.","Extension Contract",Element,"Cost Type",
                                   "Cost Object",Option);

        lBudgLineRec.SETRANGE("Budget Summary Line", FALSE);
        lBudgLineRec.SETRANGE("Project No.","Project No.");
        lBudgLineRec.SETRANGE("Extension Contract","Contract No.");
        lBudgLineRec.SETFILTER(Element, "Element Filter");
        //lBudgLineRec.SETFILTER(Adjustment, '..%1', lvAdjustment);  //Summary Adjustment
        lBudgLineRec.SETFILTER(Adjustment, '=%1', lvAdjustment);  //Summary Adjustment (C030933)
        IF "Cost Type Filter" = "Cost Type Filter"::All THEN
          lBudgLineRec.SETRANGE("Cost Type")
        ELSE
          lBudgLineRec.SETRANGE("Cost Type", "Cost Type Filter");

        lBudgLineRec.SETFILTER("Cost Object", "Cost Object Filter");
        IF ("Contract No." = '') THEN BEGIN
          lBudgLineRec.SETFILTER(Option,'%1','');
          lBudgLineRec.SETFILTER("Settlement Quantity Code",'%1','');
        END;

        "Amount (LCY)" := 0;
        Hours := 0;
        "Amount (FCY)" := 0;  //DP00883
        IF lBudgLineRec.FINDFIRST THEN BEGIN
          lBudgLineRec.CALCSUMS("Amount (LCY)");
          "Amount (LCY)" := lBudgLineRec."Amount (LCY)";
          "Amount (FCY)" := ExchangeAmtLCYToFCY("Amount (LCY)", FALSE, FALSE, FALSE);  //DP00883
          IF ("Cost Type" = "Cost Type"::Labor) AND
             ("Amount/Hours" = "Amount/Hours"::Hours) AND
             (("Cost Type Filter" = "Cost Type Filter"::All) OR
              ("Cost Type Filter" = "Cost Type Filter"::Labor)) THEN
          BEGIN
            lBudgLineRec.SETRANGE("Cost Type", lBudgLineRec."Cost Type"::Labor);
              IF lBudgLineRec.FINDFIRST THEN BEGIN
                lBudgLineRec.CALCSUMS(Hours);
                Hours := lBudgLineRec.Hours;
              END;
          END;
        END;

        IF (Type = Type::Subtotal) AND
           (Totaling <> '' ) THEN
        BEGIN
          lSummaryRec.SETRANGE("Project No.", "Project No.");
          lSummaryRec.SETRANGE("Contract No.", "Contract No.");
          lSummaryRec.SETRANGE("Plot No.", "Plot No.");
          lSummaryRec.SETRANGE("House Model", "House Model");
          lSummaryRec.SETRANGE("Main Group", "Main Group");
          lSummaryRec.SETRANGE(Group, Group);
          lSummaryRec.SETRANGE("Sub Group", "Sub Group");
          lSummaryRec.SETRANGE(Option, Option);
          lSummaryRec.SETRANGE("Settlement Quantity Code", "Settlement Quantity Code");
          lSummaryRec.SETFILTER("Row No.", Totaling);
          IF lSummaryRec.FIND('-') THEN BEGIN
            REPEAT
              "Amount (LCY)" := "Amount (LCY)" + lSummaryRec."Amount (LCY)";
              IF ("Cost Type" = "Cost Type"::Labor) AND
                 ("Amount/Hours" = "Amount/Hours"::Hours) AND
                 (lSummaryRec."Cost Type" = lSummaryRec."Cost Type"::Labor)
              THEN
                Hours := Hours + lSummaryRec.Hours;
            UNTIL lSummaryRec.NEXT = 0;
          END;
        END;

        VALIDATE(Subtotal,"Amount (LCY)");
        ComputeSurcharge();

      END;
    END;

    PROCEDURE CalcOptionTotals@1210190003();
    VAR
      lOptBudgLineRec@1210190000 : Record 11012503;
      lSummaryRec@1210190001 : Record 11012064;
    BEGIN
      IF Type = Type::Amount THEN BEGIN
        IF ("Cost Type" <> "Cost Type"::Labor) OR ("Amount/Hours" = "Amount/Hours"::Amount) THEN BEGIN
          Hours := 0;
          "Amount (LCY)" := ROUND(Quantity * "Price (LCY)");
        END ELSE BEGIN
          Hours := ROUND(Quantity * Norm);
          "Amount (LCY)" := ROUND(Quantity * Norm * "Rate (LCY)");
        END;
      END;

      IF (Type = Type::Surcharge) OR (Type = Type::Subtotal) AND
         (Option <> '') THEN  //db, 10-06-04 (instead of project<>empty to skip templates)
      BEGIN
        lOptBudgLineRec.SETRANGE("Project No.", "Project No.");
        lOptBudgLineRec.SETRANGE("Plot No.","Plot No.");
        lOptBudgLineRec.SETRANGE("House Model", "House Model");
        lOptBudgLineRec.SETRANGE("Main Group", "Main Group");
        lOptBudgLineRec.SETRANGE(Group, Group);
        lOptBudgLineRec.SETRANGE("Sub Group", "Sub Group");
        lOptBudgLineRec.SETRANGE(Option, Option);
        lOptBudgLineRec.SETRANGE("Budget Summary Line", FALSE);
        lOptBudgLineRec.SETFILTER(Element, "Element Filter");
        IF "Cost Type Filter" = "Cost Type Filter"::All THEN
          lOptBudgLineRec.SETRANGE("Cost Type")
        ELSE
          lOptBudgLineRec.SETRANGE("Cost Type", "Cost Type Filter");
        lOptBudgLineRec.SETFILTER("Cost Object", "Cost Object Filter");

        "Amount (LCY)" := 0;
        IF lOptBudgLineRec.FINDSET THEN BEGIN
          REPEAT
            "Amount (LCY)" := "Amount (LCY)" + lOptBudgLineRec.Amount;
            IF ("Cost Type" = "Cost Type"::Labor) AND
               ("Amount/Hours" = "Amount/Hours"::Hours) AND
               (lOptBudgLineRec."Cost Type" = lOptBudgLineRec."Cost Type"::Labor)
            THEN
              Hours := Hours + lOptBudgLineRec.Hours;
          UNTIL lOptBudgLineRec.NEXT = 0;
        END;

        IF (Type = Type::Subtotal) THEN
        BEGIN
          lSummaryRec.SETRANGE("Project No.", "Project No.");
          lSummaryRec.SETRANGE("Contract No.", '');
          lSummaryRec.SETRANGE("Plot No.", "Plot No.");
          lSummaryRec.SETRANGE("House Model", "House Model");
          lSummaryRec.SETRANGE("Main Group", "Main Group");
          lSummaryRec.SETRANGE(Group, Group);
          lSummaryRec.SETRANGE("Sub Group", "Sub Group");
          lSummaryRec.SETRANGE(Option, Option);
          lSummaryRec.SETRANGE("Settlement Quantity Code", "Settlement Quantity Code");

          lSummaryRec.SETFILTER("Row No.", Totaling);
          IF lSummaryRec.FIND('-') THEN BEGIN
            REPEAT
              "Amount (LCY)" := "Amount (LCY)" + lSummaryRec."Amount (LCY)";
              IF ("Cost Type" = "Cost Type"::Labor) AND
                 ("Amount/Hours" = "Amount/Hours"::Hours) AND
                 (lSummaryRec."Cost Type" = lSummaryRec."Cost Type"::Labor)
              THEN
                Hours := Hours + lSummaryRec.Hours;
            UNTIL lSummaryRec.NEXT = 0;
          END;
        END;

        VALIDATE(Subtotal,"Amount (LCY)");
        ComputeSurcharge();
      END;
    END;

    PROCEDURE CalcSettlementQuantityTotals@1100528203();
    VAR
      lSettlementQuantityBudget@1210190000 : Record 11072244;
      lSummaryRec@1210190001 : Record 11012064;
    BEGIN
      IF Type = Type::Amount THEN BEGIN
        IF ("Cost Type" <> "Cost Type"::Labor) OR ("Amount/Hours" = "Amount/Hours"::Amount) THEN BEGIN
          Hours := 0;
          "Amount (LCY)" := ROUND(Quantity * "Price (LCY)");
        END ELSE BEGIN
          Hours := ROUND(Quantity * Norm);
          "Amount (LCY)" := ROUND(Quantity * Norm * "Rate (LCY)");
        END;
      END;

      IF (Type = Type::Surcharge) OR (Type = Type::Subtotal) AND
         ("Settlement Quantity Code" <> '') THEN  //++ to skip templates
      BEGIN
        lSettlementQuantityBudget.SETRANGE("Project No.", "Project No.");
        lSettlementQuantityBudget.SETRANGE("Settlement Quantity Code", "Settlement Quantity Code");
        lSettlementQuantityBudget.SETRANGE("Budget Summary Line", FALSE);
        lSettlementQuantityBudget.SETFILTER(Element, "Element Filter");
        IF "Cost Type Filter" = "Cost Type Filter"::All THEN
          lSettlementQuantityBudget.SETRANGE("Cost Type")
        ELSE
          lSettlementQuantityBudget.SETRANGE("Cost Type", "Cost Type Filter");
        lSettlementQuantityBudget.SETFILTER("Cost Object", "Cost Object Filter");

        "Amount (LCY)" := 0;
        IF lSettlementQuantityBudget.FINDSET THEN BEGIN
          REPEAT
            "Amount (LCY)" := "Amount (LCY)" + lSettlementQuantityBudget.Amount;
            IF ("Cost Type" = "Cost Type"::Labor) AND
               ("Amount/Hours" = "Amount/Hours"::Hours) AND
               (lSettlementQuantityBudget."Cost Type" = lSettlementQuantityBudget."Cost Type"::Labor)
            THEN
              Hours := Hours + lSettlementQuantityBudget.Hours;
          UNTIL lSettlementQuantityBudget.NEXT = 0;
        END;

        IF (Type = Type::Subtotal) THEN
        BEGIN
          lSummaryRec.SETRANGE("Project No.", "Project No.");
          lSummaryRec.SETRANGE("Contract No.", '');
          lSummaryRec.SETRANGE("Plot No.", "Plot No.");
          lSummaryRec.SETRANGE("House Model", "House Model");
          lSummaryRec.SETRANGE("Main Group", "Main Group");
          lSummaryRec.SETRANGE(Group, Group);
          lSummaryRec.SETRANGE("Sub Group", "Sub Group");
          lSummaryRec.SETRANGE(Option, Option);
          lSummaryRec.SETRANGE("Settlement Quantity Code", "Settlement Quantity Code");
          lSummaryRec.SETFILTER("Row No.", Totaling);
          IF lSummaryRec.FIND('-') THEN BEGIN
            REPEAT
              "Amount (LCY)" := "Amount (LCY)" + lSummaryRec."Amount (LCY)";
              IF ("Cost Type" = "Cost Type"::Labor) AND
                 ("Amount/Hours" = "Amount/Hours"::Hours) AND
                 (lSummaryRec."Cost Type" = lSummaryRec."Cost Type"::Labor)
              THEN
                Hours := Hours + lSummaryRec.Hours;
            UNTIL lSummaryRec.NEXT = 0;
          END;
        END;

        VALIDATE(Subtotal,"Amount (LCY)");
        ComputeSurcharge();
      END;
    END;

    PROCEDURE ComputeSurcharge@1210190008();
    VAR
      lQuantity@1210190000 : Decimal;
    BEGIN
      IF "Kind of Surcharge" = "Kind of Surcharge"::Exclusive THEN BEGIN

        IF ("Cost Type" <> "Cost Type"::Labor) OR ("Amount/Hours" = "Amount/Hours"::Amount) THEN BEGIN
          VALIDATE("Price (LCY)",ROUND("Amount (LCY)"/100.0));
          VALIDATE("Amount (LCY)",ROUND("Amount (LCY)"*Quantity/100.0));
        END ELSE BEGIN
          VALIDATE(Norm,ROUND(Hours/100.0));
          VALIDATE(Hours,ROUND(Hours*Quantity/100.0));
          VALIDATE("Amount (LCY)", ROUND(Quantity * Norm * "Rate (LCY)"));
        END;

      END ELSE BEGIN

        IF  Quantity <> 0 THEN BEGIN
          IF Quantity < 100 THEN
           lQuantity := 10000/(100-Quantity)
          ELSE
           lQuantity := 10000/(100-99.99);

          IF ("Cost Type" <> "Cost Type"::Labor) OR ("Amount/Hours" = "Amount/Hours"::Amount) THEN BEGIN
            VALIDATE("Amount (LCY)",ROUND("Amount (LCY)"*(lQuantity/100.0)*(Quantity/100.0)));
            VALIDATE("Price (LCY)",ROUND("Amount (LCY)"/Quantity));
          END ELSE BEGIN
            VALIDATE(Hours,ROUND(Hours*(lQuantity/100.0)*(Quantity/100.0)));
            VALIDATE(Norm,ROUND(Hours/Quantity));
            VALIDATE("Amount (LCY)", ROUND(Quantity * Norm * "Rate (LCY)"));
          END;
        END ELSE BEGIN
          IF ("Cost Type" <> "Cost Type"::Labor) OR ("Amount/Hours" = "Amount/Hours"::Amount) THEN BEGIN
            VALIDATE("Amount (LCY)",ROUND("Amount (LCY)"*(lQuantity/100.0)*(Quantity/100.0)));
            VALIDATE("Price (LCY)",ROUND("Amount (LCY)"/100));
            VALIDATE("Amount (LCY)",0);
          END ELSE BEGIN
            VALIDATE(Hours,ROUND(Hours*(lQuantity/100.0)*(Quantity/100.0)));
            VALIDATE(Norm,ROUND(Hours/100));
            VALIDATE(Hours,0);
            VALIDATE("Amount (LCY)",0);
          END;
        END;
      END;
    END;

    PROCEDURE UpdateControlStatus@10();
    BEGIN
      IF ProjectRec.GET("Project No.") THEN BEGIN
        IF ProjectRec."Cost Control Up to Date" THEN BEGIN
          ProjectRec."Cost Control Up to Date" := FALSE;
          ProjectRec.MODIFY;
        END;
      END;
    END;

    PROCEDURE UpdateBudgetLines@1210190001(vChangeControlStatus@1210190003 : Boolean;lvAdjustment@1210190004 : Code[10]);
    VAR
      lBudgLineRec@1210190000 : Record 11012001;
      lBudgLineRec2@1210190005 : Record 11012001;
      lSummaryRec@1210190001 : Record 11012064;
      lAdjustmentRec@1210190007 : Record 11012003;
      lLineNumber@1210190002 : Integer;
      lvAmount@1210190008 : Decimal;
      lvHours@1210190009 : Decimal;
      lvPrice@1210190006 : Decimal;
    BEGIN
      lBudgLineRec.RESET;
      lBudgLineRec.SETRANGE("Project No.","Project No.");
      lBudgLineRec.SETRANGE("Budget Summary Line", TRUE);
      lBudgLineRec.SETRANGE("Extension Contract","Contract No.");
      lBudgLineRec.SETFILTER(Adjustment,'=%1',lvAdjustment); //Summary Adjustment
      IF ("Contract No." = '') THEN BEGIN
        lBudgLineRec.SETFILTER(Option,'%1','');
        lBudgLineRec.SETFILTER("Settlement Quantity Code",'%1','');
      END;
      lBudgLineRec.DELETEALL;

      lBudgLineRec.RESET;
      lBudgLineRec.SETCURRENTKEY("Project No.",Adjustment,"Extension Contract",Option,"Line No.");
      lBudgLineRec.SETRANGE("Project No.","Project No.");
      //lBudgLineRec.SETFILTER(Adjustment,'=%1','');         //Summary Adjustment
      lBudgLineRec.SETFILTER(Adjustment,'=%1',lvAdjustment); //Summary Adjustment
      lBudgLineRec.SETRANGE("Budget Summary Line", FALSE);
      lBudgLineRec.SETRANGE("Extension Contract","Contract No.");
      IF ("Contract No." = '') THEN BEGIN
        lBudgLineRec.SETFILTER(Option,'%1','');
        lBudgLineRec.SETFILTER("Settlement Quantity Code",'%1','');
      END;

      //Summary Adjustment; lBudgetLineRec2 is used for totals (Complete summary is calculated, difference is inserted in table)
      lBudgLineRec2.RESET;
      lBudgLineRec2.INIT;
      lBudgLineRec2.SETCURRENTKEY("Project No.",Adjustment,"Extension Contract",Option,"Line No.");
      lBudgLineRec2.SETRANGE("Project No.","Project No.");
      //lBudgLineRec2.SETFILTER(Adjustment,'..%1',lvAdjustment);  //Summary Adjustment
      lBudgLineRec2.SETFILTER(Adjustment,'=%1',lvAdjustment);  //Summary Adjustment (C030933)
      lBudgLineRec2.SETRANGE("Extension Contract","Contract No.");
      IF ("Contract No." = '') THEN BEGIN
        lBudgLineRec2.SETFILTER(Option,'%1','');
        lBudgLineRec2.SETFILTER("Settlement Quantity Code",'%1','');
      END;
      lBudgLineRec2.SETRANGE("Budget Summary Line", TRUE);
      //Summary Adjustment;

      IF lBudgLineRec.FINDLAST THEN
        lLineNumber := lBudgLineRec."Line No."
      ELSE
        lLineNumber := 0;

      lBudgLineRec.RESET;
      lLineNumber := lLineNumber + 1000000;

      lSummaryRec.SETRANGE("Project No.","Project No.");
      lSummaryRec.SETRANGE("Contract No.","Contract No.");
      lSummaryRec.SETFILTER(Option,'%1','');
      lSummaryRec.SETFILTER("Settlement Quantity Code",'%1','');
      IF lvAdjustment <> '' THEN
        lSummaryRec.SETRANGE(Type, lSummaryRec.Type::Surcharge);  //C042473
      IF lSummaryRec.FIND('-') THEN BEGIN
        ProjectRec.GET("Project No.");  //*31927.n
        REPEAT
          //Summary Adjustment; Calculate current totals
          lvHours := 0;
          lvAmount := 0;
          lBudgLineRec2.SETRANGE("Budget Summary Row No.", lSummaryRec."Row No.");
          IF lBudgLineRec2.FINDSET THEN BEGIN
            REPEAT
              lvHours := lvHours + lBudgLineRec2.Hours;
              lvAmount := lvAmount + lBudgLineRec2."Amount (LCY)";
            UNTIL lBudgLineRec2.NEXT = 0;
          END;
          //Summary Adjustment
          lBudgLineRec.INIT;
          lBudgLineRec."Project No." := lSummaryRec."Project No.";
          lBudgLineRec.Adjustment := lvAdjustment;      //Summary Adjustment M18478
          lBudgLineRec."Extension Contract" := lSummaryRec."Contract No.";
          lLineNumber := lLineNumber + 10000;
          lBudgLineRec.VALIDATE("Line No.", lLineNumber);
          lBudgLineRec."Currency Code" := ProjectRec."Currency Code";  //DP00883
          lBudgLineRec.VALIDATE(Element, lSummaryRec.Element);
          lBudgLineRec."Cost Type" := lSummaryRec."Cost Type";
          lBudgLineRec."Cost Object" := lSummaryRec."Cost Object";
          lBudgLineRec."Cost Component" := lSummaryRec."Cost Component";
          lBudgLineRec.VALIDATE(Description, lSummaryRec.Description);
          lBudgLineRec."Unit of Measure" := lSummaryRec."Unit of Measure";

          IF (lSummaryRec."Cost Type" = lSummaryRec."Cost Type"::Labor) AND
             (lSummaryRec."Amount/Hours" = lSummaryRec."Amount/Hours"::Amount) THEN
          BEGIN
            lSummaryRec.Quantity := 0;
            lSummaryRec."Rate Code" := '';
            lSummaryRec."Rate (LCY)" := 0;
            lSummaryRec.Norm := 0;
            lSummaryRec.Hours := 0;
          END;

          IF lSummaryRec."Cost Type" = lSummaryRec."Cost Type"::Labor THEN BEGIN
            lBudgLineRec.VALIDATE("Rate Code", lSummaryRec."Rate Code");
            lBudgLineRec.VALIDATE("Rate (LCY)", lSummaryRec."Rate (LCY)");
            lBudgLineRec.VALIDATE(Norm, lSummaryRec.Norm);
          END ELSE BEGIN
            //Summary Adjustment
            IF (lvAmount <> 0) AND
               (lSummaryRec.Quantity <> 0) AND
               (lSummaryRec.Hours = 0) THEN
            BEGIN
              lvPrice := ROUND((lSummaryRec."Amount (LCY)"-lvAmount)/lSummaryRec.Quantity);
              lBudgLineRec.VALIDATE("Price (LCY)", lvPrice);
            //Summary Adjustment
            END ELSE BEGIN
              lBudgLineRec.VALIDATE("Price (LCY)", lSummaryRec."Price (LCY)");
            END;
          END;
          lBudgLineRec.VALIDATE(Quantity, lSummaryRec.Quantity);
          lBudgLineRec.VALIDATE(Hours, lSummaryRec.Hours-lvHours);            //Summary Adjustment
          lBudgLineRec.VALIDATE("Amount (LCY)", lSummaryRec."Amount (LCY)"-lvAmount);         //Summary Adjustment
          lBudgLineRec.VALIDATE("Budget Summary Line", TRUE);
          lBudgLineRec.UpdateExtContractStatus;
          lBudgLineRec.FillMainProject;
          lBudgLineRec."Version Date" := lSummaryRec."Version Date";
          IF lvAdjustment <> '' THEN BEGIN  //db, 08-08-11, M28282
            IF lAdjustmentRec.GET(lSummaryRec."Project No.", lvAdjustment) THEN
              lBudgLineRec."Version Date" := lAdjustmentRec."Version Date";
          END;
          //M24810 sn
          IF lSummaryRec."Overhead Surcharge" THEN BEGIN
            //lBudgLineRec."Surcharge Amnt from Summary" := lSummaryRec.Amount;  //Summary Adjustment
            lBudgLineRec."Surcharge Amnt from Summary" := lBudgLineRec."Amount (LCY)";   //Summary Adjustment
            lBudgLineRec."Overhead Surcharge from Summ." := TRUE;
          END;
          //M24810 en
          lBudgLineRec."Budget Summary Row No." := lSummaryRec."Row No."; //Summary Adjustment
          lBudgLineRec."Department Code" := ProjectRec."Global Dimension 1 Code";  //*31927
          IF NOT ((lvAdjustment <> '') AND (lSummaryRec.Type = lSummaryRec.Type::Amount) AND (lBudgLineRec."Amount (LCY)" = 0)) THEN //*33319
            lBudgLineRec.INSERT;
        UNTIL lSummaryRec.NEXT = 0 ;
      END;

      IF vChangeControlStatus THEN
        UpdateControlStatus();
    END;

    PROCEDURE UpdateOptBudgetLines@1210190004();
    VAR
      lOptBudgLineRec@1210190000 : Record 11012503;
      lSummaryRec@1210190001 : Record 11012064;
      lvDummyOptionSurchRec@1210190004 : Record 11012512;
      lvBuyerMgtCU@1210190003 : Codeunit 11012500;
      lLineNumber@1210190002 : Integer;
    BEGIN
      IF Option = '' THEN
        EXIT;

      lOptBudgLineRec.RESET;
      lOptBudgLineRec.SETRANGE("Project No.", "Project No.");
      lOptBudgLineRec.SETRANGE("Plot No.", "Plot No.");
      lOptBudgLineRec.SETRANGE("House Model", "House Model");
      lOptBudgLineRec.SETRANGE("Main Group", "Main Group");
      lOptBudgLineRec.SETRANGE(Group, Group);
      lOptBudgLineRec.SETRANGE("Sub Group", "Sub Group");
      lOptBudgLineRec.SETRANGE(Option, Option);
      lOptBudgLineRec.SETRANGE("Budget Summary Line", TRUE);
      lOptBudgLineRec.DELETEALL;

      lOptBudgLineRec.SETRANGE("Budget Summary Line");  // Reset
      IF lOptBudgLineRec.FINDLAST THEN
        lLineNumber := lOptBudgLineRec."Line No."
      ELSE
        lLineNumber := 0;
      lOptBudgLineRec.RESET;

      lLineNumber := lLineNumber + 1000000;

      lSummaryRec.SETRANGE("Project No.", "Project No.");
      lSummaryRec.SETRANGE("Contract No.", '');
      lSummaryRec.SETRANGE("Plot No.", "Plot No.");
      lSummaryRec.SETRANGE("House Model", "House Model");
      lSummaryRec.SETRANGE("Main Group", "Main Group");
      lSummaryRec.SETRANGE(Group, Group);
      lSummaryRec.SETRANGE("Sub Group", "Sub Group");
      lSummaryRec.SETRANGE(Option, Option);
      lSummaryRec.SETRANGE("Settlement Quantity Code", "Settlement Quantity Code");
      IF lSummaryRec.FIND('-') THEN BEGIN
        REPEAT
          lOptBudgLineRec.INIT;
          lOptBudgLineRec."Project No." := lSummaryRec."Project No.";
          lOptBudgLineRec.VALIDATE("Plot No.", "Plot No.");
          lOptBudgLineRec.VALIDATE("House Model", "House Model");
          lOptBudgLineRec.VALIDATE("Main Group", "Main Group");
          lOptBudgLineRec.VALIDATE(Group, Group);
          lOptBudgLineRec.VALIDATE("Sub Group", "Sub Group");
          lOptBudgLineRec.Option := Option;

          lLineNumber := lLineNumber + 10000;
          lOptBudgLineRec.VALIDATE("Line No.", lLineNumber);
          lOptBudgLineRec.VALIDATE(Element, lSummaryRec.Element);
          lOptBudgLineRec."Cost Type" := lSummaryRec."Cost Type";
          lOptBudgLineRec."Cost Object" := lSummaryRec."Cost Object";
          lOptBudgLineRec."Cost Component" := lSummaryRec."Cost Component";

          lOptBudgLineRec.VALIDATE(Description, lSummaryRec.Description);
          lOptBudgLineRec."Unit of Measure" := lSummaryRec."Unit of Measure";

          IF (lSummaryRec."Cost Type" = lSummaryRec."Cost Type"::Labor) AND
             (lSummaryRec."Amount/Hours" = lSummaryRec."Amount/Hours"::Amount) THEN
          BEGIN
            lSummaryRec.Quantity := 0;
            lSummaryRec."Rate Code" := '';
            lSummaryRec."Rate (LCY)" := 0;
            lSummaryRec.Norm := 0;
            lSummaryRec.Hours := 0;
          END;

          IF lSummaryRec."Cost Type" = lSummaryRec."Cost Type"::Labor THEN BEGIN
            lOptBudgLineRec.VALIDATE("Rate Code", lSummaryRec."Rate Code");
            lOptBudgLineRec.VALIDATE(Rate, lSummaryRec."Rate (LCY)");
            lOptBudgLineRec.VALIDATE(Norm, lSummaryRec.Norm);
          END ELSE BEGIN
            lOptBudgLineRec.VALIDATE(Price, lSummaryRec."Price (LCY)");
          END;
          lOptBudgLineRec.VALIDATE(Quantity, lSummaryRec.Quantity);
          lOptBudgLineRec.VALIDATE(Hours, lSummaryRec.Hours);
          lOptBudgLineRec.VALIDATE(Amount, lSummaryRec."Amount (LCY)");
          lOptBudgLineRec.VALIDATE("Budget Summary Line", TRUE);
          //M24810 sn
          IF lSummaryRec."Overhead Surcharge" THEN BEGIN
            lOptBudgLineRec."Surcharge Amnt from Summary" := lSummaryRec."Amount (LCY)";
            lOptBudgLineRec."Overhead Surcharge from Summ." := TRUE;
          END;
          //M24810 en
          lOptBudgLineRec.INSERT(FALSE);  //* FALSE, calculate surcharges and update option only once
        UNTIL lSummaryRec.NEXT = 0 ;
      END;

      lvBuyerMgtCU.BmCalcSurchargesUpdateOption(
        "Project No.", "Plot No.", "House Model", "Main Group", Group, "Sub Group", Option, FALSE, lvDummyOptionSurchRec);
    END;

    PROCEDURE UpdateSettlQuanBudgLines@1100528205();
    VAR
      lSettlementQuantityBudget@1100528200 : Record 11072244;
      lSummaryRec@1210190001 : Record 11012064;
      lvDummyOptionSurchRec@1210190004 : Record 11072247;
      lvSettlementQuantityManagement@1210190003 : Codeunit 11071690;
      lLineNumber@1210190002 : Integer;
    BEGIN
      IF "Settlement Quantity Code" = '' THEN
        EXIT;

      lSettlementQuantityBudget.RESET;
      lSettlementQuantityBudget.SETRANGE("Project No.", "Project No.");
      lSettlementQuantityBudget.SETRANGE("House Model", "House Model");
      lSettlementQuantityBudget.SETRANGE("Settlement Quantity Code", "Settlement Quantity Code" );
      lSettlementQuantityBudget.SETRANGE("Budget Summary Line", TRUE);
      lSettlementQuantityBudget.DELETEALL;

      lSettlementQuantityBudget.SETRANGE("Budget Summary Line");  // Reset
      IF lSettlementQuantityBudget.FINDLAST THEN
        lLineNumber := lSettlementQuantityBudget."Line No."
      ELSE
        lLineNumber := 0;
      lSettlementQuantityBudget.RESET;

      lLineNumber := lLineNumber + 1000000;

      lSummaryRec.SETRANGE("Project No.", "Project No.");
      lSummaryRec.SETRANGE("Contract No.", '');
      lSummaryRec.SETRANGE("Plot No.", '');
      lSummaryRec.SETRANGE("House Model", "House Model");
      lSummaryRec.SETRANGE("Main Group", '');
      lSummaryRec.SETRANGE(Group, '');
      lSummaryRec.SETRANGE("Sub Group", '');
      lSummaryRec.SETRANGE(Option, '');
      lSummaryRec.SETRANGE("Settlement Quantity Code", "Settlement Quantity Code");

      IF lSummaryRec.FIND('-') THEN BEGIN
        REPEAT
          lSettlementQuantityBudget.INIT;
          lSettlementQuantityBudget."Project No." := lSummaryRec."Project No.";
          lSettlementQuantityBudget."House Model" := "House Model";
          lSettlementQuantityBudget."Settlement Quantity Code" := "Settlement Quantity Code";

          lLineNumber := lLineNumber + 10000;
          lSettlementQuantityBudget.VALIDATE("Line No.", lLineNumber);
          lSettlementQuantityBudget.VALIDATE(Element, lSummaryRec.Element);
          lSettlementQuantityBudget."Cost Type" := lSummaryRec."Cost Type";
          lSettlementQuantityBudget."Cost Object" := lSummaryRec."Cost Object";
          lSettlementQuantityBudget."Cost Component" := lSummaryRec."Cost Component";

          lSettlementQuantityBudget.VALIDATE(Description, lSummaryRec.Description);
          lSettlementQuantityBudget."Unit of Measure" := lSummaryRec."Unit of Measure";

          IF (lSummaryRec."Cost Type" = lSummaryRec."Cost Type"::Labor) AND
             (lSummaryRec."Amount/Hours" = lSummaryRec."Amount/Hours"::Amount) THEN
          BEGIN
            lSummaryRec.Quantity := 0;
            lSummaryRec."Rate Code" := '';
            lSummaryRec."Rate (LCY)" := 0;
            lSummaryRec.Norm := 0;
            lSummaryRec.Hours := 0;
          END;

          IF lSummaryRec."Cost Type" = lSummaryRec."Cost Type"::Labor THEN BEGIN
            lSettlementQuantityBudget.VALIDATE("Rate Code", lSummaryRec."Rate Code");
            lSettlementQuantityBudget.VALIDATE(Rate, lSummaryRec."Rate (LCY)");
            lSettlementQuantityBudget.VALIDATE(Norm, lSummaryRec.Norm);
          END ELSE BEGIN
            lSettlementQuantityBudget.VALIDATE(Price, lSummaryRec."Price (LCY)");
          END;
          lSettlementQuantityBudget.VALIDATE(Quantity, lSummaryRec.Quantity);
          lSettlementQuantityBudget.VALIDATE(Hours, lSummaryRec.Hours);
          lSettlementQuantityBudget.VALIDATE(Amount, lSummaryRec."Amount (LCY)");
          lSettlementQuantityBudget.VALIDATE("Budget Summary Line", TRUE);

          IF lSummaryRec."Overhead Surcharge" THEN BEGIN
            lSettlementQuantityBudget."Surcharge Amnt from Summary" := lSummaryRec."Amount (LCY)";
            lSettlementQuantityBudget."Overhead Surcharge from Summ." := TRUE;
          END;

          lSettlementQuantityBudget.INSERT(FALSE);  //* FALSE, calculate surcharges and update option only once
        UNTIL lSummaryRec.NEXT = 0 ;
      END;

      lvSettlementQuantityManagement.MMRCalcSurchargesUpdateSettlQuan(
        "Project No.", "House Model", "Settlement Quantity Code", FALSE, lvDummyOptionSurchRec);
    END;

    PROCEDURE ReCalcSummaryLines@1210190002(lvAdjustment@1210190004 : Code[10]);
    VAR
      lSummaryRec@1210190000 : Record 11012064;
      lPreviousTotal@1210190003 : Decimal;
      lLoopCount@1210190002 : Integer;
      lSummaryTotalAmount@1210190001 : Decimal;
    BEGIN
      IF NOT ProjectRec.GET("Project No.") THEN ProjectRec.INIT;   //DP00883

      lSummaryRec.SETRANGE("Project No.","Project No.");
      lSummaryRec.SETRANGE("Contract No.","Contract No.");
      lSummaryRec.SETFILTER(Option,'%1','');
      lSummaryRec.SETFILTER("Settlement Quantity Code",'%1','');
      IF lvAdjustment <> '' THEN
        lSummaryRec.SETRANGE(Type, lSummaryRec.Type::Surcharge);  //C042473

      lLoopCount := 0;
      REPEAT
        lLoopCount := lLoopCount + 1;
        lPreviousTotal := lSummaryTotalAmount;
        lSummaryTotalAmount := 0;

        IF lSummaryRec.FIND('-') THEN BEGIN
          REPEAT
            lSummaryRec."Currency Code":= ProjectRec."Currency Code";  //DP00883
            lSummaryRec.CalcTotals(lvAdjustment); //Summary Adjustment
            lSummaryRec.MODIFY;
            lSummaryTotalAmount := lSummaryTotalAmount + lSummaryRec."Amount (LCY)";
          UNTIL lSummaryRec.NEXT = 0;
        END;

      UNTIL (ROUND(lSummaryTotalAmount) = ROUND(lPreviousTotal)) OR
            (lLoopCount > 20);
    END;

    PROCEDURE ReCalcOptionSummaryLines@1210190006();
    VAR
      lSummaryRec@1210190000 : Record 11012064;
      lPreviousTotal@1210190002 : Decimal;
      lLoopCount@1210190001 : Integer;
      lSummaryTotalAmount@1210190003 : Decimal;
    BEGIN
      lSummaryRec.SETRANGE("Project No.","Project No.");
      lSummaryRec.SETRANGE("Contract No.", '');
      lSummaryRec.SETRANGE("Plot No.", "Plot No.");
      lSummaryRec.SETRANGE("House Model", "House Model");
      lSummaryRec.SETRANGE("Main Group", "Main Group");
      lSummaryRec.SETRANGE(Group, Group);
      lSummaryRec.SETRANGE("Sub Group", "Sub Group");
      lSummaryRec.SETRANGE(Option,Option);
      lSummaryRec.SETFILTER("Settlement Quantity Code",'%1','');

      lLoopCount := 0;
      REPEAT
        lLoopCount := lLoopCount + 1;
        lPreviousTotal := lSummaryTotalAmount;
        lSummaryTotalAmount := 0;

        IF lSummaryRec.FIND('-') THEN BEGIN
          REPEAT
            lSummaryRec.CalcOptionTotals();
            lSummaryRec.MODIFY;
            lSummaryTotalAmount := lSummaryTotalAmount + lSummaryRec."Amount (LCY)";
          UNTIL lSummaryRec.NEXT = 0;
        END;

      UNTIL (ROUND(lSummaryTotalAmount) = ROUND(lPreviousTotal)) OR
            (lLoopCount > 20);
    END;

    PROCEDURE ReCalcSettlQuanSummaryLines@1100528209();
    VAR
      lSummaryRec@1210190000 : Record 11012064;
      lPreviousTotal@1210190002 : Decimal;
      lLoopCount@1210190001 : Integer;
      lSummaryTotalAmount@1210190003 : Decimal;
    BEGIN
      lSummaryRec.SETRANGE("Project No.","Project No.");
      lSummaryRec.SETRANGE("Contract No.", '');
      lSummaryRec.SETRANGE("Plot No.", '');
      lSummaryRec.SETRANGE("House Model", "House Model");
      lSummaryRec.SETRANGE("Main Group", '');
      lSummaryRec.SETRANGE(Group, '');
      lSummaryRec.SETRANGE("Sub Group", '');
      lSummaryRec.SETFILTER(Option,'%1','');
      lSummaryRec.SETRANGE("Settlement Quantity Code","Settlement Quantity Code");

      lLoopCount := 0;
      REPEAT
        lLoopCount := lLoopCount + 1;
        lPreviousTotal := lSummaryTotalAmount;
        lSummaryTotalAmount := 0;

        IF lSummaryRec.FIND('-') THEN BEGIN
          REPEAT
            lSummaryRec.CalcSettlementQuantityTotals();
            lSummaryRec.MODIFY;
            lSummaryTotalAmount := lSummaryTotalAmount + lSummaryRec."Amount (LCY)";
          UNTIL lSummaryRec.NEXT = 0;
        END;

      UNTIL (ROUND(lSummaryTotalAmount) = ROUND(lPreviousTotal)) OR
            (lLoopCount > 20);
    END;

    PROCEDURE CopyTemplateMMR@1100528201(IProject@1100528201 : Code[20];IHouseModel@1100525000 : Code[20];ISettlementQuantity@1100528200 : Code[20]);
    VAR
      lvSumHeader@1210190002 : Record 11020236;
      lvSumLineOrig@1100485001 : Record 11020237;
      lvSumLineDest@1100485000 : Record 11012064;
    BEGIN
      //.TESTFIELD("Budget Fixed", FALSE);  //TODO Fixed Settlement
      IF PAGE.RUNMODAL(PAGE::"Standard Summary Sheet List", lvSumHeader) <> ACTION::LookupOK THEN EXIT;
      lvSumLineOrig.SETRANGE(Summary, lvSumHeader.Summary);
      IF lvSumLineOrig.FIND('-') THEN BEGIN
        REPEAT
          lvSumLineDest.TRANSFERFIELDS(lvSumLineOrig);
          lvSumLineDest.Summary := '';
          lvSumLineDest.VALIDATE("Project No.", IProject);
          lvSumLineDest.VALIDATE("House Model",IHouseModel);
          lvSumLineDest.VALIDATE("Settlement Quantity Code",ISettlementQuantity);
          lvSumLineDest.INSERT(TRUE);
        UNTIL lvSumLineOrig.NEXT = 0 ;
      END;
    END;

    PROCEDURE CopyTemplate@1210190005(IProject@1210190000 : Code[20];IContract@1210190001 : Code[20];IPlot@1210190004 : Code[20];IHouseModel@1210190006 : Code[20];IMainGroup@1210190007 : Code[20];IGroup@1210190009 : Code[20];ISubGroup@1210190008 : Code[20];IOption@1210190005 : Code[20]);
    VAR
      lvSumHeader@1210190002 : Record 11020236;
      lvSumLineOrig@1100485001 : Record 11020237;
      lvSumLineDest@1100485000 : Record 11012064;
      lJobRec@1210190003 : Record 11072003;
      lvBudgetLine@1210190010 : Record 11012001;
      lContractRec@1210190011 : Record 11012004;
    BEGIN
      //Summary Adjustment
      //IF IPlot = '' THEN BEGIN  //*30084.o
      //TODO check for Settlement Quantity
      IF (IPlot = '') AND (Option = '') THEN BEGIN  //*30084.n
        lJobRec.GET(IProject);
        IF IContract = '' THEN BEGIN   //M18478
          lJobRec.TESTFIELD("Budget Fixed", FALSE);
        END ELSE BEGIN
          lContractRec.GET(IProject, IContract);          //M18478
          lContractRec.TESTFIELD("Budget Fixed", FALSE);  //M18478
        END;
        lvBudgetLine.RESET;
        lvBudgetLine.SETCURRENTKEY("Project No.");
        lvBudgetLine.SETRANGE("Project No.",IProject);
        lvBudgetLine.SETFILTER(Adjustment, '<>%1', '');
        lvBudgetLine.SETRANGE(Option,'');
        lvBudgetLine.SETRANGE("Extension Contract",IContract);
        lvBudgetLine.SETRANGE("Budget Summary Line", TRUE);
        IF NOT lvBudgetLine.ISEMPTY THEN BEGIN
          ERROR(Text006, Text005);
        END;
      END;
      //Summary Adjustment
      IF PAGE.RUNMODAL(PAGE::"Standard Summary Sheet List", lvSumHeader) <> ACTION::LookupOK THEN EXIT;

      lvSumLineOrig.SETRANGE(Summary, lvSumHeader.Summary);
      IF lvSumLineOrig.FIND('-') THEN BEGIN
        REPEAT
          lvSumLineDest.TRANSFERFIELDS(lvSumLineOrig);
          lvSumLineDest.Summary := '';
          lvSumLineDest.VALIDATE("Project No.", IProject);
          lvSumLineDest.VALIDATE("Contract No.",IContract);
          lvSumLineDest.VALIDATE("Plot No.",IPlot);
          lvSumLineDest.VALIDATE("House Model", IHouseModel);
          lvSumLineDest.VALIDATE("Main Group", IMainGroup);
          lvSumLineDest.VALIDATE(Group, IGroup);
          lvSumLineDest.VALIDATE("Sub Group", ISubGroup);
          lvSumLineDest.VALIDATE(Option, IOption);
          lvSumLineDest.INSERT(TRUE);
        UNTIL lvSumLineOrig.NEXT = 0 ;
      END;
    END;

    PROCEDURE CopyTemplate2@1100485000(SummaryCode@1100485000 : Code[20];IProject@1210190000 : Code[20];IContract@1210190001 : Code[20];IPlot@1210190004 : Code[20];IHouseModel@1210190006 : Code[20];IMainGroup@1210190007 : Code[20];IGroup@1210190009 : Code[20];ISubGroup@1210190008 : Code[20];IOption@1210190005 : Code[20]);
    VAR
      lvSumLineOrig@1210190010 : Record 11020237;
      lvSumLineDest@1210190003 : Record 11012064;
    BEGIN
      //Do not use INSERT(TRUE) at insert of a project, extension contract or extension option
      //because project/extension/option is not yet present in database.
      IF SummaryCode = '' THEN
        EXIT;

      lvSumLineOrig.SETRANGE(Summary, SummaryCode);
      IF lvSumLineOrig.FIND('-') THEN BEGIN
        REPEAT
          lvSumLineDest.TRANSFERFIELDS(lvSumLineOrig);
          lvSumLineDest.Summary := '';
          lvSumLineDest."Project No." := IProject;
          lvSumLineDest."Contract No." := IContract;
          lvSumLineDest."Plot No."  := IPlot;
          lvSumLineDest."House Model" := IHouseModel;
          lvSumLineDest."Main Group" := IMainGroup;
          lvSumLineDest.Group := IGroup;
          lvSumLineDest."Sub Group" := ISubGroup;
          lvSumLineDest.Option := IOption;
          lvSumLineDest."Version Date" := WORKDATE;
          lvSumLineDest.INSERT;
        UNTIL lvSumLineOrig.NEXT = 0 ;
      END;
    END;

    PROCEDURE CopyTemplate3@1100528200(SummaryCode@1100485000 : Code[20];IProject@1210190000 : Code[20];IHouseModel@1100528200 : Code[20];ISettlementQuantity@1210190001 : Code[20]);
    VAR
      lvSumLineOrig@1210190010 : Record 11020237;
      lvSumLineDest@1210190003 : Record 11012064;
    BEGIN
      //Do not use INSERT(TRUE) at insert of a project, settlement quantity
      //because project/settl.q is not yet present in database.
      IF SummaryCode = '' THEN
        EXIT;

      lvSumLineOrig.SETRANGE(Summary, SummaryCode);
      IF lvSumLineOrig.FIND('-') THEN BEGIN
        REPEAT
          lvSumLineDest.TRANSFERFIELDS(lvSumLineOrig);
          lvSumLineDest.Summary := '';
          lvSumLineDest."Project No." := IProject;
          lvSumLineDest."House Model" := IHouseModel;
          lvSumLineDest."Settlement Quantity Code" := ISettlementQuantity;
          lvSumLineDest."Version Date" := WORKDATE;
          lvSumLineDest.INSERT;
        UNTIL lvSumLineOrig.NEXT = 0 ;
      END;
    END;

    PROCEDURE DeleteIfOrderLines@1100525000(ProjectNo@1100525000 : Code[20];ContractNo@1100525001 : Code[10]);
    VAR
      BudgetSummarySheet@1100525002 : Record 11012064;
    BEGIN
      // kzwerver, 08-12-2010, FO Release extension contract
      IF (ProjectNo <> '') AND (ContractNo <> '') THEN BEGIN
        BudgetSummarySheet.SETRANGE("Project No.", ProjectNo);
        BudgetSummarySheet.SETRANGE("Contract No.", ContractNo);
        BudgetSummarySheet.SETRANGE("Delete Line if Order", TRUE);
        BudgetSummarySheet.DELETEALL;
      END;
    END;

    PROCEDURE GetCurrencyFactor@1100528601(IUseSalesExchange@1100528600 : Boolean;IUseReportCurrency@1100528602 : Boolean) : Decimal;
    VAR
      CurrencyExchangeRate@1100528601 : Record 330;
      CurrencyCode@1100528603 : Code[10];
    BEGIN
      //DP00883
      ProjectRec.GET("Project No.");
      //IF IUseReportCurrency THEN
      //  CurrencyCode := ProjectRec."Report Currency Code"
      //ELSE
        CurrencyCode := "Currency Code";
      //Type: 0=General, 1=Project, 2=Estimate
      EXIT(CurrencyExchangeRate.ExchangeRate(1, "Project No.", ProjectRec."Reference Date (Currency)", CurrencyCode, IUseSalesExchange));
    END;

    PROCEDURE ExchangeAmtLCYToFCY@1100528602(IAmount@1100528601 : Decimal;IUseSalesExchange@1100528602 : Boolean;IUsePriceRounding@1100528605 : Boolean;IUseReportCurrency@1100528607 : Boolean) : Decimal;
    VAR
      CurrencyExchangeRate@1100528600 : Record 330;
      Currency@1100528604 : Record 4;
      Amount@1100528603 : Decimal;
      CurrencyCode@1100528606 : Code[10];
    BEGIN
      //DP00883
      IF "Currency Code" = '' THEN
        EXIT(IAmount);
      ProjectRec.GET("Project No.");
      //IF IUseReportCurrency THEN
      //  CurrencyCode := ProjectRec."Report Currency Code"
      //ELSE
        CurrencyCode := "Currency Code";
      Amount := CurrencyExchangeRate.ExchangeAmtLCYToFCY(
        1, "Project No.", ProjectRec."Reference Date (Currency)", CurrencyCode, IAmount, GetCurrencyFactor(IUseSalesExchange, IUseReportCurrency), IUseSalesExchange);
      IF NOT Currency.GET(CurrencyCode) THEN
        Currency.InitRoundingPrecision;
      IF IUsePriceRounding THEN
        Amount := ROUND(Amount, Currency."Unit-Amount Rounding Precision")
      ELSE
        Amount := ROUND(Amount, Currency."Amount Rounding Precision");
      EXIT(Amount);
    END;

    PROCEDURE ExchangeAmtFCYToLCY@1100525010(IAmount@1100528601 : Decimal;IUseSalesExchange@1100528602 : Boolean;IUsePriceRounding@1100528605 : Boolean;IUseReportCurrency@1100528606 : Boolean) : Decimal;
    VAR
      CurrencyExchangeRate@1100528600 : Record 330;
      Currency@1100528604 : Record 4;
      Amount@1100528603 : Decimal;
      CurrencyCode@1100528607 : Code[10];
    BEGIN
      //DP00883
      IF "Currency Code" = '' THEN
        EXIT(IAmount);
      ProjectRec.GET("Project No.");
      //IF IUseReportCurrency THEN
      //  CurrencyCode := ProjectRec."Report Currency Code"
      //ELSE
        CurrencyCode := "Currency Code";
      Amount := CurrencyExchangeRate.ExchangeAmtFCYToLCY(
        1, "Project No.", ProjectRec."Reference Date (Currency)", CurrencyCode, IAmount, GetCurrencyFactor(IUseSalesExchange, IUseReportCurrency), IUseSalesExchange);
      Currency.InitRoundingPrecision;
      IF IUsePriceRounding THEN
        Amount := ROUND(Amount, Currency."Unit-Amount Rounding Precision")
      ELSE
        Amount := ROUND(Amount, Currency."Amount Rounding Precision");
      EXIT(Amount);
    END;

    PROCEDURE ExchangeAmtFCYToFCY@1100528604(IAmount@1100528606 : Decimal;IFromCurrencyCode@1100528604 : Code[10];IToCurrencyCode@1100528605 : Code[10];IUseSalesExchange@1100528607 : Boolean;IUsePriceRounding@1100528608 : Boolean) : Decimal;
    VAR
      CurrencyExchangeRate@1100528603 : Record 330;
      Currency@1100528602 : Record 4;
      CurrencyFactor@1100528609 : Decimal;
      Amount@1100528601 : Decimal;
    BEGIN
      //DP00883
      ProjectRec.GET("Project No.");
      Amount := IAmount;
      IF IFromCurrencyCode <> '' THEN BEGIN
        CurrencyFactor := CurrencyExchangeRate.ExchangeRate(1, "Project No.", ProjectRec."Reference Date (Currency)", IFromCurrencyCode, IUseSalesExchange);
        Amount := CurrencyExchangeRate.ExchangeAmtFCYToLCY(1, "Project No.", ProjectRec."Reference Date (Currency)", IFromCurrencyCode, Amount, CurrencyFactor, IUseSalesExchange);
      END;
      IF IToCurrencyCode <> '' THEN BEGIN
        CurrencyFactor := CurrencyExchangeRate.ExchangeRate(1, "Project No.", ProjectRec."Reference Date (Currency)", IToCurrencyCode, IUseSalesExchange);
        Amount := CurrencyExchangeRate.ExchangeAmtLCYToFCY(1, "Project No.", ProjectRec."Reference Date (Currency)", IToCurrencyCode, Amount, CurrencyFactor, IUseSalesExchange);
      END;
      IF NOT Currency.GET(IToCurrencyCode) THEN
        Currency.InitRoundingPrecision;
      IF IUsePriceRounding THEN
        Amount := ROUND(Amount, Currency."Unit-Amount Rounding Precision")
      ELSE
        Amount := ROUND(Amount, Currency."Amount Rounding Precision");
      EXIT(Amount);
    END;

    PROCEDURE SetSkipValidateFCY@1100528603(ISkipValidateFCY@1100528600 : Boolean);
    BEGIN
      //DP00883
      SkipValidateFCY := ISkipValidateFCY;
    END;

    PROCEDURE CostComponentIsEditable@1100528700() : Boolean;
    VAR
      JobsSetup@1100528701 : Record 315;
    BEGIN
      JobsSetup.GET;
      EXIT(JobsSetup."Cost Component Editable");
    END;

    PROCEDURE KindOfSurchargeIsEditable@1100528703() : Boolean;
    BEGIN
      EXIT((Type = Type::Surcharge) OR (Type = Type::Subtotal));
    END;

    PROCEDURE AmountHoursIsEditable@1100528704() : Boolean;
    BEGIN
      EXIT("Cost Type" = "Cost Type"::Labor);
    END;

    PROCEDURE QuantityIsEditable@1100528706() : Boolean;
    BEGIN
      EXIT(Type <> Type::Text);
    END;

    PROCEDURE NormIsEditable@1100528709() : Boolean;
    BEGIN
      EXIT(("Cost Type" = "Cost Type"::Labor) AND
           ("Amount/Hours" = "Amount/Hours"::Hours) AND
           (Type <> Type::Text) AND
           (Type <> Type::Subtotal));
    END;

    PROCEDURE UnitOfMeasureIsEditable@1100528717() : Boolean;
    BEGIN
      EXIT(Type <> Type::Text);
    END;

    PROCEDURE RateCodeIsEditable@1100528719() : Boolean;
    BEGIN
      EXIT(("Cost Type" = "Cost Type"::Labor) AND
           ("Amount/Hours" = "Amount/Hours"::Hours) AND
           (Type <> Type::Text) AND
           (Type <> Type::Subtotal));
    END;

    PROCEDURE RateIsEditable@1100528721() : Boolean;
    BEGIN
      EXIT((Type <> Type::Text) AND (Type <> Type::Subtotal));
    END;

    PROCEDURE PriceIsEditable@1100528723() : Boolean;
    BEGIN
      EXIT((("Cost Type" <> "Cost Type"::Labor) OR ("Amount/Hours" = "Amount/Hours"::Amount)) AND
           (Type <> Type::Text) AND
           (Type <> Type::Surcharge) AND
           (Type <> Type::Subtotal));
    END;

    PROCEDURE AmountIsEditable@1100528726() : Boolean;
    BEGIN
      EXIT(("Cost Type" = "Cost Type"::Labor) AND
           (Norm = 0) AND
           (Quantity = 0) AND
           (Type <> Type::Text) AND
           (Type <> Type::Surcharge) AND
           (Type <> Type::Subtotal));
    END;

    PROCEDURE CostTypeFilterIsEditable@1100528730() : Boolean;
    BEGIN
      EXIT((Type = Type::Surcharge) OR (Type = Type::Subtotal));
    END;

    PROCEDURE CostObjectFltrIsEditable@1100528732() : Boolean;
    BEGIN
      EXIT((Type = Type::Surcharge) OR (Type = Type::Subtotal));
    END;

    PROCEDURE ElementFilterIsEditable@1100528734() : Boolean;
    BEGIN
      EXIT(Type = Type::Surcharge);
    END;

    PROCEDURE TotalingIsEditable@1100528739() : Boolean;
    BEGIN
      EXIT(Type = Type::Subtotal);
    END;

    PROCEDURE CalcFormTotals@1100527000(VAR TotalLabor@1100527006 : Decimal;VAR TotalMaterial@1100527005 : Decimal;VAR TotalSubcontracting@1100527004 : Decimal;VAR TotalPlant@1100527003 : Decimal;VAR TotalSundry@1100527002 : Decimal;VAR TotalHours@1100527001 : Decimal;VAR TotalAmount@1100527000 : Decimal);
    VAR
      BudgetLine@1210190000 : Record 11012001;
    BEGIN
      TotalLabor := 0;
      TotalMaterial := 0;
      TotalSubcontracting := 0;
      TotalPlant := 0;
      TotalSundry := 0;
      TotalHours := 0;
      TotalAmount := 0;

      BudgetLine.SETCURRENTKEY("Project No.", "Cost Type", "Cost Object", "Extension Contract Status", "Version Date", Adjustment, "Extension Contract", Option, "Purchase Action");

      BudgetLine.SETRANGE("Budget Summary Line", FALSE);
      BudgetLine.SETRANGE("Project No.", "Project No.");
      BudgetLine.SETRANGE("Extension Contract", "Contract No.");
      IF "Contract No." = '' THEN
        BudgetLine.SETFILTER(Option, '%1', '');

      BudgetLine.SETRANGE("Cost Type", "Cost Type"::Labor);
      IF NOT BudgetLine.ISEMPTY THEN BEGIN
        BudgetLine.CALCSUMS("Amount (LCY)", Hours);
        TotalLabor := BudgetLine."Amount (LCY)";
        TotalHours := BudgetLine.Hours;
      END;

      BudgetLine.SETRANGE("Cost Type", "Cost Type"::Material);
      IF NOT BudgetLine.ISEMPTY THEN BEGIN
        BudgetLine.CALCSUMS("Amount (LCY)");
        TotalMaterial := BudgetLine."Amount (LCY)";
      END;

      BudgetLine.SETRANGE("Cost Type", "Cost Type"::Subcontracting);
      IF NOT BudgetLine.ISEMPTY THEN BEGIN
        BudgetLine.CALCSUMS("Amount (LCY)");
        TotalSubcontracting := BudgetLine."Amount (LCY)";
      END;

      BudgetLine.SETRANGE("Cost Type", "Cost Type"::Plant);
      IF NOT BudgetLine.ISEMPTY THEN BEGIN
        BudgetLine.CALCSUMS("Amount (LCY)");
        TotalPlant := BudgetLine."Amount (LCY)";
      END;

      BudgetLine.SETRANGE("Cost Type", "Cost Type"::Sundry);
      IF NOT BudgetLine.ISEMPTY THEN BEGIN
        BudgetLine.CALCSUMS("Amount (LCY)");
        TotalSundry := BudgetLine."Amount (LCY)";
      END;

      TotalAmount := TotalLabor + TotalMaterial + TotalSubcontracting + TotalPlant + TotalSundry;
    END;

    PROCEDURE CalcSummaryTotals@1100527003(WithUpdate@1210190001 : Boolean;InsertRecord@1210190004 : Boolean;VAR SummaryTotalLabor@1100527006 : Decimal;VAR SummaryTotalMaterial@1100527005 : Decimal;VAR SummaryTotalSubcontracting@1100527004 : Decimal;VAR SummaryTotalPlant@1100527003 : Decimal;VAR SummaryTotalSundry@1100527002 : Decimal;VAR SummaryTotalHours@1100527001 : Decimal;VAR SummaryTotalAmount@1100527000 : Decimal);
    VAR
      BudgetSummarySheet@1210190000 : Record 11012064;
      PreviousTotal@1210190002 : Decimal;
      LoopCount@1210190003 : Integer;
    BEGIN
      SummaryTotalAmount := 0;
      LoopCount := 0;

      REPEAT
        LoopCount += 1;
        BudgetSummarySheet.SETRANGE("Project No.", "Project No.");
        BudgetSummarySheet.SETRANGE("Contract No.", "Contract No.");
        BudgetSummarySheet.SETFILTER(Option, '%1', '');

        PreviousTotal := SummaryTotalAmount;

        SummaryTotalAmount := 0;

        BudgetSummarySheet.SETRANGE("Cost Type", "Cost Type"::Labor);
        CalcFilteredSummaryTotals(SummaryTotalLabor, BudgetSummarySheet, WithUpdate, InsertRecord);
        BudgetSummarySheet.CALCFIELDS("Summary Total Hours");
        SummaryTotalHours := BudgetSummarySheet."Summary Total Hours";

        BudgetSummarySheet.SETRANGE("Cost Type", "Cost Type"::Material);
        CalcFilteredSummaryTotals(SummaryTotalMaterial, BudgetSummarySheet, WithUpdate, InsertRecord);

        BudgetSummarySheet.SETRANGE("Cost Type", "Cost Type"::Subcontracting);
        CalcFilteredSummaryTotals(SummaryTotalSubcontracting, BudgetSummarySheet, WithUpdate, InsertRecord);

        BudgetSummarySheet.SETRANGE("Cost Type", "Cost Type"::Plant);
        CalcFilteredSummaryTotals(SummaryTotalPlant, BudgetSummarySheet, WithUpdate, InsertRecord);

        BudgetSummarySheet.SETRANGE("Cost Type", "Cost Type"::Sundry);
        CalcFilteredSummaryTotals(SummaryTotalSundry, BudgetSummarySheet, WithUpdate, InsertRecord);

        SummaryTotalAmount := SummaryTotalLabor + SummaryTotalMaterial + SummaryTotalSubcontracting + SummaryTotalPlant + SummaryTotalSundry;
        BudgetSummarySheet.SETRANGE("Cost Type");

      UNTIL (ROUND(SummaryTotalAmount) = ROUND(PreviousTotal)) OR (NOT WithUpdate) OR (LoopCount > 20);
    END;

    LOCAL PROCEDURE CalcFilteredSummaryTotals@1100527005(VAR SummaryTotal@1100527000 : Decimal;VAR BudgetSummarySheet@1100527001 : Record 11012064;WithUpdate@1100527003 : Boolean;InsertRecord@1100527002 : Boolean);
    BEGIN
      SummaryTotal := 0;
      IF BudgetSummarySheet.FINDSET THEN
        REPEAT
          BudgetSummarySheet.CalcTotals('');
          IF WithUpdate THEN
            BudgetSummarySheet.MODIFY;
          SummaryTotal += BudgetSummarySheet."Amount (LCY)";

          IF InsertRecord AND ("Row No." = BudgetSummarySheet."Row No.") THEN BEGIN
            "Amount (LCY)" := BudgetSummarySheet."Amount (LCY)";
            "Price (LCY)" := BudgetSummarySheet."Price (LCY)";
            Subtotal := BudgetSummarySheet.Subtotal;
          END;
        UNTIL BudgetSummarySheet.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

