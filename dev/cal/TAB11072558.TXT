OBJECT Table 11072558 Work Order Inspection Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "Line No." = 0 THEN
                 "Line No." := GetLastLineNo + 10000;
             END;

    CaptionML=ENU=Work Order Inspection Line;
    LookupPageID=Page11127078;
  }
  FIELDS
  {
    { 10  ;   ;Work Order No.      ;Code20        ;TableRelation="Work Order";
                                                   CaptionML=[ENU=Work Order No.;
                                                              SVE=Serviceordernr];
                                                   Editable=No }
    { 20  ;   ;Service Object No.  ;Code20        ;TableRelation=Service-Object;
                                                   CaptionML=[ENU=Service Object No.;
                                                              SVE=Serviceobjektnr];
                                                   Editable=No }
    { 30  ;   ;Maintenance Scheme Code;Code20     ;TableRelation="Maintenance Scheme";
                                                   CaptionML=[ENU=Maintenance Scheme Code;
                                                              SVE=Kod f”r underh†llsschema];
                                                   Editable=No }
    { 40  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              SVE=Radnr];
                                                   Editable=No }
    { 50  ;   ;Inspection Type     ;Option        ;CaptionML=[ENU=Inspection Type;
                                                              SVE=Inspektionstyp];
                                                   OptionCaptionML=ENU=Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls),,,,,,,Service Order Object,Plant;
                                                   OptionString=Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls),,,,,,,Service Order Object,Plant;
                                                   Editable=No }
    { 60  ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract;
                                                   CaptionML=[ENU=Service Contract No.;
                                                              SVE=Servicekontraktnr];
                                                   Editable=No }
    { 70  ;   ;Code                ;Code20        ;TableRelation=IF (Inspection Type=CONST(Base Inspection List)) "Base Service Inspection List"
                                                                 ELSE IF (Inspection Type=CONST(Standard Object)) "Standard Object"
                                                                 ELSE IF (Inspection Type=CONST(Contract Object)) "Contract Object"."Service Object No." WHERE (Service Contract No.=FIELD(Service Contract No.))
                                                                 ELSE IF (Inspection Type=CONST("Standard Object (Calls)")) "Standard Object"
                                                                 ELSE IF (Inspection Type=CONST("Object (Calls)")) Service-Object
                                                                 ELSE IF (Inspection Type=CONST(Plant)) "Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   CaptionML=[ENU=Code;
                                                              SVE=Kod];
                                                   Editable=No }
    { 75  ;   ;Belongs to Scheme   ;Code20        ;TableRelation="Maintenance Scheme";
                                                   CaptionML=[ENU=Belongs to Scheme;
                                                              SVE=Tillh”r schema];
                                                   Editable=No }
    { 80  ;   ;Index Date          ;Date          ;CaptionML=[ENU=Index Date;
                                                              SVE=Indexdatum];
                                                   Editable=No }
    { 85  ;   ;Inspection Line No. ;Integer       ;CaptionML=[ENU=Inspection Line No.;
                                                              SVE=Inspektionsradnr];
                                                   Editable=No }
    { 90  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF (xRec.Type <> Type) AND (Type = Type::Group) THEN BEGIN
                                                                  "Field Type" := "Field Type"::" ";
                                                                  "Unit Of Measure" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Group,Line;
                                                                    SVE=Grupp,Rad];
                                                   OptionString=Group,Line;
                                                   Editable=No }
    { 100 ;   ;Inspection Code     ;Code20        ;TableRelation=IF (Type=CONST(Group),
                                                                     Inspection Type=FILTER(<Plant)) "Service Inspection Group"
                                                                     ELSE IF (Type=CONST(Line),
                                                                              Inspection Type=FILTER(<Plant)) "Base Service Inspection Line"
                                                                              ELSE IF (Type=CONST(Group),
                                                                                       Inspection Type=CONST(Plant)) "Plant Inspection Group"
                                                                                       ELSE IF (Type=CONST(Line),
                                                                                                Inspection Type=CONST(Plant)) "Base Plant Inspection Line";
                                                   CaptionML=[ENU=Inspection Code;
                                                              SVE=Inspektionskod];
                                                   Editable=No }
    { 110 ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              SVE=Beskrivning];
                                                   Editable=No }
    { 120 ;   ;Field Type          ;Option        ;OnValidate=BEGIN
                                                                IF "Field Type" = "Field Type"::" " THEN
                                                                  TESTFIELD(Type, Type::Group);

                                                                IF xRec."Field Type" <> "Field Type" THEN
                                                                  EVALUATE(Value, '');
                                                              END;

                                                   CaptionML=[ENU=Field Type;
                                                              SVE=Field Type];
                                                   OptionCaptionML=[ENU="Date,Value,Text,Option,Yes/No,,,,, ";
                                                                    SVE="Datum,V„rde,Text,Alternativ,Ja/Nej,,,,, "];
                                                   OptionString=[Date,Value,Text,Option,Yes/No,,,,, ];
                                                   Editable=No }
    { 130 ;   ;Value               ;Text80        ;OnValidate=BEGIN
                                                                EvaluateValue;
                                                              END;

                                                   OnLookup=VAR
                                                              BaseServiceInspectionOption@1100528600 : Record 11071749;
                                                              BaseServiceInspectionOptionPAGE@1100525000 : Page 11125256;
                                                            BEGIN
                                                              IF LookupValue(Value) THEN
                                                                VALIDATE(Value);
                                                            END;

                                                   CaptionML=[ENU=Value;
                                                              SVE=V„rde] }
    { 131 ;   ;Value (Date)        ;Date          ;OnValidate=BEGIN
                                                                Value := FORMAT("Value (Date)");
                                                              END;

                                                   CaptionML=ENU=Value (Date }
    { 132 ;   ;Value (Value)       ;Decimal       ;OnValidate=BEGIN
                                                                Value := FORMAT("Value (Value)", 0, 1);
                                                              END;

                                                   CaptionML=[ENU=Value (Value);
                                                              SVE=V„rde (v„rde)];
                                                   BlankZero=Yes }
    { 140 ;   ;Unit Of Measure     ;Code10        ;TableRelation="Unit of Measure";
                                                   CaptionML=[ENU=Unit Of Measure;
                                                              SVE=M†ttenhet];
                                                   Editable=No }
    { 150 ;   ;Inspection Group Code;Code10       ;TableRelation=IF (Inspection Type=FILTER(<Plant)) "Service Inspection Group"
                                                                 ELSE IF (Inspection Type=CONST(Plant)) "Plant Inspection Group";
                                                   CaptionML=[ENU=Inspection Group Code;
                                                              SVE=Inspektionsgruppskod];
                                                   Editable=No }
    { 160 ;   ;Mandatory           ;Boolean       ;CaptionML=[ENU=Mandatory;
                                                              SVE=Obligatoriskt];
                                                   Editable=No }
    { 170 ;   ;Lower Value         ;Decimal       ;OnValidate=BEGIN
                                                                IF "Lower Value" <> 0 THEN
                                                                  TESTFIELD("Field Type", "Field Type"::Value);
                                                                TestUpperAndLowerValue;
                                                              END;

                                                   CaptionML=ENU=Lower Value;
                                                   BlankZero=Yes }
    { 180 ;   ;Upper Value         ;Decimal       ;OnValidate=BEGIN
                                                                IF "Upper Value" <> 0 THEN
                                                                  TESTFIELD("Field Type", "Field Type"::Value);
                                                                TestUpperAndLowerValue;
                                                              END;

                                                   CaptionML=ENU=Upper Value;
                                                   BlankZero=Yes }
    { 200 ;   ;Depending Condition ;Text250       ;CaptionML=ENU=Depending Condition;
                                                   Editable=No }
    { 210 ;   ;Dependency Effect   ;Option        ;CaptionML=ENU=Dependency Effect;
                                                   OptionCaptionML=ENU=" ,Enable Line,Disable Line";
                                                   OptionString=[ ,Enable Line,Disable Line];
                                                   Editable=No }
    { 220 ;   ;Id                  ;GUID          ;CaptionML=[ENU=Id;
                                                              SVE=ID];
                                                   Editable=No }
    { 230 ;   ;Depending on Id     ;Text50        ;CaptionML=ENU=Depending on Id;
                                                   Editable=No }
    { 250 ;   ;Comment             ;Text100       ;CaptionML=[ENU=Comment;
                                                              SVE=Kommentar] }
    { 260 ;   ;Belongs to Base Insp. List;Code20  ;TableRelation="Base Service Inspection List";
                                                   CaptionML=ENU=Belongs to Base Inspection List }
    { 270 ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   CaptionML=[ENU=Plant Type;
                                                              SVE=Maskintyp] }
    { 280 ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              SVE=Beskrivning 2];
                                                   Editable=No }
    { 300 ;   ;Dependency Condition Decimal 1;Decimal;
                                                   CaptionML=ENU=Dependency Condition Decimal 1;
                                                   Editable=No }
    { 310 ;   ;Dependency Condition Decimal 2;Decimal;
                                                   CaptionML=ENU=Dependency Condition Decimal 2;
                                                   Editable=No }
    { 320 ;   ;Dependency Condition Date 1;Date   ;CaptionML=ENU=Dependency Condition Date 1;
                                                   Editable=No }
    { 330 ;   ;Dependency Condition Date 2;Date   ;CaptionML=ENU=Dependency Condition Date 2;
                                                   Editable=No }
    { 340 ;   ;Dependency Condition Operation;Text30;
                                                   CaptionML=ENU=Dependency Condition Operation;
                                                   Editable=No }
    { 900 ;   ;Source Company Filter;Text50       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Source Company Filter }
    { 910 ;   ;Service Order No. Filter;Code20    ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Service Order No. Filter }
    { 920 ;   ;Work Order Linked to SO;Boolean    ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Work Order" WHERE (No.=FIELD(Work Order No.),
                                                                                         Source Company=FIELD(Source Company Filter),
                                                                                         Source Type=CONST(ServiceOrder),
                                                                                         Source No.=FIELD(Service Order No. Filter)));
                                                   CaptionML=ENU=Work Order Linked to Service Order;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Work Order No.,Service Object No.,Maintenance Scheme Code,Line No.;
                                                   Clustered=Yes }
    {    ;Work Order No.,Service Object No.,Maintenance Scheme Code,Inspection Group Code,Line No. }
    {    ;Service Object No.,Work Order No.,Line No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100528600 : TextConst 'ENU=Option Value %1 not found;SVE=Alternativv„rde %1 hittades inte';
      Text002@1100528601 : TextConst 'ENU=t;SVE=t';
      Text003@1100528602 : TextConst 'ENU=%1 must exceed %2;SVE=%1 m†ste ”verskrida %2';

    PROCEDURE EvaluateValue@1100528600();
    VAR
      ServiceOrderInspectionLine@1100526000 : Record 11071753;
      WorkOrderNo@1100526001 : Code[20];
    BEGIN
      WorkOrderNo := "Work Order No.";
      ServiceOrderInspectionLine.TRANSFERFIELDS(Rec);
      ServiceOrderInspectionLine.EvaluateValue;
      Rec.TRANSFERFIELDS(ServiceOrderInspectionLine);
      Rec."Work Order No." := WorkOrderNo;
    END;

    PROCEDURE CheckOptionValue@1100528603() : Text[80];
    VAR
      ServiceOrderInspectionLine@1100526000 : Record 11071753;
    BEGIN
      ServiceOrderInspectionLine.TRANSFERFIELDS(Rec);
      EXIT(ServiceOrderInspectionLine.CheckOptionValue);
    END;

    PROCEDURE GetOptionDescriptionFromCode@1210190000(OptionCode@1210190000 : Code[10]) : Text[80];
    VAR
      ServiceOrderInspectionLine@1100526000 : Record 11071753;
    BEGIN
      ServiceOrderInspectionLine.TRANSFERFIELDS(Rec);
      EXIT(ServiceOrderInspectionLine.GetOptionDescriptionFromCode(OptionCode));
    END;

    PROCEDURE GetLastLineNo@1100528601() : Integer;
    VAR
      WorkOrderInspectionLine@1100528600 : Record 11072558;
    BEGIN
      WorkOrderInspectionLine := Rec;
      WorkOrderInspectionLine.SETRECFILTER;
      WorkOrderInspectionLine.SETRANGE("Line No.");
      IF WorkOrderInspectionLine.FINDLAST THEN
        EXIT(WorkOrderInspectionLine."Line No.");
    END;

    PROCEDURE ShowDocuments@1100528602();
    VAR
      DocumentFilters@1100528601 : Codeunit 11012432;
      ServiceOrderInspectionLine@1100526000 : Record 11071753;
      RecRef@1100528600 : RecordRef;
    BEGIN
      IF NOT GetServiceOrderInspectionLine(ServiceOrderInspectionLine) THEN
        EXIT;
      RecRef.GETTABLE(ServiceOrderInspectionLine);
      DocumentFilters.CreateTempFilterAndExecute1(RecRef, '', FALSE, FALSE);
    END;

    PROCEDURE GetNoOfDocuments@1100525000() : Integer;
    VAR
      DocumentLinkManagement@1100525001 : Codeunit 11012401;
      ServiceOrderInspectionLine@1100526000 : Record 11071753;
      RecRef@1100525000 : RecordRef;
    BEGIN
      IF NOT GetServiceOrderInspectionLine(ServiceOrderInspectionLine) THEN
        EXIT;
      RecRef.GETTABLE(ServiceOrderInspectionLine);
      EXIT(DocumentLinkManagement.GetInfo(RecRef))
    END;

    PROCEDURE GetNoOfDocumentsText@1100528604() : Text[30];
    VAR
      NoOfDocuments@1100528600 : Integer;
    BEGIN
      IF Type = Type::Line THEN
        NoOfDocuments := GetNoOfDocuments
      ELSE
        NoOfDocuments := 0;
      IF NoOfDocuments > 0 THEN
        EXIT(STRSUBSTNO('[%1]', NoOfDocuments));
    END;

    PROCEDURE DocumentsExists@1100525001() : Boolean;
    BEGIN
      EXIT(GetNoOfDocuments() > 0);
    END;

    LOCAL PROCEDURE TestUpperAndLowerValue@1100528607();
    BEGIN
      IF ("Lower Value" = 0) OR ("Upper Value" = 0) THEN
        EXIT;
      IF ("Upper Value" <> 0) AND ("Upper Value" < "Lower Value") THEN
        ERROR(Text003, FIELDCAPTION("Upper Value"), FIELDCAPTION("Lower Value"));
    END;

    PROCEDURE GetValue@1100528605() : Text;
    VAR
      ServiceOrderInspectionLine@1100526000 : Record 11071753;
    BEGIN
      ServiceOrderInspectionLine.TRANSFERFIELDS(Rec);
      EXIT(ServiceOrderInspectionLine.GetValue);
    END;

    PROCEDURE LookupValue@1100525002(VAR Value@1100525002 : Text) : Boolean;
    VAR
      ServiceOrderInspectionLine@1100526000 : Record 11071753;
    BEGIN
      ServiceOrderInspectionLine.TRANSFERFIELDS(Rec);
      EXIT(ServiceOrderInspectionLine.LookupValue(Value));
    END;

    LOCAL PROCEDURE GetServiceOrderInspectionLine@1100526000(VAR ServiceOrderInspectionLine@1100526000 : Record 11071753) : Boolean;
    VAR
      WorkOrder@1100526001 : Record 11229279;
    BEGIN
      IF NOT WorkOrder.GET("Work Order No.") THEN
        EXIT(FALSE);
      ServiceOrderInspectionLine.SETRANGE("Service Order No.", WorkOrder."Source No.");
      ServiceOrderInspectionLine.SETRANGE("Service Object No.", "Service Object No.");
      ServiceOrderInspectionLine.SETRANGE("Maintenance Scheme Code", "Maintenance Scheme Code");
      ServiceOrderInspectionLine.SETRANGE("Inspection Type", "Inspection Type");
      ServiceOrderInspectionLine.SETRANGE(Type, Type);
      ServiceOrderInspectionLine.SETRANGE("Inspection Code", "Inspection Code");
      ServiceOrderInspectionLine.SETRANGE("Inspection Group Code", "Inspection Group Code");
      EXIT(ServiceOrderInspectionLine.FINDFIRST);
    END;

    PROCEDURE IsLineEditableBasedOnDependency@1100528106(DependingOnWorkOrderInspectionLine@1100528101 : Record 11072558;CurrentWorkOrderInspectionLine@1100528100 : Record 11072558) : Boolean;
    BEGIN
      CASE DependingOnWorkOrderInspectionLine."Field Type" OF
        "Field Type"::"Yes/No", "Field Type"::Option:
          EXIT(IsLineEditableBasedOnOptionDependency(DependingOnWorkOrderInspectionLine, CurrentWorkOrderInspectionLine));
        "Field Type"::Value:
          EXIT(IsLineEditableBasedOnValueDependency(DependingOnWorkOrderInspectionLine, CurrentWorkOrderInspectionLine));
        "Field Type"::Date:
          EXIT(IsLineEditableBasedOnDateDependency(DependingOnWorkOrderInspectionLine, CurrentWorkOrderInspectionLine));
      ELSE
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE IsLineEditableBasedOnOptionDependency@1100528104(DependingOnWorkOrderInspectionLine@1100528701 : Record 11072558;CurrentWorkOrderInspectionLine@1100528700 : Record 11072558) : Boolean;
    BEGIN
      CASE CurrentWorkOrderInspectionLine."Dependency Effect" OF
        "Dependency Effect"::"Enable Line":
          EXIT(DependingOnWorkOrderInspectionLine.Value = CurrentWorkOrderInspectionLine."Depending Condition");
        "Dependency Effect"::"Disable Line":
          EXIT(DependingOnWorkOrderInspectionLine.Value <> CurrentWorkOrderInspectionLine."Depending Condition");
      END;
    END;

    LOCAL PROCEDURE IsLineEditableBasedOnValueDependency@1100528101(DependingOnWorkOrderInspectionLine@1100528703 : Record 11072558;CurrentWorkOrderInspectionLine@1100528702 : Record 11072558) : Boolean;
    VAR
      WorkOrderInspectionLine@1100528101 : Record 11072558;
      NumberFilter@1100528700 : Text;
      DateDecimalFilterParser@1100528701 : Codeunit 11012894;
    BEGIN
      NumberFilter := DateDecimalFilterParser.DecimalFilterToText(
        CurrentWorkOrderInspectionLine."Dependency Condition Decimal 1",
        CurrentWorkOrderInspectionLine."Dependency Condition Operation",
        CurrentWorkOrderInspectionLine."Dependency Condition Decimal 2");

      WorkOrderInspectionLine.SETFILTER("Value (Value)", NumberFilter);
      EXIT(IsLineEditableBasedOnFilter(DependingOnWorkOrderInspectionLine, CurrentWorkOrderInspectionLine, WorkOrderInspectionLine));
    END;

    LOCAL PROCEDURE IsLineEditableBasedOnDateDependency@1100528103(DependingOnWorkOrderInspectionLine@1100528703 : Record 11072558;CurrentWorkOrderInspectionLine@1100528702 : Record 11072558) : Boolean;
    VAR
      WorkOrderInspectionLine@1100528101 : Record 11072558;
      DateFilter@1100528700 : Text;
      DateDecimalFilterParser@1100528701 : Codeunit 11012894;
    BEGIN
      DateFilter := DateDecimalFilterParser.DateFilterToText(
        CurrentWorkOrderInspectionLine."Dependency Condition Date 1",
        CurrentWorkOrderInspectionLine."Dependency Condition Operation",
        CurrentWorkOrderInspectionLine."Dependency Condition Date 2");

      WorkOrderInspectionLine.SETFILTER("Value (Date)", DateFilter);
      EXIT(IsLineEditableBasedOnFilter(DependingOnWorkOrderInspectionLine, CurrentWorkOrderInspectionLine, WorkOrderInspectionLine));
    END;

    LOCAL PROCEDURE IsLineEditableBasedOnFilter@1100528111(DependingOnWorkOrderInspectionLine@1100528701 : Record 11072558;CurrentWorkOrderInspectionLine@1100528700 : Record 11072558;VAR WorkOrderInspectionLine@1100528102 : Record 11072558) : Boolean;
    VAR
      WorkOrderInspectionLineEmpty@1100528103 : Boolean;
    BEGIN
      WorkOrderInspectionLine.SETRANGE("Work Order No.", DependingOnWorkOrderInspectionLine."Work Order No.");
      WorkOrderInspectionLine.SETRANGE("Service Object No.", DependingOnWorkOrderInspectionLine."Service Object No.");
      WorkOrderInspectionLine.SETRANGE("Maintenance Scheme Code", DependingOnWorkOrderInspectionLine."Maintenance Scheme Code");
      WorkOrderInspectionLine.SETRANGE("Line No.", DependingOnWorkOrderInspectionLine."Line No.");
      WorkOrderInspectionLineEmpty := WorkOrderInspectionLine.ISEMPTY;

      CASE CurrentWorkOrderInspectionLine."Dependency Effect" OF
        "Dependency Effect"::"Enable Line":
          EXIT(NOT WorkOrderInspectionLineEmpty);
        "Dependency Effect"::"Disable Line":
          EXIT(WorkOrderInspectionLineEmpty);
      END;
    END;

    BEGIN
    END.
  }
}

