OBJECT Page 5495 Sales Order Entity
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=salesOrders;
               NOR=salesOrders;
               SVE=salesOrders];
    SourceTable=Table5495;
    DelayedInsert=Yes;
    PageType=API;
    ChangeTrackingAllowed=Yes;
    EntitySetName=salesOrders;
    EntityName=salesOrder;
    OnOpenPage=BEGIN
                 CheckPermissions;
               END;

    OnAfterGetRecord=BEGIN
                       SetCalculatedFields;
                       IF HasWritePermission THEN
                         GraphMgtSalesOrderBuffer.RedistributeInvoiceDiscounts(Rec);
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                END;

    OnInsertRecord=BEGIN
                     CheckCustomerSpecified;
                     ProcessBillingPostalAddress;

                     GraphMgtSalesOrderBuffer.PropagateOnInsert(Rec,TempFieldBuffer);
                     SetDates;

                     UpdateDiscount;

                     SetCalculatedFields;

                     EXIT(FALSE);
                   END;

    OnModifyRecord=BEGIN
                     IF xRec.Id <> Id THEN
                       ERROR(CannotChangeIDErr);

                     ProcessBillingPostalAddress;

                     GraphMgtSalesOrderBuffer.PropagateOnModify(Rec,TempFieldBuffer);
                     UpdateDiscount;

                     SetCalculatedFields;

                     EXIT(FALSE);
                   END;

    OnDeleteRecord=BEGIN
                     GraphMgtSalesOrderBuffer.PropagateOnDelete(Rec);

                     EXIT(FALSE);
                   END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 21  ;0   ;Container ;
                ContainerType=ContentArea }

    { 20  ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 19  ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=id;
                           NOR=id;
                           SVE=id];
                ApplicationArea=#All;
                SourceExpr=Id;
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Id));
                           END;
                            }

    { 18  ;2   ;Field     ;
                Name=number;
                CaptionML=[@@@={Locked};
                           ENU=number;
                           NOR=number;
                           SVE=number];
                ApplicationArea=#All;
                SourceExpr="No.";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("No."));
                           END;
                            }

    { 29  ;2   ;Field     ;
                Name=externalDocumentNumber;
                CaptionML=[@@@={Locked};
                           ENU=externalDocumentNumber;
                           NOR=externalDocumentNumber;
                           SVE=externalDocumentNumber];
                ApplicationArea=#All;
                SourceExpr="External Document No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("External Document No."))
                           END;
                            }

    { 28  ;2   ;Field     ;
                Name=orderDate;
                CaptionML=[@@@={Locked};
                           ENU=orderDate;
                           NOR=orderDate;
                           SVE=orderDate];
                ApplicationArea=#All;
                SourceExpr="Document Date";
                OnValidate=BEGIN
                             DocumentDateVar := "Document Date";
                             DocumentDateSet := TRUE;

                             RegisterFieldSet(FIELDNO("Document Date"));
                           END;
                            }

    { 14  ;2   ;Field     ;
                Name=customerId;
                CaptionML=[@@@={Locked};
                           ENU=customerId;
                           NOR=customerId;
                           SVE=customerId];
                ApplicationArea=#All;
                SourceExpr="Customer Id";
                OnValidate=VAR
                             O365SalesInvoiceMgmt@1000 : Codeunit 2310;
                           BEGIN
                             Customer.SETRANGE(Id,"Customer Id");
                             IF NOT Customer.FINDFIRST THEN
                               ERROR(CouldNotFindCustomerErr);

                             O365SalesInvoiceMgmt.EnforceCustomerTemplateIntegrity(Customer);

                             "Sell-to Customer No." := Customer."No.";
                             RegisterFieldSet(FIELDNO("Customer Id"));
                             RegisterFieldSet(FIELDNO("Sell-to Customer No."));
                           END;
                            }

    { 26  ;2   ;Field     ;
                Name=contactId;
                CaptionML=[@@@={Locked};
                           ENU=contactId;
                           NOR=contactId;
                           SVE=contactId];
                ApplicationArea=#All;
                SourceExpr="Contact Graph Id";
                OnValidate=VAR
                             Contact@1000 : Record 5050;
                             Customer@1001 : Record 18;
                             GraphIntContact@1003 : Codeunit 5461;
                           BEGIN
                             RegisterFieldSet(FIELDNO("Contact Graph Id"));

                             IF "Contact Graph Id" = '' THEN
                               ERROR(ContactIdHasToHaveValueErr);

                             IF NOT GraphIntContact.FindOrCreateCustomerFromGraphContactSafe("Contact Graph Id",Customer,Contact) THEN
                               EXIT;

                             UpdateCustomerFromGraphContactId(Customer);

                             IF Contact."Company No." = Customer."No." THEN BEGIN
                               VALIDATE("Sell-To Contact No.",Contact."No.");
                               VALIDATE("Sell-to Contact",Contact.Name);

                               RegisterFieldSet(FIELDNO("Sell-To Contact No."));
                               RegisterFieldSet(FIELDNO("Sell-to Contact"));
                             END;
                           END;
                            }

    { 12  ;2   ;Field     ;
                Name=customerNumber;
                CaptionML=[@@@={Locked};
                           ENU=customerNumber;
                           NOR=customerNumber;
                           SVE=customerNumber];
                ApplicationArea=#All;
                SourceExpr="Sell-to Customer No.";
                OnValidate=VAR
                             O365SalesInvoiceMgmt@1000 : Codeunit 2310;
                           BEGIN
                             IF Customer."No." <> '' THEN BEGIN
                               IF Customer."No." <> "Sell-to Customer No." THEN
                                 ERROR(CustomerValuesDontMatchErr);
                               EXIT;
                             END;

                             IF NOT Customer.GET("Sell-to Customer No.") THEN
                               ERROR(CouldNotFindCustomerErr);

                             O365SalesInvoiceMgmt.EnforceCustomerTemplateIntegrity(Customer);

                             "Customer Id" := Customer.Id;
                             RegisterFieldSet(FIELDNO("Customer Id"));
                             RegisterFieldSet(FIELDNO("Sell-to Customer No."));
                           END;
                            }

    { 15  ;2   ;Field     ;
                Name=customerName;
                CaptionML=[@@@={Locked};
                           ENU=customerName;
                           NOR=customerName;
                           SVE=customerName];
                ApplicationArea=#All;
                SourceExpr="Sell-to Customer Name";
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                Name=billingPostalAddress;
                CaptionML=[@@@={Locked};
                           ENU=billingPostalAddress;
                           NOR=billingPostalAddress;
                           SVE=billingPostalAddress];
                ToolTipML=[ENU=Specifies the billing address of the Sales Invoice.;
                           NOR=Angir fakturaadressen for salgsfakturaen.;
                           SVE=Anger faktureringsadressen i f”rs„ljningsfakturan.];
                ApplicationArea=#All;
                SourceExpr=BillingPostalAddressJSONText;
                OnValidate=BEGIN
                             BillingPostalAddressSet := TRUE;
                           END;

                ODataEDMType=POSTALADDRESS }

    { 22  ;2   ;Field     ;
                Name=currencyId;
                CaptionML=[@@@={Locked};
                           ENU=CurrencyId;
                           NOR=CurrencyId;
                           SVE=CurrencyId];
                ApplicationArea=#All;
                SourceExpr="Currency Id";
                OnValidate=BEGIN
                             IF "Currency Id" = BlankGUID THEN
                               "Currency Code" := ''
                             ELSE BEGIN
                               Currency.SETRANGE(Id,"Currency Id");
                               IF NOT Currency.FINDFIRST THEN
                                 ERROR(CurrencyIdDoesNotMatchACurrencyErr);

                               "Currency Code" := Currency.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Currency Id"));
                             RegisterFieldSet(FIELDNO("Currency Code"));
                           END;
                            }

    { 25  ;2   ;Field     ;
                Name=currencyCode;
                CaptionML=[@@@={Locked};
                           ENU=currencyCode;
                           NOR=currencyCode;
                           SVE=currencyCode];
                ApplicationArea=#All;
                SourceExpr=CurrencyCodeTxt;
                OnValidate=BEGIN
                             "Currency Code" :=
                               GraphMgtGeneralTools.TranslateCurrencyCodeToNAVCurrencyCode(
                                 LCYCurrencyCode,COPYSTR(CurrencyCodeTxt,1,MAXSTRLEN(LCYCurrencyCode)));

                             IF Currency.Code <> '' THEN BEGIN
                               IF Currency.Code <> "Currency Code" THEN
                                 ERROR(CurrencyValuesDontMatchErr);
                               EXIT;
                             END;

                             IF "Currency Code" = '' THEN
                               "Currency Id" := BlankGUID
                             ELSE BEGIN
                               IF NOT Currency.GET("Currency Code") THEN
                                 ERROR(CurrencyCodeDoesNotMatchACurrencyErr);

                               "Currency Id" := Currency.Id;
                             END;

                             RegisterFieldSet(FIELDNO("Currency Id"));
                             RegisterFieldSet(FIELDNO("Currency Code"));
                           END;
                            }

    { 23  ;2   ;Field     ;
                Name=pricesIncludeTax;
                CaptionML=[@@@={Locked};
                           ENU=pricesIncludeTax;
                           NOR=pricesIncludeTax;
                           SVE=pricesIncludeTax];
                ApplicationArea=#All;
                SourceExpr="Prices Including VAT";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Prices Including VAT"));
                           END;
                            }

    { 27  ;2   ;Field     ;
                Name=paymentTermsId;
                CaptionML=[@@@={Locked};
                           ENU=PaymentTermsId;
                           NOR=PaymentTermsId;
                           SVE=PaymentTermsId];
                ApplicationArea=#All;
                SourceExpr="Payment Terms Id";
                OnValidate=BEGIN
                             IF "Payment Terms Id" = BlankGUID THEN
                               "Payment Terms Code" := ''
                             ELSE BEGIN
                               PaymentTerms.SETRANGE(Id,"Payment Terms Id");
                               IF NOT PaymentTerms.FINDFIRST THEN
                                 ERROR(PaymentTermsIdDoesNotMatchAPaymentTermsErr);

                               "Payment Terms Code" := PaymentTerms.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Payment Terms Id"));
                             RegisterFieldSet(FIELDNO("Payment Terms Code"));
                           END;
                            }

    { 31  ;2   ;Field     ;
                Name=shipmentMethodId;
                CaptionML=[@@@={Locked};
                           ENU=ShipmentMethodId;
                           NOR=ShipmentMethodId;
                           SVE=ShipmentMethodId];
                ApplicationArea=#All;
                SourceExpr="Shipment Method Id";
                OnValidate=BEGIN
                             IF "Shipment Method Id" = BlankGUID THEN
                               "Shipment Method Code" := ''
                             ELSE BEGIN
                               ShipmentMethod.SETRANGE(Id,"Shipment Method Id");
                               IF NOT ShipmentMethod.FINDFIRST THEN
                                 ERROR(ShipmentMethodIdDoesNotMatchAShipmentMethodErr);

                               "Shipment Method Code" := ShipmentMethod.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Shipment Method Id"));
                             RegisterFieldSet(FIELDNO("Shipment Method Code"));
                           END;
                            }

    { 3   ;2   ;Field     ;
                Name=salesperson;
                CaptionML=[@@@={Locked};
                           ENU=salesperson;
                           NOR=salesperson;
                           SVE=salesperson];
                ApplicationArea=#All;
                SourceExpr="Salesperson Code";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Salesperson Code"));
                           END;
                            }

    { 2   ;2   ;Field     ;
                Name=partialShipping;
                CaptionML=[@@@={Locked};
                           ENU=partialShipping;
                           NOR=partialShipping;
                           SVE=partialShipping];
                ApplicationArea=#All;
                SourceExpr=PartialShipping;
                OnValidate=BEGIN
                             ProcessPartialShipping;
                           END;
                            }

    { 4   ;2   ;Field     ;
                Name=requestedDeliveryDate;
                CaptionML=[@@@={Locked};
                           ENU=requestedDeliveryDate;
                           NOR=requestedDeliveryDate;
                           SVE=requestedDeliveryDate];
                ApplicationArea=#All;
                SourceExpr="Requested Delivery Date";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Requested Delivery Date"));
                           END;
                            }

    { 24  ;2   ;Part      ;
                Name=salesOrderLines;
                CaptionML=[@@@={Locked};
                           ENU=Lines;
                           NOR=Lines;
                           SVE=Lines];
                ApplicationArea=#All;
                SubPageLink=Document Id=FIELD(Id);
                PagePartID=Page5496;
                EntitySetName=salesOrderLines;
                EntityName=salesOrderLine;
                PartType=Page }

    { 11  ;2   ;Field     ;
                Name=discountAmount;
                CaptionML=[@@@={Locked};
                           ENU=discountAmount;
                           NOR=discountAmount;
                           SVE=discountAmount];
                ApplicationArea=#All;
                SourceExpr="Invoice Discount Amount";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Invoice Discount Amount"));
                             InvoiceDiscountAmount := "Invoice Discount Amount";
                             DiscountAmountSet := TRUE;
                           END;
                            }

    { 10  ;2   ;Field     ;
                Name=discountAppliedBeforeTax;
                CaptionML=[@@@={Locked};
                           ENU=discountAppliedBeforeTax;
                           NOR=discountAppliedBeforeTax;
                           SVE=discountAppliedBeforeTax];
                ApplicationArea=#All;
                SourceExpr="Discount Applied Before Tax";
                Editable=FALSE }

    { 9   ;2   ;Field     ;
                Name=totalAmountExcludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalAmountExcludingTax;
                           NOR=totalAmountExcludingTax;
                           SVE=totalAmountExcludingTax];
                ApplicationArea=#All;
                SourceExpr=Amount;
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                Name=totalTaxAmount;
                CaptionML=[@@@={Locked};
                           ENU=totalTaxAmount;
                           NOR=totalTaxAmount;
                           SVE=totalTaxAmount];
                ToolTipML=[ENU=Specifies the total tax amount for the sales invoice.;
                           NOR=Angir det totale mva-bel›pet for salgsfakturaen.;
                           SVE=Anger f”rs„ljningsfakturans totala momsbelopp.];
                ApplicationArea=#All;
                SourceExpr="Total Tax Amount";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Total Tax Amount"));
                           END;
                            }

    { 7   ;2   ;Field     ;
                Name=totalAmountIncludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalAmountIncludingTax;
                           NOR=totalAmountIncludingTax;
                           SVE=totalAmountIncludingTax];
                ApplicationArea=#All;
                SourceExpr="Amount Including VAT";
                Editable=FALSE;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Amount Including VAT"));
                           END;
                            }

    { 16  ;2   ;Field     ;
                Name=fullyShipped;
                CaptionML=[@@@={Locked};
                           ENU=fullyShipped;
                           NOR=fullyShipped;
                           SVE=fullyShipped];
                ApplicationArea=#All;
                SourceExpr="Completely Shipped";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Completely Shipped"));
                           END;
                            }

    { 13  ;2   ;Field     ;
                Name=status;
                CaptionML=[@@@={Locked};
                           ENU=status;
                           NOR=status;
                           SVE=status];
                ToolTipML=[ENU=Specifies the status of the Sales Invoice (cancelled, paid, on hold, created).;
                           NOR=Angir statusen til salgsfakturaen (kansellert, betalt, sperret, opprettet).;
                           SVE=Anger f”rs„ljningsfakturans status (annullerad, betald, sp„rrad, skapad).];
                ApplicationArea=#All;
                SourceExpr=Status;
                Editable=FALSE }

    { 1   ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=lastModifiedDateTime;
                           NOR=lastModifiedDateTime;
                           SVE=lastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last Modified Date Time";
                Editable=FALSE }

    { 17  ;2   ;Field     ;
                Name=phoneNumber;
                CaptionML=[@@@={Locked};
                           ENU=PhoneNumber;
                           NOR=PhoneNumber;
                           SVE=PhoneNumber];
                ApplicationArea=#All;
                SourceExpr="Sell-to Phone No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Sell-to Phone No."));
                           END;
                            }

    { 5   ;2   ;Field     ;
                Name=email;
                CaptionML=[@@@={Locked};
                           ENU=Email;
                           NOR=Email;
                           SVE=Email];
                ApplicationArea=#All;
                SourceExpr="Sell-to E-Mail";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Sell-to E-Mail"));
                           END;
                            }

  }
  CODE
  {
    VAR
      CannotChangeIDErr@1004 : TextConst '@@@={Locked};ENU=The id cannot be changed.;NOR=The id cannot be changed.;SVE=The id cannot be changed.';
      TempFieldBuffer@1001 : TEMPORARY Record 8450;
      Customer@1003 : Record 18;
      Currency@1015 : Record 4;
      PaymentTerms@1019 : Record 3;
      ShipmentMethod@1033 : Record 10;
      GraphMgtSalesOrderBuffer@1007 : Codeunit 5496;
      GraphMgtGeneralTools@1009 : Codeunit 5465;
      LCYCurrencyCode@1008 : Code[10];
      CurrencyCodeTxt@1006 : Text;
      BillingPostalAddressJSONText@1002 : Text;
      BillingPostalAddressSet@1000 : Boolean;
      CustomerNotProvidedErr@1024 : TextConst '@@@={Locked};ENU=A customerNumber or a customerId must be provided.;NOR=A customerNumber or a customerId must be provided.;SVE=A customerNumber or a customerId must be provided.';
      CustomerValuesDontMatchErr@1025 : TextConst '@@@={Locked};ENU=The customer values do not match to a specific Customer.;NOR=The customer values do not match to a specific Customer.;SVE=The customer values do not match to a specific Customer.';
      CouldNotFindCustomerErr@1005 : TextConst '@@@={Locked};ENU=The customer cannot be found.;NOR=The customer cannot be found.;SVE=The customer cannot be found.';
      PartialShipping@1010 : Boolean;
      ContactIdHasToHaveValueErr@1011 : TextConst '@@@={Locked};ENU=Contact Id must have a value set.;NOR=Contact Id must have a value set.;SVE=Contact Id must have a value set.';
      SalesOrderPermissionsErr@1023 : TextConst 'ENU=You do not have permissions to read Sales Orders.;NOR=Du har ikke tillatelser til † lese ordrer.;SVE=Du saknar beh”righet att l„sa f”rs„ljningsorder.';
      CurrencyValuesDontMatchErr@1014 : TextConst '@@@={Locked};ENU=The currency values do not match to a specific Currency.;NOR=The currency values do not match to a specific Currency.;SVE=The currency values do not match to a specific Currency.';
      CurrencyIdDoesNotMatchACurrencyErr@1013 : TextConst '@@@={Locked};ENU=The "currencyId" does not match to a Currency.;NOR=The "currencyId" does not match to a Currency.;SVE=The "currencyId" does not match to a Currency.';
      CurrencyCodeDoesNotMatchACurrencyErr@1012 : TextConst '@@@={Locked};ENU=The "currencyCode" does not match to a Currency.;NOR=The "currencyCode" does not match to a Currency.;SVE=The "currencyCode" does not match to a Currency.';
      PaymentTermsIdDoesNotMatchAPaymentTermsErr@1017 : TextConst '@@@={Locked};ENU=The "paymentTermsId" does not match to a Payment Terms.;NOR=The "paymentTermsId" does not match to a Payment Terms.;SVE=The "paymentTermsId" does not match to a Payment Terms.';
      ShipmentMethodIdDoesNotMatchAShipmentMethodErr@1034 : TextConst '@@@={Locked};ENU=The "shipmentMethodId" does not match to a Shipment Method.;NOR=The "shipmentMethodId" does not match to a Shipment Method.;SVE=The "shipmentMethodId" does not match to a Shipment Method.';
      DiscountAmountSet@1021 : Boolean;
      InvoiceDiscountAmount@1022 : Decimal;
      BlankGUID@1020 : GUID;
      DocumentDateSet@1027 : Boolean;
      DocumentDateVar@1026 : Date;
      HasWritePermission@1016 : Boolean;

    LOCAL PROCEDURE SetCalculatedFields@6();
    VAR
      GraphMgtSalesOrder@1000 : Codeunit 5495;
    BEGIN
      BillingPostalAddressJSONText := GraphMgtSalesOrder.BillToCustomerAddressToJSON(Rec);
      CurrencyCodeTxt := GraphMgtGeneralTools.TranslateNAVCurrencyCodeToCurrencyCode(LCYCurrencyCode,"Currency Code");
      PartialShipping := ("Shipping Advice" = "Shipping Advice"::Partial);
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(BillingPostalAddressJSONText);
      CLEAR(DiscountAmountSet);
      CLEAR(InvoiceDiscountAmount);

      PartialShipping := FALSE;
      TempFieldBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE RegisterFieldSet@11(FieldNo@1000 : Integer);
    VAR
      LastOrderNo@1001 : Integer;
    BEGIN
      LastOrderNo := 1;
      IF TempFieldBuffer.FINDLAST THEN
        LastOrderNo := TempFieldBuffer.Order + 1;

      CLEAR(TempFieldBuffer);
      TempFieldBuffer.Order := LastOrderNo;
      TempFieldBuffer."Table ID" := DATABASE::"Sales Invoice Entity Aggregate";
      TempFieldBuffer."Field ID" := FieldNo;
      TempFieldBuffer.INSERT;
    END;

    LOCAL PROCEDURE CheckCustomerSpecified@1();
    BEGIN
      IF ("Sell-to Customer No." = '') AND
         ("Customer Id" = BlankGUID)
      THEN
        ERROR(CustomerNotProvidedErr);
    END;

    LOCAL PROCEDURE ProcessBillingPostalAddress@5();
    VAR
      GraphMgtSalesOrder@1000 : Codeunit 5495;
    BEGIN
      IF NOT BillingPostalAddressSet THEN
        EXIT;

      GraphMgtSalesOrder.ProcessComplexTypes(Rec,BillingPostalAddressJSONText);

      IF xRec."Sell-to Address" <> "Sell-to Address" THEN
        RegisterFieldSet(FIELDNO("Sell-to Address"));

      IF xRec."Sell-to Address 2" <> "Sell-to Address 2" THEN
        RegisterFieldSet(FIELDNO("Sell-to Address 2"));

      IF xRec."Sell-to City" <> "Sell-to City" THEN
        RegisterFieldSet(FIELDNO("Sell-to City"));

      IF xRec."Sell-to Country/Region Code" <> "Sell-to Country/Region Code" THEN
        RegisterFieldSet(FIELDNO("Sell-to Country/Region Code"));

      IF xRec."Sell-to Post Code" <> "Sell-to Post Code" THEN
        RegisterFieldSet(FIELDNO("Sell-to Post Code"));

      IF xRec."Sell-to County" <> "Sell-to County" THEN
        RegisterFieldSet(FIELDNO("Sell-to County"));
    END;

    LOCAL PROCEDURE ProcessPartialShipping@8();
    BEGIN
      IF PartialShipping THEN
        "Shipping Advice" := "Shipping Advice"::Partial
      ELSE
        "Shipping Advice" := "Shipping Advice"::Complete;

      RegisterFieldSet(FIELDNO("Shipping Advice"));
    END;

    LOCAL PROCEDURE UpdateCustomerFromGraphContactId@2(VAR Customer@1001 : Record 18);
    VAR
      O365SalesInvoiceMgmt@1002 : Codeunit 2310;
      UpdateCustomer@1000 : Boolean;
    BEGIN
      UpdateCustomer := "Sell-to Customer No." = '';
      IF NOT UpdateCustomer THEN BEGIN
        TempFieldBuffer.RESET;
        TempFieldBuffer.SETRANGE("Field ID",FIELDNO("Customer Id"));
        UpdateCustomer := NOT TempFieldBuffer.FINDFIRST;
        TempFieldBuffer.RESET;
      END;

      IF UpdateCustomer THEN BEGIN
        VALIDATE("Customer Id",Customer.Id);
        VALIDATE("Sell-to Customer No.",Customer."No.");
        RegisterFieldSet(FIELDNO("Customer Id"));
        RegisterFieldSet(FIELDNO("Sell-to Customer No."));
      END;

      O365SalesInvoiceMgmt.EnforceCustomerTemplateIntegrity(Customer);
    END;

    LOCAL PROCEDURE CheckPermissions@4();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      IF NOT SalesHeader.READPERMISSION THEN
        ERROR(SalesOrderPermissionsErr);

      HasWritePermission := SalesHeader.WRITEPERMISSION;
    END;

    LOCAL PROCEDURE UpdateDiscount@3();
    VAR
      SalesHeader@1002 : Record 36;
      SalesCalcDiscountByType@1000 : Codeunit 56;
    BEGIN
      IF NOT DiscountAmountSet THEN BEGIN
        GraphMgtSalesOrderBuffer.RedistributeInvoiceDiscounts(Rec);
        EXIT;
      END;

      SalesHeader.GET(SalesHeader."Document Type"::Order,"No.");
      SalesCalcDiscountByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,SalesHeader);
    END;

    LOCAL PROCEDURE SetDates@7();
    VAR
      GraphMgtSalesOrderBuffer@1000 : Codeunit 5496;
    BEGIN
      IF NOT DocumentDateSet THEN
        EXIT;

      TempFieldBuffer.RESET;
      TempFieldBuffer.DELETEALL;

      IF DocumentDateSet THEN BEGIN
        "Document Date" := DocumentDateVar;
        RegisterFieldSet(FIELDNO("Document Date"));
      END;

      GraphMgtSalesOrderBuffer.PropagateOnModify(Rec,TempFieldBuffer);
      FIND;
    END;

    BEGIN
    END.
  }
}

