OBJECT Codeunit 76 Purch.-Get Drop Shpt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00,NAVSE;
  }
  PROPERTIES
  {
    TableNo=38;
    Permissions=TableData 36=m,
                TableData 37=m;
    OnRun=BEGIN
            PurchHeader.COPY(Rec);
            Code;
            Rec := PurchHeader;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=There were no lines to be retrieved from sales order %1.;NOR=Det fantes ingen linjer † hente fra ordre %1.;SVE=Det fanns inga rader att h„mta fr†n f”rs.order %1.';
      PurchHeader@1001 : Record 38;
      PurchLine@1002 : Record 39;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      SalesSetup@1100528800 : Record 311;
      CopyDocMgt@1006 : Codeunit 6620;
      ItemTrackingMgt@1007 : Codeunit 6500;
      TransferExtendedText@1008 : Codeunit 378;
      NextLineNo@1005 : Integer;
      Text001@1009 : TextConst 'ENU=The %1 for %2 %3 has changed from %4 to %5 since the Sales Order was created. Adjust the %6 on the Sales Order or the %1.;NOR=%1 for %2 %3 er endret fra %4 til %5 siden ordren ble opprettet. Juster %6 i ordren eller %1.;SVE=%1 f”r %2 %3 har „ndrats fr†n %4 till %5 sedan f”rs„ljningsordern skapades. Justera %6 i f”rs„ljningsordern eller %1.';
      SelltoCustomerBlankErr@1010 : TextConst 'ENU=The Sell-to Customer No. field must have a value.;NOR=Feltet Salg til-kundenr. m† ha en verdi.';
      Text010@1070000 : TextConst 'ENU=%1 on %2 %3 is %4.\Do you wish to change %5 on %6 %7 from %8 to %9?;NOR=%1 p† %2 %3 er %4.\Vil du endre %5 p† %6 %7 fra %8 til %9?;SVE=%1 p† %2 %3 „r %4.\Vill du „ndra %5 p† %6 %7 fr†n %8 till %9?';

    LOCAL PROCEDURE Code@1();
    VAR
      PurchLine2@1000 : Record 39;
      ItemUnitofMeasure@1001 : Record 5404;
      IsHandled@1002 : Boolean;
    BEGIN
      WITH PurchHeader DO BEGIN
        TESTFIELD("Document Type","Document Type"::Order);

        IF "Sell-to Customer No." = '' THEN
          ERROR(SelltoCustomerBlankErr);

        IsHandled := FALSE;
        OnCodeOnBeforeSelectSalesHeader(PurchHeader,SalesHeader,IsHandled);
        IF NOT IsHandled THEN BEGIN
          SalesHeader.SETCURRENTKEY("Document Type","Sell-to Customer No.");
          SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
          SalesHeader.SETRANGE("Sell-to Customer No.","Sell-to Customer No.");

          //**4PS.sn
          SalesSetup.GET;
          IF SalesSetup."Release Sales Orders Required" THEN BEGIN
            SalesHeader.FILTERGROUP(9);
            SalesHeader.SETRANGE(Status, SalesHeader.Status::Released);
            SalesHeader.FILTERGROUP(0);
          END;
          //**4PS.en
          IF (PAGE.RUNMODAL(PAGE::"Sales List",SalesHeader) <> ACTION::LookupOK) OR
             (SalesHeader."No." = '')
          THEN
            EXIT;
        END;

        LOCKTABLE;
        SalesHeader.TESTFIELD("Document Type",SalesHeader."Document Type"::Order);
        TESTFIELD("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
        TESTFIELD("Ship-to Code",SalesHeader."Ship-to Code");
        IF DropShptOrderExists(SalesHeader) THEN
          AddShipToAddress(SalesHeader,TRUE);

        PurchLine.LOCKTABLE;
        SalesLine.LOCKTABLE;

        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
        PurchLine.SETRANGE("Document No.","No.");
        IF PurchLine.FINDLAST THEN
          NextLineNo := PurchLine."Line No." + 10000
        ELSE
          NextLineNo := 10000;

        SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        SalesLine.SETRANGE("Drop Shipment",TRUE);
        SalesLine.SETFILTER("Outstanding Quantity",'<>0');
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        SalesLine.SETFILTER("No.",'<>%1','');
        SalesLine.SETRANGE("Purch. Order Line No.",0);

        IF SalesLine.FIND('-') THEN
          REPEAT
            IF (SalesLine.Type = SalesLine.Type::Item) AND ItemUnitofMeasure.GET(SalesLine."No.",SalesLine."Unit of Measure Code") THEN
              IF SalesLine."Qty. per Unit of Measure" <> ItemUnitofMeasure."Qty. per Unit of Measure" THEN
                ERROR(Text001,
                  SalesLine.FIELDCAPTION("Qty. per Unit of Measure"),
                  SalesLine.FIELDCAPTION("Unit of Measure Code"),
                  SalesLine."Unit of Measure Code",
                  SalesLine."Qty. per Unit of Measure",
                  ItemUnitofMeasure."Qty. per Unit of Measure",
                  SalesLine.FIELDCAPTION(Quantity));

            PurchLine.INIT;
            PurchLine."Document Type" := PurchLine."Document Type"::Order;
            PurchLine."Document No." := "No.";
            PurchLine."Line No." := NextLineNo;
            CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,PurchLine);
            GetDescription(PurchLine,SalesLine);
            PurchLine."Sales Order No." := SalesLine."Document No.";
            PurchLine."Sales Order Line No." := SalesLine."Line No.";
            PurchLine."Drop Shipment" := TRUE;
            PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
            EVALUATE(PurchLine."Inbound Whse. Handling Time",'<0D>');
            PurchLine.VALIDATE("Inbound Whse. Handling Time");
            //**4PS.sn
            PurchLine2."Input by" := USERID; //DP00469
            PurchLine2."Input Date" := TODAY; //DP00469
            //**4PS.en
            OnBeforePurchaseLineInsert(PurchLine,SalesLine);
            PurchLine.INSERT;
            OnAfterPurchaseLineInsert(PurchLine);

            NextLineNo := NextLineNo + 10000;

            SalesLine."Unit Cost (LCY)" := PurchLine."Unit Cost (LCY)";
            SalesLine.VALIDATE("Unit Cost (LCY)");
            SalesLine."Purchase Order No." := PurchLine."Document No.";
            SalesLine."Purch. Order Line No." := PurchLine."Line No.";
            OnBeforeSalesLineModify(SalesLine,PurchLine);
            SalesLine.MODIFY;
            OnAfterSalesLineModify(SalesLine,PurchLine);
            ItemTrackingMgt.CopyItemTracking(SalesLine.RowID1,PurchLine.RowID1,TRUE);

            IF TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE) THEN BEGIN
              TransferExtendedText.InsertPurchExtText(PurchLine);
              PurchLine2.SETRANGE("Document Type","Document Type");
              PurchLine2.SETRANGE("Document No.","No.");
              IF PurchLine2.FINDLAST THEN
                NextLineNo := PurchLine2."Line No.";
              NextLineNo := NextLineNo + 10000;
            END;

          UNTIL SalesLine.NEXT = 0
        ELSE
          ERROR(
            Text000,
            SalesHeader."No.");

        GetAddressFromSalesOrder(SalesHeader); //**4PS.n

        OnCodeOnBeforeModify(PurchHeader,SalesHeader);

        //>>NAVSE
        // NTR Start
          IF SalesHeader."EU 3-Party Trade" <> PurchHeader."EU 3-Party Trade" THEN
            IF CONFIRM(Text010,FALSE,
              SalesHeader.FIELDCAPTION("EU 3-Party Trade"),SalesHeader.TABLENAME,SalesHeader."No.",
              SalesHeader."EU 3-Party Trade",PurchHeader.FIELDCAPTION("EU 3-Party Trade"),
              PurchHeader.TABLECAPTION,PurchHeader."No.",PurchHeader."EU 3-Party Trade",
              SalesHeader."EU 3-Party Trade") THEN
              PurchHeader."EU 3-Party Trade" := SalesHeader."EU 3-Party Trade";
        // NTR End
        //<<NAVSE

        MODIFY; // Only version check
        SalesHeader.MODIFY; // Only version check
      END;
    END;

    LOCAL PROCEDURE GetDescription@2(VAR PurchaseLine@1007 : Record 39;SalesLine@1006 : Record 37);
    VAR
      Item@1000 : Record 27;
    BEGIN
      IF (SalesLine.Type <> SalesLine.Type::Item) OR (SalesLine."No." = '') THEN
        EXIT;
      Item.GET(SalesLine."No.");

      IF GetDescriptionFromItemCrossReference(PurchaseLine,SalesLine,Item) THEN
        EXIT;
      IF GetDescriptionFromItemTranslation(PurchaseLine,SalesLine) THEN
        EXIT;
      IF GetDescriptionFromSalesLine(PurchaseLine,SalesLine) THEN
        EXIT;
      IF GetDescriptionFromItemVariant(PurchaseLine,SalesLine,Item) THEN
        EXIT;
      GetDescriptionFromItem(PurchaseLine,Item);
    END;

    LOCAL PROCEDURE GetDescriptionFromItemCrossReference@7(VAR PurchaseLine@1001 : Record 39;SalesLine@1000 : Record 37;Item@1004 : Record 27) : Boolean;
    VAR
      ItemCrossRef@1002 : Record 5717;
    BEGIN
      IF PurchHeader."Buy-from Vendor No." <> '' THEN
        EXIT(
          ItemCrossRef.GetItemDescription(
            PurchaseLine.Description,PurchaseLine."Description 2",Item."No.",SalesLine."Variant Code",
            SalesLine."Unit of Measure Code",ItemCrossRef."Cross-Reference Type"::Vendor,PurchHeader."Buy-from Vendor No."));
    END;

    LOCAL PROCEDURE GetDescriptionFromItemTranslation@8(VAR PurchaseLine@1001 : Record 39;SalesLine@1000 : Record 37) : Boolean;
    VAR
      Vend@1003 : Record 23;
      ItemTranslation@1002 : Record 30;
    BEGIN
      IF PurchHeader."Buy-from Vendor No." <> '' THEN BEGIN
        Vend.GET(PurchHeader."Buy-from Vendor No.");
        IF Vend."Language Code" <> '' THEN
          IF ItemTranslation.GET(SalesLine."No.",SalesLine."Variant Code",Vend."Language Code") THEN BEGIN
            PurchaseLine.Description := ItemTranslation.Description;
            PurchaseLine."Description 2" := ItemTranslation."Description 2";
            OnGetDescriptionFromItemTranslation(PurchaseLine,ItemTranslation);
            EXIT(TRUE);
          END;
      END;
      EXIT(FALSE)
    END;

    LOCAL PROCEDURE GetDescriptionFromItemVariant@9(VAR PurchaseLine@1001 : Record 39;SalesLine@1000 : Record 37;Item@1002 : Record 27) : Boolean;
    VAR
      ItemVariant@1003 : Record 5401;
    BEGIN
      IF SalesLine."Variant Code" <> '' THEN BEGIN
        ItemVariant.GET(Item."No.",SalesLine."Variant Code");
        PurchaseLine.Description := ItemVariant.Description;
        PurchaseLine."Description 2" := ItemVariant."Description 2";
        OnGetDescriptionFromItemVariant(PurchaseLine,ItemVariant);
        EXIT(TRUE);
      END;
      EXIT(FALSE)
    END;

    LOCAL PROCEDURE GetDescriptionFromItem@11(VAR PurchaseLine@1001 : Record 39;Item@1002 : Record 27);
    BEGIN
      PurchaseLine.Description := Item.Description;
      PurchaseLine."Description 2" := Item."Description 2";
      OnGetDescriptionFromItem(PurchaseLine,Item);
    END;

    LOCAL PROCEDURE GetDescriptionFromSalesLine@3(VAR PurchaseLine@1001 : Record 39;SalesLine@1000 : Record 37) : Boolean;
    BEGIN
      IF (SalesLine.Description <> '') OR (SalesLine."Description 2" <> '') THEN BEGIN
        PurchaseLine.Description := SalesLine.Description;
        PurchaseLine."Description 2" := SalesLine."Description 2";
        OnGetDescriptionFromSalesLine(PurchaseLine,SalesLine);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPurchaseLineInsert@16(VAR PurchaseLine@1000 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesLineModify@5(VAR SalesLine@1000 : Record 37;VAR PurchaseLine@1001 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePurchaseLineInsert@4(VAR PurchaseLine@1000 : Record 39;SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSalesLineModify@6(VAR SalesLine@1000 : Record 37;PurchaseLine@1001 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCodeOnBeforeModify@10(VAR PurchaseHeader@1000 : Record 38;SalesHeader@1001 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetDescriptionFromItemTranslation@12(VAR PurchaseLine@1000 : Record 39;ItemTranslation@1001 : Record 30);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetDescriptionFromItemVariant@13(VAR PurchaseLine@1000 : Record 39;ItemVariant@1001 : Record 5401);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetDescriptionFromItem@14(VAR PurchaseLine@1000 : Record 39;Item@1001 : Record 27);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetDescriptionFromSalesLine@15(VAR PurchaseLine@1000 : Record 39;SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCodeOnBeforeSelectSalesHeader@17(VAR PurchaseHeader@1000 : Record 38;VAR SalesHeader@1001 : Record 36;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

