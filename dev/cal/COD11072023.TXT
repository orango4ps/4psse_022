OBJECT Codeunit 11072023 WordManagement
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00 (5054);
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text003@1003 : TextConst 'ENU=Merging Microsoft Word Documents...\\;NOR=Sl†r sammen Microsoft Word-dokument...\\;SVE=Kopplar Microsoft Word dokument...\\';
      Text004@1004 : TextConst 'ENU=Preparing;NOR=Forbereder;SVE=F”rbereder';
      Text005@1005 : TextConst 'ENU=Program status;NOR=Programstatus;SVE=Programstatus';
      Text006@1006 : TextConst 'ENU=Preparing Merge...;NOR=Forbereder fletting...;SVE=F”rbereder koppling...';
      Text007@1007 : TextConst 'ENU=Waiting for print job...;NOR=Venter p† utskrift...;SVE=V„ntar p† utskrift...';
      Text008@1008 : TextConst 'ENU=Transferring %1 data to Microsoft Word...;NOR=Overf›rer %1 data til Microsoft Word...;SVE=™verf”r %1 data till Microsoft Word...';
      Text009@1049 : TextConst 'ENU=Sending individual email messages...;NOR=Sender individuelle e-postmeldinger...;SVE=Skickar individuella e-postmeddelanden...';
      Text010@1010 : TextConst '@@@=Attachment No. must have File Extension DOC or DOCX.;ENU=%1 %2 must have %3 DOC or DOCX.;NOR=%1 %2 m† ha %3 DOC eller DOCX.;SVE=%1 %2 m†ste ha %3 DOC eller DOCX.';
      Text011@1011 : TextConst 'ENU=Attachment file error.;NOR=Feil i vedleggsfil.;SVE=Fel p† bifogad fil.';
      Text012@1012 : TextConst 'ENU=Creating merge source...;NOR=Oppretter sammenkoblingskilde...;SVE=Skapar kopplingsk„lla...';
      Text013@1013 : TextConst 'ENU=Microsoft Word is opening merge source...;NOR=Microsoft Word †pner Sammenkoblingskilde...;SVE=Microsoft Word ”ppnar kopplingsk„lla...';
      Text014@1014 : TextConst 'ENU=Merging %1 in Microsoft Word...;NOR=Sammenkobler %1 i Microsoft Word...;SVE=Kopplar %1 i Microsoft Word...';
      Text015@1015 : TextConst 'ENU=FaxMailTo;NOR=FaxMailTo;SVE=FaxMailTo';
      Text017@1017 : TextConst 'ENU=The merge source file is locked by another process.\;NOR=Flettekilden er l†st av en annen process.\;SVE=Kopplad datalfil „r l†st av annan process.\';
      Text018@1018 : TextConst 'ENU=Please try again later.;NOR=Pr›v igjen senere.;SVE=F”rs”k igen senare.';
      Text019@1019 : TextConst 'ENU=" Mail Address";NOR=E-Mailadresse;SVE=" E-postadress"';
      Text020@1020 : TextConst 'ENU="Document ";NOR=Dokument;SVE=Dokument';
      Text021@1021 : TextConst 'ENU="Import attachment ";NOR=Importer vedlegg;SVE="Importera bilaga "';
      Text022@1022 : TextConst 'ENU=Delete %1?;NOR=Slette %1?;SVE=Ta bort %1?';
      Text023@1023 : TextConst 'ENU=Another user has modified the record for this %1\after you retrieved it from the database.\\Enter the changes again in the updated document.;NOR=En annen bruker har endret posten %1\etter at du hentet den fra databasen.\\Registrer endringene igjen i det oppdaterte dokumentet.;SVE=En annan anv„ndare har „ndrat posten %1\efter det att du h„mtat den fr†n databasen.\\Registrera „ndringarna igen i det uppdaterade dokumentet.';
      FileMgt@1038 : Codeunit 419;
      AttachmentManagement@1035 : Codeunit 11072021;
      WordHelper@1037 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHelper" RUNONCLIENT;
      TmpWordDocument@1025 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      Window@1034 : Dialog;
      Text030@1001 : TextConst 'ENU=Formal Salutation;NOR=Formell hilsning;SVE=Formell h„lsning';
      Text031@1000 : TextConst 'ENU=Informal Salutation;NOR=Uformell hilsning;SVE=Informell h„lsning';
      MergeSourceBufferFile@1016 : File;
      MergeSourceBufferFileName@1002 : Text;
      Text032@1024 : TextConst 'ENU=*.htm|*.htm;NOR=*.htm|*.htm;SVE=*.htm|*.htm';
      ImportAttachmentQst@1009 : TextConst '@@@=%1: Text Caption;ENU=Do you want to import attachment %1?;NOR=Vil du importere vedlegget %1?;SVE=Vill du ta importera bilagan %1?';
      FieldCountMismatchErr@1026 : TextConst '@@@=%1 and %2 is a number;ENU=Number of fields in the word document header (%1) does not match number of fields with data (%2).';
      InteractionTemplateErr@1027 : TextConst 'ENU=Opening the interaction template is taking too long. Try again or check the interaction template file.';
      Text11012000@1210190002 : TextConst 'ENU=Company Naam 2;NOR=Selskapsnavn 2;SVE=F”retagsnamn 2';
      Text11012001@1210190003 : TextConst 'ENU=Company Address;NOR=Selskapets adresse;SVE=F”retagets adress';
      Text11012002@1210190004 : TextConst 'ENU=Company Address 2;NOR=Selskapets adresse 2;SVE=F”retagets adress 2';
      Text11012003@1210190005 : TextConst 'ENU=Company Postal Code;NOR=Selskapets postnummer;SVE=F”retagets postnummer';
      Text11012004@1210190006 : TextConst 'ENU=Company City;NOR=Selskapets poststed;SVE=F”retagsort';
      Text11012005@1210190008 : TextConst 'ENU=Intended for Salutation;NOR=Tiltenkt for hilsning;SVE=Avsedd f”r h„lsningsfras';
      Text11012006@1210190007 : TextConst 'ENU=Intended for Salutation 2;NOR=Tiltenkt for hilsning 2;SVE=Avsedd f”r h„lsningsfras 2';
      Text11012007@1100528700 : TextConst 'ENU=Merge field %1 does exist in data source.;NOR=Sammenkoblet felt %1 finnes i datakilden.;SVE=Kopplat f„lt %1 finns i datak„llan.';
      TemplateCode@1210190000 : Code[10];
      InteractionLogEntryNo@1100528800 : Integer;

    [External]
    PROCEDURE Activate@31(VAR WordApplicationHandler@1000 : Codeunit 5068;HandlerID@1001 : Integer);
    BEGIN
      IF NOT IsActive THEN
        WordApplicationHandler.Activate(WordApplicationHandler,HandlerID);
    END;

    [External]
    PROCEDURE IsActive@32() IsFound : Boolean;
    BEGIN
      OnFindActiveSubscriber(IsFound);
    END;

    [External]
    PROCEDURE Deactivate@34(HandlerID@1000 : Integer);
    BEGIN
      OnDeactivate(HandlerID);
    END;

    LOCAL PROCEDURE GetWord@24(VAR WordApplication@1000 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT);
    VAR
      IsFound@1001 : Boolean;
    BEGIN
      OnGetWord(WordApplication,IsFound);
      IF NOT IsFound THEN
        CLEAR(WordApplication);
    END;

    [TryFunction]
    PROCEDURE TryGetWord@27(VAR WordApplication@1000 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT);
    VAR
      IsFound@1001 : Boolean;
    BEGIN
      OnGetWord(WordApplication,IsFound);
      IF NOT IsFound THEN BEGIN
        CLEAR(WordApplication);
        ERROR('');
      END;
    END;

    [Internal]
    PROCEDURE CreateWordAttachment@13(WordCaption@1001 : Text[260];LanguageCode@1100 : Code[10]) NewAttachNo@1000 : Integer;
    VAR
      Attachment@1002 : Record 11072030;
      WordApplicationHandler@1003 : Codeunit 5068;
      WordApplication@1009 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      WordDocument@1008 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      WordMergefile@1007 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.MergeHandler" RUNONCLIENT;
      FileName@1004 : Text;
      MergeFileName@1005 : Text;
      ParamInt@1006 : Integer;
    BEGIN
      WordMergefile := WordMergefile.MergeHandler;

      MergeFileName := FileMgt.ClientTempFileName('HTM');
      CreateHeader(WordMergefile,TRUE,MergeFileName,LanguageCode); // Header without data

      Activate(WordApplicationHandler,505401);
      GetWord(WordApplication);
      Attachment."File Extension" := GetWordDocumentExtension(WordApplication.Version);
      WordDocument := WordHelper.AddDocument(WordApplication);
      WordDocument.MailMerge.MainDocumentType := 0; // 0 = wdFormLetters
      ParamInt := 7; // 7 = HTML
      WordHelper.CallMailMergeOpenDataSource(WordDocument,MergeFileName,ParamInt);
      CheckMergeFieldInDataSource(WordDocument); //**4PS.n

      FileName := Attachment.ConstFilename;
      WordHelper.CallSaveAs(WordDocument,FileName);
      IF WordHandler(WordDocument,Attachment,WordCaption,FALSE,FileName,FALSE) THEN
        NewAttachNo := Attachment."No."
      ELSE
        NewAttachNo := 0;

      CLEAR(WordMergefile);
      CLEAR(WordDocument);
      Deactivate(505401);

      DeleteFile(MergeFileName);
    END;

    [Internal]
    PROCEDURE OpenWordAttachment@5(VAR Attachment@1000 : Record 11072030;FileName@1001 : Text;Caption@1002 : Text[260];IsTemporary@1003 : Boolean;LanguageCode@1100 : Code[10]);
    VAR
      WordApplicationHandler@1004 : Codeunit 5068;
      WordApplication@1009 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      WordDocument@1008 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      WordMergefile@1007 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.MergeHandler" RUNONCLIENT;
      MergeFileName@1005 : Text;
      ParamInt@1006 : Integer;
    BEGIN
      WordMergefile := WordMergefile.MergeHandler;

      MergeFileName := FileMgt.ClientTempFileName('HTM');
      CreateHeader(WordMergefile,TRUE,MergeFileName,LanguageCode);

      Activate(WordApplicationHandler,505402);
      GetWord(WordApplication);
      WordDocument := WordHelper.CallOpen(WordApplication,FileName,FALSE,Attachment."Read Only");

      IF ISNULL(WordDocument.MailMerge.MainDocumentType) THEN BEGIN
        WordDocument.MailMerge.MainDocumentType := 0; // 0 = wdFormLetters
        WordHelper.CallMailMergeOpenDataSource(WordDocument,MergeFileName,ParamInt);
      END;

      IF WordDocument.MailMerge.Fields.Count > 0 THEN BEGIN
        ParamInt := 7; // 7 = HTML
        WordHelper.CallMailMergeOpenDataSource(WordDocument,MergeFileName,ParamInt);
      END;

      WordHandler(WordDocument,Attachment,Caption,IsTemporary,FileName,FALSE);

      CLEAR(WordMergefile);
      CLEAR(WordDocument);
      Deactivate(505402);

      DeleteFile(MergeFileName);
    END;

    [Internal]
    PROCEDURE Merge@1(VAR TempDeliverySorter@1000 : TEMPORARY Record 11072037);
    VAR
      TempDeliverySorter2@1001 : TEMPORARY Record 11072037;
      WordApplicationHandler@1011 : Codeunit 5068;
      WordApplication@1012 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      LastAttachmentNo@1002 : Integer;
      LastCorrType@1003 : Integer;
      LastSubject@1004 : Text[100];
      LastSendWordDocsAsAttmt@1005 : Boolean;
      LineCount@1006 : Integer;
      NoOfRecords@1007 : Integer;
      WordHided@1008 : Boolean;
      FirstRecord@1010 : Boolean;
    BEGIN
      Window.OPEN(
        Text003 +
        '#1############ @2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\' +
        '#3############ @4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\' +
        '#5############ #6################################');

      Window.UPDATE(1,Text004);
      Window.UPDATE(5,Text005);

      Window.UPDATE(6,Text006);
      TempDeliverySorter.SETCURRENTKEY(
        "Attachment No.","Correspondence Type",Subject,"Send Word Docs. as Attmt.");
      TempDeliverySorter.SETFILTER("Correspondence Type",'<>0');
      NoOfRecords := TempDeliverySorter.COUNT;
      TempDeliverySorter.FIND('-');

      Activate(WordApplicationHandler,505403);
      GetWord(WordApplication);
      IF WordApplication.Documents.Count > 0 THEN BEGIN
        WordApplication.Visible := FALSE;
        WordHided := TRUE;
      END;

      FirstRecord := TRUE;
      REPEAT
        LineCount := LineCount + 1;
        Window.UPDATE(2,ROUND(LineCount / NoOfRecords * 10000,1));
        Window.UPDATE(3,STRSUBSTNO('%1',TempDeliverySorter."Correspondence Type"));

        IF NOT FirstRecord AND
           ((TempDeliverySorter."Attachment No." <> LastAttachmentNo) OR
            (TempDeliverySorter."Correspondence Type" <> LastCorrType) OR
            (TempDeliverySorter.Subject <> LastSubject) OR
            (TempDeliverySorter."Send Word Docs. as Attmt." <> LastSendWordDocsAsAttmt))
        THEN BEGIN
          ExecuteMerge(WordApplication,TempDeliverySorter2);
          TempDeliverySorter2.DELETEALL;
          IF TempDeliverySorter."Attachment No." <> LastAttachmentNo THEN
            ImportMergeSourceFile(LastAttachmentNo)
        END;

        TempDeliverySorter2 := TempDeliverySorter;
        TempDeliverySorter2.INSERT;
        LastAttachmentNo := TempDeliverySorter."Attachment No.";
        LastCorrType := TempDeliverySorter."Correspondence Type";
        LastSubject := TempDeliverySorter.Subject;
        LastSendWordDocsAsAttmt := TempDeliverySorter."Send Word Docs. as Attmt.";

        FirstRecord := FALSE;
      UNTIL TempDeliverySorter.NEXT = 0;

      IF TempDeliverySorter2.FIND('-') THEN BEGIN
        ExecuteMerge(WordApplication,TempDeliverySorter2);
        ImportMergeSourceFile(TempDeliverySorter2."Attachment No.")
      END;

      IF WordHided THEN
        WordApplication.Visible := TRUE
      ELSE BEGIN
        // Wait for print job to finish
        IF WordApplication.BackgroundPrintingStatus <> 0 THEN
          REPEAT
            Window.UPDATE(6,Text007);
            SLEEP(500);
          UNTIL WordApplication.BackgroundPrintingStatus = 0;
      END;

      Deactivate(505403);
      Window.CLOSE;
    END;

    LOCAL PROCEDURE ExecuteMerge@6(VAR WordApplication@1021 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;VAR TempDeliverySorter@1000 : TEMPORARY Record 11072037);
    VAR
      Attachment@1001 : Record 11072030;
      InteractLogEntry@1002 : Record 11072027;
      TempSegLine@1010 : TEMPORARY Record 11072040;
      WordDocument@1020 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      WordInlineShape@1009 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.InlineShape" RUNONCLIENT;
      WordMergefile@1019 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.MergeHandler" RUNONCLIENT;
      WordOLEFormat@1027 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.OLEFormat" RUNONCLIENT;
      WordLinkFormat@1023 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.LinkFormat" RUNONCLIENT;
      WordShape@1003 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Shape" RUNONCLIENT;
      MergeFile@1028 : File;
      MergeClientFileName@1025 : Text;
      MainFileName@1011 : Text;
      NoOfRecords@1012 : Integer;
      ParamBln@1013 : Boolean;
      ParamInt@1014 : Integer;
      Row@1018 : Integer;
      ShapesIndex@1024 : Integer;
      HeaderIsReady@1026 : Boolean;
      FaxMailToValue@1030 : Text;
      HeaderFieldCount@1004 : Integer;
    BEGIN
      Window.UPDATE(
        6,STRSUBSTNO(Text008,
          FORMAT(TempDeliverySorter."Correspondence Type")));

      IF TempDeliverySorter.FIND('-') THEN
        NoOfRecords := TempDeliverySorter.COUNT;

      Attachment.GET(TempDeliverySorter."Attachment No.");
      Attachment.CALCFIELDS("Attachment File");

      //**4PS.sn
      InteractLogEntry.GET(TempDeliverySorter."No.");
      TemplateCode := InteractLogEntry."Interaction Template Code";
      //**4PS.en

      // Handle Word documents without mergefields
      IF NOT DocumentContainMergefields(Attachment) AND
         TempDeliverySorter."Send Word Docs. as Attmt."
      THEN BEGIN
        SendAttachmentWithoutMergeFields(WordApplication,TempDeliverySorter,Attachment);
        EXIT;
      END;

      WITH TempDeliverySorter DO BEGIN
        SETCURRENTKEY("Attachment No.","Correspondence Type",Subject);
        FIND('-');
      END;
      Row := 2;

      MainFileName := FileMgt.ClientTempFileName('DOC');
      TempDeliverySorter.FIND('-');
      Attachment.GET(TempDeliverySorter."Attachment No.");
      Attachment.CALCFIELDS("Attachment File");
      IF NOT IsWordDocumentExtension(Attachment."File Extension") THEN
        ERROR(Text010,Attachment.TABLECAPTION,Attachment."No.",Attachment.FIELDCAPTION("File Extension"));

      IF NOT Attachment.ExportAttachmentToClientFile(MainFileName) THEN
        ERROR(Text011);

      RenameAttachment(InteractLogEntry, MainFileName); //**4PS.n

      Window.UPDATE(6,Text012);
      Attachment.CALCFIELDS("Merge Source");
      IF Attachment."Merge Source".HASVALUE THEN BEGIN
        CreateMergeSource(MergeFile);
        REPEAT
          PopulateInterLogEntryToMergeSource(
            MergeFile,Attachment,TempDeliverySorter."No.",HeaderIsReady,TempDeliverySorter."Correspondence Type");
          Row := Row + 1;
          Window.UPDATE(4,ROUND(Row / NoOfRecords * 10000,1))
        UNTIL TempDeliverySorter.NEXT = 0;
        MergeClientFileName := CloseAndDownloadMergeSource(MergeFile);
      END ELSE BEGIN
        MergeClientFileName := FileMgt.ClientTempFileName('HTM');
        WordMergefile := WordMergefile.MergeHandler;
        HeaderFieldCount := CreateHeader(WordMergefile,FALSE,MergeClientFileName,TempDeliverySorter."Language Code");
        REPEAT
          InteractLogEntry.GET(TempDeliverySorter."No.");

          // This field must come last in the merge source file
          CASE TempDeliverySorter."Correspondence Type" OF
            TempDeliverySorter."Correspondence Type"::Fax:
              FaxMailToValue := AttachmentManagement.InteractionFax(InteractLogEntry);
            TempDeliverySorter."Correspondence Type"::Email:
              FaxMailToValue := AttachmentManagement.InteractionEMail(InteractLogEntry);
            ELSE
              FaxMailToValue := '';
          END;

          AddFieldsToMergeSource(WordMergefile,InteractLogEntry,TempSegLine,FaxMailToValue,HeaderFieldCount);
          Row := Row + 1;
          Window.UPDATE(4,ROUND(Row / NoOfRecords * 10000,1))
        UNTIL TempDeliverySorter.NEXT = 0;
        WordMergefile.CloseMergeFile;
      END;

      WordDocument := WordHelper.CallOpen(WordApplication,MainFileName,FALSE,FALSE);
      WordDocument.MailMerge.MainDocumentType := 0;

      Window.UPDATE(6,Text013);
      ParamInt := 7; // 7 = HTML
      WordHelper.CallMailMergeOpenDataSource(WordDocument,MergeClientFileName,ParamInt);
      CheckMergeFieldInDataSource(WordDocument); //**4PS.n

      Window.UPDATE(6,STRSUBSTNO(Text014,TempDeliverySorter."Correspondence Type"));

      FOR ShapesIndex := 1 TO WordDocument.InlineShapes.Count DO BEGIN
        WordInlineShape := WordHelper.GetInlineShapeItem(WordDocument,ShapesIndex);
        WordInlineShape.Select;
        IF NOT ISNULL(WordInlineShape) THEN BEGIN
          WordShape := WordInlineShape.ConvertToShape;
          WordLinkFormat := WordShape.LinkFormat;
          WordOLEFormat := WordShape.OLEFormat;
          IF NOT ISNULL(WordOLEFormat) THEN
            WordDocument.MailMerge.MailAsAttachment := WordDocument.MailMerge.MailAsAttachment OR WordOLEFormat.DisplayAsIcon;
          IF NOT ISNULL(WordLinkFormat) THEN BEGIN
            WordLinkFormat.SavePictureWithDocument := TRUE;
            WordLinkFormat.BreakLink;
            WordLinkFormat.Update;
          END;
          WordInlineShape := WordShape.ConvertToInlineShape;
        END;
      END;

      CASE TempDeliverySorter."Correspondence Type" OF
        TempDeliverySorter."Correspondence Type"::Fax:
          BEGIN
            WordDocument.MailMerge.Destination := 3;
            WordDocument.MailMerge.MailAddressFieldName := Text015;
            WordDocument.MailMerge.MailAsAttachment := TRUE;
            WordHelper.CallMailMergeExecute(WordDocument);
          END;
        TempDeliverySorter."Correspondence Type"::Email:
          BEGIN
            WordDocument.MailMerge.Destination := 2;
            WordDocument.MailMerge.MailAddressFieldName := Text015;
            WordDocument.MailMerge.MailSubject := TempDeliverySorter.Subject;
            WordDocument.MailMerge.MailAsAttachment :=
              WordDocument.MailMerge.MailAsAttachment OR TempDeliverySorter."Send Word Docs. as Attmt.";
            WordHelper.CallMailMergeExecute(WordDocument);
          END;
        TempDeliverySorter."Correspondence Type"::"Hard Copy":
          BEGIN
            //WordDocument.MailMerge.Destination := 0; // 0 = wdSendToNewDocument //**4PS.o C-028947
            WordDocument.MailMerge.Destination := 1; // 1 = wdSendPrinter //**4PS.n C-028947
            WordHelper.CallMailMergeExecute(WordDocument);
            //WordHelper.CallPrintOut(WordHelper.GetActiveDocument(WordApplication)); //**4PS.o C-028947
            //WordHelper.CallPrintOut(WordHelper.GetActiveDocument(WordApplication)); //**4PS.o C-028947
          END;
      END;

      // Update delivery status on Interaction Log Entry
      IF TempDeliverySorter.FIND('-') THEN BEGIN
        InteractLogEntry.LOCKTABLE;
        REPEAT
          WITH InteractLogEntry DO BEGIN
            GET(TempDeliverySorter."No.");
            "Delivery Status" := "Delivery Status"::" ";
            MODIFY;
          END;
        UNTIL TempDeliverySorter.NEXT = 0;
        COMMIT;
      END;

      ParamBln := FALSE;
      WordHelper.CallClose(WordDocument,ParamBln);
      IF NOT Attachment."Merge Source".HASVALUE THEN
        AppendToMergeSource(MergeClientFileName);
      DeleteFile(MainFileName);
      DeleteFile(MergeClientFileName);

      IF NOT ISNULL(WordLinkFormat) THEN
        CLEAR(WordLinkFormat);
      IF NOT ISNULL(WordOLEFormat) THEN
        CLEAR(WordOLEFormat);
      CLEAR(WordMergefile);
      CLEAR(WordDocument);
    END;

    [Internal]
    PROCEDURE ShowMergedDocument@11(VAR SegLine@1000 : Record 11072040;VAR Attachment@1001 : Record 11072030;WordCaption@1002 : Text[260];IsTemporary@1016 : Boolean);
    BEGIN
      RunMergedDocument(SegLine,Attachment,WordCaption,IsTemporary,TRUE,TRUE);
    END;

    [Internal]
    PROCEDURE CreateHeader@4(VAR WordMergefile@1011 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.MergeHandler" RUNONCLIENT;MergeFieldsOnly@1000 : Boolean;MergeFileName@1001 : Text;LanguageCode@1100 : Code[10]) FieldCount : Integer;
    VAR
      Salesperson@1002 : Record 13;
      Country@1003 : Record 9;
      Contact@1004 : Record 5050;
      SegLine@1005 : Record 11072040;
      CompanyInfo@1006 : Record 79;
      RMSetup@1010 : Record 5079;
      InteractionLogEntry@1012 : Record 11072027;
      OptionalMergeFieldRec@1210190000 : Record 11012145;
      Language@1013 : Record 8;
      TempNameValueBuffer@1008 : TEMPORARY Record 823;
      I@1007 : Integer;
      MainLanguage@1009 : Integer;
      OptionalMergeFields@1210190001 : Integer;
    BEGIN
      IF NOT WordMergefile.CreateMergeFile(MergeFileName) THEN
        ERROR(Text017 + Text018);

      // Create HTML Header source
      WITH TempNameValueBuffer DO BEGIN
        DELETEALL;
        MainLanguage := GLOBALLANGUAGE;

        IF LanguageCode = '' THEN BEGIN
          RMSetup.GET;
          IF RMSetup."Mergefield Language ID" <> 0 THEN
            GLOBALLANGUAGE := RMSetup."Mergefield Language ID";
        END ELSE
          GLOBALLANGUAGE := Language.GetLanguageID(LanguageCode);
        AddNewEntry(InteractionLogEntry.FIELDCAPTION("Entry No."),'');
        AddNewEntry(Contact.TABLECAPTION + Text019,'');
        //**4PS.sn
        IF TemplateCode = '' THEN
          OptionalMergeFields := 0
        ELSE BEGIN
          OptionalMergeFieldRec.SETRANGE("Interaction Template Code", TemplateCode);
          OptionalMergeFieldRec.SETFILTER("Merge Field Name", '<>%1', '');
          IF OptionalMergeFieldRec.FIND('-') THEN
            REPEAT
              AddNewEntry(OptionalMergeFieldRec.TABLECAPTION + ' ' + OptionalMergeFieldRec.FIELDCAPTION("Merge Field Name"),'');
              OptionalMergeFields := OptionalMergeFields + 1;
            UNTIL OptionalMergeFieldRec.NEXT = 0;
        END;
        //**4PS.en
        AddNewEntry(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("No."),'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Company Name"),'');
        //**4PS.sn
        AddNewEntry(Contact.TABLECAPTION + ' ' + Text11012000,'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Text11012001,'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Text11012002,'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Text11012003,'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Text11012004,'');
        //**4PS.en
        AddNewEntry(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION(Name),'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Name 2"),'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION(Address),'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Address 2"),'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Post Code"),'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION(City),'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION(County),'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Country.TABLECAPTION + ' ' + Country.FIELDCAPTION(Name),'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Job Title"),'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Phone No."),'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Fax No."),'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("E-Mail"),'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Mobile Phone No."),'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("VAT Registration No."),'');
        AddNewEntry(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Home Page"),'');
        AddNewEntry(Text030,'');
        AddNewEntry(Text031,'');
        //**4PS.sn
        AddNewEntry(Text11012005,'');
        AddNewEntry(Text11012006,'');
        //**4PS.en
        AddNewEntry(Salesperson.TABLECAPTION + ' ' + Salesperson.FIELDCAPTION(Code),'');
        AddNewEntry(Salesperson.TABLECAPTION + ' ' + Salesperson.FIELDCAPTION(Name),'');
        AddNewEntry(Salesperson.TABLECAPTION + ' ' + Salesperson.FIELDCAPTION("Job Title"),'');
        AddNewEntry(Salesperson.TABLECAPTION + ' ' + Salesperson.FIELDCAPTION("Phone No."),'');
        AddNewEntry(Salesperson.TABLECAPTION + ' ' + Salesperson.FIELDCAPTION("E-Mail"),'');
        AddNewEntry(Text020 + SegLine.FIELDCAPTION(Date),'');
        AddNewEntry(Text020 + SegLine.FIELDCAPTION("Campaign No."),'');
        AddNewEntry(Text020 + SegLine.FIELDCAPTION("Segment No."),'');
        AddNewEntry(Text020 + SegLine.FIELDCAPTION(Description),'');
        AddNewEntry(Text020 + SegLine.FIELDCAPTION(Subject),'');
        //**4PS.sn
        AddNewEntry(Text020 + SegLine.FIELDCAPTION("Project No."),'');
        AddNewEntry(Text020 + SegLine.FIELDCAPTION("Plot No."),'');
        AddNewEntry(Text020 + SegLine.FIELDCAPTION("Project Description"),'');
        AddNewEntry(Text020 + SegLine.FIELDCAPTION("House Model"),'');
        //**4PS.en
        AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION(Name),'');
        AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Name 2"),'');
        AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION(Address),'');
        AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Address 2"),'');
        AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Post Code"),'');
        AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION(City),'');
        AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION(County),'');
        AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + Country.TABLECAPTION + ' ' + Country.FIELDCAPTION(Name),'');
        AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("VAT Registration No."),'');
        AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Registration No."),'');
        AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Phone No."),'');
        AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Fax No."),'');
        // AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Branch No."),''); //**4PS.o
        AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Name"),'');
        AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Account No."),'');
        AddNewEntry(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Giro No."),'');
        OnCreateHeaderAddFields(TempNameValueBuffer,Salesperson,Country,Contact,CompanyInfo,SegLine,InteractionLogEntry);
        GLOBALLANGUAGE := MainLanguage;
        AddNewEntry(Text015,'');

        RESET;
        FieldCount := COUNT;
        IF FIND('-') THEN
          REPEAT
            WordMergefile.AddField(Name);
          UNTIL NEXT = 0;
      END;

      // Mergesource must be at least two lines
      WordMergefile.WriteLine;
      IF MergeFieldsOnly THEN BEGIN
      //FOR I := 1 TO FieldCount DO //**4PS.o
        FOR I := 1 TO (FieldCount + OptionalMergeFields) DO //**4PS.n
          WordMergefile.AddField('');
        WordMergefile.WriteLine;
        WordMergefile.CloseMergeFile;
      END;
    END;

    LOCAL PROCEDURE WordHandler@7(VAR WordDocument@1009 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document";VAR Attachment@1001 : Record 11072030;Caption@1002 : Text[260];IsTemporary@1003 : Boolean;FileName@1004 : Text;IsInherited@1008 : Boolean) DocImported@1000 : Boolean;
    VAR
      Attachment2@1005 : Record 11072030;
      WordHandler@1006 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHandler" RUNONCLIENT;
      NewFileName@1007 : Text;
    BEGIN
      WordDocument.ActiveWindow.Caption := Caption;
      WordDocument.Application.Visible := TRUE; // Visible before WindowState KB176866 - http://support.microsoft.com/kb/176866
      WordDocument.ActiveWindow.WindowState := 1; // 1 = wdWindowStateMaximize
      WordDocument.Saved := TRUE;
      NewFileName := WaitForDocument(WordDocument,WordHandler);

      IF NOT Attachment."Read Only" THEN
        IF WordHandler.IsDocumentClosed THEN
          IF WordHandler.HasDocumentChanged THEN BEGIN
            CLEAR(WordHandler);
            IF CONFIRM(ImportAttachmentQst,TRUE,Caption) THEN BEGIN
              IF (NOT IsTemporary) AND Attachment2.GET(Attachment."No.") THEN
                IF Attachment2."Last Time Modified" <> Attachment."Last Time Modified" THEN BEGIN
                  DeleteFile(FileName);
                  IF NewFileName <> FileName THEN
                    IF CONFIRM(STRSUBSTNO(Text022,NewFileName),FALSE) THEN
                      DeleteFile(NewFileName);
                  ERROR(Text023,Attachment.TABLECAPTION);
                END;
              Attachment.ImportAttachmentFromClientFile(NewFileName,IsTemporary,IsInherited);
              DeleteFile(NewFileName);
              DocImported := TRUE;
            END;
          END;

      CLEAR(WordHandler);
      DeleteFile(FileName);
    END;

    LOCAL PROCEDURE DeleteFile@8(FileName@1001 : Text) : Boolean;
    VAR
      I@1002 : Integer;
    BEGIN
      // Wait for Word to release the files
      IF FileName = '' THEN
        EXIT(FALSE);

      IF NOT FileMgt.ClientFileExists(FileName) THEN
        EXIT(TRUE);

      REPEAT
        SLEEP(250);
        I := I + 1;
      UNTIL FileMgt.DeleteClientFile(FileName) OR (I = 25);
      EXIT(NOT FileMgt.ClientFileExists(FileName));
    END;

    LOCAL PROCEDURE DocumentContainMergefields@2(VAR Attachment@1001 : Record 11072030) MergeFields@1000 : Boolean;
    VAR
      WordApplication@1005 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      WordDocument@1004 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      ParamBln@1002 : Boolean;
      FileName@1003 : Text;
    BEGIN
      GetWord(WordApplication);
      IF (UPPERCASE(Attachment."File Extension") <> 'DOC') AND
         (UPPERCASE(Attachment."File Extension") <> 'DOCX')
      THEN
        EXIT(FALSE);
      FileName := Attachment.ConstFilename;
      Attachment.ExportAttachmentToClientFile(FileName);
      WordDocument := WordHelper.CallOpen(WordApplication,FileName,FALSE,FALSE);

      WaitWordFileOpening(WordDocument,500);
      MergeFields := (WordDocument.MailMerge.Fields.Count > 0);
      ParamBln := FALSE;
      WordHelper.CallClose(WordDocument,ParamBln);
      DeleteFile(FileName);

      CLEAR(WordDocument);
    END;

    LOCAL PROCEDURE CreateMergeSource@14(VAR MergeFile@1000 : File);
    VAR
      MergeServerFileName@1001 : Text;
    BEGIN
      MergeServerFileName := FileMgt.ServerTempFileName('HTM');
      MergeFile.WRITEMODE := TRUE;
      MergeFile.TEXTMODE := TRUE;
      MergeFile.CREATE(MergeServerFileName);
    END;

    LOCAL PROCEDURE CloseAndDownloadMergeSource@15(VAR MergeFile@1000 : File) MergeClientFileName : Text;
    VAR
      MergeServerFileName@1001 : Text;
    BEGIN
      MergeServerFileName := MergeFile.NAME;
      MergeFile.WRITE('</table>');
      MergeFile.WRITE('</body>');
      MergeFile.WRITE('</html>');
      MergeFile.CLOSE;

      MergeClientFileName := FileMgt.DownloadTempFile(MergeServerFileName);

      // We don't need the file any more on ServiceTier
      ERASE(MergeServerFileName);

      EXIT(MergeClientFileName);
    END;

    [Internal]
    PROCEDURE PopulateInterLogEntryToMergeSource@12(VAR MergeFile@1000 : File;VAR Attachment@1006 : Record 11072030;EntryNo@1011 : Integer;VAR HeaderIsReady@1001 : Boolean;CorrespondenceType@1012 : ',Hard Copy,Email,Fax');
    VAR
      InteractLogEntry@1004 : Record 11072027;
      InStreamBLOB@1005 : InStream;
      CurrentLine@1003 : Text[250];
      NewLine@1002 : Text[250];
      LineIsFound@1010 : Boolean;
    BEGIN
      Attachment.CALCFIELDS("Merge Source");
      Attachment."Merge Source".CREATEINSTREAM(InStreamBLOB);
      REPEAT
        InStreamBLOB.READTEXT(CurrentLine);
        IF (STRPOS(CurrentLine,'<tr>') > 0) AND HeaderIsReady THEN BEGIN
          InStreamBLOB.READTEXT(NewLine);
          IF STRPOS(NewLine,FORMAT(EntryNo)) > 0 THEN BEGIN
            MergeFile.WRITE(CurrentLine);
            MergeFile.WRITE(NewLine);
            LineIsFound := TRUE;
          END;
        END;

        IF NOT HeaderIsReady THEN BEGIN
          MergeFile.WRITE(CurrentLine);
          IF STRPOS(CurrentLine,'</tr>') > 0 THEN
            HeaderIsReady := TRUE
        END
      UNTIL LineIsFound OR InStreamBLOB.EOS;

      IF LineIsFound THEN BEGIN
        InStreamBLOB.READTEXT(NewLine);
        WHILE STRPOS(NewLine,'</tr>') = 0 DO BEGIN
          CurrentLine := NewLine;
          InStreamBLOB.READTEXT(NewLine);
          MergeFile.WRITE(CurrentLine);
        END;
        IF InteractLogEntry.GET(EntryNo) THEN BEGIN
          CASE CorrespondenceType OF
            CorrespondenceType::Fax:
              MergeFile.WRITE('<td>' + AttachmentManagement.InteractionFax(InteractLogEntry) + '</td>');
            CorrespondenceType::Email:
              MergeFile.WRITE('<td>' + AttachmentManagement.InteractionEMail(InteractLogEntry) + '</td>')
            ELSE
              MergeFile.WRITE('<td></td>')
          END
        END;
        MergeFile.WRITE(NewLine);
      END;
    END;

    [Internal]
    PROCEDURE AddFieldsToMergeSource@16(VAR WordMergefile@1012 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office'.Microsoft.Dynamics.Nav.Integration.Office.Word.MergeHandler" RUNONCLIENT;VAR InteractLogEntry@1000 : Record 11072027;VAR SegLine@1007 : Record 11072040;FaxMailToValue@1013 : Text;HeaderFieldsCount@1020 : Integer);
    VAR
      Salesperson@1006 : Record 13;
      Country@1005 : Record 9;
      Country2@1004 : Record 9;
      Contact@1003 : Record 5050;
      CompanyInfo@1002 : Record 79;
      TempNameValueBuffer@1009 : TEMPORARY Record 823;
      ContactAltAddressCode@1001 : Code[10];
      CompRec@1210190003 : Record 5050;
      OptionalMergeFieldRec@1210190000 : Record 11012145;
      ContAltAddrRec@1100485000 : Record 5051;
      LineNo@1016 : Text;
      SalesPersonCode@1014 : Code[20];
      ContactNo@1015 : Code[20];
      LanguageCode@1019 : Code[10];
      Date@1018 : Date;
      DataFieldsCount@1008 : Integer;
    BEGIN
      IF InteractLogEntry."Entry No." = 0 THEN BEGIN
        ContactNo := SegLine."Contact No.";
        SalesPersonCode := SegLine."Salesperson Code";
        LineNo := FORMAT(SegLine."Line No.");
        ContactAltAddressCode := SegLine."Contact Alt. Address Code";
        Date := SegLine.Date;
        LanguageCode := SegLine."Language Code";
      END ELSE BEGIN
        ContactNo := InteractLogEntry."Contact No.";
        SalesPersonCode := InteractLogEntry."Salesperson Code";
        LineNo := FORMAT(InteractLogEntry."Entry No.");
        ContactAltAddressCode := InteractLogEntry."Contact Alt. Address Code";
        Date := InteractLogEntry.Date;
        LanguageCode := InteractLogEntry."Interaction Language Code";
      END;

      CompanyInfo.GET;
      IF NOT Country2.GET(CompanyInfo."Country/Region Code") THEN
        CLEAR(Country2);

      Contact.GET(ContactNo);
      IF NOT Country.GET(Contact."Country/Region Code") THEN
        CLEAR(Country);

      IF NOT Salesperson.GET(SalesPersonCode) THEN
        CLEAR(Salesperson);

      //**4PS.sn
      IF NOT CompRec.GET(Contact."Company No.") THEN
        CLEAR(CompRec);
      //**4PS.en

      // This field must come first in the merge source file
      WordMergefile.AddField(LineNo);
      AddMultilineFieldData(WordMergefile,Contact,ContactAltAddressCode,Date);
      DataFieldsCount := 2;

      TempNameValueBuffer.DELETEALL;
      WITH TempNameValueBuffer DO BEGIN
        //**4PS.sn
        OptionalMergeFieldRec.SETRANGE("Interaction Template Code", TemplateCode);
        OptionalMergeFieldRec.SETFILTER("Merge Field Name", '<>%1', '');
        IF OptionalMergeFieldRec.FIND('-') THEN
          REPEAT
            IF OptionalMergeFieldRec.Table <> OptionalMergeFieldRec.Table::" " THEN BEGIN
              IF InteractLogEntry."Entry No." = 0 THEN
                AddNewEntry(OptionalMergeFieldRec.GetFixedMergeFieldValue(SegLine),'')
              ELSE
                AddNewEntry(OptionalMergeFieldRec.GetFixedMFValueIntLogEntry(InteractLogEntry),'');
            END ELSE BEGIN
              IF InteractLogEntry."Entry No." = 0 THEN BEGIN
                CASE OptionalMergeFieldRec."Extra Merge Field No." OF
                  1: AddNewEntry(SegLine."Optional Mergefield 1",'');
                  2: AddNewEntry(SegLine."Optional Mergefield 2",'');
                  3: AddNewEntry(SegLine."Optional Mergefield 3",'');
                  4: AddNewEntry(SegLine."Optional Mergefield 4",'');
                  5: AddNewEntry(SegLine."Optional Mergefield 5",'');
                END;
              END ELSE BEGIN
                CASE OptionalMergeFieldRec."Extra Merge Field No." OF
                  1: AddNewEntry(InteractLogEntry."Optional Mergefield 1",'');
                  2: AddNewEntry(InteractLogEntry."Optional Mergefield 2",'');
                  3: AddNewEntry(InteractLogEntry."Optional Mergefield 3",'');
                  4: AddNewEntry(InteractLogEntry."Optional Mergefield 4",'');
                  5: AddNewEntry(InteractLogEntry."Optional Mergefield 5",'');
                END;
              END;
            END;
          UNTIL OptionalMergeFieldRec.NEXT = 0;
        //**4PS.en
        AddNewEntry(Contact."No.",'');
        AddNewEntry(Contact."Company Name",'');
        //**4PS.sn
        AddNewEntry(CompRec."Name 2",'');
        AddNewEntry(CompRec.Address,'');
        AddNewEntry(CompRec."Address 2",'');
        AddNewEntry(CompRec."Post Code",'');
        AddNewEntry(CompRec.City,'');
        //**4PS.en
        AddNewEntry(Contact.Name,'');
        AddNewEntry(Contact."Name 2",'');
        //**4PS.sn
        IF (InteractLogEntry."Contact Alt. Address Code" <> '') AND
          ContAltAddrRec.GET(Contact."No.", InteractLogEntry."Contact Alt. Address Code")
        THEN BEGIN
          AddNewEntry(ContAltAddrRec.Address,'');
          AddNewEntry(ContAltAddrRec."Address 2",'');
          AddNewEntry(ContAltAddrRec."Post Code",'');
          AddNewEntry(ContAltAddrRec.City,'');
          AddNewEntry(ContAltAddrRec.County,'');
          IF NOT Country.GET(ContAltAddrRec."Country/Region Code") THEN
            CLEAR(Country);
          AddNewEntry(Country.Name,'');
          AddNewEntry(Contact."Job Title",'');
          AddNewEntry(ContAltAddrRec."Phone No.",'');
          AddNewEntry(Contact."Fax No.",'');
          AddNewEntry(ContAltAddrRec."E-Mail",'');
          AddNewEntry(ContAltAddrRec."Mobile Phone No.",'');
          AddNewEntry(Contact."VAT Registration No.",'');
          AddNewEntry(ContAltAddrRec."Home Page",'');
        END ELSE BEGIN
        //**4PS.en
          AddNewEntry(Contact.Address,'');
          AddNewEntry(Contact."Address 2",'');
          AddNewEntry(Contact."Post Code",'');
          AddNewEntry(Contact.City,'');
          AddNewEntry(Contact.County,'');
          AddNewEntry(Country.Name,'');
          AddNewEntry(Contact."Job Title",'');
          AddNewEntry(Contact."Phone No.",'');
          AddNewEntry(Contact."Fax No.",'');
          AddNewEntry(Contact."E-Mail",'');
          AddNewEntry(Contact."Mobile Phone No.",'');
          AddNewEntry(Contact."VAT Registration No.",'');
          AddNewEntry(Contact."Home Page",'');
        END; //**4PS.n
        //**4PS.so
        //AddNewEntry(Contact.GetSalutation(0,LanguageCode),'');
        //AddNewEntry(Contact.GetSalutation(1,LanguageCode),'');
        //**4PS.eo
        //**4PS.sn
        AddNewEntry(Contact.GetSalutationSpecial(0,InteractLogEntry."Interaction Language Code",FALSE),'');
        AddNewEntry(Contact.GetSalutationSpecial(1,InteractLogEntry."Interaction Language Code",FALSE),'');
        AddNewEntry(Contact.GetSalutationSpecial(2,InteractLogEntry."Interaction Language Code",FALSE),'');
        AddNewEntry(Contact.GetSalutationSpecial(3,InteractLogEntry."Interaction Language Code",FALSE),'');
        //**4PS.en
        AddNewEntry(Salesperson.Code,'');
        AddNewEntry(Salesperson.Name,'');
        AddNewEntry(Salesperson."Job Title",'');
        AddNewEntry(Salesperson."Phone No.",'');
        AddNewEntry(Salesperson."E-Mail",'');

        IF InteractLogEntry.ISEMPTY THEN BEGIN
          AddNewEntry(FORMAT(SegLine.Date),'');
          AddNewEntry(SegLine."Campaign No.",'');
          AddNewEntry(SegLine."Segment No.",'');
          AddNewEntry(SegLine.Description,'');
          AddNewEntry(SegLine.Subject,'');
        END ELSE BEGIN
          AddNewEntry(FORMAT(InteractLogEntry.Date),'');
          AddNewEntry(InteractLogEntry."Campaign No.",'');
          AddNewEntry(InteractLogEntry."Segment No.",'');
          AddNewEntry(InteractLogEntry.Description,'');
          AddNewEntry(InteractLogEntry.Subject,'');
        END;

        //**4PS.sn
        AddNewEntry(InteractLogEntry."Project No.",'');
        AddNewEntry(InteractLogEntry."Plot No.",'');
        InteractLogEntry.CALCFIELDS("Project Description");
        AddNewEntry(InteractLogEntry."Project Description",'');
        InteractLogEntry.CALCFIELDS("House Model");
        AddNewEntry(InteractLogEntry."House Model",'');
        //**4PS.en

        AddNewEntry(CompanyInfo.Name,'');
        AddNewEntry(CompanyInfo."Name 2",'');
        AddNewEntry(CompanyInfo.Address,'');
        AddNewEntry(CompanyInfo."Address 2",'');
        AddNewEntry(CompanyInfo."Post Code",'');
        AddNewEntry(CompanyInfo.City,'');
        AddNewEntry(CompanyInfo.County,'');
        AddNewEntry(Country2.Name,'');
        AddNewEntry(CompanyInfo."VAT Registration No.",'');
        AddNewEntry(CompanyInfo."Registration No.",'');
        AddNewEntry(CompanyInfo."Phone No.",'');
        AddNewEntry(CompanyInfo."Fax No.",'');
        //AddNewEntry(CompanyInfo."Bank Branch No.",''); //**4PS.o
        AddNewEntry(CompanyInfo."Bank Name",'');
        AddNewEntry(CompanyInfo."Bank Account No.",'');
        AddNewEntry(CompanyInfo."Giro No.",'');
        OnAddFieldsToMergeSource(TempNameValueBuffer,Salesperson,Country,Contact,CompanyInfo,SegLine,InteractLogEntry);
        AddNewEntry(COPYSTR(FaxMailToValue,1,MAXSTRLEN(Name)),'');
        DataFieldsCount += COUNT;
        IF HeaderFieldsCount <> DataFieldsCount THEN
          ERROR(FieldCountMismatchErr,HeaderFieldsCount,DataFieldsCount);

        RESET;
        IF FIND('-') THEN
          REPEAT
            WordMergefile.AddField(Name);
          UNTIL NEXT = 0;

        WordMergefile.WriteLine;
      END;
    END;

    LOCAL PROCEDURE AddMultilineFieldData@37(VAR WordMergefile@1007 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office'.Microsoft.Dynamics.Nav.Integration.Office.Word.MergeHandler" RUNONCLIENT;Contact@1004 : Record 5050;ContactAltAddressCode@1005 : Code[10];Date@1006 : Date);
    VAR
      FormatAddr@1001 : Codeunit 365;
      ContAddr@1003 : ARRAY [8] OF Text[100];
      ContAddr2@1002 : ARRAY [8] OF Text[100];
      ContactAddressDimension@1000 : Integer;
    BEGIN
      ContactAddressDimension := 1;
      FormatAddr.ContactAddrAlt(ContAddr,Contact,ContactAltAddressCode,Date);

      WordMergefile.OpenNewMultipleValueField;
      COPYARRAY(ContAddr2,ContAddr,1);
      COMPRESSARRAY(ContAddr2);
      WHILE ContAddr2[1] <> '' DO BEGIN
        IF ContAddr[ContactAddressDimension] <> '' THEN BEGIN
          WordMergefile.AddDataToMultipleValueField(ContAddr[ContactAddressDimension]);
          ContAddr2[1] := '';
          COMPRESSARRAY(ContAddr2);
        END ELSE
          WordMergefile.AddDataToMultipleValueField('&nbsp;');
        ContactAddressDimension := ContactAddressDimension + 1;
      END;
      WordMergefile.CloseMultipleValueField;
    END;

    LOCAL PROCEDURE ImportMergeSourceFile@10(AttachmentNo@1000 : Integer);
    VAR
      Attachment@1001 : Record 11072030;
    BEGIN
      Attachment.GET(AttachmentNo);
      Attachment.CALCFIELDS("Merge Source","Attachment File");
      IF NOT Attachment."Merge Source".HASVALUE THEN BEGIN
        IF NOT DocumentContainMergefields(Attachment) THEN
          EXIT;
        MergeSourceBufferFile.WRITE('</table>');
        MergeSourceBufferFile.WRITE('</body>');
        MergeSourceBufferFile.WRITE('</html>');
        MergeSourceBufferFile.CLOSE;
        Attachment."Merge Source".IMPORT(MergeSourceBufferFileName);
        Attachment.MODIFY;
        DeleteFile(MergeSourceBufferFileName);
        MergeSourceBufferFileName := ''
      END
    END;

    LOCAL PROCEDURE AppendToMergeSource@41(MergeFileName@1000 : Text);
    VAR
      SourceFile@1003 : File;
      CurrentLine@1004 : Text[250];
      SkipHeader@1005 : Boolean;
      MergeFileNameServer@1006 : Text;
    BEGIN
      IF MergeSourceBufferFileName = '' THEN BEGIN
        MergeSourceBufferFileName := FileMgt.ServerTempFileName('HTM');
        MergeSourceBufferFile.WRITEMODE := TRUE;
        MergeSourceBufferFile.TEXTMODE := TRUE;
        MergeSourceBufferFile.CREATE(MergeSourceBufferFileName);
      END ELSE
        SkipHeader := TRUE;
      SourceFile.TEXTMODE := TRUE;

      MergeFileNameServer := FileMgt.ServerTempFileName('HTM');
      UPLOAD(Text021,'',Text032,MergeFileName,MergeFileNameServer);

      SourceFile.OPEN(MergeFileNameServer);
      IF SkipHeader THEN
        REPEAT
          SourceFile.READ(CurrentLine)
        UNTIL (STRPOS(CurrentLine,'</tr>') <> 0);
      WHILE (STRPOS(CurrentLine,'</table>') = 0) AND (SourceFile.POS <> SourceFile.LEN) DO BEGIN
        SourceFile.READ(CurrentLine);
        IF STRPOS(CurrentLine,'</table>') = 0 THEN
          MergeSourceBufferFile.WRITE(CurrentLine);
      END;
      SourceFile.CLOSE;

      ERASE(MergeFileNameServer);
    END;

    [External]
    PROCEDURE GetWordDocumentExtension@17(VersionTxt@1001 : Text[30]) : Code[4];
    VAR
      Version@1200 : Decimal;
      SeparatorPos@1201 : Integer;
      CommaStr@1202 : Code[1];
      DefaultStr@1203 : Code[10];
      EvalOK@1204 : Boolean;
    BEGIN
      DefaultStr := 'DOC';
      SeparatorPos := STRPOS(VersionTxt,'.');
      IF SeparatorPos = 0 THEN
        SeparatorPos := STRPOS(VersionTxt,',');
      IF SeparatorPos = 0 THEN
        EvalOK := EVALUATE(Version,VersionTxt)
      ELSE BEGIN
        CommaStr := COPYSTR(FORMAT(11 / 10),2,1);
        EvalOK := EVALUATE(Version,COPYSTR(VersionTxt,1,SeparatorPos - 1) + CommaStr + COPYSTR(VersionTxt,SeparatorPos + 1));
      END;
      IF EvalOK AND (Version >= 12.0) THEN
        EXIT('DOCX');
      EXIT(DefaultStr);
    END;

    LOCAL PROCEDURE HandleWordDocumentWithoutMerge@18(VAR WordDocument@1021 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document";VAR DeliverySorter@1022 : Record 11072037;MainFileName@1023 : Text);
    VAR
      InteractLogEntry@1001 : Record 11072027;
      Contact@1002 : Record 5050;
      Mail@1003 : Codeunit 397;
    BEGIN
      WITH InteractLogEntry DO
        REPEAT
          LOCKTABLE;
          GET(DeliverySorter."No.");
          IF DeliverySorter."Correspondence Type" = DeliverySorter."Correspondence Type"::Email THEN BEGIN
            Contact.GET("Contact No.");
            Mail.NewMessage(
              AttachmentManagement.InteractionEMail(InteractLogEntry),'','',
              DeliverySorter.Subject,'',MainFileName,FALSE);
          END ELSE
            WordHelper.CallPrintOut(WordDocument);
          "Delivery Status" := "Delivery Status"::" ";
          MODIFY;
          COMMIT;
        UNTIL DeliverySorter.NEXT = 0;
    END;

    LOCAL PROCEDURE SendAttachmentWithoutMergeFields@3(VAR WordApplication@1002 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass";VAR TempDeliverySorter@1001 : TEMPORARY Record 11072037;VAR Attachment@1003 : Record 11072030);
    VAR
      WordDocument@1004 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      FileName@1000 : Text;
      InteractionLogEntry@1100528700 : Record 11072027;
    BEGIN
      FileName := FileMgt.ClientTempFileName('DOC');
      Attachment.ExportAttachmentToClientFile(FileName);
      CASE TempDeliverySorter."Correspondence Type" OF
        TempDeliverySorter."Correspondence Type"::"Hard Copy":
          BEGIN
            WordDocument := WordHelper.CallOpen(WordApplication,FileName,FALSE,FALSE);
            HandleWordDocumentWithoutMerge(WordDocument,TempDeliverySorter,FileName);
            WordHelper.CallClose(WordDocument,FALSE);
          END;
        TempDeliverySorter."Correspondence Type"::Email:
          BEGIN
      //**4PS.sn
            InteractionLogEntry.GET(TempDeliverySorter."No.");
            RenameAttachment(InteractionLogEntry, FileName);
      //**4PS.en
            // Send attachment to all contacts in buffer
            Window.UPDATE(6,Text009);
            Attachment.TESTFIELD("File Extension");
            HandleWordDocumentWithoutMerge(WordDocument,TempDeliverySorter,FileName);
            DeleteFile(FileName);
          END;
      END;
    END;

    [External]
    PROCEDURE IsWordDocumentExtension@19(FileExtension@1000 : Text) : Boolean;
    BEGIN
      IF (UPPERCASE(FileExtension) <> 'DOC') AND
         (UPPERCASE(FileExtension) <> 'DOCX') AND
         (UPPERCASE(FileExtension) <> '.DOC') AND
         (UPPERCASE(FileExtension) <> '.DOCX')
      THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    [Internal]
    PROCEDURE RunMergedDocument@20(VAR SegLine@1000 : Record 11072040;VAR Attachment@1001 : Record 11072030;WordCaption@1002 : Text[260];IsTemporary@1016 : Boolean;IsVisible@1003 : Boolean;Handler@1005 : Boolean);
    VAR
      TempInteractLogEntry@1026 : TEMPORARY Record 11072027;
      WordApplicationHandler@1008 : Codeunit 5068;
      WordMergefile@1006 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.MergeHandler" RUNONCLIENT;
      WordApplication@1019 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      WordDocument@1018 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      MergeFile@1004 : File;
      MergeClientFileName@1009 : Text;
      MainFileName@1010 : Text;
      ParamInt@1011 : Integer;
      IsInherited@1021 : Boolean;
      HeaderIsReady@1023 : Boolean;
      HeaderFieldCount@1007 : Integer;
      InteractionLogEntry@1100528400 : Record 11072027;
    BEGIN
      IF NOT IsWordDocumentExtension(Attachment."File Extension") THEN
        ERROR(Text010,Attachment.TABLECAPTION,Attachment."No.",Attachment.FIELDCAPTION("File Extension"));

      IF SegLine.AttachmentInherited THEN
        IsInherited := TRUE;

      MainFileName := FileMgt.ClientTempFileName('DOC');

      // Handle Word documents without mergefields
      Activate(WordApplicationHandler,505404);
      GetWord(WordApplication);
      IF NOT DocumentContainMergefields(Attachment) THEN BEGIN
        Attachment.ExportAttachmentToClientFile(MainFileName);
        WordDocument := WordHelper.CallOpen(WordApplication,MainFileName,FALSE,Attachment."Read Only");
      END ELSE BEGIN
        // Merge possible
        TemplateCode := SegLine."Interaction Template Code"; //**4PS.n
        IF NOT Attachment.ExportAttachmentToClientFile(MainFileName) THEN BEGIN
          Deactivate(505404);
          ERROR(Text011);
        END;

        Attachment.CALCFIELDS("Merge Source");
        IF Attachment."Merge Source".HASVALUE THEN BEGIN
          CreateMergeSource(MergeFile);
          PopulateInterLogEntryToMergeSource(MergeFile,Attachment,SegLine."Line No.",HeaderIsReady,0);
          MergeClientFileName := CloseAndDownloadMergeSource(MergeFile);
        END ELSE BEGIN
          MergeClientFileName := FileMgt.ClientTempFileName('HTM');
          WordMergefile := WordMergefile.MergeHandler;
          HeaderFieldCount := CreateHeader(WordMergefile,FALSE,MergeClientFileName,SegLine."Language Code");

          //**4PS.sn
          IF InteractionLogEntry.GET(InteractionLogEntryNo) THEN
            TempInteractLogEntry := InteractionLogEntry;
          //**4PS.en
          AddFieldsToMergeSource(WordMergefile,TempInteractLogEntry,SegLine,'',HeaderFieldCount);
          WordMergefile.CloseMergeFile;
        END;

        WordDocument := WordHelper.CallOpen(WordApplication,MainFileName,FALSE,FALSE);
        WaitWordFileOpening(WordDocument,500);
        WordDocument.MailMerge.MainDocumentType := 0;
        ParamInt := 7; // 7 = HTML
        WordHelper.CallMailMergeOpenDataSource(WordDocument,MergeClientFileName,ParamInt);
        CheckMergeFieldInDataSource(WordDocument); //**4PS.n
        ParamInt := 9999998; // 9999998 = wdToggle
        WordDocument.MailMerge.ViewMailMergeFieldCodes(ParamInt);
      END;

      TmpWordDocument := WordHelper.AddDocument(WordApplication); // to keep the word instance alive after WordDocument is closed manually
      IF Handler THEN
        WordHandler(WordDocument,Attachment,WordCaption,IsTemporary,MainFileName,IsInherited)
      ELSE
        WordMerge(WordDocument,Attachment,WordCaption,IsTemporary,MainFileName,IsInherited,IsVisible);

      WordHelper.CallClose(TmpWordDocument,FALSE);
      CLEAR(TmpWordDocument);
      CLEAR(WordMergefile);
      CLEAR(WordDocument);
      Deactivate(505404);

      DeleteFile(MergeClientFileName);
    END;

    LOCAL PROCEDURE WordMerge@9(VAR WordDocument@1009 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document";VAR Attachment@1001 : Record 11072030;Caption@1002 : Text[260];IsTemporary@1003 : Boolean;FileName@1004 : Text;IsInherited@1008 : Boolean;IsVisible@1012 : Boolean) DocImported@1000 : Boolean;
    VAR
      FileManagement@1007 : Codeunit 419;
      WordHandler@1011 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHandler" RUNONCLIENT;
      TempFileName@1010 : Text;
      NewFileName@1005 : Text;
    BEGIN
      IF IsVisible THEN BEGIN
        WordDocument.ActiveWindow.Caption := Caption;
        WordDocument.Application.Visible := TRUE; // Visible before WindowState KB176866 - http://support.microsoft.com/kb/176866
        WordDocument.ActiveWindow.WindowState := 1; // 1 = wdWindowStateMaximize
        NewFileName := WaitForDocument(WordDocument,WordHandler);
        CLEAR(WordHandler);
      END ELSE BEGIN
        WordHelper.CallClose(WordDocument,TRUE);
        NewFileName := FileName;
      END;

      IF IsTemporary THEN BEGIN
        TempFileName := FileManagement.ClientTempFileName(FileManagement.GetExtension(NewFileName));
        FileManagement.CopyClientFile(NewFileName,TempFileName,TRUE);
        Attachment.ImportAttachmentFromClientFile(TempFileName,IsTemporary,IsInherited);
        FileManagement.DeleteClientFile(TempFileName);
        DeleteFile(NewFileName);
        DocImported := TRUE;
      END;

      DeleteFile(FileName);
    END;

    LOCAL PROCEDURE WaitForDocument@36(VAR WordDocument@1000 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document";VAR WordHandler@1001 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHandler" RUNONCLIENT) : Text;
    BEGIN
      WordDocument.Application.Activate;
      IF NOT ISNULL(TmpWordDocument) THEN
        TmpWordDocument.ActiveWindow.Visible := FALSE;
      WordHandler := WordHandler.WordHandler;
      EXIT(WordHandler.WaitForDocument(WordDocument));
    END;

    [Internal]
    PROCEDURE CanRunWordApp@21() CanRunWord : Boolean;
    VAR
      CanRunWordModified@1003 : Boolean;
    BEGIN
      OnBeforeCheckCanRunWord(CanRunWord,CanRunWordModified);
      IF CanRunWordModified THEN
        EXIT(CanRunWord);
      CanRunWord := IsActive;
    END;

    LOCAL PROCEDURE WaitWordFileOpening@28(VAR WordDocument@1000 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;MinWaitingPeriod@1002 : Integer);
    VAR
      I@1001 : Integer;
    BEGIN
      IF NOT TryGetActiveWindowCaption(WordDocument) THEN BEGIN
        REPEAT
          SLEEP(MinWaitingPeriod);
          I += 1;
        UNTIL TryGetActiveWindowCaption(WordDocument) OR (I = 25);
        IF NOT TryGetActiveWindowCaption(WordDocument) THEN
          ERROR(InteractionTemplateErr);
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetActiveWindowCaption@44(VAR WordDocument@1001 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT);
    BEGIN
      WordDocument.ActiveWindow.Caption;
    END;

    [Integration]
    LOCAL PROCEDURE OnAddFieldsToMergeSource@25(VAR TempNameValueBuffer@1006 : TEMPORARY Record 823;Salesperson@1004 : Record 13;Country@1003 : Record 9;Contact@1001 : Record 5050;CompanyInfo@1000 : Record 79;SegmentLine@1002 : Record 11072040;InteractionLogEntry@1005 : Record 11072027);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCreateHeaderAddFields@23(VAR TempNameValueBuffer@1002 : TEMPORARY Record 823;Salesperson@1007 : Record 13;Country@1006 : Record 9;Contact@1005 : Record 5050;CompanyInfo@1003 : Record 79;SegmentLine@1000 : Record 11072040;InteractionLogEntry@1001 : Record 11072027);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckCanRunWord@22(VAR CanRunWord@1000 : Boolean;VAR CanRunWordModified@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnFindActiveSubscriber@33(VAR IsFound@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetWord@26(VAR NewWordApplication@1000 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;VAR IsFound@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnDeactivate@35(HandlerID@1000 : Integer);
    BEGIN
    END;

    PROCEDURE SetTemplateCode@1210190000(lTemplateCode@1210190000 : Code[10]);
    BEGIN
      //**4PS
      TemplateCode := lTemplateCode;
    END;

    PROCEDURE SetInteractionLogEntryNo@1100528800(IInteractionLogEntryNo@1100528800 : Integer);
    BEGIN
      //**4PS
      InteractionLogEntryNo := IInteractionLogEntryNo;
    END;

    PROCEDURE CheckMergeFieldInDataSource@1100528700(VAR WordDocument@1100528700 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document");
    VAR
      MailMergeField@1100525000 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.MailMergeField" RUNONCLIENT;
      MailMergeDataField@1100525001 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.MailMergeDataField" RUNONCLIENT;
      Enumerator1@1100525002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator" RUNONCLIENT;
      Enumerator2@1100525003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator" RUNONCLIENT;
      ExistInDataSource@1100528705 : Boolean;
      Continue@1100525004 : Boolean;
    BEGIN
      //**4PS
      Enumerator1 := WordDocument.MailMerge.Fields.GetEnumerator;
      Enumerator2 := WordDocument.MailMerge.DataSource.DataFields.GetEnumerator;

      WHILE Enumerator1.MoveNext DO BEGIN
        MailMergeField := Enumerator1.Current;
        Enumerator2.Reset;
        ExistInDataSource := FALSE;
        Continue := TRUE;
        WHILE (Enumerator2.MoveNext) AND Continue DO BEGIN
          MailMergeDataField := Enumerator2.Current;
          IF STRPOS(MailMergeField.Code.Text, MailMergeDataField.Name) > 0 THEN BEGIN
            ExistInDataSource := TRUE;
            Continue := FALSE;
          END;
        END;
        IF NOT ExistInDataSource THEN
          ERROR(Text11012007, MailMergeField.Code.Text);
      END;
    END;

    LOCAL PROCEDURE RenameAttachment@1100528702(InteractionLogEntry@1100528700 : Record 11072027;VAR FileName@1100528701 : Text);
    VAR
      Directory@1100528702 : Text;
      FileName2@1100528703 : Text;
    BEGIN
      //**4PS
      Directory := FileMgt.GetDirectoryName(FileName);
      IF COPYSTR(Directory, STRLEN(Directory), 1) <> '\' THEN
        Directory := STRSUBSTNO('%1%2', Directory, '\');
      FileName2 :=
        STRSUBSTNO('%1%2-%3.DOC', Directory, InteractionLogEntry."Contact No.", InteractionLogEntry."Entry No.");
      FileMgt.RenameClientFile(FileName, FileName2, TRUE);
      FileName := FileName2;
    END;

    BEGIN
    END.
  }
}

