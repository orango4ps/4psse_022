OBJECT Codeunit 11072081 INSBOU Process Price Catalogue
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11012344;
    OnRun=BEGIN
            ProcessPriceCatalogue2(Rec)
          END;

  }
  CODE
  {
    VAR
      ItemSetup@1100525001 : Record 11012300;
      ItemImportSetup@1100525002 : Record 11012301;

    LOCAL PROCEDURE ProcessPriceCatalogue2@1100528300(VAR INSBOUPriceCatalogue@1100528300 : Record 11012344);
    VAR
      INSBOUPriceCatItemLine@1100525003 : Record 11012345;
      ImportTradeItem@1100525001 : Record 11012333;
      ImportItemData@1100525000 : Codeunit 11012300;
      LastLine@1100525002 : Integer;
    BEGIN
      IF (NOT INSBOUPriceCatalogue.FINDSET(TRUE)) THEN
        EXIT;

      ItemSetup.GET;
      ItemImportSetup.GET;
      IF (ItemImportSetup."Delete Existing Import Data") THEN BEGIN
        ImportTradeItem.SETFILTER("Import Type", '<>%1', ImportTradeItem."Import Type"::"Web Service");
        ImportTradeItem.DELETEALL;
        ImportTradeItem.SETRANGE("Import Type");
      END;
      IF (ImportTradeItem.FINDLAST) THEN
        LastLine := ImportTradeItem."Line No.";

      ItemImportSetup."Import Date-Time" := ItemImportSetup.Datetime(TODAY, TIME);
      ItemImportSetup.MODIFY;

      ImportItemData.SetVars;
      REPEAT
        IF (INSBOUPriceCatalogue."Process Status" > INSBOUPriceCatalogue."Process Status"::Processing) THEN
          INSBOUPriceCatalogue.FIELDERROR("Process Status");

        INSBOUPriceCatalogue."Process Status" := INSBOUPriceCatalogue."Process Status"::Processing;
        INSBOUPriceCatalogue."Error Message" := '';
        INSBOUPriceCatalogue.MODIFY(TRUE);
        COMMIT;

        INSBOUPriceCatItemLine.SETRANGE("Vendor No.", INSBOUPriceCatalogue."Vendor No.");
        INSBOUPriceCatItemLine.SETRANGE(PriceCatalogueNumber, INSBOUPriceCatalogue.PriceCatalogueNumber);
        INSBOUPriceCatItemLine.SETRANGE("Process Status", INSBOUPriceCatItemLine."Process Status"::Received);
        IF (INSBOUPriceCatItemLine.FINDSET(TRUE)) THEN BEGIN
          REPEAT
            LastLine += 1;
            ImportItemData.ImportTradeItem(LastLine, FillItemTextLine(INSBOUPriceCatalogue, INSBOUPriceCatItemLine));

            ProcessPriceLines(INSBOUPriceCatalogue, INSBOUPriceCatItemLine);
            ProcessChargeLines(INSBOUPriceCatalogue, INSBOUPriceCatItemLine);

            INSBOUPriceCatItemLine."Process Status" := INSBOUPriceCatItemLine."Process Status"::Processed;
            INSBOUPriceCatItemLine.MODIFY;
          UNTIL (INSBOUPriceCatItemLine.NEXT = 0);
        END;
        INSBOUPriceCatalogue."Process Status" := INSBOUPriceCatalogue."Process Status"::Processed;
        INSBOUPriceCatalogue.MODIFY(TRUE);
        COMMIT;
      UNTIL (INSBOUPriceCatalogue.NEXT = 0);
    END;

    LOCAL PROCEDURE ProcessPriceLines@1100525002(INSBOUPriceCatalogue@1100525001 : Record 11012344;INSBOUPriceCatItemLine@1100525000 : Record 11012345);
    VAR
      INSBOUPriceCatLinePrice@1100525002 : Record 11012346;
      PriceHistoryTradeItem@1100525004 : Record 11012315;
      ETIMVendorCentralMgt@1100525007 : Record 11012304;
      TradeItem@1100525006 : Record 11012317;
      TempETIMUnit@1100525003 : TEMPORARY Record 11012307;
      ImportItemData@1100525008 : Codeunit 11012300;
      TradeItemPresent@1100525005 : Boolean;
    BEGIN
      INSBOUPriceCatLinePrice.SETRANGE("Vendor No.", INSBOUPriceCatItemLine."Vendor No.");
      INSBOUPriceCatLinePrice.SETRANGE(PriceCatalogueNumber, INSBOUPriceCatItemLine.PriceCatalogueNumber);
      INSBOUPriceCatLinePrice.SETRANGE(SupplierGLN, INSBOUPriceCatItemLine.SupplierGLN);
      INSBOUPriceCatLinePrice.SETRANGE(LineNumber, INSBOUPriceCatItemLine.LineNumber);
      IF (NOT INSBOUPriceCatLinePrice.FINDSET) THEN
        EXIT;

      REPEAT
        PriceHistoryTradeItem.INIT;
        ImportItemData.FillPriceHistoryFields(PriceHistoryTradeItem,
          FillPriceTextLine(INSBOUPriceCatalogue, INSBOUPriceCatItemLine, INSBOUPriceCatLinePrice));
        IF (ImportItemData.SavePriceHistoryTradeItem(PriceHistoryTradeItem, ETIMVendorCentralMgt, TradeItem, TradeItemPresent,
          ItemImportSetup, ItemSetup))
        THEN
          ImportItemData.WriteTmpETIMUnit(PriceHistoryTradeItem."Price ID", TempETIMUnit);
      UNTIL (INSBOUPriceCatLinePrice.NEXT = 0);
      ImportItemData.WriteETIMUnits(TempETIMUnit);
    END;

    LOCAL PROCEDURE ProcessChargeLines@1100525003(INSBOUPriceCatalogue@1100525001 : Record 11012344;INSBOUPriceCatItemLine@1100525000 : Record 11012345);
    VAR
      INSBOUPriceCatLineCharge@1100525002 : Record 11012347;
      TradeItemCharge@1100525003 : Record 11012332;
      ETIMVendorCentralMgt@1100525004 : Record 11012304;
      TradeItem@1100525008 : Record 11012317;
      TempETIMUnit@1100525007 : TEMPORARY Record 11012307;
      ImportItemData@1100525006 : Codeunit 11012300;
      TradeItemPresent@1100525005 : Boolean;
    BEGIN
      INSBOUPriceCatLineCharge.SETRANGE("Vendor No.", INSBOUPriceCatItemLine."Vendor No.");
      INSBOUPriceCatLineCharge.SETRANGE(PriceCatalogueNumber, INSBOUPriceCatItemLine.PriceCatalogueNumber);
      INSBOUPriceCatLineCharge.SETRANGE(SupplierGLN, INSBOUPriceCatItemLine.SupplierGLN);
      INSBOUPriceCatLineCharge.SETRANGE(LineNumber, INSBOUPriceCatItemLine.LineNumber);
      IF (NOT INSBOUPriceCatLineCharge.FINDSET) THEN
        EXIT;

      REPEAT
        TradeItemCharge.INIT;
        ImportItemData.FillTradeItemChargeFields(TradeItemCharge,
          FillChargeTextLine(INSBOUPriceCatalogue, INSBOUPriceCatItemLine, INSBOUPriceCatLineCharge));
        IF (ImportItemData.SaveTradeItemCharge(TradeItemCharge, ETIMVendorCentralMgt, TradeItem, TradeItemPresent, ItemImportSetup)) THEN
          ImportItemData.WriteTmpETIMUnit(TradeItemCharge."Lower Limit Order Unit", TempETIMUnit);
      UNTIL (INSBOUPriceCatLineCharge.NEXT = 0);
      ImportItemData.WriteETIMUnits(TempETIMUnit);
    END;

    LOCAL PROCEDURE FillItemTextLine@1100525001(INSBOUPriceCatalogue@1100525001 : Record 11012344;INSBOUPriceCatItemLine@1100525003 : Record 11012345) : Text;
    VAR
      StringFunctions@1100525000 : Codeunit 11012273;
      ItemTextLine@1100525002 : Text;
    BEGIN
      CASE INSBOUPriceCatItemLine.StatusCode OF
        '130': ItemTextLine[1] := '2';
        ELSE ItemTextLine[1] := '1';
      END;
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.TradeItemSupplier, 2, 20);
      IF INSBOUPriceCatItemLine.SupplierGLN <> '' THEN
        ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.SupplierGLN, 22, 13)
      ELSE
        IF INSBOUPriceCatalogue.SupplierGLN <> '' THEN
          ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatalogue.SupplierGLN, 22, 13)
        ELSE
          INSBOUPriceCatalogue.TESTFIELD(SupplierGLN);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.GTIN, 35, 14);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, DateToTxt(INSBOUPriceCatItemLine.ValidityStartDate), 49, 8);
      CASE INSBOUPriceCatItemLine.OrderableIndicator OF
        'ORU': ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, 'YES', 57, 3);
        ELSE ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, 'NO', 57, 3);
      END;
      CASE INSBOUPriceCatItemLine.ProcessableIndicator OF
        'SU': ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, 'YES', 60, 3);
        ELSE ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, 'NO', 60, 3);
      END;
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.StatusCode, 63, 3);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.SuccessorGTIN, 66, 14);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.SuccessorSupplierTradeItem, 80, 20);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.PredecessorGTIN, 100, 14);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.PredecessorSupplierTradeItem, 114, 20);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, FORMAT(INSBOUPriceCatItemLine.PriceToOrderUnitFactor,0,9), 134, 16);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.MeasurementUnitCode, 150, 3);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.ManufacturerGLN, 153, 13);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.ManufacturersProductId, 166, 20);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.ProductGTIN, 186, 14);
      //StringFunctions.ReplaceStringPart(ItemTextLine, "Item Code (Manufacturer)", 200, 20);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.ProductGTIN, 220, 14);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.BuyingGroup, 234, 17);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.CBSNumber, 251, 17);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.TradeItemDescription, 268, 50);
      //StringFunctions.ReplaceStringPart(ItemTextLine, "Item Description 2", 318, 20);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.PackageCode, 338, 3);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, FORMAT(INSBOUPriceCatItemLine.GrossWeight,19,9), 341, 19);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.WeightMeasurementUnitCode, 360, 3);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, FORMAT(INSBOUPriceCatItemLine.PhysicalHeight,19,9), 363, 19);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, FORMAT(INSBOUPriceCatItemLine.PhysicalLength,19,9), 382, 19);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, FORMAT(INSBOUPriceCatItemLine.PhysicalWidth,19,9), 401, 19);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.PhysicalMeasurementUnitCode, 420, 3);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.UseUnitMeasureUnitCode, 423, 3);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, FORMAT(INSBOUPriceCatItemLine.MinimumOrderQuantity,16,9), 426, 16);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, FORMAT(INSBOUPriceCatItemLine.OrderMultiple,16,9), 442, 16);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, FORMAT(INSBOUPriceCatItemLine.DeliveryTime), 458, 15);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.DeliveryTimeMeasureUnitCode, 473, 6);
      //StringFunctions.ReplaceStringPart(ItemTextLine, StartingDatePrice, 479, 8);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.VATRate, 487, 1);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, FORMAT(INSBOUPriceCatItemLine.VATPercentage), 488, 18);
      CASE INSBOUPriceCatItemLine.MakeToStockIndicator OF
        'MTS': ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, 'YES', 506, 3);
        ELSE ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, 'NO', 506, 3);
      END;
      //StringFunctions.ReplaceStringPart(ItemTextLine, "Gross Price Operation Surch.", 509, 16);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatItemLine.AllowanceGroup, 525, 35);
      //StringFunctions.ReplaceStringPart(ItemTextLine, GrossPrice, 560, 16);
      //StringFunctions.ReplaceStringPart(ItemTextLine, "Price On Demand", 560, 16);
      //StringFunctions.ReplaceStringPart(ItemTextLine, "Quantity Per Price", 576, 10);
      //StringFunctions.ReplaceStringPart(ItemTextLine, "Price ID", 586, 3);
      //StringFunctions.ReplaceStringPart(ItemTextLine, "Nett Price", 589, 16);
      //StringFunctions.ReplaceStringPart(ItemTextLine, "Factor Price-Purchase Unit", 605, 16);
      ItemTextLine := StringFunctions.ReplaceStringPart(ItemTextLine, INSBOUPriceCatalogue.CurrencyCode, 621, 3);
      EXIT(ItemTextLine);
    END;

    LOCAL PROCEDURE FillPriceTextLine@1100525005(INSBOUPriceCatalogue@1100525002 : Record 11012344;INSBOUPriceCatItemLine@1100525000 : Record 11012345;INSBOUPriceCatLinePrice@1100525001 : Record 11012346) : Text;
    VAR
      StringFunctions@1100525003 : Codeunit 11012273;
      PriceTextLine@1100525004 : Text;
    BEGIN
      CASE INSBOUPriceCatItemLine.StatusCode OF
        '130': PriceTextLine[1] := '2';
        ELSE PriceTextLine[1] := '1';
      END;
      PriceTextLine := StringFunctions.ReplaceStringPart(PriceTextLine, INSBOUPriceCatItemLine.TradeItemSupplier, 2, 20);
      IF INSBOUPriceCatLinePrice.SupplierGLN <> '' THEN
        PriceTextLine := StringFunctions.ReplaceStringPart(PriceTextLine, INSBOUPriceCatLinePrice.SupplierGLN, 22, 13)
      ELSE
        IF INSBOUPriceCatalogue.SupplierGLN <> '' THEN
          PriceTextLine := StringFunctions.ReplaceStringPart(PriceTextLine, INSBOUPriceCatalogue.SupplierGLN, 22, 13)
        ELSE
          INSBOUPriceCatalogue.TESTFIELD(SupplierGLN);
      PriceTextLine := StringFunctions.ReplaceStringPart(PriceTextLine, DateToTxt(INSBOUPriceCatLinePrice.StartDate), 35, 8);
      PriceTextLine := StringFunctions.ReplaceStringPart(PriceTextLine, FORMAT(INSBOUPriceCatLinePrice.GrossPrice,16,9), 43, 16);
      PriceTextLine := StringFunctions.ReplaceStringPart(PriceTextLine, FORMAT(INSBOUPriceCatLinePrice.NetPrice,16,9), 59, 16);
      PriceTextLine := StringFunctions.ReplaceStringPart(PriceTextLine, FORMAT(INSBOUPriceCatLinePrice.NumberOfUnitsInPriceBasis,10,9), 75, 10);
      PriceTextLine := StringFunctions.ReplaceStringPart(PriceTextLine, INSBOUPriceCatLinePrice.MeasureUnitPriceBasis, 85, 3);
      PriceTextLine := StringFunctions.ReplaceStringPart(PriceTextLine, INSBOUPriceCatalogue.CurrencyCode, 88, 3);
      //StringFunctions.ReplaceStringPart(PriceTextLine, "Gross Price Operation Surch.", 91, 16);
      PriceTextLine := StringFunctions.ReplaceStringPart(PriceTextLine, INSBOUPriceCatItemLine.VATRate, 110, 1);
      PriceTextLine := StringFunctions.ReplaceStringPart(PriceTextLine, FORMAT(INSBOUPriceCatItemLine.VATPercentage), 111, 18);
      EXIT(PriceTextLine);
    END;

    LOCAL PROCEDURE FillChargeTextLine@1100525006(INSBOUPriceCatalogue@1100525002 : Record 11012344;INSBOUPriceCatItemLine@1100525001 : Record 11012345;INSBOUPriceCatLineCharge@1100525000 : Record 11012347) : Text;
    VAR
      StringFunctions@1100525003 : Codeunit 11012273;
      ChargeTextLine@1100525004 : Text;
    BEGIN
      CASE INSBOUPriceCatItemLine.StatusCode OF
        '130': ChargeTextLine[1] := '2';
        ELSE ChargeTextLine[1] := '1';
      END;
      ChargeTextLine := StringFunctions.ReplaceStringPart(ChargeTextLine, INSBOUPriceCatItemLine.TradeItemSupplier, 1, 20);
      IF INSBOUPriceCatLineCharge.SupplierGLN <> '' THEN
        ChargeTextLine := StringFunctions.ReplaceStringPart(ChargeTextLine, INSBOUPriceCatLineCharge.SupplierGLN, 21, 13)
      ELSE
        IF INSBOUPriceCatalogue.SupplierGLN <> '' THEN
          ChargeTextLine := StringFunctions.ReplaceStringPart(ChargeTextLine, INSBOUPriceCatalogue.SupplierGLN, 21, 13)
        ELSE
          INSBOUPriceCatalogue.TESTFIELD(SupplierGLN);
      ChargeTextLine := StringFunctions.ReplaceStringPart(ChargeTextLine, INSBOUPriceCatLineCharge.TypeCode, 34, 3);
      ChargeTextLine := StringFunctions.ReplaceStringPart(ChargeTextLine, DateToTxt(INSBOUPriceCatLineCharge.StartDate), 37, 8);
      ChargeTextLine := StringFunctions.ReplaceStringPart(ChargeTextLine, FORMAT(INSBOUPriceCatLineCharge.SequenceNumber), 45, 2);
      CASE INSBOUPriceCatLineCharge."Line Type" OF
        INSBOUPriceCatLineCharge."Line Type"::Allowance: ChargeTextLine := StringFunctions.ReplaceStringPart(ChargeTextLine, 'D', 47, 1);
        INSBOUPriceCatLineCharge."Line Type"::Charge: ChargeTextLine := StringFunctions.ReplaceStringPart(ChargeTextLine, 'C', 47, 1);
      END;
      ChargeTextLine := StringFunctions.ReplaceStringPart(ChargeTextLine, INSBOUPriceCatLineCharge.Description, 48, 35);
      ChargeTextLine := StringFunctions.ReplaceStringPart(ChargeTextLine, INSBOUPriceCatalogue.LanguageCode, 83, 2);
      ChargeTextLine := StringFunctions.ReplaceStringPart(ChargeTextLine, FORMAT(INSBOUPriceCatLineCharge.Percentage,0,9), 85, 11);
      ChargeTextLine := StringFunctions.ReplaceStringPart(ChargeTextLine, FORMAT(INSBOUPriceCatLineCharge.Amount,16,9), 96, 16);
      ChargeTextLine := StringFunctions.ReplaceStringPart(ChargeTextLine, INSBOUPriceCatalogue.CurrencyCode, 112, 3);
      ChargeTextLine := StringFunctions.ReplaceStringPart(ChargeTextLine, FORMAT(INSBOUPriceCatLineCharge.BracketLowerLimit,19,9), 115, 19);
      ChargeTextLine := StringFunctions.ReplaceStringPart(ChargeTextLine, INSBOUPriceCatItemLine.MeasurementUnitCode, 134, 3);
      EXIT(ChargeTextLine);
    END;

    LOCAL PROCEDURE DateToTxt@1100525000(iDate@1100525000 : Date) : Text;
    VAR
      DateString@1100525001 : Text;
    BEGIN
      DateString := FORMAT(iDate, 0, 9);
      EXIT(COPYSTR(DateString, 1, 4) + COPYSTR(DateString, 6, 2) + COPYSTR(DateString, 9, 2));
    END;

    BEGIN
    END.
  }
}

