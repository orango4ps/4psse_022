OBJECT Codeunit 11128033 IEI - Svefaktura Invoice
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=IEI2.0.1 (60033);
  }
  PROPERTIES
  {
    TableNo=112;
    Permissions=TableData 112=rim;
    OnRun=VAR
            SalesHeader@1000000000 : Record 36;
            recref@1000000001 : RecordRef;
          BEGIN
            CheckIfInvoiceCanBeCreated;
            InitLinesFromSalesInvoice(Rec);
            CreateInvoice(Rec, FALSE);
            SaveToFile(CreateFilename("No."));

            //4PSSE.sn SC006888
            "Exported on" := TODAY;
            "Invoice Exported by XML" := TRUE;
            MODIFY;
            //4PSSE.en SC006888
          END;

  }
  CODE
  {
    VAR
      gXMLWriter@1000000000 : Codeunit 11128077;
      gNSdefault@1000000001 : Text;
      gNScac@1000000002 : Text;
      gNScbc@1000000004 : Text;
      gNSccts@1000000003 : Text;
      gNScur@1000000005 : Text;
      gNSsdt@1000000006 : Text;
      gNSudt@1000000007 : Text;
      gNSxsi@1000000008 : Text;
      gSalesInvoiceLineTEMP@1000000009 : TEMPORARY Record 113;
      txtFInvoiceExists@1000000010 : TextConst 'ENU=Registered for F-tax;SVE=F-skattebevis finns';
      txtNoVAT@1000000011 : TextConst 'ENU=No VAT;SVE=Ingen moms';
      txt11128000@1100285300 : TextConst 'ENU=Pre-Assigned No.;NOR=Forh†ndstilordnet nr.;SVE=F”rhandstilldelat nr';
      FakturaTextConstrVAT@1100285100 : TextConst 'ENU=Reverse charge;SVE=Omv„nd skattskyldighet';

    PROCEDURE InitLines@1000000046(VAR SalesInvoiceHeader@1100285100 : Record 112;VAR SalesInvoiceLine@1100285101 : Record 113);
    BEGIN
      CLEAR(gSalesInvoiceLineTEMP);

      IF SalesInvoiceLine.FINDSET(FALSE) THEN REPEAT
        gSalesInvoiceLineTEMP.INIT;
      //>>190808
      //  gSalesInvoiceLineTEMP.COPY(SalesInvoiceLine);
        gSalesInvoiceLineTEMP.TRANSFERFIELDS(SalesInvoiceLine,TRUE);
      //<<190808
        gSalesInvoiceLineTEMP.INSERT(FALSE);
      UNTIL SalesInvoiceLine.NEXT = 0;

      //190808, SRFC-1000
      OnAfterInitLines(SalesInvoiceHeader,SalesInvoiceLine,gSalesInvoiceLineTEMP);
    END;

    PROCEDURE CheckIfInvoiceCanBeCreated@1000000000();
    VAR
      SalesSetup@1100285200 : Record 311;
    BEGIN
      //4PSSE.so
      //EInvoiceSetup.GET;
      //EInvoiceSetup.TESTFIELD("Svefaktura Export Path");
      //4PSSE.eo

      //4PSSE.sn
      SalesSetup.GET;
      SalesSetup.TESTFIELD("Export Path Svefaktura");
      SalesSetup.TESTFIELD("Export Path Svefaktura Attach.");
      //4PSSE.en
    END;

    PROCEDURE CreateInvoice@1000000001(VAR SalesInvoiceHeader@1000000000 : Record 112;isCredit@1000000001 : Boolean);
    VAR
      CurrencyCode@1000000002 : Code[10];
      AmountInclVAT@1000000006 : Decimal;
      AmountExclVAT@1000000005 : Decimal;
      VATAmount@1000000004 : Decimal;
      RoundingAmount@1000000003 : Decimal;
      DiscountAmount@1000000008 : Decimal;
      VATAmountLine@1000000007 : Record 290;
      ShowTextConstrVAT@1100285100 : Boolean;
    BEGIN
      CreateXMLDoc;
      AddID(SalesInvoiceHeader."No.");
      AddIssueDate(SalesInvoiceHeader."Document Date");
      AddInvoiceTypeCode(isCredit); // False = Invoice, True = Credit

      //AddNote(SalesInvoiceHeader."Invoice Text");           //4PSSE.n SC006760 4PSSE.o SRFC-051
      AddNote(SalesInvoiceHeader."Invoice Text",SalesInvoiceHeader."Pre-Assigned No.",SalesInvoiceHeader."Bill-to Customer No."); //4PSSE.n SRFC-051
      AddInvoiceCurrencyCode(SalesInvoiceHeader, CurrencyCode);
      AddLineCount(gSalesInvoiceLineTEMP);
      AddAttachments(SalesInvoiceHeader, isCredit);

      //AddAdditionalDocRef(SalesInvoiceHeader."External Document No.");      //4PSSE.o SC006760
      AddAdditionalDocRef(SalesInvoiceHeader."Order No. Customer");           //4PSSE.n SC006760
      AddBuyerParty(SalesInvoiceHeader);

      //AddSellerParty(SalesInvoiceHeader."Salesperson Code");                //4PSSE.o SC006801
      AddSellerParty(SalesInvoiceHeader."Salesperson Code", isCredit);        //4PSSE.n SC006801
      AddDeliveryAddress(SalesInvoiceHeader);

      //AddExchangeRate;
      CalculateTotals(SalesInvoiceHeader, gSalesInvoiceLineTEMP, CurrencyCode, AmountInclVAT, AmountExclVAT, VATAmount, RoundingAmount, DiscountAmount, VATAmountLine,ShowTextConstrVAT);
      AddPaymentMeans(SalesInvoiceHeader);
      //AddAllowanceChargeOnHeader(DiscountAmount, CurrencyCode, 'fakturarabatt');
      AddTaxTotals(CurrencyCode, VATAmountLine, VATAmount,ShowTextConstrVAT);
      AddInvoiceTotals(CurrencyCode, AmountInclVAT, AmountExclVAT, DiscountAmount, RoundingAmount);

      //>>190110
      //AddLines(gSalesInvoiceLineTEMP, CurrencyCode, SalesInvoiceHeader."Prices Including VAT");
      AddLines(gSalesInvoiceLineTEMP, SalesInvoiceHeader, CurrencyCode, SalesInvoiceHeader."Prices Including VAT");
      //<<190110

      //AddRequisitionistDocumentReference(SalesInvoiceHeader."External Document No.", SalesInvoiceHeader."No.");                   //4PSSE.o SC006760
      //AddRequisitionistDocumentReference(SalesInvoiceHeader."Principal Reference", SalesInvoiceHeader."External Document No.");     //4PSSE.n SC006760 4PSSE.o SRFC-038
      //AddRequisitionistDocumentReference(SalesInvoiceHeader."Principal Reference", SalesInvoiceHeader."External Document No.",SalesInvoiceHeader."Bill-to Customer No.");  //4PSSE.n SRFC-038 //4PSSE.o SRFC-037
      AddRequisitionistDocumentReference(SalesInvoiceHeader."Principal Reference", SalesInvoiceHeader."External Document No.",SalesInvoiceHeader."Bill-to Customer No.", SalesInvoiceHeader."Order No. Customer");  //4PSSE.n SRFC-037

      IF isCredit THEN
        AddInitialDocumentReference(SalesInvoiceHeader."Applies-to Doc. No.");

      //AddDeliveryTerms;
      //AddInvoicingPeriod(CREATEDATETIME(150101D, 0T), CREATEDATETIME(150102D, 235959T));
    END;

    PROCEDURE SaveToFile@1000000006(pFilename@1000000000 : Text);
    BEGIN
      gXMLWriter.SaveToFile(pFilename);
    END;

    LOCAL PROCEDURE "***"@1000000002();
    BEGIN
    END;

    LOCAL PROCEDURE InitLinesFromSalesInvoice@1000000045(VAR SalesInvoiceHeader@1000000000 : Record 112);
    VAR
      SalesInvoiceLine@1000000001 : Record 113;
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.", SalesInvoiceHeader."No.");
      InitLines(SalesInvoiceHeader,SalesInvoiceLine);
    END;

    LOCAL PROCEDURE CreateXMLDoc@1000000003();
    BEGIN
      SetGlobalNameSpaces;

      gXMLWriter.CreateDomNS('UTF-8', '', 'Invoice', gNSdefault);
      gXMLWriter.AddAttribute('xmlns:cac', gNScac);
      gXMLWriter.AddAttribute('xmlns:cbc', gNScbc);
      gXMLWriter.AddAttribute('xmlns:ccts', gNSccts);
      gXMLWriter.AddAttribute('xmlns:cur', gNScur);
      gXMLWriter.AddAttribute('xmlns:sdt', gNSsdt);
      gXMLWriter.AddAttribute('xmlns:udt', gNSudt);
      gXMLWriter.AddAttribute('xmlns:xsi', gNSxsi);
    END;

    LOCAL PROCEDURE SetGlobalNameSpaces@1000000008();
    BEGIN
      gNSdefault := 'urn:sfti:documents:BasicInvoice:1:0';
      gNScac :=  'urn:sfti:CommonAggregateComponents:1:0';
      gNScbc :=  'urn:oasis:names:tc:ubl:CommonBasicComponents:1:0';
      gNSccts := 'urn:oasis:names:tc:ubl:CoreComponentParameters:1:0';
      gNScur := 'urn:oasis:names:tc:ubl:codelist:CurrencyCode:1:0';
      gNSsdt := 'urn:oasis:names:tc:ubl:SpecializedDatatypes:1:0';
      gNSudt := 'urn:oasis:names:tc:ubl:UnspecializedDatatypes:1:0';
      gNSxsi := 'http://www.w3.org/2001/XMLSchema-instance';
    END;

    LOCAL PROCEDURE AddID@1000000004(pValue@1000000000 : Text);
    BEGIN
      gXMLWriter.AddElementAbs(2, 'ID', pValue);
    END;

    LOCAL PROCEDURE AddIssueDate@1000000005(pDateValue@1000000000 : Date);
    BEGIN
      gXMLWriter.AddElementAbsNS(2, 'cbc:IssueDate', FORMAT(pDateValue, 0, 9), gNScbc);
    END;

    LOCAL PROCEDURE AddInvoiceTypeCode@1000000007(pIsCredit@1000000000 : Boolean);
    BEGIN
      CASE pIsCredit OF
         TRUE:  gXMLWriter.AddElementAbs(2, 'InvoiceTypeCode', '381');
         FALSE: gXMLWriter.AddElementAbs(2, 'InvoiceTypeCode', '380');
      END;
    END;

    LOCAL PROCEDURE AddNote@1000000013(InvoiceText@1000000000 : Text;PreAssignedNr@1100285301 : Text;Customerno@1100285302 : Code[20]);
    VAR
      SESetup@1100285300 : Record 11128004;
      InvoiceText2@1100285303 : Text;
    BEGIN
      //gXMLWriter.AddElementAbsNS(2, 'cbc:Note', pValue, gNScbc);  //4PSSE.o SRFC-051
      //4PSSE.sn SRFC-051
      IF SESetup.GET(SESetup."Line type"::Setup,'SVFF™RHAND', Customerno) THEN
        IF SESetup."Value (bool)" THEN BEGIN
          InvoiceText2 := txt11128000 + ' ' + PreAssignedNr + ' ' + InvoiceText;
          gXMLWriter.AddElementAbsNS(2, 'cbc:Note', InvoiceText2, gNScbc);
          EXIT;
        END;

      IF InvoiceText<>'' THEN
        gXMLWriter.AddElementAbsNS(2, 'cbc:Note', InvoiceText, gNScbc);
    END;

    LOCAL PROCEDURE AddInvoiceCurrencyCode@1000000009(VAR SalesInvoiceHeader@1000000000 : Record 112;VAR pCurrencyCode@1000000002 : Code[10]);
    VAR
      GeneralLedgerSetup@1000000001 : Record 98;
    BEGIN
      pCurrencyCode := SalesInvoiceHeader."Currency Code";
      IF (pCurrencyCode = '') THEN BEGIN
         GeneralLedgerSetup.GET();
         pCurrencyCode := GeneralLedgerSetup."LCY Code";
      END;

      IF (pCurrencyCode = '') THEN ERROR('Currency Code is missing');
      gXMLWriter.AddElementAbs(2, 'InvoiceCurrencyCode', pCurrencyCode);
    END;

    LOCAL PROCEDURE AddLineCount@1000000012(VAR SalesInvoiceLine@1000000000 : Record 113);
    VAR
      NoOfLines@1000000004 : Integer;
    BEGIN
      // SalesInvoiceLine.SETFILTER(Amount, '<>%1', 0);  //190808
      SalesInvoiceLine.SETFILTER("No.", '<>970005');
      NoOfLines := SalesInvoiceLine.COUNT;
      SalesInvoiceLine.SETRANGE(Amount);
      gXMLWriter.AddElementAbs(2, 'LineItemCountNumeric', FORMAT(NoOfLines, 0, 9));
    END;

    LOCAL PROCEDURE AddAttachments@1000000010(VAR SalesInvoiceHeader@1100285303 : Record 112;isCredit@1100285302 : Boolean);
    VAR
      DocumentLink@1100285301 : Record 11012747;
      DocumentRelation@1100285300 : Record 11012407;
    BEGIN
      SetDocumentLinkFilter(DocumentLink, isCredit, SalesInvoiceHeader."No.");
      IF DocumentLink.FINDSET() THEN REPEAT
        CheckAddAndCopyAttachment(DocumentLink);
      UNTIL DocumentLink.NEXT = 0;

      //document-relation documents
      SetDocumentRelationFilter(DocumentRelation, isCredit,  SalesInvoiceHeader."No.");
      IF DocumentRelation.FINDSET() THEN REPEAT
        CheckAddAndCopyAttachment2(DocumentRelation);
      UNTIL DocumentRelation.NEXT = 0;
    END;

    LOCAL PROCEDURE AddAdditionalDocRef@1000000017(AdditionalDocRef@1000000000 : Text);
    BEGIN
      IF AdditionalDocRef = '' THEN EXIT; //190308

      gXMLWriter.AddElementAbs(2, 'AdditionalDocumentReference', '');
      //gXMLWriter.AddElementRelNS(1, 'cac:ID', JustCapitalLettersNumbers(AdditionalDocRef), gNScac);     //4PSSE.o SC006760
      gXMLWriter.AddElementRelNS(1, 'cac:ID', AdditionalDocRef, gNScac);                                  //4PSSE.n SC006760
      gXMLWriter.AddAttribute('identificationSchemeID', 'CT');
      gXMLWriter.AddAttribute('identificationSchemeAgencyName', 'SFTI');     //WG
    END;

    LOCAL PROCEDURE AddBuyerParty@1000000011(VAR SalesInvoiceHeader@1000000001 : Record 112);
    VAR
      ContactTEMP@1000000000 : TEMPORARY Record 5050;
      Contact@1000000002 : Record 5050;
      Customer@1000000003 : Record 18;
      IdentificationType@1000000004 : 'Normal,GLN,Custom';
      CustomerIdentification@1000000005 : Text;
    BEGIN
      gXMLWriter.AddElementAbsNS(2, 'cac:BuyerParty', '', gNScac);

      CLEAR(ContactTEMP);
      Customer.GET(SalesInvoiceHeader."Bill-to Customer No.");

      IF (SalesInvoiceHeader."Bill-to Contact No." <> '') THEN BEGIN
         //Contact.GET(SalesInvoiceHeader."Sell-to Contact No.");     //WG.o
         Contact.GET(SalesInvoiceHeader."Bill-to Contact No.");       //WG.n
         ContactTEMP.COPY(Contact);
         ContactTEMP.INSERT();
      END ELSE BEGIN
         ContactTEMP.INIT;
         ContactTEMP.Name := SalesInvoiceHeader."Sell-to Contact";
         ContactTEMP."Phone No." := Customer."Phone No.";
         ContactTEMP."Fax No." := Contact."Fax No.";
         ContactTEMP."E-Mail" := Customer."E-Mail";
         ContactTEMP.INSERT();
      END;

      SetCustomerIdentificationAndType(Customer, CustomerIdentification, IdentificationType);

      InsertParty(
         CustomerIdentification,
         IdentificationType,
         Customer."VAT Registration No.",
         //'', // Org No. //4PSSE.o SRFC-037
         Customer."COC Registration No.", //4PSSE.o SRFC-037
         SalesInvoiceHeader."Bill-to Name",
         MergeTwoText(SalesInvoiceHeader."Bill-to Address", SalesInvoiceHeader."Bill-to Address 2"),
         SalesInvoiceHeader."Bill-to Post Code",
         SalesInvoiceHeader."Bill-to City",
         SalesInvoiceHeader."Bill-to Country/Region Code",
         '',
         //ContactTEMP);  //4PSSE.o SRFC-037
         ContactTEMP, //4PSSE.n SRFC-037
         //SalesInvoiceHeader."Bill-to Customer No."); //4PSSE.n SRFC-037
         FALSE); //190308
    END;

    LOCAL PROCEDURE AddSellerParty@1000000014(SalesPersonCode@1000000001 : Code[20];pIsCredit@1100285301 : Boolean);
    VAR
      CompanyInformation@1000000002 : Record 79;
      SalespersonPurchaser@1000000003 : Record 13;
      ContactTEMP@1000000000 : TEMPORARY Record 5050;
      IdentificationType@1000000005 : 'Normal,GLN,Custom';
      SendOnBehalf@1100285300 : Record 11012768;
    BEGIN
      gXMLWriter.AddElementAbsNS(2, 'cac:SellerParty', '', gNScac);

      CLEAR(ContactTEMP);
      CompanyInformation.GET();

      IF (SalesPersonCode <> '') AND (SalespersonPurchaser.GET(SalesPersonCode)) THEN
         ContactTEMP.Name := SalespersonPurchaser.Name
      ELSE
         ContactTEMP.Name := '';
      ContactTEMP."Phone No." := JustCapitalLettersNumbers(CompanyInformation."Phone No.");
      ContactTEMP."Fax No." := JustCapitalLettersNumbers(CompanyInformation."Fax No.");
      //4PSSE.sn SC006801
      IF pIsCredit THEN BEGIN
        SendOnBehalf.SETRANGE(Usage,SendOnBehalf.Usage::"Sales Credit Memo");
        IF SendOnBehalf.FINDFIRST THEN
          ContactTEMP."E-Mail" := SendOnBehalf."Send On Behalf Of E-mail"
        ELSE
          ContactTEMP."E-Mail" := CompanyInformation."E-Mail"
      END ELSE BEGIN
        SendOnBehalf.SETRANGE(Usage,SendOnBehalf.Usage::"Sales Invoice");
        IF SendOnBehalf.FINDFIRST THEN
          ContactTEMP."E-Mail" := SendOnBehalf."Send On Behalf Of E-mail"
        ELSE
          ContactTEMP."E-Mail" := CompanyInformation."E-Mail"
      END;
      //4PSSE.en SC006801
      //ContactTEMP."E-Mail" := CompanyInformation."E-Mail";  //4PSSE.o SC006801
      ContactTEMP.INSERT;

      InsertParty(CompanyInformation.GLN,
         //IdentificationType::Normal,  //4PSSE.o
         IdentificationType::GLN,       //4PSSE.n
         CompanyInformation."VAT Registration No.",
         JustCapitalLettersNumbers(CompanyInformation."Registration No."),
         CompanyInformation.Name,
         MergeTwoText(CompanyInformation.Address, CompanyInformation."Address 2"),
         CompanyInformation."Post Code",
         CompanyInformation.City,
         CompanyInformation."Country/Region Code",
         CompanyInformation."Registered Office",
         //ContactTEMP);  //4PSSE.o SRFC-037
         ContactTEMP, //4PSSE.n SRFC-037
         //''); //4PSSE.n SRFC-037
         TRUE); //190308
    END;

    LOCAL PROCEDURE AddDeliveryAddress@1000000020(VAR SalesInvoiceHeader@1000000000 : Record 112);
    BEGIN
      gXMLWriter.AddElementAbsNS(2, 'cac:Delivery', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:DeliveryAddress', '', gNScac);

      InsertAddressPart('', '',
         MergeTwoText(SalesInvoiceHeader."Ship-to Address", SalesInvoiceHeader."Ship-to Address 2"),
         '',
         SalesInvoiceHeader."Ship-to City",
         SalesInvoiceHeader."Ship-to Post Code",
         SalesInvoiceHeader."Ship-to Country/Region Code");
    END;

    LOCAL PROCEDURE AddExchangeRate@1000000021();
    BEGIN
      gXMLWriter.AddElementAbsNS(2, 'cac:ExchangeRate', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:SourceCurrencyCode', '', gNScac);
      gXMLWriter.AddElementRelNS(0, 'cbc:SourceCurrencyBaseRate', '', gNScbc);
      gXMLWriter.AddElementRelNS(0, 'cac:TargetCurrencyCode', '', gNScac);
      gXMLWriter.AddElementRelNS(0, 'cbc:TargetUnitBaseRate', '', gNScbc);
      gXMLWriter.AddElementRelNS(0, 'cbc:CalculationRate', '', gNScbc);
      gXMLWriter.AddElementRelNS(0, 'cbc:Date', '', gNScbc);
    END;

    LOCAL PROCEDURE AddPaymentMeans@1000000052(VAR SalesInvoiceHeader@1000000000 : Record 112);
    VAR
      CompanyInformation@1000000004 : Record 79;
      UseBankAccount@1000000001 : Boolean;
      UseBankgiro@1000000002 : Boolean;
      UsePlusGiro@1000000003 : Boolean;
    BEGIN
      SetAllPaymentMeans(CompanyInformation, UseBankAccount, UseBankgiro, UsePlusGiro);

      IF UseBankAccount THEN AddBankAccountPayment(CompanyInformation."Bank Account No.", CompanyInformation."Bank Name", CompanyInformation."SWIFT Code", SalesInvoiceHeader."Due Date", SalesInvoiceHeader."No.");
      IF UseBankgiro    THEN AddBankgiroPayment(CompanyInformation."Giro No.", SalesInvoiceHeader."Due Date", SalesInvoiceHeader."No.");
      IF UsePlusGiro    THEN AddPlusgiroPayment(CompanyInformation."Plus Giro No.", SalesInvoiceHeader."Due Date", SalesInvoiceHeader."No.");
    END;

    LOCAL PROCEDURE AddAllowanceChargeOnHeader@1000000041(pAmount@1000000000 : Decimal;pCurrencyCode@1000000001 : Code[10];pReason@1000000003 : Text);
    VAR
      IndicatorText@1000000002 : Text;
    BEGIN
      InsertAllowanceCharge(-ABS(pAmount), 25, pCurrencyCode, 'fakturarabatt', 0);
    END;

    LOCAL PROCEDURE AddTaxTotals@1000000022(pCurrencyCode@1000000001 : Code[10];VAR VATAmountLine@1000000002 : Record 290;pTotalTaxAmount@1000000003 : Decimal;ShowTextConstrVAT@1100285100 : Boolean);
    VAR
      i@1000000000 : Integer;
    BEGIN
      gXMLWriter.AddElementAbsNS(2, 'cac:TaxTotal', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cbc:TotalTaxAmount', FORMAT(pTotalTaxAmount, 0, 9), gNScbc);
      gXMLWriter.AddAttribute('amountCurrencyID', pCurrencyCode);

      IF VATAmountLine.FINDSET(FALSE) THEN REPEAT
        IF NOT (VATAmountLine."VAT Calculation Type" = VATAmountLine."VAT Calculation Type"::"Normal VAT") THEN
          InsertTaxSubtotal('E', VATAmountLine."VAT %", FORMAT(VATAmountLine."VAT Calculation Type"), VATAmountLine."VAT Base", VATAmountLine."VAT Amount", pCurrencyCode)
        ELSE IF (VATAmountLine."VAT %" = 0) THEN BEGIN
      //>>190805
          IF ShowTextConstrVAT THEN
            InsertTaxSubtotal('E', VATAmountLine."VAT %", FakturaTextConstrVAT, VATAmountLine."VAT Base", VATAmountLine."VAT Amount", pCurrencyCode)
          ELSE
      //<<190805
            InsertTaxSubtotal('E', VATAmountLine."VAT %", txtNoVAT, VATAmountLine."VAT Base", VATAmountLine."VAT Amount", pCurrencyCode);
        END ELSE
          InsertTaxSubtotal('S', VATAmountLine."VAT %", '', VATAmountLine."VAT Base", VATAmountLine."VAT Amount", pCurrencyCode)
      UNTIL VATAmountLine.NEXT = 0;

      //gXMLWriter.AddElementRelNS(0, 'cac:TargetCurrencyCode', '', gNScac);
      //gXMLWriter.AddElementRelNS(0, 'cbc:TargetUnitBaseRate', '', gNScbc);
      //gXMLWriter.AddElementRelNS(0, 'cbc:CalculationRate', '', gNScbc);
      //gXMLWriter.AddElementRelNS(0, 'cbc:Date', '', gNScbc);
    END;

    LOCAL PROCEDURE AddInvoiceTotals@1000000023(pCurrencyCode@1000000000 : Code[10];pAmountInclVAT@1000000001 : Decimal;pAmountExclVAT@1000000002 : Decimal;pDiscountAmount@1000000004 : Decimal;pRoundingAmount@1000000003 : Decimal);
    BEGIN
      gXMLWriter.AddElementAbsNS(2, 'cac:LegalTotal', '', gNScac);
      InsertInvoiceTotal(pAmountExclVAT, pCurrencyCode);
      InsertTaxExclusiveTotal(pAmountExclVAT + pDiscountAmount, pCurrencyCode);
      InsertTaxInclusiveTotal(pAmountInclVAT, pCurrencyCode);
      InsertRoundOffAmount(pRoundingAmount, pCurrencyCode);
    END;

    LOCAL PROCEDURE AddLines@1000000029(VAR SalesInvoiceLine@1000000002 : Record 113;SalesInvoiceHeader@1100285300 : Record 112;pCurrencyCode@1000000001 : Code[10];pIncludeVATOnPrice@1000000003 : Boolean);
    VAR
      i@1000000000 : Integer;
    BEGIN
      IF SalesInvoiceLine.FINDSET(FALSE) THEN REPEAT
      //>>190110
        //InsertLine(SalesInvoiceLine, pCurrencyCode, pIncludeVATOnPrice);
        InsertLine(SalesInvoiceLine, SalesInvoiceHeader, pCurrencyCode, pIncludeVATOnPrice);
      //<<190110
      UNTIL SalesInvoiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AddInitialDocumentReference@1000000042(InitialDocRef@1000000000 : Text);
    BEGIN
      gXMLWriter.AddElementAbs(2, 'InitialInvoiceDocumentReference', '');
      gXMLWriter.AddElementRelNS(1, 'cac:ID', JustCapitalLettersNumbers(InitialDocRef), gNScac);
    END;

    LOCAL PROCEDURE AddRequisitionistDocumentReference@1000000049(ReqDocumentReference@1000000000 : Text;ReqDocumentReference2@1100285300 : Text;Customerno@1100285304 : Code[20];CustomerOrderNo@1100285305 : Text[50]);
    VAR
      SESetup@1100285301 : Record 11128004;
      DocReference1@1100285302 : Text;
      DocReference2@1100285303 : Text;
    BEGIN
      IF ReqDocumentReference <> '' THEN BEGIN
        //4PSSE.sn SRFC-038
        IF NOT SESetup.GET(SESetup."Line type"::Setup,'SVFDOCREF2', Customerno) THEN
          SESetup."Value (bool)":=FALSE;
        IF SESetup."Value (bool)" THEN BEGIN
          DocReference1 := COPYSTR(ReqDocumentReference,1,STRPOS(ReqDocumentReference,' ')-1);
          DocReference2 := COPYSTR(ReqDocumentReference,STRPOS(ReqDocumentReference,' ')+1);
          gXMLWriter.AddElementAbs(2, 'RequisitionistDocumentReference', '');
          gXMLWriter.AddElementRelNS(1, 'cac:ID', DocReference1, gNScac);
          gXMLWriter.AddElementAbs(2, 'RequisitionistDocumentReference', '');
          gXMLWriter.AddElementRelNS(1, 'cac:ID', DocReference2, gNScac);
        END ELSE BEGIN
        //4PSSE.en SRFC-038
          gXMLWriter.AddElementAbs(2, 'RequisitionistDocumentReference', '');
          gXMLWriter.AddElementRelNS(1, 'cac:ID', ReqDocumentReference, gNScac);
        END;
      END ELSE BEGIN
        IF ReqDocumentReference2='' THEN //190806
          ReqDocumentReference2:='none';

        gXMLWriter.AddElementAbs(2, 'RequisitionistDocumentReference', '');
        gXMLWriter.AddElementRelNS(1, 'cac:ID', JustCapitalLettersNumbers(ReqDocumentReference2), gNScac);
      END;

        //4PSSE.sn SRFC-037
      IF CustomerOrderNo <> '' THEN BEGIN
        IF SESetup.GET(SESetup."Line type"::Setup,'SVFORDNREF',Customerno) THEN
          IF SESetup."Value (bool)" THEN BEGIN
            gXMLWriter.AddElementAbs(2, 'RequisitionistDocumentReference', '');
            gXMLWriter.AddElementRelNS(1, 'cac:ID', CustomerOrderNo, gNScac);
          END;
      END;
        //4PSSE.en SRFC-037
    END;

    LOCAL PROCEDURE AddDeliveryTerms@1000000043();
    BEGIN
      gXMLWriter.AddElementAbsNS(2, 'cac:DeliveryTerms', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cbc:SpecialTerms', '555', gNScbc);
    END;

    LOCAL PROCEDURE AddInvoicingPeriod@1000000044(pStartDateTime@1000000000 : DateTime;pEndDateTime@1000000001 : DateTime);
    BEGIN
      gXMLWriter.AddElementAbs(2, 'InvoicingPeriod', '');
      gXMLWriter.AddElementRelNS(1, 'cbc:StartDateTime', FORMAT(pStartDateTime, 0, 9), gNScbc);
      gXMLWriter.AddElementRelNS(0, 'cbc:EndDateTime', FORMAT(pEndDateTime, 0, 9), gNScbc);
    END;

    LOCAL PROCEDURE CalculateTotals@1000000048(VAR SalesInvoiceHeader@1000000005 : Record 112;VAR SalesInvoiceLine@1000000006 : Record 113;pCurrencyCode@1000000008 : Code[10];VAR pAmountInclVAT@1000000000 : Decimal;VAR pAmountExclVAT@1000000001 : Decimal;VAR pVATAmount@1000000002 : Decimal;VAR pRoundingAmount@1000000003 : Decimal;VAR pInvoiceDiscountAmount@1000000007 : Decimal;VAR VATAmountLine@1000000004 : Record 290;VAR ShowTextConstrVAT@1100285101 : Boolean);
    VAR
      Currency@1000000009 : Record 4;
      GeneralLedgerSetup@1000000010 : Record 98;
      CustomerPostingGroup@1100285200 : Record 92;
      RoundingAccount@1100285201 : Code[10];
      VATPostingSetup@1100285100 : Record 325;
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.", SalesInvoiceHeader."No.");
      SalesInvoiceLine.SETFILTER("Amount Including VAT",'<>0');
      IF SalesInvoiceLine.FINDSET(FALSE) THEN REPEAT
      //    IF SalesInvoiceLine."Charge Type" = SalesInvoiceLine."Charge Type"::"1" THEN BEGIN     //4PSSE.o
      //       pRoundingAmount += SalesInvoiceLine."Amount Including VAT";                         //4PSSE.o
      //    END ELSE BEGIN                                                                         //4PSSE.o
      //       pAmountExclVAT += SalesInvoiceLine.Amount;                                          //4PSSE.o
      //    END;                                                                                   //4PSSE.o
      //4PSSE.sn
        IF ((SalesInvoiceLine.Type = SalesInvoiceLine.Type::"G/L Account") AND (SalesInvoiceLine."No." = '970005')) THEN BEGIN
          pRoundingAmount += SalesInvoiceLine."Amount Including VAT";
        END ELSE BEGIN
          pAmountExclVAT += SalesInvoiceLine.Amount;
        END;
      //4PSSE.en

        pAmountInclVAT += SalesInvoiceLine."Amount Including VAT";
        pVATAmount += (SalesInvoiceLine."Amount Including VAT" - SalesInvoiceLine.Amount);

      UNTIL SalesInvoiceLine.NEXT = 0;

      GeneralLedgerSetup.GET();
      IF (GeneralLedgerSetup."LCY Code" <> pCurrencyCode) THEN
        Currency.GET(pCurrencyCode)
      ELSE
        Currency.InitRoundingPrecision;

      pInvoiceDiscountAmount := ROUND(pInvoiceDiscountAmount, Currency."Amount Rounding Precision");

      //SalesInvoiceLine.SETFILTER("Charge Type", '<>%1', SalesInvoiceLine."Charge Type"::"1");    //4PSSE.o
      SalesInvoiceLine.SETFILTER(SalesInvoiceLine."No.", '<>970005');                 //4PSSE.n
      SalesInvoiceLine.CalcVATAmountLines(SalesInvoiceHeader, VATAmountLine);

      //>>190805
      ShowTextConstrVAT:=FALSE;
      VATPostingSetup.SETRANGE("VAT Bus. Posting Group",SalesInvoiceHeader."VAT Bus. Posting Group");
      VATPostingSetup.SETRANGE("Print as Construct VAT",TRUE);
      IF VATPostingSetup.FINDSET(FALSE) THEN REPEAT
        SalesInvoiceLine.SETRANGE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
        ShowTextConstrVAT := NOT SalesInvoiceLine.ISEMPTY;
      UNTIL (VATPostingSetup.NEXT=0) OR ShowTextConstrVAT;
      SalesInvoiceLine.SETRANGE("VAT Prod. Posting Group");
      //<<190805

      SalesInvoiceLine.SETRANGE("Amount Including VAT"); //190808, remove filter
    END;

    LOCAL PROCEDURE InsertParty@1000000016(pID@1000000001 : Code[20];pIdentificationType@1000000002 : 'Normal,GLN,Custom';pVATNo@1000000008 : Code[20];pOrgNo@1000000009 : Code[20];pName@1000000003 : Text;pAddress@1000000004 : Text;pPostCode@1000000005 : Code[20];pCity@1000000006 : Text;pCountryCode@1000000007 : Code[20];pRegistredOffice@1000000010 : Text;VAR Contact@1000000000 : Record 5050;IsSellerParty@1100285100 : Boolean);
    VAR
      SESetup@1100285300 : Record 11128004;
    BEGIN
      //190308 altered signature, Customerno -> IsSellerParty
      gXMLWriter.AddElementRelNS(1, 'cac:Party', '', gNScac);

      InsertPartyIDAndName(pID, pIdentificationType, pName);

      gXMLWriter.AddElementRelNS(-1, 'cac:Address', '', gNScac);
      InsertAddressPart('', '', pAddress, '', pCity, pPostCode, pCountryCode);

      //4PSSE.sn SRFC-037
      //SESetup.SETRANGE("Line type", SESetup."Line type"::Setup);
      //SESetup.SETRANGE(Code,'SVEFAKTURA');
      //SESetup.SETRANGE("Code 2", 'SWT');
      //SESetup.SETRANGE("Value (txt)", Customerno);
      //IF SESetup.FINDFIRST THEN
      //>>190308
      //IF SESetup.GET(SESetup."Line type"::Setup,'SVEFSWT',Customerno) THEN
      //4PSSE.en SRFC-037
      //  IF (pOrgNo <> '') THEN InsertPartyTaxScheme(pOrgNo, 'SWT', pRegistredOffice)
      //ELSE
      //  IF (pVATNo <> '') THEN InsertPartyTaxScheme(pVATNo, 'VAT', '');
      IF (pOrgNo <> '') AND IsSellerParty THEN
        InsertPartyTaxScheme(pOrgNo, 'SWT', pRegistredOffice);
      IF (pVATNo <> '') THEN
        InsertPartyTaxScheme(pVATNo, 'VAT', '');
      //<<190308

      IF Contact.FINDFIRST THEN
        InsertContact(Contact.Name, Contact."Phone No.", Contact."Fax No.", Contact."E-Mail");
    END;

    LOCAL PROCEDURE InsertPartyIDAndName@1000000057(pID@1000000000 : Code[20];pIdentificationType@1000000003 : 'Normal,GLN,Custom';pName@1000000002 : Text);
    BEGIN
      gXMLWriter.AddElementRelNS(1, 'cac:PartyIdentification', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:ID', pID, gNScac);

      CASE pIdentificationType OF
         pIdentificationType::Normal: ;
         pIdentificationType::GLN: gXMLWriter.AddAttribute('identificationSchemeAgencyID', '9');
         pIdentificationType::Custom: gXMLWriter.AddAttribute('identificationSchemeAgencyID', 'ZZZ');
      END;

      gXMLWriter.AddElementRelNS(-1, 'cac:PartyName', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cbc:Name', pName, gNScbc);
    END;

    LOCAL PROCEDURE InsertPartyTaxScheme@1000000018(pCompanyID@1000000000 : Code[20];pTaxSchemeID@1000000001 : Code[10];pRegistredOffice@1000000002 : Text);
    BEGIN
      gXMLWriter.AddElementAbsNS(4, 'cac:PartyTaxScheme', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:CompanyID', JustCapitalLettersNumbers(pCompanyID), gNScac);

      IF (pTaxSchemeID = 'SWT') THEN BEGIN
         gXMLWriter.AddElementRelNS(0, 'cbc:ExemptionReason', txtFInvoiceExists, gNScbc);
         IF (pRegistredOffice <> '') THEN BEGIN
            gXMLWriter.AddElementRelNS(0, 'cac:RegistrationAddress', '', gNScac);
            gXMLWriter.AddElementRelNS(1, 'cbc:CityName', pRegistredOffice, gNScbc);
         END;
      END;
      //gXMLWriter.AddElementRelNS(0, 'cac:RegistrationAddress', '', gNScac);
      //InsertAddressPart('', '', '', '', '', '', '');

      gXMLWriter.AddElementAbsNS(5, 'cac:TaxScheme', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:ID', pTaxSchemeID, gNScac);
    END;

    LOCAL PROCEDURE InsertContact@1000000015(pName@1000000001 : Text;pTelephone@1000000002 : Text;pTelefax@1000000003 : Text;pEMail@1000000004 : Text);
    BEGIN
      gXMLWriter.AddElementAbsNS(4, 'cac:Contact', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cbc:Name', pName, gNScbc);
      IF (pTelephone <> '') THEN
         gXMLWriter.AddElementRelNS(0, 'cbc:Telephone', DELCHR(pTelephone, '=', '+() -'), gNScbc);     //4PSSE
      IF (pTelefax <> '') THEN
         gXMLWriter.AddElementRelNS(0, 'cbc:Telefax', DELCHR(pTelefax, '=', '+() -'), gNScbc);         //4PSSE
      IF (pEMail <> '') THEN
         gXMLWriter.AddElementRelNS(0, 'cbc:ElectronicMail', pEMail, gNScbc);
    END;

    LOCAL PROCEDURE InsertAddressPart@1000000019(pID@1000000000 : Text;pPostBox@1000000001 : Text;pAddress@1000000002 : Text;pDepartment@1000000003 : Text;pCity@1000000004 : Text;pPostCode@1000000005 : Text;pCountryCode@1000000006 : Code[10]);
    VAR
      Step@1000000007 : Integer;
    BEGIN
      Step := 1;

      IF (pID <> '')         THEN AddElementRelNS(Step, 'cac:ID', 'adressid', gNScac);
      IF (pPostBox <> '')    THEN AddElementRelNS(Step, 'cbc:Postbox', pPostBox, gNScbc);
      IF (pAddress <> '')    THEN AddElementRelNS(Step, 'cbc:StreetName', pAddress, gNScbc);
      IF (pDepartment <> '') THEN AddElementRelNS(Step, 'cbc:Department', pDepartment, gNScbc);
      IF (pCity <> '')       THEN AddElementRelNS(Step, 'cbc:CityName', pCity, gNScbc);
      IF (pPostCode <> '')   THEN AddElementRelNS(Step, 'cbc:PostalZone', JustCapitalLettersNumbers(pPostCode), gNScbc);

      IF (pCountryCode <> '') THEN BEGIN
         gXMLWriter.AddElementRelNS(Step, 'cac:Country', '', gNScac);
         gXMLWriter.AddElementRelNS(1, 'cac:IdentificationCode', pCountryCode, gNScac);
      END;
    END;

    LOCAL PROCEDURE InsertTaxSubtotal@1000000024(pID@1000000000 : Code[10];pPercent@1000000001 : Decimal;pExemptionReason@1000000002 : Text;pTaxableAmount@1000000003 : Decimal;pTaxAmount@1000000004 : Decimal;pCurrencyCode@1000000006 : Code[10]);
    VAR
      FieldRef@1000000005 : FieldRef;
    BEGIN
      gXMLWriter.AddElementAbsNS(3, 'cac:TaxSubTotal', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cbc:TaxableAmount', FORMAT(pTaxableAmount, 0, 9), gNScbc);
      gXMLWriter.AddAttribute('amountCurrencyID', pCurrencyCode);
      gXMLWriter.AddElementRelNS(0, 'cbc:TaxAmount', FORMAT(pTaxAmount, 0, 9), gNScbc);
      gXMLWriter.AddAttribute('amountCurrencyID', pCurrencyCode);
      gXMLWriter.AddElementRelNS(0, 'cac:TaxCategory', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:ID', pID, gNScac);
      gXMLWriter.AddElementRelNS(0, 'cbc:Percent', FORMAT(pPercent, 0, 9), gNScbc);
      IF (pExemptionReason <> '') THEN gXMLWriter.AddElementRelNS(0, 'cbc:ExemptionReason', pExemptionReason, gNScbc);
      gXMLWriter.AddElementRelNS(0, 'cac:TaxScheme', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:ID', 'VAT', gNScac);
    END;

    LOCAL PROCEDURE InsertInvoiceTotal@1000000025(pAmount@1000000000 : Decimal;pCurrencyCode@1000000001 : Code[10]);
    BEGIN
      gXMLWriter.AddElementAbsNS(3, 'cbc:LineExtensionTotalAmount', FORMAT(pAmount, 0, 9), gNScbc);
      gXMLWriter.AddAttribute('amountCurrencyID', pCurrencyCode);
    END;

    LOCAL PROCEDURE InsertTaxExclusiveTotal@1000000026(pAmount@1000000001 : Decimal;pCurrencyCode@1000000000 : Code[10]);
    BEGIN
      gXMLWriter.AddElementAbsNS(3, 'cbc:TaxExclusiveTotalAmount', FORMAT(pAmount, 0, 9), gNScbc);
      gXMLWriter.AddAttribute('amountCurrencyID', pCurrencyCode);
    END;

    LOCAL PROCEDURE InsertTaxInclusiveTotal@1000000027(pAmount@1000000001 : Decimal;pCurrencyCode@1000000000 : Code[10]);
    BEGIN
      gXMLWriter.AddElementAbsNS(3, 'cbc:TaxInclusiveTotalAmount', FORMAT(pAmount, 0, 9), gNScbc);
      gXMLWriter.AddAttribute('amountCurrencyID', pCurrencyCode);
    END;

    LOCAL PROCEDURE InsertRoundOffAmount@1000000028(pAmount@1000000001 : Decimal;pCurrencyCode@1000000000 : Code[10]);
    BEGIN
      gXMLWriter.AddElementAbsNS(3, 'cac:RoundOffAmount', FORMAT(pAmount, 0, 9), gNScac);
      gXMLWriter.AddAttribute('amountCurrencyID', pCurrencyCode);
    END;

    LOCAL PROCEDURE InsertLine@1000000030(VAR SalesInvoiceLine@1000000000 : Record 113;SalesInvoiceHeader@1100285300 : Record 112;pCurrencyCode@1000000001 : Code[10];pIncludeVATOnPrice@1000000003 : Boolean);
    VAR
      VATAmountLineTEMP@1000000002 : TEMPORARY Record 290;
      ServiceOrderCostPlusEntry@1100285304 : Record 11012825;
      UoM@1100285306 : Record 204;
      SalesInvoiceLineDescription@1100285302 : Text;
      PrintDescription@1100285303 : Text;
      UnitofMeasureCode@1100285305 : Code[10];
      VATCalcType@1100285100 : Integer;
      VATCalcTypeText@1100285101 : Text;
      VATPostingSetup@1100285102 : Record 325;
      tempText@1100285103 : Text;
    BEGIN
      gXMLWriter.AddElementAbsNS(2, 'cac:InvoiceLine', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:ID', FORMAT(SalesInvoiceLine."Line No."), gNScac);

      //>>190110
      UnitofMeasureCode := SalesInvoiceLine."Unit of Measure Code";
      IF UoM.GET(UnitofMeasureCode) THEN
        IF UoM."International Standard Code"<>'' THEN
          UnitofMeasureCode := UoM."International Standard Code";
      //<<190110

      InsertQuantityAmountOnLine(SalesInvoiceLine.Quantity,
      //>>190110
         //SalesInvoiceLine."Unit of Measure Code",
         UnitofMeasureCode,
      //<<190110
         SalesInvoiceLine.Amount,
         pCurrencyCode);

      //IF (SalesInvoiceLine."Description 2" <> '') THEN InsertNote(SalesInvoiceLine."Description 2");   //4PSSE.o SC006963
      InsertNote(SalesInvoiceLine);  //4PSSE.n SC006963

      //InsertOrderLineReference();

      //InsertDespatchLineReference();

      //InsertDeliveryOnLine();
      IF SalesInvoiceLine.Amount <> SalesInvoiceLine."Line Amount" THEN
         InsertAllowanceChargeOnLine(SalesInvoiceLine.Amount - SalesInvoiceLine."Line Amount", SalesInvoiceLine."Line Amount", pCurrencyCode);

      IF pIncludeVATOnPrice THEN
        SalesInvoiceLine."Unit Price" := SalesInvoiceLine."Unit Price" * (100 - SalesInvoiceLine."VAT %");

      //>>190805
      VATCalcType := SalesInvoiceLine."VAT Calculation Type";
      VATCalcTypeText := FORMAT(SalesInvoiceLine."VAT Calculation Type");
      IF VATPostingSetup.GET(SalesInvoiceHeader."VAT Bus. Posting Group",SalesInvoiceLine."VAT Prod. Posting Group") THEN
        IF VATPostingSetup."Print as Construct VAT" THEN BEGIN
          VATCalcType -=10;
          VATCalcTypeText := FakturaTextConstrVAT;
        END;
      //<<190805

      //>>190110
      SalesInvoiceLineDescription := SalesInvoiceLine.Description;
      AdjSalesInvoiceLineDescPublisher(SalesInvoiceHeader,SalesInvoiceLine,SalesInvoiceLineDescription);
      //InsertItemOnLine(SalesInvoiceLine.Description,
      InsertItemOnLine(SalesInvoiceLineDescription,
      //<<190110
        '',
        SalesInvoiceLine."No.",
        '',
        SalesInvoiceLine."Unit Price",
        pCurrencyCode,
        SalesInvoiceLine."VAT %",
      //>>190805
      //   SalesInvoiceLine."VAT Calculation Type",
      //   FORMAT(SalesInvoiceLine."VAT Calculation Type"));
        VATCalcType,VATCalcTypeText,SalesInvoiceLine.Type=0);
      //<<190805
    END;

    LOCAL PROCEDURE InsertQuantityAmountOnLine@1000000034(pQuantity@1000000000 : Decimal;pUnitCode@1000000001 : Code[10];pAmount@1000000002 : Decimal;pCurrencyCode@1000000003 : Code[10]);
    BEGIN
      gXMLWriter.AddElementAbsNS(3, 'cbc:InvoicedQuantity', FORMAT(pQuantity, 0, 9), gNScbc);
      gXMLWriter.AddAttribute('quantityUnitCode', pUnitCode);

      gXMLWriter.AddElementRelNS(0, 'cbc:LineExtensionAmount', FORMAT(pAmount, 0, 9), gNScbc);
      gXMLWriter.AddAttribute('amountCurrencyID', pCurrencyCode);
    END;

    LOCAL PROCEDURE InsertNote@1000000038(SalesInvoiceLine@1000000000 : Record 113);
    VAR
      ServiceOrder@1100285300 : Record 11012823;
      pNoteText@1100285301 : Text[1024];
      Project@1100285302 : Record 11072003;
    BEGIN
      //4PSSE.sn SC006963
      IF SalesInvoiceLine."Job No." <> '' THEN BEGIN
        Project.GET(SalesInvoiceLine."Job No.");
        pNoteText:= SalesInvoiceLine."Job No." +', '+ Project.Description;
      END;
      IF (SalesInvoiceLine."Service Order No." <> '')
        AND (SalesInvoiceLine."Execution Date"<>0D) //190808
        THEN BEGIN
        ServiceOrder.GET(SalesInvoiceLine."Service Order No.");
        pNoteText:= SalesInvoiceLine."Service Order No." +', '+ ServiceOrder.Description +', '+ SalesInvoiceLine."Object No." +', '+ FORMAT(SalesInvoiceLine."Execution Date");
      END;
      //4PSSE.en SC006963

      IF pNoteText = '' THEN EXIT; //190308

      gXMLWriter.AddElementAbsNS(3, 'cbc:Note', pNoteText, gNScbc);
    END;

    LOCAL PROCEDURE InsertOrderLineReference@1000000035();
    BEGIN
      gXMLWriter.AddElementAbsNS(3, 'cac:OrderLineReference', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:BuyersLineID', '123', gNScac);
      gXMLWriter.AddElementRelNS(0, 'cac:OrderReference', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:BuyersID', '323', gNScac);
    END;

    LOCAL PROCEDURE InsertDespatchLineReference@1000000039();
    BEGIN
      gXMLWriter.AddElementAbsNS(3, 'cac:DespatchLineReference', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:LineID', '11', gNScac);
      gXMLWriter.AddElementRelNS(0, 'cac:DocumentReference', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:ID', '1', gNScac);
    END;

    LOCAL PROCEDURE InsertDeliveryOnLine@1000000036();
    BEGIN
      gXMLWriter.AddElementAbsNS(3, 'cac:Delivery', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cbc:ActualDeliveryDateTime', '2015-01-01T12:00:00', gNScbc);
    END;

    LOCAL PROCEDURE InsertAllowanceChargeOnLine@1000000037(pAmount@1000000000 : Decimal;pBaseAmount@1000000002 : Decimal;pCurrencyCode@1000000001 : Code[10]);
    VAR
      ChargeIndicator@1000000003 : Text;
    BEGIN
      IF (pAmount = 0) THEN EXIT;
      IF (pAmount < 0) THEN ChargeIndicator := 'false' ELSE ChargeIndicator := 'true';

      gXMLWriter.AddElementAbsNS(3, 'cac:AllowanceCharge', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cbc:ChargeIndicator', ChargeIndicator, gNScbc);
      gXMLWriter.AddElementRelNS(0, 'cbc:Amount', FORMAT(ABS(pAmount), 0, 9), gNScbc);
      gXMLWriter.AddAttribute('amountCurrencyID', pCurrencyCode);

      gXMLWriter.AddElementRelNS(0, 'cac:AllowanceChargeBaseAmount', FORMAT(pBaseAmount, 0, 9), gNScac);
      gXMLWriter.AddAttribute('amountCurrencyID', pCurrencyCode);
    END;

    LOCAL PROCEDURE InsertItemOnLine@1000000031(pItemDescription@1000000001 : Text;pBuyersNo@1000000000 : Code[20];pSellersNo@1000000002 : Code[20];pStandardNo@1000000003 : Code[20];pPrice@1000000006 : Decimal;pCurrencyCode@1000000007 : Code[10];pVATPercent@1000000004 : Decimal;pVATid@1000000005 : Integer;pVATExemptionText@1000000008 : Text;pIsTextLine@1100285100 : Boolean);
    BEGIN
      gXMLWriter.AddElementAbsNS(3, 'cac:Item', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cbc:Description', pItemDescription, gNScbc);

      IF (pBuyersNo <> '') THEN InsertItemIdentification(0, pBuyersNo);
      IF (pSellersNo <> '') THEN InsertItemIdentification(1, pSellersNo);
      IF (pStandardNo <> '') THEN InsertItemIdentification(2, pStandardNo);

      IF NOT pIsTextLine THEN BEGIN //190808
        IF (pVATid <> 0) THEN
          InsertTaxOnItem('E', pVATPercent, pVATExemptionText)
        ELSE IF (pVATPercent = 0) THEN
          InsertTaxOnItem('E', pVATPercent, txtNoVAT)
        ELSE
          InsertTaxOnItem('S', pVATPercent, '');
      //>>190808
      END;

      IF (NOT pIsTextLine) OR (pPrice<>0) THEN
      //<<190808
        InsertPriceOnItem(pPrice, pCurrencyCode);
    END;

    LOCAL PROCEDURE InsertItemIdentification@1000000033(pBuyerSellerStandard@1000000000 : 'Buyers,Sellers,Standard';pID@1000000001 : Text);
    BEGIN
      gXMLWriter.AddElementAbsNS(4, 'cac:' + FORMAT(pBuyerSellerStandard) + 'ItemIdentification', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:ID', pID, gNScac);
    END;

    LOCAL PROCEDURE InsertTaxOnItem@1000000032(pID@1000000000 : Code[10];pPercent@1000000001 : Decimal;pExemptionReason@1000000002 : Text);
    BEGIN
      gXMLWriter.AddElementAbsNS(4, 'cac:TaxCategory', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:ID', pID, gNScac);

      gXMLWriter.AddElementRelNS(0, 'cbc:Percent', FORMAT(pPercent, 0, 9), gNScbc);

      IF (pExemptionReason <> '') THEN
         gXMLWriter.AddElementRelNS(0, 'cbc:ExemptionReason', pExemptionReason, gNScbc);

      gXMLWriter.AddElementRelNS(0, 'cac:TaxScheme', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:ID', 'VAT', gNScac);
    END;

    LOCAL PROCEDURE InsertTaxOnAllowanceCharge@1000000050(pID@1000000000 : Code[10];pPercent@1000000001 : Decimal;pExemptionReason@1000000002 : Text);
    BEGIN
      gXMLWriter.AddElementAbsNS(3, 'cac:TaxCategory', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:ID', pID, gNScac);

      gXMLWriter.AddElementRelNS(0, 'cbc:Percent', FORMAT(pPercent, 0, 9), gNScbc);

      IF (pExemptionReason <> '') THEN
         gXMLWriter.AddElementRelNS(0, 'cbc:ExemptionReason', pExemptionReason, gNScbc);

      gXMLWriter.AddElementRelNS(0, 'cac:TaxScheme', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:ID', 'VAT', gNScac);
    END;

    LOCAL PROCEDURE InsertPriceOnItem@1000000040(pPrice@1000000000 : Decimal;pCurrencyCode@1000000001 : Code[10]);
    BEGIN
      gXMLWriter.AddElementAbsNS(4, 'cac:BasePrice', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cbc:PriceAmount', FORMAT(pPrice, 0, 9), gNScbc);
      gXMLWriter.AddAttribute('amountCurrencyID', pCurrencyCode);
    END;

    LOCAL PROCEDURE InsertAllowanceCharge@1000000054(pAmount@1000000000 : Decimal;pVATPercentage@1000000005 : Decimal;pCurrencyCode@1000000001 : Code[10];pReason@1000000003 : Text;pBaseAmount@1000000004 : Decimal);
    VAR
      IndicatorText@1000000002 : Text;
    BEGIN
      IF (pAmount < 0) THEN IndicatorText := 'false' ELSE IndicatorText := 'true';

      gXMLWriter.AddElementAbs(2, 'AllowanceCharge', '');
      gXMLWriter.AddElementRelNS(1, 'cbc:ChargeIndicator', IndicatorText, gNScbc);

      IF (pReason <> '') THEN BEGIN
         gXMLWriter.AddElementRelNS(0, 'cac:ReasonCode', 'ZZZ', gNScac);
         gXMLWriter.AddAttribute('name', pReason);
      END;

      gXMLWriter.AddElementRelNS(0, 'cbc:Amount', FORMAT(ABS(pAmount), 0, 9), gNScbc);
      gXMLWriter.AddAttribute('amountCurrencyID', pCurrencyCode);

      IF (pVATPercentage = 0) THEN
         InsertTaxOnAllowanceCharge('E', 0, pReason)
      ELSE
         InsertTaxOnAllowanceCharge('S', pVATPercentage, pReason);

      IF (pBaseAmount <> 0) THEN BEGIN
         gXMLWriter.AddElementRelNS(0, 'cac:BaseAmount', FORMAT(pBaseAmount, 0, 9), gNScbc);
         gXMLWriter.AddAttribute('amountCurrencyID', pCurrencyCode);
      END;
    END;

    LOCAL PROCEDURE AddElementRelNS@1000000051(VAR pStep@1000000000 : Integer;Name@1000000001 : Text;Value@1000000002 : Text;NameSpace@1000000003 : Text);
    BEGIN
      gXMLWriter.AddElementRelNS(pStep, Name, Value, NameSpace);
      IF (pStep = 1) THEN pStep := 0;
    END;

    LOCAL PROCEDURE MergeTwoText@1000000047(Text1@1000000000 : Text;Text2@1000000001 : Text) Return : Text;
    BEGIN
      IF (Text1 <> '') THEN Return := Text1;
      IF (Text2 <> '') AND (Return <> '') THEN Return := Text1 + ' ' + Text2;
      IF (Text2 <> '') AND (Return = '') THEN Return := Text2;
    END;

    LOCAL PROCEDURE GetOptionCaption@1000000053(RecordID@1000000000 : RecordID;FieldNo@1000000003 : Integer);
    VAR
      RecRef@1000000001 : RecordRef;
      FieldRef@1000000002 : FieldRef;
    BEGIN

      RecRef.GET(RecordID);
      FieldRef := RecRef.FIELD(FieldNo);
      MESSAGE(FieldRef.OPTIONCAPTION + FORMAT(FieldRef.VALUE));
    END;

    LOCAL PROCEDURE SetAllPaymentMeans@1000000055(VAR CompanyInformation@1000000003 : Record 79;VAR UseBankAccount@1000000000 : Boolean;VAR UseBankgiro@1000000001 : Boolean;VAR UsePlusgiro@1000000002 : Boolean);
    BEGIN
      CompanyInformation.GET();
      IF (CompanyInformation."Bank Account No." <> '') THEN UseBankAccount := TRUE;
      IF (CompanyInformation."Giro No." <> '') THEN UseBankgiro := TRUE;
      IF (CompanyInformation."Plus Giro No." <> '') THEN UsePlusgiro := TRUE;
    END;

    LOCAL PROCEDURE AddBankAccountPayment@1000000056(BankAccountNo@1000000000 : Text;SwiftCode@1000000004 : Text;BankName@1000000002 : Text;DueDate@1000000001 : Date;PaymentID@1000000003 : Text);
    BEGIN

      gXMLWriter.AddElementAbsNS(2, 'cac:PaymentMeans', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:PaymentMeansTypeCode', '1', gNScac);
      IF (DueDate <> 0D) THEN gXMLWriter.AddElementRelNS(0, 'cbc:DuePaymentDate', FORMAT(DueDate, 0, 9), gNScbc);
      gXMLWriter.AddElementRelNS(0, 'cac:PayeeFinancialAccount', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:ID', JustCapitalLettersNumbers(BankAccountNo), gNScac);
      gXMLWriter.AddElementRelNS(0, 'cac:FinancialInstitutionBranch','', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:FinancialInstitution','', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:ID', JustCapitalLettersNumbers(SwiftCode), gNScac);
      gXMLWriter.AddElementRelNS(-2, 'cac:PaymentInstructionID', JustCapitalLettersNumbers(PaymentID), gNScac);
      IF (BankName <> '') THEN BEGIN
         gXMLWriter.AddElementRelNS(-1, 'cac:PayeePartyName','', gNScac);
         gXMLWriter.AddElementRelNS(1, 'cbc:Name', BankName, gNScbc);
      END;
    END;

    LOCAL PROCEDURE AddBankgiroPayment@1000000059(BankgiroNo@1000000000 : Text;DueDate@1000000001 : Date;PaymentID@1000000003 : Text);
    BEGIN

      gXMLWriter.AddElementAbsNS(2, 'cac:PaymentMeans', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:PaymentMeansTypeCode', '1', gNScac);
      IF (DueDate <> 0D) THEN gXMLWriter.AddElementRelNS(0, 'cbc:DuePaymentDate', FORMAT(DueDate, 0, 9), gNScbc);
      gXMLWriter.AddElementRelNS(0, 'cac:PayeeFinancialAccount', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:ID', JustCapitalLettersNumbers(BankgiroNo), gNScac);
      gXMLWriter.AddElementRelNS(0, 'cac:FinancialInstitutionBranch','', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:FinancialInstitution','', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:ID', 'BGABSESS', gNScac);
      gXMLWriter.AddElementRelNS(-2, 'cac:PaymentInstructionID', JustCapitalLettersNumbers(PaymentID), gNScac);
    END;

    LOCAL PROCEDURE AddPlusgiroPayment@1000000061(PlusgiroNo@1000000000 : Text;DueDate@1000000001 : Date;PaymentID@1000000003 : Text);
    BEGIN

      gXMLWriter.AddElementAbsNS(2, 'cac:PaymentMeans', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:PaymentMeansTypeCode', '1', gNScac);
      IF (DueDate <> 0D) THEN gXMLWriter.AddElementRelNS(0, 'cbc:DuePaymentDate', FORMAT(DueDate, 0, 9), gNScbc);
      gXMLWriter.AddElementRelNS(0, 'cac:PayeeFinancialAccount', '', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:ID', JustCapitalLettersNumbers(PlusgiroNo), gNScac);
      gXMLWriter.AddElementRelNS(0, 'cac:FinancialInstitutionBranch','', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:FinancialInstitution','', gNScac);
      gXMLWriter.AddElementRelNS(1, 'cac:ID', 'PGSISESS', gNScac);
      gXMLWriter.AddElementRelNS(-2, 'cac:PaymentInstructionID', JustCapitalLettersNumbers(PaymentID), gNScac);
    END;

    LOCAL PROCEDURE JustCapitalLettersNumbers@1000000058(InputText@1000000000 : Text) : Text;
    BEGIN
      EXIT(DELCHR(UPPERCASE(InputText), '=', DELCHR(UPPERCASE(InputText), '=', '01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ')));
    END;

    LOCAL PROCEDURE CreateFilename@1000000060(DocumentNo@1000000001 : Code[20]) : Text;
    VAR
      SalesSetup@1100285200 : Record 311;
    BEGIN
      //4PSSE.so
      //EInvoiceSetup.GET;
      //EXIT(EInvoiceSetup."Svefaktura Export Path" + 'Inv_' + DocumentNo + '_' + FORMAT(TODAY,0,
      //'<year4><month,2><day,2>') + '_' + DELCHR(FORMAT(TIME,0,'<Standard format,2>'), '=', '.') + '.xml');
      //4PSSE.eo

      //4PSSE.sn
      SalesSetup.GET;

      EXIT(SalesSetup."Export Path Svefaktura" + 'Inv_' + DocumentNo + '_' + FORMAT(TODAY,0,
        '<year4><month,2><day,2>') + '_' + DELCHR(FORMAT(TIME,0,'<Standard format,2>'), '=', '.') + '.xml');
      //4PSSE.en
    END;

    LOCAL PROCEDURE SetCustomerIdentificationAndType@1000000063(VAR Customer@1000000002 : Record 18;VAR pCustomerIdentification@1000000000 : Text;VAR pIdentificationType@1000000001 : 'Normal,GLN,Custom');
    VAR
      EInvoiceSetup@1000000003 : Record 311;
      RecRef@1000000004 : RecordRef;
      FieldRef@1000000005 : FieldRef;
    BEGIN
      //4PSSE.so ???
      //EInvoiceSetup.GET(); //Table60021
      //pIdentificationType := pIdentificationType::Normal;
      //CASE EInvoiceSetup."Customer Identification" OF
      //   EInvoiceSetup."Customer Identification"::"2":
      //      pIdentificationType := pIdentificationType::GLN;
      //   EInvoiceSetup."Customer Identification"::"0", EInvoiceSetup."Customer Identification"::"4":
      //      pIdentificationType := pIdentificationType::Custom;
      //END;

      //RecRef.GETTABLE(Customer);
      //FieldRef := RecRef.FIELD(EInvoiceSetup."Customer Id Field No.");
      //pCustomerIdentification := FieldRef.VALUE();
      //4PSSE.eo
      pCustomerIdentification := Customer."No.";//180906

      //4PSSE.sn
      IF Customer.GLN <> '' THEN BEGIN
        pIdentificationType := pIdentificationType::GLN;
        pCustomerIdentification := Customer.GLN;
      END ELSE BEGIN
        pIdentificationType := pIdentificationType::Normal;
      END;
      //4PSSE.en
    END;

    LOCAL PROCEDURE SetDocumentLinkFilter@1100285300(VAR DocumentLink@1100285302 : Record 11012747;IsCredit@1100285300 : Boolean;DocumentNo@1100285301 : Code[30]);
    VAR
      RecRef@1100285303 : RecordRef;
      SalesInvoiceHeader@1100285304 : Record 112;
      SalesCrMemoHeader@1100285305 : Record 114;
    BEGIN

      IF (IsCredit) THEN BEGIN
         SalesCrMemoHeader.GET(DocumentNo);
         RecRef.GETTABLE(SalesCrMemoHeader);
         DocumentLink.SETRANGE("Table No.", DATABASE::"Sales Cr.Memo Header");
      END ELSE BEGIN
         SalesInvoiceHeader.GET(DocumentNo);
         RecRef.GETTABLE(SalesInvoiceHeader);
         DocumentLink.SETRANGE("Table No.", DATABASE::"Sales Invoice Header");
      END;
      DocumentLink.SETRANGE("Record ID", RecRef.RECORDID);
    END;

    PROCEDURE SetDocumentRelationFilter@1100285301(VAR DocumentRelation@1100285302 : Record 11012407;IsCredit@1100285301 : Boolean;DocumentNo@1100285300 : Code[30]);
    VAR
      RecRef@1100285305 : RecordRef;
      SalesInvoiceHeader@1100285304 : Record 112;
      SalesCrMemoHeader@1100285303 : Record 114;
    BEGIN

      IF (IsCredit) THEN BEGIN
         DocumentRelation.SETRANGE("Document Type", DocumentRelation."Document Type"::"Posted Sales Cr.Memo");
         DocumentRelation.SETRANGE("No.", DocumentNo);
         DocumentRelation.SETRANGE("Send by E-Mail", TRUE);
      END ELSE BEGIN
         DocumentRelation.SETRANGE("Document Type", DocumentRelation."Document Type"::"Posted Sales Invoice");
         DocumentRelation.SETRANGE("No.", DocumentNo);
         DocumentRelation.SETRANGE("Send by E-Mail", TRUE);
      END;
    END;

    LOCAL PROCEDURE CheckAddAndCopyAttachment@1100285306(DocumentLink@1100285300 : Record 11012747);
    VAR
      DocumentProperties@1100285301 : Record 11012746;
      Filename@1100285302 : Text;
    BEGIN

      IF NOT DocumentProperties.GET(DocumentLink."Document No.") THEN
         EXIT;

      IF DocumentProperties.File = '' THEN
         EXIT;

      IF NOT CheckIfFileExistsAndCorrectFilename(DocumentProperties, Filename) THEN
         EXIT;

      IF CheckIfOutgoingAttachmentExists(DocumentProperties, Filename) THEN BEGIN
         InsertAdditionalDocumentReference(Filename);
         EXIT;
      END;

      CopyFileToOutgoingAttachmentfolder(DocumentProperties, Filename);
      InsertAdditionalDocumentReference(Filename);
    END;

    LOCAL PROCEDURE CheckAddAndCopyAttachment2@1100285302(DocumentRelation@1100285303 : Record 11012407);
    VAR
      DocumentProperties@1100285301 : Record 11012746;
      Filename@1100285302 : Text;
    BEGIN

      IF NOT DocumentProperties.GET(DocumentRelation."Related Document No.") THEN
         EXIT;

      IF DocumentProperties.File = '' THEN
         EXIT;

      IF NOT CheckIfFileExistsAndCorrectFilename(DocumentProperties, Filename) THEN
         EXIT;

      IF CheckIfOutgoingAttachmentExists(DocumentProperties, Filename) THEN BEGIN
         InsertAdditionalDocumentReference(Filename);
         EXIT;
      END;

      CopyFileToOutgoingAttachmentfolder(DocumentProperties, Filename);
      InsertAdditionalDocumentReference(Filename);
    END;

    LOCAL PROCEDURE CheckIfFileExistsAndCorrectFilename@1100285312(DocumentProperties@1100285302 : Record 11012746;VAR NewFilename@1100285301 : Text) : Boolean;
    VAR
      ExternalDocumentMgmt@1100285304 : Codeunit 11012403;
      SalesReceivablesSetup@1100285303 : Record 311;
    BEGIN

      IF NOT FILE.EXISTS(ExternalDocumentMgmt.FolderName(DocumentProperties."Document Type",'') + DocumentProperties.File) THEN
         EXIT(FALSE);

      NewFilename := DELCHR(DocumentProperties.File, '=', DELCHR(DocumentProperties.File, '=', '01234567890.-_ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));

      EXIT(TRUE);
    END;

    PROCEDURE CheckIfOutgoingAttachmentExists@1100285303(DocumentProperties@1100285302 : Record 11012746;VAR NewFilename@1100285301 : Text) : Boolean;
    VAR
      SalesReceivablesSetup@1100285300 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;

      IF FILE.EXISTS(SalesReceivablesSetup."Export Path Svefaktura Attach." + '\' + NewFilename) THEN
         EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CopyFileToOutgoingAttachmentfolder@1100285310(DocumentProperties@1100285304 : Record 11012746;VAR NewFilename@1100285300 : Text);
    VAR
      ExternalDocumentMgmt@1100285110 : Codeunit 11012403;
      DocumentManagement@1100285108 : Codeunit 11012406;
      FileMgt@1100285107 : Codeunit 419;
      FileStorageType@1100285106 : ' ,File System on Premise,SharePoint Online,Azure File Storage,,,,,,,,PPT,DPTDUAL';
      StorageURI@1100285105 : Text;
      Dummy@1100285104 : Text;
      ShortFileName@1100285103 : Text;
      TargetStorageType@1100285102 : Option;
      TargetStorageURI@1100285101 : Text;
      ErrorMessage@1100285100 : Text;
      SalesReceivablesSetup@1100285109 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;

      IF GUIALLOWED THEN
      //  ExternalDocumentMgmt.MoveCopyFile(
      // //    SalesReceivablesSetup."Export Path Svefaktura Attach." + '\', //TargetDirectory
      // //    NewFilename,  //TargetFilename
      // //    ExternalDocumentMgmt.FolderName(DocumentProperties."Document Type",''), //SourceDirectory
      // //    DocumentProperties.File, //SourceFilename
      // //    TRUE) //CopyBln
      //    SalesReceivablesSetup."Export Path Svefaktura Attach." + '\', //TargetDirectory
      //    '', //TargetDocumentServiceDocumentSubdir
      //    ExternalDocumentMgmt.FolderName(DocumentProperties."Document Type",WORKDATE,''), //SourceDirectory
      //    DocumentProperties.File, //SourceFilename
      //    '', //SourceDocumentServiceURL
      //    TRUE, //CopyBln
      //    NewFilename,  //TargetFilename
      //    TargetDocumentServiceURL)
        BEGIN
          StorageURI := DocumentProperties.GetStorageURI;
          FileMgt.SplitFileAbsPathName(StorageURI,Dummy,ShortFileName);

          TargetStorageType := FileStorageType::"File System on Premise";
          TargetStorageURI := SalesReceivablesSetup."Export Path Svefaktura Attach." + '\' + NewFilename;

          DocumentManagement.PrepareDocumentRegistration(
            ShortFileName,DocumentProperties."Document Type",DocumentProperties."Creation Date",TargetStorageURI,TargetStorageType);
          IF DocumentManagement.CopyStorageContent(DocumentProperties."Storage Type",TargetStorageType, StorageURI, TargetStorageURI,ErrorMessage) THEN
            DocumentProperties.ValidateStorageURI(DocumentProperties."Storage Type",TargetStorageURI);
        END
      ELSE BEGIN
        FILE.COPY(ExternalDocumentMgmt.FolderName(DocumentProperties."Document Type",'') + DocumentProperties.File,
                   SalesReceivablesSetup."Export Path Svefaktura Attach." + '\' + NewFilename);
      END;
    END;

    LOCAL PROCEDURE InsertAdditionalDocumentReference@1100285311(Filename@1100285300 : Text);
    BEGIN

      gXMLWriter.AddElementAbs(2, 'AdditionalDocumentReference', '');
      //gXMLWriter.AddElementRelNS(1, 'cac:ID', Filename, gNScac);   //4PSSE.o SC006473
      gXMLWriter.AddElementRelNS(1, 'cac:ID', 'urn:sfti:documents:object:' + Filename, gNScac);   //4PSSE.n SC006473
      gXMLWriter.AddAttribute('identificationSchemeID', 'ATS');
      gXMLWriter.AddAttribute('identificationSchemeAgencyName', 'SFTI');
    END;

    [Integration]
    PROCEDURE AdjSalesInvoiceLineDescPublisher@1101285001(SalesInvoiceHeader@1101285000 : Record 112;SalesInvoiceLine@1101285002 : Record 113;VAR SalesInvoiceLineDescription@1101285001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitLines@1100285100(VAR SalesInvoiceHeader@1100285102 : Record 112;VAR SalesInvoiceLine@1100285100 : Record 113;VAR SalesInvoiceLineTEMP@1100285101 : Record 113);
    BEGIN
    END;

    BEGIN
    {
      IEI 2.0.1 ITERO.MH Minor adjustments
      161222 ITERO.WG Added document relations as attachments
      170320 ITERO.WG SC006473 Added text i attached document.
      170502 ITERO.WG SC006760 Svefaktura principle reference and ordernr kund
      170517 ITERO.WG SC006888 Svefaktura is created
      170522 ITERO.WG SC006913 Svefaktura permissions
      170621 ITERO.WG SC006963 Add extra information as Note with lines
      171003 ITERO.WG SC006801 Add correct e-mail address
      171117 ITERO.WG SRFC-038 Devide referens
      180206 ITERO.WG SRFC-051 Pre-assigned invoicenumber in Note
      180212 ITERO.WG SRFC-037 Ordernr customer in Documentreference
      190110 ORANGO.DL Call #21226 and #22139 - MF-code missing in invoice
      190122 ORANGO.WG Fix for SE Setup Key
      190213 ORANGO.DL upgrade #21226 and #22139 - MF-code missing in invoice to 015
      190308 ORANGO.DL Support #23357 VAT/COC id missing in Svefaktura and validation errors in sfti.se/validator
      190805 ORANGO.DL SRSE-1001, ConstructVAT
      190808 ORANGO.DL SRFC-1000, added publisher to resort the lines
    }
    END.
  }
}

