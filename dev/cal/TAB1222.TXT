OBJECT Table 1222 Data Exch. Def
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW113.00,NAVDK;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF Name = '' THEN
                 Name := Code;
             END;

    OnDelete=VAR
               DataExchLineDef@1000 : Record 1227;
             BEGIN
               DataExchLineDef.SETRANGE("Data Exch. Def Code",Code);
               DataExchLineDef.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Data Exch. Def;
               NOR=Datautveksl.def.;
               SVE=Dataintegrationsdefinition];
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text100       ;CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn] }
    { 3   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              NOR=Type;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Bank Statement Import,Payment Export,Payroll Import,Generic Import,Positive Pay Export,Generic Export,FIK Import;
                                                                    NOR=Bankkontoutdragsimport,Betalingseksport,L›nnsimport,Generisk import,Eksport for Positive Pay,Generisk rapport;
                                                                    SVE=Bankutdragsimport,Betalningsexport,L”nelisteimport,L”nelisteexport,Allm„n import,Export av Positive Pay,Allm„n export,FIK import];
                                                   OptionString=Bank Statement Import,Payment Export,Payroll Import,Generic Import,Positive Pay Export,Generic Export,FIK Import }
    { 4   ;   ;Reading/Writing XMLport;Integer    ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(XMLport));
                                                   CaptionML=[ENU=Reading/Writing XMLport;
                                                              NOR=XMLport for lesing/skriving;
                                                              SVE=XML-port f”r l„sning/skrivning] }
    { 5   ;   ;Header Lines        ;Integer       ;CaptionML=[ENU=Header Lines;
                                                              NOR=Topptekstlinjer;
                                                              SVE=Rubrikrader] }
    { 8   ;   ;Header Tag          ;Text250       ;CaptionML=[ENU=Header Tag;
                                                              NOR=Topptekstkode;
                                                              SVE=Rubriktagg] }
    { 9   ;   ;Footer Tag          ;Text250       ;CaptionML=[ENU=Footer Tag;
                                                              NOR=Bunntekstkode;
                                                              SVE=Sidfotstagg] }
    { 10  ;   ;Column Separator    ;Option        ;InitValue=Comma;
                                                   CaptionML=[ENU=Column Separator;
                                                              NOR=Kolonneskilletegn;
                                                              SVE=Kolumnavgr„nsare];
                                                   OptionCaptionML=[ENU=,Tab,Semicolon,Comma,Space,Custom;
                                                                    NOR=,Tabulator,Semikolon,Komma,Mellomrom,Egendefinert;
                                                                    SVE=,Tabb,Semikolon,Komma,Blanksteg,Anpassad];
                                                   OptionString=,Tab,Semicolon,Comma,Space,Custom }
    { 11  ;   ;File Encoding       ;Option        ;InitValue=WINDOWS;
                                                   CaptionML=[ENU=File Encoding;
                                                              NOR=Filkoding;
                                                              SVE=Filkodning];
                                                   OptionCaptionML=[ENU=MS-DOS,UTF-8,UTF-16,WINDOWS;
                                                                    NOR=MS-DOS,UTF-8,UTF-16,WINDOWS;
                                                                    SVE=MS-DOS,UTF-8,UTF-16,WINDOWS];
                                                   OptionString=MS-DOS,UTF-8,UTF-16,WINDOWS }
    { 13  ;   ;File Type           ;Option        ;CaptionML=[ENU=File Type;
                                                              NOR=Filtype;
                                                              SVE=Filtyp];
                                                   OptionCaptionML=[ENU=Xml,Variable Text,Fixed Text,Json;
                                                                    NOR=XML,Variabel tekst,Fast tekst,Json;
                                                                    SVE=Xml,Variabeltext,Fast text,Json];
                                                   OptionString=Xml,Variable Text,Fixed Text,Json }
    { 14  ;   ;Ext. Data Handling Codeunit;Integer;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=Ext. Data Handling Codeunit;
                                                              NOR=Codeunit for ekstern datah†ndtering;
                                                              SVE=Kodenhet f”r hantering av ext. data] }
    { 15  ;   ;Reading/Writing Codeunit;Integer   ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=Reading/Writing Codeunit;
                                                              NOR=Codeunit for lesing/skriving;
                                                              SVE=Kodenhet f”r l„sning/skrivning] }
    { 16  ;   ;Validation Codeunit ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=Validation Codeunit;
                                                              NOR=Codeunit for validering;
                                                              SVE=Kodenhet f”r validering] }
    { 17  ;   ;Data Handling Codeunit;Integer     ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=Data Handling Codeunit;
                                                              NOR=Codeunit for datah†ndtering;
                                                              SVE=Kodenhet f”r datahantering] }
    { 18  ;   ;User Feedback Codeunit;Integer     ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=User Feedback Codeunit;
                                                              NOR=Codeunit for brukertilbakemelding;
                                                              SVE=Kodenhet f”r anv„ndarfeedback] }
    { 19  ;   ;Custom Column Separator;Text10     ;CaptionML=[ENU=Custom Column Separator;
                                                              NOR=Egendefinert kolonneskilletegn] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Type                                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ColumnSeparatorMissingErr@1001 : TextConst 'ENU=Column separator is missing in the definition.;NOR=Kolonneskilletegn mangler i definisjonen.;SVE=En kolumnavgr„nsare saknas i definitionen.';

    [External]
    PROCEDURE InsertRec@1(NewCode@1000 : Code[20];NewName@1001 : Text[100];NewType@1002 : Option;ProcessingXMLport@1003 : Integer;HeaderCount@1004 : Integer;HeaderTag@1005 : Text[250];FooterTag@1006 : Text[250]);
    BEGIN
      INIT;
      VALIDATE(Code,NewCode);
      VALIDATE(Name,NewName);
      VALIDATE(Type,NewType);
      VALIDATE("Reading/Writing XMLport",ProcessingXMLport);
      VALIDATE("Header Lines",HeaderCount);
      VALIDATE("Header Tag",HeaderTag);
      VALIDATE("Footer Tag",FooterTag);
      INSERT;
    END;

    [External]
    PROCEDURE InsertRecForExport@4(NewCode@1000 : Code[20];NewName@1001 : Text[100];NewType@1002 : Option;ProcessingXMLport@1003 : Integer;FileType@1004 : Option);
    BEGIN
      INIT;
      VALIDATE(Code,NewCode);
      VALIDATE(Name,NewName);
      "File Type" := FileType;
      Type := NewType;
      VALIDATE("File Type",FileType);
      VALIDATE(Type,NewType);

      VALIDATE("Reading/Writing XMLport",ProcessingXMLport);
      INSERT;
    END;

    [External]
    PROCEDURE ColumnSeparatorChar@3() : Text;
    VAR
      SeparatorChar@1000 : Text;
    BEGIN
      CASE "Column Separator" OF
        "Column Separator"::Tab:
          BEGIN
            SeparatorChar[1] := 9;
            EXIT(SeparatorChar);
          END;
        "Column Separator"::Semicolon:
          EXIT(';');
        "Column Separator"::Comma:
          EXIT(',');
        "Column Separator"::Space:
          EXIT(' ');
        "Column Separator"::Custom:
          BEGIN
            IF "Custom Column Separator" <> '' THEN
              EXIT("Custom Column Separator");
            ERROR(ColumnSeparatorMissingErr);
          END;
        ELSE
          ERROR(ColumnSeparatorMissingErr)
      END
    END;

    [External]
    PROCEDURE CheckEnableDisableIsNonXMLFileType@9() : Boolean;
    BEGIN
      EXIT(NOT ("File Type" IN ["File Type"::Xml,"File Type"::Json]))
    END;

    [External]
    PROCEDURE CheckEnableDisableIsImportType@18() : Boolean;
    BEGIN
      IF Type IN [Type::"Payment Export",Type::"Positive Pay Export"] THEN
        EXIT(FALSE);
      EXIT(NOT ("File Type" IN ["File Type"::Xml,"File Type"::Json]))
    END;

    [External]
    PROCEDURE CheckEnableDisableIsBankStatementImportType@15() : Boolean;
    BEGIN
      EXIT(Type = Type::"Bank Statement Import");
    END;

    [External]
    PROCEDURE CheckEnableDisableDelimitedFileType@8() : Boolean;
    BEGIN
      EXIT("File Type" = "File Type"::"Variable Text");
    END;

    [External]
    PROCEDURE PositivePayUpdateCodeunits@2() : Boolean;
    BEGIN
      IF Type = Type::"Positive Pay Export" THEN BEGIN
        "Validation Codeunit" := CODEUNIT::"Exp. Validation Pos. Pay";
        "Reading/Writing Codeunit" := CODEUNIT::"Exp. Writing Pos. Pay";
        "Reading/Writing XMLport" := XMLPORT::"Export Generic Fixed Width";
        "Ext. Data Handling Codeunit" := CODEUNIT::"Exp. External Data Pos. Pay";
        "User Feedback Codeunit" := CODEUNIT::"Exp. User Feedback Pos. Pay";
      END ELSE BEGIN
        "Validation Codeunit" := 0;
        "Reading/Writing Codeunit" := 0;
        "Reading/Writing XMLport" := 0;
        "Ext. Data Handling Codeunit" := 0;
        "User Feedback Codeunit" := 0;
      END;
      EXIT(Type = Type::"Positive Pay Export");
    END;

    [External]
    PROCEDURE ProcessDataExchange@6(VAR DataExch@1000 : Record 1220);
    VAR
      DataExchLineDef@1003 : Record 1227;
      DataExchMapping@1002 : Record 1224;
    BEGIN
      IF "Data Handling Codeunit" <> 0 THEN
        CODEUNIT.RUN("Data Handling Codeunit",DataExch);

      DataExchLineDef.SETRANGE("Data Exch. Def Code",Code);
      DataExchLineDef.SETRANGE("Parent Code",'');
      DataExchLineDef.FINDSET;

      REPEAT
        DataExchMapping.SETRANGE("Data Exch. Def Code",DataExch."Data Exch. Def Code");
        DataExchMapping.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);
        DataExchMapping.FINDSET;

        REPEAT
          IF DataExchMapping."Pre-Mapping Codeunit" <> 0 THEN
            CODEUNIT.RUN(DataExchMapping."Pre-Mapping Codeunit",DataExch);

          IF DataExchMapping."Mapping Codeunit" <> 0 THEN
            CODEUNIT.RUN(DataExchMapping."Mapping Codeunit",DataExch);

          IF DataExchMapping."Post-Mapping Codeunit" <> 0 THEN
            CODEUNIT.RUN(DataExchMapping."Post-Mapping Codeunit",DataExch);
        UNTIL DataExchMapping.NEXT = 0;
      UNTIL DataExchLineDef.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

