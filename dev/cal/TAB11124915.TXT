OBJECT Table 11124915 Additional Info (Request WO)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               "Collective List No." := '';
               "Plant Order No" := '';
               "Purchase Order No" := '';
             END;

    CaptionML=ENU=Additional Information (Request Work Order);
  }
  FIELDS
  {
    { 10  ;   ;Work Order No.      ;Code20        ;TableRelation="Work Order";
                                                   CaptionML=[ENU=Work Order No.;
                                                              SVE=Serviceordernr];
                                                   Editable=No }
    { 11  ;   ;Work Order Description;Text50      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Work Order".Description WHERE (No.=FIELD(Work Order No.)));
                                                   CaptionML=ENU=Work Order Description;
                                                   Editable=No }
    { 12  ;   ;Resource No.        ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Work Order"."Resource No." WHERE (No.=FIELD(Work Order No.)));
                                                   CaptionML=[ENU=Resource No.;
                                                              NOR=Ressursnr.;
                                                              SVE=Resursnr];
                                                   Editable=No }
    { 13  ;   ;Starting Date/Time  ;DateTime      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Work Order"."Starting Date/Time" WHERE (No.=FIELD(Work Order No.)));
                                                   CaptionML=[ENU=Starting Date/Time;
                                                              SVE=Startdatum/tid];
                                                   Editable=No }
    { 14  ;   ;Ending Date/Time    ;DateTime      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Work Order"."Ending Date/Time" WHERE (No.=FIELD(Work Order No.)));
                                                   CaptionML=[ENU=Ending Date/Time;
                                                              SVE=Slutdatum/tid];
                                                   Editable=No }
    { 20  ;   ;Request No.         ;Code20        ;TableRelation="Resource Request";
                                                   CaptionML=[ENU=Request No.;
                                                              NOR=Foresp›rselnr.;
                                                              SVE=Nr f”r f”rfr†gan];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 21  ;   ;Request Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource Request".Description WHERE (No.=FIELD(Request No.)));
                                                   CaptionML=[ENU=Request Description;
                                                              SVE=F”rfr†gan beskrivning];
                                                   Editable=No }
    { 22  ;   ;Request Type        ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource Request".Type WHERE (No.=FIELD(Request No.)));
                                                   CaptionML=ENU=Request Type;
                                                   OptionCaptionML=ENU=Task,Transport,,Crane Rent;
                                                   OptionString=Task,Transport,,CraneRent;
                                                   Editable=No }
    { 23  ;   ;Source Type         ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource Request"."Source Type" WHERE (No.=FIELD(Request No.)));
                                                   CaptionML=[ENU=Source Type;
                                                              NOR=Kildetype;
                                                              SVE=Ursprungstyp];
                                                   OptionCaptionML=ENU=Project,Service Order,Customer;
                                                   OptionString=Project,ServiceOrder,Customer;
                                                   Editable=No }
    { 24  ;   ;Source No.          ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource Request"."Source No." WHERE (No.=FIELD(Request No.)));
                                                   TableRelation=IF (Source Type=CONST(Project)) Job
                                                                 ELSE IF (Source Type=CONST(ServiceOrder)) "Service Order"
                                                                 ELSE IF (Source Type=CONST(Customer)) Customer;
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Source No.;
                                                              NOR=Kildenr.;
                                                              SVE=Ursprungsnr];
                                                   Editable=No }
    { 25  ;   ;Request Status      ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Resource Request".Status WHERE (No.=FIELD(Request No.)));
                                                   CaptionML=ENU=Request Status;
                                                   OptionCaptionML=ENU=Open,,,,,,,,,,Finished;
                                                   OptionString=Open,,,,,,,,,,Finished;
                                                   Editable=No }
    { 100 ;   ;Address             ;Text100       ;OnValidate=BEGIN
                                                                CALCFIELDS("Request Type");
                                                                IF "Request Type" = "Request Type"::Transport THEN
                                                                  TESTFIELD(Address, '');
                                                              END;

                                                   CaptionML=[ENU=Address;
                                                              NOR=Adresse;
                                                              SVE=Adress] }
    { 101 ;   ;Address 2           ;Text50        ;OnValidate=BEGIN
                                                                CALCFIELDS("Request Type");
                                                                IF "Request Type" = "Request Type"::Transport THEN
                                                                  TESTFIELD("Address 2", '');
                                                              END;

                                                   CaptionML=[ENU=Address 2;
                                                              NOR=Adresse 2;
                                                              SVE=Adress 2] }
    { 102 ;   ;Post Code           ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=VAR
                                                                PostCode@1100529000 : Record 225;
                                                                DummyCode@1100529002 : Code[10];
                                                                Dummy@1100529001 : Text;
                                                              BEGIN
                                                                CALCFIELDS("Request Type");
                                                                IF "Request Type" = "Request Type"::Transport THEN
                                                                  TESTFIELD("Post Code", '');
                                                                PostCode.ValidatePostCode(City,"Post Code",Dummy,DummyCode,(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              NOR=Postnr;
                                                              SVE=Postnr] }
    { 103 ;   ;City                ;Text30        ;TableRelation="Post Code".City;
                                                   OnValidate=VAR
                                                                PostCode@1100529000 : Record 225;
                                                                DummyCode@1100529002 : Code[10];
                                                                Dummy@1100529001 : Text;
                                                              BEGIN
                                                                CALCFIELDS("Request Type");
                                                                IF "Request Type" = "Request Type"::Transport THEN
                                                                  TESTFIELD(City, '');
                                                                PostCode.ValidateCity(City,"Post Code",Dummy,DummyCode,(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              NOR=Sted;
                                                              SVE=Ort] }
    { 110 ;   ;Load Address        ;Text100       ;OnValidate=BEGIN
                                                                CALCFIELDS("Request Type");
                                                                IF "Request Type" <> "Request Type"::Transport THEN
                                                                  TESTFIELD("Load Address", '');
                                                              END;

                                                   CaptionML=ENU=Load Address }
    { 111 ;   ;Load Address 2      ;Text50        ;OnValidate=BEGIN
                                                                CALCFIELDS("Request Type");
                                                                IF "Request Type" <> "Request Type"::Transport THEN
                                                                  TESTFIELD("Load Address 2", '');
                                                              END;

                                                   CaptionML=ENU=Load Address 2 }
    { 112 ;   ;Load Address Post Code;Code20      ;TableRelation="Post Code";
                                                   OnValidate=VAR
                                                                PostCode@1100529000 : Record 225;
                                                                DummyCode@1100529002 : Code[10];
                                                                Dummy@1100529001 : Text;
                                                              BEGIN
                                                                CALCFIELDS("Request Type");
                                                                IF "Request Type" <> "Request Type"::Transport THEN
                                                                  TESTFIELD("Load Address Post Code", '');
                                                                PostCode.ValidatePostCode("Load Address City","Load Address Post Code",Dummy,DummyCode,(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Load Address Post Code }
    { 113 ;   ;Load Address City   ;Text30        ;TableRelation="Post Code".City;
                                                   OnValidate=VAR
                                                                PostCode@1100529000 : Record 225;
                                                                DummyCode@1100529002 : Code[10];
                                                                Dummy@1100529001 : Text;
                                                              BEGIN
                                                                CALCFIELDS("Request Type");
                                                                IF "Request Type" <> "Request Type"::Transport THEN
                                                                  TESTFIELD("Load Address City", '');
                                                                PostCode.ValidateCity("Load Address City","Load Address Post Code",Dummy,DummyCode,(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Load Address City }
    { 120 ;   ;Unload Address      ;Text100       ;OnValidate=BEGIN
                                                                CALCFIELDS("Request Type");
                                                                IF "Request Type" <> "Request Type"::Transport THEN
                                                                  TESTFIELD("Unload Address", '');
                                                              END;

                                                   CaptionML=ENU=Unload Address }
    { 121 ;   ;Unload Address 2    ;Text50        ;OnValidate=BEGIN
                                                                CALCFIELDS("Request Type");
                                                                IF "Request Type" <> "Request Type"::Transport THEN
                                                                  TESTFIELD("Unload Address 2", '');
                                                              END;

                                                   CaptionML=ENU=Unload Address 2 }
    { 122 ;   ;Unload Address Post Code;Code20    ;TableRelation="Post Code";
                                                   OnValidate=VAR
                                                                PostCode@1100529000 : Record 225;
                                                                DummyCode@1100529002 : Code[10];
                                                                Dummy@1100529001 : Text;
                                                              BEGIN
                                                                CALCFIELDS("Request Type");
                                                                IF "Request Type" <> "Request Type"::Transport THEN
                                                                  TESTFIELD("Unload Address Post Code", '');
                                                                PostCode.ValidatePostCode("Unload Address City","Unload Address Post Code",Dummy,DummyCode,(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Unload Address Post Code }
    { 123 ;   ;Unload Address City ;Text30        ;TableRelation="Post Code".City;
                                                   OnValidate=VAR
                                                                PostCode@1100529000 : Record 225;
                                                                DummyCode@1100529002 : Code[10];
                                                                Dummy@1100529001 : Text;
                                                              BEGIN
                                                                CALCFIELDS("Request Type");
                                                                IF "Request Type" <> "Request Type"::Transport THEN
                                                                  TESTFIELD("Unload Address City", '');
                                                                PostCode.ValidateCity("Unload Address City","Unload Address Post Code",Dummy,DummyCode,(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Unload Address City }
    { 200 ;   ;Chargeable          ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                IF NOT Chargeable THEN BEGIN
                                                                 TESTFIELD("Agreement Type", "Agreement Type"::" ");
                                                                 TESTFIELD("Quantity Agreement", FALSE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Chargeable;
                                                              NOR=Belastbar;
                                                              SVE=Debiterbar] }
    { 210 ;   ;Planned Hours       ;Decimal       ;CaptionML=[ENU=Planned Hours;
                                                              NOR=Planlagte timer;
                                                              SVE=Planerade timmar];
                                                   DecimalPlaces=2:2;
                                                   Description=Planned Hours }
    { 215 ;   ;Actual Hours        ;Decimal       ;OnValidate=VAR
                                                                WorkOrder@1100527200 : Record 11229279;
                                                              BEGIN
                                                                IF WorkOrder.GET("Work Order No.") THEN
                                                                  WorkOrder.TESTFIELD("Hour Acc. Created", FALSE);
                                                              END;

                                                   CaptionML=[ENU=Actual Hours;
                                                              NOR=Reelle timer;
                                                              SVE=Verkliga timmar];
                                                   DecimalPlaces=2:2 }
    { 220 ;   ;Agreement Type      ;Option        ;OnValidate=BEGIN
                                                                IF "Agreement Type" <> "Agreement Type"::" " THEN
                                                                  TESTFIELD(Chargeable, TRUE);
                                                                IF "Agreement Type" <> "Agreement Type"::Rate THEN
                                                                  "Special Rate" := 0;
                                                                IF "Agreement Type" <> "Agreement Type"::Discount THEN
                                                                  "Special Discount %" := 0;
                                                                IF "Agreement Type" <> "Agreement Type"::Amount THEN
                                                                  "Fixed Amount" := 0;
                                                              END;

                                                   CaptionML=ENU=Agreement Type;
                                                   OptionCaptionML=ENU=" ,Rate,Discount,,Amount";
                                                   OptionString=[ ,Rate,Discount,,Amount] }
    { 225 ;   ;Quantity Agreement  ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT "Quantity Agreement" THEN
                                                                  "Fixed Quantity":= 0
                                                                ELSE BEGIN
                                                                  TESTFIELD(Chargeable, TRUE);
                                                                  IF "Quantity Agreement" <> xRec."Quantity Agreement" THEN
                                                                    "Fixed Quantity":= "Planned Hours";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Quantity Agreement }
    { 230 ;   ;Fixed Quantity      ;Decimal       ;OnValidate=BEGIN
                                                                IF "Fixed Quantity" <> 0 THEN
                                                                  TESTFIELD("Quantity Agreement", TRUE);
                                                              END;

                                                   CaptionML=ENU=Fixed Quantity;
                                                   DecimalPlaces=2:2 }
    { 240 ;   ;Special Rate        ;Decimal       ;OnValidate=BEGIN
                                                                IF "Special Rate" <> 0 THEN
                                                                 TESTFIELD("Agreement Type", "Agreement Type"::Rate);
                                                              END;

                                                   CaptionML=ENU=Special Rate;
                                                   AutoFormatType=2 }
    { 250 ;   ;Special Discount %  ;Decimal       ;OnValidate=BEGIN
                                                                IF "Special Discount %" <> 0 THEN
                                                                 TESTFIELD("Agreement Type", "Agreement Type"::Discount);
                                                              END;

                                                   CaptionML=ENU=Special Discount %;
                                                   MaxValue=100 }
    { 260 ;   ;Fixed Amount        ;Decimal       ;OnValidate=BEGIN
                                                                IF "Fixed Amount" <> 0 THEN
                                                                 TESTFIELD("Agreement Type", "Agreement Type"::Amount);
                                                              END;

                                                   CaptionML=[ENU=Fixed Amount;
                                                              NOR=Fast bel›p;
                                                              SVE=Fast belopp];
                                                   AutoFormatType=1 }
    { 290 ;   ;Calulate Pause      ;Boolean       ;OnValidate=VAR
                                                                WorkOrder@1100528300 : Record 11229279;
                                                              BEGIN
                                                                IF WorkOrder.GET("Work Order No.") THEN
                                                                  "Planned Hours" := CalculateNumberOfPlannedHours(WorkOrder, "Calulate Pause", FALSE, WorkOrder);
                                                              END;

                                                   CaptionML=ENU=Calulate Pause }
    { 300 ;   ;Collective List No. ;Code20        ;TableRelation="Resource Req. Collective-List";
                                                   CaptionML=[ENU=Collective List No.;
                                                              NOR=Samlingsfaktura nr.;
                                                              SVE=Samlingsfaktura nr.];
                                                   Editable=No }
    { 310 ;   ;Plant Order No      ;Code20        ;TableRelation="Plant Order";
                                                   OnLookup=BEGIN
                                                              ShowPlantOrder;
                                                            END;

                                                   CaptionML=[ENU=Plant Order No.;
                                                              NOR=Maskinordrenummer;
                                                              SVE=Maskinordernummer];
                                                   Description=Subcontracting;
                                                   Editable=No }
    { 320 ;   ;Purchase Order No   ;Code20        ;TableRelation="Plant Order";
                                                   CaptionML=[ENU=Purchase Order No.;
                                                              NOR=Innkj›psordrenr.;
                                                              SVE=Ink”psordernr];
                                                   Description=Subcontracting / External Plant;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Work Order No.                          ;Clustered=Yes }
    {    ;Request No.,Work Order No.               }
    {    ;Collective List No.,Request No.          }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ResourcePlanningSetup@1100528300 : Record 11124900;

    PROCEDURE GetResourceName@1100529002() : Text;
    VAR
      Resource@1100529000 : Record 11229278;
    BEGIN
      CALCFIELDS("Resource No.");
      IF "Resource No." <> '' THEN BEGIN
        IF Resource.GET("Resource No.") THEN
          EXIT(Resource.Name);
      END;
      EXIT('');
    END;

    PROCEDURE GetResourceGroupNo@1100529000() : Code[20];
    VAR
      WorkOrder@1100529000 : Record 11229279;
    BEGIN
      IF WorkOrder.GET("Work Order No.") THEN
        EXIT(WorkOrder."Resource Group No.");
      EXIT('');
    END;

    PROCEDURE GetResourceGroupName@1100529006() : Text;
    VAR
      WorkOrder@1100529000 : Record 11229279;
    BEGIN
      IF WorkOrder.GET("Work Order No.") THEN BEGIN
        WorkOrder.CALCFIELDS("Resource Group Name");
        EXIT(WorkOrder."Resource Group Name");
      END;
      EXIT('');
    END;

    PROCEDURE UpdateAdditionalInfoRequestFromWorkorder@1100529003(UpdateMode@1100529000 : Code[1];WorkOrder@1100529003 : Record 11229279;xRecWorkOrder@1100529002 : Record 11229279);
    VAR
      AdditionalInfoRequestWO@1100529001 : Record 11124915;
      ResourceRequest@1100529004 : Record 11124901;
    BEGIN
      IF UpdateMode = 'M' THEN BEGIN
        IF NOT AdditionalInfoRequestWO.GET(WorkOrder."No.") THEN
          UpdateMode := 'I'
        ELSE BEGIN
          IF (WorkOrder."Source Type" <> WorkOrder."Source Type"::Request) OR (WorkOrder."Source No." = '') THEN
            UpdateMode := 'D';
        END;
      END;
      CASE UpdateMode OF
        'I':
          BEGIN
            IF (WorkOrder."Source Type" = WorkOrder."Source Type"::Request) AND (WorkOrder."Source No." <> '') THEN BEGIN
              AdditionalInfoRequestWO.INIT;
              AdditionalInfoRequestWO."Work Order No." := WorkOrder."No.";
              AdditionalInfoRequestWO.VALIDATE("Request No.", WorkOrder."Source No.");
              ResourceRequest.GET(AdditionalInfoRequestWO."Request No.");
              IF ResourceRequest.Type <> ResourceRequest.Type::Transport THEN BEGIN
                AdditionalInfoRequestWO.Address := ResourceRequest.Address;
                AdditionalInfoRequestWO."Address 2" := ResourceRequest."Address 2";
                AdditionalInfoRequestWO."Post Code" := ResourceRequest."Post Code";
                AdditionalInfoRequestWO.City := ResourceRequest.City;
              END ELSE BEGIN
                AdditionalInfoRequestWO."Load Address" := ResourceRequest."Load Address";
                AdditionalInfoRequestWO."Load Address 2" := ResourceRequest."Load Address 2";
                AdditionalInfoRequestWO."Load Address Post Code" := ResourceRequest."Load Address Post Code";
                AdditionalInfoRequestWO."Load Address City" := ResourceRequest."Load Address City";
                AdditionalInfoRequestWO."Unload Address" := ResourceRequest."Unload Address";
                AdditionalInfoRequestWO."Unload Address 2" := ResourceRequest."Unload Address 2";
                AdditionalInfoRequestWO."Unload Address Post Code" := ResourceRequest."Unload Address Post Code";
                AdditionalInfoRequestWO."Unload Address City" := ResourceRequest."Unload Address City";
              END;
              AdditionalInfoRequestWO.ValidateCalcPause(WorkOrder);
              AdditionalInfoRequestWO.INSERT(TRUE);
              AdditionalInfoRequestWO."Planned Hours" := CalculateNumberOfPlannedHours(WorkOrder, AdditionalInfoRequestWO."Calulate Pause", FALSE, WorkOrder);
              AdditionalInfoRequestWO.MODIFY;
            END;
          END;
        'M':
          BEGIN
            AdditionalInfoRequestWO.GET(WorkOrder."No.");
            IF (WorkOrder."Starting Date/Time" <> xRecWorkOrder."Starting Date/Time") OR
               (WorkOrder."Ending Date/Time" <> xRecWorkOrder."Ending Date/Time")  OR
               (WorkOrder."Resource No." <> xRecWorkOrder."Resource No.")
            THEN BEGIN
              AdditionalInfoRequestWO."Planned Hours" := CalculateNumberOfPlannedHours(WorkOrder, AdditionalInfoRequestWO."Calulate Pause", FALSE, WorkOrder);
              AdditionalInfoRequestWO.MODIFY(TRUE);
            END;
          END;
        'D':
          BEGIN
            IF AdditionalInfoRequestWO.GET(WorkOrder."No.") THEN
              AdditionalInfoRequestWO.DELETE(TRUE);
          END;
      END;
    END;

    PROCEDURE CalculateNumberOfPlannedHours@1100529004(WorkOrder@1100529001 : Record 11229279;CalculatePause@1100528308 : Boolean;UseCurrWO@1100528310 : Boolean;CurrWorkOrder@1100528311 : Record 11229279) : Decimal;
    VAR
      WorkOrder2@1100528307 : Record 11229279;
      TmpWorkOrder@1100528309 : TEMPORARY Record 11229279;
      DateTimePauseFrom@1100528301 : DateTime;
      DateTimePauseUntil@1100528300 : DateTime;
      StartDate@1100528304 : Date;
      EndDate@1100528305 : Date;
      PlannedHours@1100528302 : Decimal;
      PauseHours@1100528303 : Decimal;
      ResourceNo@1100528306 : Code[20];
    BEGIN
      //* Starting point: Workorder per day
      IF (WorkOrder."Starting Date/Time" = 0DT) OR (WorkOrder."Ending Date/Time" = 0DT) OR (WorkOrder."Ending Date/Time" <= WorkOrder."Starting Date/Time") THEN
        EXIT(0);

      IF CalculatePause THEN BEGIN
        CASE WorkOrder."Resource Type" OF
          WorkOrder."Resource Type"::Employee,
          WorkOrder."Resource Type"::Subcontractor:
            IF (WorkOrder."Resource No." <> '' ) THEN
              ResourceNo := WorkOrder."Resource No.";
          WorkOrder."Resource Type"::Plant:
            BEGIN
              IF (WorkOrder."Resource No." <> '' ) THEN
                ResourceNo := WorkOrder."Resource No.";
              WorkOrder2.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
              WorkOrder2.SETRANGE("Source Company", COMPANYNAME);
              WorkOrder2.SETRANGE("Source Type", WorkOrder."Source Type"::Request);
              WorkOrder2.SETRANGE("Source No.", WorkOrder."Source No.");
              IF WorkOrder2.FINDSET THEN BEGIN
                REPEAT
                  TmpWorkOrder := WorkOrder2;
                  IF UseCurrWO AND (CurrWorkOrder."No." = WorkOrder2."No.") AND (CurrWorkOrder."Source No." = WorkOrder."Source No.") THEN
                    TmpWorkOrder := CurrWorkOrder;
                  IF (TmpWorkOrder."Operates Plant (WO)" = WorkOrder."No.") AND
                      (TmpWorkOrder."Resource Type" = WorkOrder."Resource Type"::Employee) AND (TmpWorkOrder."Resource No." <> '')
                  THEN
                    TmpWorkOrder.INSERT;
                UNTIL WorkOrder2.NEXT = 0;
                TmpWorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
                IF TmpWorkOrder.FINDFIRST THEN
                  ResourceNo := TmpWorkOrder."Resource No.";
              END;
            END;
        END;
        IF ResourceNo <> '' THEN BEGIN
          StartDate := DT2DATE(WorkOrder."Starting Date/Time");
          EndDate := DT2DATE(WorkOrder."Ending Date/Time"-1);
          EmployeePauseTimes(ResourceNo, StartDate, DateTimePauseFrom, DateTimePauseUntil);
          PauseHours := CalculatePauseHours(WorkOrder."Starting Date/Time", WorkOrder."Ending Date/Time", DateTimePauseFrom, DateTimePauseUntil);
          IF (PauseHours <= 0) AND (EndDate = StartDate + 1) THEN BEGIN
            EmployeePauseTimes(ResourceNo, EndDate, DateTimePauseFrom, DateTimePauseUntil);
            PauseHours := CalculatePauseHours(WorkOrder."Starting Date/Time", WorkOrder."Ending Date/Time", DateTimePauseFrom, DateTimePauseUntil);
          END;
        END
      END;

      PlannedHours := (WorkOrder."Ending Date/Time" - WorkOrder."Starting Date/Time") / 3600000;
      PlannedHours := ROUND(PlannedHours - PauseHours, 0.01);
      IF PlannedHours > 0 THEN
        EXIT(PlannedHours);
      EXIT(0);
    END;

    LOCAL PROCEDURE EmployeePauseTimes@1100528300(ResourceNo@1100529006 : Code[20];ReferenceDate@1100528301 : Date;VAR DateTimePauseFrom@1100528302 : DateTime;VAR DateTimePauseUntil@1100528303 : DateTime);
    VAR
      Resource@1100528300 : Record 11229278;
      EmployeeTimeTable@1100529000 : Record 11012923;
      CompanyInformation@1100529100 : Record 79;
      BaseCalendar@1100529101 : Record 11072014;
      PauseFrom@1100529002 : Time;
      PauseUntil@1100529003 : Time;
    BEGIN
      DateTimePauseFrom := 0DT;
      DateTimePauseUntil := 0DT;
      IF (ResourceNo = '') OR (ReferenceDate = 0D) THEN
        EXIT;
      IF NOT Resource.GET(ResourceNo) THEN
        EXIT;
      IF (Resource."Source No." = '') OR (Resource.Company <> COMPANYNAME) THEN
        EXIT;

      EmployeeTimeTable.SETRANGE("Employee No.", Resource."Source No.");
      EmployeeTimeTable.SETFILTER("Effective Date", '<=%1', ReferenceDate);
      IF EmployeeTimeTable.FINDLAST THEN BEGIN
        CASE DATE2DWY(ReferenceDate, 1) OF
          1:
            BEGIN
              PauseFrom := EmployeeTimeTable."Monday Pause From";
              PauseUntil := EmployeeTimeTable."Monday Pause Until";
            END;
          2:
            BEGIN
              PauseFrom := EmployeeTimeTable."Tuesday Pause From";
              PauseUntil := EmployeeTimeTable."Tuesday Pause Until";
            END;
          3:
            BEGIN
              PauseFrom := EmployeeTimeTable."Wednesday Pause From";
              PauseUntil := EmployeeTimeTable."Wednesday Pause Until";
            END;
          4:
            BEGIN
              PauseFrom := EmployeeTimeTable."Thursday Pause From";
              PauseUntil := EmployeeTimeTable."Thursday Pause Until";
            END;
          5:
            BEGIN
              PauseFrom := EmployeeTimeTable."Friday Pause From";
              PauseUntil := EmployeeTimeTable."Friday Pause Until";
            END;
          6:
            BEGIN
              PauseFrom := EmployeeTimeTable."Saturday Pause From";
              PauseUntil := EmployeeTimeTable."Saturday Pause Until";
            END;
          7:
            BEGIN
              PauseFrom := EmployeeTimeTable."Sunday Pause From";
              PauseUntil := EmployeeTimeTable."Sunday Pause Until";
            END;
        END;
      END ELSE BEGIN
        CompanyInformation.GET;
        IF NOT BaseCalendar.GET(CompanyInformation."Base Calendar Code") THEN
          EXIT;
        CASE DATE2DWY(ReferenceDate, 1) OF
        1:
          BEGIN
            PauseFrom := BaseCalendar."Monday Pause From";
            PauseUntil := BaseCalendar."Monday Pause Until";
          END;
        2:
          BEGIN
            PauseFrom := BaseCalendar."Tuesday Pause From";
            PauseUntil := BaseCalendar."Tuesday Pause Until";
          END;
        3:
          BEGIN
            PauseFrom := BaseCalendar."Wednesday Pause From";
            PauseUntil := BaseCalendar."Wednesday Pause Until";
          END;
        4:
          BEGIN
            PauseFrom := BaseCalendar."Thursday Pause From";
            PauseUntil := BaseCalendar."Thursday Pause Until";
          END;
        5:
          BEGIN
            PauseFrom := BaseCalendar."Friday Pause From";
            PauseUntil := BaseCalendar."Friday Pause Until";
          END;
        6:
          BEGIN
            PauseFrom := BaseCalendar."Saturday Pause From";
            PauseUntil := BaseCalendar."Saturday Pause Until";
          END;
        7:
          BEGIN
            PauseFrom := BaseCalendar."Sunday Pause From";
            PauseUntil := BaseCalendar."Sunday Pause Until";
          END;
        END;
      END;
      IF (PauseFrom = 0T) OR (PauseUntil = 0T) THEN
        EXIT;
      DateTimePauseFrom := CREATEDATETIME(ReferenceDate, PauseFrom);
      DateTimePauseUntil := CREATEDATETIME(ReferenceDate, PauseUntil);
    END;

    LOCAL PROCEDURE CalculatePauseHours@1100528301(WorkDateTimeStart@1100528300 : DateTime;WorkDateTimeEnd@1100528301 : DateTime;PauseDateTimeStart@1100528302 : DateTime;PauseDateTimeEnd@1100528303 : DateTime) : Decimal;
    VAR
      PauseDateTimeFrom@1100528304 : DateTime;
      PauseDateTimeUntil@1100528305 : DateTime;
    BEGIN
      IF (PauseDateTimeEnd >= WorkDateTimeStart) AND (PauseDateTimeStart <= WorkDateTimeEnd) THEN BEGIN
        PauseDateTimeFrom := PauseDateTimeStart;
        IF PauseDateTimeFrom < WorkDateTimeStart THEN
          PauseDateTimeFrom := WorkDateTimeStart;
        PauseDateTimeUntil := PauseDateTimeEnd;
        IF PauseDateTimeUntil > WorkDateTimeEnd THEN
          PauseDateTimeUntil := WorkDateTimeEnd;
      END;
      IF (PauseDateTimeFrom = 0DT) OR (PauseDateTimeUntil = 0DT) OR (PauseDateTimeUntil <= PauseDateTimeFrom) THEN
        EXIT(0);
      EXIT(ROUND((PauseDateTimeUntil - PauseDateTimeFrom) / 3600000, 0.01));
    END;

    PROCEDURE GetResourceRate@1100529001() NewRate : Decimal;
    VAR
      WorkOrder@1100529007 : Record 11229279;
      Resource@1100529002 : Record 11229278;
      ResourceGroup@1100529009 : Record 11229384;
      SalesPriceReadOrderLine@1100529005 : Record 11020376;
      SearchRate@1100529001 : Codeunit 11012567;
      SalesPriceMgt@1100529003 : Codeunit 11012036;
      ReferenceDate@1100529000 : Date;
      PlantType@1100529006 : Code[20];
      PlantNo@1100529008 : Code[10];
      PlantCompany@1100529010 : Text;
      PriceFoundAt@1100529004 : Text;
    BEGIN
      IF "Work Order No." = '' THEN
        EXIT;
      IF NOT WorkOrder.GET("Work Order No.") THEN
        EXIT;
      IF WorkOrder."Resource No." = '' THEN
        EXIT;
      CALCFIELDS("Source Type", "Source No.");
      IF "Source Type" <> "Source Type"::Customer THEN
        EXIT;
      IF NOT Resource.GET(WorkOrder."Resource No.") THEN
        EXIT;
      IF Resource."Source No." = '' THEN
        EXIT;
      IF WorkOrder."Resource Group No." <> '' THEN BEGIN
        IF NOT ResourceGroup.GET(WorkOrder."Resource Group No.") THEN
          ResourceGroup.INIT;
      END;
      ReferenceDate := DT2DATE(WorkOrder."Starting Date/Time");
      IF ReferenceDate = 0D THEN
        ReferenceDate := TODAY;
      CASE Resource.Type OF
        Resource.Type::Plant:
          BEGIN
            PlantType := Resource."Source No.";
            PlantNo := Resource."Source No. 2";
            PlantCompany := Resource.Company;
            IF (ResourceGroup."Source No." <> '') AND (ResourceGroup."Source No." <> PlantType) AND (WorkOrder."Resource Group No." <> '') THEN BEGIN
              PlantType := ResourceGroup."Source No.";
              PlantNo := '';
              PlantCompany := ResourceGroup.Company;
            END;
            SearchRate.SetPlantCompanyFromOtherCompany(PlantCompany);
            NewRate := SearchRate.RateWithCust('', "Source No.", PlantType, PlantNo, '', ReferenceDate, 3, 0, '');
          END;
        Resource.Type::Employee:
          BEGIN
            NewRate := SalesPriceMgt.GetSalesPrice(
              SalesPriceReadOrderLine."Price Type"::CustomerRequest,
              '', '', '', "Source No.", '', '', Resource.Company, Resource."Source No.",
              '', '', '', '', '', ResourceGroup."Source No.", ReferenceDate, 0, PriceFoundAt);
          END;
        Resource.Type::Subcontractor:
          NewRate := GetSubcontractingRate("Source No.", COMPANYNAME, ResourceGroup."Source No.", ReferenceDate, PriceFoundAt);
      END;
    END;

    PROCEDURE GetSubcontractingRate@1100529008(CustomerNo@1100529000 : Code[20];Company@1100529001 : Text;DisciplineCode@1100529002 : Code[10];ReferenceDate@1100529003 : Date;VAR PriceFoundAt@1100529004 : Text) SubcRate : Decimal;
    VAR
      SalesPriceReadOrderLine@1100529006 : Record 11020376;
      SalesPriceMgt@1100529005 : Codeunit 11012036;
    BEGIN
      IF ReferenceDate = 0D THEN
        ReferenceDate := TODAY;
      SubcRate := SalesPriceMgt.GetSalesPrice(
        SalesPriceReadOrderLine."Price Type"::CustomerRequest,
        '', '', '', CustomerNo, '', '', Company, '',
        '', '', '', '', '', DisciplineCode, ReferenceDate, 0, PriceFoundAt);
    END;

    PROCEDURE GetInvoiceAmount@1100529005() : Decimal;
    VAR
      InvoiceQty@1100529000 : Decimal;
      InvoiceRate@1100529001 : Decimal;
      InvoiceAmt@1100529002 : Decimal;
    BEGIN
      IF NOT Chargeable THEN
        EXIT(0);
      IF "Agreement Type" = "Agreement Type"::Amount THEN
        EXIT("Fixed Amount");
      IF "Quantity Agreement" THEN
        InvoiceQty := "Fixed Quantity"
      ELSE
        InvoiceQty := "Actual Hours";
      IF "Agreement Type" = "Agreement Type"::Rate THEN
        InvoiceRate := "Special Rate"
      ELSE
        InvoiceRate := GetResourceRate();
      InvoiceAmt := InvoiceQty * InvoiceRate;
      IF ("Agreement Type" = "Agreement Type"::Discount) AND ("Special Discount %" <> 0) THEN
        InvoiceAmt := InvoiceAmt * (1 - ("Special Discount %" / 100));
      EXIT(ROUND(InvoiceAmt));
    END;

    PROCEDURE ShowPlantOrder@1100529007();
    VAR
      PlantOrder@1100529000 : Record 11012556;
    BEGIN
      IF "Plant Order No" <> '' THEN BEGIN
        IF PlantOrder.GET("Plant Order No") THEN BEGIN
          IF NOT PlantOrder.Posted THEN
            PAGE.RUNMODAL(0, PlantOrder)
          ELSE
            PAGE.RUNMODAL(PAGE::"Posted Plant Order List", PlantOrder);
        END;
      END;
    END;

    PROCEDURE ValidateCalcPause@1100525004(WorkOrder@1100525000 : Record 11229279);
    BEGIN
      ResourcePlanningSetup.GET;
      IF WorkOrder."Resource Type" = WorkOrder."Resource Type"::Plant THEN
        VALIDATE("Calulate Pause",ResourcePlanningSetup."Calc. Pause Plant (Default)")
      ELSE
        VALIDATE("Calulate Pause", ResourcePlanningSetup."Calulate Pause (Default)");
    END;

    BEGIN
    END.
  }
}

