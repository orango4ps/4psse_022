OBJECT Report 5882 Copy Phys. Invt. Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Inventurauftrag kopieren;
               ENU=Copy Phys. Invt. Order;
               NLD=Inventarisatieorder kopiâren;
               NOR=Kopier vareopptellingsordre];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  WITH PhysInvtOrderHeader DO BEGIN
                    TESTFIELD(Status,Status::Open);
                    IF DocNo = '' THEN
                      ERROR(EnterDocumentNoErr);

                    FIND;
                    LOCKTABLE;
                    PhysInvtOrderLine.LOCKTABLE;
                    PhysInvtOrderLine.RESET;
                    PhysInvtOrderLine.SETRANGE("Document No.","No.");
                    IF PhysInvtOrderLine.FINDLAST THEN
                      NextLineNo := PhysInvtOrderLine."Line No." + 10000
                    ELSE
                      NextLineNo := 10000;

                    NoOfInsertedLines := 0;
                    NoOfNoInsertedLines := 0;
                    CASE DocType OF
                      DocType::"Phys. Invt. Order":
                        BEGIN
                          FromPhysInvtOrderHeader.GET(DocNo);
                          IF FromPhysInvtOrderHeader."No." = "No." THEN
                            ERROR(CannotCopyToItSelfErr,"No.");

                          FromPhysInvtOrderLine.RESET;
                          FromPhysInvtOrderLine.SETRANGE("Document No.",FromPhysInvtOrderHeader."No.");
                          FromPhysInvtOrderLine.CLEARMARKS;
                          IF FromPhysInvtOrderLine.FIND('-') THEN
                            REPEAT
                              IF FromPhysInvtOrderLine."Item No." <> '' THEN BEGIN
                                NoOfOrderLines :=
                                  GetSamePhysInvtOrderLine(
                                    FromPhysInvtOrderLine."Item No.",FromPhysInvtOrderLine."Variant Code",
                                    FromPhysInvtOrderLine."Location Code",FromPhysInvtOrderLine."Bin Code",
                                    ErrorText,
                                    PhysInvtOrderLine2);
                                IF NoOfOrderLines = 0 THEN BEGIN
                                  InsertNewLine(
                                    FromPhysInvtOrderLine."Item No.",FromPhysInvtOrderLine."Variant Code",
                                    FromPhysInvtOrderLine."Location Code",FromPhysInvtOrderLine."Bin Code");
                                  NoOfInsertedLines := NoOfInsertedLines + 1;
                                END ELSE BEGIN
                                  FromPhysInvtOrderLine.MARK(TRUE);
                                  NoOfNoInsertedLines := NoOfNoInsertedLines + 1;
                                END;
                              END;
                            UNTIL FromPhysInvtOrderLine.NEXT = 0;
                        END;
                      DocType::"Posted Phys. Invt. Order":
                        BEGIN
                          FromPstdPhysInvtOrderHdr.GET(DocNo);
                          FromPstdPhysInvtOrderLine.RESET;
                          FromPstdPhysInvtOrderLine.SETRANGE("Document No.",FromPstdPhysInvtOrderHdr."No.");
                          FromPstdPhysInvtOrderLine.CLEARMARKS;
                          IF FromPstdPhysInvtOrderLine.FIND('-') THEN
                            REPEAT
                              IF FromPstdPhysInvtOrderLine."Item No." <> '' THEN BEGIN
                                NoOfOrderLines :=
                                  GetSamePhysInvtOrderLine(
                                    FromPstdPhysInvtOrderLine."Item No.",FromPstdPhysInvtOrderLine."Variant Code",
                                    FromPstdPhysInvtOrderLine."Location Code",FromPstdPhysInvtOrderLine."Bin Code",
                                    ErrorText,
                                    PhysInvtOrderLine2);
                                IF NoOfOrderLines = 0 THEN BEGIN
                                  InsertNewLine(
                                    FromPstdPhysInvtOrderLine."Item No.",FromPstdPhysInvtOrderLine."Variant Code",
                                    FromPstdPhysInvtOrderLine."Location Code",FromPstdPhysInvtOrderLine."Bin Code");
                                  NoOfInsertedLines := NoOfInsertedLines + 1;
                                END ELSE BEGIN
                                  FromPstdPhysInvtOrderLine.MARK(TRUE);
                                  NoOfNoInsertedLines := NoOfNoInsertedLines + 1;
                                END;
                              END;
                            UNTIL FromPstdPhysInvtOrderLine.NEXT = 0;
                        END;
                    END;
                  END;

                  COMMIT;

                  IF NoOfNoInsertedLines = 0 THEN
                    MESSAGE(
                      STRSUBSTNO(
                        LinesInsertedMsg,NoOfInsertedLines,PhysInvtOrderHeader."No."))
                  ELSE
                    MESSAGE(
                      STRSUBSTNO(LinesInsertedMsg,NoOfInsertedLines,NoOfNoInsertedLines,PhysInvtOrderHeader."No."));
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1   ;2   ;Field     ;
                  Name=DocumentType;
                  CaptionML=[DEU=Belegart;
                             ENU=Document Type;
                             NLD=Documenttype;
                             NOR=Dokumenttype;
                             SVE=Dokumenttyp];
                  ToolTipML=[DEU=Gibt die Nummer des Belegs an.;
                             ENU=Specifies the number of the document.;
                             NLD=Hiermee wordt het nummer van het document opgegeven.;
                             NOR=Angir nummeret pÜ dokumentet.;
                             SVE=Anger dokumentets nummer.];
                  OptionCaptionML=[DEU="Inventurauftrag,Geb. Inventurauftrag ";
                                   ENU="Phys. Invt. Order,Posted Phys. Invt. Order ";
                                   NLD="Inventarisatieorder,Geboekte inventarisatieorder ";
                                   NOR="Vareopptellingsordre,Bokfõrt vareopptellingsordre "];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DocType;
                  OnValidate=BEGIN
                               DocNo := '';
                               ValidateDocNo;
                             END;
                              }

      { 2   ;2   ;Field     ;
                  Name=DocumentNo;
                  Lookup=Yes;
                  CaptionML=[DEU=Belegnr.;
                             ENU=Document No.;
                             NLD=Documentnr.;
                             NOR=Dokumentnr.;
                             SVE=Verifikationsnr];
                  ToolTipML=[DEU=Gibt die Nummer des Belegs an.;
                             ENU=Specifies the number of the document.;
                             NLD=Hiermee wordt het nummer van het document opgegeven.;
                             NOR=Angir nummeret pÜ dokumentet.;
                             SVE=Anger dokumentets nummer.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DocNo;
                  OnValidate=BEGIN
                               ValidateDocNo;
                             END;

                  OnLookup=BEGIN
                             LookupDocNo;
                           END;
                            }

      { 5   ;2   ;Field     ;
                  CaptionML=[DEU=Erwartete Menge berechnen;
                             ENU=Calculate Qty. Expected;
                             NLD=Verwacht aantal berekenen;
                             NOR=Beregnet antall forventet];
                  ToolTipML=[DEU=Gibt an, ob das Programm den Inhalt des Felds "Erwartete Menge" fÅr die neu erstellten Inventurauftragszeilen berechnen und einfÅgen soll.;
                             ENU=Specifies if you want the program to calculate and insert the contents of the field quantity expected for new created physical inventory order lines.;
                             NLD=Hiermee wordt opgegeven of u wilt dat het programma de inhoud van het veld met het verwachte aantal berekent en invoegt voor nieuw gemaakte regels van inventarisatieorders.;
                             NOR=Angir om du vil at programmet skal beregne og sette inn innholdet i feltantallet som er forventet for nyopprettede ordrelinjer for vareopptelling.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CalcQtyExpected }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      EnterDocumentNoErr@1000 : TextConst 'DEU=Bitte geben Sie eine Belegnr. ein.;ENU=Please enter a Document No.;NLD=Voer een documentnummer in.;NOR=Angi et bilagsnr.;SVE=Skriv in ett dokumentnr';
      CannotCopyToItSelfErr@1001 : TextConst '@@@="%1 = Order No.";DEU=Auftrag %1 kann nicht auf sich selbst kopiert werden.;ENU=Order %1 cannot be copied onto itself.;NLD=Order %1 kan niet naar zichzelf worden gekopieerd.;NOR=Ordren %1 kan ikke kopieres til seg selv.';
      LinesInsertedMsg@1002 : TextConst '@@@="%1,%2 = counters, %3 = Order No.";DEU=%1 Zeilen eingefÅgt und %2 Zeile nicht eingefÅgt in Auftrag %3.;ENU=%1 lines inserted and %2 lines not inserted into the order %3.;NLD=%1 regels ingevoegd en %2 regels niet ingevoegd in order %3.;NOR=%1 linjer ble satt inn og %2 linjer ble ikke satt inn i ordren %3.';
      PhysInvtOrderHeader@1004 : Record 5875;
      PhysInvtOrderLine@1005 : Record 5876;
      PhysInvtOrderLine2@1006 : Record 5876;
      FromPhysInvtOrderHeader@1007 : Record 5875;
      FromPhysInvtOrderLine@1008 : Record 5876;
      FromPstdPhysInvtOrderHdr@1009 : Record 5879;
      FromPstdPhysInvtOrderLine@1010 : Record 5880;
      ErrorText@1011 : Text[250];
      DocNo@1012 : Code[20];
      NoOfOrderLines@1013 : Integer;
      NextLineNo@1014 : Integer;
      NoOfInsertedLines@1015 : Integer;
      NoOfNoInsertedLines@1016 : Integer;
      DocType@1017 : 'Phys. Invt. Order,Posted Phys. Invt. Order';
      CalcQtyExpected@1018 : Boolean;

    [External]
    PROCEDURE SetPhysInvtOrderHeader@1(VAR NewPhysInvtOrderHeader@1000 : Record 5875);
    BEGIN
      PhysInvtOrderHeader := NewPhysInvtOrderHeader;
    END;

    LOCAL PROCEDURE ValidateDocNo@2();
    BEGIN
      IF DocNo = '' THEN
        FromPhysInvtOrderHeader.INIT
      ELSE
        IF FromPhysInvtOrderHeader."No." = '' THEN BEGIN
          FromPhysInvtOrderHeader.INIT;
          CASE DocType OF
            DocType::"Phys. Invt. Order":
              FromPhysInvtOrderHeader.GET(DocNo);
            DocType::"Posted Phys. Invt. Order":
              BEGIN
                FromPstdPhysInvtOrderHdr.GET(DocNo);
                FromPhysInvtOrderHeader.TRANSFERFIELDS(FromPstdPhysInvtOrderHdr);
              END;
          END;
        END;
      FromPhysInvtOrderHeader."No." := '';
    END;

    LOCAL PROCEDURE LookupDocNo@3();
    BEGIN
      CASE DocType OF
        DocType::"Phys. Invt. Order":
          BEGIN
            FromPhysInvtOrderHeader.SETFILTER("No.",'<>%1',PhysInvtOrderHeader."No.");
            FromPhysInvtOrderHeader."No." := DocNo;
            IF FromPhysInvtOrderHeader.FIND('=><') THEN;
            IF PAGE.RUNMODAL(0,FromPhysInvtOrderHeader) = ACTION::LookupOK THEN
              DocNo := FromPhysInvtOrderHeader."No.";
          END;
        DocType::"Posted Phys. Invt. Order":
          BEGIN
            FromPstdPhysInvtOrderHdr."No." := DocNo;
            IF FromPstdPhysInvtOrderHdr.FIND('=><') THEN;
            IF PAGE.RUNMODAL(0,FromPstdPhysInvtOrderHdr) = ACTION::LookupOK THEN
              DocNo := FromPstdPhysInvtOrderHdr."No.";
          END;
      END;
      ValidateDocNo;
    END;

    [External]
    PROCEDURE InsertNewLine@4(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10];BinCode@1003 : Code[20]);
    BEGIN
      PhysInvtOrderLine.INIT;
      PhysInvtOrderLine."Document No." := PhysInvtOrderHeader."No.";
      PhysInvtOrderLine."Line No." := NextLineNo;
      PhysInvtOrderLine.VALIDATE("Item No.",ItemNo);
      PhysInvtOrderLine.VALIDATE("Variant Code",VariantCode);
      PhysInvtOrderLine.VALIDATE("Location Code",LocationCode);
      PhysInvtOrderLine.VALIDATE("Bin Code",BinCode);
      PhysInvtOrderLine.INSERT(TRUE);
      PhysInvtOrderLine.CreateDim(DATABASE::Item,PhysInvtOrderLine."Item No.");
      IF CalcQtyExpected THEN
        PhysInvtOrderLine.CalcQtyAndTrackLinesExpected;
      PhysInvtOrderLine.MODIFY;
      NextLineNo := NextLineNo + 10000;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

