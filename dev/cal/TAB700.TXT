OBJECT Table 700 Error Message
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Error Message;
               NOR=Feilmelding;
               SVE=Felmeddelande];
    LookupPageID=Page701;
    DrillDownPageID=Page701;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=ID;
                                                              NOR=ID;
                                                              SVE=ID] }
    { 2   ;   ;Record ID           ;RecordID      ;OnValidate=BEGIN
                                                                "Table Number" := GetTableNo("Record ID");
                                                              END;

                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Record ID;
                                                              NOR=Post-ID;
                                                              SVE=Post-ID] }
    { 3   ;   ;Field Number        ;Integer       ;OnValidate=BEGIN
                                                                IF "Table Number" = 0 THEN
                                                                  "Field Number" := 0;
                                                              END;

                                                   CaptionML=[ENU=Field Number;
                                                              NOR=Feltnummer;
                                                              SVE=F„ltnummer] }
    { 4   ;   ;Message Type        ;Option        ;CaptionML=[ENU=Message Type;
                                                              NOR=Meldingstype;
                                                              SVE=Meddelandetyp];
                                                   OptionCaptionML=[ENU=Error,Warning,Information;
                                                                    NOR=Feil,Advarsel,Informasjon;
                                                                    SVE=Fel,Varning,Information];
                                                   OptionString=Error,Warning,Information;
                                                   Editable=No }
    { 5   ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning];
                                                   Editable=No }
    { 6   ;   ;Additional Information;Text250     ;CaptionML=[ENU=Additional Information;
                                                              NOR=Tilleggsinformasjon;
                                                              SVE=Ytterligare information];
                                                   Editable=No }
    { 7   ;   ;Support Url         ;Text250       ;CaptionML=[ENU=Support Url;
                                                              NOR=URL-adresse for st›tte;
                                                              SVE=Support-URL];
                                                   Editable=No }
    { 8   ;   ;Table Number        ;Integer       ;CaptionML=[ENU=Table Number;
                                                              NOR=Tabellnummer;
                                                              SVE=Tabellnummer] }
    { 10  ;   ;Context Record ID   ;RecordID      ;OnValidate=BEGIN
                                                                "Context Table Number" := GetTableNo("Context Record ID");
                                                              END;

                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Context Record ID;
                                                              NOR=ID for kontekstpost;
                                                              SVE=Kontextpost-ID] }
    { 11  ;   ;Field Name          ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field."Field Caption" WHERE (TableNo=FIELD(Table Number),
                                                                                                   No.=FIELD(Field Number)));
                                                   CaptionML=[ENU=Field Name;
                                                              NOR=Feltnavn;
                                                              SVE=F„ltnamn];
                                                   Editable=No }
    { 12  ;   ;Table Name          ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Table Metadata".Caption WHERE (ID=FIELD(Table Number)));
                                                   CaptionML=[ENU=Table Name;
                                                              NOR=Tabellnavn;
                                                              SVE=Tabellnamn];
                                                   Editable=No }
    { 13  ;   ;Context Field Number;Integer       ;OnValidate=BEGIN
                                                                IF "Context Table Number" = 0 THEN
                                                                  "Context Field Number" := 0;
                                                              END;

                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Context Field Number;
                                                              NOR=Nummer i kontekstfelt] }
    { 14  ;   ;Context Table Number;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Context Table Number;
                                                              NOR=Nummer i konteksttabell] }
    { 15  ;   ;Context Field Name  ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field."Field Caption" WHERE (TableNo=FIELD(Context Table Number),
                                                                                                   No.=FIELD(Context Field Number)));
                                                   CaptionML=[ENU=Context Field Name;
                                                              NOR=Navn i kontekstfelt];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
    {    ;Context Record ID,Record ID              }
    {    ;Message Type,ID                          }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      IfEmptyErr@1000 : TextConst '@@@="%1=caption of a field, %2=key of record";ENU=''%1'' in ''%2'' must not be blank.;NOR=%1 i %2 kan ikke v‘re tom.;SVE=%1 i %2 f†r inte l„mnas tomt.';
      IfLengthExceededErr@1001 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer, %4=integer";ENU=The maximum length of ''%1'' in ''%2'' is %3 characters. The actual length is %4.;NOR=Maksimumslengden for %1 i %2 er %3 tegn. Faktisk lengde er %4.;SVE=Maxl„ngd p† f„ltet %1 i %2 „r %3 tecken. Den faktiska l„ngden „r %4.';
      IfInvalidCharactersErr@1002 : TextConst '@@@="%1=caption of a field, %2=key of record";ENU=''%1'' in ''%2'' contains characters that are not valid.;NOR=%1 i %2 inneholder tegn som ikke er gyldige.;SVE=%1 i %2 inneh†ller ogiltiga tecken.';
      IfOutsideRangeErr@1006 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer, %4=integer";ENU=''%1'' in ''%2'' is outside of the permitted range from %3 to %4.;NOR=%1 i %2 er utenfor det tillatte omr†det fra %3 til %4.;SVE=%1 i %2 „r utanf”r det till†tna intervallet fr†n %3 till %4.';
      IfGreaterThanErr@1007 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer";ENU=''%1'' in ''%2'' must be less than or equal to %3.;NOR=%1 i %2 m† v‘re mindre enn eller lik %3.;SVE=%1 i %2 m†ste vara mindre „n eller lika med %3.';
      IfLessThanErr@1008 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer";ENU=''%1'' in ''%2'' must be greater than or equal to %3.;NOR=%1 i %2 m† v‘re st›rre enn eller lik %3.;SVE=%1 i %2 m†ste vara st”rre „n eller lika med %3.';
      IfEqualToErr@1010 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer";ENU=''%1'' in ''%2'' must not be equal to %3.;NOR=%1 i %2 kan ikke v‘re lik %3 i .;SVE=%1 i %2 f†r inte vara lika med %3.';
      IfNotEqualToErr@1009 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer";ENU=''%1'' in ''%2'' must be equal to %3.;NOR=%1 i %2 kan ikke v‘re lik %3.;SVE=%1 i %2 m†ste vara lika med %3.';
      HasErrorsMsg@1003 : TextConst 'ENU=One or more errors were found. You must resolve all the errors before you can proceed.;NOR=Fant ‚n eller flere feil. Du m† l›se alle feil f›r du kan fortsette.;SVE=Ett eller flera fel hittades. Du m†ste l”sa alla fel innan du kan forts„tta.';
      ContextErrorMessage@1013 : Record 700;
      TempContextErrorMessage@1011 : TEMPORARY Record 700;
      DataTypeManagement@1004 : Codeunit 701;
      DevMsgNotTemporaryErr@1005 : TextConst 'ENU=This function can only be used when the record is temporary.;NOR=Denne funksjonen kan bare brukes n†r posten er midlertidig.;SVE=Den h„r funktionen f†r endast anv„ndas n„r posten „r tillf„llig.';

    [External]
    PROCEDURE LogIfEmpty@19(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option) : Integer;
    VAR
      RecordRef@1032 : RecordRef;
      TempRecordRef@1031 : RecordRef;
      FieldRef@1006 : FieldRef;
      EmptyFieldRef@1005 : FieldRef;
      NewDescription@1004 : Text;
    BEGIN
      IF NOT DataTypeManagement.GetRecordRefAndFieldRef(RecRelatedVariant,FieldNumber,RecordRef,FieldRef) THEN
        EXIT(0);

      TempRecordRef.OPEN(RecordRef.NUMBER,TRUE);
      EmptyFieldRef := TempRecordRef.FIELD(FieldNumber);

      IF FieldRef.VALUE <> EmptyFieldRef.VALUE THEN
        EXIT(0);

      NewDescription := STRSUBSTNO(IfEmptyErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID));

      EXIT(LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription));
    END;

    [External]
    PROCEDURE LogIfLengthExceeded@17(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;MaxLength@1008 : Integer) : Integer;
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      NewDescription@1004 : Text;
      StringLength@1009 : Integer;
    BEGIN
      IF NOT DataTypeManagement.GetRecordRefAndFieldRef(RecRelatedVariant,FieldNumber,RecordRef,FieldRef) THEN
        EXIT(0);

      StringLength := STRLEN(FORMAT(FieldRef.VALUE));
      IF StringLength <= MaxLength THEN
        EXIT(0);

      NewDescription := STRSUBSTNO(IfLengthExceededErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),MaxLength,StringLength);

      EXIT(LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription));
    END;

    [External]
    PROCEDURE LogIfInvalidCharacters@18(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;ValidCharacters@1008 : Text) : Integer;
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      NewDescription@1004 : Text;
    BEGIN
      IF NOT DataTypeManagement.GetRecordRefAndFieldRef(RecRelatedVariant,FieldNumber,RecordRef,FieldRef) THEN
        EXIT(0);

      IF DELCHR(FORMAT(FieldRef.VALUE),'=',ValidCharacters) = '' THEN
        EXIT(0);

      NewDescription := STRSUBSTNO(IfInvalidCharactersErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID));

      EXIT(LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription));
    END;

    [External]
    PROCEDURE LogIfOutsideRange@11(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;LowerBound@1007 : Variant;UpperBound@1010 : Variant) : Integer;
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      NewDescription@1004 : Text;
    BEGIN
      IF FieldValueIsWithinFilter(RecRelatedVariant,FieldNumber,RecordRef,FieldRef,'%1..%2',LowerBound,UpperBound) THEN
        EXIT(0);

      NewDescription := STRSUBSTNO(IfOutsideRangeErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),LowerBound,UpperBound);

      EXIT(LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription));
    END;

    [External]
    PROCEDURE LogIfGreaterThan@13(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;LowerBound@1007 : Variant) : Integer;
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      NewDescription@1004 : Text;
    BEGIN
      IF FieldValueIsWithinFilter(RecRelatedVariant,FieldNumber,RecordRef,FieldRef,'<=%1',LowerBound,'') THEN
        EXIT(0);

      NewDescription := STRSUBSTNO(IfGreaterThanErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),LowerBound);

      EXIT(LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription));
    END;

    [External]
    PROCEDURE LogIfLessThan@20(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;UpperBound@1010 : Variant) : Integer;
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      NewDescription@1004 : Text;
    BEGIN
      IF FieldValueIsWithinFilter(RecRelatedVariant,FieldNumber,RecordRef,FieldRef,'>=%1',UpperBound,'') THEN
        EXIT(0);

      NewDescription := STRSUBSTNO(IfLessThanErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),UpperBound);

      EXIT(LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription));
    END;

    [External]
    PROCEDURE LogIfEqualTo@12(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;ValueVariant@1010 : Variant) : Integer;
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      NewDescription@1004 : Text;
    BEGIN
      IF FieldValueIsWithinFilter(RecRelatedVariant,FieldNumber,RecordRef,FieldRef,'<>%1',ValueVariant,'') THEN
        EXIT(0);

      NewDescription := STRSUBSTNO(IfEqualToErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),ValueVariant);

      EXIT(LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription));
    END;

    [External]
    PROCEDURE LogIfNotEqualTo@14(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;ValueVariant@1010 : Variant) : Integer;
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      NewDescription@1004 : Text;
    BEGIN
      IF FieldValueIsWithinFilter(RecRelatedVariant,FieldNumber,RecordRef,FieldRef,'=%1',ValueVariant,'') THEN
        EXIT(0);

      NewDescription := STRSUBSTNO(IfNotEqualToErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),ValueVariant);

      EXIT(LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription));
    END;

    [External]
    PROCEDURE LogContextFieldError@36(ContextFieldNumber@1007 : Integer;NewDescription@1003 : Text;RecRelatedVariant@1000 : Variant;SourceFieldNumber@1002 : Integer;SupportURL@1004 : Text[250]) : Integer;
    VAR
      RecordRef@1001 : RecordRef;
    BEGIN
      LogSimpleMessage("Message Type"::Error,NewDescription);
      VALIDATE("Support Url",SupportURL);
      VALIDATE("Context Field Number",ContextFieldNumber);
      CASE TRUE OF
        RecRelatedVariant.ISINTEGER:
          VALIDATE("Table Number",RecRelatedVariant);
        DataTypeManagement.GetRecordRef(RecRelatedVariant,RecordRef):
          VALIDATE("Record ID",RecordRef.RECORDID);
      END;
      VALIDATE("Field Number",SourceFieldNumber);
      MODIFY(TRUE);

      EXIT(ID);
    END;

    [External]
    PROCEDURE LogSimpleMessage@10(MessageType@1003 : Option;NewDescription@1004 : Text) : Integer;
    BEGIN
      AssertRecordTemporaryOrInContext;

      ID := GetLastID + 1;

      INIT;
      VALIDATE("Message Type",MessageType);
      VALIDATE(Description,COPYSTR(NewDescription,1,MAXSTRLEN(Description)));
      VALIDATE("Context Record ID",ContextErrorMessage."Context Record ID");
      VALIDATE("Context Field Number",ContextErrorMessage."Context Field Number");
      VALIDATE("Additional Information",ContextErrorMessage."Additional Information");
      INSERT(TRUE);

      EXIT(ID);
    END;

    [External]
    PROCEDURE LogMessage@2(RecRelatedVariant@1000 : Variant;FieldNumber@1002 : Integer;MessageType@1003 : Option;NewDescription@1004 : Text) : Integer;
    VAR
      RecordRef@1001 : RecordRef;
      ErrorMessageID@1005 : Integer;
      TableNumber@1006 : Integer;
      IsHandled@1007 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeLogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF RecRelatedVariant.ISINTEGER THEN
        TableNumber := RecRelatedVariant
      ELSE BEGIN
        IF NOT DataTypeManagement.GetRecordRef(RecRelatedVariant,RecordRef) THEN
          EXIT(0);

        ErrorMessageID := FindRecord(RecordRef.RECORDID,FieldNumber,MessageType,NewDescription);
        IF ErrorMessageID <> 0 THEN
          EXIT(ErrorMessageID);
      END;

      LogSimpleMessage(MessageType,NewDescription);
      IF TableNumber = 0 THEN
        VALIDATE("Record ID",RecordRef.RECORDID)
      ELSE
        VALIDATE("Table Number",TableNumber);
      VALIDATE("Field Number",FieldNumber);
      MODIFY(TRUE);

      EXIT(ID);
    END;

    [External]
    PROCEDURE LogDetailedMessage@3(RecRelatedVariant@1003 : Variant;FieldNumber@1002 : Integer;MessageType@1001 : Option;NewDescription@1006 : Text;AdditionalInformation@1004 : Text[250];SupportUrl@1005 : Text[250]) : Integer;
    BEGIN
      LogMessage(RecRelatedVariant,FieldNumber,MessageType,NewDescription);
      VALIDATE("Additional Information",AdditionalInformation);
      VALIDATE("Support Url",SupportUrl);
      MODIFY(TRUE);

      EXIT(ID);
    END;

    [External]
    PROCEDURE LogLastError@34();
    BEGIN
      IF (GETLASTERRORCODE <> '') AND (GETLASTERRORTEXT <> '') THEN BEGIN
        LogSimpleMessage("Message Type"::Error,GETLASTERRORTEXT);
        CLEARLASTERROR;
      END;
    END;

    [External]
    PROCEDURE AddMessageDetails@6(MessageID@1000 : Integer;AdditionalInformation@1002 : Text[250];SupportUrl@1001 : Text[250]);
    BEGIN
      IF MessageID = 0 THEN
        EXIT;

      GET(MessageID);
      VALIDATE("Additional Information",AdditionalInformation);
      VALIDATE("Support Url",SupportUrl);
      MODIFY(TRUE);
    END;

    [External]
    PROCEDURE GetLastID@35() : Integer;
    BEGIN
      ClearFilters;
      IF FINDLAST THEN
        EXIT(ID);
    END;

    LOCAL PROCEDURE GetTableNo@28(RecordID@1000 : RecordID) : Integer;
    BEGIN
      EXIT(RecordID.TABLENO);
    END;

    [External]
    PROCEDURE SetContext@25(ContextRecordVariant@1002 : Variant);
    VAR
      RecordRef@1000 : RecordRef;
    BEGIN
      CLEAR(ContextErrorMessage);
      CASE TRUE OF
        ContextRecordVariant.ISRECORDID:
          ContextErrorMessage.VALIDATE("Context Record ID",ContextRecordVariant);
        ContextRecordVariant.ISINTEGER:
          ContextErrorMessage."Context Table Number" := ContextRecordVariant;
        DataTypeManagement.GetRecordRef(ContextRecordVariant,RecordRef):
          ContextErrorMessage.VALIDATE("Context Record ID",RecordRef.RECORDID)
      END;
    END;

    [External]
    PROCEDURE PushContext@39(ContextRecordVariant@1002 : Variant;ContextFieldNo@1001 : Integer;AdditionalInfo@1003 : Text[250]) : Integer;
    BEGIN
      SetContext(ContextRecordVariant);
      ContextErrorMessage."Context Field Number" := ContextFieldNo;
      ContextErrorMessage."Additional Information" := AdditionalInfo;

      IF TempContextErrorMessage.FINDLAST THEN;
      TempContextErrorMessage.ID += 1;
      TempContextErrorMessage.TRANSFERFIELDS(ContextErrorMessage,FALSE);
      TempContextErrorMessage.INSERT;
      EXIT(TempContextErrorMessage.ID);
    END;

    [External]
    PROCEDURE PopContext@37() : Integer;
    BEGIN
      IF TempContextErrorMessage.FINDLAST THEN
        TempContextErrorMessage.DELETE;
      IF TempContextErrorMessage.FINDLAST THEN
        ContextErrorMessage := TempContextErrorMessage
      ELSE
        ClearContext;
      EXIT(ContextErrorMessage.ID);
    END;

    [External]
    PROCEDURE ClearContext@22();
    BEGIN
      CLEAR(ContextErrorMessage);
      TempContextErrorMessage.DELETEALL;
      CLEAR(TempContextErrorMessage);
    END;

    [External]
    PROCEDURE ClearLog@7();
    BEGIN
      AssertRecordTemporaryOrInContext;

      ClearFilters;
      SetContextFilter;
      DELETEALL(TRUE);
    END;

    [External]
    PROCEDURE ClearLogRec@23(RecordVariant@1000 : Variant);
    BEGIN
      AssertRecordTemporaryOrInContext;

      ClearFilters;
      SetContextFilter;
      SetRecordFilter(RecordVariant);
      DELETEALL(TRUE);
    END;

    [External]
    PROCEDURE HasErrorMessagesRelatedTo@1(RecRelatedVariant@1000 : Variant) : Boolean;
    VAR
      RecordRef@1001 : RecordRef;
    BEGIN
      AssertRecordTemporaryOrInContext;

      IF NOT DataTypeManagement.GetRecordRef(RecRelatedVariant,RecordRef) THEN
        EXIT(FALSE);

      ClearFilters;
      SetContextFilter;
      SETRANGE("Record ID",RecordRef.RECORDID);
      EXIT(NOT ISEMPTY);
    END;

    [External]
    PROCEDURE ErrorMessageCount@8(LowestSeverityMessageType@1000 : Option) : Integer;
    BEGIN
      AssertRecordTemporaryOrInContext;

      ClearFilters;
      SetContextFilter;
      SETRANGE("Message Type","Message Type"::Error,LowestSeverityMessageType);
      EXIT(COUNT);
    END;

    [External]
    PROCEDURE HasErrors@9(ShowMessage@1000 : Boolean) : Boolean;
    BEGIN
      IF ErrorMessageCount("Message Type"::Error) = 0 THEN
        EXIT(FALSE);

      IF ShowMessage AND GUIALLOWED THEN
        MESSAGE(HasErrorsMsg);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowErrors@29() IsPageOpen : Boolean;
    VAR
      ErrorMessages@1000 : Page 700;
    BEGIN
      AssertRecordTemporaryOrInContext;

      ClearFilters;
      IF ISEMPTY THEN
        ERROR(GETLASTERRORTEXT);

      LogLastError;

      IF GUIALLOWED THEN BEGIN
        ErrorMessages.SetRecords(Rec);
        ErrorMessages.RUN;
        IsPageOpen := TRUE;
      END ELSE BEGIN
        SETRANGE("Message Type","Message Type"::Error);
        IF FINDFIRST THEN
          ERROR(Description);
        IsPageOpen := FALSE;
      END;
    END;

    [External]
    PROCEDURE ShowErrorMessages@5(RollBackOnError@1001 : Boolean) ErrorString : Text;
    VAR
      ErrorMessages@1000 : Page 700;
    BEGIN
      AssertRecordTemporaryOrInContext;

      ClearFilters;
      SetContextFilter;
      IF ISEMPTY THEN
        EXIT;

      IF GUIALLOWED THEN BEGIN
        ErrorMessages.SetRecords(Rec);
        ErrorMessages.RUN;
      END;

      ErrorString := ToString;

      IF RollBackOnError THEN
        IF HasErrors(FALSE) THEN
          ERROR('');

      EXIT;
    END;

    [External]
    PROCEDURE ToString@15() : Text;
    VAR
      ErrorString@1000 : Text;
    BEGIN
      AssertRecordTemporaryOrInContext;

      ClearFilters;
      SetContextFilter;
      SETCURRENTKEY("Message Type",ID);
      IF FINDSET THEN
        REPEAT
          IF ErrorString <> '' THEN
            ErrorString += '\';
          ErrorString += FORMAT("Message Type") + ': ' + Description;
        UNTIL NEXT = 0;
      ClearFilters;
      EXIT(ErrorString);
    END;

    [External]
    PROCEDURE ThrowError@16();
    BEGIN
      AssertRecordTemporaryOrInContext;

      IF HasErrors(FALSE) THEN
        ERROR(ToString);
    END;

    LOCAL PROCEDURE FieldValueIsWithinFilter@30(RecRelatedVariant@1004 : Variant;FieldNumber@1003 : Integer;VAR RecordRef@1000 : RecordRef;VAR FieldRef@1001 : FieldRef;FilterString@1002 : Text;FilterValue1@1005 : Variant;FilterValue2@1006 : Variant) : Boolean;
    VAR
      TempRecordRef@1013 : RecordRef;
      TempFieldRef@1011 : FieldRef;
    BEGIN
      IF NOT DataTypeManagement.GetRecordRefAndFieldRef(RecRelatedVariant,FieldNumber,RecordRef,FieldRef) THEN
        EXIT(FALSE);

      TempRecordRef.OPEN(RecordRef.NUMBER,TRUE);
      TempRecordRef.INIT;
      TempFieldRef := TempRecordRef.FIELD(FieldNumber);
      TempFieldRef.VALUE(FieldRef.VALUE);
      TempRecordRef.INSERT;

      TempFieldRef.SETFILTER(FilterString,FilterValue1,FilterValue2);

      EXIT(NOT TempRecordRef.ISEMPTY);
    END;

    [External]
    PROCEDURE FindRecord@21(RecordID@1000 : RecordID;FieldNumber@1003 : Integer;MessageType@1004 : Option;NewDescription@1002 : Text) : Integer;
    BEGIN
      ClearFilters;
      SetContextFilter;
      SETRANGE("Record ID",RecordID);
      SETRANGE("Field Number",FieldNumber);
      SETRANGE("Message Type",MessageType);
      SETRANGE(Description,COPYSTR(NewDescription,1,MAXSTRLEN(Description)));
      IF FINDFIRST THEN
        EXIT(ID);
      EXIT(0);
    END;

    LOCAL PROCEDURE AssertRecordTemporary@32();
    BEGIN
      IF NOT ISTEMPORARY THEN
        ERROR(DevMsgNotTemporaryErr);
    END;

    LOCAL PROCEDURE AssertRecordTemporaryOrInContext@27();
    BEGIN
      IF ContextErrorMessage."Context Table Number" = 0 THEN
        AssertRecordTemporary;
    END;

    [External]
    PROCEDURE CopyToTemp@38(VAR TempErrorMessage@1000 : TEMPORARY Record 700);
    VAR
      TempID@1001 : Integer;
    BEGIN
      IF NOT FINDSET THEN
        EXIT;

      TempErrorMessage.RESET;
      IF TempErrorMessage.FINDLAST THEN ;
      TempID := TempErrorMessage.ID;

      REPEAT
        IF TempErrorMessage.FindRecord("Record ID","Field Number","Message Type",Description) = 0 THEN BEGIN
          TempID += 1;
          TempErrorMessage := Rec;
          TempErrorMessage.ID := TempID;
          TempErrorMessage.INSERT;
        END;
      UNTIL NEXT = 0;
      TempErrorMessage.RESET;
    END;

    [External]
    PROCEDURE CopyFromTemp@4(VAR TempErrorMessage@1000 : TEMPORARY Record 700);
    VAR
      ErrorMessage@1001 : Record 700;
    BEGIN
      IF NOT TempErrorMessage.FINDSET THEN
        EXIT;

      REPEAT
        ErrorMessage := TempErrorMessage;
        ErrorMessage.ID := 0;
        ErrorMessage.INSERT(TRUE);
      UNTIL TempErrorMessage.NEXT = 0;
    END;

    [External]
    PROCEDURE CopyFromContext@24(ContextRecordVariant@1000 : Variant);
    VAR
      ErrorMessage@1001 : Record 700;
      RecordRef@1002 : RecordRef;
    BEGIN
      AssertRecordTemporary;

      IF NOT DataTypeManagement.GetRecordRef(ContextRecordVariant,RecordRef) THEN
        EXIT;

      ErrorMessage.SETRANGE("Context Record ID",RecordRef.RECORDID);
      ErrorMessage.CopyToTemp(Rec);
    END;

    LOCAL PROCEDURE ClearFilters@31();
    VAR
      LocalContextErrorMessage@1000 : Record 700;
    BEGIN
      LocalContextErrorMessage := ContextErrorMessage;
      RESET;
      ContextErrorMessage := LocalContextErrorMessage;
    END;

    LOCAL PROCEDURE SetContextFilter@33();
    BEGIN
      IF ContextErrorMessage."Context Table Number" = 0 THEN
        SETRANGE("Context Record ID")
      ELSE
        SETRANGE("Context Record ID",ContextErrorMessage."Context Record ID");
    END;

    LOCAL PROCEDURE SetRecordFilter@26(RecordVariant@1000 : Variant);
    VAR
      RecordRef@1001 : RecordRef;
    BEGIN
      DataTypeManagement.GetRecordRef(RecordVariant,RecordRef);
      SETRANGE("Record ID",RecordRef.RECORDID);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeLogMessage@40(RecRelatedVariant@1003 : Variant;FieldNumber@1002 : Integer;MessageType@1001 : Option;NewDescription@1000 : Text;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

