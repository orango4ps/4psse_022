OBJECT XMLport 11012025 Import Debrief Text - FSA
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Import Debrief Text - FSA;
    Direction=Import;
    OnPreXMLport=BEGIN
                   MessType := 'TEXT';
                   IF MessID = 'FV-4PS' THEN
                     MessType := 'DEBRIEF';  //* Field Vision can only handle 1 type for all returned message

                   MaxLen := MAXSTRLEN(DebriefTextRec.Comment);
                 END;

  }
  ELEMENTS
  {
    { [{66BEC9F8-C5AB-422A-B48E-F31762EBB04C}];  ;Message             ;Element ;Text     }

    { [{4D5830E6-413C-4362-921B-F9E4F3786A81}];1 ;MessageID           ;Attribute;Text   ;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF (MessageID <> MessID) THEN BEGIN
                                                                                    gLogbookRec.WriteExchangeError(STRSUBSTNO(Text000a,MessageID,MessID),ErrorRec.Type::Error,0);
                                                                                    currXMLport.BREAK;
                                                                                  END;
                                                                                END;
                                                                                 }

    { [{E28E3AD4-B274-4602-B78C-3F503C28670D}];1 ;MessageType         ;Attribute;Text   ;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF (MessageType <> MessType) THEN BEGIN
                                                                                    gLogbookRec.WriteExchangeError(STRSUBSTNO(Text000b,MessageType,MessType),ErrorRec.Type::Error,0);
                                                                                    currXMLport.BREAK;
                                                                                  END;
                                                                                END;
                                                                                 }

    { [{42B8EF16-FFE4-49B8-BF17-F9A10FCF5A85}];1 ;ListDebriefText     ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{3B4FD430-F6BD-47BE-BD07-4C01B86BF571}];2 ;DebriefText         ;Element ;Table   ;
                                                  VariableName=RubricText;
                                                  SourceTable=Table11012273;
                                                  MinOccurs=Zero;
                                                  Import::OnAfterInitRecord=BEGIN
                                                                              InitImportDataLine(RubricText, RubricText."Line Type"::Text);
                                                                            END;

                                                  Import::OnBeforeInsertRecord=BEGIN
                                                                                 XMLFormatMgtCU.EvaluateDate(Text_Date,RubricText.Date);
                                                                                 IF RubricText.Date = 0D THEN
                                                                                   RubricText.Date := TODAY;
                                                                                 Text_Text := DELCHR(Text_Text, '>', ' ');
                                                                                 GetCommentFromText();
                                                                                 RubricText.Comment := DELCHR(RubricText.Comment, '>', ' ');
                                                                               END;

                                                  Import::OnAfterInsertRecord=VAR
                                                                                lvTextNo@1100485000 : Integer;
                                                                              BEGIN
                                                                                IF (Text_Text = '') AND (RubricText.Comment = '') THEN
                                                                                  RubricText.DELETE;

                                                                                FOR lvTextNo := 1 TO 2 DO BEGIN
                                                                                  IF lvTextNo = 2 THEN
                                                                                    Text_Text := DELCHR(Text_Text2, '>', ' ');
                                                                                  WHILE (Text_Text <> '') DO BEGIN
                                                                                    GetCommentFromText();
                                                                                    RubricText.Comment := DELCHR(RubricText.Comment, '>', ' ');
                                                                                    IF (Text_Text <> '') OR (RubricText.Comment <> '') THEN BEGIN
                                                                                      Counter := Counter + 1;
                                                                                      RubricText."Line No." := Counter;
                                                                                      //RubricText.Date := 0D;           They (IMM) want this at every line
                                                                                      //RubricText."Text Rubric" := '';  (call11460)
                                                                                      RubricText.INSERT;
                                                                                    END;
                                                                                  END;
                                                                                END;

                                                                                RubricText.INIT;
                                                                                Text_Date := '';
                                                                                Text_Text := '';
                                                                                Text_Text2 := '';
                                                                              END;
                                                                               }

    { [{F466EBED-4556-4A98-9D18-7292404358C8}];3 ;Text_ServiceOrderNo ;Element ;Field   ;
                                                  DataType=Code;
                                                  FieldValidate=No;
                                                  SourceField=RubricText::Service Order No. }

    { [{E70EDECE-E214-4AAE-B0D6-AB298D0ED867}];3 ;Text_Date           ;Element ;Text    ;
                                                  DataType=DateTime }

    { [{4C21F89C-F594-4CD1-8F25-CBF2E3C230D0}];3 ;Text_Rubric         ;Element ;Field   ;
                                                  DataType=Code;
                                                  FieldValidate=No;
                                                  SourceField=RubricText::Text Rubric }

    { [{37547767-F529-41E4-B1D3-8079540B4C47}];3 ;Text_EmployeeNo     ;Element ;Field   ;
                                                  DataType=Code;
                                                  FieldValidate=No;
                                                  SourceField=RubricText::Employee No. }

    { [{7FD126B3-03C6-4AE6-866A-75D164EC5C1E}];3 ;Text_Text           ;Element ;Text     }

    { [{34C43FD0-DD93-49E3-B751-75C3BD7331B6}];3 ;Text_Text2          ;Element ;Text    ;
                                                  MinOccurs=Zero }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      gLogbookRec@1100485001 : Record 11012271;
      ErrorRec@1100485004 : Record 11012272;
      DebriefTextRec@1100485003 : Record 11012886;
      XMLFormatMgtCU@1100485002 : Codeunit 11012092;
      Counter@1100485000 : Integer;
      MaxLen@1100485012 : Integer;
      MessID@1100485009 : Code[30];
      MessType@1100485010 : Code[30];
      Text000a@1100485007 : TextConst 'ENU=Message ID ''%1'' incorrect, must be ''%2''';
      Text000b@1100485008 : TextConst 'ENU=Message Type ''%1'' incorrect, must be ''%2''';

    PROCEDURE SetImportData@1100485000(ILogbookRec@1100485000 : Record 11012271;IMessID@1100485001 : Code[30]);
    BEGIN
      gLogbookRec := ILogbookRec;
      MessID := IMessID;
    END;

    PROCEDURE GetImportData@1100485001() : Integer;
    BEGIN
      EXIT(Counter);
    END;

    PROCEDURE InitImportDataLine@1100485003(VAR IOImportLineRec@1100485000 : Record 11012273;ILineType@1100485001 : Option);
    BEGIN
      Counter := Counter + 1;

      IOImportLineRec."Date/Time" := gLogbookRec."Date/Time";
      IOImportLineRec."Message Type" := gLogbookRec."Message Type";
      IOImportLineRec."Line No." := Counter;
      IOImportLineRec."Line Type" := ILineType;
    END;

    PROCEDURE GetCommentFromText@1100485004();
    VAR
      lvLen@1100485002 : Integer;
      lvPos@1100485001 : Integer;
    BEGIN
      RubricText.Comment := '';
      IF Text_Text = '' THEN
        EXIT;

      RubricText.Comment := COPYSTR(Text_Text, 1, MaxLen);
      Text_Text := COPYSTR(Text_Text, MaxLen + 1);
      IF Text_Text = '' THEN
        EXIT;

      IF COPYSTR(Text_Text, 1, 1) = ' ' THEN BEGIN
        Text_Text := COPYSTR(Text_Text, 2);
        EXIT;
      END;

      lvLen := STRLEN(RubricText.Comment);
      IF (lvLen < MaxLen) OR (COPYSTR(RubricText.Comment, MaxLen, 1) = ' ') THEN
        EXIT;

      FOR lvPos := MaxLen-1 DOWNTO 1 DO BEGIN
        IF (COPYSTR(RubricText.Comment, lvPos, 1) = ' ') THEN BEGIN
          Text_Text := COPYSTR(RubricText.Comment, lvPos+1) + Text_Text;
          RubricText.Comment := COPYSTR(RubricText.Comment, 1, lvPos);
          EXIT;
        END;
      END;
    END;

    BEGIN
    END.
  }
}

