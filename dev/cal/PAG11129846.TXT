OBJECT Page 11129846 Hours FB
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[DEU=Stunden;
               ENU=Hours;
               NLD=Uren;
               NOR="Timer ";
               SVE=Timmar];
    SourceTable=Table11012035;
    PageType=CardPart;
    SourceTableTemporary=Yes;
    RefreshOnActivate=Yes;
  }
  CONTROLS
  {
    { 1210190000;0;Container;
                ContainerType=ContentArea }

    { 1100529703;1;Field  ;
                Name=Budget Hours;
                CaptionML=[DEU=Veranschlagte Stunden;
                           ENU=Budget Hours;
                           NLD=Begroot totaal uren;
                           NOR=Budsjett (Timer);
                           SVE=Budget (timmar)];
                SourceExpr=Amounts[1];
                OnDrillDown=BEGIN
                              BudgetLine_SETFILTERS;
                              PAGE.RUNMODAL(0, BudgetLine);
                            END;
                             }

    { 1100529700;1;Field  ;
                Name=Total Hours;
                CaptionML=[DEU=Summen Stunden;
                           ENU=Total Hours;
                           NLD=Totaal uren;
                           NOR=Timer totalt;
                           SVE=Timmar totalt];
                SourceExpr=Amounts[2] }

    { 1100529701;1;Field  ;
                Name=Actual Hours;
                CaptionML=[DEU=Verwendete Stunden;
                           ENU=Actual Hours;
                           NLD=Bestede uren;
                           NOR=Reelle timer;
                           SVE=Verkliga timmar];
                SourceExpr=Amounts[3];
                OnDrillDown=BEGIN
                              JobLedgerEntry_SETFILTERS;
                              PAGE.RUNMODAL(0, JobLedgerEntry);
                            END;
                             }

    { 1100529702;1;Field  ;
                Name=Hours allowed;
                CaptionML=[DEU=Zugelassene Stunden;
                           ENU=Hours Allowed;
                           NLD=Toegestaan uren;
                           NOR=Tillatte timer;
                           SVE=TillÜtna timmar];
                SourceExpr=Amounts[4] }

    { 1100529707;1;Field  ;
                Name=Hours Available;
                CaptionML=[DEU=VerfÅgbare Stunden;
                           ENU=Hours Available;
                           NLD=Beschikbaar uren];
                SourceExpr=Amounts[5] }

    { 1100529706;1;Field  ;
                Name=Hours Result;
                CaptionML=[DEU=Ergebnis Stunden;
                           ENU=Hours Result;
                           NLD=Resultaat uren;
                           NOR=Timer (resultat);
                           SVE=Timmar (resultat)];
                SourceExpr=Amounts[6] }

    { 1100529704;1;Field  ;
                Name=Open Hours;
                CaptionML=[DEU=Ausstehende Stunden;
                           ENU=Open Hours;
                           NLD=Openstaande uren;
                           NOR=èpne timer;
                           SVE=ôppna timmar];
                SourceExpr=Amounts[7];
                OnDrillDown=BEGIN
                              HourAccountingLine_SETFILTERS;
                              PAGE.RUNMODAL(0, HourAccountingLine);
                            END;
                             }

  }
  CODE
  {
    VAR
      Amounts@1100529700 : ARRAY [7] OF Decimal;
      BudgetLine@1100529702 : Record 11012001;
      JobLedgerEntry@1100529703 : Record 11072005;
      HourAccountingLine@1100529701 : Record 11012039;
      ProjRec@1100529704 : Record 11072003;
      ViewPrognPerElementByCostObj@1100529600 : Boolean;

    PROCEDURE SetParamerts@1100528105(PrognosisLineNew@1100528100 : Record 11012035;ViewPrognPerElementByCostObjNew@1100529600 : Boolean);
    BEGIN
      ViewPrognPerElementByCostObj := ViewPrognPerElementByCostObjNew;
      IF ("Project No." <> PrognosisLineNew."Project No.") OR
        ("Prognosis Date" <> PrognosisLineNew."Prognosis Date") OR
        (Element <> PrognosisLineNew.Element) OR
        ("Cost Type" <> PrognosisLineNew."Cost Type") OR
        ("Cost Object" <> PrognosisLineNew."Cost Object")
      THEN BEGIN
        DELETEALL;
        INIT;
        COPY(PrognosisLineNew);
        INSERT;
        CalcAmounts;
        CurrPage.UPDATE(FALSE);
      END
    END;

    LOCAL PROCEDURE CalcAmounts@1100529704();
    VAR
      ProjSetUp@1100529703 : Record 315;
      PrognosisLine@1100529701 : Record 11012035;
      SearchProgrDate@1100529700 : Codeunit 11012014;
      Prognosis@1100528500 : Record 11012034;
    BEGIN
      CLEAR(Amounts);
      Prognosis.GET("Project No.", "Prognosis Date");
      IF Prognosis."Fix Prognosis Line" THEN BEGIN
        Amounts[1] := "Budget Hours";
        Amounts[2] := "Total Hours";
        Amounts[3] := "Actual Hours";
        Amounts[4] := "Allowed Hours";
        Amounts[6] := "Result Hours";
        Amounts[7] := "Open Hours";
      END ELSE BEGIN
        IF NOT ProjRec.GET("Project No.") THEN
          EXIT;

        ProjRec.SETRANGE("Period Filter",0D,"Prognosis Date");
        SearchProgrDate.DetermineDate(ProjRec,FALSE);

        IF (Level = 3) AND PrognosisLine.GET("Project No.","Prognosis Date","Cost Type",Element,"Cost Object") THEN
          CalculateValues(PrognosisLine)
        ELSE BEGIN
          PrognosisLine.SETRANGE("Project No.", "Project No.");
          PrognosisLine.SETRANGE("Prognosis Date", "Prognosis Date");
          IF ViewPrognPerElementByCostObj THEN BEGIN
            PrognosisLine.SETRANGE("Cost Type", "Cost Type");
            IF Level >= 2 THEN
              PrognosisLine.SETRANGE("Cost Object", "Cost Object");
            IF Level = 3 THEN
              PrognosisLine.SETRANGE(Element, Element);
          END ELSE BEGIN
            IF (Element <> '') OR ProjRec."Prognosis per Element" THEN
              PrognosisLine.SETRANGE(Element, Element);
            IF "Cost Type" >= 0 THEN
              PrognosisLine.SETRANGE("Cost Type", "Cost Type");
            IF NOT ("Cost Object" IN ['', '-']) THEN
              PrognosisLine.SETRANGE("Cost Object", "Cost Object");
          END;
          IF PrognosisLine.FINDSET THEN
            REPEAT
              CalculateValues(PrognosisLine);
            UNTIL PrognosisLine.NEXT = 0;
        END;
      END;
      ProjSetUp.GET;
      IF ProjSetUp."Calculate Available" = ProjSetUp."Calculate Available"::"Budget - Allowed Cost" THEN
        Amounts[5] := Amounts[1] - Amounts[4] - Amounts[7]
      ELSE
        Amounts[5] := Amounts[1] - Amounts[2];
    END;

    LOCAL PROCEDURE BudgetLine_SETFILTERS@1100529715();
    VAR
      Job@1100528400 : Record 11072003;
    BEGIN
      IF Job.GET("Project No.") THEN;
      BudgetLine.RESET;
      BudgetLine.SETRANGE("Main Project No.", "Main Project No.");
      IF ViewPrognPerElementByCostObj THEN BEGIN
        BudgetLine.SETRANGE("Cost Type", "Cost Type");
        IF Level >= 2 THEN
          BudgetLine.SETRANGE("Cost Object", "Cost Object");
        IF Level = 3 THEN
          BudgetLine.SETRANGE(Element, Element);
      END ELSE BEGIN
        IF (Element <> '') OR Job."Prognosis per Element" THEN
          BudgetLine.SETRANGE(Element, Element);
        IF "Cost Type" >= 0 THEN
          BudgetLine.SETRANGE("Cost Type", "Cost Type");
        IF NOT ("Cost Object" IN ['', '-']) THEN
          BudgetLine.SETRANGE("Cost Object", "Cost Object");
      END;
      IF "Project No." <> "Main Project No." THEN
        BudgetLine.SETRANGE("Project No.", "Project No.");
      BudgetLine.SETRANGE("Version Date", 0D, "Prognosis Date");
      BudgetLine.SETFILTER("Extension Contract Status", '%1|>=%2&<%3', BudgetLine."Extension Contract Status"::"Not Applicable",
        BudgetLine."Extension Contract Status"::Order, BudgetLine."Extension Contract Status"::Expired);
    END;

    LOCAL PROCEDURE JobLedgerEntry_SETFILTERS@1100529702();
    VAR
      Job@1100528400 : Record 11072003;
    BEGIN
      IF Job.GET("Project No.") THEN;
      JobLedgerEntry.RESET;
      JobLedgerEntry.SETRANGE("Main Project No.", "Main Project No.");
      IF ViewPrognPerElementByCostObj THEN BEGIN
        JobLedgerEntry.SETRANGE("Cost Type", "Cost Type");
        IF Level >= 2 THEN
          JobLedgerEntry.SETRANGE("Global Dimension 2 Code", "Cost Object");
        IF Level = 3 THEN
          JobLedgerEntry.SETRANGE(Element, Element);
      END ELSE BEGIN
        IF (Element <> '') OR Job."Prognosis per Element" THEN
          JobLedgerEntry.SETRANGE(Element, Element);
        IF NOT ("Cost Object" IN ['', '-']) THEN
          JobLedgerEntry.SETRANGE("Global Dimension 2 Code", "Cost Object");
        IF "Project No." <> "Main Project No." THEN
          JobLedgerEntry.SETRANGE("Job No.", "Project No.");
      END;
      JobLedgerEntry.SETRANGE("Entry Type", JobLedgerEntry."Entry Type"::Usage);
      JobLedgerEntry.SETRANGE("Cost Type", JobLedgerEntry."Cost Type"::Labor);
      JobLedgerEntry.SETRANGE("Posting Date", 0D, "Prognosis Date");
    END;

    LOCAL PROCEDURE HourAccountingLine_SETFILTERS@1100529726();
    VAR
      Job@1100528400 : Record 11072003;
    BEGIN
      IF Job.GET("Project No.") THEN;
      HourAccountingLine.RESET;
      HourAccountingLine.SETRANGE("Main Project No.", "Main Project No.");
      IF ViewPrognPerElementByCostObj THEN BEGIN
        HourAccountingLine.SETRANGE("Cost Type", "Cost Type");
        IF Level >= 2 THEN
          HourAccountingLine.SETRANGE("Cost Object", "Cost Object");
        IF Level = 3 THEN
          HourAccountingLine.SETRANGE(Element, Element);
      END ELSE BEGIN
        IF (Element <> '') OR Job."Prognosis per Element" THEN
          HourAccountingLine.SETRANGE(Element, Element);
        IF "Cost Type" >= 0 THEN
          HourAccountingLine.SETRANGE("Cost Type", "Cost Type");
        IF NOT ("Cost Object" IN ['', '-']) THEN
          HourAccountingLine.SETRANGE("Cost Object", "Cost Object");
      END;
      IF "Project No." <> "Main Project No." THEN
        HourAccountingLine.SETRANGE("Project No.", "Project No.");
      HourAccountingLine.SETRANGE("Posting Date", 0D, "Prognosis Date");
    END;

    PROCEDURE CalculateValues@1100529700(PrognosisLine@1100529707 : Record 11012035);
    VAR
      ElemCstObjCntrlRec@1100529703 : Record 11012050;
      CstObjCntrlRec@1100529702 : Record 11012047;
      CostContMgt@1100529704 : Codeunit 11012006;
      AmountLoc@1100529700 : Decimal;
      DummyDec@1100529705 : Decimal;
    BEGIN
      WITH PrognosisLine DO
        IF ProjRec."Prognosis per Element" THEN BEGIN
          IF ElemCstObjCntrlRec.GET("Project No.", Element, "Cost Type", "Cost Object") THEN BEGIN
            ElemCstObjCntrlRec.RESET;
            ProjRec.COPYFILTER("Progress Filter", ElemCstObjCntrlRec."Progress Filter");
            ElemCstObjCntrlRec.SETRANGE("Prognosis Filter", "Prognosis Date");
            ElemCstObjCntrlRec.SETRANGE("Cumulation Filter", 0D, "Prognosis Date");
            ElemCstObjCntrlRec.SETRANGE("Main Project No.", "Main Project No.");
            IF "Project No." <> "Main Project No." THEN
              ElemCstObjCntrlRec.SETRANGE("Project Filter", "Project No.");
            ElemCstObjCntrlRec.CALCFIELDS("Budget Hours", "Actual Hours", "Open Hours");
              Amounts[1] += ElemCstObjCntrlRec."Budget Hours";
              Amounts[3] += ElemCstObjCntrlRec."Actual Hours";
              Amounts[7] += ElemCstObjCntrlRec."Open Hours";
            CostContMgt.AllowedAndPurchElemCostObj(ElemCstObjCntrlRec, DummyDec, AmountLoc,
              DummyDec, DummyDec, DummyDec, DummyDec, DummyDec, DummyDec, DummyDec, TRUE);
            Amounts[4] += AmountLoc;
            Amounts[6] += CostContMgt.ResultHoursElemCostObj(ElemCstObjCntrlRec, TRUE);
            Amounts[2] += CostContMgt.TotHoursElemCostObj(ElemCstObjCntrlRec, TRUE);
          END
        END ELSE
          IF CstObjCntrlRec.GET("Project No.", "Cost Type", "Cost Object") THEN BEGIN
            CstObjCntrlRec.RESET;
            ProjRec.COPYFILTER("Progress Filter", CstObjCntrlRec."Progress Filter");
            CstObjCntrlRec.SETRANGE("Prognosis Filter", "Prognosis Date");
            CstObjCntrlRec.SETRANGE("Cumulation Filter", 0D, "Prognosis Date");
            CstObjCntrlRec.SETRANGE("Main Project No.", "Main Project No.");
            IF "Project No." <> "Main Project No." THEN
              CstObjCntrlRec.SETRANGE("Project Filter", "Project No.");
            CstObjCntrlRec.CALCFIELDS("Budget Hours", "Actual Hours", "Open Hours");
              Amounts[1] += CstObjCntrlRec."Budget Hours";
              Amounts[3] += CstObjCntrlRec."Actual Hours";
              Amounts[7] += CstObjCntrlRec."Open Hours";
            CostContMgt.AllowedAndPurchCostObj(CstObjCntrlRec, DummyDec, AmountLoc,
              DummyDec, DummyDec, DummyDec, DummyDec, DummyDec, DummyDec, DummyDec, TRUE);
            Amounts[4] += AmountLoc;
            Amounts[6] += CostContMgt.ResultHoursCostObj(CstObjCntrlRec, TRUE);
            Amounts[2] += CostContMgt.TotHoursCostObj(CstObjCntrlRec, TRUE);
          END;
    END;

    BEGIN
    END.
  }
}

