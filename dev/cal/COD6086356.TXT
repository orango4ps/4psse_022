OBJECT Codeunit 6086356 EM Approval Functions (WS)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW16.00.10.3.00.07;
  }
  PROPERTIES
  {
    Permissions=TableData 8=r,
                TableData 454=m,
                TableData 455=rim,
                TableData 6086320=r,
                TableData 6086338=r,
                TableData 6086339=r,
                TableData 6086359=ri;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NSTLanguageId@161024015 : Integer;
      UserFilterType@1160040000 : 'CurrUserOnly,CurrUserAndSharing,NoUserFilter';

    [External]
    PROCEDURE GetAttachmentFile@1160040003(WinLangID@1160040007 : Integer;TableID@1160040003 : Integer;DocRefNo@1160040002 : Integer;AttachmentEntryNo@1160040001 : Integer;ToUrl@1160040000 : Text[1024]);
    VAR
      TempFile@1000 : TEMPORARY Record 6085608;
      EMAttachment@1160040005 : Record 6086359;
      OnlineMgt@1160040004 : Codeunit 6192772;
    BEGIN
      ActivateLanguage(WinLangID);

      EMAttachment.GET(TableID,0,'',DocRefNo,AttachmentEntryNo);
      EMAttachment.GetAttachment(TempFile);
      IF TempFile.Data.HASVALUE THEN
        OnlineMgt.UploadFile(TempFile,ToUrl,FALSE,FALSE);

      GLOBALLANGUAGE := NSTLanguageId;
    END;

    [External]
    PROCEDURE AddAttachmentFile@1160040001(WinLangID@1160040002 : Integer;TableID@1160040001 : Integer;DocRefNo@1160040008 : Integer;Filename@1160040000 : Text[1024];Username@1160040003 : Code[50];FromUrl@1160040005 : Text[1024];VAR NewAttachmentEntryNo@1160040006 : Integer);
    VAR
      TempFile@1000 : TEMPORARY Record 6085608;
      EMAttachment@1160040007 : Record 6086359;
      Expense@1160040009 : Record 6086320;
      Mileage@1160040004 : Record 6086338;
      OnlineMgt@1160040010 : Codeunit 6192772;
    BEGIN
      ActivateLanguage(WinLangID);

      EMAttachment."Table ID" := TableID;
      EMAttachment."Document Type" := 0;
      EMAttachment."Document No." := '';
      EMAttachment."Doc. Ref. No." := DocRefNo;
      EMAttachment."File Name" := Filename;
      EMAttachment.INSERT(TRUE);

      NewAttachmentEntryNo := EMAttachment."Entry No.";

      OnlineMgt.DownloadFile(FromUrl,'',TempFile,FALSE);
      EMAttachment.SetAttachment(TempFile);

      CASE TableID OF
        DATABASE::Expense:
          BEGIN
            Expense.GET(DocRefNo);
            CODEUNIT.RUN(CODEUNIT::"Expense-Validate",Expense);
          END;
        DATABASE::Mileage:
          BEGIN
            Mileage.GET(DocRefNo);
            CODEUNIT.RUN(CODEUNIT::"Mileage-Validate",Mileage);
          END;
      END;

      GLOBALLANGUAGE := NSTLanguageId;
    END;

    [External]
    PROCEDURE DeleteAttachmentFile@1160040000(WinLangID@1160040004 : Integer;TableID@1160040002 : Integer;DocRefNo@1160040001 : Integer;AttachmentEntryNo@1160040000 : Integer);
    VAR
      EMAttachment@1160040003 : Record 6086359;
    BEGIN
      ActivateLanguage(WinLangID);

      EMAttachment.GET(TableID,0,'',DocRefNo,AttachmentEntryNo);
      EMAttachment.DELETE(TRUE);

      GLOBALLANGUAGE := NSTLanguageId;
    END;

    [External]
    PROCEDURE AddComment@161024012(WinLangID@1160040002 : Integer;TableID@1160040001 : Integer;AppDocNo@1160040000 : Code[20];_UserID@161024014 : Code[50];Comment@161024016 : Text[1024]);
    VAR
      ApprovalEntry@1160040004 : Record 454;
      ApprovalCmtMgt@1160040003 : Codeunit 6085600;
      DCApprovalMgnt@1160040005 : Codeunit 6085722;
    BEGIN
      ActivateLanguage(WinLangID);

      IF NOT FindApprovalEntry(ApprovalEntry,TableID,AppDocNo,_UserID,ApprovalEntry.Status::Open) THEN BEGIN
        ApprovalEntry.RESET;
        ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
        ApprovalEntry.SETRANGE("Table ID",TableID);
        ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
        ApprovalEntry.SETRANGE("Document No.",AppDocNo);
        ApprovalEntry.FINDFIRST;
      END;

      ApprovalCmtMgt.AddCommentForAppvlEntry(ApprovalEntry,_UserID,Comment);
      GLOBALLANGUAGE := NSTLanguageId;
    END;

    [External]
    PROCEDURE Approve@161024013(WinLangID@1160040001 : Integer;TableID@1160040005 : Integer;DocNo@1160040003 : Code[20];ApproverId@161024014 : Code[50];VAR NextEntryNo@161024016 : Code[20];VAR NextApprover@1160040000 : Code[250]);
    VAR
      EMOnlineMgt@1160040006 : Codeunit 6086305;
      EMApprovalMgt@1160040004 : Codeunit 6086312;
      EMApprovalsBridge@1160040002 : Codeunit 6086369;
    BEGIN
      EMOnlineMgt.IsCompanyActive(TRUE);

      ActivateLanguage(WinLangID);

      EMApprovalsBridge.SetCurrentUser(ApproverId);
      EMApprovalsBridge.Approve(TableID,DocNo);

      NextApprover := EMApprovalMgt.GetApproverDisplayName(EMApprovalMgt.GetNextApprover(TableID,DocNo));
      NextEntryNo := GetNextRecordEntryNo(TableID,DocNo,ApproverId);
      GLOBALLANGUAGE := NSTLanguageId;
    END;

    [External]
    PROCEDURE Reject@161024014(WinLangID@1160040006 : Integer;TableID@1160040001 : Integer;DocNo@1160040004 : Code[20];ApproverId@1160040003 : Code[50];VAR NextEntryNo@1160040002 : Code[20]);
    VAR
      EMOnlineMgt@1160040000 : Codeunit 6086305;
      EMApprovalsBridge@1160040007 : Codeunit 6086369;
    BEGIN
      EMOnlineMgt.IsCompanyActive(TRUE);

      ActivateLanguage(WinLangID);

      EMApprovalsBridge.SetCurrentUser(ApproverId);
      EMApprovalsBridge.Reject(TableID,DocNo);

      NextEntryNo := GetNextRecordEntryNo(TableID,DocNo,ApproverId);
      GLOBALLANGUAGE := NSTLanguageId;
    END;

    [External]
    PROCEDURE Delegate@161024015(WinLangID@1160040008 : Integer;TableID@1160040009 : Integer;DocNo@1160040004 : Code[20];ApproverId@1160040003 : Code[50];DelegateToUserId@1160040006 : Code[50];DelegateAction@1160040005 : Integer;VAR NextEntryNo@1160040002 : Code[20];VAR NextApprover@1160040000 : Code[250]);
    VAR
      ApprovalEntry@1160040007 : Record 454;
      DCApprovalMgt@1000 : Codeunit 6085722;
      EMApprovalMgt@1160040001 : Codeunit 6086312;
    BEGIN
      ActivateLanguage(WinLangID);

      ApprovalEntry.SETRANGE("Table ID",TableID);
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
      ApprovalEntry.SETRANGE("Document No.",DocNo);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
      ApprovalEntry.FINDFIRST;

      DCApprovalMgt.SetCurrUserID(ApproverId);
      DCApprovalMgt.DelegateApprovalRequest2(ApprovalEntry,DelegateAction,DelegateToUserId);

      NextApprover := EMApprovalMgt.GetApproverDisplayName(EMApprovalMgt.GetNextApprover(TableID,DocNo));
      NextEntryNo := GetNextRecordEntryNo(TableID,DocNo,ApproverId);
      GLOBALLANGUAGE := NSTLanguageId;
    END;

    [External]
    PROCEDURE PutOnHold@161024021(WinLangID@1160040001 : Integer;TableID@1160040003 : Integer;DocNo@1160040007 : Code[20];ApproverId@1160040006 : Code[50];VAR NextEntryNo@1160040005 : Code[20]);
    VAR
      EMApprovalMgt@1160040000 : Codeunit 6086312;
    BEGIN
      ActivateLanguage(WinLangID);

      EMApprovalMgt.SetCurrUserID(ApproverId);
      EMApprovalMgt.PutOnHold(TableID,DocNo);

      NextEntryNo := GetNextRecordEntryNo(TableID,DocNo,ApproverId);
      GLOBALLANGUAGE := NSTLanguageId;
    END;

    [External]
    PROCEDURE RemoveOnHold@161024026(WinLangID@1160040002 : Integer;TableID@1160040006 : Integer;DocNo@1160040005 : Code[20];ApproverId@1160040004 : Code[50];VAR NextEntryNo@1160040000 : Code[20]);
    VAR
      EMApprovalMgt@1160040001 : Codeunit 6086312;
    BEGIN
      ActivateLanguage(WinLangID);

      EMApprovalMgt.SetCurrUserID(ApproverId);
      EMApprovalMgt.RemoveOnHold(TableID,DocNo);

      NextEntryNo := GetNextRecordEntryNo(TableID,DocNo,ApproverId);
      GLOBALLANGUAGE := NSTLanguageId;
    END;

    LOCAL PROCEDURE GetNextRecordEntryNo@161024018(TableID@1160040002 : Integer;CurrDocNo@1160040001 : Code[20];ApproverID@1160040000 : Code[50]) : Code[20];
    VAR
      ApprovalEntry@1160040003 : Record 454;
      Expense@1160040006 : Record 6086320;
      Mileage@1160040004 : Record 6086338;
      ExpHeader@1000 : Record 6086339;
      EMApprovalMgt@161024014 : Codeunit 6086312;
      SharingFilter@1160040005 : Text[1024];
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",TableID);
      ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type"::Invoice);
      ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);

      SharingFilter := EMApprovalMgt.GetApprovalSharingToUserFilter(ApproverID);
      IF SharingFilter <> '' THEN
        ApprovalEntry.SETFILTER("Approver ID",ApproverID + '|' + SharingFilter)
      ELSE
        ApprovalEntry.SETRANGE("Approver ID",ApproverID);

      ApprovalEntry.SETFILTER("Document No.",'>%1',FORMAT(CurrDocNo));
      IF ApprovalEntry.FINDFIRST THEN
        REPEAT
          CASE TableID OF
            DATABASE::Expense:
              BEGIN
                Expense.GET(EMApprovalMgt.Code2Int(ApprovalEntry."Document No."));
                IF Expense."On Hold" = '' THEN
                  EXIT(FORMAT(Expense."Entry No."));
              END;

            DATABASE::Mileage:
              BEGIN
                Mileage.GET(EMApprovalMgt.Code2Int(ApprovalEntry."Document No."));
                IF Mileage."On Hold" = '' THEN
                  EXIT(FORMAT(Mileage."Entry No."));
              END;

            DATABASE::"Expense Header":
              BEGIN
                ExpHeader.GET(ExpHeader."Document Type"::Settlement,ApprovalEntry."Document No.");
                IF ExpHeader."On Hold" = '' THEN
                  EXIT(ExpHeader."No.");
              END;
          END;
        UNTIL ApprovalEntry.NEXT = 0;

      ApprovalEntry.SETFILTER("Document No.",'<%1',FORMAT(CurrDocNo));
      IF ApprovalEntry.FINDFIRST THEN
        REPEAT
          CASE TableID OF
            DATABASE::Expense:
              BEGIN
                Expense.GET(EMApprovalMgt.Code2Int(ApprovalEntry."Document No."));
                IF Expense."On Hold" = '' THEN
                  EXIT(FORMAT(Expense."Entry No."));
              END;

            DATABASE::Mileage:
              BEGIN
                Mileage.GET(EMApprovalMgt.Code2Int(ApprovalEntry."Document No."));
                IF Mileage."On Hold" = '' THEN
                  EXIT(FORMAT(Mileage."Entry No."));
              END;

            DATABASE::"Expense Header":
              BEGIN
                ExpHeader.GET(ExpHeader."Document Type"::Settlement,ApprovalEntry."Document No.");
                IF ExpHeader."On Hold" = '' THEN
                  EXIT(ExpHeader."No.");
              END;
          END;
        UNTIL ApprovalEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE GetDocumentPermissions@161024023(WinLangID@1160040001 : Integer;TableID@1160040000 : Integer;DocNo@161024014 : Code[20];ApproverId@161024023 : Code[50];VAR AllowView@161024013 : Boolean;VAR AllowEditLines@161024016 : Boolean;VAR AllowAddComment@161024017 : Boolean;VAR AllowAttachFiles@161024018 : Boolean;VAR AllowApprove@161024019 : Boolean;VAR AllowReject@161024020 : Boolean;VAR AllowForward@161024021 : Boolean;VAR AllowPutOnHold@161024022 : Boolean);
    VAR
      ApprovalEntry@161024025 : Record 454;
      EMApprovalMgt@161024028 : Codeunit 6086312;
    BEGIN
      ActivateLanguage(WinLangID);

      EMApprovalMgt.SetCurrUserID(ApproverId);
      EMApprovalMgt.FilterApprovalEntry(ApprovalEntry,TableID,DocNo,UserFilterType::CurrUserAndSharing);

      IF ApprovalEntry.FINDFIRST THEN BEGIN
        AllowView := TRUE;
        AllowEditLines := TRUE;
        AllowAddComment := TRUE;
        AllowAttachFiles := TRUE;
        AllowApprove := TRUE;
        AllowReject := TRUE;
        AllowForward := TRUE;
        AllowPutOnHold := TRUE;
      END;

      GLOBALLANGUAGE := NSTLanguageId;
    END;

    LOCAL PROCEDURE ActivateDefaultLanguage@161024022();
    VAR
      Language@161024013 : Record 8;
      EMSetup@1160040000 : Record 6086300;
    BEGIN
      IF NOT EMSetup.GET THEN
        EXIT;

      EMSetup.TESTFIELD("Default Web/App Language");
      Language.GET(EMSetup."Default Web/App Language");
      Language.TESTFIELD("Windows Language ID");
      NSTLanguageId := GLOBALLANGUAGE;
      GLOBALLANGUAGE := Language."Windows Language ID";
    END;

    LOCAL PROCEDURE ActivateLanguage@1160040002(WinLangID@1160040001 : Integer);
    BEGIN
      IF WinLangID <> 0 THEN BEGIN
        NSTLanguageId := GLOBALLANGUAGE;
        GLOBALLANGUAGE(WinLangID);
      END ELSE
        ActivateDefaultLanguage;
    END;

    [External]
    PROCEDURE AddAllocationLine@161024019(LCID@1160040000 : Integer;ExpEntryNo@161024012 : Integer;VAR NewLineNo@161024015 : Integer;VAR RemainingAmount@1002 : Decimal;VAR RemainingAmountLCY@1001 : Decimal;VAR RemainingAmtBankLCY@6086300 : Decimal);
    VAR
      Expense@6086301 : Record 6086320;
      ExpenseAllocation@161024014 : Record 6086321;
    BEGIN
      ActivateLanguage(LCID);

      Expense.GET(ExpEntryNo);
      CalcRemainingAmounts(ExpEntryNo,RemainingAmount,RemainingAmountLCY,RemainingAmtBankLCY);

      ExpenseAllocation."Entry No." := 0;
      ExpenseAllocation.TRANSFERFIELDS(Expense);
      ExpenseAllocation."Expense Entry No." := Expense."Entry No.";
      ExpenseAllocation.VALIDATE(Amount,RemainingAmount);
      ExpenseAllocation.VALIDATE("Bank Currency Code",Expense."Bank Currency Code");
      ExpenseAllocation.INSERT(TRUE);
      NewLineNo := ExpenseAllocation."Entry No.";

      CalcRemainingAmounts(ExpEntryNo,RemainingAmount,RemainingAmountLCY,RemainingAmtBankLCY);
      GLOBALLANGUAGE := NSTLanguageId;
    END;

    [External]
    PROCEDURE GetRemainingAmount@6086302(LCID@6086305 : Integer;ExpEntryNo@6086304 : Integer;VAR RemainingAmount@6086302 : Decimal;VAR RemainingAmountLCY@6086301 : Decimal;VAR RemainingAmtBankLCY@6086300 : Decimal);
    BEGIN
      ActivateLanguage(LCID);
      CalcRemainingAmounts(ExpEntryNo,RemainingAmount,RemainingAmountLCY,RemainingAmtBankLCY);
      GLOBALLANGUAGE := NSTLanguageId;
    END;

    [External]
    PROCEDURE DeleteAllocationLine@6086303(LCID@6086305 : Integer;AllocEntryNo@6086304 : Integer;VAR RemainingAmount@6086302 : Decimal;VAR RemainingAmountLCY@6086301 : Decimal;VAR RemainingAmtBankLCY@6086300 : Decimal);
    VAR
      ExpenseAllocation@6086303 : Record 6086321;
    BEGIN
      ActivateLanguage(LCID);

      ExpenseAllocation.GET(AllocEntryNo);
      ExpenseAllocation.DELETE(TRUE);

      CalcRemainingAmounts(ExpenseAllocation."Expense Entry No.",RemainingAmount,RemainingAmountLCY,RemainingAmtBankLCY);

      GLOBALLANGUAGE := NSTLanguageId;
    END;

    [External]
    PROCEDURE DeleteAllAttendeesForAllocLine@1160040006(LCID@6086305 : Integer;AllocEntryNo@6086304 : Integer;VAR RemainingAmount@6086302 : Decimal;VAR RemainingAmountLCY@6086301 : Decimal;VAR RemainingAmtBankLCY@6086300 : Decimal);
    VAR
      ExpenseAttendee@1160040000 : Record 6086308;
    BEGIN
      ActivateLanguage(LCID);

      ExpenseAttendee.SETRANGE("Table ID",DATABASE::"Expense Allocation");
      ExpenseAttendee.SETRANGE("Doc. Ref. No.",AllocEntryNo);
      ExpenseAttendee.DELETEALL;

      GLOBALLANGUAGE := NSTLanguageId;
    END;

    [External]
    PROCEDURE ValidateAllocations@6086307(LCID@6086305 : Integer;TableID@6086307 : Integer;DocumentNo@6086309 : Code[20]);
    VAR
      Expense@6086300 : Record 6086320;
      EMApprovalMgt@1160040000 : Codeunit 6086312;
    BEGIN
      ActivateLanguage(LCID);

      CASE TableID OF
          DATABASE::"Expense Header":
            BEGIN
              Expense.SETRANGE("Settlement No.",DocumentNo);
              IF Expense.FINDSET THEN REPEAT
                ValidateAllocationForExpense(Expense."Entry No.");
              UNTIL Expense. NEXT = 0;
            END;
          DATABASE::Expense:
            ValidateAllocationForExpense(EMApprovalMgt.Code2Int(DocumentNo));
      END;

      GLOBALLANGUAGE := NSTLanguageId;
    END;

    LOCAL PROCEDURE ValidateAllocationForExpense@6086304(ExpEntryNo@6086308 : Integer);
    VAR
      Expense@6086300 : Record 6086320;
      ExpenseAllocation@6086303 : Record 6086321;
      RemainingAmount@6086306 : Decimal;
      RemainingAmountLCY@6086302 : Decimal;
      RemainingAmtBankLCY@6086301 : Decimal;
    BEGIN
      ExpenseAllocation.SETCURRENTKEY("Expense Entry No.");
      ExpenseAllocation.SETRANGE("Expense Entry No.",ExpEntryNo);
      IF NOT ExpenseAllocation.FINDFIRST THEN
        EXIT;

      CalcRemainingAmounts(ExpenseAllocation."Expense Entry No.",RemainingAmount,RemainingAmountLCY,RemainingAmtBankLCY);
      ExpenseAllocation.AdjustAmountsToDecimals(RemainingAmount,RemainingAmountLCY,RemainingAmtBankLCY);
      ExpenseAllocation.ValidateAllocationConsistency(FALSE);

      Expense.GET(ExpEntryNo);
      Expense.HasErrorComment(TRUE,TRUE);
    END;

    LOCAL PROCEDURE CalcRemainingAmounts@6086301(ExpEntryNo@6086303 : Integer;VAR RemainingAmount@6086300 : Decimal;VAR RemainingAmountLCY@6086301 : Decimal;VAR RemainingAmtBankLCY@6086302 : Decimal);
    VAR
      Expense@6086305 : Record 6086320;
      ExpenseAllocation@6086304 : Record 6086321;
    BEGIN
      ExpenseAllocation.SETCURRENTKEY("Expense Entry No.");
      ExpenseAllocation.SETRANGE("Expense Entry No.",ExpEntryNo);
      ExpenseAllocation.CALCSUMS(Amount,"Amount (LCY)","Bank-Currency Amount");

      Expense.GET(ExpEntryNo);
      RemainingAmount := Expense.Amount - ExpenseAllocation.Amount;
      RemainingAmountLCY := Expense."Amount (LCY)" - ExpenseAllocation."Amount (LCY)";
      RemainingAmtBankLCY := Expense."Bank-Currency Amount" - ExpenseAllocation."Bank-Currency Amount";
    END;

    [External]
    PROCEDURE IsLimitedUser@1160040005(_UserID@1160040000 : Code[50]) : Boolean;
    VAR
      ContiniaUserMgt@1160040001 : Codeunit 6085781;
    BEGIN
      EXIT(ContiniaUserMgt.IsLimitedUser(_UserID));
    END;

    LOCAL PROCEDURE FindApprovalEntry@6086300(VAR ApprovalEntry@6086304 : Record 454;TableID@6086303 : Integer;AppDocNo@6086302 : Code[20];_UserID@6086301 : Code[50];StatusFilter@6086300 : Integer) : Boolean;
    VAR
      DCApprovalMgnt@6086305 : Codeunit 6085722;
    BEGIN
      IF NOT DCApprovalMgnt.FilterApprovalEntry2(ApprovalEntry,TableID,ApprovalEntry."Document Type"::Invoice,AppDocNo,_UserID,
        StatusFilter)
      THEN
        IF NOT DCApprovalMgnt.FilterApprovalEntry2(ApprovalEntry,TableID,ApprovalEntry."Document Type"::Invoice,AppDocNo,
          DCApprovalMgnt.GetApprovalSharingToUserFilter(_UserID),StatusFilter)
        THEN
          EXIT(FALSE);

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

