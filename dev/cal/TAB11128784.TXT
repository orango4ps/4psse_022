OBJECT Table 11128784 NEN2767/LTMP Header
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               NEN2767LTMPHeader@1100528600 : Record 11128784;
               NEN2767LTMPSetup@1100528601 : Record 11128772;
             BEGIN
               IF "Entry ID" = 0 THEN BEGIN
                 IF NEN2767LTMPHeader.FINDLAST THEN
                   "Entry ID" := NEN2767LTMPHeader."Entry ID";
                 "Entry ID" += 1;
               END;
               IF "Price Index Code" = '' THEN
                 IF NEN2767LTMPSetup.GET THEN
                   VALIDATE("Price Index Code", NEN2767LTMPSetup."Default Price Index Code");
               TESTFIELD("Location Code");
               IF "Location Type" = "Location Type"::"Survey Location" THEN
                 TESTFIELD("Survey No.");
               TESTFIELD("Measurement Date");
               CheckIfUnique;
             END;

    OnDelete=VAR
               NEN2767MJOPLine@1100528600 : Record 11128785;
               LTMPScenarioHeader@1100528601 : Record 11128791;
             BEGIN
               NEN2767MJOPLine.SETRANGE("Header Entry ID", "Entry ID");
               NEN2767MJOPLine.DELETEALL(TRUE);

               LTMPScenarioHeader.SETRANGE("Header Entry ID", "Entry ID");
               LTMPScenarioHeader.DELETEALL(TRUE);
             END;

    CaptionML=ENU=NEN2767/LTMP Header;
    LookupPageID=Page11128795;
    DrillDownPageID=Page11128795;
  }
  FIELDS
  {
    { 1   ;   ;Entry ID            ;Integer       ;CaptionML=[ENU=Entry ID;
                                                              NOR=ID for oppf›ring;
                                                              SVE=Transaktions-ID];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 10  ;   ;Location Type       ;Option        ;CaptionML=ENU=Location Type;
                                                   OptionCaptionML=ENU=Unbound,Service Location,Survey Location;
                                                   OptionString=Unbound,Service Location,Survey Location;
                                                   Editable=No }
    { 20  ;   ;Location Code       ;Code20        ;TableRelation=IF (Location Type=CONST(Service Location)) "Service Location"
                                                                 ELSE IF (Location Type=CONST(Survey Location)) "Service Survey Location"."Location Code" WHERE (Survey No.=FIELD(Survey No.));
                                                   OnValidate=BEGIN
                                                                DetermineStructureNo;
                                                                DetermineOtherData;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              NOR=Lokasjonskode;
                                                              SVE=Lagerst„llekod];
                                                   NotBlank=Yes }
    { 30  ;   ;Survey No.          ;Code20        ;TableRelation="Service Survey";
                                                   CaptionML=[ENU=Survey No.;
                                                              NOR=Kartlegging nr.;
                                                              SVE=Kartl„ggningsnr];
                                                   Editable=No }
    { 40  ;   ;Measurement Date    ;Date          ;OnValidate=BEGIN
                                                                CheckIfUnique;
                                                              END;

                                                   CaptionML=[ENU=Measurement Date;
                                                              NOR=M†lingsdato] }
    { 50  ;   ;Score               ;Option        ;CaptionML=[ENU=Score;
                                                              NOR=Poengsum;
                                                              SVE=Po„ng];
                                                   OptionCaptionML=[ENU=" ,1,2,3,4,5,6";
                                                                    NOR=" ,1,2,3,4,5,6";
                                                                    SVE=" ,1,2,3,4,5,6"];
                                                   OptionString=[ ,1,2,3,4,5,6];
                                                   Editable=No }
    { 60  ;   ;NEN2767 Version Code;Code10        ;TableRelation="NEN2767 Version";
                                                   OnValidate=VAR
                                                                NEN2767LTMPLine@1100528600 : Record 11128785;
                                                              BEGIN
                                                                IF (xRec."NEN2767 Version Code" <> '') AND ("NEN2767 Version Code" <> xRec."NEN2767 Version Code") THEN BEGIN
                                                                  NEN2767LTMPLine.SETRANGE("Header Entry ID", "Entry ID");
                                                                  IF NOT NEN2767LTMPLine.ISEMPTY THEN
                                                                    ERROR(Text002);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=NEN2767 Version Code }
    { 70  ;   ;Structure No.       ;Integer       ;TableRelation=IF (Location Type=CONST(Service Location)) "Service Location Structure".No. WHERE (Service Location No.=FIELD(Location Code),
                                                                                                                                                    Default for LTMP=CONST(Yes))
                                                                                                                                                    ELSE IF (Location Type=CONST(Survey Location)) "Serv. Survey Loc. Structure"."Structure No." WHERE (Survey No.=FIELD(Survey No.),
                                                                                                                                                                                                                                                        Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                NEN2767LTMPLine@1100528600 : Record 11128785;
                                                              BEGIN
                                                                IF "Structure No." = 0 THEN
                                                                  TESTFIELD("Use Existing Structure", FALSE);
                                                                IF "Structure No." <> xRec."Structure No." THEN BEGIN
                                                                  NEN2767LTMPLine.SETRANGE("Header Entry ID", "Entry ID");
                                                                  IF xRec."Structure No." = 0 THEN
                                                                    NEN2767LTMPLine.MODIFYALL("Structure No.", "Structure No.")
                                                                  ELSE
                                                                    IF NOT NEN2767LTMPLine.ISEMPTY THEN
                                                                      ERROR(Text002);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Structure No.;
                                                              NOR=Strukturnr;
                                                              SVE=Strukturnr] }
    { 80  ;   ;Use Existing Structure;Boolean     ;OnValidate=BEGIN
                                                                IF "Use Existing Structure" THEN
                                                                  TESTFIELD("Structure No.");
                                                              END;

                                                   CaptionML=ENU=Use Existing Structure }
    { 90  ;   ;Lines Exist         ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("NEN2767/LTMP Line" WHERE (Header Entry ID=FIELD(Entry ID)));
                                                   CaptionML=ENU=Lines Exist;
                                                   Editable=No }
    { 100 ;   ;Scenario No.        ;Code10        ;TableRelation="LTMP Scenario Header"."Scenario No." WHERE (Header Entry ID=FIELD(Entry ID));
                                                   OnValidate=BEGIN
                                                                IF xRec."Scenario No." <> "Scenario No." THEN
                                                                  VALIDATE("Scenario Version No.", '');
                                                              END;

                                                   OnLookup=VAR
                                                              LTMPScenarioHeader@1100528600 : Record 11128791;
                                                            BEGIN
                                                              LTMPScenarioHeader.SETRANGE("Header Entry ID", "Entry ID");
                                                              IF PAGE.RUNMODAL(0, LTMPScenarioHeader) = ACTION::LookupOK THEN BEGIN
                                                                VALIDATE("Scenario No.", LTMPScenarioHeader."Scenario No.");
                                                                VALIDATE("Scenario Version No.", LTMPScenarioHeader."Version No.");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Scenario No. }
    { 110 ;   ;Scenario Version No.;Code10        ;TableRelation="LTMP Scenario Header"."Version No." WHERE (Header Entry ID=FIELD(Entry ID),
                                                                                                             Scenario No.=FIELD(Scenario No.));
                                                   CaptionML=ENU=Scenario Version No. }
    { 120 ;   ;Scenario Description;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("LTMP Scenario Header"."Scenario Description" WHERE (Header Entry ID=FIELD(Entry ID),
                                                                                                                           Scenario No.=FIELD(Scenario No.),
                                                                                                                           Version No.=FIELD(Scenario Version No.)));
                                                   CaptionML=ENU=Scenario Description;
                                                   Editable=No }
    { 130 ;   ;Price Index Code    ;Code10        ;TableRelation="LTMP Price Index Header";
                                                   CaptionML=ENU=Price Index Code }
    { 140 ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                ContactBusinessRelation@1100528600 : Record 5054;
                                                                Contact@1100528601 : Record 5050;
                                                              BEGIN
                                                                IF "Customer No." = '' THEN
                                                                  VALIDATE("Address Code", '');
                                                                ValidateAddressData;
                                                                ContactBusinessRelation.SETCURRENTKEY("Link to Table", "No.");
                                                                ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Customer);
                                                                ContactBusinessRelation.SETRANGE("No.", "Customer No.");
                                                                IF ContactBusinessRelation.FINDFIRST THEN
                                                                  IF Contact.GET(ContactBusinessRelation."Contact No.") THEN BEGIN
                                                                    Contact.TESTFIELD(Blocked, FALSE);
                                                                    "Contact No. (Company)" := ContactBusinessRelation."Contact No.";
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Customer No.;
                                                              NOR=Kundenr;
                                                              SVE=Kundnr] }
    { 145 ;   ;Customer Name       ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Customer No.)));
                                                   CaptionML=[ENU=Customer Name;
                                                              NOR=Kundnavn;
                                                              SVE=Betalarens namn];
                                                   Editable=No }
    { 150 ;   ;Address Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Customer No.),
                                                                                               Project Address=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                ValidateAddressData;
                                                              END;

                                                   CaptionML=[ENU=Address Code;
                                                              NOR=Adressekode;
                                                              SVE=Adresskod] }
    { 160 ;   ;Address Name        ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Ship-to Address".Name WHERE (Customer No.=FIELD(Customer No.),
                                                                                                    Code=FIELD(Address Code)));
                                                   CaptionML=[ENU=Address Name;
                                                              NOR=Address Name;
                                                              SVE=Address Name];
                                                   Editable=No }
    { 170 ;   ;Contact No. (Company);Code20       ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                Contact@1100528600 : Record 5050;
                                                                ContactBusinessRelation@1100528601 : Record 5054;
                                                              BEGIN
                                                                IF "Contact No. (Company)" <> xRec."Contact No. (Company)" THEN
                                                                  "Contact No. (Person)" := '';

                                                                IF "Contact No. (Company)" <> '' THEN BEGIN
                                                                  Contact.GET("Contact No. (Company)");
                                                                  Contact.TESTFIELD(Blocked, FALSE);
                                                                  IF (Contact.Type = Contact.Type::Person) AND (Contact."Company No." <> '') THEN
                                                                    ERROR(Text003);

                                                                  ContactBusinessRelation.RESET;
                                                                  ContactBusinessRelation.SETCURRENTKEY("Contact No.", "Business Relation Code");
                                                                  ContactBusinessRelation.SETRANGE("Contact No.", "Contact No. (Company)");
                                                                  ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Customer);
                                                                  IF ContactBusinessRelation.FINDFIRST THEN
                                                                    VALIDATE("Customer No.", ContactBusinessRelation."No.")
                                                                  ELSE
                                                                    VALIDATE("Customer No.", '');

                                                                  "Phone No." := Contact."Phone No. Work";
                                                                  "Phone No. 2" := Contact."Phone No. Work 2";
                                                                  IF "Phone No." = '' THEN
                                                                    "Phone No." := Contact."Phone No.";
                                                                  IF "Phone No. 2" = '' THEN
                                                                    "Phone No. 2" := Contact."Phone No. 2";
                                                                  "Mobile Phone No." := Contact."Mobile Phone No.";
                                                                  "Fax No." := Contact."Fax No.";
                                                                  "E-Mail" := Contact."E-Mail";
                                                                END;
                                                                CALCFIELDS("Contact Name (Company)");
                                                              END;

                                                   CaptionML=[ENU=Contact No. (Company);
                                                              NOR=Kontaktnr (Selskap);
                                                              SVE=Kontaktnr (f”retag)] }
    { 180 ;   ;Contact Name (Company);Text100     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD("Contact No. (Company)")));
                                                   CaptionML=[ENU=Contact Name (Company);
                                                              NOR=Kontaktnavn (Selskap);
                                                              SVE=Kontaktnamn (f”retag)];
                                                   Editable=No }
    { 190 ;   ;Contact No. (Person);Code20        ;TableRelation=Contact WHERE (Company No.=FIELD("Contact No. (Company)"),
                                                                                Type=CONST(Person),
                                                                                Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Contact Name (Person)");
                                                              END;

                                                   CaptionML=[ENU=Contact Person;
                                                              NOR=Kontaktperson;
                                                              SVE=Kontaktperson] }
    { 200 ;   ;Contact Name (Person);Text100      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD("Contact No. (Person)")));
                                                   CaptionML=[ENU=Name Contact Person;
                                                              NOR=Navn p† kontaktperson;
                                                              SVE=Kontaktpersonens namn];
                                                   Editable=No }
    { 210 ;   ;Name                ;Text100       ;CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn];
                                                   Editable=Yes }
    { 220 ;   ;Address             ;Text100       ;OnValidate=BEGIN
                                                                VALIDATE("Post Code");
                                                              END;

                                                   CaptionML=[ENU=Address;
                                                              NOR=Address;
                                                              SVE=Adress];
                                                   Editable=Yes }
    { 230 ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              NOR=Adresse 2;
                                                              SVE=Adress 2];
                                                   Editable=Yes }
    { 240 ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=VAR
                                                                PostCode@1100528600 : Record 225;
                                                              BEGIN
                                                                PostCode.ValidateCity(City, "Post Code", County, "Country/Region Code", (CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              NOR=Sted;
                                                              SVE=Ort];
                                                   Editable=Yes }
    { 250 ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              NOR=Delstat;
                                                              SVE=Delstat];
                                                   Editable=Yes }
    { 260 ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=VAR
                                                                PostCode@1100528600 : Record 225;
                                                                ObjectImpWorkSheetMgt@1100528601 : Codeunit 11012839;
                                                                NormalizedPostCode@1100528602 : Code[20];
                                                              BEGIN
                                                                PostCode.ValidatePostCode(City, "Post Code", County, "Country/Region Code", (CurrFieldNo <> 0) AND GUIALLOWED);
                                                                IF ObjectImpWorkSheetMgt.NormalizePostCode("Post Code", "Country/Region Code", NormalizedPostCode) THEN
                                                                  "Post Code" := NormalizedPostCode;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              NOR=Postnr.;
                                                              SVE=Postnr];
                                                   Editable=Yes }
    { 270 ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              NOR=Lands-/regionkode;
                                                              SVE=Lands-/regionkod] }
    { 280 ;   ;Phone No.           ;Text30        ;CaptionML=[ENU=Phone No.;
                                                              NOR=Telefonnr.;
                                                              SVE=Telefonnr] }
    { 290 ;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              NOR=Telefaxnr;
                                                              SVE=Telefaxnr] }
    { 300 ;   ;E-Mail              ;Text80        ;CaptionML=[ENU=Email;
                                                              NOR=E-post;
                                                              SVE=E-post] }
    { 310 ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 320 ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              NOR=Beskrivelse 2;
                                                              SVE=Beskrivning 2] }
    { 330 ;   ;Mobile Phone No.    ;Text30        ;CaptionML=[ENU=Mobile Phone No.;
                                                              NOR=Mobiltelefonnr;
                                                              SVE=Mobiltelefonnr] }
    { 340 ;   ;Phone No. 2         ;Text30        ;CaptionML=[ENU=Phone No. 2;
                                                              NOR=Telefonnr 2;
                                                              SVE=Telefonnr 2] }
  }
  KEYS
  {
    {    ;Entry ID                                ;Clustered=Yes }
    {    ;Location Type,Location Code,Survey No.,Measurement Date }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'ENU=A measurement already exists on %1';
      Text002@1100528602 : TextConst 'ENU=Lines already exist, change not allowed';
      Text003@1100528603 : TextConst 'ENU=Only Relations of Type Company or Person without Company allowed;NOR=Kun relasjoner av typen selskap eller Person uten selskap tillates;SVE=Endast relationer av typen F”retag eller Person utan f”retag till†ts';

    PROCEDURE ValidateAddressData@1210190001();
    VAR
      Contact@1100525000 : Record 5050;
      ShiptoAddress@1100528600 : Record 222;
      Customer@1100528601 : Record 18;
    BEGIN
      CASE TRUE OF
        ShiptoAddress.GET("Customer No.", "Address Code"):
          BEGIN
            Name := ShiptoAddress.Name;
            Address := ShiptoAddress.Address;
            "Address 2" := ShiptoAddress."Address 2";
            City := ShiptoAddress.City;
            County := ShiptoAddress.County;
            "Country/Region Code":= ShiptoAddress."Country/Region Code";
            "Post Code" := ShiptoAddress."Post Code";
            "Phone No." := ShiptoAddress."Phone No.";
            "Mobile Phone No." := ShiptoAddress."Mobile Phone No.";
            "Fax No." := ShiptoAddress."Fax No.";
            "E-Mail" := ShiptoAddress."E-Mail";
          END;
        Contact.GetContactByCustomer("Customer No.", Contact, FALSE) AND (Contact."Visit Address" <> ''):
          BEGIN
            Name := Contact.Name;
            Address := Contact."Visit Address";;
            "Address 2" := Contact."Visit Address 2";
            City := Contact."Visit Address City";
            County := Contact."Visit Address County";
            "Country/Region Code" := Contact."Visit Address Country/Region";
            "Post Code" := Contact."Visit Address Post Code";
            "Phone No." := Contact."Phone No.";
            "Phone No. 2" := Contact."Phone No. 2";
            "Mobile Phone No." := Contact."Mobile Phone No.";
            "Fax No." := Contact."Fax No.";
            "E-Mail" := Contact."E-Mail";
          END;
        Customer.GET("Customer No."):
          BEGIN
            Name := Customer.Name;
            Address := Customer.Address;
            "Address 2" := Customer."Address 2";
            City := Customer.City;
            County := Customer.County;
            "Country/Region Code":= Customer."Country/Region Code";
            "Post Code" := Customer."Post Code";
            "Phone No." := Customer."Phone No.";
            "Phone No. 2" := Customer."Phone No. 2";
            "Mobile Phone No." := Customer."Mobile Phone No.";
            "Fax No." := Customer."Fax No.";
            "E-Mail" := Customer."E-Mail";
          END;
        Contact.GET("Contact No. (Person)"),
        Contact.GET("Contact No. (Company)"):
          BEGIN
            "Phone No." := Contact."Phone No. Work";
            "Phone No. 2" := Contact."Phone No. Work 2";
            IF "Phone No." = '' THEN
              "Phone No." := Contact."Phone No.";
            IF "Phone No. 2" = '' THEN
              "Phone No. 2" := Contact."Phone No. 2";
            "Mobile Phone No." := Contact."Mobile Phone No.";
            "Fax No." := Contact."Fax No.";
            "E-Mail" := Contact."E-Mail";
          END;
      END;
    END;

    PROCEDURE Recalculate@1100528600();
    VAR
      NEN2767LTMPLine@1100528600 : Record 11128785;
    BEGIN
      NEN2767LTMPLine.SETRANGE("Header Entry ID", "Entry ID");
      IF NEN2767LTMPLine.FINDSET(TRUE) THEN
        REPEAT
          NEN2767LTMPLine.DetermineScore;
          NEN2767LTMPLine.MODIFY(TRUE);
        UNTIL NEN2767LTMPLine.NEXT = 0;

      IF NEN2767LTMPLine.FINDSET(TRUE) THEN
        REPEAT
          IF NEN2767LTMPLine.MultipleDefects THEN BEGIN
            NEN2767LTMPLine.DetermineScore;
            NEN2767LTMPLine.MODIFY(TRUE);
          END;
        UNTIL NEN2767LTMPLine.NEXT = 0;

      Score := GetScore;
      MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CheckIfUnique@1100528601();
    VAR
      NEN2767LTMPHeader@1100528600 : Record 11128784;
    BEGIN
      NEN2767LTMPHeader.SETRANGE("Location Type", "Location Type");
      NEN2767LTMPHeader.SETRANGE("Location Code", "Location Code");
      NEN2767LTMPHeader.SETRANGE("Survey No.", "Survey No.");
      NEN2767LTMPHeader.SETRANGE("Measurement Date", "Measurement Date");
      NEN2767LTMPHeader.SETFILTER("Entry ID", '<>%1', "Entry ID");
      IF NOT NEN2767LTMPHeader.ISEMPTY THEN
        ERROR(Text000, "Measurement Date");
    END;

    LOCAL PROCEDURE GetScore@1100528604() : Integer;
    VAR
      NEN2767LTMPLine@1100528600 : Record 11128785;
      TmpNEN2767LTMPLine@1100528605 : TEMPORARY Record 11128785;
      NEN2767Management@1100528602 : Codeunit 11012863;
      NewScore@1100528601 : Integer;
      GlobalReplacementValue@1100528603 : Decimal;
      GlobalCorrectedReplacementValue@1100528604 : Decimal;
      LineNo@1100528608 : Integer;
    BEGIN
      NEN2767LTMPLine.SETRANGE("Header Entry ID", "Entry ID");
      IF NEN2767LTMPLine.FINDSET(TRUE) THEN
        REPEAT
          TmpNEN2767LTMPLine.SETRANGE("Header Entry ID", NEN2767LTMPLine."Header Entry ID");
          TmpNEN2767LTMPLine.SETRANGE("Object No.", NEN2767LTMPLine."Object No.");
          TmpNEN2767LTMPLine.SETRANGE("Object Seq. No.", NEN2767LTMPLine."Object Seq. No.");
          TmpNEN2767LTMPLine.SETRANGE("Element No.", NEN2767LTMPLine."Element No.");
          TmpNEN2767LTMPLine.SETRANGE("Element Seq. No.", NEN2767LTMPLine."Element Seq. No.");
          IF TmpNEN2767LTMPLine.ISEMPTY THEN BEGIN
            LineNo += 10000;
            TmpNEN2767LTMPLine."Header Entry ID" := NEN2767LTMPLine."Header Entry ID";
            TmpNEN2767LTMPLine."Line No." := LineNo;
            TmpNEN2767LTMPLine."Object No." := NEN2767LTMPLine."Object No.";
            TmpNEN2767LTMPLine."Object Seq. No." := NEN2767LTMPLine."Object Seq. No.";
            TmpNEN2767LTMPLine."Element No." := NEN2767LTMPLine."Element No.";
            TmpNEN2767LTMPLine."Element Seq. No." := NEN2767LTMPLine."Element Seq. No.";
            TmpNEN2767LTMPLine.INSERT;
          END;
        UNTIL NEN2767LTMPLine.NEXT = 0;

      TmpNEN2767LTMPLine.RESET;
      IF TmpNEN2767LTMPLine.FINDSET THEN
        REPEAT
          NEN2767LTMPLine.SETRANGE("Object No.", TmpNEN2767LTMPLine."Object No.");
          NEN2767LTMPLine.SETRANGE("Object Seq. No.", TmpNEN2767LTMPLine."Object Seq. No.");
          NEN2767LTMPLine.SETRANGE("Element No.", TmpNEN2767LTMPLine."Element No.");
          NEN2767LTMPLine.SETRANGE("Element Seq. No.", TmpNEN2767LTMPLine."Element Seq. No.");
          IF NEN2767LTMPLine.FINDFIRST THEN BEGIN
            GlobalReplacementValue += NEN2767LTMPLine."Replacement Value" * NEN2767LTMPLine.Quantity;
            GlobalCorrectedReplacementValue +=
              NEN2767LTMPLine."Replacement Value" * NEN2767LTMPLine.Quantity * NEN2767Management.GetCorrectionFactorByScore(NEN2767LTMPLine.Score);
          END;
        UNTIL TmpNEN2767LTMPLine.NEXT = 0;
      IF GlobalReplacementValue = 0 THEN
        EXIT(0);
      NewScore := NEN2767Management.GetScoreByCorrectionFactor(GlobalCorrectedReplacementValue / GlobalReplacementValue);
      EXIT(NewScore);
    END;

    LOCAL PROCEDURE DetermineStructureNo@1100528607();
    VAR
      ServiceLocationStructure@1100528600 : Record 11071719;
      ServSurveyLocStructure@1100528601 : Record 11071805;
    BEGIN
      CASE "Location Type" OF
        "Location Type"::"Service Location":
          BEGIN
            ServiceLocationStructure.SETRANGE("Service Location No.", "Location Code");
            ServiceLocationStructure.SETRANGE("Default for LTMP", TRUE);
            IF ServiceLocationStructure.FINDFIRST THEN
              "Structure No." := ServiceLocationStructure."No.";
          END;
        "Location Type"::"Survey Location":
          BEGIN
            ServSurveyLocStructure.SETRANGE("Survey No.", "Survey No.");
            ServSurveyLocStructure.SETRANGE("Location Code", "Location Code");
            ServSurveyLocStructure.SETRANGE("Base Structure", TRUE);
            IF ServSurveyLocStructure.FINDFIRST THEN
              "Structure No." := ServSurveyLocStructure."Structure No.";
          END;
      END;
    END;

    LOCAL PROCEDURE DetermineOtherData@1100528603();
    VAR
      ServiceLocation@1100528600 : Record 11012801;
      ServiceSurveyLocation@1100528601 : Record 11071804;
      ServiceSurvey@1100529400 : Record 11071803;
    BEGIN
      CASE "Location Type" OF
        "Location Type"::"Service Location":
          BEGIN
            IF ServiceLocation.GET("Location Code") THEN BEGIN
              Description := ServiceLocation.Description;
              "Description 2" := ServiceLocation."Description 2";
              VALIDATE("Customer No.", ServiceLocation."Customer No.");
              Address := ServiceLocation.Address;
              "Address 2" := ServiceLocation."Address 2";
              VALIDATE("Post Code", ServiceLocation."Post Code");
              City := ServiceLocation.City;
              County := ServiceLocation.County;
              "Country/Region Code" := ServiceLocation."Country/Region Code";
              "Phone No." := ServiceLocation."Phone No.";
              "Phone No. 2" := ServiceLocation."Phone No. 2";
              "Mobile Phone No." := ServiceLocation."Mobile Phone No.";
              "Fax No." := ServiceLocation."Fax No.";
              "E-Mail" := ServiceLocation."E-Mail";
            END;
          END;
        "Location Type"::"Survey Location":
          BEGIN
            IF ServiceSurveyLocation.GET("Survey No.", "Location Code") THEN BEGIN
              IF NOT ServiceSurvey.GET("Survey No.") THEN
                ServiceSurvey.INIT;
              Description := ServiceSurveyLocation.Description;
              "Description 2" := ServiceSurveyLocation."Description 2";
              VALIDATE("Customer No.", ServiceSurvey."Customer No.");
              Address := ServiceSurveyLocation.Address;
              "Address 2" := ServiceSurveyLocation."Address 2";
              VALIDATE("Post Code", ServiceSurveyLocation."Post Code");
              City := ServiceSurveyLocation.City;
              County := ServiceSurveyLocation.County;
              "Country/Region Code" := ServiceSurveyLocation."Country/Region Code";
              "Phone No." := ServiceSurveyLocation."Phone No.";
              "Mobile Phone No." := ServiceSurveyLocation."Mobile Phone No.";
              "Fax No." := ServiceSurveyLocation."Fax No.";
              "E-Mail" := ServiceSurveyLocation."E-Mail";
            END;
          END;
      END;
    END;

    PROCEDURE GenerateLinesForServiceLocationObjects@1100528602();
    VAR
      ServiceLocation@1100528600 : Record 11012801;
      ServiceObject@1100528601 : Record 11071691;
      ServSurvLocationObject@1100528603 : Record 11071813;
      NEN2767LTMPLine@1100528602 : Record 11128785;
    BEGIN
      CALCFIELDS("Lines Exist");
      TESTFIELD("Lines Exist", FALSE);

      CASE "Location Type" OF
        "Location Type"::"Service Location":
          BEGIN
            ServiceLocation.GET("Location Code");
            ServiceLocation.GetRelatedObjects(ServiceObject);
            IF ServiceObject.FINDSET THEN
              REPEAT
                CLEAR(NEN2767LTMPLine);
                NEN2767LTMPLine.VALIDATE("Header Entry ID", "Entry ID");
                NEN2767LTMPLine."Line No." := 0;
                NEN2767LTMPLine.VALIDATE("Object No.", ServiceObject."No.");
                NEN2767LTMPLine.INSERT(TRUE);
              UNTIL ServiceObject.NEXT = 0;
          END;
        "Location Type"::"Survey Location":
          BEGIN
            ServSurvLocationObject.SETRANGE("Survey No.", "Survey No.");
            ServSurvLocationObject.SETRANGE("Location Code", "Location Code");
            IF ServSurvLocationObject.FINDSET THEN
              REPEAT
                CLEAR(NEN2767LTMPLine);
                NEN2767LTMPLine.VALIDATE("Header Entry ID", "Entry ID");
                NEN2767LTMPLine."Line No." := 0;
                NEN2767LTMPLine.VALIDATE("Object Seq. No.", ServSurvLocationObject."Seq. No.");
                NEN2767LTMPLine.INSERT(TRUE);
              UNTIL ServSurvLocationObject.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE GetCostAmountByYear@1100528609(IYear@1100528600 : Integer) : Decimal;
    VAR
      NEN2767LTMPLine@1100528601 : Record 11128785;
      CostAmount@1100528602 : Decimal;
    BEGIN
      NEN2767LTMPLine.SETRANGE("Header Entry ID", "Entry ID");
      IF NEN2767LTMPLine.FINDSET THEN
        REPEAT
          CostAmount += NEN2767LTMPLine.GetCostAmountByYear(IYear);
        UNTIL NEN2767LTMPLine.NEXT = 0;
      EXIT(CostAmount);
    END;

    BEGIN
    END.
  }
}

