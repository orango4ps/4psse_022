OBJECT XMLport 11012176 BMI Service Text WS
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Format/Evaluate=XML Format/Evaluate;
    UseDefaultNamespace=Yes;
    OnInitXMLport=BEGIN
                    NoOfLines := 0;
                  END;

    OnPostXMLport=BEGIN
                    IF (NoOfLines > 0) THEN
                      SetLastLineBreak;
                  END;

  }
  ELEMENTS
  {
    { [{87665489-4ED7-4B19-80A1-B0B207ECE378}];  ;ServiceText         ;Element ;Text    ;
                                                  MaxOccurs=Once }

    { [{CA8BA811-13B9-401F-A0D2-BF39D5F17E16}];1 ;SourceType          ;Element ;Text    ;
                                                  MaxOccurs=Once }

    { [{03308AAE-442E-410A-B9C4-EC6767C840A2}];1 ;SourceNo            ;Element ;Text    ;
                                                  MaxOccurs=Once }

    { [{B4CC353B-620E-411D-B6F4-BE02A4F6400A}];1 ;ServiceTextLine     ;Element ;Table   ;
                                                  SourceTable=Table11012882;
                                                  Import::OnBeforeInsertRecord=VAR
                                                                                 ServiceText@1100525000 : Record 11012882;
                                                                               BEGIN
                                                                                 SetServiceTextSource;

                                                                                 ServiceText.SETRANGE("Table Name", "Service Text"."Table Name");
                                                                                 ServiceText.SETRANGE("No.", "Service Text"."No.");
                                                                                 ServiceText.SETRANGE("Table Field", "Service Text"."Table Field");
                                                                                 IF (ServiceText.FINDLAST) THEN
                                                                                   "Service Text"."Line No." := ServiceText."Line No." + 10000
                                                                                 ELSE
                                                                                   "Service Text"."Line No." := 10000;
                                                                                 IF (NoOfLines = 0) THEN BEGIN
                                                                                   CurrDate := TODAY;
                                                                                   CurrTime := TIME;
                                                                                 END;

                                                                                 "Service Text".Date := CurrDate;
                                                                                 "Service Text"."Time Created" := CurrTime;
                                                                                 "Service Text"."Created by" := USERID;
                                                                                 "Service Text"."Active in FSA" := "Service Text".GetDefaultValueOfActiveInFSA;
                                                                               END;

                                                  Import::OnAfterInsertRecord=BEGIN
                                                                                NoOfLines := NoOfLines + 1;
                                                                                "Service Text"."Line Break" := FALSE;
                                                                                "Service Text".MODIFY;
                                                                              END;
                                                                               }

    { [{E21B9FC9-77D2-468D-820F-9D662EFE0989}];2 ;Text                ;Element ;Field   ;
                                                  DataType=Text;
                                                  FieldValidate=No;
                                                  SourceField=Service Text::Comment }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      NoOfLines@1100525000 : Integer;
      SourceTypeNotDefinedTxt@1100528302 : TextConst 'ENU=SourceType %1 is not defined.';
      CurrDate@1100527800 : Date;
      CurrTime@1100527801 : Time;

    [External]
    PROCEDURE GetNoOfLines@1100525004() : Integer;
    BEGIN
      EXIT(NoOfLines);
    END;

    LOCAL PROCEDURE "---Locals---"@1100528301();
    BEGIN
    END;

    LOCAL PROCEDURE SetServiceTextSource@1100528302();
    VAR
      ServiceCall@1100528300 : Record 11012822;
    BEGIN
      CASE SourceType OF
        '1': BEGIN //CallProblemText
          "Service Text"."Table Name" := "Service Text"."Table Name"::"Service Call";
          "Service Text"."Table Field" := 60;
          "Service Text"."No." := SourceNo;
          "Service Text".TESTFIELD("No.");
          ServiceCall.GET("Service Text"."No.");
        END;
        '2': BEGIN //CallResolveText
          "Service Text"."Table Name" := "Service Text"."Table Name"::"Service Call";
          "Service Text"."Table Field" := 75;
          "Service Text"."No." := SourceNo;
          "Service Text".TESTFIELD("No.");
          ServiceCall.GET("Service Text"."No.");
        END;
        '10': BEGIN //ServiceOrder Problem Text
          "Service Text"."Table Name" := "Service Text"."Table Name"::"Service Order";
          "Service Text"."Table Field" := 90;
          "Service Text"."No." := SourceNo;
          "Service Text".TESTFIELD("No.");
        END;
        '11': BEGIN //ServiceOrder Cause Text
          "Service Text"."Table Name" := "Service Text"."Table Name"::"Service Order";
          "Service Text"."Table Field" := 94;
          "Service Text"."No." := SourceNo;
          "Service Text".TESTFIELD("No.");
        END;
        '12': BEGIN //ServiceOrder resolve Text
          "Service Text"."Table Name" := "Service Text"."Table Name"::"Service Order";
          "Service Text"."Table Field" := 92;
          "Service Text"."No." := SourceNo;
          "Service Text".TESTFIELD("No.");
        END;
        ELSE ERROR(SourceTypeNotDefinedTxt, SourceType);
      END;
    END;

    LOCAL PROCEDURE SetServiceTextSourceFilters@1100527801();
    BEGIN
      CASE SourceType OF
        '1': BEGIN //CallProblemText
          "Service Text".SETRANGE("Table Name", "Service Text"."Table Name"::"Service Call");
          "Service Text".SETRANGE("Table Field", 60);
          "Service Text".SETRANGE("No.", SourceNo);
        END;
        '2': BEGIN //CallResolveText
          "Service Text".SETRANGE("Table Name", "Service Text"."Table Name"::"Service Call");
          "Service Text".SETRANGE("Table Field", 75);
          "Service Text".SETRANGE("No.", SourceNo);
        END;
        '10': BEGIN //ServiceOrder Problem Text
          "Service Text".SETRANGE("Table Name", "Service Text"."Table Name"::"Service Order");
          "Service Text".SETRANGE("Table Field", 90);
          "Service Text".SETRANGE("No.", SourceNo);
        END;
        '11': BEGIN //ServiceOrder Cause Text
          "Service Text".SETRANGE("Table Name", "Service Text"."Table Name"::"Service Order");
          "Service Text".SETRANGE("Table Field", 94);
          "Service Text".SETRANGE("No.", SourceNo);
        END;
        '12': BEGIN //ServiceOrder resolve Text
          "Service Text".SETRANGE("Table Name", "Service Text"."Table Name"::"Service Order");
          "Service Text".SETRANGE("Table Field", 92);
          "Service Text".SETRANGE("No.", SourceNo);
        END;
      END;
    END;

    LOCAL PROCEDURE SetLastLineBreak@1100527800();
    BEGIN
      SetServiceTextSourceFilters;
      IF ("Service Text".FINDLAST) THEN BEGIN
        "Service Text"."Line Break" := TRUE;
        "Service Text".MODIFY;
      END;
    END;

    BEGIN
    END.
  }
}

