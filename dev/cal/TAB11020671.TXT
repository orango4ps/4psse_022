OBJECT Table 11020671 Frost Out Request
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckIfAlreadyInFourWeekPeriod;
               GetNormHours;
               InsertRequestLines;
               UpdateRequestLines;
             END;

    OnDelete=BEGIN
               DeleteRequestLines;
             END;

    OnRename=BEGIN
               ERROR(Text002);
             END;

    CaptionML=[ENU=Frost Out Request;
               NOR=Frost Out-forespõrsel;
               SVE=Frost Out-fîrfrÜgan];
    LookupPageID=Page11125019;
  }
  FIELDS
  {
    { 10  ;   ;Employee No.        ;Code20        ;TableRelation=Employee.No. WHERE (Status=CONST(Active),
                                                                                     External=CONST(No));
                                                   OnValidate=VAR
                                                                Employee@1100528300 : Record 5200;
                                                              BEGIN
                                                                CALCFIELDS("Employee Name");
                                                                IF (Employee.GET("Employee No.")) THEN
                                                                  "Global Dimension 1 Code" := Employee."Global Dimension 1 Code";
                                                              END;

                                                   CaptionML=[ENU=Employee No.;
                                                              NOR=Ansattnr;
                                                              SVE=AnstÑllningsnr];
                                                   NotBlank=Yes }
    { 11  ;   ;Employee Name       ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=[ENU=Employee Name;
                                                              NOR=Navn pÜ ansatt;
                                                              SVE=Namn pÜ anstÑlld];
                                                   Editable=No }
    { 20  ;   ;Year                ;Integer       ;OnValidate=VAR
                                                                Date@1100528300 : Record 2000000007;
                                                              BEGIN
                                                                Date.SETRANGE("Period Type", Date."Period Type"::Year);
                                                                Date.SETRANGE("Period No.", Year);
                                                                IF (NOT Date.FINDFIRST) THEN
                                                                  FIELDERROR(Year);

                                                                YearStartDate := Date."Period Start";
                                                                YearEndDate := Date."Period End";
                                                              END;

                                                   CaptionML=[ENU=Year;
                                                              NOR=èr;
                                                              SVE=èr];
                                                   MinValue=1;
                                                   NotBlank=Yes }
    { 21  ;   ;Start Week          ;Integer       ;TableRelation="Frost Out Period"."Start Week" WHERE (Year=FIELD(Year));
                                                   OnValidate=VAR
                                                                Date@1100528300 : Record 2000000007;
                                                              BEGIN
                                                                IF (Year = 0) THEN
                                                                  Year := DATE2DMY(TODAY, 3);
                                                                VALIDATE(Year);

                                                                Date.SETRANGE("Period Type", Date."Period Type"::Week);
                                                                Date.SETRANGE("Period No.", "Start Week");
                                                                Date.SETRANGE("Period Start", CALCDATE('<-3D>', YearStartDate), YearEndDate);
                                                                Date.SETRANGE("Period End", YearStartDate, CALCDATE('<+3D>', YearEndDate));
                                                                IF (NOT Date.FINDFIRST) THEN
                                                                  FIELDERROR("Start Week");

                                                                CheckIfAlreadyInFourWeekPeriod;
                                                              END;

                                                   CaptionML=[ENU=Start Week;
                                                              NOR=Startuke;
                                                              SVE=Startvecka];
                                                   MinValue=1;
                                                   MaxValue=53;
                                                   NotBlank=Yes }
    { 30  ;   ;Norm Hours Monday   ;Decimal       ;CaptionML=[ENU=Norm Hours Monday;
                                                              NOR=Normtimer mandag;
                                                              SVE=Normtimmar mÜndag];
                                                   DecimalPlaces=0:2 }
    { 40  ;   ;Norm Hours Tuesday  ;Decimal       ;CaptionML=[ENU=Norm Hours Tuesday;
                                                              NOR=Normtimer tirsdag;
                                                              SVE=Normtimmar tisdag];
                                                   DecimalPlaces=0:2 }
    { 50  ;   ;Norm Hours Wednesday;Decimal       ;CaptionML=[ENU=Norm Hours Wednesday;
                                                              NOR=Normtimer onsdag;
                                                              SVE=Normtimmar onsdag];
                                                   DecimalPlaces=0:2 }
    { 60  ;   ;Norm Hours Thursday ;Decimal       ;CaptionML=[ENU=Norm Hours Thursday;
                                                              NOR=Normtimer torsdag;
                                                              SVE=Normtimmar torsdag];
                                                   DecimalPlaces=0:2 }
    { 70  ;   ;Norm Hours Friday   ;Decimal       ;CaptionML=[ENU=Norm Hours Friday;
                                                              NOR=Normtimer fredag;
                                                              SVE=Normtimmar fredag];
                                                   DecimalPlaces=0:2 }
    { 80  ;   ;Norm Hours Saturday ;Decimal       ;CaptionML=[ENU=Norm Hours Saturday;
                                                              NOR=Normtimer lõrdag;
                                                              SVE=Normtimmar lîrdag];
                                                   DecimalPlaces=0:2 }
    { 90  ;   ;Norm Hours Sunday   ;Decimal       ;CaptionML=[ENU=Norm Hours Sunday;
                                                              NOR=Normtimer sõndag;
                                                              SVE=Normtimmar sîndag];
                                                   DecimalPlaces=0:2 }
    { 100 ;   ;Status Code         ;Code10        ;TableRelation="Frost Out Status";
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Status Description");
                                                              END;

                                                   CaptionML=[ENU=Status Code;
                                                              NOR=Statuskode;
                                                              SVE=Statuskod] }
    { 110 ;   ;Status Description  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Frost Out Status".Description WHERE (Code=FIELD(Status Code)));
                                                   CaptionML=[ENU=Status Description;
                                                              NOR=Statusbeskrivelse;
                                                              SVE=Statusbeskrivning];
                                                   Editable=No }
    { 120 ;   ;Print Date Time     ;DateTime      ;CaptionML=[ENU=Print Date Time;
                                                              NOR=Skriv ut dato/tid;
                                                              SVE=Skriv ut datum/tid];
                                                   Editable=No }
    { 130 ;   ;Global Dimension 1 Code;Code20     ;CaptionML=[ENU=Global Dimension 1 Code;
                                                              NOR=Global dimensjon 1 kode;
                                                              SVE=Global dimension 1 kod];
                                                   Editable=No;
                                                   CaptionClass='1,1,1' }
    { 140 ;   ;Amount Received     ;Decimal       ;CaptionML=[ENU=Amount Received;
                                                              NOR=Belõp mottatt;
                                                              SVE=Inlevererat belopp];
                                                   DecimalPlaces=2:2 }
    { 150 ;   ;Processed           ;Boolean       ;CaptionML=[ENU=Processed;
                                                              NOR=Behandlede;
                                                              SVE=Behandlades] }
  }
  KEYS
  {
    {    ;Employee No.,Year,Start Week            ;Clustered=Yes }
    {    ;Status Code,Global Dimension 1 Code      }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      YearStartDate@1100528301 : Date;
      YearEndDate@1100528300 : Date;
      Text000@1100528302 : TextConst 'ENU=There is already a %1 withtin a 4 Week Period.;NOR=Det finnes allerede en %1 innenfor en 4-ukersperiode.;SVE=Det finns redan en %1 inom en 4-veckorsperiod.';
      Text001@1100528304 : TextConst 'ENU=Can''''t determine the 4 period.;NOR=Kan ikke bestemme 4-ukersperioden.;SVE=Kan inte bestÑmma 4-veckorsperioden.';
      Text002@1100528303 : TextConst 'ENU=Rename is not allowed.;NOR=Gi nytt navn ikke tillatt;SVE=Att ge nytt namn Ñr inte tillÜtet.';
      DPA_Management@1100528305 : Codeunit 11012783;

    PROCEDURE GetNormHours@1100528300();
    VAR
      EmployeeTimeTable@1100528300 : Record 11012923;
    BEGIN
      EmployeeTimeTable.SETRANGE("Employee No.", "Employee No.");
      EmployeeTimeTable.SETFILTER("Effective Date", '..%1', DWY2DATE(1, "Start Week", Year));
      IF EmployeeTimeTable.FINDLAST THEN BEGIN
        "Norm Hours Monday" := EmployeeTimeTable.Monday;
        "Norm Hours Tuesday" := EmployeeTimeTable.Tuesday;
        "Norm Hours Wednesday" := EmployeeTimeTable.Wednesday;
        "Norm Hours Thursday" := EmployeeTimeTable.Thursday;
        "Norm Hours Friday" := EmployeeTimeTable.Friday;
        "Norm Hours Saturday" := EmployeeTimeTable.Saturday;
        "Norm Hours Sunday" := EmployeeTimeTable.Sunday;
      END;
    END;

    PROCEDURE DetermineStartYearWeek@1100528308(VAR YearArray@1100528303 : ARRAY [4] OF Integer;VAR WeekArray@1100528302 : ARRAY [4] OF Integer);
    VAR
      Date@1100528300 : Record 2000000007;
      Counter@1100528301 : Integer;
    BEGIN
      CLEAR(YearArray);
      CLEAR(WeekArray);

      Date.SETRANGE("Period Type", Date."Period Type"::Week);
      Date.SETFILTER("Period Start", '%1..', DWY2DATE(1, "Start Week", Year));
      IF ((NOT Date.FINDSET) OR (Date."Period Start" <> DWY2DATE(1, "Start Week", Year))) THEN
        ERROR(Text001);

      FOR Counter := 1 TO 4 DO BEGIN
        YearArray[Counter] := DATE2DWY(Date."Period Start", 3);
        WeekArray[Counter] := DATE2DWY(Date."Period Start", 2);
        Date.NEXT;
        IF (YearArray[Counter] <> DATE2DWY(Date."Period Start", 3)) THEN
          Counter := 9;
      END;
    END;

    PROCEDURE DetermineStartYearWeekBackward@1210190001(VAR YearArray@1100528303 : ARRAY [4] OF Integer;VAR WeekArray@1100528302 : ARRAY [4] OF Integer);
    VAR
      Date@1100528300 : Record 2000000007;
      Counter@1100528301 : Integer;
    BEGIN
      CLEAR(YearArray);
      CLEAR(WeekArray);

      Date.SETRANGE("Period Type", Date."Period Type"::Week);
      Date.SETFILTER("Period Start", '..%1', DWY2DATE(1, "Start Week", Year));
      IF ((NOT Date.FINDLAST) OR (Date."Period Start" <> DWY2DATE(1, "Start Week", Year))) THEN
        ERROR(Text001);


      FOR Counter := 1 TO 4 DO BEGIN
        YearArray[Counter] := DATE2DWY(Date."Period Start", 3);
        WeekArray[Counter] := DATE2DWY(Date."Period Start", 2);
        Date.NEXT(-1);
        IF (YearArray[Counter] <> DATE2DWY(Date."Period Start", 3)) THEN
          Counter := 9;
      END;
    END;

    PROCEDURE InsertRequestLines@1100528301();
    VAR
      FrostOutRequestLine@1100528300 : Record 11020672;
      Counter@1100528301 : Integer;
      YearArr@1100528303 : ARRAY [4] OF Integer;
      WeekArr@1100528302 : ARRAY [4] OF Integer;
    BEGIN
      DetermineStartYearWeek(YearArr, WeekArr);

      FOR Counter := 1 TO 4 DO BEGIN
        IF (YearArr[Counter] <> 0) THEN BEGIN
          FrostOutRequestLine.INIT;
          FrostOutRequestLine."Employee No." :="Employee No.";
          FrostOutRequestLine."Start Year" := Year;
          FrostOutRequestLine."Start Week" := "Start Week";
          FrostOutRequestLine.Year := YearArr[Counter];
          FrostOutRequestLine.Week := WeekArr[Counter];
          FrostOutRequestLine.INSERT(TRUE);

          CopyFrostOutLineToDetails(FrostOutRequestLine);      //Call T003963.n

        END;
      END;
    END;

    PROCEDURE UpdateRequestLines@1100528303();
    VAR
      FrostOutRequestLine@1100528300 : Record 11020672;
      PostedHourLine@1100528305 : Record 11012085;
      WageComponent@1100528304 : Record 11012014;
      Counter@1100528301 : Integer;
      YearArr@1100528303 : ARRAY [4] OF Integer;
      WeekArr@1100528308 : ARRAY [4] OF Integer;
    BEGIN
      ResetAllHours;
      ResetAllCodes;
      DetermineStartYearWeek(YearArr, WeekArr);

      FOR Counter := 1 TO 4 DO BEGIN
        IF (FrostOutRequestLine.GET("Employee No.", Year, "Start Week", YearArr[Counter], WeekArr[Counter])) THEN BEGIN
          IF (NOT FrostOutRequestLine.Processed) THEN BEGIN
            PostedHourLine.SETRANGE(Year, YearArr[Counter]);
            PostedHourLine.SETRANGE(Week, WeekArr[Counter]);
            PostedHourLine.SETRANGE("Employee No.", "Employee No.");
            PostedHourLine.SETRANGE(Overtime, FALSE);
            PostedHourLine.SETRANGE("Component Type", PostedHourLine."Component Type"::Hours);
            IF (PostedHourLine.FINDSET) THEN BEGIN
              REPEAT
                IF (WageComponent.GET(PostedHourLine."Wage Component")) THEN BEGIN
                  IF (WageComponent."Frost Delay") THEN
                    SetNotWorkedHours(FrostOutRequestLine, PostedHourLine)
                  ELSE
                    SetWorkedHours(FrostOutRequestLine, PostedHourLine);
                END ELSE
                  SetWorkedHours(FrostOutRequestLine, PostedHourLine);
              UNTIL(PostedHourLine.NEXT = 0);
              SetPostCodeCityAndReasonCode(FrostOutRequestLine);
              FrostOutRequestLine.MODIFY;

              CopyFrostOutLineToDetails(FrostOutRequestLine);       //Call T003963.n

            END;
          END;
        END;
      END;
    END;

    PROCEDURE DeleteRequestLines@1100528305();
    VAR
      FrostOutRequestLine@1100528300 : Record 11020672;
      FrostOutRequestLineDetail@1100525000 : Record 11020673;
    BEGIN
      FrostOutRequestLine.SETRANGE("Employee No.", "Employee No.");
      FrostOutRequestLine.SETRANGE("Start Year", Year);
      FrostOutRequestLine.SETRANGE("Start Week", "Start Week");
      FrostOutRequestLine.DELETEALL;

      //Call T003963.sn
      FrostOutRequestLineDetail.SETRANGE("Employee No.", "Employee No.");
      FrostOutRequestLineDetail.SETRANGE("Start Year", Year);
      FrostOutRequestLineDetail.SETRANGE("Start Week", "Start Week");
      FrostOutRequestLineDetail.DELETEALL;
      //Call T003963.en
    END;

    PROCEDURE CheckIfAlreadyInFourWeekPeriod@1100528302();
    VAR
      FrostOutRequestLine@1100528303 : Record 11020672;
      Counter@1100528302 : Integer;
      YearArr@1100528300 : ARRAY [4] OF Integer;
      WeekArr@1100528301 : ARRAY [4] OF Integer;
    BEGIN
      DetermineStartYearWeek(YearArr, WeekArr);
      FrostOutRequestLine.SETCURRENTKEY("Employee No.", Year, Week);

      FOR Counter := 1 TO 4 DO BEGIN
        FrostOutRequestLine.SETRANGE("Employee No.", "Employee No.");
        FrostOutRequestLine.SETRANGE(Year, YearArr[Counter]);
        FrostOutRequestLine.SETRANGE(Week, WeekArr[Counter]);
        IF (FrostOutRequestLine.FINDFIRST) THEN
          ERROR(Text000, TABLECAPTION);
      END;
    END;

    LOCAL PROCEDURE ResetAllHours@1100528306();
    VAR
      FrostOutRequestLine@1100528303 : Record 11020672;
      YearArr@1100528300 : ARRAY [4] OF Integer;
      WeekArr@1100528301 : ARRAY [4] OF Integer;
      Counter@1100528302 : Integer;
    BEGIN
      DetermineStartYearWeek(YearArr, WeekArr);

      FOR Counter := 1 TO 4 DO BEGIN
        IF (FrostOutRequestLine.GET("Employee No.", Year, "Start Week", YearArr[Counter], WeekArr[Counter])) THEN
          IF (NOT FrostOutRequestLine.Processed) THEN BEGIN
            FrostOutRequestLine."Hours Worked Monday" := 0;
            FrostOutRequestLine."Hours Not Worked Monday" := 0;
            FrostOutRequestLine."Hours Worked Tuesday" := 0;
            FrostOutRequestLine."Hours Not Worked Tuesday" := 0;
            FrostOutRequestLine."Hours Worked Wednesday" := 0;
            FrostOutRequestLine."Hours Not Worked Wednesday" := 0;
            FrostOutRequestLine."Hours Worked Thursday" := 0;
            FrostOutRequestLine."Hours Not Worked Thursday" := 0;
            FrostOutRequestLine."Hours Worked Friday" := 0;
            FrostOutRequestLine."Hours Not Worked Friday" := 0;
            FrostOutRequestLine."Hours Worked Saturday" := 0;
            FrostOutRequestLine."Hours Not Worked Saturday" := 0;
            FrostOutRequestLine."Hours Worked Sunday" := 0;
            FrostOutRequestLine."Hours Not Worked Sunday" := 0;

            FrostOutRequestLine.MODIFY(TRUE);

            CopyFrostOutLineToDetails(FrostOutRequestLine);       //Call T003963.n

        END;
      END;
    END;

    LOCAL PROCEDURE ResetAllCodes@1210190000();
    VAR
      FrostOutRequestLine@1100528303 : Record 11020672;
      YearArr@1100528300 : ARRAY [4] OF Integer;
      WeekArr@1100528301 : ARRAY [4] OF Integer;
      Counter@1100528302 : Integer;
    BEGIN
      DetermineStartYearWeek(YearArr, WeekArr);

      FOR Counter := 1 TO 4 DO BEGIN
        IF (FrostOutRequestLine.GET("Employee No.", Year, "Start Week", YearArr[Counter], WeekArr[Counter])) THEN
          IF (NOT FrostOutRequestLine.Processed) THEN BEGIN
            FrostOutRequestLine."Post Code Monday" := '';
            FrostOutRequestLine."City Monday" := '';
            FrostOutRequestLine."Reason Code Monday" := '';
            FrostOutRequestLine."Post Code Tuesday" := '';
            FrostOutRequestLine."City Tuesday" := '';
            FrostOutRequestLine."Reason Code Tuesday" := '';
            FrostOutRequestLine."Post Code Wednesday" := '';
            FrostOutRequestLine."City Wednesday" := '';
            FrostOutRequestLine."Reason Code Wednesday" := '';
            FrostOutRequestLine."Post Code Thursday" := '';
            FrostOutRequestLine."City Thursday" := '';
            FrostOutRequestLine."Reason Code Thursday" := '';
            FrostOutRequestLine."Post Code Friday" := '';
            FrostOutRequestLine."City Friday" := '';
            FrostOutRequestLine."Reason Code Friday" := '';
            FrostOutRequestLine."Post Code Saturday" := '';
            FrostOutRequestLine."City Saturday" := '';
            FrostOutRequestLine."Reason Code Saturday" := '';
            FrostOutRequestLine."Post Code Sunday" := '';
            FrostOutRequestLine."City Sunday" := '';
            FrostOutRequestLine."Reason Code Sunday" := '';

            FrostOutRequestLine.MODIFY(TRUE);

            CopyFrostOutLineToDetails(FrostOutRequestLine);       //Call T003963.n
        END;
      END;
    END;

    LOCAL PROCEDURE SetWorkedHours@1100528316(VAR FrostOutRequestLine@1100528302 : Record 11020672;PostedHourLine@1100528300 : Record 11012085);
    BEGIN
      IF (PostedHourLine.Monday <> 0) THEN
        FrostOutRequestLine."Hours Worked Monday" += PostedHourLine.Monday;
      IF (PostedHourLine.Tuesday <> 0) THEN
        FrostOutRequestLine."Hours Worked Tuesday" += PostedHourLine.Tuesday;
      IF (PostedHourLine.Wednesday <> 0) THEN
        FrostOutRequestLine."Hours Worked Wednesday" += PostedHourLine.Wednesday;
      IF (PostedHourLine.Thursday <> 0) THEN
        FrostOutRequestLine."Hours Worked Thursday" += PostedHourLine.Thursday;
      IF (PostedHourLine.Friday <> 0) THEN
        FrostOutRequestLine."Hours Worked Friday" += PostedHourLine.Friday;
      IF (PostedHourLine.Saturday <> 0) THEN
        FrostOutRequestLine."Hours Worked Saturday" += PostedHourLine.Saturday;
      IF (PostedHourLine.Sunday <> 0) THEN
        FrostOutRequestLine."Hours Worked Sunday" += PostedHourLine.Sunday;
    END;

    LOCAL PROCEDURE SetNotWorkedHours@1100528311(VAR FrostOutRequestLine@1100528302 : Record 11020672;PostedHourLine@1100528300 : Record 11012085);
    BEGIN
      IF (PostedHourLine.Monday <> 0) THEN
        FrostOutRequestLine."Hours Not Worked Monday" += PostedHourLine.Monday;
      IF (PostedHourLine.Tuesday <> 0) THEN
        FrostOutRequestLine."Hours Not Worked Tuesday" += PostedHourLine.Tuesday;
      IF (PostedHourLine.Wednesday <> 0) THEN
        FrostOutRequestLine."Hours Not Worked Wednesday" += PostedHourLine.Wednesday;
      IF (PostedHourLine.Thursday <> 0) THEN
        FrostOutRequestLine."Hours Not Worked Thursday" += PostedHourLine.Thursday;
      IF (PostedHourLine.Friday <> 0) THEN
        FrostOutRequestLine."Hours Not Worked Friday" += PostedHourLine.Friday;
      IF (PostedHourLine.Saturday <> 0) THEN
        FrostOutRequestLine."Hours Not Worked Saturday" += PostedHourLine.Saturday;
      IF (PostedHourLine.Sunday <> 0) THEN
        FrostOutRequestLine."Hours Not Worked Sunday" += PostedHourLine.Sunday;
    END;

    LOCAL PROCEDURE SetPostCodeCityAndReasonCode@1210190005(VAR FrostOutRequestLine@1100528302 : Record 11020672);
    VAR
      FrostOutRegistration@1210190000 : Record 11020670;
      CheckDate@1210190001 : Date;
    BEGIN
      IF (FrostOutRequestLine."Hours Not Worked Monday" <> 0) THEN BEGIN
        CheckDate := DWY2DATE(1, FrostOutRequestLine.Week, FrostOutRequestLine.Year);
        FrostOutRegistration.SETRANGE("Employee No.", FrostOutRequestLine."Employee No.");
        FrostOutRegistration.SETFILTER("Register Date", '<=%1', CheckDate);
        FrostOutRegistration.SETFILTER("Unregister Date", '%1|>=%2', 0D, CheckDate);
        IF (FrostOutRegistration.FINDFIRST) THEN BEGIN
          FrostOutRequestLine."Post Code Monday" := FrostOutRegistration."Post Code";
          FrostOutRequestLine."City Monday" := FrostOutRegistration.City;
          FrostOutRequestLine."Reason Code Monday":= FrostOutRegistration."Reason Code";
        END;
      END;
      IF (FrostOutRequestLine."Hours Not Worked Tuesday" <> 0) THEN BEGIN
        CheckDate := DWY2DATE(2, FrostOutRequestLine.Week, FrostOutRequestLine.Year);
        FrostOutRegistration.SETRANGE("Employee No.", FrostOutRequestLine."Employee No.");
        FrostOutRegistration.SETFILTER("Register Date", '<=%1', CheckDate);
        FrostOutRegistration.SETFILTER("Unregister Date", '%1|>=%2', 0D, CheckDate);
        IF (FrostOutRegistration.FINDFIRST) THEN BEGIN
          FrostOutRequestLine."Post Code Tuesday" := FrostOutRegistration."Post Code";
          FrostOutRequestLine."City Tuesday" := FrostOutRegistration.City;
          FrostOutRequestLine."Reason Code Tuesday":= FrostOutRegistration."Reason Code";
        END;
      END;
      IF (FrostOutRequestLine."Hours Not Worked Wednesday" <> 0) THEN BEGIN
        CheckDate := DWY2DATE(3, FrostOutRequestLine.Week, FrostOutRequestLine.Year);
        FrostOutRegistration.SETRANGE("Employee No.", FrostOutRequestLine."Employee No.");
        FrostOutRegistration.SETFILTER("Register Date", '<=%1', CheckDate);
        FrostOutRegistration.SETFILTER("Unregister Date", '%1|>=%2', 0D, CheckDate);
        IF (FrostOutRegistration.FINDFIRST) THEN BEGIN
          FrostOutRequestLine."Post Code Wednesday" := FrostOutRegistration."Post Code";
          FrostOutRequestLine."City Wednesday" := FrostOutRegistration.City;
          FrostOutRequestLine."Reason Code Wednesday":= FrostOutRegistration."Reason Code";
        END;
      END;
      IF (FrostOutRequestLine."Hours Not Worked Thursday" <> 0) THEN BEGIN
        CheckDate := DWY2DATE(4, FrostOutRequestLine.Week, FrostOutRequestLine.Year);
        FrostOutRegistration.SETRANGE("Employee No.", FrostOutRequestLine."Employee No.");
        FrostOutRegistration.SETFILTER("Register Date", '<=%1', CheckDate);
        FrostOutRegistration.SETFILTER("Unregister Date", '%1|>=%2', 0D, CheckDate);
        IF (FrostOutRegistration.FINDFIRST) THEN BEGIN
          FrostOutRequestLine."Post Code Thursday" := FrostOutRegistration."Post Code";
          FrostOutRequestLine."City Thursday" := FrostOutRegistration.City;
          FrostOutRequestLine."Reason Code Thursday":= FrostOutRegistration."Reason Code";
        END;
      END;
      IF (FrostOutRequestLine."Hours Not Worked Friday" <> 0) THEN BEGIN
        CheckDate := DWY2DATE(5, FrostOutRequestLine.Week, FrostOutRequestLine.Year);
        FrostOutRegistration.SETRANGE("Employee No.", FrostOutRequestLine."Employee No.");
        FrostOutRegistration.SETFILTER("Register Date", '<=%1', CheckDate);
        FrostOutRegistration.SETFILTER("Unregister Date", '%1|>=%2', 0D, CheckDate);
        IF (FrostOutRegistration.FINDFIRST) THEN BEGIN
          FrostOutRequestLine."Post Code Friday" := FrostOutRegistration."Post Code";
          FrostOutRequestLine."City Friday" := FrostOutRegistration.City;
          FrostOutRequestLine."Reason Code Friday":= FrostOutRegistration."Reason Code";
        END;
      END;
      IF (FrostOutRequestLine."Hours Not Worked Saturday" <> 0) THEN BEGIN
        CheckDate := DWY2DATE(6, FrostOutRequestLine.Week, FrostOutRequestLine.Year);
        FrostOutRegistration.SETRANGE("Employee No.", FrostOutRequestLine."Employee No.");
        FrostOutRegistration.SETFILTER("Register Date", '<=%1', CheckDate);
        FrostOutRegistration.SETFILTER("Unregister Date", '%1|>=%2', 0D, CheckDate);
        IF (FrostOutRegistration.FINDFIRST) THEN BEGIN
          FrostOutRequestLine."Post Code Saturday" := FrostOutRegistration."Post Code";
          FrostOutRequestLine."City Saturday" := FrostOutRegistration.City;
          FrostOutRequestLine."Reason Code Saturday":= FrostOutRegistration."Reason Code";
        END;
      END;
      IF (FrostOutRequestLine."Hours Not Worked Sunday" <> 0) THEN BEGIN
        CheckDate := DWY2DATE(7, FrostOutRequestLine.Week, FrostOutRequestLine.Year);
        FrostOutRegistration.SETRANGE("Employee No.", FrostOutRequestLine."Employee No.");
        FrostOutRegistration.SETFILTER("Register Date", '<=%1', CheckDate);
        FrostOutRegistration.SETFILTER("Unregister Date", '%1|>=%2', 0D, CheckDate);
        IF (FrostOutRegistration.FINDFIRST) THEN BEGIN
          FrostOutRequestLine."Post Code Sunday" := FrostOutRegistration."Post Code";
          FrostOutRequestLine."City Sunday" := FrostOutRegistration.City;
          FrostOutRequestLine."Reason Code Sunday":= FrostOutRegistration."Reason Code";
        END;
      END;
    END;

    PROCEDURE GetNormHourTotal@1210190003() : Decimal;
    BEGIN
      EXIT("Norm Hours Monday" + "Norm Hours Tuesday" + "Norm Hours Wednesday" +
        "Norm Hours Thursday" + "Norm Hours Friday" + "Norm Hours Saturday" + "Norm Hours Sunday");
    END;

    PROCEDURE CopyFrostOutLineToDetails@1100525000(FrostOutRequestLine@1100525000 : Record 11020672);
    VAR
      FrostOutRequestLineDetail@1100525002 : Record 11020673;
      Counter2@1100525001 : Integer;
    BEGIN
      //Call T003963.n
      FrostOutRequestLineDetail.SETRANGE("Employee No.", FrostOutRequestLine."Employee No.");
      FrostOutRequestLineDetail.SETRANGE("Start Year", FrostOutRequestLine."Start Year");
      FrostOutRequestLineDetail.SETRANGE("Start Week", FrostOutRequestLine."Start Week");
      FrostOutRequestLineDetail.SETRANGE(Year, FrostOutRequestLine.Year);
      FrostOutRequestLineDetail.SETRANGE(Week, FrostOutRequestLine.Week);
      FOR Counter2 := 0 TO 6 DO BEGIN
        FrostOutRequestLineDetail.SETRANGE(Day, Counter2);
        IF FrostOutRequestLineDetail.FINDFIRST THEN BEGIN
          FillFrostOutRequestLineDetailFields(FrostOutRequestLine,FrostOutRequestLineDetail,Counter2);
          FrostOutRequestLineDetail.MODIFY;
        END ELSE BEGIN
          FrostOutRequestLineDetail.INIT;
          FrostOutRequestLineDetail.VALIDATE("Employee No.", FrostOutRequestLine."Employee No.");
          FrostOutRequestLineDetail.VALIDATE("Start Year", FrostOutRequestLine."Start Year");
          FrostOutRequestLineDetail.VALIDATE("Start Week", FrostOutRequestLine."Start Week");
          FrostOutRequestLineDetail.VALIDATE(Year, FrostOutRequestLine.Year);
          FrostOutRequestLineDetail.VALIDATE(Week, FrostOutRequestLine.Week);
          FrostOutRequestLineDetail.VALIDATE(Day, Counter2);
          FillFrostOutRequestLineDetailFields(FrostOutRequestLine,FrostOutRequestLineDetail,Counter2);
          FrostOutRequestLineDetail.INSERT;
        END;
      END;
    END;

    PROCEDURE FillFrostOutRequestLineDetailFields@1100525001(FrostOutRequestLine@1100525000 : Record 11020672;VAR FrostOutRequestLineDetail@1100525001 : Record 11020673;Day@1100525002 : 'Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday');
    BEGIN
      //Call T003963.n
      CASE Day OF
        Day::Monday:
          BEGIN
            FrostOutRequestLineDetail.VALIDATE("Hours Worked", FrostOutRequestLine."Hours Worked Monday");
            FrostOutRequestLineDetail.VALIDATE("Hours Not Worked", FrostOutRequestLine."Hours Not Worked Monday");
            FrostOutRequestLineDetail.VALIDATE("Post Code", FrostOutRequestLine."Post Code Monday");
            FrostOutRequestLineDetail.VALIDATE(City, FrostOutRequestLine."City Monday");
            FrostOutRequestLineDetail.VALIDATE("Reason Code", FrostOutRequestLine."Reason Code Monday");
          END;
        Day::Tuesday:
          BEGIN
            FrostOutRequestLineDetail.VALIDATE("Hours Worked", FrostOutRequestLine."Hours Worked Tuesday");
            FrostOutRequestLineDetail.VALIDATE("Hours Not Worked", FrostOutRequestLine."Hours Not Worked Tuesday");
            FrostOutRequestLineDetail.VALIDATE("Post Code", FrostOutRequestLine."Post Code Tuesday");
            FrostOutRequestLineDetail.VALIDATE(City, FrostOutRequestLine."City Tuesday");
            FrostOutRequestLineDetail.VALIDATE("Reason Code", FrostOutRequestLine."Reason Code Tuesday");
          END;
        Day::Wednesday:
          BEGIN
            FrostOutRequestLineDetail.VALIDATE("Hours Worked", FrostOutRequestLine."Hours Worked Wednesday");
            FrostOutRequestLineDetail.VALIDATE("Hours Not Worked", FrostOutRequestLine."Hours Not Worked Wednesday");
            FrostOutRequestLineDetail.VALIDATE("Post Code", FrostOutRequestLine."Post Code Wednesday");
            FrostOutRequestLineDetail.VALIDATE(City, FrostOutRequestLine."City Wednesday");
            FrostOutRequestLineDetail.VALIDATE("Reason Code", FrostOutRequestLine."Reason Code Wednesday");
          END;
        Day::Thursday:
          BEGIN
            FrostOutRequestLineDetail.VALIDATE("Hours Worked", FrostOutRequestLine."Hours Worked Thursday");
            FrostOutRequestLineDetail.VALIDATE("Hours Not Worked", FrostOutRequestLine."Hours Not Worked Thursday");
            FrostOutRequestLineDetail.VALIDATE("Post Code", FrostOutRequestLine."Post Code Thursday");
            FrostOutRequestLineDetail.VALIDATE(City, FrostOutRequestLine."City Thursday");
            FrostOutRequestLineDetail.VALIDATE("Reason Code", FrostOutRequestLine."Reason Code Thursday");
          END;
        Day::Friday:
          BEGIN
            FrostOutRequestLineDetail.VALIDATE("Hours Worked", FrostOutRequestLine."Hours Worked Friday");
            FrostOutRequestLineDetail.VALIDATE("Hours Not Worked", FrostOutRequestLine."Hours Not Worked Friday");
            FrostOutRequestLineDetail.VALIDATE("Post Code", FrostOutRequestLine."Post Code Friday");
            FrostOutRequestLineDetail.VALIDATE(City, FrostOutRequestLine."City Friday");
            FrostOutRequestLineDetail.VALIDATE("Reason Code", FrostOutRequestLine."Reason Code Friday");
          END;
        Day::Saturday:
          BEGIN
            FrostOutRequestLineDetail.VALIDATE("Hours Worked", FrostOutRequestLine."Hours Worked Saturday");
            FrostOutRequestLineDetail.VALIDATE("Hours Not Worked", FrostOutRequestLine."Hours Not Worked Saturday");
            FrostOutRequestLineDetail.VALIDATE("Post Code", FrostOutRequestLine."Post Code Saturday");
            FrostOutRequestLineDetail.VALIDATE(City, FrostOutRequestLine."City Saturday");
            FrostOutRequestLineDetail.VALIDATE("Reason Code", FrostOutRequestLine."Reason Code Saturday");
          END;
        Day::Sunday:
          BEGIN
            FrostOutRequestLineDetail.VALIDATE("Hours Worked", FrostOutRequestLine."Hours Worked Sunday");
            FrostOutRequestLineDetail.VALIDATE("Hours Not Worked", FrostOutRequestLine."Hours Not Worked Sunday");
            FrostOutRequestLineDetail.VALIDATE("Post Code", FrostOutRequestLine."Post Code Sunday");
            FrostOutRequestLineDetail.VALIDATE(City, FrostOutRequestLine."City Sunday");
            FrostOutRequestLineDetail.VALIDATE("Reason Code", FrostOutRequestLine."Reason Code Sunday");
          END;



      END;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11020671) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11020671');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Frost Out Request", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    BEGIN
    END.
  }
}

