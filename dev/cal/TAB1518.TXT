OBJECT Table 1518 My Notifications
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=My Notifications;
               NOR=Mine varsler;
               SVE=Mina meddelanden];
  }
  FIELDS
  {
    { 1   ;   ;User Id             ;Code50        ;DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=User Id;
                                                              NOR=Bruker-ID;
                                                              SVE=Anv„ndar-ID];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 2   ;   ;Notification Id     ;GUID          ;CaptionML=[ENU=Notification Id;
                                                              NOR=Varslings-ID;
                                                              SVE=Meddelande-ID];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 3   ;   ;Apply to Table Id   ;Integer       ;CaptionML=[ENU=Apply to Table Id;
                                                              NOR=Bruk p† tabell-ID;
                                                              SVE=Koppla till tabell-ID];
                                                   Editable=No }
    { 4   ;   ;Enabled             ;Boolean       ;OnValidate=BEGIN
                                                                //IF Enabled <> xRec.Enabled THEN //**4PS.o
                                                                //OnStateChanged("Notification Id",Enabled); //**4PS.o
                                                                OnStateChanged("Notification Id",Enabled,"User Id"); //**4PS.n
                                                              END;

                                                   CaptionML=[ENU=Enabled;
                                                              NOR=Aktivert;
                                                              SVE=Aktiverad] }
    { 5   ;   ;Apply to Table Filter;BLOB         ;CaptionML=[ENU=Filter;
                                                              NOR=Filter;
                                                              SVE=Filter] }
    { 6   ;   ;Name                ;Text128       ;CaptionML=[ENU=Notification;
                                                              NOR=Melding;
                                                              SVE=Meddelande];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 7   ;   ;Description         ;BLOB          ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
  }
  KEYS
  {
    {    ;User Id,Notification Id                 ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ViewFilterDetailsTxt@1005 : TextConst 'ENU=(View filter details);NOR=(Vis filterdetaljer);SVE=(Vyfilterdetaljer)';
      DefineFiltersTxt@1006 : TextConst 'ENU=Define filters...;NOR=Definer filtre...;SVE=Definiera filter...';
      DefaultMyNotificationSetup@1100529600 : Record 11229374;
      SpecificUserID@1100525000 : Code[50];

    [External]
    PROCEDURE Disable@4(NotificationId@1000 : GUID) : Boolean;
    BEGIN
      IF GET(USERID,NotificationId) THEN BEGIN
        VALIDATE(Enabled,FALSE);
        MODIFY;
        EXIT(TRUE)
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsFilterEnabled@5() : Boolean;
    BEGIN
      EXIT(("Apply to Table Id" <> 0) AND Enabled);
    END;

    LOCAL PROCEDURE InitRecord@9(NotificationId@1000 : GUID;NotificationName@1002 : Text[128];DescriptionText@1001 : Text) Result : Boolean;
    VAR
      OutStream@1003 : OutStream;
    BEGIN
      //IF NOT GET(USERID,NotificationId) THEN BEGIN //**4PS.o
      IF NOT GET(GetUserID, NotificationId) THEN BEGIN //**4PS.n
        INIT;
        //"User Id" := USERID; //**4PS.o
        "User Id" := GetUserID; //**4PS.n
        "Notification Id" := NotificationId;
        Enabled := TRUE;
        Name := NotificationName;
        Description.CREATEOUTSTREAM(OutStream);
        OutStream.WRITE(DescriptionText);
        Result := TRUE;
      END;
    END;

    [External]
    PROCEDURE InsertDefault@12(NotificationId@1000 : GUID;NotificationName@1002 : Text[128];DescriptionText@1003 : Text;DefaultState@1001 : Boolean);
    BEGIN
      IF InitRecord(NotificationId,NotificationName,DescriptionText) THEN BEGIN
      //**4PS.sn
        IF DefaultMyNotificationSetup.GET(NotificationId) THEN
          Enabled := DefaultMyNotificationSetup.Enabled
        ELSE
      //**4PS.en
          Enabled := DefaultState;
        INSERT;
      END;
    END;

    [External]
    PROCEDURE InsertDefaultWithTableNum@13(NotificationId@1000 : GUID;NotificationName@1003 : Text[128];DescriptionText@1002 : Text;TableNum@1001 : Integer);
    BEGIN
      IF InitRecord(NotificationId,NotificationName,DescriptionText) THEN BEGIN
      //**4PS.sn
        IF DefaultMyNotificationSetup.GET(NotificationId) THEN BEGIN
          VALIDATE(Enabled, DefaultMyNotificationSetup.Enabled);
          IF DefaultMyNotificationSetup.Enabled THEN BEGIN
            DefaultMyNotificationSetup.CALCFIELDS("Apply to Table Filter");
            "Apply to Table Filter" := DefaultMyNotificationSetup."Apply to Table Filter";
          END;
        END;
      //**4PS.en
        "Apply to Table Id" := TableNum;
        INSERT;
      END;
    END;

    [External]
    PROCEDURE InsertDefaultWithTableNumAndFilter@6(NotificationId@1000 : GUID;NotificationName@1003 : Text[128];DescriptionText@1002 : Text;TableNum@1001 : Integer;Filters@1005 : Text);
    VAR
      FiltersOutStream@1004 : OutStream;
      NewRecord@1007 : Boolean;
    BEGIN
      NewRecord := InitRecord(NotificationId,NotificationName,DescriptionText);
      IF "Apply to Table Id" = 0 THEN BEGIN
        "Apply to Table Id" := TableNum;
        "Apply to Table Filter".CREATEOUTSTREAM(FiltersOutStream);
        FiltersOutStream.WRITE(GetXmlFromTableView(TableNum,Filters));
        IF NewRecord THEN
          INSERT
        ELSE
          MODIFY;
      END;
    END;

    [External]
    PROCEDURE GetDescription@2() Ret : Text;
    VAR
      InStream@1000 : InStream;
    BEGIN
      CALCFIELDS(Description);
      IF NOT Description.HASVALUE THEN
        EXIT;
      Description.CREATEINSTREAM(InStream);
      InStream.READ(Ret);
    END;

    LOCAL PROCEDURE GetFilteredRecord@10(VAR RecordRef@1003 : RecordRef;Filters@1001 : Text);
    VAR
      TempBlob@1000 : Record 99008535;
      RequestPageParametersHelper@1002 : Codeunit 1530;
      FiltersOutStream@1004 : OutStream;
    BEGIN
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(FiltersOutStream);
      FiltersOutStream.WRITE(Filters);

      RecordRef.OPEN("Apply to Table Id");
      RequestPageParametersHelper.ConvertParametersToFilters(RecordRef,TempBlob);
    END;

    [Internal]
    PROCEDURE GetFiltersAsDisplayText@1() : Text;
    VAR
      RecordRef@1002 : RecordRef;
    BEGIN
      IF NOT IsFilterEnabled THEN
        EXIT;

      GetFilteredRecord(RecordRef,GetFiltersAsText);

      IF RecordRef.GETFILTERS <> '' THEN
        EXIT(RecordRef.GETFILTERS);

      EXIT(ViewFilterDetailsTxt);
    END;

    LOCAL PROCEDURE GetFiltersAsText@8() Filters : Text;
    VAR
      FiltersInStream@1000 : InStream;
    BEGIN
      IF NOT IsFilterEnabled THEN
        EXIT;

      CALCFIELDS("Apply to Table Filter");
      IF NOT "Apply to Table Filter".HASVALUE THEN
        EXIT;
      "Apply to Table Filter".CREATEINSTREAM(FiltersInStream);
      FiltersInStream.READ(Filters);
    END;

    [External]
    PROCEDURE GetXmlFromTableView@15(TableID@1001 : Integer;View@1002 : Text) : Text;
    VAR
      XMLDOMMgt@1008 : Codeunit 6224;
      DataItemXmlNode@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DataItemsXmlNode@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlDoc@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReportParametersXmlNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XmlDoc := XmlDoc.XmlDocument;

      XMLDOMMgt.AddRootElement(XmlDoc,'ReportParameters',ReportParametersXmlNode);
      XMLDOMMgt.AddDeclaration(XmlDoc,'1.0','utf-8','yes');

      XMLDOMMgt.AddElement(ReportParametersXmlNode,'DataItems','','',DataItemsXmlNode);
      XMLDOMMgt.AddElement(DataItemsXmlNode,'DataItem',View,'',DataItemXmlNode);
      XMLDOMMgt.AddAttribute(DataItemXmlNode,'name',STRSUBSTNO('Table%1',TableID));

      EXIT(XmlDoc.InnerXml);
    END;

    [Internal]
    PROCEDURE OpenFilterSettings@17() Changed : Boolean;
    VAR
      DummyMyNotifications@1003 : Record 1518;
      RecordRef@1002 : RecordRef;
      FiltersOutStream@1000 : OutStream;
      NewFilters@1001 : Text;
    BEGIN
      IF NOT IsFilterEnabled THEN
        EXIT;

      IF RunDynamicRequestPage(NewFilters,
           GetFiltersAsText,
           "Apply to Table Id")
      THEN BEGIN
        GetFilteredRecord(RecordRef,NewFilters);
        IF RecordRef.GETFILTERS = '' THEN
          "Apply to Table Filter" := DummyMyNotifications."Apply to Table Filter"
        ELSE BEGIN
          "Apply to Table Filter".CREATEOUTSTREAM(FiltersOutStream);
          FiltersOutStream.WRITE(NewFilters);
        END;
        MODIFY;
        Changed := TRUE;
      END;
    END;

    LOCAL PROCEDURE RunDynamicRequestPage@20(VAR ReturnFilters@1004 : Text;Filters@1005 : Text;TableNum@1001 : Integer) FiltersSet : Boolean;
    VAR
      RequestPageParametersHelper@1002 : Codeunit 1530;
      FilterPageBuilder@1003 : FilterPageBuilder;
    BEGIN
      IF NOT RequestPageParametersHelper.BuildDynamicRequestPage(FilterPageBuilder,DefineFiltersTxt,TableNum) THEN
        EXIT(FALSE);

      IF Filters <> '' THEN
        IF NOT RequestPageParametersHelper.SetViewOnDynamicRequestPage(
             FilterPageBuilder,Filters,DefineFiltersTxt,TableNum)
        THEN
          EXIT(FALSE);

      FilterPageBuilder.PAGECAPTION := DefineFiltersTxt;
      IF NOT FilterPageBuilder.RUNMODAL THEN
        EXIT(FALSE);

      ReturnFilters :=
        RequestPageParametersHelper.GetViewFromDynamicRequestPage(FilterPageBuilder,DefineFiltersTxt,TableNum);

      FiltersSet := TRUE;
    END;

    [Internal]
    PROCEDURE InsertNotificationWithDefaultFilter@25(NotificationId@1000 : GUID);
    VAR
      InstructionMgt@1002 : Codeunit 1330;
    BEGIN
      IF NotificationId = InstructionMgt.GetClosingUnpostedDocumentNotificationId THEN BEGIN
        InstructionMgt.InsertDefaultUnpostedDoucumentNotification;
        GET(USERID,NotificationId);
      END;
    END;

    [External]
    PROCEDURE IsEnabledForRecord@11(NotificationId@1008 : GUID;Record@1000 : Variant) : Boolean;
    VAR
      RecordRef@1007 : RecordRef;
      RecordRefPassed@1006 : RecordRef;
      Filters@1001 : Text;
    BEGIN
      IF NOT IsEnabledRec(NotificationId,Record) THEN
        EXIT(FALSE);

      IF NOT Record.ISRECORD THEN
        EXIT(TRUE);

      RecordRefPassed.GETTABLE(Record);
      RecordRefPassed.FILTERGROUP(2);
      RecordRefPassed.SETRECFILTER;
      RecordRefPassed.FILTERGROUP(0);

      IF NOT GET(USERID,NotificationId) THEN
        InsertNotificationWithDefaultFilter(NotificationId);
      Filters := GetFiltersAsText;
      IF Filters = '' THEN
        EXIT(TRUE);

      GetFilteredRecord(RecordRef,Filters);
      RecordRefPassed.SETVIEW(RecordRef.GETVIEW);
      EXIT(NOT RecordRefPassed.ISEMPTY);
    END;

    [External]
    PROCEDURE IsEnabled@14(NotificationId@1000 : GUID) : Boolean;
    VAR
      DummyRecord@1001 : Variant;
    BEGIN
      EXIT(IsEnabledRec(NotificationId,DummyRecord));
    END;

    LOCAL PROCEDURE IsEnabledRec@16(NotificationId@1000 : GUID;Record@1003 : Variant) : Boolean;
    VAR
      IsNotificationEnabled@1002 : Boolean;
    BEGIN
      IsNotificationEnabled := TRUE;

      IF GET(USERID,NotificationId) THEN
        IsNotificationEnabled := Enabled;

      OnAfterIsNotificationEnabled(NotificationId,IsNotificationEnabled,Record);

      EXIT(IsNotificationEnabled);
    END;

    [Integration]
    [External]
    PROCEDURE OnStateChanged@3(NotificationId@1001 : GUID;NewEnabledState@1000 : Boolean;NotificationUserID@1100529600 : Code[50]);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnAfterIsNotificationEnabled@64(NotificationId@1001 : GUID;VAR IsNotificationEnabled@1000 : Boolean;Record@1002 : Variant);
    BEGIN
    END;

    PROCEDURE UpdateUserNotifications@1100529600(LocUserID@1100529600 : Code[50];DefaultMyNotificationSetup@1100529602 : Record 11229374);
    VAR
      DescriptionText@1100529601 : Text;
      InStream@1100529603 : InStream;
    BEGIN
      //**4PS
      SetSpecificUserID(LocUserID);
      IF NOT GET(LocUserID, DefaultMyNotificationSetup."Notification Id") THEN BEGIN
        DefaultMyNotificationSetup.CALCFIELDS(Description);
        IF DefaultMyNotificationSetup.Description.HASVALUE THEN BEGIN
          DefaultMyNotificationSetup.Description.CREATEINSTREAM(InStream);
          InStream.READ(DescriptionText);
        END;
        InitRecord(DefaultMyNotificationSetup."Notification Id", DefaultMyNotificationSetup.Name, DescriptionText);
        INSERT;
      END;

      xRec := Rec;
      "Apply to Table Id" := DefaultMyNotificationSetup."Apply to Table Id";
      CLEAR("Apply to Table Filter");
      IF "Apply to Table Id" <> 0 THEN BEGIN
        DefaultMyNotificationSetup.CALCFIELDS("Apply to Table Filter");
        "Apply to Table Filter" := DefaultMyNotificationSetup."Apply to Table Filter";
      END;

      VALIDATE(Enabled, DefaultMyNotificationSetup.Enabled);
      MODIFY;
    END;

    PROCEDURE DeleteUserNotifications@1100529601(DeletedUserID@1100529600 : Code[50]);
    VAR
      MyNotifications@1100529601 : Record 1518;
    BEGIN
      //**4PS
      MyNotifications.SETRANGE("User Id", DeletedUserID);
      MyNotifications.DELETEALL;
    END;

    PROCEDURE SetSpecificUserID@1100525001(SpecUserID@1100525000 : Code[50]);
    BEGIN
      //**4PS
      SpecificUserID := SpecUserID;
    END;

    LOCAL PROCEDURE GetUserID@1100525002() : Code[50];
    BEGIN
      //**4PS
      IF SpecificUserID <> '' THEN
        EXIT(SpecificUserID)
      ELSE
        EXIT(USERID);
    END;

    BEGIN
    END.
  }
}

