OBJECT Page 5471 Customer Entity
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=customers;
               NOR=customers;
               SVE=customers];
    SourceTable=Table18;
    DelayedInsert=Yes;
    PageType=API;
    ChangeTrackingAllowed=Yes;
    EntitySetName=customers;
    EntityName=customer;
    OnAfterGetRecord=BEGIN
                       SetCalculatedFields;
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                END;

    OnInsertRecord=VAR
                     Customer@1002 : Record 18;
                     RecRef@1005 : RecordRef;
                   BEGIN
                     IF Name = '' THEN
                       ERROR(NotProvidedCustomerNameErr);

                     Customer.SETRANGE("No.","No.");
                     IF NOT Customer.ISEMPTY THEN
                       INSERT;

                     INSERT(TRUE);

                     ProcessPostalAddress;

                     RecRef.GETTABLE(Rec);
                     GraphMgtGeneralTools.ProcessNewRecordFromAPI(RecRef,TempFieldSet,CURRENTDATETIME);
                     RecRef.SETTABLE(Rec);

                     MODIFY(TRUE);
                     SetCalculatedFields;
                     EXIT(FALSE);
                   END;

    OnModifyRecord=VAR
                     Customer@1001 : Record 18;
                     GraphMgtGeneralTools@1000 : Codeunit 5465;
                   BEGIN
                     IF xRec.Id <> Id THEN
                       GraphMgtGeneralTools.ErrorIdImmutable;

                     Customer.SETRANGE(Id,Id);
                     Customer.FINDFIRST;

                     ProcessPostalAddress;

                     IF "No." = Customer."No." THEN
                       MODIFY(TRUE)
                     ELSE BEGIN
                       Customer.TRANSFERFIELDS(Rec,FALSE);
                       Customer.RENAME("No.");
                       TRANSFERFIELDS(Customer);
                     END;

                     SetCalculatedFields;
                   END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 24  ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=Id;
                           NOR=Id;
                           SVE=Id];
                ApplicationArea=#All;
                SourceExpr=Id;
                Editable=FALSE }

    { 3   ;2   ;Field     ;
                Name=number;
                CaptionML=[@@@={Locked};
                           ENU=Number;
                           NOR=Number;
                           SVE=Number];
                ApplicationArea=#All;
                SourceExpr="No." }

    { 4   ;2   ;Field     ;
                Name=displayName;
                CaptionML=[@@@={Locked};
                           ENU=DisplayName;
                           NOR=DisplayName;
                           SVE=DisplayName];
                ApplicationArea=#All;
                SourceExpr=Name;
                OnValidate=BEGIN
                             IF Name = '' THEN
                               ERROR(BlankCustomerNameErr);
                             RegisterFieldSet(FIELDNO(Name));
                           END;
                            }

    { 22  ;2   ;Field     ;
                Name=type;
                CaptionML=[@@@={Locked};
                           ENU=type;
                           NOR=type;
                           SVE=type];
                ApplicationArea=#All;
                SourceExpr="Contact Type";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Contact Type"));
                           END;
                            }

    { 14  ;2   ;Field     ;
                Name=address;
                CaptionML=[@@@={Locked};
                           ENU=address;
                           NOR=address;
                           SVE=address];
                ToolTipML=[ENU=Specifies the address for the customer.;
                           NOR=Angir kundeadressen.;
                           SVE=Anger adressen till kunden.];
                ApplicationArea=#All;
                SourceExpr=PostalAddressJSON;
                OnValidate=BEGIN
                             PostalAddressSet := TRUE;
                           END;

                ODataEDMType=POSTALADDRESS }

    { 11  ;2   ;Field     ;
                Name=phoneNumber;
                CaptionML=[@@@={Locked};
                           ENU=PhoneNumber;
                           NOR=PhoneNumber;
                           SVE=PhoneNumber];
                ApplicationArea=#All;
                SourceExpr="Phone No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Phone No."));
                           END;
                            }

    { 21  ;2   ;Field     ;
                Name=email;
                CaptionML=[@@@={Locked};
                           ENU=Email;
                           NOR=Email;
                           SVE=Email];
                ApplicationArea=#All;
                SourceExpr="E-Mail";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("E-Mail"));
                           END;
                            }

    { 20  ;2   ;Field     ;
                Name=website;
                CaptionML=[@@@={Locked};
                           ENU=Website;
                           NOR=Website;
                           SVE=Website];
                ApplicationArea=#All;
                SourceExpr="Home Page";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Home Page"));
                           END;
                            }

    { 26  ;2   ;Field     ;
                Name=taxLiable;
                CaptionML=[@@@={Locked};
                           ENU=TaxLiable;
                           NOR=TaxLiable;
                           SVE=TaxLiable];
                ApplicationArea=#All;
                SourceExpr="Tax Liable";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Tax Liable"));
                           END;
                            }

    { 9   ;2   ;Field     ;
                Name=taxAreaId;
                CaptionML=[@@@={Locked};
                           ENU=taxAreaId;
                           NOR=taxAreaId;
                           SVE=taxAreaId];
                ApplicationArea=#All;
                SourceExpr="Tax Area ID";
                OnValidate=VAR
                             GeneralLedgerSetup@1000 : Record 98;
                           BEGIN
                             RegisterFieldSet(FIELDNO("Tax Area ID"));

                             IF NOT GeneralLedgerSetup.UseVat THEN
                               RegisterFieldSet(FIELDNO("Tax Area Code"))
                             ELSE
                               RegisterFieldSet(FIELDNO("VAT Bus. Posting Group"));
                           END;
                            }

    { 10  ;2   ;Field     ;
                Name=taxAreaDisplayName;
                CaptionML=[@@@={Locked};
                           ENU=taxAreaDisplayName;
                           NOR=taxAreaDisplayName;
                           SVE=taxAreaDisplayName];
                ToolTipML=[ENU=Specifies the display name of the tax area.;
                           NOR=Angir visningsnavnet for mva-omr†det.;
                           SVE=Anger skatteomr†de visningsnamn.];
                ApplicationArea=#All;
                SourceExpr=TaxAreaDisplayName;
                Editable=FALSE }

    { 19  ;2   ;Field     ;
                Name=taxRegistrationNumber;
                CaptionML=[@@@={Locked};
                           ENU=taxRegistrationNumber;
                           NOR=taxRegistrationNumber;
                           SVE=taxRegistrationNumber];
                ApplicationArea=#All;
                SourceExpr="VAT Registration No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("VAT Registration No."));
                           END;
                            }

    { 5   ;2   ;Field     ;
                Name=currencyId;
                CaptionML=[@@@={Locked};
                           ENU=CurrencyId;
                           NOR=CurrencyId;
                           SVE=CurrencyId];
                ApplicationArea=#All;
                SourceExpr="Currency Id";
                OnValidate=BEGIN
                             IF "Currency Id" = BlankGUID THEN
                               "Currency Code" := ''
                             ELSE BEGIN
                               Currency.SETRANGE(Id,"Currency Id");
                               IF NOT Currency.FINDFIRST THEN
                                 ERROR(CurrencyIdDoesNotMatchACurrencyErr);

                               "Currency Code" := Currency.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Currency Id"));
                             RegisterFieldSet(FIELDNO("Currency Code"));
                           END;
                            }

    { 12  ;2   ;Field     ;
                Name=currencyCode;
                CaptionML=[@@@={Locked};
                           ENU=CurrencyCode;
                           NOR=CurrencyCode;
                           SVE=CurrencyCode];
                ApplicationArea=#All;
                SourceExpr=CurrencyCodeTxt;
                OnValidate=BEGIN
                             "Currency Code" :=
                               GraphMgtGeneralTools.TranslateCurrencyCodeToNAVCurrencyCode(
                                 LCYCurrencyCode,COPYSTR(CurrencyCodeTxt,1,MAXSTRLEN(LCYCurrencyCode)));

                             IF Currency.Code <> '' THEN BEGIN
                               IF Currency.Code <> "Currency Code" THEN
                                 ERROR(CurrencyValuesDontMatchErr);
                               EXIT;
                             END;

                             IF "Currency Code" = '' THEN
                               "Currency Id" := BlankGUID
                             ELSE BEGIN
                               IF NOT Currency.GET("Currency Code") THEN
                                 ERROR(CurrencyCodeDoesNotMatchACurrencyErr);

                               "Currency Id" := Currency.Id;
                             END;

                             RegisterFieldSet(FIELDNO("Currency Id"));
                             RegisterFieldSet(FIELDNO("Currency Code"));
                           END;
                            }

    { 23  ;2   ;Field     ;
                Name=paymentTermsId;
                CaptionML=[@@@={Locked};
                           ENU=PaymentTermsId;
                           NOR=PaymentTermsId;
                           SVE=PaymentTermsId];
                ApplicationArea=#All;
                SourceExpr="Payment Terms Id";
                OnValidate=BEGIN
                             IF "Payment Terms Id" = BlankGUID THEN
                               "Payment Terms Code" := ''
                             ELSE BEGIN
                               PaymentTerms.SETRANGE(Id,"Payment Terms Id");
                               IF NOT PaymentTerms.FINDFIRST THEN
                                 ERROR(PaymentTermsIdDoesNotMatchAPaymentTermsErr);

                               "Payment Terms Code" := PaymentTerms.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Payment Terms Id"));
                             RegisterFieldSet(FIELDNO("Payment Terms Code"));
                           END;
                            }

    { 25  ;2   ;Field     ;
                Name=shipmentMethodId;
                CaptionML=[@@@={Locked};
                           ENU=ShipmentMethodId;
                           NOR=ShipmentMethodId;
                           SVE=ShipmentMethodId];
                ApplicationArea=#All;
                SourceExpr="Shipment Method Id";
                OnValidate=BEGIN
                             IF "Shipment Method Id" = BlankGUID THEN
                               "Shipment Method Code" := ''
                             ELSE BEGIN
                               ShipmentMethod.SETRANGE(Id,"Shipment Method Id");
                               IF NOT ShipmentMethod.FINDFIRST THEN
                                 ERROR(ShipmentMethodIdDoesNotMatchAShipmentMethodErr);

                               "Shipment Method Code" := ShipmentMethod.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Shipment Method Id"));
                             RegisterFieldSet(FIELDNO("Shipment Method Code"));
                           END;
                            }

    { 27  ;2   ;Field     ;
                Name=paymentMethodId;
                CaptionML=[@@@={Locked};
                           ENU=PaymentMethodId;
                           NOR=PaymentMethodId;
                           SVE=PaymentMethodId];
                ApplicationArea=#All;
                SourceExpr="Payment Method Id";
                OnValidate=BEGIN
                             IF "Payment Method Id" = BlankGUID THEN
                               "Payment Method Code" := ''
                             ELSE BEGIN
                               PaymentMethod.SETRANGE(Id,"Payment Method Id");
                               IF NOT PaymentMethod.FINDFIRST THEN
                                 ERROR(PaymentMethodIdDoesNotMatchAPaymentMethodErr);

                               "Payment Method Code" := PaymentMethod.Code;
                             END;

                             RegisterFieldSet(FIELDNO("Payment Method Id"));
                             RegisterFieldSet(FIELDNO("Payment Method Code"));
                           END;
                            }

    { 17  ;2   ;Field     ;
                Name=blocked;
                CaptionML=[@@@={Locked};
                           ENU=Blocked;
                           NOR=Blocked;
                           SVE=Blocked];
                ApplicationArea=#All;
                SourceExpr=Blocked;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Blocked));
                           END;
                            }

    { 18  ;2   ;Field     ;
                Name=balance;
                CaptionML=[@@@={Locked};
                           ENU=Balance;
                           NOR=Balance;
                           SVE=Balance];
                ApplicationArea=#All;
                SourceExpr=BalanceLCY;
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                Name=overdueAmount;
                CaptionML=[@@@={Locked};
                           ENU=overdueAmount;
                           NOR=overdueAmount;
                           SVE=overdueAmount];
                ApplicationArea=#All;
                SourceExpr=OverdueAmount;
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                Name=totalSalesExcludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalSalesExcludingTax;
                           NOR=totalSalesExcludingTax;
                           SVE=totalSalesExcludingTax];
                ApplicationArea=#All;
                SourceExpr=SalesLCY;
                Editable=FALSE }

    { 7   ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=LastModifiedDateTime;
                           NOR=LastModifiedDateTime;
                           SVE=LastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last Modified Date Time" }

    { 13  ;2   ;Part      ;
                Name=picture;
                CaptionML=[ENU=picture;
                           NOR=bilde;
                           SVE=bild];
                ApplicationArea=#All;
                SubPageLink=Id=FIELD(Id);
                PagePartID=Page5468;
                EntitySetName=picture;
                EntityName=picture;
                PartType=Page }

    { 15  ;2   ;Part      ;
                Name=defaultDimensions;
                CaptionML=[@@@={Locked};
                           ENU=Default Dimensions;
                           NOR=Default Dimensions;
                           SVE=Default Dimensions];
                ApplicationArea=#All;
                SubPageLink=ParentId=FIELD(Id);
                PagePartID=Page5509;
                EntitySetName=defaultDimensions;
                EntityName=defaultDimensions;
                PartType=Page }

  }
  CODE
  {
    VAR
      Currency@1009 : Record 4;
      PaymentTerms@1016 : Record 3;
      ShipmentMethod@1018 : Record 10;
      PaymentMethod@1025 : Record 289;
      TempFieldSet@1003 : TEMPORARY Record 2000000041;
      GraphMgtGeneralTools@1008 : Codeunit 5465;
      LCYCurrencyCode@1007 : Code[10];
      CurrencyCodeTxt@1006 : Text;
      PostalAddressJSON@1004 : Text;
      TaxAreaDisplayName@1027 : Text;
      OverdueAmount@1005 : Decimal;
      CurrencyValuesDontMatchErr@1012 : TextConst '@@@={Locked};ENU=The currency values do not match to a specific Currency.;NOR=The currency values do not match to a specific Currency.;SVE=The currency values do not match to a specific Currency.';
      CurrencyIdDoesNotMatchACurrencyErr@1011 : TextConst '@@@={Locked};ENU=The "currencyId" does not match to a Currency.;NOR=The "currencyId" does not match to a Currency.;SVE=The "currencyId" does not match to a Currency.';
      CurrencyCodeDoesNotMatchACurrencyErr@1010 : TextConst '@@@={Locked};ENU=The "currencyCode" does not match to a Currency.;NOR=The "currencyCode" does not match to a Currency.;SVE=The "currencyCode" does not match to a Currency.';
      PaymentTermsIdDoesNotMatchAPaymentTermsErr@1014 : TextConst '@@@={Locked};ENU=The "paymentTermsId" does not match to a Payment Terms.;NOR=The "paymentTermsId" does not match to a Payment Terms.;SVE=The "paymentTermsId" does not match to a Payment Terms.';
      ShipmentMethodIdDoesNotMatchAShipmentMethodErr@1020 : TextConst '@@@={Locked};ENU=The "shipmentMethodId" does not match to a Shipment Method.;NOR=The "shipmentMethodId" does not match to a Shipment Method.;SVE=The "shipmentMethodId" does not match to a Shipment Method.';
      PaymentMethodIdDoesNotMatchAPaymentMethodErr@1023 : TextConst '@@@={Locked};ENU=The "paymentMethodId" does not match to a Payment Method.;NOR=The "paymentMethodId" does not match to a Payment Method.;SVE=The "paymentMethodId" does not match to a Payment Method.';
      BlankGUID@1026 : GUID;
      NotProvidedCustomerNameErr@1029 : TextConst '@@@={Locked};ENU=A "displayName" must be provided.;NOR=A "displayName" must be provided.;SVE=A "displayName" must be provided.';
      BlankCustomerNameErr@1028 : TextConst '@@@={Locked};ENU=The blank "displayName" is not allowed.;NOR=The blank "displayName" is not allowed.;SVE=The blank "displayName" is not allowed.';
      PostalAddressSet@1030 : Boolean;
      BalanceLCY@1502 : Decimal;
      SalesLCY@1503 : Decimal;

    LOCAL PROCEDURE SetCalculatedFields@6();
    VAR
      TaxAreaBuffer@1001 : Record 5504;
      GraphMgtCustomer@1000 : Codeunit 5471;
    BEGIN
      PostalAddressJSON := GraphMgtCustomer.PostalAddressToJSON(Rec);
      CurrencyCodeTxt := GraphMgtGeneralTools.TranslateNAVCurrencyCodeToCurrencyCode(LCYCurrencyCode,"Currency Code");

      SETRANGE("Date Filter",0D,WORKDATE - 1);
      CALCFIELDS("Balance Due (LCY)");
      OverdueAmount := "Balance Due (LCY)";
      SETRANGE("Date Filter",0D,WORKDATE);
      CALCFIELDS("Sales (LCY)","Balance (LCY)");
      SalesLCY := "Sales (LCY)";
      BalanceLCY := "Balance (LCY)";
      TaxAreaDisplayName := TaxAreaBuffer.GetTaxAreaDisplayName("Tax Area ID");
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(Id);
      CLEAR(TaxAreaDisplayName);
      CLEAR(PostalAddressJSON);
      CLEAR(OverdueAmount);
      CLEAR(BalanceLCY);
      CLEAR(SalesLCY);
      CLEAR(PostalAddressSet);
      TempFieldSet.DELETEALL;
    END;

    LOCAL PROCEDURE RegisterFieldSet@11(FieldNo@1000 : Integer);
    BEGIN
      IF TempFieldSet.GET(DATABASE::Customer,FieldNo) THEN
        EXIT;

      TempFieldSet.INIT;
      TempFieldSet.TableNo := DATABASE::Customer;
      TempFieldSet.VALIDATE("No.",FieldNo);
      TempFieldSet.INSERT(TRUE);
    END;

    LOCAL PROCEDURE ProcessPostalAddress@5();
    VAR
      GraphMgtCustomer@1001 : Codeunit 5471;
    BEGIN
      IF NOT PostalAddressSet THEN
        EXIT;

      GraphMgtCustomer.UpdatePostalAddress(PostalAddressJSON,Rec);

      IF xRec.Address <> Address THEN
        RegisterFieldSet(FIELDNO(Address));

      IF xRec."Address 2" <> "Address 2" THEN
        RegisterFieldSet(FIELDNO("Address 2"));

      IF xRec.City <> City THEN
        RegisterFieldSet(FIELDNO(City));

      IF xRec."Country/Region Code" <> "Country/Region Code" THEN
        RegisterFieldSet(FIELDNO("Country/Region Code"));

      IF xRec."Post Code" <> "Post Code" THEN
        RegisterFieldSet(FIELDNO("Post Code"));

      IF xRec.County <> County THEN
        RegisterFieldSet(FIELDNO(County));
    END;

    BEGIN
    END.
  }
}

