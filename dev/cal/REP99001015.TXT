OBJECT Report 99001015 Calculate Subcontracts
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Fremdarbeit berechnen;
               ENU=Calculate Subcontracts;
               NLD=Uitbestedingen berekenen;
               NOR=Beregn underleveranser;
               SVE=Ber„kna underentreprenad];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   MfgSetup.GET;
                 END;

    OnPreReport=BEGIN
                  ReqWkshTmpl.GET(ReqLine."Worksheet Template Name");
                  ReqWkShName.GET(ReqLine."Worksheet Template Name",ReqLine."Journal Batch Name");
                  ReqLine.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
                  ReqLine.SETRANGE("Journal Batch Name",ReqLine."Journal Batch Name");
                  ReqLine.LOCKTABLE;

                  IF ReqLine.FINDLAST THEN
                    ReqLine.INIT;
                  Window.OPEN(Text000 + Text001);
                END;

  }
  DATASET
  {
    { 8481;    ;DataItem;                    ;
               DataItemTable=Table99000754;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               ReqLine.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
                               ReqLine.SETRANGE("Journal Batch Name",ReqLine."Journal Batch Name");
                               ReqLine.DELETEALL;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF "Subcontractor No." = '' THEN
                                    CurrReport.SKIP;

                                  Window.UPDATE(1,"No.");
                                END;

               ReqFilterFields=No.,Subcontractor No. }

    { 4877;1   ;DataItem;                    ;
               DataItemTable=Table5409;
               DataItemTableView=SORTING(Type,No.)
                                 WHERE(Status=CONST(Released),
                                       Type=CONST(Work Center),
                                       Routing Status=FILTER(<Finished));
               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(2,"Prod. Order No.");

                                  ProdOrderLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing No.","Routing Reference No.");
                                  ProdOrderLine.SETRANGE(Status,Status);
                                  ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
                                  ProdOrderLine.SETRANGE("Routing No.","Routing No.");
                                  ProdOrderLine.SETRANGE("Routing Reference No.","Routing Reference No.");
                                  IF ProdOrderLine.FIND('-') THEN BEGIN
                                    DeleteRepeatedReqLines;
                                    REPEAT
                                      BaseQtyToPurch :=
                                        CostCalcMgt.CalcQtyAdjdForRoutingScrap(
                                          CostCalcMgt.CalcQtyAdjdForBOMScrap(
                                            ProdOrderLine."Quantity (Base)",ProdOrderLine."Scrap %"),
                                          "Scrap Factor % (Accumulated)","Fixed Scrap Qty. (Accum.)") -
                                        (CostCalcMgt.CalcOutputQtyBaseOnPurchOrder(ProdOrderLine,"Prod. Order Routing Line") +
                                         CostCalcMgt.CalcActOutputQtyBase(ProdOrderLine,"Prod. Order Routing Line"));
                                      QtyToPurch := ROUND(BaseQtyToPurch / ProdOrderLine."Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
                                      IF QtyToPurch > 0 THEN
                                        InsertReqWkshLine;
                                    UNTIL ProdOrderLine.NEXT = 0;
                                  END;
                                END;

               ReqFilterFields=Prod. Order No.,Starting Date;
               DataItemLink=No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   ReqWkshEditable := (PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh");
                   TransWkshEditable := (TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh");
                 END;

    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  CaptionML=[DEU=Fertigungsauftrag;
                             ENU=Production Order;
                             NLD=Productieorder;
                             NOR=Produksjonsordre;
                             SVE=Produktionsorder];
                  OptionCaptionML=[DEU=" ,Geplant,Fest geplant,Fest geplant & drucken";
                                   ENU=" ,Planned,Firm Planned,Firm Planned & Print";
                                   NLD=" ,Gepland,Vast gepland,Vast gepland en afdrukken";
                                   NOR=" ,Planlagt,Faste Planlagt,Fast Planlagt & Skriv ut";
                                   SVE=" ,Planerad,Fast planerad,Fast planerad & Skriv ut"];
                  SourceExpr=ProdOrderChoice }

      { 1100525003;2;Field  ;
                  CaptionML=[DEU=Einkaufsbestellung;
                             ENU=Purchase Order;
                             NLD=Inkooporder;
                             NOR=Bestilling;
                             SVE=Ink”psorder];
                  OptionCaptionML=[DEU=" ,Bestellungen erst.,Bestellungen erst. & drucken,In Best.-Vorschlag kopieren";
                                   ENU=" ,Make Purch. Orders,Make Purch. Orders & Print,Copy to Req. Wksh";
                                   NLD=" ,Inkooporders maken,Inkooporders maken en afdrukken,Kopi‰ren naar inkoopvoorstel";
                                   NOR=" ,Lag bestilling,Lag bestilling og skriv ut,Overf›r til best.forslag";
                                   SVE=" ,Skapa ink”psorder,Skapa ink”psorder & skriv ut,Kopiera till ink”psf”rslag"];
                  SourceExpr=PurchOrderChoice;
                  OnValidate=BEGIN
                               ReqWkshEditable := (PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh");
                             END;
                              }

      { 1100525004;2;Group  ;
                  CaptionML=[DEU=In Bestellvorschlag kopieren;
                             ENU=Copy to Req. Worksheet;
                             NLD=Naar ink.-voorstel kopi‰ren;
                             NOR=Kopier til Rekvisisjonsark;
                             SVE=Kopiera till ink”psf”rslag];
                  GroupType=Group }

      { 1100525005;3;Field  ;
                  CaptionML=[DEU=Vorlagenname;
                             ENU=Template Name;
                             NLD=Sjabloonnaam;
                             NOR=Malnavn;
                             SVE=Mallnamn];
                  SourceExpr=ReqWkshTemp;
                  TableRelation="Req. Wksh. Template";
                  Enabled=ReqWkshEditable;
                  OnValidate=BEGIN
                               ReqWksh := '';
                             END;

                  OnLookup=BEGIN
                             IF PAGE.RUNMODAL(PAGE::"Req. Worksheet Templates",ReqWkshTmpl) = ACTION::LookupOK THEN BEGIN
                               Text := ReqWkshTmpl.Name;
                               EXIT(TRUE);
                             END ELSE
                               EXIT(FALSE);
                           END;
                            }

      { 1100525006;3;Field  ;
                  CaptionML=[DEU=Vorschlagsname;
                             ENU=Worksheet Name;
                             NLD=Werkbladnaam;
                             NOR=Navn p† Regneark;
                             SVE=Kalkylbladet];
                  SourceExpr=ReqWksh;
                  TableRelation="Requisition Wksh. Name".Name;
                  Editable=ReqWkshEditable;
                  OnLookup=BEGIN
                             ReqWkShName.SETFILTER("Worksheet Template Name",ReqWkshTemp);
                             IF PAGE.RUNMODAL(PAGE::"Req. Wksh. Names",ReqWkShName) = ACTION::LookupOK THEN BEGIN
                               Text := ReqWkShName.Name;
                               EXIT(TRUE);
                             END ELSE
                               EXIT(FALSE);
                           END;
                            }

      { 1100525007;2;Field  ;
                  CaptionML=[DEU=Umlagerungsauftrag;
                             ENU=Transfer Order;
                             NLD=Transferorder;
                             NOR=Overf›ringsordre;
                             SVE=™verf”ringsorder];
                  SourceExpr=TransOrderChoice;
                  OnValidate=BEGIN
                               TransWkshEditable := (TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh");
                             END;
                              }

      { 1100525008;2;Group  ;
                  CaptionML=[DEU=In Bestellvorschlag kopieren;
                             ENU=Copy to Req. Worksheet;
                             NLD=Naar ink.-voorstel kopi‰ren;
                             NOR=Kopier til Rekvisisjonsark;
                             SVE=Kopiera till ink”psf”rslag];
                  GroupType=Group }

      { 1100525009;3;Field  ;
                  CaptionML=[DEU=Vorlagenname;
                             ENU=Template Name;
                             NLD=Sjabloonnaam;
                             NOR=Malnavn;
                             SVE=Mallnamn];
                  SourceExpr=TransWkshTemp;
                  TableRelation="Req. Wksh. Template";
                  Enabled=TransWkshEditable;
                  OnValidate=BEGIN
                               TransWkshName := '';
                             END;

                  OnLookup=BEGIN
                             IF PAGE.RUNMODAL(PAGE::"Req. Worksheet Templates",ReqWkshTmpl) = ACTION::LookupOK THEN BEGIN
                               Text := ReqWkshTmpl.Name;
                               EXIT(TRUE);
                             END ELSE
                               EXIT(FALSE);
                           END;
                            }

      { 1100525010;3;Field  ;
                  CaptionML=[DEU=Vorschlagsname;
                             ENU=Worksheet Name;
                             NLD=Werkbladnaam;
                             NOR=Navn p† Regneark;
                             SVE=Kalkylbladet];
                  SourceExpr=TransWkshName;
                  Enabled=TransWkshEditable;
                  OnLookup=BEGIN
                             ReqWkShName.SETFILTER("Worksheet Template Name",TransWkshTemp);
                             IF PAGE.RUNMODAL(PAGE::"Req. Wksh. Names",ReqWkShName) = ACTION::LookupOK THEN BEGIN
                               Text := ReqWkShName.Name;
                               EXIT(TRUE);
                             END ELSE
                               EXIT(FALSE);
                           END;
                            }

      { 1100525011;2;Field  ;
                  CaptionML=[DEU=Abbrechen und ersten Fehler anzeigen;
                             ENU=Stop and Show First Error;
                             NLD=Stoppen en eerste fout tonen;
                             NOR=Stopp og vis f›rste feil;
                             SVE=Stoppa och visa f”rsta felet];
                  SourceExpr=NoPlanningResiliency }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Arbeitsplatzgruppen werden durchgelesen #1##########\;ENU=Processing Work Centers   #1##########\;NLD=Verwerken afdelingen      #1##########\;NOR=Behandler arbeidssentre   #1##########\;SVE=Behandlar produktionsgr.  #1##########\';
      Text001@1001 : TextConst 'DEU="Fertigungsauftr„ge werden durchgelesen  #2########## ";ENU="Processing Orders         #2########## ";NLD="Verwerken orders          #2########## ";NOR="Behandler ordrer          #2########## ";SVE="Behandlar order           #2########## "';
      MfgSetup@1002 : Record 99000765;
      ReqWkshTmpl@1003 : Record 244;
      ReqWkShName@1004 : Record 245;
      ReqLine@1005 : Record 246;
      ProdOrderLine@1006 : Record 5406;
      GLSetup@1013 : Record 98;
      PurchLine@1014 : Record 39;
      CostCalcMgt@1007 : Codeunit 5836;
      UOMMgt@1009 : Codeunit 5402;
      Window@1008 : Dialog;
      BaseQtyToPurch@1010 : Decimal;
      QtyToPurch@1011 : Decimal;
      GLSetupRead@1012 : Boolean;
      ReqWkshTemp@1100525007 : Code[10];
      ReqWksh@1100525006 : Code[10];
      TransWkshTemp@1100525005 : Code[10];
      TransWkshName@1100525004 : Code[10];
      ProdOrderChoice@1100525003 : ' ,Planned,Firm Planned,Firm Planned & Print,Copy to Req. Wksh';
      PurchOrderChoice@1100525002 : ' ,Make Purch. Orders,Make Purch. Orders & Print,Copy to Req. Wksh';
      TransOrderChoice@1100525001 : ' ,Make Trans. Orders,Make Trans. Orders & Print,Copy to Req. Wksh';
      NoPlanningResiliency@1100525000 : Boolean;
      ReqWkshEditable@1100525008 : Boolean INDATASET;
      TransWkshEditable@1100525009 : Boolean INDATASET;

    [External]
    PROCEDURE SetWkShLine@1(NewReqLine@1000 : Record 246);
    BEGIN
      ReqLine := NewReqLine;
    END;

    LOCAL PROCEDURE InsertReqWkshLine@3();
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      ProdOrderLine.CALCFIELDS("Total Exp. Oper. Output (Qty.)");

      WITH ReqLine DO BEGIN
        SetSubcontracting(TRUE);
        BlockDynamicTracking(TRUE);

        INIT;
        "Line No." := "Line No." + 10000;
        VALIDATE(Type,Type::Item);
        VALIDATE("No.",ProdOrderLine."Item No.");
        VALIDATE("Variant Code",ProdOrderLine."Variant Code");
        VALIDATE("Unit of Measure Code",ProdOrderLine."Unit of Measure Code");
        VALIDATE(Quantity,QtyToPurch);
        GetGLSetup;
        IsHandled := FALSE;
        OnBeforeValidateUnitCost(ReqLine,"Work Center",IsHandled);
        IF NOT IsHandled THEN
          IF Quantity <> 0 THEN BEGIN
            IF "Work Center"."Unit Cost Calculation" = "Work Center"."Unit Cost Calculation"::Units THEN
              VALIDATE(
                "Direct Unit Cost",
                ROUND(
                  "Prod. Order Routing Line"."Direct Unit Cost" *
                  ProdOrderLine."Qty. per Unit of Measure",
                  GLSetup."Unit-Amount Rounding Precision"))
            ELSE
              VALIDATE(
                "Direct Unit Cost",
                ROUND(
                  ("Prod. Order Routing Line"."Expected Operation Cost Amt." -
                   "Prod. Order Routing Line"."Expected Capacity Ovhd. Cost") /
                  ProdOrderLine."Total Exp. Oper. Output (Qty.)",
                  GLSetup."Unit-Amount Rounding Precision"));
          END ELSE
            VALIDATE("Direct Unit Cost",0);
        "Qty. per Unit of Measure" := 0;
        "Quantity (Base)" := 0;
        "Prod. Order No." := ProdOrderLine."Prod. Order No.";
        "Prod. Order Line No." := ProdOrderLine."Line No.";
        "Due Date" := "Prod. Order Routing Line"."Ending Date";
        "Requester ID" := USERID;
        "Location Code" := ProdOrderLine."Location Code";
        "Bin Code" := ProdOrderLine."Bin Code";
        "Routing Reference No." := "Prod. Order Routing Line"."Routing Reference No.";
        "Routing No." := "Prod. Order Routing Line"."Routing No.";
        "Operation No." := "Prod. Order Routing Line"."Operation No.";
        "Work Center No." := "Prod. Order Routing Line"."Work Center No.";
        VALIDATE("Vendor No.","Work Center"."Subcontractor No.");
        Description := "Prod. Order Routing Line".Description;
        OnAfterTransferProdOrderRoutingLine(ReqLine,"Prod. Order Routing Line");

        // If purchase order already exist we will change this if possible
        PurchLine.RESET;
        PurchLine.SETCURRENTKEY("Document Type",Type,"Prod. Order No.","Prod. Order Line No.","Routing No.","Operation No.");
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
        PurchLine.SETRANGE(Type,PurchLine.Type::Item);
        PurchLine.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
        PurchLine.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
        PurchLine.SETRANGE("Routing No.","Prod. Order Routing Line"."Routing No.");
        PurchLine.SETRANGE("Operation No.","Prod. Order Routing Line"."Operation No.");
        PurchLine.SETRANGE("Planning Flexibility",PurchLine."Planning Flexibility"::Unlimited);
        PurchLine.SETRANGE("Quantity Received",0);
        IF PurchLine.FINDFIRST THEN BEGIN
          VALIDATE(Quantity,Quantity + PurchLine."Outstanding Quantity");
          "Quantity (Base)" := 0;
          "Replenishment System" := "Replenishment System"::Purchase;
          "Ref. Order No." := PurchLine."Document No.";
          "Ref. Order Type" := "Ref. Order Type"::Purchase;
          "Ref. Line No." := PurchLine."Line No.";
          IF PurchLine."Expected Receipt Date" = "Due Date" THEN
            "Action Message" := "Action Message"::"Change Qty."
          ELSE
            "Action Message" := "Action Message"::"Resched. & Chg. Qty.";
          //"Accept Action Message" := TRUE; //**4PS.o
        END ELSE BEGIN
          "Ref. Order No." := ProdOrderLine."Prod. Order No.";
          "Ref. Order Type" := "Ref. Order Type"::"Prod. Order";
          "Ref. Order Status" := ProdOrderLine.Status;
          "Ref. Line No." := ProdOrderLine."Line No.";
          "Action Message" := "Action Message"::New;
          //"Accept Action Message" := TRUE; //**4PS.o
        END;

        //**4PS.sn
        MfgSetup.GET;
        "Accept Action Message" := NOT MfgSetup."Manual Set Action Message";
        //**4PS.en

        IF "Ref. Order No." <> '' THEN
          GetDimFromRefOrderLine(TRUE);

        OnBeforeReqWkshLineInsert(ReqLine,ProdOrderLine);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE DeleteRepeatedReqLines@2();
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      WITH RequisitionLine DO BEGIN
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ProdOrderLine."Item No.");
        SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
        SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
        SETRANGE("Operation No.","Prod. Order Routing Line"."Operation No.");
        DELETEALL(TRUE);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferProdOrderRoutingLine@5(VAR RequisitionLine@1000 : Record 246;ProdOrderRoutingLine@1001 : Record 5409);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeValidateUnitCost@4(VAR RequisitionLine@1000 : Record 246;VAR WorkCenter@1001 : Record 99000754;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeReqWkshLineInsert@6(VAR RequisitionLine@1000 : Record 246;ProdOrderLine@1001 : Record 5406);
    BEGIN
    END;

    BEGIN
    {
      4PS HBK 07-07-09: Changed assigment "Accept Action Message"
    }
    END.
  }
  RDLDATA
  {
  }
}

