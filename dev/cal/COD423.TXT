OBJECT Codeunit 423 Change Log Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 402=r,
                TableData 403=r,
                TableData 404=r,
                TableData 405=ri;
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ChangeLogSetup@1000 : Record 402;
      ChangeLogSetupTable@1003 : Record 403;
      TempChangeLogSetupTable@1002 : TEMPORARY Record 403;
      ChangeLogSetupField@1004 : Record 404;
      TempChangeLogSetupField@1005 : TEMPORARY Record 404;
      ChangeLogSetupRead@1001 : Boolean;

    [External]
    PROCEDURE GetDatabaseTableTriggerSetup@11(TableID@1004 : Integer;VAR LogInsert@1003 : Boolean;VAR LogModify@1002 : Boolean;VAR LogDelete@1001 : Boolean;VAR LogRename@1000 : Boolean);
    BEGIN
      IF COMPANYNAME = '' THEN
        EXIT;

      IF TableID = DATABASE::"Change Log Entry" THEN
        EXIT;

      IF IsAlwaysLoggedTable(TableID) THEN BEGIN
        LogInsert := TRUE;
        LogModify := TRUE;
        LogDelete := TRUE;
        LogRename := TRUE;
        EXIT;
      END;

      IF NOT ChangeLogSetupRead THEN BEGIN
        IF ChangeLogSetup.GET THEN;
        ChangeLogSetupRead := TRUE;
      END;

      IF NOT ChangeLogSetup."Change Log Activated" THEN
        EXIT;

      IF NOT TempChangeLogSetupTable.GET(TableID) THEN BEGIN
        IF NOT ChangeLogSetupTable.GET(TableID) THEN BEGIN
          TempChangeLogSetupTable.INIT;
          TempChangeLogSetupTable."Table No." := TableID;
        END ELSE
          TempChangeLogSetupTable := ChangeLogSetupTable;
        TempChangeLogSetupTable.INSERT;
      END;

      WITH TempChangeLogSetupTable DO BEGIN
        LogInsert := "Log Insertion" <> "Log Insertion"::" ";
        LogModify := "Log Modification" <> "Log Modification"::" ";
        LogRename := "Log Modification" <> "Log Modification"::" ";
        LogDelete := "Log Deletion" <> "Log Deletion"::" ";
      END;
    END;

    LOCAL PROCEDURE IsLogActive@2(TableNumber@1000 : Integer;FieldNumber@1001 : Integer;TypeOfChange@1002 : 'Insertion,Modification,Deletion') : Boolean;
    BEGIN
      IF IsAlwaysLoggedTable(TableNumber) THEN
        EXIT(TRUE);

      IF NOT ChangeLogSetupRead THEN BEGIN
        IF ChangeLogSetup.GET THEN;
        ChangeLogSetupRead := TRUE;
      END;
      IF NOT ChangeLogSetup."Change Log Activated" THEN
        EXIT(FALSE);
      IF NOT TempChangeLogSetupTable.GET(TableNumber) THEN BEGIN
        IF NOT ChangeLogSetupTable.GET(TableNumber) THEN BEGIN
          TempChangeLogSetupTable.INIT;
          TempChangeLogSetupTable."Table No." := TableNumber;
        END ELSE
          TempChangeLogSetupTable := ChangeLogSetupTable;
        TempChangeLogSetupTable.INSERT;
      END;

      WITH TempChangeLogSetupTable DO
        CASE TypeOfChange OF
          TypeOfChange::Insertion:
            IF "Log Insertion" = "Log Insertion"::"Some Fields" THEN
              EXIT(IsFieldLogActive(TableNumber,FieldNumber,TypeOfChange))
            ELSE
              EXIT("Log Insertion" = "Log Insertion"::"All Fields");
          TypeOfChange::Modification:
            IF "Log Modification" = "Log Modification"::"Some Fields" THEN
              EXIT(IsFieldLogActive(TableNumber,FieldNumber,TypeOfChange))
            ELSE
              EXIT("Log Modification" = "Log Modification"::"All Fields");
          TypeOfChange::Deletion:
            IF "Log Deletion" = "Log Deletion"::"Some Fields" THEN
              EXIT(IsFieldLogActive(TableNumber,FieldNumber,TypeOfChange))
            ELSE
              EXIT("Log Deletion" = "Log Deletion"::"All Fields");
        END;
    END;

    LOCAL PROCEDURE IsFieldLogActive@6(TableNumber@1000 : Integer;FieldNumber@1001 : Integer;TypeOfChange@1002 : 'Insertion,Modification,Deletion') : Boolean;
    BEGIN
      IF FieldNumber = 0 THEN
        EXIT(TRUE);

      IF NOT TempChangeLogSetupField.GET(TableNumber,FieldNumber) THEN BEGIN
        IF NOT ChangeLogSetupField.GET(TableNumber,FieldNumber) THEN BEGIN
          TempChangeLogSetupField.INIT;
          TempChangeLogSetupField."Table No." := TableNumber;
          TempChangeLogSetupField."Field No." := FieldNumber;
        END ELSE
          TempChangeLogSetupField := ChangeLogSetupField;
        TempChangeLogSetupField.INSERT;
      END;

      WITH TempChangeLogSetupField DO
        CASE TypeOfChange OF
          TypeOfChange::Insertion:
            EXIT("Log Insertion");
          TypeOfChange::Modification:
            EXIT("Log Modification");
          TypeOfChange::Deletion:
            EXIT("Log Deletion");
        END;
    END;

    LOCAL PROCEDURE IsAlwaysLoggedTable@7(TableID@1000 : Integer) AlwaysLogTable : Boolean;
    BEGIN
      AlwaysLogTable :=
        TableID IN
        [DATABASE::User,
         DATABASE::"User Property",
         DATABASE::"Access Control",
       //**4PS.so EK, 28-05-2013 Too much data using Standard Roles.
       //DATABASE::"Permission Set",
       //DATABASE::Permission,
       //**4PS.eo
         DATABASE::"Change Log Setup",
         DATABASE::"Change Log Setup (Table)",
         DATABASE::"Change Log Setup (Field)",
         DATABASE::"User Group",
         DATABASE::"User Group Member",
         DATABASE::"User Group Access Control",
         DATABASE::"User Group Permission Set",
         DATABASE::Plan,
         DATABASE::"User Plan",
         DATABASE::"Plan Permission Set",
         DATABASE::"User Group Plan"];

      OnAfterIsAlwaysLoggedTable(TableID,AlwaysLogTable);
    END;

    LOCAL PROCEDURE InsertLogEntry@8(VAR FldRef@1000 : FieldRef;VAR xFldRef@1001 : FieldRef;VAR RecRef@1004 : RecordRef;TypeOfChange@1002 : 'Insertion,Modification,Deletion';IsReadable@1008 : Boolean);
    VAR
      ChangeLogEntry@1003 : Record 405;
      KeyFldRef@1005 : FieldRef;
      KeyRef1@1006 : KeyRef;
      i@1007 : Integer;
    BEGIN
      IF RecRef.CURRENTCOMPANY <> ChangeLogEntry.CURRENTCOMPANY THEN
        ChangeLogEntry.CHANGECOMPANY(RecRef.CURRENTCOMPANY);
      ChangeLogEntry.INIT;
      ChangeLogEntry."Date and Time" := CURRENTDATETIME;
      ChangeLogEntry.Time := DT2TIME(ChangeLogEntry."Date and Time");

      ChangeLogEntry."User ID" := USERID;

      ChangeLogEntry."Table No." := RecRef.NUMBER;
      ChangeLogEntry."Field No." := FldRef.NUMBER;
      ChangeLogEntry."Type of Change" := TypeOfChange;
      IF (RecRef.NUMBER = DATABASE::"User Property") AND (FldRef.NUMBER IN [2..5]) THEN BEGIN // Password like
        ChangeLogEntry."Old Value" := '*';
        ChangeLogEntry."New Value" := '*';
      END ELSE BEGIN
        IF TypeOfChange <> TypeOfChange::Insertion THEN
          IF IsReadable THEN
            ChangeLogEntry."Old Value" := FORMAT(xFldRef.VALUE,0,9)
          ELSE
            ChangeLogEntry."Old Value" := '';
        IF TypeOfChange <> TypeOfChange::Deletion THEN
          ChangeLogEntry."New Value" := FORMAT(FldRef.VALUE,0,9);
      END;

      ChangeLogEntry."Record ID" := RecRef.RECORDID;
      ChangeLogEntry."Primary Key" := COPYSTR(RecRef.GETPOSITION(FALSE),1,MAXSTRLEN(ChangeLogEntry."Primary Key"));

      KeyRef1 := RecRef.KEYINDEX(1);
      FOR i := 1 TO KeyRef1.FIELDCOUNT DO BEGIN
        KeyFldRef := KeyRef1.FIELDINDEX(i);

        CASE i OF
          1:
            BEGIN
              ChangeLogEntry."Primary Key Field 1 No." := KeyFldRef.NUMBER;
              ChangeLogEntry."Primary Key Field 1 Value" :=
                COPYSTR(FORMAT(KeyFldRef.VALUE,0,9),1,MAXSTRLEN(ChangeLogEntry."Primary Key Field 1 Value"));
            END;
          2:
            BEGIN
              ChangeLogEntry."Primary Key Field 2 No." := KeyFldRef.NUMBER;
              ChangeLogEntry."Primary Key Field 2 Value" :=
                COPYSTR(FORMAT(KeyFldRef.VALUE,0,9),1,MAXSTRLEN(ChangeLogEntry."Primary Key Field 2 Value"));
            END;
          3:
            BEGIN
              ChangeLogEntry."Primary Key Field 3 No." := KeyFldRef.NUMBER;
              ChangeLogEntry."Primary Key Field 3 Value" :=
                COPYSTR(FORMAT(KeyFldRef.VALUE,0,9),1,MAXSTRLEN(ChangeLogEntry."Primary Key Field 3 Value"));
            END;
      //**4PS.sn
          4:
            BEGIN
              ChangeLogEntry."Primary Key Field 4 No." := KeyFldRef.NUMBER;
              ChangeLogEntry."Primary Key Field 4 Value" :=
                COPYSTR(FORMAT(KeyFldRef.VALUE,0,9),1,MAXSTRLEN(ChangeLogEntry."Primary Key Field 4 Value"));
            END;
      //**4PS.en
        END;
      END;
      ChangeLogEntry.INSERT;
    END;

    [External]
    PROCEDURE LogInsertion@1(VAR RecRef@1000 : RecordRef);
    VAR
      FldRef@1003 : FieldRef;
      i@1002 : Integer;
    BEGIN
      IF RecRef.ISTEMPORARY THEN
        EXIT;

      IF NOT IsLogActive(RecRef.NUMBER,0,0) THEN
        EXIT;
      FOR i := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FldRef := RecRef.FIELDINDEX(i);
        IF HasValue(FldRef) THEN
          IF IsNormalField(FldRef) THEN
            IF IsLogActive(RecRef.NUMBER,FldRef.NUMBER,0) THEN
              InsertLogEntry(FldRef,FldRef,RecRef,0,TRUE);
      END;
    END;

    [External]
    PROCEDURE LogModification@3(VAR RecRef@1000 : RecordRef);
    VAR
      xRecRef@1001 : RecordRef;
      FldRef@1003 : FieldRef;
      xFldRef@1004 : FieldRef;
      i@1002 : Integer;
      IsReadable@1005 : Boolean;
    BEGIN
      IF RecRef.ISTEMPORARY THEN
        EXIT;

      IF NOT IsLogActive(RecRef.NUMBER,0,1) THEN
        EXIT;

      xRecRef.OPEN(RecRef.NUMBER);
      xRecRef."SECURITYFILTERING" := SECURITYFILTER::Filtered;
      IF xRecRef.READPERMISSION THEN BEGIN
        IsReadable := TRUE;
        IF NOT xRecRef.GET(RecRef.RECORDID) THEN
          EXIT;
      END;

      FOR i := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FldRef := RecRef.FIELDINDEX(i);
        xFldRef := xRecRef.FIELDINDEX(i);
        IF IsNormalField(FldRef) THEN
          IF FORMAT(FldRef.VALUE) <> FORMAT(xFldRef.VALUE) THEN
            IF IsLogActive(RecRef.NUMBER,FldRef.NUMBER,1) THEN
              InsertLogEntry(FldRef,xFldRef,RecRef,1,IsReadable);
      END;
    END;

    [External]
    PROCEDURE LogRename@9(VAR RecRef@1000 : RecordRef;VAR xRecRefParam@1001 : RecordRef);
    VAR
      xRecRef@1005 : RecordRef;
      FldRef@1003 : FieldRef;
      xFldRef@1004 : FieldRef;
      i@1002 : Integer;
    BEGIN
      IF RecRef.ISTEMPORARY THEN
        EXIT;

      IF NOT IsLogActive(RecRef.NUMBER,0,1) THEN
        EXIT;

      xRecRef.OPEN(xRecRefParam.NUMBER,FALSE,RecRef.CURRENTCOMPANY);
      xRecRef.GET(xRecRefParam.RECORDID);
      FOR i := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FldRef := RecRef.FIELDINDEX(i);
        xFldRef := xRecRef.FIELDINDEX(i);
        IF IsNormalField(FldRef) THEN
          IF FORMAT(FldRef.VALUE) <> FORMAT(xFldRef.VALUE) THEN
            IF IsLogActive(RecRef.NUMBER,FldRef.NUMBER,1) THEN
              InsertLogEntry(FldRef,xFldRef,RecRef,1,TRUE);
      END;
    END;

    [External]
    PROCEDURE LogDeletion@4(VAR RecRef@1000 : RecordRef);
    VAR
      FldRef@1001 : FieldRef;
      i@1002 : Integer;
    BEGIN
      IF RecRef.ISTEMPORARY THEN
        EXIT;

      IF NOT IsLogActive(RecRef.NUMBER,0,2) THEN
        EXIT;
      FOR i := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FldRef := RecRef.FIELDINDEX(i);
        IF HasValue(FldRef) THEN
          IF IsNormalField(FldRef) THEN
            IF IsLogActive(RecRef.NUMBER,FldRef.NUMBER,2) THEN
              InsertLogEntry(FldRef,FldRef,RecRef,2,TRUE);
      END;
    END;

    LOCAL PROCEDURE IsNormalField@12(FieldRef@1001 : FieldRef) : Boolean;
    BEGIN
      EXIT(FORMAT(FieldRef.CLASS) = 'Normal')
    END;

    LOCAL PROCEDURE HasValue@10(FldRef@1000 : FieldRef) : Boolean;
    VAR
      Field@1102601000 : Record 2000000041;
      HasValue@1001 : Boolean;
      Int@1002 : Integer;
      Dec@1003 : Decimal;
      D@1007 : Date;
      T@1008 : Time;
    BEGIN
      EVALUATE(Field.Type,FORMAT(FldRef.TYPE));

      CASE Field.Type OF
        Field.Type::Boolean:
          HasValue := FldRef.VALUE;
        Field.Type::Option:
          HasValue := TRUE;
        Field.Type::Integer:
          BEGIN
            Int := FldRef.VALUE;
            HasValue := Int <> 0;
          END;
        Field.Type::Decimal:
          BEGIN
            Dec := FldRef.VALUE;
            HasValue := Dec <> 0;
          END;
        Field.Type::Date:
          BEGIN
            D := FldRef.VALUE;
            HasValue := D <> 0D;
          END;
        Field.Type::Time:
          BEGIN
            T := FldRef.VALUE;
            HasValue := T <> 0T;
          END;
        Field.Type::BLOB:
          HasValue := FALSE;
        ELSE
          HasValue := FORMAT(FldRef.VALUE) <> '';
      END;

      EXIT(HasValue);
    END;

    [External]
    PROCEDURE InitChangeLog@5();
    BEGIN
      ChangeLogSetupRead := FALSE;
      TempChangeLogSetupField.DELETEALL;
      TempChangeLogSetupTable.DELETEALL;
    END;

    [External]
    PROCEDURE EvaluateTextToFieldRef@28(InputText@1001 : Text;VAR FieldRef@1000 : FieldRef) : Boolean;
    VAR
      IntVar@1002 : Integer;
      DecimalVar@1003 : Decimal;
      DateVar@1004 : Date;
      TimeVar@1005 : Time;
      DateTimeVar@1006 : DateTime;
      BoolVar@1007 : Boolean;
      DurationVar@1008 : Duration;
      BigIntVar@1009 : BigInteger;
      GUIDVar@1010 : GUID;
      DateFormulaVar@1012 : DateFormula;
    BEGIN
      IF (FORMAT(FieldRef.CLASS) = 'FlowField') OR (FORMAT(FieldRef.CLASS) = 'FlowFilter') THEN
        EXIT(TRUE);

      CASE FORMAT(FieldRef.TYPE) OF
        'Integer','Option':
          IF EVALUATE(IntVar,InputText) THEN BEGIN
            FieldRef.VALUE := IntVar;
            EXIT(TRUE);
          END;
        'Decimal':
          IF EVALUATE(DecimalVar,InputText,9) THEN BEGIN
            FieldRef.VALUE := DecimalVar;
            EXIT(TRUE);
          END;
        'Date':
          IF EVALUATE(DateVar,InputText,9) THEN BEGIN
            FieldRef.VALUE := DateVar;
            EXIT(TRUE);
          END;
        'Time':
          IF EVALUATE(TimeVar,InputText,9) THEN BEGIN
            FieldRef.VALUE := TimeVar;
            EXIT(TRUE);
          END;
        'DateTime':
          IF EVALUATE(DateTimeVar,InputText,9) THEN BEGIN
            FieldRef.VALUE := DateTimeVar;
            EXIT(TRUE);
          END;
        'Boolean':
          IF EVALUATE(BoolVar,InputText,9) THEN BEGIN
            FieldRef.VALUE := BoolVar;
            EXIT(TRUE);
          END;
        'Duration':
          IF EVALUATE(DurationVar,InputText,9) THEN BEGIN
            FieldRef.VALUE := DurationVar;
            EXIT(TRUE);
          END;
        'BigInteger':
          IF EVALUATE(BigIntVar,InputText) THEN BEGIN
            FieldRef.VALUE := BigIntVar;
            EXIT(TRUE);
          END;
        'GUID':
          IF EVALUATE(GUIDVar,InputText,9) THEN BEGIN
            FieldRef.VALUE := GUIDVar;
            EXIT(TRUE);
          END;
        'Code','Text':
          BEGIN
            IF STRLEN(InputText) > FieldRef.LENGTH THEN BEGIN
              FieldRef.VALUE := PADSTR(InputText,FieldRef.LENGTH);
              EXIT(FALSE);
            END;
            FieldRef.VALUE := InputText;
            EXIT(TRUE);
          END;
        'DateFormula':
          IF EVALUATE(DateFormulaVar,InputText,9) THEN BEGIN
            FieldRef.VALUE := DateFormulaVar;
            EXIT(TRUE);
          END;
      END;

      EXIT(FALSE);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterIsAlwaysLoggedTable@14(TableID@1000 : Integer;VAR AlwaysLogTable@1001 : Boolean);
    BEGIN
    END;

    PROCEDURE FormatValue2@1100409000(VAR FldRef@1000 : FieldRef;TableNumber@1005 : Integer) : Text[250];
    VAR
      Field@1004 : Record 2000000041;
      OptionNo@1001 : Integer;
      OptionStr@1002 : Text[1024];
      i@1003 : Integer;
    BEGIN
      //**4PS
      IF FORMAT(FldRef.TYPE) = 'Option' THEN BEGIN
        OptionNo := FldRef.VALUE;
        OptionStr := FORMAT(FldRef.OPTIONSTRING);
        FOR i := 1 TO OptionNo DO
          OptionStr := COPYSTR(OptionStr,STRPOS(OptionStr,',') + 1);
        IF STRPOS(OptionStr,',') > 0 THEN
          IF STRPOS(OptionStr,',') = 1 THEN
            OptionStr := ''
          ELSE
            OptionStr := COPYSTR(OptionStr,1,STRPOS(OptionStr,',') - 1);
        EXIT(OptionStr);
      END ELSE
        EXIT(FORMAT(FldRef.VALUE));
    END;

    BEGIN
    END.
  }
}

