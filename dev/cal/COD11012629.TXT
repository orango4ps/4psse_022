OBJECT Codeunit 11012629 Word Open XML Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528601 : TextConst 'DEU=Unbekannte Einheit: %1;ENU=Unknown Unit of Measure: %1;NLD=Onbekende eenheid: %1';

    PROCEDURE FillBookmark@1100528605(WordProcessingDocument@1100528606 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WordprocessingDocument";BookmarkName@1100528600 : Text;BookmarkValue@1100528601 : Text;Bold@1100528602 : Boolean;Underline@1100528603 : Boolean;Italic@1100528604 : Boolean;Keep@1100528605 : Boolean);
    VAR
      Text@1100528607 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Text";
    BEGIN
      IF SetBookmarkValue(WordProcessingDocument, BookmarkName, BookmarkValue, Text) THEN BEGIN
        SetTextBold(Text, Bold);
        SetTextUnderline(Text, Underline);
        SetTextItalic(Text, Italic);
        IF NOT Keep THEN
          RemoveBookmark(WordProcessingDocument, BookmarkName);
      END;
    END;

    PROCEDURE GetTable@1100528715(WordProcessingDocument@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WordprocessingDocument";WordDocumentTableNo@1100528601 : Integer;VAR Table@1100528605 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Table") : Boolean;
    BEGIN
      EXIT(GetDescendant(WordProcessingDocument.MainDocumentPart.Document.Body, GETDOTNETTYPE(Table), WordDocumentTableNo - 1, Table));
    END;

    PROCEDURE SetTableCellValue@1100528741(TableRow@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.TableRow";Value@1100528601 : Text;ColumnIndex@1100528602 : Integer);
    VAR
      TableCell@1100528604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.TableCell";
      Text@1100528605 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Text";
      Enum@1100528603 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      Run@1100528606 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Run";
      Paragraph@1100528607 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Paragraph";
    BEGIN
      IF ISNULL(TableRow) THEN
        EXIT;
      ColumnIndex -= 1; //one based
      GetElements(TableRow, GETDOTNETTYPE(TableCell), Enum);
      WHILE Enum.MoveNext DO BEGIN
        IF ColumnIndex = 0 THEN BEGIN
          TableCell := Enum.Current;
          IF GetDescendant(TableCell, GETDOTNETTYPE(Text), 0, Text) THEN BEGIN
            Text.Text := Value;
            BREAK;
          END ELSE BEGIN
            IF NOT GetDescendant(TableCell, GETDOTNETTYPE(Paragraph), 0, Paragraph) THEN BEGIN
              Paragraph := Paragraph.Paragraph();
              AppendChild(TableCell, Paragraph);
            END;
            IF NOT GetDescendant(TableCell, GETDOTNETTYPE(Run), 0, Run) THEN BEGIN
              Run := Run.Run();
              AppendChild(Paragraph, Run);
            END;
            CreateText(Value, Text);
            AppendChild(Run, Text);
          END;
        END;
        ColumnIndex -= 1;
      END;
    END;

    PROCEDURE DeleteTableRows@1100528723(Table@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Table");
    VAR
      Descendant@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";
      TableRow@1100528602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.TableRow";
      TableRowHeader@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.TableRow";
    BEGIN
      IF ISNULL(Table) THEN
        EXIT;

      IF NOT GetElement(Table, GETDOTNETTYPE(TableRow), 0, TableRowHeader) THEN
        EXIT;

      WHILE GetElement(Table, GETDOTNETTYPE(TableRow), -1, TableRow) AND NOT TableRow.Equals(TableRowHeader) DO BEGIN
        TableRow.RemoveAllChildren;
        TableRow.Remove;
      END;
    END;

    PROCEDURE AddTableRow@1100528735(Table@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Table";VAR TableRow@1100528602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.TableRow");
    VAR
      Text@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Text";
      TextEnum@1100528604 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      TableCellProperties@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.TableCellProperties";
      ParagraphProperties@1100528610 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.ParagraphProperties";
      RunProperties@1100528612 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.RunProperties";
    BEGIN
      IF ISNULL(Table) THEN
        EXIT;

      IF NOT GetElement(Table, GETDOTNETTYPE(TableRow), 0, TableRow) THEN
        EXIT;
      TableRow := TableRow.CloneNode(TRUE);
      RemoveDescendants(TableRow, GETDOTNETTYPE(TableCellProperties));
      RemoveDescendants(TableRow, GETDOTNETTYPE(ParagraphProperties));
      RemoveDescendants(TableRow, GETDOTNETTYPE(RunProperties));
      GetDescendants(TableRow, GETDOTNETTYPE(Text), TextEnum);
      WHILE TextEnum.MoveNext DO BEGIN
        Text := TextEnum.Current;
        Text.Text := '';
      END;
      AppendChild(Table, TableRow);
    END;

    PROCEDURE InsertAPictureAtBookmark@1100528752(WordProcessingDocument@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WordprocessingDocument";Stream@1100528601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";BookmarkName@1100528602 : Text;Keep@1100528616 : Boolean);
    VAR
      BookmarkStart@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BookmarkStart";
      Text@1100528604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Text";
      TableCell@1100528606 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.TableCell";
      TableCellWidth@1100528609 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.TableCellWidth";
      Run@1100528610 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Run";
      RunProperties@1100528612 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.RunProperties";
      Drawing@1100528614 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Drawing";
      StringValue@1100528615 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.StringValue";
      MaxWidth@1100528607 : Integer;
      UnitOfMeasure@1100528608 : Text;
    BEGIN
      IF NOT GetBookmark(WordProcessingDocument, BookmarkName, BookmarkStart) THEN
        EXIT;

      IF NOT FindBookmarkText(BookmarkStart, Text) THEN
        InsertBookmarkText(BookmarkStart, 'temp', Text);

      IF GetParent(BookmarkStart, GETDOTNETTYPE(TableCell), TableCell) THEN BEGIN
        IF NOT ISNULL(TableCell.TableCellProperties) THEN BEGIN
          TableCellWidth := TableCell.TableCellProperties.TableCellWidth;
          IF NOT ISNULL(TableCellWidth) THEN BEGIN
            UnitOfMeasure := LOWERCASE(STRSUBSTNO('%1', TableCellWidth.Type));
            IF UnitOfMeasure = '' THEN
              UnitOfMeasure := 'dxa';
            StringValue := TableCellWidth.Width;
            EVALUATE(MaxWidth, StringValue.Value);
            MaxWidth := UnitToEmu(MaxWidth, UnitOfMeasure);
          END;
        END;
      END;
      IF MaxWidth = 0 THEN
        MaxWidth := GetPageWidthInEmu(WordProcessingDocument);

      GetDrawing(WordProcessingDocument, Stream, MaxWidth, Drawing);
      IF GetParent(Text, GETDOTNETTYPE(Run), Run) THEN BEGIN
        RemoveChild(Run, Text);
        IF ISNULL(Run.RunProperties) THEN
          PrependChild(Run, RunProperties.RunProperties);
        AppendChild(Run, Drawing);
      END;
      IF NOT Keep THEN
        RemoveBookmark(WordProcessingDocument, BookmarkName);
    END;

    PROCEDURE InsertADocumentAtBookmark@1100528754(WordProcessingDocument@1100528602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WordprocessingDocument";Stream@1100528612 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";BookmarkName@1100528600 : Text);
    VAR
      BookmarkStart@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BookmarkStart";
      BookmarkEnd@1100528611 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd";
      Text@1100528604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Text";
      Paragraph@1100528606 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Paragraph";
      AltChunk@1100528605 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.AltChunk";
    BEGIN
      IF NOT GetBookmark(WordProcessingDocument, BookmarkName, BookmarkStart) THEN
        EXIT;

      IF NOT GetParent(BookmarkStart, GETDOTNETTYPE(Paragraph), Paragraph) THEN
        EXIT;

      IF NOT FindBookmarkText(BookmarkStart, Text) THEN
        InsertBookmarkText(BookmarkStart, 'temp', Text);

      GetAltChunkStream(WordProcessingDocument, Stream, AltChunk);
      InsertBefore(WordProcessingDocument.MainDocumentPart.Document.Body, AltChunk, Paragraph);
      Text.Remove;
      GetBookmarkEnd(BookmarkStart, BookmarkEnd);
      BookmarkStart.Remove;
      IF NOT ISNULL(BookmarkEnd) THEN
        BookmarkEnd.Remove;
    END;

    PROCEDURE InsertADocumentAtEof@1100528755(WordProcessingDocument@1100528602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WordprocessingDocument";Stream@1100528603 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      AltChunk@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.AltChunk";
      LastElementType@1100528609 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      LastElement@1100528608 : Variant;
    BEGIN
      GetAltChunkStream(WordProcessingDocument, Stream, AltChunk);

      GetLastElementOfBody(WordProcessingDocument, LastElement, LastElementType);
      IF ISNULL(LastElement) THEN
        WordProcessingDocument.MainDocumentPart.Document.Body.Append(AltChunk)
      ELSE
        InsertAfterSelf(LastElement, AltChunk);
    END;

    PROCEDURE AddPageBreakAtEof@1100528757(WordProcessingDocument@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WordprocessingDocument");
    VAR
      Type@1100528605 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      Element@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";
      Paragraph@1100528604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Paragraph";
      AltChunk@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.AltChunk";
      IEnum@1100528602 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      FoundObject@1100528613 : Variant;
      FoundObjectType@1100528611 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      NewParagraph@1100528607 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Paragraph";
      NewRun@1100528608 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Run";
      NewBreak@1100528609 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Break";
      BreakValues@1100528610 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BreakValues";
      EnumValue@1100528612 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.EnumValue`1";
    BEGIN
      GetElements(WordProcessingDocument.MainDocumentPart.Document.Body, GETDOTNETTYPE(Element), IEnum);
      WHILE IEnum.MoveNext DO BEGIN
        Type := GETDOTNETTYPE(IEnum.Current);
        IF Type.Equals(GETDOTNETTYPE(Paragraph)) OR Type.Equals(GETDOTNETTYPE(AltChunk)) THEN BEGIN
          FoundObject := IEnum.Current;
          FoundObjectType := Type;
        END;
      END;
      IF NOT ISNULL(FoundObject) THEN BEGIN
        NewBreak := NewBreak."Break";
        GetEnumValue(GETDOTNETTYPE(BreakValues), BreakValues.Page, EnumValue);
        NewBreak.Type := EnumValue;
        NewRun := NewRun.Run();
        AppendChild(NewRun, NewBreak);
        NewParagraph := NewParagraph.Paragraph();
        AppendChild(NewParagraph, NewRun);
        InsertAfterSelf(FoundObject, NewParagraph);
      END;
    END;

    PROCEDURE ReplaceField@1100528633(WordProcessingDocument@1100528602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WordprocessingDocument";FieldName@1100528601 : Text;Replacement@1100528600 : Text);
    BEGIN
      WHILE ReplaceFieldOnce(WordProcessingDocument, FieldName, Replacement) DO;
    END;

    PROCEDURE AppendChild@1100528600(Parent@1100528600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";Child@1100528601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object");
    BEGIN
      InvokeParentChildFunction('AppendChild', Parent, Child);
    END;

    LOCAL PROCEDURE "----- LOCALS -----"@1100528726();
    BEGIN
    END;

    LOCAL PROCEDURE InvokeParentChildFunction@1100528696(MethodName@1100528606 : Text;Parent@1100528600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";Child@1100528601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object");
    VAR
      Type@1100528605 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      MethodInfo@1100528604 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      MethodInfos@1100528607 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      GenericMethodInfo@1100528603 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      Parameters@1100528602 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
    BEGIN
      Type := GETDOTNETTYPE(Parent);
      MethodInfos := Type.GetMethods;
      FOREACH MethodInfo IN MethodInfos DO
        IF MethodInfo.Name = MethodName THEN
          BREAK;
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(GETDOTNETTYPE(Child)), 1);
      Parameters.SetValue(GETDOTNETTYPE(Child), 0);
      GenericMethodInfo := MethodInfo.MakeGenericMethod(Parameters);
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(Child), 1);
      Parameters.SetValue(Child, 0);
      GenericMethodInfo.Invoke(Parent, Parameters);
    END;

    LOCAL PROCEDURE InvokeParentChildFunction2@1100528700(MethodName@1100528607 : Text;Parent@1100528600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";Child@1100528601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";RefChild@1100528606 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object");
    VAR
      Type@1100528605 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      MethodInfo@1100528604 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      GenericMethodInfo@1100528603 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      Parameters@1100528602 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      OpenXmlElement@1100528400 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";
    BEGIN
      Type := GETDOTNETTYPE(Parent);
      MethodInfo := Type.GetMethod(MethodName);
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(GETDOTNETTYPE(Child)), 1);
      Parameters.SetValue(GETDOTNETTYPE(Child), 0);
      GenericMethodInfo := MethodInfo.MakeGenericMethod(Parameters);
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(OpenXmlElement), 2);
      Parameters.SetValue(Child, 0);
      Parameters.SetValue(RefChild, 1);
      GenericMethodInfo.Invoke(Parent, Parameters);
    END;

    LOCAL PROCEDURE Append@1100528648(Parent@1100528600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";Child@1100528601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object");
    BEGIN
      InvokeParentChildFunction('Append', Parent, Child);
    END;

    LOCAL PROCEDURE PrependChild@1100528682(Parent@1100528600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";Child@1100528601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object");
    BEGIN
      InvokeParentChildFunction('PrependChild', Parent, Child);
    END;

    LOCAL PROCEDURE InsertAfter@1100528629(Parent@1100528600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";Child@1100528601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";After@1100528606 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object");
    BEGIN
      InvokeParentChildFunction2('InsertAfter', Parent, Child, After);
    END;

    LOCAL PROCEDURE InsertAfterSelf@1100528655(Parent@1100528600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";Child@1100528601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object");
    BEGIN
      InvokeParentChildFunction('InsertAfterSelf', Parent, Child);
    END;

    LOCAL PROCEDURE InsertBefore@1100528625(Parent@1100528606 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";Child@1100528600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";RefChild@1100528601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object");
    BEGIN
      InvokeParentChildFunction2('InsertBefore', Parent, Child, RefChild);
    END;

    LOCAL PROCEDURE RemoveChild@1100528620(Parent@1100528600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";Child@1100528601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object");
    BEGIN
      InvokeParentChildFunction('RemoveChild', Parent, Child);
    END;

    LOCAL PROCEDURE CreateText@1100528606(InnerText@1100528600 : Text;VAR Text@1100528605 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Text");
    VAR
      Type@1100528601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      Activator@1100528603 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Activator";
    BEGIN
      Type := GETDOTNETTYPE(Text);
      Text := Activator.CreateInstance(Type);
      Text.Text := InnerText;
    END;

    LOCAL PROCEDURE GetBookmark@1100528611(WordProcessingDocument@1100528604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WordprocessingDocument";BookmarkName@1100528600 : Text;VAR BookmarkStart@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BookmarkStart") Found : Boolean;
    VAR
      IEnum@1100528605 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      IEnum2@1100528608 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      Bookmark@1100528602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BookmarkStart";
      HeaderPart@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.HeaderPart";
      FooterPart@1100528606 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.FooterPart";
      Enum@1100528607 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.IEnumerable`1";
    BEGIN
      GetDescendants(WordProcessingDocument.MainDocumentPart.RootElement, GETDOTNETTYPE(BookmarkStart), IEnum);
      WHILE IEnum.MoveNext DO BEGIN
        Bookmark := IEnum.Current;
        IF Bookmark.Name.Value = BookmarkName THEN BEGIN
          BookmarkStart := Bookmark;
          EXIT(TRUE);
        END;
      END;

      Enum := WordProcessingDocument.MainDocumentPart.HeaderParts;
      IEnum := Enum.GetEnumerator;
      WHILE IEnum.MoveNext DO BEGIN
        HeaderPart := IEnum.Current;
        GetDescendants(HeaderPart.RootElement, GETDOTNETTYPE(BookmarkStart), IEnum2);
        WHILE IEnum2.MoveNext DO BEGIN
          Bookmark := IEnum2.Current;
          IF Bookmark.Name.Value = BookmarkName THEN BEGIN
            BookmarkStart := Bookmark;
            EXIT(TRUE);
          END;
        END;
      END;

      Enum := WordProcessingDocument.MainDocumentPart.FooterParts;
      IEnum := Enum.GetEnumerator;
      WHILE IEnum.MoveNext DO BEGIN
        FooterPart := IEnum.Current;
        GetDescendants(FooterPart.RootElement, GETDOTNETTYPE(BookmarkStart), IEnum2);
        WHILE IEnum2.MoveNext DO BEGIN
          Bookmark := IEnum2.Current;
          IF Bookmark.Name.Value = BookmarkName THEN BEGIN
            BookmarkStart := Bookmark;
            EXIT(TRUE);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE FindBookmarkText@1100528610(BookmarkStart@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BookmarkStart";VAR Text@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Text") : Boolean;
    VAR
      Element@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";
      V@1100528602 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";
    BEGIN
      IF NOT ISNULL(BookmarkStart.ColumnFirst) THEN  //https://msdn.microsoft.com/en-us/library/documentformat.openxml.wordprocessing.bookmarkstart(v=office.14).aspx
        EXIT(FindBookmarkTextInColumn(BookmarkStart, Text))
      ELSE BEGIN
        GetElementNextSibling(BookmarkStart, V);
        Element := V;
        WHILE ISNULL(Text) AND NOT ISNULL(Element) DO BEGIN
          IF IsEndBookmark(V, BookmarkStart) THEN
            EXIT;
          IF GetDescendant(Element, GETDOTNETTYPE(Text), 0, Text) THEN
            EXIT(TRUE);
          GetElementNextSibling(Element, V);
          Element := V;
        END;
      END;
    END;

    LOCAL PROCEDURE FindBookmarkTextInColumn@1100528602(BookmarkStart@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BookmarkStart";VAR Text@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Text") : Boolean;
    VAR
      Type@1100528603 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      TableRow@1100528602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.TableRow";
      TableCell@1100528605 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.TableCell";
      Element@1100528604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";
      i@1100528606 : Integer;
      ColumnFirst@1100528607 : Integer;
      V@1100528608 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";
    BEGIN
      IF NOT GetParent(BookmarkStart, GETDOTNETTYPE(TableRow), TableRow) THEN
        EXIT;
      IF NOT GetFirstChild(TableRow, GETDOTNETTYPE(TableCell), TableCell) THEN
        EXIT;

      ColumnFirst := BookmarkStart.ColumnFirst.ToInt32(BookmarkStart.ColumnFirst);
      FOR i := 0 TO ColumnFirst -1 DO BEGIN
        GetElementNextSibling(TableCell, V);
        Element := V;
        WHILE NOT SameType(V, TableCell) DO BEGIN
          GetElementNextSibling(Element, V);
          Type := GETDOTNETTYPE(V);
          Element := V;
        END;
        IF SameType(V, TableCell) THEN
          TableCell := V;
      END;
      EXIT(GetDescendant(TableCell, GETDOTNETTYPE(Text), 0, Text));
    END;

    LOCAL PROCEDURE SetBookmarkValue@1100528603(WordProcessingDocument@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WordprocessingDocument";BookmarkName@1100528600 : Text;BookmarkValue@1100528602 : Text;VAR Text@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Text") : Boolean;
    VAR
      BookmarkStart@1100528604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BookmarkStart";
    BEGIN
      IF NOT GetBookmark(WordProcessingDocument, BookmarkName, BookmarkStart) THEN
        EXIT(FALSE);
      IF NOT FindBookmarkText(BookmarkStart, Text) THEN
        InsertBookmarkText(BookmarkStart, BookmarkValue, Text)
      ELSE BEGIN
        Text.Text := BookmarkValue;
        RemoveOtherTexts(BookmarkStart, Text);
      END;
      EXIT(NOT ISNULL(Text));
    END;

    LOCAL PROCEDURE InsertBookmarkText@1100528628(BookmarkStart@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BookmarkStart";BookmarkValue@1100528601 : Text;VAR Text@1100528602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Text") : Boolean;
    VAR
      Run@1100528604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Run";
    BEGIN
      CreateText(BookmarkValue, Text);
      Run := Run.Run();
      AppendChild(Run, Text);
      InsertAfter(BookmarkStart.Parent, Run, BookmarkStart);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE RemoveBookmark@1100528619(WordProcessingDocument@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WordprocessingDocument";BookmarkName@1100528601 : Text);
    VAR
      BookmarkStart@1100528602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BookmarkStart";
      BookmarkEnd@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd";
    BEGIN
      IF NOT GetBookmark(WordProcessingDocument, BookmarkName, BookmarkStart) THEN
        EXIT;
      GetBookmarkEnd(BookmarkStart, BookmarkEnd);
      BookmarkStart.Remove();
      IF NOT ISNULL(BookmarkEnd) THEN
       BookmarkEnd.Remove();
    END;

    LOCAL PROCEDURE RemoveOtherTexts@1100528635(BookmarkStart@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BookmarkStart";KeepText@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Text");
    VAR
      BookmarkEnd@1100528604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd";
      Element@1100528602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";
      IEnum@1100528606 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      Text@1100528605 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Text";
      V@1100528607 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";
    BEGIN
      IF NOT ISNULL(BookmarkStart.ColumnFirst) THEN
        EXIT;
      GetElementNextSibling(BookmarkStart, V);
      Element := V;
      WHILE NOT ISNULL(Element) DO BEGIN
        IF IsEndBookmark(V, BookmarkStart) OR SameType(V, BookmarkStart) THEN
          EXIT;
        GetDescendants(Element, GETDOTNETTYPE(Text), IEnum);
        WHILE IEnum.MoveNext DO BEGIN
          Text := IEnum.Current;
          IF NOT Text.Equals(KeepText) THEN
            Text.Remove;
        END;
        GetElementNextSibling(Element, V);
        Element := V;
      END;
    END;

    LOCAL PROCEDURE IsEndBookmark@1100528624(Element@1100528600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";BookmarkStart@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BookmarkStart") : Boolean;
    VAR
      BookmarkEnd@1100528602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd";
    BEGIN
      IF ISNULL(Element) THEN
        EXIT(FALSE);
      IF NOT SameType(Element, BookmarkEnd) THEN
        EXIT(FALSE);
      BookmarkEnd := Element;
      EXIT(BookmarkEnd.Id.Value = BookmarkStart.Id.Value);
    END;

    LOCAL PROCEDURE OpenDocument@1100528616(FileName@1100528600 : Text;VAR WordProcessingDocument@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WordprocessingDocument");
    BEGIN
      WordProcessingDocument := WordProcessingDocument.Open(FileName, TRUE);
    END;

    LOCAL PROCEDURE OpenDocumentStream@1100528640(VAR Stream@1100528602 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";VAR WordProcessingDocument@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WordprocessingDocument");
    BEGIN
      //The call process has to keep the Stream alive until after WordProcessingDocument.Close is called
      WordProcessingDocument := WordProcessingDocument.Open(Stream, TRUE);
    END;

    LOCAL PROCEDURE GetParent@1100528649(Element@1100528606 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";Type@1100528602 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";VAR Parent@1100528604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement") : Boolean;
    VAR
      NewElement@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";
    BEGIN
      NewElement := Element;
      WHILE NOT ISNULL(NewElement.Parent) DO BEGIN
        IF Type.Equals(GETDOTNETTYPE(NewElement.Parent)) THEN BEGIN
          Parent := NewElement.Parent;
          EXIT(TRUE);
        END;
        NewElement := NewElement.Parent;
      END;
    END;

    LOCAL PROCEDURE SetTextBold@1100528614(VAR Text@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Text";BoldFlag@1100528601 : Boolean);
    VAR
      Run@1100528602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Run";
      RunProperties@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.RunProperties";
      Bold@1100528604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Bold";
      OnOffValue@1100528605 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OnOffValue";
    BEGIN
      GetParent(Text, GETDOTNETTYPE(Run), Run);
      IF ISNULL(Run.RunProperties) THEN
        PrependChild(Run, RunProperties.RunProperties);
      RunProperties := Run.RunProperties;
      IF ISNULL(RunProperties.Bold) THEN
        RunProperties.Bold := Bold.Bold;
      Bold := RunProperties.Bold;
      Bold.Val := OnOffValue.FromBoolean(BoldFlag);
    END;

    LOCAL PROCEDURE SetTextUnderline@1100528615(VAR Text@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Text";UnderlineFlag@1100528600 : Boolean);
    VAR
      Run@1100528606 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Run";
      RunProperties@1100528605 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.RunProperties";
      Underline@1100528604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Underline";
      UnderlineValues@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.UnderlineValues";
      EnumValue@1100528611 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.EnumValue`1";
    BEGIN
      GetParent(Text, GETDOTNETTYPE(Run), Run);
      IF ISNULL(Run.RunProperties) THEN
        PrependChild(Run, RunProperties.RunProperties);
      RunProperties := Run.RunProperties;
      IF ISNULL(RunProperties.Underline) THEN
        RunProperties.Underline := Underline.Underline;
      Underline := RunProperties.Underline;
      IF UnderlineFlag THEN
        GetEnumValue(GETDOTNETTYPE(UnderlineValues), UnderlineValues.Single, EnumValue)
      ELSE
        GetEnumValue(GETDOTNETTYPE(UnderlineValues), UnderlineValues.None, EnumValue);
      Underline.Val := EnumValue;
    END;

    LOCAL PROCEDURE SetTextItalic@1100528617(VAR Text@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Text";ItalicFlag@1100528600 : Boolean);
    VAR
      Run@1100528602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Run";
      RunProperties@1100528605 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.RunProperties";
      Italic@1100528604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Italic";
      OnOffValue@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OnOffValue";
    BEGIN
      GetParent(Text, GETDOTNETTYPE(Run), Run);
      IF ISNULL(Run.RunProperties) THEN
        PrependChild(Run, RunProperties.RunProperties);
      RunProperties := Run.RunProperties;
      IF ISNULL(RunProperties.Italic) THEN
        RunProperties.Italic := Italic.Italic;
      Italic := RunProperties.Italic;
      Italic.Val := OnOffValue.FromBoolean(ItalicFlag);
    END;

    LOCAL PROCEDURE GetElementNextSibling@1100528639(Element@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";VAR NextElement@1100528601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object") : Boolean;
    VAR
      Type@1100528605 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      MethodInfo@1100528604 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      Parameters@1100528602 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      MethodInfos@1100528607 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
    BEGIN
      Type := GETDOTNETTYPE(Element);
      MethodInfos := Type.GetMethods;
      FOREACH MethodInfo IN MethodInfos DO
        IF (MethodInfo.Name = 'NextSibling') AND NOT MethodInfo.IsGenericMethod THEN
          BREAK;
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(GETDOTNETTYPE(Element)), 0);
      NextElement := MethodInfo.Invoke(Element, Parameters);
      EXIT(NOT ISNULL(NextElement));
    END;

    LOCAL PROCEDURE GetDescendant@1100528717(Element@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";DescendantType@1100528611 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";Index@1100528612 : Integer;VAR Descendant@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement") Found : Boolean;
    VAR
      Type@1100528605 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      IEnum@1100528609 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      i@1100528602 : Integer;
    BEGIN
      //Index=-1 => Last
      CLEAR(Descendant);
      GetDescendants(Element, DescendantType, IEnum);
      i := Index;
      WHILE IEnum.MoveNext AND ((Index = -1) OR (i >= 0)) DO BEGIN
        CLEAR(Descendant);
        Type := GETDOTNETTYPE(IEnum.Current);
        IF Type.Equals(DescendantType) THEN BEGIN
          Descendant := IEnum.Current;
          IF Index > -1 THEN
            i -= 1;
        END;
      END;
      EXIT(NOT ISNULL(Descendant));
    END;

    LOCAL PROCEDURE GetDescendants@1100528738(Element@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";DescendantType@1100528611 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";VAR DescendantsEnum@1100528609 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator") Found : Boolean;
    VAR
      Type@1100528605 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      MethodInfos@1100528608 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      MethodInfo@1100528604 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      GenericMethodInfo@1100528603 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      Parameters@1100528602 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Enum@1100528610 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.IEnumerable`1";
    BEGIN
      Type := GETDOTNETTYPE(Element);
      MethodInfos := Type.GetMethods;
      FOREACH MethodInfo IN MethodInfos DO
        IF (MethodInfo.Name = 'Descendants') AND MethodInfo.IsGenericMethod THEN
          BREAK;
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(DescendantType), 1);
      Parameters.SetValue(DescendantType, 0);
      GenericMethodInfo := MethodInfo.MakeGenericMethod(Parameters);
      Parameters := Parameters.CreateInstance(DescendantType, 0);
      Enum := GenericMethodInfo.Invoke(Element, Parameters);
      DescendantsEnum := Enum.GetEnumerator;
    END;

    LOCAL PROCEDURE GetElement@1100528724(Element@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";ElementType@1100528611 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";Index@1100528612 : Integer;VAR NextElement@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement") Found : Boolean;
    VAR
      Type@1100528605 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      IEnum@1100528609 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      i@1100528613 : Integer;
    BEGIN
      //Index=-1 => Last
      CLEAR(NextElement);
      GetElements(Element, ElementType, IEnum);
      i := Index;
      WHILE IEnum.MoveNext AND ((Index = -1) OR (i >= 0)) DO BEGIN
        Type := GETDOTNETTYPE(IEnum.Current);
        IF Type.Equals(ElementType) THEN BEGIN
          NextElement := IEnum.Current;
          IF Index > -1 THEN i -= 1;
        END;
      END;
      EXIT(NOT ISNULL(NextElement));
    END;

    LOCAL PROCEDURE GetElements@1100528743(Element@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";DescendantType@1100528611 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";VAR ElementsEnum@1100528606 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator");
    VAR
      Type@1100528605 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      MethodInfos@1100528608 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      MethodInfo@1100528604 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      GenericMethodInfo@1100528603 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      Parameters@1100528602 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Enum@1100528610 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.IEnumerable`1";
    BEGIN
      Type := GETDOTNETTYPE(Element);
      MethodInfos := Type.GetMethods;
      FOREACH MethodInfo IN MethodInfos DO
        IF (MethodInfo.Name = 'Elements') AND MethodInfo.IsGenericMethod THEN
          BREAK;
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(DescendantType), 1);
      Parameters.SetValue(DescendantType, 0);
      GenericMethodInfo := MethodInfo.MakeGenericMethod(Parameters);
      Parameters := Parameters.CreateInstance(DescendantType, 0);
      Enum := GenericMethodInfo.Invoke(Element, Parameters);
      ElementsEnum := Enum.GetEnumerator;
    END;

    LOCAL PROCEDURE GetFirstChild@1100528702(Element@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";ChildType@1100528607 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";VAR ChildElement@1100528606 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement") : Boolean;
    VAR
      Type@1100528603 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      MethodInfo@1100528602 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      GenericMethodInfo@1100528605 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.MethodInfo";
      Parameters@1100528604 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
    BEGIN
      Type := GETDOTNETTYPE(Element);
      MethodInfo := Type.GetMethod('GetFirstChild');
      Parameters := Parameters.CreateInstance(GETDOTNETTYPE(ChildType), 1);
      Parameters.SetValue(ChildType, 0);
      GenericMethodInfo := MethodInfo.MakeGenericMethod(Parameters);
      Parameters := Parameters.CreateInstance(ChildType, 0);
      ChildElement := GenericMethodInfo.Invoke(Element, Parameters);
      EXIT(NOT ISNULL(ChildElement));
    END;

    LOCAL PROCEDURE IndexOfStringInList@1100528601(VAR Texts@1100528603 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";Value@1100528602 : Text;VAR FirstIndex@1100528600 : Integer;VAR LastIndex@1100528601 : Integer) : Boolean;
    VAR
      Text@1100528606 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Text";
      i@1100528604 : Integer;
      j@1100528608 : Integer;
      s@1100528605 : Text;
    BEGIN
      FirstIndex := -1;
      LastIndex := -1;
      FOREACH Text IN Texts DO BEGIN
        s += Text.Text;
        IF STRPOS(s, '@' + Value + '@') > 0 THEN BEGIN
          IF STRPOS(Text.Text, '@' + Value + '@') > 0 THEN
            FirstIndex := i
          ELSE BEGIN
            j := i -1;
            WHILE j >= 0 DO BEGIN
              Text := Texts.Item(j);
              IF STRPOS(Text.Text, '@') > 0 THEN BEGIN
                FirstIndex := j;
                BREAK;
              END;
              j -= 1;
            END;
          END;
          LastIndex := i;
          EXIT(TRUE);
        END;
        i += 1;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE SameType@1100528792(VAR Object1@1100528601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";VAR Object2@1100528600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object") : Boolean;
    VAR
      Type1@1100528602 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      Type2@1100528400 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
    BEGIN
      IF ISNULL(Object1) THEN
        Type1 := GETDOTNETTYPE(Object1)
      ELSE
        Type1 := Object1.GetType;
      IF ISNULL(Object2) THEN
        Type2 := GETDOTNETTYPE(Object2)
      ELSE
        Type2 := Object2.GetType;
      EXIT(Type1.Equals(Type2));
    END;

    LOCAL PROCEDURE GetEnumValue@1100528662(EnumType@1100528600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";EnumValueValue@1100528603 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";VAR EnumValue@1100528602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.EnumValue`1");
    VAR
      Activator@1100528618 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Activator";
      Type@1100528617 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      Arr@1100528601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
    BEGIN
      Arr := Arr.CreateInstance(GETDOTNETTYPE(EnumType), 1);
      Arr.SetValue(EnumType, 0);
      Type := GETDOTNETTYPE(EnumValue);
      Type := Type.MakeGenericType(Arr);
      EnumValue := Activator.CreateInstance(Type);
      EnumValue.Value := EnumValueValue;
    END;

    LOCAL PROCEDURE GetAltChunkStream@1100528613(Document@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WordprocessingDocument";Stream@1100528601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";VAR AltChunk@1100528602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.AltChunk");
    VAR
      MainDocumentPart@1100528606 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.MainDocumentPart";
      AlternativeFormatImportPartType@1100528607 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.AlternativeFormatImportPartType";
      AlternativeFormatImportPart@1100528605 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.AlternativeFormatImportPart";
      StringValue@1100528608 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.StringValue";
      AltChunkId@1100528603 : Text;
    BEGIN
      AltChunkId := STRSUBSTNO('AltChunkId%1', DELCHR(CREATEGUID, '<=>', '{}'));
      MainDocumentPart := Document.MainDocumentPart;
      AlternativeFormatImportPart := MainDocumentPart.AddAlternativeFormatImportPart(AlternativeFormatImportPartType.WordprocessingML, AltChunkId);
      AlternativeFormatImportPart.FeedData(Stream);
      AltChunk := AltChunk.AltChunk;
      StringValue := StringValue.StringValue;
      StringValue.Value := AltChunkId;
      AltChunk.Id := StringValue;
    END;

    LOCAL PROCEDURE GetLastElementOfBody@1100528631(WordProcessingDocument@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WordprocessingDocument";VAR FoundObject@1100528607 : Variant;VAR FoundObjectType@1100528606 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type");
    VAR
      Element@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";
      IEnum@1100528602 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      Type@1100528603 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      Paragraph@1100528605 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Paragraph";
      AltChunk@1100528604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.AltChunk";
    BEGIN
      GetElements(WordProcessingDocument.MainDocumentPart.Document.Body, GETDOTNETTYPE(Element), IEnum);
      WHILE IEnum.MoveNext DO BEGIN
        Type := GETDOTNETTYPE(IEnum.Current);
        IF Type.Equals(GETDOTNETTYPE(Paragraph)) OR Type.Equals(GETDOTNETTYPE(AltChunk)) THEN BEGIN
          FoundObject := IEnum.Current;
          FoundObjectType := Type;
        END;
      END;
    END;

    LOCAL PROCEDURE GetBookmarkEnd@1100528644(BookmarkStart@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BookmarkStart";VAR BookmarkEnd@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd") : Boolean;
    VAR
      Element@1100528604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";
      V@1100528600 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";
    BEGIN
      IF ISNULL(BookmarkStart) THEN
        EXIT;
      GetElementNextSibling(BookmarkStart, V);
      WHILE NOT ISNULL(V) DO BEGIN
        IF IsEndBookmark(V, BookmarkStart) THEN BEGIN
          BookmarkEnd := V;
          BREAK;
        END;
        Element := V;
        GetElementNextSibling(Element, V);
      END;
    END;

    LOCAL PROCEDURE GetPageWidthInEmu@1100528622(WordProcessingDocument@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WordprocessingDocument") : Integer;
    VAR
      SectionProperties@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.SectionProperties";
      PageSize@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.PageSize";
      PageMargin@1100528604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.PageMargin";
    BEGIN
      IF GetFirstChild(WordProcessingDocument.MainDocumentPart.Document.Body, GETDOTNETTYPE(SectionProperties), SectionProperties) THEN BEGIN
        GetFirstChild(SectionProperties, GETDOTNETTYPE(PageSize), PageSize);
        GetFirstChild(SectionProperties, GETDOTNETTYPE(PageMargin), PageMargin);
        EXIT(DxaToEmu(PageSize.Width.Value - PageMargin.Right.Value - PageMargin.Left.Value));
      END;
    END;

    LOCAL PROCEDURE UnitToEmu@1100528634(Units@1100528600 : Integer;UnitOfMeasure@1100528601 : Text) : Integer;
    BEGIN
      CASE LOWERCASE(UnitOfMeasure) OF
        'dxa':
          EXIT(DxaToEmu(Units));
      ELSE
        ERROR(Text000, UnitOfMeasure);
      END;
    END;

    LOCAL PROCEDURE DxaToEmu@1100528626(Dxa@1100528600 : Integer) : Integer;
    VAR
      Points@1100528601 : Decimal;
    BEGIN
      Points := Dxa / 20;
      EXIT(InchToEmu(Points / 72));
    END;

    LOCAL PROCEDURE InchToEmu@1100528627(Inch@1100528600 : Decimal) : Integer;
    VAR
      EmusPerInch@1100528601 : Integer;
    BEGIN
      EmusPerInch := 914400;
      EXIT(ROUND(Inch * EmusPerInch, 1));
    END;

    LOCAL PROCEDURE PxToEmu@1100528657(Px@1100528600 : Integer;Dpi@1100528601 : Decimal) : Integer;
    VAR
      Inch@1100528602 : Decimal;
    BEGIN
      Inch := Px / Dpi;
      EXIT(InchToEmu(Inch));
    END;

    LOCAL PROCEDURE GetDrawing@1100528637(WordProcessingDocument@1100528600 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WordprocessingDocument";Stream@1100528606 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";MaxWidthInEmu@1100528602 : Integer;VAR Drawing@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Drawing");
    VAR
      ImagePartType@1100528604 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.ImagePartType";
      ImagePart@1100528605 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.ImagePart";
      Image@1100528609 : DotNet "'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Image";
      Inline@1100528610 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.Wordprocessing.Inline";
      Extent@1100528611 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.Wordprocessing.Extent";
      EffectExtent@1100528612 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.Wordprocessing.EffectExtent";
      DocProperties@1100528613 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.Wordprocessing.DocProperties";
      NonVisualGraphicFrameDrawingProperties@1100528614 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.Wordprocessing.NonVisualGraphicFrameDrawingProperties";
      Graphic@1100528618 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.Graphic";
      GraphicData@1100528619 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.GraphicData";
      Picture@1100528620 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.Pictures.Picture";
      NonVisualPictureProperties@1100528622 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.Pictures.NonVisualPictureProperties";
      NonVisualDrawingProperties@1100528621 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.Pictures.NonVisualDrawingProperties";
      NonVisualPictureDrawingProperties@1100528623 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.Pictures.NonVisualPictureDrawingProperties";
      BlipFill@1100528624 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.Pictures.BlipFill";
      Blip@1100528625 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.Blip";
      BlipCompressionValues@1100528636 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.BlipCompressionValues";
      BlipExtensionList@1100528626 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.BlipExtensionList";
      BlipExtension@1100528627 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.BlipExtension";
      Stretch@1100528628 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.Stretch";
      FillRectangle@1100528637 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.FillRectangle";
      ShapeProperties@1100528629 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.Pictures.ShapeProperties";
      Transform2D@1100528630 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.Transform2D";
      Offset@1100528631 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.Offset";
      Extents@1100528632 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.Extents";
      PresetGeometry@1100528633 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.PresetGeometry";
      ShareTypeValues@1100528635 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.ShapeTypeValues";
      AdjustValueList@1100528634 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Drawing.AdjustValueList";
      UInt32Value@1100528617 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.UInt32Value";
      Int64Value@1100528638 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Int64Value";
      HexBinaryValue@1100528615 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.HexBinaryValue";
      StringValue@1100528639 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.StringValue";
      EnumValue@1100528640 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.EnumValue`1";
      RelationshipId@1100528601 : Text;
      ImageWidth@1100528607 : Decimal;
      ImageHeight@1100528608 : Decimal;
    BEGIN
      ImagePart := WordProcessingDocument.MainDocumentPart.AddImagePart(ImagePartType.Jpeg);
      ImagePart.FeedData(Stream);

      RelationshipId := WordProcessingDocument.MainDocumentPart.GetIdOfPart(ImagePart);
      Image := Image.FromStream(Stream);

      ScaleSize(
        PxToEmu(Image.Width, Image.HorizontalResolution),
        PxToEmu(Image.Height, Image.VerticalResolution),
        ImageWidth,
        ImageHeight,
        MaxWidthInEmu);

      Drawing := Drawing.Drawing;
        Inline := Inline.Inline;
        Inline.DistanceFromTop := UInt32Value.UInt32Value;
        Inline.DistanceFromTop.Value := 0;
        Inline.DistanceFromBottom := UInt32Value.UInt32Value;
        Inline.DistanceFromBottom.Value := 0;
        Inline.DistanceFromLeft := UInt32Value.UInt32Value;
        Inline.DistanceFromLeft.Value := 0;
        Inline.DistanceFromRight := UInt32Value.UInt32Value;
        Inline.DistanceFromRight.Value := 0;
        HexBinaryValue := HexBinaryValue.HexBinaryValue('50D07946');
        Inline.EditId := HexBinaryValue;
        AppendChild(Drawing, Inline);
          Extent := Extent.Extent;
          Extent.Cx := Int64Value.Int64Value;
          Extent.Cx.Value := ImageWidth;
          Extent.Cy := Int64Value.Int64Value;
          Extent.Cy.Value := ImageHeight;
          AppendChild(Inline, Extent);

          EffectExtent := EffectExtent.EffectExtent;
          EffectExtent.LeftEdge := Int64Value.Int64Value;
          EffectExtent.LeftEdge.Value := 0;
          EffectExtent.TopEdge := Int64Value.Int64Value;
          EffectExtent.TopEdge.Value := 0;
          EffectExtent.RightEdge := Int64Value.Int64Value;
          EffectExtent.RightEdge.Value := 0;
          EffectExtent.BottomEdge := Int64Value.Int64Value;
          EffectExtent.BottomEdge.Value := 0;
          AppendChild(Inline, EffectExtent);

          DocProperties := DocProperties.DocProperties;
          DocProperties.Id := UInt32Value.UInt32Value;
          DocProperties.Id.Value := 1;
          DocProperties.Name := StringValue.StringValue;
          DocProperties.Name.Value := 'Picture 1';
          AppendChild(Inline, DocProperties);

          NonVisualGraphicFrameDrawingProperties := NonVisualGraphicFrameDrawingProperties.NonVisualGraphicFrameDrawingProperties;
          AppendChild(Inline, NonVisualGraphicFrameDrawingProperties);

          Graphic := Graphic.Graphic;
          AppendChild(Inline, Graphic);
            GraphicData := GraphicData.GraphicData;
            GraphicData.Uri := StringValue.StringValue;
            GraphicData.Uri.Value := 'http://schemas.openxmlformats.org/drawingml/2006/picture';
            AppendChild(Graphic, GraphicData);
              Picture := Picture.Picture;
              AppendChild(GraphicData, Picture);
                NonVisualPictureProperties := NonVisualPictureProperties.NonVisualPictureProperties;
                AppendChild(Picture, NonVisualPictureProperties);
                  NonVisualDrawingProperties := NonVisualDrawingProperties.NonVisualDrawingProperties;
                  NonVisualDrawingProperties.Id := UInt32Value.UInt32Value;
                  NonVisualDrawingProperties.Id.Value := 1;
                  NonVisualDrawingProperties.Name := StringValue.StringValue;
                  NonVisualDrawingProperties.Name.Value := 'New Bitmap Image.jpg';
                  AppendChild(NonVisualPictureProperties, NonVisualDrawingProperties);

                  NonVisualPictureDrawingProperties := NonVisualPictureDrawingProperties.NonVisualPictureDrawingProperties;
                  AppendChild(NonVisualPictureProperties, NonVisualPictureDrawingProperties);
                BlipFill := BlipFill.BlipFill;
                AppendChild(Picture, BlipFill);
                  Blip := Blip.Blip;
                  Blip.Embed := StringValue.StringValue;
                  Blip.Embed.Value := RelationshipId;
                  GetEnumValue(GETDOTNETTYPE(BlipCompressionValues), BlipCompressionValues.Print, EnumValue);
                  Blip.CompressionState := EnumValue;
                  AppendChild(BlipFill, Blip);
                    BlipExtensionList := BlipExtensionList.BlipExtensionList;
                    AppendChild(Blip, BlipExtensionList);
                      BlipExtension := BlipExtension.BlipExtension;
                      BlipExtension.Uri := StringValue.StringValue;
                      BlipExtension.Uri.Value := '{28A0092B-C50C-407E-A947-70E740481C1C}';
                      AppendChild(BlipExtensionList, BlipExtension);
                  Stretch := Stretch.Stretch;
                  AppendChild(BlipFill, Stretch);
                    FillRectangle := FillRectangle.FillRectangle;
                    AppendChild(Stretch, FillRectangle);
                ShapeProperties := ShapeProperties.ShapeProperties;
                AppendChild(Picture, ShapeProperties);
                  Transform2D := Transform2D.Transform2D;
                  AppendChild(ShapeProperties, Transform2D);
                    Offset := Offset.Offset;
                    Offset.X := Int64Value.Int64Value;
                    Offset.X.Value := 0;
                    Offset.Y := Int64Value.Int64Value;
                    Offset.Y.Value := 0;
                    AppendChild(Transform2D, Offset);

                    Extents := Extents.Extents;
                    Extents.Cx := Int64Value.Int64Value;
                    Extents.Cx.Value := ImageWidth;
                    Extents.Cy := Int64Value.Int64Value;
                    Extents.Cy.Value := ImageHeight;
                    AppendChild(Transform2D, Extents);

                    PresetGeometry := PresetGeometry.PresetGeometry;
                    GetEnumValue(GETDOTNETTYPE(ShareTypeValues), ShareTypeValues.Rectangle, EnumValue);
                    PresetGeometry.Preset := EnumValue;
                  AppendChild(ShapeProperties, PresetGeometry);
                    AdjustValueList := AdjustValueList.AdjustValueList;
                    AppendChild(PresetGeometry, AdjustValueList);
    END;

    LOCAL PROCEDURE ScaleSize@1100528658(W@1100528600 : Decimal;H@1100528601 : Decimal;VAR Width@1100528602 : Decimal;VAR Height@1100528603 : Decimal;MaxWidth@1100528604 : Decimal);
    VAR
      Ratio@1100528605 : Decimal;
    BEGIN
      Width := W;
      Height := H;
      IF Width > MaxWidth THEN BEGIN
        Ratio := Height / Width;
        Width := MaxWidth;
        Height := ROUND(Width * Ratio, 1);
      END;
    END;

    LOCAL PROCEDURE ReplaceFieldOnce@1100528759(WordProcessingDocument@1100528601 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WordprocessingDocument";FieldName@1100528600 : Text;Replacement@1100528602 : Text) : Boolean;
    VAR
      Text@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Wordprocessing.Text";
      IEnum@1100528604 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      Texts@1100528613 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      s@1100528609 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      StringComparison@1100528611 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.StringComparison";
      SpaceProcessingModeValues@1100528612 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.SpaceProcessingModeValues";
      i@1100528606 : Integer;
      FirstIndex@1100528607 : Integer;
      LastIndex@1100528608 : Integer;
      position@1100528610 : Integer;
    BEGIN
      GetDescendants(WordProcessingDocument.MainDocumentPart.Document.Body, GETDOTNETTYPE(Text), IEnum);
      Texts := Texts.List;
      WHILE IEnum.MoveNext DO BEGIN
        Text := IEnum.Current;
        IF DELCHR(Text.Text, '=', ' ') <> '' THEN BEGIN
          Texts.Add(Text);
        END;
      END;

      IF IndexOfStringInList(Texts, FieldName, FirstIndex, LastIndex) THEN BEGIN
        IF FirstIndex = LastIndex THEN BEGIN
          Text := Texts.Item(FirstIndex);
          s := Text.Text;
          Text.Text := s.Replace('@' + FieldName + '@', Replacement);
          EXIT(TRUE);
        END;

        IF FirstIndex +1 = LastIndex THEN BEGIN
          Text := Texts.Item(FirstIndex);
          IF Text.Text = '@' THEN
            Text.Remove
          ELSE BEGIN
            s := Text.Text;
            position := s.LastIndexOf('@', StringComparison.InvariantCultureIgnoreCase);
            IF position > 0 THEN BEGIN
              Text.Text := s.Substring(0, position);
              Text.Space := {al:Text.Space.EnumValue(}SpaceProcessingModeValues.Preserve{)};
            END;
            IF position = 0 THEN
              Text.Remove;
          END;

          Text := Texts.Item(LastIndex);
          s := Text.Text;
          position := s.IndexOf('@', StringComparison.InvariantCultureIgnoreCase);
          IF position > -1 THEN BEGIN
            Text.Text := Replacement + s.Substring(position +1);
            Text.Space := {al:Text.Space.EnumValue(}SpaceProcessingModeValues.Preserve{)};
          END;
          EXIT(TRUE);
        END;

        IF FirstIndex +1 < LastIndex THEN BEGIN
          Text := Texts.Item(FirstIndex);
          IF Text.Text = '@' THEN
            Text.Remove
          ELSE BEGIN
            s := Text.Text;
            position := s.LastIndexOf('@', StringComparison.InvariantCultureIgnoreCase);
            IF position > 0 THEN BEGIN
              Text.Text := s.Substring(0, position);
              Text.Space := {al:Text.Space.EnumValue(}SpaceProcessingModeValues.Preserve{)};
            END;
            IF position = 0 THEN
              Text.Remove;
          END;

          Text := Texts.Item(FirstIndex +1);
          Text.Text := Replacement;

          FOR i := FirstIndex +2 TO LastIndex -1 DO BEGIN
            Text := Texts.Item(i);
            Text.Remove;
          END;

          Text := Texts.Item(LastIndex);
          IF Text.Text = '@' THEN
            Text.Remove
          ELSE BEGIN
            s := Text.Text;
            position := s.IndexOf('@', StringComparison.InvariantCultureIgnoreCase);
            IF position > -1 THEN BEGIN
              Text.Text := s.Substring(position +1);
              Text.Space := {al:Text.Space.EnumValue(}SpaceProcessingModeValues.Preserve{)};
            END;
          END;
          EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE RemoveDescendants@1100528646(Element@1100528602 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";DescendantType@1100528601 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type");
    VAR
      Descendant@1100528603 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";
      DescendantsEnum@1100528604 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
    BEGIN
      GetDescendants(Element, DescendantType, DescendantsEnum);
      WHILE DescendantsEnum.MoveNext DO BEGIN
        Descendant := DescendantsEnum.Current;
        Descendant.Remove;
      END;
    END;

    BEGIN
    END.
  }
}

