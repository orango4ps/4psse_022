OBJECT Page 11126464 Collective Plan Service Orders
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Collective Plan Service Orders;
               SVE=Samlingsfakturor serviceordrar];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table11012823;
    PageType=List;
    UsageCategory=Tasks;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Related Information;
                                NOR=Ny,Prosess,Rapport,Relatert informasjon;
                                SVE=Ny,Process,Rapport, Relaterad information];
    OnInit=BEGIN
             ResourceNoEditable := TRUE;
             PlanSeqNo := 1;
           END;

    OnOpenPage=VAR
                 ServiceSetup@1100528600 : Record 11012800;
               BEGIN
                 ServiceSetup.GET;
                 IF ServiceSetup."SO (Plan) Ref. Point Filter" <> '' THEN
                   SETFILTER("Actual Reference Point (Gantt)", ServiceSetup."SO (Plan) Ref. Point Filter");
                 SETCURRENTKEY("Post Code");

                 ResourceNo := '';
                 ResourceNoOnValidate;

                 IF PlanMethod = PlanMethod::Employee THEN BEGIN
                   PlanDateFrom := 0D;
                   PlanDateUntil := 0D;
                 END;

                 IF EVALUATE(ReferencePointPrepare, ServiceSetup."SO (Prepare) Ref. Point Filter") THEN;
                 IF EVALUATE(ReferencePointPlan, ServiceSetup."SO (Plan) Ref. Point Filter") THEN;
                 IF EVALUATE(ReferencePointReview, ServiceSetup."SO (Review) Ref. Point Filter") THEN;
                 IF EVALUATE(ReferencePointInvoice, ServiceSetup."SO (Invoice) Ref. Point Filter") THEN;
               END;

    OnAfterGetRecord=VAR
                       ServiceOrderInfoMgt@1100528600 : Codeunit 11012841;
                     BEGIN
                       StandardObjectNo := ServiceOrderInfoMgt.GetSOStandardObjectNo("No.", StandardObjectDescription);
                     END;

    ActionList=ACTIONS
    {
      { 1100528614;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100528615;1 ;ActionGroup;
                      CaptionML=[ENU=Functions;
                                 NOR=Funksjoner;
                                 SVE=Funktioner] }
      { 1100528616;2 ;Action    ;
                      CaptionML=[ENU=Plan;
                                 NOR=Plan;
                                 SVE=Plan];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Planning;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ServiceOrder@1100528601 : Record 11012823;
                                 PlanServiceOrdersPAGE@1100528600 : Page 11126468;
                               BEGIN
                                 ServiceOrder.COPY(Rec);
                                 CurrPage.SETSELECTIONFILTER(ServiceOrder);
                                 IF NOT PlanIndividually AND (TmpCollectivePlanTeam.GetResourceNoTeamLeader(TmpCollectivePlanTeam) = '') THEN
                                   ERROR(Text002);
                                 PlanServiceOrdersPAGE.SetSelection(ServiceOrder, TmpCollectivePlanTeam, PlanIndividually, PlanDateFrom, PlanDateUntil, PlanSeqNo);
                                 PlanServiceOrdersPAGE.RUNMODAL;
                                 PlanServiceOrdersPAGE.ShowErrorsIfAvailable;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1100525005;2 ;Action    ;
                      CaptionML=[ENU=Update Order Status;
                                 NOR=Oppdater ordrestatus;
                                 SVE=Uppdatera orderstatus];
                      Image=ResetStatus;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ServiceOrder@1100525001 : Record 11012823;
                                 ServiceOrderManagement@1100525000 : Codeunit 11012870;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(ServiceOrder);
                                 ServiceOrderManagement.UpdateServiceOrderStatus(ServiceOrder);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1100525004;2 ;Action    ;
                      CaptionML=ENU=Unplan;
                      PromotedIsBig=Yes;
                      Image=RefreshPlanningLine;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ServiceOrder@1100528601 : Record 11012823;
                                 ServiceOrderPlanManagement@1100528600 : Codeunit 11012868;
                                 NoOfServiceOrderToUnplan@1100528603 : Integer;
                                 NoOfServiceOrdersUnplanned@1100528602 : Integer;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(ServiceOrder);
                                 NoOfServiceOrderToUnplan := ServiceOrder.COUNT;
                                 NoOfServiceOrdersUnplanned := ServiceOrderPlanManagement.UnplanServiceOrders(ServiceOrder);
                                 MESSAGE(Text004, NoOfServiceOrdersUnplanned, NoOfServiceOrderToUnplan);
                               END;
                                }
      { 1100528629;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Send Appointment Letter;
                                 SVE=Skriv ut m”tesbrev];
                      Promoted=Yes;
                      Image=SendApprovalRequest;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ServiceOrder@1100528600 : Record 11012823;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(ServiceOrder);
                                 IF ServiceOrder.ISEMPTY THEN
                                   ERROR(Text003);
                                 ServiceOrder.SETCURRENTKEY("No.");
                                 SendAppointmentConfirmation(ServiceOrder);
                               END;
                                }
      { 1100528625;2 ;Action    ;
                      CaptionML=ENU=Copy Preferred Employee to Employee;
                      Promoted=Yes;
                      Image=UnitConversions;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ConvertPreferredEmployeeFilterToTeam;
                                 DetermineResourceNo;
                                 DetermineFilters;
                                 ApplyFilters;
                               END;
                                }
      { 1100525003;2 ;Action    ;
                      CaptionML=[ENU=Planned;
                                 NOR=Planlagt;
                                 SVE=Planerad];
                      Image=Planning;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ServiceOrder@1100525000 : Record 11012823;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(ServiceOrder);
                                 IF ServiceOrder.ISEMPTY THEN
                                   ERROR(Text003);
                                 ServiceOrder.SETCURRENTKEY("No.");
                                 IF ServiceOrder.FINDSET THEN
                                   REPEAT
                                     ServiceOrder.UpdateToNextRefPoint(0); // Planned
                                   UNTIL ServiceOrder.NEXT = 0;
                               END;
                                }
      { 1100525002;2 ;Action    ;
                      CaptionML=[ENU=Reviewed;
                                 NOR=Vurdert;
                                 SVE=Granskat];
                      Image=ReviewWorksheet;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ServiceOrder@1100525000 : Record 11012823;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(ServiceOrder);
                                 IF ServiceOrder.ISEMPTY THEN
                                   ERROR(Text003);
                                 ServiceOrder.SETCURRENTKEY("No.");
                                 IF ServiceOrder.FINDSET THEN
                                   REPEAT
                                     ServiceOrder.UpdateToNextRefPoint(1); // Reviewed
                                   UNTIL ServiceOrder.NEXT = 0;
                               END;
                                }
      { 1100525001;2 ;Action    ;
                      CaptionML=[ENU=Not Invoice;
                                 NOR=Ikke faktura;
                                 SVE=Faktureras ej];
                      Image=CancelAllLines;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ServiceOrder@1100525000 : Record 11012823;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(ServiceOrder);
                                 IF ServiceOrder.ISEMPTY THEN
                                   ERROR(Text003);
                                 ServiceOrder.SETCURRENTKEY("No.");
                                 IF ServiceOrder.FINDSET THEN
                                   REPEAT
                                     ServiceOrder.UpdateToNextRefPoint(3); // Not Invoice
                                   UNTIL ServiceOrder.NEXT = 0;
                               END;
                                }
      { 1100525000;2 ;Action    ;
                      CaptionML=[ENU=Make Chargeable;
                                 NOR=Gj›r betalbar;
                                 SVE=G”r debiterbar];
                      Image=CreateFinanceChargememo;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ServiceOrder@1100525000 : Record 11012823;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(ServiceOrder);
                                 IF ServiceOrder.ISEMPTY THEN
                                   ERROR(Text003);
                                 ServiceOrder.SETCURRENTKEY("No.");
                                 IF ServiceOrder.FINDSET THEN
                                   REPEAT
                                     ServiceOrder.UpdateToNextRefPoint(2); // Make Chargeable
                                   UNTIL ServiceOrder.NEXT = 0;
                               END;
                                }
      { 1100528657;2 ;Action    ;
                      CaptionML=[ENU=Create Next Service Order (Unfinished);
                                 SVE=Skapa n„sta serviceorder (of„rdig)];
                      Promoted=Yes;
                      Image=MakeOrder;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ServiceOrder@1210190001 : Record 11012823;
                                 CreateNextServiceOrderUnf@1100528600 : Page 11229427;
                                 ServiceOrderNoRange@1210190002 : Code[50];
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(ServiceOrder);
                                 IF ServiceOrder.ISEMPTY THEN
                                   ERROR(Text003);
                                 IF CreateNextServiceOrderUnf.StdDialogRunModalMultiCopy(ServiceOrder, ServiceOrderNoRange) THEN
                                   MESSAGE(Text007, ServiceOrderNoRange);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1100528656;  ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1100528627;1 ;Action    ;
                      CaptionML=ENU=Open Work;
                      Promoted=Yes;
                      Image=CalculateLines;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ServiceOrder@1100528601 : Record 11012823;
                                 ServiceLocation@1100528602 : Record 11012801;
                                 ServiceOrderPlanManagement@1100528603 : Codeunit 11012868;
                                 OpenWorkloadbyServLocPAGE@1100528600 : Page 11126466;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(ServiceOrder);
                                 ServiceOrderPlanManagement.GetServiceLocationDSFromServiceOrders(ServiceOrder, ServiceLocation);
                                 OpenWorkloadbyServLocPAGE.SetOpenWorkloadData(ServiceLocation, ServiceOrder, 3);
                                 OpenWorkloadbyServLocPAGE.RUNMODAL;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1100528632;1 ;Action    ;
                      CaptionML=ENU=Service Location Cockpit;
                      Promoted=Yes;
                      Image=EditLines;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ServiceLocation@1100528600 : Record 11012801;
                               BEGIN
                                 TESTFIELD("Service Location No.");
                                 ServiceLocation.GET("Service Location No.");
                                 PAGE.RUNMODAL(PAGE::"Service Location Cockpit", ServiceLocation);
                               END;
                                }
      { 1100528630;1 ;Action    ;
                      CaptionML=[ENU=Contract Terms;
                                 NOR=Kontraktsbetingelser;
                                 SVE=Kontraktvillkor];
                      Promoted=Yes;
                      Image=SNInfo;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ServiceOrderInfoMgt@1100528600 : Codeunit 11012841;
                               BEGIN
                                 TESTFIELD("Service Contract No.");
                                 ServiceOrderInfoMgt.ShowServiceTextLines("Service Contract No.", 6);
                               END;
                                }
      { 1100528631;1 ;Action    ;
                      CaptionML=[ENU=Report Procedure;
                                 NOR=Rapportprosedyre;
                                 SVE=Rapportprocedur];
                      Promoted=Yes;
                      Image=SNInfo;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ServiceOrderInfoMgt@1100528600 : Codeunit 11012841;
                               BEGIN
                                 TESTFIELD("Service Location No.");
                                 ServiceOrderInfoMgt.ShowServiceTextLines("Service Location No.", 5);
                               END;
                                }
      { 1100528501;1 ;Action    ;
                      ShortCutKey=Shift+Ctrl+E;
                      CaptionML=ENU=Edit;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Edit;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 OpenCardPage(TRUE);
                               END;
                                }
      { 1100528502;1 ;Action    ;
                      ShortCutKey=Shift+Ctrl+R;
                      CaptionML=ENU=View;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=View;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 OpenCardPage(FALSE);
                               END;
                                }
      { 1100528503;1 ;Action    ;
                      CaptionML=ENU=Delete;
                      Promoted=Yes;
                      PromotedIsBig=No;
                      Image=Delete;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 DELETE(TRUE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100528600;0;Container;
                ContainerType=ContentArea }

    { 1100528601;1;Group  ;
                Name=Group;
                GroupType=Repeater }

    { 1100528602;2;Field  ;
                SourceExpr="No.";
                Editable=FALSE }

    { 1100528626;2;Field  ;
                SourceExpr="Source Type" }

    { 1100528603;2;Field  ;
                SourceExpr=Description;
                Editable=FALSE }

    { 1100528604;2;Field  ;
                SourceExpr="Description 2";
                Editable=FALSE }

    { 1100528605;2;Field  ;
                SourceExpr="Customer No.";
                Editable=FALSE }

    { 1100528606;2;Field  ;
                SourceExpr=Name;
                Editable=FALSE }

    { 1100528607;2;Field  ;
                SourceExpr="Name 2";
                Editable=FALSE }

    { 1100528608;2;Field  ;
                SourceExpr=Address;
                Editable=FALSE }

    { 1100528609;2;Field  ;
                SourceExpr="Address 2";
                Editable=FALSE }

    { 1100528611;2;Field  ;
                SourceExpr="Post Code";
                Editable=FALSE }

    { 1100525006;2;Field  ;
                SourceExpr="Post Code Type" }

    { 1100528638;2;Field  ;
                SourceExpr="House No." }

    { 1100528639;2;Field  ;
                SourceExpr="House No. Ext." }

    { 1100528610;2;Field  ;
                SourceExpr=City;
                Editable=FALSE }

    { 1100528645;2;Field  ;
                SourceExpr="First Possible Starting Date";
                Editable=FALSE }

    { 1100528646;2;Field  ;
                SourceExpr="First Possible Starting Time";
                Editable=FALSE }

    { 1100528649;2;Field  ;
                SourceExpr="Last Possible Ending Date";
                Editable=FALSE }

    { 1100528650;2;Field  ;
                SourceExpr="Last Possible Ending Time";
                Editable=FALSE }

    { 1100528618;2;Field  ;
                SourceExpr="Starting Date";
                Editable=FALSE }

    { 1100528619;2;Field  ;
                SourceExpr="Starting Time";
                Editable=FALSE }

    { 1100528620;2;Field  ;
                SourceExpr="Ending Date";
                Editable=FALSE }

    { 1100528621;2;Field  ;
                SourceExpr="Ending Time";
                Editable=FALSE }

    { 1100528617;2;Field  ;
                SourceExpr="Duration Time";
                Editable=FALSE }

    { 1100528506;2;Field  ;
                SourceExpr="Budget Hours" }

    { 1100528651;2;Field  ;
                CaptionML=[ENU=No. of Work Orders;
                           SVE=Antal arbetsordrar];
                SourceExpr=ServiceOrderInfoMgt.GetNoOfWorkOrders("No.");
                OnDrillDown=BEGIN
                              ServiceOrderInfoMgt.ShowSOWorkOrders("No.");
                            END;
                             }

    { 1100528652;2;Field  ;
                CaptionML=[ENU=Resource;
                           NOR=Ressurs;
                           SVE=Resurs];
                SourceExpr=ServiceOrderInfoMgt.NoOfResourcesByServiceOrder("No.");
                Editable=FALSE }

    { 1100528741;2;Field  ;
                SourceExpr="Employee No.";
                Editable=FALSE }

    { 1100528742;2;Field  ;
                SourceExpr="Employee Name" }

    { 1100528653;2;Field  ;
                SourceExpr="Preferred Employee No." }

    { 1100528654;2;Field  ;
                SourceExpr="Preferred Employee Name" }

    { 1100528612;2;Field  ;
                SourceExpr="Phone No.";
                Editable=FALSE }

    { 1100528613;2;Field  ;
                SourceExpr="Customer Name" }

    { 1100528641;2;Field  ;
                SourceExpr="Service Location No.";
                Editable=FALSE }

    { 1100528642;2;Field  ;
                SourceExpr="Territory Code";
                Editable=FALSE }

    { 1100528647;2;Field  ;
                SourceExpr=Status;
                Editable=FALSE }

    { 1100528648;2;Field  ;
                SourceExpr=Priority;
                Editable=FALSE }

    { 1100528662;2;Field  ;
                SourceExpr="Order Kind";
                Editable=FALSE }

    { 1100528665;2;Field  ;
                SourceExpr="Order Type";
                Editable=FALSE }

    { 1100528743;2;Field  ;
                SourceExpr=Subcontractor;
                Editable=FALSE }

    { 1100528744;2;Field  ;
                SourceExpr="Subcontractor Name" }

    { 1100528745;2;Field  ;
                SourceExpr=Discipline;
                Editable=FALSE }

    { 1100528746;2;Field  ;
                SourceExpr="Trade Speciality";
                Editable=FALSE }

    { 1100528624;2;Field  ;
                CaptionML=[ENU=Standard Object No.;
                           NOR=Standardobjektnr;
                           SVE=Standardobjektsnr];
                SourceExpr=StandardObjectNo;
                Editable=FALSE;
                OnDrillDown=VAR
                              ServiceOrderInfoMgt@1100528600 : Codeunit 11012841;
                            BEGIN
                              ServiceOrderInfoMgt.ShowSOStandardObjects("No.");
                            END;
                             }

    { 1100528628;2;Field  ;
                CaptionML=[ENU=Standard Object Description;
                           NOR=Standard objektsbeskrivelse;
                           SVE=Standardobjektsbeskrivning];
                SourceExpr=StandardObjectDescription;
                Editable=FALSE }

    { 1100528633;2;Field  ;
                SourceExpr="Service Contract No.";
                Editable=FALSE }

    { 1100528634;2;Field  ;
                CaptionML=[ENU=Report Procedure;
                           NOR=Rapportprosedyre;
                           SVE=Rapportprocedur];
                SourceExpr=ServiceOrderInfoMgt.GetNoOfServiceTextLinesAsText("Service Location No.", TextType::"Report Procedure");
                OnDrillDown=BEGIN
                              ServiceOrderInfoMgt.ShowServiceTextLines("Service Location No.", TextType::"Report Procedure");
                            END;
                             }

    { 1100528635;2;Field  ;
                CaptionML=[ENU=Terms;
                           NOR=Vilk†r;
                           SVE=Villkor];
                SourceExpr=ServiceOrderInfoMgt.GetNoOfTermsAsText("Customer No.", "Service Contract No.");
                OnDrillDown=BEGIN
                              ServiceOrderInfoMgt.ShowTerms("Customer No.", "Service Contract No.");
                            END;
                             }

    { 1100528658;2;Field  ;
                SourceExpr="Order Manager" }

    { 1100528659;2;Field  ;
                SourceExpr="Order Manager Name" }

    { 1100528500;2;Field  ;
                SourceExpr="Next Deadline" }

    { 1100529600;2;Field  ;
                SourceExpr="Bill-to Customer No.";
                Visible=FALSE;
                Editable=FALSE }

    { 1100529601;2;Field  ;
                SourceExpr="Bill-to Name";
                Visible=FALSE }

    { 1100528848;1;Group  ;
                CaptionML=[ENU=Filters;
                           NOR=Filtre;
                           SVE=Filter];
                GroupType=Group }

    { 1100528637;2;Field  ;
                CaptionML=[ENU=Plan Method;
                           NOR=Planlegg Metode;
                           SVE=Planmetod];
                OptionCaptionML=[ENU=Employee,Service Order;
                                 SVE=Anst„lld,Serviceorder];
                SourceExpr=PlanMethod;
                OnValidate=BEGIN
                             IF PlanMethod = PlanMethod::"Service Order" THEN BEGIN
                               IF (PlanDateFrom = 0D) AND (PlanDateUntil <> 0D) THEN
                                 PlanDateFrom := PlanDateUntil;
                               IF (PlanDateUntil = 0D) AND (PlanDateFrom <> 0D) THEN
                                 PlanDateUntil := PlanDateFrom;
                               IF PlanDateUntil < PlanDateFrom THEN
                                 PlanDateUntil := PlanDateFrom;
                             END;
                           END;
                            }

    { 1100528644;2;Field  ;
                CaptionML=ENU=Plan Seq. No.;
                SourceExpr=PlanSeqNo;
                Editable=PlanMethod = PlanMethod::"Service Order" }

    { 1100528640;2;Field  ;
                CaptionML=[ENU=Plan Date From;
                           NOR=Plandato fra;
                           SVE=Plandatum fr†n];
                SourceExpr=PlanDateFrom;
                Editable=PlanMethod = PlanMethod::"Service Order";
                OnValidate=BEGIN
                             IF (PlanDateUntil = 0D) OR (PlanDateUntil < PlanDateFrom) THEN
                               PlanDateUntil := PlanDateFrom;
                           END;
                            }

    { 1100528643;2;Field  ;
                CaptionML=[ENU=Plan Date Until;
                           NOR=Plandato til;
                           SVE=Plandatum till];
                SourceExpr=PlanDateUntil;
                Editable=PlanMethod = PlanMethod::"Service Order" }

    { 1100528849;2;Field  ;
                CaptionML=ENU=Employee No./Team Leader;
                SourceExpr=ResourceNo;
                TableRelation="Resource (WOP)" WHERE (Type=CONST(Employee),
                                                      Schedule=FILTER(ServiceOrder|Both));
                Editable=ResourceNoEditable;
                OnValidate=BEGIN
                             ResourceNoOnValidate;
                           END;

                OnLookup=VAR
                           ResourceWOP@1100528600 : Record 11229278;
                           ServiceOrder@1100528602 : Record 11012823;
                           ResourceMgtWorkOrderPlan@1100528603 : Codeunit 11229277;
                         BEGIN
                           CASE PlanMethod OF
                             PlanMethod::Employee:
                               BEGIN
                                 ResourceWOP.SETRANGE(Type, ResourceWOP.Type::Employee);
                                 ResourceWOP.SETFILTER(Schedule, '%1|%2', ResourceWOP.Schedule::ServiceOrder, ResourceWOP.Schedule::Both);
                               END;
                             PlanMethod::"Service Order":
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(ServiceOrder);
                                 ResourceMgtWorkOrderPlan.GetResourceDSByServiceOrderDS(
                                   ServiceOrder, ResourceWOP, PlanDateFrom, PlanDateUntil, PlanSeqNo, DisciplineFilter, TradeSpecialityFilter, TerritoryFilter);
                               END;
                           END;

                           COMMIT;
                           IF PAGE.RUNMODAL(0, ResourceWOP) = ACTION::LookupOK THEN BEGIN
                             ResourceNo := ResourceWOP."No.";
                             ResourceNoOnValidate;
                             DetermineResourceNo;
                           END;
                         END;

                OnAssistEdit=VAR
                               ServiceOrder@1100528602 : Record 11012823;
                               CollectivePlanTeamPAGE@1100528601 : Page 11126470;
                             BEGIN
                               CurrPage.SETSELECTIONFILTER(ServiceOrder);
                               CollectivePlanTeamPAGE.SetPageData(
                                 TmpCollectivePlanTeam, ServiceOrder, PlanIndividually, PlanDateFrom, PlanDateUntil, PlanSeqNo,
                                 DisciplineFilter, TradeSpecialityFilter, TerritoryFilter);
                               CollectivePlanTeamPAGE.RUNMODAL();
                               CollectivePlanTeamPAGE.GetCollectivePlanTeam(TmpCollectivePlanTeam);
                               DetermineResourceNo;
                               DetermineFilters;
                               ApplyFilters;
                             END;
                              }

    { 1100525008;2;Field  ;
                CaptionML=ENU=Plan Individually;
                SourceExpr=PlanIndividually;
                OnValidate=BEGIN
                             DetermineResourceNo;
                           END;
                            }

    { 1100528850;2;Field  ;
                CaptionML=[ENU=Employee Name;
                           NOR=Navn p† ansatt;
                           SVE=Namn p† anst„lld];
                SourceExpr=EmployeeName;
                Editable=FALSE }

    { 1100528622;2;Field  ;
                CaptionML=ENU=No. of Team Members;
                BlankZero=Yes;
                SourceExpr=NoOfTeamMembers;
                Editable=FALSE }

    { 1100528636;2;Field  ;
                CaptionML=[ENU=Source Type Filter;
                           NOR=Kildetypefilter;
                           SVE=Ursprungstypsfilter];
                SourceExpr=SourceTypeFilter;
                OnValidate=VAR
                             ServiceOrder@1100528600 : Record 11012823;
                           BEGIN
                             ServiceOrder.SETFILTER("Source Type", SourceTypeFilter);
                             SourceTypeFilter := ServiceOrder.GETFILTER("Source Type");
                             ApplyFilters;
                           END;
                            }

    { 1100528660;2;Field  ;
                CaptionML=ENU=Order Manager Filter;
                SourceExpr=OrderManagerFilter;
                TableRelation=Salesperson/Purchaser;
                OnValidate=BEGIN
                             ApplyFilters;
                           END;
                            }

    { 1100528851;2;Field  ;
                CaptionML=[ENU=Discipline Filter;
                           NOR=Disiplinfilter;
                           SVE=Disciplinfilter];
                SourceExpr=DisciplineFilter;
                TableRelation=Discipline;
                OnValidate=VAR
                             Discipline@1100528600 : Record 11020204;
                           BEGIN
                             Discipline.SETFILTER(Code, DisciplineFilter);
                             DisciplineFilter := Discipline.GETFILTER(Code);
                             ApplyFilters;
                           END;
                            }

    { 1100525007;2;Field  ;
                CaptionML=[ENU=Trade Speciality Filter;
                           NOR=SNI-nummerfilter;
                           SVE=SNI-nummerfilter];
                SourceExpr=TradeSpecialityFilter;
                TableRelation="Trade Speciality".Code;
                OnValidate=VAR
                             TradeSpeciality@1100525000 : Record 11020285;
                           BEGIN
                             TradeSpeciality.SETFILTER(Code, TradeSpecialityFilter);
                             TradeSpecialityFilter := TradeSpeciality.GETFILTER(Code);
                             ApplyFilters;
                           END;
                            }

    { 1100528852;2;Field  ;
                CaptionML=[ENU=Territory Filter;
                           NOR=Distriktsfilter;
                           SVE=Distriktsfilter];
                SourceExpr=TerritoryFilter;
                TableRelation=Territory;
                OnValidate=VAR
                             Territory@1100528600 : Record 286;
                           BEGIN
                             Territory.SETFILTER(Code, TerritoryFilter);
                             TerritoryFilter := Territory.GETFILTER(Code);
                             ApplyFilters;
                           END;
                            }

    { 1100528853;2;Field  ;
                CaptionML=[ENU=Order Type Filter;
                           NOR=Ordretypefilter;
                           SVE=Ordertypfilter];
                SourceExpr=OrderKindFilter;
                TableRelation="Service Order Indication".Code WHERE (Indication=CONST(Kind));
                OnValidate=VAR
                             ServiceOrderIndication@1100528600 : Record 11012837;
                           BEGIN
                             ServiceOrderIndication.SETRANGE(Indication, ServiceOrderIndication.Indication::Kind);
                             ServiceOrderIndication.SETFILTER(Code, OrderKindFilter);
                             OrderKindFilter := ServiceOrderIndication.GETFILTER(Code);
                             ApplyFilters;
                           END;
                            }

    { 1100528623;2;Field  ;
                CaptionML=ENU=Standard Object Filter;
                SourceExpr=StandardObjectFilter;
                TableRelation="Standard Object";
                OnValidate=VAR
                             StandardObject@1100528600 : Record 11020334;
                           BEGIN
                             StandardObject.SETFILTER("No.", StandardObjectFilter);
                             StandardObjectFilter := StandardObject.GETFILTER("No.");
                             ApplyFilters;
                           END;
                            }

    { 1100528655;2;Field  ;
                CaptionML=ENU=Preferred Employee Filter;
                SourceExpr=PreferredEmployeeFilter;
                TableRelation="Resource (WOP)" WHERE (Type=CONST(Employee));
                OnValidate=VAR
                             ResourceWOP@1100528600 : Record 11229278;
                           BEGIN
                             ResourceWOP.SETFILTER("No.", PreferredEmployeeFilter);
                             PreferredEmployeeFilter := ResourceWOP.GETFILTER("No.");
                             ApplyFilters;
                           END;
                            }

    { 1100528663;2;Field  ;
                CaptionML=[ENU=Process Step;
                           NOR=Prosessteg;
                           SVE=Processteg];
                SourceExpr=ProcessStepCode;
                TableRelation="Service Process Step";
                OnValidate=BEGIN
                             ApplyFilters;
                           END;
                            }

    { 1100528661;2;Field  ;
                CaptionML=ENU=Process Step Filter;
                OptionCaptionML=ENU=" ,Not Passed,Passed";
                SourceExpr=ProcessStepFilter;
                OnValidate=BEGIN
                             ApplyFilters;
                           END;
                            }

  }
  CODE
  {
    VAR
      TmpCollectivePlanTeam@1100528606 : TEMPORARY Record 11071979;
      ServiceOrderInfoMgt@1100528612 : Codeunit 11012841;
      ResourceNo@1100528600 : Code[20];
      StandardObjectNo@1100528605 : Code[20];
      StandardObjectDescription@1100528611 : Text[100];
      EmployeeName@1100528601 : Text[100];
      SourceTypeFilter@1100528616 : Text;
      DisciplineFilter@1100528602 : Text;
      TradeSpecialityFilter@1100525001 : Text;
      TerritoryFilter@1100528603 : Text;
      OrderKindFilter@1100528604 : Text;
      Text001@1100528607 : TextConst 'ENU=A team is defined. You need to alter the team.';
      Text002@1100528608 : TextConst 'ENU=No Team Leader given';
      StandardObjectFilter@1100528610 : Text;
      PreferredEmployeeFilter@1100528621 : Text;
      OrderManagerFilter@1100528623 : Text;
      NoOfTeamMembers@1100528609 : Integer;
      Text003@1100525000 : TextConst 'ENU=First select lines.;NOR=Velg rader f›rst.;SVE=V„lj f”rst rader.';
      PlanIndividually@1100525002 : Boolean;
      Text004@1100525003 : TextConst 'ENU=%1 of %2 Service Orders Unplanned';
      TextType@1100528613 : 'Problem,Internal,Resolve,Cause,Invoice,Report Procedure,Contract Terms,Invoice Agreements';
      PlanMethod@1100528615 : 'Employee,Service Order';
      ResourceNoEditable@1100528617 : Boolean INDATASET;
      PlanDateFrom@1100528618 : Date;
      PlanDateUntil@1100528619 : Date;
      PlanSeqNo@1100528620 : ',1,2';
      Text006@1100528622 : TextConst 'ENU=Preferred Employee Filter is empty';
      Text007@1100528614 : TextConst 'ENU=Service Order(s) %1 created;SVE=Serviceorder(s) %1 skapad(e)';
      ProcessStepCode@1100528624 : Code[10];
      ProcessStepFilter@1100528625 : ' ,Not Passed,Passed';
      ReferencePointPrepare@1100528500 : Integer;
      ReferencePointPlan@1100528501 : Integer;
      ReferencePointReview@1100528502 : Integer;
      ReferencePointInvoice@1100528503 : Integer;

    PROCEDURE ApplyFilters@1100528600();
    VAR
      ServiceOrder@1100528600 : Record 11012823;
      StandardObject@1100528602 : Record 11020334;
      ServiceOrderInfoMgt@1100528601 : Codeunit 11012841;
      DoMark@1100528603 : Boolean;
    BEGIN
      ServiceOrder.COPY(Rec);
      ServiceOrder.CLEARMARKS;
      ServiceOrder.MARKEDONLY(FALSE);
      ServiceOrder.SETFILTER(Discipline, DisciplineFilter);
      ServiceOrder.SETFILTER("Trade Speciality", TradeSpecialityFilter);
      ServiceOrder.SETFILTER("Territory Code", TerritoryFilter);
      ServiceOrder.SETFILTER("Order Kind", OrderKindFilter);
      ServiceOrder.SETFILTER("Source Type", SourceTypeFilter);
      ServiceOrder.SETFILTER("Preferred Employee No.", PreferredEmployeeFilter);
      ServiceOrder.SETFILTER("Order Manager", OrderManagerFilter);
      IF (StandardObjectFilter <> '') OR ((ProcessStepCode <> '') AND (ProcessStepFilter <> ProcessStepFilter::" ")) THEN BEGIN
        IF ServiceOrder.FINDSET THEN
          REPEAT
            IF StandardObjectFilter <> '' THEN BEGIN
              ServiceOrderInfoMgt.GetSOStandardObjectDS(ServiceOrder."No.", StandardObject);
              StandardObject.FILTERGROUP(7);
              StandardObject.SETFILTER("No.", StandardObjectFilter);
              StandardObject.FILTERGROUP(0);
              DoMark := NOT StandardObject.ISEMPTY AND IsServiceOrderWithinProcessFilter(ServiceOrder);
            END ELSE
              DoMark := IsServiceOrderWithinProcessFilter(ServiceOrder);
            ServiceOrder.MARK(DoMark);
          UNTIL ServiceOrder.NEXT = 0;
        ServiceOrder.MARKEDONLY(TRUE);
      END;
      COPY(ServiceOrder);
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE IsServiceOrderWithinProcessFilter@1100528608(IServiceOrder@1100528600 : Record 11012823) : Boolean;
    VAR
      ServiceProcessStructStep@1100528602 : Record 11072304;
      ServiceProcessManagement@1100528601 : Codeunit 11012883;
      ProcessStepFinished@1100528603 : Boolean;
      DummyInt@1100528604 : Integer;
    BEGIN
      IF (ProcessStepCode = '') OR (ProcessStepFilter = ProcessStepFilter::" ") THEN
        EXIT(TRUE);
      IF IServiceOrder."Process Structure Code" = '' THEN
        EXIT(FALSE);
      ServiceProcessStructStep.SETRANGE(Type, ServiceProcessStructStep.Type::"Service Order");
      ServiceProcessStructStep.SETRANGE("Process Structure Code", IServiceOrder."Process Structure Code");
      ServiceProcessStructStep.SETRANGE("Step Code", ProcessStepCode);
      IF ServiceProcessStructStep.ISEMPTY THEN
        EXIT(FALSE);
      ProcessStepFinished :=
        ServiceProcessManagement.IsProcessStepFinished(
          ServiceProcessStructStep.Type::"Service Order", IServiceOrder."No.", ProcessStepCode, DummyInt, DummyInt);
      IF ProcessStepFinished AND (ProcessStepFilter = ProcessStepFilter::Passed) OR
          NOT ProcessStepFinished AND (ProcessStepFilter = ProcessStepFilter::"Not Passed")
      THEN
        EXIT(TRUE);
    END;

    PROCEDURE DetermineFilters@1100528601();
    VAR
      Resource@1100528601 : Record 11229278;
      ResourceMgtWorkOrderPlan@1100528602 : Codeunit 11229277;
    BEGIN
      IF PlanMethod <> PlanMethod::Employee THEN
        EXIT;
      IF NOT Resource.GET(ResourceNo) THEN
        Resource.INIT;
      DisciplineFilter := ResourceMgtWorkOrderPlan.GetResourceDisciplineFilter(ResourceNo);
      TradeSpecialityFilter := ResourceMgtWorkOrderPlan.GetResourceTradeSpecialityFilter(ResourceNo, TODAY, PlanSeqNo);
      IF TradeSpecialityFilter <> '' THEN
        TradeSpecialityFilter := '''''|' + TradeSpecialityFilter;
      TerritoryFilter := Resource."Territory Code";
    END;

    PROCEDURE ReplaceCollectivePlanTeam@1100528603(IResourceNo@1100528600 : Code[20]);
    BEGIN
      IF TmpCollectivePlanTeam.COUNT > 1 THEN
        ERROR(Text001);
      TmpCollectivePlanTeam.DELETEALL;
      IF IResourceNo <> '' THEN BEGIN
        TmpCollectivePlanTeam."Resource No." := IResourceNo;
        TmpCollectivePlanTeam."Team Leader" := NOT PlanIndividually;
        TmpCollectivePlanTeam.INSERT;
      END;
    END;

    PROCEDURE GetResourceNoTeamLeader@1100528604() : Code[20];
    VAR
      TmpCollectivePlanTeam2@1100528600 : TEMPORARY Record 11071979;
    BEGIN
      TmpCollectivePlanTeam2.COPY(TmpCollectivePlanTeam, TRUE);
      TmpCollectivePlanTeam2.SETRANGE("Team Leader", TRUE);
      IF TmpCollectivePlanTeam2.FINDFIRST THEN
        EXIT(TmpCollectivePlanTeam2."Resource No.");
    END;

    PROCEDURE DetermineNoOfTeamMembers@1100528605();
    BEGIN
      IF NOT PlanIndividually THEN
        NoOfTeamMembers := TmpCollectivePlanTeam.COUNT
      ELSE
        NoOfTeamMembers := 0;
    END;

    LOCAL PROCEDURE ResourceNoOnValidate@1100528602();
    VAR
      Resource@1100528600 : Record 11229278;
    BEGIN
      EmployeeName := '';
      IF ResourceNo <> '' THEN BEGIN
        Resource.SETRANGE("No.", ResourceNo);
        Resource.SETFILTER(Schedule, '%1|%2', Resource.Schedule::ServiceOrder, Resource.Schedule::Both);
        Resource.FINDFIRST;
        Resource.TestResourceWithinCompanyPlanGroup;
        EmployeeName := Resource.Name;
      END;
      ReplaceCollectivePlanTeam(ResourceNo);
      DetermineNoOfTeamMembers;
      DetermineFilters;
      IF NOT ResourceNoEditable THEN
        ApplyFilters;
    END;

    PROCEDURE DetermineResourceNo@1100528606() : Code[20];
    VAR
      Resource@1100528600 : Record 11229278;
    BEGIN
      ResourceNoEditable := TRUE;
      IF NOT PlanIndividually THEN
        ResourceNo := GetResourceNoTeamLeader
      ELSE BEGIN
        CASE TmpCollectivePlanTeam.COUNT OF
          0:
            ResourceNo := '';
          1:
            BEGIN
              TmpCollectivePlanTeam.FINDFIRST;
              ResourceNo := TmpCollectivePlanTeam."Resource No.";
            END;
        ELSE
          ResourceNo := STRSUBSTNO('[%1]', TmpCollectivePlanTeam.COUNT);
          ResourceNoEditable := FALSE;
        END;
        EmployeeName := '';
      END;
      IF Resource.GET(ResourceNo) THEN
        EmployeeName := Resource.Name
      ELSE
        EmployeeName := '';
      DetermineNoOfTeamMembers;
    END;

    LOCAL PROCEDURE ConvertPreferredEmployeeFilterToTeam@1100528607();
    VAR
      ResourceWOP@1100528600 : Record 11229278;
      FirstRecord@1100528601 : Boolean;
    BEGIN
      IF PreferredEmployeeFilter = '' THEN
        ERROR(Text006);
      ResourceWOP.SETFILTER("No.", PreferredEmployeeFilter);
      IF ResourceWOP.FINDSET THEN BEGIN
        TmpCollectivePlanTeam.DELETEALL;
        FirstRecord := TRUE;
        REPEAT
          TmpCollectivePlanTeam."Resource No." := ResourceWOP."No.";
          TmpCollectivePlanTeam."Team Leader" := FirstRecord;
          TmpCollectivePlanTeam.INSERT;
          FirstRecord := FALSE;
        UNTIL ResourceWOP.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE OpenCardPage@1100528526(Editable@1100525003 : Boolean);
    VAR
      ServiceOrderPlan@1100528502 : Page 11125224;
      ServiceOrderPreparation@1100525000 : Page 11126751;
      ServiceOrderReview@1100525001 : Page 11125225;
      ServiceOrderInvoicing@1100525002 : Page 11125226;
    BEGIN
      CASE "Actual Reference Point (Gantt)" OF
        ReferencePointPlan:
          BEGIN
            ServiceOrderPlan.SETRECORD(Rec);
            ServiceOrderPlan.SETTABLEVIEW(Rec);
            ServiceOrderPlan.EDITABLE(Editable);
            ServiceOrderPlan.RUN;
          END;
        ReferencePointPrepare:
          BEGIN
            ServiceOrderPreparation.SETRECORD(Rec);
            ServiceOrderPreparation.SETTABLEVIEW(Rec);
            ServiceOrderPreparation.EDITABLE(Editable);
            ServiceOrderPreparation.RUN;
          END;
        ReferencePointReview:
          BEGIN
            ServiceOrderReview.SETRECORD(Rec);
            ServiceOrderReview.SETTABLEVIEW(Rec);
            ServiceOrderReview.EDITABLE(Editable);
            ServiceOrderReview.RUN;
          END;
        ReferencePointInvoice:
          BEGIN
            ServiceOrderInvoicing.SETRECORD(Rec);
            ServiceOrderInvoicing.SETTABLEVIEW(Rec);
            ServiceOrderInvoicing.EDITABLE(Editable);
            ServiceOrderInvoicing.RUN;
          END;
        ELSE
          PAGE.RUN(11125209, Rec);
      END;
    END;

    BEGIN
    END.
  }
}

