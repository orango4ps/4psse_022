OBJECT Codeunit 99000792 Create Prod. Order from Sale
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Fertigungsauftrag %2 mit dem Status %1 wurde erstellt.;ENU=%1 Prod. Order %2 has been created.;NLD=%1 prod.-order %2 is gemaakt.;NOR=%1 prod.ordre %2 er opprettet.;SVE=%1 prod.order %2 har skapats.';
      UOMMgt@1002 : Codeunit 5402;
      HideValidationDialog@1001 : Boolean;

    [External]
    PROCEDURE CreateProdOrder@1(SalesLine@1000 : Record 37;ProdOrderStatus@1001 : 'Simulated,Planned,Firm Planned,Released,Finished';OrderType@1002 : 'ItemOrder,ProjectOrder');
    VAR
      ProdOrder@1004 : Record 5405;
      ProdOrderLine@1005 : Record 5406;
      SalesLineReserve@1007 : Codeunit 99000832;
      CreateProdOrderLines@1008 : Codeunit 99000787;
      ProdOrderStatusMgt@1009 : Codeunit 5407;
      LeadTimeMgt@1011 : Codeunit 5404;
      ItemTrackingMgt@1012 : Codeunit 6500;
      ReservQty@1013 : Decimal;
      ReservQtyBase@1010 : Decimal;
      ProdOrderRowID@1006 : Text[250];
      IsHandled@1003 : Boolean;
    BEGIN
      ProdOrder.INIT;
      ProdOrder.Status := ProdOrderStatus;
      ProdOrder."No." := '';
      ProdOrder.INSERT(TRUE);
      OnCreateProdOrderOnAfterProdOrderInsert(ProdOrder);

      ProdOrder."Starting Date" := WORKDATE;
      ProdOrder."Creation Date" := WORKDATE;
      ProdOrder."Low-Level Code" := 0;
      IF OrderType = OrderType::ProjectOrder THEN BEGIN
        ProdOrder."Source Type" := ProdOrder."Source Type"::"Sales Header";
        ProdOrder.VALIDATE("Source No.",SalesLine."Document No.");
        ProdOrder."Due Date" := SalesLine."Shipment Date";
        ProdOrder."Ending Date" :=
          LeadTimeMgt.PlannedEndingDate(SalesLine."No.",SalesLine."Location Code",'',ProdOrder."Due Date",'',2);
      END ELSE BEGIN
        ProdOrder."Due Date" := SalesLine."Shipment Date";
        ProdOrder."Source Type" := ProdOrder."Source Type"::Item;
        ProdOrder."Location Code" := SalesLine."Location Code";
        ProdOrder."Bin Code" := SalesLine."Bin Code";
        ProdOrder.VALIDATE("Source No.",SalesLine."No.");
        ProdOrder.VALIDATE(Description,SalesLine.Description);
        SalesLine.CALCFIELDS("Reserved Qty. (Base)");
        ProdOrder.Quantity := SalesLine."Outstanding Qty. (Base)" - SalesLine."Reserved Qty. (Base)";
      END;
      OnAfterCreateProdOrderFromSalesLine(ProdOrder,SalesLine);
      ProdOrder.MODIFY;
      ProdOrder.SETRANGE("No.",ProdOrder."No.");

      IsHandled := FALSE;
      OnBeforeCreateProdOrderLines(ProdOrder,SalesLine,IsHandled);
      IF NOT IsHandled THEN BEGIN
        CreateProdOrderLines.SetSalesLine(SalesLine);
        CreateProdOrderLines.Copy(ProdOrder,1,SalesLine."Variant Code",TRUE);
      END;

      IF ProdOrder."Source Type" = ProdOrder."Source Type"::Item THEN BEGIN
        ProdOrderLine.SETRANGE(Status,ProdOrder.Status);
        ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrder."No.");

        IF ProdOrderLine.FINDFIRST THEN BEGIN
          ProdOrderRowID :=
            ItemTrackingMgt.ComposeRowID(
              DATABASE::"Prod. Order Line",ProdOrderLine.Status,
              ProdOrderLine."Prod. Order No.",'',ProdOrderLine."Line No.",0);
          ItemTrackingMgt.CopyItemTracking2(SalesLine.RowID1,ProdOrderRowID,TRUE,TRUE);

          SalesLine.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
          IF ProdOrderLine."Remaining Qty. (Base)" > (SalesLine."Outstanding Qty. (Base)" - SalesLine."Reserved Qty. (Base)")
          THEN BEGIN
            ReservQty := (SalesLine."Outstanding Quantity" - SalesLine."Reserved Quantity");
            ReservQtyBase := (SalesLine."Outstanding Qty. (Base)" - SalesLine."Reserved Qty. (Base)");
          END ELSE BEGIN
            ReservQty := ROUND(ProdOrderLine."Remaining Qty. (Base)" / SalesLine."Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
            ReservQtyBase := ProdOrderLine."Remaining Qty. (Base)";
          END;
          SalesLineReserve.BindToProdOrder(SalesLine,ProdOrderLine,ReservQty,ReservQtyBase);
          IF SalesLine.Reserve = SalesLine.Reserve::Never THEN BEGIN
            SalesLine.Reserve := SalesLine.Reserve::Optional;
            SalesLine.MODIFY;
          END;
          ProdOrderLine.MODIFY;
          IF OrderType = OrderType::ItemOrder THEN
            CreateProdOrderLines.CopyDimFromSalesLine(SalesLine,ProdOrderLine);
        END;
      END;

      IF ProdOrder.Status = ProdOrder.Status::Released THEN
        ProdOrderStatusMgt.FlushProdOrder(ProdOrder,ProdOrder.Status,WORKDATE);

      OnAfterCreateProdOrder(ProdOrder,SalesLine);

      IF NOT HideValidationDialog THEN
        MESSAGE(
          Text000,
          ProdOrder.Status,ProdOrder."No.");
    END;

    [External]
    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateProdOrder@15(VAR ProdOrder@1000 : Record 5405;VAR SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateProdOrderFromSalesLine@16(VAR ProdOrder@1000 : Record 5405;VAR SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCreateProdOrderLines@2(VAR ProdOrder@1001 : Record 5405;VAR SalesLine@1000 : Record 37;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCreateProdOrderOnAfterProdOrderInsert@3(VAR ProductionOrder@1000 : Record 5405);
    BEGIN
    END;

    BEGIN
    END.
  }
}

