OBJECT Report 11012655 Import IC Inventory Lines
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=IC Inventurzeilen importieren;
               ENU=Import IC Inventory Lines;
               NLD=IC Voorraadregels importeren;
               NOR=Importer IC Lagersaldorader;
               SVE=Importera IC Lagersaldo rader];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   IF (LineType = 0) THEN
                     LineType := LineType::Delivery;

                   LineTypeEditable := TRUE;
                 END;

    UsageCategory=Tasks;
  }
  DATASET
  {
    { 4444;    ;DataItem;                    ;
               DataItemTable=Table2000000006;
               DataItemTableView=SORTING(Name);
               OnPreDataItem=VAR
                               ProjectSetup@1100525000 : Record 315;
                             BEGIN
                               IF (LineType = 0) THEN
                                 LineType := 2;

                               IF (CompanyNameFilter <> '') THEN BEGIN
                                 IF (CompanyNameFilter = COMPANYNAME) THEN BEGIN
                                   Name := COMPANYNAME;
                                   FIELDERROR(Name);
                                 END;
                                 SETRANGE(Name, CompanyNameFilter);
                               END;

                               LinesProcessed := 0;
                               ProjectSetup.GET;
                               IF (DefaultTemplate = '') AND (DefaultBatch = '') THEN BEGIN
                                 DefaultTemplate := ProjectSetup."Inventory Journal Template";
                                 DefaultBatch := ProjectSetup."Inventory Journal Batch";
                               END;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF (Company.Name = COMPANYNAME) THEN
                                    CurrReport.SKIP;

                                  ProcessICIventoryLines;
                                END;

               OnPostDataItem=BEGIN
                                MESSAGE(Text001, LinesProcessed, LineType);
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  Name=LineTypeFrm;
                  CaptionML=[DEU=Zeilenart;
                             ENU=Line Type;
                             NLD=Regelsoort;
                             NOR=Radtype;
                             SVE=Radtyp];
                  OptionCaptionML=[DEU=,Auftrag,Lieferung,Umlagerung;
                                   ENU=,Order,Delivery,Transfer;
                                   NLD=,Order,Levering,Overboeking;
                                   NOR=,Ordre,Leveranse,Overf›ring;
                                   SVE=,Order,Leverans,™verf”ring];
                  SourceExpr=LineType;
                  Editable=LineTypeEditable }

      { 1100525003;2;Field  ;
                  CaptionML=[DEU=Unternehmensnamenfilter;
                             ENU=Company Name Filter;
                             NLD=Bedrijfsnaam filter;
                             NOR=Filter for selskapsnavn;
                             SVE=F”retagsnamnfilter];
                  SourceExpr=CompanyNameFilter;
                  TableRelation=Company }

      { 1100525004;1;Field  ;
                  CaptionML=[DEU=Lagerortfilter;
                             ENU=Location Filter;
                             NLD=Vestiging filter;
                             NOR=Lokasjonsfilter;
                             SVE=Lagerst„llefilter];
                  SourceExpr=LocationFilter;
                  TableRelation=Location }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      LineType@1100528300 : ',Order,Delivery,Transfer';
      Text001@1100528301 : TextConst 'DEU=%1 %2 Zeile(n) verarbeitet;ENU=%1 %2 Line(s) processed.;NLD=%1 %2regel(s) verwerkt.;NOR=%1 %2 rad(er) behandlet.;SVE=%1 %2 rad(er) behandlade.';
      LinesProcessed@1100528304 : Integer;
      CompanyNameFilter@1100528308 : Text[30];
      DefaultLocationCode@1100528305 : Code[20];
      LocationFilter@1100528306 : Code[30];
      DefaultTemplate@1100525001 : Code[20];
      DefaultBatch@1100525000 : Code[20];
      LineTypeEditable@1100527300 : Boolean INDATASET;

    PROCEDURE SetLineType@1100528303(Type@1100528300 : ',Order,Delivery,Transfer');
    BEGIN
      LineType := Type;
    END;

    LOCAL PROCEDURE ProcessICIventoryLines@1100528306();
    VAR
      ICInventoryLine@1100528300 : Record 11020692;
      ItemJournalLine@1100528302 : Record 83;
      ItemJnlPostBatch@1100528303 : Codeunit 23;
    BEGIN
      DefaultLocationCode := GetDefaultLocation;

      ICInventoryLine.SETRANGE(Type, LineType);
      ICInventoryLine.SETRANGE("Supplying Company", Company.Name);
      ICInventoryLine.SETRANGE("Receiving Company", COMPANYNAME);
      ICInventoryLine.SETRANGE(Processed, FALSE);
      //C005016
      IF (LocationFilter <> '') THEN
        ICInventoryLine.SETFILTER("Location Code", LocationFilter);
      //C005016

      IF (NOT ICInventoryLine.FINDSET(TRUE)) THEN
        EXIT;

      REPEAT
        ItemJournalLine.INIT;
        FillFieldsItemJournalLine(ICInventoryLine, ItemJournalLine);
        ItemJournalLine.MODIFY(TRUE);

        IF ICInventoryLine.Type = ICInventoryLine.Type::Delivery THEN BEGIN
          ItemJournalLine.SETRANGE("Journal Template Name", ItemJournalLine."Journal Template Name");
          ItemJournalLine.SETRANGE("Journal Batch Name", ItemJournalLine."Journal Batch Name");
          ItemJournalLine.SETRANGE("Line No.", ItemJournalLine."Line No.");
          ItemJnlPostBatch.SetICCompanies(ICInventoryLine."Supplying Company", ICInventoryLine."Receiving Company");
          ItemJnlPostBatch.RUN(ItemJournalLine);
        END;

        ICInventoryLine.Processed := TRUE;
        ICInventoryLine.MODIFY(TRUE);

        LinesProcessed += 1;
      UNTIL (ICInventoryLine.NEXT = 0);
    END;

    LOCAL PROCEDURE FillFieldsItemJournalLine@1100528304(ICInventoryLine@1100528304 : Record 11020692;VAR ItemJournalLine@1100528302 : Record 83);
    VAR
      ItemJournalTemplate@1100528300 : Record 82;
      ItemJournalBatch@1100528301 : Record 233;
      IntercompanyRelation@1100409000 : Record 11012057;
      NoSeriesMgt@1100528303 : Codeunit 396;
      InventorySetup@1100527300 : Record 313;
    BEGIN
      ItemJournalTemplate.GET(DefaultTemplate);
      ItemJournalBatch.GET(DefaultTemplate, DefaultBatch);

      ItemJournalLine."Line No." := GetLastLineNo + 1;
      ItemJournalLine."Journal Template Name" := DefaultTemplate;
      ItemJournalLine."Journal Batch Name" := DefaultBatch;
      IF (ICInventoryLine.Type = ICInventoryLine.Type::Order) THEN BEGIN
        ItemJournalLine."Supplying Company" := '';
        ItemJournalLine.VALIDATE("Receiving Company", Company.Name);
      END;
      IF (ICInventoryLine.Type = ICInventoryLine.Type::Transfer) THEN BEGIN
        ItemJournalLine.VALIDATE("Supplying Company", Company.Name);
        ItemJournalLine."Receiving Company" := '';
      END;
      ItemJournalLine."Delivery Date" := ICInventoryLine."Delivery Date";
      ItemJournalLine."Posting Date" := ICInventoryLine."Posting Date";
      ItemJournalLine."Document Date" := ICInventoryLine."Document Date";
      ItemJournalLine.INSERT(TRUE);

      IF (ItemJournalBatch."No. Series" <> '') THEN
        ItemJournalLine."Document No." := NoSeriesMgt.GetNextNo(ItemJournalBatch."No. Series",
          ItemJournalLine."Posting Date",
          FALSE);
      IF (ICInventoryLine."Project No." <> '') THEN
        ItemJournalLine.VALIDATE("Job No.", ICInventoryLine."Project No.");
      IF (ICInventoryLine."Service Order No." <> '') THEN
        ItemJournalLine.VALIDATE("Service Order No.", ICInventoryLine."Service Order No.");

      IF ICInventoryLine.Type = ICInventoryLine.Type::Order THEN
        ItemJournalLine.VALIDATE("Entry Type", ItemJournalLine."Entry Type"::Sale)
      ELSE
        //Reverse Purchase and Sale
        IF ICInventoryLine."Entry Type" = ICInventoryLine."Entry Type"::Purchase THEN
          ItemJournalLine.VALIDATE("Entry Type", ItemJournalLine."Entry Type"::Sale)
        ELSE
          ItemJournalLine.VALIDATE("Entry Type", ItemJournalLine."Entry Type"::Purchase);

      ItemJournalLine.VALIDATE("Item No.", ICInventoryLine."Item No.");
      ItemJournalLine.VALIDATE(Quantity, ICInventoryLine.Quantity);
      ItemJournalLine.VALIDATE("Unit of Measure Code", ICInventoryLine."Unit of Measure");
      ItemJournalLine."IC Inventory Line Type" := ICInventoryLine.Type;
      ItemJournalLine."Delivery Time" := ICInventoryLine."Delivery Time";

      //kzwerver, 121017, sn, #C003578
      ItemJournalLine."Source Code" := ItemJournalTemplate."Source Code";
      IF (ICInventoryLine.Type = ICInventoryLine.Type::Delivery) THEN BEGIN
        IF (IntercompanyRelation.GET(ICInventoryLine."Supplying Company", ICInventoryLine."Receiving Company")) THEN
          ItemJournalLine."Source Code" := IntercompanyRelation."Source Code";
      END;
      ItemJournalLine.Type := ItemJournalLine.Type::"Work Center";
      ItemJournalLine."Origin Type Line" := ItemJournalLine."Origin Type Line"::ItemJnlManual;
      //kzwerver, 121017, en, #C003578

      //C006285.so
      //IF (ICInventoryLine.Type = ICInventoryLine.Type::Delivery) THEN BEGIN
      //  ItemJournalLine.VALIDATE("Unit Amount", ICInventoryLine."Unit Amount");
      //  ItemJournalLine.VALIDATE("Unit Cost", ICInventoryLine."Unit Cost");
      //  IF (ItemJournalLine."Location Code" = '') THEN
      //    ItemJournalLine.VALIDATE("Location Code", DefaultLocationCode);
      //END ELSE
      //  ItemJournalLine."Location Code" := ICInventoryLine."Location Code"; //call C005016
      //C006285.eo

      //C006285.sn
      IF ICInventoryLine.Type IN [ICInventoryLine.Type::Delivery, ICInventoryLine.Type::Transfer] THEN BEGIN
        ItemJournalLine.VALIDATE("Unit Cost", ICInventoryLine."Unit Cost");
        ItemJournalLine.VALIDATE("Unit Amount", ICInventoryLine."Unit Cost"); //Both Cost
      END;

      IF ICInventoryLine.Type = ICInventoryLine.Type::Delivery THEN BEGIN
        IF (ItemJournalLine."Location Code" = '') THEN
          ItemJournalLine.VALIDATE("Location Code", DefaultLocationCode);
      END ELSE
        ItemJournalLine."Location Code" := ICInventoryLine."Location Code";
      //C006285.en

      ItemJournalLine.Element := ICInventoryLine.Element; //C018402
      ItemJournalLine."Entity No." := ICInventoryLine."Entity No.";
      ItemJournalLine.Deliver := ICInventoryLine.Deliver;  //C052785
      ItemJournalLine."Ship To Location" := ICInventoryLine."Ship To Location";
      ItemJournalLine."Comments for Logistics" := ICInventoryLine."Comments for Logistics";

      IF ItemJournalLine."Receiving Company" <> '' THEN BEGIN
        ItemJournalLine.CheckCompanyIC;
        ItemJournalLine.SetProjectStock;
      END;

      InventorySetup.GET;
      ItemJournalLine.Blocked := InventorySetup."Default Blocked";
    END;

    LOCAL PROCEDURE GetLastLineNo@1100525000() LastLineNo : Integer;
    VAR
      ItemJournalLine@1100525003 : Record 83;
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name", DefaultTemplate);
      ItemJournalLine.SETRANGE("Journal Batch Name", DefaultBatch);
      IF ItemJournalLine.FINDLAST THEN
        LastLineNo := ItemJournalLine."Line No."
      ELSE
        LastLineNo := 0;
    END;

    PROCEDURE GetDefaultLocation@1100528300() : Code[20];
    VAR
      Location@1100528300 : Record 14;
    BEGIN
      Location.SETRANGE("Bin Mandatory", FALSE);
      IF (NOT Location.FINDFIRST) THEN
        Location.INIT;
      EXIT(Location.Code);
    END;

    PROCEDURE SetTemplateAndBatch@1100526200(TemplateCode@1100526202 : Code[20];BatchCode@1100526200 : Code[20]);
    BEGIN
      DefaultTemplate := TemplateCode;
      DefaultBatch := BatchCode;
    END;

    PROCEDURE SetLineTypeEditable@1100527301(Editable@1100527300 : Boolean);
    BEGIN
      LineTypeEditable := Editable;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

