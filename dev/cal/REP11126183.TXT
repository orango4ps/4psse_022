OBJECT Report 11126183 Suggest Bank Payments
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVFI10.00 (32000003);
  }
  PROPERTIES
  {
    CaptionML=ENU=Suggest Bank Payments;
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 3182;    ;DataItem;                    ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF LastDueDateToPayReq = 0D THEN
                                 ERROR(Text1090000);

                               IF UsePaymentDisc AND (LastDueDateToPayReq < WORKDATE) THEN
                                 IF NOT
                                    CONFIRM(
                                      Text1090001 +
                                      Text1090002,FALSE,
                                      WORKDATE)
                                 THEN
                                   ERROR(Text1090003);

                               Vend2.COPYFILTERS(Vendor);

                               OriginalAmtAvailable := AmountAvailable;
                               IF AmountAvailable > 0 THEN BEGIN
                                 SETCURRENTKEY(Priority);
                                 SETFILTER(Priority,'>0');
                                 UsePriority := TRUE;
                               END;
                               Window.OPEN(Text1090004);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF StopPayments THEN
                                    CurrReport.BREAK;
                                  Window.UPDATE(1,"No.");
                                  GetVendLedgEntries(TRUE,FALSE);
                                  GetVendLedgEntries(FALSE,FALSE);
                                  CheckAmounts(FALSE);
                                END;

               OnPostDataItem=BEGIN
                                IF UsePriority AND NOT StopPayments THEN BEGIN
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  SETCURRENTKEY(Priority);
                                  SETRANGE(Priority,0);
                                  IF FINDSET THEN
                                    REPEAT
                                      Window.UPDATE(1,"No.");
                                      GetVendLedgEntries(TRUE,FALSE);
                                      GetVendLedgEntries(FALSE,FALSE);
                                      CheckAmounts(FALSE);
                                    UNTIL (NEXT = 0) OR StopPayments;
                                END;
                                Window.CLOSE;

                                IF UsePaymentDisc AND NOT StopPayments THEN BEGIN
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  IF FINDSET THEN BEGIN
                                    Window.OPEN(Text1090005);
                                    REPEAT
                                      Window.UPDATE(1,"No.");
                                      PayableVendLedgEntry.SETRANGE("Vendor No.","No.");
                                      GetVendLedgEntries(TRUE,TRUE);
                                      GetVendLedgEntries(FALSE,TRUE);
                                      CheckAmounts(TRUE);
                                    UNTIL (NEXT = 0) OR StopPayments;
                                    Window.CLOSE;
                                  END;
                                END;

                                RefPmtLines.LOCKTABLE;

                                Window.OPEN(Text1090006);

                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETFILTER(Priority,'>0');
                                MakeRefPmtLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETRANGE(Priority,0);
                                MakeRefPmtLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.DELETEALL;

                                Window.CLOSE;
                              END;

               ReqFilterFields=No.,Payment Method Code }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1090006;0;Container ;
                  ContainerType=ContentArea }

      { 1090005;1;Group     ;
                  CaptionML=[ENU=Options;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Last Payment Date;
                             NOR=Siste betalingsdato;
                             SVE=Senaste betalningsdatum];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=LastDueDateToPayReq }

      { 2   ;2   ;Field     ;
                  Name=Find Payment Discounts;
                  CaptionML=[ENU=Find Payment Discounts;
                             NOR=Sõk etter kontantrabatter;
                             SVE=Utnyttja kassarabatter];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=UsePaymentDisc;
                  MultiLine=Yes }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Use Vendor Priority;
                             NOR=Bruk leverandõrprioritet;
                             SVE=AnvÑnd leverantîrsprioritet];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=UsePriority;
                  OnValidate=BEGIN
                               IF NOT UsePriority AND (AmountAvailable <> 0) THEN
                                 ERROR(Text1090008);
                             END;
                              }

      { 4   ;2   ;Field     ;
                  CaptionML=[ENU=Available Amount (LCY);
                             NOR=Disponibelt belõp (NOK);
                             SVE=Disponibelt belopp (BVA)];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=AmountAvailable;
                  OnValidate=BEGIN
                               AmountAvailableOnAfterValidate;
                             END;
                              }

      { 5   ;2   ;Field     ;
                  Name=Payment Account;
                  CaptionML=ENU=Payment Account;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=SelectedAccount;
                  TableRelation="Bank Account".No. WHERE (Country/Region Code=FILTER(''|FI)) }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      RefPmtLines@1090001 : Record 11126182;
      Vend2@1090005 : Record 23;
      VendLedgEntry@1090006 : Record 25;
      PayableVendLedgEntry@1090007 : TEMPORARY Record 317;
      PurchRefLines@1090029 : Record 11126182;
      Window@1090010 : Dialog;
      UsePaymentDisc@1090011 : Boolean;
      LastDueDateToPayReq@1090012 : Date;
      AmountAvailable@1090014 : Decimal;
      OriginalAmtAvailable@1090015 : Decimal;
      UsePriority@1090016 : Boolean;
      StopPayments@1090017 : Boolean;
      SelectedAccount@1090019 : Code[20];
      NextEntryNo@1090020 : Integer;
      Text1090000@1090021 : TextConst 'ENU=Please enter the last payment date';
      Text1090001@1090022 : TextConst 'ENU=Payment date is earlier than %1.\\';
      Text1090002@1090023 : TextConst 'ENU=Do you wish to continue?;NOR=ùnsker du Ü fortsette?;SVE=Vill du fortsÑtta?';
      Text1090003@1090024 : TextConst 'ENU=Export job canceled';
      Text1090004@1090025 : TextConst 'ENU=Processing vendors     #1##########;NOR=Behandler leverandõrer #1##########;SVE=Behandlar leverantîrer                   #1##########';
      Text1090005@1090026 : TextConst 'ENU=Processing vendors payment discounts #1##########';
      Text1090006@1090027 : TextConst 'ENU=Inserting lines into Ref Payment table #1##########';
      Text1090008@1090032 : TextConst 'ENU=Use vendor priority function has to be in use when the value of Amount available field is not 0.';

    PROCEDURE SetRefkPmtLine@1(NewRefPmtLine@1090000 : Record 11126182);
    BEGIN
      RefPmtLines := NewRefPmtLine;
    END;

    PROCEDURE InitializeRequest@3(LastPmtDate@1090000 : Date;FindPmtDisc@1090001 : Boolean;NewAvailableAmount@1090002 : Decimal);
    BEGIN
      LastDueDateToPayReq := LastPmtDate;
      UsePaymentDisc := FindPmtDisc;
      AmountAvailable := NewAvailableAmount;
    END;

    PROCEDURE GetVendLedgEntries@13(Positive@1090000 : Boolean;Future@1090001 : Boolean);
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
      VendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      VendLedgEntry.SETFILTER("Document Type",'%1|%2',
        VendLedgEntry."Document Type"::Invoice,
        VendLedgEntry."Document Type"::"Credit Memo");
      VendLedgEntry.SETRANGE(Open,TRUE);
      VendLedgEntry.SETRANGE(Positive,Positive);
      VendLedgEntry.SETRANGE("On Hold",'<>''');

      IF Future THEN BEGIN
        VendLedgEntry.SETRANGE("Due Date",LastDueDateToPayReq + 1,99991231D);
        VendLedgEntry.SETRANGE("Pmt. Discount Date",WORKDATE,LastDueDateToPayReq);
        VendLedgEntry.SETFILTER("Original Pmt. Disc. Possible",'<0');
      END ELSE
        VendLedgEntry.SETRANGE("Due Date",0D,LastDueDateToPayReq);
      VendLedgEntry.SETRANGE("On Hold",'');
      IF VendLedgEntry.FINDSET THEN
        REPEAT
          SaveAmount;
        UNTIL VendLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SaveAmount@6();
    BEGIN
      VendLedgEntry.CALCFIELDS("Amount (LCY)");
      IF UsePriority THEN
        PayableVendLedgEntry.Priority := Vendor.Priority
      ELSE
        PayableVendLedgEntry.Priority := 0;
      PayableVendLedgEntry."Vendor No." := VendLedgEntry."Vendor No.";
      PayableVendLedgEntry."Entry No." := NextEntryNo;
      PayableVendLedgEntry."Vendor Ledg. Entry No." := VendLedgEntry."Entry No.";
      PayableVendLedgEntry.Amount := -VendLedgEntry.Amount;
      PayableVendLedgEntry."Amount (LCY)" := -VendLedgEntry."Amount (LCY)";
      PayableVendLedgEntry.Positive := (PayableVendLedgEntry.Amount > 0);
      PayableVendLedgEntry.Future := (VendLedgEntry."Due Date" > LastDueDateToPayReq);
      PayableVendLedgEntry."Currency Code" := VendLedgEntry."Currency Code";
      PayableVendLedgEntry.INSERT;
      NextEntryNo := NextEntryNo + 1;
    END;

    PROCEDURE CheckAmounts@10(Future@1090000 : Boolean);
    VAR
      CurrencyBalance@1090001 : Decimal;
      PrevCurrency@1090002 : Code[10];
    BEGIN
      PayableVendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      PayableVendLedgEntry.SETRANGE(Future,Future);
      IF PayableVendLedgEntry.FINDSET THEN BEGIN
        PrevCurrency := PayableVendLedgEntry."Currency Code";
        REPEAT
          IF PayableVendLedgEntry."Currency Code" <> PrevCurrency THEN BEGIN
            IF CurrencyBalance < 0 THEN BEGIN
              PayableVendLedgEntry.SETRANGE("Currency Code",PrevCurrency);
              PayableVendLedgEntry.DELETEALL;
              PayableVendLedgEntry.SETRANGE("Currency Code");
            END ELSE
              AmountAvailable := AmountAvailable - CurrencyBalance;
            CurrencyBalance := 0;
            PrevCurrency := PayableVendLedgEntry."Currency Code";
          END;
          IF (OriginalAmtAvailable = 0) OR
             (AmountAvailable >= CurrencyBalance + PayableVendLedgEntry."Amount (LCY)")
          THEN
            CurrencyBalance := CurrencyBalance + PayableVendLedgEntry."Amount (LCY)"
          ELSE
            PayableVendLedgEntry.DELETE;
        UNTIL PayableVendLedgEntry.NEXT = 0;
        IF CurrencyBalance < 0 THEN BEGIN
          PayableVendLedgEntry.SETRANGE("Currency Code",PrevCurrency);
          PayableVendLedgEntry.DELETEALL;
          PayableVendLedgEntry.SETRANGE("Currency Code");
        END ELSE
          IF OriginalAmtAvailable > 0 THEN
            AmountAvailable := AmountAvailable - CurrencyBalance;
        IF (OriginalAmtAvailable > 0) AND (AmountAvailable <= 0) THEN
          StopPayments := TRUE;
      END;
      PayableVendLedgEntry.RESET;
    END;

    LOCAL PROCEDURE MakeRefPmtLines@2();
    BEGIN
      PurchRefLines.RESET;
      IF PurchRefLines.FINDLAST THEN
        NextEntryNo := PurchRefLines."No." + 1;

      IF PayableVendLedgEntry.FINDSET THEN
        REPEAT
          WITH RefPmtLines DO BEGIN
            "No." := NextEntryNo;
            SetUsePaymentDisc(UsePaymentDisc);
            "Payment Account" := SelectedAccount;
            "Vendor No." := PayableVendLedgEntry."Vendor No.";
            "Entry No." := PayableVendLedgEntry."Vendor Ledg. Entry No.";
            IF NOT ExistsNotTransferred THEN BEGIN
              VALIDATE("Entry No.",PayableVendLedgEntry."Vendor Ledg. Entry No.");
              IF "Entry No." <> 0 THEN BEGIN
                INSERT;
                NextEntryNo := NextEntryNo + 1;
              END;
            END;
          END;
        UNTIL PayableVendLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE AmountAvailableOnAfterValidate@19035272();
    BEGIN
      IF AmountAvailable <> 0 THEN
        UsePriority := TRUE;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

