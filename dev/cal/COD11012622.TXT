OBJECT Codeunit 11012622 Mail Template Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            ServiceOrder@1100528300 : Record 11012823;
          BEGIN
            InitializeFunctionNames;
            InitializeMailTemplateNames;
          END;

  }
  CODE
  {
    VAR
      BodyTxt@1100528309 : TextConst 'ENU=***Body***';
      ConfigureErrorsTxt@1100528315 : TextConst 'ENU=There are Errors in the %1 %2 (%3) configuration.';
      CreateServiceCallTxt@1100528310 : TextConst 'ENU=CTRL New Service Call -Calling Account';
      DataTypeManagementErrorTxt@1100528317 : TextConst 'ENU=Data Type Management Error: %1';
      DataTypeNotSupportedTxt@1100528320 : TextConst 'ENU=Data Type %1 is not supported.';
      DifferentSourceTableTxt@1100528318 : TextConst 'ENU=%1 differs from Input Table. (Source: %2, Input: %3)';
      DuplicateErrorTxt@1100528304 : TextConst 'ENU=Value %1 is used more than once.';
      ElementPrefixPreTxt@1100528322 : TextConst 'ENU=_%';
      ElementPrefixPostTxt@1100528323 : TextConst 'ENU=%_';
      FieldNotAllowedTxt@1100528300 : TextConst 'ENU=The field is a %1 field. Values can be: %2.';
      FieldNotFilledTxt@1100528313 : TextConst 'ENU=Field is not filled';
      NoBaseFoundTxt@1100528319 : TextConst 'ENU=No Base %1 found.';
      NoErrorsFoundTxt@1100528305 : TextConst 'ENU=There are no Errors found.';
      "No...FoundTxt"@1100525000 : TextConst 'ENU=No %1 found.;SVE=%1 hittades inte.';
      NoTableErrorTxt@1100528314 : TextConst 'ENU=TableVariant is not a Table.';
      NotExistTxt@1100528312 : TextConst 'ENU=%1 %2 does not exist.;SVE=%1 %2 finns inte.';
      NotFoundForTxt@1100528325 : TextConst 'ENU=%1 %2 is not found for %3 %4 %5.';
      SignatureTxt@1100528306 : TextConst 'ENU=***Signature***';
      SubjectTxt@1100528307 : TextConst 'ENU=***Subject***';
      YesNoTxt@1100528301 : TextConst 'ENU=Yes, No;SVE=Ja,Nej';
      GenericTempTable@1100528303 : TEMPORARY Record 11020579;
      TempBlob@1100528311 : TEMPORARY Record 99008535;
      TempErrorMessage@1100528302 : TEMPORARY Record 700;
      DataTypeManagement@1100528316 : Codeunit 701;
      StringFunctions@1100528321 : Codeunit 11012273;
      CRLF@1100528308 : Text;
      Text002@1100528324 : TextConst 'ENU=******************************;SVE=******************************';
      DelCharString@1100528398 : Text;
      LanguageId@1100528326 : Integer;
      SalesInvoiceTxt@1100528328 : TextConst 'ENU=Sales Invoice;SVE=F”rs.faktura';
      SalesCreditMemoTxt@1100528329 : TextConst 'ENU=Sales Credit Memo;SVE=F”rs.kreditnota';
      SalesQuoteTxt@1100528330 : TextConst 'ENU=Sales Quote;SVE=F”rs„ljningsoffert';
      SalesOrderTxt@1100528331 : TextConst 'ENU=Sales Order;SVE=F”rs.order';
      PurchaseQuoteTxt@1100528332 : TextConst 'ENU=Purchase Quote;SVE=Ink”psoffert';
      PurchaseOrderTxt@1100528333 : TextConst 'ENU=Purchase Order;SVE=Ink”psorder';
      PurchaseQuoteThanksLetterTxt@1100528334 : TextConst 'ENU=Purchase Quote Thanks Letter';
      ServiceOrderStatusTxt@1100528335 : TextConst 'ENU=Service Order Status;SVE=Serviceorderstatus';
      ServiceOrderWorksheetTxt@1100528336 : TextConst 'ENU=Service Order Worksheet';
      WorkOrderSubcontractorTxt@1100528337 : TextConst 'ENU=Work Order Subcontractor';
      SubcontractorNotFinishedTxt@1100528338 : TextConst 'ENU=Subcontractor not Finished';
      SubcontractorInvoiceNotReceivedTxt@1100528339 : TextConst 'ENU=Subcontractor Invoice not Received;SVE=List Subcontractor Invoice not Received';
      SubcontractorShiftedExpectedDatesTxt@1100528340 : TextConst 'ENU=Subcontractor shifted Expected Dates';
      ServiceOrderDebriefTextTxt@1100528341 : TextConst 'ENU=Service Order Debrief Text';
      PlantOrderStatusTxt@1100528342 : TextConst 'ENU=PlantOrderStatus';
      PlantTransportOrderTxt@1100528343 : TextConst 'ENU=Plant Transport Order;SVE=Maskintransportorder';
      PlantExitOrderTxt@1100528344 : TextConst 'ENU=Plant Exit Order';
      PlantOrderTxt@1100528345 : TextConst 'ENU=Plant Order;SVE=Maskinorder';
      ReminderTxt@1100528346 : TextConst 'ENU=Reminder;SVE=Betalningsp†minnelse';
      SalesShipmentTxt@1100528347 : TextConst 'ENU=Sales Shipment';
      MaintenanceAppointmentProposalTxt@1100528348 : TextConst 'ENU=Maintenance Appointment Proposal';
      MaintenanceAppointmentTxt@1100528349 : TextConst 'ENU=Maintenance Appointment';
      WorkOrderWorksheetTxt@1100528350 : TextConst 'ENU=Worksheet Work Order - Supplier';
      DPTLoginFBATxt@1100528351 : TextConst 'ENU=DPT Login (FBA)';
      DPTLoginADTxt@1100528352 : TextConst 'ENU=DPT Login (AD)';
      DPTLoginQuoteRequestTxt@1100528353 : TextConst 'ENU=DPT Login (Quote Request)';
      DPTQuoteReminderTxt@1100528354 : TextConst 'ENU=DPT Quote Reminder';
      ConfirmResetSPTPasswordTxt@1100528355 : TextConst 'ENU=Confirm Reset SPT Password';
      ReceiveTemporarySPTPasswordTxt@1100528356 : TextConst 'ENU=Receive Temporary SPT Password';
      ReceiveNewSPTPasswordTxt@1100528357 : TextConst 'ENU=Receive New SPT Password';
      ConfirmResetSCPTPasswordTxt@1100528358 : TextConst 'ENU=Confirm Reset SCPT Password';
      ReceiveTemporarySCPTPasswordTxt@1100528359 : TextConst 'ENU=Receive Temporary SCPT Password';
      ReceiveNewSCPTPasswordTxt@1100528360 : TextConst 'ENU=Receive New SCPT Password';
      DPTLoginServiceResponsiblePersonTxt@1100528361 : TextConst 'ENU=DPT Login (Service: Responsible Person)';
      DPTLoginServiceAuthorityTxt@1100528362 : TextConst 'ENU=DPT Login (Service: Authority)';
      DPTLoginProjectResponsiblePersonTxt@1100528363 : TextConst 'ENU=DPT Login (Project: Responsible Person)';
      DPTLoginProjectAuthorityTxt@1100528364 : TextConst 'ENU=DPT Login (Project: Authority)';
      PlantAppWelcomeTxt@1100528365 : TextConst 'ENU=Plant App Welcome';
      FieldServiceAppWelcomeTxt@1100528366 : TextConst 'ENU=Field Service App Welcome';
      SHInvitationMailTxt@1100528367 : TextConst 'ENU=S&H Invitation Mail';
      PostedPurchaseReceiptTxt@1100528368 : TextConst 'ENU=Posted Purchase Receipt;SVE=Bokf”rd inleverans';
      FieldServiceAppDemoUserTxt@1100528369 : TextConst 'ENU=Field Service App Demo User';
      CivilConstructionAppWelcomeTxt@1100528370 : TextConst 'ENU=Civil Construction App Welcome';
      WarehouseAppWelcomeTxt@1100528371 : TextConst 'ENU=WarehouseAppWelcome';
      OnSiteAppWelcomeTxt@1100528372 : TextConst 'ENU=OnSiteAppWelcome';
      WarehouseAppDemoUserTxt@1100528373 : TextConst 'ENU=Warehouse App Demo User';
      ExtensionContractTxt@1100528374 : TextConst 'ENU=Extension Contract;SVE=ŽTA';
      OptionQuoteTxt@1100528375 : TextConst 'ENU=Option Quote;SVE=Alternativoffert';
      PlotTxt@1100528376 : TextConst 'ENU=Plot;SVE=Ritning';
      ProjectReportsTxt@1100528377 : TextConst 'ENU=Project Reports';
      PlantAppDemoUserTxt@1100528378 : TextConst 'ENU=Plant App Demo User';
      WKADataRequestTxt@1100528379 : TextConst 'ENU=WKA Data Request';
      ConsentNotificationTxt@1100528380 : TextConst 'ENU=Consent Notification';
      HoursByEmployeeTxt@1100528381 : TextConst 'ENU=Hours by Employee;SVE="Timmar efter anst„lld "';
      ReminderHoursEmployeeTxt@1100528382 : TextConst 'ENU=Reminder Hours - Employee';
      ReminderHoursManagerTxt@1100528383 : TextConst 'ENU=Reminder Hours - Manager';
      ReminderHoursSiteManagerTxt@1100528384 : TextConst 'ENU=Reminder Hours - Site Manager';
      ReminderHoursSiteManagerManagerTxt@1100528385 : TextConst 'ENU=Reminder Hours Site Manager - Manager';
      SignhostSignRequestTxt@1100528386 : TextConst 'ENU=Signhost Sign Request';
      SignhostSignedDocumentTxt@1100528387 : TextConst 'ENU=Signhost Signed Document';
      TransportRideTxt@1100528388 : TextConst 'ENU=Transport Ride;SVE=Transportk”rning';
      DocketTxt@1100528389 : TextConst 'ENU=Docket';
      ChangeRequestCommunicationTxt@1100528390 : TextConst 'ENU=Change Request Communication';
      ServiceCallCommunicationTxt@1100528391 : TextConst 'ENU=Service Call Communication';
      PurchaseOrderReceiptTxt@1100528392 : TextConst 'ENU=Purchase Order Receipt;SVE=Ink”psorder, inleverans';
      PurchaseReturnOrderTxt@1100528393 : TextConst 'ENU=Purchase Return Order;SVE=Ink”psreturorder';
      MailAppointmentConfirmationCallDirectTxt@1100528394 : TextConst 'ENU=Mail Appointment Confirmation (Call/Direct)';
      CivilConstructionAppSummaryTxt@1100528395 : TextConst 'ENU=Civil Construction App - Summary';
      HPTHRADemoUserTxt@1100528396 : TextConst 'ENU=HPT-HRA Demo User';
      DPTQuoteUpdateTxt@1100528397 : TextConst 'ENU=DPT Quote Update';
      DPTQuoteDocUpLoadedTxt@1100528399 : TextConst 'ENU=DPT Quote Document Uploaded';
      ServiceCallStatusChangeForCallingAccountTxt@1100528327 : TextConst 'ENU=CTRL Service Call Status change -Calling Account';
      WorkOrderChangeBySubcontractorForPlannerTxt@1100528400 : TextConst 'ENU=CTRL Status Change by Subcontractor - Order Manager';
      SubcontractorNewWorkTxt@1100528401 : TextConst 'ENU=CTRL New Work Order - Vendor';
      NewServiceCallForCallingAccountTxt@1100528402 : TextConst 'ENU=CTRL New Service Call - E-Mail Calling Account';
      CreateServiceCallForLocationContractManagerTxt@1100528403 : TextConst 'ENU=CTRL New Service Call - E-Mail Location and Contractl';
      ServiceCallStatusChangeForLocationContractManagerTxt@1100528404 : TextConst 'ENU=CTRL Status change Service Call - E-Mail Location or Contract';
      LanguageIdOrig@1100528405 : Integer;

    PROCEDURE AnyTableFieldValue@1100528341(TableNo@1100528302 : Integer;FieldNo@1100528301 : Integer;RecRef@1100528300 : RecordRef) : Text;
    VAR
      DecimalValue@1100528307 : Decimal;
      FldRef@1100528306 : FieldRef;
      FieldRec@1100528305 : Record 2000000041;
      DateValue@1100528304 : Date;
      TimeValue@1100528303 : Time;
    BEGIN
      FldRef := RecRef.FIELD(FieldNo);
      IF NOT FieldRec.GET(TableNo,FieldNo) THEN
        EXIT(Text002);

      IF FieldRec.Class = FieldRec.Class::FlowField THEN
        FldRef.CALCFIELD;

      CASE FieldRec.Type OF
        FieldRec.Type::Decimal:
          BEGIN
            EVALUATE(DecimalValue, FORMAT(FldRef.VALUE));
            EXIT(FormatDecimal(DecimalValue));
          END;
        FieldRec.Type::Date:
          BEGIN
            DateValue := FldRef.VALUE;
            EXIT(FormatDate(DateValue));
          END;
        FieldRec.Type::Time:
          BEGIN
            TimeValue := FldRef.VALUE;
            EXIT(FormatTime(TimeValue));
          END;
      END;

      EXIT(FORMAT(FldRef));  //C056387: bad copy from same procedure in table E-Mail Body Text (dp01884)
    END;

    PROCEDURE CheckMailTemplate@1100528310(MailTemplateNo@1100528300 : Integer;ShowError@1100528301 : Boolean) : Boolean;
    VAR
      MailBody@1100528302 : Record 11229450;
      ErrorMessages@1100528303 : Page 700;
    BEGIN
      SetGlobalVars(MailTemplateNo);

      CheckMailTemplate_Local(MailTemplateNo);
      CheckMailTemplateLayout(MailTemplateNo);
      CheckMailTemplateTable(MailTemplateNo);
      CheckMailTemplateTableField(MailTemplateNo);


      IF (ShowError) THEN BEGIN
        IF (TempErrorMessage.COUNT > 0) THEN BEGIN
          COMMIT;
          ErrorMessages.SetRecords(TempErrorMessage);
          ErrorMessages.RUNMODAL;
        END ELSE
          MESSAGE(NoErrorsFoundTxt)
      END;
      EXIT(TempErrorMessage.COUNT = 0);
    END;

    PROCEDURE CheckMailTemplateFromValues@1100526202(MailTemplateNo@1100528402 : Integer;Dimension1Code@1100528500 : Code[20]);
    VAR
      FromName@1100528400 : Text;
      FromEmail@1100528401 : Text;
    BEGIN
      GetApplicableMailTemplateFromValues(MailTemplateNo, Dimension1Code, TRUE, FromName, FromEmail);
    END;

    PROCEDURE FormatDate@1100528344(DateValue@1100528300 : Date) FormattedDateValue : Text;
    BEGIN
      IF (LanguageId = 1043) THEN
        EXIT(FORMAT(DateValue, 0, '<Day,2>-<Month,2>-<Year>'));
      EXIT(FORMAT(DateValue));
    END;

    PROCEDURE GetApplicableMailTemplateFromValues@1100528400(MailTemplateNo@1100528400 : Integer;Dimension1Code@1100528500 : Code[20];ThrowError@1100528401 : Boolean;VAR FromName@1100528403 : Text;VAR FromEmail@1100528402 : Text) : Boolean;
    VAR
      CompanyInformation@1100528405 : Record 79;
      Found@1100528406 : Boolean;
    BEGIN
      Found := GetMailTemplateFromValues(MailTemplateNo, Dimension1Code, ThrowError, FromName, FromEmail);
      IF CompanyInformation.GET THEN;
      IF (NOT Found) THEN BEGIN
        IF (ThrowError) THEN BEGIN
          CompanyInformation.TESTFIELD(Name);
          CompanyInformation.TESTFIELD("E-Mail");
        END;
        FromName := CompanyInformation.Name;
        FromEmail := CompanyInformation."E-Mail";
      END;

      EXIT(FromEmail <> '');
    END;

    PROCEDURE GetCRLF@1100528371() : Text;
    BEGIN
      EXIT(CRLF);
    END;

    PROCEDURE GetElementName@1100528354(ElementName@1100528300 : Text) : Text;
    BEGIN
      EXIT(STRSUBSTNO('%1%2%3', GetElementPrefixTxtPre, ElementName, GetElementPrefixTxtPost));
    END;

    PROCEDURE GetElementPrefixTxtPre@1100528316() : Text;
    BEGIN
      EXIT(ElementPrefixPreTxt);
    END;

    PROCEDURE GetElementPrefixTxtPost@1100528315() : Text;
    BEGIN
      EXIT(ElementPrefixPostTxt);
    END;

    PROCEDURE GetLayoutTextPlain@1100528309(MailTemplateLayout@1100528300 : Record 11229451;SetTypeText@1100528306 : Boolean) : Text;
    BEGIN
      SetGlobalVars(MailTemplateLayout."Mail Template No.");
      EXIT(GetMailTemplateText(MailTemplateLayout, SetTypeText, 0));
    END;

    PROCEDURE GetLayoutTextSubstituted@1100528305(MailTemplateNo@1100528300 : Integer;LanguageCode@1100528301 : Code[10];TableVariant@1100528302 : Variant;VAR MailSubjectText@1100528309 : Text;VAR MailBodyText@1100528308 : Text;VAR MailSignatureText@1100528307 : Text);
    VAR
      MailTemplate@1100528303 : Record 11229450;
      MailTemplateLayout@1100528310 : Record 11229451;
      MailTemplateTable@1000000001 : Record 11229453;
      RecRef@1100528304 : RecordRef;
      RecId@1100528305 : RecordID;
    BEGIN
      GetMailTemplate(MailTemplate, MailTemplateNo, '');
      IF (NOT CheckMailTemplate(MailTemplateNo, FALSE)) THEN
        ERROR(ConfigureErrorsTxt, MailTemplate.TABLECAPTION, MailTemplate.Description, MailTemplateNo);

      SetGlobalVars(MailTemplateNo);
      IF (NOT DataTypeManagement.GetRecordRef(TableVariant, RecRef)) THEN
        ERROR(DataTypeManagementErrorTxt, 0);
      RecId := RecRef.RECORDID;

      LanguageIdOrig := GLOBALLANGUAGE;
      SetLanguageID(GetLanguageId(LanguageCode));

      IF (MailTemplate."Source Table No." <> RecId.TABLENO) THEN
        ERROR(DifferentSourceTableTxt, MailTemplate.FIELDCAPTION("Source Table No."), MailTemplate."Source Table No.", RecId.TABLENO);

      GLOBALLANGUAGE(LanguageId);
      LoopMailTemplateTable(MailTemplateNo, 1, 0, '', RecRef);
      GLOBALLANGUAGE(LanguageIdOrig);

      IF (NOT MailTemplateLayout.GET(MailTemplateNo, LanguageCode)) THEN
        MailTemplateLayout.GET(MailTemplateNo, '');
      MailSubjectText := GetMailTemplateText(MailTemplateLayout, FALSE, 1);
      MailBodyText := GetMailTemplateText(MailTemplateLayout, FALSE, 2);
      MailSignatureText := GetMailTemplateText(MailTemplateLayout, FALSE, 3);

      MailSubjectText := SubstituteText(MailSubjectText);
      MailBodyText := SubstituteText(MailBodyText);
      MailSignatureText := SubstituteText(MailSignatureText);
    END;

    PROCEDURE GetLayoutTextSubstitutedBodyOnly@1100528340(MailTemplateNo@1100528300 : Integer;LanguageCode@1100528301 : Code[10];TableVariant@1100528302 : Variant) : Text;
    VAR
      MailTemplate@1100528303 : Record 11229450;
      MailTemplateLayout@1100528310 : Record 11229451;
      MailTemplateTable@1000000001 : Record 11229453;
      MailSubjectText@1100528307 : Text;
      MailSignatureText@1100528306 : Text;
      MailBodyText@1100528309 : Text;
      RecRef@1100528304 : RecordRef;
      RecId@1100528305 : RecordID;
    BEGIN
      GetLayoutTextSubstituted(MailTemplateNo, LanguageCode, TableVariant, MailSubjectText, MailBodyText, MailSignatureText);
      EXIT(MailBodyText);
    END;

    PROCEDURE GetLayoutTextSubstitutedOneLine@1100528338(MailTemplateLayoutLine@1100528300 : Record 11229457;TableVariant@1100528302 : Variant) : Text;
    VAR
      MailTemplate@1100528303 : Record 11229450;
      MailTemplateTable@1000000001 : Record 11229453;
      MailTemplateNo@1100528306 : Integer;
      RecRef@1100528304 : RecordRef;
      RecId@1100528305 : RecordID;
    BEGIN
      IF (NOT TableVariant.ISRECORD) THEN
        ERROR(NoTableErrorTxt);
      MailTemplateNo := MailTemplateLayoutLine."Mail Template No.";
      GetMailTemplate(MailTemplate, MailTemplateNo, '');
      IF (NOT CheckMailTemplate(MailTemplateNo, FALSE)) THEN
        ERROR(ConfigureErrorsTxt, MailTemplate.TABLECAPTION, MailTemplate.Description, MailTemplateNo);

      SetGlobalVars(MailTemplateNo);
      IF (NOT DataTypeManagement.GetRecordRef(TableVariant, RecRef)) THEN
        ERROR(DataTypeManagementErrorTxt, 0);
      RecId := RecRef.RECORDID;
      SetLanguageID(GetLanguageId(MailTemplateLayoutLine."Language Code"));

      IF (MailTemplate."Source Table No." <> RecId.TABLENO) THEN
        ERROR(DifferentSourceTableTxt, MailTemplate.FIELDCAPTION("Source Table No."), MailTemplate."Source Table No.", RecId.TABLENO);

      LoopMailTemplateTable(MailTemplateNo, 1, 0, '', RecRef);

      EXIT(SubstituteText(MailTemplateLayoutLine."Text Line"));
    END;

    PROCEDURE GetLayoutTextSubstitutedSubjectAndTotalBody@1100528337(MailTemplateNo@1100528300 : Integer;LanguageCode@1100528301 : Code[10];TableVariant@1100528302 : Variant;VAR MailSubjectText@1100528309 : Text;VAR MailBodyText@1100528308 : Text);
    VAR
      MailSignatureText@1100528306 : Text;
    BEGIN
      GetLayoutTextSubstituted(MailTemplateNo, LanguageCode, TableVariant, MailSubjectText, MailBodyText, MailSignatureText);
      IF (MailSignatureText <> '') THEN
        MailBodyText += STRSUBSTNO('%2%1%2', MailSignatureText, CRLF);
    END;

    PROCEDURE GetLayoutTextSubstitutedSignatureOnly@1100528321(MailTemplateNo@1100528300 : Integer;LanguageCode@1100528301 : Code[10];TableVariant@1100528302 : Variant) : Text;
    VAR
      MailSubjectText@1100528308 : Text;
      MailBodyText@1100528307 : Text;
      MailSignatureText@1100528306 : Text;
    BEGIN
      GetLayoutTextSubstituted(MailTemplateNo, LanguageCode, TableVariant, MailSubjectText, MailBodyText, MailSignatureText);
      EXIT(MailSignatureText);
    END;

    PROCEDURE GetLayoutTextSubstitutedSubjectOnly@1100528320(MailTemplateNo@1100528300 : Integer;LanguageCode@1100528301 : Code[10];TableVariant@1100528302 : Variant) : Text;
    VAR
      MailSubjectText@1100528308 : Text;
      MailBodyText@1100528307 : Text;
      MailSignatureText@1100528306 : Text;
    BEGIN
      GetLayoutTextSubstituted(MailTemplateNo, LanguageCode, TableVariant, MailSubjectText, MailBodyText, MailSignatureText);
      EXIT(MailSubjectText);
    END;

    PROCEDURE GetLayoutTextSubstitutedTotalBodyOnly@1100528358(MailTemplateNo@1100528300 : Integer;LanguageCode@1100528301 : Code[10];TableVariant@1100528302 : Variant) : Text;
    VAR
      MailSubjectText@1100528308 : Text;
      MailBodyText@1100528307 : Text;
      MailSignatureText@1100528306 : Text;
    BEGIN
      GetLayoutTextSubstituted(MailTemplateNo, LanguageCode, TableVariant, MailSubjectText, MailBodyText, MailSignatureText);
      IF (MailSignatureText <> '') THEN
        MailBodyText += STRSUBSTNO('%2%1%2', MailSignatureText, CRLF);
      EXIT(MailBodyText);
    END;

    PROCEDURE GetMailTemplate@1100528318(VAR MailTemplate@1100528300 : Record 11229450;MailTemplateNo@1100528301 : Integer;Dimension1Code@1100528302 : Code[20]) : Boolean;
    BEGIN
      IF (MailTemplate.GET(MailTemplateNo, Dimension1Code)) THEN
        EXIT(TRUE);
      IF (MailTemplate.GET(MailTemplateNo, '')) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE GetMailTemplateNoFromSalesHeader@1100528347(SalesHeader@1100528300 : Record 36) : Integer;
    VAR
      MailTemplate@1100528301 : Record 11229450;
    BEGIN
      CASE SalesHeader."Document Type" OF
        SalesHeader."Document Type"::Quote:
          EXIT(3);
        SalesHeader."Document Type"::Order:
          EXIT(4);
        SalesHeader."Document Type"::Invoice:
          EXIT(1);
        SalesHeader."Document Type"::"Credit Memo":
          EXIT(2);
        SalesHeader."Document Type"::"Invoice Proposal":
          EXIT(190);
      END;
      ERROR(NotFoundForTxt, MailTemplate.TABLECAPTION, MailTemplate.FIELDCAPTION("No."), SalesHeader.TABLECAPTION, SalesHeader.FIELDCAPTION("Document Type"), SalesHeader."Document Type");
    END;

    PROCEDURE GetMailTemplateNoFromPurchHeader@1100528353(PurchaseHeader@1100528302 : Record 38;SendPurchaseOrderReceipt@1100528300 : Boolean) : Integer;
    VAR
      MailTemplate@1100528303 : Record 11229450;
    BEGIN
      CASE PurchaseHeader."Document Type" OF
        PurchaseHeader."Document Type"::Quote:
          EXIT(11);
        PurchaseHeader."Document Type"::Order:
          IF SendPurchaseOrderReceipt THEN
            EXIT(150)
          ELSE
            EXIT(12);
      END;
      ERROR(NotFoundForTxt, MailTemplate.TABLECAPTION, MailTemplate.FIELDCAPTION("No."), PurchaseHeader.TABLECAPTION, PurchaseHeader.FIELDCAPTION("Document Type"), PurchaseHeader."Document Type");
    END;

    PROCEDURE GetMailTemplateNoFromPurchHeader2@1100528348(PurchaseHeader@1100528302 : Record 38;SendQuoteThanksLetter@1100528301 : Boolean;SendPurchaseOrderReceipt@1100528300 : Boolean) : Integer;
    VAR
      MailTemplate@1100528303 : Record 11229450;
    BEGIN
      IF (PurchaseHeader."Purchase Order Type" = PurchaseHeader."Purchase Order Type"::"Return Order") THEN
        EXIT(151);

      CASE PurchaseHeader."Document Type" OF
        PurchaseHeader."Document Type"::Quote: BEGIN
          IF (SendQuoteThanksLetter) THEN
            EXIT(13);
          EXIT(11);
        END;
        PurchaseHeader."Document Type"::Order: BEGIN
          IF (SendPurchaseOrderReceipt) THEN
            EXIT(150);
          EXIT(12);
        END;
      END;
      ERROR(NotFoundForTxt, MailTemplate.TABLECAPTION, MailTemplate.FIELDCAPTION("No."), PurchaseHeader.TABLECAPTION, PurchaseHeader.FIELDCAPTION("Document Type"), PurchaseHeader."Document Type");
    END;

    LOCAL PROCEDURE GetMailTemplateFromValues@1100528401(MailTemplateNo@1100528400 : Integer;Dimension1Code@1100528500 : Code[20];ThrowError@1100528402 : Boolean;VAR FromName@1100528301 : Text;VAR FromEmail@1100528300 : Text) : Boolean;
    VAR
      MailTemplate@1100528302 : Record 11229450;
    BEGIN
      IF GetMailTemplate(MailTemplate, MailTemplateNo, Dimension1Code) THEN BEGIN
        IF ThrowError THEN BEGIN
          MailTemplate.TESTFIELD(From);
        END;

        FromName  := MailTemplate."From Name";
        FromEmail := MailTemplate.From;

        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetSubjectText@1100528317() : Text;
    BEGIN
      EXIT(SubjectTxt);
    END;

    PROCEDURE InitializeFunctionNames@1100528323();
    VAR
      FunctionArr@1100528303 : ARRAY [100] OF Text;
    BEGIN
      InitializeFunctionNamesFromDataMigration(FunctionArr);
    END;

    PROCEDURE InitializeFunctionNamesFromDataMigration@1100528332(VAR FunctionArr@1100528300 : ARRAY [100] OF Text);
    VAR
      MailTemplateFunction@1100528302 : Record 11229464;
      Counter@1100528301 : Integer;
    BEGIN
      SetGlobalVars(0);

      FunctionArr[1] := 'Project Authority Get Contact';
      FunctionArr[2] := 'Vendor Purch.  Action Get Contact';
      FunctionArr[3] := 'Service Portal User Get Password';
      FunctionArr[4] := 'Subcontractor Portal User Get Password';
      FunctionArr[5] := 'Service Order Get Planning Agreement Code';
      FunctionArr[6] := 'General Advanced Text Get Text';
      FunctionArr[7] := 'Comment Line Get Comment';
      FunctionArr[8] := 'Service Text Get Comment';
      FunctionArr[9] := 'Debrief Text Get Comment';
      FunctionArr[10] := 'Work Order Text Get Comment';
      FunctionArr[29] := 'Approver Get No Of Open Consent Lines';
      FunctionArr[30] := 'Approver Get Consent Hyperlink';
      FunctionArr[40] := 'Service Order Get Full Starting Date';
      FunctionArr[50] := 'Planning Agreement Get Short Starting Time';
      FunctionArr[51] := 'Planning Agreement Get Short Ending Time';
      FunctionArr[55] := 'Fsa User Get Proxy Url Android';
      FunctionArr[56] := 'Fsa User Get Proxy Url';
      FunctionArr[60] := 'Hour Accounting.Get Week Year Text';
      FunctionArr[61] := 'Hour Accounting.Get Employee Names Reporting Delay';
      FunctionArr[63] := 'App User Get Pla Proxy Url Android';
      FunctionArr[64] := 'App User Get Pla Proxy Url';
      FunctionArr[68] := 'Site Manager Hour Accounting.Get Week Year';
      FunctionArr[69] := 'Site Manager Hour Accounting.Get Employee Names';
      FunctionArr[70] := 'App User Get Cca Proxy Url Android';
      FunctionArr[71] := 'App User Get Cca Proxy Url';
      FunctionArr[72] := 'App User GAP Get WHA Proxy Url';
      FunctionArr[73] := 'App User GAP Get WHA Proxy Url Android';

      FOR Counter := 1 TO ARRAYLEN(FunctionArr) DO BEGIN
        IF (FunctionArr[Counter] <> '') THEN BEGIN
          CASE Counter OF
            6,7,8,9,10: AddAndUpdateFunctionName(FunctionArr[Counter], 1);
            ELSE AddAndUpdateFunctionName(FunctionArr[Counter], 0);
          END;
        END;
      END;
    END;

    PROCEDURE InitializeMailTemplateNames@1100528322();
    VAR
      MailTemplate@1100528304 : Record 11229450;
      Counter@1100528301 : Integer;
      TableArr@1100528300 : ARRAY [1000] OF Integer;
      TemplateArr@1100528302 : ARRAY [1000] OF Text;
      TypeArr@1100528303 : ARRAY [1000] OF Integer;
    BEGIN
      SetGlobalVars(0);

      FillMailTemplateArrays(1, SalesInvoiceTxt, DATABASE::"Sales Invoice Header", MailTemplate.Type::Sales, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(2, SalesCreditMemoTxt, DATABASE::"Sales Cr.Memo Header", MailTemplate.Type::Sales, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(3, SalesQuoteTxt, DATABASE::"Sales Header", MailTemplate.Type::Sales, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(4, SalesOrderTxt, DATABASE::"Sales Header", MailTemplate.Type::Sales, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(11, PurchaseQuoteTxt, DATABASE::"Purchase Header", MailTemplate.Type::Purchase, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(12, PurchaseOrderTxt, DATABASE::"Purchase Header", MailTemplate.Type::Purchase, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(13, PurchaseQuoteThanksLetterTxt, DATABASE::"Purchase Header", MailTemplate.Type::Purchase, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(21, ServiceOrderStatusTxt, DATABASE::"Service Order", MailTemplate.Type::Service, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(22, ServiceOrderWorksheetTxt, DATABASE::"Service Order", MailTemplate.Type::Service, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(23, WorkOrderSubcontractorTxt, DATABASE::"Work Order", MailTemplate.Type::Service, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(24, SubcontractorNotFinishedTxt, DATABASE::Vendor, MailTemplate.Type::Service, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(25, SubcontractorInvoiceNotReceivedTxt, DATABASE::Vendor, MailTemplate.Type::Service, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(26, SubcontractorShiftedExpectedDatesTxt, DATABASE::"Work Order", MailTemplate.Type::Service, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(27, ServiceOrderDebriefTextTxt, DATABASE::"Debrief Work Order (Mobile)", MailTemplate.Type::Service, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(31, PlantOrderStatusTxt, DATABASE::"Plant Order", MailTemplate.Type::Plant, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(32, PlantTransportOrderTxt, DATABASE::"Plant Transport Order", MailTemplate.Type::Plant, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(33, PlantExitOrderTxt, DATABASE::"Exit Order", MailTemplate.Type::Plant, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(34, PlantOrderTxt, DATABASE::"Plant Order", MailTemplate.Type::Plant, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(35, ReminderTxt, DATABASE::"Issued Reminder Header", MailTemplate.Type::Reminder, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(36, SalesShipmentTxt, DATABASE::"Sales Shipment Header", MailTemplate.Type::Sales, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(41, MaintenanceAppointmentProposalTxt, DATABASE::"Service Order", MailTemplate.Type::Service, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(42, MaintenanceAppointmentTxt, DATABASE::"Service Order", MailTemplate.Type::Service, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(43, WorkOrderWorksheetTxt, DATABASE::"Work Order", MailTemplate.Type::Service, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(47, DPTLoginFBATxt, DATABASE::"Project Authority", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(48, DPTLoginADTxt, DATABASE::"Project Responsible Person", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(49, DPTLoginQuoteRequestTxt, DATABASE::"Vendors by Purchase Action", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(50, DPTQuoteReminderTxt, DATABASE::"Vendors by Purchase Action", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(51, ConfirmResetSPTPasswordTxt, DATABASE::"Serv.Port. User", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(52, ReceiveTemporarySPTPasswordTxt, DATABASE::"Serv.Port. User", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(53, ReceiveNewSPTPasswordTxt, DATABASE::"Serv.Port. User", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(54, ConfirmResetSCPTPasswordTxt, DATABASE::"Subcont.Port. User", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(55, ReceiveTemporarySCPTPasswordTxt, DATABASE::"Subcont.Port. User", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(56, ReceiveNewSCPTPasswordTxt, DATABASE::"Subcont.Port. User", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(59, DPTLoginServiceResponsiblePersonTxt, DATABASE::"Service Responsible Person DPT", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(60, DPTLoginServiceAuthorityTxt, DATABASE::"Service Authority DPT", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(61, DPTLoginProjectResponsiblePersonTxt, DATABASE::"Project Responsible Person", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(62, DPTLoginProjectAuthorityTxt, DATABASE::"Project Authority", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(67, PlantAppWelcomeTxt, DATABASE::"App User", MailTemplate.Type::Apps, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(68, FieldServiceAppWelcomeTxt, DATABASE::"App User GAP", MailTemplate.Type::Apps, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(69, SHInvitationMailTxt, DATABASE::"SH Workplan Participant", MailTemplate.Type::Other, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(70, PostedPurchaseReceiptTxt, DATABASE::"Purch. Rcpt. Header", MailTemplate.Type::Purchase, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(71, FieldServiceAppDemoUserTxt, DATABASE::"App User GAP", MailTemplate.Type::Apps, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(72, CivilConstructionAppWelcomeTxt, DATABASE::"App User", MailTemplate.Type::Apps, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(73, WarehouseAppWelcomeTxt, DATABASE::"App User", MailTemplate.Type::Apps, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(74, OnSiteAppWelcomeTxt, DATABASE::"App User GAP", MailTemplate.Type::Apps, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(75, CreateServiceCallTxt, DATABASE::"Service Call", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(80, ExtensionContractTxt, DATABASE::"Extension Contract", MailTemplate.Type::Project, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(81, OptionQuoteTxt, DATABASE::"Option Quote Header", MailTemplate.Type::Project, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(82, PlotTxt, DATABASE::Plot, MailTemplate.Type::Project, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(83, ProjectReportsTxt, DATABASE::Job, MailTemplate.Type::Project, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(84, PlantAppDemoUserTxt, DATABASE::"App User", MailTemplate.Type::Apps, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(90, WKADataRequestTxt, DATABASE::Vendor, MailTemplate.Type::Financial, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(100, ConsentNotificationTxt, DATABASE::Approver, MailTemplate.Type::Financial, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(110, HoursByEmployeeTxt, DATABASE::Employee, MailTemplate.Type::Employee, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(111, ReminderHoursEmployeeTxt, DATABASE::Employee, MailTemplate.Type::Employee, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(112, ReminderHoursManagerTxt, DATABASE::"Hour Accounting", MailTemplate.Type::Employee, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(113, ReminderHoursSiteManagerTxt, DATABASE::"Site Mngmnt. Hours Header", MailTemplate.Type::Employee, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(114, ReminderHoursSiteManagerManagerTxt, DATABASE::"Site Mngmnt. Hours Header", MailTemplate.Type::Employee, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(118, SignhostSignRequestTxt, DATABASE::"Signhost Signer", MailTemplate.Type::Employee, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(119, SignhostSignedDocumentTxt, DATABASE::"Signhost Signer", MailTemplate.Type::Employee, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(121, TransportRideTxt, DATABASE::"Plant Transport Ride", MailTemplate.Type::Plant, TableArr, TemplateArr, TypeArr);
      //FillMailTemplateArrays(130, DocketTxt, DATABASE::"Payment History Line", MailTemplate.Type::Financial, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(140, ChangeRequestCommunicationTxt, DATABASE::"Change Request", MailTemplate.Type::Service, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(141, ServiceCallCommunicationTxt, DATABASE::"Service Call", MailTemplate.Type::Service, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(150, PurchaseOrderReceiptTxt, DATABASE::"Purchase Header", MailTemplate.Type::Purchase, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(151, PurchaseReturnOrderTxt, DATABASE::"Purchase Header", MailTemplate.Type::Purchase, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(160, MailAppointmentConfirmationCallDirectTxt, DATABASE::"Service Order", MailTemplate.Type::Service, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(170, CivilConstructionAppSummaryTxt, DATABASE::"App User", MailTemplate.Type::Apps, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(180, HPTHRADemoUserTxt, DATABASE::"Hour Portal User", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(199, DPTQuoteDocUpLoadedTxt, DATABASE::"Vendors by Purchase Action", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(200, DPTQuoteUpdateTxt, DATABASE::"Vendors by Purchase Action", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(201, ServiceCallStatusChangeForCallingAccountTxt, DATABASE::"Service Call", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(202, WorkOrderChangeBySubcontractorForPlannerTxt, DATABASE::"Work Order", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(203, SubcontractorNewWorkTxt, DATABASE::"Work Order", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(204, NewServiceCallForCallingAccountTxt, DATABASE::"Service Call", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(205, CreateServiceCallForLocationContractManagerTxt, DATABASE::"Service Call", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);
      FillMailTemplateArrays(206, ServiceCallStatusChangeForLocationContractManagerTxt, DATABASE::"Service Call", MailTemplate.Type::Portals, TableArr, TemplateArr, TypeArr);

      FOR Counter := 1 TO ARRAYLEN(TemplateArr) DO BEGIN
        IF (TemplateArr[Counter] <> '') THEN BEGIN
          AddAndUpdateMailTemplate(Counter, TemplateArr[Counter], TypeArr[Counter], TableArr[Counter]);
        END;
      END;
    END;

    PROCEDURE OpenFieldPage@1100528303(MailTemplateTable@1210190000 : Record 11229453);
    VAR
      MailTemplateTableField@1000000001 : Record 11229455;
    BEGIN
      MailTemplateTableField.SETRANGE("Mail Template No.", MailTemplateTable."Mail Template No.");
      MailTemplateTableField.SETRANGE(Level, MailTemplateTable.Level);
      MailTemplateTableField.SETRANGE("Table No.", MailTemplateTable."Table No.");
      MailTemplateTableField.SETRANGE("Table Seq. No.", MailTemplateTable."Seq. No.");
      PAGE.RUNMODAL(0, MailTemplateTableField);
    END;

    PROCEDURE OpenFilterPage@1100528302(MailTemplateTable@1210190000 : Record 11229453);
    VAR
      MailTemplateTableFilter@1000000000 : Record 11229456;
    BEGIN
      IF (MailTemplateTable."Table No." = MailTemplateTable."Parent Table No.") THEN
        EXIT;
      MailTemplateTableFilter.SETRANGE("Mail Template No.", MailTemplateTable."Mail Template No.");
      MailTemplateTableFilter.SETRANGE(Level, MailTemplateTable.Level);
      MailTemplateTableFilter.SETRANGE("Table No.", MailTemplateTable."Table No.");
      MailTemplateTableFilter.SETRANGE("Table Seq. No.", MailTemplateTable."Seq. No.");
      PAGE.RUNMODAL(0, MailTemplateTableFilter);
    END;

    PROCEDURE OpenLinkPage@1100528301(MailTemplateTable@1000000002 : Record 11229453);
    VAR
      MailTemplateTableLink@1000000000 : Record 11229454;
    BEGIN
      IF (MailTemplateTable.Level = 1) THEN
        EXIT;
      MailTemplateTableLink.SETRANGE("Mail Template No.", MailTemplateTable."Mail Template No.");
      MailTemplateTableLink.SETRANGE(Level, MailTemplateTable.Level);
      MailTemplateTableLink.SETRANGE("Table No.", MailTemplateTable."Table No.");
      MailTemplateTableLink.SETRANGE("Table Seq. No.", MailTemplateTable."Seq. No.");
      PAGE.RUNMODAL(0, MailTemplateTableLink);
    END;

    PROCEDURE OpenTablePage@1100528350(MailTemplate@1210190000 : Record 11229450);
    VAR
      MailTemplateTable@1000000000 : Record 11229453;
    BEGIN
      MailTemplateTable.SETRANGE("Mail Template No.", MailTemplate."No.");
      PAGE.RUNMODAL(0, MailTemplateTable);
    END;

    PROCEDURE ShowLayout@1100528307(RecId@1100528302 : RecordID);
    VAR
      MailTemplate@1100525001 : Record 11229450;
      MailTemplateLayout@1100525000 : Record 11229451;
      TextEditor@1100528300 : Codeunit 11012001;
      MailTemplateLayoutSelector@1100525003 : Page 11126647;
      OStream@1100528304 : OutStream;
    BEGIN
      CLEAR(TempBlob.Blob);
      TempBlob.Blob.CREATEOUTSTREAM(OStream, TEXTENCODING::Windows);

      CASE RecId.TABLENO OF
        DATABASE::"Mail Template": BEGIN
          MailTemplate.GET(RecId);
          MailTemplateLayout.SETRANGE("Mail Template No.", MailTemplate."No.");
          SetGlobalVars(MailTemplate."No.");
          CASE (MailTemplateLayout.COUNT) OF
            0: ERROR("No...FoundTxt", MailTemplateLayout.TABLECAPTION);
            1: BEGIN
              MailTemplateLayout.FINDFIRST;
              OStream.WRITETEXT(GetMailTemplateText(MailTemplateLayout, TRUE, 0));
              COMMIT;
              TextEditor.BlobTextAssistEdit(TempBlob, FALSE);
             END;
            ELSE BEGIN
              MailTemplateLayoutSelector.SETTABLEVIEW(MailTemplateLayout);
              MailTemplateLayoutSelector.LOOKUPMODE(TRUE);
              IF (MailTemplateLayoutSelector.RUNMODAL = ACTION::LookupOK) THEN BEGIN
                MailTemplateLayoutSelector.GETRECORD(MailTemplateLayout);
                OStream.WRITETEXT(GetMailTemplateText(MailTemplateLayout, TRUE, 0));
                COMMIT;
                TextEditor.BlobTextAssistEdit(TempBlob, FALSE);
              END;
            END;
          END;
        END;
        DATABASE::"Mail Template Layout": BEGIN
          MailTemplateLayout.GET(RecId);
          SetGlobalVars(MailTemplateLayout."Mail Template No.");
          OStream.WRITETEXT(GetMailTemplateText(MailTemplateLayout, TRUE, 0));
          COMMIT;
          TextEditor.BlobTextAssistEdit(TempBlob, FALSE);
        END;
        ELSE ERROR("No...FoundTxt", RecId);
      END;
    END;

    PROCEDURE ShowMail@1100525004(RecId@1100528302 : RecordID);
    VAR
      MailTemplate@1100525002 : Record 11229450;
      MailTemplateLayout@1100525000 : Record 11229451;
      MailTemplateLayoutSelector@1100525001 : Page 11126647;
    BEGIN
      CASE RecId.TABLENO OF
        DATABASE::"Mail Template": BEGIN
          MailTemplate.GET(RecId);
          SetGlobalVars(MailTemplate."No.");
          MailTemplateLayout.SETRANGE("Mail Template No.", MailTemplate."No.");
          CASE (MailTemplateLayout.COUNT) OF
            0: ERROR("No...FoundTxt", MailTemplateLayout.TABLECAPTION);
            1: BEGIN
              MailTemplateLayout.FINDFIRST;
              ShowMailLocal(MailTemplate, MailTemplateLayout."Language Code");
             END;
            ELSE BEGIN
              MailTemplateLayoutSelector.SETTABLEVIEW(MailTemplateLayout);
              MailTemplateLayoutSelector.LOOKUPMODE(TRUE);
              IF (MailTemplateLayoutSelector.RUNMODAL = ACTION::LookupOK) THEN BEGIN
                MailTemplateLayoutSelector.GETRECORD(MailTemplateLayout);
                ShowMailLocal(MailTemplate, MailTemplateLayout."Language Code");
              END;
            END;
          END;
        END;
        DATABASE::"Mail Template Layout": BEGIN
          MailTemplateLayout.GET(RecId);
          SetGlobalVars(MailTemplateLayout."Mail Template No.");
          GetMailTemplate(MailTemplate, MailTemplateLayout."Mail Template No.", '');
          ShowMailLocal(MailTemplate, MailTemplateLayout."Language Code");
        END;
        ELSE ERROR("No...FoundTxt", RecId);
      END;
    END;

    PROCEDURE SetLanguageID@1100528346(ILanguageID@1100528300 : Integer);
    BEGIN
      LanguageId := ILanguageID;
    END;

    PROCEDURE TestFilter@1100528300(TableNo@1000000000 : Integer;FieldNo@1000000001 : Integer;VAR Text@1000000005 : Text[1024]);
    VAR
      Field@1000000004 : Record 2000000041;
      TableRef@1000000002 : RecordRef;
      FieldRef@1000000003 : FieldRef;
      Boolean@1000000006 : Boolean;
    BEGIN
      Field.GET(TableNo,FieldNo);

      CASE Field.Type OF
        Field.Type::Boolean :
          IF NOT EVALUATE(Boolean,Text) THEN
            ERROR(FieldNotAllowedTxt, Field.Type, YesNoTxt);
        Field.Type::Option :
          BEGIN
            TableRef.OPEN(TableNo);
            FieldRef := TableRef.FIELD(FieldNo);
            FieldRef.SETFILTER(Text);
            TableRef.CLOSE;
          END;
      END;
    END;

    LOCAL PROCEDURE "---Locals---"@1100528304();
    BEGIN
    END;

    LOCAL PROCEDURE AddAndUpdateFunctionName@1100528325(FunctionNameIn@1100528300 : Text;OutputType@1100528302 : Option);
    VAR
      MailTemplateFunction@1100528301 : Record 11229464;
      FunctionName@1100528303 : Text;
    BEGIN
      FunctionName := DELCHR(FunctionNameIn, '<=>', DelCharString);
      IF (NOT MailTemplateFunction.GET(FunctionName)) THEN BEGIN
        MailTemplateFunction.INIT;
        MailTemplateFunction.Name := FunctionName;
        MailTemplateFunction.INSERT;
      END;

      MailTemplateFunction.Description := FunctionNameIn;
      MailTemplateFunction."Codeunit Id" := CODEUNIT::"Mail Template Functions";
      MailTemplateFunction."Is Standard" := TRUE;
      MailTemplateFunction."Output Type" := OutputType;
      MailTemplateFunction.MODIFY;
    END;

    LOCAL PROCEDURE AddAndUpdateMailTemplate@1100528329(Counter@1100528303 : Integer;TemplateDescription@1100528300 : Text;TemplateType@1100528302 : Option;SourceTable@1100528304 : Integer);
    VAR
      MailTemplate@1100528301 : Record 11229450;
    BEGIN
      IF (NOT GetMailTemplate(MailTemplate, Counter, '')) THEN BEGIN
        MailTemplate.INIT;
        MailTemplate."No." := Counter;
        MailTemplate.INSERT;
      END;

      MailTemplate.SETRANGE("No.", Counter);
      IF (NOT MailTemplate.FINDSET(TRUE)) THEN
        EXIT;

      REPEAT
        MailTemplate.Name := DELCHR(TemplateDescription, '<=>', DelCharString);
        MailTemplate.Description := TemplateDescription;
        MailTemplate.Type := TemplateType;
        MailTemplate."Source Table No." := SourceTable;
        MailTemplate."Mail is Html" := TRUE;
        MailTemplate.MODIFY;
        MailTemplate.UpdateBaseTable;
      UNTIL (MailTemplate.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckMailTemplate_Local@1100528319(MailTemplateNo@1100528300 : Integer);
    VAR
      MailTemplate@1100528301 : Record 11229450;
    BEGIN
      MailTemplate.SETRANGE("No.", MailTemplateNo);
      IF (NOT MailTemplate.FINDSET) THEN BEGIN
        TempErrorMessage.LogMessage(MailTemplate, MailTemplate.FIELDNO("No."), 0, STRSUBSTNO(NotExistTxt, MailTemplateNo));
        EXIT;
      END;

      REPEAT
        IF (MailTemplate.From = '') THEN
          TempErrorMessage.LogMessage(MailTemplate, MailTemplate.FIELDNO(From), 0, FieldNotFilledTxt);
      UNTIL (MailTemplate.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckMailTemplateLayout@1100528314(MailTemplateNo@1100528300 : Integer);
    VAR
      MailTemplate@1100528309 : Record 11229450;
      MailTemplateLayout@1100528306 : Record 11229451;
      MailTemplateLayoutLine@1100528301 : Record 11229457;
      MailTemplateTableField@1100528302 : Record 11229455;
      ElementName@1100528303 : Text;
      TextLine@1100528308 : Text;
      PosBegin@1100528304 : Integer;
      PosEnd@1100528305 : Integer;
      StartPos@1100528307 : Integer;
    BEGIN
      MailTemplateLayoutLine.SETRANGE("Mail Template No.", MailTemplateNo);
      IF (NOT MailTemplateLayoutLine.FINDSET) THEN BEGIN
        GetMailTemplate(MailTemplate, MailTemplateNo, '');
        TempErrorMessage.LogMessage(MailTemplate, 0, 0, STRSUBSTNO("No...FoundTxt", MailTemplateLayout.TABLECAPTION));
        EXIT;
      END;

      REPEAT
        TextLine := MailTemplateLayoutLine."Text Line";
        PosBegin := STRPOS(TextLine, ElementPrefixPreTxt);
        WHILE (PosBegin > 0) DO BEGIN
          PosEnd := STRPOS(TextLine, ElementPrefixPostTxt);
          StartPos := PosBegin + STRLEN(ElementPrefixPreTxt);
          ElementName := COPYSTR(TextLine, StartPos, PosEnd - StartPos);

          MailTemplateTableField.SETRANGE("Mail Template No.", MailTemplateNo);
          MailTemplateTableField.SETFILTER("Element Name", '@'+ElementName);
          IF (MailTemplateTableField.ISEMPTY) THEN
            TempErrorMessage.LogMessage(MailTemplateLayoutLine, MailTemplateLayoutLine.FIELDNO("Text Line"), 0,
              STRSUBSTNO(NotFoundForTxt, MailTemplateTableField.TABLECAPTION, MailTemplateTableField.FIELDCAPTION("Element Name"),
                MailTemplateLayoutLine.TABLECAPTION, MailTemplateLayoutLine.FIELDCAPTION("Text Line"), MailTemplateLayoutLine."Text Line"));
          TextLine := COPYSTR(TextLine, PosEnd + STRLEN(ElementPrefixPostTxt));
          PosBegin := STRPOS(TextLine, ElementPrefixPreTxt);
        END;
      UNTIL (MailTemplateLayoutLine.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckMailTemplateTable@1100528312(MailTemplateNo@1100528300 : Integer);
    VAR
      MailTemplate@1100528302 : Record 11229450;
      MailTemplateTable@1100528301 : Record 11229453;
      MailTemplateTable2@1100528303 : Record 11229453;
    BEGIN
      MailTemplateTable.SETRANGE("Mail Template No.", MailTemplateNo);
      IF (NOT MailTemplateTable.FINDSET) THEN
        EXIT;
      IF (NOT GetMailTemplate(MailTemplate, MailTemplateNo, '')) THEN
        TempErrorMessage.LogMessage(MailTemplate, MailTemplate.FIELDNO("No."), 0, STRSUBSTNO(NotExistTxt, MailTemplateNo));

      MailTemplateTable.SETRANGE("Mail Template No.", MailTemplate."No.");
      IF (NOT MailTemplateTable.FINDSET) THEN
        TempErrorMessage.LogMessage(MailTemplateTable, MailTemplateTable.FIELDNO("Table No."), 0, STRSUBSTNO(NoBaseFoundTxt, MailTemplateTable."Table Caption"));

      REPEAT
        IF (MailTemplateTable.Level = 1) THEN BEGIN
          IF (MailTemplateTable."Table No." <> MailTemplateTable."Parent Table No.") THEN
            CheckMailTemplateTableFilter(MailTemplateTable);
        END ELSE
          CheckMailTemplateTableLink(MailTemplateTable);

        MailTemplateTable2.SETRANGE("Mail Template No.", MailTemplateTable."Mail Template No.");
        MailTemplateTable2.SETFILTER("Seq. No.", '<>%1', MailTemplateTable."Seq. No.");
        MailTemplateTable2.SETRANGE("Element Prefix", MailTemplateTable."Element Prefix");
        IF (MailTemplateTable2.FINDFIRST) THEN
          TempErrorMessage.LogMessage(MailTemplateTable, MailTemplateTable.FIELDNO("Element Prefix"), 0,
            STRSUBSTNO(DuplicateErrorTxt, MailTemplateTable."Element Prefix"));
      UNTIL (MailTemplateTable.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckMailTemplateTableField@1100528311(MailTemplateNo@1100528300 : Integer);
    VAR
      MailTemplateTableField@1100528301 : Record 11229455;
      MailTemplateTableField2@1100528302 : Record 11229455;
      Field@1100528303 : Record 2000000041;
    BEGIN
      MailTemplateTableField.SETRANGE("Mail Template No.", MailTemplateNo);
      MailTemplateTableField.SETRANGE(Type, MailTemplateTableField.Type::Value);
      IF (NOT MailTemplateTableField.FINDSET) THEN
        EXIT;

      REPEAT
        MailTemplateTableField2.SETRANGE("Mail Template No.", MailTemplateTableField."Mail Template No.");
        MailTemplateTableField2.SETFILTER("Seq. No.", '<>%1', MailTemplateTableField."Seq. No.");
        MailTemplateTableField2.SETRANGE(Type, MailTemplateTableField.Type);
        MailTemplateTableField2.SETRANGE("Element Name", MailTemplateTableField."Element Name");
        IF (MailTemplateTableField2.FINDFIRST) THEN
          TempErrorMessage.LogMessage(MailTemplateTableField, MailTemplateTableField.FIELDNO("Element Name"), 0,
            STRSUBSTNO(DuplicateErrorTxt, MailTemplateTableField."Element Name"));

        IF (MailTemplateTableField."Field No." <> 0) THEN BEGIN
          Field.GET(MailTemplateTableField."Table No.", MailTemplateTableField."Field No.");
          CASE Field.Type OF
            Field.Type::Binary,
            Field.Type::BLOB,
            Field.Type::DateFormula,
            Field.Type::Duration,
            Field.Type::GUID,
            Field.Type::Media,
            Field.Type::MediaSet,
            Field.Type::OemCode,
            Field.Type::OemText,
            Field.Type::RecordID,
            Field.Type::TableFilter:
              TempErrorMessage.LogMessage(MailTemplateTableField, MailTemplateTableField.FIELDNO("Field No."), 0,
                STRSUBSTNO(DataTypeNotSupportedTxt, Field.Type));
          END;
        END ELSE BEGIN
          IF (MailTemplateTableField."Function Name" = '') THEN
            TempErrorMessage.LogMessage(MailTemplateTableField, MailTemplateTableField.FIELDNO("Function Name"), 0, FieldNotFilledTxt);
        END;
      UNTIL (MailTemplateTableField.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckMailTemplateTableFilter@1100528330(MailTemplateTable@1100528301 : Record 11229453) : Boolean;
    VAR
      MailTemplateTableFilter@1100528300 : Record 11229456;
    BEGIN
      MailTemplateTableFilter.SETRANGE("Mail Template No.", MailTemplateTable."Mail Template No.");
      MailTemplateTableFilter.SETRANGE(Level, MailTemplateTable.Level);
      MailTemplateTableFilter.SETRANGE("Table No.", MailTemplateTable."Table No.");
      MailTemplateTableFilter.SETRANGE("Table Seq. No.", MailTemplateTable."Seq. No.");
      IF (NOT MailTemplateTableFilter.FINDSET) THEN BEGIN
        TempErrorMessage.LogMessage(MailTemplateTable, MailTemplateTable.FIELDNO("Table No."), 0, STRSUBSTNO(NoBaseFoundTxt, MailTemplateTableFilter.TABLECAPTION));
        EXIT(FALSE);
      END;

      {
      //rffu
      REPEAT
        IF (MailTemplateTableField."Codeunit Id" = 0) OR (MailTemplateTableField."Codeunit Function" = '') THEN
          TempErrorMessage.LogMessage(MailTemplateTableField, MailTemplateTableField.FIELDNO("Codeunit Function"), 0, FieldNotFilledTxt);
      UNTIL(MailTemplateTableFilter.NEXT = 0);
      }
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckMailTemplateTableLink@1100528331(MailTemplateTable@1100528300 : Record 11229453);
    VAR
      MailTemplateFunction@1100528302 : Record 11229464;
      MailTemplateTableLink@1100528301 : Record 11229454;
    BEGIN
      MailTemplateTableLink.SETRANGE("Mail Template No.", MailTemplateTable."Mail Template No.");
      MailTemplateTableLink.SETRANGE(Level, MailTemplateTable.Level);
      MailTemplateTableLink.SETRANGE("Table No.", MailTemplateTable."Table No.");
      MailTemplateTableLink.SETRANGE("Table Seq. No.", MailTemplateTable."Seq. No.");
      IF (NOT MailTemplateTableLink.FINDSET) THEN BEGIN
        IF (NOT CheckMailTemplateTableFilter(MailTemplateTable)) THEN
          TempErrorMessage.LogMessage(MailTemplateTable, MailTemplateTable.FIELDNO("Table No."), 0, STRSUBSTNO(NoBaseFoundTxt, MailTemplateTableLink.TABLECAPTION));
        EXIT;
      END;

      REPEAT
        IF (MailTemplateTableLink."Reference Field No." = 0) THEN  BEGIN
          IF (MailTemplateTableLink."Function Name" = '') THEN
            TempErrorMessage.LogMessage(MailTemplateTableLink, MailTemplateTableLink.FIELDNO("Function Name"), 0, FieldNotFilledTxt)
          ELSE BEGIN
            MailTemplateFunction.GET(MailTemplateTableLink."Function Name");
            IF (MailTemplateFunction."Output Type" = MailTemplateFunction."Output Type"::BLOB) THEN
              TempErrorMessage.LogMessage(MailTemplateTableLink, MailTemplateTableLink.FIELDNO("Function Name"), 0, DataTypeNotSupportedTxt)
          END;
        END;
      UNTIL (MailTemplateTableLink.NEXT = 0);
    END;

    LOCAL PROCEDURE FillMailTemplateArrays@1100528334(TemplateNo@1100528300 : Integer;TemplateName@1100528301 : Text;TemplateTable@1100528306 : Integer;TemplateType@1100528302 : Option;VAR TableArr@1100528303 : ARRAY [1000] OF Integer;VAR TemplateArr@1100528304 : ARRAY [1000] OF Text;VAR TypeArr@1100528305 : ARRAY [1000] OF Integer);
    BEGIN
      TableArr[TemplateNo] := TemplateTable;
      TemplateArr[TemplateNo] := TemplateName;
      TypeArr[TemplateNo] := TemplateType;
    END;

    LOCAL PROCEDURE GetLanguageId@1100528360(LanguageCode@1100528301 : Code[10]) : Integer;
    VAR
      Language@1100528300 : Record 8;
    BEGIN
      IF (NOT Language.GET(LanguageCode)) THEN
        Language.INIT;
      IF (Language."Windows Language ID" = 0) THEN
        Language."Windows Language ID" := GLOBALLANGUAGE;
      EXIT(Language."Windows Language ID");
    END;

    LOCAL PROCEDURE GetMailTemplateText@1100528306(MailTemplateLayout@1100528300 : Record 11229451;SetTypeText@1100528306 : Boolean;LayoutType@1100528307 : Option) : Text;
    VAR
      MailTemplateLayoutLine@1100528301 : Record 11229457;
      FirstBody@1100528302 : Boolean;
      FirstSignature@1100528303 : Boolean;
      FirstSubject@1100528304 : Boolean;
      MailText@1100528305 : Text;
    BEGIN
      MailTemplateLayoutLine.SETRANGE("Mail Template No.", MailTemplateLayout."Mail Template No.");
      MailTemplateLayoutLine.SETRANGE("Language Code", MailTemplateLayout."Language Code");
      IF (LayoutType <> 0) THEN
        MailTemplateLayoutLine.SETRANGE("Layout Type", LayoutType);
      IF (NOT MailTemplateLayoutLine.FINDSET) THEN
        EXIT;
      FirstBody := TRUE;
      FirstSignature := TRUE;
      FirstSubject := TRUE;

      REPEAT
        CASE MailTemplateLayoutLine."Layout Type" OF
          MailTemplateLayoutLine."Layout Type"::Subject: BEGIN
            IF (FirstSubject AND SetTypeText) THEN
              MailText += STRSUBSTNO('%1%2', SubjectTxt, CRLF);
            FirstSubject := FALSE;
          END;
          MailTemplateLayoutLine."Layout Type"::Signature: BEGIN
            IF (FirstSignature AND SetTypeText) THEN
              MailText += STRSUBSTNO('%2%1%2', SignatureTxt, CRLF);
            FirstSignature := FALSE;
          END;
          ELSE BEGIN
            IF (FirstBody AND SetTypeText) THEN
              MailText += STRSUBSTNO('%2%1%2', BodyTxt, CRLF);
            FirstBody := FALSE;
          END;
        END;

        MailText += MailTemplateLayoutLine."Text Line";
        IF (MailTemplateLayoutLine."Line Break") THEN
          MailText += STRSUBSTNO('%1', CRLF)
        ELSE
          MailText += STRSUBSTNO('%1', ' ');
      UNTIL (MailTemplateLayoutLine.NEXT = 0);
      EXIT(MailText);
    END;

    LOCAL PROCEDURE FormatDecimal@1100528343(DecimalValue@1100528300 : Decimal) : Text;
    BEGIN
      EXIT(FORMAT(DecimalValue,0,'<Precision,2:><Standard format,0>'));
    END;

    LOCAL PROCEDURE FormatTime@1100528345(TimeValue@1100528300 : Time) : Text;
    BEGIN
      IF(LanguageId = 1043) THEN
        EXIT(FORMAT(TimeValue, 0, '<Hours24>:<Minutes,2>:<Seconds,2>'));
      EXIT(FORMAT(TimeValue));
    END;

    LOCAL PROCEDURE LoopMailTemplateTable@1100528324(MailTemplateNoIn@1100528300 : Integer;LevelIn@1100528301 : Integer;TableNoIn@1100528302 : Integer;ElementPrefixIn@1100528304 : Text;RecRefIn@1100528305 : RecordRef);
    VAR
      MailTemplateTable@1100528303 : Record 11229453;
      MailTemplateTableFilter@1100528308 : Record 11229456;
      MailTemplateTableLink@1100528307 : Record 11229454;
      RecRef@1100528306 : RecordRef;
    BEGIN
      MailTemplateTable.SETRANGE("Mail Template No.", MailTemplateNoIn);
      MailTemplateTable.SETRANGE(Level, LevelIn);
      IF (LevelIn > 1) THEN BEGIN
        MailTemplateTable.SETRANGE("Parent Table No.", TableNoIn);
        MailTemplateTable.SETRANGE("Parent Element Prefix", ElementPrefixIn);
      END;
      IF (NOT MailTemplateTable.FINDSET) THEN
        EXIT;

      REPEAT
        IF (MailTemplateTable.Level = 1) THEN BEGIN
          IF (MailTemplateTable."Table No." = MailTemplateTable."Parent Table No.") THEN BEGIN
            RecRef := RecRefIn;
            LoopMailTemplateTable(MailTemplateNoIn, MailTemplateTable.Level + 1, MailTemplateTable."Table No.", MailTemplateTable."Element Prefix", RecRef);
          END ELSE BEGIN
            RecRef.OPEN(MailTemplateTable."Table No.");
            SetFilter(MailTemplateTable, RecRef, RecRefIn);
            SetLink(MailTemplateTable, RecRef, RecRefIn);
            IF (NOT RecRef.FINDFIRST) THEN
              RecRef.INIT;
            LoopMailTemplateTable(MailTemplateNoIn, MailTemplateTable.Level + 1, MailTemplateTable."Table No.", MailTemplateTable."Element Prefix", RecRef);
          END;
        END ELSE BEGIN
          RecRef.OPEN(MailTemplateTable."Table No.");
          SetFilter(MailTemplateTable, RecRef, RecRefIn);
          SetLink(MailTemplateTable, RecRef, RecRefIn);
          IF (NOT RecRef.FINDFIRST) THEN
            RecRef.INIT;
          LoopMailTemplateTable(MailTemplateNoIn, MailTemplateTable.Level + 1, MailTemplateTable."Table No.", MailTemplateTable."Element Prefix", RecRef);
        END;
        WriteElementValues(MailTemplateTable, RecRef);
        RecRef.CLOSE;
      UNTIL (MailTemplateTable.NEXT = 0);
    END;

    LOCAL PROCEDURE RunCodeunitFunctionField@1100528356(RecId@1100528300 : RecordID;MailTemplateTableField@1100528301 : Record 11229455;VAR GenericTempTableLocal@1100528303 : TEMPORARY Record 11020579);
    VAR
      MailTemplateFunction@1100528302 : Record 11229464;
      IStream@1100528304 : InStream;
      TextLine@1100528305 : Text;
    BEGIN
      MailTemplateFunction.GetRecord(MailTemplateTableField."Function Name");
      GenericTempTableLocal.INIT;
      GenericTempTableLocal.RecId1 := RecId;
      GenericTempTableLocal.Code1 := MailTemplateTableField."Function Name";
      GenericTempTableLocal.Int1 := MailTemplateFunction."Output Type";
      GenericTempTableLocal.Int2 := LanguageId;
      COMMIT;
      IF (NOT CODEUNIT.RUN(MailTemplateFunction."Codeunit Id", GenericTempTableLocal)) THEN
        ERROR(GETLASTERRORTEXT);
    END;

    LOCAL PROCEDURE RunCodeunitFunctionLink@1100528364(MailTemplateTableLink@1100528300 : Record 11229454;VAR RefRecRef@1100528306 : RecordRef) : Text;
    VAR
      MailTemplateFunction@1100528303 : Record 11229464;
      GenericTempTableLocal@1100528302 : Record 11020579;
    BEGIN
      MailTemplateFunction.GetRecord(MailTemplateTableLink."Function Name");
      GenericTempTableLocal.INIT;
      GenericTempTableLocal.RecId1 := RefRecRef.RECORDID;
      GenericTempTableLocal.Code1 := MailTemplateTableLink."Function Name";
      GenericTempTableLocal.Int1 := MailTemplateFunction."Output Type";
      GenericTempTableLocal.Int2 := LanguageId;
      COMMIT;
      IF (CODEUNIT.RUN(MailTemplateFunction."Codeunit Id", GenericTempTableLocal)) THEN
        EXIT(GenericTempTableLocal.Text1);
      ERROR(GETLASTERRORTEXT);
    END;

    LOCAL PROCEDURE SetFilter@1100528327(MailTemplateTable@1100528300 : Record 11229453;VAR RecRef@1100528301 : RecordRef;RefRecRef@1100528304 : RecordRef);
    VAR
      MailTemplateTableFilter@1100528302 : Record 11229456;
      FldRef@1100528303 : FieldRef;
    BEGIN
      MailTemplateTableFilter.SETRANGE("Mail Template No.", MailTemplateTable."Mail Template No.");
      MailTemplateTableFilter.SETRANGE(Level, MailTemplateTable.Level);
      MailTemplateTableFilter.SETRANGE("Table No.", MailTemplateTable."Table No.");
      MailTemplateTableFilter.SETRANGE("Table Seq. No.", MailTemplateTable."Seq. No.");
      IF (NOT MailTemplateTableFilter.FINDSET) THEN
        EXIT;

      REPEAT
        FldRef := RecRef.FIELD(MailTemplateTableFilter."Field No.");
        CASE UPPERCASE(MailTemplateTableFilter.Filter) OF
          '%COMPANYNAME%':FldRef.SETRANGE(COMPANYNAME);
          '%SID%':FldRef.SETRANGE(SID);
          '%TODAY%':FldRef.SETRANGE(TODAY);
          '%USERID%':FldRef.SETRANGE(USERID);
          '%RECID%': FldRef.SETRANGE(RefRecRef.RECORDID);
          ELSE FldRef.SETFILTER(MailTemplateTableFilter.Filter);
        END;
      UNTIL (MailTemplateTableFilter.NEXT = 0);
    END;

    LOCAL PROCEDURE SetGlobalVars@1100528308(MailTemplateNo@1100525000 : Integer);
    VAR
      MailTemplate@1100525001 : Record 11229450;
      MailTemplateManagement@1100525002 : Codeunit 11012622;
    BEGIN
      MailTemplateManagement.GetMailTemplate(MailTemplate, MailTemplateNo, '');
      IF (MailTemplate."Mail is Html") THEN
        CRLF := '<br>'
      ELSE
        CRLF := StringFunctions.CarriageReturnLineFeed;
      GenericTempTable.DELETEALL;
      TempErrorMessage.DELETEALL;
      DelCharString := ' -.,()/\%&:';
    END;

    LOCAL PROCEDURE SetLink@1100528328(MailTemplateTable@1100528301 : Record 11229453;VAR RecRef@1100528300 : RecordRef;RefRecRef@1100528302 : RecordRef);
    VAR
      MailTemplateTableLink@1100528303 : Record 11229454;
      FldRef@1100528304 : FieldRef;
      RefFldRef@1100528305 : FieldRef;
      RefFldRefType@1100528307 : Variant;
      RefFldRefText@1100528306 : Text;
    BEGIN
      MailTemplateTableLink.SETRANGE("Mail Template No.", MailTemplateTable."Mail Template No.");
      MailTemplateTableLink.SETRANGE(Level, MailTemplateTable.Level);
      MailTemplateTableLink.SETRANGE("Table No.", MailTemplateTable."Table No.");
      MailTemplateTableLink.SETRANGE("Table Seq. No.", MailTemplateTable."Seq. No.");
      IF (NOT MailTemplateTableLink.FINDSET) THEN
        EXIT;

      REPEAT
        FldRef := RecRef.FIELD(MailTemplateTableLink."Field No.");
        IF (MailTemplateTableLink."Function Name" <> '') THEN BEGIN
          FldRef.SETRANGE(RunCodeunitFunctionLink(MailTemplateTableLink, RefRecRef));
        END ELSE BEGIN
          RefFldRef := RefRecRef.FIELD(MailTemplateTableLink."Reference Field No.");
          FldRef.SETRANGE(RefFldRef.VALUE);
        END;
      UNTIL (MailTemplateTableLink.NEXT = 0);
    END;

    LOCAL PROCEDURE ShowMailLocal@1100525000(MailTemplate@1100528302 : Record 11229450;LanguageCode@1100528301 : Code[20]);
    VAR
      AppUser@1100528314 : Record 11130031;
      AppUserGAP@1100528315 : Record 11124975;
      DebriefWorkOrderMobile@1100528313 : Record 11012679;
      MailTemplateLayout@1100528306 : Record 11229451;
      ServPortUser@1100528311 : Record 11126063;
      SubcontPortUser@1100528310 : Record 11126401;
      WorkOrder@1100528312 : Record 11229279;
      VendorsbyPurchaseAction@1100528309 : Record 11012068;
      TextEditor@1100528300 : Codeunit 11012001;
      OStream@1100528304 : OutStream;
      TableVariant@1100528303 : Variant;
      RecRef@1100528305 : RecordRef;
      MailSubjectText@1100528307 : Text;
      MailBodyText@1100528308 : Text;
    BEGIN
      MailTemplate.TESTFIELD("Source Table No.");
      RecRef.OPEN(MailTemplate."Source Table No.");
      TableVariant := RecRef;
      RecRef.CLOSE;
      CASE MailTemplate."Source Table No." OF
        DATABASE::"Serv.Port. User": BEGIN
          IF (PAGE.RUNMODAL(PAGE::"Serv.Port. User SF", ServPortUser) <> ACTION::OK) THEN
            EXIT;
          TableVariant := ServPortUser;
        END;
        DATABASE::"Subcont.Port. User": BEGIN
          IF (PAGE.RUNMODAL(PAGE::"Subcont.Port. Users", SubcontPortUser) <> ACTION::LookupOK) THEN
            EXIT;
          TableVariant := SubcontPortUser;
        END;
        DATABASE::"Work Order": BEGIN
          WorkOrder.SETRANGE("Source Company", COMPANYNAME);
          IF (PAGE.RUNMODAL(0, WorkOrder) <> ACTION::LookupOK) THEN
            EXIT;
          TableVariant := WorkOrder;
        END;
        DATABASE::"Vendors by Purchase Action": BEGIN
          VendorsbyPurchaseAction.SETRANGE(Source, VendorsbyPurchaseAction.Source::Project);
          IF (PAGE.RUNMODAL(PAGE::"Vendors by Purchase Action", VendorsbyPurchaseAction) <> ACTION::LookupOK) THEN
            EXIT;
          TableVariant := VendorsbyPurchaseAction;
        END;
        DATABASE::"Debrief Work Order (Mobile)": BEGIN
          IF (PAGE.RUNMODAL(PAGE::"Debrief Work Order (Mobile)", DebriefWorkOrderMobile) <> ACTION::LookupOK) THEN
            EXIT;
          TableVariant := DebriefWorkOrderMobile;
        END;
        DATABASE::"Hour Portal User": BEGIN
          IF (PAGE.RUNMODAL(PAGE::"Company Information", TableVariant) <> ACTION::LookupOK) THEN
            EXIT;
          TableVariant := TableVariant;
        END;
        DATABASE::"App User": BEGIN
          IF (PAGE.RUNMODAL(PAGE::"App Users", AppUser) <> ACTION::LookupOK) THEN
            EXIT;
          TableVariant := AppUser;
        END;
        DATABASE::"App User GAP": BEGIN
          IF (PAGE.RUNMODAL(PAGE::"GAP App Users", AppUserGAP) <> ACTION::LookupOK) THEN
            EXIT;
          TableVariant := AppUserGAP;
        END;
        ELSE
          IF (PAGE.RUNMODAL(0, TableVariant) <> ACTION::LookupOK) THEN
            EXIT;
      END;
      DataTypeManagement.GetRecordRef(TableVariant, RecRef);
      TableVariant := RecRef.RECORDID;
      GetLayoutTextSubstitutedSubjectAndTotalBody(MailTemplate."No.", LanguageCode, TableVariant, MailSubjectText, MailBodyText);

      MailTemplateLayout.GET(MailTemplate."No.", LanguageCode);
      SetGlobalVars(MailTemplate."No.");
      CLEAR(TempBlob.Blob);
      TempBlob.Blob.CREATEOUTSTREAM(OStream, TEXTENCODING::Windows);
      OStream.WRITETEXT(STRSUBSTNO('%1%3%2', MailSubjectText, MailBodyText, CRLF));
      COMMIT;
      TextEditor.BlobTextAssistEdit(TempBlob, FALSE);
    END;

    LOCAL PROCEDURE SubstituteText@1100528313(MailText@1100528301 : Text) : Text;
    VAR
      ReplaceString@1100528300 : Boolean;
      Pos@1100528302 : Integer;
      IStream@1100528303 : InStream;
      OStream@1100528305 : OutStream;
      TextLine@1100528304 : Text;
    BEGIN
      IF (NOT GenericTempTable.FINDFIRST) THEN
        EXIT(MailText);

      REPEAT
        IF (GenericTempTable.Int1 = 1) THEN BEGIN //Value is stored in Blob1
          GenericTempTable.CALCFIELDS(Blob1);
          GenericTempTable.Blob1.CREATEINSTREAM(IStream);
          IStream.READ(TextLine);
          MailText := StringFunctions.ReplaceString2(MailText, GenericTempTable.Text1, TextLine, FALSE);
        END ELSE //Value is stored in Text2
          MailText := StringFunctions.ReplaceString2(MailText, GenericTempTable.Text1, GenericTempTable.Text2, FALSE);
      UNTIL (GenericTempTable.NEXT = 0);
      EXIT(MailText);
    END;

    LOCAL PROCEDURE WriteElementValues@1100528326(MailTemplateTable@1100528300 : Record 11229453;RecRef@1100528301 : RecordRef);
    VAR
      GenericTempTableLocal@1100528307 : TEMPORARY Record 11020579;
      MailTemplateFunction@1100528306 : Record 11229464;
      MailTemplateTableField@1100528302 : Record 11229455;
      Field@1100528304 : Record 2000000041;
      TableFieldTranslationMgt@1100528305 : Codeunit 11020235;
      FldRef@1100528303 : FieldRef;
    BEGIN
      MailTemplateTableField.SETRANGE("Mail Template No.", MailTemplateTable."Mail Template No.");
      MailTemplateTableField.SETRANGE(Level, MailTemplateTable.Level);
      MailTemplateTableField.SETRANGE("Table No.", MailTemplateTable."Table No.");
      MailTemplateTableField.SETRANGE("Table Seq. No.", MailTemplateTable."Seq. No.");
      IF (NOT MailTemplateTableField.FINDSET) THEN
        EXIT;

      REPEAT
        GenericTempTable.INIT;
        GenericTempTable.Text1 := GetElementName(MailTemplateTableField."Element Name");
        IF (MailTemplateTableField."Field No." <> 0) THEN
          FldRef := RecRef.FIELD(MailTemplateTableField."Field No.");

        CASE MailTemplateTableField.Type OF
          MailTemplateTableField.Type::Value: BEGIN
            IF (MailTemplateTableField."Function Name" <> '') THEN BEGIN
              MailTemplateFunction.GET(MailTemplateTableField."Function Name");
              GenericTempTable.Int1 := MailTemplateFunction."Output Type";
              RunCodeunitFunctionField(RecRef.RECORDID, MailTemplateTableField, GenericTempTableLocal);
              IF (MailTemplateFunction."Output Type" = MailTemplateFunction."Output Type"::BLOB) THEN
                GenericTempTable.Blob1 := GenericTempTableLocal.Blob1
              ELSE
                GenericTempTable.Text2 := GenericTempTableLocal.Text1;
            END ELSE BEGIN
              Field.GET(MailTemplateTableField."Table No.", MailTemplateTableField."Field No.");
              IF (Field.Class = Field.Class::FlowField) THEN
                FldRef.CALCFIELD;

              CASE Field.Type OF
                Field.Type::BigInteger,
                Field.Type::Boolean,
                Field.Type::Decimal,
                Field.Type::Integer,
                Field.Type::Date,
                Field.Type::DateTime,
                Field.Type::Time:
                  GenericTempTable.Text2 := FORMAT(FldRef.VALUE);
                Field.Type::Option: BEGIN
                  GenericTempTableLocal.Int1 := FldRef.VALUE;
                  GenericTempTable.Text2 :=
                    TableFieldTranslationMgt.GetFieldTranslationCurrentLanguage(MailTemplateTableField."Table No.",
                      MailTemplateTableField."Field No.", GenericTempTableLocal.Int1);
                  IF (GenericTempTable.Text2 = TableFieldTranslationMgt.GetBlankOptionTxt) THEN
                    GenericTempTable.Text2 := ''
                  ELSE
                    IF (GenericTempTable.Text2 = '') THEN
                      GenericTempTable.Text2 := FORMAT(FldRef.VALUE);
                END;
                ELSE
                  GenericTempTable.Text2 := FldRef.VALUE;
              END;
            END;
          END;
          MailTemplateTableField.Type::FieldCaption:
            GenericTempTable.Text2 := FldRef.CAPTION;
          MailTemplateTableField.Type::TableCaption:
            GenericTempTable.Text2 := RecRef.CAPTION;
        END;
        GenericTempTable.UpdateGenericTempTable(FORMAT(MailTemplateTableField."Mail Template No."), FORMAT(MailTemplateTableField.Level),
          FORMAT(MailTemplateTableField."Table No."), FORMAT(MailTemplateTableField."Table Seq. No."),
          FORMAT(MailTemplateTableField."Seq. No."), '');
      UNTIL (MailTemplateTableField.NEXT = 0);
    END;

    BEGIN
    END.
  }
}

