OBJECT Codeunit 11012269 Standard Auth. Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Window@1100525004 : Dialog;
      Progress@1100525003 : Integer;
      NoOfRecords@1100525002 : Integer;
      Counter@1100525001 : Integer;
      LastUpdateTime@1100525000 : Time;
      Text000@1100525005 : TextConst 'DEU=%1 @1@@@@@@@@@@@@@ verarbeiten;ENU=Proces %1 @1@@@@@@@@@@@@@;NLD=Verwerken %1 @1@@@@@@@@@@@@@';
      Text005@1100529200 : TextConst 'DEU=%1 %2  Berechtigungs-S„tze werden gel”scht. M”chten Sie fortfahren?;ENU=%1 %2 Permission Sets will be deleted, continue?;NLD=%1 %2 machtigingensets worden verwijderd, doorgaan?';
      Text001@1100529201 : TextConst 'DEU=%1 ist ein %2. Dies ist nicht zul„ssig.;ENU=%1 permission set %2 is not possible from this page. Use function profile page.;NLD=%1 van machtigingenset %2 is niet toegestaan vanuit dit scherm. Gebruik het functieprofiel scherm.';
      Text003@1100529203 : TextConst 'DEU=Abgebrochen.;ENU=Aborted.;NLD=Afgebroken.';
      Text004@1100529202 : TextConst 'ENU="Permission set %1 is used in users access control (first user %2). This permission set will be deleted for these users, continue? ";NLD=Machtigingenset %1 is gebruikt bij de toegangsrechten van gebruikers (eerste gerbuiker %2). De machtigingenset wordt bij deze gebruikers verwijderd, doorgaan?';
      DeleteTxt@1100529206 : TextConst 'ENU=Deleting;NLD=Verwijderen';
      ModifyTxt@1100529205 : TextConst 'ENU=Modifying;NLD=Wijzigen';
      RenameTxt@1100529204 : TextConst 'ENU=Renaming;NLD=Hernoemen';

    PROCEDURE UpdateStandardRoles@1210190036();
    VAR
      StandardRoleCheckLine@1210190000 : Record 11020657;
    BEGIN
      IF StandardRoleCheckLine.FINDSET(TRUE,FALSE) THEN BEGIN
        LastUpdateTime := TIME;
        Window.OPEN(STRSUBSTNO(Text000,StandardRoleCheckLine.TABLECAPTION));
        NoOfRecords := StandardRoleCheckLine.COUNT;
        Counter := 0;
        REPEAT
          CASE StandardRoleCheckLine.Action OF
            StandardRoleCheckLine.Action::Update:
              BEGIN
                CASE StandardRoleCheckLine."Source TableID" OF
                  2000000004: UpdatePermissionSet(StandardRoleCheckLine);
                  2000000005: UpdatePermission(StandardRoleCheckLine);
                  11020570: UpdateRoleGroup(StandardRoleCheckLine);
                  11020571: UpdateRoleGroupRole(StandardRoleCheckLine);
                END;
              END;
            StandardRoleCheckLine.Action::Delete:
              BEGIN
                CASE StandardRoleCheckLine."Source TableID" OF
                  2000000004: DeletePermissionSet(StandardRoleCheckLine."Permission Set ID");
                  2000000005: DeletePermission(StandardRoleCheckLine);
                  11020570: DeleteRoleGroup(StandardRoleCheckLine."Permission Set Group");
                  11020571: DeleteRoleGroupRole(StandardRoleCheckLine."Permission Set Group",StandardRoleCheckLine."Permission Set ID");
                END;
              END;
          END;
          Counter := Counter + 1;
          UpdateProgressWindow(Counter);
        UNTIL StandardRoleCheckLine.NEXT = 0;
        Window.CLOSE;
      END;

      CLEAR(StandardRoleCheckLine);
      StandardRoleCheckLine.DELETEALL;
    END;

    PROCEDURE UpdatePermissionSet@1210190013("Standard Role Check Line"@1210190000 : Record 11020657);
    VAR
      PermissionSet@1210190001 : Record 2000000004;
    BEGIN
      IF NOT PermissionSet.GET("Standard Role Check Line"."Permission Set ID") THEN BEGIN
        PermissionSet."Role ID" := "Standard Role Check Line"."Permission Set ID";
        PermissionSet.INSERT(TRUE);
      END;
      PermissionSet.Name := "Standard Role Check Line"."Permission Set Name";
      PermissionSet.MODIFY; // No Modify(TRUE)..
    END;

    PROCEDURE UpdatePermission@1210190010("Standard Role Check Line"@1210190000 : Record 11020657);
    VAR
      Permission@1210190001 : Record 2000000005;
    BEGIN
      IF NOT Permission.GET(
       "Standard Role Check Line"."Permission Set ID",
       "Standard Role Check Line"."Object Type",
       "Standard Role Check Line"."Object ID") THEN BEGIN
        Permission."Role ID" := "Standard Role Check Line"."Permission Set ID";
        Permission."Object Type" := "Standard Role Check Line"."Object Type";
        Permission."Object ID" := "Standard Role Check Line"."Object ID";
        Permission.INSERT;                                    // No INSERT(TRUE)..
      END;
      Permission."Read Permission" := "Standard Role Check Line"."Read Permission";
      Permission."Insert Permission" := "Standard Role Check Line"."Insert Permission";
      Permission."Modify Permission" := "Standard Role Check Line"."Modify Permission";
      Permission."Delete Permission" := "Standard Role Check Line"."Delete Permission";
      Permission."Execute Permission" := "Standard Role Check Line"."Execute Permission";
      Permission.MODIFY;                                      // No Modify(TRUE)..
    END;

    PROCEDURE UpdateRoleGroup@1210190000("Standard Role Check Line"@1210190000 : Record 11020657);
    VAR
      RoleGroup4PS@1210190001 : Record 11020570;
    BEGIN
      IF NOT RoleGroup4PS.GET("Standard Role Check Line"."Permission Set Group") THEN BEGIN
        RoleGroup4PS."No." := "Standard Role Check Line"."Permission Set Group";
        RoleGroup4PS.INSERT;                                  // No INSERT(TRUE)..
      END;
      RoleGroup4PS.Description := "Standard Role Check Line"."Permission Set Group Name";
      RoleGroup4PS."Standard 4PS" := TRUE;
      RoleGroup4PS.Module := COPYSTR("Standard Role Check Line"."Permission Set Group",3,3);
      RoleGroup4PS.MODIFY;                                    // No Modify(TRUE)..
    END;

    PROCEDURE UpdateRoleGroupRole@1210190030("Standard Role Check Line"@1210190000 : Record 11020657);
    VAR
      RoleGroupRole@1210190001 : Record 11020571;
    BEGIN
      IF NOT RoleGroupRole.GET("Standard Role Check Line"."Permission Set Group","Standard Role Check Line"."Permission Set ID") THEN BEGIN
        RoleGroupRole."Permission Set Group No." := "Standard Role Check Line"."Permission Set Group";
        RoleGroupRole."Permission Set No." := "Standard Role Check Line"."Permission Set ID";
        RoleGroupRole.INSERT;                                 // No INSERT(TRUE)..
      END;
      RoleGroupRole."Standard 4PS" := TRUE;
      RoleGroupRole."Updated on" := TODAY;
      RoleGroupRole.MODIFY;                                   // No Modify(TRUE)..
    END;

    PROCEDURE DeletePermission@1210190018("Standard Role Check Line"@1210190000 : Record 11020657);
    VAR
      Permission@1210190001 : Record 2000000005;
    BEGIN
      IF Permission.GET(
         "Standard Role Check Line"."Permission Set ID",
         "Standard Role Check Line"."Object Type",
         "Standard Role Check Line"."Object ID") THEN
        Permission.DELETE;                                    // NO Delete(TRUE)..
    END;

    PROCEDURE DeleteStandardRoleCheckLines@1100525000();
    VAR
      StandardRoleCheckLine@1100525000 : Record 11020657;
    BEGIN
      StandardRoleCheckLine.DELETEALL;
    END;

    PROCEDURE UpdateProgressWindow@9(NewProgress@11012000 : Integer);
    BEGIN
      IF NoOfRecords > 0 THEN BEGIN
        NewProgress := ROUND(NewProgress / NoOfRecords * 100,1);
        IF (NewProgress <> Progress) OR (TIME > LastUpdateTime + 5000) THEN BEGIN
          Window.UPDATE(1,100 * NewProgress);
          LastUpdateTime := TIME;
        END;
        Progress := NewProgress;
      END;
    END;

    PROCEDURE CountNoOfFunctionProfilePermissionSets@1100529201() NoOfPermissionSets : Integer;
    VAR
      PermissionSet@1100529202 : Record 2000000004;
      FunctionProfile@1100529200 : Record 11020569;
    BEGIN
      IF PermissionSet.FINDSET THEN
        REPEAT
          IF FunctionProfile.FunctionProfileExistsForPermissionSet(PermissionSet."Role ID") THEN
            NoOfPermissionSets := NoOfPermissionSets + 1
        UNTIL PermissionSet.NEXT = 0;
    END;

    PROCEDURE CountNoOf4PSPermissionSets@1100529221() NoOfPermissionSets : Integer;
    VAR
      PermissionSet@1100529200 : Record 2000000004;
      PermissionSet4PS@1100529202 : Record 11229416;
    BEGIN
      IF PermissionSet.FINDSET THEN
        REPEAT
          IF PermissionSet4PS.PermissionSet4PSExistsForPermissionSet(PermissionSet."Role ID") THEN
            NoOfPermissionSets := NoOfPermissionSets + 1
        UNTIL PermissionSet.NEXT = 0;
    END;

    PROCEDURE CountNoOfCustomPermissionSets@1100529235() NoOfPermissionSets : Integer;
    VAR
      PermissionSet@1100529202 : Record 2000000004;
    BEGIN
      EXIT(PermissionSet.COUNT - CountNoOf4PSPermissionSets);
    END;

    PROCEDURE CountSpecificPermissionSets@1100529227() NoOfPermissionSets : Integer;
    VAR
      PermissionSet@1100529202 : Record 2000000004;
      PermissionSet4PS@1100529201 : Record 11229416;
      FunctionProfile@1100529200 : Record 11020569;
    BEGIN
      EXIT(PermissionSet.COUNT - (CountNoOf4PSPermissionSets + CountNoOfFunctionProfilePermissionSets) + 1);
    END;

    PROCEDURE LookupPermissionSets@1100529207(Selection@1100529200 : 'Function Profile,4PS,Custom,Specific,NOT Function Profile';VAR PermissionSetNo@1100529205 : Code[20]) : Boolean;
    VAR
      AggregatePermissionSet@1100529202 : Record 2000000167;
      PermissionSetLookup@1100529203 : Page 9841;
    BEGIN
      MarkPermissionSetsSelection(Selection,AggregatePermissionSet);
      PermissionSetLookup.SETTABLEVIEW(AggregatePermissionSet);
      IF NOT AggregatePermissionSet.ISEMPTY THEN BEGIN
        PermissionSetLookup.LOOKUPMODE := TRUE;
        IF PermissionSetLookup.RUNMODAL = ACTION::LookupOK THEN BEGIN
          PermissionSetLookup.GETRECORD(AggregatePermissionSet);
          PermissionSetNo := AggregatePermissionSet."Role ID";
        END;
      END;
    END;

    PROCEDURE DrillDownPermissionSets@1100529280(Selection@1100529201 : 'Function Profile,4PS,Custom,Specific,NOT Function Profile') : Boolean;
    VAR
      AggregatePermissionSet@1100529202 : Record 2000000167;
      PermissionSetLookup@1100529203 : Page 9841;
    BEGIN
      MarkPermissionSetsSelection(Selection,AggregatePermissionSet);
      PermissionSetLookup.SETTABLEVIEW(AggregatePermissionSet);
      IF NOT AggregatePermissionSet.ISEMPTY THEN
        PermissionSetLookup.RUNMODAL;
    END;

    LOCAL PROCEDURE MarkPermissionSetsSelection@1100529200(Selection@1100529200 : Option;VAR AggregatePermissionSet@1100529201 : Record 2000000167) : Boolean;
    VAR
      PermissionSetLookup@1100529202 : Page 9841;
    BEGIN
      AggregatePermissionSet.SETFILTER("Role ID",'<>%1','SUPER');
      IF AggregatePermissionSet.FINDSET THEN
        REPEAT
          CASE Selection OF
            0: AggregatePermissionSet.MARK(PermissionSetIsFunctionProfile(AggregatePermissionSet."Role ID"));
            1: AggregatePermissionSet.MARK(PermissionSetIs4PSPermissionSet(AggregatePermissionSet."Role ID"));
            2: AggregatePermissionSet.MARK(PermissionSetIsCustomPermissionSet(AggregatePermissionSet."Role ID"));
            3: AggregatePermissionSet.MARK(PermissionSetIsSpecificPermissionSet(AggregatePermissionSet."Role ID"));
            4: AggregatePermissionSet.MARK(PermissionSetIsNotFunctionProfile(AggregatePermissionSet."Role ID"));
          END;
        UNTIL AggregatePermissionSet.NEXT = 0;
      AggregatePermissionSet.MARKEDONLY(TRUE);
    END;

    PROCEDURE DeleteFunctionProfiles@1100529204();
    VAR
      FunctionProfile@1100529201 : Record 11020569;
      FunctionProfileRole@1100529202 : Record 11020572;
      FunctProfileOverwritePerm@1100529203 : Record 11229293;
    BEGIN
      DeletePermissionSets(0);

      FunctionProfile.DELETEALL;
      FunctionProfileRole.DELETEALL;
      FunctProfileOverwritePerm.DELETEALL;
    END;

    PROCEDURE DeleteCustomPermissionSets@1100529202();
    BEGIN
      DeletePermissionSets(3);
    END;

    LOCAL PROCEDURE DeletePermissionSets@1100529205(Selection@1100529203 : 'Function Profile,4PS,Custom,Specific,NOT Function Profile');
    VAR
      AggregatePermissionSet@1100529200 : Record 2000000167;
      FunctionProfile@1100529202 : Record 11020569;
      PermissionSet4PS@1100529201 : Record 11229416;
      DeleteBln@1100529204 : Boolean;
    BEGIN
      MarkPermissionSetsSelection(Selection,AggregatePermissionSet);
      IF AggregatePermissionSet.FINDSET THEN
        IF CONFIRM(STRSUBSTNO(Text005,Selection,AggregatePermissionSet.COUNT)) THEN BEGIN
          REPEAT
            DeletePermissionSet(AggregatePermissionSet."Role ID");
            DeletePermissionSetPermissions(AggregatePermissionSet."Role ID");
          UNTIL AggregatePermissionSet.NEXT = 0;
        END;
    END;

    PROCEDURE DeletePermissionSet@1100529203(PermissionSetNo@1210190001 : Code[20]);
    VAR
      PermissionSet@1210190000 : Record 2000000004;
      PermissionSet4PS@1100529200 : Record 11229416;
    BEGIN
      IF PermissionSet.GET(PermissionSetNo) AND NOT PermissionSet4PS.GET(PermissionSetNo) THEN
        PermissionSet.DELETE;
    END;

    PROCEDURE DeletePermissionSetPermissions@1100529206(PermissionSetNo@1100529201 : Code[20]);
    VAR
      Permission@1100529200 : Record 2000000005;
    BEGIN
      Permission.SETRANGE("Role ID",PermissionSetNo);
      Permission.DELETEALL;
    END;

    PROCEDURE DeleteRoleGroups@1100529208(OnlyCustomRoleGroups@1100529201 : Boolean);
    VAR
      RoleGroup4PS@1100529200 : Record 11020570;
    BEGIN
      IF OnlyCustomRoleGroups THEN
        RoleGroup4PS.SETRANGE("Standard 4PS",FALSE);
      IF RoleGroup4PS.FINDSET(FALSE,FALSE) THEN
        REPEAT
          DeleteRoleGroup(RoleGroup4PS."No.");
        UNTIL RoleGroup4PS.NEXT = 0;
    END;

    PROCEDURE DeleteRoleGroupWithRoleGroupRoles@1100529209(RoleGroup@1100529201 : Code[20]);
    VAR
      RoleGroup4PS@1100529200 : Record 11020570;
      RoleGroupRole@1100529202 : Record 11020571;
    BEGIN
      IF RoleGroup4PS.GET(RoleGroup) THEN BEGIN
        RoleGroupRole.SETRANGE("Permission Set Group No.",RoleGroup);
        IF RoleGroupRole.FINDSET THEN
          REPEAT
            DeleteRoleGroupRole(RoleGroupRole."Permission Set Group No.",RoleGroupRole."Permission Set No.");
          UNTIL RoleGroupRole.NEXT = 0;
        DeleteRoleGroup(RoleGroup4PS."No.");
      END;
    END;

    PROCEDURE DeleteRoleGroup@1100529282(RoleGroup@1100529201 : Code[20]);
    VAR
      RoleGroup4PS@1100529200 : Record 11020570;
    BEGIN
      IF RoleGroup4PS.GET THEN
        RoleGroup4PS.DELETE;
    END;

    PROCEDURE DeleteRoleGroupRole@1210190032(RoleGroup@1210190000 : Code[20];PermissionSetNo@1100529200 : Code[20]);
    VAR
      RoleGroupRole@1210190001 : Record 11020571;
    BEGIN
      IF RoleGroupRole.GET(RoleGroup,PermissionSetNo) THEN
        RoleGroupRole.DELETE;
    END;

    PROCEDURE DeleteCustomizationInAllRoleGroups@1100529250();
    VAR
      RoleGroupRole@1100529200 : Record 11020571;
    BEGIN
      IF RoleGroupRole.FINDSET(FALSE,FALSE) THEN
        REPEAT
          DeleteCustomRoleGroupRoles(RoleGroupRole."Permission Set Group No.");
        UNTIL RoleGroupRole.NEXT = 0;
    END;

    PROCEDURE DeleteCustomRoleGroupRoles@1100529215(RoleGroup@1100529201 : Code[20]);
    VAR
      RoleGroupRole@1100529202 : Record 11020571;
    BEGIN
      RoleGroupRole.SETRANGE("Permission Set Group No.",RoleGroup);
      RoleGroupRole.SETRANGE(Disabled,TRUE);
      RoleGroupRole.DELETEALL;

      RoleGroupRole.SETRANGE(Disabled);
      RoleGroupRole.SETRANGE("Standard 4PS",FALSE);
      RoleGroupRole.DELETEALL;
    END;

    PROCEDURE PermissionSetIsFunctionProfile@1100529216(PermissionSetNo@1100529200 : Code[20]) : Boolean;
    VAR
      FunctionProfile@1100529201 : Record 11020569;
    BEGIN
      EXIT(FunctionProfile.FunctionProfileExistsForPermissionSet(PermissionSetNo));
    END;

    PROCEDURE PermissionSetIsNotFunctionProfile@1100529214(PermissionSetNo@1100529200 : Code[20]) : Boolean;
    BEGIN
      EXIT(NOT PermissionSetIsFunctionProfile(PermissionSetNo));
    END;

    PROCEDURE PermissionSetIs4PSPermissionSet@1100529213(PermissionSetNo@1100529202 : Code[20]) : Boolean;
    VAR
      PermissionSet4PS@1100529201 : Record 11229416;
    BEGIN
      EXIT(PermissionSet4PS.PermissionSet4PSExistsForPermissionSet(PermissionSetNo));
    END;

    PROCEDURE PermissionSetIs4PSAuthorization@1100529212(PermissionSetNo@1100529200 : Code[20]) : Boolean;
    BEGIN
      EXIT(
        PermissionSetIsFunctionProfile(PermissionSetNo) OR
        PermissionSetIs4PSPermissionSet(PermissionSetNo));
    END;

    PROCEDURE PermissionSetIsCustomPermissionSet@1100529211(PermissionSetNo@1100529200 : Code[20]) : Boolean;
    BEGIN
      EXIT(NOT PermissionSetIs4PSPermissionSet(PermissionSetNo));
    END;

    PROCEDURE PermissionSetIsSpecificPermissionSet@1100529210(PermissionSetNo@1100529200 : Code[20]) : Boolean;
    BEGIN
      EXIT(
        NOT PermissionSetIsFunctionProfile(PermissionSetNo) AND
        NOT PermissionSetIs4PSPermissionSet(PermissionSetNo));
    END;

    PROCEDURE GiveErrorPermissionSetIsFunctionProfilePermissionSet@1100529222(ActionCode@1100529202 : Code[10];PermissionSetCde@1100529201 : Code[20]);
    VAR
      ActionTxt@1100529204 : Text;
      FunctionProfile@1100529200 : Record 11020569;
    BEGIN
      CASE ActionCode OF
        'D': ActionTxt := DeleteTxt;
        'M': ActionTxt := ModifyTxt;
        'R': ActionTxt := RenameTxt;
      END;

      IF FunctionProfile.GET(PermissionSetCde) THEN
        ERROR(STRSUBSTNO(Text001,ActionTxt,PermissionSetCde));
    END;

    PROCEDURE DeleteFunctionProfileData@1100529219(RoleID@1100529204 : Code[20]);
    VAR
      FunctionProfileRole@1100529210 : Record 11020572;
      FunctProfileOverwritePerm@1100529209 : Record 11229293;
      FunctProfFieldAuthorization@1100529200 : Record 11020568;
    BEGIN
      FunctionProfileRole.SETFILTER("Function Profile No.",'%1',RoleID);
      FunctionProfileRole.DELETEALL;

      FunctProfileOverwritePerm.SETFILTER("Function Profile No.",'%1',RoleID);
      FunctProfileOverwritePerm.DELETEALL;

      FunctProfFieldAuthorization.SETFILTER("Function Profile No.",'%1',RoleID);
      FunctProfFieldAuthorization.DELETEALL;
    END;

    PROCEDURE ConfirmDeleteAccessControl@1100529233(RoleID@1100529201 : Code[20]);
    VAR
      AccessControl@1100529200 : Record 2000000053;
      PermissionSet@1100529202 : Record 2000000004;
    BEGIN
      AccessControl.SETCURRENTKEY("Role ID");
      AccessControl.SETFILTER("Role ID",'%1',RoleID);
      IF AccessControl.FINDSET THEN BEGIN
        AccessControl.CALCFIELDS("User Name");
        IF NOT CONFIRM(STRSUBSTNO(Text004,RoleID,AccessControl."User Name")) THEN
          ERROR(Text003)
        ELSE
          AccessControl.DELETEALL;
      END;
    END;

    PROCEDURE DeleteTenantPermissionSet@1100529220(RoleID@1100529204 : Code[20]);
    VAR
      TenantPermissionSet@1100529201 : Record 2000000165;
      ZeroGuid@1100529202 : GUID;
    BEGIN
      IF TenantPermissionSet.GET(ZeroGuid,RoleID) THEN
        TenantPermissionSet.DELETE;
    END;

    PROCEDURE DeleteTenantPermissions@1100529218(RoleID@1100529200 : Code[20]);
    VAR
      TenantPermission@1100525000 : Record 2000000166;
      ZeroGuid@1100529202 : GUID;
    BEGIN
      TenantPermission.SETRANGE("App ID",ZeroGuid);
      TenantPermission.SETFILTER("Role ID",'%1',RoleID);
      TenantPermission.DELETEALL;
    END;

    PROCEDURE UpdateFunctionProfileChanged@1100529217(PermissionSetCde@1100529200 : Code[20]);
    VAR
      FunctionProfileRole@1210190000 : Record 11020572;
    BEGIN
      FunctionProfileRole.UpdateFunctionProfileChanged(FunctionProfileRole.Type::"Permission Set",PermissionSetCde);
    END;

    BEGIN
    END.
  }
}

