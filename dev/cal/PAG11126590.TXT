OBJECT Page 11126590 Document Capture Client 4PS
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 6085780=rimd;
    CaptionML=[DEU=Dokumenterfassung Kunden-Addin;
               ENU=Document Capture Client Addin;
               NLD=Document Capture Client Addin];
    LinksAllowed=No;
    SourceTable=Table454;
    PageType=CardPart;
    OnOpenPage=BEGIN
                 IF ContiniaUserProp.GET(USERID) AND (ContiniaUserProp."Image Zoom" > 0) THEN
                   CurrZoom := ContiniaUserProp."Image Zoom"
                 ELSE
                   CurrZoom := 50;

                 Setup.GET;
                 ShowCaptureUI := NOT WebClientMgt.IsWebClient;
                 ShowCaptureWebUI := WebClientMgt.IsWebClient;
               END;

    OnAfterGetRecord=VAR
                       PurchInvHeader@1100525000 : Record 122;
                       PurchCrMemoHdr@1100525001 : Record 124;
                     BEGIN
                       DCDocument.INIT;
                       DCDocument."No." := '';

                       CASE "Table ID" OF
                         DATABASE::"Purchase Header":
                           BEGIN
                             DCDocument.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
                             DCDocument.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
                             DCDocument.SETRANGE("Created Doc. Subtype","Document Type");
                             DCDocument.SETRANGE("Created Doc. ID","Document No.");
                             IF DCDocument.FINDFIRST THEN;
                           END;
                         DATABASE::"Purch. Inv. Header":
                           BEGIN
                             PurchInvHeader.GET("Document No.");
                             IF DCDocument.GET(COPYSTR(PurchInvHeader."Ext. Document ID",1,MAXSTRLEN(DCDocument."No."))) THEN;
                           END;
                         DATABASE::"Purch. Cr. Memo Hdr.":
                           BEGIN
                             PurchCrMemoHdr.GET("Document No.");
                             IF DCDocument.GET(COPYSTR(PurchCrMemoHdr."Ext. Document ID",1,MAXSTRLEN(DCDocument."No."))) THEN;
                           END;
                       END;

                       IF (DCDocument."No." <> SavedDCDocument."No.") OR (DCDocument."Template No." <> SavedDCDocument."Template No.") THEN BEGIN
                         IF (HeaderFieldsFormName <> '') OR (LineFieldsFormName <> '') THEN BEGIN
                           CaptureAddinLib.BuildNotifierConfig(HeaderFieldsFormName,LineFieldsFormName,CaptureXmlDoc);
                           IF (LineFieldsFormName <> '') THEN
                             CaptureAddinLib.BuildLineFieldOrderCommand(DCDocument."Template No.",CaptureXmlDoc);
                           IF (HeaderFieldsFormName <> '') THEN
                             CaptureAddinLib.BuildHeaderFieldOrderCommand(DCDocument."Template No.",CaptureXmlDoc);
                         END;
                         UpdateImage;
                         CaptureAddinLib.BuildCaptureEnabledCommand((DCDocument.Status = DCDocument.Status::Open) AND (NOT DisableCapture),CaptureXmlDoc);
                         SendCommand(CaptureXmlDoc);
                       END ELSE
                         IF (SendAllPendingCommands AND ((NOT CaptureXmlDoc.IsEmpty))) THEN BEGIN
                           SendAllPendingCommands := FALSE;
                           CaptureAddinLib.BuildCaptureEnabledCommand((DCDocument.Status = DCDocument.Status::Open) AND (NOT DisableCapture),CaptureXmlDoc);
                           SendCommand(CaptureXmlDoc);
                         END;
                       SavedDCDocument := DCDocument;
                     END;

  }
  CONTROLS
  {
    { 1000000000;;Container;
                Name=ContentArea;
                ContainerType=ContentArea }

    { 1000000001;1;Field  ;
                Name=CaptureUI;
                SourceExpr=CaptureUISource;
                Visible=SHOWCAPTUREUI;
                ControlAddIn=[Akeyto.DocumentCapture.Dynamics.Nav.UI;PublicKeyToken=0c53e51c0afe7001];
                OnControlAddIn=BEGIN
                                 OnControlAddInEvent(Index,Data);
                               END;

                ShowCaption=No }

    { 2   ;1   ;Field     ;
                Name=CaptureUIWeb;
                SourceExpr=CaptureUISource;
                Visible=SHOWCAPTUREWEBUI;
                ControlAddIn=[Continia.DocumentCapture.Dynamics.Nav.Web.UI;PublicKeyToken=0c53e51c0afe7001];
                ShowCaption=No }

  }
  CODE
  {
    VAR
      Setup@1000000019 : Record 6085573;
      ContiniaUserProp@6085573 : Record 6085780;
      CaptureMgt@1000000014 : Codeunit 6085576;
      CaptureAddinLib@1000000013 : Codeunit 6085660;
      WebClientMgt@1005 : Codeunit 6085662;
      TIFFMgt@1003 : Codeunit 6085609;
      CaptureXmlDoc@1000000010 : Codeunit 6192800;
      MessageBusSocket@1001 : DotNet "'Continia.DocumentCapture.Dynamics.Nav.MessageBus, Version=5.0.0.0, Culture=neutral, PublicKeyToken=0c53e51c0afe7001'.Continia.DocumentCapture.Dynamics.Nav.MessageBus.MessageBusSocket" WITHEVENTS;
      CaptureUISource@1000000000 : Text;
      Channel@1000000011 : Code[50];
      CurrentPageText@1000000005 : Text[250];
      CurrentZoomText@1000000009 : Text[30];
      HeaderFieldsFormName@1000000008 : Text[50];
      LineFieldsFormName@1000000003 : Text[50];
      MatchQty@1000000007 : Decimal;
      CurrZoom@1000000004 : Decimal;
      CurrentPageNo@1000000006 : Integer;
      Text001@1000000002 : TextConst 'DEU=(%1 Seiten gesamt);ENU=(%1 pages in total);NLD=(%1 pagina''s in totaal)';
      Text002@1000000001 : TextConst 'DEU=Seite %1;ENU=Page %1;NLD=Pagina %1';
      SendAllPendingCommands@1000000012 : Boolean;
      Text003@1000000015 : TextConst 'DEU=2000000000;ENU=2000000000;NLD=2000000000';
      DisableCapture@1000000018 : Boolean;
      ShowCaptureUI@1000000021 : Boolean INDATASET;
      ShowCaptureWebUI@1004 : Boolean;
      AddInReady@1000 : Boolean;
      AddOrReplaceSearchQty@6085574 : TextConst 'DEU=Speichere vorhandene Suchtexte und fÅge diese hinzu,Vorhandene Suchtexte lîschen;ENU=Keep existing search texts and add this,Delete existing search texts;NLD=Bewaar bestaande zoekteksten en voeg deze toe,Bestaande zoekteksten verwijderen';
      SavedDCDocument@1100525000 : Record 6085590;
      DCDocument@1100525001 : Record 6085590;

    PROCEDURE UpdateImage@1000000006();
    VAR
      TempFile@1001 : TEMPORARY Record 6085608;
      ImageDataUrl@1000 : Text;
    BEGIN
      IF (DCDocument."No." = '') OR NOT (DCDocument.GetTiffFile(TempFile)) THEN BEGIN
        CaptureAddinLib.BuildClearImageCommand(CaptureXmlDoc);
        UpdateCurrPageNo(0);
        EXIT;
      END;

      IF NOT WebClientMgt.IsWebClient THEN
        CaptureAddinLib.BuildSetImageCommand(TempFile.GetClientFilePath,TRUE,CaptureXmlDoc);

      UpdateCurrPageNo(1);

      CaptureAddinLib.BuildScrollTopCommand(CaptureXmlDoc);

      Zoom(CurrZoom,FALSE);

      CaptureAddinLib.BuildTotalNoOfPagesTextCommand(STRSUBSTNO(Text001,DCDocument."No. of Pages"),CaptureXmlDoc);

      CaptureAddinLib.BuildAddDocumentField(Text003,CaptureXmlDoc);
    END;

    PROCEDURE UpdateCurrPageNo@1000000003(PageNo@1000000000 : Integer);
    VAR
      TempFile@1001 : TEMPORARY Record 6085608;
      ImageDataUrl@1000 : Text;
    BEGIN
      DCDocument.CALCFIELDS("No. of Pages");
      CurrentPageNo := PageNo;
      CurrentPageText := STRSUBSTNO(Text002,CurrentPageNo);

      IF WebClientMgt.IsWebClient AND DCDocument.GetTiffFile(TempFile) THEN BEGIN
        ImageDataUrl := TIFFMgt.GetPageAsDataUrl(TempFile,PageNo);
        CaptureAddinLib.BuildSetImageDataCommand(ImageDataUrl,TRUE,CaptureXmlDoc);
      END;

      CaptureAddinLib.BuildSetActivePageCommand(PageNo,CurrentPageText,CaptureXmlDoc);
      RedrawValues;

      IF WebClientMgt.IsWebClient THEN
        SendCommand(CaptureXmlDoc);
    END;

    PROCEDURE ParsePageText@1000000001(PageText@1000000000 : Text[30]);
    VAR
      NewPageNo@1000000001 : Integer;
    BEGIN
      IF STRPOS(PageText,' ') = 0 THEN BEGIN
        IF EVALUATE(NewPageNo,PageText) THEN;
      END ELSE
        IF EVALUATE(NewPageNo,COPYSTR(PageText,STRPOS(PageText,' '))) THEN;

      DCDocument.CALCFIELDS("No. of Pages");
      IF (NewPageNo <= 0) OR (NewPageNo > DCDocument."No. of Pages") THEN
        UpdateCurrPageNo(CurrentPageNo)
      ELSE
        UpdateCurrPageNo(NewPageNo);
    END;

    PROCEDURE Zoom@1000000000(ZoomPct@1000000000 : Decimal;UpdateUserProp@1160040000 : Boolean);
    BEGIN
      IF ZoomPct < 1 THEN
        ZoomPct := 1;
      CurrZoom := ZoomPct;
      CurrentZoomText := FORMAT(CurrZoom) + '%';

      IF UpdateUserProp THEN BEGIN
        IF NOT ContiniaUserProp.GET(USERID) THEN BEGIN
          ContiniaUserProp."User ID" := USERID;
          ContiniaUserProp."Image Zoom" := CurrZoom;
          ContiniaUserProp.INSERT;
        END ELSE BEGIN
          IF ContiniaUserProp."Image Zoom" <> CurrZoom THEN BEGIN
            ContiniaUserProp.FIND;
            ContiniaUserProp."Image Zoom" := CurrZoom;
            ContiniaUserProp.MODIFY;
          END;
        END;
      END;

      CaptureAddinLib.BuildZoomCommand(CurrZoom,CaptureXmlDoc);
      CaptureAddinLib.BuildZoomTextCommand(CurrentZoomText,CaptureXmlDoc);
    END;

    PROCEDURE RedrawValues@1000000009();
    VAR
      Value@1000000000 : Record 6085593;
      Field@1160040000 : Record 6085580;
      DocPage@1160040001 : Record 6085591;
      CaptureEngine@1160040003 : Codeunit 6085575;
      LeftPos@1160040002 : Integer;
      RightPos@1160040004 : Integer;
    BEGIN
      CaptureAddinLib.BuildRemoveAllFieldsCommand(CaptureXmlDoc);
      Value.SETRANGE("Document No.",DCDocument."No.");
      Value.SETRANGE("Page No.",CurrentPageNo);
      IF Value.FINDSET THEN
        REPEAT
          IF (Value.Right - Value.Left > 0) AND (Value.Bottom - Value.Top > 0) THEN BEGIN
            IF Value."Is Value" THEN BEGIN
              IF Value.Type = Value.Type::Header THEN
                CaptureAddinLib.BuildDrawFieldCommand(Value.Code,TRUE,Value.Top,Value.Left,Value.Bottom,Value.Right,CaptureXmlDoc)
              ELSE
                CaptureAddinLib.BuildDrawFieldCommand(
                  Value.Code + FORMAT(Value."Line No."),TRUE,Value.Top,Value.Left,Value.Bottom,Value.Right,CaptureXmlDoc);
            END ELSE
              IF Value.Type = Value.Type::Line THEN BEGIN
                DocPage.GET(Value."Document No.",Value."Page No.");

                IF Field.GET(Value."Template No.",Value.Type,Value.Code) THEN BEGIN
                  LeftPos := Value.Left +
                    ROUND(Field."Caption Offset X" * CaptureEngine.GetDPIFactor(Field."Offset DPI",DocPage."TIFF Image Resolution"),1);
                  RightPos :=
                    LeftPos + ROUND(Field."Typical Field Width" * CaptureEngine.GetDPIFactor(150,DocPage."TIFF Image Resolution"),1);
                END ELSE BEGIN
                  LeftPos := Value.Left;
                  RightPos := Value.Right;
                END;

                CaptureAddinLib.BuildDrawFieldCommand(
                  Value.Code,
                  FALSE,
                  Value.Top,
                  LeftPos,
                  Value.Bottom,
                  RightPos,
                  CaptureXmlDoc);
              END ELSE
                CaptureAddinLib.BuildDrawFieldCommand(Value.Code,FALSE,Value.Top,Value.Left,Value.Bottom,Value.Right,CaptureXmlDoc);
          END;
        UNTIL Value.NEXT = 0;
    END;

    PROCEDURE SendCommand@1000000002(VAR XmlDoc@1000000000 : Codeunit 6192800);
    VAR
      NewXmlDoc@161024012 : Codeunit 6192800;
    BEGIN
      IF NOT AddInReady AND WebClientMgt.IsWebClient THEN
        EXIT;

      CaptureAddinLib.XmlToText(XmlDoc,CaptureUISource);
      CaptureAddinLib.TextToXml(NewXmlDoc,CaptureUISource);

      IF WebClientMgt.IsWebClient THEN
        CurrPage.CaptureUIWeb.SourceValueChanged(CaptureUISource);

      CLEAR(CaptureXmlDoc);
    END;

    PROCEDURE SetConfig@1000000004(NewHeaderFieldsFormName@1000000001 : Text[50];NewLineFieldsFormName@1000000000 : Text[50];NewChannel@1000000002 : Code[50]);
    BEGIN
      HeaderFieldsFormName := NewHeaderFieldsFormName;
      LineFieldsFormName := NewLineFieldsFormName;
      Channel := NewChannel;

      IF WebClientMgt.IsWebClient THEN
        MessageBusSocket := MessageBusSocket.MessageBusSocket(Channel);
    END;

    PROCEDURE HandleSimpleCommand@1000000011(Command@1000000000 : Text[1024]);
    BEGIN
      CASE Command OF
        'ZoomIn':
          Zoom(CurrZoom + 5,TRUE);

        'ZoomOut':
          Zoom(CurrZoom - 5,TRUE);

        'FirstPage':
          BEGIN
            DCDocument.CALCFIELDS("No. of Pages");
            IF DCDocument."No. of Pages" > 0 THEN
              UpdateCurrPageNo(1);
          END;

        'NextPage':
          BEGIN
            DCDocument.CALCFIELDS("No. of Pages");
            IF CurrentPageNo < DCDocument."No. of Pages" THEN
              UpdateCurrPageNo(CurrentPageNo + 1);
          END;

        'PrevPage':
          BEGIN
            IF CurrentPageNo > 1 THEN
              UpdateCurrPageNo(CurrentPageNo - 1);
          END;

        'LastPage':
          BEGIN
            DCDocument.CALCFIELDS("No. of Pages");
            UpdateCurrPageNo(DCDocument."No. of Pages");
          END;
      END;

      SendCommand(CaptureXmlDoc);
    END;

    PROCEDURE HandleXmlCommand@1000000007(Command@1000000000 : Text[1024];VAR InXmlDoc@1000000001 : Codeunit 6192800);
    VAR
      XmlLib@1000000003 : Codeunit 6085573;
      DocumentElement@1000 : Codeunit 6192801;
      Area@1000000008 : Code[10];
      FieldCode@1000000009 : Code[20];
      PageNo@1000000002 : Integer;
      Top@1000000004 : Integer;
      Left@1000000005 : Integer;
      Right@1000000006 : Integer;
      Bottom@1000000007 : Integer;
      IsValue@1000000010 : Boolean;
      LineNo@1000000011 : Integer;
    BEGIN
      InXmlDoc.GetDocumentElement(DocumentElement);

      CASE Command OF
        'ZoomTextChanged':
          BEGIN
            CurrentZoomText := XmlLib.GetNodeText(DocumentElement,'Text');
            IF EVALUATE(CurrZoom,DELCHR(CurrentZoomText,'=','%')) THEN;
            Zoom(CurrZoom,TRUE);
          END;

        'PageTextChanged':
          BEGIN
            CurrentPageText := XmlLib.GetNodeText(DocumentElement,'Text');
            ParsePageText(CurrentPageText);
          END;

        'ChangePage':
          UpdateCurrPageNo(XmlLib.Text2Int(XmlLib.GetNodeText(DocumentElement,'NewPageNo')));

        'CaptureEnded':
          BEGIN
            IF WebClientMgt.IsWebClient THEN
              Area := XmlLib.GetNodeText(DocumentElement,'CaptureArea')
            ELSE
              Area := XmlLib.GetNodeText(DocumentElement,'Area');
            LineNo := XmlLib.Text2Int(XmlLib.GetNodeText(DocumentElement,'LineNo'));
            FieldCode := XmlLib.GetNodeText(DocumentElement,'FieldName');
            IsValue := XmlLib.Text2Bool(XmlLib.GetNodeText(DocumentElement,'IsValue'));
            PageNo := XmlLib.Text2Int(XmlLib.GetNodeText(DocumentElement,'PageNo'));
            Top := XmlLib.Text2Int(XmlLib.GetNodeText(DocumentElement,'Top'));
            Left := XmlLib.Text2Int(XmlLib.GetNodeText(DocumentElement,'Left'));
            Bottom := XmlLib.Text2Int(XmlLib.GetNodeText(DocumentElement,'Bottom'));
            Right := XmlLib.Text2Int(XmlLib.GetNodeText(DocumentElement,'Right'));
            CaptureEnded(PageNo,Area,FieldCode,LineNo,IsValue,Top,Left,Bottom,Right);
          END;

        'RedrawValues':
            RedrawValues;
      END;

      IF NOT CaptureXmlDoc.IsEmpty THEN
        SendCommand(CaptureXmlDoc);
    END;

    PROCEDURE CaptureEnded@1000000008(PageNo@1000000013 : Integer;Area@1000000009 : Code[20];FieldName@1000000005 : Text[1024];LineNo@1000000016 : Integer;IsValue@1000000004 : Boolean;Top@1000000003 : Integer;Left@1000000002 : Integer;Bottom@1000000001 : Integer;Right@1000000000 : Integer);
    VAR
      Template@1000000018 : Record 6085579;
      Page@1000000008 : Record 6085591;
      Value@1000000007 : Record 6085593;
      Field@1000000010 : Record 6085580;
      Words@1000000019 : TEMPORARY Record 6085592;
      TemplateSearchText@6085573 : Record 6085588;
      CaptureEngine@1160040000 : Codeunit 6085575;
      WordFunc@1000000017 : Codeunit 6085574;
      Word@1000000006 : Text[1024];
      ActivePageNo@1000000012 : Integer;
      xLeft@1000000014 : Integer;
      xRight@161024012 : Integer;
      IsField@1000000011 : Boolean;
      NextEntryNo@6085574 : Integer;
    BEGIN
      FIND('=');
      IF Status <> Status::Open THEN
        EXIT;

      Field.SETRANGE("Template No.",DCDocument."Template No.");

      Page.GET(DCDocument."No.",CurrentPageNo);

      CASE Area OF
        'DOCUMENT':
          BEGIN
            IF FieldName = Text003 THEN BEGIN
              WordFunc.GetWordsInRegion(Page,Top,Left,Bottom,Right,Words);

              IF Template.GET(DCDocument."Template No.") THEN BEGIN
                TemplateSearchText.SETRANGE("Template No.",DCDocument."Template No.");
                IF TemplateSearchText.ISEMPTY THEN BEGIN
                  Template."Search Text" := COPYSTR(WordFunc.CombineWords(Words),1,MAXSTRLEN(Template."Search Text"));
                  Template.MODIFY(TRUE);
                END ELSE BEGIN
                  CASE STRMENU(AddOrReplaceSearchQty,0) OF
                    1: // add
                      BEGIN
                        TemplateSearchText.FINDLAST;
                        NextEntryNo := TemplateSearchText."Entry No." + 10000;

                        TemplateSearchText.INIT;
                        TemplateSearchText."Template No." := DCDocument."Template No.";
                        TemplateSearchText."Entry No." := NextEntryNo;
                        TemplateSearchText."Search Text" := COPYSTR(WordFunc.CombineWords(Words),1,MAXSTRLEN(Template."Search Text"));
                        TemplateSearchText.INSERT;
                      END;

                    2: // delete existing
                      BEGIN
                        TemplateSearchText.DELETEALL;
                        Template."Search Text" := COPYSTR(WordFunc.CombineWords(Words),1,MAXSTRLEN(Template."Search Text"));
                        Template.MODIFY(TRUE);
                      END;
                  END;
                END;
              END;
            END;
            LineNo := 0;
          END;

        'HEADER':
          BEGIN
            Field.SETRANGE(Type,Field.Type::Header);
            Field.SETRANGE(Code,FieldName);
            Field.FINDSET;
            LineNo := 0;
            IsField := TRUE;
          END;

        'LINE':
          BEGIN
            Field.SETRANGE(Type,Field.Type::Line);
            IF IsValue THEN
              Field.SETRANGE(Code,COPYSTR(FieldName,1,STRLEN(FieldName) - STRLEN(FORMAT(LineNo))))
            ELSE
              Field.SETRANGE(Code,FieldName);
            Field.FINDSET;

            IF (NOT IsValue) AND (Right - Left > 20) THEN BEGIN
              xLeft := ROUND(Left,1);
              xRight := ROUND(Right,1);
            END;
            IsField := TRUE;
          END;
      END;

      IF IsField THEN BEGIN
        IF PageNo <> CurrentPageNo THEN
          UpdateCurrPageNo(PageNo);

        Field.FIND('=');
        IF Field.Formula = '' THEN BEGIN
          IF IsValue THEN BEGIN
            Word := CaptureMgt.CaptureFromPos(Page,Field,LineNo,IsValue,Top,Left,Bottom,Right,Value);
            CaptureMgt.UpdateFieldValue(DCDocument."No.",PageNo,LineNo,Field,Word,FALSE,TRUE);

            IF (NOT CaptureMgt.IsValidValue(Field,DCDocument."No.",LineNo)) OR (Word = '') THEN BEGIN
              IF Field."Data Type" = Field."Data Type"::Text THEN
                CaptureMgt.UpdateFieldValue(DCDocument."No.",PageNo,LineNo,Field,Word,TRUE,TRUE)
              ELSE BEGIN
                IF CaptureMgt.TryUpdateFieldRuleFromMaster(Field,Word,DCDocument."No.") THEN
                  Word := CaptureMgt.CaptureFromPos(Page,Field,LineNo,IsValue,Top,Left,Bottom,Right,Value)
                ELSE
                  CaptureMgt.UpdateFieldValue(DCDocument."No.",PageNo,LineNo,Field,Word,TRUE,TRUE);
              END;
            END;

            IF Field.Type <> Field.Type::Line THEN BEGIN
              IF (Right - Left) > 0 THEN BEGIN
                Field."Typical Field Width" := ROUND((Right - Left) /
                  CaptureEngine.GetDPIFactor(150,Page."TIFF Image Resolution"),1);
                Field."Typical Field DPI" := Page."TIFF Image Resolution";
              END;

              IF (Bottom - Top) > 0 THEN BEGIN
                Field."Typical Field Height" := ROUND((Bottom - Top) /
                  CaptureEngine.GetDPIFactor(150,Page."TIFF Image Resolution"),1);
                Field."Typical Field DPI" := Page."TIFF Image Resolution";
              END;
              Field.MODIFY;
            END;
          END ELSE BEGIN
            Word := CaptureMgt.CaptureFromPos(Page,Field,0,IsValue,Top,Left,Bottom,Right,Value);

            IF Area = 'LINE' THEN BEGIN
              IF (xLeft > 0) AND (xLeft < Left) THEN
                Field."Caption Offset X" := xLeft - Left
              ELSE
                Field."Caption Offset X" := 0;
              Field."Offset DPI" := Page."TIFF Image Resolution";

              IF xRight > Right THEN
                Field."Typical Field Width" := xRight - Left - Field."Caption Offset X"
              ELSE
                Field."Typical Field Width" := Right - Left - Field."Caption Offset X";
              Field."Typical Field Width" := ROUND(Field."Typical Field Width" /
                CaptureEngine.GetDPIFactor(150,Page."TIFF Image Resolution"),1);
              Field."Typical Field DPI" := Page."TIFF Image Resolution";
            END;

            IF Field."Auto Update Caption" THEN BEGIN
              CaptureMgt.UpdateFieldCaption(Field,PageNo,Top,Left,Page."TIFF Image Resolution",Word);
              Field."Search for Value" := Word <> '';
              Field.MODIFY(TRUE);
            END;

            IF Area = 'LINE' THEN
              IF Template.GET(DCDocument."Template No.") AND (Template."Recognize Lines" = Template."Recognize Lines"::No) THEN BEGIN
                Template."Recognize Lines" := Template."Recognize Lines"::Yes;
                Template.MODIFY;
              END;
          END;

          IF (LineNo = 0) OR (NOT IsValue) THEN
            CaptureMgt.UpdateCaptionOffset(Field,DCDocument."No.");

          IF CurrentPageNo = 1 THEN
            Field."Default Page Source" := Field."Default Page Source"::"First Page"
          ELSE
            Field."Default Page Source" := Field."Default Page Source"::"Last Page";
          Field.MODIFY(TRUE);

          IF (Area = 'LINE') AND (NOT IsValue) THEN BEGIN
            Left := Left +
              ROUND(Field."Caption Offset X" * CaptureEngine.GetDPIFactor(Field."Offset DPI",Page."TIFF Image Resolution"),1);
            Right := Left + ROUND(Field."Typical Field Width" * CaptureEngine.GetDPIFactor(150,Page."TIFF Image Resolution"),1);
          END;
        END ELSE BEGIN
          Right := 0;
          Left := 0;
          Bottom := 0;
          Top := 0;
        END;
      END;

      CaptureAddinLib.BuildDrawFieldCommand(FieldName,IsValue,Top,Left,Bottom,Right,CaptureXmlDoc);
      COMMIT;

      IF WebClientMgt.IsWebClient THEN BEGIN
        MessageBusSocket.RaiseMessage(0,'UPDATE' + Area);
        RedrawValues;
        CaptureAddinLib.BuildStartCaptureCommand(Area,Field.Code,FieldName,CaptureXmlDoc);
      END ELSE
        CaptureAddinLib.BuildNotifyMessage(Channel,'UPDATE' + Area,CaptureXmlDoc);
    END;

    PROCEDURE SetSendAllPendingCommands@1000000005(NewSendAllPendingCommands@1000000000 : Boolean);
    BEGIN
      SendAllPendingCommands := NewSendAllPendingCommands;
    END;

    PROCEDURE SetDisableCapture@1000000010(NewDisableCapture@1000000000 : Boolean);
    BEGIN
      DisableCapture := NewDisableCapture;
    END;

    PROCEDURE ClearImage@1161054000();
    BEGIN
      CaptureAddinLib.BuildClearImageCommand(CaptureXmlDoc);
      UpdateCurrPageNo(0);
      SendCommand(CaptureXmlDoc);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE UpdatePage@1161054001();
    BEGIN
      UpdateImage;
      CaptureAddinLib.BuildCaptureEnabledCommand((Status = Status::Open) AND (NOT DisableCapture),CaptureXmlDoc);
      SendCommand(CaptureXmlDoc);
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE OnControlAddInEvent@1160040000(Index@1000 : Integer;Data@1001 : Variant);
    VAR
      InXmlDoc@1002 : Codeunit 6192800;
      DocumentElement@1004 : Codeunit 6192801;
      XmlLib@1003 : Codeunit 6085573;
    BEGIN
      CLEAR(CaptureXmlDoc);
      IF Index = 0 THEN
        HandleSimpleCommand(Data)
      ELSE BEGIN
        CaptureAddinLib.TextToXml(InXmlDoc,Data);
        InXmlDoc.GetDocumentElement(DocumentElement);
        IF WebClientMgt.IsWebClient THEN
          HandleXmlCommand(XmlLib.GetNodeText(DocumentElement,'Event'),InXmlDoc)
        ELSE
          HandleXmlCommand(XmlLib.GetNodeText(DocumentElement,'Command'),InXmlDoc);
      END;
    END;

    PROCEDURE SetfilterRecordID@1100528200(ApprovalEntryRecordID@1100528200 : RecordID;TableId@1001 : Integer;DocumentType@1002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocumentNo@1003 : Code[20]);
    BEGIN
      //**4PS
      IF TableId <> 0 THEN BEGIN
        FILTERGROUP(2);
        SETCURRENTKEY("Table ID","Document Type","Document No.");
        SETRANGE("Record ID to Approve",ApprovalEntryRecordID);
        SETRANGE("Table ID",TableId);
        SETRANGE("Document Type",DocumentType);
        IF DocumentNo <> '' THEN
          SETRANGE("Document No.",DocumentNo);
        FILTERGROUP(0);

        SETRANGE("Table ID",TableId);
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Record ID to Approve",ApprovalEntryRecordID);
        IF DocumentNo <> '' THEN
          SETRANGE("Document No.",DocumentNo);
        CurrPage.UPDATE(FALSE);
      END;
    END;

    EVENT CaptureUIWeb@-2::OnControlAddIn@1(index@1001 : Integer;data@1000 : Variant);
    BEGIN
      OnControlAddInEvent(index,data);
    END;

    EVENT CaptureUIWeb@-2::AddInReady@2();
    BEGIN
      AddInReady := TRUE;
      UpdatePage;
    END;

    EVENT MessageBusSocket@1001::OnMessageReceived@11(type@1001 : Integer;message@1000 : Text);
    BEGIN
    END;

    BEGIN
    {
      **4PS Copy from Page 6085593, Main table switched from DC Document to Approval Entry.

      The reason for this form to be a list is to avoide default RTC right-click functionality
    }
    END.
  }
}

