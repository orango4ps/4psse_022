OBJECT Table 11229937 Plant Rental Agr. Inv. Period
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               VALIDATE(Removed);
             END;

    OnModify=BEGIN
               VALIDATE(Removed);
               VALIDATE("Completely Invoiced");
             END;

    CaptionML=ENU=Plant Rental Agreement Invoice Period;
  }
  FIELDS
  {
    { 10  ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   CaptionML=[ENU=Plant Type;
                                                              NOR=Maskintype;
                                                              SVE=Maskintyp];
                                                   NotBlank=Yes }
    { 20  ;   ;Plant No.           ;Code10        ;TableRelation="Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   CaptionML=[ENU=Plant No.;
                                                              NOR=Maskinnr.;
                                                              SVE=Maskinnr];
                                                   NotBlank=Yes }
    { 30  ;   ;Agreement No.       ;Integer       ;TableRelation="Plant Rental Agreement"."Agreement No." WHERE (Plant Type=FIELD(Plant Type),
                                                                                                                 Plant No.=FIELD(Plant No.));
                                                   CaptionML=ENU=Agreement No. }
    { 40  ;   ;Line No.            ;Integer       ;CaptionML=ENU=Regelnr. }
    { 50  ;   ;Plant Location (Inv.);Code20       ;TableRelation="Plant Location";
                                                   CaptionML=ENU=Plant Location (Inv.);
                                                   Editable=No }
    { 60  ;   ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              NOR=Startdato;
                                                              SVE=Startdatum];
                                                   Editable=No }
    { 70  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                VALIDATE(Removed);
                                                              END;

                                                   CaptionML=[ENU=Ending Date;
                                                              NOR=Sluttdato;
                                                              SVE=Slutdatum];
                                                   Editable=No }
    { 75  ;   ;Removed             ;Boolean       ;OnValidate=BEGIN
                                                                Removed := ("Ending Date" <> 0D);
                                                              END;

                                                   CaptionML=[ENU=Removed;
                                                              NOR=Fjernet;
                                                              SVE=Borttaget];
                                                   Editable=No }
    { 80  ;   ;Element             ;Code20        ;OnValidate=VAR
                                                                PlantElementMgt@1100529000 : Codeunit 11012582;
                                                              BEGIN
                                                                IF Element <> '' THEN BEGIN
                                                                  TESTFIELD("Plant Location (Inv.)");
                                                                  PlantElementMgt.OnValidateElement("Plant Location (Inv.)", Element, '', TRUE);
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              PlantElementMgt@1100529000 : Codeunit 11012582;
                                                            BEGIN
                                                              PlantElementMgt.OnLookupElement("Plant Location (Inv.)", Element, '', FALSE);
                                                            END;

                                                   CaptionML=[ENU=Element;
                                                              NOR=Element;
                                                              SVE=Element];
                                                   Editable=No }
    { 90  ;   ;Plant Transfer No.  ;Integer       ;CaptionML=ENU=Plant Transfer No.;
                                                   Description=Link with Plant Inventory;
                                                   Editable=No }
    { 100 ;   ;Invoiced until      ;Date          ;CaptionML=[ENU=Invoiced until;
                                                              NOR=Fakturert frem til;
                                                              SVE=Fakturerad till];
                                                   Editable=No }
    { 110 ;   ;Completely Invoiced ;Boolean       ;OnValidate=BEGIN
                                                                "Completely Invoiced" := (("Invoiced until" = "Ending Date") AND ("Ending Date" <> 0D));
                                                              END;

                                                   CaptionML=[ENU=Completely Invoiced;
                                                              NOR="Fullstendig fakturert ";
                                                              SVE=F„rdigt fakturerat];
                                                   Editable=No }
    { 120 ;   ;Last Invoice No.    ;Code20        ;TableRelation=IF (Invoice Status=CONST(Proposal)) "Sales Header".No. WHERE (Document Type=CONST(Invoice Proposal))
                                                                 ELSE IF (Invoice Status=CONST(Temporary)) "Sales Header".No. WHERE (Document Type=CONST(Invoice))
                                                                 ELSE IF (Invoice Status=CONST(Posted)) "Sales Invoice Header".No.;
                                                   OnLookup=BEGIN
                                                              ShowInvoiceCard("Invoice Status", "Last Invoice No.");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Last Invoice No.;
                                                              NOR=Siste Fakturanr.;
                                                              SVE=Senaste fakturanr];
                                                   Editable=No }
    { 130 ;   ;Invoice Status      ;Option        ;CaptionML=[ENU=Invoice Status;
                                                              NOR=Fakturastatus;
                                                              SVE=Invoice Status];
                                                   OptionCaptionML=[ENU=,Proposal,Temporary,Posted;
                                                                    NOR=,Forslag,Midlertidig,Bokf›rt;
                                                                    SVE=,F”rslag,Tillf„lligt,Bokf”rt];
                                                   OptionString=,Proposal,Temporary,Posted;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 140 ;   ;Previous Invoice No.;Code20        ;TableRelation="Sales Invoice Header".No.;
                                                   OnLookup=BEGIN
                                                              ShowInvoiceCard("Invoice Status"::Posted, "Previous Invoice No.");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Previous Invoice No.;
                                                              NOR=Forrige Fakturanr.;
                                                              SVE=F”reg†ende fakturanr];
                                                   Editable=No }
    { 150 ;   ;Previous Invoiced Until;Date       ;CaptionML=[ENU=Previous Invoiced Until;
                                                              NOR=Forrige fakturert Frem til;
                                                              SVE=F”reg†ende fakturerat till];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Plant Type,Plant No.,Agreement No.,Line No.;
                                                   Clustered=Yes }
    {    ;Plant Type,Plant No.,Agreement No.,Starting Date }
    {    ;Plant Type,Plant No.,Agreement No.,Plant Transfer No. }
    {    ;Invoice Status,Last Invoice No.          }
    {    ;Plant Location (Inv.),Completely Invoiced }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE ShowInvoiceCard@1100525005(InvoiceStatus@1100525003 : Option;InvoiceNo@1100525004 : Code[20]) DeletedOrPosted : Boolean;
    VAR
      SalesHeader@1100525000 : Record 36;
      SalesInvoiceHeader@1100525001 : Record 112;
      SalesCrMemoHeader@1100525002 : Record 114;
    BEGIN
      IF InvoiceNo = '' THEN
        EXIT(FALSE);
      CASE InvoiceStatus OF
        "Invoice Status"::Proposal:
          BEGIN
            IF NOT SalesHeader.GET(SalesHeader."Document Type"::"Invoice Proposal", InvoiceNo) THEN
              EXIT(FALSE);
            SalesHeader.SETRANGE("Document Type", SalesHeader."Document Type");
            SalesHeader.SETRANGE("No.", InvoiceNo);
            PAGE.RUNMODAL(PAGE::"Invoice Proposal", SalesHeader);
            IF NOT SalesHeader.GET(SalesHeader."Document Type", InvoiceNo) THEN
              EXIT(TRUE);  // Invoice deleted or posted
          END;
        "Invoice Status"::"Temporary":
          BEGIN
            IF NOT SalesHeader.GET(SalesHeader."Document Type"::Invoice, InvoiceNo) THEN BEGIN
              IF NOT SalesHeader.GET(SalesHeader."Document Type"::"Credit Memo", InvoiceNo) THEN
                EXIT(FALSE);
            END;
            SalesHeader.SETRANGE("Document Type", SalesHeader."Document Type");
            SalesHeader.SETRANGE("No.", InvoiceNo);
            IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo" THEN
              PAGE.RUNMODAL(PAGE::"Sales Credit Memo", SalesHeader)
            ELSE
              PAGE.RUNMODAL(PAGE::"Sales Invoice", SalesHeader);
            IF NOT SalesHeader.GET(SalesHeader."Document Type", InvoiceNo) THEN
              EXIT(TRUE);  // Invoice deleted or posted
          END;
        "Invoice Status"::Posted:
          BEGIN
            IF SalesInvoiceHeader.GET("Last Invoice No.") THEN BEGIN
              SalesInvoiceHeader.SETRANGE("No.", InvoiceNo);
              PAGE.RUNMODAL(PAGE::"Posted Sales Invoice", SalesInvoiceHeader);
            END;
            IF SalesCrMemoHeader.GET("Last Invoice No.") THEN BEGIN
              SalesCrMemoHeader.SETRANGE("No.", InvoiceNo);
              PAGE.RUNMODAL(PAGE::"Posted Sales Credit Memo", SalesCrMemoHeader);
            END;
          END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE BuildInvoicePeriods@1100529001(RentalAgreement@1100529000 : Record 11229935);
    VAR
      RentalAgrInvPeriod@1100529001 : Record 11229937;
      LastTransferNo@1100529002 : Integer;
    BEGIN
      CheckDeleteInvoicePeriods(RentalAgreement);
      CASE RentalAgreement."Invoice Agreement Location" OF
        RentalAgreement."Invoice Agreement Location"::Always:
          BEGIN
            RentalAgrInvPeriod.SETRANGE("Plant Type", RentalAgreement."Plant Type");
            RentalAgrInvPeriod.SETRANGE("Plant No.", RentalAgreement."Plant No.");
            RentalAgrInvPeriod.SETRANGE("Agreement No.", RentalAgreement."Agreement No.");
            IF NOT RentalAgrInvPeriod.FINDLAST THEN BEGIN
              InsertRentalAgreementInvoicePeriod(RentalAgreement, RentalAgreement."Plant Location",
                RentalAgreement."Starting Date", RentalAgreement."Ending Date", '', 0, RentalAgrInvPeriod);
            END;
            UpdateRentalAgreementInvoicePeriodEndingDate(RentalAgrInvPeriod, RentalAgreement."Ending Date");
          END;
        RentalAgreement."Invoice Agreement Location"::"Location Dependent":
          BEGIN
            LastTransferNo := GetLastProcessedTransferOnOtherLocation(RentalAgreement, RentalAgrInvPeriod);
            IF LastTransferNo > 0 THEN
              UpdateLastTransferOnOtherLocationRemoved(RentalAgreement, RentalAgrInvPeriod);
            IF (LastTransferNo = 0) OR RentalAgrInvPeriod.Removed THEN
              CreateInvoicePeriodsLocationDependent(RentalAgreement, LastTransferNo);
            FinishInvoicePeriodsLocationDependent(RentalAgreement);
          END;
      END;
    END;

    LOCAL PROCEDURE CheckDeleteInvoicePeriods@1100529019(RentalAgreement@1100529001 : Record 11229935);
    VAR
      RentalAgrInvPeriod@1100529000 : Record 11229937;
    BEGIN
      RentalAgreement.CALCFIELDS("Invoiced until");
      IF RentalAgreement."Invoiced until" = 0D THEN BEGIN
        RentalAgrInvPeriod.SETRANGE("Plant Type", RentalAgreement."Plant Type");
        RentalAgrInvPeriod.SETRANGE("Plant No.", RentalAgreement."Plant No.");
        RentalAgrInvPeriod.SETRANGE("Agreement No.", RentalAgreement."Agreement No.");
        RentalAgrInvPeriod.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE CreateInvoicePeriodsLocationDependent@1100529009(RentalAgreement@1100529004 : Record 11229935;LastTransferNo@1100529005 : Integer);
    VAR
      RentalAgrInvPeriod@1100529001 : Record 11229937;
      RentalAgrInvPeriod2@1100529006 : Record 11229937;
      PlantInventory@1100529000 : Record 11012555;
      RentalStartDate@1100529002 : Date;
      RentalEndDate@1100529003 : Date;
    BEGIN
      // Build periods for plant on other locations (not on agreement loc.), fill remaining (on depot, on agr. loc., nowhere)
      // with periods on the agreement location.
      PlantInventory.SETCURRENTKEY("Plant Type", "Plant No.", "Plant Transfer No.");
      PlantInventory.SETRANGE("Plant Type", RentalAgreement."Plant Type");
      PlantInventory.SETRANGE("Plant No.", RentalAgreement."Plant No.");
      PlantInventory.SETFILTER("Plant Transfer No.", '>%1', LastTransferNo);
      PlantInventory.SETRANGE(Depot, FALSE);
      PlantInventory.SETFILTER(Location, '<>%1', RentalAgreement."Plant Location");
      PlantInventory.SETFILTER("Present from", '<=%1', RentalAgreement."Ending Date");
      PlantInventory.SETFILTER("Removed on", '>=%1|=%2', RentalAgreement."Starting Date", 0D);
      IF PlantInventory.FINDSET THEN BEGIN
        REPEAT
          RentalStartDate := GetRentalStartDate(RentalAgreement, PlantInventory);
          RentalEndDate := GetRentalEndDate(RentalAgreement, PlantInventory);
          IF (RentalStartDate >= RentalAgreement."Starting Date") AND (RentalStartDate <= RentalAgreement."Ending Date") AND
             ((RentalEndDate >= RentalStartDate) OR (RentalEndDate = 0D))
          THEN BEGIN
            RentalAgrInvPeriod2.SETRANGE("Plant Type", RentalAgreement."Plant Type");
            RentalAgrInvPeriod2.SETRANGE("Plant No.", RentalAgreement."Plant No.");
            RentalAgrInvPeriod2.SETRANGE("Agreement No.", RentalAgreement."Agreement No.");
            IF RentalAgrInvPeriod2.FINDLAST THEN BEGIN
              IF (NOT RentalAgrInvPeriod2.Removed) AND (RentalAgrInvPeriod2."Plant Location (Inv.)" = RentalAgreement."Plant Location") THEN
                UpdateRentalAgreementInvoicePeriodEndingDate(RentalAgrInvPeriod2, RentalStartDate - 1);
              IF (RentalAgrInvPeriod2."Ending Date" <> 0D) AND (RentalAgrInvPeriod2."Ending Date" < RentalStartDate - 1) AND
                  (RentalAgrInvPeriod2."Plant Location (Inv.)" <> RentalAgreement."Plant Location")
              THEN BEGIN
                InsertRentalAgreementInvoicePeriod(RentalAgreement, RentalAgreement."Plant Location",
                  RentalAgrInvPeriod2."Ending Date" + 1, RentalStartDate - 1, '', 0, RentalAgrInvPeriod2);
              END;
            END ELSE BEGIN
              IF RentalStartDate - 1 >= RentalAgreement."Starting Date" THEN BEGIN
                InsertRentalAgreementInvoicePeriod(RentalAgreement, RentalAgreement."Plant Location",
                  RentalAgreement."Starting Date", RentalStartDate - 1, '', 0, RentalAgrInvPeriod2);
              END;
            END;
            PlantInventory.CALCFIELDS(Element);
            InsertRentalAgreementInvoicePeriod(RentalAgreement, PlantInventory.Location,
              RentalStartDate, RentalEndDate, PlantInventory.Element, PlantInventory."Plant Transfer No.", RentalAgrInvPeriod);
          END;
        UNTIL PlantInventory.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FinishInvoicePeriodsLocationDependent@1100529007(RentalAgreement@1100529000 : Record 11229935);
    VAR
      RentalAgrInvPeriod@1100529001 : Record 11229937;
    BEGIN
      RentalAgrInvPeriod.SETRANGE("Plant Type", RentalAgreement."Plant Type");
      RentalAgrInvPeriod.SETRANGE("Plant No.", RentalAgreement."Plant No.");
      RentalAgrInvPeriod.SETRANGE("Agreement No.", RentalAgreement."Agreement No.");
      IF RentalAgrInvPeriod.FINDLAST THEN BEGIN
        IF RentalAgrInvPeriod.Removed AND (RentalAgrInvPeriod."Ending Date" < RentalAgreement."Ending Date") THEN BEGIN
          InsertRentalAgreementInvoicePeriod(RentalAgreement, RentalAgreement."Plant Location",
            RentalAgrInvPeriod."Ending Date" + 1, 0D, '', 0, RentalAgrInvPeriod);
        END;
      END ELSE BEGIN
        InsertRentalAgreementInvoicePeriod(RentalAgreement, RentalAgreement."Plant Location",
          RentalAgreement."Starting Date", 0D, '', 0, RentalAgrInvPeriod);
      END;

      RentalAgrInvPeriod.RESET;
      RentalAgrInvPeriod.SETRANGE("Plant Type", RentalAgreement."Plant Type");
      RentalAgrInvPeriod.SETRANGE("Plant No.", RentalAgreement."Plant No.");
      RentalAgrInvPeriod.SETRANGE("Agreement No.", RentalAgreement."Agreement No.");
      IF RentalAgrInvPeriod.FINDLAST THEN BEGIN
        IF (NOT RentalAgrInvPeriod.Removed) AND (TODAY > RentalAgreement."Ending Date" + 28) THEN BEGIN
          // Assumed that there will not be a transfer (plant/exit order) before the end date of the agreement
          IF NOT ExpectedTransferBeforeAgreementEndDate(RentalAgreement, RentalAgrInvPeriod) THEN
            UpdateRentalAgreementInvoicePeriodEndingDate(RentalAgrInvPeriod, RentalAgreement."Ending Date");
        END;
      END;
    END;

    LOCAL PROCEDURE GetLastProcessedTransferOnOtherLocation@1100529000(RentalAgreement@1100529000 : Record 11229935;VAR RentalAgrInvPeriod@1100529001 : Record 11229937) : Integer;
    BEGIN
      RentalAgrInvPeriod.RESET;
      RentalAgrInvPeriod.SETCURRENTKEY("Plant Type", "Plant No.", "Agreement No.", "Plant Transfer No.");
      RentalAgrInvPeriod.SETRANGE("Plant Type", RentalAgreement."Plant Type");
      RentalAgrInvPeriod.SETRANGE("Plant No.", RentalAgreement."Plant No.");
      RentalAgrInvPeriod.SETRANGE("Agreement No.", RentalAgreement."Agreement No.");
      RentalAgrInvPeriod.SETFILTER("Plant Location (Inv.)", '<>%1', "Plant Location (Inv.)");
      IF NOT RentalAgrInvPeriod.FINDLAST THEN
        RentalAgrInvPeriod.INIT;
      EXIT(RentalAgrInvPeriod."Plant Transfer No.")
    END;

    LOCAL PROCEDURE UpdateLastTransferOnOtherLocationRemoved@1100529005(RentalAgreement@1100529000 : Record 11229935;VAR RentalAgrInvPeriod@1100529001 : Record 11229937);
    VAR
      PlantInventory@1100529002 : Record 11012555;
    BEGIN
      IF NOT RentalAgrInvPeriod.Removed THEN BEGIN
        PlantInventory.SETCURRENTKEY("Plant Type", "Plant No.", "Plant Transfer No.");
        PlantInventory.SETRANGE("Plant Type", RentalAgrInvPeriod."Plant Type");
        PlantInventory.SETRANGE("Plant No.", RentalAgrInvPeriod."Plant No.");
        PlantInventory.SETRANGE("Plant Transfer No.", RentalAgrInvPeriod."Plant Transfer No.");
        PlantInventory.FINDFIRST;
        IF PlantInventory.Removed THEN
          UpdateRentalAgreementInvoicePeriodEndingDate(RentalAgrInvPeriod, GetRentalEndDate(RentalAgreement, PlantInventory));
      END;
    END;

    LOCAL PROCEDURE GetRentalStartDate@1100529002(RentalAgreement@1100529000 : Record 11229935;PlantInventory@1100529001 : Record 11012555) RentalStartDate : Date;
    BEGIN
      IF (PlantInventory."Rental Start Date" = 0D) OR (RentalStartDate < PlantInventory."Present from") THEN
        RentalStartDate := PlantInventory."Present from"
      ELSE
        RentalStartDate := PlantInventory."Rental Start Date";
      IF RentalStartDate < RentalAgreement."Starting Date" THEN
        RentalStartDate := RentalAgreement."Starting Date";
    END;

    LOCAL PROCEDURE GetRentalEndDate@1100529004(RentalAgreement@1100529000 : Record 11229935;PlantInventory@1100529001 : Record 11012555) RentalEndDate : Date;
    BEGIN
      IF NOT PlantInventory.Removed THEN
        RentalEndDate := 0D
      ELSE BEGIN
        IF (PlantInventory."Rental End Date" = 0D) OR (PlantInventory."Rental End Date" > PlantInventory."Removed on") THEN
          RentalEndDate := PlantInventory."Removed on"
        ELSE
          RentalEndDate := PlantInventory."Rental End Date";
        IF RentalEndDate > RentalAgreement."Ending Date" THEN
           RentalEndDate := RentalAgreement."Ending Date";
      END;
    END;

    LOCAL PROCEDURE ExpectedTransferBeforeAgreementEndDate@1100529010(RentalAgreement@1100529000 : Record 11229935;RentalAgrInvPeriod@1100529003 : Record 11229937) : Boolean;
    VAR
      PlantOrderLine@1100529002 : Record 11012557;
      ExitOrderLine@1100529001 : Record 11012560;
    BEGIN
      PlantOrderLine.SETCURRENTKEY(Posted, "Plant Type");
      PlantOrderLine.SETRANGE(Posted, FALSE);
      PlantOrderLine.SETRANGE("Plant Type", RentalAgreement."Plant Type");
      PlantOrderLine.SETRANGE("No.", RentalAgreement."Plant No.");
      PlantOrderLine.SETRANGE(Type, PlantOrderLine.Type::Plant);
      PlantOrderLine.SETRANGE("Transfer Date", RentalAgrInvPeriod."Starting Date" - 1, RentalAgreement."Ending Date");
      IF NOT PlantOrderLine.ISEMPTY THEN
        EXIT(TRUE);
      ExitOrderLine.SETCURRENTKEY("Plant Type","No.","Exit-date");
      ExitOrderLine.SETRANGE(Posted, FALSE);
      ExitOrderLine.SETRANGE("Plant Type", RentalAgreement."Plant Type");
      ExitOrderLine.SETRANGE("No.", RentalAgreement."Plant No.");
      ExitOrderLine.SETRANGE(Type, ExitOrderLine.Type::Plant);
      ExitOrderLine.SETRANGE("Exit-date", RentalAgrInvPeriod."Starting Date" - 1, RentalAgreement."Ending Date");
      IF NOT ExitOrderLine.ISEMPTY THEN
        EXIT(TRUE);
      EXIT(FALSE);;
    END;

    LOCAL PROCEDURE InsertRentalAgreementInvoicePeriod@1100529003(RentalAgreement@1100529006 : Record 11229935;PlantLocationNo@1100529002 : Code[20];StartingDate@1100529003 : Date;EndingDate@1100529004 : Date;ProjElement@1100529001 : Code[20];PlantInventoryTransferNo@1100529005 : Integer;VAR RentalAgrInvPeriod@1100529000 : Record 11229937);
    BEGIN
      RentalAgrInvPeriod.INIT;
      RentalAgrInvPeriod."Plant Type" := RentalAgreement."Plant Type";
      RentalAgrInvPeriod."Plant No." := RentalAgreement."Plant No.";
      RentalAgrInvPeriod."Agreement No." := RentalAgreement."Agreement No.";
      RentalAgrInvPeriod."Line No." := GetRentalAgreementInvoicePeriodNextLineNo(RentalAgreement);
      RentalAgrInvPeriod."Plant Location (Inv.)" := PlantLocationNo;
      RentalAgrInvPeriod."Starting Date" := StartingDate;
      RentalAgrInvPeriod."Ending Date" := EndingDate;
      RentalAgrInvPeriod.Element := ProjElement;
      RentalAgrInvPeriod."Plant Transfer No." := PlantInventoryTransferNo;
      RentalAgrInvPeriod.INSERT(TRUE);  //Update Removed
    END;

    LOCAL PROCEDURE UpdateRentalAgreementInvoicePeriodEndingDate@1100529011(VAR RentalAgrInvPeriod@1100529000 : Record 11229937;EndingDate@1100529001 : Date);
    BEGIN
      IF (EndingDate <> 0D) AND (EndingDate < RentalAgrInvPeriod."Starting Date") THEN BEGIN
        IF (RentalAgrInvPeriod."Invoiced until" <> 0D) THEN
          EndingDate := RentalAgrInvPeriod."Starting Date" - 1  // Must be credited
        ELSE BEGIN
          RentalAgrInvPeriod.DELETE;
          RentalAgrInvPeriod.INIT;
          EXIT;
        END;
      END;
      IF RentalAgrInvPeriod."Ending Date" <> EndingDate THEN BEGIN
        RentalAgrInvPeriod."Ending Date" := EndingDate;
        RentalAgrInvPeriod.MODIFY(TRUE);  //Update Removed and "Completely Invoiced"
      END;
    END;

    LOCAL PROCEDURE GetRentalAgreementInvoicePeriodNextLineNo@1100529006(RentalAgreement@1100529001 : Record 11229935) : Integer;
    VAR
      RentalAgrInvPeriod@1100529000 : Record 11229937;
    BEGIN
      RentalAgrInvPeriod.SETRANGE("Plant Type", RentalAgreement."Plant Type");
      RentalAgrInvPeriod.SETRANGE("Plant No.", RentalAgreement."Plant No.");
      RentalAgrInvPeriod.SETRANGE("Agreement No.", RentalAgreement."Agreement No.");
      IF RentalAgrInvPeriod.FINDLAST THEN
        EXIT(RentalAgrInvPeriod."Line No." + 1);
      EXIT(1);
    END;

    BEGIN
    END.
  }
}

