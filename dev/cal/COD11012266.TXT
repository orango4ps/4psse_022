OBJECT Codeunit 11012266 Web Service Management 4PS
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      FileMgt@1100525003 : Codeunit 419;
      SOAPNamespaces@1100528300 : ARRAY [10,2] OF Text;
      NodeType@1100525004 : ',Element,Attribute,Text';
      Text000@1100525006 : TextConst 'DEU=Beim Aufruf des Webservice:\\%1\\ist ein Fehler aufgetreten. Fehlercode: %2\\Fehlerstring: %3;ENU=An error occurred during calling the web service:\\%1\\Error Code: %2\\Error String: %3;NLD=Er is een fout opgetreden tijdens het aanroepen van de webservice:\\%1\\Foutcode: %2\\Foutomschrijving: %3;SVE=Ett fel uppstod vid anrop till Web Service:\\%1\\Felkod: %2\\Feltext: %3';
      Text001@1100526200 : TextConst 'DEU=Der erwartete xpath wurde nicht gefunden.\\%1;ENU=Expected Xpath could not be found.\\%1;NLD=De verwachte xpath is niet gevonden.\\%1;NOR=Kan ikke finne forventet Xpath.\\%1;SVE=Det gick inte att hitta f”rv„ntad Xpath.\\%1';
      Text002@1100528401 : TextConst 'DEU=Tag %1 wurde nicht gefunden.;ENU=Tag %1 could not be found.;NLD=Tag %1 kon niet gevonden worden.;NOR=Finner ikke Taggen %1.;SVE=Taggen %1 kunde inte hittas.';
      Text003@1100528402 : TextConst 'DEU=Fehler bei Web Service-Kommunikation.;ENU=Web Service Communication Failed.;NLD=Webservice communicatie is mislukt.;NOR=Kommunikasjon med Web Service mislyktes.;SVE=Webbtj„nstkommunikationen misslyckades.';
      Text004@1210190000 : TextConst 'DEU=Anfrage konnte nicht versendet werden (error %1: %2).\\Wenden Sie sich an Ihren Navision-Verwalter.;ENU=Failed to send request (error %1: %2). \\Please contact your Navision Administrator.;NLD=Request kon niet verstuurd worden (error %1: %2).\\Neem contact op met uw Navision beheerder.;NOR=Kan ikke sende foresp›rsel (feil %1: %2). \\Kontakt din Navision-administrator.;SVE=Det gick inte att skicka f”rfr†gan (fel %1: %2). \\Kontakta din Navision-administrat”r.';
      Text005@1100528301 : TextConst 'DEU=Fataler Fehler in der Base64-Dekodierung.;ENU=Fatal Error in the Base64 decoding.;NLD=Er is een fatale fout opgetreden in de Base64 decoding.';
      Request@1100528600 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RequestXmlNamespaceManager@1100528604 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      Response@1100528601 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ResponseXmlNamespaceManager@1100528605 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      SOAPMethod@1100528602 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";

    PROCEDURE SetGlobalVars@1100528306();
    BEGIN
      SOAPNamespaces[1,1] := 'soap';
      SOAPNamespaces[1,2] := 'http://schemas.xmlsoap.org/soap/envelope/';
    END;

    PROCEDURE PrepareSOAPRequest@1100525005(Namespace@1100528400 : Text[250];MethodName@1100525008 : Text[80]);
    VAR
      Envelope@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      Body@1100525007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      SetGlobalVars;
      PrepareRequest;

      AddRequestSelectionNamespaces(SOAPNamespaces);

      AppendElement(Request, SOAPNamespaces[1,2], SOAPNamespaces[1,1]+':Envelope', '', Envelope);
      AddSelectionNamespaces(Request, RequestXmlNamespaceManager, SOAPNamespaces);

      AppendElement(Envelope, SOAPNamespaces[1,2], SOAPNamespaces[1,1]+':Body', '', Body);
      AppendElement(Body, Namespace, MethodName, '', SOAPMethod);
    END;

    PROCEDURE PrepareXMLRPCRequest@1210190001(Namespace@1210190002 : Text[250];RootTag@1210190003 : Text);
    VAR
      Dummy@1210190001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      SetGlobalVars;
      PrepareRequest;
      AppendElement(Request, Namespace, RootTag, '', Dummy); //TU specific??
    END;

    LOCAL PROCEDURE PrepareRequest@1210190013();
    BEGIN
      IF ISNULL(Request) THEN
        Request := Request.XmlDocument;
      AppendProcessingInstruction(Request, 'xml', 'version="1.0" encoding="utf-8"');
    END;

    PROCEDURE AppendSOAPParameter@1100525029(Namespace@1100528400 : Text[250];Name@1100525000 : Text[80];Value@1100525001 : Text);
    VAR
      Parameter@1100525002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      AppendElement(SOAPMethod, Namespace, Name, Value, Parameter);
    END;

    PROCEDURE AppendParameter@1100528403(ParentXPath@1100528401 : Text[250];Namespace@1100528400 : Text[250];Name@1100525000 : Text[80];Value@1100525001 : Text);
    VAR
      SubParameter@1100525002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      ParentNode@1100528402 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      ParentNode := Request.SelectSingleNode(ParentXPath, RequestXmlNamespaceManager);
      IF NOT ISNULL(ParentNode) THEN
        AppendElement(ParentNode, Namespace, Name, Value, SubParameter)
      ELSE
        ERROR(Text002, ParentXPath);
    END;

    PROCEDURE CopyRequestToRequest@1100528305(FromXpath@1210190000 : Text[250];ToXpath@1210190001 : Text[250]);
    VAR
      FromNode@1210190002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ToNode@1210190003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      FromNode := Request.DocumentElement.SelectSingleNode(FromXpath, RequestXmlNamespaceManager);
      ToNode := Request.DocumentElement.SelectSingleNode(ToXpath, RequestXmlNamespaceManager);
      CopyNodeToNode(FromNode, ToNode, FromXpath, ToXpath);
    END;

    PROCEDURE CopyResponseToResponse@1100528310(FromXpath@1210190000 : Text[250];ToXpath@1210190001 : Text[250]);
    VAR
      FromNode@1210190002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ToNode@1210190003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      FromNode := Response.DocumentElement.SelectSingleNode(FromXpath, ResponseXmlNamespaceManager);
      ToNode := Response.DocumentElement.SelectSingleNode(ToXpath, ResponseXmlNamespaceManager);
      CopyNodeToNode(FromNode, ToNode, FromXpath, ToXpath);
    END;

    PROCEDURE CopyResponseToRequest@1210190009(FromXpath@1210190000 : Text[250];ToXpath@1210190001 : Text[250]);
    VAR
      FromNode@1210190002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ToNode@1210190003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      FromNode := Response.DocumentElement.SelectSingleNode(FromXpath, ResponseXmlNamespaceManager);
      ToNode := Request.DocumentElement.SelectSingleNode(ToXpath, RequestXmlNamespaceManager);
      CopyNodeToNode(FromNode, ToNode, FromXpath, ToXpath);
    END;

    LOCAL PROCEDURE CopyNodeToNode@1100528307(FromNode@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";ToNode@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";FromXpath@1210190000 : Text[250];ToXpath@1210190001 : Text[250]);
    BEGIN
      IF ISNULL(FromNode) THEN BEGIN
        ERROR(Text001, FromXpath);
      END;

      IF ISNULL(ToNode) THEN BEGIN
        ERROR(Text001, ToXpath);
      END;

      ToNode.AppendChild(FromNode);
    END;

    PROCEDURE SendSOAPRequest@1100525006(MethodName@1100528400 : Text[80];ServiceURL@1100525001 : Text[1024];ThrowError@1100525002 : Boolean);
    BEGIN
      SendSOAPRequest2(MethodName, ServiceURL, '', '', ThrowError);
    END;

    PROCEDURE SendSOAPRequest2@1100528309(MethodName@1100528400 : Text[80];ServiceURL@1100525001 : Text;Username@1100528302 : Text[100];Password@1100528303 : Text[50];ThrowError@1100525002 : Boolean);
    VAR
      HttpWebRequest@1100525000 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpWebResponse@1100528602 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      NetworkCredential@1100528600 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      MemoryStream@1100528601 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
    BEGIN
      //Length of Username is 100 because domain name can be included in Username.
      HttpWebRequest := HttpWebRequest.Create(ServiceURL);
      HttpWebRequest.Method := 'POST';
      IF Username <> '' THEN BEGIN
        NetworkCredential := NetworkCredential.NetworkCredential(Username, Password);
        HttpWebRequest.Credentials := NetworkCredential;
      END;

      HttpWebRequest.ContentType := 'text/xml; charset=utf-8';
      IF MethodName <> '' THEN
        HttpWebRequest.Headers.Add('SOAPAction', MethodName);

      MemoryStream := HttpWebRequest.GetRequestStream;
      Request.Save(MemoryStream);
      MemoryStream.Flush;
      MemoryStream.Close;

      HttpWebResponse := HttpWebRequest.GetResponse;
      IF NOT ISNULL(HttpWebResponse) THEN BEGIN
        MemoryStream := HttpWebResponse.GetResponseStream;
        IF ISNULL(Response) THEN
          Response := Response.XmlDocument;
        Response.Load(MemoryStream);
        MemoryStream.Flush;
        MemoryStream.Close;
      END ELSE
        HttpWebResponse := HttpWebResponse.HttpWebResponse;

      IF (HttpWebResponse.StatusCode >= 400) AND (HttpWebResponse.StatusCode < 500) THEN
        ERROR(Text004, HttpWebResponse.StatusCode, HttpWebResponse.StatusDescription);

      AddResponseSelectionNamespaces(SOAPNamespaces);

      IF ThrowError THEN BEGIN
        IF NOT Response.HasChildNodes THEN
          ERROR(Text003);
        IF SOAPFaultOccurred THEN
          ThrowSOAPFault;
      END;
    END;

    PROCEDURE SendXMLRPCRequest@1210190002(MethodName@1100528400 : Text[80];ServiceURL@1100525001 : Text;Username@1100528604 : Text[100];Password@1100528603 : Text[50];ThrowError@1100525002 : Boolean);
    VAR
      HttpWebRequest@1100525000 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpWebResponse@1100528602 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      NetworkCredential@1100528601 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      MemoryStream@1100528600 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
    BEGIN
      HttpWebRequest := HttpWebRequest.Create(ServiceURL);
      HttpWebRequest.Method := 'POST';
      IF Username <> '' THEN BEGIN
        NetworkCredential := NetworkCredential.NetworkCredential(Username, Password);
        HttpWebRequest.Credentials := NetworkCredential;
      END;

      HttpWebRequest.ContentType := 'text/xml; charset=utf-8';
      IF MethodName <> '' THEN
        HttpWebRequest.Headers.Add('SOAPAction', MethodName);

      MemoryStream := HttpWebRequest.GetRequestStream;
      Request.Save(MemoryStream);
      MemoryStream.Flush;
      MemoryStream.Close;

      HttpWebResponse := HttpWebRequest.GetResponse;
      IF NOT ISNULL(HttpWebResponse) THEN BEGIN
        MemoryStream := HttpWebResponse.GetResponseStream;
        IF ISNULL(Response) THEN
          Response := Response.XmlDocument;
        Response.Load(MemoryStream);
        MemoryStream.Flush;
        MemoryStream.Close;
      END ELSE
        HttpWebResponse := HttpWebResponse.HttpWebResponse;

      IF (HttpWebResponse.StatusCode >= 400) AND (HttpWebResponse.StatusCode < 500) THEN
        ERROR(Text004, HttpWebResponse.StatusCode, HttpWebResponse.StatusDescription);

      AddResponseSelectionNamespaces(SOAPNamespaces);

      IF ThrowError THEN BEGIN
        IF NOT Response.HasChildNodes THEN
          ERROR(Text003);
        IF XMLRPCFaultOccurred THEN
          ThrowXMLRPCFault;
      END;
    END;

    PROCEDURE DecodeBase64ResponseNode@1100528311(Xpath@1100528308 : Text[250];RootNamespace@1210190000 : Text[250];NoOfSpaces@1210190001 : Integer);
    VAR
      NodeToBeDecoded@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DecodedResponse@1100528305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DecodedNode@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Convert@1100525000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      DecodedText@1100525001 : Text;
      Encoding@1100529900 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      NodeToBeDecoded := Response.DocumentElement.SelectSingleNode(Xpath, ResponseXmlNamespaceManager);
      IF ISNULL(NodeToBeDecoded) THEN
        ERROR(Text002, Xpath);

      DecodedText := Encoding.UTF8.GetString(Convert.FromBase64String(NodeToBeDecoded.InnerText));
      IF DecodedText = '' THEN
        ERROR(Text005);

      DecodedResponse := DecodedResponse.XmlDocument;
      DecodedResponse.LoadXml(DecodedText);

      DecodedNode := DecodedResponse.FirstChild;
      IF (DecodedNode.Name = 'xml') AND (NOT DecodedNode.HasChildNodes) THEN BEGIN
        DecodedResponse.RemoveChild(DecodedNode); //remove the '<?xml ...' node
        DecodedNode := DecodedResponse.FirstChild;
      END;

      IF (RootNamespace <> '') THEN BEGIN
        DecodedResponse.LoadXml(AddNamespaceToText(DecodedNode.InnerText, RootNamespace, NoOfSpaces));
        DecodedNode := DecodedResponse.FirstChild;
      END;

      NodeToBeDecoded.InnerText := '';
      NodeToBeDecoded.AppendChild(DecodedNode);
    END;

    PROCEDURE GetRequestValueText@1210190000(Xpath@1100525000 : Text[250];ValueMustExist@1100525002 : Boolean) : Text[1024];
    VAR
      Node@1100525001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TextNode@1100528400 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      Node := Request.DocumentElement.SelectSingleNode(Xpath, RequestXmlNamespaceManager);
      IF ISNULL(Node) THEN BEGIN
        IF ValueMustExist THEN
          ERROR(Text001, Xpath);
        EXIT('');
      END;


      IF Node.NodeType.Equals(Node.NodeType.Text) THEN
        TextNode := Node
      ELSE
        TextNode := Node.SelectSingleNode('./text()[1]', RequestXmlNamespaceManager); //Select first child node of type text.

      IF NOT ISNULL(TextNode) THEN
        EXIT(COPYSTR(TextNode.InnerText, 1, 1024));
    END;

    PROCEDURE SetRequestValueText@1210190008(Xpath@1100525000 : Text[250];Value@1100525002 : Text);
    VAR
      Node@1100525001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TextNode@1100528400 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      Node := Request.DocumentElement.SelectSingleNode(Xpath, RequestXmlNamespaceManager);
      IF ISNULL(Node) THEN
        ERROR(Text001, Xpath);

      IF Node.NodeType.Equals(Node.NodeType.Text) THEN
        TextNode := Node
      ELSE
        TextNode := Node.SelectSingleNode('./text()[1]', RequestXmlNamespaceManager);

      IF NOT ISNULL(TextNode) THEN
        TextNode.InnerText := Value;
    END;

    PROCEDURE RequestNodeIsPresent@1100528408(Xpath@1100525000 : Text[250]) : Boolean;
    VAR
      Node@1100525001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF (ISNULL(Request)) OR (NOT Request.HasChildNodes) THEN
        EXIT(FALSE);

      Node := Response.DocumentElement.SelectSingleNode(Xpath, ResponseXmlNamespaceManager);
      IF ISNULL(Node) THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE ResponseNodeIsPresent@1100528302(Xpath@1100525000 : Text[250]) : Boolean;
    VAR
      Node@1100525001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF (ISNULL(Response)) OR (NOT Response.HasChildNodes) THEN
        EXIT(FALSE);

      Node := Response.DocumentElement.SelectSingleNode(Xpath, ResponseXmlNamespaceManager);
      IF ISNULL(Node) THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE GetResponseValueText@1100525007(Xpath@1100525000 : Text[250];ValueMustExist@1100525002 : Boolean) : Text[1024];
    VAR
      Node@1100525001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TextNode@1100528400 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      Node := Response.DocumentElement.SelectSingleNode(Xpath, ResponseXmlNamespaceManager);
      IF ISNULL(Node) THEN BEGIN
        IF ValueMustExist THEN
          ERROR(Text001, Xpath);
        EXIT('');
      END;

      IF Node.NodeType.Equals(Node.NodeType.Text) THEN
        TextNode := Node
      ELSE
        TextNode := Node.SelectSingleNode('./text()[1]', ResponseXmlNamespaceManager); //Select first child node of type text.

      IF NOT ISNULL(TextNode) THEN
        EXIT(COPYSTR(TextNode.InnerText, 1, 1024));
    END;

    PROCEDURE GetResponseValueInt@1100525002(Xpath@1100525000 : Text[250];ValueMustExist@1100525001 : Boolean) Result : Integer;
    BEGIN
      EVALUATE(Result, GetResponseValueText(Xpath, ValueMustExist));
    END;

    PROCEDURE GetResponseValueDec@1100526202(Xpath@1100526201 : Text[250];ValueMustExist@1100526200 : Boolean) Result : Decimal;
    VAR
      TextString@1100528300 : Text[30];
      DecimalSeparator@1100528301 : Text[1];
    BEGIN
      DecimalSeparator := DELCHR(FORMAT(0.1), '=', '01');
      TextString := GetResponseValueText(Xpath, ValueMustExist);
      TextString := CONVERTSTR(TextString, '.', DecimalSeparator);
      EVALUATE(Result, TextString);
    END;

    PROCEDURE GetResponseValueDate@1100528300(Xpath@1100525000 : Text[250];ValueMustExist@1100525002 : Boolean) : Date;
    VAR
      StringDate@1100528300 : Text[30];
      Day@1100528301 : Integer;
      Month@1100528302 : Integer;
      Year@1100528303 : Integer;
    BEGIN
      //              0        1         2
      //              12345678901234567890123456789
      //XML DateTime: 2011-10-18T00:00:00.000+02:00
      StringDate := GetResponseValueText(Xpath, ValueMustExist);
      IF (StringDate = '') OR (STRLEN(StringDate) < 10) THEN
        EXIT(0D);

      EVALUATE(Day, COPYSTR(StringDate, 9,2));
      EVALUATE(Month, COPYSTR(StringDate, 6,2));
      EVALUATE(Year, COPYSTR(StringDate, 1,4));

      IF (Day = 1) AND (Month = 1) AND (Year = 1) THEN
        EXIT(0D)
      ELSE
        EXIT(DMY2DATE(Day, Month, Year));
    END;

    PROCEDURE GetResponseValueCount@1100525008(Xpath@1100525000 : Text[250]) : Integer;
    BEGIN
      EXIT(Response.DocumentElement.SelectNodes(Xpath, ResponseXmlNamespaceManager).Count);
    END;

    PROCEDURE GetResponseAttributeValueText@1100528303(Xpath@1100525000 : Text[250];NodeMustExist@1100525002 : Boolean;AttributeName@1100528301 : Text[30]) : Text;
    VAR
      Node@1100525001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Element@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      Node := Response.DocumentElement.SelectSingleNode(Xpath, ResponseXmlNamespaceManager);
      IF ISNULL(Node) THEN BEGIN
        IF NodeMustExist THEN
          ERROR(Text001, Xpath);
        EXIT('');
      END;

      Element := Node;
      EXIT(COPYSTR(FORMAT(Element.GetAttribute(AttributeName)), 1, 1024));
    END;

    PROCEDURE GetResponseAttributeValueInt@1100528304(Xpath@1100525000 : Text[250];NodeMustExist@1100525002 : Boolean;AttributeName@1100528301 : Text[30]) Result : Integer;
    BEGIN
      EVALUATE(Result, GetResponseAttributeValueText(Xpath, NodeMustExist, AttributeName));
    END;

    PROCEDURE GetResponseAttributeValueDec@1100528313(Xpath@1100525000 : Text[250];NodeMustExist@1100525002 : Boolean;AttributeName@1100528301 : Text[30]) Result : Decimal;
    VAR
      TextString@1100528300 : Text[30];
      DecimalSeparator@1100528302 : Text[1];
    BEGIN
      DecimalSeparator := DELCHR(FORMAT(0.1), '=', '01');
      TextString := GetResponseAttributeValueText(Xpath, NodeMustExist, AttributeName);
      TextString := CONVERTSTR(TextString, '.', DecimalSeparator);
      EVALUATE(Result, TextString);
    END;

    PROCEDURE GetResponseAttributeValueDate@1100528308(Xpath@1100525000 : Text[250];ValueMustExist@1100525002 : Boolean;AttributeName@1100528304 : Text[30]) : Date;
    VAR
      StringDate@1100528300 : Text[30];
      Day@1100528301 : Integer;
      Month@1100528302 : Integer;
      Year@1100528303 : Integer;
    BEGIN
      //              0        1         2
      //              12345678901234567890123456789
      //XML DateTime: 2011-10-18T00:00:00.000+02:00
      StringDate := GetResponseAttributeValueText(Xpath, ValueMustExist, AttributeName);
      IF (StringDate = '') OR (STRLEN(StringDate) < 10) THEN
        EXIT(0D);

      EVALUATE(Day, COPYSTR(StringDate, 9,2));
      EVALUATE(Month, COPYSTR(StringDate, 6,2));
      EVALUATE(Year, COPYSTR(StringDate, 1,4));
      EXIT(DMY2DATE(Day, Month, Year));
    END;

    LOCAL PROCEDURE AppendProcessingInstruction@1100525018(ParentNode@1100525000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Target@1100525001 : Text[80];Value@1100525002 : Text[250]);
    VAR
      ProcessingInstruction@1100525003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlProcessingInstruction";
    BEGIN
      ProcessingInstruction := Request.CreateProcessingInstruction(Target, Value);
      ParentNode.AppendChild(ProcessingInstruction);
    END;

    LOCAL PROCEDURE AppendElement@1100525035(ParentNode@1100528600 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Namespace@1100525005 : Text[80];Name@1100525001 : Text[80];Content@1100525000 : Text;VAR Element@1100528601 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      TextNode@1100525004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      Element := Request.CreateNode(ParentNode.NodeType.Element, Name, Namespace);
      ParentNode.AppendChild(Element);
      IF Content <> '' THEN BEGIN
        TextNode := Request.CreateTextNode(Content);
        Element.AppendChild(TextNode);
      END;
    END;

    LOCAL PROCEDURE SOAPFaultOccurred@1100528401() : Boolean;
    VAR
      Node@1100528400 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      Node := Response.DocumentElement.SelectSingleNode('.//soap:Body/soap:Fault', ResponseXmlNamespaceManager);
      EXIT(NOT ISNULL(Node));
    END;

    LOCAL PROCEDURE XMLRPCFaultOccurred@1100528404() : Boolean;
    VAR
      Node@1100528400 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      Node := Response.DocumentElement.SelectSingleNode('.//Fault', ResponseXmlNamespaceManager);
      IF NOT ISNULL(Node) THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE ThrowSOAPFault@1100528405();
    VAR
      Node@1100528400 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ErrorText@1100528401 : Text[1024];
      ErrorText2@1100525001 : Text[1024];
      ErrorText3@1100525000 : Text[1024];
    BEGIN
      Node := Response.DocumentElement.SelectSingleNode('.//soap:Body/soap:Fault/faultstring', ResponseXmlNamespaceManager);
      IF NOT ISNULL(Node) THEN
        ErrorText := Node.InnerText;

      Node := Response.DocumentElement.SelectSingleNode('.//soap:Body/soap:Fault/*/*[local-name()="errorcode"]', ResponseXmlNamespaceManager);
      IF NOT ISNULL(Node) THEN
        ErrorText2 := Node.InnerText;

      Node := Response.DocumentElement.SelectSingleNode('.//soap:Body/soap:Fault/*/*[local-name()="errorstring"]', ResponseXmlNamespaceManager);
      IF NOT ISNULL(Node) THEN
        ErrorText3 := Node.InnerText;

      ERROR(Text000, ErrorText, ErrorText2, ErrorText3);
    END;

    LOCAL PROCEDURE ThrowXMLRPCFault@1100528402();
    VAR
      Node@1100528400 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ErrorText@1100528401 : Text[1024];
      ErrorText2@1100525001 : Text[1024];
      ErrorText3@1100525000 : Text[1024];
    BEGIN
      Node := Response.DocumentElement.SelectSingleNode('.//Fault/faultstring', ResponseXmlNamespaceManager);
      IF NOT ISNULL(Node) THEN
        ErrorText := Node.InnerText;

      Node := Response.DocumentElement.SelectSingleNode('.//Fault/errorcode', ResponseXmlNamespaceManager);
      IF NOT ISNULL(Node) THEN
        ErrorText2 := Node.InnerText;

      Node := Response.DocumentElement.SelectSingleNode('.//Fault/errorstring', ResponseXmlNamespaceManager);
      IF NOT ISNULL(Node) THEN
        ErrorText3 := Node.InnerText;

      ERROR(Text000, ErrorText, ErrorText2, ErrorText3);
    END;

    PROCEDURE GetSOAPFault@1100528407() : Text;
    VAR
      Node@1100528400 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ErrorText@1100528401 : Text;
    BEGIN
      IF NOT Response.HasChildNodes THEN
        ERROR(Text003);
      IF SOAPFaultOccurred THEN BEGIN
        Node := Response.DocumentElement.SelectSingleNode('.//soap:Body/soap:Fault/faultstring', ResponseXmlNamespaceManager);
        IF NOT ISNULL(Node) THEN
          ErrorText := Node.InnerText;
      END;
      EXIT(ErrorText);
    END;

    PROCEDURE WriteRequestToFile@1210190004(FileName@1210190001 : Text[300]);
    BEGIN
      IF (NOT ISNULL(Request)) THEN
        Request.Save(FileName);
    END;

    PROCEDURE WriteResponseToFile@1210190003(FileName@1210190001 : Text[300]);
    BEGIN
      IF (NOT ISNULL(Response)) THEN
        Response.Save(FileName);
    END;

    PROCEDURE WriteResponseToFile2@1100528317(FileName@1210190001 : Text[300];Xpath@1100528300 : Text[250]);
    VAR
      Node@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DomDoc@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      Node := Response.DocumentElement.SelectSingleNode(Xpath, ResponseXmlNamespaceManager);
      IF NOT ISNULL(Node) THEN BEGIN
        DomDoc := DomDoc.XmlDocument;
        DomDoc.AppendChild(Node);
        DomDoc.Save(FileName);
      END;
    END;

    PROCEDURE GetResponseFromFile@1100528301(FileName@1100528300 : Text[250]);
    BEGIN
      IF (ISNULL(Response)) THEN
        Response := Response.XmlDocument;
      Response.Load(FileName);
    END;

    LOCAL PROCEDURE GetBase64UnamePword@1100528312(UserName@1100528300 : Text[100];Password@1100528301 : Text[50]) : Text[250];
    BEGIN
      EXIT(GetBase64String(UserName + ':' + Password));
    END;

    PROCEDURE DeleteFile@1100528315(FileName@1100528300 : Text[250]);
    BEGIN
      IF (FileMgt.ClientFileExists(FileName)) THEN
        FileMgt.DeleteClientFile4PS(FileName, TRUE);
    END;

    LOCAL PROCEDURE GetBase64String@1100528314(StringToEncode@1100528300 : Text[250]) : Text[250];
    VAR
      Convert@1100525002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Encoding@1100525001 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      EXIT(Convert.ToBase64String(Encoding.UTF8.GetBytes(StringToEncode)));
    END;

    LOCAL PROCEDURE GetTempFileNamePath@1100528316(FileNamePrefix@1100528300 : Text[30];FileExtension@1100528301 : Text[5]) : Text[250];
    VAR
      TempPath@1100525000 : Text[1024];
    BEGIN
      TempPath := FileMgt.ClientTempFolderName;

      EXIT(TempPath + FileNamePrefix +
        FORMAT(CURRENTDATETIME, 0, '<year4><Month,2><Day,2>-<hours24,2><minutes,2><seconds,2>') +
        '.' + FileExtension);
    END;

    LOCAL PROCEDURE AddNamespaceToText@1210190005(TextIn@1100525002 : Text;RootNamespace@1210190007 : Text[250];NoOfSpaces@1210190010 : Integer) : Text;
    VAR
      TempBlobIn@1100525000 : TEMPORARY Record 99008535;
      TempBlobOut@1100525001 : TEMPORARY Record 99008535;
      StreamIn@1210190005 : InStream;
      StreamOut@1210190004 : OutStream;
      TextRead@1210190001 : Text;
      SomeTextIsRead@1210190006 : Boolean;
      SpaceNo@1210190009 : Integer;
    BEGIN
      IF (NoOfSpaces = 0) THEN
        NoOfSpaces := 1;

      TempBlobIn.INIT;
      TempBlobIn.WriteAsText(TextIn, TEXTENCODING::Windows);
      TempBlobIn.Blob.CREATEINSTREAM(StreamIn);

      TempBlobOut.INIT;
      TempBlobOut.Blob.CREATEOUTSTREAM(StreamOut);

      StreamIn.READTEXT(TextRead, 1);
      WHILE (NOT StreamIn.EOS) AND (NoOfSpaces <> SpaceNo) DO BEGIN
        StreamOut.WRITETEXT(TextRead);
        SomeTextIsRead := TRUE;
        StreamIn.READTEXT(TextRead, 1);
        IF (TextRead = ' ') THEN
          SpaceNo += 1;
      END;

      IF (SomeTextIsRead) THEN BEGIN
        TextRead += 'xmlns="' + RootNamespace + '" ';
        StreamOut.WRITETEXT(TextRead);

        WHILE NOT (StreamIn.EOS) DO BEGIN
          StreamIn.READTEXT(TextRead);
          StreamOut.WRITETEXT(TextRead);
        END;
      END;

      EXIT(TempBlobOut.ReadAsText('', TEXTENCODING::Windows));
    END;

    PROCEDURE AddSelectionNamespaces@1100528601(XmlDocument@1100528601 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";XmlNamespaceManager@1100528602 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";Namespaces@1100528600 : ARRAY [10,2] OF Text[250]);
    VAR
      i@1100528604 : Integer;
    BEGIN
      FOR i := 1 TO 10 DO
        IF Namespaces[i, 1] <> '' THEN
          XmlNamespaceManager.AddNamespace(Namespaces[i,1], Namespaces[i,2]);
    END;

    PROCEDURE AddRequestSelectionNamespaces@1100528618(Namespaces@1100528600 : ARRAY [10,2] OF Text[250]);
    BEGIN
      IF ISNULL(RequestXmlNamespaceManager) THEN
        RequestXmlNamespaceManager := RequestXmlNamespaceManager.XmlNamespaceManager(Request.NameTable);
      AddSelectionNamespaces(Request, RequestXmlNamespaceManager, Namespaces);
    END;

    PROCEDURE AddResponseSelectionNamespaces@1100528600(Namespaces@1100528600 : ARRAY [10,2] OF Text[250]);
    BEGIN
      IF ISNULL(ResponseXmlNamespaceManager) THEN
        ResponseXmlNamespaceManager := ResponseXmlNamespaceManager.XmlNamespaceManager(Response.NameTable);
      AddSelectionNamespaces(Response, ResponseXmlNamespaceManager, Namespaces);
    END;

    BEGIN
    END.
  }
}

