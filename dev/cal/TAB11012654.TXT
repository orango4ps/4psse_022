OBJECT Table 11012654 Plant Stocktaking Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               ReadStocktakingHeader();
               IF StocktakingHead.Status >= StocktakingHead.Status::Finished THEN
                 StocktakingHead.FIELDERROR(Status);
               FillUnequal();
             END;

    OnModify=BEGIN
               ReadStocktakingHeader();
               IF StocktakingHead.Status >= StocktakingHead.Status::Finished THEN
                 StocktakingHead.FIELDERROR(Status);
               FillUnequal();
             END;

    OnDelete=BEGIN
               ReadStocktakingHeader();
               IF StocktakingHead.Status >= StocktakingHead.Status::Finished THEN
                 StocktakingHead.FIELDERROR(Status);
             END;

    OnRename=BEGIN
               ReadStocktakingHeader();
               IF StocktakingHead.Status >= StocktakingHead.Status::Finished THEN
                 StocktakingHead.FIELDERROR(Status);
             END;

    CaptionML=[ENU=Plant Stocktaking Line;
               NOR=Maskin, Varetellingsrad;
               SVE=Maskin, inventeringsrad];
  }
  FIELDS
  {
    { 10  ;   ;Stocktaking No.     ;Code20        ;TableRelation="Plant Stocktaking";
                                                   CaptionML=[ENU=Stocktaking No.;
                                                              NOR=Varetellingsnr.;
                                                              SVE=inventeringsnr] }
    { 20  ;   ;Location            ;Code20        ;TableRelation="Plant Location";
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Location Description");
                                                                ReadStocktakingHeader();
                                                                VALIDATE("Quantity On Location", GetQuantityOnDate(Location, "Plant Type", StocktakingHead."Counting Date"));
                                                              END;

                                                   CaptionML=[ENU=Location;
                                                              NOR=Lokasjon;
                                                              SVE=Lagerst„lle] }
    { 21  ;   ;Location Description;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Location".Description WHERE (Code=FIELD(Location)));
                                                   CaptionML=[ENU=Location Description;
                                                              NOR=Beskrivelse av lokasjon;
                                                              SVE=Beskrivning av lagerst„lle];
                                                   Editable=No }
    { 30  ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Plant Description", Bulk, "Unit of Measure");
                                                                ReadStocktakingHeader();
                                                                VALIDATE("Quantity On Location", GetQuantityOnDate(Location, "Plant Type", StocktakingHead."Counting Date"));
                                                              END;

                                                   CaptionML=[ENU=Plant Type;
                                                              NOR=Maskintype;
                                                              SVE=Maskintyp] }
    { 31  ;   ;Plant Description   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type".Description WHERE (Code=FIELD(Plant Type)));
                                                   CaptionML=[ENU=Plant Description;
                                                              NOR=Maskinbeskrivelse;
                                                              SVE=Maskinbeskrivning];
                                                   Editable=No }
    { 32  ;   ;Bulk                ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type".Bulk WHERE (Code=FIELD(Plant Type)));
                                                   CaptionML=[ENU=Bulk;
                                                              NOR=Bulk;
                                                              SVE=Bulk];
                                                   Editable=No }
    { 33  ;   ;Unit of Measure     ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type"."Unit of Measure" WHERE (Code=FIELD(Plant Type)));
                                                   CaptionML=[ENU=Unit of Measure;
                                                              NOR=M†leenhet;
                                                              SVE=M†ttenhet];
                                                   Editable=No }
    { 40  ;   ;Quantity On Location;Decimal       ;OnValidate=BEGIN
                                                                FillUnequal();
                                                              END;

                                                   CaptionML=[ENU=Quantity On Location;
                                                              NOR=Antall p† lokasjon;
                                                              SVE=Antal p† lagerst„lle];
                                                   DecimalPlaces=0:5;
                                                   Description=On counting date;
                                                   Editable=No }
    { 50  ;   ;Counted Quantity    ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Counted Quantity" <> 0) AND "Counted Is Zero" THEN
                                                                  "Counted Is Zero" := FALSE;
                                                                FillUnequal();
                                                              END;

                                                   CaptionML=[ENU=Counted Quantity;
                                                              NOR=Beregnet antall;
                                                              SVE=Ber„knat antal];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 51  ;   ;Counted Is Zero     ;Boolean       ;CaptionML=[ENU=Counted Is Zero;
                                                              NOR=Beregnet er Null;
                                                              SVE=Ber„knat „r noll];
                                                   Editable=No }
    { 60  ;   ;Unequal             ;Boolean       ;CaptionML=[ENU=Unequal;
                                                              NOR=Ikke lik;
                                                              SVE=Inte lika med];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Stocktaking No.,Location,Plant Type     ;Clustered=Yes }
    {    ;Stocktaking No.,Plant Type,Location      }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      StocktakingHead@1100525000 : Record 11012653;
      PlantLoc@1100525001 : Record 11012554;
      Text001@1210190000 : TextConst 'ENU=Location / Plant Type #1####################;NOR=Plassering/Maskintype #1####################;SVE=Plats / Maskintyp     #1####################';
      Text002@1210190001 : TextConst 'ENU=Recalculate quantity on location on date;NOR=Rekalkuler antall p† plassering for datoen;SVE=Omber„kna antal p† lagerst„lle f”r datumet';
      Text003@1210190002 : TextConst 'ENU=Fill Counted Quantity with Quantity on Location.;NOR=Fyll ut Beregnet antall med antall p† lokasjon.;SVE=Fyll i ber„knat antal med antal p† lagerst„lle.';
      Text004@1210190003 : TextConst 'ENU=Are you sure?;NOR=Er du sikker?;SVE=Žr du s„ker?';
      Text005@1210190004 : TextConst 'ENU=Only if Counted Quantity is empty,Rewrite Counted Quantity;NOR=Kun om Beregnet antall er tomt,Skriv om Beregnet antall;SVE=Endast om ber„knat antal „r tomt,Skriv om ber„knat antal';
      Text006@1210190005 : TextConst 'ENU=Already entered Counted Quantities will be overwritten.;NOR=Allerede angitte Beregnede antall vil overskrives.;SVE=Redan angivna ber„knade antal kommer att skrivas ”ver.';

    PROCEDURE FillUnequal@1100525002();
    BEGIN
      Unequal :=
        ("Quantity On Location" <> "Counted Quantity") OR
        (("Quantity On Location" = 0) AND ("Counted Quantity" = 0) AND (NOT "Counted Is Zero"));
    END;

    PROCEDURE GetQuantityOnDate@1100485000(PlantLocation@1100525001 : Code[20];PlantType@1100485000 : Code[20];CountingDate@1100525003 : Date) : Decimal;
    VAR
      PlantInvent@1100525000 : Record 11012555;
      QuantityOnDate@1100525002 : Decimal;
      CountQty@1100525004 : Boolean;
    BEGIN
      QuantityOnDate := 0;
      IF (PlantLocation = '') OR (PlantType = '') OR (CountingDate = 0D) THEN
        EXIT(0);

      //* Set common filters
      PlantInvent.RESET;
      PlantInvent.SETRANGE(Location, PlantLocation);
      PlantInvent.SETRANGE("Plant Type", PlantType);
      PlantInvent.SETFILTER("Present from", '..%1', CountingDate);

      //* Count 'On location' with a arrival date on/before the reference date.
      PlantInvent.SETRANGE(Removed, FALSE);
      IF PlantInvent.FINDSET THEN BEGIN
        REPEAT
          CountQty := FALSE;
          IF NOT PlantInvent.Sold THEN
            CountQty := TRUE
          ELSE BEGIN
            //* If not bought back, then count until enddate of the location
            ReadPlantLocation();
            IF (PlantLoc."Ending Date" >= CountingDate) OR (PlantLoc."Ending Date" = 0D) THEN
              CountQty := TRUE;
          END;
          IF CountQty THEN
            QuantityOnDate := QuantityOnDate + PlantInvent.Quantity;
        UNTIL PlantInvent.NEXT = 0;
      END;

      //* Count what was 'On location' on the arrival date
      PlantInvent.SETRANGE(Removed, TRUE);
      PlantInvent.SETFILTER("Removed on", '>%1', CountingDate); //* Do not count 'Removal Date', is also/already on
      IF PlantInvent.FINDSET THEN BEGIN                         //* 'Location to' on this date (must not be counted twice).
        REPEAT
          QuantityOnDate := QuantityOnDate + PlantInvent.Quantity;
        UNTIL PlantInvent.NEXT = 0;
      END;

      EXIT(QuantityOnDate);
    END;

    PROCEDURE RecalculateQtyOnLocOnDate@1210190000(StocktakingNo@1210190001 : Code[20];VAR StocktakingLine2@1210190000 : Record 11012654;CountingDate@1210190003 : Date);
    VAR
      StocktakingLine@1210190002 : Record 11012654;
      Window@1210190005 : Dialog;
      QtyOnLocOnDate@1210190004 : Decimal;
    BEGIN
      IF (StocktakingNo = '') OR (CountingDate = 0D) THEN
        EXIT;
      StocktakingLine.COPY(StocktakingLine2);
      StocktakingLine.SETRANGE("Stocktaking No.", StocktakingNo);
      IF StocktakingLine.FINDSET(TRUE, FALSE) THEN BEGIN
        Window.OPEN(Text002 + '\ \' + Text001);
        REPEAT
          Window.UPDATE(1, StocktakingLine.Location + '/' + StocktakingLine."Plant Type");
          QtyOnLocOnDate := GetQuantityOnDate(StocktakingLine.Location, StocktakingLine."Plant Type", CountingDate);
          IF QtyOnLocOnDate <> StocktakingLine."Quantity On Location" THEN BEGIN
            StocktakingLine.VALIDATE("Quantity On Location", QtyOnLocOnDate);
            StocktakingLine.MODIFY;
          END;
        UNTIL StocktakingLine.NEXT = 0;
        Window.CLOSE;
      END;
    END;

    PROCEDURE FillCountedQtyWithQtyOnLoc@1210190001(StocktakingNo@1210190000 : Code[20];VAR StocktakingLine2@1210190001 : Record 11012654;CountingDate@1210190004 : Date);
    VAR
      StocktakingLine@1210190002 : Record 11012654;
      Window@1210190003 : Dialog;
      FilledLines@1210190005 : Boolean;
    BEGIN
      IF (StocktakingNo = '') OR (CountingDate = 0D) THEN
        EXIT;
      StocktakingLine.COPY(StocktakingLine2);
      StocktakingLine.SETRANGE("Stocktaking No.", StocktakingNo);
      IF NOT StocktakingLine.MARKEDONLY THEN BEGIN
        StocktakingLine.MARKEDONLY(TRUE);
        IF StocktakingLine.ISEMPTY THEN
          StocktakingLine.MARKEDONLY(FALSE);
      END;

      StocktakingLine.SETFILTER("Counted Quantity", '<>%1', 0);
      FilledLines := (NOT StocktakingLine.ISEMPTY);
      IF NOT FilledLines THEN BEGIN
        StocktakingLine.SETRANGE("Counted Quantity", 0);
        StocktakingLine.SETRANGE("Counted Is Zero", TRUE);
        FilledLines := (NOT StocktakingLine.ISEMPTY);
      END;

      IF NOT FilledLines THEN BEGIN
        IF NOT CONFIRM(Text003 + ' ' + Text004) THEN
          EXIT;
        StocktakingLine.SETRANGE("Counted Quantity", 0);
        StocktakingLine.SETRANGE("Counted Is Zero", FALSE);
      END ELSE BEGIN
        CASE STRMENU(Text005, 1, Text003) OF
          1:
            BEGIN
              StocktakingLine.SETRANGE("Counted Quantity", 0);
              StocktakingLine.SETRANGE("Counted Is Zero", FALSE);
            END;
          2:
            BEGIN
              IF NOT CONFIRM(Text006 + ' ' + Text004, FALSE) THEN
                EXIT;
              StocktakingLine.SETRANGE("Counted Quantity");  //* Reset filter
              StocktakingLine.SETRANGE("Counted Is Zero");   //* Reset filter
            END;
          ELSE
            EXIT;
        END;
      END;

      IF StocktakingLine.FINDSET(TRUE, FALSE) THEN BEGIN
        Window.OPEN(Text003 + '\ \' + Text001);
        REPEAT
          Window.UPDATE(1, StocktakingLine.Location + '/' + StocktakingLine."Plant Type");
          StocktakingLine."Quantity On Location" :=
            GetQuantityOnDate(StocktakingLine.Location, StocktakingLine."Plant Type", CountingDate);
          StocktakingLine.VALIDATE("Counted Quantity", StocktakingLine."Quantity On Location");
          StocktakingLine.MODIFY;
        UNTIL StocktakingLine.NEXT = 0;
        Window.CLOSE;
      END;
    END;

    PROCEDURE ReadStocktakingHeader@1100525003();
    BEGIN
      StocktakingHead.GET("Stocktaking No.");
      StocktakingHead.TESTFIELD("Counting Date");
    END;

    PROCEDURE ReadPlantLocation@1100525004();
    BEGIN
      IF Location <> PlantLoc.Code THEN BEGIN
        IF NOT PlantLoc.GET(Location) THEN BEGIN
          PlantLoc.INIT;
          PlantLoc."Ending Date" := TODAY - 36500;  //* Location not present, then presume ended long time ago (not '0D'!)
        END;
      END;
    END;

    BEGIN
    END.
  }
}

