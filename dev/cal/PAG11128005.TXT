OBJECT Page 11128005 Create Sub Prj. Fr. Main Prj.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Create Sub Prj. Fr. Main Prj.;
               NOR=Opprette underprosjekt fra hovedprosjekt.;
               SVE=Skapa underproj. fr†n huvudproj.];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    PageType=NavigatePage;
    OnInit=BEGIN
             CopyOptionBudgetEditable := TRUE;
             ProjToEditable := TRUE;
           END;

    OnOpenPage=BEGIN
                 JobSetup.GET;

                 FillDefaults(InitProjFrom);
                 ProjTo := '';

                 EnableDisableCopyOptionFields;
                 Step1Visible := TRUE;
                 Step2Visible := FALSE;
                 WizardStep := 1;
                 ShowStep(TRUE);
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525003;1 ;Action    ;
                      Name=Back;
                      CaptionML=[ENU=< &Back;
                                 NOR=< &Tilbake;
                                 SVE=< &Tillbaka];
                      Enabled=BackEnable;
                      InFooterBar=Yes;
                      OnAction=BEGIN
                                 ShowStep(FALSE);
                                 IF WizardStep > 1 THEN
                                   WizardStep -= 1;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100525001;1 ;Action    ;
                      Name=Next;
                      CaptionML=[ENU=&Next >;
                                 NOR=&Neste >;
                                 SVE=&N„sta >];
                      Enabled=NextEnable;
                      InFooterBar=Yes;
                      OnAction=BEGIN
                                 ShowStep(FALSE);
                                 IF WizardStep < 2 THEN
                                 WizardStep += 1;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 9       ;1   ;Action    ;
                      CaptionML=[ENU=&Finish;
                                 NOR=&Avslutt;
                                 SVE=&Slutf”r];
                      Enabled=FinishEnable;
                      InFooterBar=Yes;
                      OnAction=BEGIN
                                 CopyProject;
                                 ProjNoCreated := ProjTo;

                                 IF ProjNos <> '' THEN BEGIN
                                   CLEAR(NoSeriesMgt);
                                   ProjNew := NoSeriesMgt.GetNextNo(ProjNos,0D,FALSE);
                                   IF ProjNew = ProjTo THEN
                                     ProjNew := NoSeriesMgt.GetNextNo(ProjNos,0D,TRUE);
                                 END;

                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210190002;1;Group  ;
                Name=Step1;
                Visible=Step1Visible;
                GroupType=Group }

    { 5   ;2   ;Field     ;
                CaptionClass=Text19043260;
                Style=Standard;
                StyleExpr=TRUE }

    { 1   ;2   ;Field     ;
                CaptionML=[ENU=Project;
                           NOR=Prosjekt;
                           SVE=Projekt];
                SourceExpr=ProjFrom;
                OnValidate=BEGIN
                             IF NOT ProjRecFrom.GET(ProjFrom) THEN
                               ERROR(Text000)
                             ELSE
                               ProjFromTxt := ProjRecFrom.Description;
                               ProjFromOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           ProjRecFrom.RESET;
                           IF PAGE.RUNMODAL(PAGE::"Job List",ProjRecFrom) = ACTION::LookupOK THEN BEGIN
                              ProjFrom := ProjRecFrom."No.";
                              ProjFromTxt := ProjRecFrom.Description;
                           END;
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 7   ;2   ;Field     ;
                CaptionML=[ENU=Copy from Project Description;
                           NOR=Kopier fra prosjektbeskrivelse;
                           SVE=Kopiera fr†n projektbeskrivning];
                SourceExpr=ProjFromTxt;
                Importance=Additional;
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                CaptionClass=Text19058907;
                Style=Standard;
                StyleExpr=TRUE }

    { 1210190003;2;Field  ;
                CaptionML=[ENU=Project Type;
                           NOR=Prosjekttype;
                           SVE=Projekttyp];
                OptionCaptionML=[ENU=Normal Project,Small Project,Assembly Project;
                                 NOR=Normalt prosjekt,Lite prosjekt,Monteringsprosjekt;
                                 SVE=Normalt projekt,Mindre projekt,Monteringsprojekt];
                SourceExpr=ProjType }

    { 4   ;2   ;Field     ;
                Name=ProjTo;
                CaptionML=[ENU=Project;
                           NOR=Prosjekt;
                           SVE=Projekt];
                SourceExpr=ProjTo;
                Editable=ProjToEDITABLE;
                OnValidate=BEGIN
                             IF ProjRecTo.GET(ProjTo) THEN
                               ERROR(Text001);
                             IF (ProjTo = '') THEN
                               ERROR('');

                             IF ProjRecFrom."Small Project" THEN
                               NoSeriesMgt.TestManual(JobSetup."Small Project Nos.")
                             ELSE
                               NoSeriesMgt.TestManual(JobSetup."Job Nos.");
                             IF ProjNos <> '' THEN BEGIN
                               CLEAR(NoSeriesMgt);
                               ProjNew := NoSeriesMgt.GetNextNo(ProjNos,0D,FALSE);
                               IF ProjNew <> ProjTo THEN
                                 ProjNos := '';
                             END;
                           END;

                OnLookup=BEGIN
                           ProjRecTo."No." := ProjTo;
                           PAGE.RUNMODAL(PAGE::"Job List",ProjRecTo);
                         END;

                OnAssistEdit=BEGIN
                               WITH ProjRecFrom DO BEGIN
                                 RESET;

                                 CASE ProjType OF
                                   ProjType::"Normal Project": BEGIN
                                     JobSetup.TESTFIELD("Job Nos.");
                                     IF NoSeriesMgt.SelectSeries(JobSetup."Job Nos.","No. Series",ProjNos) THEN BEGIN
                                       CLEAR(NoSeriesMgt);
                                       ProjTo := NoSeriesMgt.GetNextNo(ProjNos,0D,FALSE);
                                     END;
                                   END;
                                   ProjType::"Small Project": BEGIN
                                     JobSetup.TESTFIELD("Small Project Nos.");
                                     IF NoSeriesMgt.SelectSeries(JobSetup."Small Project Nos.","No. Series",ProjNos) THEN BEGIN
                                       CLEAR(NoSeriesMgt);
                                       ProjTo := NoSeriesMgt.GetNextNo(ProjNos,0D,FALSE);
                                     END;
                                   END;
                                   ProjType::"Assembly Project": BEGIN
                                     JobSetup.TESTFIELD("Job Nos.");
                                     IF NoSeriesMgt.SelectSeries(JobSetup."Assembly Project Nos.","No. Series",ProjNos) THEN BEGIN
                                       CLEAR(NoSeriesMgt);
                                       ProjTo := NoSeriesMgt.GetNextNo(ProjNos,0D,FALSE);
                                     END;
                                   END;
                                 END;
                               END;

                               IF ProjRecTo.GET(ProjTo) THEN
                                 ERROR(Text002, ProjRecTo.TABLECAPTION, ProjTo);
                             END;
                              }

    { 8   ;2   ;Field     ;
                CaptionML=[ENU=Copy to Project Description;
                           NOR=Kopier til prosjektbeskrivelse;
                           SVE=Kopiera till projektbeskrivning];
                SourceExpr=ProjToTxt }

    { 1210190000;1;Group  ;
                Name=Step2;
                Visible=Step2Visible;
                GroupType=Group }

    { 1100525005;2;Field  ;
                CaptionML=[ENU=Options;
                           NOR=Alternativer;
                           SVE=Alternativ];
                Style=Standard;
                StyleExpr=TRUE }

    { 11  ;2   ;Field     ;
                CaptionML=[ENU=Principals;
                           NOR=oppdragsgiver;
                           SVE=uppdragsgivare];
                SourceExpr=Princ }

    { 1210190001;2;Field  ;
                CaptionML=[ENU=Contract Amount + Installments;
                           NOR=Kontraktsbel›p + avdrag;
                           SVE=Kontraktsbelopp + avbetalningar];
                SourceExpr=Installm }

    { 14  ;2   ;Field     ;
                CaptionML=[ENU=Locations;
                           NOR=Plasseringer;
                           SVE=Lagerst„llen];
                SourceExpr=Loc }

    { 16  ;2   ;Field     ;
                CaptionML=[ENU=Responsible Persons;
                           NOR=Ansvarlige personer;
                           SVE=Ansvariga personer];
                SourceExpr=Resp }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=Purchase Actions;
                           NOR=Innkj›pshandlinger;
                           SVE=Ink”ps†tg„rder];
                SourceExpr=Act }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=Elements;
                           NOR=Elementer;
                           SVE=Element];
                SourceExpr=Elem }

    { 1100485002;2;Field  ;
                CaptionML=[ENU=Try-Out Successor;
                           NOR=Etterf›lger (prospekt);
                           SVE=Efterf”ljare, anbud];
                SourceExpr=CopyTryOut }

    { 1100525002;2;Field  ;
                CaptionML=[ENU=Contact Feature Types;
                           NOR=Kontaktfunksjonstyper;
                           SVE=Kontaktfunktionstyper];
                SourceExpr=CopyFeatureType }

    { 1100525006;2;Field  ;
                CaptionML=[ENU=Preferred Locations;
                           NOR=Foretrukne lokasjoner;
                           SVE=F”rvalda lagerst„llen];
                SourceExpr=CopyPrefLocation }

    { 1100525010;2;Field  ;
                CaptionML=[ENU=Sales Prices;
                           NOR=Salgspriser;
                           SVE=F”rs„ljningspriser];
                SourceExpr=CopySalePrices }

    { 1100485000;2;Field  ;
                CaptionML=[ENU=Budget Rates;
                           NOR=Budsjettsatser;
                           SVE=Budgetavgifter];
                SourceExpr=BudgetRate }

    { 22  ;2   ;Field     ;
                Name=CopyHouseModels;
                CaptionML=[ENU=House Models;
                           NOR=Husmodeller;
                           SVE=Husmodeller];
                SourceExpr=CopyHouseModels;
                OnValidate=BEGIN
                             EnableDisableCopyOptionFields;
                           END;
                            }

    { 23  ;2   ;Field     ;
                Name=CopyOptionGroups;
                CaptionML=[ENU=Option Groups;
                           NOR=Gruppealternativer;
                           SVE=Alternativgrupper];
                SourceExpr=CopyOptionGroups;
                OnValidate=BEGIN
                             EnableDisableCopyOptionFields;
                           END;
                            }

    { 25  ;2   ;Field     ;
                Name=CopyOptions;
                CaptionML=[ENU=Options;
                           NOR=Alternativer;
                           SVE=Alternativ];
                SourceExpr=CopyOptions;
                Editable=CopyOptionsEDITABLE;
                OnValidate=BEGIN
                             EnableDisableCopyOptionFields;
                           END;
                            }

    { 27  ;2   ;Field     ;
                Name=CopyOptionBudget;
                CaptionML=[ENU=Option Budget;
                           NOR=Alternativt budsjett;
                           SVE=Alternativbudget];
                SourceExpr=CopyOptionBudget;
                Editable=CopyOptionBudgetEditable }

    { 30  ;2   ;Field     ;
                CaptionML=[ENU=Project Budget;
                           NOR=Prosjektbudsjett;
                           SVE=Projektbudget];
                SourceExpr=ProjectBudget }

    { 1100525000;2;Field  ;
                CaptionML=[ENU=Comments;
                           NOR=Kommentarer;
                           SVE=Kommentarer];
                SourceExpr=CommBln }

    { 1100525004;2;Field  ;
                CaptionML=[ENU=Project Cost Objects;
                           NOR=Prosjekt Í kostobjekt;
                           SVE=Projekt Í kostnadsobjekt];
                SourceExpr=CopyProjCostObj }

    { 1100525008;2;Field  ;
                CaptionML=[ENU=Cost Prices;
                           NOR=Selvkoster;
                           SVE=Sj„lvsj„lvkostnadspriser];
                SourceExpr=CopyCostPrice }

    { 1210190005;2;Field  ;
                CaptionML=[ENU=Authorities;
                           NOR=Myndigheter;
                           SVE=Myndigheter];
                SourceExpr=CopyProjAuth }

  }
  CODE
  {
    VAR
      Text000@11012039 : TextConst 'ENU=Project not present;NOR=Prosjektet finnes ikke;SVE=Projektet finns inte';
      Text001@11012040 : TextConst 'ENU=Project already present;NOR=Prosjektet finnes allerede;SVE=Projektet finns redan';
      ProjFrom@11012000 : Code[20];
      InitProjFrom@1210190000 : Code[20];
      ProjTo@11012001 : Code[20];
      ProjNew@11012002 : Code[20];
      ProjNoCreated@1100525003 : Code[20];
      ProjFromTxt@11012003 : Text[50];
      ProjToTxt@11012004 : Text[50];
      ProjType@1210190001 : 'Normal Project,Small Project,Assembly Project';
      ProjRecFrom@11012005 : Record 11072003;
      ProjRecTo@11012006 : Record 11072003;
      ProjActOrig@11012007 : Record 11012026;
      ProjActDest@11012008 : Record 11012026;
      PurchaseTextRecOrig@1100485003 : Record 11012067;
      PurchaseTextRecDest@1100485004 : Record 11012067;
      PurchActVendorRecOrig@1100485005 : Record 11012068;
      PurchActVendorRecDest@1100485006 : Record 11012068;
      ProjElemOrig@11012009 : Record 11012010;
      ProjElemDest@11012010 : Record 11012010;
      ProjBudgetRateOrig@1100485002 : Record 11020231;
      ProjBudgetRateDest@1100485000 : Record 11020231;
      ProjLocOrig@11012011 : Record 11012011;
      ProjLocDest@11012012 : Record 11012011;
      ProjModelOrig@11012013 : Record 11012501;
      ProjModelDest@11012014 : Record 11012501;
      ProjPrinOrig@11012015 : Record 11012005;
      ProjPrinDest@11012016 : Record 11012005;
      ProjInstOrig@1210190004 : Record 11012018;
      ProjInstDest@1210190005 : Record 11012018;
      ContFeatureTypeOrig@1100525008 : Record 11012753;
      ContFeatureTypeDest@1100525010 : Record 11012753;
      PrefLocOrig@1100525011 : Record 11020353;
      PrefLocDest@1100525012 : Record 11020353;
      ProjEmplCPOrig@1100525013 : Record 11020253;
      ProjEmplCPDest@1100525014 : Record 11020253;
      ProjEmplWageCPOrig@1100525015 : Record 11020366;
      ProjEmplWageCPDest@1100525016 : Record 11020366;
      ProjCostObjCPOrig@1100525017 : Record 11020365;
      ProjCostObjCPDest@1100525018 : Record 11020365;
      ProjTradeAsCPOrig@1100525019 : Record 11020361;
      ProjTradeAsCPDest@1100525020 : Record 11020361;
      ProjTradeWageCPOrig@1100525021 : Record 11020362;
      ProjTradeWageCPDest@1100525022 : Record 11020362;
      ProjCostObjOrig@1100525023 : Record 11012065;
      ProjCostObjDest@1100525024 : Record 11012065;
      ProjEmplSPOrig@1100525025 : Record 11020385;
      ProjEmplSPDest@1100525026 : Record 11020385;
      ProjEmplCostObSPOrig@1100525027 : Record 11020386;
      ProjEmplCostObSPDest@1100525028 : Record 11020386;
      ProjEmplCWageSPOrig@1100525029 : Record 11020387;
      ProjEmplCWageSPDest@1100525030 : Record 11020387;
      ProjCostObjSPOrig@1100525031 : Record 11020383;
      ProjCostObjSPDest@1100525032 : Record 11020383;
      ProjCostObWageSPOrig@1100525033 : Record 11020384;
      ProjCostObWageSPDest@1100525034 : Record 11020384;
      ProjOptOrig@11012017 : Record 11012502;
      ProjOptDest@11012018 : Record 11012502;
      ProjMGrpDest@1210190010 : Record 11012509;
      ProjMGrpOrig@1210190007 : Record 11012509;
      ProjGrpOrig@11012019 : Record 11012504;
      ProjGrpDest@11012020 : Record 11012504;
      ProjSGrpOrig@1210190008 : Record 11012505;
      ProjSGrpDest@1210190009 : Record 11012505;
      ProjRespOrig@11012021 : Record 11012040;
      ProjRespDest@11012022 : Record 11012040;
      BudgetOrig@11012023 : Record 11012001;
      BudgetDest@11012024 : Record 11012001;
      OptBudgetOrig@11012025 : Record 11012503;
      OptBudgetDest@11012026 : Record 11012503;
      ProjAuthOrig@1210190011 : Record 11020216;
      ProjAuthDest@1210190012 : Record 11020216;
      ProjSetup@11012027 : Record 315;
      SerLineRec@1000000002 : Record 309;
      SerRelRec@1000000001 : Record 310;
      JobSetup@1100485007 : Record 315;
      CommentRec@1100525001 : Record 97;
      TmpCommentRec@1100525002 : Record 97;
      NoSeriesMgt@11012028 : Codeunit 396;
      DimMgt@1000000003 : Codeunit 408;
      ProjNos@1000000000 : Code[20];
      Princ@11012029 : Boolean;
      Installm@1210190003 : Boolean;
      Loc@11012030 : Boolean;
      Resp@11012031 : Boolean;
      Act@11012032 : Boolean;
      Elem@11012033 : Boolean;
      BudgetRate@1100485001 : Boolean;
      CopyHouseModels@11012034 : Boolean;
      CopyOptions@11012035 : Boolean;
      CopyOptionGroups@11012036 : Boolean;
      ProjectBudget@11012037 : Boolean;
      CopyOptionBudget@11012038 : Boolean;
      CopyTryOut@1100485009 : Boolean;
      CommBln@1100525000 : Boolean;
      CopyFeatureType@1100525004 : Boolean;
      CopyProjCostObj@1100525005 : Boolean;
      CopyPrefLocation@1100525006 : Boolean;
      CopySalePrices@1100525007 : Boolean;
      CopyCostPrice@1100525009 : Boolean;
      CopyProjAuth@1210190006 : Boolean;
      TryOutRec@1210190002 : Record 11012761;
      Text002@1100485008 : TextConst 'ENU=%1 %2 already exists;NOR=%1 %2 finnes allerede.;SVE=%1 %2 finns redan.';
      CopyOptionBudgetEditable@19077504 : Boolean INDATASET;
      Text003@1100285000 : TextConst 'ENU=Project %1 must be a main project.;NOR=Prosjekt %1 m† v‘re et hovedprosjekt.;SVE=Projekt %1 m†ste vara ett huvudprojekt.';
      Text004@1100285001 : TextConst 'ENU=Unable to create a new Sub Project when Main Project status is %1.;NOR=Det g†r ikke † opprette et underprosjekt n†r hovedprosjektets status er %1.;SVE=Det g†r inte att skapa ett underprojekt n„r huvudprojektets status „r %1.';
      Text19043260@19053807 : TextConst 'ENU=Copy From;NOR=Kopier fra;SVE=Kopiera fr†n';
      Text19058907@19032364 : TextConst 'ENU=Copy To;NOR=Kopier til;SVE=Kopiera till';
      Text19014931@19005041 : TextConst 'ENU=Copy;NOR=KOPIER;SVE=KOPIA';
      ProjToEditable@1100525035 : Boolean INDATASET;
      Step1Visible@1100525041 : Boolean INDATASET;
      Step2Visible@1100525040 : Boolean INDATASET;
      FinishEnable@1100525039 : Boolean INDATASET;
      BackEnable@1100525038 : Boolean INDATASET;
      NextEnable@1100525037 : Boolean INDATASET;
      WizardStep@1100525036 : Integer;
      CopyOptionsEDITABLE@1210190013 : Boolean INDATASET;

    PROCEDURE FillDefaults@1(lProjFrom@11012000 : Code[20]);
    BEGIN
      InitProjFrom := lProjFrom;
      ProjFrom := InitProjFrom;
      IF ProjRecFrom.GET(ProjFrom) THEN BEGIN
        IF ProjRecFrom."Single/Main/Sub Project" <>
           ProjRecFrom."Single/Main/Sub Project"::"Main Project" THEN
          ERROR(Text003,ProjRecFrom."No.");
        //>> 150908 ITERO.AC Check Main project status before a new Sub Project is created
        IF ProjRecFrom."Project Status" >= ProjRecFrom."Project Status"::"Administrative Finished" THEN //,Finished,Archive,Archived
          ERROR(Text004,ProjRecFrom."Project Status");
        //<< 150908 ITERO.AC

        ProjFromTxt := ProjRecFrom.Description;
        ProjToTxt := ProjRecFrom.Description;
      END ELSE BEGIN
        ERROR(Text000);
      END;
    END;

    PROCEDURE CopyProject@2();
    VAR
      ProjTenderElementOrig@1100525003 : Record 11012263;
      ProjTenderElementDest@1100525002 : Record 11012263;
      ProjTenderElementPartOrig@1100525001 : Record 11012264;
      ProjTenderElementPartDest@1100525000 : Record 11012264;
      ProjTenderElementTextOrig@1100525004 : Record 11012269;
      ProjTenderElementTextDest@1100525005 : Record 11012269;
    BEGIN
      ProjRecTo.COPY(ProjRecFrom);
      ProjRecTo."No." := '';
      ProjRecTo.SetAltNoSeries(ProjRecFrom."No. Series");
      ProjRecTo.INSERT(TRUE);
      ProjTo := ProjRecTo."No.";
      ProjNoCreated := ProjRecTo."No.";

      ProjRecTo."Small Project" := ProjRecFrom."Small Project";
      ProjRecTo."Assembly Project" := ProjRecFrom."Assembly Project";

      //>>130905 Itero
      ProjRecTo."Project Type"   := ProjRecFrom."Project Type";
      ProjRecTo."Forecast Level" := ProjRecFrom."Forecast Level";
      //IF ProjRecTo."Small Project" THEN
      ProjRecTo."Project Status" := ProjRecTo."Project Status"::Production;
      //ELSE
      //  ProjRecTo."Project Status" := ProjRecTo."Project Status"::Estimation;
      //<<130905

      ProjRecTo.Description := ProjToTxt;
      ProjRecTo."Search Description" := UPPERCASE(ProjToTxt);
      ProjRecTo."Budget Fixed" := FALSE;
      ProjRecTo."Version Date" := TODAY;
      ProjRecTo."Creation Date" := TODAY;
      ProjRecTo."Created by" := USERID;
      ProjRecTo."Last Date Modified" := TODAY;
      ProjRecTo."Modified by" := USERID;
      ProjRecTo."Status Modification Date" := TODAY;
      ProjRecTo."Technical Finished Date" := 0D;
      ProjRecTo."Posting Date Closing" := 0D;
      ProjRecTo."Finish report to Principal" := 0D;
      ProjRecTo."Last Invoice date" := 0D;
      ProjRecTo."Single/Main/Sub Project" := ProjRecTo."Single/Main/Sub Project"::"Sub Project";
      ProjRecTo."Main Project" := ProjRecFrom."No.";
      ProjRecTo."Joint Job No." := '';
      ProjRecTo."Joint Company" := '';
      ProjRecTo."Delivered Project" := '';
      ProjRecTo."Delivered Object" := '';
      ProjRecTo."Cost Control Up to Date" := FALSE;
      ProjRecTo.MODIFY;


      ProjNos := ProjRecTo."No. Series";
      IF ProjNos <> '' THEN
        NoSeriesMgt.SaveNoSeries;

      //*** Pricipals
      Princ := TRUE;
      IF Princ THEN BEGIN
        ProjPrinOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjPrinOrig.FINDSET THEN BEGIN
          REPEAT
            ProjPrinDest.COPY(ProjPrinOrig);
            ProjPrinDest."Project No." := ProjTo;
            ProjPrinDest."Main Project No." := ProjRecTo."Main Project";
            ProjPrinDest.InitRecord;
            IF NOT Installm THEN BEGIN
              ProjPrinDest."Contract Amount (LCY)" := 0;
              ProjPrinDest."Contract Amount" := 0;
            END;
            ProjPrinDest."Collect Installment Invoice By":= ProjPrinOrig."Collect Installment Invoice By";
            ProjPrinDest.INSERT;
          UNTIL ProjPrinOrig.NEXT = 0;
        END;
        IF ProjRecTo."Small Project" AND (ProjRecTo."Bill-to Customer No." <> '') THEN
          ProjRecTo.InsertProjectPrincipal(ProjRecTo."Bill-to Customer No.");
      END ELSE BEGIN
        ProjRecTo."Bill-to Customer No." := '';
        ProjRecTo."Project Address Code" := '';
        ProjRecTo.Name := '';
        ProjRecTo."Name 2" := '';
        ProjRecTo.Address := '';
        ProjRecTo."Address 2" := '';
        ProjRecTo.City := '';
        ProjRecTo.Contact := '';
        ProjRecTo.County := '';
        ProjRecTo."Post Code" := '';
        ProjRecTo."Phone No." := '';
        ProjRecTo."Fax No." := '';
        ProjRecTo."Mobile Phone No." := '';
        ProjRecTo.MODIFY;
      END;

      IF Installm THEN BEGIN
        ProjInstOrig.SETRANGE("Project No.", ProjFrom);
        ProjInstOrig.SETRANGE("Plot No.", '');
        ProjInstOrig.SETRANGE(Option, '');
        IF ProjInstOrig.FINDSET THEN BEGIN
          REPEAT
            ProjInstDest.COPY(ProjInstOrig);
            ProjInstDest."Project No." := ProjTo;
            ProjInstDest."Invoice Price (LCY)" := ProjInstDest."Installment Amount (LCY)";
            ProjInstDest."Invoice Price" := ProjInstDest."Installment Amount";
            ProjInstDest.Chargeable := FALSE;
            ProjInstDest.INSERT;
          UNTIL ProjInstOrig.NEXT = 0;
        END;
      END;

      IF Loc THEN BEGIN
        ProjLocOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjLocOrig.FINDSET THEN BEGIN
          REPEAT
            ProjLocDest.COPY(ProjLocOrig);
            ProjLocDest."Project No." := ProjTo;
            ProjLocDest.INSERT(TRUE);
          UNTIL ProjLocOrig.NEXT = 0;
        END;
      END ELSE BEGIN
        IF ProjRecTo.Deliver = ProjRecTo.Deliver::"Project Location" THEN BEGIN
          ProjRecTo.Deliver := 0;
          ProjRecTo."Ship To Location" := '';
          ProjRecTo.MODIFY;
        END;
      END;

      IF Resp THEN BEGIN
        ProjRespOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjRespOrig.FINDSET THEN BEGIN
          REPEAT
            ProjRespDest.COPY(ProjRespOrig);
            ProjRespDest."Project No." := ProjTo;
            ProjRespDest.INSERT(TRUE);
          UNTIL ProjRespOrig.NEXT = 0;
        END;
      END;

      IF Act THEN BEGIN
        ProjActOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjActOrig.FINDSET THEN BEGIN
          REPEAT
            ProjActDest.COPY(ProjActOrig);
            ProjActDest."Project No." := ProjTo;
            ProjActDest.Status := ProjActDest.Status::Concept;
            ProjActDest."Approval Date" := 0D;
            ProjActDest."Changed on" := TODAY;
            ProjActDest."Changed by" := USERID;
            ProjActDest.INSERT;
            PurchaseTextRecOrig.SETRANGE(PurchaseTextRecOrig."Line Type", PurchaseTextRecOrig."Line Type"::"Project Purchase Action");
            PurchaseTextRecOrig.SETRANGE("No.", ProjFrom);
            PurchaseTextRecOrig.SETRANGE("Purchase Action", ProjActOrig.Code);
            IF PurchaseTextRecOrig.FINDSET THEN
              REPEAT
                PurchaseTextRecDest.TRANSFERFIELDS(PurchaseTextRecOrig);
                PurchaseTextRecDest."No." := ProjTo;
                PurchaseTextRecDest.INSERT;
              UNTIL PurchaseTextRecOrig.NEXT = 0;
            PurchActVendorRecOrig.SETRANGE("Project No.", ProjFrom);
            PurchActVendorRecOrig.SETRANGE("Purchase Action", ProjActOrig.Code);
            IF PurchActVendorRecOrig.FINDSET THEN
              REPEAT
                PurchActVendorRecDest.TRANSFERFIELDS(PurchActVendorRecOrig);
                PurchActVendorRecDest."Project No." := ProjTo;
                PurchActVendorRecDest.INSERT;
              UNTIL PurchActVendorRecOrig.NEXT = 0;
          UNTIL ProjActOrig.NEXT = 0;
        END;
      END;

      IF Elem THEN BEGIN
        ProjElemOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjElemOrig.FINDSET THEN BEGIN
          REPEAT
            ProjElemDest.COPY(ProjElemOrig);
            ProjElemDest."Project No." := ProjTo;
            ProjElemDest.INSERT;
          UNTIL ProjElemOrig.NEXT = 0;
        END;
      END;

      IF BudgetRate THEN BEGIN
        ProjBudgetRateOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjBudgetRateOrig.FINDSET THEN BEGIN
          REPEAT
            ProjBudgetRateDest.COPY(ProjBudgetRateOrig);
            ProjBudgetRateDest."Project No." := ProjTo;
            ProjBudgetRateDest.INSERT;
          UNTIL ProjBudgetRateOrig.NEXT = 0;
        END;
      END;

      IF CopyHouseModels THEN BEGIN
        ProjModelOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjModelOrig.FINDSET THEN BEGIN
          REPEAT
            ProjModelDest.COPY(ProjModelOrig);
            ProjModelDest."Project No." := ProjTo;
            ProjModelDest.INSERT;
          UNTIL ProjModelOrig.NEXT = 0;
        END;
      END;

      IF CopyOptions THEN BEGIN
        ProjOptOrig.SETRANGE("Project No.", ProjFrom);
        ProjOptOrig.SETRANGE("Plot No.", '');
        IF ProjOptOrig.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            ProjOptDest.COPY(ProjOptOrig);
            ProjOptDest."Project No." := ProjTo;
            ProjOptDest."Main Project No." := ProjRecTo."Main Project";
            ProjOptDest."Version Date" := TODAY;
            ProjOptDest."Input Date" := TODAY;
            ProjOptDest."Input by" := USERID;
            ProjOptDest."Last Date Modified" := TODAY;
            ProjOptDest."Modified by" := USERID;
            ProjOptDest.Status := ProjOptDest.Status::Applied;
            ProjOptDest."Offering Date" := 0D;
            ProjOptDest."Contract Date" := 0D;
            ProjOptDest."Order Date" := 0D;
            ProjOptDest."Valid from" := 0D;
            ProjOptDest."Valid Until" := 0D;
            ProjOptDest."Installments Generated" := FALSE;
            ProjOptDest."Generation Date" := 0D;
            ProjOptDest."Expired was Order" := FALSE;
            ProjOptDest.INSERT;
          UNTIL ProjOptOrig.NEXT = 0;
        END;
      END;

      IF CopyOptionGroups THEN BEGIN
        ProjMGrpOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjMGrpOrig.FINDSET THEN BEGIN
          REPEAT
            ProjMGrpDest.COPY(ProjMGrpOrig);
            ProjMGrpDest."Project No." := ProjTo;
            ProjMGrpDest.INSERT;
          UNTIL ProjMGrpOrig.NEXT = 0;
        END;
        ProjGrpOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjGrpOrig.FINDSET THEN BEGIN
          REPEAT
            ProjGrpDest.COPY(ProjGrpOrig);
            ProjGrpDest."Project No." := ProjTo;
            ProjGrpDest.INSERT;
          UNTIL ProjGrpOrig.NEXT = 0;
        END;
        ProjSGrpOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjSGrpOrig.FINDSET THEN BEGIN
          REPEAT
            ProjSGrpDest.COPY(ProjSGrpOrig);
            ProjSGrpDest."Project No." := ProjTo;
            ProjSGrpDest.INSERT;
          UNTIL ProjSGrpOrig.NEXT = 0;
        END;
      END;

      IF ProjectBudget THEN BEGIN
        BudgetOrig.SETRANGE("Project No.", ProjFrom);
        BudgetOrig.SETRANGE(Adjustment, '');
        BudgetOrig.SETRANGE("Extension Contract", '');
        BudgetOrig.SETRANGE(Option, '');
        BudgetOrig.SETRANGE("Plot No.", '');
        IF BudgetOrig.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            BudgetDest.COPY(BudgetOrig);
            BudgetDest."Project No." := ProjTo;
            BudgetDest."Version Date" := TODAY;
            BudgetDest.Advised := FALSE;
            BudgetDest."Copied to Adjustment" := FALSE;
            BudgetDest."Purchase Route Reference" := '';
            IF BudgetDest."Purchase Action" <> '' THEN BEGIN
              IF (NOT Act) THEN
                BudgetDest."Purchase Action" := ''
              ELSE BEGIN
                IF NOT ProjActDest.GET(BudgetDest."Project No.", BudgetDest."Purchase Action") THEN
                  BudgetDest."Purchase Action" := '';
              END;
            END;
            IF BudgetDest."Purchase Action" = '' THEN
                BudgetDest."Purchase Phase" := '';
            BudgetDest."Purchase Action Status" := BudgetDest."Purchase Action Status"::Concept;
            BudgetDest."Purch. Action Approval Date" := 0D;
            BudgetDest."Project Planning Activity No." := '';
            IF NOT BudgetRate AND (BudgetOrig."Rate Code" <> '') THEN
              BudgetDest.VALIDATE("Rate Code");
            BudgetDest.FillMainProject;
            BudgetDest.INSERT;
          UNTIL BudgetOrig.NEXT = 0;
        END;
      END;

      IF CopyOptionBudget THEN BEGIN
        OptBudgetOrig.SETRANGE("Project No.", ProjFrom);
        OptBudgetOrig.SETRANGE("Plot No.", '');
        IF OptBudgetOrig.FINDSET THEN BEGIN
          REPEAT
            OptBudgetDest.COPY(OptBudgetOrig);
            OptBudgetDest."Project No." := ProjTo;
            IF NOT BudgetRate AND (OptBudgetOrig."Rate Code" <> '') THEN
              OptBudgetDest.VALIDATE("Rate Code");
            OptBudgetDest.INSERT;
          UNTIL OptBudgetOrig.NEXT = 0;
        END;
      END;

      IF CopyTryOut AND TryOutRec.READPERMISSION THEN
        TryOutRec.CopyRelation(0, 0, ProjFrom, ProjTo);  //db, 04-10-07

      IF CommBln THEN BEGIN
        CommentRec.SETRANGE("Table Name", CommentRec."Table Name"::Job);
        CommentRec.SETRANGE("No.", ProjFrom);
        IF CommentRec.FINDSET THEN BEGIN
          REPEAT
            TmpCommentRec.COPY(CommentRec);
            TmpCommentRec."No." := ProjTo;
            TmpCommentRec.INSERT;
          UNTIL CommentRec.NEXT = 0;
        END;
      END;

      // *** Contact Feature types
      CopyFeatureType := TRUE;
      ContFeatureTypeDest.SETRANGE("Relation Type", ContFeatureTypeOrig."Relation Type"::Job);
      ContFeatureTypeDest.SETRANGE(Code, ProjTo);
      ContFeatureTypeDest.DELETEALL;
      IF CopyFeatureType THEN BEGIN
        ContFeatureTypeOrig.SETRANGE("Relation Type", ContFeatureTypeOrig."Relation Type"::Job);
        ContFeatureTypeOrig.SETRANGE(Code, ProjFrom);
        IF ContFeatureTypeOrig.FINDSET THEN BEGIN
          REPEAT
            IF NOT ContFeatureTypeDest.GET(ContFeatureTypeOrig."Relation Type",
                                       //ContFeatureTypeOrig.Code,
                                       ProjTo,
                                       ContFeatureTypeOrig."Line No.") THEN BEGIN

              ContFeatureTypeDest.TRANSFERFIELDS(ContFeatureTypeOrig);
              ContFeatureTypeDest.Code := ProjTo;
              ContFeatureTypeDest."Modified By" := USERID;
              ContFeatureTypeDest."Last Modified" := CURRENTDATETIME;
              ContFeatureTypeDest.INSERT;
      //      END ELSE BEGIN
      //        ContFeatureTypeDest.TRANSFERFIELDS(ContFeatureTypeOrig);
      //        ContFeatureTypeDest.Code := ProjTo;
      //        ContFeatureTypeDest.MODIFY;
            END;
          UNTIL ContFeatureTypeOrig.NEXT = 0;
        END;
      END;

      IF CopyPrefLocation THEN BEGIN
        PrefLocOrig.SETRANGE(Type,PrefLocOrig.Type::Job);
        PrefLocOrig.SETRANGE("No.", ProjFrom);
        IF PrefLocOrig.FINDSET THEN BEGIN
          REPEAT
            PrefLocDest.COPY(PrefLocOrig);
            PrefLocDest."No." := ProjTo;
            PrefLocDest.INSERT;
          UNTIL PrefLocOrig.NEXT = 0;
        END;
      END;

      IF CopyProjCostObj THEN BEGIN
        ProjCostObjOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjCostObjOrig.FINDSET THEN BEGIN
          REPEAT
            ProjCostObjDest.COPY(ProjCostObjOrig);
            ProjCostObjDest."Project No." := ProjTo;
            ProjCostObjDest.INSERT;
          UNTIL ProjCostObjOrig.NEXT = 0;
        END;
      END;

      // *** Sales Price
      CopySalePrices := TRUE;
      IF CopySalePrices THEN BEGIN
        ProjEmplSPOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjEmplSPOrig.FINDSET THEN BEGIN
          REPEAT
            ProjEmplSPDest.COPY(ProjEmplSPOrig);
            ProjEmplSPDest."Project No." := ProjTo;
            ProjEmplSPDest.INSERT;
          UNTIL ProjEmplSPOrig.NEXT = 0;
        END;

        ProjEmplCostObSPOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjEmplCostObSPOrig.FINDSET THEN BEGIN
          REPEAT
            ProjEmplCostObSPDest.COPY(ProjEmplCostObSPOrig);
            ProjEmplCostObSPDest."Project No." := ProjTo;
            ProjEmplCostObSPDest.INSERT;
          UNTIL ProjEmplCostObSPOrig.NEXT = 0;
        END;

        ProjEmplCWageSPOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjEmplCWageSPOrig.FINDSET THEN BEGIN
          REPEAT
            ProjEmplCWageSPDest.COPY(ProjEmplCWageSPOrig);
            ProjEmplCWageSPDest."Project No." := ProjTo;
            ProjEmplCWageSPDest.INSERT;
          UNTIL ProjEmplCWageSPOrig.NEXT = 0;
        END;

        ProjCostObjSPOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjCostObjSPOrig.FINDSET THEN BEGIN
          REPEAT
            ProjCostObjSPDest.COPY(ProjCostObjSPOrig);
            ProjCostObjSPDest."Project No." := ProjTo;
            ProjCostObjSPDest.INSERT;
          UNTIL ProjCostObjSPOrig.NEXT = 0;
        END;

        ProjCostObWageSPOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjCostObWageSPOrig.FINDSET THEN BEGIN
          REPEAT
            ProjCostObWageSPDest.COPY(ProjCostObWageSPOrig);
            ProjCostObWageSPDest."Project No." := ProjTo;
            ProjCostObWageSPDest.INSERT;
          UNTIL ProjCostObWageSPOrig.NEXT = 0;
        END;
      END;

      IF CopyCostPrice THEN BEGIN
        ProjEmplCPOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjEmplCPOrig.FINDSET THEN BEGIN
          REPEAT
            ProjEmplCPDest.COPY(ProjEmplCPOrig);
            ProjEmplCPDest."Project No." := ProjTo;
            ProjEmplCPDest.INSERT;
          UNTIL ProjEmplCPOrig.NEXT = 0;
        END;

        ProjEmplWageCPOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjEmplWageCPOrig.FINDSET THEN BEGIN
          REPEAT
            ProjEmplWageCPDest.COPY(ProjEmplWageCPOrig);
            ProjEmplWageCPDest."Project No." := ProjTo;
            ProjEmplWageCPDest.INSERT;
          UNTIL ProjEmplWageCPOrig.NEXT = 0;
        END;

        ProjCostObjCPOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjCostObjCPOrig.FINDSET THEN BEGIN
          REPEAT
            ProjCostObjCPDest.COPY(ProjCostObjCPOrig);
            ProjCostObjCPDest."Project No." := ProjTo;
            ProjCostObjCPDest.INSERT;
          UNTIL ProjCostObjCPOrig.NEXT = 0;
        END;

        ProjTradeAsCPOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjTradeAsCPOrig.FINDSET THEN BEGIN
          REPEAT
            ProjTradeAsCPDest.COPY(ProjTradeAsCPOrig);
            ProjTradeAsCPDest."Project No." := ProjTo;
            ProjTradeAsCPDest.INSERT;
          UNTIL ProjTradeAsCPOrig.NEXT = 0;
        END;

        ProjTradeWageCPOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjTradeWageCPOrig.FINDSET THEN BEGIN
          REPEAT
            ProjTradeWageCPDest.COPY(ProjTradeWageCPOrig);
            ProjTradeWageCPDest."Project No." := ProjTo;
            ProjTradeWageCPDest.INSERT;
          UNTIL ProjTradeWageCPOrig.NEXT = 0;
        END;
      END;

      IF ProjectBudget OR CopyOptionBudget THEN BEGIN
        ProjTenderElementOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjTenderElementOrig.FINDSET THEN
          REPEAT
            ProjTenderElementDest.COPY(ProjTenderElementOrig);
            ProjTenderElementDest."Project No." := ProjTo;
            ProjTenderElementDest.INSERT;
          UNTIL ProjTenderElementOrig.NEXT = 0;

        ProjTenderElementPartOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjTenderElementPartOrig.FINDSET THEN
          REPEAT
            ProjTenderElementPartDest.COPY(ProjTenderElementPartOrig);
            ProjTenderElementPartDest."Project No." := ProjTo;
            ProjTenderElementPartDest.INSERT;
          UNTIL ProjTenderElementPartOrig.NEXT = 0;

        ProjTenderElementTextOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjTenderElementTextOrig.FINDSET THEN
          REPEAT
            ProjTenderElementTextDest.COPY(ProjTenderElementTextOrig);
            ProjTenderElementTextDest."Project No." := ProjTo;
            ProjTenderElementTextDest.INSERT;
          UNTIL ProjTenderElementTextOrig.NEXT = 0;
      END;

      IF CopyProjAuth THEN BEGIN
        ProjAuthOrig.SETRANGE("Project No.", ProjFrom);
        IF ProjAuthOrig.FINDSET THEN BEGIN
          REPEAT
            ProjAuthDest.COPY(ProjAuthOrig);
            ProjAuthDest."Project No." := ProjTo;
            ProjAuthDest.INSERT(TRUE);
          UNTIL ProjAuthOrig.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE DetermineNewProject@1000000000();
    VAR
      lvFound@1100485000 : Boolean;
    BEGIN
      ProjSetup.GET;
      ProjNos := ProjRecFrom."No. Series";
      IF ProjNos = '' THEN
        ProjNos := ProjSetup."Job Nos.";

      lvFound := FALSE;
      SerLineRec.SETRANGE("Series Code", ProjNos);
      IF SerLineRec.FINDSET THEN BEGIN
        REPEAT
          IF (SerLineRec.Open) AND
             (ProjFrom >= SerLineRec."Starting No.") AND
             ((ProjFrom < SerLineRec."Ending No.") OR (SerLineRec."Ending No." = '')) THEN BEGIN
            ProjNos := SerLineRec."Series Code";
            lvFound := TRUE;
          END;
        UNTIL (SerLineRec.NEXT = 0) OR lvFound;
      END;

      IF NOT lvFound THEN BEGIN
        SerRelRec.SETRANGE(Code, ProjNos);
        IF SerRelRec.FINDSET THEN BEGIN
          REPEAT
            SerLineRec.SETRANGE("Series Code", SerRelRec."Series Code");
            IF SerLineRec.FINDSET THEN BEGIN
              REPEAT
                IF (SerLineRec.Open) AND
                   (ProjFrom >= SerLineRec."Starting No.") AND
                   ((ProjFrom < SerLineRec."Ending No.") OR (SerLineRec."Ending No." = '')) THEN BEGIN
                  ProjNos := SerLineRec."Series Code";
                  lvFound := TRUE;
                END;
              UNTIL (SerLineRec.NEXT = 0) OR lvFound;
            END;
          UNTIL SerRelRec.NEXT = 0;
        END;
      END;

      CLEAR(NoSeriesMgt);
      ProjNew := NoSeriesMgt.GetNextNo(ProjNos,0D,FALSE);
    END;

    PROCEDURE GetCreatedProjectNo@1100525000(VAR CreatedProjNo@1100525000 : Code[20]);
    BEGIN
      CreatedProjNo := ProjNoCreated;
    END;

    LOCAL PROCEDURE EnableDisableCopyOptionFields@1100528400();
    BEGIN
      CopyOptionsEDITABLE := (CopyHouseModels AND CopyOptionGroups);
      IF NOT (CopyHouseModels AND CopyOptionGroups) THEN
        CopyOptions := FALSE;

      CopyOptionBudgetEditable := CopyOptions;
      IF NOT CopyOptions THEN
        CopyOptionBudget := FALSE;
    END;

    LOCAL PROCEDURE ProjFromOnAfterValidate@19011125();
    BEGIN
      IF ProjRecFrom.GET(ProjFrom) THEN BEGIN
        ProjFromTxt := ProjRecFrom.Description;
        DetermineNewProject;
        ProjTo    := ProjNew;
        ProjToTxt := ProjFromTxt;
      END;
    END;

    LOCAL PROCEDURE ProjToOnBeforeInput@19002209();
    VAR
      lvNoSeriesRec@1100525000 : Record 308;
    BEGIN
      IF ProjRecFrom."Small Project" THEN
        lvNoSeriesRec.GET(JobSetup."Small Project Nos.")
      ELSE
        lvNoSeriesRec.GET(JobSetup."Job Nos.");

      ProjToEditable := (lvNoSeriesRec."Manual Nos.")
    END;

    LOCAL PROCEDURE ShowStep@1100525001(Visible@1001 : Boolean);
    BEGIN
      CASE WizardStep OF
        1:
          BEGIN
            Step1Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := FALSE;
              NextEnable := TRUE;
            END;
          END;
        2:
          BEGIN
            Step2Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := TRUE;
              BackEnable := TRUE;
              NextEnable := FALSE;
            END;
          END;
      END;
    END;

    BEGIN
    {
      4PSSE
      LP 130702 I041 New page copy of page 11012106 with modifications.
                Princ, CopyFeatureType, CopySalePrices are set hard to TRUE.
      //>>130905 4PSSE Call IME-012

      131107 ITERO.LP IME054 Added new code to function CopyProject().
      141014 ITERO.DL SYM031 CopyProject() 4PS does not create PROJ XML for export when sub-projects created via button "Create sub-project"
      150908 ITERO.AC RFC030 Check main project status before a Sub Project is created
      151112 ITERO.DL RFC014-2 timingerrors, use JobStatus at modified-time instead of current

      160429 ITERO.WG SRE-008 SC005022 Error when creating subproject
      200114 ORANGO.DL moved Symbrio-calls to Events in cod11127975
    }
    END.
  }
}

