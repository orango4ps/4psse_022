OBJECT Report 11071713 Copy Option Budget to Adjust
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Kopieren Optionsbudget in Budget;
               ENU=Copy Option Budget to Budget;
               NLD=Optiebegroting naar werkbegroting correctie kopi‰ren;
               NOR=Kopier Budsjettjustering til budsjett;
               SVE=Kopiera alternativbudget till budget];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF NOT gOnDeletePlotOptionRun THEN BEGIN
                    //* Niet bij deze run het window openen, want je krijgt dan (soms) opeens vraag de vraag 'Naam record wijzigen?' en
                    //* daarna een aantal meldingen. (vreemd, oorzaak onbekend).
                    Window.OPEN(Text000 + Text001 + Text002 + Text003);
                  END;

                  IF OptionBatchUpdate THEN BEGIN
                    IF PlotOption.GETFILTERS <> '' THEN
                      OptionBatchUpdate := FALSE;
                  END;

                  Counter := 0;
                  ProjSetupRec.GET;
                END;

    OnPostReport=BEGIN
                   IF CurrReport.USEREQUESTPAGE THEN BEGIN
                     IF ProjSetupRec."Batch update budg from option" THEN BEGIN
                       MESSAGE(Text006);
                     END ELSE BEGIN
                       IF Counter = 0 THEN
                         MESSAGE(Text004)
                       ELSE
                         MESSAGE(Text005,Counter);
                     END;
                   END;
                 END;

  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  IF OptionBatchUpdate THEN BEGIN
                                    TmpUpdBudgLineRec.RESET;
                                    TmpUpdBudgLineRec.DELETEALL;
                                  END;

                                  GetProjElement("No.");
                                  FillCommonCostObjects("No.");
                                END;

               ReqFilterFields=No. }

    { 7045;1   ;DataItem;PlotOption          ;
               DataItemTable=Table11012502;
               DataItemTableView=SORTING(Project No.,Option,Plot No.,Status,House Model,Main Group,Group,Sub Group)
                                 WHERE(Option=FILTER(<>''),
                                       Plot No.=FILTER(<>''),
                                       Status=FILTER(Order..Invoice));
               OnPreDataItem=BEGIN
                               IF (Job."Budget Level for Options" <> Job."Budget Level for Options"::Detailed) THEN BEGIN
                                 //* Ignore selected filter of these fields, so reset filters
                                 SETRANGE("Plot No.");
                                 SETRANGE("House Model");
                                 SETRANGE("Main Group");
                                 SETRANGE(Group);
                                 SETRANGE("Sub Group");
                               END;

                               IF OptionBatchUpdate THEN BEGIN
                                 SETFILTER("Plot No.",'<>%1','');
                                 SETFILTER(Option,'<>%1','');
                               END;

                               TmpOptBudgRec.RESET;
                               TmpOptBudgRec.DELETEALL;
                               NextLineNoTmp := 1;

                               PrevOption := '';
                               PrevOptionClearOtherLevels := '';
                               VersionDate := 0D;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF NOT gOnDeletePlotOptionRun THEN BEGIN
                                    Window.UPDATE(1, "Project No.");
                                    Window.UPDATE(2, Option);
                                    Window.UPDATE(3, 0);
                                  END;

                                  Counter := Counter + 1;
                                  IF (Job."Budget Level for Options" = Job."Budget Level for Options"::Detailed) THEN
                                    VersionDate := 0D;
                                  IF (gOnDeletePlotOptionRun OR gOnResetOptionStatusRun) AND
                                     ("Project No." = gDelProjectNo) AND ("Plot No." = gDelPlotNo) AND ("House Model" = gDelHouseModel) AND
                                     ("Main Group" = gDelMainGroup) AND (Group = gDelGroup) AND ("Sub Group" = gDelSubGroup) AND (Option = gDelOption)
                                  THEN
                                    SkipWriteTmpOptBudget := TRUE
                                  ELSE
                                    SkipWriteTmpOptBudget := FALSE;
                                END;

               OnPostDataItem=BEGIN
                                IF (Job."Budget Level for Options" <> Job."Budget Level for Options"::Detailed) THEN
                                  ProcessBudget(PrevOption);
                              END;

               ReqFilterFields=Plot No.,House Model,Main Group,Group,Sub Group,Option;
               DataItemLink=Project No.=FIELD(No.) }

    { 7184;2   ;DataItem;IntegerNotDetailed  ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnPreDataItem=BEGIN
                               IF (Job."Budget Level for Options" = Job."Budget Level for Options"::Detailed) THEN
                                 CurrReport.BREAK;

                               IF (PlotOption.Option = PrevOption) THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF NOT gOnDeletePlotOptionRun THEN
                                    Window.UPDATE(2, PrevOption);

                                  ProcessBudget(PrevOption);
                                  PrevOption := PlotOption.Option;
                                  VersionDate := 0D;

                                  IF NOT gOnDeletePlotOptionRun THEN
                                    Window.UPDATE(2, PlotOption.Option);
                                END;
                                 }

    { 8498;2   ;DataItem;BudgetLineClearOtherLevels;
               DataItemTable=Table11012001;
               DataItemTableView=SORTING(Project No.,Adjustment,Extension Contract,Option,Line No.)
                                 WHERE(Adjustment=FILTER(''),
                                       Extension Contract=FILTER(''),
                                       Option Line Type=FILTER(Option Budget|Option Surcharge));
               OnPreDataItem=BEGIN
                               IF PlotOption.Option = PrevOptionClearOtherLevels THEN
                                 CurrReport.BREAK;

                               PrevOptionClearOtherLevels := PlotOption.Option;
                               SETFILTER("Budget Level for Options", '<>%1', Job."Budget Level for Options");
                             END;

               OnAfterGetRecord=BEGIN
                                  DELETE;
                                END;

               DataItemLink=Project No.=FIELD(Project No.),
                            Option=FIELD(Option) }

    { 4668;2   ;DataItem;                    ;
               DataItemTable=Table11012503;
               DataItemTableView=SORTING(Project No.,Plot No.,House Model,Main Group,Group,Sub Group,Option,Line No.);
               OnPreDataItem=BEGIN
                               IF SkipWriteTmpOptBudget THEN
                                 CurrReport.BREAK;

                               OptionLineType := BudgetRec."Option Line Type"::"Option Budget";
                               IF (PlotOption."Version Date" <> 0D) AND ((PlotOption."Version Date" < VersionDate) OR (VersionDate = 0D)) THEN
                                 VersionDate := PlotOption."Version Date";
                             END;

               OnAfterGetRecord=BEGIN
                                  IF NOT gOnDeletePlotOptionRun THEN
                                    Window.UPDATE(3, "Line No.");

                                  IF (Amount =0) AND (Quantity = 0) AND ("Time Quantity" = 0) AND ("Cost Object" = '') THEN
                                    CurrReport.SKIP;

                                  OptBudgetRec := "Option Budget";
                                  CASE Job."Budget Level for Options" OF
                                    Job."Budget Level for Options"::Detailed:
                                      OptBudgetRec.Quantity := Quantity * PlotOption.Quantity;
                                    Job."Budget Level for Options"::"Option-Cost Type",
                                    Job."Budget Level for Options"::"Option-Element-Cost Type":
                                      BEGIN
                                        OptBudgetRec.Quantity := 1;
                                        OptBudgetRec."Time Quantity" := 1;

                                      END;
                                    Job."Budget Level for Options"::"Option-Cost Object",
                                    Job."Budget Level for Options"::"Option-Element-Cost Object":
                                      BEGIN
                                        OptBudgetRec.Quantity := Quantity * "Time Quantity" * PlotOption.Quantity;
                                        OptBudgetRec."Time Quantity" := 1;
                                      END;
                                  END;
                                  OptBudgetRec.Amount := Amount * PlotOption.Quantity;
                                  OptBudgetRec.Hours := Hours * PlotOption.Quantity;

                                  UpdateTmpOptBudget(OptBudgetRec);
                                END;

               DataItemLink=Project No.=FIELD(Project No.),
                            Plot No.=FIELD(Plot No.),
                            House Model=FIELD(House Model),
                            Main Group=FIELD(Main Group),
                            Group=FIELD(Group),
                            Sub Group=FIELD(Sub Group),
                            Option=FIELD(Option) }

    { 2154;2   ;DataItem;                    ;
               DataItemTable=Table11012512;
               DataItemTableView=SORTING(Project No.,House Model,Main Group,Group,Sub Group,Plot No.,Option,Line No.);
               OnPreDataItem=BEGIN
                               IF SkipWriteTmpOptBudget THEN
                                 CurrReport.BREAK;

                               OptionLineType := BudgetRec."Option Line Type"::"Option Surcharge";
                               IF PlotOption."Order Date" <> 0D THEN
                                 OptionRateDate := PlotOption."Order Date"
                               ELSE
                                 OptionRateDate := TODAY;
                             END;

               OnAfterGetRecord=VAR
                                  Job@1100528601 : Record 11072003;
                                  BudgetRateManagement@1100528600 : Codeunit 11012358;
                                  BudgetRateFoundAt@1100528602 : Text[250];
                                BEGIN
                                  IF NOT gOnDeletePlotOptionRun THEN
                                    Window.UPDATE(3, "Line No.");

                                  OptBudgetRec.INIT;
                                  OptBudgetRec."Project No." := "Project No.";
                                  OptBudgetRec."Plot No." := "Plot No.";
                                  OptBudgetRec."House Model" := "House Model";
                                  OptBudgetRec."Main Group" := "Main Group";
                                  OptBudgetRec.Group := Group;
                                  OptBudgetRec."Sub Group" := "Sub Group";
                                  OptBudgetRec.Option := Option;
                                  OptBudgetRec."Line No." := -"Line No.";  //* Use negative Line Nos. in 'TmpOptBudgRec' for Surcharges to prevent duplicates!
                                  OptBudgetRec."Cost Type" := "Cost Type";
                                  OptBudgetRec."Cost Object" := "Cost Object";
                                  //OptBudgetRec."Cost Component" := "Cost Component";
                                  //DimMgtCU.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, "Project No.");  // Call C003711 n
                                  //OptBudgetRec."Cost Component" := DimValRec."Cost Component";                // Call C003711 n

                                  OptBudgetRec.Description := Description;
                                  OptBudgetRec.Element := Element;
                                  OptBudgetRec.Chapter := Chapter;
                                  OptBudgetRec.Paragraph := Paragraph;
                                  OptBudgetRec."Time Quantity" := 1;
                                  OptBudgetRec.Quantity := 1;
                                  OptBudgetRec.Amount := "Surcharge Amount" * PlotOption.Quantity;
                                  IF OptBudgetRec."Cost Type" = OptBudgetRec."Cost Type"::Labor THEN BEGIN
                                    OptBudgetRec."Rate Code" := "Rate Code";
                                    //db, 17-11-05: waarom een tarief uitrekenen dat bekend is en bovendien datum afhankelijk ?
                                    //IF RateRec.GET("Rate Code") THEN BEGIN
                                    //  IF RateRec.ProjectRate("Project No.") <> 0 THEN
                                    //    OptBudgetRec.Hours := ROUND(OptBudgetRec.Amount / RateRec.ProjectRate("Project No."));
                                    //END;
                                    // 11-10-2006 Tarief is helemaal niet bekend 'OptBudgetRec.Rate' is hier altijd nul. Dus velden Hours
                                    //            en Norm blijven altijd nul, dus wel bepalen in RateRec. Wel is het zo dat in RateRec nu
                                    //            een begindatum zit (in key), bepalen zoals bij budget line (T11012001, veld Rate Code).
                                    //IF OptBudgetRec.Rate <> 0 THEN
                                    //  OptBudgetRec.Hours := ROUND(OptBudgetRec.Amount / OptBudgetRec.Rate);
                                    //IF OptBudgetRec.Rate <> 0 THEN
                                    //  OptBudgetRec.Hours := ROUND(OptBudgetRec.Amount / OptBudgetRec.Rate);
                                    //IF OptBudgetRec.Hours <> 0 THEN BEGIN
                                    //  OptBudgetRec.Norm := ROUND(OptBudgetRec.Hours);
                                    //  OptBudgetRec.Rate := ROUND((OptBudgetRec.Amount / OptBudgetRec.Hours), 0.00001);
                                    //END ELSE BEGIN
                                    //  OptBudgetRec.Norm := 0;
                                    //  OptBudgetRec.Rate := OptBudgetRec.Amount;
                                    //END;
                                    IF NOT Job.GET("Project No.") THEN
                                      Job.INIT;
                                    OptBudgetRec.Rate := BudgetRateManagement.GetBudgetRate(
                                      0, "Project No.", '', '', Job."Global Dimension 1 Code", "Rate Code", OptionRateDate, BudgetRateFoundAt);
                                    IF OptBudgetRec.Rate <> 0 THEN BEGIN
                                      OptBudgetRec.Norm := ROUND((OptBudgetRec.Amount / OptBudgetRec.Rate), 0.00001);
                                      OptBudgetRec.Hours := ROUND(OptBudgetRec.Norm);
                                    END ELSE BEGIN
                                      OptBudgetRec.Norm := 0;
                                      OptBudgetRec.Hours := 0;
                                      OptBudgetRec.Rate := OptBudgetRec.Amount;
                                    END;
                                  END ELSE BEGIN
                                    OptBudgetRec.Price := OptBudgetRec.Amount;
                                  END;

                                  // C015434.sn
                                  IF OptBudgetRec.Amount <> 0 THEN BEGIN
                                    TESTFIELD("Cost Object"); //Cost Object obligatory
                                    DimMgtCU.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, "Project No.");  // Call C003711 n
                                    OptBudgetRec."Cost Component" := DimValRec."Cost Component";                // Call C003711 n
                                  END;
                                  // C015434.en

                                  IF OptBudgetRec.Amount <> 0 THEN
                                    UpdateTmpOptBudget(OptBudgetRec);
                                END;

               DataItemLink=Project No.=FIELD(Project No.),
                            Plot No.=FIELD(Plot No.),
                            House Model=FIELD(House Model),
                            Main Group=FIELD(Main Group),
                            Group=FIELD(Group),
                            Sub Group=FIELD(Sub Group),
                            Option=FIELD(Option) }

    { 6719;2   ;DataItem;IntegerDetailed     ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnPreDataItem=BEGIN
                               IF (Job."Budget Level for Options" <> Job."Budget Level for Options"::Detailed) THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  ProcessBudget(PlotOption.Option);
                                END;
                                 }

    { 3896;1   ;DataItem;RemoveBudgetDeletedOptions;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnAfterGetRecord=BEGIN
                                  IF OptionBatchUpdate THEN
                                    RemoveOptionLinesFromBudget(Job);
                                END;
                                 }

    { 9499;1   ;DataItem;DeleteOptionAdjusmentBudget;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnAfterGetRecord=BEGIN
                                  CheckDeleteOptionAdjustBudget();
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@11012006 : TextConst 'DEU=Aktualisieren Budget...\\;ENU=Updating Budget...\\;NLD=Bijwerken werkbegroting...\\;NOR=Oppdaterer budsjettÿ...\\;SVE=Uppdaterar budgetÿ...\\';
      Text001@11012007 : TextConst 'DEU=Projekt          #1##########\;ENU=Project          #1##########\;NLD=Project          #1##########\;NOR=Prosjekt          #1##########\;SVE=Projekt          #1##########\';
      Text002@11012008 : TextConst 'DEU=Option            #2##########\\;ENU=Option        #2##########\\;NLD=Optie            #2##########\\;NOR=Alternativ        #2##########\\;SVE=Alternativ        #2##########\\';
      Text003@11012010 : TextConst 'DEU=Zeilennr.        #3##########\\;ENU=Line No.        #3##########\\;NLD=Regelnr.         #3##########\\;NOR=Rad No.        #3##########\\;SVE=Radnr.          #3##########\\';
      Text004@11012013 : TextConst 'DEU=Es sind keine Optionen aktualisiert worden.;ENU=No Options Updated;NLD=Er zijn geen opties bijgewerkt;NOR=Ingen alternativer er oppdatert;SVE=Inga alternativ har uppdaterats';
      Text005@11012014 : TextConst 'DEU=Es sind %1 Optionen aktualisiert worden.;ENU=There are %1 Options updated;NLD=Er zijn %1 opties bijgewerkt;NOR=%1 alternativ er oppdatert;SVE=%1 alternativ har uppdaterats';
      ProjSetupRec@1210190013 : Record 315;
      ProjElemRec@1210190010 : Record 11012010;
      BudgetRec@1210190003 : Record 11012001;
      OptBudgetRec@1210190001 : Record 11012503;
      DimValRec@1210190011 : Record 349;
      ProjPurchActRec@1100525000 : Record 11012026;
      TmpOptBudgRec@1210190036 : TEMPORARY Record 11012503;
      TmpUpdBudgLineRec@1100525006 : TEMPORARY Record 11012514;
      DimMgtCU@1210190012 : Codeunit 408;
      Window@11012000 : Dialog;
      OptionLineType@1210190002 : Option;
      gOnDeletePlotOptionRun@1210190034 : Boolean;
      gOnResetOptionStatusRun@1210190046 : Boolean;
      SkipWriteTmpOptBudget@1210190045 : Boolean;
      VersionDate@1210190044 : Date;
      OptionRateDate@1100485003 : Date;
      Counter@11012001 : Integer;
      NextLineNoTmp@1210190037 : Integer;
      NextLineNo@1210190007 : Integer;
      gDelProjectNo@1210190043 : Code[20];
      gDelPlotNo@1210190042 : Code[10];
      gDelHouseModel@1210190041 : Code[20];
      gDelMainGroup@1210190040 : Code[20];
      gDelGroup@1210190039 : Code[20];
      gDelSubGroup@1210190005 : Code[20];
      gDelOption@1210190000 : Code[20];
      ProjElement@1210190004 : Code[20];
      ProjChapter@1210190008 : Code[20];
      ProjParagraph@1210190009 : Code[20];
      CostObjectLabor@1210190014 : Code[20];
      CostObjectMaterial@1210190015 : Code[20];
      CostObjectSubcontr@1210190016 : Code[20];
      CostObjectPlant@1210190017 : Code[20];
      CostObjectSundry@1210190018 : Code[20];
      UnitLabor@1210190028 : Code[10];
      UnitMaterial@1210190027 : Code[10];
      UnitSubcontr@1210190026 : Code[10];
      UnitPlant@1210190025 : Code[10];
      UnitSundry@1210190024 : Code[10];
      TimeUnitLabor@1210190033 : Code[10];
      TimeUnitMaterial@1210190032 : Code[10];
      TimeUnitSubcontr@1210190031 : Code[10];
      TimeUnitPlant@1210190030 : Code[10];
      TimeUnitSundry@1210190029 : Code[10];
      PrevOption@1210190038 : Code[20];
      PrevOptionClearOtherLevels@1210190035 : Code[20];
      CostObjectNameLabor@1210190023 : Text[50];
      CostObjectNameMaterial@1210190022 : Text[50];
      CostObjectNameSubcontr@1210190021 : Text[50];
      CostObjectNamePlant@1210190020 : Text[50];
      CostObjectNameSundry@1210190019 : Text[50];
      OptionBatchUpdate@1100485001 : Boolean;
      Text006@1100485000 : TextConst 'DEU=Das Budet ist aktualisiert worden.;ENU="De budget is updated. ";NLD="De werkbegroting is bijgewerkt. ";NOR=Budsjettet er oppdatert.;SVE="Budgeten har uppdaterats. "';
      UseAdjustmentNo@1100528201 : Code[10];
      LastAdjustmentNo@1100528200 : Code[10];

    PROCEDURE SetOnDeletePlotOptionRun@1210190002(IProjectNo@1210190000 : Code[20];IPlotNo@1210190001 : Code[10];IHouseModel@1210190002 : Code[20];IMainGroup@1210190003 : Code[20];IGroup@1210190004 : Code[20];ISubGroup@1210190005 : Code[20];IOption@1210190006 : Code[20]);
    BEGIN
      gOnDeletePlotOptionRun := TRUE;
      gDelProjectNo := IProjectNo;
      gDelPlotNo := IPlotNo;
      gDelHouseModel := IHouseModel;
      gDelMainGroup := IMainGroup;
      gDelGroup := IGroup;
      gDelSubGroup := ISubGroup;
      gDelOption := IOption;
    END;

    PROCEDURE SetOnResetOptionStatusRun@1210190003(IProjectNo@1210190000 : Code[20];IPlotNo@1210190001 : Code[10];IHouseModel@1210190002 : Code[20];IMainGroup@1210190003 : Code[20];IGroup@1210190004 : Code[20];ISubGroup@1210190005 : Code[20];IOption@1210190006 : Code[20]);
    BEGIN
      gOnResetOptionStatusRun := TRUE;
      gDelProjectNo := IProjectNo;
      gDelPlotNo := IPlotNo;
      gDelHouseModel := IHouseModel;
      gDelMainGroup := IMainGroup;
      gDelGroup := IGroup;
      gDelSubGroup := ISubGroup;
      gDelOption := IOption;
    END;

    PROCEDURE UpdateTmpOptBudget@1210190041(IOptBudgRec@1210190000 : Record 11012503);
    BEGIN
      WITH IOptBudgRec DO BEGIN
        IF (Job."Budget Level for Options" = Job."Budget Level for Options"::Detailed) THEN BEGIN
          TmpOptBudgRec := IOptBudgRec;
          TmpOptBudgRec."Source Type" := OptionLineType;
          TmpOptBudgRec.INSERT;
          EXIT;
        END;

        "Plot No." := '';
        "House Model" := '';
        "Main Group" := '';
        Group := '';
        "Sub Group" := '';
        CASE Job."Budget Level for Options" OF
          Job."Budget Level for Options"::"Option-Cost Type",
          Job."Budget Level for Options"::"Option-Element-Cost Type":
            BEGIN
              IF Job."Budget Level for Options" = Job."Budget Level for Options"::"Option-Cost Type" THEN BEGIN
                Element := ProjElement;
                Chapter := ProjChapter;
                Paragraph := ProjParagraph;
              END;
              GetCommonCostObjectData("Cost Type", "Cost Object", Description, "Unit of Measure", "Unit of Time");
              "Description 2" := '';
              "Item No." := '';
              "Basic Item" := '';
              Manufacturer := '';
              "Trade Item" := '';
              "Vendor (Trade Item)" := '';
              Quantity := 1;
              "Time Quantity" := 1;
              IF "Cost Type" = "Cost Type"::Labor THEN
                "Rate Code" := ProjSetupRec."Rate Code Option in Budget";
            END;
          Job."Budget Level for Options"::"Option-Cost Object",
          Job."Budget Level for Options"::"Option-Element-Cost Object":
            BEGIN
              IF Job."Budget Level for Options" = Job."Budget Level for Options"::"Option-Cost Object" THEN BEGIN
                Element := ProjElement;
                Chapter := ProjChapter;
                Paragraph := ProjParagraph;
              END;
              IF "Cost Type" = "Cost Type"::Labor THEN
                "Rate Code" := ProjSetupRec."Rate Code Option in Budget";
            END;
        END;

        TmpOptBudgRec.RESET;
        TmpOptBudgRec.SETRANGE("Source Type", OptionLineType);  //* (Mis)Use of field 'Source Type' for Option Line Type.
        TmpOptBudgRec.SETRANGE("Project No.", "Project No.");
        TmpOptBudgRec.SETRANGE(Option, Option);
        TmpOptBudgRec.SETRANGE("Cost Component", "Cost Component");
        CASE Job."Budget Level for Options" OF
          Job."Budget Level for Options"::"Option-Cost Type",
          Job."Budget Level for Options"::"Option-Element-Cost Type":
            BEGIN
              IF Job."Budget Level for Options" = Job."Budget Level for Options"::"Option-Element-Cost Type" THEN
                TmpOptBudgRec.SETRANGE(Element, Element);
              TmpOptBudgRec.SETRANGE("Cost Type", "Cost Type");
            END;
          Job."Budget Level for Options"::"Option-Cost Object",
          Job."Budget Level for Options"::"Option-Element-Cost Object":
            BEGIN
              IF Job."Budget Level for Options" = Job."Budget Level for Options"::"Option-Element-Cost Object" THEN
                TmpOptBudgRec.SETRANGE(Element, Element);
              TmpOptBudgRec.SETRANGE("Cost Type", "Cost Type");
              TmpOptBudgRec.SETRANGE("Cost Object", "Cost Object");
              TmpOptBudgRec.SETRANGE(Description, Description);
              TmpOptBudgRec.SETRANGE("Description 2", "Description 2");
              TmpOptBudgRec.SETRANGE("Unit of Measure", "Unit of Measure");
              TmpOptBudgRec.SETRANGE("Unit of Time", "Unit of Time");
              IF "Cost Type" = "Cost Type"::Material THEN BEGIN
                TmpOptBudgRec.SETRANGE("Item No.", "Item No.");
                TmpOptBudgRec.SETRANGE("Basic Item", "Basic Item");
                TmpOptBudgRec.SETRANGE(Manufacturer, Manufacturer);
                TmpOptBudgRec.SETRANGE("Trade Item", "Trade Item");
                TmpOptBudgRec.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
              END;
            END;
        END;

      //extra filter ivm M24810 toevoegen op staartkosten
        IF "Overhead Surcharge from Summ." THEN
          TmpOptBudgRec.SETRANGE("Overhead Surcharge from Summ.", "Overhead Surcharge from Summ.");

        IF NOT TmpOptBudgRec.FIND('-') THEN BEGIN
          TmpOptBudgRec := IOptBudgRec;
          TmpOptBudgRec."Line No." := NextLineNoTmp;
          NextLineNoTmp := NextLineNoTmp + 1;
          TmpOptBudgRec."Source Type" := OptionLineType;
          TmpOptBudgRec.INSERT;
        END ELSE BEGIN
          //* Note: Don't count "Time Quantity", is always '1' when data is compressed
          IF (OptionLineType <> BudgetRec."Option Line Type"::"Option Surcharge") AND
             (Job."Budget Level for Options" <> Job."Budget Level for Options"::"Option-Cost Type") AND
             (Job."Budget Level for Options" <> Job."Budget Level for Options"::"Option-Element-Cost Type")
          THEN BEGIN
            TmpOptBudgRec.Quantity := TmpOptBudgRec.Quantity + Quantity;
          END;
          TmpOptBudgRec.Amount := TmpOptBudgRec.Amount + Amount;
          TmpOptBudgRec.Hours := TmpOptBudgRec.Hours + Hours;
          //extra velden ivm M24810 sn
          BudgetRec."Surcharge Amnt from Summary" := TmpOptBudgRec."Surcharge Amnt from Summary";
          TmpOptBudgRec.MODIFY;
        END;
      END;
    END;

    PROCEDURE ProcessBudget@1210190050(IOption@1210190000 : Code[20]);
    VAR
      lOptionRec@1100485000 : Record 11012502;
      lvBudgetAdjustment@1100528200 : Record 11012003;
      lvBudgetRecTotalCount@1100528201 : Record 11012001;
      lvStep@1100528205 : Integer;
      TotalQuantity@1100528204 : Decimal;
      TotalAmount@1100528203 : Decimal;
      totalHours@1100528202 : Decimal;
      TmpOptBudgRec2@1100525000 : TEMPORARY Record 11012503;
    BEGIN
      IF IOption = '' THEN
        EXIT;

      //bepaal adjustment new 19-05-2015
      UseAdjustmentNo := '';
      LastAdjustmentNo := '';
      IF Job."Budget Fixed" THEN BEGIN
        lvBudgetAdjustment.SETRANGE("Project No.",Job."No.");
        IF lvBudgetAdjustment.FINDLAST THEN BEGIN
          LastAdjustmentNo := lvBudgetAdjustment."No.";
          IF lvBudgetAdjustment."Correction Fixed" THEN BEGIN
            lvBudgetAdjustment.GetDefaultAdjustmentNo()
          END;
        END ELSE BEGIN
          lvBudgetAdjustment."Project No." := Job."No.";
          lvBudgetAdjustment.GetDefaultAdjustmentNo();
        END;
        UseAdjustmentNo := lvBudgetAdjustment."No.";
      END;
      //

      //** Copy tmp table
      TmpOptBudgRec.RESET;
      IF TmpOptBudgRec.FINDSET THEN
        REPEAT
          TmpOptBudgRec2 := TmpOptBudgRec;
          TmpOptBudgRec2.INSERT;
        UNTIL TmpOptBudgRec.NEXT = 0;
      //

      BudgetRec.RESET;
      BudgetRec.SETRANGE("Project No.", Job."No.");
      //BudgetRec.SETRANGE(Adjustment, '');   //new 19-05-2015--> cater for updates
      BudgetRec.SETRANGE("Extension Contract", '');
      BudgetRec.SETRANGE(Option, IOption);
      BudgetRec.SETRANGE("Budget Level for Options", Job."Budget Level for Options");
      IF Job."Budget Level for Options" = Job."Budget Level for Options"::Detailed THEN BEGIN
        BudgetRec.SETRANGE("Plot No.", PlotOption."Plot No.");
        BudgetRec.SETRANGE("House Model", PlotOption."House Model");
        BudgetRec.SETRANGE("Main Group", PlotOption."Main Group");
        BudgetRec.SETRANGE(Group, PlotOption.Group);
        BudgetRec.SETRANGE("Sub Group", PlotOption."Sub Group");
      END;
      IF BudgetRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          lvBudgetRecTotalCount.COPY(BudgetRec); //new 19-05-2015
          TmpOptBudgRec.RESET;
          TmpOptBudgRec.SETRANGE("Source Type", BudgetRec."Option Line Type");
          TmpOptBudgRec.SETRANGE("Project No.", BudgetRec."Project No.");
          TmpOptBudgRec.SETRANGE(Option, BudgetRec.Option);
          TmpOptBudgRec.SETRANGE("Cost Component", BudgetRec."Cost Component");
          //extra filter ivm M24810 toevoegen op staartkosten
          TmpOptBudgRec.SETRANGE("Overhead Surcharge from Summ.", BudgetRec."Overhead Surcharge from Summ.");
          //new 19-05-2015 s
          lvBudgetRecTotalCount.SETRANGE("Option Line Type", BudgetRec."Option Line Type");
          lvBudgetRecTotalCount.SETRANGE("Cost Component", BudgetRec."Cost Component");
          lvBudgetRecTotalCount.SETRANGE("Overhead Surcharge from Summ.", BudgetRec."Overhead Surcharge from Summ.");
          //new 19-05-2015 e

          CASE Job."Budget Level for Options" OF
            Job."Budget Level for Options"::Detailed:
              BEGIN
                TmpOptBudgRec.SETRANGE("Plot No.", BudgetRec."Plot No.");
                TmpOptBudgRec.SETRANGE("House Model", BudgetRec."House Model");
                TmpOptBudgRec.SETRANGE("Main Group", BudgetRec."Main Group");
                TmpOptBudgRec.SETRANGE(Group, BudgetRec.Group);
                TmpOptBudgRec.SETRANGE("Sub Group", BudgetRec."Sub Group");
                IF BudgetRec."Option Line Type" <> BudgetRec."Option Line Type"::"Option Surcharge" THEN
                  TmpOptBudgRec.SETRANGE("Line No.", BudgetRec."Option Line No.")
                ELSE
                  TmpOptBudgRec.SETRANGE("Line No.", -BudgetRec."Option Line No."); //* Surch. with neg. Line No in 'TmpOptBudgRec'

                //new 19-05-2015 s
                  lvBudgetRecTotalCount.SETRANGE("Option Line No.", BudgetRec."Option Line No.");
                //new 19-05-2015 e

              END;
            Job."Budget Level for Options"::"Option-Cost Type",
            Job."Budget Level for Options"::"Option-Element-Cost Type":
              BEGIN
                IF Job."Budget Level for Options" = Job."Budget Level for Options"::"Option-Element-Cost Type" THEN BEGIN
                  TmpOptBudgRec.SETRANGE(Element, BudgetRec.Element);
                  //new 19-05-2015 s
                  lvBudgetRecTotalCount.SETRANGE(Element, BudgetRec.Element);
                  //new 19-05-2015 e
                END;
                TmpOptBudgRec.SETRANGE("Cost Type", BudgetRec."Cost Type");
                //new 19-05-2015 s
                lvBudgetRecTotalCount.SETRANGE("Cost Type", BudgetRec."Cost Type");
                //new 19-05-2015 e

              END;
            Job."Budget Level for Options"::"Option-Cost Object",
            Job."Budget Level for Options"::"Option-Element-Cost Object":
              BEGIN
                IF Job."Budget Level for Options" = Job."Budget Level for Options"::"Option-Element-Cost Object" THEN BEGIN
                  TmpOptBudgRec.SETRANGE(Element, BudgetRec.Element);
                  //new 19-05-2015 s
                  lvBudgetRecTotalCount.SETRANGE(Element, BudgetRec.Element);
                  //new 19-05-2015 e
                END;
                TmpOptBudgRec.SETRANGE("Cost Type", BudgetRec."Cost Type");
                TmpOptBudgRec.SETRANGE("Cost Object", BudgetRec."Cost Object");
                TmpOptBudgRec.SETRANGE(Description, BudgetRec.Description);
                TmpOptBudgRec.SETRANGE("Description 2", BudgetRec."Description 2");
                TmpOptBudgRec.SETRANGE("Unit of Measure", BudgetRec."Unit of Measure");
                TmpOptBudgRec.SETRANGE("Unit of Time", BudgetRec."Unit of Time");
                //new 19-05-2015 s
                lvBudgetRecTotalCount.SETRANGE("Cost Type", BudgetRec."Cost Type");
                lvBudgetRecTotalCount.SETRANGE("Cost Object", BudgetRec."Cost Object");
                lvBudgetRecTotalCount.SETRANGE(Description, BudgetRec.Description);
                lvBudgetRecTotalCount.SETRANGE("Description 2", BudgetRec."Description 2");
                lvBudgetRecTotalCount.SETRANGE("Unit of Measure", BudgetRec."Unit of Measure");
                lvBudgetRecTotalCount.SETRANGE("Unit of Time", BudgetRec."Unit of Time");
                //new 19-05-2015 e
                IF BudgetRec."Cost Type" = BudgetRec."Cost Type"::Material THEN BEGIN
                  TmpOptBudgRec.SETRANGE("Item No.", BudgetRec."Item No.");
                  TmpOptBudgRec.SETRANGE("Basic Item", BudgetRec."Basic Item");
                  TmpOptBudgRec.SETRANGE(Manufacturer, BudgetRec.Manufacturer);
                  TmpOptBudgRec.SETRANGE("Trade Item", BudgetRec."Trade Item");
                  TmpOptBudgRec.SETRANGE("Vendor (Trade Item)", BudgetRec."Vendor (Trade Item)");
                  //new 19-05-2015 s
                  lvBudgetRecTotalCount.SETRANGE("Item No.", BudgetRec."Item No.");
                  lvBudgetRecTotalCount.SETRANGE("Basic Item", BudgetRec."Basic Item");
                  lvBudgetRecTotalCount.SETRANGE(Manufacturer, BudgetRec.Manufacturer);
                  lvBudgetRecTotalCount.SETRANGE("Trade Item", BudgetRec."Trade Item");
                  lvBudgetRecTotalCount.SETRANGE("Vendor (Trade Item)", BudgetRec."Vendor (Trade Item)");
                  //new 19-05-2015 e
                END;
              END;
          END;

          IF NOT TmpOptBudgRec.FIND('-') THEN BEGIN
            //Sleutel bestaat niet in opties, dus verwijderen, of totale aantal naar 0 resetten.
            //new 19-05-2015 s
            TotalQuantity  := 0;
            totalHours := 0;
            TotalAmount := 0;
            lvBudgetRecTotalCount.SETCURRENTKEY("Project No.",Adjustment,"Extension Contract",Option,"Settlement Quantity Code","Line No.");
            IF lvBudgetRecTotalCount.FINDSET THEN BEGIN
              //In het ideale geval stap je er door heen per correctie.
              lvStep := 0;
              REPEAT
                TotalQuantity := TotalQuantity + lvBudgetRecTotalCount."Time Quantity" * lvBudgetRecTotalCount.Quantity;
                TotalAmount := TotalAmount + lvBudgetRecTotalCount."Amount (LCY)";
                totalHours := totalHours + lvBudgetRecTotalCount.Hours;
                lvStep += 1;
              UNTIL lvBudgetRecTotalCount.NEXT = 0;
            END;
            IF NOT ((TotalQuantity = 0) AND (TotalAmount = 0) AND (totalHours = 0)) THEN BEGIN
              IF lvStep <= 1 THEN BEGIN
            //new 19-05-2015 e
                BudgetRec.DELETE;
                Job.UpdateCostControlStatus(2, '', BudgetRec."Cost Object");
            //new 19-05-2015 s
              END ELSE BEGIN
                IF (UseAdjustmentNo = '') OR
                   ((LastAdjustmentNo=UseAdjustmentNo) AND (UseAdjustmentNo = lvBudgetRecTotalCount.Adjustment)) THEN
                BEGIN
                  //herschrijf laatste regel (is totaal resetten naar 0)
                  CorrectBudgetRec(lvBudgetRecTotalCount, totalHours, TotalQuantity, TotalAmount);
                  lvBudgetRecTotalCount.MODIFY;
                  Job.UpdateCostControlStatus(1, '', BudgetRec."Cost Object");
                END ELSE BEGIN
                  //voeg regel toe aan laatste correctie
                  lvBudgetRecTotalCount.Adjustment := UseAdjustmentNo;
                  NewBudgetRecValues(lvBudgetRecTotalCount, totalHours, TotalQuantity, TotalAmount);

                  //Reset Purchase Action
                  lvBudgetRecTotalCount."Purchase Action" := '';
                  IF lvBudgetRecTotalCount."Cost Object" <> '' THEN BEGIN
                    DimMgtCU.GetDimValueRec(2, lvBudgetRecTotalCount."Cost Object", DimValRec, FALSE, '');
                    IF DimValRec."Purchase Action" <> '' THEN BEGIN
                      IF ProjPurchActRec.GET(lvBudgetRecTotalCount."Project No.", DimValRec."Purchase Action") THEN BEGIN
                        IF ProjPurchActRec.Status < ProjPurchActRec.Status::Applied THEN
                          lvBudgetRecTotalCount."Purchase Action" := DimValRec."Purchase Action";
                      END;
                    END;
                  END;
                  //

                  lvBudgetRecTotalCount.INSERT;
                  Job.UpdateCostControlStatus(1, '', BudgetRec."Cost Object");
                END;
              END;
            END;
            //new 19-05-2015 e
          END ELSE BEGIN
            //record is ook in TmpOptionBudget aanwezig, dus aantal aanpassen
            //new 19-05-2015 s
            TotalQuantity  := 0;
            totalHours := 0;
            TotalAmount := 0;
            IF lvBudgetRecTotalCount.FINDSET THEN BEGIN
              //1 regel per adjustment (of 2  als het + en - is)
              lvStep := 0;
              REPEAT
                TotalQuantity := TotalQuantity + lvBudgetRecTotalCount."Time Quantity" * lvBudgetRecTotalCount.Quantity;
                TotalAmount :=  TotalAmount + lvBudgetRecTotalCount."Amount (LCY)";
                totalHours := totalHours + lvBudgetRecTotalCount.Hours;
                lvStep += 1;
              UNTIL lvBudgetRecTotalCount.NEXT = 0;
            END;

            IF NOT ((TotalQuantity = TmpOptBudgRec.Quantity) AND
                    (TotalAmount = TmpOptBudgRec.Amount) AND
                    (totalHours = TmpOptBudgRec.Hours)) THEN BEGIN
              IF lvStep > 0 THEN BEGIN
                IF (UseAdjustmentNo = '') OR
                   ((LastAdjustmentNo=UseAdjustmentNo) AND (UseAdjustmentNo = lvBudgetRecTotalCount.Adjustment)) THEN
                BEGIN
                  //herschrijf laatste regel ()
                  CorrectBudgetRec(lvBudgetRecTotalCount,
                    totalHours-TmpOptBudgRec.Hours,
                    TotalQuantity-TmpOptBudgRec.Quantity,
                    TotalAmount-TmpOptBudgRec.Amount);
                  lvBudgetRecTotalCount.MODIFY;
                  Job.UpdateCostControlStatus(1, '', BudgetRec."Cost Object");
                END ELSE BEGIN
                  //voeg regel toe aan laatste correctie
                  lvBudgetRecTotalCount.Adjustment := UseAdjustmentNo;
                  NewBudgetRecValues(lvBudgetRecTotalCount,
                    totalHours-TmpOptBudgRec.Hours,
                    TotalQuantity-TmpOptBudgRec.Quantity,
                    TotalAmount-TmpOptBudgRec.Amount);

                  //Reset Purchase Action
                  lvBudgetRecTotalCount."Purchase Action" := '';
                  IF lvBudgetRecTotalCount."Cost Object" <> '' THEN BEGIN
                    DimMgtCU.GetDimValueRec(2, lvBudgetRecTotalCount."Cost Object", DimValRec, FALSE, '');
                    IF DimValRec."Purchase Action" <> '' THEN BEGIN
                      IF ProjPurchActRec.GET(lvBudgetRecTotalCount."Project No.", DimValRec."Purchase Action") THEN BEGIN
                        IF ProjPurchActRec.Status < ProjPurchActRec.Status::Applied THEN
                          lvBudgetRecTotalCount."Purchase Action" := DimValRec."Purchase Action";
                      END;
                    END;
                  END;
                  //

                  lvBudgetRecTotalCount.INSERT;
                  Job.UpdateCostControlStatus(1, '', BudgetRec."Cost Object");
                END;
              END;
            END;

            //new 19-05-2015 e

            IF OptionBatchUpdate THEN
              InsertTmpUpdBudgetLine();

            TmpOptBudgRec2 := TmpOptBudgRec;
            IF TmpOptBudgRec2.FIND('=') THEN
              TmpOptBudgRec2.DELETE;

          END;

          //new 17-12
          lvBudgetRecTotalCount.SETRANGE("Option Line Type");
          lvBudgetRecTotalCount.SETRANGE("Cost Component");
          lvBudgetRecTotalCount.SETRANGE("Overhead Surcharge from Summ.");
          lvBudgetRecTotalCount.SETRANGE("Option Line No.");
          lvBudgetRecTotalCount.SETRANGE(Element);
          lvBudgetRecTotalCount.SETRANGE("Cost Type");
          lvBudgetRecTotalCount.SETRANGE("Cost Object");
          lvBudgetRecTotalCount.SETRANGE(Description);
          lvBudgetRecTotalCount.SETRANGE("Description 2");
          lvBudgetRecTotalCount.SETRANGE("Unit of Measure");
          lvBudgetRecTotalCount.SETRANGE("Unit of Time");
          lvBudgetRecTotalCount.SETRANGE("Item No.");
          lvBudgetRecTotalCount.SETRANGE("Basic Item");
          lvBudgetRecTotalCount.SETRANGE(Manufacturer);
          lvBudgetRecTotalCount.SETRANGE("Trade Item");
          lvBudgetRecTotalCount.SETRANGE("Vendor (Trade Item)");
          //new 17-12

        UNTIL BudgetRec.NEXT = 0;
      END;

      TmpOptBudgRec2.RESET;     //Lines that are not matched with budgetline
      IF TmpOptBudgRec2.FIND('-') THEN BEGIN
        BudgetRec.RESET;
        BudgetRec.SETRANGE("Project No.", TmpOptBudgRec."Project No.");
        BudgetRec.SETRANGE(Adjustment, '');
        BudgetRec.SETRANGE("Extension Contract", '');
        BudgetRec.SETRANGE(Option, TmpOptBudgRec.Option);
        BudgetRec.SETRANGE("Settlement Quantity Code", '');

        NextLineNo := 10;
        IF BudgetRec.FINDLAST THEN
          NextLineNo := NextLineNo + BudgetRec."Line No.";
        REPEAT
          TmpOptBudgRec := TmpOptBudgRec2;
          IF TmpOptBudgRec.FIND('=') THEN BEGIN
            BudgetRec.INIT;
            BudgetRec."Project No." := TmpOptBudgRec."Project No.";
            BudgetRec.Adjustment := UseAdjustmentNo;
            BudgetRec."Extension Contract" := '';
            BudgetRec.Option := TmpOptBudgRec.Option;
            BudgetRec."Settlement Quantity Code" := '';
            BudgetRec."Line No." := NextLineNo;
            FillBudgetFields();
            FillPurchaseAction();
            BudgetRec.FillMainProject;

            IF BudgetRec.Option <> '' THEN BEGIN
              lOptionRec.SETRANGE("Project No.", BudgetRec."Project No.");
              lOptionRec.SETRANGE(Option, BudgetRec.Option);
              lOptionRec.SETRANGE("Plot No.", BudgetRec."Plot No.");
              IF lOptionRec.FINDFIRST THEN
                BudgetRec."Version Date" := lOptionRec."Version Date";
            END;
            BudgetRec."Department Code" := Job."Global Dimension 1 Code";  //*31927

            BudgetRec.FillElementPhaseCodeBasedOnElement;
            BudgetRec.INSERT;
            Job.UpdateCostControlStatus(0, '', BudgetRec."Cost Object"); //kzwerver, 120116, n, #PER
            NextLineNo := NextLineNo + 10;
            IF OptionBatchUpdate THEN
              InsertTmpUpdBudgetLine();
          END;
        UNTIL TmpOptBudgRec2.NEXT = 0;
      END;

      TmpOptBudgRec.RESET;
      TmpOptBudgRec2.RESET;
      TmpOptBudgRec.DELETEALL;
      TmpOptBudgRec2.DELETEALL;

      NextLineNoTmp := 1;
    END;

    PROCEDURE FillBudgetFields@10();
    BEGIN
      WITH TmpOptBudgRec DO BEGIN
        BudgetRec."Option Line Type" := "Source Type";
        BudgetRec."Budget Level for Options" := Job."Budget Level for Options";
        BudgetRec."Version Date" := VersionDate;
        BudgetRec."Plot No." := "Plot No.";
        BudgetRec."House Model" := "House Model";
        BudgetRec."Main Group" := "Main Group";
        BudgetRec.Group := Group;
        BudgetRec."Sub Group" := "Sub Group";
        IF Job."Budget Level for Options" <> Job."Budget Level for Options"::Detailed THEN
          BudgetRec."Option Line No." := 0
        ELSE BEGIN
          IF BudgetRec."Option Line Type" <> BudgetRec."Option Line Type"::"Option Surcharge" THEN
            BudgetRec."Option Line No." := "Line No."
          ELSE
            BudgetRec."Option Line No." := -"Line No.";  //* Surch. with neg. Line No in 'TmpOptBudgRec', must be pos. 'BudgetRec'
        END;
        BudgetRec."Cost Type" := "Cost Type";
        BudgetRec."Cost Object" := "Cost Object";
        BudgetRec."Cost Component" := "Cost Component";
        BudgetRec.Element := Element;
        BudgetRec.Chapter := Chapter;
        BudgetRec.Paragraph := Paragraph;
        BudgetRec.FillElementPhaseCodeBasedOnElement;
        BudgetRec."Item No." := "Item No.";
        BudgetRec."Basic Item" := "Basic Item";
        BudgetRec.Manufacturer := Manufacturer;
        BudgetRec."Trade Item" := "Trade Item";
        BudgetRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
        BudgetRec.Description := Description;
        BudgetRec."Description 2" := "Description 2";
        BudgetRec."Unit of Measure" := "Unit of Measure";
        BudgetRec."Unit of Time" := "Unit of Time";
        BudgetRec.Quantity := Quantity;
        BudgetRec."Time Quantity" := "Time Quantity";
        BudgetRec."Amount (LCY)" := Amount;
        BudgetRec."Surcharge Amnt from Summary" := TmpOptBudgRec."Surcharge Amnt from Summary";
        BudgetRec."Overhead Surcharge from Summ." := TmpOptBudgRec."Overhead Surcharge from Summ.";
        BudgetRec."Location Code (CUF)" := TmpOptBudgRec."Location Code (CUF)";  //C054894
        IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
          BudgetRec.Norm := Norm;
          BudgetRec."Rate Code" := "Rate Code";
          BudgetRec."Rate (LCY)" := Rate;
          BudgetRec.Hours := Hours;
          BudgetRec."Price (LCY)" := 0;
        END ELSE BEGIN
          BudgetRec.Norm := 0;
          BudgetRec."Rate Code" := '';
          BudgetRec."Rate (LCY)" := 0;
          BudgetRec.Hours := 0;
          BudgetRec."Price (LCY)" := Price;
        END;

        IF BudgetRec."Budget Level for Options" <> BudgetRec."Budget Level for Options"::Detailed THEN BEGIN
          IF BudgetRec."Cost Type" = "Cost Type"::Labor THEN BEGIN
            IF BudgetRec.Hours <> 0 THEN BEGIN
              BudgetRec."Rate (LCY)" := ROUND((BudgetRec."Amount (LCY)" / BudgetRec.Hours), 0.00001);
              IF BudgetRec.Quantity = 0 THEN
                BudgetRec.Quantity := 1;
              IF BudgetRec."Time Quantity" = 0 THEN
                BudgetRec."Time Quantity" := 1;
              BudgetRec.Norm := ROUND((BudgetRec.Hours / (BudgetRec.Quantity * BudgetRec."Time Quantity")), 0.00001);
            END ELSE BEGIN
              BudgetRec."Rate (LCY)" := BudgetRec."Amount (LCY)";
              BudgetRec.Norm := 0
            END;
          END ELSE BEGIN
            IF BudgetRec.Quantity <> 0 THEN
              BudgetRec."Price (LCY)" := BudgetRec."Amount (LCY)" / BudgetRec.Quantity
            ELSE
              BudgetRec."Price (LCY)" := BudgetRec."Amount (LCY)";
          END;
        END;

      END;
    END;

    PROCEDURE CorrectBudgetRec@1100528204(VAR CorrectionBudgetRec@1100528200 : Record 11012001;HoursCorrection@1100528201 : Decimal;QuantityCorrection@1100528202 : Decimal;AmountCorrection@1100528203 : Decimal);
    BEGIN
      //new 19-05-2015
      CorrectionBudgetRec."Amount (LCY)" := CorrectionBudgetRec."Amount (LCY)" - AmountCorrection;
      CorrectionBudgetRec.Quantity := CorrectionBudgetRec.Quantity - QuantityCorrection;

      IF CorrectionBudgetRec."Cost Type" = CorrectionBudgetRec."Cost Type"::Labor THEN BEGIN
        CorrectionBudgetRec.Hours := CorrectionBudgetRec.Hours - HoursCorrection;
        IF CorrectionBudgetRec.Hours <> 0 THEN
          CorrectionBudgetRec."Rate (LCY)" := ROUND((CorrectionBudgetRec."Amount (LCY)" / CorrectionBudgetRec.Hours), 0.00001)
        ELSE
          CorrectionBudgetRec."Rate (LCY)" := CorrectionBudgetRec."Amount (LCY)";
      END ELSE BEGIN
        IF CorrectionBudgetRec.Quantity <> 0 THEN
          CorrectionBudgetRec."Price (LCY)" := CorrectionBudgetRec."Amount (LCY)" / CorrectionBudgetRec.Quantity
        ELSE
          CorrectionBudgetRec."Price (LCY)" := CorrectionBudgetRec."Amount (LCY)";
      END;
    END;

    PROCEDURE NewBudgetRecValues@1100528208(VAR NewBudgetRec@1100528203 : Record 11012001;HoursCorrection@1100528202 : Decimal;QuantityCorrection@1100528201 : Decimal;AmountCorrection@1100528200 : Decimal);
    VAR
      lBudgetRec@1100528204 : Record 11012001;
      lNextLineNo@1100528205 : Integer;
    BEGIN
      //new 19-05-201
      lBudgetRec.RESET;
      lBudgetRec.SETRANGE("Project No.", NewBudgetRec."Project No.");
      lBudgetRec.SETRANGE(Adjustment, NewBudgetRec.Adjustment);
      lBudgetRec.SETRANGE("Extension Contract", NewBudgetRec."Extension Contract");
      lBudgetRec.SETRANGE(Option, NewBudgetRec.Option);
      lBudgetRec.SETRANGE("Settlement Quantity Code", NewBudgetRec."Settlement Quantity Code");
      IF Job."Budget Level for Options" = Job."Budget Level for Options"::Detailed THEN BEGIN
        lBudgetRec.SETRANGE("Plot No.", NewBudgetRec."Plot No.");
        lBudgetRec.SETRANGE("House Model", NewBudgetRec."House Model");
        lBudgetRec.SETRANGE("Main Group", NewBudgetRec."Main Group");
        lBudgetRec.SETRANGE(Group, NewBudgetRec.Group);
        lBudgetRec.SETRANGE("Sub Group", NewBudgetRec."Sub Group");
      END;

      lNextLineNo := 10000;
      IF lBudgetRec.FINDLAST THEN
        lNextLineNo := lNextLineNo + BudgetRec."Line No.";

      NewBudgetRec."Line No." := lNextLineNo;

      NewBudgetRec."Amount (LCY)" := -1 *  AmountCorrection;
      NewBudgetRec.Quantity := -1 * QuantityCorrection;

      IF NewBudgetRec."Cost Type" = NewBudgetRec."Cost Type"::Labor THEN BEGIN
        NewBudgetRec.Hours := -1 *  HoursCorrection;
        IF NewBudgetRec.Hours <> 0 THEN
          NewBudgetRec."Rate (LCY)" := ROUND((NewBudgetRec."Amount (LCY)" / NewBudgetRec.Hours), 0.00001)
        ELSE
          NewBudgetRec."Rate (LCY)" := NewBudgetRec."Amount (LCY)";
      END ELSE BEGIN
        IF NewBudgetRec.Quantity <> 0 THEN
          NewBudgetRec."Price (LCY)" := ROUND(NewBudgetRec."Amount (LCY)" / NewBudgetRec.Quantity)
        ELSE
          NewBudgetRec."Price (LCY)" := NewBudgetRec."Amount (LCY)";
      END;
    END;

    PROCEDURE FillPurchaseAction@1100525000();
    BEGIN
      //* Zie testen in T11012001, daar als >=Applied dan melding.
      //* Hier alleen vullen als (standaard) inkoopactie van de kostendrager aanwezig is als een project inkoopactie
      //* met de status 'Concept' (zie testen in T11012001, daar als >=Applied dan melding).
      //* Hier nooit een melding/error, gewoon niet doen.
      //* Verder alleen bij het toevoegen van een werkbegrotingsregel.

      IF (BudgetRec."Purchase Action" = '') AND (BudgetRec."Cost Object" <> '') THEN BEGIN
        DimMgtCU.GetDimValueRec(2, BudgetRec."Cost Object", DimValRec, FALSE, '');
        IF DimValRec."Purchase Action" <> '' THEN BEGIN
          IF ProjPurchActRec.GET(BudgetRec."Project No.", DimValRec."Purchase Action") THEN BEGIN
            IF ProjPurchActRec.Status < ProjPurchActRec.Status::Applied THEN
              BudgetRec."Purchase Action" := DimValRec."Purchase Action";
          END;
        END;
      END;
    END;

    PROCEDURE GetProjElement@1210190000(IProjNo@1210190000 : Code[20]);
    BEGIN
      IF (Job."Budget Level for Options" = Job."Budget Level for Options"::"Option-Cost Type") OR
         (Job."Budget Level for Options" = Job."Budget Level for Options"::"Option-Cost Object")
      THEN BEGIN
        ProjElemRec.SETRANGE("Project No.", IProjNo);
        IF ProjElemRec.FIND('-') THEN BEGIN
          ProjElement := ProjElemRec.Element;
          ProjChapter := ProjElemRec.Chapter;
          ProjParagraph := ProjElemRec.Paragraph;
          EXIT;
        END;
      END;
      ProjElement := '';
      ProjChapter := '';
      ProjParagraph := '';
    END;

    PROCEDURE FillCommonCostObjects@1210190001(IProjNo@1210190000 : Code[20]);
    BEGIN
      IF (Job."Budget Level for Options" = Job."Budget Level for Options"::"Option-Cost Type") OR
         (Job."Budget Level for Options" = Job."Budget Level for Options"::"Option-Element-Cost Type")
      THEN BEGIN
        CostObjectLabor := ProjSetupRec."Cost Object Labor in Budget";
        DimMgtCU.GetDimValueRec(2, CostObjectLabor, DimValRec, FALSE, IProjNo);
        CostObjectNameLabor := DimValRec.Name;
        UnitLabor := DimValRec."Unit of Measure";
        TimeUnitLabor := DimValRec."Unit of Time";

        CostObjectMaterial := ProjSetupRec."Cost Object Material in Budget";
        DimMgtCU.GetDimValueRec(2, CostObjectMaterial, DimValRec, FALSE, IProjNo);
        CostObjectNameMaterial := DimValRec.Name;
        UnitMaterial := DimValRec."Unit of Measure";
        TimeUnitMaterial := DimValRec."Unit of Time";

        CostObjectSubcontr := ProjSetupRec."Cost Object Subcontr. Budget";
        DimMgtCU.GetDimValueRec(2, CostObjectSubcontr, DimValRec, FALSE, IProjNo);
        CostObjectNameSubcontr := DimValRec.Name;
        UnitSubcontr := DimValRec."Unit of Measure";
        TimeUnitSubcontr := DimValRec."Unit of Time";

        CostObjectPlant := ProjSetupRec."Cost Object Plant in Budget";
        DimMgtCU.GetDimValueRec(2, CostObjectPlant, DimValRec, FALSE, IProjNo);
        CostObjectNamePlant := DimValRec.Name;
        UnitPlant := DimValRec."Unit of Measure";
        TimeUnitPlant := DimValRec."Unit of Time";

        CostObjectSundry := ProjSetupRec."Cost Object Sundry in Budget";
        DimMgtCU.GetDimValueRec(2, CostObjectSundry, DimValRec, FALSE, IProjNo);
        CostObjectNameSundry := DimValRec.Name;
        UnitSundry := DimValRec."Unit of Measure";
        TimeUnitSundry := DimValRec."Unit of Time";
      END;
    END;

    PROCEDURE GetCommonCostObjectData@1210190012(ICostType@1210190004 : Option;VAR OCostObject@1210190000 : Code[20];VAR OName@1210190001 : Text[100];VAR OUnit@1210190002 : Code[10];VAR OTimeUnit@1210190003 : Code[10]);
    BEGIN
      CASE ICostType OF
        BudgetRec."Cost Type"::Labor:
          BEGIN
            OCostObject := CostObjectLabor;
            OName := CostObjectNameLabor;
            OUnit := UnitLabor;
            OTimeUnit := TimeUnitLabor;
          END;
        BudgetRec."Cost Type"::Material:
          BEGIN
            OCostObject := CostObjectMaterial;
            OName := CostObjectNameMaterial;
            OUnit := UnitMaterial;
            OTimeUnit := TimeUnitMaterial;
          END;
        BudgetRec."Cost Type"::Subcontracting:
          BEGIN
            OCostObject := CostObjectSubcontr;
            OName := CostObjectNameSubcontr;
            OUnit := UnitSubcontr;
            OTimeUnit := TimeUnitSubcontr;
          END;
        BudgetRec."Cost Type"::Plant:
          BEGIN
            OCostObject := CostObjectPlant;
            OName := CostObjectNamePlant;
            OUnit := UnitPlant;
            OTimeUnit := TimeUnitPlant;
          END;
        BudgetRec."Cost Type"::Sundry:
          BEGIN
            OCostObject := CostObjectSundry;
            OName := CostObjectNameSundry;
            OUnit := UnitSundry;
            OTimeUnit := TimeUnitSundry;
          END;
      END;
    END;

    PROCEDURE InsertTmpUpdBudgetLine@1100525001();
    BEGIN
      IF NOT TmpUpdBudgLineRec.GET(BudgetRec.Option, BudgetRec."Line No.") THEN BEGIN
        TmpUpdBudgLineRec."Option Quote No." := BudgetRec.Option;
        TmpUpdBudgLineRec."Line No." := BudgetRec."Line No.";
        TmpUpdBudgLineRec.INSERT;
      END;
    END;

    PROCEDURE RemoveOptionLinesFromBudget@1100485000(VAR vProjectRec@1100485000 : Record 11072003);
    VAR
      lBudgetLineRec@1100485001 : Record 11012001;
    BEGIN
      //* First the option lines in the work budget where deleted before (re)building (by project). Then some dat was lost,
      //* f.i. when the Purchase Action was filled in the budget line.
      //* Now this is done after the (whole) project is rebuild. Then budget lines of options that not present or options (or
      //* status is reset) are deleted;

      IF NOT OptionBatchUpdate THEN  //*  Only when for the whole project
        EXIT;

      {OLD
      WITH vProjectRec DO BEGIN
        lBudgetLineRec.SETRANGE("Project No.","No.");
        lBudgetLineRec.SETFILTER(Option,'<>%1','');
        lBudgetLineRec.SETFILTER("Extension Contract Status",'%1|%2|%3',
          lBudgetLineRec."Extension Contract Status"::"Not Applicable",
          lBudgetLineRec."Extension Contract Status"::Order,
          lBudgetLineRec."Extension Contract Status"::"Invoicing Allowed");
        lBudgetLineRec.DELETEALL;
      END;
      }

      WITH lBudgetLineRec DO BEGIN
        SETRANGE("Project No.",vProjectRec."No.");
        SETRANGE(Adjustment, '');
        SETRANGE("Extension Contract", '');
        SETFILTER(Option,'<>%1','');
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF NOT TmpUpdBudgLineRec.GET(Option, "Line No.") THEN BEGIN
              DELETE;
              Job.UpdateCostControlStatus(2, '', BudgetRec."Cost Object"); //kzwerver, 120116, n, #PER
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CheckDeleteOptionAdjustBudget@1100525002();
    VAR
      lvBudgetLineRec@1100525000 : Record 11012001;
      lvOptionRec@1100525001 : Record 11012502;
    BEGIN
      WITH lvBudgetLineRec DO BEGIN
        SETRANGE("Project No.", Job."No.");
        SETFILTER(Adjustment, '<>%1','');
        SETRANGE("Extension Contract", '');
        SETFILTER(Option, '<>%1', '');         //* Only delete adjusment budgetline on
        SETFILTER("Plot No.", '<>%1', '');     //* plot-option level
        FILTERGROUP(6);
        PlotOption.COPYFILTER("Plot No.", "Plot No.");
        PlotOption.COPYFILTER("House Model", "House Model");
        PlotOption.COPYFILTER("Main Group", "Main Group");
        PlotOption.COPYFILTER(Group, Group);
        PlotOption.COPYFILTER("Sub Group", "Sub Group");
        PlotOption.COPYFILTER(Option, Option);
        FILTERGROUP(0);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            IF (gOnDeletePlotOptionRun OR gOnResetOptionStatusRun) AND
              ("Project No." = gDelProjectNo) AND ("Plot No." = gDelPlotNo) AND ("House Model" = gDelHouseModel) AND
              ("Main Group" = gDelMainGroup) AND (Group = gDelGroup) AND ("Sub Group" = gDelSubGroup) AND (Option = gDelOption)
            THEN
              lvOptionRec.Status := 0   //* Option record is not deleted/updated yet, budget must be deleted
            ELSE BEGIN
              IF NOT lvOptionRec.GET("Project No.", "Plot No.", "House Model", "Main Group", Group, "Sub Group", Option) THEN
                lvOptionRec.Status := 0;
            END;
            IF NOT (lvOptionRec.Status IN [lvOptionRec.Status::Order, lvOptionRec.Status::Invoice]) THEN BEGIN
              DELETE;
              Job.UpdateCostControlStatus(2, '', BudgetRec."Cost Object"); //kzwerver, 120116, n, #PER
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE SetBatchUpdate@1100485002(iOptionBatchUpdate@1100485000 : Boolean);
    BEGIN
      OptionBatchUpdate := iOptionBatchUpdate;
    END;

    BEGIN
    {
      16-12-2004
      De optiebegroting (incl toeslagen) werd eerst overgezet mbv flowfields op de werkbegrotingsregel. Nu moet bij de niveaus op
      kostendrager ook getest worden op de omschrijving (1+2) en de eenheden. Voor materiaal wordt ook nog getest op de diverse
      artikelcodes. Hierdoor kunnen de flowfields niet meer gebruikt worden (key wordt te lang).
      De (hoofd)structuur is nu als volgt:
      1. Optiebegrotingsregels en toeslagregels worden eerst gecomprimeerd in een tijdelijke tabel gezet.
      2. Reeds aanwezige werkbegrotingregels doorlezen. Als in tijdelijke tabel aanwezig dan werkbegrotingsregel bijwerken en record
         verwijderen uit de tijdelijke tabel. Als niet in tijdelijke tabel aanwezig dan werkbegrotingsregel verwijderen.
      3. Regels die nog in de tijdelijke tabel staan toevoegen aan de werkbegroting.
      Als het comprimeerniveau voor het project is ingesteld op 'Gedetailleerd' dan word dit proces uitgevoerd per record uit de
      optietabel (per project/bouwnr./woningmodel/hoofdgroep/groep/subgroep/optie). Anders per optiecode (proj/optie), dus als men
      dan toch filters heeft ingegeven voor bouwnr., woningmodel, hoofdgroep, groep of subgroep dan zullen deze genegeerd worden.
      Uitgangspunt hierbij is dat een bepaalde optiecode steeds overal hetzelfde is dus onafh. van woningmodel en groepen.
      27-07-2005
      Voor het collectief updaten per projec(setup: "Batchgewijs bijwerken werkbegroting uit optiebegroting bij opdracht") worden
      eerst de werkbegrotingsregels afkomstig uit de meerwerkopties verwijderd. Dit kost performance, maar is wel waterdicht ingeval
      van verwijderen of terugzetten van de status van regels. NB: Dit gebeurt ook als instellingen uit is en men doet dit toch.
      20-02-2009
      Zie verhaal 27-07-2005. Als men dit doet en men zet toch filters voor dataitem 'Option' dan worden opties die buiten filters
      vallen niet opnieuw aangmaakt. Dit kan niet de bedoeling zijn, dus als filters op 'Option' dan niet eerst volledige project
      opschonen. Het variabele 'OptionBatchUpdate' moet dan uitgezet worden.
    }
    END.
  }
  RDLDATA
  {
  }
}

