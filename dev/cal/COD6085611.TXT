OBJECT Codeunit 6085611 Continia Config. Mgt. - DC
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW13.70.00.5.00.07,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempDCSetup@1160040005 : TEMPORARY Record 6085573;
      TempConfigFile@1000 : TEMPORARY Record 6085608;
      TempOCRLang@1160040006 : TEMPORARY Record 6085578;
      TempContiniaWebPortal@1160040033 : TEMPORARY Record 6192774;
      TempDocCat@1160040004 : TEMPORARY Record 6085575;
      TempDocCatLang@1160040007 : TEMPORARY Record 6085576;
      TempTemplate@1160040003 : TEMPORARY Record 6085579;
      TempField@1160040009 : TEMPORARY Record 6085580;
      TempFieldCap@1160040010 : TEMPORARY Record 6085581;
      TempFieldTransl@1160040011 : TEMPORARY Record 6085582;
      TempFieldRule@1160040012 : TEMPORARY Record 6085583;
      TempIdentField@1160040013 : TEMPORARY Record 6085759;
      TempSourceExcl@1160040014 : TEMPORARY Record 6085598;
      TempTableFilterField@1160040015 : TEMPORARY Record 6085762;
      TempStdAmtDistribCode@1160040008 : TEMPORARY Record 6085774;
      TempStdAmtDistribLine@1160040039 : TEMPORARY Record 6085775;
      TempStdAmtDistribDim@1160040040 : TEMPORARY Record 6085776;
      TempStdVendAmtDistribCode@1160040041 : TEMPORARY Record 6085777;
      TempOurContToPurchSalespers@1160040035 : TEMPORARY Record 6085778;
      TempAppUserGroup@1160040036 : TEMPORARY Record 6085630;
      TempAppUserGroupPerm@1160040037 : TEMPORARY Record 6085632;
      TempAppUserGroupPmsSelect@1160040038 : TEMPORARY Record 6085633;
      TempDataTranslation@6085576 : Record 6085584;
      COConfigMgt@1160040001 : Codeunit 6086502;
      RecIDMgt@1160040000 : Codeunit 6085604;
      DCMgt@1160040021 : Codeunit 6085603;
      Text001@1160040025 : TextConst 'DEU=DC - Belegnummern;ENU=DC - Document Nos.;NLD=DC - Documentnummers;SVE=DC - Document Nos.';
      Text002@1160040024 : TextConst 'DEU=DC - Vorlagennummern;ENU=DC - Template Nos.;NLD=DC - Sjabloonnummers;SVE=DC - Template Nos.';
      Text003@1160040023 : TextConst 'DEU=D000001;ENU=D000001;NLD=D000001;SVE=D000001';
      Text004@1160040022 : TextConst 'DEU=T000001;ENU=T000001;NLD=T000001;SVE=T000001';
      Text005@1160040002 : TextConst 'DEU=Es existieren keine Genehmigungsvorlagen. Bitte erzeugen Sie sie manuell.;ENU=No Approval Templates exists. Please create them manually.;NLD=Er bestaan geen goedkeuringssjablonen. Maak deze handmatig.;SVE=Inga godkÑnnandemallar existerar. Skapa dessa manuellt.';
      Text006@1160040020 : TextConst 'DEU=DC - Eink. Zuordnung;ENU=DC - Purch. Allocation;NLD=DC - Inkoopallocatie;SVE=DC - Purch. Allocation';
      Text007@1160040019 : TextConst 'DEU=PA000001;ENU=PA000001;NLD=PA000001;SVE=PA000001';
      Text008@1160040016 : TextConst 'DEU=Einkauf VerteilungsschlÅssel;ENU=Purchase Allocation;NLD=Inkoopallocatie;NOR=Innkjõpsallokering;SVE=Inkîpstilldelning';
      Text010@1160040026 : TextConst 'DEU=Konfiguration wird importiert ...\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;ENU=Importing Setup #1######################\Status          @2@@@@@@@@@@@@@@@@@@@@@@;NLD=Importeren instellingen #1######################\Status                  @2@@@@@@@@@@@@@@@@@@@@@@';
      Text011@1160040027 : TextConst 'DEU=Konfiguration wird festgelegt ...\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;ENU=Committing Setup #1######################\Status           @2@@@@@@@@@@@@@@@@@@@@@@;NLD=Wegschrijven instellingen #1######################\Status                    @2@@@@@@@@@@@@@@@@@@@@@@';
      Text012@1160040028 : TextConst 'DEU=Konfiguration wird verarbeitet ...\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;ENU=Processing Setup #1######################\Status           @2@@@@@@@@@@@@@@@@@@@@@@;NLD=Verwerken instellingen #1######################\Status                 @2@@@@@@@@@@@@@@@@@@@@@@';
      Text013@1160040029 : TextConst 'DEU=Konfiguration wird exportiert ...\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;ENU=Exporting Setup #1######################\Status          @2@@@@@@@@@@@@@@@@@@@@@@;NLD=Exporteren instellingen #1######################\Status                  @2@@@@@@@@@@@@@@@@@@@@@@';
      Window@1160040030 : Dialog;
      TotalCount@1160040031 : Integer;
      DialogCount@1160040034 : Integer;
      Direction@1160040018 : 'Import,Export';
      Step@1160040032 : 'From File,From Temp,To Temp,To File';
      Text014@1002 : TextConst 'DEU=%1 von %2;ENU=%1 of %2;NLD=%1 van %2;SVE=%1 av %2';
      InsertValues@6085573 : Boolean;
      RecordType@6085574 : 'G/L Account,Item,Resource,Fixed Asset,Charge (Item),Dimension,Job';
      DimCode@6085575 : Code[20];

    PROCEDURE ShowTree@1160040002(VAR TempConfigLine@1160040002 : TEMPORARY Record 6085612);
    BEGIN
      SetDCFields;

      IF Direction = Direction::Import THEN
        ImportFile(TempConfigLine)
      ELSE
        ExportTemp(TempConfigLine);
    END;

    PROCEDURE PerfomAction@1160040004(VAR TempConfigLine@1160040000 : TEMPORARY Record 6085612);
    BEGIN
      IF Direction = Direction::Import THEN
        ImportIncluded(TempConfigLine)
      ELSE
        ExportIncluded(TempConfigLine);
    END;

    PROCEDURE ImportFile@1160040000(VAR TempConfigLine@1160040000 : TEMPORARY Record 6085612);
    VAR
      RecRef@1160040001 : RecordRef;
      SingleInstanceStorage@6085573 : Codeunit 6085789;
      EntryNo@1160040003 : Integer;
      FileCount@1000 : Integer;
    BEGIN
      COConfigMgt.CreateXmlDoc(TempConfigFile);

      FileCount := GetFileCount;

      OpenDialog(Step::"From File",FileCount);

      ClearTemp;
      SingleInstanceStorage.SetDisableDCSetupFilePathCheck(TRUE);
      RecRef.GETTABLE(TempDCSetup);
      ImportTemp(DATABASE::"Document Capture Setup",TempDCSetup.TABLECAPTION,RecRef);
      SingleInstanceStorage.SetDisableDCSetupFilePathCheck(FALSE);
      RecRef.GETTABLE(TempOCRLang);
      ImportTemp(DATABASE::"OCR Language",TempOCRLang.TABLECAPTION,RecRef);

      RecRef.GETTABLE(TempContiniaWebPortal);
      ImportTemp(DATABASE::"Continia Web Portal",TempContiniaWebPortal.TABLECAPTION,RecRef);

      RecRef.GETTABLE(TempDocCat);
      ImportTemp(DATABASE::"DC Document Category",TempDocCat.TABLECAPTION,RecRef);
      RecRef.GETTABLE(TempDocCatLang);
      ImportTemp(DATABASE::"Document Category Language",TempDocCatLang.TABLECAPTION,RecRef);
      RecRef.GETTABLE(TempIdentField);
      ImportTemp(DATABASE::"Document Category Ident. Field",TempIdentField.TABLECAPTION,RecRef);
      RecRef.GETTABLE(TempSourceExcl);
      ImportTemp(DATABASE::"Document Category Source Excl.",TempSourceExcl.TABLECAPTION,RecRef);
      RecRef.GETTABLE(TempTableFilterField);
      ImportTemp(DATABASE::"Table Filter Field",TempTableFilterField.TABLECAPTION,RecRef);

      RecRef.GETTABLE(TempTemplate);
      ImportTemp(DATABASE::Template,TempTemplate.TABLECAPTION,RecRef);

      RecRef.GETTABLE(TempField);
      ImportTemp(DATABASE::"Template Field",TempField.TABLECAPTION,RecRef);
      RecRef.GETTABLE(TempFieldCap);
      ImportTemp(DATABASE::"Template Field Caption",TempFieldCap.TABLECAPTION,RecRef);
      RecRef.GETTABLE(TempFieldTransl);
      ImportTemp(DATABASE::"Template Field Transl.",TempFieldTransl.TABLECAPTION,RecRef);
      RecRef.GETTABLE(TempFieldRule);
      ImportTemp(DATABASE::"Template Field Rule",TempFieldRule.TABLECAPTION,RecRef);

      RecRef.GETTABLE(TempDataTranslation);
      ImportTemp(DATABASE::"Data Translation",TempDataTranslation.TABLECAPTION,RecRef);

      RecRef.GETTABLE(TempStdAmtDistribCode);
      ImportTemp(DATABASE::"Std. Amount Distribution Code",TempStdAmtDistribCode.TABLECAPTION,RecRef);
      RecRef.GETTABLE(TempStdAmtDistribLine);
      ImportTemp(DATABASE::"Std. Amount Distribution Line",TempStdAmtDistribLine.TABLECAPTION,RecRef);
      RecRef.GETTABLE(TempStdAmtDistribDim);
      ImportTemp(DATABASE::"Std. Amount Distrib. Dimension",TempStdAmtDistribDim.TABLECAPTION,RecRef);
      RecRef.GETTABLE(TempStdVendAmtDistribCode);
      ImportTemp(DATABASE::"Std. Vend. Amt. Distrib. Code",TempStdVendAmtDistribCode.TABLECAPTION,RecRef);

      RecRef.GETTABLE(TempOurContToPurchSalespers);
      ImportTemp(DATABASE::"Our Cont. to Purch./Salespers",TempOurContToPurchSalespers.TABLECAPTION,RecRef);

      RecRef.GETTABLE(TempAppUserGroup);
      ImportTemp(DATABASE::"Approval User Group",TempAppUserGroup.TABLECAPTION,RecRef);
      RecRef.GETTABLE(TempAppUserGroupPerm);
      ImportTemp(DATABASE::"Approval User Group Permission",TempAppUserGroupPerm.TABLECAPTION,RecRef);
      RecRef.GETTABLE(TempAppUserGroupPmsSelect);
      ImportTemp(DATABASE::"App. User Group Pms. Selection",TempAppUserGroupPmsSelect.TABLECAPTION,RecRef);

      EntryNo := CreateTree(TempConfigLine,
        TempDCSetup,
        TempContiniaWebPortal,
        TempDocCat,
        TempTemplate,
        TempStdAmtDistribCode,
        TempOurContToPurchSalespers,
        TempAppUserGroup);

      CreateRemaining(TempConfigLine,TempTemplate,EntryNo);

      CloseDialog;

      COConfigMgt.ClearGlobals;
    END;

    PROCEDURE ExportTemp@1160040018(VAR TempConfigLine@1160040000 : TEMPORARY Record 6085612);
    VAR
      DCSetup@1160040001 : Record 6085573;
      DocCat@1160040002 : Record 6085575;
      Template@1160040003 : Record 6085579;
      ContiniaCompanySetup@6085574 : Record 6192773;
      ContiniaClientCredentials@1160040004 : Record 6192771;
      ContiniaWebPortal@6085573 : Record 6192774;
      StdAmtDistribCode@1160040007 : Record 6085774;
      OurContToPurchSalespers@1160040006 : Record 6085778;
      AppUserGroup@1160040005 : Record 6085630;
    BEGIN
      OpenDialog(Step::"To Temp",1);

      CreateTree(TempConfigLine,
        DCSetup,
        ContiniaWebPortal,
        DocCat,
        Template,
        StdAmtDistribCode,
        OurContToPurchSalespers,
        AppUserGroup);

      CloseDialog;
    END;

    PROCEDURE ImportTemp@1160040020(TableNo@1160040004 : Integer;TableCaption@1000 : Text[1024];VAR RecRef@1160040003 : RecordRef);
    VAR
      XmlLib@1160040005 : Codeunit 6085573;
      Value@1160040000 : Text[250];
      Count@1160040002 : Integer;
      i@1160040001 : Integer;
    BEGIN
      RecRef.DELETEALL;
      Count := COConfigMgt.GetTableCount(TableNo);

      FOR i := 0 TO Count - 1 DO BEGIN
        UpdateDialog(TableCaption);

        CASE TableNo OF
          DATABASE::Template:
            BEGIN
              COConfigMgt.ImportRecord(TableNo,i,RecRef);
              TempTemplate.GET(COConfigMgt.GetAttribValue(TableNo,i,TempTemplate.FIELDNO("No.")));

              Value := COConfigMgt.GetAttribValue(TableNo,i,TempTemplate.FIELDNO("Source Record ID Tree ID"));
              TempTemplate."Source Record ID Tree ID" := GetRecIDTreeID(TempTemplate."Category Code",Value);
              TempTemplate.MODIFY;
            END;

          DATABASE::"Template Field":
            BEGIN
              COConfigMgt.ImportRecord(TableNo,i,RecRef);
              TempField.GET(
                COConfigMgt.GetAttribValue(TableNo,i,TempField.FIELDNO("Template No.")),
                XmlLib.Text2Int(COConfigMgt.GetAttribValue(TableNo,i,TempField.FIELDNO(Type))),
                COConfigMgt.GetAttribValue(TableNo,i,TempField.FIELDNO(Code)));

              Value := COConfigMgt.GetAttribValue(TableNo,i,TempField.FIELDNO("Fixed Value (Rec. ID Tree ID)"));
              TempField."Fixed Value (Rec. ID Tree ID)" :=
                RecIDMgt.SetKeyValueWithGUID(TempField."Source Table No.",TempField."Source Field No.",
                0,TempField."Source Table Filter GUID",Value,FALSE);
              TempField.MODIFY;
            END;

          DATABASE::"Document Category Source Excl.":
            BEGIN
              TempSourceExcl.INIT;
              TempSourceExcl."Document Category Code" :=
                COConfigMgt.GetAttribValue(TableNo,i,TempSourceExcl.FIELDNO("Document Category Code"));
              TempSourceExcl."Source Record ID Tree ID" := GetRecIDTreeID(TempSourceExcl."Document Category Code",
                COConfigMgt.GetAttribValue(TableNo,i,TempSourceExcl.FIELDNO("Source Record ID Tree ID")));
              TempSourceExcl.INSERT;
            END;

          ELSE
            COConfigMgt.ImportRecord(TableNo,i,RecRef);
        END;
      END;
    END;

    PROCEDURE CreateTree@1160040001(VAR TempConfigLine@1160040000 : TEMPORARY Record 6085612;VAR DCSetup@1160040009 : Record 6085573;VAR ContiniaWebPortal@1160040001 : Record 6192774;VAR DocCat@1160040008 : Record 6085575;VAR Template@1160040007 : Record 6085579;VAR StdAmtDistribCode@1160040010 : Record 6085774;VAR OurContToPurchSalespers@1160040004 : Record 6085778;VAR AppUserGroup@1160040003 : Record 6085630) LastEntryNo : Integer;
    VAR
      RecRef@1160040011 : RecordRef;
      MainEntryNo@1160040006 : Integer;
      SourceName@1160040005 : Text[50];
    BEGIN
      LastEntryNo := 1;
      TempConfigLine.RESET;
      TempConfigLine.DELETEALL;

      IF DCSetup.GET THEN BEGIN
        TempConfigLine.INIT;
        TempConfigLine."Entry No." := LastEntryNo;
        TempConfigLine."Table Name" := DCSetup.TABLECAPTION;
        TempConfigLine."Record Name" := DCSetup.TABLECAPTION;
        TempConfigLine.Status := TempConfigLine.Status::"No Children";
        TempConfigLine.Include := TRUE;
        TempConfigLine."Table No" := DATABASE::"Document Capture Setup";
        RecRef.GETTABLE(DCSetup);
        TempConfigLine."Record ID" := RecRef.RECORDID;
        TempConfigLine.INSERT;
      END;

      IF ContiniaWebPortal.FINDSET THEN BEGIN
        LastEntryNo += 1;
        TempConfigLine.INIT;
        TempConfigLine."Entry No." := LastEntryNo;
        TempConfigLine."Table Name" := ContiniaWebPortal.TABLECAPTION;
        TempConfigLine.Status := TempConfigLine.Status::"Has Children";
        TempConfigLine.Include := TRUE;
        TempConfigLine."Table No" := DATABASE::"Continia Web Portal";
        RecRef.GETTABLE(ContiniaWebPortal);
        TempConfigLine."Record ID" := RecRef.RECORDID;
        TempConfigLine.INSERT;

        MainEntryNo := LastEntryNo;

        REPEAT
          LastEntryNo += 1;
          TempConfigLine.INIT;
          TempConfigLine."Entry No." := LastEntryNo;
          TempConfigLine."Table Name" := ContiniaWebPortal.TABLECAPTION;
          TempConfigLine.Indentation := 1;
          TempConfigLine.Include := TRUE;
          TempConfigLine."Source Entry No." := MainEntryNo;
          TempConfigLine.Level := 1;
          TempConfigLine."Record Name" := ContiniaWebPortal.Code;
          TempConfigLine."Table No" := DATABASE::"Continia Web Portal";
          RecRef.GETTABLE(ContiniaWebPortal);
          TempConfigLine."Record ID" := RecRef.RECORDID;
          TempConfigLine.INSERT;
        UNTIL ContiniaWebPortal.NEXT = 0;
      END;

      IF DocCat.FINDSET THEN
        REPEAT
          LastEntryNo += 1;
          TempConfigLine.INIT;
          TempConfigLine."Entry No." := LastEntryNo;
          TempConfigLine."Table Name" := DocCat.TABLECAPTION;
          TempConfigLine."Record Name" := DocCat.Code;
          TempConfigLine.Include := TRUE;
          TempConfigLine."Table No" := DATABASE::"DC Document Category";
          TempConfigLine.Code := DocCat.Code;
          RecRef.GETTABLE(DocCat);
          TempConfigLine."Record ID" := RecRef.RECORDID;

          Template.SETRANGE("Category Code",DocCat.Code);
          IF Template.FINDSET THEN
            TempConfigLine.Status := TempConfigLine.Status::"Has Children"
          ELSE
            TempConfigLine.Status := TempConfigLine.Status::"No Children";

          TempConfigLine.INSERT;

          IF TempConfigLine.Status = TempConfigLine.Status::"Has Children" THEN BEGIN
            MainEntryNo := LastEntryNo;

            REPEAT
              LastEntryNo += 1;
              TempConfigLine.INIT;
              TempConfigLine."Entry No." := LastEntryNo;
              TempConfigLine."Table Name" := Template.TABLECAPTION;
              TempConfigLine.Indentation := 1;
              TempConfigLine.Include := TRUE;
              TempConfigLine."Source Entry No." := MainEntryNo;
              TempConfigLine.Level := 1;
              SourceName :=  RecIDMgt.GetFieldValue(Template."Source Record ID Tree ID",DocCat."Source Field No. (Name)");
              IF SourceName = '' THEN
                SourceName := Template.Description;
              IF SourceName = '' THEN
                SourceName := Template."No.";
              TempConfigLine."Record Name" := COPYSTR(SourceName,1,MAXSTRLEN(TempConfigLine."Record Name"));
              TempConfigLine."Table No" := DATABASE::Template;
              TempConfigLine.Code := Template."No.";
              RecRef.GETTABLE(Template);
              TempConfigLine."Record ID" := RecRef.RECORDID;

              TempConfigLine.INSERT;
            UNTIL Template.NEXT = 0;
          END;
        UNTIL DocCat.NEXT = 0;

      IF StdAmtDistribCode.FINDSET THEN BEGIN
        LastEntryNo += 1;
        TempConfigLine.INIT;
        TempConfigLine."Entry No." := LastEntryNo;
        TempConfigLine."Table Name" := StdAmtDistribCode.TABLECAPTION;
        TempConfigLine.Include := TRUE;
        TempConfigLine.Status := TempConfigLine.Status::"Has Children";
        TempConfigLine.INSERT;

        MainEntryNo := LastEntryNo;

        REPEAT
          LastEntryNo += 1;
          TempConfigLine.INIT;
          TempConfigLine."Entry No." := LastEntryNo;
          TempConfigLine."Table Name" := StdAmtDistribCode.TABLECAPTION;
          TempConfigLine.Indentation := 1;
          TempConfigLine.Include := TRUE;
          TempConfigLine."Source Entry No." := MainEntryNo;
          TempConfigLine.Level := 1;
          IF StdAmtDistribCode.Description <> '' THEN
            TempConfigLine."Record Name" := StdAmtDistribCode.Description
          ELSE
            TempConfigLine."Record Name" := StdAmtDistribCode.Code;
          TempConfigLine."Table No" := DATABASE::"Std. Amount Distribution Code";
          TempConfigLine.Code := StdAmtDistribCode.Code;
          RecRef.GETTABLE(StdAmtDistribCode);
          TempConfigLine."Record ID" := RecRef.RECORDID;
          TempConfigLine.INSERT;
        UNTIL StdAmtDistribCode.NEXT = 0;
      END;

      IF OurContToPurchSalespers.FINDSET THEN BEGIN
        LastEntryNo += 1;
        TempConfigLine.INIT;
        TempConfigLine."Entry No." := LastEntryNo;
        TempConfigLine."Table Name" := OurContToPurchSalespers.TABLECAPTION;
        TempConfigLine.Include := TRUE;
        TempConfigLine.Status := TempConfigLine.Status::"Has Children";
        TempConfigLine.INSERT;

        MainEntryNo := LastEntryNo;

        REPEAT
          LastEntryNo += 1;
          TempConfigLine.INIT;
          TempConfigLine."Entry No." := LastEntryNo;
          TempConfigLine."Table Name" := OurContToPurchSalespers.TABLECAPTION;
          TempConfigLine.Indentation := 1;
          TempConfigLine.Include := TRUE;
          TempConfigLine."Source Entry No." := MainEntryNo;
          TempConfigLine.Level := 1;
          TempConfigLine."Record Name" := COPYSTR(STRSUBSTNO('%1 > %2',OurContToPurchSalespers."Our Contact",
            OurContToPurchSalespers."Salespers./Purch. Code"),1,MAXSTRLEN(TempConfigLine."Record Name"));

          TempConfigLine."Table No" := DATABASE::"Our Cont. to Purch./Salespers";
          RecRef.GETTABLE(OurContToPurchSalespers);
          TempConfigLine."Record ID" := RecRef.RECORDID;
          TempConfigLine.INSERT;
        UNTIL OurContToPurchSalespers.NEXT = 0;
      END;

      IF AppUserGroup.FINDSET THEN BEGIN
        LastEntryNo += 1;
        TempConfigLine.INIT;
        TempConfigLine."Entry No." := LastEntryNo;
        TempConfigLine."Table Name" := AppUserGroup.TABLECAPTION;
        TempConfigLine.Include := TRUE;
        TempConfigLine.Status := TempConfigLine.Status::"Has Children";
        TempConfigLine.INSERT;

        MainEntryNo := LastEntryNo;

        REPEAT
          LastEntryNo += 1;
          TempConfigLine.INIT;
          TempConfigLine."Entry No." := LastEntryNo;
          TempConfigLine."Table Name" := AppUserGroup.TABLECAPTION;
          TempConfigLine.Indentation := 1;
          TempConfigLine.Include := TRUE;
          TempConfigLine."Source Entry No." := MainEntryNo;
          TempConfigLine.Level := 1;
          IF AppUserGroup.Name <> '' THEN
            TempConfigLine."Record Name" := AppUserGroup.Name
          ELSE
            TempConfigLine."Record Name" := AppUserGroup.Code;
          TempConfigLine."Table No" := DATABASE::"Approval User Group";
          TempConfigLine.Code := AppUserGroup.Code;
          RecRef.GETTABLE(AppUserGroup);
          TempConfigLine."Record ID" := RecRef.RECORDID;
          TempConfigLine.INSERT;
        UNTIL AppUserGroup.NEXT = 0;
      END;

      IF Direction = Direction::Import THEN
        ExcludeExistingRecords(TempConfigLine);
    END;

    PROCEDURE CreateRemaining@1160040003(VAR TempConfigLine@1160040003 : TEMPORARY Record 6085612;VAR Template@1160040000 : Record 6085579;EntryNo@1160040001 : Integer);
    VAR
      RecRef@1160040005 : RecordRef;
      SourceName@1160040002 : Text[50];
    BEGIN
      Template.RESET;
      IF Template.FINDSET THEN
        REPEAT
          TempConfigLine.RESET;
          TempConfigLine.SETRANGE("Table No",DATABASE::Template);
          TempConfigLine.SETRANGE(Code,Template."No.");
          IF TempConfigLine.ISEMPTY THEN BEGIN
            EntryNo += 1;
            TempConfigLine.INIT;
            TempConfigLine."Entry No." := EntryNo;
            TempConfigLine."Table Name" := Template.TABLECAPTION;
            TempConfigLine.Include := TRUE;
            SourceName := Template.GetSourceName;
            IF SourceName = '' THEN
              SourceName := Template.Description;
            IF SourceName = '' THEN
              SourceName := Template."No.";
            TempConfigLine."Record Name" := COPYSTR(STRSUBSTNO('%1 > %2',Template."Category Code",SourceName),
              1,MAXSTRLEN(TempConfigLine."Record Name"));
            TempConfigLine."Table No" := DATABASE::Template;
            TempConfigLine.Code := Template."No.";
            RecRef.GETTABLE(Template);
            TempConfigLine."Record ID" := RecRef.RECORDID;
            TempConfigLine.INSERT;
          END;
        UNTIL Template.NEXT = 0;

      IF Direction = Direction::Import THEN
        ExcludeExistingRecords(TempConfigLine);
    END;

    PROCEDURE ImportIncluded@1160040005(VAR TempConfigLine@1160040000 : TEMPORARY Record 6085612);
    VAR
      RecRef@1160040001 : RecordRef;
      ImportingDCSetup@1160040002 : Boolean;
    BEGIN
      TempConfigLine.RESET;
      TempConfigLine.SETRANGE(Include,TRUE);
      IF TempConfigLine.FINDSET THEN BEGIN
        OpenDialog(Step::"From Temp",TempConfigLine.COUNT);

        REPEAT
          UpdateDialog('');

          CASE TempConfigLine."Table No" OF
            DATABASE::"Document Capture Setup":
              BEGIN
                ImportTable(DATABASE::"Document Capture Setup",0,'',0,'',0,'');
                ImportTable(DATABASE::"OCR Language",0,'',0,'',0,'');
                ImportingDCSetup := TRUE;
              END;

            DATABASE::"Continia Web Portal":
              ImportTable(DATABASE::"Continia Web Portal",0,'',0,'',0,'');
            DATABASE::"DC Document Category":
              BEGIN
                TempDocCat.GET(TempConfigLine.Code);
                ImportTable(DATABASE::"DC Document Category",TempDocCat.FIELDNO(Code),TempDocCat.Code,0,'',0,'');

                ImportTable(DATABASE::"Document Category Language",
                  TempDocCatLang.FIELDNO("Document Category Code"),TempDocCat.Code,0,'',0,'');

                ImportTable(DATABASE::"Document Category Ident. Field",TempIdentField.FIELDNO("Document Category Code"),
                  TempDocCat.Code,0,'',0,'');

                ImportTable(DATABASE::"Document Category Source Excl.",TempSourceExcl.FIELDNO("Document Category Code"),
                  TempDocCat.Code,0,'',0,'');

                ImportTable(DATABASE::"Table Filter Field",TempTableFilterField.FIELDNO("Table Filter GUID"),
                  FORMAT(TempDocCat."Document Category GUID"),0,'',0,'');

                DCMgt.IsLogActive2(TempDocCat."Source Table No.",TRUE);
                CreateDefaultDocCat(TempDocCat.Code);
              END;

            DATABASE::Template:
              BEGIN
                TempTemplate.GET(TempConfigLine.Code);
                ImportTable(DATABASE::Template,TempTemplate.FIELDNO("No."),TempTemplate."No.",0,'',0,'');

                TempField.SETRANGE("Template No.",TempTemplate."No.");
                ImportTable(DATABASE::"Template Field",TempField.FIELDNO("Template No."),TempTemplate."No.",0,'',0,'');

                IF TempField.FINDSET THEN
                  REPEAT
                    ImportTable(DATABASE::"Template Field Caption",TempFieldCap.FIELDNO("Template No."),TempTemplate."No.",
                      TempFieldCap.FIELDNO(Code),TempField.Code,TempFieldCap.FIELDNO(Type),FORMAT(TempField.Type));

                    ImportTable(DATABASE::"Template Field Transl.",TempFieldTransl.FIELDNO("Template No."),TempTemplate."No.",
                      TempFieldTransl.FIELDNO(Code),TempField.Code,TempFieldTransl.FIELDNO(Type),FORMAT(TempField.Type));

                    ImportTable(DATABASE::"Template Field Rule",TempFieldRule.FIELDNO("Template No."),TempTemplate."No.",
                      TempFieldRule.FIELDNO(Code),TempField.Code,TempFieldRule.FIELDNO(Type),FORMAT(TempField.Type));

                    ImportTable(DATABASE::"Table Filter Field",TempTableFilterField.FIELDNO("Table Filter GUID"),
                      FORMAT(TempField."Source Table Filter GUID"),0,'',0,'');

                    DCMgt.IsLogActive2(TempField."Source Table No.",TRUE);
                  UNTIL TempField.NEXT = 0;

                ImportTable(DATABASE::"Data Translation",TempDataTranslation.FIELDNO("Template No."),TempTemplate."No.",0,'',0,'');
              END;

            DATABASE::"Std. Amount Distribution Code":
              BEGIN
                TempStdAmtDistribCode.GET(TempConfigLine.Code);
                ImportTable(DATABASE::"Std. Amount Distribution Code",
                  TempStdAmtDistribCode.FIELDNO(Code),TempStdAmtDistribCode.Code,0,'',0,'');

                ImportTable(DATABASE::"Std. Amount Distribution Line",
                  TempStdAmtDistribLine.FIELDNO("Amount Distribution Code"),TempStdAmtDistribCode.Code,0,'',0,'');

                ImportTable(DATABASE::"Std. Amount Distrib. Dimension",
                  TempStdAmtDistribDim.FIELDNO("Amount Distribution Code"),TempStdAmtDistribCode.Code,0,'',0,'');

                ImportTable(DATABASE::"Std. Vend. Amt. Distrib. Code",
                  TempStdVendAmtDistribCode.FIELDNO("Amount Distribution Code"),TempStdAmtDistribCode.Code,0,'',0,'');
              END;

            DATABASE::"Our Cont. to Purch./Salespers":
              BEGIN
                RecRef.GETTABLE(TempOurContToPurchSalespers);
                RecRef.GET(TempConfigLine."Record ID");

                TempOurContToPurchSalespers.SETPOSITION(RecRef.GETPOSITION);
                ImportTable(
                  DATABASE::"Our Cont. to Purch./Salespers",
                  TempOurContToPurchSalespers.FIELDNO(Type),FORMAT(TempOurContToPurchSalespers.Type),
                  TempOurContToPurchSalespers.FIELDNO("Vendor/Customer No."),TempOurContToPurchSalespers."Vendor/Customer No.",
                  TempOurContToPurchSalespers.FIELDNO("Our Contact"),TempOurContToPurchSalespers."Our Contact");
              END;

            DATABASE::"Approval User Group":
              BEGIN
                TempAppUserGroup.GET(TempConfigLine.Code);
                ImportTable(DATABASE::"Approval User Group",TempAppUserGroup.FIELDNO(Code),TempAppUserGroup.Code,0,'',0,'');

                ImportTable(DATABASE::"Approval User Group Permission",
                  TempAppUserGroupPerm.FIELDNO("Approval User Group Code"),TempAppUserGroup.Code,0,'',0,'');

                ImportTable(DATABASE::"App. User Group Pms. Selection",
                  TempAppUserGroupPmsSelect.FIELDNO("Approval User Group Code"),TempAppUserGroup.Code,0,'',0,'');
              END;
          END;
        UNTIL TempConfigLine.NEXT = 0;

        CloseDialog;
      END;

      TempConfigLine.SETRANGE(Include,FALSE);
      TempConfigLine.DELETEALL;
      TempConfigLine.RESET;

      COMMIT;

      IF ImportingDCSetup THEN
        CreateDefaultDCSetup;
    END;

    PROCEDURE ImportTable@1160040013(TableNo@1160040000 : Integer;Field1@1160040005 : Integer;Filter1@1160040004 : Text[150];Field2@1160040003 : Integer;Filter2@1160040002 : Text[150];Field3@1160040009 : Integer;Filter3@1160040008 : Text[150]);
    VAR
      DCSetup@1160040007 : Record 6085573;
      FromRecRef@1160040001 : RecordRef;
      ToRecRef@1160040006 : RecordRef;
      TemplateField@6085577 : Record 6085580;
      FromFieldRef@6085576 : FieldRef;
      ToFieldRef@6085575 : FieldRef;
    BEGIN
      CASE TableNo OF
        DATABASE::"Document Capture Setup":
          BEGIN
            FromRecRef.GETTABLE(TempDCSetup);

            IF DCSetup.GET AND (DCSetup."Document Nos." = '') THEN
              DCSetup.DELETE;
          END;
        DATABASE::"OCR Language":
          FromRecRef.GETTABLE(TempOCRLang);
        DATABASE::"Continia Web Portal":
          FromRecRef.GETTABLE(TempContiniaWebPortal);
        DATABASE::"DC Document Category":
          FromRecRef.GETTABLE(TempDocCat);
        DATABASE::"Document Category Language":
          FromRecRef.GETTABLE(TempDocCatLang);
        DATABASE::Template:
          FromRecRef.GETTABLE(TempTemplate);
        DATABASE::"Template Field":
          FromRecRef.GETTABLE(TempField);
        DATABASE::"Template Field Caption":
          FromRecRef.GETTABLE(TempFieldCap);
        DATABASE::"Template Field Transl.":
          FromRecRef.GETTABLE(TempFieldTransl);
        DATABASE::"Template Field Rule":
          FromRecRef.GETTABLE(TempFieldRule);
        DATABASE::"Document Category Ident. Field":
          FromRecRef.GETTABLE(TempIdentField);
        DATABASE::"Document Category Source Excl.":
          FromRecRef.GETTABLE(TempSourceExcl);
        DATABASE::"Table Filter Field":
          FromRecRef.GETTABLE(TempTableFilterField);
        DATABASE::"Std. Amount Distribution Code":
          FromRecRef.GETTABLE(TempStdAmtDistribCode);
        DATABASE::"Std. Amount Distribution Line":
          FromRecRef.GETTABLE(TempStdAmtDistribLine);
        DATABASE::"Std. Amount Distrib. Dimension":
          FromRecRef.GETTABLE(TempStdAmtDistribDim);
        DATABASE::"Std. Vend. Amt. Distrib. Code":
          FromRecRef.GETTABLE(TempStdVendAmtDistribCode);
        DATABASE::"Data Translation":
          FromRecRef.GETTABLE(TempDataTranslation);

        DATABASE::"Our Cont. to Purch./Salespers":
          FromRecRef.GETTABLE(TempOurContToPurchSalespers);
        DATABASE::"Approval User Group":
          FromRecRef.GETTABLE(TempAppUserGroup);
        DATABASE::"Approval User Group Permission":
          FromRecRef.GETTABLE(TempAppUserGroupPerm);
        DATABASE::"App. User Group Pms. Selection":
          FromRecRef.GETTABLE(TempAppUserGroupPmsSelect);
      END;

      IF Field1 > 0 THEN
        RecIDMgt.FilterRecRef(FromRecRef,Field1,Filter1);

      IF Field2 > 0 THEN
        RecIDMgt.FilterRecRef(FromRecRef,Field2,Filter2);

      IF Field3 > 0 THEN
        RecIDMgt.FilterRecRef(FromRecRef,Field3,Filter3);

      IF FromRecRef.FINDSET THEN BEGIN
        ToRecRef.OPEN(TableNo);

        REPEAT
          ToRecRef.INIT;
          IF CopyRecRef(FromRecRef,ToRecRef) THEN
            IF NOT ToRecRef.INSERT(TRUE) THEN
              ToRecRef.MODIFY(TRUE);

          // To avoid overwrite "Source Table Filter GUID" and to use imported one
          IF TableNo = DATABASE::"Template Field" THEN BEGIN
            FromFieldRef := FromRecRef.FIELD(TemplateField.FIELDNO("Source Table Filter GUID"));
            ToFieldRef := ToRecRef.FIELD(TemplateField.FIELDNO("Source Table Filter GUID"));
            ToFieldRef.VALUE := FromFieldRef.VALUE;
            ToRecRef.MODIFY;
          END;
        UNTIL FromRecRef.NEXT = 0;
      END;
    END;

    PROCEDURE ExportIncluded@1160040006(VAR TempConfigLine@1160040002 : TEMPORARY Record 6085612);
    VAR
      DocCat@1160040000 : Record 6085575;
      Template@1160040008 : Record 6085579;
      Field@1160040009 : Record 6085580;
      StdAmtDistribCode@1160040004 : Record 6085774;
      OurContToPurchSalespers@1160040003 : Record 6085778;
      AppUserGroup@1160040001 : Record 6085630;
      XmlNode@1000 : Codeunit 6192801;
      RecRef@1160040005 : RecordRef;
    BEGIN
      TempConfigLine.RESET;
      TempConfigLine.SETRANGE(Include,TRUE);
      IF TempConfigLine.FINDSET THEN BEGIN
        COConfigMgt.CreateXmlNode(XmlNode);
        OpenDialog(Step::"To File",TempConfigLine.COUNT);

        REPEAT
          UpdateDialog('');

          CASE TempConfigLine."Table No" OF
            DATABASE::"Document Capture Setup":
              BEGIN
                ExportTable(XmlNode,DATABASE::"Document Capture Setup",0,'',0,'',0,'');
                ExportTable(XmlNode,DATABASE::"OCR Language",0,'',0,'',0,'');
              END;

            DATABASE::"Continia Web Portal":
              ExportTable(XmlNode,DATABASE::"Continia Web Portal",0,'',0,'',0,'');

            DATABASE::"DC Document Category":
              BEGIN
                DocCat.GET(TempConfigLine.Code);
                ExportTable(XmlNode,DATABASE::"DC Document Category",TempDocCat.FIELDNO(Code),DocCat.Code,0,'',0,'');
                ExportTable(XmlNode,DATABASE::"Document Category Language",
                  TempDocCatLang.FIELDNO("Document Category Code"),DocCat.Code,0,'',0,'');
                ExportTable(XmlNode,DATABASE::"Document Category Ident. Field",
                  TempIdentField.FIELDNO("Document Category Code"),DocCat.Code,0,'',0,'');
                ExportTable(XmlNode,DATABASE::"Document Category Source Excl.",
                  TempSourceExcl.FIELDNO("Document Category Code"),DocCat.Code,0,'',0,'');
                ExportTable(XmlNode,DATABASE::"Table Filter Field",
                  TempTableFilterField.FIELDNO("Table Filter GUID"),FORMAT(DocCat."Document Category GUID"),0,'',0,'');
              END;

            DATABASE::Template:
              BEGIN
                Template.GET(TempConfigLine.Code);
                ExportTable(XmlNode,DATABASE::Template,TempTemplate.FIELDNO("No."),Template."No.",0,'',0,'');

                Field.SETRANGE("Template No.",Template."No.");
                ExportTable(XmlNode,DATABASE::"Template Field",TempField.FIELDNO("Template No."),Template."No.",0,'',0,'');
                IF Field.FINDSET THEN
                  REPEAT
                    ExportTable(XmlNode,DATABASE::"Template Field Caption",TempFieldCap.FIELDNO("Template No."),Template."No.",
                      TempFieldCap.FIELDNO(Code),Field.Code,TempFieldCap.FIELDNO(Type),FORMAT(Field.Type));
                    ExportTable(XmlNode,DATABASE::"Template Field Transl.",TempFieldTransl.FIELDNO("Template No."),Template."No.",
                      TempFieldTransl.FIELDNO(Code),Field.Code,TempFieldTransl.FIELDNO(Type),FORMAT(Field.Type));
                    ExportTable(XmlNode,DATABASE::"Template Field Rule",TempFieldRule.FIELDNO("Template No."),Template."No.",
                      TempFieldRule.FIELDNO(Code),Field.Code,TempFieldRule.FIELDNO(Type),FORMAT(Field.Type));
                    ExportTable(XmlNode,DATABASE::"Table Filter Field",TempTableFilterField.FIELDNO("Table Filter GUID"),
                      FORMAT(Field."Source Table Filter GUID"),0,'',0,'');
                  UNTIL Field.NEXT = 0;

                ExportTable(XmlNode,DATABASE::"Data Translation",TempDataTranslation.FIELDNO("Template No."),Template."No.",0,'',0,'');
              END;

            DATABASE::"Std. Amount Distribution Code":
              BEGIN
                StdAmtDistribCode.GET(TempConfigLine.Code);
                ExportTable(XmlNode,DATABASE::"Std. Amount Distribution Code",
                  TempStdAmtDistribCode.FIELDNO(Code),StdAmtDistribCode.Code,0,'',0,'');

                ExportTable(XmlNode,DATABASE::"Std. Amount Distribution Line",
                  TempStdAmtDistribLine.FIELDNO("Amount Distribution Code"),StdAmtDistribCode.Code,0,'',0,'');

                ExportTable(XmlNode,DATABASE::"Std. Amount Distrib. Dimension",
                  TempStdAmtDistribDim.FIELDNO("Amount Distribution Code"),StdAmtDistribCode.Code,0,'',0,'');

                ExportTable(XmlNode,DATABASE::"Std. Vend. Amt. Distrib. Code",
                  TempStdVendAmtDistribCode.FIELDNO("Amount Distribution Code"),StdAmtDistribCode.Code,0,'',0,'');
              END;

            DATABASE::"Our Cont. to Purch./Salespers":
              BEGIN
                RecRef.GET(TempConfigLine."Record ID");
                OurContToPurchSalespers.SETPOSITION(RecRef.GETPOSITION);
                ExportTable(XmlNode,DATABASE::"Our Cont. to Purch./Salespers",
                  TempOurContToPurchSalespers.FIELDNO(Type),FORMAT(OurContToPurchSalespers.Type),
                  TempOurContToPurchSalespers.FIELDNO("Vendor/Customer No."),OurContToPurchSalespers."Vendor/Customer No.",
                  TempOurContToPurchSalespers.FIELDNO("Our Contact"),OurContToPurchSalespers."Our Contact");
              END;

            DATABASE::"Approval User Group":
              BEGIN
                AppUserGroup.GET(TempConfigLine.Code);
                ExportTable(XmlNode,DATABASE::"Approval User Group",
                  TempAppUserGroup.FIELDNO(Code),AppUserGroup.Code,0,'',0,'');

                ExportTable(XmlNode,DATABASE::"Approval User Group Permission",
                  TempAppUserGroupPerm.FIELDNO("Approval User Group Code"),AppUserGroup.Code,0,'',0,'');

                ExportTable(XmlNode,DATABASE::"App. User Group Pms. Selection",
                  TempAppUserGroupPmsSelect.FIELDNO("Approval User Group Code"),AppUserGroup.Code,0,'',0,'');
              END;

          END;
        UNTIL TempConfigLine.NEXT = 0;

        CloseDialog;
        COConfigMgt.SaveXmlDoc(XmlNode,TempConfigFile.GetFullFileName);
        COConfigMgt.GetXmlFile(TempConfigFile);
      END;

      TempConfigLine.SETRANGE(Include,FALSE);
      TempConfigLine.DELETEALL;
      TempConfigLine.RESET;
    END;

    PROCEDURE ExportTable@1160040010(VAR XmlNode@1000 : Codeunit 6192801;TableNo@1160040000 : Integer;Field1@1160040002 : Integer;Filter1@1160040003 : Text[150];Field2@1160040006 : Integer;Filter2@1160040005 : Text[150];Field3@1160040012 : Integer;Filter3@1160040011 : Text[150]);
    VAR
      DocCat@1160040010 : Record 6085575;
      Template@1160040007 : Record 6085579;
      Field@1160040008 : Record 6085580;
      SourceExcl@1160040009 : Record 6085598;
      RecRef@1160040001 : RecordRef;
      FieldRef@1160040004 : FieldRef;
    BEGIN
      RecRef.OPEN(TableNo);

      IF Field1 > 0 THEN
        RecIDMgt.FilterRecRef(RecRef,Field1,Filter1);

      IF Field2 > 0 THEN
        RecIDMgt.FilterRecRef(RecRef,Field2,Filter2);

      IF Field3 > 0 THEN
        RecIDMgt.FilterRecRef(RecRef,Field3,Filter3);

      IF RecRef.FINDSET THEN
        REPEAT
          CASE TableNo OF
            DATABASE::Template:
              BEGIN
                Template.SETVIEW(RecRef.GETVIEW);
                IF Template.FINDFIRST THEN
                  IF DocCat.GET(Template."Category Code") THEN
                    COConfigMgt.AddReplaceField(TableNo,Template.FIELDNO("Source Record ID Tree ID"),
                      RecIDMgt.GetKeyValue(Template."Source Record ID Tree ID",DocCat."Source Field No."));
              END;

            DATABASE::"Template Field":
              BEGIN
                Field.SETPOSITION(RecRef.GETPOSITION);
                IF Field.GET(Field."Template No.",Field.Type,Field.Code) THEN
                  COConfigMgt.AddReplaceField(TableNo,Field.FIELDNO("Fixed Value (Rec. ID Tree ID)"),
                    RecIDMgt.GetKeyValue(Field."Fixed Value (Rec. ID Tree ID)",Field."Source Field No."));
              END;

            DATABASE::"Document Category Source Excl.":
              BEGIN
                SourceExcl.SETPOSITION(RecRef.GETPOSITION);
                IF SourceExcl.GET(SourceExcl."Document Category Code",SourceExcl."Source Record ID Tree ID") THEN
                  IF DocCat.GET(SourceExcl."Document Category Code") THEN
                    COConfigMgt.AddReplaceField(TableNo,SourceExcl.FIELDNO("Source Record ID Tree ID"),
                      RecIDMgt.GetKeyValue(SourceExcl."Source Record ID Tree ID",DocCat."Source Field No."));
              END;
          END;

          COConfigMgt.ExportRecord(RecRef.NUMBER,RecRef,XmlNode);
        UNTIL RecRef.NEXT = 0;
    END;

    PROCEDURE CopyRecRef@1160040008(VAR FromRecRef@1160040000 : RecordRef;VAR ToRecRef@1160040001 : RecordRef) : Boolean;
    VAR
      Field@1160040002 : Record 2000000041;
      FromFieldRef@1160040003 : FieldRef;
      ToFieldRef@1160040004 : FieldRef;
      TypeFieldRef@6085575 : FieldRef;
      DimCodeFieldRef@6085574 : FieldRef;
      CodeNoFieldRef@6085584 : FieldRef;
      AppUserGroupPmsSelection@6085583 : Record 6085633;
      GLAccount@6085582 : Record 15;
      Item@6085581 : Record 27;
      Resource@6085580 : Record 156;
      FixedAsset@6085579 : Record 5600;
      ItemCharge@6085578 : Record 5800;
      DimensionValue@6085577 : Record 349;
      Job@6085576 : Record 11072003;
    BEGIN
      IF ToRecRef.NUMBER = DATABASE::"App. User Group Pms. Selection" THEN BEGIN
        TypeFieldRef := FromRecRef.FIELD(AppUserGroupPmsSelection.FIELDNO(Type));
        DimCodeFieldRef := FromRecRef.FIELD(AppUserGroupPmsSelection.FIELDNO("Dimension Code"));
        CodeNoFieldRef := FromRecRef.FIELD(AppUserGroupPmsSelection.FIELDNO("Code / No."));

        CASE FORMAT(TypeFieldRef.VALUE) OF
          'G/L Account': InsertValues := GLAccount.GET(CodeNoFieldRef.VALUE);
          'Item': InsertValues := Item.GET(CodeNoFieldRef.VALUE);
          'Resource': InsertValues := Resource.GET(CodeNoFieldRef.VALUE);
          'Fixed Asset': InsertValues := FixedAsset.GET(CodeNoFieldRef.VALUE);
          'Charge (Item)': InsertValues := ItemCharge.GET(CodeNoFieldRef.VALUE);
          'Dimension': InsertValues := DimensionValue.GET(DimCodeFieldRef.VALUE,CodeNoFieldRef.VALUE);
          'Job': InsertValues := Job.GET(CodeNoFieldRef.VALUE);
        END;
      END ELSE
        InsertValues := TRUE;

      IF InsertValues THEN BEGIN
        Field.RESET;
        Field.SETRANGE(TableNo,FromRecRef.NUMBER);
        Field.SETRANGE(Enabled,TRUE);
        Field.SETRANGE(Class,Field.Class::Normal);
        Field.SETFILTER(Type,'<>%1',Field.Type::BLOB);
        IF Field.FINDSET THEN
          REPEAT
            FromFieldRef := FromRecRef.FIELD(Field."No.");
            ToFieldRef := ToRecRef.FIELD(Field."No.");
            ToFieldRef.VALUE := FromFieldRef.VALUE;
          UNTIL Field.NEXT = 0;

        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE SetDCFields@1160040007();
    BEGIN
      COConfigMgt.AddExcludeField(DATABASE::"Document Capture Setup",TempDCSetup.FIELDNO("Data Version"));
      COConfigMgt.AddExcludeField(DATABASE::"DC Document Category",TempDocCat.FIELDNO("E-Mail Connection Endpoint"));
      COConfigMgt.AddExcludeField(DATABASE::"Template Field",TempField.FIELDNO("Lookup Table"));
      COConfigMgt.AddExcludeField(DATABASE::"Template Field",TempField.FIELDNO("Lookup Rel. Code"));

      IF Direction = Direction::Export THEN
        EXIT;

      COConfigMgt.AddValidateField(DATABASE::"Document Capture Setup",TempDCSetup.FIELDNO("Scanned File Path for OCR"));
      COConfigMgt.AddValidateField(DATABASE::"Document Capture Setup",TempDCSetup.FIELDNO("File Path for OCR-proc. files"));
      COConfigMgt.AddValidateField(DATABASE::"Document Capture Setup",TempDCSetup.FIELDNO("PDF File Path for OCR"));
      COConfigMgt.AddValidateField(DATABASE::"Document Capture Setup",TempDCSetup.FIELDNO("Archive File Path"));
      COConfigMgt.AddValidateField(DATABASE::"Document Capture Setup",TempDCSetup.FIELDNO("Miscellaneous File Path"));
      COConfigMgt.AddValidateField(DATABASE::"Document Capture Setup",TempDCSetup.FIELDNO("Remote OCR Config. Path"));
      COConfigMgt.AddExcludeField(DATABASE::"Document Category Source Excl.",TempSourceExcl.FIELDNO("Source Record ID Tree ID"));
      COConfigMgt.AddExcludeField(DATABASE::Template,TempTemplate.FIELDNO("Source Record ID Tree ID"));
      COConfigMgt.AddExcludeField(DATABASE::"Template Field",TempField.FIELDNO("Fixed Value (Rec. ID Tree ID)"));
    END;

    PROCEDURE SetParam@1160040011(NewDirection@1160040002 : 'Import,Export';VAR TempFile@1000 : TEMPORARY Record 6085608);
    BEGIN
      Direction := NewDirection;
      TempConfigFile := TempFile;
    END;

    PROCEDURE GetRecIDTreeID@1160040021(DocCatCode@1160040000 : Code[20];Value@1160040002 : Text[250]) : Integer;
    VAR
      DocCat@1160040001 : Record 6085575;
    BEGIN
      IF TempDocCat.GET(DocCatCode) THEN BEGIN
        EXIT(RecIDMgt.SetKeyValueWithGUID(TempDocCat."Source Table No.",TempDocCat."Source Field No.",
          TempDocCat."Source Search Field No.",TempDocCat."Document Category GUID",Value,FALSE))
      END ELSE IF DocCat.GET(DocCatCode) THEN BEGIN
        EXIT(RecIDMgt.SetKeyValueWithGUID(DocCat."Source Table No.",DocCat."Source Field No.",
          DocCat."Source Search Field No.",DocCat."Document Category GUID",Value,FALSE));
      END;
    END;

    PROCEDURE ClearTemp@1160040012();
    BEGIN
      TempDCSetup.DELETEALL;
      TempOCRLang.DELETEALL;
      TempDocCat.DELETEALL;
      TempDocCatLang.DELETEALL;
      TempTemplate.DELETEALL;
      TempField.DELETEALL;
      TempFieldCap.DELETEALL;
      TempFieldTransl.DELETEALL;
      TempFieldRule.DELETEALL;
      TempIdentField.DELETEALL;
      TempSourceExcl.DELETEALL;
      TempTableFilterField.DELETEALL;
      TempStdAmtDistribCode.DELETEALL;
      TempStdAmtDistribLine.DELETEALL;
      TempStdAmtDistribDim.DELETEALL;
      TempStdVendAmtDistribCode.DELETEALL;
      TempDataTranslation.DELETEALL;
      TempOurContToPurchSalespers.DELETEALL;
      TempAppUserGroup.DELETEALL;
      TempAppUserGroupPerm.DELETEALL;
      TempAppUserGroupPmsSelect.DELETEALL;
    END;

    PROCEDURE CreateDefaultDCSetup@1160040014();
    VAR
      DCSetup@1160040004 : Record 6085573;
      NoSeries@1160040003 : Record 308;
      NoSeriesLine@1160040002 : Record 309;
      WebUser@1160040001 : Record 6086001;
      SourceCode@1160040000 : Record 230;
      AllObj@1160040005 : Record 2000000038;
      UpgradeMgt@1000 : Codeunit 6085606;
    BEGIN
      DCSetup.GET;
      DCSetup."Data Version" := UpgradeMgt.GetCurrentVersion;
      DCSetup.MODIFY;

      IF NOT NoSeries.GET(DCSetup."Document Nos.") THEN BEGIN
        NoSeries.Code := DCSetup."Document Nos.";
        NoSeries.Description := Text001;
        NoSeries."Default Nos." := TRUE;
        NoSeries.INSERT;

        NoSeriesLine."Series Code" := NoSeries.Code;
        NoSeriesLine."Line No." := 10000;
        NoSeriesLine."Starting No." := Text003;
        NoSeriesLine."Increment-by No." := 1;
        NoSeriesLine.INSERT(TRUE);
      END;

      IF NOT NoSeries.GET(DCSetup."Template Nos.") THEN BEGIN
        NoSeries.INIT;
        NoSeries.Code := DCSetup."Template Nos.";
        NoSeries.Description := Text002;
        NoSeries."Default Nos." := TRUE;
        NoSeries.INSERT;

        NoSeriesLine."Series Code" := NoSeries.Code;
        NoSeriesLine."Line No." := 10000;
        NoSeriesLine."Starting No." := Text004;
        NoSeriesLine."Increment-by No." := 1;
        NoSeriesLine.INSERT(TRUE);
      END;

      IF NOT NoSeries.GET(DCSetup."Purch. Allocation Nos.") THEN BEGIN
        NoSeries.INIT;
        NoSeries.Code := DCSetup."Purch. Allocation Nos.";
        NoSeries.Description := Text006;
        NoSeries."Default Nos." := TRUE;
        NoSeries.INSERT;

        NoSeriesLine."Series Code" := NoSeries.Code;
        NoSeriesLine."Line No." := 10000;
        NoSeriesLine."Starting No." := Text007;
        NoSeriesLine."Increment-by No." := 1;
        NoSeriesLine.INSERT(TRUE);
      END;

      IF NOT SourceCode.GET(DCSetup."Purch. Alloc. Source Code") THEN BEGIN
        SourceCode.Code := DCSetup."Purch. Alloc. Source Code";
        SourceCode.Description := Text008;
        SourceCode.INSERT;
      END;

      CODEUNIT.RUN(CODEUNIT::"Local Initialization");
      CODEUNIT.RUN(CODEUNIT::"Create Document Capture Roles");

      IF AllObj.GET(AllObj."Object Type"::Codeunit,6085787) THEN
        CODEUNIT.RUN(6085787); // DC Workflow Management
    END;

    PROCEDURE CreateDefaultDocCat@1160040015(DocCatCode@1160040000 : Code[20]);
    VAR
      DocCat@1160040003 : Record 6085575;
      EmptyGuid@1160040001 : GUID;
    BEGIN
      DocCat.GET(DocCatCode);
      IF DocCat."Document Category GUID" = EmptyGuid THEN
        DocCat."Document Category GUID" := CREATEGUID;
    END;

    PROCEDURE OpenDialog@1160040016(NewStep@1160040000 : 'From File,From Temp,To Temp,To File';NewTotalCount@1160040001 : Integer);
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;

      TotalCount := NewTotalCount;
      DialogCount := 0;

      CASE NewStep OF
        Step::"From File":
          Window.OPEN(Text010);
        Step::"From Temp":
          Window.OPEN(Text011);
        Step::"To Temp":
          Window.OPEN(Text012);
        Step::"To File":
          Window.OPEN(Text013);
      END;
    END;

    PROCEDURE CloseDialog@1160040017();
    BEGIN
      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE UpdateDialog@1160040019(DialogText@1000 : Text[1024]);
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;

      DialogCount += 1;

      IF (DialogText <> '') AND (TotalCount > 300) AND (DialogCount MOD 300 <> 1) THEN
        EXIT;

      IF DialogText = '' THEN
        Window.UPDATE(1,STRSUBSTNO(Text014,DialogCount,TotalCount))
      ELSE
        Window.UPDATE(1,DialogText);

      Window.UPDATE(2,ROUND(DialogCount / TotalCount * 10000,1,'>'));
    END;

    LOCAL PROCEDURE ExcludeExistingRecords@38(VAR TempConfigLine@1000 : TEMPORARY Record 6085612);
    VAR
      TempConfigLine2@1002 : TEMPORARY Record 6085612;
      RecRef@1001 : RecordRef;
      SubLevelCnt@1160040000 : Integer;
    BEGIN
      TempConfigLine.RESET;
      TempConfigLine.SETFILTER("Table No",'<>%1',0);
      IF TempConfigLine.FINDSET(TRUE,FALSE) THEN
        REPEAT
          RecRef.OPEN(TempConfigLine."Table No");
          IF RecRef.GET(TempConfigLine."Record ID") THEN BEGIN
            TempConfigLine.Include := FALSE;
            TempConfigLine.MODIFY;
          END;
          RecRef.CLOSE;
        UNTIL TempConfigLine.NEXT = 0;

      TempConfigLine.RESET;
      IF TempConfigLine.FINDSET THEN
        REPEAT
          TempConfigLine2 := TempConfigLine;
          TempConfigLine2.INSERT;
        UNTIL TempConfigLine.NEXT = 0;

      TempConfigLine.RESET;
      TempConfigLine.SETRANGE(Level,0);
      IF TempConfigLine.FINDSET(TRUE,FALSE) THEN
        REPEAT
          TempConfigLine2.RESET;
          TempConfigLine2.SETRANGE("Source Entry No.",TempConfigLine."Entry No.");
          SubLevelCnt := TempConfigLine2.COUNT;
          TempConfigLine2.SETRANGE(Include,TRUE);
          IF SubLevelCnt > 0 THEN
            IF TempConfigLine2.ISEMPTY THEN
              TempConfigLine.Include := FALSE
            ELSE
              TempConfigLine.Include := TRUE;
          TempConfigLine.MODIFY;
        UNTIL TempConfigLine.NEXT = 0;

      TempConfigLine2.RESET;
      TempConfigLine2.DELETEALL;
    END;

    PROCEDURE GetXmlFile@4(VAR TempXmlFile@1000 : TEMPORARY Record 6085608);
    BEGIN
      TempXmlFile := TempConfigFile;
    END;

    LOCAL PROCEDURE GetFileCount@1() FileCount : Integer;
    BEGIN
      FileCount += GetFileTableCount(DATABASE::"Document Capture Setup");
      FileCount += GetFileTableCount(DATABASE::"OCR Language");

      FileCount += GetFileTableCount(DATABASE::"Continia Web Portal");

      FileCount += GetFileTableCount(DATABASE::"DC Document Category");
      FileCount += GetFileTableCount(DATABASE::"Document Category Language");
      FileCount += GetFileTableCount(DATABASE::"Document Category Ident. Field");
      FileCount += GetFileTableCount(DATABASE::"Document Category Source Excl.");
      FileCount += GetFileTableCount(DATABASE::"Table Filter Field");

      FileCount += GetFileTableCount(DATABASE::Template);

      FileCount += GetFileTableCount(DATABASE::"Template Field");
      FileCount += GetFileTableCount(DATABASE::"Template Field Caption");
      FileCount += GetFileTableCount(DATABASE::"Template Field Transl.");
      FileCount += GetFileTableCount(DATABASE::"Template Field Rule");

      FileCount += GetFileTableCount(DATABASE::"Std. Amount Distribution Code");
      FileCount += GetFileTableCount(DATABASE::"Std. Amount Distribution Line");
      FileCount += GetFileTableCount(DATABASE::"Std. Amount Distrib. Dimension");
      FileCount += GetFileTableCount(DATABASE::"Std. Vend. Amt. Distrib. Code");

      FileCount += GetFileTableCount(DATABASE::"Data Translation");
      FileCount += GetFileTableCount(DATABASE::"Our Cont. to Purch./Salespers");

      FileCount += GetFileTableCount(DATABASE::"Approval User Group");
      FileCount += GetFileTableCount(DATABASE::"Approval User Group Permission");
      FileCount += GetFileTableCount(DATABASE::"App. User Group Pms. Selection");
    END;

    LOCAL PROCEDURE GetFileTableCount@2(TableNo@1000 : Integer) : Integer;
    BEGIN
      EXIT(COConfigMgt.GetTableCount(TableNo));
    END;

    BEGIN
    {
      4PS, Objects renumbered
    }
    END.
  }
}

