OBJECT Report 11020247 Update Job Item Cost
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00 (1095);
  }
  PROPERTIES
  {
    Permissions=TableData 11072005=rm,
                TableData 5802=rm;
    CaptionML=[DEU=Projektartikelpreise aktualisieren;
               ENU=Update Job Item Cost;
               NLD=Artikelkosten project bijwerken;
               NOR=Oppdater prosjektartikkelkost;
               SVE=Uppdatera projektartikelkostnad];
    ApplicationArea=#Jobs;
    ProcessingOnly=Yes;
    UsageCategory=Tasks;
  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.)
                                 WHERE(Status=FILTER(<>Completed));
               OnPreDataItem=BEGIN
                               NoOfJobLedgEntry := 0;
                               LOCKTABLE;
                             END;

               OnPostDataItem=BEGIN
                                IF NOT HideResult THEN BEGIN
                                  IF NoOfJobLedgEntry <> 0 THEN
                                    MESSAGE(STRSUBSTNO(Text001,NoOfJobLedgEntry))
                                  ELSE
                                    MESSAGE(Text003);
                                END;
                              END;

               ReqFilterFields=No. }

    { 5612;1   ;DataItem;                    ;
               DataItemTable=Table11072005;
               DataItemTableView=SORTING(Type,Entry Type,Country/Region Code,Source Code,Posting Date)
                                 WHERE(Type=FILTER(=Item),
                                       Entry Type=FILTER(=Usage));
               OnPreDataItem=BEGIN
                               LOCKTABLE;
                             END;

               ReqFilterFields=Posting Date;
               DataItemLink=Job No.=FIELD(No.) }

    { 7209;2   ;DataItem;                    ;
               DataItemTable=Table32;
               DataItemTableView=SORTING(Entry No.);
               OnPreDataItem=BEGIN
                               LOCKTABLE;
                             END;

               OnAfterGetRecord=VAR
                                  ValueEntry@1004 : Record 5802;
                                  ValueEntry2@1003 : Record 5802;
                                  Item@1000 : Record 27;
                                  JobLedgerEntryCostValue@1001 : Decimal;
                                  JobLedgerEntryCostValueACY@1002 : Decimal;
                                BEGIN
                                  ValueEntry.SETRANGE("Job No.","Job Ledger Entry"."Job No.");
                                  ValueEntry.SETRANGE("Job Task No.","Job Ledger Entry"."Job Task No.");
                                  ValueEntry.SETRANGE("Job Ledger Entry No.","Job Ledger Entry"."Entry No.");
                                  ValueEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
                                  ValueEntry.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::"Negative Adjmt.");
                                  ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Purchase Invoice");

                                  IF ValueEntry.ISEMPTY THEN BEGIN
                                    Item.GET("Item No.");
                                    IF Item.Type = Item.Type::Inventory THEN BEGIN
                                      CALCFIELDS("Cost Amount (Expected)","Cost Amount (Expected) (ACY)","Cost Amount (Actual)","Cost Amount (Actual) (ACY)");
                                      JobLedgerEntryCostValue := "Cost Amount (Expected)" + "Cost Amount (Actual)";
                                      JobLedgerEntryCostValueACY := "Cost Amount (Expected) (ACY)" + "Cost Amount (Actual) (ACY)";
                                    END ELSE BEGIN
                                      CALCFIELDS("Cost Amount (Non-Invtbl.)","Cost Amount (Non-Invtbl.)(ACY)");
                                      JobLedgerEntryCostValue := "Cost Amount (Non-Invtbl.)";
                                      JobLedgerEntryCostValueACY := "Cost Amount (Non-Invtbl.)(ACY)";
                                    END;
                                  END ELSE BEGIN
                                    ValueEntry.SETRANGE(Adjustment,FALSE);
                                    IF ValueEntry.FINDFIRST THEN BEGIN
                                      AddJobCostValue(JobLedgerEntryCostValue,JobLedgerEntryCostValueACY,ValueEntry,ValueEntry.Inventoriable);

                                      ValueEntry2.SETRANGE("Item Ledger Entry No.","Entry No.");
                                      ValueEntry2.SETRANGE("Document No.",ValueEntry."Document No.");
                                      ValueEntry2.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::"Negative Adjmt.");
                                      ValueEntry2.SETRANGE("Document Type",ValueEntry."Document Type"::"Purchase Invoice");
                                      ValueEntry2.SETRANGE(Adjustment,TRUE);

                                      IF ValueEntry.Inventoriable THEN
                                        ValueEntry2.CALCSUMS("Cost Amount (Actual)","Cost Amount (Actual) (ACY)")
                                      ELSE
                                        ValueEntry2.CALCSUMS("Cost Amount (Non-Invtbl.)","Cost Amount (Non-Invtbl.)(ACY)");

                                      AddJobCostValue(JobLedgerEntryCostValue,JobLedgerEntryCostValueACY,ValueEntry2,ValueEntry.Inventoriable);

                                      ValueEntry2.SETRANGE("Job Ledger Entry No.",0);
                                      ValueEntry2.MODIFYALL("Job No.",ValueEntry."Job No.");
                                      ValueEntry2.MODIFYALL("Job Task No.",ValueEntry."Job Task No.");
                                      ValueEntry2.MODIFYALL("Job Ledger Entry No.",ValueEntry."Job Ledger Entry No.");
                                    END;
                                  END;
                                  PostTotalCostAdjustment("Job Ledger Entry",JobLedgerEntryCostValue,JobLedgerEntryCostValueACY);
                                END;

               DataItemLink=Entry No.=FIELD(Ledger Entry No.) }

    { 9714;3   ;DataItem;                    ;
               DataItemTable=Table11020401;
               DataItemTableView=SORTING(Job No.,Job Task No.,Line No.);
               OnPreDataItem=BEGIN
                               IF NoOfJobLedgEntry = 0 THEN
                                 CurrReport.BREAK;
                               LOCKTABLE;
                             END;

               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Qty. Transferred to Invoice");
                                  IF ("Qty. Transferred to Invoice" <> 0) OR NOT "System-Created Entry" OR ("Ledger Entry Type" <> "Ledger Entry Type"::Item) THEN
                                    CurrReport.SKIP;

                                  VALIDATE("Unit Cost (LCY)","Job Ledger Entry"."Unit Cost (LCY)");
                                  VALIDATE("Line Discount Amount (LCY)","Job Ledger Entry"."Line Discount Amount (LCY)");
                                  MODIFY;
                                  "Job Ledger Entry".VALIDATE("Unit Price","Unit Price");
                                  "Job Ledger Entry".VALIDATE("Unit Price (LCY)","Unit Price (LCY)");
                                  "Job Ledger Entry".VALIDATE("Total Price","Total Price");
                                  "Job Ledger Entry".VALIDATE("Total Price (LCY)","Total Price (LCY)");
                                  "Job Ledger Entry".VALIDATE("Line Amount (LCY)","Line Amount (LCY)");
                                  "Job Ledger Entry".VALIDATE("Line Amount","Line Amount");
                                  "Job Ledger Entry".MODIFY;
                                END;

               DataItemLink=Job No.=FIELD(Job No.),
                            Job Task No.=FIELD(Job Task No.),
                            Ledger Entry No.=FIELD(Entry No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text001@1000 : TextConst
        '@@@="The Job Ledger Entry item costs have now been updated to equal the related item ledger entry actual costs.\\Number of Job Ledger Entries modified = 2."',
        'DEU=Die Projektposten-Artikelkosten wurden aktualisiert, sodass sie den verknÅpften Artikelposten-Istkosten entsprechen.\\Anzahl der geÑnderten Projektposten: %1.',
        'ENU="The job ledger entry item costs have now been updated to equal the related item ledger entry actual costs.\\The number of job ledger entries modified = %1."',
        'NLD="De artikelkosten voor de projectposten zijn nu bijgewerkt, zodat deze gelijk zijn aan de werkelijke kosten van de bijbehorende artikelposten.\\Het aantal gewijzigde projectposten = %1."',
        'NOR="Artikkelkostene for prosjekttransaksjonen har nÜ blitt oppdatert for Ü tilsvare de relaterte faktiske kostene i artikkelpost.\\Antall endrete prosjekttransaksjoner = %1."',
        'SVE="Artikelkostnaderna fîr projekttransaktionen har nu uppdaterats fîr att motsvara de relaterade faktiska kostnaderna i artikeltransaktionen.\\Antalet Ñndrade projekttransaktioner = %1."';
      NoOfJobLedgEntry@1002 : Integer;
      Text003@1001 : TextConst 'DEU=Es waren keine Projektposten vorhanden, die aktualisiert werden mussten.;ENU=There were no job ledger entries that needed to be updated.;NLD=Er hoefden geen projectposten te worden bijgewerkt.;NOR=Ingen prosjekttransaksjoner trengte Ü bli oppdatert.;SVE=Inga projekttransaktioner behîvde uppdateras.';
      HideResult@1004 : Boolean;

    [External]
    PROCEDURE SetProperties@1(SuppressSummary@1000 : Boolean);
    BEGIN
      HideResult := SuppressSummary;
    END;

    LOCAL PROCEDURE UpdatePostedTotalCost@33(VAR JobLedgerEntry@1000 : Record 11072005;AdjustJobCost@1003 : Decimal;AdjustJobCostLCY@1004 : Decimal);
    VAR
      JobUsageLink@1001 : Record 1020;
      JobPlanningLine@1002 : Record 11020401;
    BEGIN
      JobUsageLink.SETRANGE("Entry No.",JobLedgerEntry."Entry No.");
      IF JobUsageLink.FINDSET THEN
        REPEAT
          JobPlanningLine.GET(JobUsageLink."Job No.",JobUsageLink."Job Task No.",JobUsageLink."Line No.");
          JobPlanningLine.UpdatePostedTotalCost(AdjustJobCost,AdjustJobCostLCY);
          JobPlanningLine.MODIFY;
        UNTIL JobUsageLink.NEXT = 0;
    END;

    LOCAL PROCEDURE PostTotalCostAdjustment@2(VAR JobLedgEntry@1000 : Record 11072005;JobLedgerEntryCostValue@1001 : Decimal;JobLedgerEntryCostValueACY@1004 : Decimal);
    VAR
      AdjustJobCost@1003 : Decimal;
      AdjustJobCostLCY@1002 : Decimal;
    BEGIN
      IF JobLedgEntry."Total Cost (LCY)" <> -JobLedgerEntryCostValue THEN BEGIN
        // Update Total Costs
        AdjustJobCostLCY := -JobLedgerEntryCostValue - JobLedgEntry."Total Cost (LCY)";
        JobLedgEntry."Total Cost (LCY)" := -JobLedgerEntryCostValue;
        IF JobLedgEntry."Currency Code" = '' THEN BEGIN
          AdjustJobCost := -JobLedgerEntryCostValue - JobLedgEntry."Total Cost";
          JobLedgEntry."Total Cost" := -JobLedgerEntryCostValue
        END ELSE BEGIN
          AdjustJobCost := -JobLedgerEntryCostValue * JobLedgEntry."Currency Factor" - JobLedgEntry."Total Cost";
          JobLedgEntry."Total Cost" := -JobLedgerEntryCostValue * JobLedgEntry."Currency Factor";
        END;
        IF JobLedgerEntryCostValueACY <> 0 THEN
          JobLedgEntry."Additional-Currency Total Cost" := -JobLedgerEntryCostValueACY;

        // Update Unit Costs
        JobLedgEntry."Unit Cost (LCY)" :=
          JobLedgEntry."Total Cost (LCY)" / JobLedgEntry.Quantity;
        JobLedgEntry."Unit Cost" :=
          JobLedgEntry."Total Cost" / JobLedgEntry.Quantity;

        JobLedgEntry.Adjusted := TRUE;
        JobLedgEntry."DateTime Adjusted" := CURRENTDATETIME;
        JobLedgEntry.MODIFY;

        UpdatePostedTotalCost(JobLedgEntry,AdjustJobCost,AdjustJobCostLCY);

        NoOfJobLedgEntry += 1;
      END;
    END;

    LOCAL PROCEDURE AddJobCostValue@4(VAR JobLedgerEntryCostValue@1001 : Decimal;VAR JobLedgerEntryCostValueACY@1002 : Decimal;ValueEntry@1003 : Record 5802;IsInventoriableItem@1000 : Boolean);
    BEGIN
      IF IsInventoriableItem THEN BEGIN
        JobLedgerEntryCostValue += ValueEntry."Cost Amount (Actual)";
        JobLedgerEntryCostValueACY += ValueEntry."Cost Amount (Actual) (ACY)";
      END ELSE BEGIN
        JobLedgerEntryCostValue += ValueEntry."Cost Amount (Non-Invtbl.)";
        JobLedgerEntryCostValueACY += ValueEntry."Cost Amount (Non-Invtbl.)(ACY)";
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

