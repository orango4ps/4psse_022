OBJECT Codeunit 11012324 Imp. Plant Req. (Plant Mgt.)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            PlantRequests@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
            XMLDOMManagement4PS@1100525002 : Codeunit 11020220;
            i@1100525001 : Integer;
          BEGIN
            IF GUIALLOWED THEN
              Window.OPEN(Text000);

            UtilityFunctions.CreateInFolder;

            IF FileExists(FileName) THEN BEGIN
              DOMDocument := DOMDocument.XmlDocument;
              IF GUIALLOWED THEN
                XMLDOMManagement4PS.LoadXMLFromClientFile(
                  DOMDocument, FileName, TRUE)
              ELSE BEGIN
                DOMDocument.Load(FileName);
                XMLDOMManagement4PS.RemoveNamespaces(DOMDocument, DOMDocument);
              END;

              IF DOMDocument.DocumentElement.Name <> 'plantrequests' THEN
                ERROR(Text001 + Text002);

              IF FORMAT(DOMDocument.DocumentElement.GetAttribute('version')) <> '1.0' THEN
                ERROR(Text001 + Text003);

              PlantRequests := DOMDocument.DocumentElement.SelectNodes('plantrequest');

              IF PlantRequests.Count = 0 THEN
                ERROR(Text001 + Text004);

              FOR i := 0 TO PlantRequests.Count - 1 DO
                ImportPlantRequest(PlantRequests.Item(i));
            END;

            IF GUIALLOWED THEN
              Window.CLOSE;
          END;

  }
  CODE
  {
    VAR
      UtilityFunctions@1100525009 : Codeunit 11012318;
      FileMgt@1100525500 : Codeunit 419;
      Window@1100525000 : Dialog;
      Text000@1100525001 : TextConst 'DEU=Importieren Werkzeuganfragen...;ENU=Importing Plant Requests...;NLD=Importeren materieelaanvragen...;SVE=Importerar MaskinsbegÑranˇ...';
      DOMDocument@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Text001@1100525003 : TextConst 'DEU="Durchlesen Werkzeuganfragendatei nicht mîglich;";ENU="Unable to process plant requests file; ";NLD="Verwerken materieelaanvraagbestand niet mogelijk; ";SVE="Det gÜr inte att bearbeta MaskinsbegÑransfilen; "';
      Text002@1100525004 : TextConst 'DEU=Name ''root node'' ist nicht "plantrequests".;ENU=root node name is not "plantrequests".;NLD=naam ''root node'' is niet "plantrequests".;SVE=rotnodnamnet Ñr inte "plantrequests".';
      Text003@1100525005 : TextConst 'DEU=Version ist nicht "1.0".;ENU=version is not "1.0".;NLD=versie is niet "1.0".;SVE=versionen Ñr inte "1.0".';
      Text004@1100525006 : TextConst 'DEU=Datei enthÑllt keine Werkzeuganfrage.;ENU=file does not contain any plant requests.;NLD=bestand bevat geen materieelaanvraag.;SVE=filen innehÜller inga MaskinsbegÑranden.';
      Text005@1100525007 : TextConst 'DEU=Element "%1" darf keinen Wert in der Importdatei haben.;ENU=element "%1" should not have a value in the import file.;NLD=element "%1" mag geen waarde hebben in het importbestand.;SVE=element "%1" ska inte ha ett vÑrde i importfilen.';
      Text006@1100525008 : TextConst 'DEU=Werkzeuganfrageart "%1" ist unbekannt.;ENU=plant request type "%1" is unknown.;NLD=materieelaanvraag soort "%1" is onbekend.;SVE=MaskinsbegÑranstypen "%1" Ñr okÑnd.';
      Text007@1100525010 : TextConst 'DEU=Werkzeuganfragezeilenart "%1" ist unbekannt.;ENU=plant request line type "%1" is unknown.;NLD=materieelaanvraagregel soort "%1" is onbekend.;SVE=MaskinsbegÑrans radtyp "%1" Ñr okÑnd.';
      Text008@1100525011 : TextConst 'DEU=Werkzeuganfragestatus "%1" ist unbekannt.;ENU=plant request status "%1" is unknown.;NLD=Materieelaanvraagstatus "%1" is onbekend.;SVE=MaskinsbegÑranstatus "%1" Ñr okÑnd.';
      Text009@1100525012 : TextConst 'DEU=Werkzeuganfrage ''Transportkosten fÅr'' "%1" ist unbekannt.;ENU=plant request ''Transport cost for'' "%1" is unknown.;NLD=materieelaanvraag ''Transportkosten voor'' "%1" is onbekend.;SVE=MaskinsbegÑran ''Transportkostnad fîr'' "%1" Ñr okÑnd.';

    PROCEDURE ImportPlantRequest@1100525002(PlantRequestElement@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      PlantRequest@1100525001 : Record 11020520;
      CommentLines@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      PlantRequestLines@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      i@1100525004 : Integer;
    BEGIN
      IF GUIALLOWED THEN
        Window.UPDATE;

      IF GetElementText(PlantRequestElement, 'no') <> '' THEN
        ERROR(Text001 + Text005, 'no');
      IF GetElementText(PlantRequestElement, 'postingdate') <> '' THEN
        ERROR(Text001 + Text005, 'postingdate');

      PlantRequest.INSERT(TRUE);

      EVALUATE(PlantRequest."Transfer Date", GetElementText(PlantRequestElement, 'transferdate'), 9);
      PlantRequest.Type := GetPlantRequestType(GetElementText(PlantRequestElement, 'type'));
      EVALUATE(PlantRequest."From Location", GetElementText(PlantRequestElement, 'fromlocation'));
      EVALUATE(PlantRequest."To Location", GetElementText(PlantRequestElement, 'tolocation'));
      PlantRequest.Status := GetPlantRequestStatus(GetElementText(PlantRequestElement, 'status'));
      EVALUATE(PlantRequest."Created by", GetElementText(PlantRequestElement, 'createdby'));
      PlantRequest."Transport Cost for (Advice)" :=
        GetPlantRequestTransportCost(GetElementText(PlantRequestElement, 'shippingcharges'));
      PlantRequest."Internet Order" := UtilityFunctions.EvaluateBoolean(GetElementText(PlantRequestElement, 'internetorder'));
      EVALUATE(PlantRequest."CP Login ID", GetElementText(PlantRequestElement, 'login'));
      EVALUATE(PlantRequest."Web Site Code", GetElementText(PlantRequestElement, 'websitecode'));
      EVALUATE(PlantRequest."Your Reference", GetElementText(PlantRequestElement, 'yourreference'));

      CommentLines := PlantRequestElement.SelectNodes('comment/commentline');
      PlantRequestLines := PlantRequestElement.SelectNodes('plantrequestlines/plantrequestline');

      FOR i := 0 TO CommentLines.Count - 1 DO
        ImportCommentLine(PlantRequest, (i + 1) * 10000, CommentLines.Item(i));

      FOR i := 0 TO PlantRequestLines.Count - 1 DO
        ImportPlantRequestLine(PlantRequest."No.", (i + 1) * 10000, PlantRequestLines.Item(i));

      PlantRequest.VALIDATE(Type);
      PlantRequest.MODIFY(TRUE);
    END;

    PROCEDURE ImportPlantRequestLine@1100525048(PlantRequestNo@1100525001 : Code[20];LineNo@1100525003 : Integer;PlantRequestLineElement@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      PlantRequestLine@1100525002 : Record 11020521;
      PlantRequestLine2@1100409000 : Record 11020521;
    BEGIN
      PlantRequestLine.INIT;
      PlantRequestLine."Plant Request No." := PlantRequestNo;
      PlantRequestLine.InitRecord;
      PlantRequestLine."Line No." := LineNo;

      PlantRequestLine2.Type := GetPlantRequestLineType(GetElementText(PlantRequestLineElement, 'type'));
      PlantRequestLine.VALIDATE(Type, PlantRequestLine2.Type);
      CASE PlantRequestLine.Type OF
        PlantRequestLine.Type::Plant:
          BEGIN
            EVALUATE(PlantRequestLine2."Plant Type", GetElementText(PlantRequestLineElement, 'planttype'));
            EVALUATE(PlantRequestLine2.Description, GetElementText(PlantRequestLineElement, 'description'));
            EVALUATE(PlantRequestLine2."Expected return on", GetElementText(PlantRequestLineElement, 'expectedreturn'), 9);
            EVALUATE(PlantRequestLine2.Quantity, GetElementText(PlantRequestLineElement, 'quantity'));
            PlantRequestLine.VALIDATE("Plant Type", PlantRequestLine2."Plant Type");
            IF PlantRequestLine2.Description <> '' THEN
              PlantRequestLine.Description := PlantRequestLine2.Description;
            PlantRequestLine.VALIDATE("Expected return on", PlantRequestLine2."Expected return on");
            PlantRequestLine.VALIDATE(Quantity, PlantRequestLine2.Quantity);
          END;
        PlantRequestLine.Type::Item:
          BEGIN
            EVALUATE(PlantRequestLine2."Item No.", GetElementText(PlantRequestLineElement, 'itemno'));
            EVALUATE(PlantRequestLine2.Description, GetElementText(PlantRequestLineElement, 'description'));
            EVALUATE(PlantRequestLine2.Quantity, GetElementText(PlantRequestLineElement, 'quantity'));
            PlantRequestLine.VALIDATE("Item No.", PlantRequestLine2."Item No.");
            IF PlantRequestLine2.Description <> '' THEN
              PlantRequestLine.Description := PlantRequestLine2.Description;
            PlantRequestLine.VALIDATE(Quantity, PlantRequestLine2.Quantity);
          END;
        PlantRequestLine.Type::Text:
          BEGIN
            EVALUATE(PlantRequestLine.Description, GetElementText(PlantRequestLineElement, 'description'));
          END;
        ELSE
          EXIT;
      END;
      EVALUATE(PlantRequestLine."Comment CP Order", GetElementText(PlantRequestLineElement, 'comment'));
      PlantRequestLine.INSERT;
    END;

    PROCEDURE ImportCommentLine@1100525000(PlantRequest@1100525001 : Record 11020520;LineNo@1100525003 : Integer;CommentLineElement@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      PlantCommentLine@1100525002 : Record 11072666;
    BEGIN
      //DP00183.sc
      PlantCommentLine.INIT;
      //C005461.sc
      PlantCommentLine."Table No." := DATABASE::"Plant Request";
      PlantCommentLine."No." := PlantRequest."No.";
      PlantCommentLine."No. 2" := '';
      PlantCommentLine."Entry No." := 0;
      //C005461.ec
      PlantCommentLine."Line No." := LineNo;
      EVALUATE(PlantCommentLine.Comment, GetElementText(CommentLineElement, '.'));
      EVALUATE(PlantCommentLine.Date, FORMAT(CommentLineElement.GetAttribute('date')), 9);
      EVALUATE(PlantCommentLine."Created by", FORMAT(CommentLineElement.GetAttribute('createdby')));
      PlantCommentLine.INSERT;
      //DP00183.sc
    END;

    PROCEDURE GetElementText@1100525020(RefElement@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";Path@1100525000 : Text[80]) : Text[1024];
    VAR
      Element@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      Element := RefElement.SelectSingleNode(Path);
      IF NOT ISNULL(Element) THEN
        EXIT(Element.InnerText);
    END;

    PROCEDURE GetPlantRequestType@1100525001(Value@1100525000 : Text[30]) : Integer;
    VAR
      PlantRequest@1100525001 : Record 11020520;
    BEGIN
      // Make evaluation of option values independent of application language
      CASE Value OF
        'arrival': EXIT(PlantRequest.Type::Arrival);
        'removal': EXIT(PlantRequest.Type::Removal);
        'other transfers': EXIT(PlantRequest.Type::"Other Transfers");
      ELSE
        ERROR(Text001 + Text006, Value);
      END;
    END;

    PROCEDURE GetPlantRequestStatus@1100525004(Value@1100525000 : Text[30]) : Integer;
    VAR
      PlantRequest@1100525001 : Record 11020520;
    BEGIN
      // Make evaluation of option values independent of application language
      CASE Value OF
        'open': EXIT(PlantRequest.Status::Open);
        'requested': EXIT(PlantRequest.Status::Requested);
        'approved': EXIT(PlantRequest.Status::Approved);
        'disapproved': EXIT(PlantRequest.Status::Disapproved);
        'cancelled': EXIT(PlantRequest.Status::Cancelled);
      ELSE
        ERROR(Text001 + Text008, Value);
      END;
    END;

    PROCEDURE GetPlantRequestTransportCost@1100525006(Value@1100525001 : Text[30]) : Integer;
    VAR
      PlantRequest@1100525000 : Record 11020520;
    BEGIN
      // Make evaluation of option values independent of application language
      CASE Value OF
        '': EXIT(PlantRequest."Transport Cost for (Advice)"::" ");
        'internal': EXIT(PlantRequest."Transport Cost for (Advice)"::Internal);
        'project': EXIT(PlantRequest."Transport Cost for (Advice)"::Project);
        'location': EXIT(PlantRequest."Transport Cost for (Advice)"::Location);
        'from location': EXIT(PlantRequest."Transport Cost for (Advice)"::"From Location");
        'to location': EXIT(PlantRequest."Transport Cost for (Advice)"::"To Location");
      ELSE
        ERROR(Text001 + Text009, Value);
      END;
    END;

    PROCEDURE GetPlantRequestLineType@1100525003(Value@1100525000 : Text[30]) : Integer;
    VAR
      PlantRequestLine@1100525001 : Record 11020521;
    BEGIN
      // Make evaluation of option values independent of application language
      CASE Value OF
        'plant': EXIT(PlantRequestLine.Type::Plant);
        'item': EXIT(PlantRequestLine.Type::Item);
        'text': EXIT(PlantRequestLine.Type::Text);
      ELSE
        ERROR(Text001 + Text007, Value);
      END;
    END;

    PROCEDURE FileName@1100525005() : Text[260];
    VAR
      PlantMgtFileExchangeSetup@1100525000 : Record 11125655;
    BEGIN
      PlantMgtFileExchangeSetup.GET;
      PlantMgtFileExchangeSetup.TESTFIELD("Import Path");

      EXIT(STRSUBSTNO('%1\%2', DELCHR(PlantMgtFileExchangeSetup."Import Path", '>', '\'), 'plantrequests.xml'));
    END;

    PROCEDURE FileExists@1100525007(FileName@1100525000 : Text) : Boolean;
    BEGIN
      IF GUIALLOWED THEN
        EXIT(FileMgt.ClientFileExists(FileName))
      ELSE
        EXIT(EXISTS(FileName));
    END;

    BEGIN
    END.
  }
}

