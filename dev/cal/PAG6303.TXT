OBJECT Page 6303 Power BI Report Spinner Part
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Power BI Reports;
               NOR=Power BI-rapporter;
               SVE=Power BI-rapporter];
    PageType=CardPart;
    OnInit=BEGIN
             // Variables used by PingPong timer when deploying default PBI reports.
             TimerDelay := 30000; // 30 seconds
             MaxTimerCount := (60000 / TimerDelay) * 5; // 5 minutes
           END;

    OnOpenPage=BEGIN
                 UpdateContext;
                 RefreshPart;
                 IsAdmin := PermissionManager.IsSuper(USERSECURITYID);
                 IsSaaSUser := AzureAdMgt.IsSaaS;
                 HasUploads := PowerBiServiceMgt.HasUploads;
               END;

    ActionList=ACTIONS
    {
      { 3       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 8       ;1   ;Action    ;
                      Name=Select Report;
                      CaptionML=[ENU=Select Report;
                                 NOR=Velg rapport;
                                 SVE=VÑlj rapport];
                      ToolTipML=[ENU=Select the report.;
                                 NOR=Velg rapporten.;
                                 SVE=VÑlj rapporten.];
                      ApplicationArea=#All;
                      Enabled=NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible;
                      Image=SelectChart;
                      OnAction=BEGIN
                                 SelectReports;
                               END;
                                }
      { 4       ;1   ;Action    ;
                      Name=Expand Report;
                      CaptionML=[ENU=Expand Report;
                                 NOR=Utvid rapport;
                                 SVE=Expandera rapport];
                      ToolTipML=[ENU=View all information in the report.;
                                 NOR=Vis all informasjon i rapporten.;
                                 SVE=Visa all information i rapporten.];
                      ApplicationArea=#All;
                      Enabled=HasReports AND NOT IsErrorMessageVisible;
                      Image=View;
                      OnAction=VAR
                                 PowerBiReportDialog@1000 : Page 6305;
                               BEGIN
                                 PowerBiReportDialog.SetUrl(GetEmbedUrlWithNavigation,GetMessage);
                                 PowerBiReportDialog.CAPTION(TempPowerBiReportBuffer.ReportName);
                                 PowerBiReportDialog.RUN;
                               END;
                                }
      { 5       ;1   ;Action    ;
                      Name=Previous Report;
                      CaptionML=[ENU=Previous Report;
                                 NOR=Forrige rapport;
                                 SVE=FîregÜende rapport];
                      ToolTipML=[ENU=Go to the previous report.;
                                 NOR=GÜ til forrige rapport.;
                                 SVE=GÜ till fîregÜende rapport.];
                      ApplicationArea=#All;
                      Enabled=HasReports AND NOT IsErrorMessageVisible;
                      Image=PreviousSet;
                      OnAction=BEGIN
                                 // need to reset filters or it would load the LastLoadedReport otherwise
                                 TempPowerBiReportBuffer.RESET;
                                 TempPowerBiReportBuffer.SETFILTER(Enabled,'%1',TRUE);
                                 IF TempPowerBiReportBuffer.NEXT(-1) = 0 THEN
                                   TempPowerBiReportBuffer.FINDLAST;

                                 IF AddInReady THEN
                                   CurrPage.WebReportViewer.Navigate(GetEmbedUrl);
                               END;
                                }
      { 6       ;1   ;Action    ;
                      Name=Next Report;
                      CaptionML=[ENU=Next Report;
                                 NOR=Neste rapport;
                                 SVE=NÑsta rapport];
                      ToolTipML=[ENU=Go to the next report.;
                                 NOR=GÜ til neste rapport.;
                                 SVE=GÜ till nÑsta rapport.];
                      ApplicationArea=#All;
                      Enabled=HasReports AND NOT IsErrorMessageVisible;
                      Image=NextSet;
                      OnAction=BEGIN
                                 // need to reset filters or it would load the LastLoadedReport otherwise
                                 TempPowerBiReportBuffer.RESET;
                                 TempPowerBiReportBuffer.SETFILTER(Enabled,'%1',TRUE);
                                 IF TempPowerBiReportBuffer.NEXT = 0 THEN
                                   TempPowerBiReportBuffer.FINDFIRST;

                                 IF AddInReady THEN
                                   CurrPage.WebReportViewer.Navigate(GetEmbedUrl);
                               END;
                                }
      { 26      ;1   ;Action    ;
                      Name=Manage Report;
                      CaptionML=[ENU=Manage Report;
                                 NOR=Behandle rapport;
                                 SVE=Hantera rapport];
                      ToolTipML=[ENU=Opens current selected report for edits.;
                                 NOR=èpner gjeldende valgte rapport for redigering.;
                                 SVE=ôppnar aktuell vald rapport fîr redigering.];
                      ApplicationArea=#All;
                      Visible=IsSaaSUser;
                      Enabled=HasReports AND NOT IsErrorMessageVisible;
                      Image=PowerBI;
                      OnAction=VAR
                                 PowerBIManagement@1000 : Page 6319;
                               BEGIN
                                 PowerBIManagement.SetTargetReport(LastOpenedReportID,GetEmbedUrl);
                                 PowerBIManagement.LOOKUPMODE(TRUE);
                                 PowerBIManagement.RUNMODAL;

                                 RefreshPart;
                               END;
                                }
      { 21      ;1   ;Action    ;
                      Name=Refresh;
                      CaptionML=[ENU=Refresh Page;
                                 NOR=Oppdater side;
                                 SVE=Uppdatera sida];
                      ToolTipML=[ENU=Refresh the visible content.;
                                 NOR=Oppdater det synlige innholdet.;
                                 SVE=Uppdatera synligt innehÜll.];
                      ApplicationArea=#All;
                      Enabled=NOT IsGettingStartedVisible;
                      Image=Refresh;
                      OnAction=BEGIN
                                 RefreshPart;
                               END;
                                }
      { 23      ;1   ;Action    ;
                      Name=Upload Report;
                      CaptionML=[ENU=Upload Report;
                                 NOR=Last opp rapport;
                                 SVE=Ladda upp rapport];
                      ToolTipML=[ENU=Uploads a report from a PBIX file.;
                                 NOR=Laster opp en rapport fra en PBIX-fil.;
                                 SVE=Laddar upp en rapport frÜn en PBIX-fil.];
                      ApplicationArea=#All;
                      Visible=IsSaaSUser AND NOT IsErrorMessageVisible;
                      Image=Add;
                      OnAction=BEGIN
                                 PAGE.RUNMODAL(PAGE::"Upload Power BI Report");
                                 RefreshPart;
                               END;
                                }
      { 27      ;1   ;Action    ;
                      Name=Reset All Reports;
                      CaptionML=[ENU=Reset All Reports;
                                 NOR=Tilbakestill alle rapporter;
                                 SVE=èterstÑll alla rapporter];
                      ToolTipML=[ENU=Resets all reports for redeployment.;
                                 NOR=Tilbakestiller alle rapporter for ny distribusjon.;
                                 SVE=èterstÑller alla rapporter fîr omdistribuering.];
                      ApplicationArea=#All;
                      Visible=IsAdmin AND IsSaaSUser AND NOT IsErrorMessageVisible AND NOT IsGettingStartedVisible AND HasUploads;
                      Image=Reuse;
                      OnAction=VAR
                                 PowerBIReportUploads@1000 : Record 6307;
                                 PowerBIReportConfiguration@1001 : Record 6301;
                                 PowerBIOngoingDeployments@1002 : Record 6308;
                                 PowerBIServiceStatusSetup@1003 : Record 6309;
                                 PowerBIUserConfiguration@1004 : Record 6304;
                                 PowerBICustomerReports@1005 : Record 6310;
                               BEGIN
                                 IF CONFIRM(ResetReportsQst,FALSE) THEN BEGIN
                                   PowerBIReportUploads.RESET;
                                   PowerBIReportUploads.DELETEALL;
                                   PowerBIReportConfiguration.RESET;
                                   PowerBIReportConfiguration.DELETEALL;
                                   PowerBIOngoingDeployments.DELETEALL;
                                   PowerBIServiceStatusSetup.DELETEALL;
                                   PowerBICustomerReports.DELETEALL;
                                   PowerBIUserConfiguration.RESET;
                                   PowerBIUserConfiguration.DELETEALL;
                                   COMMIT;
                                 END;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                ContainerType=ContentArea }

    { 11  ;1   ;Group     ;
                Visible=NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible AND HasReports;
                GroupType=Group }

    { 2   ;2   ;Field     ;
                Name=WebReportViewer;
                ApplicationArea=#All;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.WebPageViewer;PublicKeyToken=31bf3856ad364e35] }

    { 15  ;1   ;Group     ;
                GroupType=GridLayout;
                Layout=Columns }

    { 13  ;2   ;Group     ;
                GroupType=Group }

    { 7   ;3   ;Group     ;
                Visible=IsGettingStartedVisible;
                GroupType=Group }

    { 19  ;4   ;Field     ;
                Name=GettingStarted;
                ToolTipML=[ENU="Specifies that the Azure AD setup window opens. ";
                           NOR="Angir at oppsettsvinduet for Azure AD Üpnes. ";
                           SVE="Anger att fînstret fîr Azure AD-instÑllningar îppnas. "];
                ApplicationArea=#All;
                SourceExpr='Get started with Power BI';
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE;
                OnDrillDown=BEGIN
                              IF NOT TryAzureAdMgtGetAccessToken THEN
                                ShowErrorMessage(GETLASTERRORTEXT);

                              PowerBiServiceMgt.SelectDefaultReports;
                              LoadContent;
                            END;

                ShowCaption=No }

    { 10  ;3   ;Group     ;
                Visible=IsErrorMessageVisible;
                GroupType=Group }

    { 16  ;4   ;Field     ;
                ToolTipML=[ENU=Specifies the error message from Power BI.;
                           NOR=Angir feilmeldingen fr Power BI.;
                           SVE=Anger felmeddelandet frÜn Power BI.];
                ApplicationArea=#All;
                SourceExpr=ErrorMessageText;
                Editable=FALSE;
                ShowCaption=No }

    { 14  ;4   ;Field     ;
                ExtendedDatatype=URL;
                ToolTipML=[ENU=Specifies the link that generated the error.;
                           NOR=Angir koblingen som genererte feilen.;
                           SVE=Anger lÑnken som skapade felet.];
                ApplicationArea=#All;
                SourceExpr=ErrorUrlText;
                Visible=IsUrlFieldVisible;
                Editable=FALSE;
                ShowCaption=No }

    { 17  ;4   ;Group     ;
                Visible=IsGetReportsVisible;
                GroupType=Group }

    { 32  ;5   ;Field     ;
                Name=GetReportsLink;
                ToolTipML=[ENU=Specifies the reports.;
                           NOR=Angir rapportene.;
                           SVE=Anger rapporterna.];
                ApplicationArea=#All;
                SourceExpr='Get reports';
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE;
                OnDrillDown=BEGIN
                              SelectReports;
                            END;

                ShowCaption=No }

    { 12  ;3   ;Group     ;
                Visible=NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible AND NOT HasReports AND NOT IsDeployingReports AND NOT IsLicenseTimerActive AND NOT CheckingLicenseInBackground;
                GroupType=Group }

    { 9   ;4   ;Field     ;
                Name=EmptyMessage;
                CaptionML=[ENU=There are no enabled reports. Choose Select Report to see a list of reports that you can display.;
                           NOR=Det finnes ingen aktiverte rapporter. Klikk Velg rapport for Ü se en liste over rapporter du kan vise.;
                           SVE=Det finns inga aktiverade rapporter. Visa en lista med rapporter du kan visa med VÑlj rapport.];
                ToolTipML=[ENU=Specifies that the user needs to select Power BI reports.;
                           NOR=Angir at brukeren mÜ velge Power BI-rapporter.;
                           SVE=Anger att anvÑndaren mÜste vÑlja Power BI-rapporter.];
                ApplicationArea=#All;
                Visible=NOT IsDeployingReports;
                Editable=FALSE;
                ShowCaption=No }

    { 24  ;3   ;Group     ;
                Visible=NOT IsDeploymentUnavailable AND IsDeployingReports AND NOT HasReports AND NOT CheckingLicenseInBackground;
                GroupType=Group }

    { 18  ;4   ;Field     ;
                Name=InProgressMessage;
                CaptionML=[ENU=Power BI report deployment is in progress.;
                           NOR=Distribusjon av Power BI-rapport pÜgÜr.;
                           SVE=Distribution av Power BI-rapport pÜgÜr.];
                ToolTipML=[ENU=Specifies that the page is deploying reports to Power BI.;
                           NOR=Angir at siden distribuerer rapporter til Power BI.;
                           SVE=Anger att sidan distribuerar rapporter till Power BI.];
                ApplicationArea=#All;
                Editable=FALSE;
                ShowCaption=No }

    { 31  ;3   ;Group     ;
                Visible=IsLicenseTimerActive OR CheckingLicenseInBackground AND NOT IsDeployingReports AND NOT IsErrorMessageVisible;
                GroupType=Group }

    { 29  ;4   ;Field     ;
                Name=CheckLicenseMessage;
                CaptionML=[ENU=Verifying your Power BI license.;
                           NOR=Sjekking av Power BI-lisensen.;
                           SVE=Verifierar din Power BI-licens.];
                ToolTipML=[ENU=Specifies that the page is checking for Power BI license.;
                           NOR=Angir at siden sjekker at man har en Power BI-lisens.;
                           SVE=Anger att sidan sîker efter en Power BI-licens.];
                ApplicationArea=#All;
                Editable=FALSE;
                ShowCaption=No }

    { 30  ;3   ;Group     ;
                Visible=IsDeploymentUnavailable AND NOT IsDeployingReports AND NOT HasReports;
                GroupType=Group }

    { 25  ;4   ;Field     ;
                Name=ServiceUnavailableMessage;
                CaptionML=[ENU=Power BI report deployment is currently unavailable.;
                           NOR=Distribusjon av Power BI-rapport er for õyeblikket ikke tilgjengelig.;
                           SVE=Distribution av Power BI-rapport kan fîr nÑrvarande inte anvÑnds.];
                ToolTipML=[ENU=Specifies that the page cannot currently deploy reports to Power BI.;
                           NOR=Angir at siden for õyeblikket ikke kan distribuere rapporter til Power BI.;
                           SVE=Anger att sidan fîr nÑrvarande inte kan distribuera rapporter till Power BI.];
                ApplicationArea=#All }

    { 20  ;3   ;Group     ;
                GroupType=Group }

    { 22  ;4   ;Field     ;
                Name=DeployTimer;
                OptionCaptionML=[@@@={Locked};
                                 ENU="Height=1; Width=1;";
                                 NOR="Height=1; Width=1;";
                                 SVE="Height=1; Width=1;"];
                ApplicationArea=#All;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.PowerBIManagement;PublicKeyToken=31bf3856ad364e35] }

    { 28  ;4   ;Field     ;
                Name=LicenseTimer;
                OptionCaptionML=[@@@={Locked};
                                 ENU="Height=1; Width=1;";
                                 NOR="Height=1; Width=1;";
                                 SVE="Height=1; Width=1;"];
                ApplicationArea=#All;
                Visible=FALSE;
                Enabled=FALSE;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.PowerBIManagement;PublicKeyToken=31bf3856ad364e35] }

  }
  CODE
  {
    VAR
      NoReportsAvailableErr@1004 : TextConst 'ENU=There are no reports available from Power BI.;NOR=Det finnes ingen rapporter tilgjengelig fra Power BI.;SVE=Det finns inga rapporter att tillgÜ frÜn Power BI.';
      ResetReportsQst@1030 : TextConst 'ENU=This action will remove all Power BI reports in the database for all users. Reports in your Power BI workspace need to be removed manually. Continue?;NOR=Denne handlingen fjerner alle Power BI-rapporter i databasen for alle brukere. Rapporter i arbeidsomrÜdet for Power BI mÜ fjernes manuelt. Vil du fortsette?;SVE=Den hÑr ÜtgÑrden tar bort alla Power BI-rapporter i databasen fîr alla anvÑndare. Rapporter i Power BI-arbetsytan mÜste tas bort manuellt. Vill du fortsÑtta?';
      TempPowerBiReportBuffer@1031 : TEMPORARY Record 6302;
      PowerBIUserConfiguration@1029 : Record 6304;
      SetPowerBIUserConfig@1032 : Codeunit 6305;
      PowerBiServiceMgt@1026 : Codeunit 6301;
      AzureAdMgt@1025 : Codeunit 6300;
      ClientTypeManagement@1024 : Codeunit 4030;
      PermissionManager@1023 : Codeunit 9002;
      LastOpenedReportID@1022 : GUID;
      Context@1021 : Text[30];
      NameFilter@1020 : Text;
      IsGettingStartedVisible@1019 : Boolean;
      HasReports@1018 : Boolean;
      AddInReady@1017 : Boolean;
      IsErrorMessageVisible@1016 : Boolean;
      ErrorMessageText@1015 : Text;
      IsUrlFieldVisible@1014 : Boolean;
      IsGetReportsVisible@1013 : Boolean;
      IsDeployingReports@1012 : Boolean;
      IsDeploymentUnavailable@1011 : Boolean;
      IsTimerReady@1010 : Boolean;
      IsTimerActive@1009 : Boolean;
      ErrorUrlText@1008 : Text;
      ExceptionMessage@1007 : Text;
      ExceptionDetails@1006 : Text;
      TimerDelay@1005 : Integer;
      MaxTimerCount@1003 : Integer;
      CurrentTimerCount@1002 : Integer;
      IsSaaSUser@1001 : Boolean;
      IsAdmin@1000 : Boolean;
      HasUploads@1027 : Boolean;
      IsLicenseTimerActive@1028 : Boolean;
      CheckingLicenseInBackground@1034 : Boolean;

    LOCAL PROCEDURE GetMessage@1() : Text;
    VAR
      HttpUtility@1000 : DotNet "'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
    BEGIN
      EXIT(
        '{"action":"loadReport","accessToken":"' +
        HttpUtility.JavaScriptStringEncode(AzureAdMgt.GetAccessToken(
            PowerBiServiceMgt.GetPowerBiResourceUrl,PowerBiServiceMgt.GetPowerBiResourceName,FALSE)) + '"}');
    END;

    LOCAL PROCEDURE GetEmbedUrl@2() : Text;
    BEGIN
      IF TempPowerBiReportBuffer.ISEMPTY THEN BEGIN
        // Clear out last opened report if there are no reports to display.
        CLEAR(LastOpenedReportID);
        SetLastOpenedReportID(LastOpenedReportID);
      END ELSE BEGIN
        // update last loaded report
        SetLastOpenedReportID(TempPowerBiReportBuffer.ReportID);
        // Hides both filters and tabs for embedding in small spaces where navigation is unnecessary.
        EXIT(TempPowerBiReportBuffer.EmbedUrl + '&filterPaneEnabled=false&navContentPaneEnabled=false');
      END;
    END;

    LOCAL PROCEDURE GetEmbedUrlWithNavigation@3() : Text;
    BEGIN
      // update last loaded report
      SetLastOpenedReportID(TempPowerBiReportBuffer.ReportID);
      // Hides filters and shows tabs for embedding in large spaces where navigation is necessary.
      EXIT(TempPowerBiReportBuffer.EmbedUrl + '&filterPaneEnabled=false');
    END;

    LOCAL PROCEDURE LoadContent@13();
    BEGIN
      // The end to end process for loading reports onscreen, or defaulting to an error state if that fails,
      // including deploying default reports in case they haven't been loaded yet. Called when first logging
      // into Power BI or any time the part has reloaded from scratch.
      IF NOT TryLoadPart THEN
        ShowErrorMessage(GETLASTERRORTEXT);

      // Always call this after TryLoadPart. Since we can't modify record from TryFunction.
      PowerBiServiceMgt.UpdateEmbedUrlCache(TempPowerBiReportBuffer,Context);

      // Always call this function after calling TryLoadPart to log exceptions to ActivityLog table
      PowerBiServiceMgt.LogException(ExceptionMessage,ExceptionDetails);

      IF NOT IsGettingStartedVisible THEN
        CheckPowerBILicense;

      CurrPage.UPDATE;

      DeployDefaultReports;
    END;

    LOCAL PROCEDURE LoadPart@5();
    BEGIN
      IsGettingStartedVisible := NOT PowerBiServiceMgt.IsUserReadyForPowerBI;

      TempPowerBiReportBuffer.RESET;
      TempPowerBiReportBuffer.DELETEALL;
      IF IsGettingStartedVisible THEN BEGIN
        IF AzureAdMgt.IsSaaS THEN
          ERROR(PowerBiServiceMgt.GetGenericError);

        TempPowerBiReportBuffer.INSERT // Hack to display Get Started link.
      END ELSE BEGIN
        PowerBiServiceMgt.GetReportsForUserContext(TempPowerBiReportBuffer,ExceptionMessage,ExceptionDetails,Context);
        RefreshAvailableReports;
      END;
    END;

    LOCAL PROCEDURE RefreshAvailableReports@7();
    BEGIN
      // Filters the report buffer to show the user's selected report onscreen if possible, otherwise defaulting
      // to other enabled reports.
      // (The updated selection will automatically get saved on render - can't save to database here without
      // triggering errors about calling MODIFY during a TryFunction.)
      TempPowerBiReportBuffer.RESET;
      TempPowerBiReportBuffer.SETFILTER(Enabled,'%1',TRUE);
      IF NOT ISNULLGUID(LastOpenedReportID) THEN BEGIN
        TempPowerBiReportBuffer.SETFILTER(ReportID,'%1',LastOpenedReportID);

        IF TempPowerBiReportBuffer.ISEMPTY THEN BEGIN
          // If last selection is invalid, clear it and default to showing the first enabled report.
          CLEAR(LastOpenedReportID);
          RefreshAvailableReports;
        END;
      END;

      HasReports := TempPowerBiReportBuffer.FINDFIRST;
    END;

    LOCAL PROCEDURE RefreshPart@22();
    BEGIN
      // Refreshes content by re-rendering the whole page part - removes any current error message text, and tries to
      // reload the user's list of reports, as if the page just loaded. Used by the Refresh button or when closing the
      // Select Reports page, to make sure we have the most up to date list of reports and aren't stuck in an error state.
      IsErrorMessageVisible := FALSE;
      IsUrlFieldVisible := FALSE;
      IsGetReportsVisible := FALSE;

      IsDeployingReports := PowerBiServiceMgt.GetIsDeployingReports;

      IsDeploymentUnavailable := NOT PowerBiServiceMgt.IsPBIServiceAvailable;

      PowerBiServiceMgt.SelectDefaultReports;

      SetPowerBIUserConfig.CreateOrReadUserConfigEntry(PowerBIUserConfiguration,LastOpenedReportID,Context);
      LoadContent;

      IF AddInReady THEN
        CurrPage.WebReportViewer.Navigate(GetEmbedUrl);
    END;

    [External]
    PROCEDURE SetContext@6(ParentContext@1000 : Text[30]);
    BEGIN
      // Sets an ID that tracks which page to show reports for - called by the parent page hosting the part,
      // if possible (see UpdateContext).
      Context := ParentContext;
    END;

    LOCAL PROCEDURE UpdateContext@8();
    BEGIN
      // Automatically sets the parent page ID based on the user's selected role center (role centers can't
      // have codebehind, so they have no other way to set the context for their reports).
      IF Context = '' THEN
        SetContext(PowerBiServiceMgt.GetEnglishContext);
    END;

    [External]
    PROCEDURE SetNameFilter@9(ParentFilter@1000 : Text);
    BEGIN
      // Sets a text value that tells the selection page how to filter the reports list. This should be called
      // by the parent page hosting this page part, if possible.
      NameFilter := ParentFilter;
    END;

    LOCAL PROCEDURE ShowErrorMessage@4(TextToShow@1000 : Text);
    BEGIN
      // this condition checks if we caught the authorization error that contains a link to Power BI
      // the function divide the error message into simple text and url part
      IF TextToShow = PowerBiServiceMgt.GetUnauthorizedErrorText THEN BEGIN
        IsUrlFieldVisible := TRUE;
        // this message is required to have ':' at the end, but it has '.' instead due to C/AL Localizability requirement
        TextToShow := DELSTR(PowerBiServiceMgt.GetUnauthorizedErrorText,STRLEN(PowerBiServiceMgt.GetUnauthorizedErrorText),1) + ':';
        ErrorUrlText := PowerBiServiceMgt.GetPowerBIUrl;
      END;

      IsGetReportsVisible := (TextToShow = NoReportsAvailableErr);

      IsErrorMessageVisible := TRUE;
      IsGettingStartedVisible := FALSE;
      TempPowerBiReportBuffer.DELETEALL; // Required to avoid one INSERT after another (that will lead to an error)
      IF TextToShow = '' THEN
        TextToShow := PowerBiServiceMgt.GetGenericError;
      ErrorMessageText := TextToShow;
      TempPowerBiReportBuffer.INSERT; // Hack to show the field with the text
      CurrPage.UPDATE;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryLoadPart@11();
    BEGIN
      // Need the try function here to catch any possible internal errors
      LoadPart;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryAzureAdMgtGetAccessToken@33();
    BEGIN
      AzureAdMgt.GetAccessToken(PowerBiServiceMgt.GetPowerBiResourceUrl,PowerBiServiceMgt.GetPowerBiResourceName,TRUE);
    END;

    LOCAL PROCEDURE SetReport@10();
    BEGIN
      IF (ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Phone) AND
         (ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Windows)
      THEN
        CurrPage.WebReportViewer.InitializeIFrame(PowerBiServiceMgt.GetReportPageSize);
      // CurrPage.WebReportViewer.InitializeFullIFrame();
      CurrPage.WebReportViewer.Navigate(GetEmbedUrl);
    END;

    [External]
    PROCEDURE SetLastOpenedReportID@14(LastOpenedReportIDInputValue@1000 : GUID);
    BEGIN
      LastOpenedReportID := LastOpenedReportIDInputValue;
      // filter to find the proper record
      PowerBIUserConfiguration.RESET;
      PowerBIUserConfiguration.SETFILTER("Page ID",'%1',Context);
      PowerBIUserConfiguration.SETFILTER("Profile ID",'%1',PowerBiServiceMgt.GetEnglishContext);
      PowerBIUserConfiguration.SETFILTER("User Security ID",'%1',USERSECURITYID);

      // update the last loaded report field (the record at this point should already exist bacause it was created OnOpenPage)
      IF NOT PowerBIUserConfiguration.ISEMPTY THEN BEGIN
        PowerBIUserConfiguration."Selected Report ID" := LastOpenedReportID;
        PowerBIUserConfiguration.MODIFY;
        COMMIT;
      END;
    END;

    LOCAL PROCEDURE SelectReports@16();
    VAR
      PowerBIReportSelection@1000 : Page 6304;
    BEGIN
      // Opens the report selection page, then updates the onscreen report depending on the user's
      // subsequent selection and enabled/disabled settings.
      PowerBIReportSelection.SetContext(Context);
      PowerBIReportSelection.SetNameFilter(NameFilter);
      PowerBIReportSelection.LOOKUPMODE(TRUE);

      PowerBIReportSelection.RUNMODAL;
      IF PowerBIReportSelection.IsPageClosedOkay THEN BEGIN
        PowerBIReportSelection.GETRECORD(TempPowerBiReportBuffer);
        IF TempPowerBiReportBuffer.Enabled THEN BEGIN
          LastOpenedReportID := TempPowerBiReportBuffer.ReportID; // RefreshAvailableReports handles fallback logic on invalid selection.
          SetLastOpenedReportID(LastOpenedReportID); // Resolves bug to set last selected report
        END;

        RefreshPart;
        // At this point, NAV will load the web page viewer since HasReports should be true. WebReportViewer::ControlAddInReady will then fire, calling Navigate()
      END;
    END;

    LOCAL PROCEDURE DeployDefaultReports@26();
    BEGIN
      IF NOT PowerBiServiceMgt.IsPowerBIDeploymentEnabled THEN
        EXIT;

      // Checks if there are any default reports the user needs to upload, select, or delete and automatically begins
      // those processes. The page will refresh when the timer control runs later.
      DeleteMarkedReports;
      FinishPartialUploads;
      IF NOT CheckingLicenseInBackground AND NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible AND AzureAdMgt.IsSaaS AND
         PowerBiServiceMgt.UserNeedsToDeployReports(Context) AND NOT PowerBiServiceMgt.IsUserDeployingReports
      THEN BEGIN
        IsDeployingReports := TRUE;
        PowerBiServiceMgt.UploadDefaultReportInBackground;
        StartDeploymentTimer;
      END;
    END;

    LOCAL PROCEDURE FinishPartialUploads@15();
    BEGIN
      // Checks if there are any default reports whose uploads only partially completed, and begins a
      // background process for those reports. The page will refresh when the timer control runs later.
      IF NOT CheckingLicenseInBackground AND NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible AND AzureAdMgt.IsSaaS AND
         PowerBiServiceMgt.UserNeedsToRetryUploads AND NOT PowerBiServiceMgt.IsUserRetryingUploads
      THEN BEGIN
        IsDeployingReports := TRUE;
        PowerBiServiceMgt.RetryUnfinishedReportsInBackground;
        StartDeploymentTimer;
      END;
    END;

    LOCAL PROCEDURE DeleteMarkedReports@19();
    BEGIN
      // Checks if there are any default reports that have been marked to be deleted on page 6321, and begins
      // a background process for those reports. The page will refresh when the timer control runs later.
      IF NOT CheckingLicenseInBackground AND NOT IsGettingStartedVisible AND NOT IsErrorMessageVisible AND AzureAdMgt.IsSaaS AND
         PowerBiServiceMgt.UserNeedsToDeleteReports AND NOT PowerBiServiceMgt.IsUserDeletingReports
      THEN BEGIN
        IsDeployingReports := TRUE;
        PowerBiServiceMgt.DeleteDefaultReportsInBackground;
        StartDeploymentTimer;
        // TODO: Make same changes on factbox page.
      END;
    END;

    LOCAL PROCEDURE StartDeploymentTimer@25();
    BEGIN
      // Resets the timer for refreshing the page during OOB report deployment, if the add-in is
      // ready to go and the timer isn't already going.
      IF IsTimerReady AND NOT IsTimerActive AND NOT IsLicenseTimerActive THEN BEGIN
        CurrentTimerCount := 0;
        IsTimerActive := TRUE;
        CurrPage.DeployTimer.Ping(TimerDelay);
      END;
    END;

    LOCAL PROCEDURE StartLicenseTimer@24();
    BEGIN
      IF CheckingLicenseInBackground AND IsTimerReady AND NOT IsLicenseTimerActive AND NOT IsTimerActive THEN BEGIN
        CurrentTimerCount := 0;
        IsLicenseTimerActive := TRUE;
        CurrPage.DeployTimer.Ping(TimerDelay);
      END;
    END;

    LOCAL PROCEDURE CheckPowerBILicense@53();
    BEGIN
      IF NOT PowerBiServiceMgt.CheckForPowerBILicense THEN BEGIN
        CheckingLicenseInBackground := TRUE;
        StartLicenseTimer;
      END;
    END;

    EVENT WebReportViewer@-2::ControlAddInReady@7(callbackUrl@1000 : Text);
    BEGIN
      AddInReady := TRUE;
      IF NOT TempPowerBiReportBuffer.ISEMPTY THEN
        SetReport;
    END;

    EVENT WebReportViewer@-2::DocumentReady@8();
    BEGIN
      IF NOT TempPowerBiReportBuffer.ISEMPTY THEN
        CurrPage.WebReportViewer.PostMessage(GetMessage,'*',FALSE);
    END;

    EVENT WebReportViewer@-2::Callback@9(data@1000 : Text);
    BEGIN
    END;

    EVENT WebReportViewer@-2::Refresh@10(callbackUrl@1000 : Text);
    BEGIN
      IF AddInReady AND NOT TempPowerBiReportBuffer.ISEMPTY THEN
        SetReport;
    END;

    EVENT DeployTimer@-22::AddInReady@5();
    BEGIN
      // Timer for refreshing the page during OOB report deployment - usually deployment will
      // start on page load before the add-in is ready.
      IsTimerReady := TRUE;
      StartLicenseTimer;
      IF NOT CheckingLicenseInBackground AND IsDeployingReports AND NOT IsErrorMessageVisible THEN
        StartDeploymentTimer;
    END;

    EVENT DeployTimer@-22::Pong@6();
    VAR
      HasPowerBILicense@1000 : Boolean;
    BEGIN
      // Select default reports and refresh the page, or possibly wait and check again later
      // if it looks like uploading hasn't finished yet.
      HasPowerBILicense := PowerBiServiceMgt.CheckForPowerBILicense;
      CurrentTimerCount := 0;
      IsLicenseTimerActive := NOT HasPowerBILicense;
      CheckingLicenseInBackground := NOT HasPowerBILicense;

      IF HasPowerBILicense THEN BEGIN
        RefreshPart;
        IF IsTimerActive AND NOT IsLicenseTimerActive AND NOT CheckingLicenseInBackground
        THEN BEGIN
          PowerBiServiceMgt.SelectDefaultReports;
          DeployDefaultReports;

          IsDeployingReports := PowerBiServiceMgt.GetIsDeployingReports;

          CurrentTimerCount := CurrentTimerCount + 1;
          IsTimerActive := IsDeployingReports AND (CurrentTimerCount < MaxTimerCount) AND NOT IsErrorMessageVisible;

          IF IsTimerActive THEN
            CurrPage.DeployTimer.Ping(TimerDelay);
        END;
      END ELSE BEGIN
        ShowErrorMessage(PowerBiServiceMgt.GetUnauthorizedErrorText);
        CurrPage.DeployTimer.Stop;
      END;

      IF NOT IsDeployingReports AND HasReports THEN
        CurrPage.DeployTimer.Stop;
    END;

    EVENT LicenseTimer@-28::AddInReady@5();
    BEGIN
      CurrPage.LicenseTimer.Stop;
    END;

    EVENT LicenseTimer@-28::Pong@6();
    BEGIN
      CurrPage.LicenseTimer.Stop;
    END;

    BEGIN
    END.
  }
}

