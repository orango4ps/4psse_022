OBJECT Codeunit 11020211 Strategic Purch. Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE FindContractForAdviceOrder@1100525000(VAR AdviceOrderLine@1100525001 : Record 11012055);
    VAR
      VendorRec@1100525002 : Record 23;
      CurrentContract@1100525000 : 'No Contract,Contract,Contract with Discount Agreement';
      TradeItem@1100525004 : Record 11012317;
      ServOrProj@1100530000 : Boolean;
    BEGIN
      WITH AdviceOrderLine DO BEGIN
        "Contract Type" := "Contract Type"::"No Contract";
        ServOrProj := ("Service Contract No." <> '') OR ("Project No." <> '');  //*23382.n

        //Blanket Order
        IF ("Service Contract No." <> '') AND
          (QuantityInBlanketOrders(Vendor,"Item No.","Trade Item","Service Contract No.",'',FALSE) >= "Quantity (Advice)")
        THEN
          "Contract Type" := "Contract Type"::"Service Blanket Order"
        ELSE
          IF ("Project No." <> '') AND
            (QuantityInBlanketOrders(Vendor,"Item No.","Trade Item",'',"Project No.",FALSE) >= "Quantity (Advice)")
          THEN
            "Contract Type" := "Contract Type"::"Project Blanket Order"
          ELSE
            //IF QuantityInBlanketOrders(Vendor,"Item No.","Trade Item",'','',FALSE) >= "Quantity (Advice)" THEN  //*23382.o
            IF QuantityInBlanketOrders(Vendor,"Item No.","Trade Item",'','',ServOrProj) >= "Quantity (Advice)" THEN  //*23382.n
              "Contract Type" := "Contract Type"::"General Blanket Order"
            ELSE
              IF VendorRec.GET(Vendor) THEN BEGIN
                GetVendorContract(VendorRec,CurrentContract);
                CASE CurrentContract OF

                  //Blanket Contract
                  CurrentContract::Contract:
                    "Contract Type" := "Contract Type"::Contract;

                  //Blanket Contract with Discount Agreement
                  CurrentContract::"Contract with Discount Agreement":
                    BEGIN
                      IF TradeItem.GET("Vendor (Trade Item)","Trade Item") THEN
                        IF DiscountTermExists(TradeItem) THEN
                          "Contract Type" := "Contract Type"::"Contract with Discount Terms";
                    END;
                END;
              END;
      END;
    END;

    PROCEDURE FindContractForPurchaseLine@1100525006(VAR PurchaseLine@1100525001 : Record 39);
    VAR
      VendorRec@1100525002 : Record 23;
      CurrentContract@1100525000 : 'No Contract,Contract,Contract with Discount Agreement';
      TradeItem@1100525004 : Record 11012317;
      ServOrProj@1100530000 : Boolean;
    BEGIN
      WITH PurchaseLine DO BEGIN
        IF PurchaseLine."Document Type" <> PurchaseLine."Document Type"::Order THEN
          EXIT;
        "Contract Type" := "Contract Type"::"No Contract";
        ServOrProj := ("Service Contract No." <> '') OR ("Job No." <> '');  //*23382.n

        //Blanket Order
        IF ("Service Contract No." <> '') AND
          (QuantityInBlanketOrders("Buy-from Vendor No.","Item No.","Trade Item","Service Contract No.",'',FALSE) >= "Quantity (Base)")
        THEN
          "Contract Type" := "Contract Type"::"Service Blanket Order"
        ELSE
          IF ("Job No." <> '') AND
            (QuantityInBlanketOrders("Buy-from Vendor No.","Item No.","Trade Item",'',"Job No.",FALSE) >= "Quantity (Base)")
          THEN
            "Contract Type" := "Contract Type"::"Project Blanket Order"
          ELSE
            //IF QuantityInBlanketOrders("Buy-from Vendor No.","Item No.","Trade Item",'','',FALSE) >= "Quantity (Base)" THEN//23382.o
            IF QuantityInBlanketOrders("Buy-from Vendor No.","Item No.","Trade Item",'','',ServOrProj) >= "Quantity (Base)" THEN  //.n
              "Contract Type" := "Contract Type"::"General Blanket Order"
            ELSE
              IF VendorRec.GET("Buy-from Vendor No.") THEN BEGIN
                GetVendorContract(VendorRec,CurrentContract);
                CASE CurrentContract OF

                  //Blanket Contract
                  CurrentContract::Contract:
                    "Contract Type" := "Contract Type"::Contract;

                  //Blanket Contract with Discount Agreement
                  CurrentContract::"Contract with Discount Agreement":
                    BEGIN
                      IF TradeItem.GET("Vendor (Trade Item)","Trade Item") THEN
                        IF DiscountTermExists(TradeItem) THEN
                          "Contract Type" := "Contract Type"::"Contract with Discount Agreement";
                    END;
                END;
              END;
      END;
    END;

    PROCEDURE FindContractForReqLine@1100525009(VAR ReqLine@1100525004 : Record 246);
    VAR
      VendorRec@1100525002 : Record 23;
      CurrentContract@1100525000 : 'No Contract,Contract,Contract with Discount Agreement';
      ItemNo@1100525001 : Code[20];
      TradeItem@1100525005 : Record 11012317;
      ServOrProj@1100530000 : Boolean;
    BEGIN
      WITH ReqLine DO BEGIN
        "Contract Type" := "Contract Type"::"No Contract";
        ServOrProj := (GetServiceContract <> '') OR ("Project No." <> '');  //*23382.n

        //Blanket Order
        IF Type = Type::Item THEN
          ItemNo := "No.";

        IF (GetServiceContract <> '') AND
          (QuantityInBlanketOrders("Vendor No.",ItemNo,"Trade Item",GetServiceContract,'',FALSE) >= "Quantity (Base)")
        THEN
          "Contract Type" := "Contract Type"::"Service Blanket Order"
        ELSE
          IF ("Project No." <> '') AND
            (QuantityInBlanketOrders("Vendor No.",ItemNo,"Trade Item",'',"Project No.",FALSE) >= "Quantity (Base)")
          THEN
            "Contract Type" := "Contract Type"::"Project Blanket Order"
          ELSE
            //IF QuantityInBlanketOrders("Vendor No.",ItemNo,"Trade Item",'','',TRUE) >= "Quantity (Base)" THEN BEGIN  //*23382.o
            IF QuantityInBlanketOrders("Vendor No.",ItemNo,"Trade Item",'','',ServOrProj) >= "Quantity (Base)" THEN BEGIN  //*23382.n
              "Contract Type" := "Contract Type"::"General Blanket Order";
            END ELSE

              IF VendorRec.GET("Vendor No.") THEN BEGIN
                GetVendorContract(VendorRec,CurrentContract);
                CASE CurrentContract OF

                  //Blanket Contract
                  CurrentContract::Contract:
                    "Contract Type" := "Contract Type"::Contract;

                  //Blanket Contract with Discount Agreement
                  CurrentContract::"Contract with Discount Agreement":
                    BEGIN
                      IF TradeItem.GET("Vendor (Trade Item)","Trade Item") THEN
                        IF DiscountTermExists(TradeItem) THEN
                          "Contract Type" := "Contract Type"::"Contract with Discount Agreement";
                    END;
                END;
              END;
      END;
    END;

    PROCEDURE CheckStratPurchForAdviceOrder@1100525001(VAR AdviceOrderLine@1100525000 : Record 11012055);
    VAR
      Text001@1100525004 : TextConst 'DEU=Es wurde kein Vertrag fÅr Empfehlungsauftragzeile %1 gefunden! Sie kînnen nur Bestellungen fÅr Lieferanten mit einem Vertrag erstellen.;ENU=No contract found for advice order line %1! You can only create purchase orders for vendors with a contract.;NLD=Geen contract gevonden voor adviesorderregel %1! U kunt alleen inkooporders aanmaken voor leveranciers met een contract.;NOR=Kan ikke finne kontrakt for bestillingsunderlagsrad %1! Du kan kun opprette innkjõpsordre for leverandõrer med kontrakt.;SVE=Det gick inte att hitta nÜgot kontrakt fîr bestÑllningsunderlagsraden %1! Du kan endast skapa inkîpsorder fîr leverantîrer med ett kontrakt.';
      AdviceOrderLine2@1100525005 : Record 11012055;
      TradeItem@1100525013 : Record 11012317;
      PurchaseHeader@1100528400 : Record 38;
      UOMMgt@1100525006 : Codeunit 5402;
      QtyperUnitofMeasure@1100525007 : Decimal;
      Item@1100525008 : Record 27;
      QuantityBase@1100525009 : Decimal;
      MaxQuantityAllowed@1100525010 : Decimal;
      Text002@1100525011 : TextConst 'DEU=Die Anzahl im Vertrag erlaubt es nicht, dass Sie fÅr die Empfehlungsauftragzeile %1 mehr als %2 Einheiten bestellen.;ENU=The contract does not allow that you order more than %2 units for line %1.;NLD=Het aantal in contract staat niet toe dat u voor adviesorderregel %1 meer dan %2 eenheden besteld.;NOR=Kontrakten tillater ikke at du bestiller mer enn %2 enheter for rad %1.;SVE=Enligt kontraktet kan du inte bestÑlla fler Ñn %2 enheter fîr rad %1.';
      Text003@1100525014 : TextConst 'DEU=Es wurde keine Rabattbedingung fÅr Lieferanten %1 gefunden, Handelsartikel %2 miet Rabattgruppencode %3.;ENU=No Discount Agreement found for vendor %1, trade item %2 with discount group %3;NLD=Geen kortingsconditie gevonden voor leverancier %1, handelsartikel %2 met kortingsgroepcode %3.;NOR=Ingen rabattavtale funnet for leverandõr %1, katalogartikkel %2 med rabattgruppe %3;SVE=Inget rabattavtal hittades fîr leverantîren %1, skaffningsartikel %2 med rabattgrupp %3';
      QtyInBlanketOrders@1100525001 : Decimal;
    BEGIN
      IF IsLimitedPurchaser(PurchaseHeader."Document Type"::Order) THEN BEGIN
        AdviceOrderLine2 := AdviceOrderLine;
        WITH AdviceOrderLine2 DO BEGIN
          FindContractForAdviceOrder(AdviceOrderLine2);
          SETRECFILTER;

          //no contract: ordering not allowed
          IF "Contract Type" = "Contract Type"::"No Contract" THEN
            ERROR(Text001,GETFILTERS);

          //blanket order: check quantity in blanket orders
          IF "Contract Type" IN
            ["Contract Type"::"General Blanket Order",
            "Contract Type"::"Service Blanket Order",
            "Contract Type"::"Project Blanket Order"]
          THEN BEGIN
            QtyInBlanketOrders := QtyInBlanketOrdersAdviceOrder(AdviceOrderLine2);
            IF Item.GET("Item No.") THEN BEGIN
              QtyperUnitofMeasure := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure");
              IF QtyperUnitofMeasure = 0 THEN
                QtyperUnitofMeasure := 1;
              QuantityBase := "Quantity (Advice)" * QtyperUnitofMeasure;
              MaxQuantityAllowed := QtyInBlanketOrders / QtyperUnitofMeasure;
            END ELSE
              QuantityBase := "Quantity (Advice)";

            IF QuantityBase > QtyInBlanketOrders THEN
              ERROR(Text002,GETFILTERS,MaxQuantityAllowed);
          END;

          //blanket contract: check discount agreement
          IF "Contract Type" = "Contract Type"::"Contract with Discount Terms" THEN BEGIN
            TradeItem.GET("Vendor (Trade Item)","Trade Item");
            IF NOT DiscountTermExists(TradeItem) THEN
              ERROR(Text003,"Vendor (Trade Item)","Trade Item",TradeItem."Discount Group Code");
          END;
        END;
        AdviceOrderLine := AdviceOrderLine2;
      END;
    END;

    PROCEDURE CheckStratPurchForReqLine@1100525007(VAR ReqLine@1100525000 : Record 246);
    VAR
      Text001@1100525004 : TextConst 'DEU=Es wurde kein Vertrag fÅr Empfehlungsauftragzeile %1 gefunden! Sie kînnen nur Bestellungen fÅr Lieferanten mit einem Vertrag erstellen.;ENU=No contract found for advice order line %1! You can only create purchase orders for vendors with a contract.;NLD=Geen contract gevonden voor adviesorderregel %1! U kunt alleen inkooporders aanmaken voor leveranciers met een contract.;NOR=Kan ikke finne kontrakt for bestillingsunderlagsrad %1! Du kan kun opprette innkjõpsordre for leverandõrer med kontrakt.;SVE=Det gick inte att hitta nÜgot kontrakt fîr bestÑllningsunderlagsraden %1! Du kan endast skapa inkîpsorder fîr leverantîrer med ett kontrakt.';
      ReqLine2@1100525001 : Record 246;
      TradeItem@1100525013 : Record 11012317;
      PurchaseHeader@1100528400 : Record 38;
      UOMMgt@1100525006 : Codeunit 5402;
      QtyperUnitofMeasure@1100525007 : Decimal;
      Item@1100525008 : Record 27;
      QuantityBase@1100525009 : Decimal;
      MaxQuantityAllowed@1100525010 : Decimal;
      Text002@1100525011 : TextConst 'DEU=Die Anzahl im Vertrag erlaubt es nicht, dass Sie fÅr die Empfehlungsauftragzeile %1 mehr als %2 Einheiten bestellen.;ENU=The contract does not allow that you order more than %2 units for line %1.;NLD=Het aantal in contract staat niet toe dat u voor adviesorderregel %1 meer dan %2 eenheden besteld.;NOR=Kontrakten tillater ikke at du bestiller mer enn %2 enheter for rad %1.;SVE=Enligt kontraktet kan du inte bestÑlla fler Ñn %2 enheter fîr rad %1.';
      Text003@1100525014 : TextConst 'DEU=Es wurde keine Rabattbedingung fÅr Lieferanten %1 gefunden, Handelsartikel %2 miet Rabattgruppencode %3.;ENU=No Discount Agreement found for vendor %1, trade item %2 with discount group %3;NLD=Geen kortingsconditie gevonden voor leverancier %1, handelsartikel %2 met kortingsgroepcode %3.;NOR=Ingen rabattavtale funnet for leverandõr %1, katalogartikkel %2 med rabattgruppe %3;SVE=Inget rabattavtal hittades fîr leverantîren %1, skaffningsartikel %2 med rabattgrupp %3';
      QtyInBlanketOrders@1100525002 : Decimal;
    BEGIN
      IF IsLimitedPurchaser(PurchaseHeader."Document Type"::Order) THEN BEGIN
        ReqLine2 := ReqLine;
        WITH ReqLine2 DO BEGIN
          IF "Replenishment System" <> "Replenishment System"::Purchase THEN EXIT;  //db, 18-05-15: C023380
          FindContractForReqLine(ReqLine2);
          SETRECFILTER;

          //no contract: ordering not allowed
          IF "Contract Type" = "Contract Type"::"No Contract" THEN
            ERROR(Text001,GETFILTERS);

          //blanket order: check quantity in blanket orders
          IF "Contract Type" IN
            ["Contract Type"::"General Blanket Order",
            "Contract Type"::"Service Blanket Order",
            "Contract Type"::"Project Blanket Order"]
          THEN BEGIN
            QtyInBlanketOrders := QtyInBlanketOrdersReqLine(ReqLine2);
            IF Item.GET("No.") THEN BEGIN
              QtyperUnitofMeasure := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
              IF QtyperUnitofMeasure = 0 THEN
                QtyperUnitofMeasure := 1;
              QuantityBase := Quantity * QtyperUnitofMeasure;
              MaxQuantityAllowed := QtyInBlanketOrders / QtyperUnitofMeasure;
            END ELSE
              QuantityBase := Quantity;

            IF QuantityBase > QtyInBlanketOrders THEN
              ERROR(Text002,GETFILTERS,MaxQuantityAllowed);
          END;

          //blanket contract: check discount agreement
          IF "Contract Type" = "Contract Type"::"Contract with Discount Agreement" THEN BEGIN
            TradeItem.GET("Vendor (Trade Item)","Trade Item");
            IF NOT DiscountTermExists(TradeItem) THEN
              ERROR(Text003,"Vendor (Trade Item)","Trade Item",TradeItem."Discount Group Code");
          END;
        END;
        ReqLine := ReqLine2;
      END;
    END;

    PROCEDURE NumberOfBlOrderLinesAdvOrder@1100525016(VAR AdviceOrderLine@1100525002 : Record 11012055) Result : Code[20];
    VAR
      ServOrProj@1100530001 : Boolean;
    BEGIN
      WITH AdviceOrderLine DO BEGIN
        //Result := NumberOfBlOrderLines(Vendor,"Item No.","Trade Item");  //*23382.o
        //*23382.sn
        CASE "Contract Type" OF
          "Contract Type"::"Service Blanket Order":
            Result := NumberOfBlOrderLines(Vendor,"Item No.","Trade Item","Service Contract No.",'',FALSE);
          "Contract Type"::"Project Blanket Order":
            Result := NumberOfBlOrderLines(Vendor,"Item No.","Trade Item",'',"Project No.",FALSE);
          "Contract Type"::"General Blanket Order":
            BEGIN
              ServOrProj := ("Service Contract No." <> '') OR ("Project No." <> '');
              Result := NumberOfBlOrderLines(Vendor,"Item No.","Trade Item",'','',ServOrProj);
            END;
        END;
        //*23382.en
      END;
    END;

    PROCEDURE NumberOfBlOrderLinesReqLine@1100525019(ReqLine@1100525000 : Record 246) Result : Code[20];
    VAR
      ServOrProj@1100530001 : Boolean;
      ItemNo@1100525001 : Code[20];
    BEGIN
      WITH ReqLine DO BEGIN
        IF Type = Type::Item THEN
          ItemNo := "No.";
        //Result := NumberOfBlOrderLines("Vendor No.",ItemNo,"Trade Item");  //*23382.o
        //*23382.sn
        CASE "Contract Type" OF
          "Contract Type"::"Service Blanket Order":
            Result := NumberOfBlOrderLines("Vendor No.",ItemNo,"Trade Item",GetServiceContract,'',FALSE);
          "Contract Type"::"Project Blanket Order":
            Result := NumberOfBlOrderLines("Vendor No.",ItemNo,"Trade Item",'',"Project No.",FALSE);
          "Contract Type"::"General Blanket Order":
            BEGIN
              ServOrProj := (GetServiceContract <> '') OR ("Project No." <> '');
              Result := NumberOfBlOrderLines("Vendor No.",ItemNo,"Trade Item",'','',ServOrProj);
            END;
        END;
        //*23382.en
      END;
    END;

    PROCEDURE NumberOfBlOrderLines@1100525021(VendorNo@1100525003 : Code[20];ItemNo@1100525004 : Code[20];TradeItemNo@1100525005 : Code[20];ServiceContractNo@1100530002 : Code[20];ProjectNo@1100530001 : Code[20];BlankFilter@1100530000 : Boolean) Result : Code[20];
    VAR
      PurchaseHeader@1100525002 : Record 38;
      PurchaseLine@1100525001 : Record 39;
      Counter@1100525000 : Integer;
    BEGIN
      IF (ItemNo = '') AND (TradeItemNo = '') THEN
        EXIT;
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::"Blanket Order");
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",VendorNo);
      PurchaseHeader.SETFILTER(Status,'<>%1',PurchaseHeader.Status::Closed);
      IF PurchaseHeader.FINDSET THEN BEGIN
        REPEAT
          PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
          PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
          IF ItemNo <> '' THEN
            PurchaseLine.SETRANGE("Item No.",ItemNo);
          IF TradeItemNo <> '' THEN
            PurchaseLine.SETRANGE("Trade Item",TradeItemNo);
          //*23382.sn
          IF BlankFilter THEN BEGIN
            PurchaseLine.SETRANGE("Service Contract No.",ServiceContractNo);
            PurchaseLine.SETRANGE("Job No.",ProjectNo);
          END ELSE BEGIN
            IF ServiceContractNo <> '' THEN
              PurchaseLine.SETRANGE("Service Contract No.",ServiceContractNo);
            IF ProjectNo <> '' THEN
              PurchaseLine.SETRANGE("Job No.",ProjectNo);
          END;
          //*23382.en
          //db.sn, 19-04-10: M19111
          //PurchaseLine.SETFILTER("Qty. to Receive",'<>%1',0);
          //Counter += PurchaseLine.COUNT;
          //IF (Result = '') AND PurchaseLine.FINDFIRST THEN
          //  Result := FORMAT(PurchaseLine."Line No.");
          IF PurchaseLine.FINDSET THEN BEGIN
            REPEAT
              PurchaseLine.CALCFIELDS("Quantity Released");
              IF PurchaseLine.Quantity - PurchaseLine."Quantity Released" > 0 THEN BEGIN
                Counter += 1;
                IF Result = '' THEN
                  Result := FORMAT(PurchaseLine."Line No.");
              END;
            UNTIL PurchaseLine.NEXT = 0;
          END;
          //db.en, 19-04-10: M19111
        UNTIL PurchaseHeader.NEXT = 0;
      END;

      IF Counter > 1 THEN
        Result := STRSUBSTNO('<%1>',Counter);
    END;

    PROCEDURE NumberOfBlOrdersAdviceOrder@1100525017(VAR AdviceOrderLine@1100525002 : Record 11012055) Result : Code[20];
    VAR
      ServOrProj@1100530001 : Boolean;
    BEGIN
      WITH AdviceOrderLine DO BEGIN
        //Result := NumberOfBlOrders(Vendor,"Item No.","Trade Item");  //*23382.o
        //*23382.sn
        CASE "Contract Type" OF
          "Contract Type"::"Service Blanket Order":
            Result := NumberOfBlOrders(Vendor,"Item No.","Trade Item","Service Contract No.",'',FALSE);
          "Contract Type"::"Project Blanket Order":
            Result := NumberOfBlOrders(Vendor,"Item No.","Trade Item",'',"Project No.",FALSE);
          "Contract Type"::"General Blanket Order":
            BEGIN
              ServOrProj := ("Service Contract No." <> '') OR ("Project No." <> '');
              Result := NumberOfBlOrders(Vendor,"Item No.","Trade Item",'','',ServOrProj);
            END;
        END;
        //*23382.en
      END;
    END;

    PROCEDURE NumberOfBlOrdersReqLine@1100525023(VAR ReqLine@1100525002 : Record 246) Result : Code[20];
    VAR
      ServOrProj@1100530001 : Boolean;
      ItemNo@1100525000 : Code[20];
    BEGIN
      WITH ReqLine DO BEGIN
        IF Type = Type::Item THEN
          ItemNo := "No.";
        //Result := NumberOfBlOrders("Vendor No.",ItemNo,"Trade Item");  //*23382.o
        //*23382.sn
        CASE "Contract Type" OF
          "Contract Type"::"Service Blanket Order":
            Result := NumberOfBlOrders("Vendor No.",ItemNo,"Trade Item",GetServiceContract,'',FALSE);
          "Contract Type"::"Project Blanket Order":
            Result := NumberOfBlOrders("Vendor No.",ItemNo,"Trade Item",'',"Project No.",FALSE);
          "Contract Type"::"General Blanket Order":
            BEGIN
              ServOrProj := (GetServiceContract <> '') OR ("Project No." <> '');
              Result := NumberOfBlOrders("Vendor No.",ItemNo,"Trade Item",'','',ServOrProj);
            END;
        END;
        //*23382.en
      END;
    END;

    PROCEDURE NumberOfBlOrders@1100525022(VendorNo@1100525005 : Code[20];ItemNo@1100525004 : Code[20];TradeItemNo@1100525002 : Code[20];ServiceContractNo@1100530002 : Code[20];ProjectNo@1100530001 : Code[20];BlankFilter@1100530000 : Boolean) Result : Code[20];
    VAR
      PurchaseHeader@1100525000 : Record 38;
      PurchaseLine@1100525001 : Record 39;
      Counter@1100525003 : Integer;
      TmpPurchaseHeader@1100529400 : TEMPORARY Record 38;
    BEGIN
      IF (TradeItemNo = '') AND (ItemNo = '') THEN
        EXIT;

      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::"Blanket Order");
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",VendorNo);
      PurchaseHeader.SETFILTER(Status,'<>%1',PurchaseHeader.Status::Closed);
      IF PurchaseHeader.FINDSET THEN BEGIN
        REPEAT
          PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
          PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
          IF ItemNo <> '' THEN
            PurchaseLine.SETRANGE("Item No.",ItemNo);
          IF TradeItemNo <> '' THEN
            PurchaseLine.SETRANGE("Trade Item",TradeItemNo);
          //*23382.sn
          IF BlankFilter THEN BEGIN
            PurchaseLine.SETRANGE("Service Contract No.",ServiceContractNo);
            PurchaseLine.SETRANGE("Job No.",ProjectNo);
          END ELSE BEGIN
            IF ServiceContractNo <> '' THEN
              PurchaseLine.SETRANGE("Service Contract No.",ServiceContractNo);
            IF ProjectNo <> '' THEN
              PurchaseLine.SETRANGE("Job No.",ProjectNo);
          END;
          //*23382.en
          //db.sn, 19-04-10: M19111
          //PurchaseLine.SETFILTER("Qty. to Receive",'<>%1',0);
          //IF NOT PurchaseLine.ISEMPTY THEN BEGIN
          IF PurchaseLine.FINDSET THEN BEGIN
            REPEAT
              PurchaseLine.CALCFIELDS("Quantity Released");
              IF PurchaseLine.Quantity - PurchaseLine."Quantity Released" > 0 THEN BEGIN
                //Counter += 1;
                //db.sn, 23-09-16
                //PurchaseHeader.MARK(TRUE);
                TmpPurchaseHeader := PurchaseHeader;
                IF TmpPurchaseHeader.INSERT THEN;
                //db.sn, 23-09-16
                IF Result = '' THEN
                  Result := PurchaseHeader."No.";
              END;
            UNTIL PurchaseLine.NEXT = 0;
          END;
          //db.en, 19-04-10: M19111
        UNTIL PurchaseHeader.NEXT = 0;
        //db.sn, 19-04-10: M19111
        //PurchaseHeader.MARKEDONLY(TRUE);
        //Counter := PurchaseHeader.COUNT;
        //PurchaseHeader.MARKEDONLY(FALSE);
        //db.en, 19-04-10: M19111
        Counter := TmpPurchaseHeader.COUNT; //db, 23-09-16
      END;

      IF Counter > 1 THEN
        Result := STRSUBSTNO('<%1>',Counter);
    END;

    PROCEDURE QtyInBlanketOrdersReqLine@1100525011(RequisitionLine@1100525000 : Record 246) : Decimal;
    VAR
      ItemNo@1100525001 : Code[20];
      Quantity@1100525002 : Decimal;
    BEGIN
      WITH RequisitionLine DO BEGIN
        IF Type = Type::Item THEN
          ItemNo := "No.";
        Quantity := QuantityInBlanketOrders("Vendor No.",ItemNo,"Trade Item",'','',"Project No." = '');
      END;

      IF Quantity < 0 THEN
        Quantity := 0;
      EXIT(Quantity);
    END;

    PROCEDURE QtyInBlanketOrdersAdviceOrder@1100525014(AdviceOrderLine@1100525000 : Record 11012055) : Decimal;
    VAR
      Quantity@1100525002 : Decimal;
    BEGIN
      WITH AdviceOrderLine DO
        CASE AdviceOrderLine."Contract Type" OF
          AdviceOrderLine."Contract Type"::"General Blanket Order":
            Quantity := QuantityInBlanketOrders(Vendor,"Item No.","Trade Item",'','',FALSE);
          AdviceOrderLine."Contract Type"::"Service Blanket Order":
            Quantity := QuantityInBlanketOrders(Vendor,"Item No.","Trade Item","Service Contract No.",'',FALSE);
          AdviceOrderLine."Contract Type"::"Project Blanket Order":
            Quantity := QuantityInBlanketOrders(Vendor,"Item No.","Trade Item",'',"Project No.",FALSE);
          AdviceOrderLine."Contract Type"::"No Contract":
            Quantity := QuantityInBlanketOrders(Vendor,"Item No.","Trade Item","Service Contract No.","Project No.",FALSE);
        END;

      IF Quantity < 0 THEN
        Quantity := 0;
      EXIT(Quantity);
    END;

    PROCEDURE QuantityInBlanketOrders@1100525008(VendorNo@1100525001 : Code[20];ItemNo@1100525002 : Code[20];TradeItemNo@1100525003 : Code[20];ServiceContractNo@1100525004 : Code[20];ProjectNo@1100525005 : Code[20];BlankFilter@1100525006 : Boolean) Result : Decimal;
    VAR
      PurchaseHeader@1100525008 : Record 38;
      PurchaseLine@1100525007 : Record 39;
    BEGIN
      IF (ItemNo = '') AND (TradeItemNo = '') THEN
        EXIT(-1);

      //db.sn, 23-12-09: M17082
      PurchaseHeader.SETCURRENTKEY("Document Type", "Buy-from Vendor No.");  //db, 18-05-15: C022839
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::"Blanket Order");
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",VendorNo);
      PurchaseHeader.SETFILTER(Status,'<>%1',PurchaseHeader.Status::Closed);
      IF PurchaseHeader.FINDSET THEN BEGIN
        REPEAT
          PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
          PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
          //PurchaseLine.SETFILTER("Qty. to Receive",'<>%1',0);  //db, 19-04-10: M19111
          IF ItemNo <> '' THEN
            PurchaseLine.SETRANGE("Item No.",ItemNo);
          IF TradeItemNo <> '' THEN
            PurchaseLine.SETRANGE("Trade Item",TradeItemNo);

          IF BlankFilter THEN BEGIN
            PurchaseLine.SETRANGE("Service Contract No.",ServiceContractNo);
            PurchaseLine.SETRANGE("Job No.",ProjectNo);
          END ELSE BEGIN
            IF ServiceContractNo <> '' THEN
              PurchaseLine.SETRANGE("Service Contract No.",ServiceContractNo);
            IF ProjectNo <> '' THEN
              PurchaseLine.SETRANGE("Job No.",ProjectNo);
          END;
          IF PurchaseLine.FINDSET THEN BEGIN
            REPEAT
              //db.sn, 19-04-10: M19111
              //Result := Result + PurchaseLine."Qty. to Receive (Base)";
              PurchaseLine.CALCFIELDS("Quantity Released");
              IF PurchaseLine.Quantity - PurchaseLine."Quantity Released" > 0 THEN
                Result := Result + PurchaseLine.Quantity - PurchaseLine."Quantity Released";
              //db.en, 19-04-10: M19111
            UNTIL PurchaseLine.NEXT = 0;
          END;
        UNTIL PurchaseHeader.NEXT = 0;
      END;
      IF Result = 0 THEN
        EXIT(-1)
      ELSE
        EXIT(Result);
      //db.en, 23-12-09: M17082
      {
      //db.so, 23-12-09: M17082
      WITH BlanketOrderLine DO BEGIN
        SETCURRENTKEY("Document Type","Buy-from Vendor No.","Job No.","Service Contract No.","Item No.","Trade Item");
        SETRANGE("Document Type",BlanketOrderLine."Document Type"::"Blanket Order");
        SETRANGE("Buy-from Vendor No.",VendorNo);
        IF ItemNo <> '' THEN
          SETRANGE("Item No.",ItemNo);
        IF TradeItemNo <> '' THEN
          SETRANGE("Trade Item",TradeItemNo);

        IF BlankFilter THEN BEGIN
          SETRANGE("Service Contract No.",ServiceContractNo);
          SETRANGE("Job No.",ProjectNo);
        END ELSE BEGIN
          IF ServiceContractNo <> '' THEN
            SETRANGE("Service Contract No.",ServiceContractNo);
          IF ProjectNo <> '' THEN
            SETRANGE("Job No.",ProjectNo);
        END;

        CALCSUMS("Qty. to Receive (Base)");
        IF "Qty. to Receive (Base)" = 0 THEN
          EXIT(-1)
        ELSE
          EXIT("Qty. to Receive (Base)");
      END;
      //db.eo, 23-12-09: M17082
      }
    END;

    PROCEDURE LookupBlOrderLinesReqLine@1100525012(ReqLine@1100525000 : Record 246);
    VAR
      ItemNo@1100525001 : Code[20];
    BEGIN
      WITH ReqLine DO BEGIN
        IF Type = Type::Item THEN
          ItemNo := "No.";
        LookupBlanketOrderLine("Vendor No.",ItemNo,"Trade Item");
      END;
    END;

    PROCEDURE LookupBlOrderLinesAdviceOrder@1100525013(AdviceOrderLine@1100525001 : Record 11012055);
    BEGIN
      WITH AdviceOrderLine DO
        LookupBlanketOrderLine(Vendor,"Item No.","Trade Item");
    END;

    PROCEDURE LookupBlanketOrderLine@1100525015(VendorNo@1100525004 : Code[20];ItemNo@1100525003 : Code[20];TradeItemNo@1100525002 : Code[20]);
    VAR
      BlanketOrderLine@1100525005 : Record 39;
    BEGIN
      IF (ItemNo = '') AND (TradeItemNo = '') THEN
        EXIT;

      WITH BlanketOrderLine DO BEGIN
        SETRANGE("Document Type",BlanketOrderLine."Document Type"::"Blanket Order");
        SETRANGE("Buy-from Vendor No.",VendorNo);
        IF ItemNo <> '' THEN
          SETRANGE("Item No.",ItemNo);
        IF TradeItemNo <> '' THEN
          SETRANGE("Trade Item",TradeItemNo);
        SETFILTER("Purchase Order Status", '<>%1', "Purchase Order Status"::Closed);  //db, 23-12-09: M17082
        //db.sn, 19-04-10: M19111
        //SETFILTER("Qty. to Receive (Base)",'<>%1',0);
        IF FINDSET THEN BEGIN
          REPEAT
            CALCFIELDS("Quantity Released");
            IF Quantity - "Quantity Released" > 0 THEN BEGIN
              MARK(TRUE);
            END;
          UNTIL NEXT = 0;
        END;
        MARKEDONLY(TRUE);
        //db.en, 19-04-10: M19111
        PAGE.RUNMODAL(0,BlanketOrderLine);
      END;
    END;

    PROCEDURE LookupBlOrderReqLine@1100525025(ReqLine@1100525000 : Record 246);
    VAR
      ItemNo@1100525001 : Code[20];
    BEGIN
      WITH ReqLine DO BEGIN
        IF Type = Type::Item THEN
          ItemNo := "No.";
        LookupBlanketOrder("Vendor No.",ItemNo,"Trade Item");
      END;
    END;

    PROCEDURE LookupBlOrderAdviceOrder@1100525024(AdviceOrderLine@1100525001 : Record 11012055);
    BEGIN
      WITH AdviceOrderLine DO
        LookupBlanketOrder(Vendor,"Item No.","Trade Item");
    END;

    PROCEDURE LookupBlanketOrder@1100525020(VendorNo@1100525003 : Code[20];ItemNo@1100525002 : Code[20];TradeItemNo@1100525001 : Code[20]);
    VAR
      BlanketOrder@1100525005 : Record 38;
      BlanketOrderLine@1100525000 : Record 39;
    BEGIN
      IF (ItemNo = '') AND (TradeItemNo = '') THEN
        EXIT;

      BlanketOrder.SETRANGE("Document Type",BlanketOrder."Document Type"::"Blanket Order");
      BlanketOrder.SETRANGE("Buy-from Vendor No.",VendorNo);
      BlanketOrder.SETFILTER(Status,'<>%1',BlanketOrder.Status::Closed);
      IF BlanketOrder.FINDSET THEN BEGIN
        REPEAT
          BlanketOrderLine.SETRANGE("Document Type",BlanketOrder."Document Type");
          BlanketOrderLine.SETRANGE("Document No.",BlanketOrder."No.");
          IF ItemNo <> '' THEN
            BlanketOrderLine.SETRANGE("Item No.",ItemNo);
          IF TradeItemNo <> '' THEN
            BlanketOrderLine.SETRANGE("Trade Item",TradeItemNo);
          //db.sn, 19-04-10: M19111
          //BlanketOrderLine.SETFILTER("Qty. to Receive",'<>%1',0);
          //IF NOT BlanketOrderLine.ISEMPTY THEN
          //  BlanketOrder.MARK(TRUE);
          IF BlanketOrderLine.FINDSET THEN BEGIN
            REPEAT
              BlanketOrderLine.CALCFIELDS("Quantity Released");
              IF BlanketOrderLine.Quantity - BlanketOrderLine."Quantity Released" > 0 THEN BEGIN
                BlanketOrder.MARK(TRUE);
              END;
            UNTIL BlanketOrderLine.NEXT = 0;
          END;
          //db.en, 19-04-10: M19111
        UNTIL BlanketOrder.NEXT = 0;
        BlanketOrder.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(0,BlanketOrder);
      END;
    END;

    PROCEDURE IsLimitedPurchaser@1100525002(DocumentType@1100528400 : Integer) : Boolean;
    VAR
      PurchasesSetup@1100525002 : Record 312;
      UserSetup@1100525001 : Record 91;
      Purchaser@1100525000 : Record 13;
      PurchaseHeader@1100528401 : Record 38;
    BEGIN
      //no strategic purchasing for invoicing
      IF DocumentType = PurchaseHeader."Document Type"::Invoice THEN
        EXIT(FALSE);
      IF DocumentType = PurchaseHeader."Document Type"::"Credit Memo" THEN
        EXIT(FALSE);

      //strategic purchasing enabled?
      PurchasesSetup.GET;
      IF NOT PurchasesSetup."Strategic Purchasing" THEN
        EXIT(FALSE);

      //strategic purchasing enabled for Quotes?
      IF (DocumentType = PurchaseHeader."Document Type"::Quote) AND
         (NOT PurchasesSetup."Strategic Purch. for Quotes")
      THEN
        EXIT(FALSE);

      //is user a strategic purchasing?
      UserSetup.GET(USERID);
      IF Purchaser.GET(UserSetup.Purchaser) AND Purchaser."Strategic Purchaser" THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DiscountTermExists@1100525003(TradeItem@1100525000 : Record 11012317) : Boolean;
    VAR
      DiscountTermHistory@1100525001 : Record 11012312;
      ETIMVendor@1100525002 : Record 11012304;
      HGSCode@1100525003 : Code[35];
      lenHGS@1100525004 : Integer;
    BEGIN
      DiscountTermHistory.SETRANGE(Vendor,TradeItem.Vendor);
      DiscountTermHistory.SETRANGE("Item Code",TradeItem."Item Code");
      IF NOT DiscountTermHistory.ISEMPTY THEN
        EXIT(TRUE);

      IF TradeItem."Discount Group Code" = '' THEN
        EXIT(FALSE);

      DiscountTermHistory.SETRANGE("Item Code");
      DiscountTermHistory.SETRANGE(Vendor,TradeItem.Vendor);
      DiscountTermHistory.SETRANGE("Discount Group",TradeItem."Discount Group Code");
      DiscountTermHistory.SETRANGE("Discount Level",DiscountTermHistory."Discount Level"::Company);
      DiscountTermHistory.SETFILTER("Starting Date",'<=%1',WORKDATE);

      IF ETIMVendor.GET(TradeItem.Vendor) AND
        (ETIMVendor."Format Discount Term" = ETIMVendor."Format Discount Term"::Wildcard)
      THEN BEGIN
        HGSCode := TradeItem."Discount Group Code";
        lenHGS := STRLEN(HGSCode);
        WHILE (lenHGS > 0) AND DiscountTermHistory.ISEMPTY DO BEGIN
          DiscountTermHistory.SETFILTER("Discount Group",'%1',HGSCode + '*');
          lenHGS -= 1;
          IF lenHGS > 0 THEN
            HGSCode := COPYSTR(TradeItem."Discount Group Code",1,lenHGS);
        END;
      END;

      EXIT(NOT DiscountTermHistory.ISEMPTY);
    END;

    PROCEDURE GetVendorContract@1100525004(Vendor@1100525000 : Record 23;VAR CurrentContract@1100525001 : 'No Contract,Contract,Contract with Discount Agreement');
    BEGIN
      IF (Vendor."Blanket Contract Start Date" > WORKDATE) OR
        ((Vendor."Blanket Contract End Date" < WORKDATE) AND NOT (Vendor."Blanket Contract End Date" = 0D))
      THEN
        CurrentContract := CurrentContract::"No Contract"
      ELSE
        CurrentContract := Vendor."Blanket Contract Type";
    END;

    PROCEDURE VendorHasContract@1100525005(Vendor@1100525000 : Record 23) : Boolean;
    VAR
      CurrentContract@1100525001 : 'No Contract,Contract,Contract with Discount Agreement';
    BEGIN
      GetVendorContract(Vendor,CurrentContract);
      EXIT(CurrentContract <> CurrentContract::"No Contract");
    END;

    PROCEDURE CheckTradeItem@1100525018(TradeItemNo@1100525000 : Code[20];VendorTradeItem@1100525001 : Code[15];VendorNo@1100525004 : Code[20]);
    VAR
      TradeItem@1100525002 : Record 11012317;
      PurchaseHeader@1100528400 : Record 38;
      CurrentContract@1100525003 : 'No Contract,Contract,Contract with Discount Agreement';
      Vendor@1100525005 : Record 23;
      ErrorTradeItem@1100525006 : TextConst 'DEU=Es wurden keine Einkaufsbedingungen fÅr %1 gefunden. Sie kînnen diesen Handelsartikel nicht bestellen.;ENU=No purchase discounts found for %1. You can not order this item.;NLD=Geen inkoopcondities gevonden voor %1. U kunt dit handelsartikel niet inkopen.;NOR=Ingen innkjõpsrabatter funnet for %1. Du kan ikke bestille denne artikkelen.;SVE=Det gick inte att hitta nÜgra inkîpsrabatter fîr %1. Du kan inte bestÑlla den hÑr artikeln.';
      ErrorVendor@1100525007 : TextConst 'DEU=Kreditor %1 hat keinen gÅltigen Einkaufsvertrag. Sie kînnen bei diesem Kreditoren %1 nicht bestellen.;ENU=Vendor %1 has no valid contract. You can not order by vendor %1.;NLD=Leverancier %1 heeft geen geldig inkoopcontract. U kunt niet bestellen bij leverancier %1.;NOR=Leverandõr %1 har ingen gyldig kontrakt. Du kan ikke bestille fra leverandõr %1.;SVE=Leverantîr %1 har inget giltigt kontrakt. Du kan inte bestÑlla frÜn leverantîr %1.';
    BEGIN
      IF (VendorTradeItem <> '') AND Vendor.GET(VendorNo) AND
         IsLimitedPurchaser(PurchaseHeader."Document Type"::Order)
      THEN BEGIN
        TradeItem.GET(VendorTradeItem,TradeItemNo);
        TradeItem.SETRECFILTER;
        GetVendorContract(Vendor,CurrentContract);
        IF CurrentContract = CurrentContract::"No Contract" THEN
          ERROR(STRSUBSTNO(ErrorVendor,VendorNo));
        IF (CurrentContract = CurrentContract::"Contract with Discount Agreement") AND
          NOT DiscountTermExists(TradeItem)
        THEN
          ERROR(STRSUBSTNO(ErrorTradeItem,TradeItem.GETFILTERS));
      END;
    END;

    BEGIN
    END.
  }
}

