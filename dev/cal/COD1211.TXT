OBJECT Codeunit 1211 Payment Export Gen. Jnl Check
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,NAVDK;
  }
  PROPERTIES
  {
    TableNo=81;
    OnRun=BEGIN
            CheckPaymentExportGenJnl(Rec);
          END;

  }
  CODE
  {
    VAR
      EmptyPaymentDetailsErr@1002 : TextConst '@@@="%1=Field;%2=Field";ENU=%1 or %2 must be used for payments.;NOR=%1 eller %2 m† brukes ved betaling.;SVE=%1 eller %2 m†ste anv„ndas f”r betalningar.';
      SimultaneousPaymentDetailsErr@1000 : TextConst '@@@="%1=Field;%2=Field";ENU=%1 and %2 cannot be used simultaneously for payments.;NOR=%1 og %2 kan ikke brukes samtidig ved betaling.;SVE=%1 och %2 kan inte anv„ndas samtidigt f”r betalningar.';
      WrongBalAccountErr@1001 : TextConst '@@@="%1=Field;%1=Table;%3=Value;%4=Table;%5=Value";ENU=%1 for the %2 is different from %3 on %4: %5.;NOR=%1 for %2 er forskjellig fra %3 p† %4: %5.;SVE=%1 f”r %2 skiljer sig fr†n %3 p† %4: %5.';
      MustBeVendorEmployeeOrCustomerErr@1005 : TextConst 'ENU=The account must be a vendor, customer or employee account.;NOR=Kontoen m† v‘re en leverand›r-, kunde- eller ansattkonto.;SVE=Kontot m†ste vara ett leverant”rskonto, kundkonto eller personalkonto.';
      MustBeVendEmplPmtOrCustRefundErr@1008 : TextConst 'ENU=Only vendor and employee payments and customer refunds are allowed.;NOR=Bare leverand›r- og ansattbetalinger og kunderefusjoner er tillatt.;SVE=Endast kund†terbetalningar och leverant”rs- och personalbetalningar till†ts.';
      MustBePositiveErr@1011 : TextConst 'ENU=The amount must be positive.;NOR=Bel›pet m† v‘re positivt.;SVE=Beloppet m†ste vara positivt.';
      FieldBlankErr@1007 : TextConst '@@@="%1=table name, %2=field name. Example: Customer must have a value in Name.";ENU=%1 must have a value in %2.;NOR=%1 m† ha en verdi i %2.;SVE=%1 m†ste ha ett v„rde i %2.';
      FieldKeyBlankErr@1006 : TextConst '@@@="%1=table name, %2=key field value, %3=field name. Example: Customer 10000 must have a value in Name.";ENU=%1 %2 must have a value in %3.;NOR=%1 %2 m† ha en verdi i %3.;SVE=%1 %2 m†ste ha ett v„rde i %3.';
      TempGenJournalBatch@1003 : TEMPORARY Record 232;
      WrongBankPaymentTypeErr@1004 : TextConst '@@@="%1=Bank Payment Type field caption, %2=Electronic Payment bank payment type, %3=Electronic Payment-IAT bank payment type";ENU=%1 must be either %2 or %3.;NOR=%1 m† v‘re %2 eller %3.';
      PaymentTypeShouldBeErr@1060002 : TextConst 'ENU=%1 should be %2 in %3.';
      PaymentTypeShouldNotBeErr@1060004 : TextConst 'ENU=%1 should not be %2 in %3.';
      MustBeVendorPmtErr@1060005 : TextConst 'ENU=The selected export format only supports vendor payments.';
      WrongCreditorCurrencyErr@1060001 : TextConst '@@@="%1=Field;%2=Table;%3=Value";ENU=%1 for one or more %2 is incorrect. You can only use %3.';
      WrongTransferCurrencyErr@1060000 : TextConst '@@@="%1=Field;%2=Table;%3=Value;%4=Value";ENU=%1 for one or more %2 is incorrect. You can only use %3 or %4.';

    LOCAL PROCEDURE CheckPaymentExportGenJnl@1213(VAR GenJournalLine@1000 : Record 81);
    VAR
      GenJnlBatch@1001 : Record 232;
      Handled@1213 : Boolean;
      PaymentMethod@1060000 : Record 289;
      VendBankAcc@1060003 : Record 288;
      PmtExportMgt@1060005 : Codeunit 1210;
      CustomerBankAcc@1060004 : Record 287;
    BEGIN
      WITH GenJournalLine DO BEGIN
        DeletePaymentFileErrors;
        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");

        IF NOT TempGenJournalBatch.GET("Journal Template Name","Journal Batch Name") THEN
          CheckGenJournalBatch(GenJournalLine,GenJnlBatch);

        IF "Payment Method Code" = '' THEN
          AddFieldEmptyError(GenJournalLine,TABLECAPTION,FIELDCAPTION("Payment Method Code"),'');

        IF ("Recipient Bank Account" <> '') AND ("Creditor No." <> '') THEN
          InsertPaymentFileError(STRSUBSTNO(SimultaneousPaymentDetailsErr,
              FIELDCAPTION("Recipient Bank Account"),FIELDCAPTION("Creditor No.")));

        IF "Bal. Account Type" <> "Bal. Account Type"::"Bank Account" THEN
          InsertPaymentFileError(STRSUBSTNO(WrongBalAccountErr,FIELDCAPTION("Bal. Account Type"),
              TABLECAPTION,"Bal. Account Type"::"Bank Account",GenJnlBatch.TABLECAPTION,GenJnlBatch.Name));

        IF "Bal. Account No." <> GenJnlBatch."Bal. Account No." THEN
          InsertPaymentFileError(STRSUBSTNO(WrongBalAccountErr,FIELDCAPTION("Bal. Account No."),
              TABLECAPTION,GenJnlBatch."Bal. Account No.",GenJnlBatch.TABLECAPTION,GenJnlBatch.Name));

        IF Amount <= 0 THEN
          InsertPaymentFileError(MustBePositiveErr);

        IF (("Account Type" = "Account Type"::"Bank Account") OR
            ("Bal. Account Type" = "Bal. Account Type"::"Bank Account")) AND
           (("Bank Payment Type" <> "Bank Payment Type"::"Electronic Payment") AND
            ("Bank Payment Type" <> "Bank Payment Type"::"Electronic Payment-IAT"))
        THEN
          InsertPaymentFileError(STRSUBSTNO(WrongBankPaymentTypeErr,FIELDCAPTION("Bank Payment Type"),
              "Bank Payment Type"::"Electronic Payment","Bank Payment Type"::"Electronic Payment-IAT"));

        OnPaymentExportGenJnlCheck(GenJournalLine,Handled);
        IF NOT Handled THEN BEGIN
          IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::Employee])
          THEN
            InsertPaymentFileError(MustBeVendorEmployeeOrCustomerErr);

          IF (("Account Type" = "Account Type"::Vendor) AND
              ("Document Type" <> "Document Type"::Payment)) OR
             (("Account Type" = "Account Type"::Customer) AND
              ("Document Type" <> "Document Type"::Refund)) OR
             (("Account Type" = "Account Type"::Employee) AND
              ("Document Type" <> "Document Type"::Payment))
          THEN
            InsertPaymentFileError(MustBeVendEmplPmtOrCustRefundErr);

          IF NOT ("Account Type" = "Account Type"::Employee) AND
             ("Recipient Bank Account" = '') AND ("Creditor No." = '')
          THEN
            InsertPaymentFileError(STRSUBSTNO(EmptyPaymentDetailsErr,
                FIELDCAPTION("Recipient Bank Account"),FIELDCAPTION("Creditor No.")));
          //>>NAVDK
          IF ("Recipient Bank Account" <> '') AND ("Giro Acc. No." <> '') THEN
            InsertPaymentFileError(STRSUBSTNO(SimultaneousPaymentDetailsErr,
                FIELDCAPTION("Recipient Bank Account"),FIELDCAPTION("Giro Acc. No.")));

          IF ("Creditor No." <> '') AND ("Payment Reference" = '') THEN BEGIN
            IF PaymentMethod.GET("Payment Method Code") THEN
              IF PaymentMethod."Payment Type Validation" = PaymentMethod."Payment Type Validation"::"FIK 71" THEN
                AddFieldEmptyError(GenJournalLine,TABLECAPTION,FIELDCAPTION("Payment Reference"),'');
          END;

          IF ("Giro Acc. No." <> '') AND ("Payment Reference" = '') THEN BEGIN
            IF PaymentMethod.GET("Payment Method Code") THEN
              IF PaymentMethod."Payment Type Validation" = PaymentMethod."Payment Type Validation"::"FIK 04" THEN
                AddFieldEmptyError(GenJournalLine,TABLECAPTION,FIELDCAPTION("Payment Reference"),'');
          END;

          CASE "Account Type" OF
            "Account Type"::Vendor:
              IF VendBankAcc.GET("Account No.","Recipient Bank Account") THEN
                CheckBankTransferCountryRegion(GenJournalLine,VendBankAcc."Country/Region Code");
              "Account Type"::Customer:
                IF CustomerBankAcc.GET("Account No.","Recipient Bank Account") THEN
                  CheckBankTransferCountryRegion(GenJournalLine,CustomerBankAcc."Country/Region Code");
          END;
          //>>NAVDK
        END;
      END;
    END;

    [External]
    PROCEDURE AddFieldEmptyError@1(VAR GenJnlLine@1000 : Record 81;TableCaption@1001 : Text;FieldCaption@1002 : Text;KeyValue@1003 : Text);
    VAR
      ErrorText@1004 : Text;
    BEGIN
      IF KeyValue = '' THEN
        ErrorText := STRSUBSTNO(FieldBlankErr,TableCaption,FieldCaption)
      ELSE
        ErrorText := STRSUBSTNO(FieldKeyBlankErr,TableCaption,KeyValue,FieldCaption);
      GenJnlLine.InsertPaymentFileError(ErrorText);
    END;

    [External]
    PROCEDURE AddBatchEmptyError@19(VAR GenJnlLine@1000 : Record 81;FieldCaption@1003 : Text;KeyValue@1002 : Variant);
    VAR
      GenJnlBatch@1001 : Record 232;
    BEGIN
      AddFieldEmptyError(GenJnlLine,GenJnlBatch.TABLECAPTION,FieldCaption,FORMAT(KeyValue));
    END;

    LOCAL PROCEDURE CheckGenJournalBatch@2(GenJournalLine@1001 : Record 81;GenJournalBatch@1000 : Record 232);
    VAR
      BankAccount@1002 : Record 270;
    BEGIN
      TempGenJournalBatch := GenJournalBatch;
      TempGenJournalBatch.INSERT;

      GenJournalBatch.OnCheckGenJournalLineExportRestrictions;

      IF NOT GenJournalBatch."Allow Payment Export" THEN
        AddBatchEmptyError(GenJournalLine,GenJournalBatch.FIELDCAPTION("Allow Payment Export"),'');

      IF GenJournalBatch."Bal. Account Type" <> GenJournalBatch."Bal. Account Type"::"Bank Account" THEN
        AddBatchEmptyError(GenJournalLine,GenJournalBatch.FIELDCAPTION("Bal. Account Type"),GenJournalBatch."Bal. Account Type");

      IF GenJournalBatch."Bal. Account No." = '' THEN
        AddBatchEmptyError(GenJournalLine,GenJournalBatch.FIELDCAPTION("Bal. Account No."),GenJournalBatch."Bal. Account No.");

      IF BankAccount.GET(GenJournalBatch."Bal. Account No.") THEN
        IF BankAccount."Payment Export Format" = '' THEN
          GenJournalLine.InsertPaymentFileError(
            STRSUBSTNO(FieldBlankErr,BankAccount.FIELDCAPTION("Payment Export Format"),BankAccount.TABLECAPTION));
    END;

    [Integration]
    LOCAL PROCEDURE OnPaymentExportGenJnlCheck@1215(VAR GenJournalLine@1213 : Record 81;VAR Handled@1217 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE CheckBankTransferCountryRegion@1060005(GenJournalLine@1060000 : Record 81;RecipientBankAccCountryRegionCode@1060001 : Code[10]);
    VAR
      BankAccount@1060002 : Record 270;
      PaymentMethod@1060003 : Record 289;
      CompanyInformation@1060004 : Record 79;
    BEGIN
      //NAVDK
      CompanyInformation.GET;
      WITH GenJournalLine DO
        IF PaymentMethod.GET("Payment Method Code") AND BankAccount.GET("Bal. Account No.") THEN
          IF PaymentMethod."Payment Type Validation" <> PaymentMethod."Payment Type Validation"::" " THEN
            IF CompanyInformation.GetCountryRegionCode(BankAccount."Country/Region Code") <>
               CompanyInformation.GetCountryRegionCode(RecipientBankAccCountryRegionCode) THEN BEGIN
                IF PaymentMethod."Payment Type Validation" <> PaymentMethod."Payment Type Validation"::International THEN
                  InsertPaymentFileError(STRSUBSTNO(PaymentTypeShouldBeErr,PaymentMethod.FIELDCAPTION("Payment Type Validation"),
                    PaymentMethod."Payment Type Validation"::International,PaymentMethod.TABLECAPTION));
            END ELSE
              IF PaymentMethod."Payment Type Validation" = PaymentMethod."Payment Type Validation"::International THEN
                InsertPaymentFileError(STRSUBSTNO(PaymentTypeShouldNotBeErr,PaymentMethod.FIELDCAPTION("Payment Type Validation"),
                PaymentMethod."Payment Type Validation"::International,PaymentMethod.TABLECAPTION));
    END;

    PROCEDURE CheckFormatSpecificPaymentRules@1060009(GenJournalLine@1060002 : Record 81);
    VAR
      EuroCurrency@1060001 : Record 4;
      GeneralLedgerSetup@1060000 : Record 98;
    BEGIN
      //NAVDK
      GeneralLedgerSetup.GET;
      EuroCurrency.SETRANGE("EMU Currency",TRUE);
      EuroCurrency.FINDFIRST;

      WITH GenJournalLine DO BEGIN
        IF "Account Type" <> "Account Type"::Vendor THEN
          InsertPaymentFileError(MustBeVendorPmtErr);

        IF ("Recipient Bank Account" <> '') AND (("Currency Code" <> '') AND ("Currency Code" <> EuroCurrency.Code)) THEN
          InsertPaymentFileError(STRSUBSTNO(WrongTransferCurrencyErr,
            FIELDCAPTION("Currency Code"),TABLECAPTION,GeneralLedgerSetup."LCY Code",EuroCurrency.Code));

        IF ("Creditor No." <> '') AND ("Currency Code" <> '') THEN
          InsertPaymentFileError(STRSUBSTNO(WrongCreditorCurrencyErr,
            FIELDCAPTION("Currency Code"),TABLECAPTION,GeneralLedgerSetup."LCY Code"));

        IF ("Giro Acc. No." <> '') AND ("Currency Code" <> '') THEN
          InsertPaymentFileError(STRSUBSTNO(WrongCreditorCurrencyErr,
            FIELDCAPTION("Currency Code"),TABLECAPTION,GeneralLedgerSetup."LCY Code"));
      END;
    END;

    BEGIN
    END.
  }
}

