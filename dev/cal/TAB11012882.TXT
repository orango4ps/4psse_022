OBJECT Table 11012882 Service Text
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Created by Employee No." := '';
               "Created by Employee Company" := '';
               VALIDATE("Created by", USERID);
               "Line Break":= TRUE;  //db, 17-04-15: C015518
             END;

    CaptionML=[ENU=Service Text;
               NOR=Servicetekst;
               SVE=Servicetext];
  }
  FIELDS
  {
    { 1   ;   ;Table Name          ;Option        ;CaptionML=[ENU=Table Name;
                                                              NOR=Tabellnavn;
                                                              SVE=Tabellnamn];
                                                   OptionCaptionML=ENU=Service Location,Service Contract,Service Call,Service Order,,,Building,,,Change Request,,,,Glazing Service Call,SO Confirm. Letter,,Service Portal,Service Portal Customer,Subcont.Portal,Subcont.Port.Vendor,Modification;
                                                   OptionString=Service Location,Service Contract,Service Call,Service Order,,,Building,,,Change Request,,,,Glazing Service Call,SO Confirm. Letter,,Service Portal,Service Portal Customer,Subcont.Portal,Subcont.Port.Vendor,Object Modification }
    { 2   ;   ;No.                 ;Code20        ;TableRelation=IF (Table Name=CONST(Service Location)) "Service Location"
                                                                 ELSE IF (Table Name=CONST(Service Contract)) Service-Contract
                                                                 ELSE IF (Table Name=CONST(Glazing Service Call)) "Glazing Service Call"
                                                                 ELSE IF (Table Name=CONST(Building)) Building;
                                                   CaptionML=[ENU=No.;
                                                              NOR=Nr;
                                                              SVE=Nr] }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 4   ;   ;Date                ;Date          ;CaptionML=[ENU=Date;
                                                              NOR=Dato;
                                                              SVE=Datum] }
    { 5   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod] }
    { 6   ;   ;Comment             ;Text80        ;CaptionML=[ENU=Comment;
                                                              NOR=Kommentar;
                                                              SVE=Kommentar] }
    { 7   ;   ;Table Field         ;Integer       ;CaptionML=[ENU=Table Field;
                                                              NOR=Tabellfelt;
                                                              SVE=Tabellf„lt] }
    { 8   ;   ;Time Created        ;Time          ;CaptionML=[ENU=Time;
                                                              NOR=Tid;
                                                              SVE=Tid] }
    { 9   ;   ;Created by          ;Code50        ;TableRelation=User."User Name";
                                                   OnValidate=VAR
                                                                UserSetup@1100525000 : Record 91;
                                                              BEGIN
                                                                IF UserSetup.GET("Created by") THEN
                                                                  "Created by Employee No." := UserSetup."Employee No.";
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Created by;
                                                              NOR=Opprettet av;
                                                              SVE=Skapad av];
                                                   Editable=No }
    { 20  ;   ;Active in FSA       ;Boolean       ;CaptionML=[ENU=Available for Field Service;
                                                              SVE=Tillg„nglig f”r f„ltservice] }
    { 100 ;   ;Created by Employee No.;Code20     ;TableRelation=IF (Created by Employee Company=FILTER('')) Employee;
                                                   CaptionML=[ENU=Created by Employee No.;
                                                              NOR=Opprettet av ansatt nr.;
                                                              SVE=Skapat av anst„lld nr];
                                                   Editable=No }
    { 110 ;   ;Created by Employee Company;Text30 ;TableRelation=Company;
                                                   CaptionML=[ENU=Created by Employee Company;
                                                              SVE=Skapat av anst„lld f”retag];
                                                   Editable=No }
    { 11012010;;Line Break         ;Boolean       ;CaptionML=[ENU=Line Break;
                                                              NOR=Radbrytning;
                                                              SVE=Radbrytning] }
    { 11012020;;Created DateTime   ;DateTime      ;CaptionML=ENU=Created Date Time;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Table Name,No.,Table Field,Line No.     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100529600 : TextConst 'ENU=Not enough space to insert text lines, not all text lines are added.;NOR=Det finnes ikke tilstrekkelig med plass for † sette inn tekstrader. ikke alle tekstrader legges til.;SVE=Det finns inte tillr„ckligt med utrymme f”r att infoga textrader. Inte alla textrader l„ggs till.';

    PROCEDURE SetUpNewLine@1();
    VAR
      CommentLine@1100525000 : Record 11012882;
    BEGIN
      CommentLine.SETRANGE("Table Name","Table Name");
      CommentLine.SETRANGE("Table Field","Table Field");
      CommentLine.SETRANGE("No.","No.");
      CommentLine.SETRANGE(Date,WORKDATE);
      IF NOT CommentLine.FINDFIRST THEN BEGIN
        Date := WORKDATE;
        "Time Created" := TIME;
        "Created DateTime" := CREATEDATETIME(Date, "Time Created");
      END;
    END;

    PROCEDURE CopyServiceTexts@1210190000(FromTableName@1210190000 : Integer;FromNo@1210190001 : Code[20];FromTableField@1210190002 : Integer;ToTableName@1210190003 : Integer;ToNo@1210190004 : Code[20];ToTableField@1210190005 : Integer);
    VAR
      FromServiceText@1210190006 : Record 11012882;
      ToServiceText@1210190007 : Record 11012882;
      ServiceTextLineNo@1100529600 : Integer;
    BEGIN
      // jhoek.190511
      FromServiceText.SETRANGE("Table Name", FromTableName);
      FromServiceText.SETRANGE("No.", FromNo);
      FromServiceText.SETRANGE("Table Field", FromTableField);
      IF FromServiceText.ISEMPTY THEN
        EXIT;

      ToServiceText.SETRANGE("Table Name", ToTableName);
      ToServiceText.SETRANGE("No.", ToNo);
      ToServiceText.SETRANGE("Table Field", ToTableField);
      IF ToServiceText.FINDLAST THEN
        ServiceTextLineNo := ToServiceText."Line No.";

      FromServiceText.FINDSET;
      REPEAT
        ServiceTextLineNo += 10000;
        ToServiceText := FromServiceText;
        ToServiceText."Table Name" := ToTableName;
        ToServiceText."No." := ToNo;
        ToServiceText."Table Field" := ToTableField;
        ToServiceText."Line No." := ServiceTextLineNo;
        ToServiceText.INSERT;
      UNTIL FromServiceText.NEXT = 0;
    END;

    LOCAL PROCEDURE GetServiceText@1100528102(Table@1100528104 : 'Service Location,Service Contract,Service Call,Service Order,,,Building,,,Change Request,,,,Glazing Service Call,SO Confirm. Letter,,Service Portal,Service Portal Customer,Subcont.Portal,Subcont.Port.Vendor';TableFieldNo@1100528100 : Integer;No@1100528103 : Code[20];ActiveInFSA@1100528105 : Boolean) : Text;
    VAR
      Text@1100528101 : Text;
      LineSeparator@1100528102 : Text;
    BEGIN
      Text := '';
      SETRANGE("Table Name", Table);
      SETRANGE("No.", No);
      SETRANGE("Table Field", TableFieldNo);
      IF ActiveInFSA THEN
        SETRANGE("Active in FSA",TRUE);

      IF FINDSET() THEN
        REPEAT
          Text += LineSeparator + Comment;

          IF "Line Break" THEN
            LineSeparator := LineBreak
          ELSE
            LineSeparator := ' ';
        UNTIL NEXT = 0;

      EXIT(Text);
    END;

    LOCAL PROCEDURE LineBreak@1100525000() : Text;
    VAR
      CRLF@1100525000 : Text[2];
    BEGIN
      CRLF[1] := 13;
      CRLF[2] := 10;
      EXIT(CRLF);
    END;

    PROCEDURE GetServiceOrderText@1100528100(TableFieldNo@1100528101 : Integer;"No."@1100528100 : Code[20];ActiveInFSA@1100528102 : Boolean) : Text;
    BEGIN
      EXIT(GetServiceText("Table Name"::"Service Order",TableFieldNo,"No.",ActiveInFSA));
    END;

    PROCEDURE GetServiceLocationText@1100528101(TableFieldNo@1100528101 : Integer;"No."@1100528100 : Code[20];ActiveInFSA@1100528102 : Boolean) : Text;
    BEGIN
      EXIT(GetServiceText("Table Name"::"Service Location",TableFieldNo,"No.",ActiveInFSA));
    END;

    PROCEDURE GetServiceContractText@1100528103(TableFieldNo@1100528101 : Integer;"No."@1100528100 : Code[20];ActiveInFSA@1100528102 : Boolean) : Text;
    BEGIN
      EXIT(GetServiceText("Table Name"::"Service Contract",TableFieldNo,"No.",ActiveInFSA));
    END;

    PROCEDURE FillDefaultValueOfActiveInFSA@1100528400();
    BEGIN
      "Active in FSA" := GetDefaultValueOfActiveInFSA();
    END;

    PROCEDURE GetDefaultValueOfActiveInFSA@1100528600() : Boolean;
    BEGIN
      CASE "Table Name" OF
        "Table Name"::"Service Call":
          IF "Table Field" IN [60, 70, 75] THEN // Problem, Internal, Solution
            EXIT(TRUE);
        "Table Name"::"Service Order":
          IF "Table Field" IN [90, 91, 92, 94] THEN // Problem, Internal, Solution, Cause
            EXIT(TRUE);
      END;
    END;

    PROCEDURE LookupCode@1100529600(PageIsEditable@1100529600 : Boolean;VAR NewCode@1100529602 : Code[10]);
    VAR
      StandardText@1100529601 : Record 7;
      ServiceAnalysis@1100527000 : Record 11012842;
      PageNumber@1100527001 : Integer;
    BEGIN
      IF "Table Name" = "Table Name"::"Service Order" THEN BEGIN
        CASE "Table Field" OF
          90:
            PageNumber := PAGE::"Service Analysis (Problem)";
          92:
            PageNumber := PAGE::"Service Analysis (Solution)";
          94:
            PageNumber := PAGE::"Service Analysis (Cause)";
        END;
        IF PageNumber <> 0 THEN BEGIN
          ServiceAnalysis.Code := NewCode;
          IF PAGE.RUNMODAL(PageNumber, ServiceAnalysis) = ACTION::LookupOK THEN
            IF PageIsEditable AND (ServiceAnalysis.Code <> NewCode) AND (ServiceAnalysis.Code <> '') THEN
              Code := ServiceAnalysis.Code;
          EXIT;
        END;
      END;

      IF NewCode <> '' THEN
        IF StandardText.GET(NewCode) THEN;

      IF PAGE.RUNMODAL(0, StandardText) = ACTION::LookupOK THEN
        IF PageIsEditable AND (StandardText.Code <> NewCode) AND (StandardText.Code <> '') THEN
          NewCode := StandardText.Code;
    END;

    PROCEDURE GetStandardText@1100529601(VAR ServiceText@1100529600 : Record 11012882) : Boolean;
    VAR
      StandardText@1100529602 : Record 7;
      ExtendedTextLine@1100529603 : Record 280;
      NewServiceText@1100529604 : Record 11012882;
      CurrLineNo@1100529605 : Integer;
      LineStep@1100529601 : Integer;
    BEGIN
      IF ServiceText.Code = '' THEN
        EXIT(FALSE);

      IF NOT StandardText.GET(ServiceText.Code) THEN
        EXIT(FALSE);

      IF StandardText.Description <> '' THEN BEGIN
        ServiceText.Comment := COPYSTR(StandardText.Description, 1, MAXSTRLEN(ServiceText.Comment));
        ServiceText.MODIFY;
      END;

      ExtendedTextLine.SETRANGE("Table Name", ExtendedTextLine."Table Name"::"Standard Text");
      ExtendedTextLine.SETRANGE("No.", ServiceText.Code);
      IF ExtendedTextLine.ISEMPTY THEN
        EXIT(TRUE);

      CurrLineNo := ServiceText."Line No.";

      NewServiceText.SETRANGE("Table Name", ServiceText."Table Name");
      NewServiceText.SETRANGE("No.", ServiceText."No.");
      NewServiceText.SETRANGE("Table Field", ServiceText."Table Field");
      NewServiceText.SETFILTER("Line No.", '>%1', CurrLineNo);
      IF NewServiceText.FINDFIRST THEN BEGIN
        LineStep := ROUND((NewServiceText."Line No." - CurrLineNo) / (ExtendedTextLine.COUNT + 1), 1, '<');
        IF LineStep = 0 THEN
          LineStep := 1;
      END ELSE
        LineStep := 10000;
      NewServiceText.RESET;

      ExtendedTextLine.FINDSET;
      REPEAT
        CurrLineNo += LineStep;
        IF NewServiceText.GET(ServiceText."Table Name", ServiceText."No.", ServiceText."Table Field", CurrLineNo) THEN BEGIN
          MESSAGE(Text001);
          EXIT(TRUE);
        END;
        NewServiceText := ServiceText;
        NewServiceText.Comment := COPYSTR(ExtendedTextLine.Text, 1, MAXSTRLEN(NewServiceText.Comment));
        NewServiceText."Line No." := CurrLineNo;
        NewServiceText.Date := 0D;
        NewServiceText.Code := '';
        NewServiceText.INSERT;
      UNTIL ExtendedTextLine.NEXT = 0;

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

