OBJECT Page 11130776 App Replication Message
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[DEU=App-Replikationsmeldung;
               ENU=App Replication Message;
               NLD=App replicatiebericht];
    InsertAllowed=No;
    SourceTable=Table11130032;
    PageType=Card;
    ActionList=ACTIONS
    {
      { 1100528016;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100528017;1 ;ActionGroup;
                      CaptionML=[DEU=F&unktion;
                                 ENU=F&unctions;
                                 NLD=F&uncties];
                      Image=Action }
      { 1100528018;2 ;Action    ;
                      Name=Post;
                      CaptionML=[DEU=Buchen;
                                 ENU=Post;
                                 NLD=Boeken];
                      Promoted=Yes;
                      Image=Post;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 AppReplicationMsgManager@1100528001 : Codeunit 11130047;
                               BEGIN
                                 IF (Status = Status::Error) THEN
                                   AppReplicationMsgManager.ProcessReplicationMessage(Rec)
                                 ELSE
                                   TESTFIELD(Status, Status::Error);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100528000;0;Container;
                ContainerType=ContentArea }

    { 1100528001;1;Group  ;
                Name=General;
                GroupType=Group }

    { 1100528002;2;Field  ;
                SourceExpr="Seq. No." }

    { 1100528003;2;Field  ;
                SourceExpr=App }

    { 1100528004;2;Field  ;
                SourceExpr="Request Type" }

    { 1100528005;2;Field  ;
                SourceExpr=Status }

    { 1100528014;2;Field  ;
                SourceExpr="Sent by" }

    { 1100528015;2;Field  ;
                SourceExpr="Sent at" }

    { 1100528006;2;Field  ;
                SourceExpr="Queued at" }

    { 1100528007;2;Field  ;
                SourceExpr="Processed at" }

    { 1100528008;1;Group  ;
                Name=Data;
                GroupType=Group }

    { 1100528009;2;Field  ;
                AssistEdit=Yes;
                SourceExpr=GetRequestDataUTF8;
                MultiLine=Yes;
                OnAssistEdit=VAR
                               AppReplicationMessageData@1100528000 : Page 11130782;
                               TempBlob@1100528002 : Record 99008535;
                               TempXMLBuffer@1100528001 : TEMPORARY Record 1235;
                               XMLBufferWriter@1100528003 : Codeunit 1235;
                               XMLBufferReader@1100528005 : Codeunit 1239;
                               BaseLib@1100528009 : Codeunit 11130048;
                               XMLOutStream@1100528004 : OutStream;
                               XmlDocument@1100528006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
                               JsonConvert@1100528007 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonConvert";
                               Formatting@1100528015 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Formatting";
                               JsonText@1100528008 : Text;
                             BEGIN
                               TempBlob.INIT;
                               TempBlob.Blob.CREATEOUTSTREAM(XMLOutStream);
                               IF NOT JsonToXML(GetRequestDataUTF8, XMLOutStream, TRUE) THEN
                                 ERROR(Text001);
                               XMLBufferWriter.GenerateStructure(TempXMLBuffer, XMLOutStream);
                               AppReplicationMessageData.SetTempTable(TempXMLBuffer);
                               AppReplicationMessageData.EDITABLE(Status = Status::Error);
                               AppReplicationMessageData.RUNMODAL;
                               IF (AppReplicationMessageData.GetApplyChanges) THEN BEGIN
                                 AppReplicationMessageData.GetTempTable(TempXMLBuffer);
                                 IF NOT TempXMLBuffer.FINDFIRST THEN
                                   EXIT;
                                 XMLBufferReader.SaveToXMLDocument(TempXMLBuffer,XmlDocument,'UTF-8');
                                 JsonText := JsonConvert.SerializeXmlNode(XmlDocument.DocumentElement, Formatting.Indented, TRUE);
                                 SetRequestData(BaseLib.ConvertUTF8ToBase64(JsonText));
                                 CurrPage.UPDATE;
                               END;
                             END;
                              }

    { 1100528010;1;Group  ;
                Name=Result;
                GroupType=Group }

    { 1100528011;2;Field  ;
                SourceExpr=GetResponseDataUTF8;
                MultiLine=Yes }

    { 1100528012;1;Group  ;
                Name=Error;
                GroupType=Group }

    { 1100528013;2;Field  ;
                SourceExpr="Last Error" }

  }
  CODE
  {
    VAR
      Text001@1100528000 : TextConst 'DEU=Daten k”nnen nicht gelesen werden.;ENU=Cannot read data.;NLD=Data kan niet worden gelezen.';

    [TryFunction]
    PROCEDURE JsonToXML@1(JsonText@1000 : Text;VAR XMLOutStream@1001 : OutStream;AddRoot@1100528001 : Boolean);
    VAR
      JsonConvert@1100528000 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonConvert";
      XmlDocument@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF AddRoot THEN
        XmlDocument := JsonConvert.DeserializeXmlNode(JsonText, 'Root')
      ELSE
        XmlDocument := JsonConvert.DeserializeXmlNode(JsonText);
      XmlDocument.Save(XMLOutStream);
    END;

    BEGIN
    END.
  }
}

