OBJECT Page 11012187 Transfer Estimate to Project
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 11012151=rm,
                TableData 11072072=rm,
                TableData 11072073=rm,
                TableData 11072074=rm,
                TableData 11072075=rm;
    CaptionML=[ENU=Transfer Estimate to Project;
               NOR=Overf›r kalkyle til prosjekt;
               SVE=™verf”r kalkyl till projekt];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table11012151;
    PageType=NavigatePage;
    OnOpenPage=BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
                 InitSelection;  //db, 30-01-17
                 EstRec.GET("No.");
                 ProjTo := EstRec."Project No.";
                 ExtTo := EstRec."Extension Contract";  //C063222

                 IF gvJobNo <> '' THEN
                   ProjTo := gvJobNo;

                 IF ProjRec.GET(ProjTo) THEN;

                 WizardStep := 1;
                 ShowStep(TRUE);
               END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                END;

    OnInsertRecord=VAR
                     xRecRef@1100000999 : RecordRef;
                   BEGIN
                     //**4PS Generated Code. Do Not Change.sn05
                     xRecRef.GETTABLE(xRec);
                     DPA_SetDefaultDpmtFromNoSeries(xRecRef);
                     //**4PS Generated Code.en05
                   END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525004;1 ;Action    ;
                      Name=Back;
                      CaptionML=[ENU=< &Back;
                                 NOR=< &Tilbake;
                                 SVE=< &Tillbaka];
                      Enabled=BackEnable;
                      InFooterBar=Yes;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 ShowStep(FALSE);
                                 WizardStep -= 1;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100525003;1 ;Action    ;
                      Name=Next;
                      CaptionML=[ENU=&Next >;
                                 NOR=&Neste >;
                                 SVE=&N„sta >];
                      Enabled=NextEnable;
                      InFooterBar=Yes;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 //CheckStatus;
                                 ShowStep(FALSE);
                                 WizardStep += 1;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100525000;1 ;Action    ;
                      Name=Finish;
                      CaptionML=[ENU=&Finish;
                                 NOR=&Fullf›r;
                                 SVE=&Slutf”r];
                      Enabled=FinishEnable;
                      InFooterBar=Yes;
                      Image=Completed;
                      OnAction=BEGIN
                                 //CheckStatus;
                                 FinishWizard;
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210190022;1;Group  ;
                Name=Step1;
                CaptionML=[ENU=Transfer from;
                           NOR=Overf›ring fra;
                           SVE=™verf”ring fr†n];
                Visible=Step1Visible;
                GroupType=Group }

    { 1100525002;2;Field  ;
                CaptionML=[ENU=Transfer from;
                           NOR=Overf›ring fra;
                           SVE=™verf”ring fr†n];
                Style=Strong;
                StyleExpr=TRUE }

    { 1   ;2   ;Field     ;
                CaptionML=[ENU=Estimate;
                           NOR=Kalkyle;
                           SVE=Kalkyl];
                SourceExpr="No.";
                Editable=FALSE }

    { 17  ;2   ;Field     ;
                CaptionML=[ENU=Sub Estimate;
                           NOR=Delkalkyle;
                           SVE=Delkalkyl];
                SourceExpr=SubEstFilter;
                OnValidate=BEGIN
                             ValidateSubEstimate;
                           END;

                OnLookup=BEGIN
                           LookupSubEstimate;
                         END;
                          }

    { 1100525001;2;Field  ;
                CaptionML=[ENU=Part;
                           NOR=Del;
                           SVE=Del];
                SourceExpr=EstPartFilter;
                OnValidate=BEGIN
                             ValidatePart;
                           END;

                OnLookup=BEGIN
                           LookupPart;
                         END;
                          }

    { 1210190005;2;Field  ;
                CaptionML=[ENU=Status;
                           NOR=Status;
                           SVE=Status];
                SourceExpr=StatusFilter;
                OnValidate=BEGIN
                             IF NOT StatusRec.GET(StatusFilter) THEN;
                           END;

                OnLookup=BEGIN
                           IF PAGE.RUNMODAL(PAGE::"Line Statuses",StatusRec) = ACTION::LookupOK THEN BEGIN
                              StatusFilter := StatusRec.Status;
                           END;
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1210190013;2;Field  ;
                CaptionML=[ENU=Transfer Zero Lines;
                           NOR=Overf›r nullrader;
                           SVE=™verf”r nollrader];
                SourceExpr=TransferZeroLines }

    { 1210190015;2;Field  ;
                CaptionML=[ENU=Transfer Estimate Structure;
                           NOR=Overf›r struktur;
                           SVE=™verf”r struktur];
                SourceExpr=TransferEstimateStructure;
                OnValidate=BEGIN
                             EstSetup.GET;
                             ProjSetup.GET;
                             EstSetup.TESTFIELD("Part Format", ProjSetup."Project Element Format");
                           END;
                            }

    { 1100409000;2;Field  ;
                CaptionML=ENU=Transfer Recipe Structure;
                SourceExpr=TransferRecipeStructure }

    { 1210190002;2;Field  ;
                CaptionML=[ENU=Transfer Summary;
                           NOR=Overf›r sammendrag;
                           SVE=™verf”r sammandrag];
                SourceExpr=SelectSheet;
                OnValidate=BEGIN
                             IF SelectSheet = FALSE THEN BEGIN
                               SheetFilter := '';
                             END ELSE BEGIN
                               IF SheetFilter = '' THEN BEGIN  //C031129
                                 SummarySheet.RESET;
                                 SummarySheet.SETRANGE("Estimate No.", "No.");
                                 IF PAGE.RUNMODAL(PAGE::"Summary Sheet List",SummarySheet) = ACTION::LookupOK THEN
                                   SheetFilter := SummarySheet.Summary;
                               END;
                             END;
                           END;
                            }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=Summary;
                           NOR=Sammendrag;
                           SVE=Sammanfattning];
                SourceExpr=SheetFilter;
                OnValidate=BEGIN
                             IF NOT SelectSheet THEN
                               ERROR('');

                             IF NOT SummarySheet.GET("No.",SheetFilter) THEN;
                           END;

                OnLookup=BEGIN
                           SummarySheet.RESET;
                           SummarySheet.SETRANGE("Estimate No.", "No.");
                           IF PAGE.RUNMODAL(PAGE::"Summary Sheet List",SummarySheet) = ACTION::LookupOK THEN BEGIN
                              SheetFilter := SummarySheet.Summary;
                           END;
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 1210190028;2;Field  ;
                CaptionML=[ENU=Transfer Project Planning Activities;
                           NOR=Overf›r prosjektplanleggingsaktiviteter;
                           SVE=™verf”r projektplaneringsaktiviteter];
                SourceExpr=TransferProjectPlanActCodes }

    { 1210190030;2;Field  ;
                Name=ProjectPlanningTemplateBox;
                CaptionML=[ENU=Copy Project Planning Template;
                           NOR=Kopier prosjektplanleggingsmal;
                           SVE=Kopiera projektplaneringsmall];
                SourceExpr=ProjectPlanningTemplate;
                TableRelation="Project Planning Template" }

    { 1210190000;1;Group  ;
                Name=Step2;
                CaptionML=[ENU=Transfer to;
                           NOR=Overf›ring til;
                           SVE=™verf”ring till];
                Visible=Step2Visible;
                GroupType=Group }

    { 1100525005;2;Field  ;
                CaptionML=[ENU=Transfer to;
                           NOR=Overf›ring til;
                           SVE=™verf”ring till];
                Style=Strong;
                StyleExpr=TRUE }

    { 5   ;2   ;Field     ;
                CaptionML=[ENU=Project;
                           NOR=Prosjekt;
                           SVE=Projekt];
                SourceExpr=ProjTo;
                OnValidate=BEGIN
                             IF ProjTo <> '' THEN BEGIN
                               IF NOT ProjRec.GET(ProjTo) THEN
                                 ERROR(Text000, ProjRec.TABLECAPTION, ProjTo);
                             END ELSE BEGIN
                               PlotTo := ''
                             END;
                           END;

                OnLookup=BEGIN
                           IF PAGE.RUNMODAL(PAGE::"Job List",ProjRec) = ACTION::LookupOK THEN BEGIN
                             ProjTo := ProjRec."No.";
                           END;
                           CurrPage.UPDATE(TRUE);
                         END;
                          }

    { 6   ;2   ;Field     ;
                CaptionML=[ENU=Extension;
                           NOR=Direktenr.;
                           SVE=Anknytning];
                SourceExpr=ExtTo;
                OnValidate=BEGIN
                             IF ExtTo <> '' THEN BEGIN
                               IF NOT ExtRec.GET(ProjTo,ExtTo) THEN
                                 ERROR(Text000, ExtRec.TABLECAPTION, ExtTo);
                             END;

                             CheckandValidate(1);
                           END;

                OnLookup=BEGIN
                           ExtRec.SETRANGE("Project No.",ProjTo);
                           IF PAGE.RUNMODAL(PAGE::"Extension List",ExtRec) = ACTION::LookupOK THEN BEGIN
                             ExtTo := ExtRec."Contract No.";
                           END;
                           CurrPage.UPDATE(TRUE);

                           CheckandValidate(1);
                         END;
                          }

    { 13  ;2   ;Field     ;
                CaptionML=[ENU=Adjustment Code;
                           NOR=Justeringskode;
                           SVE=Justeringskod];
                SourceExpr=AdjTo;
                OnValidate=BEGIN
                             IF AdjTo <> '' THEN BEGIN
                               IF NOT AdjRec.GET(ProjTo,AdjTo) THEN
                                 ERROR(Text000, AdjRec.TABLECAPTION, AdjTo)
                             END;


                             CheckandValidate(2);
                           END;

                OnLookup=BEGIN
                           AdjRec.SETRANGE("Project No.",ProjTo);
                           IF PAGE.RUNMODAL(PAGE::"Budget Adjustment List",AdjRec) = ACTION::LookupOK THEN BEGIN
                             AdjTo := AdjRec."No.";
                           END;
                           CurrPage.UPDATE(TRUE);

                           CheckandValidate(2);
                         END;
                          }

    { 1210190019;2;Field  ;
                CaptionML=[ENU=House Model;
                           NOR=Husmodell;
                           SVE=Husmodell];
                SourceExpr=HouseModelTo;
                OnValidate=BEGIN
                             ValidateHouseModel();
                           END;

                OnLookup=BEGIN
                           LookupHouseModel();
                         END;
                          }

    { 1100485003;2;Field  ;
                CaptionML=[ENU=Plot;
                           NOR=Tegning;
                           SVE=Ritning];
                SourceExpr=PlotTo;
                OnValidate=BEGIN
                             IF (ProjTo = '') OR (HouseModelTo = '') THEN
                               ERROR('');

                             ValidatePlot();
                           END;

                OnLookup=BEGIN
                           LookupPlot();
                         END;
                          }

    { 1210190017;2;Field  ;
                CaptionML=[ENU=Option Main Group;
                           NOR=Alternativhovedgruppe;
                           SVE=Alternativhuvudgrupp];
                SourceExpr=MainGroupTo;
                OnValidate=BEGIN
                             ValidateMainGroup();
                           END;

                OnLookup=BEGIN
                           LookupMainGroup();
                         END;
                          }

    { 1210190018;2;Field  ;
                CaptionML=[ENU=Option Group;
                           NOR=Alternativgruppe;
                           SVE=Alternativgrupp];
                SourceExpr=GroupTo;
                OnValidate=BEGIN
                             ValidateGroup();
                           END;

                OnLookup=BEGIN
                           LookupGroup();
                         END;
                          }

    { 1210190020;2;Field  ;
                CaptionML=[ENU=Option Sub Group;
                           NOR=Alternativundergrupp;
                           SVE=Alternativundergrupp];
                SourceExpr=SubGroupTo;
                OnValidate=BEGIN
                             ValidateSubGroup();
                           END;

                OnLookup=BEGIN
                           LookupSubgroup();
                         END;
                          }

    { 1210190008;2;Field  ;
                CaptionML=[ENU=Option Code;
                           NOR=Alternativkode;
                           SVE=Alternativkod];
                SourceExpr=OptTo;
                OnValidate=BEGIN
                             ValidateOption(TRUE);
                           END;

                OnLookup=BEGIN
                           LookupOption();
                         END;
                          }

    { 1100527350;2;Field  ;
                Name=SettlementQuantity;
                CaptionML=ENU=Settlement Quantity;
                SourceExpr=SettlementQuantityCode;
                OnValidate=BEGIN
                             ValidateSettlQuantity();
                           END;

                OnLookup=BEGIN
                           LookupSettlQuantity();
                         END;
                          }

    { 1210190001;1;Group  ;
                Name=Step3;
                CaptionML=[ENU=Options;
                           NOR=Alternativer;
                           SVE=Alternativ];
                Visible=Step3Visible;
                GroupType=Group }

    { 1100525006;2;Field  ;
                CaptionML=[ENU=Enter various options;
                           NOR=Angi forskjellige alternativ;
                           SVE=Ange olika alternativ];
                Style=Strong;
                StyleExpr=TRUE }

    { 1210190003;2;Field  ;
                CaptionML=[ENU=Update Project Data;
                           NOR=Oppdater prosjektdata;
                           SVE=Uppdatera projektdata];
                SourceExpr=UpdateProject }

    { 1100485000;2;Field  ;
                CaptionML=[ENU=Copy Try-Out Successor;
                           NOR=Kopier etterf›lger (prospekt);
                           SVE=Kopiera efterf”ljare, anbud];
                SourceExpr=CopyTryOut }

    { 1100485002;2;Field  ;
                CaptionML=[ENU=Parts to Tender Paragraphs;
                           NOR=Deler til tilbudsavsnitt;
                           SVE=Delar till offertstycken];
                SourceExpr=TransferPartToTenderParagraph;
                OnValidate=BEGIN
                             IF (EstRec."Customer No." = '') AND (TransferPartToTenderParagraph) THEN
                               ERROR(Text008);
                           END;
                            }

    { 1100485006;2;Field  ;
                CaptionML=[ENU=Transfer Sales Price;
                           NOR=Overf›r salgspris;
                           SVE=™verf”r f”rs„ljningspris];
                SourceExpr=TransferSalesPrice }

    { 111284601;2;Field   ;
                CaptionML=ENU=Transfer Sales Price Based on Unit Prices;
                SourceExpr=TransferSalesPriceUnitPrice;
                Enabled=TransferSalesPrice }

    { 1100485008;2;Field  ;
                CaptionML=[ENU=Store Sub-Estimate in Budget Lines;
                           NOR=Lagre delkalkyle i Budsjettrader;
                           SVE=Spara delkalkyl i budgetraderna];
                SourceExpr=StoreSubEstimate }

    { 1100485010;2;Field  ;
                CaptionML=[ENU=Transfer Purchase Actions;
                           NOR=Overf›r innkj›pshandlinger;
                           SVE=™verf”r ink”ps†tg„rder];
                SourceExpr=CopyPurchaseActions }

    { 1100529800;2;Field  ;
                CaptionML=[ENU=Transfer Comment Lines;
                           NOR=Overf›r kommentarrader;
                           SVE=™verf”r kommentarsrader];
                SourceExpr=TransferCommentLines }

    { 1100525007;2;Field  ;
                CaptionML=ENU=Transfer Rates;
                OptionCaptionML=ENU=Assign Amount Only,Assign Code and Amount,Validate Rate Code;
                SourceExpr=TransferRates }

  }
  CODE
  {
    VAR
      Text000@11012018 : TextConst 'ENU=%1 %2 does not exist;NOR=%1 %2 finnes ikke;SVE=%1 %2 finns inte.';
      Text001@1100525001 : TextConst 'ENU=Select Summary Sheet';
      Text002@11012020 : TextConst 'ENU=Select a project;NOR=Velg et prosjekt;SVE=V„lj ett projekt';
      Text003@11012021 : TextConst 'ENU=Do you want to transfer Estimate %1 to Project %2?';
      EstSetup@1210190020 : Record 11012150;
      ProjSetup@1210190021 : Record 315;
      EstRec@1210190000 : Record 11012151;
      ProjRec@11012000 : Record 11072003;
      PlotRec@1100485003 : Record 11012500;
      ExtRec@11012001 : Record 11012004;
      AdjRec@11012002 : Record 11012003;
      HouseModelRec@1210190026 : Record 11012501;
      MainGroupRec@1210190025 : Record 11012509;
      GroupRec@1210190024 : Record 11012504;
      SubGroupRec@1210190023 : Record 11012505;
      OptRec@1210190008 : Record 11012502;
      StatusRec@1210190005 : Record 11012158;
      SummarySheet@11012004 : Record 11012172;
      SheetFilter@11012005 : Code[250];
      SubEstFilter@11012007 : Code[250];
      EstPartFilter@1100525000 : Code[250];
      StatusFilter@1210190003 : Code[250];
      ProjTo@11012009 : Code[20];
      ExtTo@11012011 : Code[20];
      AdjTo@11012013 : Code[20];
      HouseModelTo@1210190022 : Code[20];
      PlotTo@1100485001 : Code[20];
      MainGroupTo@1210190017 : Code[20];
      GroupTo@1210190011 : Code[20];
      SubGroupTo@1210190010 : Code[20];
      OptTo@1210190006 : Code[20];
      TransferZeroLines@1210190018 : Boolean;
      TransferEstimateStructure@1210190019 : Boolean;
      SelectSheet@1210190001 : Boolean;
      UpdateProject@1210190002 : Boolean;
      FormatMgt@11012017 : Codeunit 11012022;
      Text004@1100525011 : TextConst 'ENU="Assigned project is divergent from value in Estimate: yes=apply assigned project; no=process table data"';
      Text005@1210190009 : TextConst 'ENU=not present;NOR=finnes ikke;SVE=finns inte';
      CopyTryOut@1100485000 : Boolean;
      Text006@1100485002 : TextConst 'ENU=Select Option;NOR=Velg alternativ;SVE=V„lj alternativ';
      Text007@1100485004 : TextConst 'ENU=Not allowed option has already status ''%1''.;NOR=Ikke tillatt Alternativ har allerede status ''%1''.;SVE=F”rbjudet alternativ har redan status ''%1''.';
      TransferPartToTenderParagraph@1100485005 : Boolean;
      TransferSalesPrice@1100485007 : Boolean;
      StoreSubEstimate@1100485008 : Boolean;
      CopyPurchaseActions@1100485009 : Boolean;
      Text008@1100485006 : TextConst 'ENU=Enter Customer for Estimate;NOR=Angi kunde for kalkyle;SVE=Ange kund f”r kalkyl';
      DPA_IsHardFilter@1100000999 : Boolean;
      TransferCommentLines@1100529800 : Boolean;
      TransferProjectPlanActCodes@1210190031 : Boolean;
      ProjectPlanningTemplate@1210190032 : Code[20];
      gvJobNo@1210190131 : Code[20];
      Step1Visible@1100525005 : Boolean INDATASET;
      Step2Visible@1100525004 : Boolean INDATASET;
      Step3Visible@1100525003 : Boolean INDATASET;
      WizardStep@1100525006 : Integer;
      FinishEnable@1100525009 : Boolean INDATASET;
      BackEnable@1100525008 : Boolean INDATASET;
      NextEnable@1100525007 : Boolean INDATASET;
      TransferRecipeStructure@1100409000 : Boolean;
      TransferRates@1100525002 : 'AssignAmountOnly,AssignCodeAndAmount,ValidateRateCode';
      TransferSalesPriceUnitPrice@111284601 : Boolean;
      "-EVRY-"@1100285001 : Integer;
      NoConfirm@1100285000 : Boolean;
      SettlementQuantityCode@1100527351 : Code[20];
      SettlementQuantityRec@1100527350 : Record 11072243;
      Text009@1100527352 : TextConst 'ENU=Do you want to transfer Estimate %1 to Settlement Quantity %2?';

    PROCEDURE ValidateSubEstimate@1100528903();
    VAR
      Level@1100528902 : Integer;
      Chapter@1100528901 : Code[20];
      Paragraph@1100528900 : Code[20];
      SubEstRec@1100528903 : Record 11072074;
    BEGIN
      //DP00381
      IF SubEstFilter <> '' THEN
        IF STRPOS(SubEstFilter, '..')=0 THEN
          IF FormatMgt.Numeric(SubEstFilter) THEN
            FormatMgt.FormatSubEstimate(SubEstFilter,Chapter,Paragraph,Level,"No.",FALSE);
      IF NOT SubEstRec.GET("No.",SubEstFilter) THEN SubEstRec.INIT;
      //SubEstTxt := SubEstRec.Description;
      CheckProjectWithEstimateFilter;
      CheckExtCntrWithEstimateFilter;  //DP00260
    END;

    PROCEDURE LookupSubEstimate@1100528901();
    VAR
      SubEstRec@1100528900 : Record 11072074;
    BEGIN
      //DP00381
      SubEstRec.SETRANGE("Estimate No.", "No.");
      IF PAGE.RUNMODAL(0, SubEstRec) = ACTION::LookupOK THEN BEGIN
        SubEstFilter := SubEstRec."Sub-Estimate No.";
        //SubEstTxt := SubEstRec.Description;
      END;
      CheckProjectWithEstimateFilter;
      CheckExtCntrWithEstimateFilter;  //DP00260
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ValidatePart@1100528904();
    VAR
      EstPartRec@1100528901 : Record 11072073;
    BEGIN
      //DP00381
      IF EstPartFilter <> '' THEN
        IF STRPOS(EstPartFilter, '..')=0 THEN
          IF FormatMgt.Numeric(EstPartFilter) THEN
            FormatMgt.FormatElem(EstPartFilter,1,'');
      EstPartRec.SETRANGE("Estimate No.", "No.");
      IF SubEstFilter <> '' THEN
        EstPartRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
      IF EstPartFilter <> '' THEN
        EstPartRec.SETFILTER(Part, EstPartFilter);
      IF NOT EstPartRec.FIND('-') THEN EstPartRec.INIT;
      //EstPartTxt := EstPartRec.Description;
      CheckProjectWithEstimateFilter;
      CheckExtCntrWithEstimateFilter;  //DP00260
    END;

    PROCEDURE LookupPart@1100528902();
    VAR
      EstPartRec@1100528900 : Record 11072073;
    BEGIN
      //DP00381
      EstPartRec.SETRANGE("Estimate No.", "No.");
      IF SubEstFilter <> '' THEN
        EstPartRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
      IF PAGE.RUNMODAL(0, EstPartRec) = ACTION::LookupOK THEN BEGIN
        EstPartRec.CALCFIELDS("Sub-Estimate Description");
        SubEstFilter := EstPartRec."Sub-Estimate No.";
        //SubEstTxt := EstPartRec."Sub-Estimate Description";
        EstPartFilter := EstPartRec.Part;
        //EstPartTxt := EstPartRec.Description;
      END;
      CheckProjectWithEstimateFilter;
      CheckExtCntrWithEstimateFilter;  //DP00260
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE LookupHouseModel@1210190010();
    BEGIN
      WITH HouseModelRec DO BEGIN
        IF ProjTo <> '' THEN
          SETRANGE("Project No.", ProjTo)
         ELSE
          SETRANGE("Project No.", '');
        "Project No." := ProjTo;
        Model := HouseModelTo;
        IF ProjTo <> '' THEN BEGIN
          IF PAGE.RUNMODAL(PAGE::"House Models by Project List", HouseModelRec) = ACTION::LookupOK THEN BEGIN
            HouseModelTo := Model;
            ValidateOption(FALSE);
            ValidateSettlQuantity;
          END;
        END ELSE BEGIN
          IF PAGE.RUNMODAL(PAGE::"House Model List", HouseModelRec) = ACTION::LookupOK THEN BEGIN
            HouseModelTo := Model;
            ValidateOption(FALSE);
            ValidateSettlQuantity;
          END;
        END;
      END;
    END;

    PROCEDURE LookupMainGroup@1210190008();
    BEGIN
      WITH MainGroupRec DO BEGIN
        IF ProjTo <> '' THEN
          SETRANGE("Project No.", ProjTo)
         ELSE
          SETRANGE("Project No.", '');
        SETRANGE("Plot No.", '');
        "Project No." := ProjTo;
        Code := MainGroupTo;
        IF ProjTo <> '' THEN BEGIN
          IF PAGE.RUNMODAL(PAGE::"Project Option Main Group List", MainGroupRec) = ACTION::LookupOK THEN BEGIN
            MainGroupTo := Code;
            ValidateOption(FALSE);
          END;
        END ELSE BEGIN
          IF PAGE.RUNMODAL(PAGE::"Option Main Group List", MainGroupRec) = ACTION::LookupOK THEN BEGIN
            MainGroupTo := Code;
            ValidateOption(FALSE);
          END;
        END;
      END;
    END;

    PROCEDURE LookupGroup@1210190007();
    BEGIN
      WITH GroupRec DO BEGIN
        IF ProjTo <> '' THEN
          SETRANGE("Project No.", ProjTo)
         ELSE
          SETRANGE("Project No.", '');
        SETRANGE("Plot No.", '');
        "Project No." := ProjTo;
        Code := GroupTo;
        IF ProjTo <> '' THEN BEGIN
          IF PAGE.RUNMODAL(PAGE::"Project Option Groups", GroupRec) = ACTION::LookupOK THEN BEGIN
            GroupTo := Code;
            ValidateOption(FALSE);
          END;
        END ELSE BEGIN
          IF PAGE.RUNMODAL(PAGE::"Option Groups", GroupRec) = ACTION::LookupOK THEN BEGIN
            GroupTo := Code;
            ValidateOption(FALSE);
          END;
        END;
      END;
    END;

    PROCEDURE LookupSubgroup@1210190006();
    BEGIN
      WITH SubGroupRec DO BEGIN
        IF ProjTo <> '' THEN
          SETRANGE("Project No.", ProjTo)
         ELSE
          SETRANGE("Project No.", '');
        SETRANGE("Plot No.", '');
        "Project No." := ProjTo;
        Code := SubGroupTo;
        IF ProjTo <> '' THEN BEGIN
          IF PAGE.RUNMODAL(PAGE::"Project Option Sub Groups", SubGroupRec) = ACTION::LookupOK THEN BEGIN
            SubGroupTo := Code;
            ValidateOption(FALSE);
          END;
        END ELSE BEGIN
          IF PAGE.RUNMODAL(PAGE::"Option Sub Groups", SubGroupRec) = ACTION::LookupOK THEN BEGIN
            SubGroupTo := Code;
            ValidateOption(FALSE);
          END;
        END;
      END;
    END;

    PROCEDURE LookupOption@1210190005();
    BEGIN
      WITH OptRec DO BEGIN
        FILTERGROUP(9);
        IF ProjTo <> '' THEN
          SETRANGE("Project No.", ProjTo)
         ELSE
          SETRANGE("Project No.", '');
        SETRANGE("Plot No.", PlotTo);
        FILTERGROUP(0);
        "Project No." := ProjTo;
        "Plot No." := PlotTo;
        "House Model" := HouseModelTo;
        "Main Group" := MainGroupTo;
        Group := GroupTo;
        "Sub Group" := SubGroupTo;
        Option := OptTo;
        IF PAGE.RUNMODAL(PAGE::"Option List",OptRec) = ACTION::LookupOK THEN BEGIN
          HouseModelTo := "House Model";
          MainGroupTo := "Main Group";
          GroupTo := Group;
          SubGroupTo := "Sub Group";
          OptTo := Option;
          ValidateHouseModel();
          ValidateMainGroup();
          ValidateGroup();
          ValidateSubGroup();
          ValidateOption(FALSE);
        END;
      END;
    END;

    PROCEDURE LookupPlot@1100485001();
    BEGIN
      WITH PlotRec DO BEGIN
        SETRANGE("Project No.", ProjTo);
        SETRANGE("House Model", HouseModelTo);
        "Project No." := ProjTo;
        "Plot No." := PlotTo;
        IF PAGE.RUNMODAL(PAGE::"Plot Number List", PlotRec) = ACTION::LookupOK THEN BEGIN
          PlotTo := "Plot No.";
          ValidateOption(FALSE);
        END;
      END;
    END;

    PROCEDURE ValidatePlot@1100485000();
    BEGIN
      IF PlotTo <> '' THEN BEGIN
        PlotRec.GET(ProjTo, PlotTo);
      END;
      ValidateOption(FALSE);
    END;

    PROCEDURE ValidateHouseModel@1210190002();
    BEGIN
      IF HouseModelTo <> '' THEN BEGIN
        HouseModelRec.GET(ProjTo, HouseModelTo);
      END;
      ValidateOption(FALSE);
      ValidateSettlQuantity;
    END;

    PROCEDURE ValidateMainGroup@1210190003();
    BEGIN
      IF MainGroupTo <> '' THEN BEGIN
        MainGroupRec.GET(ProjTo, PlotTo, MainGroupTo);
      END;
      ValidateOption(FALSE);
    END;

    PROCEDURE ValidateGroup@1210190004();
    BEGIN
      IF GroupTo <> '' THEN BEGIN
        GroupRec.GET(ProjTo, PlotTo, GroupTo);
      END;
      ValidateOption(FALSE);
    END;

    PROCEDURE ValidateSubGroup@1210190009();
    BEGIN
      IF SubGroupTo <> '' THEN BEGIN
        SubGroupRec.GET(ProjTo, PlotTo, SubGroupTo);
      END;
      ValidateOption(FALSE);
    END;

    PROCEDURE ValidateOption@1210190001(IModeError@1210190000 : Boolean);
    BEGIN
      IF OptTo <> '' THEN BEGIN
        IF OptRec.GET(ProjTo, PlotTo, HouseModelTo, MainGroupTo, GroupTo, SubGroupTo, OptTo) THEN BEGIN
          IF OptRec.Status >= OptRec.Status::Order THEN
            ERROR(Text007, OptRec.Status);
        END ELSE BEGIN
          IF IModeError THEN BEGIN
            OptRec."Project No." := ProjTo;
            OptRec."House Model" := HouseModelTo;
            OptRec."Main Group" := MainGroupTo;
            OptRec.Group := GroupTo;
            OptRec."Sub Group" := SubGroupTo;
            OptRec.Option := OptTo;
            OptRec.FIELDERROR(Option, Text005);
          END;
        END;
      END;
      CheckandValidate(3);
    END;

    PROCEDURE CheckandValidate@1(Type@11012000 : Integer);
    BEGIN
      IF Type = 1 THEN BEGIN
        IF ExtTo <> '' THEN BEGIN
          AdjTo := '';
          PlotTo := '';
          HouseModelTo := '';
          MainGroupTo := '';
          GroupTo := '';
          SubGroupTo := '';
          OptTo := '';
        END;
      END;

      IF Type = 2 THEN BEGIN
        IF AdjTo <> '' THEN BEGIN
          ExtTo := '';
          PlotTo := '';
          HouseModelTo := '';
          MainGroupTo := '';
          GroupTo := '';
          SubGroupTo := '';
          OptTo := '';
        END;
      END;

      IF Type = 3 THEN BEGIN
        IF OptTo <> '' THEN BEGIN
          ExtTo := '';
          AdjTo := '';
          SettlementQuantityCode := '';
        END;
      END;

      IF Type = 4 THEN BEGIN
        IF SettlementQuantityCode <> '' THEN
          OptTo := '';
      END;
    END;

    PROCEDURE SetSelection@1210190000(lvJobNo@1210190000 : Code[20]);
    BEGIN
      gvJobNo := lvJobNo;
    END;

    LOCAL PROCEDURE ShowStep@2(Visible@1001 : Boolean);
    BEGIN
      CASE WizardStep OF
        1:
          BEGIN
            Step1Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := FALSE;
              NextEnable := TRUE;
            END;
          END;
        2:
          BEGIN
            Step2Visible := Visible;
            IF Visible THEN BEGIN
              NextEnable := TRUE;
              BackEnable := TRUE;
              FinishEnable := FALSE;
            END;
          END;
        3:
          BEGIN
            Step3Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := TRUE;
              BackEnable := TRUE;
              NextEnable := FALSE;
            END;
          END;
      END;
    END;

    PROCEDURE FinishWizard@1100525001();
    VAR
      TransferMgt@1100528900 : Codeunit 11012228;
      ConfirmTransfer@1100527350 : Boolean;
    BEGIN
      IF ProjTo = '' THEN
        IF (OptTo = '') AND (SettlementQuantityCode = '') THEN
          ERROR(Text002);

      IF PlotTo <> '' THEN BEGIN
        IF ProjTo = '' THEN
          ERROR(Text002);
        IF OptTo = '' THEN
          ERROR(Text006);
      END;

      IF SelectSheet AND (SheetFilter = '') THEN BEGIN  //C031129
        SummarySheet.RESET;
        SummarySheet.SETRANGE("Estimate No.", "No.");
        IF SummarySheet.COUNT <> 1 THEN
          ERROR(Text001);
      END;

      ValidateOption(TRUE);

      //>> LAHE 121203
      IF NOT NoConfirm THEN BEGIN
      ////<< LAHE 121203
        IF SettlementQuantityCode <> '' THEN
          ConfirmTransfer := CONFIRM(Text009,FALSE,"No.",SettlementQuantityCode)
        ELSE
          ConfirmTransfer := CONFIRM(Text003,FALSE,"No.",ProjTo);
      //>> LAHE 121203
      END ELSE
        ConfirmTransfer := NoConfirm;
      ////<< LAHE 121203

      IF ConfirmTransfer THEN BEGIN
        //db.sn, 22-03-13: C005871
        UpdateLinkEstimateProject;
        //db.en, 22-03-13: C005871
        COMMIT;
        TransferMgt.SetTransferOptions(
          TransferZeroLines,TransferEstimateStructure,TransferPartToTenderParagraph,
          TransferSalesPrice,StoreSubEstimate,CopyPurchaseActions, TransferCommentLines, 0,0,CopyTryOut,0,
          SelectSheet,UpdateProject,FALSE,TransferSalesPriceUnitPrice); //mg.c, 05-01-12: M31753
        TransferMgt.SetEstimateOptions("No.",SubEstFilter,EstPartFilter,SheetFilter,StatusFilter);
        TransferMgt.SetProjectOptions(
          ProjTo,ExtTo,AdjTo,PlotTo,HouseModelTo,MainGroupTo,GroupTo,SubGroupTo,OptTo,'');
        TransferMgt.SetProjectPlanningOptions(TransferProjectPlanActCodes,ProjectPlanningTemplate);
        TransferMgt.SetSaveStructureRecipe(TransferRecipeStructure);  //db, 23-09-14: C016015
        TransferMgt.SetRateOption(TransferRates);  //C042022
        TransferMgt.Start;
      END;
    END;

    PROCEDURE CheckProjectWithEstimateFilter@1100525003();
    VAR
      SubEstRec@1100525000 : Record 11072074;
      EstPartRec@1100525001 : Record 11072073;
      ProjFound@1100525002 : Boolean;
    BEGIN
      //db, 17-05-13: C005871
      IF (SubEstFilter <> '') AND (EstPartFilter <> '') THEN BEGIN
        EstPartRec.SETRANGE("Estimate No.", "No.");
        EstPartRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        EstPartRec.SETFILTER(Part, EstPartFilter);
        IF EstPartRec.FINDSET THEN BEGIN
          REPEAT
            IF EstPartRec."Project No." <> '' THEN BEGIN
              ProjTo := EstPartRec."Project No.";
              ProjFound := TRUE;
            END;
          UNTIL (EstPartRec.NEXT = 0) OR (ProjFound = TRUE);
        END;
      END;
      IF (SubEstFilter <> '') AND (ProjFound = FALSE) THEN BEGIN
        SubEstRec.SETRANGE("Estimate No.", "No.");
        SubEstRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        IF SubEstRec.FINDSET THEN BEGIN
          REPEAT
            IF SubEstRec."Project No." <> '' THEN BEGIN
              ProjTo := SubEstRec."Project No.";
              ProjFound := TRUE;
            END;
          UNTIL (SubEstRec.NEXT = 0) OR (ProjFound = TRUE);
        END;
      END;
      IF (ProjFound = FALSE) THEN BEGIN
        EstRec.GET("No.");
        ProjTo := EstRec."Project No.";
      END;
      IF NOT ProjRec.GET(ProjTo) THEN ProjRec.INIT;
    END;

    PROCEDURE CheckExtCntrWithEstimateFilter@1100528900();
    VAR
      SubEstRec@1100525000 : Record 11072074;
      EstPartRec@1100525001 : Record 11072073;
      ExtFound@1100525002 : Boolean;
    BEGIN
      //DP00260
      IF (SubEstFilter <> '') AND (EstPartFilter <> '') THEN BEGIN
        EstPartRec.SETRANGE("Estimate No.", "No.");
        EstPartRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        EstPartRec.SETFILTER(Part, EstPartFilter);
        IF EstPartRec.FINDSET THEN BEGIN
          REPEAT
            IF EstPartRec."Extension Contract" <> '' THEN BEGIN
              ExtTo := EstPartRec."Extension Contract";
              ExtFound := TRUE;
            END;
          UNTIL (EstPartRec.NEXT = 0) OR (ExtFound = TRUE);
        END;
      END;
      IF (SubEstFilter <> '') AND (ExtFound = FALSE) THEN BEGIN
        SubEstRec.SETRANGE("Estimate No.", "No.");
        SubEstRec.SETFILTER("Sub-Estimate No.", SubEstFilter);
        IF SubEstRec.FINDSET THEN BEGIN
          REPEAT
            IF SubEstRec."Extension Contract" <> '' THEN BEGIN
              ExtTo := SubEstRec."Extension Contract";
              ExtFound := TRUE;
            END;
          UNTIL (SubEstRec.NEXT = 0) OR (ExtFound = TRUE);
        END;
      END;
      IF (ExtFound = FALSE) THEN BEGIN
        EstRec.GET("No.");
        ExtTo := EstRec."Extension Contract";
      END;
      IF NOT ExtRec.GET(ProjTo,ExtTo) THEN ExtRec.INIT;
      //ExtToTxt := ExtRec.Description;
    END;

    PROCEDURE UpdateLinkEstimateProject@1100525000();
    VAR
      SubEstimate@1100525003 : Record 11072074;
      EstimatePart@1100525002 : Record 11072073;
      EstimateLine@1100525001 : Record 11072072;
      EstimateRecipeLine@1100528500 : Record 11072075;
      AskUpdate@1100525000 : Boolean;
    BEGIN
      //db, 17-05-13: C005871
      EstRec.GET("No.");

      SubEstimate.SETRANGE("Estimate No.", EstRec."No.");
      SubEstimate.SETFILTER("Sub-Estimate No.", SubEstFilter);
      SubEstimate.SETFILTER("Project No.", '<>%1&<>%2', ProjTo, '');
      IF SubEstimate.FINDFIRST THEN
        AskUpdate := TRUE;

      IF AskUpdate = FALSE THEN BEGIN
        EstimatePart.SETRANGE("Estimate No.", EstRec."No.");
        EstimatePart.SETFILTER("Sub-Estimate No.", SubEstFilter);
        EstimatePart.SETFILTER(Part, EstPartFilter);
        EstimatePart.SETFILTER("Project No.", '<>%1&<>%2', ProjTo, '');
        IF EstimatePart.FINDFIRST THEN
          AskUpdate := TRUE;
      END;

      IF AskUpdate = FALSE THEN BEGIN
        EstimateLine.SETRANGE("Estimate No.", EstRec."No.");
        EstimateLine.SETFILTER("Sub-Estimate No.", SubEstFilter);
        EstimateLine.SETFILTER(Part, EstPartFilter);
        EstimateLine.SETFILTER("Project No.", '<>%1&<>%2', ProjTo, '');
        IF EstimateLine.FINDFIRST THEN
          AskUpdate := TRUE;
      END;

      IF SettlementQuantityCode = '' THEN BEGIN
        IF AskUpdate THEN
          IF CONFIRM(Text004) = FALSE THEN
           EXIT;
      END;

      IF (SubEstFilter = '') AND (EstPartFilter = '') THEN BEGIN
        //db, 21-05-13: assumed to be export of complete estimate
        EstRec."Project No." := ProjTo;  //db, 29-10-08: M13171 (skip validate project)
        EstRec.MODIFY;
      END;

      SubEstimate.RESET;
      SubEstimate.SETRANGE("Estimate No.", EstRec."No.");
      SubEstimate.SETFILTER("Sub-Estimate No.", SubEstFilter);
      SubEstimate.MODIFYALL("Project No.", ProjTo);

      EstimatePart.RESET;
      EstimatePart.SETRANGE("Estimate No.", EstRec."No.");
      EstimatePart.SETFILTER("Sub-Estimate No.", SubEstFilter);
      EstimatePart.SETFILTER(Part, EstPartFilter);
      EstimatePart.MODIFYALL("Project No.", ProjTo);

      EstimateLine.RESET;
      EstimateLine.SETRANGE("Estimate No.", EstRec."No.");
      EstimateLine.SETFILTER("Sub-Estimate No.", SubEstFilter);
      EstimateLine.SETFILTER(Part, EstPartFilter);
      EstimateLine.MODIFYALL("Project No.", ProjTo);

      EstimateRecipeLine.RESET;
      EstimateRecipeLine.SETRANGE("Estimate No.", EstRec."No.");
      EstimateRecipeLine.SETFILTER("Sub-Estimate No.", SubEstFilter);
      EstimateRecipeLine.SETFILTER(Part, EstPartFilter);
      EstimateRecipeLine.MODIFYALL("Project No.", ProjTo);  //C053014
    END;

    LOCAL PROCEDURE InitSelection@1100528905();
    BEGIN
      //C035508
      //source
      SubEstFilter := '';
      EstPartFilter := '';
      StatusFilter := '';
      SheetFilter := '';
      //destination
      ProjTo := '';
      ExtTo := '';
      AdjTo := '';
      HouseModelTo := '';
      PlotTo := '';
      MainGroupTo := '';
      GroupTo := '';
      SubGroupTo := '';
      OptTo := '';
      SettlementQuantityCode := '';
    END;

    LOCAL PROCEDURE "---EVRY---"@1100290000();
    BEGIN
    END;

    PROCEDURE SetDefaultValues@1100290001(_estimateNo@1100285000 : Code[20];_projectNo@1100285001 : Code[20]);
    BEGIN
      // LAHE 121203
      NoConfirm := TRUE;
      //Step 1
      //CopyFromCostEst := _estimateNo;
      SubEstFilter := '';
      EstPartFilter := '';
      StatusFilter := '';
      SheetFilter := ''; // Summary
      TransferZeroLines := FALSE;
      TransferEstimateStructure := FALSE;
      SelectSheet := FALSE;
      //Step 2
      TransferProjectPlanActCodes := FALSE;
      ProjectPlanningTemplate := '';
      ProjTo := _projectNo;
      ExtTo := '';
      AdjTo := '';
      HouseModelTo := '';
      PlotTo := '';
      MainGroupTo := '';
      GroupTo := '';
      SubGroupTo := '';
      OptTo := '';
      //Step 3
      UpdateProject := FALSE;
      CopyTryOut := FALSE;
      TransferPartToTenderParagraph := FALSE;
      TransferSalesPrice := FALSE;
      StoreSubEstimate := FALSE;
      CopyPurchaseActions := FALSE;
      TransferCommentLines := TRUE;
    END;

    PROCEDURE ValidateSettlQuantity@1100528205();
    BEGIN
      IF SettlementQuantityCode <> '' THEN
        SettlementQuantityRec.GET(ProjTo, HouseModelTo, SettlementQuantityCode);
      CheckandValidate(4);
    END;

    PROCEDURE LookupSettlQuantity@1100528206();
    BEGIN
      WITH SettlementQuantityRec DO BEGIN
        IF ProjTo <> '' THEN BEGIN
          SETRANGE("Project No.", ProjTo);
          "Project No." := ProjTo;
        END;
        IF HouseModelTo <> '' THEN BEGIN
          SETRANGE("House Model", HouseModelTo);
          "House Model" := HouseModelTo;
        END;
        IF PAGE.RUNMODAL(PAGE::"Settlement Quantity List",SettlementQuantityRec) = ACTION::LookupOK THEN BEGIN
          ProjTo := "Project No.";
          HouseModelTo := "House Model";
          SettlementQuantityCode := Code;
        END;
      END;
      CheckandValidate(4);
    END;

    BEGIN
    {
      C035508: db, 02-02-17
      - SaveValues activate; take care when introducing new fields; evaluate adding to InitSelection
    }
    END.
  }
}

