OBJECT Table 99008535 TempBlob
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01;
  }
  PROPERTIES
  {
    CaptionML=[DEU=TempBlob;
               ENU=TempBlob;
               NLD=TempBlob;
               NOR=Midlertidig BLOB;
               SVE=TempBlob];
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DEU=PrimÑrschlÅssel;
                                                              ENU=Primary Key;
                                                              NLD=Primaire sleutel;
                                                              NOR=Primërnõkkel;
                                                              SVE=PrimÑrnyckel] }
    { 2   ;   ;Blob                ;BLOB          ;DataClassification=SystemMetadata;
                                                   CaptionML=[DEU=BLOB;
                                                              ENU=Blob;
                                                              NLD=BLOB;
                                                              NOR=Blob;
                                                              SVE=Blob] }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GlobalInStream@1000 : InStream;
      GlobalOutStream@1012 : OutStream;
      ReadLinesInitialized@1001 : Boolean;
      WriteLinesInitialized@1013 : Boolean;
      NoContentErr@1002 : TextConst 'DEU=Das BLOB-Feld ist leer.;ENU=The BLOB field is empty.;NLD=Het BLOB-veld is leeg.;NOR=BLOB-feltet er tomt.';
      UnknownImageTypeErr@1003 : TextConst 'DEU=Unbekannte Art Abbildung.;ENU=Unknown image type.;NLD=Onbekend type afbeelding.;NOR=Ukjent bildetype.';
      XmlCannotBeLoadedErr@1004 : TextConst 'DEU=Der XML kann nicht geladen werden.;ENU=The XML cannot be loaded.;NLD=De XML kan niet worden geladen.;NOR=XML kan ikke lastes.';

    [External]
    PROCEDURE WriteAsText@3(Content@1001 : Text;Encoding@1000 : TextEncoding);
    VAR
      OutStr@1002 : OutStream;
    BEGIN
      CLEAR(Blob);
      IF Content = '' THEN
        EXIT;
      Blob.CREATEOUTSTREAM(OutStr,Encoding);
      OutStr.WRITETEXT(Content);
    END;

    [External]
    PROCEDURE ReadAsText@5(LineSeparator@1001 : Text;Encoding@1000 : TextEncoding) Content : Text;
    VAR
      InStream@1002 : InStream;
      ContentLine@1003 : Text;
    BEGIN
      Blob.CREATEINSTREAM(InStream,Encoding);

      InStream.READTEXT(Content);
      WHILE NOT InStream.EOS DO BEGIN
        InStream.READTEXT(ContentLine);
        Content += LineSeparator + ContentLine;
      END;
    END;

    [External]
    PROCEDURE ReadAsTextWithCRLFLineSeparator@20() : Text;
    VAR
      CRLF@1000 : Text[2];
    BEGIN
      CRLF[1] := 13;
      CRLF[2] := 10;
      EXIT(ReadAsText(CRLF,TEXTENCODING::UTF8));
    END;

    [External]
    PROCEDURE StartReadingTextLines@8(Encoding@1000 : TextEncoding);
    BEGIN
      Blob.CREATEINSTREAM(GlobalInStream,Encoding);
      ReadLinesInitialized := TRUE;
    END;

    [External]
    PROCEDURE StartWritingTextLines@13(Encoding@1000 : TextEncoding);
    BEGIN
      CLEAR(Blob);
      Blob.CREATEOUTSTREAM(GlobalOutStream,Encoding);
      WriteLinesInitialized := TRUE;
    END;

    [External]
    PROCEDURE MoreTextLines@9() : Boolean;
    BEGIN
      IF NOT ReadLinesInitialized THEN
        StartReadingTextLines(TEXTENCODING::Windows);
      EXIT(NOT GlobalInStream.EOS);
    END;

    [External]
    PROCEDURE ReadTextLine@7() : Text;
    VAR
      ContentLine@1003 : Text;
    BEGIN
      IF NOT MoreTextLines THEN
        EXIT('');
      GlobalInStream.READTEXT(ContentLine);
      EXIT(ContentLine);
    END;

    [External]
    PROCEDURE WriteTextLine@14(Content@1000 : Text);
    BEGIN
      IF NOT WriteLinesInitialized THEN
        StartWritingTextLines(TEXTENCODING::Windows);
      GlobalOutStream.WRITETEXT(Content);
    END;

    [External]
    PROCEDURE ToBase64String@1() : Text;
    VAR
      IStream@1000 : InStream;
      Convert@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Base64String@1001 : Text;
    BEGIN
      IF NOT Blob.HASVALUE THEN
        EXIT('');
      Blob.CREATEINSTREAM(IStream);
      MemoryStream := MemoryStream.MemoryStream;
      COPYSTREAM(MemoryStream,IStream);
      Base64String := Convert.ToBase64String(MemoryStream.ToArray);
      MemoryStream.Close;
      EXIT(Base64String);
    END;

    [External]
    PROCEDURE FromBase64String@2(Base64String@1000 : Text);
    VAR
      OStream@1001 : OutStream;
      Convert@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
    BEGIN
      IF Base64String = '' THEN
        EXIT;
      MemoryStream := MemoryStream.MemoryStream(Convert.FromBase64String(Base64String));
      Blob.CREATEOUTSTREAM(OStream);
      MemoryStream.WriteTo(OStream);
      MemoryStream.Close;
    END;

    [External]
    PROCEDURE GetHTMLImgSrc@4() : Text;
    VAR
      ImageFormatAsTxt@1000 : Text;
    BEGIN
      IF NOT Blob.HASVALUE THEN
        EXIT('');
      IF NOT TryGetImageFormatAsTxt(ImageFormatAsTxt) THEN
        EXIT('');
      EXIT(STRSUBSTNO('data:image/%1;base64,%2',ImageFormatAsTxt,ToBase64String));
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetImageFormatAsTxt@17(VAR ImageFormatAsTxt@1000 : Text);
    VAR
      Image@1002 : DotNet "'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Image";
      ImageFormatConverter@1004 : DotNet "'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.ImageFormatConverter";
      InStream@1001 : InStream;
    BEGIN
      Blob.CREATEINSTREAM(InStream);
      Image := Image.FromStream(InStream);
      ImageFormatConverter := ImageFormatConverter.ImageFormatConverter;
      ImageFormatAsTxt := ImageFormatConverter.ConvertToString(Image.RawFormat);
    END;

    [External]
    PROCEDURE GetImageType@11() : Text;
    VAR
      ImageFormatAsTxt@1000 : Text;
    BEGIN
      IF NOT Blob.HASVALUE THEN
        ERROR(NoContentErr);
      IF NOT TryGetImageFormatAsTxt(ImageFormatAsTxt) THEN
        ERROR(UnknownImageTypeErr);
      EXIT(ImageFormatAsTxt);
    END;

    [TryFunction]
    [External]
    PROCEDURE TryDownloadFromUrl@21(Url@1000 : Text);
    VAR
      FileManagement@1004 : Codeunit 419;
      WebClient@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebClient";
      MemoryStream@1002 : DotNet "'mscorlib'.System.IO.MemoryStream";
      OutStr@1003 : OutStream;
    BEGIN
      FileManagement.IsAllowedPath(Url,FALSE);
      WebClient := WebClient.WebClient;
      MemoryStream := MemoryStream.MemoryStream(WebClient.DownloadData(Url));
      Blob.CREATEOUTSTREAM(OutStr);
      COPYSTREAM(OutStr,MemoryStream);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetXMLAsText@6(VAR Xml@1000 : Text);
    VAR
      XmlDoc@1002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      InStr@1001 : InStream;
    BEGIN
      Blob.CREATEINSTREAM(InStr);
      XmlDoc := XmlDoc.XmlDocument;
      XmlDoc.PreserveWhitespace := FALSE;
      XmlDoc.Load(InStr);
      Xml := XmlDoc.OuterXml;
    END;

    [External]
    PROCEDURE GetXMLAsText@19() : Text;
    VAR
      Xml@1000 : Text;
    BEGIN
      IF NOT Blob.HASVALUE THEN
        ERROR(NoContentErr);
      IF NOT TryGetXMLAsText(Xml) THEN
        ERROR(XmlCannotBeLoadedErr);
      EXIT(Xml);
    END;

    BEGIN
    END.
  }
}

