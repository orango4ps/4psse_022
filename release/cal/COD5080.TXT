OBJECT Codeunit 5080 Image Handler Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ImageQuality@1000 : Integer;

    [TryFunction]
    [External]
    PROCEDURE ScaleDown@1(VAR SourceImageInStream@1001 : InStream;VAR ResizedImageOutStream@1000 : OutStream;NewWidth@1003 : Integer;NewHeight@1004 : Integer);
    VAR
      ImageHandler@1002 : DotNet "'Microsoft.Dynamics.Nav.ImageProcessing, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.ImageProcessing.ImageHandler";
    BEGIN
      ImageHandler := ImageHandler.ImageHandler(SourceImageInStream);

      IF ImageQuality = 0 THEN
        ImageQuality := GetDefaultImageQuality;

      IF (ImageHandler.Height <= NewHeight) AND (ImageHandler.Width <= NewWidth) THEN BEGIN
        COPYSTREAM(ResizedImageOutStream,SourceImageInStream);
        EXIT;
      END;

      COPYSTREAM(ResizedImageOutStream,ImageHandler.ResizeImage(NewWidth,NewHeight,ImageQuality));
    END;

    PROCEDURE ScaleDownFromBlob@22(VAR TempBlob@1000 : TEMPORARY Record 99008535;NewWidth@1003 : Integer;NewHeight@1004 : Integer) : Boolean;
    VAR
      ImageInStream@1001 : InStream;
      ImageOutStream@1002 : OutStream;
    BEGIN
      IF NOT TempBlob.Blob.HASVALUE THEN
        EXIT;

      TempBlob.Blob.CREATEINSTREAM(ImageInStream);
      TempBlob.Blob.CREATEOUTSTREAM(ImageOutStream);

      EXIT(ScaleDown(ImageInStream,ImageOutStream,NewWidth,NewHeight));
    END;

    [External]
    PROCEDURE SetQuality@9(NewImageQuality@1000 : Integer);
    BEGIN
      ImageQuality := NewImageQuality;
    END;

    LOCAL PROCEDURE GetDefaultImageQuality@11() : Integer;
    BEGIN
      // Default quality that produces the best quality/compression ratio
      EXIT(90);
    END;

    [TryFunction]
    [External]
    PROCEDURE GetImageSize@25(ImageInStream@1000 : InStream;VAR Width@1001 : Integer;VAR Height@1002 : Integer);
    VAR
      ImageHandler@1003 : DotNet "'Microsoft.Dynamics.Nav.ImageProcessing, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.ImageProcessing.ImageHandler";
    BEGIN
      ImageHandler := ImageHandler.ImageHandler(ImageInStream);

      Width := ImageHandler.Width;
      Height := ImageHandler.Height;
    END;

    [TryFunction]
    PROCEDURE GetImageSizeBlob@26(VAR TempBlob@1000 : TEMPORARY Record 99008535;VAR Width@1001 : Integer;VAR Height@1002 : Integer);
    VAR
      ImageInStream@1003 : InStream;
    BEGIN
      IF NOT TempBlob.Blob.HASVALUE THEN
        EXIT;

      TempBlob.Blob.CREATEINSTREAM(ImageInStream);

      GetImageSize(ImageInStream,Width,Height);
    END;

    BEGIN
    END.
  }
}

