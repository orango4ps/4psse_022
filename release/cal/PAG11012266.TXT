OBJECT Page 11012266 Blanket Scheme by Order Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Abrufschema pro Auftragszeile;
               ENU=Blanket Scheme by Order Line;
               NLD=Afroepschema per orderregel;
               NOR=Blankettskjema etter ordrerad;
               SVE=Avropsschema efter orderrad];
    SourceTable=Table11012066;
    DelayedInsert=Yes;
    DataCaptionFields=Document No.,Document Line No.;
    PageType=List;
    OnAfterGetRecord=BEGIN
                       GetReceiveOn();
                     END;

    OnNewRecord=BEGIN
                  FillProjAndPlotFromOrderLine();  //DP00416.n
                  InitBlanketDate();
                  InitShipToData();
                  GetReceiveOn();
                END;

    ActionList=ACTIONS
    {
      { 1100525000;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525001;1 ;Action    ;
                      CaptionML=[DEU=Empf„nge Abrufschema buchen;
                                 ENU=Post Receipts Blanket Scheme;
                                 NLD=Ontvangsten afroepschema boeken];
                      Promoted=Yes;
                      Image=Post;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lvPurchHeadRec@1100525000 : Record 38;
                                 BlanketScheme@1100525001 : Record 11012066;
                                 PostRep@1100525002 : Report 11020239;
                               BEGIN
                                 //**4PS.n
                                 TESTFIELD("Document No.");
                                 lvPurchHeadRec.GET(lvPurchHeadRec."Document Type"::Order, "Document No.");

                                 IF NOT (lvPurchHeadRec.Status IN [lvPurchHeadRec.Status::Open, lvPurchHeadRec.Status::Released]) THEN
                                   lvPurchHeadRec.FIELDERROR(Status);

                                 lvPurchHeadRec.SETRANGE("No.", "Document No.");
                                 PostRep.SETTABLEVIEW(lvPurchHeadRec);
                                 PostRep.SetDateFilter("Blanket Date", 0D);
                                 PostRep.SETTABLEVIEW(BlanketScheme);
                                 PostRep.RUNMODAL;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210190000;1;Group  ;
                GroupType=Repeater }

    { 1210190025;2;Field  ;
                SourceExpr="Blanket Date";
                OnValidate=BEGIN
                             CheckDateInFilter();
                             IF ("Blanket Date" < TODAY) THEN BEGIN
                               IF NOT CONFIRM(Text001, FALSE) THEN
                                 ERROR('');
                             END;
                           END;
                            }

    { 1210190007;2;Field  ;
                SourceExpr=Quantity }

    { 1100525002;2;Field  ;
                SourceExpr="Plot No.";
                Visible=FALSE }

    { 1210190011;2;Field  ;
                SourceExpr=Deliver;
                OnValidate=BEGIN
                             GetReceiveOn();
                           END;
                            }

    { 1210190013;2;Field  ;
                SourceExpr="Ship To Location";
                OnValidate=BEGIN
                             GetReceiveOn();
                           END;

                OnLookup=BEGIN
                           LookupShipToLocation();
                           GetReceiveOn();
                         END;
                          }

    { 1210190009;2;Field  ;
                CaptionML=[DEU=Lief. an Name;
                           ENU=Ship-to Name;
                           NLD=Ontvangstnaam;
                           NOR=Lever til-navn;
                           SVE=Leveransnamn];
                SourceExpr=ShipToName;
                Editable=FALSE }

    { 1210190001;2;Field  ;
                CaptionML=[DEU=Lief. an Name 2;
                           ENU=Ship-to Name 2;
                           NLD=Ontvangstnaam 2;
                           NOR=Lever til-navn 2;
                           SVE=Leveransnamn 2];
                SourceExpr=ShipToName2;
                Visible=FALSE;
                Editable=FALSE }

    { 1210190019;2;Field  ;
                CaptionML=[DEU=Lief. an Adresse;
                           ENU=Ship-to Address;
                           NLD=Ontvangstadres;
                           NOR=Lever til-adresse;
                           SVE=Leveransadress];
                SourceExpr=ShipToAddress;
                Editable=FALSE }

    { 1210190003;2;Field  ;
                CaptionML=[DEU=Lief. an Adresse 2;
                           ENU=Ship-to Address 2;
                           NLD=Ontvangstadres 2;
                           NOR=Lever til-adresse 2;
                           SVE=Leveransadress 2];
                SourceExpr=ShipToAddress2;
                Visible=FALSE;
                Editable=FALSE }

    { 1210190027;2;Field  ;
                CaptionML=[DEU=Lief. an PLZ-Code;
                           ENU=Ship-to Post Code;
                           NLD=Ontvangstadres postcode;
                           NOR=Lever til-postnr.;
                           SVE=Leveranspostnrkod];
                SourceExpr=ShipToPostCode;
                Editable=FALSE }

    { 1210190023;2;Field  ;
                CaptionML=[DEU=Lief. an Ort;
                           ENU=Ship-to City;
                           NLD=Ontvangstplaats;
                           NOR=Lever til-by;
                           SVE=Leveransort];
                SourceExpr=ShipToCity;
                Editable=FALSE }

    { 1210190029;2;Field  ;
                CaptionML=[DEU=Kontakt;
                           ENU=Contact;
                           NLD=Contactpersoon;
                           NOR=Kontakt;
                           SVE=Kontakt];
                SourceExpr=ShipToContact;
                Visible=FALSE;
                Editable=FALSE }

    { 1100485000;2;Field  ;
                SourceExpr="Receipts Created";
                Editable=FALSE }

    { 1100528400;2;Field  ;
                SourceExpr=Comment }

    { 1210190002;0;Container;
                ContainerType=FactBoxArea }

    { 1210190004;1;Part   ;
                SubPageLink=Document No.=FIELD(Document No.),
                            Document Line No.=FIELD(Document Line No.),
                            Line No.=FIELD(Line No.);
                PagePartID=Page11130392;
                PartType=Page }

  }
  CODE
  {
    VAR
      PurchHeadRec@1210190007 : Record 38;
      PurchLineRec@1210190006 : Record 39;
      LocRec@1210190002 : Record 14;
      ProjLocRec@1210190001 : Record 11012011;
      ServLocRec@1210190000 : Record 11012801;
      ShipToName@1210190003 : Text[100];
      ShipToName2@1210190009 : Text[50];
      ShipToAddress@1210190004 : Text[100];
      ShipToAddress2@1210190010 : Text[50];
      ShipToPostCode@1210190011 : Text[30];
      ShipToCity@1210190005 : Text[50];
      Text001@1210190008 : TextConst 'DEU=Das Abrufdatum liegt in der Vergangenheit.\ \Sind Sie sich sicher?;ENU="The Blanket Date is in the past.\ \Are you sure? ";NLD=De afroepdatum ligt in het verleden.\ \Bent u zeker?;NOR=Blankettdatoen er i fortiden.\ \Er du sikker?;SVE="Avropsdatumet har f”rfallit.\ \Žr du s„ker? "';
      ShipToContact@1210190012 : Text[100];
      Text002@1100525000 : TextConst 'DEU=%1 muss im Datumsfilter %2..%3 sein;ENU=%1 must be within date filter %2..%3;NLD=%1 moet binnen datumfilter %2..%3 liggen';

    PROCEDURE InitBlanketDate@1100525000();
    VAR
      Date@1100525000 : Record 2000000007;
      DefaultDate@1100525002 : Date;
      I@1100525001 : Integer;
    BEGIN
      Date.SETRANGE("Period Type", Date."Period Type"::Date);
      FOR I := 0 TO 10 DO BEGIN
        FILTERGROUP(I);
        IF GETFILTER("Blanket Date") <> '' THEN
          COPYFILTER("Blanket Date", Date."Period Start")
      END;
      FILTERGROUP(0);
      IF NOT Date.FINDFIRST THEN
        EXIT;
      IF Date."Period Start" < TODAY THEN
        EXIT;
      DefaultDate := Date."Period Start";
      Date.FINDLAST;
      IF DefaultDate = Date."Period Start" THEN
        "Blanket Date" := DefaultDate;
    END;

    PROCEDURE CheckDateInFilter@1100525001();
    VAR
      Date@1100525000 : Record 2000000007;
      StartDate@1100525002 : Date;
      I@1100525001 : Integer;
    BEGIN
      Date.SETRANGE("Period Type", Date."Period Type"::Date);
      FOR I := 0 TO 10 DO BEGIN
        FILTERGROUP(I);
        IF GETFILTER("Blanket Date") <> '' THEN
          COPYFILTER("Blanket Date", Date."Period Start")
      END;
      FILTERGROUP(0);
      IF Date.FINDFIRST THEN BEGIN
        StartDate := Date."Period Start";
        Date.FINDLAST;
      END;
      IF ("Blanket Date" < StartDate) OR ("Blanket Date" > Date."Period Start") THEN
        FIELDERROR("Blanket Date", STRSUBSTNO(Text002, "Blanket Date", StartDate, Date."Period Start"));
    END;

    PROCEDURE GetReceiveOn@1210190000();
    BEGIN
      CASE Deliver OF
        Deliver::Location:
          BEGIN
            IF NOT LocRec.GET("Ship To Location") THEN LocRec.INIT;
            ShipToName := COPYSTR(LocRec.Name,1,MAXSTRLEN(ShipToName));
            ShipToName2 := COPYSTR(LocRec."Name 2",1,MAXSTRLEN(ShipToName2));
            ShipToAddress := COPYSTR(LocRec.Address,1,MAXSTRLEN(ShipToAddress));
            ShipToAddress2 := COPYSTR(LocRec."Address 2",1,MAXSTRLEN(ShipToAddress2));
            ShipToPostCode := COPYSTR(LocRec."Post Code",1,MAXSTRLEN(ShipToPostCode));
            ShipToCity := COPYSTR(LocRec.City,1,MAXSTRLEN(ShipToCity));
            ShipToContact := COPYSTR(LocRec.Contact,1,MAXSTRLEN(ShipToContact));
          END;
        Deliver::"Project Location":
          BEGIN
            GetPurchLineData(PurchLineRec);
            IF NOT ProjLocRec.GET(PurchLineRec."Job No.", "Ship To Location") THEN ProjLocRec.INIT;
            ShipToName := COPYSTR(ProjLocRec.Name,1,MAXSTRLEN(ShipToName));
            ShipToName2 := COPYSTR(ProjLocRec."Name 2",1,MAXSTRLEN(ShipToName2));
            ShipToAddress := COPYSTR(ProjLocRec.Address,1,MAXSTRLEN(ShipToAddress));
            ShipToAddress2 := COPYSTR(ProjLocRec."Address 2",1,MAXSTRLEN(ShipToAddress2));
            ShipToPostCode := COPYSTR(ProjLocRec."Post Code",1,MAXSTRLEN(ShipToPostCode));
            ShipToCity := COPYSTR(ProjLocRec.City,1,MAXSTRLEN(ShipToCity));
            ShipToContact := COPYSTR(ProjLocRec.Contact,1,MAXSTRLEN(ShipToContact));
          END;
        Deliver::"Service Location":
          BEGIN
            IF NOT ServLocRec.GET("Ship To Location") THEN ServLocRec.INIT;
            ShipToName := COPYSTR(ServLocRec.Description,1,MAXSTRLEN(ShipToName));
            ShipToName2 := COPYSTR(ServLocRec."Description 2",1,MAXSTRLEN(ShipToName2));
            ShipToAddress := COPYSTR(ServLocRec.Address,1,MAXSTRLEN(ShipToAddress));
            ShipToAddress2 := COPYSTR(ServLocRec."Address 2",1,MAXSTRLEN(ShipToAddress2));
            ShipToPostCode := COPYSTR(ServLocRec."Post Code",1,MAXSTRLEN(ShipToPostCode));
            ShipToCity := COPYSTR(ServLocRec.City,1,MAXSTRLEN(ShipToCity));
            ShipToContact := COPYSTR(ServLocRec."Contact Name",1,MAXSTRLEN(ShipToContact));
          END;
        ELSE
          IF NOT PurchHeadRec.GET(PurchLineRec."Document Type"::Order, "Document No.") THEN PurchHeadRec.INIT;
          ShipToName := PurchHeadRec."Ship-to Name";
          ShipToName2 := PurchHeadRec."Ship-to Name 2";
          ShipToAddress := PurchHeadRec."Ship-to Address";
          ShipToAddress2 := PurchHeadRec."Ship-to Address 2";
          ShipToPostCode := PurchHeadRec."Ship-to Post Code";
          ShipToCity := PurchHeadRec."Ship-to City";
          ShipToContact := PurchHeadRec."Ship-to Contact";
      END;
    END;

    BEGIN
    END.
  }
}

