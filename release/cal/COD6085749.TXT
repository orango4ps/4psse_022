OBJECT Codeunit 6085749 Purch. Doc. - Reopen
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW13.70.00.5.00.01;
  }
  PROPERTIES
  {
    TableNo=6085590;
    Permissions=TableData 6085700=rimd;
    OnRun=VAR
            PurchHeader@1000000001 : Record 38;
            Field@1000000005 : Record 6085580;
            PurchInvHeader@1000000002 : Record 122;
            PurchInvLine@1160040000 : Record 123;
            PurchCrMemoHeader@1000000003 : Record 124;
            PurchCrMemoLine@1160040001 : Record 125;
            PurchDocMatch@1160040002 : Record 6085700;
            PurchDocMgt@6085573 : Codeunit 6085709;
          BEGIN
            // *********************************************************************************************************************************
            // REOPEN A PURCHASE DOCUMENT. IF THIS IS AN OPEN OR POSTED INVOICE OR CREDIT MEMO IT CAN'T BE REOPEN.
            // *********************************************************************************************************************************

            CASE Status OF
              Status::Open:
                ERROR(Text004,Rec.TABLECAPTION);

              Status::Registered:
                BEGIN
                  TESTFIELD("Created Doc. Type",DATABASE::"Purchase Header");

                  IF "Created Doc. Subtype" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"] THEN BEGIN
                    IF PurchHeader.GET("Created Doc. Subtype","Created Doc. ID") THEN BEGIN
                      IF NOT CONFIRM(Text001,TRUE,PurchHeader."Document Type","Created Doc. ID") THEN
                        ERROR('');

                      // IF INV. AND POSTED INV. NUMBERSERIES ARE THE SAME THIS WILL CAUSE AN ACCEPTABLE ERROR
                      IF PurchHeader.DELETE(TRUE) THEN;
                    END ELSE BEGIN
                      IF "Created Doc. Subtype" = PurchHeader."Document Type"::Invoice THEN BEGIN
                        PurchInvHeader.SETCURRENTKEY("Pre-Assigned No.");
                        PurchInvHeader.SETRANGE("Pre-Assigned No.","Created Doc. ID");
                        IF PurchInvHeader.FINDFIRST THEN BEGIN
                          // CHECK IF THE ORIGINAL DOCUMENT HAS JUST BEEN DELETE
                          PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
                          PurchInvLine.SETFILTER(Type,'>0');
                          IF NOT PurchInvLine.ISEMPTY THEN
                            ERROR(Text002);
                        END;
                      END ELSE
                        IF "Created Doc. Subtype" = PurchHeader."Document Type"::"Credit Memo" THEN BEGIN
                          PurchCrMemoHeader.SETCURRENTKEY("Pre-Assigned No.");
                          PurchCrMemoHeader.SETRANGE("Pre-Assigned No.","Created Doc. ID");
                          IF PurchCrMemoHeader.FINDFIRST THEN BEGIN
                            // CHECK IF THE ORIGINAL DOCUMENT HAS JUST BEEN DELETE
                            PurchCrMemoLine.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                            PurchCrMemoLine.SETFILTER(Type,'>0');
                            IF NOT PurchCrMemoLine.ISEMPTY THEN
                              ERROR(Text002);
                          END;
                        END;

                      IF NOT CONFIRM(Text003,TRUE) THEN
                        ERROR('');
                    END;
                  END ELSE
                    IF "Created Doc. Subtype" = 1 THEN BEGIN // Order
                      PurchInvHeader.SETCURRENTKEY("Vendor Invoice No.");
                      PurchInvHeader.SETRANGE("Vendor Invoice No.",PurchDocMgt.GetDocumentNo(Rec));
                      PurchInvHeader.SETRANGE("Buy-from Vendor No.","Source Record No.");
                      IF PurchInvHeader.FINDFIRST THEN BEGIN
                        PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
                        PurchInvLine.SETFILTER(Type,'>0');
                        IF NOT PurchInvLine.ISEMPTY THEN
                          ERROR(Text002);
                      END;
                    END ELSE
                      IF "Created Doc. Subtype" = PurchHeader."Document Type"::"Return Order" THEN BEGIN
                        PurchCrMemoHeader.SETCURRENTKEY("Vendor Cr. Memo No.");
                        PurchCrMemoHeader.SETRANGE("Vendor Cr. Memo No.",PurchDocMgt.GetDocumentNo(Rec));
                        PurchCrMemoHeader.SETRANGE("Buy-from Vendor No.","Source Record No.");
                        IF PurchCrMemoHeader.FINDFIRST THEN BEGIN
                          PurchCrMemoLine.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                          PurchCrMemoLine.SETFILTER(Type,'>0');
                          IF NOT PurchCrMemoLine.ISEMPTY THEN
                            ERROR(Text002);
                        END;
                      END;

                    IF PurchHeader.GET("Created Doc. Subtype","Created Doc. ID") THEN BEGIN
                      IF CONFIRM(Text005,FALSE,PurchHeader."Document Type",PurchHeader."No.") THEN BEGIN
                        IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN BEGIN
                          IF PurchHeader."Vendor Invoice No." = PurchDocMgt.GetDocumentNo(Rec) THEN BEGIN
                            PurchHeader."Vendor Invoice No." := '';
                            PurchHeader.MODIFY;
                          END;
                        END ELSE
                          IF PurchHeader."Vendor Cr. Memo No." = PurchDocMgt.GetDocumentNo(Rec) THEN BEGIN
                            PurchHeader."Vendor Cr. Memo No." := '';
                            PurchHeader.MODIFY;
                          END;
                      END ELSE
                        ERROR('')
                    END;
                END;

              Status::Rejected:
                IF NOT CONFIRM(STRSUBSTNO(Text003),TRUE) THEN
                  ERROR('');
            END;

            PurchDocMatch.SETRANGE("Document No.","No.");
            PurchDocMatch.DELETEALL;

            DeleteComments(-1);

            "Match Status" := "Match Status"::Unmatched;
            VALIDATE(Status,Status::Open);
            VALIDATE(OK,FALSE);
            MODIFY(TRUE);
          END;

  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'DEU=Dieser Beleg wurde bereits mit %1 %2 verknÅpft.\\Mîchten Sie %1 %2 lîschen, damit dieser Beleg wieder geîffnet werden kann?;ENU=This document is already linked to %1 %2.\\Do you want to delete %1 %2 so this document can be reopened?;NLD="Dit document is reeds gelinkt aan %1 %2.\\Wilt u %1 %2 verwijderen zodat dit document opnieuw kan geopend worden? "';
      Text002@1000000001 : TextConst 'DEU=Dieser Beleg wurde bereits gebucht und kann nicht wieder geîffnet werden.;ENU=This document has already been posted and cannot be reopened.;NLD=Dit document is al geboekt en kan niet worden heropend.';
      Text003@1000000002 : TextConst 'DEU=Mîchten Sie den Beleg wieder îffnen?;ENU=Do you want to reopen the document?;NLD=Wilt u het document heropenen?';
      Text004@1000000003 : TextConst 'DEU=%1 ist bereits geîffnet.;ENU=%1 is already open.;NLD=%1 is al open.';
      Text005@161024012 : TextConst 'DEU=Dieser Beleg wurde bereits mit %1 %2 verknÅpft.\\Mîchten Sie den Beleg trotzdem îffnen?;ENU=This document is already linked to %1 %2.\\Do you want to reopen the document anyway?;NLD=Dit document is al gekoppeld aan %1 %2.\\Wilt u het document toch heropenen?';

    BEGIN
    END.
  }
}

