OBJECT Report 99001023 Get Action Messages
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Ereignismeldungen holen;
               ENU=Get Action Messages;
               NLD=Planningsboodschappen ophalen;
               NOR=Hent handlingsmelding;
               SVE=HÑmta ÜtgÑrdsmeddelanden];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  Window.OPEN(
                    '#1##########################\\' +
                    Text000);
                END;

  }
  DATASET
  {
    { 8129;    ;DataItem;                    ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(Low-Level Code)
                                 WHERE(Order Tracking Policy=CONST(Tracking & Action Msg.));
               OnPreDataItem=BEGIN
                               COPYFILTER("Variant Filter",ActionMessageEntry."Variant Code");
                               COPYFILTER("Location Filter",ActionMessageEntry."Location Code");
                               COPYFILTER("Bin Filter",ActionMessageEntry."Bin Code");

                               ReqLineExtern.SETCURRENTKEY(Type,"No.","Variant Code","Location Code");
                               ReqLineExtern.SETRANGE(Type,ReqLineExtern.Type::Item);
                               COPYFILTER("Variant Filter",ReqLineExtern."Variant Code");
                               COPYFILTER("Location Filter",ReqLineExtern."Location Code");

                               ActionMessageEntry.SETCURRENTKEY("Source Type","Source Subtype","Source ID","Source Batch Name",
                                 "Source Prod. Order Line","Source Ref. No.");
                               ActionMessageEntry2.SETCURRENTKEY("Reservation Entry");

                               TempItemInOtherWksh.DELETEALL;
                               TempActionMsgEntry.DELETEALL;
                               TempReqLineList.DELETEALL;
                               TempPlanningCompList.DELETEALL;

                               ManufacturingSetup.GET;
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1,Text001);
                                  Window.UPDATE(2,"No.");

                                  IF "Order Tracking Policy" <> "Order Tracking Policy"::"Tracking & Action Msg." THEN
                                    CurrReport.SKIP;
                                  ReqLineExtern.SETRANGE(Type,ReqLineExtern.Type::Item);
                                  ReqLineExtern.SETRANGE("No.","No.");
                                  IF ReqLineExtern.FINDFIRST THEN BEGIN
                                    TempItemInOtherWksh := Item;
                                    TempItemInOtherWksh.INSERT;
                                    CurrReport.SKIP;
                                  END;

                                  ActionMessageEntry.SETRANGE("Item No.","No.");
                                  IF ActionMessageEntry.FIND('-') THEN
                                    REPEAT
                                      ActionMessageEntry.SetSourceFilterFromActionEntry(ActionMessageEntry);
                                      ActionMessageEntry.SETRANGE("Location Code",ActionMessageEntry."Location Code");
                                      ActionMessageEntry.SETRANGE("Bin Code",ActionMessageEntry."Bin Code");
                                      ActionMessageEntry.SETRANGE("Variant Code",ActionMessageEntry."Variant Code");
                                      IF ActionMessageEntry."Source ID" = '' THEN BEGIN
                                        TempNewActionMsgEntry.DELETEALL;
                                        REPEAT
                                          TrkgReservEntry.GET(ActionMessageEntry."Reservation Entry",FALSE);
                                          IF TempNewActionMsgEntry.GET(
                                               TrkgReservEntry."Shipment Date" - 19000101D)
                                          THEN BEGIN // Generate Entry No. in date order.
                                            TempNewActionMsgEntry.Quantity += ActionMessageEntry.Quantity;
                                            TempNewActionMsgEntry.MODIFY;
                                          END ELSE BEGIN
                                            TempNewActionMsgEntry := ActionMessageEntry;
                                            TempNewActionMsgEntry."Entry No." := TrkgReservEntry."Shipment Date" - 19000101D;
                                            TempNewActionMsgEntry."New Date" := TrkgReservEntry."Shipment Date";
                                            TempNewActionMsgEntry.INSERT;
                                          END;
                                        UNTIL ActionMessageEntry.NEXT = 0;

                                        TempNewActionMsgEntry.FIND('-');
                                        REPEAT
                                          TempActionMsgEntry := TempNewActionMsgEntry;
                                          NextEntryNo := NextEntryNo + 1;
                                          TempActionMsgEntry."Entry No." := NextEntryNo;
                                          TempActionMsgEntry.INSERT;
                                        UNTIL TempNewActionMsgEntry.NEXT = 0;
                                      END ELSE BEGIN
                                        IF ActionMessageEntry.FIND('+') THEN
                                          UpdateActionMsgList(ActionMessageEntry."Source Type",ActionMessageEntry."Source Subtype",
                                            ActionMessageEntry."Source ID",ActionMessageEntry."Source Batch Name",
                                            ActionMessageEntry."Source Prod. Order Line",ActionMessageEntry."Source Ref. No.",
                                            ActionMessageEntry."Location Code",ActionMessageEntry."Bin Code",
                                            ActionMessageEntry."Variant Code",ActionMessageEntry."Item No.",0D);
                                      END;
                                      ActionMessageEntry.ClearSourceFilter;
                                      ActionMessageEntry.SETRANGE("Location Code");
                                      ActionMessageEntry.SETRANGE("Bin Code");
                                      ActionMessageEntry.SETRANGE("Variant Code");
                                    UNTIL ActionMessageEntry.NEXT = 0;
                                END;

               OnPostDataItem=BEGIN
                                IF TempItemInOtherWksh.FINDFIRST THEN BEGIN
                                  Window.CLOSE;
                                  IF CONFIRM(Text002)THEN
                                    PAGE.RUNMODAL(0,TempItemInOtherWksh);
                                  IF NOT CONFIRM(Text005) THEN
                                    ERROR(Text006);
                                  Window.OPEN(
                                    '#1##########################\\' +
                                    Text000);
                                END;

                                Window.UPDATE(1,Text007);

                                TempActionMsgEntry.RESET;
                                PlanningLinesInserted := FALSE;
                                IF NOT TempActionMsgEntry.FIND('-') THEN
                                  ERROR(Text008);

                                REPEAT
                                  GetActionMessages(TempActionMsgEntry);
                                UNTIL TempActionMsgEntry.NEXT = 0;

                                IF NOT PlanningLinesInserted THEN
                                  ERROR(Text008);

                                // Dynamic tracking is run for the handled Planning Lines:
                                IF TempReqLineList.FIND('-') THEN
                                  REPEAT
                                    ReservMgt.SetReqLine(TempReqLineList);
                                    ReservMgt.AutoTrack(TempReqLineList."Net Quantity (Base)");
                                  UNTIL TempReqLineList.NEXT = 0;

                                // Dynamic tracking is run for the handled Planning Components:
                                IF TempPlanningCompList.FIND('-') THEN
                                  REPEAT
                                    ReservMgt.SetPlanningComponent(TempPlanningCompList);
                                    ReservMgt.AutoTrack(TempPlanningCompList."Net Quantity (Base)");
                                  UNTIL TempPlanningCompList.NEXT = 0;
                              END;

               ReqFilterFields=No.,Search Description }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Artikelnr. #2##################;ENU=Item No.  #2##################;NLD=Art.-nr.  #2##################;NOR=Varenr.   #2##################;SVE=Art.nr    #2##################';
      Text001@1001 : TextConst 'DEU=EreignismeldungsÅbersicht erstellen...;ENU=Building action message list...;NLD=Opbouwen planningsboodschappenoverzicht...;NOR=Setter opp handlingsmeldingsliste...;SVE=Skapar ÜtgÑrdsmedd.lista...';
      Text002@1002 : TextConst
        'DEU=Einige Artikel innerhalb des Filters sind bereits in den Planungszeilen vorhanden.\Ereignismeldungen fÅr diese Artikel werden nicht verarbeitet.\\Soll eine öbersicht mit den nicht verarbeiteten Artikeln angezeigt werden?',
        'ENU=Some items within the filter already exist on the planning lines.\Action messages that are related to these items will not be processed.\\Do you want to see a list of the unprocessed items?',
        'NLD=Sommige artikelen binnen het ingestelde filter zijn reeds opgenomen in bestaande planningsregels.\Planningsboodschappen die aan deze artikelen zijn gekoppeld, worden niet verwerkt.\\Wilt u een overzicht van de niet verwerkte artikelen bekijken?',
        'NOR=Noen av varene i filteret finnes allerede pÜ planleggingslinjer.\Handlingsmeldinger som er relatert til disse varene, vil ikke bli behandlet.\\Vil du vise en liste over de ubehandlede varene?',
        'SVE=NÜgra artiklar i filtret finns redan pÜ planeringsraderna.\ètgÑrdsmeddelanden som gÑller dessa artiklar behandlas inte.\\Vill du visa en lista îver de obehandlade artiklarna?';
      Text005@1005 : TextConst 'DEU=Mîchten Sie fortfahren?;ENU=Do you want to continue?;NLD=Wilt u doorgaan?;NOR=Vil du fortsette?;SVE=Vill du fortsÑtta?';
      Text006@1006 : TextConst 'DEU=Der Vorgang wurde abgebrochen.;ENU=The process has been canceled.;NLD=De verwerking is geannuleerd.;NOR=Behandlingen er avbrutt.;SVE=Behandlingen har avbrutits.';
      Text007@1007 : TextConst 'DEU=Ereignismeldungen werden durchgelesen...;ENU=Processing action messages...;NLD=Verwerken planningsboodschappen...;NOR=Behandler handlingsmeldinger...;SVE=Behandlar ÜtgÑrdsmeddelanden...';
      Text008@1008 : TextConst 'DEU=Keine Ereignismeldungen vorhanden.;ENU=No action messages exist.;NLD=Er bestaan geen planningsboodschappen.;NOR=Det finnes ingen handlingsmelding.;SVE=Det finns inga ÜtgÑrdsmeddelanden.';
      Text009@1009 : TextConst 'DEU=HoleEreignismeldungen: UngÅltige EreignismeldungsverknÅpfung;ENU=GetActionMessages: Illegal Action Message relation.;NLD=Functie HaalPlanningsberichten: Ongeldige planningsboodschaprelatie.;NOR=GetActionMessages: Ugyldig handlingsmeldingsforbindelse.;SVE=HÑmtaètgÑrdsMedd.: Ej tillÜten ÜtgÑrdsmedd.relation.';
      ReqLineExtern@1010 : Record 246;
      TrkgReservEntry@1011 : Record 337;
      TempItemInOtherWksh@1012 : TEMPORARY Record 27;
      TempActionMsgEntry@1013 : TEMPORARY Record 99000849;
      TempNewActionMsgEntry@1014 : TEMPORARY Record 99000849;
      ActionMessageEntry@1015 : Record 99000849;
      ActionMessageEntry2@1016 : Record 99000849;
      ManufacturingSetup@1017 : Record 99000765;
      TempPlanningCompList@1018 : TEMPORARY Record 99000829;
      TempReqLineList@1019 : TEMPORARY Record 246;
      SKU@1020 : Record 5700;
      InvtProfileOffsetting@1021 : Codeunit 99000854;
      ReservMgt@1022 : Codeunit 99000845;
      GetPlanningParameters@1023 : Codeunit 99000855;
      UOMMgt@1003 : Codeunit 5402;
      Window@1024 : Dialog;
      NextEntryNo@1025 : Integer;
      CurrTemplateName@1026 : Code[10];
      CurrWorksheetName@1027 : Code[10];
      PlanningLinesInserted@1028 : Boolean;

    [External]
    PROCEDURE SetTemplAndWorksheet@2(TemplateName@1000 : Code[10];WorksheetName@1001 : Code[10]);
    BEGIN
      CurrTemplateName := TemplateName;
      CurrWorksheetName := WorksheetName;
    END;

    [External]
    PROCEDURE UpdateActionMsgList@1(ForType@1000 : Integer;ForSubtype@1001 : Integer;ForID@1002 : Code[20];ForBatchName@1003 : Code[10];ForProdOrderLine@1004 : Integer;ForRefNo@1005 : Integer;ForLocation@1006 : Code[10];ForBin@1007 : Code[10];ForVariant@1008 : Code[10];ForItem@1009 : Code[20];OrderDate@1010 : Date);
    BEGIN
      WITH TempActionMsgEntry DO BEGIN
        SetSourceFilter(ForType,ForSubtype,ForID,ForRefNo,FALSE);
        SetSourceFilter2(ForBatchName,ForProdOrderLine);
        SETRANGE("Location Code",ForLocation);
        SETRANGE("Bin Code",ForBin);
        SETRANGE("Variant Code",ForVariant);
        SETRANGE("Item No.",ForItem);
        SETRANGE("New Date",OrderDate);
        IF FIND('-') THEN
          EXIT;

        SetSource(ForType,ForSubtype,ForID,ForRefNo,ForBatchName,ForProdOrderLine);
        "Location Code" := ForLocation;
        "Bin Code" := ForBin;
        "Variant Code" := ForVariant;
        "Item No." := ForItem;
        "New Date" := OrderDate;
        NextEntryNo := NextEntryNo + 1;
        "Entry No." := NextEntryNo;
        INSERT;
      END;
    END;

    [External]
    PROCEDURE GetActionMessages@10(ActionMsgEntry@1000 : Record 99000849);
    VAR
      ReqLine@1003 : Record 246;
      InsertNew@1005 : Boolean;
    BEGIN
      IF ActionMsgEntry."Source ID" = '' THEN BEGIN // Not related to existing order.
        ActionMessageEntry := ActionMsgEntry;
      END ELSE BEGIN
        ActionMessageEntry.SetSourceFilterFromActionEntry(ActionMsgEntry);
        ActionMessageEntry.SETRANGE("Location Code",ActionMsgEntry."Location Code");
        ActionMessageEntry.SETRANGE("Bin Code",ActionMsgEntry."Bin Code");
        ActionMessageEntry.SETRANGE("Variant Code",ActionMsgEntry."Variant Code");
        ActionMessageEntry.SETRANGE("Item No.",ActionMsgEntry."Item No.");
        IF NOT ActionMessageEntry.FIND('-') THEN
          EXIT;
      END;

      WITH ActionMessageEntry DO BEGIN
        GetPlanningParameters.AtSKU(SKU,"Item No.","Variant Code","Location Code");
        InsertNew := FALSE;
        ReqLine."Worksheet Template Name" := CurrTemplateName;
        ReqLine."Journal Batch Name" := CurrWorksheetName;
        ReqLine."Line No." += 10000;
        WHILE NOT ReqLine.INSERT DO
          ReqLine."Line No." += 10000;

        InsertNew := InitReqFromSource(ActionMsgEntry,ReqLine);

        Window.UPDATE(2,ReqLine."No.");

        IF ActionMsgEntry."Source ID" = '' THEN BEGIN
          Quantity := ActionMsgEntry.Quantity;
          Type := Type::New;
          ReqLine."Due Date" := ActionMsgEntry."New Date";
          ReqLine."Ending Date" := ReqLine."Due Date" - 1;
        END ELSE
          SumUp(ActionMessageEntry);

        IF Quantity < 0 THEN
          IF SKU."Lot Size" > 0 THEN
            IF ManufacturingSetup."Default Dampener %" > 0 THEN
              IF ManufacturingSetup."Default Dampener %" * SKU."Lot Size" / 100 >= ABS(Quantity) THEN
                Quantity := 0;
        IF (Quantity = 0) AND ("New Date" = 0D) THEN
          EXIT;

        ReqLine."Original Quantity" := ReqLine.Quantity;
        ReqLine."Quantity (Base)" += Quantity;
        ReqLine.Quantity := ROUND(ReqLine."Quantity (Base)" / ReqLine."Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
        ReqLine."Remaining Quantity" := ReqLine.Quantity - ReqLine."Finished Quantity";
        ReqLine."Remaining Qty. (Base)" :=
          ROUND(ReqLine."Remaining Quantity" / ReqLine."Qty. per Unit of Measure",UOMMgt.QtyRndPrecision);
        IF InsertNew THEN
          Type := Type::New;
        IF "New Date" <> 0D THEN BEGIN
          IF Type <> Type::New THEN
            ReqLine."Original Due Date" := ReqLine."Due Date";
          ReqLine."Due Date" := "New Date";
          ReqLine."Starting Date" := 0D;
          IF BoundToComponent THEN BEGIN
            ReqLine."Ending Date" := ComponentDueDate;
            ReqLine."Ending Time" := ComponentDueTime;
          END ELSE
            ReqLine."Ending Date" := 0D;
        END;
        IF ReqLine.Quantity = 0 THEN BEGIN
          ReqLine."Action Message" := ReqLine."Action Message"::Cancel;
        END ELSE
          ReqLine."Action Message" := Type;
        ReqLine."Planning Line Origin" := ReqLine."Planning Line Origin"::"Action Message";
        ReqLine."Accept Action Message" := TRUE;
        ReqLine.MODIFY;
        IF ReqLine."Starting Date" = 0D THEN
          ReqLine."Starting Date" := ReqLine."Due Date";
        IF ReqLine."Ending Date" = 0D THEN
          ReqLine."Ending Date" := ReqLine."Due Date" - 1;
        ReqLine.BlockDynamicTracking(TRUE);
        GetRoutingAndComponents(ReqLine);
        IF ReqLine."Original Due Date" <> 0D THEN
          IF NOT (ReqLine."Action Message" IN [ReqLine."Action Message"::Reschedule,
                                               ReqLine."Action Message"::"Resched. & Chg. Qty."])
          THEN
            ReqLine."Original Due Date" := 0D;
        IF ReqLine."Original Quantity" = ReqLine.Quantity THEN BEGIN
          IF ReqLine."Action Message" = ReqLine."Action Message"::"Resched. & Chg. Qty." THEN
            ReqLine."Action Message" := ReqLine."Action Message"::Reschedule;
        END;
        ReqLine.VALIDATE(Quantity);
        IF ReqLine."Action Message" = ReqLine."Action Message"::Reschedule THEN
          ReqLine."Original Quantity" := 0;
        ReqLine.MODIFY;
        CLEAR(ReqLineExtern);

        // Retrieve temporary list of Planning Components handled:
        InvtProfileOffsetting.GetPlanningCompList(TempPlanningCompList);

        // Save inserted Planning Line in temporary list:
        TempReqLineList := ReqLine;
        TempReqLineList.INSERT;

        PlanningLinesInserted := TRUE;
      END;
    END;

    LOCAL PROCEDURE InitReqFromSource@3(ActionMsgEntry@1000 : Record 99000849;VAR ReqLine@1001 : Record 246) : Boolean;
    VAR
      ProdOrderLine@1006 : Record 5406;
      PurchOrderLine@1005 : Record 39;
      TransLine@1003 : Record 5741;
      AsmHeader@1002 : Record 900;
    BEGIN
      WITH ActionMsgEntry DO
        CASE "Source Type" OF
          DATABASE::"Prod. Order Line":
            IF ProdOrderLine.GET("Source Subtype","Source ID","Source Prod. Order Line") THEN BEGIN
              ReqLine.GetProdOrderLine(ProdOrderLine);
              EXIT(FALSE);
            END;
          DATABASE::"Purchase Line":
            IF PurchOrderLine.GET("Source Subtype","Source ID","Source Ref. No.") THEN BEGIN
              ReqLine.GetPurchOrderLine(PurchOrderLine);
              EXIT(FALSE);
            END;
          DATABASE::"Transfer Line":
            IF TransLine.GET("Source ID","Source Ref. No.") THEN BEGIN
              ReqLine.GetTransLine(TransLine);
              EXIT(FALSE);
            END;
          DATABASE::"Assembly Header":
            IF AsmHeader.GET("Source Subtype","Source ID") THEN BEGIN
              ReqLine.GetAsmHeader(AsmHeader);
              EXIT(FALSE);
            END;
          ELSE
            ERROR(Text009)
        END;
      ReqLine.TransferFromActionMessage(ActionMsgEntry);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetRoutingAndComponents@4(VAR ReqLine@1000 : Record 246);
    VAR
      Direction@1001 : 'Forward,Backward';
    BEGIN
      InvtProfileOffsetting.GetRouting(ReqLine);
      InvtProfileOffsetting.GetComponents(ReqLine);
      InvtProfileOffsetting.Recalculate(ReqLine,Direction::Backward,TRUE);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

