OBJECT Report 11012429 Export Budget Price to Excel
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Veranschlagten Preis in Excel exportieren;
               ENU=Export Budget Price to Excel;
               NLD=Begrote prijs naar Excel exporteren];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  CheckFilePath;
                  ClearExcelBuffer;
                  AddHeaderRow;
                END;

    OnPostReport=BEGIN
                   CreateExcelBook;
                 END;

  }
  DATASET
  {
    { 1100529600;;DataItem;                  ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  AddLineRow("No.", Description, "Base Unit of Measure", "Unit Cost", "Global Dimension 2 Code");
                                END;
                                 }

    { 1100529601;;DataItem;                  ;
               DataItemTable=Table11229373;
               DataItemTableView=SORTING(Subcontracting Activity,Subcontractor No.)
                                 WHERE(Preferred Subcontractor=CONST(Yes));
               OnAfterGetRecord=BEGIN
                                  AddLineRow("Subcontracting Activity", "Activity Description", "Unit of Measure", GetPrice(WORKDATE), "Cost Object");
                                END;

               CalcFields=Activity Description }

    { 1100529602;0;DataItem;                 ;
               DataItemTable=Table11012567;
               DataItemTableView=SORTING(Rental Type,Plant Type,Plant No.,Starting Date)
                                 WHERE(Plant No.=FILTER(''),
                                       Ending Date=FILTER(''));
               OnPreDataItem=BEGIN
                               IF ExportPlantPriceBy = ExportPlantPriceBy::Hour THEN
                                 SETRANGE("Rental Type", "Rental Type"::"Plant Hours")
                               ELSE
                                 SETRANGE("Rental Type", "Rental Type"::Rental);
                             END;

               OnAfterGetRecord=VAR
                                  PlantType@1100529600 : Record 11012551;
                                BEGIN
                                  IF PlantType.GET("Plant Type") THEN
                                    AddLineRow(PlantType.Code, PlantType.Description, PlantUOM, "Cost Price", PlantType."Cost Object");
                                END;
                                 }

    { 1100529603;;DataItem;                  ;
               DataItemTable=Table11012000;
               DataItemTableView=SORTING(Code,Starting Date)
                                 WHERE(Ending Date=FILTER(''));
               OnPreDataItem=BEGIN
                               SETRANGE("Rate Type", BudgetRateLabourBy);
                             END;

               OnAfterGetRecord=BEGIN
                                  AddLineRow(Code, Description, LabourUOM, "Estimate Rate", "Cost Object");
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100529600;;Container;
                  ContainerType=ContentArea }

      { 1100529601;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100529603;2;Field  ;
                  AssistEdit=Yes;
                  CaptionML=[DEU=Dateiname;
                             ENU=File Name;
                             NLD=Bestandsnaam;
                             NOR=Filnavn;
                             SVE=Filnamn];
                  SourceExpr=RequestFileName;
                  OnValidate=BEGIN
                               FileMgt.SplitFileAbsPathName(RequestFileName, FolderName, FileName);
                             END;

                  OnAssistEdit=VAR
                                 FileMgt@1100525000 : Codeunit 419;
                               BEGIN
                                 IF NOT FileMgt.SelectFile('xlsx', FolderName, FileName, RequestFileName) THEN
                                   FileMgt.SplitFileAbsPathName(RequestFileName, FolderName, FileName);
                               END;
                                }

      { 1100529602;2;Field  ;
                  CaptionML=[DEU=Werkzeug aufgrund;
                             ENU=Plant Prices By;
                             NLD=Materieel obv];
                  OptionCaptionML=[DEU=Stundentarif,Mietungstarif;
                                   ENU=Hour,Day;
                                   NLD=Uurtarieven,Huurtarieven];
                  SourceExpr=ExportPlantPriceBy }

      { 1100529604;2;Field  ;
                  CaptionML=[DEU=Werkzeugeinheit;
                             ENU=Plant Unit of Measure;
                             NLD=Eenheid materieel;
                             NOR=Maskin MÜleenhet;
                             SVE=Maskin mÜttenhet];
                  SourceExpr=PlantUOM;
                  TableRelation="Unit of Measure" }

      { 1100529605;2;Field  ;
                  CaptionML=[DEU=Arbeit auf Grund von;
                             ENU=Labour By;
                             NLD=Arbeid obv];
                  OptionCaptionML=[DEU=Stunden,Minuten;
                                   ENU=Hours,Minuts;
                                   NLD=Uren,Minuten;
                                   NOR=Timer,Minutter;
                                   SVE=Timmar,Minuter];
                  SourceExpr=BudgetRateLabourBy }

      { 1100529606;2;Field  ;
                  CaptionML=[DEU=Einheit Arbeit;
                             ENU=Labour Unit of Measure;
                             NLD=Eenheid Arbeid];
                  SourceExpr=LabourUOM;
                  TableRelation="Unit of Measure" }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ExcelBuffer@1100529600 : TEMPORARY Record 370;
      Text001@1100529612 : TextConst 'DEU=Geben Sie einen Dateipfad ein.;ENU=You must enter a file path.;NLD=U moet een bestandspad invoeren.;NOR=Du mÜ angi en filbane.;SVE=Du mÜste ange en filsîkvÑg.';
      Text002@1100529614 : TextConst 'DEU=Ordner %1 is nicht vorhanden.;ENU=Folder %1 does not exist.;NLD=Map %1 bestaat niet.';
      Text003@1100529613 : TextConst 'DEU=Die Datei %1 ist bereits vorhanden. Mîchten Sie diese Åberschreiben?;ENU=File %1 already exists, overwrite?;NLD=Bestand %1 bestaat reeds, overschrijven?;NOR=Filen %1 finnes allerede, vil du skrive over?;SVE=Filen %1 finns redan. Vill du skriva îver den?';
      Text004@1100529606 : TextConst 'DEU=Datei %1 bereits vorhanden.;ENU=File %1 already exists.;NLD=Bestand %1 bestaat al.';
      ArticleCodeColCaption@1100529601 : TextConst 'DEU=Artikelcode;ENU=Article code;NLD=Artikelcode';
      DescriptionColCaption@1100529602 : TextConst 'DEU=Beschreibung;ENU=Description;NLD=Omschrijving;NOR=Beskrivelse;SVE=Beskrivning';
      UOMColCaption@1100529603 : TextConst 'DEU=Einheit;ENU=Unit of measure;NLD=Eenheid;SVE=Enhet';
      PriceColCaption@1100529604 : TextConst 'DEU=VK-Preis;ENU=Price;NLD=Prijs;NOR=Pris;SVE=Pris';
      CostObjectColCaption@1100529605 : TextConst 'DEU=KostentrÑger;ENU=Cost object;NLD=Kostendrager;SVE=Kostnadsobjekt';
      FileMgt@1100529610 : Codeunit 419;
      RequestFileName@1100529609 : Text;
      FileName@1100529608 : Text;
      FolderName@1100529607 : Text;
      SheetCaption@1100529611 : TextConst 'DEU=Seite 1;ENU=Sheet1;NLD=Blad1;SVE=Blad1';
      NumberFormat@1100529615 : TextConst 'DEU=#,##0.00;ENU=#,##0.00;NLD=#,##0.00;SVE=#,##0.00';
      ExportPlantPriceBy@1100529616 : 'Hour,Day';
      PlantUOM@1100529617 : Code[10];
      BudgetRateLabourBy@1100529618 : 'Hours,Minuts';
      LabourUOM@1100529619 : Code[10];

    LOCAL PROCEDURE CheckFilePath@1100529609();
    VAR
      FileNameLoc@1100529600 : Text;
      FileExtLoc@1100529601 : Text;
    BEGIN
      IF RequestFileName = '' THEN
        ERROR(Text001);

      FileMgt.SplitFileAbsPathName(RequestFileName, FolderName, FileName);

      IF NOT FileMgt.ClientDirectoryExists(FolderName) THEN
        ERROR(Text002, FolderName);

      IF FileName <> '' THEN BEGIN
        FileNameLoc := FileMgt.GetFileNameWithoutExtension(FileName);
        FileExtLoc := '.' + FileMgt.GetExtension(FileName);
      END;

      IF FileNameLoc = '' THEN
        FileNameLoc := CurrReport.OBJECTID(TRUE);
      IF FileExtLoc = '' THEN
        FileExtLoc := '.xlsx';

      FileName := FileNameLoc + '_' +
                  FORMAT(TODAY, 0, '<Day,2><Month,2><Year4>') + '_' +
                  FORMAT(TIME, 0, '<Hours24,2><Minutes,2><Seconds,2>') +
                  FileExtLoc;

      IF NOT FileMgt.ClientFileExists(FolderName + FileName) THEN
        EXIT;

      IF GUIALLOWED THEN BEGIN
        IF NOT CONFIRM(Text003, TRUE, FolderName + FileName) THEN
          ERROR('');
        FileMgt.DeleteClientFile(FolderName + FileName);
      END ELSE
        ERROR(Text004, FileName);
    END;

    LOCAL PROCEDURE ClearExcelBuffer@1100529613();
    BEGIN
      ExcelBuffer.RESET;
      ExcelBuffer.DELETEALL;
      CLEAR(ExcelBuffer);
      ExcelBuffer.ClearNewRow;
    END;

    LOCAL PROCEDURE AddHeaderRow@1100529601();
    BEGIN
      ExcelBuffer.NewRow;
      ExcelBuffer.AddColumn(ArticleCodeColCaption, FALSE, '', TRUE, FALSE, FALSE, '', ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(DescriptionColCaption, FALSE, '', TRUE, FALSE, FALSE, '', ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(UOMColCaption, FALSE, '', TRUE, FALSE, FALSE, '', ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(PriceColCaption, FALSE, '', TRUE, FALSE, FALSE, '', ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(CostObjectColCaption, FALSE, '', TRUE, FALSE, FALSE, '', ExcelBuffer."Cell Type"::Text);
    END;

    LOCAL PROCEDURE AddLineRow@1100529611(ArticleCode@1100529606 : Code[20];Description@1100529607 : Text[100];UOM@1100529608 : Code[10];Price@1100529609 : Decimal;CostObject@1100529610 : Code[20]);
    BEGIN
      ExcelBuffer.NewRow;
      ExcelBuffer.AddColumn(ArticleCode, FALSE, '', FALSE, FALSE, FALSE, '', ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(Description, FALSE, '', FALSE, FALSE, FALSE, '', ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(UOM, FALSE, '', FALSE, FALSE, FALSE, '', ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(Price, FALSE, '', FALSE, FALSE, FALSE, NumberFormat, ExcelBuffer."Cell Type"::Number);
      ExcelBuffer.AddColumn(CostObject, FALSE, '', FALSE, FALSE, FALSE, '', ExcelBuffer."Cell Type"::Text);
    END;

    LOCAL PROCEDURE CreateExcelBook@1100529612();
    BEGIN
      IF FileMgt.ClientAvailable THEN
        ExcelBuffer.CreateBook('', SheetCaption)
      ELSE
        ExcelBuffer.CreateBook(FolderName + FileName, SheetCaption);
      ExcelBuffer.WriteSheet(CurrReport.OBJECTID, COMPANYNAME, USERID);
      ExcelBuffer.CloseBook;
      IF NOT GUIALLOWED THEN
        EXIT;
      IF FileMgt.IsWebClient THEN BEGIN
        DOWNLOAD(FolderName + FileName, '', '', '', FileName);
        EXIT;
      END;
      ExcelBuffer.OpenExcelWithName(FolderName + FileName);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

