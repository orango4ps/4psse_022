OBJECT Codeunit 7171 Sales Info-Pane Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Item@1001 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesPriceCalcMgt@1002 : Codeunit 7000;
      AvailableToPromise@1005 : Codeunit 5790;
      UOMMgt@1000 : Codeunit 5402;
      CompanyLogistics@1100485000 : Text[50];

    [External]
    PROCEDURE CalcAvailability@18(VAR SalesLine@1000 : Record 37) : Decimal;
    VAR
      GrossRequirement@1002 : Decimal;
      ScheduledReceipt@1003 : Decimal;
      AvailableQuantity@1004 : Decimal;
      PeriodType@1006 : 'Day,Week,Month,Quarter,Year';
      LookaheadDateformula@1005 : DateFormula;
      IsHandled@1001 : Boolean;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);
        IsHandled := FALSE;
        OnBeforeCalcAvailability(Item,SalesLine,AvailableQuantity,IsHandled);
        IF IsHandled THEN
          EXIT(AvailableQuantity);

        EVALUATE(LookaheadDateformula,'<0D>');
        AvailableToPromise.SetCompanyLogistics(CompanyLogistics); //**4PS.n
        EXIT(
          ConvertQty(
            AvailableToPromise.QtyAvailabletoPromise(
              Item,
              GrossRequirement,
              ScheduledReceipt,
              CalcAvailabilityDate(SalesLine),
              PeriodType,
              LookaheadDateformula),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    [External]
    PROCEDURE CalcAvailabilityDate@27(VAR SalesLine@1000 : Record 37) : Date;
    BEGIN
      IF SalesLine."Shipment Date" <> 0D THEN
        EXIT(SalesLine."Shipment Date");

      EXIT(WORKDATE);
    END;

    [External]
    PROCEDURE CalcAvailableInventory@9(VAR SalesLine@1000 : Record 37) : Decimal;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);

        EXIT(
          ConvertQty(
            AvailableToPromise.CalcAvailableInventory(Item),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    [External]
    PROCEDURE CalcScheduledReceipt@21(VAR SalesLine@1001 : Record 37) : Decimal;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);

        EXIT(
          ConvertQty(
            AvailableToPromise.CalcScheduledReceipt(Item),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    [External]
    PROCEDURE CalcGrossRequirements@23(VAR SalesLine@1001 : Record 37) : Decimal;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);

        EXIT(
          ConvertQty(
            AvailableToPromise.CalcGrossRequirement(Item),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    [External]
    PROCEDURE CalcReservedRequirements@25(VAR SalesLine@1001 : Record 37) : Decimal;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);

        EXIT(
          ConvertQty(
            AvailableToPromise.CalcReservedReceipt(Item),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    [External]
    PROCEDURE CalcReservedDemand@26(SalesLine@1000 : Record 37) : Decimal;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        SetItemFilter(Item,SalesLine);

        AvailableToPromise.SetCompanyLogistics(CompanyLogistics); //**4PS.n
        EXIT(
          ConvertQty(
            AvailableToPromise.CalcReservedRequirement(Item),
            SalesLine."Qty. per Unit of Measure"));
      END;
    END;

    [External]
    PROCEDURE CalcNoOfSubstitutions@20(VAR SalesLine@1000 : Record 37) : Integer;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        Item.CALCFIELDS("No. of Substitutes");
        EXIT(Item."No. of Substitutes");
      END;
    END;

    [External]
    PROCEDURE CalcNoOfSalesPrices@19(VAR SalesLine@1000 : Record 37) : Integer;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        GetSalesHeader(SalesLine);
        EXIT(SalesPriceCalcMgt.NoOfSalesLinePrice(SalesHeader,SalesLine,TRUE));
      END;
    END;

    [External]
    PROCEDURE CalcNoOfSalesLineDisc@22(VAR SalesLine@1001 : Record 37) : Integer;
    BEGIN
      IF GetItem(SalesLine) THEN BEGIN
        GetSalesHeader(SalesLine);
        EXIT(SalesPriceCalcMgt.NoOfSalesLineLineDisc(SalesHeader,SalesLine,TRUE));
      END;
    END;

    LOCAL PROCEDURE ConvertQty@28(Qty@1000 : Decimal;PerUoMQty@1001 : Decimal) : Decimal;
    BEGIN
      IF PerUoMQty = 0 THEN
        PerUoMQty := 1;
      EXIT(ROUND(Qty / PerUoMQty,UOMMgt.QtyRndPrecision));
    END;

    [External]
    PROCEDURE LookupItem@7(VAR SalesLine@1000 : Record 37);
    VAR
      IsHandled@1001 : Boolean;
    BEGIN
      OnBeforeLookupItem(SalesLine,Item,IsHandled);
      IF IsHandled THEN
        EXIT;

      //SalesLine.TESTFIELD(Type,SalesLine.Type::Item);  //**4PS.n
      SalesLine.TESTFIELD("No.");
      GetItem(SalesLine);
      PAGE.RUNMODAL(PAGE::"Item Card",Item);
    END;

    [External]
    PROCEDURE ResetItemNo@2();
    BEGIN
      AvailableToPromise.ResetItemNo;
    END;

    LOCAL PROCEDURE GetItem@24(VAR SalesLine@1000 : Record 37) : Boolean;
    BEGIN
      WITH Item DO BEGIN
        //**4PS.so
        //IF (SalesLine.Type <> SalesLine.Type::Item) OR (SalesLine."No." = '') THEN
        //  EXIT(FALSE);
        //
        //IF SalesLine."No." <> "No." THEN
        //  GET(SalesLine."No.");
        //**4PS.eo

        //**4PS.sn
        CHANGECOMPANY(CompanyLogistics);
        IF SalesLine."Item No." = '' THEN
          EXIT(FALSE);
        IF SalesLine."Item No." <> "No." THEN
          GET(SalesLine."Item No.");
        //**4PS.en

        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetSalesHeader@13(VAR SalesLine@1000 : Record 37);
    BEGIN
      IF (SalesLine."Document Type" <> SalesHeader."Document Type") OR
         (SalesLine."Document No." <> SalesHeader."No.")
      THEN
        SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
    END;

    LOCAL PROCEDURE SetItemFilter@4(VAR Item@1000 : Record 27;VAR SalesLine@1001 : Record 37);
    BEGIN
      Item.CHANGECOMPANY(CompanyLogistics); //**4PS.n
      Item.RESET;
      Item.SETRANGE("Date Filter",0D,CalcAvailabilityDate(SalesLine));
      Item.SETRANGE("Variant Filter",SalesLine."Variant Code");
      //**4PS.sn
      IF CompanyLogistics <> '' THEN BEGIN
        GetSalesHeader(SalesLine);
        Item.SETRANGE("Location Filter",SalesHeader."Location Code Logistics");
      END ELSE
      //**4PS.en
        Item.SETRANGE("Location Filter",SalesLine."Location Code");
      Item.SETRANGE("Drop Shipment Filter",SalesLine."Drop Shipment");
      OnAfterSetItemFilter(Item,SalesLine);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetItemFilter@1(VAR Item@1000 : Record 27;SalesLine@1001 : Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcAvailability@3(VAR Item@1000 : Record 27;VAR SalesLine@1001 : Record 37;VAR AvailableQuantity@1002 : Decimal;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeLookupItem@5(VAR SalesLine@1000 : Record 37;Item@1001 : Record 27;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    PROCEDURE LookupContactsFromCustomer@1100485002(VAR CustomerCde@1000 : Code[20]);
    VAR
      Cont@1002 : Record 5050;
      ContBusRelation@1001 : Record 5054;
    BEGIN
      //**4PS
      IF CustomerCde <> '' THEN BEGIN
        ContBusRelation.RESET;
        ContBusRelation.SETCURRENTKEY("Link to Table","No.");
        ContBusRelation.SETRANGE("Link to Table",ContBusRelation."Link to Table"::Customer);
        ContBusRelation.SETRANGE("No.",CustomerCde);
        IF ContBusRelation.FIND('-') THEN BEGIN
          Cont.SETRANGE("Company No.",ContBusRelation."Contact No.");
          PAGE.RUNMODAL(PAGE::"Contact List",Cont);
        END;
      END;
    END;

    PROCEDURE CalcNoOfContactsFromCustomer@1100485001(CustomerCde@1002 : Code[20]) : Integer;
    VAR
      Cont@1000 : Record 5050;
      ContBusRelation@1001 : Record 5054;
    BEGIN
      //**4PS
      Cont.SETCURRENTKEY("Company No.");
      IF CustomerCde <> '' THEN BEGIN
        ContBusRelation.RESET;
        ContBusRelation.SETCURRENTKEY("Link to Table","No.");
        ContBusRelation.SETRANGE("Link to Table",ContBusRelation."Link to Table"::Customer);
        ContBusRelation.SETRANGE("No.",CustomerCde);
        IF ContBusRelation.FINDFIRST THEN BEGIN
          Cont.SETRANGE("Company No.",ContBusRelation."Contact No.");
          EXIT(Cont.COUNT);
        END;
      END;
    END;

    PROCEDURE CalcAvailabilityLogistics@1100485000(VAR SalesLine@1000 : Record 37;lCompanyLogistics@1100485000 : Text[50]) : Decimal;
    BEGIN
      //**4PS
      CompanyLogistics := lCompanyLogistics;
      EXIT(CalcAvailability(SalesLine));
    END;

    PROCEDURE GetNoOfCallsOfServiceLocation@1100528401(SalesHeader@1100528400 : Record 36) : Integer;
    VAR
      ServiceLocationInfoMgt@1100528401 : Codeunit 11012856;
      ServiceLocationNo@1100528402 : Code[20];
    BEGIN
      //**4PS
      ServiceLocationNo := SalesHeader.GetServiceLocationNo;
      IF ServiceLocationNo <> '' THEN
        EXIT(ServiceLocationInfoMgt.GetNoOfCalls(ServiceLocationNo));
    END;

    PROCEDURE ShowCallsOfServiceLocation@1100528402(SalesHeader@1100528400 : Record 36);
    VAR
      ServiceLocationInfoMgt@1100528401 : Codeunit 11012856;
      ServiceLocationNo@1100528402 : Code[20];
    BEGIN
      //**4PS
      ServiceLocationNo := SalesHeader.GetServiceLocationNo;
      ServiceLocationInfoMgt.ShowCalls(ServiceLocationNo);
    END;

    PROCEDURE GetNoOfServiceOrdersOfServiceLocation@1100528403(SalesHeader@1100528400 : Record 36) : Integer;
    VAR
      ServiceLocationInfoMgt@1100528401 : Codeunit 11012856;
      ServiceLocationNo@1100528402 : Code[20];
    BEGIN
      //**4PS
      ServiceLocationNo := SalesHeader.GetServiceLocationNo;
      IF ServiceLocationNo <> '' THEN
        EXIT(ServiceLocationInfoMgt.GetNoOfServiceOrders(ServiceLocationNo));
    END;

    PROCEDURE ShowServiceOrdersOfServiceLocation@1100528404(SalesHeader@1100528400 : Record 36);
    VAR
      ServiceLocationInfoMgt@1100528401 : Codeunit 11012856;
      ServiceLocationNo@1100528402 : Code[20];
    BEGIN
      //**4PS
      ServiceLocationNo := SalesHeader.GetServiceLocationNo;
      ServiceLocationInfoMgt.ShowServiceorders(ServiceLocationNo);
    END;

    PROCEDURE GetNoOfSalesOrdersOfServiceLocation@1100528405(SalesHeader@1100528400 : Record 36) : Integer;
    VAR
      ServiceLocationInfoMgt@1100528401 : Codeunit 11012856;
      ServiceLocationNo@1100528402 : Code[20];
    BEGIN
      //**4PS
      ServiceLocationNo := SalesHeader.GetServiceLocationNo;
      IF ServiceLocationNo <> '' THEN
        EXIT(ServiceLocationInfoMgt.GetNoOfSalesOrders(ServiceLocationNo));
    END;

    PROCEDURE ShowSalesOrdersOfServiceLocation@1100528406(SalesHeader@1100528400 : Record 36);
    VAR
      ServiceLocationInfoMgt@1100528401 : Codeunit 11012856;
      ServiceLocationNo@1100528402 : Code[20];
    BEGIN
      //**4PS
      ServiceLocationNo := SalesHeader.GetServiceLocationNo;
      ServiceLocationInfoMgt.ShowSalesOrders(ServiceLocationNo);
    END;

    PROCEDURE CalcAdjustedProfitPercentage@1100525000(SalesLine@1100525000 : Record 37) : Decimal;
    BEGIN
      //**4PS
      IF (SalesLine."Line Amount" <> 0) AND (SalesLine."Unit Cost (LCY)" <> 0) AND (SalesLine.Quantity <> 0) THEN
        EXIT(ROUND(100 - (SalesLine."Unit Cost (LCY)" / (SalesLine."Line Amount" / SalesLine.Quantity)) * 100, 0.1));
    END;

    PROCEDURE GetDeliveryTime@1100530700(SalesLine@1100530700 : Record 37) : Text;
    VAR
      TradeItem@1100530701 : Record 11012317;
    BEGIN
      //**4PS
      IF Item.GET(SalesLine."Item No.") THEN
        IF FORMAT(Item."Lead Time Calculation") <> '' THEN
          EXIT(FORMAT(Item."Lead Time Calculation"));

      IF TradeItem.GET(SalesLine."Vendor (Trade Item)",SalesLine."Trade Item") THEN
        EXIT(FORMAT(TradeItem."Delivery Period"));
    END;

    BEGIN
    {
      4PS01 JD 24-01-2008 Call 9968 Bij openen van scherm Verkoopfactuur wordt langdurig tabel relatie doorzocht
    }
    END.
  }
}

