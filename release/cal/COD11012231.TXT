OBJECT Codeunit 11012231 Estimate Excel Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TmpExcelBuffer@1100485004 : TEMPORARY Record 370;
      EstimateSetup@1100485000 : Record 11012150;
      EstimateSetupChecked@1100485001 : Boolean;
      Text001@1100485003 : TextConst 'DEU=Vorlagendatei %1 existiert nicht.;ENU=Template file doesn''t exist.;NLD="Onderlegger bestand %1 bestaat niet. ";NOR=Malfilen finnes ikke.;SVE=Mallfilen finns inte.';
      Text003@1100485006 : TextConst 'DEU=Die Datei %1 ist bereits ge”ffnet.;ENU=File %1 is already open.;NLD=File %1 is al geopend.;NOR=Filen %1 er allerede †pen.;SVE=Filen %1 har redan ”ppnats.';
      TmpFieldmappingExcelEstimate@1100485007 : TEMPORARY Record 11020284;
      TmpFieldmappingExcelEstimateRAW@1100528901 : TEMPORARY Record 11125700;
      FieldmappingFilled@1100485008 : Boolean;
      EstimateLine@1100485009 : Record 11072072;
      EstimateLineRAW@1100528900 : Record 11125698;
      FileMgt@1100525500 : Codeunit 419;
      Text004@1100485011 : TextConst 'DEU=Spalte %1 ist nicht eingerichtet.;ENU="Column %1 not set up. ";NLD=Kolom %1 niet ingesteld.;NOR=Kolonne %1 er ikke konfigurert.;SVE="Kolumn %1 „r inte installerad. "';
      Text010@1100528902 : TextConst 'DEU=%1 %2 nicht zul„ssig;ENU=%1 %2 not allowed;NLD=%1 %2 niet toegestaan';
      EstimatePlantMgt@1100528500 : Codeunit 11012232;

    PROCEDURE OpenExcelFile@1100485000(iEstimatePart@1100485000 : Record 11072073);
    VAR
      Estimate@1100525001 : Record 11012151;
      FormatManagement@1100525000 : Codeunit 11012022;
      PathFile@1100485001 : Text[250];
      TemplPathFile@1100485002 : Text[250];
    BEGIN
      GetEstimateSetup;

      Estimate.GET(iEstimatePart."Estimate No.");

      iEstimatePart.TESTFIELD("Excel Estimate Template");

      PathFile := GetPathFileName(iEstimatePart);
      TemplPathFile := GetTemplPathFile(iEstimatePart);

      IF NOT iEstimatePart.ExcelFileExists THEN BEGIN
        IF NOT FileMgt.ClientFileExists(TemplPathFile) THEN
          ERROR(Text001, iEstimatePart."Excel Estimate Template");
        CopyTemplateFile(TemplPathFile, PathFile);
      END;

      ActivateExcel(PathFile, Estimate.Fixed);  //DP02273
      IF Estimate.Fixed THEN EXIT;  //DP02273

      DeleteLinesFromPart(iEstimatePart);

      iEstimatePart."Updated form Excel" := FALSE;
      iEstimatePart.MODIFY;
      COMMIT;

      Estimate.GET(iEstimatePart."Estimate No.");

      IF TmpExcelBuffer.FIND('-') THEN BEGIN
        REPEAT
          TmpExcelBuffer.SETRANGE("Row No.", TmpExcelBuffer."Row No.");
          InitEstimateLine(iEstimatePart, EstimateLine);
          IF TmpExcelBuffer.FIND('-') THEN
            REPEAT
              CellToField(TmpExcelBuffer, EstimateLine);
            UNTIL TmpExcelBuffer.NEXT = 0;
          FormatManagement.FormatElem(EstimateLine.Part, 1, '');
          CheckEstimateLineInSheet(EstimateLine, iEstimatePart, Estimate);
          InsertEstimateLine(EstimateLine, Estimate);
          TmpExcelBuffer.SETRANGE("Row No.");
        UNTIL TmpExcelBuffer.NEXT = 0;
      END;

      iEstimatePart."Updated form Excel" := TRUE;
      iEstimatePart.MODIFY;
    END;

    PROCEDURE OpenExcelFileRAW@1100528900(iEstimateParagraphRAW@1100485000 : Record 11125679);
    VAR
      Estimate@1100525001 : Record 11012151;
      PathFile@1100485001 : Text[250];
      TemplPathFile@1100485002 : Text[250];
    BEGIN
      //DP01561
      GetEstimateSetup;

      Estimate.GET(iEstimateParagraphRAW."Estimate No.");

      iEstimateParagraphRAW.TESTFIELD("Excel Estimate Template");

      PathFile := GetPathFileNameRAW(iEstimateParagraphRAW);
      TemplPathFile := GetTemplPathFileRAW(iEstimateParagraphRAW);

      IF NOT iEstimateParagraphRAW.ExcelFileExists THEN BEGIN
        IF NOT FileMgt.ClientFileExists(TemplPathFile) THEN
          ERROR(Text001, iEstimateParagraphRAW."Excel Estimate Template");
        CopyTemplateFile(TemplPathFile, PathFile);
      END;

      ActivateExcel(PathFile, Estimate.Fixed);  //DP02273
      IF Estimate.Fixed THEN EXIT;  //DP02273

      DeleteLinesFromParagraph(iEstimateParagraphRAW);

      iEstimateParagraphRAW."Updated form Excel" := FALSE;
      iEstimateParagraphRAW.MODIFY;
      COMMIT;

      Estimate.GET(iEstimateParagraphRAW."Estimate No.");

      IF TmpExcelBuffer.FIND('-') THEN BEGIN
        REPEAT
          TmpExcelBuffer.SETRANGE("Row No.", TmpExcelBuffer."Row No.");
          InitEstimateLineRAW(iEstimateParagraphRAW, EstimateLineRAW);
          IF TmpExcelBuffer.FIND('-') THEN
            REPEAT
              CellToFieldRAW(TmpExcelBuffer, EstimateLineRAW);
            UNTIL TmpExcelBuffer.NEXT = 0;
          InsertEstimateLineRAW(EstimateLineRAW, Estimate);
          TmpExcelBuffer.SETRANGE("Row No.");
        UNTIL TmpExcelBuffer.NEXT = 0;
      END;

      iEstimateParagraphRAW."Updated form Excel" := TRUE;
      iEstimateParagraphRAW.MODIFY;
    END;

    LOCAL PROCEDURE ActivateExcel@1100528908(PathFile@1100528901 : Text[250];ReadOnly@1100526000 : Boolean);
    VAR
      ExcelAutomation@1100528900 : Codeunit 11012402;
      ServerFileName@1100528902 : Text;
    BEGIN
      //DP01561
      GetEstimateSetup;

      IF FileMgt.ClientFileIsInUse(PathFile) THEN
        ERROR(Text003, CONVERTSTR(PathFile, '\', '/'));

      TmpExcelBuffer.RESET;
      TmpExcelBuffer.DELETEALL;

      ExcelAutomation.InitExcel;
      ExcelAutomation.OpenWorkbookWithReadOnlyCheck(PathFile, ReadOnly);  //DP02273
      ExcelAutomation.SetDefaultFilePath(EstimateSetup."Pathname Excel Estimates");
      ExcelAutomation.GiveUserControl;

      WHILE FileMgt.ClientFileIsInUse(PathFile) DO
        SLEEP(2000);

      ServerFileName := FileMgt.UploadFileSilent(PathFile);
      TmpExcelBuffer.OpenBook(ServerFileName, EstimateSetup."Worksheet Excel Estimates");
      TmpExcelBuffer.ReadSheet;
      TmpExcelBuffer.CloseBook;
      CLEAR(TmpExcelBuffer);
      IF FILE.ERASE(ServerFileName) THEN;

      FillTmpXlMap;

      TmpExcelBuffer.FILTERGROUP(10);
      TmpExcelBuffer.SETFILTER("Row No.", '%1..', EstimateSetup."First Worksheet Data Line");
      TmpExcelBuffer.FILTERGROUP(0);
    END;

    PROCEDURE GetPathFileName@1100485001(iEstimatePart@1100485000 : Record 11072073) rFileName : Text[250];
    BEGIN
      GetEstimateSetup;

      rFileName := EstimateSetup."Pathname Excel Estimates";
      rFileName := rFileName +
        STRSUBSTNO('%1_%2_%3_%4.xls',iEstimatePart."Estimate No.",iEstimatePart."Sub-Estimate No.",
                                 iEstimatePart."Part Group",iEstimatePart.Part);
    END;

    PROCEDURE GetPathFileNameRAW@1100528901(iEstimateParagraphRAW@1100485000 : Record 11125679) rFileName : Text[250];
    BEGIN
      //DP01561
      GetEstimateSetup;

      rFileName := EstimateSetup."Pathname Excel Estimates";
      rFileName := rFileName +
        STRSUBSTNO('%1_%2.xls',iEstimateParagraphRAW."Estimate No.",iEstimateParagraphRAW."Tender Paragraph No.");
    END;

    PROCEDURE GetTemplPathFile@1100485002(iEstimatePart@1100485002 : Record 11072073) rFileName : Text[250];
    BEGIN
      GetEstimateSetup;

      rFileName := EstimateSetup."Pathname Excel Est. Template";
      rFileName := rFileName + iEstimatePart."Excel Estimate Template";
    END;

    PROCEDURE GetTemplPathFileRAW@1100528902(iEstimateParagraphRAW@1100485002 : Record 11125679) rFileName : Text[250];
    BEGIN
      //DP01561
      GetEstimateSetup;

      rFileName := EstimateSetup."Pathname Excel Est. Template";
      rFileName := rFileName + iEstimateParagraphRAW."Excel Estimate Template";
    END;

    PROCEDURE GetTemplPathFileBasePart@1100485006(iEstimateBasePart@1100485002 : Record 11012169) rFileName : Text[250];
    BEGIN
      GetEstimateSetup;

      rFileName := EstimateSetup."Pathname Excel Est. Template";
      rFileName := rFileName + iEstimateBasePart."Excel Estimate Template";
    END;

    PROCEDURE GetEstimateSetup@1100485003();
    BEGIN
      IF EstimateSetupChecked THEN
        EXIT;

      EstimateSetup.GET;
      EstimateSetupChecked := TRUE;
    END;

    LOCAL PROCEDURE CellToField@1100485004(iExcelBufferRec@1100485000 : Record 370;VAR vEstimateLineBufRec@1100485001 : Record 11072072);
    VAR
      RecRef@1100485003 : RecordRef;
      FieldRef@1100485002 : FieldRef;
      OptionInt@1100485004 : Integer;
      OptionTxt@1100485005 : Text[50];
      NrOptions@1100485007 : Integer;
      i@1100485006 : Integer;
    BEGIN
      IF NOT TmpFieldmappingExcelEstimate.GET(TmpExcelBuffer."Column No.") THEN
        EXIT;

      IF TmpFieldmappingExcelEstimate."Field No." IN [10,30,45,80] THEN
        //10 Estimate No.
        //30 Sub-Estimate No.
        //45 Part Group
        //50 Part
        //80 Line No.
        EXIT;

      RecRef.GETTABLE(vEstimateLineBufRec);

      FieldRef := RecRef.FIELD(TmpFieldmappingExcelEstimate."Field No.");
      IF FORMAT(FieldRef.TYPE) <> 'Option' THEN
        EVALUATE(FieldRef,iExcelBufferRec."Cell Value as Text")
      ELSE BEGIN
        IF EVALUATE(OptionInt,iExcelBufferRec."Cell Value as Text") THEN
          EVALUATE(FieldRef,iExcelBufferRec."Cell Value as Text")
        ELSE BEGIN
          OptionInt := 0;
          NrOptions := 1;
          FOR i := 1 TO STRLEN(FieldRef.OPTIONCAPTION) DO
            IF COPYSTR(FieldRef.OPTIONCAPTION,i,1) = ',' THEN
              NrOptions += 1;
          REPEAT
            OptionInt += 1;
            OptionTxt := SELECTSTR(OptionInt,FieldRef.OPTIONCAPTION);
          UNTIL (OptionInt >= NrOptions) OR (OptionTxt = iExcelBufferRec."Cell Value as Text");
          OptionInt -= 1;
          IF (OptionInt < (NrOptions)) THEN BEGIN
            FieldRef.VALUE(OptionInt)
          END ELSE BEGIN
            FieldRef.VALUE(0);
          END;
        END;
      END;

      RecRef.SETTABLE(vEstimateLineBufRec);
    END;

    LOCAL PROCEDURE CellToFieldRAW@1100528903(iExcelBufferRec@1100485000 : Record 370;VAR vEstimateLineBufRec@1100485001 : Record 11125698);
    VAR
      RecRef@1100485003 : RecordRef;
      FieldRef@1100485002 : FieldRef;
      OptionInt@1100485004 : Integer;
      OptionTxt@1100485005 : Text[50];
      NrOptions@1100485007 : Integer;
      i@1100485006 : Integer;
    BEGIN
      //DP01561
      IF NOT TmpFieldmappingExcelEstimateRAW.GET(TmpExcelBuffer."Column No.") THEN
        EXIT;

      IF TmpFieldmappingExcelEstimateRAW."Field No." IN [10,80] THEN
        //10 Estimate No.
        //15 Tender Paragraph No.
        //80 Line No.
        EXIT;

      RecRef.GETTABLE(vEstimateLineBufRec);

      FieldRef := RecRef.FIELD(TmpFieldmappingExcelEstimateRAW."Field No.");
      IF FORMAT(FieldRef.TYPE) <> 'Option' THEN
        EVALUATE(FieldRef,iExcelBufferRec."Cell Value as Text")
      ELSE BEGIN
        IF EVALUATE(OptionInt,iExcelBufferRec."Cell Value as Text") THEN
          EVALUATE(FieldRef,iExcelBufferRec."Cell Value as Text")
        ELSE BEGIN
          OptionInt := 0;
          NrOptions := 1;
          FOR i := 1 TO STRLEN(FieldRef.OPTIONCAPTION) DO
            IF COPYSTR(FieldRef.OPTIONCAPTION,i,1) = ',' THEN
              NrOptions += 1;
          REPEAT
            OptionInt += 1;
            OptionTxt := SELECTSTR(OptionInt,FieldRef.OPTIONCAPTION);
          UNTIL (OptionInt >= NrOptions) OR (OptionTxt = iExcelBufferRec."Cell Value as Text");
          OptionInt -= 1;
          IF (OptionInt < (NrOptions)) THEN BEGIN
            FieldRef.VALUE(OptionInt)
          END ELSE BEGIN
            FieldRef.VALUE(0);
          END;
        END;
      END;

      RecRef.SETTABLE(vEstimateLineBufRec);
    END;

    LOCAL PROCEDURE DeleteLinesFromPart@1100528907(iEstimatePart@1100528902 : Record 11072073);
    VAR
      EstimateLine@1100528901 : Record 11072072;
      EstimatePart@1100528900 : Record 11072073;
    BEGIN
      //DP01561
      EstimatePart.SETRANGE("Estimate No.",iEstimatePart."Estimate No.");
      EstimatePart.SETRANGE("Sub-Estimate No.",iEstimatePart."Sub-Estimate No.");
      EstimatePart.SETRANGE("Part Group",iEstimatePart."Part Group");
      CASE iEstimatePart.Level OF
        1: EstimatePart.SETRANGE(Chapter,iEstimatePart.Chapter);
        2: EstimatePart.SETRANGE(Paragraph,iEstimatePart.Paragraph);
        3: EstimatePart.SETRANGE(Part,iEstimatePart.Part);
      END;
      IF EstimatePart.FINDSET THEN BEGIN
        REPEAT
          EstimateLine.SETRANGE("Estimate No.",EstimatePart."Estimate No.");
          EstimateLine.SETRANGE("Sub-Estimate No.",EstimatePart."Sub-Estimate No.");
          EstimateLine.SETRANGE("Part Group",EstimatePart."Part Group");
          EstimateLine.SETRANGE(Part,EstimatePart.Part);
          EstimateLine.SETRANGE("Excel Line",TRUE);
          IF EstimateLine.ISEMPTY THEN
            EstimateLine.SETRANGE("Excel Line");  //DP01561: tmp-solution for old estimates
          EstimateLine.DELETEALL(TRUE);
        UNTIL EstimatePart.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE DeleteLinesFromParagraph@1100528909(iEstimateParagraphRAW@1100528902 : Record 11125679);
    VAR
      EstimateLineRAW@1100528901 : Record 11125698;
      EstimateParagraphRAW@1100528900 : Record 11125679;
      ParagraphFilter@1100528903 : Text;
    BEGIN
      //DP01561
      ParagraphFilter := iEstimateParagraphRAW."Tender Paragraph No.";
      IF STRLEN(ParagraphFilter) = 6 THEN
        ParagraphFilter := COPYSTR(iEstimateParagraphRAW."Tender Paragraph No.", 1, 5);
      ParagraphFilter := ParagraphFilter + '*';

      EstimateParagraphRAW.SETRANGE("Estimate No.",iEstimateParagraphRAW."Estimate No.");
      EstimateParagraphRAW.SETFILTER("Tender Paragraph No.", ParagraphFilter);
      EstimateParagraphRAW.SETRANGE("Construction Spec. Line No.", '00');
      IF EstimateParagraphRAW.FINDSET THEN BEGIN
        REPEAT
          EstimateLineRAW.SETRANGE("Estimate No.",EstimateParagraphRAW."Estimate No.");
          EstimateLineRAW.SETRANGE("Tender Paragraph No.",EstimateParagraphRAW."Tender Paragraph No.");
          EstimateLineRAW.SETRANGE("Excel Line",TRUE);
          EstimateLineRAW.DELETEALL(TRUE);
        UNTIL EstimateParagraphRAW.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InitEstimateLine@1100485010(iEstimatePart@1100485001 : Record 11072073;VAR vEstimateLine@1100485000 : Record 11072072);
    BEGIN
      vEstimateLine.INIT;
      vEstimateLine."Estimate No." := iEstimatePart."Estimate No.";
      vEstimateLine."Sub-Estimate No." := iEstimatePart."Sub-Estimate No.";
      vEstimateLine."Part Group" := iEstimatePart."Part Group";
      vEstimateLine.Part := iEstimatePart.Part;
    END;

    LOCAL PROCEDURE InitEstimateLineRAW@1100528904(iEstimateParagraphRAW@1100485001 : Record 11125679;VAR vEstimateLineRAW@1100485000 : Record 11125698);
    BEGIN
      //DP01561
      vEstimateLineRAW.INIT;
      vEstimateLineRAW."Estimate No." := iEstimateParagraphRAW."Estimate No.";
      vEstimateLineRAW."Tender Paragraph No." := iEstimateParagraphRAW."Tender Paragraph No.";
    END;

    LOCAL PROCEDURE InsertEstimateLine@1100485005(iEstimateLine@1100485000 : Record 11072072;iEstimate@1100525002 : Record 11012151);
    VAR
      EstimatePart@1100485001 : Record 11072073;
      DimValRec@1100525000 : Record 349;
      DimMgt@1100525001 : Codeunit 408;
      EstimateLine2@1100528500 : Record 11072072;
    BEGIN
      EstimatePart.GET(
        iEstimateLine."Estimate No.",
        iEstimateLine."Sub-Estimate No.",
        iEstimateLine."Part Group",
        iEstimateLine.Part);

      EstimateLine.SETRECFILTER;
      EstimateLine.SETRANGE("Line No.");
      IF EstimateLine.FINDLAST THEN
        iEstimateLine."Line No." := EstimateLine."Line No." + 10000
      ELSE
        iEstimateLine."Line No." := 10000;

      EstimateLine.RESET;
      EstimateLine := iEstimateLine;
      EstimateLine.INIT;
      EstimateLine.INSERT(TRUE);

      EstimateLine."Excel Line" := TRUE;  //DP01561
      IF iEstimateLine."Recipe Group" <> '' THEN
        EstimateLine.VALIDATE("Recipe Group",iEstimateLine."Recipe Group");
      IF iEstimateLine.Recipe <> '' THEN BEGIN
        IF EstimateLine."Recipe Group" = '' THEN
          EstimateLine."Recipe Group" := iEstimate."Recipe Group";
        EstimateLine.VALIDATE(Recipe,iEstimateLine.Recipe);
      END;
      IF iEstimateLine."Item No." <> '' THEN
        EstimateLine.VALIDATE("Item No.",iEstimateLine."Item No.");
      IF iEstimateLine.Manufacturer <> '' THEN
        EstimateLine.VALIDATE(Manufacturer,iEstimateLine.Manufacturer);
      IF iEstimateLine."Basic Item" <> '' THEN
        EstimateLine.VALIDATE("Basic Item",iEstimateLine."Basic Item");
      IF iEstimateLine."Vendor (Trade Item)" <> '' THEN
        EstimateLine.VALIDATE("Vendor (Trade Item)",iEstimateLine."Vendor (Trade Item)");
      IF iEstimateLine."Trade Item" <> '' THEN
        EstimateLine.VALIDATE("Trade Item",iEstimateLine."Trade Item");
      EstimateLine."Cost Object Labor" := '';
      IF iEstimateLine."Cost Object Labor" <> '' THEN
        EstimateLine.ProcessCostObject(1,0,iEstimateLine."Cost Object Labor");
      EstimateLine."Cost Object Price" := '';
      EstimateLine."Plant Rates in Hours" := FALSE;  //C051896
      IF iEstimateLine."Cost Object Price" <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, iEstimateLine."Cost Object Price", DimValRec, FALSE, '');
        EstimateLine."Cost Type (Price)" := DimValRec."Cost Type";
        EstimateLine.ProcessCostObject(1,1,iEstimateLine."Cost Object Price");
        //C051896.sn
        IF EstimateLine."Cost Type (Price)" = EstimateLine."Cost Type (Price)"::Plant THEN BEGIN
          EstimateLine."Plant Rates in Hours" := iEstimate."Plant Rates in Hours";
          IF EstimateLine."Plant Rates in Hours" THEN
            EstimateLine."Cost Type (Hours)" := EstimateLine."Cost Type (Hours)"::Plant;
        END;
        //C051896.en
      END;
      IF iEstimateLine.Code <> '' THEN
        EstimateLine.VALIDATE(Code,iEstimateLine.Code);
      IF iEstimateLine.Description <> '' THEN
        EstimateLine.VALIDATE(Description,iEstimateLine.Description);
      IF iEstimateLine.Length <> 0 THEN
        EstimateLine.VALIDATE(Length,iEstimateLine.Length);
      IF iEstimateLine.Width <> 0 THEN
        EstimateLine.VALIDATE(Width,iEstimateLine.Width);
      IF iEstimateLine.Height <> 0 THEN
        EstimateLine.VALIDATE(Height,iEstimateLine.Height);
      IF iEstimateLine.Quantity <> 0 THEN
        EstimateLine.VALIDATE(Quantity,iEstimateLine.Quantity);
      IF iEstimateLine."Quantity (Sales)" <> 0 THEN
        EstimateLine.VALIDATE("Quantity (Sales)",iEstimateLine."Quantity (Sales)");
      IF iEstimateLine."Unit of Measure" <> '' THEN
        EstimateLine.VALIDATE("Unit of Measure",iEstimateLine."Unit of Measure");
      IF iEstimateLine."Time Quantity" <> 0 THEN
        EstimateLine.VALIDATE("Time Quantity",iEstimateLine."Time Quantity");
      IF iEstimateLine."Unit of Time" <> '' THEN
        EstimateLine.VALIDATE("Unit of Time",iEstimateLine."Unit of Time");
      IF iEstimateLine."Line Status" <> '' THEN
        EstimateLine.VALIDATE("Line Status",iEstimateLine."Line Status");
      IF iEstimateLine."Surcharge Type" <> 0 THEN
        EstimateLine.VALIDATE("Surcharge Type",iEstimateLine."Surcharge Type");
      IF iEstimateLine."Surcharge %" <> 0 THEN
        EstimateLine.VALIDATE("Surcharge %",iEstimateLine."Surcharge %");
      IF iEstimateLine."Norm Group" <> '' THEN
        EstimateLine.VALIDATE("Norm Group",iEstimateLine."Norm Group");
      IF iEstimateLine."Sub Operation Code" <> '' THEN
        EstimateLine.VALIDATE("Sub Operation Code",iEstimateLine."Sub Operation Code");
      IF iEstimateLine."Rate Code" <> '' THEN
        EstimateLine.VALIDATE("Rate Code",iEstimateLine."Rate Code");
      IF iEstimateLine.Norm <> 0 THEN
        EstimateLine.VALIDATE(Norm,iEstimateLine.Norm);
      IF iEstimateLine."Norm (Sales)" <> 0 THEN
        EstimateLine.VALIDATE("Norm (Sales)",iEstimateLine."Norm (Sales)");
      IF iEstimateLine."Gross Price" <> 0 THEN
        EstimateLine.VALIDATE("Gross Price",iEstimateLine."Gross Price");
      IF iEstimateLine."Purchase Discount %" <> 0 THEN
        EstimateLine.VALIDATE("Purchase Discount %",iEstimateLine."Purchase Discount %");
      IF iEstimateLine."Sales Discount %" <> 0 THEN
        EstimateLine.VALIDATE("Sales Discount %",iEstimateLine."Sales Discount %");
      IF iEstimateLine."Net Cost Price" <> 0 THEN
        EstimateLine.VALIDATE("Net Cost Price",iEstimateLine."Net Cost Price");
      IF iEstimateLine."Net Sales Price" <> 0 THEN
        EstimateLine.VALIDATE("Net Sales Price",iEstimateLine."Net Sales Price");
      IF iEstimateLine.Vendor <> '' THEN
        EstimateLine.VALIDATE(Vendor,iEstimateLine.Vendor);
      IF iEstimateLine."Project No." <> '' THEN
        EstimateLine.VALIDATE("Project No.",iEstimateLine."Project No.");
      IF iEstimateLine.Element <> '' THEN
        EstimateLine.VALIDATE(Element,iEstimateLine.Element);
      IF iEstimateLine."Project Planning Activity Code" <> '' THEN
        EstimateLine.VALIDATE("Project Planning Activity Code",iEstimateLine."Project Planning Activity Code");
      IF iEstimateLine."Comments for Logistics" <> '' THEN
        EstimateLine.VALIDATE("Comments for Logistics",iEstimateLine."Comments for Logistics");
      IF iEstimateLine."Cost Component" <> '' THEN
        EstimateLine.VALIDATE("Cost Component",iEstimateLine."Cost Component");
      IF iEstimateLine."Wage Component" <> '' THEN
        EstimateLine.VALIDATE("Wage Component",iEstimateLine."Wage Component");
      IF iEstimateLine."Ignore Part Quantity" THEN
        EstimateLine.VALIDATE("Ignore Part Quantity",TRUE)
      ELSE
        EstimateLine.VALIDATE("Ignore Part Quantity",FALSE);
      //C051896.sn
      IF iEstimateLine."Set Code" <> '' THEN
        EstimateLine.VALIDATE("Set Code",iEstimateLine."Set Code");
      IF iEstimateLine."Plant Type" <> '' THEN
        EstimateLine.VALIDATE("Plant Type",iEstimateLine."Plant Type");
      //C051896.en

      EstimateLine.MODIFY(TRUE);

      //C051896.sn
      IF (EstimateLine."Set Code" <> '') OR (EstimateLine."Plant Type" <> '') THEN BEGIN
        EstimatePlantMgt.SkipQuestion;
        EstimateLine2.SETRANGE("Estimate No.", EstimateLine."Estimate No.");
        EstimateLine2.SETRANGE("Sub-Estimate No.", EstimateLine."Sub-Estimate No.");
        EstimateLine2.SETRANGE("Part Group", EstimateLine."Part Group");
        EstimateLine2.SETRANGE(Part, EstimateLine.Part);
        EstimateLine2.SETRANGE("Line No.", EstimateLine."Line No.");
      END;
      IF EstimateLine."Set Code" <> '' THEN
        EstimatePlantMgt.ExplodeSetLinesToEstLine(EstimateLine2);
      IF EstimateLine."Plant Type" <> '' THEN
        EstimatePlantMgt.InsPltCostItmLinesToEstLine(EstimateLine2);
      //C051896.sn
    END;

    LOCAL PROCEDURE InsertEstimateLineRAW@1100528905(iEstimateLineRAW@1100485000 : Record 11125698;iEstimate@1100525002 : Record 11012151);
    VAR
      EstimateParagraphRAW@1100485001 : Record 11125679;
      DimValRec@1100525000 : Record 349;
      DimMgt@1100525001 : Codeunit 408;
      EstimateLineRAW2@1100528500 : Record 11125698;
    BEGIN
      //DP01561
      EstimateParagraphRAW.SETRANGE("Estimate No.",iEstimateLineRAW."Estimate No.");
      EstimateParagraphRAW.SETRANGE("Tender Paragraph No.",iEstimateLineRAW."Tender Paragraph No.");
      EstimateParagraphRAW.FINDFIRST;

      IF COPYSTR(EstimateParagraphRAW."Tender Paragraph No.", 1, 1) = '9' THEN
        ERROR(Text010, EstimateParagraphRAW.FIELDCAPTION("Tender Paragraph No."), EstimateParagraphRAW."Tender Paragraph No.");

      EstimateLineRAW.SETRECFILTER;
      EstimateLineRAW.SETRANGE("Line No.");
      IF EstimateLineRAW.FINDLAST THEN
        iEstimateLineRAW."Line No." := EstimateLineRAW."Line No." + 10000
      ELSE
        iEstimateLineRAW."Line No." := 10000;

      EstimateLineRAW.RESET;
      EstimateLineRAW := iEstimateLineRAW;
      EstimateLineRAW.INIT;
      EstimateLineRAW.VALIDATE("Tender Paragraph No.");  //Get PartQuantity and Surcharge%
      EstimateLineRAW.INSERT(TRUE);

      EstimateLineRAW."Excel Line" := TRUE;
      IF iEstimateLineRAW."Appliance Type" <> 0 THEN
        EstimateLineRAW.VALIDATE("Appliance Type",iEstimateLineRAW."Appliance Type");
      IF iEstimateLineRAW."Appliance Code" <> '' THEN
        EstimateLineRAW.VALIDATE("Appliance Code",iEstimateLineRAW."Appliance Code");

      IF iEstimateLineRAW."Recipe Group" <> '' THEN
        EstimateLineRAW.VALIDATE("Recipe Group",iEstimateLineRAW."Recipe Group");
      IF iEstimateLineRAW."Recipe No." <> '' THEN BEGIN
        IF EstimateLineRAW."Recipe Group" = '' THEN
          EstimateLineRAW."Recipe Group" := iEstimate."Recipe Group";
        EstimateLineRAW.VALIDATE("Recipe No.",iEstimateLineRAW."Recipe No.");
      END;
      IF iEstimateLineRAW."Item No." <> '' THEN
        EstimateLineRAW.VALIDATE("Item No.",iEstimateLineRAW."Item No.");
      IF iEstimateLineRAW.Manufacturer <> '' THEN
        EstimateLineRAW.VALIDATE(Manufacturer,iEstimateLineRAW.Manufacturer);
      IF iEstimateLineRAW."Basic Item" <> '' THEN
        EstimateLineRAW.VALIDATE("Basic Item",iEstimateLineRAW."Basic Item");
      IF iEstimateLineRAW."Vendor (Trade Item)" <> '' THEN
        EstimateLineRAW.VALIDATE("Vendor (Trade Item)",iEstimateLineRAW."Vendor (Trade Item)");
      IF iEstimateLineRAW."Trade Item" <> '' THEN
        EstimateLineRAW.VALIDATE("Trade Item",iEstimateLineRAW."Trade Item");
      IF iEstimateLineRAW."Cost Object" <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, iEstimateLineRAW."Cost Object", DimValRec, FALSE, '');
        EstimateLineRAW."Cost Type" := DimValRec."Cost Type" + 1;
        EstimateLineRAW."Cost Object" := DimValRec.Code;
        IF EstimateLineRAW."Cost Type" = EstimateLineRAW."Cost Type"::Plant THEN
          EstimateLineRAW."Plant Rates in Hours" := iEstimate."Plant Rates in Hours";
      END;
      IF iEstimateLineRAW.Code <> '' THEN
        EstimateLineRAW.VALIDATE(Code,iEstimateLineRAW.Code);
      IF iEstimateLineRAW.Description <> '' THEN
        EstimateLineRAW.VALIDATE(Description,iEstimateLineRAW.Description);
      IF iEstimateLineRAW.Length <> 0 THEN
        EstimateLineRAW.VALIDATE(Length,iEstimateLineRAW.Length);
      IF iEstimateLineRAW.Width <> 0 THEN
        EstimateLineRAW.VALIDATE(Width,iEstimateLineRAW.Width);
      IF iEstimateLineRAW.Height <> 0 THEN
        EstimateLineRAW.VALIDATE(Height,iEstimateLineRAW.Height);
      IF iEstimateLineRAW.Quantity <> 0 THEN
        EstimateLineRAW.VALIDATE(Quantity,iEstimateLineRAW.Quantity);
      IF iEstimateLineRAW."Unit of Measure" <> '' THEN
        EstimateLineRAW.VALIDATE("Unit of Measure",iEstimateLineRAW."Unit of Measure");
      IF iEstimateLineRAW."Time Quantity" <> 0 THEN
        EstimateLineRAW.VALIDATE("Time Quantity",iEstimateLineRAW."Time Quantity");
      IF iEstimateLineRAW."Unit of Time" <> '' THEN
        EstimateLineRAW.VALIDATE("Unit of Time",iEstimateLineRAW."Unit of Time");
      IF iEstimateLineRAW."Line Status" <> '' THEN
        EstimateLineRAW.VALIDATE("Line Status",iEstimateLineRAW."Line Status");
      IF iEstimateLineRAW."Norm Group" <> '' THEN
        EstimateLineRAW.VALIDATE("Norm Group",iEstimateLineRAW."Norm Group");
      IF iEstimateLineRAW."Sub Operation Code" <> '' THEN
        EstimateLineRAW.VALIDATE("Sub Operation Code",iEstimateLineRAW."Sub Operation Code");
      IF iEstimateLineRAW."Rate Code" <> '' THEN
        EstimateLineRAW.VALIDATE("Rate Code",iEstimateLineRAW."Rate Code");
      IF iEstimateLineRAW.Norm <> 0 THEN
        EstimateLineRAW.VALIDATE(Norm,iEstimateLineRAW.Norm);
      IF iEstimateLineRAW."Production Rate" <> 0 THEN
        EstimateLineRAW.VALIDATE("Production Rate",iEstimateLineRAW."Production Rate");
      IF iEstimateLineRAW."Gross Price" <> 0 THEN
        EstimateLineRAW.VALIDATE("Gross Price",iEstimateLineRAW."Gross Price");
      IF iEstimateLineRAW."Purchase Discount %" <> 0 THEN
        EstimateLineRAW.VALIDATE("Purchase Discount %",iEstimateLineRAW."Purchase Discount %");
      IF iEstimateLineRAW."Sales Discount %" <> 0 THEN
        EstimateLineRAW.VALIDATE("Sales Discount %",iEstimateLineRAW."Sales Discount %");
      IF iEstimateLineRAW."Net Cost Price" <> 0 THEN
        EstimateLineRAW.VALIDATE("Net Cost Price",iEstimateLineRAW."Net Cost Price");
      IF iEstimateLineRAW.Vendor <> '' THEN
        EstimateLineRAW.VALIDATE(Vendor,iEstimateLineRAW.Vendor);
      IF iEstimateLineRAW."Project No." <> '' THEN
        EstimateLineRAW.VALIDATE("Project No.",iEstimateLineRAW."Project No.");
      IF iEstimateLineRAW.Element <> '' THEN
        EstimateLineRAW.VALIDATE(Element,iEstimateLineRAW.Element);
      IF iEstimateLineRAW."Project Planning Activity Code" <> '' THEN
        EstimateLineRAW.VALIDATE("Project Planning Activity Code",iEstimateLineRAW."Project Planning Activity Code");
      IF iEstimateLineRAW."Comments for Logistics" <> '' THEN
        EstimateLineRAW.VALIDATE("Comments for Logistics",iEstimateLineRAW."Comments for Logistics");
      IF iEstimateLineRAW."Cost Component" <> '' THEN
        EstimateLineRAW.VALIDATE("Cost Component",iEstimateLineRAW."Cost Component");
      IF iEstimateLineRAW."Wage Component" <> '' THEN
        EstimateLineRAW.VALIDATE("Wage Component",iEstimateLineRAW."Wage Component");
      IF iEstimateLineRAW."Ignore Paragraph Quantity" THEN
        EstimateLineRAW.VALIDATE("Ignore Paragraph Quantity",TRUE)
      ELSE
        EstimateLineRAW.VALIDATE("Ignore Paragraph Quantity",FALSE);
      //C051896.sn
      IF iEstimateLineRAW."Set Code" <> '' THEN
        EstimateLineRAW.VALIDATE("Set Code",iEstimateLineRAW."Set Code");
      IF iEstimateLineRAW."Plant Type" <> '' THEN
        EstimateLineRAW.VALIDATE("Plant Type",iEstimateLineRAW."Plant Type");
      //C051896.en

      EstimateLineRAW.MODIFY(TRUE);

      //C051896.sn
      IF (EstimateLineRAW."Set Code" <> '') OR (EstimateLineRAW."Plant Type" <> '') THEN BEGIN
        EstimatePlantMgt.SkipQuestion;
        EstimateLineRAW2.SETRANGE("Estimate No.", EstimateLineRAW."Estimate No.");
        EstimateLineRAW2.SETRANGE("Tender Paragraph No.", EstimateLineRAW."Tender Paragraph No.");
        EstimateLineRAW2.SETRANGE("Line No.", EstimateLineRAW."Line No.");
      END;
      IF EstimateLine."Set Code" <> '' THEN
        EstimatePlantMgt.ExplodeSetLinesToEstLineRAW(EstimateLineRAW2);
      IF EstimateLine."Plant Type" <> '' THEN
        EstimatePlantMgt.InsPltCostItmLinesToEstLineRAW(EstimateLineRAW2);
      //C051896.sn
    END;

    LOCAL PROCEDURE FillTmpXlMap@1100485007();
    VAR
      FieldmappingExcelEstimate@1100485000 : Record 11020284;
      FieldmappingExcelEstimateRAW@1100528900 : Record 11125700;
    BEGIN
      IF FieldmappingFilled THEN
        EXIT;

      IF FieldmappingExcelEstimate.FINDSET THEN BEGIN
        REPEAT
          TmpFieldmappingExcelEstimate := FieldmappingExcelEstimate;
          TmpFieldmappingExcelEstimate.INSERT;
        UNTIL FieldmappingExcelEstimate.NEXT = 0;
      END;

      IF FieldmappingExcelEstimateRAW.FINDSET THEN BEGIN
        REPEAT
          TmpFieldmappingExcelEstimateRAW := FieldmappingExcelEstimateRAW;
          TmpFieldmappingExcelEstimateRAW.INSERT;
        UNTIL FieldmappingExcelEstimateRAW.NEXT = 0;
      END;

      FieldmappingFilled := TRUE;
    END;

    LOCAL PROCEDURE CopyTemplateFile@1100485009(TempPathFile@1100485000 : Text[250];PathFile@1100485001 : Text[250]);
    VAR
      ExcelAutomation@1100528706 : Codeunit 11012402;
      EstSetup@1100528900 : Record 11012150;
    BEGIN
      ExcelAutomation.InitExcel;
      ExcelAutomation.OpenWorkbook(TempPathFile);
      EstSetup.GET;
      IF (EstSetup."Excel Template contains Macros" AND (ExcelAutomation.ExcelMajorVersionNo >= 12)) THEN
        ExcelAutomation.SaveWorkbookAsXMLMacroEnabled(PathFile)
      ELSE
        ExcelAutomation.SaveWorkbookAs(PathFile);
      ExcelAutomation.CloseWorkbook;
      ExcelAutomation.TermExcel;
    END;

    PROCEDURE CopyExcelFile@1100485011(FromEstimatePart@1100485000 : Record 11072073;ToEstimatePart@1100485001 : Record 11072073);
    VAR
      EstimateSetup@1100485002 : Record 11012150;
      FieldmappingExcelEstimate@1100485003 : Record 11020284;
      sp1@1100485004 : Integer;
      sp2@1100485005 : Integer;
      ServerFileName@1100528700 : Text;
      FormatManagement@1100528900 : Codeunit 11012022;
    BEGIN
      EstimateSetup.GET;
      TmpExcelBuffer.RESET;
      IF TmpExcelBuffer.FIND('-') THEN
        TmpExcelBuffer.DELETEALL;
      IF NOT FileMgt.ClientFileExists(GetPathFileName(FromEstimatePart)) THEN
        EXIT;

      IF FileMgt.ClientFileExists(GetPathFileName(ToEstimatePart)) THEN
        FileMgt.DeleteClientFile4PS(GetPathFileName(ToEstimatePart), TRUE);

      IF FromEstimatePart.Level = 0 THEN
        EXIT;

      ServerFileName := FileMgt.UploadFileSilent(GetPathFileName(FromEstimatePart));
      TmpExcelBuffer.OpenBook(ServerFileName, EstimateSetup."Worksheet Excel Estimates");
      TmpExcelBuffer.ReadSheet;
      TmpExcelBuffer.CloseBook;
      IF FILE.ERASE(ServerFileName) THEN;
      FieldmappingExcelEstimate.SETRANGE("Field No.", 50);
      IF NOT FieldmappingExcelEstimate.FINDFIRST THEN
        ERROR(Text004, EstimateLine.FIELDCAPTION(Part));

      FormatManagement.CheckFormat(1,sp1,sp2);  //C063045
      TmpExcelBuffer.SETFILTER("Row No.", '%1..', EstimateSetup."First Worksheet Data Line");
      TmpExcelBuffer.SETRANGE("Column No.", FieldmappingExcelEstimate."Column No.");
      IF TmpExcelBuffer.FIND('-') THEN BEGIN
        REPEAT
          CASE FromEstimatePart.Level OF
            1: BEGIN
                TmpExcelBuffer."Cell Value as Text" :=
                  COPYSTR(ToEstimatePart.Part,1,sp1-1) + COPYSTR(TmpExcelBuffer."Cell Value as Text",sp1);
              END;
            2: BEGIN
                TmpExcelBuffer."Cell Value as Text" :=
                  COPYSTR(ToEstimatePart.Part,1,sp2-1) + COPYSTR(TmpExcelBuffer."Cell Value as Text",sp2);
              END;
            3: BEGIN
                TmpExcelBuffer."Cell Value as Text" := ToEstimatePart.Part;
              END;
          END;
          TmpExcelBuffer.MODIFY;
        UNTIL TmpExcelBuffer.NEXT = 0;
      END;

      ServerFileName := FileMgt.UploadFileSilent(GetPathFileName(FromEstimatePart));
      TmpExcelBuffer.UpdateBook(ServerFileName, EstimateSetup."Worksheet Excel Estimates");
      TmpExcelBuffer.WriteSheet('', '', '');
      TmpExcelBuffer.CloseBook;
      TmpExcelBuffer.MoveFileToClient(GetPathFileName(ToEstimatePart));
    END;

    PROCEDURE CopyExcelFileRAW@1100528906(FromEstimateParagraphRAW@1100485000 : Record 11125679;ToEstimateParagraphRAW@1100485001 : Record 11125679);
    VAR
      EstimateSetup@1100485002 : Record 11012150;
      FieldmappingExcelEstimate@1100485003 : Record 11020284;
      ServerFileName@1100528700 : Text;
    BEGIN
      //DP01561
      EstimateSetup.GET;
      TmpExcelBuffer.RESET;
      IF TmpExcelBuffer.FIND('-') THEN
        TmpExcelBuffer.DELETEALL;
      IF NOT FileMgt.ClientFileExists(GetPathFileNameRAW(FromEstimateParagraphRAW)) THEN
        EXIT;

      IF FileMgt.ClientFileExists(GetPathFileNameRAW(ToEstimateParagraphRAW)) THEN
        FileMgt.DeleteClientFile4PS(GetPathFileNameRAW(ToEstimateParagraphRAW), TRUE);

      ServerFileName := FileMgt.UploadFileSilent(GetPathFileNameRAW(FromEstimateParagraphRAW));
      TmpExcelBuffer.OpenBook(ServerFileName, EstimateSetup."Worksheet Excel Estimates");
      TmpExcelBuffer.ReadSheet;
      TmpExcelBuffer.CloseBook;
      IF FILE.ERASE(ServerFileName) THEN;
      FieldmappingExcelEstimate.SETRANGE("Field No.", 50);
      IF NOT FieldmappingExcelEstimate.FINDFIRST THEN
        ERROR(Text004, EstimateLine.FIELDCAPTION(Part));

      TmpExcelBuffer.SETFILTER("Row No.", '%1..', EstimateSetup."First Worksheet Data Line");
      TmpExcelBuffer.SETRANGE("Column No.", FieldmappingExcelEstimate."Column No.");
      IF TmpExcelBuffer.FIND('-') THEN
        REPEAT
          TmpExcelBuffer."Cell Value as Text" := ToEstimateParagraphRAW."Tender Paragraph No.";
          TmpExcelBuffer.MODIFY;
        UNTIL TmpExcelBuffer.NEXT = 0;

      ServerFileName := FileMgt.UploadFileSilent(GetPathFileNameRAW(FromEstimateParagraphRAW));
      TmpExcelBuffer.UpdateBook(ServerFileName, EstimateSetup."Worksheet Excel Estimates");
      TmpExcelBuffer.WriteSheet('', '', '');
      TmpExcelBuffer.CloseBook;
      TmpExcelBuffer.MoveFileToClient(GetPathFileNameRAW(ToEstimateParagraphRAW));
    END;

    LOCAL PROCEDURE CheckEstimateLineInSheet@1100485012(iEstimateLine@1100485000 : Record 11072072;iEstimatePart@1100485001 : Record 11072073;iEstimate@1100525000 : Record 11012151);
    VAR
      EstimatePart@1100485002 : Record 11072073;
      EstimateBasePart@1100528900 : Record 11012169;
    BEGIN
      EstimatePart.SETRANGE("Estimate No.",iEstimatePart."Estimate No.");
      EstimatePart.SETRANGE("Sub-Estimate No.",iEstimatePart."Sub-Estimate No.");
      EstimatePart.SETRANGE("Part Group",iEstimatePart."Part Group");

      CASE iEstimatePart.Level OF
        1: EstimatePart.SETRANGE(Chapter,iEstimatePart.Chapter);
        2: EstimatePart.SETRANGE(Paragraph,iEstimatePart.Paragraph);
        3: EstimatePart.SETRANGE(Part,iEstimatePart.Part);
      END;

      EstimatePart.SETFILTER(Level,'>=%1',iEstimatePart.Level);
      EstimatePart.FILTERGROUP(10);
      EstimatePart.SETRANGE(Part,iEstimateLine.Part);
      EstimatePart.FILTERGROUP(0);

      IF NOT EstimatePart.FINDFIRST THEN BEGIN
        IF EstimateBasePart.GET(iEstimateLine."Part Group", iEstimateLine.Part) THEN BEGIN
          EstimatePart."Estimate No." := iEstimatePart."Estimate No.";
          EstimatePart."Sub-Estimate No." := iEstimatePart."Sub-Estimate No.";
          EstimatePart."Part Group" := EstimateBasePart."Part Group";
          EstimatePart.VALIDATE(Part, EstimateBasePart.Code);
          EstimatePart.INSERT(TRUE);  //C049855: init adjustment factor
        END ELSE BEGIN
          EstimatePart."Estimate No." := iEstimatePart."Estimate No.";
          EstimatePart."Sub-Estimate No." := iEstimatePart."Sub-Estimate No.";
          EstimatePart."Part Group" := iEstimate."Part Group";
          EstimatePart.VALIDATE(Part, iEstimateLine.Part);
          IF iEstimateLine."Part Description" <> '' THEN
            EstimatePart.Description := iEstimateLine."Part Description"
          ELSE
            EstimatePart.Description := iEstimateLine.Description;
          EstimatePart.INSERT(TRUE);  //C049855: init adjustment factor
        END;
      END;
    END;

    BEGIN
    END.
  }
}

