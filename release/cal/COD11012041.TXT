OBJECT Codeunit 11012041 Advice Order Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11012055;
    Permissions=TableData 11012001=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AdviceRec@1210190004 : Record 11012055;
      AdviceRec2@1210190003 : Record 11012055;
      TmpAdviceRec@1210190029 : TEMPORARY Record 11012055;
      ReqLineRec@1210190002 : Record 246;
      ItemJnlLineRec@1210190001 : Record 83;
      ItemRec@1210190007 : Record 27;
      TradeItemRec@1210190034 : Record 11012317;
      ServOrderRec@1100485000 : Record 11012823;
      ProjRec@1210190017 : Record 11072003;
      ProjPurchActRec@1100485008 : Record 11012026;
      ProjSetUp@1210190005 : Record 315;
      Text000@1100528301 : TextConst 'ENU=There are no %1s within the Filter.\\Filters: %2;NOR=Det er ingen %1 innenfor filteret.\\Filter: %2;SVE=Det finns inga %1 inom filtret.\\Filter: %2';
      Text001@1100525005 : TextConst 'ENU=Template/Batch not present for Purchase Proposal;NOR=Malen/bunkeen finnes ikke for Innkj›psforslag;SVE=Mallen/batchen finns inte f”r ink”psf”rslag';
      Text003@1210190011 : TextConst 'ENU="Order Date occurs before Today; modify Order Date automatically?";SVE="Orderdatum intr„ffar f”re idag; „ndra orderdatum automatiskt?"';
      Text006@1210190008 : TextConst 'ENU=Item Unknown;NOR=Ukjent artikkel;SVE=Ok„nd artikel';
      InvtSetup@1210190036 : Record 313;
      PurchSetup@1100528901 : Record 312;
      InventoryBatchRec@1210190028 : Record 233;
      InventoryTemplateRec@1210190027 : Record 82;
      ItemUnitRec@1210190014 : Record 5404;
      VendorRec@1210190013 : Record 23;
      DimValRec@1210190023 : Record 349;
      NoSeriesMgt@1210190021 : Codeunit 396;
      DimMgt@1210190020 : Codeunit 408;
      RouteRefMgtCU@1210190019 : Codeunit 11012045;
      MakePurchOrder@1210190018 : Report 493;
      Text008@1210190024 : TextConst 'ENU=Journal Template/Batch not present for Item Journal;NOR=Journalmall/-bunke finnes ikke for artikkeljournal;SVE=Journalmall/-batch finns inte f”r artikeljournal';
      Text009@1210190032 : TextConst 'ENU=Before editing text enter the line first;NOR=Velg rad f›r du redigerer tekst.;SVE=V„lj rad innan du redigerar text.';
      Text010@1210190025 : TextConst 'ENU=There are %1 inventory entries created in Item Journal.;NOR=%1 lagertransaksjoner er opprettet i artikkeljournalen.;SVE=%1 lagertransaktioner har skapats i artikeljournalen.';
      Text011@1210190031 : TextConst 'ENU=First select line(s).;NOR=Velg rad(er) f›rst.;SVE=V„lj f”rst rad(er).';
      Text012@1210190030 : TextConst 'ENU=Do you want to split this advice order?';
      Text013@1100485006 : TextConst 'ENU=Do you want to move these budget lines to Advice Orders?';
      Text014@1100485005 : TextConst 'ENU=Remove these Budget Lines from Advice Orders?';
      Text015@1100485010 : TextConst 'ENU="All lines are already advised; total budget will be shown";NOR=Alle rader er allerede fylt ut. Totalt budsjett vil bli vist.;SVE=Alla rader har redan fyllts i. Total budget kommer att visas.';
      Text016@1100485009 : TextConst 'ENU="No lines are advised; total budget will be shown";NOR=Ingen rader anbefales. Totalt budsjett vil bli vist;SVE=Inga rader rekommenderas. Total budget kommer att visas';
      Text017@1100525002 : TextConst 'ENU=No budget line present of project ''%1'', purchase action ''%2''.;NOR=Det finnes ingen budsjettrad i prosjektet ''%1'', innkj›pshandling ''%2''.;SVE=Det finns ingen budgetrad i projektet ''%1'', ink”ps†tg„rd ''%2''.';
      Text018@1100525007 : TextConst 'ENU=%1 Budget Lines advised.';
      Text019@1100525008 : TextConst 'ENU=%1 Budget Lines removed from Advice Order.';
      Text021@1100485004 : TextConst 'ENU=No shipping Details Created;NOR=Ingen leveransedetaljer er opprettet;SVE=Inga leveransdetaljer har skapats';
      Text023@1100485002 : TextConst 'ENU=There are %1 Shipping Details created;NOR=%1 leveransedetaljer er opprettet;SVE=%1 leveransdetaljer har skapats';
      Text024@1100485001 : TextConst 'ENU=Replace Vendor by %1;NOR=Erstatt leverand›r med %1;SVE=Ers„tt leverant”r med %1';
      Text025@1100485011 : TextConst 'ENU=No Vendors modified within Selection.;NOR=Ingen leverand›rer er endret i utvalget.;SVE=Inga leverant”rer har „ndrats i urvalet.';
      Text026@1100525000 : TextConst 'ENU=Do you wat to divide the Advice Order Lines in order to the available inventory on the preferred locations?;NOR=Vil du dele bestillingsunderlagsradene i ordren til tilgjengelig lager p† de foretrukne lokasjonene?;SVE=Vill du dela best„llningsunderlagsraderna f”r tillg„ngligt lager p† de f”rvalda lagerst„llena?';
      SkipMessage@1100525001 : Boolean;
      Text027@1100525003 : TextConst 'ENU=BOM Item has to be exploded.;NOR=Stykklisteartikkel %1 m† utfoldes;SVE=Strukturartikel %1 m†ste expanderas';
      Text028@1210190010 : TextConst 'ENU=Created Plant Requests:;SVE=Skapade maskinbeg„randen:';
      TransferCommentLines@1100529800 : Boolean;
      CompressByElement@1210190022 : Boolean;
      CompressByVariContract@1210190016 : Boolean;
      Text029@1100528300 : TextConst 'ENU=This function can only be used where %1 is empty.;NOR=Denne funksjonen kan kun brukes om %1 er tom.;SVE=Denna fuktion kan enbart anv„ndas om %1 „r tom.';
      Text030@1100525004 : TextConst 'ENU=First select Lines;NOR=Velg rad(er) f›rst;SVE=V„lj rader f”rst';
      SelectionMethod@1100528900 : 'Vendor,Project,Project-Ship-to Location,Ship-to Location,Work Order';
      PrintPurchOrders@1100528909 : Boolean;
      ProcElectronicOrderType@1100528910 : Boolean;
      gCollectiveRun@1100409003 : Boolean;
      OptionsForAdviceOrderDone@1100409005 : Boolean;
      varNoSeries@1100528905 : Code[20];
      varPurchHeader@1100528902 : Record 38;
      TmpPurchHeader@1100528906 : TEMPORARY Record 38;
      PurchOrderHeader@1100528907 : Record 38;
      PurchOrderLine@1100528908 : Record 39;
      StartProcess@1100528800 : Boolean;
      LinkItemDocsToOrder@1100528000 : Boolean;
      varPeriodFilterTxt@1100409000 : Text[30];
      Text031@1100409002 : TextConst 'ENU=Function aborted';
      ToTypeSelected@1100409001 : Boolean;
      gvToType@1100409004 : 'Item Journal,Item Reclass. Journal';
      TransferAccountLinesToPurchaseOrder@1100525006 : Boolean;
      Text032@1100528200 : TextConst 'ENU=The Advice Order %1 %2, %3 %4  can only be released when the approval process is complete.';
      TransferExternalDocuments@1100529600 : Boolean;
      AddDocumentsToDocumentRelations@1100528400 : Boolean;
      Text033@1100529700 : TextConst 'ENU=Do you want to open the plant request?;SVE=Vill du ”ppna maskinbeg„ran?';
      CreatePlantRequestSMF@1100529701 : Boolean;
      Text034@1100525009 : TextConst 'ENU=Blocked and Advice Blocked must be equal to No.';
      UsePurchaserFromAdviceOrder@1100528500 : Boolean;
      AdviceRecordType@1100528501 : 'Project,ServOrder,G/L Account';
      Text035@1100529605 : TextConst 'ENU=No Warehouse App Orders created.';
      Text036@1100529604 : TextConst 'ENU=Warehouse App Order %1 created';
      Text037@1100529603 : TextConst 'ENU=%1 Warehouse App Orders (%2) created';
      Text038@1100529602 : TextConst 'ENU=" in company %1"';
      Text039@1100529601 : TextConst 'ENU=Warehouse App Orders created:';
      CompressByPlotNo@1100527400 : Boolean;

    PROCEDURE SelectProjectBudget@8(IProjectNo@1210190000 : Code[20];IPurchaseAction@11012000 : Code[20];IProjectElementFilter@1100528800 : Code[20]);
    VAR
      BudgetFrm@11012001 : Page 11012005;
      BudgetRec@11012002 : Record 11012001;
    BEGIN
      BudgetRec.RESET;
      BudgetRec.SETRANGE("Project No.", IProjectNo);
      IF IProjectElementFilter <> '' THEN
        BudgetRec.SETRANGE(Element, IProjectElementFilter);
      BudgetRec.SETFILTER("Cost Type", '%1..%2', BudgetRec."Cost Type"::Material, BudgetRec."Cost Type"::Sundry);
      BudgetRec.SETRANGE(Supply,FALSE);
      BudgetRec.SETRANGE("Product Discount Line",FALSE);  //DP01727
      IF IPurchaseAction <> '' THEN BEGIN
        BudgetRec.SETRANGE("Purchase Action", IPurchaseAction);
        IF BudgetRec.FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            BudgetRec.MARK := TRUE;
          UNTIL BudgetRec.NEXT = 0;
        END ELSE BEGIN
          MESSAGE(Text017, IProjectNo, IPurchaseAction);
          EXIT;
        END;
        BudgetRec.MARKEDONLY(TRUE);
        CreateProjectAdvice(BudgetRec);
      END ELSE BEGIN
        CLEAR(BudgetFrm);
        BudgetFrm.SETRECORD(BudgetRec);
        BudgetFrm.SETTABLEVIEW(BudgetRec);
        BudgetFrm.SetSelectionAdvice;
        BudgetFrm.EDITABLE(FALSE);
        BudgetFrm.RUNMODAL;
      END;
    END;

    PROCEDURE SelectPurchaseAction@10(lvProj@1210190000 : Code[20]);
    BEGIN
      ProjPurchActRec.SETFILTER(Status,'>=%1',ProjPurchActRec.Status::Approved);
      ProjPurchActRec.SETFILTER("Project No.", lvProj);
      ProjPurchActRec.SETFILTER("Activate for", '%1|%2',
        ProjPurchActRec."Activate for"::" ", ProjPurchActRec."Activate for"::Advice);
      IF PAGE.RUNMODAL(PAGE::"Project Purchase Action List",ProjPurchActRec) = ACTION::LookupOK THEN BEGIN
        SelectProjectBudget(ProjPurchActRec."Project No.", ProjPurchActRec.Code, '');
      END;
    END;

    [External]
    PROCEDURE SelectServiceBudget@1100485004(lvServOrder@1210190000 : Code[20]);
    VAR
      BudgetFrm@11012001 : Page 11125247;
      BudgetRec@11012002 : Record 11012875;
    BEGIN
      BudgetRec.RESET;
      BudgetRec.SETRANGE("Budget Type", BudgetRec."Budget Type"::Order);
      BudgetRec.SETRANGE("Service Order No.", lvServOrder);
      BudgetRec.SETFILTER("Cost Type", '%1..%2', BudgetRec."Cost Type"::Material, BudgetRec."Cost Type"::Sundry);
      BudgetRec.SETRANGE(Supply,FALSE);

      CLEAR(BudgetFrm);
      BudgetFrm.SETRECORD(BudgetRec);
      BudgetFrm.SETTABLEVIEW(BudgetRec);
      BudgetFrm.SetSelectionAdvice;
      BudgetFrm.EDITABLE(FALSE);
      BudgetFrm.RUNMODAL;
    END;

    [External]
    PROCEDURE CreateProjectAdvice@1100485001(VAR gvBudgetLineRec@1100485000 : Record 11012001);
    VAR
      lvBudgetLineRec@1100485001 : Record 11012001;
      Item@1210190001 : Record 27;
      defDeliver@1100485004 : ' ,Location,Project Location';
      defLocation@1100485003 : Code[20];
      defShippingDate@1100485002 : Date;
      lvPurchAction@1100485005 : Code[20];
      ConfirmAction@1100485006 : Boolean;
      QuantityAdvice@1100529600 : Decimal;
      NumLines@1100525001 : Integer;
      TmpError@1100528500 : TEMPORARY Record 11012051;
      LineNo@1100528501 : Integer;
      MessageError@1100528502 : Text;
      GetDefaultsAdviceOrder@1100528900 : Report 11229286;
    BEGIN
      lvBudgetLineRec.COPY(gvBudgetLineRec);
      WITH lvBudgetLineRec DO BEGIN
        //different construction than usual because function is called from form,page and codeunit
        MARKEDONLY(TRUE);
        IF NOT FINDFIRST THEN BEGIN
          MARKEDONLY(FALSE);
          IF NOT FINDFIRST THEN BEGIN
            MESSAGE(Text030);
            EXIT;
          END;
        END;

        PurchSetup.GET;

        //DP02375.sn
        GetDefaultsAdviceOrder.SetSelection("Project No.",'',DATABASE::"Advice Order Line");
        GetDefaultsAdviceOrder.RUNMODAL;
        GetDefaultsAdviceOrder.GetSelection(defDeliver, defLocation, defShippingDate, TransferCommentLines, CompressByElement, CompressByVariContract, CompressByPlotNo);
        //DP02375.en

        lvPurchAction := GETFILTER("Purchase Action");
        IF lvPurchAction <> '' THEN
          ConfirmAction := TRUE
        ELSE
          ConfirmAction := CONFIRM(Text013,TRUE);
        IF ConfirmAction = TRUE THEN BEGIN
          REPEAT;
            MessageError := CopyAdviceOrderLine(AdviceRec, gvBudgetLineRec, lvBudgetLineRec, QuantityAdvice, defDeliver, defShippingDate, defLocation);
            IF MessageError <> '' THEN BEGIN
              LineNo += 1;
              TmpError."Source Type" := TmpError."Source Type"::Item;
              TmpError."Line No." := LineNo;
              TmpError."Vendor No." := Vendor;
              TmpError."Item No." := "Item No.";
              TmpError."Error message" := MessageError;
              TmpError.INSERT;
            END ELSE
              NumLines := NumLines + 1;
          UNTIL NEXT = 0;
        END;
        IF NOT TmpError.ISEMPTY THEN BEGIN
          COMMIT;
          PAGE.RUNMODAL(PAGE::Errors, TmpError);
        END;

        gvBudgetLineRec.CLEARMARKS;
        IF lvPurchAction = '' THEN BEGIN
          MESSAGE(Text018, NumLines);
        END ELSE BEGIN
          ProjPurchActRec.SETFILTER("Project No.", "Project No.");
          ProjPurchActRec.SETFILTER(Code, lvPurchAction);
          IF ProjPurchActRec.FINDSET(TRUE, FALSE) THEN BEGIN
            REPEAT
              ProjPurchActRec."Activate for" := ProjPurchActRec."Activate for"::Advice;
              ProjPurchActRec.MODIFY;
            UNTIL ProjPurchActRec.NEXT = 0;
          END;
        END;
      END;
    END;

    [External]
    PROCEDURE CreateServiceAdvice@1100485005(VAR gvBudgetLineRec@1100485000 : Record 11012875;GUI_Allowed@1100529000 : Boolean);
    VAR
      lvBudgetLineRec@1100485001 : Record 11012875;
      defDeliver@1100528902 : ' ,Location,Project Location';
      defLocation@1100528901 : Code[20];
      defShippingDate@1100485002 : Date;
      NumLines@1100525001 : Integer;
      TmpError@1100528500 : Record 11012051;
      LineNo@1100528501 : Integer;
      MessageError@1100528502 : Text;
      GetDefaultsAdviceOrder@1100528900 : Report 11229286;
    BEGIN
      IF NOT GUIALLOWED THEN
        GUI_Allowed := FALSE;
      lvBudgetLineRec.COPY(gvBudgetLineRec);
      WITH lvBudgetLineRec DO BEGIN
        IF NOT FINDFIRST THEN BEGIN
          IF GUI_Allowed THEN
            MESSAGE(Text030);
          EXIT;
        END;

        IF GUI_Allowed THEN BEGIN
          IF NOT CONFIRM(Text013,TRUE) THEN
            EXIT;
          //DP02375.sn
          GetDefaultsAdviceOrder.SetSelection('',"Service Order No.",DATABASE::"Advice Order Line");
          GetDefaultsAdviceOrder.RUNMODAL;
          GetDefaultsAdviceOrder.GetSelection(defDeliver, defLocation, defShippingDate, TransferCommentLines, CompressByElement, CompressByVariContract, CompressByPlotNo);
          //DP02375.en
        END;
        FINDSET(TRUE, FALSE);
        REPEAT;
          MessageError := CopyAdviceOrderLineForServiceAdvice(lvBudgetLineRec, gvBudgetLineRec, defDeliver, defShippingDate, defLocation);  //DP02375
          IF MessageError <> '' THEN BEGIN
            LineNo += 1;
            TmpError."Source Type" := TmpError."Source Type"::Item;
            TmpError."Line No." := LineNo;
            TmpError."Vendor No." := Vendor;
            TmpError."Item No." := "Item No.";
            TmpError."Error message" := MessageError;
            TmpError.INSERT;
          END ELSE
            NumLines := NumLines + 1;
        UNTIL NEXT = 0;
        IF (NOT TmpError.ISEMPTY) AND GUI_Allowed THEN BEGIN
          COMMIT;
          PAGE.RUNMODAL(PAGE::Errors, TmpError);
        END;

        gvBudgetLineRec.CLEARMARKS;
        IF GUI_Allowed THEN
          MESSAGE(Text018, NumLines);
      END;
    END;

    [External]
    PROCEDURE RemoveProjectAdvice@1100485000(VAR gvBudgetLineRec@1100485000 : Record 11012001);
    VAR
      lvBudgetLineRec@1100485001 : Record 11012001;
      NumLines@1100525000 : Integer;
    BEGIN
      lvBudgetLineRec.COPY(gvBudgetLineRec);
      WITH lvBudgetLineRec DO BEGIN
        IF NOT FINDFIRST THEN BEGIN
          MESSAGE(Text030);
          EXIT;
        END;

        IF CONFIRM(Text014,TRUE) THEN BEGIN
          FINDSET(TRUE,FALSE);
          REPEAT;
            IF (Advised) AND ("Cost Type" <> "Cost Type"::Labor) THEN
            BEGIN
              Advised := FALSE;
              MODIFY;

              AdviceRec.SETCURRENTKEY("Project No.", Element, "Extension Contract",
                "Item No.", Manufacturer, "Basic Item", "Vendor (Trade Item)", "Trade Item");
              AdviceRec.SETRANGE("Project No.", "Project No.");
              AdviceRec.SETRANGE(Element, Element);
              AdviceRec.SETRANGE("Extension Contract", "Extension Contract");
              AdviceRec.SETRANGE("Item No.", "Item No.");
              AdviceRec.SETRANGE("Basic Item", "Basic Item");
              AdviceRec.SETRANGE(Manufacturer, Manufacturer);
              AdviceRec.SETRANGE("Trade Item", "Trade Item");
              AdviceRec.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
              AdviceRec.SETRANGE("Cost Object", "Cost Object");
              AdviceRec.SETRANGE("Project Planning Activity No.", "Project Planning Activity No.");
              AdviceRec.SETRANGE("Cost Component", "Cost Component");
              AdviceRec.SETRANGE(Description, Description);
              AdviceRec.SETRANGE("Description 2", "Description 2");
              AdviceRec.SETRANGE("Unit of Measure", "Unit of Measure");
              AdviceRec.SETRANGE("Purchase Action", "Purchase Action");
              AdviceRec.SETRANGE("Purchase Route Reference", "Purchase Route Reference");
              AdviceRec.SETRANGE("Price Agreement", "Price Agreement");
              IF Vendor <> '' THEN
                AdviceRec.SETRANGE(Vendor, Vendor);
              IF "Cost Type" = "Cost Type"::Subcontracting THEN
                AdviceRec.SETRANGE("Price (LCY)", "Price (LCY)");
              AdviceRec.SETRANGE("External Text", "External Text");
              IF AdviceRec.FINDSET(TRUE, FALSE) THEN BEGIN
                AdviceRec."Quantity (Budget)" := AdviceRec."Quantity (Budget)" - Quantity;
                AdviceRec."Quantity (Advice)" := AdviceRec."Quantity (Advice)" - Quantity;
                IF AdviceRec."Quantity (Advice)" = 0 THEN BEGIN
                  AdviceRec.DELETE(TRUE);
                END ELSE BEGIN
                  AdviceRec.CalculateTotal;
                  AdviceRec.MODIFY(TRUE);
                END;
              END;
            END;
            NumLines := NumLines + 1;
          UNTIL NEXT = 0;
        END;
      END;

      gvBudgetLineRec.CLEARMARKS;
      MESSAGE(Text019, NumLines);
    END;

    [External]
    PROCEDURE RemoveServiceAdvice@1100485008(VAR gvBudgetLineRec@1100485000 : Record 11012875);
    VAR
      lvBudgetLineRec@1100485001 : Record 11012875;
      NumLines@1100525000 : Integer;
    BEGIN
      lvBudgetLineRec.COPY(gvBudgetLineRec);
      WITH lvBudgetLineRec DO BEGIN
        IF NOT FINDFIRST THEN BEGIN
          MESSAGE(Text030);
          EXIT;
        END;
        IF CONFIRM(Text014,TRUE) THEN BEGIN
          FINDSET(TRUE,FALSE);
          REPEAT;
            IF (Advised) AND ("Cost Type" <> "Cost Type"::Labor) THEN
            BEGIN
              Advised := FALSE;
              MODIFY;

              AdviceRec.SETRANGE("Record Type", AdviceRec."Record Type"::ServOrder);
              AdviceRec.SETFILTER("Project No.", '%1', '');
              AdviceRec.SETRANGE("Service Order No.", "Service Order No.");
              AdviceRec.SETRANGE("Item No.", "Item No.");
              AdviceRec.SETRANGE("Basic Item", "Basic Item");
              AdviceRec.SETRANGE(Manufacturer, Manufacturer);
              AdviceRec.SETRANGE("Trade Item", "Trade Item");
              AdviceRec.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
              AdviceRec.SETRANGE("Cost Object", "Cost Object");
              AdviceRec.SETRANGE("Cost Component", "Cost Component");
              AdviceRec.SETRANGE(Description, Description);
              AdviceRec.SETRANGE("Description 2", "Description 2");
              AdviceRec.SETRANGE("Unit of Measure", "Unit of Measure");
              AdviceRec.SETRANGE("Purchase Route Reference", "Purchase Route Reference");
              AdviceRec.SETRANGE("Price Agreement", "Price Agreement");
              IF Vendor <> '' THEN
                AdviceRec.SETRANGE(Vendor, Vendor);
              IF "Cost Type" = "Cost Type"::Subcontracting THEN
                AdviceRec.SETRANGE("Price (LCY)", Price);
              AdviceRec.SETRANGE("External Text", "External Text");
              IF AdviceRec.FINDSET(TRUE, FALSE) THEN BEGIN
                AdviceRec."Quantity (Budget)" := AdviceRec."Quantity (Budget)" - Quantity;
                AdviceRec."Quantity (Advice)" := AdviceRec."Quantity (Advice)" - Quantity;
                IF AdviceRec."Quantity (Advice)" = 0 THEN BEGIN
                  AdviceRec.DELETE(TRUE)
                END ELSE BEGIN
                  AdviceRec.CalculateTotal;
                  AdviceRec.MODIFY(TRUE);
                END;
              END;
            END;
            NumLines := NumLines + 1;
          UNTIL NEXT = 0;
        END;
      END;

      gvBudgetLineRec.CLEARMARKS;
      MESSAGE(Text019, NumLines);
    END;

    PROCEDURE ToggleProject@5(Phase@11012000 : Integer;VAR gvBudgetLineRec@1100485000 : Record 11012001);
    BEGIN
      WITH gvBudgetLineRec DO BEGIN
        IF Phase = 0 THEN
          SETRANGE(Advised);
        IF Phase = 1 THEN
          SETRANGE(Advised, FALSE);
        IF Phase = 2 THEN
          SETRANGE(Advised, TRUE);
        IF NOT FINDFIRST THEN BEGIN
          SETRANGE(Advised);
          IF Phase = 1 THEN
            MESSAGE(Text015);
          IF Phase = 2 THEN
            MESSAGE(Text016);
        END;
      END;
    END;

    [External]
    PROCEDURE ToggleService@1100485006(Phase@11012000 : Integer;VAR gvBudgetLineRec@1100485000 : Record 11012875);
    BEGIN
      WITH gvBudgetLineRec DO BEGIN
        IF Phase = 0 THEN
          SETRANGE(Advised);
        IF Phase = 1 THEN
          SETRANGE(Advised, FALSE);
        IF Phase = 2 THEN
          SETRANGE(Advised, TRUE);
        IF NOT FINDFIRST THEN BEGIN
          SETRANGE(Advised);
          IF Phase = 1 THEN
            MESSAGE(Text015);
          IF Phase = 2 THEN
            MESSAGE(Text016);
        END;
      END;
    END;

    [External]
    PROCEDURE ProcessPurchaseRequisition@1100525007(VAR gvAdviceRec@1210190001 : Record 11012055);
    VAR
      PurchaseBatchRec@1100525001 : Record 245;
      LineNumber@11012000 : Integer;
      ConFirmAnswered@11012002 : Boolean;
      LastRefNo@1210190002 : Code[20];
      lvFactor@1100485000 : Decimal;
      lvBaseUnit@1100485001 : Code[20];
      StrategicPurchMgt@1100525000 : Codeunit 11020211;
      AdviceRec2@1100525002 : Record 11012055;
    BEGIN
      //Anonymous Purchase Requisition Lines will be created (not related to Project or Service Order).
      IF NOT ProjSetUp.GET THEN ProjSetUp.INIT;
      IF NOT PurchaseBatchRec.GET(ProjSetUp."Purchase Journal Template", ProjSetUp."Purchase Journal Batch") THEN
        ERROR(Text001);

      AdviceRec.COPY(gvAdviceRec);
      AdviceRec.MARKEDONLY(TRUE);
      IF NOT AdviceRec.FINDFIRST THEN
        AdviceRec.MARKEDONLY(FALSE);

      AdviceRec.FILTERGROUP(8);
      AdviceRec.SETFILTER("Receipt Date", '<> %1', 0D);
      AdviceRec.SETRANGE(Transaction, AdviceRec.Transaction::Requisition);
      AdviceRec.SETFILTER("Quantity (Advice)", '<>0');
      AdviceRec.SETRANGE("Process Status", AdviceRec."Process Status"::Released);
      AdviceRec.SETFILTER("Source Type", '<>%1', AdviceRec."Source Type"::"Recipe Header");

      IF NOT AdviceRec.FINDFIRST THEN
        IF NOT ProjSetUp."Release Advice Order Mandatory"  THEN
          AdviceRec.SETFILTER("Process Status", '<%1', AdviceRec."Process Status"::Cancelled);

      IF AdviceRec.FINDSET(FALSE) THEN BEGIN
        REPEAT
          IF AdviceRec.ApprovalEntriesExist THEN
            AdviceRec.MARK(FALSE)
          ELSE
            AdviceRec.MARK(TRUE);
        UNTIL AdviceRec.NEXT = 0;
        AdviceRec.MARKEDONLY(TRUE);
      END;

      IF NOT AdviceRec.FINDSET(FALSE) THEN BEGIN
        IF GUIALLOWED THEN
          MESSAGE(Text000, AdviceRec.TABLECAPTION, AdviceRec.GETFILTERS);
        EXIT;
      END;

      InvtSetup.GET;

      //Confirm before locking
      REPEAT
        IF (AdviceRec."Order Date" < TODAY) AND (AdviceRec."Delivery Period" <> '') THEN BEGIN
          IF NOT CONFIRM(Text003, TRUE) THEN
            ERROR('');
          ConFirmAnswered := TRUE;
       END;
      UNTIL (AdviceRec.NEXT = 0) OR ConFirmAnswered;

      IF NOT AdviceRec.FINDFIRST THEN EXIT;

      LastRefNo := '';

      ReqLineRec.LOCKTABLE;
      ReqLineRec.RESET;
      ReqLineRec.SETRANGE("Worksheet Template Name", ProjSetUp."Purchase Journal Template");
      ReqLineRec.SETRANGE("Journal Batch Name", ProjSetUp."Purchase Journal Batch");
      IF ReqLineRec.FINDLAST THEN
        LineNumber := ReqLineRec."Line No."
      ELSE
        LineNumber := 0;

      AdviceRec.FINDSET(TRUE);
      REPEAT
        StrategicPurchMgt.CheckStratPurchForAdviceOrder(AdviceRec);
        AdviceRec.TESTFIELD("Order Date");
        AdviceRec.CheckRecordType(1); //check status of project/service order
        AdviceRec.CheckDeliver;
        IF (AdviceRec."Order Date" < TODAY) AND (AdviceRec."Delivery Period" <> '') THEN BEGIN
          //Already permitted in 'Confirm before locking', see above
          AdviceRec."Order Date" := TODAY;
          AdviceRec.VALIDATE("Delivery Period");
        END;

        AdviceRec.VALIDATE("Ship To Location");

        ReqLineRec.INIT;
        ReqLineRec."Worksheet Template Name" := ProjSetUp."Purchase Journal Template";
        ReqLineRec."Journal Batch Name" := ProjSetUp."Purchase Journal Batch";
        ReqLineRec."Line No." := LineNumber + 1;
        ReqLineRec.INSERT;
        LineNumber := ReqLineRec."Line No.";

        ReqLineRec.VALIDATE(Deliver, AdviceRec.Deliver);
        ReqLineRec.VALIDATE("Ship To Location", AdviceRec."Ship To Location");

        IF AdviceRec."Quantity (Advice)" < 0 THEN
            AdviceRec.FIELDERROR("Quantity (Advice)");

        ReqLineRec.Quantity := AdviceRec."Quantity (Advice)";
        ReqLineRec.Type := ReqLineRec.Type::Item;
        ReqLineRec."Scheme Code" := AdviceRec."Scheme Code";
        lvFactor := 1;
        IF (AdviceRec."Item No." <> '') AND (AdviceRec."Trade Item" + AdviceRec."Basic Item" = '') THEN BEGIN
          ReqLineRec.VALIDATE("No.", AdviceRec."Item No.");
          ReqLineRec.Manufacturer := AdviceRec.Manufacturer;
          ReqLineRec."Vendor (Trade Item)" := AdviceRec."Vendor (Trade Item)";
          ReqLineRec."Basic Item" := AdviceRec."Basic Item";
          ReqLineRec."Trade Item" := AdviceRec."Trade Item";
        END ELSE BEGIN
          IF AdviceRec."Trade Item" <> '' THEN BEGIN
            ReqLineRec."Vendor (Trade Item)" := AdviceRec."Vendor (Trade Item)";
            ReqLineRec.VALIDATE("Trade Item", AdviceRec."Trade Item");
            TradeItemRec.GET(AdviceRec."Vendor (Trade Item)", AdviceRec."Trade Item");
            IF AdviceRec."Unit of Measure" = UPPERCASE(TradeItemRec."Packaging Unit") THEN BEGIN
              lvFactor := TradeItemRec."Qty. per Unit of Measure";
              lvBaseUnit := TradeItemRec."Application Unit";
            END;
          END ELSE BEGIN
            IF AdviceRec."Basic Item" <> '' THEN BEGIN
              ReqLineRec.Manufacturer := AdviceRec.Manufacturer;
              ReqLineRec.VALIDATE("Basic Item", AdviceRec."Basic Item");
              IF AdviceRec."Trade Item" = '' THEN
                TradeItemVendor;
            END;
          END;
        END;

        AdviceRec.TESTFIELD(Vendor);
        VendorRec.GET(AdviceRec.Vendor);
        ReqLineRec.VALIDATE("Vendor No.", AdviceRec.Vendor);
        ReqLineRec."Order Address Code" := AdviceRec."Order Address Code";
        ReqLineRec.Description := AdviceRec.Description;
        ReqLineRec."Description 2" := AdviceRec."Description 2";
        ReqLineRec."Comments for Logistics" := AdviceRec."Comments for Logistics";
        ReqLineRec."Sales Price" := AdviceRec."Sales Price (LCY)";
        ReqLineRec."Unit of Measure Code" := AdviceRec."Unit of Measure";
        IF NOT ItemUnitRec.GET(ReqLineRec."No.", ReqLineRec."Unit of Measure Code") THEN BEGIN
          ItemUnitRec.INIT;
          ItemUnitRec."Item No." := ReqLineRec."No.";
          ItemUnitRec.Code := ReqLineRec."Unit of Measure Code";
          ItemUnitRec."Qty. per Unit of Measure" := 1;
          ItemUnitRec.INSERT;
        END;
        IF (lvFactor <> 0) AND (lvFactor <> 1) THEN BEGIN
          ReqLineRec.Quantity := AdviceRec."Quantity (Advice)" * lvFactor;
          ReqLineRec.VALIDATE("Unit of Measure Code", lvBaseUnit);
        END ELSE BEGIN
          ReqLineRec.VALIDATE("Unit of Measure Code", AdviceRec."Unit of Measure");
        END;
        AdviceRec.TESTFIELD("Cost Object");
        DimMgt.GetDimValueRec(2,AdviceRec."Cost Object",DimValRec,TRUE,'');
        ReqLineRec.VALIDATE("Shortcut Dimension 2 Code", AdviceRec."Cost Object");
        ReqLineRec."Cost Component" := AdviceRec."Cost Component";
        ReqLineRec."Price Agreement" := AdviceRec."Price Agreement";
        //DP00884.sn
        IF AdviceRec."Currency Code" <> '' THEN BEGIN
          ReqLineRec."Currency Code" := AdviceRec."Currency Code";  //may deviating from default by vendor
          ReqLineRec."Direct Unit Cost" := AdviceRec."Price (FCY)";
        END ELSE BEGIN
          ReqLineRec."Direct Unit Cost" := AdviceRec."Price (LCY)";
        END;
        //DP00884.en
        ReqLineRec."Unit Cost (LCY)" := AdviceRec."Price (LCY)";
        IF (lvFactor <> 0) AND (lvFactor <> 1) THEN BEGIN
          ReqLineRec."Direct Unit Cost" := ReqLineRec."Direct Unit Cost" / lvFactor;
          ReqLineRec."Unit Cost (LCY)" := ReqLineRec."Unit Cost (LCY)"/ lvFactor;
        END;
        ReqLineRec."Unit Price (LCY)" := AdviceRec."Gross Price (LCY)";
        ReqLineRec."Discount % (Item)" := AdviceRec."Discount %";
        ReqLineRec."Purchase Action" := AdviceRec."Purchase Action";
        ReqLineRec."Purchase Phase" := AdviceRec."Purchase Phase";
        ReqLineRec."Due Date" := AdviceRec."Receipt Date";
        ReqLineRec."Order Date" := AdviceRec."Order Date";
        ReqLineRec.VALIDATE(Text, AdviceRec."External Text");
        ReqLineRec."Item Category Code" := AdviceRec."Item Category Code";
        ReqLineRec."Created by" := USERID;
        ReqLineRec."Date Created" := TODAY;

        StrategicPurchMgt.FindContractForAdviceOrder(AdviceRec);
        ReqLineRec."Accept Action Message" := TRUE;

        ReqLineRec."Use Blanket Order" :=
          AdviceRec."Contract Type" IN [
            AdviceRec."Contract Type"::"General Blanket Order",
            AdviceRec."Contract Type"::"Project Blanket Order",
            AdviceRec."Contract Type"::"Service Blanket Order"];

        ReqLineRec."Contract Type" := AdviceRec."Contract Type";
        IF (AdviceRec.Deliver = AdviceRec.Deliver::Location) AND (ReqLineRec."Location Code" = '') THEN BEGIN
          ReqLineRec."Location Code" := AdviceRec."Location Code";
          ReqLineRec."Bin Code" := AdviceRec."Bin Code (Project Inventory)";
        END;

        IF (AdviceRec."Purchase Route Reference" <> '') THEN BEGIN
          ReqLineRec."Purchase Route Reference" := AdviceRec."Purchase Route Reference";
        END ELSE BEGIN
          IF (LastRefNo = '') THEN
            LastRefNo := RouteRefMgtCU.GetLastRefNo();
          LastRefNo := INCSTR(LastRefNo);
          ReqLineRec."Purchase Route Reference" := LastRefNo;
        END;
        ReqLineRec."Modified by" := USERID;
        ReqLineRec."Last Date Modified" := TODAY;
        ReqLineRec."Variant Code" := AdviceRec."Variant Code";
        ReqLineRec."FSC Type Code" := AdviceRec."FSC Type Code";
        AdviceRec.CALCFIELDS("Shelf No. (Item)");
        ReqLineRec."Shelf No. (Item)" := AdviceRec."Shelf No. (Item)";
        ReqLineRec.GetItemComposition;
        ReqLineRec.MODIFY;

        AdviceRec2.COPY(AdviceRec);  //don't disturbe pointer on original selection
        AdviceRec2."Purchase Route Reference" := ReqLineRec."Purchase Route Reference";
        AdviceRec2."Quantity (Advice)" := AdviceRec2."Quantity (Advice)" - ReqLineRec.Quantity;
        AdviceRec2."Quantity (Processed)" := AdviceRec2."Quantity (Processed)" + ReqLineRec.Quantity;
        IF AdviceRec2."Quantity (Processed)" < AdviceRec2."Quantity (Budget)" THEN BEGIN
          AdviceRec2.ProcessOpenStatus;
        END ELSE BEGIN
          AdviceRec2.ProcessCloseStatus;
        END;
        SaveAdviceRec(AdviceRec2);
        AdviceRec2.MODIFY(TRUE);
        RestoreAdviceRec(AdviceRec2);

      UNTIL AdviceRec.NEXT = 0;

      IF (LastRefNo <> '') THEN
        RouteRefMgtCU.WriteLastRefNo(LastRefNo);

      gvAdviceRec.CLEARMARKS;
    END;

    [External]
    PROCEDURE ProcessGenQuote@1210190006(VAR gvAdviceRec@1210190002 : Record 11012055);
    VAR
      AdviceOrderLine@1210190001 : Record 11012055;
      lvGenQuoteFromAdvOrderCU@1210190000 : Codeunit 11012047;
    BEGIN
      AdviceOrderLine.COPY(gvAdviceRec);
      AdviceOrderLine.SETRANGE("Project No.", gvAdviceRec."Project No.");
      lvGenQuoteFromAdvOrderCU.GenerateQuoteFromAdvOrder(AdviceOrderLine);
      gvAdviceRec.CLEARMARKS;
    END;

    PROCEDURE ProcessPurchase@2(VAR gvAdviceRec@1210190001 : Record 11012055;CollectRun@1210190000 : Boolean;ItemRun@1210190003 : Boolean);
    BEGIN
      //DP00137
      //in this function ReqLine (codeunit 333) is skipped, but interface (report 493) is still used for old and new procedure

      TmpAdviceRec.DELETEALL;
      TmpPurchHeader.DELETEALL;
      COMMIT; //NAV2016 needed in case of workflow on table PurchHeader.

      CheckAdviceBeforeProcessing(gvAdviceRec, CollectRun, ItemRun);
      IF StartProcess THEN
        CreatePurchaseOrders;

      gvAdviceRec.CLEARMARKS;
    END;

    PROCEDURE ProcessInventory@3(VAR gvAdviceRec@1210190000 : Record 11012055;CollectRun@1210190001 : Boolean;ItemRun@1210190002 : Boolean) Counter : Integer;
    VAR
      LastRefNo@1100409000 : Code[20];
    BEGIN
      InvtSetup.GET;
      IF NOT ProjSetUp.GET THEN ProjSetUp.INIT;

      IF NOT CollectRun THEN BEGIN
        AdviceRec.COPY(gvAdviceRec);
        AdviceRec.MARKEDONLY(TRUE);
        IF NOT AdviceRec.FINDFIRST THEN
          AdviceRec.MARKEDONLY(FALSE);
        AdviceRec.FILTERGROUP(8);
        IF NOT ItemRun THEN BEGIN
          IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN
            AdviceRec.SETRANGE("Project No.", AdviceRec."Project No.");
          IF AdviceRec."Record Type" = AdviceRec."Record Type"::ServOrder THEN
            AdviceRec.SETRANGE("Service Order No.", AdviceRec."Service Order No.");
        END;
        AdviceRec.SETFILTER("Receipt Date", '<> %1', 0D);
      END;
      AdviceRec.FILTERGROUP(8);
      AdviceRec.SETRANGE(Transaction, AdviceRec.Transaction::Inventory);
      AdviceRec.SETFILTER("Quantity (Advice)", '<>0');
      AdviceRec.SETRANGE("Process Status", AdviceRec."Process Status"::Released);
      AdviceRec.CALCFIELDS("Logistics on Component Level");
      AdviceRec.SETRANGE("Logistics on Component Level",FALSE);

      IF NOT AdviceRec.FINDFIRST THEN
        IF (ProjSetUp."Release Advice Order Mandatory") THEN BEGIN
          IF (AdviceRec.COUNT = 0) AND GUIALLOWED THEN
            IF NOT SkipMessage THEN  //C034299
              MESSAGE(Text000, AdviceRec.TABLECAPTION, AdviceRec.GETFILTERS);
          EXIT;
        END ELSE
          AdviceRec.SETFILTER("Process Status", '<%1', AdviceRec."Process Status"::Cancelled);

      IF AdviceRec.FINDSET(FALSE) THEN BEGIN
        REPEAT
          IF AdviceRec.ApprovalEntriesExist THEN
            AdviceRec.MARK(FALSE)
          ELSE
            AdviceRec.MARK(TRUE);
        UNTIL AdviceRec.NEXT = 0;
        AdviceRec.MARKEDONLY(TRUE);
      END;

      IF (NOT AdviceRec.FINDFIRST) THEN BEGIN
        IF (AdviceRec.COUNT = 0) AND GUIALLOWED THEN
          IF NOT SkipMessage THEN
            MESSAGE(Text000, AdviceRec.TABLECAPTION, AdviceRec.GETFILTERS);
        EXIT;
      END;

      IF NOT ToTypeSelected THEN
        SelectToTypeAndBatch(gvToType);

      Counter := 0;
      REPEAT
        AdviceRec2.COPY(AdviceRec);

        IF (AdviceRec2."Supplying Company Inventory" = '') THEN BEGIN
          IF InvtSetup."Location Mandatory" THEN
            AdviceRec2.TESTFIELD("Location Code");
          AdviceRec2.VALIDATE("Location Code");
          AdviceRec2.VALIDATE("Ship To Location");
          IF (AdviceRec."Record Type" = AdviceRec."Record Type"::Project) AND (AdviceRec.Element = '') THEN BEGIN
            ProjRec.GET(AdviceRec."Project No.");
            IF ProjRec."Posting Element Mandatory" THEN
              AdviceRec.TESTFIELD(Element);
          END;

          ItemJnlLineRec.LOCKTABLE;
          ItemJnlLineRec.INIT;
          IF gvToType = gvToType::"Item Journal" THEN
            ItemJnlLineRec."Line No." := GetBatchAndLastLineNo(AdviceRec2."Location Code",InventoryBatchRec) + 1
          ELSE
            ItemJnlLineRec."Line No." := GetBatchAndLastLineNoInventory(InventoryBatchRec) + 1;
          ItemJnlLineRec."Journal Template Name" := InventoryBatchRec."Journal Template Name";
          ItemJnlLineRec."Journal Batch Name" := InventoryBatchRec.Name;
          ItemJnlLineRec.INSERT(TRUE);

          ItemJnlLineRec."Origin Type Line" := ItemJnlLineRec."Origin Type Line"::AdviceOrderLine;
          IF InventoryBatchRec."No. Series" <> '' THEN BEGIN
            CLEAR(NoSeriesMgt);
            ItemJnlLineRec."Document No." := NoSeriesMgt.GetNextNo(InventoryBatchRec."No. Series",0D,FALSE);
          END;
          ItemJnlLineRec."Salespers./Purch. Code" := AdviceRec2."Purchaser Code";
          IF AdviceRec2."Record Type" = AdviceRec2."Record Type"::Project THEN
            ItemJnlLineRec.VALIDATE("Job No.", AdviceRec2."Project No.");
          IF AdviceRec2."Record Type" = AdviceRec2."Record Type"::ServOrder THEN BEGIN
            ItemJnlLineRec."Additional Cost (Service)" := AdviceRec2."Additional Cost (Service)";
            ItemJnlLineRec.VALIDATE("Service Order No.", AdviceRec2."Service Order No.");
          END;
          ItemJnlLineRec.Element := AdviceRec2.Element;
          ItemJnlLineRec."Extension Contract" := AdviceRec2."Extension Contract";
          ItemJnlLineRec."Plot No." := AdviceRec2."Plot No.";
          ItemJnlLineRec."Location Code" := AdviceRec2."Location Code";
          IF AdviceRec2."Quantity (Advice)" < 0 THEN
            AdviceRec2.FIELDERROR("Quantity (Advice)");
          ItemJnlLineRec.Quantity := AdviceRec2."Quantity (Advice)";
          ItemJnlLineRec."Delivery Date" := AdviceRec2."Receipt Date";
          IF gvToType = gvToType::"Item Journal" THEN
            ItemJnlLineRec."Entry Type" := ItemJnlLineRec."Entry Type"::Sale
          ELSE
            ItemJnlLineRec."Entry Type" := ItemJnlLineRec."Entry Type"::Transfer;
          ItemJnlLineRec."Posting Date" := TODAY;
          ItemJnlLineRec."Document Date" := TODAY;
          ItemJnlLineRec."Source Code" := InventoryTemplateRec."Source Code";
          ItemJnlLineRec."Reason Code" := InventoryBatchRec."Reason Code";
          IF NOT ItemRec.GET(AdviceRec2."Item No.") THEN
            ERROR(Text006)
          ELSE
            ItemJnlLineRec.VALIDATE("Item No.", AdviceRec2."Item No.");
          ItemJnlLineRec."Bin Code" := AdviceRec2."Bin Code";
          ItemJnlLineRec."Bin Code (Project Inventory)" := AdviceRec2."Bin Code (Project Inventory)";
          ItemJnlLineRec.VALIDATE("Unit of Measure Code", AdviceRec2."Unit of Measure");
          AdviceRec2.TESTFIELD("Cost Object");
          DimMgt.GetDimValueRec(2,AdviceRec2."Cost Object",DimValRec,TRUE,'');
          ItemJnlLineRec.VALIDATE("Shortcut Dimension 2 Code", AdviceRec2."Cost Object");
          ItemJnlLineRec."Cost Component" := AdviceRec2."Cost Component";
          ItemJnlLineRec.Description := AdviceRec2.Description;
          ItemJnlLineRec."Description 2" := AdviceRec2."Description 2";
          IF AdviceRec2.Deliver = AdviceRec2.Deliver::"Service Location" THEN
            ItemJnlLineRec.Deliver := ItemJnlLineRec.Deliver::"Service Location"
          ELSE
            IF AdviceRec2.Deliver = AdviceRec2.Deliver::"Project Location" THEN
              ItemJnlLineRec.Deliver := ItemJnlLineRec.Deliver::"Project Location"
            ELSE
              ItemJnlLineRec.Deliver := ItemJnlLineRec.Deliver::Location;
          IF gvToType = gvToType::"Item Journal" THEN
            ItemJnlLineRec."Ship To Location" := AdviceRec2."Ship To Location"
          ELSE
            ItemJnlLineRec.VALIDATE("New Location Code", AdviceRec2."Ship To Location");
          ItemJnlLineRec.VALIDATE(Text, AdviceRec2."External Text");
          ItemJnlLineRec.Blocked := InvtSetup."Default Blocked";
          ItemJnlLineRec."Entity Type" := AdviceRec2."Entity Type";
          ItemJnlLineRec."System No." := AdviceRec2."System No.";
          ItemJnlLineRec."Yard No." := AdviceRec2."Yard No.";
          ItemJnlLineRec."Entity No." := AdviceRec2."Entity No.";
          ItemJnlLineRec."Cable Transit Pos." := AdviceRec2."Cable Transit Pos.";
          ItemJnlLineRec."Comments for Logistics" := AdviceRec2."Comments for Logistics";
          ItemJnlLineRec."Variant Code" := AdviceRec2."Variant Code";
          ItemJnlLineRec."Item Category Code" := AdviceRec."Item Category Code";
          ItemJnlLineRec."Delivery Time" := AdviceRec2."Delivery Time";
          IF AdviceRec2."Purchase Route Reference" = '' THEN BEGIN
            LastRefNo := RouteRefMgtCU.GetLastRefNo();
            LastRefNo := INCSTR(LastRefNo);
            AdviceRec2."Purchase Route Reference" := LastRefNo;
            RouteRefMgtCU.WriteLastRefNo(LastRefNo);
          END;
          ItemJnlLineRec."Purchase Route Reference" := AdviceRec2."Purchase Route Reference";
          ItemJnlLineRec."Additional Cost (Service)" := AdviceRec2."Additional Cost (Service)";
          IF (AdviceRec2."Supplying Company Inventory" = '') THEN
            ItemJnlLineRec.MODIFY(TRUE)  //fill quantity (reserved)
          END ELSE BEGIN
            WriteInventoryOrderLine(AdviceRec2);

          ItemJnlLineRec.Quantity := AdviceRec2."Quantity (Advice)"; //see test below
        END;
        Counter := Counter + 1;

        AdviceRec2."Quantity (Advice)" := AdviceRec2."Quantity (Advice)" - ItemJnlLineRec.Quantity;
        AdviceRec2."Quantity (Processed)" := AdviceRec2."Quantity (Processed)" + ItemJnlLineRec.Quantity;
        IF AdviceRec2."Quantity (Processed)" < AdviceRec2."Quantity (Budget)" THEN BEGIN
          AdviceRec2.ProcessOpenStatus;
        END ELSE BEGIN
          AdviceRec2.ProcessCloseStatus;
        END;
        SaveAdviceRec(AdviceRec2);
        AdviceRec2.MODIFY(TRUE);
        RestoreAdviceRec(AdviceRec2);
      UNTIL AdviceRec.NEXT = 0;

      IF NOT SkipMessage THEN
        MESSAGE(Text010, Counter);

      gvAdviceRec.CLEARMARKS;
      AdviceRec.FILTERGROUP(0);
    END;

    [External]
    PROCEDURE ProcessPlantRequest@1210190008(VAR gvAdviceRec@1210190001 : Record 11012055);
    VAR
      PlantSetup@1210190013 : Record 11012550;
      PlantRequest@1210190007 : Record 11020520;
      PlantRequestLine@1210190008 : Record 11020521;
      PlantType@1100525000 : Record 11012551;
      Item@1100525001 : Record 27;
      PlantLocation@1210190015 : Record 11012554;
      GenericTempTable@1100529002 : TEMPORARY Record 11020579;
      ConFirmAnswered@11012002 : Boolean;
      CheckElementMandatory@1210190014 : Boolean;
      PlantCompany@1100529000 : Text;
      PlantRequestSMF@1100529700 : Record 11125529;
      PlantRequestLineSMF@1100529701 : Record 11125530;
    BEGIN
      IF NOT ProjSetUp.GET THEN ProjSetUp.INIT;

      AdviceRec.COPY(gvAdviceRec);
      AdviceRec.FILTERGROUP(8);
      AdviceRec.SETFILTER("Record Type", '%1|%2', AdviceRec."Record Type"::Project,AdviceRec."Record Type"::ServOrder);
      AdviceRec.SETRANGE(Transaction, AdviceRec.Transaction::Plant);
      AdviceRec.SETFILTER("Receipt Date", '<> %1', 0D);
      AdviceRec.SETFILTER("Quantity (Advice)", '<>0');
      AdviceRec.SETFILTER("Source Type", '<>%1', AdviceRec."Source Type"::"Recipe Header");
      AdviceRec.SETRANGE("Process Status", AdviceRec."Process Status"::Released);
      IF NOT AdviceRec.FINDFIRST THEN
        IF ProjSetUp."Release Advice Order Mandatory" THEN
          EXIT
        ELSE
          AdviceRec.SETFILTER("Process Status", '<%1', AdviceRec."Process Status"::Cancelled);
      AdviceRec.FILTERGROUP(0);
      IF AdviceRec.FINDSET(FALSE) THEN BEGIN
        REPEAT
          IF AdviceRec.ApprovalEntriesExist THEN
            AdviceRec.MARK(FALSE)
          ELSE
            AdviceRec.MARK(TRUE);
        UNTIL AdviceRec.NEXT = 0;
        AdviceRec.MARKEDONLY(TRUE);
      END;
      IF NOT AdviceRec.FINDSET(FALSE) THEN EXIT;

      REPEAT
        AdviceRec.TESTFIELD("Plant Location");
        AdviceRec.CheckRecordType(1); //check status of project/service order
        AdviceRec.CheckItemInPlantCompany;
        PlantCompany := AdviceRec."Plant Company";
        IF PlantCompany = '' THEN
          PlantCompany := COMPANYNAME;
        PlantLocation.CHANGECOMPANY(PlantCompany);
        PlantLocation.GET(AdviceRec."Plant Location");
        PlantLocation.TESTFIELD(Depot, FALSE);
        IF AdviceRec."Plant Type" <> '' THEN BEGIN
          PlantType.CHANGECOMPANY(PlantCompany);
          PlantType.GET(AdviceRec."Plant Type");
          PlantType.TESTFIELD("Order via Plant Request", TRUE);
        END ELSE BEGIN
          IF AdviceRec."Item No." <> '' THEN BEGIN
            Item.CHANGECOMPANY(PlantCompany);
            Item.GET(AdviceRec."Item No.");
            Item.TESTFIELD("Order via Plant Request", TRUE);
          END;
        END;
        IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN BEGIN
          CheckElementMandatory := FALSE;
          PlantSetup.CHANGECOMPANY(PlantCompany);
          PlantSetup.GET;
          IF PlantSetup."Plant - Element Mandatory" THEN BEGIN
            IF PlantLocation."Project No." = AdviceRec."Project No." THEN
              CheckElementMandatory := TRUE;
          END;
          IF CheckElementMandatory THEN BEGIN
            ProjRec.GET(AdviceRec."Project No.");
            IF ProjRec."Posting Element Mandatory" THEN
              AdviceRec.TESTFIELD(Element);
          END;
        END;
        IF (ConFirmAnswered) AND (AdviceRec."Order Date" < TODAY) AND (AdviceRec."Delivery Period" <> '') THEN BEGIN
          IF NOT CONFIRM(Text003, TRUE) THEN
            ERROR('');
          ConFirmAnswered := TRUE;
       END;
      UNTIL AdviceRec.NEXT = 0;
      IF NOT AdviceRec.FINDFIRST THEN EXIT;

      AdviceRec.FINDSET(TRUE);
      REPEAT
        PlantCompany := AdviceRec."Plant Company";
        IF PlantCompany = '' THEN
          PlantCompany := COMPANYNAME;
        IF CreatePlantRequestSMF THEN BEGIN
          CheckCreateNewPlantRequest(AdviceRec, PlantCompany, PlantRequest, PlantRequestSMF, GenericTempTable);
          CreatePlantRequestLineSMF(AdviceRec, PlantCompany, PlantRequestSMF, PlantRequestLineSMF);
          AdviceRec."Plant Request No." := PlantRequestSMF."No.";
        END ELSE BEGIN
          PlantRequest.CHANGECOMPANY(PlantCompany);
          PlantRequestLine.CHANGECOMPANY(PlantCompany);
          CheckCreateNewPlantRequest(AdviceRec, PlantCompany, PlantRequest, PlantRequestSMF, GenericTempTable);
          CreatePlantRequestLine(AdviceRec, PlantCompany, PlantRequest, PlantRequestLine);
          IF PlantRequestLine.Type <> PlantRequestLine.Type::Text THEN BEGIN
            AdviceRec."Quantity (Advice)" -= PlantRequestLine.Quantity;
            AdviceRec."Quantity (Processed)" += PlantRequestLine.Quantity;
          END ELSE BEGIN
            AdviceRec."Quantity (Processed)" += AdviceRec."Quantity (Advice)";
            AdviceRec."Quantity (Advice)" := 0;
          END;
          AdviceRec."Plant Request No." := PlantRequest."No.";
        END;
        IF AdviceRec."Quantity (Processed)" < AdviceRec."Quantity (Budget)" THEN BEGIN
          AdviceRec.ProcessOpenStatus;
        END ELSE BEGIN
          AdviceRec.ProcessCloseStatus;
        END;
        SaveAdviceRec(AdviceRec);
        AdviceRec.MODIFY(TRUE);
        RestoreAdviceRec(AdviceRec);
      UNTIL AdviceRec.NEXT = 0;
      MessageCreatedPlantRequests(GenericTempTable, PlantRequest, PlantRequestSMF);
    END;

    [External]
    PROCEDURE UpdateReceiptDateFromProjectElement@1100528800(VAR AdviceOrderLine@1100528800 : Record 11012055);
    VAR
      ProjectElement@1100528801 : Record 11012010;
    BEGIN
      IF AdviceOrderLine.FINDSET THEN
        REPEAT
          IF (AdviceOrderLine."Project No." <> '') AND (AdviceOrderLine.Element <> '') THEN BEGIN
            ProjectElement.SETRANGE("Project No.", AdviceOrderLine."Project No.");
            ProjectElement.SETRANGE(Element, AdviceOrderLine.Element);
            IF ProjectElement.FINDFIRST THEN
              IF ProjectElement."Starting Date" <> 0D THEN BEGIN
                AdviceOrderLine.VALIDATE("Receipt Date", ProjectElement."Starting Date");
                AdviceOrderLine.MODIFY;
              END;
          END;
        UNTIL AdviceOrderLine.NEXT = 0;
    END;

    [External]
    PROCEDURE GetBatchAndLastLineNo@1100525000(Location@1100525000 : Code[10];VAR ItemJournalBatch@1100525001 : Record 233) LastLineNo : Integer;
    VAR
      LocationRec@1100525002 : Record 14;
      ItemJournalLine@1100525003 : Record 83;
    BEGIN
      IF LocationRec.GET(Location) THEN BEGIN
        IF (LocationRec."Inventory Journal Template" <> '') AND (LocationRec."Inventory Journal Batch" <> '') THEN BEGIN
          IF NOT InventoryTemplateRec.GET(LocationRec."Inventory Journal Template") THEN
            InventoryTemplateRec.INIT;
          IF NOT InventoryBatchRec.GET(LocationRec."Inventory Journal Template",LocationRec."Inventory Journal Batch") THEN
            ERROR(Text008);
        END ELSE BEGIN
          IF NOT InventoryTemplateRec.GET(ProjSetUp."Inventory Journal Template") THEN
            InventoryTemplateRec.INIT;
          IF NOT InventoryBatchRec.GET(ProjSetUp."Inventory Journal Template", ProjSetUp."Inventory Journal Batch") THEN
            ERROR(Text008);
        END;
      END ELSE BEGIN
        IF NOT InventoryTemplateRec.GET(ProjSetUp."Inventory Journal Template") THEN
          InventoryTemplateRec.INIT;
        IF NOT InventoryBatchRec.GET(ProjSetUp."Inventory Journal Template", ProjSetUp."Inventory Journal Batch") THEN
          ERROR(Text008);
      END;

      ItemJournalLine.SETRANGE("Journal Template Name",InventoryBatchRec."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",InventoryBatchRec.Name);
      IF ItemJournalLine.FINDLAST THEN
        LastLineNo := ItemJournalLine."Line No."
      ELSE
        LastLineNo := 0;
    END;

    [External]
    PROCEDURE GetBatchAndLastLineNoInventory@1100409001(VAR ItemJournalBatch@1100525001 : Record 233) LastLineNo : Integer;
    VAR
      ItemJournalLine@1100525003 : Record 83;
    BEGIN
      IF NOT InventoryBatchRec.GET(ItemJournalBatch."Journal Template Name", ItemJournalBatch.Name) THEN
        ERROR(Text008);

      ItemJournalLine.SETRANGE("Journal Template Name",InventoryBatchRec."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",InventoryBatchRec.Name);
      IF ItemJournalLine.FINDLAST THEN
        LastLineNo := ItemJournalLine."Line No."
      ELSE
        LastLineNo := 0;
    END;

    PROCEDURE ProcessRun@12(ItemRun@1210190000 : Boolean);
    VAR
      ServOrderFilter@1100485001 : Text[80];
      ProjectFilter@1100485000 : Text[80];
      ElemFilter@11012002 : Text[80];
      DateFilter@11012004 : Text[80];
      TransactionFilter@1100528902 : 'Purchase,Inventory,Both';
      InventoryRun@11012005 : Boolean;
      PurchaseRun@11012006 : Boolean;
      SelectAdviceOrder@1100528901 : Report 11229287;
    BEGIN
      //DP02375.sn
      SelectAdviceOrder.RUNMODAL;
      SelectAdviceOrder.GetSelection(TransactionFilter, ProjectFilter, ElemFilter, ServOrderFilter, DateFilter);
      //DP02375.en

      AdviceRec.RESET;
      IF ServOrderFilter <> '' THEN AdviceRec.SETFILTER("Service Order No.", ServOrderFilter);
      IF ProjectFilter <> '' THEN AdviceRec.SETFILTER("Project No.", ProjectFilter);
      IF ElemFilter <> '' THEN AdviceRec.SETFILTER(Element, ElemFilter);
      IF DateFilter <> '' THEN BEGIN
        DateFilter := DateFilter + STRSUBSTNO('& > %1', 00010101D);
        AdviceRec.SETFILTER("Receipt Date", DateFilter);
      END ELSE BEGIN
        AdviceRec.SETFILTER("Receipt Date", '<> %1', 0D);
      END;
      AdviceRec.SETFILTER("Quantity (Advice)", '<>0');
      IF NOT AdviceRec.FINDFIRST THEN EXIT;

      REPEAT
        IF AdviceRec.Transaction = AdviceRec.Transaction::Purchase THEN BEGIN
          IF (TransactionFilter = TransactionFilter::Purchase) OR (TransactionFilter = TransactionFilter::Both) THEN
            PurchaseRun := TRUE;
        END;
        IF AdviceRec.Transaction = AdviceRec.Transaction::Inventory THEN BEGIN
          IF (TransactionFilter = TransactionFilter::Inventory) OR (TransactionFilter = TransactionFilter::Both) THEN
            InventoryRun := TRUE;
        END;
      UNTIL (AdviceRec.NEXT = 0) OR
            ((TransactionFilter = TransactionFilter::Purchase) AND (PurchaseRun)) OR
            ((TransactionFilter = TransactionFilter::Inventory) AND (InventoryRun)) OR
            ((TransactionFilter = TransactionFilter::Both) AND (PurchaseRun) AND (InventoryRun));

      COMMIT;  //C006703

      IF PurchaseRun THEN
        ProcessPurchase(AdviceRec, TRUE, ItemRun);
      IF InventoryRun THEN
        ProcessInventory(AdviceRec, TRUE, ItemRun);
    END;

    [External]
    PROCEDURE ProcessShippingDetails@1100485003(VAR gvAdviceRec@1100485000 : Record 11012055);
    VAR
      lShippingDetailsFrm@1210190006 : Page 11012485;
      lShippingDetailsRec@1210190005 : Record 11012120;
      lShippingDetailsCU@1210190000 : Codeunit 11012286;
      lLineNr@1210190003 : Integer;
      lCounter@1210190004 : Integer;
      lShow@1210190001 : Boolean;
      lvShippingAgent@1100485001 : Text[30];
      lvOrder@1100485002 : Text[30];
    BEGIN
      AdviceRec.COPY(gvAdviceRec);

      WITH AdviceRec DO BEGIN
        IF NOT FINDFIRST THEN
          ERROR(Text011);

        lCounter := 0;
        SETRANGE(Processed, FALSE);
        IF "Record Type" = "Record Type"::Project THEN
          SETRANGE("Project No.", "Project No.");
        IF "Record Type" = "Record Type"::ServOrder THEN
          SETRANGE("Service Order No.", "Service Order No.");
        SETFILTER("Shipping Detail Line", '%1', 0);
        SETFILTER("Record Type", '<>%1', "Record Type"::"G/L Account");  //DP01378
        IF FINDSET(TRUE,TRUE) THEN BEGIN
          IF "Record Type" = "Record Type"::Project THEN BEGIN
            ProjRec.GET("Project No.");
            ProjRec.TESTFIELD("Shipping Agent Code");
            lvShippingAgent := ProjRec."Shipping Agent Code";
            lvOrder := ProjRec."No.";
          END;
          IF "Record Type" = "Record Type"::ServOrder THEN BEGIN
            ServOrderRec.GET("Service Order No.");
            ServOrderRec.TESTFIELD("Shipping Agent Code");
            lvShippingAgent := ServOrderRec."Shipping Agent Code";
            lvOrder := ServOrderRec."No.";
          END;

          AdviceRec2.INIT;
          REPEAT
            IF (AdviceRec2.Deliver <> Deliver) OR (AdviceRec2."Ship To Location" <> "Ship To Location") THEN BEGIN
              AdviceRec2.COPY(AdviceRec);
              AdviceRec2.SETRANGE(Deliver, Deliver);
              AdviceRec2.SETRANGE("Ship To Location", "Ship To Location");
              lLineNr := lShippingDetailsCU.ShippingDetailsAdviceOrder(AdviceRec2, ServOrderRec, ProjRec);
              lCounter := lCounter + 1;
              IF AdviceRec2.FINDSET(TRUE, FALSE) THEN BEGIN
                REPEAT
                  AdviceRec2."Shipping Detail Line" := lLineNr;
                  AdviceRec2.MODIFY;
                UNTIL AdviceRec2.NEXT = 0 ;
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      IF lCounter <> 0 THEN
        MESSAGE(Text023, lCounter);

      lShippingDetailsRec.SETRANGE("Shipping Agent Code", lvShippingAgent);
      lShippingDetailsRec.SETRANGE(Source, lShippingDetailsRec.Source::AdviceOrder);
      lShippingDetailsRec.SETRANGE("Order No.", lvOrder);
      lShow := TRUE;

      IF lShippingDetailsRec.FINDFIRST THEN BEGIN
        IF lCounter = 0 THEN
          lShow := CONFIRM(Text011);
        IF lShow THEN BEGIN
          CLEAR(lShippingDetailsFrm);
          lShippingDetailsFrm.SETTABLEVIEW(lShippingDetailsRec);
          lShippingDetailsFrm.SETRECORD(lShippingDetailsRec);
          lShippingDetailsFrm.RUN;
        END;
      END ELSE BEGIN
        MESSAGE(Text021);
      END;

      gvAdviceRec.CLEARMARKS;
    END;

    [External]
    PROCEDURE RemoveAdviceOrders@1100528900(VAR gvAdviceRec@1100528904 : Record 11012055);
    VAR
      AdviceOrder@1100528900 : Record 11012055;
      AdviceRep@1100528600 : Report 11012666;
    BEGIN
      WITH gvAdviceRec DO BEGIN
        AdviceOrder.SETRANGE("Record Type", "Record Type");
        IF "Record Type"= "Record Type"::Project THEN BEGIN
          AdviceOrder.SETRANGE("Project No.", "Project No.");
          AdviceOrder.SETFILTER("Project Status", '%1..', AdviceOrder."Project Status"::Finished);
        END;
        IF "Record Type"= "Record Type"::ServOrder THEN BEGIN
          AdviceOrder.SETRANGE("Service Order No.", "Service Order No.");
          AdviceOrder.SETFILTER("Service Order Status", '%1..', AdviceOrder."Service Order Status"::Finished);
        END;
        IF "Record Type"= "Record Type"::"G/L Account" THEN  //DP01378
          AdviceOrder.SETRANGE("G/L Account", "G/L Account");
        AdviceOrder.SETFILTER("Process Status", '%1|%2', "Process Status"::Cancelled, "Process Status"::Processed);
        AdviceOrder.SETFILTER("Order Date", '..%1', CALCDATE('<-1M>', TODAY));
        AdviceRep.SETTABLEVIEW(AdviceOrder);
        AdviceRep.RUNMODAL;
        CLEAR(AdviceRep);
      END;
    END;

    [External]
    PROCEDURE ApproveLines@1210190002(VAR gvAdviceRec@1210190000 : Record 11012055);
    VAR
      ApprovalManagement4PSConstr@1100528200 : Codeunit 11125349;
    BEGIN
      AdviceRec.COPY(gvAdviceRec);
      IF NOT AdviceRec.FINDFIRST THEN
        ERROR(Text030);

      IF NOT AdviceRec.FINDSET(TRUE,FALSE) THEN EXIT;
      REPEAT
        IF (AdviceRec."Process Status" = AdviceRec."Process Status"::Open) OR
           (AdviceRec."Process Status" = AdviceRec."Process Status"::"Partly Processed") THEN
        BEGIN
          IF NOT AdviceRec.Processed THEN BEGIN
            IF NOT ApprovalManagement4PSConstr.IsAdviceOrderLineApprovalsWorkflowEnabled(AdviceRec) THEN BEGIN
              AdviceRec.VALIDATE("Process Status",AdviceRec."Process Status"::Released);
              AdviceRec.MODIFY(TRUE);
            END ELSE BEGIN
              IF AdviceRec."Service Order No." <> '' THEN
                MESSAGE(Text032, AdviceRec.FIELDCAPTION("Service Order No."), AdviceRec."Service Order No.",
                        AdviceRec.FIELDCAPTION("Line No."), AdviceRec."Line No.")
              ELSE
                MESSAGE(Text032, AdviceRec.FIELDCAPTION("Project No."),AdviceRec."Project No.",
                        AdviceRec.FIELDCAPTION("Line No."), AdviceRec."Line No.");
            END;
          END;
        END;
      UNTIL AdviceRec.NEXT = 0;

      AdviceRec.MARKEDONLY(FALSE);
      gvAdviceRec.CLEARMARKS;
    END;

    [External]
    PROCEDURE CancelLines@1100528500(VAR gvAdviceRec@1210190000 : Record 11012055);
    BEGIN
      //C040285
      AdviceRec.COPY(gvAdviceRec);
      IF NOT AdviceRec.FINDFIRST THEN
        ERROR(Text030);

      IF NOT AdviceRec.FINDSET(TRUE,FALSE) THEN EXIT;
      REPEAT
        IF (AdviceRec."Process Status" = AdviceRec."Process Status"::Open) OR
           (AdviceRec."Process Status" = AdviceRec."Process Status"::"Partly Processed") THEN
        BEGIN
          IF NOT AdviceRec.Processed THEN BEGIN
            AdviceRec.VALIDATE("Process Status",AdviceRec."Process Status"::Cancelled);
            AdviceRec.MODIFY(TRUE);
          END;
        END;
      UNTIL AdviceRec.NEXT = 0;

      AdviceRec.MARKEDONLY(FALSE);
      gvAdviceRec.CLEARMARKS;
    END;

    PROCEDURE CompressLines@1(gvAdviceRec@1210190000 : Record 11012055);
    VAR
      MainRec@11012000 : Record 11012055;
      OldAdviceRec@1100409000 : Record 11012055;
      PurchaseLineDetail@1210190002 : Record 11020660;
      PurchaseLineDetailIsCopied@1210190001 : Boolean;
      CompressAdviceOrder@1100525000 : Page 11126586;
      ContinueBln@1100525004 : Boolean;
      SelectElement@1100525003 : Boolean;
      SelectExtensionContract@1100525002 : Boolean;
      SelectPlanningActivity@1100525001 : Boolean;
      SelectPurchRouteRef@1100528900 : Boolean;
      SelectPlotNo@1100527400 : Boolean;
    BEGIN
      AdviceRec.COPY(gvAdviceRec);

      MainRec.SETRANGE("Record Type", AdviceRec."Record Type");
      MainRec.SETFILTER("Process Status", '<>%1', AdviceRec."Process Status"::"Pending Approval");
      IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN
        MainRec.SETRANGE("Project No.", AdviceRec."Project No.");
      IF AdviceRec."Record Type" = AdviceRec."Record Type"::ServOrder THEN
        MainRec.SETRANGE("Service Order No.", AdviceRec."Service Order No.");
      IF AdviceRec."Record Type"= AdviceRec."Record Type"::"G/L Account" THEN  //DP01378
        MainRec.SETRANGE("G/L Account", AdviceRec."G/L Account");
      IF NOT MainRec.FINDSET(FALSE, FALSE) THEN EXIT;

      CompressAdviceOrder.LOOKUPMODE := TRUE;
      ContinueBln := (CompressAdviceOrder.RUNMODAL = ACTION::LookupOK);
      IF NOT ContinueBln THEN EXIT;
      CompressAdviceOrder.GetSelection(SelectElement,SelectExtensionContract,SelectPlanningActivity,SelectPurchRouteRef,SelectPlotNo);  //C053852

      REPEAT
        AdviceRec.RESET;
        IF MainRec."Record Type" = MainRec."Record Type"::Project THEN BEGIN
          AdviceRec.SETCURRENTKEY("Project No.", Element, "Extension Contract",
            "Item No.", Manufacturer, "Basic Item", "Vendor (Trade Item)", "Trade Item");
          AdviceRec.SETRANGE("Project No.", MainRec."Project No.");
          //DP01378.sn
          AdviceRec.SETFILTER("Service Order No.", '%1', '');
          AdviceRec.SETFILTER("G/L Account", '%1', '');
          //DP01378.en
          IF SelectElement THEN
            AdviceRec.SETRANGE(Element, MainRec.Element);
          IF SelectExtensionContract THEN
            AdviceRec.SETRANGE("Extension Contract", MainRec."Extension Contract");
          IF SelectPlanningActivity THEN
            AdviceRec.SETRANGE("Project Planning Activity No.", MainRec."Project Planning Activity No.");
        END;
        IF MainRec."Record Type" = MainRec."Record Type"::ServOrder THEN BEGIN
          AdviceRec.SETRANGE("Service Order No.", MainRec."Service Order No.");
          //DP01378.sn
          AdviceRec.SETFILTER("Project No.", '%1', '');
          AdviceRec.SETFILTER("G/L Account", '%1', '');
          //DP01378.en
        END;
        IF MainRec."Record Type" = MainRec."Record Type"::"G/L Account" THEN BEGIN
          //DP01378.sn
          AdviceRec.SETRANGE("G/L Account", MainRec."G/L Account");
          AdviceRec.SETFILTER("Project No.", '%1', '');
          AdviceRec.SETFILTER("Service Order No.", '%1', '');
          //DP01378.en
        END;
        AdviceRec.SETRANGE("Item No.", MainRec."Item No.");
        IF SelectPlotNo THEN
          AdviceRec.SETRANGE("Plot No.", MainRec."Plot No.");
        AdviceRec.SETRANGE("Basic Item", MainRec."Basic Item");
        AdviceRec.SETRANGE(Manufacturer, MainRec.Manufacturer);
        AdviceRec.SETRANGE("Trade Item", MainRec."Trade Item");
        AdviceRec.SETRANGE("Vendor (Trade Item)", MainRec."Vendor (Trade Item)");

        AdviceRec.SETRANGE("Cost Object", MainRec."Cost Object");
        AdviceRec.SETRANGE("Cost Component", MainRec."Cost Component");
        AdviceRec.SETRANGE("Unit of Measure", MainRec."Unit of Measure");
        AdviceRec.SETRANGE(Description, MainRec.Description);
        AdviceRec.SETRANGE("Description 2", MainRec."Description 2");
        AdviceRec.SETRANGE("External Text", MainRec."External Text");
        AdviceRec.SETRANGE("FSC Type Code", MainRec."FSC Type Code");

        AdviceRec.SETRANGE("Purchase Action", MainRec."Purchase Action");
        IF SelectPurchRouteRef THEN  //C053852
          AdviceRec.SETRANGE("Purchase Route Reference", MainRec."Purchase Route Reference");

        //C053852.sn
        AdviceRec.SETRANGE("Recipe Group", MainRec."Recipe Group");
        AdviceRec.SETRANGE(Recipe, MainRec.Recipe);
        AdviceRec.SETRANGE("Source Type", MainRec."Source Type");
        //C053852.en

        AdviceRec.SETRANGE("Location Code", MainRec."Location Code");
        AdviceRec.SETRANGE("Ship To Location", MainRec."Ship To Location");
        AdviceRec.SETRANGE(Transaction, MainRec.Transaction);
        AdviceRec.SETRANGE("Supplying Company Inventory", MainRec."Supplying Company Inventory");
        AdviceRec.SETRANGE(Deliver, MainRec.Deliver);

        AdviceRec.SETRANGE("Price (LCY)", MainRec."Price (LCY)");
        AdviceRec.SETRANGE("Discount %", MainRec."Discount %");

        AdviceRec.SETFILTER("Line No.", '<>%1', MainRec."Line No.");
        //AdviceRec.SETFILTER("Process Status", '<>%1', AdviceRec."Process Status"::Cancelled);
        AdviceRec.SETFILTER(
          "Process Status", '%1|%2|%3|%4|%5',
            AdviceRec."Process Status"::Open,
            AdviceRec."Process Status"::"Partly Processed",
            AdviceRec."Process Status"::Released,
            AdviceRec."Process Status"::"On Hold",
            AdviceRec."Process Status"::Processed);
        AdviceRec.SETRANGE(Processed, FALSE);
        IF AdviceRec.FINDSET(TRUE, FALSE) THEN BEGIN
          OldAdviceRec := AdviceRec;
          AdviceRec."Quantity (Budget)" := AdviceRec."Quantity (Budget)" + MainRec."Quantity (Budget)";
          AdviceRec."Quantity (Advice)" := AdviceRec."Quantity (Advice)" + MainRec."Quantity (Advice)";
          AdviceRec.VALIDATE("Quantity (Advice)");  //evaluate GetDefaults
          AdviceRec."Quantity (Processed)" := AdviceRec."Quantity (Processed)" + MainRec."Quantity (Processed)";
          AdviceRec.GetStatusOnProcess(FALSE);
          IF (OldAdviceRec."Process Status" = OldAdviceRec."Process Status"::Released) AND
             (MainRec."Process Status" = MainRec."Process Status"::Released) THEN
            AdviceRec."Process Status" := AdviceRec."Process Status"::Released;  //(reset by GetStatusOnProcess)
          IF (AdviceRec."Purchaser Code" = '') THEN AdviceRec."Purchaser Code" := MainRec."Purchaser Code";
          AdviceRec."Scheme Code" := '';
          AdviceRec."Comments for Logistics" := '';
          IF NOT SelectElement THEN
            AdviceRec.Element := '';
          IF NOT SelectExtensionContract THEN
            AdviceRec."Extension Contract" := '';
          IF NOT SelectPlotNo THEN
            AdviceRec."Plot No." := '';
          IF NOT SelectPlanningActivity THEN
            AdviceRec.VALIDATE("Project Planning Activity No.", '');
          IF NOT SelectPurchRouteRef THEN
            AdviceRec."Purchase Route Reference" := MainRec."Purchase Route Reference";  //C053852
          IF MainRec."Source Type" <> MainRec."Source Type"::" " THEN
            AdviceRec."Attached to Line No." := MainRec."Attached to Line No.";  //C053852
          AdviceRec.CalculateTotal();
          AdviceRec.MODIFY(TRUE);
          IF (NOT PurchaseLineDetailIsCopied) THEN BEGIN
            PurchaseLineDetailIsCopied := PurchaseLineDetail.CopyLine(
              PurchaseLineDetail."Line Type"::"Advice Order",
              MainRec."Record Type", MainRec."Project No.", MainRec."Yard No.",
              MainRec."System No.", MainRec."Entity Type", MainRec."Entity No.",
              MainRec."Service Order No.", '', MainRec."Line No.",
              PurchaseLineDetail."Line Type"::"Advice Order", '', AdviceRec."Line No.",
              FALSE);
          END;
          CopyDocLinks(MainRec, AdviceRec);
          AdviceRec.RESET;
          AdviceRec.SETCURRENTKEY("Record Type", "Project No.", "Service Order No.", "G/L Account", "Line No.");  //DP01378
          IF AdviceRec.GET(MainRec."Record Type", MainRec."Project No.", MainRec."Service Order No.",
            MainRec."G/L Account", MainRec."Line No.") THEN BEGIN  //DP01378
            AdviceRec.SetCalledFromCompressingLines(TRUE);
            AdviceRec.DELETE(TRUE);
            AdviceRec.SetCalledFromCompressingLines(FALSE);
          END;
        END;
      UNTIL MainRec.NEXT = 0;
    END;

    PROCEDURE SplitLines@9(VAR gvAdviceRec@1210190000 : Record 11012055);
    VAR
      PurchaseLineDetail@1210190002 : Record 11020660;
      LineNumber@11012000 : Integer;
      InventoryQuan@1210190001 : Decimal;
    BEGIN
      AdviceRec.COPY(gvAdviceRec);
      AdviceRec.SETFILTER("Process Status", '<>%1&<>%2', AdviceRec."Process Status"::Cancelled, AdviceRec."Process Status"::"Pending Approval");

      IF AdviceRec.ISEMPTY THEN BEGIN
        MESSAGE(Text030);
        EXIT;
      END;

      AdviceRec.SETRANGE("Supplying Company Inventory", '');
      IF AdviceRec.ISEMPTY THEN BEGIN
        MESSAGE(Text029, AdviceRec.FIELDCAPTION("Supplying Company Inventory"));
        AdviceRec.MARKEDONLY(FALSE);
        gvAdviceRec.CLEARMARKS;
        EXIT;
      END;

      IF (AdviceRec.FINDSET(TRUE, TRUE)) THEN BEGIN
        IF CONFIRM(Text012,TRUE) THEN BEGIN
          REPEAT;
            LineNumber := AdviceRec."Line No." + 1;
            WHILE AdviceRec2.GET(AdviceRec."Record Type", AdviceRec."Project No.", AdviceRec."Service Order No.",
              AdviceRec."G/L Account", LineNumber) DO  //DP01378
              LineNumber := LineNumber + 1;
            AdviceRec2 := AdviceRec;
            AdviceRec2."Line No." := LineNumber;
            InventoryQuan := InventoryReservation(AdviceRec."Item No.");
            IF InventoryQuan > 0 THEN BEGIN
              AdviceRec2.VALIDATE(Transaction, AdviceRec2.Transaction::Inventory);
              IF InventoryQuan < (AdviceRec."Quantity (Budget)" - AdviceRec."Quantity (Processed)") THEN
                AdviceRec2."Quantity (Budget)" := InventoryQuan
              ELSE
                AdviceRec2."Quantity (Budget)" := AdviceRec."Quantity (Budget)" - AdviceRec."Quantity (Processed)";
            END ELSE BEGIN
              AdviceRec2.VALIDATE(Transaction, AdviceRec2.Transaction::Purchase);
              AdviceRec2."Location Code" := '';
              AdviceRec2."Quantity (Budget)" := 0;
            END;
            AdviceRec2."Quantity (Advice)" := AdviceRec2."Quantity (Budget)";
            AdviceRec2."Quantity (Processed)" := 0;
            AdviceRec2.ProcessOpenStatus;
            AdviceRec2.GetDefaultTransaction;
            AdviceRec2.CalculateTotal;
            AdviceRec2.INSERT(TRUE);
            PurchaseLineDetail.CopyLine(PurchaseLineDetail."Line Type"::"Advice Order",
              AdviceRec."Record Type", AdviceRec."Project No.", AdviceRec."Yard No.",
              AdviceRec."System No.", AdviceRec."Entity Type", AdviceRec."Entity No.",
              AdviceRec."Service Order No.", '', AdviceRec."Line No.",
              PurchaseLineDetail."Line Type"::"Advice Order", '', AdviceRec2."Line No.",
              FALSE);
            CopyDocLinks(AdviceRec, AdviceRec2);
            IF (AdviceRec."Purchase Route Reference" <> '') THEN BEGIN
              AdviceRec2."Purchase Route Reference" := AdviceRec."Purchase Route Reference";
              AdviceRec2.MODIFY;
            END;

            AdviceRec."Quantity (Budget)" := AdviceRec."Quantity (Budget)" - AdviceRec2."Quantity (Budget)";
            AdviceRec."Quantity (Advice)" := AdviceRec."Quantity (Advice)" - AdviceRec2."Quantity (Advice)";
            IF (AdviceRec."Quantity (Processed)" < AdviceRec."Quantity (Budget)") OR
               (AdviceRec."Quantity (Advice)" > 0 ) THEN BEGIN
              AdviceRec.ProcessOpenStatus;
            END ELSE BEGIN
              AdviceRec.ProcessCloseStatus;
            END;
            AdviceRec.CalculateTotal;
            AdviceRec.MODIFY(TRUE);
          UNTIL AdviceRec.NEXT = 0;
        END;
      END;

      AdviceRec.MARKEDONLY(FALSE);
      gvAdviceRec.CLEARMARKS;
    END;

    [External]
    PROCEDURE ReopenAdviceOrder@1100528200(VAR AdviceOrderLine@1100485000 : Record 11012055);
    BEGIN
      WITH AdviceOrderLine DO BEGIN
        ProcessOpenStatus;
        MODIFY(TRUE);
      END;
    END;

    [External]
    PROCEDURE GenerateICKOrder@1100525009(VAR gvAdviceRec@1100525012 : Record 11012055);
    VAR
      PurchSetup@1100525007 : Record 312;
      TmpPurchHeaderRec@1100525000 : TEMPORARY Record 38;
      TmpPurchLineRec@1100525001 : TEMPORARY Record 39;
      ProjRec@1100525004 : Record 11072003;
      ServOrderRec@1100525006 : Record 11012823;
      ServLocRec@1100409001 : Record 11012801;
      ServiceOrderLocation@1100528400 : Record 11071688;
      ProjLocRec@1210190004 : Record 11012011;
      LocRec@1100409000 : Record 14;
      NewDoc@1100525002 : Code[20];
      LastLine@1100525003 : Integer;
      ICMCodeunit@1100525005 : Codeunit 11012247;
      NoSeriesMgt@1100525008 : Codeunit 396;
      FileMgt@1100525013 : Codeunit 419;
      FirstOrder@1100525009 : Text[30];
      LastOrder@1100525010 : Text[30];
      Text000@1100525011 : TextConst 'ENU=The orders (%1) have been created.;NOR=Ordre (%1) er opprettet.;SVE=Order (%1) har skapats.';
      lvPath@1210190000 : Text[250];
      lvFile@1210190001 : Text[250];
      lvFactor@1210190003 : Decimal;
    BEGIN
      AdviceRec.COPY(gvAdviceRec);

      IF AdviceRec.ISEMPTY THEN BEGIN
        MESSAGE(Text030);
        EXIT;
      END;

      PurchSetup.GET;
      PurchSetup.TESTFIELD("ICK Order Nos.");

      IF AdviceRec.FINDSET(TRUE, TRUE) THEN BEGIN
        REPEAT
          AdviceRec.TESTFIELD(Vendor);

          IF TmpPurchHeaderRec."Buy-from Vendor No." <> AdviceRec.Vendor THEN BEGIN
            TmpPurchHeaderRec.INIT;
            TmpPurchHeaderRec."Document Type" := TmpPurchHeaderRec."Document Type"::Order;
            TmpPurchHeaderRec."No." := NoSeriesMgt.GetNextNo(PurchSetup."ICK Order Nos.",0D,TRUE);
            TmpPurchHeaderRec."Buy-from Vendor No." := AdviceRec.Vendor;
            IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN BEGIN
              TmpPurchHeaderRec."Job No." := AdviceRec."Project No.";
              ProjRec.GET(AdviceRec."Project No.");
              TmpPurchHeaderRec."Ship-to Name" := ProjRec.Description;
              TmpPurchHeaderRec."Ship-to Address" := ProjRec.Address;
              TmpPurchHeaderRec."Ship-to Post Code" := ProjRec."Post Code";
              TmpPurchHeaderRec."Ship-to City" := ProjRec.City;
              IF ProjRec.Deliver = ProjRec.Deliver::Location THEN BEGIN
                IF LocRec.GET(ProjRec."Ship To Location") THEN BEGIN
                  TmpPurchHeaderRec."Ship-to Address" := LocRec.Address;
                  TmpPurchHeaderRec."Ship-to Post Code" := LocRec."Post Code";
                  TmpPurchHeaderRec."Ship-to City" := LocRec.City;
                END;
              END;
              IF ProjRec.Deliver = ProjRec.Deliver::"Project Location" THEN BEGIN
                IF ProjLocRec.GET(AdviceRec."Project No.", ProjRec."Ship To Location") THEN BEGIN
                  TmpPurchHeaderRec."Ship-to Address" := ProjLocRec.Address;
                  TmpPurchHeaderRec."Ship-to Post Code" := ProjLocRec."Post Code";
                  TmpPurchHeaderRec."Ship-to City" := ProjLocRec.City;
                END;
              END;
            END;
            IF AdviceRec."Record Type" = AdviceRec."Record Type"::ServOrder THEN BEGIN
              TmpPurchHeaderRec."Service Order No." := AdviceRec."Service Order No.";
              ServOrderRec.GET(AdviceRec."Service Order No.");
              TmpPurchHeaderRec."Ship-to Name" := ServOrderRec.Name;
              TmpPurchHeaderRec."Ship-to Address" := ServOrderRec.Address;
              TmpPurchHeaderRec."Ship-to Post Code" := ServOrderRec."Post Code";
              TmpPurchHeaderRec."Ship-to City" := ServOrderRec.City;
              IF ServLocRec.GET(ServOrderRec."Service Location No.") THEN BEGIN
                IF ServLocRec.Deliver = ServLocRec.Deliver::Location THEN BEGIN
                  IF LocRec.GET(ServLocRec."Ship To Location") THEN BEGIN
                    TmpPurchHeaderRec."Ship-to Address" := LocRec.Address;
                    TmpPurchHeaderRec."Ship-to Post Code" := LocRec."Post Code";
                    TmpPurchHeaderRec."Ship-to City" := LocRec.City;
                  END;
                END;
                IF ServLocRec.Deliver = ServLocRec.Deliver::"Service Loc. Ship-to Address" THEN BEGIN
                  IF ServiceOrderLocation.GET(
                    AdviceRec."Service Order No.", ServLocRec."Ship To Location")
                  THEN BEGIN
                    TmpPurchHeaderRec."Ship-to Address" := ServiceOrderLocation.Address;
                    TmpPurchHeaderRec."Ship-to Post Code" := ServiceOrderLocation."Post Code";
                    TmpPurchHeaderRec."Ship-to City" := ServiceOrderLocation.City;
                  END;
                END;
              END;
            END;
            TmpPurchHeaderRec.INSERT;
            NewDoc := TmpPurchHeaderRec."No.";
            LastLine := 0;
            IF FirstOrder = '' THEN FirstOrder := TmpPurchHeaderRec."No.";
            LastOrder := TmpPurchHeaderRec."No.";
          END;

          TmpPurchLineRec.INIT;
          TmpPurchLineRec."Document Type" := TmpPurchHeaderRec."Document Type";
          TmpPurchLineRec."Document No." := TmpPurchHeaderRec."No.";
          TmpPurchLineRec."Buy-from Vendor No." := TmpPurchHeaderRec."Buy-from Vendor No.";
          TmpPurchLineRec."Trade Item" := AdviceRec."Trade Item";
          TmpPurchLineRec.Description := AdviceRec.Description;
          lvFactor := 0;
          IF TradeItemRec.GET(AdviceRec."Vendor (Trade Item)", AdviceRec."Trade Item") THEN
            IF AdviceRec."Unit of Measure" = UPPERCASE(TradeItemRec."Application Unit") THEN
              lvFactor := TradeItemRec."Qty. per Unit of Measure";
          IF lvFactor = 0 THEN lvFactor := 1;
          TmpPurchLineRec."ICM Quantity" := ROUND(AdviceRec.GetDeliverableQuantity / lvFactor);
          TmpPurchLineRec."Direct Unit Cost" := ROUND(AdviceRec."Price (LCY)" * lvFactor);
          TmpPurchLineRec."Line No." := LastLine + 1;
          TmpPurchLineRec."Input by" := USERID;
          TmpPurchLineRec."Input Date" := TODAY;
          TmpPurchLineRec.INSERT;
          LastLine := TmpPurchLineRec."Line No.";

          IF AdviceRec."Receipt Date" > TmpPurchHeaderRec."Expected Receipt Date" THEN
            TmpPurchHeaderRec."Expected Receipt Date" := AdviceRec."Receipt Date";
          IF AdviceRec."Quantity (Advice)" < 0 THEN
            TmpPurchHeaderRec."Purchase Order Type" := TmpPurchHeaderRec."Purchase Order Type"::"Return Order";  //DP01402
          TmpPurchHeaderRec.MODIFY;

          AdviceRec."ICK Order" := LastOrder;
          AdviceRec.MODIFY;
        UNTIL AdviceRec.NEXT = 0;
      END;

      ICMCodeunit.SetTruncateAddress(TRUE);
      ICMCodeunit.ProcessAdviceOrder(TmpPurchHeaderRec, TmpPurchLineRec);

      FirstOrder := '';
      LastOrder := '';
      IF AdviceRec.FINDSET THEN BEGIN
        REPEAT
          VendorRec.GET(AdviceRec.Vendor);
          lvPath := VendorRec."Pathname Purchase Exchange" + VendorRec."Directory ICK";
          lvFile := AdviceRec."ICK Order" + '.ick';

          //check erase ICK-file due to errors in ICMCodeunit
          IF NOT FileMgt.ClientFileExists(lvPath + lvFile) THEN BEGIN
            IF TmpPurchHeaderRec.GET(TmpPurchHeaderRec."Document Type"::Order, AdviceRec."ICK Order") THEN
              TmpPurchHeaderRec.DELETE;
            AdviceRec."ICK Order" := '';
            AdviceRec.MODIFY;
          END;
        UNTIL AdviceRec.NEXT = 0;
        IF TmpPurchHeaderRec.FINDFIRST THEN
          FirstOrder := TmpPurchHeaderRec."No.";
        IF TmpPurchHeaderRec.FINDLAST THEN
          LastOrder := TmpPurchHeaderRec."No.";
      END;

      IF FirstOrder <> '' THEN BEGIN
        IF FirstOrder <> LastOrder THEN
          MESSAGE(Text000, FirstOrder + '..' + LastOrder)
        ELSE
          MESSAGE(Text000, FirstOrder);
      END;

      AdviceRec.MARKEDONLY(FALSE);
      gvAdviceRec.CLEARMARKS;
    END;

    [External]
    PROCEDURE UpdateVendorTradeItem@1100485009(VAR AORec@1100485000 : Record 11012055;NewVendor@1100485001 : Code[20];Final@1100485012 : 'Yes,Only Report');
    VAR
      AO@1100485009 : Record 11012055;
      TempAO@1100485010 : TEMPORARY Record 11012055;
      VendorRec@1100485002 : Record 11012304;
      TradeItemRec@1100485008 : Record 11012317;
      NewTradeItem@1100485011 : Code[20];
      UpdateRep@1100525000 : Report 11012350;
    BEGIN
      IF NewVendor = '' THEN
        EXIT;

      TempAO.DELETEALL;
      VendorRec.GET(NewVendor);

      AO.COPY(AORec);

      IF AO.ISEMPTY THEN BEGIN
        ERROR(Text030);
        EXIT;
      END;

      AO.SETFILTER("Vendor (Trade Item)", '<>%1', NewVendor);
      IF AO.FINDSET(TRUE, TRUE) THEN
        IF CONFIRM(Text024,TRUE, VendorRec.Name ) THEN BEGIN
          REPEAT;

            IF TradeItemRec.CheckReplaceVendor(AO."Vendor (Trade Item)", AO."Trade Item", NewVendor, NewTradeItem) THEN BEGIN
              TempAO := AO;
              AO."Trade Item" := '';
              AO.VALIDATE("Vendor (Trade Item)", NewVendor);
              AO.VALIDATE("Trade Item", NewTradeItem);
              IF (AO."Item No." = TempAO."Item No.") AND
                 (AO."Vendor (Trade Item)" = NewVendor) AND
                 (AO."Trade Item" = NewTradeItem) THEN
              BEGIN
                IF Final = Final::Yes THEN BEGIN
                  AO.MODIFY(TRUE);
                END ELSE BEGIN
                  TempAO := AO;
                END;
                TempAO.INSERT;
              END;
            END;
          UNTIL AO.NEXT = 0;
        END;

      IF NOT TempAO.FINDFIRST THEN
        MESSAGE(Text025)
      ELSE BEGIN
        COMMIT;
        UpdateRep.SetTempAdviceOrder(TempAO,Final);
        AO.SETRANGE("Vendor (Trade Item)");
        UpdateRep.SETTABLEVIEW(AO);
        UpdateRep.RUNMODAL;
      END;
    END;

    [External]
    PROCEDURE UpdateActualPrice@1210190007(iType@1100525002 : Integer;iCode@1100525001 : Code[20]);
    VAR
      MainRec@1210190000 : Record 11012055;
      OldMainRec@1210190011 : Record 11012055;
      NewMainRec@1210190012 : Record 11012055;
      Status@1210190004 : Dialog;
      maxrec@1210190003 : Integer;
      currec@1210190002 : Integer;
      lvText001@1210190006 : TextConst 'ENU=Busy with       #1################# @2@@@@@@@@@@@@@;NOR=Opptatt med       #1################# @2@@@@@@@@@@@@@;SVE=Upptagen med    #1################# @2@@@@@@@@@@@@@';
      lvText002@1210190005 : TextConst 'ENU=Project Advice Orders;NOR=Bestillingsunderlag for prosjekt;SVE=Best„llningsunderlag f”r projekt';
      UnitOld@1210190010 : Code[20];
      UnitNew@1210190013 : Code[20];
      ItemTypeOpt@1100525000 : 'Item,Basic Item,Trade Item';
      TradeItemRec@1100525005 : Record 11012317;
      BasicItemRec@1100525004 : Record 11012316;
      ItemRec@1100525003 : Record 27;
    BEGIN
      Status.OPEN(lvText001);
      Status.UPDATE(1,lvText002);

      WITH MainRec DO BEGIN
        IF iType = 0 THEN BEGIN
          SETRANGE("Record Type", "Record Type"::Project);
          SETRANGE("Project No.", iCode);
        END;
        IF iType = 1 THEN BEGIN
          SETRANGE("Record Type", "Record Type"::ServOrder);
          SETRANGE("Service Order No.", iCode);
        END;
        IF iType = 2 THEN BEGIN  //DP01378
          SETRANGE("Record Type", "Record Type"::"G/L Account");
          SETRANGE("G/L Account", iCode);
        END;
        SETRANGE(Processed, FALSE);
        SETRANGE("Price Agreement", FALSE);
        SETFILTER("Purchase Route Reference", '%1', '');
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          currec := 0;
          maxrec := COUNT;
          REPEAT
            OldMainRec := MainRec;
            IF "Trade Item" <> '' THEN BEGIN
              IF TradeItemRec.GET("Vendor (Trade Item)", "Trade Item") THEN
                ValidateItem(ItemTypeOpt::"Trade Item");
            END ELSE BEGIN
              IF "Basic Item" <> '' THEN BEGIN
                IF BasicItemRec.GET(Manufacturer, "Basic Item") THEN
                  ValidateItem(ItemTypeOpt::"Basic Item");
              END ELSE BEGIN
                IF "Item No." <> '' THEN BEGIN
                  IF ItemRec.GET("Item No.") THEN
                    ValidateItem(ItemTypeOpt::Item);
                END;
              END;
            END;
            NewMainRec := MainRec;
            IF NewMainRec."Unit of Measure" <> OldMainRec."Unit of Measure" THEN BEGIN
              UnitOld := OldMainRec."Unit of Measure";
              UnitNew := NewMainRec."Unit of Measure";
              NewMainRec."Unit of Measure" := UnitOld;
              OldMainRec."Unit of Measure" := UnitNew;
              CheckItemUnitConversion(NewMainRec, OldMainRec);
              "Unit of Measure" := UnitOld;
              "Gross Price (LCY)":= NewMainRec."Gross Price (LCY)";
              "Discount %":= NewMainRec."Discount %";
              "Price (LCY)":= NewMainRec."Price (LCY)";
            END;
            CalculateTotal;
            MODIFY(TRUE);
            currec := currec + 1;
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          UNTIL NEXT = 0;
        END;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    [External]
    PROCEDURE UpdateQuotePrice@1100485007(VAR gvAdviceRec@1100485000 : Record 11012055);
    VAR
      PurchLineRec@1100485001 : Record 39;
      Status@1100485004 : Dialog;
      maxrec@1100485003 : Integer;
      currec@1100485002 : Integer;
      lvText001@1100485006 : TextConst 'ENU=Busy with       #1################# @2@@@@@@@@@@@@@;NOR=Opptatt med       #1################# @2@@@@@@@@@@@@@;SVE=Upptagen med    #1################# @2@@@@@@@@@@@@@';
      UnitPrice@1100525001 : Decimal;
    BEGIN
      Status.OPEN(lvText001);

      AdviceRec.COPY(gvAdviceRec);
      WITH AdviceRec DO BEGIN
        SETRANGE("Record Type", gvAdviceRec."Record Type");
        //DP01378.sn
        SETFILTER("Project No.", gvAdviceRec."Project No.");
        SETFILTER("Service Order No.", gvAdviceRec."Service Order No.");
        SETFILTER("G/L Account", gvAdviceRec."G/L Account");
        //DP01378.en
        SETFILTER("Purchase Route Reference", '<>%1', '');
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          currec := 0;
          maxrec := COUNT;
          REPEAT
            Status.UPDATE(1, "Project No." + "Service Order No.");
            PurchLineRec.SETRANGE("Document Type", PurchLineRec."Document Type"::Quote);
            PurchLineRec.SETRANGE("Purchase Route Reference", "Purchase Route Reference");
            PurchLineRec.SETRANGE("Quote Selected", TRUE);
            IF PurchLineRec.FINDFIRST THEN BEGIN
              "Gross Price (LCY)" := PurchLineRec."Unit Price (LCY)";
              "Discount %" := PurchLineRec."Discount % (Item)";
              IF ("Gross Price (LCY)" <> 0) AND ("Discount %" <> 0) THEN
                UnitPrice := "Gross Price (LCY)" * ((100-"Discount %")/ 100)  //C030234
              ELSE
                UnitPrice := PurchLineRec."Unit Cost (LCY)";
              VALIDATE("Price (LCY)", UnitPrice);
              VALIDATE(Vendor, PurchLineRec."Buy-from Vendor No.");
              "Price Agreement" := TRUE;
              MODIFY(TRUE);
            END;
            currec := currec + 1;
            Status.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          UNTIL NEXT = 0;
        END;
      END;

      COMMIT;
      Status.CLOSE;
    END;

    [External]
    PROCEDURE EditText@1210190004(lvAdviceRec@1210190000 : Record 11012055);
    VAR
      TextFrm@11012001 : Page 11012120;
    BEGIN
      WITH lvAdviceRec DO BEGIN
        IF "Line No." = 0 THEN
          ERROR(Text009);

        TextFrm.SetSelection(DATABASE::"Advice Order Line","Project No.","Service Order No.", "G/L Account",  //DP01378
          '','','',"Line No.","Record Type");

        TextFrm.RUNMODAL;
        CLEAR(TextFrm);
      END;
    END;

    [External]
    PROCEDURE DrillDownInventory@1100525003(VAR gvAdviceRec@1100525005 : Record 11012055;ShowLocations@1100525003 : 'All,PrefLocations,Location');
    VAR
      ItemAvailByLoc@1100525001 : Page 492;
      PrefLocationRec@1100525002 : Record 11020353;
      LocationRec@1100525004 : Record 14;
    BEGIN
      WITH gvAdviceRec DO BEGIN
        TESTFIELD("Item No.");

        IF ("Supplying Company Inventory" <> '') THEN BEGIN
          PrefLocationRec.CHANGECOMPANY("Supplying Company Inventory");
          LocationRec.CHANGECOMPANY("Supplying Company Inventory");
          ItemAvailByLoc.SetCompany("Supplying Company Inventory");
        END;

        CASE ShowLocations OF
          ShowLocations::PrefLocations:
            BEGIN
              IF "Record Type" = "Record Type"::Project THEN BEGIN
                PrefLocationRec.SETRANGE(Type,PrefLocationRec.Type::Job);
                PrefLocationRec.SETRANGE("No.","Project No.");
              END;
              IF "Record Type" = "Record Type"::ServOrder THEN BEGIN
                PrefLocationRec.SETRANGE(Type,PrefLocationRec.Type::"Service Order");
                PrefLocationRec.SETRANGE("No.","Service Order No.");
              END;
              IF PrefLocationRec.FINDSET THEN
                REPEAT
                  IF LocationRec.GET(PrefLocationRec."Location Code") THEN
                    LocationRec.MARK(TRUE);
                UNTIL PrefLocationRec.NEXT = 0;
              LocationRec.MARKEDONLY(TRUE);
            END;
          ShowLocations::Location:
            BEGIN
              LocationRec.GET("Location Code");
              LocationRec.SETRECFILTER;
            END;
        END;
        ItemAvailByLoc.SetLocations(LocationRec);
        ItemRec.GET("Item No.");
        IF "Record Type" = "Record Type"::Project THEN
          ItemRec.SETRANGE("Project Filter","Project No.");
        ItemRec.SETRANGE("Date Filter","Receipt Date");
        ItemAvailByLoc.SETRECORD(ItemRec);
        ItemAvailByLoc.SETTABLEVIEW(ItemRec);
        ItemAvailByLoc.RUN;
        ItemRec.SETRANGE("Date Filter");
      END;
    END;

    LOCAL PROCEDURE InventoryReservation@4(lItem@11012000 : Code[20]) : Decimal;
    BEGIN
      IF ItemRec.GET(lItem) THEN
        ItemRec.CALCFIELDS(Inventory)
      ELSE
        ItemRec.INIT;

      EXIT(ItemRec.Inventory);
    END;

    LOCAL PROCEDURE TradeItemVendor@6();
    VAR
      TradeRec@11012000 : Record 11012317;
    BEGIN
      IF NOT VendorRec.GET(AdviceRec.Vendor) THEN VendorRec.INIT;
      IF VendorRec."Vendor (Trade Item)" = '' THEN EXIT;

      TradeRec.SETRANGE("Product Code", AdviceRec."Basic Item");
      TradeRec.SETRANGE(Manufacturer, AdviceRec.Manufacturer);
      TradeRec.SETRANGE("Item Code");
      TradeRec.SETRANGE(Vendor, VendorRec."Vendor (Trade Item)");
      IF TradeRec.FINDFIRST THEN BEGIN
        ReqLineRec."Trade Item"    := TradeRec."Item Code";
        ReqLineRec."Vendor (Trade Item)" := TradeRec.Vendor;
      END ELSE BEGIN
        TradeRec.SETRANGE("Item Code", AdviceRec."Basic Item");
        TradeRec.SETRANGE(Vendor, AdviceRec.Manufacturer);
        IF TradeRec.FINDFIRST THEN BEGIN
          ReqLineRec."Trade Item"    := TradeRec."Item Code";
          ReqLineRec."Vendor (Trade Item)" := TradeRec.Vendor;
        END;
      END;
    END;

    LOCAL PROCEDURE SaveAdviceRec@1210190003(iAdviceRec@1210190000 : Record 11012055);
    BEGIN
      TmpAdviceRec := iAdviceRec;
    END;

    LOCAL PROCEDURE RestoreAdviceRec@1210190005(VAR AdviceRec@1100525000 : Record 11012055);
    BEGIN
      AdviceRec."Modified by" := TmpAdviceRec."Modified by";
      AdviceRec."Last Date Modified" := TmpAdviceRec."Last Date Modified";
      AdviceRec.MODIFY;  //use MODIFY with 'RunTrigger' is "FALSE".
    END;

    [External]
    PROCEDURE SplitLinesPrefLoc@1100525005(VAR gvAdviceRec@1210190000 : Record 11012055);
    VAR
      PurchaseLineDetail@1210190002 : Record 11020660;
      LineNumber@11012000 : Integer;
      InventoryQuan@1210190001 : Decimal;
      RemainingQuantity@1100525000 : Decimal;
      PreferenceLocation@1100525001 : Record 11020353;
      OriginalLineUpdated@1100525002 : Boolean;
      Item@1100525003 : Record 27;
    BEGIN
      gvAdviceRec.TESTFIELD("Quantity (Advice)");

      AdviceRec.COPY(gvAdviceRec);

      IF AdviceRec.ISEMPTY THEN BEGIN
        MESSAGE(Text030);
        EXIT;
      END;

      AdviceRec.SETRANGE("Supplying Company Inventory", '');
      IF AdviceRec.ISEMPTY THEN BEGIN
        MESSAGE(Text029, AdviceRec.FIELDCAPTION("Supplying Company Inventory"));
        AdviceRec.MARKEDONLY(FALSE);
        gvAdviceRec.CLEARMARKS;
        EXIT;
      END;

      IF NOT CONFIRM(Text026,TRUE) THEN BEGIN
        AdviceRec.MARKEDONLY(FALSE);
        gvAdviceRec.CLEARMARKS;
        EXIT;
      END;

      AdviceRec.SETFILTER("Process Status", '<>%1&<>%2', AdviceRec."Process Status"::Cancelled, AdviceRec."Process Status"::"Pending Approval");

      IF AdviceRec.FINDSET(TRUE,TRUE) THEN
        REPEAT
          OriginalLineUpdated := FALSE;
          RemainingQuantity := AdviceRec."Quantity (Advice)";
          LineNumber := AdviceRec."Line No." + 1;

          PreferenceLocation.SETCURRENTKEY(Priority);
          PreferenceLocation.SETRANGE(Type,AdviceRec."Record Type");
          CASE AdviceRec."Record Type" OF
            AdviceRec."Record Type"::Project: PreferenceLocation.SETRANGE("No.",AdviceRec."Project No.");
            AdviceRec."Record Type"::ServOrder: PreferenceLocation.SETRANGE("No.",AdviceRec."Service Order No.");
          END;
          IF PreferenceLocation.FINDSET THEN BEGIN
            REPEAT
              IF RemainingQuantity > 0 THEN BEGIN
                WHILE AdviceRec2.GET(AdviceRec."Record Type",
                  AdviceRec."Project No.", AdviceRec."Service Order No.",
                  AdviceRec."G/L Account", LineNumber) DO BEGIN  //DP01378
                  LineNumber += 1;
                END;
                AdviceRec2 := AdviceRec;
                IF OriginalLineUpdated THEN
                  AdviceRec2."Line No." := LineNumber;
                Item.GET(AdviceRec."Item No.");
                Item.SETRANGE("Project Filter",AdviceRec."Project No.");
                InventoryQuan := AdviceRec.GetInventory(PreferenceLocation."Location Code",Item,FALSE);
                IF InventoryQuan > 0 THEN BEGIN
                  AdviceRec2."Location Code" := PreferenceLocation."Location Code";
                  AdviceRec2.VALIDATE("Delivery Period", '');
                  IF InventoryQuan >= RemainingQuantity THEN BEGIN
                    AdviceRec2."Quantity (Advice)" := RemainingQuantity;
                    RemainingQuantity := 0;
                  END ELSE BEGIN
                    AdviceRec2."Quantity (Advice)" := InventoryQuan;
                    RemainingQuantity := RemainingQuantity - InventoryQuan;
                  END;
                  AdviceRec2.VALIDATE(Transaction, AdviceRec2.Transaction::Inventory);
                  AdviceRec2.CalculateTotal;
                  IF NOT OriginalLineUpdated THEN BEGIN
                    AdviceRec2.MODIFY(TRUE);
                    OriginalLineUpdated := TRUE;
                  END ELSE
                    AdviceRec2.INSERT(TRUE);
                    PurchaseLineDetail.CopyLine(
                      PurchaseLineDetail."Line Type"::"Advice Order",
                      AdviceRec."Record Type", AdviceRec."Project No.", AdviceRec."Yard No.",
                      AdviceRec."System No.", AdviceRec."Entity Type", AdviceRec."Entity No.",
                      AdviceRec."Service Order No.", '', AdviceRec."Line No.",
                      PurchaseLineDetail."Line Type"::"Advice Order", '', AdviceRec2."Line No.",
                      FALSE);
                    CopyDocLinks(AdviceRec, AdviceRec2);
                END;
              END;
            UNTIL PreferenceLocation.NEXT = 0;

            //create purchase
            IF RemainingQuantity > 0 THEN BEGIN
              WHILE AdviceRec2.GET(AdviceRec."Record Type",
                AdviceRec."Project No.", AdviceRec."Service Order No.",
                AdviceRec."G/L Account", LineNumber) DO BEGIN  //DP01378
                LineNumber += 1;
              END;
              AdviceRec2 := AdviceRec;
              AdviceRec2."Line No." := LineNumber;
              AdviceRec2.VALIDATE(Transaction, AdviceRec2.Transaction::Purchase);
              AdviceRec2."Quantity (Advice)" := RemainingQuantity;
              AdviceRec2.CalculateTotal;
              AdviceRec2.INSERT(TRUE);
              PurchaseLineDetail.CopyLine(
                PurchaseLineDetail."Line Type"::"Advice Order",
                AdviceRec."Record Type", AdviceRec."Project No.", AdviceRec."Yard No.",
                AdviceRec."System No.", AdviceRec."Entity Type", AdviceRec."Entity No.",
                AdviceRec."Service Order No.", '', AdviceRec."Line No.",
                PurchaseLineDetail."Line Type"::"Advice Order", '', AdviceRec2."Line No.",
                FALSE);
              CopyDocLinks(AdviceRec, AdviceRec2);
            END;
          END;
        UNTIL AdviceRec.NEXT = 0;

      AdviceRec.MARKEDONLY(FALSE);
      gvAdviceRec.CLEARMARKS;
    END;

    [External]
    PROCEDURE UpdateLines@1100525001(VAR gvAdviceRec@1100525000 : Record 11012055);
    VAR
      lvAdviceRec@1100525001 : Record 11012055;
    BEGIN
      AdviceRec.COPY(gvAdviceRec);

      AdviceRec.MARKEDONLY(TRUE);
      IF NOT AdviceRec.FINDFIRST THEN
        AdviceRec.MARKEDONLY(FALSE);

      AdviceRec.SETRANGE(Processed, FALSE);
      IF AdviceRec.FINDSET(TRUE) THEN BEGIN
        REPEAT
          lvAdviceRec := AdviceRec;
          lvAdviceRec.GetDefaultTransaction;
          lvAdviceRec.EvaluateStartDate(lvAdviceRec."Receipt Date");
          IF lvAdviceRec.Transaction <> AdviceRec.Transaction THEN
            lvAdviceRec.VALIDATE(Transaction);
          lvAdviceRec.MODIFY;
        UNTIL AdviceRec.NEXT = 0;
      END;

      AdviceRec.MARKEDONLY(FALSE);
      gvAdviceRec.CLEARMARKS;
    END;

    [External]
    PROCEDURE SetSkipMessage@1100525002();
    BEGIN
      SkipMessage := TRUE;
    END;

    LOCAL PROCEDURE CopyDocLinks@1100528400(SourceAdviceOrderLine@1100528400 : Record 11012055;TargetAdviceOrderLine@1100528401 : Record 11012055);
    VAR
      DocumentLinkMgt@1100528402 : Codeunit 11012401;
      SourceRecRef@1100528403 : RecordRef;
      TargetRecRef@1100528404 : RecordRef;
    BEGIN
      SourceRecRef.GETTABLE(SourceAdviceOrderLine);
      TargetRecRef.GETTABLE(TargetAdviceOrderLine);
      DocumentLinkMgt.CopyDocLinks(SourceRecRef, TargetRecRef);
    END;

    LOCAL PROCEDURE CheckCreateNewPlantRequest@1100529000(AdviceOrderLine@1100529000 : Record 11012055;PlantCompany@1100529001 : Text;VAR PlantRequest@1100529002 : Record 11020520;VAR PlantRequestSMF@1100529700 : Record 11125529;VAR GenericTempTable@1100529003 : TEMPORARY Record 11020579);
    VAR
      LevelCode@1100529004 : Code[50];
      RequestNo@1100529701 : Code[20];
    BEGIN
      LevelCode := 'NEW REQUEST';
      GenericTempTable.RESET;
      GenericTempTable.SETRANGE("Key Code1", LevelCode);
      GenericTempTable.SETRANGE("Key Code2", PlantCompany);
      GenericTempTable.SETRANGE("Key Code3", AdviceOrderLine."Plant Location");
      GenericTempTable.SETRANGE("Key Code4", FORMAT(AdviceOrderLine."Receipt Date"));
      IF GenericTempTable.FINDFIRST THEN
        IF CreatePlantRequestSMF THEN
          PlantRequestSMF.GET(GenericTempTable.Code1)
        ELSE
          PlantRequest.GET(GenericTempTable.Code1)
      ELSE BEGIN
        IF CreatePlantRequestSMF THEN BEGIN
          CreateNewPlantRequestSMF(AdviceOrderLine, PlantCompany, PlantRequestSMF);
          RequestNo := PlantRequestSMF."No."
        END ELSE BEGIN
          CreateNewPlantRequest(AdviceOrderLine, PlantCompany, PlantRequest);
          RequestNo := PlantRequest."No.";
        END;
        CLEAR(GenericTempTable);
        GenericTempTable."Key Code1" := LevelCode;
        GenericTempTable."Key Code2" := PlantCompany;
        GenericTempTable."Key Code3" := AdviceOrderLine."Plant Location";
        GenericTempTable."Key Code4" := FORMAT(AdviceOrderLine."Receipt Date");
        GenericTempTable.Code1 := RequestNo;
        GenericTempTable.INSERT;

        LevelCode := 'CREATED REQUESTS';
        GenericTempTable.RESET;
        GenericTempTable.SETRANGE("Key Code1", LevelCode);
        GenericTempTable.SETRANGE("Key Code2", PlantCompany);
        IF NOT GenericTempTable.FINDFIRST THEN BEGIN
          CLEAR(GenericTempTable);
          GenericTempTable."Key Code1" := LevelCode;
          GenericTempTable."Key Code2" := PlantCompany;
          GenericTempTable.Text1 := PlantCompany;
          GenericTempTable.INSERT;
        END;
        IF GenericTempTable.Code1 = '' THEN
          GenericTempTable.Code1 := RequestNo;  // First Request No.
        GenericTempTable.Code2 := RequestNo;    // Last Request No.
        GenericTempTable.MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateNewPlantRequest@1210190510(AdviceOrderLine@1210190001 : Record 11012055;PlantCompany@1100529000 : Text;VAR PlantRequest@1210190000 : Record 11020520);
    VAR
      PlantSetup@1100529001 : Record 11012550;
      PlantLocation@1100529003 : Record 11012554;
      NoSeriesMgt@1100529002 : Codeunit 396;
    BEGIN
      PlantRequest.INIT;
      PlantRequest."No." := '';
      IF PlantCompany = COMPANYNAME THEN BEGIN
        PlantSetup.GET;
        PlantRequest.INSERT(TRUE);
        PlantRequest.TESTFIELD("No.");
        PlantRequest.VALIDATE(Type, PlantRequest.Type::Arrival);
        PlantRequest.VALIDATE("Transfer Date", AdviceOrderLine."Receipt Date");
        PlantRequest.VALIDATE("To Location", AdviceOrderLine."Plant Location");
        PlantRequest.VALIDATE("Transfer Date", AdviceOrderLine."Receipt Date");
      END ELSE BEGIN
        PlantSetup.CHANGECOMPANY(PlantCompany);
        PlantLocation.CHANGECOMPANY(PlantCompany);
        PlantSetup.GET;
        PlantSetup.TESTFIELD("Plant Request Nos.");
        PlantRequest."No. Series" := PlantSetup."Plant Request Nos.";
        NoSeriesMgt.SetFromOtherCompany(PlantCompany);
        PlantRequest."No." := NoSeriesMgt.GetNextNo(PlantRequest."No. Series", 0D, TRUE);
        PlantRequest.TESTFIELD("No.");
        PlantRequest.INSERT(FALSE);
        PlantRequest."Created by" := USERID;
        PlantRequest."Created on" := CURRENTDATETIME;
        PlantRequest."Requested by" := USERID;
        PlantRequest."Requested on" := CURRENTDATETIME;
        IF PlantSetup."Transport Orders" THEN
          PlantRequest."Transport Cost for (Advice)" := PlantRequest."Transport Cost for (Advice)"::Location;
        PlantRequest.Type := PlantRequest.Type::Arrival;
        PlantRequest."Transfer Date" := AdviceOrderLine."Receipt Date";
        PlantSetup.SetPlantCompany(PlantCompany);
        PlantRequest."From Location" := PlantSetup.GetRentalDepot;
        IF (PlantRequest."From Location" <> '') AND PlantLocation.GET(PlantRequest."From Location") THEN BEGIN
          PlantRequest."From Location Name" := PlantLocation.Description;
          PlantRequest."From Location Name 2" := PlantLocation."Description 2";
          PlantRequest."From Location Address" := PlantLocation.Address;
          PlantRequest."From Location Address 2" := PlantLocation."Address 2";
          PlantRequest."From Location Post Code" := PlantLocation."Post Code";
          PlantRequest."From Location City" := PlantLocation.City;
          PlantRequest."From Location Contact" := PlantLocation.Contact;
          PlantRequest."From Location Contact Phone No" := PlantLocation."Contact Phone No.";
          PlantRequest."From Location Phone No(Mobile)" := PlantLocation."Mobile Phone No.";
          PlantRequest."From Location E-Mail" := PlantLocation."E-Mail";
          PlantRequest.FillInLocationContactInfo(0, FALSE);
        END;
        PlantRequest."To Location" := AdviceOrderLine."Plant Location";
        IF (PlantRequest."To Location" <> '') AND PlantLocation.GET(PlantRequest."To Location") THEN BEGIN
          PlantRequest."To Location Name" := PlantLocation.Description;
          PlantRequest."To Location Name 2" := PlantLocation."Description 2";
          PlantRequest."To Location Address" := PlantLocation.Address;
          PlantRequest."To Location Address 2" := PlantLocation."Address 2";
          PlantRequest."To Location Post Code" := PlantLocation."Post Code";
          PlantRequest."To Location City" := PlantLocation.City;
          PlantRequest."To Location Contact" := PlantLocation.Contact;
          PlantRequest."To Location Contact Phone No" := PlantLocation."Contact Phone No.";
          PlantRequest."To Location Phone No(Mobile)" := PlantLocation."Mobile Phone No.";
          PlantRequest."To Location E-Mail" := PlantLocation."E-Mail";
          PlantRequest.FillInLocationContactInfo(1, FALSE);
        END;
      END;
      PlantRequest."Advice Order" := TRUE;
      IF PlantSetup."Def. Req. Status fr. Adv. Ord." = PlantSetup."Def. Req. Status fr. Adv. Ord."::Open THEN
        PlantRequest.Status := PlantRequest.Status::Open
      ELSE
        PlantRequest.Status := PlantRequest.Status::Requested;
      PlantRequest.MODIFY(FALSE);
    END;

    LOCAL PROCEDURE CreatePlantRequestLine@1100529001(AdviceOrderLine@1100529003 : Record 11012055;PlantCompany@1100529002 : Text;PlantRequest@1100529001 : Record 11020520;VAR PlantRequestLine@1100529000 : Record 11020521);
    VAR
      PlantRequestLine2@1100529004 : Record 11020521;
    BEGIN
      IF PlantCompany <> '' THEN
        PlantRequestLine2.CHANGECOMPANY(PlantCompany);
      PlantRequestLine2.SETRANGE("Plant Request No.", PlantRequest."No.");
      IF NOT PlantRequestLine2.FINDLAST THEN
        PlantRequestLine2."Line No." := 0;

      PlantRequestLine.INIT;
      PlantRequestLine."Plant Request No." := PlantRequest."No.";
      PlantRequestLine."Line No." := PlantRequestLine2."Line No." + 10000;
      PlantRequestLine.INSERT(FALSE);
      CASE TRUE OF
        AdviceOrderLine."Plant Type" <> '':
          BEGIN
            PlantRequestLine.Type := PlantRequestLine.Type::Plant;
            PlantRequestLine."Plant Type" := AdviceOrderLine."Plant Type";
          END;
        AdviceOrderLine."Item No." <> '':
          BEGIN
            PlantRequestLine.Type := PlantRequestLine.Type::Item;
            PlantRequestLine."Item No." := AdviceOrderLine."Item No.";
          END;
      ELSE
        PlantRequestLine.Type := PlantRequestLine.Type::Text;
      END;
      PlantRequestLine.Description := AdviceOrderLine.Description;
      IF PlantRequestLine.Type <> PlantRequestLine.Type::Text THEN BEGIN
        PlantRequestLine."Description 2" := AdviceOrderLine."Description 2";
        PlantRequestLine."Expected return on" := AdviceOrderLine."Expected return on";
        IF AdviceOrderLine."Record Type" = AdviceOrderLine."Record Type"::Project THEN
          PlantRequestLine.Element := AdviceOrderLine.Element;
        PlantRequestLine.Quantity :=  AdviceOrderLine."Quantity (Advice)";
      END;
      PlantRequestLine.MODIFY(FALSE);
    END;

    LOCAL PROCEDURE MessageCreatedPlantRequests@1100529002(VAR GenericTempTable@1100529000 : TEMPORARY Record 11020579;PlantRequest@1100529700 : Record 11020520;PlantRequestSMF@1100529701 : Record 11125529);
    VAR
      CreatedRequestNosTxt@1100529001 : Text;
      CreatedTxt@1100529002 : Text;
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;
      GenericTempTable.RESET;
      GenericTempTable.SETRANGE("Key Code1", 'CREATED REQUESTS');
      IF GenericTempTable.FINDFIRST THEN BEGIN
        CreatedRequestNosTxt := Text028;
        REPEAT
          IF GenericTempTable.Code1 = GenericTempTable.Code2 THEN
            CreatedTxt := GenericTempTable.Code1
          ELSE
            CreatedTxt := STRSUBSTNO('%1..%2', GenericTempTable.Code1, GenericTempTable.Code2);
          CreatedTxt := '\ - ' + CreatedTxt + ' ('+ GenericTempTable.Text1 + ')';
          IF STRLEN(CreatedTxt) + STRLEN(CreatedRequestNosTxt) <= MAXSTRLEN(CreatedRequestNosTxt) THEN
            CreatedRequestNosTxt := CreatedRequestNosTxt + CreatedTxt;
        UNTIL GenericTempTable.NEXT = 0;
        IF CONFIRM(CreatedRequestNosTxt+'\'+Text033) THEN BEGIN
          COMMIT;
          IF CreatePlantRequestSMF THEN
            PAGE.RUNMODAL(PAGE::"Plant Request (SMF)", PlantRequestSMF)
          ELSE
            PAGE.RUNMODAL(PAGE::"Plant Request", PlantRequest);
        END;
      END;
    END;

    [External]
    PROCEDURE CopyCommentLines@1100529800(BudgetLine@1100529800 : Record 11012001);
    VAR
      CommentLineFrom@1100529801 : Record 11020634;
      CommentLineTo@1100529802 : Record 11020634;
      RecRef@1100529803 : RecordRef;
      LineNo@1100529804 : Integer;
    BEGIN
      IF NOT TransferCommentLines THEN
        EXIT;

      RecRef.GETTABLE(BudgetLine);

      CommentLineFrom.SETRANGE("Table Name", CommentLineFrom."Table Name"::Budget);
      CommentLineFrom.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
      IF CommentLineFrom.FINDSET THEN BEGIN
        RecRef.GETTABLE(AdviceRec);

        CommentLineTo.RESET;
        CommentLineTo.SETRANGE("Table Name", CommentLineTo."Table Name"::"Advice Order");
        CommentLineTo.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
        IF CommentLineTo.FINDLAST THEN
          LineNo := CommentLineTo."Line No." + 10000
        ELSE
          LineNo := 10000;

        REPEAT
          CommentLineTo.INIT;
          CommentLineTo := CommentLineFrom;
          CommentLineTo."Table Name" := CommentLineTo."Table Name"::"Advice Order";
          CommentLineTo."Record ID" := RecRef.RECORDID();
          CommentLineTo."Line No." := LineNo;
          CommentLineTo.INSERT;

          LineNo += 10000;
        UNTIL CommentLineFrom.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE RunItemInventoryByCompany@1100528300(ItemNo@1100528305 : Code[20]);
    VAR
      GenericTempTable@1100528300 : TEMPORARY Record 11020579;
      Company@1100528302 : Record 2000000006;
      ItemRec@1100528301 : Record 27;
      LocationRec@1100528303 : Record 14;
      ItemLedgerEntry@1100528304 : Record 32;
    BEGIN
      ItemLedgerEntry.SETCURRENTKEY("Item No.");

      Company.FINDFIRST;
      REPEAT
        ItemLedgerEntry.CHANGECOMPANY(Company.Name);
        ItemRec.CHANGECOMPANY(Company.Name);
        LocationRec.CHANGECOMPANY(Company.Name);

        ItemLedgerEntry.SETRANGE("Item No.", ItemNo);
        IF (ItemLedgerEntry.FINDFIRST) THEN BEGIN
          REPEAT
            IF (NOT LocationRec.GET(ItemLedgerEntry."Location Code")) THEN LocationRec.INIT;
            IF (NOT ItemRec.GET(ItemLedgerEntry."Item No.")) THEN ItemRec.INIT;

            GenericTempTable.INIT;
            IF (NOT GenericTempTable.GET(ItemLedgerEntry."Item No.", Company.Name, ItemLedgerEntry."Location Code",
              '', '', ''))
            THEN BEGIN
              GenericTempTable."Key Code1" := ItemLedgerEntry."Item No.";
              GenericTempTable."Key Code2" := Company.Name;
              GenericTempTable."Key Code3" := ItemLedgerEntry."Location Code";
              GenericTempTable.INSERT;
            END;

            GenericTempTable.Text1 := ItemRec.Description;
            GenericTempTable.Text2 := Company.Name;
            GenericTempTable.Text3 := LocationRec.Name;
            GenericTempTable.Dec1 += ItemLedgerEntry.Quantity;

            GenericTempTable.MODIFY;
          UNTIL (ItemLedgerEntry.NEXT = 0);
        END;
      UNTIL (Company.NEXT = 0);

      PAGE.RUNMODAL(PAGE::"Item Inventory by Comp by Loc", GenericTempTable);
    END;

    [External]
    PROCEDURE WriteInventoryOrderLine@1100528301(AdviceOrderLine@1100528300 : Record 11012055);
    VAR
      ICInventoryLine@1100528302 : Record 11020692;
      Item@1100528301 : Record 27;
    BEGIN
      IF AdviceOrderLine."Quantity (Advice)" < 0 THEN
        AdviceOrderLine.FIELDERROR("Quantity (Advice)");

      ICInventoryLine.INIT;
      ICInventoryLine.Type := ICInventoryLine.Type::Order;
      ICInventoryLine."Supplying Company" := COMPANYNAME;
      ICInventoryLine."Receiving Company" := AdviceOrderLine."Supplying Company Inventory";
      ICInventoryLine."Line No." := 0;
      ICInventoryLine."Entry Type" := ICInventoryLine."Entry Type"::Sale;
      ICInventoryLine."Document Date" := TODAY;
      ICInventoryLine."Posting Date" := TODAY;
      IF NOT Item.GET(AdviceOrderLine."Item No.") THEN
        ERROR(Text006);
      ICInventoryLine."Item No." := AdviceOrderLine."Item No.";
      ICInventoryLine.Quantity := AdviceOrderLine."Quantity (Advice)";  //C053195
      ICInventoryLine."Unit of Measure" := Item."Base Unit of Measure";
      ICInventoryLine."Delivery Date" := AdviceOrderLine."Receipt Date";
      ICInventoryLine."Project No." := AdviceOrderLine."Project No.";
      ICInventoryLine."Service Order No." := AdviceOrderLine."Service Order No.";
      ICInventoryLine."Delivery Time" := AdviceOrderLine."Delivery Time";
      ICInventoryLine.Element := AdviceOrderLine.Element; //C018402
      ICInventoryLine."Location Code" := AdviceOrderLine."Location Code";
      //C052785.sn
      CASE AdviceOrderLine.Deliver OF
        AdviceOrderLine.Deliver::"Project Location": ICInventoryLine.Deliver := ICInventoryLine.Deliver::"Project Location";
        AdviceOrderLine.Deliver::"Service Location": ICInventoryLine.Deliver := ICInventoryLine.Deliver::"Service Location";
      END;
      //C052785.en
      ICInventoryLine."Ship To Location" := AdviceOrderLine."Ship To Location";
      ICInventoryLine."Entity No." := AdviceOrderLine."Entity No.";
      ICInventoryLine."Comments for Logistics" := AdviceOrderLine."Comments for Logistics";
      ICInventoryLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CheckAdviceBeforeProcessing@1100528901(VAR gvAdviceRec@1100528902 : Record 11012055;CollectRun@1100528901 : Boolean;ItemRun@1100528900 : Boolean);
    VAR
      ConFirmAnswered@1100528903 : Boolean;
      StrategicPurchMgt@1100528904 : Codeunit 11020211;
      LastRefNo@1100528907 : Code[20];
      UserSetup@1100525000 : Record 91;
    BEGIN
      //DP00137
      ProjSetUp.GET;
      PurchSetup.GET;

      IF GUIALLOWED THEN BEGIN
        IF NOT (gCollectiveRun AND OptionsForAdviceOrderDone) THEN BEGIN
          CLEAR(MakePurchOrder);
          IF gvAdviceRec.FINDFIRST THEN
            IF gvAdviceRec."Record Type" = gvAdviceRec."Record Type"::ServOrder THEN
              MakePurchOrder.SetActivateFromSOAdviceOrder
            ELSE
              MakePurchOrder.SetActivateFromAdviceOrder;
          IF UsePurchaserFromAdviceOrder THEN
            MakePurchOrder.SetPurchaserFromAdviceOrderVisible(TRUE, gvAdviceRec."Purchaser Code");
          MakePurchOrder.RUNMODAL;
          MakePurchOrder.GetOptionsForAdviceOrder(
            StartProcess,SelectionMethod,varPurchHeader,PrintPurchOrders,
            ProcElectronicOrderType,TransferCommentLines,varPeriodFilterTxt,LinkItemDocsToOrder,
            TransferAccountLinesToPurchaseOrder,  //C036514
            TransferExternalDocuments,AddDocumentsToDocumentRelations);
          IF gCollectiveRun THEN
            OptionsForAdviceOrderDone := TRUE;
        END;
        IF NOT StartProcess THEN
          EXIT;
      END ELSE BEGIN
        //This code is executed on NAS when a purchase order is created for an advice order line that is created on mobile
        StartProcess := TRUE;
        SelectionMethod := SelectionMethod::Vendor;
        PrintPurchOrders := FALSE;
        ProcElectronicOrderType := FALSE;
        TransferCommentLines := TRUE;
        IF UserSetup.GET(USERID) THEN
          varPurchHeader."Purchaser Code" := UserSetup.Purchaser;
        varPurchHeader."Order Date" := WORKDATE;
        varPurchHeader."Posting Date" := WORKDATE;
        varPeriodFilterTxt := '';
        LinkItemDocsToOrder := PurchSetup."Allow Link Item Docs to Purch.";
      END;
      varPurchHeader.CheckAskForNoSeries(varPurchHeader."Document Type"::Order, varNoSeries);

      IF NOT CollectRun THEN BEGIN
        AdviceRec.COPY(gvAdviceRec);
        AdviceRec.MARKEDONLY(TRUE);
        IF NOT AdviceRec.FINDFIRST THEN
          AdviceRec.MARKEDONLY(FALSE);
        AdviceRec.FILTERGROUP(8);
        IF NOT ItemRun THEN BEGIN
          IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN BEGIN
            AdviceRec.SETRANGE("Record Type", AdviceRec."Record Type"::Project);
            AdviceRec.SETRANGE("Project No.", AdviceRec."Project No.");
          END;
          IF AdviceRec."Record Type" = AdviceRec."Record Type"::ServOrder THEN BEGIN
            AdviceRec.SETRANGE("Record Type", AdviceRec."Record Type"::ServOrder);
            AdviceRec.SETFILTER("Project No.", '%1', '');
            AdviceRec.SETRANGE("Service Order No.", AdviceRec."Service Order No.");
          END;
          AdviceRec.CALCFIELDS("Logistics on Component Level");
          AdviceRec.SETRANGE("Logistics on Component Level",FALSE);
        END;
        AdviceRec.SETFILTER("Receipt Date", '<> %1', 0D);
      END;

      AdviceRec.FILTERGROUP(8);
      AdviceRec.SETRANGE(Transaction, AdviceRec.Transaction::Purchase);
      AdviceRec.SETFILTER("Quantity (Advice)", '<>0');
      AdviceRec.SETRANGE("Process Status", AdviceRec."Process Status"::Released);
      AdviceRec.SETFILTER("Source Type", '<>%1', AdviceRec."Source Type"::"Recipe Header");
      IF varPeriodFilterTxt <> '' THEN
        AdviceRec.SETFILTER("Receipt Date", varPeriodFilterTxt);

      IF NOT AdviceRec.FINDFIRST THEN
        IF (ProjSetUp."Release Advice Order Mandatory") THEN BEGIN
          IF (AdviceRec.COUNT = 0) AND GUIALLOWED THEN
            MESSAGE(Text000, AdviceRec.TABLECAPTION, AdviceRec.GETFILTERS);
          EXIT;
        END ELSE
          AdviceRec.SETFILTER("Process Status", '<%1', AdviceRec."Process Status"::Cancelled);

      IF AdviceRec.FINDSET(FALSE) THEN BEGIN
        REPEAT
          IF AdviceRec.ApprovalEntriesExist THEN
            AdviceRec.MARK(FALSE)
          ELSE
            AdviceRec.MARK(TRUE);
        UNTIL AdviceRec.NEXT = 0;
        AdviceRec.MARKEDONLY(TRUE);
      END;

      IF (NOT AdviceRec.FINDSET(FALSE)) THEN BEGIN
          IF (AdviceRec.COUNT = 0) AND GUIALLOWED THEN
            MESSAGE(Text000, AdviceRec.TABLECAPTION, AdviceRec.GETFILTERS);
          EXIT;
      END;

      REPEAT
        StrategicPurchMgt.CheckStratPurchForAdviceOrder(AdviceRec);
        StrategicPurchMgt.FindContractForAdviceOrder(AdviceRec);
        AdviceRec.TESTFIELD("Order Date");
        AdviceRec.CheckRecordType(1); //check status of project/service order
        AdviceRec.CheckDeliver;
        AdviceRec.VALIDATE("Ship To Location");
        IF (AdviceRec."Order Date" < TODAY) AND (AdviceRec."Delivery Period" <> '') THEN BEGIN
          IF NOT ConFirmAnswered THEN
            IF NOT CONFIRM(Text003, TRUE) THEN
              ERROR('');
          ConFirmAnswered := TRUE;
          AdviceRec."Order Date" := TODAY;
          AdviceRec.VALIDATE("Delivery Period");
        END;

        AdviceRec.TESTFIELD(Vendor);
        VendorRec.GET(AdviceRec.Vendor);

        AdviceRec.TESTFIELD("Cost Object");
        DimMgt.GetDimValueRec(2,AdviceRec."Cost Object",DimValRec,TRUE,'');

        IF (AdviceRec."Record Type" = AdviceRec."Record Type"::Project) AND (AdviceRec.Element = '') THEN BEGIN
          ProjRec.GET(AdviceRec."Project No.");
          IF ProjRec."Posting Element Mandatory" THEN
            AdviceRec.TESTFIELD(Element);
        END;

        FillSortAdviceOrder(AdviceRec);

        IF (AdviceRec."Purchase Route Reference" = '') THEN BEGIN
          LastRefNo := RouteRefMgtCU.GetLastRefNo();
          LastRefNo := INCSTR(LastRefNo);
          AdviceRec."Purchase Route Reference" := LastRefNo;
          RouteRefMgtCU.WriteLastRefNo(LastRefNo);
        END;
        AdviceRec."Modified by" := USERID;
        AdviceRec."Last Date Modified" := TODAY;
        AdviceRec.MODIFY(TRUE);

        TmpAdviceRec := AdviceRec;
        TmpAdviceRec.INSERT;
      UNTIL AdviceRec.NEXT = 0;

      IF (TmpAdviceRec.COUNT = 0) THEN
        MESSAGE(Text000, AdviceRec.TABLECAPTION, AdviceRec.GETFILTERS);
    END;

    LOCAL PROCEDURE FillSortAdviceOrder@1210190000(VAR AdviceRec@1100525000 : Record 11012055);
    VAR
      PurchaseLineDetail@1100528900 : Record 11020660;
    BEGIN
      //DP00137
      AdviceRec."Sort Purchase" := '';
      AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~V~' + AdviceRec.Vendor;
      AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~Y~' + AdviceRec."Currency Code";  //DP00884
      AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~D~' + AdviceRec."Order Address Code";
      //DP01402.sn
      IF AdviceRec."Quantity (Advice)" < 0 THEN
        AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~R~';
      //DP01402.en
      //DP01378.sn
      IF AdviceRec."Record Type" = AdviceRec."Record Type"::"G/L Account" THEN
        IF TransferAccountLinesToPurchaseOrder THEN
          AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~A~';
      //DP01378.en
      IF PurchSetup."Create Order by Cost Type" THEN
        AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~C~' + STRSUBSTNO('%1', AdviceRec."Cost Type");

      IF SelectionMethod = SelectionMethod::Project THEN BEGIN
        IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN
          AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~P~' + AdviceRec."Project No.";
        IF AdviceRec."Record Type" = AdviceRec."Record Type"::ServOrder THEN
          AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~S~' + AdviceRec."Service Order No.";
      END;

      IF SelectionMethod = SelectionMethod::"Project-Ship-to Location" THEN BEGIN
        IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN
          AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~P~' + AdviceRec."Project No.";
        IF AdviceRec."Record Type" = AdviceRec."Record Type"::ServOrder THEN
          AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~S~' + AdviceRec."Service Order No.";
        AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~L~' + AdviceRec."Ship To Location";
      END;

      IF SelectionMethod = SelectionMethod::"Work Order" THEN
        AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~W~' + AdviceRec."Work Order No.";

      IF SelectionMethod = SelectionMethod::"Ship-to Location" THEN BEGIN
        IF AdviceRec.Deliver = AdviceRec.Deliver::" " THEN BEGIN
          IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN
            AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~P~' + AdviceRec."Project No.";
          IF AdviceRec."Record Type" = AdviceRec."Record Type"::ServOrder THEN
            AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~S~' + AdviceRec."Service Order No.";
        END;
        IF AdviceRec.Deliver = AdviceRec.Deliver::"Project Location" THEN
          AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~P~' + AdviceRec."Project No." + '~' + AdviceRec."Ship To Location";
        IF AdviceRec.Deliver = AdviceRec.Deliver::"Service Location" THEN BEGIN
          IF AdviceRec."Ship To Location" = '' THEN
            AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~S~' + AdviceRec."Service Location No."
          ELSE
            AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~S~' + AdviceRec."Service Order No." + '~' + AdviceRec."Ship To Location";
        END;
        IF (AdviceRec.Deliver = AdviceRec.Deliver::Location) OR (AdviceRec.Deliver = AdviceRec.Deliver::"Order Address") THEN
          AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~L~' + AdviceRec."Ship To Location";
      END;

      IF ProjSetUp."Compress Adv Order by Element" THEN
        AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~E~' + AdviceRec.Element;
      IF ProjSetUp."Compress Adv Order by Variant" THEN
        AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~T~' + AdviceRec."Variant Code";

      IF (ProjSetUp."Compress Adv Order by Version") OR
         (ProjSetUp."Compress Adv Order by Color") THEN BEGIN
        IF PurchaseLineDetail.GET(PurchaseLineDetail."Line Type"::"Advice Order",
          AdviceRec."Record Type", AdviceRec."Project No.", AdviceRec."Yard No.",
          AdviceRec."System No.", AdviceRec."Entity Type", AdviceRec."Entity No.",
          AdviceRec."Service Order No.", '', AdviceRec."Line No.") THEN BEGIN
          IF ProjSetUp."Compress Adv Order by Version" THEN
            AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~N~' + PurchaseLineDetail.Version;
          IF ProjSetUp."Compress Adv Order by Color" THEN
            AdviceRec."Sort Purchase" := AdviceRec."Sort Purchase" + '~O~' + PurchaseLineDetail.Color;
        END;
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseOrders@1100528902();
    VAR
      DummyBlanketOrderLine@1100409001 : Record 39;
      UseBlanketOrder@1100409000 : Boolean;
      PrevSort@1100528903 : Text[250];
      MobileItemUsage@1100528700 : Record 11229872;
      FPSLicenseManagement@1100528701 : Codeunit 11229289;
    BEGIN
      //DP00137
      TmpAdviceRec.SETCURRENTKEY("Sort Purchase");
      IF TmpAdviceRec.FINDSET THEN BEGIN
        REPEAT
          IF (PrevSort <> TmpAdviceRec."Sort Purchase") THEN BEGIN
            PrevSort := TmpAdviceRec."Sort Purchase";
            CreatePurchaseHeader;
            InsertTmpPurchaseHeader;
          END;
          ModifyTmpPurchaseHeader;
          UseBlanketOrder := TmpAdviceRec."Contract Type" IN [
            TmpAdviceRec."Contract Type"::"General Blanket Order",
            TmpAdviceRec."Contract Type"::"Project Blanket Order",
            TmpAdviceRec."Contract Type"::"Service Blanket Order"];
          IF (NOT UseBlanketOrder) OR (TmpAdviceRec."Quantity (Advice)" <= 0) THEN  //DP01402
            CreatePurchaseLine(TmpAdviceRec."Quantity (Advice)", FALSE, DummyBlanketOrderLine)
          ELSE
            CreatePurchLinesWithBlktOrders();
          UpdateAdviceLine;
          AdviceRecordType := TmpAdviceRec."Record Type";

          IF FPSLicenseManagement.LicenseAndReadPermissionForTable(MobileItemUsage) THEN
            MobileItemUsage.ConvertFromAdviseOrderToPurchaseOrder(AdviceRec, PurchOrderLine);
        UNTIL TmpAdviceRec.NEXT = 0;
      END;

      FinalizeTmpPurchaseHeader;
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@1100528903();
    VAR
      PurchaserRec@1100528901 : Record 13;
      PurchaseHeaderExtension@1100528300 : Record 11020398;
    BEGIN
      WITH TmpAdviceRec DO BEGIN
        PurchSetup.GET;
        PurchSetup.TESTFIELD("Order Nos.");

        PurchOrderHeader.INIT;
        PurchOrderHeader."Document Type" := PurchOrderHeader."Document Type"::Order;
        PurchOrderHeader."No." := '';
        PurchOrderHeader."No. Series" := varNoSeries;
        PurchOrderHeader.GetNoForSelectedNoSeries(PurchOrderHeader);
        PurchOrderHeader.INSERT(TRUE);

        PurchOrderHeader."Order Date" := varPurchHeader."Order Date";
        PurchOrderHeader."Posting Date" := varPurchHeader."Posting Date";
        PurchOrderHeader."Purchaser Code" := '';
        //-skip default purchaser by user initialized by InitRecord on init-trigger of PurchOrderHeader
        //-if Dim1 filled for purchaser, validate vendor creates dimension due to standard Navision rules
        PurchOrderHeader.VALIDATE("Buy-from Vendor No.", Vendor);
        PurchOrderHeader.VALIDATE("Order Address Code","Order Address Code");
        PurchOrderHeader.VALIDATE("Ship-to Project", "Project No.");
        PurchOrderHeader.VALIDATE("Service Order No.", "Service Order No.");
        PurchOrderHeader.VALIDATE(Deliver, Deliver);
        PurchOrderHeader.VALIDATE("Ship-to Location", "Ship To Location");
        PurchOrderHeader."Your Reference" := varPurchHeader."Your Reference";
        IF PurchaserRec.GET(varPurchHeader."Purchaser Code") THEN
          PurchOrderHeader.VALIDATE("Purchaser Code", varPurchHeader."Purchaser Code"); //check create dim1 and fill reference (icm)
        IF "Currency Code" <> '' THEN  //DP00884
          PurchOrderHeader.VALIDATE("Currency Code", "Currency Code");  //advice orders are presorted by currency, may be deviating from vendor currency
        IF "Global Dimension 1 Code" <> '' THEN
          PurchOrderHeader.VALIDATE("Shortcut Dimension 1 Code", "Global Dimension 1 Code");
        IF FORMAT(PurchOrderHeader."Lead Time Calculation") <> '' THEN BEGIN
          CLEAR(PurchOrderHeader."Lead Time Calculation");  //skip Delivery Period by Vendor
          PurchOrderHeader."Expected Receipt Date" := 0D;   //receipt date will be reset afterwards
        END;
        PurchOrderHeader."Amounts only" := FALSE;

        //ORANGO.EE >>
        IF "Quantity (Advice)" <0 THEN
          PurchOrderHeader."Document Type" := PurchOrderHeader."Document Type"::"Return Order";
        PurchOrderHeader."Document Sent By" := "Document Sent By";
        PurchOrderHeader."Fast Order" := "Rapid Order";
        //<<

        PurchOrderHeader.MODIFY;

        PurchaseHeaderExtension."Delivery Time" := "Delivery Time";
        PurchaseHeaderExtension.UpdatePurchHeadExtension(PurchOrderHeader."Document Type",
          PurchOrderHeader."No.")
      END;
    END;

    LOCAL PROCEDURE CreatePurchLinesWithBlktOrders@1100409000();
    VAR
      BlanketOrder@1100525005 : Record 38;
      BlanketOrderLine@1100525004 : Record 39;
      RemainingQuantity@1100525003 : Decimal;
      ProcessQuantity@1100525002 : Decimal;
      DeliverableQuan@1100525006 : Decimal;
    BEGIN
      WITH TmpAdviceRec DO BEGIN
        //create purchase order line on base of blanket order line (if exists)
        RemainingQuantity := "Quantity (Advice)";
        BlanketOrder.SETRANGE("Document Type", BlanketOrderLine."Document Type"::"Blanket Order");
        BlanketOrder.SETRANGE("Buy-from Vendor No.", Vendor);
        BlanketOrder.SETFILTER(Status,'<>%1',BlanketOrder.Status::Closed);
        IF BlanketOrder.FINDSET THEN
          REPEAT
            IF RemainingQuantity > 0 THEN BEGIN
              BlanketOrderLine.SETRANGE("Document Type",BlanketOrder."Document Type");
              BlanketOrderLine.SETRANGE("Document No.",BlanketOrder."No.");
              IF "Item No." <> '' THEN
                BlanketOrderLine.SETRANGE("Item No.", "Item No.");
              IF "Trade Item" <> '' THEN
                BlanketOrderLine.SETRANGE("Trade Item","Trade Item");
              IF BlanketOrder."Consumption per Location" THEN
                BlanketOrderLine.SETRANGE("Location Code","Location Code");
              IF "Contract Type" = "Contract Type"::"Project Blanket Order" THEN
                BlanketOrderLine.SETRANGE("Job No.","Project No.");
              IF "Contract Type" = "Contract Type"::"Service Blanket Order" THEN
                BlanketOrderLine.SETRANGE("Service Contract No.","Service Contract No.");
              IF BlanketOrderLine.FINDSET THEN
                REPEAT
                  DeliverableQuan := BlanketOrderLine.GetQuanToBeDelivered;
                  IF RemainingQuantity > 0 THEN BEGIN
                    IF RemainingQuantity >= DeliverableQuan THEN
                      ProcessQuantity := DeliverableQuan
                    ELSE
                      ProcessQuantity := RemainingQuantity;
                    IF ProcessQuantity > 0 THEN BEGIN
                      CreatePurchaseLine(ProcessQuantity, TRUE, BlanketOrderLine);
                      RemainingQuantity -= ProcessQuantity;
                    END;
                  END;
                UNTIL BlanketOrderLine.NEXT = 0;
            END;
          UNTIL BlanketOrder.NEXT = 0;

        //create order for remaing amount
        IF RemainingQuantity > 0 THEN BEGIN
          CLEAR(BlanketOrderLine);
          CreatePurchaseLine(RemainingQuantity, FALSE, BlanketOrderLine);
        END;

      END;
    END;

    LOCAL PROCEDURE CreatePurchaseLine@1100528904(PurchLineQty@1100409001 : Decimal;UseBlanketOrder@1100409002 : Boolean;BlanketOrderLine@1100409003 : Record 39);
    VAR
      LastLine@1100528900 : Integer;
      PurchQuoteLine@1100528901 : Record 39;
      MakeOrderMgt@1100528902 : Codeunit 333;
      CalendarMgt@1100528903 : Codeunit 7600;
      TransferExtendedText@1100409000 : Codeunit 378;
      CalChange@1100528904 : Record 11072016;
      PurchaseLineExtension@1100528905 : Record 11020644;
      UnitFactor@1100528907 : Decimal;
      BaseUnit@1100528906 : Code[20];
      CurrencyCode@1100528400 : Code[20];
      CalendarMgmt@1100528803 : Codeunit 7600;
      CompInfoRec@1100528802 : Record 79;
      DocumentRelation@1100528402 : Record 11012407;
      NonWorkDate@1100528801 : Boolean;
      dummyDesc@1100528800 : Text[30];
      VendorPrice@1100528401 : Decimal;
      ItemTranslation@1100528500 : Record 30;
      CheckTranslation@1100528501 : Boolean;
    BEGIN
      //DP00137
      WITH TmpAdviceRec DO BEGIN
        PurchOrderLine.RESET;
        PurchOrderLine.SETRANGE(PurchOrderLine."Document Type",PurchOrderHeader."Document Type");
        PurchOrderLine.SETRANGE(PurchOrderLine."Document No.",PurchOrderHeader."No.");
        IF PurchOrderLine.FINDLAST THEN
          LastLine := PurchOrderLine."Line No.";

        PurchOrderLine.INIT;
        PurchOrderLine.BlockDynamicTracking(TRUE);
        PurchOrderLine.SetCreateFromReqLine;
        PurchOrderLine.SuspendUpdateAmounts(TRUE);
        PurchOrderLine."Document Type" := PurchOrderHeader."Document Type";
        PurchOrderLine."Document No." := PurchOrderHeader."No.";
        PurchOrderLine."Line No." := LastLine + 10000;
        PurchOrderLine."Buy-from Vendor No." := Vendor;
        PurchOrderLine."Input by" := USERID;
        PurchOrderLine."Input Date" := TODAY;
        PurchOrderLine.INSERT;

        IF UseBlanketOrder THEN BEGIN
          PurchOrderLine."Blanket Order No." := BlanketOrderLine."Document No.";
          PurchOrderLine."Blanket Order Line No." := BlanketOrderLine."Line No.";
        END;
        UnitFactor := 1;
        IF "Trade Item" <> '' THEN BEGIN
          TradeItemRec.GET("Vendor (Trade Item)", "Trade Item");
          IF "Unit of Measure" = UPPERCASE(TradeItemRec."Packaging Unit") THEN BEGIN
            UnitFactor := TradeItemRec."Qty. per Unit of Measure";
            BaseUnit := TradeItemRec."Application Unit";
          END;
        END ELSE BEGIN
          IF "Item No." <> '' THEN BEGIN
            ItemRec.GET("Item No.");
            ItemUnitRec.GET("Item No.", "Unit of Measure");
            UnitFactor := ItemUnitRec."Qty. per Unit of Measure";
            BaseUnit := ItemRec."Base Unit of Measure";
          END;
        END;
        IF (UnitFactor <> 0) AND (UnitFactor <> 1) THEN BEGIN
          PurchLineQty := PurchLineQty * UnitFactor;
          VALIDATE("Unit of Measure", BaseUnit);
          VALIDATE("Price (LCY)", "Price (LCY)" / UnitFactor);
        END;
        IF (PurchLineQty > 0) AND ("Price (LCY)" < 0) THEN BEGIN
          PurchLineQty := -PurchLineQty;
          "Price (LCY)" := -"Price (LCY)";
        END;

        //next validate of unit and quantity copied from old procedure (codeunit 333); execute before validate item
        PurchOrderLine.Type := PurchOrderLine.Type::"G/L Account";
        //C004556.sn (dirty solution copied from codeunit 333: required for check at validate quantity)
        PurchOrderLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
        PurchOrderLine."Trade Item" := "Trade Item";
        //C004556.en
        PurchOrderLine.VALIDATE("Unit of Measure Code", "Unit of Measure");
        PurchOrderLine.VALIDATE(Quantity, PurchLineQty);
        PurchOrderLine."Sales Price" := "Sales Price (LCY)";

        TESTFIELD("Cost Object");
        IF "Cost Object" <> '' THEN BEGIN
          DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE,'');
          PurchOrderLine."Cost Type" := DimValRec."Cost Type" + 1;  //required for job/serv.order to determine GL-account
        END;
        //DP01378.sn
        IF "G/L Account" <> '' THEN BEGIN
          PurchOrderLine.Type := PurchOrderLine.Type::"G/L Account";
          PurchOrderLine.VALIDATE("No.", "G/L Account");
        END;
        //DP01378.en
        IF "Project No." <> '' THEN BEGIN
          PurchOrderLine.VALIDATE("Job No.", "Project No.");
          PurchOrderLine.VALIDATE(Element, Element);
          PurchOrderLine."Extension Contract" := "Extension Contract";
          PurchOrderLine."Tender Paragraph" := "Tender Paragraph";
          PurchOrderLine."Tender Paragraph Part" := "Tender Paragraph Part";
        END;
        IF "Service Order No." <> '' THEN
          PurchOrderLine.VALIDATE("Service Order No.", "Service Order No.");

        IF "Cost Object" <> '' THEN BEGIN  //disturbed by validate (CreateDim)
          DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE,'');
          PurchOrderLine."Cost Type" := DimValRec."Cost Type" + 1;  //C015938
          PurchOrderLine."Shortcut Dimension 2 Code" := "Cost Object";
        END;

        IF "Trade Item" <> '' THEN BEGIN
          PurchOrderLine.Manufacturer := Manufacturer;
          PurchOrderLine."Basic Item" := "Basic Item";
          PurchOrderLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
          PurchOrderLine."Trade Item" := '';
          PurchOrderLine.VALIDATE("Trade Item", "Trade Item");
          IF ItemRec.GET("Item No.") THEN
            PurchOrderLine."Item No." := "Item No.";
        END ELSE BEGIN
          IF "Basic Item" <> '' THEN BEGIN
            PurchOrderLine.Manufacturer := Manufacturer;
            PurchOrderLine."Basic Item" := '';
            PurchOrderLine.VALIDATE("Basic Item", "Basic Item");
          END ELSE BEGIN
            IF "Item No." <> '' THEN BEGIN
              PurchOrderLine."Item No." := '';
              PurchOrderLine.VALIDATE("Item No." , "Item No.");
            END ELSE BEGIN
              "Price Agreement" := TRUE;
            END;
          END;
        END;
        PurchOrderLine."Price Agreement" := "Price Agreement";
        PurchOrderLine."Subcontracting Activity" := "Subcontracting Activity";
        PurchOrderLine."Purchase Route Reference" := "Purchase Route Reference";
        IF RouteRefMgtCU.CheckReferenceHasSelectedQuote("Purchase Route Reference", PurchQuoteLine) THEN BEGIN
          PurchOrderLine."Price Agreement" := TRUE;
          "Price (LCY)" := PurchQuoteLine."Direct Unit Cost";
        END;

        //due to validate of item, project several settings can be reset: dim2 evaluates account (and price)
        PurchOrderLine."Additional Cost (Service)" := "Additional Cost (Service)";
        PurchOrderLine.VALIDATE("Shortcut Dimension 1 Code", "Global Dimension 1 Code");
        PurchOrderLine.VALIDATE("Shortcut Dimension 2 Code", "Cost Object");
        PurchOrderLine."Shortcut Dimension 2 Code" := "Cost Object";
        PurchOrderLine.ValidateShortcutDimCode(2, PurchOrderLine."Shortcut Dimension 2 Code");
        IF PurchOrderLine."Price Agreement" THEN BEGIN
          //evaluate price agreement (from quote or manual) reset by validate item-data
          IF "Currency Code" <> '' THEN BEGIN  //DP00884
            //Currency Code already filled by validate Cost Object (default set on Purchase Header by presorted advice orders)
            VendorPrice :=  "Price (FCY)" *  PurchOrderLine."Qty. per Unit of Measure";
          END ELSE BEGIN
            "Price (LCY)" :=  "Price (LCY)" *  PurchOrderLine."Qty. per Unit of Measure";
            VendorPrice := GetVendorPrice(Vendor, "Price (LCY)", CurrencyCode);
          END;
          IF PurchOrderHeader."Prices Including VAT" THEN
            PurchOrderLine.VALIDATE("Direct Unit Cost", VendorPrice * (1 + PurchOrderLine."VAT %" / 100))
          ELSE
            PurchOrderLine.VALIDATE("Direct Unit Cost", VendorPrice);
          PurchOrderLine."Discount % (Item)" := "Discount %";
          IF (1 - "Discount %" / 100) <> 0 THEN
            PurchOrderLine."Unit Price (LCY)" := PurchOrderLine."Unit Cost (LCY)" / (1 - "Discount %" / 100);
          IF PurchOrderLine."Unit Price (LCY)" = 0 THEN
            PurchOrderLine."Unit Price (LCY)" := PurchOrderLine."Unit Cost (LCY)";
        END;
        IF UseBlanketOrder THEN BEGIN
          PurchOrderLine.VALIDATE("Direct Unit Cost",BlanketOrderLine."Direct Unit Cost");
          IF BlanketOrderLine."Unit Cost (LCY)" <> 0 THEN
            PurchOrderLine.VALIDATE("Unit Cost (LCY)",BlanketOrderLine."Unit Cost (LCY)");
          IF BlanketOrderLine."Unit Price (LCY)" <> 0 THEN
            PurchOrderLine.VALIDATE("Unit Price (LCY)",BlanketOrderLine."Unit Price (LCY)");
        END;
        IF ("Item No." + "Basic Item" + "Trade Item" = '') THEN
          PurchOrderLine."Unit of Measure Code" := "Unit of Measure";  //(disturbed by validate Cost Object)
        PurchOrderLine."Cost Component" := "Cost Component";
        PurchOrderLine.Description := Description;
        PurchOrderLine."Description 2" := "Description 2";
        //C044283.sn
        IF ("Item No." <> '') THEN BEGIN
          CheckTranslation := TRUE;
          IF ("Trade Item" <> '') THEN BEGIN
            InvtSetup.GET;
            IF InvtSetup."Item Info Trade Item Leading" = TRUE THEN
              CheckTranslation := FALSE;
          END;
          IF CheckTranslation THEN BEGIN
            VendorRec.GET(Vendor);
            IF VendorRec."Language Code" <> '' THEN  BEGIN
               IF ItemTranslation.GET("Item No.","Variant Code",VendorRec."Language Code") THEN BEGIN
                 PurchOrderLine.Description := ItemTranslation.Description;
                 PurchOrderLine."Description 2" := ItemTranslation."Description 2";
               END;
            END;
          END;
        END;
        //C044283.en
        PurchOrderLine."Variant Code" := "Variant Code";
        PurchOrderLine."Posting Date" := PurchOrderHeader."Posting Date";
        PurchOrderLine."Order Date" := PurchOrderHeader."Order Date";
        IF "Receipt Date" <> 0D THEN BEGIN
          PurchOrderLine.VALIDATE("Expected Receipt Date", "Receipt Date");
          PurchOrderLine."Requested Receipt Date" := "Receipt Date";
        END;
        MakeOrderMgt.GetDeliveryPeriod(
          PurchOrderLine."Order Date", PurchOrderLine."Expected Receipt Date", PurchOrderLine."Lead Time Calculation");

        IF PurchOrderLine."Expected Receipt Date" <> 0D THEN
          PurchOrderLine."Planned Receipt Date" :=
            CalendarMgt.CalcDateBOC2(PurchOrderLine.InternalLeadTimeDays(PurchOrderLine."Expected Receipt Date"),
              PurchOrderLine."Expected Receipt Date",
              CalChange."Source Type"::Location,PurchOrderLine."Location Code",'',
              CalChange."Source Type"::Vendor,PurchOrderLine."Buy-from Vendor No.",'',TRUE)
        ELSE
          PurchOrderLine."Planned Receipt Date" :=  PurchOrderLine."Expected Receipt Date";

        IF "Requested Receipt Date" <> 0D THEN
          PurchOrderLine.VALIDATE("Requested Receipt Date", "Requested Receipt Date");

        PurchSetup.GET;
        CompInfoRec.GET;
        IF PurchSetup."Allow Nonworking Receipt Date" THEN BEGIN
          NonWorkDate := CalendarMgmt.CheckDateStatus(CompInfoRec."Base Calendar Code", "Receipt Date", dummyDesc);
          IF NonWorkDate THEN BEGIN
            PurchOrderLine."Requested Receipt Date" := "Receipt Date";
            PurchOrderLine."Expected Receipt Date" := "Receipt Date";
            PurchOrderLine."Planned Receipt Date" := "Receipt Date";
            EVALUATE(PurchOrderLine."Lead Time Calculation", "Delivery Period");
          END;
        END;

        PurchOrderLine."Contract Type" := "Contract Type";
        PurchOrderLine."Scheme Code" := "Scheme Code";
        PurchOrderLine."Plot No." := "Plot No.";
        PurchOrderLine."Comments for Logistics" := "Comments for Logistics";
        PurchOrderLine."Bin Code" := "Bin Code";  //disturbed by validate project
        PurchOrderLine."Purchase Action" := "Purchase Action";
        PurchOrderLine."Purchase Phase" := "Purchase Phase";
        PurchOrderLine.VALIDATE(Text, "External Text");

        PurchOrderLine.SuspendUpdateAmounts(FALSE);
        PurchOrderLine.UpdateAmounts;

        PurchOrderLine."Entity Type" := "Entity Type";
        PurchaseLineExtension."Yard No." := "Yard No.";
        PurchaseLineExtension."System No." := "System No.";
        PurchaseLineExtension."Entity No." := "Entity No.";
        PurchaseLineExtension."Cable Transit Pos." := "Cable Transit Pos.";
        PurchaseLineExtension."Source Advice Order" := TRUE;
        PurchaseLineExtension."Work Order No." := "Work Order No.";
        PurchaseLineExtension.UpdatePurchLineExtension(
          PurchOrderLine."Document Type", PurchOrderLine."Document No.", PurchOrderLine."Line No.");
        PurchOrderLine.VALIDATE("Item Category Code", "Item Category Code");
        PurchOrderLine."FSC Type Code" := "FSC Type Code";
        TmpAdviceRec.CALCFIELDS("Shelf No. (Item)");
        PurchOrderLine."Shelf No." := "Shelf No. (Item)";

        PurchOrderLine."Modified by" := USERID;
        PurchOrderLine."Last Date Modified" := TODAY;
        PurchOrderLine.MODIFY;

        IF TransferExternalDocuments THEN
          CopyDocLinksAdvicePurchOrder;
        IF AddDocumentsToDocumentRelations THEN
          DocumentRelation.AddAllLinkedDocumentProperties(
            DocumentRelation."Document Type"::"Purchase Order", PurchOrderLine."Document No.");
        CopyCommLinesAdvicePurchOrder;
        CopyDetailsAdvicePurchOrder;

        PurchOrderLine.CreatePurchOrderControl(FALSE);

        IF TransferExtendedText.PurchCheckIfAnyExtText(PurchOrderLine, FALSE) THEN
          TransferExtendedText.InsertPurchExtText(PurchOrderLine);
      END;
    END;

    [External]
    PROCEDURE InsertTmpPurchaseHeader@1100528911();
    BEGIN
      //DP00137
      TmpPurchHeader.COPY(PurchOrderHeader);
      TmpPurchHeader."Job No." := TmpAdviceRec."Project No.";
      TmpPurchHeader."Service Order No." := TmpAdviceRec."Service Order No.";
      TmpPurchHeader."Expected Receipt Date" := TmpAdviceRec."Receipt Date";
      TmpPurchHeader."Requested Receipt Date":= TmpAdviceRec."Requested Receipt Date";
      IF TmpAdviceRec."Quantity (Advice)" < 0 THEN
        TmpPurchHeader."Purchase Order Type" := TmpPurchHeader."Purchase Order Type"::"Return Order";  //DP01402
      TmpPurchHeader.INSERT;
    END;

    [External]
    PROCEDURE ModifyTmpPurchaseHeader@1100528912();
    VAR
      PurchaseHeaderExtension@1100528300 : Record 11020398;
    BEGIN
      //DP00137
      IF TmpAdviceRec."Project No." <> TmpPurchHeader."Job No." THEN
        TmpPurchHeader."Job No." := '';
      IF TmpAdviceRec."Service Order No." <> TmpPurchHeader."Service Order No." THEN
        TmpPurchHeader."Service Order No." := '';
      IF TmpAdviceRec."Receipt Date" < TmpPurchHeader."Expected Receipt Date" THEN
        TmpPurchHeader."Expected Receipt Date" := TmpAdviceRec."Receipt Date";
      IF TmpAdviceRec."Quantity (Advice)" < 0 THEN
        TmpPurchHeader."Purchase Order Type" := TmpPurchHeader."Purchase Order Type"::"Return Order";  //DP01402
      TmpPurchHeader.MODIFY;

      PurchaseHeaderExtension.GetPurchHeadExtension(PurchOrderHeader."Document Type", PurchOrderHeader."No.");
      IF (PurchaseHeaderExtension."Delivery Time" > TmpAdviceRec."Delivery Time") THEN BEGIN
        PurchaseHeaderExtension."Delivery Time" := TmpAdviceRec."Delivery Time";
        PurchaseHeaderExtension.UpdatePurchHeadExtension(PurchOrderHeader."Document Type", PurchOrderHeader."No.");
      END;
    END;

    [External]
    PROCEDURE FinalizeTmpPurchaseHeader@1100528905();
    VAR
      ProjRec@1100528900 : Record 11072003;
      ErrorRec@1100528902 : Record 11012051;
      PurchOrderHeader2@1100528903 : Record 38;
      PurchLine2@1100528000 : Record 39;
      CarryOutAction@1100528901 : Codeunit 99000813;
      Text000@1100528904 : TextConst 'ENU=The orders (%1) have been created.;NOR=Ordre (%1) er opprettet.;SVE=Order (%1) har skapats.';
      DocumentPrint@1100528400 : Codeunit 229;
      ChangeStatus@1100528402 : 'None,Released,Closed';
      DirectPostOrder@1100528401 : 'According to Vendor,Not';
      FirstOrder@1100528906 : Code[20];
      LastOrder@1100528905 : Code[20];
      Text001@1100528500 : TextConst 'ENU=The order (%1) has been created. Do you want to open the order?';
    BEGIN
      //DP00137
      IF TmpPurchHeader.FINDSET THEN BEGIN
        REPEAT
          IF FirstOrder = '' THEN
            FirstOrder := TmpPurchHeader."No.";
          LastOrder := TmpPurchHeader."No.";

          PurchOrderHeader.GET(TmpPurchHeader."Document Type",TmpPurchHeader."No.");
          PurchOrderHeader."Purchase Order Type" := TmpPurchHeader."Purchase Order Type";  //DP01402
          PurchOrderHeader."Expected Receipt Date" := TmpPurchHeader."Expected Receipt Date";
          IF TmpPurchHeader."Requested Receipt Date" <> 0D THEN
            PurchOrderHeader."Requested Receipt Date" := TmpPurchHeader."Requested Receipt Date"
          ELSE
            PurchOrderHeader."Requested Receipt Date" := TmpPurchHeader."Expected Receipt Date";
          PurchOrderHeader.SetHideValidationDialog(TRUE);
          IF PurchOrderHeader."Job No." = '' THEN
            IF TmpPurchHeader."Job No." <> '' THEN BEGIN
              PurchOrderHeader.VALIDATE("Job No.", TmpPurchHeader."Job No.");
              IF ProjRec.GET(TmpPurchHeader."Job No.") THEN
                PurchOrderHeader.Expediter := ProjRec.Expediter;
            END;

          PurchOrderHeader."Service Order No." := TmpPurchHeader."Service Order No.";
          PurchOrderHeader.SetHideValidationDialog(FALSE);
          PurchOrderHeader.MODIFY;

          PurchOrderHeader.CalcInvDiscForHeader;
          PurchOrderHeader.DetermineRemovalContribution;
          IF LinkItemDocsToOrder THEN
            PurchLine2.LinkItemDocumentsToPurchHead(PurchOrderHeader, PurchLine2, TRUE);
        UNTIL TmpPurchHeader.NEXT = 0;
      END;

      COMMIT;  //db, 19-09-19 (repair badfix DP02231)
      IF (FirstOrder <> '') AND (NOT gCollectiveRun) THEN BEGIN
        IF FirstOrder <> LastOrder THEN
          MESSAGE(Text000, FirstOrder + '..' + LastOrder)
        ELSE
          IF GUIALLOWED AND (NOT PrintPurchOrders) AND (NOT ProcElectronicOrderType) AND (AdviceRecordType <> AdviceRecordType::"G/L Account") THEN BEGIN
            IF CONFIRM(Text001,TRUE,FirstOrder) THEN
              PAGE.RUN(PAGE::"Purchase Order", PurchOrderHeader);  //db, 19-09-19 (repair badfix DP02231)
          END ELSE
            MESSAGE(Text000, FirstOrder);
      END;

      IF TmpPurchHeader.FINDSET THEN BEGIN
        REPEAT
          PurchOrderHeader.GET(TmpPurchHeader."Document Type",TmpPurchHeader."No.");
          IF PurchOrderHeader."Buy-from Vendor No." <> '' THEN BEGIN
            VendorRec.GET(PurchOrderHeader."Buy-from Vendor No.");
            IF PrintPurchOrders THEN BEGIN
              CarryOutAction.SetPrintOrder(PrintPurchOrders);
              CarryOutAction.PrintPurchaseOrder(PurchOrderHeader);
            END;
            IF (ProcElectronicOrderType) THEN BEGIN
              IF (NOT PrintPurchOrders) AND
                 (VendorRec."Electronic Order Type" = VendorRec."Electronic Order Type"::Standard)
              THEN BEGIN
                CarryOutAction.SetPrintOrder(TRUE);
                CarryOutAction.PrintPurchaseOrder(PurchOrderHeader);
              END;
              IF (VendorRec."Electronic Order Type" = VendorRec."Electronic Order Type"::"ICM/ICF") AND
                 (VendorRec."ICM Login Code" <> '')
              THEN BEGIN
                PurchOrderHeader2.RESET;
                PurchOrderHeader2 := PurchOrderHeader;
                PurchOrderHeader2.SETRECFILTER;
                REPORT.RUNMODAL(REPORT::"Create ICM Files",FALSE,FALSE,PurchOrderHeader2);
              END;
              IF VendorRec.PurchaseOrdersAreSentByEMail AND
                 (PurchOrderHeader.GetEMailOrder <> '')
              THEN BEGIN
                PurchOrderHeader2.RESET;
                PurchOrderHeader2 := PurchOrderHeader;
                PurchOrderHeader2.SETRECFILTER;
                DocumentPrint.EmailPurchHeader(
                  PurchOrderHeader2, FALSE, ChangeStatus::None,
                  DirectPostOrder::"According to Vendor", FALSE, TRUE);
              END;
              IF ((VendorRec."Electronic Order Type" = VendorRec."Electronic Order Type"::"GS1 (SOAP)") OR
                  (VendorRec."Electronic Order Type" = VendorRec."Electronic Order Type"::"GS1 (XML-RPC)")) AND
                 (VendorRec.GLN <> '') AND
                 (VendorRec."URL GS1 Purchase Order" <> '')
              THEN BEGIN
                PurchOrderHeader2.RESET;
                PurchOrderHeader2 := PurchOrderHeader;
                PurchOrderHeader2.SETRECFILTER;
                REPORT.RUNMODAL(REPORT::"Send Purchase Order GS1", FALSE, FALSE, PurchOrderHeader2);
              END;
            END;
          END;
        UNTIL TmpPurchHeader.NEXT = 0;

        ErrorRec.SETRANGE("User ID", USERID);
        ErrorRec.SETRANGE("Source Type", ErrorRec."Source Type"::"ICM Export");
        IF ErrorRec.FIND('-') THEN BEGIN
          COMMIT;
          PAGE.RUNMODAL(PAGE::Errors, ErrorRec);
        END;
      END;
    END;

    [External]
    PROCEDURE UpdateAdviceLine@1100528906();
    BEGIN
      //DP00137
      AdviceRec.GET(TmpAdviceRec."Record Type",
        TmpAdviceRec."Project No.", TmpAdviceRec."Service Order No.",
        TmpAdviceRec."G/L Account", TmpAdviceRec."Line No.");  //DP01378
      AdviceRec.GetStatusOnProcess(TRUE);
      AdviceRec.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CopyDocLinksAdvicePurchOrder@1100528910();
    VAR
      DocumentLinkMgt@1100528403 : Codeunit 11012401;
      AdviceOrderLineRecRef@1100528404 : RecordRef;
      PurchaseOrderHeaderRecRef@1100528405 : RecordRef;
    BEGIN
      //DP00137
      AdviceOrderLineRecRef.GETTABLE(TmpAdviceRec);
      PurchaseOrderHeaderRecRef.GETTABLE(PurchOrderHeader);
      DocumentLinkMgt.CopyDocLinks(AdviceOrderLineRecRef, PurchaseOrderHeaderRecRef);
    END;

    [External]
    PROCEDURE CopyCommLinesAdvicePurchOrder@1100528909();
    VAR
      CommentLineFrom@1100529803 : Record 11020634;
      PurchCommentLine@1100529804 : Record 43;
      RecRef@1100529806 : RecordRef;
      LineNo@1100529805 : Integer;
    BEGIN
      //DP00137
      IF NOT TransferCommentLines THEN
        EXIT;

      RecRef.GETTABLE(TmpAdviceRec);

      CommentLineFrom.RESET;
      CommentLineFrom.SETRANGE("Table Name", CommentLineFrom."Table Name"::"Advice Order");
      CommentLineFrom.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
      IF CommentLineFrom.FINDSET THEN BEGIN
        PurchCommentLine.RESET;
        PurchCommentLine.SETRANGE("Document Type", PurchOrderLine."Document Type");
        PurchCommentLine.SETRANGE("No.", PurchOrderLine."Document No.");
        PurchCommentLine.SETRANGE("Document Line No.", PurchOrderLine."Line No.");
        IF PurchCommentLine.FINDLAST THEN
          LineNo := PurchCommentLine."Line No." + 10000
        ELSE
          LineNo := 10000;

        REPEAT
          PurchCommentLine.INIT;
          PurchCommentLine."Document Type" := PurchOrderLine."Document Type";
          PurchCommentLine."No." := PurchOrderLine."Document No.";
          PurchCommentLine."Document Line No." := PurchOrderLine."Line No.";
          PurchCommentLine."Line No." := LineNo;
          PurchCommentLine.Date := CommentLineFrom.Date;
          PurchCommentLine.Code := CommentLineFrom.Code;
          PurchCommentLine.Comment := CommentLineFrom.Comment;
          PurchCommentLine."Line Break" := CommentLineFrom."Line Break";
          PurchCommentLine."Created by" := CommentLineFrom."Created by";
          PurchCommentLine.INSERT(TRUE);

          LineNo += 10000
        UNTIL CommentLineFrom.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyDetailsAdvicePurchOrder@1100528908();
    VAR
      PurchaseLineDetail@1210190004 : Record 11020660;
    BEGIN
      //DP00137
      PurchaseLineDetail.CopyLine(PurchaseLineDetail."Line Type"::"Advice Order",
        TmpAdviceRec."Record Type", TmpAdviceRec."Project No.", TmpAdviceRec."Yard No.", TmpAdviceRec."System No.",
        TmpAdviceRec."Entity Type", TmpAdviceRec."Entity No.",
        TmpAdviceRec."Service Order No.", '', TmpAdviceRec."Line No.",
        PurchaseLineDetail."Line Type"::"Purchase Order", PurchOrderLine."Document No.", PurchOrderLine."Line No.",
        FALSE);
    END;

    [External]
    PROCEDURE ItemLine@1100409002(NavItem@1100409000 : Code[20];BasicItem@1100409001 : Code[20];TradeItem@1100409002 : Code[20]) : Boolean;
    BEGIN
      EXIT((NavItem <> '') OR (BasicItem <> '') OR (TradeItem <> ''));
    END;

    [External]
    PROCEDURE SelectBaseRecipe@1100525004(VAR AdviceRec@1100525000 : Record 11012055);
    VAR
      RecipeFrm@1100525001 : Page 11125073;
      BaseRecipe@1100525003 : Record 11020581;
      UserSetup@1100525002 : Record 91;
    BEGIN
      //DP00381
      WITH AdviceRec DO BEGIN
        CLEAR(RecipeFrm);
        RecipeFrm.SetSelection(DATABASE::"Advice Order Line",
          "Project No.","Service Order No.",Element,"Extension Contract",'','','','','',TRUE,"Line No.");  //C027336
        IF UserSetup.GET(USERID) AND (UserSetup."Recipe Group" <> '') THEN BEGIN
          BaseRecipe.SETRANGE("Recipe Group",UserSetup."Recipe Group");
          RecipeFrm.SETTABLEVIEW(BaseRecipe);
        END;
        RecipeFrm.RUNMODAL;
      END;
    END;

    [External]
    PROCEDURE ModifyRun@1100525006(VAR AdviceRec@1100525010 : Record 11012055);
    VAR
      NewValuesAdviceRec@1100525009 : Record 11012055;
      Employee@1100525011 : Record 5200;
      Location@1100525012 : Record 14;
      ResourceWOP@1100525005 : Record 11229278;
      ImexFrm@11012000 : Page 11130219;
      ImexRec@1100528900 : Record 11012056;
      EditDeliver@1100525003 : Boolean;
      EditEmplLocation@1100525002 : Boolean;
      EditTransaction@1100525004 : Boolean;
      EditOrderDate@1100525001 : Boolean;
      EditReceiptDate@1100525000 : Boolean;
      IDeliver@1100409001 : ' ,Location,Project Location,Service Location,Order Address,Location Employee';
    BEGIN
      CLEAR(ImexFrm);
      ImexFrm.RUNMODAL;

      EditDeliver := FALSE;
      EditTransaction := FALSE;
      EditOrderDate := FALSE;
      EditReceiptDate := FALSE;
      EditEmplLocation := FALSE;

      ImexRec.SETRANGE("User ID", USERID);
      ImexRec.SETFILTER("Process ID", 'P11130219*');
      ImexRec.SETRANGE(Type, ImexRec.Type::Export);
      IF ImexRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF ImexRec.Description = 'Transaction' THEN BEGIN
            EditTransaction := TRUE;
            EVALUATE(NewValuesAdviceRec.Transaction, ImexRec.Condition);
          END;
          IF  ImexRec.Description = 'From Location' THEN BEGIN
            IF NewValuesAdviceRec.Transaction = NewValuesAdviceRec.Transaction::Inventory THEN BEGIN
              EVALUATE(NewValuesAdviceRec."Location Code", ImexRec.Condition);
            END;
          END;

          IF ImexRec.Description = 'Deliver' THEN BEGIN
            EVALUATE(IDeliver, ImexRec.Condition);
            IF IDeliver = IDeliver::"Location Employee" THEN BEGIN
              EditEmplLocation := TRUE;
            END ELSE BEGIN
              EditDeliver := TRUE;
              EVALUATE(NewValuesAdviceRec.Deliver, ImexRec.Condition);
            END;
          END;

          IF ImexRec.Description = 'To Location' THEN BEGIN
            IF NewValuesAdviceRec.Deliver = NewValuesAdviceRec.Deliver::Location THEN BEGIN
              EVALUATE(NewValuesAdviceRec."Ship To Location", ImexRec.Condition);
            END;
          END;

          IF ImexRec.Description = 'Bin Code' THEN BEGIN
            EVALUATE(NewValuesAdviceRec."Bin Code", ImexRec.Condition);
          END;

          IF ImexRec.Description = 'Order Date' THEN BEGIN
            EditOrderDate := TRUE;
            EVALUATE(NewValuesAdviceRec."Order Date", ImexRec.Condition);
          END;

          IF ImexRec.Description = 'Receipt Date' THEN BEGIN
            EditReceiptDate := TRUE;
            EVALUATE(NewValuesAdviceRec."Receipt Date", ImexRec.Condition);

          END;
          ImexRec.DELETE;
        UNTIL ImexRec.NEXT = 0;
      END ELSE
        EXIT;

      IF NOT (EditDeliver OR EditTransaction OR EditOrderDate OR EditReceiptDate OR EditEmplLocation) THEN
        EXIT;

      IF AdviceRec.FINDSET(TRUE, FALSE) THEN
        REPEAT

          IF EditTransaction THEN BEGIN
            AdviceRec.VALIDATE(Transaction, NewValuesAdviceRec.Transaction);
            IF (NewValuesAdviceRec.Transaction = NewValuesAdviceRec.Transaction::Inventory) AND
              (NewValuesAdviceRec."Location Code" <> '')THEN
              AdviceRec.VALIDATE("Location Code", NewValuesAdviceRec."Location Code");
          END;
          IF EditDeliver THEN BEGIN
            AdviceRec.VALIDATE(Deliver, NewValuesAdviceRec.Deliver);
            IF (NewValuesAdviceRec.Deliver = NewValuesAdviceRec.Deliver::Location) AND
              (NewValuesAdviceRec."Ship To Location" <> '')THEN
              AdviceRec.VALIDATE("Ship To Location", NewValuesAdviceRec."Ship To Location");
              IF (NewValuesAdviceRec.Transaction = NewValuesAdviceRec.Transaction::Purchase) OR (NewValuesAdviceRec.Transaction = NewValuesAdviceRec.Transaction::Requisition) THEN
                AdviceRec.VALIDATE("Bin Code", NewValuesAdviceRec."Bin Code");
          END;

          IF EditOrderDate THEN
            AdviceRec.VALIDATE("Order Date", NewValuesAdviceRec."Order Date");
          IF EditReceiptDate THEN
            AdviceRec.VALIDATE("Receipt Date", NewValuesAdviceRec."Receipt Date");
          IF EditEmplLocation THEN BEGIN
            IF ServOrderRec.GET(AdviceRec."Service Order No.") THEN BEGIN
              IF ServOrderRec."Employee No." <> '' THEN BEGIN
                IF ResourceWOP.GET(ServOrderRec."Employee No.") THEN BEGIN
                  IF ResourceWOP."Source No." <> '' THEN BEGIN
                    Employee.CHANGECOMPANY(ResourceWOP.Company);
                    IF Employee.GET(ResourceWOP."Source No.") THEN BEGIN
                      IF Employee."Location Code" <> '' THEN BEGIN
                        IF Location.GET(Employee."Location Code") THEN BEGIN
                          AdviceRec.VALIDATE(Deliver, AdviceRec.Deliver::Location);
                          AdviceRec.VALIDATE("Ship To Location",  Employee."Location Code");
                        END;
                      END;
                    END;
                  END;
                END;
              END;
            END;
          END;
          AdviceRec.MODIFY(TRUE);
        UNTIL AdviceRec.NEXT = 0;

      COMMIT;
    END;

    [External]
    PROCEDURE SelectToTypeAndBatch@1100409003(VAR lvToType@1100409001 : 'Item Journal,Item Reclass. Journal');
    VAR
      AdviceRec3@1100409003 : Record 11012055;
      InventorySetup@1100528400 : Record 313;
      SelectBatchForAdviceOrders@1100409002 : Page 11126526;
      lvCounter@1100409004 : Integer;
      lvMixedSources@1100409000 : Boolean;
    BEGIN
      lvCounter := AdviceRec.COUNT;
      AdviceRec3.COPY(AdviceRec);
      AdviceRec3.SETFILTER("Location Code", '<>%1', '');
      AdviceRec3.SETFILTER("Ship To Location", '<>%1', '');
      AdviceRec3.SETRANGE(Deliver, AdviceRec3.Deliver::Location);
      IF NOT (AdviceRec3.COUNT = 0) THEN BEGIN
        IF AdviceRec3.COUNT <> lvCounter THEN BEGIN
          lvMixedSources := TRUE;
        END ELSE BEGIN
          lvMixedSources := FALSE;
        END;
        // select template and batch
        IF InventorySetup.GET THEN;
        lvToType := InventorySetup."Default Journal Inv. Orders";
        SelectBatchForAdviceOrders.SetDefaults(lvToType,
          InventoryBatchRec."Journal Template Name",
          InventoryBatchRec.Name,
          lvMixedSources);
        SelectBatchForAdviceOrders.RUNMODAL;
        IF NOT SelectBatchForAdviceOrders.GetDefaults(lvToType,
             InventoryBatchRec."Journal Template Name",
             InventoryBatchRec.Name) THEN
          ERROR(Text031)
      END;
      ToTypeSelected := TRUE;
    END;

    [External]
    PROCEDURE PreSetToTypeAndBatch@1100409007(VAR gvAdviceRec@1100409002 : Record 11012055;CollectRun@1100409001 : Boolean;ItemRun@1100409000 : Boolean);
    BEGIN
      IF NOT ProjSetUp.GET THEN ProjSetUp.INIT;

      IF NOT CollectRun THEN BEGIN
        AdviceRec.COPY(gvAdviceRec);
        AdviceRec.MARKEDONLY(TRUE);
        IF NOT AdviceRec.FINDFIRST THEN
          AdviceRec.MARKEDONLY(FALSE);
        AdviceRec.FILTERGROUP(8);
        IF NOT ItemRun THEN BEGIN
          IF AdviceRec."Record Type" = AdviceRec."Record Type"::Project THEN
            AdviceRec.SETRANGE("Project No.", AdviceRec."Project No.");
          IF AdviceRec."Record Type" = AdviceRec."Record Type"::ServOrder THEN
            AdviceRec.SETRANGE("Service Order No.", AdviceRec."Service Order No.");
        END;
        AdviceRec.SETFILTER("Receipt Date", '<> %1', 0D);
      END;
      AdviceRec.FILTERGROUP(8);
      AdviceRec.SETRANGE(Transaction, AdviceRec.Transaction::Inventory);
      AdviceRec.SETFILTER("Quantity (Advice)", '<>0');
      AdviceRec.SETRANGE("Process Status", AdviceRec."Process Status"::Released);
      AdviceRec.CALCFIELDS("Logistics on Component Level");
      AdviceRec.SETRANGE("Logistics on Component Level",FALSE);
      IF NOT AdviceRec.FINDFIRST THEN
        IF  NOT ProjSetUp."Release Advice Order Mandatory" THEN
          AdviceRec.SETFILTER("Process Status", '<%1', AdviceRec."Process Status"::Cancelled);

      IF (NOT AdviceRec.FINDFIRST) THEN
        EXIT;

      SelectToTypeAndBatch(gvToType);
    END;

    [External]
    PROCEDURE SetCollectiveRun@1100409005();
    BEGIN
      gCollectiveRun := TRUE;
    END;

    LOCAL PROCEDURE CopyPurchaseLineDetail@1100529600(BudgetLineLoc@1100529601 : Record 11012001;VAR QuantityAdviceLoc@1100529603 : Decimal);
    VAR
      PurchaseLineDetail@1100529600 : Record 11020660;
      PurchaseLineDetail2@1100529602 : Record 11020660;
    BEGIN
      QuantityAdviceLoc := 0;

      IF NOT PurchaseLineDetail2.GET(PurchaseLineDetail2."Line Type"::"Advice Order", AdviceRec."Record Type",
                                       AdviceRec."Project No.", AdviceRec."Yard No.", AdviceRec."System No.", AdviceRec."Entity Type",
                                       AdviceRec."Entity No.", AdviceRec."Service Order No.", '', AdviceRec."Line No.")
      THEN BEGIN
        PurchaseLineDetail2.INIT;
        PurchaseLineDetail2."Line Type" := PurchaseLineDetail2."Line Type"::"Advice Order";
        PurchaseLineDetail2."Record Type" := AdviceRec."Record Type";
        PurchaseLineDetail2."Project No." := AdviceRec."Project No.";
        PurchaseLineDetail2."Yard No." := AdviceRec."Yard No.";
        PurchaseLineDetail2."System No." := AdviceRec."System No.";
        PurchaseLineDetail2."Entity Type" := AdviceRec."Entity Type";
        PurchaseLineDetail2."Entity No." := AdviceRec."Entity No.";
        PurchaseLineDetail2."Service Order No." := AdviceRec."Service Order No.";
        PurchaseLineDetail2."Line No." := AdviceRec."Line No.";
        PurchaseLineDetail2.INSERT(TRUE);
      END;
      PurchaseLineDetail2.Length := BudgetLineLoc.Length;
      PurchaseLineDetail2.Height := BudgetLineLoc.Height;
      PurchaseLineDetail2.Width := BudgetLineLoc.Width;
      IF PurchaseLineDetail.GET(PurchaseLineDetail."Line Type"::"Budget Line", PurchaseLineDetail."Record Type"::Project,
                                BudgetLineLoc."Project No.", BudgetLineLoc.Adjustment, BudgetLineLoc."Extension Contract",
                                0, '', '', BudgetLineLoc.Option, BudgetLineLoc."Line No.")
      THEN BEGIN
        PurchaseLineDetail2."Base Quantity" := PurchaseLineDetail."Base Quantity";
        PurchaseLineDetail2."Scaling Factor" := PurchaseLineDetail."Scaling Factor";
        IF PurchSetup."Calc Qty (Adv) Based On Detail" THEN
          QuantityAdviceLoc := PurchaseLineDetail.PurchaseDetailQuantity(PurchaseLineDetail);
      END;
      PurchaseLineDetail2.MODIFY;
    END;

    [External]
    PROCEDURE SetCreatePlantRequestSMF@1100529701(NewCreatePlantRequestSMF@1100529700 : Boolean);
    BEGIN
      CreatePlantRequestSMF := NewCreatePlantRequestSMF
    END;

    LOCAL PROCEDURE CreateNewPlantRequestSMF@1100529702(AdviceOrderLine@1210190001 : Record 11012055;PlantCompany@1100529000 : Text;VAR PlantRequestSMF@1210190000 : Record 11125529);
    BEGIN
      WITH PlantRequestSMF DO BEGIN
        INIT;
        "No." := '';
        "Source Type" := "Source Type"::"Service Order";
        "Source No." := AdviceOrderLine."Service Order No.";
        Type := Type::Arrival;
        VALIDATE("Plant Company", PlantCompany);
        INSERT(TRUE);
        TESTFIELD("No.");
        VALIDATE("Transfer Date", AdviceOrderLine."Receipt Date");
        VALIDATE("To Location", AdviceOrderLine."Plant Location");
        VALIDATE("Transfer Date", AdviceOrderLine."Receipt Date");
        // Status := Status::Requested;
        MODIFY(FALSE);
      END;
    END;

    LOCAL PROCEDURE CreatePlantRequestLineSMF@1100529710(AdviceOrderLine@1100529003 : Record 11012055;PlantCompany@1100529002 : Text;PlantRequestSMF@1100529001 : Record 11125529;VAR PlantRequestLineSMF@1100529000 : Record 11125530);
    VAR
      PlantRequestLineSMF2@1100529700 : Record 11125530;
    BEGIN
      PlantRequestLineSMF2.SETRANGE("Request No.", PlantRequestSMF."No.");
      IF PlantRequestLineSMF2.FINDLAST THEN
        PlantRequestLineSMF2."Line No." := 0;
      WITH PlantRequestLineSMF DO
        BEGIN
          INIT;
          "Request No." := PlantRequestSMF."No.";
          "Line No." := PlantRequestLineSMF2."Line No." + 10000;
         INSERT(TRUE);
          CASE TRUE OF
            AdviceOrderLine."Plant Type" <> '':
              BEGIN
                Type := Type::Plant;
                "Plant/Item" := AdviceOrderLine."Plant Type";
              END;
            AdviceOrderLine."Item No." <> '':
              BEGIN
                Type := Type::Item;
                "Plant/Item" := AdviceOrderLine."Item No.";
              END;
          ELSE
            Type := Type::Text;
          END;
          Description := AdviceOrderLine.Description;
          IF Type <> Type::Text THEN BEGIN
            "Description 2" := AdviceOrderLine."Description 2";
            "Expected return on" := AdviceOrderLine."Expected return on";
            IF AdviceOrderLine."Record Type" = AdviceOrderLine."Record Type"::Project THEN BEGIN
              "Project No." := AdviceOrderLine."Project No.";
              Element := AdviceOrderLine.Element;
            END;
            Quantity :=  AdviceOrderLine."Quantity (Advice)";
          END;
          MODIFY(FALSE);
      END;
    END;

    [External]
    PROCEDURE ProcessItemOperationCodes@1100529601(VAR LocAdviceOrderLine@1100529600 : Record 11012055);
    BEGIN
      IF LocAdviceOrderLine.ISEMPTY THEN
        EXIT;

      IF LocAdviceOrderLine.FINDSET(TRUE) THEN
      REPEAT
        IF LocAdviceOrderLine."Item Operation Code" <> '' THEN
          ProcessItemOperationCodAdviceOrderLine(LocAdviceOrderLine);
      UNTIL LocAdviceOrderLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ProcessItemOperationCodAdviceOrderLine@1100529604(VAR SourceAdviceOrderLine@1100529600 : Record 11012055);
    VAR
      ItemOperation@1100529601 : Record 11229433;
      UpdateAdviceOrderLine@1100529602 : Record 11012055;
    BEGIN
      IF NOT ItemOperation.GET(SourceAdviceOrderLine."Item Operation Code") THEN
        EXIT;

      IF ItemOperation."New Order Line" THEN BEGIN
        IF SourceAdviceOrderLine."Item Operation Source Line No." <> 0 THEN BEGIN
          SourceAdviceOrderLine."Item Operation Source Line No." := 0;
          SourceAdviceOrderLine.MODIFY;
        END;
        IF NOT GetNextAdviceOrderLine(SourceAdviceOrderLine, UpdateAdviceOrderLine) THEN
          EXIT;

        UpdateAdviceOrderLine.VALIDATE(Vendor, ItemOperation.Vendor);
        IF ItemOperation."Global Dimension 2 Code" <> '' THEN
          UpdateAdviceOrderLine."Cost Type" := ItemOperation."Cost Type" - 1
        ELSE
          UpdateAdviceOrderLine."Cost Type" := 0;
        UpdateAdviceOrderLine.VALIDATE("Cost Object", ItemOperation."Global Dimension 2 Code");
        UpdateAdviceOrderLine.VALIDATE("Unit of Measure", ItemOperation."Unit of Measure Code");
        UpdateAdviceOrderLine.Description := ItemOperation.Description;
      END ELSE
        IF NOT UpdateAdviceOrderLine.GET(SourceAdviceOrderLine."Record Type", SourceAdviceOrderLine."Project No.",
                                         SourceAdviceOrderLine."Service Order No.", SourceAdviceOrderLine."G/L Account",
                                         SourceAdviceOrderLine."Line No.")
        THEN
          EXIT;

      ItemOperation.CalcFormulaValue(SourceAdviceOrderLine, UpdateAdviceOrderLine);
      UpdateAdviceOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetNextAdviceOrderLine@1100529607(LocAdviceOrderLine@1100529600 : Record 11012055;VAR NewAdviceOrderLine@1100529604 : Record 11012055) : Boolean;
    VAR
      NewLineNo@1100529603 : Integer;
    BEGIN
      NewAdviceOrderLine.RESET;
      NewAdviceOrderLine.SETRANGE("Record Type", LocAdviceOrderLine."Record Type");
      NewAdviceOrderLine.SETRANGE("Project No.", LocAdviceOrderLine."Project No.");
      NewAdviceOrderLine.SETRANGE("Service Order No.", LocAdviceOrderLine."Service Order No.");
      NewAdviceOrderLine.SETRANGE("G/L Account", LocAdviceOrderLine."G/L Account");
      NewAdviceOrderLine.SETFILTER("Line No.", '>%1', LocAdviceOrderLine."Line No.", NewLineNo);
      NewAdviceOrderLine.SETRANGE("Item Operation Source Line No.", LocAdviceOrderLine."Line No.");
      IF NewAdviceOrderLine.FINDFIRST THEN
        EXIT(TRUE);

      NewLineNo := LocAdviceOrderLine."Line No." + 10;
      NewAdviceOrderLine.SETRANGE("Item Operation Source Line No.");
      NewAdviceOrderLine.SETFILTER("Line No.", '>%1&<%2', LocAdviceOrderLine."Line No.", NewLineNo);
      WHILE (NOT NewAdviceOrderLine.ISEMPTY) AND (NewLineNo > LocAdviceOrderLine."Line No.") DO
        NewLineNo -= 1;
      IF NewLineNo = LocAdviceOrderLine."Line No." THEN
        EXIT(FALSE);

      CLEAR(NewAdviceOrderLine);
      NewAdviceOrderLine."Record Type" := LocAdviceOrderLine."Record Type";
      IF LocAdviceOrderLine."Project No." <> '' THEN
        NewAdviceOrderLine.VALIDATE("Project No.", LocAdviceOrderLine."Project No.");
      IF LocAdviceOrderLine."Service Order No." <> '' THEN
        NewAdviceOrderLine.VALIDATE("Service Order No.", LocAdviceOrderLine."Service Order No.");
      IF LocAdviceOrderLine."G/L Account" <> '' THEN
        NewAdviceOrderLine.VALIDATE("Project No.", LocAdviceOrderLine."G/L Account");
      NewAdviceOrderLine."Line No." := NewLineNo;
      NewAdviceOrderLine."Item Operation Source Line No." := LocAdviceOrderLine."Line No.";
      NewAdviceOrderLine.INSERT(TRUE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CopyAdviceOrderLine@1100528502(VAR AdviceOrderLine@1100528510 : Record 11012055;VAR BudgetLine@1100528504 : Record 11012001;VAR LocBudgetLine@1100528501 : Record 11012001;VAR QuantityAdvice@1100528502 : Decimal;defDeliver@1100528507 : ' ,Location,Project Location';defShippingDate@1100528506 : Date;defLocation@1100528508 : Code[20]) : Text;
    VAR
      LocItem@1100528503 : Record 27;
      OldAdvice@1100528505 : Record 11012055;
      ItemTypeOpt@1100528509 : 'Item,Basic Item,Trade Item';
      AdjustmentFactor@1100528900 : Decimal;
    BEGIN
      WITH LocBudgetLine DO BEGIN
        IF "Item No." <> '' THEN
          IF LocItem.GET("Item No.") THEN BEGIN
            LocItem.CALCFIELDS("Assembly BOM");
            IF LocItem."Logistics on Component Level" AND ItemRec."Assembly BOM" THEN
              EXIT(Text027);
            IF LocItem."Advice Blocked" OR LocItem.Blocked THEN
              EXIT(Text034);
          END;
        Advised := TRUE;
        MODIFY;
        AdviceOrderLine.RESET;
        AdviceOrderLine.SETCURRENTKEY("Project No.", Element, "Extension Contract",
          "Item No.", Manufacturer, "Basic Item", "Vendor (Trade Item)", "Trade Item");
        AdviceOrderLine.SETRANGE("Project No.", "Project No.");
        IF NOT CompressByElement THEN
          AdviceOrderLine.SETRANGE(Element, Element);
        IF NOT CompressByVariContract THEN
          AdviceOrderLine.SETRANGE("Extension Contract", "Extension Contract");
        AdviceOrderLine.SETRANGE("Item No.", "Item No.");
        IF NOT CompressByPlotNo THEN
          AdviceOrderLine.SETRANGE("Plot No.", "Plot No.");
        AdviceOrderLine.SETRANGE("Basic Item", "Basic Item");
        AdviceOrderLine.SETRANGE(Manufacturer, Manufacturer);
        AdviceOrderLine.SETRANGE("Trade Item", "Trade Item");
        AdviceOrderLine.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");
        AdviceOrderLine.SETRANGE("Project Planning Activity No.", "Project Planning Activity No.");
        AdviceOrderLine.SETRANGE("Cost Object", "Cost Object");
        AdviceOrderLine.SETRANGE("Cost Component", "Cost Component");
        AdviceOrderLine.SETRANGE(Description, Description);
        AdviceOrderLine.SETRANGE("Description 2", "Description 2");
        AdviceOrderLine.SETRANGE("Unit of Measure", "Unit of Measure");
        AdviceOrderLine.SETRANGE("Purchase Action", "Purchase Action");
        AdviceOrderLine.SETRANGE("Purchase Route Reference", "Purchase Route Reference");
        AdviceOrderLine.SETRANGE("Price Agreement", "Price Agreement");
        AdviceOrderLine.SETRANGE("Currency Code", "Currency Code");
        AdviceOrderLine.SETRANGE("Currency Agreement", "Currency Agreement");
        IF NOT ItemLine("Item No.", "Basic Item", "Trade Item") OR ("Price Agreement") THEN
          AdviceOrderLine.SETRANGE("Price (LCY)", "Price (LCY)");
        AdviceOrderLine.SETRANGE("Scheme Code", '');
        IF Vendor <> '' THEN
          AdviceOrderLine.SETRANGE(Vendor, Vendor);
        AdviceOrderLine.SETRANGE("Subcontracting Activity", "Subcontracting Activity");
        AdviceOrderLine.SETRANGE("External Text", "External Text");
        AdviceOrderLine.SETRANGE("FSC Type Code", "FSC Type Code");
        AdviceOrderLine.SETRANGE("Entity No.", "Entity No.");

        IF NOT AdviceOrderLine.FINDFIRST OR ("Scheme Code" <> '') THEN BEGIN
          AdviceOrderLine.INIT;
          AdviceOrderLine."Record Type" := AdviceOrderLine."Record Type"::Project;
          AdviceOrderLine."Project No." := "Project No.";
          AdviceOrderLine.VALIDATE("Line No.", 0);
          AdviceOrderLine.INSERT(TRUE);
          CopyPurchaseLineDetail(LocBudgetLine, QuantityAdvice);
          AdviceOrderLine.SetCheckField(TRUE);

          AdviceOrderLine."Currency Code" := "Currency Code";
          AdviceOrderLine."Currency Agreement" := "Currency Agreement";
          IF NOT CompressByElement THEN
            AdviceOrderLine.VALIDATE(Element, Element);
          IF NOT CompressByVariContract THEN
            AdviceOrderLine.VALIDATE("Extension Contract", "Extension Contract");
          IF NOT CompressByPlotNo THEN
            AdviceOrderLine."Plot No." := "Plot No.";
          AdviceOrderLine."Tender Paragraph" := "Tender Paragraph";
          AdviceOrderLine."Tender Paragraph Part" := "Tender Paragraph Part";

          AdviceOrderLine.Manufacturer := Manufacturer;
          AdviceOrderLine."Vendor (Trade Item)" := "Vendor (Trade Item)";
          IF "Trade Item" <> '' THEN
            AdviceOrderLine.VALIDATE("Trade Item", "Trade Item")
          ELSE
            IF "Basic Item" <> '' THEN
              AdviceOrderLine.VALIDATE("Basic Item", "Basic Item")
            ELSE
              IF "Item No." <> '' THEN
                AdviceOrderLine.VALIDATE("Item No.", "Item No.");
          IF ("Item No." <> '') AND (AdviceOrderLine."Item No." <> "Item No.") THEN
            //if same basic item related to more Navision items with different EAN-code (unit)
            AdviceOrderLine.VALIDATE("Item No.", "Item No.");
          IF "Cost Type"  = "Cost Type"::Plant THEN BEGIN  //db, 20-01-20: avoid validate empty plant fields which can cause errors
            AdviceOrderLine.VALIDATE("Plant Company", "Plant Company");
            AdviceOrderLine.VALIDATE("Plant Location", "Plant Location");
            AdviceOrderLine.VALIDATE("Plant Type", "Plant Type");
          END;

          IF (AdviceOrderLine."Item No." <> '') THEN BEGIN
            IF (LocItem.GET(BudgetLine."Item No.")) THEN
              AdviceOrderLine."Item Category Code" := LocItem."Item Category Code";
          END;

          IF AdviceOrderLine."Unit of Measure" <> "Unit of Measure" THEN BEGIN
            OldAdvice := AdviceOrderLine;
            AdviceOrderLine."Unit of Measure" := "Unit of Measure";
            //adjust price before assign quantity; next function skipped by validate unit
            AdviceOrderLine.CheckItemUnitConversion(AdviceOrderLine, OldAdvice);
          END;

          AdviceOrderLine."Quantity (Budget)" := Quantity;
          IF QuantityAdvice = 0 THEN
            QuantityAdvice := AdviceOrderLine."Quantity (Budget)" - AdviceOrderLine."Quantity (Processed)";
          AdviceOrderLine.VALIDATE("Quantity (Advice)", QuantityAdvice);
          AdviceOrderLine.VALIDATE("Unit of Measure", "Unit of Measure");
          IF NOT ItemLine("Item No.", "Basic Item", "Trade Item") OR ("Price Agreement") THEN BEGIN
            //DP01676.sn
            AdjustmentFactor := 1;
            IF ("Cost Type" = "Cost Type"::Subcontracting) OR ("Cost Type" = "Cost Type"::Plant) THEN BEGIN
              IF Norm <> 0 THEN
                AdjustmentFactor := Norm;
            END;
            AdviceOrderLine."Price (LCY)" := "Price (LCY)" * AdjustmentFactor;
            AdviceOrderLine."Price (FCY)" := "Price (FCY)" * AdjustmentFactor;
            AdviceOrderLine."Gross Price (LCY)" := "Gross Price (LCY)" * AdjustmentFactor;
            AdviceOrderLine."Gross Price (FCY)" := "Gross Price (FCY)" * AdjustmentFactor;
            //DP01676.en
            AdviceOrderLine."Discount %" := "Discount %";
          END;
          AdviceOrderLine.VALIDATE("Delivery Period");
          AdviceOrderLine.EvaluateStartDate(defShippingDate);
          AdviceOrderLine."Cost Object" := "Cost Object";
          AdviceOrderLine.VALIDATE("Project Planning Activity No.", "Project Planning Activity No.");
          AdviceOrderLine."Cost Type" := "Cost Type" - 1;
          AdviceOrderLine."Cost Component" := "Cost Component";
          AdviceOrderLine."Variant Code" := "Variant Code";

          AdviceOrderLine.Description := Description;
          AdviceOrderLine."Description 2" := "Description 2";
          AdviceOrderLine."Purchase Action" := "Purchase Action";
          AdviceOrderLine."Purchase Phase" := "Purchase Phase";
          AdviceOrderLine."Purchaser Code" := AdviceOrderLine.GetDefaultPurchaser("Project No.", '');
          AdviceOrderLine.VALIDATE("External Text", "External Text");
          AdviceOrderLine.Deliver := defDeliver;
          AdviceOrderLine."Ship To Location" := defLocation;
          AdviceOrderLine."Purchase Route Reference" := "Purchase Route Reference";
          AdviceOrderLine."Price Agreement" := "Price Agreement";
          IF AdviceOrderLine."Vendor (Trade Item)" = '' THEN
            AdviceOrderLine.ValidateVendor;
          IF Vendor <> '' THEN
            AdviceOrderLine.Vendor := Vendor;
          AdviceOrderLine."Subcontracting Activity" := "Subcontracting Activity";
          AdviceOrderLine."Scheme Code" := "Scheme Code";
          AdviceOrderLine."Comments for Logistics" := "Comments for Logistics";
          AdviceOrderLine."FSC Type Code" := "FSC Type Code";
          AdviceOrderLine."Entity No." := "Entity No.";
          IF AdviceOrderLine."Entity No." <> '' THEN
            AdviceOrderLine."Entity Type" := AdviceOrderLine."Entity Type"::Position;
          AdviceOrderLine."Main Project No." := "Main Project No.";

          AdviceOrderLine.CalculateTotal;
          AdviceOrderLine.MODIFY(TRUE);

          CopyCommentLines(LocBudgetLine);
        END ELSE BEGIN
          CopyPurchaseLineDetail(LocBudgetLine, QuantityAdvice);
          AdviceOrderLine.SetCheckField(TRUE);
          CASE TRUE OF
            "Trade Item" <> '':
              AdviceOrderLine.ValidateItem(ItemTypeOpt::"Trade Item");
            "Basic Item" <> '':
              AdviceOrderLine.ValidateItem(ItemTypeOpt::"Basic Item");
            "Item No." <> '':
              AdviceOrderLine.ValidateItem(ItemTypeOpt::Item);
          END;
          IF NOT ItemLine("Item No.", "Basic Item", "Trade Item") OR ("Price Agreement") THEN BEGIN
            AdviceOrderLine."Price (LCY)" := "Price (LCY)";
            AdviceOrderLine."Gross Price (LCY)" := "Price (LCY)";
            AdviceOrderLine."Discount %" := 0;
          END;
          AdviceOrderLine."Quantity (Budget)" := AdviceOrderLine."Quantity (Budget)" + Quantity;
          IF QuantityAdvice = 0 THEN
            QuantityAdvice := AdviceOrderLine."Quantity (Advice)" + Quantity;
          AdviceOrderLine.VALIDATE("Quantity (Advice)", QuantityAdvice);
          AdviceOrderLine.EvaluateStartDate(defShippingDate);
          AdviceOrderLine.MODIFY(TRUE);
        END;
        AdviceOrderLine.SetCheckField(FALSE);
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE CopyAdviceOrderLineForServiceAdvice@1100528501(VAR ServiceOrderBudgetLine@1100528500 : Record 11012875;GlobalBudgetLine@1100528502 : Record 11012875;defDeliver@1100528902 : ' ,Location,Project Location';defShippingDate@1100528901 : Date;defLocation@1100528900 : Code[20]) : Text;
    VAR
      Item@1100528501 : Record 27;
      OldAdviceRec@1100528503 : Record 11012055;
    BEGIN
      WITH ServiceOrderBudgetLine DO BEGIN
        IF "Item No." <> '' THEN
          IF Item.GET("Item No.") THEN BEGIN
            Item.CALCFIELDS("Assembly BOM");
            IF Item."Logistics on Component Level" AND ItemRec."Assembly BOM" THEN
              EXIT(Text027);
            IF Item."Advice Blocked" OR Item.Blocked THEN
              EXIT(Text034);
          END;
        IF (NOT Advised) AND ("Cost Type" <> "Cost Type"::Labor) THEN BEGIN
          Advised := TRUE;
          MODIFY;
          AdviceRec.SETRANGE("Record Type", AdviceRec."Record Type"::ServOrder);
          AdviceRec.SETFILTER("Project No.", '%1', '');
          AdviceRec.SETRANGE("Service Order No.", "Service Order No.");
          AdviceRec.SETRANGE("Item No.", "Item No.");
          AdviceRec.SETRANGE("Basic Item", "Basic Item");
          AdviceRec.SETRANGE(Manufacturer, Manufacturer);
          AdviceRec.SETRANGE("Trade Item", "Trade Item");
          AdviceRec.SETRANGE("Vendor (Trade Item)", "Vendor (Trade Item)");

          AdviceRec.SETRANGE("Cost Object", "Cost Object");
          AdviceRec.SETRANGE("Cost Component", "Cost Component");
          AdviceRec.SETRANGE(Description, Description);
          AdviceRec.SETRANGE("Description 2", "Description 2");
          AdviceRec.SETRANGE("Unit of Measure", "Unit of Measure");
          AdviceRec.SETRANGE("Purchase Route Reference", "Purchase Route Reference");
          AdviceRec.SETRANGE("Price Agreement", "Price Agreement");
          IF Vendor <> '' THEN
            AdviceRec.SETRANGE(Vendor, Vendor);
          AdviceRec.SETRANGE("Subcontracting Activity", "Subcontracting Activity");
          IF "Cost Type" = "Cost Type"::Subcontracting THEN
            AdviceRec.SETRANGE("Price (LCY)", Price);
          AdviceRec.SETRANGE("External Text", "External Text");

          IF NOT AdviceRec.FINDFIRST THEN BEGIN
            AdviceRec.INIT;
            AdviceRec."Record Type" := AdviceRec."Record Type"::ServOrder;
            AdviceRec."Project No." := '';
            AdviceRec.VALIDATE("Service Order No.", "Service Order No.");
            AdviceRec.VALIDATE("Line No.", 0);
            AdviceRec.INSERT(TRUE);

            AdviceRec.Manufacturer := Manufacturer;
            AdviceRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
            IF "Trade Item" <> '' THEN
              AdviceRec.VALIDATE("Trade Item", "Trade Item")
            ELSE
              IF "Basic Item" <> '' THEN
                AdviceRec.VALIDATE("Basic Item", "Basic Item")
              ELSE
                IF "Item No." <> '' THEN
                  AdviceRec.VALIDATE("Item No.", "Item No.");
            IF ("Item No." <> '') AND (AdviceRec."Item No." <> "Item No.") THEN
              //if same basic item related to more Navision items with different EAN-code (unit)
              AdviceRec.VALIDATE("Item No.", "Item No.");

            IF AdviceRec."Item No." <> '' THEN
              IF Item.GET(GlobalBudgetLine."Item No.") THEN
                AdviceRec."Item Category Code" := Item."Item Category Code";

            IF AdviceRec."Unit of Measure" <> "Unit of Measure" THEN BEGIN
              OldAdviceRec := AdviceRec;
              AdviceRec."Unit of Measure" := "Unit of Measure";
              //adjust price before assign quantity; next function skipped by validate unit
              AdviceRec.CheckItemUnitConversion(AdviceRec, OldAdviceRec);
            END;

            AdviceRec."Quantity (Budget)" := Quantity;
            AdviceRec.VALIDATE("Quantity (Advice)", (AdviceRec."Quantity (Budget)" - AdviceRec."Quantity (Processed)"));
            AdviceRec.VALIDATE("Unit of Measure", "Unit of Measure");
            AdviceRec."Price (LCY)" := Price;
            AdviceRec."Gross Price (LCY)" := "Gross Price";
            AdviceRec."Discount %" := "Discount %";
            AdviceRec.VALIDATE("Delivery Period");
            AdviceRec.EvaluateStartDate(defShippingDate);  //C004646
            AdviceRec."Cost Object" := "Cost Object";
            AdviceRec."Cost Type" := "Cost Type" - 1;
            AdviceRec."Cost Component" := "Cost Component";
            AdviceRec."Variant Code" := "Variant Code";
            AdviceRec."Additional Cost (Service)" := "Additional Cost";

            AdviceRec.Description := Description;
            AdviceRec."Description 2" := "Description 2";
            AdviceRec.VALIDATE("External Text", "External Text");
            AdviceRec.Deliver := defDeliver;
            AdviceRec."Ship To Location" := defLocation;
            AdviceRec."Purchase Route Reference" := "Purchase Route Reference";
            AdviceRec."Price Agreement" := "Price Agreement";
            IF Vendor <> '' THEN
              AdviceRec.Vendor := Vendor;
            AdviceRec."Subcontracting Activity" := "Subcontracting Activity"; //C041836
            AdviceRec."Scheme Code" := "Scheme Code";
            AdviceRec."Comments for Logistics" := "Comments for Logistics";
            AdviceRec.CalculateTotal;
            AdviceRec.MODIFY(TRUE);
          END ELSE BEGIN
            AdviceRec."Quantity (Budget)" := AdviceRec."Quantity (Budget)" + Quantity;
            AdviceRec.VALIDATE("Quantity (Advice)", (AdviceRec."Quantity (Advice)" + Quantity));
            AdviceRec.VALIDATE("Receipt Date", defShippingDate);
            IF AdviceRec."Delivery Period" = '' THEN
              AdviceRec.VALIDATE("Order Date", AdviceRec."Receipt Date");
            AdviceRec.MODIFY(TRUE);
          END;
        END;
      END;
      EXIT('');
    END;

    [External]
    PROCEDURE SetPurchaserFromAdviceOrder@1100525008(NewPurchaserFromAdviceOrder@1100525000 : Boolean);
    BEGIN
      UsePurchaserFromAdviceOrder := NewPurchaserFromAdviceOrder;
    END;

    [External]
    PROCEDURE CreateEmpolyWarehouseOrderFromAdviceOrderLine@1100529603(VAR AdviceOrderLine@1100529600 : Record 11012055);
    VAR
      TmpEmpolyWarehouseOrder@1100529601 : TEMPORARY Record 11126687;
      TmpEmpolyWarehouseOrderLine@1100529602 : TEMPORARY Record 11126688;
    BEGIN
      IF AdviceOrderLine.ISEMPTY THEN
        EXIT;

      IF InsertTmpEmpolyWarehouseOrderFromAdviceOrderLine(AdviceOrderLine, TmpEmpolyWarehouseOrder, TmpEmpolyWarehouseOrderLine) THEN
        ProcessTmpEmpolyWarehouseOrder(TmpEmpolyWarehouseOrder, TmpEmpolyWarehouseOrderLine);
    END;

    LOCAL PROCEDURE InsertTmpEmpolyWarehouseOrderFromAdviceOrderLine@1100529602(VAR AdviceOrderLine@1100529600 : Record 11012055;VAR TmpEmpolyWarehouseOrder@1100529602 : TEMPORARY Record 11126687;VAR TmpEmpolyWarehouseOrderLine@1100529601 : TEMPORARY Record 11126688) : Boolean;
    VAR
      LocOrderNo@1100529603 : Code[20];
    BEGIN
      IF NOT ProjSetUp.GET THEN
        ProjSetUp.INIT;
      IF AdviceOrderLine.ISEMPTY THEN
        EXIT(FALSE);
      IF NOT TmpEmpolyWarehouseOrder.ISTEMPORARY THEN
        EXIT(FALSE);
      IF NOT TmpEmpolyWarehouseOrderLine.ISTEMPORARY THEN
        EXIT(FALSE);

      TmpAdviceRec.RESET;
      TmpAdviceRec.DELETEALL;
      TmpEmpolyWarehouseOrder.RESET;
      TmpEmpolyWarehouseOrder.DELETEALL;
      TmpEmpolyWarehouseOrderLine.RESET;
      TmpEmpolyWarehouseOrderLine.DELETEALL;
      LocOrderNo := '1';

      AdviceOrderLine.FILTERGROUP(8);
      AdviceOrderLine.SETRANGE(Transaction, AdviceOrderLine.Transaction::Inventory);
      AdviceOrderLine.SETRANGE(Processed, FALSE);
      AdviceOrderLine.SETFILTER("Record Type", '%1|%2', AdviceOrderLine."Record Type"::Project, AdviceOrderLine."Record Type"::ServOrder);
      AdviceOrderLine.SETFILTER("Quantity (Advice)", '<>0');
      AdviceOrderLine.SETRANGE("Process Status", AdviceOrderLine."Process Status"::Released);
      IF AdviceOrderLine.ISEMPTY THEN
        IF NOT ProjSetUp."Release Advice Order Mandatory" THEN
          AdviceOrderLine.SETFILTER("Process Status", '<%1', AdviceOrderLine."Process Status"::Cancelled);

      IF AdviceOrderLine.ISEMPTY THEN BEGIN
        IF GUIALLOWED THEN
          MESSAGE(Text000, AdviceOrderLine.TABLECAPTION, AdviceOrderLine.GETFILTERS);
        EXIT(FALSE);
      END;
      AdviceOrderLine.FILTERGROUP(0);

      AdviceOrderLine.FINDSET;
      REPEAT
        TmpEmpolyWarehouseOrder.RESET;

        CASE AdviceOrderLine."Record Type" OF
          AdviceOrderLine."Record Type"::Project:
            BEGIN
              TmpEmpolyWarehouseOrder.SETRANGE(Process, TmpEmpolyWarehouseOrder.Process::"Project Delivery");
              TmpEmpolyWarehouseOrder.SETRANGE("Project No.", AdviceOrderLine."Project No.");
              TmpEmpolyWarehouseOrder.SETRANGE(Element, AdviceOrderLine.Element);
              TmpEmpolyWarehouseOrder.SETRANGE("Extension Contract", AdviceOrderLine."Extension Contract");
            END;
          AdviceOrderLine."Record Type"::ServOrder:
            BEGIN
              TmpEmpolyWarehouseOrder.SETRANGE(Process, TmpEmpolyWarehouseOrder.Process::"Service Delivery");
              TmpEmpolyWarehouseOrder.SETRANGE("Service Order No.", AdviceOrderLine."Service Order No.");
            END;
        END;
        IF AdviceOrderLine."Supplying Company Inventory" = '' THEN
          TmpEmpolyWarehouseOrder.SETRANGE("Receiving Company", COMPANYNAME)
        ELSE
          TmpEmpolyWarehouseOrder.SETRANGE("Receiving Company", AdviceOrderLine."Supplying Company Inventory");
        TmpEmpolyWarehouseOrder.SETRANGE("Location Code", AdviceOrderLine."Location Code");

        IF TmpEmpolyWarehouseOrder.ISEMPTY THEN BEGIN
          TmpEmpolyWarehouseOrder.INIT;
          TmpEmpolyWarehouseOrder."No." := LocOrderNo;

          CASE AdviceOrderLine."Record Type" OF
            AdviceOrderLine."Record Type"::Project:
              BEGIN
                TmpEmpolyWarehouseOrder.Process := TmpEmpolyWarehouseOrder.Process::"Project Delivery";
                TmpEmpolyWarehouseOrder."Project No." := AdviceOrderLine."Project No.";
                TmpEmpolyWarehouseOrder.Element := AdviceOrderLine.Element;
                TmpEmpolyWarehouseOrder."Extension Contract" := AdviceOrderLine."Extension Contract";
              END;
            AdviceOrderLine."Record Type"::ServOrder:
              BEGIN
                TmpEmpolyWarehouseOrder.Process := TmpEmpolyWarehouseOrder.Process::"Service Delivery";
                TmpEmpolyWarehouseOrder."Service Order No." := AdviceOrderLine."Service Order No.";
              END;
          END;
          IF AdviceOrderLine."Supplying Company Inventory" = '' THEN
            TmpEmpolyWarehouseOrder."Receiving Company" := COMPANYNAME
          ELSE
            TmpEmpolyWarehouseOrder."Receiving Company" := AdviceOrderLine."Supplying Company Inventory";
          TmpEmpolyWarehouseOrder."Location Code" := AdviceOrderLine."Location Code";
          TmpEmpolyWarehouseOrder.INSERT;

          LocOrderNo := INCSTR(LocOrderNo);
          CLEAR(TmpEmpolyWarehouseOrderLine);
        END ELSE BEGIN
          TmpEmpolyWarehouseOrder.FINDFIRST;
          TmpEmpolyWarehouseOrderLine.SETRANGE("Order No.", TmpEmpolyWarehouseOrder."No.");
          TmpEmpolyWarehouseOrderLine.FINDLAST;
        END;

        TmpEmpolyWarehouseOrderLine.INIT;
        TmpEmpolyWarehouseOrderLine."Order No." := TmpEmpolyWarehouseOrder."No.";
        TmpEmpolyWarehouseOrderLine."Line No." += 1;
        TmpEmpolyWarehouseOrderLine."Item No." := AdviceOrderLine."Item No.";
        TmpEmpolyWarehouseOrderLine."Requested Quantity" := AdviceOrderLine."Quantity (Advice)";
        TmpEmpolyWarehouseOrderLine.INSERT;

        TmpAdviceRec := AdviceOrderLine;
        TmpAdviceRec.INSERT;
      UNTIL AdviceOrderLine.NEXT = 0;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ProcessTmpEmpolyWarehouseOrder@1100529605(VAR TmpEmpolyWarehouseOrder@1100529602 : TEMPORARY Record 11126687;VAR TmpEmpolyWarehouseOrderLine@1100529601 : TEMPORARY Record 11126688);
    VAR
      EmpolyWarehouseOrder@1100529600 : Record 11126687;
      EmpolyWarehouseOrderLine@1100529603 : Record 11126688;
      TmpOrderInfo@1100529604 : TEMPORARY Record 11020579;
      MessageTxt@1100529605 : Text;
    BEGIN
      TmpEmpolyWarehouseOrder.RESET;
      TmpEmpolyWarehouseOrderLine.RESET;
      IF TmpEmpolyWarehouseOrder.ISEMPTY OR TmpEmpolyWarehouseOrderLine.ISEMPTY THEN BEGIN
        IF GUIALLOWED THEN
          MESSAGE(Text035);
        EXIT;
      END;

      TmpEmpolyWarehouseOrder.FINDSET;
      REPEAT
        TmpEmpolyWarehouseOrderLine.SETRANGE("Order No.", TmpEmpolyWarehouseOrder."No.");
        IF NOT TmpEmpolyWarehouseOrderLine.ISEMPTY THEN BEGIN
          CLEAR(EmpolyWarehouseOrder);
          CLEAR(EmpolyWarehouseOrderLine);

          IF TmpEmpolyWarehouseOrder."Receiving Company" <> COMPANYNAME THEN BEGIN
            EmpolyWarehouseOrder.CHANGECOMPANY(TmpEmpolyWarehouseOrder."Receiving Company");
            EmpolyWarehouseOrderLine.CHANGECOMPANY(TmpEmpolyWarehouseOrder."Receiving Company");
          END;

          EmpolyWarehouseOrder.INSERT(TRUE);
          EmpolyWarehouseOrder."User ID" := USERID;
          EmpolyWarehouseOrder.Process := TmpEmpolyWarehouseOrder.Process;
          IF TmpEmpolyWarehouseOrder."Receiving Company" <> COMPANYNAME THEN
            EmpolyWarehouseOrder."Receiving Company" := COMPANYNAME;
          CASE EmpolyWarehouseOrder.Process OF
            EmpolyWarehouseOrder.Process::"Project Delivery":
              BEGIN
                EmpolyWarehouseOrder.VALIDATE("Project No.", TmpEmpolyWarehouseOrder."Project No.");
                EmpolyWarehouseOrder.VALIDATE(Element, TmpEmpolyWarehouseOrder.Element);
                EmpolyWarehouseOrder.VALIDATE("Extension Contract", TmpEmpolyWarehouseOrder."Extension Contract");
              END;
            EmpolyWarehouseOrder.Process::"Service Delivery":
              EmpolyWarehouseOrder.VALIDATE("Service Order No.", TmpEmpolyWarehouseOrder."Service Order No.");
          END;
          EmpolyWarehouseOrder.VALIDATE("Location Code", TmpEmpolyWarehouseOrder."Location Code");
          EmpolyWarehouseOrder.MODIFY;

          TmpEmpolyWarehouseOrderLine.FINDSET;
          REPEAT
            EmpolyWarehouseOrderLine.INIT;
            EmpolyWarehouseOrderLine."Order No." := EmpolyWarehouseOrder."No.";
            EmpolyWarehouseOrderLine."Line No." += 10000;
            EmpolyWarehouseOrderLine.INSERT(TRUE);
            EmpolyWarehouseOrderLine.VALIDATE("Item No.", TmpEmpolyWarehouseOrderLine."Item No.");
            EmpolyWarehouseOrderLine.VALIDATE("Requested Quantity", TmpEmpolyWarehouseOrderLine."Requested Quantity");
            EmpolyWarehouseOrderLine.MODIFY;
          UNTIL TmpEmpolyWarehouseOrderLine.NEXT = 0;

          IF GUIALLOWED THEN
            IF TmpOrderInfo.GET(TmpEmpolyWarehouseOrder."Receiving Company") THEN BEGIN
              TmpOrderInfo.Code2 := EmpolyWarehouseOrder."No."; // Last Empoly Warehouse Order No.
              TmpOrderInfo.Int1 += 1;
              TmpOrderInfo.MODIFY;
            END ELSE BEGIN
              TmpOrderInfo.INIT;
              TmpOrderInfo."Key Code1" := TmpEmpolyWarehouseOrder."Receiving Company";
              TmpOrderInfo.Text1 := TmpEmpolyWarehouseOrder."Receiving Company";
              TmpOrderInfo.Code1 := EmpolyWarehouseOrder."No."; // First Empoly Warehouse Order No.
              TmpOrderInfo.Int1 := 1; // First Empoly Warehouse Orders count
              TmpOrderInfo.INSERT;
            END;
        END;
      UNTIL TmpEmpolyWarehouseOrder.NEXT = 0;

      TmpAdviceRec.FINDSET;
      REPEAT
        UpdateAdviceLine;
      UNTIL TmpAdviceRec.NEXT = 0;

      IF NOT GUIALLOWED THEN
        EXIT;
      IF TmpOrderInfo.COUNT = 1 THEN BEGIN
        TmpOrderInfo.FINDFIRST;
        IF TmpOrderInfo.Int1 = 1 THEN
          MessageTxt := STRSUBSTNO(Text036, TmpOrderInfo.Code1)
        ELSE
          MessageTxt := STRSUBSTNO(Text037, TmpOrderInfo.Int1, STRSUBSTNO('%1..%2', TmpOrderInfo.Code1, TmpOrderInfo.Code2));
        IF TmpOrderInfo.Text1 <> COMPANYNAME THEN
          MessageTxt := MessageTxt + STRSUBSTNO(Text038, TmpOrderInfo.Text1);
        IF COPYSTR(MessageTxt, STRLEN(MessageTxt)) <> '.' THEN
          MessageTxt := MessageTxt + '.';
      END ELSE BEGIN
        MessageTxt := Text039;
        TmpOrderInfo.FINDSET;
        REPEAT
          IF TmpOrderInfo.Int1 = 1 THEN
            MessageTxt := MessageTxt + '\' + TmpOrderInfo.Code1 + STRSUBSTNO(Text038, TmpOrderInfo.Text1)
          ELSE
            MessageTxt := MessageTxt + '\' + STRSUBSTNO('%1..%2', TmpOrderInfo.Code1, TmpOrderInfo.Code2) + STRSUBSTNO(Text038, TmpOrderInfo.Text1);
        UNTIL TmpOrderInfo.NEXT = 0;
      END;
      MESSAGE(MessageTxt);
    END;

    LOCAL PROCEDURE "***4PSSE***"@1000000000();
    BEGIN
    END;

    PROCEDURE ProcessTransferOrder@111280000(VAR AdviceRecIn@111280002 : Record 11012055);
    VAR
      AdviceOrderLine@111280004 : Record 11012055;
      AdviceOrderFilters@111280015 : Record 11012055;
      TransferHeader@111280000 : Record 5740;
      TransferLine@111280001 : Record 5741;
      TransferHeaderBuffer@111280010 : TEMPORARY Record 5740;
      TransferLineBuffer@111280012 : TEMPORARY Record 5741;
      SESetup@111280006 : Record 11128004;
      LText01@111280007 : TextConst 'ENU=Cannot find the correct setting in SE Setup.;SVE=Kan inte hitta korrekt inst„llning i Nordiska inst„llningar.';
      Job@111280008 : Record 11072003;
      AdviceOrderLinkedDocument@111280013 : Record 11128128;
      LinkedDocBuffer@111280014 : TEMPORARY Record 11128128;
      LineNo@111280009 : Integer;
      BufferOrderNo@111280011 : Integer;
      LText02@111280005 : TextConst 'ENU=Nothing to process.;SVE=Inget att behandla.';
      LText03@111280003 : TextConst 'ENU=The list must be filtered on Project No. for this function to work.;SVE=Listan m†ste vara filtrerad p† projektnr f”r denna †tg„rd.';
    BEGIN
      // ORANGO.LP 4PSSE CER GAP 13
      AdviceOrderLine := AdviceRecIn;
      AdviceOrderLine.COPYFILTERS(AdviceRecIn);
      AdviceOrderFilters.COPYFILTERS(AdviceRecIn);

      SESetup.SETRANGE("Line type", SESetup."Line type"::Setup);
      SESetup.SETRANGE(Code, 'INVENTORY');
      SESetup.SETRANGE("Code 2", 'TRANSIT');
      IF NOT SESetup.FINDFIRST THEN
        ERROR(LText01);

      AdviceOrderLine.SETRANGE("Transaction (Secondary)", AdviceOrderLine."Transaction (Secondary)"::Transfer);
      AdviceOrderLine.SETFILTER("Quantity (Advice)", '<>%1', 0);
      AdviceOrderLine.SETRANGE("Process Status", AdviceOrderLine."Process Status"::Released);
      AdviceOrderLine.SETRANGE(Processed, FALSE);
      IF AdviceOrderLine.ISEMPTY THEN BEGIN
        MESSAGE(LText02);
        AdviceOrderLine.COPYFILTERS(AdviceOrderLine);
      END;

      IF AdviceOrderLine.GETFILTER("Project No.") = '' THEN
        ERROR(LText03);

      // Check that all locations are valid
      IF AdviceOrderLine.FINDSET THEN
      REPEAT
        AdviceOrderLine.TESTFIELD("Transfer From Location");
        AdviceOrderLine.TESTFIELD("Home Location");
      UNTIL AdviceOrderLine.NEXT = 0;

      // Check for different locations
      BufferOrderNo := 1;
      IF AdviceOrderLine.FINDSET THEN
      REPEAT
        Job.GET(AdviceOrderLine."Project No.");

        // Find or create a header
        TransferHeaderBuffer.SETRANGE("Transfer-from Code", AdviceOrderLine."Transfer From Location");
        TransferHeaderBuffer.SETRANGE("Transfer-to Code", AdviceOrderLine."Home Location");
        IF NOT TransferHeaderBuffer.FINDFIRST THEN BEGIN
          TransferHeaderBuffer.INIT;
          TransferHeaderBuffer."No." := FORMAT(BufferOrderNo);
          TransferHeaderBuffer."Transfer-from Code" := AdviceOrderLine."Transfer From Location";
          TransferHeaderBuffer."Transfer-to Code" := AdviceOrderLine."Home Location";
          TransferHeaderBuffer."In-Transit Code" := SESetup."Value (txt)";
          TransferHeaderBuffer."Project No." := Job."No.";
          TransferHeaderBuffer."Shortcut Dimension 1 Code" := Job."Global Dimension 1 Code";
          TransferHeaderBuffer.INSERT;
          BufferOrderNo += 1;

          LinkedDocBuffer.INIT;
          LinkedDocBuffer."Project No." := AdviceOrderLine."Project No.";
          LinkedDocBuffer."Project Line No." := AdviceOrderLine."Line No.";
          LinkedDocBuffer."Document No." := TransferHeaderBuffer."No.";
          LinkedDocBuffer.INSERT;
        END;

        // Add the line
        TransferLineBuffer.SETRANGE("Document No.", TransferHeaderBuffer."No.");
        IF TransferLineBuffer.FINDLAST THEN
          LineNo += TransferLineBuffer."Line No." + 10000
        ELSE
          LineNo += 10000;

        TransferLineBuffer.INIT;
        TransferLineBuffer."Document No." := TransferHeaderBuffer."No.";
        TransferLineBuffer."Line No." := LineNo;
        TransferLineBuffer."Item No." := AdviceOrderLine."Item No.";
        TransferLineBuffer.Quantity := AdviceOrderLine."Quantity (Advice)";
        TransferLineBuffer.INSERT;


      UNTIL AdviceOrderLine.NEXT = 0;

      TransferHeaderBuffer.RESET;
      TransferLineBuffer.RESET;

      // Create final transfer orders
      IF TransferHeaderBuffer.FINDFIRST THEN
      REPEAT
        TransferHeader.INIT;
        TransferHeader."No." := '';
        TransferHeader.INSERT(TRUE);
        TransferHeader.VALIDATE("Transfer-from Code", TransferHeaderBuffer."Transfer-from Code");
        TransferHeader.VALIDATE("Transfer-to Code", TransferHeaderBuffer."Transfer-to Code");
        TransferHeader.VALIDATE("In-Transit Code", TransferHeaderBuffer."In-Transit Code");
        TransferHeader.VALIDATE("Project No.", TransferHeaderBuffer."Project No.");
        TransferHeader.VALIDATE("Shortcut Dimension 1 Code", TransferHeaderBuffer."Shortcut Dimension 1 Code");
        TransferHeader.MODIFY(TRUE);

        TransferLineBuffer.SETRANGE("Document No.", TransferHeaderBuffer."No.");
        IF TransferLineBuffer.FINDSET THEN
        REPEAT
          TransferLine.INIT;
          TransferLine.VALIDATE("Document No.", TransferHeader."No.");
          TransferLine.VALIDATE("Line No.", TransferLineBuffer."Line No.");
          TransferLine.VALIDATE("Item No.", TransferLineBuffer."Item No.");
          TransferLine.VALIDATE(Quantity, TransferLineBuffer.Quantity);
          TransferLine.INSERT(TRUE);
          LineNo += 10000;
        UNTIL TransferLineBuffer.NEXT = 0;

        LinkedDocBuffer.SETRANGE("Project No.", TransferHeaderBuffer."Project No.");
        LinkedDocBuffer.SETRANGE("Document No.", TransferHeaderBuffer."No.");
        IF LinkedDocBuffer.FINDSET THEN
        REPEAT
          LinkedDocBuffer."Document No." := TransferHeader."No.";
          LinkedDocBuffer.MODIFY;
        UNTIL LinkedDocBuffer.NEXT = 0;
        LinkedDocBuffer.RESET;

      UNTIL TransferHeaderBuffer.NEXT = 0;

      // Mark lines as processed
      IF AdviceOrderLine.FINDSET THEN
      REPEAT

        //200325 ORANGO.EE >>
        AdviceOrderLine."Quantity (Advice)" := AdviceOrderLine."Quantity (Advice)" - TransferLineBuffer.Quantity;
        AdviceOrderLine."Quantity (Processed)" := AdviceOrderLine."Quantity (Processed)" + TransferLineBuffer.Quantity;
        IF AdviceOrderLine."Quantity (Processed)" < AdviceOrderLine."Quantity (Budget)" THEN BEGIN
          AdviceOrderLine.ProcessOpenStatus;
        END ELSE BEGIN
          AdviceOrderLine.ProcessCloseStatus;
        END;
        SaveAdviceRec(AdviceOrderLine);
        AdviceOrderLine.MODIFY(TRUE);
        RestoreAdviceRec(AdviceOrderLine);
        //<<

        LinkedDocBuffer.GET(AdviceOrderLine."Project No.", AdviceOrderLine."Line No.");
        AdviceOrderLinkedDocument.InitLine(AdviceOrderLine, LinkedDocBuffer."Document No.");
        AdviceOrderLinkedDocument."Transaction Type" := AdviceOrderLinkedDocument."Transaction Type"::Transfer;
        AdviceOrderLinkedDocument.INSERT;

      UNTIL AdviceOrderLine.NEXT = 0;

      AdviceRecIn := AdviceOrderLine;
      AdviceRecIn.COPYFILTERS(AdviceOrderFilters);
    END;

    PROCEDURE ProcessAssemblyOrder@111280001(VAR AdviceRecIn@111280002 : Record 11012055);
    VAR
      AdviceOrderLine@111280006 : Record 11012055;
      AdviceOrderFilters@111280005 : Record 11012055;
      AdviceOrderLinkedDocument@111280012 : Record 11128128;
      LinkedDocBuffer@111280010 : TEMPORARY Record 11128128;
      AssemblyHeader@111280003 : Record 900;
      AssemblyLine@111280004 : Record 901;
      AssemblyHeaderBuffer@111280001 : TEMPORARY Record 900;
      AssemblyLineBuffer@111280000 : TEMPORARY Record 901;
      LText01@111280007 : TextConst 'ENU=Cannot find the correct setting in SE Setup.;SVE=Kan inte hitta korrekt inst„llning i Nordiska inst„llningar.';
      Job@111280008 : Record 11072003;
      LineNo@111280009 : Integer;
      BufferOrderNo@111280011 : Integer;
    BEGIN
      // ORANGO.LP 4PSSE CER GAP 13
      AdviceOrderLine := AdviceRecIn;
      AdviceOrderLine.COPYFILTERS(AdviceRecIn);
      AdviceOrderFilters.COPYFILTERS(AdviceRecIn);

      AdviceOrderLine.SETRANGE("Transaction (Secondary)", AdviceOrderLine."Transaction (Secondary)"::Assembly);
      AdviceOrderLine.SETFILTER("Quantity (Advice)", '<>%1', 0);
      AdviceOrderLine.SETRANGE("Process Status", AdviceOrderLine."Process Status"::Released);
      AdviceOrderLine.SETRANGE(Processed, FALSE);
      IF AdviceOrderLine.ISEMPTY THEN
        EXIT;

      // Check that all locations are valid
      IF AdviceOrderLine.FINDSET THEN
      REPEAT
        AdviceOrderLine.TESTFIELD("Home Location");
      UNTIL AdviceOrderLine.NEXT = 0;

      // Check for different locations
      BufferOrderNo := 1;
      IF AdviceOrderLine.FINDSET THEN
      REPEAT
        Job.GET(AdviceOrderLine."Project No.");

        // Find or create a header
        AssemblyHeaderBuffer.SETRANGE("Location Code", AdviceOrderLine."Home Location");
        AssemblyHeaderBuffer.SETRANGE("Item No.", AdviceOrderLine."Item No.");
        IF NOT AssemblyHeaderBuffer.FINDFIRST THEN BEGIN
          AssemblyHeaderBuffer.INIT;
          AssemblyHeaderBuffer."Document Type" := AssemblyHeaderBuffer."Document Type"::Order;
          AssemblyHeaderBuffer."No." := FORMAT(BufferOrderNo);
          AssemblyHeaderBuffer."Location Code" := AdviceOrderLine."Home Location";
          AssemblyHeaderBuffer."Project No." := Job."No.";
          AssemblyHeaderBuffer."System No. Assembly Order" := AdviceOrderLine."System No. Assembly Order";
          AssemblyHeaderBuffer."Shortcut Dimension 1 Code" := Job."Global Dimension 1 Code";
          AssemblyHeaderBuffer."Item No." := AdviceOrderLine."Item No.";
          AssemblyHeaderBuffer.Quantity := AdviceOrderLine."Quantity (Advice)";
          AssemblyHeaderBuffer.INSERT;
          BufferOrderNo += 1;

          LinkedDocBuffer.INIT;
          LinkedDocBuffer."Project No." := AdviceOrderLine."Project No.";
          LinkedDocBuffer."Project Line No." := AdviceOrderLine."Line No.";
          LinkedDocBuffer."Document No." := AssemblyHeaderBuffer."No.";
          LinkedDocBuffer.INSERT;
        END;


      UNTIL AdviceOrderLine.NEXT = 0;

      AssemblyHeaderBuffer.RESET;
      AssemblyLineBuffer.RESET;

      // Create the final Assembly Order
      IF AssemblyHeaderBuffer.FINDFIRST THEN
      REPEAT
        AssemblyHeader.INIT;
        AssemblyHeader."Document Type" := AssemblyHeaderBuffer."Document Type";
        AssemblyHeader."No." := '';
        AssemblyHeader.INSERT(TRUE);
        AssemblyHeader.VALIDATE("Item No.", AssemblyHeaderBuffer."Item No.");
        AssemblyHeader.VALIDATE("Location Code", AssemblyHeaderBuffer."Location Code");
        AssemblyHeader.VALIDATE(Quantity, AssemblyHeaderBuffer.Quantity);
        AssemblyHeader.VALIDATE("Project No.", AssemblyHeaderBuffer."Project No.");
        AssemblyHeader.VALIDATE("System No. Assembly Order", AssemblyHeaderBuffer."System No. Assembly Order");
        AssemblyHeader.VALIDATE("Shortcut Dimension 1 Code", AssemblyHeaderBuffer."Shortcut Dimension 1 Code");
        AssemblyHeader.MODIFY(TRUE);

        LinkedDocBuffer.SETRANGE("Project No.", AssemblyHeaderBuffer."Project No.");
        LinkedDocBuffer.SETRANGE("Document No.", AssemblyHeaderBuffer."No.");
        IF LinkedDocBuffer.FINDSET THEN
        REPEAT
          LinkedDocBuffer."Document No." := AssemblyHeader."No.";
          LinkedDocBuffer.MODIFY;
        UNTIL LinkedDocBuffer.NEXT = 0;
        LinkedDocBuffer.RESET;

      UNTIL AssemblyHeaderBuffer.NEXT = 0;

      // Mark lines as processed
      IF AdviceOrderLine.FINDSET THEN
      REPEAT

        //200325 ORANGO.EE >>
        AdviceOrderLine."Quantity (Advice)" := AdviceOrderLine."Quantity (Advice)" - AssemblyHeaderBuffer.Quantity;
        AdviceOrderLine."Quantity (Processed)" := AdviceOrderLine."Quantity (Processed)" + AssemblyHeaderBuffer.Quantity;
        IF AdviceOrderLine."Quantity (Processed)" < AdviceOrderLine."Quantity (Budget)" THEN BEGIN
          AdviceOrderLine.ProcessOpenStatus;
        END ELSE BEGIN
          AdviceOrderLine.ProcessCloseStatus;
        END;
        SaveAdviceRec(AdviceOrderLine);
        AdviceOrderLine.MODIFY(TRUE);
        RestoreAdviceRec(AdviceOrderLine);
        //<<

        LinkedDocBuffer.GET(AdviceOrderLine."Project No.", AdviceOrderLine."Line No.");
        AdviceOrderLinkedDocument.InitLine(AdviceOrderLine, LinkedDocBuffer."Document No.");
        AdviceOrderLinkedDocument."Transaction Type" := AdviceOrderLinkedDocument."Transaction Type"::Assembly;
        AdviceOrderLinkedDocument.INSERT;

      UNTIL AdviceOrderLine.NEXT = 0;

      AdviceRecIn := AdviceOrderLine;
      AdviceRecIn.COPYFILTERS(AdviceOrderFilters);
    END;

    PROCEDURE ProcessPick@111280002(VAR AdviceRecIn@1100285104 : Record 11012055);
    VAR
      PickHeader@111280003 : Record 11128126;
      PickLine@111280004 : Record 11128127;
      LText02@1100285105 : TextConst 'ENU=Nothing to process.;SVE=Inget att behandla.';
      LText01@111280007 : TextConst 'ENU=Cannot find the correct setting in SE Setup.;SVE=Kan inte hitta korrekt inst„llning i Nordiska inst„llningar.';
      PickHeaderBuffer@111280001 : TEMPORARY Record 11128126;
      PickLineBuffer@111280000 : TEMPORARY Record 11128127;
      Job@111280008 : Record 11072003;
      LineNo@111280009 : Integer;
      BufferOrderNo@111280011 : Integer;
      AdviceOrderLinkedDocument@1100285100 : Record 11128128;
      LinkedDocBuffer@1100285101 : TEMPORARY Record 11128128;
      AdviceOrderLine@1100285103 : Record 11012055;
      AdviceOrderFilters@1100285102 : Record 11012055;
    BEGIN
      // ORANGO.LP 4PSSE CER GAP 13
      AdviceOrderLine := AdviceRecIn;
      AdviceOrderLine.COPYFILTERS(AdviceRecIn);
      AdviceOrderFilters.COPYFILTERS(AdviceRecIn);

      AdviceOrderLine.SETRANGE("Transaction (Secondary)", AdviceOrderLine."Transaction (Secondary)"::Inventory);
      AdviceOrderLine.SETFILTER("Quantity (Advice)", '<>%1', 0);
      AdviceOrderLine.SETRANGE("Process Status", AdviceOrderLine."Process Status"::Released);
      AdviceOrderLine.SETRANGE(Processed, FALSE);
      IF AdviceOrderLine.ISEMPTY THEN BEGIN
        MESSAGE(LText02);
        AdviceOrderLine.COPYFILTERS(AdviceOrderLine);
      END;

      // Check that all locations are valid
      IF AdviceOrderLine.FINDSET THEN
      REPEAT
        AdviceOrderLine.TESTFIELD("Home Location");
      UNTIL AdviceOrderLine.NEXT = 0;

      // Check for different locations
      BufferOrderNo := 1;
      IF AdviceOrderLine.FINDSET THEN
      REPEAT
        Job.GET(AdviceOrderLine."Project No.");

        // Find or create a header
        PickHeaderBuffer.SETRANGE("Location Code", AdviceOrderLine."Home Location");
        PickHeaderBuffer.SETRANGE("Project No.", AdviceOrderLine."Project No.");
        PickHeaderBuffer.SETRANGE("Service Order No.", AdviceOrderLine."Service Order No.");
        IF NOT PickHeaderBuffer.FINDFIRST THEN BEGIN
          PickHeaderBuffer.INIT;
          PickHeaderBuffer."No." := FORMAT(BufferOrderNo);
          PickHeaderBuffer."Location Code" := AdviceOrderLine."Home Location";
          PickHeaderBuffer."Project No." := Job."No.";
          PickHeaderBuffer."Service Order No." := AdviceOrderLine."Service Order No.";
          //200327 ORANGO.EE >>
          PickHeaderBuffer."Posting Date" := TODAY;
          IF Job.GET(AdviceOrderLine."Project No.") THEN
          PickHeaderBuffer."Customer No." := Job."Bill-to Customer No.";
          //<<
          //200408 ORANGO.EE
          PickHeaderBuffer."Extension Contract" := AdviceOrderLine."Extension Contract";
          PickHeaderBuffer.INSERT;
          BufferOrderNo += 1;

          //200325 ORANGO.EE >>
          LinkedDocBuffer.INIT;
          LinkedDocBuffer."Project No." := AdviceOrderLine."Project No.";
          LinkedDocBuffer."Project Line No." := AdviceOrderLine."Line No.";
          LinkedDocBuffer."Document No." := PickHeaderBuffer."No.";
          LinkedDocBuffer.INSERT;
          //<<

        END;

        // Add the line
        PickLineBuffer.SETRANGE("Document No.", PickHeaderBuffer."No.");
        IF PickLineBuffer.FINDLAST THEN
          LineNo += PickLineBuffer."Line No." + 10000
        ELSE
          LineNo += 10000;

        PickLineBuffer.INIT;
        PickLineBuffer."Document No." := PickHeaderBuffer."No.";
        PickLineBuffer."Line No." := LineNo;
        PickLineBuffer."Item No." := AdviceOrderLine."Item No.";
        PickLineBuffer.Quantity := AdviceOrderLine."Quantity (Advice)";
        //200325 ORANGO.EE >>
        //PickLineBuffer."Location Code"  := AdviceOrderLine."Location Code";
        PickLineBuffer."Location Code"  := AdviceOrderLine."Home Location";
        //<<
        PickLineBuffer."Trade Item" := AdviceOrderLine."Trade Item";
        PickLineBuffer."Unit Price" := AdviceOrderLine."Price (LCY)";
        PickLineBuffer.INSERT;


      UNTIL AdviceOrderLine.NEXT = 0;

      PickHeaderBuffer.RESET;
      PickLineBuffer.RESET;

      IF PickHeaderBuffer.FINDFIRST THEN
      REPEAT
        PickHeader.INIT;
        PickHeader."No." := '';
        PickHeader.INSERT(TRUE);
        PickHeader.VALIDATE("Location Code", PickHeaderBuffer."Location Code");
        PickHeader.VALIDATE("Project No.", PickHeaderBuffer."Project No.");
        PickHeader.VALIDATE("Service Order No.", PickHeaderBuffer."Service Order No.");
        //200327 ORANGO.EE >>
        PickHeader."Posting Date" := PickHeaderBuffer."Posting Date";
        PickHeader.VALIDATE("Customer No.", PickHeaderBuffer."Customer No.");
        //<<
        //190408 ORANGO.EE
        PickHeader.VALIDATE("Extension Contract", PickHeaderBuffer."Extension Contract");
        PickHeader.MODIFY(TRUE);

        PickLineBuffer.SETRANGE("Document No.", PickHeaderBuffer."No.");
        IF PickLineBuffer.FINDSET THEN
        REPEAT
          PickLine.INIT;
          PickLine.VALIDATE("Document No.", PickHeader."No.");
          PickLine.VALIDATE("Line No.", PickLineBuffer."Line No.");
          PickLine.VALIDATE("Item No.", PickLineBuffer."Item No.");
          PickLine.VALIDATE(Quantity, PickLineBuffer.Quantity);
          PickLine.VALIDATE("Location Code", PickLineBuffer."Location Code");
          PickLine.VALIDATE("Trade Item", PickLineBuffer."Trade Item");
          PickLine.VALIDATE("Unit Price", PickLineBuffer."Unit Price");
          //PickLine.VALIDATE("Quantity to Pick", PickLineBuffer."Quantity to Pick");
          PickLine.INSERT(TRUE);
        UNTIL PickLineBuffer.NEXT = 0;

        //200325 ORANGO.EE >>
        LinkedDocBuffer.SETRANGE("Project No.", PickHeaderBuffer."Project No.");
        LinkedDocBuffer.SETRANGE("Document No.", PickHeaderBuffer."No.");
        IF LinkedDocBuffer.FINDSET THEN
        REPEAT
          LinkedDocBuffer."Document No." := PickHeader."No.";
          LinkedDocBuffer.MODIFY;
        UNTIL LinkedDocBuffer.NEXT = 0;
        LinkedDocBuffer.RESET;
        //<<

      UNTIL PickHeaderBuffer.NEXT = 0;

        IF AdviceOrderLine.FINDSET THEN
          REPEAT
        //200325 ORANGO.EE >>
        AdviceOrderLine."Quantity (Advice)" := AdviceOrderLine."Quantity (Advice)" - PickLineBuffer.Quantity;
        AdviceOrderLine."Quantity (Processed)" := AdviceOrderLine."Quantity (Processed)" + PickLineBuffer.Quantity;
        IF AdviceOrderLine."Quantity (Processed)" < AdviceOrderLine."Quantity (Budget)" THEN BEGIN
          AdviceOrderLine.ProcessOpenStatus;
        END ELSE BEGIN
          AdviceOrderLine.ProcessCloseStatus;
        END;
        SaveAdviceRec(AdviceOrderLine);
        AdviceOrderLine.MODIFY(TRUE);
        RestoreAdviceRec(AdviceOrderLine);
        //<<

        //200325 ORANGO.EE >>
        //200406 ORANGO.EE >>
        //LinkedDocBuffer.GET(AdviceOrderLine."Project No.", AdviceOrderLine."Line No.");
        LinkedDocBuffer.SETRANGE("Project No.", AdviceOrderLine."Project No.");
        LinkedDocBuffer.SETRANGE("Project Line No.", AdviceOrderLine."Line No.");
        //<<
        AdviceOrderLinkedDocument.InitLine(AdviceOrderLine, LinkedDocBuffer."Document No.");
        AdviceOrderLinkedDocument."Transaction Type" := AdviceOrderLinkedDocument."Transaction Type"::Inventory;
        AdviceOrderLinkedDocument.INSERT;
        //<<

        UNTIL AdviceOrderLine.NEXT = 0;

      AdviceRecIn := AdviceOrderLine;
      AdviceRecIn.COPYFILTERS(AdviceOrderFilters);

      {IF PickHeader."No." <> '' THEN BEGIN
        COMMIT;
        PAGE.RUN(0, PickHeader);
      END;}
    END;

    BEGIN
    {
      191120 ORANGO.LP NAVSE CER GAP 13. New functions:
                        - ProcessTransferOrder
                        - ProcessAssemblyOrder
                        - ProcessPick
    }
    END.
  }
}

