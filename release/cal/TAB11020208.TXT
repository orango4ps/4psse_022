OBJECT Table 11020208 Overhead Surcharge
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckFieldsFilled;
               VALIDATE("Apply for");
             END;

    OnModify=BEGIN
               CheckFieldsFilled;
             END;

    CaptionML=[ENU=Overhead Surcharge;
               NOR=Overheadkost;
               SVE=Overheadkostnad];
    LookupPageID=Page11072455;
  }
  FIELDS
  {
    { 5   ;   ;Level               ;Integer       ;CaptionML=[ENU=Level;
                                                              NOR=Niv†;
                                                              SVE=Niv†] }
    { 10  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 18  ;   ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              NOR=Startdato;
                                                              SVE=Startdatum] }
    { 19  ;   ;Ending Date         ;Date          ;CaptionML=[ENU=Ending Date;
                                                              NOR=Sluttdato;
                                                              SVE=Slutdatum] }
    { 20  ;   ;Project Type        ;Code20        ;TableRelation="Project Type".Code;
                                                   CaptionML=[ENU=Project Type;
                                                              NOR=Prosjekttype;
                                                              SVE=Projekttyp] }
    { 30  ;   ;Service Type        ;Code20        ;TableRelation="Service Type".Code;
                                                   CaptionML=[ENU=Service Type;
                                                              NOR=Servicetype;
                                                              SVE=Servicetyp] }
    { 40  ;   ;Cost Code           ;Code20        ;TableRelation="Cost Code";
                                                   CaptionML=[ENU=Cost Code;
                                                              NOR=Kostkode;
                                                              SVE=Kostnadskod] }
    { 50  ;   ;Cost Type           ;Option        ;InitValue=[ ];
                                                   OnValidate=BEGIN
                                                                IF NOT AmountAllowed THEN
                                                                  TESTFIELD(Amount, 0);
                                                                CheckCostTypePlant;
                                                              END;

                                                   CaptionML=[ENU=Cost Type;
                                                              NOR=Kostnadstype;
                                                              SVE=Kostnadstyp];
                                                   OptionCaptionML=[ENU="Labor,Material,Subcontracting,Plant,Sundry,Revenues, ";
                                                                    NOR="Arbeidskraft,Materiale,Underentrepen›r,Maskin,Diverse,Inntekter, ";
                                                                    SVE="Arbetskraft,Material,Underentreprenad,Maskin,Diverse,Int„kter, "];
                                                   OptionString=[Labor,Material,Subcontracting,Plant,Sundry,Revenues, ] }
    { 60  ;   ;Cost Object         ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                IF NOT AmountAllowed THEN
                                                                  TESTFIELD(Amount, 0);
                                                                CheckCostTypePlant;
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Kostnadsobjekt;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 70  ;   ;Wage Component      ;Code20        ;TableRelation="Wage Component".Code WHERE (Component Type=FILTER(Hours|Expenses));
                                                   CaptionML=[ENU=Wage Component;
                                                              NOR=L›nnsart;
                                                              SVE=L”neart] }
    { 80  ;   ;Department          ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Department;
                                                              NOR=Avdeling;
                                                              SVE=Department];
                                                   CaptionClass='1,2,1' }
    { 90  ;   ;Trade Association   ;Code10        ;TableRelation="Trade Association";
                                                   CaptionML=[ENU=Trade Association;
                                                              NOR=Bransjeorganisasjon;
                                                              SVE=Branschorganisation] }
    { 100 ;   ;Cost Component      ;Code10        ;TableRelation="Cost Component";
                                                   CaptionML=[ENU=Cost Component;
                                                              NOR=Kostnadskomponent;
                                                              SVE=Kostnadsdel] }
    { 110 ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Job No.;
                                                              NOR=Prosjektnr.;
                                                              SVE=Projektnr] }
    { 1000;   ;Description         ;Text30        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 1010;   ;Percentage          ;Decimal       ;OnValidate=BEGIN
                                                                IF Percentage <> 0 THEN
                                                                  TESTFIELD(Amount, 0);
                                                              END;

                                                   CaptionML=[ENU=Percentage;
                                                              NOR=Prosent;
                                                              SVE=Procent];
                                                   DecimalPlaces=2:4 }
    { 1020;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                IF Amount <> 0 THEN
                                                                  TESTFIELD(Percentage, 0);
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              NOR=Bel›p;
                                                              SVE=Belopp] }
    { 1030;   ;Surcharge over Surcharge;Boolean   ;CaptionML=[ENU=Surcharge over Surcharge;
                                                              NOR=Tilleggsgebyr over tilleggsgebyr;
                                                              SVE=Till„ggsavgift p† till„ggsavgift] }
    { 1090;   ;Source Type Cost Object;Option     ;OnValidate=BEGIN
                                                                IF "Source Type Cost Object" <> "Source Type Cost Object"::Fixed THEN
                                                                  "Cost Object Surcharge" := '';
                                                              END;

                                                   CaptionML=[ENU=Source Type Cost Object;
                                                              NOR=Kildetype, Kostnadsobjekt;
                                                              SVE=Ursprungstyp, kostnadsobjekt];
                                                   OptionCaptionML=[ENU=Fixed,Original Posting;
                                                                    NOR=Fast,Opprinnelig Bokf›ring;
                                                                    SVE=Fast, ursprunglig bokf”ring];
                                                   OptionString=Fixed,Original Posting }
    { 1100;   ;Cost Object Surcharge;Code20       ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Cost Type=FILTER(<Revenue));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Source Type Cost Object", "Source Type Cost Object"::Fixed);
                                                              END;

                                                   CaptionML=[ENU=Cost Object Surcharge;
                                                              NOR=Kostnadsobjekt tilleggsgebyr;
                                                              SVE=Kostnadsobjekt till„ggsavgift] }
    { 1110;   ;Coverage Account    ;Code20        ;TableRelation="G/L Account".No.;
                                                   CaptionML=[ENU=Coverage Account;
                                                              NOR=Dekning, konto;
                                                              SVE=T„ckning, konto] }
    { 1120;   ;Source Type Department;Option      ;OnValidate=BEGIN
                                                                IF "Source Type Department" <> "Source Type Department"::Fixed THEN
                                                                  "Coverage Department" := '';
                                                                CheckCostTypePlant;
                                                              END;

                                                   CaptionML=[ENU=Source Type Department;
                                                              NOR=Kildetype, avdeling;
                                                              SVE=Ursprungstyp, avdelning];
                                                   OptionCaptionML=[ENU=Employee,Job,Fixed,Plant;
                                                                    SVE=Personal,Projekt,Fast,Maskin];
                                                   OptionString=Employee,Job,Fixed,Plant }
    { 1130;   ;Coverage Department ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Source Type Department", "Source Type Department"::Fixed);
                                                              END;

                                                   CaptionML=[ENU=Coverage Department;
                                                              NOR=Dekning, avdeling;
                                                              SVE=T„ckning, avdelning] }
    { 1140;   ;Element Surcharge   ;Code20        ;TableRelation="Base Element";
                                                   OnValidate=VAR
                                                                lvElemRec@1100485000 : Record 11012060;
                                                              BEGIN
                                                                ElementFormat.FormatElem("Element Surcharge",2,'');
                                                                IF "Element Surcharge" <> '' THEN
                                                                  lvElemRec.GET("Element Surcharge");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Element Surcharge;
                                                              NOR=Tilleggsgebyr, Element;
                                                              SVE=Till„ggsavgift, element] }
    { 1150;   ;Apply for           ;Option        ;InitValue=Cost;
                                                   OnValidate=BEGIN
                                                                IF NOT FieldApplyForRelevant THEN
                                                                  "Apply for" := 0;
                                                              END;

                                                   CaptionML=[ENU=Apply for;
                                                              NOR=Bruk for;
                                                              SVE=Till„mpa f”r];
                                                   OptionCaptionML=[ENU=,Cost,Revenue,Both;
                                                                    NOR=,Kostnad,Inntekt,Begge;
                                                                    SVE=,Kostnad,Int„kter,B†da];
                                                   OptionString=,Cost,Revenue,Both;
                                                   BlankZero=Yes }
    { 2000;   ;Apply for Service Budget;Boolean   ;OnValidate=BEGIN
                                                                IF "Apply for Service Budget" THEN BEGIN
                                                                  TESTFIELD("Service Type");
                                                                  TESTFIELD("Project Type", '');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Apply for Service Budget;
                                                              NOR=Bruk for Servicebudsjett;
                                                              SVE=Till„mpa f”r servicebudget] }
    { 3000;   ;Source Type Source Code;Option     ;OnValidate=BEGIN
                                                                IF "Source Type Source Code" <> "Source Type Source Code"::Fixed THEN
                                                                  "Source Code Surcharge" := '';
                                                              END;

                                                   CaptionML=[ENU=Source Type Source Code;
                                                              NOR=Kildetype, Kildekode;
                                                              SVE=Ursprungstyp, k„llkod];
                                                   OptionCaptionML=[ENU=Fixed,Original Posting;
                                                                    NOR=Fast,Opprinnelig Bokf›ring;
                                                                    SVE=Fast, ursprunglig bokf”ring];
                                                   OptionString=Fixed,Original Posting }
    { 3010;   ;Source Code Surcharge;Code20       ;TableRelation="Source Code".Code;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Source Type Source Code", "Source Type Source Code"::Fixed);
                                                              END;

                                                   CaptionML=[ENU=Source Code Surcharge;
                                                              NOR=Kildekode, tilleggsgebyr;
                                                              SVE=K„llkod, till„ggsavgift] }
    { 3020;   ;No Surcharge over InterCompany;Boolean;
                                                   CaptionML=[ENU=No Surcharge over InterCompany;
                                                              NOR=Ingen tilleggsgebyr over Konsernintern;
                                                              SVE=Ingen till„ggsavgift ”ver koncernintern] }
    { 3030;   ;Only Returns        ;Boolean       ;CaptionML=[ENU=Only Returns;
                                                              NOR=Kun Returer;
                                                              SVE=Endast returer] }
    { 3031;   ;Compress Coverage Posting;Boolean  ;InitValue=Yes;
                                                   CaptionML=[ENU=Compress Coverage Posting;
                                                              SVE=T„ckning, komprimera poster] }
  }
  KEYS
  {
    {    ;Level,Line No.                          ;Clustered=Yes }
    {    ;Level,Project Type,Cost Type,Cost Object,Wage Component,Department }
    {    ;Level,Service Type,Cost Type,Cost Object,Wage Component,Department,Cost Component }
    {    ;Level,Cost Code,Cost Type,Cost Object,Wage Component,Department }
    {    ;Level,Cost Type,Cost Object,Wage Component,Department }
    {    ;Level,Cost Component,Department          }
    {    ;Level,Trade Association,Department,Wage Component }
    {    ;Level,Job No.,Cost Type,Cost Object      }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DimValRec@1100485002 : Record 349;
      DimMgt@1100485001 : Codeunit 408;
      ElementFormat@1100485000 : Codeunit 11012022;
      Text001@1100525000 : TextConst 'ENU=Empty Cost Type is not allowed;NOR=Tom Kostnadstype er ikke Tillatt;SVE=Tom kostnadstyp „r inte till†tet';

    PROCEDURE CheckFieldsFilled@1100485002();
    BEGIN
      //Check if relevant fields are filled. Cost type can not be tested, Labor is empty.

      CASE Level OF
        10:;
        20:
          BEGIN
            TESTFIELD("Project Type");
            TESTFIELD("Cost Object");
            TESTFIELD("Wage Component");
            TESTFIELD(Department);
          END;
        30:
          BEGIN
            TESTFIELD("Service Type");
            TESTFIELD("Cost Object");
            TESTFIELD("Wage Component");
            TESTFIELD(Department);
          END;
        40:
          BEGIN
            TESTFIELD("Cost Code");
            TESTFIELD("Cost Object");
            TESTFIELD("Wage Component");
            TESTFIELD(Department);
          END;
        50:
          BEGIN
            TESTFIELD("Project Type");
            TESTFIELD("Cost Object");
            TESTFIELD("Wage Component");
          END;
        60:
          BEGIN
            TESTFIELD("Service Type");
            TESTFIELD("Cost Object");
            TESTFIELD("Wage Component");
          END;
        70:
          BEGIN
            TESTFIELD("Cost Code");
            TESTFIELD("Cost Object");
            TESTFIELD("Wage Component");
          END;
        80:
          BEGIN
           TESTFIELD("Project Type");
           TESTFIELD("Cost Object");
           TESTFIELD(Department);
         END;
        90:
          BEGIN
            TESTFIELD("Service Type");
            TESTFIELD("Cost Object");
            TESTFIELD(Department);
          END;
        100:
          BEGIN
            TESTFIELD("Cost Code");
            TESTFIELD("Cost Object");
            TESTFIELD(Department);
          END;
        110:
          BEGIN
            TESTFIELD("Project Type");
            TESTFIELD("Cost Object");
          END;
        120:
          BEGIN
            TESTFIELD("Service Type");
            TESTFIELD("Cost Object");
          END;
        130:
          BEGIN
            TESTFIELD("Cost Code");
            TESTFIELD("Cost Object");
          END;
        140:
          BEGIN
            TESTFIELD("Project Type");
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
            //TESTFIELD("Cost Type"); //No Testfield on this option field, option 0 (labor) is valid
            TESTFIELD("Wage Component");
            TESTFIELD(Department);
          END;
        150:
          BEGIN
            TESTFIELD("Service Type");
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
            //TESTFIELD("Cost Type"); //No Testfield on this option field, option 0 (labor) is valid
            TESTFIELD("Wage Component");
            TESTFIELD(Department);
          END;
        160:
          BEGIN
            TESTFIELD("Cost Code");
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
            //TESTFIELD("Cost Type"); //No Testfield on this option field, option 0 (labor) is valid
            TESTFIELD("Wage Component");
            TESTFIELD(Department);
          END;
        170:
          BEGIN
            TESTFIELD("Project Type");
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
            //TESTFIELD("Cost Type"); //No Testfield on this option field, option 0 (labor) is valid
            TESTFIELD("Wage Component");
          END;
        180:
          BEGIN
            TESTFIELD("Service Type");
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
            //TESTFIELD("Cost Type"); //No Testfield on this option field, option 0 (labor) is valid
            TESTFIELD("Wage Component");
          END;
        190:
          BEGIN
            TESTFIELD("Cost Code");
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
            //TESTFIELD("Cost Type"); //No Testfield on this option field, option 0 (labor) is valid
            TESTFIELD("Wage Component");
          END;
        200:
          BEGIN
            TESTFIELD("Project Type");
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
            //TESTFIELD("Cost Type"); //No Testfield on this option field, option 0 (labor) is valid
            TESTFIELD(Department);
          END;
        210:
          BEGIN
            TESTFIELD("Service Type");
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
            //TESTFIELD("Cost Type"); //No Testfield on this option field, option 0 (labor) is valid
            TESTFIELD(Department);
          END;
        220:
          BEGIN
            TESTFIELD("Cost Code");
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
            //TESTFIELD("Cost Type"); //No Testfield on this option field, option 0 (labor) is valid
            TESTFIELD(Department);
          END;
        230:
          BEGIN
            TESTFIELD("Project Type");
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
            //TESTFIELD("Cost Type"); //No Testfield on this option field, option 0 (labor) is valid
          END;
        // 30166.sn
        233:
          BEGIN
            TESTFIELD("Job No.");
            TESTFIELD("Cost Object");
          END;
        236:
          BEGIN
            TESTFIELD("Job No.");
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
          END;
        // 30166.en
        240:
          BEGIN
            TESTFIELD("Service Type");
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
            //TESTFIELD("Cost Type"); //No Testfield on this option field, option 0 (labor) is valid
          END;
        245:
          BEGIN
            TESTFIELD("Service Type");
            TESTFIELD("Cost Component");
          END;
        250:
          BEGIN
            TESTFIELD("Cost Code");
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
            //TESTFIELD("Cost Type"); //No Testfield on this option field, option 0 (labor) is valid
          END;
        260:
          BEGIN
            TESTFIELD("Cost Object");
            TESTFIELD("Wage Component");
            TESTFIELD(Department);
          END;
        270:
          BEGIN
            TESTFIELD("Cost Object");
            TESTFIELD("Wage Component");
          END;
        280:
          BEGIN
            TESTFIELD("Cost Object");
            TESTFIELD(Department);
          END;
        290:
          TESTFIELD("Cost Object");
        300:
          BEGIN
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
            //TESTFIELD("Cost Type"); //No Testfield on this option field, option 0 (labor) is valid
            TESTFIELD("Wage Component");
            TESTFIELD(Department);
          END;
        310:
          BEGIN
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
            //TESTFIELD("Cost Type"); //No Testfield on this option field, option 0 (labor) is valid
            TESTFIELD("Wage Component");
          END;
        320:
          BEGIN
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
            //TESTFIELD("Cost Type"); //No Testfield on this option field, option 0 (labor) is valid
            TESTFIELD(Department);
          END;
        330:
          BEGIN
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
            //TESTFIELD("Cost Type"); //No Testfield on this option field, option 0 (labor) is valid
          END;
        340:
          BEGIN
            TESTFIELD("Trade Association");
            TESTFIELD(Department);
          END;
        350:
          TESTFIELD("Trade Association");
        360:
          BEGIN
            TESTFIELD("Cost Component");
            TESTFIELD(Department);
          END;
        370:
          TESTFIELD("Cost Component");
        380:
          BEGIN
            TESTFIELD("Wage Component");
            TESTFIELD(Department);
          END;
        390:
          BEGIN
            TESTFIELD("Wage Component");
          END;
        400:
          BEGIN
            TESTFIELD(Department);
          END;
        410:
          BEGIN
            IF "Cost Type" > "Cost Type"::Revenues THEN
              ERROR(Text001);
            //TESTFIELD("Cost Type"); //No Testfield on this option field, option 0 (labor) is valid
          END;
        420:      // CALL 31147 sn
          BEGIN
            TESTFIELD("Trade Association");
            TESTFIELD("Wage Component");
          END;   // CALL 31147 en  And 10 added to the following options
        430:
          BEGIN
            TESTFIELD("Trade Association");
            TESTFIELD(Department);
          END;
        440:
          TESTFIELD("Trade Association");
        450:
          BEGIN
            TESTFIELD("Cost Component");
            TESTFIELD(Department);
          END;
        460:
          TESTFIELD("Cost Component");
      END;
    END;

    PROCEDURE AmountAllowed@1100485003() Allowed : Boolean;
    BEGIN
      CASE "Cost Type" OF
        "Cost Type"::" ":
          BEGIN
            DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE,'');
            Allowed := (DimValRec."Cost Type" = DimValRec."Cost Type"::Labor);
          END;
        "Cost Type"::Labor:
          Allowed := TRUE;
        ELSE
          Allowed := FALSE;
      END;
    END;

    PROCEDURE CheckEditable@1100485000(lvCurrFieldNo@1100485000 : Integer) : Boolean;
    BEGIN
      CASE Level OF
        10:
          EXIT(TRUE);
        20:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Project Type"), FIELDNO("Cost Object"),
            FIELDNO("Wage Component"), FIELDNO(Department)]);
        30:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Service Type"), FIELDNO("Cost Object"),
            FIELDNO("Wage Component"), FIELDNO(Department)]);
        40:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Code"), FIELDNO("Cost Object"),
            FIELDNO("Wage Component"), FIELDNO(Department)]);
        50:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Project Type"), FIELDNO("Cost Object"),
            FIELDNO("Wage Component")]);
        60:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Service Type"), FIELDNO("Cost Object"),
            FIELDNO("Wage Component")]);
        70:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Code"), FIELDNO("Cost Object"),
            FIELDNO("Wage Component")]);
        80:
          EXIT(lvCurrFieldNo IN [
           FIELDNO("Project Type"), FIELDNO("Cost Object"),
           FIELDNO(Department)]);
        90:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Service Type"), FIELDNO("Cost Object"),
            FIELDNO(Department)]);
        100:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Code"), FIELDNO("Cost Object"),
            FIELDNO(Department)]);
        110:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Project Type"), FIELDNO("Cost Object")]);
        120:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Service Type"), FIELDNO("Cost Object")]);
        130:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Code"), FIELDNO("Cost Object")]);
        140:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Project Type"), FIELDNO("Cost Type"),
            FIELDNO("Wage Component"), FIELDNO(Department)]);
        150:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Service Type"), FIELDNO("Cost Type"),
            FIELDNO("Wage Component"), FIELDNO(Department)]);
        160:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Code"), FIELDNO("Cost Type"),
            FIELDNO("Wage Component"), FIELDNO(Department)]);
        170:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Project Type"), FIELDNO("Cost Type"),
            FIELDNO("Wage Component")]);
        180:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Service Type"), FIELDNO("Cost Type"),
            FIELDNO("Wage Component")]);
        190:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Code"), FIELDNO("Cost Type"),
            FIELDNO("Wage Component")]);
        200:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Project Type"), FIELDNO("Cost Type"),
            FIELDNO(Department)]);
        210:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Service Type"), FIELDNO("Cost Type"),
            FIELDNO(Department)]);
        220:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Code"), FIELDNO("Cost Type"),
            FIELDNO(Department)]);
        230:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Project Type"), FIELDNO("Cost Type")]);
        // 30166.sn
        233:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Job No."), FIELDNO("Cost Object")]);
        236:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Job No."), FIELDNO("Cost Type")]);
        // 30166.en
        240:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Service Type"), FIELDNO("Cost Type")]);
        245:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Service Type"), FIELDNO("Cost Component")]);
        250:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Code"), FIELDNO("Cost Type")]);
        260:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Object"), FIELDNO("Wage Component"),
            FIELDNO(Department)]);
        270:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Object"), FIELDNO("Wage Component")]);
        280:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Object"), FIELDNO(Department)]);
        290:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Object")]);
        300:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Type"), FIELDNO("Wage Component"),
            FIELDNO(Department)]);
        310:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Type"), FIELDNO("Wage Component")]);
        320:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Type"), FIELDNO(Department)]);
        330:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Type")]);
        340:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Trade Association"), FIELDNO(Department)]);
        350:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Trade Association")]);
        360:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Component"), FIELDNO(Department)]);
        370:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Component")]);
        380:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Type"), FIELDNO("Wage Component"),
            FIELDNO(Department)]);
        390:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Type"), FIELDNO("Wage Component")]);
        400:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Type"), FIELDNO(Department)]);
        410:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Type")]);
        420:   // CALL 31147 sn
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Trade Association"), FIELDNO("Wage Component")]);
             // CALL 31147 en  And 10 added to the following options
        430:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Trade Association"), FIELDNO(Department)]);
        440:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Trade Association")]);
        450:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Component"), FIELDNO(Department)]);
        460:
          EXIT(lvCurrFieldNo IN [
            FIELDNO("Cost Component")]);
      END;
    END;

    PROCEDURE GetSurcharges@1100485032(SurchargeType@1100485010 : 'Project,Service,Indirect';IType@1100485000 : Code[20];JobNo@1100528800 : Code[20];PostCost@1100525000 : Boolean;CostType@1100485003 : Integer;CostObject@1100485004 : Code[20];WageComponent@1100485005 : Code[20];DepartmentCode@1100485006 : Code[20];TradeAssociation@1100485007 : Code[20];CostComponent@1100485008 : Code[20];PostingDate@1100485011 : Date;VAR vSurchargeRec@1100485009 : Record 11020208) lSurchargeFound : Boolean;
    BEGIN
      EXIT(GetSurcharges1(SurchargeType, IType, JobNo, PostCost, CostType, CostObject, WageComponent, DepartmentCode, TradeAssociation,
                    CostComponent, PostingDate, vSurchargeRec, FALSE, FALSE));
    END;

    PROCEDURE GetSurcharges1@1100528300(SurchargeType@1100485010 : 'Project,Service,Indirect';IType@1100485000 : Code[20];JobNo@1100528800 : Code[20];PostCost@1100525000 : Boolean;CostType@1100485003 : Integer;CostObject@1100485004 : Code[20];WageComponent@1100485005 : Code[20];DepartmentCode@1100485006 : Code[20];TradeAssociation@1100485007 : Code[20];CostComponent@1100485008 : Code[20];PostingDate@1100485011 : Date;VAR vSurchargeRec@1100485009 : Record 11020208;IsOnlyReturns@1100528300 : Boolean;IncludePlantSourceTypeDep@1100529600 : Boolean) lSurchargeFound : Boolean;
    VAR
      lSurchargeReadOrderLine@1100485022 : Record 11020207;
    BEGIN
      lSurchargeFound := FALSE;

      vSurchargeRec.CHANGECOMPANY(COMPANYNAME);  //CALL C015278

      WITH vSurchargeRec DO BEGIN
        lSurchargeReadOrderLine.SETCURRENTKEY("Surcharge Type", "Read Order");
        lSurchargeReadOrderLine.SETRANGE("Surcharge Type", SurchargeType);
        lSurchargeReadOrderLine.SETFILTER("Read Order",'1..');
        IF lSurchargeReadOrderLine.FINDSET THEN
          REPEAT
            RESET;
            IF PostCost THEN
              vSurchargeRec.SETFILTER("Apply for", '%1|%2|%3',
                0,vSurchargeRec."Apply for"::Cost,vSurchargeRec."Apply for"::Both)
            ELSE
              vSurchargeRec.SETFILTER("Apply for", '%1|%2|%3',
                0,vSurchargeRec."Apply for"::Revenue,vSurchargeRec."Apply for"::Both);

            IF (NOT IsOnlyReturns) THEN
              vSurchargeRec.SETRANGE("Only Returns", FALSE);

            IF NOT IncludePlantSourceTypeDep THEN
              SETFILTER("Source Type Department", '<>%1', "Source Type Department"::Plant);

            CASE lSurchargeReadOrderLine.Level OF
              10:
                BEGIN
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  IF FINDSET THEN
                    REPEAT
                      IF TestExceptionalSurcharge(
                        SurchargeType, IType, CostType, CostObject, WageComponent,
                        DepartmentCode, TradeAssociation, CostComponent, JobNo, vSurchargeRec) THEN
                      BEGIN
                        lSurchargeFound := TRUE;
                        IF (Percentage <> 0) OR (Amount <> 0) THEN
                          MARK(TRUE);
                      END;
                    UNTIL NEXT = 0;
                END;
              20:
                BEGIN
                  SETCURRENTKEY(Level, "Project Type", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Project Type", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              30:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              40:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Code", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Code", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              50:
                BEGIN
                  SETCURRENTKEY(Level, "Project Type", "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Project Type", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              60:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type", "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              70:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Code", "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Code", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              80:
                BEGIN
                  SETCURRENTKEY(Level, "Project Type", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Project Type", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              90:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              100:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Code", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Code", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              110:
                BEGIN
                  SETCURRENTKEY(Level, "Project Type", "Cost Type", "Cost Object");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Project Type", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              120:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type", "Cost Type", "Cost Object");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              130:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Code", "Cost Type", "Cost Object");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Code", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              140:
                BEGIN
                  SETCURRENTKEY(Level, "Project Type", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Project Type", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              150:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              160:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Code", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Code", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              170:
                BEGIN
                  SETCURRENTKEY(Level, "Project Type", "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Project Type", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              180:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type", "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              190:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Code", "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Code", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              200:
                BEGIN
                  SETCURRENTKEY(Level, "Project Type", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Project Type", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              210:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              220:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Code", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Code", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              230:
                BEGIN
                  SETCURRENTKEY(Level, "Project Type", "Cost Type");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Project Type", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              // 30166.sn
              233:
                BEGIN
                  SETCURRENTKEY(Level, "Job No.","Cost Type", "Cost Object");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Job No.", JobNo);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              236:
                BEGIN
                  SETCURRENTKEY(Level, "Job No.","Cost Type", "Cost Object");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Job No.", JobNo);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              // 30166.en
              240:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type", "Cost Type");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              245:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Component", CostComponent);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              250:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Code", "Cost Type");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Code", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              260:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              270:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              280:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              290:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              300:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              310:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              320:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              330:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              340:
                BEGIN
                  SETCURRENTKEY(Level, "Trade Association", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Trade Association", TradeAssociation);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              350:
                BEGIN
                  SETCURRENTKEY(Level, "Trade Association");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Trade Association", TradeAssociation);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              360:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Component", CostComponent);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              370:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Component", CostComponent);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              380:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              390:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              400:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              410:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;

             // CALL 31147 sn
              420:
                BEGIN
                  SETCURRENTKEY(Level, "Trade Association", Department, "Wage Component");   //key changed in table
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Trade Association", TradeAssociation);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
             // CALL 31147 en  And 10 added to the following options
              430:
                BEGIN
                  SETCURRENTKEY(Level, "Trade Association", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Trade Association", TradeAssociation);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              440:
                BEGIN
                  SETCURRENTKEY(Level, "Trade Association");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Trade Association", TradeAssociation);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              450:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Component", CostComponent);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              460:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Component", CostComponent);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
            END;
          UNTIL (lSurchargeReadOrderLine.NEXT = 0) OR lSurchargeFound;

        //Post only for Percentage or Amount <> 0
        IF lSurchargeFound THEN BEGIN
          IF Level <> 10 THEN
            REPEAT
              IF (Percentage <> 0) OR (Amount <> 0) THEN BEGIN
                IF "Source Type Cost Object" = "Source Type Cost Object"::Fixed THEN
                  TESTFIELD("Cost Object Surcharge");
                MARK(TRUE);
              END;
            UNTIL NEXT = 0;

          MARKEDONLY(TRUE);
          lSurchargeFound := FINDSET;
          IF "Source Type Cost Object" = "Source Type Cost Object"::Fixed THEN
            TESTFIELD("Cost Object Surcharge");
        END;
      END;
    END;

    LOCAL PROCEDURE TestExceptionalSurcharge@1100485035(SurchargeType@1100485008 : 'Project,Service,Indirect';IType@1100485007 : Code[20];CostType@1100485006 : Integer;CostObject@1100485005 : Code[20];WageComponent@1100485004 : Code[20];DepartmentCode@1100485003 : Code[20];TradeAssociation@1100485002 : Code[20];CostComponent@1100485001 : Code[20];JobNo@1100528400 : Code[20];lSurchargeRec@1100485000 : Record 11020208) : Boolean;
    BEGIN
      WITH lSurchargeRec DO BEGIN
        CASE SurchargeType OF
          SurchargeType::Project:
            IF (("Project Type" <> '') AND ("Project Type" <> IType)) OR
               (("Project Type" = '') AND (("Service Type" <> '') OR ("Cost Code" <> '')))
            THEN
              EXIT(FALSE);
          SurchargeType::Service:
            IF (("Service Type" <> '') AND ("Service Type" <> IType)) OR
               (("Service Type" = '') AND (("Project Type" <> '') OR ("Cost Code" <> '')))
            THEN
              EXIT(FALSE);
          SurchargeType::Indirect:
            IF (("Cost Code" <> '') AND("Cost Code" <> IType)) OR
               (("Cost Code" = '') AND (("Project Type" <> '') OR ("Service Type" <> '')))
            THEN
              EXIT(FALSE);
        END;

        IF ("Cost Type" <> "Cost Type"::" ") AND ("Cost Type" <> CostType) THEN
          EXIT(FALSE);

        IF ("Cost Object" <> '') AND ("Cost Object" <> CostObject) THEN
          EXIT(FALSE);

        IF ("Wage Component" <> '') AND ("Wage Component" <> WageComponent) THEN
          EXIT(FALSE);

        IF (Department <> '') AND (Department <> DepartmentCode) THEN
          EXIT(FALSE);

        IF ("Trade Association" <> '') AND ("Trade Association" <> TradeAssociation) THEN
          EXIT(FALSE);

        IF ("Cost Component" <> '') AND ("Cost Component" <> CostComponent) THEN
          EXIT(FALSE);

        IF ("Job No." <> '') AND ("Job No." <> JobNo) THEN
          EXIT(FALSE);

      END;
      EXIT(TRUE);
    END;

    PROCEDURE GetSurchargeDimVal@1100525000(OrigDimVal@1100525000 : Record 349;VAR SurchDimVal@1100525001 : Record 349);
    BEGIN
      IF "Source Type Cost Object" = "Source Type Cost Object"::Fixed THEN BEGIN
        TESTFIELD("Cost Object Surcharge");
        DimMgt.SetCompany(CURRENTCOMPANY);
        IF CURRENTCOMPANY <> SurchDimVal.CURRENTCOMPANY THEN
          SurchDimVal.CHANGECOMPANY(CURRENTCOMPANY);
        DimMgt.GetDimValueRec(2, "Cost Object Surcharge", SurchDimVal, TRUE,'');
      END ELSE
        SurchDimVal := OrigDimVal;
    END;

    PROCEDURE GetSurchargesIC@1100525001(SurchargeType@1100485010 : 'Project,Service,Indirect,InterCompany';IType@1100485000 : Code[20];JobNo@1100528800 : Code[20];PostCost@1100525002 : Boolean;CostType@1100485003 : Integer;CostObject@1100485004 : Code[20];WageComponent@1100485005 : Code[20];DepartmentCode@1100485006 : Code[20];TradeAssociation@1100485007 : Code[20];CostComponent@1100485008 : Code[20];PostingDate@1100485011 : Date;VAR vSurchargeRec@1100485009 : Record 11020208;iCompany@1100525000 : Text[50];lvSourceTypeDepartment@1100525001 : 'Fixed,EmplOrFixed,EmplJobOrFixed,All') lSurchargeFound : Boolean;
    BEGIN
      EXIT(
        GetSurchargesIC1(SurchargeType, IType, JobNo, PostCost, CostType,
        CostObject, WageComponent, DepartmentCode, TradeAssociation,
        CostComponent, PostingDate, vSurchargeRec, iCompany, lvSourceTypeDepartment, FALSE));
    END;

    PROCEDURE GetSurchargesIC1@1100528301(SurchargeType@1100485010 : 'Project,Service,Indirect,InterCompany';IType@1100485000 : Code[20];JobNo@1100528800 : Code[20];PostCost@1100525002 : Boolean;CostType@1100485003 : Integer;CostObject@1100485004 : Code[20];WageComponent@1100485005 : Code[20];DepartmentCode@1100485006 : Code[20];TradeAssociation@1100485007 : Code[20];CostComponent@1100485008 : Code[20];PostingDate@1100485011 : Date;VAR vSurchargeRec@1100485009 : Record 11020208;iCompany@1100525000 : Text[50];lvSourceTypeDepartment@1100525001 : 'Fixed,EmplOrFixed,EmplJobOrFixed,All';IsOnlyReturns@1100528300 : Boolean) lSurchargeFound : Boolean;
    VAR
      lSurchargeReadOrderLine@1100485022 : Record 11020207;
    BEGIN
      //Determine surcharge in supplying company at IC mutation (Hour, inventory or plant order)

      lSurchargeFound := FALSE;

      vSurchargeRec.CHANGECOMPANY(iCompany);
      lSurchargeReadOrderLine.CHANGECOMPANY(iCompany);

      WITH vSurchargeRec DO BEGIN
        lSurchargeReadOrderLine.SETCURRENTKEY("Surcharge Type", "Read Order");
        lSurchargeReadOrderLine.SETRANGE("Surcharge Type", SurchargeType);
        lSurchargeReadOrderLine.SETFILTER("Read Order",'1..');
        IF lSurchargeReadOrderLine.FINDSET THEN
          REPEAT
            RESET;
            IF PostCost THEN
              SETFILTER("Apply for", '%1|%2|%3',
                0,vSurchargeRec."Apply for"::Cost,vSurchargeRec."Apply for"::Both)
            ELSE
              SETFILTER("Apply for", '%1|%2|%3',
                0,vSurchargeRec."Apply for"::Revenue,vSurchargeRec."Apply for"::Both);

            IF (NOT IsOnlyReturns) THEN
              SETRANGE("Only Returns", FALSE);

            CASE lSurchargeReadOrderLine.Level OF
              10:
                BEGIN
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  IF FINDSET THEN
                    REPEAT
                      IF TestExceptionalSurcharge(
                        SurchargeType, IType, CostType, CostObject, WageComponent,
                        DepartmentCode, TradeAssociation, CostComponent, JobNo, vSurchargeRec) THEN
                      BEGIN
                        lSurchargeFound := TRUE;
                        IF (Percentage <> 0) OR (Amount <> 0) THEN
                          MARK(TRUE);
                      END;
                    UNTIL NEXT = 0;
                END;
              20:
                BEGIN
                  SETCURRENTKEY(Level, "Project Type", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Project Type", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              30:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              40:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Code", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Code", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              50:
                BEGIN
                  SETCURRENTKEY(Level, "Project Type", "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Project Type", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Wage Component", WageComponent);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              60:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type", "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Wage Component", WageComponent);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              70:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Code", "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Code", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Wage Component", WageComponent);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              80:
                BEGIN
                  SETCURRENTKEY(Level, "Project Type", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Project Type", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              90:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              100:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Code", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Code", IType);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              110:
                BEGIN
                  SETCURRENTKEY(Level, "Project Type", "Cost Type", "Cost Object");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Project Type", IType);
                  SETRANGE("Cost Object", CostObject);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              120:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type", "Cost Type", "Cost Object");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Object", CostObject);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              130:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Code", "Cost Type", "Cost Object");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Code", IType);
                  SETRANGE("Cost Object", CostObject);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              140:
                BEGIN
                  SETCURRENTKEY(Level, "Project Type", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Project Type", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              150:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              160:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Code", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Code", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              170:
                BEGIN
                  SETCURRENTKEY(Level, "Project Type", "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Project Type", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              180:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type", "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              190:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Code", "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Code", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              200:
                BEGIN
                  SETCURRENTKEY(Level, "Project Type", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Project Type", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              210:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              220:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Code", "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Code", IType);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              230:
                BEGIN
                  SETCURRENTKEY(Level, "Project Type", "Cost Type");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Project Type", IType);
                  SETRANGE("Cost Type", CostType);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              // 30166.sn
              233:
                BEGIN
                  SETCURRENTKEY(Level, "Job No.","Cost Type", "Cost Object");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Job No.", JobNo);
                  SETRANGE("Cost Object", CostObject);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              236:
                BEGIN
                  SETCURRENTKEY(Level, "Job No.","Cost Type", "Cost Object");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Job No.", JobNo);
                  SETRANGE("Cost Type", CostType);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              // 30166.en
              240:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type", "Cost Type");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Type", CostType);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              245:
                BEGIN
                  SETCURRENTKEY(Level, "Service Type");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Service Type", IType);
                  SETRANGE("Cost Component", CostComponent);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              250:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Code", "Cost Type");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Code", IType);
                  SETRANGE("Cost Type", CostType);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              260:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              270:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE("Wage Component", WageComponent);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              280:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Object", CostObject);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              290:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Object", CostObject);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              300:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              310:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              320:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              330:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Type", CostType);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              340:
                BEGIN
                  SETCURRENTKEY(Level, "Trade Association", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Trade Association", TradeAssociation);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              350:
                BEGIN
                  SETCURRENTKEY(Level, "Trade Association");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Trade Association", TradeAssociation);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              360:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Component", CostComponent);
                  SETRANGE(Department, DepartmentCode);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              370:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Component", CostComponent);
                  SetSourceTypeDepartmentFilter(vSurchargeRec, lvSourceTypeDepartment);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              380:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              390:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              400:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type", "Cost Object", "Wage Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              410:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Type");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Type", CostType);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              420:  // CALL 31147 en
                BEGIN
                  SETCURRENTKEY(Level, "Trade Association", Department, "Wage Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Trade Association", TradeAssociation);
                  SETRANGE("Wage Component", WageComponent);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
             // CALL 31147 en  And 10 added to the following options
              430:
                BEGIN
                  SETCURRENTKEY(Level, "Trade Association", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Trade Association", TradeAssociation);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              440:
                BEGIN
                  SETCURRENTKEY(Level, "Trade Association");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Trade Association", TradeAssociation);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              450:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Component", Department);
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Component", CostComponent);
                  SETRANGE(Department, DepartmentCode);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;
              460:
                BEGIN
                  SETCURRENTKEY(Level, "Cost Component");
                  SETRANGE(Level, lSurchargeReadOrderLine.Level);
                  SETRANGE("Cost Component", CostComponent);
                  SETRANGE("Starting Date", 0D, PostingDate);
                  SETFILTER("Ending Date",'%1|>=%2',0D, PostingDate);
                  IF (NOT IsOnlyReturns) THEN
                    SETRANGE("Only Returns", FALSE);
                  lSurchargeFound := FINDSET;
                END;

            END;
          UNTIL (lSurchargeReadOrderLine.NEXT = 0) OR lSurchargeFound;

        //Post only for Percentage or Amount <> 0
        IF lSurchargeFound THEN BEGIN
          IF Level <> 10 THEN
            REPEAT
              IF (Percentage <> 0) OR (Amount <> 0) THEN BEGIN
                IF "Source Type Cost Object" = "Source Type Cost Object"::Fixed THEN
                  TESTFIELD("Cost Object Surcharge");
                MARK(TRUE);
              END;
            UNTIL NEXT = 0;

          MARKEDONLY(TRUE);
          lSurchargeFound := FINDSET;
          IF "Source Type Cost Object" = "Source Type Cost Object"::Fixed THEN
            TESTFIELD("Cost Object Surcharge");
        END;
      END;
    END;

    PROCEDURE CheckServiceOrderIndication@1100525002(iServOrder@1100525000 : Code[20];iCostCompOrig@1100525002 : Code[20];VAR ioCostCompDest@1100525004 : Code[20]);
    VAR
      ServOrderRec@1100525001 : Record 11012823;
      OrderIndicationRec@1100525003 : Record 11012837;
    BEGIN
      //db, 05-03-10
      //this fucntions checks if proposal for cost component on surcharge line should be the same as original entry,
      //if cost component of dimension is to be ignored by default on order kind/type from service order.

      IF iServOrder = '' THEN EXIT;
      IF NOT ServOrderRec.GET(iServOrder) THEN EXIT;
      IF ioCostCompDest = '' THEN EXIT;

      IF OrderIndicationRec.GET(OrderIndicationRec.Indication::Kind, ServOrderRec."Order Kind") THEN
        IF iCostCompOrig = OrderIndicationRec."Cost Component" THEN
          ioCostCompDest := '';

      IF OrderIndicationRec.GET(OrderIndicationRec.Indication::Type, ServOrderRec."Order Type") THEN
        IF iCostCompOrig = OrderIndicationRec."Cost Component" THEN
          ioCostCompDest := '';
    END;

    PROCEDURE FieldApplyForRelevant@1100525003() : Boolean;
    BEGIN
      CASE Level OF
        10,245,340,350,360,370,380,390,400,420,430,440,450,460:      // CALL 31147 changed
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckCostTypePlant@1100529600();
    BEGIN
      IF "Source Type Department" <> "Source Type Department"::Plant THEN
        EXIT;
      IF "Cost Type" = "Cost Type"::" " THEN BEGIN
        DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, '');
        IF CurrFieldNo = FIELDNO("Source Type Department") THEN
          DimValRec.TESTFIELD("Cost Type", DimValRec."Cost Type"::Plant)
        ELSE
          IF DimValRec."Cost Type" <> DimValRec."Cost Type"::Plant THEN
            FIELDERROR("Source Type Department");
      END ELSE
        IF CurrFieldNo = FIELDNO("Source Type Department") THEN
          TESTFIELD("Cost Type", "Cost Type"::Plant)
        ELSE
          IF "Cost Type" <> "Cost Type"::Plant THEN
            FIELDERROR("Source Type Department");
    END;

    LOCAL PROCEDURE SetSourceTypeDepartmentFilter@1100529601(VAR OverheadSurchargeLoc@1100529600 : Record 11020208;SourceTypeDepartmentLoc@1100529601 : 'Fixed,EmplOrFixed,EmplJobOrFixed,All');
    BEGIN
      CASE SourceTypeDepartmentLoc OF
        SourceTypeDepartmentLoc::Fixed:
          OverheadSurchargeLoc.SETRANGE("Source Type Department", "Source Type Department"::Fixed);
        SourceTypeDepartmentLoc::EmplOrFixed:
          OverheadSurchargeLoc.SETFILTER("Source Type Department", '%1|%2', "Source Type Department"::Employee, "Source Type Department"::Fixed);
        SourceTypeDepartmentLoc::EmplJobOrFixed:
          OverheadSurchargeLoc.SETRANGE("Source Type Department", "Source Type Department"::Employee, "Source Type Department"::Fixed);
      END;
    END;

    BEGIN
    END.
  }
}

