OBJECT Codeunit 926 Assembly Line-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 337=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CreateReservEntry@1013 : Codeunit 99000830;
      ReservMgt@1017 : Codeunit 99000845;
      ReservEngineMgt@1014 : Codeunit 99000831;
      SetFromType@1010 : Integer;
      SetFromSubtype@1009 : Integer;
      SetFromID@1008 : Code[20];
      SetFromBatchName@1007 : Code[10];
      SetFromProdOrderLine@1006 : Integer;
      SetFromRefNo@1005 : Integer;
      SetFromVariantCode@1004 : Code[10];
      SetFromLocationCode@1003 : Code[10];
      SetFromSerialNo@1002 : Code[50];
      SetFromLotNo@1001 : Code[50];
      SetFromQtyPerUOM@1000 : Decimal;
      Text000@1012 : TextConst 'ENU=Reserved quantity cannot be greater than %1.;NOR=Reservert antall kan ikke v‘re st›rre enn %1.;SVE=Reserverat antal kan inte vara st”rre „n %1.';
      Text001@1011 : TextConst 'ENU=Codeunit is not initialized correctly.;NOR=Codeunit er ikke riktig initialisert.;SVE=Kodmodul har inte initierats p† ett korrekt s„tt.';
      DeleteItemTracking@1016 : Boolean;
      Text002@1019 : TextConst '@@@=starts with "Due Date";ENU=must be filled in when a quantity is reserved;NOR=m† fylles ut n†r et antall reserveres;SVE=ska fyllas i n„r ett antal „r reserverade';
      Text003@1018 : TextConst '@@@=starts with some field name;ENU=must not be changed when a quantity is reserved;NOR=skal ikke endres n†r et antall reserveres;SVE=f†r inte „ndras n„r ett antal „r reserverade';

    [External]
    PROCEDURE CreateReservation@1(AssemblyLine@1000 : Record 901;Description@1001 : Text[100];ExpectedReceiptDate@1002 : Date;Quantity@1006 : Decimal;QuantityBase@1003 : Decimal;ForSerialNo@1004 : Code[50];ForLotNo@1005 : Code[50]);
    VAR
      ShipmentDate@1007 : Date;
    BEGIN
      IF SetFromType = 0 THEN
        ERROR(Text001);

      AssemblyLine.TESTFIELD(Type,AssemblyLine.Type::Item);
      AssemblyLine.TESTFIELD("No.");
      AssemblyLine.TESTFIELD("Due Date");

      AssemblyLine.CALCFIELDS("Reserved Qty. (Base)");
      IF ABS(AssemblyLine."Remaining Quantity (Base)") < ABS(AssemblyLine."Reserved Qty. (Base)") + QuantityBase THEN
        ERROR(
          Text000,
          ABS(AssemblyLine."Remaining Quantity (Base)") - ABS(AssemblyLine."Reserved Qty. (Base)"));

      AssemblyLine.TESTFIELD("Variant Code",SetFromVariantCode);
      AssemblyLine.TESTFIELD("Location Code",SetFromLocationCode);

      IF QuantityBase * SignFactor(AssemblyLine) < 0 THEN
        ShipmentDate := AssemblyLine."Due Date"
      ELSE BEGIN
        ShipmentDate := ExpectedReceiptDate;
        ExpectedReceiptDate := AssemblyLine."Due Date";
      END;

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Assembly Line",AssemblyLine."Document Type",
        AssemblyLine."Document No.",'',0,AssemblyLine."Line No.",AssemblyLine."Qty. per Unit of Measure",
        Quantity,QuantityBase,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        AssemblyLine."No.",AssemblyLine."Variant Code",AssemblyLine."Location Code",
        Description,ExpectedReceiptDate,ShipmentDate);

      SetFromType := 0;
    END;

    LOCAL PROCEDURE CreateBindingReservation@18(AssemblyLine@1000 : Record 901;Description@1001 : Text[100];ExpectedReceiptDate@1002 : Date;Quantity@1006 : Decimal;QuantityBase@1003 : Decimal);
    BEGIN
      CreateReservation(AssemblyLine,Description,ExpectedReceiptDate,Quantity,QuantityBase,'','');
    END;

    [External]
    PROCEDURE CreateReservationSetFrom@9(TrackingSpecificationFrom@1000 : Record 336);
    BEGIN
      WITH TrackingSpecificationFrom DO BEGIN
        SetFromType := "Source Type";
        SetFromSubtype := "Source Subtype";
        SetFromID := "Source ID";
        SetFromBatchName := "Source Batch Name";
        SetFromProdOrderLine := "Source Prod. Order Line";
        SetFromRefNo := "Source Ref. No.";
        SetFromVariantCode := "Variant Code";
        SetFromLocationCode := "Location Code";
        SetFromSerialNo := "Serial No.";
        SetFromLotNo := "Lot No.";
        SetFromQtyPerUOM := "Qty. per Unit of Measure";
      END;
    END;

    LOCAL PROCEDURE SignFactor@21(AssemblyLine@1000 : Record 901) : Integer;
    BEGIN
      IF AssemblyLine."Document Type" IN [2,3,5] THEN
        ERROR(Text001);

      EXIT(-1);
    END;

    [External]
    PROCEDURE SetBinding@15(Binding@1000 : ' ,Order-to-Order');
    BEGIN
      CreateReservEntry.SetBinding(Binding);
    END;

    [External]
    PROCEDURE FilterReservFor@12(VAR FilterReservEntry@1000 : Record 337;AssemblyLine@1001 : Record 901);
    BEGIN
      FilterReservEntry.SETRANGE("Source Type",DATABASE::"Assembly Line");
      FilterReservEntry.SETRANGE("Source Subtype",AssemblyLine."Document Type");
      FilterReservEntry.SETRANGE("Source ID",AssemblyLine."Document No.");
      FilterReservEntry.SETRANGE("Source Batch Name",'');
      FilterReservEntry.SETRANGE("Source Prod. Order Line",0);
      FilterReservEntry.SETRANGE("Source Ref. No.",AssemblyLine."Line No.");
    END;

    [External]
    PROCEDURE FindReservEntry@4(AssemblyLine@1000 : Record 901;VAR ReservEntry@1001 : Record 337) : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,AssemblyLine);
      EXIT(ReservEntry.FINDLAST);
    END;

    LOCAL PROCEDURE AssignForPlanning@7(VAR AssemblyLine@1000 : Record 901);
    VAR
      PlanningAssignment@1001 : Record 99000850;
    BEGIN
      WITH AssemblyLine DO BEGIN
        IF "Document Type" <> "Document Type"::Order THEN
          EXIT;

        IF Type <> Type::Item THEN
          EXIT;

        IF "No." <> '' THEN
          PlanningAssignment.ChkAssignOne("No.","Variant Code","Location Code",WORKDATE);
      END;
    END;

    [External]
    PROCEDURE ReservEntryExist@16(AssemblyLine@1000 : Record 901) : Boolean;
    VAR
      ReservEntry@1002 : Record 337;
      ReservEngineMgt@1001 : Codeunit 99000831;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,AssemblyLine);
      EXIT(NOT ReservEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE DeleteLine@3(VAR AssemblyLine@1000 : Record 901);
    BEGIN
      WITH AssemblyLine DO BEGIN
        ReservMgt.SetAssemblyLine(AssemblyLine);
        IF DeleteItemTracking THEN
          ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
        ReservMgt.DeleteReservEntries(TRUE,0);
        ReservMgt.ClearActionMessageReferences;
        CALCFIELDS("Reserved Qty. (Base)");
        AssignForPlanning(AssemblyLine);
      END;
    END;

    [External]
    PROCEDURE SetDeleteItemTracking@13(AllowDirectDeletion@1000 : Boolean);
    BEGIN
      DeleteItemTracking := AllowDirectDeletion;
    END;

    [External]
    PROCEDURE VerifyChange@59(VAR NewAssemblyLine@1000 : Record 901;VAR OldAssemblyLine@1001 : Record 901);
    VAR
      AssemblyLine@1005 : Record 901;
      ReservEntry@1002 : Record 337;
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
    BEGIN
      IF (NewAssemblyLine.Type <> NewAssemblyLine.Type::Item) AND (OldAssemblyLine.Type <> OldAssemblyLine.Type::Item) THEN
        EXIT;

      IF NewAssemblyLine."Line No." = 0 THEN
        IF NOT AssemblyLine.GET(NewAssemblyLine."Document Type",NewAssemblyLine."Document No.",NewAssemblyLine."Line No.") THEN
          EXIT;

      NewAssemblyLine.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewAssemblyLine."Reserved Qty. (Base)" <> 0;

      IF NewAssemblyLine."Due Date" = 0D THEN BEGIN
        IF ShowError THEN
          NewAssemblyLine.FIELDERROR("Due Date",Text002);
        HasError := TRUE;
      END;

      IF NewAssemblyLine.Type <> OldAssemblyLine.Type THEN BEGIN
        IF ShowError THEN
          NewAssemblyLine.FIELDERROR(Type,Text003);
        HasError := TRUE;
      END;

      IF NewAssemblyLine."No." <> OldAssemblyLine."No." THEN BEGIN
        IF ShowError THEN
          NewAssemblyLine.FIELDERROR("No.",Text003);
        HasError := TRUE;
      END;

      IF NewAssemblyLine."Location Code" <> OldAssemblyLine."Location Code" THEN BEGIN
        IF ShowError THEN
          NewAssemblyLine.FIELDERROR("Location Code",Text003);
        HasError := TRUE;
      END;

      OnVerifyChangeOnBeforeHasError(NewAssemblyLine,OldAssemblyLine,HasError,ShowError);

      IF (NewAssemblyLine.Type = NewAssemblyLine.Type::Item) AND (OldAssemblyLine.Type = OldAssemblyLine.Type::Item) AND
         (NewAssemblyLine."Bin Code" <> OldAssemblyLine."Bin Code")
      THEN
        IF NOT ReservMgt.CalcIsAvailTrackedQtyInBin(
             NewAssemblyLine."No.",NewAssemblyLine."Bin Code",
             NewAssemblyLine."Location Code",NewAssemblyLine."Variant Code",
             DATABASE::"Assembly Line",NewAssemblyLine."Document Type",
             NewAssemblyLine."Document No.",'',0,NewAssemblyLine."Line No.")
        THEN BEGIN
          IF ShowError THEN
            NewAssemblyLine.FIELDERROR("Bin Code",Text003);
          HasError := TRUE;
        END;

      IF NewAssemblyLine."Variant Code" <> OldAssemblyLine."Variant Code" THEN BEGIN
        IF ShowError THEN
          NewAssemblyLine.FIELDERROR("Variant Code",Text003);
        HasError := TRUE;
      END;

      IF NewAssemblyLine."Line No." <> OldAssemblyLine."Line No." THEN
        HasError := TRUE;

      IF HasError THEN
        IF (NewAssemblyLine."No." <> OldAssemblyLine."No.") OR
           FindReservEntry(NewAssemblyLine,ReservEntry)
        THEN BEGIN
          IF NewAssemblyLine."No." <> OldAssemblyLine."No." THEN BEGIN
            ReservMgt.SetAssemblyLine(OldAssemblyLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
            ReservMgt.SetAssemblyLine(NewAssemblyLine);
          END ELSE BEGIN
            ReservMgt.SetAssemblyLine(NewAssemblyLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
          END;
          ReservMgt.AutoTrack(NewAssemblyLine."Remaining Quantity (Base)");
        END;

      IF HasError OR (NewAssemblyLine."Due Date" <> OldAssemblyLine."Due Date") THEN BEGIN
        AssignForPlanning(NewAssemblyLine);
        IF (NewAssemblyLine."No." <> OldAssemblyLine."No.") OR
           (NewAssemblyLine."Variant Code" <> OldAssemblyLine."Variant Code") OR
           (NewAssemblyLine."Location Code" <> OldAssemblyLine."Location Code")
        THEN
          AssignForPlanning(OldAssemblyLine);
      END;
    END;

    [External]
    PROCEDURE VerifyQuantity@10(VAR NewAssemblyLine@1000 : Record 901;VAR OldAssemblyLine@1001 : Record 901);
    VAR
      AssemblyLine@1002 : Record 901;
    BEGIN
      WITH NewAssemblyLine DO BEGIN
        IF Type <> Type::Item THEN
          EXIT;
        IF "Line No." = OldAssemblyLine."Line No." THEN
          IF "Remaining Quantity (Base)" = OldAssemblyLine."Remaining Quantity (Base)" THEN
            EXIT;
        IF "Line No." = 0 THEN
          IF NOT AssemblyLine.GET("Document Type","Document No.","Line No.") THEN
            EXIT;

        ReservMgt.SetAssemblyLine(NewAssemblyLine);
        IF "Qty. per Unit of Measure" <> OldAssemblyLine."Qty. per Unit of Measure" THEN
          ReservMgt.ModifyUnitOfMeasure;
        ReservMgt.DeleteReservEntries(FALSE,"Remaining Quantity (Base)");
        ReservMgt.ClearSurplus;
        ReservMgt.AutoTrack("Remaining Quantity (Base)");
        AssignForPlanning(NewAssemblyLine);
      END;
    END;

    [External]
    PROCEDURE Caption@30(AssemblyLine@1001 : Record 901) CaptionText@1000 : Text[80];
    BEGIN
      CaptionText :=
        STRSUBSTNO('%1 %2 %3',AssemblyLine."Document Type",AssemblyLine."Document No.",AssemblyLine."Line No.");
    END;

    [External]
    PROCEDURE CallItemTracking@2(VAR AssemblyLine@1000 : Record 901);
    VAR
      TrackingSpecification@1001 : Record 336;
      ItemTrackingLines@1002 : Page 6510;
    BEGIN
      TrackingSpecification.InitFromAsmLine(AssemblyLine);
      ItemTrackingLines.SetSourceSpec(TrackingSpecification,AssemblyLine."Due Date");
      ItemTrackingLines.SetInbound(AssemblyLine.IsInbound);
      ItemTrackingLines.RUNMODAL;
    END;

    [External]
    PROCEDURE DeleteLineConfirm@5(VAR AssemblyLine@1000 : Record 901) : Boolean;
    BEGIN
      WITH AssemblyLine DO BEGIN
        IF NOT ReservEntryExist(AssemblyLine) THEN
          EXIT(TRUE);

        ReservMgt.SetAssemblyLine(AssemblyLine);
        IF ReservMgt.DeleteItemTrackingConfirm THEN
          DeleteItemTracking := TRUE;
      END;

      EXIT(DeleteItemTracking);
    END;

    [External]
    PROCEDURE UpdateItemTrackingAfterPosting@11(AssemblyLine@1000 : Record 901);
    VAR
      ReservEntry@1003 : Record 337;
      CreateReservEntry@1001 : Codeunit 99000830;
    BEGIN
      // Used for updating Quantity to Handle and Quantity to Invoice after posting
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      ReservEntry.SETRANGE("Source Type",DATABASE::"Assembly Line");
      ReservEntry.SETRANGE("Source Subtype",AssemblyLine."Document Type");
      ReservEntry.SETRANGE("Source ID",AssemblyLine."Document No.");
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Source Prod. Order Line",0);
      CreateReservEntry.UpdateItemTrackingAfterPosting(ReservEntry);
    END;

    [External]
    PROCEDURE TransferAsmLineToItemJnlLine@35(VAR AssemblyLine@1000 : Record 901;VAR ItemJnlLine@1001 : Record 83;TransferQty@1002 : Decimal;CheckApplFromItemEntry@1004 : Boolean) : Decimal;
    VAR
      OldReservEntry@1003 : Record 337;
    BEGIN
      IF TransferQty = 0 THEN
        EXIT;
      IF NOT FindReservEntry(AssemblyLine,OldReservEntry) THEN
        EXIT(TransferQty);

      ItemJnlLine.TESTFIELD("Item No.",AssemblyLine."No.");
      ItemJnlLine.TESTFIELD("Variant Code",AssemblyLine."Variant Code");
      ItemJnlLine.TESTFIELD("Location Code",AssemblyLine."Location Code");

      OldReservEntry.Lock;

      IF ReservEngineMgt.InitRecordSet(OldReservEntry) THEN BEGIN
        REPEAT
          OldReservEntry.TESTFIELD("Item No.",AssemblyLine."No.");
          OldReservEntry.TESTFIELD("Variant Code",AssemblyLine."Variant Code");
          OldReservEntry.TESTFIELD("Location Code",AssemblyLine."Location Code");

          IF CheckApplFromItemEntry THEN BEGIN
            OldReservEntry.TESTFIELD("Appl.-from Item Entry");
            CreateReservEntry.SetApplyFromEntryNo(OldReservEntry."Appl.-from Item Entry");
          END;

          TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
              ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",
              ItemJnlLine."Journal Batch Name",0,ItemJnlLine."Line No.",
              ItemJnlLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

        UNTIL (ReservEngineMgt.NEXTRecord(OldReservEntry) = 0) OR (TransferQty = 0);
        CheckApplFromItemEntry := FALSE;
      END;
      EXIT(TransferQty);
    END;

    [External]
    PROCEDURE TransferAsmLineToAsmLine@31(VAR OldAssemblyLine@1000 : Record 901;VAR NewAssemblyLine@1001 : Record 901;TransferQty@1002 : Decimal);
    VAR
      OldReservEntry@1003 : Record 337;
      Status@1004 : 'Reservation,Tracking,Surplus,Prospect';
    BEGIN
      IF TransferQty = 0 THEN
        EXIT;

      IF NOT FindReservEntry(OldAssemblyLine,OldReservEntry) THEN
        EXIT;

      OldReservEntry.Lock;

      NewAssemblyLine.TESTFIELD("No.",OldAssemblyLine."No.");
      NewAssemblyLine.TESTFIELD("Variant Code",OldAssemblyLine."Variant Code");
      NewAssemblyLine.TESTFIELD("Location Code",OldAssemblyLine."Location Code");

      FOR Status := Status::Reservation TO Status::Prospect DO BEGIN
        OldReservEntry.SETRANGE("Reservation Status",Status);
        IF OldReservEntry.FINDSET THEN
          REPEAT
            OldReservEntry.TESTFIELD("Item No.",OldAssemblyLine."No.");
            OldReservEntry.TESTFIELD("Variant Code",OldAssemblyLine."Variant Code");
            OldReservEntry.TESTFIELD("Location Code",OldAssemblyLine."Location Code");

            TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Assembly Line",
                NewAssemblyLine."Document Type",NewAssemblyLine."Document No.",'',0,
                NewAssemblyLine."Line No.",NewAssemblyLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

          UNTIL (OldReservEntry.NEXT = 0) OR (TransferQty = 0);
      END;
    END;

    [External]
    PROCEDURE BindToPurchase@6(AsmLine@1000 : Record 901;PurchLine@1001 : Record 39;ReservQty@1002 : Decimal;ReservQtyBase@1003 : Decimal);
    VAR
      TrackingSpecification@1004 : Record 336;
      ReservationEntry@1005 : Record 337;
    BEGIN
      SetBinding(ReservationEntry.Binding::"Order-to-Order");
      TrackingSpecification.InitTrackingSpecification2(
        DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",'',0,PurchLine."Line No.",
        PurchLine."Variant Code",PurchLine."Location Code",PurchLine."Qty. per Unit of Measure");
      CreateReservationSetFrom(TrackingSpecification);
      CreateBindingReservation(AsmLine,PurchLine.Description,PurchLine."Expected Receipt Date",ReservQty,ReservQtyBase);
    END;

    [External]
    PROCEDURE BindToProdOrder@17(AsmLine@1003 : Record 901;ProdOrderLine@1002 : Record 5406;ReservQty@1001 : Decimal;ReservQtyBase@1000 : Decimal);
    VAR
      TrackingSpecification@1005 : Record 336;
      ReservationEntry@1004 : Record 337;
    BEGIN
      SetBinding(ReservationEntry.Binding::"Order-to-Order");
      TrackingSpecification.InitTrackingSpecification2(
        DATABASE::"Prod. Order Line",ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",'',ProdOrderLine."Line No.",0,
        ProdOrderLine."Variant Code",ProdOrderLine."Location Code",ProdOrderLine."Qty. per Unit of Measure");
      CreateReservationSetFrom(TrackingSpecification);
      CreateBindingReservation(AsmLine,ProdOrderLine.Description,ProdOrderLine."Ending Date",ReservQty,ReservQtyBase);
    END;

    [External]
    PROCEDURE BindToAssembly@8(AsmLine@1003 : Record 901;AsmHeader@1002 : Record 900;ReservQty@1001 : Decimal;ReservQtyBase@1000 : Decimal);
    VAR
      TrackingSpecification@1005 : Record 336;
      ReservationEntry@1004 : Record 337;
    BEGIN
      SetBinding(ReservationEntry.Binding::"Order-to-Order");
      TrackingSpecification.InitTrackingSpecification2(
        DATABASE::"Assembly Header",AsmHeader."Document Type",AsmHeader."No.",'',0,0,
        AsmHeader."Variant Code",AsmHeader."Location Code",AsmHeader."Qty. per Unit of Measure");
      CreateReservationSetFrom(TrackingSpecification);
      CreateBindingReservation(AsmLine,AsmHeader.Description,AsmHeader."Due Date",ReservQty,ReservQtyBase);
    END;

    [External]
    PROCEDURE BindToTransfer@14(AsmLine@1003 : Record 901;TransLine@1002 : Record 5741;ReservQty@1001 : Decimal;ReservQtyBase@1000 : Decimal);
    VAR
      TrackingSpecification@1005 : Record 336;
      ReservationEntry@1004 : Record 337;
    BEGIN
      SetBinding(ReservationEntry.Binding::"Order-to-Order");
      TrackingSpecification.InitTrackingSpecification2(
        DATABASE::"Transfer Line",1,TransLine."Document No.",'',0,TransLine."Line No.",
        TransLine."Variant Code",TransLine."Transfer-to Code",TransLine."Qty. per Unit of Measure");
      CreateReservationSetFrom(TrackingSpecification);
      CreateBindingReservation(AsmLine,TransLine.Description,TransLine."Receipt Date",ReservQty,ReservQtyBase);
    END;

    [Integration]
    LOCAL PROCEDURE OnVerifyChangeOnBeforeHasError@19(NewAssemblyLine@1000 : Record 901;OldAssemblyLine@1001 : Record 901;VAR HasError@1002 : Boolean;VAR ShowError@1003 : Boolean);
    BEGIN
    END;

    BEGIN
    {
      4PS, Serial No. from 20 to 40
    }
    END.
  }
}

