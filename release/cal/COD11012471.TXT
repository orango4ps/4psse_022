OBJECT Codeunit 11012471 Xrm 4PS Setup Defaults
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      JobQueueEntryNameTok@1000000008 : TextConst '@@@="%1 = The Integration Table Name to synchronized (ex. CUSTOMER)";DEU=" %1 - Dynamics CRM-Synchronisierungsauftrag.";ENU=" %1 - Dynamics CRM synchronization job.";NLD=" %1 - Dynamics CRM-synchronisatietaak.";NOR=" %1 - Synkroniseringsjobb for Microsoft Dynamics CRM.";SVE=" %1 - %2-synkroniseringsjobb."';
      IntegrationTablePrefixTok@1000000007 : TextConst '@@@={Locked} Product name;DEU=Dynamics CRM;ENU=Dynamics CRM;NLD=Dynamics CRM;NOR=Dynamics CRM;SVE=Dynamics 365 for Sales';
      CRMAccountConfigTemplateCodeTok@1000000005 : TextConst '@@@=Config. Template code for CRM Accounts created from Customers. Max length 10.;DEU=CRMACCOUNT;ENU=CRMACCOUNT;NLD=CRMACCOUNT;NOR=CRMACCOUNT;SVE=CRMACCOUNT';
      CRMAccountConfigTemplateDescTxt@1000000004 : TextConst '@@@=Max. length 50.;DEU=Neue CRM-Kontodatens„tze wurden w„hrend der Synchronisierung erstellt.;ENU=New CRM Account records created during synch.;NLD=Nieuwe records voor CRM-rekening gemaakt tijdens synchr.;NOR=Nye CRM-kontoposter opprettet under synkronisering.;SVE=Nya CRM-kontoposter skapades under synkroniseringen.';
      CustomerConfigTemplateCodeTok@1000000003 : TextConst '@@@=Customer template code for new customers created from CRM data. Max length 10.;DEU=CRMCUST;ENU=CRMCUST;NLD=CRMCUST;NOR=CRMCUST;SVE=CRMCUST';
      CustomerConfigTemplateDescTxt@1000000002 : TextConst '@@@=Max. length 50.;DEU=Neue Debitorendatens„tze wurden w„hrend der Synchronisierung erstellt.;ENU=New Customer records created during synch.;NLD=Nieuwe klantrecords gemaakt tijdens synchr.;NOR=Nye kundeposter opprettet under synkronisering.;SVE=Nya kundposter skapades under synkroniseringen.';

    LOCAL PROCEDURE ResetContactFeatureGroupFeatureGroup@1000000003(IntegrationTableMappingName@1000000000 : Code[20];EnqueueJobQueueEntry@1000000001 : Boolean);
    VAR
      IntegrationTableMapping@1000000002 : Record 5335;
      IntegrationFieldMapping@1000000003 : Record 5336;
      CRMFeatureGroup@1000000004 : Record 11124935;
      ContactFeatureGroup@1000000005 : Record 11012751;
    BEGIN
      //Add mapping for contact feature group to CRM Feature group integration table
      InsertIntegrationTableMapping(
        IntegrationTableMapping,IntegrationTableMappingName,
        DATABASE::"Contact Feature Group",DATABASE::"CRM Feature Group",
        CRMFeatureGroup.FIELDNO(fps_featuregroupId),CRMFeatureGroup.FIELDNO(ModifiedOn),
        '','',FALSE);

      ContactFeatureGroup.RESET;
      IntegrationTableMapping.SetTableFilter(GetTableFilterFromView(DATABASE::"Contact Feature Group",ContactFeatureGroup.TABLECAPTION,ContactFeatureGroup.GETVIEW));

      CRMFeatureGroup.RESET;
      IntegrationTableMapping.SetIntegrationTableFilter(GetTableFilterFromView(DATABASE::"CRM Feature Group", CRMFeatureGroup.TABLECAPTION,CRMFeatureGroup.GETVIEW));
      IntegrationTableMapping.MODIFY;

      // Description > fps_description
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureGroup.FIELDNO(Description),
        CRMFeatureGroup.FIELDNO(fps_description),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Contacts > fps_contacts
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureGroup.FIELDNO(Contacts),
        CRMFeatureGroup.FIELDNO(fps_Contacts),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Persons > fps_persons
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureGroup.FIELDNO(Persons),
        CRMFeatureGroup.FIELDNO(fps_Persons),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Companies > fps_Companies
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureGroup.FIELDNO(Companies),
        CRMFeatureGroup.FIELDNO(fps_Companies),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Try-outs > fps_Try-outs
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureGroup.FIELDNO("Try-outs"),
        CRMFeatureGroup.FIELDNO(fps_Tryouts),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Obligatory for Contacts > fps_ObligatoryforContacts
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureGroup.FIELDNO("Obligatory for Contacts"),
        CRMFeatureGroup.FIELDNO(fps_ObligatoryforContacts),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Obligatory for Persons > fps_ObligatoryforPersons
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureGroup.FIELDNO("Obligatory for Persons"),
        CRMFeatureGroup.FIELDNO(fps_ObligatoryforPersons),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Obligatory for Companies > fps_ObligatoryforCompanies
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureGroup.FIELDNO("Obligatory for Companies"),
        CRMFeatureGroup.FIELDNO(fps_ObligatoryforCompanies),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Obligatory for Try-outs > fps_ObligatoryforTry-outs
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureGroup.FIELDNO("Obligatory for Try-outs"),
        CRMFeatureGroup.FIELDNO(fps_ObligatoryforTryouts),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Value Obligatory for Contacts > fps_ValueObligatoryforContacts
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureGroup.FIELDNO("Value Obligatory for Contacts"),
        CRMFeatureGroup.FIELDNO(fps_ValueObligatoryforContacts),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Value Obligatory for Persons > fps_ValueObligatoryforPersons
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureGroup.FIELDNO("Value Obligatory for Persons"),
        CRMFeatureGroup.FIELDNO(fps_ValueObligatoryforPersons),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Value Obligatory for Companies > fps_ValueObligatoryforCompanies
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureGroup.FIELDNO("Value Obligatory for Companies"),
        CRMFeatureGroup.FIELDNO(fps_ValueObligatoryforCompanie),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Value Obligatory for Try-outs > fps_ValueObligatoryforTryouts
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureGroup.FIELDNO("Value Obligatory for Try-outs"),
        CRMFeatureGroup.FIELDNO(fps_ValueObligatoryforTryouts),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      RecreateJobQueueEntry(IntegrationTableMapping,2,EnqueueJobQueueEntry);
    END;

    LOCAL PROCEDURE ResetContactFeatureFeature@1000000004(IntegrationTableMappingName@1000000000 : Code[20];EnqueueJobQueueEntry@1000000001 : Boolean);
    VAR
      IntegrationTableMapping@1000000006 : Record 5335;
      IntegrationFieldMapping@1000000005 : Record 5336;
      CRMFeature@1000000004 : Record 11124936;
      ContactFeature@1000000003 : Record 11012752;
    BEGIN
      //Add mapping for Contact Feature to CRM Feature integration table
      InsertIntegrationTableMapping(
        IntegrationTableMapping,IntegrationTableMappingName,
        DATABASE::"Contact Feature",DATABASE::"CRM Feature",
        CRMFeature.FIELDNO(fps_featureId),CRMFeature.FIELDNO(ModifiedOn),
        '','',FALSE);

      ContactFeature.RESET;
      IntegrationTableMapping.SetTableFilter(GetTableFilterFromView(DATABASE::"Contact Feature",ContactFeature.TABLECAPTION,ContactFeature.GETVIEW));

      CRMFeature.RESET;
      IntegrationTableMapping.SetIntegrationTableFilter(GetTableFilterFromView(DATABASE::"CRM Feature", CRMFeature.TABLECAPTION,CRMFeature.GETVIEW));
      IntegrationTableMapping.MODIFY;

      // Description > fps_description
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeature.FIELDNO(Description),
        CRMFeature.FIELDNO(fps_Description),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Code > fps_code
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeature.FIELDNO(Code),
        CRMFeature.FIELDNO(fps_code),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Contact Feature Feature Group > fps_featuregroupidname
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeature.FIELDNO("Feature Group"),
        CRMFeature.FIELDNO(fps_FeatureGroupIdName),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      RecreateJobQueueEntry(IntegrationTableMapping,2,EnqueueJobQueueEntry);
    END;

    LOCAL PROCEDURE ResetContactFeatureTypeFeatureType@1000000005(IntegrationTableMappingName@1000000000 : Code[20];EnqueueJobQueueEntry@1000000001 : Boolean);
    VAR
      IntegrationTableMapping@1000000006 : Record 5335;
      IntegrationFieldMapping@1000000005 : Record 5336;
      CRMFeatureType@1000000004 : Record 11124937;
      ContactFeatureType@1000000003 : Record 11012753;
    BEGIN
      InsertIntegrationTableMapping(
        IntegrationTableMapping,IntegrationTableMappingName,
        DATABASE::"Contact Feature Type",DATABASE::"CRM Feature Type",
        CRMFeatureType.FIELDNO(fps_featuretypeId),CRMFeatureType.FIELDNO(ModifiedOn),
        '','',FALSE);

      ContactFeatureType.RESET;
      IntegrationTableMapping.SetTableFilter(GetTableFilterFromView(DATABASE::"Contact Feature Type",ContactFeatureType.TABLECAPTION,ContactFeatureType.GETVIEW));

      CRMFeatureType.RESET;
      IntegrationTableMapping.SetIntegrationTableFilter(GetTableFilterFromView(DATABASE::"CRM Feature Type", CRMFeatureType.TABLECAPTION,CRMFeatureType.GETVIEW));
      IntegrationTableMapping.MODIFY;

      // Relation Type > fps_relationtype
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureType.FIELDNO("Relation Type"),
        CRMFeatureType.FIELDNO(fps_RelationType),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Code > fps_code
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureType.FIELDNO(Code),
        CRMFeatureType.FIELDNO(fps_code),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Feature Group > fps_featuregroupidname
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureType.FIELDNO("Feature Group"),
        CRMFeatureType.FIELDNO(fps_FeatureGroupIdName),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Feature > fps_featureidname
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureType.FIELDNO(Feature),
        CRMFeatureType.FIELDNO(fps_FeatureIdName),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Feature Description > fps_description
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureType.FIELDNO("Feature Description"),
        CRMFeatureType.FIELDNO(fps_Description),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Value > fps_value
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureType.FIELDNO(Value),
        CRMFeatureType.FIELDNO(fps_Value),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Comments > fps_comments
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        ContactFeatureType.FIELDNO(Comments),
        CRMFeatureType.FIELDNO(fps_Comments),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      RecreateJobQueueEntry(IntegrationTableMapping,2,EnqueueJobQueueEntry);
    END;

    LOCAL PROCEDURE InsertIntegrationTableMapping@1000000008(VAR IntegrationTableMapping@1000000000 : Record 5335;MappingName@1000000001 : Code[20];TableNum@1000000002 : Integer;IntegrationTableNum@1000000003 : Integer;IntegrationTableUIDFieldNum@1000000004 : Integer;IntegrationTableModifiedFieldNum@1000000005 : Integer;TableConfigTemplateCode@1000000006 : Code[10];IntegrationTableConfigTemplateCode@1000000007 : Code[10];SynchOnlyCoupledRecords@1000000008 : Boolean);
    BEGIN
      //Need to reproduce these functions because they are local functions in the Microsoft code unit 5330
      WITH IntegrationTableMapping DO BEGIN
        IF GET(MappingName) THEN
          DELETE(TRUE);
        INIT;
        Name := MappingName;
        "Table ID" := TableNum;
        "Integration Table ID" := IntegrationTableNum;
        "Synch. Codeunit ID" := CODEUNIT::"CRM Integration Table Synch.";
        VALIDATE("Integration Table UID Fld. No.",IntegrationTableUIDFieldNum);
        "Int. Tbl. Modified On Fld. No." := IntegrationTableModifiedFieldNum;
        "Table Config Template Code" := TableConfigTemplateCode;
        "Int. Tbl. Config Template Code" := IntegrationTableConfigTemplateCode;
        Direction := GetDefaultDirection("Table ID");
        "Int. Tbl. Caption Prefix" := IntegrationTablePrefixTok;
        "Synch. Only Coupled Records" := SynchOnlyCoupledRecords;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE GetDefaultDirection@1000000009(NAVTableID@1000000000 : Integer) : Integer;
    VAR
      IntegrationTableMapping@1000000001 : Record 5335;
    BEGIN
      //reproduced because of local function in Microsoft code unit 5330
      CASE NAVTableID OF
        DATABASE::"Contact Feature Type",
        DATABASE::"Try-out",
        DATABASE::"Try-out Line":
          EXIT(IntegrationTableMapping.Direction::Bidirectional);
        DATABASE::"Contact Feature Group",
        DATABASE::"Contact Feature":
          EXIT(IntegrationTableMapping.Direction::ToIntegrationTable);
      END;
    END;

    LOCAL PROCEDURE GetTableFilterFromView@1000000001(TableID@1000000000 : Integer;Caption@1000000001 : Text;View@1000000002 : Text) : Text;
    VAR
      FilterBuilder@1000000003 : FilterPageBuilder;
    BEGIN
      //needed to reproduce local function in Microsoft code unit 5330
      FilterBuilder.ADDTABLE(Caption,TableID);
      FilterBuilder.SETVIEW(Caption,View);
      EXIT(FilterBuilder.GETVIEW(Caption,TRUE));
    END;

    LOCAL PROCEDURE InsertIntegrationFieldMapping@1000000002(IntegrationTableMappingName@1000000000 : Code[20];TableFieldNum@1000000001 : Integer;IntegrationTableFieldNum@1000000002 : Integer;SynchDirection@1000000003 : Option;ConstValue@1000000004 : Text;ValidateField@1000000005 : Boolean;ValidateIntegrationTableField@1000000006 : Boolean);
    VAR
      IntegrationFieldMapping@1000000007 : Record 5336;
    BEGIN
      //needed to reproduce local function in Microsoft code unit 5330
      WITH IntegrationFieldMapping DO BEGIN
        INIT;
        "No." := 0;
        "Integration Table Mapping Name" := IntegrationTableMappingName;
        "Field No." := TableFieldNum;
        "Integration Table Field No." := IntegrationTableFieldNum;
        Direction := SynchDirection;
        "Constant Value" := COPYSTR(ConstValue,1,MAXSTRLEN("Constant Value"));
        "Validate Field" := ValidateField;
        "Validate Integration Table Fld" := ValidateIntegrationTableField;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE RecreateJobQueueEntry@1000000006(IntegrationTableMapping@1000000000 : Record 5335;IntervalInMinutes@1000000001 : Integer;ShouldRecreateJobQueueEntry@1000000002 : Boolean);
    VAR
      JobQueueEntry@1000000003 : Record 472;
    BEGIN
      //needed to reproduce local function in Microsoft code unit 5330
      WITH JobQueueEntry DO BEGIN
        SETRANGE("Object Type to Run","Object Type to Run"::Codeunit);
        SETRANGE("Object ID to Run",CODEUNIT::"Integration Synch. Job Runner");
        SETRANGE("Record ID to Process",IntegrationTableMapping.RECORDID);
        //DELETEALL(TRUE); PD 28/01/2019
        DeleteTasks;

        //INIT; PD 28/01/2019
        //ID := CREATEGUID; PD 28/01/2019
        //"Earliest Start Date/Time" := CREATEDATETIME(TODAY,TIME); PD 28/01/2019
        InitRecurringJob(IntervalInMinutes);
        "Object Type to Run" := "Object Type to Run"::Codeunit;
        "Object ID to Run" := CODEUNIT::"Integration Synch. Job Runner";
        "Record ID to Process" := IntegrationTableMapping.RECORDID;
        "Run in User Session" := FALSE;
        Priority := 1000;
        Description := COPYSTR(STRSUBSTNO(JobQueueEntryNameTok,IntegrationTableMapping.Name),1,MAXSTRLEN(Description));
        // PD 28/01/2019
        // "Recurring Job" := TRUE;
        // "No. of Minutes between Runs" := IntervalInMinutes;
        // "Run on Mondays" := TRUE;
        // "Run on Tuesdays" := TRUE;
        // "Run on Wednesdays" := TRUE;
        // "Run on Thursdays" := TRUE;
        // "Run on Fridays" := TRUE;
        // "Run on Saturdays" := TRUE;
        // "Run on Sundays" := TRUE;
        "Maximum No. of Attempts to Run" := 10;
        Status := Status::Ready;
        "Rerun Delay (sec.)" := 30;
        IF ShouldRecreateJobQueueEntry THEN
          CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry)
        ELSE
          //INSERT; PD 28/01/2019
          INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ResetTryoutLineConnection@1000000011(IntegrationTableMappingName@1000000001 : Code[20];EnqueueJobQueueEntry@1000000000 : Boolean);
    VAR
      IntegrationTableMapping@1000000006 : Record 5335;
      IntegrationFieldMapping@1000000005 : Record 5336;
      CRMConnection@1000000004 : Record 11124938;
      TryoutLine@1000000003 : Record 11012755;
    BEGIN
      //maps try-out line to CRM connection integration table
      InsertIntegrationTableMapping(
        IntegrationTableMapping,IntegrationTableMappingName,
        DATABASE::"Try-out Line",DATABASE::"CRM Connection",
        CRMConnection.FIELDNO(ConnectionId),CRMConnection.FIELDNO(ModifiedOn),
        '','',FALSE);

      TryoutLine.RESET;
      IntegrationTableMapping.SetTableFilter(GetTableFilterFromView(DATABASE::"Try-out Line",TryoutLine.TABLECAPTION,TryoutLine.GETVIEW));

      CRMConnection.RESET;
      IntegrationTableMapping.MODIFY;

      // Contact no > Name
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        TryoutLine.FIELDNO("Contact No."),
        CRMConnection.FIELDNO(CreatedOnBehalfByName),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Description > fps_co
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        TryoutLine.FIELDNO("Try-out No."),
        CRMConnection.FIELDNO(Description),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      RecreateJobQueueEntry(IntegrationTableMapping,2,EnqueueJobQueueEntry);
    END;

    LOCAL PROCEDURE ResetTryoutOpportunity@1000000017(IntegrationTableMappingName@1000000001 : Code[20];EnqueueJobQueueEntry@1000000000 : Boolean);
    VAR
      IntegrationTableMapping@1000000006 : Record 5335;
      IntegrationFieldMapping@1000000005 : Record 5336;
      CRMOpportunity@1000000004 : Record 5343;
      Tryout@1000000003 : Record 11012750;
    BEGIN
      //maps 4PS try-out to CRM Opportunity
      InsertIntegrationTableMapping(
        IntegrationTableMapping,IntegrationTableMappingName,
        DATABASE::"Try-out",DATABASE::"CRM Opportunity",
        CRMOpportunity.FIELDNO(OpportunityId),CRMOpportunity.FIELDNO(ModifiedOn),
        '','',TRUE);

      Tryout.RESET;
      IntegrationTableMapping.SetTableFilter(GetTableFilterFromView(DATABASE::"Try-out",Tryout.TABLECAPTION,Tryout.GETVIEW));

      CRMOpportunity.RESET;
      IntegrationTableMapping.SetIntegrationTableFilter(GetTableFilterFromView(DATABASE::"CRM Opportunity", CRMOpportunity.TABLECAPTION,CRMOpportunity.GETVIEW));
      IntegrationTableMapping.MODIFY;

      // Description > Name
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Tryout.FIELDNO(Description),
        CRMOpportunity.FIELDNO(Name),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Code > fps_tryoutnumber
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Tryout.FIELDNO(Code),
        CRMOpportunity.FIELDNO(fps_tryoutnumber),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      //Expected Order Date > EstimatedCloseDate
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Tryout.FIELDNO("Expected Order Date"),
        CRMOpportunity.FIELDNO(EstimatedCloseDate),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      //Currency Code > Transaction Currency
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Tryout.FIELDNO("Currency Code"),
        CRMOpportunity.FIELDNO(TransactionCurrencyId),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Expected Order Amount > EstimatedValue
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Tryout.FIELDNO("Order Amount (FCY)"),
        CRMOpportunity.FIELDNO(EstimatedValue),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      //Description 2 > Description
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Tryout.FIELDNO("Description 2"),
        CRMOpportunity.FIELDNO(Description),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      //Comment > quote comment (not sure about this one)
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Tryout.FIELDNO(Comment),
        CRMOpportunity.FIELDNO(QuoteComments),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      //Scoring percentage to CloseProbability
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Tryout.FIELDNO("Scoring Percentage"),
        CRMOpportunity.FIELDNO(CloseProbability),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      //Status to StatusCode - NOTE only works when you have set them up to be the same in BOTH SYSTEMS!
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Tryout.FIELDNO(Status),
        CRMOpportunity.FIELDNO(StatusCode),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      RecreateJobQueueEntry(IntegrationTableMapping,2,EnqueueJobQueueEntry);
    END;

    LOCAL PROCEDURE ResetAccountConfigTemplate@29() : Code[10];
    VAR
      AccountConfigTemplateHeader@1001 : Record 8618;
      ConfigTemplateLine@1000 : Record 8619;
      CRMAccount@1002 : Record 5341;
    BEGIN
      ConfigTemplateLine.SETRANGE(
        "Data Template Code",COPYSTR(CRMAccountConfigTemplateCodeTok,1,MAXSTRLEN(AccountConfigTemplateHeader.Code)));
      ConfigTemplateLine.DELETEALL;
      AccountConfigTemplateHeader.SETRANGE(
        Code,COPYSTR(CRMAccountConfigTemplateCodeTok,1,MAXSTRLEN(AccountConfigTemplateHeader.Code)));
      AccountConfigTemplateHeader.DELETEALL;

      AccountConfigTemplateHeader.INIT;
      AccountConfigTemplateHeader.Code := COPYSTR(CRMAccountConfigTemplateCodeTok,1,MAXSTRLEN(AccountConfigTemplateHeader.Code));
      AccountConfigTemplateHeader.Description :=
        COPYSTR(CRMAccountConfigTemplateDescTxt,1,MAXSTRLEN(AccountConfigTemplateHeader.Description));
      AccountConfigTemplateHeader."Table ID" := DATABASE::"CRM Account";
      AccountConfigTemplateHeader.INSERT;
      ConfigTemplateLine.INIT;
      ConfigTemplateLine."Data Template Code" := AccountConfigTemplateHeader.Code;
      ConfigTemplateLine."Line No." := 1;
      ConfigTemplateLine.Type := ConfigTemplateLine.Type::Field;
      ConfigTemplateLine."Table ID" := DATABASE::"CRM Account";
      ConfigTemplateLine."Field ID" := CRMAccount.FIELDNO(CustomerTypeCode);
      ConfigTemplateLine."Field Name" := CRMAccount.FIELDNAME(CustomerTypeCode);
      ConfigTemplateLine."Default Value" := FORMAT(CRMAccount.CustomerTypeCode::Customer);
      ConfigTemplateLine.INSERT;

      EXIT(CRMAccountConfigTemplateCodeTok);
    END;

    LOCAL PROCEDURE ResetCustomerConfigTemplate@31() : Code[10];
    VAR
      ConfigTemplateHeader@1000 : Record 8618;
      CustomerConfigTemplateHeader@1005 : Record 8618;
      ConfigTemplateLine@1001 : Record 8619;
      CustomerConfigTemplateLine@1006 : Record 8619;
      Customer@1002 : Record 18;
      FoundTemplateCode@1003 : Code[10];
    BEGIN
      CustomerConfigTemplateLine.SETRANGE(
        "Data Template Code",COPYSTR(CustomerConfigTemplateCodeTok,1,MAXSTRLEN(CustomerConfigTemplateLine."Data Template Code")));
      CustomerConfigTemplateLine.DELETEALL;
      CustomerConfigTemplateHeader.SETRANGE(
        Code,COPYSTR(CustomerConfigTemplateCodeTok,1,MAXSTRLEN(CustomerConfigTemplateHeader.Code)));
      CustomerConfigTemplateHeader.DELETEALL;

      // Base the customer config template off the first customer template with currency code '' (LCY);
      ConfigTemplateHeader.SETRANGE("Table ID",DATABASE::Customer);
      IF ConfigTemplateHeader.FINDSET THEN
        REPEAT
          ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateHeader.Code);
          ConfigTemplateLine.SETRANGE("Field ID",Customer.FIELDNO("Currency Code"));
          ConfigTemplateLine.SETFILTER("Default Value",'');
          IF ConfigTemplateLine.FINDFIRST THEN BEGIN
            FoundTemplateCode := ConfigTemplateHeader.Code;
            BREAK;
          END;
        UNTIL ConfigTemplateHeader.NEXT = 0;

      IF FoundTemplateCode = '' THEN
        EXIT('');

      CustomerConfigTemplateHeader.INIT;
      CustomerConfigTemplateHeader.TRANSFERFIELDS(ConfigTemplateHeader,FALSE);
      CustomerConfigTemplateHeader.Code := COPYSTR(CustomerConfigTemplateCodeTok,1,MAXSTRLEN(CustomerConfigTemplateHeader.Code));
      CustomerConfigTemplateHeader.Description :=
        COPYSTR(CustomerConfigTemplateDescTxt,1,MAXSTRLEN(CustomerConfigTemplateHeader.Description));
      CustomerConfigTemplateHeader.INSERT;

      ConfigTemplateLine.RESET;
      ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateHeader.Code);
      ConfigTemplateLine.FINDSET;
      REPEAT
        CustomerConfigTemplateLine.INIT;
        CustomerConfigTemplateLine.TRANSFERFIELDS(ConfigTemplateLine,TRUE);
        CustomerConfigTemplateLine."Data Template Code" := CustomerConfigTemplateHeader.Code;
        CustomerConfigTemplateLine.INSERT;
      UNTIL ConfigTemplateLine.NEXT = 0;

      EXIT(CustomerConfigTemplateCodeTok);
    END;

    PROCEDURE Reset4PSXrmMapping@1000000000(CRMConnectionSetup@1000000000 : Record 5330);
    VAR
      EnqueueJobQueueEntries@1000000001 : Boolean;
    BEGIN
      //Main setup called when CRM connection made to create special 4PS to XRm table mapping
      EnqueueJobQueueEntries := CRMConnectionSetup.TestConnection();
      ResetContactFeatureGroupFeatureGroup('FEATURE GROUP', EnqueueJobQueueEntries);
      ResetContactFeatureFeature('FEATURE', EnqueueJobQueueEntries);
      ResetTryoutOpportunity('OPPORTUNITY', EnqueueJobQueueEntries);
      ResetContactFeatureTypeFeatureType('FEATURE TYPE', EnqueueJobQueueEntries);
      ResetTryoutLineConnection('TRY-OUT LINE', EnqueueJobQueueEntries);
      ResetCompanyContactAccount('COMPANY CONTACT', EnqueueJobQueueEntries);
      On4PSXrmSetupDefaults();
    END;

    PROCEDURE GetTableIDCRMEntityNameMapping@22(VAR TempNameValueBuffer@1000 : TEMPORARY Record 823);
    BEGIN
      //identifies the "native" Xrm entity that complements the NAV table
      AddEntityTableMapping('opportunity',DATABASE::"Try-out",TempNameValueBuffer);
      AddEntityTableMapping('opportunity',DATABASE::"CRM Opportunity",TempNameValueBuffer);

      AddEntityTableMapping('fps_featuregroup',DATABASE::"Contact Feature Group",TempNameValueBuffer);
      AddEntityTableMapping('fps_featuregroup',DATABASE::"CRM Feature Group",TempNameValueBuffer);

      AddEntityTableMapping('fps_feature',DATABASE::"Contact Feature",TempNameValueBuffer);
      AddEntityTableMapping('fps_feature',DATABASE::"CRM Feature",TempNameValueBuffer);

      AddEntityTableMapping('fps_featuretype',DATABASE::"Contact Feature Type",TempNameValueBuffer);
      AddEntityTableMapping('fsp_featuretype',DATABASE::"CRM Feature Type",TempNameValueBuffer);

      AddEntityTableMapping('connection',DATABASE::"Try-out Line",TempNameValueBuffer);
      AddEntityTableMapping('connection',DATABASE::"CRM Connection",TempNameValueBuffer);
    END;

    LOCAL PROCEDURE AddEntityTableMapping@26(CRMEntityTypeName@1000 : Text;TableID@1001 : Integer;VAR TempNameValueBuffer@1002 : TEMPORARY Record 823);
    BEGIN
      WITH TempNameValueBuffer DO BEGIN
        INIT;
        ID := COUNT + 1;
        Name := COPYSTR(CRMEntityTypeName,1,MAXSTRLEN(Name));
        Value := FORMAT(TableID);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ResetCompanyContactAccount@1100528500(IntegrationTableMappingName@1100528501 : Code[20];EnqueueJobQueueEntry@1100528500 : Boolean);
    VAR
      IntegrationTableMapping@1100528506 : Record 5335;
      IntegrationFieldMapping@1100528505 : Record 5336;
      CRMAccount@1100528504 : Record 5341;
      Contact@1100528503 : Record 5050;
    BEGIN
      InsertIntegrationTableMapping(
        IntegrationTableMapping,IntegrationTableMappingName,
        DATABASE::Contact,DATABASE::"CRM Account",
        CRMAccount.FIELDNO(AccountId),CRMAccount.FIELDNO(ModifiedOn),
        '','',TRUE);

      Contact.RESET;
      Contact.SETRANGE(Type,Contact.Type::Company);
      IntegrationTableMapping.SetTableFilter(GetTableFilterFromView(DATABASE::Contact,Contact.TABLECAPTION,Contact.GETVIEW));

      CRMAccount.RESET;
      CRMAccount.SETRANGE(StateCode,CRMAccount.StateCode::Active);
      CRMAccount.SETRANGE(CustomerTypeCode,CRMAccount.CustomerTypeCode::Prospect);
      IntegrationTableMapping.SetIntegrationTableFilter(
        GetTableFilterFromView(DATABASE::"CRM Account",CRMAccount.TABLECAPTION,CRMAccount.GETVIEW));
      IntegrationTableMapping.MODIFY;

      // "Currency Code" > TransactionCurrencyId
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("Currency Code"),
        CRMAccount.FIELDNO(TransactionCurrencyId),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Address > Address1_Line1
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO(Address),
        CRMAccount.FIELDNO(Address1_Line1),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Address 2 > Address1_Line2
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("Address 2"),
        CRMAccount.FIELDNO(Address1_Line2),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Post Code > Address1_PostalCode
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("Post Code"),
        CRMAccount.FIELDNO(Address1_PostalCode),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // City > Address1_City
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO(City),
        CRMAccount.FIELDNO(Address1_City),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Country/Region Code > Address1_Country
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("Country/Region Code"),
        CRMAccount.FIELDNO(Address1_Country),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // County > Address1_StateOrProvince
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO(County),
        CRMAccount.FIELDNO(Address1_StateOrProvince),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Email > EmailAddress1
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("E-Mail"),
        CRMAccount.FIELDNO(EMailAddress1),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Fax No. > Fax
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("Fax No."),
        CRMAccount.FIELDNO(Fax),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Company Name > Name
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("Company Name"),
        CRMAccount.FIELDNO(Name),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Home Page > WebSiteUrl
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("Home Page"),
        CRMAccount.FIELDNO(WebSiteURL),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Phone No. > Telephone1
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("Phone No."),
        CRMAccount.FIELDNO(Telephone1),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Type
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO(Type),0,
        IntegrationFieldMapping.Direction::FromIntegrationTable,
        FORMAT(Contact.Type::Company),TRUE,FALSE);

      //RecreateJobQueueEntry(IntegrationTableMapping,2,EnqueueJobQueueEntry);
      RecreateJobQueueEntry(IntegrationTableMapping,2,FALSE);
    END;

    [Business]
    LOCAL PROCEDURE On4PSXrmSetupDefaults@1100528501();
    BEGIN
    END;

    BEGIN
    {
      4PS PD(metx) 20-12-2017 XRM-4PS Integration. Initial release. This unit creates defaults when 4PS-CRM connection is setup.
      4PS PD(metx) 20-01-2019 XRM-4PS Integration. Release 02. Adds XRM Account to NAV Company Contact mapping plus On4PSXrmSetupDefaults event.
    }
    END.
  }
}

