OBJECT Codeunit 11012856 Service Location Info Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TextTodayChar@1100525000 : TextConst 'DEU=T;ENU=T;NLD=H;NOR=T;SVE=t';

    PROCEDURE GetLocationOrderRecSet@1100525001(IServiceLocationNo@1100525001 : Code[20];VAR IOPeriodFilter@1100525002 : Text[30];ISourceTypeFilter@1100525004 : Option;IOrderManagerFilter@1100525005 : Text[30];VAR OServiceOrderRecSet@1100525000 : Record 11012823);
    VAR
      ServiceOrder@1100525003 : Record 11012823;
    BEGIN
      IOPeriodFilter := UPPERCASE(IOPeriodFilter);
      WHILE STRPOS(IOPeriodFilter, TextTodayChar) > 0 DO
        IOPeriodFilter :=
          DELSTR(IOPeriodFilter, STRPOS(IOPeriodFilter, TextTodayChar)) + FORMAT(TODAY) +
          COPYSTR(IOPeriodFilter, STRPOS(IOPeriodFilter, TextTodayChar) + STRLEN(TextTodayChar));

      OServiceOrderRecSet.RESET;
      OServiceOrderRecSet.SETCURRENTKEY("Service Location No.");
      OServiceOrderRecSet.SETRANGE("Service Location No.", IServiceLocationNo);
      IF IOrderManagerFilter <> '' THEN
        OServiceOrderRecSet.SETFILTER("Order Manager", IOrderManagerFilter);
      IF ISourceTypeFilter <> 0 THEN
        OServiceOrderRecSet.SETRANGE("Source Type", ISourceTypeFilter -1);
      IF OServiceOrderRecSet.FINDSET THEN
        REPEAT
          ServiceOrder.RESET;
          ServiceOrder := OServiceOrderRecSet;
          ServiceOrder.SETRECFILTER;
          IF ServiceOrder."Starting Date" <> 0D THEN BEGIN
            ServiceOrder.SETFILTER("Starting Date", IOPeriodFilter);
            IOPeriodFilter := ServiceOrder.GETFILTER("Starting Date");
            IF ServiceOrder.FIND THEN
              OServiceOrderRecSet.MARK(TRUE);
          END ELSE BEGIN
            ServiceOrder.SETFILTER("Order Date", IOPeriodFilter);
            IOPeriodFilter := ServiceOrder.GETFILTER("Order Date");
            IF ServiceOrder.FIND THEN
              OServiceOrderRecSet.MARK(TRUE);
          END;
        UNTIL OServiceOrderRecSet.NEXT = 0;
      OServiceOrderRecSet.MARKEDONLY(TRUE);
    END;

    PROCEDURE GetOrderCostRevenueByLocation@1100525000(VAR IServiceOrderRecSet@1100525000 : Record 11012823;VAR OBudgetAmount@1100525015 : Decimal;VAR OActualCost@1100525014 : Decimal;VAR OOpenPurchase@1100525013 : Decimal;VAR OReceivedNotInvoicedPurchase@1100525012 : Decimal;VAR OOpenAmountHours@1100525011 : Decimal;VAR OReceivedNotInvoicedHours@1100525010 : Decimal;VAR OOpenInventory@1100525009 : Decimal;VAR ORevenue@1100525008 : Decimal;VAR OInvoicePrice@1100525007 : Decimal;VAR OInvoiceInProcess@1100525006 : Decimal;VAR OInvoicedPrice@1100525005 : Decimal;VAR OOpenOvhSurchSoftPurchase@1100525004 : Decimal;VAR OOpenOvhSurchFirmPurchase@1100525003 : Decimal;VAR OOpenOvhSurchHours@1100525002 : Decimal;VAR OOpenOvhSurchInventory@1100525001 : Decimal;VAR OBudgetHours@1100525017 : Decimal;VAR OActualHours@1100525018 : Decimal) : Decimal;
    VAR
      ServiceOrder@1100525016 : Record 11012823;
    BEGIN
      OBudgetAmount := 0;
      OActualCost := 0;
      OOpenPurchase := 0;
      OReceivedNotInvoicedPurchase := 0;
      OOpenAmountHours := 0;
      OReceivedNotInvoicedHours := 0;
      OOpenInventory := 0;
      ORevenue := 0;
      OInvoicePrice := 0;
      OInvoiceInProcess := 0;
      OInvoicedPrice := 0;
      OOpenOvhSurchSoftPurchase := 0;
      OOpenOvhSurchFirmPurchase := 0;
      OOpenOvhSurchHours := 0;
      OOpenOvhSurchInventory := 0;
      OBudgetHours := 0;
      OActualHours := 0;

      ServiceOrder.COPY(IServiceOrderRecSet);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceOrder.CALCFIELDS(
            "Budget Amount", "Actual Costs", "Open (Purchase)", "Received/Not Invoiced", "Open Amount (Hours)",
            "Received/Not Inv. Hours", "Open (Inventory)", Revenues, "Invoice Price", "Invoice in Process",
            "Invoiced Price", "Open Ovh. Surch. Soft (Purch.)", "Open Ovh. Surch. Firm (Purch.)",
            "Open Ovh. Surch. (Hours)", "Open Ovh. Surch. (Inventory)", "Budget Hours", "Actual Hours");

          OBudgetAmount += ServiceOrder."Budget Amount";
          OActualCost += ServiceOrder."Actual Costs";
          OOpenPurchase += ServiceOrder."Open (Purchase)";
          OReceivedNotInvoicedPurchase += ServiceOrder."Received/Not Invoiced";
          OOpenAmountHours += ServiceOrder."Open Amount (Hours)";
          OReceivedNotInvoicedHours += ServiceOrder."Received/Not Inv. Hours";
          OOpenInventory += ServiceOrder."Open (Inventory)";
          ORevenue += ServiceOrder.Revenues;
          OInvoicePrice += ServiceOrder."Invoice Price";
          OInvoiceInProcess += ServiceOrder."Invoice in Process";
          OInvoicedPrice += ServiceOrder."Invoiced Price";
          OOpenOvhSurchSoftPurchase += ServiceOrder."Open Ovh. Surch. Soft (Purch.)";
          OOpenOvhSurchFirmPurchase += ServiceOrder."Open Ovh. Surch. Firm (Purch.)";
          OOpenOvhSurchHours += ServiceOrder."Open Ovh. Surch. (Hours)";
          OOpenOvhSurchInventory += ServiceOrder."Open Ovh. Surch. (Inventory)";
          OBudgetHours += ServiceOrder."Budget Hours";
          OActualHours += ServiceOrder."Actual Hours";
        UNTIL ServiceOrder.NEXT = 0;
    END;

    PROCEDURE GetDSOpenSOsBySourceType@1100409001(ILocationNo@1100409000 : Code[20];ISourceType@1100409004 : Option;VAR OServiceOrder@1100409002 : Record 11012823);
    VAR
      ServiceSetup@1100409003 : Record 11012800;
    BEGIN
      ServiceSetup.GET;
      OServiceOrder.RESET;
      OServiceOrder.FILTERGROUP(7);
      OServiceOrder.SETCURRENTKEY("Service Location No.", Status, "Starting Date");
      OServiceOrder.SETRANGE("Service Location No.", ILocationNo);
      OServiceOrder.SETFILTER(Status, '<%1', OServiceOrder.Status::"Technical Finished");
      OServiceOrder.SETFILTER("Starting Date", '<=%1', TODAY + ServiceSetup."Service Order Window");
      IF ISourceType >= 0 THEN
        OServiceOrder.SETRANGE("Source Type", ISourceType);
      OServiceOrder.FILTERGROUP(0);
    END;

    PROCEDURE GetDSOpenSOs@1100409006(ILocationNo@1100409002 : Code[20];VAR OServiceOrder@1100409000 : Record 11012823);
    BEGIN
      GetDSOpenSOsBySourceType(ILocationNo, -1, OServiceOrder);
    END;

    PROCEDURE GetDSSOsBySourceType@1100525003(ILocationNo@1100409002 : Code[20];ISourceType@1100525000 : Option;VAR OServiceOrder@1100409000 : Record 11012823);
    BEGIN
      OServiceOrder.RESET;
      OServiceOrder.FILTERGROUP(7);
      OServiceOrder.SETCURRENTKEY("Service Location No.", Status, "Starting Date");
      OServiceOrder.SETRANGE("Service Location No.", ILocationNo);
      IF ISourceType >= 0 THEN
        OServiceOrder.SETRANGE("Source Type", ISourceType);
      OServiceOrder.FILTERGROUP(0);
    END;

    PROCEDURE GetNoOfOpenSOsBySourceType@1100409000(ILocationNo@1100409000 : Code[20];ISourceType@1100409003 : Option) : Integer;
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      IF (ILocationNo = '') THEN EXIT(0);  //C026680
      GetDSOpenSOsBySourceType(ILocationNo, ISourceType, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE GetNoOfOpenSOs@1100409007(ILocationNo@1100409000 : Code[20]) : Integer;
    VAR
      ServiceOrder@1100409001 : Record 11012823;
    BEGIN
      IF (ILocationNo = '') THEN EXIT(0);  //C026680
      GetDSOpenSOs(ILocationNo, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE GetNoOfSOsBySourceType@1100525008(ILocationNo@1100525000 : Code[20];ISourceType@1100525001 : Option) : Integer;
    VAR
      ServiceOrder@1100525002 : Record 11012823;
    BEGIN
      IF (ILocationNo = '') THEN EXIT(0);  //C026680
      GetDSSOsBySourceType(ILocationNo, ISourceType, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE GetNoOfServiceOrders@1100525004(ILocationNo@1100525001 : Code[20]) : Integer;
    BEGIN
      EXIT(GetNoOfSOsBySourceType(ILocationNo, -1));
    END;

    PROCEDURE ShowOpenSOsBySourceType@1100409002(ILocationNo@1100409001 : Code[20];ISourceType@1100409003 : Option);
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      GetDSOpenSOsBySourceType(ILocationNo, ISourceType, ServiceOrder);
      PAGE.RUNMODAL(0, ServiceOrder);
    END;

    PROCEDURE ShowOpenSOs@1100409008(ILocationNo@1100409000 : Code[20]);
    VAR
      ServiceOrder@1100409001 : Record 11012823;
    BEGIN
      GetDSOpenSOs(ILocationNo, ServiceOrder);
      PAGE.RUNMODAL(0, ServiceOrder);
    END;

    PROCEDURE ShowSOsBySourceType@1100525011(ILocationNo@1100525001 : Code[20];ISourceType@1100525000 : Option);
    VAR
      ServiceOrder@1100525002 : Record 11012823;
    BEGIN
      GetDSSOsBySourceType(ILocationNo, ISourceType, ServiceOrder);
      PAGE.RUNMODAL(0, ServiceOrder);
    END;

    PROCEDURE ShowServiceorders@1100525005(ILocationNo@1100525001 : Code[20]);
    BEGIN
      ShowSOsBySourceType(ILocationNo, -1);
    END;

    PROCEDURE GetDataSetHistorySOs@1100409005(ILocationNo@1100409000 : Code[20];VAR OServiceOrder@1100409002 : Record 11012823);
    VAR
      ServiceSetup@1100409003 : Record 11012800;
    BEGIN
      ServiceSetup.GET;
      OServiceOrder.RESET;
      OServiceOrder.FILTERGROUP(7);
      OServiceOrder.SETCURRENTKEY("Service Location No.", Status, "Starting Date");
      OServiceOrder.SETRANGE("Service Location No.", ILocationNo);
      OServiceOrder.SETFILTER(Status, '>=%1', OServiceOrder.Status::"Technical Finished");
      OServiceOrder.SETFILTER("Starting Date", '>=%1', TODAY - ServiceSetup."Service Order Window Before");
      OServiceOrder.FILTERGROUP(0);
    END;

    PROCEDURE GetNoOfHistorySOs@1100409004(ILocationNo@1100409000 : Code[20]) : Integer;
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      IF (ILocationNo = '') THEN EXIT(0);  //C026680
      GetDataSetHistorySOs(ILocationNo, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE ShowHistorySOs@1100409003(ILocationNo@1100409001 : Code[20]);
    VAR
      ServiceOrder@1100409002 : Record 11012823;
    BEGIN
      GetDataSetHistorySOs(ILocationNo, ServiceOrder);
      PAGE.RUNMODAL(0, ServiceOrder);
    END;

    PROCEDURE GetNoOfRelatedObjects@1100525002(ILocationNo@1100525000 : Code[20]) : Integer;
    VAR
      ServiceLocation@1100525001 : Record 11012801;
      ServiceObject@1100525002 : Record 11071691;
    BEGIN
      IF NOT ServiceLocation.GET(ILocationNo) THEN
        EXIT;
      ServiceLocation.GetRelatedObjects(ServiceObject);
      EXIT(ServiceObject.COUNT);
    END;

    PROCEDURE GetDSCalls@1100525006(ILocationNo@1100525001 : Code[20];VAR OServiceCall@1100525002 : Record 11012822);
    BEGIN
      OServiceCall.RESET;
      OServiceCall.FILTERGROUP(7);
      OServiceCall.SETCURRENTKEY("Service Location No.");
      OServiceCall.SETRANGE("Service Location No.", ILocationNo);
      OServiceCall.FILTERGROUP(0);
    END;

    PROCEDURE GetDSOpenCalls@1100525007(ILocationNo@1100525001 : Code[20];VAR OServiceCall@1100525000 : Record 11012822);
    BEGIN
      OServiceCall.RESET;
      OServiceCall.FILTERGROUP(7);
      OServiceCall.SETCURRENTKEY("Service Location No.");
      OServiceCall.SETRANGE("Service Location No.", ILocationNo);
      OServiceCall.SETFILTER(Status, '<%1', OServiceCall.Status::Finished);
      OServiceCall.FILTERGROUP(0);
    END;

    PROCEDURE GetDSOpenCallsSamePC@1100528608(ILocationNo@1100525001 : Code[20];VAR OServiceCall@1100525000 : Record 11012822);
    VAR
      ServiceLocation@1100528600 : Record 11012801;
      ServiceCall@1100528601 : Record 11012822;
    BEGIN
      OServiceCall.RESET;
      ServiceCall.SETCURRENTKEY("Service Location No.");
      ServiceLocation.GET(ILocationNo);
      ServiceLocation.SETCURRENTKEY("Post Code");
      ServiceLocation.SETRANGE("Post Code", ServiceLocation."Post Code");
      IF ServiceLocation.FINDSET THEN
        REPEAT
          ServiceCall.SETRANGE("Service Location No.", ServiceLocation."No.");
          ServiceCall.SETFILTER(Status, '<%1', ServiceCall.Status::Finished);
          IF ServiceCall.FINDSET THEN
            REPEAT
              OServiceCall."No." := ServiceCall."No.";
              OServiceCall.MARK(TRUE);
            UNTIL ServiceCall.NEXT = 0;
        UNTIL ServiceLocation.NEXT = 0;
      OServiceCall.MARKEDONLY(TRUE);
    END;

    PROCEDURE GetNoOfCalls@1100525013(ILocationNo@1100525000 : Code[20]) : Integer;
    VAR
      ServiceCall@1100525001 : Record 11012822;
    BEGIN
      IF (ILocationNo = '') THEN EXIT(0);  //C026680
      GetDSCalls(ILocationNo, ServiceCall);
      EXIT(ServiceCall.COUNT);
    END;

    PROCEDURE GetNoOfOpenCalls@1100525014(ILocationNo@1100525000 : Code[20]) : Integer;
    VAR
      ServiceCall@1100525001 : Record 11012822;
    BEGIN
      IF (ILocationNo = '') THEN EXIT(0);  //C026680
      GetDSOpenCalls(ILocationNo, ServiceCall);
      EXIT(ServiceCall.COUNT);
    END;

    PROCEDURE GetNoOfOpenCallsSamePC@1100528607(ILocationNo@1100525000 : Code[20]) : Integer;
    VAR
      ServiceCall@1100525001 : Record 11012822;
    BEGIN
      IF (ILocationNo = '') THEN EXIT(0);  //C026680
      GetDSOpenCallsSamePC(ILocationNo, ServiceCall);
      EXIT(ServiceCall.COUNT);
    END;

    PROCEDURE ShowCalls@1100525015(ILocationNo@1100525000 : Code[20]);
    VAR
      ServiceCall@1100525001 : Record 11012822;
    BEGIN
      GetDSCalls(ILocationNo, ServiceCall);
      PAGE.RUNMODAL(0, ServiceCall);
    END;

    PROCEDURE ShowOpenCalls@1100525016(ILocationNo@1100525000 : Code[20]);
    VAR
      ServiceCall@1100525001 : Record 11012822;
    BEGIN
      GetDSOpenCalls(ILocationNo, ServiceCall);
      PAGE.RUNMODAL(0, ServiceCall);
    END;

    PROCEDURE ShowOpenCallsSamePC@1100528606(ILocationNo@1100525000 : Code[20]);
    VAR
      ServiceCall@1100525001 : Record 11012822;
    BEGIN
      GetDSOpenCallsSamePC(ILocationNo, ServiceCall);
      PAGE.RUNMODAL(0, ServiceCall);
    END;

    PROCEDURE GetDSHistoryCalls@1100528604(ILocationNo@1100528601 : Code[20];VAR OServiceCall@1100528600 : Record 11012822);
    BEGIN
      OServiceCall.SETCURRENTKEY("Service Location No.");
      OServiceCall.SETRANGE("Service Location No.", ILocationNo);
      OServiceCall.SETFILTER(Status, '>=%1', OServiceCall.Status::Finished);
    END;

    PROCEDURE GetNoOfHistoryCalls@1100528603(ILocationNo@1100528600 : Code[20]) : Integer;
    VAR
      ServiceCall@1100528601 : Record 11012822;
    BEGIN
      IF (ILocationNo = '') THEN EXIT(0);  //C026680
      GetDSHistoryCalls(ILocationNo, ServiceCall);
      EXIT(ServiceCall.COUNT);
    END;

    PROCEDURE ShowHistoryCalls@1100528605(ILocationNo@1100528600 : Code[20]);
    VAR
      ServiceCall@1100528601 : Record 11012822;
    BEGIN
      GetDSHistoryCalls(ILocationNo, ServiceCall);
      PAGE.RUNMODAL(0, ServiceCall);
    END;

    PROCEDURE GetDSCommentLines@1100528601(ILocationNo@1100528600 : Code[20];VAR OCommentLine@1100528601 : Record 97);
    BEGIN
      OCommentLine.SETRANGE("Table Name", OCommentLine."Table Name"::"Service Location");
      OCommentLine.SETRANGE("No.", ILocationNo);
    END;

    PROCEDURE GetNoOfCommentLines@1100528600(ILocationNo@1100528600 : Code[20]) : Integer;
    VAR
      CommentLine@1100528601 : Record 97;
    BEGIN
      IF (ILocationNo = '') THEN EXIT(0);  //C026680
      GetDSCommentLines(ILocationNo, CommentLine);
      EXIT(CommentLine.COUNT);
    END;

    PROCEDURE ShowCommentLines@1100528602(ILocationNo@1100528600 : Code[20]);
    VAR
      CommentLine@1100528601 : Record 97;
    BEGIN
      GetDSCommentLines(ILocationNo, CommentLine);
      PAGE.RUNMODAL(0, CommentLine);
    END;

    PROCEDURE EditCommentLines@1100528610(ILocationNo@1100528600 : Code[20]);
    VAR
      CommentLine@1100528601 : Record 97;
    BEGIN
      GetDSCommentLines(ILocationNo, CommentLine);
      PAGE.RUNMODAL(PAGE::"Comment Sheet", CommentLine);
    END;

    PROCEDURE GetNoOfDocuments@1100526206(ILocationNo@1100528600 : Code[20]) : Integer;
    VAR
      ServiceLocation@1100528601 : Record 11012801;
      RecRef@1100526200 : RecordRef;
      DocumentLinkManagementCU@1100526201 : Codeunit 11012401;
    BEGIN
      IF (ILocationNo = '') OR NOT ServiceLocation.GET(ILocationNo) THEN
        EXIT;
      RecRef.GETTABLE(ServiceLocation);
      EXIT(DocumentLinkManagementCU.GetInfo(RecRef));
    END;

    PROCEDURE ShowDocuments@1100526207(ILocationNo@1100528600 : Code[20]);
    VAR
      ServiceLocation@1100528601 : Record 11012801;
      DocumentLinkManagementCU@1100526200 : Codeunit 11012401;
      RecRef@1100526202 : RecordRef;
    BEGIN
      IF (ILocationNo = '') OR NOT ServiceLocation.GET(ILocationNo) THEN
        EXIT;
      RecRef.GETTABLE(ServiceLocation);
      DocumentLinkManagementCU.OpenDocumentPropertiesLookup(RecRef, '');
    END;

    PROCEDURE GetServiceContractsByLocation@1100528800(VAR ServiceContract@1100528800 : Record 11012812;ServiceLocation@1100528801 : Record 11012801;ActualDate@1100528805 : Date);
    VAR
      ServiceObject@1100528802 : Record 11071691;
      MaintenanceManagement@1100528803 : Codeunit 11012829;
      ActualContractNo@1100528804 : Code[20];
    BEGIN
      ServiceLocation.GET(ServiceLocation."No.");
      ServiceLocation.GetRelatedObjects(ServiceObject);
      IF ServiceObject.FINDSET THEN
        REPEAT
          ActualContractNo := MaintenanceManagement.GetActualContractForObject(ServiceObject."No.", ActualDate);
         IF ActualContractNo <> '' THEN BEGIN
            ServiceContract."No." := ActualContractNo;
            ServiceContract.MARK(TRUE);
        END;
        UNTIL ServiceObject.NEXT = 0;
      ServiceContract.MARKEDONLY(TRUE);
    END;

    PROCEDURE GetNextMaintenanceDate@1100528609(IServiceLocationNo@1100528600 : Code[20];VAR OServiceOrderNo@1100528601 : Code[20]) NextMaintenanceDate : Date;
    VAR
      ServiceContractArrangement@1100528602 : Record 11071705;
    BEGIN
      ServiceContractArrangement.SETCURRENTKEY("Service Location No.");
      ServiceContractArrangement.SETRANGE("Service Location No.", IServiceLocationNo);
      ServiceContractArrangement.SETRANGE(Finished, FALSE);
      IF ServiceContractArrangement.FINDSET THEN
        REPEAT
          IF NOT ServiceContractArrangement.IsMaintPropLineExpired THEN BEGIN
            ServiceContractArrangement.CALCFIELDS("Service Order No.");
            OServiceOrderNo := ServiceContractArrangement."Service Order No.";
            IF OServiceOrderNo = '' THEN BEGIN
              ServiceContractArrangement.CALCFIELDS("Planned Maintenance Date");
              IF ServiceContractArrangement."Planned Maintenance Date" <> 0D THEN BEGIN
                IF (ServiceContractArrangement."Planned Maintenance Date" < NextMaintenanceDate) OR
                   (NextMaintenanceDate = 0D)
                THEN
                  NextMaintenanceDate := ServiceContractArrangement."Planned Maintenance Date"
              END ELSE
                IF (ServiceContractArrangement."Theoretical Maintenance Date" <> 0D) AND
                   ((ServiceContractArrangement."Theoretical Maintenance Date" < NextMaintenanceDate) OR
                    (NextMaintenanceDate = 0D))
                THEN
                  NextMaintenanceDate := ServiceContractArrangement."Theoretical Maintenance Date";
            END ELSE BEGIN
              ServiceContractArrangement.CALCFIELDS("Service Order Starting Date");
              IF (ServiceContractArrangement."Service Order Starting Date" <> 0D) AND
                 ((ServiceContractArrangement."Service Order Starting Date" < NextMaintenanceDate) OR
                  (NextMaintenanceDate = 0D))
              THEN
                NextMaintenanceDate := ServiceContractArrangement."Service Order Starting Date";
            END
          END;
        UNTIL ServiceContractArrangement.NEXT = 0;
    END;

    PROCEDURE GetActualContractFromLocation@1100409009(ServiceLocationNo@1100409000 : Code[20];ServiceObjectNo@1100409001 : Code[20];ActualDate@1100409004 : Date) : Code[20];
    VAR
      ServiceLocation@1100525004 : Record 11012801;
      ServiceObject@1100525003 : Record 11071691;
      ContractFound@1100525002 : Boolean;
      ActualServiceContractNo@1100525001 : Code[20];
      PrevActualServiceContractNo@1100525000 : Code[20];
      MaintenanceManagement@1100525005 : Codeunit 11012829;
    BEGIN
      IF ServiceLocationNo = '' THEN
        EXIT;
      IF ServiceObjectNo <> '' THEN BEGIN
        IF ServiceObject.GET(ServiceObjectNo) THEN BEGIN
          MaintenanceManagement.GetNoOfActualContractsForObj(ServiceObject."No.", ActualDate, ActualServiceContractNo);
          EXIT(ActualServiceContractNo);
        END;
      END;
      ServiceLocation.GET(ServiceLocationNo);
      ServiceLocation.GetRelatedObjects(ServiceObject);
      ServiceObject.SETRANGE(Blocked, FALSE);
      IF ServiceObject.FINDSET THEN BEGIN
        ContractFound := TRUE;
        REPEAT
          MaintenanceManagement.GetNoOfActualContractsForObj(ServiceObject."No.", ActualDate, ActualServiceContractNo);
          IF ActualServiceContractNo = '' THEN
            ContractFound := FALSE
          ELSE BEGIN
            IF PrevActualServiceContractNo = '' THEN
              PrevActualServiceContractNo := ActualServiceContractNo
            ELSE BEGIN
              IF ActualServiceContractNo <> PrevActualServiceContractNo THEN
                ContractFound := FALSE;
            END;
          END;
        UNTIL (ServiceObject.NEXT = 0) OR NOT ContractFound;
        IF ContractFound THEN
          EXIT(ActualServiceContractNo);
      END;
    END;

    PROCEDURE GetDSSalesOrders@1100528400(ILocationNo@1100409002 : Code[20];VAR OSalesHeader@1100409000 : Record 36);
    VAR
      SalesHeaderExtension@1100528400 : Record 11071868;
    BEGIN
      OSalesHeader.RESET;
      SalesHeaderExtension.SETCURRENTKEY("Document Type", "Service Location No.");
      SalesHeaderExtension.SETRANGE("Document Type", SalesHeaderExtension."Document Type"::Order);
      SalesHeaderExtension.SETRANGE("Service Location No.", ILocationNo);
      IF SalesHeaderExtension.FINDSET THEN
        REPEAT
          OSalesHeader."Document Type" := SalesHeaderExtension."Document Type";
          OSalesHeader."No." := SalesHeaderExtension."Document No.";
          OSalesHeader.MARK(TRUE);
        UNTIL SalesHeaderExtension.NEXT = 0;
      OSalesHeader.MARKEDONLY(TRUE);
    END;

    PROCEDURE GetNoOfSalesOrders@1100528401(IServiceLocationNo@1100528400 : Code[20]) : Integer;
    VAR
      SalesHeader@1100528401 : Record 36;
    BEGIN
      IF IServiceLocationNo = '' THEN
        EXIT(0);
      GetDSSalesOrders(IServiceLocationNo, SalesHeader);
      EXIT(SalesHeader.COUNT);
    END;

    PROCEDURE ShowSalesOrders@1100528402(IServiceLocationNo@1100528400 : Code[20]);
    VAR
      SalesHeader@1100528402 : Record 36;
    BEGIN
      GetDSSalesOrders(IServiceLocationNo, SalesHeader);
      PAGE.RUN(PAGE::"Sales Order List", SalesHeader);
    END;

    PROCEDURE GetNoOfOpenDefects@1100528500(LocationCode@1100525000 : Code[20]) : Integer;
    VAR
      NEN2767LTMPLine@1100525001 : Record 11128785;
    BEGIN
      //DP01529
      IF (LocationCode = '') THEN
        EXIT(0);
      FilterOpenDefects(LocationCode,NEN2767LTMPLine);
      EXIT(NEN2767LTMPLine.COUNT);
    END;

    PROCEDURE ShowOpenDefects@1100528501(LocationCode@1100528600 : Code[20]);
    VAR
      NEN2767LTMPLine@1100528500 : Record 11128785;
    BEGIN
      //DP01529
      FilterOpenDefects(LocationCode,NEN2767LTMPLine);
      PAGE.RUNMODAL(PAGE::"NEN2767 Defects and Measures",NEN2767LTMPLine);
    END;

    LOCAL PROCEDURE FilterOpenDefects@1100528502(LocationCode@1100528501 : Code[20];VAR NEN2767LTMPLine@1100528500 : Record 11128785);
    BEGIN
      //DP01529
      NEN2767LTMPLine.SETRANGE("Location Type",NEN2767LTMPLine."Location Type"::"Service Location");
      NEN2767LTMPLine.SETRANGE("Location Code",LocationCode);
      NEN2767LTMPLine.SETRANGE(Status,NEN2767LTMPLine.Status::Open);
    END;

    BEGIN
    END.
  }
}

