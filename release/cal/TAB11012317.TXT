OBJECT Table 11012317 Trade Item
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               TESTFIELD(Vendor);
               TESTFIELD("Item Code");
             END;

    OnDelete=VAR
               OperationCodeByItem@1100529600 : Record 11229436;
             BEGIN
               ReplaceItemRec.ReplaceTradeItem(Rec, TRUE);

               PriceHistRec.SETRANGE("Item Code", "Item Code");
               PriceHistRec.SETRANGE(Vendor, Vendor);
               PriceHistRec.DELETEALL;

               DiscHistRec.SETRANGE("Item Code", "Item Code");
               DiscHistRec.SETRANGE(Vendor, Vendor);
               DiscHistRec.DELETEALL(TRUE);

               ChargeRec.SETRANGE("Item Code", "Item Code");
               ChargeRec.SETRANGE(Vendor, Vendor);
               ChargeRec.DELETEALL;

               LinkedTradeItem.RESET;
               LinkedTradeItem.SETRANGE(Vendor, Vendor);
               LinkedTradeItem.SETRANGE("Main Trade Item", "Item Code");
               LinkedTradeItem.DELETEALL;
               LinkedTradeItem.SETRANGE("Main Trade Item");
               LinkedTradeItem.SETRANGE("Trade Item", "Item Code");
               LinkedTradeItem.DELETEALL;

               OperationCodeByItem.SETRANGE("Vendor (Trade Item)", Vendor);
               OperationCodeByItem.SETRANGE("Item Code", "Item Code");
               OperationCodeByItem.DELETEALL;
             END;

    CaptionML=[ENU=Trade Item;
               NOR=Katalogartikkel;
               SVE=Anskaffningsartikel];
    LookupPageID=Page11012334;
  }
  FIELDS
  {
    { 10  ;   ;Product Code        ;Code20        ;TableRelation="Basic Item"."Product Code" WHERE (Manufacturer=FIELD(Manufacturer));
                                                   CaptionML=[ENU=Product Code;
                                                              NOR=Produktkode;
                                                              SVE=Produktkod] }
    { 20  ;   ;Manufacturer        ;Code15        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   CaptionML=[ENU=Manufacturer;
                                                              NOR=Produsent;
                                                              SVE=Tillverkare] }
    { 30  ;   ;Item Code           ;Code20        ;AltSearchField=Search Argument;
                                                   CaptionML=[ENU=Item Code;
                                                              NOR=Artikkelkode;
                                                              SVE=Artikelkod];
                                                   NotBlank=Yes }
    { 40  ;   ;Vendor              ;Code15        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   CaptionML=[ENU=Vendor;
                                                              NOR=Leverand›r;
                                                              SVE=Leverant”r];
                                                   NotBlank=Yes }
    { 50  ;   ;GTIN Code (Item)    ;Code20        ;CaptionML=[ENU=GTIN Code (Item);
                                                              NOR=GTIN-kode (Artikkel);
                                                              SVE=GTIN-kod (artikel)] }
    { 51  ;   ;GTIN Code (Product) ;Code20        ;CaptionML=[ENU=GTIN Code (Product);
                                                              NOR=GTIN-kode (Produkt);
                                                              SVE=GTIN-kod (produkt)] }
    { 55  ;   ;CBS Code            ;Code20        ;CaptionML=[ENU=CBS Code;
                                                              NOR=CBS-kode;
                                                              SVE=CBS-kod] }
    { 60  ;   ;Processable         ;Boolean       ;CaptionML=[ENU=Processable;
                                                              NOR=Prosseserbar;
                                                              SVE=Behandlingsbar] }
    { 65  ;   ;Deliverable         ;Boolean       ;CaptionML=[ENU=Deliverable;
                                                              NOR=Leverbar;
                                                              SVE=Levererbart] }
    { 75  ;   ;Application ID      ;Code10        ;TableRelation="ETIM Unit";
                                                   OnValidate=VAR
                                                                ETIMUnit@1100527000 : Record 11012307;
                                                              BEGIN
                                                                IF ETIMUnit.GET("Application ID") THEN
                                                                  IF ETIMUnit."Unit (NAV)" <> '' THEN
                                                                    VALIDATE("Application Unit", ETIMUnit."Unit (NAV)");
                                                              END;

                                                   CaptionML=[ENU=Application ID;
                                                              NOR=Program-ID;
                                                              SVE=Program-ID] }
    { 80  ;   ;Purchase ID         ;Code10        ;TableRelation="ETIM Unit";
                                                   OnValidate=BEGIN
                                                                IF "Purchase ID" <> '' THEN
                                                                  ERROR('Veld Purchase ID (besteleenheid) vervallen met ingang van pab2.0; vervangend veld: Order ID (afname-eenheid)');
                                                              END;

                                                   CaptionML=[ENU=Purchase ID;
                                                              NOR=Innkj›ps-ID;
                                                              SVE=Ink”ps-ID];
                                                   Description=expired from pab2.0 (see Order ID) }
    { 85  ;   ;Order ID            ;Code10        ;TableRelation="ETIM Unit";
                                                   OnValidate=VAR
                                                                ETIMUnit@1100527000 : Record 11012307;
                                                              BEGIN
                                                                IF ETIMUnit.GET("Order ID") THEN
                                                                  IF ETIMUnit."Unit (NAV)" <> '' THEN
                                                                    VALIDATE("Packaging Unit", ETIMUnit."Unit (NAV)");
                                                              END;

                                                   CaptionML=[ENU=Order ID;
                                                              NOR=Ordre-ID;
                                                              SVE=Order-ID] }
    { 90  ;   ;Minimum Order Quantity;Decimal     ;CaptionML=[ENU=Minimum Order Quantity;
                                                              NOR=Min. bestillingsantall;
                                                              SVE=Min. partistorlek];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 95  ;   ;Factor Price-Purchase Unit;Decimal ;CaptionML=[ENU=Factor Price-Purchase Unit;
                                                              NOR=Faktorpris Í Innkj›psenhet;
                                                              SVE=Faktorpris Í ink”psenhet];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 100 ;   ;Item Code (Successor);Code20       ;CaptionML=[ENU=Item Code (Successor);
                                                              NOR=Artikkelkode (Etterf›lger);
                                                              SVE=Artikelkod (efterf”ljande)] }
    { 101 ;   ;Item Code (Predecessor);Code20     ;CaptionML=[ENU=Item Code (Predecessor);
                                                              NOR=Artikkelkode (Forgjenger);
                                                              SVE=Artikelkod (f”reg†ende)] }
    { 102 ;   ;Item Code (Manufacturer);Code20    ;CaptionML=[ENU=Item Code (Manufacturer);
                                                              NOR=Artikkelkode (fabrikant);
                                                              SVE=Artikelkod (tillverkare)] }
    { 105 ;   ;GTIN Code (Successor);Code20       ;CaptionML=[ENU=GTIN Code (Successor);
                                                              NOR=GTIN-kode (Etterf›lger);
                                                              SVE=GTIN-kod (efterf”ljande)] }
    { 106 ;   ;GTIN Code (Predecessor);Code20     ;CaptionML=[ENU=GTIN Code (Predecessor);
                                                              NOR=GTIN-kode (Forgjenger);
                                                              SVE=GTIN-kod (f”reg†ende)] }
    { 107 ;   ;GTIN Code (Manufacturer);Code20    ;CaptionML=[ENU=GTIN Code (Manufacturer);
                                                              NOR=GTIN-kode (fabrikant);
                                                              SVE=GTIN-kod (tillverkare)] }
    { 110 ;   ;Lot Size Quantity   ;Decimal       ;CaptionML=[ENU=Lot Size Quantity;
                                                              NOR=Partist›rrelse antall;
                                                              SVE=Partistorleksantal];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 115 ;   ;Application Unit Quantity;Decimal  ;CaptionML=[ENU=Application Unit Quantity;
                                                              NOR=Programenhet, antall;
                                                              SVE=Programenhet, antal];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 120 ;   ;Discount Group Code ;Code35        ;TableRelation="Discount Term History"."Discount Group" WHERE (Vendor=FIELD(Vendor),
                                                                                                                 Discount Level=CONST(Company));
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Discount Group Code;
                                                              NOR=Rabattgruppekode;
                                                              SVE=Rabattgruppskod] }
    { 130 ;   ;Delivery Period     ;Decimal       ;CaptionML=[ENU=Delivery Period;
                                                              NOR=Leveranseperiode;
                                                              SVE=Leveransperiod];
                                                   BlankZero=Yes }
    { 134 ;   ;Delivery Time ID    ;Code10        ;TableRelation="ETIM Unit";
                                                   CaptionML=[ENU=Delivery Time ID;
                                                              NOR=Leveransetid-ID;
                                                              SVE=Leveranstid-ID] }
    { 135 ;   ;Delivery Time Unit  ;Text10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("ETIM Unit"."Unit of Measure" WHERE (Code=FIELD(Delivery Time ID)));
                                                   CaptionML=[ENU=Delivery Time Unit;
                                                              NOR=Leveransetidsenhet;
                                                              SVE=Leveranstidsenhet];
                                                   Description=NAVISION;
                                                   Editable=No }
    { 140 ;   ;Delivery Group Code ;Code35        ;TableRelation="Delivery Group".Code WHERE (Vendor=FIELD(Vendor));
                                                   CaptionML=[ENU=Delivery Group Code;
                                                              NOR=Leveransegruppekode;
                                                              SVE=Leveransgruppkod];
                                                   Description=DP00065 }
    { 150 ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              NOR=Bruttovekt;
                                                              SVE=Bruttovikt];
                                                   BlankZero=Yes }
    { 155 ;   ;Weight ID           ;Code10        ;TableRelation="ETIM Unit";
                                                   CaptionML=[ENU=Weight ID;
                                                              NOR=Vekt-ID;
                                                              SVE=Vikt-ID] }
    { 160 ;   ;Weight Unit         ;Text10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("ETIM Unit"."Unit of Measure" WHERE (Code=FIELD(Weight ID)));
                                                   CaptionML=[ENU=Weight Unit;
                                                              NOR=Vektenhet;
                                                              SVE=Viktenhet];
                                                   Description=NAVISION;
                                                   Editable=No }
    { 170 ;   ;Packaging Code      ;Code10        ;TableRelation="ETIM Package".Code;
                                                   CaptionML=[ENU=Packaging Code;
                                                              NOR=Emballasjekode;
                                                              SVE=F”rpackningskod] }
    { 180 ;   ;Length              ;Decimal       ;CaptionML=[ENU=Length;
                                                              NOR=Lengde;
                                                              SVE=L„ngd];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 190 ;   ;Width               ;Decimal       ;CaptionML=[ENU=Width;
                                                              NOR=Bredde;
                                                              SVE=Bredd];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 200 ;   ;Height              ;Decimal       ;CaptionML=[ENU=Height;
                                                              NOR=H›yde;
                                                              SVE=H”jd];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 205 ;   ;Size ID             ;Code10        ;TableRelation="ETIM Unit";
                                                   CaptionML=[ENU=Size ID;
                                                              NOR=St›rrelse-ID;
                                                              SVE=Storleks-ID] }
    { 210 ;   ;Size Unit           ;Text10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("ETIM Unit"."Unit of Measure" WHERE (Code=FIELD(Size ID)));
                                                   CaptionML=[ENU=Size Unit;
                                                              NOR=St›rrelse-enhet;
                                                              SVE=Storleksenhet];
                                                   Description=NAVISION;
                                                   Editable=No }
    { 215 ;   ;Packaging Unit      ;Text10        ;OnValidate=VAR
                                                                UnitofMeasure@1100527000 : Record 204;
                                                              BEGIN
                                                                IF "Packaging Unit" <> '' THEN
                                                                  UnitofMeasure.GET("Packaging Unit");
                                                              END;

                                                   CaptionML=[ENU=Packaging Unit;
                                                              NOR=Pakkeenhet;
                                                              SVE=F”rpackningsenhet];
                                                   Description=NAVISION }
    { 220 ;   ;Status Code         ;Code10        ;CaptionML=[ENU=Status Code;
                                                              NOR=Statuskode;
                                                              SVE=Statuskod] }
    { 225 ;   ;Starting Date Item  ;Date          ;CaptionML=[ENU=Starting Date Item;
                                                              NOR=Startdatoartikkel;
                                                              SVE=Startdatumsartikel] }
    { 230 ;   ;Item Description    ;Text50        ;CaptionML=[ENU=Item Description;
                                                              NOR=Artikkelbeskrivelse;
                                                              SVE=Artikelbeskrivning] }
    { 235 ;   ;Item Description 2  ;Text50        ;CaptionML=[ENU=Item Description 2;
                                                              NOR=Artikkelbeskrivelse 2;
                                                              SVE=Artikelbeskrivning 2];
                                                   Description=NAVISION }
    { 240 ;   ;Gross Price         ;Decimal       ;CaptionML=[ENU=Gross Price;
                                                              NOR=Bruttopris;
                                                              SVE=Bruttopris];
                                                   Description=NAVISION (import pab2.0);
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 241 ;   ;Net Price           ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Net Price") THEN
                                                                   CalcDiscPrice := TRUE;

                                                                IF CalcDiscPrice = TRUE THEN BEGIN
                                                                  IF "Gross Price" = 0 THEN
                                                                    "Discount Percentage" := 0
                                                                  ELSE
                                                                    "Discount Percentage" := ROUND(100 * ("Gross Price" - "Net Price") / "Gross Price", 0.00001);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Net Price;
                                                              NOR=Nettopris;
                                                              SVE=Nettopris];
                                                   Description=NAVISION (import pab2.0);
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 242 ;   ;Discount Percentage ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Discount Percentage") THEN
                                                                   CalcDiscPrice := TRUE;

                                                                IF CalcDiscPrice = TRUE THEN BEGIN
                                                                  GLSetup.GET;
                                                                  "Net Price" :=
                                                                  ROUND("Gross Price" * (100-"Discount Percentage")/100, GLSetup."Unit-Amount Rounding Precision");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Discount Percentage;
                                                              NOR=Rabattprosent;
                                                              SVE=Rabattprocent];
                                                   DecimalPlaces=0:5;
                                                   Description=NAVISION;
                                                   Editable=No }
    { 243 ;   ;Packaging Form      ;Text30        ;CaptionML=[ENU=Packaging Form;
                                                              NOR=Emballasjeskjema;
                                                              SVE=F”rpackningsformul„r];
                                                   Description=NAVISION;
                                                   Editable=No }
    { 244 ;   ;Packaging Size      ;Text30        ;CaptionML=[ENU=Packaging Size;
                                                              NOR=Emballasjest›rrelse;
                                                              SVE=F”rpackningsstorlek];
                                                   Description=NAVISION;
                                                   Editable=No }
    { 245 ;   ;Price Reference Date;Date          ;CaptionML=[ENU=Price Reference Date;
                                                              NOR=Referansedato for pris;
                                                              SVE=Priss„ttningsdatum];
                                                   Description=NAVISION;
                                                   Editable=No }
    { 246 ;   ;Application Unit    ;Text10        ;OnValidate=VAR
                                                                UnitofMeasure@1100527000 : Record 204;
                                                              BEGIN
                                                                IF "Application Unit" <> '' THEN
                                                                  UnitofMeasure.GET("Application Unit");
                                                              END;

                                                   CaptionML=[ENU=Application Unit;
                                                              NOR=Programenhet;
                                                              SVE=Programenhet];
                                                   Description=NAVISION }
    { 247 ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              NOR=Antall per M†leenhet;
                                                              SVE=Antal per enhet];
                                                   DecimalPlaces=0:5;
                                                   Description=NAVISION }
    { 250 ;   ;Expired             ;Boolean       ;OnValidate=BEGIN
                                                                IF Expired THEN
                                                                  "Expiry Date" := TODAY
                                                                ELSE
                                                                  "Expiry Date" := 0D;
                                                              END;

                                                   CaptionML=[ENU=Expired;
                                                              NOR=Utg†tt;
                                                              SVE=Utg†ngna];
                                                   Description=NAVISION }
    { 251 ;   ;Expiry Date         ;Date          ;CaptionML=[ENU=Expiry Date;
                                                              NOR=Utl›psdato;
                                                              SVE=Utg†ngsdatum];
                                                   Description=NAVISION }
    { 260 ;   ;Import Date-Time    ;Decimal       ;CaptionML=[ENU=Import Date-Time;
                                                              NOR=Importer Dato-tid;
                                                              SVE=Importera datum-tid];
                                                   DecimalPlaces=2:;
                                                   Description=NAVISION;
                                                   AutoFormatType=10;
                                                   AutoFormatExpr='DATETIME' }
    { 280 ;   ;Cost Object         ;Code20        ;TableRelation="Dimension Value".Code WHERE (Cost Type=FILTER(Material),
                                                                                               Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                "Cost Object changed Manually" := GetCostObjectChanged();
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Kostnadsobjekt;
                                                              SVE=Kostnadsobjekt];
                                                   Description=NAVISION;
                                                   CaptionClass='1,1,2' }
    { 290 ;   ;Search Argument     ;Code20        ;CaptionML=[ENU=Search Argument;
                                                              NOR=S›keargument;
                                                              SVE=S”kargument];
                                                   Description=NAVISION }
    { 295 ;   ;Sub Operation Code  ;Code20        ;TableRelation="Sub Operation".Code;
                                                   CaptionML=[ENU=Sub Operation Code;
                                                              NOR=Underinnsatskode;
                                                              SVE=Underinsatskod];
                                                   Description=NAVISION }
    { 300 ;   ;Item Brand          ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Brand" WHERE (Product Code=FIELD(Product Code),
                                                                                                       Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=[ENU=Item Brand;
                                                              NOR=Artikkelens Varemerke;
                                                              SVE=Artikelns varum„rke];
                                                   Description=NAVISION;
                                                   Editable=No }
    { 301 ;   ;Item Series         ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Series" WHERE (Product Code=FIELD(Product Code),
                                                                                                        Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=[ENU=Item Series;
                                                              NOR=Artikkelserier;
                                                              SVE=Artikelserier];
                                                   Description=NAVISION;
                                                   Editable=No }
    { 302 ;   ;Item Type           ;Text40        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Basic Item"."Item Type" WHERE (Product Code=FIELD(Product Code),
                                                                                                      Manufacturer=FIELD(Manufacturer)));
                                                   CaptionML=[ENU=Item Type;
                                                              NOR=Artikkeltype;
                                                              SVE=Artikeltyp];
                                                   Description=NAVISION;
                                                   Editable=No }
    { 310 ;   ;Removal Contribution;Decimal       ;CaptionML=[ENU=Removal Contribution;
                                                              NOR=Fjerningsbidrag;
                                                              SVE=Borttagningsbidrag];
                                                   Description=NAVISION;
                                                   AutoFormatType=2 }
    { 320 ;   ;Cost Object (Removal);Code20       ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Cost Type=FILTER(Material|Sundry));
                                                   CaptionML=[ENU=Cost Object (Removal Contribution);
                                                              NOR=Kostnadsobjekt (Fjerningsbidrag);
                                                              SVE=Kostnadsobjekt (borttagningsbidrag)];
                                                   Description=NAVISION }
    { 330 ;   ;Vendor Name         ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("ETIM Vendor - Central Mgt".Name WHERE (Code=FIELD(Vendor)));
                                                   CaptionML=[ENU=Vendor Name;
                                                              NOR=Leverand›rnavn;
                                                              SVE=Leverant”rsnamn];
                                                   Description=NAVISION;
                                                   Editable=No }
    { 340 ;   ;Basic Item Exists   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Basic Item" WHERE (Manufacturer=FIELD(Manufacturer),
                                                                                         Product Code=FIELD(Product Code)));
                                                   CaptionML=[ENU=Basic Item Exists;
                                                              NOR=Fabrikantartikkel finnes;
                                                              SVE=Basartikel finns];
                                                   Description=NAVISION;
                                                   Editable=No }
    { 350 ;   ;Price on Demand     ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Price History Trade Item" WHERE (Item Code=FIELD(Item Code),
                                                                                                       Vendor=FIELD(Vendor),
                                                                                                       Gross Price=CONST(0)));
                                                   CaptionML=[ENU=Price on Demand;
                                                              NOR=Pris p† ettersp›rsel;
                                                              SVE=Pris p† beg„ran];
                                                   Description=NAVISION;
                                                   Editable=No }
    { 360 ;   ;Cost Object changed Manually;Boolean;
                                                   CaptionML=[ENU=Cost Object changed Manually;
                                                              NOR=Kostnadsobjekt er endret manuelt;
                                                              SVE=Kostnadsobjekt har „ndrats manuellt];
                                                   Description=NAVISION }
    { 370 ;   ;Country/Region of Origin Code;Code10;
                                                   TableRelation=Country/Region;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Country/Region of Origin Code;
                                                              SVE=Kod f”r tillverkningsland/-region] }
    { 1030;   ;Starting Date Price ;Date          ;CaptionML=[ENU=Starting Date Price;
                                                              NOR=Startdatopris;
                                                              SVE=Startdatumspris] }
    { 1060;   ;Quantity Per Price  ;Decimal       ;CaptionML=[ENU=Quantity Per Price;
                                                              NOR=Antall pr. pris;
                                                              SVE=Antal per pris];
                                                   DecimalPlaces=0:5 }
    { 1065;   ;Price ID            ;Code10        ;TableRelation="ETIM Unit";
                                                   CaptionML=[ENU=Price ID;
                                                              NOR=Pris-ID;
                                                              SVE=Pris-ID] }
    { 1090;   ;Currency Code       ;Code10        ;CaptionML=[ENU=Currency Code;
                                                              NOR=Valutakode;
                                                              SVE=Valutakod] }
    { 1100;   ;Gross Price Operation Surch.;Decimal;
                                                   CaptionML=[ENU=Gross Price Operation Surcharge;
                                                              NOR=Driftstilleggsgebyr for bruttopris;
                                                              SVE=Insatstill„ggsavgift f”r bruttopris];
                                                   AutoFormatType=2 }
    { 1105;   ;Price Manufacturer  ;Boolean       ;CaptionML=[ENU=Price Manufacturer;
                                                              NOR=Fabrikantens pris;
                                                              SVE=Tillverkarens pris] }
    { 1110;   ;VAT Code            ;Code10        ;CaptionML=[ENU=VAT Code;
                                                              NOR=MVA Kode;
                                                              SVE=Momskod] }
    { 1115;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              NOR=Momssats %;
                                                              SVE=Momssats %];
                                                   DecimalPlaces=0:5 }
    { 1120;   ;Maintained by 2ba   ;Boolean       ;CaptionML=[ENU=Maintained by 2ba;
                                                              NOR=Vedlikeholdt av 2ba];
                                                   Description=NAVISION;
                                                   Editable=No }
    { 1130;   ;Trade Item Guid (2ba);Text36       ;CaptionML=ENU=Trade Item Guid (2ba);
                                                   Editable=No }
    { 1140;   ;Product ID Guid (2ba);Text36       ;CaptionML=ENU=Product ID Guid (2ba);
                                                   Editable=No }
    { 1150;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=VAR
                                                                GenProdPostingGrp@1100525000 : Record 251;
                                                              BEGIN
                                                                //DP01383
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              NOR=Bokf›ringsgruppe - vare;
                                                              SVE=Produktbokf”ringsmall];
                                                   Description=DP01383 }
    { 1160;   ;Total Circumference ;Decimal       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Total Circumference;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 1170;   ;Outer Circumference ;Decimal       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Outer Circumference;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 1180;   ;Other Circumference ;Decimal       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Other Circumference;
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 11128000;;Last Updated       ;DateTime      ;CaptionML=SVE=Senast uppdaterad }
  }
  KEYS
  {
    {    ;Vendor,Item Code                        ;Clustered=Yes }
    {    ;Item Code,Vendor,Product Code,Manufacturer }
    {    ;Product Code,Manufacturer,Item Code,Vendor }
    {    ;GTIN Code (Item)                         }
    {    ;Import Date-Time                         }
    {    ;Item Description                         }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Vendor,Item Code,Item Description        }
  }
  CODE
  {
    VAR
      PriceHistRec@11012000 : Record 11012315;
      ReplaceItemRec@1100485000 : Record 11012322;
      GLSetup@1210190001 : Record 98;
      DiscHistRec@1210190002 : Record 11012312;
      ChargeRec@1100485001 : Record 11012332;
      TradeItem2@1100525000 : Record 11012317;
      LinkedTradeItem@1100529600 : Record 11020466;
      CalcDiscPrice@1100485005 : Boolean;
      ItemMgt@1210190000 : Codeunit 11012033;

    PROCEDURE InitLookup@1000000000(VAR TradeItemRec@1000000000 : Record 11012317;BasicItem@1000000001 : Code[20];Manufacturer@1000000002 : Code[20];TradeItem@1000000003 : Code[20];Vendor@1000000004 : Code[20]);
    BEGIN
      IF NOT TradeItemRec.GET(Vendor, TradeItem) THEN BEGIN
        TradeItemRec.RESET;
        IF BasicItem + Manufacturer <> '' THEN BEGIN
          TradeItemRec.SETCURRENTKEY("Product Code", Manufacturer);
          TradeItemRec.SETRANGE("Product Code", BasicItem);
          TradeItemRec.SETRANGE(Manufacturer, Manufacturer);
        END;
        IF Vendor <> '' THEN BEGIN
          TradeItemRec.SETCURRENTKEY(Vendor, "Item Code");
          TradeItemRec.SETRANGE(Vendor, Vendor);
        END;
        IF TradeItem <> '' THEN BEGIN
          TradeItemRec.SETCURRENTKEY("Item Code", Vendor);
          TradeItemRec.SETRANGE("Item Code", TradeItem);
        END;
        IF NOT TradeItemRec.FINDFIRST THEN BEGIN
          TradeItemRec.SETCURRENTKEY(Vendor, "Item Code");
          CLEAR(TradeItemRec);
          TradeItemRec.Vendor := Vendor;
        END;
      END;
    END;

    PROCEDURE CheckReplaceVendor@1100485002(OldVendor@1100485000 : Code[20];OldTradeItem@1100485001 : Code[20];VAR NewVendor@1100485002 : Code[20];VAR NewTradeItem@1100485003 : Code[20]) : Boolean;
    VAR
      TradeItem@1100485004 : Record 11012317;
      ItemVendor@1100529900 : Record 99;
      VendorTradeItem@1100529903 : Record 11012313;
      ItemCode@1100529901 : Code[20];
      NumTradeItem@1100529902 : Integer;
    BEGIN
      IF (OldVendor = '') OR (OldTradeItem = '') THEN
        EXIT(FALSE);

      TradeItem.RESET;
      TradeItem.SETCURRENTKEY(Vendor, "Item Code");
      TradeItem.SETRANGE(Vendor, OldVendor);
      TradeItem.SETRANGE("Item Code", OldTradeItem);

      //search first existing record
      IF TradeItem.FINDFIRST THEN BEGIN
        ItemCode := TradeItem.GetItemCode;  //C037397
        //search then unique replacing record
        TradeItem.RESET;
        IF TradeItem."GTIN Code (Item)" <> '' THEN BEGIN
          TradeItem.SETCURRENTKEY("GTIN Code (Item)");
          TradeItem.SETRANGE("GTIN Code (Item)",TradeItem."GTIN Code (Item)");
          TradeItem.SETRANGE(Vendor, NewVendor);
          TradeItem.SETFILTER("Item Code", '<>%1', '');
          TradeItem.SETRANGE(Expired, FALSE);
          IF NOT TradeItem.FINDFIRST THEN BEGIN
            TradeItem.RESET;
            TradeItem.SETCURRENTKEY("Product Code", Manufacturer, "Item Code", Vendor);
            TradeItem.SETRANGE("Product Code", TradeItem."Product Code");
            TradeItem.SETRANGE(Manufacturer, TradeItem.Manufacturer);
            TradeItem.SETRANGE(Vendor, NewVendor);
            TradeItem.SETFILTER("Item Code", '<>%1', '');
            TradeItem.SETRANGE(Expired, FALSE);
          END;
        END ELSE BEGIN
          TradeItem.RESET;
          TradeItem.SETCURRENTKEY("Product Code", Manufacturer, "Item Code", Vendor);
          TradeItem.SETRANGE("Product Code", TradeItem."Product Code");
          TradeItem.SETRANGE(Manufacturer, TradeItem.Manufacturer);
          TradeItem.SETRANGE(Vendor, NewVendor);
          TradeItem.SETFILTER("Item Code", '<>%1', '');
          TradeItem.SETRANGE(Expired, FALSE);
        END;
        //C037397.sn
        NumTradeItem := TradeItem.COUNT;
        IF NumTradeItem = 0 THEN BEGIN
          IF NOT VendorTradeItem.GET(NewVendor) THEN VendorTradeItem.INIT;
          ItemVendor.SETRANGE("Item No.", ItemCode);
          ItemVendor.SETRANGE("Vendor No.", VendorTradeItem."Vendor (Purchase)");
          ItemVendor.SETRANGE("Source Type", ItemVendor."Source Type"::"Trade Item");
          IF ItemVendor.FINDFIRST THEN BEGIN
            NewTradeItem := ItemVendor."Vendor Item No.";
            EXIT(TRUE);
          END;
        END;
        //C037397.en
        IF NumTradeItem = 1 THEN BEGIN
          TradeItem.FINDFIRST;
          NewTradeItem := TradeItem."Item Code";
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetNetWeight@1100525000(iUnitOfMeasure@1100525002 : Code[10]) : Decimal;
    VAR
      lvBasisItemRec@1100525001 : Record 11012316;
      lvQuantityPerUnit@1100525000 : Decimal;
    BEGIN
      IF iUnitOfMeasure <> "Application Unit" THEN
        lvQuantityPerUnit := "Qty. per Unit of Measure"
      ELSE
        lvQuantityPerUnit := 1;

      IF lvBasisItemRec.GET(Manufacturer, "Product Code") THEN BEGIN
        // Weight must be in Kilo
        // 2BA Will probably stick to these 3 units, therefore hardcode the conversion
        CASE lvBasisItemRec."Weight ID" OF
          'TNE' : EXIT(lvBasisItemRec."Net Weight" * lvQuantityPerUnit * 1000);
          'KGM' : EXIT(lvBasisItemRec."Net Weight" * lvQuantityPerUnit);
          'GRM' : EXIT(lvBasisItemRec."Net Weight" * lvQuantityPerUnit/ 1000);
          ELSE EXIT(0); //we don't know the conversion factor to kilos
        END;
      END ELSE BEGIN
        //On Trade Item we only have Gross Weight which is also not reliable.
        EXIT(0);
      END;
    END;

    PROCEDURE GetActualPrice@1100525003(RefDate@1100525005 : Date;DiscRef1@1100525006 : Code[20];DiscRef2@1100525007 : Code[20]);
    VAR
      lvTradeItemRec@1100525000 : Record 11012317;
      ValidateCu@1100525004 : Codeunit 11012033;
    BEGIN
      lvTradeItemRec := Rec;
      ValidateCu.GetPriceTradeItem(lvTradeItemRec, RefDate, DiscRef1, DiscRef2, '');
      "Gross Price" := lvTradeItemRec."Gross Price";
      "Net Price" := lvTradeItemRec."Net Price";
      "Discount Percentage" := lvTradeItemRec."Discount Percentage";
    END;

    PROCEDURE GetUnitPrices@1100525004(VAR GrossPriceInventoryUnit@1100525003 : Decimal;VAR NetPriceInventoryUnit@1100525002 : Decimal;VAR GrossPricePurchaseUnit@1100525001 : Decimal;VAR NetPricePurchaseUnit@1100525000 : Decimal;VAR DiscPerc@1100525004 : Decimal);
    BEGIN
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" :=  1;
      IF "Application Unit Quantity" = 0 THEN
        "Application Unit Quantity" := 1;
      IF "Minimum Order Quantity" = 0 THEN
        "Minimum Order Quantity" := 1;

      GrossPriceInventoryUnit := "Gross Price" / "Qty. per Unit of Measure";
      NetPriceInventoryUnit := "Net Price" / "Qty. per Unit of Measure";

      GrossPricePurchaseUnit := GrossPriceInventoryUnit * ("Application Unit Quantity" * "Minimum Order Quantity");
      NetPricePurchaseUnit := NetPriceInventoryUnit * ("Application Unit Quantity" * "Minimum Order Quantity");

      DiscPerc := "Discount Percentage";
    END;

    PROCEDURE PriceOnDemand@1210190000(RefDate@1210190001 : Date) : Boolean;
    VAR
      PriceHistRec@1210190000 : Record 11012315;
    BEGIN
      PriceHistRec.SETRANGE(Vendor, Vendor);
      PriceHistRec.SETRANGE("Item Code", "Item Code");
      PriceHistRec.SETFILTER("Starting Date", '..%1', RefDate);
      IF PriceHistRec.FINDLAST THEN
        IF (PriceHistRec."Gross Price" = 0) AND (PriceHistRec."Price on Demand") THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE GetUnitData@1210190052();
    VAR
      lvInvtSetup@1100485005 : Record 313;
      lvPackageRec@1100485002 : Record 11012309;
      lvUnitRec@1100485004 : Record 204;
      lvItemUnitRec@1100485003 : Record 5404;
      lvFactorInt@1100485001 : Integer;
      lvFactorDec@1100485000 : Decimal;
      lvSameUnitDiffQuan@1100525000 : Boolean;
    BEGIN
      lvInvtSetup.GET;
      lvInvtSetup.TESTFIELD("Default Item");

      "Packaging Unit" := '';
      "Packaging Form" := '';
      "Packaging Size" := '';

      IF "Application ID" <> '' THEN
        "Application Unit" :=  ItemMgt.CheckUnitConversion("Application ID");

      IF "Application Unit" = '' THEN
        "Application Unit" :=  ItemMgt.CheckUnitConversion("Price ID");

      IF "Order ID" <> '' THEN
        "Packaging Unit" :=  ItemMgt.CheckUnitConversion("Order ID");

      "Qty. per Unit of Measure" := "Application Unit Quantity";
      IF "Application Unit Quantity" > "Minimum Order Quantity" THEN
        lvSameUnitDiffQuan := CheckSameUnitDiffQuan;

      IF "Qty. per Unit of Measure" = 0 THEN "Qty. per Unit of Measure" := 1;
      lvFactorDec := ROUND("Qty. per Unit of Measure", 0.01);
      lvFactorInt := ROUND("Qty. per Unit of Measure", 1);

      IF lvSameUnitDiffQuan THEN
        "Packaging Unit" := '';

      IF "Packaging Code" <> '' THEN BEGIN
        IF lvPackageRec.GET("Packaging Code") THEN BEGIN
          IF lvFactorInt > lvFactorDec THEN
            "Packaging Form" := COPYSTR(
              (lvPackageRec.Description + STRSUBSTNO(' / %1 ', lvFactorDec) + "Application Unit"),
              1, MAXSTRLEN("Packaging Form"))
          ELSE
            "Packaging Form" := COPYSTR(
              (lvPackageRec.Description + STRSUBSTNO(' / %1 ', lvFactorInt) + "Application Unit"),
              1, MAXSTRLEN("Packaging Form"));
          IF lvPackageRec."Unit (Navision)" <> '' THEN
            "Packaging Unit" := lvPackageRec."Unit (Navision)";
        END;
      END;

      IF "Packaging Unit" = '' THEN BEGIN
        IF lvFactorDec = 1 THEN
          "Packaging Unit" := "Application Unit"
        ELSE
          IF lvFactorInt > lvFactorDec THEN
            "Packaging Unit" := COPYSTR(
              (STRSUBSTNO('%1', lvFactorDec) + "Application Unit"),
              1, MAXSTRLEN("Packaging Unit"))
          ELSE
            "Packaging Unit" := COPYSTR(
              (STRSUBSTNO('%1', lvFactorInt) + "Application Unit"),
              1, MAXSTRLEN("Packaging Unit"));
      END;

      IF Length <> 0 THEN
        "Packaging Size" := STRSUBSTNO('%1', Length);
      IF Width <> 0 THEN BEGIN
        IF "Packaging Size" <> '' THEN "Packaging Size" := "Packaging Size" + 'x';
        "Packaging Size" := "Packaging Size" + STRSUBSTNO('%1', Width);
      END;
      IF Height <> 0 THEN BEGIN
        IF "Packaging Size" <> '' THEN "Packaging Size" := "Packaging Size" + 'x';
        "Packaging Size" := "Packaging Size" + STRSUBSTNO('%1', Height);
      END;
      IF "Packaging Size" <> '' THEN "Packaging Size" := "Packaging Size" + ' ' + "Size Unit";

      IF UPPERCASE("Packaging Unit") <> UPPERCASE("Application Unit") THEN BEGIN
        IF NOT lvUnitRec.GET("Packaging Unit") THEN BEGIN
          lvUnitRec.INIT;
          lvUnitRec.Code := "Packaging Unit";
          lvUnitRec.INSERT;
        END;
        IF NOT lvItemUnitRec.GET(lvInvtSetup."Default Item", "Packaging Unit") THEN BEGIN
          lvItemUnitRec.INIT;
          lvItemUnitRec."Item No." := lvInvtSetup."Default Item";
          lvItemUnitRec.Code := "Packaging Unit";
          lvItemUnitRec."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
          lvItemUnitRec.INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckSameUnitDiffQuan@1210190051() SameUnitDiffQuan : Boolean;
    BEGIN
      IF "Application ID" = "Order ID" THEN BEGIN
        IF ("Qty. per Unit of Measure" = 0) OR ("Qty. per Unit of Measure" = 1) THEN
          SameUnitDiffQuan := FALSE
        ELSE
          SameUnitDiffQuan := TRUE;
      END;
      EXIT(SameUnitDiffQuan);
    END;

    PROCEDURE GetRemovalContribution@1210190050(lvLimitPriceDate@1100485002 : Date);
    VAR
      lvChargeRec@1100485000 : Record 11012332;
    BEGIN
      "Removal Contribution" := 0;
      lvChargeRec.SETRANGE(Vendor, Vendor);
      lvChargeRec.SETRANGE("Item Code", "Item Code");
      lvChargeRec.SETRANGE("Discount/Charge Code", 'CRS');
      lvChargeRec.SETRANGE("Starting Date", 0D, lvLimitPriceDate);
      IF lvChargeRec.FINDLAST THEN BEGIN
        "Removal Contribution" := lvChargeRec.Amount;
        IF CheckSameUnitDiffQuan THEN
          IF "Qty. per Unit of Measure" <> 0 THEN
            "Removal Contribution" := "Removal Contribution" / "Qty. per Unit of Measure";
      END;
    END;

    PROCEDURE GetRefDateHistPrice@1210190053();
    VAR
      HistRec@1100525000 : Record 11012315;
    BEGIN
      HistRec.SETRANGE(Vendor, Vendor);
      HistRec.SETRANGE("Item Code", "Item Code");
      IF NOT HistRec.FINDLAST THEN
        "Price Reference Date" := 0D
      ELSE
        "Price Reference Date" := HistRec."Starting Date";
    END;

    PROCEDURE GetDefaultCostObject@1210190055(Removal@1100529000 : Boolean) : Code[20];
    VAR
      InventorySetup@1210190000 : Record 313;
      ItemSetup@1100528900 : Record 11012300;
      DeliveryGroupRec@1210190001 : Record 11012320;
      ProductGroupRec@1210190002 : Record 11012302;
      BasicItemRec@1210190003 : Record 11012316;
      DeliveryGroupCode@1210190004 : Code[250];
      VendorRec@1100409000 : Record 11012304;
      CostObject@1100409002 : Code[20];
      CostObjectRemoval@1100409001 : Code[20];
    BEGIN
      //priority: 1=delivery/discount group; 2=productgroup; 3=default (setup)
      ItemSetup.GET;
      IF ItemSetup."Apply DiscGroup as DelivGroup" THEN
        DeliveryGroupCode := "Discount Group Code"
      ELSE
        DeliveryGroupCode := "Delivery Group Code";

      IF NOT VendorRec.GET(Vendor) THEN VendorRec.INIT;

      IF DeliveryGroupRec.GET(Vendor, DeliveryGroupCode) THEN BEGIN
        CostObject := DeliveryGroupRec."Cost Object";
        CostObjectRemoval := DeliveryGroupRec."Cost Object (Removal)";
      END ELSE BEGIN
        CheckFormatCondition(VendorRec, Vendor, DeliveryGroupCode, CostObject, CostObjectRemoval);
      END;
      IF NOT Removal THEN BEGIN
        IF CostObject <> '' THEN
          EXIT(CostObject);
      END ELSE BEGIN
        IF CostObjectRemoval <> '' THEN
          EXIT(CostObjectRemoval);
      END;

      IF DeliveryGroupRec.GET('', DeliveryGroupCode) THEN BEGIN
        CostObject := DeliveryGroupRec."Cost Object";
        CostObjectRemoval := DeliveryGroupRec."Cost Object (Removal)";
      END;
      IF NOT Removal THEN BEGIN
        IF CostObject <> '' THEN
          EXIT(CostObject);
      END ELSE BEGIN
        IF CostObjectRemoval <> '' THEN
          EXIT(CostObjectRemoval);
      END;

      IF (Manufacturer <> '') AND ("Product Code" <> '') THEN BEGIN
        IF BasicItemRec.GET(Manufacturer, "Product Code") THEN BEGIN
          IF ProductGroupRec.GET(BasicItemRec."Product Group") THEN BEGIN
            IF NOT Removal THEN BEGIN
              IF ProductGroupRec."Cost Object" <> '' THEN
                EXIT(ProductGroupRec."Cost Object");
            END ELSE BEGIN
              IF ProductGroupRec."Cost Object (Removal)" <> '' THEN
                EXIT(ProductGroupRec."Cost Object (Removal)");
            END;
          END;
        END;
      END;

      InventorySetup.GET;
      IF NOT Removal THEN BEGIN
        IF InventorySetup."Cost Object" <> '' THEN
          EXIT(InventorySetup."Cost Object");
      END ELSE BEGIN
        IF InventorySetup."Cost Object (Removal)" <> '' THEN
          EXIT(InventorySetup."Cost Object (Removal)");
      END;

      EXIT('');
    END;

    PROCEDURE GetCostObjectChanged@1100529000() : Boolean;
    BEGIN
      EXIT("Cost Object" <> GetDefaultCostObject(FALSE));
    END;

    PROCEDURE GetItemCode@1100528300() : Code[20];
    VAR
      ItemRelation@1100528300 : Record 11012319;
    BEGIN
      ItemRelation.SETCURRENTKEY(Vendor, "Trade Item");
      ItemRelation.SETRANGE("Trade Item", "Item Code");
      ItemRelation.SETRANGE(Vendor, Vendor);
      IF (ItemRelation.FINDFIRST) THEN
        EXIT(ItemRelation."Navision Item");

      EXIT('');
    END;

    PROCEDURE DrillDownNavisionItem@1100528301();
    VAR
      Item@1100528300 : Record 27;
      ItemRelation@1210190000 : Record 11012319;
      ItemRelationFound@1100525000 : Boolean;
    BEGIN
      ItemRelation.RESET;
      ItemRelation.SETCURRENTKEY(Vendor, "Trade Item");
      ItemRelation.SETRANGE("Trade Item", "Item Code");
      ItemRelation.SETRANGE(Vendor, Vendor);
      IF ItemRelation.FINDFIRST THEN
        ItemRelationFound := TRUE;

      IF NOT ItemRelationFound THEN BEGIN
        ItemRelation.RESET;
        ItemRelation.SETCURRENTKEY("GTIN Code");
        ItemRelation.SETRANGE("GTIN Code", "GTIN Code (Item)");
        IF ItemRelation.FINDFIRST THEN
          ItemRelationFound := TRUE;
      END;

      IF NOT ItemRelationFound THEN BEGIN
        ItemRelation.RESET;
        ItemRelation.SETCURRENTKEY(Manufacturer, "Basic Item");
        ItemRelation.SETRANGE(Manufacturer, Manufacturer);
        ItemRelation.SETRANGE("Basic Item", "Product Code");
        IF ItemRelation.FINDFIRST THEN
          ItemRelationFound := TRUE;
      END;

      IF NOT ItemRelationFound THEN EXIT;

      REPEAT
        Item.GET(ItemRelation."Navision Item");
        Item.MARK(TRUE);
      UNTIL (ItemRelation.NEXT = 0);

      Item.MARKEDONLY(TRUE);
      IF (NOT Item.ISEMPTY) THEN
        PAGE.RUNMODAL(0, Item);
    END;

    PROCEDURE CheckFormatCondition@1100409001(VendorRec@1100409005 : Record 11012304;iVendor@1100409008 : Code[20];iCode@1100409003 : Code[250];VAR varCostObject@1100409006 : Code[20];VAR varCostObjectRemoval@1100409007 : Code[20]) : Boolean;
    VAR
      DeliveryGroupRec@1100409004 : Record 11012320;
      HGSCode@1100409002 : Text[250];
      lenHGS@1100409001 : Integer;
      posWildCard@1100409000 : Integer;
    BEGIN
      IF VendorRec."Format Discount Term" = VendorRec."Format Discount Term"::Wildcard THEN BEGIN
        HGSCode := iCode;
        lenHGS := STRLEN(HGSCode);
        WHILE lenHGS > 0 DO BEGIN
          IF iVendor = '' THEN
            DeliveryGroupRec.SETFILTER(Vendor, '%1', '')
          ELSE
            DeliveryGroupRec.SETRANGE(Vendor, Vendor);
          DeliveryGroupRec.SETFILTER(Code, '%1', HGSCode + '*');
          IF DeliveryGroupRec.FINDSET THEN BEGIN
            REPEAT
              posWildCard := STRPOS(DeliveryGroupRec.Code, '*');
              IF (posWildCard = lenHGS + 1) THEN BEGIN
                IF DeliveryGroupRec."Cost Object" <> '' THEN
                  varCostObject := DeliveryGroupRec."Cost Object";
                IF DeliveryGroupRec."Cost Object (Removal)" <> '' THEN
                  varCostObjectRemoval := DeliveryGroupRec."Cost Object (Removal)";
                EXIT(TRUE);
              END;
            UNTIL DeliveryGroupRec.NEXT = 0;
          END;
          lenHGS := lenHGS - 1;
          IF lenHGS > 0 THEN
            HGSCode := COPYSTR(iCode, 1, lenHGS);
        END;
        EXIT(FALSE);
      END;

      IF VendorRec."Format Discount Term" = VendorRec."Format Discount Term"::HGS THEN BEGIN
        IF COPYSTR(iCode, 5, 2) < '80' THEN BEGIN
          //With subgroup higher then 80 don't search for discount on higher level
          //TU supplies discount groups in format hhggss
          HGSCode := COPYSTR(iCode, 1, 4) + '99';
          IF iVendor = '' THEN
            DeliveryGroupRec.SETFILTER(Vendor, '%1', '')
          ELSE
            DeliveryGroupRec.SETRANGE(Vendor, Vendor);
          DeliveryGroupRec.SETRANGE(Code, HGSCode);
          IF DeliveryGroupRec.FINDFIRST THEN BEGIN
            IF DeliveryGroupRec."Cost Object" <> '' THEN
              varCostObject := DeliveryGroupRec."Cost Object";
            IF DeliveryGroupRec."Cost Object (Removal)" <> '' THEN
              varCostObjectRemoval := DeliveryGroupRec."Cost Object (Removal)";
            EXIT;
          END;
          HGSCode := COPYSTR(iCode, 1, 2) + '9999';
          IF iVendor = '' THEN
            DeliveryGroupRec.SETFILTER(Vendor, '%1', '')
          ELSE
            DeliveryGroupRec.SETRANGE(Vendor, Vendor);
          DeliveryGroupRec.SETRANGE(Code, HGSCode);
          IF DeliveryGroupRec.FINDFIRST THEN BEGIN
            IF DeliveryGroupRec."Cost Object" <> '' THEN
              varCostObject := DeliveryGroupRec."Cost Object";
            IF DeliveryGroupRec."Cost Object (Removal)" <> '' THEN
              varCostObjectRemoval := DeliveryGroupRec."Cost Object (Removal)";
            EXIT(TRUE);
          END;
        END;
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE FindRec@1100525001(ShowPriceOnDemandOnly@1100485000 : Boolean;VAR TradeItem@1100485001 : Record 11012317;Which@1100485002 : Text[30];RefDate@1100525000 : Date) : Boolean;
    VAR
      Steps@1100485003 : Integer;
      FindNext@1100485008 : Integer;
      Found@1100485006 : Boolean;
    BEGIN
      IF ShowPriceOnDemandOnly THEN BEGIN
        TradeItem2.COPY(TradeItem);
        IF Which = '+' THEN
          Steps := -1
        ELSE
          Steps := 1;
        IF TradeItem2.FIND(Which) THEN
          REPEAT
            Found := TradeItem2.PriceOnDemand(RefDate);  //Use variable because of performance
            IF NOT Found THEN BEGIN
              FindNext := TradeItem2.NEXT(Steps);
              IF (FindNext = 0) AND (Steps = 1) THEN BEGIN
                //At the end of the table reverse order
                FindNext := -1;
                Steps := -1;
              END;
            END;
          UNTIL (FindNext = 0) OR Found;
        IF Found THEN
          TradeItem := TradeItem2;
        EXIT(Found);
      END ELSE
        EXIT(FIND(Which));
    END;

    PROCEDURE GetRec@1100485003(PriceOnDemandOnly@1100485003 : Boolean;VAR TradeItem@1100485002 : Record 11012317;Steps@1100485001 : Integer;RefDate@1100525000 : Date) : Integer;
    VAR
      ActualSteps@1100485004 : Integer;
      Step@1100528400 : Integer;
      NoOneFound@1100485005 : Boolean;
    BEGIN
      IF PriceOnDemandOnly THEN BEGIN
        TradeItem2.COPY(TradeItem);

        IF Steps < 0 THEN
          Step := -1
        ELSE
          Step := 1;

        REPEAT
          IF TradeItem2.NEXT(Step) <> 0 THEN BEGIN
            IF TradeItem2.PriceOnDemand(RefDate) THEN BEGIN
              ActualSteps := ActualSteps + Step;
              IF Steps <> 0 THEN
                TradeItem := TradeItem2;
            END;
          END ELSE
            NoOneFound := TRUE;
        UNTIL (ActualSteps = Steps) OR NoOneFound;
        EXIT(ActualSteps);
      END ELSE
        EXIT(NEXT(Steps));
    END;

    PROCEDURE ConvertImportDateTime@1100409000() DateTimeTxt : Text[250];
    VAR
      DatetimeMgt@1100409000 : Codeunit 11020218;
    BEGIN
      DateTimeTxt := DatetimeMgt.OLDDatetime2Text("Import Date-Time");
      EXIT(DateTimeTxt);
    END;

    PROCEDURE LookupDiscountHistory@1100525002(RefDate@1100525003 : Date;DiscRef1@1100525002 : Code[20];DiscRef2@1100525001 : Code[20]);
    VAR
      DiscountHistory@1100525000 : Record 11012312;
      DiscountHistoryList@1100525004 : Page 11020421;
    BEGIN
      //new version derived from CheckDiscountLevel in codeunit ValidateItem (11012033)
      DiscountHistory.SETRANGE(Vendor, Vendor);
      DiscountHistory.SETFILTER("Discount Group", '%1', '');
      DiscountHistory.SETRANGE("Item Code", "Item Code");
      DiscountHistory.SETRANGE("Starting Date", 0D, RefDate);
      DiscountHistory.SETFILTER("Ending Date", '%1|>=%2', 0D, RefDate);
      IF NOT DiscountHistory.FINDLAST THEN BEGIN
        DiscountHistory.SETRANGE("Discount Group", "Discount Group Code");
        DiscountHistory.SETFILTER("Item Code", '%1', '');
        IF NOT DiscountHistory.FINDLAST THEN BEGIN
          DiscountHistory.RESET;
          DiscountHistory.SETRANGE(Vendor, Vendor);
          IF "Discount Group Code" <> '' THEN
            DiscountHistory."Discount Group" := "Discount Group Code"
          ELSE
            DiscountHistory."Item Code" := "Item Code";
        END;
      END;

      DiscountHistoryList.SETTABLEVIEW(DiscountHistory);
      DiscountHistoryList.SetReference(DiscRef1, DiscRef2, 0D, RefDate, '');
      DiscountHistoryList.RUNMODAL;
    END;

    PROCEDURE ShowFeatures@1100525005();
    VAR
      BasicItem@1100525000 : Record 11012316;
      ETIMProductClass@1100525002 : Record 11012303;
      ETIMProductClassFeature@1100525001 : Record 11012310;
    BEGIN
      IF BasicItem.GET(Manufacturer, "Product Code") THEN;
      IF ETIMProductClass.GET(BasicItem."Product Group",BasicItem."Product Group Line No.") THEN;

      ETIMProductClassFeature.SETRANGE("Product Group",ETIMProductClass."Product Group");
      ETIMProductClassFeature.SETRANGE("Product Group Line No.",ETIMProductClass."Product Group Line No.");

      PAGE.RUN(PAGE::"ETIM Feature Product Class",ETIMProductClassFeature);
    END;

    PROCEDURE StartHyperlink@1100525006(iVendor@1100528501 : Text;iItem@1100528500 : Text);
    VAR
      ETIMVendorLocalMgt@1100525000 : Record 11012313;
      Vendor@1100525001 : Record 23;
      TradeItem@1100528502 : Record 11012317;
    BEGIN
      //C052598
      TradeItem.GET(iVendor, iItem);
      ETIMVendorLocalMgt.GET(iVendor);
      ETIMVendorLocalMgt.TESTFIELD("Vendor (Purchase)");
      Vendor.GET(ETIMVendorLocalMgt."Vendor (Purchase)");
      Vendor.TESTFIELD("URL Vendor");
      HYPERLINK(Vendor."URL Vendor" + iItem);
    END;

    PROCEDURE CopyTradeItemToItem@1100525007();
    VAR
      TradeItem@1100525000 : Record 11012317;
    BEGIN
      TradeItem.SETRANGE("Product Code","Product Code");
      TradeItem.SETRANGE(Manufacturer,Manufacturer);
      TradeItem.SETRANGE("Item Code","Item Code");
      TradeItem.SETRANGE(Vendor,Vendor);
      REPORT.RUN(REPORT::"Copy Item from Trade Item",TRUE,FALSE,TradeItem);
    END;

    PROCEDURE CopyTradeItemToEPlanItem@1100525008();
    VAR
      TradeItem@1100525000 : Record 11012317;
    BEGIN
      TradeItem.SETRANGE("Product Code","Product Code");
      TradeItem.SETRANGE(Manufacturer,Manufacturer);
      TradeItem.SETRANGE("Item Code","Item Code");
      TradeItem.SETRANGE(Vendor,Vendor);
      REPORT.RUN(REPORT::"Copy E-Plan from Trade Item",TRUE,FALSE,TradeItem);
    END;

    PROCEDURE AssignBasicItem@1100525009(VAR TradeItem@1100525001 : Record 11012317);
    VAR
      AssignBasicItemSiB@1100525000 : Report 11012345;
    BEGIN
      IF NOT TradeItem.FINDFIRST THEN BEGIN
        TradeItem.SETRANGE("Item Code", "Item Code");
        TradeItem.SETRANGE(Vendor, Vendor);
        TradeItem.SETRANGE("GTIN Code (Item)", "GTIN Code (Item)");
      END;

      AssignBasicItemSiB.SETTABLEVIEW(TradeItem);
      AssignBasicItemSiB.RUNMODAL;
    END;

    PROCEDURE UpdateItemData@1100525010();
    VAR
      TradeItem@1100525000 : Record 11012317;
      BasicItem@1100525001 : Record 11012316;
      UpdateItemData@1100525002 : Report 11012304;
    BEGIN
      TradeItem.SETRANGE("Item Code","Item Code");
      TradeItem.SETRANGE(Vendor,Vendor);

      UpdateItemData.SETTABLEVIEW(TradeItem);
      BasicItem.SETRANGE("Product Code","Product Code");
      BasicItem.SETRANGE(Manufacturer,Manufacturer);
      UpdateItemData.SETTABLEVIEW(BasicItem);
      UpdateItemData.RUNMODAL;
    END;

    PROCEDURE ChangeCostObject@1100525011();
    VAR
      TradeItem@1100525001 : Record 11012317;
      ReplaceCostObjectsItem@1100525000 : Report 11012305;
    BEGIN
      TradeItem.SETRANGE("Item Code", "Item Code");
      TradeItem.SETRANGE(Vendor, Vendor);

      ReplaceCostObjectsItem.SETTABLEVIEW(TradeItem);
      ReplaceCostObjectsItem.SetSelection(DATABASE::"Trade Item");
      ReplaceCostObjectsItem.RUNMODAL;
    END;

    PROCEDURE SetGTINCodeItemFilter@1100528407(GTINCodeItem@1100528400 : Code[20];ShowExpired@1100528401 : Boolean);
    BEGIN
      IF GTINCodeItem = '' THEN
        EXIT;
      ResetFilters(ShowExpired);
      SETCURRENTKEY("GTIN Code (Item)");
      SETRANGE("GTIN Code (Item)", GTINCodeItem);
    END;

    LOCAL PROCEDURE MarkTradeItemsWithinGTINCodeItemFilter@1100528409(GTINCodeItem@1100528400 : Code[20]);
    VAR
      TradeItem@1100528402 : Record 11012317;
    BEGIN
      IF GTINCodeItem = '' THEN
        EXIT;
      TradeItem.SetGTINCodeItemFilter(GTINCodeItem, TRUE);
      IF TradeItem.FINDSET THEN
        REPEAT
          IF GET(TradeItem.Vendor, TradeItem."Item Code") THEN
            MARK(TRUE);
        UNTIL TradeItem.NEXT = 0;
    END;

    PROCEDURE SetProductCodeFilter@1100528401(ProductCode@1100528400 : Code[20];ShowExpired@1100528401 : Boolean);
    BEGIN
      IF ProductCode = '' THEN
        EXIT;
      ResetFilters(ShowExpired);
      SETCURRENTKEY("Product Code");
      SETRANGE("Product Code", ProductCode);
    END;

    PROCEDURE SetBasicItemFilter@1100528402(ProductCode@1100528400 : Code[20];Manufacturer2@1100528402 : Code[15];ShowExpired@1100528401 : Boolean);
    BEGIN
      IF (ProductCode = '') THEN
        EXIT;
      ResetFilters(ShowExpired);
      SETCURRENTKEY("Product Code");
      SETRANGE("Product Code", ProductCode);
      SETRANGE(Manufacturer, Manufacturer2);
    END;

    LOCAL PROCEDURE MarkTradeItemsWithinBasicItemFilter@1100528408(ProductCode@1100528400 : Code[20];Manufacturer2@1100528402 : Code[15]);
    VAR
      TradeItem@1100528403 : Record 11012317;
    BEGIN
      IF (ProductCode = '') THEN
        EXIT;
      TradeItem.SetBasicItemFilter(ProductCode, Manufacturer2, TRUE);
      IF TradeItem.FINDSET THEN
        REPEAT
          IF GET(TradeItem.Vendor, TradeItem."Item Code") THEN
            MARK(TRUE);
        UNTIL TradeItem.NEXT = 0;
    END;

    PROCEDURE SetItemRelationFilter@1100528403(ItemCode@1100528400 : Code[20];Vendor2@1100528401 : Code[15];ShowExpired@1100528402 : Boolean) : Boolean;
    VAR
      TradeItemWithOriginalFilters@1100528404 : Record 11012317;
      TradeItemsMarked@1100528403 : Boolean;
    BEGIN
      TradeItemWithOriginalFilters.COPY(Rec);
      ResetFilters(ShowExpired);
      MarkTradeItemsViaItemRelation(ItemCode, Vendor2, TradeItemsMarked);
      IF TradeItemsMarked THEN BEGIN
        MARKEDONLY(TRUE);
        EXIT(TRUE);
      END ELSE
        COPY(TradeItemWithOriginalFilters);
    END;

    LOCAL PROCEDURE MarkTradeItemsViaItemRelation@1100528406(ItemCode@1100528400 : Code[20];Vendor2@1100528401 : Code[15];VAR TradeItemsMarked@1100528402 : Boolean);
    VAR
      ItemRelation@1100525003 : Record 11012319;
      ItemVendor@1100525000 : Record 99;
      ItemVendor2@1100528403 : Record 99;
    BEGIN
      ItemRelation.SETCURRENTKEY(Vendor, "Trade Item");
      ItemRelation.SETRANGE("Source Type", ItemRelation."Source Type"::"Trade Item");
      ItemRelation.SETRANGE("Trade Item", ItemCode);
      ItemRelation.SETRANGE(Vendor, Vendor2);
      IF ItemRelation.FINDFIRST THEN BEGIN
        ItemVendor.SETCURRENTKEY("Item No.");
        ItemVendor.SETRANGE("Item No.", ItemRelation."Navision Item");
        IF ItemVendor.FINDSET THEN
          REPEAT
            ItemVendor.CALCFIELDS("Vendor (Trade Item)");
            IF GET(ItemVendor."Vendor (Trade Item)", ItemVendor."Vendor Item No.") THEN BEGIN
              MARK(TRUE);
              TradeItemsMarked := TRUE;
            END;
          UNTIL ItemVendor.NEXT = 0;
      END;

      ItemVendor.RESET;
      ItemVendor.SETCURRENTKEY("Vendor Item No.");
      ItemVendor.SETRANGE("Vendor Item No.", ItemCode);
      ItemVendor.SETRANGE("Vendor (Trade Item)", Vendor2);
      IF ItemVendor.FINDSET THEN
        REPEAT
          ItemVendor2.SETCURRENTKEY("Item No.");
          ItemVendor2.SETRANGE("Item No.", ItemVendor."Item No.");
          IF ItemVendor2.FINDSET THEN
            REPEAT
              ItemVendor2.CALCFIELDS("Vendor (Trade Item)");
              IF GET(ItemVendor2."Vendor (Trade Item)", ItemVendor2."Vendor Item No.") THEN BEGIN
                MARK(TRUE);
                TradeItemsMarked := TRUE;
              END;
            UNTIL ItemVendor2.NEXT = 0;
        UNTIL ItemVendor.NEXT = 0;
    END;

    PROCEDURE SetAllAlternativesFilter@1100528412(TradeItem@1100528400 : Record 11012317;ShowExpired@1100528401 : Boolean);
    VAR
      TradeItemsMarked@1100528402 : Boolean;
    BEGIN
      ResetFilters(ShowExpired);
      MarkTradeItemsWithinGTINCodeItemFilter(TradeItem."GTIN Code (Item)");
      MarkTradeItemsWithinBasicItemFilter(TradeItem."Product Code", TradeItem.Manufacturer);
      MarkTradeItemsViaItemRelation(TradeItem."Item Code", TradeItem.Vendor, TradeItemsMarked);
      MARKEDONLY(TRUE);
    END;

    LOCAL PROCEDURE ResetFilters@1100528404(ShowExpired@1100528400 : Boolean);
    BEGIN
      RESET;
      SetExpiredFilter(ShowExpired);
      SetVendorFilter;
    END;

    PROCEDURE SetExpiredFilter@1100528410(ShowExpired@1100528400 : Boolean);
    BEGIN
      IF ShowExpired THEN
        SETRANGE(Expired)
      ELSE
        SETRANGE(Expired, FALSE);
    END;

    PROCEDURE SetVendorFilter@1100528405();
    VAR
      InventorySetup@1100525000 : Record 313;
      ETIMVendorLocalMgt@1100485001 : Record 11012313;
      VendorFilter@1100485000 : Text[1024];
    BEGIN
      VendorFilter := ETIMVendorLocalMgt.GetFilterRelation(1, TRUE);
      IF VendorFilter <> '' THEN BEGIN
        InventorySetup.GET;
        IF InventorySetup."Vendor Filter" = InventorySetup."Vendor Filter"::Hard THEN
          FILTERGROUP(2);
        SETFILTER(Vendor, VendorFilter);
        IF InventorySetup."Vendor Filter" = InventorySetup."Vendor Filter"::Hard THEN
          FILTERGROUP(0);
      END;
    END;

    PROCEDURE GetAlternativeTradeItems@1100528400(VAR TempTradeItem@1100528400 : TEMPORARY Record 11012317);
    VAR
      ItemSetup@1100528402 : Record 11012300;
    BEGIN
      ItemSetup.GET;
      IF ItemSetup."Find Lowest Price on GTIN Code" THEN
        GetAlternativeTradeItemsWithinGTINCodeItemFilter(TempTradeItem);
      IF ItemSetup."Find Lowest Price on Prod.Code" THEN
        GetAlternativeTradeItemsWithinProductCodeFilter(TempTradeItem);
      IF ItemSetup."Find Lowest Price on Bas. Item" THEN
        GetAlternativeTradeItemsWithinBasicItemFilter(TempTradeItem);
      IF ItemSetup."Find Lowest Price on Item Rel." THEN
        GetAlternativeTradeItemsWithinItemRelationFilter(TempTradeItem);
    END;

    PROCEDURE GetAlternativeTradeItemsWithinGTINCodeItemFilter@1100528411(VAR TempTradeItem@1100528400 : TEMPORARY Record 11012317);
    VAR
      TradeItem@1100528401 : Record 11012317;
    BEGIN
      IF "GTIN Code (Item)" = '' THEN
        EXIT;
      TradeItem.SetGTINCodeItemFilter("GTIN Code (Item)", FALSE);
      AddTradeItemsToTempTradeItems(TradeItem, TempTradeItem);
    END;

    PROCEDURE GetAlternativeTradeItemsWithinProductCodeFilter@1100528413(VAR TempTradeItem@1100528400 : TEMPORARY Record 11012317);
    VAR
      TradeItem@1100528401 : Record 11012317;
    BEGIN
      IF "Product Code" = '' THEN
        EXIT;
      TradeItem.SetProductCodeFilter("Product Code", FALSE);
      AddTradeItemsToTempTradeItems(TradeItem, TempTradeItem);
    END;

    PROCEDURE GetAlternativeTradeItemsWithinBasicItemFilter@1100528419(VAR TempTradeItem@1100528400 : TEMPORARY Record 11012317);
    VAR
      TradeItem@1100528401 : Record 11012317;
    BEGIN
      IF "Product Code" = '' THEN
        EXIT;
      TradeItem.SetBasicItemFilter("Product Code", Manufacturer, FALSE);
      AddTradeItemsToTempTradeItems(TradeItem, TempTradeItem);
    END;

    PROCEDURE GetAlternativeTradeItemsWithinItemRelationFilter@1100528414(VAR TempTradeItem@1100528400 : TEMPORARY Record 11012317);
    VAR
      TradeItem@1100528401 : Record 11012317;
    BEGIN
      IF NOT TradeItem.SetItemRelationFilter("Item Code", Vendor, FALSE) THEN
        EXIT;
      AddTradeItemsToTempTradeItems(TradeItem, TempTradeItem);
    END;

    LOCAL PROCEDURE AddTradeItemsToTempTradeItems@1100528416(VAR TradeItem@1100528400 : Record 11012317;VAR TempTradeItem@1100528401 : TEMPORARY Record 11012317);
    BEGIN
      IF TradeItem.FINDSET THEN
        REPEAT
          TempTradeItem := TradeItem;
          IF TempTradeItem.INSERT THEN;
        UNTIL TradeItem.NEXT = 0;
    END;

    BEGIN
    {
      4PS01 JD 30-10-2008, Improvements for intrastat
      4PS, C009570, 06-03-14, Performance issue solved: Clustered index changed from Vendor,Item Code to Item Code,Vendor,Product Code,Manufacturer
    }
    END.
  }
}

