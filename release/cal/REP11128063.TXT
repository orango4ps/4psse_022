OBJECT Report 11128063 VP Get Led. Entries from Pack
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=PE6.03.01 (12048860);
  }
  PROPERTIES
  {
    CaptionML=[ENU=Get Ledger Entries from Pack;
               SVE=H„mta resk.transaktioner fr†n bunt];
    ProcessingOnly=Yes;
    OnPostReport=VAR
                   PaymentToleranceMgt@12047958 : Codeunit 426;
                 BEGIN
                   IF gMethod = gMethod::"By Due Date" THEN BEGIN
                     CLEAR(gTotAmount);
                     gWindow.OPEN('@1@@@@@@@@@@@@@@@@@@@@@@@@@');
                     gNoOfRec := gtVPFromPackBuffer.COUNT;
                     gtVPFromPackBuffer.SETCURRENTKEY("Posting Date");

                     IF gtVPFromPackBuffer.FINDFIRST THEN BEGIN
                       REPEAT
                         gI += 1;
                         gWindow.UPDATE(1,ROUND((gI/gNoOfRec*10000),1.0));
                         CASE gtVPFromPackBuffer.Type OF
                           gtVPFromPackBuffer.Type::Vendor :
                             BEGIN
                               WITH gVendLedgerEntry DO BEGIN
                                 GET(gtVPFromPackBuffer."Entry No.");
                                 IF (gSavePostDate <> 0D) AND (gSavePostDate <> gtVPFromPackBuffer."Posting Date") THEN
                                   BalAccount;
                                 IF (gSavePostDate <> gtVPFromPackBuffer."Posting Date") THEN
                                   gSavePostDate := gtVPFromPackBuffer."Posting Date";
                                 gXGenJnlLine := gGenJnlLine;
                                 gGenJnlLine.INIT;
                                 gGenJnlLine."Line No." += 10000;
                                 gGenJnlLine.SetUpNewLine(gXGenJnlLine,0,TRUE);
                                 gGenJnlLine.VALIDATE("Posting Date",gtVPFromPackBuffer."Posting Date");
                                 gGenJnlLine.VALIDATE("Account Type",gGenJnlLine."Account Type"::Vendor);
                                 gGenJnlLine.VALIDATE("Account No.","Vendor No.");
                                 gGenJnlLine.VALIDATE("Document Type","Document Type"::Payment);
                                 gGenJnlLine.VALIDATE("Currency Code","Currency Code");
                                 CALCFIELDS("Remaining Amount");
                                 IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(gGenJnlLine,gVendLedgerEntry,0,FALSE,0) THEN
                                   gGenJnlLine.VALIDATE(Amount,-("Remaining Amount" - "Remaining Pmt. Disc. Possible"))
                                 ELSE
                                   gGenJnlLine.VALIDATE(Amount,-"Remaining Amount");
                                 gGenJnlLine."Applies-to Doc. Type" := "Document Type";
                                 gGenJnlLine."Applies-to Doc. No." := "Document No.";
                                 gBaseTables.T81_GetDescription(gGenJnlLine);
                                 gGenJnlLine.INSERT;
                                 gTotAmount += CalcBalanceAmount;
                               END;
                             END;
                           gtVPFromPackBuffer.Type::Customer :
                             BEGIN
                               WITH gCustLedgerEntry DO BEGIN
                                 GET(gtVPFromPackBuffer."Entry No.");
                                 IF (gSavePostDate <> 0D) AND (gSavePostDate <> gtVPFromPackBuffer."Posting Date") THEN
                                   BalAccount;
                                 IF (gSavePostDate <> gtVPFromPackBuffer."Posting Date") THEN
                                   gSavePostDate := gtVPFromPackBuffer."Posting Date";
                                 gXGenJnlLine := gGenJnlLine;
                                 gGenJnlLine.INIT;
                                 gGenJnlLine."Line No." += 10000;
                                 gGenJnlLine.SetUpNewLine(gXGenJnlLine,0,TRUE);
                                 gGenJnlLine.VALIDATE("Posting Date",gtVPFromPackBuffer."Posting Date");
                                 gGenJnlLine.VALIDATE("Account Type",gGenJnlLine."Account Type"::Customer);
                                 gGenJnlLine.VALIDATE("Account No.","Customer No.");
                                 gGenJnlLine.VALIDATE("Document Type","Document Type"::Refund);
                                 gGenJnlLine.VALIDATE("Currency Code","Currency Code");
                                 CALCFIELDS("Remaining Amount");
                                 IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(gGenJnlLine,gCustLedgerEntry,0,FALSE,0) THEN
                                   gGenJnlLine.VALIDATE(Amount,-("Remaining Amount" - "Remaining Pmt. Disc. Possible"))
                                 ELSE
                                   gGenJnlLine.VALIDATE(Amount,-"Remaining Amount");
                                 gGenJnlLine."Applies-to Doc. Type" := "Document Type";
                                 gGenJnlLine."Applies-to Doc. No." := "Document No.";
                                 gBaseTables.T81_GetDescription(gGenJnlLine);
                                 gGenJnlLine.INSERT;
                                 gTotAmount += CalcBalanceAmount;
                               END;
                             END;
                           ELSE
                             ERROR('gtVPFromPackBuffer.Type "%1" st”ds ej', gtVPFromPackBuffer.Type);
                         END;
                       UNTIL gtVPFromPackBuffer.NEXT = 0;
                       BalAccount;
                     END;
                   END;

                   IF gMethod = gMethod::"All by Posting Date" THEN BEGIN
                     gSavePostDate := gPostingDate;
                     BalAccount;
                   END;

                   gWindow.CLOSE;
                 END;

  }
  DATASET
  {
    { 1070000; ;DataItem;                    ;
               DataItemTable=Table25;
               DataItemTableView=SORTING(Open,Due Date);
               OnPreDataItem=BEGIN
                               IF gMethod = 0 THEN
                                 ERROR(PEB007);
                               IF gGiroTypeCode = '' THEN
                                 ERROR(PEB002);
                               IF gDueDate2 = 0D THEN
                                 ERROR(PEB003);
                               CASE gMethod OF
                                 gMethod::"By Due Date":
                                   BEGIN
                                       IF gBankAccountNo = '' THEN
                                          ERROR(PEB006);
                                   END;
                                 gMethod::"All by Posting Date":
                                   BEGIN
                                       IF gPostingDate = 0D THEN
                                          ERROR(PEB001);
                                   END;
                               END;
                               gGenJnlLine.SETRANGE("Journal Template Name",gGenJnlLine."Journal Template Name");
                               gGenJnlLine.SETRANGE("Journal Batch Name",gGenJnlLine."Journal Batch Name");
                               IF gGenJnlLine.FIND('+') THEN
                                 gGenJnlLine.INIT
                               ELSE
                                 CLEAR(gGenJnlLine."Line No.");
                               SETRANGE(Open, TRUE);
                               SETFILTER("Due Date", '..%1',gDueDate2);
                               SETFILTER("VP Pack No.",'<>0');
                               IF gCurrFilter <> '' THEN
                                 SETFILTER("Currency Code",gCurrFilter);
                               gWindow.OPEN('@1@@@@@@@@@@@@@@@@@@@@@@@@@');
                               gNoOfRec := COUNT;
                             END;

               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Remaining Amount");
                                  IF gGiroTypeCode <> '' THEN
                                    IF gPack.GET("VP Pack No.") AND (gPack."Giro Type Code" = gGiroTypeCode) THEN BEGIN
                                      CASE gMethod OF
                                        gMethod::"All by Posting Date":
                                          BEGIN
                                            gI += 1;
                                            gWindow.UPDATE(1,ROUND((gI/gNoOfRec*10000),1.0));
                                            gXGenJnlLine := gGenJnlLine;
                                            gGenJnlLine.INIT;
                                            gGenJnlLine."Line No." += 10000;
                                            gGenJnlLine.SetUpNewLine(gXGenJnlLine,0,TRUE);
                                            gGenJnlLine.VALIDATE("Posting Date", gPostingDate);
                                            gGenJnlLine.VALIDATE("Account Type", gGenJnlLine."Account Type"::Vendor);
                                            gGenJnlLine.VALIDATE("Account No.", "Vendor No.");
                                            gGenJnlLine.VALIDATE("Document Type", "Document Type"::Payment);
                                            gGenJnlLine.VALIDATE("Currency Code","Currency Code");
                                            gGenJnlLine.VALIDATE(Amount, -"Remaining Amount");
                                            gGenJnlLine."Applies-to Doc. Type" :=  "Document Type";
                                            gGenJnlLine."Applies-to Doc. No." :=  "Document No.";
                                            gBaseTables.T81_GetDescription(gGenJnlLine);
                                            gGenJnlLine.INSERT;
                                            gTotAmount += CalcBalanceAmount;
                                          END;
                                        gMethod::"By Due Date":
                                          BEGIN
                                            gI += 1;
                                            gWindow.UPDATE(1,ROUND((gI/gNoOfRec*10000),1.0));
                                            gtVPFromPackBuffer.INIT;
                                            gtVPFromPackBuffer.Type := gtVPFromPackBuffer.Type::Vendor;
                                            gtVPFromPackBuffer."Entry No." := "Entry No.";
                                            gDueDate := "Due Date";
                                            IF gDueDate <> 0D THEN
                                              IF (DATE2DWY(gDueDate,1) IN [6,7]) THEN
                                                gDueDate := CALCDATE(STRSUBSTNO('<+%1D>',8 - DATE2DWY(gDueDate,1)),gDueDate);
                                            gtVPFromPackBuffer."Posting Date" := gDueDate;
                                            gtVPFromPackBuffer.INSERT;
                                          END;
                                        END;
                                    END;
                                END;
                                 }

    { 12047959;;DataItem;                    ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Open,Due Date);
               OnPreDataItem=BEGIN
                               SETRANGE(Open, TRUE);
                               SETFILTER("Due Date", '..%1',gDueDate2);
                               SETFILTER("VP Pack No.",'<>0');
                               IF gCurrFilter <> '' THEN
                                 SETFILTER("Currency Code",gCurrFilter);
                               gWindow.OPEN('@1@@@@@@@@@@@@@@@@@@@@@@@@@');
                               gNoOfRec := COUNT;
                             END;

               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Remaining Amount");
                                  IF gGiroTypeCode <> '' THEN
                                    IF gPack.GET("VP Pack No.") AND (gPack."Giro Type Code" = gGiroTypeCode) THEN BEGIN
                                      CASE gMethod OF
                                        gMethod::"All by Posting Date":
                                          BEGIN
                                            gI += 1;
                                            gWindow.UPDATE(1,ROUND((gI/gNoOfRec*10000),1.0));
                                            gXGenJnlLine := gGenJnlLine;
                                            gGenJnlLine.INIT;
                                            gGenJnlLine."Line No." += 10000;
                                            gGenJnlLine.SetUpNewLine(gXGenJnlLine,0,TRUE);
                                            gGenJnlLine.VALIDATE("Posting Date", gPostingDate);
                                            gGenJnlLine.VALIDATE("Account Type", gGenJnlLine."Account Type"::Customer);
                                            gGenJnlLine.VALIDATE("Account No.", "Customer No.");
                                            gGenJnlLine.VALIDATE("Document Type", "Document Type"::Refund);
                                            gGenJnlLine.VALIDATE("Currency Code","Currency Code");
                                            gGenJnlLine.VALIDATE(Amount, -"Remaining Amount");
                                            gGenJnlLine."Applies-to Doc. Type" :=  "Document Type";
                                            gGenJnlLine."Applies-to Doc. No." :=  "Document No.";
                                            gBaseTables.T81_GetDescription(gGenJnlLine);
                                            gGenJnlLine.INSERT;
                                            gTotAmount += CalcBalanceAmount;
                                          END;
                                        gMethod::"By Due Date":
                                          BEGIN
                                            gI += 1;
                                            gWindow.UPDATE(1,ROUND((gI/gNoOfRec*10000),1.0));
                                            gtVPFromPackBuffer.INIT;
                                            gtVPFromPackBuffer.Type := gtVPFromPackBuffer.Type::Customer;
                                            gtVPFromPackBuffer."Entry No." := "Entry No.";
                                            gDueDate := "Due Date";
                                            IF gDueDate <> 0D THEN
                                              IF (DATE2DWY(gDueDate,1) IN [6,7]) THEN
                                                gDueDate := CALCDATE(STRSUBSTNO('<+%1D>',8 - DATE2DWY(gDueDate,1)),gDueDate);
                                            gtVPFromPackBuffer."Posting Date" := gDueDate;
                                            gtVPFromPackBuffer.INSERT;
                                          END;
                                        END;
                                    END;
                                END;

               OnPostDataItem=VAR
                                PaymentToleranceMgt@12047958 : Codeunit 426;
                              BEGIN
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1070000;2;Field     ;
                  CaptionML=[ENU=LB Giro Type;
                             NOR=LB-girotype;
                             SVE=Girotypkod];
                  SourceExpr=gGiroTypeCode;
                  TableRelation="VP Giro Type" }

      { 1070002;2;Field     ;
                  CaptionML=[ENU=Due Date;
                             NOR=Forfallsdato;
                             SVE=F”rfallodatum];
                  SourceExpr=gDueDate2 }

      { 1070004;2;Field     ;
                  CaptionML=[ENU=Method;
                             NOR=Metode;
                             SVE=Metod];
                  OptionCaptionML=[ENU=" ,By Due Date,All by Posting Date ";
                                   NOR=" ,Per Forrfallsdato,Alle per Bokf›ringsdato ";
                                   SVE=" ,Per f”rfallodatum,Alla per bokf”ringsdatum "];
                  SourceExpr=gMethod }

      { 1070006;2;Field     ;
                  CaptionML=[ENU=Account Type;
                             NOR=Kontotype;
                             SVE=Kontotyp];
                  OptionCaptionML=[ENU=G/L Account,,,Bank Account;
                                   NOR=Hovedbokskonto,,,Bankkonto;
                                   SVE=Redov.konto,,,Bankkonto];
                  SourceExpr=gAccountType;
                  OnValidate=BEGIN
                               CLEAR(gBankAccountNo);
                               CLEAR(gCurrFilter);
                             END;
                              }

      { 1070008;2;Field     ;
                  CaptionML=[ENU=Account No;
                             NOR=Nr;
                             SVE=Kontonr];
                  SourceExpr=gBankAccountNo;
                  OnValidate=BEGIN
                               CASE gAccountType OF
                                 gAccountType::"G/L Account":
                                   BEGIN
                                     IF gBankAccountNo <> '' THEN
                                       gGLAccount.GET(gBankAccountNo);
                                   END;
                                 gAccountType::"Bank Account":
                                   BEGIN
                                     IF gBankAccountNo <> '' THEN BEGIN
                                       gBankAccount.GET(gBankAccountNo);
                                       IF gBankAccount."Currency Code" <> '' THEN
                                         gCurrFilter := gBankAccount."Currency Code";
                                     END ELSE
                                       CLEAR(gCurrFilter);
                                   END;
                               END;
                             END;

                  OnLookup=BEGIN
                             CASE gAccountType OF
                               gAccountType::"G/L Account":
                                 BEGIN
                                   IF PAGE.RUNMODAL(0,gGLAccount) = ACTION::LookupOK THEN
                                     gBankAccountNo := gGLAccount."No.";
                                 END;
                               gAccountType::"Bank Account":
                                 BEGIN
                                   IF PAGE.RUNMODAL(0,gBankAccount) = ACTION::LookupOK THEN
                                     gBankAccountNo := gBankAccount."No.";
                                   gBankAccount.GET(gBankAccountNo);
                                   IF gBankAccount."Currency Code" <> '' THEN
                                     gCurrFilter := gBankAccount."Currency Code";
                                 END;
                             END;
                           END;
                            }

      { 1070010;2;Field     ;
                  CaptionML=[ENU=Currency Filter;
                             NOR=Valutafilter;
                             SVE=Valutafilter];
                  SourceExpr=gCurrFilter;
                  TableRelation=Currency }

      { 1070012;2;Field     ;
                  CaptionML=[ENU=Posting Date;
                             NOR=Bokf›ringsdato;
                             SVE=Bokf”ringsdatum];
                  SourceExpr=gPostingDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      gGiroTypeCode@1070000 : Code[10];
      gDueDate2@1070001 : Date;
      gVendLedgerEntry@1070002 : Record 25;
      gCustLedgerEntry@12047958 : Record 21;
      gGenJnlLine@1070003 : Record 81;
      gXGenJnlLine@1070004 : Record 81;
      gPack@1070005 : Record 11128079;
      PEB001@1070020 : TextConst 'ENU=Enter the posting date;NOR=Angi Bokf›ringsdato;SVE=Ange bokf”ringsdatum';
      PEB002@1070021 : TextConst 'ENU=Enter the LB giro type;NOR=Angi LB-girotype;SVE=Ange girotypkod';
      PEB003@1070022 : TextConst 'ENU=Enter the due date;NOR=Angi Forfallsdato;SVE=Ange f”rfallodatum';
      gtVPFromPackBuffer@1070006 : TEMPORARY Record 11128067;
      gSavePostDate@1070007 : Date;
      gTotAmount@1070008 : Decimal;
      gGLAccount@1070009 : Record 15;
      gBankAccount@1070010 : Record 270;
      gDueDate@1070011 : Date;
      gWindow@1070012 : Dialog;
      gI@1070013 : Integer;
      PEB006@1070025 : TextConst 'ENU=Enter the bank account number;NOR=Angi bankkonto;SVE=Ange bankkontonr';
      gMethod@1070014 : ' ,By Due Date,All by Posting Date';
      gPostingDate@1070015 : Date;
      PEB007@1070026 : TextConst 'ENU=Enter the method;NOR=Angi metode;SVE=Ange metod';
      gAccountType@1070016 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      gBankAccountNo@1070017 : Code[20];
      gNoOfRec@1070018 : Integer;
      gCurrFilter@1070019 : Code[10];
      gBaseTables@12047960 : Codeunit 11128080;

    PROCEDURE SetGenJnlLine@1070001(NewGLJnlLine@1000 : Record 81);
    BEGIN
      gGenJnlLine := NewGLJnlLine;
    END;

    PROCEDURE BalAccount@1070002();
    BEGIN
      gXGenJnlLine := gGenJnlLine;
      gGenJnlLine.INIT;
      gGenJnlLine."Line No." += 10000;
      gGenJnlLine.SetUpNewLine(gXGenJnlLine,0,TRUE);
      gGenJnlLine.VALIDATE("Account Type",gAccountType);
      gGenJnlLine."Document Type" := gGenJnlLine."Document Type"::Payment;
      gGenJnlLine.VALIDATE("Account No.",gBankAccountNo);
      gGenJnlLine.VALIDATE("Posting Date",gSavePostDate);
      gGenJnlLine.VALIDATE(Amount,-gTotAmount);
      gGenJnlLine.INSERT;
      CLEAR(gTotAmount);
    END;

    PROCEDURE CalcBalanceAmount@1070000() rBalanceAmount : Decimal;
    VAR
      CurrExchRate@1070000 : Record 330;
    BEGIN
      IF (gBankAccount."No." = '') AND (gAccountType = gAccountType::"Bank Account") THEN
        gBankAccount.GET(gBankAccountNo);
      IF (gAccountType = gAccountType::"G/L Account") OR
        ((gAccountType = gAccountType::"Bank Account") AND (gBankAccount."Currency Code" = '')) THEN BEGIN
        IF gGenJnlLine."Currency Code" <> '' THEN
          rBalanceAmount := ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              0,'',gSavePostDate,gGenJnlLine."Currency Code",gGenJnlLine.Amount,
              CurrExchRate.ExchangeRate(0,'',gSavePostDate,gGenJnlLine."Currency Code",FALSE),FALSE))
        ELSE
          rBalanceAmount := gGenJnlLine.Amount;
        END ELSE IF (gAccountType = gAccountType::"Bank Account") AND (gBankAccount."Currency Code" <> '') THEN BEGIN
          IF gGenJnlLine."Currency Code" <> '' THEN BEGIN
            IF (gGenJnlLine."Currency Code" <> gBankAccount."Currency Code") THEN
              rBalanceAmount := ROUND(
                CurrExchRate.ExchangeAmtFCYToFCY(
                  gSavePostDate,gGenJnlLine."Currency Code",gBankAccount."Currency Code", gGenJnlLine.Amount,FALSE))
            ELSE
              rBalanceAmount := gGenJnlLine.Amount;
          END ELSE BEGIN
            rBalanceAmount := ROUND(
              CurrExchRate.ExchangeAmtLCYToFCY(
                0,'',gSavePostDate,gBankAccount."Currency Code",gGenJnlLine.Amount,
                CurrExchRate.ExchangeRate(0,'',gSavePostDate,gBankAccount."Currency Code",FALSE),FALSE));
          END;
      END;
    END;

    BEGIN
    {
      PEB *** Begin ***
      PEB0091 Banking
      PEB
      PEB *** End ***
    }
    END.
  }
  RDLDATA
  {
  }
}

