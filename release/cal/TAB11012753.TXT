OBJECT Table 11012753 Contact Feature Type
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CopyContFeatTypeFromCompany(FALSE,FALSE);
               //**4PS01.sn
               IF FPSLicenseManagement.LicenseAndReadPermissionForTable(CompRelationRec) THEN
                 CentrManagementCU.EditContactFeatureType(Rec,1,xRec);
               //**4PS01.en
               FillModificationData; //**4PS02n
             END;

    OnModify=BEGIN
               CopyContFeatTypeFromCompany(FALSE,FALSE);
               //**4PS01.sn
               IF FPSLicenseManagement.LicenseAndReadPermissionForTable(CompRelationRec) THEN
                 CentrManagementCU.EditContactFeatureType(Rec,2,xRec);
               //**4PS01.en
               FillModificationData; //**4PS02n
             END;

    OnDelete=BEGIN
               CopyContFeatTypeFromCompany(FALSE,TRUE);

               IF "Feature Group" <> '' THEN
                 IF FeatGroupRec.GET("Feature Group") THEN BEGIN
                   MainRec.RESET;
                   MainRec.SETRANGE("Relation Type","Relation Type");
                   MainRec.SETRANGE(Code, Code);
                   MainRec.SETRANGE("Feature Group", "Feature Group");
                   MainRec.SETFILTER("Line No.", '<>%1', "Line No.");
                   IF NOT MainRec.FINDFIRST THEN
                     CASE "Relation Type" OF
                       "Relation Type"::Company: FeatGroupRec.TESTFIELD("Obligatory for Companies",FALSE);
                       "Relation Type"::Contact: FeatGroupRec.TESTFIELD("Obligatory for Contacts",FALSE);
                       "Relation Type"::Person: FeatGroupRec.TESTFIELD("Obligatory for Persons",FALSE);
                       "Relation Type"::"Try-out": FeatGroupRec.TESTFIELD("Obligatory for Try-outs",FALSE);
                       "Relation Type"::"Try-out Quote": FeatGroupRec.TESTFIELD("Obligatory for Try-out Quotes",FALSE);
                       "Relation Type"::Parcel: FeatGroupRec.TESTFIELD("Obligatory for Parcels",FALSE);
                       "Relation Type"::Job: FeatGroupRec.TESTFIELD("Obligatory for Jobs",FALSE);
                       "Relation Type"::ServiceContract: FeatGroupRec.TESTFIELD("Obligatory for Serv. Contracts",FALSE);
                       "Relation Type"::Vessel: FeatGroupRec.TESTFIELD("Obligatory for Vessels", FALSE);
                     END;
                 END;
               //**4PS01.sn
               IF FPSLicenseManagement.LicenseAndReadPermissionForTable(CompRelationRec) THEN
                 CentrManagementCU.EditContactFeatureType(Rec,4,xRec);
               //**4PS01.en
             END;

    CaptionML=[ENU=Contact Feature Type;
               NOR=Kontaktfunksjonstype;
               SVE=Kontaktfunktionstyp];
    DrillDownPageID=Page11012754;
  }
  FIELDS
  {
    { 10  ;   ;Relation Type       ;Option        ;CaptionML=[ENU=Relation Type;
                                                              NOR=Relasjonstype;
                                                              SVE=Relationstyp];
                                                   OptionCaptionML=[ENU=Company,Contact,Try-out,Try-out Quote,Parcel,Project,Service Contract,Vessel,Person;
                                                                    NOR=Selskap,Kontakt,Prospekt,Tilbudsforesp›rsel,Pakke,Prosjekt,Servicekontrakt,Fart›y,Person;
                                                                    SVE=F”retag,Kontakt,Anbud,Anbudsoffert,Paket,Projekt,Servicekontrakt,Fartyg,Person];
                                                   OptionString=Company,Contact,Try-out,Try-out Quote,Parcel,Job,ServiceContract,Vessel,Person;
                                                   Description=Must be equal to table 11012754 field 20 }
    { 20  ;   ;Code                ;Code20        ;TableRelation=IF (Relation Type=CONST(Company)) Contact.No. WHERE (Type=CONST(Company))
                                                                 ELSE IF (Relation Type=CONST(Contact)) Contact.No. WHERE (Type=CONST(Person),
                                                                                                                           Company No.=FILTER(<>''))
                                                                                                                           ELSE IF (Relation Type=CONST(Person)) Contact.No. WHERE (Type=CONST(Person),
                                                                                                                                                                                    Company No.=FILTER(''))
                                                                                                                                                                                    ELSE IF (Relation Type=CONST(Try-out)) Try-out.Code
                                                                                                                                                                                    ELSE IF (Relation Type=CONST(Try-out Quote)) "Try-out Quote".Code
                                                                                                                                                                                    ELSE IF (Relation Type=CONST(Parcel)) Parcel.No.
                                                                                                                                                                                    ELSE IF (Relation Type=CONST(Job)) Job.No.
                                                                                                                                                                                    ELSE IF (Relation Type=CONST(ServiceContract)) Service-Contract.No.;
                                                   CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod] }
    { 30  ;   ;Feature Group       ;Text50        ;TableRelation=IF (Relation Type=CONST(Company)) "Contact Feature Group".Description WHERE (Companies=CONST(Yes))
                                                                 ELSE IF (Relation Type=CONST(Contact)) "Contact Feature Group".Description WHERE (Contacts=CONST(Yes))
                                                                 ELSE IF (Relation Type=CONST(Try-out)) "Contact Feature Group".Description WHERE (Try-outs=CONST(Yes))
                                                                 ELSE IF (Relation Type=CONST(Try-out Quote)) "Contact Feature Group".Description WHERE (Try-out Quotes=CONST(Yes))
                                                                 ELSE IF (Relation Type=CONST(Parcel)) "Contact Feature Group".Description WHERE (Parcels=CONST(Yes))
                                                                 ELSE IF (Relation Type=CONST(Job)) "Contact Feature Group".Description WHERE (Jobs=CONST(Yes))
                                                                 ELSE IF (Relation Type=CONST(ServiceContract)) "Contact Feature Group".Description WHERE (Service Contracts=CONST(Yes))
                                                                 ELSE IF (Relation Type=CONST(Vessel)) "Contact Feature Group".Description WHERE (Vessels=CONST(Yes))
                                                                 ELSE IF (Relation Type=CONST(Person)) "Contact Feature Group".Description WHERE (Persons=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                IF ("Feature Group" <> xRec."Feature Group") THEN BEGIN
                                                                  IF NOT FeatureRec.GET("Feature Group", Feature) THEN
                                                                    Feature := '';
                                                                  CheckFeatureOnOtherLine();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Feature Group;
                                                              NOR=Funksjonsgruppe;
                                                              SVE=Funktionsgrupp] }
    { 35  ;   ;Line No.            ;Integer       ;OnValidate=VAR
                                                                ContactFeatureType@1210190000 : Record 11012753;
                                                              BEGIN
                                                                IF "Line No." <> xRec."Line No." THEN
                                                                  IF FPSLicenseManagement.LicenseAndReadPermissionForTable(CompRelationRec) THEN BEGIN
                                                                    ContactFeatureType := xRec;
                                                                    IF ContactFeatureType.FIND THEN
                                                                      CentrManagementCU.EditContactFeatureType(Rec,3,xRec);
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 40  ;   ;Feature             ;Code20        ;TableRelation="Contact Feature".Code WHERE (Feature Group=FIELD(Feature Group));
                                                   OnValidate=BEGIN
                                                                IF (Feature <> xRec.Feature) THEN BEGIN
                                                                  CheckFeatureOnOtherLine();
                                                                END;
                                                                CALCFIELDS("Feature Description");
                                                              END;

                                                   CaptionML=[ENU=Feature;
                                                              NOR=Funksjon;
                                                              SVE=Funktion] }
    { 50  ;   ;Feature Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contact Feature".Description WHERE (Feature Group=FIELD(Feature Group),
                                                                                                           Code=FIELD(Feature)));
                                                   CaptionML=[ENU=Feature Description;
                                                              NOR=Funksjonsbeskrivelse;
                                                              SVE=Funktionsbeskrivning];
                                                   Editable=No }
    { 55  ;   ;Value               ;Decimal       ;CaptionML=[ENU=Value;
                                                              NOR=Verdi;
                                                              SVE=V„rde] }
    { 60  ;   ;Comments            ;Text50        ;CaptionML=[ENU=Comments;
                                                              NOR=Kommentarer;
                                                              SVE=Kommentarer] }
    { 70  ;   ;Inherited from Company;Boolean     ;CaptionML=[ENU=Inherited from Company;
                                                              NOR=Arvet fra selskap;
                                                              SVE=Žrvt fr†n f”retag;
                                                              ENI=Inherited from Company];
                                                   Editable=No }
    { 80  ;   ;Modified By         ;Code50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Modified By;
                                                              NOR=Modified By;
                                                              SVE=Modified By] }
    { 90  ;   ;Last Modified       ;DateTime      ;CaptionML=[ENU=Last Modified;
                                                              NOR=Sist endret;
                                                              SVE=Žndrades senast] }
    { 100 ;   ;Date                ;Date          ;CaptionML=[ENU=Date;
                                                              NOR=Dato;
                                                              SVE=Datum] }
    { 110 ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 120 ;   ;Feature Option      ;Code20        ;TableRelation="Feature Option"."Feature Option" WHERE (Feature Group=FIELD(Feature Group),
                                                                                                          Feature=FIELD(Feature));
                                                   CaptionML=ENU=Feature Option }
    { 130 ;   ;Feature Option Description;Text100 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Feature Option"."Feature Option Description" WHERE (Feature Group=FIELD(Feature Group),
                                                                                                                           Feature=FIELD(Feature),
                                                                                                                           Feature Option=FIELD(Feature Option)));
                                                   CaptionML=ENU=Feature Option Description;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Relation Type,Code,Line No.             ;Clustered=Yes }
    {    ;Relation Type,Code,Feature Group,Feature }
    {    ;Relation Type,Feature Group,Feature,Code }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      FeatureRec@1100485002 : Record 11012752;
      FeatGroupRec@1210190000 : Record 11012751;
      CompRelationRec@1210190005 : Record 11012059;
      MainRec@1210190006 : Record 11012753;
      Text000@1100485000 : TextConst 'ENU="This is a feature taken from Company, cannot be changed from here. ";NOR=Dette er en funksjon hentet fra selskap, kan ikke endres herfra.;SVE="Detta „r en funktion tagen fr†n f”retaget som inte kan „ndras h„rifr†n. "';
      ChangeByProgram@1100485001 : Boolean;
      CentrManagementCU@1100485003 : Codeunit 11012010;
      Text001@1100485004 : TextConst 'ENU=Attention, ''%1-%2'' is already present.;NOR=Obs! ''%1-%2'' finnes allerede.;SVE=Obs! ''%1-%2'' finns redan.';
      FPSLicenseManagement@1100527400 : Codeunit 11229289;

    PROCEDURE RelationName@1100485000() : Text[100];
    VAR
      lContact@1100485000 : Record 5050;
      lTryOut@1100485001 : Record 11012750;
      lTryOutQuote@1100485002 : Record 11012758;
    BEGIN
      CASE "Relation Type" OF
        "Relation Type"::Company,
        "Relation Type"::Contact,
        "Relation Type"::Person:
          BEGIN
            lContact.SETRANGE("No.", Code);
            IF lContact.FINDFIRST THEN
              EXIT(lContact.Name);
          END;
        "Relation Type"::"Try-out":
          BEGIN
            lTryOut.SETRANGE(Code, Code);
            IF lTryOut.FINDFIRST THEN
              EXIT(lTryOut.Description);
          END;
        "Relation Type"::"Try-out Quote":
          BEGIN
            lTryOutQuote.SETRANGE(Code, Code);
            IF lTryOutQuote.FINDFIRST THEN
              EXIT(lTryOutQuote.Description);
          END;
      END;
      EXIT('');
    END;

    PROCEDURE CopyContFeatTypeFromCompany@1100485001(FromFeatureGroup@1100485003 : Boolean;DeleteBln@1100485004 : Boolean);
    VAR
      ContactPersonRec@1100485000 : Record 5050;
      ContactFeatureGroupRec@1100485001 : Record 11012751;
      ContactFeatureTypeRec@1100485002 : Record 11012753;
      ContactFeatureType2Rec@1100485005 : Record 11012753;
      lIntNextLineNo@1100485006 : Integer;
    BEGIN
      //
      // Update for all contacts of a company the current Contact Feature Type when the Feature Group is inherited.
      //
      IF NOT ChangeByProgram THEN
        IF "Relation Type" <> "Relation Type"::Company THEN
          IF "Inherited from Company" THEN
            IF CheckCompanyExists(Code) THEN
              ERROR(Text000)
            ELSE
              EXIT;

      IF NOT FromFeatureGroup THEN BEGIN
        IF NOT ContactFeatureGroupRec.GET("Feature Group") THEN
          EXIT;
        IF NOT ContactFeatureGroupRec."Inherit from Company" THEN
          EXIT;
      END;

      IF "Relation Type" = "Relation Type"::Company THEN BEGIN
        ContactPersonRec.SETCURRENTKEY("Company No.");
        ContactPersonRec.SETRANGE("Company No.", Code);
        ContactPersonRec.SETRANGE(Type, ContactPersonRec.Type::Person);
        IF ContactPersonRec.FINDSET(FALSE, FALSE) THEN
          REPEAT
            //contactperson of company
            ContactFeatureTypeRec.SETCURRENTKEY("Relation Type",Code,"Feature Group");
            ContactFeatureTypeRec.SETRANGE("Relation Type",ContactFeatureTypeRec."Relation Type"::Contact);
            ContactFeatureTypeRec.SETRANGE(Code,ContactPersonRec."No.");
            ContactFeatureTypeRec.SETRANGE("Feature Group","Feature Group");
            IF FromFeatureGroup THEN
              ContactFeatureTypeRec.SETFILTER(Feature, '%1|%2', '', Feature)
            ELSE
              ContactFeatureTypeRec.SETFILTER(Feature, '%1|%2', '', xRec.Feature);
            IF ContactFeatureTypeRec.FINDFIRST THEN BEGIN
              IF DeleteBln THEN BEGIN
                IF ContactFeatureTypeRec."Inherited from Company" THEN BEGIN
                  ContactFeatureTypeRec.SetChangeByProgram(TRUE);
                  ContactFeatureTypeRec.DELETE(TRUE);
                END;
              END ELSE BEGIN
                ContactFeatureTypeRec.SetChangeByProgram(TRUE);
                ContactFeatureTypeRec.Feature := Feature;
                ContactFeatureTypeRec.Value := Value;
                ContactFeatureTypeRec.Comments := Comments;
                ContactFeatureTypeRec."Inherited from Company" := TRUE;
                ContactFeatureTypeRec.MODIFY(TRUE);
              END;
            END ELSE BEGIN
              IF NOT DeleteBln THEN BEGIN
                ContactFeatureType2Rec.RESET;
                ContactFeatureType2Rec.SETRANGE("Relation Type",ContactFeatureType2Rec."Relation Type"::Contact);
                ContactFeatureType2Rec.SETRANGE(Code,ContactPersonRec."No.");
                IF ContactFeatureType2Rec.FINDLAST THEN
                  lIntNextLineNo := ContactFeatureType2Rec."Line No."
                ELSE
                  lIntNextLineNo := 0;
                ContactFeatureTypeRec."Relation Type" := ContactFeatureTypeRec."Relation Type"::Contact;
                ContactFeatureTypeRec.Code := ContactPersonRec."No.";
                ContactFeatureTypeRec."Line No." := lIntNextLineNo + 10000;
                ContactFeatureTypeRec."Feature Group" := "Feature Group";
                ContactFeatureTypeRec.Feature := Feature;
                ContactFeatureTypeRec.Value := Value;
                ContactFeatureTypeRec.Comments := Comments;
                ContactFeatureTypeRec."Inherited from Company" := TRUE;
                ContactFeatureTypeRec.SetChangeByProgram(TRUE);
                ContactFeatureTypeRec.INSERT(TRUE);
              END;
            END
          UNTIL ContactPersonRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopyContFeatTypeFromFtrGroup@1100485003(IOldContactFeatureGroup@1100485003 : Record 11012751;IContactFeatureGroup@1100485004 : Record 11012751);
    VAR
      ContactFeatureTypeRec@1100485000 : Record 11012753;
    BEGIN
      //
      // This function is called when the field "Inherit from Company" of the Feature Group is changed
      //
      IF IOldContactFeatureGroup."Inherit from Company" = IContactFeatureGroup."Inherit from Company" THEN
        EXIT;

      ContactFeatureTypeRec.SETCURRENTKEY("Relation Type","Feature Group");
      IF NOT IContactFeatureGroup."Inherit from Company" THEN BEGIN
        ContactFeatureTypeRec.SETRANGE("Relation Type",ContactFeatureTypeRec."Relation Type"::Contact);
        ContactFeatureTypeRec.SETRANGE("Feature Group",IContactFeatureGroup.Description);
        IF ContactFeatureTypeRec.FINDSET(TRUE,FALSE) THEN
          REPEAT
            ContactFeatureTypeRec."Inherited from Company" := FALSE;
            ContactFeatureTypeRec.MODIFY(TRUE);
          UNTIL ContactFeatureTypeRec.NEXT = 0;
      END ELSE BEGIN
        ContactFeatureTypeRec.SETRANGE("Relation Type",ContactFeatureTypeRec."Relation Type"::Company);
        ContactFeatureTypeRec.SETRANGE("Feature Group",IContactFeatureGroup.Description);
        IF ContactFeatureTypeRec.FINDSET THEN
          REPEAT
            ContactFeatureTypeRec.CopyContFeatTypeFromCompany(TRUE,FALSE);
          UNTIL ContactFeatureTypeRec.NEXT = 0;
      END;
    END;

    PROCEDURE CopyOneContFeatTypeFromComp@1100485002(iContactPersonRec@1100485003 : Record 5050;DeleteBln@1100485004 : Boolean);
    VAR
      ContactFeatureGroupRec@1100485001 : Record 11012751;
      ContactFeatureTypeRec@1100485002 : Record 11012753;
      ContactFeatureTypeRec2@1100485000 : Record 11012753;
      ContactFeatureTypeRec3@1100525000 : Record 11012753;
      lIntNextLineNo@1100525001 : Integer;
    BEGIN
      //
      // Inherit Contact Feature Types from company for one contactperson
      //
      IF NOT iContactPersonRec.IsContactPerson THEN
        EXIT;

      ContactFeatureTypeRec.SETRANGE("Relation Type", ContactFeatureTypeRec."Relation Type"::Company);
      ContactFeatureTypeRec.SETRANGE(Code, iContactPersonRec."Company No.");
      IF ContactFeatureTypeRec.FINDSET THEN
        REPEAT
          IF ContactFeatureGroupRec.GET(ContactFeatureTypeRec."Feature Group") AND
             ContactFeatureGroupRec."Inherit from Company"
          THEN BEGIN
            //Call 12053.sn
            ContactFeatureTypeRec2.SETCURRENTKEY("Relation Type",Code,"Feature Group");
            ContactFeatureTypeRec2.SETRANGE("Relation Type", ContactFeatureTypeRec2."Relation Type"::Contact);
            ContactFeatureTypeRec2.SETRANGE(Code, iContactPersonRec."No.");
            ContactFeatureTypeRec2.SETRANGE("Feature Group", ContactFeatureTypeRec."Feature Group");
            ContactFeatureTypeRec2.SETFILTER(Feature, '%1|%2', '', ContactFeatureTypeRec.Feature); // Call 23607
            IF ContactFeatureTypeRec2.FINDFIRST THEN BEGIN
              IF DeleteBln THEN BEGIN
                ContactFeatureTypeRec2.DELETE(TRUE);
              END ELSE BEGIN
                ContactFeatureTypeRec2.Feature := ContactFeatureTypeRec.Feature;
                ContactFeatureTypeRec2.Value := ContactFeatureTypeRec.Value;
                ContactFeatureTypeRec2.Comments := ContactFeatureTypeRec.Comments;
                ContactFeatureTypeRec2."Inherited from Company" := TRUE;
                ContactFeatureTypeRec2.MODIFY(TRUE);
              END;
            END ELSE BEGIN
              IF NOT DeleteBln THEN BEGIN
                ContactFeatureTypeRec3.RESET;
                ContactFeatureTypeRec3.SETRANGE("Relation Type", ContactFeatureTypeRec3."Relation Type"::Contact);
                ContactFeatureTypeRec3.SETRANGE(Code, iContactPersonRec."No.");
                IF ContactFeatureTypeRec3.FINDLAST THEN
                  lIntNextLineNo := ContactFeatureTypeRec3."Line No."
                ELSE
                  lIntNextLineNo := 0;

                ContactFeatureTypeRec2."Relation Type" := ContactFeatureTypeRec2."Relation Type"::Contact;
                ContactFeatureTypeRec2.Code := iContactPersonRec."No.";
                ContactFeatureTypeRec2."Line No." := lIntNextLineNo + 10000;
                ContactFeatureTypeRec2."Feature Group" := ContactFeatureTypeRec."Feature Group";
                ContactFeatureTypeRec2.Feature := ContactFeatureTypeRec.Feature;
                ContactFeatureTypeRec2.Value := ContactFeatureTypeRec.Value;
                ContactFeatureTypeRec2.Comments := ContactFeatureTypeRec.Comments;
                ContactFeatureTypeRec2."Inherited from Company" := TRUE;
                ContactFeatureTypeRec2.SetChangeByProgram(TRUE);
                ContactFeatureTypeRec2.INSERT(TRUE);
              END;
            END;
          END;
        UNTIL ContactFeatureTypeRec.NEXT = 0;
    END;

    PROCEDURE SetChangeByProgram@1100485004(ChangeByProg@1100485000 : Boolean);
    BEGIN
      ChangeByProgram := ChangeByProg;
    END;

    PROCEDURE CreateFeatureTypes@1210190000();
    VAR
      MarketingSetup@1100528400 : Record 5079;
      ContactFeatureType@1100528401 : Record 11012753;
    BEGIN
      ContactFeatureType.COPY(Rec);
      IF ContactFeatureType.ISEMPTY THEN BEGIN
        MarketingSetup.GET;
        CreateContactFeatureTypes(MarketingSetup."Only Create Obl. Features Aut.")
      END ELSE
        CreateContactFeatureTypes(TRUE); // If there are already feature types then
                                         // only add obligatory feature groups automatically.
    END;

    PROCEDURE CreateRelevantFeatureTypes@1100528408();
    BEGIN
      CreateContactFeatureTypes(FALSE);
    END;

    LOCAL PROCEDURE CreateContactFeatureTypes@1100528400(OnlyObligatoryFeatureTypes@1100528400 : Boolean);
    VAR
      lvFeatTypeRec@1100485000 : Record 11012753;
      lvFeatGroupRec@1210190000 : Record 11012751;
      LineNoInt@1210190001 : Integer;
    BEGIN
      //db, 08-11-06: function moved from form (11012754) to table

      lvFeatTypeRec.COPY(Rec);
      WITH lvFeatTypeRec DO BEGIN
        CASE "Relation Type" OF
          "Relation Type"::Company: lvFeatGroupRec.SETRANGE(Companies,TRUE);
          "Relation Type"::Contact: lvFeatGroupRec.SETRANGE(Contacts,TRUE);
          "Relation Type"::Person: lvFeatGroupRec.SETRANGE(Persons,TRUE);
          "Relation Type"::"Try-out": lvFeatGroupRec.SETRANGE("Try-outs",TRUE);
          "Relation Type"::"Try-out Quote": lvFeatGroupRec.SETRANGE("Try-out Quotes",TRUE);
          "Relation Type"::Parcel: lvFeatGroupRec.SETRANGE(Parcels,TRUE);
          "Relation Type"::Job: lvFeatGroupRec.SETRANGE(Jobs,TRUE);
          "Relation Type"::ServiceContract: lvFeatGroupRec.SETRANGE("Service Contracts",TRUE);
          "Relation Type"::Vessel: lvFeatGroupRec.SETRANGE(Vessels, TRUE);
        END;

        IF OnlyObligatoryFeatureTypes THEN
          CASE "Relation Type" OF
            "Relation Type"::Company: lvFeatGroupRec.SETRANGE("Obligatory for Companies",TRUE);
            "Relation Type"::Contact: lvFeatGroupRec.SETRANGE("Obligatory for Contacts",TRUE);
            "Relation Type"::Person: lvFeatGroupRec.SETRANGE("Obligatory for Persons",TRUE);
            "Relation Type"::"Try-out": lvFeatGroupRec.SETRANGE("Obligatory for Try-outs",TRUE);
            "Relation Type"::"Try-out Quote": lvFeatGroupRec.SETRANGE("Obligatory for Try-out Quotes",TRUE);
            "Relation Type"::Parcel: lvFeatGroupRec.SETRANGE("Obligatory for Parcels",TRUE);
            "Relation Type"::Job: lvFeatGroupRec.SETRANGE("Obligatory for Jobs",TRUE);
            "Relation Type"::ServiceContract: lvFeatGroupRec.SETRANGE("Obligatory for Serv. Contracts",TRUE);
            "Relation Type"::Vessel: lvFeatGroupRec.SETRANGE(lvFeatGroupRec."Obligatory for Vessels", TRUE);
          END;

        IF FINDLAST THEN
          LineNoInt := "Line No." + 10000
        ELSE
          LineNoInt := 10000;

        IF lvFeatGroupRec.FIND('-') THEN BEGIN
          REPEAT
            SETRANGE("Feature Group",lvFeatGroupRec.Description);
            IF NOT FIND('-') THEN BEGIN
              INIT;
              IF Code = '' THEN BEGIN  //db, 10-01-07
                Code := GETFILTER(Code);
                "Relation Type" := GETRANGEMAX("Relation Type");
              END;
              "Line No.":= LineNoInt;
              LineNoInt := LineNoInt + 10000;
              "Feature Group" := lvFeatGroupRec.Description;
              INSERT(TRUE);
            END;
          UNTIL lvFeatGroupRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE IsFilteredOnOneCode@1100528401() : Boolean;
    BEGIN
      IF GETFILTER(Code) = '' THEN
        EXIT(FALSE);

      IF GETRANGEMIN(Code) <> GETRANGEMAX(Code) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE CheckFeatureOnOtherLine@1100485005();
    VAR
      lvContFeatRec@1100485000 : Record 11012753;
    BEGIN
      IF ("Feature Group" = '') OR (Feature = '') THEN
        EXIT;

      lvContFeatRec.SETCURRENTKEY("Relation Type", Code, "Feature Group", Feature);
      lvContFeatRec.SETRANGE("Relation Type", "Relation Type");
      lvContFeatRec.SETRANGE(Code, Code);
      lvContFeatRec.SETFILTER("Line No.", '<>%1', "Line No.");
      lvContFeatRec.SETRANGE("Feature Group", "Feature Group");
      lvContFeatRec.SETRANGE(Feature, Feature);
      IF lvContFeatRec.FINDFIRST THEN
        MESSAGE(Text001, "Feature Group", Feature);
    END;

    PROCEDURE FillModificationData@1100485006();
    VAR
      TryOutQuote@1100525000 : Record 11012758;
    BEGIN
      //**4PS02sn
      "Modified By" := USERID;
      "Last Modified" := CURRENTDATETIME;

      //kzwerver, 140108, sn, #C009558
      IF ("Relation Type" = "Relation Type"::"Try-out Quote") THEN BEGIN
        IF (TryOutQuote.GET(Code)) THEN BEGIN
          TryOutQuote."Change Date" := TODAY;
          TryOutQuote."Changed By" := USERID;
          TryOutQuote.MODIFY(TRUE);
        END;
      END;
      //kzwerver, 140108, se, #C009558
    END;

    PROCEDURE CheckCompanyExists@1100525000(Code@1100525000 : Code[20]) : Boolean;
    VAR
      Contact@1100525001 : Record 5050;
    BEGIN
      Contact.GET(Code);
      EXIT(Contact.GET(Contact."Company No."));
    END;

    PROCEDURE CopyFeaturesFromOtherType@1100525001(FromRelationType@1100525007 : Integer;FromCode@1100525002 : Code[20];ToRelationType@1100525001 : Integer;ToCode@1100525000 : Code[20]);
    VAR
      FromContactFeatureType@1100525006 : Record 11012753;
      ToContactFeatureType@1100525005 : Record 11012753;
      ContactFeatureGroup@1100525004 : Record 11012751;
      GenericTempTable@1210190000 : TEMPORARY Record 11020579;
      GenTempTableKey1@1210190003 : Code[38];
      GenTempTableKey2@1210190002 : Code[38];
      NewLineNo@1100525003 : Integer;
      AlreadyCopied@1210190001 : Boolean;
    BEGIN
      //Currently only try-out quotes and projects support
      IF FromCode = '' THEN
        EXIT;

      FromContactFeatureType.SETRANGE("Relation Type", FromRelationType);
      FromContactFeatureType.SETRANGE(Code, FromCode);
      IF FromContactFeatureType.FINDSET THEN
        REPEAT
          ContactFeatureGroup.GET(FromContactFeatureType."Feature Group");
          IF (ContactFeatureGroup."Try-out Quotes" AND (ToRelationType = ToContactFeatureType."Relation Type"::"Try-out Quote")) OR
             (ContactFeatureGroup.Jobs AND (ToRelationType = ToContactFeatureType."Relation Type"::Job)) OR
             (ContactFeatureGroup."Service Contracts" AND (ToRelationType = ToContactFeatureType."Relation Type"::ServiceContract)) OR
             (ContactFeatureGroup.Vessels AND (ToRelationType = ToContactFeatureType."Relation Type"::Vessel))
          THEN BEGIN
            ToContactFeatureType.RESET;
            ToContactFeatureType.SETRANGE("Relation Type", ToRelationType);
            ToContactFeatureType.SETRANGE(Code, ToCode);
            IF ToContactFeatureType.FINDLAST THEN
              NewLineNo := ToContactFeatureType."Line No." + 10000
            ELSE
              NewLineNo := 10000;

            //kzwerver, 111219, c, #30872
            ToContactFeatureType.SETRANGE("Feature Group", FromContactFeatureType."Feature Group");
            AlreadyCopied := CheckIfAlreadyCopied(GenericTempTable, FromContactFeatureType."Feature Group");

            IF NOT AlreadyCopied THEN BEGIN
              SetKeytFieldsGenericTempTable(FromContactFeatureType."Feature Group",
                GenTempTableKey1, GenTempTableKey2);
              GenericTempTable."Key Code1" := GenTempTableKey1;
              GenericTempTable."Key Code2" := GenTempTableKey2;
              GenericTempTable.INSERT;
            END;

            IF (NOT AlreadyCopied) AND ToContactFeatureType.FINDFIRST THEN BEGIN
              ToContactFeatureType.TRANSFERFIELDS(FromContactFeatureType, FALSE);
              ToContactFeatureType.MODIFY(TRUE);
            END ELSE BEGIN
              ToContactFeatureType := FromContactFeatureType;
              ToContactFeatureType."Relation Type" := ToRelationType;
              ToContactFeatureType.Code := ToCode;
              ToContactFeatureType."Line No." := NewLineNo;
              ToContactFeatureType.INSERT(TRUE);
            END;
          END;
        UNTIL FromContactFeatureType.NEXT = 0;
    END;

    PROCEDURE OnLookupFeature@1210190001(Editable@1210190000 : Boolean;NewLine@1210190002 : Boolean) : Boolean;
    VAR
      ContFeatureType@1210190001 : Record 11012753;
      ContFeature@1100525000 : Record 11012752;
      TmpContFeature@1100530001 : TEMPORARY Record 11012752;
      ContFeatureList@1100530000 : Page 11012756;
      NextLineNo@1210190004 : Integer;
      Gap@1210190005 : Integer;
    BEGIN
      ContFeature.FILTERGROUP(9);  //* Only Features of the current Feature Group are allowed
      ContFeature.SETRANGE("Feature Group", "Feature Group");
      ContFeature.FILTERGROUP(0);
      ContFeature."Feature Group" := "Feature Group";
      ContFeature.Code := Feature;
      IF (NOT Editable) OR (Code = '') OR ("Feature Group" = '') THEN BEGIN
        PAGE.RUNMODAL(0, ContFeature);
        EXIT;
      END;

      ContFeatureList.SETTABLEVIEW(ContFeature);
      ContFeatureList.SETRECORD(ContFeature);
      ContFeatureList.SetCopyAllowed();
      ContFeatureList.LOOKUPMODE(TRUE);
      IF ContFeatureList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ContFeatureList.GETRECORD(ContFeature);
        VALIDATE(Feature, ContFeature.Code);
        EXIT(TRUE);
      END ELSE BEGIN
        IF ContFeatureList.GetMultiCopyRec(TmpContFeature) THEN BEGIN
          TmpContFeature.SETRANGE("Feature Group", "Feature Group");
          IF "Line No." <> 0 THEN BEGIN
            IF TmpContFeature.FINDFIRST THEN BEGIN
              IF ContFeatureType.GET("Relation Type", Code, "Line No.") THEN BEGIN
                IF (ContFeatureType."Feature Group" = TmpContFeature."Feature Group") AND
                   (NewLine OR
                    (ContFeatureType.Feature = '') AND (ContFeatureType.Value = 0) AND (ContFeatureType.Comments = ''))
                THEN BEGIN
                  VALIDATE(Feature, TmpContFeature.Code);
                  MODIFY(TRUE);
                  TmpContFeature.DELETE;
                END;
              END;
            END;
          END;
          IF TmpContFeature.FINDSET THEN BEGIN
            NextLineNo := GetNextLineNoAndDetermineGap("Relation Type", Code, "Line No.", TmpContFeature.COUNT, Gap);
            REPEAT
              ContFeatureType.INIT;
              ContFeatureType."Relation Type" := "Relation Type";
              ContFeatureType.VALIDATE(Code, Code);
              ContFeatureType.VALIDATE("Feature Group", TmpContFeature."Feature Group");
              ContFeatureType.VALIDATE(Feature, TmpContFeature.Code);
              ContFeatureType."Line No." := NextLineNo;
              ContFeatureType.INSERT(TRUE);
              NextLineNo := NextLineNo + Gap;
            UNTIL TmpContFeature.NEXT = 0;
            EXIT(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE GetNextLineNoAndDetermineGap@1210190004(RelType@1210190000 : Option;NoCode@1210190003 : Code[20];LineNo@1210190002 : Integer;NoOfNewLines@1210190004 : Integer;VAR Gap@1210190005 : Integer) : Integer;
    VAR
      ContFeatureType@1210190001 : Record 11012753;
    BEGIN
      IF LineNo = 0 THEN BEGIN
        Gap := 10000;
        EXIT(GetFreeLineNo(RelType, NoCode));
      END;

      ContFeatureType.SETRANGE("Relation Type", RelType);
      ContFeatureType.SETRANGE(Code, NoCode);
      ContFeatureType.SETFILTER("Line No.", '>%1', LineNo);
      IF NOT ContFeatureType.FINDFIRST THEN BEGIN
        Gap := 10000;
        EXIT(GetFreeLineNo(RelType, NoCode));
      END ELSE BEGIN
        IF NoOfNewLines > (ContFeatureType."Line No." - LineNo - 1) THEN BEGIN
          Gap := 10000;
          EXIT(GetFreeLineNo(RelType, NoCode));
        END ELSE BEGIN
          Gap := ROUND((ContFeatureType."Line No." - LineNo) / (NoOfNewLines + 1), 1);
          IF Gap > 10000 THEN
            Gap := 10000;
          EXIT(LineNo + Gap);
        END;
      END;
    END;

    PROCEDURE GetFreeLineNo@1210190002(RelType@1210190000 : Option;NoCode@1210190003 : Code[20]) : Integer;
    VAR
      ContFeatureType@1210190001 : Record 11012753;
    BEGIN
      ContFeatureType.SETRANGE("Relation Type", RelType);
      ContFeatureType.SETRANGE(Code, NoCode);
      IF ContFeatureType.FINDLAST THEN
        EXIT(ContFeatureType."Line No." + 10000)
      ELSE
        EXIT(10000);
    END;

    PROCEDURE GetFreeLineNo2@1100525002(RelType@1210190000 : Option;NoCode@1210190003 : Code[20];CentralCompany@1100525000 : Text) : Integer;
    VAR
      ContFeatureType@1210190001 : Record 11012753;
    BEGIN
      IF (CentralCompany <> '') THEN
        ContFeatureType.CHANGECOMPANY(CentralCompany);
      ContFeatureType.SETRANGE("Relation Type", RelType);
      ContFeatureType.SETRANGE(Code, NoCode);
      IF ContFeatureType.FINDLAST THEN
        EXIT(ContFeatureType."Line No." + 10000)
      ELSE
        EXIT(10000);
    END;

    PROCEDURE CheckIfAlreadyCopied@1210190003(VAR GenericTempTable@1210190000 : Record 11020579;FeatureGroup@1210190001 : Code[50]) : Boolean;
    VAR
      GenTempTableKey1@1210190003 : Code[38];
      GenTempTableKey2@1210190002 : Code[38];
    BEGIN
      //kzwerver, 111219, c, #30872
      SetKeytFieldsGenericTempTable(FeatureGroup, GenTempTableKey1, GenTempTableKey2);
      IF (GenericTempTable.GET(GenTempTableKey1, GenTempTableKey2, '', '', '', '')) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE SetKeytFieldsGenericTempTable@1210190005(FeatureGroup@1210190002 : Text[50];VAR GenTempTableKey1@1210190000 : Code[38];VAR GenTempTableKey2@1210190001 : Code[38]);
    BEGIN
      //kzwerver, 111219, n, #30872
      IF (STRLEN(FeatureGroup) > MAXSTRLEN(GenTempTableKey1)) THEN BEGIN
        GenTempTableKey1 := COPYSTR(FeatureGroup, 1, MAXSTRLEN(GenTempTableKey1));
        GenTempTableKey2 := COPYSTR(FeatureGroup, MAXSTRLEN(GenTempTableKey1) + 1);
      END ELSE BEGIN
        GenTempTableKey1 := FeatureGroup;
        GenTempTableKey2 := '';
      END;
    END;

    BEGIN
    {
      4PS01 Jan ter Harmsel, Call 3331, Contact Features included in Central Management
      4PS02 GB, call C-013080, Fields 'Modified by' and 'Last Modified' added
      4PS03 JD, call C-013366, Make it possible to link features to a job
    }
    END.
  }
}

