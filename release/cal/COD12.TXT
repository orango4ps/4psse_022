OBJECT Codeunit 12 Gen. Jnl.-Post Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00,NAVSE,DK,NO,FI,4PSSE,EXF40000,PE7.00;
  }
  PROPERTIES
  {
    TableNo=81;
    Permissions=TableData 15=r,
                TableData 17=rimd,
                TableData 21=rimd,
                TableData 25=rimd,
                TableData 45=rimd,
                TableData 253=rimd,
                TableData 254=rimd,
                TableData 271=rimd,
                TableData 272=rimd,
                TableData 379=rimd,
                TableData 380=rimd,
                TableData 1053=rimd,
                TableData 5222=rimd,
                TableData 5223=rimd,
                TableData 5601=rimd,
                TableData 5617=rimd,
                TableData 11072085=rimd,
                TableData 5625=rimd;
    OnRun=BEGIN
            GetGLSetup;
            RunWithCheck(Rec);
          END;

  }
  CODE
  {
    VAR
      NeedsRoundingErr@1000 : TextConst 'ENU=%1 needs to be rounded;NOR=%1 m† avrundes;SVE=%1 m†ste avrundas';
      PurchaseAlreadyExistsErr@1003 : TextConst '@@@="%1 = Document Type; %2 = Document No.";ENU=Purchase %1 %2 already exists for this vendor.;NOR=Kj›p %1 %2 finnes allerede for denne leverand›ren.;SVE=Ink”pet %1 %2 finns redan f”r leverant”ren.';
      BankPaymentTypeMustNotBeFilledErr@1004 : TextConst 'ENU=Bank Payment Type must not be filled if Currency Code is different in Gen. Journal Line and Bank Account.;NOR=Bankbetalingstype skal ikke fylles ut hvis valutakoden er forskjellig i Finanskladdelinje og Bankkonto.;SVE=Bankbetalningstyp ska inte fyllas i om valutakoden „r olika i Redovisningsjournalrad och Bankkonto.';
      DocNoMustBeEnteredErr@1005 : TextConst 'ENU=Document No. must be entered when Bank Payment Type is %1.;NOR=Bilagsnummer m† angis n†r bankbetalingstype er %1.;SVE=Dokumenttypen m†ste anges n„r bankbetalningstypen „r %1.';
      CheckAlreadyExistsErr@1006 : TextConst 'ENU=Check %1 already exists for this Bank Account.;NOR=Sjekk %1 finnes allerede for denne bankkontoen.;SVE=Check %1 finns redan f”r detta bankkonto.';
      GLSetup@1009 : Record 98;
      GlobalGLEntry@1014 : Record 17;
      TempGLEntryBuf@1010 : TEMPORARY Record 17;
      TempGLEntryVAT@1016 : TEMPORARY Record 17;
      VATPostingSetup@1100285300 : Record 325;
      GLReg@1029 : Record 45;
      AddCurrency@1033 : Record 4;
      CurrExchRate@1035 : Record 330;
      VATEntry@1038 : Record 254;
      TaxDetail@1046 : Record 322;
      UnrealizedCustLedgEntry@1084 : Record 21;
      UnrealizedVendLedgEntry@1085 : Record 25;
      GLEntryVATEntryLink@1087 : Record 253;
      TempVATEntry@1088 : TEMPORARY Record 254;
      TempGLEntryAutoAcc@1070003 : TEMPORARY Record 17;
      GenJnlCheckLine@1001 : Codeunit 11;
      PaymentToleranceMgt@1002 : Codeunit 426;
      NorwegianVATTools@1080002 : Codeunit 11128500;
      RemTools@1080003 : Codeunit 11128515;
      DeferralUtilities@1031 : Codeunit 1720;
      DeferralDocType@1039 : 'Purchase,Sales,G/L';
      LastDocType@1025 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder';
      AddCurrencyCode@1117 : Code[10];
      GLSourceCode@1040 : Code[10];
      LastDocNo@1023 : Code[20];
      FiscalYearStartDate@1011 : Date;
      CurrencyDate@1020 : Date;
      LastDate@1021 : Date;
      BalanceCheckAmount@1056 : Decimal;
      BalanceCheckAmount2@1057 : Decimal;
      BalanceCheckAddCurrAmount@1058 : Decimal;
      BalanceCheckAddCurrAmount2@1059 : Decimal;
      CurrentBalance@1060 : Decimal;
      TotalAddCurrAmount@1062 : Decimal;
      TotalAmount@1063 : Decimal;
      UnrealizedRemainingAmountCust@1086 : Decimal;
      UnrealizedRemainingAmountVend@1074 : Decimal;
      AmountRoundingPrecision@1012 : Decimal;
      AddCurrGLEntryVATAmt@1017 : Decimal;
      CurrencyFactor@1019 : Decimal;
      FirstEntryNo@1042 : Integer;
      NextEntryNo@1022 : Integer;
      NextVATEntryNo@1064 : Integer;
      FirstNewVATEntryNo@1065 : Integer;
      FirstTransactionNo@1024 : Integer;
      NextTransactionNo@1066 : Integer;
      NextConnectionNo@1067 : Integer;
      NextCheckEntryNo@1028 : Integer;
      InsertedTempGLEntryVAT@1027 : Integer;
      GLEntryNo@1026 : Integer;
      UseCurrFactorOnly@1078 : Boolean;
      NonAddCurrCodeOccured@1079 : Boolean;
      FADimAlreadyChecked@1080 : Boolean;
      ResidualRoundingErr@1008 : TextConst 'ENU=Residual caused by rounding of %1;NOR=Rest er for†rsaket av avrunding av %1;SVE=Rest p† grund av avrundning av %1';
      DimensionUsedErr@1007 : TextConst '@@@=Comment;ENU=A dimension used in %1 %2, %3, %4 has caused an error. %5.;NOR=En dimensjon som brukes i %1 %2, %3, %4, har for†rsaket en feil. %5.;SVE=En dimension anv„nd i %1 %2, %3, %4 har orsakat ett fel. %5.';
      OverrideDimErr@1018 : Boolean;
      JobLine@1036 : Boolean;
      CheckUnrealizedCust@1082 : Boolean;
      CheckUnrealizedVend@1083 : Boolean;
      GLSetupRead@1015 : Boolean;
      InvalidPostingDateErr@1034 : TextConst '@@@="%1=The date passed in for the posting date.";ENU=%1 is not within the range of posting dates for your company.;NOR=%1 er ikke innenfor tillatte bokf›ringsdatoer for selskapet.;SVE=%1 „r inte inom det till†tna intervallet f”r bokf”ringsdatum f”r ditt f”retag.';
      PropDeductionVAT@1080000 : Decimal;
      PropDedVATACY@1080001 : Decimal;
      NoDeferralScheduleErr@1037 : TextConst '@@@="%1=The line number of the general ledger transaction, %2=The Deferral Template Code";ENU=You must create a deferral schedule if a deferral template is selected. Line: %1, Deferral Template: %2.;NOR=Du m† opprette en tidsplan for periodisering hvis du har valgt en periodiseringsmal. Linje: %1, periodiseringsmal: %2.;SVE=Du m†ste skapa ett periodiseringsschema om en periodiseringsmall har valts. Rad: %1, Periodiseringsmall: %2.';
      ZeroDeferralAmtErr@1041 : TextConst '@@@="%1=The line number of the general ledger transaction, %2=The Deferral Template Code";ENU=Deferral amounts cannot be 0. Line: %1, Deferral Template: %2.;NOR=Periodiseringsbel›p kan ikke v‘re 0. Linje: %1, periodiseringsmal: %2.;SVE=Periodiseringsbelopp f†r inte vara 0. Rad: %1, Periodiseringsmall: %2.';
      IsGLRegInserted@1013 : Boolean;
      PaymType@1210190002 : 'Free,B,Tax';
      AmntToRemain@1210190003 : Decimal;
      Text100@1100285003 : TextConst 'ENU=%1 is not within your range of allowed posting dates;NOR=%1 er ikke i ditt tillatte intervall for bokf›ringsdatoer;SVE=%1 „r inte i det till†tna intervallet f”r bokf”ringsdatum';
      Text11012001@1210190004 : TextConst 'ENU=The %1 must not be before the %2 on the %3 (%4 %5).;NOR=%1 kan ikke v‘re f›r %2 p† %3 (%4 %5).;SVE=%1 f†r inte vara f”re %2 p† %3 (%4 %5).';
      PostingCreditRestrictionVAT@1100485000 : Boolean;
      ReverseMode@1100485001 : Boolean;
      RestoreOldPmtDisc@1100525003 : Boolean;
      SkipCheckSalesInvoiceNo@1100529600 : Boolean;
      OldPmtDisc1@1100525002 : Decimal;
      OldPmtDisc2@1100525001 : Decimal;
      OldPmtDisc3@1100525000 : Decimal;
      FAAmount@1100530000 : Decimal;
      CustLedgEntryProjectNo@1100525004 : Code[20];
      Text11012002@1210190000 : TextConst 'ENU=VAT for Credit Restriction of Credit Memo %1 is more than for the invoice to apply %2.;NOR=Mva. for kredittrestriksjon av kreditnota %1 er mer enn for at fakturaen skal gjelde %2.;SVE=Moms f”r kreditrestriktion av kreditnota %1 „r mer „n f”r att fakturan ska g„lla %2.';
      SwitchOffIntercompany@1100528500 : Boolean;
      Text11012003@1100525005 : TextConst 'ENU=You cannot reverse the transaction, because it has already been reversed.;NOR=Du kan ikke tilbakef›re transaksjonen fordi den allerede er tilbakef›rt.;SVE=Du kan inte †terf”ra transaktionen eftersom den redan har †terf”rts.';
      GLEntryAutoAccTemp@1100285002 : TEMPORARY Record 17;
      GLEntryDimPostedTemp@1100285001 : TEMPORARY Record 17;
      Vendor@1100285000 : Record 23;
      "*** ExFlow ***"@12013587 : Integer;
      ExFlowVend@12013588 : Record 23;
      "*** PEB ***"@12047960 : Integer;
      gBCU@12047959 : Codeunit 11128086;
      gVPMngm@12047958 : Codeunit 11128061;
      gReplacePostingDatePeriodic@1100285301 : Boolean;
      Text11012004@1100528200 : TextConst '@@@="%1 = Document Type; %2 = Document No.";ENU=Sales %1 %2 already exists for this customer.';
      VendorExtension@100000000 : Record 11128090;
      GenJnlLineExt@111280000 : Record 11128091;

    [External]
    PROCEDURE GetGLReg@10(VAR NewGLReg@1000 : Record 45);
    BEGIN
      NewGLReg := GLReg;
    END;

    [External]
    PROCEDURE RunWithCheck@45(VAR GenJnlLine2@1000 : Record 81) : Integer;
    VAR
      GenJnlLine@1001 : Record 81;
    BEGIN
      GenJnlLine.COPY(GenJnlLine2);
      Code(GenJnlLine,TRUE);
      OnAfterRunWithCheck(GenJnlLine);
      GenJnlLine2 := GenJnlLine;
      EXIT(GLEntryNo);
    END;

    [External]
    PROCEDURE RunWithoutCheck@21(VAR GenJnlLine2@1000 : Record 81) : Integer;
    VAR
      GenJnlLine@1001 : Record 81;
    BEGIN
      GenJnlLine.COPY(GenJnlLine2);
      Code(GenJnlLine,FALSE);
      OnAfterRunWithoutCheck(GenJnlLine);
      GenJnlLine2 := GenJnlLine;
      EXIT(GLEntryNo);
    END;

    LOCAL PROCEDURE Code@9(VAR GenJnlLine@1003 : Record 81;CheckLine@1000 : Boolean);
    VAR
      Balancing@1002 : Boolean;
      IsTransactionConsistent@1001 : Boolean;
      IsPosted@1004 : Boolean;
      ApplToIDInt@1100528500 : Integer;
    BEGIN
      IsPosted := FALSE;
      OnBeforeCode(GenJnlLine,CheckLine,IsPosted,GLReg);
      IF IsPosted THEN
        EXIT;

      GetGLSourceCode;

      WITH GenJnlLine DO BEGIN
        IF EmptyLine THEN BEGIN
          InitLastDocDate(GenJnlLine);
          EXIT;
        END;

        IF CheckLine THEN BEGIN
      //  IF OverrideDimErr THEN                           //**4PS.o DP00387
      //    GenJnlCheckLine.SetOverDimErr;                 //**4PS.o DP00387
          GenJnlCheckLine.SetOverDimErr(OverrideDimErr);   //**4PS.n DP00387

          GenJnlCheckLine.RunCheck(GenJnlLine);
        END;

        //**4PS.sn
        IF NOT CheckLine THEN
          GenJnlCheckLine.CheckInterestDate(GenJnlLine);

        IF GenJnlLine."Applies-to Retention ID" <> 0 THEN BEGIN
          IF GenJnlLine."Applies-to ID" <> '' THEN BEGIN
            IF NOT EVALUATE(ApplToIDInt, GenJnlLine."Applies-to ID") THEN
              FIELDERROR(GenJnlLine."Applies-to Retention ID")
            ELSE
              GenJnlLine.TESTFIELD("Applies-to Retention ID", ApplToIDInt);
          END;
          GenJnlLine."Applies-to ID":= STRSUBSTNO('%1', GenJnlLine."Applies-to Retention ID");
        END;
        //**4PS.en

        AmountRoundingPrecision := InitAmounts(GenJnlLine);

        IF "Bill-to/Pay-to No." = '' THEN
          CASE TRUE OF
            "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]:
              "Bill-to/Pay-to No." := "Account No.";
            "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]:
              "Bill-to/Pay-to No." := "Bal. Account No.";
          END;
        IF "Document Date" = 0D THEN
          "Document Date" := "Posting Date";
        IF "Due Date" = 0D THEN
          "Due Date" := "Posting Date";

        JobLine := ("Job No." <> '');

        OnBeforeStartOrContinuePosting(GenJnlLine,LastDocType,LastDocNo,LastDate,NextEntryNo);

        IF NextEntryNo = 0 THEN
          StartPosting(GenJnlLine)
        ELSE
          ContinuePosting(GenJnlLine);

        IF "Account No." <> '' THEN BEGIN
          IF ("Bal. Account No." <> '') AND
             (NOT "System-Created Entry") AND
             ("Account Type" IN
              ["Account Type"::Customer,
               "Account Type"::Vendor,
               "Account Type"::"Fixed Asset"])
          THEN BEGIN
            CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",GenJnlLine);
            Balancing := TRUE;
          END;

          PostGenJnlLine(GenJnlLine,Balancing);
        END;

        IF "Bal. Account No." <> '' THEN BEGIN
          CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",GenJnlLine);
          PostGenJnlLine(GenJnlLine,NOT Balancing);
        END;

        CheckPostUnrealizedVAT(GenJnlLine,TRUE);

        CreateDeferralScheduleFromGL(GenJnlLine,Balancing);

        OnCodeOnBeforeFinishPosting(GenJnlLine,Balancing);
        IsTransactionConsistent := FinishPosting(GenJnlLine);
        // PEB0076
        "Last GL Entry No." := GlobalGLEntry."Entry No.";
        "Last GL Reg. Entry No." := GLReg."No.";
        // 0076
      END;

      OnAfterGLFinishPosting(
        GlobalGLEntry,GenJnlLine,IsTransactionConsistent,FirstTransactionNo,GLReg,TempGLEntryBuf,NextEntryNo,NextTransactionNo);
    END;

    LOCAL PROCEDURE PostGenJnlLine@47(VAR GenJnlLine@1000 : Record 81;Balancing@1001 : Boolean);
    BEGIN
      OnBeforePostGenJnlLine(GenJnlLine,Balancing);

      WITH GenJnlLine DO
        CASE "Account Type" OF
          "Account Type"::"G/L Account":
            //**4PS.sn
            IF GenJnlLine."Retention Entry Type" <> GenJnlLine."Retention Entry Type"::" " THEN BEGIN
              PostGLAcc(GenJnlLine,Balancing,GetRetentionAmountToPost(GenJnlLine));
              PostRetention(GenJnlLine);
            END ELSE
            //**4PS.en
              PostGLAcc(GenJnlLine,Balancing,GenJnlLine."Amount (LCY)");
          "Account Type"::Customer:
            PostCust(GenJnlLine,Balancing);
          "Account Type"::Vendor:
            PostVend(GenJnlLine,Balancing);
          "Account Type"::Employee:
            PostEmployee(GenJnlLine);
          "Account Type"::"Bank Account":
            PostBankAcc(GenJnlLine,Balancing);
          "Account Type"::"Fixed Asset":
            //PostFixedAsset(GenJnlLine);  //**4PS.o
            //**4PS.sn
            BEGIN
              PostFixedAsset(GenJnlLine);
              PostFaAcqOnOtherDeprBooks(GenJnlLine,FAAmount);
            END;
            //**4PS.en
          "Account Type"::"IC Partner":
            PostICPartner(GenJnlLine);
        END;

      OnAfterPostGenJnlLine(GenJnlLine,Balancing);
    END;

    LOCAL PROCEDURE InitAmounts@186(VAR GenJnlLine@1000 : Record 81) : Decimal;
    VAR
      Currency@1001 : Record 4;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "Currency Code" = '' THEN BEGIN
          Currency.InitRoundingPrecision;
          "Amount (LCY)" := Amount;
          "VAT Amount (LCY)" := "VAT Amount";
          "VAT Base Amount (LCY)" := "VAT Base Amount";
        END ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
          IF NOT "System-Created Entry" THEN BEGIN
            "Source Currency Code" := "Currency Code";
            "Source Currency Amount" := Amount;
            "Source Curr. VAT Base Amount" := "VAT Base Amount";
            "Source Curr. VAT Amount" := "VAT Amount";
          END;
        END;
        IF "Additional-Currency Posting" = "Additional-Currency Posting"::None THEN BEGIN
          IF Amount <> ROUND(Amount,Currency."Amount Rounding Precision") THEN
            FIELDERROR(
              Amount,
              STRSUBSTNO(NeedsRoundingErr,Amount));
          IF "Amount (LCY)" <> ROUND("Amount (LCY)") THEN
            FIELDERROR(
              "Amount (LCY)",
              STRSUBSTNO(NeedsRoundingErr,"Amount (LCY)"));
        END;
        EXIT(Currency."Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE InitLastDocDate@23(GenJnlLine@1000 : Record 81);
    BEGIN
      WITH GenJnlLine DO BEGIN
        LastDocType := "Document Type";
        LastDocNo := "Document No.";
        LastDate := "Posting Date";
      END;
    END;

    LOCAL PROCEDURE InitNextEntryNo@230();
    VAR
      GLEntry@1000 : Record 17 SECURITYFILTERING(Ignored);
    BEGIN
      GLEntry.LOCKTABLE;
      IF GLEntry.FINDLAST THEN BEGIN
        NextEntryNo := GLEntry."Entry No." + 1;
        NextTransactionNo := GLEntry."Transaction No." + 1;
      END ELSE BEGIN
        NextEntryNo := 1;
        NextTransactionNo := 1;
      END;
    END;

    LOCAL PROCEDURE InitVAT@33(VAR GenJnlLine@1001 : Record 81;VAR GLEntry@1002 : Record 17;VAR VATPostingSetup@1003 : Record 325);
    VAR
      LCYCurrency@1000 : Record 4;
      SalesTaxCalculate@1004 : Codeunit 398;
      IsHandled@1005 : Boolean;
    BEGIN
      OnBeforeInitVAT(GenJnlLine,GLEntry,VATPostingSetup);

      LCYCurrency.InitRoundingPrecision;
      WITH GenJnlLine DO
        IF "Gen. Posting Type" <> 0 THEN BEGIN // None
          VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
          IsHandled := FALSE;
          OnInitVATOnBeforeVATPostingSetupCheck(GenJnlLine,GLEntry,VATPostingSetup,IsHandled);
          IF NOT IsHandled THEN
            TESTFIELD("VAT Calculation Type",VATPostingSetup."VAT Calculation Type");
          CASE "VAT Posting" OF
            "VAT Posting"::"Automatic VAT Entry":
              BEGIN
                GLEntry.CopyPostingGroupsFromGenJnlLine(GenJnlLine);
                CASE "VAT Calculation Type" OF
                  "VAT Calculation Type"::"Normal VAT":
                    IF "VAT Difference" <> 0 THEN BEGIN
                      GLEntry.Amount := "VAT Base Amount (LCY)";
                      GLEntry."VAT Amount" := "Amount (LCY)" - GLEntry.Amount;
                      GLEntry."Additional-Currency Amount" := "Source Curr. VAT Base Amount";
                      IF "Source Currency Code" = AddCurrencyCode THEN
                        AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                      ELSE
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                    END ELSE BEGIN
                      GLEntry."VAT Amount" :=
                        ROUND(
                          "Amount (LCY)" * VATPostingSetup."VAT %" / (100 + VATPostingSetup."VAT %"),
                          LCYCurrency."Amount Rounding Precision",LCYCurrency.VATRoundingDirection);
                      GLEntry.Amount := "Amount (LCY)" - GLEntry."VAT Amount";
                      IF "Source Currency Code" = AddCurrencyCode THEN
                        AddCurrGLEntryVATAmt :=
                          ROUND(
                            "Source Currency Amount" * VATPostingSetup."VAT %" / (100 + VATPostingSetup."VAT %"),
                            AddCurrency."Amount Rounding Precision",AddCurrency.VATRoundingDirection)
                      ELSE
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                      GLEntry."Additional-Currency Amount" := "Source Currency Amount" - AddCurrGLEntryVATAmt;
                    END;
                  "VAT Calculation Type"::"Reverse Charge VAT":
                    CASE "Gen. Posting Type" OF
                      "Gen. Posting Type"::Purchase:
                        IF "VAT Difference" <> 0 THEN BEGIN
                          GLEntry."VAT Amount" := "VAT Amount (LCY)";
                          IF "Source Currency Code" = AddCurrencyCode THEN
                            AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                          ELSE
                            AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                        END ELSE BEGIN
                          GLEntry."VAT Amount" :=
                            ROUND(
                              GLEntry.Amount * VATPostingSetup."VAT %" / 100,
                              LCYCurrency."Amount Rounding Precision",LCYCurrency.VATRoundingDirection);
                          IF "Source Currency Code" = AddCurrencyCode THEN
                            AddCurrGLEntryVATAmt :=
                              ROUND(
                                GLEntry."Additional-Currency Amount" * VATPostingSetup."VAT %" / 100,
                                AddCurrency."Amount Rounding Precision",AddCurrency.VATRoundingDirection)
                          ELSE
                            AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                        END;
                      "Gen. Posting Type"::Sale:
                        BEGIN
                          //**4PS.so
                          //  GLEntry."VAT Amount" := 0;
                          //  AddCurrGLEntryVATAmt := 0;
                          //**4PS.eo
                          //**4PS.sn
                          GLEntry."VAT Amount" := ROUND(GLEntry.Amount * VATPostingSetup."VAT %" / 100);
                          AddCurrGLEntryVATAmt :=
                            ROUND(GLEntry."Additional-Currency Amount" * VATPostingSetup."VAT %" / 100);
                          //**4PS.en
                        END;
                    END;
                  "VAT Calculation Type"::"Full VAT":
                    BEGIN
                      IsHandled := FALSE;
                      OnInitVATOnBeforeTestFullVATAccount(GenJnlLine,GLEntry,VATPostingSetup,IsHandled);
                      IF NOT IsHandled THEN
                        CASE "Gen. Posting Type" OF
                          "Gen. Posting Type"::Sale:
                            TESTFIELD("Account No.",VATPostingSetup.GetSalesAccount(FALSE));
                          "Gen. Posting Type"::Purchase:
                            TESTFIELD("Account No.",VATPostingSetup.GetPurchAccount(FALSE));
                        END;
                      GLEntry.Amount := 0;
                      GLEntry."Additional-Currency Amount" := 0;
                      GLEntry."VAT Amount" := "Amount (LCY)";
                      IF "Source Currency Code" = AddCurrencyCode THEN
                        AddCurrGLEntryVATAmt := "Source Currency Amount"
                      ELSE
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr("Amount (LCY)");
                    END;
                  "VAT Calculation Type"::"Sales Tax":
                    BEGIN
                      IF ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) AND
                         "Use Tax"
                      THEN BEGIN
                        GLEntry."VAT Amount" :=
                          ROUND(
                            SalesTaxCalculate.CalculateTax(
                              "Tax Area Code","Tax Group Code","Tax Liable",
                              "Posting Date","Amount (LCY)",Quantity,0));
                        OnAfterSalesTaxCalculateCalculateTax(GenJnlLine,GLEntry,LCYCurrency);
                        GLEntry.Amount := "Amount (LCY)";
                      END ELSE BEGIN
                        GLEntry.Amount :=
                          ROUND(
                            SalesTaxCalculate.ReverseCalculateTax(
                              "Tax Area Code","Tax Group Code","Tax Liable",
                              "Posting Date","Amount (LCY)",Quantity,0));
                        OnAfterSalesTaxCalculateReverseCalculateTax(GenJnlLine,GLEntry,LCYCurrency);
                        GLEntry."VAT Amount" := "Amount (LCY)" - GLEntry.Amount;
                      END;
                      GLEntry."Additional-Currency Amount" := "Source Currency Amount";
                      IF "Source Currency Code" = AddCurrencyCode THEN
                        AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                      ELSE
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                    END;
                END;
              END;
            "VAT Posting"::"Manual VAT Entry":
              IF "Gen. Posting Type" <> "Gen. Posting Type"::Settlement THEN BEGIN
                GLEntry.CopyPostingGroupsFromGenJnlLine(GenJnlLine);
                GLEntry."VAT Amount" := "VAT Amount (LCY)";
                //**4PS.sn
                IF "Memo Posting" THEN
                  GLEntry.Amount := "Amount (LCY)" - "VAT Amount (LCY)";

                IF "VAT Calculation Type" = "VAT Calculation Type"::"Reverse Charge VAT" THEN
                  CASE "Gen. Posting Type" OF
                    "Gen. Posting Type"::Purchase: VATPostingSetup.TESTFIELD("Purchase VAT Account");
                    "Gen. Posting Type"::Sale: VATPostingSetup.TESTFIELD("Sales VAT Account");
                  END;
                //**4PS.en
                IF "Source Currency Code" = AddCurrencyCode THEN
                  AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                ELSE
                  AddCurrGLEntryVATAmt := CalcLCYToAddCurr("VAT Amount (LCY)");
              END;
          END;
        END;

      GLEntry."Additional-Currency Amount" :=
        GLCalcAddCurrency(GLEntry.Amount,GLEntry."Additional-Currency Amount",GLEntry."Additional-Currency Amount",TRUE,GenJnlLine);

      OnAfterInitVAT(GenJnlLine,GLEntry,VATPostingSetup,AddCurrGLEntryVATAmt);
    END;

    LOCAL PROCEDURE PostVAT@34(GenJnlLine@1010 : Record 81;VAR GLEntry@1015 : Record 17;VATPostingSetup@1012 : Record 325);
    VAR
      TaxDetail2@1008 : Record 322;
      SalesTaxCalculate@1013 : Codeunit 398;
      VATAmount@1000 : Decimal;
      VATAmount2@1003 : Decimal;
      VATBase@1001 : Decimal;
      VATBase2@1004 : Decimal;
      SrcCurrVATAmount@1002 : Decimal;
      SrcCurrVATBase@1009 : Decimal;
      SrcCurrSalesTaxBaseAmount@1005 : Decimal;
      RemSrcCurrVATAmount@1007 : Decimal;
      SalesTaxBaseAmount@1014 : Decimal;
      TaxDetailFound@1006 : Boolean;
      IsHandled@1011 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforePostVAT(GenJnlLine,GLEntry,VATPostingSetup,IsHandled);
      IF IsHandled THEN
        EXIT;

      WITH GenJnlLine DO
        // Post VAT
        // VAT for VAT entry
        CASE "VAT Calculation Type" OF
          "VAT Calculation Type"::"Normal VAT",
          "VAT Calculation Type"::"Reverse Charge VAT",
          "VAT Calculation Type"::"Full VAT":
            BEGIN
              IF "VAT Posting" = "VAT Posting"::"Automatic VAT Entry" THEN
                "VAT Base Amount (LCY)" := GLEntry.Amount;
              IF "Gen. Posting Type" = "Gen. Posting Type"::Settlement THEN
                AddCurrGLEntryVATAmt := "Source Curr. VAT Amount";
              InsertVAT(
                GenJnlLine,VATPostingSetup,
                GLEntry.Amount,GLEntry."VAT Amount","VAT Base Amount (LCY)","Source Currency Code",
                GLEntry."Additional-Currency Amount",AddCurrGLEntryVATAmt,"Source Curr. VAT Base Amount");
              NextConnectionNo := NextConnectionNo + 1;
            END;
          "VAT Calculation Type"::"Sales Tax":
            BEGIN
              CASE "VAT Posting" OF
                "VAT Posting"::"Automatic VAT Entry":
                  SalesTaxBaseAmount := GLEntry.Amount;
                "VAT Posting"::"Manual VAT Entry":
                  SalesTaxBaseAmount := "VAT Base Amount (LCY)";
              END;
              IF ("VAT Posting" = "VAT Posting"::"Manual VAT Entry") AND
                 ("Gen. Posting Type" = "Gen. Posting Type"::Settlement)
              THEN
                InsertVAT(
                  GenJnlLine,VATPostingSetup,
                  GLEntry.Amount,GLEntry."VAT Amount","VAT Base Amount (LCY)","Source Currency Code",
                  "Source Curr. VAT Base Amount","Source Curr. VAT Amount","Source Curr. VAT Base Amount")
              ELSE BEGIN
                CLEAR(SalesTaxCalculate);
                SalesTaxCalculate.InitSalesTaxLines(
                  "Tax Area Code","Tax Group Code","Tax Liable",
                  SalesTaxBaseAmount,Quantity,"Posting Date",GLEntry."VAT Amount");
                OnAfterSalesTaxCalculateInitSalesTaxLines(GenJnlLine,GLEntry,SalesTaxBaseAmount);
                SrcCurrVATAmount := 0;
                SrcCurrSalesTaxBaseAmount := CalcLCYToAddCurr(SalesTaxBaseAmount);
                RemSrcCurrVATAmount := AddCurrGLEntryVATAmt;
                TaxDetailFound := FALSE;
                WHILE SalesTaxCalculate.GetSalesTaxLine(TaxDetail2,VATAmount,VATBase) DO BEGIN
                  RemSrcCurrVATAmount := RemSrcCurrVATAmount - SrcCurrVATAmount;
                  IF TaxDetailFound THEN
                    InsertVAT(
                      GenJnlLine,VATPostingSetup,
                      SalesTaxBaseAmount,VATAmount2,VATBase2,"Source Currency Code",
                      SrcCurrSalesTaxBaseAmount,SrcCurrVATAmount,SrcCurrVATBase);
                  TaxDetailFound := TRUE;
                  TaxDetail := TaxDetail2;
                  VATAmount2 := VATAmount;
                  VATBase2 := VATBase;
                  SrcCurrVATAmount := CalcLCYToAddCurr(VATAmount);
                  SrcCurrVATBase := CalcLCYToAddCurr(VATBase);
                END;
                IF TaxDetailFound THEN
                  InsertVAT(
                    GenJnlLine,VATPostingSetup,
                    SalesTaxBaseAmount,VATAmount2,VATBase2,"Source Currency Code",
                    SrcCurrSalesTaxBaseAmount,RemSrcCurrVATAmount,SrcCurrVATBase);
                InsertSummarizedVAT(GenJnlLine);
              END;
            END;
        END;

      OnAfterPostVAT(GenJnlLine,GLEntry,VATPostingSetup);
    END;

    LOCAL PROCEDURE InsertVAT@30(GenJnlLine@1015 : Record 81;VATPostingSetup@1018 : Record 325;GLEntryAmount@1000 : Decimal;GLEntryVATAmount@1001 : Decimal;GLEntryBaseAmount@1002 : Decimal;SrcCurrCode@1004 : Code[10];SrcCurrGLEntryAmt@1005 : Decimal;SrcCurrGLEntryVATAmt@1006 : Decimal;SrcCurrGLEntryBaseAmt@1007 : Decimal);
    VAR
      TaxJurisdiction@1003 : Record 320;
      VATAmount@1008 : Decimal;
      VATBase@1009 : Decimal;
      SrcCurrVATAmount@1011 : Decimal;
      SrcCurrVATBase@1012 : Decimal;
      VATDifferenceLCY@1013 : Decimal;
      SrcCurrVATDifference@1014 : Decimal;
      UnrealizedVAT@1019 : Boolean;
    BEGIN
      OnBeforeInsertVAT(
        GenJnlLine,VATEntry,UnrealizedVAT,AddCurrencyCode,VATPostingSetup,GLEntryAmount,GLEntryVATAmount,GLEntryBaseAmount,
        SrcCurrCode,SrcCurrGLEntryAmt,SrcCurrGLEntryVATAmt,SrcCurrGLEntryBaseAmt);

      WITH GenJnlLine DO BEGIN
        // Post VAT
        // VAT for VAT entry
        VATEntry.INIT;
        VATEntry.CopyFromGenJnlLine(GenJnlLine);
        VATEntry."Entry No." := NextVATEntryNo;
        VATEntry."EU Service" := VATPostingSetup."EU Service";
        VATEntry."Transaction No." := NextTransactionNo;
        VATEntry."Sales Tax Connection No." := NextConnectionNo;

        IF "VAT Difference" = 0 THEN
          VATDifferenceLCY := 0
        ELSE
          IF "Currency Code" = '' THEN
            VATDifferenceLCY := "VAT Difference"
          ELSE
            VATDifferenceLCY :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  //**4PS.so
                  //"Posting Date","Currency Code","VAT Difference",
                  //CurrExchRate.ExchangeRate("Posting Date","Currency Code")));
                  //**4PS.eo
                  //**4PS.sn
                  0, '', "Posting Date","Currency Code","VAT Difference",
                  CurrExchRate.ExchangeRate(0, '',"Posting Date","Currency Code",VATEntry.Type = VATEntry.Type::Sale),VATEntry.Type = VATEntry.Type::Sale));
                  //**4PS.en

        IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN
          UpdateVATEntryTaxDetails(GenJnlLine,VATEntry,TaxDetail,TaxJurisdiction);

        IF AddCurrencyCode <> '' THEN
          IF AddCurrencyCode <> SrcCurrCode THEN BEGIN
            SrcCurrGLEntryAmt := ExchangeAmtLCYToFCY2(GLEntryAmount);
            SrcCurrGLEntryVATAmt := ExchangeAmtLCYToFCY2(GLEntryVATAmount);
            SrcCurrGLEntryBaseAmt := ExchangeAmtLCYToFCY2(GLEntryBaseAmount);
            SrcCurrVATDifference := ExchangeAmtLCYToFCY2(VATDifferenceLCY);
          END ELSE
            SrcCurrVATDifference := "VAT Difference";

        UnrealizedVAT :=
          (((VATPostingSetup."Unrealized VAT Type" > 0) AND
            (VATPostingSetup."VAT Calculation Type" IN
             [VATPostingSetup."VAT Calculation Type"::"Normal VAT",
              VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT",
              VATPostingSetup."VAT Calculation Type"::"Full VAT"])) OR
           ((TaxJurisdiction."Unrealized VAT Type" > 0) AND
            (VATPostingSetup."VAT Calculation Type" IN
             [VATPostingSetup."VAT Calculation Type"::"Sales Tax"]))) AND
          IsNotPayment("Document Type");
        IF GLSetup."Prepayment Unrealized VAT" AND NOT GLSetup."Unrealized VAT" AND
           (VATPostingSetup."Unrealized VAT Type" > 0)
        THEN
          UnrealizedVAT := Prepayment;

        //**4PS.sn
        // Posting VAT for Credit Restriction is always done via Unrealized VAT!!!
        UnrealizedVAT := UnrealizedVAT OR PostingCreditRestrictionVAT;
        //**4PS.en

        // VAT for VAT entry
        IF "Gen. Posting Type" <> 0 THEN BEGIN
          CASE "VAT Posting" OF
            "VAT Posting"::"Automatic VAT Entry":
              BEGIN
                VATAmount := GLEntryVATAmount;
                VATBase := GLEntryBaseAmount;
                SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                SrcCurrVATBase := SrcCurrGLEntryBaseAmt;
              END;
            "VAT Posting"::"Manual VAT Entry":
              BEGIN
                IF "Gen. Posting Type" = "Gen. Posting Type"::Settlement THEN BEGIN
                  VATAmount := GLEntryAmount;
                  SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                  VATEntry.Closed := TRUE;
                END ELSE BEGIN
                  VATAmount := GLEntryVATAmount;
                  SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                END;
                VATBase := GLEntryBaseAmount;
                SrcCurrVATBase := SrcCurrGLEntryBaseAmt;
              END;
          END;

          IF UnrealizedVAT THEN BEGIN
            VATEntry.Amount := 0;
            VATEntry.Base := 0;
            VATEntry."Unrealized Amount" := VATAmount;
            VATEntry."Unrealized Base" := VATBase;
            VATEntry."Remaining Unrealized Amount" := VATEntry."Unrealized Amount";
            VATEntry."Remaining Unrealized Base" := VATEntry."Unrealized Base";
          END ELSE BEGIN
            VATEntry.Amount := VATAmount;
            VATEntry.Base := VATBase;
            VATEntry."Unrealized Amount" := 0;
            VATEntry."Unrealized Base" := 0;
            VATEntry."Remaining Unrealized Amount" := 0;
            VATEntry."Remaining Unrealized Base" := 0;
          END;

          IF AddCurrencyCode = '' THEN BEGIN
            VATEntry."Additional-Currency Base" := 0;
            VATEntry."Additional-Currency Amount" := 0;
            VATEntry."Add.-Currency Unrealized Amt." := 0;
            VATEntry."Add.-Currency Unrealized Base" := 0;
          END ELSE
            IF UnrealizedVAT THEN BEGIN
              VATEntry."Additional-Currency Base" := 0;
              VATEntry."Additional-Currency Amount" := 0;
              VATEntry."Add.-Currency Unrealized Base" := SrcCurrVATBase;
              VATEntry."Add.-Currency Unrealized Amt." := SrcCurrVATAmount;
            END ELSE BEGIN
              VATEntry."Additional-Currency Base" := SrcCurrVATBase;
              VATEntry."Additional-Currency Amount" := SrcCurrVATAmount;
              VATEntry."Add.-Currency Unrealized Base" := 0;
              VATEntry."Add.-Currency Unrealized Amt." := 0;
            END;
          VATEntry."Add.-Curr. Rem. Unreal. Amount" := VATEntry."Add.-Currency Unrealized Amt.";
          VATEntry."Add.-Curr. Rem. Unreal. Base" := VATEntry."Add.-Currency Unrealized Base";
          VATEntry."VAT Difference" := VATDifferenceLCY;
          VATEntry."Add.-Curr. VAT Difference" := SrcCurrVATDifference;
          IF "System-Created Entry" THEN
            VATEntry."Base Before Pmt. Disc." := "VAT Base Before Pmt. Disc."
          ELSE
            VATEntry."Base Before Pmt. Disc." := GLEntryAmount;

          //>>NAVNO
          IF GLSetup."Norwegian Localization Active" THEN BEGIN
            GenJnlLineExt.InitGetLine(GenJnlLine);//4PSSE
            VATEntryAdjustForPropDeduction(GenJnlLine,VATPostingSetup);
            NorwegianVATTools.VATEntrySetVATInfo(VATEntry,GenJnlLine,GenJnlLineExt);
          END;
          //<<NAVNO

          OnBeforeInsertVATEntry(VATEntry,GenJnlLine);
          VATEntry.INSERT(TRUE);
          GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.");
          NextVATEntryNo := NextVATEntryNo + 1;
          OnAfterInsertVATEntry(GenJnlLine,VATEntry,TempGLEntryBuf."Entry No.",NextVATEntryNo);
        END;

        // VAT for G/L entry/entries
        SwitchOffIntercompany := TRUE; //**4PS.n
        IF (GLEntryVATAmount <> 0) OR
           ((SrcCurrGLEntryVATAmt <> 0) AND (SrcCurrCode = AddCurrencyCode))
        THEN
          CASE "Gen. Posting Type" OF
            "Gen. Posting Type"::Purchase:
              CASE VATPostingSetup."VAT Calculation Type" OF
                VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                VATPostingSetup."VAT Calculation Type"::"Full VAT":
                  CreateGLEntry(GenJnlLine,VATPostingSetup.GetPurchAccount(UnrealizedVAT),
                    GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    OnInsertVATOnBeforeCreateGLEntryForReverseChargeVATToPurchAcc(
                      GenJnlLine,VATPostingSetup,UnrealizedVAT,GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                    CreateGLEntry(
                      GenJnlLine,VATPostingSetup.GetPurchAccount(UnrealizedVAT),GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                    //NAVNO
                    IF GLSetup."Norwegian Localization Active" THEN
                      CreateGLEntry(GenJnlLine,VATPostingSetup.GetRevChargeAccount(UnrealizedVAT),
                        GetReverseChargeVATAmount(GLEntryVATAmount,PropDeductionVAT,UnrealizedVAT),
                        GetReverseChargeVATAmountACY(SrcCurrGLEntryVATAmt,PropDedVATACY,UnrealizedVAT),TRUE)
                    ELSE
                      CreateGLEntry(GenJnlLine,VATPostingSetup.GetRevChargeAccount(UnrealizedVAT),
                        -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE);

                    OnInsertVATOnBeforeCreateGLEntryForReverseChargeVATToRevChargeAcc(
                      GenJnlLine,VATPostingSetup,UnrealizedVAT,GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                    CreateGLEntry(
                      GenJnlLine,VATPostingSetup.GetRevChargeAccount(UnrealizedVAT),-GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE);
                  END;
                VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                  IF "Use Tax" THEN BEGIN
                    InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetPurchAccount(UnrealizedVAT),'',
                      GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                    InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetRevChargeAccount(UnrealizedVAT),'',
                      -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE);
                  END ELSE
                    InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetPurchAccount(UnrealizedVAT),'',
                      GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
              END;
            "Gen. Posting Type"::Sale:
              CASE VATPostingSetup."VAT Calculation Type" OF
                VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                VATPostingSetup."VAT Calculation Type"::"Full VAT":
                  CreateGLEntry(GenJnlLine,VATPostingSetup.GetSalesAccount(UnrealizedVAT),
                    GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                  //**4PS.sn
                  BEGIN
                    CreateGLEntry(GenJnlLine,VATPostingSetup.GetSalesAccount(UnrealizedVAT),
                      GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                    CreateGLEntry(GenJnlLine,VATPostingSetup.GetRevChargeAccount(UnrealizedVAT),
                      -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE);
                  END;
                  //**4PS.en
                VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                  InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetSalesAccount(UnrealizedVAT),'',
                    GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
              END;
          END;
      END;

      SwitchOffIntercompany := FALSE; //**4PS.n

      OnAfterInsertVAT(
        GenJnlLine,VATEntry,UnrealizedVAT,AddCurrencyCode,VATPostingSetup,GLEntryAmount,GLEntryVATAmount,GLEntryBaseAmount,
        SrcCurrCode,SrcCurrGLEntryAmt,SrcCurrGLEntryVATAmt,SrcCurrGLEntryBaseAmt,AddCurrGLEntryVATAmt,
        NextConnectionNo,NextVATEntryNo,NextTransactionNo,TempGLEntryBuf."Entry No.");
    END;

    LOCAL PROCEDURE SummarizeVAT@31(SummarizeGLEntries@1000 : Boolean;GLEntry@1001 : Record 17);
    VAR
      InsertedTempVAT@1004 : Boolean;
    BEGIN
      InsertedTempVAT := FALSE;
      IF SummarizeGLEntries THEN
        IF TempGLEntryVAT.FINDSET THEN
          REPEAT
            IF (TempGLEntryVAT."G/L Account No." = GLEntry."G/L Account No.") AND
               (TempGLEntryVAT."Bal. Account No." = GLEntry."Bal. Account No.")
            THEN BEGIN
              TempGLEntryVAT.Amount := TempGLEntryVAT.Amount + GLEntry.Amount;
              TempGLEntryVAT."Additional-Currency Amount" :=
                TempGLEntryVAT."Additional-Currency Amount" + GLEntry."Additional-Currency Amount";
              TempGLEntryVAT.MODIFY;
              InsertedTempVAT := TRUE;
            END;
          UNTIL (TempGLEntryVAT.NEXT = 0) OR InsertedTempVAT;
      IF NOT InsertedTempVAT OR NOT SummarizeGLEntries THEN BEGIN
        TempGLEntryVAT := GLEntry;
        TempGLEntryVAT."Entry No." :=
          TempGLEntryVAT."Entry No." + InsertedTempGLEntryVAT;
        TempGLEntryVAT.INSERT;
        InsertedTempGLEntryVAT := InsertedTempGLEntryVAT + 1;
      END;
    END;

    LOCAL PROCEDURE InsertSummarizedVAT@37(GenJnlLine@1000 : Record 81);
    BEGIN
      IF TempGLEntryVAT.FINDSET THEN BEGIN
        REPEAT
          InsertGLEntry(GenJnlLine,TempGLEntryVAT,TRUE);
        UNTIL TempGLEntryVAT.NEXT = 0;
        TempGLEntryVAT.DELETEALL;
        InsertedTempGLEntryVAT := 0;
      END;
      NextConnectionNo := NextConnectionNo + 1;
    END;

    LOCAL PROCEDURE PostGLAcc@11(GenJnlLine@1001 : Record 81;Balancing@1004 : Boolean;AmountToPost@1100529502 : Decimal);
    VAR
      GLAcc@1000 : Record 15;
      GLEntry@1002 : Record 17;
      VATPostingSetup@1003 : Record 325;
      IsHandled@1005 : Boolean;
      OrigGLEntryAmount@1080003 : Decimal;
    BEGIN
      OnBeforePostGLAcc(GenJnlLine,GLEntry);

      WITH GenJnlLine DO BEGIN
        GLAcc.GET("Account No.");
        // G/L entry
        InitGLEntry(GenJnlLine,GLEntry,
          //"Account No.","Amount (LCY)", //**4PS.o
          "Account No.", AmountToPost, //**4PS.n
          "Source Currency Amount",TRUE,"System-Created Entry");
        IF NOT "System-Created Entry" THEN
          IF "Posting Date" = NORMALDATE("Posting Date") THEN
            GLAcc.TESTFIELD("Direct Posting",TRUE);
        GLEntry."Gen. Posting Type" := "Gen. Posting Type";
        GLEntry."Bal. Account Type" := "Bal. Account Type";
        GLEntry."Bal. Account No." := "Bal. Account No.";
        GLEntry."No. Series" := "Posting No. Series";
        IF "Additional-Currency Posting" =
           "Additional-Currency Posting"::"Additional-Currency Amount Only"
        THEN BEGIN
          GLEntry."Additional-Currency Amount" := Amount;
          GLEntry.Amount := 0;
        END;
        UpdateICClearingRelation(GenJnlLine, GLEntry); //**4PS.n
        // Store Entry No. to global variable for return:
        GLEntryNo := GLEntry."Entry No.";
        InitVAT(GenJnlLine,GLEntry,VATPostingSetup);

        //>>NAVNO
        IF GLSetup."Norwegian Localization Active" THEN BEGIN
          OrigGLEntryAmount := GLEntry.Amount;
          GLEntryCalcPropDeduction(GenJnlLine,GLEntry,VATPostingSetup);
          GLEntryAdjustPurchase(GLEntry,GenJnlLine,VATPostingSetup);
        END;
        //<<NAVNO

        IsHandled := FALSE;
        OnPostGLAccOnBeforeInsertGLEntry(GenJnlLine,GLEntry,IsHandled);
        IF NOT IsHandled THEN
          InsertGLEntry(GenJnlLine,GLEntry,TRUE);
        PostJob(GenJnlLine,GLEntry);
        PostVAT(GenJnlLine,GLEntry,VATPostingSetup);
        PostAccGroup(GenJnlLine);  //NAVSE
        DeferralPosting("Deferral Code","Source Code","Account No.",GenJnlLine,Balancing);
        OnMoveGenJournalLine(GLEntry.RECORDID);
        //**4PS.sn
        PostCreditRestriction(GenJnlLine,GLEntry,VATPostingSetup);
        //**4PS.en
      END;

      OnAfterPostGLAcc(GenJnlLine,TempGLEntryBuf,NextEntryNo,NextTransactionNo,Balancing);
    END;

    LOCAL PROCEDURE PostCust@12(VAR GenJnlLine@1007 : Record 81;Balancing@1010 : Boolean);
    VAR
      LineFeeNoteOnReportHist@1008 : Record 1053;
      Cust@1005 : Record 18;
      CustPostingGr@1006 : Record 92;
      CustLedgEntry@1000 : Record 21;
      CVLedgEntryBuf@1002 : Record 382;
      TempDtldCVLedgEntryBuf@1003 : TEMPORARY Record 383;
      DtldCustLedgEntry@1004 : Record 379;
      SalesSetup@1011 : Record 311;
      PaymentTerms@1090020 : Record 3;
      PostRefLines@1090021 : Codeunit 11126180;
      ReceivablesAccount@1009 : Code[20];
      DtldLedgEntryInserted@1001 : Boolean;
    BEGIN
      SalesSetup.GET;
      WITH GenJnlLine DO BEGIN
        Cust.GET("Account No.");
        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);

        IF "Posting Group" = '' THEN BEGIN
          Cust.TESTFIELD("Customer Posting Group");
          "Posting Group" := Cust."Customer Posting Group";
        END;
        CustPostingGr.GET("Posting Group");
        ReceivablesAccount := CustPostingGr.GetReceivablesAccount;

        DtldCustLedgEntry.LOCKTABLE;
        CustLedgEntry.LOCKTABLE;

        GenJnlLine."Job No." := CustLedgEntryProjectNo;  //**4PS.n C-019159+R2
        InitCustLedgEntry(GenJnlLine,CustLedgEntry);

        // *** 4PSSE.I012 *** 130711 <<
        CustLedgEntry."Amount ROT" := "Amount ROT";
        // *** 4PSSE.I012 *** 130711 >>
        CustLedgEntry."Amount RUT" := "Amount RUT"; //RFC188
        //>>NAVFI
        GetGLSetup;
        IF GLSetup."Finnish localization active" THEN BEGIN
          GenJnlLineExt.InitGetLine(GenJnlLine);
      //    GenJnlLineExt.GET("Journal Template Name","Journal Batch Name","Line No.");
          IF GenJnlLineExt."Reference No." <> '' THEN
            CustLedgEntry."Reference No." := GenJnlLineExt."Reference No."
          ELSE
            CustLedgEntry."Reference No." := GenJnlLineExt."Invoice Message";

          UpdateImportedRefPayment(GenJnlLine,CustLedgEntry);
        END;
        //<<NAVFI


        IF NOT Cust."Block Payment Tolerance" THEN
        BEGIN //**4PS.n
          CalcPmtTolerancePossible(
            GenJnlLine,CustLedgEntry."Pmt. Discount Date",CustLedgEntry."Pmt. Disc. Tolerance Date",
            CustLedgEntry."Max. Payment Tolerance");

        //**4PS.sn
          IF CustLedgEntry."Max. Payment Tolerance" = 0 THEN
            CalcPmtTolerancePossible(
              GenJnlLine,CustLedgEntry."Pmt. Discount Date 2",CustLedgEntry."Pmt. Disc. Tolerance Date 2",
              CustLedgEntry."Max. Payment Tolerance");
          IF CustLedgEntry."Max. Payment Tolerance" = 0 THEN
            CalcPmtTolerancePossible(
              GenJnlLine,CustLedgEntry."Pmt. Discount Date 3",CustLedgEntry."Pmt. Disc. Tolerance Date 3",
              CustLedgEntry."Max. Payment Tolerance");
        END;
        //**4PS.en

        TempDtldCVLedgEntryBuf.DELETEALL;
        TempDtldCVLedgEntryBuf.INIT;
        TempDtldCVLedgEntryBuf.CopyFromGenJnlLine(GenJnlLine);
        TempDtldCVLedgEntryBuf."CV Ledger Entry No." := CustLedgEntry."Entry No.";

        CVLedgEntryBuf.CopyFromCustLedgEntry(CustLedgEntry);
        TempDtldCVLedgEntryBuf.InsertDtldCVLedgEntry(TempDtldCVLedgEntryBuf,CVLedgEntryBuf,TRUE);

        //**4PS.sn
        IF CustLedgEntry."Credit Restriction Amount" <> 0 THEN BEGIN
          TempDtldCVLedgEntryBuf."Entry Type" := TempDtldCVLedgEntryBuf."Entry Type"::"Credit Restriction";
          TempDtldCVLedgEntryBuf.Amount := "Credit Restriction Amount" + "Credit Restriction VAT Amount";
          TempDtldCVLedgEntryBuf."Amount (LCY)" := "Cr. Restriction Amt (LCY)" + "Cr. Restriction VAT Amt (LCY)";
          TempDtldCVLedgEntryBuf."Additional-Currency Amount" := "Credit Restriction Amount" + "Credit Restriction VAT Amount";
          TempDtldCVLedgEntryBuf.InsertDtldCVLedgEntry(TempDtldCVLedgEntryBuf, CVLedgEntryBuf, FALSE);
        END;
        //**4PS.en

        CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
        CVLedgEntryBuf.Positive := CVLedgEntryBuf."Remaining Amount" > 0;
        OnPostCustOnAfterCopyCVLedgEntryBuf(CVLedgEntryBuf,GenJnlLine);

        CalcPmtDiscPossible(GenJnlLine,CVLedgEntryBuf);

        IF "Currency Code" <> '' THEN BEGIN
          TESTFIELD("Currency Factor");
          CVLedgEntryBuf."Original Currency Factor" := "Currency Factor"
        END ELSE
          CVLedgEntryBuf."Original Currency Factor" := 1;
        CVLedgEntryBuf."Adjusted Currency Factor" := CVLedgEntryBuf."Original Currency Factor";

        // Check the document no.
        IF NOT SkipCheckSalesInvoiceNo THEN //**4PS.n
          IF "Recurring Method" = 0 THEN
            IF IsNotPayment("Document Type") THEN BEGIN
              GenJnlCheckLine.CheckSalesDocNoIsNotUsed("Document Type","Document No.");
              CheckSalesExtDocNo(GenJnlLine);
            END;

        // Post application
      //ApplyCustLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Cust); //**4PS.o
        ApplyCustLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Cust,TRUE); //**4PS.n

        // Post customer entry
        CustLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
        CustLedgEntry."Amount to Apply" := 0;
        CustLedgEntry."Applies-to Doc. No." := '';
        IF SalesSetup."Copy Customer Name to Entries" THEN
          CustLedgEntry."Customer Name" := Cust.Name;
        // PEB0091
        CustLedgEntry."VP Pack No." := "VP Pack No.";
        // 0091
        OnBeforeCustLedgEntryInsert(CustLedgEntry,GenJnlLine);
        CustLedgEntry.INSERT(TRUE);

        // Post detailed customer entries
        DtldLedgEntryInserted := PostDtldCustLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,CustPostingGr,TRUE);

        OnAfterCustLedgEntryInsert(CustLedgEntry,GenJnlLine);

        // Post Reminder Terms - Note About Line Fee on Report
        LineFeeNoteOnReportHist.Save(CustLedgEntry);

        IF DtldLedgEntryInserted THEN
          IF IsTempGLEntryBufEmpty THEN
            DtldCustLedgEntry.SetZeroTransNo(NextTransactionNo);

        DeferralPosting("Deferral Code","Source Code",ReceivablesAccount,GenJnlLine,Balancing);
        OnMoveGenJournalLine(CustLedgEntry.RECORDID);
      END;

      OnAfterPostCust(GenJnlLine,Balancing,TempGLEntryBuf,NextEntryNo,NextTransactionNo);
    END;

    LOCAL PROCEDURE PostVend@13(GenJnlLine@1007 : Record 81;Balancing@1009 : Boolean);
    VAR
      Vend@1005 : Record 23;
      VendPostingGr@1006 : Record 93;
      VendLedgEntry@1000 : Record 25;
      CVLedgEntryBuf@1002 : Record 382;
      TempDtldCVLedgEntryBuf@1003 : TEMPORARY Record 383;
      DtldVendLedgEntry@1004 : Record 380;
      PurchSetup@1011 : Record 312;
      PayablesAccount@1008 : Code[20];
      DtldLedgEntryInserted@1001 : Boolean;
      CheckExtDocNoHandled@1010 : Boolean;
    BEGIN
      PurchSetup.GET;
      WITH GenJnlLine DO BEGIN
        Vend.GET("Account No.");
        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",TRUE);
        //>>NAVNO
        IF VendorExtension.GET(Vend."No.") THEN BEGIN
          GenJnlLineExt.InitGetLine(GenJnlLine);//200323
      //    GenJnlLineExt.GET("Journal Template Name","Journal Batch Name","Line No.");
          GenJnlLineExt."Payment Type Code Abroad" := VendorExtension."Payment Type Code Abroad";
          GenJnlLineExt."Specification (Norges Bank)" := VendorExtension."Specification (Norges Bank)";
          GenJnlLineExt.SaveUpdateLine(GenJnlLine);//200323
        END;
        //<<NAVNO

        IF "Posting Group" = '' THEN BEGIN
          Vend.TESTFIELD("Vendor Posting Group");
          "Posting Group" := Vend."Vendor Posting Group";
        END;
        VendPostingGr.GET("Posting Group");
        PayablesAccount := VendPostingGr.GetPayablesAccount;

        DtldVendLedgEntry.LOCKTABLE;
        VendLedgEntry.LOCKTABLE;

        InitVendLedgEntry(GenJnlLine,VendLedgEntry);

        //>>NAVNO
        GenJnlLineExt.InitGetLine(GenJnlLine);//200323
      //  GenJnlLineExt.GET("Journal Template Name","Journal Batch Name","Line No.");
        VendLedgEntry.KID := GenJnlLineExt.KID;
        VendLedgEntry."Payment Type Code Abroad" := GenJnlLineExt."Payment Type Code Abroad";
        VendLedgEntry."Specification (Norges Bank)" := GenJnlLineExt."Specification (Norges Bank)";
        //<<NAVNO

        //>>NAVFI
        GetGLSetup;
        IF GLSetup."Finnish localization active" THEN BEGIN
          IF VendLedgEntry."Payment Date" = 0D THEN
            VendLedgEntry."Payment Date" := GenJnlLine."Due Date";

          UpdateExportedRefPayment(GenJnlLine);
        END;
        //>>NAVFI

        IF NOT Vend."Block Payment Tolerance" THEN
        BEGIN //**4PS.n
          CalcPmtTolerancePossible(
            GenJnlLine,VendLedgEntry."Pmt. Discount Date",VendLedgEntry."Pmt. Disc. Tolerance Date",
            VendLedgEntry."Max. Payment Tolerance");
       //**4PS.sn
          IF VendLedgEntry."Max. Payment Tolerance" = 0 THEN
            CalcPmtTolerancePossible(
              GenJnlLine,VendLedgEntry."Pmt. Discount Date 2",VendLedgEntry."Pmt. Disc. Tolerance Date 2",
              VendLedgEntry."Max. Payment Tolerance");
          IF VendLedgEntry."Max. Payment Tolerance" = 0 THEN
            CalcPmtTolerancePossible(
              GenJnlLine,VendLedgEntry."Pmt. Discount Date 3",VendLedgEntry."Pmt. Disc. Tolerance Date 3",
              VendLedgEntry."Max. Payment Tolerance");
        END;

        //**4PS.en

        TempDtldCVLedgEntryBuf.DELETEALL;
        TempDtldCVLedgEntryBuf.INIT;
        TempDtldCVLedgEntryBuf.CopyFromGenJnlLine(GenJnlLine);
        TempDtldCVLedgEntryBuf."CV Ledger Entry No." := VendLedgEntry."Entry No.";

        CVLedgEntryBuf.CopyFromVendLedgEntry(VendLedgEntry);
        TempDtldCVLedgEntryBuf.InsertDtldCVLedgEntry(TempDtldCVLedgEntryBuf,CVLedgEntryBuf,TRUE);
        CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
        CVLedgEntryBuf.Positive := CVLedgEntryBuf."Remaining Amount" > 0;
        OnPostVendOnAfterCopyCVLedgEntryBuf(CVLedgEntryBuf,GenJnlLine);

        CalcPmtDiscPossible(GenJnlLine,CVLedgEntryBuf);

        IF "Currency Code" <> '' THEN BEGIN
          TESTFIELD("Currency Factor");
          CVLedgEntryBuf."Adjusted Currency Factor" := "Currency Factor"
        END ELSE
          CVLedgEntryBuf."Adjusted Currency Factor" := 1;
        CVLedgEntryBuf."Original Currency Factor" := CVLedgEntryBuf."Adjusted Currency Factor";

        // Check the document no.
        IF "Recurring Method" = 0 THEN
          // PEB0008
          //IF IsNotPayment("Document Type") THEN BEGIN
          IF IsNotPayment("Document Type") AND gBCU.ExtDocNoMandatory(VendLedgEntry,CVLedgEntryBuf,GenJnlLine) THEN BEGIN
          // 0008
            GenJnlCheckLine.CheckPurchDocNoIsNotUsed("Document Type","Document No.");
            OnBeforeCheckPurchExtDocNo(GenJnlLine,VendLedgEntry,CVLedgEntryBuf,CheckExtDocNoHandled);
            IF NOT CheckExtDocNoHandled THEN
              CheckPurchExtDocNo(GenJnlLine);
          END;

        //>>NAVNO
        IF GLSetup."Norwegian Localization Active" AND GenJnlLineExt.GET("Journal Template Name","Journal Batch Name","Line No.") THEN
          IF (GenJnlLineExt."Waiting Journal Reference" <> 0) THEN
          RemTools.SettleWaitingJournal(GenJnlLine);
        //<<NAVNO

        // Post application
      //ApplyVendLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Vend); //**4PS.o
        ApplyVendLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Vend,TRUE); //**4PS.n

        // Post vendor entry
        VendLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
        VendLedgEntry."Amount to Apply" := 0;
        VendLedgEntry."Applies-to Doc. No." := '';
        IF PurchSetup."Copy Vendor Name to Entries" THEN
          VendLedgEntry."Vendor Name" := Vend.Name;

        // PEB0091
        VendLedgEntry."VP Pack No." := "VP Pack No.";
        VendLedgEntry."OCR No." := "OCR No.";
        // 0091
        //>>RFC148
        VendLedgEntry."Payment Reference" := GenJnlLine."Payment Reference";
        //<<RFC148

        OnBeforeVendLedgEntryInsert(VendLedgEntry,GenJnlLine);
        VendLedgEntry.INSERT(TRUE);

        // Post detailed vendor entries
        DtldLedgEntryInserted := PostDtldVendLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,VendPostingGr,TRUE);

        OnAfterVendLedgEntryInsert(VendLedgEntry,GenJnlLine);

        IF DtldLedgEntryInserted THEN
          IF IsTempGLEntryBufEmpty THEN
            DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);
        DeferralPosting("Deferral Code","Source Code",PayablesAccount,GenJnlLine,Balancing);
        OnMoveGenJournalLine(VendLedgEntry.RECORDID);
      END;

      OnAfterPostVend(GenJnlLine,Balancing,TempGLEntryBuf,NextEntryNo,NextTransactionNo);
    END;

    LOCAL PROCEDURE PostEmployee@86(GenJnlLine@1007 : Record 81);
    VAR
      Employee@1005 : Record 5200;
      EmployeePostingGr@1006 : Record 5221;
      EmployeeLedgerEntry@1000 : Record 5222;
      CVLedgEntryBuf@1008 : Record 382;
      TempDtldCVLedgEntryBuf@1004 : TEMPORARY Record 383;
      DtldEmplLedgEntry@1001 : Record 5223;
      DtldLedgEntryInserted@1010 : Boolean;
    BEGIN
      WITH GenJnlLine DO BEGIN
        Employee.GET("Account No.");
        Employee.CheckBlockedEmployeeOnJnls(TRUE);

        IF "Posting Group" = '' THEN BEGIN
          Employee.TESTFIELD("Employee Posting Group");
          "Posting Group" := Employee."Employee Posting Group";
        END;
        EmployeePostingGr.GET("Posting Group");

        DtldEmplLedgEntry.LOCKTABLE;
        EmployeeLedgerEntry.LOCKTABLE;

        InitEmployeeLedgerEntry(GenJnlLine,EmployeeLedgerEntry);

        TempDtldCVLedgEntryBuf.DELETEALL;
        TempDtldCVLedgEntryBuf.INIT;
        TempDtldCVLedgEntryBuf.CopyFromGenJnlLine(GenJnlLine);
        TempDtldCVLedgEntryBuf."CV Ledger Entry No." := EmployeeLedgerEntry."Entry No.";
        CVLedgEntryBuf.CopyFromEmplLedgEntry(EmployeeLedgerEntry);
        TempDtldCVLedgEntryBuf.InsertDtldCVLedgEntry(TempDtldCVLedgEntryBuf,CVLedgEntryBuf,TRUE);
        CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
        CVLedgEntryBuf.Positive := CVLedgEntryBuf."Remaining Amount" > 0;

        // Post application
        ApplyEmplLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Employee);

        // Post vendor entry
        EmployeeLedgerEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
        EmployeeLedgerEntry."Amount to Apply" := 0;
        EmployeeLedgerEntry."Applies-to Doc. No." := '';
        EmployeeLedgerEntry.INSERT(TRUE);

        // Post detailed employee entries
        DtldLedgEntryInserted := PostDtldEmplLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,EmployeePostingGr,TRUE);

        // Posting GL Entry
        IF DtldLedgEntryInserted THEN
          IF IsTempGLEntryBufEmpty THEN
            DtldEmplLedgEntry.SetZeroTransNo(NextTransactionNo);

        OnMoveGenJournalLine(EmployeeLedgerEntry.RECORDID);
      END;
    END;

    LOCAL PROCEDURE PostBankAcc@14(GenJnlLine@1005 : Record 81;Balancing@1006 : Boolean);
    VAR
      BankAcc@1000 : Record 270;
      BankAccLedgEntry@1004 : Record 271;
      CheckLedgEntry@1003 : Record 272;
      CheckLedgEntry2@1002 : Record 272;
      BankAccPostingGr@1001 : Record 277;
    BEGIN
      WITH GenJnlLine DO BEGIN
        BankAcc.GET("Account No.");
        BankAcc.TESTFIELD(Blocked,FALSE);
        IF "Currency Code" = '' THEN
          BankAcc.TESTFIELD("Currency Code",'')
        ELSE
          IF BankAcc."Currency Code" <> '' THEN
            TESTFIELD("Currency Code",BankAcc."Currency Code");

        BankAcc.TESTFIELD("Bank Acc. Posting Group");
        BankAccPostingGr.GET(BankAcc."Bank Acc. Posting Group");

        BankAccLedgEntry.LOCKTABLE;

        OnPostBankAccOnBeforeInitBankAccLedgEntry(GenJnlLine,CurrencyFactor,NextEntryNo,NextTransactionNo);

        InitBankAccLedgEntry(GenJnlLine,BankAccLedgEntry);

        BankAccLedgEntry."Bank Acc. Posting Group" := BankAcc."Bank Acc. Posting Group";
        BankAccLedgEntry."Currency Code" := BankAcc."Currency Code";
        IF BankAcc."Currency Code" <> '' THEN
          BankAccLedgEntry.Amount := Amount
        ELSE
          BankAccLedgEntry.Amount := "Amount (LCY)";
        BankAccLedgEntry."Amount (LCY)" := "Amount (LCY)";
        BankAccLedgEntry.Open := Amount <> 0;
        BankAccLedgEntry."Remaining Amount" := BankAccLedgEntry.Amount;
        BankAccLedgEntry.Positive := Amount > 0;
        BankAccLedgEntry.UpdateDebitCredit(Correction);
        OnPostBankAccOnBeforeBankAccLedgEntryInsert(BankAccLedgEntry,GenJnlLine,BankAcc);
        BankAccLedgEntry.INSERT(TRUE);
        OnPostBankAccOnAfterBankAccLedgEntryInsert(BankAccLedgEntry,GenJnlLine,BankAcc);

        IF ((Amount <= 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") AND "Check Printed") OR
           ((Amount < 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Manual Check"))
        THEN BEGIN
          IF BankAcc."Currency Code" <> "Currency Code" THEN
            ERROR(BankPaymentTypeMustNotBeFilledErr);
          CASE "Bank Payment Type" OF
            "Bank Payment Type"::"Computer Check":
              BEGIN
                TESTFIELD("Check Printed",TRUE);
                CheckLedgEntry.LOCKTABLE;
                CheckLedgEntry.RESET;
                CheckLedgEntry.SETCURRENTKEY("Bank Account No.","Entry Status","Check No.");
                CheckLedgEntry.SETRANGE("Bank Account No.","Account No.");
                CheckLedgEntry.SETRANGE("Entry Status",CheckLedgEntry."Entry Status"::Printed);
                CheckLedgEntry.SETRANGE("Check No.","Document No.");
                IF CheckLedgEntry.FINDSET THEN
                  REPEAT
                    CheckLedgEntry2 := CheckLedgEntry;
                    CheckLedgEntry2."Entry Status" := CheckLedgEntry2."Entry Status"::Posted;
                    CheckLedgEntry2."Bank Account Ledger Entry No." := BankAccLedgEntry."Entry No.";
                    CheckLedgEntry2.MODIFY;
                  UNTIL CheckLedgEntry.NEXT = 0;
              END;
            "Bank Payment Type"::"Manual Check":
              BEGIN
                IF "Document No." = '' THEN
                  ERROR(DocNoMustBeEnteredErr,"Bank Payment Type");
                CheckLedgEntry.RESET;
                IF NextCheckEntryNo = 0 THEN BEGIN
                  CheckLedgEntry.LOCKTABLE;
                  IF CheckLedgEntry.FINDLAST THEN
                    NextCheckEntryNo := CheckLedgEntry."Entry No." + 1
                  ELSE
                    NextCheckEntryNo := 1;
                END;

                CheckLedgEntry.SETRANGE("Bank Account No.","Account No.");
                CheckLedgEntry.SETFILTER(
                  "Entry Status",'%1|%2|%3',
                  CheckLedgEntry."Entry Status"::Printed,
                  CheckLedgEntry."Entry Status"::Posted,
                  CheckLedgEntry."Entry Status"::"Financially Voided");
                CheckLedgEntry.SETRANGE("Check No.","Document No.");
                IF NOT CheckLedgEntry.ISEMPTY THEN
                  ERROR(CheckAlreadyExistsErr,"Document No.");

                InitCheckLedgEntry(BankAccLedgEntry,CheckLedgEntry);
                CheckLedgEntry."Bank Payment Type" := CheckLedgEntry."Bank Payment Type"::"Manual Check";
                IF BankAcc."Currency Code" <> '' THEN
                  CheckLedgEntry.Amount := -Amount
                ELSE
                  CheckLedgEntry.Amount := -"Amount (LCY)";
                OnPostBankAccOnBeforeCheckLedgEntryInsert(CheckLedgEntry,BankAccLedgEntry,GenJnlLine,BankAcc);
                CheckLedgEntry.INSERT(TRUE);
                OnPostBankAccOnAfterCheckLedgEntryInsert(CheckLedgEntry,BankAccLedgEntry,GenJnlLine,BankAcc);
                NextCheckEntryNo := NextCheckEntryNo + 1;
              END;
          END;
        END;

        BankAccPostingGr.TESTFIELD("G/L Bank Account No.");
        CreateGLEntryBalAcc(
          GenJnlLine,BankAccPostingGr."G/L Bank Account No.","Amount (LCY)","Source Currency Amount",
          "Bal. Account Type","Bal. Account No.");
        DeferralPosting("Deferral Code","Source Code",BankAccPostingGr."G/L Bank Account No.",GenJnlLine,Balancing);
        OnMoveGenJournalLine(BankAccLedgEntry.RECORDID);
      END;
    END;

    LOCAL PROCEDURE PostFixedAsset@29(GenJnlLine@1009 : Record 81);
    VAR
      GLEntry@1010 : Record 17;
      GLEntry2@1000 : Record 17;
      TempFAGLPostBuf@1001 : TEMPORARY Record 5637;
      FAGLPostBuf@1011 : Record 5637;
      VATPostingSetup@1012 : Record 325;
      FAJnlPostLine@1013 : Codeunit 5632;
      FAAutomaticEntry@1003 : Codeunit 5607;
      ShortcutDim1Code@1004 : Code[20];
      ShortcutDim2Code@1005 : Code[20];
      Correction2@1006 : Boolean;
      NetDisposalNo@1007 : Integer;
      DimensionSetID@1008 : Integer;
      VATEntryGLEntryNo@1002 : Integer;
      IsHandled@1014 : Boolean;
      OrigGLEntryAmount@1080003 : Decimal;
    BEGIN
      WITH GenJnlLine DO BEGIN
        InitGLEntry(GenJnlLine,GLEntry,'',"Amount (LCY)","Source Currency Amount",TRUE,"System-Created Entry");
        GLEntry."Gen. Posting Type" := "Gen. Posting Type";
        GLEntry."Bal. Account Type" := "Bal. Account Type";
        GLEntry."Bal. Account No." := "Bal. Account No.";
        InitVAT(GenJnlLine,GLEntry,VATPostingSetup);
        //>>NAVNO
        IF GLSetup."Norwegian Localization Active" THEN BEGIN
          OrigGLEntryAmount := GLEntry.Amount;
          GLEntryCalcPropDeduction(GenJnlLine,GLEntry,VATPostingSetup);
          GLEntryAdjustPurchase(GLEntry,GenJnlLine,VATPostingSetup);
        END;
        //<<NAVNO
        GLEntry2 := GLEntry;
        FAAmount := GLEntry2.Amount;  //**4PS.n
        FAJnlPostLine.GenJnlPostLine(
          GenJnlLine,GLEntry2.Amount,GLEntry2."VAT Amount",NextTransactionNo,NextEntryNo,GLReg."No.");
        ShortcutDim1Code := "Shortcut Dimension 1 Code";
        ShortcutDim2Code := "Shortcut Dimension 2 Code";
        DimensionSetID := "Dimension Set ID";
        Correction2 := Correction;
      END;
      WITH TempFAGLPostBuf DO
        IF FAJnlPostLine.FindFirstGLAcc(TempFAGLPostBuf) THEN
          REPEAT
            GenJnlLine."Shortcut Dimension 1 Code" := "Global Dimension 1 Code";
            GenJnlLine."Shortcut Dimension 2 Code" := "Global Dimension 2 Code";
            GenJnlLine."Dimension Set ID" := "Dimension Set ID";
            GenJnlLine.Correction := Correction;
            FADimAlreadyChecked := "FA Posting Group" <> '';
            CheckDimValueForDisposal(GenJnlLine,"Account No.");
            IF "Original General Journal Line" THEN
              InitGLEntry(GenJnlLine,GLEntry,"Account No.",Amount,GLEntry2."Additional-Currency Amount",TRUE,TRUE)
            ELSE BEGIN
              CheckNonAddCurrCodeOccurred('');
              InitGLEntry(GenJnlLine,GLEntry,"Account No.",Amount,0,FALSE,TRUE);
            END;
            FADimAlreadyChecked := FALSE;
            GLEntry.CopyPostingGroupsFromGLEntry(GLEntry2);
            GLEntry."VAT Amount" := GLEntry2."VAT Amount";
            GLEntry."Bal. Account Type" := GLEntry2."Bal. Account Type";
            GLEntry."Bal. Account No." := GLEntry2."Bal. Account No.";
            GLEntry."FA Entry Type" := "FA Entry Type";
            GLEntry."FA Entry No." := "FA Entry No.";
            IF "Net Disposal" THEN
              NetDisposalNo := NetDisposalNo + 1
            ELSE
              NetDisposalNo := 0;
            IF "Automatic Entry" AND NOT "Net Disposal" THEN
              FAAutomaticEntry.AdjustGLEntry(GLEntry);
            IF NetDisposalNo > 1 THEN
              GLEntry."VAT Amount" := 0;
            IF "FA Posting Group" <> '' THEN BEGIN
              FAGLPostBuf := TempFAGLPostBuf;
              FAGLPostBuf."Entry No." := NextEntryNo;
              FAGLPostBuf.INSERT;
            END;
            IsHandled := FALSE;
            OnPostFixedAssetOnBeforeInsertGLEntry(GenJnlLine,GLEntry,IsHandled,TempFAGLPostBuf);
            IF NOT IsHandled THEN
              InsertGLEntry(GenJnlLine,GLEntry,TRUE);
            IF (VATEntryGLEntryNo = 0) AND (GLEntry."Gen. Posting Type" <> GLEntry."Gen. Posting Type"::" ") THEN
              VATEntryGLEntryNo := GLEntry."Entry No.";
            //NAVNO
            IF GLSetup."Norwegian Localization Active" THEN
              GLEntry.Amount := OrigGLEntryAmount;  //NAVNO
          UNTIL FAJnlPostLine.GetNextGLAcc(TempFAGLPostBuf) = 0;
      GenJnlLine."Shortcut Dimension 1 Code" := ShortcutDim1Code;
      GenJnlLine."Shortcut Dimension 2 Code" := ShortcutDim2Code;
      GenJnlLine."Dimension Set ID" := DimensionSetID;
      GenJnlLine.Correction := Correction2;
      GLEntry := GLEntry2;
      IF VATEntryGLEntryNo = 0 THEN
        VATEntryGLEntryNo := GLEntry."Entry No.";
      TempGLEntryBuf."Entry No." := VATEntryGLEntryNo; // Used later in InsertVAT(): GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.")
      PostVAT(GenJnlLine,GLEntry,VATPostingSetup);

      FAJnlPostLine.UpdateRegNo(GLReg."No.");
      GenJnlLine.OnMoveGenJournalLine(GLEntry.RECORDID);
    END;

    LOCAL PROCEDURE PostICPartner@63(GenJnlLine@1002 : Record 81);
    VAR
      ICPartner@1001 : Record 413;
      AccountNo@1000 : Code[20];
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "Account No." <> ICPartner.Code THEN
          ICPartner.GET("Account No.");
        IF ("Document Type" = "Document Type"::"Credit Memo") XOR (Amount > 0) THEN BEGIN
          ICPartner.TESTFIELD("Receivables Account");
          AccountNo := ICPartner."Receivables Account";
        END ELSE BEGIN
          ICPartner.TESTFIELD("Payables Account");
          AccountNo := ICPartner."Payables Account";
        END;

        CreateGLEntryBalAcc(
          GenJnlLine,AccountNo,"Amount (LCY)","Source Currency Amount",
          "Bal. Account Type","Bal. Account No.");
      END;
    END;

    LOCAL PROCEDURE PostJob@78(GenJnlLine@1000 : Record 81;GLEntry@1002 : Record 17);
    VAR
      JobPostLine@1001 : Codeunit 11072006;
    BEGIN
      IF JobLine THEN BEGIN
        JobLine := FALSE;
        JobPostLine.PostGenJnlLine(GenJnlLine,GLEntry);
      END;
    END;

    [External]
    PROCEDURE StartPosting@24(GenJnlLine@1001 : Record 81);
    VAR
      GenJnlTemplate@1000 : Record 80;
      AccountingPeriodMgt@1003 : Codeunit 360;
      LogInManagement@1100583000 : Codeunit 40;
    BEGIN
      OnBeforeStartPosting(GenJnlLine);

      WITH GenJnlLine DO BEGIN
        GetGLSetup;
        IF GLSetup."Danish Localization Active" THEN
          LogInManagement.CheckLicense(NextTransactionNo,"Posting Date");  //NAVDK
        InitNextEntryNo;
        FirstTransactionNo := NextTransactionNo;

        InitLastDocDate(GenJnlLine);
        CurrentBalance := 0;

        FiscalYearStartDate := AccountingPeriodMgt.GetPeriodStartingDate;

        GetGLSetup;

        IF NOT GenJnlTemplate.GET("Journal Template Name") THEN
          GenJnlTemplate.INIT;

        VATEntry.LOCKTABLE;
        IF VATEntry.FINDLAST THEN
          NextVATEntryNo := VATEntry."Entry No." + 1
        ELSE
          NextVATEntryNo := 1;
        NextConnectionNo := 1;
        FirstNewVATEntryNo := NextVATEntryNo;

        GLReg.LOCKTABLE;
        IF GLReg.FINDLAST THEN
          GLReg."No." := GLReg."No." + 1
        ELSE
          GLReg."No." := 1;
        GLReg.INIT;
        GLReg."From Entry No." := NextEntryNo;
        GLReg."From VAT Entry No." := NextVATEntryNo;
        GLReg."Creation Date" := TODAY;
        GLReg."Creation Time" := TIME;
        GLReg."Source Code" := "Source Code";
        GLReg."Journal Batch Name" := "Journal Batch Name";
        GLReg."User ID" := USERID;
        IsGLRegInserted := FALSE;

        OnAfterInitGLRegister(GLReg,GenJnlLine);

        GetCurrencyExchRate(GenJnlLine);
        TempGLEntryBuf.DELETEALL;
        CalculateCurrentBalance(
          "Account No.","Bal. Account No.",IncludeVATAmount,"Amount (LCY)","VAT Amount");
      END;
    END;

    [External]
    PROCEDURE ContinuePosting@155(GenJnlLine@1000 : Record 81);
    BEGIN
      OnBeforeContinuePosting(GenJnlLine,GLReg,NextEntryNo,NextTransactionNo);

      IF NextTransactionNoNeeded(GenJnlLine) THEN BEGIN
        CheckPostUnrealizedVAT(GenJnlLine,FALSE);
        NextTransactionNo := NextTransactionNo + 1;
        InitLastDocDate(GenJnlLine);
        FirstNewVATEntryNo := NextVATEntryNo;
      END;

      OnContinuePostingOnBeforeCalculateCurrentBalance(GenJnlLine,NextTransactionNo);

      GetCurrencyExchRate(GenJnlLine);
      TempGLEntryBuf.DELETEALL;
      CalculateCurrentBalance(
        GenJnlLine."Account No.",GenJnlLine."Bal. Account No.",GenJnlLine.IncludeVATAmount,
        GenJnlLine."Amount (LCY)",GenJnlLine."VAT Amount");
    END;

    LOCAL PROCEDURE NextTransactionNoNeeded@152(GenJnlLine@1000 : Record 81) : Boolean;
    VAR
      NewTransaction@1001 : Boolean;
    BEGIN
      WITH GenJnlLine DO BEGIN
        NewTransaction :=
          (LastDocType <> "Document Type") OR (LastDocNo <> "Document No.") OR
          (LastDate <> "Posting Date") OR ((CurrentBalance = 0) AND (TotalAddCurrAmount = 0)) AND NOT "System-Created Entry";
        OnNextTransactionNoNeeded(GenJnlLine,LastDocType,LastDocNo,LastDate,CurrentBalance,TotalAddCurrAmount,NewTransaction);
        EXIT(NewTransaction);
      END;
    END;

    [External]
    PROCEDURE FinishPosting@25(GenJnlLine@1000 : Record 81) IsTransactionConsistent : Boolean;
    VAR
      CostAccSetup@1003 : Record 1108;
      TransferGlEntriesToCA@1004 : Codeunit 1105;
      DimensionValueChains@1101285000 : Record 11128020;
    BEGIN
      OnBeforeFinishPosting(GenJnlLine);

      IsTransactionConsistent :=
        (BalanceCheckAmount = 0) AND (BalanceCheckAmount2 = 0) AND
        (BalanceCheckAddCurrAmount = 0) AND (BalanceCheckAddCurrAmount2 = 0);

      OnAfterSettingIsTransactionConsistent(GenJnlLine,IsTransactionConsistent);

      IF TempGLEntryBuf.FINDSET THEN BEGIN
        REPEAT
          GlobalGLEntry := TempGLEntryBuf;
          IF AddCurrencyCode = '' THEN BEGIN
            GlobalGLEntry."Additional-Currency Amount" := 0;
            GlobalGLEntry."Add.-Currency Debit Amount" := 0;
            GlobalGLEntry."Add.-Currency Credit Amount" := 0;
          END;
          GlobalGLEntry."Prior-Year Entry" := GlobalGLEntry."Posting Date" < FiscalYearStartDate;

          //**4PS.sn
          //IF NOT ReverseMode THEN BEGIN //MC-025988
          //  GlobalGLEntry."Remaining Amount" := GlobalGLEntry.Amount;
          //  GlobalGLEntry.Open := GlobalGLEntry."Remaining Amount" <> 0;
          //  GlobalGLEntry.Positive := GlobalGLEntry."Remaining Amount" > 0;
          //END; //MC-025988
          //**4PS.en
          OnBeforeInsertGlobalGLEntry(GlobalGLEntry,GenJnlLine);
          //>>4PSSE.I009
          //GlobalGLEntry.INSERT(true);
      //>>150428
          DimensionValueChains.ExtendDimSet(GlobalGLEntry."Dimension Set ID");
          GlobalGLEntry.INSERT(FALSE);  //don't run OnInsert-trigger!
      //<<150428
          //<<4PSSE
          OnAfterInsertGlobalGLEntry(GlobalGLEntry);
        UNTIL TempGLEntryBuf.NEXT = 0;

        GLReg."To VAT Entry No." := NextVATEntryNo - 1;
        GLReg."To Entry No." := GlobalGLEntry."Entry No.";
        IF IsTransactionConsistent THEN
          IF IsGLRegInserted THEN
            GLReg.MODIFY
          ELSE BEGIN
            GLReg.INSERT;
            IsGLRegInserted := TRUE;
          END;
      END;
      GlobalGLEntry.CONSISTENT(IsTransactionConsistent);

      IF CostAccSetup.GET THEN
        IF CostAccSetup."Auto Transfer from G/L" THEN
          TransferGlEntriesToCA.GetGLEntries;

      FirstEntryNo := 0;

      HandleGLEntryICApplication; //**4PS.n

      OnAfterFinishPosting(GlobalGLEntry,GLReg,IsTransactionConsistent);
    END;

    LOCAL PROCEDURE PostUnrealizedVAT@64(GenJnlLine@1000 : Record 81);
    BEGIN
      IF CheckUnrealizedCust THEN BEGIN
        CustUnrealizedVAT(GenJnlLine,UnrealizedCustLedgEntry,UnrealizedRemainingAmountCust);
        CheckUnrealizedCust := FALSE;
      END;
      IF CheckUnrealizedVend THEN BEGIN
        VendUnrealizedVAT(GenJnlLine,UnrealizedVendLedgEntry,UnrealizedRemainingAmountVend);
        CheckUnrealizedVend := FALSE;
      END;
    END;

    LOCAL PROCEDURE CheckPostUnrealizedVAT@41(GenJnlLine@1000 : Record 81;CheckCurrentBalance@1001 : Boolean);
    BEGIN
      IF CheckCurrentBalance AND (CurrentBalance = 0) OR NOT CheckCurrentBalance THEN
        PostUnrealizedVAT(GenJnlLine)
    END;

    [External]
    PROCEDURE InitGLEntry@3(GenJnlLine@1008 : Record 81;VAR GLEntry@1009 : Record 17;GLAccNo@1000 : Code[20];Amount@1001 : Decimal;AmountAddCurr@1002 : Decimal;UseAmountAddCurr@1003 : Boolean;SystemCreatedEntry@1004 : Boolean);
    VAR
      GLAcc@1007 : Record 15;
    BEGIN
      OnBeforeInitGLEntry(GenJnlLine);

      //**4PS.sn
      IF SwitchOffIntercompany THEN
        GenJnlLine."Intercompany Transaction" := FALSE; //**4PS.n NAV2013R2 solution for call 2565, No IC for VAT
      //**4PS.en

      IF GLAccNo <> '' THEN BEGIN
        GLAcc.GET(GLAccNo);
        GLAcc.TESTFIELD(Blocked,FALSE);
        GLAcc.TESTFIELD("Account Type",GLAcc."Account Type"::Posting);

        // Check the Value Posting field on the G/L Account if it is not checked already in Codeunit 11
        IF (NOT
            ((GLAccNo = GenJnlLine."Account No.") AND
             (GenJnlLine."Account Type" = GenJnlLine."Account Type"::"G/L Account")) OR
            ((GLAccNo = GenJnlLine."Bal. Account No.") AND
             (GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::"G/L Account"))) AND
           NOT FADimAlreadyChecked
        THEN
          CheckGLAccDimError(GenJnlLine,GLAccNo);
      END;

      GLEntry.INIT;
      GLEntry.CopyFromGenJnlLine(GenJnlLine);
      GLEntry."Entry No." := NextEntryNo;
      GLEntry."Transaction No." := NextTransactionNo;
      GLEntry."G/L Account No." := GLAccNo;
      GLEntry."System-Created Entry" := SystemCreatedEntry;
      GLEntry.Amount := Amount;
      GLEntry."Additional-Currency Amount" :=
        GLCalcAddCurrency(Amount,AmountAddCurr,GLEntry."Additional-Currency Amount",UseAmountAddCurr,GenJnlLine);

      OnAfterInitGLEntry(GLEntry,GenJnlLine);
    END;

    LOCAL PROCEDURE InitGLEntryVAT@113(GenJnlLine@1004 : Record 81;AccNo@1003 : Code[20];BalAccNo@1008 : Code[20];Amount@1002 : Decimal;AmountAddCurr@1001 : Decimal;UseAmtAddCurr@1007 : Boolean);
    VAR
      GLEntry@1005 : Record 17;
    BEGIN
      OnBeforeInitGLEntryVAT(GenJnlLine,GLEntry);

      GenJnlLine."Intercompany Transaction" := FALSE; //**4PS.n NAV2013R2 solution for call 2565, No IC for VAT

      IF UseAmtAddCurr THEN
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,TRUE,TRUE)
      ELSE BEGIN
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
        GLEntry."Additional-Currency Amount" := AmountAddCurr;
        GLEntry."Bal. Account No." := BalAccNo;
      END;
      SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry);
      OnAfterInitGLEntryVAT(GenJnlLine,GLEntry);
    END;

    LOCAL PROCEDURE InitGLEntryVATCopy@116(GenJnlLine@1001 : Record 81;AccNo@1003 : Code[20];BalAccNo@1007 : Code[20];Amount@1004 : Decimal;AmountAddCurr@1005 : Decimal;VATEntry@1008 : Record 254) : Integer;
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      OnBeforeInitGLEntryVATCopy(GenJnlLine,GLEntry,VATEntry);

      GenJnlLine."Intercompany Transaction" := FALSE; //**4PS.n NAV2013R2 solution for call 2565, No IC for VAT

      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."Bal. Account No." := BalAccNo;
      GLEntry.CopyPostingGroupsFromVATEntry(VATEntry);
      SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry);
      OnAfterInitGLEntryVATCopy(GenJnlLine,GLEntry);

      EXIT(GLEntry."Entry No.");
    END;

    [External]
    PROCEDURE InsertGLEntry@2(GenJnlLine@1001 : Record 81;GLEntry@1002 : Record 17;CalcAddCurrResiduals@1000 : Boolean);
    BEGIN
      WITH GLEntry DO BEGIN
        TESTFIELD("G/L Account No.");

        IF Amount <> ROUND(Amount) THEN
          FIELDERROR(
            Amount,
            STRSUBSTNO(NeedsRoundingErr,Amount));

        UpdateCheckAmounts(
          "Posting Date",Amount,"Additional-Currency Amount",
          BalanceCheckAmount,BalanceCheckAmount2,BalanceCheckAddCurrAmount,BalanceCheckAddCurrAmount2);

        UpdateDebitCredit(GenJnlLine.Correction);
      END;

      TempGLEntryBuf := GLEntry;

      OnBeforeInsertGLEntryBuffer(TempGLEntryBuf,GenJnlLine,
        BalanceCheckAmount,BalanceCheckAmount2,BalanceCheckAddCurrAmount,BalanceCheckAddCurrAmount2,NextEntryNo);

      TempGLEntryBuf.INSERT;

      IF FirstEntryNo = 0 THEN
        FirstEntryNo := TempGLEntryBuf."Entry No.";
      NextEntryNo := NextEntryNo + 1;

      IF CalcAddCurrResiduals THEN
        HandleAddCurrResidualGLEntry(GenJnlLine,GLEntry);
    END;

    [External]
    PROCEDURE CreateGLEntry@112(GenJnlLine@1005 : Record 81;AccNo@1004 : Code[20];Amount@1003 : Decimal;AmountAddCurr@1002 : Decimal;UseAmountAddCurr@1006 : Boolean);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      IF UseAmountAddCurr THEN
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,TRUE,TRUE)
      ELSE BEGIN
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
        GLEntry."Additional-Currency Amount" := AmountAddCurr;
      END;
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
    END;

    LOCAL PROCEDURE CreateGLEntryBalAcc@126(GenJnlLine@1005 : Record 81;AccNo@1004 : Code[20];Amount@1003 : Decimal;AmountAddCurr@1002 : Decimal;BalAccType@1008 : Option;BalAccNo@1007 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,TRUE,TRUE);
      GLEntry."Bal. Account Type" := BalAccType;
      GLEntry."Bal. Account No." := BalAccNo;
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
      GenJnlLine.OnMoveGenJournalLine(GLEntry.RECORDID);
    END;

    LOCAL PROCEDURE CreateGLEntryGainLoss@26(GenJnlLine@1005 : Record 81;AccNo@1004 : Code[20];Amount@1003 : Decimal;UseAmountAddCurr@1006 : Boolean);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,UseAmountAddCurr,TRUE);
      OnBeforeCreateGLEntryGainLossInsertGLEntry(GenJnlLine,GLEntry);
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
    END;

    LOCAL PROCEDURE CreateGLEntryVAT@117(GenJnlLine@1004 : Record 81;AccNo@1003 : Code[20];Amount@1002 : Decimal;AmountAddCurr@1001 : Decimal;VATAmount@1005 : Decimal;DtldCVLedgEntryBuf@1006 : Record 383);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."VAT Amount" := VATAmount;
      GLEntry.CopyPostingGroupsFromDtldCVBuf(DtldCVLedgEntryBuf,DtldCVLedgEntryBuf."Gen. Posting Type");
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
      InsertVATEntriesFromTemp(DtldCVLedgEntryBuf,GLEntry);
    END;

    LOCAL PROCEDURE CreateGLEntryVATCollectAdj@110(GenJnlLine@1004 : Record 81;AccNo@1003 : Code[20];Amount@1002 : Decimal;AmountAddCurr@1001 : Decimal;VATAmount@1005 : Decimal;DtldCVLedgEntryBuf@1006 : Record 383;VAR AdjAmount@1007 : ARRAY [4] OF Decimal);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."VAT Amount" := VATAmount;
      GLEntry.CopyPostingGroupsFromDtldCVBuf(DtldCVLedgEntryBuf,DtldCVLedgEntryBuf."Gen. Posting Type");
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
      CollectAdjustment(AdjAmount,GLEntry.Amount,GLEntry."Additional-Currency Amount");
      InsertVATEntriesFromTemp(DtldCVLedgEntryBuf,GLEntry);
    END;

    LOCAL PROCEDURE CreateGLEntryFromVATEntry@22(GenJnlLine@1000 : Record 81;VATAccNo@1002 : Code[20];Amount@1003 : Decimal;AmountAddCurr@1004 : Decimal;VATEntry@1005 : Record 254) : Integer;
    VAR
      GLEntry@1001 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,VATAccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry.CopyPostingGroupsFromVATEntry(VATEntry);
      OnBeforeInsertGLEntryFromVATEntry(GLEntry,VATEntry);
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
      EXIT(GLEntry."Entry No.");
    END;

    LOCAL PROCEDURE CreateDeferralScheduleFromGL@386(VAR GenJournalLine@1000 : Record 81;IsBalancing@1001 : Boolean);
    BEGIN
      WITH GenJournalLine DO
        IF ("Account No." <> '') AND ("Deferral Code" <> '') THEN
          IF (("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) AND ("Source Code" = GLSourceCode)) OR
             ("Account Type" IN ["Account Type"::"G/L Account","Account Type"::"Bank Account"])
          THEN BEGIN
            IF NOT IsBalancing THEN
              CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",GenJournalLine);
            DeferralUtilities.CreateScheduleFromGL(GenJournalLine,FirstEntryNo);
          END;
    END;

    LOCAL PROCEDURE UpdateCheckAmounts@98(PostingDate@1000 : Date;Amount@1005 : Decimal;AddCurrAmount@1006 : Decimal;VAR BalanceCheckAmount@1001 : Decimal;VAR BalanceCheckAmount2@1002 : Decimal;VAR BalanceCheckAddCurrAmount@1003 : Decimal;VAR BalanceCheckAddCurrAmount2@1004 : Decimal);
    BEGIN
      IF PostingDate = NORMALDATE(PostingDate) THEN BEGIN
        BalanceCheckAmount :=
          BalanceCheckAmount + Amount * ((PostingDate - 00000101D) MOD 99 + 1);
        BalanceCheckAmount2 :=
          BalanceCheckAmount2 + Amount * ((PostingDate - 00000101D) MOD 98 + 1);
      END ELSE BEGIN
        BalanceCheckAmount :=
          BalanceCheckAmount + Amount * ((NORMALDATE(PostingDate) - 00000101D + 50) MOD 99 + 1);
        BalanceCheckAmount2 :=
          BalanceCheckAmount2 + Amount * ((NORMALDATE(PostingDate) - 00000101D + 50) MOD 98 + 1);
      END;

      IF AddCurrencyCode <> '' THEN
        IF PostingDate = NORMALDATE(PostingDate) THEN BEGIN
          BalanceCheckAddCurrAmount :=
            BalanceCheckAddCurrAmount + AddCurrAmount * ((PostingDate - 00000101D) MOD 99 + 1);
          BalanceCheckAddCurrAmount2 :=
            BalanceCheckAddCurrAmount2 + AddCurrAmount * ((PostingDate - 00000101D) MOD 98 + 1);
        END ELSE BEGIN
          BalanceCheckAddCurrAmount :=
            BalanceCheckAddCurrAmount +
            AddCurrAmount * ((NORMALDATE(PostingDate) - 00000101D + 50) MOD 99 + 1);
          BalanceCheckAddCurrAmount2 :=
            BalanceCheckAddCurrAmount2 +
            AddCurrAmount * ((NORMALDATE(PostingDate) - 00000101D + 50) MOD 98 + 1);
        END
      ELSE BEGIN
        BalanceCheckAddCurrAmount := 0;
        BalanceCheckAddCurrAmount2 := 0;
      END;
    END;

    LOCAL PROCEDURE CalcPmtDiscPossible@71(GenJnlLine@1000 : Record 81;VAR CVLedgEntryBuf@1001 : Record 382);
    BEGIN
      WITH GenJnlLine DO
        IF "Amount (LCY)" <> 0 THEN BEGIN
      //**4PS.so C026761
      //  IF (CVLedgEntryBuf."Pmt. Discount Date" >= CVLedgEntryBuf."Posting Date") OR
      //     (CVLedgEntryBuf."Pmt. Discount Date" = 0D)
      //  THEN BEGIN
      //**4PS.eo
            IF GLSetup."Pmt. Disc. Excl. VAT" THEN BEGIN
              IF "Sales/Purch. (LCY)" = 0 THEN
                CVLedgEntryBuf."Original Pmt. Disc. Possible" :=
                  ("Amount (LCY)" + TotalVATAmountOnJnlLines(GenJnlLine)) * Amount / "Amount (LCY)"
              ELSE
                CVLedgEntryBuf."Original Pmt. Disc. Possible" := "Sales/Purch. (LCY)" * Amount / "Amount (LCY)"
            END ELSE
              CVLedgEntryBuf."Original Pmt. Disc. Possible" := Amount;
            CVLedgEntryBuf."Original Pmt. Disc. Possible" :=
              ROUND(
                CVLedgEntryBuf."Original Pmt. Disc. Possible" * "Payment Discount %" / 100,AmountRoundingPrecision);
      //  END; //**4PS.o C026761
          CVLedgEntryBuf."Remaining Pmt. Disc. Possible" := CVLedgEntryBuf."Original Pmt. Disc. Possible";

          //**4PS.sn
          IF GLSetup."Pmt. Disc. Excl. VAT" THEN BEGIN
            IF "Sales/Purch. (LCY)" = 0 THEN
              CVLedgEntryBuf."Original Pmt. Disc. Possible 2" :=
                ("Amount (LCY)" + TotalVATAmountOnJnlLines(GenJnlLine)) * Amount / "Amount (LCY)"
            ELSE
              CVLedgEntryBuf."Original Pmt. Disc. Possible 2" := "Sales/Purch. (LCY)" * Amount / "Amount (LCY)"
          END ELSE
            CVLedgEntryBuf."Original Pmt. Disc. Possible 2" := Amount;
          CVLedgEntryBuf."Original Pmt. Disc. Possible 2" :=
            ROUND(
              CVLedgEntryBuf."Original Pmt. Disc. Possible 2" * "Payment Discount % 2" / 100,AmountRoundingPrecision);
          CVLedgEntryBuf."Remain. Pmt. Disc. Possible 2" := CVLedgEntryBuf."Original Pmt. Disc. Possible 2";

          IF GLSetup."Pmt. Disc. Excl. VAT" THEN BEGIN
            IF "Sales/Purch. (LCY)" = 0 THEN
              CVLedgEntryBuf."Original Pmt. Disc. Possible 3" :=
                ("Amount (LCY)" + TotalVATAmountOnJnlLines(GenJnlLine)) * Amount / "Amount (LCY)"
            ELSE
              CVLedgEntryBuf."Original Pmt. Disc. Possible 3" := "Sales/Purch. (LCY)" * Amount / "Amount (LCY)"
          END ELSE
            CVLedgEntryBuf."Original Pmt. Disc. Possible 3" := Amount;
          CVLedgEntryBuf."Original Pmt. Disc. Possible 3" :=
            ROUND(
              CVLedgEntryBuf."Original Pmt. Disc. Possible 3" * "Payment Discount % 3" / 100,AmountRoundingPrecision);
          CVLedgEntryBuf."Remain. Pmt. Disc. Possible 3" := CVLedgEntryBuf."Original Pmt. Disc. Possible 3";
          //**4PS.en

        END;
    END;

    LOCAL PROCEDURE CalcPmtTolerancePossible@72(GenJnlLine@1003 : Record 81;PmtDiscountDate@1001 : Date;VAR PmtDiscToleranceDate@1002 : Date;VAR MaxPaymentTolerance@1000 : Decimal);
    BEGIN
      WITH GenJnlLine DO
        IF "Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"] THEN BEGIN
          IF PmtDiscountDate <> 0D THEN
            PmtDiscToleranceDate :=
              CALCDATE(GLSetup."Payment Discount Grace Period",PmtDiscountDate)
          ELSE
            PmtDiscToleranceDate := PmtDiscountDate;

          CASE "Account Type" OF
            "Account Type"::Customer:
              PaymentToleranceMgt.CalcMaxPmtTolerance(
                "Document Type","Currency Code",Amount,"Amount (LCY)",1,MaxPaymentTolerance);
            "Account Type"::Vendor:
              PaymentToleranceMgt.CalcMaxPmtTolerance(
                "Document Type","Currency Code",Amount,"Amount (LCY)",-1,MaxPaymentTolerance);
          END;
        END;
    END;

    LOCAL PROCEDURE CalcPmtTolerance@61(VAR NewCVLedgEntryBuf@1008 : Record 382;VAR OldCVLedgEntryBuf@1007 : Record 382;VAR OldCVLedgEntryBuf2@1006 : Record 382;VAR DtldCVLedgEntryBuf@1005 : Record 383;GenJnlLine@1004 : Record 81;VAR PmtTolAmtToBeApplied@1012 : Decimal;NextTransactionNo@1001 : Integer;FirstNewVATEntryNo@1000 : Integer);
    VAR
      PmtTol@1011 : Decimal;
      PmtTolLCY@1010 : Decimal;
      PmtTolAddCurr@1009 : Decimal;
      IsHandled@1002 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCalcPmtTolerance(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtTolAmtToBeApplied,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF OldCVLedgEntryBuf2."Accepted Payment Tolerance" = 0 THEN
        EXIT;

      PmtTol := -OldCVLedgEntryBuf2."Accepted Payment Tolerance";
      PmtTolAmtToBeApplied := PmtTolAmtToBeApplied + PmtTol;
      PmtTolLCY :=
        ROUND(
          (NewCVLedgEntryBuf."Original Amount" + PmtTol) / NewCVLedgEntryBuf."Original Currency Factor") -
        NewCVLedgEntryBuf."Original Amt. (LCY)";

      OnCalcPmtToleranceOnAfterAssignPmtDisc(
        PmtTol,PmtTolLCY,PmtTolAmtToBeApplied,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,NextTransactionNo,FirstNewVATEntryNo);

      OldCVLedgEntryBuf."Accepted Payment Tolerance" := 0;
      OldCVLedgEntryBuf."Pmt. Tolerance (LCY)" := -PmtTolLCY;

      IF NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode THEN
        PmtTolAddCurr := PmtTol
      ELSE
        PmtTolAddCurr := CalcLCYToAddCurr(PmtTolLCY);

      IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND (PmtTolLCY <> 0) THEN
        CalcPmtDiscIfAdjVAT(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtTolLCY,PmtTolAddCurr,
          NextTransactionNo,FirstNewVATEntryNo,DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)");

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance",PmtTol,PmtTolLCY,PmtTolAddCurr,0,0,0);
    END;

    LOCAL PROCEDURE CalcPmtDisc@50(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR OldCVLedgEntryBuf2@1002 : Record 382;VAR DtldCVLedgEntryBuf@1003 : Record 383;GenJnlLine@1004 : Record 81;PmtTolAmtToBeApplied@1012 : Decimal;ApplnRoundingPrecision@1006 : Decimal;NextTransactionNo@1007 : Integer;FirstNewVATEntryNo@1008 : Integer;VAR PmtDiscFound@1100528400 : Boolean);
    VAR
      PmtDisc@1009 : Decimal;
      PmtDiscLCY@1010 : Decimal;
      PmtDiscAddCurr@1011 : Decimal;
      MinimalPossibleLiability@1014 : Decimal;
      PaymentExceedsLiability@1005 : Boolean;
      ToleratedPaymentExceedsLiability@1013 : Boolean;
      IsHandled@1015 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCalcPmtDisc(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtTolAmtToBeApplied,IsHandled);
      IF IsHandled THEN
        EXIT;

      MinimalPossibleLiability := ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible");
      OnAfterCalcMinimalPossibleLiability(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,MinimalPossibleLiability);

      PaymentExceedsLiability := ABS(OldCVLedgEntryBuf2."Amount to Apply") >= MinimalPossibleLiability;
      OnAfterCalcPaymentExceedsLiability(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,MinimalPossibleLiability,PaymentExceedsLiability);

      ToleratedPaymentExceedsLiability :=
        ABS(NewCVLedgEntryBuf."Remaining Amount" + PmtTolAmtToBeApplied) >= MinimalPossibleLiability;
      OnAfterCalcToleratedPaymentExceedsLiability(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,MinimalPossibleLiability,
        ToleratedPaymentExceedsLiability,PmtTolAmtToBeApplied);

      //**4PS.sn
      PaymentToleranceMgt.SetAmountToRemain(AmntToRemain);
      //**4PS.en

      //IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,TRUE,TRUE) AND //**4PS.o
      IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,TRUE,TRUE,0) AND //**4PS.n
          ((OldCVLedgEntryBuf2."Amount to Apply" = 0) OR PaymentExceedsLiability) OR
        //(PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE) AND //**4PS.o
          (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE, 0) AND //**4PS.n
           (OldCVLedgEntryBuf2."Amount to Apply" <> 0) AND PaymentExceedsLiability AND ToleratedPaymentExceedsLiability))
      THEN BEGIN
        PmtDisc := -OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible";
        PmtDiscLCY :=
          ROUND(
            (NewCVLedgEntryBuf."Original Amount" + PmtDisc) / NewCVLedgEntryBuf."Original Currency Factor") -
          NewCVLedgEntryBuf."Original Amt. (LCY)";

        OnCalcPmtDiscOnAfterAssignPmtDisc(PmtDisc,PmtDiscLCY,OldCVLedgEntryBuf,OldCVLedgEntryBuf2);

        OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscLCY;

        IF (NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode) AND (AddCurrencyCode <> '') THEN
          PmtDiscAddCurr := PmtDisc
        ELSE
          PmtDiscAddCurr := CalcLCYToAddCurr(PmtDiscLCY);

        OnAfterCalcPmtDiscount(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          PmtTolAmtToBeApplied,PmtDisc,PmtDiscLCY,PmtDiscAddCurr);

        IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND
           (PmtDiscLCY <> 0)
        THEN
          CalcPmtDiscIfAdjVAT(
            NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtDiscLCY,PmtDiscAddCurr,
            NextTransactionNo,FirstNewVATEntryNo,DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)");

        DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
          GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
          DtldCVLedgEntryBuf."Entry Type"::"Payment Discount",PmtDisc,PmtDiscLCY,PmtDiscAddCurr,0,0,0);
      //**4PS.sn
      END ELSE BEGIN
        MinimalPossibleLiability := ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remain. Pmt. Disc. Possible 2");
        PaymentExceedsLiability := ABS(OldCVLedgEntryBuf2."Amount to Apply") >= MinimalPossibleLiability;
        ToleratedPaymentExceedsLiability := ABS(NewCVLedgEntryBuf."Remaining Amount" + PmtTolAmtToBeApplied) >= MinimalPossibleLiability;
        IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,TRUE,TRUE,1) AND
            ((OldCVLedgEntryBuf2."Amount to Apply" = 0) OR PaymentExceedsLiability) OR
            (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE,1) AND
             (OldCVLedgEntryBuf2."Amount to Apply" <> 0) AND PaymentExceedsLiability AND ToleratedPaymentExceedsLiability))
        THEN BEGIN
          PmtDisc := -OldCVLedgEntryBuf2."Remain. Pmt. Disc. Possible 2";
          PmtDiscLCY :=
            ROUND(
              (NewCVLedgEntryBuf."Original Amount" + PmtDisc) / NewCVLedgEntryBuf."Original Currency Factor") -
               NewCVLedgEntryBuf."Original Amt. (LCY)";

          OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscLCY;
          IF (NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode) AND (AddCurrencyCode <> '') THEN
            PmtDiscAddCurr := PmtDisc
          ELSE
            PmtDiscAddCurr := CalcLCYToAddCurr(PmtDiscLCY);

          IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND
             (PmtDiscLCY <> 0)
          THEN
            CalcPmtDiscIfAdjVAT(
              NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtDiscLCY,PmtDiscAddCurr,
              NextTransactionNo,FirstNewVATEntryNo,DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)");

          DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
          GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
          DtldCVLedgEntryBuf."Entry Type"::"Payment Discount",PmtDisc,PmtDiscLCY,PmtDiscAddCurr,0,0,0);
        END ELSE BEGIN
          MinimalPossibleLiability := ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remain. Pmt. Disc. Possible 3");
          PaymentExceedsLiability := ABS(OldCVLedgEntryBuf2."Amount to Apply") >= MinimalPossibleLiability;
          ToleratedPaymentExceedsLiability := ABS(NewCVLedgEntryBuf."Remaining Amount" + PmtTolAmtToBeApplied) >= MinimalPossibleLiability;
          IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,TRUE,TRUE,2) AND
              ((OldCVLedgEntryBuf2."Amount to Apply" = 0) OR PaymentExceedsLiability) OR
              (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE,2) AND
               (OldCVLedgEntryBuf2."Amount to Apply" <> 0) AND PaymentExceedsLiability AND ToleratedPaymentExceedsLiability))
          THEN BEGIN
            PmtDisc := -OldCVLedgEntryBuf2."Remain. Pmt. Disc. Possible 3";
            PmtDiscLCY :=
              ROUND(
                (NewCVLedgEntryBuf."Original Amount" + PmtDisc) / NewCVLedgEntryBuf."Original Currency Factor") -
                 NewCVLedgEntryBuf."Original Amt. (LCY)";

            OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscLCY;
            IF (NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode) AND (AddCurrencyCode <> '') THEN
              PmtDiscAddCurr := PmtDisc
            ELSE
              PmtDiscAddCurr := CalcLCYToAddCurr(PmtDiscLCY);

            IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND
               (PmtDiscLCY <> 0)
            THEN
              CalcPmtDiscIfAdjVAT(
                NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtDiscLCY,PmtDiscAddCurr,
                NextTransactionNo,FirstNewVATEntryNo,DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)");

            DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
              GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
              DtldCVLedgEntryBuf."Entry Type"::"Payment Discount",PmtDisc,PmtDiscLCY,PmtDiscAddCurr,0,0,0);
          END;
        END;
      //**4PS.en
      END;
      PmtDiscFound := PmtDisc <> 0; //**4PS.n
    END;

    LOCAL PROCEDURE CalcPmtDiscIfAdjVAT@49(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81;VAR PmtDiscLCY2@1005 : Decimal;VAR PmtDiscAddCurr2@1006 : Decimal;NextTransactionNo@1007 : Integer;FirstNewVATEntryNo@1008 : Integer;EntryType@1009 : Integer);
    VAR
      VATEntry2@1011 : Record 254;
      VATPostingSetup@1012 : Record 325;
      TaxJurisdiction@1013 : Record 320;
      DtldCVLedgEntryBuf2@1015 : Record 383;
      OriginalAmountAddCurr@1016 : Decimal;
      PmtDiscRounding@1017 : Decimal;
      PmtDiscRoundingAddCurr@1018 : Decimal;
      PmtDiscFactorLCY@1019 : Decimal;
      PmtDiscFactorAddCurr@1020 : Decimal;
      VATBase@1021 : Decimal;
      VATBaseAddCurr@1022 : Decimal;
      VATAmount@1023 : Decimal;
      VATAmountAddCurr@1024 : Decimal;
      TotalVATAmount@1025 : Decimal;
      LastConnectionNo@1026 : Integer;
      VATEntryModifier@1027 : Integer;
    BEGIN
      IF OldCVLedgEntryBuf."Original Amt. (LCY)" = 0 THEN
        EXIT;

      IF (AddCurrencyCode = '') OR (AddCurrencyCode = OldCVLedgEntryBuf."Currency Code") THEN
        OriginalAmountAddCurr := OldCVLedgEntryBuf.Amount
      ELSE
        OriginalAmountAddCurr := CalcLCYToAddCurr(OldCVLedgEntryBuf."Original Amt. (LCY)");

      PmtDiscRounding := PmtDiscLCY2;
      PmtDiscFactorLCY := PmtDiscLCY2 / OldCVLedgEntryBuf."Original Amt. (LCY)";
      IF OriginalAmountAddCurr <> 0 THEN
        PmtDiscFactorAddCurr := PmtDiscAddCurr2 / OriginalAmountAddCurr
      ELSE
        PmtDiscFactorAddCurr := 0;
      VATEntry2.RESET;
      VATEntry2.SETCURRENTKEY("Transaction No.");
      VATEntry2.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
      IF OldCVLedgEntryBuf."Transaction No." = NextTransactionNo THEN
        VATEntry2.SETRANGE("Entry No.",0,FirstNewVATEntryNo - 1);
      IF VATEntry2.FINDSET THEN BEGIN
        TotalVATAmount := 0;
        LastConnectionNo := 0;
        REPEAT
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF VATEntry2."VAT Calculation Type" =
             VATEntry2."VAT Calculation Type"::"Sales Tax"
          THEN BEGIN
            TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
            VATPostingSetup."Adjust for Payment Discount" :=
              TaxJurisdiction."Adjust for Payment Discount";
          END;
          IF VATPostingSetup."Adjust for Payment Discount" THEN BEGIN
            IF LastConnectionNo <> VATEntry2."Sales Tax Connection No." THEN BEGIN
              IF LastConnectionNo <> 0 THEN BEGIN
                DtldCVLedgEntryBuf := DtldCVLedgEntryBuf2;
                DtldCVLedgEntryBuf."VAT Amount (LCY)" := -TotalVATAmount;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);
                InsertSummarizedVAT(GenJnlLine);
              END;

              CalcPmtDiscVATBases(VATEntry2,VATBase,VATBaseAddCurr);

              PmtDiscRounding := PmtDiscRounding + VATBase * PmtDiscFactorLCY;
              VATBase := ROUND(PmtDiscRounding - PmtDiscLCY2);
              PmtDiscLCY2 := PmtDiscLCY2 + VATBase;

              PmtDiscRoundingAddCurr := PmtDiscRoundingAddCurr + VATBaseAddCurr * PmtDiscFactorAddCurr;
              VATBaseAddCurr := ROUND(CalcLCYToAddCurr(VATBase),AddCurrency."Amount Rounding Precision");
              PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATBaseAddCurr;

              DtldCVLedgEntryBuf2.INIT;
              DtldCVLedgEntryBuf2."Posting Date" := GenJnlLine."Posting Date";
              DtldCVLedgEntryBuf2."Document Type" := GenJnlLine."Document Type";
              DtldCVLedgEntryBuf2."Document No." := GenJnlLine."Document No.";
              DtldCVLedgEntryBuf2.Amount := 0;
              DtldCVLedgEntryBuf2."Amount (LCY)" := -VATBase;
              DtldCVLedgEntryBuf2."Entry Type" := EntryType;
              CASE EntryType OF
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
                  VATEntryModifier := 1000000;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
                  VATEntryModifier := 2000000;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
                  VATEntryModifier := 3000000;
              END;
              DtldCVLedgEntryBuf2.CopyFromCVLedgEntryBuf(NewCVLedgEntryBuf);
              // The total payment discount in currency is posted on the entry made in
              // the function CalcPmtDisc.
              DtldCVLedgEntryBuf2."User ID" := USERID;
              DtldCVLedgEntryBuf2."Additional-Currency Amount" := -VATBaseAddCurr;
              OnCalcPmtDiscIfAdjVATCopyFields(DtldCVLedgEntryBuf2,OldCVLedgEntryBuf,GenJnlLine);
              DtldCVLedgEntryBuf2.CopyPostingGroupsFromVATEntry(VATEntry2);
              TotalVATAmount := 0;
              LastConnectionNo := VATEntry2."Sales Tax Connection No.";
            END;

            CalcPmtDiscVATAmounts(
              VATEntry2,VATBase,VATBaseAddCurr,VATAmount,VATAmountAddCurr,
              PmtDiscRounding,PmtDiscFactorLCY,PmtDiscLCY2,PmtDiscAddCurr2);

            TotalVATAmount := TotalVATAmount + VATAmount;

            IF (PmtDiscAddCurr2 <> 0) AND (PmtDiscLCY2 = 0) THEN BEGIN
              VATAmountAddCurr := VATAmountAddCurr - PmtDiscAddCurr2;
              PmtDiscAddCurr2 := 0;
            END;

            // Post VAT
            // VAT for VAT entry
            IF VATEntry2.Type <> 0 THEN
              InsertPmtDiscVATForVATEntry(
                GenJnlLine,TempVATEntry,VATEntry2,VATEntryModifier,
                VATAmount,VATAmountAddCurr,VATBase,VATBaseAddCurr,
                PmtDiscFactorLCY,PmtDiscFactorAddCurr);

            // VAT for G/L entry/entries
            InsertPmtDiscVATForGLEntry(
              GenJnlLine,DtldCVLedgEntryBuf,NewCVLedgEntryBuf,VATEntry2,
              VATPostingSetup,TaxJurisdiction,EntryType,VATAmount,VATAmountAddCurr);
          END;
        UNTIL VATEntry2.NEXT = 0;

        IF LastConnectionNo <> 0 THEN BEGIN
          DtldCVLedgEntryBuf := DtldCVLedgEntryBuf2;
          DtldCVLedgEntryBuf."VAT Amount (LCY)" := -TotalVATAmount;
          DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
          InsertSummarizedVAT(GenJnlLine);
        END;
      END;
    END;

    LOCAL PROCEDURE CalcPmtDiscTolerance@60(VAR NewCVLedgEntryBuf@1008 : Record 382;VAR OldCVLedgEntryBuf@1007 : Record 382;VAR OldCVLedgEntryBuf2@1006 : Record 382;VAR DtldCVLedgEntryBuf@1005 : Record 383;GenJnlLine@1004 : Record 81;NextTransactionNo@1001 : Integer;FirstNewVATEntryNo@1000 : Integer);
    VAR
      PmtDiscTol@1011 : Decimal;
      PmtDiscTolLCY@1010 : Decimal;
      PmtDiscTolAddCurr@1009 : Decimal;
      IsHandled@1002 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCalcPmtDiscTolerance(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF NOT OldCVLedgEntryBuf2."Accepted Pmt. Disc. Tolerance" THEN
        EXIT;

      PmtDiscTol := -OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible";
      PmtDiscTolLCY :=
        ROUND(
          (NewCVLedgEntryBuf."Original Amount" + PmtDiscTol) / NewCVLedgEntryBuf."Original Currency Factor") -
        NewCVLedgEntryBuf."Original Amt. (LCY)";

      OnAfterCalcPmtDiscTolerance(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
        PmtDiscTol,PmtDiscTolLCY,PmtDiscTolAddCurr);

      OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscTolLCY;

      IF NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode THEN
        PmtDiscTolAddCurr := PmtDiscTol
      ELSE
        PmtDiscTolAddCurr := CalcLCYToAddCurr(PmtDiscTolLCY);

      IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND (PmtDiscTolLCY <> 0) THEN
        CalcPmtDiscIfAdjVAT(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtDiscTolLCY,PmtDiscTolAddCurr,
          NextTransactionNo,FirstNewVATEntryNo,DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)");

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance",PmtDiscTol,PmtDiscTolLCY,PmtDiscTolAddCurr,0,0,0);
    END;

    LOCAL PROCEDURE CalcPmtDiscVATBases@118(VATEntry2@1001 : Record 254;VAR VATBase@1002 : Decimal;VAR VATBaseAddCurr@1003 : Decimal);
    VAR
      VATEntry@1000 : Record 254;
    BEGIN
      CASE VATEntry2."VAT Calculation Type" OF
        VATEntry2."VAT Calculation Type"::"Normal VAT",
        VATEntry2."VAT Calculation Type"::"Reverse Charge VAT",
        VATEntry2."VAT Calculation Type"::"Full VAT":
          BEGIN
            VATBase :=
              VATEntry2.Base + VATEntry2."Unrealized Base";
            VATBaseAddCurr :=
              VATEntry2."Additional-Currency Base" +
              VATEntry2."Add.-Currency Unrealized Base";
          END;
        VATEntry2."VAT Calculation Type"::"Sales Tax":
          BEGIN
            VATEntry.RESET;
            VATEntry.SETCURRENTKEY("Transaction No.");
            VATEntry.SETRANGE("Transaction No.",VATEntry2."Transaction No.");
            VATEntry.SETRANGE("Sales Tax Connection No.",VATEntry2."Sales Tax Connection No.");
            VATEntry := VATEntry2;
            REPEAT
              IF VATEntry.Base < 0 THEN
                VATEntry.SETFILTER(Base,'>%1',VATEntry.Base)
              ELSE
                VATEntry.SETFILTER(Base,'<%1',VATEntry.Base);
            UNTIL NOT VATEntry.FINDLAST;
            VATEntry.RESET;
            VATBase :=
              VATEntry.Base + VATEntry."Unrealized Base";
            VATBaseAddCurr :=
              VATEntry."Additional-Currency Base" +
              VATEntry."Add.-Currency Unrealized Base";
          END;
      END;
    END;

    LOCAL PROCEDURE CalcPmtDiscVATAmounts@129(VATEntry2@1000 : Record 254;VATBase@1001 : Decimal;VATBaseAddCurr@1007 : Decimal;VAR VATAmount@1002 : Decimal;VAR VATAmountAddCurr@1003 : Decimal;VAR PmtDiscRounding@1004 : Decimal;PmtDiscFactorLCY@1005 : Decimal;VAR PmtDiscLCY2@1006 : Decimal;VAR PmtDiscAddCurr2@1008 : Decimal);
    BEGIN
      CASE VATEntry2."VAT Calculation Type" OF
        VATEntry2."VAT Calculation Type"::"Normal VAT",
        VATEntry2."VAT Calculation Type"::"Full VAT":
          IF (VATEntry2.Amount + VATEntry2."Unrealized Amount" <> 0) OR
             (VATEntry2."Additional-Currency Amount" + VATEntry2."Add.-Currency Unrealized Amt." <> 0)
          THEN BEGIN
            IF (VATBase = 0) AND
               (VATEntry2."VAT Calculation Type" <> VATEntry2."VAT Calculation Type"::"Full VAT")
            THEN
              VATAmount := 0
            ELSE BEGIN
              PmtDiscRounding :=
                PmtDiscRounding +
                (VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY;
              VATAmount := ROUND(PmtDiscRounding - PmtDiscLCY2);
              PmtDiscLCY2 := PmtDiscLCY2 + VATAmount;
            END;
            IF (VATBaseAddCurr = 0) AND
               (VATEntry2."VAT Calculation Type" <> VATEntry2."VAT Calculation Type"::"Full VAT")
            THEN
              VATAmountAddCurr := 0
            ELSE BEGIN
              VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
              PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATAmountAddCurr;
            END;
          END ELSE BEGIN
            VATAmount := 0;
            VATAmountAddCurr := 0;
          END;
        VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
          BEGIN
            VATAmount :=
              ROUND((VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY);
            VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
          END;
        VATEntry2."VAT Calculation Type"::"Sales Tax":
          IF (VATEntry2.Type = VATEntry2.Type::Purchase) AND VATEntry2."Use Tax" THEN BEGIN
            VATAmount :=
              ROUND((VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY);
            VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
          END ELSE
            IF (VATEntry2.Amount + VATEntry2."Unrealized Amount" <> 0) OR
               (VATEntry2."Additional-Currency Amount" + VATEntry2."Add.-Currency Unrealized Amt." <> 0)
            THEN BEGIN
              IF VATBase = 0 THEN
                VATAmount := 0
              ELSE BEGIN
                PmtDiscRounding :=
                  PmtDiscRounding +
                  (VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY;
                VATAmount := ROUND(PmtDiscRounding - PmtDiscLCY2);
                PmtDiscLCY2 := PmtDiscLCY2 + VATAmount;
              END;

              IF VATBaseAddCurr = 0 THEN
                VATAmountAddCurr := 0
              ELSE BEGIN
                VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
                PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATAmountAddCurr;
              END;
            END ELSE BEGIN
              VATAmount := 0;
              VATAmountAddCurr := 0;
            END;
      END;
    END;

    LOCAL PROCEDURE InsertPmtDiscVATForVATEntry@43(GenJnlLine@1000 : Record 81;VAR TempVATEntry@1001 : TEMPORARY Record 254;VATEntry2@1004 : Record 254;VATEntryModifier@1002 : Integer;VATAmount@1005 : Decimal;VATAmountAddCurr@1006 : Decimal;VATBase@1007 : Decimal;VATBaseAddCurr@1008 : Decimal;PmtDiscFactorLCY@1009 : Decimal;PmtDiscFactorAddCurr@1010 : Decimal);
    VAR
      TempVATEntryNo@1003 : Integer;
    BEGIN
      TempVATEntry.RESET;
      TempVATEntry.SETRANGE("Entry No.",VATEntryModifier,VATEntryModifier + 999999);
      IF TempVATEntry.FINDLAST THEN
        TempVATEntryNo := TempVATEntry."Entry No." + 1
      ELSE
        TempVATEntryNo := VATEntryModifier + 1;
      TempVATEntry := VATEntry2;
      TempVATEntry."Entry No." := TempVATEntryNo;
      TempVATEntry."Posting Date" := GenJnlLine."Posting Date";
      TempVATEntry."Document Date" := GenJnlLine."Document Date";
      TempVATEntry."Document No." := GenJnlLine."Document No.";
      TempVATEntry."External Document No." := GenJnlLine."External Document No.";
      TempVATEntry."Document Type" := GenJnlLine."Document Type";
      TempVATEntry."Source Code" := GenJnlLine."Source Code";
      TempVATEntry."Reason Code" := GenJnlLine."Reason Code";
      TempVATEntry."Transaction No." := NextTransactionNo;
      TempVATEntry."Sales Tax Connection No." := NextConnectionNo;
      TempVATEntry."Unrealized Amount" := 0;
      TempVATEntry."Unrealized Base" := 0;
      TempVATEntry."Remaining Unrealized Amount" := 0;
      TempVATEntry."Remaining Unrealized Base" := 0;
      TempVATEntry."User ID" := USERID;
      TempVATEntry."Closed by Entry No." := 0;
      TempVATEntry.Closed := FALSE;
      TempVATEntry."Internal Ref. No." := '';
      TempVATEntry.Amount := VATAmount;
      TempVATEntry."Additional-Currency Amount" := VATAmountAddCurr;
      TempVATEntry."VAT Difference" := 0;
      TempVATEntry."Add.-Curr. VAT Difference" := 0;
      TempVATEntry."Add.-Currency Unrealized Amt." := 0;
      TempVATEntry."Add.-Currency Unrealized Base" := 0;
      IF VATEntry2."Tax on Tax" THEN BEGIN
        TempVATEntry.Base :=
          ROUND((VATEntry2.Base + VATEntry2."Unrealized Base") * PmtDiscFactorLCY);
        TempVATEntry."Additional-Currency Base" :=
          ROUND(
            (VATEntry2."Additional-Currency Base" +
             VATEntry2."Add.-Currency Unrealized Base") * PmtDiscFactorAddCurr,
            AddCurrency."Amount Rounding Precision");
      END ELSE BEGIN
        TempVATEntry.Base := VATBase;
        TempVATEntry."Additional-Currency Base" := VATBaseAddCurr;
      END;
      TempVATEntry."Base Before Pmt. Disc." := VATEntry.Base;

      IF AddCurrencyCode = '' THEN BEGIN
        TempVATEntry."Additional-Currency Base" := 0;
        TempVATEntry."Additional-Currency Amount" := 0;
        TempVATEntry."Add.-Currency Unrealized Amt." := 0;
        TempVATEntry."Add.-Currency Unrealized Base" := 0;
      END;
      OnBeforeInsertTempVATEntry(TempVATEntry,GenJnlLine,VATEntry2);
      TempVATEntry.INSERT;
    END;

    LOCAL PROCEDURE InsertPmtDiscVATForGLEntry@94(GenJnlLine@1000 : Record 81;VAR DtldCVLedgEntryBuf@1001 : Record 383;VAR NewCVLedgEntryBuf@1003 : Record 382;VATEntry2@1004 : Record 254;VAR VATPostingSetup@1005 : Record 325;VAR TaxJurisdiction@1008 : Record 320;EntryType@1002 : Integer;VATAmount@1006 : Decimal;VATAmountAddCurr@1007 : Decimal);
    BEGIN
      DtldCVLedgEntryBuf.INIT;
      DtldCVLedgEntryBuf.CopyFromCVLedgEntryBuf(NewCVLedgEntryBuf);
      CASE EntryType OF
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
          DtldCVLedgEntryBuf."Entry Type" :=
            DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)";
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
          DtldCVLedgEntryBuf."Entry Type" :=
            DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)";
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
          DtldCVLedgEntryBuf."Entry Type" :=
            DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)";
      END;
      DtldCVLedgEntryBuf."Posting Date" := GenJnlLine."Posting Date";
      DtldCVLedgEntryBuf."Document Type" := GenJnlLine."Document Type";
      DtldCVLedgEntryBuf."Document No." := GenJnlLine."Document No.";
      OnInsertPmtDiscVATForGLEntryOnAfterCopyFromGenJnlLine(DtldCVLedgEntryBuf,GenJnlLine);
      DtldCVLedgEntryBuf.Amount := 0;
      DtldCVLedgEntryBuf."VAT Bus. Posting Group" := VATEntry2."VAT Bus. Posting Group";
      DtldCVLedgEntryBuf."VAT Prod. Posting Group" := VATEntry2."VAT Prod. Posting Group";
      DtldCVLedgEntryBuf."Tax Jurisdiction Code" := VATEntry2."Tax Jurisdiction Code";
      // The total payment discount in currency is posted on the entry made in
      // the function CalcPmtDisc.
      DtldCVLedgEntryBuf."User ID" := USERID;
      DtldCVLedgEntryBuf."Use Additional-Currency Amount" := TRUE;

      OnBeforeInsertPmtDiscVATForGLEntry(DtldCVLedgEntryBuf,GenJnlLine,VATEntry2);

      SwitchOffIntercompany := TRUE; //**4PS.n
      CASE VATEntry2.Type OF
        VATEntry2.Type::Purchase:
          CASE VATEntry2."VAT Calculation Type" OF
            VATEntry2."VAT Calculation Type"::"Normal VAT",
            VATEntry2."VAT Calculation Type"::"Full VAT":
              BEGIN
                InitGLEntryVAT(GenJnlLine,VATPostingSetup.GetPurchAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE);
                DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
              END;
            VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                InitGLEntryVAT(GenJnlLine,VATPostingSetup.GetPurchAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE);
                InitGLEntryVAT(GenJnlLine,VATPostingSetup.GetRevChargeAccount(FALSE),'',
                  -VATAmount,-VATAmountAddCurr,FALSE);
              END;
            VATEntry2."VAT Calculation Type"::"Sales Tax":
              IF VATEntry2."Use Tax" THEN BEGIN
                InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetPurchAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE);
                InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetRevChargeAccount(FALSE),'',
                  -VATAmount,-VATAmountAddCurr,FALSE);
              END ELSE BEGIN
                InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetPurchAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE);
                DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
              END;
          END;
        VATEntry2.Type::Sale:
          CASE VATEntry2."VAT Calculation Type" OF
            VATEntry2."VAT Calculation Type"::"Normal VAT",
            VATEntry2."VAT Calculation Type"::"Full VAT":
              BEGIN
                InitGLEntryVAT(
                  GenJnlLine,VATPostingSetup.GetSalesAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE);
                DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
              END;
            VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
              ;
            VATEntry2."VAT Calculation Type"::"Sales Tax":
              BEGIN
                InitGLEntryVAT(
                  GenJnlLine,TaxJurisdiction.GetSalesAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE);
                DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
              END;
          END;
      END;
      SwitchOffIntercompany := FALSE; //**4PS.n
    END;

    LOCAL PROCEDURE CalcCurrencyApplnRounding@51(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81;ApplnRoundingPrecision@1005 : Decimal);
    VAR
      ApplnRounding@1006 : Decimal;
      ApplnRoundingLCY@1007 : Decimal;
    BEGIN
      IF ((NewCVLedgEntryBuf."Document Type" <> NewCVLedgEntryBuf."Document Type"::Payment) AND
          (NewCVLedgEntryBuf."Document Type" <> NewCVLedgEntryBuf."Document Type"::Refund)) OR
         (NewCVLedgEntryBuf."Currency Code" = OldCVLedgEntryBuf."Currency Code")
      THEN
        EXIT;

      ApplnRounding := -(NewCVLedgEntryBuf."Remaining Amount" + OldCVLedgEntryBuf."Remaining Amount");
      ApplnRoundingLCY := ROUND(ApplnRounding / NewCVLedgEntryBuf."Adjusted Currency Factor");

      IF (ApplnRounding = 0) OR (ABS(ApplnRounding) > ApplnRoundingPrecision) THEN
        EXIT;

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::"Appln. Rounding",ApplnRounding,ApplnRoundingLCY,ApplnRounding,0,0,0);
    END;

    LOCAL PROCEDURE FindAmtForAppln@6(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR OldCVLedgEntryBuf2@1002 : Record 382;VAR AppliedAmount@1003 : Decimal;VAR AppliedAmountLCY@1004 : Decimal;VAR OldAppliedAmount@1005 : Decimal;ApplnRoundingPrecision@1007 : Decimal;OriginalApply@1210190000 : Boolean);
    VAR
      IsHandled@1006 : Boolean;
    BEGIN
      //**4PS.n: extra parameter OriginalApply
      IsHandled := FALSE;
      OnBeforeFindAmtForAppln(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,AppliedAmount,AppliedAmountLCY,OldAppliedAmount,IsHandled,
        ApplnRoundingPrecision);
      IF IsHandled THEN
        EXIT;

      //IF OldCVLedgEntryBuf2.GETFILTER(Positive) <> '' THEN BEGIN //**4PS.o
      IF (OldCVLedgEntryBuf2.GETFILTER(Positive) <> '') AND OriginalApply THEN BEGIN  //**4PS.n
        IF OldCVLedgEntryBuf2."Amount to Apply" <> 0 THEN BEGIN
          //IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE) AND //**4PS.o
          IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE,0) AND //**4PS.n
              (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
               ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible")))
          THEN
            AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount"
          ELSE
          //**4PS.sn
            IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE,1) AND
                (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
                 ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remain. Pmt. Disc. Possible 2")))
            THEN
              AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount"
            ELSE
              IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE,2) AND
                  (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
                   ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remain. Pmt. Disc. Possible 3")))
              THEN
                AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount"
              ELSE
              //**4PS.en
                AppliedAmount := -OldCVLedgEntryBuf2."Amount to Apply";
        END ELSE
          AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount";
      END ELSE BEGIN
        IF OldCVLedgEntryBuf2."Amount to Apply" <> 0 THEN
          //IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE) AND //**4PS.o
          IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE, 0) AND //**4PS.n
              (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
               ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible")) AND
              (ABS(NewCVLedgEntryBuf."Remaining Amount") >=
               ABS(
                 ABSMin(
                   OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible",
                   OldCVLedgEntryBuf2."Amount to Apply")))) OR
             OldCVLedgEntryBuf."Accepted Pmt. Disc. Tolerance"
          THEN BEGIN
      //    AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount"; //**4PS.o C028017
            AppliedAmount := ABSMin(NewCVLedgEntryBuf."Remaining Amount",-OldCVLedgEntryBuf2."Remaining Amount"); //**4PS.n C028017
            OldCVLedgEntryBuf."Accepted Pmt. Disc. Tolerance" := FALSE;
          END ELSE
            //**4PS.sn
            IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE, 1) AND
              (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
              ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remain. Pmt. Disc. Possible 2")) AND
              (ABS(NewCVLedgEntryBuf."Remaining Amount") >=
              (ABS(OldCVLedgEntryBuf2."Amount to Apply" - OldCVLedgEntryBuf2."Remain. Pmt. Disc. Possible 2")))) OR
              (OldCVLedgEntryBuf."Accepted Pmt. Disc. Tolerance" =  TRUE)
            THEN BEGIN
              AppliedAmount := ABSMin(NewCVLedgEntryBuf."Remaining Amount",-OldCVLedgEntryBuf2."Remaining Amount");
              OldCVLedgEntryBuf."Accepted Pmt. Disc. Tolerance" := FALSE;
            END ELSE
              IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE, 2) AND
                (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
                ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remain. Pmt. Disc. Possible 3")) AND
                (ABS(NewCVLedgEntryBuf."Remaining Amount") >=
                (ABS(OldCVLedgEntryBuf2."Amount to Apply" - OldCVLedgEntryBuf2."Remain. Pmt. Disc. Possible 3")))) OR
                (OldCVLedgEntryBuf."Accepted Pmt. Disc. Tolerance" =  TRUE)
              THEN BEGIN
                AppliedAmount := ABSMin(NewCVLedgEntryBuf."Remaining Amount",-OldCVLedgEntryBuf2."Remaining Amount");
                OldCVLedgEntryBuf."Accepted Pmt. Disc. Tolerance" := FALSE;
              END ELSE
            //**4PS.en
                AppliedAmount := ABSMin(NewCVLedgEntryBuf."Remaining Amount",-OldCVLedgEntryBuf2."Amount to Apply")
        ELSE
          AppliedAmount := ABSMin(NewCVLedgEntryBuf."Remaining Amount",-OldCVLedgEntryBuf2."Remaining Amount");
      END;

      IF (ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Amount to Apply") < ApplnRoundingPrecision) AND
         (ApplnRoundingPrecision <> 0) AND
         (OldCVLedgEntryBuf2."Amount to Apply" <> 0)
      THEN
        AppliedAmount := AppliedAmount - (OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Amount to Apply");

      IF NewCVLedgEntryBuf."Currency Code" = OldCVLedgEntryBuf2."Currency Code" THEN BEGIN
        //**4PS.sn
        IF OldCVLedgEntryBuf."Original Currency Factor" = 0 THEN
          AppliedAmountLCY := AppliedAmount
        ELSE
        //**4PS.en
          AppliedAmountLCY := ROUND(AppliedAmount / OldCVLedgEntryBuf."Original Currency Factor");
        OldAppliedAmount := AppliedAmount;
      END ELSE BEGIN
        // Management of posting in multiple currencies
        IF AppliedAmount = -OldCVLedgEntryBuf2."Remaining Amount" THEN
          OldAppliedAmount := -OldCVLedgEntryBuf."Remaining Amount"
        ELSE
          OldAppliedAmount :=
            CurrExchRate.ExchangeAmount(
              AppliedAmount,NewCVLedgEntryBuf."Currency Code",
      //      OldCVLedgEntryBuf2."Currency Code",NewCVLedgEntryBuf."Posting Date"); //**4PS.o
              OldCVLedgEntryBuf2."Currency Code",NewCVLedgEntryBuf."Posting Date",VATEntry.Type = VATEntry.Type::Sale); //**4PS.n

        IF NewCVLedgEntryBuf."Currency Code" <> '' THEN
          // Post the realized gain or loss on the NewCVLedgEntryBuf
          AppliedAmountLCY := ROUND(OldAppliedAmount / OldCVLedgEntryBuf."Original Currency Factor")
        ELSE
          // Post the realized gain or loss on the OldCVLedgEntryBuf
          AppliedAmountLCY := ROUND(AppliedAmount / NewCVLedgEntryBuf."Original Currency Factor");
      END;

      OnAfterFindAmtForAppln(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,AppliedAmount,AppliedAmountLCY,OldAppliedAmount);
    END;

    LOCAL PROCEDURE CalcCurrencyUnrealizedGainLoss@48(VAR CVLedgEntryBuf@1000 : Record 382;VAR TempDtldCVLedgEntryBuf@1002 : TEMPORARY Record 383;GenJnlLine@1003 : Record 81;AppliedAmount@1004 : Decimal;RemainingAmountBeforeAppln@1007 : Decimal);
    VAR
      DtldCustLedgEntry@1008 : Record 379;
      DtldVendLedgEntry@1009 : Record 380;
      DetailedRetentionLedgEntry@1100529500 : Record 11020637;
      UnRealizedGainLossLCY@1001 : Decimal;
      IsHandled@1005 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCalcCurrencyUnrealizedGainLoss(
        CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,AppliedAmount,RemainingAmountBeforeAppln,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF (CVLedgEntryBuf."Currency Code" = '') OR (RemainingAmountBeforeAppln = 0) THEN
        EXIT;

      // Calculate Unrealized GainLoss
      //**4PS.so
      // IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer THEN
      //  UnRealizedGainLossLCY :=
      //    ROUND(
      //      DtldCustLedgEntry.GetUnrealizedGainLossAmount(CVLedgEntryBuf."Entry No.") *
      //      ABS(AppliedAmount / RemainingAmountBeforeAppln))
      // ELSE
      //  UnRealizedGainLossLCY :=
      //    ROUND(
      //      DtldVendLedgEntry.GetUnrealizedGainLossAmount(CVLedgEntryBuf."Entry No.") *
      //      ABS(AppliedAmount / RemainingAmountBeforeAppln));
      //**4PS.eo
      //**4PS.sn
      CASE GenJnlLine."Account Type" OF
        GenJnlLine."Account Type"::Customer:
          UnRealizedGainLossLCY :=
            ROUND(
              DtldCustLedgEntry.GetUnrealizedGainLossAmount(CVLedgEntryBuf."Entry No.") *
              ABS(AppliedAmount / RemainingAmountBeforeAppln));
        GenJnlLine."Account Type"::Vendor:
          UnRealizedGainLossLCY :=
            ROUND(
              DtldVendLedgEntry.GetUnrealizedGainLossAmount(CVLedgEntryBuf."Entry No.") *
              ABS(AppliedAmount / RemainingAmountBeforeAppln));
        GenJnlLine."Account Type"::"G/L Account":
          IF GenJnlLine."Applies-to Retention ID" <> 0 THEN
            UnRealizedGainLossLCY :=
              ROUND(
                DetailedRetentionLedgEntry.GetUnrealizedGainLossAmount(CVLedgEntryBuf."Entry No.") *
                ABS(AppliedAmount / RemainingAmountBeforeAppln));
      END;
      //**4PS.en

      IF UnRealizedGainLossLCY <> 0 THEN
        IF UnRealizedGainLossLCY < 0 THEN
          TempDtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
            GenJnlLine,CVLedgEntryBuf,TempDtldCVLedgEntryBuf,
            TempDtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss",0,-UnRealizedGainLossLCY,0,0,0,0)
        ELSE
          TempDtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
            GenJnlLine,CVLedgEntryBuf,TempDtldCVLedgEntryBuf,
            TempDtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain",0,-UnRealizedGainLossLCY,0,0,0,0);
    END;

    LOCAL PROCEDURE CalcCurrencyRealizedGainLoss@62(VAR CVLedgEntryBuf@1005 : Record 382;VAR TempDtldCVLedgEntryBuf@1003 : TEMPORARY Record 383;GenJnlLine@1002 : Record 81;AppliedAmount@1001 : Decimal;AppliedAmountLCY@1000 : Decimal);
    VAR
      RealizedGainLossLCY@1006 : Decimal;
      IsHandled@1004 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCalcCurrencyRealizedGainLoss(
        CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,AppliedAmount,AppliedAmountLCY,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF CVLedgEntryBuf."Currency Code" = '' THEN
        EXIT;

      RealizedGainLossLCY := AppliedAmountLCY - ROUND(AppliedAmount / CVLedgEntryBuf."Original Currency Factor");
      OnAfterCalcCurrencyRealizedGainLoss(CVLedgEntryBuf,AppliedAmount,AppliedAmountLCY,RealizedGainLossLCY);

      IF RealizedGainLossLCY <> 0 THEN
        IF RealizedGainLossLCY < 0 THEN
          TempDtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
            GenJnlLine,CVLedgEntryBuf,TempDtldCVLedgEntryBuf,
            TempDtldCVLedgEntryBuf."Entry Type"::"Realized Loss",0,RealizedGainLossLCY,0,0,0,0)
        ELSE
          TempDtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
            GenJnlLine,CVLedgEntryBuf,TempDtldCVLedgEntryBuf,
            TempDtldCVLedgEntryBuf."Entry Type"::"Realized Gain",0,RealizedGainLossLCY,0,0,0,0);
    END;

    LOCAL PROCEDURE CalcApplication@55(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81;AppliedAmount@1004 : Decimal;AppliedAmountLCY@1005 : Decimal;OldAppliedAmount@1006 : Decimal;PrevNewCVLedgEntryBuf@1008 : Record 382;PrevOldCVLedgEntryBuf@1007 : Record 382;VAR AllApplied@1009 : Boolean);
    VAR
      IsHandled@1010 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCalcAplication(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,
        AppliedAmount,AppliedAmountLCY,OldAppliedAmount,PrevNewCVLedgEntryBuf,PrevOldCVLedgEntryBuf,AllApplied,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF AppliedAmount = 0 THEN
        EXIT;

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::Application,OldAppliedAmount,AppliedAmountLCY,0,
        NewCVLedgEntryBuf."Entry No.",PrevOldCVLedgEntryBuf."Remaining Pmt. Disc. Possible",
        PrevOldCVLedgEntryBuf."Max. Payment Tolerance");

      OnAfterInitOldDtldCVLedgEntryBuf(
        DtldCVLedgEntryBuf,NewCVLedgEntryBuf,OldCVLedgEntryBuf,PrevNewCVLedgEntryBuf,PrevOldCVLedgEntryBuf,GenJnlLine);

      //OldCVLedgEntryBuf.Open := OldCVLedgEntryBuf."Remaining Amount" <> 0;  //**4PS.o
      OldCVLedgEntryBuf.Open := (OldCVLedgEntryBuf."Remaining Amount" - AmntToRemain) <> 0;  //**4PS.n
      IF NOT OldCVLedgEntryBuf.Open THEN
        OldCVLedgEntryBuf.SetClosedFields(
          NewCVLedgEntryBuf."Entry No.",GenJnlLine."Posting Date",
          -OldAppliedAmount,-AppliedAmountLCY,NewCVLedgEntryBuf."Currency Code",-AppliedAmount)
      ELSE
        AllApplied := FALSE;

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::Application,-AppliedAmount,-AppliedAmountLCY,0,
        NewCVLedgEntryBuf."Entry No.",PrevNewCVLedgEntryBuf."Remaining Pmt. Disc. Possible",
        PrevNewCVLedgEntryBuf."Max. Payment Tolerance");

      OnAfterInitNewDtldCVLedgEntryBuf(
        DtldCVLedgEntryBuf,NewCVLedgEntryBuf,OldCVLedgEntryBuf,PrevNewCVLedgEntryBuf,PrevOldCVLedgEntryBuf,GenJnlLine);

      NewCVLedgEntryBuf.Open := NewCVLedgEntryBuf."Remaining Amount" <> 0;
      IF NOT NewCVLedgEntryBuf.Open AND NOT AllApplied THEN
        NewCVLedgEntryBuf.SetClosedFields(
          OldCVLedgEntryBuf."Entry No.",GenJnlLine."Posting Date",
          AppliedAmount,AppliedAmountLCY,OldCVLedgEntryBuf."Currency Code",OldAppliedAmount);
    END;

    LOCAL PROCEDURE CalcAmtLCYAdjustment@52(VAR CVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81);
    VAR
      AdjustedAmountLCY@1005 : Decimal;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCalcAmtLCYAdjustment(CVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF CVLedgEntryBuf."Currency Code" = '' THEN
        EXIT;

      AdjustedAmountLCY :=
        ROUND(CVLedgEntryBuf."Remaining Amount" / CVLedgEntryBuf."Adjusted Currency Factor");

      IF AdjustedAmountLCY <> CVLedgEntryBuf."Remaining Amt. (LCY)" THEN BEGIN
        DtldCVLedgEntryBuf.InitFromGenJnlLine(GenJnlLine);
        DtldCVLedgEntryBuf.CopyFromCVLedgEntryBuf(CVLedgEntryBuf);
        DtldCVLedgEntryBuf."Entry Type" :=
          DtldCVLedgEntryBuf."Entry Type"::"Correction of Remaining Amount";
        DtldCVLedgEntryBuf."Amount (LCY)" := AdjustedAmountLCY - CVLedgEntryBuf."Remaining Amt. (LCY)";
        DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
      END;
    END;

    LOCAL PROCEDURE InitBankAccLedgEntry@59(GenJnlLine@1000 : Record 81;VAR BankAccLedgEntry@1001 : Record 271);
    BEGIN
      OnBeforeInitBankAccLedgEntry(BankAccLedgEntry,GenJnlLine);

      BankAccLedgEntry.INIT;
      BankAccLedgEntry.CopyFromGenJnlLine(GenJnlLine);
      BankAccLedgEntry."Entry No." := NextEntryNo;
      BankAccLedgEntry."Transaction No." := NextTransactionNo;

      OnAfterInitBankAccLedgEntry(BankAccLedgEntry,GenJnlLine);
    END;

    LOCAL PROCEDURE InitCheckLedgEntry@65(BankAccLedgEntry@1000 : Record 271;VAR CheckLedgEntry@1001 : Record 272);
    BEGIN
      OnBeforeInitCheckEntry(BankAccLedgEntry,CheckLedgEntry);

      CheckLedgEntry.INIT;
      CheckLedgEntry.CopyFromBankAccLedgEntry(BankAccLedgEntry);
      CheckLedgEntry."Entry No." := NextCheckEntryNo;

      OnAfterInitCheckLedgEntry(CheckLedgEntry,BankAccLedgEntry);
    END;

    LOCAL PROCEDURE InitCustLedgEntry@57(GenJnlLine@1000 : Record 81;VAR CustLedgEntry@1001 : Record 21);
    BEGIN
      OnBeforeInitCustLedgEntry(CustLedgEntry,GenJnlLine);

      CustLedgEntry.INIT;
      CustLedgEntry.CopyFromGenJnlLine(GenJnlLine);
      CustLedgEntry."Entry No." := NextEntryNo;
      CustLedgEntry."Transaction No." := NextTransactionNo;

      OnAfterInitCustLedgEntry(CustLedgEntry,GenJnlLine);
    END;

    LOCAL PROCEDURE InitVendLedgEntry@58(GenJnlLine@1001 : Record 81;VAR VendLedgEntry@1000 : Record 25);
    BEGIN
      OnBeforeInitVendLedgEntry(VendLedgEntry,GenJnlLine);

      VendLedgEntry.INIT;
      VendLedgEntry.CopyFromGenJnlLine(GenJnlLine);
      VendLedgEntry."Entry No." := NextEntryNo;
      VendLedgEntry."Transaction No." := NextTransactionNo;

      OnAfterInitVendLedgEntry(VendLedgEntry,GenJnlLine);
    END;

    LOCAL PROCEDURE InitEmployeeLedgerEntry@134(GenJnlLine@1001 : Record 81;VAR EmployeeLedgerEntry@1000 : Record 5222);
    BEGIN
      OnBeforeInitEmployeeLedgEntry(EmployeeLedgerEntry,GenJnlLine);

      EmployeeLedgerEntry.INIT;
      EmployeeLedgerEntry.CopyFromGenJnlLine(GenJnlLine);
      EmployeeLedgerEntry."Entry No." := NextEntryNo;
      EmployeeLedgerEntry."Transaction No." := NextTransactionNo;

      OnAfterInitEmployeeLedgerEntry(EmployeeLedgerEntry,GenJnlLine);
    END;

    LOCAL PROCEDURE InsertDtldCustLedgEntry@102(GenJnlLine@1003 : Record 81;DtldCVLedgEntryBuf@1002 : Record 383;VAR DtldCustLedgEntry@1001 : Record 379;Offset@1000 : Integer);
    BEGIN
      WITH DtldCustLedgEntry DO BEGIN
        INIT;
        TRANSFERFIELDS(DtldCVLedgEntryBuf);
        "Entry No." := Offset + DtldCVLedgEntryBuf."Entry No.";
        "Journal Batch Name" := GenJnlLine."Journal Batch Name";
        "Reason Code" := GenJnlLine."Reason Code";
        "Source Code" := GenJnlLine."Source Code";
        "Transaction No." := NextTransactionNo;
        UpdateDebitCredit(GenJnlLine.Correction);
        OnBeforeInsertDtldCustLedgEntry(DtldCustLedgEntry,GenJnlLine,DtldCVLedgEntryBuf);
        INSERT(TRUE);
        OnAfterInsertDtldCustLedgEntry(DtldCustLedgEntry,GenJnlLine,DtldCVLedgEntryBuf,Offset);
      END;
    END;

    LOCAL PROCEDURE InsertDtldVendLedgEntry@103(GenJnlLine@1000 : Record 81;DtldCVLedgEntryBuf@1001 : Record 383;VAR DtldVendLedgEntry@1004 : Record 380;Offset@1002 : Integer);
    BEGIN
      WITH DtldVendLedgEntry DO BEGIN
        INIT;
        TRANSFERFIELDS(DtldCVLedgEntryBuf);
        "Entry No." := Offset + DtldCVLedgEntryBuf."Entry No.";
        "Journal Batch Name" := GenJnlLine."Journal Batch Name";
        "Reason Code" := GenJnlLine."Reason Code";
        "Source Code" := GenJnlLine."Source Code";
        "Transaction No." := NextTransactionNo;
        UpdateDebitCredit(GenJnlLine.Correction);
        OnBeforeInsertDtldVendLedgEntry(DtldVendLedgEntry,GenJnlLine,DtldCVLedgEntryBuf);
        INSERT(TRUE);
        OnAfterInsertDtldVendLedgEntry(DtldVendLedgEntry,GenJnlLine,DtldCVLedgEntryBuf,Offset);
      END;
    END;

    LOCAL PROCEDURE InsertDtldEmplLedgEntry@143(GenJnlLine@1000 : Record 81;DtldCVLedgEntryBuf@1001 : Record 383;VAR DtldEmplLedgEntry@1004 : Record 5223;Offset@1002 : Integer);
    BEGIN
      WITH DtldEmplLedgEntry DO BEGIN
        INIT;
        TRANSFERFIELDS(DtldCVLedgEntryBuf);
        "Entry No." := Offset + DtldCVLedgEntryBuf."Entry No.";
        "Journal Batch Name" := GenJnlLine."Journal Batch Name";
        "Reason Code" := GenJnlLine."Reason Code";
        "Source Code" := GenJnlLine."Source Code";
        "Transaction No." := NextTransactionNo;
        UpdateDebitCredit(GenJnlLine.Correction);
        OnBeforeInsertDtldEmplLedgEntry(DtldEmplLedgEntry,GenJnlLine,DtldCVLedgEntryBuf);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ApplyCustLedgEntry@1(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1001 : Record 383;GenJnlLine@1002 : Record 81;Cust@1003 : Record 18;OriginalApply@1210190000 : Boolean);
    VAR
      OldCustLedgEntry@1005 : Record 21;
      OldCVLedgEntryBuf@1006 : Record 382;
      NewCustLedgEntry@1008 : Record 21;
      NewCVLedgEntryBuf2@1019 : Record 382;
      TempOldCustLedgEntry@1021 : TEMPORARY Record 21;
      Completed@1009 : Boolean;
      AppliedAmount@1010 : Decimal;
      NewRemainingAmtBeforeAppln@1014 : Decimal;
      ApplyingDate@1017 : Date;
      PmtTolAmtToBeApplied@1020 : Decimal;
      AllApplied@1024 : Boolean;
      IsAmountToApplyCheckHandled@1004 : Boolean;
    BEGIN
      //**4PS.n: extra parameter Original Apply
      OnBeforeApplyCustLedgEntry(NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,Cust,IsAmountToApplyCheckHandled);
      IF NOT IsAmountToApplyCheckHandled THEN
        IF NewCVLedgEntryBuf."Amount to Apply" = 0 THEN
          EXIT;

      AllApplied := TRUE;
      IF (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') AND
         NOT
         ((Cust."Application Method" = Cust."Application Method"::"Apply to Oldest") AND
          GenJnlLine."Allow Application")
      THEN
        EXIT;

      PmtTolAmtToBeApplied := 0;
      AmntToRemain := 0; //**4PS.n
      NewRemainingAmtBeforeAppln := NewCVLedgEntryBuf."Remaining Amount";
      NewCVLedgEntryBuf2 := NewCVLedgEntryBuf;

      ApplyingDate := GenJnlLine."Posting Date";

      OnApplyCustLedgEntryOnBeforePrepareTempCustLedgEntry(GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,NextEntryNo);
      //IF NOT PrepareTempCustLedgEntry(GenJnlLine,NewCVLedgEntryBuf,TempOldCustLedgEntry,Cust,ApplyingDate) THEN //**4ps.o
      IF NOT PrepareTempCustLedgEntry(GenJnlLine,NewCVLedgEntryBuf,TempOldCustLedgEntry,Cust,ApplyingDate,OriginalApply) THEN //**4ps.n
        EXIT;

      GenJnlLine."Posting Date" := ApplyingDate;
      //**4PS.sn
      IF GenJnlLine."Posting Date" < NewCVLedgEntryBuf."Posting Date" THEN
        ERROR(
          Text11012001,
          GenJnlLine.FIELDCAPTION("Posting Date"),
          NewCVLedgEntryBuf.FIELDCAPTION("Posting Date"),
          NewCustLedgEntry.TABLECAPTION,
          NewCVLedgEntryBuf.FIELDCAPTION("Document No."),
          NewCVLedgEntryBuf."Document No.");
      //**4PS.en
      // Apply the new entry (Payment) to the old entries (Invoices) one at a time
      REPEAT
        //**4PS.sn
        IF GenJnlLine."Posting Date" < TempOldCustLedgEntry."Posting Date" THEN
          ERROR(
            Text11012001,
            GenJnlLine.FIELDCAPTION("Posting Date"),
            TempOldCustLedgEntry.FIELDCAPTION("Posting Date"),
            TempOldCustLedgEntry.TABLECAPTION,
            TempOldCustLedgEntry.FIELDCAPTION("Document No."),
            TempOldCustLedgEntry."Document No.");
        //**4PS.en
        TempOldCustLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");

        //**4PS.sn
        IF CheckCreditRestrictionOnTime(NewCVLedgEntryBuf,TempOldCustLedgEntry,GenJnlLine) THEN BEGIN
          TempOldCustLedgEntry."Remaining Amount" -= TempOldCustLedgEntry."Credit Restriction Amount";
          TempOldCustLedgEntry."Remaining Amount" -= TempOldCustLedgEntry."Credit Restriction VAT Amount";
        END;
        //**4PS.en
        TempOldCustLedgEntry.COPYFILTER(Positive,OldCVLedgEntryBuf.Positive);
        OldCVLedgEntryBuf.CopyFromCustLedgEntry(TempOldCustLedgEntry);

        //**4PS.sn
        OldCVLedgEntryBuf."Remaining Amount" +=
          TempOldCustLedgEntry."Credit Restriction Amount" + TempOldCustLedgEntry."Credit Restriction VAT Amount";
        //**4PS.en
        PostApply(
          GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,NewCVLedgEntryBuf,NewCVLedgEntryBuf2,
      //  Cust."Block Payment Tolerance",AllApplied,AppliedAmount,PmtTolAmtToBeApplied); //**4PS.o
          Cust."Block Payment Tolerance",AllApplied,AppliedAmount,PmtTolAmtToBeApplied,OriginalApply,TRUE); //**4PS.n

        IF NOT OldCVLedgEntryBuf.Open THEN BEGIN
          UpdateCalcInterest(OldCVLedgEntryBuf);
          UpdateCalcInterest2(OldCVLedgEntryBuf,NewCVLedgEntryBuf);
        END;

        TempOldCustLedgEntry.CopyFromCVLedgEntryBuffer(OldCVLedgEntryBuf);
        OldCustLedgEntry := TempOldCustLedgEntry;
        IF OriginalApply THEN BEGIN //**4PS.n
          OldCustLedgEntry."Applies-to ID" := '';
          OldCustLedgEntry."Amount to Apply" := 0;
        END; //**4PS.n
        OldCustLedgEntry.MODIFY;

        OnAfterOldCustLedgEntryModify(OldCustLedgEntry);

        IF GLSetup."Unrealized VAT" OR
           (GLSetup."Prepayment Unrealized VAT" AND TempOldCustLedgEntry.Prepayment)
        THEN
          IF IsNotPayment(TempOldCustLedgEntry."Document Type") THEN BEGIN
            TempOldCustLedgEntry.RecalculateAmounts(
              NewCVLedgEntryBuf."Currency Code",TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
            OnApplyCustLedgEntryOnAfterRecalculateAmounts(TempOldCustLedgEntry,OldCustLedgEntry,NewCVLedgEntryBuf,GenJnlLine);
            CustUnrealizedVAT(
              GenJnlLine,
              TempOldCustLedgEntry,
              CurrExchRate.ExchangeAmount(
                AppliedAmount,NewCVLedgEntryBuf."Currency Code",
      //        TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date")); //**4PS.o
                TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date",TRUE)); //**4PS.n
          END;

        TempOldCustLedgEntry.DELETE;

      //Completed := FindNextOldCustLedgEntryToApply(GenJnlLine,TempOldCustLedgEntry,NewCVLedgEntryBuf); //**4PS.o
        Completed := FindNextOldCustLedgEntryToApply(GenJnlLine,TempOldCustLedgEntry,NewCVLedgEntryBuf,OriginalApply); //**4PS.n
      UNTIL Completed;

      DtldCVLedgEntryBuf.SETCURRENTKEY("CV Ledger Entry No.","Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("CV Ledger Entry No.",NewCVLedgEntryBuf."Entry No.");
      DtldCVLedgEntryBuf.SETRANGE(
        "Entry Type",
        DtldCVLedgEntryBuf."Entry Type"::Application);
      DtldCVLedgEntryBuf.CALCSUMS("Amount (LCY)",Amount);

      CalcCurrencyUnrealizedGainLoss(
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,DtldCVLedgEntryBuf.Amount,NewRemainingAmtBeforeAppln);

      CalcAmtLCYAdjustment(NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

      NewCVLedgEntryBuf."Applies-to ID" := '';
      NewCVLedgEntryBuf."Amount to Apply" := 0;

      IF NOT NewCVLedgEntryBuf.Open THEN
        UpdateCalcInterest(NewCVLedgEntryBuf);

      IF GLSetup."Unrealized VAT" OR
         (GLSetup."Prepayment Unrealized VAT" AND NewCVLedgEntryBuf.Prepayment)
      THEN
        IF IsNotPayment(NewCVLedgEntryBuf."Document Type") AND
           (NewRemainingAmtBeforeAppln - NewCVLedgEntryBuf."Remaining Amount" <> 0)
        THEN BEGIN
          NewCustLedgEntry.CopyFromCVLedgEntryBuffer(NewCVLedgEntryBuf);
          CheckUnrealizedCust := TRUE;
          UnrealizedCustLedgEntry := NewCustLedgEntry;
          UnrealizedCustLedgEntry.CALCFIELDS("Amount (LCY)","Original Amt. (LCY)");
          UnrealizedRemainingAmountCust := NewCustLedgEntry."Remaining Amount" - NewRemainingAmtBeforeAppln;
        END;
    END;

    LOCAL PROCEDURE FindNextOldCustLedgEntryToApply@308(GenJnlLine@1003 : Record 81;VAR TempOldCustLedgEntry@1002 : TEMPORARY Record 21;NewCVLedgEntryBuf@1001 : Record 382;OriginalApply@1100525000 : Boolean) Completed : Boolean;
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      OnBeforeFindNextOldCustLedgEntryToApply(GenJnlLine,TempOldCustLedgEntry,NewCVLedgEntryBuf,Completed,IsHandled);
      IF IsHandled THEN
        EXIT(Completed);

      IF GenJnlLine."Applies-to Doc. No." <> '' THEN
        Completed := TRUE
      ELSE
        IF TempOldCustLedgEntry.GETFILTER(Positive) <> '' THEN
          //**4PS.so
          //IF TempOldCustLedgEntry.NEXT = 1 THEN
          //  Completed := FALSE
          //ELSE BEGIN
          //**4PS.eo
          //**4PS.sn
          IF TempOldCustLedgEntry.NEXT = 1 THEN BEGIN
            Completed := FALSE;
            IF (NOT OriginalApply) AND (NewCVLedgEntryBuf."Remaining Amount" = 0) THEN
              Completed := TRUE;
          END ELSE BEGIN
            IF OriginalApply THEN BEGIN
            //**4PS.en
              TempOldCustLedgEntry.SETRANGE(Positive);
              TempOldCustLedgEntry.FIND('-');
              TempOldCustLedgEntry.CALCFIELDS("Remaining Amount");
              Completed := TempOldCustLedgEntry."Remaining Amount" * NewCVLedgEntryBuf."Remaining Amount" >= 0;
            //**4PS.sn
            END ELSE
              Completed := TRUE;
            //**4PS.en
          END
        ELSE
          IF NewCVLedgEntryBuf.Open THEN
            Completed := TempOldCustLedgEntry.NEXT = 0
          ELSE
            Completed := TRUE;
    END;

    [External]
    PROCEDURE CustPostApplyCustLedgEntry@74(VAR GenJnlLinePostApply@1000 : Record 81;VAR CustLedgEntryPostApply@1001 : Record 21);
    VAR
      Cust@1002 : Record 18;
      CustPostingGr@1007 : Record 92;
      CustLedgEntry@1006 : Record 21;
      DtldCustLedgEntry@1003 : Record 379;
      TempDtldCVLedgEntryBuf@1004 : TEMPORARY Record 383;
      CVLedgEntryBuf@1005 : Record 382;
      GenJnlLine@1008 : Record 81;
      PaymentTerms@1090000 : Record 3;
      RefPaymentMgt@1090001 : Codeunit 11126180;
      DtldLedgEntryInserted@1009 : Boolean;
    BEGIN
      GenJnlLine := GenJnlLinePostApply;
      CustLedgEntry.TRANSFERFIELDS(CustLedgEntryPostApply);
      WITH GenJnlLine DO BEGIN
        "Source Currency Code" := CustLedgEntryPostApply."Currency Code";
        "Applies-to ID" := CustLedgEntryPostApply."Applies-to ID";

        GenJnlCheckLine.CheckPostingPeriod(FALSE);  //NAVNO
        GenJnlCheckLine.RunCheck(GenJnlLine);
        GenJnlCheckLine.CheckPostingPeriod(TRUE);  //NAVNO

        IF NextEntryNo = 0 THEN
          StartPosting(GenJnlLine)
        ELSE
          ContinuePosting(GenJnlLine);

        Cust.GET(CustLedgEntry."Customer No.");
        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);

        OnCustPostApplyCustLedgEntryOnBeforeCheckPostingGroup(GenJnlLine,Cust);

        IF "Posting Group" = '' THEN BEGIN
          Cust.TESTFIELD("Customer Posting Group");
          "Posting Group" := Cust."Customer Posting Group";
        END;
        CustPostingGr.GET("Posting Group");
        CustPostingGr.GetReceivablesAccount;

        DtldCustLedgEntry.LOCKTABLE;
        CustLedgEntry.LOCKTABLE;

        // Post the application
        CustLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        CVLedgEntryBuf.CopyFromCustLedgEntry(CustLedgEntry);

        //>>NAVFI
        GetGLSetup;
        IF GLSetup."Finnish localization active" THEN BEGIN
          IF Cust."Payment Terms Code" <> '' THEN
            IF PaymentTerms.GET(Cust."Payment Terms Code") THEN
              CustLedgEntry."Disreg. Pmt. Disc. at Full Pmt" := PaymentTerms."Disreg. Pmt. Disc. at Full Pmt"
            ELSE
              CustLedgEntry."Disreg. Pmt. Disc. at Full Pmt" := FALSE;
          IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Payment THEN
            RefPaymentMgt.CheckIfPaidInFull(GenJnlLine);
        END;
        //<<NAVFI

        //ApplyCustLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Cust); //**4PS.o
        ApplyCustLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Cust,FALSE);   //**4PS.n

        CustLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
        CustLedgEntry.MODIFY;

        // Post the Dtld customer entry
        DtldLedgEntryInserted := PostDtldCustLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,CustPostingGr,FALSE);

        CheckPostUnrealizedVAT(GenJnlLine,TRUE);

        IF DtldLedgEntryInserted THEN
          IF IsTempGLEntryBufEmpty THEN
            DtldCustLedgEntry.SetZeroTransNo(NextTransactionNo);

        FinishPosting(GenJnlLine);
      END;
    END;

    LOCAL PROCEDURE PrepareTempCustLedgEntry@111(VAR GenJnlLine@1000 : Record 81;VAR NewCVLedgEntryBuf@1015 : Record 382;VAR TempOldCustLedgEntry@1010 : TEMPORARY Record 21;Cust@1016 : Record 18;VAR ApplyingDate@1001 : Date;OriginalApply@1100528500 : Boolean) : Boolean;
    VAR
      OldCustLedgEntry@1014 : Record 21;
      SalesSetup@1009 : Record 311;
      GenJnlApply@1008 : Codeunit 225;
      RemainingAmount@1002 : Decimal;
      IsHandled@1003 : Boolean;
      CustEntryApplyPostedEntries@1100528501 : Codeunit 226;
      ApplicationEntryNo@1100528502 : Integer;
      DtldCustLedgEntry@1100528504 : Record 379;
      LastGLENtry@1100409000 : Record 17;
    BEGIN
      OnBeforePrepareTempCustledgEntry(GenJnlLine,NewCVLedgEntryBuf);

      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        // Find the entry to be applied to
        OldCustLedgEntry.RESET;
        OldCustLedgEntry.SETCURRENTKEY("Document No.");
        OldCustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        OldCustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
        //**4PS.sn DP00613
        IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund THEN BEGIN
          IF OldCustLedgEntry.FINDFIRST THEN BEGIN
            ApplicationEntryNo := FindApplnEntriesDtldtLedgEntry(OldCustLedgEntry,GenJnlLine."Debit Amount");
            IF ApplicationEntryNo > 0 THEN BEGIN
              DtldCustLedgEntry.GET(ApplicationEntryNo);
              CustEntryApplyPostedEntries.SetSkipCommit(TRUE);
              CustEntryApplyPostedEntries.PostUnApplyCustomer(DtldCustLedgEntry,GenJnlLine."Document No.",GenJnlLine."Posting Date");
              //C020687.sn
              IF LastGLENtry.FINDLAST THEN
                IF LastGLENtry."Entry No." >= NextEntryNo THEN
                  NextEntryNo := LastGLENtry."Entry No." + 1;
              //C020687.en
              GenJnlLine."Applies-to Doc. No." := DtldCustLedgEntry."Document No.";
              GenJnlLine."Applies-to Doc. Type" := DtldCustLedgEntry."Document Type";
              OldCustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
              OldCustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
            END;
          END;
        END;
        //**4PS.en

        OldCustLedgEntry.SETRANGE(Open,TRUE);
        OnPrepareTempCustLedgEntryOnAfterSetFilters(OldCustLedgEntry,GenJnlLine,NewCVLedgEntryBuf);
        OldCustLedgEntry.FINDFIRST;
        OnPrepareTempCustLedgEntryOnBeforeTestPositive(GenJnlLine,IsHandled);
        IF NOT IsHandled THEN
          OldCustLedgEntry.TESTFIELD(Positive,NOT NewCVLedgEntryBuf.Positive);
        IF OldCustLedgEntry."Posting Date" > ApplyingDate THEN
          ApplyingDate := OldCustLedgEntry."Posting Date";
        GenJnlApply.CheckAgainstApplnCurrency(
          NewCVLedgEntryBuf."Currency Code",OldCustLedgEntry."Currency Code",GenJnlLine."Account Type"::Customer,TRUE);
        TempOldCustLedgEntry := OldCustLedgEntry;
        OnPrepareTempCustLedgEntryOnBeforeTempOldCustLedgEntryInsert(TempOldCustLedgEntry,GenJnlLine);
        TempOldCustLedgEntry.INSERT;
      END ELSE BEGIN
        // Find the first old entry (Invoice) which the new entry (Payment) should apply to
        OldCustLedgEntry.RESET;
        OldCustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
        TempOldCustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
        OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
        OldCustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        OldCustLedgEntry.SETRANGE(Open,TRUE);
        OldCustLedgEntry.SETFILTER("Entry No.",'<>%1',NewCVLedgEntryBuf."Entry No.");
        IF NOT (Cust."Application Method" = Cust."Application Method"::"Apply to Oldest") THEN
          OldCustLedgEntry.SETFILTER("Amount to Apply",'<>%1',0);

        IF Cust."Application Method" = Cust."Application Method"::"Apply to Oldest" THEN
          OldCustLedgEntry.SETFILTER("Posting Date",'..%1',GenJnlLine."Posting Date");

        // Check Cust Ledger Entry and add to Temp.
        SalesSetup.GET;
        IF SalesSetup."Appln. between Currencies" = SalesSetup."Appln. between Currencies"::None THEN
          OldCustLedgEntry.SETRANGE("Currency Code",NewCVLedgEntryBuf."Currency Code");
        IF OldCustLedgEntry.FINDSET(FALSE,FALSE) THEN
          REPEAT
            IF GenJnlApply.CheckAgainstApplnCurrency(
                 NewCVLedgEntryBuf."Currency Code",OldCustLedgEntry."Currency Code",GenJnlLine."Account Type"::Customer,FALSE)
            THEN BEGIN
              IF (OldCustLedgEntry."Posting Date" > ApplyingDate) AND (OldCustLedgEntry."Applies-to ID" <> '') THEN
                ApplyingDate := OldCustLedgEntry."Posting Date";
              TempOldCustLedgEntry := OldCustLedgEntry;
              OnPrepareTempCustLedgEntryOnBeforeTempOldCustLedgEntryInsert(TempOldCustLedgEntry,GenJnlLine);
              TempOldCustLedgEntry.INSERT;
            END;
          UNTIL OldCustLedgEntry.NEXT = 0;

        IF OriginalApply THEN BEGIN  //**4PS.n
          TempOldCustLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" > 0);

          IF TempOldCustLedgEntry.FIND('-') THEN BEGIN
            RemainingAmount := NewCVLedgEntryBuf."Remaining Amount";
            TempOldCustLedgEntry.SETRANGE(Positive);
            TempOldCustLedgEntry.FIND('-');
            REPEAT
              TempOldCustLedgEntry.CALCFIELDS("Remaining Amount");
              TempOldCustLedgEntry.RecalculateAmounts(
                TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
            //IF PaymentToleranceMgt.CheckCalcPmtDiscCVCust(NewCVLedgEntryBuf,TempOldCustLedgEntry,0,FALSE,FALSE) THEN //**4PS.o
              IF PaymentToleranceMgt.CheckCalcPmtDiscCVCust(NewCVLedgEntryBuf,TempOldCustLedgEntry,0,FALSE,FALSE, 0) THEN //**4PS.n
                TempOldCustLedgEntry."Remaining Amount" -= TempOldCustLedgEntry."Remaining Pmt. Disc. Possible"
              //**4PS.sn
              ELSE
                IF PaymentToleranceMgt.CheckCalcPmtDiscCVCust(NewCVLedgEntryBuf,TempOldCustLedgEntry,0,FALSE,FALSE,1) THEN
                  TempOldCustLedgEntry."Remaining Amount" -= TempOldCustLedgEntry."Remain. Pmt. Disc. Possible 2"
                ELSE
                  IF PaymentToleranceMgt.CheckCalcPmtDiscCVCust(NewCVLedgEntryBuf,TempOldCustLedgEntry,0,FALSE,FALSE,2) THEN
                    TempOldCustLedgEntry."Remaining Amount" -= TempOldCustLedgEntry."Remain. Pmt. Disc. Possible 3";
              //**4PS.en
              RemainingAmount += TempOldCustLedgEntry."Remaining Amount";
            UNTIL TempOldCustLedgEntry.NEXT = 0;
            TempOldCustLedgEntry.SETRANGE(Positive,RemainingAmount < 0);
          END ELSE
            TempOldCustLedgEntry.SETRANGE(Positive);

          OnPrepareTempCustLedgEntryOnBeforeExit(GenJnlLine,NewCVLedgEntryBuf,TempOldCustLedgEntry);
          EXIT(TempOldCustLedgEntry.FIND('-'));
        //**4PS.sn
        END ELSE BEGIN
          IF NOT TempOldCustLedgEntry.FIND('-') THEN
            EXIT;
          TempOldCustLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" < 0);
          IF NOT TempOldCustLedgEntry.FINDFIRST THEN BEGIN
            NewCVLedgEntryBuf."Applies-to ID" := '';
            EXIT;
          END;
        END;
        //**4PS.en
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE PostDtldCustLedgEntries@46(GenJnlLine@1000 : Record 81;VAR DtldCVLedgEntryBuf@1001 : Record 383;CustPostingGr@1002 : Record 92;LedgEntryInserted@1012 : Boolean) DtldLedgEntryInserted : Boolean;
    VAR
      TempInvPostBuf@1011 : TEMPORARY Record 49;
      DtldCustLedgEntry@1005 : Record 379;
      AdjAmount@1003 : ARRAY [4] OF Decimal;
      DtldCustLedgEntryNoOffset@1006 : Integer;
      SaveEntryNo@1014 : Integer;
      DimensionManagement@1100528400 : Codeunit 408;
    BEGIN
      IF GenJnlLine."Account Type" <> GenJnlLine."Account Type"::Customer THEN
        EXIT;

      IF DtldCustLedgEntry.FINDLAST THEN
        DtldCustLedgEntryNoOffset := DtldCustLedgEntry."Entry No."
      ELSE
        DtldCustLedgEntryNoOffset := 0;

      DtldCVLedgEntryBuf.RESET;
      IF DtldCVLedgEntryBuf.FINDSET THEN BEGIN
        IF LedgEntryInserted THEN BEGIN
          SaveEntryNo := NextEntryNo;
          NextEntryNo := NextEntryNo + 1;
        END;
        REPEAT
          InsertDtldCustLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,DtldCustLedgEntry,DtldCustLedgEntryNoOffset);

          DimensionManagement.UpdateGenJnlLineDimFromCustLedgEntry(GenJnlLine,DtldCustLedgEntry); //**4PS.n

          UpdateTotalAmounts(TempInvPostBuf,GenJnlLine."Dimension Set ID",DtldCVLedgEntryBuf);
          IF ((DtldCVLedgEntryBuf."Amount (LCY)" <> 0) OR
              (DtldCVLedgEntryBuf."VAT Amount (LCY)" <> 0)) OR
             ((AddCurrencyCode <> '') AND (DtldCVLedgEntryBuf."Additional-Currency Amount" <> 0))
          THEN
            PostDtldCustLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,AdjAmount);
        UNTIL DtldCVLedgEntryBuf.NEXT = 0;
      END;

      CreateGLEntriesForTotalAmounts(
        GenJnlLine,TempInvPostBuf,AdjAmount,SaveEntryNo,CustPostingGr.GetReceivablesAccount,LedgEntryInserted);

      DtldLedgEntryInserted := NOT DtldCVLedgEntryBuf.ISEMPTY;
      DtldCVLedgEntryBuf.DELETEALL;
    END;

    LOCAL PROCEDURE PostDtldCustLedgEntry@82(GenJnlLine@1005 : Record 81;DtldCVLedgEntryBuf@1003 : Record 383;CustPostingGr@1002 : Record 92;VAR AdjAmount@1001 : ARRAY [4] OF Decimal);
    VAR
      AccNo@1006 : Code[20];
    BEGIN
      AccNo := GetDtldCustLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,0,FALSE);
      PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,AdjAmount,FALSE);
    END;

    LOCAL PROCEDURE PostDtldCustLedgEntryUnapply@114(GenJnlLine@1007 : Record 81;DtldCVLedgEntryBuf@1001 : Record 383;CustPostingGr@1000 : Record 92;OriginalTransactionNo@1006 : Integer);
    VAR
      AdjAmount@1004 : ARRAY [4] OF Decimal;
      AccNo@1002 : Code[20];
    BEGIN
      IF (DtldCVLedgEntryBuf."Amount (LCY)" = 0) AND
         (DtldCVLedgEntryBuf."VAT Amount (LCY)" = 0) AND
         ((AddCurrencyCode = '') OR (DtldCVLedgEntryBuf."Additional-Currency Amount" = 0))
      THEN
        EXIT;

      AccNo := GetDtldCustLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,OriginalTransactionNo,TRUE);
      DtldCVLedgEntryBuf."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type"::Sale;
      PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,AdjAmount,TRUE);
    END;

    LOCAL PROCEDURE GetDtldCustLedgEntryAccNo@147(GenJnlLine@1007 : Record 81;DtldCVLedgEntryBuf@1001 : Record 383;CustPostingGr@1000 : Record 92;OriginalTransactionNo@1006 : Integer;Unapply@1012 : Boolean) : Code[20];
    VAR
      GenPostingSetup@1005 : Record 252;
      Currency@1009 : Record 4;
      AmountCondition@1002 : Boolean;
    BEGIN
      OnBeforeGetDtldCustLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,OriginalTransactionNo,Unapply);

      WITH DtldCVLedgEntryBuf DO BEGIN
        AmountCondition := IsDebitAmount(DtldCVLedgEntryBuf,Unapply);
        CASE "Entry Type" OF
          "Entry Type"::"Initial Entry":
            ;
          "Entry Type"::Application:
            ;
          "Entry Type"::"Unrealized Loss",
          "Entry Type"::"Unrealized Gain",
          "Entry Type"::"Realized Loss",
          "Entry Type"::"Realized Gain":
            BEGIN
              GetCurrency(Currency,"Currency Code");
              CheckNonAddCurrCodeOccurred(Currency.Code);
              EXIT(Currency.GetGainLossAccount(DtldCVLedgEntryBuf));
            END;
          "Entry Type"::"Payment Discount":
            EXIT(CustPostingGr.GetPmtDiscountAccount(AmountCondition));
          "Entry Type"::"Payment Discount (VAT Excl.)":
            BEGIN
              TESTFIELD("Gen. Prod. Posting Group");
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              EXIT(GenPostingSetup.GetSalesPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Appln. Rounding":
            EXIT(CustPostingGr.GetApplRoundingAccount(AmountCondition));
          "Entry Type"::"Correction of Remaining Amount":
            EXIT(CustPostingGr.GetRoundingAccount(AmountCondition));
          "Entry Type"::"Payment Discount Tolerance":
            CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                EXIT(CustPostingGr.GetPmtToleranceAccount(AmountCondition));
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                EXIT(CustPostingGr.GetPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Payment Tolerance":
            CASE GLSetup."Payment Tolerance Posting" OF
              GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                EXIT(CustPostingGr.GetPmtToleranceAccount(AmountCondition));
              GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                EXIT(CustPostingGr.GetPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Payment Tolerance (VAT Excl.)":
            BEGIN
              TESTFIELD("Gen. Prod. Posting Group");
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              CASE GLSetup."Payment Tolerance Posting" OF
                GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                  EXIT(GenPostingSetup.GetSalesPmtToleranceAccount(AmountCondition));
                GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                  EXIT(GenPostingSetup.GetSalesPmtDiscountAccount(AmountCondition));
              END;
            END;
          "Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
            BEGIN
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
                GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                  EXIT(GenPostingSetup.GetSalesPmtToleranceAccount(AmountCondition));
                GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                  EXIT(GenPostingSetup.GetSalesPmtDiscountAccount(AmountCondition));
              END;
            END;
          "Entry Type"::"Payment Discount (VAT Adjustment)",
          "Entry Type"::"Payment Tolerance (VAT Adjustment)",
          "Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
            IF Unapply THEN
              PostDtldCustVATAdjustment(GenJnlLine,DtldCVLedgEntryBuf,OriginalTransactionNo);
          //**4PS.sn
          "Entry Type"::"Credit Restriction":
            ;
          //**4PS.en
          ELSE
            FIELDERROR("Entry Type");
        END;
      END;
    END;

    LOCAL PROCEDURE CustUnrealizedVAT@16(GenJnlLine@1015 : Record 81;VAR CustLedgEntry2@1000 : Record 21;SettledAmount@1001 : Decimal);
    VAR
      VATEntry2@1002 : Record 254;
      TaxJurisdiction@1014 : Record 320;
      VATPostingSetup@1017 : Record 325;
      VATPart@1003 : Decimal;
      VATAmount@1004 : Decimal;
      VATBase@1005 : Decimal;
      VATAmountAddCurr@1006 : Decimal;
      VATBaseAddCurr@1007 : Decimal;
      PaidAmount@1008 : Decimal;
      TotalUnrealVATAmountLast@1012 : Decimal;
      TotalUnrealVATAmountFirst@1013 : Decimal;
      SalesVATAccount@1009 : Code[20];
      SalesVATUnrealAccount@1010 : Code[20];
      LastConnectionNo@1011 : Integer;
      GLEntryNo@1016 : Integer;
      IsHandled@1018 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCustUnrealizedVAT(GenJnlLine,CustLedgEntry2,SettledAmount,IsHandled);
      IF IsHandled THEN
        EXIT;

      PaidAmount := CustLedgEntry2."Amount (LCY)" - CustLedgEntry2."Remaining Amt. (LCY)";
      VATEntry2.RESET;
      VATEntry2.SETCURRENTKEY("Transaction No.");
      VATEntry2.SETRANGE("Transaction No.",CustLedgEntry2."Transaction No.");
      IF VATEntry2.FINDSET THEN
        REPEAT
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF VATPostingSetup."Unrealized VAT Type" IN
             [VATPostingSetup."Unrealized VAT Type"::Last,VATPostingSetup."Unrealized VAT Type"::"Last (Fully Paid)"]
          THEN
            TotalUnrealVATAmountLast := TotalUnrealVATAmountLast - VATEntry2."Remaining Unrealized Amount";
          IF VATPostingSetup."Unrealized VAT Type" IN
             [VATPostingSetup."Unrealized VAT Type"::First,VATPostingSetup."Unrealized VAT Type"::"First (Fully Paid)"]
          THEN
            TotalUnrealVATAmountFirst := TotalUnrealVATAmountFirst - VATEntry2."Remaining Unrealized Amount";
        UNTIL VATEntry2.NEXT = 0;
      IF VATEntry2.FINDSET THEN BEGIN
        LastConnectionNo := 0;
        REPEAT
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF LastConnectionNo <> VATEntry2."Sales Tax Connection No." THEN BEGIN
            InsertSummarizedVAT(GenJnlLine);
            LastConnectionNo := VATEntry2."Sales Tax Connection No.";
          END;

          VATPart :=
            VATEntry2.GetUnrealizedVATPart(
              ROUND(SettledAmount / CustLedgEntry2.GetAdjustedCurrencyFactor),
              PaidAmount,
              CustLedgEntry2."Amount (LCY)",
              TotalUnrealVATAmountFirst,
              TotalUnrealVATAmountLast);

          OnCustUnrealizedVATOnAfterVATPartCalculation(
            GenJnlLine,CustLedgEntry2,PaidAmount,TotalUnrealVATAmountFirst,TotalUnrealVATAmountLast,SettledAmount,VATEntry2);

          IF VATPart > 0 THEN BEGIN
            CASE VATEntry2."VAT Calculation Type" OF
              VATEntry2."VAT Calculation Type"::"Normal VAT",
              VATEntry2."VAT Calculation Type"::"Reverse Charge VAT",
              VATEntry2."VAT Calculation Type"::"Full VAT":
                BEGIN
                  SalesVATAccount := VATPostingSetup.GetSalesAccount(FALSE);
                  SalesVATUnrealAccount := VATPostingSetup.GetSalesAccount(TRUE);
                END;
              VATEntry2."VAT Calculation Type"::"Sales Tax":
                BEGIN
                  TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
                  SalesVATAccount := TaxJurisdiction.GetSalesAccount(FALSE);
                  SalesVATUnrealAccount := TaxJurisdiction.GetSalesAccount(TRUE);
                END;
            END;

            IF VATPart = 1 THEN BEGIN
              VATAmount := VATEntry2."Remaining Unrealized Amount";
              VATBase := VATEntry2."Remaining Unrealized Base";
              VATAmountAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Amount";
              VATBaseAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Base";
            END ELSE BEGIN
              VATAmount := ROUND(VATEntry2."Remaining Unrealized Amount" * VATPart,GLSetup."Amount Rounding Precision");
              VATBase := ROUND(VATEntry2."Remaining Unrealized Base" * VATPart,GLSetup."Amount Rounding Precision");
              VATAmountAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Amount" * VATPart,
                  AddCurrency."Amount Rounding Precision");
              VATBaseAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Base" * VATPart,
                  AddCurrency."Amount Rounding Precision");
            END;

            IsHandled := FALSE;
            OnCustUnrealizedVATOnBeforeInitGLEntryVAT(
              GenJnlLine,VATEntry2,VATAmount,VATBase,VATAmountAddCurr,VATBaseAddCurr,IsHandled);
            IF NOT IsHandled THEN
              InitGLEntryVAT(GenJnlLine,SalesVATUnrealAccount,SalesVATAccount,-VATAmount,-VATAmountAddCurr,FALSE);

            GLEntryNo :=
              InitGLEntryVATCopy(GenJnlLine,SalesVATAccount,SalesVATUnrealAccount,VATAmount,VATAmountAddCurr,VATEntry2);

            PostUnrealVATEntry(GenJnlLine,VATEntry2,VATAmount,VATBase,VATAmountAddCurr,VATBaseAddCurr,GLEntryNo);
          END;
        UNTIL VATEntry2.NEXT = 0;

        InsertSummarizedVAT(GenJnlLine);
      END;
    END;

    LOCAL PROCEDURE ApplyVendLedgEntry@4(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1001 : Record 383;GenJnlLine@1002 : Record 81;Vend@1015 : Record 23;OriginalApply@1210190000 : Boolean);
    VAR
      OldVendLedgEntry@1005 : Record 25;
      OldCVLedgEntryBuf@1006 : Record 382;
      NewVendLedgEntry@1008 : Record 25;
      NewCVLedgEntryBuf2@1019 : Record 382;
      TempOldVendLedgEntry@1003 : TEMPORARY Record 25;
      Completed@1009 : Boolean;
      AppliedAmount@1010 : Decimal;
      NewRemainingAmtBeforeAppln@1014 : Decimal;
      ApplyingDate@1017 : Date;
      PmtTolAmtToBeApplied@1020 : Decimal;
      AllApplied@1024 : Boolean;
      IsAmountToApplyCheckHandled@1004 : Boolean;
    BEGIN
      //**4PS.n: extra parameter OriginalApply

      OnBeforeApplyVendLedgEntry(NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,Vend,IsAmountToApplyCheckHandled);
      IF NOT IsAmountToApplyCheckHandled THEN
        IF NewCVLedgEntryBuf."Amount to Apply" = 0 THEN
          EXIT;

      AllApplied := TRUE;
      IF (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') AND
         NOT
         ((Vend."Application Method" = Vend."Application Method"::"Apply to Oldest") AND
          GenJnlLine."Allow Application")
      THEN
        EXIT;

      PmtTolAmtToBeApplied := 0;
      NewRemainingAmtBeforeAppln := NewCVLedgEntryBuf."Remaining Amount";
      NewCVLedgEntryBuf2 := NewCVLedgEntryBuf;

      ApplyingDate := GenJnlLine."Posting Date";

      IF NOT PrepareTempVendLedgEntry(GenJnlLine,NewCVLedgEntryBuf,TempOldVendLedgEntry,Vend,ApplyingDate,OriginalApply) THEN
        EXIT;

      GenJnlLine."Posting Date" := ApplyingDate;
      //**4PS.sn
      IF GenJnlLine."Posting Date" < NewCVLedgEntryBuf."Posting Date" THEN
        ERROR(
          Text11012001,
          GenJnlLine.FIELDCAPTION("Posting Date"),
          NewCVLedgEntryBuf.FIELDCAPTION("Posting Date"),
          NewVendLedgEntry.TABLECAPTION,
          NewCVLedgEntryBuf.FIELDCAPTION("Document No."),
          NewCVLedgEntryBuf."Document No.");
      //**4PS.en
      // Apply the new entry (Payment) to the old entries (Invoices) one at a time
      REPEAT
        //**4PS.sn
        IF GenJnlLine."Posting Date" < TempOldVendLedgEntry."Posting Date" THEN
          ERROR(
            Text11012001,
            GenJnlLine.FIELDCAPTION("Posting Date"),
            TempOldVendLedgEntry.FIELDCAPTION("Posting Date"),
            TempOldVendLedgEntry.TABLECAPTION,
            TempOldVendLedgEntry.FIELDCAPTION("Document No."),
            TempOldVendLedgEntry."Document No.");
        //**4PS.en
        TempOldVendLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");

        OldCVLedgEntryBuf.CopyFromVendLedgEntry(TempOldVendLedgEntry);
        TempOldVendLedgEntry.COPYFILTER(Positive,OldCVLedgEntryBuf.Positive);

        PostApply(
          GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,NewCVLedgEntryBuf,NewCVLedgEntryBuf2,
      //  Vend."Block Payment Tolerance",AllApplied,AppliedAmount,PmtTolAmtToBeApplied); //**4PS.o
          Vend."Block Payment Tolerance",AllApplied,AppliedAmount,PmtTolAmtToBeApplied,OriginalApply,FALSE); //**4PS.n

        // Update the Old Entry
        TempOldVendLedgEntry.CopyFromCVLedgEntryBuffer(OldCVLedgEntryBuf);
        OldVendLedgEntry := TempOldVendLedgEntry;
        //**4PS.so
        //OldVendLedgEntry."Applies-to ID" := '';
        //OldVendLedgEntry."Amount to Apply" := 0;
        //**4PS.eo
        //**4PS.sn
        IF OriginalApply THEN BEGIN
          CASE PaymType OF
            PaymType::Free:
              OldVendLedgEntry."Applies-to ID" := '';
            PaymType::B:
              OldVendLedgEntry."Applies-to ID B" := '';
            PaymType::Tax:
              OldVendLedgEntry."Applies-to ID Tax" := '';
          END;
          OldVendLedgEntry."Amount to Apply" := 0;
        END;
        IF (PaymType <> PaymType::Free) AND RestoreOldPmtDisc THEN BEGIN  //**17734.sn
          OldVendLedgEntry."Remaining Pmt. Disc. Possible" := OldPmtDisc1;
          OldVendLedgEntry."Remain. Pmt. Disc. Possible 2" := OldPmtDisc2;
          OldVendLedgEntry."Remain. Pmt. Disc. Possible 3" := OldPmtDisc3;
        END ELSE BEGIN  //**17734.en
          OldVendLedgEntry."Remaining Pmt. Disc. Possible" := 0;
          OldVendLedgEntry."Remain. Pmt. Disc. Possible 2" := 0;
          OldVendLedgEntry."Remain. Pmt. Disc. Possible 3" := 0;
        END;
        //**4PS.en
        OldVendLedgEntry.MODIFY;

        OnAfterOldVendLedgEntryModify(OldVendLedgEntry);

        IF GLSetup."Unrealized VAT" OR
           (GLSetup."Prepayment Unrealized VAT" AND TempOldVendLedgEntry.Prepayment)
        THEN
          IF IsNotPayment(TempOldVendLedgEntry."Document Type") THEN BEGIN
            TempOldVendLedgEntry.RecalculateAmounts(
              NewCVLedgEntryBuf."Currency Code",TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
            OnApplyVendLedgEntryOnAfterRecalculateAmounts(TempOldVendLedgEntry,OldVendLedgEntry,NewCVLedgEntryBuf,GenJnlLine);
            VendUnrealizedVAT(
              GenJnlLine,
              TempOldVendLedgEntry,
              CurrExchRate.ExchangeAmount(
                AppliedAmount,NewCVLedgEntryBuf."Currency Code",
      //        TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date")); //**4PS.o
                TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date",FALSE)); //**4PS.n
          END;

        TempOldVendLedgEntry.DELETE;

      //Completed := FindNextOldVendLedgEntryToApply(GenJnlLine,TempOldVendLedgEntry,NewCVLedgEntryBuf);  //**4PS.o
        Completed := FindNextOldVendLedgEntryToApply(GenJnlLine,TempOldVendLedgEntry,NewCVLedgEntryBuf,OriginalApply);//**4PS.n
      UNTIL Completed;

      DtldCVLedgEntryBuf.SETCURRENTKEY("CV Ledger Entry No.","Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("CV Ledger Entry No.",NewCVLedgEntryBuf."Entry No.");
      DtldCVLedgEntryBuf.SETRANGE(
        "Entry Type",
        DtldCVLedgEntryBuf."Entry Type"::Application);
      DtldCVLedgEntryBuf.CALCSUMS("Amount (LCY)",Amount);

      CalcCurrencyUnrealizedGainLoss(
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,DtldCVLedgEntryBuf.Amount,NewRemainingAmtBeforeAppln);

      CalcAmtLCYAdjustment(NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

      NewCVLedgEntryBuf."Applies-to ID" := '';
      NewCVLedgEntryBuf."Amount to Apply" := 0;

      IF GLSetup."Unrealized VAT" OR
         (GLSetup."Prepayment Unrealized VAT" AND NewCVLedgEntryBuf.Prepayment)
      THEN
        IF IsNotPayment(NewCVLedgEntryBuf."Document Type") AND
           (NewRemainingAmtBeforeAppln - NewCVLedgEntryBuf."Remaining Amount" <> 0)
        THEN BEGIN
          NewVendLedgEntry.CopyFromCVLedgEntryBuffer(NewCVLedgEntryBuf);
          CheckUnrealizedVend := TRUE;
          UnrealizedVendLedgEntry := NewVendLedgEntry;
          UnrealizedVendLedgEntry.CALCFIELDS("Amount (LCY)","Original Amt. (LCY)");
          UnrealizedRemainingAmountVend := -(NewRemainingAmtBeforeAppln - NewVendLedgEntry."Remaining Amount");
        END;
    END;

    LOCAL PROCEDURE FindNextOldVendLedgEntryToApply@306(GenJnlLine@1002 : Record 81;VAR TempOldVendLedgEntry@1001 : TEMPORARY Record 25;NewCVLedgEntryBuf@1000 : Record 382;OriginalApply@1100525000 : Boolean) Completed : Boolean;
    VAR
      IsHandled@1003 : Boolean;
    BEGIN
      OnBeforeFindNextOldVendLedgEntryToApply(GenJnlLine,TempOldVendLedgEntry,NewCVLedgEntryBuf,Completed,IsHandled);
      IF IsHandled THEN
        EXIT(Completed);

      IF GenJnlLine."Applies-to Doc. No." <> '' THEN
        Completed := TRUE
      ELSE
        IF TempOldVendLedgEntry.GETFILTER(Positive) <> '' THEN
        //**4PS.so
        //IF TempOldVendLedgEntry.NEXT = 1 THEN
        //  Completed := FALSE
        //ELSE BEGIN
        //**4PS.eo
        //**4PS.sn
          IF TempOldVendLedgEntry.NEXT = 1 THEN BEGIN
            Completed := FALSE;
            IF (NOT OriginalApply) AND (NewCVLedgEntryBuf."Remaining Amount" = 0) THEN
              Completed := TRUE;
          END ELSE BEGIN
            IF OriginalApply THEN BEGIN
        //**4PS.en
              TempOldVendLedgEntry.SETRANGE(Positive);
              TempOldVendLedgEntry.FIND('-');
              TempOldVendLedgEntry.CALCFIELDS("Remaining Amount");
              Completed := TempOldVendLedgEntry."Remaining Amount" * NewCVLedgEntryBuf."Remaining Amount" >= 0;
            //**4PS.sn
            END ELSE BEGIN
              Completed := TRUE;
            END;
            //**4PS.en
          END
        ELSE
          IF NewCVLedgEntryBuf.Open THEN
            Completed := TempOldVendLedgEntry.NEXT = 0
          ELSE
            Completed := TRUE;
    END;

    LOCAL PROCEDURE ApplyEmplLedgEntry@141(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1001 : Record 383;GenJnlLine@1002 : Record 81;Employee@1015 : Record 5200);
    VAR
      OldEmplLedgEntry@1005 : Record 5222;
      OldCVLedgEntryBuf@1006 : Record 382;
      NewCVLedgEntryBuf2@1019 : Record 382;
      TempOldEmplLedgEntry@1003 : TEMPORARY Record 5222;
      Completed@1009 : Boolean;
      AppliedAmount@1010 : Decimal;
      ApplyingDate@1017 : Date;
      PmtTolAmtToBeApplied@1004 : Decimal;
      AllApplied@1024 : Boolean;
    BEGIN
      IF NewCVLedgEntryBuf."Amount to Apply" = 0 THEN
        EXIT;

      AllApplied := TRUE;
      IF (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') AND
         NOT
         ((Employee."Application Method" = Employee."Application Method"::"Apply to Oldest") AND
          GenJnlLine."Allow Application")
      THEN
        EXIT;

      PmtTolAmtToBeApplied := 0;
      NewCVLedgEntryBuf2 := NewCVLedgEntryBuf;

      ApplyingDate := GenJnlLine."Posting Date";

      IF NOT PrepareTempEmplLedgEntry(GenJnlLine,NewCVLedgEntryBuf,TempOldEmplLedgEntry,Employee,ApplyingDate) THEN
        EXIT;

      GenJnlLine."Posting Date" := ApplyingDate;

      // Apply the new entry (Payment) to the old entries one at a time
      REPEAT
        TempOldEmplLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        OldCVLedgEntryBuf.CopyFromEmplLedgEntry(TempOldEmplLedgEntry);
        TempOldEmplLedgEntry.COPYFILTER(Positive,OldCVLedgEntryBuf.Positive);

        PostApply(
          GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,NewCVLedgEntryBuf,NewCVLedgEntryBuf2,
        //TRUE,AllApplied,AppliedAmount,PmtTolAmtToBeApplied); //**4PS.o
          TRUE,AllApplied,AppliedAmount,PmtTolAmtToBeApplied,TRUE,FALSE); //**4PS.n

        // Update the Old Entry
        TempOldEmplLedgEntry.CopyFromCVLedgEntryBuffer(OldCVLedgEntryBuf);
        OldEmplLedgEntry := TempOldEmplLedgEntry;
        OldEmplLedgEntry."Applies-to ID" := '';
        OldEmplLedgEntry."Amount to Apply" := 0;
        OldEmplLedgEntry.MODIFY;

        TempOldEmplLedgEntry.DELETE;

        Completed := FindNextOldEmplLedgEntryToApply(GenJnlLine,TempOldEmplLedgEntry,NewCVLedgEntryBuf);
      UNTIL Completed;

      DtldCVLedgEntryBuf.SETCURRENTKEY("CV Ledger Entry No.","Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("CV Ledger Entry No.",NewCVLedgEntryBuf."Entry No.");
      DtldCVLedgEntryBuf.SETRANGE(
        "Entry Type",
        DtldCVLedgEntryBuf."Entry Type"::Application);
      DtldCVLedgEntryBuf.CALCSUMS("Amount (LCY)",Amount);

      NewCVLedgEntryBuf."Applies-to ID" := '';
      NewCVLedgEntryBuf."Amount to Apply" := 0;
    END;

    LOCAL PROCEDURE FindNextOldEmplLedgEntryToApply@304(GenJnlLine@1002 : Record 81;VAR TempOldEmplLedgEntry@1001 : TEMPORARY Record 5222;NewCVLedgEntryBuf@1000 : Record 382) Completed : Boolean;
    VAR
      IsHandled@1003 : Boolean;
    BEGIN
      OnBeforeFindNextOldEmplLedgEntryToApply(GenJnlLine,TempOldEmplLedgEntry,NewCVLedgEntryBuf,Completed,IsHandled);
      IF IsHandled THEN
        EXIT(Completed);

      IF GenJnlLine."Applies-to Doc. No." <> '' THEN
        Completed := TRUE
      ELSE
        IF TempOldEmplLedgEntry.GETFILTER(Positive) <> '' THEN
          IF TempOldEmplLedgEntry.NEXT = 1 THEN
            Completed := FALSE
          ELSE BEGIN
            TempOldEmplLedgEntry.SETRANGE(Positive);
            TempOldEmplLedgEntry.FIND('-');
            TempOldEmplLedgEntry.CALCFIELDS("Remaining Amount");
            Completed := TempOldEmplLedgEntry."Remaining Amount" * NewCVLedgEntryBuf."Remaining Amount" >= 0;
          END
        ELSE
          IF NewCVLedgEntryBuf.Open THEN
            Completed := TempOldEmplLedgEntry.NEXT = 0
          ELSE
            Completed := TRUE;
    END;

    [External]
    PROCEDURE VendPostApplyVendLedgEntry@66(VAR GenJnlLinePostApply@1000 : Record 81;VAR VendLedgEntryPostApply@1001 : Record 25);
    VAR
      Vend@1002 : Record 23;
      VendPostingGr@1007 : Record 93;
      VendLedgEntry@1006 : Record 25;
      DtldVendLedgEntry@1003 : Record 380;
      TempDtldCVLedgEntryBuf@1004 : TEMPORARY Record 383;
      CVLedgEntryBuf@1005 : Record 382;
      GenJnlLine@1008 : Record 81;
      DtldLedgEntryInserted@1009 : Boolean;
    BEGIN
      GenJnlLine := GenJnlLinePostApply;
      VendLedgEntry.TRANSFERFIELDS(VendLedgEntryPostApply);
      WITH GenJnlLine DO BEGIN
        "Source Currency Code" := VendLedgEntryPostApply."Currency Code";
        "Applies-to ID" := VendLedgEntryPostApply."Applies-to ID";

        GenJnlCheckLine.CheckPostingPeriod(FALSE);  //NAVNO
        GenJnlCheckLine.RunCheck(GenJnlLine);
        GenJnlCheckLine.CheckPostingPeriod(TRUE);  //NAVNO

        IF NextEntryNo = 0 THEN
          StartPosting(GenJnlLine)
        ELSE
          ContinuePosting(GenJnlLine);

        Vend.GET(VendLedgEntry."Vendor No.");
        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",TRUE);

        OnVendPostApplyVendLedgEntryOnBeforeCheckPostingGroup(GenJnlLine,Vend);
        IF "Posting Group" = '' THEN BEGIN
          Vend.TESTFIELD("Vendor Posting Group");
          "Posting Group" := Vend."Vendor Posting Group";
        END;
        VendPostingGr.GET("Posting Group");
        VendPostingGr.GetPayablesAccount;

        DtldVendLedgEntry.LOCKTABLE;
        VendLedgEntry.LOCKTABLE;

        // Post the application
        VendLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        CVLedgEntryBuf.CopyFromVendLedgEntry(VendLedgEntry);
        //ApplyVendLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Vend); //**4PS.o
        ApplyVendLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Vend,FALSE); //**4PS.n
        VendLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
        VendLedgEntry.MODIFY(TRUE);

        // Post Dtld vendor entry
        DtldLedgEntryInserted := PostDtldVendLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,VendPostingGr,FALSE);

        CheckPostUnrealizedVAT(GenJnlLine,TRUE);

        IF DtldLedgEntryInserted THEN
          IF IsTempGLEntryBufEmpty THEN
            DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);

        FinishPosting(GenJnlLine);
      END;
    END;

    [External]
    PROCEDURE EmplPostApplyEmplLedgEntry@138(VAR GenJnlLinePostApply@1000 : Record 81;VAR EmplLedgEntryPostApply@1001 : Record 5222);
    VAR
      Empl@1002 : Record 5200;
      EmplPostingGr@1007 : Record 5221;
      EmplLedgEntry@1006 : Record 5222;
      DtldEmplLedgEntry@1003 : Record 5223;
      TempDtldCVLedgEntryBuf@1004 : TEMPORARY Record 383;
      CVLedgEntryBuf@1005 : Record 382;
      GenJnlLine@1008 : Record 81;
      DtldLedgEntryInserted@1009 : Boolean;
    BEGIN
      GenJnlLine := GenJnlLinePostApply;
      EmplLedgEntry.TRANSFERFIELDS(EmplLedgEntryPostApply);
      WITH GenJnlLine DO BEGIN
        "Source Currency Code" := EmplLedgEntryPostApply."Currency Code";
        "Applies-to ID" := EmplLedgEntryPostApply."Applies-to ID";

        GenJnlCheckLine.RunCheck(GenJnlLine);

        IF NextEntryNo = 0 THEN
          StartPosting(GenJnlLine)
        ELSE
          ContinuePosting(GenJnlLine);

        Empl.GET(EmplLedgEntry."Employee No.");

        IF "Posting Group" = '' THEN BEGIN
          Empl.TESTFIELD("Employee Posting Group");
          "Posting Group" := Empl."Employee Posting Group";
        END;
        EmplPostingGr.GET("Posting Group");
        EmplPostingGr.GetPayablesAccount;

        DtldEmplLedgEntry.LOCKTABLE;
        EmplLedgEntry.LOCKTABLE;

        // Post the application
        EmplLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        CVLedgEntryBuf.CopyFromEmplLedgEntry(EmplLedgEntry);
        ApplyEmplLedgEntry(
          CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Empl);
        EmplLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
        EmplLedgEntry.MODIFY(TRUE);

        // Post Dtld vendor entry
        DtldLedgEntryInserted := PostDtldEmplLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,EmplPostingGr,FALSE);

        CheckPostUnrealizedVAT(GenJnlLine,TRUE);

        IF DtldLedgEntryInserted THEN
          IF IsTempGLEntryBufEmpty THEN
            DtldEmplLedgEntry.SetZeroTransNo(NextTransactionNo);

        FinishPosting(GenJnlLine);
      END;
    END;

    LOCAL PROCEDURE PrepareTempVendLedgEntry@119(VAR GenJnlLine@1004 : Record 81;VAR NewCVLedgEntryBuf@1003 : Record 382;VAR TempOldVendLedgEntry@1002 : TEMPORARY Record 25;Vend@1001 : Record 23;VAR ApplyingDate@1000 : Date;OriginalApply@1100528500 : Boolean) : Boolean;
    VAR
      OldVendLedgEntry@1018 : Record 25;
      PurchSetup@1013 : Record 312;
      GenJnlApply@1012 : Codeunit 225;
      RemainingAmount@1009 : Decimal;
    BEGIN
      OnBeforePrepareTempVendLedgEntry(GenJnlLine,NewCVLedgEntryBuf);

      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        // Find the entry to be applied to
        OldVendLedgEntry.RESET;
        OldVendLedgEntry.SETCURRENTKEY("Document No.");
        OldVendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        OldVendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldVendLedgEntry.SETRANGE("Vendor No.",NewCVLedgEntryBuf."CV No.");
        OldVendLedgEntry.SETRANGE(Open,TRUE);
        OnPrepareTempVendLedgEntryOnAfterSetFilters(OldVendLedgEntry,GenJnlLine,NewCVLedgEntryBuf);
        OldVendLedgEntry.FINDFIRST;
        OldVendLedgEntry.TESTFIELD(Positive,NOT NewCVLedgEntryBuf.Positive);
        IF OldVendLedgEntry."Posting Date" > ApplyingDate THEN
          ApplyingDate := OldVendLedgEntry."Posting Date";
        GenJnlApply.CheckAgainstApplnCurrency(
          NewCVLedgEntryBuf."Currency Code",OldVendLedgEntry."Currency Code",GenJnlLine."Account Type"::Vendor,TRUE);
        TempOldVendLedgEntry := OldVendLedgEntry;
        OnPrepareTempVendLedgEntryOnBeforeTempOldVendLedgEntryInsert(TempOldVendLedgEntry,GenJnlLine);
        TempOldVendLedgEntry.INSERT;
      END ELSE BEGIN
        // Find the first old entry (Invoice) which the new entry (Payment) should apply to
        OldVendLedgEntry.RESET;
        OldVendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive,"Due Date");
        TempOldVendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive,"Due Date");
        OldVendLedgEntry.SETRANGE("Vendor No.",NewCVLedgEntryBuf."CV No.");
        OldVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        OldVendLedgEntry.SETRANGE(Open,TRUE);
        OldVendLedgEntry.SETFILTER("Entry No.",'<>%1',NewCVLedgEntryBuf."Entry No.");
        IF NOT (Vend."Application Method" = Vend."Application Method"::"Apply to Oldest") THEN
          OldVendLedgEntry.SETFILTER("Amount to Apply",'<>%1',0);

        IF Vend."Application Method" = Vend."Application Method"::"Apply to Oldest" THEN
          OldVendLedgEntry.SETFILTER("Posting Date",'..%1',GenJnlLine."Posting Date");

        //**4PS.sn
        IF NOT OldVendLedgEntry.FINDFIRST THEN BEGIN
          PaymType := PaymType::Tax;
          OldVendLedgEntry.SETRANGE("Applies-to ID");
          OldVendLedgEntry.SETRANGE("Applies-to ID Tax",NewCVLedgEntryBuf."Applies-to ID");
          IF NOT OldVendLedgEntry.FINDFIRST THEN BEGIN
            PaymType := PaymType::B;
            OldVendLedgEntry.SETRANGE("Applies-to ID Tax");
            OldVendLedgEntry.SETRANGE("Applies-to ID B",NewCVLedgEntryBuf."Applies-to ID");
          END;
        END ELSE
          PaymType := PaymType::Free;
        //**4PS.en
        // Check and Move Ledger Entries to Temp
        PurchSetup.GET;
        IF PurchSetup."Appln. between Currencies" = PurchSetup."Appln. between Currencies"::None THEN
          OldVendLedgEntry.SETRANGE("Currency Code",NewCVLedgEntryBuf."Currency Code");
        IF OldVendLedgEntry.FINDSET(FALSE,FALSE) THEN
          REPEAT
            IF GenJnlApply.CheckAgainstApplnCurrency(
                 NewCVLedgEntryBuf."Currency Code",OldVendLedgEntry."Currency Code",GenJnlLine."Account Type"::Vendor,FALSE)
            THEN BEGIN
              IF (OldVendLedgEntry."Posting Date" > ApplyingDate) AND (OldVendLedgEntry."Applies-to ID" <> '') THEN
                ApplyingDate := OldVendLedgEntry."Posting Date";
              TempOldVendLedgEntry := OldVendLedgEntry;
              OnPrepareTempVendLedgEntryOnBeforeTempOldVendLedgEntryInsert(TempOldVendLedgEntry,GenJnlLine);
              TempOldVendLedgEntry.INSERT;
            END;
          UNTIL OldVendLedgEntry.NEXT = 0;

        IF OriginalApply THEN BEGIN  //**4PS.n
          TempOldVendLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" > 0);

          IF TempOldVendLedgEntry.FIND('-') THEN BEGIN
            RemainingAmount := NewCVLedgEntryBuf."Remaining Amount";
            TempOldVendLedgEntry.SETRANGE(Positive);
            TempOldVendLedgEntry.FIND('-');
            REPEAT
              TempOldVendLedgEntry.CALCFIELDS("Remaining Amount");
              TempOldVendLedgEntry.RecalculateAmounts(
                TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
            //IF PaymentToleranceMgt.CheckCalcPmtDiscCVVend(NewCVLedgEntryBuf,TempOldVendLedgEntry,0,FALSE,FALSE) THEN //**4PS.o
              IF PaymentToleranceMgt.CheckCalcPmtDiscCVVend(NewCVLedgEntryBuf,TempOldVendLedgEntry,0,FALSE,FALSE,0) THEN //**4PS.n
                TempOldVendLedgEntry."Remaining Amount" -= TempOldVendLedgEntry."Remaining Pmt. Disc. Possible"
              //**4PS.sn
              ELSE
                IF PaymentToleranceMgt.CheckCalcPmtDiscCVVend(NewCVLedgEntryBuf,TempOldVendLedgEntry,0,FALSE,FALSE,1) THEN
                  TempOldVendLedgEntry."Remaining Amount" -= TempOldVendLedgEntry."Remain. Pmt. Disc. Possible 2"
                ELSE
                  IF PaymentToleranceMgt.CheckCalcPmtDiscCVVend(NewCVLedgEntryBuf,TempOldVendLedgEntry,0,FALSE,FALSE,2) THEN
                    TempOldVendLedgEntry."Remaining Amount" -= TempOldVendLedgEntry."Remain. Pmt. Disc. Possible 3";
              //**4PS.en
              RemainingAmount += TempOldVendLedgEntry."Remaining Amount";
            UNTIL TempOldVendLedgEntry.NEXT = 0;
            TempOldVendLedgEntry.SETRANGE(Positive,RemainingAmount < 0);
          END ELSE
            TempOldVendLedgEntry.SETRANGE(Positive);

          OnPrepareTempVendLedgEntryOnBeforeExit(GenJnlLine,NewCVLedgEntryBuf,TempOldVendLedgEntry);
          EXIT(TempOldVendLedgEntry.FIND('-'));
        //**4PS.sn
        END ELSE BEGIN
          TempOldVendLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" < 0);
          IF NOT TempOldVendLedgEntry.FINDFIRST THEN BEGIN
            NewCVLedgEntryBuf."Applies-to ID" := '';
            EXIT;
          END;
        END;
        //**4PS.en
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE PrepareTempEmplLedgEntry@145(GenJnlLine@1004 : Record 81;VAR NewCVLedgEntryBuf@1003 : Record 382;VAR TempOldEmplLedgEntry@1002 : TEMPORARY Record 5222;Employee@1001 : Record 5200;VAR ApplyingDate@1000 : Date) : Boolean;
    VAR
      OldEmplLedgEntry@1018 : Record 5222;
      RemainingAmount@1009 : Decimal;
    BEGIN
      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        // Find the entry to be applied to
        OldEmplLedgEntry.RESET;
        OldEmplLedgEntry.SETCURRENTKEY("Document No.");
        OldEmplLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldEmplLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        OldEmplLedgEntry.SETRANGE("Employee No.",NewCVLedgEntryBuf."CV No.");
        OldEmplLedgEntry.SETRANGE(Open,TRUE);
        OldEmplLedgEntry.FINDFIRST;
        OldEmplLedgEntry.TESTFIELD(Positive,NOT NewCVLedgEntryBuf.Positive);
        IF OldEmplLedgEntry."Posting Date" > ApplyingDate THEN
          ApplyingDate := OldEmplLedgEntry."Posting Date";
        TempOldEmplLedgEntry := OldEmplLedgEntry;
        TempOldEmplLedgEntry.INSERT;
      END ELSE BEGIN
        // Find the first old entry which the new entry (Payment) should apply to
        OldEmplLedgEntry.RESET;
        OldEmplLedgEntry.SETCURRENTKEY("Employee No.","Applies-to ID",Open,Positive);
        TempOldEmplLedgEntry.SETCURRENTKEY("Employee No.","Applies-to ID",Open,Positive);
        OldEmplLedgEntry.SETRANGE("Employee No.",NewCVLedgEntryBuf."CV No.");
        OldEmplLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        OldEmplLedgEntry.SETRANGE(Open,TRUE);
        OldEmplLedgEntry.SETFILTER("Entry No.",'<>%1',NewCVLedgEntryBuf."Entry No.");
        IF NOT (Employee."Application Method" = Employee."Application Method"::"Apply to Oldest") THEN
          OldEmplLedgEntry.SETFILTER("Amount to Apply",'<>%1',0);

        IF Employee."Application Method" = Employee."Application Method"::"Apply to Oldest" THEN
          OldEmplLedgEntry.SETFILTER("Posting Date",'..%1',GenJnlLine."Posting Date");

        OldEmplLedgEntry.SETRANGE("Currency Code",NewCVLedgEntryBuf."Currency Code");
        IF OldEmplLedgEntry.FINDSET(FALSE,FALSE) THEN
          REPEAT
            IF (OldEmplLedgEntry."Posting Date" > ApplyingDate) AND (OldEmplLedgEntry."Applies-to ID" <> '') THEN
              ApplyingDate := OldEmplLedgEntry."Posting Date";
            TempOldEmplLedgEntry := OldEmplLedgEntry;
            TempOldEmplLedgEntry.INSERT;
          UNTIL OldEmplLedgEntry.NEXT = 0;

        TempOldEmplLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" > 0);

        IF TempOldEmplLedgEntry.FIND('-') THEN BEGIN
          RemainingAmount := NewCVLedgEntryBuf."Remaining Amount";
          TempOldEmplLedgEntry.SETRANGE(Positive);
          TempOldEmplLedgEntry.FIND('-');
          REPEAT
            TempOldEmplLedgEntry.CALCFIELDS("Remaining Amount");
            RemainingAmount += TempOldEmplLedgEntry."Remaining Amount";
          UNTIL TempOldEmplLedgEntry.NEXT = 0;
          TempOldEmplLedgEntry.SETRANGE(Positive,RemainingAmount < 0);
        END ELSE
          TempOldEmplLedgEntry.SETRANGE(Positive);
        EXIT(TempOldEmplLedgEntry.FIND('-'));
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE PostDtldVendLedgEntries@32(GenJnlLine@1000 : Record 81;VAR DtldCVLedgEntryBuf@1001 : Record 383;VendPostingGr@1002 : Record 93;LedgEntryInserted@1011 : Boolean) DtldLedgEntryInserted : Boolean;
    VAR
      TempInvPostBuf@1007 : TEMPORARY Record 49;
      DtldVendLedgEntry@1004 : Record 380;
      AdjAmount@1012 : ARRAY [4] OF Decimal;
      DtldVendLedgEntryNoOffset@1005 : Integer;
      SaveEntryNo@1013 : Integer;
      DimensionManagement@1100528400 : Codeunit 408;
    BEGIN
      IF GenJnlLine."Account Type" <> GenJnlLine."Account Type"::Vendor THEN
        EXIT;

      IF DtldVendLedgEntry.FINDLAST THEN
        DtldVendLedgEntryNoOffset := DtldVendLedgEntry."Entry No."
      ELSE
        DtldVendLedgEntryNoOffset := 0;

      DtldCVLedgEntryBuf.RESET;
      IF DtldCVLedgEntryBuf.FINDSET THEN BEGIN
        IF LedgEntryInserted THEN BEGIN
          SaveEntryNo := NextEntryNo;
          NextEntryNo := NextEntryNo + 1;
        END;
        REPEAT
          InsertDtldVendLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,DtldVendLedgEntry,DtldVendLedgEntryNoOffset);

          DimensionManagement.UpdateGenJnlLineDimFromVendLedgEntry(GenJnlLine,DtldVendLedgEntry); //**4PS.n

          UpdateTotalAmounts(TempInvPostBuf,GenJnlLine."Dimension Set ID",DtldCVLedgEntryBuf);
          IF ((DtldCVLedgEntryBuf."Amount (LCY)" <> 0) OR
              (DtldCVLedgEntryBuf."VAT Amount (LCY)" <> 0)) OR
             ((AddCurrencyCode <> '') AND (DtldCVLedgEntryBuf."Additional-Currency Amount" <> 0))
          THEN
            PostDtldVendLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,AdjAmount);
        UNTIL DtldCVLedgEntryBuf.NEXT = 0;
      END;

      CreateGLEntriesForTotalAmounts(
        GenJnlLine,TempInvPostBuf,AdjAmount,SaveEntryNo,VendPostingGr.GetPayablesAccount,LedgEntryInserted);

      DtldLedgEntryInserted := NOT DtldCVLedgEntryBuf.ISEMPTY;
      DtldCVLedgEntryBuf.DELETEALL;
    END;

    LOCAL PROCEDURE PostDtldVendLedgEntry@81(GenJnlLine@1000 : Record 81;DtldCVLedgEntryBuf@1002 : Record 383;VendPostingGr@1006 : Record 93;VAR AdjAmount@1003 : ARRAY [4] OF Decimal);
    VAR
      AccNo@1005 : Code[20];
    BEGIN
      AccNo := GetDtldVendLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,0,FALSE);
      PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,AdjAmount,FALSE);
    END;

    LOCAL PROCEDURE PostDtldVendLedgEntryUnapply@69(GenJnlLine@1007 : Record 81;DtldCVLedgEntryBuf@1001 : Record 383;VendPostingGr@1000 : Record 93;OriginalTransactionNo@1006 : Integer);
    VAR
      AccNo@1002 : Code[20];
      AdjAmount@1003 : ARRAY [4] OF Decimal;
    BEGIN
      IF (DtldCVLedgEntryBuf."Amount (LCY)" = 0) AND
         (DtldCVLedgEntryBuf."VAT Amount (LCY)" = 0) AND
         ((AddCurrencyCode = '') OR (DtldCVLedgEntryBuf."Additional-Currency Amount" = 0))
      THEN
        EXIT;

      AccNo := GetDtldVendLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,OriginalTransactionNo,TRUE);
      DtldCVLedgEntryBuf."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type"::Purchase;
      PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,AdjAmount,TRUE);
    END;

    LOCAL PROCEDURE GetDtldVendLedgEntryAccNo@56(GenJnlLine@1000 : Record 81;DtldCVLedgEntryBuf@1002 : Record 383;VendPostingGr@1006 : Record 93;OriginalTransactionNo@1003 : Integer;Unapply@1001 : Boolean) : Code[20];
    VAR
      Currency@1008 : Record 4;
      GenPostingSetup@1007 : Record 252;
      AmountCondition@1004 : Boolean;
    BEGIN
      OnBeforeGetDtldVendLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,OriginalTransactionNo,Unapply);

      WITH DtldCVLedgEntryBuf DO BEGIN
        AmountCondition := IsDebitAmount(DtldCVLedgEntryBuf,Unapply);
        CASE "Entry Type" OF
          "Entry Type"::"Initial Entry":
            ;
          "Entry Type"::Application:
            ;
          "Entry Type"::"Unrealized Loss",
          "Entry Type"::"Unrealized Gain",
          "Entry Type"::"Realized Loss",
          "Entry Type"::"Realized Gain":
            BEGIN
              GetCurrency(Currency,"Currency Code");
              CheckNonAddCurrCodeOccurred(Currency.Code);
              EXIT(Currency.GetGainLossAccount(DtldCVLedgEntryBuf));
            END;
          "Entry Type"::"Payment Discount":
            EXIT(VendPostingGr.GetPmtDiscountAccount(AmountCondition));
          "Entry Type"::"Payment Discount (VAT Excl.)":
            BEGIN
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              EXIT(GenPostingSetup.GetPurchPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Appln. Rounding":
            EXIT(VendPostingGr.GetApplRoundingAccount(AmountCondition));
          "Entry Type"::"Correction of Remaining Amount":
            EXIT(VendPostingGr.GetRoundingAccount(AmountCondition));
          "Entry Type"::"Payment Discount Tolerance":
            CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                EXIT(VendPostingGr.GetPmtToleranceAccount(AmountCondition));
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                EXIT(VendPostingGr.GetPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Payment Tolerance":
            CASE GLSetup."Payment Tolerance Posting" OF
              GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                EXIT(VendPostingGr.GetPmtToleranceAccount(AmountCondition));
              GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                EXIT(VendPostingGr.GetPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Payment Tolerance (VAT Excl.)":
            BEGIN
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              CASE GLSetup."Payment Tolerance Posting" OF
                GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                  EXIT(GenPostingSetup.GetPurchPmtToleranceAccount(AmountCondition));
                GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                  EXIT(GenPostingSetup.GetPurchPmtDiscountAccount(AmountCondition));
              END;
            END;
          "Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
            BEGIN
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
                GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                  EXIT(GenPostingSetup.GetPurchPmtToleranceAccount(AmountCondition));
                GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                  EXIT(GenPostingSetup.GetPurchPmtDiscountAccount(AmountCondition));
              END;
            END;
          "Entry Type"::"Payment Discount (VAT Adjustment)",
          "Entry Type"::"Payment Tolerance (VAT Adjustment)",
          "Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
            IF Unapply THEN
              PostDtldVendVATAdjustment(GenJnlLine,DtldCVLedgEntryBuf,OriginalTransactionNo);
          ELSE
            FIELDERROR("Entry Type");
        END;
      END;
    END;

    LOCAL PROCEDURE PostDtldEmplLedgEntries@148(GenJnlLine@1000 : Record 81;VAR DtldCVLedgEntryBuf@1001 : Record 383;EmplPostingGr@1002 : Record 5221;LedgEntryInserted@1011 : Boolean) DtldLedgEntryInserted : Boolean;
    VAR
      TempInvPostBuf@1007 : TEMPORARY Record 49;
      DtldEmplLedgEntry@1004 : Record 5223;
      DummyAdjAmount@1012 : ARRAY [4] OF Decimal;
      DtldEmplLedgEntryNoOffset@1005 : Integer;
      SaveEntryNo@1013 : Integer;
    BEGIN
      IF GenJnlLine."Account Type" <> GenJnlLine."Account Type"::Employee THEN
        EXIT;

      IF DtldEmplLedgEntry.FINDLAST THEN
        DtldEmplLedgEntryNoOffset := DtldEmplLedgEntry."Entry No."
      ELSE
        DtldEmplLedgEntryNoOffset := 0;

      DtldCVLedgEntryBuf.RESET;
      IF DtldCVLedgEntryBuf.FINDSET THEN BEGIN
        IF LedgEntryInserted THEN BEGIN
          SaveEntryNo := NextEntryNo;
          NextEntryNo := NextEntryNo + 1;
        END;
        REPEAT
          InsertDtldEmplLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,DtldEmplLedgEntry,DtldEmplLedgEntryNoOffset);
          UpdateTotalAmounts(TempInvPostBuf,GenJnlLine."Dimension Set ID",DtldCVLedgEntryBuf);
        UNTIL DtldCVLedgEntryBuf.NEXT = 0;
      END;

      CreateGLEntriesForTotalAmounts(
        GenJnlLine,TempInvPostBuf,DummyAdjAmount,SaveEntryNo,EmplPostingGr.GetPayablesAccount,LedgEntryInserted);

      DtldLedgEntryInserted := NOT DtldCVLedgEntryBuf.ISEMPTY;
      DtldCVLedgEntryBuf.DELETEALL;
    END;

    LOCAL PROCEDURE PostDtldCVLedgEntry@15(GenJnlLine@1000 : Record 81;DtldCVLedgEntryBuf@1001 : Record 383;AccNo@1002 : Code[20];VAR AdjAmount@1004 : ARRAY [4] OF Decimal;Unapply@1005 : Boolean);
    BEGIN
      OnBeforePostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,Unapply,AdjAmount);

      SwitchOffIntercompany := TRUE; //**4PS.n

      WITH DtldCVLedgEntryBuf DO
        CASE "Entry Type" OF
          "Entry Type"::"Initial Entry":
            ;
          "Entry Type"::Application:
            //**4PS.sn
            IF Unapply AND
               (GenJnlLine."Account Type" <> GenJnlLine."Account Type"::Vendor)
            THEN  //Call C015262
              UnApplyCreditRestriction(GenJnlLine,DtldCVLedgEntryBuf)
            //**4PS.en
            ;
          "Entry Type"::"Unrealized Loss",
          "Entry Type"::"Unrealized Gain",
          "Entry Type"::"Realized Loss",
          "Entry Type"::"Realized Gain":
            BEGIN
              OnPostDtldCVLedgEntryOnBeforeCreateGLEntryGainLoss(GenJnlLine,DtldCVLedgEntryBuf,Unapply,AccNo);
              CreateGLEntryGainLoss(GenJnlLine,AccNo,-"Amount (LCY)","Currency Code" = AddCurrencyCode);
              IF NOT Unapply THEN
                CollectAdjustment(AdjAmount,-"Amount (LCY)",0);
            END;
          "Entry Type"::"Payment Discount",
          "Entry Type"::"Payment Tolerance",
          "Entry Type"::"Payment Discount Tolerance":
            BEGIN
              CreateGLEntry(GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",FALSE);
              IF NOT Unapply THEN
                CollectAdjustment(AdjAmount,-"Amount (LCY)",-"Additional-Currency Amount");
            END;
          "Entry Type"::"Payment Discount (VAT Excl.)",
          "Entry Type"::"Payment Tolerance (VAT Excl.)",
          "Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
            BEGIN
              IF NOT Unapply THEN
                CreateGLEntryVATCollectAdj(
                  GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",-"VAT Amount (LCY)",DtldCVLedgEntryBuf,
                  AdjAmount)
              ELSE
                CreateGLEntryVAT(
                  GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",-"VAT Amount (LCY)",DtldCVLedgEntryBuf);
            END;
          "Entry Type"::"Appln. Rounding":
            IF "Amount (LCY)" <> 0 THEN BEGIN
              CreateGLEntry(GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",TRUE);
              IF NOT Unapply THEN
                CollectAdjustment(AdjAmount,-"Amount (LCY)",-"Additional-Currency Amount");
            END;
          "Entry Type"::"Correction of Remaining Amount":
            IF "Amount (LCY)" <> 0 THEN BEGIN
              CreateGLEntry(GenJnlLine,AccNo,-"Amount (LCY)",0,FALSE);
              IF NOT Unapply THEN
                CollectAdjustment(AdjAmount,-"Amount (LCY)",0);
            END;
          "Entry Type"::"Payment Discount (VAT Adjustment)",
          "Entry Type"::"Payment Tolerance (VAT Adjustment)",
          "Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
            ;
          //**4PS.sn
          "Entry Type"::"Credit Restriction":
            IF Unapply AND
               (GenJnlLine."Account Type" <> GenJnlLine."Account Type"::Vendor)
            THEN
              UnApplyCreditRestriction(GenJnlLine,DtldCVLedgEntryBuf);
          //**4PS.en
          ELSE
            FIELDERROR("Entry Type");
        END;

      OnAfterPostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,Unapply,AccNo,AdjAmount,NextEntryNo);

      SwitchOffIntercompany := FALSE; //**4PS.n
    END;

    LOCAL PROCEDURE PostDtldCustVATAdjustment@75(GenJnlLine@1003 : Record 81;DtldCVLedgEntryBuf@1002 : Record 383;OriginalTransactionNo@1000 : Integer);
    VAR
      VATPostingSetup@1005 : Record 325;
      TaxJurisdiction@1004 : Record 320;
    BEGIN
      SwitchOffIntercompany := TRUE; //**4PS.n
      WITH DtldCVLedgEntryBuf DO BEGIN
        FindVATEntry(VATEntry,OriginalTransactionNo);

        CASE VATPostingSetup."VAT Calculation Type" OF
          VATPostingSetup."VAT Calculation Type"::"Normal VAT",
          VATPostingSetup."VAT Calculation Type"::"Full VAT":
            BEGIN
              VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
              VATPostingSetup.TESTFIELD("VAT Calculation Type",VATEntry."VAT Calculation Type");
              CreateGLEntry(
                GenJnlLine,VATPostingSetup.GetSalesAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE);
            END;
          VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
            ;
          VATPostingSetup."VAT Calculation Type"::"Sales Tax":
            BEGIN
              TESTFIELD("Tax Jurisdiction Code");
              TaxJurisdiction.GET("Tax Jurisdiction Code");
              CreateGLEntry(
                GenJnlLine,TaxJurisdiction.GetPurchAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE);
            END;
        END;
      END;
      SwitchOffIntercompany := FALSE; //**4PS.n
    END;

    LOCAL PROCEDURE PostDtldVendVATAdjustment@73(GenJnlLine@1004 : Record 81;DtldCVLedgEntryBuf@1002 : Record 383;OriginalTransactionNo@1000 : Integer);
    VAR
      VATPostingSetup@1003 : Record 325;
      TaxJurisdiction@1005 : Record 320;
    BEGIN
      SwitchOffIntercompany := TRUE; //**4PS.n
      WITH DtldCVLedgEntryBuf DO BEGIN
        FindVATEntry(VATEntry,OriginalTransactionNo);

        CASE VATPostingSetup."VAT Calculation Type" OF
          VATPostingSetup."VAT Calculation Type"::"Normal VAT",
          VATPostingSetup."VAT Calculation Type"::"Full VAT":
            BEGIN
              VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
              VATPostingSetup.TESTFIELD("VAT Calculation Type",VATEntry."VAT Calculation Type");
              CreateGLEntry(
                GenJnlLine,VATPostingSetup.GetPurchAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE);
            END;
          VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
            BEGIN
              VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
              VATPostingSetup.TESTFIELD("VAT Calculation Type",VATEntry."VAT Calculation Type");
              CreateGLEntry(
                GenJnlLine,VATPostingSetup.GetPurchAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE);
              CreateGLEntry(
                GenJnlLine,VATPostingSetup.GetRevChargeAccount(FALSE),"Amount (LCY)","Additional-Currency Amount",FALSE);
            END;
          VATPostingSetup."VAT Calculation Type"::"Sales Tax":
            BEGIN
              TaxJurisdiction.GET("Tax Jurisdiction Code");
              IF "Use Tax" THEN BEGIN
                CreateGLEntry(
                  GenJnlLine,TaxJurisdiction.GetPurchAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE);
                CreateGLEntry(
                  GenJnlLine,TaxJurisdiction.GetRevChargeAccount(FALSE),"Amount (LCY)","Additional-Currency Amount",FALSE);
              END ELSE
                CreateGLEntry(
                  GenJnlLine,TaxJurisdiction.GetPurchAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE);
            END;
        END;
      END;
      SwitchOffIntercompany := FALSE; //**4PS.n
    END;

    LOCAL PROCEDURE VendUnrealizedVAT@18(GenJnlLine@1017 : Record 81;VAR VendLedgEntry2@1000 : Record 25;SettledAmount@1001 : Decimal);
    VAR
      VATEntry2@1002 : Record 254;
      TaxJurisdiction@1016 : Record 320;
      VATPostingSetup@1019 : Record 325;
      VATPart@1003 : Decimal;
      VATAmount@1004 : Decimal;
      VATBase@1005 : Decimal;
      VATAmountAddCurr@1006 : Decimal;
      VATBaseAddCurr@1007 : Decimal;
      PaidAmount@1008 : Decimal;
      TotalUnrealVATAmountFirst@1014 : Decimal;
      TotalUnrealVATAmountLast@1015 : Decimal;
      PurchVATAccount@1009 : Code[20];
      PurchVATUnrealAccount@1010 : Code[20];
      PurchReverseAccount@1011 : Code[20];
      PurchReverseUnrealAccount@1012 : Code[20];
      LastConnectionNo@1013 : Integer;
      GLEntryNo@1018 : Integer;
      IsHandled@1020 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeVendUnrealizedVAT(GenJnlLine,VendLedgEntry2,SettledAmount,IsHandled);
      IF IsHandled THEN
        EXIT;

      VATEntry2.RESET;
      VATEntry2.SETCURRENTKEY("Transaction No.");
      VATEntry2.SETRANGE("Transaction No.",VendLedgEntry2."Transaction No.");
      PaidAmount := -VendLedgEntry2."Amount (LCY)" + VendLedgEntry2."Remaining Amt. (LCY)";
      IF VATEntry2.FINDSET THEN
        REPEAT
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF VATPostingSetup."Unrealized VAT Type" IN
             [VATPostingSetup."Unrealized VAT Type"::Last,VATPostingSetup."Unrealized VAT Type"::"Last (Fully Paid)"]
          THEN
            TotalUnrealVATAmountLast := TotalUnrealVATAmountLast - VATEntry2."Remaining Unrealized Amount";
          IF VATPostingSetup."Unrealized VAT Type" IN
             [VATPostingSetup."Unrealized VAT Type"::First,VATPostingSetup."Unrealized VAT Type"::"First (Fully Paid)"]
          THEN
            TotalUnrealVATAmountFirst := TotalUnrealVATAmountFirst - VATEntry2."Remaining Unrealized Amount";
        UNTIL VATEntry2.NEXT = 0;
      IF VATEntry2.FINDSET THEN BEGIN
        LastConnectionNo := 0;
        REPEAT
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF LastConnectionNo <> VATEntry2."Sales Tax Connection No." THEN BEGIN
            InsertSummarizedVAT(GenJnlLine);
            LastConnectionNo := VATEntry2."Sales Tax Connection No.";
          END;

          VATPart :=
            VATEntry2.GetUnrealizedVATPart(
              ROUND(SettledAmount / VendLedgEntry2.GetAdjustedCurrencyFactor),
              PaidAmount,
              VendLedgEntry2."Amount (LCY)",
              TotalUnrealVATAmountFirst,
              TotalUnrealVATAmountLast);

          OnVendUnrealizedVATOnAfterVATPartCalculation(
            GenJnlLine,VendLedgEntry2,PaidAmount,TotalUnrealVATAmountFirst,TotalUnrealVATAmountLast,SettledAmount,VATEntry2);

          IF VATPart > 0 THEN BEGIN
            CASE VATEntry2."VAT Calculation Type" OF
              VATEntry2."VAT Calculation Type"::"Normal VAT",
              VATEntry2."VAT Calculation Type"::"Full VAT":
                BEGIN
                  PurchVATAccount := VATPostingSetup.GetPurchAccount(FALSE);
                  PurchVATUnrealAccount := VATPostingSetup.GetPurchAccount(TRUE);
                END;
              VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
                BEGIN
                  PurchVATAccount := VATPostingSetup.GetPurchAccount(FALSE);
                  PurchVATUnrealAccount := VATPostingSetup.GetPurchAccount(TRUE);
                  PurchReverseAccount := VATPostingSetup.GetRevChargeAccount(FALSE);
                  PurchReverseUnrealAccount := VATPostingSetup.GetRevChargeAccount(TRUE);
                END;
              VATEntry2."VAT Calculation Type"::"Sales Tax":
                IF (VATEntry2.Type = VATEntry2.Type::Purchase) AND VATEntry2."Use Tax" THEN BEGIN
                  TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
                  PurchVATAccount := TaxJurisdiction.GetPurchAccount(FALSE);
                  PurchVATUnrealAccount := TaxJurisdiction.GetPurchAccount(TRUE);
                  PurchReverseAccount := TaxJurisdiction.GetRevChargeAccount(FALSE);
                  PurchReverseUnrealAccount := TaxJurisdiction.GetRevChargeAccount(TRUE);
                END ELSE BEGIN
                  TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
                  PurchVATAccount := TaxJurisdiction.GetPurchAccount(FALSE);
                  PurchVATUnrealAccount := TaxJurisdiction.GetPurchAccount(TRUE);
                END;
            END;

            IF VATPart = 1 THEN BEGIN
              VATAmount := VATEntry2."Remaining Unrealized Amount";
              VATBase := VATEntry2."Remaining Unrealized Base";
              VATAmountAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Amount";
              VATBaseAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Base";
            END ELSE BEGIN
              VATAmount := ROUND(VATEntry2."Remaining Unrealized Amount" * VATPart,GLSetup."Amount Rounding Precision");
              VATBase := ROUND(VATEntry2."Remaining Unrealized Base" * VATPart,GLSetup."Amount Rounding Precision");
              VATAmountAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Amount" * VATPart,
                  AddCurrency."Amount Rounding Precision");
              VATBaseAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Base" * VATPart,
                  AddCurrency."Amount Rounding Precision");
            END;

            OnVendUnrealizedVATOnBeforeInitGLEntryVAT(GenJnlLine,VATEntry2,VATAmount,VATBase,VATAmountAddCurr,VATBaseAddCurr);

            InitGLEntryVAT(
              GenJnlLine,PurchVATUnrealAccount,PurchVATAccount,-VATAmount,-VATAmountAddCurr,FALSE);
            GLEntryNo :=
              InitGLEntryVATCopy(GenJnlLine,PurchVATAccount,PurchVATUnrealAccount,VATAmount,VATAmountAddCurr,VATEntry2);

            IF (VATEntry2."VAT Calculation Type" =
                VATEntry2."VAT Calculation Type"::"Reverse Charge VAT") OR
               ((VATEntry2."VAT Calculation Type" =
                 VATEntry2."VAT Calculation Type"::"Sales Tax") AND
                (VATEntry2.Type = VATEntry2.Type::Purchase) AND VATEntry2."Use Tax")
            THEN BEGIN
              InitGLEntryVAT(
                GenJnlLine,PurchReverseUnrealAccount,PurchReverseAccount,VATAmount,VATAmountAddCurr,FALSE);
              GLEntryNo :=
                InitGLEntryVATCopy(GenJnlLine,PurchReverseAccount,PurchReverseUnrealAccount,-VATAmount,-VATAmountAddCurr,VATEntry2);
            END;

            PostUnrealVATEntry(GenJnlLine,VATEntry2,VATAmount,VATBase,VATAmountAddCurr,VATBaseAddCurr,GLEntryNo);
          END;
        UNTIL VATEntry2.NEXT = 0;

        InsertSummarizedVAT(GenJnlLine);
      END;
    END;

    LOCAL PROCEDURE PostUnrealVATEntry@5(GenJnlLine@1002 : Record 81;VAR VATEntry2@1000 : Record 254;VATAmount@1003 : Decimal;VATBase@1004 : Decimal;VATAmountAddCurr@1006 : Decimal;VATBaseAddCurr@1005 : Decimal;GLEntryNo@1001 : Integer);
    BEGIN
      OnBeforePostUnrealVATEntry(GenJnlLine,VATEntry);
      VATEntry.LOCKTABLE;
      VATEntry := VATEntry2;
      VATEntry."Entry No." := NextVATEntryNo;
      VATEntry."Posting Date" := GenJnlLine."Posting Date";
      VATEntry."Document No." := GenJnlLine."Document No.";
      VATEntry."External Document No." := GenJnlLine."External Document No.";
      VATEntry."Document Type" := GenJnlLine."Document Type";
      VATEntry.Amount := VATAmount;
      VATEntry.Base := VATBase;
      VATEntry."Additional-Currency Amount" := VATAmountAddCurr;
      VATEntry."Additional-Currency Base" := VATBaseAddCurr;
      VATEntry.SetUnrealAmountsToZero;
      VATEntry."User ID" := USERID;
      VATEntry."Source Code" := GenJnlLine."Source Code";
      VATEntry."Reason Code" := GenJnlLine."Reason Code";
      VATEntry."Closed by Entry No." := 0;
      VATEntry.Closed := FALSE;
      VATEntry."Transaction No." := NextTransactionNo;
      VATEntry."Sales Tax Connection No." := NextConnectionNo;
      VATEntry."Unrealized VAT Entry No." := VATEntry2."Entry No.";
      VATEntry."Base Before Pmt. Disc." := VATEntry.Base;
      OnBeforeInsertPostUnrealVATEntry(VATEntry,GenJnlLine,VATEntry2);
      VATEntry.INSERT(TRUE);
      GLEntryVATEntryLink.InsertLink(GLEntryNo + 1,NextVATEntryNo);
      NextVATEntryNo := NextVATEntryNo + 1;

      VATEntry2."Remaining Unrealized Amount" :=
        VATEntry2."Remaining Unrealized Amount" - VATEntry.Amount;
      VATEntry2."Remaining Unrealized Base" :=
        VATEntry2."Remaining Unrealized Base" - VATEntry.Base;
      VATEntry2."Add.-Curr. Rem. Unreal. Amount" :=
        VATEntry2."Add.-Curr. Rem. Unreal. Amount" - VATEntry."Additional-Currency Amount";
      VATEntry2."Add.-Curr. Rem. Unreal. Base" :=
        VATEntry2."Add.-Curr. Rem. Unreal. Base" - VATEntry."Additional-Currency Base";
      VATEntry2.MODIFY;
      OnAfterPostUnrealVATEntry(GenJnlLine,VATEntry2);
    END;

    LOCAL PROCEDURE PostApply@105(VAR GenJnlLine@1007 : Record 81;VAR DtldCVLedgEntryBuf@1008 : Record 383;VAR OldCVLedgEntryBuf@1000 : Record 382;VAR NewCVLedgEntryBuf@1005 : Record 382;VAR NewCVLedgEntryBuf2@1013 : Record 382;BlockPaymentTolerance@1006 : Boolean;AllApplied@1009 : Boolean;VAR AppliedAmount@1016 : Decimal;VAR PmtTolAmtToBeApplied@1010 : Decimal;OriginalApply@1100528500 : Boolean;UseSalesExchange@1100528501 : Boolean);
    VAR
      OldCVLedgEntryBuf2@1003 : Record 382;
      OldCVLedgEntryBuf3@1002 : Record 382;
      OldRemainingAmtBeforeAppln@1001 : Decimal;
      ApplnRoundingPrecision@1004 : Decimal;
      AppliedAmountLCY@1012 : Decimal;
      OldAppliedAmount@1011 : Decimal;
      IsHandled@1014 : Boolean;
      PmtDiscFound@1100528400 : Boolean;
    BEGIN
      OnBeforePostApply(GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,NewCVLedgEntryBuf,NewCVLedgEntryBuf2);

      OldRemainingAmtBeforeAppln := OldCVLedgEntryBuf."Remaining Amount";
      OldCVLedgEntryBuf3 := OldCVLedgEntryBuf;

      // Management of posting in multiple currencies
      OldCVLedgEntryBuf2 := OldCVLedgEntryBuf;
      OldCVLedgEntryBuf.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
      ApplnRoundingPrecision := GetApplnRoundPrecision(NewCVLedgEntryBuf,OldCVLedgEntryBuf);

      OldCVLedgEntryBuf2.RecalculateAmounts(
      //OldCVLedgEntryBuf2."Currency Code",NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date"); //**4PS.o
        OldCVLedgEntryBuf2."Currency Code",NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date",UseSalesExchange); //**4PS.n

      OnPostApplyOnAfterRecalculateAmounts(OldCVLedgEntryBuf2,OldCVLedgEntryBuf,NewCVLedgEntryBuf,GenJnlLine);

      //**4PS.sn Call 27619
      IF (
          (NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::"Credit Memo") AND
          (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice) AND
          (NewCVLedgEntryBuf."Applies-to Doc. Type" = NewCVLedgEntryBuf."Applies-to Doc. Type"::Invoice) AND
          (NewCVLedgEntryBuf."Applies-to Doc. No." = OldCVLedgEntryBuf."Document No.") AND
          (NewCVLedgEntryBuf."Credit Restriction Amount" <> 0)
         )
      THEN
        HandleVATCreditRestriction(NewCVLedgEntryBuf, OldCVLedgEntryBuf2, DtldCVLedgEntryBuf, GenJnlLine)
      ELSE
        CalcCreditRestrictionRefund(NewCVLedgEntryBuf, OldCVLedgEntryBuf2, DtldCVLedgEntryBuf, GenJnlLine);
      //**4PS.en

      IF NOT BlockPaymentTolerance THEN
        CalcPmtTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          PmtTolAmtToBeApplied,NextTransactionNo,FirstNewVATEntryNo);

      CalcPmtDisc(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
        //PmtTolAmtToBeApplied,ApplnRoundingPrecision,NextTransactionNo,FirstNewVATEntryNo); //**4PS.o
        PmtTolAmtToBeApplied,ApplnRoundingPrecision,NextTransactionNo,FirstNewVATEntryNo,PmtDiscFound); //**4PS.n

      //IF NOT BlockPaymentTolerance THEN //**4PS.o
      IF NOT BlockPaymentTolerance AND NOT PmtDiscFound THEN //**4PS.n
        CalcPmtDiscTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          NextTransactionNo,FirstNewVATEntryNo);

      IsHandled := FALSE;
      OnBeforeCalcCurrencyApplnRounding(
        GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,OldCVLedgEntryBuf3,
        NewCVLedgEntryBuf,NewCVLedgEntryBuf2,IsHandled);
      IF NOT IsHandled THEN
        CalcCurrencyApplnRounding(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,ApplnRoundingPrecision);

      FindAmtForAppln(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,
      //AppliedAmount,AppliedAmountLCY,OldAppliedAmount,ApplnRoundingPrecision); //**4PS.o
        AppliedAmount,AppliedAmountLCY,OldAppliedAmount,ApplnRoundingPrecision,OriginalApply); //**4PS.n

      CalcCurrencyUnrealizedGainLoss(
        OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,OldRemainingAmtBeforeAppln);

      CalcCurrencyRealizedGainLoss(
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,AppliedAmount,AppliedAmountLCY);

      CalcCurrencyRealizedGainLoss(
        OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,-AppliedAmountLCY);

      CalcApplication(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,
        GenJnlLine,AppliedAmount,AppliedAmountLCY,OldAppliedAmount,
        NewCVLedgEntryBuf2,OldCVLedgEntryBuf3,AllApplied);

      PaymentToleranceMgt.CalcRemainingPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,GLSetup);

      CalcAmtLCYAdjustment(OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

      OnAfterPostApply(GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,NewCVLedgEntryBuf,NewCVLedgEntryBuf2);
    END;

    [External]
    PROCEDURE UnapplyCustLedgEntry@109(GenJnlLine2@1004 : Record 81;DtldCustLedgEntry@1003 : Record 379);
    VAR
      Cust@1006 : Record 18;
      CustPostingGr@1019 : Record 92;
      GenJnlLine@1021 : Record 81;
      DtldCustLedgEntry2@1013 : Record 379;
      NewDtldCustLedgEntry@1012 : Record 379;
      CustLedgEntry@1011 : Record 21;
      DtldCVLedgEntryBuf@1010 : Record 383;
      VATEntry@1009 : Record 254;
      TempVATEntry2@1023 : TEMPORARY Record 254;
      CurrencyLCY@1024 : Record 4;
      TempInvPostBuf@1002 : TEMPORARY Record 49;
      AdjAmount@1031 : ARRAY [4] OF Decimal;
      NextDtldLedgEntryNo@1001 : Integer;
      UnapplyVATEntries@1000 : Boolean;
      PmtDiscTolExists@1007 : Boolean;
    BEGIN
      GenJnlLine.TRANSFERFIELDS(GenJnlLine2);
      IF GenJnlLine."Document Date" = 0D THEN
        GenJnlLine."Document Date" := GenJnlLine."Posting Date";

      IF NextEntryNo = 0 THEN
        StartPosting(GenJnlLine)
      ELSE
        ContinuePosting(GenJnlLine);

      ReadGLSetup(GLSetup);

      Cust.GET(DtldCustLedgEntry."Customer No.");
      Cust.CheckBlockedCustOnJnls(Cust,GenJnlLine2."Document Type"::Payment,TRUE);

      OnUnapplyCustLedgEntryOnBeforeCheckPostingGroup(GenJnlLine,Cust);
      CustPostingGr.GET(GenJnlLine."Posting Group");
      CustPostingGr.GetReceivablesAccount;

      VATEntry.LOCKTABLE;
      DtldCustLedgEntry.LOCKTABLE;
      CustLedgEntry.LOCKTABLE;

      DtldCustLedgEntry.TESTFIELD("Entry Type",DtldCustLedgEntry."Entry Type"::Application);

      DtldCustLedgEntry2.RESET;
      DtldCustLedgEntry2.FINDLAST;
      NextDtldLedgEntryNo := DtldCustLedgEntry2."Entry No." + 1;
      IF DtldCustLedgEntry."Transaction No." = 0 THEN BEGIN
        DtldCustLedgEntry2.SETCURRENTKEY("Application No.","Customer No.","Entry Type");
        DtldCustLedgEntry2.SETRANGE("Application No.",DtldCustLedgEntry."Application No.");
      END ELSE BEGIN
        DtldCustLedgEntry2.SETCURRENTKEY("Transaction No.","Customer No.","Entry Type");
        DtldCustLedgEntry2.SETRANGE("Transaction No.",DtldCustLedgEntry."Transaction No.");
      END;
      DtldCustLedgEntry2.SETRANGE("Customer No.",DtldCustLedgEntry."Customer No.");
      DtldCustLedgEntry2.SETFILTER("Entry Type",'>%1',DtldCustLedgEntry."Entry Type"::"Initial Entry");
      OnUnapplyCustLedgEntryOnAfterDtldCustLedgEntrySetFilters(DtldCustLedgEntry2,DtldCustLedgEntry);
      IF DtldCustLedgEntry."Transaction No." <> 0 THEN BEGIN
        UnapplyVATEntries := FALSE;
        DtldCustLedgEntry2.FINDSET;
        REPEAT
          DtldCustLedgEntry2.TESTFIELD(Unapplied,FALSE);
          IF IsVATAdjustment(DtldCustLedgEntry2."Entry Type") THEN
            UnapplyVATEntries := TRUE;
          IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." THEN
            IF IsVATExcluded(DtldCustLedgEntry2."Entry Type") THEN
              UnapplyVATEntries := TRUE;
          IF DtldCustLedgEntry2."Entry Type" = DtldCustLedgEntry2."Entry Type"::"Payment Discount Tolerance (VAT Excl.)" THEN
            PmtDiscTolExists := TRUE;
        UNTIL DtldCustLedgEntry2.NEXT = 0;

        OnUnapplyCustLedgEntryOnBeforePostUnapply(DtldCustLedgEntry,DtldCustLedgEntry2);

        PostUnapply(
          GenJnlLine,VATEntry,VATEntry.Type::Sale,
          DtldCustLedgEntry."Customer No.",DtldCustLedgEntry."Transaction No.",UnapplyVATEntries,TempVATEntry);

        IF PmtDiscTolExists THEN
          ProcessTempVATEntryCust(DtldCustLedgEntry2,TempVATEntry)
        ELSE BEGIN
          DtldCustLedgEntry2.SETRANGE("Entry Type",DtldCustLedgEntry2."Entry Type"::"Payment Tolerance (VAT Excl.)");
          ProcessTempVATEntryCust(DtldCustLedgEntry2,TempVATEntry);
          DtldCustLedgEntry2.SETRANGE("Entry Type",DtldCustLedgEntry2."Entry Type"::"Payment Discount (VAT Excl.)");
          ProcessTempVATEntryCust(DtldCustLedgEntry2,TempVATEntry);
          DtldCustLedgEntry2.SETFILTER("Entry Type",'>%1',DtldCustLedgEntry."Entry Type"::"Initial Entry");
        END;
      END;

      // Look one more time
      DtldCustLedgEntry2.FINDSET;
      TempInvPostBuf.DELETEALL;
      REPEAT
        DtldCustLedgEntry2.TESTFIELD(Unapplied,FALSE);
        InsertDtldCustLedgEntryUnapply(GenJnlLine,NewDtldCustLedgEntry,DtldCustLedgEntry2,NextDtldLedgEntryNo);

        DtldCVLedgEntryBuf.INIT;
        DtldCVLedgEntryBuf.TRANSFERFIELDS(NewDtldCustLedgEntry);
        SetAddCurrForUnapplication(DtldCVLedgEntryBuf);
        CurrencyLCY.InitRoundingPrecision;

        IF (DtldCustLedgEntry2."Transaction No." <> 0) AND IsVATExcluded(DtldCustLedgEntry2."Entry Type") THEN BEGIN
          UnapplyExcludedVAT(
            TempVATEntry2,DtldCustLedgEntry2."Transaction No.",DtldCustLedgEntry2."VAT Bus. Posting Group",
            DtldCustLedgEntry2."VAT Prod. Posting Group",DtldCustLedgEntry2."Gen. Prod. Posting Group");
          DtldCVLedgEntryBuf."VAT Amount (LCY)" :=
            CalcVATAmountFromVATEntry(DtldCVLedgEntryBuf."Amount (LCY)",TempVATEntry2,CurrencyLCY);
        END;
        UpdateTotalAmounts(TempInvPostBuf,GenJnlLine."Dimension Set ID",DtldCVLedgEntryBuf);

        IF NOT (DtldCVLedgEntryBuf."Entry Type" IN [
                                                    DtldCVLedgEntryBuf."Entry Type"::"Initial Entry",
                                                    DtldCVLedgEntryBuf."Entry Type"::Application])
        THEN
          CollectAdjustment(AdjAmount,
            -DtldCVLedgEntryBuf."Amount (LCY)",-DtldCVLedgEntryBuf."Additional-Currency Amount");

        PostDtldCustLedgEntryUnapply(
          GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,DtldCustLedgEntry2."Transaction No.");

        DtldCustLedgEntry2.Unapplied := TRUE;
        DtldCustLedgEntry2."Unapplied by Entry No." := NewDtldCustLedgEntry."Entry No.";
        DtldCustLedgEntry2.MODIFY;

        UpdateCustLedgEntry(DtldCustLedgEntry2);
      UNTIL DtldCustLedgEntry2.NEXT = 0;

      OnBeforeCreateGLEntriesForTotalAmountsUnapply(DtldCustLedgEntry,CustPostingGr,GenJnlLine,TempInvPostBuf);
      CreateGLEntriesForTotalAmountsUnapply(GenJnlLine,TempInvPostBuf,CustPostingGr.GetReceivablesAccount);

      OnUnapplyCustLedgEntryOnAfterCreateGLEntriesForTotalAmounts(GenJnlLine2,DtldCustLedgEntry);

      IF IsTempGLEntryBufEmpty THEN
        DtldCustLedgEntry.SetZeroTransNo(NextTransactionNo);
      CheckPostUnrealizedVAT(GenJnlLine,TRUE);

      FinishPosting(GenJnlLine);
    END;

    [External]
    PROCEDURE UnapplyVendLedgEntry@108(GenJnlLine2@1003 : Record 81;DtldVendLedgEntry@1002 : Record 380);
    VAR
      Vend@1005 : Record 23;
      VendPostingGr@1019 : Record 93;
      GenJnlLine@1021 : Record 81;
      DtldVendLedgEntry2@1012 : Record 380;
      NewDtldVendLedgEntry@1011 : Record 380;
      VendLedgEntry@1010 : Record 25;
      DtldCVLedgEntryBuf@1009 : Record 383;
      VATEntry@1008 : Record 254;
      TempVATEntry2@1023 : TEMPORARY Record 254;
      CurrencyLCY@1024 : Record 4;
      TempInvPostBuf@1001 : TEMPORARY Record 49;
      AdjAmount@1031 : ARRAY [4] OF Decimal;
      NextDtldLedgEntryNo@1000 : Integer;
      UnapplyVATEntries@1013 : Boolean;
      PmtDiscTolExists@1006 : Boolean;
    BEGIN
      GenJnlLine.TRANSFERFIELDS(GenJnlLine2);
      IF GenJnlLine."Document Date" = 0D THEN
        GenJnlLine."Document Date" := GenJnlLine."Posting Date";

      IF NextEntryNo = 0 THEN
        StartPosting(GenJnlLine)
      ELSE
        ContinuePosting(GenJnlLine);

      ReadGLSetup(GLSetup);

      Vend.GET(DtldVendLedgEntry."Vendor No.");
      Vend.CheckBlockedVendOnJnls(Vend,GenJnlLine2."Document Type"::Payment,TRUE);

      OnUnapplyVendLedgEntryOnBeforeCheckPostingGroup(GenJnlLine,Vend);
      VendPostingGr.GET(GenJnlLine."Posting Group");
      VendPostingGr.GetPayablesAccount;

      VATEntry.LOCKTABLE;
      DtldVendLedgEntry.LOCKTABLE;
      VendLedgEntry.LOCKTABLE;

      DtldVendLedgEntry.TESTFIELD("Entry Type",DtldVendLedgEntry."Entry Type"::Application);

      DtldVendLedgEntry2.RESET;
      DtldVendLedgEntry2.FINDLAST;
      NextDtldLedgEntryNo := DtldVendLedgEntry2."Entry No." + 1;
      IF DtldVendLedgEntry."Transaction No." = 0 THEN BEGIN
        DtldVendLedgEntry2.SETCURRENTKEY("Application No.","Vendor No.","Entry Type");
        DtldVendLedgEntry2.SETRANGE("Application No.",DtldVendLedgEntry."Application No.");
      END ELSE BEGIN
        DtldVendLedgEntry2.SETCURRENTKEY("Transaction No.","Vendor No.","Entry Type");
        DtldVendLedgEntry2.SETRANGE("Transaction No.",DtldVendLedgEntry."Transaction No.");
      END;
      DtldVendLedgEntry2.SETRANGE("Vendor No.",DtldVendLedgEntry."Vendor No.");
      DtldVendLedgEntry2.SETFILTER("Entry Type",'>%1',DtldVendLedgEntry."Entry Type"::"Initial Entry");
      OnUnapplyVendLedgEntryOnAfterFilterSourceEntries(DtldVendLedgEntry,DtldVendLedgEntry2);
      IF DtldVendLedgEntry."Transaction No." <> 0 THEN BEGIN
        UnapplyVATEntries := FALSE;
        DtldVendLedgEntry2.FINDSET;
        REPEAT
          DtldVendLedgEntry2.TESTFIELD(Unapplied,FALSE);
          IF IsVATAdjustment(DtldVendLedgEntry2."Entry Type") THEN
            UnapplyVATEntries := TRUE;
          IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." THEN
            IF IsVATExcluded(DtldVendLedgEntry2."Entry Type") THEN
              UnapplyVATEntries := TRUE;
          IF DtldVendLedgEntry2."Entry Type" = DtldVendLedgEntry2."Entry Type"::"Payment Discount Tolerance (VAT Excl.)" THEN
            PmtDiscTolExists := TRUE;
        UNTIL DtldVendLedgEntry2.NEXT = 0;

        OnUnapplyVendLedgEntryOnBeforePostUnapply(DtldVendLedgEntry,DtldVendLedgEntry2);

        PostUnapply(
          GenJnlLine,VATEntry,VATEntry.Type::Purchase,
          DtldVendLedgEntry."Vendor No.",DtldVendLedgEntry."Transaction No.",UnapplyVATEntries,TempVATEntry);

        IF PmtDiscTolExists THEN
          ProcessTempVATEntryVend(DtldVendLedgEntry2,TempVATEntry)
        ELSE BEGIN
          DtldVendLedgEntry2.SETRANGE("Entry Type",DtldVendLedgEntry2."Entry Type"::"Payment Tolerance (VAT Excl.)");
          ProcessTempVATEntryVend(DtldVendLedgEntry2,TempVATEntry);
          DtldVendLedgEntry2.SETRANGE("Entry Type",DtldVendLedgEntry2."Entry Type"::"Payment Discount (VAT Excl.)");
          ProcessTempVATEntryVend(DtldVendLedgEntry2,TempVATEntry);
          DtldVendLedgEntry2.SETFILTER("Entry Type",'>%1',DtldVendLedgEntry2."Entry Type"::"Initial Entry");
        END;
      END;

      // Look one more time
      DtldVendLedgEntry2.FINDSET;
      TempInvPostBuf.DELETEALL;
      REPEAT
        DtldVendLedgEntry2.TESTFIELD(Unapplied,FALSE);
        InsertDtldVendLedgEntryUnapply(GenJnlLine,NewDtldVendLedgEntry,DtldVendLedgEntry2,NextDtldLedgEntryNo);

        DtldCVLedgEntryBuf.INIT;
        DtldCVLedgEntryBuf.TRANSFERFIELDS(NewDtldVendLedgEntry);
        SetAddCurrForUnapplication(DtldCVLedgEntryBuf);
        CurrencyLCY.InitRoundingPrecision;

        IF (DtldVendLedgEntry2."Transaction No." <> 0) AND IsVATExcluded(DtldVendLedgEntry2."Entry Type") THEN BEGIN
          UnapplyExcludedVAT(
            TempVATEntry2,DtldVendLedgEntry2."Transaction No.",DtldVendLedgEntry2."VAT Bus. Posting Group",
            DtldVendLedgEntry2."VAT Prod. Posting Group",DtldVendLedgEntry2."Gen. Prod. Posting Group");
          DtldCVLedgEntryBuf."VAT Amount (LCY)" :=
            CalcVATAmountFromVATEntry(DtldCVLedgEntryBuf."Amount (LCY)",TempVATEntry2,CurrencyLCY);
        END;
        UpdateTotalAmounts(TempInvPostBuf,GenJnlLine."Dimension Set ID",DtldCVLedgEntryBuf);

        IF NOT (DtldCVLedgEntryBuf."Entry Type" IN [
                                                    DtldCVLedgEntryBuf."Entry Type"::"Initial Entry",
                                                    DtldCVLedgEntryBuf."Entry Type"::Application])
        THEN
          CollectAdjustment(AdjAmount,
            -DtldCVLedgEntryBuf."Amount (LCY)",-DtldCVLedgEntryBuf."Additional-Currency Amount");

        PostDtldVendLedgEntryUnapply(
          GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,DtldVendLedgEntry2."Transaction No.");

        DtldVendLedgEntry2.Unapplied := TRUE;
        DtldVendLedgEntry2."Unapplied by Entry No." := NewDtldVendLedgEntry."Entry No.";
        DtldVendLedgEntry2.MODIFY;

        UpdateVendLedgEntry(DtldVendLedgEntry2);
      UNTIL DtldVendLedgEntry2.NEXT = 0;

      OnBeforeCreateGLEntriesForTotalAmountsUnapplyVendor(DtldVendLedgEntry,VendPostingGr,GenJnlLine,TempInvPostBuf);
      CreateGLEntriesForTotalAmountsUnapply(GenJnlLine,TempInvPostBuf,VendPostingGr.GetPayablesAccount);

      OnUnapplyVendLedgEntryOnAfterCreateGLEntriesForTotalAmounts(GenJnlLine2,DtldVendLedgEntry);

      IF IsTempGLEntryBufEmpty THEN
        DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);
      CheckPostUnrealizedVAT(GenJnlLine,TRUE);

      FinishPosting(GenJnlLine);
    END;

    [External]
    PROCEDURE UnapplyEmplLedgEntry@89(GenJnlLine2@1003 : Record 81;DtldEmplLedgEntry@1002 : Record 5223);
    VAR
      Employee@1005 : Record 5200;
      EmployeePostingGroup@1019 : Record 5221;
      GenJnlLine@1021 : Record 81;
      DtldEmplLedgEntry2@1012 : Record 5223;
      NewDtldEmplLedgEntry@1011 : Record 5223;
      EmplLedgEntry@1010 : Record 5222;
      DtldCVLedgEntryBuf@1009 : Record 383;
      CurrencyLCY@1024 : Record 4;
      TempInvPostBuf@1001 : TEMPORARY Record 49;
      NextDtldLedgEntryNo@1000 : Integer;
    BEGIN
      GenJnlLine.TRANSFERFIELDS(GenJnlLine2);
      IF GenJnlLine."Document Date" = 0D THEN
        GenJnlLine."Document Date" := GenJnlLine."Posting Date";

      IF NextEntryNo = 0 THEN
        StartPosting(GenJnlLine)
      ELSE
        ContinuePosting(GenJnlLine);

      ReadGLSetup(GLSetup);

      Employee.GET(DtldEmplLedgEntry."Employee No.");
      Employee.CheckBlockedEmployeeOnJnls(TRUE);
      EmployeePostingGroup.GET(GenJnlLine."Posting Group");
      EmployeePostingGroup.GetPayablesAccount;

      DtldEmplLedgEntry.LOCKTABLE;
      EmplLedgEntry.LOCKTABLE;

      DtldEmplLedgEntry.TESTFIELD("Entry Type",DtldEmplLedgEntry."Entry Type"::Application);

      DtldEmplLedgEntry2.RESET;
      DtldEmplLedgEntry2.FINDLAST;
      NextDtldLedgEntryNo := DtldEmplLedgEntry2."Entry No." + 1;
      IF DtldEmplLedgEntry."Transaction No." = 0 THEN BEGIN
        DtldEmplLedgEntry2.SETCURRENTKEY("Application No.","Employee No.","Entry Type");
        DtldEmplLedgEntry2.SETRANGE("Application No.",DtldEmplLedgEntry."Application No.");
      END ELSE BEGIN
        DtldEmplLedgEntry2.SETCURRENTKEY("Transaction No.","Employee No.","Entry Type");
        DtldEmplLedgEntry2.SETRANGE("Transaction No.",DtldEmplLedgEntry."Transaction No.");
      END;
      DtldEmplLedgEntry2.SETRANGE("Employee No.",DtldEmplLedgEntry."Employee No.");
      DtldEmplLedgEntry2.SETFILTER("Entry Type",'>%1',DtldEmplLedgEntry."Entry Type"::"Initial Entry");

      // Look one more time
      DtldEmplLedgEntry2.FINDSET;
      TempInvPostBuf.DELETEALL;
      REPEAT
        DtldEmplLedgEntry2.TESTFIELD(Unapplied,FALSE);
        InsertDtldEmplLedgEntryUnapply(GenJnlLine,NewDtldEmplLedgEntry,DtldEmplLedgEntry2,NextDtldLedgEntryNo);

        DtldCVLedgEntryBuf.INIT;
        DtldCVLedgEntryBuf.TRANSFERFIELDS(NewDtldEmplLedgEntry);
        SetAddCurrForUnapplication(DtldCVLedgEntryBuf);
        CurrencyLCY.InitRoundingPrecision;
        UpdateTotalAmounts(TempInvPostBuf,GenJnlLine."Dimension Set ID",DtldCVLedgEntryBuf);
        DtldEmplLedgEntry2.Unapplied := TRUE;
        DtldEmplLedgEntry2."Unapplied by Entry No." := NewDtldEmplLedgEntry."Entry No.";
        DtldEmplLedgEntry2.MODIFY;

        UpdateEmplLedgEntry(DtldEmplLedgEntry2);
      UNTIL DtldEmplLedgEntry2.NEXT = 0;

      CreateGLEntriesForTotalAmountsUnapply(GenJnlLine,TempInvPostBuf,EmployeePostingGroup.GetPayablesAccount);

      IF IsTempGLEntryBufEmpty THEN
        DtldEmplLedgEntry.SetZeroTransNo(NextTransactionNo);

      FinishPosting(GenJnlLine);
    END;

    LOCAL PROCEDURE UnapplyExcludedVAT@85(VAR TempVATEntry@1000 : TEMPORARY Record 254;TransactionNo@1004 : Integer;VATBusPostingGroup@1001 : Code[20];VATProdPostingGroup@1002 : Code[20];GenProdPostingGroup@1003 : Code[20]);
    BEGIN
      TempVATEntry.SETRANGE("VAT Bus. Posting Group",VATBusPostingGroup);
      TempVATEntry.SETRANGE("VAT Prod. Posting Group",VATProdPostingGroup);
      TempVATEntry.SETRANGE("Gen. Prod. Posting Group",GenProdPostingGroup);
      IF NOT TempVATEntry.FINDFIRST THEN BEGIN
        TempVATEntry.RESET;
        IF TempVATEntry.FINDLAST THEN
          TempVATEntry."Entry No." := TempVATEntry."Entry No." + 1
        ELSE
          TempVATEntry."Entry No." := 1;
        TempVATEntry.INIT;
        TempVATEntry."VAT Bus. Posting Group" := VATBusPostingGroup;
        TempVATEntry."VAT Prod. Posting Group" := VATProdPostingGroup;
        TempVATEntry."Gen. Prod. Posting Group" := GenProdPostingGroup;
        VATEntry.SETCURRENTKEY("Transaction No.");
        VATEntry.SETRANGE("Transaction No.",TransactionNo);
        VATEntry.SETRANGE("VAT Bus. Posting Group",VATBusPostingGroup);
        VATEntry.SETRANGE("VAT Prod. Posting Group",VATProdPostingGroup);
        VATEntry.SETRANGE("Gen. Prod. Posting Group",GenProdPostingGroup);
        IF VATEntry.FINDSET THEN
          REPEAT
            IF VATEntry."Unrealized VAT Entry No." = 0 THEN BEGIN
              TempVATEntry.Base := TempVATEntry.Base + VATEntry.Base;
              TempVATEntry.Amount := TempVATEntry.Amount + VATEntry.Amount;
            END;
          UNTIL VATEntry.NEXT = 0;
        CLEAR(VATEntry);
        TempVATEntry.INSERT;
      END;
    END;

    LOCAL PROCEDURE PostUnrealVATByUnapply@106(GenJnlLine@1002 : Record 81;VATPostingSetup@1008 : Record 325;VATEntry@1005 : Record 254;NewVATEntry@1004 : Record 254) : Integer;
    VAR
      VATEntry2@1003 : Record 254;
      AmountAddCurr@1007 : Decimal;
      GLEntryNoFromVAT@1000 : Integer;
    BEGIN
      AmountAddCurr := CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount);
      CreateGLEntry(
        GenJnlLine,GetPostingAccountNo(VATPostingSetup,VATEntry,TRUE),VATEntry.Amount,AmountAddCurr,FALSE);
      GLEntryNoFromVAT :=
        CreateGLEntryFromVATEntry(
          GenJnlLine,GetPostingAccountNo(VATPostingSetup,VATEntry,FALSE),-VATEntry.Amount,-AmountAddCurr,VATEntry);

      WITH VATEntry2 DO BEGIN
        GET(VATEntry."Unrealized VAT Entry No.");
        "Remaining Unrealized Amount" := "Remaining Unrealized Amount" - NewVATEntry.Amount;
        "Remaining Unrealized Base" := "Remaining Unrealized Base" - NewVATEntry.Base;
        "Add.-Curr. Rem. Unreal. Amount" :=
          "Add.-Curr. Rem. Unreal. Amount" - NewVATEntry."Additional-Currency Amount";
        "Add.-Curr. Rem. Unreal. Base" :=
          "Add.-Curr. Rem. Unreal. Base" - NewVATEntry."Additional-Currency Base";
        MODIFY;
      END;

      EXIT(GLEntryNoFromVAT);
    END;

    LOCAL PROCEDURE PostPmtDiscountVATByUnapply@104(GenJnlLine@1003 : Record 81;ReverseChargeVATAccNo@1002 : Code[20];VATAccNo@1001 : Code[20];VATEntry@1000 : Record 254);
    VAR
      AmountAddCurr@1005 : Decimal;
    BEGIN
      OnBeforePostPmtDiscountVATByUnapply(GenJnlLine,VATEntry);

      AmountAddCurr := CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount);
      CreateGLEntry(GenJnlLine,ReverseChargeVATAccNo,VATEntry.Amount,AmountAddCurr,FALSE);
      CreateGLEntry(GenJnlLine,VATAccNo,-VATEntry.Amount,-AmountAddCurr,FALSE);

      OnAfterPostPmtDiscountVATByUnapply(GenJnlLine,VATEntry);
    END;

    LOCAL PROCEDURE PostUnapply@101(GenJnlLine@1007 : Record 81;VAR VATEntry@1002 : Record 254;VATEntryType@1004 : Option;BilltoPaytoNo@1001 : Code[20];TransactionNo@1003 : Integer;UnapplyVATEntries@1006 : Boolean;VAR TempVATEntry@1013 : TEMPORARY Record 254);
    VAR
      VATPostingSetup@1000 : Record 325;
      VATEntry2@1009 : Record 254;
      GLEntryVATEntryLink@1011 : Record 253;
      AccNo@1010 : Code[20];
      TempVATEntryNo@1005 : Integer;
      GLEntryNoFromVAT@1008 : Integer;
    BEGIN
      TempVATEntryNo := 1;
      VATEntry.SETCURRENTKEY(Type,"Bill-to/Pay-to No.","Transaction No.");
      VATEntry.SETRANGE(Type,VATEntryType);
      VATEntry.SETRANGE("Bill-to/Pay-to No.",BilltoPaytoNo);
      VATEntry.SETRANGE("Transaction No.",TransactionNo);
      OnPostUnapplyOnAfterVATEntrySetFilters(VATEntry,GenJnlLine);
      IF VATEntry.FINDSET THEN
        REPEAT
          VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
          OnPostUnapplyOnBeforeUnapplyVATEntry(VATEntry,UnapplyVATEntries);
          IF UnapplyVATEntries OR (VATEntry."Unrealized VAT Entry No." <> 0) THEN BEGIN
            InsertTempVATEntry(GenJnlLine,VATEntry,TempVATEntryNo,TempVATEntry);
            IF VATEntry."Unrealized VAT Entry No." <> 0 THEN BEGIN
              VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
              IF VATPostingSetup."VAT Calculation Type" IN
                 [VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                  VATPostingSetup."VAT Calculation Type"::"Full VAT"]
              THEN
                GLEntryNoFromVAT := PostUnrealVATByUnapply(GenJnlLine,VATPostingSetup,VATEntry,TempVATEntry)
              ELSE
                IF VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT" THEN BEGIN
                  GLEntryNoFromVAT := PostUnrealVATByUnapply(GenJnlLine,VATPostingSetup,VATEntry,TempVATEntry);
                  CreateGLEntry(
                    GenJnlLine,VATPostingSetup.GetRevChargeAccount(TRUE),
                    -VATEntry.Amount,CalcAddCurrForUnapplication(VATEntry."Posting Date",-VATEntry.Amount),FALSE);
                  CreateGLEntry(
                    GenJnlLine,VATPostingSetup.GetRevChargeAccount(FALSE),
                    VATEntry.Amount,CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount),FALSE);
                END ELSE
                  GLEntryNoFromVAT := PostUnrealVATByUnapply(GenJnlLine,VATPostingSetup,VATEntry,TempVATEntry);
              VATEntry2 := TempVATEntry;
              VATEntry2."Entry No." := NextVATEntryNo;
              OnPostUnapplyOnBeforeVATEntryInsert(VATEntry2,GenJnlLine,VATEntry);
              VATEntry2.INSERT;
              IF GLEntryNoFromVAT <> 0 THEN
                GLEntryVATEntryLink.InsertLink(GLEntryNoFromVAT,VATEntry2."Entry No.");
              GLEntryNoFromVAT := 0;
              TempVATEntry.DELETE;
              IncrNextVATEntryNo;
            END;

            IF VATPostingSetup."Adjust for Payment Discount" AND NOT IsNotPayment(VATEntry."Document Type") AND
               (VATPostingSetup."VAT Calculation Type" =
                VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT") AND
               (VATEntry."Unrealized VAT Entry No." = 0) AND UnapplyVATEntries AND (VATEntry.Amount <> 0)
            THEN BEGIN
              CASE VATEntryType OF
                VATEntry.Type::Sale:
                  AccNo := VATPostingSetup.GetSalesAccount(FALSE);
                VATEntry.Type::Purchase:
                  AccNo := VATPostingSetup.GetPurchAccount(FALSE);
              END;
              PostPmtDiscountVATByUnapply(GenJnlLine,VATPostingSetup.GetRevChargeAccount(FALSE),AccNo,VATEntry);
            END;
          END;
        UNTIL VATEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcAddCurrForUnapplication@100(Date@1001 : Date;Amt@1002 : Decimal) : Decimal;
    VAR
      AddCurrency@1000 : Record 4;
      CurrExchRate@1003 : Record 330;
    BEGIN
      IF AddCurrencyCode = '' THEN
        EXIT;
      AddCurrency.GET(AddCurrencyCode);
      AddCurrency.TESTFIELD("Amount Rounding Precision");

      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
          //Date,AddCurrencyCode,Amt,CurrExchRate.ExchangeRate(Date,AddCurrencyCode)), //**4PS.o
          //**4PS.sn
            0, '',Date,AddCurrencyCode,Amt,CurrExchRate.ExchangeRate(
              0, '', Date,AddCurrencyCode,VATEntry.Type = VATEntry.Type::Sale),VATEntry.Type = VATEntry.Type::Sale),
          //**4PS.en
            AddCurrency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE CalcVATAmountFromVATEntry@99(AmountLCY@1000 : Decimal;VAR VATEntry@1001 : Record 254;CurrencyLCY@1003 : Record 4) VATAmountLCY : Decimal;
    BEGIN
      WITH VATEntry DO
        IF (AmountLCY = Base) OR (Base = 0) THEN BEGIN
          VATAmountLCY := Amount;
          DELETE;
        END ELSE BEGIN
          VATAmountLCY :=
            ROUND(
              Amount * AmountLCY / Base,
              CurrencyLCY."Amount Rounding Precision",
              CurrencyLCY.VATRoundingDirection);
          Base := Base - AmountLCY;
          Amount := Amount - VATAmountLCY;
          MODIFY;
        END;
    END;

    LOCAL PROCEDURE InsertDtldCustLedgEntryUnapply@91(GenJnlLine@1002 : Record 81;VAR NewDtldCustLedgEntry@1000 : Record 379;OldDtldCustLedgEntry@1001 : Record 379;VAR NextDtldLedgEntryNo@1003 : Integer);
    BEGIN
      NewDtldCustLedgEntry := OldDtldCustLedgEntry;
      WITH NewDtldCustLedgEntry DO BEGIN
        "Entry No." := NextDtldLedgEntryNo;
        "Posting Date" := GenJnlLine."Posting Date";
        "Transaction No." := NextTransactionNo;
        "Application No." := 0;
        Amount := -OldDtldCustLedgEntry.Amount;
        "Amount (LCY)" := -OldDtldCustLedgEntry."Amount (LCY)";
        "Debit Amount" := -OldDtldCustLedgEntry."Debit Amount";
        "Credit Amount" := -OldDtldCustLedgEntry."Credit Amount";
        "Debit Amount (LCY)" := -OldDtldCustLedgEntry."Debit Amount (LCY)";
        "Credit Amount (LCY)" := -OldDtldCustLedgEntry."Credit Amount (LCY)";
        Unapplied := TRUE;
        "Unapplied by Entry No." := OldDtldCustLedgEntry."Entry No.";
        "Document No." := GenJnlLine."Document No.";
        "Source Code" := GenJnlLine."Source Code";
        "User ID" := USERID;
        OnBeforeInsertDtldCustLedgEntryUnapply(NewDtldCustLedgEntry,GenJnlLine,OldDtldCustLedgEntry);
        INSERT(TRUE);
      END;
      NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
    END;

    LOCAL PROCEDURE InsertDtldVendLedgEntryUnapply@90(GenJnlLine@1003 : Record 81;VAR NewDtldVendLedgEntry@1002 : Record 380;OldDtldVendLedgEntry@1001 : Record 380;VAR NextDtldLedgEntryNo@1000 : Integer);
    BEGIN
      NewDtldVendLedgEntry := OldDtldVendLedgEntry;
      WITH NewDtldVendLedgEntry DO BEGIN
        "Entry No." := NextDtldLedgEntryNo;
        "Posting Date" := GenJnlLine."Posting Date";
        "Transaction No." := NextTransactionNo;
        "Application No." := 0;
        Amount := -OldDtldVendLedgEntry.Amount;
        "Amount (LCY)" := -OldDtldVendLedgEntry."Amount (LCY)";
        "Debit Amount" := -OldDtldVendLedgEntry."Debit Amount";
        "Credit Amount" := -OldDtldVendLedgEntry."Credit Amount";
        "Debit Amount (LCY)" := -OldDtldVendLedgEntry."Debit Amount (LCY)";
        "Credit Amount (LCY)" := -OldDtldVendLedgEntry."Credit Amount (LCY)";
        Unapplied := TRUE;
        "Unapplied by Entry No." := OldDtldVendLedgEntry."Entry No.";
        "Document No." := GenJnlLine."Document No.";
        "Source Code" := GenJnlLine."Source Code";
        "User ID" := USERID;
        OnBeforeInsertDtldVendLedgEntryUnapply(NewDtldVendLedgEntry,GenJnlLine,OldDtldVendLedgEntry);
        INSERT(TRUE);
      END;
      NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
    END;

    LOCAL PROCEDURE InsertDtldEmplLedgEntryUnapply@140(GenJnlLine@1003 : Record 81;VAR NewDtldEmplLedgEntry@1002 : Record 5223;OldDtldEmplLedgEntry@1001 : Record 5223;VAR NextDtldLedgEntryNo@1000 : Integer);
    BEGIN
      NewDtldEmplLedgEntry := OldDtldEmplLedgEntry;
      WITH NewDtldEmplLedgEntry DO BEGIN
        "Entry No." := NextDtldLedgEntryNo;
        "Posting Date" := GenJnlLine."Posting Date";
        "Transaction No." := NextTransactionNo;
        "Application No." := 0;
        Amount := -OldDtldEmplLedgEntry.Amount;
        "Amount (LCY)" := -OldDtldEmplLedgEntry."Amount (LCY)";
        "Debit Amount" := -OldDtldEmplLedgEntry."Debit Amount";
        "Credit Amount" := -OldDtldEmplLedgEntry."Credit Amount";
        "Debit Amount (LCY)" := -OldDtldEmplLedgEntry."Debit Amount (LCY)";
        "Credit Amount (LCY)" := -OldDtldEmplLedgEntry."Credit Amount (LCY)";
        Unapplied := TRUE;
        "Unapplied by Entry No." := OldDtldEmplLedgEntry."Entry No.";
        "Document No." := GenJnlLine."Document No.";
        "Source Code" := GenJnlLine."Source Code";
        "User ID" := USERID;
        OnBeforeInsertDtldEmplLedgEntryUnapply(NewDtldEmplLedgEntry,GenJnlLine,OldDtldEmplLedgEntry);
        INSERT(TRUE);
      END;
      NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
    END;

    LOCAL PROCEDURE InsertTempVATEntry@88(GenJnlLine@1002 : Record 81;VATEntry@1000 : Record 254;VAR TempVATEntryNo@1001 : Integer;VAR TempVATEntry@1003 : TEMPORARY Record 254);
    BEGIN
      TempVATEntry := VATEntry;
      WITH TempVATEntry DO BEGIN
        "Entry No." := TempVATEntryNo;
        TempVATEntryNo := TempVATEntryNo + 1;
        "Closed by Entry No." := 0;
        Closed := FALSE;
        CopyAmountsFromVATEntry(VATEntry,TRUE);
        "Posting Date" := GenJnlLine."Posting Date";
        "Document No." := GenJnlLine."Document No.";
        "User ID" := USERID;
        "Transaction No." := NextTransactionNo;
        OnInsertTempVATEntryOnBeforeInsert(TempVATEntry,GenJnlLine);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ProcessTempVATEntry@87(DtldCVLedgEntryBuf@1000 : Record 383;VAR TempVATEntry@1004 : TEMPORARY Record 254);
    VAR
      VATEntrySaved@1005 : Record 254;
      VATBaseSum@1003 : ARRAY [3] OF Decimal;
      DeductedVATBase@1006 : Decimal;
      EntryNoBegin@1002 : ARRAY [3] OF Integer;
      i@1001 : Integer;
      SummarizedVAT@1007 : Boolean;
    BEGIN
      IF NOT (DtldCVLedgEntryBuf."Entry Type" IN
              [DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)",
               DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)",
               DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)"])
      THEN
        EXIT;

      DeductedVATBase := 0;
      TempVATEntry.RESET;
      TempVATEntry.SETRANGE("Entry No.",0,999999);
      TempVATEntry.SETRANGE("Gen. Bus. Posting Group",DtldCVLedgEntryBuf."Gen. Bus. Posting Group");
      TempVATEntry.SETRANGE("Gen. Prod. Posting Group",DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
      TempVATEntry.SETRANGE("VAT Bus. Posting Group",DtldCVLedgEntryBuf."VAT Bus. Posting Group");
      TempVATEntry.SETRANGE("VAT Prod. Posting Group",DtldCVLedgEntryBuf."VAT Prod. Posting Group");
      IF TempVATEntry.FINDSET THEN
        REPEAT
          CASE TRUE OF
            SummarizedVAT AND (VATBaseSum[3] + TempVATEntry.Base = DtldCVLedgEntryBuf."Amount (LCY)" - DeductedVATBase):
              i := 4;
            SummarizedVAT AND (VATBaseSum[2] + TempVATEntry.Base = DtldCVLedgEntryBuf."Amount (LCY)" - DeductedVATBase):
              i := 3;
            SummarizedVAT AND (VATBaseSum[1] + TempVATEntry.Base = DtldCVLedgEntryBuf."Amount (LCY)" - DeductedVATBase):
              i := 2;
            TempVATEntry.Base = DtldCVLedgEntryBuf."Amount (LCY)" - DeductedVATBase:
              i := 1;
            ELSE
              i := 0;
          END;
          IF i > 0 THEN BEGIN
            TempVATEntry.RESET;
            IF i > 1 THEN BEGIN
              IF EntryNoBegin[i - 1] < TempVATEntry."Entry No." THEN
                TempVATEntry.SETRANGE("Entry No.",EntryNoBegin[i - 1],TempVATEntry."Entry No.")
              ELSE
                TempVATEntry.SETRANGE("Entry No.",TempVATEntry."Entry No.",EntryNoBegin[i - 1]);
            END ELSE
              TempVATEntry.SETRANGE("Entry No.",TempVATEntry."Entry No.");
            TempVATEntry.FINDSET;
            REPEAT
              VATEntrySaved := TempVATEntry;
              CASE DtldCVLedgEntryBuf."Entry Type" OF
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
                  TempVATEntry.RENAME(TempVATEntry."Entry No." + 3000000);
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
                  TempVATEntry.RENAME(TempVATEntry."Entry No." + 2000000);
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
                  TempVATEntry.RENAME(TempVATEntry."Entry No." + 1000000);
              END;
              TempVATEntry := VATEntrySaved;
              DeductedVATBase += TempVATEntry.Base;
            UNTIL TempVATEntry.NEXT = 0;
            FOR i := 1 TO 3 DO BEGIN
              VATBaseSum[i] := 0;
              EntryNoBegin[i] := 0;
              SummarizedVAT := FALSE;
            END;
            TempVATEntry.SETRANGE("Entry No.",0,999999);
          END ELSE BEGIN
            VATBaseSum[3] += TempVATEntry.Base;
            VATBaseSum[2] := VATBaseSum[1] + TempVATEntry.Base;
            VATBaseSum[1] := TempVATEntry.Base;
            IF EntryNoBegin[3] > 0 THEN
              EntryNoBegin[3] := TempVATEntry."Entry No.";
            EntryNoBegin[2] := EntryNoBegin[1];
            EntryNoBegin[1] := TempVATEntry."Entry No.";
            SummarizedVAT := TRUE;
          END;
        UNTIL TempVATEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE ProcessTempVATEntryCust@327(VAR DetailedCustLedgEntry@1001 : Record 379;VAR TempVATEntry@1000 : TEMPORARY Record 254);
    VAR
      DetailedCVLedgEntryBuffer@1004 : Record 383;
    BEGIN
      IF NOT DetailedCustLedgEntry.FINDSET THEN
        EXIT;
      REPEAT
        DetailedCVLedgEntryBuffer.INIT;
        DetailedCVLedgEntryBuffer.TRANSFERFIELDS(DetailedCustLedgEntry);
        ProcessTempVATEntry(DetailedCVLedgEntryBuffer,TempVATEntry);
      UNTIL DetailedCustLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE ProcessTempVATEntryVend@296(VAR DetailedVendorLedgEntry@1001 : Record 380;VAR TempVATEntry@1000 : TEMPORARY Record 254);
    VAR
      DetailedCVLedgEntryBuffer@1004 : Record 383;
    BEGIN
      IF NOT DetailedVendorLedgEntry.FINDSET THEN
        EXIT;
      REPEAT
        DetailedCVLedgEntryBuffer.INIT;
        DetailedCVLedgEntryBuffer.TRANSFERFIELDS(DetailedVendorLedgEntry);
        ProcessTempVATEntry(DetailedCVLedgEntryBuffer,TempVATEntry);
      UNTIL DetailedVendorLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateCustLedgEntry@80(DtldCustLedgEntry@1000 : Record 379);
    VAR
      CustLedgEntry@1001 : Record 21;
      SEPADirectDebitMandate@1100528500 : Record 1230;
    BEGIN
      IF DtldCustLedgEntry."Entry Type" <> DtldCustLedgEntry."Entry Type"::Application THEN
        EXIT;

      CustLedgEntry.GET(DtldCustLedgEntry."Cust. Ledger Entry No.");
      CustLedgEntry."Remaining Pmt. Disc. Possible" := DtldCustLedgEntry."Remaining Pmt. Disc. Possible";
      CustLedgEntry."Max. Payment Tolerance" := DtldCustLedgEntry."Max. Payment Tolerance";
      CustLedgEntry."Accepted Payment Tolerance" := 0;
      IF NOT CustLedgEntry.Open THEN BEGIN
        CustLedgEntry.Open := TRUE;
        CustLedgEntry."Closed by Entry No." := 0;
        CustLedgEntry."Closed at Date" := 0D;
        CustLedgEntry."Closed by Amount" := 0;
        CustLedgEntry."Closed by Amount (LCY)" := 0;
        CustLedgEntry."Closed by Currency Code" := '';
        CustLedgEntry."Closed by Currency Amount" := 0;
        CustLedgEntry."Pmt. Disc. Given (LCY)" := 0;
        CustLedgEntry."Pmt. Tolerance (LCY)" := 0;
        CustLedgEntry."Calculate Interest" := FALSE;
        //**4PS.sn DP00613
        IF (CustLedgEntry."Direct Debit Mandate ID" <> '') AND
           (CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Invoice) THEN BEGIN
          SEPADirectDebitMandate.GET(CustLedgEntry."Direct Debit Mandate ID");
          SEPADirectDebitMandate.RollBackSequenceType;
        END;
        //DP00674.sn
        IF CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Invoice THEN
          CustLedgEntry."Number of Refunds" := CustLedgEntry."Number of Refunds" + 1;
        //DP00674.en
        //**4PS.en
      END;

      OnBeforeCustLedgEntryModify(CustLedgEntry,DtldCustLedgEntry);
      CustLedgEntry.MODIFY;
    END;

    LOCAL PROCEDURE UpdateVendLedgEntry@76(DtldVendLedgEntry@1000 : Record 380);
    VAR
      VendLedgEntry@1001 : Record 25;
    BEGIN
      IF DtldVendLedgEntry."Entry Type" <> DtldVendLedgEntry."Entry Type"::Application THEN
        EXIT;

      VendLedgEntry.GET(DtldVendLedgEntry."Vendor Ledger Entry No.");
      VendLedgEntry."Remaining Pmt. Disc. Possible" := DtldVendLedgEntry."Remaining Pmt. Disc. Possible";
      VendLedgEntry."Max. Payment Tolerance" := DtldVendLedgEntry."Max. Payment Tolerance";
      VendLedgEntry."Accepted Payment Tolerance" := 0;
      IF NOT VendLedgEntry.Open THEN BEGIN
        VendLedgEntry.Open := TRUE;
        VendLedgEntry."Closed by Entry No." := 0;
        VendLedgEntry."Closed at Date" := 0D;
        VendLedgEntry."Closed by Amount" := 0;
        VendLedgEntry."Closed by Amount (LCY)" := 0;
        VendLedgEntry."Closed by Currency Code" := '';
        VendLedgEntry."Closed by Currency Amount" := 0;
        VendLedgEntry."Pmt. Disc. Rcd.(LCY)" := 0;
        VendLedgEntry."Pmt. Tolerance (LCY)" := 0;
      END;

      OnBeforeVendLedgEntryModify(VendLedgEntry,DtldVendLedgEntry);
      VendLedgEntry.MODIFY;
    END;

    LOCAL PROCEDURE UpdateEmplLedgEntry@151(DtldEmplLedgEntry@1000 : Record 5223);
    VAR
      EmplLedgEntry@1001 : Record 5222;
    BEGIN
      IF DtldEmplLedgEntry."Entry Type" <> DtldEmplLedgEntry."Entry Type"::Application THEN
        EXIT;

      EmplLedgEntry.GET(DtldEmplLedgEntry."Employee Ledger Entry No.");
      IF NOT EmplLedgEntry.Open THEN BEGIN
        EmplLedgEntry.Open := TRUE;
        EmplLedgEntry."Closed by Entry No." := 0;
        EmplLedgEntry."Closed at Date" := 0D;
        EmplLedgEntry."Closed by Amount" := 0;
        EmplLedgEntry."Closed by Amount (LCY)" := 0;
      END;

      OnBeforeEmplLedgEntryModify(EmplLedgEntry,DtldEmplLedgEntry);
      EmplLedgEntry.MODIFY;
    END;

    LOCAL PROCEDURE UpdateCalcInterest@28(VAR CVLedgEntryBuf@1000 : Record 382);
    VAR
      CustLedgEntry@1001 : Record 21;
      CVLedgEntryBuf2@1002 : Record 382;
    BEGIN
      WITH CVLedgEntryBuf DO BEGIN
        IF CustLedgEntry.GET("Closed by Entry No.") THEN BEGIN
          CVLedgEntryBuf2.TRANSFERFIELDS(CustLedgEntry);
          UpdateCalcInterest2(CVLedgEntryBuf,CVLedgEntryBuf2);
        END;
        CustLedgEntry.SETCURRENTKEY("Closed by Entry No.");
        CustLedgEntry.SETRANGE("Closed by Entry No.","Entry No.");
        IF CustLedgEntry.FINDSET THEN
          REPEAT
            CVLedgEntryBuf2.TRANSFERFIELDS(CustLedgEntry);
            UpdateCalcInterest2(CVLedgEntryBuf,CVLedgEntryBuf2);
          UNTIL CustLedgEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateCalcInterest2@27(VAR CVLedgEntryBuf@1000 : Record 382;VAR CVLedgEntryBuf2@1001 : Record 382);
    BEGIN
      WITH CVLedgEntryBuf DO
        IF "Due Date" < CVLedgEntryBuf2."Document Date" THEN
          "Calculate Interest" := TRUE;
    END;

    LOCAL PROCEDURE GLCalcAddCurrency@35(Amount@1003 : Decimal;AddCurrAmount@1000 : Decimal;OldAddCurrAmount@1004 : Decimal;UseAddCurrAmount@1001 : Boolean;GenJnlLine@1002 : Record 81) : Decimal;
    BEGIN
      IF (AddCurrencyCode <> '') AND
         (GenJnlLine."Additional-Currency Posting" = GenJnlLine."Additional-Currency Posting"::None)
      THEN BEGIN
        IF (GenJnlLine."Source Currency Code" = AddCurrencyCode) AND UseAddCurrAmount THEN
          EXIT(AddCurrAmount);

        EXIT(ExchangeAmtLCYToFCY2(Amount));
      END;
      EXIT(OldAddCurrAmount);
    END;

    LOCAL PROCEDURE HandleAddCurrResidualGLEntry@38(GenJnlLine@1003 : Record 81;GLEntry2@1000 : Record 17);
    VAR
      GLAcc@1002 : Record 15;
      GLEntry@1004 : Record 17;
    BEGIN
      IF AddCurrencyCode = '' THEN
        EXIT;

      TotalAddCurrAmount := TotalAddCurrAmount + GLEntry2."Additional-Currency Amount";
      TotalAmount := TotalAmount + GLEntry2.Amount;

      IF (GenJnlLine."Additional-Currency Posting" = GenJnlLine."Additional-Currency Posting"::None) AND
         (TotalAmount = 0) AND (TotalAddCurrAmount <> 0) AND
         CheckNonAddCurrCodeOccurred(GenJnlLine."Source Currency Code")
      THEN BEGIN
        GLEntry.INIT;
        GLEntry.CopyFromGenJnlLine(GenJnlLine);
        GLEntry."External Document No." := '';
        GLEntry.Description :=
          COPYSTR(
            STRSUBSTNO(
              ResidualRoundingErr,
              GLEntry.FIELDCAPTION("Additional-Currency Amount")),
            1,MAXSTRLEN(GLEntry.Description));
        GLEntry."Source Type" := 0;
        GLEntry."Source No." := '';
        GLEntry."Job No." := '';
        GLEntry.Quantity := 0;
        GLEntry."Entry No." := NextEntryNo;
        GLEntry."Transaction No." := NextTransactionNo;
        IF TotalAddCurrAmount < 0 THEN
          GLEntry."G/L Account No." := AddCurrency."Residual Losses Account"
        ELSE
          GLEntry."G/L Account No." := AddCurrency."Residual Gains Account";
        GLEntry.Amount := 0;
        GLEntry."System-Created Entry" := TRUE;
        GLEntry."Additional-Currency Amount" := -TotalAddCurrAmount;
        GLAcc.GET(GLEntry."G/L Account No.");
        GLAcc.TESTFIELD(Blocked,FALSE);
        GLAcc.TESTFIELD("Account Type",GLAcc."Account Type"::Posting);
        OnHandleAddCurrResidualGLEntryOnBeforeInsertGLEntry(GenJnlLine,GLEntry);
        InsertGLEntry(GenJnlLine,GLEntry,FALSE);

        CheckGLAccDimError(GenJnlLine,GLEntry."G/L Account No.");

        TotalAddCurrAmount := 0;
      END;

      OnAfterHandleAddCurrResidualGLEntry(GenJnlLine,GLEntry2);
    END;

    LOCAL PROCEDURE CalcLCYToAddCurr@42(AmountLCY@1000 : Decimal) : Decimal;
    BEGIN
      IF AddCurrencyCode = '' THEN
        EXIT;

      EXIT(ExchangeAmtLCYToFCY2(AmountLCY));
    END;

    LOCAL PROCEDURE GetCurrencyExchRate@39(GenJnlLine@1001 : Record 81);
    VAR
      NewCurrencyDate@1000 : Date;
    BEGIN
      IF AddCurrencyCode = '' THEN
        EXIT;

      AddCurrency.GET(AddCurrencyCode);
      AddCurrency.TESTFIELD("Amount Rounding Precision");
      AddCurrency.TESTFIELD("Residual Gains Account");
      AddCurrency.TESTFIELD("Residual Losses Account");

      // NTR Start, NAVSE
        IF GenJnlLine."Source Posting Date" <> 0D THEN BEGIN
          NewCurrencyDate   := GenJnlLine."Source Posting Date";
          UseCurrFactorOnly := TRUE;
        END ELSE
          NewCurrencyDate := GenJnlLine."Posting Date";
      // NTR End, NAVSE

      IF GenJnlLine."Reversing Entry" THEN
        NewCurrencyDate := NewCurrencyDate - 1;
      IF (NewCurrencyDate <> CurrencyDate) OR
         UseCurrFactorOnly
      THEN BEGIN
        UseCurrFactorOnly := FALSE;
        CurrencyDate := NewCurrencyDate;
        CurrencyFactor :=
        //CurrExchRate.ExchangeRate(CurrencyDate,AddCurrencyCode); //**4PS.o
          CurrExchRate.ExchangeRate(0, '',CurrencyDate,AddCurrencyCode,VATEntry.Type = VATEntry.Type::Sale); //**4PS.n
      END;
      IF (GenJnlLine."FA Add.-Currency Factor" <> 0) AND
         (GenJnlLine."FA Add.-Currency Factor" <> CurrencyFactor)
      THEN BEGIN
        UseCurrFactorOnly := TRUE;
        CurrencyDate := 0D;
        CurrencyFactor := GenJnlLine."FA Add.-Currency Factor";
      END;
    END;

    LOCAL PROCEDURE ExchangeAmtLCYToFCY2@40(Amount@1000 : Decimal) : Decimal;
    BEGIN
      IF UseCurrFactorOnly THEN
        EXIT(
          ROUND(
            CurrExchRate.ExchangeAmtLCYToFCYOnlyFactor(Amount,CurrencyFactor),
            AddCurrency."Amount Rounding Precision"));
      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
          //CurrencyDate,AddCurrencyCode,Amount,CurrencyFactor), //**4PS.o
            0, '',CurrencyDate,AddCurrencyCode,Amount,CurrencyFactor,VATEntry.Type = VATEntry.Type::Sale), //**4PS.n
          AddCurrency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE CheckNonAddCurrCodeOccurred@54(CurrencyCode@1000 : Code[10]) : Boolean;
    BEGIN
      NonAddCurrCodeOccured :=
        NonAddCurrCodeOccured OR (AddCurrencyCode <> CurrencyCode);
      EXIT(NonAddCurrCodeOccured);
    END;

    LOCAL PROCEDURE TotalVATAmountOnJnlLines@1130(GenJnlLine@1000 : Record 81) TotalVATAmount : Decimal;
    VAR
      GenJnlLine2@1001 : Record 81;
    BEGIN
      WITH GenJnlLine2 DO BEGIN
        SETRANGE("Source Code",GenJnlLine."Source Code");
        SETRANGE("Document No.",GenJnlLine."Document No.");
        SETRANGE("Posting Date",GenJnlLine."Posting Date");
        CALCSUMS("VAT Amount (LCY)","Bal. VAT Amount (LCY)");
        TotalVATAmount := "VAT Amount (LCY)" - "Bal. VAT Amount (LCY)";
      END;
      EXIT(TotalVATAmount);
    END;

    [External]
    PROCEDURE SetGLRegReverse@8(VAR ReverseGLReg@1000 : Record 45);
    BEGIN
      GLReg.Reversed := TRUE;
      ReverseGLReg := GLReg;
    END;

    LOCAL PROCEDURE InsertVATEntriesFromTemp@83(VAR DtldCVLedgEntryBuf@1000 : Record 383;GLEntry@1003 : Record 17);
    VAR
      Complete@1001 : Boolean;
      LinkedAmount@1002 : Decimal;
      FirstEntryNo@1006 : Integer;
      LastEntryNo@1004 : Integer;
    BEGIN
      TempVATEntry.RESET;
      TempVATEntry.SETRANGE("Gen. Bus. Posting Group",GLEntry."Gen. Bus. Posting Group");
      TempVATEntry.SETRANGE("Gen. Prod. Posting Group",GLEntry."Gen. Prod. Posting Group");
      TempVATEntry.SETRANGE("VAT Bus. Posting Group",GLEntry."VAT Bus. Posting Group");
      TempVATEntry.SETRANGE("VAT Prod. Posting Group",GLEntry."VAT Prod. Posting Group");
      CASE DtldCVLedgEntryBuf."Entry Type" OF
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
          BEGIN
            FirstEntryNo := 1000000;
            LastEntryNo := 1999999;
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
          BEGIN
            FirstEntryNo := 2000000;
            LastEntryNo := 2999999;
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
          BEGIN
            FirstEntryNo := 3000000;
            LastEntryNo := 3999999;
          END;
      END;
      TempVATEntry.SETRANGE("Entry No.",FirstEntryNo,LastEntryNo);
      IF TempVATEntry.FINDSET THEN
        REPEAT
          VATEntry := TempVATEntry;
          VATEntry."Entry No." := NextVATEntryNo;
          OnInsertVATEntriesFromTempOnBeforeVATEntryInsert(VATEntry,TempVATEntry);
          VATEntry.INSERT(TRUE);
          NextVATEntryNo := NextVATEntryNo + 1;
          IF VATEntry."Unrealized VAT Entry No." = 0 THEN
            GLEntryVATEntryLink.InsertLink(GLEntry."Entry No.",VATEntry."Entry No.");
          LinkedAmount += VATEntry.Amount + VATEntry.Base;
          Complete := LinkedAmount = -(DtldCVLedgEntryBuf."Amount (LCY)" + DtldCVLedgEntryBuf."VAT Amount (LCY)");
          LastEntryNo := TempVATEntry."Entry No.";
        UNTIL Complete OR (TempVATEntry.NEXT = 0);

      TempVATEntry.SETRANGE("Entry No.",FirstEntryNo,LastEntryNo);
      TempVATEntry.DELETEALL;
    END;

    [External]
    PROCEDURE ABSMin@84(Decimal1@1000 : Decimal;Decimal2@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(Decimal1) < ABS(Decimal2) THEN
        EXIT(Decimal1);
      EXIT(Decimal2);
    END;

    LOCAL PROCEDURE GetApplnRoundPrecision@92(NewCVLedgEntryBuf@1002 : Record 382;OldCVLedgEntryBuf@1003 : Record 382) : Decimal;
    VAR
      ApplnCurrency@1000 : Record 4;
      CurrencyCode@1005 : Code[10];
    BEGIN
      IF NewCVLedgEntryBuf."Currency Code" <> '' THEN
        CurrencyCode := NewCVLedgEntryBuf."Currency Code"
      ELSE
        CurrencyCode := OldCVLedgEntryBuf."Currency Code";
      IF CurrencyCode = '' THEN
        EXIT(0);
      ApplnCurrency.GET(CurrencyCode);
      IF ApplnCurrency."Appln. Rounding Precision" <> 0 THEN
        EXIT(ApplnCurrency."Appln. Rounding Precision");
      EXIT(GLSetup."Appln. Rounding Precision");
    END;

    LOCAL PROCEDURE GetGLSetup@19();
    BEGIN
      IF GLSetupRead THEN
        EXIT;

      GLSetup.GET;
      GLSetupRead := TRUE;

      AddCurrencyCode := GLSetup."Additional Reporting Currency";
    END;

    LOCAL PROCEDURE ReadGLSetup@17(VAR NewGLSetup@1000 : Record 98);
    BEGIN
      NewGLSetup := GLSetup;
    END;

    LOCAL PROCEDURE CheckSalesExtDocNo@115(GenJnlLine@1001 : Record 81);
    VAR
      SalesSetup@1000 : Record 311;
      OldCustLedgerEntry@1100528200 : Record 21;
    BEGIN
      SalesSetup.GET;
      IF NOT SalesSetup."Ext. Doc. No. Mandatory" THEN
        EXIT;

      IF GenJnlLine."Document Type" IN
         [GenJnlLine."Document Type"::Invoice,
          GenJnlLine."Document Type"::"Credit Memo",
          GenJnlLine."Document Type"::Payment,
          GenJnlLine."Document Type"::Refund,
          GenJnlLine."Document Type"::" "]
      THEN BEGIN //**4PS.c
        GenJnlLine.TESTFIELD("External Document No.");
      //**4PS.sn
        IF SalesSetup."Validate Ext. Doc. No." THEN BEGIN
          OldCustLedgerEntry.RESET;
          OldCustLedgerEntry.SETRANGE("External Document No.",GenJnlLine."External Document No.");
          OldCustLedgerEntry.SETRANGE("Document Type",GenJnlLine."Document Type");
          OldCustLedgerEntry.SETRANGE("Customer No.",GenJnlLine."Account No.");
          OldCustLedgerEntry.SETRANGE(Reversed,FALSE);
          OldCustLedgerEntry.SETRANGE("Document Date",CALCDATE('<-CY>',GenJnlLine."Document Date"),CALCDATE('<CY>',GenJnlLine."Document Date"));
          IF NOT OldCustLedgerEntry.ISEMPTY THEN
            ERROR(Text11012004,GenJnlLine."Document Type",GenJnlLine."External Document No.");
        END;
      END;
      //**4PS.en
    END;

    LOCAL PROCEDURE CheckPurchExtDocNo@107(GenJnlLine@1003 : Record 81);
    VAR
      PurchSetup@1002 : Record 312;
      OldVendLedgEntry@1001 : Record 25;
      VendorMgt@1000 : Codeunit 1312;
    BEGIN
      PurchSetup.GET;
      IF NOT (PurchSetup."Ext. Doc. No. Mandatory" OR (GenJnlLine."External Document No." <> '')) THEN
        EXIT;

      GenJnlLine.TESTFIELD("External Document No.");

      //>>141117
      IF ExFlowVend.READPERMISSION THEN
        IF ExFlowVend.GET(GenJnlLine."Account No.") THEN
          IF ExFlowVend."Do not check Duplicate Invoice" THEN
            EXIT;
      //<<141117

      OldVendLedgEntry.RESET;
      VendorMgt.SetFilterForExternalDocNo(
        OldVendLedgEntry,GenJnlLine."Document Type",GenJnlLine."External Document No.",
        GenJnlLine."Account No.",GenJnlLine."Document Date");

      //**4PS.sn
      OldVendLedgEntry.SETRANGE("Document Date",CALCDATE('<-CY>',GenJnlLine."Document Date"),CALCDATE('<CY>',GenJnlLine."Document Date"));
      //**4PS.en

      IF NOT OldVendLedgEntry.ISEMPTY THEN
        ERROR(
          PurchaseAlreadyExistsErr,
          GenJnlLine."Document Type",GenJnlLine."External Document No.");
    END;

    LOCAL PROCEDURE CheckDimValueForDisposal@93(GenJnlLine@1001 : Record 81;AccountNo@1002 : Code[20]);
    VAR
      DimMgt@1000 : Codeunit 408;
      TableID@1025 : ARRAY [10] OF Integer;
      AccNo@1026 : ARRAY [10] OF Code[20];
    BEGIN
      IF ((GenJnlLine.Amount = 0) OR (GenJnlLine."Amount (LCY)" = 0)) AND
         (GenJnlLine."FA Posting Type" = GenJnlLine."FA Posting Type"::Disposal)
      THEN BEGIN
        TableID[1] := DimMgt.TypeToTableID1(GenJnlLine."Account Type"::"G/L Account");
        AccNo[1] := AccountNo;
        IF NOT DimMgt.CheckDimValuePosting(TableID,AccNo,GenJnlLine."Dimension Set ID") THEN
          ERROR(DimMgt.GetDimValuePostingErr);
      END;
    END;

    [External]
    PROCEDURE SetOverDimErr@79();
    BEGIN
      OverrideDimErr := TRUE;
    END;

    LOCAL PROCEDURE CheckGLAccDimError@97(GenJnlLine@1005 : Record 81;GLAccNo@1004 : Code[20]);
    VAR
      DimMgt@1002 : Codeunit 408;
      TableID@1001 : ARRAY [10] OF Integer;
      AccNo@1000 : ARRAY [10] OF Code[20];
    BEGIN
      OnBeforeCheckGLAccDimError(GenJnlLine,GLAccNo);

      IF (GenJnlLine.Amount = 0) AND (GenJnlLine."Amount (LCY)" = 0) THEN
        EXIT;

      TableID[1] := DATABASE::"G/L Account";
      AccNo[1] := GLAccNo;
      //DimMgt.SetCompany(GenJnlLine."Receiving Company"); //**4PS.n T005529 //**4PS.o C020939
      IF DimMgt.CheckDimValuePosting(TableID,AccNo,GenJnlLine."Dimension Set ID") THEN
        EXIT;

      IF GenJnlLine."Line No." <> 0 THEN
        ERROR(
          DimensionUsedErr,
          GenJnlLine.TABLECAPTION,GenJnlLine."Journal Template Name",
          GenJnlLine."Journal Batch Name",GenJnlLine."Line No.",
          DimMgt.GetDimValuePostingErr);

      ERROR(DimMgt.GetDimValuePostingErr);
    END;

    LOCAL PROCEDURE CalculateCurrentBalance@95(AccountNo@1000 : Code[20];BalAccountNo@1001 : Code[20];InclVATAmount@1002 : Boolean;AmountLCY@1004 : Decimal;VATAmount@1005 : Decimal);
    BEGIN
      IF (AccountNo <> '') AND (BalAccountNo <> '') THEN
        EXIT;

      IF AccountNo = BalAccountNo THEN
        EXIT;

      IF NOT InclVATAmount THEN
        VATAmount := 0;

      IF BalAccountNo <> '' THEN
        CurrentBalance -= AmountLCY + VATAmount
      ELSE
        CurrentBalance += AmountLCY + VATAmount;
    END;

    LOCAL PROCEDURE GetCurrency@191(VAR Currency@1000 : Record 4;CurrencyCode@1001 : Code[10]);
    BEGIN
      IF Currency.Code <> CurrencyCode THEN BEGIN
        IF CurrencyCode = '' THEN
          CLEAR(Currency)
        ELSE
          Currency.GET(CurrencyCode);
      END;
    END;

    LOCAL PROCEDURE CollectAdjustment@181(VAR AdjAmount@1003 : ARRAY [4] OF Decimal;Amount@1004 : Decimal;AmountAddCurr@1005 : Decimal);
    VAR
      Offset@1001 : Integer;
    BEGIN
      Offset := GetAdjAmountOffset(Amount,AmountAddCurr);
      AdjAmount[Offset] += Amount;
      AdjAmount[Offset + 1] += AmountAddCurr;
    END;

    LOCAL PROCEDURE HandleDtldAdjustment@182(GenJnlLine@1008 : Record 81;VAR GLEntry@1002 : Record 17;AdjAmount@1010 : ARRAY [4] OF Decimal;TotalAmountLCY@1004 : Decimal;TotalAmountAddCurr@1005 : Decimal;GLAccNo@1007 : Code[20]);
    VAR
      IsHandled@1000 : Boolean;
    BEGIN
      IF NOT PostDtldAdjustment(
           GenJnlLine,GLEntry,AdjAmount,
           TotalAmountLCY,TotalAmountAddCurr,GLAccNo,
           GetAdjAmountOffset(TotalAmountLCY,TotalAmountAddCurr))
      THEN BEGIN
        IsHandled := FALSE;
        OnHandleDtldAdjustmentOnBeforeInitGLEntry(GenJnlLine,GLEntry,TotalAmountLCY,TotalAmountAddCurr,GLAccNo,IsHandled);
        IF NOT IsHandled THEN
          InitGLEntry(GenJnlLine,GLEntry,GLAccNo,TotalAmountLCY,TotalAmountAddCurr,TRUE,TRUE);
      END;
    END;

    LOCAL PROCEDURE PostDtldAdjustment@96(GenJnlLine@1006 : Record 81;VAR GLEntry@1005 : Record 17;AdjAmount@1004 : ARRAY [4] OF Decimal;TotalAmountLCY@1002 : Decimal;TotalAmountAddCurr@1001 : Decimal;GLAcc@1000 : Code[20];ArrayIndex@1007 : Integer) : Boolean;
    BEGIN
      IF (GenJnlLine."Bal. Account No." <> '') AND
         ((AdjAmount[ArrayIndex] <> 0) OR (AdjAmount[ArrayIndex + 1] <> 0)) AND
         ((TotalAmountLCY + AdjAmount[ArrayIndex] <> 0) OR (TotalAmountAddCurr + AdjAmount[ArrayIndex + 1] <> 0))
      THEN BEGIN
        CreateGLEntryBalAcc(
          GenJnlLine,GLAcc,-AdjAmount[ArrayIndex],-AdjAmount[ArrayIndex + 1],
          GenJnlLine."Bal. Account Type",GenJnlLine."Bal. Account No.");
        InitGLEntry(GenJnlLine,GLEntry,
          GLAcc,TotalAmountLCY + AdjAmount[ArrayIndex],
          TotalAmountAddCurr + AdjAmount[ArrayIndex + 1],TRUE,TRUE);
        AdjAmount[ArrayIndex] := 0;
        AdjAmount[ArrayIndex + 1] := 0;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetAdjAmountOffset@121(Amount@1000 : Decimal;AmountACY@1001 : Decimal) : Integer;
    BEGIN
      IF (Amount > 0) OR (Amount = 0) AND (AmountACY > 0) THEN
        EXIT(1);
      EXIT(3);
    END;

    [External]
    PROCEDURE GetNextEntryNo@53() : Integer;
    BEGIN
      EXIT(NextEntryNo);
    END;

    [External]
    PROCEDURE GetNextTransactionNo@67() : Integer;
    BEGIN
      EXIT(NextTransactionNo);
    END;

    [External]
    PROCEDURE GetNextVATEntryNo@68() : Integer;
    BEGIN
      EXIT(NextVATEntryNo);
    END;

    [External]
    PROCEDURE IncrNextVATEntryNo@70();
    BEGIN
      NextVATEntryNo := NextVATEntryNo + 1;
    END;

    LOCAL PROCEDURE IsNotPayment@77(DocumentType@1000 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund') : Boolean;
    BEGIN
      EXIT(DocumentType IN [DocumentType::Invoice,
                            DocumentType::"Credit Memo",
                            DocumentType::"Finance Charge Memo",
                            DocumentType::Reminder]);
    END;

    LOCAL PROCEDURE IsTempGLEntryBufEmpty@44() : Boolean;
    BEGIN
      EXIT(TempGLEntryBuf.ISEMPTY);
    END;

    LOCAL PROCEDURE IsVATAdjustment@20(EntryType@1000 : Option) : Boolean;
    VAR
      DtldCVLedgEntryBuf@1001 : Record 383;
    BEGIN
      EXIT(EntryType IN [DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)",
                         DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)",
                         DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)"]);
    END;

    LOCAL PROCEDURE IsVATExcluded@7(EntryType@1000 : Option) : Boolean;
    VAR
      DtldCVLedgEntryBuf@1001 : Record 383;
    BEGIN
      EXIT(EntryType IN [DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)",
                         DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)",
                         DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)"]);
    END;

    LOCAL PROCEDURE UpdateVATEntryTaxDetails@290(GenJnlLine@1003 : Record 81;VAR VATEntry@1000 : Record 254;TaxDetail@1001 : Record 322;VAR TaxJurisdiction@1004 : Record 320);
    BEGIN
      IF TaxDetail."Tax Jurisdiction Code" <> '' THEN
        TaxJurisdiction.GET(TaxDetail."Tax Jurisdiction Code");
      IF GenJnlLine."Gen. Posting Type" <> GenJnlLine."Gen. Posting Type"::Settlement THEN BEGIN
        VATEntry."Tax Group Used" := TaxDetail."Tax Group Code";
        VATEntry."Tax Type" := TaxDetail."Tax Type";
        VATEntry."Tax on Tax" := TaxDetail."Calculate Tax on Tax";
      END;
      VATEntry."Tax Jurisdiction Code" := TaxDetail."Tax Jurisdiction Code";

      OnAfterUpdateVATEntryTaxDetails(VATEntry,TaxDetail);
    END;

    LOCAL PROCEDURE PostAutoAcc@1070002(VAR GenJnlLine@1070004 : Record 81);
    VAR
      AutoAccHeader@1070008 : Record 11128013;
      AutoAccLine@1070007 : Record 11128014;
      GenJnlLine2@1070006 : Record 81;
      GLEntry@1070005 : Record 17;
      NoOfAutoAccounts@1070003 : Decimal;
      TotalAmount@1070002 : Decimal;
      SourceCurrBaseAmount@1070009 : Decimal;
      AccLine@1070001 : Integer;
      GLEntryAutoAccExist@1070000 : Boolean;
    BEGIN
      //NAVSE,NAVFI
      WITH GenJnlLine DO BEGIN
        TESTFIELD("Account Type","Account Type"::"G/L Account");
        CLEAR(TotalAmount);
        AccLine := 0;
        TotalAmount := 0;
        AutoAccHeader.GET("Auto. Acc. Group");
        AutoAccHeader.CALCFIELDS(Balance);
        AutoAccHeader.TESTFIELD(Balance,0);
        AutoAccLine.RESET;
        AutoAccLine.SETRANGE("Automatic Acc. No.",AutoAccHeader."No.");
        NoOfAutoAccounts := AutoAccLine.COUNT;
        CLEAR(TotalAmount);
        GLEntryAutoAccExist := TempGLEntryAutoAcc.FIND('-');  //NAVFI
        REPEAT
          AccLine := 0;
          TotalAmount := 0;
          IF AutoAccLine.FINDSET THEN
            REPEAT
              GenJnlLine2 := GenJnlLine;
              IF AutoAccLine."G/L Account No." = '' THEN
                GenJnlLine2.VALIDATE("Account No.","Account No.")
              ELSE
                GenJnlLine2.VALIDATE("Account No.",AutoAccLine."G/L Account No.");
              GenJnlLine2.VALIDATE("Bal. Account No.",'');
              GenJnlLine2.VALIDATE("Currency Code","Currency Code");

              GenJnlLine2.VALIDATE("Gen. Bus. Posting Group",'');
              GenJnlLine2.VALIDATE("Gen. Prod. Posting Group",'');
              GenJnlLine2.VALIDATE("Gen. Posting Type","Gen. Posting Type"::" ");
              GenJnlLine2.VALIDATE(Description,AutoAccHeader.Description);
              //>>NAVFI
              IF GLEntryAutoAccExist THEN BEGIN
                GenJnlLine2.VALIDATE("Currency Code",'');
                GenJnlLine2.VALIDATE(
                    Amount,
                    ROUND(
                      TempGLEntryAutoAcc.Amount * AutoAccLine."Allocation %" / 100,GLSetup."Amount Rounding Precision"));
                GenJnlLine2.VALIDATE("Posting Date",TempGLEntryAutoAcc."Posting Date");
              END ELSE
              //<<NAVFI
                GenJnlLine2.VALIDATE(
                    Amount,
                  ROUND("VAT Base Amount" * AutoAccLine."Allocation %" / 100,GLSetup."Amount Rounding Precision"));
              IF GenJnlLine2."Source Currency Code" = GLSetup."Additional Reporting Currency" THEN BEGIN
              //>>NAVFI
                IF GLEntryAutoAccExist THEN
                  SourceCurrBaseAmount := TempGLEntryAutoAcc."Additional-Currency Amount"
                ELSE
              //<<NAVFI
                  SourceCurrBaseAmount := GenJnlLine2."Source Curr. VAT Base Amount";
                 GenJnlLine2.VALIDATE(
                   "Source Currency Amount",ROUND(SourceCurrBaseAmount * AutoAccLine."Allocation %" / 100,GLSetup."Amount Rounding Precision"));
              END;
              GenJnlLine2.VALIDATE("Auto. Acc. Group",'');
              GenJnlLine2."Dimension Set ID" := "Dimension Set ID";
              GenJnlLine2."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
              GenJnlLine2."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
              GenJnlLine2.CopyDimensionFromAutoAccLine(AutoAccLine);
              AccLine := AccLine + 1;
              TotalAmount := TotalAmount + GenJnlLine2.Amount;
              IF (AccLine = NoOfAutoAccounts) AND (TotalAmount <> 0) THEN
                GenJnlLine2.VALIDATE(Amount,GenJnlLine2.Amount - TotalAmount);

              GenJnlCheckLine.RunCheck(GenJnlLine2);

              InitGLEntry(GenJnlLine2,GLEntry,
                GenJnlLine2."Account No.",GenJnlLine2."Amount (LCY)",
                GenJnlLine2."Source Currency Amount",TRUE,GenJnlLine2."System-Created Entry");
              GLEntry."Gen. Posting Type" := GenJnlLine."Gen. Posting Type";
              GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
              GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
              GLEntry."No. Series" := GenJnlLine2."Posting No. Series";
              IF GenJnlLine."Additional-Currency Posting" =
                 GenJnlLine."Additional-Currency Posting"::"Additional-Currency Amount Only"
              THEN BEGIN
                GLEntry."Additional-Currency Amount" := GenJnlLine.Amount;
                GLEntry.Amount := 0;
              END;
              InsertGLEntry(GenJnlLine2,GLEntry,TRUE);
            UNTIL AutoAccLine.NEXT = 0;
        UNTIL TempGLEntryAutoAcc.NEXT = 0;
      END;
      GenJnlLine.VALIDATE("Auto. Acc. Group",'');
    END;

    PROCEDURE UpdateImportedRefPayment@1090000(GenJnlLine@1090001 : Record 81;VAR CustLedgEntry@1090002 : Record 21);
    VAR
      PaymentTerms@1090004 : Record 3;
      RefPaymentImported@1090000 : Record 11126181;
      RefPaymentManagement@1090003 : Codeunit 11126180;
    BEGIN
      //NAVFI
      WITH RefPaymentImported DO BEGIN
        GenJnlLineExt.InitGetLine(GenJnlLine);
      //  GenJnlLineExt.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name",GenJnlLine."Line No.");
        RESET;
        SETRANGE("Reference No.",GenJnlLineExt."Reference No.");
        SETRANGE("Customer No.",GenJnlLine."Account No.");
        SETRANGE("Posted to G/L",FALSE);
        IF FINDFIRST THEN BEGIN
          "Posted to G/L" := TRUE;
          MODIFY;
        END;
        IF PaymentTerms.GET(GenJnlLine."Payment Terms Code") THEN
          CustLedgEntry."Disreg. Pmt. Disc. at Full Pmt" := PaymentTerms."Disreg. Pmt. Disc. at Full Pmt"
        ELSE
          CustLedgEntry."Disreg. Pmt. Disc. at Full Pmt" := FALSE;
        IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Payment THEN
          RefPaymentManagement.CheckIfPaidInFull(GenJnlLine);
      END;
    END;

    PROCEDURE UpdateExportedRefPayment@1090002(GenJnlLine@1090001 : Record 81);
    VAR
      RefPaymentExported@1090000 : Record 11126182;
    BEGIN
      //NAVFI
      WITH RefPaymentExported DO BEGIN
        GenJnlLineExt.InitGetLine(GenJnlLine);
      //  GenJnlLineExt.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name",GenJnlLine."Line No.");
        RESET;
        SETCURRENTKEY("Document No.");
        SETRANGE("Document No.",GenJnlLine."Document No.");
        SETRANGE("Vendor No.",GenJnlLine."Account No.");
        SETRANGE("Invoice Message",GenJnlLineExt."Invoice Message");
        SETRANGE("Posted to G/L",FALSE);
        SETRANGE(Transferred,TRUE);
        IF FINDFIRST THEN BEGIN
          "Posted to G/L" := TRUE;
          MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateGLEntryNo@120(VAR GLEntryNo@1002 : Integer;VAR SavedEntryNo@1000 : Integer);
    BEGIN
      IF SavedEntryNo <> 0 THEN BEGIN
        GLEntryNo := SavedEntryNo;
        NextEntryNo := NextEntryNo - 1;
        SavedEntryNo := 0;
      END;
    END;

    LOCAL PROCEDURE UpdateTotalAmounts@132(VAR TempInvPostBuf@1003 : TEMPORARY Record 49;DimSetID@1000 : Integer;DtldCVLedgEntryBuf@1001 : Record 383);
    VAR
      IsHandled@1004 : Boolean;
    BEGIN
      OnBeforeUpdateTotalAmounts(
        TempInvPostBuf,DimSetID,DtldCVLedgEntryBuf."Amount (LCY)",DtldCVLedgEntryBuf."Additional-Currency Amount",IsHandled,
        DtldCVLedgEntryBuf);
      IF IsHandled THEN
        EXIT;

      WITH TempInvPostBuf DO BEGIN
        SETRANGE("Dimension Set ID",DimSetID);
        IF FINDFIRST THEN BEGIN
          Amount += DtldCVLedgEntryBuf."Amount (LCY)";
          "Amount (ACY)" += DtldCVLedgEntryBuf."Additional-Currency Amount";
          MODIFY;
        END ELSE BEGIN
          INIT;
          "Dimension Set ID" := DimSetID;
          Amount := DtldCVLedgEntryBuf."Amount (LCY)";
          "Amount (ACY)" := DtldCVLedgEntryBuf."Additional-Currency Amount";
          INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateGLEntriesForTotalAmountsUnapply@135(GenJnlLine@1000 : Record 81;VAR TempInvPostBuf@1002 : TEMPORARY Record 49;Account@1001 : Code[20]);
    VAR
      DimMgt@1003 : Codeunit 408;
    BEGIN
      WITH TempInvPostBuf DO BEGIN
        SETRANGE("Dimension Set ID");
        IF FINDSET THEN
          REPEAT
            IF (Amount <> 0) OR
               ("Amount (ACY)" <> 0) AND (GLSetup."Additional Reporting Currency" <> '')
            THEN BEGIN
              DimMgt.UpdateGenJnlLineDim(GenJnlLine,"Dimension Set ID");
              CreateGLEntry(GenJnlLine,Account,Amount,"Amount (ACY)",TRUE);
            END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateGLEntriesForTotalAmounts@36(GenJnlLine@1004 : Record 81;VAR InvPostBuf@1001 : Record 49;AdjAmountBuf@1006 : ARRAY [4] OF Decimal;SavedEntryNo@1009 : Integer;GLAccNo@1007 : Code[20];LedgEntryInserted@1003 : Boolean);
    VAR
      DimMgt@1002 : Codeunit 408;
      GLEntryInserted@1000 : Boolean;
    BEGIN
      OnBeforeCreateGLEntriesForTotalAmounts(InvPostBuf,GenJnlLine,GLAccNo);

      GLEntryInserted := FALSE;

      WITH InvPostBuf DO BEGIN
        RESET;
        IF FINDSET THEN
          REPEAT
            IF (Amount <> 0) OR ("Amount (ACY)" <> 0) AND (AddCurrencyCode <> '') THEN BEGIN
              DimMgt.UpdateGenJnlLineDim(GenJnlLine,"Dimension Set ID");
              CreateGLEntryForTotalAmounts(GenJnlLine,Amount,"Amount (ACY)",AdjAmountBuf,SavedEntryNo,GLAccNo);
              GLEntryInserted := TRUE;
            END;
          UNTIL NEXT = 0;
      END;

      IF NOT GLEntryInserted AND LedgEntryInserted THEN
        CreateGLEntryForTotalAmounts(GenJnlLine,0,0,AdjAmountBuf,SavedEntryNo,GLAccNo);
    END;

    LOCAL PROCEDURE CreateGLEntryForTotalAmounts@122(GenJnlLine@1004 : Record 81;Amount@1000 : Decimal;AmountACY@1001 : Decimal;AdjAmountBuf@1006 : ARRAY [4] OF Decimal;VAR SavedEntryNo@1009 : Integer;GLAccNo@1007 : Code[20]);
    VAR
      GLEntry@1005 : Record 17;
    BEGIN
      HandleDtldAdjustment(GenJnlLine,GLEntry,AdjAmountBuf,Amount,AmountACY,GLAccNo);
      GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
      GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
      UpdateGLEntryNo(GLEntry."Entry No.",SavedEntryNo);
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
    END;

    LOCAL PROCEDURE GLEntryCalcPropDeduction@1080006(GenJnlLine@1080000 : Record 81;GLEntry@1080001 : Record 17;VATPostingSetup@1000 : Record 325);
    VAR
      Adjusted@1080002 : Boolean;
    BEGIN
      IF NOT GLSetup."Norwegian Localization Active" THEN EXIT;

      //NAVNO
      Adjusted := NorwegianVATTools.GLEntryCalcPropDeduction(PropDeductionVAT,PropDedVATACY,GLEntry,GenJnlLine,VATPostingSetup,AddCurrGLEntryVATAmt);
      IF NOT Adjusted THEN
        PropDedVATACY := CalcLCYToAddCurr(PropDeductionVAT);
    END;

    LOCAL PROCEDURE GLEntryAdjustPurchase@1080001(VAR GLEntry@1080003 : Record 17;GenJnlLine@1000 : Record 81;VATPostingSetup@1001 : Record 325);
    BEGIN
      IF NOT GLSetup."Norwegian Localization Active" THEN EXIT;
      //NAVNO
      IF IsPropDeduction(GLEntry.Amount,GenJnlLine,VATPostingSetup) THEN BEGIN
        GLEntry.Amount := GLEntry.Amount + PropDeductionVAT;
        GLEntry."VAT Amount" :=
          NorwegianVATTools.AdjustForPropDeduction(GLEntry."VAT Amount",GenJnlLine,VATPostingSetup);
        IF GenJnlLine."Source Currency Code" = GLSetup."Additional Reporting Currency" THEN BEGIN
          GLEntry."Additional-Currency Amount" := GLEntry."Additional-Currency Amount" + PropDedVATACY;
          AddCurrGLEntryVATAmt := NorwegianVATTools.AdjustForPropDeduction(AddCurrGLEntryVATAmt,GenJnlLine,VATPostingSetup);
        END ELSE BEGIN
          IF VATPostingSetup."VAT Calculation Type" =
             VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT"
          THEN
            GLEntry."Additional-Currency Amount" += CalcLCYToAddCurr(PropDeductionVAT)
          ELSE
            GLEntry."Additional-Currency Amount" := CalcLCYToAddCurr(GLEntry.Amount);
          AddCurrGLEntryVATAmt :=
            CalcLCYToAddCurr(GLEntry."VAT Amount");
        END;
      END;
    END;

    LOCAL PROCEDURE VATEntryAdjustForPropDeduction@1080003(GenJnlLine@1001 : Record 81;VATPostingSetup@1000 : Record 325);
    BEGIN
      IF NOT GLSetup."Norwegian Localization Active" THEN EXIT;
      //NAVNO
      IF IsPropDeduction(VATEntry.Amount,GenJnlLine,VATPostingSetup) THEN BEGIN
        // Amount are already adjusted
        VATEntry.Base := NorwegianVATTools.AdjustForPropDeduction(VATEntry.Base,GenJnlLine,VATPostingSetup);
        VATEntry."Additional-Currency Base" := CalcLCYToAddCurr(VATEntry.Base);
      END;
    END;

    LOCAL PROCEDURE IsPropDeduction@1080000(Amount@1080000 : Decimal;GenJnlLine@1001 : Record 81;VATPostingSetup@1000 : Record 325) : Boolean;
    BEGIN
      IF NOT GLSetup."Norwegian Localization Active" THEN EXIT(FALSE);
      //NAVNO
      EXIT(
        (GenJnlLine."Gen. Posting Type" = GenJnlLine."Gen. Posting Type"::Purchase) AND
        VATPostingSetup."Calc. Prop. Deduction VAT" AND
        (Amount <> 0));
    END;

    PROCEDURE GetReverseChargeVATAmount@1080007(Amount@1080000 : Decimal;PropDeductionAmount@1080001 : Decimal;UnrealizedVAT@1080002 : Boolean) : Decimal;
    BEGIN
      //NAVNO
      IF UnrealizedVAT THEN
        EXIT(-Amount);

      EXIT(-Amount - PropDeductionAmount);
    END;

    PROCEDURE GetReverseChargeVATAmountACY@1080008(AmountACY@1080002 : Decimal;PropDeductionAmountACY@1080001 : Decimal;UnrealizedVAT@1080000 : Boolean) : Decimal;
    BEGIN
      //NAVNO
      IF UnrealizedVAT THEN
        EXIT(-AmountACY);

      EXIT(-AmountACY - PropDeductionAmountACY);
    END;

    LOCAL PROCEDURE SetAddCurrForUnapplication@136(VAR DtldCVLedgEntryBuf@1000 : Record 383);
    BEGIN
      WITH DtldCVLedgEntryBuf DO
        IF NOT ("Entry Type" IN ["Entry Type"::Application,"Entry Type"::"Unrealized Loss",
                                 "Entry Type"::"Unrealized Gain","Entry Type"::"Realized Loss",
                                 "Entry Type"::"Realized Gain","Entry Type"::"Correction of Remaining Amount"])
        THEN
          IF ("Entry Type" = "Entry Type"::"Appln. Rounding") OR
             ((AddCurrencyCode <> '') AND (AddCurrencyCode = "Currency Code"))
          THEN
            "Additional-Currency Amount" := Amount
          ELSE
            "Additional-Currency Amount" := CalcAddCurrForUnapplication("Posting Date","Amount (LCY)");
    END;

    LOCAL PROCEDURE PostDeferral@125(VAR GenJournalLine@1000 : Record 81;AccountNo@1006 : Code[20]);
    VAR
      DeferralTemplate@1001 : Record 1700;
      DeferralHeader@1002 : Record 1701;
      DeferralLine@1003 : Record 1702;
      TempDeferralLine@1070001 : TEMPORARY Record 1702;
      GLEntry@1004 : Record 17;
      CurrExchRate@1012 : Record 330;
      DeferralUtilities@1005 : Codeunit 1720;
      PerPostDate@1007 : Date;
      PeriodicCount@1008 : Integer;
      AmtToDefer@1010 : Decimal;
      AmtToDeferACY@1009 : Decimal;
      EmptyDeferralLine@1011 : Boolean;
    BEGIN
      OnBeforePostDeferral(GenJournalLine,AccountNo);

      WITH GenJournalLine DO BEGIN
        IF "Source Type" IN ["Source Type"::Vendor,"Source Type"::Customer] THEN
          // Purchasing and Sales, respectively
          // We can create these types directly from the GL window, need to make sure we don't already have a deferral schedule
          // created for this GL Trx before handing it off to sales/purchasing subsystem
          IF "Source Code" <> GLSourceCode THEN BEGIN
            PostDeferralPostBuffer(GenJournalLine);
            EXIT;
          END;

        IF DeferralHeader.GET(DeferralDocType::"G/L","Journal Template Name","Journal Batch Name",0,'',"Line No.") THEN BEGIN
          EmptyDeferralLine := FALSE;
          // Get the range of detail records for this schedule
          DeferralUtilities.FilterDeferralLines(
            DeferralLine,DeferralDocType::"G/L","Journal Template Name","Journal Batch Name",0,'',"Line No.");
          IF DeferralLine.FINDSET THEN
            REPEAT
              IF DeferralLine.Amount = 0.0 THEN
                EmptyDeferralLine := TRUE;
            UNTIL (DeferralLine.NEXT = 0) OR EmptyDeferralLine;
          IF EmptyDeferralLine THEN
            ERROR(ZeroDeferralAmtErr,"Line No.","Deferral Code");
          DeferralHeader."Amount to Defer (LCY)" :=
      //**4PS.so
      //    ROUND(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code",
      //        DeferralHeader."Amount to Defer","Currency Factor"));
      //**4PS.eo
      //**4PS.sn
            ROUND(CurrExchRate.ExchangeAmtFCYToLCY(1,"Job No.","Posting Date","Currency Code",
                  DeferralHeader."Amount to Defer","Currency Factor",
                  DeferralHeader."Deferral Doc. Type" = DeferralHeader."Deferral Doc. Type"::Sales));
      //**4PS.en
          DeferralHeader.MODIFY;
        END;

        DeferralUtilities.RoundDeferralAmount(
          DeferralHeader,
          "Currency Code","Currency Factor","Posting Date",AmtToDefer,AmtToDeferACY,
          "Job No."); //**4PS.n

        DeferralTemplate.GET("Deferral Code");
        DeferralTemplate.TESTFIELD("Deferral Account");
        DeferralTemplate.TESTFIELD("Deferral %");

        // Get the Deferral Header table so we know the amount to defer...
        // Assume straight GL posting
        IF DeferralHeader.GET(DeferralDocType::"G/L","Journal Template Name","Journal Batch Name",0,'',"Line No.") THEN
          // Get the range of detail records for this schedule
          DeferralUtilities.FilterDeferralLines(
            DeferralLine,DeferralDocType::"G/L","Journal Template Name","Journal Batch Name",0,'',"Line No.")
        ELSE
          ERROR(NoDeferralScheduleErr,"Line No.","Deferral Code");

        InitGLEntry(
          GenJournalLine,GLEntry,AccountNo,
          -DeferralHeader."Amount to Defer (LCY)",-DeferralHeader."Amount to Defer",TRUE,TRUE);
        GLEntry.Description := SetDeferralDescription(GenJournalLine,DeferralLine);
        InsertGLEntry(GenJournalLine,GLEntry,TRUE);

        InitGLEntry(
          GenJournalLine,GLEntry,DeferralTemplate."Deferral Account",
          DeferralHeader."Amount to Defer (LCY)",DeferralHeader."Amount to Defer",TRUE,TRUE);
        GLEntry.Description := SetDeferralDescription(GenJournalLine,DeferralLine);
        InsertGLEntry(GenJournalLine,GLEntry,TRUE);

        // Here we want to get the Deferral Details table range and loop through them...
        IF DeferralLine.FINDSET THEN
          REPEAT
            TempDeferralLine := DeferralLine;
            TempDeferralLine.INSERT;
          UNTIL DeferralLine.NEXT = 0;
        IF TempDeferralLine.FINDSET THEN BEGIN
          PeriodicCount := 1;
          REPEAT
            PerPostDate := TempDeferralLine."Posting Date";
            IF GenJnlCheckLine.DateNotAllowed(PerPostDate) THEN
              ERROR(InvalidPostingDateErr,PerPostDate);

            InitGLEntry(
              GenJournalLine,GLEntry,AccountNo,
              TempDeferralLine."Amount (LCY)",TempDeferralLine.Amount,TRUE,TRUE);
            GLEntry."Posting Date" := PerPostDate;
            GLEntry.Description := TempDeferralLine.Description;
            InsertGLEntry(GenJournalLine,GLEntry,TRUE);

            InitGLEntry(
              GenJournalLine,GLEntry,DeferralTemplate."Deferral Account",
              -TempDeferralLine."Amount (LCY)",-TempDeferralLine.Amount,TRUE,TRUE);
            GLEntry."Posting Date" := PerPostDate;
            GLEntry.Description := TempDeferralLine.Description;
            InsertGLEntry(GenJournalLine,GLEntry,TRUE);
            PeriodicCount := PeriodicCount + 1;
            PostAutoAccGroupFromDeferralLine(GenJournalLine,TempDeferralLine."Amount (LCY)",PerPostDate,'');
          UNTIL TempDeferralLine.NEXT = 0;
          IF DeferralTemplate."Deferral %" <> 100 THEN
            PostAutoAccGroupFromDeferralLine(
              GenJournalLine,"VAT Base Amount (LCY)" - DeferralHeader."Amount to Defer (LCY)",
              "Posting Date",'');
        END ELSE
          ERROR(NoDeferralScheduleErr,"Line No.","Deferral Code");
      END;

      OnAfterPostDeferral(GenJournalLine,TempGLEntryBuf,AccountNo);
    END;

    LOCAL PROCEDURE PostDeferralPostBuffer@127(GenJournalLine@1005 : Record 81);
    VAR
      DeferralPostBuffer@1004 : Record 1706;
      DeferralTemplate@1070000 : Record 1700;
      GLEntry@1003 : Record 17;
      PostDate@1000 : Date;
    BEGIN
      WITH GenJournalLine DO BEGIN
        IF "Source Type" = "Source Type"::Customer THEN
          DeferralDocType := DeferralDocType::Sales
        ELSE
          DeferralDocType := DeferralDocType::Purchase;

        DeferralPostBuffer.SETRANGE("Deferral Doc. Type",DeferralDocType);
        DeferralPostBuffer.SETRANGE("Document No.","Document No.");
        DeferralPostBuffer.SETRANGE("Deferral Line No.","Deferral Line No.");

        IF DeferralPostBuffer.FINDSET THEN BEGIN
          REPEAT
            PostDate := DeferralPostBuffer."Posting Date";
            IF GenJnlCheckLine.DateNotAllowed(PostDate) THEN
              ERROR(InvalidPostingDateErr,PostDate);

            // When no sales/purch amount is entered, the offset was already posted
            IF (DeferralPostBuffer."Sales/Purch Amount" <> 0) OR (DeferralPostBuffer."Sales/Purch Amount (LCY)" <> 0) THEN BEGIN
              InitGLEntry(GenJournalLine,GLEntry,DeferralPostBuffer."G/L Account",
                DeferralPostBuffer."Sales/Purch Amount (LCY)",
                DeferralPostBuffer."Sales/Purch Amount",
                TRUE,TRUE);
              GLEntry."Posting Date" := PostDate;
              GLEntry.Description := DeferralPostBuffer.Description;
              GLEntry.CopyFromDeferralPostBuffer(DeferralPostBuffer);
              InsertGLEntry(GenJournalLine,GLEntry,TRUE);
            END;

            IF DeferralPostBuffer.Amount <> 0 THEN BEGIN
              InitGLEntry(GenJournalLine,GLEntry,
                DeferralPostBuffer."Deferral Account",
                -DeferralPostBuffer."Amount (LCY)",
                -DeferralPostBuffer.Amount,
                TRUE,TRUE);
              GLEntry."Posting Date" := PostDate;
              GLEntry.Description := DeferralPostBuffer.Description;
              InsertGLEntry(GenJournalLine,GLEntry,TRUE);
              // Do not post auto acc. group for initial deferral pair
              IF DeferralPostBuffer."Deferral Account" <> "Account No." THEN
                PostAutoAccGroupFromDeferralLine(
                  GenJournalLine,DeferralPostBuffer."Amount (LCY)",PostDate,DeferralPostBuffer."G/L Account");
            END;
          UNTIL DeferralPostBuffer.NEXT = 0;
          DeferralPostBuffer.DELETEALL;
          DeferralTemplate.GET(DeferralPostBuffer."Deferral Code");
          IF DeferralTemplate."Deferral %" <> 100 THEN
            PostAutoAccGroupFromDeferralLine(GenJournalLine,"Amount (LCY)","Posting Date",'');
        END;
      END;
    END;

    [External]
    PROCEDURE RemoveDeferralSchedule@128(GenJournalLine@1002 : Record 81);
    VAR
      DeferralUtilities@1000 : Codeunit 1720;
      DeferralDocType@1001 : 'Purchase,Sales,G/L';
    BEGIN
      // Removing deferral schedule after all deferrals for this line have been posted successfully
      WITH GenJournalLine DO
        DeferralUtilities.DeferralCodeOnDelete(
          DeferralDocType::"G/L",
          "Journal Template Name",
          "Journal Batch Name",0,'',"Line No.");
    END;

    LOCAL PROCEDURE GetGLSourceCode@130();
    VAR
      SourceCodeSetup@1000 : Record 242;
    BEGIN
      SourceCodeSetup.GET;
      GLSourceCode := SourceCodeSetup."General Journal";
    END;

    LOCAL PROCEDURE DeferralPosting@131(DeferralCode@1000 : Code[10];SourceCode@1001 : Code[10];AccountNo@1002 : Code[20];VAR GenJournalLine@1005 : Record 81;Balancing@1006 : Boolean);
    BEGIN
      IF DeferralCode <> '' THEN
        // Sales and purchasing could have negative amounts, so check for them first...
        IF (SourceCode <> GLSourceCode) AND
           (GenJournalLine."Account Type" IN [GenJournalLine."Account Type"::Customer,GenJournalLine."Account Type"::Vendor])
        THEN
          PostDeferralPostBuffer(GenJournalLine)
        ELSE
          // Pure GL trx, only post deferrals if it is not a balancing entry
          IF NOT Balancing THEN
            PostDeferral(GenJournalLine,AccountNo);
    END;

    LOCAL PROCEDURE SetDeferralDescription@295(GenJournalLine@1000 : Record 81;DeferralLine@1001 : Record 1702) : Text[100];
    VAR
      DeferralDescription@1002 : Text[100];
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeSetDeferralDescription(GenJournalLine,DeferralLine,DeferralDescription,IsHandled);
      IF IsHandled THEN
        EXIT(DeferralDescription);

      EXIT(GenJournalLine.Description);
    END;

    LOCAL PROCEDURE GetPostingAccountNo@225(VATPostingSetup@1002 : Record 325;VATEntry@1001 : Record 254;UnrealizedVAT@1000 : Boolean) : Code[20];
    VAR
      TaxJurisdiction@1003 : Record 320;
    BEGIN
      IF VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Sales Tax" THEN BEGIN
        VATEntry.TESTFIELD("Tax Jurisdiction Code");
        TaxJurisdiction.GET(VATEntry."Tax Jurisdiction Code");
        CASE VATEntry.Type OF
          VATEntry.Type::Sale:
            EXIT(TaxJurisdiction.GetSalesAccount(UnrealizedVAT));
          VATEntry.Type::Purchase:
            EXIT(TaxJurisdiction.GetPurchAccount(UnrealizedVAT));
        END;
      END;

      CASE VATEntry.Type OF
        VATEntry.Type::Sale:
          EXIT(VATPostingSetup.GetSalesAccount(UnrealizedVAT));
        VATEntry.Type::Purchase:
          EXIT(VATPostingSetup.GetPurchAccount(UnrealizedVAT));
      END;
    END;

    LOCAL PROCEDURE IsDebitAmount@137(DtldCVLedgEntryBuf@1000 : Record 383;Unapply@1001 : Boolean) : Boolean;
    VAR
      VATPostingSetup@1002 : Record 325;
      VATAmountCondition@1003 : Boolean;
      EntryAmount@1004 : Decimal;
    BEGIN
      WITH DtldCVLedgEntryBuf DO BEGIN
        VATAmountCondition :=
          "Entry Type" IN ["Entry Type"::"Payment Discount (VAT Excl.)","Entry Type"::"Payment Tolerance (VAT Excl.)",
                           "Entry Type"::"Payment Discount Tolerance (VAT Excl.)"];
        IF VATAmountCondition THEN BEGIN
          VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
          VATAmountCondition := VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Full VAT";
        END;
        IF VATAmountCondition THEN
          EntryAmount := "VAT Amount (LCY)"
        ELSE
          EntryAmount := "Amount (LCY)";
        IF Unapply THEN
          EXIT(EntryAmount > 0);
        EXIT(EntryAmount <= 0);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCode@159(VAR GenJnlLine@1000 : Record 81;CheckLine@1001 : Boolean;VAR IsPosted@1002 : Boolean;VAR GLReg@1003 : Record 45);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckGLAccDimError@232(VAR GenJournalLine@1000 : Record 81;GLAccNo@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckPurchExtDocNo@153(GenJournalLine@1000 : Record 81;VendorLedgerEntry@1001 : Record 25;CVLedgerEntryBuffer@1003 : Record 382;VAR Handled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeStartPosting@149(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeStartOrContinuePosting@194(VAR GenJnlLine@1000 : Record 81;LastDocType@1003 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder';LastDocNo@1002 : Code[20];LastDate@1001 : Date;VAR NextEntryNo@1004 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeContinuePosting@150(VAR GenJournalLine@1000 : Record 81;VAR GLRegister@1001 : Record 45;VAR NextEntryNo@1002 : Integer;VAR NextTransactionNo@1003 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCustUnrealizedVAT@229(VAR GenJnlLine@1002 : Record 81;VAR CustLedgEntry@1001 : Record 21;SettledAmount@1000 : Decimal;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnBeforePostGenJnlLine@133(VAR GenJournalLine@1000 : Record 81;Balancing@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostGLAcc@267(GenJournalLine@1000 : Record 81;VAR GLEntry@1001 : Record 17);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostVAT@216(GenJnlLine@1000 : Record 81;VAR GLEntry@1001 : Record 17;VATPostingSetup@1002 : Record 325;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostPmtDiscountVATByUnapply@312(VAR GenJournalLine@1000 : Record 81;VAR VATEntry@1001 : Record 254);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeFindAmtForAppln@170(VAR NewCVLedgEntryBuf@1005 : Record 382;VAR OldCVLedgEntryBuf@1004 : Record 382;VAR OldCVLedgEntryBuf2@1003 : Record 382;VAR AppliedAmount@1002 : Decimal;VAR AppliedAmountLCY@1001 : Decimal;VAR OldAppliedAmount@1000 : Decimal;VAR Handled@1006 : Boolean;VAR ApplnRoundingPrecision@1007 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeVendUnrealizedVAT@234(VAR GenJnlLine@1002 : Record 81;VAR VendorLedgerEntry@1001 : Record 25;SettledAmount@1000 : Decimal;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCustLedgEntryInsert@1003(VAR CustLedgerEntry@1000 : Record 21;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterVendLedgEntryInsert@1008(VAR VendorLedgerEntry@1000 : Record 25;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterFindAmtForAppln@169(VAR NewCVLedgEntryBuf@1005 : Record 382;VAR OldCVLedgEntryBuf@1004 : Record 382;VAR OldCVLedgEntryBuf2@1003 : Record 382;VAR AppliedAmount@1002 : Decimal;VAR AppliedAmountLCY@1001 : Decimal;VAR OldAppliedAmount@1000 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitGLEntry@174(VAR GLEntry@1000 : Record 17;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration(DEFAULT,TRUE)]
    LOCAL PROCEDURE OnAfterInitGLRegister@139(VAR GLRegister@1000 : Record 45;VAR GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitBankAccLedgEntry@177(VAR BankAccountLedgerEntry@1000 : Record 271;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitCheckLedgEntry@179(VAR CheckLedgerEntry@1000 : Record 272;BankAccountLedgerEntry@1001 : Record 271);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitCustLedgEntry@180(VAR CustLedgerEntry@1000 : Record 21;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitVendLedgEntry@183(VAR VendorLedgerEntry@1000 : Record 25;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitEmployeeLedgerEntry@184(VAR EmployeeLedgerEntry@1000 : Record 5222;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertDtldCustLedgEntry@244(VAR DtldCustLedgEntry@1000 : Record 379;GenJournalLine@1001 : Record 81;DtldCVLedgEntryBuffer@1002 : Record 383;Offset@1003 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertDtldVendLedgEntry@247(VAR DtldVendLedgEntry@1000 : Record 380;GenJournalLine@1001 : Record 81;DtldCVLedgEntryBuffer@1002 : Record 383;Offset@1003 : Integer);
    BEGIN
    END;

    [Integration(DEFAULT,TRUE)]
    LOCAL PROCEDURE OnAfterInsertGlobalGLEntry@142(VAR GLEntry@1000 : Record 17);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitVAT@240(VAR GenJournalLine@1000 : Record 81;VAR GLEntry@1001 : Record 17;VAR VATPostingSetup@1002 : Record 325;VAR AddCurrGLEntryVATAmt@1003 : Decimal);
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnAfterInsertVAT@203(VAR GenJournalLine@1000 : Record 81;VAR VATEntry@1001 : Record 254;VAR UnrealizedVAT@1002 : Boolean;VAR AddCurrencyCode@1003 : Code[10];VAR VATPostingSetup@1011 : Record 325;VAR GLEntryAmount@1010 : Decimal;VAR GLEntryVATAmount@1009 : Decimal;VAR GLEntryBaseAmount@1008 : Decimal;VAR SrcCurrCode@1007 : Code[10];VAR SrcCurrGLEntryAmt@1006 : Decimal;VAR SrcCurrGLEntryVATAmt@1005 : Decimal;VAR SrcCurrGLEntryBaseAmt@1004 : Decimal;AddCurrGLEntryVATAmt@1016 : Decimal;VAR NextConnectionNo@1012 : Integer;VAR NextVATEntryNo@1013 : Integer;VAR NextTransactionNo@1014 : Integer;TempGLEntryBufEntryNo@1015 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertVATEntry@223(GenJnlLine@1000 : Record 81;VATEntry@1001 : Record 254;GLEntryNo@1002 : Integer;VAR NextEntryNo@1003 : Integer);
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnAfterRunWithCheck@160(VAR GenJnlLine@1000 : Record 81);
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnAfterRunWithoutCheck@158(VAR GenJnlLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostPmtDiscountVATByUnapply@313(VAR GenJournalLine@1000 : Record 81;VAR VATEntry@1001 : Record 254);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOldCustLedgEntryModify@165(VAR CustLedgEntry@1000 : Record 21);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeApplyCustLedgEntry@196(VAR NewCVLedgEntryBuf@1003 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;VAR GenJnlLine@1001 : Record 81;Cust@1000 : Record 18;VAR IsAmountToApplyCheckHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterOldVendLedgEntryModify@168(VAR VendLedgEntry@1000 : Record 25);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeApplyVendLedgEntry@197(VAR NewCVLedgEntryBuf@1003 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;VAR GenJnlLine@1001 : Record 81;Vend@1000 : Record 23;VAR IsAmountToApplyCheckHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCustLedgEntryInsert@1001(VAR CustLedgerEntry@1000 : Record 21;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeVendLedgEntryInsert@1004(VAR VendorLedgerEntry@1000 : Record 25;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertDtldCustLedgEntry@156(VAR DtldCustLedgEntry@1000 : Record 379;GenJournalLine@1001 : Record 81;DtldCVLedgEntryBuffer@1002 : Record 383);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertDtldCustLedgEntryUnapply@164(VAR NewDtldCustLedgEntry@1002 : Record 379;GenJournalLine@1001 : Record 81;OldDtldCustLedgEntry@1000 : Record 379);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertDtldEmplLedgEntry@157(VAR DtldEmplLedgEntry@1000 : Record 5223;GenJournalLine@1001 : Record 81;DtldCVLedgEntryBuffer@1002 : Record 383);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertDtldEmplLedgEntryUnapply@166(VAR NewDtldEmplLedgEntry@1002 : Record 5223;GenJournalLine@1001 : Record 81;OldDtldEmplLedgEntry@1000 : Record 5223);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertDtldVendLedgEntry@162(VAR DtldVendLedgEntry@1000 : Record 380;GenJournalLine@1001 : Record 81;DtldCVLedgEntryBuffer@1002 : Record 383);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertDtldVendLedgEntryUnapply@167(VAR NewDtldVendLedgEntry@1002 : Record 380;GenJournalLine@1001 : Record 81;OldDtldVendLedgEntry@1000 : Record 380);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertGLEntryBuffer@146(VAR TempGLEntryBuf@1000 : TEMPORARY Record 17;VAR GenJournalLine@1001 : Record 81;VAR BalanceCheckAmount@1005 : Decimal;VAR BalanceCheckAmount2@1004 : Decimal;VAR BalanceCheckAddCurrAmount@1003 : Decimal;VAR BalanceCheckAddCurrAmount2@1002 : Decimal;VAR NextEntryNo@1006 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertGlobalGLEntry@176(VAR GlobalGLEntry@1000 : Record 17;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertTempVATEntry@172(VAR TempVATEntry@1000 : TEMPORARY Record 254;GenJournalLine@1001 : Record 81;VATEntry@1002 : Record 254);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInitBankAccLedgEntry@1005(VAR BankAccountLedgerEntry@1000 : Record 271;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInitCheckEntry@1002(VAR BankAccountLedgerEntry@1000 : Record 271;VAR CheckLedgerEntry@1001 : Record 272);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInitCustLedgEntry@1000(VAR CustLedgerEntry@1000 : Record 21;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInitEmployeeLedgEntry@1006(VAR EmployeeLedgerEntry@1000 : Record 5222;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInitVendLedgEntry@1007(VAR VendorLedgerEntry@1000 : Record 25;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInitGLEntry@268(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInitVAT@242(VAR GenJournalLine@1000 : Record 81;VAR GLEntry@1001 : Record 17;VAR VATPostingSetup@1002 : Record 325);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertGLEntryFromVATEntry@280(VAR GLEntry@1000 : Record 17;VATEntry@1001 : Record 254);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertVAT@199(VAR GenJournalLine@1000 : Record 81;VAR VATEntry@1001 : Record 254;VAR UnrealizedVAT@1002 : Boolean;VAR AddCurrencyCode@1003 : Code[10];VAR VATPostingSetup@1011 : Record 325;VAR GLEntryAmount@1010 : Decimal;VAR GLEntryVATAmount@1009 : Decimal;VAR GLEntryBaseAmount@1008 : Decimal;VAR SrcCurrCode@1007 : Code[10];VAR SrcCurrGLEntryAmt@1006 : Decimal;VAR SrcCurrGLEntryVATAmt@1005 : Decimal;VAR SrcCurrGLEntryBaseAmt@1004 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertVATEntry@171(VAR VATEntry@1000 : Record 254;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertPostUnrealVATEntry@178(VAR VATEntry@1001 : Record 254;GenJournalLine@1000 : Record 81;VAR VATEntry2@1002 : Record 254);
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnBeforeFinishPosting@269(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterFinishPosting@243(VAR GlobalGLEntry@1000 : Record 17;VAR GLRegister@1001 : Record 45;VAR IsTransactionConsistent@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGLFinishPosting@144(GLEntry@1000 : Record 17;VAR GenJnlLine@1003 : Record 81;IsTransactionConsistent@1001 : Boolean;FirstTransactionNo@1002 : Integer;VAR GLRegister@1004 : Record 45;VAR TempGLEntryBuf@1006 : TEMPORARY Record 17;VAR NextEntryNo@1005 : Integer;VAR NextTransactionNo@1007 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnNextTransactionNoNeeded@154(GenJnlLine@1000 : Record 81;LastDocType@1003 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder';LastDocNo@1002 : Code[20];LastDate@1001 : Date;CurrentBalance@1004 : Decimal;CurrentBalanceACY@1005 : Decimal;VAR NewTransaction@1006 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostGLAcc@161(VAR GenJnlLine@1000 : Record 81;VAR TempGLEntryBuf@1001 : TEMPORARY Record 17;VAR NextEntryNo@1002 : Integer;VAR NextTransactionNo@1003 : Integer;Balancing@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalcPmtDiscOnAfterAssignPmtDisc@175(VAR PmtDisc@1002 : Decimal;VAR PmtDiscLCY@1003 : Decimal;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR OldCVLedgEntryBuf2@1000 : Record 382);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalcPmtToleranceOnAfterAssignPmtDisc@163(VAR PmtTol@1003 : Decimal;VAR PmtTolLCY@1002 : Decimal;VAR PmtTolAmtToBeApplied@1004 : Decimal;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR OldCVLedgEntryBuf2@1000 : Record 382;VAR NewCVLedgEntryBuf@1008 : Record 382;VAR DtldCVLedgEntryBuf@1007 : Record 383;VAR NextTransactionNo@1006 : Integer;VAR FirstNewVATEntryNo@1005 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalcPmtDiscIfAdjVATCopyFields@224(VAR DetailedCVLedgEntryBuffer@1000 : Record 383;CVLedgerEntryBuffer@1001 : Record 382;GenJournalLine@1002 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostDeferral@123(VAR GenJournalLine@1000 : Record 81;VAR TempGLEntryBuf@1001 : TEMPORARY Record 17;AccountNo@1002 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostDeferral@124(VAR GenJournalLine@1000 : Record 81;VAR AccountNo@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCreateGLEntriesForTotalAmounts@173(VAR InvoicePostBuffer@1000 : Record 49;GenJournalLine@1001 : Record 81;GLAccNo@1002 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostDtldCVLedgEntry@270(VAR GenJournalLine@1000 : Record 81;VAR DtldCVLedgEntryBuffer@1001 : Record 383;Unapply@1002 : Boolean;AccNo@1003 : Code[20];AdjAmount@1004 : ARRAY [4] OF Decimal;VAR NextEntryNo@1005 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostDtldCVLedgEntry@272(VAR GenJournalLine@1000 : Record 81;VAR DetailedCVLedgEntryBuffer@1001 : Record 383;VAR AccNo@1002 : Code[20];Unapply@1003 : Boolean;VAR AdjAmount@1004 : ARRAY [4] OF Decimal);
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnAfterPostGenJnlLine@1009(VAR GenJournalLine@1000 : Record 81;Balancing@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostCust@205(VAR GenJournalLine@1000 : Record 81;Balancing@1001 : Boolean;VAR TempGLEntryBuf@1002 : TEMPORARY Record 17;VAR NextEntryNo@1003 : Integer;VAR NextTransactionNo@1004 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostVend@208(VAR GenJournalLine@1000 : Record 81;Balancing@1001 : Boolean;VAR TempGLEntryBuf@1004 : TEMPORARY Record 17;VAR NextEntryNo@1003 : Integer;VAR NextTransactionNo@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostVAT@222(GenJnlLine@1000 : Record 81;VAR GLEntry@1001 : Record 17;VATPostingSetup@1002 : Record 325);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcAmtLCYAdjustment@279(VAR CVLedgEntryBuf@1002 : Record 382;VAR DtldCVLedgEntryBuf@1001 : Record 383;VAR GenJnlLine@1000 : Record 81;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcAplication@276(VAR NewCVLedgEntryBuf@1009 : Record 382;VAR OldCVLedgEntryBuf@1008 : Record 382;VAR DtldCVLedgEntryBuf@1007 : Record 383;VAR GenJnlLine@1006 : Record 81;VAR AppliedAmount@1005 : Decimal;VAR AppliedAmountLCY@1004 : Decimal;VAR OldAppliedAmount@1003 : Decimal;VAR PrevNewCVLedgEntryBuf@1002 : Record 382;VAR PrevOldCVLedgEntryBuf@1001 : Record 382;VAR AllApplied@1000 : Boolean;VAR IsHandled@1010 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcPmtTolerance@185(VAR NewCVLedgEntryBuf@1005 : Record 382;VAR OldCVLedgEntryBuf@1004 : Record 382;VAR OldCVLedgEntryBuf2@1003 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;VAR GenJnlLine@1001 : Record 81;VAR PmtTolAmtToBeApplied@1000 : Decimal;VAR IsHandled@1006 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcPmtDisc@266(VAR NewCVLedgEntryBuf@1005 : Record 382;VAR OldCVLedgEntryBuf@1004 : Record 382;VAR OldCVLedgEntryBuf2@1003 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;VAR GenJnlLine@1001 : Record 81;VAR PmtTolAmtToBeApplied@1000 : Decimal;VAR IsHandled@1006 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcPmtDiscTolerance@198(VAR NewCVLedgEntryBuf@1005 : Record 382;VAR OldCVLedgEntryBuf@1004 : Record 382;VAR OldCVLedgEntryBuf2@1003 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;VAR GenJnlLine@1001 : Record 81;VAR IsHandled@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeFindNextOldCustLedgEntryToApply@310(VAR GenJournalLine@1000 : Record 81;VAR TempOldCustLedgerEntry@1001 : TEMPORARY Record 21;VAR NewCVLedgerEntryBuffer@1002 : Record 382;VAR Completed@1003 : Boolean;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeFindNextOldEmplLedgEntryToApply@309(VAR GenJournalLine@1000 : Record 81;VAR TempOldEmployeeLedgerEntry@1001 : TEMPORARY Record 5222;VAR NewCVLedgerEntryBuffer@1002 : Record 382;VAR Completed@1003 : Boolean;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeFindNextOldVendLedgEntryToApply@305(VAR GenJournalLine@1000 : Record 81;VAR TempOldVendorLedgerEntry@1001 : TEMPORARY Record 25;VAR NewCVLedgerEntryBuffer@1002 : Record 382;VAR Completed@1003 : Boolean;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetDtldCustLedgEntryAccNo@277(VAR GenJournalLine@1000 : Record 81;VAR DetailedCVLedgEntryBuffer@1001 : Record 383;VAR CustomerPostingGroup@1002 : Record 92;OriginalTransactionNo@1003 : Integer;Unapply@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetDtldVendLedgEntryAccNo@275(VAR GenJournalLine@1000 : Record 81;VAR DetailedCVLedgEntryBuffer@1001 : Record 383;VAR VendorPostingGroup@1002 : Record 93;OriginalTransactionNo@1003 : Integer;Unapply@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalcMinimalPossibleLiability@188(VAR NewCVLedgEntryBuf@1002 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR OldCVLedgEntryBuf2@1000 : Record 382;VAR MinimalPossibleLiability@1003 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalcPaymentExceedsLiability@189(VAR NewCVLedgEntryBuf@1003 : Record 382;VAR OldCVLedgEntryBuf@1002 : Record 382;VAR OldCVLedgEntryBuf2@1001 : Record 382;VAR MinimalPossibleLiability@1000 : Decimal;VAR PaymentExceedsLiability@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalcToleratedPaymentExceedsLiability@190(VAR NewCVLedgEntryBuf@1004 : Record 382;VAR OldCVLedgEntryBuf@1003 : Record 382;VAR OldCVLedgEntryBuf2@1002 : Record 382;VAR MinimalPossibleLiability@1001 : Decimal;VAR ToleratedPaymentExceedsLiability@1000 : Boolean;VAR PmtTolAmtToBeApplied@1005 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalcPmtDiscount@193(VAR NewCVLedgEntryBuf@1002 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR OldCVLedgEntryBuf2@1000 : Record 382;VAR DtldCVLedgEntryBuf@1005 : Record 383;VAR GenJnlLine@1004 : Record 81;VAR PmtTolAmtToBeApplied@1003 : Decimal;VAR PmtDisc@1006 : Decimal;VAR PmtDiscLCY@1007 : Decimal;VAR PmtDiscAddCurr@1008 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalcPmtDiscTolerance@200(VAR NewCVLedgEntryBuf@1005 : Record 382;VAR OldCVLedgEntryBuf@1004 : Record 382;VAR OldCVLedgEntryBuf2@1003 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;VAR GenJnlLine@1001 : Record 81;VAR PmtDiscTol@1000 : Decimal;VAR PmtDiscTolLCY@1006 : Decimal;VAR PmtDiscTolAddCurr@1007 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitOldDtldCVLedgEntryBuf@202(VAR DtldCVLedgEntryBuf@1003 : Record 383;VAR NewCVLedgEntryBuf@1009 : Record 382;VAR OldCVLedgEntryBuf@1008 : Record 382;VAR PrevNewCVLedgEntryBuf@1002 : Record 382;VAR PrevOldCVLedgEntryBuf@1001 : Record 382;VAR GenJnlLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitNewDtldCVLedgEntryBuf@204(VAR DtldCVLedgEntryBuf@1003 : Record 383;VAR NewCVLedgEntryBuf@1009 : Record 382;VAR OldCVLedgEntryBuf@1008 : Record 382;VAR PrevNewCVLedgEntryBuf@1002 : Record 382;VAR PrevOldCVLedgEntryBuf@1001 : Record 382;VAR GenJnlLine@1000 : Record 81);
    BEGIN
    END;

    [Integration(TRUE,TRUE)]
    LOCAL PROCEDURE OnAfterSettingIsTransactionConsistent@187(GenJournalLine@1000 : Record 81;VAR IsTransactionConsistent@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcCurrencyApplnRounding@207(GenJnlLine@1008 : Record 81;VAR DtldCVLedgEntryBuf@1007 : Record 383;VAR OldCVLedgEntryBuf@1006 : Record 382;VAR OldCVLedgEntryBuf2@1009 : Record 382;VAR OldCVLedgEntryBuf3@1010 : Record 382;VAR NewCVLedgEntryBuf@1005 : Record 382;VAR NewCVLedgEntryBuf2@1004 : Record 382;VAR IsHandled@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcCurrencyRealizedGainLoss@273(VAR CVLedgEntryBuf@1004 : Record 382;VAR TempDtldCVLedgEntryBuf@1003 : TEMPORARY Record 383;VAR GenJnlLine@1002 : Record 81;VAR AppliedAmount@1001 : Decimal;VAR AppliedAmountLCY@1000 : Decimal;VAR IsHandled@1005 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcCurrencyUnrealizedGainLoss@245(VAR CVLedgEntryBuf@1004 : Record 382;VAR TempDtldCVLedgEntryBuf@1003 : TEMPORARY Record 383;VAR GenJnlLine@1002 : Record 81;VAR AppliedAmount@1001 : Decimal;VAR RemainingAmountBeforeAppln@1000 : Decimal;VAR IsHandled@1005 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostApply@195(GenJnlLine@1004 : Record 81;VAR DtldCVLedgEntryBuf@1003 : Record 383;VAR OldCVLedgEntryBuf@1002 : Record 382;VAR NewCVLedgEntryBuf@1001 : Record 382;VAR NewCVLedgEntryBuf2@1000 : Record 382);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostApply@192(GenJnlLine@1004 : Record 81;VAR DtldCVLedgEntryBuf@1003 : Record 383;VAR OldCVLedgEntryBuf@1002 : Record 382;VAR NewCVLedgEntryBuf@1001 : Record 382;VAR NewCVLedgEntryBuf2@1000 : Record 382);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateTotalAmounts@211(VAR TempInvPostBuf@1003 : TEMPORARY Record 49;VAR DimSetID@1002 : Integer;VAR AmountToCollect@1001 : Decimal;VAR AmountACYToCollect@1000 : Decimal;VAR IsHandled@1004 : Boolean;VAR DtldCVLedgEntryBuf@1005 : Record 383);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertPmtDiscVATForGLEntry@291(VAR DetailedCVLedgEntryBuffer@1001 : Record 383;GenJournalLine@1000 : Record 81;VATEntry@1002 : Record 254);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCreateGLEntryGainLossInsertGLEntry@201(VAR GenJnlLine@1000 : Record 81;VAR GLEntry@1001 : Record 17);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCreateGLEntriesForTotalAmountsUnapply@238(DetailedCustLedgEntry@1000 : Record 379;VAR CustomerPostingGroup@1001 : Record 92;GenJournalLine@1002 : Record 81;VAR TempInvoicePostBuffer@1003 : TEMPORARY Record 49);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCreateGLEntriesForTotalAmountsUnapplyVendor@274(DetailedVendorLedgEntry@1003 : Record 380;VAR VendorPostingGroup@1002 : Record 93;GenJournalLine@1001 : Record 81;VAR TempInvoicePostBuffer@1000 : TEMPORARY Record 49);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInitGLEntryVAT@209(GenJnlLine@1000 : Record 81;VAR GLEntry@1001 : Record 17);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitGLEntryVAT@210(GenJnlLine@1000 : Record 81;VAR GLEntry@1001 : Record 17);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInitGLEntryVATCopy@215(GenJnlLine@1000 : Record 81;VAR GLEntry@1001 : Record 17;VAR VATEntry@1002 : Record 254);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitGLEntryVATCopy@212(GenJnlLine@1000 : Record 81;VAR GLEntry@1001 : Record 17);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostUnrealVATEntry@213(GenJnlLine@1000 : Record 81;VAR VATEntry@1001 : Record 254);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostUnrealVATEntry@214(GenJnlLine@1000 : Record 81;VAR VATEntry2@1001 : Record 254);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterHandleAddCurrResidualGLEntry@217(GenJournalLine@1000 : Record 81;GLEntry2@1001 : Record 17);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalcCurrencyRealizedGainLoss@239(VAR CVLedgEntryBuf@1004 : Record 382;AppliedAmount@1001 : Decimal;AppliedAmountLCY@1000 : Decimal;VAR RealizedGainLossLCY@1002 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesTaxCalculateCalculateTax@287(VAR GenJournalLine@1000 : Record 81;GLEntry@1001 : Record 17;Currency@1002 : Record 4);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesTaxCalculateInitSalesTaxLines@486(VAR GenJournalLine@1000 : Record 81;GLEntry@1001 : Record 17;SalesTaxBaseAmount@1002 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesTaxCalculateReverseCalculateTax@283(VAR GenJournalLine@1000 : Record 81;GLEntry@1001 : Record 17;Currency@1002 : Record 4);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateVATEntryTaxDetails@293(VAR VATEntry@1000 : Record 254;TaxDetail@1001 : Record 322);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnApplyCustLedgEntryOnAfterRecalculateAmounts@488(VAR TempOldCustLedgerEntry@1000 : TEMPORARY Record 21;OldCustLedgerEntry@1001 : Record 21;CVLedgerEntryBuffer@1002 : Record 382;GenJournalLine@1003 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnApplyCustLedgEntryOnBeforePrepareTempCustLedgEntry@301(VAR GenJournalLine@1000 : Record 81;VAR NewCVLedgerEntryBuffer@1001 : Record 382;VAR DetailedCVLedgEntryBuffer@1002 : Record 383;VAR NextEntryNo@1003 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnApplyVendLedgEntryOnAfterRecalculateAmounts@292(VAR TempOldVendorLedgerEntry@1000 : TEMPORARY Record 25;OldVendorLedgerEntry@1001 : Record 25;CVLedgerEntryBuffer@1002 : Record 382;GenJournalLine@1003 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCustLedgEntryModify@206(VAR CustLedgerEntry@1000 : Record 21;DetailedCustLedgEntry@1001 : Record 379);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeVendLedgEntryModify@218(VAR VendorLedgerEntry@1000 : Record 25;DetailedVendorLedgEntry@1001 : Record 380);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeEmplLedgEntryModify@219(VAR EmployeeLedgerEntry@1000 : Record 5222;DetailedEmployeeLedgerEntry@1001 : Record 5223);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrepareTempCustledgEntry@220(VAR GenJnlLine@1000 : Record 81;VAR CVLedgerEntryBuffer@1001 : Record 382);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrepareTempVendLedgEntry@221(VAR GenJnlLine@1001 : Record 81;VAR CVLedgerEntryBuffer@1000 : Record 382);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSetDeferralDescription@297(GenJournalLine@1000 : Record 81;DeferralLine@1001 : Record 1702;VAR DeferralDescription@1002 : Text[100];VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnCodeOnBeforeFinishPosting@271(VAR GenJournalLine@1000 : Record 81;Balancing@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnContinuePostingOnBeforeCalculateCurrentBalance@255(VAR GenJournalLine@1000 : Record 81;VAR NextTransactionNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCustPostApplyCustLedgEntryOnBeforeCheckPostingGroup@256(VAR GenJournalLine@1000 : Record 81;VAR Customer@1001 : Record 18);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnHandleAddCurrResidualGLEntryOnBeforeInsertGLEntry@288(GenJournalLine@1000 : Record 81;VAR GLEntry@1001 : Record 17);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnHandleDtldAdjustmentOnBeforeInitGLEntry@311(GenJnlLine@1005 : Record 81;VAR GLEntry@1004 : Record 17;TotalAmountLCY@1002 : Decimal;TotalAmountAddCurr@1001 : Decimal;GLAccNo@1000 : Code[20];VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitVATOnBeforeVATPostingSetupCheck@302(VAR GenJournalLine@1002 : Record 81;VAR GLEntry@1001 : Record 17;VAR VATPostingSetup@1000 : Record 325;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInitVATOnBeforeTestFullVATAccount@307(VAR GenJournalLine@1000 : Record 81;VAR GLEntry@1001 : Record 17;VAR VATPostingSetup@1002 : Record 325;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInsertPmtDiscVATForGLEntryOnAfterCopyFromGenJnlLine@265(VAR DetailedCVLedgEntryBuffer@1000 : Record 383;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInsertTempVATEntryOnBeforeInsert@254(VAR VATEntry@1000 : Record 254;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInsertVATEntriesFromTempOnBeforeVATEntryInsert@286(VAR VATEntry@1000 : Record 254;TempVATEntry@1001 : TEMPORARY Record 254);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInsertVATOnBeforeCreateGLEntryForReverseChargeVATToPurchAcc@284(VAR GenJournalLine@1000 : Record 81;VATPostingSetup@1001 : Record 325;UnrealizedVAT@1002 : Boolean;VATAmount@1003 : Decimal;VATAmountAddCurr@1004 : Decimal;UseAmountAddCurr@1005 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInsertVATOnBeforeCreateGLEntryForReverseChargeVATToRevChargeAcc@285(VAR GenJournalLine@1005 : Record 81;VATPostingSetup@1004 : Record 325;UnrealizedVAT@1003 : Boolean;VATAmount@1002 : Decimal;VATAmountAddCurr@1001 : Decimal;UseAmountAddCurr@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostApplyOnAfterRecalculateAmounts@391(VAR OldCVLedgerEntryBuffer2@1000 : Record 382;OldCVLedgerEntryBuffer@1001 : Record 382;NewCVLedgerEntryBuffer@1002 : Record 382;GenJournalLine@1003 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostBankAccOnAfterBankAccLedgEntryInsert@264(VAR BankAccountLedgerEntry@1000 : Record 271;VAR GenJournalLine@1001 : Record 81;BankAccount@1002 : Record 270);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostBankAccOnBeforeBankAccLedgEntryInsert@261(VAR BankAccountLedgerEntry@1000 : Record 271;VAR GenJournalLine@1001 : Record 81;BankAccount@1002 : Record 270);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostBankAccOnAfterCheckLedgEntryInsert@257(VAR CheckLedgerEntry@1000 : Record 272;VAR BankAccountLedgerEntry@1001 : Record 271;VAR GenJournalLine@1002 : Record 81;BankAccount@1003 : Record 270);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostBankAccOnBeforeCheckLedgEntryInsert@252(VAR CheckLedgerEntry@1000 : Record 272;VAR BankAccountLedgerEntry@1001 : Record 271;VAR GenJournalLine@1002 : Record 81;BankAccount@1003 : Record 270);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostBankAccOnBeforeInitBankAccLedgEntry@263(VAR GenJournalLine@1000 : Record 81;CurrencyFactor@1001 : Decimal;VAR NextEntryNo@1002 : Integer;VAR NextTransactionNo@1003 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostCustOnAfterCopyCVLedgEntryBuf@251(VAR CVLedgerEntryBuffer@1000 : Record 382;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostVendOnAfterCopyCVLedgEntryBuf@253(VAR CVLedgerEntryBuffer@1000 : Record 382;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostDtldCVLedgEntryOnBeforeCreateGLEntryGainLoss@262(VAR GenJournalLine@1000 : Record 81;DtldCVLedgEntryBuffer@1001 : Record 383;VAR Unapply@1002 : Boolean;VAR AccNo@1003 : Code[20]);
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnPostGLAccOnBeforeInsertGLEntry@246(VAR GenJournalLine@1000 : Record 81;VAR GLEntry@1001 : Record 17;VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnPostFixedAssetOnBeforeInsertGLEntry@249(VAR GenJournalLine@1002 : Record 81;VAR GLEntry@1001 : Record 17;VAR IsHandled@1000 : Boolean;VAR TempFAGLPostBuf@1003 : TEMPORARY Record 5637);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostUnapplyOnAfterVATEntrySetFilters@294(VAR VATEntry@1000 : Record 254;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostUnapplyOnBeforeUnapplyVATEntry@289(VAR VATEntry@1000 : Record 254;VAR UnapplyVATEntry@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPostUnapplyOnBeforeVATEntryInsert@241(VAR VATEntry@1000 : Record 254;GenJournalLine@1001 : Record 81;OrigVATEntry@1002 : Record 254);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPrepareTempCustLedgEntryOnAfterSetFilters@281(VAR OldCustLedgerEntry@1000 : Record 21;GenJournalLine@1001 : Record 81;CVLedgerEntryBuffer@1002 : Record 382);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPrepareTempCustLedgEntryOnBeforeExit@233(VAR GenJournalLine@1000 : Record 81;VAR CVLedgerEntryBuffer@1001 : Record 382;VAR TempOldCustLedgEntry@1002 : TEMPORARY Record 21);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPrepareTempCustLedgEntryOnBeforeTestPositive@282(VAR GenJournalLine@1000 : Record 81;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPrepareTempCustLedgEntryOnBeforeTempOldCustLedgEntryInsert@248(VAR CustLedgerEntry@1000 : Record 21;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPrepareTempVendLedgEntryOnAfterSetFilters@278(VAR OldVendorLedgerEntry@1000 : Record 25;GenJournalLine@1001 : Record 81;CVLedgerEntryBuffer@1002 : Record 382);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPrepareTempVendLedgEntryOnBeforeExit@235(VAR GenJournalLine@1000 : Record 81;VAR CVLedgerEntryBuffer@1001 : Record 382;VAR TempOldVendLedgEntry@1002 : TEMPORARY Record 25);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnPrepareTempVendLedgEntryOnBeforeTempOldVendLedgEntryInsert@250(VAR VendorLedgerEntry@1000 : Record 25;GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUnapplyCustLedgEntryOnAfterCreateGLEntriesForTotalAmounts@226(VAR GenJournalLine@1000 : Record 81;DetailedCustLedgEntry@1001 : Record 379);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUnapplyCustLedgEntryOnAfterDtldCustLedgEntrySetFilters@300(VAR DetailedCustLedgEntry2@1000 : Record 379;DetailedCustLedgEntry@1001 : Record 379);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUnapplyCustLedgEntryOnBeforeCheckPostingGroup@258(VAR GenJournalLine@1000 : Record 81;Customer@1001 : Record 18);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUnapplyCustLedgEntryOnBeforePostUnapply@298(VAR DetailedCustLedgEntry@1000 : Record 379;VAR DetailedCustLedgEntry2@1001 : Record 379);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUnapplyVendLedgEntryOnAfterCreateGLEntriesForTotalAmounts@228(VAR GenJournalLine@1000 : Record 81;DetailedVendorLedgEntry@1001 : Record 380);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUnapplyVendLedgEntryOnAfterFilterSourceEntries@303(VAR DetailedVendorLedgEntry@1000 : Record 380;VAR DetailedVendorLedgEntry2@1001 : Record 380);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUnapplyVendLedgEntryOnBeforeCheckPostingGroup@259(VAR GenJournalLine@1000 : Record 81;Vendor@1001 : Record 23);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUnapplyVendLedgEntryOnBeforePostUnapply@299(VAR DetailedVendorLedgEntry@1000 : Record 380;VAR DetailedVendorLedgEntry2@1001 : Record 380);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCustUnrealizedVATOnAfterVATPartCalculation@231(GenJournalLine@1000 : Record 81;VAR CustLedgerEntry@1001 : Record 21;PaidAmount@1002 : Decimal;TotalUnrealVATAmountFirst@1003 : Decimal;TotalUnrealVATAmountLast@1004 : Decimal;SettledAmount@1005 : Decimal;VATEntry2@1006 : Record 254);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCustUnrealizedVATOnBeforeInitGLEntryVAT@236(VAR GenJournalLine@1000 : Record 81;VAR VATEntry@1001 : Record 254;VAR VATAmount@1002 : Decimal;VAR VATBase@1003 : Decimal;VAR VATAmountAddCurr@1004 : Decimal;VAR VATBaseAddCurr@1005 : Decimal;VAR IsHandled@1006 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnVendPostApplyVendLedgEntryOnBeforeCheckPostingGroup@260(VAR GenJournalLine@1000 : Record 81;Vendor@1001 : Record 23);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnVendUnrealizedVATOnAfterVATPartCalculation@227(GenJournalLine@1000 : Record 81;VAR VendorLedgerEntry@1001 : Record 25;PaidAmount@1002 : Decimal;TotalUnrealVATAmountFirst@1003 : Decimal;TotalUnrealVATAmountLast@1004 : Decimal;SettledAmount@1005 : Decimal;VATEntry2@1006 : Record 254);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnVendUnrealizedVATOnBeforeInitGLEntryVAT@237(VAR GenJournalLine@1000 : Record 81;VAR VATEntry@1001 : Record 254;VAR VATAmount@1002 : Decimal;VAR VATBase@1003 : Decimal;VAR VATAmountAddCurr@1004 : Decimal;VAR VATBaseAddCurr@1005 : Decimal);
    BEGIN
    END;

    LOCAL PROCEDURE PostCreditRestriction@1100485000(GenJnlLine@1100485000 : Record 81;VAR GLEntry@1100528500 : Record 17;VAR VATPostingSetup@1100528501 : Record 325);
    VAR
      CreditRestriction@1100485002 : Record 11020254;
      CreditRestrictionAmt@1100485001 : Decimal;
      CreditRestrictionAmtLCY@1100485003 : Decimal;
    BEGIN
      //**4PS
      //Posts Credit Restriction to the Unrealised Credit Restriction Account...

      IF (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Invoice) OR
         (GenJnlLine."Document Type" = GenJnlLine."Document Type"::"Credit Memo")
      THEN BEGIN
        IF GenJnlLine."Credit Restriction %" <> 0 THEN BEGIN
          GenJnlLine.VALIDATE("Credit Restriction %");
          CreditRestrictionAmt := GenJnlLine."Credit Restriction Amount";
          CreditRestrictionAmtLCY := GenJnlLine."Cr. Restriction Amt (LCY)";
          IF CreditRestrictionAmtLCY <> 0 THEN BEGIN
            IF CreditRestriction.GET(GenJnlLine."Credit Restriction") THEN BEGIN
              CreditRestriction.TESTFIELD("Account No. Not Realised");
              InitGLEntry(
                GenJnlLine,GLEntry,
                CreditRestriction."Account No. Not Realised",
                CreditRestrictionAmtLCY, CreditRestrictionAmt,TRUE,TRUE);
              InsertGLEntry(GenJnlLine,GLEntry,TRUE);

              PostingCreditRestrictionVAT := TRUE;
              InsertVAT(
                GenJnlLine,VATPostingSetup,
                GenJnlLine."Cr. Restriction Amt (LCY)" + GenJnlLine."Cr. Restriction VAT Amt (LCY)",
                GenJnlLine."Cr. Restriction VAT Amt (LCY)", GenJnlLine."Cr. Restriction Amt (LCY)",
                GenJnlLine."Source Currency Code",
                CalcLCYToAddCurr(GenJnlLine."Cr. Restriction Amt (LCY)" + GenJnlLine."Cr. Restriction VAT Amt (LCY)"),
                CalcLCYToAddCurr(GenJnlLine."Cr. Restriction VAT Amt (LCY)"),
                CalcLCYToAddCurr(GenJnlLine."Cr. Restriction Amt (LCY)"));
              PostingCreditRestrictionVAT := FALSE;
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckCreditRestrictionOnTime@1100485001(NewCVLedgEntryBuf@1100485004 : Record 382;OldCustLedgEntry@1100485003 : Record 21;GenJnlLine@1100525000 : Record 81) Result : Boolean;
    BEGIN
      //**4PS
      //Check if Credit Restriction

      Result :=
        (NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Payment) AND
        (OldCustLedgEntry."Document Type" = OldCustLedgEntry."Document Type"::Invoice) AND
        GenJnlLine."Apply Credit Restriction";
      IF Result THEN
        EXIT;

      Result :=
        (NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::"Credit Memo") AND
        (OldCustLedgEntry."Document Type" = OldCustLedgEntry."Document Type"::Invoice) AND
        (NewCVLedgEntryBuf."Applies-to Doc. Type" = NewCVLedgEntryBuf."Applies-to Doc. Type"::Invoice) AND
        (NewCVLedgEntryBuf."Applies-to Doc. No." = OldCustLedgEntry."Document No.") AND
        (OldCustLedgEntry."Credit Restriction Amount" <> 0);
    END;

    LOCAL PROCEDURE CalcCreditRestrictionRefund@1100485002(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR DtldCVLedgEntryBuf@1003 : Record 383;GenJnlLine2@1004 : Record 81);
    VAR
      CreditRestriction@1100485000 : Record 11020254;
      Amount@1100485017 : Decimal;
      VATEntry@1100485001 : Record 254;
      TempVATEntry@1100485008 : TEMPORARY Record 254;
      ReverseVATEntry@1100485009 : Record 254;
      OldCustLedgEntry2@1100525000 : Record 21;
      GLEntry@1100528500 : Record 17;
      VATPostingSetup@1100528501 : Record 325;
      PaidCRAmount@1100485019 : Decimal;
      PaidCRAmountLCY@1100485018 : Decimal;
      PaidCRAmountAddCurr@1100485002 : Decimal;
      UnpaidCRAmount@1100485022 : Decimal;
      UnpaidCRAmountLCY@1100485021 : Decimal;
      UnpaidCRAmountAddCurr@1100485020 : Decimal;
      TotCRAmount@1100485013 : Decimal;
      TotCRAmountLCY@1100485012 : Decimal;
      TotCRAmountAddCurr@1100485011 : Decimal;
      PaidVATAmount@1100485025 : Decimal;
      PaidVATAmountLCY@1100485024 : Decimal;
      PaidVATAmountAddCurr@1100485023 : Decimal;
      UnpaidVATAmount@1100485016 : Decimal;
      UnpaidVATAmountLCY@1100485015 : Decimal;
      UnpaidVATAmountAddCurr@1100485014 : Decimal;
      TotVATAmount@1100485005 : Decimal;
      TotVATAmountLCY@1100485004 : Decimal;
      TotVATAmountAddCurr@1100485003 : Decimal;
      GLEntryInsertedForCredRestrVAT@1100525001 : Boolean;
      PaidRatio@1100525002 : Decimal;
    BEGIN
      //**4PS
      //If Credit Restriction Date has not passed post a refund for the Credit Restriction Amount...

      NewCVLedgEntryBuf."Credit Restriction %" := OldCVLedgEntryBuf."Credit Restriction %";
      NewCVLedgEntryBuf."Credit Restriction Date" := OldCVLedgEntryBuf."Credit Restriction Date";
      NewCVLedgEntryBuf."Credit Restriction Amount" := OldCVLedgEntryBuf."Credit Restriction Amount";
      NewCVLedgEntryBuf."Credit Restriction" := OldCVLedgEntryBuf."Credit Restriction";
      NewCVLedgEntryBuf."Credit Restriction VAT Amount" := OldCVLedgEntryBuf."Credit Restriction VAT Amount";

      OldCustLedgEntry2.CopyFromCVLedgEntryBuffer(OldCVLedgEntryBuf);
      IF CheckCreditRestrictionOnTime(NewCVLedgEntryBuf,OldCustLedgEntry2,GenJnlLine2) THEN BEGIN
        // Check what part is paid and what is not paid...
        CalcCRBaseAmounts(OldCVLedgEntryBuf, GenJnlLine2, TotCRAmount, PaidCRAmount, UnpaidCRAmount,
                                                           TotVATAmount, PaidVATAmount, UnpaidVATAmount,
                                                           PaidRatio,
                                                           NewCVLedgEntryBuf."Document Type",
                                                           NewCVLedgEntryBuf."Document No.");

        // Calculate the various amount types...
        CalcAmounts(NewCVLedgEntryBuf, PaidCRAmount, PaidCRAmountLCY, PaidCRAmountAddCurr);
        CalcAmounts(NewCVLedgEntryBuf, UnpaidCRAmount, UnpaidCRAmountLCY, UnpaidCRAmountAddCurr);
        CalcAmounts(NewCVLedgEntryBuf, TotCRAmount, TotCRAmountLCY, TotCRAmountAddCurr);
        CalcAmounts(NewCVLedgEntryBuf, PaidVATAmount, PaidVATAmountLCY, PaidVATAmountAddCurr);
        CalcAmounts(NewCVLedgEntryBuf, UnpaidVATAmount, UnpaidVATAmountLCY, UnpaidVATAmountAddCurr);
        CalcAmounts(NewCVLedgEntryBuf, TotVATAmount, TotVATAmountLCY, TotVATAmountAddCurr);

        // Handle the cust. ledg. entry...
        DtldCVLedgEntryBuf.InitFromGenJnlLine(GenJnlLine2);
        DtldCVLedgEntryBuf.CopyFromCVLedgEntryBuf(NewCVLedgEntryBuf);

        DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Credit Restriction";
        DtldCVLedgEntryBuf.Amount := UnpaidCRAmount + UnpaidVATAmount;
        DtldCVLedgEntryBuf."Amount (LCY)" := UnpaidCRAmountLCY + UnpaidVATAmountLCY;
        DtldCVLedgEntryBuf."Additional-Currency Amount" := UnpaidCRAmountAddCurr + UnpaidVATAmountAddCurr;
        IF (NewCVLedgEntryBuf."Posting Date" <= OldCVLedgEntryBuf."Credit Restriction Date") THEN BEGIN
          NewCVLedgEntryBuf.Open := -NewCVLedgEntryBuf."Remaining Amt. (LCY)" + OldCVLedgEntryBuf."Credit Restriction Amount" +
                                      OldCVLedgEntryBuf."Credit Restriction VAT Amount" <> OldCVLedgEntryBuf."Remaining Amt. (LCY)";
        END ELSE BEGIN
          NewCVLedgEntryBuf.Open := -NewCVLedgEntryBuf."Remaining Amt. (LCY)" <> OldCVLedgEntryBuf."Remaining Amt. (LCY)";
        END;
        DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);

        IF CreditRestriction.GET(OldCVLedgEntryBuf."Credit Restriction") THEN BEGIN
          IF (TotCRAmountLCY <> 0) OR (TotCRAmount <> 0) THEN BEGIN
            CreditRestriction.TESTFIELD("Account No. Not Realised");
            InitGLEntry(
              GenJnlLine2,GLEntry,
              CreditRestriction."Account No. Not Realised",
              -TotCRAmountLCY,-TotCRAmount,TRUE,TRUE);
            InsertGLEntry(GenJnlLine2,GLEntry,TRUE);
          END;

          IF (PaidCRAmountLCY <> 0) OR (PaidCRAmount <> 0) THEN BEGIN
            CreditRestriction.TESTFIELD("Account No. Realised");
            InitGLEntry(
              GenJnlLine2,GLEntry,
              CreditRestriction."Account No. Realised",
              PaidCRAmountLCY,PaidCRAmount,TRUE,TRUE);
            InsertGLEntry(GenJnlLine2,GLEntry,TRUE);
          END;

      //Construction below is not right, for each invoice there is 1 customer entry with a total credit restriction VAT amount
      //and there are (possible) multiple credit restriction lines with separate VAT.
      //It is not possible to compare the VAT amounts 1 on 1.
      //Temporarily solved by first count all 'Unrealized VAT' amounts, when it match with the unrealized VAT amount of
      //the customer entry, then reverse the VAT entries.
      //For a final solution first create a good scenario with payments/part payments/creditmemo's/part creditmemo's
      //and change the VAT entry with a pallet for credtit restriction. This does not seem something for a hotfix.

          VATEntry.RESET;
          VATEntry.SETCURRENTKEY("Transaction No.");
          VATEntry.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
          VATEntry.SETRANGE("Reversed by Entry No.", 0);
          IF VATEntry.FIND('-') THEN
            REPEAT
              TempVATEntry := VATEntry;
              TempVATEntry.INSERT;
            UNTIL VATEntry.NEXT = 0;

          IF TempVATEntry.FIND('-') THEN BEGIN
            REPEAT
              VATPostingSetup.GET(TempVATEntry."VAT Bus. Posting Group", TempVATEntry."VAT Prod. Posting Group");
              IF (TempVATEntry.Amount = -OldCVLedgEntryBuf."Credit Restriction VAT Amount") THEN BEGIN
                InitGLEntry(
                  GenJnlLine2,GLEntry,
                  VATPostingSetup."Sales VAT Account",
                  -TotVATAmountLCY,-TotVATAmount,TRUE,TRUE);
                InsertGLEntry(GenJnlLine2,GLEntry,TRUE);
                GLEntryInsertedForCredRestrVAT := TRUE;
                ReverseVATEntry := TempVATEntry;
                ReverseVATEntry.SETRECFILTER;
                ReverseVAT(ReverseVATEntry,GenJnlLine2);

                PostCRVAT(GenJnlLine2,VATPostingSetup,PaidCRAmountLCY,PaidVATAmountLCY);

              END ELSE IF (TempVATEntry."Unrealized Amount" = -OldCVLedgEntryBuf."Credit Restriction VAT Amount") THEN BEGIN
                InitGLEntry(
                  GenJnlLine2,GLEntry,
                  VATPostingSetup."Sales VAT Unreal. Account",
                  -TotVATAmountLCY,-TotVATAmount,TRUE,TRUE);
                InsertGLEntry(GenJnlLine2,GLEntry,TRUE);
                GLEntryInsertedForCredRestrVAT := TRUE;
                ReverseVATEntry := TempVATEntry;
                ReverseVATEntry.SETRECFILTER;
                ReverseVAT(ReverseVATEntry,GenJnlLine2);

                PostCRVAT(GenJnlLine2,VATPostingSetup,PaidCRAmountLCY,PaidVATAmountLCY);
              END;
            UNTIL TempVATEntry.NEXT = 0;
            IF NOT GLEntryInsertedForCredRestrVAT THEN
              HandleVATUnrealizedAmountCreditRestrictionForSeveralVATEntries(
                TempVATEntry,NewCVLedgEntryBuf,OldCVLedgEntryBuf,GenJnlLine2,
                PaidRatio,PaidCRAmountLCY,PaidVATAmountLCY);
          END;
        END;
      END ELSE IF (NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Payment) AND
                  (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice) THEN
      BEGIN
        IF (NewCVLedgEntryBuf."Posting Date" <= OldCVLedgEntryBuf."Credit Restriction Date") THEN BEGIN
          NewCVLedgEntryBuf.Open := -NewCVLedgEntryBuf."Remaining Amt. (LCY)" + OldCVLedgEntryBuf."Credit Restriction Amount" +
                                      OldCVLedgEntryBuf."Credit Restriction VAT Amount" <> OldCVLedgEntryBuf."Remaining Amt. (LCY)";
        END ELSE BEGIN
          NewCVLedgEntryBuf.Open := -NewCVLedgEntryBuf."Remaining Amt. (LCY)" <> OldCVLedgEntryBuf."Remaining Amt. (LCY)";
        END;
        TotCRAmount := -OldCVLedgEntryBuf."Credit Restriction Amount";
        CalcAmounts(NewCVLedgEntryBuf, TotCRAmount, TotCRAmountLCY, TotCRAmountAddCurr);

        IF (TotCRAmount <> 0) OR (TotCRAmountLCY <> 0) THEN BEGIN
          IF CreditRestriction.GET(OldCVLedgEntryBuf."Credit Restriction") THEN BEGIN
            CreditRestriction.TESTFIELD("Account No. Not Realised");
            CreditRestriction.TESTFIELD("Account No. Realised");
            InitGLEntry(
              GenJnlLine2,GLEntry,
              CreditRestriction."Account No. Not Realised",
              -TotCRAmountLCY,-TotCRAmount,TRUE,TRUE);
            InsertGLEntry(GenJnlLine2,GLEntry,TRUE);

            InitGLEntry(
              GenJnlLine2,GLEntry,
              CreditRestriction."Account No. Realised",
              TotCRAmountLCY,TotCRAmount,TRUE,TRUE);
            InsertGLEntry(GenJnlLine2,GLEntry,TRUE);
          END;
        END;
      END;
      //**4PS.en
    END;

    LOCAL PROCEDURE HandleVATUnrealizedAmountCreditRestrictionForSeveralVATEntries@1100525005(VAR TempVATEntry@1100525000 : TEMPORARY Record 254;VAR NewCVLedgEntryBuf@1100525008 : Record 382;VAR OldCVLedgEntryBuf@1100525002 : Record 382;GenJnlLine2@1100525004 : Record 81;PaidRatio@1100525013 : Decimal;TotalPaidCRAmountLCY@1100525015 : Decimal;TotalPaidVATAmountLCY@1100525016 : Decimal);
    VAR
      VATPostingSetup@1100525003 : Record 325;
      GLEntry@1100525005 : Record 17;
      LastTempVATEntry@1100525014 : TEMPORARY Record 254;
      ReverseVATEntry@1100525006 : Record 254;
      TotalUnrealizedVATAmount@1100525001 : Decimal;
      TempVATEntryUnrealizedAmountLCY@1100525007 : Decimal;
      PaidCRAmountLCY@1100525011 : Decimal;
      PaidVATAmountLCY@1100525010 : Decimal;
      TotalPaidCRAmountLCYBasedOnVATEntries@1100525009 : Decimal;
      TotalPaidVATAmountLCYBasedOnVATEntries@1100525012 : Decimal;
    BEGIN
      //**4PS, C039211
      TempVATEntry.SETFILTER("Unrealized Amount", '<>0');
      TempVATEntry.SETRANGE(Amount, 0);
      IF NOT TempVATEntry.FINDLAST THEN
        EXIT;
      LastTempVATEntry := TempVATEntry;
      CalcTotalsBasedOnTempVATEntries(
        TempVATEntry,NewCVLedgEntryBuf,PaidRatio,TotalUnrealizedVATAmount,
        TotalPaidCRAmountLCYBasedOnVATEntries,TotalPaidVATAmountLCYBasedOnVATEntries);

      IF TotalUnrealizedVATAmount = -OldCVLedgEntryBuf."Credit Restriction VAT Amount" THEN
        IF TempVATEntry.FINDSET THEN
          REPEAT
            VATPostingSetup.GET(TempVATEntry."VAT Bus. Posting Group",TempVATEntry."VAT Prod. Posting Group");
            CalcAmountLCY(NewCVLedgEntryBuf,TempVATEntry."Unrealized Amount",TempVATEntryUnrealizedAmountLCY);
            InitGLEntry(
              GenJnlLine2,GLEntry,VATPostingSetup."Sales VAT Unreal. Account",
              -TempVATEntryUnrealizedAmountLCY,-TempVATEntry."Unrealized Amount",TRUE,TRUE);
            InsertGLEntry(GenJnlLine2,GLEntry,TRUE);
            ReverseVATEntry := TempVATEntry;
            ReverseVATEntry.SETRECFILTER;
            ReverseVAT(ReverseVATEntry,GenJnlLine2);

            CalcPaidCRAmountLCYAndPaidVATAmountLCYOfVATEntry(
              TempVATEntry,NewCVLedgEntryBuf,PaidRatio,PaidCRAmountLCY,PaidVATAmountLCY);
            IF TempVATEntry."Entry No." = LastTempVATEntry."Entry No." THEN BEGIN
              //Prevent Inconsistency due to rounding differences.
              PaidCRAmountLCY := PaidCRAmountLCY + TotalPaidCRAmountLCY - TotalPaidCRAmountLCYBasedOnVATEntries;
              PaidVATAmountLCY := PaidVATAmountLCY + TotalPaidVATAmountLCY - TotalPaidVATAmountLCYBasedOnVATEntries;
            END;
            PostCRVAT(GenJnlLine2,VATPostingSetup,PaidCRAmountLCY,PaidVATAmountLCY);
          UNTIL TempVATEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcTotalsBasedOnTempVATEntries@1100525009(VAR TempVATEntry@1100525000 : TEMPORARY Record 254;CVLedgEntryBuf@1100525004 : Record 382;PaidRatio@1100525005 : Decimal;VAR TotalUnrealizedVATAmount@1100525001 : Decimal;VAR TotalPaidCRAmountLCYBasedOnVATEntries@1100525003 : Decimal;VAR TotalPaidVATAmountLCYBasedOnVATEntries@1100525002 : Decimal);
    VAR
      PaidCRAmountLCY@1100525006 : Decimal;
      PaidVATAmountLCY@1100525007 : Decimal;
    BEGIN
      //**4PS
      IF TempVATEntry.FINDSET THEN
        REPEAT
          TotalUnrealizedVATAmount += TempVATEntry."Unrealized Amount";
          CalcPaidCRAmountLCYAndPaidVATAmountLCYOfVATEntry(
            TempVATEntry,CVLedgEntryBuf,PaidRatio,PaidCRAmountLCY,PaidVATAmountLCY);
          TotalPaidCRAmountLCYBasedOnVATEntries += PaidCRAmountLCY;
          TotalPaidVATAmountLCYBasedOnVATEntries += PaidVATAmountLCY;
        UNTIL TempVATEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcPaidCRAmountLCYAndPaidVATAmountLCYOfVATEntry@1100525017(TempVATEntry@1100525001 : TEMPORARY Record 254;CVLedgEntryBuf@1100525000 : Record 382;PaidRatio@1100525004 : Decimal;VAR PaidCRAmountLCY@1100525005 : Decimal;VAR PaidVATAmountLCY@1100525006 : Decimal);
    VAR
      PaidCRAmount@1100525002 : Decimal;
      PaidVATAmount@1100525003 : Decimal;
    BEGIN
      //**4PS
      PaidCRAmount := PaidRatio * TempVATEntry."Unrealized Base";
      CalcAmountLCY(CVLedgEntryBuf,PaidCRAmount,PaidCRAmountLCY);
      PaidVATAmount := PaidRatio * TempVATEntry."Unrealized Amount";
      CalcAmountLCY(CVLedgEntryBuf,PaidVATAmount,PaidVATAmountLCY);
    END;

    LOCAL PROCEDURE CalcAmountLCY@1100525002(CVLedgEntryBuf@1100525002 : Record 382;VAR Amount@1100525001 : Decimal;VAR AmountLCY@1100525000 : Decimal);
    VAR
      AmountAddCurr@1100525003 : Decimal;
    BEGIN
      //**4PS
      CalcAmounts(
        CVLedgEntryBuf, Amount, AmountLCY, AmountAddCurr);
    END;

    LOCAL PROCEDURE UnApplyCreditRestriction@1100485003(GenJnlLine@1100528500 : Record 81;VAR DtldCVLedgEntryBuf@1100485000 : Record 383);
    VAR
      CustLedgEntry@1100485001 : Record 21;
      CreditRestriction@1100485002 : Record 11020254;
      GLEntry@1100528501 : Record 17;
      CreditRestrictionAmt@1100485003 : Decimal;
      CreditRestrictionAmtLCY@1100485004 : Decimal;
      CreditRestrictionAmtAddCurr@1100485005 : Decimal;
    BEGIN
      //**4PS
      // UnApply the G/L Entries of the Credit Restriction ...

      CustLedgEntry.GET(DtldCVLedgEntryBuf."CV Ledger Entry No.");
      IF CreditRestriction.GET(CustLedgEntry."Credit Restriction") THEN BEGIN
        IF DtldCVLedgEntryBuf."Posting Date" <= CustLedgEntry."Credit Restriction Date" THEN BEGIN
          IF (DtldCVLedgEntryBuf."Entry Type" = DtldCVLedgEntryBuf."Entry Type"::"Credit Restriction") THEN BEGIN
            IF (DtldCVLedgEntryBuf."Amount (LCY)" <> 0) OR (DtldCVLedgEntryBuf.Amount <> 0) THEN BEGIN
              CreditRestriction.TESTFIELD("Account No. Not Realised");
              InitGLEntry(
                GenJnlLine,GLEntry,
                CreditRestriction."Account No. Not Realised",
                -DtldCVLedgEntryBuf."Amount (LCY)",-DtldCVLedgEntryBuf.Amount,TRUE,TRUE);
              InsertGLEntry(GenJnlLine,GLEntry,TRUE);
            END;
          END;
        END ELSE BEGIN
          IF (CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Payment) AND
             (DtldCVLedgEntryBuf."Entry Type" = DtldCVLedgEntryBuf."Entry Type"::Application) THEN
          BEGIN
            CreditRestrictionAmt := -CustLedgEntry."Credit Restriction Amount";
            CreditRestrictionAmtLCY :=
              ROUND(
                (CustLedgEntry."Original Amount" + CreditRestrictionAmt) / CustLedgEntry."Original Currency Factor") -
                CustLedgEntry."Original Amt. (LCY)";

            IF CustLedgEntry."Currency Code" = AddCurrencyCode THEN
              CreditRestrictionAmtAddCurr := CreditRestrictionAmt
            ELSE
              CreditRestrictionAmtAddCurr := CalcLCYToAddCurr(CreditRestrictionAmtLCY);

            IF (CreditRestrictionAmt <> 0) OR (CreditRestrictionAmtLCY <> 0) THEN BEGIN
              CreditRestriction.TESTFIELD("Account No. Realised");
              CreditRestriction.TESTFIELD("Account No. Not Realised");

              InitGLEntry(
                GenJnlLine,GLEntry,
                CreditRestriction."Account No. Realised",
                -CreditRestrictionAmtLCY,-CreditRestrictionAmt,TRUE,TRUE);
              InsertGLEntry(GenJnlLine,GLEntry,TRUE);

              InitGLEntry(
                GenJnlLine,GLEntry,
                CreditRestriction."Account No. Not Realised",
                CreditRestrictionAmtLCY,CreditRestrictionAmt,TRUE,TRUE);
              InsertGLEntry(GenJnlLine,GLEntry,TRUE);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CalcCRBaseAmounts@1100485006(VAR CVLedgEntryBuf@1100485000 : Record 382;VAR GenJnlLine2@1100485001 : Record 81;VAR TotCreditRestrictionAmt@1100485002 : Decimal;VAR PaidCreditRestrictionAmt@1100485003 : Decimal;VAR UnpaidCreditRestrictionAmt@1100485004 : Decimal;VAR TotVATAmount@1100485005 : Decimal;VAR PaidVATAmount@1100485006 : Decimal;VAR UnpaidVATAmount@1100485007 : Decimal;VAR PaidRatio@1100525000 : Decimal;NewDocumentType@1210190000 : Option;NewDocumentNo@1210190003 : Code[20]);
    VAR
      Diff@1100485009 : Decimal;
      UnpaidRatio@1100485008 : Decimal;
      RemainingPmtDiscPossible@1210190001 : Decimal;
      lvText001@1210190002 : TextConst 'ENU=Credit Note %1 Only allowed for complete Invoice Amount;NOR=Kreditnota %1 er kun tillatt for fullstendig fakturabel›p;SVE=Kreditnotan %1 „r endast till†ten f”r fullst„ndigt fakturabelopp';
    BEGIN
      //**4PS
      PaidRatio := 1;
      UnpaidRatio := 0;

      RemainingPmtDiscPossible := CVLedgEntryBuf."Remaining Pmt. Disc. Possible";
      IF NewDocumentType = CVLedgEntryBuf."Document Type"::"Credit Memo" THEN BEGIN
        RemainingPmtDiscPossible := 0;

      //temporarily blocking, solve later start, when old document invoice with credit restriction and not totally credited
        IF (CVLedgEntryBuf."Document Type" = CVLedgEntryBuf."Document Type"::Invoice) AND
           (CVLedgEntryBuf."Credit Restriction Amount" <> 0) THEN
        BEGIN
          IF CVLedgEntryBuf."Remaining Amt. (LCY)" -
             ABS(GenJnlLine2."Amount (LCY)") -
             CVLedgEntryBuf."Credit Restriction Amount" -
             CVLedgEntryBuf."Credit Restriction VAT Amount" <> 0 THEN
          BEGIN
            ERROR(lvText001, NewDocumentNo);
          END;
        END;
      //temporarily blocking, solve later end
      END;

      IF CVLedgEntryBuf."Remaining Amt. (LCY)" - RemainingPmtDiscPossible > ABS(GenJnlLine2."Amount (LCY)") THEN
      BEGIN
        // Paid ratio cred.restriction.
        Diff := ((CVLedgEntryBuf."Remaining Amt. (LCY)" - RemainingPmtDiscPossible) -
                    ABS(GenJnlLine2."Amount (LCY)"));
        UnpaidRatio := Diff / (CVLedgEntryBuf."Credit Restriction Amount" + CVLedgEntryBuf."Credit Restriction VAT Amount");
        IF UnpaidRatio > 1 THEN
          UnpaidRatio := 1;
        PaidRatio := 1 - UnpaidRatio;
      END;

      TotCreditRestrictionAmt := -CVLedgEntryBuf."Credit Restriction Amount";
      PaidCreditRestrictionAmt := -CVLedgEntryBuf."Credit Restriction Amount" * PaidRatio;
      UnpaidCreditRestrictionAmt := -CVLedgEntryBuf."Credit Restriction Amount" * UnpaidRatio;
      TotVATAmount := -CVLedgEntryBuf."Credit Restriction VAT Amount";
      PaidVATAmount := -CVLedgEntryBuf."Credit Restriction VAT Amount" * PaidRatio;
      UnpaidVATAmount := -CVLedgEntryBuf."Credit Restriction VAT Amount" * UnpaidRatio;
    END;

    PROCEDURE CalcAmounts@1100485004(CVLedgEntryBuf@1100485003 : Record 382;VAR Amount@1100485000 : Decimal;VAR AmountLCY@1100485001 : Decimal;VAR AmountAddCurr@1100485002 : Decimal);
    BEGIN
      //**4PS
      AmountLCY :=
          ROUND(
            (CVLedgEntryBuf."Original Amount" + Amount) / CVLedgEntryBuf."Original Currency Factor") -
            CVLedgEntryBuf."Original Amt. (LCY)";

      IF CVLedgEntryBuf."Currency Code" = AddCurrencyCode THEN
        AmountAddCurr := Amount
      ELSE
        AmountAddCurr := CalcLCYToAddCurr(AmountLCY);
    END;

    PROCEDURE PostCRVAT@1100485007(GenJnlLine@1100485003 : Record 81;VATPostingSetup@1100528500 : Record 325;CRAmountLCY@1100485001 : Decimal;VATAmountLCY@1100485002 : Decimal);
    BEGIN
      //**4PS
      IF (CRAmountLCY <> 0) OR (VATAmountLCY <> 0) THEN BEGIN
        GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Sale;
        //**CALL C027397 sn
        GenJnlLine."VAT Bus. Posting Group" := VATPostingSetup."VAT Bus. Posting Group";
        GenJnlLine."VAT Prod. Posting Group" := VATPostingSetup."VAT Prod. Posting Group";
        //**CALL C027397 en
        InsertVAT(
          GenJnlLine,VATPostingSetup,
          CRAmountLCY + VATAmountLCY,
          VATAmountLCY, CRAmountLCY,
          GenJnlLine."Source Currency Code",
          CalcLCYToAddCurr(CRAmountLCY + VATAmountLCY),
          CalcLCYToAddCurr(VATAmountLCY),
          CalcLCYToAddCurr(CRAmountLCY));
      END;
    END;

    LOCAL PROCEDURE PostFaAcqOnOtherDeprBooks@1100530002(GenJnlLine@1100528500 : Record 81;OrgFAAmount@1100530005 : Decimal);
    VAR
      SaveGenJnlLine@1100530000 : Record 81;
      GenJnlTempl@1100530004 : Record 80;
      FADeprBook@1100530003 : Record 5612;
      FAPostGrp@1100530002 : Record 5606;
      DeprBook@1210190000 : Record 5611;
      TmpBalAcc@1100530001 : TEMPORARY Record 270;
      GLEntry@1100528501 : Record 17;
    BEGIN
      //**4PS
      WITH GenJnlLine DO BEGIN
        IF ("FA Posting Type" <> "FA Posting Type"::"Acquisition Cost") OR
           ("Duplicate in Depreciation Book" <> '') OR ("Use Duplication List")
        THEN
          EXIT;
        IF "Journal Template Name" <> '' THEN BEGIN
          IF GenJnlTempl.GET("Journal Template Name") THEN
            IF GenJnlTempl.Type = GenJnlTempl.Type::Assets THEN  //* FA Fin. Journal
              EXIT;
        END;

        FADeprBook.RESET;
        FADeprBook.SETRANGE("FA No.", "Account No.");
        FADeprBook.SETFILTER("Depreciation Book Code", '<>%1', "Depreciation Book Code");
        IF FADeprBook.FINDSET THEN BEGIN
          SaveGenJnlLine := GenJnlLine;
          REPEAT
            IF NOT DeprBook.GET(FADeprBook."Depreciation Book Code") THEN
              DeprBook."G/L Integration - Acq. Cost" := FALSE;
            IF DeprBook."G/L Integration - Acq. Cost" THEN BEGIN
              VALIDATE("Depreciation Book Code", FADeprBook."Depreciation Book Code");
              "Amount (LCY)" := OrgFAAmount;
              "Gen. Posting Type" := "Gen. Posting Type"::" ";
              "Bal. Account No." := '';
              "VAT %" := 0;
              "VAT Amount" := 0;
              "VAT Amount (LCY)" := 0;
              "VAT Bus. Posting Group" := '';
              "VAT Prod. Posting Group" := '';
              FAPostGrp.GET("Posting Group");
              FAPostGrp.TESTFIELD("Bal. Acc. Acq. Extra Depr. Bks");
              IF NOT TmpBalAcc.GET(FAPostGrp."Bal. Acc. Acq. Extra Depr. Bks") THEN BEGIN
                TmpBalAcc."No." := FAPostGrp."Bal. Acc. Acq. Extra Depr. Bks";
                TmpBalAcc.Amount := "Amount (LCY)";
                TmpBalAcc.INSERT;
              END ELSE BEGIN
                TmpBalAcc.Amount += "Amount (LCY)";
                TmpBalAcc.MODIFY;
              END;
              PostFixedAsset(GenJnlLine);
            END;
          UNTIL FADeprBook.NEXT = 0;
          IF TmpBalAcc.FINDSET THEN BEGIN
            REPEAT
              "Account Type" := "Account Type"::"G/L Account";
              "Account No." := TmpBalAcc."No.";
              "Amount (LCY)" := -TmpBalAcc.Amount;
              InitGLEntry(
                GenJnlLine,GLEntry,
                "Account No.","Amount (LCY)",0,TRUE,"System-Created Entry");
              InsertGLEntry(GenJnlLine,GLEntry,TRUE);
              TmpBalAcc.DELETE;
            UNTIL TmpBalAcc.NEXT = 0;
          END;
          GenJnlLine := SaveGenJnlLine;  //* Restore
        END;
      END;
    END;

    LOCAL PROCEDURE PostRetention@1100528500(GenJnlLine@1100528508 : Record 81);
    VAR
      RetLedgEntry@1100528507 : Record 11020636;
      RetEntryBuf@1100528505 : Record 382;
      DtldRetEntryBuf@1100528504 : TEMPORARY Record 383;
      DtldRetLedgEntry@1100528503 : Record 11020637;
      VendPostingGrp@1100528502 : Record 93;
      Vend@1100528506 : Record 23;
      RetPostingAccount@1100528501 : Code[20];
      AlwaysInsertGLEntry@1100528500 : Boolean;
      Sales@10009002 : Boolean;
      Cust@10009000 : Record 18;
      CustPostingGrp@10009001 : Record 92;
    BEGIN
      //**4PS
      WITH GenJnlLine DO BEGIN
        CASE "Retention Entry Type" OF
          "Retention Entry Type"::" ":
            EXIT;
          "Retention Entry Type"::Purchase:
            BEGIN
              Vend.GET("Source No.");
              Vend.CheckBlockedVendOnJnls(Vend,"Document Type",TRUE);
              IF RetPostingAccount = '' THEN BEGIN
                Vend.TESTFIELD("Vendor Posting Group");
                VendPostingGrp.GET(Vend."Vendor Posting Group");
                VendPostingGrp.TESTFIELD("Retention Suspense Acc.");
                RetPostingAccount := VendPostingGrp."Retention Suspense Acc.";
              END;
            END;
          GenJnlLine."Retention Entry Type"::Sales:
            BEGIN
              Cust.GET("Source No.");
              Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);
              IF RetPostingAccount = '' THEN BEGIN
                Cust.TESTFIELD("Customer Posting Group");
                CustPostingGrp.GET(Cust."Customer Posting Group");
                CustPostingGrp.TESTFIELD("Retention Suspense Acc.");
                RetPostingAccount := CustPostingGrp."Retention Suspense Acc.";
              END;
              Sales := TRUE;
            END;
        END;

        "Applies-to Doc. No." := "Applies-to Ext. Doc. No.";  // "Applies-to Ext. Doc. No." is temporary field due to limitations for posting of G/L Acc in CU 11

        TESTFIELD("Account No.",RetPostingAccount);

        DtldRetLedgEntry.LOCKTABLE;
        RetLedgEntry.LOCKTABLE;

        RetLedgEntry.INIT;
        RetLedgEntry."Related No." := "Source No.";
        RetLedgEntry."Posting Date" := "Posting Date";
        RetLedgEntry."Document Date" := "Document Date";
        RetLedgEntry."Document Type" := "Retention Entry Document Type";
        RetLedgEntry."Document No." := "Document No.";
        RetLedgEntry."External Document No." := "External Document No.";
        RetLedgEntry.Description := Description;
        RetLedgEntry."Currency Code" := "Source Currency Code";
        RetLedgEntry."Posting Group" := "Posting Group";
        RetLedgEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        RetLedgEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        RetLedgEntry."Dimension Set ID" := "Dimension Set ID";
        RetLedgEntry."Sell-to/Buy-from No." := "Sell-to/Buy-from No.";
        RetLedgEntry."Salespers./Purch. Code" := "Salespers./Purch. Code";
        RetLedgEntry."Source Code" := "Source Code";
        RetLedgEntry."On Hold" := "On Hold";
        RetLedgEntry."Applies-to Doc. Type" := "Applies-to Doc. Type";
        RetLedgEntry."Applies-to Doc. No." := "Applies-to Doc. No.";
        RetLedgEntry."Due Date" := "Due Date";
        RetLedgEntry."Applies-to ID" := "Applies-to ID";
        RetLedgEntry."Journal Batch Name" := "Journal Batch Name";
        RetLedgEntry."Reason Code" := "Reason Code";
        RetLedgEntry."Entry No." := NextEntryNo;
        RetLedgEntry."Transaction No." := NextTransactionNo;
        RetLedgEntry."User ID" := USERID;
        RetLedgEntry."No. Series" := "Posting No. Series";
        IF "Job No." <> '' THEN
          RetLedgEntry."Job No." := "Job No."
        ELSE
          RetLedgEntry."Job No." := "Closed Project No.";
        RetLedgEntry."Subcontract No." := "Subcontract No.";
        RetLedgEntry."Purchase Order" := "Purchase Order";
        RetLedgEntry."Warranty Code" := "Warranty Object";

        CASE "Retention Entry Type" OF
          "Retention Entry Type"::Purchase:
            BEGIN
              RetLedgEntry."Subcontract Type" := RetLedgEntry."Subcontract Type"::Vendor;
            END;
          GenJnlLine."Retention Entry Type"::Sales:
            BEGIN
              RetLedgEntry."Subcontract Type" := RetLedgEntry."Subcontract Type"::Customer;
            END;
        END;

        DtldRetEntryBuf.DELETEALL;
        DtldRetEntryBuf.INIT;

        DtldRetEntryBuf."CV Ledger Entry No." := RetLedgEntry."Entry No.";
        DtldRetEntryBuf."Entry Type" := DtldRetEntryBuf."Entry Type"::"Initial Entry";
        DtldRetEntryBuf."Posting Date" := "Posting Date";
        DtldRetEntryBuf."Document Type" := "Retention Entry Document Type";
        DtldRetEntryBuf."Document No." := "Document No.";
        IF "Source Currency Code" <> '' THEN
          DtldRetEntryBuf.Amount := "Source Currency Amount"
        ELSE
          DtldRetEntryBuf.Amount := Amount;
        DtldRetEntryBuf."Amount (LCY)" := "Amount (LCY)";
        DtldRetEntryBuf."Additional-Currency Amount" := Amount;
        DtldRetEntryBuf."CV No." := "Source No.";

        DtldRetEntryBuf."Currency Code" := "Source Currency Code";
        DtldRetEntryBuf."User ID" := USERID;
        DtldRetEntryBuf."Initial Entry Due Date" := "Due Date";
        DtldRetEntryBuf."Initial Entry Global Dim. 1" := "Shortcut Dimension 1 Code";
        DtldRetEntryBuf."Initial Entry Global Dim. 2" := "Shortcut Dimension 2 Code";
        DtldRetEntryBuf."Initial Document Type" := "Retention Entry Document Type";
        DtldRetEntryBuf."Initial Entry Job No." := "Closed Project No.";;
        DtldRetEntryBuf."Initial Entry Subcontract No." := "Subcontract No.";
        DtldRetEntryBuf."Subcontract Type" := RetLedgEntry."Subcontract Type";

        TransferRetLedgEntry(RetEntryBuf,RetLedgEntry,TRUE);
        InsertDtldRetLedgEntry(DtldRetEntryBuf,RetEntryBuf);
        RetEntryBuf.Open := RetEntryBuf."Remaining Amount" <> 0;
        RetEntryBuf.Positive := RetEntryBuf."Remaining Amount" > 0;

        IF "Amount (LCY)" <> 0 THEN BEGIN
          IF GLSetup."Pmt. Disc. Excl. VAT" THEN
            RetEntryBuf."Original Pmt. Disc. Possible" := "Sales/Purch. (LCY)" * Amount / "Amount (LCY)"
          ELSE
            RetEntryBuf."Original Pmt. Disc. Possible" := Amount;

          RetEntryBuf."Original Pmt. Disc. Possible" :=
            ROUND(
              RetEntryBuf."Original Pmt. Disc. Possible" * "Payment Discount %" / 100,
              AmountRoundingPrecision);
          RetEntryBuf."Remaining Pmt. Disc. Possible" := RetEntryBuf."Original Pmt. Disc. Possible";
        END;

        IF "Source Currency Code" <> '' THEN BEGIN
          TESTFIELD("Currency Factor");
          RetEntryBuf."Adjusted Currency Factor" := "Currency Factor";
          RetEntryBuf."Adjusted Exchange Rate From" := "Exchange Rate From";
        END ELSE BEGIN
          RetEntryBuf."Adjusted Currency Factor" := 1;
          RetEntryBuf."Adjusted Exchange Rate From" := 0;
        END;
        RetEntryBuf."Original Currency Factor" := RetEntryBuf."Adjusted Currency Factor";
        RetEntryBuf."Original Exchange Rate From" := RetEntryBuf."Adjusted Exchange Rate From";

        ApplyRetLedgEntry(
          RetEntryBuf,DtldRetEntryBuf,GenJnlLine,GLSetup."Appln. Rounding Precision",Vend,Cust,Sales);

        // Post Retention entry
        TransferRetLedgEntry(RetEntryBuf,RetLedgEntry,FALSE);

        RetLedgEntry.INSERT(TRUE);

        AlwaysInsertGLEntry :=
          RetLedgEntry."Document Type" IN [RetLedgEntry."Document Type"::Invoice,RetLedgEntry."Document Type"::"Credit Memo"];

        PostDtldRetLedgEntries(
          GenJnlLine,DtldRetEntryBuf,NextTransactionNo,AlwaysInsertGLEntry);

        CLEAR("Applies-to Doc. No.");
      END;
    END;

    PROCEDURE TransferRetLedgEntry@1100528501(VAR RetEntryBuf@1100528502 : Record 382;VAR RetLedgEntry@1100528501 : Record 11020636;RetToCV@1100528500 : Boolean);
    BEGIN
      //**4PS
      IF RetToCV THEN BEGIN
        RetEntryBuf."Entry No." := RetLedgEntry."Entry No.";
        RetEntryBuf."CV No." := RetLedgEntry."Related No.";
        RetEntryBuf."Posting Date" := RetLedgEntry."Posting Date";
        RetEntryBuf."Document Type" := RetLedgEntry."Document Type";
        RetEntryBuf."Document No." := RetLedgEntry."Document No.";
        RetEntryBuf.Description := RetLedgEntry.Description;
        RetEntryBuf."Currency Code" := RetLedgEntry."Currency Code";
        RetEntryBuf."Original Currency Factor" := RetLedgEntry."Original Currency Factor";
        RetEntryBuf."Adjusted Currency Factor" := RetLedgEntry."Adjusted Currency Factor";
        RetEntryBuf."Original Exchange Rate From" := RetLedgEntry."Original Exchange Rate From";
        RetEntryBuf."Adjusted Exchange Rate From" := RetLedgEntry."Adjusted Exchange Rate From";
        RetEntryBuf.Amount := RetLedgEntry.Amount;
        RetEntryBuf."Remaining Amount" := RetLedgEntry."Remaining Amount";
        RetEntryBuf."Original Amount" := RetLedgEntry."Original Amount";
        RetEntryBuf."Original Amt. (LCY)" := RetLedgEntry."Original Amt. (LCY)";
        RetEntryBuf."Remaining Amt. (LCY)" := RetLedgEntry."Remaining Amt. (LCY)";
        RetEntryBuf."Amount (LCY)" := RetLedgEntry."Amount (LCY)";
        RetEntryBuf."Bill-to/Pay-to CV No." := RetLedgEntry."Related No.";
        RetEntryBuf."CV Posting Group" := RetLedgEntry."Posting Group";
        RetEntryBuf."Global Dimension 1 Code" := RetLedgEntry."Global Dimension 1 Code";
        RetEntryBuf."Global Dimension 2 Code" := RetLedgEntry."Global Dimension 2 Code";
        RetEntryBuf."Dimension Set ID" := RetLedgEntry."Dimension Set ID";
        RetEntryBuf."Salesperson Code" := RetLedgEntry."Salespers./Purch. Code";
        RetEntryBuf."User ID" := RetLedgEntry."User ID";
        RetEntryBuf."Source Code" := RetLedgEntry."Source Code";
        RetEntryBuf."On Hold" := RetLedgEntry."On Hold";
        RetEntryBuf."Applies-to Doc. Type" := RetLedgEntry."Applies-to Doc. Type";
        RetEntryBuf."Applies-to Doc. No." := RetLedgEntry."Applies-to Doc. No.";
        RetEntryBuf.Open := RetLedgEntry.Open;
        RetEntryBuf."Due Date" := RetLedgEntry."Due Date" ;
        RetEntryBuf.Positive := RetLedgEntry.Positive;
        RetEntryBuf."Closed by Entry No." := RetLedgEntry."Closed by Entry No.";
        RetEntryBuf."Closed at Date" := RetLedgEntry."Closed at Date";
        RetEntryBuf."Closed by Amount" := RetLedgEntry."Closed by Amount";
        RetEntryBuf."Applies-to ID" := RetLedgEntry."Applies-to ID";
        RetEntryBuf."Journal Batch Name" := RetLedgEntry."Journal Batch Name";
        RetEntryBuf."Reason Code" := RetLedgEntry."Reason Code";
        RetEntryBuf."Transaction No." := RetLedgEntry."Transaction No.";
        RetEntryBuf."Closed by Amount (LCY)" := RetLedgEntry."Closed by Amount (LCY)";
        RetEntryBuf."Debit Amount" := RetLedgEntry."Debit Amount";
        RetEntryBuf."Credit Amount" := RetLedgEntry."Credit Amount";
        RetEntryBuf."Debit Amount (LCY)" := RetLedgEntry."Debit Amount (LCY)";
        RetEntryBuf."Credit Amount (LCY)" := RetLedgEntry."Credit Amount (LCY)";
        RetEntryBuf."Document Date" := RetLedgEntry."Document Date";
        RetEntryBuf."External Document No." := RetLedgEntry."External Document No.";
        RetEntryBuf."No. Series" := RetLedgEntry."No. Series";
        RetEntryBuf."Project No." := RetLedgEntry."Job No.";
        RetEntryBuf."Subcontract No." := RetLedgEntry."Subcontract No.";
        RetEntryBuf."Subcontract Type" := RetLedgEntry."Subcontract Type";
      END ELSE BEGIN
        RetLedgEntry."Entry No." := RetEntryBuf."Entry No.";
        RetLedgEntry."Related No." := RetEntryBuf."CV No.";
        RetLedgEntry."Posting Date" := RetEntryBuf."Posting Date";
        RetLedgEntry."Document Type" := RetEntryBuf."Document Type";
        RetLedgEntry."Document No." := RetEntryBuf."Document No.";
        RetLedgEntry.Description := RetEntryBuf.Description;
        RetLedgEntry."Currency Code" := RetEntryBuf."Currency Code";
        RetLedgEntry."Original Currency Factor" := RetEntryBuf."Original Currency Factor";
        RetLedgEntry."Adjusted Currency Factor" := RetEntryBuf."Adjusted Currency Factor";
        RetLedgEntry."Original Exchange Rate From" := RetEntryBuf."Original Exchange Rate From";
        RetLedgEntry."Adjusted Exchange Rate From" := RetEntryBuf."Adjusted Exchange Rate From";
        RetLedgEntry.Amount := RetEntryBuf.Amount;
        RetLedgEntry."Remaining Amount" := RetEntryBuf."Remaining Amount";
        RetLedgEntry."Original Amount" := RetEntryBuf."Original Amount";
        RetLedgEntry."Original Amt. (LCY)" := RetEntryBuf."Original Amt. (LCY)";
        RetLedgEntry."Remaining Amt. (LCY)" := RetEntryBuf."Remaining Amt. (LCY)";
        RetLedgEntry."Amount (LCY)" := RetEntryBuf."Amount (LCY)";
        RetLedgEntry."Related No." := RetEntryBuf."Bill-to/Pay-to CV No."; //overkill
        RetLedgEntry."Posting Group" := RetEntryBuf."CV Posting Group";
        RetLedgEntry."Global Dimension 1 Code" := RetEntryBuf."Global Dimension 1 Code";
        RetLedgEntry."Global Dimension 2 Code" := RetEntryBuf."Global Dimension 2 Code";
        RetLedgEntry."Dimension Set ID" := RetEntryBuf."Dimension Set ID";
        RetLedgEntry."Salespers./Purch. Code" := RetEntryBuf."Salesperson Code";
        RetLedgEntry."User ID" := RetEntryBuf."User ID";
        RetLedgEntry."Source Code" := RetEntryBuf."Source Code";
        RetLedgEntry."On Hold" := RetEntryBuf."On Hold";
        RetLedgEntry."Applies-to Doc. Type" := RetEntryBuf."Applies-to Doc. Type";
        RetLedgEntry."Applies-to Doc. No." := RetEntryBuf."Applies-to Doc. No.";
        RetLedgEntry.Open := RetEntryBuf.Open;
        RetLedgEntry."Due Date" := RetEntryBuf."Due Date" ;
        RetLedgEntry.Positive := RetEntryBuf.Positive;
        RetLedgEntry."Closed by Entry No." := RetEntryBuf."Closed by Entry No.";
        RetLedgEntry."Closed at Date" := RetEntryBuf."Closed at Date";
        RetLedgEntry."Closed by Amount" := RetEntryBuf."Closed by Amount";
        RetLedgEntry."Applies-to ID" := RetEntryBuf."Applies-to ID";
        RetLedgEntry."Journal Batch Name" := RetEntryBuf."Journal Batch Name";
        RetLedgEntry."Reason Code" := RetEntryBuf."Reason Code";
        RetLedgEntry."Transaction No." := RetEntryBuf."Transaction No.";
        RetLedgEntry."Closed by Amount (LCY)" := RetEntryBuf."Closed by Amount (LCY)";
        RetLedgEntry."Debit Amount" := RetEntryBuf."Debit Amount";
        RetLedgEntry."Credit Amount" := RetEntryBuf."Credit Amount";
        RetLedgEntry."Debit Amount (LCY)" := RetEntryBuf."Debit Amount (LCY)";
        RetLedgEntry."Credit Amount (LCY)" := RetEntryBuf."Credit Amount (LCY)";
        RetLedgEntry."Document Date" := RetEntryBuf."Document Date";
        RetLedgEntry."External Document No." := RetEntryBuf."External Document No.";
        RetLedgEntry."No. Series" := RetEntryBuf."No. Series";
        RetLedgEntry."Job No." := RetEntryBuf."Project No.";
        RetLedgEntry."Subcontract No." := RetEntryBuf."Subcontract No.";
        RetLedgEntry."Subcontract Type" := RetEntryBuf."Subcontract Type";
      END;
    END;

    LOCAL PROCEDURE InsertDtldRetLedgEntry@1100528502(VAR DtldRetEntryBuf@1100528503 : Record 383;VAR RetEntryBuf@1100528502 : Record 382);
    VAR
      NewDtldRetEntryBuf@1100528501 : Record 383;
      NextDtldBufferEntryNo@1100528500 : Integer;
    BEGIN
      //**4PS
      IF (DtldRetEntryBuf.Amount = 0) AND
         (DtldRetEntryBuf."Amount (LCY)" = 0) AND
         (DtldRetEntryBuf."Additional-Currency Amount" = 0)
      THEN
        EXIT;

      DtldRetEntryBuf.TESTFIELD("Entry Type" );

      NewDtldRetEntryBuf.INIT;
      NewDtldRetEntryBuf := DtldRetEntryBuf;

      IF NextDtldBufferEntryNo = 0 THEN BEGIN
        DtldRetEntryBuf.RESET;
        IF DtldRetEntryBuf.FIND('+') THEN
          NextDtldBufferEntryNo := DtldRetEntryBuf."Entry No." + 1
        ELSE
          NextDtldBufferEntryNo := 1;
      END;

      DtldRetEntryBuf.RESET;
      DtldRetEntryBuf.SETRANGE("CV Ledger Entry No.",RetEntryBuf."Entry No.");
      DtldRetEntryBuf.SETRANGE("Entry Type",NewDtldRetEntryBuf."Entry Type");
      DtldRetEntryBuf.SETRANGE("Posting Date",NewDtldRetEntryBuf."Posting Date");
      DtldRetEntryBuf.SETRANGE("Document Type",NewDtldRetEntryBuf."Document Type");
      DtldRetEntryBuf.SETRANGE("Document No.",NewDtldRetEntryBuf."Document No.");
      DtldRetEntryBuf.SETRANGE("CV No.",NewDtldRetEntryBuf."CV No.");
      DtldRetEntryBuf.SETRANGE("Gen. Posting Type",NewDtldRetEntryBuf."Gen. Posting Type");
      DtldRetEntryBuf.SETRANGE(
        "Gen. Bus. Posting Group",NewDtldRetEntryBuf."Gen. Bus. Posting Group");
      DtldRetEntryBuf.SETRANGE(
        "Gen. Prod. Posting Group",NewDtldRetEntryBuf."Gen. Prod. Posting Group");
      DtldRetEntryBuf.SETRANGE(
        "VAT Bus. Posting Group",NewDtldRetEntryBuf."VAT Bus. Posting Group");
      DtldRetEntryBuf.SETRANGE(
        "VAT Prod. Posting Group",NewDtldRetEntryBuf."VAT Prod. Posting Group");
      DtldRetEntryBuf.SETRANGE("Tax Area Code",NewDtldRetEntryBuf."Tax Area Code");
      DtldRetEntryBuf.SETRANGE("Tax Liable",NewDtldRetEntryBuf."Tax Liable");
      DtldRetEntryBuf.SETRANGE("Tax Group Code",NewDtldRetEntryBuf."Tax Group Code");
      DtldRetEntryBuf.SETRANGE("Use Tax",NewDtldRetEntryBuf."Use Tax");

      IF DtldRetEntryBuf.FIND('-') THEN BEGIN
        DtldRetEntryBuf.Amount := DtldRetEntryBuf.Amount + NewDtldRetEntryBuf.Amount;
        DtldRetEntryBuf."Amount (LCY)" :=
          DtldRetEntryBuf."Amount (LCY)" + NewDtldRetEntryBuf."Amount (LCY)";
        DtldRetEntryBuf."VAT Amount (LCY)" :=
          DtldRetEntryBuf."VAT Amount (LCY)" + NewDtldRetEntryBuf."VAT Amount (LCY)";
        DtldRetEntryBuf."Additional-Currency Amount" :=
          DtldRetEntryBuf."Additional-Currency Amount" +
          NewDtldRetEntryBuf."Additional-Currency Amount";
        DtldRetEntryBuf.MODIFY;
      END ELSE BEGIN
        NewDtldRetEntryBuf."Entry No." := NextDtldBufferEntryNo;
        NextDtldBufferEntryNo := NextDtldBufferEntryNo + 1;
        DtldRetEntryBuf := NewDtldRetEntryBuf;
        DtldRetEntryBuf.INSERT;
      END;

      RetEntryBuf."Amount to Apply" := NewDtldRetEntryBuf.Amount + RetEntryBuf."Amount to Apply";
      RetEntryBuf."Remaining Amount" := NewDtldRetEntryBuf.Amount + RetEntryBuf."Remaining Amount";
      RetEntryBuf."Remaining Amt. (LCY)" :=
        NewDtldRetEntryBuf."Amount (LCY)" + RetEntryBuf."Remaining Amt. (LCY)";
      IF DtldRetEntryBuf."Entry Type" = DtldRetEntryBuf."Entry Type"::"Initial Entry"
      THEN BEGIN
        RetEntryBuf."Original Amount" := NewDtldRetEntryBuf.Amount;
        RetEntryBuf."Original Amt. (LCY)" := NewDtldRetEntryBuf."Amount (LCY)";
      END;

      DtldRetEntryBuf.RESET;
    END;

    LOCAL PROCEDURE ApplyRetLedgEntry@1100528509(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1001 : Record 383;GenJnlLine@1002 : Record 81;ApplnRoundingPrecision@1004 : Decimal;Vend@1100528500 : Record 23;Cust@10009000 : Record 18;Sales@10009001 : Boolean);
    VAR
      OldRetLedgEntry@1005 : Record 11020636;
      OldCVLedgEntryBuf@1006 : Record 382;
      OldCVLedgEntryBuf2@1007 : Record 382;
      NewCVLedgEntryBuf2@1019 : Record 382;
      OldCVLedgEntryBuf3@1018 : Record 382;
      TempOldRetLedgEntry@1003 : TEMPORARY Record 11020636;
      PurchSetup@1100528505 : Record 312;
      SalesSetup@10009002 : Record 311;
      GenJnlApply@1100528504 : Codeunit 225;
      Completed@1009 : Boolean;
      AppliedAmount@1010 : Decimal;
      AppliedAmountLCY@1011 : Decimal;
      OldAppliedAmount@1012 : Decimal;
      TempAmount@1013 : Decimal;
      NewRemainingAmtBeforeAppln@1014 : Decimal;
      OldRemainingAmtBeforeAppln@1016 : Decimal;
      ApplyingDate@1017 : Date;
      PmtTolAmtToBeApplied@1020 : Decimal;
      AllApplied@1100528501 : Boolean;
      ApplnCurrency@1100528502 : Record 4;
      PmtDiscFound@1100528400 : Boolean;
    BEGIN
      //**4PS
      IF NewCVLedgEntryBuf."Amount to Apply" = 0 THEN
        EXIT;

      IF (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') THEN
        EXIT;

      IF Sales THEN
        SalesSetup.GET
      ELSE
        PurchSetup.GET;

      AllApplied := TRUE;

      PmtTolAmtToBeApplied := 0;
      NewRemainingAmtBeforeAppln := NewCVLedgEntryBuf."Remaining Amount";
      NewCVLedgEntryBuf2 := NewCVLedgEntryBuf;

      IF NewCVLedgEntryBuf."Currency Code" <> '' THEN BEGIN
        // Management of application of already posted entries
        IF NewCVLedgEntryBuf."Currency Code" <> ApplnCurrency.Code THEN
          ApplnCurrency.GET(NewCVLedgEntryBuf."Currency Code");
        ApplnRoundingPrecision := ApplnCurrency."Appln. Rounding Precision";
      END ELSE
        ApplnRoundingPrecision := GLSetup."Appln. Rounding Precision";
      ApplyingDate := GenJnlLine."Posting Date";

      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        // Find the entry to be applied to
        OldRetLedgEntry.RESET;
        OldRetLedgEntry.SETCURRENTKEY("Document No.");
        OldRetLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        OldRetLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldRetLedgEntry.SETRANGE("Related No.",NewCVLedgEntryBuf."CV No.");
        OldRetLedgEntry.SETRANGE(Open,TRUE);
        OldRetLedgEntry.SETRANGE("On Hold",'');

        OldRetLedgEntry.FINDFIRST;
        OldRetLedgEntry.TESTFIELD(Positive,NOT NewCVLedgEntryBuf.Positive);

        IF NewCVLedgEntryBuf."Subcontract No." <> '' THEN // 33734.n
          OldRetLedgEntry.TESTFIELD("Job No.",NewCVLedgEntryBuf."Project No.");
        OldRetLedgEntry.TESTFIELD("Subcontract No.",NewCVLedgEntryBuf."Subcontract No.");

        IF OldRetLedgEntry."Posting Date" > ApplyingDate THEN
          ApplyingDate := OldRetLedgEntry."Posting Date";

        OldRetLedgEntry.CALCFIELDS("Remaining Amount");

        IF NewCVLedgEntryBuf."Currency Code" <> OldRetLedgEntry."Currency Code" THEN
          OldRetLedgEntry."Remaining Amount" :=
            CurrExchRate.ExchangeAmount(
              OldRetLedgEntry."Remaining Amount",OldRetLedgEntry."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date",FALSE);

        OldRemainingAmtBeforeAppln := OldRetLedgEntry."Remaining Amount";

        GenJnlApply.CheckAgainstApplnCurrency(
          NewCVLedgEntryBuf."Currency Code",
          OldRetLedgEntry."Currency Code",
          GenJnlLine."Account Type"::Vendor,
          TRUE);
        TempOldRetLedgEntry := OldRetLedgEntry;
        TempOldRetLedgEntry.INSERT;
      END ELSE BEGIN
        // Find the first old entry (Invoice) which the new entry (Payment) should apply to
        OldRetLedgEntry.RESET;
        OldRetLedgEntry.SETCURRENTKEY("Related No.","Applies-to ID");
        TempOldRetLedgEntry.SETCURRENTKEY("Related No.","Applies-to ID");
        OldRetLedgEntry.SETRANGE("Related No.",NewCVLedgEntryBuf."CV No.");

        OldRetLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        OldRetLedgEntry.SETRANGE(Open,TRUE);
        OldRetLedgEntry.SETFILTER("Entry No.",'<>%1',NewCVLedgEntryBuf."Entry No.");
        //Check and Move Ledger Entries to Temp
        IF (NOT Sales AND (PurchSetup."Appln. between Currencies" = PurchSetup."Appln. between Currencies"::None)) OR
           (Sales AND (SalesSetup."Appln. between Currencies" = SalesSetup."Appln. between Currencies"::None)) THEN
          OldRetLedgEntry.SETRANGE("Currency Code",NewCVLedgEntryBuf."Currency Code");
        IF OldRetLedgEntry.FINDSET(FALSE,FALSE) THEN
          REPEAT
            IF NewCVLedgEntryBuf."Subcontract No." <> '' THEN BEGIN // 33734.n
              OldRetLedgEntry.TESTFIELD("Job No.",NewCVLedgEntryBuf."Project No.");
              OldRetLedgEntry.TESTFIELD("Subcontract No.",NewCVLedgEntryBuf."Subcontract No.");
            END;

            IF GenJnlApply.CheckAgainstApplnCurrency(
                 NewCVLedgEntryBuf."Currency Code",
                 OldRetLedgEntry."Currency Code",
                 GenJnlLine."Account Type"::Vendor,
                 FALSE)
            THEN BEGIN
              IF (OldRetLedgEntry."Posting Date" > ApplyingDate) AND (OldRetLedgEntry."Applies-to ID" <> '') THEN
                ApplyingDate := OldRetLedgEntry."Posting Date";
              TempOldRetLedgEntry := OldRetLedgEntry;
              TempOldRetLedgEntry.INSERT;
            END;
          UNTIL OldRetLedgEntry.NEXT=0;

        OldRemainingAmtBeforeAppln := 0;

        IF TempOldRetLedgEntry.FINDSET THEN
          REPEAT
            TempOldRetLedgEntry.CALCFIELDS("Remaining Amount");

            IF NewCVLedgEntryBuf."Currency Code" <> TempOldRetLedgEntry."Currency Code" THEN
              TempOldRetLedgEntry."Remaining Amount" :=
                CurrExchRate.ExchangeAmount(
                  TempOldRetLedgEntry."Remaining Amount",TempOldRetLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date",FALSE);

            OldRemainingAmtBeforeAppln := OldRemainingAmtBeforeAppln + TempOldRetLedgEntry."Remaining Amount";
          UNTIL TempOldRetLedgEntry.NEXT = 0;

        TempOldRetLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" > 0);

        IF TempOldRetLedgEntry.FIND('-') THEN BEGIN
          TempAmount := NewCVLedgEntryBuf."Remaining Amount";
          TempOldRetLedgEntry.SETRANGE(Positive);
          TempOldRetLedgEntry.FIND('-');
          REPEAT
            TempOldRetLedgEntry.CALCFIELDS("Remaining Amount");

            IF NewCVLedgEntryBuf."Currency Code" <> TempOldRetLedgEntry."Currency Code" THEN BEGIN
              TempOldRetLedgEntry."Remaining Amount" :=
                CurrExchRate.ExchangeAmount(
                  TempOldRetLedgEntry."Remaining Amount",TempOldRetLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date",FALSE);
            END;

            TempAmount := TempAmount + TempOldRetLedgEntry."Remaining Amount";

          UNTIL TempOldRetLedgEntry.NEXT = 0;
          TempOldRetLedgEntry.SETRANGE(Positive,TempAmount < 0);
        END ELSE
          TempOldRetLedgEntry.SETRANGE(Positive);

        IF NOT TempOldRetLedgEntry.FIND('-') THEN
          EXIT;
      END;
      GenJnlLine."Posting Date" := ApplyingDate;
      // Apply the new entry (Payment) to the old entries (Invoices) one at a time
      REPEAT
        TempOldRetLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");

        TransferRetLedgEntry(OldCVLedgEntryBuf,TempOldRetLedgEntry,TRUE);
        TempOldRetLedgEntry.COPYFILTER(Positive,OldCVLedgEntryBuf.Positive);

        OldRemainingAmtBeforeAppln := OldCVLedgEntryBuf."Remaining Amount";
        OldCVLedgEntryBuf3 := OldCVLedgEntryBuf;

        // Management of posting in multiple currencies
        OldCVLedgEntryBuf2 := OldCVLedgEntryBuf;
        OldCVLedgEntryBuf.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
        IF NewCVLedgEntryBuf."Currency Code" <> OldCVLedgEntryBuf2."Currency Code" THEN BEGIN
          OldCVLedgEntryBuf2."Remaining Amount" :=
            CurrExchRate.ExchangeAmount(
              OldCVLedgEntryBuf2."Remaining Amount",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date",FALSE);
          OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" :=
            CurrExchRate.ExchangeAmount(
              OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date",FALSE);
          OldCVLedgEntryBuf2."Accepted Payment Tolerance" :=
            CurrExchRate.ExchangeAmount(
              OldCVLedgEntryBuf2."Accepted Payment Tolerance",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date",FALSE);
          OldCVLedgEntryBuf2."Amount to Apply" :=
            CurrExchRate.ExchangeAmount(
              OldCVLedgEntryBuf2."Amount to Apply",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date",FALSE);
        END;

        CalcPmtTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          PmtTolAmtToBeApplied,NextTransactionNo,FirstNewVATEntryNo);

        CalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          //PmtTolAmtToBeApplied,ApplnRoundingPrecision,NextTransactionNo,FirstNewVATEntryNo); //**4PS.o
          PmtTolAmtToBeApplied,ApplnRoundingPrecision,NextTransactionNo,FirstNewVATEntryNo,PmtDiscFound); //**4PS.n

        IF NOT PmtDiscFound THEN //**4PS.n
          CalcPmtDiscTolerance(
            NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
            NextTransactionNo,FirstNewVATEntryNo);

        CalcCurrencyApplnRounding(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,
          GenJnlLine,ApplnRoundingPrecision);

        FindAmtForAppln(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,
          AppliedAmount,AppliedAmountLCY,OldAppliedAmount,ApplnRoundingPrecision,
          TRUE);

        CalcCurrencyUnrealizedGainLoss(
          OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,OldRemainingAmtBeforeAppln);

        CalcCurrencyRealizedGainLoss(
          NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,AppliedAmount,AppliedAmountLCY);

        CalcCurrencyRealizedGainLoss(
          OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,-AppliedAmountLCY);

        CalcApplication(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,
          GenJnlLine,AppliedAmount,AppliedAmountLCY,OldAppliedAmount,
          NewCVLedgEntryBuf2,OldCVLedgEntryBuf3,AllApplied);

        PaymentToleranceMgt.CalcRemainingPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,GLSetup);

        CalcAmtLCYAdjustment(OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

        // Update the Old Entry
        TransferRetLedgEntry(OldCVLedgEntryBuf,TempOldRetLedgEntry,FALSE);

        OldRetLedgEntry := TempOldRetLedgEntry;
        OldRetLedgEntry."Applies-to ID" := '';
        CLEAR(OldRetLedgEntry."Applied Document Type");
        CLEAR(OldRetLedgEntry."Applied Document No.");
        CLEAR(OldRetLedgEntry."Applied Line No.");
        CLEAR(OldRetLedgEntry.Comment);
        CLEAR(OldRetLedgEntry.Selected);
        OldRetLedgEntry.MODIFY;

        TempOldRetLedgEntry.DELETE;

        // Find the next old entry to apply to the new entry
        IF GenJnlLine."Applies-to Doc. No." <> '' THEN
          Completed := TRUE
        ELSE
          IF TempOldRetLedgEntry.GETFILTER(TempOldRetLedgEntry.Positive) <> '' THEN BEGIN
            IF TempOldRetLedgEntry.NEXT = 1 THEN
              Completed := FALSE
            ELSE BEGIN
              TempOldRetLedgEntry.SETRANGE(Positive);
              TempOldRetLedgEntry.FIND('-');
              TempOldRetLedgEntry.CALCFIELDS("Remaining Amount");
              Completed := TempOldRetLedgEntry."Remaining Amount" * NewCVLedgEntryBuf."Remaining Amount" >= 0;
            END
          END ELSE BEGIN
            IF NewCVLedgEntryBuf.Open THEN BEGIN
              Completed := TempOldRetLedgEntry.NEXT = 0;
            END ELSE
              Completed := TRUE;
          END;
      UNTIL Completed;

      DtldCVLedgEntryBuf.SETCURRENTKEY("CV Ledger Entry No.","Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("CV Ledger Entry No.",NewCVLedgEntryBuf."Entry No.");
      DtldCVLedgEntryBuf.SETRANGE("Entry Type",DtldCVLedgEntryBuf."Entry Type"::Application);
      DtldCVLedgEntryBuf.CALCSUMS("Amount (LCY)", Amount);

      CalcCurrencyUnrealizedGainLoss(
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,DtldCVLedgEntryBuf.Amount,NewRemainingAmtBeforeAppln);

      CalcAmtLCYAdjustment(NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

      NewCVLedgEntryBuf."Applies-to ID" := '';
      NewCVLedgEntryBuf."Amount to Apply" := 0;
    END;

    PROCEDURE PostDtldRetLedgEntries@1100528503(GenJnlLine@1100528503 : Record 81;VAR DtldRetEntryBuf@1100528502 : Record 383;NextTransactionNo@1100528501 : Integer;RetLedgEntryInserted@1100528500 : Boolean);
    VAR
      DtldRetLedgEntry@1100528516 : Record 11020637;
      Currency@1100528515 : Record 4;
      TotalAmountLCY@1100528511 : Decimal;
      TotalAmountAddCurr@1100528510 : Decimal;
      DtldRetLedgEntryNoOffset@1100528508 : Integer;
    BEGIN
      //**4PS
      TotalAmountLCY := 0;
      TotalAmountAddCurr := 0;

      IF (GenJnlLine."Retention Entry Type" <> GenJnlLine."Retention Entry Type"::" ") THEN BEGIN
        IF DtldRetLedgEntry.FIND('+') THEN
          DtldRetLedgEntryNoOffset := DtldRetLedgEntry."Entry No."
        ELSE
          DtldRetLedgEntryNoOffset := 0;

        DtldRetEntryBuf.RESET;
        IF DtldRetEntryBuf.FIND('-') THEN BEGIN
          REPEAT
            CLEAR(DtldRetLedgEntry);
            DtldRetLedgEntry.TRANSFERFIELDS(DtldRetEntryBuf);
            DtldRetLedgEntry."Entry No." :=
              DtldRetLedgEntryNoOffset + DtldRetEntryBuf."Entry No.";
            DtldRetLedgEntry."Journal Batch Name" := GenJnlLine."Journal Batch Name";
            DtldRetLedgEntry."Reason Code" := GenJnlLine."Reason Code";
            DtldRetLedgEntry."Source Code" := GenJnlLine."Source Code";
            DtldRetLedgEntry."Transaction No." := NextTransactionNo;
            DtldRetLedgEntry."Initial Entry Job No." := DtldRetEntryBuf."Initial Entry Job No.";
            DtldRetLedgEntry."Initial Entry Subcontract No." := DtldRetEntryBuf."Initial Entry Subcontract No.";

            RetUpdateDebitCredit(GenJnlLine.Correction,DtldRetLedgEntry);
            DtldRetLedgEntry.INSERT(TRUE);

            TotalAmountLCY := TotalAmountLCY + DtldRetEntryBuf."Amount (LCY)";
            TotalAmountAddCurr :=
              TotalAmountAddCurr + DtldRetEntryBuf."Additional-Currency Amount";

            // Post automatic entries.
            IF (DtldRetEntryBuf."Amount (LCY)" <> 0) OR
               ((AddCurrencyCode <> '') AND
                (DtldRetEntryBuf."Additional-Currency Amount" <> 0))
            THEN
              CASE DtldRetEntryBuf."Entry Type" OF
                DtldRetEntryBuf."Entry Type"::"Initial Entry":
                  BEGIN
                    IF DtldRetLedgEntry."Document Type" IN
                      [DtldRetLedgEntry."Document Type"::" ",DtldRetLedgEntry."Document Type"::Closure]
                    THEN BEGIN
                      TotalAmountLCY := TotalAmountLCY - DtldRetEntryBuf."Amount (LCY)";
                      TotalAmountAddCurr :=
                        TotalAmountAddCurr - DtldRetEntryBuf."Additional-Currency Amount";
                    END;
                  END;

                DtldRetEntryBuf."Entry Type"::Application:;

                DtldRetEntryBuf."Entry Type"::"Unrealized Loss":
                  BEGIN
                    IF Currency.Code <> DtldRetEntryBuf."Currency Code" THEN BEGIN
                      IF DtldRetEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldRetEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Unrealized Losses Acc.");
                    CreateGLEntry(
                      GenJnlLine,Currency."Unrealized Losses Acc.",-DtldRetEntryBuf."Amount (LCY)",0,DtldRetEntryBuf."Currency Code" = AddCurrencyCode);
                  END;
                DtldRetEntryBuf."Entry Type"::"Unrealized Gain":
                  BEGIN
                    IF Currency.Code <> DtldRetEntryBuf."Currency Code" THEN BEGIN
                      IF DtldRetEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldRetEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Unrealized Gains Acc.");
                    CreateGLEntry(
                      GenJnlLine,Currency."Unrealized Gains Acc.",-DtldRetEntryBuf."Amount (LCY)",0,DtldRetEntryBuf."Currency Code" = AddCurrencyCode);
                  END;
                DtldRetEntryBuf."Entry Type"::"Realized Loss":
                  BEGIN
                    IF Currency.Code <> DtldRetEntryBuf."Currency Code" THEN BEGIN
                      IF DtldRetEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldRetEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Realized Losses Acc.");
                    CreateGLEntry(
                      GenJnlLine,Currency."Realized Losses Acc.",-DtldRetEntryBuf."Amount (LCY)",0,DtldRetEntryBuf."Currency Code" = AddCurrencyCode);
                  END;
                DtldRetEntryBuf."Entry Type"::"Realized Gain":
                  BEGIN
                    IF Currency.Code <> DtldRetEntryBuf."Currency Code" THEN BEGIN
                      IF DtldRetEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldRetEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Realized Gains Acc.");
                    CreateGLEntry(
                      GenJnlLine,Currency."Realized Gains Acc.",-DtldRetEntryBuf."Amount (LCY)",0,DtldRetEntryBuf."Currency Code" = AddCurrencyCode);
                  END;
                ELSE
                  DtldRetEntryBuf.FIELDERROR("Entry Type");
              END;

          UNTIL DtldRetEntryBuf.NEXT = 0;
        END;

        DtldRetEntryBuf.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE RetUpdateDebitCredit@1000000001(Correction@1100528501 : Boolean;VAR DtldRetLedgEntry@1100528500 : Record 11020637);
    BEGIN
      //**4PS
      WITH DtldRetLedgEntry DO BEGIN
        IF ((Amount > 0) OR ("Amount (LCY)" > 0)) AND NOT Correction OR
           ((Amount < 0) OR ("Amount (LCY)" < 0)) AND Correction
        THEN BEGIN
          "Debit Amount" := Amount;
          "Credit Amount" := 0;
          "Debit Amount (LCY)" := "Amount (LCY)";
          "Credit Amount (LCY)" := 0;
        END ELSE BEGIN
          "Debit Amount" := 0;
          "Credit Amount" := -Amount;
          "Debit Amount (LCY)" := 0;
          "Credit Amount (LCY)" := -"Amount (LCY)";
        END;
      END;
    END;

    PROCEDURE SetCustLegEntryProjectNo@1100525000(ProjectNo@1100525000 : Code[20]);
    BEGIN
      //**4PS  C-019159
      CustLedgEntryProjectNo := ProjectNo;
    END;

    LOCAL PROCEDURE HandleVATCreditRestriction@1210190000(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR DtldCVLedgEntryBuf@1003 : Record 383;GenJnlLine2@1004 : Record 81);
    VAR
      VATEntry@1100485001 : Record 254;
      TempVATEntry@1100485008 : TEMPORARY Record 254;
      ReverseVATEntry@1100485009 : Record 254;
      TotUnrVATOld@1210190001 : Decimal;
      TotUnrVATNew@1210190002 : Decimal;
    BEGIN
      //**4PS.n

      TotUnrVATNew := 0;
      VATEntry.RESET;
      VATEntry.SETCURRENTKEY("Transaction No.");
      VATEntry.SETRANGE("Transaction No.",NewCVLedgEntryBuf."Transaction No.");
      VATEntry.SETRANGE("Reversed Entry No.", 0);
      VATEntry.SETFILTER("Unrealized Amount", '<>%1' ,0);
      IF VATEntry.FIND('-') THEN
        REPEAT
          TotUnrVATNew += VATEntry."Unrealized Amount";  //This will be a positive value
        UNTIL VATEntry.NEXT = 0;

      IF TotUnrVATNew = 0 THEN
        EXIT;

      TotUnrVATOld := 0;
      VATEntry.RESET;
      VATEntry.SETCURRENTKEY("Transaction No.");
      VATEntry.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
      VATEntry.SETRANGE("Reversed by Entry No.", 0);
      VATEntry.SETFILTER("Unrealized Amount", '<>%1' ,0);
      IF VATEntry.FIND('-') THEN
        REPEAT
          TempVATEntry := VATEntry;
          TempVATEntry.INSERT;
          TotUnrVATOld += VATEntry."Unrealized Amount";  //This will be a nagative value
        UNTIL VATEntry.NEXT = 0;

      IF TotUnrVATNew + TotUnrVATOld > 0 THEN
        ERROR(Text11012002, NewCVLedgEntryBuf."Document No.", OldCVLedgEntryBuf."Document No.");

      VATEntry.RESET;
      VATEntry.SETCURRENTKEY("Transaction No.");

      IF TempVATEntry.FIND('-') THEN
        REPEAT

          VATEntry.SETRANGE("Transaction No.",NewCVLedgEntryBuf."Transaction No.");
          VATEntry.SETRANGE("Reversed Entry No.", 0);
          VATEntry.SETRANGE("Unrealized Amount", (-1 * TempVATEntry."Unrealized Amount"));
          VATEntry.SETRANGE("Unrealized Base", (-1 * TempVATEntry."Unrealized Base"));
          VATEntry.SETRANGE("Gen. Bus. Posting Group", TempVATEntry."Gen. Bus. Posting Group");
          VATEntry.SETRANGE("Gen. Prod. Posting Group", TempVATEntry."Gen. Prod. Posting Group");
          IF VATEntry.FIND('-') THEN
            REPEAT

              VATEntry."Reversed Entry No." := TempVATEntry."Entry No.";
              VATEntry.Reversed := TRUE;
              VATEntry.MODIFY;     //new VAT Entry Credit Memo
              TotUnrVATNew -= VATEntry."Unrealized Amount";

              ReverseVATEntry.GET(TempVATEntry."Entry No.");
              ReverseVATEntry."Reversed by Entry No." := VATEntry."Entry No.";
              ReverseVATEntry.Reversed := TRUE; //old VAT Invoice
              ReverseVATEntry.MODIFY;

             UNTIL VATEntry.NEXT = 0;

        UNTIL TempVATEntry.NEXT = 0;

      IF TotUnrVATNew > 0 THEN
        ERROR(Text11012002, NewCVLedgEntryBuf."Document No.", OldCVLedgEntryBuf."Document No.");
    END;

    LOCAL PROCEDURE ReverseVAT@1100525003(VAR VATEntry@1000 : Record 254;GenJnlLine@1100525000 : Record 81);
    VAR
      NewVATEntry@1001 : Record 254;
      ReversedVATEntry@1002 : Record 254;
    BEGIN
      //**4PS Restored 'old' 2013 function to reverse credit restrictions
      IF VATEntry.FINDSET THEN
        REPEAT
          IF VATEntry."Reversed by Entry No." <> 0 THEN
            ERROR(Text11012003);
          WITH NewVATEntry DO BEGIN
            NewVATEntry := VATEntry;
            Base := -Base;
            Amount := -Amount;
            "Unrealized Amount" := -"Unrealized Amount";
            "Unrealized Base" := -"Unrealized Base";
            "Remaining Unrealized Amount" := -"Remaining Unrealized Amount";
            "Remaining Unrealized Base" := -"Remaining Unrealized Base";
            "Additional-Currency Amount" := -"Additional-Currency Amount";
            "Additional-Currency Base" := -"Additional-Currency Base";
            "Add.-Currency Unrealized Amt." := -"Add.-Currency Unrealized Amt.";
            "Add.-Curr. Rem. Unreal. Amount" := -"Add.-Curr. Rem. Unreal. Amount";
            "Add.-Curr. Rem. Unreal. Base" := -"Add.-Curr. Rem. Unreal. Base";
            "VAT Difference" := -"VAT Difference";
            "Add.-Curr. VAT Difference" := -"Add.-Curr. VAT Difference";
            "Transaction No." := NextTransactionNo;
            "Source Code" := GenJnlLine."Source Code";
            "User ID" := USERID;
            "Entry No." := NextVATEntryNo;
            "Reversed Entry No." := VATEntry."Entry No.";
            Reversed := TRUE;
            // Reversal of Reversal
            IF VATEntry."Reversed Entry No." <> 0 THEN BEGIN
              ReversedVATEntry.GET(VATEntry."Reversed Entry No.");
              ReversedVATEntry."Reversed by Entry No." := 0;
              ReversedVATEntry.Reversed := FALSE;
              ReversedVATEntry.MODIFY;
              VATEntry."Reversed Entry No." := "Entry No.";
              "Reversed by Entry No." := VATEntry."Entry No.";
            END;
            VATEntry."Reversed by Entry No." := "Entry No.";
            VATEntry.Reversed := TRUE;
            VATEntry.MODIFY;
            INSERT;
            NextVATEntryNo := NextVATEntryNo + 1;
          END;
        UNTIL VATEntry.NEXT = 0;
    END;

    PROCEDURE ReSetOverDimErr@1100525001();
    BEGIN
      //**4PS DP00387
      OverrideDimErr := FALSE;
    END;

    PROCEDURE SetReverseMode@1100528504(NewReverseMode@1100528500 : Boolean);
    BEGIN
      //**4PS NAV2013 R2
      ReverseMode := NewReverseMode;
    END;

    LOCAL PROCEDURE FindApplnEntriesDtldtLedgEntry@1100528505(CustLedgEntry@1100528500 : Record 21;Amount@1100528502 : Decimal) ApplicationEntryNo : Integer;
    VAR
      DtldCustLedgEntry1@1001 : Record 379;
      DtldCustLedgEntry2@1000 : Record 379;
      AppliedCustLedgEntry@1100528501 : Record 21;
    BEGIN
      //**4PS DP00613
      DtldCustLedgEntry1.SETCURRENTKEY("Cust. Ledger Entry No.");
      DtldCustLedgEntry1.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
      DtldCustLedgEntry1.SETRANGE(Unapplied,FALSE);
      IF DtldCustLedgEntry1.FINDSET THEN
        REPEAT
          IF DtldCustLedgEntry1."Cust. Ledger Entry No." =
             DtldCustLedgEntry1."Applied Cust. Ledger Entry No."
          THEN BEGIN
            DtldCustLedgEntry2.INIT;
            DtldCustLedgEntry2.SETCURRENTKEY("Applied Cust. Ledger Entry No.","Entry Type");
            DtldCustLedgEntry2.SETRANGE(
              "Applied Cust. Ledger Entry No.",DtldCustLedgEntry1."Applied Cust. Ledger Entry No.");
            DtldCustLedgEntry2.SETRANGE("Entry Type",DtldCustLedgEntry2."Entry Type"::Application);
            DtldCustLedgEntry2.SETRANGE(Unapplied,FALSE);
            DtldCustLedgEntry2.SETRANGE("Credit Amount",Amount);
            DtldCustLedgEntry2.SETRANGE("Document Type",DtldCustLedgEntry2."Document Type"::Payment);
            IF DtldCustLedgEntry2.FINDSET THEN
              REPEAT
                IF DtldCustLedgEntry2."Cust. Ledger Entry No." <>
                   DtldCustLedgEntry2."Applied Cust. Ledger Entry No."
                THEN
                  IF AppliedCustLedgEntry.GET(DtldCustLedgEntry2."Cust. Ledger Entry No.") THEN
                    ApplicationEntryNo := DtldCustLedgEntry2."Entry No.";
              UNTIL DtldCustLedgEntry2.NEXT = 0;
          END ELSE
            IF AppliedCustLedgEntry.GET(DtldCustLedgEntry1."Applied Cust. Ledger Entry No.") THEN
              ApplicationEntryNo := DtldCustLedgEntry1."Entry No.";
        UNTIL DtldCustLedgEntry1.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateICClearingRelation@1100529602(GenJnlLine@1100529604 : Record 81;VAR GLEntry@1100529600 : Record 17);
    VAR
      ICClearingRelation@1100529601 : Record 11229426;
    BEGIN
      //**4PS
      IF NOT GenJnlLine."IC Application" THEN
        EXIT;

      ICClearingRelation.SETRANGE("Journal Template Name", GenJnlLine."Journal Template Name");
      ICClearingRelation.SETRANGE("Journal Batch Name", GenJnlLine."Journal Batch Name");
      ICClearingRelation.SETRANGE("Journal Line No.", GenJnlLine."Line No.");
      IF ICClearingRelation.ISEMPTY THEN
        EXIT;

      GLEntry."IC Application Entry No." := GLEntry."Entry No.";

      ICClearingRelation.FINDSET;
      REPEAT
        ICClearingRelation."Entry No." := GLEntry."Entry No.";
        ICClearingRelation."External Document No." := GLEntry."Document No.";
        ICClearingRelation."To Post" := TRUE;
        ICClearingRelation.MODIFY;
      UNTIL ICClearingRelation.NEXT = 0;
    END;

    LOCAL PROCEDURE HandleGLEntryICApplication@1100529601();
    VAR
      GLEntryLoc@1100529602 : Record 17;
      ICClearingRelation@1100529600 : Record 11229426;
    BEGIN
      //**4PS
      ICClearingRelation.RESET;
      ICClearingRelation.SETFILTER("Entry No.", '<>0');
      ICClearingRelation.SETRANGE("To Post", TRUE);
      IF ICClearingRelation.ISEMPTY THEN
        EXIT;

      ICClearingRelation.FINDSET;
      REPEAT
        IF GLEntryLoc.GET(ICClearingRelation."Source Entry No.") THEN BEGIN
          GLEntryLoc."IC Application Entry No." := ICClearingRelation."Entry No.";
          GLEntryLoc.MODIFY;
          UpdateSourceEntry(ICClearingRelation);
        END;
      UNTIL ICClearingRelation.NEXT = 0;

      ICClearingRelation.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateSourceEntry@1100529603(ICClearingRelation@1100529600 : Record 11229426);
    VAR
      GLEntryLoc@1100529602 : Record 17;
      ICCustLedgerEntry@1100529601 : Record 21;
      ICVendorLedgerEntry@1100529604 : Record 25;
    BEGIN
      //**4PS
      IF ICClearingRelation."IC Application Entry No." = 0 THEN
        EXIT;
      GLEntryLoc.CHANGECOMPANY(ICClearingRelation."Receiving Company");
      IF NOT GLEntryLoc.GET(ICClearingRelation."IC Application Entry No.") THEN
        EXIT;
      IF GLEntryLoc."External Document No." = ICClearingRelation."External Document No." THEN
        EXIT;

      GLEntryLoc.SETRANGE("Document No.", GLEntryLoc."Document No.");
      GLEntryLoc.SETRANGE("Posting Date", GLEntryLoc."Posting Date");
      GLEntryLoc.SETRANGE("Transaction No.", GLEntryLoc."Transaction No.");
      IF GLEntryLoc.FINDSET THEN
        GLEntryLoc.MODIFYALL("External Document No.", ICClearingRelation."External Document No.");

      IF ICClearingRelation."Cust. Ledger Entry No." <> 0 THEN BEGIN
        ICCustLedgerEntry.CHANGECOMPANY(ICClearingRelation."Receiving Company");
        IF ICCustLedgerEntry.GET(ICClearingRelation."Cust. Ledger Entry No.") THEN BEGIN
          ICCustLedgerEntry."External Document No." := ICClearingRelation."External Document No.";
          ICCustLedgerEntry.MODIFY;
        END;
      END;

      IF ICClearingRelation."Vendor Ledger Entry No." <> 0 THEN BEGIN
        ICVendorLedgerEntry.CHANGECOMPANY(ICClearingRelation."Receiving Company");
        IF ICVendorLedgerEntry.GET(ICClearingRelation."Vendor Ledger Entry No.") THEN BEGIN
          ICVendorLedgerEntry."External Document No." := ICClearingRelation."External Document No.";
          ICVendorLedgerEntry.MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE GetRetentionAmountToPost@1100529501(GenJnlLine@1100529500 : Record 81) AmountToPost : Decimal;
    VAR
      RetentionLedgerEntry@1100529501 : Record 11020636;
    BEGIN
      //**4PS
      AmountToPost := GenJnlLine."Amount (LCY)";
      IF GenJnlLine."Applies-to Retention ID" = 0 THEN
        EXIT;
      IF NOT RetentionLedgerEntry.GET(GenJnlLine."Applies-to Retention ID") THEN
        EXIT;

      RetentionLedgerEntry.CALCFIELDS("Remaining Amount", "Remaining Amt. (LCY)");
      IF RetentionLedgerEntry."Remaining Amount" = 0 THEN
        EXIT;
      IF GenJnlLine."Source Currency Amount" = -RetentionLedgerEntry."Remaining Amount" THEN
        AmountToPost := - RetentionLedgerEntry."Remaining Amt. (LCY)"
      ELSE
        IF GenJnlLine."Source Currency Amount" * RetentionLedgerEntry."Remaining Amount" < 0 THEN
          AmountToPost := ROUND(GenJnlLine."Source Currency Amount" * RetentionLedgerEntry."Remaining Amt. (LCY)" / RetentionLedgerEntry."Remaining Amount", GLSetup."Amount Rounding Precision");
    END;

    PROCEDURE SetSkipCheckSalesInvoiceNo@1100529600(NewSkipCheckSalesInvoiceNo@1100529600 : Boolean);
    BEGIN
      //**4PS
      SkipCheckSalesInvoiceNo := NewSkipCheckSalesInvoiceNo;
    END;

    LOCAL PROCEDURE PostAccGroup@1070001(GenJournalLine@1070000 : Record 81);
    BEGIN
      //NAVSE
      IF (GenJournalLine."Auto. Acc. Group" <> '') AND (GenJournalLine."Deferral Code" = '') THEN
        PostAutoAcc(GenJournalLine);
    END;

    LOCAL PROCEDURE PostAutoAccGroupFromDeferralLine@1070000(GenJournalLine@1070000 : Record 81;PostAmount@1070002 : Decimal;PostingDate@1070004 : Date;PostingAccountNo@1070003 : Code[20]);
    VAR
      TempGenJournalLine@1070001 : TEMPORARY Record 81;
    BEGIN
      //NAVSE
      WITH TempGenJournalLine DO
        IF GenJournalLine."Auto. Acc. Group" <> '' THEN BEGIN
          INIT;
          COPY(GenJournalLine);
          VALIDATE("Deferral Code",'');
          VALIDATE("Posting Date",PostingDate);
          VALIDATE("Amount (LCY)",PostAmount);
          VALIDATE("VAT Base Amount",PostAmount);
          IF PostingAccountNo <> '' THEN
            "Account No." := PostingAccountNo;
          PostAccGroup(TempGenJournalLine);
        END;
    END;

    PROCEDURE ReplacePostingDatePeriodic@1100285100(lv_replace@1100285100 : Boolean);
    BEGIN
      //RFC135
      gReplacePostingDatePeriodic := lv_replace;
    END;

    BEGIN
    {
      4PS, 20-08-10, call 12877, Read permissions added for Entry tables.

      *** 4PSSE.I012 ***
      130711 Added code under PostCust for ROT Amount handeling
      141020 ITERO.DL error posting PostAutoAcc, updated from NAVSE7.10
      141021 ITERO.DL error posting vendor-payments

      --- ExFlow--->
      Code        : CheckPurchExtDocNo()
      Globals

      161214 ITERO.WG uppgrade to ExFlow 4.11
      <-- ExFlow ---

      141117 ITERO.DL handle if Exflow is not in license
      160923 ITERO.DL RFC135 Supplier invoices with accrual entries in a closed period should be booked in open period
      160929 ITERO.DL RFC148 handle Payment Reference for more countries and added OCR
      170602 ITERO.DL RFC188 added functions for RUT
    }
    END.
  }
}

