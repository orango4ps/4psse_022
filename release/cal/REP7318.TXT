OBJECT Report 7318 Whse.-Shipment - Create Pick
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Warenausgang - Kommiss. erst.;
               ENU=Whse.-Shipment - Create Pick;
               NLD=Mag.-verzending - Pick maken;
               NOR=Lagerlevering - opprett plukk];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  CLEAR(CreatePick);
                  EverythingHandled := TRUE;
                END;

    OnPostReport=VAR
                   WhseActivHeader@1000 : Record 5766;
                   TempWhseItemTrkgLine@1001 : TEMPORARY Record 6550;
                   ItemTrackingMgt@1002 : Codeunit 6500;
                   IsHandled@1003 : Boolean;
                 BEGIN
                   CreatePick.CreateWhseDocument(FirstActivityNo,LastActivityNo,TRUE);

                   CreatePick.ReturnTempItemTrkgLines(TempWhseItemTrkgLine);
                   ItemTrackingMgt.UpdateWhseItemTrkgLines(TempWhseItemTrkgLine);

                   WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::Pick);
                   WhseActivHeader.SETRANGE("No.",FirstActivityNo,LastActivityNo);
                   OnBeforeSortWhseActivHeaders(WhseActivHeader,FirstActivityNo,LastActivityNo,HideNothingToHandleErr);
                   IF WhseActivHeader.FIND('-') THEN BEGIN
                     REPEAT
                       IF SortActivity > 0 THEN
                         WhseActivHeader.SortWhseDoc;
                     UNTIL WhseActivHeader.NEXT = 0;

                     IF PrintDoc THEN BEGIN
                       IsHandled := FALSE;
                       OnBeforePrintPickingList(WhseActivHeader,IsHandled);
                       IF NOT IsHandled THEN
                         REPORT.RUN(REPORT::"Picking List",FALSE,FALSE,WhseActivHeader);
                     END;
                   END ELSE
                     IF NOT HideNothingToHandleErr THEN
                       ERROR(NothingToHandleErr);

                   OnAfterPostReport(FirstActivityNo,LastActivityNo);
                 END;

  }
  DATASET
  {
    { 6896;    ;DataItem;                    ;
               DataItemTable=Table7321;
               DataItemTableView=SORTING(No.,Line No.);
               OnPreDataItem=BEGIN
                               CreatePick.SetValues(
                                 AssignedID,1,SortActivity,1,0,0,FALSE,DoNotFillQtytoHandle,BreakbulkFilter,FALSE);

                               COPYFILTERS(WhseShptLine);
                               SETFILTER("Qty. (Base)",'>0');
                             END;

               OnAfterGetRecord=VAR
                                  QtyToPick@1002 : Decimal;
                                  QtyToPickBase@1001 : Decimal;
                                BEGIN
                                  IF Location."Directed Put-away and Pick" THEN
                                    CheckBin(0,0);

                                  WhseWkshLine.RESET;
                                  WhseWkshLine.SETCURRENTKEY(
                                    "Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
                                  WhseWkshLine.SETRANGE(
                                    "Whse. Document Type",WhseWkshLine."Whse. Document Type"::Shipment);
                                  WhseWkshLine.SETRANGE("Whse. Document No.",WhseShptHeader."No.");

                                  WhseWkshLine.SETRANGE("Whse. Document Line No.","Line No.");
                                  IF NOT WhseWkshLine.FINDFIRST THEN BEGIN
                                    TESTFIELD("Qty. per Unit of Measure");
                                    CALCFIELDS("Pick Qty. (Base)","Pick Qty.");
                                    QtyToPickBase := "Qty. (Base)" - ("Qty. Picked (Base)" + "Pick Qty. (Base)");
                                    QtyToPick := Quantity - ("Qty. Picked" + "Pick Qty.");
                                    OnAfterCalculateQuantityToPick("Warehouse Shipment Line",QtyToPick,QtyToPickBase);
                                    IF QtyToPick > 0 THEN BEGIN
                                      IF "Destination Type" = "Destination Type"::Customer THEN BEGIN
                                        TESTFIELD("Destination No.");
                                        Cust.GET("Destination No.");
                                        Cust.CheckBlockedCustOnDocs(Cust,"Source Document",FALSE,FALSE);
                                      END;

                                      CreatePick.SetWhseShipment(
                                        "Warehouse Shipment Line",1,WhseShptHeader."Shipping Agent Code",
                                        WhseShptHeader."Shipping Agent Service Code",WhseShptHeader."Shipment Method Code");
                                      IF NOT "Assemble to Order" THEN BEGIN
                                        CreatePick.SetTempWhseItemTrkgLine(
                                          "No.",DATABASE::"Warehouse Shipment Line",
                                          '',0,"Line No.","Location Code");
                                        CreatePick.CreateTempLine(
                                          "Location Code","Item No.","Variant Code","Unit of Measure Code",
                                          '',"Bin Code","Qty. per Unit of Measure",QtyToPick,QtyToPickBase);
                                      END;
                                    END;
                                  END ELSE
                                    WhseWkshLineFound := TRUE;
                                END;

               OnPostDataItem=VAR
                                TempWhseItemTrkgLine@1000 : TEMPORARY Record 6550;
                                ItemTrackingMgt@1001 : Codeunit 6500;
                              BEGIN
                                CreatePick.ReturnTempItemTrkgLines(TempWhseItemTrkgLine);
                                IF TempWhseItemTrkgLine.FIND('-') THEN
                                  REPEAT
                                    ItemTrackingMgt.CalcWhseItemTrkgLine(TempWhseItemTrkgLine);
                                  UNTIL TempWhseItemTrkgLine.NEXT = 0;
                              END;
                               }

    { 3252;1   ;DataItem;                    ;
               DataItemTable=Table900;
               DataItemTableView=SORTING(Document Type,No.);
               OnPreDataItem=VAR
                               SalesLine@1000 : Record 37;
                             BEGIN
                               IF NOT "Warehouse Shipment Line"."Assemble to Order" THEN
                                 CurrReport.BREAK;

                               SalesLine.GET("Warehouse Shipment Line"."Source Subtype",
                                 "Warehouse Shipment Line"."Source No.",
                                 "Warehouse Shipment Line"."Source Line No.");
                               SalesLine.AsmToOrderExists("Assembly Header");
                               SETRANGE("Document Type","Document Type");
                               SETRANGE("No.","No.");
                             END;
                              }

    { 6911;2   ;DataItem;                    ;
               DataItemTable=Table901;
               DataItemTableView=SORTING(Document Type,Document No.,Line No.);
               OnPreDataItem=BEGIN
                               SETRANGE(Type,Type::Item);
                               SETFILTER("Remaining Quantity (Base)",'>0');

                               WhseWkshLine.SETCURRENTKEY(
                                 "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
                               WhseWkshLine.SETRANGE("Source Type",DATABASE::"Assembly Line");
                               WhseWkshLine.SETRANGE("Source Subtype","Assembly Header"."Document Type");
                               WhseWkshLine.SETRANGE("Source No.","Assembly Header"."No.");
                             END;

               OnAfterGetRecord=VAR
                                  WMSMgt@1001 : Codeunit 7302;
                                BEGIN
                                  WMSMgt.CheckInboundBlockedBin("Location Code","Bin Code","No.","Variant Code","Unit of Measure Code");

                                  WhseWkshLine.SETRANGE("Source Line No.","Line No.");
                                  IF NOT WhseWkshLine.FINDFIRST THEN
                                    CreatePick.CreateAssemblyPickLine("Assembly Line")
                                  ELSE
                                    WhseWkshLineFound := TRUE;
                                END;

               DataItemLink=Document Type=FIELD(Document Type),
                            Document No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   IF Location."Use ADCS" THEN
                     DoNotFillQtytoHandle := TRUE;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1   ;2   ;Field     ;
                  CaptionML=[DEU=Zugewiesene Benutzer-ID;
                             ENU=Assigned User ID;
                             NLD=Toegewezen gebruikers-id;
                             NOR=Tilordnet bruker-ID;
                             SVE=Tilldelat anvÑndar-ID];
                  ToolTipML=[DEU=Gibt die ID des zugewiesenen Benutzers fÅr die Kommissionieranweisung an.;
                             ENU=Specifies the ID of the assigned user to perform the pick instruction.;
                             NLD=Hiermee wordt de id opgegeven van de toegewezen gebruiker die de pickinstructie moet uitvoeren.;
                             NOR=Angir ID-en for den tilordnede brukeren som skal utfõre plukkinstruksjonen.];
                  ApplicationArea=#Warehouse;
                  SourceExpr=AssignedID;
                  TableRelation="Warehouse Employee";
                  OnValidate=VAR
                               WhseEmployee@1000 : Record 7301;
                             BEGIN
                               IF AssignedID <> '' THEN
                                 WhseEmployee.GET(AssignedID,Location.Code);
                             END;

                  OnLookup=VAR
                             WhseEmployee@1001 : Record 7301;
                             LookupWhseEmployee@1000 : Page 7348;
                           BEGIN
                             WhseEmployee.SETCURRENTKEY("Location Code");
                             WhseEmployee.SETRANGE("Location Code",Location.Code);
                             LookupWhseEmployee.LOOKUPMODE(TRUE);
                             LookupWhseEmployee.SETTABLEVIEW(WhseEmployee);
                             IF LookupWhseEmployee.RUNMODAL = ACTION::LookupOK THEN BEGIN
                               LookupWhseEmployee.GETRECORD(WhseEmployee);
                               AssignedID := WhseEmployee."User ID";
                             END;
                           END;
                            }

      { 2   ;2   ;Field     ;
                  Name=SortingMethodForActivityLines;
                  CaptionML=[DEU=Sortiermethode fÅr LageraktivitÑtszeilen;
                             ENU=Sorting Method for Activity Lines;
                             NLD=Sorteringsmethode voor activiteitsregels;
                             NOR=Sorteringsmetode for aktivitetslinjer];
                  ToolTipML=[DEU=Gibt die Methode an, nach der die Zeilen in der Anweisung sortiert werden. Die Optionen sind nach Artikel, Beleg, Regal oder Lagerplatz (wenn der Lagerort LagerplÑtze verwendet, dient dies als Lagerplatzcode), FÑlligkeitsdatum, LagerplatzprioritÑt oder Aktionsart.;
                             ENU=Specifies the method by which the lines in the instruction will be sorted. The options are by item, document, shelf or bin (if the location uses bins, this functions as the bin code), due date, bin ranking, or action type.;
                             NLD=Hiermee wordt de methode opgegeven aan de hand waarvan de regels in de instructie worden gesorteerd. U kunt kiezen uit: op artikel, document, schap of opslaglocatie (als de vestiging opslaglocaties gebruikt, is dit de opslaglocatiecode), vervaldatum, opslaglocatievolgorde of actiesoort.;
                             NOR=Angir metoden som linjene i instruksen blir sortert etter. Alternativene er etter vare, dokument, hylle (hvis lokasjonen bruker hyller, fungerer dette som hyllekoden), forfallsdato, hylleprioritering eller handlingstype.];
                  OptionCaptionML=[DEU=" ,Artikel,Beleg,Regalnummer oder Lagerplatz,FÑlligkeitsdatum,Ziel,LagerplatzprioritÑt,Aktionsart";
                                   ENU=" ,Item,Document,Shelf or Bin,Due Date,Destination,Bin Ranking,Action Type";
                                   NLD=" ,Artikel,Document,Schap of opslaglocatie,Vervaldatum,Bestemming,Opslaglocatievolgorde,Actiesoort";
                                   NOR=" ,Vare,Dokument,Hylle,Forfallsdato,MÜl,Hyllerangering,Handlingstype"];
                  ApplicationArea=#Warehouse;
                  SourceExpr=SortActivity;
                  MultiLine=Yes }

      { 9   ;2   ;Field     ;
                  CaptionML=[DEU=Gebindeanbruchsfilter verw.;
                             ENU=Set Breakbulk Filter;
                             NLD=Breakbulkfilter plaatsen;
                             NOR=Angi anbrekksfilter];
                  ToolTipML=[DEU=Gibt an, ob das Programm die Gebindeanbruch-Zwischenzeilen ausblenden soll, wenn eine gesamte grî·ere Ma·einheit in eine kleinere Ma·einheit konvertiert wird und vollstÑndig kommissioniert wird.;
                             ENU=Specifies if you want the program to hide intermediate break-bulk lines when an entire larger unit of measure is converted to a smaller unit of measure and picked completely.;
                             NLD=Hiermee wordt opgegeven of de tussenliggende breakbulkregels moeten worden verborgen wanneer een grotere eenheid wordt omgezet in een kleinere eenheid en volledig wordt gepickt.;
                             NOR=Angir om du vil at programmet skal skjule de midlertidige anbrekkslinjene nÜr en stõrre mÜleenhet konverteres til en mindre mÜleenhet og plukkes ferdig.];
                  ApplicationArea=#Warehouse;
                  SourceExpr=BreakbulkFilter }

      { 11  ;2   ;Field     ;
                  CaptionML=[DEU=Bewegungsmenge nicht ausfÅllen;
                             ENU=Do Not Fill Qty. to Handle;
                             NLD=Te verwerken aantal niet opvullen;
                             NOR=Ikke fyll ut antall som skal hÜndteres];
                  ToolTipML=[DEU=Gibt an, ob das Feld "Zu bearbeitende Menge" in jeder Arbeitsblattzeile manuell ausgefÅllt werden soll.;
                             ENU=Specifies if you want to manually fill in the Quantity to Handle field on each line.;
                             NLD=Hiermee wordt opgegeven of u het veld Werk. verwerkt aantal op elke regel handmatig wilt invullen.;
                             NOR=Angir om du vil fylle ut feltet Antall som skal hÜndteres pÜ hver forslagslinje, manuelt.];
                  ApplicationArea=#Warehouse;
                  SourceExpr=DoNotFillQtytoHandle }

      { 3   ;2   ;Field     ;
                  CaptionML=[DEU=Beleg drucken;
                             ENU=Print Document;
                             NLD=Document afdrukken;
                             NOR=Skriv ut dokument];
                  ToolTipML=[DEU=Gibt an, ob der Kommissionierungsbeleg gedruckt werden soll. Andernfalls kînnen Sie ihn zu einem spÑteren Zeitpunkt aus dem Fenster "Kommissionierung" ausdrucken.;
                             ENU=Specifies if you want the pick document to be printed. Otherwise, you can print it later from the Whse. Pick window.;
                             NLD=Hiermee wordt opgegeven of het pickdocument moet worden afgedrukt. U kunt deze ook later afdrukken in het venster Magazijnpick.;
                             NOR=Angir om du vil skrive ut plukkdokumentet. Du kan ogsÜ skrive ut dokumentet senere i vinduet Lagerplukk.];
                  ApplicationArea=#Warehouse;
                  SourceExpr=PrintDoc }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Location@1027 : Record 14;
      WhseShptHeader@1007 : Record 7320;
      WhseShptLine@1012 : Record 7321;
      WhseWkshLine@1019 : Record 7326;
      Cust@1006 : Record 18;
      CreatePick@1003 : Codeunit 7312;
      FirstActivityNo@1002 : Code[20];
      LastActivityNo@1001 : Code[20];
      AssignedID@1008 : Code[50];
      SortActivity@1005 : ' ,Item,Document,Shelf or Bin,Due Date,Destination,Bin Ranking,Action Type';
      PrintDoc@1004 : Boolean;
      EverythingHandled@1017 : Boolean;
      WhseWkshLineFound@1020 : Boolean;
      HideValidationDialog@1022 : Boolean;
      HideNothingToHandleErr@1000 : Boolean;
      DoNotFillQtytoHandle@1014 : Boolean;
      BreakbulkFilter@1029 : Boolean;
      SingleActivCreatedMsg@1011 : TextConst '@@@="%1=WhseActivHeader.Type;%2=Whse. Activity No.;%3=Concatenates ExpiredItemMessageText";DEU=%1 mit der AktivitÑtsnummer %2 wurde erstellt.%3;ENU=%1 activity no. %2 has been created.%3;NLD=Activiteit van het type %1 met nummer %2 is gemaakt.%3;NOR=%1-aktivitet nr. %2 er opprettet.%3';
      SingleActivAndWhseShptCreatedMsg@1021 : TextConst '@@@="%1=WhseActivHeader.Type;%2=Whse. Activity No.;%3=WhseActivHeader.Type;%4=Concatenates ExpiredItemMessageText";DEU=%1 mit der AktivitÑtsnummer %2 wurde erstellt.\FÅr Warenausgangszeilen mit vorhandenen Kommissioniervorschlagszeilen wurden keine Zeilen der Art %3 erstellt.%4;ENU=%1 activity no. %2 has been created.\For Warehouse Shipment lines that have existing Pick Worksheet lines, no %3 lines have been created.%4;NLD=Activiteit van het type %1 met nummer %2 is gemaakt.\Voor magazijnverzendingsregels met bestaande pickvoorstelregels zijn geen regels van het type %3 gemaakt.%4;NOR=%1-aktivitet nr. %2 er opprettet.\For lagerleveringslinjer med eksisterende plukkforslagslinjer er det ikke opprettet noen %3-linjer.%4';
      MultipleActivCreatedMsg@1010 : TextConst '@@@="%1=WhseActivHeader.Type;%2=First Whse. Activity No.;%3=Last Whse. Activity No.;%4=Concatenates ExpiredItemMessageText";DEU=Es wurden AktivitÑten der Art %1 von Nr. %2 bis %3 erstellt.%4;ENU=%1 activities no. %2 to %3 have been created.%4;NLD=Activiteiten van het type %1 met nummers %2 tot %3 zijn gemaakt.%4;NOR=%1-aktivitetene %2 til %3 er opprettet.%4';
      MultipleActivAndWhseShptCreatedMsg@1024 : TextConst '@@@="%1=WhseActivHeader.Type;%2=First Whse. Activity No.;%3=Last Whse. Activity No.;%4=WhseActivHeader.Type;%5=Concatenates ExpiredItemMessageText";DEU=%1 mit den AktivitÑtsnummern %2 bis %3 wurde erstellt.\FÅr Warenausgangszeilen mit vorhandenen Kommissioniervorschlagszeilen wurden keine Zeilen der Art %4 erstellt.%5;ENU=%1 activities no. %2 to %3 have been created.\For Warehouse Shipment lines that have existing Pick Worksheet lines, no %4 lines have been created.%5;NLD=Activiteiten van het type %1 met nummers %2 tot %3 zijn gemaakt.\Voor magazijnverzendingsregels met bestaande pickvoorstelregels zijn geen regels van het type %4 gemaakt.%5;NOR=%1-aktivitet nr. %2 til %3 er opprettet.\For lagerleveringslinjer med eksisterende plukkforslagslinjer er det ikke opprettet noen %4-linjer.%5';
      NothingToHandleErr@1023 : TextConst 'DEU=Es gibt nichts zu bewegen.;ENU=There is nothing to handle.;NLD=Niets te verwerken.;NOR=Det finnes ingenting Ü hÜndtere.;SVE=Det finns inget att hantera.';

    [External]
    PROCEDURE SetWhseShipmentLine@1(VAR WhseShptLine2@1000 : Record 7321;WhseShptHeader2@1001 : Record 7320);
    BEGIN
      WhseShptLine.COPY(WhseShptLine2);
      WhseShptHeader := WhseShptHeader2;
      AssignedID := WhseShptHeader2."Assigned User ID";
      GetLocation(WhseShptLine."Location Code");
    END;

    [External]
    PROCEDURE GetResultMessage@3() : Boolean;
    VAR
      WhseActivHeader@1000 : Record 5766;
      CannotBeHandledReason@1001 : Text;
    BEGIN
      CannotBeHandledReason := CreatePick.GetCannotBeHandledReason;
      IF FirstActivityNo = '' THEN
        EXIT(FALSE);

      IF NOT HideValidationDialog THEN BEGIN
        WhseActivHeader.Type := WhseActivHeader.Type::Pick;
        IF WhseWkshLineFound THEN BEGIN
          IF FirstActivityNo = LastActivityNo THEN
            MESSAGE(
              STRSUBSTNO(
                SingleActivAndWhseShptCreatedMsg,FORMAT(WhseActivHeader.Type),FirstActivityNo,
                FORMAT(WhseActivHeader.Type),CannotBeHandledReason))
          ELSE
            MESSAGE(
              STRSUBSTNO(
                MultipleActivAndWhseShptCreatedMsg,FORMAT(WhseActivHeader.Type),FirstActivityNo,LastActivityNo,
                FORMAT(WhseActivHeader.Type),CannotBeHandledReason));
        END ELSE BEGIN
          IF FirstActivityNo = LastActivityNo THEN
            MESSAGE(
              STRSUBSTNO(SingleActivCreatedMsg,FORMAT(WhseActivHeader.Type),FirstActivityNo,CannotBeHandledReason))
          ELSE
            MESSAGE(
              STRSUBSTNO(MultipleActivCreatedMsg,FORMAT(WhseActivHeader.Type),
                FirstActivityNo,LastActivityNo,CannotBeHandledReason));
        END;
      END;
      EXIT(EverythingHandled);
    END;

    [External]
    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [External]
    PROCEDURE SetHideNothingToHandleError@8(HideNothingToHandleError@1000 : Boolean);
    BEGIN
      HideNothingToHandleErr := HideNothingToHandleError;
    END;

    LOCAL PROCEDURE GetLocation@7(LocationCode@1000 : Code[10]);
    BEGIN
      IF Location.Code <> LocationCode THEN BEGIN
        IF LocationCode = '' THEN
          CLEAR(Location)
        ELSE
          Location.GET(LocationCode);
      END;
    END;

    [External]
    PROCEDURE Initialize@9(AssignedID2@1004 : Code[50];SortActivity2@1002 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';PrintDoc2@1001 : Boolean;DoNotFillQtytoHandle2@1000 : Boolean;BreakbulkFilter2@1003 : Boolean);
    BEGIN
      AssignedID := AssignedID2;
      SortActivity := SortActivity2;
      PrintDoc := PrintDoc2;
      DoNotFillQtytoHandle := DoNotFillQtytoHandle2;
      BreakbulkFilter := BreakbulkFilter2;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalculateQuantityToPick@4(VAR WarehouseShipmentLine@1000 : Record 7321;VAR QtyToPick@1001 : Decimal;VAR QtyToPickBase@1002 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostReport@5(VAR FirstActivityNo@1000 : Code[20];VAR LastActivityNo@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePrintPickingList@2(VAR WarehouseActivityHeader@1000 : Record 5766;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSortWhseActivHeaders@6(VAR WhseActivHeader@1003 : Record 5766;FirstActivityNo@1001 : Code[20];LastActivityNo@1000 : Code[20];VAR HideNothingToHandleError@1002 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

