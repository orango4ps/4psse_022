OBJECT Report 11126184 Export Ref. Payment -  LUM
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVFI7.10 (32000004);
  }
  PROPERTIES
  {
    CaptionML=ENU=Export Ref. Payment -  LUM;
    ProcessingOnly=Yes;
    OnPostReport=BEGIN
                   IF CreatedLines THEN BEGIN
                     TransferFile.CLOSE;
                     RBMgt.DownloadToFile(FromFile,RefFileSetup."Export Foreign Payments");
                     RefPmtExport.RESET;
                     RefPmtExport.SETRANGE("Foreign Payment",TRUE);
                     RefPmtExport.MODIFYALL(Transferred,TRUE);
                     RefPmtExport.MODIFYALL("Applied Payments",FALSE);
                     RefPmtExport.MODIFY;
                     MESSAGE(Text1090004,RefFileSetup."Export Foreign Payments");
                   END ELSE
                     MESSAGE(Text1090006);
                 END;

    UseRequestPage=No;
  }
  DATASET
  {
    { 4558;    ;DataItem;                    ;
               DataItemTable=Table270;
               OnPreDataItem=BEGIN
                               CompanyInfo.GET;
                               CompanyInfo.TESTFIELD("Business Identity Code");
                               TransferFile.TEXTMODE := TRUE;
                               FromFile := RBMgt.ServerTempFileName('txt');
                             END;

               OnAfterGetRecord=VAR
                                  InputDlg@1090000 : Page 11126187;
                                  Type@1090001 : ',Boolean,Integer,Decimal,Text,Date,Time';
                                BEGIN
                                  RefPmtExport.SETCURRENTKEY("Payment Date","Vendor No.","Entry No.");
                                  RefPmtExport.SETFILTER("Payment Account","Bank Account"."No.");
                                  RefPmtExport.SETRANGE("Foreign Payment",TRUE);
                                  RefPmtExport.SETRANGE(Transferred,FALSE);
                                  RefPmtExport.SETRANGE("Document Type",1);
                                  RefPmtExport.SETRANGE("Applied Payments",FALSE);

                                  IF RefPmtExport.FINDSET THEN BEGIN
                                    CreatedLines := TRUE;
                                    RefFileSetup.SETFILTER("No.","Bank Account"."No.");
                                    IF RefFileSetup.FINDFIRST THEN
                                      RefFileSetup.TESTFIELD("Export Foreign Payments")
                                    ELSE
                                      ERROR(Text1090003,"Bank Account"."No.");

                                    RefPmtExport.TESTFIELD("Vendor No.");
                                    RefPmtExport.TESTFIELD("Payment Account");
                                    RefPmtExport.TESTFIELD("Payment Date");
                                    RefPmtExport.TESTFIELD("Vendor Account");
                                    RefPmtExport.TESTFIELD("Invoice Message");
                                    TransferFile.CREATE(FromFile);
                                    ExchangeRateNo := RefFileSetup."Exchange Rate Contract No.";
                                    DueDateType := RefFileSetup."Due Date Handling";
                                    IF DueDateType = 0 THEN BEGIN
                                      InputDlg.SetCaption(Text1090000);
                                      InputDlg.InitString(FORMAT(RefPmtExport."Payment Date"),Type::Date);
                                      IF InputDlg.RUNMODAL = ACTION::OK THEN
                                        BatchDate := InputDlg.GetDate;
                                    END;
                                    Window.OPEN(
                                      '#1###################################\\' +
                                      Text1090001 +
                                      Text1090002);
                                    ChargingAccCurrency := "Bank Account"."Currency Code";
                                    FeedbackCurrency := '1';
                                    IF ChargingAccCurrency = '' THEN
                                      ChargingAccCurrency := 'EUR';

                                    FileID := 'LUM2';
                                    RecID := '0';
                                    EventType := '0';
                                    CustomerID := CompanyInfo."Business Identity Code";
                                    LinePos := STRPOS(CustomerID,'-');
                                    IF LinePos > 0 THEN
                                      CustomerID := COPYSTR(CustomerID,1,LinePos - 1) + COPYSTR(CustomerID,LinePos + 1);
                                    CustomerIDExtra := '     ';

                                    BankAccFormat.ConvertBankAcc("Bank Account"."Bank Account No.","Bank Account"."No.");
                                    ChargingAcc := "Bank Account"."Bank Account No.";

                                    CreationTime := FORMAT(TODAY,0,'<year,2><Month,2><day,2>');
                                    CreationTime := CreationTime + FORMAT(TIME,0,'<hour,2><minute,2>');
                                    Spear1 := TextSpaceFormat(' ',250,1,' ');
                                    Spear2 := TextSpaceFormat(' ',250,1,' ');
                                    Spear3 := TextSpaceFormat(' ',42,1,' ');
                                    CustomerID := TextSpaceFormat(CustomerID,11,0,'0');
                                    BatchPaymentDate := TextSpaceFormat(BatchPaymentDate,8,1,' ');

                                    HederConter := HederConter + 1;
                                    IF BatchDate = 0D THEN
                                      BatchDate := RefPmtExport."Payment Date";
                                    Window.UPDATE(1,STRSUBSTNO('%1 %2',"Bank Account"."No.","Bank Account".Name));
                                    BatchPaymentDate := FORMAT(BatchDate,0,'<year4><month,2><day,2>');

                                    Window.UPDATE(3,HederConter);
                                    Window.UPDATE(4,0);
                                    PaymentsQty := '00000';

                                    TransferFile.WRITE(FileID + RecID + EventType + ' ' + CustomerID + CustomerIDExtra + '  0' +
                                      CreationTime + '00000000000000' + BatchPaymentDate +
                                      Spear1 + Spear2 + Spear3);

                                    CreatePaymentRecord;

                                    FileID := 'LUM2';
                                    RecID := '9';
                                    EventType := '0';
                                    Spear1 := TextSpaceFormat(' ',250,1,' ');
                                    Spear2 := TextSpaceFormat(' ',250,1,' ');
                                    Spear3 := TextSpaceFormat(' ',49,1,' ');

                                    PaymentsAmountSum := TextSpaceFormat(FORMAT(PaymentsAmountDec * 100,0,2),15,0,'0');

                                    TransferFile.WRITE(FileID + RecID + EventType + ' ' + CustomerID + CustomerIDExtra +
                                      '   ' + PaymentsQty + '00000' + PaymentsAmountSum + Spear1 + Spear2 + Spear3);

                                    PaymentsAmountDec := 0;
                                    PaymentsQty := '0';
                                    RowCounter := 0;
                                  END;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      CompanyInfo@1090000 : Record 79;
      Vend@1090001 : Record 23;
      VendBankAcc@1090002 : Record 288;
      Country@1090003 : Record 9;
      RefPmtExport@1090004 : Record 11126182;
      RefFileSetup@1090006 : Record 11126180;
      BankAccFormat@1090070 : Codeunit 11126182;
      RBMgt@1090007 : Codeunit 419;
      TransferFile@1090005 : File;
      Window@1090008 : Dialog;
      HederConter@1090010 : Integer;
      RowCounter@1090011 : Integer;
      LinePos@1090012 : Integer;
      Spear1@1090014 : Text[250];
      Spear2@1090015 : Text[250];
      Spear3@1090016 : Text[250];
      DueDateType@1090017 : 'Erâ€žkohtainen,Maksukohtainen';
      BatchDate@1090019 : Date;
      CreatedLines@1090069 : Boolean;
      FileID@1090022 : Code[4];
      RecID@1090023 : Code[1];
      EventType@1090024 : Code[1];
      CustomerID@1090025 : Text[11];
      CustomerIDExtra@1090026 : Text[5];
      CreationTime@1090027 : Code[10];
      BatchPaymentDate@1090028 : Text[8];
      RecieversInfo@1090030 : ARRAY [4] OF Text[35];
      CountryCode@1090031 : Code[2];
      SWIFTCode@1090032 : Text[11];
      RecieversBank@1090033 : ARRAY [4] OF Text[35];
      RecieverAcc@1090034 : Text[34];
      RecieverIBAN@1090072 : Text[34];
      PaymentSubject@1090035 : ARRAY [4] OF Text[35];
      Amount@1090036 : Text[15];
      Currency@1090037 : Code[3];
      ExchangeRateNo@1090038 : Text[14];
      PaymentType@1090039 : Code[1];
      ServiceCharge@1090040 : Code[1];
      TransPaymentDate@1090041 : Code[8];
      EquivalentValue@1090042 : Text[15];
      PaymentExchangeRate@1090043 : Text[11];
      ChargingAcc@1090044 : Code[14];
      ChargingAccCurrency@1090045 : Code[3];
      ChargedAmount@1090046 : Text[15];
      FileingCode@1090047 : Text[20];
      FeedbackCurrency@1090048 : Code[1];
      PaymentsQty@1090058 : Text[5];
      PaymentsAmountSum@1090060 : Text[15];
      PaymentsAmountDec@1090061 : Decimal;
      Text1090000@1090062 : TextConst 'ENU=Batch Payment Date';
      Text1090001@1090063 : TextConst 'ENU=Creating Batch Lines         #3######\';
      Text1090002@1090064 : TextConst 'ENU=Creating Payment Lines       #4######;SVE=Skapar betalningsrader       #4######';
      Text1090003@1090065 : TextConst 'ENU=Set Transfer File settings for Bank Account %1.';
      Text1090004@1090066 : TextConst 'ENU=Transfer File %1 created successfully.';
      Text1090006@1090073 : TextConst 'ENU=There is nothing to send.';
      FromFile@1090021 : Text[250];

    PROCEDURE CreatePaymentRecord@3();
    BEGIN
      IF RefPmtExport.FINDSET THEN
        REPEAT
          RefPmtExport.TESTFIELD("Vendor No.");
          RefPmtExport.TESTFIELD("Payment Account");
          RefPmtExport.TESTFIELD("Payment Date");
          RefPmtExport.TESTFIELD("Amount (LCY)");
          RefPmtExport.TESTFIELD("Vendor Account");
          RefPmtExport.TESTFIELD("Invoice Message");
          RefPmtExport.TESTFIELD("Foreign Payment Method");
          RefPmtExport.TESTFIELD("Foreign Banks Service Fee");

          Vend.GET(RefPmtExport."Vendor No.");
          Vend.TESTFIELD("Country/Region Code");
          VendBankAcc.GET(RefPmtExport."Vendor No.",RefPmtExport."Vendor Account");
          Country.GET(VendBankAcc."Country/Region Code");
          RecieverIBAN := DELCHR(VendBankAcc.IBAN);

          FileID := 'LUM2';
          RecID := '1';
          CountryCode := Vend."Country/Region Code";
          IF RefPmtExport."Currency Code" <> '' THEN
            Currency := RefPmtExport."Currency Code"
          ELSE
            Currency := 'EUR';

          TransPaymentDate := FORMAT(RefPmtExport."Payment Date",0,'<day,2><month,2><year4>');
          ServiceCharge := RefPmtExport."Foreign Banks Service Fee";

          IF VendBankAcc."SWIFT Code" = '' THEN
            CountryCode := VendBankAcc."Country/Region Code";
          SWIFTCode := TextSpaceFormat(VendBankAcc."SWIFT Code",11,1,' ');
          RecieversInfo[1] := TextSpaceFormat(Vend.Name,35,1,' ');
          RecieversInfo[2] := TextSpaceFormat(Vend.Address,35,1,' ');
          RecieversInfo[3] := TextSpaceFormat(Vend."Address 2",35,1,' ');
          RecieversInfo[4] := TextSpaceFormat(Vend."Post Code" + ' ' + Vend.City,35,1,' ');

          IF VendBankAcc."Clearing Code" <> '' THEN BEGIN
            IF COPYSTR(VendBankAcc."Clearing Code",1,2) <> '//' THEN
              VendBankAcc."Clearing Code" := '//' + VendBankAcc."Clearing Code";
            RecieversBank[1] := TextSpaceFormat(VendBankAcc."Clearing Code",35,1,' ');
            RecieversBank[2] := TextSpaceFormat('',35,1,' ');
            RecieversBank[3] := TextSpaceFormat('',35,1,' ');
            RecieversBank[4] := TextSpaceFormat('',35,1,' ');
          END ELSE BEGIN
            RecieversBank[1] := TextSpaceFormat(VendBankAcc.Name,35,1,' ');
            RecieversBank[2] := TextSpaceFormat(VendBankAcc.Address,35,1,' ');
            RecieversBank[3] := TextSpaceFormat(VendBankAcc."Address 2",35,1,' ');
            RecieversBank[4] := TextSpaceFormat(VendBankAcc."Post Code" + ' ' + VendBankAcc.City,35,1,' ');
          END;

          PaymentSubject[1] := TextSpaceFormat(COPYSTR(RefPmtExport."Invoice Message",1,35),35,1,' ');
          PaymentSubject[2] := TextSpaceFormat(COPYSTR(RefPmtExport."Invoice Message",36,35),35,1,' ');
          PaymentSubject[3] := TextSpaceFormat(' ',35,1,' ');
          PaymentSubject[4] := TextSpaceFormat(' ',35,1,' ');

          RecieverAcc := TextSpaceFormat(VendBankAcc."Bank Account No.",34,1,' ');
          IF RecieverIBAN <> '' THEN
            RecieverAcc := TextSpaceFormat(RecieverIBAN,34,1,' ');
          Amount := TextSpaceFormat(FORMAT(RefPmtExport.Amount * 100,0,2),15,0,'0');
          ExchangeRateNo := TextSpaceFormat(RefFileSetup."Exchange Rate Contract No.",14,1,' ');
          EquivalentValue := TextSpaceFormat('0',15,1,'0');
          PaymentExchangeRate := TextSpaceFormat('0',11,1,'0');
          ChargedAmount := TextSpaceFormat('0',15,1,'0');
          FileingCode := TextSpaceFormat(' ',20,1,' ');
          PaymentType := TextSpaceFormat(RefPmtExport."Foreign Payment Method",20,1,' ');

          PaymentsAmountDec := PaymentsAmountDec + RefPmtExport.Amount;
          RowCounter := RowCounter + 1;

          Window.UPDATE(4,RowCounter);
          TransferFile.WRITE(FileID + RecID + ' ' + RecieversInfo[1] + RecieversInfo[2] +
            RecieversInfo[3] + RecieversInfo[4] + CountryCode + SWIFTCode + RecieversBank[1] +
            RecieversBank[2] + RecieversBank[3] + RecieversBank[4] + RecieverAcc +
            PaymentSubject[1] + PaymentSubject[2] + PaymentSubject[3] + PaymentSubject[4] +
            Amount + Currency + '   ' + ExchangeRateNo + PaymentType + ServiceCharge + TransPaymentDate +
            EquivalentValue + PaymentExchangeRate + ChargingAcc + ChargingAccCurrency +
            ChargedAmount + FileingCode + FeedbackCurrency + '   ');

          IF DueDateType = 0 THEN
            RefPmtExport."Payment Date" := BatchDate;
          PaymentsQty := INCSTR(PaymentsQty);
          RefPmtExport.Transferred := TRUE;
          RefPmtExport.MODIFY;
          RefPmtExport.MarkAffiliatedAsTransferred;
        UNTIL RefPmtExport.NEXT = 0;
    END;

    LOCAL PROCEDURE TextSpaceFormat@4(Text@1000 : Text[250];Length@1001 : Integer;Align@1090001 : Integer;ExtraChr@1090002 : Text[1]) NewText@1090000 : Text[250];
    BEGIN
      IF STRLEN(Text) > Length THEN BEGIN
        NewText := COPYSTR(Text,1,Length);
        EXIT(NewText);
      END;

      IF Align = 0 THEN
        Text := PADSTR('',Length - STRLEN(Text),ExtraChr) + Text
      ELSE
        Text := Text + PADSTR('',Length - STRLEN(Text),ExtraChr);

      NewText := Text;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

