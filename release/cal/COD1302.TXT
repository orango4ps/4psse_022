OBJECT Codeunit 1302 Customer Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      FiscalYearTotals@1003 : Boolean;

    [External]
    PROCEDURE AvgDaysToPay@2(CustNo@1000 : Code[20]) : Decimal;
    VAR
      CustLedgEntry@1015 : Record 21;
      CustLedgEntry2@1014 : Record 21;
      AvgDaysToPay@1006 : Decimal;
      TotalDaysToPay@1005 : Decimal;
      TotalNoOfInv@1004 : Integer;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        AvgDaysToPay := 0;
        SETCURRENTKEY("Customer No.","Posting Date");
        SetFilterForPostedDocs(CustLedgEntry,CustNo,"Document Type"::Invoice);
        SETRANGE(Open,FALSE);

        IF FINDSET THEN
          REPEAT
            CASE TRUE OF
              "Closed at Date" > "Posting Date":
                UpdateDaysToPay("Closed at Date" - "Posting Date",TotalDaysToPay,TotalNoOfInv);
              "Closed by Entry No." <> 0:
                BEGIN
                  IF CustLedgEntry2.GET("Closed by Entry No.") THEN
                    UpdateDaysToPay(CustLedgEntry2."Posting Date" - "Posting Date",TotalDaysToPay,TotalNoOfInv);
                END;
              ELSE BEGIN
                CustLedgEntry2.SETCURRENTKEY("Closed by Entry No.");
                CustLedgEntry2.SETRANGE("Closed by Entry No.","Entry No.");
                IF CustLedgEntry2.FINDFIRST THEN
                  UpdateDaysToPay(CustLedgEntry2."Posting Date" - "Posting Date",TotalDaysToPay,TotalNoOfInv);
              END;
            END;
          UNTIL NEXT = 0;
      END;

      IF TotalNoOfInv <> 0 THEN
        AvgDaysToPay := TotalDaysToPay / TotalNoOfInv;

      EXIT(AvgDaysToPay);
    END;

    LOCAL PROCEDURE UpdateDaysToPay@3(NoOfDays@1000 : Integer;VAR TotalDaysToPay@1002 : Decimal;VAR TotalNoOfInv@1001 : Integer);
    BEGIN
      TotalDaysToPay += NoOfDays;
      TotalNoOfInv += 1;
    END;

    [External]
    PROCEDURE CalculateStatistic@1(Customer@1022 : Record 18;VAR AdjmtCostLCY@1017 : Decimal;VAR AdjCustProfit@1015 : Decimal;VAR AdjProfitPct@1014 : Decimal;VAR CustInvDiscAmountLCY@1011 : Decimal;VAR CustPaymentsLCY@1004 : Decimal;VAR CustSalesLCY@1002 : Decimal;VAR CustProfit@1001 : Decimal);
    VAR
      CostCalcuMgt@1023 : Codeunit 5836;
    BEGIN
      WITH Customer DO BEGIN
        SETFILTER("Date Filter",GetCurrentYearFilter);

        CALCFIELDS("Sales (LCY)","Profit (LCY)","Inv. Discounts (LCY)","Payments (LCY)");

        // Costs (LCY):
        CustSalesLCY := "Sales (LCY)";
        CustProfit := "Profit (LCY)" + CostCalcuMgt.NonInvtblCostAmt(Customer);
        AdjmtCostLCY := CustSalesLCY - CustProfit + CostCalcuMgt.CalcCustActualCostLCY(Customer);
        AdjCustProfit := CustProfit + AdjmtCostLCY;

        // Profit %
        IF "Sales (LCY)" <> 0 THEN
          AdjProfitPct := ROUND(100 * AdjCustProfit / "Sales (LCY)",0.1)
        ELSE
          AdjProfitPct := 0;

        CustInvDiscAmountLCY := "Inv. Discounts (LCY)";

        CustPaymentsLCY := "Payments (LCY)";
      END;
    END;

    [External]
    PROCEDURE CalcAmountsOnPostedInvoices@4(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      CustLedgEntry@1004 : Record 21;
    BEGIN
      EXIT(CalcAmountsOnPostedDocs(CustNo,RecCount,CustLedgEntry."Document Type"::Invoice));
    END;

    [External]
    PROCEDURE CalcAmountsOnPostedCrMemos@5(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      CustLedgEntry@1004 : Record 21;
    BEGIN
      EXIT(CalcAmountsOnPostedDocs(CustNo,RecCount,CustLedgEntry."Document Type"::"Credit Memo"));
    END;

    [External]
    PROCEDURE CalcAmountsOnOrders@33(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      SalesHeader@1004 : Record 36;
    BEGIN
      EXIT(CalculateAmountsOnUnpostedDocs(CustNo,RecCount,SalesHeader."Document Type"::Order));
    END;

    [External]
    PROCEDURE CalcAmountsOnQuotes@34(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      SalesHeader@1004 : Record 36;
    BEGIN
      EXIT(CalculateAmountsOnUnpostedDocs(CustNo,RecCount,SalesHeader."Document Type"::Quote));
    END;

    LOCAL PROCEDURE CalcAmountsOnPostedDocs@22(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer;DocType@1001 : Integer) : Decimal;
    VAR
      CustLedgEntry@1004 : Record 21;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        SetFilterForPostedDocs(CustLedgEntry,CustNo,DocType);

        RecCount := COUNT;

        CALCSUMS("Sales (LCY)");
        EXIT("Sales (LCY)");
      END;
    END;

    [External]
    PROCEDURE CalculateAmountsWithVATOnUnpostedDocuments@16(CustNo@1000 : Code[20]) : Decimal;
    VAR
      SalesLine@1002 : Record 37;
      Result@1001 : Decimal;
    BEGIN
      IF CustNo = '' THEN
        EXIT;
      SetFilterForUnpostedLines(SalesLine,CustNo,SalesLine."Document Type"::Invoice,TRUE);
      SalesLine.CALCSUMS("Outstanding Amount (LCY)");
      Result := SalesLine."Outstanding Amount (LCY)";

      SetFilterForUnpostedLines(SalesLine,CustNo,SalesLine."Document Type"::"Credit Memo",TRUE);
      SalesLine.CALCSUMS("Outstanding Amount (LCY)");
      Result -= SalesLine."Outstanding Amount (LCY)";

      EXIT(Result);
    END;

    [External]
    PROCEDURE CalculateAmountsOnUnpostedInvoices@8(CustNo@1001 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      EXIT(CalculateAmountsOnUnpostedDocs(CustNo,RecCount,SalesLine."Document Type"::Invoice));
    END;

    [External]
    PROCEDURE CalculateAmountsOnUnpostedCrMemos@9(CustNo@1001 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      EXIT(CalculateAmountsOnUnpostedDocs(CustNo,RecCount,SalesLine."Document Type"::"Credit Memo"));
    END;

    LOCAL PROCEDURE CalculateAmountsOnUnpostedDocs@11(CustNo@1001 : Code[20];VAR RecCount@1000 : Integer;DocumentType@1003 : Integer) : Decimal;
    VAR
      SalesLine@1002 : Record 37;
      Result@1005 : Decimal;
      VAT@1006 : Decimal;
      OutstandingAmount@1007 : Decimal;
      OldDocumentNo@1008 : Code[20];
    BEGIN
      IF CustNo = '' THEN
        EXIT;
      RecCount := 0;
      Result := 0;

      SetFilterForUnpostedLines(SalesLine,CustNo,DocumentType,FALSE);
      WITH SalesLine DO BEGIN
        IF FINDSET THEN
          REPEAT
            CASE "Document Type" OF
              "Document Type"::Invoice,
              "Document Type"::Order,
              "Document Type"::Quote:
                OutstandingAmount := "Outstanding Amount (LCY)";
              "Document Type"::"Credit Memo":
                OutstandingAmount := -"Outstanding Amount (LCY)";
            END;
            VAT := 100 + "VAT %";
            Result += OutstandingAmount * 100 / VAT;

            IF OldDocumentNo <> "Document No." THEN BEGIN
              OldDocumentNo := "Document No.";
              RecCount += 1;
            END;
          UNTIL NEXT = 0;
      END;

      EXIT(ROUND(Result));
    END;

    [External]
    PROCEDURE DrillDownOnPostedInvoices@20(CustNo@1001 : Code[20]);
    VAR
      SalesInvoiceHeader@1000 : Record 112;
    BEGIN
      WITH SalesInvoiceHeader DO BEGIN
        SETRANGE("Bill-to Customer No.",CustNo);
        SETFILTER("Posting Date",GetCurrentYearFilter);

        PAGE.RUN(PAGE::"Posted Sales Invoices",SalesInvoiceHeader);
      END;
    END;

    [External]
    PROCEDURE DrillDownOnPostedCrMemo@6(CustNo@1001 : Code[20]);
    VAR
      SalesCrMemoHeader@1000 : Record 114;
    BEGIN
      WITH SalesCrMemoHeader DO BEGIN
        SETRANGE("Bill-to Customer No.",CustNo);
        SETFILTER("Posting Date",GetCurrentYearFilter);

        PAGE.RUN(PAGE::"Posted Sales Credit Memos",SalesCrMemoHeader);
      END;
    END;

    [External]
    PROCEDURE DrillDownOnOrders@19(CustNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      WITH SalesHeader DO BEGIN
        SETRANGE("Bill-to Customer No.",CustNo);
        SETRANGE("Document Type","Document Type"::Order);

        PAGE.RUN(PAGE::"Sales Order List",SalesHeader);
      END;
    END;

    [External]
    PROCEDURE DrillDownOnQuotes@23(CustNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      WITH SalesHeader DO BEGIN
        SETRANGE("Bill-to Customer No.",CustNo);
        SETRANGE("Document Type","Document Type"::Quote);

        PAGE.RUN(PAGE::"Sales Quotes",SalesHeader);
      END;
    END;

    [External]
    PROCEDURE DrillDownMoneyOwedExpected@17(CustNo@1000 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      SetFilterForUnpostedDocs(SalesHeader,CustNo,-1);
      PAGE.RUN(PAGE::"Sales List",SalesHeader)
    END;

    [External]
    PROCEDURE DrillDownOnUnpostedInvoices@15(CustNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SetFilterForUnpostedDocs(SalesHeader,CustNo,SalesHeader."Document Type"::Invoice);
      PAGE.RUN(PAGE::"Sales Invoice List",SalesHeader)
    END;

    [External]
    PROCEDURE DrillDownOnUnpostedCrMemos@14(CustNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SetFilterForUnpostedDocs(SalesHeader,CustNo,SalesHeader."Document Type"::"Credit Memo");
      PAGE.RUN(PAGE::"Sales Credit Memos",SalesHeader)
    END;

    LOCAL PROCEDURE SetFilterForUnpostedDocs@7(VAR SalesHeader@1003 : Record 36;CustNo@1002 : Code[20];DocumentType@1000 : Integer);
    BEGIN
      WITH SalesHeader DO BEGIN
        SETRANGE("Bill-to Customer No.",CustNo);
        SETFILTER("Posting Date",GetCurrentYearFilter);

        IF DocumentType = -1 THEN
          SETFILTER("Document Type",'%1|%2',"Document Type"::Invoice,"Document Type"::"Credit Memo")
        ELSE
          SETRANGE("Document Type",DocumentType);
      END;
    END;

    LOCAL PROCEDURE SetFilterForUnpostedLines@12(VAR SalesLine@1003 : Record 37;CustNo@1002 : Code[20];DocumentType@1000 : Integer;Posted@1001 : Boolean);
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Bill-to Customer No.",CustNo);
        IF Posted THEN
          SETFILTER("Posting Date",GetCurrentYearFilter);

        IF DocumentType = -1 THEN
          SETFILTER("Document Type",'%1|%2',"Document Type"::Invoice,"Document Type"::"Credit Memo")
        ELSE
          SETRANGE("Document Type",DocumentType);
      END;
    END;

    LOCAL PROCEDURE SetFilterForPostedDocs@27(VAR CustLedgEntry@1002 : Record 21;CustNo@1001 : Code[20];DocumentType@1000 : Integer);
    BEGIN
      WITH CustLedgEntry DO BEGIN
        SETRANGE("Customer No.",CustNo);
        SETFILTER("Posting Date",GetCurrentYearFilter);
        SETRANGE("Document Type",DocumentType);
      END;
    END;

    [External]
    PROCEDURE GetCurrentYearFilter@10() : Text[30];
    VAR
      DateFilterCalc@1002 : Codeunit 358;
      CustDateFilter@1001 : Text[30];
      CustDateName@1000 : Text[30];
      SkipSetFilter@1003 : Boolean;
    BEGIN
      SkipSettingFilter(SkipSetFilter);
      IF SkipSetFilter THEN
        EXIT(CustDateFilter);

      IF FiscalYearTotals THEN
        DateFilterCalc.CreateAccountingPeriodFilter(CustDateFilter,CustDateName,WORKDATE,0)
      ELSE
        DateFilterCalc.CreateFiscalYearFilter(CustDateFilter,CustDateName,WORKDATE,0);

      EXIT(CustDateFilter);
    END;

    [External]
    PROCEDURE GetTotalSales@24(CustNo@1013 : Code[20]) : Decimal;
    VAR
      Totals@1006 : Decimal;
      AmountOnPostedInvoices@1007 : Decimal;
      AmountOnPostedCrMemos@1008 : Decimal;
      AmountOnOutstandingInvoices@1011 : Decimal;
      AmountOnOutstandingCrMemos@1012 : Decimal;
      NoPostedInvoices@1000 : Integer;
      NoPostedCrMemos@1001 : Integer;
      NoOutstandingInvoices@1002 : Integer;
      NoOutstandingCrMemos@1003 : Integer;
    BEGIN
      AmountOnPostedInvoices := CalcAmountsOnPostedInvoices(CustNo,NoPostedInvoices);
      AmountOnPostedCrMemos := CalcAmountsOnPostedCrMemos(CustNo,NoPostedCrMemos);

      AmountOnOutstandingInvoices := CalculateAmountsOnUnpostedInvoices(CustNo,NoOutstandingInvoices);
      AmountOnOutstandingCrMemos := CalculateAmountsOnUnpostedCrMemos(CustNo,NoOutstandingCrMemos);

      Totals := AmountOnPostedInvoices + AmountOnPostedCrMemos + AmountOnOutstandingInvoices + AmountOnOutstandingCrMemos;
      EXIT(Totals)
    END;

    [External]
    PROCEDURE GetYTDSales@25(CustNo@1000 : Code[20]) : Decimal;
    VAR
      Totals@1001 : Decimal;
    BEGIN
      FiscalYearTotals := TRUE;
      Totals := GetTotalSales(CustNo);
      FiscalYearTotals := FALSE;
      EXIT(Totals);
    END;

    [External]
    PROCEDURE CalculateShipToBillToOptions@13(VAR ShipToOptions@1002 : 'Default (Sell-to Address),Alternate Shipping Address,Custom Address';VAR BillToOptions@1001 : 'Default (Customer),Another Customer,Custom Address';SalesHeader@1000 : Record 36);
    VAR
      ShipToNameEqualsSellToName@1003 : Boolean;
    BEGIN
      WITH SalesHeader DO BEGIN
        ShipToNameEqualsSellToName :=
          ("Ship-to Name" = "Sell-to Customer Name") AND ("Ship-to Name 2" = "Sell-to Customer Name 2");

        CASE TRUE OF
          ("Ship-to Code" = '') AND ShipToNameEqualsSellToName AND ShipToAddressEqualsSellToAddress:
            ShipToOptions := ShipToOptions::"Default (Sell-to Address)";
          ("Ship-to Code" = '') AND
          (NOT ShipToNameEqualsSellToName OR NOT ShipToAddressEqualsSellToAddress):
            ShipToOptions := ShipToOptions::"Custom Address";
          "Ship-to Code" <> '':
            ShipToOptions := ShipToOptions::"Alternate Shipping Address";
        END;

        CASE TRUE OF
          ("Bill-to Customer No." = "Sell-to Customer No.") AND BillToAddressEqualsSellToAddress:
            BillToOptions := BillToOptions::"Default (Customer)";
          ("Bill-to Customer No." = "Sell-to Customer No.") AND (NOT BillToAddressEqualsSellToAddress):
            BillToOptions := BillToOptions::"Custom Address";
          "Bill-to Customer No." <> "Sell-to Customer No.":
            BillToOptions := BillToOptions::"Another Customer";
        END;
      END;

      OnAfterCalculateShipToBillToOptions(ShipToOptions,BillToOptions,SalesHeader);
    END;

    [Integration]
    LOCAL PROCEDURE SkipSettingFilter@18(VAR SkipSetFilter@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalculateShipToBillToOptions@21(VAR ShipToOptions@1002 : 'Default (Sell-to Address),Alternate Shipping Address,Custom Address';VAR BillToOptions@1001 : 'Default (Customer),Another Customer,Custom Address';SalesHeader@1000 : Record 36);
    BEGIN
    END;

    BEGIN
    END.
  }
}

