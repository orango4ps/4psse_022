OBJECT Table 5510 Employee Time Reg Buffer
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF NOT ISTEMPORARY THEN
                 ERROR(RecordMustBeTemporaryErr);
             END;

    ReplicateData=No;
    CaptionML=[ENU=Employee Time Reg Buffer;
               NOR=Hurtigbuffer for registrering av ansattid];
  }
  FIELDS
  {
    { 2   ;   ;Line No             ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Line No;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 3   ;   ;Date                ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Date;
                                                              NOR=Dato;
                                                              SVE=Datum];
                                                   NotBlank=Yes }
    { 6   ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Job No.;
                                                              NOR=Prosjektnr.;
                                                              SVE=Projektnr] }
    { 7   ;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Job Task No.;
                                                              NOR=Prosjektoppgavenr.;
                                                              SVE=Projektaktivitetsnr] }
    { 9   ;   ;Cause of Absence Code;Code10       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Cause of Absence Code;
                                                              NOR=Kode fravërsÜrsak;
                                                              SVE=Kod fîr Orsak till frÜnvaro] }
    { 15  ;   ;Quantity            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   NotBlank=Yes }
    { 20  ;   ;Status              ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=[ENU=Open,Submitted,Rejected,Approved;
                                                                    NOR=èpen,Sendt,Avvist,Godkjent;
                                                                    SVE=ôppen,Skickad,Avvisad,GodkÑnd];
                                                   OptionString=Open,Submitted,Rejected,Approved }
    { 21  ;   ;Employee No         ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Employee No;
                                                              NOR=Ansattnr.] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Dimension Set ID;
                                                              NOR=Dimensjonssett-ID;
                                                              SVE=DimensionsuppsÑttnings-ID] }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation="Unit of Measure";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              NOR=Enhetskode;
                                                              SVE=Enhetskod] }
    { 7999;   ;Employee Id         ;GUID          ;OnValidate=VAR
                                                                Employee@1000 : Record 5200;
                                                                Resource@1002 : Record 156;
                                                              BEGIN
                                                                Employee.SETRANGE(Id,"Employee Id");
                                                                IF NOT Employee.FINDFIRST THEN
                                                                  ERROR(CouldNotFindEmployeeErr);

                                                                GraphMgtTimeRegistration.InitUserSetup;
                                                                IF NOT Resource.GET(Employee."Resource No.") THEN BEGIN
                                                                  GraphMgtTimeRegistration.CreateResourceToUseTimeSheet(Resource);
                                                                  Employee.VALIDATE("Resource No.",Resource."No.");
                                                                  Employee.MODIFY;
                                                                END ELSE
                                                                  GraphMgtTimeRegistration.ModifyResourceToUseTimeSheet(Resource);
                                                              END;

                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Employee Id;
                                                              NOR=Ansatt-ID];
                                                   NotBlank=Yes }
    { 8000;   ;Id                  ;GUID          ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Id;
                                                              NOR=ID;
                                                              SVE=ID];
                                                   Editable=No }
    { 8001;   ;Last Modified Date Time;DateTime   ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Last Modified Date Time;
                                                              NOR=Dato/klokkeslett for siste endring;
                                                              SVE=Senast Ñndrad, datum och tid];
                                                   Editable=No }
    { 8002;   ;Job Id              ;GUID          ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Job Id;
                                                              NOR=Jobb-ID] }
    { 9032;   ;Unit of Measure Id  ;GUID          ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Unit of Measure Id;
                                                              NOR=Enhets-ID;
                                                              SVE=MÜttenhet-ID] }
  }
  KEYS
  {
    {    ;Id                                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GraphMgtTimeRegistration@1000 : Codeunit 5513;
      CouldNotFindEmployeeErr@1001 : TextConst '@@@={Locked};ENU=The employee cannot be found.;NOR=The employee cannot be found.';
      RecordMustBeTemporaryErr@1002 : TextConst '@@@={Locked};ENU=Employee Time Reg Buffer must be used as a temporary record.;NOR=Employee Time Reg Buffer must be used as a temporary record.';
      FiltersMustBeSpecifiedErr@1003 : TextConst '@@@={Locked};ENU=A filter must be specified. The filter could be for the date, employeeId or id.;NOR=A filter must be specified. The filter could be for the date, employeeId or id.';
      DateFilterIsInvalidErr@1004 : TextConst '@@@={Locked};ENU=The date filter is invalid. The date filter must be a valid range with maximum %1 days.;NOR=The date filter is invalid. The date filter must be a valid range with maximum %1 days.';
      EmployeeFilterOneEmployeeOnlyErr@1005 : TextConst 'ENU=You can only search for one employee using the employee filter.;NOR=Du kan bare sõke etter Çn ansatt ved hjelp av ansattfilteret.';

    PROCEDURE PropagateInsert@1();
    VAR
      Employee@1005 : Record 5200;
      TimeSheetLine@1003 : Record 951;
      TimeSheetDetail@1002 : Record 952;
      Resource@1001 : Record 156;
      UnitOfMeasure@1004 : Record 204;
      TimeSheetHeaderNo@1000 : Code[20];
    BEGIN
      IF NOT ISTEMPORARY THEN
        ERROR(RecordMustBeTemporaryErr);

      Employee.GET("Employee No");

      TimeSheetHeaderNo := GraphMgtTimeRegistration.GetTimeSheetHeader(Employee."Resource No.",CALCDATE('<-CW>',Date));

      GraphMgtTimeRegistration.GetTimeSheetLineWithEmptyDate(TimeSheetLine,TimeSheetHeaderNo,Date);

      GraphMgtTimeRegistration.AddTimeSheetDetail(TimeSheetDetail,TimeSheetLine,Date,Quantity);

      TRANSFERFIELDS(TimeSheetDetail,TRUE);

      "Employee No" := Employee."No.";
      "Employee Id" := Employee.Id;
      IF Resource.GET(Employee."Resource No.") THEN
        "Unit of Measure Code" := Resource."Base Unit of Measure";
      IF UnitOfMeasure.GET(Resource."Base Unit of Measure") THEN
        "Unit of Measure Id" := UnitOfMeasure.Id;
    END;

    PROCEDURE PropagateModify@2();
    VAR
      TimeSheetDetail@1000 : Record 952;
    BEGIN
      IF Quantity <> xRec.Quantity THEN BEGIN
        TimeSheetDetail.SETRANGE(Id,Id);
        TimeSheetDetail.FINDFIRST;
        TimeSheetDetail.VALIDATE(Quantity,Quantity);
        TimeSheetDetail.MODIFY(TRUE);
        TRANSFERFIELDS(TimeSheetDetail);
      END;
    END;

    PROCEDURE PropagateDelete@3();
    VAR
      TimeSheetDetail@1000 : Record 952;
    BEGIN
      TimeSheetDetail.SETRANGE(Id,Id);
      TimeSheetDetail.FINDFIRST;
      TimeSheetDetail.DELETE(TRUE);
    END;

    PROCEDURE LoadRecords@18(IdFilter@1000 : Text;DateFilter@1011 : Text;EmployeeIdFilter@1009 : Text);
    VAR
      Employee@1002 : Record 5200;
      Calendar@1007 : Record 2000000007;
      FirstDate@1001 : Date;
      LastDate@1003 : Date;
    BEGIN
      IF IdFilter <> '' THEN BEGIN
        LoadRecordFromId(IdFilter);
        EXIT;
      END;

      IF EmployeeIdFilter <> '' THEN BEGIN
        Employee.SETFILTER(Id,EmployeeIdFilter);
        IF Employee.COUNT > 1 THEN
          ERROR(EmployeeFilterOneEmployeeOnlyErr);
        LoadRecordsFromEmployee(EmployeeIdFilter);
        EXIT;
      END;

      IF DateFilter <> '' THEN BEGIN
        Calendar.SETRANGE("Period Type",Calendar."Period Type"::Date);
        Calendar.SETFILTER("Period Start",DateFilter);
        IF Calendar.FINDFIRST THEN BEGIN
          FirstDate := Calendar."Period Start";
          Calendar.FINDLAST;
          LastDate := Calendar."Period Start";
        END ELSE
          ERROR(STRSUBSTNO(DateFilterIsInvalidErr,MaxDateFilterRange));
        IF LastDate - FirstDate > MaxDateFilterRange THEN
          ERROR(STRSUBSTNO(DateFilterIsInvalidErr,MaxDateFilterRange));
        LoadRecordsFromTSDetails(DateFilter);
        EXIT;
      END;

      ERROR(FiltersMustBeSpecifiedErr);
    END;

    PROCEDURE LoadRecordFromId@5(IdFilter@1006 : Text);
    VAR
      TimeSheetHeader@1000 : Record 950;
      TimeSheetLine@1005 : Record 951;
      TimeSheetDetail@1001 : Record 952;
      Employee@1002 : Record 5200;
      Resource@1003 : Record 156;
      UnitOfMeasure@1004 : Record 204;
    BEGIN
      TimeSheetDetail.SETFILTER(Id,IdFilter);
      IF NOT TimeSheetDetail.FINDFIRST THEN
        EXIT;

      TimeSheetLine.GET(TimeSheetDetail."Time Sheet No.",TimeSheetDetail."Time Sheet Line No.");
      IF TimeSheetLine.Type <> TimeSheetLine.Type::Resource THEN
        EXIT;

      TimeSheetHeader.GET(TimeSheetDetail."Time Sheet No.");
      Employee.SETRANGE("Resource No.",TimeSheetHeader."Resource No.");
      IF NOT Employee.FINDFIRST OR NOT Resource.GET(TimeSheetHeader."Resource No.") THEN
        EXIT;

      TRANSFERFIELDS(TimeSheetDetail,TRUE);
      "Line No" := TimeSheetDetail."Time Sheet Line No.";
      "Employee No" := Employee."No.";
      "Employee Id" := Employee.Id;
      IF UnitOfMeasure.GET(Resource."Base Unit of Measure") THEN BEGIN
        "Unit of Measure Code" := UnitOfMeasure.Code;
        "Unit of Measure Id" := UnitOfMeasure.Id;
      END;
      INSERT(TRUE);
    END;

    PROCEDURE LoadRecordsFromEmployee@29(EmployeeIdFilter@1009 : Text);
    VAR
      TimeSheetHeader@1000 : Record 950;
      TimeSheetLine@1005 : Record 951;
      TimeSheetDetail@1001 : Record 952;
      Employee@1002 : Record 5200;
      Resource@1003 : Record 156;
      UnitOfMeasure@1004 : Record 204;
      UnitOfMeasureFound@1006 : Boolean;
    BEGIN
      Employee.SETFILTER(Id,EmployeeIdFilter);
      IF NOT Employee.FINDFIRST THEN
        EXIT;

      IF NOT Resource.GET(Employee."Resource No.") THEN
        EXIT;

      TimeSheetHeader.SETRANGE("Resource No.",Resource."No.");
      IF NOT TimeSheetHeader.FINDSET THEN
        EXIT;

      IF UnitOfMeasure.GET(Resource."Base Unit of Measure") THEN
        UnitOfMeasureFound := TRUE;

      REPEAT
        TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
        TimeSheetLine.SETRANGE(Type,TimeSheetLine.Type::Resource);
        IF TimeSheetLine.FINDSET THEN BEGIN
          REPEAT
            TimeSheetDetail.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
            TimeSheetDetail.SETRANGE("Time Sheet Line No.",TimeSheetLine."Line No.");
            IF TimeSheetDetail.FINDSET THEN BEGIN
              REPEAT
                TRANSFERFIELDS(TimeSheetDetail,TRUE);
                "Line No" := TimeSheetDetail."Time Sheet Line No.";
                "Employee No" := Employee."No.";
                "Employee Id" := Employee.Id;
                IF UnitOfMeasureFound THEN BEGIN
                  "Unit of Measure Id" := UnitOfMeasure.Id;
                  "Unit of Measure Code" := UnitOfMeasure.Code;
                END;
                INSERT(TRUE);
              UNTIL TimeSheetDetail.NEXT = 0;
            END;
          UNTIL TimeSheetLine.NEXT = 0;
        END;
      UNTIL TimeSheetHeader.NEXT = 0;
    END;

    PROCEDURE LoadRecordsFromTSDetails@28(DateFilter@1006 : Text);
    VAR
      TimeSheetHeader@1000 : Record 950;
      TimeSheetLine@1005 : Record 951;
      TimeSheetDetail@1001 : Record 952;
      Employee@1002 : Record 5200;
      Resource@1003 : Record 156;
      UnitOfMeasure@1004 : Record 204;
      PrevTimeSheetHeaderNo@1007 : Code[20];
      HeaderFound@1009 : Boolean;
      PrevResourceNo@1008 : Code[20];
      ResourceFound@1010 : Boolean;
      UnitOfMeasureFound@1011 : Boolean;
    BEGIN
      TimeSheetDetail.SETFILTER(Date,DateFilter);
      IF NOT TimeSheetDetail.FINDSET THEN
        EXIT;

      REPEAT
        TimeSheetLine.GET(TimeSheetDetail."Time Sheet No.",TimeSheetDetail."Time Sheet Line No.");
        IF TimeSheetLine.Type = TimeSheetLine.Type::Resource THEN BEGIN
          HeaderFound := FALSE;
          IF PrevTimeSheetHeaderNo = TimeSheetDetail."Time Sheet No." THEN
            HeaderFound := TRUE
          ELSE
            IF TimeSheetHeader.GET(TimeSheetDetail."Time Sheet No.") THEN BEGIN
              PrevTimeSheetHeaderNo := TimeSheetHeader."No.";
              HeaderFound := TRUE;
            END;

          IF HeaderFound THEN BEGIN
            ResourceFound := FALSE;
            Employee.SETRANGE("Resource No.",TimeSheetHeader."Resource No.");
            IF PrevResourceNo = TimeSheetHeader."Resource No." THEN
              ResourceFound := TRUE
            ELSE
              IF Employee.FINDFIRST AND Resource.GET(TimeSheetHeader."Resource No.") THEN BEGIN
                PrevResourceNo := TimeSheetHeader."Resource No.";
                ResourceFound := TRUE;
                UnitOfMeasureFound := FALSE;
                IF UnitOfMeasure.GET(Resource."Base Unit of Measure") THEN
                  UnitOfMeasureFound := TRUE;
              END;
            IF ResourceFound THEN BEGIN
              TRANSFERFIELDS(TimeSheetDetail,TRUE);
              "Line No" := TimeSheetDetail."Time Sheet Line No.";
              "Employee No" := Employee."No.";
              "Employee Id" := Employee.Id;
              IF UnitOfMeasureFound THEN BEGIN
                "Unit of Measure Code" := UnitOfMeasure.Code;
                "Unit of Measure Id" := UnitOfMeasure.Id;
              END;
              INSERT(TRUE);
            END;
          END;
        END;
      UNTIL TimeSheetDetail.NEXT = 0;
    END;

    LOCAL PROCEDURE MaxDateFilterRange@12() : Integer;
    BEGIN
      EXIT(70);
    END;

    BEGIN
    END.
  }
}

