OBJECT Codeunit 1298 OAuth Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE GetRequestToken@1(ConsumerKey@1004 : Text;ConsumerSecret@1005 : Text;RequestTokenUrl@1006 : Text;CallbackUrl@1007 : Text;VAR RequestTokenKey@1008 : Text;VAR RequestTokenSecret@1009 : Text);
    VAR
      OAuthAuthorization@1003 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OAuthHelper.OAuthAuthorization";
      Consumer@1000 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OAuthHelper.Consumer";
      Token@1002 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OAuthHelper.Token";
      RequestToken@1001 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OAuthHelper.Token";
    BEGIN
      Token := Token.Token('','');
      Consumer := Consumer.Consumer(ConsumerKey,ConsumerSecret);
      OAuthAuthorization := OAuthAuthorization.OAuthAuthorization(Consumer,Token);

      RequestToken := OAuthAuthorization.GetRequestToken(RequestTokenUrl,CallbackUrl);

      RequestTokenKey := RequestToken.TokenKey;
      RequestTokenSecret := RequestToken.TokenSecret;
    END;

    [External]
    PROCEDURE GetAccessToken@5(AccessTokenUrl@1000 : Text;Verifier@1001 : Text;ConsumerKey@1006 : Text;ConsumerSecret@1007 : Text;RequestTokenKey@1008 : Text;RequestTokenSecret@1009 : Text;VAR AccessTokenKey@1002 : Text;VAR AccessTokenSecret@1003 : Text);
    VAR
      OAuthAuthorization@1011 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OAuthHelper.OAuthAuthorization";
      Consumer@1005 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OAuthHelper.Consumer";
      RequestToken@1004 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OAuthHelper.Token";
      AccessToken@1010 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OAuthHelper.Token";
    BEGIN
      RequestToken := RequestToken.Token(RequestTokenKey,RequestTokenSecret);
      Consumer := Consumer.Consumer(ConsumerKey,ConsumerSecret);
      OAuthAuthorization := OAuthAuthorization.OAuthAuthorization(Consumer,RequestToken);

      AccessToken := OAuthAuthorization.GetAccessToken(AccessTokenUrl,Verifier);

      AccessTokenKey := AccessToken.TokenKey;
      AccessTokenSecret := AccessToken.TokenSecret;
    END;

    [External]
    PROCEDURE GetAuthorizationHeader@17(ConsumerKey@1000 : Text;ConsumerSecret@1001 : Text;AccessTokenKey@1006 : Text;AccessTokenSecret@1009 : Text;RequestUrl@1002 : Text;RequestMethod@1003 : Text) AuthorizationHeader : Text;
    VAR
      OAuthAuthorization@1008 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OAuthHelper.OAuthAuthorization";
      Consumer@1007 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OAuthHelper.Consumer";
      AccessToken@1005 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OAuthHelper.Token";
    BEGIN
      AccessToken := AccessToken.Token(AccessTokenKey,AccessTokenSecret);
      Consumer := Consumer.Consumer(ConsumerKey,ConsumerSecret);
      OAuthAuthorization := OAuthAuthorization.OAuthAuthorization(Consumer,AccessToken);

      AuthorizationHeader := OAuthAuthorization.GetAuthorizationHeader(RequestUrl,UPPERCASE(RequestMethod));
    END;

    [External]
    PROCEDURE GetPropertyFromCode@3(Code@1000 : Text;Property@1001 : Text) Value : Text;
    VAR
      I@1002 : Integer;
      NumberOfProperties@1006 : Integer;
    BEGIN
      Code := CONVERTSTR(Code,'&',',');
      Code := CONVERTSTR(Code,'=',',');
      NumberOfProperties := ROUND((STRLEN(Code) - STRLEN(DELCHR(Code,'=',','))) / 2,1,'>');
      FOR I := 1 TO NumberOfProperties DO BEGIN
        IF SELECTSTR(2 * I - 1,Code) = Property THEN
          Value := SELECTSTR(2 * I,Code);
      END;
    END;

    BEGIN
    END.
  }
}

