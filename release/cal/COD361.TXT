OBJECT Codeunit 361 MoveEntries
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.05,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 17=rm,
                TableData 21=rm,
                TableData 25=rm,
                TableData 32=rm,
                TableData 11072005=rmd,
                TableData 203=rm,
                TableData 271=rm,
                TableData 272=rm,
                TableData 300=rm,
                TableData 5802=rm,
                TableData 5804=rd,
                TableData 5896=rm,
                TableData 5907=rm,
                TableData 5908=rm,
                TableData 11012819=rmd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete %1 %2 because it has ledger entries in a fiscal year that has not been closed yet.;NOR=Du kan ikke slette %1 %2 fordi det finnes poster i et regnskaps†r som enda ikke er lukket.;SVE=Du kan inte ta bort %1 %2 d„rf”r att det har transaktioner i ett r„kenskaps†r som „nnu inte avslutats.';
      Text001@1001 : TextConst 'ENU=You cannot delete %1 %2 because there are one or more open ledger entries.;NOR=Du kan ikke slette %1 %2 fordi det finnes †pne poster.;SVE=Du kan inte ta bort %1 %2 d„rf”r att det finns ”ppna transaktioner.';
      Text002@1002 : TextConst 'ENU="There are item entries that have not been adjusted for item %1. ";NOR="Det finnes vareposter som ikke er justert for vare %1. ";SVE="Det finns artikeltransaktioner som inte har justerats f”r artikel %1. "';
      Text003@1003 : TextConst 'ENU="If you delete this item the inventory valuation will be incorrect. ";NOR="Hvis du sletter denne varen, blir lagerverdien feil. ";SVE="Om du tar bort denna artikel kommer lagerv„rderingen bli felaktig. "';
      Text004@1004 : TextConst 'ENU=Use the %2 batch job before deleting the item.;NOR=Bruk kj›rselen %2 f›r du sletter varen.;SVE=Anv„nd batch-jobbet %2 f”re borttag av artikeln.';
      Text005@1005 : TextConst 'ENU=Adjust Cost - Item Entries;NOR=Juster kostverdi - vareposter;SVE=Justera kost. - artikeltrans.';
      Text006@1006 : TextConst 'ENU=You cannot delete %1 %2 because it has ledger entries.;NOR=Du kan ikke slette %1 %2, da den inneholder poster.;SVE=Du kan inte ta bort %1 %2 eftersom den har transaktioner.';
      Text007@1007 : TextConst 'ENU=You cannot delete %1 %2 because there are outstanding purchase order lines.;NOR=Du kan ikke slette %1 %2 fordi det finnes †pne bestillingslinjer.;SVE=Du kan inte ta bort %1 %2 d„rf”r att det finns utest†ende ink”psorderrader.';
      Text008@1008 : TextConst 'ENU="There are item entries that have not been completely invoiced for item %1. ";NOR="Det finnes vareposter som ikke er ferdig fakturerte for vare %1. ";SVE="Det finns artikeltrans. som inte „r f„rdigfakturerade f”r artikel %1. "';
      Text009@1009 : TextConst 'ENU=Invoice all item entries before deleting the item.;NOR=Fakturer alle varepostene f›r du sletter varen.;SVE=Fakturera alla artikeltransaktioner f”re du tar bort artikeln.';
      AccountingPeriod@1010 : Record 50;
      GLEntry@1011 : Record 17;
      CustLedgEntry@1012 : Record 21;
      VendLedgEntry@1013 : Record 25;
      BankAccLedgEntry@1014 : Record 271;
      CheckLedgEntry@1015 : Record 272;
      ItemLedgEntry@1016 : Record 32;
      ResLedgEntry@1017 : Record 203;
      JobLedgEntry@1018 : Record 11072005;
      PurchOrderLine@1019 : Record 39;
      ReminderEntry@1020 : Record 300;
      ValueEntry@1021 : Record 5802;
      AvgCostAdjmt@1022 : Record 5804;
      InvtAdjmtEntryOrder@1031 : Record 5896;
      ServLedgEntry@1023 : Record 5907;
      WarrantyLedgEntry@1024 : Record 5908;
      CannotDeleteGLBudgetEntriesErr@1026 : TextConst '@@@="%1 - G/L Account No., %2 - Date, %3 - G/L Budget Name. You cannot delete G/L Account 1000 because it has budget ledger entries\ after 25/01/2018 in G/L Budget Name = Budget_2018.";ENU=You cannot delete G/L account %1 because it contains budget ledger entries after %2 for G/L budget name %3.;NOR=Du kan ikke slette finanskonto %1 fordi den inneholder budsjettposter etter %2 for finansbudsjettnavnet %3.;SVE=Du kan inte ta bort redovisningskontot %1 eftersom det inneh†ller budgettransaktioner efter %2 f”r redovisningsbudgetnamnet %3.';
      Text013@1028 : TextConst 'ENU=You cannot delete %1 %2 because prepaid contract entries exist in %3.;NOR=Du kan ikke slette %1 %2 fordi det finnes forh†ndsbetalte kontraktposter i %3.;SVE=Du kan inte ta bort %1 %2 d„rf”r att f”rutbetalda kontraktstransaktioner finns i %3.';
      Text014@1029 : TextConst 'ENU=You cannot delete %1 %2, because open prepaid contract entries exist in %3.;NOR=Du kan ikke slette %1 %2 fordi det finnes †pne forh†ndsbetalte kontraktposter i %3.;SVE=Du kan inte ta bort %1 %2 d„rf”r att ”ppna f”rutbetalda kontraktstrans. finns i %3.';
      Text015@1030 : TextConst 'ENU=You cannot delete %1 %2 because there are outstanding purchase return order lines.;NOR=Du kan ikke slette %1 %2 fordi det finnes utest†ende bestillingsreturlinjer.;SVE=Det g†r inte att ta bort %1 %2 eftersom det finns utest†ende ink”psreturorderrader.';
      TimeSheetLinesErr@1033 : TextConst '@@@=You cannot delete job JOB001 because it has open or submitted time sheet lines.;ENU=You cannot delete job %1 because it has open or submitted time sheet lines.;NOR=Du kan ikke slette prosjektet %1 fordi det har †pne eller sendte timelistelinjer.';
      CannotDeleteBecauseInInvErr@1032 : TextConst '@@@="%1 = the object to be deleted (example: Item, Customer).";ENU=You cannot delete %1 because it is used in some invoices.;NOR=Du kan ikke slette %1 fordi den brukes i noen fakturaer.';
      GLAccDeleteClosedPeriodsQst@1034 : TextConst 'ENU=Note that accounting regulations may require that you save accounting data for a certain number of years. Are you sure you want to delete the G/L account?;NOR=Legg merke til at regnskapsbestemmelser kanskje krever at duÿoppbevarer regnskapsdataÿi et bestemt antall †r. Er du sikker p† at du vil slette finanskontoen?';
      CannotDeleteGLAccountWithEntriesInOpenFiscalYearErr@1035 : TextConst '@@@=%1 - G/L Account No. You cannot delete G/L Account 1000 because it has ledger entries in a fiscal year that has not been closed yet.;ENU=You cannot delete G/L account %1 because it has ledger entries in a fiscal year that has not been closed yet.;NOR=Du kan ikke sletteÿfinanskonto %1 fordi den har poster i et regnskaps†r som ikke er avsluttet enn†.';
      CannotDeleteGLAccountWithEntriesAfterDateErr@1036 : TextConst '@@@=%1 - G/L Account No., %2 - Date. You cannot delete G/L Account 1000 because it has ledger entries posted after 01-01-2010.;ENU=You cannot delete G/L account %1 because it has ledger entries posted after %2.;NOR=Du kan ikke sletteÿfinanskonto %1 fordi den har poster bokf›rt etter %2.';
      CompName@1100529600 : Text[80];
      Text11012000@1100529602 : TextConst 'ENU=You cannot delete %1 %2 because it has ledger entries in a fiscal year that has not been closed yet in company %3.';
      Text11012001@1100529601 : TextConst 'ENU=You cannot delete %1 %2 because there are one or more open ledger entries in company %3.';

    [External]
    PROCEDURE MoveGLEntries@1(GLAcc@1000 : Record 15);
    VAR
      GLSetup@1004 : Record 98;
      CalcGLAccWhereUsed@1001 : Codeunit 100;
      NewGLAccNo@1002 : Code[20];
    BEGIN
      OnBeforeMoveGLEntries(GLAcc,NewGLAccNo);

      GLSetup.GET;

      CheckGLAccountEntries(GLAcc,GLSetup);

      IF GLSetup."Check G/L Account Usage" THEN
        CalcGLAccWhereUsed.DeleteGLNo(GLAcc."No.");

      GLEntry.RESET;
      GLEntry.SETCURRENTKEY("G/L Account No.");
      GLEntry.SETRANGE("G/L Account No.",GLAcc."No.");
      GLEntry.MODIFYALL("G/L Account No.",NewGLAccNo);

      OnAfterMoveGLEntries(GLAcc,GLEntry);
    END;

    [External]
    PROCEDURE MoveCustEntries@2(Cust@1000 : Record 18);
    VAR
      IdentityManagement@1001 : Codeunit 9801;
      NewCustNo@1002 : Code[20];
    BEGIN
      OnBeforeMoveCustEntries(Cust,NewCustNo);

      CustLedgEntry.RESET;
      //**4PS.sn
      IF (CompName <> '') AND (CompName <> COMPANYNAME) THEN
        CustLedgEntry.CHANGECOMPANY(CompName);
      //**4PS.en
      CustLedgEntry.SETCURRENTKEY("Customer No.","Posting Date");
      CustLedgEntry.SETRANGE("Customer No.",Cust."No.");
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        CustLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF NOT CustLedgEntry.ISEMPTY THEN BEGIN
        // IF IdentityManagement.IsInvAppId THEN //**4PS.o
        IF IdentityManagement.IsInvAppId THEN BEGIN //**4PS.n
          //**4PS.sn
          IF (CompName <> '') AND (CompName <> COMPANYNAME) THEN
            ERROR(
              Text11012000,
              Cust.TABLECAPTION, Cust."No.", CompName)
          ELSE
          //**4PS.en
            ERROR(
              CannotDeleteBecauseInInvErr,
              Cust.TABLECAPTION);
        END ELSE
          ERROR(
            Text000,
            Cust.TABLECAPTION,Cust."No.");
      END;

      CustLedgEntry.RESET;
      //**4PS.sn
      IF (CompName <> '') AND (CompName <> COMPANYNAME) THEN
        CustLedgEntry.CHANGECOMPANY(CompName);
      //**4PS.en
      IF NOT CustLedgEntry.SETCURRENTKEY("Customer No.",Open) THEN
        CustLedgEntry.SETCURRENTKEY("Customer No.");
      CustLedgEntry.SETRANGE("Customer No.",Cust."No.");
      CustLedgEntry.SETRANGE(Open,TRUE);
      IF NOT CustLedgEntry.ISEMPTY THEN
      //**4PS.sn
        IF (CompName <> '') AND (CompName <> COMPANYNAME) THEN
          ERROR(
            Text11012001,
            Cust.TABLECAPTION, Cust."No.", CompName)
        ELSE
      //**4PS.en
          ERROR(
            Text001,
            Cust.TABLECAPTION,Cust."No.");

      ReminderEntry.RESET;
      //**4PS.sn
      IF (CompName <> '') AND (CompName <> COMPANYNAME) THEN
        ReminderEntry.CHANGECOMPANY(CompName);
      //**4PS.en
      ReminderEntry.SETCURRENTKEY("Customer No.");
      ReminderEntry.SETRANGE("Customer No.",Cust."No.");
      ReminderEntry.MODIFYALL("Customer No.",NewCustNo);

      CustLedgEntry.SETRANGE(Open);
      CustLedgEntry.MODIFYALL("Customer No.",NewCustNo);

      ServLedgEntry.RESET;
      //**4PS.sn
      IF (CompName <> '') AND (CompName <> COMPANYNAME) THEN
        ServLedgEntry.CHANGECOMPANY(CompName);
      //**4PS.en
      ServLedgEntry.SETRANGE("Customer No.",Cust."No.");
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF NOT ServLedgEntry.ISEMPTY THEN
      //**4PS.sn
        IF (CompName <> '') AND (CompName <> COMPANYNAME) THEN
          ERROR(
            Text11012000,
            Cust.TABLECAPTION, Cust."No.", CompName)
        ELSE
      //**4PS.en
          ERROR(
            Text000,
            Cust.TABLECAPTION,Cust."No.");

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,TRUE);
      IF NOT ServLedgEntry.ISEMPTY THEN
      //**4PS.sn
        IF (CompName <> '') AND (CompName <> COMPANYNAME) THEN
          ERROR(
            Text11012001,
            Cust.TABLECAPTION, Cust."No.", CompName)
        ELSE
      //**4PS.en
          ERROR(
            Text001,
            Cust.TABLECAPTION,Cust."No.");

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("Customer No.",NewCustNo);

      ServLedgEntry.RESET;
      //**4PS.sn
      IF (CompName <> '') AND (CompName <> COMPANYNAME) THEN
        ServLedgEntry.CHANGECOMPANY(CompName);
      //**4PS.en
      ServLedgEntry.SETRANGE("Bill-to Customer No.",Cust."No.");
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF NOT ServLedgEntry.ISEMPTY THEN
      //**4PS.sn
        IF (CompName <> '') AND (CompName <> COMPANYNAME) THEN
          ERROR(
            Text11012000,
            Cust.TABLECAPTION, Cust."No.", CompName)
        ELSE
      //**4PS.en
          ERROR(
            Text000,
            Cust.TABLECAPTION,Cust."No.");

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,TRUE);
      IF NOT ServLedgEntry.ISEMPTY THEN
      //**4PS.sn
        IF (CompName <> '') AND (CompName <> COMPANYNAME) THEN
          ERROR(
            Text11012001,
            Cust.TABLECAPTION, Cust."No.", CompName)
        ELSE
      //**4PS.en
          ERROR(
            Text001,
            Cust.TABLECAPTION,Cust."No.");

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("Bill-to Customer No.",NewCustNo);

      WarrantyLedgEntry.LOCKTABLE;
      WarrantyLedgEntry.SETRANGE("Customer No.",Cust."No.");
      WarrantyLedgEntry.MODIFYALL("Customer No.",'');

      WarrantyLedgEntry.SETRANGE("Customer No.");
      WarrantyLedgEntry.SETRANGE("Bill-to Customer No.",Cust."No.");
      WarrantyLedgEntry.MODIFYALL("Bill-to Customer No.",NewCustNo);

      OnAfterMoveCustEntries(Cust,CustLedgEntry,ReminderEntry,ServLedgEntry,WarrantyLedgEntry);
    END;

    [External]
    PROCEDURE MoveVendorEntries@3(Vend@1000 : Record 23);
    VAR
      NewVendNo@1001 : Code[20];
    BEGIN
      OnBeforeMoveVendEntries(Vend,NewVendNo);

      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.","Posting Date");
      VendLedgEntry.SETRANGE("Vendor No.",Vend."No.");
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        VendLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF NOT VendLedgEntry.ISEMPTY THEN
        ERROR(
          Text000,
          Vend.TABLECAPTION,Vend."No.");

      VendLedgEntry.RESET;
      IF NOT VendLedgEntry.SETCURRENTKEY("Vendor No.",Open) THEN
        VendLedgEntry.SETCURRENTKEY("Vendor No.");
      VendLedgEntry.SETRANGE("Vendor No.",Vend."No.");
      VendLedgEntry.SETRANGE(Open,TRUE);
      IF NOT VendLedgEntry.ISEMPTY THEN
        ERROR(
          Text001,
          Vend.TABLECAPTION,Vend."No.");

      VendLedgEntry.SETRANGE(Open);
      VendLedgEntry.MODIFYALL("Vendor No.",NewVendNo);

      WarrantyLedgEntry.LOCKTABLE;
      WarrantyLedgEntry.SETRANGE("Vendor No.",Vend."No.");
      WarrantyLedgEntry.MODIFYALL("Vendor No.",NewVendNo);

      OnAfterMoveVendorEntries(Vend,VendLedgEntry,WarrantyLedgEntry);
    END;

    [External]
    PROCEDURE MoveBankAccEntries@5(BankAcc@1000 : Record 270);
    VAR
      NewBankAccNo@1001 : Code[20];
    BEGIN
      OnBeforeMoveBankAccEntries(BankAcc,NewBankAccNo);

      BankAccLedgEntry.RESET;
      BankAccLedgEntry.SETCURRENTKEY("Bank Account No.","Posting Date");
      BankAccLedgEntry.SETRANGE("Bank Account No.",BankAcc."No.");
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        BankAccLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF NOT BankAccLedgEntry.ISEMPTY THEN
        ERROR(
          Text000,
          BankAcc.TABLECAPTION,BankAcc."No.");

      BankAccLedgEntry.RESET;
      IF NOT BankAccLedgEntry.SETCURRENTKEY("Bank Account No.",Open) THEN
        BankAccLedgEntry.SETCURRENTKEY("Bank Account No.");
      BankAccLedgEntry.SETRANGE("Bank Account No.",BankAcc."No.");
      BankAccLedgEntry.SETRANGE(Open,TRUE);
      IF NOT BankAccLedgEntry.ISEMPTY THEN
        ERROR(
          Text001,
          BankAcc.TABLECAPTION,BankAcc."No.");

      BankAccLedgEntry.SETRANGE(Open);
      BankAccLedgEntry.MODIFYALL("Bank Account No.",'');
      CheckLedgEntry.SETCURRENTKEY("Bank Account No.");
      CheckLedgEntry.SETRANGE("Bank Account No.",BankAcc."No.");
      CheckLedgEntry.MODIFYALL("Bank Account No.",NewBankAccNo);

      OnAfterMoveBankAccEntries(BankAcc,BankAccLedgEntry,CheckLedgEntry);
    END;

    [External]
    PROCEDURE MoveItemEntries@4(Item@1000 : Record 27);
    VAR
      IdentityManagement@1001 : Codeunit 9801;
      NewItemNo@1002 : Code[20];
    BEGIN
      OnBeforeMoveItemEntries(Item,NewItemNo);

      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Item No.");
      ItemLedgEntry.SETRANGE("Item No.",Item."No.");
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        ItemLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF NOT ItemLedgEntry.ISEMPTY THEN BEGIN
        IF IdentityManagement.IsInvAppId THEN
          ERROR(
            CannotDeleteBecauseInInvErr,
            Item.TABLECAPTION);

        ERROR(
          Text000,
          Item.TABLECAPTION,Item."No.");
      END;

      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Item No.");
      ItemLedgEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgEntry.SETRANGE("Completely Invoiced",FALSE);
      IF NOT ItemLedgEntry.ISEMPTY THEN
        ERROR(
          Text008 +
          Text003 +
          Text009,Item."No.");
      ItemLedgEntry.SETRANGE("Completely Invoiced");

      ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
      ItemLedgEntry.SETRANGE(Open,TRUE);
      IF NOT ItemLedgEntry.ISEMPTY THEN
        ERROR(
          Text001,
          Item.TABLECAPTION,Item."No.");

      ItemLedgEntry.SETCURRENTKEY("Item No.","Applied Entry to Adjust");
      ItemLedgEntry.SETRANGE(Open,FALSE);
      ItemLedgEntry.SETRANGE("Applied Entry to Adjust",TRUE);
      IF NOT ItemLedgEntry.ISEMPTY THEN
        ERROR(
          Text002 +
          Text003 +
          Text004,
          Item."No.",Text005);
      ItemLedgEntry.SETRANGE("Applied Entry to Adjust");

      IF Item."Costing Method" = Item."Costing Method"::Average THEN BEGIN
        AvgCostAdjmt.RESET;
        AvgCostAdjmt.SETRANGE("Item No.",Item."No.");
        AvgCostAdjmt.SETRANGE("Cost Is Adjusted",FALSE);
        IF NOT AvgCostAdjmt.ISEMPTY THEN
          ERROR(
            Text002 +
            Text003 +
            Text004,
            Item."No.",Text005);
      END;

      ItemLedgEntry.SETRANGE(Open);
      ItemLedgEntry.MODIFYALL("Item No.",NewItemNo);

      ValueEntry.RESET;
      ValueEntry.SETCURRENTKEY("Item No.");
      ValueEntry.SETRANGE("Item No.",Item."No.");
      ValueEntry.MODIFYALL("Item No.",NewItemNo);

      AvgCostAdjmt.RESET;
      AvgCostAdjmt.SETRANGE("Item No.",Item."No.");
      AvgCostAdjmt.DELETEALL;

      InvtAdjmtEntryOrder.RESET;
      InvtAdjmtEntryOrder.SETRANGE("Item No.",Item."No.");
      InvtAdjmtEntryOrder.SETRANGE("Order Type",InvtAdjmtEntryOrder."Order Type"::Production);
      InvtAdjmtEntryOrder.MODIFYALL("Cost is Adjusted",TRUE);
      InvtAdjmtEntryOrder.SETRANGE("Order Type");
      InvtAdjmtEntryOrder.MODIFYALL("Item No.",NewItemNo);

      ServLedgEntry.RESET;
      ServLedgEntry.SETRANGE("Item No. (Serviced)",Item."No.");
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF NOT ServLedgEntry.ISEMPTY THEN
        ERROR(
          Text000,
          Item.TABLECAPTION,Item."No.");

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,TRUE);
      IF NOT ServLedgEntry.ISEMPTY THEN
        ERROR(
          Text001,
          Item.TABLECAPTION,Item."No.");

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("Item No. (Serviced)",NewItemNo);

      ServLedgEntry.SETRANGE("Item No. (Serviced)");
      ServLedgEntry.SETRANGE(Type,ServLedgEntry.Type::Item);
      ServLedgEntry.SETRANGE("No.",Item."No.");
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF NOT ServLedgEntry.ISEMPTY THEN
        ERROR(
          Text000,
          Item.TABLECAPTION,Item."No.");

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,TRUE);
      IF NOT ServLedgEntry.ISEMPTY THEN
        ERROR(
          Text001,
          Item.TABLECAPTION,Item."No.");

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("No.",NewItemNo);

      WarrantyLedgEntry.LOCKTABLE;
      WarrantyLedgEntry.SETRANGE("Item No. (Serviced)",Item."No.");
      WarrantyLedgEntry.MODIFYALL("Item No. (Serviced)",NewItemNo);

      WarrantyLedgEntry.SETRANGE("Item No. (Serviced)");
      WarrantyLedgEntry.SETRANGE(Type,WarrantyLedgEntry.Type::Item);
      WarrantyLedgEntry.SETRANGE("No.",Item."No.");
      WarrantyLedgEntry.MODIFYALL("No.",NewItemNo);

      OnAfterMoveItemEntries(Item,ItemLedgEntry,ValueEntry,ServLedgEntry,WarrantyLedgEntry,InvtAdjmtEntryOrder);
    END;

    [External]
    PROCEDURE MoveResEntries@6(Res@1000 : Record 156);
    VAR
      NewResNo@1001 : Code[20];
    BEGIN
      OnBeforeMoveResEntries(Res,NewResNo);

      ResLedgEntry.RESET;
      ResLedgEntry.SETCURRENTKEY("Resource No.","Posting Date");
      ResLedgEntry.SETRANGE("Resource No.",Res."No.");
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        ResLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF NOT ResLedgEntry.ISEMPTY THEN
        ERROR(
          Text000,
          Res.TABLECAPTION,Res."No.");

      ResLedgEntry.RESET;
      ResLedgEntry.SETCURRENTKEY("Resource No.");
      ResLedgEntry.SETRANGE("Resource No.",Res."No.");
      ResLedgEntry.MODIFYALL("Resource No.",NewResNo);

      ServLedgEntry.RESET;
      ServLedgEntry.SETRANGE(Type,ServLedgEntry.Type::Resource);
      ServLedgEntry.SETRANGE("No.",Res."No.");
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF NOT ServLedgEntry.ISEMPTY THEN
        ERROR(
          Text000,
          Res.TABLECAPTION,Res."No.");

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,TRUE);
      IF NOT ServLedgEntry.ISEMPTY THEN
        ERROR(
          Text001,
          Res.TABLECAPTION,Res."No.");

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("No.",NewResNo);

      WarrantyLedgEntry.LOCKTABLE;
      WarrantyLedgEntry.SETRANGE(Type,WarrantyLedgEntry.Type::Resource);
      WarrantyLedgEntry.SETRANGE("No.",Res."No.");
      WarrantyLedgEntry.MODIFYALL("No.",NewResNo);

      OnAfterMoveResEntries(Res,ResLedgEntry,ServLedgEntry,WarrantyLedgEntry);
    END;

    [External]
    PROCEDURE MoveJobEntries@7(Job@1000 : Record 11072003);
    VAR
      TimeSheetLine@1001 : Record 951;
      NewJobNo@1002 : Code[20];
    BEGIN
      OnBeforeMoveJobEntries(Job,NewJobNo);

      JobLedgEntry.SETCURRENTKEY("Job No.");
      JobLedgEntry.SETRANGE("Job No.",Job."No.");
      IF NOT JobLedgEntry.ISEMPTY THEN
        ERROR(
          Text006,
          Job.TABLECAPTION,Job."No.");

      TimeSheetLine.SETRANGE(Type,TimeSheetLine.Type::Job);
      TimeSheetLine.SETRANGE("Job No.",Job."No.");
      TimeSheetLine.SETFILTER(Status,'%1|%2',TimeSheetLine.Status::Open,TimeSheetLine.Status::Submitted);
      IF NOT TimeSheetLine.ISEMPTY THEN
        ERROR(TimeSheetLinesErr,Job."No.");

      PurchOrderLine.SETCURRENTKEY("Document Type");
      PurchOrderLine.SETFILTER(
        "Document Type",'%1|%2',
        PurchOrderLine."Document Type"::Order,
        PurchOrderLine."Document Type"::"Return Order");
      PurchOrderLine.SETRANGE("Job No.",Job."No.");
      IF PurchOrderLine.FINDFIRST THEN BEGIN
        IF PurchOrderLine."Document Type" = PurchOrderLine."Document Type"::Order THEN
          ERROR(Text007,Job.TABLECAPTION,Job."No.");
        IF PurchOrderLine."Document Type" = PurchOrderLine."Document Type"::"Return Order" THEN
          ERROR(Text015,Job.TABLECAPTION,Job."No.");
      END;

      ServLedgEntry.RESET;
      ServLedgEntry.SETRANGE("Job No.",Job."No.");
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF NOT ServLedgEntry.ISEMPTY THEN
        ERROR(
          Text000,
          Job.TABLECAPTION,Job."No.");

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,TRUE);
      IF NOT ServLedgEntry.ISEMPTY THEN
        ERROR(
          Text001,
          Job.TABLECAPTION,Job."No.");

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("Job No.",NewJobNo);

      OnAfterMoveJobEntries(Job,JobLedgEntry,TimeSheetLine,ServLedgEntry);
    END;

    [External]
    PROCEDURE MoveServiceItemLedgerEntries@8(ServiceItem@1000 : Record 5940);
    VAR
      ResultDescription@1001 : Text;
      NewServiceItemNo@1002 : Code[20];
    BEGIN
      OnBeforeMoveServiceItemLedgerEntries(ServiceItem,NewServiceItemNo);

      ServLedgEntry.LOCKTABLE;

      ResultDescription := CheckIfServiceItemCanBeDeleted(ServLedgEntry,ServiceItem."No.");
      IF ResultDescription <> '' THEN
        ERROR(ResultDescription);

      ServLedgEntry.MODIFYALL("Service Item No. (Serviced)",NewServiceItemNo);

      WarrantyLedgEntry.LOCKTABLE;
      WarrantyLedgEntry.SETRANGE("Service Item No. (Serviced)",ServiceItem."No.");
      WarrantyLedgEntry.MODIFYALL("Service Item No. (Serviced)",NewServiceItemNo);

      OnAfterMoveServiceItemLedgerEntries(ServiceItem);
    END;

    [External]
    PROCEDURE MoveServContractLedgerEntries@9(ServiceContractHeader@1000 : Record 5965);
    VAR
      NewContractNo@1001 : Code[20];
    BEGIN
      OnBeforeMoveServContractLedgerEntries(ServiceContractHeader,NewContractNo);

      IF ServiceContractHeader.Prepaid THEN BEGIN
        ServLedgEntry.RESET;
        ServLedgEntry.SETCURRENTKEY(Type,"No.");
        ServLedgEntry.SETRANGE(Type,ServLedgEntry.Type::"Service Contract");
        ServLedgEntry.SETRANGE("No.",ServiceContractHeader."Contract No.");
        ServLedgEntry.SETRANGE(Prepaid,TRUE);
        ServLedgEntry.SETRANGE("Moved from Prepaid Acc.",FALSE);
        ServLedgEntry.SETRANGE(Open,FALSE);
        IF NOT ServLedgEntry.ISEMPTY THEN
          ERROR(
            Text013,
            ServiceContractHeader.TABLECAPTION,ServiceContractHeader."Contract No.",ServLedgEntry.TABLECAPTION);
        ServLedgEntry.SETRANGE(Open,TRUE);
        IF NOT ServLedgEntry.ISEMPTY THEN
          ERROR(
            Text014,
            ServiceContractHeader.TABLECAPTION,ServiceContractHeader."Contract No.",ServLedgEntry.TABLECAPTION);
      END;

      ServLedgEntry.RESET;
      ServLedgEntry.SETRANGE("Service Contract No.",ServiceContractHeader."Contract No.");
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF NOT ServLedgEntry.ISEMPTY THEN
        ERROR(
          Text000,
          ServiceContractHeader.TABLECAPTION,ServiceContractHeader."Contract No.");

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,TRUE);
      IF NOT ServLedgEntry.ISEMPTY THEN
        ERROR(
          Text001,
          ServiceContractHeader.TABLECAPTION,ServiceContractHeader."Contract No.");

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("Service Contract No.",NewContractNo);

      ServLedgEntry.SETRANGE("Service Contract No.");
      ServLedgEntry.SETRANGE(Type,ServLedgEntry.Type::"Service Contract");
      ServLedgEntry.SETRANGE("No.",ServiceContractHeader."Contract No.");
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF NOT ServLedgEntry.ISEMPTY THEN
        ERROR(
          Text000,
          ServiceContractHeader.TABLECAPTION,ServiceContractHeader."Contract No.");

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,TRUE);
      IF NOT ServLedgEntry.ISEMPTY THEN
        ERROR(
          Text001,
          ServiceContractHeader.TABLECAPTION,ServiceContractHeader."Contract No.");

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("No.",NewContractNo);

      WarrantyLedgEntry.LOCKTABLE;
      WarrantyLedgEntry.SETRANGE("Service Contract No.",ServiceContractHeader."Contract No.");
      WarrantyLedgEntry.MODIFYALL("Service Contract No.",NewContractNo);

      OnAfterMoveServContractLedgerEntries(ServiceContractHeader);
    END;

    [External]
    PROCEDURE MoveServiceCostLedgerEntries@13(ServiceCost@1000 : Record 5905);
    VAR
      NewCostCode@1001 : Code[10];
    BEGIN
      OnBeforeMoveServiceCostLedgerEntries(ServiceCost,NewCostCode);

      ServLedgEntry.RESET;
      ServLedgEntry.SETRANGE(Type,ServLedgEntry.Type::"Service Cost");
      ServLedgEntry.SETRANGE("No.",ServiceCost.Code);
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF NOT ServLedgEntry.ISEMPTY THEN
        ERROR(
          Text000,
          ServiceCost.TABLECAPTION,ServiceCost.Code);

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,TRUE);
      IF NOT ServLedgEntry.ISEMPTY THEN
        ERROR(
          Text001,
          ServiceCost.TABLECAPTION,ServiceCost.Code);

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("No.",NewCostCode);

      WarrantyLedgEntry.LOCKTABLE;
      WarrantyLedgEntry.SETRANGE(Type,WarrantyLedgEntry.Type::"Service Cost");
      WarrantyLedgEntry.SETRANGE("No.",ServiceCost.Code);
      WarrantyLedgEntry.MODIFYALL("No.",NewCostCode);

      OnAfterMoveServiceCostLedgerEntries(ServiceCost);
    END;

    [External]
    PROCEDURE MoveCashFlowEntries@10(CashFlowAccount@1004 : Record 841);
    VAR
      CFForecastEntry@1003 : Record 847;
      CFSetup@1002 : Record 843;
      CFWorksheetLine@1000 : Record 846;
      NewAccountNo@1001 : Code[20];
    BEGIN
      OnBeforeMoveCashFlowEntries(CashFlowAccount,NewAccountNo);

      CashFlowAccount.LOCKTABLE;

      IF CashFlowAccount."Account Type" = CashFlowAccount."Account Type"::Entry THEN BEGIN
        CashFlowAccount.CALCFIELDS(Amount);
        CashFlowAccount.TESTFIELD(Amount,0);
      END;

      CFForecastEntry.RESET;
      CFForecastEntry.SETCURRENTKEY("Cash Flow Account No.");
      CFForecastEntry.SETRANGE("Cash Flow Account No.",CashFlowAccount."No.");
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        CFForecastEntry.SETFILTER("Cash Flow Date",'>%1',AccountingPeriod."Starting Date");
      IF NOT CFForecastEntry.ISEMPTY THEN
        ERROR(
          Text000,
          CashFlowAccount.TABLECAPTION,CashFlowAccount."No.");

      CFSetup.GET;
      IF CFSetup."Receivables CF Account No." = CashFlowAccount."No." THEN
        CFSetup.MODIFYALL("Receivables CF Account No.",'');

      IF CFSetup."Payables CF Account No." = CashFlowAccount."No." THEN
        CFSetup.MODIFYALL("Payables CF Account No.",'');

      IF CFSetup."Sales Order CF Account No." = CashFlowAccount."No." THEN
        CFSetup.MODIFYALL("Sales Order CF Account No.",'');

      IF CFSetup."Purch. Order CF Account No." = CashFlowAccount."No." THEN
        CFSetup.MODIFYALL("Purch. Order CF Account No.",'');

      IF CFSetup."FA Budget CF Account No." = CashFlowAccount."No." THEN
        CFSetup.MODIFYALL("FA Budget CF Account No.",'');

      IF CFSetup."FA Disposal CF Account No." = CashFlowAccount."No." THEN
        CFSetup.MODIFYALL("FA Disposal CF Account No.",'');

      IF CFSetup."Service CF Account No." = CashFlowAccount."No." THEN
        CFSetup.MODIFYALL("Service CF Account No.",'');

      CFWorksheetLine.RESET;
      CFWorksheetLine.SETRANGE("Cash Flow Account No.",CashFlowAccount."No.");
      CFWorksheetLine.MODIFYALL("Cash Flow Account No.",'');

      CFForecastEntry.RESET;
      CFForecastEntry.SETCURRENTKEY("Cash Flow Forecast No.");
      CFForecastEntry.SETRANGE("Cash Flow Account No.",CashFlowAccount."No.");
      CFForecastEntry.MODIFYALL("Cash Flow Account No.",'');

      OnAfterMoveCashFlowEntries(CashFlowAccount);
    END;

    [External]
    PROCEDURE MoveDocRelatedEntries@67(TableNo@1003 : Integer;DocNo@1001 : Code[20]);
    VAR
      ItemLedgEntry2@1002 : Record 32;
      ValueEntry2@1004 : Record 5802;
      CostCalcMgt@1000 : Codeunit 5836;
    BEGIN
      OnBeforeMoveDocRelatedEntries(TableNo,DocNo);

      ItemLedgEntry2.LOCKTABLE;
      ItemLedgEntry2.SETCURRENTKEY("Document No.");
      ItemLedgEntry2.SETRANGE("Document No.",DocNo);
      ItemLedgEntry2.SETRANGE("Document Type",CostCalcMgt.GetDocType(TableNo));
      ItemLedgEntry2.SETFILTER("Document Line No.",'<>0');
      ItemLedgEntry2.MODIFYALL("Document Line No.",0);

      ValueEntry2.LOCKTABLE;
      ValueEntry2.SETCURRENTKEY("Document No.");
      ValueEntry2.SETRANGE("Document No.",DocNo);
      ValueEntry2.SETRANGE("Document Type",CostCalcMgt.GetDocType(TableNo));
      ValueEntry2.SETFILTER("Document Line No.",'<>0');
      ValueEntry2.MODIFYALL("Document Line No.",0);

      OnAfterMoveDocRelatedEntries(TableNo,DocNo);
    END;

    [External]
    PROCEDURE CheckIfServiceItemCanBeDeleted@11(VAR ServiceLedgerEntry@1000 : Record 5907;ServiceItemNo@1001 : Code[20]) : Text;
    VAR
      ServiceItem@1003 : Record 5940;
    BEGIN
      ServiceLedgerEntry.RESET;
      ServiceLedgerEntry.SETCURRENTKEY("Service Item No. (Serviced)");
      ServiceLedgerEntry.SETRANGE("Service Item No. (Serviced)",ServiceItemNo);
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        ServiceLedgerEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF NOT ServiceLedgerEntry.ISEMPTY THEN
        EXIT(STRSUBSTNO(Text000,ServiceItem.TABLECAPTION,ServiceItemNo));

      ServiceLedgerEntry.SETRANGE("Posting Date");
      ServiceLedgerEntry.SETRANGE(Open,TRUE);
      IF NOT ServiceLedgerEntry.ISEMPTY THEN
        EXIT(STRSUBSTNO(Text001,ServiceItem.TABLECAPTION,ServiceItemNo));

      ServiceLedgerEntry.SETRANGE(Open);
      EXIT('');
    END;

    LOCAL PROCEDURE CheckGLAccountEntries@12(GLAccount@1000 : Record 15;GeneralLedgerSetup@1002 : Record 98);
    VAR
      GLBudgetEntry@1003 : Record 96;
      ConfirmManagement@1001 : Codeunit 27;
      HasGLEntries@1004 : Boolean;
      HasGLBudgetEntries@1005 : Boolean;
    BEGIN
      IF GLAccount."Account Type" = GLAccount."Account Type"::Posting THEN BEGIN
        GLAccount.CALCFIELDS(Balance);
        GLAccount.TESTFIELD(Balance,0);
      END;

      GLEntry.SETRANGE("G/L Account No.",GLAccount."No.");
      AccountingPeriod.SETRANGE(Closed,FALSE);
      IF AccountingPeriod.FINDFIRST THEN
        GLEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      IF NOT GLEntry.ISEMPTY THEN
        ERROR(CannotDeleteGLAccountWithEntriesInOpenFiscalYearErr,GLAccount."No.");

      AccountingPeriod.SETRANGE(Closed,TRUE);
      IF AccountingPeriod.ISEMPTY THEN
        EXIT;

      GeneralLedgerSetup.TESTFIELD("Allow G/L Acc. Deletion Before");

      GLEntry.SETFILTER("Posting Date",'>=%1',GeneralLedgerSetup."Allow G/L Acc. Deletion Before");

      GLBudgetEntry.LOCKTABLE;
      GLBudgetEntry.SETCURRENTKEY("Budget Name","G/L Account No.",Date);
      GLBudgetEntry.SETRANGE("G/L Account No.",GLAccount."No.");
      GLBudgetEntry.SETFILTER(Date,'>=%1',GeneralLedgerSetup."Allow G/L Acc. Deletion Before");

      HasGLEntries := NOT GLEntry.ISEMPTY;
      HasGLBudgetEntries := GLBudgetEntry.FINDFIRST;

      IF HasGLEntries OR HasGLBudgetEntries THEN BEGIN
        IF ConfirmManagement.ConfirmProcess(GLAccDeleteClosedPeriodsQst,TRUE) THEN
          EXIT;

        IF HasGLEntries THEN
          ERROR(
            CannotDeleteGLAccountWithEntriesAfterDateErr,
            GLAccount."No.",GeneralLedgerSetup."Allow G/L Acc. Deletion Before");
        IF HasGLBudgetEntries THEN
          ERROR(
            CannotDeleteGLBudgetEntriesErr,
            GLAccount."No.",GeneralLedgerSetup."Allow G/L Acc. Deletion Before",GLBudgetEntry."Budget Name");
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMoveGLEntries@14(GLAccount@1000 : Record 15;VAR GLEntry@1001 : Record 17);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMoveCustEntries@15(Customer@1000 : Record 18;VAR CustLedgerEntry@1001 : Record 21;VAR ReminderFinChargeEntry@1002 : Record 300;VAR ServiceLedgerEntry@1003 : Record 5907;VAR WarrantyLedgerEntry@1004 : Record 5908);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMoveVendorEntries@16(Vendor@1000 : Record 23;VAR VendorLedgerEntry@1001 : Record 25;VAR WarrantyLedgerEntry@1002 : Record 5908);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMoveBankAccEntries@17(BankAccount@1000 : Record 270;VAR BankAccountLedgerEntry@1001 : Record 271;VAR CheckLedgerEntry@1002 : Record 272);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMoveItemEntries@18(Item@1000 : Record 27;VAR ItemLedgerEntry@1001 : Record 32;VAR ValueEntry@1002 : Record 5802;VAR ServiceLedgerEntry@1003 : Record 5907;VAR WarrantyLedgerEntry@1004 : Record 5908;VAR InventoryAdjmtEntryOrder@1005 : Record 5896);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMoveResEntries@19(Resource@1000 : Record 156;VAR ResLedgerEntry@1001 : Record 203;VAR ServiceLedgerEntry@1002 : Record 5907;VAR WarrantyLedgerEntry@1003 : Record 5908);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMoveJobEntries@20(Job@1000 : Record 11072003;VAR JobLedgerEntry@1001 : Record 11072005;VAR TimeSheetLine@1002 : Record 951;VAR ServiceLedgerEntry@1003 : Record 5907);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMoveServiceItemLedgerEntries@21(ServiceItem@1000 : Record 5940);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMoveServContractLedgerEntries@22(ServiceContractHeader@1000 : Record 5965);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMoveServiceCostLedgerEntries@23(ServiceCost@1000 : Record 5905);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMoveCashFlowEntries@24(CashFlowAccount@1000 : Record 841);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterMoveDocRelatedEntries@25(TableNo@1001 : Integer;DocNo@1000 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMoveGLEntries@29(GLAccount@1000 : Record 15;VAR GLAccNo@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMoveCustEntries@26(Customer@1000 : Record 18;VAR NewCustNo@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMoveVendEntries@28(Vendor@1000 : Record 23;VAR NewVendNo@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMoveBankAccEntries@32(BankAccount@1000 : Record 270;VAR NewBankAccNo@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMoveItemEntries@33(Item@1000 : Record 27;VAR NewItemNo@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMoveResEntries@40(Resource@1000 : Record 156;VAR NewResNo@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMoveJobEntries@39(Job@1000 : Record 11072003;VAR NewJobNo@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMoveServiceItemLedgerEntries@38(ServiceItem@1000 : Record 5940;VAR NewServiceItemNo@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMoveServContractLedgerEntries@37(ServiceContractHeader@1000 : Record 5965;VAR NewContractNo@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMoveServiceCostLedgerEntries@36(ServiceCost@1000 : Record 5905;VAR NewCostCode@1001 : Code[10]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMoveCashFlowEntries@35(CashFlowAccount@1000 : Record 841;VAR NewAccountNo@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMoveDocRelatedEntries@34(TableNo@1001 : Integer;DocNo@1000 : Code[20]);
    BEGIN
    END;

    PROCEDURE RemoveJobEntries@1210190000(JobRec@1210190000 : Record 11072003);
    BEGIN
      //**4PS
      IF JobRec."No." = '' THEN EXIT;

      JobLedgEntry.RESET;
      JobLedgEntry.SETCURRENTKEY("Job No.");
      JobLedgEntry.SETRANGE("Job No.", JobRec."No.");
      JobLedgEntry.DELETEALL(TRUE);
    END;

    PROCEDURE RemoveServOrderEntries@1210190001(ServOrderRec@1210190000 : Record 11012823);
    VAR
      ServLedgerEntry@1100525000 : Record 11012819;
    BEGIN
      //**4PS
      IF ServOrderRec."No." = '' THEN EXIT;

      ServLedgerEntry.RESET;
      ServLedgerEntry.SETCURRENTKEY("Service Order No.");
      ServLedgerEntry.SETRANGE("Service Order No.", ServOrderRec."No.");
      ServLedgerEntry.DELETEALL(TRUE);  //db, 23-06-09: M15030

      JobLedgEntry.RESET;
      JobLedgEntry.SETCURRENTKEY("Service Order No.", "Service Contract No.", "Posting Date");
      JobLedgEntry.SETRANGE("Service Order No.", ServOrderRec."No.");
      JobLedgEntry.DELETEALL(TRUE);
    END;

    PROCEDURE RemoveServContractEntries@1210190002(ServContrRec@1210190000 : Record 11012812);
    VAR
      ServLedgerEntry@1100525000 : Record 11012819;
    BEGIN
      //**4PS
      IF ServContrRec."No." = '' THEN EXIT;

      ServLedgerEntry.RESET;
      ServLedgerEntry.SETCURRENTKEY("Service Contract No.");
      ServLedgerEntry.SETRANGE("Service Contract No.", ServContrRec."No.");
      ServLedgerEntry.DELETEALL(TRUE);  //db, 23-06-09: M15030

      JobLedgEntry.RESET;
      JobLedgEntry.SETCURRENTKEY("Service Order No.", "Service Contract No.", "Posting Date");
      JobLedgEntry.SETRANGE("Service Contract No.", ServContrRec."No.");
      JobLedgEntry.DELETEALL(TRUE);
    END;

    PROCEDURE SetCompanyCentralDataMgt@1210190003(CompNameNew@1210190000 : Text[80]);
    BEGIN
      //**4PS
      CompName := CompNameNew;
      AccountingPeriod.CHANGECOMPANY(CompName);
      GLEntry.CHANGECOMPANY(CompName);
      CustLedgEntry.CHANGECOMPANY(CompName);
      VendLedgEntry.CHANGECOMPANY(CompName);
      ItemLedgEntry.CHANGECOMPANY(CompName);
      ReminderEntry.CHANGECOMPANY(CompName);
      ValueEntry.CHANGECOMPANY(CompName);
      AvgCostAdjmt.CHANGECOMPANY(CompName);
      WarrantyLedgEntry.CHANGECOMPANY(CompName);
    END;

    BEGIN
    END.
  }
}

