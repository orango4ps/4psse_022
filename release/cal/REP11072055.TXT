OBJECT Report 11072055 Add Contacts
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00 (5198);
  }
  PROPERTIES
  {
    CaptionML=[DEU=Kontakte hinzufÅgen;
               ENU=Add Contacts;
               NLD=Contacten toevoegen;
               NOR=Legg til kontakter;
               SVE=LÑgg till kontakter];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  ItemFilters := "Value Entry".HASFILTER;
                  CustomerFilters := Customer.HASFILTER;

                  SegCriteriaManagement.InsertCriteriaAction(
                    "Segment Header".GETFILTER("No."),REPORT::"Add Contacts",
                    AllowExistingContact,ExpandCompanies,AllowCoRepdByContPerson,IgnoreExclusion,FALSE);
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::Contact,
                    Contact.GETFILTERS,Contact.GETVIEW(FALSE));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Contact Profile Answer",
                    "Contact Profile Answer".GETFILTERS,"Contact Profile Answer".GETVIEW(FALSE));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Contact Mailing Group",
                    "Contact Mailing Group".GETFILTERS,"Contact Mailing Group".GETVIEW(FALSE));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Interaction Log Entry",
                    "Interaction Log Entry".GETFILTERS,"Interaction Log Entry".GETVIEW(FALSE));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Contact Job Responsibility","Contact Job Responsibility".GETFILTERS,
                    "Contact Job Responsibility".GETVIEW(FALSE));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Contact Industry Group",
                    "Contact Industry Group".GETFILTERS,"Contact Industry Group".GETVIEW(FALSE));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Contact Business Relation",
                    "Contact Business Relation".GETFILTERS,"Contact Business Relation".GETVIEW(FALSE));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Value Entry",
                    "Value Entry".GETFILTERS,"Value Entry".GETVIEW(FALSE));

                  //**4PS.sn
                  RentalPackageFilters := "Rental Package".HASFILTER;

                  IF PlotBuyer2View <> '' THEN
                    PLotBuyer2.SETVIEW(PlotBuyer2View);
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::Plot,
                    Plot.GETFILTERS,Plot.GETVIEW(FALSE));
                  SegCriteriaManagement.InsertCriteriaFilter4PS(
                    "Segment Header".GETFILTER("No."),DATABASE::Plot,
                    PLotBuyer2.GETFILTERS,PLotBuyer2.GETVIEW(FALSE),TRUE);
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Project Authority",
                    "Project Authority".GETFILTERS,"Project Authority".GETVIEW(FALSE));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Rental Package",
                    "Rental Package".GETFILTERS,"Rental Package".GETVIEW(FALSE));
                  //**4PS.en
                END;

    OnPostReport=BEGIN
                   IF ExpandCompanies THEN
                     AddPeople;
                   IF AllowCoRepdByContPerson THEN
                     AddCompanies;

                   UpdateSegLines;
                 END;

  }
  DATASET
  {
    { 7133;    ;DataItem;                    ;
               DataItemTable=Table11072039;
               DataItemTableView=SORTING(No.) }

    { 6698;    ;DataItem;                    ;
               DataItemTable=Table5050;
               DataItemTableView=SORTING(No.)
                                 WHERE(Blocked=CONST(No));
               OnAfterGetRecord=BEGIN
                                  RecordNo := RecordNo + 1;
                                  IF RecordNo = 1 THEN BEGIN
                                    Window.OPEN(Text000);
                                    NoOfRecords := COUNT;
                                    OldDateTime := CURRENTDATETIME;
                                  END;
                                  NewDateTime := CURRENTDATETIME;
                                  IF (NewDateTime - OldDateTime > 100) OR (NewDateTime < OldDateTime) THEN BEGIN
                                    NewProgress := ROUND(RecordNo / NoOfRecords * 100,1);
                                    IF NewProgress <> OldProgress THEN BEGIN
                                      Window.UPDATE(1,NewProgress * 100);
                                      OldProgress := NewProgress;
                                    END;
                                    OldDateTime := CURRENTDATETIME;
                                  END;

                                  ContactOK := TRUE;
                                END;

               ReqFilterFields=No.,Search Name,Type,Salesperson Code,Post Code,Country/Region Code,Territory Code }

    { 3762;1   ;DataItem;                    ;
               DataItemTable=Table5089;
               DataItemTableView=SORTING(Contact No.,Profile Questionnaire Code,Line No.);
               OnPreDataItem=BEGIN
                               IF ContactOK AND (GETFILTERS <> '') THEN
                                 ContactOK := FALSE
                               ELSE
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  ContactOK := TRUE;
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields=Profile Questionnaire Code,Line No.;
               DataItemLink=Contact No.=FIELD(No.) }

    { 6043;1   ;DataItem;                    ;
               DataItemTable=Table5056;
               DataItemTableView=SORTING(Contact No.,Mailing Group Code);
               OnPreDataItem=BEGIN
                               IF ContactOK AND (GETFILTERS <> '') THEN
                                 ContactOK := FALSE
                               ELSE
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  ContactOK := TRUE;
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields=Mailing Group Code;
               DataItemLink=Contact No.=FIELD(No.) }

    { 3056;1   ;DataItem;                    ;
               DataItemTable=Table11072027;
               DataItemTableView=SORTING(Contact Company No.,Contact No.,Date);
               OnPreDataItem=BEGIN
                               IF ContactOK AND (GETFILTERS <> '') THEN
                                 ContactOK := FALSE
                               ELSE
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  ContactOK := TRUE;
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields=Date,Segment No.,Campaign No.,Evaluation,Interaction Template Code,Salesperson Code;
               DataItemLink=Contact Company No.=FIELD(Company No.),
                            Contact No.=FIELD(No.) }

    { 6030;1   ;DataItem;                    ;
               DataItemTable=Table5067;
               DataItemTableView=SORTING(Contact No.,Job Responsibility Code);
               OnPreDataItem=BEGIN
                               IF ContactOK AND (GETFILTERS <> '') THEN
                                 ContactOK := FALSE
                               ELSE
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  ContactOK := TRUE;
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields=Job Responsibility Code;
               DataItemLink=Contact No.=FIELD(No.) }

    { 4008;1   ;DataItem;                    ;
               DataItemTable=Table5058;
               DataItemTableView=SORTING(Contact No.,Industry Group Code);
               OnPreDataItem=BEGIN
                               IF ContactOK AND (GETFILTERS <> '') THEN
                                 ContactOK := FALSE
                               ELSE
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  ContactOK := TRUE;
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields=Industry Group Code;
               DataItemLink=Contact No.=FIELD(Company No.) }

    { 8768;1   ;DataItem;                    ;
               DataItemTable=Table5054;
               DataItemTableView=SORTING(Contact No.,Business Relation Code);
               OnPreDataItem=BEGIN
                               IF ContactOK AND ((GETFILTERS <> '') OR ItemFilters OR CustomerFilters) THEN
                                 ContactOK := FALSE
                               ELSE
                                 CurrReport.BREAK;

                               //**4PS.sn
                               FILTERGROUP(6);
                               IF (Contact.Type = Contact.Type::Person) AND (Contact."Company Name" = '') THEN
                                 SETRANGE("Contact No.", Contact."No.")
                               ELSE
                                 SETRANGE("Contact No.", Contact."Company No.");
                               FILTERGROUP(0);
                               //**4PS.en
                             END;

               OnAfterGetRecord=BEGIN
                                  IF NOT (ItemFilters OR CustomerFilters) THEN BEGIN
                                    ContactOK := TRUE;
                                    CurrReport.BREAK;
                                  END;
                                END;

               ReqFilterFields=Business Relation Code }

    { 8894;2   ;DataItem;                    ;
               DataItemTable=Table5802;
               DataItemTableView=SORTING(Source Type,Source No.,Item No.,Posting Date);
               OnPreDataItem=BEGIN
                               IF NOT ItemFilters THEN
                                 CurrReport.BREAK;

                               CASE "Contact Business Relation"."Link to Table" OF
                                 "Contact Business Relation"."Link to Table"::Customer:
                                   BEGIN
                                     SETRANGE("Source Type","Source Type"::Customer);
                                     SETRANGE("Source No.","Contact Business Relation"."No.");
                                   END;
                                 "Contact Business Relation"."Link to Table"::Vendor:
                                   BEGIN
                                     SETRANGE("Source Type","Source Type"::Vendor);
                                     SETRANGE("Source No.","Contact Business Relation"."No.");
                                   END
                                 ELSE
                                   CurrReport.BREAK;
                               END;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Contact.Type = Contact.Type::Person THEN
                                    ContactOK := FindContInPostDocuments(Contact."No.","Value Entry")
                                  ELSE
                                    ContactOK := TRUE;

                                  IF ContactOK THEN
                                    CurrReport.BREAK;
                                END;

               ReqFilterFields=Item No.,Variant Code,Posting Date,Inventory Posting Group }

    { 1100525003;2;DataItem;                 ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               //**4PS
                               IF NOT CustomerFilters THEN
                                 CurrReport.BREAK;

                               IF ItemFilters AND NOT ContactOK THEN
                                 CurrReport.BREAK //s al afgekeurd bij de value entries
                               ELSE
                                 ContactOK := FALSE; //Reset, want kan in Value Entry op TRUE zij gezet, maar beide moeten waar zijn.

                               CASE "Contact Business Relation"."Link to Table" OF
                                 "Contact Business Relation"."Link to Table"::Customer:
                                   BEGIN
                                     SETRANGE("No.","Contact Business Relation"."No.");
                                   END;
                                 ELSE
                                   CurrReport.BREAK;
                               END;
                             END;

               OnAfterGetRecord=BEGIN
                                  //**4PS
                                  ContactOK := TRUE;
                                  CurrReport.BREAK;
                                END;
                                 }

    { 1100525001;1;DataItem;                 ;
               DataItemTable=Table11012500;
               OnPreDataItem=BEGIN
                               //**4PS
                               IF ContactOK AND (GETFILTERS<>'') THEN
                                 ContactOK := FALSE
                               ELSE
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  //**4PS
                                  ContactOK := TRUE;
                                  Contact."Project No." := "Project No.";
                                  Contact."Plot No." := "Plot No.";
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields=Project No.,Plot No.;
               DataItemLink=Buyer=FIELD(No.) }

    { 1100525002;1;DataItem;PLotBuyer2       ;
               DataItemTable=Table11012500;
               ReqFilterHeadingML=[DEU=GrundstÅck (Zweiter KÑufer);
                                   ENU=Plot (Second Buyer);
                                   NLD=Bouwnummer (tweede koper)];
               OnPreDataItem=BEGIN
                               //**4PS
                               IF PlotBuyer2View <> '' THEN
                                 SETVIEW(PlotBuyer2View);
                               IF ContactOK AND (GETFILTERS<>'') THEN
                                 ContactOK := FALSE
                               ELSE
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  //**4PS
                                  ContactOK := TRUE;
                                  Contact."Project No." := "Project No.";
                                  Contact."Plot No." := "Plot No.";
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields=Project No.,Plot No.;
               DataItemLink=Second Buyer=FIELD(No.) }

    { 1100525000;1;DataItem;                 ;
               DataItemTable=Table11020216;
               DataItemTableView=SORTING(Contact No.);
               OnPreDataItem=BEGIN
                               //**4PS
                               FILTERGROUP(4);
                               IF Contact.IsContactPerson THEN BEGIN
                                 SETRANGE("Contact No.");
                                 SETRANGE("Contact Person No.", Contact."No.");
                               END ELSE BEGIN
                                 SETRANGE("Contact No.", Contact."No.");
                                 SETRANGE("Contact Person No.");
                               END;
                               FILTERGROUP(0);

                               IF ContactOK AND (GETFILTERS<>'') THEN
                                 ContactOK := FALSE
                               ELSE
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  //**4PS
                                  ContactOK := TRUE;
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields=Project No. }

    { 1100529600;1;DataItem;RentalPackageContBusRelation;
               DataItemTable=Table5054;
               DataItemTableView=SORTING(Contact No.,Business Relation Code)
                                 WHERE(Link to Table=CONST(Customer),
                                       No.=FILTER(<>''));
               OnPreDataItem=BEGIN
                               //**4PS
                               IF ContactOK AND RentalPackageFilters THEN
                                 ContactOK := FALSE
                               ELSE
                                 CurrReport.BREAK;
                             END;

               DataItemLink=Contact No.=FIELD(No.) }

    { 1100529601;2;DataItem;                 ;
               DataItemTable=Table11012941;
               DataItemTableView=SORTING(Project No.,Rental Unit,Starting Date)
                                 WHERE(Status=CONST(Active));
               OnPreDataItem=BEGIN
                               //**4PS
                               IF ContactOK AND RentalPackageFilters THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  //**4PS
                                  ContactOK := TRUE;
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields=Project No.,Rental Unit,Starting Date,Customer No.;
               DataItemLink=Customer No.=FIELD(No.) }

    { 5444;1   ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnAfterGetRecord=BEGIN
                                  IF ContactOK THEN
                                    InsertContact(Contact);
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   PlotBuyer2View := ''; //**4PS.n
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 3   ;2   ;Field     ;
                  CaptionML=[DEU=Bestehende Kontakte zulassen;
                             ENU=Allow Existing Contacts;
                             NLD=Bestaande contacten toestaan;
                             NOR=Tillat Eksisterende kontakter;
                             SVE=TillÜt existerande kontakter];
                  ToolTipML=[DEU=Zeigt an, ob bestehende Kontakte in das Segment eingeschlossen sind.;
                             ENU=Specifies if existing contacts are included in the segment.;
                             NLD=Hiermee wordt opgegeven of bestaande contacten worden opgenomen in het segment.;
                             NOR=Angir om eksisterende kontakter blir inkludert i segmentet.;
                             SVE=Anger om befintliga kontakter inkluderas i segmentet.];
                  ApplicationArea=#RelationshipMgmt;
                  SourceExpr=AllowExistingContact }

      { 1   ;2   ;Field     ;
                  CaptionML=[DEU=Unternehmen erweitern;
                             ENU=Expand Companies;
                             NLD=Bedrijven uitbreiden;
                             NOR=Ekspander selskaper;
                             SVE=Expandera fîretag];
                  ToolTipML=[DEU=Legt fest, wenn alle Personenkontakte in das Segment aufgenommen werden sollen, die fÅr das zum Segment hinzuzufÅgende Unternehmen arbeiten.;
                             ENU=Specifies if you want the segment to include all person contacts who are working for the company that you want to add to the segment.;
                             NLD=Hiermee wordt opgegeven of u alle contactpersonen in het segment wilt opnemen die werken voor het bedrijf dat u aan het segment wilt toevoegen.;
                             NOR=Angir om du vil at segmentet skal inkludere alle personkontakter som arbeider for selskapet, som du vil legge til i segmentet.;
                             SVE=Anger om du vill att segmentet ska omfatta alla personkontakter som arbetar fîr det fîretag som du vill lÑgga till i segmentet.];
                  ApplicationArea=#RelationshipMgmt;
                  SourceExpr=ExpandCompanies }

      { 5   ;2   ;Field     ;
                  Name=AllowRelatedCompaines;
                  CaptionML=[DEU=VerknÅpfte Unternehmen zulassen;
                             ENU=Allow Related Companies;
                             NLD=Verwante bedrijven toestaan;
                             NOR=Tillat Relaterte selskaper;
                             SVE=TillÜt relaterade fîretag];
                  ToolTipML=[DEU=Legt fest, ob von Personenkontakten reprÑsentierte Unternehmen im Segment enthalten sind.;
                             ENU=Specifies if companies represented by person contacts are included in the segment.;
                             NLD=Hiermee wordt opgegeven of bedrijven die worden vertegenwoordigd door contactpersonen worden opgenomen in het segment.;
                             NOR=Angir om firmaer som er representert av personkontakter, blir inkludert i segmentet.;
                             SVE=Anger om fîretagen som representeras av personkontakterna inkluderas i segmentet.];
                  ApplicationArea=#RelationshipMgmt;
                  SourceExpr=AllowCoRepdByContPerson;
                  Importance=Additional;
                  MultiLine=Yes }

      { 7   ;2   ;Field     ;
                  CaptionML=[DEU=AusschlÅsse ignorieren;
                             ENU=Ignore Exclusion;
                             NLD=Uitsluiting negeren;
                             NOR=Ignorer Ekskludering;
                             SVE=Ignorera uteslutning];
                  ToolTipML=[DEU=Legt fest, ob Kontakte ausgeschlossen werden, fÅr die auf der Kontaktkarte das Feld "Nicht segmentieren" ausgewÑhlt wurde.;
                             ENU=Specifies if contacts are excluded for which the Exclude from Segment field has been selected on the contact card.;
                             NLD=Hiermee wordt opgegeven of contacten worden uitgesloten waarvoor het veld Van segment uitsluiten is geselecteerd op de contactkaart.;
                             NOR=Angir om kontakter blir utelatt som feltet Utelat fra segment pÜ kontaktkortet er valgt for pÜ kontaktkortet.;
                             SVE=Anger om kontakter fîr vilka Exkludera frÜn segment har markerats pÜ kontaktkortet ska exkluderas.];
                  ApplicationArea=#RelationshipMgmt;
                  SourceExpr=IgnoreExclusion;
                  Importance=Additional }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Kontakte werden hinzugefÅgt @1@@@@@@@@@@@@@;ENU=Inserting contacts @1@@@@@@@@@@@@@;NLD=Invoegen contacten @1@@@@@@@@@@@@@;NOR=Setter inn kontakter  @1@@@@@@@@@@@@@;SVE=Infogar kontakter  @1@@@@@@@@@@@@@';
      TempCont@1001 : TEMPORARY Record 5050;
      TempCont2@1002 : TEMPORARY Record 5050;
      Cont@1003 : Record 5050;
      SegLine@1004 : Record 11072040;
      SegmentHistoryMgt@1005 : Codeunit 11072024;
      SegCriteriaManagement@1006 : Codeunit 11072025;
      Window@1015 : Dialog;
      NextLineNo@1007 : Integer;
      ItemFilters@1008 : Boolean;
      CustomerFilters@1100525000 : Boolean;
      ContactOK@1009 : Boolean;
      AllowExistingContact@1010 : Boolean;
      ExpandCompanies@1011 : Boolean;
      AllowCoRepdByContPerson@1012 : Boolean;
      IgnoreExclusion@1013 : Boolean;
      RentalPackageFilters@1100529601 : Boolean;
      NoOfRecords@1016 : Integer;
      RecordNo@1017 : Integer;
      OldDateTime@1018 : DateTime;
      NewDateTime@1019 : DateTime;
      OldProgress@1020 : Integer;
      NewProgress@1021 : Integer;
      PlotBuyer2View@1100529600 : Text;

    [External]
    PROCEDURE SetOptions@4(OptionAllowExistingContact@1000 : Boolean;OptionExpandCompanies@1001 : Boolean;OptionAllowCoRepdByContPerson@1002 : Boolean;OptionIgnoreExclusion@1003 : Boolean);
    BEGIN
      AllowExistingContact := OptionAllowExistingContact;
      ExpandCompanies := OptionExpandCompanies;
      AllowCoRepdByContPerson := OptionAllowCoRepdByContPerson;
      IgnoreExclusion := OptionIgnoreExclusion;
    END;

    LOCAL PROCEDURE InsertContact@9(VAR CheckedCont@1000 : Record 5050);
    BEGIN
      TempCont := CheckedCont;
      IF TempCont.INSERT THEN;
    END;

    LOCAL PROCEDURE AddCompanies@6();
    BEGIN
      TempCont.RESET;
      IF TempCont.FIND('-') THEN
        REPEAT
          TempCont2 := TempCont;
          IF TempCont2.INSERT THEN;
          IF TempCont."Company No." <> '' THEN BEGIN
            Cont.GET(TempCont."Company No.");
            TempCont2 := Cont;
            IF TempCont2.INSERT THEN;
          END;
        UNTIL TempCont.NEXT = 0;

      TempCont.DELETEALL;
      IF TempCont2.FIND('-') THEN
        REPEAT
          TempCont := TempCont2;
          TempCont.INSERT;
        UNTIL TempCont2.NEXT = 0;
      TempCont2.DELETEALL;
    END;

    LOCAL PROCEDURE AddPeople@2();
    BEGIN
      TempCont.RESET;
      IF TempCont.FIND('-') THEN
        REPEAT
          IF TempCont."Company No." <> '' THEN BEGIN
            Cont.SETCURRENTKEY("Company No.");
            Cont.SETRANGE("Company No.",TempCont."Company No.");
            IF Cont.FINDSET THEN
              REPEAT
                TempCont2 := Cont;
                IF TempCont2.INSERT THEN;
              UNTIL Cont.NEXT = 0
          END ELSE BEGIN
            TempCont2 := TempCont;
            TempCont2.INSERT;
          END;
        UNTIL TempCont.NEXT = 0;

      TempCont.DELETEALL;
      IF TempCont2.FIND('-') THEN
        REPEAT
          TempCont := TempCont2;
          TempCont.INSERT;
        UNTIL TempCont2.NEXT = 0;
      TempCont2.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateSegLines@1();
    VAR
      Delivery@1100527300 : Record 11012507;
    BEGIN
      SegLine.SETRANGE("Segment No.","Segment Header"."No.");
      IF SegLine.FINDLAST THEN
        NextLineNo := SegLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      TempCont.RESET;
      TempCont.SETCURRENTKEY("Company Name","Company No.",Type,Name);
      IF NOT IgnoreExclusion THEN
        TempCont.SETRANGE("Exclude from Segment",FALSE);
      IF TempCont.FIND('-') THEN
        REPEAT
          ContactOK := TRUE;
          IF NOT AllowExistingContact THEN BEGIN
            SegLine.SETCURRENTKEY("Contact No.","Segment No.");
            SegLine.SETRANGE("Contact No.",TempCont."No.");
            SegLine.SETRANGE("Segment No.","Segment Header"."No.");
            IF SegLine.FINDFIRST THEN
              ContactOK := FALSE;
          END;

          OnBeforeInsertSegmentLine(
            TempCont,AllowExistingContact,ExpandCompanies,AllowCoRepdByContPerson,IgnoreExclusion,ContactOK);

          IF ContactOK THEN BEGIN
            //**4PS.sn
            Delivery.SETRANGE("Project No.", TempCont."Project No.");
            Delivery.SETRANGE("Plot No.", TempCont."Plot No.");
            IF Delivery.FINDSET AND (TempCont."Plot No." <> '') AND (TempCont."Plot No." <> '') THEN BEGIN
              REPEAT
                SegLine.INIT;
                SegLine."Line No." := NextLineNo;
                SegLine.VALIDATE("Segment No.", "Segment Header"."No.");
                SegLine.VALIDATE("Contact No.", TempCont."No.");
                SegLine."Project No." := TempCont."Project No.";
                SegLine."Plot No." := TempCont."Plot No.";
                SegLine."Delivery No." := Delivery."Delivery No.";
                SegLine.INSERT(TRUE);
                SegmentHistoryMgt.InsertLine(
                  SegLine."Segment No.", SegLine."Contact No.", SegLine."Line No.");
                NextLineNo := SegLine."Line No." + 10000;
              UNTIL (Delivery.NEXT = 0) OR (NOT AllowExistingContact);
            END ELSE BEGIN
            //**4PS.en
              SegLine.INIT;
              SegLine."Line No." := NextLineNo;
              SegLine.VALIDATE("Segment No.","Segment Header"."No.");
              SegLine.VALIDATE("Contact No.",TempCont."No.");
              //**4PS.sn
              SegLine."Project No." := TempCont."Project No.";
              SegLine."Plot No." := TempCont."Plot No.";
              //**4PS.en
              SegLine.INSERT(TRUE);
              SegmentHistoryMgt.InsertLine(
                SegLine."Segment No.",SegLine."Contact No.",SegLine."Line No.");
              NextLineNo := SegLine."Line No." + 10000;
            END;
          END;
        UNTIL TempCont.NEXT = 0;
    END;

    LOCAL PROCEDURE FindContInPostDocuments@5(ContactNo@1000 : Code[20];ValueEntry@1002 : Record 5802) : Boolean;
    VAR
      SalesShptHeader@1005 : Record 110;
      SalesInvHeader@1004 : Record 112;
      ReturnRcptHeader@1003 : Record 6660;
      SalesCrMemoHeader@1001 : Record 114;
      PurchRcptHeader@1009 : Record 120;
      PurchInvHeader@1008 : Record 122;
      ReturnShptHeader@1007 : Record 6650;
      PurchCrMemoHeader@1006 : Record 124;
    BEGIN
      WITH ValueEntry DO
        CASE "Source Type" OF
          "Source Type"::Customer:
            BEGIN
              IF SalesInvHeader.READPERMISSION THEN
                IF SalesInvHeader.GET("Document No.") THEN
                  IF (SalesInvHeader."Sell-to Contact No." = ContactNo) OR
                     (SalesInvHeader."Bill-to Contact No." = ContactNo)
                  THEN
                    EXIT(TRUE);
              IF SalesShptHeader.READPERMISSION THEN
                IF SalesShptHeader.GET("Document No.") THEN
                  IF (SalesShptHeader."Sell-to Contact No." = ContactNo) OR
                     (SalesShptHeader."Bill-to Contact No." = ContactNo)
                  THEN
                    EXIT(TRUE);
              IF SalesCrMemoHeader.READPERMISSION THEN
                IF SalesCrMemoHeader.GET("Document No.") THEN
                  IF (SalesCrMemoHeader."Sell-to Contact No." = ContactNo) OR
                     (SalesCrMemoHeader."Bill-to Contact No." = ContactNo)
                  THEN
                    EXIT(TRUE);
              IF ReturnRcptHeader.READPERMISSION THEN
                IF ReturnRcptHeader.GET("Document No.") THEN
                  IF (ReturnRcptHeader."Sell-to Contact No." = ContactNo) OR
                     (ReturnRcptHeader."Bill-to Contact No." = ContactNo)
                  THEN
                    EXIT(TRUE);
            END;
          "Source Type"::Vendor:
            BEGIN
              IF PurchInvHeader.READPERMISSION THEN
                IF PurchInvHeader.GET("Document No.") THEN
                  IF (PurchInvHeader."Buy-from Contact No." = ContactNo) OR
                     (PurchInvHeader."Pay-to Contact No." = ContactNo)
                  THEN
                    EXIT(TRUE);
              IF ReturnShptHeader.READPERMISSION THEN
                IF ReturnShptHeader.GET("Document No.") THEN
                  IF (ReturnShptHeader."Buy-from Contact No." = ContactNo) OR
                     (ReturnShptHeader."Pay-to Contact No." = ContactNo)
                  THEN
                    EXIT(TRUE);
              IF PurchCrMemoHeader.READPERMISSION THEN
                IF PurchCrMemoHeader.GET("Document No.") THEN
                  IF (PurchCrMemoHeader."Buy-from Contact No." = ContactNo) OR
                     (PurchCrMemoHeader."Pay-to Contact No." = ContactNo)
                  THEN
                    EXIT(TRUE);
              IF PurchRcptHeader.READPERMISSION THEN
                IF PurchRcptHeader.GET("Document No.") THEN
                  IF (PurchRcptHeader."Buy-from Contact No." = ContactNo) OR
                     (PurchRcptHeader."Pay-to Contact no." = ContactNo)
                  THEN
                    EXIT(TRUE);
            END;
        END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertSegmentLine@3(VAR TempContact@1000 : TEMPORARY Record 5050;AllowExistingContact@1001 : Boolean;ExpandCompanies@1002 : Boolean;AllowCoRepdByContPerson@1003 : Boolean;IgnoreExclusion@1004 : Boolean;VAR ContactOK@1005 : Boolean);
    BEGIN
    END;

    PROCEDURE SetPlotBuyer2View@1100529600(PlotBuyer2ViewNew@1100529600 : Text);
    BEGIN
      //**4PS
      PlotBuyer2View := PlotBuyer2ViewNew;
    END;

    BEGIN
    {
      16-11-2004 The ReqFilterFields for Data Item Plot are removed, because customers who's license does
                 not contain this table will not be able to use this function.
                 Also the Sorting of Plot is Removed, otherwise the tab Plot will not show up.

      ∏ 4PS 2004
    }
    END.
  }
  RDLDATA
  {
  }
}

