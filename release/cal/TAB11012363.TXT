OBJECT Table 11012363 Site Mngmnt. Proj.Hours Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               lvHourLine@1100525000 : Record 11012363;
             BEGIN
               CheckIfReleased;
               IF Type <> Type::UnmannedPlant THEN
                 TESTFIELD("Employee No.");
               IF "Employee No." <> '' THEN                            // Needed for copy/paste, then no validate is done (copy hours from a
                 EmployeesRec.GET("Supplying Company","Employee No."); // previous week, if employee became inactive then no longer in table)


               IF SiteMngmntHoursSetup.GET THEN
                 SiteMngmntHoursSetup.CheckPostedHoursLine(Year,Week,"Employee No.","Supplying Company");

               //*DP0003.sn
               //* In the (sub)form Autosplit is on but there can be a problem because there can be a filter on the lines.
               //* Then autosplit does work properly (because only lines on form taken into account).
               //* Now with a filter on Shift Code (if called from Site Man. Form) the problem is even bigger.
               //* Therefore if autom. determined line number already exist then determine a free one here
               IF "Line No." <> 0 THEN BEGIN
                 IF lvHourLine.GET(Year,Week,"Receiving Company","Project No.","Line No.") THEN BEGIN
                   lvHourLine.SETRANGE(Year,Year);
                   lvHourLine.SETRANGE(Week,Week);
                   lvHourLine.SETRANGE("Receiving Company","Receiving Company");
                   lvHourLine.SETRANGE("Project No.","Project No.");
                   IF lvHourLine.NEXT = 0 THEN
                     "Line No." := 0  //* Then first free line number wil be determined below (line inserted at the end)
                   ELSE BEGIN
                     IF lvHourLine."Line No." = "Line No." + 1 THEN
                       "Line No." := 0  //* Then first free line number wil be determined below (line inserted at the end)
                     ELSE
                       "Line No." := "Line No." + ((lvHourLine."Line No." - "Line No.") DIV 2);
                   END;
                 END;
               END;
               //*DP003.en
               IF "Line No." = 0 THEN BEGIN
                 lvHourLine.RESET;
                 lvHourLine.SETRANGE(Year,Year);
                 lvHourLine.SETRANGE(Week,Week);
                 lvHourLine.SETRANGE("Receiving Company","Receiving Company");
                 lvHourLine.SETRANGE("Project No.","Project No.");
                 IF lvHourLine.FINDLAST THEN
                   "Line No." := lvHourLine."Line No." + 10000
                 ELSE
                   "Line No." := 10000;
               END;
               FillDocNoPostingDate;
               CheckResetOnComponentType();  //*C-027136
               UpdateHourLine(UpdateAction::Insert);
               HourProjHeader.GET(Year,Week,"Receiving Company","Project No.");
               "Document No." := HourProjHeader."Document No.";
               HourProjHeader.MODIFY(TRUE);
             END;

    OnModify=BEGIN
               CheckIfReleased;
               IF SiteMngmntHoursSetup.GET THEN
                 SiteMngmntHoursSetup.CheckPostedHoursLine(Year,Week,"Employee No.","Supplying Company");

               CheckResetOnComponentType();  //*C-027136
               CheckDeleteUnmandPlantHourLine(UpdateAction::Modify);
               UpdateHourLine(UpdateAction::Modify);
               IF HourProjHeader.GET(Year,Week,"Receiving Company","Project No.") THEN
                 HourProjHeader.MODIFY(TRUE);
             END;

    OnDelete=BEGIN
               CheckDeleteUnmandPlantHourLine(UpdateAction::Delete);
               UpdateHourLine(UpdateAction::Delete);
             END;

    OnRename=BEGIN
               UpdateHourLine(UpdateAction::Rename);
             END;

    CaptionML=[ENU=Site Mngmnt. Proj.Hours Line;
               NOR=Prosjekttimerad for byggeldelse;
               SVE=Byggledning Rad fîr proj.tim.];
  }
  FIELDS
  {
    { 20  ;   ;Year                ;Integer       ;CaptionML=[ENU=Year;
                                                              NOR=èr;
                                                              SVE=èr];
                                                   MinValue=1 }
    { 30  ;   ;Week                ;Integer       ;CaptionML=[ENU=Week;
                                                              NOR=Uke;
                                                              SVE=Vecka];
                                                   MinValue=1;
                                                   MaxValue=53 }
    { 35  ;   ;Project No.         ;Code20        ;TableRelation="Site Mngmnt. Hours Objects".Code WHERE (Type=CONST(Project),
                                                                                                          Company=FIELD(Supplying Company));
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr] }
    { 39  ;   ;Supplying Company   ;Text50        ;TableRelation="Site Mngmnt. Hours Companies".Company;
                                                   OnValidate=BEGIN
                                                                IF Type = Type::UnmannedPlant THEN
                                                                  TESTFIELD("Supplying Company", "Plant Company");

                                                                IF "Supplying Company" <> xRec."Supplying Company" THEN BEGIN
                                                                  "Employee No." := '';
                                                                  "Cost Object" := '';
                                                                  IF Type <> Type::Indirect THEN BEGIN  //*27119.n
                                                                    "Wage Component" := '';
                                                                    "Component Type" :=  "Component Type"::Hours;
                                                                  END;
                                                                  //"Cost Code Description" := '';
                                                                  "Name Employee" := '';
                                                                  "Description Cost Object" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Supplying Company (Employee);
                                                              NOR=Leverende selskap (ansatt);
                                                              SVE=Levererande fîretag (anstÑlld)] }
    { 40  ;   ;Employee No.        ;Code20        ;TableRelation="Site Mngmnt. Hours Employee".No.;
                                                   OnValidate=VAR
                                                                EmployeeRec@1100485001 : Record 11012357;
                                                                ProjHrEmplSel@1210190000 : Record 11126058;
                                                                EmployeeFrm@1100485000 : Page 11072212;
                                                                ValidateFromLookupEmpl@1100525000 : Boolean;
                                                              BEGIN
                                                                IF FromLookupEmpl THEN BEGIN
                                                                  FromLookupEmpl := FALSE;
                                                                  ValidateFromLookupEmpl := TRUE;
                                                                END;
                                                                IF Type = Type::UnmannedPlant THEN BEGIN
                                                                  TESTFIELD("Employee No.", '');
                                                                  EXIT;
                                                                END;

                                                                IF "Employee No." <> '' THEN BEGIN
                                                                  SiteMngmntHoursSetup.GET;
                                                                  IF NOT ValidateFromLookupEmpl THEN BEGIN
                                                                    IF (NOT SiteMngmntHoursSetup."Sel. Empl./Codes by Proj./Wk") THEN BEGIN
                                                                      CLEAR(EmployeeFrm);
                                                                      EmployeeRec.SETCURRENTKEY("No.");
                                                                      EmployeeRec.SETRANGE("No.","Employee No.");
                                                                      IF EmployeeRec.COUNT > 1 THEN BEGIN
                                                                        EmployeeFrm.LOOKUPMODE(TRUE);
                                                                        EmployeeFrm.SETTABLEVIEW(EmployeeRec);
                                                                        IF EmployeeFrm.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                          EmployeeFrm.GETRECORD(EmployeeRec);
                                                                          "Supplying Company" := EmployeeRec.Company;
                                                                          "Employee No." := EmployeeRec."No.";
                                                                          "Name Employee" := EmployeeRec."Full Name";
                                                                        END;
                                                                      END ELSE BEGIN
                                                                        EmployeeRec.FINDFIRST;
                                                                        "Supplying Company" := EmployeeRec.Company;
                                                                        "Employee No." := EmployeeRec."No.";
                                                                        "Name Employee" := EmployeeRec."Full Name";
                                                                      END;
                                                                    END ELSE BEGIN
                                                                      IF "Supplying Company" = '' THEN BEGIN
                                                                        ProjHrEmplSel.SETRANGE(Year, Year);
                                                                        ProjHrEmplSel.SETRANGE(Week, Week);
                                                                        ProjHrEmplSel.SETRANGE("Receiving Company", "Receiving Company");
                                                                        ProjHrEmplSel.SETRANGE("Project No.", "Project No.");
                                                                        ProjHrEmplSel.SETRANGE("Employee No.", "Employee No.");
                                                                        ProjHrEmplSel.SETRANGE(Select, TRUE);
                                                                        IF ProjHrEmplSel.FINDFIRST THEN BEGIN
                                                                          IF ProjHrEmplSel.NEXT = 0 THEN
                                                                            "Supplying Company" := ProjHrEmplSel.Company;
                                                                        END;
                                                                      END;
                                                                    END;
                                                                  END;
                                                                  //ValidateFields(FIELDCAPTION("Employee No."));  May not be done
                                                                  EmployeesRec.GET("Supplying Company", "Employee No.");
                                                                  CheckSelectionEmployeeByProjWk("Employee No.", TRUE);
                                                                  "Name Employee" := EmployeesRec."Full Name";

                                                                  IF (("Employee No." <> xRec."Employee No.") OR ("Cost Object" = '')) AND (Type <> Type::Indirect) THEN BEGIN
                                                                    IF "Cost Object" <> EmployeesRec."Global Dimension 2 Code" THEN
                                                                      IF CheckSelectionCostObjByProjWk(EmployeesRec."Global Dimension 2 Code", FALSE) THEN
                                                                        VALIDATE("Cost Object", EmployeesRec."Global Dimension 2 Code");
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF Type = Type::UnmannedPlant THEN
                                                                EXIT;
                                                              IF "Supplying Company" <> '' THEN BEGIN
                                                                EmployeesRec.RESET;
                                                                EmployeesRec.SETRANGE(Company,"Supplying Company");
                                                                IF "Employee No." <> '' THEN
                                                                  IF EmployeesRec.GET("Supplying Company", "Employee No.") THEN;
                                                              END ELSE BEGIN
                                                                EmployeesRec.RESET;
                                                                IF "Employee No." <> '' THEN
                                                                  IF EmployeesRec.GET(COMPANYNAME, "Employee No.") THEN;
                                                              END;
                                                              MarkSelectionEmployeeByProjWk(EmployeesRec);
                                                              IF "Employee No." <> '' THEN BEGIN
                                                                EmployeesRec.Company := "Supplying Company";
                                                                EmployeesRec."No." := "Employee No.";
                                                              END;

                                                              IF PAGE.RUNMODAL(0,EmployeesRec) = ACTION::LookupOK THEN BEGIN
                                                                IF EmployeesRec."No." <> '' THEN BEGIN
                                                                  "Supplying Company" := EmployeesRec.Company;
                                                                  "Name Employee" := EmployeesRec."Full Name";
                                                                  FromLookupEmpl := TRUE;
                                                                  VALIDATE("Employee No.",EmployeesRec."No.");
                                                                END;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Employee No.;
                                                              NOR=Ansattnr;
                                                              SVE=AnstÑllningsnr] }
    { 45  ;   ;Name Employee       ;Text100       ;CaptionML=[ENU=Name Employee;
                                                              NOR=Navn pÜ ansatt.;
                                                              SVE=Namn pÜ anstÑlld.];
                                                   Editable=No }
    { 50  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 55  ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              NOR=Dokumentnr.;
                                                              SVE=Dokumentnr] }
    { 60  ;   ;Receiving Company   ;Text50        ;TableRelation=Company;
                                                   CaptionML=[ENU=Receiving Company;
                                                              NOR=Mottakselskap;
                                                              SVE=Mottagningsfîretag] }
    { 80  ;   ;Extension Contract  ;Code10        ;OnValidate=BEGIN
                                                                IF "Extension Contract" = '' THEN
                                                                  EXIT;

                                                                TESTFIELD(Type, Type::Project);
                                                                TESTFIELD("Project No.");

                                                                ValidateFields(FIELDCAPTION("Extension Contract"));
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (Type <> Type::Project) OR ("Project No." = '') THEN
                                                                EXIT;

                                                              ExtRec.RESET;
                                                              ExtRec.CHANGECOMPANY("Receiving Company");
                                                              ExtRec.FILTERGROUP(9);
                                                              ExtRec.SETRANGE("Project No.", "Project No.");
                                                              ExtRec.FILTERGROUP(0);
                                                              ExtRec."Project No." := "Project No.";
                                                              ExtRec."Contract No." := "Extension Contract";
                                                              IF PAGE.RUNMODAL(0, ExtRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Extension Contract", ExtRec."Contract No.");
                                                            END;

                                                   CaptionML=[ENU=Extension Contract;
                                                              NOR=ETA;
                                                              SVE=éTA] }
    { 90  ;   ;Cost Object         ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Cost Type=FILTER(Labor|Plant|Sundry));
                                                   OnValidate=BEGIN
                                                                ValidateFields(FIELDCAPTION("Cost Object"));
                                                                CheckSelectionCostObjByProjWk("Cost Object", TRUE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              SiteMngmntHoursSetup.GET;
                                                              CASE Type OF
                                                                Type::Project,
                                                                Type::Plant:
                                                                  BEGIN
                                                                    IF "Employee No." = '' THEN BEGIN
                                                                      MESSAGE(Text003);
                                                                      EXIT;
                                                                    END ELSE BEGIN
                                                                      DimValRec.RESET;
                                                                      DimValRec.FILTERGROUP(9);
                                                                      DimValRec.CHANGECOMPANY("Receiving Company");  //db, 29-01-13: T001319
                                                                      DimValRec.SETRANGE("Global Dimension No.", 2);
                                                                      //DP01010.sn
                                                                      IF IsExternalEmployee THEN
                                                                        DimValRec.SETFILTER("Cost Type",'%1|%2|%3|%4',DimValRec."Cost Type"::Labor,
                                                                          DimValRec."Cost Type"::Subcontracting,DimValRec."Cost Type"::Plant,DimValRec."Cost Type"::Sundry)
                                                                      ELSE
                                                                      //DP01010.en
                                                                        DimValRec.SETFILTER("Cost Type",'%1|%2|%3',
                                                                          DimValRec."Cost Type"::Labor,DimValRec."Cost Type"::Plant,DimValRec."Cost Type"::Sundry);
                                                                      DimValRec.FILTERGROUP(0);
                                                                      DimValRec.SETRANGE("Project Filter", "Project No.");
                                                                      IF "Receiving Company" = '' THEN
                                                                        DimValRec.SETRANGE("Company Filter")
                                                                      ELSE
                                                                        DimValRec.SETRANGE("Company Filter", "Receiving Company");
                                                                      IF DimValRec.FINDFIRST THEN BEGIN
                                                                        MarkSelectionCostObjByProjWk(DimValRec);
                                                                        IF "Cost Object" <> '' THEN
                                                                          DimValRec.Code := "Cost Object";
                                                                        IF PAGE.RUNMODAL(PAGE::"Cost Object List", DimValRec) = ACTION::LookupOK THEN
                                                                          VALIDATE("Cost Object",DimValRec.Code);
                                                                      END;
                                                                    END;
                                                                  END;
                                                                Type::Indirect:
                                                                  BEGIN
                                                                    IF SiteMngmntHoursSetup."Cost Object By Indirect Lines" = TRUE THEN BEGIN
                                                                      DimValRec.RESET;
                                                                      DimValRec.FILTERGROUP(9);
                                                                      DimValRec.SETRANGE("Global Dimension No.", 2);
                                                                      //DP01010.sn
                                                                      IF IsExternalEmployee THEN
                                                                        DimValRec.SETFILTER("Cost Type",'%1|%2|%3',
                                                                          DimValRec."Cost Type"::Labor,DimValRec."Cost Type"::Subcontracting,DimValRec."Cost Type"::Sundry)
                                                                      ELSE
                                                                      //DP01010.en
                                                                        DimValRec.SETFILTER("Cost Type",'%1|%2', DimValRec."Cost Type"::Labor,DimValRec."Cost Type"::Sundry);

                                                                      DimValRec.FILTERGROUP(0);
                                                                      IF DimValRec.FINDFIRST THEN BEGIN
                                                                        MarkSelectionCostObjByProjWk(DimValRec);
                                                                        IF "Cost Object" <> '' THEN
                                                                          DimValRec.Code := "Cost Object";
                                                                        IF "Receiving Company" = '' THEN
                                                                          DimValRec.SETRANGE("Company Filter")
                                                                        ELSE
                                                                          DimValRec.SETRANGE("Company Filter", "Receiving Company");
                                                                        IF PAGE.RUNMODAL(PAGE::"Cost Object List", DimValRec) = ACTION::LookupOK THEN
                                                                          VALIDATE("Cost Object",DimValRec.Code);
                                                                      END;
                                                                    END;
                                                                  END;
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Kostobjekt;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 95  ;   ;Description Cost Object;Text50     ;CaptionML=[ENU=Description Cost Object;
                                                              NOR=Beskrivelse, kostobjekt;
                                                              SVE=Beskrivning, kostnadsobjekt];
                                                   Editable=No }
    { 100 ;   ;Element             ;Code20        ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Receiving Company),
                                                                                                        Type=CONST(Element),
                                                                                                        Project No.=FIELD(Project No.),
                                                                                                        Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateFields(FIELDCAPTION(Element));
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF Type = Type::Indirect THEN
                                                                EXIT;
                                                              CostObjectRec.RESET;
                                                              CostObjectRec.FILTERGROUP(6);
                                                              CostObjectRec.SETRANGE(Company,"Receiving Company");
                                                              CostObjectRec.SETRANGE(Type,CostObjectRec.Type::Element);
                                                              CostObjectRec.SETRANGE("Project No.","Project No.");
                                                              CostObjectRec.FILTERGROUP(0);
                                                              CostObjectRec.Code := Element;
                                                              IF PAGE.RUNMODAL(0,CostObjectRec) = ACTION::LookupOK THEN
                                                                VALIDATE(Element, CostObjectRec.Code);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Element;
                                                              NOR=Element;
                                                              SVE=Element] }
    { 110 ;   ;Monday              ;Decimal       ;OnValidate=BEGIN
                                                                IF (Monday <> 0) AND ("Component Type" = "Component Type"::Expenses) THEN  //*C-027136
                                                                  FIELDERROR("Component Type");

                                                                IF ("Cost Object" = '') AND ("Component Type" = "Component Type"::Hours) AND (Type = Type::Project) THEN BEGIN
                                                                  IF Monday <> 0 THEN
                                                                    MESSAGE(Text002);
                                                                  Monday := 0;
                                                                END;

                                                                TotalHours;
                                                                CreateHourLineForGrade(1, Monday);
                                                                COMMIT;

                                                                ValidateFields(FIELDCAPTION(Monday));
                                                              END;

                                                   CaptionML=[ENU=Monday;
                                                              NOR=Mandag;
                                                              SVE=MÜndag];
                                                   BlankZero=Yes }
    { 115 ;   ;Overtime Comp. Monday;Code20       ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=[ENU=Overtime Comp. Monday;
                                                              NOR=Overtidskomp. Mandag;
                                                              SVE=ôvertidskomp. MÜndag] }
    { 116 ;   ;Overtime Hours Monday;Decimal      ;CaptionML=[ENU=Overtime Hours Monday;
                                                              NOR=Overtidstimer, Mandag;
                                                              SVE=ôvertidstimmar, mÜndag] }
    { 117 ;   ;Travel Hours Monday ;Option        ;CaptionML=[ENU=Travel Hours Monday;
                                                              NOR=Reisetimer, Mandag;
                                                              SVE=Restimmar mÜndag];
                                                   OptionCaptionML=[ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                                    NOR=Passasjer,SjÜfõr uten passasjerer,SjÜfõr med passasjerer,Arbeid til Arbeid;
                                                                    SVE=Passagerare,Fîrare utan passagerare,Fîrare med passagerare,Arbete till arbete];
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to Work }
    { 120 ;   ;Tuesday             ;Decimal       ;OnValidate=BEGIN
                                                                IF (Tuesday <> 0) AND ("Component Type" = "Component Type"::Expenses) THEN  //*C-027136
                                                                  FIELDERROR("Component Type");

                                                                IF ("Cost Object" = '') AND ("Component Type" = "Component Type"::Hours) AND (Type = Type::Project) THEN BEGIN
                                                                  IF Tuesday <> 0 THEN
                                                                    MESSAGE(Text002);
                                                                  Tuesday := 0;
                                                                END;

                                                                TotalHours;
                                                                CreateHourLineForGrade(2, Tuesday);
                                                                COMMIT;

                                                                ValidateFields(FIELDCAPTION(Tuesday));
                                                              END;

                                                   CaptionML=[ENU=Tuesday;
                                                              NOR=Tirsdag;
                                                              SVE=Tisdag];
                                                   BlankZero=Yes }
    { 125 ;   ;Overtime Comp.Tuesday;Code20       ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=[ENU=Overtime Comp.Tuesday;
                                                              NOR=Overtidskomp. Tirsdag;
                                                              SVE=ôvertidskomp.tisdag] }
    { 126 ;   ;Overtime Hours Tuesday;Decimal     ;CaptionML=[ENU=Overtime Hours Tuesday;
                                                              NOR=Overtidstimer tirsdag;
                                                              SVE=ôvertidstimmar, tisdag] }
    { 127 ;   ;Travel Hours Tuesday;Option        ;CaptionML=[ENU=Travel Hours Tuesday;
                                                              NOR=Reisetimer tirsdag;
                                                              SVE=Restimmar tisdag];
                                                   OptionCaptionML=[ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                                    NOR=Passasjer,SjÜfõr uten passasjerer,SjÜfõr med passasjerer,Arbeid til Arbeid;
                                                                    SVE=Passagerare,Fîrare utan passagerare,Fîrare med passagerare,Arbete till arbete];
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to Work }
    { 130 ;   ;Wednesday           ;Decimal       ;OnValidate=BEGIN
                                                                IF (Wednesday <> 0) AND ("Component Type" = "Component Type"::Expenses) THEN  //*C-027136
                                                                  FIELDERROR("Component Type");

                                                                IF ("Cost Object" = '') AND ("Component Type" = "Component Type"::Hours) AND (Type = Type::Project) THEN BEGIN
                                                                  IF Wednesday <> 0 THEN
                                                                    MESSAGE(Text002);
                                                                  Wednesday := 0;
                                                                END;

                                                                TotalHours;
                                                                CreateHourLineForGrade(3, Wednesday);
                                                                COMMIT;

                                                                ValidateFields(FIELDCAPTION(Wednesday));
                                                              END;

                                                   CaptionML=[ENU=Wednesday;
                                                              NOR=Onsdag;
                                                              SVE=Onsdag];
                                                   BlankZero=Yes }
    { 135 ;   ;Overtime Comp.Wednesday;Code20     ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=[ENU=Overtime Comp.Wednesday;
                                                              NOR=Overtidskomp onsdag;
                                                              SVE=ôvertidskomp.onsdag] }
    { 136 ;   ;Overtime Hours Wednesday;Decimal   ;CaptionML=[ENU=Overtime Hours Wednesday;
                                                              NOR=Ovvertidstimer onsdag;
                                                              SVE=ôvertidstimmar, onsdag] }
    { 137 ;   ;Travel Hours Wednesday;Option      ;CaptionML=[ENU=Travel Hours Wednesday;
                                                              NOR=Reisetimer onsdag;
                                                              SVE=Restimmar onsdag];
                                                   OptionCaptionML=[ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                                    NOR=Passasjer,SjÜfõr uten passasjerer,SjÜfõr med passasjerer,Arbeid til Arbeid;
                                                                    SVE=Passagerare,Fîrare utan passagerare,Fîrare med passagerare,Arbete till arbete];
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to Work }
    { 140 ;   ;Thursday            ;Decimal       ;OnValidate=BEGIN
                                                                IF (Thursday <> 0) AND ("Component Type" = "Component Type"::Expenses) THEN  //*C-027136
                                                                  FIELDERROR("Component Type");

                                                                IF ("Cost Object" = '') AND ("Component Type" = "Component Type"::Hours) AND (Type = Type::Project) THEN BEGIN
                                                                  IF Thursday <> 0 THEN
                                                                    MESSAGE(Text002);
                                                                  Thursday := 0;
                                                                END;

                                                                TotalHours;
                                                                CreateHourLineForGrade(4, Thursday);
                                                                COMMIT;

                                                                ValidateFields(FIELDCAPTION(Thursday));
                                                              END;

                                                   CaptionML=[ENU=Thursday;
                                                              NOR=Torsdag;
                                                              SVE=Torsdag];
                                                   BlankZero=Yes }
    { 145 ;   ;Overtime Comp.Thursday;Code20      ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=[ENU=Overtime Comp.Thursday;
                                                              NOR=Overtidskomp. Torsdag;
                                                              SVE=ôvertidskomp.torsdag] }
    { 146 ;   ;Overtime Hours Thursday;Decimal    ;CaptionML=[ENU=Overtime Hours Thursday;
                                                              NOR=Overtidstimer torsdag;
                                                              SVE=ôvertidstimmar, torsdag] }
    { 147 ;   ;Travel Hours Thursday;Option       ;CaptionML=[ENU=Travel Hours Thursday;
                                                              NOR=Reisetimer torsdag;
                                                              SVE=Restimmar torsdag];
                                                   OptionCaptionML=[ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                                    NOR=Passasjer,SjÜfõr uten passasjerer,SjÜfõr med passasjerer,Arbeid til Arbeid;
                                                                    SVE=Passagerare,Fîrare utan passagerare,Fîrare med passagerare,Arbete till arbete];
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to Work }
    { 150 ;   ;Friday              ;Decimal       ;OnValidate=BEGIN
                                                                IF (Friday <> 0) AND ("Component Type" = "Component Type"::Expenses) THEN  //*C-027136
                                                                  FIELDERROR("Component Type");

                                                                IF ("Cost Object" = '') AND ("Component Type" = "Component Type"::Hours) AND (Type = Type::Project) THEN BEGIN
                                                                  IF Friday <> 0 THEN
                                                                    MESSAGE(Text002);
                                                                  Friday := 0;
                                                                END;

                                                                TotalHours;
                                                                CreateHourLineForGrade(5, Friday);
                                                                COMMIT;

                                                                ValidateFields(FIELDCAPTION(Friday));
                                                              END;

                                                   CaptionML=[ENU=Friday;
                                                              NOR=Fredag;
                                                              SVE=Fredag];
                                                   BlankZero=Yes }
    { 155 ;   ;Overtime Comp.Friday;Code20        ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=[ENU=Overtime Comp.Friday;
                                                              NOR=Overtidskomp. Fredag;
                                                              SVE=ôvertidskomp.fredag] }
    { 156 ;   ;Overtime Hours Friday;Decimal      ;CaptionML=[ENU=Overtime Hours Friday;
                                                              NOR=Overtidstimer fredag;
                                                              SVE=ôvertidstimmar, fredag] }
    { 157 ;   ;Travel Hours Friday ;Option        ;CaptionML=[ENU=Travel Hours Friday;
                                                              NOR=Reisetimer fredag;
                                                              SVE=Restimmar fredag];
                                                   OptionCaptionML=[ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                                    NOR=Passasjer,SjÜfõr uten passasjerer,SjÜfõr med passasjerer,Arbeid til Arbeid;
                                                                    SVE=Passagerare,Fîrare utan passagerare,Fîrare med passagerare,Arbete till arbete];
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to Work }
    { 160 ;   ;Saturday            ;Decimal       ;OnValidate=BEGIN
                                                                IF (Saturday <> 0) AND ("Component Type" = "Component Type"::Expenses) THEN  //*C-027136
                                                                  FIELDERROR("Component Type");

                                                                IF ("Cost Object" = '') AND ("Component Type" = "Component Type"::Hours) AND (Type = Type::Project) THEN BEGIN
                                                                  IF Saturday <> 0 THEN
                                                                    MESSAGE(Text002);
                                                                  Saturday := 0;
                                                                END;

                                                                TotalHours;
                                                                CreateHourLineForGrade(6, Saturday);
                                                                COMMIT;

                                                                ValidateFields(FIELDCAPTION(Saturday));
                                                              END;

                                                   CaptionML=[ENU=Saturday;
                                                              NOR=Lõrdag;
                                                              SVE=Lîrdag];
                                                   BlankZero=Yes }
    { 165 ;   ;Overtime Comp.Saturday;Code20      ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=[ENU=Overtime Comp.Saturday;
                                                              NOR=Overtidskomp. Lõrdag;
                                                              SVE=ôvertidskomp.lîrdag] }
    { 166 ;   ;Overtime Hours Saturday;Decimal    ;CaptionML=[ENU=Overtime Hours Saturday;
                                                              NOR=Overtidstimer lõrdag;
                                                              SVE=ôvertidstimmar, lîrdag] }
    { 167 ;   ;Travel Hours Saturday;Option       ;CaptionML=[ENU=Travel Hours Saturday;
                                                              NOR=Reisetimer lõrdag;
                                                              SVE=Restimmar lîrdag];
                                                   OptionCaptionML=[ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                                    NOR=Passasjer,SjÜfõr uten passasjerer,SjÜfõr med passasjerer,Arbeid til Arbeid;
                                                                    SVE=Passagerare,Fîrare utan passagerare,Fîrare med passagerare,Arbete till arbete];
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to Work }
    { 170 ;   ;Sunday              ;Decimal       ;OnValidate=BEGIN
                                                                IF (Sunday <> 0) AND ("Component Type" = "Component Type"::Expenses) THEN  //*C-027136
                                                                  FIELDERROR("Component Type");

                                                                IF ("Cost Object" = '') AND ("Component Type" = "Component Type"::Hours) AND (Type = Type::Project) THEN BEGIN
                                                                  IF Sunday <> 0 THEN
                                                                    MESSAGE(Text002);
                                                                  Sunday := 0;
                                                                END;

                                                                TotalHours;
                                                                CreateHourLineForGrade(7, Sunday);
                                                                COMMIT;

                                                                ValidateFields(FIELDCAPTION(Sunday));
                                                              END;

                                                   CaptionML=[ENU=Sunday;
                                                              NOR=Sõndag;
                                                              SVE=Sîndag];
                                                   BlankZero=Yes }
    { 175 ;   ;Overtime Comp.Sunday;Code20        ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=[ENU=Overtime Comp.Sunday;
                                                              NOR=Overtidskomp. Sõndag;
                                                              SVE=ôvertidskomp.sîndag] }
    { 176 ;   ;Overtime Hours Sunday;Decimal      ;CaptionML=[ENU=Overtime Hours Sunday;
                                                              NOR=Overtidstimer sõndag;
                                                              SVE=ôvertidstimmar, sîndag] }
    { 177 ;   ;Travel Hours Sunday ;Option        ;CaptionML=[ENU=Travel Hours Sunday;
                                                              NOR=Reisetimer sõndag;
                                                              SVE=Restimmar sîndag];
                                                   OptionCaptionML=[ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                                    NOR=Passasjer,SjÜfõr uten passasjerer,SjÜfõr med passasjerer,Arbeid til Arbeid;
                                                                    SVE=Passagerare,Fîrare utan passagerare,Fîrare med passagerare,Arbete till arbete];
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to Work }
    { 180 ;   ;Total Line          ;Decimal       ;CaptionML=[ENU=Total Line;
                                                              NOR=Totalrad;
                                                              SVE=Totalrad] }
    { 200 ;   ;Total Hours         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Site Mngmnt. Proj.Hours Line"."Total Line" WHERE (Year=FIELD(Year),
                                                                                                                      Week=FIELD(Week),
                                                                                                                      Receiving Company=FIELD(Receiving Company),
                                                                                                                      Project No.=FIELD(Project No.),
                                                                                                                      Component Type=FILTER(Hours),
                                                                                                                      Overtime=CONST(No)));
                                                   CaptionML=[ENU=Total Hours;
                                                              NOR=Timer totalt;
                                                              SVE=Timmar totalt];
                                                   Editable=No }
    { 210 ;   ;Connection No.      ;Integer       ;CaptionML=[ENU=Connection No.;
                                                              NOR=Tilkoblingsnr;
                                                              SVE=Anslutningsnr] }
    { 220 ;   ;Wage Component      ;Code20        ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Receiving Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Supplying Company");
                                                                ValidateFields(FIELDCAPTION("Wage Component"));
                                                              END;

                                                   CaptionML=[ENU=Wage Component;
                                                              NOR=Lõnnsart;
                                                              SVE=Lîneart] }
    { 230 ;   ;Component Type      ;Option        ;FieldClass=Normal;
                                                   CaptionML=[ENU=Component Type;
                                                              NOR=Komponenttype;
                                                              SVE=Komponenttyp];
                                                   OptionCaptionML=[ENU=Hours,Days,Expenses,Kilometers;
                                                                    NOR=Timer,Dager,Utgifter,Kilometer;
                                                                    SVE=Timmar,dagar,utgifter,kilometer];
                                                   OptionString=Hours,Days,Expenses,Kilometers;
                                                   Editable=No }
    { 240 ;   ;Overtime            ;Boolean       ;CaptionML=[ENU=Overtime;
                                                              NOR=Overtid;
                                                              SVE=ôvertid];
                                                   Editable=No }
    { 250 ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  "Cost Object" := '';
                                                                  Element := '';
                                                                  "Extension Contract" := '';
                                                                  "Wage Component" := '';
                                                                  "Component Type" := "Component Type"::Hours;
                                                                  "Cost Code" := '';
                                                                  "Cost Code Description" := '';
                                                                  "Description Cost Object" := '';
                                                                  CASE Type OF
                                                                    Type::Indirect:
                                                                      BEGIN
                                                                        "Plant Company" := '';
                                                                        "Plant Location" := '';
                                                                        "Plant Type" := '';
                                                                        "Plant No." := '';
                                                                        "Cost Component Plant" := '';
                                                                      END;
                                                                    Type::Project:
                                                                      BEGIN
                                                                        "Plant Company" := '';
                                                                        "Plant Location" := '';
                                                                        "Plant Type" := '';
                                                                        "Plant No." := '';
                                                                        "Cost Component Plant" := '';
                                                                      END;
                                                                    Type::Plant:
                                                                      BEGIN
                                                                        FillDefaultPlantCompany();
                                                                        //IF "Employee No." = '' THEN
                                                                        //  "Supplying Company" := "Plant Company";
                                                                        "Plant Location" := FillDefaultPlantLoc();
                                                                        IF ("Plant Type" <> '') AND ("Cost Component Plant" = '') THEN
                                                                          VALIDATE("Plant Type");  //* Fill 'Cost Component Plant'
                                                                      END;
                                                                    Type::UnmannedPlant:
                                                                      BEGIN
                                                                        "Employee No." := '';
                                                                        FillDefaultPlantCompany();
                                                                        "Supplying Company" := "Plant Company";
                                                                        "Plant Location" := FillDefaultPlantLoc();
                                                                        "Cost Component Plant" := '';
                                                                      END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              NOR=Radtype;
                                                              SVE=Radtyp];
                                                   OptionCaptionML=[ENU=Project,Indirect,,Plant,Unmanned Plant;
                                                                    NOR=Prosjekt,Indirekte,,Maskin,Ubemannet maskin;
                                                                    SVE=Projekt,Indirekt,,Maskin,Obemannad Maskin];
                                                   OptionString=Project,Indirect,,Plant,UnmannedPlant }
    { 255 ;   ;Cost Code           ;Code20        ;OnValidate=VAR
                                                                lvEmployeeRec@1100525000 : Record 5200;
                                                              BEGIN
                                                                SiteMngmntHoursSetup.GET();
                                                                IF "Cost Code" = '' THEN BEGIN
                                                                  "Cost Code Description" := '';
                                                                  EXIT;
                                                                END;
                                                                TESTFIELD(Type, Type::Indirect);
                                                                CostCodeRec.CHANGECOMPANY("Receiving Company");
                                                                CostCodeRec.GET("Cost Code");
                                                                CheckSelectionCostCodeByProjWk("Cost Code", TRUE);
                                                                "Cost Code Description" := CostCodeRec.Description;
                                                                //IF SiteMngmntHoursSetup."Cost Object By Indirect Lines" THEN BEGIN    Nothing between BEGIN and END, so not needed
                                                                //END;
                                                                //*27119.sn
                                                                IF CostCodeRec.Component = '' THEN BEGIN
                                                                  "Wage Component" := '';
                                                                  "Component Type" := "Component Type"::Hours;
                                                                END ELSE BEGIN
                                                                //*27119.en
                                                                  VALIDATE("Wage Component",CostCodeRec.Component);
                                                                  IF (NOT SiteMngmntHoursSetup."Fill Wage Comp. By Indirect") AND ("Component Type" = "Component Type"::Hours) THEN
                                                                     "Wage Component" := '';
                                                                  IF WageCompRec.GET(CostCodeRec.Component) THEN BEGIN
                                                                    IF WageCompRec."Kilometer Expense" THEN BEGIN
                                                                      "Component Type" := "Component Type"::Kilometers;
                                                                      lvEmployeeRec.CHANGECOMPANY("Supplying Company");
                                                                      lvEmployeeRec.GET("Employee No.");
                                                                      SetDefaultDriverType(lvEmployeeRec."Driver Type");
                                                                    END;
                                                                  END;
                                                                END;  //*27119.n
                                                              END;

                                                   OnLookup=VAR
                                                              HoursObjectsRec@1210190000 : Record 11012359;
                                                            BEGIN
                                                              IF Type=Type::Indirect THEN BEGIN
                                                                HoursObjectsRec.RESET;
                                                                HoursObjectsRec.FILTERGROUP(9);
                                                                HoursObjectsRec.SETRANGE(Type,HoursObjectsRec.Type::"Cost Code");
                                                                HoursObjectsRec.SETRANGE(Company,"Receiving Company");
                                                                HoursObjectsRec.FILTERGROUP(0);
                                                                MarkSelectionCostCodeByProjWk(HoursObjectsRec);
                                                                IF "Cost Code" <> '' THEN
                                                                  HoursObjectsRec.Code := "Cost Code";
                                                                IF PAGE.RUNMODAL(0,HoursObjectsRec) = ACTION::LookupOK THEN
                                                                  VALIDATE("Cost Code", HoursObjectsRec.Code);
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Cost Code;
                                                              NOR=Kostkode;
                                                              SVE=Kostnadskod] }
    { 257 ;   ;Cost Code Description;Text50       ;CaptionML=[ENU=Cost Code Description;
                                                              NOR=Kostkode, Beskrivelse;
                                                              SVE=Kostnadskod, beskrivning];
                                                   Editable=No }
    { 260 ;   ;Comment             ;Text100       ;CaptionML=[ENU=Comment;
                                                              NOR=Kommentar;
                                                              SVE=Kommentar] }
    { 270 ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                //*C-027136
                                                                IF Amount <> 0 THEN BEGIN
                                                                  TESTFIELD("Component Type", "Component Type"::Expenses);
                                                                  TESTFIELD(Quantity);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              NOR=Belõp;
                                                              SVE=Belopp];
                                                   Description=Only for expenses }
    { 280 ;   ;Shift Code          ;Code10        ;OnValidate=VAR
                                                                ProjShift@1210190000 : Record 11125538;
                                                              BEGIN
                                                                //*DP00033
                                                                IF "Shift Code" = '' THEN
                                                                  EXIT;

                                                                ProjShift.CHANGECOMPANY("Receiving Company");
                                                                ProjShift.GET("Project No.", "Shift Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupShiftCode(TRUE);
                                                            END;

                                                   CaptionML=[ENU=Shift Code;
                                                              NOR=Skiftkode;
                                                              SVE=Skiftkod] }
    { 560 ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                DimVal@1210190000 : Record 349;
                                                                DimMgt@1210190001 : Codeunit 408;
                                                              BEGIN
                                                                //*C-027136
                                                                IF Quantity <> 0 THEN BEGIN
                                                                  TESTFIELD("Component Type", "Component Type"::Expenses);
                                                                  IF Type = Type::UnmannedPlant THEN
                                                                    FIELDERROR(Type);;
                                                                END;

                                                                IF (Quantity <> 0) AND (xRec.Quantity = 0) AND (Amount = 0) THEN BEGIN
                                                                  DimMgt.GetDimValueRec(2, "Cost Object", DimVal, FALSE, '');
                                                                  Amount := ROUND(Quantity * DimVal.Price);
                                                                END ELSE BEGIN
                                                                  IF Quantity = 0 THEN
                                                                    Amount := 0
                                                                  ELSE BEGIN
                                                                    IF xRec.Quantity = 0 THEN
                                                                      Amount := Quantity * Amount
                                                                    ELSE
                                                                      Amount := Quantity * (Amount / xRec.Quantity);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   BlankZero=Yes;
                                                   Description=Only for expenses }
    { 580 ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                //*C-027136
                                                                IF "Posting Date" <> 0D THEN BEGIN
                                                                  TESTFIELD("Component Type", "Component Type"::Expenses);
                                                                  IF ("Posting Date" < DWY2DATE(1,Week,Year)) OR ("Posting Date" > DWY2DATE(7,Week,Year)) THEN
                                                                    ERROR(Text009, DWY2DATE(1,Week,Year), DWY2DATE(7,Week,Year));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              NOR=Bokfõringsdato;
                                                              SVE=Bokfîringsdatum];
                                                   Description=Only for expenses }
    { 700 ;   ;Plant Company       ;Text30        ;TableRelation=Company;
                                                   OnValidate=VAR
                                                                PlantMgtCompRec@1100525003 : Record 11020586;
                                                                TmpPlantMgtCompRec@1100525002 : TEMPORARY Record 11020586;
                                                              BEGIN
                                                                IF "Plant Company" <> '' THEN BEGIN
                                                                  IF NOT PlantMgtCompRec.GET("Plant Company") THEN
                                                                    ERROR(Text005, "Plant Company", PlantMgtCompRec.TABLECAPTION)
                                                                  ELSE BEGIN
                                                                    IF "Project No." <> '' THEN BEGIN
                                                                      PlantMgtCompRec.GetPlantCompaniesForProject("Project No.", TmpPlantMgtCompRec, '', FALSE);
                                                                      IF NOT TmpPlantMgtCompRec.GET("Plant Company") THEN
                                                                        ERROR(Text006, "Project No.", FIELDCAPTION("Plant Company"), "Plant Company");
                                                                    END;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  IF Type IN [Type::Plant, Type::UnmannedPlant] THEN
                                                                    TESTFIELD("Plant Company");
                                                                END;

                                                                IF ("Plant Company" = '') OR ("Plant Company" <> xRec."Plant Company") THEN BEGIN
                                                                  "Plant Location" := '';
                                                                  "Plant Type" := '';
                                                                  "Plant No." := '';
                                                                  "Cost Component Plant" := '';
                                                                  "Plant Location" := FillDefaultPlantLoc();
                                                                END;

                                                                IF (Type = Type::UnmannedPlant) AND ("Supplying Company" <> "Plant Company") THEN
                                                                  "Supplying Company" := "Plant Company";
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupPlantCompany();
                                                            END;

                                                   CaptionML=[ENU=Plant Company;
                                                              NOR=Maskinselskap;
                                                              SVE=Maskinfîretag];
                                                   Description=Supplying Plant Company }
    { 705 ;   ;Plant Location      ;Code20        ;OnValidate=BEGIN
                                                                IF "Plant Location" <> '' THEN
                                                                  ValidateFields(FIELDCAPTION("Plant Location"));
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupPlantLocation();
                                                            END;

                                                   CaptionML=[ENU=Plant Location;
                                                              NOR=Maskinplassering;
                                                              SVE=Maskinplats] }
    { 710 ;   ;Plant Type          ;Code20        ;OnValidate=BEGIN
                                                                IF ("Plant Type" = '') OR ("Plant Type" <> xRec."Plant Type") THEN
                                                                  "Plant No." := '';
                                                                IF "Plant Type" <> '' THEN
                                                                  ValidateFields(FIELDCAPTION("Plant Type"));
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupPlantType();
                                                            END;

                                                   CaptionML=[ENU=Plant Type;
                                                              NOR=Maskintype;
                                                              SVE=Maskintyp] }
    { 720 ;   ;Plant No.           ;Code10        ;OnValidate=BEGIN
                                                                IF "Plant No." <> '' THEN
                                                                  ValidateFields(FIELDCAPTION("Plant No."));
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupPlantNo();
                                                            END;

                                                   CaptionML=[ENU=Plant No.;
                                                              NOR=Maskinnr.;
                                                              SVE=Maskinnr] }
    { 730 ;   ;Cost Component Plant;Code10        ;OnValidate=BEGIN
                                                                IF "Cost Component Plant" <> '' THEN
                                                                  ValidateFields(FIELDCAPTION("Cost Component Plant"));
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupCostCompPlant();
                                                            END;

                                                   CaptionML=[ENU=Cost Component Plant;
                                                              NOR=Kostdel, maskin;
                                                              SVE=Kostnadsdel, Maskin] }
    { 750 ;   ;Plant Hour Rev. Line No.;Integer   ;CaptionML=[ENU=Plant Hour Rev. Line No.;
                                                              NOR=Maskintimer rev.radnr.;
                                                              SVE=Maskintimmar rev. radnr];
                                                   Description=Only used for unmanned plant;
                                                   Editable=No }
    { 800 ;   ;Leave Type          ;Code10        ;TableRelation="Leave Type";
                                                   CaptionML=[ENU=Leave Type;
                                                              NOR=Fravërstype;
                                                              SVE=FrÜnvarotyp];
                                                   Editable=No }
    { 810 ;   ;Leave Factor        ;Decimal       ;CaptionML=[ENU=Leave Factor;
                                                              NOR=Fravërsfaktor;
                                                              SVE=FrÜnvarofaktor];
                                                   Editable=No }
    { 820 ;   ;Element Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Site Mngmnt. Hours Codes".Description WHERE (Company=FIELD(Receiving Company),
                                                                                                                    Type=CONST(Element),
                                                                                                                    Project No.=FIELD(Project No.),
                                                                                                                    Code=FIELD(Element)));
                                                   CaptionML=[ENU=Element Description;
                                                              NOR=Elementbeskrivelse;
                                                              SVE=Elementbeskrivning];
                                                   Editable=No }
    { 830 ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=ENU=Open,,,,,Released,,,,,Approved,,,,,Rejected,,,,,Posted;
                                                   OptionString=Open,,,,,Released,,,,,Approved,,,,,Rejected,,,,,Posted;
                                                   Description=DP00530;
                                                   Editable=No }
    { 840 ;   ;Line Template Code  ;Code20        ;TableRelation="Hour Line Template".Code WHERE (Source=CONST(Site Mngmnt. Hours),
                                                                                                  Receiving Company=FIELD(Receiving Company));
                                                   CaptionML=[ENU=Line Template Code;
                                                              SVE=Mallrad kod];
                                                   Description=DP00530;
                                                   Editable=No }
    { 850 ;   ;Hour Portal Link Guid;Text50       ;CaptionML=[ENU=Hour Portal Link Guid;
                                                              SVE=Tidportal lÑnknings GUID];
                                                   Description=DP00530;
                                                   Editable=No }
    { 860 ;   ;Start Time          ;Time          ;CaptionML=[ENU=Start Time;
                                                              NOR=Starttid;
                                                              SVE=Starttid];
                                                   Description=DP00530;
                                                   Editable=No }
    { 870 ;   ;End Time            ;Time          ;CaptionML=[ENU=End Time;
                                                              NOR=Sluttid;
                                                              SVE=Sluttid];
                                                   Editable=No }
    { 880 ;   ;OLDReject Text      ;Text250       ;CaptionML=[ENU=Reject Text;
                                                              SVE=Avvisadetext];
                                                   Editable=No }
    { 900 ;   ;Start Kilometer     ;Integer       ;CaptionML=[ENU=Start kilometer;
                                                              SVE=MÑtarstÑllning, start];
                                                   Editable=No }
    { 910 ;   ;End Kilometer       ;Integer       ;CaptionML=[ENU=End Kilometer;
                                                              SVE=MÑtarstÑllning, slut];
                                                   Editable=No }
    { 990 ;   ;Vehicle             ;Code10        ;TableRelation="Site Mngmnt. Vehicle";
                                                   CaptionML=[ENU=Vehicle;
                                                              SVE=Leasingavtal fîr fordon] }
  }
  KEYS
  {
    {    ;Year,Week,Receiving Company,Project No.,Line No.;
                                                   SumIndexFields=Total Line;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Connection No.                           }
    {    ;Year,Week,Project No.,Component Type,Overtime;
                                                   SumIndexFields=Total Line }
    {    ;Year,Week,Project No.,Employee No.      ;SumIndexFields=Total Line }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CostObjectRec@1100525005 : Record 11012358;
      HourAccRec@1100485000 : Record 11012360;
      TmpHourHeader@1100485003 : TEMPORARY Record 11012360;
      TmpHourLine@1100485002 : TEMPORARY Record 11012361;
      HourProjHeader@1100485004 : Record 11012362;
      HourProjLine@1100485006 : Record 11012363;
      WageCompRec@1100485009 : Record 11012014;
      EmployeesRec@1100485010 : Record 11012357;
      SiteMngmntHoursSetup@1100485013 : Record 11012355;
      EmployeeRec@1100485015 : Record 5200;
      CostCodeRec@1100485016 : Record 11012083;
      DimValRec@1100409000 : Record 349;
      Text000@1100528300 : TextConst 'ENU=Fill 1 Day per Line.\\This is because %1 is set to %2.;SVE=Fyll i en dag per rad.\Det beror pÜ att %1 Ñr satt till %2.';
      Text001@1210190000 : TextConst 'ENU=%1 %2 is not selected for project %3 (%4) in week %5-%6.;NOR=%1 %2 er ikke valgt for prosjekt %3 (%4) i uke %5-%6;SVE=%1 %2 Ñr inte valt fîr projekt %3 (%4) under vecka %5-%6.';
      Text002@1100525000 : TextConst 'ENU=No Cost Object;NOR=Intet kostnadsobjekt;SVE=Inget kostnadsobjekt';
      Text003@1100525001 : TextConst 'ENU=No Employee;NOR=Ingen ansatt;SVE=Ingen anstÑlld';
      ExtRec@1100525003 : Record 11012004;
      FromLookupEmpl@1100525006 : Boolean;
      UpdateAction@1100525004 : 'Insert,Modify,Delete,Rename';
      Text005@1100525008 : TextConst 'ENU="''%1'' is not setup as %2. ";NOR=%1'' er ikke satt opp som %2.;SVE="''%1'' har inte stÑllts in som %2. "';
      Text006@1100525007 : TextConst 'ENU=There is no plant location of project ''%1'' present in %2 ''%3''.;NOR=Det finnes ingen maskinlokasjon for prosjekt ''%1'' i %2 ''%3''.;SVE=Det finns ingen Maskinsplats fîr projektet ''%1'' i %2 ''%3''.';
      Text009@1210190001 : TextConst 'ENU=Posting Date should be within the week (%1..%2).;NOR=Bokfõringsdatoen mÜ vëre innenfor uken (%1..%2);SVE=Bokfîringsdatumet ska vara inom veckan (%1..%2).';
      SiteMngmntHoursCompanies@1100529400 : Record 11012356;

    PROCEDURE FillDocNoPostingDate@3();
    BEGIN
      IF HourAccRec.GET(Year,Week,"Supplying Company","Project No.") THEN BEGIN
        "Document No." := HourAccRec."Document No.";
      END;
    END;

    PROCEDURE TotalHours@1100485010();
    VAR
      HourPortalSetup@1100529400 : Record 11020454;
      FilledFields@1100529401 : Integer;
    BEGIN
      IF (NOT SiteMngmntHoursCompanies.GET("Supplying Company")) THEN
        SiteMngmntHoursCompanies.INIT;
      IF (NOT HourPortalSetup.GET) THEN
        HourPortalSetup.INIT;
      IF (HourPortalSetup."Hour Portal Active") AND (NOT SiteMngmntHoursCompanies."Hour Portal Not Used") THEN BEGIN
        FilledFields := 0;
        IF (Monday <> 0) THEN FilledFields += 1;
        IF (Tuesday <> 0) THEN FilledFields += 1;
        IF (Wednesday <> 0) THEN FilledFields += 1;
        IF (Thursday <> 0) THEN FilledFields += 1;
        IF (Friday <> 0) THEN FilledFields += 1;
        IF (Saturday <> 0) THEN FilledFields += 1;
        IF (Sunday <> 0) THEN FilledFields += 1;
        IF (FilledFields > 1) THEN
          ERROR(Text000, HourPortalSetup.FIELDCAPTION("Hour Portal Active"), HourPortalSetup."Hour Portal Active");
      END;
      "Total Line" := Monday + Tuesday + Wednesday + Thursday + Friday + Saturday + Sunday;
    END;

    PROCEDURE ValidateFields@1210190001(ChangedFieldName@1210190000 : Text[100]);
    BEGIN
      CLEAR(TmpHourLine);
      TmpHourLine.TRANSFERFIELDS(Rec);
      TmpHourLine.SetProjHrsValidate("Line No.");
      TmpHourLine.Type := Type;      //* Not the same fieldno (75/250)
      TmpHourLine.Amount := Amount;  //* Not the same fieldno (570/270)
      CASE ChangedFieldName OF
        'INSERT' :
          BEGIN
            TmpHourLine.FillDocNoPostingDate;
          END;
        {
        // Validate on Employee is done in this table, do not validate in 'Header by employee'. For instance no
        // other Supl.Company may be returned
        FIELDCAPTION("Employee No.") :
          BEGIN
            HourProjHeader.GET(Year, Week, "Receiving Company", "Project No.");
            TmpHourHeader.TRANSFERFIELDS(HourProjHeader);
            TmpHourHeader."Supplying Company" := "Supplying Company";
            TmpHourHeader.VALIDATE("Employee No.", "Employee No.");
            TmpHourLine.TRANSFERFIELDS(Rec);
            TmpHourLine."Document No." := HourProjHeader."Document No.";
            TmpHourLine.VALIDATE("Employee No.", "Employee No.");
          END;
        }
        FIELDCAPTION("Project No."):
          BEGIN
            TmpHourLine.VALIDATE("Supplying Company","Supplying Company");
            TmpHourLine.VALIDATE("Object No.","Project No.");
          END;
        FIELDCAPTION("Plant Location") : TmpHourLine.VALIDATE("Plant Location");
        FIELDCAPTION("Plant Type") : TmpHourLine.VALIDATE("Plant Type");
        FIELDCAPTION("Plant No.") : TmpHourLine.VALIDATE("Plant No.");
        FIELDCAPTION("Cost Component Plant") : TmpHourLine.VALIDATE("Cost Component Plant");
        FIELDCAPTION("Cost Object") : TmpHourLine.VALIDATE("Cost Object");
        FIELDCAPTION(Element) : TmpHourLine.VALIDATE(Element);
        FIELDCAPTION("Extension Contract") : TmpHourLine.VALIDATE("Extension Contract");
        FIELDCAPTION("Wage Component") : TmpHourLine.VALIDATE("Wage Component");

        {
        FIELDCAPTION(Monday) : TmpHourLine.VALIDATE(Monday);
        FIELDCAPTION(Tuesday) : TmpHourLine.VALIDATE(Tuesday);
        FIELDCAPTION(Wednesday) : TmpHourLine.VALIDATE(Wednesday);
        FIELDCAPTION(Thursday) : TmpHourLine.VALIDATE(Thursday);
        FIELDCAPTION(Friday) : TmpHourLine.VALIDATE(Friday);
        FIELDCAPTION(Saturday) : TmpHourLine.VALIDATE(Saturday);
        FIELDCAPTION(Sunday) : TmpHourLine.VALIDATE(Sunday);
        }
        FIELDCAPTION(Monday) : TmpHourLine.Monday := Monday;
        FIELDCAPTION(Tuesday) : TmpHourLine.Tuesday := Tuesday;
        FIELDCAPTION(Wednesday) : TmpHourLine.Wednesday := Wednesday;
        FIELDCAPTION(Thursday) : TmpHourLine.Thursday := Thursday;
        FIELDCAPTION(Friday) : TmpHourLine.Friday := Friday;
        FIELDCAPTION(Saturday) : TmpHourLine.Saturday := Saturday;
        FIELDCAPTION(Sunday) : TmpHourLine.Sunday := Sunday;

      END;
      TRANSFERFIELDS(TmpHourLine);
      Type := TmpHourLine.Type;
      Amount := TmpHourLine.Amount;  //* Not the same fieldno (570/270)
    END;

    PROCEDURE UpdateHourLine@1210190000(UpdateAction@1210190001 : 'Insert,Modify,Delete,Rename');
    VAR
      HrAccConnectionNos@1100525000 : Record 11020451;
      HourEmplHead@1100525001 : Record 11012360;
      HourEmplLine@1100525003 : Record 11012361;
      HourProjHead@1100525002 : Record 11012362;
      LineNo@1210190007 : Integer;
    BEGIN
      CASE UpdateAction OF
        UpdateAction::Insert:
          BEGIN
            IF ("Employee No." = '') AND (Type <> Type::UnmannedPlant) THEN BEGIN  //* Only Empl. empty for 'Unmanned Plant'
              "Connection No." := 0;
              EXIT;
            END;
            HourProjHead.GET(Year, Week, "Receiving Company", "Project No.");

            //Create Hour Employee Header if necessary
            IF NOT HourEmplHead.GET(Year, Week, "Supplying Company", "Employee No.") THEN BEGIN
              HourEmplHead.TRANSFERFIELDS(HourProjHead);
              HourEmplHead."Supplying Company" := "Supplying Company";
              HourEmplHead.VALIDATE("Employee No.", "Employee No.");
              HourEmplHead.INSERT;
            END;

            //Validate
            ValidateFields('INSERT');

            //Determine Connection No
            "Connection No." := HrAccConnectionNos.GetConnectionNo();

            //Create Hour Employee Line
            HourEmplLine.RESET;
            HourEmplLine.SETRANGE(Year, Year);
            HourEmplLine.SETRANGE(Week, Week);
            HourEmplLine.SETRANGE("Supplying Company","Supplying Company");
            HourEmplLine.SETRANGE("Employee No.", "Employee No.");
            IF HourEmplLine.FINDLAST THEN
              LineNo := HourEmplLine."Line No." + 10000
            ELSE
              LineNo := 10000;

            CLEAR(HourEmplLine);
            HourEmplLine.TRANSFERFIELDS(Rec);
            HourEmplLine."Line No." := LineNo;
            HourEmplLine.Type := Type;      //* Not the same fieldno (75/250)
            HourEmplLine.Amount := Amount;  //* Not the same fieldno (570/270)
            IF Type = Type::Indirect THEN BEGIN
              HourEmplLine."Object No." := "Cost Code";
              HourEmplLine."Object Name" := "Cost Code Description";
            END ELSE BEGIN
              HourProjHead.CALCFIELDS("Project Description");
              HourEmplLine.FillDepartmentCode; //130619, kzwerver, n, #C008055
              HourEmplLine."Object Name" := HourProjHead."Project Description";
            END;
            HourEmplLine.INSERT;
          END;
        UpdateAction::Modify:
          BEGIN
            ValidateFields('MODIFY');
            IF "Connection No." = 0 THEN
              UpdateHourLine(UpdateAction::Insert)
            ELSE BEGIN
              HourEmplLine.RESET;
              HourEmplLine.SETCURRENTKEY("Connection No.");
              HourEmplLine.SETRANGE("Connection No.", "Connection No.");
              IF NOT HourEmplLine.FINDFIRST THEN
                UpdateHourLine(UpdateAction::Insert)
              ELSE BEGIN
                IF ("Employee No." = HourEmplLine."Employee No.") AND
                   ("Supplying Company" = HourEmplLine."Supplying Company")
                THEN BEGIN
                  HourEmplLine.TRANSFERFIELDS(Rec,FALSE);
                  HourEmplLine.Type := Type;      //* Not the same fieldno (75/250)
                  HourEmplLine.Amount := Amount;  //* Not the same fieldno (570/270)
                  IF Type = Type::Indirect THEN BEGIN
                    HourEmplLine."Object No." := "Cost Code";
                    HourEmplLine."Object Name" := "Cost Code Description";
                  END ELSE BEGIN
                    HourProjHead.GET(Year, Week, "Receiving Company", "Project No.");
                    HourProjHead.CALCFIELDS("Project Description");
                    HourEmplLine.FillDepartmentCode; //C050001
                    HourEmplLine."Object Name" := HourProjHead."Project Description";
                  END;
                  HourEmplLine.MODIFY;
                END ELSE BEGIN
                  UpdateHourLine(UpdateAction::Delete);
                  UpdateHourLine(UpdateAction::Insert);
                END;
              END;
            END;
          END;
        UpdateAction::Delete:
          BEGIN
            IF "Connection No." <> 0 THEN BEGIN
              HourEmplLine.RESET;
              HourEmplLine.SETCURRENTKEY("Connection No.");
              HourEmplLine.SETRANGE("Connection No.", "Connection No.");
              IF HourEmplLine.FINDFIRST THEN BEGIN
                HourEmplLine.DELETE;
                HourEmplLine.RESET;
                HourEmplLine.SETRANGE(Year, HourEmplLine.Year);
                HourEmplLine.SETRANGE(Week, HourEmplLine.Week);
                HourEmplLine.SETRANGE("Supplying Company", HourEmplLine."Supplying Company");
                HourEmplLine.SETRANGE("Employee No.", HourEmplLine."Employee No.");
                IF NOT HourEmplLine.FINDFIRST THEN BEGIN
                  IF HourEmplHead.GET(
                    HourEmplLine.Year, HourEmplLine.Week, HourEmplLine."Supplying Company", HourEmplLine."Employee No.")
                  THEN
                    HourEmplHead.DELETE;
                END;
              END;
            END;
          END;
        UpdateAction::Rename:
          BEGIN
            UpdateHourLine(UpdateAction::Delete);
            UpdateHourLine(UpdateAction::Insert);
          END;
      END;
    END;

    LOCAL PROCEDURE CreateHourLineForGrade@1100528401(DayInt@1100528402 : Integer;HourLineKilometers@1100528401 : Decimal);
    BEGIN
      SiteMngmntHoursSetup.GET;
      CASE TRUE OF
        SiteMngmntHoursSetup."Kilometers One Way Trip" AND SiteMngmntHoursSetup."Kilometer Grades One Way Trip":
          CheckGrades(DayInt, HourLineKilometers);
        SiteMngmntHoursSetup."Kilometers One Way Trip" AND NOT SiteMngmntHoursSetup."Kilometer Grades One Way Trip":
          CheckGrades(DayInt, HourLineKilometers * 2);
        NOT SiteMngmntHoursSetup."Kilometers One Way Trip" AND SiteMngmntHoursSetup."Kilometer Grades One Way Trip":
          CheckGrades(DayInt, HourLineKilometers / 2);
        NOT SiteMngmntHoursSetup."Kilometers One Way Trip" AND NOT SiteMngmntHoursSetup."Kilometer Grades One Way Trip":
          CheckGrades(DayInt, HourLineKilometers);
      END;
    END;

    PROCEDURE CheckGrades@1100485000(DayInt@1100485001 : Integer;TempDec@1100485002 : Decimal);
    VAR
      LvSiteMngmntKmGrades@1100485000 : Record 11012442;
      CUSiteMngMntHours@1100485005 : Codeunit 11012178;
      lHoursDec@1100485004 : Decimal;
      lCostObjectCode@1100485003 : Code[10];
      lvProjHourLine@1100525000 : Record 11012363;
    BEGIN
      IF Type = Type::UnmannedPlant THEN
        EXIT;

      IF "Component Type" <> "Component Type"::Kilometers THEN
        EXIT;

      CASE DayInt OF
        1: IF "Travel Hours Monday" = "Travel Hours Monday"::"Work to Work" THEN
             EXIT;
        2: IF "Travel Hours Tuesday" = "Travel Hours Tuesday"::"Work to Work" THEN
             EXIT;
        3: IF "Travel Hours Wednesday" = "Travel Hours Wednesday"::"Work to Work" THEN
             EXIT;
        4: IF "Travel Hours Thursday" = "Travel Hours Thursday"::"Work to Work" THEN
             EXIT;
        5: IF "Travel Hours Friday" = "Travel Hours Friday"::"Work to Work" THEN
             EXIT;
        6: IF "Travel Hours Saturday" = "Travel Hours Saturday"::"Work to Work" THEN
             EXIT;
        7: IF "Travel Hours Sunday" = "Travel Hours Sunday"::"Work to Work" THEN
             EXIT;
      END;
      EmployeeRec.CHANGECOMPANY("Supplying Company");
      EmployeeRec.GET("Employee No.");
      EmployeeRec.TESTFIELD(CAO);
      LvSiteMngmntKmGrades.SETRANGE(CAO,EmployeeRec.CAO);
      LvSiteMngmntKmGrades.SETRANGE(Vehicle,Vehicle);
      LvSiteMngmntKmGrades.SETRANGE("Extra Expense",FALSE);
      CASE DayInt OF
        1: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Monday");
        2: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Tuesday");
        3: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Wednesday");
        4: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Thursday");
        5: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Friday");
        6: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Saturday");
        7: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Sunday");
      END;
       LvSiteMngmntKmGrades.SETFILTER(Kilometerstaffel,'>=%1',TempDec);
      IF NOT LvSiteMngmntKmGrades.FINDFIRST THEN BEGIN
        LvSiteMngmntKmGrades.RESET;
        LvSiteMngmntKmGrades.SETCURRENTKEY(Vehicle,Type,Kilometerstaffel);
        LvSiteMngmntKmGrades.SETRANGE(CAO,EmployeeRec.CAO);
        LvSiteMngmntKmGrades.SETRANGE(Vehicle,Vehicle);
        LvSiteMngmntKmGrades.SETFILTER(Kilometerstaffel,'<=%1',TempDec);
        IF LvSiteMngmntKmGrades.FINDLAST THEN
          CUSiteMngMntHours.StartTravelExceptionForm(lHoursDec,lCostObjectCode);
        IF lHoursDec > 0 THEN BEGIN
          HourProjLine.INIT;
          HourProjLine.Type := Type;
          HourProjLine.Year := Year;
          HourProjLine.Week := Week;
          HourProjLine."Receiving Company" := "Receiving Company";
          HourProjLine."Supplying Company" := "Supplying Company";
          IF "Cost Code" <> '' THEN
            HourProjLine."Cost Code" := "Cost Code";
          HourProjLine."Employee No." := "Employee No.";
          HourProjLine."Project No." := "Project No.";
          HourProjLine.VALIDATE("Cost Object",LvSiteMngmntKmGrades."Cost Object");
          HourProjLine."Wage Component" := LvSiteMngmntKmGrades."Wage Component";
          HourProjLine."Component Type" := HourProjLine."Component Type"::Hours;
          lvProjHourLine.SETRANGE(Year,Year);
          lvProjHourLine.SETRANGE(Week,Week);
          lvProjHourLine.SETRANGE("Receiving Company","Receiving Company");
          lvProjHourLine.SETRANGE("Project No.","Project No.");
          IF lvProjHourLine.FINDLAST THEN
            HourProjLine."Line No." := lvProjHourLine."Line No." + 1000;
          CASE DayInt OF
            1: HourProjLine.Monday := lHoursDec;
            2: HourProjLine.Tuesday := lHoursDec;
            3: HourProjLine.Wednesday := lHoursDec;
            4: HourProjLine.Thursday := lHoursDec;
            5: HourProjLine.Friday := lHoursDec;
            6: HourProjLine.Saturday := lHoursDec;
            7: HourProjLine.Sunday := lHoursDec;
          END;
          HourProjLine.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE GetLeaveTypeTotal@1100525000() : Decimal;
    VAR
      LeaveLedgEntry@1100525000 : Record 11020235;
    BEGIN
      //**4PS
      IF "Leave Type" <> '' THEN
      BEGIN
        LeaveLedgEntry.RESET;
        LeaveLedgEntry.SETCURRENTKEY("Employee No.","Leave Type");
        LeaveLedgEntry.SETRANGE("Employee No.", "Employee No.");
        LeaveLedgEntry.SETRANGE("Leave Type", "Leave Type");
        LeaveLedgEntry.CALCSUMS("No. of Hours");
        EXIT(LeaveLedgEntry."No. of Hours");
      END;
      EXIT(0);
    END;

    PROCEDURE SetDefaultDriverType@1100525007(DriverTypeOpt@1100525000 : 'Passenger,Driver without passengers,Driver with passengers');
    BEGIN
      "Travel Hours Monday" := DriverTypeOpt;
      "Travel Hours Tuesday" := DriverTypeOpt;
      "Travel Hours Wednesday" := DriverTypeOpt;
      "Travel Hours Thursday" := DriverTypeOpt;
      "Travel Hours Friday" := DriverTypeOpt;
      "Travel Hours Saturday" := DriverTypeOpt;
      "Travel Hours Sunday" := DriverTypeOpt;
    END;

    PROCEDURE FillDefaultPlantCompany@1100525004();
    VAR
      PlantMgtCompRec@1100525000 : Record 11020586;
      TmpPlantMgtCompRec@1100525002 : TEMPORARY Record 11020586;
      NoOfPlantComps@1100525001 : Integer;
    BEGIN
      PlantMgtCompRec."Plant Company" := PlantMgtCompRec.GetPlantCompany(TRUE,NoOfPlantComps,"Receiving Company");
      IF (PlantMgtCompRec."Plant Company" <> '') AND (NoOfPlantComps = 1) THEN BEGIN
        "Plant Company" := PlantMgtCompRec."Plant Company";
        IF Type = Type::UnmannedPlant THEN
          "Supplying Company" := "Plant Company";
        EXIT;
      END;

      IF (NoOfPlantComps > 1) AND ("Project No." <> '') THEN BEGIN
        IF PlantMgtCompRec.GetPlantCompaniesForProject("Project No.", TmpPlantMgtCompRec,"Receiving Company", FALSE) = 1 THEN BEGIN
          "Plant Company" := TmpPlantMgtCompRec."Plant Company";
          IF Type = Type::UnmannedPlant THEN
            "Supplying Company" := "Plant Company";
        END ELSE BEGIN
          IF "Plant Company" = '' THEN BEGIN
            TmpPlantMgtCompRec.SETRANGE(Default, TRUE);
            IF TmpPlantMgtCompRec.FINDFIRST THEN BEGIN
              "Plant Company" := TmpPlantMgtCompRec."Plant Company";
              IF Type = Type::UnmannedPlant THEN
                "Supplying Company" := "Plant Company";
            END;
          END;
        END;
      END;
    END;

    PROCEDURE FillDefaultPlantLoc@1100525012() : Code[20];
    VAR
      lvPlantLocRec@1100525001 : Record 11012554;
      lvDefPlantLoc@1100525002 : Code[20];
      lvProjCompany@1100525000 : Text[30];
    BEGIN
      //* Default location only when there is only 1 plant location of the project.
      IF "Plant Company" = '' THEN
        EXIT('');
      IF "Plant Company" <> "Receiving Company" THEN
        lvProjCompany := "Receiving Company";
      lvPlantLocRec.CHANGECOMPANY("Plant Company");
      lvPlantLocRec.SETCURRENTKEY("Company Name", "Project No.", "Service Order No.", "Employee No.");
      lvPlantLocRec.SETRANGE("Project No.", "Project No.");
      lvPlantLocRec.SETRANGE("Company Name", lvProjCompany);
      lvPlantLocRec.SETRANGE(Blocked, FALSE);
      IF lvPlantLocRec.FINDFIRST THEN BEGIN
        lvDefPlantLoc := lvPlantLocRec.Code;
        IF lvPlantLocRec.NEXT <> 0 THEN
          lvDefPlantLoc := '';
      END;
      EXIT(lvDefPlantLoc);
    END;

    PROCEDURE GetPlantDescription@1100525002() : Text[50];
    VAR
      lvPlantTypeRec@1100525000 : Record 11012551;
      lvPlantNoRec@1100525001 : Record 11012552;
    BEGIN
      IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) OR ("Plant Type" = '') THEN
        EXIT('');
      lvPlantTypeRec.CHANGECOMPANY("Plant Company");
      lvPlantNoRec.CHANGECOMPANY("Plant Company");
      IF ("Plant No." <> '') THEN BEGIN
        IF lvPlantNoRec.GET("Plant Type", "Plant No.") THEN BEGIN
          IF (lvPlantNoRec.Description <> '') THEN
            EXIT(lvPlantNoRec.Description);
        END;
      END;
      IF lvPlantTypeRec.GET("Plant Type") THEN
        EXIT(lvPlantTypeRec.Description);
      EXIT('');
    END;

    PROCEDURE LookupPlantCompany@1100525006();
    VAR
      PlantMgtCompRec@1100525001 : Record 11020586;
      TmpPlantMgtCompRec@1100525002 : TEMPORARY Record 11020586;
      NoOfPlantComps@1100525000 : Integer;
    BEGIN
      IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) THEN
        EXIT;
      PlantMgtCompRec.GetPlantCompany(TRUE, NoOfPlantComps, "Receiving Company");
      IF PlantMgtCompRec.GetPlantCompaniesForProject("Project No.", TmpPlantMgtCompRec, "Receiving Company", FALSE) = 0 THEN BEGIN
        PlantMgtCompRec.CHANGECOMPANY("Receiving Company");
        PlantMgtCompRec."Plant Company" := "Plant Company";
        PAGE.RUNMODAL(0, PlantMgtCompRec);
      END ELSE BEGIN
        TmpPlantMgtCompRec."Plant Company" := "Plant Company";
        IF NOT CheckUnmannedPlantHourLineOpen() THEN BEGIN
           PAGE.RUNMODAL(0, TmpPlantMgtCompRec)
        END ELSE BEGIN
          IF PAGE.RUNMODAL(0, TmpPlantMgtCompRec) = ACTION::LookupOK THEN
            VALIDATE("Plant Company", TmpPlantMgtCompRec."Plant Company");
        END;
      END;
    END;

    PROCEDURE LookupPlantLocation@1100525010();
    VAR
      lvPlantLocRec@1100525001 : Record 11012554;
      lvProjCompany@1100525000 : Text[30];
    BEGIN
      IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) THEN
        EXIT;
      IF "Plant Company" <> "Receiving Company" THEN
        lvProjCompany := "Receiving Company";

      lvPlantLocRec.CHANGECOMPANY("Plant Company");
      lvPlantLocRec.SETCURRENTKEY("Company Name", "Project No.", "Service Order No.", "Employee No.");
      lvPlantLocRec.FILTERGROUP(9);
      lvPlantLocRec.SETRANGE("Project No.", "Project No.");
      lvPlantLocRec.SETRANGE("Company Name", lvProjCompany);
      lvPlantLocRec.FILTERGROUP(0);
      lvPlantLocRec.Code := "Plant Location";
      lvPlantLocRec."Project No." := "Project No.";
      lvPlantLocRec."Company Name" := lvProjCompany;
      IF NOT CheckUnmannedPlantHourLineOpen() THEN
        PAGE.RUNMODAL(0, lvPlantLocRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, lvPlantLocRec) = ACTION::LookupOK THEN
          VALIDATE("Plant Location", lvPlantLocRec.Code);
      END;
    END;

    PROCEDURE LookupPlantType@1100525001();
    VAR
      PlantSetup@1100529900 : Record 11012550;
      lvPlantTypeRec@1100525000 : Record 11012551;
    BEGIN
      IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) THEN
        EXIT;
      PlantSetup.CHANGECOMPANY("Plant Company");
      lvPlantTypeRec.CHANGECOMPANY("Plant Company");
      PlantSetup.GET;
      IF NOT PlantSetup."No Filter on Hr. Acc. Type" THEN BEGIN
        IF Type = Type::UnmannedPlant THEN  //C-028223 (Soft filter)
          lvPlantTypeRec.SETRANGE("Hour Accounting Type", lvPlantTypeRec."Hour Accounting Type"::Unmanned)
        ELSE
          lvPlantTypeRec.SETRANGE("Hour Accounting Type", lvPlantTypeRec."Hour Accounting Type"::Manned);
      END;
      lvPlantTypeRec.Code := "Plant Type";
      IF NOT CheckUnmannedPlantHourLineOpen() THEN
        PAGE.RUNMODAL(0, lvPlantTypeRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, lvPlantTypeRec) = ACTION::LookupOK THEN
          VALIDATE("Plant Type", lvPlantTypeRec.Code);
      END;
    END;

    PROCEDURE LookupPlantNo@1100525003();
    VAR
      lvPlantNoRec@1100525000 : Record 11012552;
    BEGIN
      IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) THEN
        EXIT;
      lvPlantNoRec.CHANGECOMPANY("Plant Company");
      lvPlantNoRec.SETRANGE("Plant Type", "Plant Type");
      lvPlantNoRec."Plant Type" := "Plant Type";
      lvPlantNoRec."No." := "Plant No.";
      IF NOT CheckUnmannedPlantHourLineOpen() THEN
        PAGE.RUNMODAL(0, lvPlantNoRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, lvPlantNoRec) = ACTION::LookupOK THEN
          VALIDATE("Plant No.", lvPlantNoRec."No.");
      END;
    END;

    PROCEDURE LookupCostCompPlant@1100525005();
    VAR
      lvPlantCostCompRec@1100525000 : Record 11012575;
    BEGIN
      IF Type <> Type::Plant THEN
        EXIT;
      lvPlantCostCompRec.CHANGECOMPANY("Plant Company");
      lvPlantCostCompRec.Code := "Cost Component Plant";
      IF PAGE.RUNMODAL(0, lvPlantCostCompRec) = ACTION::LookupOK THEN
        VALIDATE("Cost Component Plant", lvPlantCostCompRec.Code);
    END;

    PROCEDURE LookupShiftCode@1210190005(EditableMode@1210190000 : Boolean);
    VAR
      ProjShift@1100525000 : Record 11125538;
    BEGIN
      //*DP00033
      ProjShift.CHANGECOMPANY("Receiving Company");
      ProjShift.FILTERGROUP(9);
      ProjShift.SETRANGE("Project No.", "Project No.");
      ProjShift.SETFILTER("Shift Code", '<>%1', '');  //* Only Shift level
      ProjShift.FILTERGROUP(0);
      ProjShift."Project No." := "Project No.";
      ProjShift."Shift Code" := "Shift Code";
      IF PAGE.RUNMODAL(0, ProjShift) = ACTION::LookupOK THEN BEGIN
        IF EditableMode AND (ProjShift."Shift Code" <> '') THEN
          VALIDATE("Shift Code", ProjShift."Shift Code");
      END;
    END;

    PROCEDURE CheckDeleteUnmandPlantHourLine@1100525008(IUpdateAction@1100525000 : Option);
    VAR
      lvXRec@1100525001 : Record 11012363;
      lvSiteMgtHoursCU@1100525002 : Codeunit 11012179;
      lvText001@1100525003 : TextConst 'ENU=Plant hours of the unmanned plant are already posted, modify not allowed.;NOR=Maskintimer for ubemannet maskin er allerede bokfõrt, endring ikke tillatt.;SVE=Maskintimmar har redan bokfîrts fîr den obemannade Maskinen. éndringar Ñr inte tillÜtna.';
    BEGIN
      IF "Plant Hour Rev. Line No." = 0 THEN
        EXIT;
      IF NOT lvXRec.GET(Year, Week, "Receiving Company", "Project No." , "Line No.") THEN
        EXIT;
      IF (lvXRec.Type <> lvXRec.Type::UnmannedPlant) THEN
        EXIT;

      CASE IUpdateAction OF
        UpdateAction::Modify:
          BEGIN
            IF NOT lvSiteMgtHoursCU.CheckPlantHourRevLineOpen(
              lvXRec.Year, lvXRec.Week, lvXRec."Plant Type", lvXRec."Plant No.",
              lvXRec."Plant Hour Rev. Line No.", lvXRec."Plant Company")
            THEN
              ERROR(lvText001);
            lvSiteMgtHoursCU.DeletePlantHourRevLineOpen(
              lvXRec.Year, lvXRec.Week, lvXRec."Plant Type", lvXRec."Plant No.",
              lvXRec."Plant Hour Rev. Line No.", lvXRec."Plant Company");
            "Plant Hour Rev. Line No." := 0;
          END;
        UpdateAction::Delete:
          BEGIN
            lvSiteMgtHoursCU.DeletePlantHourRevLineOpen(
              lvXRec.Year, lvXRec.Week, lvXRec."Plant Type", lvXRec."Plant No.",
              lvXRec."Plant Hour Rev. Line No.", lvXRec."Plant Company");
          END;
      END;
    END;

    PROCEDURE CheckUnmannedPlantHourLineOpen@1100525009() : Boolean;
    VAR
      lvSiteMgtHoursCU@1100525002 : Codeunit 11012179;
    BEGIN
      IF (Type <> Type::UnmannedPlant) OR ("Plant Hour Rev. Line No." = 0) THEN
        EXIT(TRUE);

      IF NOT lvSiteMgtHoursCU.CheckPlantHourRevLineOpen(
        Year, Week, "Plant Type", "Plant No.", "Plant Hour Rev. Line No.", "Plant Company")
      THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE CheckResetOnComponentType@1210190006();
    BEGIN
      //*C-027136
      IF ("Component Type" = "Component Type"::Expenses) THEN BEGIN
        Monday := 0;
        Tuesday := 0;
        Wednesday := 0;
        Thursday := 0;
        Friday := 0;
        Saturday := 0;
        Sunday := 0;
        TotalHours;
      END ELSE BEGIN
        Quantity := 0;
        Amount := 0;
        "Posting Date" := 0D;
      END;
    END;

    PROCEDURE CheckSelectionEmployeeByProjWk@1210190002(EmplNo@1210190002 : Code[20];ErrorMode@1210190001 : Boolean) : Boolean;
    VAR
      ProjHrEmplSel@1210190000 : Record 11126058;
    BEGIN
      IF EmplNo = '' THEN
        EXIT(TRUE);
      SiteMngmntHoursSetup.GET;
      IF NOT SiteMngmntHoursSetup."Sel. Empl./Codes by Proj./Wk" THEN
        EXIT(TRUE);

      ProjHrEmplSel.SETRANGE(Year, Year);
      ProjHrEmplSel.SETRANGE(Week, Week);
      ProjHrEmplSel.SETRANGE("Receiving Company", "Receiving Company");
      ProjHrEmplSel.SETRANGE("Project No.", "Project No.");
      ProjHrEmplSel.SETRANGE(Company, "Supplying Company");
      ProjHrEmplSel.SETRANGE("Employee No.", EmplNo);
      ProjHrEmplSel.SETRANGE(Select, TRUE);
      IF ProjHrEmplSel.ISEMPTY THEN BEGIN
        IF ErrorMode THEN
          ERROR(Text001,
            FIELDCAPTION("Employee No."), EmplNo + '(' + "Supplying Company" + ')',
            "Project No.", "Receiving Company", Year, Week);
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CheckSelectionCostObjByProjWk@1210190003(CostObject@1210190002 : Code[20];ErrorMode@1210190001 : Boolean) : Boolean;
    VAR
      ProjHrCostObjSel@1210190000 : Record 11126059;
    BEGIN
      IF CostObject = '' THEN
        EXIT(TRUE);
      SiteMngmntHoursSetup.GET;
      IF NOT SiteMngmntHoursSetup."Sel. Empl./Codes by Proj./Wk" THEN
        EXIT(TRUE);

      ProjHrCostObjSel.SETRANGE(Year, Year);
      ProjHrCostObjSel.SETRANGE(Week, Week);
      ProjHrCostObjSel.SETRANGE("Receiving Company", "Receiving Company");
      ProjHrCostObjSel.SETRANGE("Project No.", "Project No.");
      ProjHrCostObjSel.SETRANGE("Cost Object", CostObject);
      ProjHrCostObjSel.SETRANGE(Select, TRUE);
      IF ProjHrCostObjSel.ISEMPTY THEN BEGIN
        IF ErrorMode THEN
          ERROR(Text001, FIELDCAPTION("Cost Object"), CostObject, "Project No.", "Receiving Company", Year, Week);
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CheckSelectionCostCodeByProjWk@1210190004(CostCode@1210190002 : Code[20];ErrorMode@1210190001 : Boolean) : Boolean;
    VAR
      ProjHrCostCodeSel@1210190000 : Record 11126060;
    BEGIN
      IF CostCode = '' THEN
        EXIT(TRUE);
      SiteMngmntHoursSetup.GET;
      IF NOT SiteMngmntHoursSetup."Sel. Empl./Codes by Proj./Wk" THEN
        EXIT(TRUE);

      ProjHrCostCodeSel.SETRANGE(Year, Year);
      ProjHrCostCodeSel.SETRANGE(Week, Week);
      ProjHrCostCodeSel.SETRANGE("Receiving Company", "Receiving Company");
      ProjHrCostCodeSel.SETRANGE("Project No.", "Project No.");
      ProjHrCostCodeSel.SETRANGE("Cost Code", CostCode);
      ProjHrCostCodeSel.SETRANGE(Select, TRUE);
      IF ProjHrCostCodeSel.ISEMPTY THEN BEGIN
        IF ErrorMode THEN
          ERROR(Text001, FIELDCAPTION("Cost Code"), CostCode, "Project No.", "Receiving Company", Year, Week);
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE MarkSelectionEmployeeByProjWk@1210190010(VAR Employees@1210190000 : Record 11012357);
    VAR
      ProjHrEmplSel@1210190001 : Record 11126058;
    BEGIN
      SiteMngmntHoursSetup.GET;
      IF NOT SiteMngmntHoursSetup."Sel. Empl./Codes by Proj./Wk" THEN
        EXIT;

      ProjHrEmplSel.SETRANGE(Year, Year);
      ProjHrEmplSel.SETRANGE(Week, Week);
      ProjHrEmplSel.SETRANGE("Receiving Company", "Receiving Company");
      ProjHrEmplSel.SETRANGE("Project No.", "Project No.");
      IF ProjHrEmplSel.FINDSET THEN BEGIN
        REPEAT
          IF Employees.GET(ProjHrEmplSel.Company, ProjHrEmplSel."Employee No.") THEN
            Employees.MARK(TRUE);
        UNTIL ProjHrEmplSel.NEXT = 0;
      END;

      Employees.MARKEDONLY(TRUE);
      IF Employees.FINDFIRST THEN;
    END;

    PROCEDURE MarkSelectionCostObjByProjWk@1210190011(VAR DimVal@1210190000 : Record 349);
    VAR
      ProjHrCostObjSel@1210190001 : Record 11126059;
    BEGIN
      SiteMngmntHoursSetup.GET;
      IF NOT SiteMngmntHoursSetup."Sel. Empl./Codes by Proj./Wk" THEN
        EXIT;

      ProjHrCostObjSel.SETRANGE(Year, Year);
      ProjHrCostObjSel.SETRANGE(Week, Week);
      ProjHrCostObjSel.SETRANGE("Receiving Company", "Receiving Company");
      ProjHrCostObjSel.SETRANGE("Project No.", "Project No.");
      IF ProjHrCostObjSel.FINDSET THEN BEGIN
        REPEAT
          //* Filter on "Global Dimension No." = 2 is (/must be) already set before calling this function
          DimVal.SETRANGE(Code, ProjHrCostObjSel."Cost Object");
          IF DimVal.FINDFIRST THEN
            DimVal.MARK(TRUE);
        UNTIL ProjHrCostObjSel.NEXT = 0;
        DimVal.SETRANGE(Code);  //* Reset filter
      END;

      DimVal.MARKEDONLY(TRUE);
      IF DimVal.FINDFIRST THEN;
    END;

    PROCEDURE MarkSelectionCostCodeByProjWk@1210190012(VAR HoursObjects@1210190000 : Record 11012359);
    VAR
      ProjHrCostCodeSel@1210190001 : Record 11126060;
    BEGIN
      SiteMngmntHoursSetup.GET;
      IF NOT SiteMngmntHoursSetup."Sel. Empl./Codes by Proj./Wk" THEN
        EXIT;

      ProjHrCostCodeSel.SETRANGE(Year, Year);
      ProjHrCostCodeSel.SETRANGE(Week, Week);
      ProjHrCostCodeSel.SETRANGE("Receiving Company", "Receiving Company");
      ProjHrCostCodeSel.SETRANGE("Project No.", "Project No.");
      IF ProjHrCostCodeSel.FINDSET THEN BEGIN
        REPEAT
          IF HoursObjects.GET("Receiving Company", HoursObjects.Type::"Cost Code", ProjHrCostCodeSel."Cost Code") THEN
            HoursObjects.MARK(TRUE);
        UNTIL ProjHrCostCodeSel.NEXT = 0;
      END;

      HoursObjects.MARKEDONLY(TRUE);
      IF HoursObjects.FINDFIRST THEN;
    END;

    PROCEDURE ValidatePlantNo@1100525031();
    VAR
      PlantSetup@1100525000 : Record 11012550;
      PlantType@1100525001 : Record 11012551;
    BEGIN
      //**4PS
      IF ("Plant Type" <> '') AND ("Plant No." = '') THEN BEGIN
        PlantSetup.GET;
        IF PlantSetup."Posting on Unique Plant No." THEN
          IF PlantType.GET("Plant Type") THEN
            IF NOT PlantType.Bulk THEN
              IF PlantSetup."Cost Component Acquisition" <> "Cost Component Plant" THEN
                TESTFIELD("Plant No.");
      END;
    END;

    LOCAL PROCEDURE IsExternalEmployee@1100528507() : Boolean;
    VAR
      Employee@1100528500 : Record 5200;
    BEGIN
      //DP010101
      IF NOT Employee.GET("Employee No.") THEN
        EXIT;

      EXIT(Employee.External);
    END;

    PROCEDURE CheckIfReleased@1100528500();
    BEGIN
      HourProjHeader.GET(Year,Week,"Receiving Company","Project No.");
      HourProjHeader.TESTFIELD(Released,FALSE);
    END;

    BEGIN
    {
      diekus, 15-01-13:
      - set tablerelation=NO for Cost Object, because of link to Receiving Company (of header line)
      - change OnValidate + OnLookup reading DimValRec with change company.
    }
    END.
  }
}

