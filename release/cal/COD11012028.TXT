OBJECT Codeunit 11012028 Generate Days
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11012084;
    Permissions=TableData 11012085=rimd;
    OnRun=BEGIN
            PostedHourHeader.COPY(Rec);
            Code;
          END;

  }
  CODE
  {
    VAR
      Text000@11012019 : TextConst 'DEU=Stundenerfassung @1@@@@@@@@@\;ENU=Hour Accounting  @1@@@@@@@@@\;NLD=Urenverantwoording @1@@@@@@@@@\;NOR=Timerapportering  @1@@@@@@@@@\;SVE=Tidrapportering  @1@@@@@@@@@\';
      Text001@11012020 : TextConst 'DEU=Stundenzeile          @2@@@@@@@@@;ENU=Hour Line          @2@@@@@@@@@;NLD=Urenregel          @2@@@@@@@@@;NOR=Timerad          @2@@@@@@@@@;SVE=Timrad          @2@@@@@@@@@';
      PostedHourHeader@11012000 : Record 11012084;
      PostedHourLine@11012001 : Record 11012085;
      WageCompRec@11012002 : Record 11012014;
      DayLineRec@11012003 : Record 11012085;
      EmployeeRec@11012005 : Record 5200;
      HumanResourcesSetup@11012006 : Record 5218;
      Window@11012011 : Dialog;
      NoOfHourHeaders@11012012 : Integer;
      NoOfPostedHourLines@11012013 : Integer;
      StatusCounter1@11012014 : Integer;
      StatusCounter2@11012015 : Integer;
      LineNoInt@11012016 : Integer;
      DayNorm@11012017 : Decimal;
      ShowDialog@1210190000 : Boolean;
      NotShowDialog@1210190001 : Boolean;
      gvNumHours@1100485000 : ARRAY [3] OF Decimal;
      gvWageComp@1100485001 : ARRAY [3] OF Code[10];
      GenericTempTable@1100528700 : TEMPORARY Record 11020579;
      Text002@1100528701 : TextConst 'DEU=Keine %1 gefunden in %2 fÅr %3 %4.;ENU=No %1 found in %2 for %3 %4.;NLD=Geen %1 gevonden in %2 voor %3 %4.;NOR=Nr %1 funnet i %2 for %3 %4.;SVE=Nr %1 funnen i %2 fîr %3 %4.';
      Text003@1100528702 : TextConst 'DEU=Keine %1 gefunden in %2 fÅr %3 %4, Datum %5.;ENU=No %1 found in %2 for %3 %4, date %5.;NLD=Geen %1 gevonden in %2 voor %3 %4, datum %5.;NOR=Nr %1 funnet i %2 for %3 %4, dato %5.;SVE=Nr %1 funnen i %2 fîr %3 %4, datum %5.';

    LOCAL PROCEDURE Code@1210190001();
    VAR
      DayComponentSettings@1100528701 : Record 11071880;
      UseDayComponentSettings@1100528700 : Boolean;
    BEGIN
      HumanResourcesSetup.GET;

      ShowDialog := NOT NotShowDialog;
      IF ShowDialog THEN
        Window.OPEN(Text000 +
                    Text001);

      UseDayComponentSettings := DayComponentSettings.FINDFIRST;

      GenericTempTable.RESET;
      GenericTempTable.DELETEALL;

      NoOfHourHeaders := PostedHourHeader.COUNT;
      IF PostedHourHeader.FIND('-') THEN BEGIN
        REPEAT
          EmployeeRec.GET(PostedHourHeader."Employee No.");

          //Remove previous recorded Day Lines
          DayLineRec.SETRANGE(Year,PostedHourHeader.Year);
          DayLineRec.SETRANGE(Week,PostedHourHeader.Week);
          DayLineRec.SETRANGE("Employee No.",PostedHourHeader."Employee No.");
          DayLineRec.SETRANGE("Component Type", DayLineRec."Component Type"::Days);
          DayLineRec.DELETEALL;

          StatusCounter1 := StatusCounter1 + 1;
          IF ShowDialog THEN
            Window.UPDATE(1,ROUND(StatusCounter1/NoOfHourHeaders*10000,1));

          PostedHourLine.RESET;
          PostedHourLine.SETRANGE(Year,PostedHourHeader.Year);
          PostedHourLine.SETRANGE(Week,PostedHourHeader.Week);
          PostedHourLine.SETRANGE("Employee No.",PostedHourHeader."Employee No.");
          PostedHourLine.SETRANGE("Component Type", PostedHourLine."Component Type"::Hours);
          PostedHourLine.SETRANGE(External,FALSE);
          PostedHourLine.SETFILTER("Cost Type",'<>%1', PostedHourLine."Cost Type"::Plant);
          NoOfPostedHourLines := PostedHourLine.COUNT;
          StatusCounter2 := 0;
          IF NoOfPostedHourLines > 0 THEN BEGIN
            IF ShowDialog THEN
              Window.UPDATE(2,ROUND(StatusCounter2/NoOfPostedHourLines*10000,1));

            IF (PostedHourHeader."Norm Hours" = 0) OR (PostedHourHeader."Norm Days" = 0) THEN
              DayNorm := 8
            ELSE
              DayNorm := PostedHourHeader."Norm Hours" / PostedHourHeader."Norm Days";

            IF UseDayComponentSettings THEN BEGIN
              SumHoursPerWageCompPerDay;
              CreateDayAccordingSettings;
            END ELSE BEGIN
              IF DayPartsAllowed THEN
                TestDays(0)
              ELSE BEGIN
                //Test Monday
                PostedHourLine.SETFILTER(Monday,'<>%1',0);
                TestDays(1);
                PostedHourLine.SETRANGE(Monday);
                //Test Tuesday
                PostedHourLine.SETFILTER(Tuesday,'<>%1',0);
                TestDays(2);
                PostedHourLine.SETRANGE(Tuesday);
                //Test Wednesday
                PostedHourLine.SETFILTER(Wednesday,'<>%1',0);
                TestDays(3);
                PostedHourLine.SETRANGE(Wednesday);
                //Test Thursday
                PostedHourLine.SETFILTER(Thursday,'<>%1',0);
                TestDays(4);
                PostedHourLine.SETRANGE(Thursday);
                //Test Friday
                PostedHourLine.SETFILTER(Friday,'<>%1',0);
                TestDays(5);
                PostedHourLine.SETRANGE(Friday);
                //Test Saturday
                PostedHourLine.SETFILTER(Saturday,'<>%1',0);
                TestDays(6);
                PostedHourLine.SETRANGE(Saturday);
                //Test Sunday
                PostedHourLine.SETFILTER(Sunday,'<>%1',0);
                TestDays(7);
                PostedHourLine.SETRANGE(Sunday);
              END;
            END;

            IF NOT DayPartsAllowed THEN BEGIN
              IF (HumanResourcesSetup."Salary Application" = HumanResourcesSetup."Salary Application"::Mercash) THEN
                IF PostedHourLine.FINDSET THEN
                  REPEAT
                    IF WageCompRec.GET(PostedHourLine."Wage Component") THEN
                      IF WageCompRec."Extra Day Component" <> '' THEN
                        CreateDay(WageCompRec."Extra Day Component", PostedHourLine."Total Line"/8, 0);
                  UNTIL PostedHourLine.NEXT = 0;
            END;
          END;
        UNTIL PostedHourHeader.NEXT = 0;
      END;

      IF ShowDialog THEN
        Window.CLOSE;
    END;

    LOCAL PROCEDURE TestDays@1(DayInWeek@1100485000 : Integer);
    BEGIN
      IF NOT PostedHourLine.FINDSET THEN
        EXIT;

      CLEAR(gvWageComp);
      CLEAR(gvNumHours);

      REPEAT
        StatusCounter2 := StatusCounter2+1;
        IF ShowDialog THEN
          Window.UPDATE(2,ROUND(StatusCounter2/NoOfPostedHourLines*10000,1));
        IF WageCompRec.GET(PostedHourLine."Wage Component") THEN BEGIN
          IF NOT PostedHourLine.Overtime THEN
            WageCompRec.TESTFIELD("Day Component to Generate");
          IF WageCompRec."Day Component to Generate" <> '' THEN BEGIN
            WageCompRec.GET(WageCompRec."Day Component to Generate");
            WageCompRec.TESTFIELD("Component Type", WageCompRec."Component Type"::Days);
            CASE WageCompRec."Type of Day" OF
              WageCompRec."Type of Day"::Worked:
                FillArrays(1,DayInWeek);
              WageCompRec."Type of Day"::Absence:
                FillArrays(2,DayInWeek);
              WageCompRec."Type of Day"::"Vacation/Day Off":
                FillArrays(3,DayInWeek);
            END;
            IF DayPartsAllowed THEN
              CreateDay(WageCompRec.Code, PostedHourLine."Total Line" / DayNorm, DayInWeek);
          END;
        END;
      UNTIL PostedHourLine.NEXT = 0;

      IF NOT DayPartsAllowed THEN
        CreateDay(GetWageComp, 1, DayInWeek);
    END;

    LOCAL PROCEDURE CreateDay@15(lWageCompCode@1210190000 : Code[10];NumberOfDays@1210190001 : Decimal;DayInWeek@1100485001 : Integer);
    VAR
      PostingDate@1100485000 : Date;
      SplitWeek@1100485002 : Boolean;
      Employer@1100528700 : Record 11012013;
      DateTable@1100528701 : Record 2000000007;
      DateInWeek@1100409000 : Date;
    BEGIN
      IF (lWageCompCode = '') OR (NumberOfDays = 0) THEN
        EXIT;

      PostingDate := PostedHourLine."Posting Date";

      DayLineRec.RESET;
      DayLineRec.SETRANGE(Year,PostedHourLine.Year);
      DayLineRec.SETRANGE(Week,PostedHourLine.Week);
      DayLineRec.SETRANGE("Employee No.",PostedHourLine."Employee No.");
      DayLineRec.SETRANGE("Component Type", DayLineRec."Component Type"::Days);
      DayLineRec.SETRANGE("Wage Component",lWageCompCode);
      DayLineRec.SETRANGE("Document No.", PostedHourLine."Document No.");
      IF HumanResourcesSetup."Book days by day" OR
        ((HumanResourcesSetup."Salary Application" = HumanResourcesSetup."Salary Application"::Mercash) AND SplitWeek) THEN
        DayLineRec.SETRANGE("Posting Date",PostingDate)
      ELSE BEGIN
        IF EmployeeRec.Employer <> '' THEN BEGIN
          Employer.GET(EmployeeRec.Employer);
          IF Employer."Period Type" = Employer."Period Type"::Month THEN BEGIN
            DateTable.RESET;
            DateTable.SETRANGE("Period Type", DateTable."Period Type"::Week);
            DateTable.SETFILTER("Period Start", '%1..%2', CALCDATE('<-7D>',PostingDate), PostingDate);
            DateTable.SETFILTER("Period End", '%1..%2', PostingDate,CALCDATE('<7D>',PostingDate));
            DateTable.FINDFIRST;
            DateInWeek := DateTable."Period Start" + (DayInWeek - 1);

            DateTable.RESET;
            DateTable.SETRANGE("Period Type", DateTable."Period Type"::Month);
            DateTable.SETRANGE("Period Start", DMY2DATE(1, DATE2DMY(DateInWeek, 2), DATE2DMY(DateInWeek, 3)));
            DateTable.FINDFIRST;
            DayLineRec.SETRANGE("Posting Date", DateTable."Period Start", DateTable."Period End");
            IF DayLineRec.FINDFIRST THEN
              PostingDate := DayLineRec."Posting Date"
            ELSE
              PostingDate := DateInWeek;
          END;
        END;
      END;

      IF DayLineRec.FINDFIRST THEN BEGIN
        DayLineRec.Quantity := DayLineRec.Quantity + NumberOfDays;
        DayLineRec.MODIFY;
      END ELSE BEGIN
        DayLineRec.SETRANGE("Component Type");
        DayLineRec.SETRANGE("Wage Component");
        DayLineRec.SETRANGE("Posting Date");
        DayLineRec.SETRANGE("Document No.");
        IF DayLineRec.FINDLAST THEN
          LineNoInt := DayLineRec."Line No." + 10000
        ELSE
          LineNoInt := 10000;
        DayLineRec.INIT;
        DayLineRec.Year := PostedHourLine.Year;
        DayLineRec.Week := PostedHourLine.Week;
        DayLineRec."Employee No." := PostedHourLine."Employee No.";
        DayLineRec."Line No." := LineNoInt;
        DayLineRec."Document No." := PostedHourLine."Document No.";
        DayLineRec."Posting Date" := PostingDate;
        DayLineRec."Wage Component" := lWageCompCode;
        DayLineRec."Component Type" := DayLineRec."Component Type"::Days;
        DayLineRec.Quantity := NumberOfDays;
        DayLineRec.Employer := PostedHourLine.Employer;
        DayLineRec.External := PostedHourLine.External;
        DayLineRec."Calculate Wage Costs" := PostedHourLine."Calculate Wage Costs";
        DayLineRec.Type := DayLineRec.Type::Days;
        DayLineRec."Processing Date" := TODAY; //C048938.n
        DayLineRec.INSERT;
      END;
    END;

    [External]
    PROCEDURE SetDialog@1210190000();
    BEGIN
      NotShowDialog := TRUE;
    END;

    [External]
    PROCEDURE DayPartsAllowed@1210190002() : Boolean;
    BEGIN
      EXIT(
        (HumanResourcesSetup."Salary Application" = HumanResourcesSetup."Salary Application"::Payroll) OR
        ((HumanResourcesSetup."Salary Application" = HumanResourcesSetup."Salary Application"::Paymaster) AND EmployeeRec.UTA) OR
        ((HumanResourcesSetup."Salary Application" = HumanResourcesSetup."Salary Application"::Multipay) AND HumanResourcesSetup."Day Parts allowed (ADP)"));
    END;

    PROCEDURE FillArrays@1100485004(lvType@1100485000 : Integer;DayInWeek@1100485001 : Integer);
    BEGIN
      //db, 14-09-07
      gvWageComp[lvType] := WageCompRec.Code;
      CASE DayInWeek OF
        0: gvNumHours[lvType] := gvNumHours[lvType] + PostedHourLine."Total Line";
        1: gvNumHours[lvType] := gvNumHours[lvType] + PostedHourLine.Monday;
        2: gvNumHours[lvType] := gvNumHours[lvType] + PostedHourLine.Tuesday;
        3: gvNumHours[lvType] := gvNumHours[lvType] + PostedHourLine.Wednesday;
        4: gvNumHours[lvType] := gvNumHours[lvType] + PostedHourLine.Thursday;
        5: gvNumHours[lvType] := gvNumHours[lvType] + PostedHourLine.Friday;
        6: gvNumHours[lvType] := gvNumHours[lvType] + PostedHourLine.Saturday;
        7: gvNumHours[lvType] := gvNumHours[lvType] + PostedHourLine.Sunday;
      END;
    END;

    [External]
    PROCEDURE GetWageComp@1100485000() : Code[10];
    BEGIN
      IF gvNumHours[1] > 0 THEN
        EXIT(gvWageComp[1])
      ELSE
        IF gvNumHours[2] > 0 THEN
          EXIT(gvWageComp[2])
        ELSE
          IF gvNumHours[3] > 0 THEN
            EXIT(gvWageComp[3]);
    END;

    [External]
    PROCEDURE SumHoursPerWageCompPerDay@1100528700();
    BEGIN
      IF NOT PostedHourLine.FINDSET THEN
        EXIT;

      REPEAT
        GenericTempTable.RESET;
        GenericTempTable.SETRANGE("Key Code1", PostedHourLine."Wage Component");
        IF NOT GenericTempTable.FINDFIRST THEN BEGIN
          GenericTempTable.INIT;
          GenericTempTable."Key Code1" := PostedHourLine."Wage Component";
          GenericTempTable.INSERT;
        END;

        GenericTempTable.Dec1 := GenericTempTable.Dec1 + PostedHourLine.Monday;
        GenericTempTable.Dec2 := GenericTempTable.Dec2 + PostedHourLine.Tuesday;
        GenericTempTable.Dec3 := GenericTempTable.Dec3 + PostedHourLine.Wednesday;
        GenericTempTable.Dec4 := GenericTempTable.Dec4 + PostedHourLine.Thursday;
        GenericTempTable.Dec5 := GenericTempTable.Dec5 + PostedHourLine.Friday;
        GenericTempTable.Dec6 := GenericTempTable.Dec6 + PostedHourLine.Saturday;
        GenericTempTable.Dec7 := GenericTempTable.Dec7 + PostedHourLine.Sunday;
        GenericTempTable.MODIFY;
      UNTIL PostedHourLine.NEXT = 0;
    END;

    [External]
    PROCEDURE CreateDayAccordingSettings@1100528705();
    VAR
      DayComponentSettings@1100528700 : Record 11071880;
      DayOfWeek@1100528702 : Integer;
      Hours@1100528701 : Decimal;
      DayCreated@1100528703 : Boolean;
      TotalHours@1100409000 : Decimal;
    BEGIN
      GenericTempTable.RESET;
      IF GenericTempTable.FINDSET THEN
        REPEAT
          DayComponentSettings.SETRANGE("Wage Component", GenericTempTable."Key Code1");
          IF NOT DayComponentSettings.FINDFIRST THEN
            ERROR(Text002,
              DayComponentSettings.FIELDCAPTION("Day Component to Generate"),
              DayComponentSettings.TABLECAPTION,
              DayComponentSettings.FIELDCAPTION("Wage Component"),
              GenericTempTable."Key Code1");
        UNTIL GenericTempTable.NEXT = 0;

      FOR DayOfWeek := 1 TO 7 DO BEGIN
        DayCreated := FALSE;
        DayComponentSettings.RESET;
        IF DayComponentSettings.FINDSET THEN BEGIN
          REPEAT
            DayComponentSettings.TESTFIELD("Day Component to Generate");
            GenericTempTable.RESET;
            GenericTempTable.SETRANGE("Key Code1", DayComponentSettings."Wage Component");
            IF GenericTempTable.FINDFIRST THEN BEGIN
              CASE DayOfWeek OF
                1:
                  BEGIN
                    Hours := GenericTempTable.Dec1;
                    PostedHourLine.SETFILTER(Monday, '<>%1', 0);
                  END;
                2:
                  BEGIN
                    Hours := GenericTempTable.Dec2;
                    PostedHourLine.SETFILTER(Tuesday, '<>%1', 0);
                  END;
                3:
                  BEGIN
                    Hours := GenericTempTable.Dec3;
                    PostedHourLine.SETFILTER(Wednesday, '<>%1', 0);
                  END;
                4:
                  BEGIN
                    Hours := GenericTempTable.Dec4;
                    PostedHourLine.SETFILTER(Thursday, '<>%1', 0);
                  END;
                5:
                  BEGIN
                    Hours := GenericTempTable.Dec5;
                    PostedHourLine.SETFILTER(Friday, '<>%1', 0);
                  END;
                6:
                  BEGIN
                    Hours := GenericTempTable.Dec6;
                    PostedHourLine.SETFILTER(Saturday, '<>%1', 0);
                  END;
                7:
                  BEGIN
                    Hours := GenericTempTable.Dec7;
                    PostedHourLine.SETFILTER(Sunday, '<>%1', 0);
                  END;
              END;
              IF Hours >= DayComponentSettings."Min. Number of Hours" THEN BEGIN
                PostedHourLine.SETRANGE("Wage Component", GenericTempTable."Key Code1");
                PostedHourLine.FINDFIRST;
                CreateDay(DayComponentSettings."Day Component to Generate", 1, DayOfWeek);
                DayCreated := TRUE;
              END;
              PostedHourLine.SETRANGE("Wage Component");
              PostedHourLine.SETRANGE(Monday);
              PostedHourLine.SETRANGE(Tuesday);
              PostedHourLine.SETRANGE(Wednesday);
              PostedHourLine.SETRANGE(Thursday);
              PostedHourLine.SETRANGE(Friday);
              PostedHourLine.SETRANGE(Saturday);
              PostedHourLine.SETRANGE(Sunday);
            END;
          UNTIL (DayComponentSettings.NEXT = 0) OR DayCreated;
          IF NOT DayCreated THEN BEGIN
            TotalHours := 0;
            GenericTempTable.RESET;
            IF GenericTempTable.FINDSET THEN
              REPEAT
                CASE DayOfWeek OF
                  1: TotalHours := TotalHours + GenericTempTable.Dec1;
                  2: TotalHours := TotalHours + GenericTempTable.Dec2;
                  3: TotalHours := TotalHours + GenericTempTable.Dec3;
                  4: TotalHours := TotalHours + GenericTempTable.Dec4;
                  5: TotalHours := TotalHours + GenericTempTable.Dec5;
                  6: TotalHours := TotalHours + GenericTempTable.Dec6;
                  7: TotalHours := TotalHours + GenericTempTable.Dec7;
                END;
              UNTIL GenericTempTable.NEXT = 0;
            IF TotalHours <> 0 THEN
              ERROR(Text003,
                DayComponentSettings.FIELDCAPTION("Day Component to Generate"),
                DayComponentSettings.TABLECAPTION,
                PostedHourLine.FIELDCAPTION("Employee No."),
                PostedHourLine."Employee No.",
                DWY2DATE(DayOfWeek, PostedHourLine.Week, PostedHourLine.Year));
          END;
        END;
      END;
    END;

    BEGIN
    END.
  }
}

