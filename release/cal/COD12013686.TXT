OBJECT Codeunit 12013686 InvoiceXML Generator
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF400000,4PS;
  }
  PROPERTIES
  {
    OnRun=VAR
            _w@1100285001 : Dialog;
            _cnt@1100285000 : Integer;
            _timeout@1100285003 : Time;
            _dtStart@1100285002 : DateTime;
            _startTime@1100285004 : Time;
            _timeTot@1100285005 : Integer;
          BEGIN
            EXApprSetup.GET;
            EXApprSetup.TESTFIELD("Path to New OCR-files");
            CompInfo.GET();
            CompInfo.TESTFIELD("System Indicator Style");

            IF GUIALLOWED() THEN
              IF NOT CONFIRM(Text001,TRUE,EXApprSetup."Path to New OCR-files") THEN ERROR('');

            //_cnt := TIME -000001T;
            //RANDOMIZE(_cnt);

            _dtStart := CREATEDATETIME(TODAY,TIME);
            _startTime := TIME;
            _w.OPEN('@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\'
                   +'ETA:           #2#####################');
            FOR _cnt := 1 TO 1000 DO BEGIN
              _w.UPDATE(1,ROUND(9999 /1000 *_cnt,1));

              Vendor.FINDSET();
              Vendor.NEXT(RANDOM(Vendor.COUNT) -1);
              WHILE (Vendor.Blocked <> Vendor.Blocked::" ") OR (Vendor."VAT Bus. Posting Group" = '') DO BEGIN
                Vendor.FINDSET();
                Vendor.NEXT(RANDOM(Vendor.COUNT) -1);
              END;
              IF NOT Purchaser.GET(Vendor."Purchaser Code") THEN BEGIN
                Purchaser.FINDSET();
                Purchaser.NEXT(RANDOM(Purchaser.COUNT) -1);
              END;

              SalesInvHeader."No." := RandomNoAsCode();
              WHILE NOT SalesInvHeader.INSERT() DO
                SalesInvHeader."No." := RandomNoAsCode();
              SalesInvHeader."Sell-to Customer No." := RandomNoAsCode();
              SalesInvHeader."Bill-to Customer No." := SalesInvHeader."Sell-to Customer No.";
              SalesInvHeader."Bill-to Name" := CompInfo.Name;
              SalesInvHeader."Bill-to Address" := CompInfo.Address;
              SalesInvHeader."Bill-to City" := CompInfo.City;
              SalesInvHeader."Bill-to Contact" := Purchaser.Name;
              SalesInvHeader."Ship-to Name" := CompInfo.Name;
              SalesInvHeader."Ship-to Address" := CompInfo.Address;
              SalesInvHeader."Ship-to City" := CompInfo.City;
              SalesInvHeader."Ship-to Contact" := Purchaser.Name;
              SalesInvHeader."Posting Date" := CALCDATE(FORMAT(RANDOM(22),0,'-<Integer>D'),WORKDATE);
              SalesInvHeader."Payment Terms Code" := Vendor."Payment Terms Code";
              IF NOT PaymentTerms.GET(Vendor."Payment Terms Code") THEN
                EVALUATE(PaymentTerms."Due Date Calculation",'+20D');
              SalesInvHeader."Due Date" := CALCDATE(PaymentTerms."Due Date Calculation",SalesInvHeader."Posting Date");
              SalesInvHeader."VAT Registration No." := CompInfo."VAT Registration No.";
              SalesInvHeader."Sell-to Customer Name" := CompInfo.Name;
              SalesInvHeader."Sell-to Address" := CompInfo.Address;
              SalesInvHeader."Sell-to City" := CompInfo.City;
              SalesInvHeader."Sell-to Contact" := Purchaser.Name;
              SalesInvHeader."Bill-to Post Code" := CompInfo."Post Code";
              SalesInvHeader."Sell-to Post Code" := CompInfo."Post Code";
              SalesInvHeader."Ship-to Post Code" := CompInfo."Post Code";
              IF NOT PayToVendor.GET(Vendor."Pay-to Vendor No.") THEN
                PayToVendor := Vendor;
              SalesInvHeader."Currency Code" := PayToVendor."Currency Code";
              //4PS
              //  SalesInvHeader."Currency Factor" := CurrExchRate.ExchangeRate(SalesInvHeader."Posting Date",SalesInvHeader."Currency Code");
              SalesInvHeader."Currency Factor" := CurrExchRate.ExchangeRate(0,'',SalesInvHeader."Posting Date",SalesInvHeader."Currency Code",FALSE);
              //4PS
              //SalesInvHeader."Currency Factor" := 1;
              SalesInvHeader."No. Printed" := 1;
              SalesInvHeader.MODIFY();
              SalesInvLine."Document No." := SalesInvHeader."No.";
              SalesInvLine."Line No." := 0;

              filename := STRSUBSTNO('%1%2_%3.xml',EXApprSetup."Path to New OCR-files",Vendor."No.",SalesInvHeader."No.");
              imagename := STRSUBSTNO('%1_%2.pdf',Vendor."No.",SalesInvHeader."No.");
              _xmlCreateInvDoc();
              xmlDoc.Save(filename);

              COMMIT();
              SalesInvHeader.SETRECFILTER();
              REPORT.SAVEASPDF(206,EXApprSetup."Path to New OCR-files" +imagename,SalesInvHeader);
              _timeout := TIME +3000;
              WHILE (NOT EXISTS(EXApprSetup."Path to New OCR-files" +imagename) AND (TIME > _timeout)) DO
                SLEEP(100);

              SalesInvHeader.FIND();
              SalesInvLine.SETRANGE("Document No.",SalesInvHeader."No.");
              SalesInvLine.DELETEALL();
              SalesInvHeader.DELETE();
              _timeTot := ROUND((TIME -_startTime) *1000 /_cnt,1);
              //_w.UPDATE(2,FORMAT(_startTime +_timeTot,0,'<Integer> minutes'));
              _w.UPDATE(2,CREATEDATETIME(TODAY,_startTime +_timeTot));
            END;
            _w.CLOSE();
            MESSAGE('%1',CREATEDATETIME(TODAY,TIME) -_dtStart);
          END;

  }
  CODE
  {
    VAR
      xmlDoc@1100285005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      xmlProcInstr@1100285004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlProcessingInstruction";
      xmlNodeList@1100285003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      xmlNode@1100285002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlNode2@1100285001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      EXApprSetup@1100285000 : Record 12013601;
      Vendor@1100285009 : Record 23;
      PayToVendor@1100285026 : Record 23;
      Purchaser@1100285013 : Record 13;
      Item@1100285010 : Record 27;
      VATPostSetup@1100285014 : Record 325;
      PaymentTerms@1100285020 : Record 3;
      UoM@1100285023 : Record 204;
      TotalAmt@1100285011 : Decimal;
      TotalVAT@1100285012 : Decimal;
      XMLMgt@1100285008 : Codeunit 6224;
      OStream@1100285007 : OutStream;
      IStream@1100285006 : InStream;
      formatAmount@1100285015 : TextConst 'ENU=<Sign><Integer><Comma,,><Decimals,3>;SVE=<Sign><Integer><Comma,,><Decimals,3>';
      SalesInvHeader@1100285017 : Record 112;
      SalesInvLine@1100285018 : Record 113;
      CurrExchRate@1100285024 : Record 330;
      CompInfo@1100285019 : Record 79;
      SalesInvDoc@1100285016 : Report 206;
      filename@1100285022 : Text[250];
      imagename@1100285021 : Text[250];
      Text001@1100285025 : TextConst 'ENU=Create 1,000 test documents (2,000 files) in folder: %1;SVE=Skapa 1 000 testunderlag (2000 filer) i katalogen: %1';
      dummyFieldChecker@1100285027 : TEMPORARY Record 12013648;
      dateFormatOCR@1100285028 : Text[30];

    LOCAL PROCEDURE XMLFORMAT@1100285002(_text@1100285000 : Text[250]) : Text[250];
    BEGIN
      EXIT(FORMAT(DELCHR(_text,'=',' .,%&/()'),0,9));
    END;

    LOCAL PROCEDURE _xmlCreateInvDoc@1100285004();
    BEGIN
      xmlDoc := xmlDoc.XmlDocument();
      xmlProcInstr := xmlDoc.CreateProcessingInstruction('xml','version="1.0" encoding="UTF-8" standalone="yes"');
      xmlNode := xmlDoc.AppendChild(xmlProcInstr);
      xmlNode := xmlDoc.CreateElement('Invoices');
      xmlNode := xmlDoc.AppendChild(xmlNode);

      dateFormatOCR := '<Year4>-<Month,2>-<Day,2>';
      CASE EXApprSetup."Date Format (OCR Import)" OF
        EXApprSetup."Date Format (OCR Import)"::YYYYMMDD: dateFormatOCR := '<Year4>-<Month,2>-<Day,2>';
        EXApprSetup."Date Format (OCR Import)"::DDMMYYYY: dateFormatOCR := '<Day,2>-<Month,2>-<Year4>';
        EXApprSetup."Date Format (OCR Import)"::MMDDYYYY: dateFormatOCR := '<Month,2>-<Day,2>-<Year4>';
      END;

      IF EXApprSetup."OCR XML Port No." = 12013602 THEN BEGIN
        // old standard
        XMLMgt.AddElement(xmlNode,'Invoice','','',xmlNode);
      END ELSE BEGIN
        // RS Online, xmlport 12013605
        XMLMgt.AddElement(xmlNode,'GUID',CREATEGUID(),'',xmlNode2);
        XMLMgt.AddElement(xmlNode,'Invoice','','',xmlNode);
      END;

      _xmlCreateDocHeader();
    END;

    LOCAL PROCEDURE _xmlCreateDocHeader@1100285012();
    BEGIN
      CASE EXApprSetup."OCR XML Port No." OF
        12013602: XMLMgt.AddNode(xmlNode,'MBS_Navision_URL','');
      ELSE
        // RS Online
        XMLMgt.AddNode(xmlNode,'Credit','');
      END;
      XMLMgt.AddNode(xmlNode,'InvoiceNo',SalesInvHeader."No.");
      XMLMgt.AddNode(xmlNode,'PostingDate',FORMAT(SalesInvHeader."Posting Date",0,dateFormatOCR));
      XMLMgt.AddNode(xmlNode,'DueDate',FORMAT(SalesInvHeader."Due Date",0,dateFormatOCR));

      TotalAmt := 0;
      TotalVAT := 0;
      xmlNode2 := xmlDoc.CreateElement('Lines');
      _addRandomItemToLines();
      IF RANDOM(9) > 4 THEN
        _addRandomItemToLines();

      XMLMgt.AddNode(xmlNode,'AmountInclVat',FORMAT(ROUND(TotalAmt +TotalVAT),0,formatAmount));
      XMLMgt.AddNode(xmlNode,'VatAmount',FORMAT(ROUND(TotalVAT),0,formatAmount));
      XMLMgt.AddNode(xmlNode,'VendorNo','');
      XMLMgt.AddNode(xmlNode,'VendorID',Vendor."No.");
      XMLMgt.AddNode(xmlNode,'Reference',Purchaser.Name);
      XMLMgt.AddNode(xmlNode,'OrderNo','');
      XMLMgt.AddNode(xmlNode,'CurrencyCode','');//Vendor."Currency Code");
      CASE EXApprSetup."OCR XML Port No." OF
        12013602:
          BEGIN
            XMLMgt.AddNode(xmlNode,'VatRegNo',Vendor."VAT Registration No.");
            XMLMgt.AddNode(xmlNode,'ImageName',imagename);
          END;
      ELSE
        // RS Online
        XMLMgt.AddNode(xmlNode,'ImageName',imagename);
      END;

      xmlNode2 := xmlNode.AppendChild(xmlNode2); // lines
    END;

    PROCEDURE _addRandomItemToLines@1100285003();
    BEGIN
      // using xmlNode2 as repetitive <InvoiceLine>
      Item.FINDSET();
      Item.NEXT(RANDOM(Item.COUNT) -1);
      WHILE Item.Blocked OR (Item."VAT Prod. Posting Group" = '') DO BEGIN
        Item.FINDSET();
        Item.NEXT(RANDOM(Item.COUNT) -1);
      END;

      XMLMgt.AddElement(xmlNode2,'InvoiceLine','','',xmlNode2);
      _xmlCreateDocLine(Item);
      xmlNode2 := xmlNode2.ParentNode;
    END;

    LOCAL PROCEDURE _xmlCreateDocLine@1100285007(_item@1100285000 : Record 27);
    VAR
      _qty@1100285001 : Integer;
    BEGIN
      CASE EXApprSetup."OCR XML Port No." OF
        12013602: XMLMgt.AddNode(xmlNode2,'ItemNo',''); //_item."No.");
      ELSE
        // RS Online
        XMLMgt.AddNode(xmlNode2,'No','');
      END;
      XMLMgt.AddNode(xmlNode2,'Description',_item.Description);
      _qty := RANDOM(10) +1;
      IF _item."Last Direct Cost" = 0 THEN
        _item."Last Direct Cost" := RANDOM(999);
      XMLMgt.AddNode(xmlNode2,'Quantity',FORMAT(_qty,0,9));
      XMLMgt.AddNode(xmlNode2,'DirectUnitCost',FORMAT(ROUND(_item."Last Direct Cost" *SalesInvHeader."Currency Factor"),0,formatAmount));
      XMLMgt.AddNode(xmlNode2,'LineDiscount','');
      XMLMgt.AddNode(xmlNode2,'LineTotal',FORMAT(ROUND(_qty *_item."Last Direct Cost" *SalesInvHeader."Currency Factor"),0,formatAmount));
      IF EXApprSetup."OCR XML Port No." = 12013602 THEN
        XMLMgt.AddNode(xmlNode2,'VendorItemNo',_item."Vendor Item No.");
      XMLMgt.AddNode(xmlNode2,'UnitOfMeasure','');
      XMLMgt.AddNode(xmlNode2,'OrderNoRow',''); //FORMAT(RANDOM(99),0,9));

      TotalAmt += ROUND(_qty *_item."Last Direct Cost" *SalesInvHeader."Currency Factor");
      VATPostSetup.GET(Vendor."VAT Bus. Posting Group",_item."VAT Prod. Posting Group"); // delib. error
      //IF NOT VATPostSetup.GET(Vendor."VAT Bus. Posting Group",EXApprSetup."Std. VAT Prod. Posting Group") THEN
      CASE VATPostSetup."VAT Calculation Type" OF
        VATPostSetup."VAT Calculation Type"::"Reverse Charge VAT",
        VATPostSetup."VAT Calculation Type"::"Sales Tax":
          VATPostSetup."VAT %" := 0;
      END;
      TotalVAT += ROUND(_qty *_item."Last Direct Cost" *SalesInvHeader."Currency Factor" *VATPostSetup."VAT %" /100);

      SalesInvLine."Line No." += 10000;
      SalesInvLine.INIT();
      SalesInvLine."Sell-to Customer No." := SalesInvHeader."Sell-to Customer No.";
      SalesInvLine.Type := SalesInvLine.Type::Item;
      SalesInvLine."No." := _item."No.";
      SalesInvLine.Description := _item.Description;
      IF NOT UoM.GET(_item."Purch. Unit of Measure") THEN
        CLEAR(UoM);
      SalesInvLine."Unit of Measure" := UoM.Description;
      SalesInvLine.Quantity := _qty;
      SalesInvLine."Unit Price" := ROUND(_item."Last Direct Cost" *SalesInvHeader."Currency Factor");
      SalesInvLine.Amount := ROUND(_qty *SalesInvLine."Unit Price");
      SalesInvLine."Amount Including VAT" := ROUND(_qty *SalesInvLine."Unit Price" *(100 +VATPostSetup."VAT %") /100);
      SalesInvLine."Line Amount" := SalesInvLine.Amount;
      SalesInvLine."Posting Date" := SalesInvHeader."Posting Date";
      SalesInvLine."Unit of Measure Code" := _item."Purch. Unit of Measure";

      SalesInvLine.INSERT();
    END;

    PROCEDURE CheckXMLDate@1100285099(_dateText@1100285000 : Text[50]) Text : Text[50];
    BEGIN
      IF(STRPOS(_dateText,'T') > 0) THEN
        _dateText := COPYSTR(_dateText,1,STRPOS(_dateText,'T') -1)
      ELSE
        IF(STRPOS(_dateText,'Z') > 0) THEN
          _dateText := COPYSTR(_dateText,1,STRPOS(_dateText,'Z') -1);
      EXIT(_dateText);
    END;

    PROCEDURE RandomNoAsCode@1100285001() : Code[20];
    VAR
      _int1@1100285000 : Integer;
      _int2@1100285001 : Integer;
      _int3@1100285002 : Integer;
    BEGIN
      _int1 := RANDOM(9999);
      _int2 := RANDOM(9999);
      _int3 := RANDOM(9999);
      EXIT(FORMAT(_int1,0,9) +FORMAT(_int2,0,9) +FORMAT(_int3,0,9))
    END;

    EVENT xmlDoc@1100285005::NodeInserting@93(sender@1100285001 : Variant;e@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT xmlDoc@1100285005::NodeInserted@94(sender@1100285001 : Variant;e@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT xmlDoc@1100285005::NodeRemoving@95(sender@1100285001 : Variant;e@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT xmlDoc@1100285005::NodeRemoved@96(sender@1100285001 : Variant;e@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT xmlDoc@1100285005::NodeChanging@97(sender@1100285001 : Variant;e@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT xmlDoc@1100285005::NodeChanged@98(sender@1100285001 : Variant;e@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    {
      This routine creates 1000 xml invoice files for performance test during installation
    }
    END.
  }
}

