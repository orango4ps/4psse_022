OBJECT Table 11012942 Rental Rate Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               RentalPackage@1100528400 : Record 11012941;
             BEGIN
               ProjectRec.GET("Project No.");
               ProjectRec.TESTFIELD("Project Status",ProjectRec."Project Status"::Production);
               RentalPackage.CheckIfPackageIsEditable("Project No.", "Rental Unit", "Starting Date Package");

               InitProcessFields();
               CompletelyInvoiced(1, 'I', RentalPackage, Rec);
             END;

    OnModify=VAR
               RentalPackage@1100528400 : Record 11012941;
             BEGIN
               ProjectRec.GET("Project No.");
               ProjectRec.TESTFIELD("Project Status",ProjectRec."Project Status"::Production);
               IF NOT gSkipCheckPackageEditable THEN
                 RentalPackage.CheckIfPackageIsEditable("Project No.", "Rental Unit", "Starting Date Package");
               IF ("Termination Reason" <> '') OR ("Reason End after Contract" <> '') THEN  //DP00617
                 TESTFIELD("Ending Date Line");
               CompletelyInvoiced(1, 'M', RentalPackage, Rec);
             END;

    OnDelete=VAR
               RentalPackage@1100528400 : Record 11012941;
               RentalPackageLineRate@1100529000 : Record 11229856;
             BEGIN
               TESTFIELD("Last Invoice No.", '');
               TESTFIELD("Invoiced Until", 0D);
               ProjectRec.GET("Project No.");
               ProjectRec.TESTFIELD("Project Status",ProjectRec."Project Status"::Production);
               RentalPackage.CheckIfPackageIsEditable("Project No.", "Rental Unit", "Starting Date Package");
               CompletelyInvoiced(1, 'D', RentalPackage, Rec);

               RentalPackageLineRate.SETRANGE("Project No.", "Project No.");
               RentalPackageLineRate.SETRANGE("Rental Unit", "Rental Unit");
               RentalPackageLineRate.SETRANGE("Starting Date Package", "Starting Date Package");
               RentalPackageLineRate.SETRANGE("Line No.", "Line No.");
               RentalPackageLineRate.DELETEALL;
             END;

    OnRename=VAR
               RentalPackage@1100528400 : Record 11012941;
             BEGIN
               ProjectRec.GET("Project No.");
               ProjectRec.TESTFIELD("Project Status",ProjectRec."Project Status"::Production);
               RentalPackage.CheckIfPackageIsEditable("Project No.", "Rental Unit", "Starting Date Package");
             END;

    CaptionML=[ENU=Rental Rate Line;
               NOR=Rad for leiesats;
               SVE=Rad f”r uthyrningsavgift];
    LookupPageID=Page11012945;
    DrillDownPageID=Page11012945;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr];
                                                   NotBlank=Yes }
    { 20  ;   ;Rental Unit         ;Code20        ;TableRelation="Rental Unit"."Rental Unit" WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Rental Unit;
                                                              NOR=Leieenhet;
                                                              SVE=Uthyrningsenhet];
                                                   NotBlank=Yes }
    { 30  ;   ;Starting Date Package;Date         ;TableRelation="Rental Package"."Starting Date" WHERE (Project No.=FIELD(Project No.),
                                                                                                         Rental Unit=FIELD(Rental Unit));
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Starting Date Package;
                                                              NOR=Startdato for Pakke];
                                                   NotBlank=Yes }
    { 40  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr];
                                                   Description=Do not use Fieldnumbers 35+45, reserved for "Invoice Run No." and "Split No." in history (T11229849) }
    { 50  ;   ;Cost Object         ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Cost Type=CONST(Revenue),
                                                                                               Project Filter=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                IF ("Cost Object" <> '') THEN
                                                                  FillDefaultDescription();
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Kostnadsobjekt;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 55  ;   ;Element             ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Element;
                                                              NOR=Element;
                                                              SVE=Element] }
    { 60  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 70  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              NOR=Mva-bokf›ringsgruppe - vare;
                                                              SVE=Moms produktbokf”ringsmall];
                                                   NotBlank=Yes }
    { 95  ;   ;Type Code           ;Code10        ;TableRelation="Rental Rate Line Type";
                                                   OnValidate=BEGIN
                                                                CALCFIELDS(Type, "Type Description");  //DP00617
                                                              END;

                                                   CaptionML=[ENU=Type Code;
                                                              NOR=Typekode;
                                                              SVE=Typkod] }
    { 96  ;   ;Type                ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Rental Rate Line Type".Type WHERE (Code=FIELD(Type Code)));
                                                   CaptionML=[ENU=Type;
                                                              NOR=Radtype;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Rent,Service Cost,Utilities,One-off Costs,Deposit;
                                                                    SVE=Hyra,Servicekostnad,Verktyg,Eng†ngskostnad,Deposition];
                                                   OptionString=Rent,ServiceCost,Utilities,One-off Costs,Deposit;
                                                   Editable=No }
    { 97  ;   ;Type Description    ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Rental Rate Line Type".Description WHERE (Code=FIELD(Type Code)));
                                                   CaptionML=[ENU=Type Description;
                                                              NOR=Typebeskrivelse;
                                                              SVE=Radtypbeskrivning];
                                                   Editable=No }
    { 100 ;   ;Starting Date Line  ;Date          ;OnValidate=BEGIN
                                                                IF "Starting Date Line" <> xRec."Starting Date Line" THEN
                                                                  TESTFIELD("Last Invoice No.", '');  //Only allowed if not already invoiced
                                                                ValidateStartingDateLine;
                                                              END;

                                                   CaptionML=[ENU=Starting Date Line;
                                                              NOR=Startdatorad] }
    { 110 ;   ;Ending Date Line    ;Date          ;OnValidate=BEGIN
                                                                ValidateEndingDateLine;
                                                                IF "Ending Date Line" = 0D THEN  //DP00617
                                                                  TESTFIELD("Prolong Code", '');
                                                              END;

                                                   CaptionML=[ENU=Ending Date Line;
                                                              NOR=Sluttdatorad] }
    { 120 ;   ;Ending Date after Contract OLD;Date;OnValidate=BEGIN
                                                                TESTFIELD("Ending Date after Contract OLD", 0D);  //DP00617
                                                              END;

                                                   CaptionML=ENU=Ending Date after Contract OLD }
    { 130 ;   ;Comment             ;Text50        ;CaptionML=[ENU=Comment;
                                                              NOR=Merknad;
                                                              SVE=Kommentar] }
    { 140 ;   ;Prolong Code        ;Code10        ;TableRelation="Rental Package Prolong Code"."Prolong Code" WHERE (Project No.=FIELD(Project No.),
                                                                                                                     Rental Unit=FIELD(Rental Unit),
                                                                                                                     Starting Date=FIELD(Starting Date Package));
                                                   OnValidate=BEGIN
                                                                //DP00617
                                                                IF "Prolong Code" <> '' THEN
                                                                  TESTFIELD("Ending Date Line");
                                                              END;

                                                   CaptionML=ENU=Prolong Code }
    { 150 ;   ;Termination Reason  ;Code10        ;TableRelation="Rental Unit Reason Code" WHERE (Type=CONST(Termination));
                                                   CaptionML=ENU=Termination Reason }
    { 160 ;   ;Reason End after Contract;Code10   ;TableRelation="Rental Unit Reason Code" WHERE (Type=CONST(EndAfterContract));
                                                   OnValidate=BEGIN
                                                                //DP00617
                                                                IF ("Reason End after Contract" = '') THEN
                                                                  ValidateEndingDateLine();
                                                              END;

                                                   CaptionML=ENU=Reason End after Contract }
    { 170 ;   ;Index Group         ;Code10        ;TableRelation="Index Group (Rental Unit)";
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Index Type");
                                                              END;

                                                   CaptionML=ENU=Index Group }
    { 171 ;   ;Index Type          ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Index Group (Rental Unit)".Type WHERE (Code=FIELD(Index Group)));
                                                   CaptionML=[ENU=Index Type;
                                                              NOR=Indekstype;
                                                              SVE=Indextyp];
                                                   OptionCaptionML=ENU=" ,Index,Manual,None";
                                                   OptionString=[ ,Index,Manual,None] }
    { 175 ;   ;Indexing Allowed From;Date         ;OnValidate=BEGIN
                                                                IF "Indexing Allowed From" <> 0D THEN
                                                                  TESTFIELD("Index Group");
                                                              END;

                                                   CaptionML=ENU=Indexing Allowed From }
    { 180 ;   ;Invoiced Until      ;Date          ;CaptionML=[ENU=Invoiced until;
                                                              NOR=Fakturert frem til;
                                                              SVE=Fakturerad till];
                                                   Editable=No }
    { 181 ;   ;Last Invoice No.    ;Code20        ;TableRelation=IF (Invoice Status=CONST(Temporary),
                                                                     Invoice Type=CONST(Invoice)) "Sales Header".No. WHERE (Document Type=CONST(Invoice))
                                                                     ELSE IF (Invoice Status=CONST(Temporary),
                                                                              Invoice Type=CONST(CreditMemo)) "Sales Header".No. WHERE (Document Type=CONST(Credit Memo))
                                                                              ELSE IF (Invoice Status=CONST(Posted),
                                                                                       Invoice Type=CONST(Invoice)) "Sales Invoice Header".No.
                                                                                       ELSE IF (Invoice Status=CONST(Posted),
                                                                                                Invoice Type=CONST(CreditMemo)) "Sales Cr.Memo Header".No.;
                                                   OnLookup=VAR
                                                              RentalPackage@1100529000 : Record 11012941;
                                                            BEGIN
                                                              RentalPackage.ShowSalesInvoiceList("Last Invoice No.", "Invoice Status", "Invoice Type");
                                                            END;

                                                   CaptionML=[ENU=Last Invoice No.;
                                                              NOR=Siste Fakturanr.;
                                                              SVE=Senaste fakturanr];
                                                   Editable=No }
    { 182 ;   ;Invoice Status      ;Option        ;CaptionML=[ENU=Invoice Status;
                                                              NOR=Fakturastatus;
                                                              SVE=Fakturastatus];
                                                   OptionCaptionML=ENU=,,Temporary,Posted;
                                                   OptionString=,,Temporary,Posted;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 183 ;   ;Invoice Type        ;Option        ;CaptionML=[ENU=Invoice Type;
                                                              NOR=Fakturatype;
                                                              SVE=Fakturatyp];
                                                   OptionCaptionML=[ENU=" ,Invoice,Credit Memo";
                                                                    NOR=" ,Faktura,Kreditnota";
                                                                    SVE=" ,Faktura,Kreditnota"];
                                                   OptionString=[ ,Invoice,CreditMemo];
                                                   Editable=No }
    { 185 ;   ;Previous Invoice No.;Code20        ;TableRelation="Sales Invoice Header".No.;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Previous Invoice No.;
                                                              NOR=Forrige Fakturanr.;
                                                              SVE=F”reg†ende fakturanr];
                                                   Editable=No }
    { 186 ;   ;Previous Invoiced Until;Date       ;CaptionML=[ENU=Previous Invoiced Until;
                                                              NOR=Forrige fakturert Frem til;
                                                              SVE=F”reg†ende fakturerat till];
                                                   Editable=No }
    { 187 ;   ;Previous Invoice Type;Option       ;CaptionML=ENU=Previous Invoice Type;
                                                   OptionCaptionML=[ENU=" ,Invoice,Credit Memo";
                                                                    NOR=" ,Faktura,Kreditnota";
                                                                    SVE=" ,Faktura,Kreditnota"];
                                                   OptionString=[ ,Invoice,CreditMemo];
                                                   Editable=No }
    { 190 ;   ;Start Delayed Index. Period;Date   ;CaptionML=ENU=Start Delayed Index. Period;
                                                   Editable=No }
    { 191 ;   ;End Delayed Index. Period;Date     ;CaptionML=ENU=End Delayed Index. Period;
                                                   Description=Fieldnumbers from 1000 reserved for history specific fields (T11229849) (Note: Transferfields is used);
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Project No.,Rental Unit,Starting Date Package,Line No.;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ProjectRec@1210190000 : Record 11072003;
      Text001@1100528400 : TextConst 'ENU=%1 should not be after %2.;NOR=%1 kan ikke v‘re etter %2.;SVE=%1 f†r inte vara efter %2.';
      Text002@1100528401 : TextConst 'ENU=%1 should not be before %2.;NOR=%1 kan ikke v‘re f›r %2.;SVE=%1 f†r inte vara f”re %2.';
      gSkipCheckPackageEditable@1100529000 : Boolean;

    PROCEDURE InitProcessFields@1100529003();
    BEGIN
      "Termination Reason" := '';
      "Reason End after Contract" := '';
      "Prolong Code" := '';
      "Index Group" := '';
      "Invoiced Until" := 0D;
      "Last Invoice No." := '';
      "Invoice Status" := 0;
      "Invoice Type" := 0;
      "Previous Invoice No." := '';
      "Previous Invoiced Until" := 0D;
      "Previous Invoice Type" := 0;
      "Start Delayed Index. Period" := 0D;
      "End Delayed Index. Period" := 0D;
    END;

    PROCEDURE SetSkipCheckPackageEditable@1100529004(SkipCheckPackageEditable@1100529000 : Boolean);
    BEGIN
      gSkipCheckPackageEditable := SkipCheckPackageEditable;
    END;

    PROCEDURE FillDefaultDescription@1210190000();
    VAR
      lvDimValRec@1210190000 : Record 349;
    BEGIN
      lvDimValRec.SETCURRENTKEY(Code,"Global Dimension No.");
      lvDimValRec.SETRANGE(Code, "Cost Object");
      lvDimValRec.SETRANGE("Global Dimension No.", 2);
      lvDimValRec.SETRANGE("Project Filter", "Project No.");
      IF lvDimValRec.FIND('-') THEN BEGIN
        lvDimValRec.CALCFIELDS("Project Related Name");
        IF lvDimValRec."Project Related Name" <> '' THEN
          lvDimValRec.Name := lvDimValRec."Project Related Name";
        Description := lvDimValRec.Name;
        IF "VAT Prod. Posting Group" = '' THEN
          "VAT Prod. Posting Group" := lvDimValRec."VAT Prod. Posting Group";
        IF "Type Code" = '' THEN
          VALIDATE("Type Code", lvDimValRec."Rental Rate Type Code");
      END;
    END;

    LOCAL PROCEDURE ValidateStartingDateLine@1100528401();
    VAR
      RentalPackage@1100528400 : Record 11012941;
    BEGIN
      IF "Starting Date Line" = 0D THEN
        EXIT;

      IF ("Starting Date Line" > "Ending Date Line") AND
         ("Ending Date Line" <> 0D)
      THEN
        ERROR(Text001, FIELDCAPTION("Starting Date Line"), "Ending Date Line");

      RentalPackage.GET("Project No.", "Rental Unit", "Starting Date Package");

      IF ("Starting Date Line" < RentalPackage."Starting Date") AND
         (RentalPackage."Starting Date" <> 0D)
      THEN
        ERROR(Text002, FIELDCAPTION("Starting Date Line"), RentalPackage."Starting Date");

      IF ("Starting Date Line" > RentalPackage."Ending Date") AND
         (RentalPackage."Ending Date" <> 0D)
      THEN
        ERROR(Text001, FIELDCAPTION("Starting Date Line"), RentalPackage."Ending Date");
    END;

    LOCAL PROCEDURE ValidateEndingDateLine@1100528409();
    VAR
      RentalPackage@1100528400 : Record 11012941;
    BEGIN
      IF "Ending Date Line" = 0D THEN
        EXIT;

      IF ("Ending Date Line" < "Starting Date Line") AND
         ("Starting Date Line" <> 0D)
      THEN
        ERROR(Text002, FIELDCAPTION("Ending Date Line"), "Starting Date Line");

      RentalPackage.GET("Project No.", "Rental Unit", "Starting Date Package");

      IF ("Ending Date Line" < RentalPackage."Starting Date") AND
         (RentalPackage."Starting Date" <> 0D)
      THEN
        ERROR(Text002, FIELDCAPTION("Ending Date Line"), RentalPackage."Starting Date");

      IF ("Ending Date Line" > RentalPackage."Ending Date") AND ("Reason End after Contract" = '') AND  //DP00617.c
         (RentalPackage."Ending Date" <> 0D)
      THEN
        ERROR(Text001, FIELDCAPTION("Ending Date Line"), RentalPackage."Ending Date");
    END;

    PROCEDURE CalculatePackageTotals@1100529005(ProjectNo@1100529000 : Code[20];RentalUnit@1100529001 : Code[20];StartDate@1100529002 : Date;TypeCode@1100529008 : Code[10];VAR PeriodTotal@1100529003 : Decimal;VAR YearTotal@1100529004 : Decimal);
    VAR
      RentalPackage@1100529007 : Record 11012941;
      RentalRateLine@1100529005 : Record 11012942;
      RentalPackageLineRate@1100529009 : Record 11229856;
      RefDate@1100529006 : Date;
    BEGIN
      //DP00617  Totals on current date. If Package in future then on start package
      PeriodTotal := 0;
      YearTotal := 0;
      RefDate := TODAY;
      IF NOT RentalPackage.GET(ProjectNo, RentalUnit, StartDate) THEN
        EXIT;
      IF RentalPackage."Starting Date" > RefDate THEN
        RefDate := RentalPackage."Starting Date";

      RentalRateLine.SETRANGE("Project No.", ProjectNo);
      RentalRateLine.SETRANGE("Rental Unit", RentalUnit);
      RentalRateLine.SETRANGE("Starting Date Package", StartDate);
      RentalRateLine.SETFILTER("Starting Date Line", '..%1', RefDate);
      RentalRateLine.SETFILTER("Ending Date Line", '%1..|%2', RefDate, 0D);
      IF TypeCode <> '' THEN
        RentalRateLine.SETRANGE("Type Code", TypeCode);
      IF RentalRateLine.FINDSET THEN BEGIN
        REPEAT
          GetLineRateOnRefDate(RentalRateLine, RefDate, RentalPackageLineRate);
          PeriodTotal := PeriodTotal + RentalPackageLineRate."Period Amount";
          YearTotal := YearTotal + RentalPackageLineRate."Year Amount";
        UNTIL RentalRateLine.NEXT = 0;
      END;
    END;

    PROCEDURE GetLineRateOnRefDate@1100529006(RentalRateLine@1100529001 : Record 11012942;RefDate@1100529000 : Date;VAR RentalPackageLineRate@1100529002 : Record 11229856) : Boolean;
    BEGIN
      //DP00617
      RentalPackageLineRate.SETRANGE("Project No.", RentalRateLine."Project No.");
      RentalPackageLineRate.SETRANGE("Rental Unit", RentalRateLine."Rental Unit");
      RentalPackageLineRate.SETRANGE("Starting Date Package", RentalRateLine."Starting Date Package");
      RentalPackageLineRate.SETRANGE("Line No.", RentalRateLine."Line No.");
      RentalPackageLineRate.SETRANGE(Date, 0D, RefDate);
      IF RentalPackageLineRate.FINDLAST THEN
        EXIT(TRUE);

      RentalPackageLineRate."Period Amount" := 0;
      RentalPackageLineRate."Year Amount" := 0;
      EXIT(FALSE);
    END;

    PROCEDURE GetNextLineRate@1100529000(RentalPackageLineRate1@1100529001 : Record 11229856;VAR RentalPackageLineRate2@1100529002 : Record 11229856) : Boolean;
    BEGIN
      //DP00617
      RentalPackageLineRate2.SETRANGE("Project No.", RentalPackageLineRate1."Project No.");
      RentalPackageLineRate2.SETRANGE("Rental Unit", RentalPackageLineRate1."Rental Unit");
      RentalPackageLineRate2.SETRANGE("Starting Date Package", RentalPackageLineRate1."Starting Date Package");
      RentalPackageLineRate2.SETRANGE("Line No.", RentalPackageLineRate1."Line No.");
      RentalPackageLineRate2.SETFILTER(Date, '>%1', RentalPackageLineRate1.Date);
      IF RentalPackageLineRate2.FINDFIRST THEN
        EXIT(TRUE);

      RentalPackageLineRate2."Period Amount" := 0;
      RentalPackageLineRate2."Year Amount" := 0;
      EXIT(FALSE);
    END;

    PROCEDURE CompletelyInvoiced@1100529002(Updatelevel@1100529004 : Option;UpdateMode@1100529005 : Code[1];RentalPackage@1100529000 : Record 11012941;RentalRateLine@1100529001 : Record 11012942) : Boolean;
    VAR
      RentalRateLine2@1100529003 : Record 11012942;
      EndDateLine@1100529002 : Date;
      CompletelyInv@1100529006 : Boolean;
      TermReason@1100529007 : Code[20];
    BEGIN
      //DP00617
      //Update Level: 0=Update from table 'Rental Package', 1=Update from table 'Rental Rate Line'
      //Upadte Mode : I=Insert, M=Modify, D=Delete
      CompletelyInv := TRUE;
      IF Updatelevel <> 0 THEN
        RentalPackage.GET(RentalRateLine."Project No.", RentalRateLine."Rental Unit", RentalRateLine."Starting Date Package");
      IF (RentalPackage."Customer No." = '') OR (UpdateMode = 'I') THEN
        CompletelyInv := FALSE;
      IF CompletelyInv THEN BEGIN
        RentalRateLine2.SETRANGE("Project No.", RentalPackage."Project No.");
        RentalRateLine2.SETRANGE("Rental Unit", RentalPackage."Rental Unit");
        RentalRateLine2.SETRANGE("Starting Date Package", RentalPackage."Starting Date");
        IF (Updatelevel = 1) AND (UpdateMode = 'D') THEN
          RentalRateLine2.SETFILTER("Line No.", '<>%1', RentalRateLine."Line No.");
        IF NOT RentalRateLine2.FINDSET THEN
          CompletelyInv := FALSE
        ELSE BEGIN
          REPEAT
            IF (Updatelevel = 1) AND (UpdateMode = 'M') AND (RentalRateLine2."Line No." = RentalRateLine."Line No.") THEN
              RentalRateLine2 := RentalRateLine;
            IF RentalRateLine2."Ending Date Line" <> 0D THEN
              TermReason := RentalRateLine2."Termination Reason"
            ELSE
              TermReason := RentalPackage."Termination Reason";
            EndDateLine := RentalRateLine2."Ending Date Line";
            IF (EndDateLine = 0D) AND (RentalPackage."Ending Date" <> 0D) THEN
              EndDateLine := RentalPackage."Ending Date";
            IF (EndDateLine = 0D) OR (EndDateLine <> RentalRateLine2."Invoiced Until") OR (TermReason = '') THEN
              CompletelyInv := FALSE;
          UNTIL (RentalRateLine2.NEXT = 0) OR (NOT CompletelyInv);
        END;
      END;
      IF Updatelevel <> 0 THEN BEGIN
        IF RentalPackage."Completely Invoiced" <> CompletelyInv THEN BEGIN
          RentalPackage."Completely Invoiced" := CompletelyInv;
          RentalPackage.MODIFY;
        END;
      END;
      EXIT(CompletelyInv);
    END;

    PROCEDURE CopyLineRateToNewRentalRateLine@1100529600(RentalRateLine@1100529001 : Record 11012942;NewRentalRateLine@1100529600 : Record 11012942) : Boolean;
    VAR
      RentalPackageLineRate@1100529601 : Record 11229856;
      NewRentalPackageLineRate@1100529602 : Record 11229856;
    BEGIN
      RentalPackageLineRate.SETRANGE("Project No.", RentalRateLine."Project No.");
      RentalPackageLineRate.SETRANGE("Rental Unit", RentalRateLine."Rental Unit");
      RentalPackageLineRate.SETRANGE("Starting Date Package", RentalRateLine."Starting Date Package");
      RentalPackageLineRate.SETRANGE("Line No.", RentalRateLine."Line No.");
      RentalPackageLineRate.SETRANGE(Date, 0D, NewRentalRateLine."Starting Date Package");
      IF RentalPackageLineRate.FINDLAST THEN
        RentalPackageLineRate.SETFILTER(Date, '>=%1', RentalPackageLineRate.Date)
      ELSE
        RentalPackageLineRate.SETRANGE(Date);
      IF RentalPackageLineRate.ISEMPTY THEN
        EXIT;

      RentalPackageLineRate.FINDSET;
      REPEAT
        NewRentalPackageLineRate := RentalPackageLineRate;
        NewRentalPackageLineRate."Project No." := NewRentalRateLine."Project No.";
        NewRentalPackageLineRate."Rental Unit" := NewRentalRateLine."Rental Unit";
        NewRentalPackageLineRate."Starting Date Package" := NewRentalRateLine."Starting Date Package";
        NewRentalPackageLineRate."Line No." := NewRentalRateLine."Line No.";
        NewRentalPackageLineRate.INSERT;
      UNTIL RentalPackageLineRate.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

