OBJECT Codeunit 11012208 Exchange Mgt (Donau)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Company@1100525024 : Record 2000000006;
      XMLEncodeCU@1100485001 : Codeunit 11012209;
      XMLDecodeCU@1100485000 : Codeunit 11012212;
      ReqHandlerCU@1100485002 : Codeunit 11012207;
      DimMgt@1100525023 : Codeunit 408;
      InvoiceNo@1100525000 : Code[20];
      ErrorText@1100525001 : Text[50];
      Text002@1100525013 : TextConst 'DEU=Meldung gehîrt zu einer anderen Firma;ENU=Message belongs to other company;NLD=Boodschap behoort bij een ander bedrijf;NOR=Meldingen tilhõrer et annet firma;SVE=Meddelande tillhîr annat fîretag';
      Text003@1100525014 : TextConst 'DEU=Rechnungen wurden bereits registriert.;ENU=Invoice already registered;NLD=Facturen zijn al geregistreerd;NOR=Faktura er allerede registrert;SVE=Faktura redan registrerad';
      Text004@1100525015 : TextConst 'DEU=Keine Zeilen zugelassen fÅr Rechnungen die mit einem Auftrag verbunden sind;ENU=No lines allowed for Invoice linked to Order;NLD=Geen regels toegestaan voor facturen die gelinkt zijn aan een order;NOR=Ingen rader tillatt for en faktura linket til en ordre;SVE=Inga rader Ñr tillÜtna i en faktura som Ñr lÑnkad till order';
      Text005@1100525016 : TextConst 'DEU=Rechnung ist  noch nicht registriert worden;ENU=Invoice is not yet registered;NLD=Factuur is nog niet geregistreerd;NOR=Fakturen er ikke registrert enda;SVE=Fakturan Ñr inte registrerad';
      Text006@1100525017 : TextConst 'DEU=Rechnung ist bereits genehmigt;ENU=Invoice already approved;NLD=Factuur is al goedgekeurd;NOR=Fakturaen er allerede godkjent;SVE=Faktura redan godkÑnd';
      Text007@1100525018 : TextConst 'DEU=Unerwarteter Fahler (HinzufÅgung Zeile misslungen);ENU=Unexpected error (line insert failed);NLD=Onverwachte fout (toevoeging regel mislukt);NOR=Uventet feil (radinnsetting feilet);SVE=OvÑntat fel (raden kunde inte infogas)';
      Text008@1100526000 : TextConst 'DEU=Der richtige Kopf konnte nicht gefunden werden;ENU=Correct header could not be found;NLD=Juiste kop kon niet worden gevonden;NOR=Kan ikke finne korrekt tittel;SVE=Det gick inte att hitta rÑtt rubrik';
      DocumentNo@1100525011 : Code[20];
      LineNo@1100525010 : Integer;
      ErrorInvoiceNo@1100525012 : TextConst 'DEU=Unrichtige Rechnungsnummer;ENU=Wrong Invoice Number;NLD=Foutief factuurnummer;NOR=Feil fakturanr.;SVE=Fel fakturanummer';
      JournalTemplateName@1100525019 : Code[10];
      VehicleDimensionCodeRead@1100525021 : Boolean;
      VehicleDimensionCode@1100525022 : Code[20];

    PROCEDURE DonauSendPurchaseOrder@1100525018(InMsg@1100525000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      lvRec@1100525003 : Record 38;
      lvXMLDocOut@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH lvRec DO BEGIN
        Company.FINDSET;
        REPEAT
          lvRec.CHANGECOMPANY(Company.Name);
          SETRANGE("Document Type","Document Type"::Order);
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              lvXMLDocOut := lvXMLDocOut.XmlDocument;
              XMLEncodeCU.PurchaseOrder(Company.Name, lvRec, lvXMLDocOut);
              ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
              CLEAR(lvXMLDocOut);
            UNTIL NEXT = 0;
          END;
        UNTIL Company.NEXT = 0;
      END;

      CreateEndOfTransaction(0,InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE DonauSendVendor@1100525005(InMsg@1100525001 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      lvRec@1100525004 : Record 23;
      lvXMLDocOut@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH lvRec DO BEGIN
        Company.FINDSET;
        REPEAT
          lvRec.CHANGECOMPANY(Company.Name);
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              lvXMLDocOut := lvXMLDocOut.XmlDocument;
              XMLEncodeCU.Vendor(Company.Name, lvRec, lvXMLDocOut);
              ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
              CLEAR(lvXMLDocOut);
            UNTIL NEXT = 0;
          END;
        UNTIL Company.NEXT = 0;
      END;

      CreateEndOfTransaction(0,InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE DonauSendGLAccount@1100525007(InMsg@1100525001 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      lvRec@1100525004 : Record 15;
      lvXMLDocOut@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH lvRec DO BEGIN
        Company.FINDSET;
        REPEAT
          lvRec.CHANGECOMPANY(Company.Name);
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              lvXMLDocOut := lvXMLDocOut.XmlDocument;
              XMLEncodeCU.GLAccount(Company.Name, lvRec, lvXMLDocOut);
              ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
              CLEAR(lvXMLDocOut);
            UNTIL NEXT = 0;
          END;
        UNTIL Company.NEXT = 0;
      END;

      CreateEndOfTransaction(0,InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE DonauSendCostCenter@1100525010(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      lvGLSetupRec@1100485001 : Record 98;
      lvRec@1100485006 : Record 349;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH lvRec DO BEGIN
        Company.FINDSET;
        REPEAT
          lvRec.CHANGECOMPANY(Company.Name);
          lvGLSetupRec.CHANGECOMPANY(Company.Name);
          lvGLSetupRec.GET;
          SETRANGE("Dimension Code", lvGLSetupRec."Global Dimension 1 Code");
          SETRANGE("Global Dimension No.", 1);
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              lvXMLDocOut := lvXMLDocOut.XmlDocument;
              XMLEncodeCU.CostCenter(Company.Name, lvRec, lvXMLDocOut);
              ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
              CLEAR(lvXMLDocOut);
            UNTIL NEXT = 0;
          END;
        UNTIL Company.NEXT = 0;
      END;

      CreateEndOfTransaction(0,InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE DonauSendCostObject@1100525013(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      lvRec@1100485006 : Record 349;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      //dbeekman, 17-11-09
      //Due to limitations in the Donau software, this function is abused to return all Dimensions, contrairy to what the request type
      //and function name suggest. The DonauSendCostCenter function is in fact obsolete now, but needed to exist for backward
      //compatibility reasons.
      //The function name and request type could not be changed for reasons within Donau.

      WITH lvRec DO BEGIN
        //sn dbeekman, 16-11-09: Donau Phase 2
        //lvGLSetupRec.GET;
        //SETRANGE("Dimension Code", lvGLSetupRec."Global Dimension 2 Code");
        //SETRANGE("Global Dimension No.", 2);
        //en dbeekman
        Company.FINDSET;
        REPEAT
          lvRec.CHANGECOMPANY(Company.Name);
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              lvXMLDocOut := lvXMLDocOut.XmlDocument;
              XMLEncodeCU.CostObject(Company.Name, lvRec, lvXMLDocOut);
              ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
              CLEAR(lvXMLDocOut);
            UNTIL NEXT = 0;
          END;
        UNTIL Company.NEXT = 0;
      END;

      CreateEndOfTransaction(0,InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE DonauSendVehicle@1100525022(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      lvRec@1100485006 : Record 349;
      ScanApplicationsSetup@1100525000 : Record 11012134;
      lvXMLDocOut@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      //dbeekman, 18-11-09: not used yet!
      WITH lvRec DO BEGIN
        Company.FINDSET;
        REPEAT
          lvRec.CHANGECOMPANY(Company.Name);
          ScanApplicationsSetup.CHANGECOMPANY(Company.Name);
          ScanApplicationsSetup.GET;
          SETRANGE("Dimension Code", ScanApplicationsSetup."Donau Vehicle Dimension Code");
          SETRANGE("Global Dimension No.", 0);
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              lvXMLDocOut := lvXMLDocOut.XmlDocument;
              XMLEncodeCU.Vehicle(Company.Name, lvRec, lvXMLDocOut);
              ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
              CLEAR(lvXMLDocOut);
            UNTIL NEXT = 0;
          END;
        UNTIL Company.NEXT = 0;
      END;

      CreateEndOfTransaction(0,InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE DonauSendProject@1100525016(InMsg@1100525001 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      lvRec@1100525004 : Record 11072003;
      lvXMLDocOut@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH lvRec DO BEGIN
        Company.FINDSET;
        REPEAT
          lvRec.CHANGECOMPANY(Company.Name);
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              lvXMLDocOut := lvXMLDocOut.XmlDocument;
              XMLEncodeCU.Project(Company.Name, lvRec, lvXMLDocOut);
              ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
              CLEAR(lvXMLDocOut);
            UNTIL NEXT = 0;
          END;
        UNTIL Company.NEXT = 0;
      END;

      CreateEndOfTransaction(0,InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE DonauSendCompany@1100525020(InMsg@1100525001 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      lvRec@1100525004 : Record 2000000006;
      lvXMLDocOut@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH lvRec DO BEGIN
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvXMLDocOut := lvXMLDocOut.XmlDocument;
            XMLEncodeCU.Company(lvRec, lvXMLDocOut);
            ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
            CLEAR(lvXMLDocOut);
          UNTIL NEXT = 0;
        END;
      END;

      CreateEndOfTransaction(0,InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE DonauSendServiceOrder@1100525024(InMsg@1100525001 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      lvRec@1100525004 : Record 11012823;
      lvXMLDocOut@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH lvRec DO BEGIN
        Company.FINDSET;
        REPEAT
          lvRec.CHANGECOMPANY(Company.Name);
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              lvXMLDocOut := lvXMLDocOut.XmlDocument;
              XMLEncodeCU.ServiceOrder(Company.Name, lvRec, lvXMLDocOut);
              ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
              CLEAR(lvXMLDocOut);
            UNTIL NEXT = 0;
          END;
        UNTIL Company.NEXT = 0;
      END;

      CreateEndOfTransaction(0,InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE DonauSendServiceContract@1100525019(InMsg@1100525001 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      lvRec@1100525004 : Record 11012812;
      lvXMLDocOut@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH lvRec DO BEGIN
        Company.FINDSET;
        REPEAT
          lvRec.CHANGECOMPANY(Company.Name);
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              lvXMLDocOut := lvXMLDocOut.XmlDocument;
              XMLEncodeCU.ServiceContract(Company.Name, lvRec, lvXMLDocOut);
              ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
              CLEAR(lvXMLDocOut);
            UNTIL NEXT = 0;
          END;
        UNTIL Company.NEXT = 0;
      END;

      CreateEndOfTransaction(0,InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE DonauSendPlant@1100525006(InMsg@1100525001 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      lvRec@1100525004 : Record 11012551;
      lvXMLDocOut@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH lvRec DO BEGIN
        Company.FINDSET;
        REPEAT
          lvRec.CHANGECOMPANY(Company.Name);
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              lvXMLDocOut := lvXMLDocOut.XmlDocument;
              XMLEncodeCU.Plant(Company.Name, lvRec, lvXMLDocOut);
              ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
              CLEAR(lvXMLDocOut);
            UNTIL NEXT = 0;
          END;
        UNTIL Company.NEXT = 0;
      END;

      CreateEndOfTransaction(0,InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE DonauSendFixedAsset@1100525011(InMsg@1100525001 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      lvRec@1100525004 : Record 5600;
      lvXMLDocOut@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      WITH lvRec DO BEGIN
        Company.FINDSET;
        REPEAT
          lvRec.CHANGECOMPANY(Company.Name);
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              lvXMLDocOut := lvXMLDocOut.XmlDocument;
              XMLEncodeCU.FixedAsset(Company.Name, lvRec, lvXMLDocOut);
              ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
              CLEAR(lvXMLDocOut);
            UNTIL NEXT = 0;
          END;
        UNTIL Company.NEXT = 0;
      END;

      CreateEndOfTransaction(0,InMsg);
      EXIT(TRUE);
    END;

    PROCEDURE DonauSendReplyHeader@1100525021(InMsg@1100525000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";lvRec@1100525002 : Record 38;ResultBl@1100525003 : Boolean;ErrorText@1100525004 : Text[50]);
    VAR
      lvXMLDocOut@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      lvXMLDocOut := lvXMLDocOut.XmlDocument;
      XMLEncodeCU.ReplyInvoiceHeader(lvRec, lvXMLDocOut, ResultBl,ErrorText);
      ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
      CLEAR(lvXMLDocOut);
    END;

    PROCEDURE DonauSendReplyLine@1100525017(InMsg@1100525000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";lvRec@1100525002 : Record 39;ResultBl@1100525003 : Boolean;ErrorText@1100525004 : Text[50]);
    VAR
      lvXMLDocOut@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      lvXMLDocOut := lvXMLDocOut.XmlDocument;
      XMLEncodeCU.ReplyInvoiceLine(lvRec, lvXMLDocOut, ResultBl,ErrorText);
      ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
      CLEAR(lvXMLDocOut);
    END;

    PROCEDURE DonauSendReplyApprovalLine@1100525031(InMsg@1100525000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";lvRec@1100525002 : Record 11012032;ResultBl@1100525003 : Boolean;ErrorText@1100525004 : Text[50]);
    VAR
      lvXMLDocOut@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      lvXMLDocOut := lvXMLDocOut.XmlDocument;
      XMLEncodeCU.ReplyInvApprovalLine(lvRec,lvXMLDocOut,ResultBl,ErrorText);
      ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
      CLEAR(lvXMLDocOut);
    END;

    PROCEDURE DonauSendReplyApprovedInvoice@1100525047(InMsg@1100525003 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";lvRec@1100525002 : Record 38;ResultBl@1100525001 : Boolean;ErrorText@1100525000 : Text[50]);
    VAR
      lvXMLDocOut@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      lvXMLDocOut := lvXMLDocOut.XmlDocument;
      XMLEncodeCU.ReplyApprovedInvoice(lvRec, lvXMLDocOut, ResultBl,ErrorText);
      ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
      CLEAR(lvXMLDocOut);
    END;

    PROCEDURE DonauSendReplyStatus@1100525030(InMsg@1100525003 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";lvRec@1100525002 : Record 38;ResultBl@1100525001 : Boolean;ErrorText@1100525000 : Text[50];StatusTxt@1100525005 : Text[50]);
    VAR
      lvXMLDocOut@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      lvXMLDocOut := lvXMLDocOut.XmlDocument;
      XMLEncodeCU.ReplyStatusInvoice(lvRec, lvXMLDocOut, ResultBl,ErrorText,StatusTxt);
      ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
      CLEAR(lvXMLDocOut);
    END;

    PROCEDURE ProcessHeader@1100525009(DebriefPurchInvHDonau@1100525000 : Record 11012136) : Boolean;
    VAR
      PurchaseHeader@1100525001 : Record 38;
    BEGIN
      IF DebriefPurchInvHDonau.Company <> COMPANYNAME THEN
        EXIT(RaiseError(Text002));

      IF DebriefPurchInvHDonau.IsDebriefHeaderRegistered THEN
        EXIT(RaiseError(Text003));

      IF DebriefPurchInvHDonau."Invoice Lines" AND (DebriefPurchInvHDonau."Related Purch. Order No." <> '') THEN
        EXIT(RaiseError(Text004));

      IF NOT GetPurchaseHeader(DebriefPurchInvHDonau,PurchaseHeader) THEN BEGIN
        PurchaseHeader.INIT;
        PurchaseHeader."Document Type" := DebriefPurchInvHDonau."Document Type";
        //validate fields before insert to capture field errors before record is inserted, this can be optimized
        IF NOT FillPurchHeaderFromDebriefRec(DebriefPurchInvHDonau,PurchaseHeader) THEN
          EXIT(FALSE);
        IF PurchaseHeader.INSERT(TRUE) THEN BEGIN
          DebriefPurchInvHDonau."No." := PurchaseHeader."No.";
          DebriefPurchInvHDonau.Inserted := TRUE;
          DebriefPurchInvHDonau.INSERT;
        END ELSE
          EXIT(FALSE);
      END ELSE BEGIN
        DebriefPurchInvHDonau."No." := PurchaseHeader."No.";
        DebriefPurchInvHDonau.Inserted := TRUE;
        DebriefPurchInvHDonau.MODIFY;
      END;

      IF NOT FillPurchHeaderFromDebriefRec(DebriefPurchInvHDonau,PurchaseHeader) THEN
        EXIT(FALSE);
      PurchaseHeader.VALIDATE("Amount incl. VAT");
      PurchaseHeader."Wage Charge (to B Account)" := DebriefPurchInvHDonau."Wage Charge (to B Account)";  //Call C002766
      PurchaseHeader.MODIFY;

      InvoiceNo := PurchaseHeader."No.";
      EXIT(TRUE);
    END;

    PROCEDURE FillPurchHeaderFromDebriefRec@1100525025(DebriefPurchInvHDonau@1100525000 : Record 11012136;VAR PurchaseHeader@1100525003 : Record 38) : Boolean;
    VAR
      CreditMemoFactor@1100525001 : Integer;
    BEGIN
      PurchaseHeader.SetHideValidationDialog(TRUE);

      IF PurchaseHeader."Buy-from Vendor No." <> DebriefPurchInvHDonau."Buy-from Vendor No." THEN
        PurchaseHeader.VALIDATE("Buy-from Vendor No.",DebriefPurchInvHDonau."Buy-from Vendor No.");

      PurchaseHeader."Invoice Lines Input" := DebriefPurchInvHDonau."Invoice Lines";
      PurchaseHeader."Your Reference" := DebriefPurchInvHDonau."Your Reference";
      IF PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::"Credit Memo" THEN BEGIN
        PurchaseHeader."Vendor Cr. Memo No.":= DebriefPurchInvHDonau."Vendor Invoice No.";
        CreditMemoFactor := -1;
      END ELSE BEGIN
      PurchaseHeader."Vendor Invoice No." := DebriefPurchInvHDonau."Vendor Invoice No.";
        CreditMemoFactor := 1;
      END;
      PurchaseHeader."Posting Date" := DebriefPurchInvHDonau."Posting Date";
      PurchaseHeader."Document Date" := DebriefPurchInvHDonau."Document Date";
      PurchaseHeader."Posting Description" := DebriefPurchInvHDonau."Posting Description";
      PurchaseHeader."Due Date" := DebriefPurchInvHDonau."Due Date";
      PurchaseHeader.VALIDATE("Payment Terms Code",DebriefPurchInvHDonau."Payment Terms Code");
      PurchaseHeader.VALIDATE("VAT Prod. Posting Group",DebriefPurchInvHDonau."VAT Prod. Posting Group");

      PurchaseHeader."Subcontracting Invoice" := DebriefPurchInvHDonau."Subcontracting Invoice"; //dbeekman, 16-11-09: Donau Phase 2
      PurchaseHeader."Bank Account Code B Payments" := DebriefPurchInvHDonau."Bank Account Code B Payments";
      PurchaseHeader."Wage Charge (to B Account)" := DebriefPurchInvHDonau."Wage Charge (to B Account)";

      PurchaseHeader.VALIDATE("Approvement Initials",DebriefPurchInvHDonau."Approvement Initials");
      PurchaseHeader.VALIDATE("Job No.",DebriefPurchInvHDonau."Job No.");
      IF PurchaseHeader."Related Purch. Order No." <> DebriefPurchInvHDonau."Related Purch. Order No." THEN
        PurchaseHeader.VALIDATE("Related Purch. Order No.",DebriefPurchInvHDonau."Related Purch. Order No.");

      PurchaseHeader."Amount excl. VAT" := CreditMemoFactor * DebriefPurchInvHDonau.Amount;
      PurchaseHeader."VAT Amount" := CreditMemoFactor * DebriefPurchInvHDonau."Amount VAT";
      PurchaseHeader."Amount incl. VAT" := CreditMemoFactor * DebriefPurchInvHDonau."Amount Including VAT";

      EXIT(TRUE);
    END;

    PROCEDURE GetPurchaseHeader@1100525028(DebriefPurchInvHDonau@1100525002 : Record 11012136;VAR PurchaseHeader@1100525003 : Record 38) : Boolean;
    VAR
      DebriefPurchInvHDonau2@1100525005 : Record 11012136;
    BEGIN
      IF DebriefPurchInvHDonau."No." = '' THEN
        EXIT(FALSE);

      DebriefPurchInvHDonau2.SETCURRENTKEY(Company,"No.");
      DebriefPurchInvHDonau2.SETRANGE(Company,COMPANYNAME);
      DebriefPurchInvHDonau2.SETRANGE("No.",DebriefPurchInvHDonau."No.");
      IF NOT DebriefPurchInvHDonau2.FINDFIRST THEN
        EXIT(FALSE);

      EXIT(PurchaseHeader.GET(DebriefPurchInvHDonau2."Document Type",DebriefPurchInvHDonau2."No."));
    END;

    PROCEDURE ProcessLine@1100525015(VAR DebriefPurchInvLineDonau@1100525000 : Record 11012137) : Boolean;
    VAR
      PurchaseHeader@1100525002 : Record 38;
      PurchInvHeader@1100525005 : Record 122;
      PurchCrMemoHdr@1100525007 : Record 124;
      InsertSucceeded@1100525006 : Boolean;
    BEGIN
      IF DebriefPurchInvLineDonau.Company <> COMPANYNAME THEN
        EXIT(RaiseError(Text002));

      IF DebriefPurchInvLineDonau."Document No." = '' THEN
          EXIT(RaiseError(Text004));

      IF NOT DebriefPurchInvLineDonau.AddHeaderInfo THEN
        EXIT(RaiseError(Text008));

      IF DebriefPurchInvLineDonau."Approval Line" THEN BEGIN
        CLEAR(JournalTemplateName);
        IF DebriefPurchInvLineDonau."Document Type" = DebriefPurchInvLineDonau."Document Type"::Invoice THEN BEGIN
          PurchInvHeader.GET(DebriefPurchInvLineDonau."Document No.");
          JournalTemplateName := PurchInvHeader."Journal Template";
          IF PurchInvHeader."Invoice Approved" THEN
            EXIT(RaiseError(Text006));
        END ELSE BEGIN
          PurchCrMemoHdr.GET(DebriefPurchInvLineDonau."Document No.");
          JournalTemplateName := PurchCrMemoHdr."Journal Template";
          IF PurchCrMemoHdr."Credit Memo Approved" THEN
            EXIT(RaiseError(Text006));
        END;
        InsertSucceeded := InsInvApprLineFromDebriefRec(DebriefPurchInvLineDonau);
      END ELSE BEGIN
        PurchaseHeader.GET(DebriefPurchInvLineDonau."Document Type",DebriefPurchInvLineDonau."Document No.");
        IF PurchaseHeader."Related Purch. Order No." <> '' THEN
          EXIT(RaiseError(Text004))
        ELSE BEGIN
          IF NOT PurchaseHeader."Invoice Lines Input" THEN
            EXIT(RaiseError(Text005))
          ELSE
            InsertSucceeded := InsPurchLineFromDebriefRec(DebriefPurchInvLineDonau);
        END;
      END;

      IF InsertSucceeded THEN BEGIN
        DebriefPurchInvLineDonau.Inserted := TRUE;
        DebriefPurchInvLineDonau.MODIFY;
        EXIT(TRUE);
      END ELSE
        EXIT(RaiseError(Text007));
    END;

    PROCEDURE InsPurchLineFromDebriefRec@1100525032(DebriefPurchInvLineDonau@1100525000 : Record 11012137) : Boolean;
    VAR
      PurchaseLine@1100525002 : Record 39;
    BEGIN
      PurchaseLine."Document Type" := DebriefPurchInvLineDonau."Document Type";
      PurchaseLine."Document No." := DebriefPurchInvLineDonau."Document No.";
      PurchaseLine."Line No." := DebriefPurchInvLineDonau."Line No.";
      LineNo := DebriefPurchInvLineDonau."Line No.";
      DocumentNo := DebriefPurchInvLineDonau."Document No.";
      PurchaseLine.INSERT(TRUE); //closer to reality of manual input

      PurchaseLine.VALIDATE(PurchaseLine."Receiving Company",DebriefPurchInvLineDonau."Receiving Company");
      PurchaseLine.VALIDATE("Job No.",DebriefPurchInvLineDonau."Job No.");
      PurchaseLine.VALIDATE("Service Order No.",DebriefPurchInvLineDonau."Service Order No.");
      //PurchaseLine."Service Contract No." := DebriefPurchInvLineDonau."Service Contract No.";

      PurchaseLine.VALIDATE("Shortcut Dimension 1 Code",DebriefPurchInvLineDonau."Shortcut Dimension 1 Code");
      PurchaseLine.VALIDATE("Shortcut Dimension 2 Code",DebriefPurchInvLineDonau."Shortcut Dimension 2 Code");

      IF DebriefPurchInvLineDonau."No." <> '' THEN
        IF (PurchaseLine."Job No." = '') AND (PurchaseLine."Service Order No." = '') THEN BEGIN
          PurchaseLine.Type := PurchaseLine.Type::"G/L Account";
          PurchaseLine.VALIDATE("No.",DebriefPurchInvLineDonau."No.");
        END;

      IF DebriefPurchInvLineDonau."VAT Prod. Posting Group" <> '' THEN
        PurchaseLine.VALIDATE("VAT Prod. Posting Group",DebriefPurchInvLineDonau."VAT Prod. Posting Group");

      PurchaseLine.Description := DebriefPurchInvLineDonau.Description;

      IF DebriefPurchInvLineDonau.Quantity = 0 THEN
        DebriefPurchInvLineDonau.Quantity := 1;
      PurchaseLine.VALIDATE(Quantity,DebriefPurchInvLineDonau.Quantity);
      PurchaseLine.VALIDATE("Unit of Measure Code",DebriefPurchInvLineDonau."Unit Of Measure Code");
      IF DebriefPurchInvLineDonau."Document Type" = DebriefPurchInvLineDonau."Document Type"::"Credit Memo" THEN
        PurchaseLine.VALIDATE("Line Amount",-DebriefPurchInvLineDonau."Line Amount")
      ELSE
        PurchaseLine.VALIDATE("Line Amount",DebriefPurchInvLineDonau."Line Amount");

      //FIXED PS DebriefPurchInvLineDonau."Receiving Company"
      IF DebriefPurchInvLineDonau."Vehicle Code" <> '' THEN BEGIN
        DimMgt.SetCompany(PurchaseLine."Receiving Company");  //DP00387 n
        PurchaseLine."Dimension Set ID" := DimMgt.GetDimSetAddedDimVal(
          PurchaseLine."Dimension Set ID",GetVehicleDimensionCode,DebriefPurchInvLineDonau."Vehicle Code");
        DimMgt.SetCompany(COMPANYNAME);                       //DP00387 n
      END;

      IF NOT PurchaseLine.MODIFY(TRUE) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE InsInvApprLineFromDebriefRec@1100525029(DebriefPurchInvLineDonau@1100525000 : Record 11012137) : Boolean;
    VAR
      InvoiceApprovalLine@1100525002 : Record 11012032;
    BEGIN
      IF DebriefPurchInvLineDonau."Document Type" = DebriefPurchInvLineDonau."Document Type"::Invoice THEN
        InvoiceApprovalLine."Document Type" := InvoiceApprovalLine."Document Type"::"Purchase Invoice"
      ELSE
        InvoiceApprovalLine."Document Type" := InvoiceApprovalLine."Document Type"::"Credit Memo";

      InvoiceApprovalLine."Document No." := DebriefPurchInvLineDonau."Document No.";
      InvoiceApprovalLine."Line No." := DebriefPurchInvLineDonau."Line No.";
      InvoiceApprovalLine."Journal Template Name" := JournalTemplateName;
      LineNo := DebriefPurchInvLineDonau."Line No.";
      DocumentNo := DebriefPurchInvLineDonau."Document No.";
      InvoiceApprovalLine.INSERT(TRUE); //closer to reality  of manual input

      InvoiceApprovalLine.VALIDATE("Receiving Company",DebriefPurchInvLineDonau."Receiving Company");
      InvoiceApprovalLine.VALIDATE("Project No.",DebriefPurchInvLineDonau."Job No.");
      InvoiceApprovalLine.VALIDATE("Service Order No.",DebriefPurchInvLineDonau."Service Order No.");
      //dbeekman, Contract No can be specified in XML message but should stem from Service Order
      //InvoiceApprovalLine."Service Contract No." := DebriefPurchInvLineDonau."Service Contract No.";

      InvoiceApprovalLine.VALIDATE("Shortcut Dimension 1 Code",DebriefPurchInvLineDonau."Shortcut Dimension 1 Code");
      InvoiceApprovalLine.VALIDATE("Shortcut Dimension 2 Code",DebriefPurchInvLineDonau."Shortcut Dimension 2 Code");

      IF DebriefPurchInvLineDonau."No." <> '' THEN
        IF (InvoiceApprovalLine."Project No." = '') AND (InvoiceApprovalLine."Service Order No." = '') THEN BEGIN
          InvoiceApprovalLine.Type := InvoiceApprovalLine.Type::"G/L Account";
          InvoiceApprovalLine.VALIDATE("Account No.",DebriefPurchInvLineDonau."No.");
        END;

      IF DebriefPurchInvLineDonau."VAT Prod. Posting Group" <> '' THEN
        InvoiceApprovalLine.VALIDATE("VAT Prod. Posting Group",DebriefPurchInvLineDonau."VAT Prod. Posting Group");

      InvoiceApprovalLine.Description := DebriefPurchInvLineDonau.Description;

      IF DebriefPurchInvLineDonau.Quantity = 0 THEN
        DebriefPurchInvLineDonau.Quantity := 1;
      InvoiceApprovalLine.VALIDATE(Quantity,DebriefPurchInvLineDonau.Quantity);
      InvoiceApprovalLine.VALIDATE("Unit of Measure Code",DebriefPurchInvLineDonau."Unit Of Measure Code");
      IF DebriefPurchInvLineDonau."Document Type" = DebriefPurchInvLineDonau."Document Type"::"Credit Memo" THEN
        InvoiceApprovalLine.VALIDATE(Amount,-DebriefPurchInvLineDonau."Line Amount")
      ELSE
      InvoiceApprovalLine.VALIDATE(Amount,DebriefPurchInvLineDonau."Line Amount");

      //FIXED PS DebriefPurchInvLineDonau."Receiving Company"
      IF DebriefPurchInvLineDonau."Vehicle Code" <> '' THEN BEGIN
        DimMgt.SetCompany(InvoiceApprovalLine."Receiving Company");   //DP00387 n
        InvoiceApprovalLine."Dimension Set ID" := DimMgt.GetDimSetAddedDimVal(
          InvoiceApprovalLine."Dimension Set ID",GetVehicleDimensionCode,DebriefPurchInvLineDonau."Vehicle Code");
        DimMgt.SetCompany(COMPANYNAME);                              //DP00387 n
      END;

      IF NOT InvoiceApprovalLine.MODIFY(TRUE) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE ProcessInvoiceHeader@1100525008(XMLCurrNode@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";InMsg@1100525000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      lvRec@1100485003 : Record 11012136;
      lvPurchHeadRec@1100485004 : Record 38;
    BEGIN
      WITH lvRec DO BEGIN
        IF XMLDecodeCU.InvoiceHeader(XMLCurrNode,lvRec) THEN BEGIN
          IF ProcessHeader(lvRec) THEN BEGIN
            lvPurchHeadRec.GET(lvRec."Document Type",InvoiceNo);
            DonauSendReplyHeader(InMsg,lvPurchHeadRec,TRUE,'');
          END ELSE
            DonauSendReplyHeader(InMsg,lvPurchHeadRec,FALSE,ErrorText);
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ProcessInvoiceLine@1100525001(XMLCurrNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";InMsg@1100525000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      lvRec@1100485003 : Record 11012137;
      PurchaseLine@1100485004 : Record 39;
      InvoiceApprovalLine@1100525003 : Record 11012032;
      IsApprovalLine@1100525002 : Boolean;
    BEGIN
      WITH lvRec DO BEGIN
        IF XMLDecodeCU.InvoiceLine(XMLCurrNode,lvRec) THEN BEGIN
          IF NOT INSERT THEN
            MODIFY;
          IF ProcessLine(lvRec) THEN BEGIN
            IF "Approval Line" THEN BEGIN
              IF lvRec."Document Type" = lvRec."Document Type"::Invoice THEN
                InvoiceApprovalLine.GET(JournalTemplateName,InvoiceApprovalLine."Document Type"::"Purchase Invoice",DocumentNo,LineNo)
              ELSE
                InvoiceApprovalLine.GET(JournalTemplateName,InvoiceApprovalLine."Document Type"::"Credit Memo",DocumentNo,LineNo);
              DonauSendReplyApprovalLine(InMsg,InvoiceApprovalLine,TRUE,'');
            END ELSE BEGIN
              PurchaseLine.GET("Document Type",DocumentNo,LineNo);
              DonauSendReplyLine(InMsg,PurchaseLine,TRUE,'');
            END;
          END ELSE
            IF IsApprovalLine THEN
              DonauSendReplyApprovalLine(InMsg,InvoiceApprovalLine,FALSE,ErrorText)
            ELSE
              DonauSendReplyLine(InMsg,PurchaseLine,FALSE,ErrorText);
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ProcessApprovedInvoice@1100525003(XMLCurrNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";InMsg@1100525002 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") : Boolean;
    VAR
      lvrec@1100525001 : Record 25;
      lvrec2@1100525003 : Record 38;
    BEGIN
      IF XMLDecodeCU.ApprovedInvoice(XMLCurrNode,lvrec) THEN BEGIN
        DonauSendReplyApprovedInvoice(InMsg,lvrec2,TRUE,'');
      END ELSE BEGIN
        ErrorText := ErrorInvoiceNo;
        DonauSendReplyApprovedInvoice(InMsg,lvrec2,FALSE,ErrorText);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ProcessStatusInvoice@1100525004(InMsg@1100525002 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";XMLCurrNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR StatusOpt@1100525003 : Text[30]) : Boolean;
    VAR
      lvRec@1100525001 : Record 38;
    BEGIN
      IF XMLDecodeCU.StatusInvoice(XMLCurrNode,lvRec,StatusOpt) THEN BEGIN
        DonauSendReplyStatus(InMsg,lvRec,TRUE,'',StatusOpt)
      END ELSE BEGIN
        ErrorText := ErrorInvoiceNo;
        DonauSendReplyStatus(InMsg,lvRec,FALSE,ErrorText,'');
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetVehicleDimensionCode@1100525035() : Code[20];
    VAR
      ScanApplicationsSetup@1100525000 : Record 11012134;
    BEGIN
      IF NOT VehicleDimensionCodeRead THEN BEGIN
        ScanApplicationsSetup.GET;
        ScanApplicationsSetup.TESTFIELD("Donau Vehicle Dimension Code");
        VehicleDimensionCode := ScanApplicationsSetup."Donau Vehicle Dimension Code";
        VehicleDimensionCodeRead := TRUE;
      END;

      EXIT(VehicleDimensionCode);
    END;

    PROCEDURE CreateEndOfTransaction@1100525012(Type@1100525001 : 'Reply,Post';InMsg@1100525002 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message");
    VAR
      lvXMLDocOut@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      lvXMLDocOut := lvXMLDocOut.XmlDocument;
      XMLEncodeCU.EndOfTransaction(lvXMLDocOut);
      ReqHandlerCU.WriteToQueue(InMsg, lvXMLDocOut);
      CLEAR(lvXMLDocOut);
    END;

    PROCEDURE RaiseError@1100525027(ErrorText2@1100525000 : Text[50]) : Boolean;
    BEGIN
      ErrorText := ErrorText2;
      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

