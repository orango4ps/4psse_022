OBJECT Codeunit 6085786 DC Workflow Response Handling
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW19.00.00.5.00;
  }
  PROPERTIES
  {
    EventSubscriberInstance=Static-Automatic;
    Permissions=TableData 36=rm,
                TableData 38=rm,
                TableData 1511=imd;
    SingleInstance=No;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ApproveAndDelegateApprovalTxt@1005 : TextConst 'DEU=Genehmigungsposten genehmigen und delegieren.;ENU=Approve and delegate the approval entry.;NLD=Goedkeuren en delegeren goedkeuringspost.';
      CreateApprovalRequestsTxt@1001 : TextConst 'DEU=Genehmigungsanfrage fÅr Datensatz erstellen, der Genehmigerart %1 und %2 (DC) verwendet.;ENU=Create an approval request for the record using approver type %1 and %2 (DC).;NLD=Maak een goedkeuringsaanvraag voor de record met fiatteurstype %1 en %2 (DC).';
      DelegateApprovalTxt@1006 : TextConst 'DEU=Genehmigungsposten delegieren.;ENU=Delegate the approval entry.;NLD=Delegeer de goedkeuringspost.';
      DelegateApprovalAndSendBackTxt@1007 : TextConst 'DEU=Genehmigung delegieren und nach der Genehmigung zurÅcksenden.;ENU=Delegate the approval and send it back after approval.;NLD=Delegeer de goedkeuring en stuur terug na goedkeuring.';
      ForceApprovalRequestTxt@1004 : TextConst 'DEU=Genehmigung der Genehmigungsanfrage erzwingen.;ENU=Force approve the approval request.;NLD=Forceer goedkeuring van het goedkeuringsverzoek.';
      OnAfterApproveApprovalRequestTxt@1008 : TextConst 'DEU=Genehmigungsanfrage validieren und wenn erforderlich das erweiterte Genehmigungsprogramm durchfÅhren.;ENU=Validate the approval request and if needed run the advanced approval routine.;NLD=Valideer het goedkeuringsverzoek en voer indien noodzakelijk de geavanceerde goedkeuringsroutine uit.';
      ReturnToInitialStateTxt@1003 : TextConst 'DEU=Zum Anfangsstatus zurÅckkehren.;ENU=Return to the initial state.;NLD=Keer terug naar oorspronkelijke status.';
      SendBackApprovalRequestTxt@1002 : TextConst 'DEU=Eine Genehmigungsanfrage zurÅcksenden.;ENU=Send back an approval request.;NLD=Stuur een goedkeuringsverzoek terug.';
      ResponseAlreadyExistErr@1000 : TextConst 'DEU=Eine Antwort mit der Beschreibung %1 ist bereits vorhanden.;ENU=A response with description %1 already exists.;NLD=Er bestaat al een reactie met beschrijving %1.;NOR=Et svar med beskrivelsen %1 finnes allerede.;SVE=Ett svar med beskrivning %1ˇfinns redan.';

    [EventSubscriber(Codeunit,1520,OnAddWorkflowEventsToLibrary,"",Skip)]
    PROCEDURE OnCreateResponsesLibrary@25();
    BEGIN
      AddResponseToLibrary(ApproveAndDelegateRequestCode,0,ApproveAndDelegateApprovalTxt,'GROUP 0');
      AddResponseToLibrary(CreateApprovalRequestDCCode,0,CreateApprovalRequestsTxt,'GROUP 5');
      AddResponseToLibrary(DelegateAndSendBackRequestCode,0,DelegateApprovalAndSendBackTxt,'GROUP 0');
      AddResponseToLibrary(DelegateWithoutApprovalRequestCode,0,DelegateApprovalTxt,'GROUP 0');
      AddResponseToLibrary(ForceApproveApprovalRequestDCCode,0,ForceApprovalRequestTxt,'GROUP 0');
      AddResponseToLibrary(OnAfterApproveApprovalRequestCode,0,OnAfterApproveApprovalRequestTxt,'GROUP 5');
      AddResponseToLibrary(ReturnToInitialStateCode,0,ReturnToInitialStateTxt,'GROUP 0');
      AddResponseToLibrary(SendBackApprovalRequestDCCode,0,SendBackApprovalRequestTxt,'GROUP 0');
    END;

    LOCAL PROCEDURE AddResponsePredecessors@33(ResponseFunctionName@1002 : Code[128]);
    VAR
      WorkflowEventHandling@1000 : Codeunit 1520;
      DCWorkflowEventHandling@1001 : Codeunit 6085785;
    BEGIN
      CASE ResponseFunctionName OF
        SendBackApprovalRequestDCCode:
          ;
        ApproveAndDelegateRequestCode:
          AddResponsePredecessor(ApproveAndDelegateRequestCode,DCWorkflowEventHandling.RunWorkflowOnApproveAndDelegateRequestCode);
        DelegateAndSendBackRequestCode:
          AddResponsePredecessor(DelegateAndSendBackRequestCode,DCWorkflowEventHandling.RunWorkflowOnDelegateAndSendBackRequestCode);
        DelegateWithoutApprovalRequestCode:
          AddResponsePredecessor(DelegateWithoutApprovalRequestCode,DCWorkflowEventHandling.RunWorkflowOnDelegateWithoutApprovalRequestCode);
      END;
    END;

    [EventSubscriber(Codeunit,1521,OnAddWorkflowResponsePredecessorsToLibrary,"",Skip)]
    LOCAL PROCEDURE OnAddResponsePredecessors@21(ResponseFunctionName@1000 : Code[128]);
    VAR
      DCWorkflowEventHandling@1002 : Codeunit 6085785;
      WorkflowResponseHandling@1001 : Codeunit 1521;
    BEGIN
      // In order to enable standard responses to succes DC events
      CASE ResponseFunctionName OF
        WorkflowResponseHandling.ReleaseDocumentCode:
          AddResponsePredecessor(WorkflowResponseHandling.ReleaseDocumentCode, DCWorkflowEventHandling.RunWorkflowOnAfterApproveAdvancedAppRequestCode)
      END;
    END;

    [EventSubscriber(Codeunit,1521,OnExecuteWorkflowResponse,"",Skip)]
    PROCEDURE ExecuteResponse@2(VAR ResponseExecuted@1000 : Boolean;Variant@1001 : Variant;xVariant@1004 : Variant;ResponseWorkflowStepInstance@1005 : Record 1504);
    VAR
      WorkflowResponse@1002 : Record 1521;
      WorkflowChangeRecMgt@1007 : Codeunit 1531;
      Handled@1003 : Boolean;
    BEGIN
      Handled := TRUE;

      OnBeforeExecuteResponseStepInstance(ResponseWorkflowStepInstance);

      IF WorkflowResponse.GET(ResponseWorkflowStepInstance."Function Name") THEN
        CASE WorkflowResponse."Function Name" OF
          ApproveAndDelegateRequestCode:
            ApproveAndDelegateRequest(Variant,ResponseWorkflowStepInstance);
          CreateApprovalRequestDCCode:
            CreateApprovalRequestDC(Variant,ResponseWorkflowStepInstance);
          DelegateAndSendBackRequestCode:
            DelegateAndSendBackRequest(Variant,ResponseWorkflowStepInstance);
          DelegateWithoutApprovalRequestCode:
            DelegateWithoutApprovalRequest(Variant,ResponseWorkflowStepInstance);
          OnAfterApproveApprovalRequestCode:
            OnAfterApproveApprovalRequest(Variant,ResponseWorkflowStepInstance);
          ForceApproveApprovalRequestDCCode:
            ForceApproveApprovalRequestDC(Variant,ResponseWorkflowStepInstance);
          SendBackApprovalRequestDCCode:
            SendBackApprovalRequestDC(Variant,ResponseWorkflowStepInstance);
          ReturnToInitialStateCode:
            // Do nothing. Dummy step to return to previous state.
          ;
          ELSE
            Handled := FALSE;
        END;

      IF Handled THEN
        ResponseExecuted := TRUE;
    END;

    PROCEDURE CreateApprovalRequestDCCode@9() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateApprovalRequestsDC'));
    END;

    LOCAL PROCEDURE CreateApprovalRequestDC@8(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      PurchaseHeader@1004 : Record 38;
      DCApprovalMgmt@1003 : Codeunit 6085722;
    BEGIN
      GetPurchaseHeaderFromVariant(Variant,PurchaseHeader);
      DCApprovalMgmt.CreatePurchApprovalRequest(PurchaseHeader,WorkflowStepInstance.ID);
    END;

    PROCEDURE ApproveAndDelegateRequestCode@11() : Text;
    BEGIN
      EXIT(UPPERCASE('ApproveAndDelegateRequest'));
    END;

    LOCAL PROCEDURE ApproveAndDelegateRequest@10(VAR Variant@1001 : Variant;VAR WorkflowStepInstance@1000 : Record 1504);
    VAR
      ApprovalEntry@1004 : Record 454;
      DCApprovalMgmt@1003 : Codeunit 6085722;
      RecRef@1002 : RecordRef;
    BEGIN
      GetApprovalEntryFromVariant(Variant,ApprovalEntry);
      DCApprovalMgmt.ApproveAndDelegate(ApprovalEntry,ApprovalEntry."Delegated To User ID");
    END;

    PROCEDURE DelegateWithoutApprovalRequestCode@15() : Text;
    BEGIN
      EXIT(UPPERCASE('DelegateWithoutApprovalRequest'));
    END;

    LOCAL PROCEDURE DelegateWithoutApprovalRequest@13(VAR Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      ApprovalEntry@1004 : Record 454;
      DCApprovalMgmt@1003 : Codeunit 6085722;
      RecRef@1002 : RecordRef;
    BEGIN
      GetApprovalEntryFromVariant(Variant,ApprovalEntry);
      DCApprovalMgmt.DelegateWithoutApproval(ApprovalEntry,ApprovalEntry."Delegated To User ID");
    END;

    PROCEDURE DelegateAndSendBackRequestCode@18() : Text;
    BEGIN
      EXIT(UPPERCASE('DelegateAndSendBackRequest'));
    END;

    LOCAL PROCEDURE DelegateAndSendBackRequest@14(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      ApprovalEntry@1004 : Record 454;
      DCApprovalMgmt@1003 : Codeunit 6085722;
      RecRef@1002 : RecordRef;
    BEGIN
      GetApprovalEntryFromVariant(Variant,ApprovalEntry);
      DCApprovalMgmt.DelegateAndSendBack(ApprovalEntry,ApprovalEntry."Delegated To User ID");
    END;

    PROCEDURE ForceApproveApprovalRequestDCCode@6() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ForcApproveApprovalRequestsDC'));
    END;

    LOCAL PROCEDURE ForceApproveApprovalRequestDC@5(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      PurchaseHeader@1002 : Record 38;
      DCApprovalMgmt@1003 : Codeunit 6085722;
    BEGIN
      GetPurchaseHeaderFromVariant(Variant,PurchaseHeader);
      DCApprovalMgmt.ForceApproval(PurchaseHeader,TRUE);
    END;

    PROCEDURE OnAfterApproveApprovalRequestCode@16() : Text;
    BEGIN
      EXIT(UPPERCASE('OnAfterApproveApprovalRequest'));
    END;

    LOCAL PROCEDURE OnAfterApproveApprovalRequest@17(Variant@1003 : Variant;WorkflowStepInstance@1002 : Record 1504);
    VAR
      ApprovalEntry@1004 : Record 454;
      DCApprovalMgmt@1001 : Codeunit 6085722;
      RecRef@1000 : RecordRef;
    BEGIN
      GetApprovalEntryFromVariant(Variant,ApprovalEntry);
      DCApprovalMgmt.OnAfterApproveApprovalRequest(ApprovalEntry);
    END;

    PROCEDURE SendBackApprovalRequestDCCode@3() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SendBackApprovalRequestsDC'));
    END;

    LOCAL PROCEDURE SendBackApprovalRequestDC@1(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      ApprovalEntry@1004 : Record 454;
      DCApprovalMgmt@1003 : Codeunit 6085722;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      ApprovalEntry.SETPOSITION(RecRef.GETPOSITION(FALSE));
      ApprovalEntry.FIND;
      DCApprovalMgmt.SendBackApprovalRequest(ApprovalEntry);
    END;

    PROCEDURE ReturnToInitialStateCode@7() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ReturnToInitialState'));
    END;

    PROCEDURE AddResponseToLibrary@26(FunctionName@1002 : Code[128];TableID@1001 : Integer;Description@1000 : Text[250];ResponseOptionGroup@1004 : Code[20]);
    VAR
      WorkflowResponse@1003 : Record 1521;
    BEGIN
      IF WorkflowResponse.GET(FunctionName) THEN
        EXIT;

      WorkflowResponse.SETRANGE(Description,Description);
      IF WorkflowResponse.FINDFIRST THEN
        ERROR(ResponseAlreadyExistErr,Description);

      WorkflowResponse.INIT;
      WorkflowResponse."Function Name" := FunctionName;
      WorkflowResponse."Table ID" := TableID;
      WorkflowResponse.Description := Description;
      WorkflowResponse."Response Option Group" := ResponseOptionGroup;
      WorkflowResponse.INSERT;

      AddResponsePredecessors(WorkflowResponse."Function Name");
    END;

    PROCEDURE AddResponsePredecessor@61(FunctionName@1000 : Code[128];PredecessorFunctionName@1001 : Code[128]);
    VAR
      WFEventResponseCombination@1002 : Record 1509;
    BEGIN
      WFEventResponseCombination.INIT;
      WFEventResponseCombination.Type := WFEventResponseCombination.Type::Response;
      WFEventResponseCombination."Function Name" := FunctionName;
      WFEventResponseCombination."Predecessor Type" := WFEventResponseCombination."Predecessor Type"::"Event";
      WFEventResponseCombination."Predecessor Function Name" := PredecessorFunctionName;
      IF WFEventResponseCombination.INSERT THEN;
    END;

    [Integration]
    PROCEDURE OnBeforeExecuteResponseStepInstance@19(VAR NewWorkflowStepInstance@1000 : Record 1504);
    BEGIN
    END;

    [EventSubscriber(Table,1502,OnBeforeModifyEvent,"",Skip)]
    LOCAL PROCEDURE OnBeforeWorkFlowStepModify@12(VAR Rec@1000 : Record 1502;VAR xRec@1001 : Record 1502;RunTrigger@1002 : Boolean);
    BEGIN
      WITH Rec DO BEGIN
        CASE "Function Name" OF
          ReturnToInitialStateCode :
            "Next Workflow Step ID" := BacktrackStartingState(Rec);
        END;
      END;
    END;

    LOCAL PROCEDURE BacktrackStartingState@4(WorkflowStep@1000 : Record 1502) : Integer;
    VAR
      WorkflowStep2@1001 : Record 1502;
    BEGIN
      WorkflowStep2.SETRANGE("Workflow Code",WorkflowStep."Workflow Code");
      WorkflowStep2.SETRANGE(ID,WorkflowStep."Previous Workflow Step ID");
      IF WorkflowStep2.FINDFIRST AND (WorkflowStep2.Type <> WorkflowStep2.Type::"Event") THEN
        REPEAT
          WorkflowStep2.SETRANGE(ID,WorkflowStep2."Previous Workflow Step ID");
          WorkflowStep2.FINDFIRST;
        UNTIL (WorkflowStep2.Type = WorkflowStep2.Type::"Event");

      EXIT(WorkflowStep2."Previous Workflow Step ID")
    END;

    LOCAL PROCEDURE GetApprovalEntryFromVariant@23(VAR Variant@1000 : Variant;VAR ApprovalEntry@1001 : Record 454);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      ApprovalEntry.SETPOSITION(RecRef.GETPOSITION(FALSE));
      ApprovalEntry.FIND;
    END;

    LOCAL PROCEDURE GetPurchaseHeaderFromVariant@20(VAR Variant@1001 : Variant;VAR PurchaseHeader@1000 : Record 38);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      PurchaseHeader.SETPOSITION(RecRef.GETPOSITION(FALSE));
      PurchaseHeader.FIND;
    END;

    BEGIN
    END.
  }
}

