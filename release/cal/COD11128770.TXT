OBJECT Codeunit 11128770 Long Term Maint. Plan Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CreateSnapshot(TODAY, TIME, '');
          END;

  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'DEU=Fortschritt:\Standorte @1@@@@@@@@@@@\Objekte @2@@@@@@@@@@@;ENU=Progress:\Locations @1@@@@@@@@@@@\Objects   @2@@@@@@@@@@@;NLD=Voortgang:\Locaties @1@@@@@@@@@@@\Objecten @2@@@@@@@@@@@';
      BudgetType@1100528601 : 'Planning,Preventive,Corrective';
      Text001@1100528602 : TextConst 'DEU=Servicestandort %1 hat keine definierte Standortstruktur.;ENU=Service Location %1 has no Location Structure defined.;NLD=Voor servicelocatie %1 is geen locatiestructuur vastgelegd.';
      Text002@1100528604 : TextConst 'DEU=Aufgabe besteht bereits, bestehende anzeigen?;ENU=Task already exists, show existing one?;NLD=Er bestaat reeds een taak voor dit object, wilt u de bestaande taak openen?';
      Text003@1100528603 : TextConst 'DEU=Messtechnische Zustandserfassung, Ersatz, Reparatur;ENU=Condition Measurement,Replacement,Repair;NLD=Conditiemeting,Vervanging,Reparatie;NOR=Tilstandsm†ling,Erstatning,Reparer';
      ProgressDialog@1100528606 : Dialog;

    PROCEDURE CreateSnapshot@1100528600(IReportingDate@1100528600 : Date;IReportingTime@1100528605 : Time;ILocationFilter@1100528606 : Text[250]) Result : Boolean;
    VAR
      ServiceLocation@1100528601 : Record 11012801;
      RecordCount@1100528603 : Integer;
      RecordCounter@1100528604 : Integer;
    BEGIN
      ServiceLocation.SETCURRENTKEY("LT. Maint. Plan Location OBS");
      ServiceLocation.SETRANGE("LT. Maint. Plan Location OBS", TRUE);
      IF ILocationFilter <> '' THEN
        ServiceLocation.SETFILTER("No.", ILocationFilter);
      IF ServiceLocation.FINDSET THEN BEGIN
        RecordCount := ServiceLocation.COUNT;
        ProgressDialog.OPEN(Text000);
        REPEAT
          RecordCounter += 1;
          ProgressDialog.UPDATE(1, ROUND(RecordCounter / RecordCount * 9999, 1));
          Result := CreateServLocSnapshot(ServiceLocation."No.", IReportingDate, IReportingTime);
        UNTIL ServiceLocation.NEXT = 0;
        ProgressDialog.CLOSE;
      END;
    END;

    LOCAL PROCEDURE CreateServLocSnapshot@1100528601(IServiceLocationNo@1100528606 : Code[20];IReportingDate@1100528600 : Date;IReportingTime@1100528601 : Time) : Boolean;
    VAR
      LTMaintPlanBudgetHeader@1100528602 : Record 11128782;
      ServiceLocation@1100528603 : Record 11012801;
      ServiceLocationStructure@1100528604 : Record 11071719;
      ServiceLocStructureLine@1100528605 : Record 11071720;
      RecordCount@1100528609 : Integer;
      RecordCounter@1100528608 : Integer;
    BEGIN
      LTMaintPlanBudgetHeader.SETRANGE("Service Location No.", IServiceLocationNo);
      LTMaintPlanBudgetHeader.SETRANGE("Reporting Date", IReportingDate);
      LTMaintPlanBudgetHeader.DELETEALL(TRUE);

      ServiceLocation.GET(IServiceLocationNo);
      ServiceLocation.CALCFIELDS("Def. LTMP Loc. Structure No.");
      IF ServiceLocation."Def. LTMP Loc. Structure No." = 0 THEN
        EXIT;
      IF NOT ServiceLocationStructure.GET(IServiceLocationNo, ServiceLocation."Def. LTMP Loc. Structure No.") THEN
        EXIT;
      ServiceLocStructureLine.SETRANGE("Service Location No.", ServiceLocationStructure."Service Location No.");
      ServiceLocStructureLine.SETRANGE("Structure No.", ServiceLocationStructure."No.");
      ServiceLocStructureLine.SETRANGE("Object Line", TRUE);
      ServiceLocStructureLine.SETFILTER("Service Object No.", '<>%1', '');
      IF ServiceLocStructureLine.FINDSET THEN BEGIN
        RecordCount := ServiceLocStructureLine.COUNT;
        REPEAT
          RecordCounter += 1;
          ProgressDialog.UPDATE(2, ROUND(RecordCounter / RecordCount * 9999, 1));
          CreateBudget(IServiceLocationNo,
            ServiceLocStructureLine."Element Level 1",
            ServiceLocStructureLine."Element Level 2",
            ServiceLocStructureLine."No.",
            ServiceLocStructureLine.Level,
            ServiceLocStructureLine."Service Object No.",
            IReportingDate, IReportingTime);
        UNTIL ServiceLocStructureLine.NEXT = 0;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateBudget@1100528611(IServiceLocationNo@1100528601 : Code[20];IElementLevel1@1100528603 : Code[20];IElementLevel2@1100528604 : Code[20];IElementLevel3@1100528605 : Code[20];ILevel@1100528606 : Integer;IServiceObjectNo@1100528600 : Code[20];IReportingDate@1100528602 : Date;IReportingTime@1100528607 : Time);
    BEGIN
      CreateBudgetHeader(IServiceLocationNo, IServiceObjectNo, IReportingDate, IReportingTime);
      CreateTaskBudget(IServiceLocationNo, IElementLevel1, IElementLevel2, IElementLevel3, ILevel, IServiceObjectNo, IReportingDate);
      CreateOtherBudget(IServiceLocationNo, IElementLevel1, IElementLevel2, IElementLevel3, ILevel, IServiceObjectNo, IReportingDate);
    END;

    LOCAL PROCEDURE CreateTaskBudget@1100528603(IServiceLocationNo@1100528601 : Code[20];IElementLevel1@1100528605 : Code[20];IElementLevel2@1100528607 : Code[20];IElementLevel3@1100528608 : Code[20];ILevel@1100528609 : Integer;IServiceObjectNo@1100528600 : Code[20];IReportingDate@1100528602 : Date);
    VAR
      LTMaintPlanTask@1100528603 : Record 11128781;
      NEN2767LTMPSetup@1100528613 : Record 11128772;
      LastExpectedExecutionYear@1100528614 : Integer;
      ExpectedExecutionDate@1100528606 : Date;
      LastExpectedExecutionDate@1100528604 : Date;
      Amount@1100528610 : Decimal;
      CurrentYear@1100528612 : Integer;
      LastYear@1100528611 : Integer;
    BEGIN
      LTMaintPlanTask.SETRANGE("Service Object No.", IServiceObjectNo);
      LTMaintPlanTask.SETFILTER("Expected Execution Year", '<>%1', 0);
      LTMaintPlanTask.SETFILTER(Amount, '<>%1', 0);
      IF LTMaintPlanTask.FINDSET THEN BEGIN
        REPEAT
          ExpectedExecutionDate := DMY2DATE(1, 1, LTMaintPlanTask."Expected Execution Year");
          LastYear := DATE2DMY(ExpectedExecutionDate, 3);
          IF FORMAT(LTMaintPlanTask.Interval) = '' THEN
            LastExpectedExecutionDate := ExpectedExecutionDate
          ELSE BEGIN
            NEN2767LTMPSetup.GET;
            NEN2767LTMPSetup.TESTFIELD("LTMP Planning Horizon");
            LastExpectedExecutionYear := DATE2DMY(CALCDATE(NEN2767LTMPSetup."LTMP Planning Horizon", TODAY), 3);
            LastExpectedExecutionDate := DMY2DATE(31, 12, LastExpectedExecutionYear);
          END;
          Amount := 0;
          REPEAT
            Amount += LTMaintPlanTask.Amount;
            ExpectedExecutionDate := CALCDATE(LTMaintPlanTask.Interval, ExpectedExecutionDate);
            CurrentYear := DATE2DMY(ExpectedExecutionDate, 3);
            IF LastYear < CurrentYear THEN BEGIN
              IF Amount <> 0 THEN
                CreateBudgetLine(IServiceLocationNo, IElementLevel1, IElementLevel2, IElementLevel3, ILevel, IServiceObjectNo,
                  IReportingDate, BudgetType::Planning, LTMaintPlanTask."Task No.",
                  Amount, LastYear, FORMAT(LTMaintPlanTask.Interval) = '', '');
              Amount := 0;
              LastYear := CurrentYear;
            END;
          UNTIL (FORMAT(LTMaintPlanTask.Interval) = '') OR (ExpectedExecutionDate > LastExpectedExecutionDate);
          IF Amount <> 0 THEN
            CreateBudgetLine(IServiceLocationNo, IElementLevel1, IElementLevel2, IElementLevel3, ILevel, IServiceObjectNo,
              IReportingDate, BudgetType::Planning, LTMaintPlanTask."Task No.",
              Amount, DATE2DMY(LastExpectedExecutionDate, 3), FORMAT(LTMaintPlanTask.Interval) = '', '');
        UNTIL LTMaintPlanTask.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateOtherBudget@1100528607(IServiceLocationNo@1100528601 : Code[20];IElementLevel1@1100528628 : Code[20];IElementLevel2@1100528629 : Code[20];IElementLevel3@1100528630 : Code[20];ILevel@1100528631 : Integer;IServiceObjectNo@1100528600 : Code[20];IReportingDate@1100528602 : Date);
    VAR
      ServiceObject@1100528605 : Record 11071691;
      ContractObject@1100528603 : Record 11071702;
      ServiceContractArrangement@1100528611 : Record 11071705;
      ServiceOrder@1100528621 : Record 11012823;
      ServiceContract@1100528623 : Record 11012812;
      ContractObjectMaintenance@1100528624 : Record 11071692;
      SCBudgetVersionCalls@1100528625 : Record 11071928;
      NEN2767LTMPSetup@1100528632 : Record 11128772;
      MaintenanceManagement@1100528607 : Codeunit 11012829;
      ServiceSurchargeManagement@1100528620 : Codeunit 11012834;
      ActualContractNo@1100528608 : Code[20];
      ExpectedExecutionYear@1100528606 : Integer;
      ExecutionYearStart@1100528609 : Date;
      ExecutionYearEnd@1100528610 : Date;
      LastExpectedExecutionYear@1100528604 : Integer;
      LaborAmount@1100528612 : Decimal;
      Hours@1100528613 : Decimal;
      Material@1100528614 : Decimal;
      Subcontracting@1100528615 : Decimal;
      Sundry@1100528616 : Decimal;
      Plant@1100528617 : Decimal;
      TotalCost@1100528618 : Decimal;
      SurchargeAmount@1100528619 : Decimal;
      PreventiveAmount@1100528627 : Decimal;
      CorrectiveAmount@1100528626 : Decimal;
      NoOfObjects@1100528622 : Integer;
      DepartmentCode@1100525000 : Code[20];
    BEGIN
      NEN2767LTMPSetup.GET;
      NEN2767LTMPSetup.TESTFIELD("LTMP Planning Horizon");
      LastExpectedExecutionYear := DATE2DMY(CALCDATE(NEN2767LTMPSetup."LTMP Planning Horizon", TODAY), 3);
      FOR ExpectedExecutionYear := DATE2DMY(IReportingDate, 3) TO LastExpectedExecutionYear DO BEGIN
        ExecutionYearStart := DMY2DATE(1, 1, ExpectedExecutionYear);
        ExecutionYearEnd := DMY2DATE(31, 12, ExpectedExecutionYear);
        ActualContractNo :=
          MaintenanceManagement.GetActualContractForObject(IServiceObjectNo, ExecutionYearEnd);
        IF ContractObject.GET(ActualContractNo, IServiceObjectNo) THEN BEGIN
          ContractObjectMaintenance.SETRANGE("Service Contract No.", ContractObject."Service Contract No.");
          ContractObjectMaintenance.SETRANGE("Object No.", ContractObject."Service Object No.");
          IF ContractObjectMaintenance.FINDSET THEN
            REPEAT
              ContractObjectMaintenance.UpdateServiceContractArr(ExecutionYearEnd, FALSE, FALSE, FALSE);
            UNTIL ContractObjectMaintenance.NEXT = 0;

          ContractObject.CALCFIELDS(Quantity);
          LaborAmount := 0;
          Hours := 0;
          Material := 0;
          Subcontracting := 0;
          Sundry := 0;
          Plant := 0;
          TotalCost := 0;
          PreventiveAmount := 0;
          SurchargeAmount := 0;
          ServiceContractArrangement.SETRANGE("Service Contract No.", ContractObject."Service Contract No.");
          ServiceContractArrangement.SETRANGE("Object No.", ContractObject."Service Object No.");
          ServiceContractArrangement.SETRANGE("Theoretical Maintenance Date", ExecutionYearStart, ExecutionYearEnd);
          IF ServiceContractArrangement.FINDFIRST THEN BEGIN
            REPEAT
              ServiceObject.GET(ServiceContractArrangement."Object No.");
              DepartmentCode := ServiceObject.GetDepartmentCode(ContractObject."Service Contract No.");
              MaintenanceManagement.CalcBudgetLines2(
                6, ServiceContractArrangement."Object No.", ServiceContractArrangement."Maintenance Scheme",
                ServiceContractArrangement."Service Contract No.",
                ServiceContractArrangement."Theoretical Maintenance Date",
                ContractObject.Quantity, DepartmentCode, 0,
                0, TRUE, ServiceOrder."Source Type"::Contract,
                LaborAmount, Hours, Material, Subcontracting, Plant, Sundry, TotalCost, SurchargeAmount);
            UNTIL ServiceContractArrangement.NEXT = 0;
            PreventiveAmount := TotalCost + SurchargeAmount;
            IF PreventiveAmount <> 0 THEN
              CreateBudgetLine(IServiceLocationNo,
                IElementLevel1, IElementLevel2, IElementLevel3, ILevel,
                IServiceObjectNo, IReportingDate, BudgetType::Preventive,
                '', PreventiveAmount, ExpectedExecutionYear, FALSE, ActualContractNo);
          END;

          IF ServiceContract.GET(ActualContractNo) THEN BEGIN
            SCBudgetVersionCalls.SETRANGE("Service Contract No.", ActualContractNo);
            SCBudgetVersionCalls.SETFILTER("Index Date", '<=%1', ExecutionYearEnd);
            IF SCBudgetVersionCalls.FINDLAST THEN BEGIN
              SCBudgetVersionCalls.CALCFIELDS("Cost Amount", Hours, "Cost Amount (Material)", "Cost Amount (Labor)",
                "Cost Amount (Subcontr.)", "Cost Amount (Plant)", "Cost Amount (Sundry)");

              SurchargeAmount := ServiceSurchargeManagement.CalculateSCSurchargeAmount(
                ActualContractNo, ServiceOrder."Source Type"::Contract,
                ExecutionYearEnd,
                SCBudgetVersionCalls."Cost Amount (Labor)",
                SCBudgetVersionCalls."Cost Amount (Material)",
                SCBudgetVersionCalls."Cost Amount (Subcontr.)",
                SCBudgetVersionCalls."Cost Amount (Plant)",
                SCBudgetVersionCalls."Cost Amount (Sundry)",
                SCBudgetVersionCalls."Cost Amount");

              NoOfObjects := GetNoOfContractObjects(ActualContractNo, ExecutionYearEnd);
              IF NoOfObjects <> 0 THEN
                CorrectiveAmount := ROUND((SCBudgetVersionCalls."Cost Amount" + SurchargeAmount) / NoOfObjects)
              ELSE
                CorrectiveAmount := 0;
            END ELSE
              CorrectiveAmount := ROUND(PreventiveAmount * ServiceContract.GetPercentageShareCalls(ExecutionYearEnd) / 100);

            IF CorrectiveAmount <> 0 THEN
              CreateBudgetLine(IServiceLocationNo,
                IElementLevel1, IElementLevel2, IElementLevel3, ILevel,
                IServiceObjectNo, IReportingDate, BudgetType::Corrective,
                '', CorrectiveAmount, ExpectedExecutionYear, FALSE, ActualContractNo);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateBudgetHeader@1100528605(IServiceLocationNo@1100528600 : Code[20];IServiceObjectNo@1100528601 : Code[20];IReportingDate@1100528602 : Date;IReportingTime@1100528604 : Time);
    VAR
      LTMaintPlanBudgetHeader@1100528603 : Record 11128782;
    BEGIN
      IF NOT LTMaintPlanBudgetHeader.GET(IServiceLocationNo, IServiceObjectNo, IReportingDate) THEN BEGIN
        LTMaintPlanBudgetHeader.VALIDATE("Service Location No.", IServiceLocationNo);
        LTMaintPlanBudgetHeader.VALIDATE("Reporting Date", IReportingDate);
        LTMaintPlanBudgetHeader.VALIDATE("Reporting Time", IReportingTime);
        IF LTMaintPlanBudgetHeader.INSERT(TRUE) THEN;
        LTMaintPlanBudgetHeader.VALIDATE("Service Object No.", IServiceObjectNo);
        LTMaintPlanBudgetHeader.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateBudgetLine@1100528622(IServiceLocationNo@1100528602 : Code[20];IElementLevel1@1100528610 : Code[20];IElementLevel2@1100528611 : Code[20];IElementLevel3@1100528612 : Code[20];ILevel@1100528613 : Integer;IServiceObjectNo@1100528601 : Code[20];IReportingDate@1100528600 : Date;IBudgetType@1100528608 : 'Planning,Preventive,Corrective';ITaskNo@1100528603 : Code[10];IAmount@1100528604 : Decimal;IExpectedExecutionYear@1100528605 : Integer;IOnce@1100528609 : Boolean;IServiceContractNo@1100528614 : Code[20]);
    VAR
      LTMaintPlanBudgetLine@1100528606 : Record 11128783;
      LTMaintPlanTask@1100528607 : Record 11128781;
    BEGIN
      IF NOT LTMaintPlanTask.GET(IServiceObjectNo, ITaskNo) THEN
        LTMaintPlanTask.INIT;
      LTMaintPlanBudgetLine."Service Location No." := IServiceLocationNo;
      IF ILevel > 0 THEN
        LTMaintPlanBudgetLine."Element Level 1" := IElementLevel1;
      IF ILevel > 1 THEN
        LTMaintPlanBudgetLine."Element Level 2" := IElementLevel2;
      IF ILevel > 2 THEN
        LTMaintPlanBudgetLine."Element Level 3" := IElementLevel3;
      LTMaintPlanBudgetLine."Service Object No." := IServiceObjectNo;
      LTMaintPlanBudgetLine."Reporting Date" := IReportingDate;
      LTMaintPlanBudgetLine.Type := IBudgetType;
      LTMaintPlanBudgetLine."Task No." := ITaskNo;
      IF ITaskNo <> '' THEN
        LTMaintPlanBudgetLine."Task Type" := LTMaintPlanTask.Type
      ELSE
        LTMaintPlanBudgetLine."Task Type" := LTMaintPlanBudgetLine."Task Type"::" ";
      LTMaintPlanBudgetLine."Expected Execution Year" := IExpectedExecutionYear;
      LTMaintPlanBudgetLine.Amount := IAmount;
      LTMaintPlanBudgetLine.Once := IOnce;
      LTMaintPlanBudgetLine."Service Contract No." := IServiceContractNo;
      LTMaintPlanBudgetLine.INSERT(TRUE);
    END;

    PROCEDURE GetNoOfContractObjects@1100528615(IServiceContractNo@1100528600 : Code[20];IActualDate@1100528602 : Date) : Integer;
    VAR
      ContractObject@1100528601 : Record 11071702;
    BEGIN
      ContractObject.SETRANGE("Service Contract No.", IServiceContractNo);
      ContractObject.SETFILTER("Ending Date", '%1|>=%2', 0D, IActualDate);
      EXIT(ContractObject.COUNT);
    END;

    PROCEDURE AddLTMPServiceLocation@1100528604(VAR OServiceLocationNo@1100528602 : Code[20]) : Boolean;
    VAR
      ServiceLocation@1100528600 : Record 11012801;
      ServiceLocationStructure@1100528601 : Record 11071719;
    BEGIN
      ServiceLocation.SETRANGE("LT. Maint. Plan Location OBS", FALSE);
      IF PAGE.RUNMODAL(0, ServiceLocation) = ACTION::LookupOK THEN BEGIN
        ServiceLocationStructure.SETRANGE("Service Location No.", ServiceLocation."No.");
        ServiceLocationStructure.SETRANGE("Default for LTMP", TRUE);
        IF ServiceLocationStructure.ISEMPTY THEN BEGIN
          ServiceLocationStructure.SETRANGE("Default for LTMP");
          IF ServiceLocationStructure.FINDFIRST THEN BEGIN
            ServiceLocationStructure.VALIDATE("Default for LTMP", TRUE);
            ServiceLocationStructure.MODIFY(TRUE);
          END ELSE
            ERROR(Text001, ServiceLocation."No.");
        END;
        IF NOT ServiceLocationStructure.ISEMPTY THEN BEGIN
          ServiceLocation.VALIDATE("LT. Maint. Plan Location OBS", TRUE);
          ServiceLocation.MODIFY(TRUE);
        END;
        OServiceLocationNo := ServiceLocation."No.";
        EXIT(TRUE);
      END;
    END;

    PROCEDURE CreateAndShowNewLTMPTask@1100528606(IServiceObjectNo@1100528603 : Code[20]);
    VAR
      LTMaintPlanTask@1100528600 : Record 11128781;
      NEN2767ConditionMeasHeader@1100528602 : Record 11128776;
      TaskType@1100528601 : Integer;
    BEGIN
      LTMaintPlanTask.SETRANGE("Service Object No.", IServiceObjectNo);
      TaskType := STRMENU(Text003) -1;
      IF TaskType = -1 THEN
        ERROR('');
      LTMaintPlanTask.SETRANGE(Type, TaskType);
      LTMaintPlanTask.SETRANGE("Creation Date", TODAY);
      IF NOT LTMaintPlanTask.FINDFIRST THEN BEGIN
        LTMaintPlanTask.VALIDATE("Service Object No.", IServiceObjectNo);
        LTMaintPlanTask.VALIDATE(Type, TaskType);
        LTMaintPlanTask.INSERT(TRUE);

        IF TaskType = 0 THEN BEGIN
          NEN2767ConditionMeasHeader.SETRANGE("Service Object No.", IServiceObjectNo);
          NEN2767ConditionMeasHeader.SETRANGE("Measurement Date", TODAY);
          IF NOT NEN2767ConditionMeasHeader.FINDFIRST THEN BEGIN
            NEN2767ConditionMeasHeader.VALIDATE("Service Object No.", IServiceObjectNo);
            NEN2767ConditionMeasHeader.VALIDATE("Measurement Date", TODAY);
            NEN2767ConditionMeasHeader.INSERT(TRUE);
          END;
          COMMIT;
          PAGE.RUNMODAL(PAGE::"NEN2767 Condition Meas. OBS", NEN2767ConditionMeasHeader);
          LTMaintPlanTask.VALIDATE("Condition Measurement Date", NEN2767ConditionMeasHeader."Measurement Date");
          LTMaintPlanTask.MODIFY(TRUE);
        END;
        COMMIT;
      END ELSE
        IF NOT CONFIRM(Text002) THEN
          ERROR('');
      LTMaintPlanTask.SETRANGE(Type);
      LTMaintPlanTask.SETRANGE("Creation Date");
      PAGE.RUNMODAL(PAGE::"LT. Maint. Plan Tasks OBS", LTMaintPlanTask);
    END;

    PROCEDURE ShowLastLTMPSummary@1100528602(IServiceLocationNo@1100528600 : Code[20]);
    VAR
      LTMaintPlanBudgetHeader@1100528601 : Record 11128782;
    BEGIN
      LTMaintPlanBudgetHeader.SETRANGE("Service Location No.", IServiceLocationNo);
      LTMaintPlanBudgetHeader.SETRANGE("Service Object No.", '');
      IF LTMaintPlanBudgetHeader.FINDLAST THEN;
      PAGE.RUNMODAL(PAGE::"LT. Maint. Plan Sum. List OBS", LTMaintPlanBudgetHeader);
    END;

    PROCEDURE ShowLastLTMPSummaryCard@1100528609(IServiceLocationNo@1100528600 : Code[20]);
    VAR
      LTMaintPlanBudgetHeader@1100528601 : Record 11128782;
    BEGIN
      LTMaintPlanBudgetHeader.SETRANGE("Service Location No.", IServiceLocationNo);
      LTMaintPlanBudgetHeader.SETRANGE("Service Object No.", '');
      IF LTMaintPlanBudgetHeader.FINDLAST THEN;
      PAGE.RUNMODAL(PAGE::"LT. Maint. Plan Summary OBS", LTMaintPlanBudgetHeader);
    END;

    PROCEDURE GetLatestLTMPSummaryDate@1100528608(IServiceLocationNo@1100528600 : Code[20];VAR OReportingDate@1100528601 : Date;VAR OReportingTime@1100528602 : Time);
    VAR
      LTMaintPlanBudgetHeader@1100528603 : Record 11128782;
    BEGIN
      OReportingDate := 0D;
      OReportingTime := 0T;
      LTMaintPlanBudgetHeader.SETRANGE("Service Location No.", IServiceLocationNo);
      LTMaintPlanBudgetHeader.SETRANGE("Service Object No.", '');
      IF LTMaintPlanBudgetHeader.FINDLAST THEN BEGIN
        OReportingDate := LTMaintPlanBudgetHeader."Reporting Date";
        OReportingTime := LTMaintPlanBudgetHeader."Reporting Time";
      END;
    END;

    BEGIN
    END.
  }
}

