OBJECT Table 11012039 Hour Accounting Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 11012000=r,
                TableData 11012038=rm,
                TableData 11020231=r,
                TableData 11020253=r,
                TableData 11020259=r,
                TableData 11020269=r,
                TableData 11020295=r,
                TableData 11020315=r,
                TableData 11020322=r,
                TableData 11020323=r,
                TableData 11020324=r,
                TableData 11020325=r,
                TableData 11020355=r,
                TableData 11020356=r,
                TableData 11020357=r,
                TableData 11020358=r,
                TableData 11020359=r,
                TableData 11020360=r,
                TableData 11020361=r,
                TableData 11020362=r,
                TableData 11020363=r,
                TableData 11020364=r,
                TableData 11020365=r,
                TableData 11020366=r,
                TableData 11020390=r;
    OnInsert=BEGIN
               InitRecord;
               FillDocNoPostingDate(NOT RenamingHeader);
               UpdateCostControlStatus(UpdateAction::Insert);
               UpdateServHoursGanttChart(UpdateAction::Insert);
               CalcOverheadSurcharge;
               UpdatePreregistration;
               UpdateHeaderStatus(FALSE,TRUE,FALSE);
               //ENH050
               UpdateActualDateOnTheLine;

               //RFC150
               IF EmplRec.GET("Employee No.") AND (Type = Type::Project) AND ("Team Code"='') THEN
                 IF (EmplRec."User Default Team Code" <> '') THEN
                   "Team Code" := EmplRec."User Default Team Code";
             END;

    OnModify=VAR
               RecRef@1100485001 : RecordRef;
               xRecRef@1100485000 : RecordRef;
             BEGIN
               CheckPostingDate;
               UpdateCostControlStatus(UpdateAction::Modify);
               UpdateProjectHourLine(UpdateAction::Modify);
               UpdateServHoursGanttChart(UpdateAction::Modify);
               CalcRateAndAmount;
               CalcOverheadSurcharge;
               IF ("Departure Date" = 0D) THEN
                 "Departure Time" := 0T;
               IF ("Arrival Date" = 0D) THEN
                 "Arrival Time" := 0T;

               xRecRef.GETTABLE(xRec);
               RecRef.GETTABLE(Rec);
               LogModification(RecRef,xRecRef);

               Changed := RecIsChanged(RecRef,xRecRef); // SESB.I031 ASH 12.07.2013
               UpdatePreregistration;

               //**4PS.sn
               IF xRec."Additional Cost (Service)" = "Additional Cost (Service)" THEN
                 CheckAdditionalCostService;
               //**4PS.en
               UpdateHeaderStatus(FALSE,FALSE,TRUE);
               //ENH050
               UpdateActualDateOnTheLine;

               //RFC150
               IF (Type = Type::Project) AND
                 WageCompRec.GET("Wage Component") THEN
                 IF WageCompRec."Team Code mandatory" THEN
                   TESTFIELD("Team Code");
             END;

    OnDelete=BEGIN
               TestStatusOpen(FALSE);
               UpdateCostControlStatus(UpdateAction::Delete);
               UpdateProjectHourLine(UpdateAction::Delete);
               UpdateServHoursGanttChart(UpdateAction::Delete);
               DeleteSurcharge;  //db, 12-06-07
               IF NOT FromDeleteHeader THEN
                 UpdateHeaderStatus(TRUE,FALSE,FALSE);

               DeleteLineComments; // SESB.I031 ASH 12.07.2013
             END;

    OnRename=BEGIN
               UpdateProjectHourLine(UpdateAction::Rename);
             END;

    CaptionML=[ENU=Hour Accounting Line;
               NOR=Timerapporteringsrad;
               SVE=Tidrapporteringsrad];
    LookupPageID=Page11012277;
    DrillDownPageID=Page11012277;
  }
  FIELDS
  {
    { 10  ;   ;Year                ;Integer       ;CaptionML=[ENU=Year;
                                                              NOR=èr;
                                                              SVE=èr] }
    { 20  ;   ;Week                ;Integer       ;CaptionML=[ENU=Week;
                                                              NOR=Uke;
                                                              SVE=Vecka] }
    { 25  ;   ;Supplying Company   ;Text30        ;TableRelation=Company;
                                                   OnValidate=BEGIN
                                                                IF ("Supplying Company" <> '') AND ("Receiving Company" <> '') THEN
                                                                  FIELDERROR("Supplying Company", STRSUBSTNO(Text005,FIELDCAPTION("Receiving Company"))); // 'Double IC' not allowed.
                                                              END;

                                                   CaptionML=[ENU=Supplying Company;
                                                              NOR=Leverende  selskap;
                                                              SVE=Levererande fîretag] }
    { 30  ;   ;Employee No.        ;Code20        ;TableRelation=IF (Supplying Company=FILTER('')) Employee;
                                                   OnValidate=VAR
                                                                EmployeeCostPrice@1100528200 : Record 11020315;
                                                              BEGIN
                                                                IF "Employee No." <> '' THEN BEGIN
                                                                  FillDocNoPostingDate(FALSE);
                                                                  GetFixedEmployeeData;
                                                                  //Companychange is done in GetFixedEmployeeData
                                                                  EmplRec.GET("Employee No.");
                                                                  IF (Element = '') AND (EmplRec.Element <> '') AND ("Project No." <> '') THEN
                                                                    Element := EmplRec.Element;
                                                                  IF ("Cost Object" = '') AND (EmplRec."Global Dimension 2 Code" <> '') THEN BEGIN
                                                                    VALIDATE("Cost Object", EmplRec."Global Dimension 2 Code");
                                                                    CALCFIELDS(Description);
                                                                  END;
                                                                  "Currency Code" := '';
                                                                  IF EmplRec.External THEN BEGIN
                                                                    IF EmplRec.CURRENTCOMPANY <> COMPANYNAME THEN
                                                                      EmployeeCostPrice.CHANGECOMPANY(EmplRec.CURRENTCOMPANY);
                                                                    EmployeeCostPrice.SETRANGE("Employee No.", "Employee No.");
                                                                    IF EmployeeCostPrice.FINDFIRST THEN
                                                                      "Currency Code" := EmployeeCostPrice."Currency Code";
                                                                    END;
                                                                END;

                                                                IF gFromHourAccByProj THEN BEGIN
                                                                  CalcRateAndAmount;

                                                                  // SESB.I033 ASH 10.07.2013 >>
                                                                  CheckFieldLimits(FIELDNO(Quantity),Quantity);
                                                                  CheckFieldLimits(FIELDNO("Amount (LCY)"),"Amount (LCY)");
                                                                  CheckFieldLimits(FIELDNO(Monday),Monday);
                                                                  CheckFieldLimits(FIELDNO(Tuesday),Tuesday);
                                                                  CheckFieldLimits(FIELDNO(Wednesday),Wednesday);
                                                                  CheckFieldLimits(FIELDNO(Thursday),Thursday);
                                                                  CheckFieldLimits(FIELDNO(Friday),Friday);
                                                                  CheckFieldLimits(FIELDNO(Saturday),Saturday);
                                                                  CheckFieldLimits(FIELDNO(Sunday),Sunday);
                                                                  CheckFieldLimits(FIELDNO(Duration),FromDurationToHours(Duration));
                                                                  // SESB.I033 ASH 10.07.2013 <<
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Employee No.;
                                                              NOR=Ansattnr;
                                                              SVE=AnstÑllningsnr] }
    { 36  ;   ;Hour Set            ;Code10        ;TableRelation="Hour Set";
                                                   CaptionML=[ENU=Hour Set;
                                                              NOR=Timemal;
                                                              SVE=Timmall] }
    { 37  ;   ;Connection No.      ;Integer       ;CaptionML=[ENU=Connection No.;
                                                              NOR=Tilkoblingsnr;
                                                              SVE=Anslutningsnr] }
    { 40  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 41  ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              NOR=Bilagsnr.;
                                                              SVE=Dokumentnr];
                                                   Editable=No }
    { 42  ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                CALCFIELDS("Component Type");
                                                                IF "Component Type" = "Component Type"::Expenses THEN BEGIN
                                                                  IF CURRENTCOMPANY <> COMPANYNAME THEN
                                                                    PostingDateRec.CHANGECOMPANY(CURRENTCOMPANY);
                                                                  IF NOT (PostingDateRec.GET(Year, Week) AND (PostingDateRec."Posting Date" <> 0D)) THEN
                                                                    IF ("Posting Date" < DWY2DATE(1,Week,Year)) OR ("Posting Date" > DWY2DATE(7,Week,Year)) THEN
                                                                      ERROR(Text012);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              NOR=Bokfõringsdato;
                                                              SVE=Bokfîringsdatum] }
    { 50  ;   ;Receiving Company   ;Text30        ;TableRelation=Company;
                                                   OnValidate=VAR
                                                                ICLicenceCu@1210190000 : Codeunit 11012780;
                                                              BEGIN
                                                                IF "Receiving Company" <> '' THEN
                                                                  ICLicenceCu.CheckICEntry("Receiving Company");   //db, 01-07-04

                                                                IF ("Supplying Company" <> '') AND ("Receiving Company" <> '') THEN
                                                                  FIELDERROR("Receiving Company", STRSUBSTNO(Text005,FIELDCAPTION("Supplying Company"))); // 'Double IC' not allowed.

                                                                IF (xRec."Receiving Company" <> "Receiving Company") AND (Type = Type::Project) AND ("Connection No." <> 0) THEN
                                                                  FIELDERROR("Receiving Company", STRSUBSTNO(Text011, TABLECAPTION, HourAccProjHeader.TABLECAPTION));

                                                                IF (xRec."Receiving Company" <> "Receiving Company") THEN BEGIN
                                                                  "Plant Location" := '';
                                                                  "Plant Type" := '';
                                                                  "Plant No." := '';
                                                                  "Plant Rate Code" := '';
                                                                  "Cost Component Plant" := '';
                                                                  "Resource Req. Receiv. Company" := '';
                                                                  "Resource Request No." := '';
                                                                  FillDepartmentCode;
                                                                  //db.sn, 17-04-15: C016272
                                                                  CheckCompanyIC;
                                                                  DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, "Project No.");
                                                                  IF DimValRec.Blocked OR (DimValRec.Code = '') THEN
                                                                    "Cost Object" := '';
                                                                  //db.en, 17-04-15: C016272
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Receiving Company;
                                                              NOR=Mottakselskap;
                                                              SVE=Mottagningsfîretag] }
    { 55  ;   ;Hour Line Template Code;Code20     ;TableRelation="Hour Line Template".Code WHERE (Source=CONST(Hour Accounting));
                                                   OnValidate=VAR
                                                                HourLineTemplateMgt@1100528000 : Codeunit 11012025;
                                                              BEGIN
                                                                IF ("Hour Line Template Code") <> '' THEN
                                                                  HourLineTemplateMgt.FillHourAccountingLineFromTemplate(Rec);
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupHourLineTemplate();
                                                            END;

                                                   CaptionML=[ENU=Hour Line Template Code;
                                                              SVE=Tidrapportmallkod] }
    { 65  ;   ;Calculate Wage Costs;Option        ;CaptionML=[ENU=Calculate Wage Costs;
                                                              NOR=Beregn lõnnskoster;
                                                              SVE=BerÑkna lînekostnader];
                                                   OptionCaptionML=[ENU=Fixed Rate,Actual Rate;
                                                                    NOR=Fast sats,Faktisk sats;
                                                                    SVE=Fast avgift,Verklig avgift];
                                                   OptionString=Fixed Rate,Actual Rate }
    { 70  ;   ;Project No.         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) Job.No.;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen(FALSE);

                                                                CheckCompanyIC;
                                                                IF "Project No." <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Project);
                                                                  CheckProjectStatus;
                                                                  CheckProjectEmployee;

                                                                  IF "Project No." <> xRec."Project No." THEN BEGIN
                                                                    IF "Cost Object" <> '' THEN
                                                                      VALIDATE("Cost Object")
                                                                    ELSE
                                                                      DimValRec.INIT;
                                                                    IF (DimValRec.Element = '') AND ("Employee No." <> '') THEN BEGIN
                                                                      EmplRec.GET("Employee No.");
                                                                      Element := EmplRec.Element;
                                                                    END;
                                                                    "Extension Contract" := ''; //C010848.n
                                                                  END;
                                                                END;
                                                                FillMainProject;

                                                                IF NOT ProjElemRec.GET("Project No.",Element) THEN
                                                                  VALIDATE(Element, '');

                                                                IF "Project No." <> '' THEN BEGIN
                                                                  "Project Description" := ProjRec.Description;
                                                                  "Project City" := ProjRec.City;
                                                                  END ELSE BEGIN
                                                                  "Project Description" := '';
                                                                  "Project City" := '';
                                                                END;

                                                                IF "Rental Unit" <> '' THEN BEGIN
                                                                  IF NOT RentalUnitRec.GET("Project No.", "Rental Unit") THEN
                                                                    "Rental Unit" := '';
                                                                END;
                                                                IF (Type = Type::Project) AND ("Project No." <> xRec."Project No.") THEN
                                                                  "Resource Request No." := '';

                                                                FillDepartmentCode;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupProjectNo;
                                                            END;

                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr] }
    { 71  ;   ;Element             ;Code20        ;TableRelation=IF (Receiving Company=FILTER(''),
                                                                     Type=CONST(Project)) "Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                //* C-017858 (16-11-2009) Now also element for plant (if plant location is linked to a project)
                                                                IF Element <> '' THEN BEGIN
                                                                  IF Type <> Type::Plant THEN BEGIN
                                                                    CheckCompanyIC;
                                                                    ElementFormat.FormatElem(Element,2,"Receiving Company");
                                                                    ProjElemRec.GET("Project No.",Element);
                                                                  END ELSE BEGIN
                                                                    TESTFIELD("Plant Location");
                                                                    IF NOT CheckPlantLocLinkedToProject() THEN
                                                                      FIELDERROR(Element, Text016);
                                                                    ElementFormat.FormatElem(Element,2,PlantLocProjectCompany);
                                                                    ProjElemRec.GET(PlantLocRec."Project No.",Element);
                                                                  END;
                                                                  ProjElemRec.CheckProjectElementBlocked;    //Call 6564
                                                                  ProjElemRec.CheckProjectElementDateBlocked(Week,Year);
                                                                  "Element Description" := ProjElemRec.Description;
                                                                END ELSE
                                                                  "Element Description" := '';
                                                              END;

                                                   OnLookup=VAR
                                                              TmpProjectElement@1100527700 : TEMPORARY Record 11012010;
                                                            BEGIN
                                                              //* C-017858 (16-11-2009) Now also element for plant (if plant location is linked to a project)
                                                              CLEAR(TmpProjectElement);
                                                              IF Type <> Type::Plant THEN BEGIN
                                                                CheckCompanyIC;
                                                                ProjElemRec.SETRANGE("Project No.", "Project No.");
                                                                ProjElemRec."Project No." := "Project No.";
                                                              END ELSE BEGIN
                                                                IF NOT CheckPlantLocLinkedToProject() THEN
                                                                  EXIT;
                                                                ProjElemRec.SETRANGE("Project No.", PlantLocRec."Project No.");
                                                                ProjElemRec."Project No." := PlantLocRec."Project No.";
                                                              END;
                                                              ProjElemRec.Element := Element;
                                                              IF ProjElemRec.FINDSET THEN BEGIN
                                                                REPEAT
                                                                  TmpProjectElement.INIT;
                                                                  TmpProjectElement := ProjElemRec;
                                                                  IF ProjElemRec."Block Outside Date Range" THEN BEGIN
                                                                    IF (ProjElemRec."Starting Date" <> 0D) AND (ProjElemRec."Ending Date" <> 0D) THEN BEGIN
                                                                      IF ProjElemRec."Ending Date" < DWY2DATE(1,Week,Year) THEN
                                                                        TmpProjectElement.Blocked := TRUE;
                                                                      IF ProjElemRec."Starting Date" > DWY2DATE(7,Week,Year) THEN
                                                                        TmpProjectElement.Blocked := TRUE;
                                                                    END;

                                                                    IF (ProjElemRec."Starting Date" = 0D) AND (ProjElemRec."Ending Date" <> 0D) THEN
                                                                      IF ProjElemRec."Ending Date" < DWY2DATE(1,Week,Year) THEN
                                                                        TmpProjectElement.Blocked := TRUE;
                                                                    IF (ProjElemRec."Starting Date" <> 0D) AND (ProjElemRec."Ending Date" = 0D) THEN
                                                                      IF ProjElemRec."Starting Date" > DWY2DATE(7,Week,Year) THEN
                                                                        TmpProjectElement.Blocked := TRUE;
                                                                  END;
                                                                  TmpProjectElement.INSERT;
                                                                UNTIL ProjElemRec.NEXT = 0;
                                                              END;
                                                              IF TmpProjectElement.FINDFIRST THEN;
                                                              IF PAGE.RUNMODAL(0, TmpProjectElement) = ACTION::LookupOK THEN
                                                                IF (Type = Type::Project) OR (Type = Type::Plant) THEN  //db, 25-07-05
                                                                  VALIDATE(Element, TmpProjectElement.Element);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Element;
                                                              NOR=Element;
                                                              SVE=Element] }
    { 72  ;   ;Cost Object         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                                                 Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                IF "Cost Object" = '' THEN
                                                                  EXIT;

                                                                CheckCompanyIC;
                                                                DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, "Project No.");
                                                                DimValRec.TESTFIELD(Blocked, FALSE);
                                                                DimValRec.TESTFIELD("Proj. Rel. Cost Object Blocked", FALSE);
                                                                "Cost Type" := DimValRec."Cost Type";
                                                                IF NOT ("Cost Type" < "Cost Type"::Revenue) THEN  //* Also check when 'Receiving Company' is filled (see TableRelation)
                                                                  FIELDERROR("Cost Type");
                                                                "Cost Object Description" := DimValRec.Name;

                                                                IF (DimValRec."Wage Component" <> '') AND ("Wage Component" <> DimValRec."Wage Component") THEN
                                                                  VALIDATE("Wage Component", DimValRec."Wage Component");

                                                                IF (DimValRec.Element <> '') AND ("Project No." <> '') THEN BEGIN
                                                                  IF ProjElemRec.GET("Project No.", DimValRec.Element) THEN BEGIN
                                                                    IF NOT ProjElemRec.Blocked THEN
                                                                      VALIDATE(Element, DimValRec.Element);
                                                                  END;
                                                                END;

                                                                CheckCostType(TRUE);  //C005137.c
                                                                "Cost Component" := DimValRec."Cost Component";
                                                                CheckCostCompServOrderType;

                                                                CalcRateAndAmount;
                                                                CheckAdditionalCostService;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupCostObject;
                                                            END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Kostnadsobjekt;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 73  ;   ;Wage Component      ;Code10        ;TableRelation="Wage Component".Code WHERE (Component Type=FILTER(Hours|Expenses));
                                                   OnValidate=BEGIN
                                                                IF "Wage Component" <> '' THEN BEGIN
                                                                  IF CURRENTCOMPANY <> COMPANYNAME THEN
                                                                    WageCompRec.CHANGECOMPANY(CURRENTCOMPANY);
                                                                  WageCompRec.GET("Wage Component");
                                                                  CheckCostType(TRUE);  //C005137.c
                                                                  Overtime := WageCompRec.Overtime;
                                                                  Chargeable := WageCompRec.Chargeable;  //db, 27-07-05
                                                                  "Leave Type" := WageCompRec."Leave Type";
                                                                  "Leave Factor" := WageCompRec."Leave Factor";
                                                                  //RFC150
                                                                  IF (Type = Type::Project) AND WageCompRec."Team Code mandatory" THEN
                                                                    TESTFIELD("Team Code");
                                                                END ELSE BEGIN
                                                                  Overtime := FALSE;
                                                                  Chargeable := FALSE;
                                                                  "Leave Type" := '';
                                                                  "Leave Factor" := 0;
                                                                END;

                                                                CALCFIELDS("Component Type",Description);
                                                                IF "Component Type" = "Component Type"::Hours THEN
                                                                  Quantity := 0

                                                                ELSE IF "Component Type" = "Component Type"::Expenses THEN BEGIN // SESB.I038 ASH 10.07.2013

                                                                  Monday := 0;
                                                                  Tuesday := 0;
                                                                  Wednesday := 0;
                                                                  Thursday := 0;
                                                                  Friday := 0;
                                                                  Saturday := 0;
                                                                  Sunday := 0;
                                                                  "Total Line" := 0;
                                                                  Day := Day::" ";
                                                                  "Time From" := 0T;
                                                                  "Time Until" := 0T;
                                                                  Duration := 0;
                                                                END;

                                                                // SESB.I033 ASH 10.07.2013 >>
                                                                CheckFieldLimits(FIELDNO(Quantity),Quantity);
                                                                CheckFieldLimits(FIELDNO("Amount (LCY)"),"Amount (LCY)");
                                                                CheckFieldLimits(FIELDNO(Monday),Monday);
                                                                CheckFieldLimits(FIELDNO(Tuesday),Tuesday);
                                                                CheckFieldLimits(FIELDNO(Wednesday),Wednesday);
                                                                CheckFieldLimits(FIELDNO(Thursday),Thursday);
                                                                CheckFieldLimits(FIELDNO(Friday),Friday);
                                                                CheckFieldLimits(FIELDNO(Saturday),Saturday);
                                                                CheckFieldLimits(FIELDNO(Sunday),Sunday);
                                                                CheckFieldLimits(FIELDNO(Duration),FromDurationToHours(Duration));
                                                                // SESB.I033 ASH 10.07.2013 <<

                                                                // SESB.I038 ASH 04.07.2013 >>
                                                                "Excl. from Normal&Extra Hours" := ("Component Type" IN ["Component Type"::"Expense hours","Component Type"::Addition]);
                                                                // SESB.I038 ASH 04.07.2013 <<

                                                                //mg.sn, 29-06-11: M27722
                                                                IF CompTypeEditable THEN
                                                                  IF "Registration Day" <> "Registration Day"::" " THEN
                                                                    "Posting Date" := DWY2DATE("Registration Day", Week, Year);
                                                                //mg.en, 29-06-11: M27722

                                                                //>>150219 ITERO.WG
                                                                IF WageCompRec."Expense Hour to Project" THEN
                                                                  "Charge Exp. Hour to Project" := TRUE;
                                                                //<<150219 ITERO.WG
                                                                CalcRateAndAmount;
                                                              END;

                                                   CaptionML=[ENU=Wage Component;
                                                              NOR=Lõnnsart;
                                                              SVE=Lîneart] }
    { 74  ;   ;Overtime            ;Boolean       ;FieldClass=Normal;
                                                   CaptionML=[ENU=Overtime;
                                                              NOR=Overtid;
                                                              SVE=ôvertid];
                                                   Editable=No }
    { 75  ;   ;Extension Contract  ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                IF "Extension Contract" = '' THEN
                                                                  EXIT;

                                                                CheckCompanyIC;
                                                                ExtRec.GET("Project No.", "Extension Contract");
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              ExtRec."Project No." := "Project No.";
                                                              ExtRec."Contract No." := "Extension Contract";
                                                              ExtRec.SETRANGE("Project No.", "Project No.");
                                                              IF PAGE.RUNMODAL(0, ExtRec) = ACTION::LookupOK THEN
                                                                IF Type = Type::Project THEN  //db, 25-07-05
                                                                  VALIDATE("Extension Contract", ExtRec."Contract No.");
                                                            END;

                                                   CaptionML=[ENU=Extension Contract;
                                                              NOR=ETA;
                                                              SVE=éTA] }
    { 80  ;   ;Description         ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Wage Component".Description WHERE (Code=FIELD(Wage Component)));
                                                   CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning];
                                                   Editable=No }
    { 85  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              NOR=Valutakode;
                                                              SVE=Valutakod] }
    { 110 ;   ;Monday              ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                CheckFieldLimits(FIELDNO(Monday),Monday); // SESB.I033 ASH 03.07.2013
                                                                IF Duration <> 0 THEN
                                                                  ERROR(Text007);
                                                                TotalHours;
                                                              END;

                                                   CaptionML=[ENU=Monday;
                                                              NOR=Mandag;
                                                              SVE=MÜndag];
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes;
                                                   CaptionClass=GetCaptionClass(FIELDNO(Monday),1) }
    { 120 ;   ;Tuesday             ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                CheckFieldLimits(FIELDNO(Tuesday),Tuesday); // SESB.I033 ASH 03.07.2013
                                                                IF Duration <> 0 THEN
                                                                  ERROR(Text007);
                                                                TotalHours;
                                                              END;

                                                   CaptionML=[ENU=Tuesday;
                                                              NOR=Tirsdag;
                                                              SVE=Tisdag];
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes;
                                                   CaptionClass=GetCaptionClass(FIELDNO(Tuesday),2) }
    { 130 ;   ;Wednesday           ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                CheckFieldLimits(FIELDNO(Wednesday),Wednesday); // SESB.I033 ASH 03.07.2013
                                                                IF Duration <> 0 THEN
                                                                  ERROR(Text007);
                                                                TotalHours;
                                                              END;

                                                   CaptionML=[ENU=Wednesday;
                                                              NOR=Onsdag;
                                                              SVE=Onsdag];
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes;
                                                   CaptionClass=GetCaptionClass(FIELDNO(Wednesday),3) }
    { 140 ;   ;Thursday            ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                CheckFieldLimits(FIELDNO(Thursday),Thursday); // SESB.I033 ASH 03.07.2013
                                                                IF Duration <> 0 THEN
                                                                  ERROR(Text007);
                                                                TotalHours;
                                                              END;

                                                   CaptionML=[ENU=Thursday;
                                                              NOR=Torsdag;
                                                              SVE=Torsdag];
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes;
                                                   CaptionClass=GetCaptionClass(FIELDNO(Thursday),4) }
    { 150 ;   ;Friday              ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                CheckFieldLimits(FIELDNO(Friday),Friday); // SESB.I033 ASH 03.07.2013
                                                                IF Duration <> 0 THEN
                                                                  ERROR(Text007);
                                                                TotalHours;
                                                              END;

                                                   CaptionML=[ENU=Friday;
                                                              NOR=Fredag;
                                                              SVE=Fredag];
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes;
                                                   CaptionClass=GetCaptionClass(FIELDNO(Friday),5) }
    { 160 ;   ;Saturday            ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                CheckFieldLimits(FIELDNO(Saturday),Saturday); // SESB.I033 ASH 03.07.2013
                                                                IF Duration <> 0 THEN
                                                                  ERROR(Text007);
                                                                TotalHours;
                                                              END;

                                                   CaptionML=[ENU=Saturday;
                                                              NOR=Lõrdag;
                                                              SVE=Lîrdag];
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes;
                                                   CaptionClass=GetCaptionClass(FIELDNO(Saturday),6) }
    { 170 ;   ;Sunday              ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                CheckFieldLimits(FIELDNO(Sunday),Sunday); // SESB.I033 ASH 03.07.2013
                                                                IF Duration <> 0 THEN
                                                                  ERROR(Text007);
                                                                TotalHours;
                                                              END;

                                                   CaptionML=[ENU=Sunday;
                                                              NOR=Sõndag;
                                                              SVE=Sîndag];
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes;
                                                   CaptionClass=GetCaptionClass(FIELDNO(Sunday),7) }
    { 180 ;   ;Total Line          ;Decimal       ;CaptionML=[ENU=Total Line;
                                                              NOR=Totalrad;
                                                              SVE=Totalrad];
                                                   DecimalPlaces=0:3;
                                                   Editable=No }
    { 190 ;   ;Total Monday        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Monday WHERE (Year=FIELD(Year),
                                                                                                        Week=FIELD(Week),
                                                                                                        Employee No.=FIELD(Employee No.),
                                                                                                        Overtime=CONST(No),
                                                                                                        Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                        Excl. from Normal&Extra Hours=CONST(No),
                                                                                                        Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Total Monday;
                                                              NOR=Totalt mandag;
                                                              SVE=Totalt mÜndag];
                                                   Editable=No }
    { 200 ;   ;Total Tuesday       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Tuesday WHERE (Year=FIELD(Year),
                                                                                                         Week=FIELD(Week),
                                                                                                         Employee No.=FIELD(Employee No.),
                                                                                                         Overtime=CONST(No),
                                                                                                         Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                         Excl. from Normal&Extra Hours=CONST(No),
                                                                                                         Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Total Tuesday;
                                                              NOR=Totalt tirsdag;
                                                              SVE=Totalt tisdag];
                                                   Editable=No }
    { 210 ;   ;Total Wednesday     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Wednesday WHERE (Year=FIELD(Year),
                                                                                                           Week=FIELD(Week),
                                                                                                           Employee No.=FIELD(Employee No.),
                                                                                                           Overtime=CONST(No),
                                                                                                           Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                           Excl. from Normal&Extra Hours=CONST(No),
                                                                                                           Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Total Wednesday;
                                                              NOR=Totalt onsdag;
                                                              SVE=Totalt onsdag];
                                                   Editable=No }
    { 220 ;   ;Total Thursday      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Thursday WHERE (Year=FIELD(Year),
                                                                                                          Week=FIELD(Week),
                                                                                                          Employee No.=FIELD(Employee No.),
                                                                                                          Overtime=CONST(No),
                                                                                                          Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                          Excl. from Normal&Extra Hours=CONST(No),
                                                                                                          Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Total Thursday;
                                                              NOR=Totalt torsdag;
                                                              SVE=Totalt torsdag];
                                                   Editable=No }
    { 230 ;   ;Total Friday        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Friday WHERE (Year=FIELD(Year),
                                                                                                        Week=FIELD(Week),
                                                                                                        Employee No.=FIELD(Employee No.),
                                                                                                        Overtime=CONST(No),
                                                                                                        Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                        Excl. from Normal&Extra Hours=CONST(No),
                                                                                                        Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Total Friday;
                                                              NOR=Totalt fredag;
                                                              SVE=Totalt fredag];
                                                   Editable=No }
    { 240 ;   ;Total Saturday      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Saturday WHERE (Year=FIELD(Year),
                                                                                                          Week=FIELD(Week),
                                                                                                          Employee No.=FIELD(Employee No.),
                                                                                                          Overtime=CONST(No),
                                                                                                          Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                          Excl. from Normal&Extra Hours=CONST(No),
                                                                                                          Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Total Saturday;
                                                              NOR=Totalt lõrdag;
                                                              SVE=Totalt lîrdag];
                                                   Editable=No }
    { 250 ;   ;Total Sunday        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Sunday WHERE (Year=FIELD(Year),
                                                                                                        Week=FIELD(Week),
                                                                                                        Employee No.=FIELD(Employee No.),
                                                                                                        Overtime=CONST(No),
                                                                                                        Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                        Excl. from Normal&Extra Hours=CONST(No),
                                                                                                        Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Total Sunday;
                                                              NOR=Totalt sõndag;
                                                              SVE=Totalt sîndag];
                                                   Editable=No }
    { 260 ;   ;Overtime Monday     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Monday WHERE (Year=FIELD(Year),
                                                                                                        Week=FIELD(Week),
                                                                                                        Employee No.=FIELD(Employee No.),
                                                                                                        Overtime=CONST(Yes),
                                                                                                        Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                        Excl. from Normal&Extra Hours=CONST(No),
                                                                                                        Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Overtime Monday;
                                                              NOR=Overtid, mandag;
                                                              SVE=ôvertid, mÜndag];
                                                   Editable=No }
    { 270 ;   ;Overtime Tuesday    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Tuesday WHERE (Year=FIELD(Year),
                                                                                                         Week=FIELD(Week),
                                                                                                         Employee No.=FIELD(Employee No.),
                                                                                                         Overtime=CONST(Yes),
                                                                                                         Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                         Excl. from Normal&Extra Hours=CONST(No),
                                                                                                         Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Overtime Tuesday;
                                                              NOR=Overtid, tirsdag;
                                                              SVE=ôvertid, tisdag];
                                                   Editable=No }
    { 280 ;   ;Overtime Wednesday  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Wednesday WHERE (Year=FIELD(Year),
                                                                                                           Week=FIELD(Week),
                                                                                                           Employee No.=FIELD(Employee No.),
                                                                                                           Overtime=CONST(Yes),
                                                                                                           Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                           Excl. from Normal&Extra Hours=CONST(No),
                                                                                                           Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Overtime Wednesday;
                                                              NOR=Overtid, onsdag;
                                                              SVE=ôvertid, onsdag];
                                                   Editable=No }
    { 290 ;   ;Overtime Thursday   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Thursday WHERE (Year=FIELD(Year),
                                                                                                          Week=FIELD(Week),
                                                                                                          Employee No.=FIELD(Employee No.),
                                                                                                          Overtime=CONST(Yes),
                                                                                                          Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                          Excl. from Normal&Extra Hours=CONST(No),
                                                                                                          Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Overtime Thursday;
                                                              NOR=Overtid, torsdag;
                                                              SVE=ôvertid, torsdag];
                                                   Editable=No }
    { 300 ;   ;Overtime Friday     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Friday WHERE (Year=FIELD(Year),
                                                                                                        Week=FIELD(Week),
                                                                                                        Employee No.=FIELD(Employee No.),
                                                                                                        Overtime=CONST(Yes),
                                                                                                        Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                        Excl. from Normal&Extra Hours=CONST(No),
                                                                                                        Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Overtime Friday;
                                                              NOR=Overtid, fredag;
                                                              SVE=ôvertid, fredag];
                                                   Editable=No }
    { 310 ;   ;Overtime Saturday   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Saturday WHERE (Year=FIELD(Year),
                                                                                                          Week=FIELD(Week),
                                                                                                          Employee No.=FIELD(Employee No.),
                                                                                                          Overtime=CONST(Yes),
                                                                                                          Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                          Excl. from Normal&Extra Hours=CONST(No),
                                                                                                          Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Overtime Saturday;
                                                              NOR=Overtid, lõrdag;
                                                              SVE=ôvertid, lîrdag];
                                                   Editable=No }
    { 320 ;   ;Overtime Sunday     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line".Sunday WHERE (Year=FIELD(Year),
                                                                                                        Week=FIELD(Week),
                                                                                                        Employee No.=FIELD(Employee No.),
                                                                                                        Overtime=CONST(Yes),
                                                                                                        Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                        Excl. from Normal&Extra Hours=CONST(No),
                                                                                                        Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Overtime Sunday;
                                                              NOR=Overtid, sõndag;
                                                              SVE=ôvertid, sîndag];
                                                   Editable=No }
    { 340 ;   ;Overtime Hours      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line"."Total Line" WHERE (Year=FIELD(Year),
                                                                                                              Week=FIELD(Week),
                                                                                                              Employee No.=FIELD(Employee No.),
                                                                                                              Overtime=CONST(Yes),
                                                                                                              Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                              Excl. from Normal&Extra Hours=CONST(No),
                                                                                                              Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Overtime Hours;
                                                              NOR=Overtidstimer;
                                                              SVE=ôvertidstimmar];
                                                   Editable=No }
    { 360 ;   ;Component Type      ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Wage Component"."Component Type" WHERE (Code=FIELD(Wage Component)));
                                                   CaptionML=[ENU=Component Type;
                                                              NOR=Komponenttype;
                                                              SVE=Komponenttyp];
                                                   OptionCaptionML=[ENU=Hours,Days,Expenses,Expense hours,Addition;
                                                                    NOR=Timer,Dager,Utgifter,Kosttimer,Tillegg;
                                                                    SVE=Timmar,Dagar,Utgifter,Kostnadstimmar,TillÑgg];
                                                   OptionString=Hours,Days,Expenses,Expense hours,Addition;
                                                   Editable=No }
    { 370 ;   ;Overtime Surcharge %;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Wage Component"."Overtime Surcharge %" WHERE (Code=FIELD(Wage Component)));
                                                   CaptionML=[ENU=Overtime Surcharge %;
                                                              NOR=Tilleggsgebyr % for overtid;
                                                              SVE=TillÑggsavgiftsprocent fîr îvertid];
                                                   Editable=No }
    { 380 ;   ;Posted Normal Hours ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Posted Hour Line"."Total Line" WHERE (Year=FIELD(Year),
                                                                                                          Week=FIELD(Week),
                                                                                                          Employee No.=FIELD(Employee No.),
                                                                                                          Overtime=FILTER(No),
                                                                                                          Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                          Component Type=FILTER(Hours),
                                                                                                          Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Posted Normal Hours;
                                                              NOR=Bokfõrte Normaltimer;
                                                              SVE=Bokfîrda normaltimmar];
                                                   Editable=No }
    { 390 ;   ;Normal Hours        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Line"."Total Line" WHERE (Year=FIELD(Year),
                                                                                                              Week=FIELD(Week),
                                                                                                              Employee No.=FIELD(Employee No.),
                                                                                                              Overtime=CONST(No),
                                                                                                              Cost Type=FILTER(Labor|Subcontracting|Plant|Sundry),
                                                                                                              Excl. from Normal&Extra Hours=CONST(No),
                                                                                                              Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Normal Hours;
                                                              NOR=Normal arbeidstid;
                                                              SVE=Normal arbetstid];
                                                   Editable=No }
    { 410 ;   ;Norm Hours          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Norm Hours" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=[ENU=Norm Hours;
                                                              NOR=Normtimer;
                                                              SVE=Norm (timmar)];
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 420 ;   ;Norm Days           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Norm Days" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=[ENU=Norm Days;
                                                              NOR=Normdager;
                                                              SVE=Normdagar];
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 421 ;   ;Source Code         ;Code10        ;TableRelation="Source Code".Code;
                                                   CaptionML=[ENU=Source Code;
                                                              NOR=Kildekode;
                                                              SVE=Ursprungskod] }
    { 422 ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code".Code;
                                                   CaptionML=[ENU=Reason Code;
                                                              NOR=OvervÜkingskode;
                                                              SVE=Uppfîljningskod] }
    { 423 ;   ;Name                ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Last Name" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn];
                                                   Editable=No }
    { 424 ;   ;External            ;Boolean       ;FieldClass=Normal;
                                                   CaptionML=[ENU=External;
                                                              NOR=Eksternt;
                                                              SVE=Externt];
                                                   Editable=No }
    { 425 ;   ;Employer            ;Code20        ;TableRelation=IF (External=CONST(Yes)) Vendor.No.
                                                                 ELSE IF (External=CONST(No)) Employer.Code;
                                                   CaptionML=[ENU=Employer;
                                                              NOR=Arbeidsgiver;
                                                              SVE=Arbetsgivare] }
    { 426 ;   ;Full Name           ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Full Name" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=[ENU=Full Name;
                                                              NOR=Fullstendig navn;
                                                              SVE=FullstÑndigt namn];
                                                   Editable=No }
    { 430 ;   ;Comment             ;Text100       ;CaptionML=[ENU=Comment;
                                                              NOR=Kommentar;
                                                              SVE=Kommentar] }
    { 440 ;   ;Project Description ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.Description WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=[ENU=Project Description;
                                                              NOR=Prosjektbeskrivelse;
                                                              SVE=Projektbeskrivning];
                                                   Editable=No }
    { 445 ;   ;Project City        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.City WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=[ENU=Project City;
                                                              NOR=Prosjektby;
                                                              SVE=Projektort];
                                                   Editable=No }
    { 450 ;   ;Service Order No.   ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Service Order".No.;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen(FALSE);

                                                                IF "Service Order No." = '' THEN BEGIN
                                                                  "Service Location No." := '';
                                                                  "Service Order Description" := '';
                                                                  "Service Control Year" := 0;
                                                                  "Base Service Order No." := '';
                                                                  "Service Source Type" := "Service Source Type"::Other;
                                                                  "Service Category" := '';
                                                                END ELSE BEGIN
                                                                  CheckCompanyIC;
                                                                  ServOrderRec.GET("Service Order No.");
                                                                  ServOrderRec.CheckStatus(1);
                                                                  IF NOT ServOrderRec."Decentral Created" THEN
                                                                    ServOrderRec.TestServiceContractMandatory;
                                                                  "Service Source Type" := ServOrderRec."Source Type";
                                                                  "Service Category" := ServOrderRec."Service Category";
                                                                  "Service Control Period Date" := ServOrderRec."Service Control Period Date";

                                                                  IF GetCurrFieldNo() = FIELDNO("Service Order No.") THEN
                                                                    CheckAdditionalCostService;  //db, 03-02-10

                                                                  CheckCostCompServOrderType;
                                                                  "Service Order Description" := ServOrderRec.Description;
                                                                  //C001714
                                                                  //VALIDATE("Service Location No.", ServOrderRec."Service Location No.");
                                                                  "Service Location No." := ServOrderRec."Service Location No.";
                                                                  ServiceLocationDescription;
                                                                  //
                                                                  "Service Contract No." := ServOrderRec."Service Contract No.";
                                                                  VALIDATE(Element);
                                                                  "Base Service Order No." := ServOrderRec."Base Service Order No.";
                                                                END;
                                                                IF (Type = Type::Service) AND ("Service Order No." <> xRec."Service Order No.") THEN
                                                                  "Resource Request No." := '';

                                                                FillDepartmentCode;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              ServOrderRec."No." := "Service Order No.";
                                                              IF PAGE.RUNMODAL(0, ServOrderRec) = ACTION::LookupOK THEN BEGIN
                                                                IF Type = Type::Service THEN BEGIN
                                                                  xRec."Service Order No." := '';  //db, 07-06-10: M19676
                                                                  CurrFieldNo := FIELDNO("Service Order No.");
                                                                  VALIDATE("Service Order No.", ServOrderRec."No.");
                                                                END;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Service Order No.;
                                                              NOR=Serviceordrenr.;
                                                              SVE=Serviceordernr] }
    { 455 ;   ;Service Order Description;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order".Description WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=[ENU=Service Order Description;
                                                              NOR=Serviceordre Beskrivelse;
                                                              SVE=Serviceorder beskrivning];
                                                   Editable=No }
    { 460 ;   ;Service Location No.;Code20        ;TableRelation="Service Location".No.;
                                                   OnValidate=BEGIN
                                                                ServiceLocationDescription; // 33633.n
                                                              END;

                                                   CaptionML=[ENU=Service Location No.;
                                                              NOR=Servicelokasjon Nr.;
                                                              SVE=Serviceplatsnr];
                                                   Editable=No }
    { 462 ;   ;Service Location Description;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Location".Description WHERE (No.=FIELD(Service Location No.)));
                                                   CaptionML=[ENU=Service Location Description;
                                                              NOR=Servicelokasjonbeskrivelse;
                                                              SVE=Serviceplatsbeskrivning];
                                                   Editable=No }
    { 465 ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract.No.;
                                                   OnValidate=BEGIN
                                                                FillDepartmentCode;
                                                              END;

                                                   CaptionML=[ENU=Service Contract No.;
                                                              NOR=Servicekontraktnr;
                                                              SVE=Servicekontraktnr];
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              NOR=Dimensjonssett-ID;
                                                              SVE=DimensionsuppsÑttnings-ID];
                                                   Editable=No }
    { 490 ;   ;Try-out No.         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) Try-out;
                                                   OnValidate=BEGIN
                                                                //C007286
                                                                TestStatusOpen(FALSE);
                                                                IF "Try-out No." = '' THEN
                                                                  EXIT;

                                                                CheckCompanyIC;
                                                                "Try-out".GET("Try-out No.");
                                                                //
                                                              END;

                                                   OnLookup=BEGIN
                                                              //C007286
                                                              CheckCompanyIC;
                                                              "Try-out".SETRANGE("Try-Out Not Active", FALSE);
                                                              "Try-out".Code := "Try-out No.";
                                                              IF PAGE.RUNMODAL(0, "Try-out") = ACTION::LookupOK THEN
                                                                VALIDATE("Try-out No.", "Try-out".Code);
                                                              //
                                                            END;

                                                   CaptionML=[ENU=Try-out No.;
                                                              NOR=Prospektnr.;
                                                              SVE=Anbudsnr] }
    { 500 ;   ;Estimate No.        ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) Estimate.No.;
                                                   OnValidate=BEGIN
                                                                //db.sn, 05-05-15: C014120
                                                                TestStatusOpen(FALSE);
                                                                IF "Estimate No." <> '' THEN BEGIN
                                                                  CheckCompanyIC;
                                                                  EstRec.GET("Estimate No.");
                                                                END;
                                                                //db.en, 05-05-15: C014120
                                                                "Try-out No." := DetermineTryOut;
                                                              END;

                                                   OnLookup=BEGIN
                                                              //db.sn, 05-05-15: C014120
                                                              CheckCompanyIC;
                                                              EstRec."No." := "Estimate No.";
                                                              IF PAGE.RUNMODAL(0, EstRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Estimate No.", EstRec."No.");
                                                              //db.en, 05-05-15: C014120
                                                            END;

                                                   CaptionML=[ENU=Estimate No.;
                                                              NOR=Kalkylenr;
                                                              SVE=Kalkylnr] }
    { 510 ;   ;Export Document No. ;Code20        ;CaptionML=[ENU=Export Document No.;
                                                              NOR=Eksporter dokumentnr.;
                                                              SVE=Exportera dokumentnr] }
    { 520 ;   ;Department Code Employee;Code20    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Global Dimension 1 Code" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=[ENU=Department Code Employee;
                                                              NOR=Avdelingskode for ansatt;
                                                              SVE=Avdelningskod fîr anstÑlld];
                                                   Editable=No }
    { 530 ;   ;Department Code     ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                IF (CurrFieldNo  = FIELDNO("Department Code")) AND ("Department Code" <> xRec."Department Code") THEN BEGIN
                                                                  TESTFIELD(Type, Type::Indirect);
                                                                  CheckCompanyIC;
                                                                  IF ("Receiving Company" <> '') AND ("Receiving Company" <> CURRENTCOMPANY) THEN
                                                                    IF ICHumanResourcesSetup."IC Global Dim 1 Codes Equal" THEN
                                                                      ERROR(Text019, ICHumanResourcesSetup.FIELDCAPTION("IC Global Dim 1 Codes Equal"), ICHumanResourcesSetup.TABLECAPTION, ICHumanResourcesSetup.CURRENTCOMPANY);
                                                                  IF "Department Code" <> '' THEN
                                                                    DimMgt.GetDimValueRec(1, "Department Code", DimValRec, TRUE, '');
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupDepartmentCode;
                                                            END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              NOR=Avdelingskode;
                                                              SVE=Mottagande avdelningskod];
                                                   CaptionClass='1,1,1' }
    { 540 ;   ;Cost Code           ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Cost Code";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen(FALSE);
                                                                IF "Cost Code" <> '' THEN BEGIN
                                                                  CheckCompanyIC;
                                                                  CostCodeRec.GET("Cost Code");
                                                                  CostCodeRec.TESTFIELD(Blocked, FALSE);
                                                                  //C005137.sn
                                                                  IF ("Cost Object" <> '') AND (Type = Type::Indirect) THEN BEGIN
                                                                    IF NOT CheckCostType(FALSE) THEN BEGIN
                                                                      "Cost Object" := '';
                                                                      "Cost Type" := "Cost Type"::Labor;
                                                                    END;
                                                                  END;
                                                                  //C005137.en
                                                                //For M26221 deleted.
                                                                //  IF ("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME) AND (CostCodeRec."No Ledger Entry" ) THEN
                                                                //    FIELDERROR("Cost Code", STRSUBSTNO(Text017, CostCodeRec.FIELDCAPTION("No Ledger Entry"), CostCodeRec.TABLECAPTION));
                                                                  IF CostCodeRec.Component <> '' THEN
                                                                    VALIDATE("Wage Component", CostCodeRec.Component);
                                                                  FillDepartmentCode;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupCostCode;
                                                            END;

                                                   CaptionML=[ENU=Cost Code;
                                                              NOR=Kostkode;
                                                              SVE=Kostnadskod] }
    { 550 ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  IF (xRec.Type = Type::Project) AND NOT LineIsEditable THEN
                                                                    FIELDERROR(Type, STRSUBSTNO(Text011, TABLECAPTION, HourAccProjHeader.TABLECAPTION));
                                                                  CASE Type OF
                                                                    Type::Project:
                                                                      BEGIN
                                                                        "Service Order No." := '';
                                                                        "Service Location No." := '';
                                                                        "Service Contract No." := '';
                                                                        "Cost Code" := '';
                                                                        "Plant Location" := '';
                                                                        "Plant Type" := '';
                                                                        "Plant No.":= '';
                                                                        "Plant Rate Code" := '';
                                                                        "Cost Component Plant" := '';
                                                                        "Department Code" := '';
                                                                        "Resource Request No." := '';
                                                                      END;
                                                                    Type::Service:
                                                                      BEGIN
                                                                        TESTFIELD("Supplying Company", '');
                                                                        "Project No." := '';
                                                                        "Main Project No." := '';
                                                                        "Extension Contract" := '';
                                                                        Element := '';
                                                                        "Rental Unit" := '';
                                                                        "Cost Code" := '';
                                                                        "Plant Location" := '';
                                                                        "Plant Type" := '';
                                                                        "Plant No.":= '';
                                                                        "Plant Rate Code" := '';
                                                                        "Cost Component Plant" := '';
                                                                        "Department Code" := '';
                                                                        "Resource Request No." := '';
                                                                      END;
                                                                    Type::Indirect:
                                                                      BEGIN
                                                                        "Project No." := '';
                                                                        "Main Project No." := '';
                                                                        "Extension Contract" := '';
                                                                        Element := '';
                                                                        "Rental Unit" := '';
                                                                        "Service Order No." := '';
                                                                        "Service Location No." := '';
                                                                        "Service Contract No." := '';
                                                                        "Plant Location" := '';
                                                                        "Plant Type" := '';
                                                                        "Plant No.":= '';
                                                                        "Plant Rate Code" := '';
                                                                        "Cost Component Plant" := '';
                                                                        "Department Code" := '';
                                                                        "Resource Request No." := '';
                                                                      END;
                                                                    Type::Plant:
                                                                      BEGIN
                                                                        "Receiving Company" := '';
                                                                        "Project No." := '';
                                                                        "Extension Contract" := '';
                                                                        Element := '';
                                                                        "Service Order No." := '';
                                                                        "Service Location No." := '';
                                                                        "Service Contract No." := '';
                                                                        "Cost Code" := '';
                                                                        //"Cost Object" := '';
                                                                        "Cost Type" := "Cost Type"::Labor;
                                                                        "Department Code" := '';
                                                                        "Resource Req. Receiv. Company" := '';
                                                                        "Resource Request No." := '';
                                                                      END;
                                                                    Type::ResourceRequest:  //DP01195
                                                                      BEGIN
                                                                        "Project No." := '';
                                                                        "Main Project No." := '';
                                                                        "Extension Contract" := '';
                                                                        Element := '';
                                                                        "Rental Unit" := '';
                                                                        "Service Order No." := '';
                                                                        "Service Location No." := '';
                                                                        "Service Contract No." := '';
                                                                        "Plant Location" := '';
                                                                        "Plant Type" := '';
                                                                        "Plant No.":= '';
                                                                        "Plant Rate Code" := '';
                                                                        "Cost Component Plant" := '';
                                                                        "Department Code" := '';
                                                                      END;
                                                                  END;
                                                                END;

                                                                //RFC150
                                                                IF EmplRec.GET("Employee No.") THEN
                                                                  IF (EmplRec."User Default Team Code" <> '') THEN
                                                                    CASE Type OF
                                                                      Type::Project: IF ("Team Code"='') THEN
                                                                        "Team Code" := EmplRec."User Default Team Code";
                                                                      ELSE
                                                                        "Team Code" := '';
                                                                    END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              NOR=Radtype;
                                                              SVE=Radtyp];
                                                   OptionCaptionML=[ENU=Project,Service,Indirect,,Plant,,,,,Request;
                                                                    SVE=Projekt,Service,Indirekt,,Maskin,,,,,BegÑran];
                                                   OptionString=Project,Service,Indirect,,Plant,,,,,ResourceRequest }
    { 555 ;   ;Unit Cost (LCY)     ;Decimal       ;OnValidate=VAR
                                                                CurrencyExchangeRateRec@1100285100 : Record 330;
                                                                Currency2@1100285101 : Record 4;
                                                              BEGIN
                                                                //>>RFC226
                                                                "Amount (LCY)" := ("Total Line"+Quantity)*"Unit Cost (LCY)";
                                                                IF NOT Currency2.GET("Currency Code") THEN Currency2.InitRoundingPrecision;
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  Amount :=
                                                                    ROUND(
                                                                      CurrencyExchangeRateRec.ExchangeAmtLCYToFCY(
                                                                        1, "Project No.", TODAY, "Currency Code", "Amount (LCY)",
                                                                         CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", TODAY, "Currency Code",FALSE),FALSE),
                                                                         Currency2."Amount Rounding Precision");
                                                                END ELSE
                                                                  Amount := ROUND("Amount (LCY)",Currency2."Amount Rounding Precision");

                                                                //<<
                                                              END;

                                                   CaptionML=[ENU=Unit Cost (LCY);
                                                              NOR=Enhetskost (NOK);
                                                              SVE=Styckkostnad (BVA)];
                                                   BlankZero=Yes;
                                                   Editable=Yes;
                                                   AutoFormatType=2 }
    { 556 ;   ;Purchase Unit Cost (LCY);Decimal   ;CaptionML=[ENU=Purchase Unit Cost (LCY);
                                                              NOR=Stykkost for innkjõp (NOK);
                                                              SVE=Styckkostnad fîr inkîp (BVA)];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 557 ;   ;Unit Cost           ;Decimal       ;OnValidate=BEGIN
                                                                CheckCompanyIC
                                                              END;

                                                   CaptionML=[ENU=Unit Cost;
                                                              NOR=Enhetskost;
                                                              SVE=Styckkostnad];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 558 ;   ;Purchase Unit Cost  ;Decimal       ;CaptionML=[ENU=Purchase Unit Cost;
                                                              NOR=Stykkost for innkjõp;
                                                              SVE=Styckkostnad fîr inkîp];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 560 ;   ;Amount (LCY)        ;Decimal       ;OnValidate=VAR
                                                                CurrencyDate@1100528202 : Date;
                                                                CurrencyExchangeRateRec@1100528201 : Record 330;
                                                                Currency2@1100528200 : Record 4;
                                                                xQuantity@1101285000 : Decimal;
                                                              BEGIN
                                                                CALCFIELDS("Component Type");

                                                                // SESB.I038 ASH 04.07.2013 >>
                                                                // TESTFIELD("Component Type", "Component Type"::Expenses);
                                                                // IF NOT ("Component Type" IN ["Component Type"::Expenses,"Component Type"::"Expense hours"]) THEN
                                                                IF NOT ("Component Type" IN ["Component Type"::Expenses,"Component Type"::"Expense hours","Component Type"::Addition]) THEN
                                                                  FIELDERROR("Component Type");
                                                                // SESB.I038 ASH 04.07.2013 <<
                                                                // SESB.I033 ASH 10.07.2013 >>
                                                                CheckFieldLimits(FIELDNO("Amount (LCY)"),"Amount (LCY)");
                                                                CheckFieldLimits(FIELDNO(Quantity),Quantity);
                                                                // SESB.I033 ASH 10.07.2013 <<

                                                                //<<RFC226, 190723
                                                                // IF "Amount (LCY)" <> 0 THEN BEGIN
                                                                  //IF (Type = Type::Plant) THEN    //*C019484.o
                                                                  //  TESTFIELD("Plant Location");  //*C019484.o
                                                                //  IF Quantity = 0 THEN
                                                                //    Quantity := 1;
                                                                xQuantity := Quantity;
                                                                IF "Amount (LCY)" <> 0 THEN BEGIN
                                                                  IF Quantity = 0 THEN BEGIN
                                                                    IF "Total Line"<>0 THEN
                                                                      Quantity := "Total Line"
                                                                    ELSE
                                                                      Quantity := 1;
                                                                  END;
                                                                //<<RFC226

                                                                  "Unit Cost (LCY)" := "Amount (LCY)"/Quantity;
                                                                  "Cost Price Found at" :='';

                                                                  CheckCompanyIC;
                                                                  DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, "Cost Object" <> '', '');
                                                                  "Precalc. Surcharge Rate" :=
                                                                    "Unit Cost (LCY)" * DimValRec."Precalc. Surcharge Hours %"/(100 + DimValRec."Precalc. Surcharge Hours %");
                                                                  "Precalc. Surcharge Expenses" := ROUND(Quantity * "Precalc. Surcharge Rate");
                                                                END;

                                                                Currency2.InitRoundingPrecision;
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  CurrencyDate := TODAY;
                                                                  Amount :=
                                                                    ROUND(
                                                                    CurrencyExchangeRateRec.ExchangeAmtLCYToFCY(
                                                                      1, "Project No.", CurrencyDate, "Currency Code", "Amount (LCY)",
                                                                       CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
                                                                       Currency2."Amount Rounding Precision");
                                                                END ELSE BEGIN
                                                                  Amount := ROUND("Amount (LCY)",Currency2."Amount Rounding Precision");
                                                                END;
                                                                IF Quantity <> 0 THEN BEGIN
                                                                  "Unit Cost" := Amount/Quantity;
                                                                  "Unit Cost (LCY)" := "Amount (LCY)"/Quantity; //RFC256
                                                                END;

                                                                IF xQuantity <> Quantity THEN Quantity := xQuantity;  //RFC226, 190723
                                                              END;

                                                   CaptionML=[ENU=Amount (LCY);
                                                              NOR=Belõp (NOK);
                                                              SVE=Belopp (BVA)];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 561 ;   ;Amount              ;Decimal       ;OnValidate=VAR
                                                                CurrencyDate@1100528202 : Date;
                                                                CurrencyExchangeRateRec@1100528201 : Record 330;
                                                                Currency2@1100528200 : Record 4;
                                                                xQuantity@1101285000 : Decimal;
                                                              BEGIN
                                                                //>>190628, RFC226
                                                                // IF Quantity = 0 THEN
                                                                //  Quantity := 1;
                                                                xQuantity := Quantity;
                                                                IF Quantity = 0 THEN BEGIN
                                                                  IF "Total Line"<>0 THEN
                                                                    Quantity := "Total Line"
                                                                  ELSE
                                                                    Quantity := 1;
                                                                END;
                                                                //<<190628, RFC226

                                                                "Unit Cost" := Amount/Quantity;

                                                                Currency2.InitRoundingPrecision;
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  CurrencyDate := TODAY;
                                                                  "Amount (LCY)" :=
                                                                  ROUND(
                                                                    CurrencyExchangeRateRec.ExchangeAmtFCYToLCY(
                                                                      1, "Project No.", CurrencyDate, "Currency Code" , Amount,
                                                                       CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
                                                                       Currency2."Amount Rounding Precision");
                                                                END ELSE BEGIN
                                                                  "Amount (LCY)" := ROUND(Amount,Currency2."Amount Rounding Precision");
                                                                END;
                                                                IF Quantity <> 0 THEN
                                                                  "Unit Cost (LCY)" := "Amount (LCY)"/Quantity;

                                                                IF xQuantity <> Quantity THEN Quantity := xQuantity;  //RFC226, 190628, 190723
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              NOR=Belõp;
                                                              SVE=Belopp];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 565 ;   ;Surcharge Overtime  ;Decimal       ;CaptionML=[ENU=Surcharge Overtime;
                                                              NOR=Tilleggsgebyr, overtid;
                                                              SVE=TillÑggsavgift, îvertid] }
    { 570 ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                //>>190628, RFC226
                                                                IF "Excl. from Normal&Extra Hours" AND ("Component Type"="Component Type"::Addition) THEN BEGIN
                                                                  IF ("Total Line" <> 0) AND (Quantity <> 0) THEN BEGIN
                                                                    Monday := 0;
                                                                    Tuesday := 0;
                                                                    Wednesday := 0;
                                                                    Thursday := 0;
                                                                    Friday := 0;
                                                                    Saturday := 0;
                                                                    Sunday := 0;
                                                                    "Total Line" := 0;
                                                                  END;
                                                                  IF (Quantity <> 0) AND (("Amount (LCY)"=0) OR (Amount=0)) THEN BEGIN
                                                                    Amount := "Unit Cost" * Quantity;
                                                                    "Amount (LCY)" := "Unit Cost (LCY)" * Quantity;
                                                                  END;
                                                                END;
                                                                //<<190628, RFC226

                                                                //>>RFC256
                                                                IF Quantity <> 0 THEN BEGIN
                                                                  "Unit Cost" := Amount /Quantity;
                                                                  "Unit Cost (LCY)" := "Amount (LCY)"/Quantity;
                                                                END;
                                                                //<<RFC256
                                                                //IF (Quantity <> 0) AND (Type = Type::Plant) THEN  //*C019484.o
                                                                //  TESTFIELD("Plant Location");                    //*C019484.o
                                                                CalcRateAndAmount;

                                                                // SESB.I033 ASH 03.07.2013 >>
                                                                CheckFieldLimits(FIELDNO(Quantity),Quantity);
                                                                CheckFieldLimits(FIELDNO("Amount (LCY)"),"Amount (LCY)");
                                                                // SESB.I033 ASH 03.07.2013 <<
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   DecimalPlaces=0:3;
                                                   BlankZero=Yes }
    { 581 ;   ;Overhead Surcharge Project;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Surcharge"."Overhead Surcharge Project" WHERE (Year=FIELD(Year),
                                                                                                                                   Week=FIELD(Week),
                                                                                                                                   Employee No.=FIELD(Employee No.),
                                                                                                                                   Hour Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Overhead Surcharge Project;
                                                              NOR=Overheadkost, prosjekt;
                                                              SVE=Overheadkostnad, projekt];
                                                   Editable=No }
    { 591 ;   ;Overhead Surcharge Service;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Hour Accounting Surcharge"."Overhead Surcharge Service" WHERE (Year=FIELD(Year),
                                                                                                                                   Week=FIELD(Week),
                                                                                                                                   Employee No.=FIELD(Employee No.),
                                                                                                                                   Hour Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Overhead Surcharge Service;
                                                              NOR=Overheadkost, service;
                                                              SVE=Overheadkostnad, service];
                                                   Editable=No }
    { 600 ;   ;Cost Plus Entry Created;Boolean    ;CaptionML=[ENU=Cost Plus Entry Created;
                                                              NOR=Selvkosttransaksjon er opprettet;
                                                              SVE=Redovisad sjÑlvkostnad har skapats];
                                                   Editable=No }
    { 610 ;   ;Cost Type           ;Option        ;OnValidate=BEGIN
                                                                CheckAdditionalCostService;  //db, 03-02-10
                                                              END;

                                                   CaptionML=[ENU=Cost Type;
                                                              NOR=Kostnadstype;
                                                              SVE=Kostnadstyp];
                                                   OptionCaptionML=[ENU=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                                    NOR=Arbeidskraft,Materiale,Underentrepenõr,Maskin,Diverse,Inntekt;
                                                                    SVE=Arbetskraft,Material,Underentreprenad,Maskin,Diverse,IntÑkt];
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry,Revenue }
    { 620 ;   ;IC Tag No.          ;Integer       ;CaptionML=[ENU=IC Tag No.;
                                                              NOR=IC-taggnr.;
                                                              SVE=IC-taggnummer] }
    { 625 ;   ;Mercash Tag No.     ;Code20        ;CaptionML=ENU=Mercash Tag No. }
    { 630 ;   ;Cost Object Description;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Dimension Value".Name WHERE (Global Dimension No.=FILTER(2),
                                                                                                    Code=FIELD(Cost Object)));
                                                   CaptionML=[ENU=Cost Object Description;
                                                              NOR=Kostnadsobjekt, Beskrivelse;
                                                              SVE=Kostnadsobjekt, beskrivning];
                                                   Editable=No;
                                                   CaptionClass='1,11012000,2, , ' + Text018 }
    { 640 ;   ;Chargeable          ;Boolean       ;CaptionML=[ENU=Chargeable;
                                                              NOR=Belastbar;
                                                              SVE=Debiterbar];
                                                   Editable=No }
    { 650 ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              NOR=Korreksjon;
                                                              SVE=RÑttningstransaktion] }
    { 660 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   OnValidate=BEGIN
                                                                ValidateCostComponent;
                                                              END;

                                                   CaptionML=[ENU=Cost Component;
                                                              NOR=Kostnadskomponent;
                                                              SVE=Kostnadskomponent] }
    { 700 ;   ;Plant Location      ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Plant Location";
                                                   OnValidate=BEGIN
                                                                CheckCompanyIC();
                                                                IF "Plant Location" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Plant);
                                                                  PlantLocRec.GET("Plant Location");
                                                                  PlantLocRec.CheckBlockFromOtherCompany(1, FALSE, TRUE, "Receiving Company");
                                                                END;

                                                                IF "Plant Location" <> xRec."Plant Location" THEN BEGIN  //* C-017858 (16-11-2009)
                                                                  IF Element <> '' THEN
                                                                    VALIDATE(Element, '');
                                                                  IF Type = Type::Plant THEN
                                                                    "Resource Request No." := '';
                                                                  IF "Plant Rate Code" <> '' THEN BEGIN
                                                                    IF NOT PlantRateCodeRec.CheckPlantRateCode("Plant Location", "Plant Rate Code", FALSE, "Receiving Company", 0) THEN BEGIN
                                                                      "Plant Rate Code" := '';
                                                                      GetPlantDefaultsFromPlantSetup();  //DP00485.n C009408
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              PlantLocRec.Code := "Plant Location";
                                                              IF PAGE.RUNMODAL(0, PlantLocRec) = ACTION::LookupOK THEN BEGIN
                                                                IF Type = Type::Plant THEN
                                                                  VALIDATE("Plant Location", PlantLocRec.Code);
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Plant Location;
                                                              NOR=Maskinplassering;
                                                              SVE=Maskinplats] }
    { 710 ;   ;Plant Type          ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Plant Type";
                                                   OnValidate=BEGIN
                                                                IF "Plant Type" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Plant);
                                                                  CheckCompanyIC();
                                                                  PlantTypeRec.GET("Plant Type");
                                                                  GetPlantDefaultsFromPlantSetup();
                                                                END;

                                                                FillDepartmentCode;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              PlantSetupRec.GET;
                                                              PlantTypeRec.RESET;
                                                              IF NOT PlantSetupRec."No Filter on Hr. Acc. Type" THEN
                                                                PlantTypeRec.SETRANGE("Hour Accounting Type", PlantTypeRec."Hour Accounting Type"::Manned);  //C-028223 (Soft filter)
                                                              PlantTypeRec.Code := "Plant Type";
                                                              IF PAGE.RUNMODAL(0, PlantTypeRec) = ACTION::LookupOK THEN BEGIN
                                                                IF Type = Type::Plant THEN
                                                                  VALIDATE("Plant Type", PlantTypeRec.Code);
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Plant Type;
                                                              NOR=Maskintype;
                                                              SVE=Maskintyp] }
    { 720 ;   ;Plant No.           ;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   OnValidate=BEGIN
                                                                IF "Plant No." <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Plant);
                                                                  TESTFIELD("Plant Type");
                                                                  CheckCompanyIC();
                                                                  PlantNoRec.GET("Plant Type", "Plant No.");
                                                                END;

                                                                FillDepartmentCode;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              PlantNoRec.SETRANGE("Plant Type", "Plant Type");
                                                              PlantNoRec."Plant Type" := "Plant Type";
                                                              PlantNoRec."No." := "Plant No.";
                                                              IF PAGE.RUNMODAL(0, PlantNoRec) = ACTION::LookupOK THEN BEGIN
                                                                IF Type = Type::Plant THEN
                                                                  VALIDATE("Plant No.", PlantNoRec."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Plant No.;
                                                              NOR=Maskinnr.;
                                                              SVE=Maskinnr] }
    { 725 ;   ;Plant Rate Code     ;Code10        ;OnValidate=BEGIN
                                                                IF "Plant Rate Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Plant);
                                                                  //CheckCompanyIC();
                                                                  //PlantRateCodeRec.GET("Plant Rate Code");
                                                                  PlantRateCodeRec.CheckPlantRateCode("Plant Location", "Plant Rate Code", TRUE, "Receiving Company", 0);
                                                                END;
                                                                CalcRateAndAmount;
                                                              END;

                                                   OnLookup=BEGIN
                                                              //CheckCompanyIC;
                                                              //PlantRateCodeRec.Code := "Plant Rate Code";
                                                              //IF PAGE.RUNMODAL(0, PlantRateCodeRec) = ACTION::LookupOK THEN BEGIN
                                                              //  IF Type = Type::Plant THEN
                                                              //    VALIDATE("Plant Rate Code", PlantRateCodeRec.Code);
                                                              //END;
                                                              PlantRateCodeRec.Code := PlantRateCodeRec.LookupPlantRateCode("Plant Location", "Plant Rate Code", TRUE, "Receiving Company", 0);
                                                              IF (Type = Type::Plant) AND (PlantRateCodeRec.Code <> "Plant Rate Code") THEN
                                                                VALIDATE("Plant Rate Code", PlantRateCodeRec.Code);
                                                            END;

                                                   CaptionML=[ENU=Plant Rate Code;
                                                              NOR=Maskinens satskode;
                                                              SVE=Maskinens avgiftskoder];
                                                   Description=Plant Rate Code }
    { 750 ;   ;Cost Component Plant;Code10        ;TableRelation=IF (Receiving Company=FILTER('')) "Cost Component Plant";
                                                   OnValidate=BEGIN
                                                                IF "Cost Component Plant" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Plant);
                                                                  CheckCompanyIC();
                                                                  PlantCostCompRec.GET("Cost Component Plant");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              PlantCostCompRec.Code := "Cost Component Plant";
                                                              IF PAGE.RUNMODAL(0, PlantCostCompRec) = ACTION::LookupOK THEN BEGIN
                                                                IF Type = Type::Plant THEN
                                                                  VALIDATE("Cost Component Plant", PlantCostCompRec.Code);
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Cost Component Plant;
                                                              NOR=Kostdel, maskin;
                                                              SVE=Kostnadsdel, Maskin] }
    { 760 ;   ;Job Notice No.      ;Code20        ;CaptionML=[ENU=Job Notice No. (iMOS);
                                                              NOR=Jobbmeldinger (iMOS);
                                                              SVE=Jobbmeddelandenr (iMOS)];
                                                   Description=iMos }
    { 761 ;   ;Job Notice Entry    ;Integer       ;CaptionML=[ENU=Job Notice Entry No. (iMOS);
                                                              NOR=Transaksjonsnr for jobbmelding (iMOS);
                                                              SVE=Transaktionsnr fîr jobbmeddelande (iMOS)];
                                                   Description=iMos }
    { 762 ;   ;Job Notice Entry Date;Date         ;CaptionML=[ENU=Job Notice Entry Date (iMOS);
                                                              NOR=Transaksjonsdato for jobbmelding  (iMOS);
                                                              SVE=Transaktionsdatum fîr jobbmeddelande (iMOS)];
                                                   Description=iMos }
    { 763 ;   ;Split (iMOS)        ;Boolean       ;CaptionML=[ENU=Split (iMOS);
                                                              NOR=Del (iMOS);
                                                              SVE=Dela (iMOS)];
                                                   Description=iMos }
    { 780 ;   ;Additional Cost (Service);Boolean  ;OnValidate=BEGIN
                                                                ValidateAdditionalCost;
                                                                FillDepartmentCode;
                                                              END;

                                                   CaptionML=[ENU=Additional Cost (Service);
                                                              NOR=Tilleggskoster (service);
                                                              SVE=TillÑggskostnader (service)] }
    { 781 ;   ;Add. Cost Changed Manually;Boolean ;CaptionML=ENU=Add. Cost Changed Manually }
    { 790 ;   ;Service Source Type ;Option        ;InitValue=Other;
                                                   CaptionML=[ENU=Service Source Type;
                                                              NOR=Servicekildetype;
                                                              SVE=Serviceursprungstyp];
                                                   OptionCaptionML=[ENU=Call,Contract,Other,Estimate;
                                                                    NOR=Samtale,Kontrakt,Andre,Kalkyle;
                                                                    SVE=Samtal,Kontrakt,ôvrigt,Kalkyl];
                                                   OptionString=Call,Contract,Other,Estimate;
                                                   Editable=No }
    { 800 ;   ;Leave Type          ;Code10        ;TableRelation="Leave Type";
                                                   CaptionML=[ENU=Leave Type;
                                                              NOR=Fravërstype;
                                                              SVE=FrÜnvarotyp];
                                                   Editable=No }
    { 810 ;   ;Leave Factor        ;Decimal       ;CaptionML=[ENU=Leave Factor;
                                                              NOR=Fravërsfaktor;
                                                              SVE=FrÜnvarofaktor];
                                                   Editable=No }
    { 820 ;   ;Main Project No.    ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Main Project No.;
                                                              NOR=Hovedprosjektnr.;
                                                              SVE=Huvudprojektnr] }
    { 900 ;   ;Precalc. Surcharge Rate;Decimal    ;CaptionML=[ENU=Precalc. Surcharge Rate;
                                                              NOR=ForhÜndsber. Tilleggsgebyrsats;
                                                              SVE=Fîrber. TillÑggsavgift] }
    { 901 ;   ;Precalc. Surcharge Expenses;Decimal;CaptionML=[ENU=Precalc. Surcharge Expenses;
                                                              NOR=ForhÜndsber. tilleggsgebyrskoster;
                                                              SVE=Fîrber. TillÑggsavgiftskostnader] }
    { 940 ;   ;Rental Unit         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Rental Unit"."Rental Unit" WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                IF "Rental Unit" = '' THEN
                                                                  EXIT;

                                                                CheckCompanyIC;
                                                                RentalUnitRec.GET("Project No.", "Rental Unit");
                                                              END;

                                                   OnLookup=BEGIN
                                                              CheckCompanyIC;
                                                              RentalUnitRec.SETRANGE("Project No.", "Project No.");
                                                              RentalUnitRec."Project No." := "Project No.";
                                                              RentalUnitRec."Rental Unit" := "Rental Unit";
                                                              IF PAGE.RUNMODAL(0, RentalUnitRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Rental Unit", RentalUnitRec."Rental Unit");
                                                            END;

                                                   CaptionML=[ENU=Rental Unit;
                                                              NOR=Leieenhet;
                                                              SVE=Uthyrningsenhet] }
    { 950 ;   ;Day                 ;Option        ;OnValidate=BEGIN
                                                                IF Day <> xRec.Day THEN BEGIN
                                                                  CASE xRec.Day OF
                                                                    xRec.Day::Monday:Monday := 0;
                                                                    xRec.Day::Tuesday:Tuesday := 0;
                                                                    xRec.Day::Wednesday:Wednesday := 0;
                                                                    xRec.Day::Thursday:Thursday := 0;
                                                                    xRec.Day::Friday:Friday := 0;
                                                                    xRec.Day::Saturday:Saturday := 0;
                                                                    xRec.Day::Sunday:Sunday := 0;
                                                                  END;
                                                                  "Total Line"  := 0;
                                                                  VALIDATE(Duration);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Day;
                                                              NOR=Dag;
                                                              SVE=Dag];
                                                   OptionCaptionML=[ENU=" ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday";
                                                                    NOR=" ,Mandag,Tirsdag,Onsdag,Torsdag,Fredag,Lõrdag,Sõndag";
                                                                    SVE=" ,MÜndag,Tisdag,Onsdag,Torsdag,Fredag,Lîrdag,Sîndag"];
                                                   OptionString=[ ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday] }
    { 960 ;   ;Time From           ;Time          ;OnValidate=BEGIN
                                                                FromTimeToDuration;
                                                                IF ("Time From" <> 0T) AND ("Time Until" = 0T) AND (Duration <> 0) THEN
                                                                  "Time Until" := "Time From" + ABS(Duration);
                                                              END;

                                                   CaptionML=[ENU=Time From;
                                                              NOR=Tid fra;
                                                              SVE=Tid frÜn] }
    { 970 ;   ;Time Until          ;Time          ;OnValidate=BEGIN
                                                                FromTimeToDuration;
                                                                IF ("Time From" = 0T) AND ("Time Until" <> 0T) AND (Duration <> 0) THEN
                                                                  "Time From" := "Time Until" - ABS(Duration);
                                                              END;

                                                   CaptionML=[ENU=Time Until;
                                                              NOR=Tid til;
                                                              SVE=Tid tills] }
    { 980 ;   ;Duration            ;Duration      ;OnValidate=BEGIN
                                                                IF NOT (
                                                                   ((GetCurrFieldNo() = FIELDNO("Time From")) OR (GetCurrFieldNo() = FIELDNO("Time Until"))) AND
                                                                   ("Time From" <> 0T) AND ("Time Until" <> 0T)
                                                                  )
                                                                THEN BEGIN
                                                                  IF Duration < 0 THEN BEGIN
                                                                    IF "Time Until" <> 0T THEN
                                                                      "Time From" := "Time Until" - ABS(Duration)
                                                                    ELSE
                                                                      "Time From" := 0T;
                                                                  END ELSE BEGIN
                                                                    IF "Time From" <> 0T THEN
                                                                      "Time Until" := "Time From" + ABS(Duration)
                                                                    ELSE
                                                                      "Time Until" := 0T;
                                                                  END;
                                                                END;


                                                                CASE Day OF
                                                                  Day::" ": ERROR(Text009);
                                                                  Day::Monday: Monday := FromDurationToHours(Duration);
                                                                  Day::Tuesday: Tuesday := FromDurationToHours(Duration);
                                                                  Day::Wednesday: Wednesday := FromDurationToHours(Duration);
                                                                  Day::Thursday: Thursday := FromDurationToHours(Duration);
                                                                  Day::Friday: Friday := FromDurationToHours(Duration);
                                                                  Day::Saturday: Saturday := FromDurationToHours(Duration);
                                                                  Day::Sunday: Sunday := FromDurationToHours(Duration);
                                                                END;

                                                                TotalHours;

                                                                IF "Total Line" <> FromDurationToHours(Duration) THEN
                                                                  ERROR(Text008);

                                                                CheckTimeOverlap;

                                                                // SESB.I033 ASH 17.07.2013 >>
                                                                CheckFieldLimits(FIELDNO(Duration),FromDurationToHours(Duration));
                                                                // SESB.I033 ASH 17.07.2013 <<
                                                              END;

                                                   CaptionML=[ENU=Duration;
                                                              NOR=Varighet;
                                                              SVE=Varaktighet] }
    { 990 ;   ;Employee Portal Document No.;Code20;CaptionML=[ENU=Employee Portal Document No.;
                                                              NOR=Ansattportal, Dokumentnr.;
                                                              SVE=Personalportal, dokumentnr] }
    { 1010;   ;Service Control Year;Integer       ;CaptionML=[ENU=Service Control Year;
                                                              NOR=ServicekontrollÜr;
                                                              SVE=ServicekontrollÜr];
                                                   Editable=No }
    { 1015;   ;Service Control Period Date;Date   ;CaptionML=[ENU=Service Control Period Date;
                                                              NOR=Servicekontrollperiode, dato;
                                                              SVE=Servicekontroll datumperiod];
                                                   Editable=No }
    { 1020;   ;Cost Price Found at ;Text250       ;CaptionML=[ENU=Cost Price Found at;
                                                              NOR=Selvkostpris funnet ved;
                                                              SVE=SjÑlvkostnadspris funnet vid];
                                                   Editable=No }
    { 1030;   ;Element Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                           Element=FIELD(Element)));
                                                   CaptionML=[ENU=Element Description;
                                                              NOR=Elementbeskrivelse;
                                                              SVE=Elementbeskrivning];
                                                   Editable=No }
    { 1040;   ;Base Service Order No.;Code20      ;TableRelation="Service Order".No.;
                                                   CaptionML=[ENU=Base Service Order No.;
                                                              NOR=Baseserviceordrenr;
                                                              SVE=Basserviceordernr];
                                                   Editable=No }
    { 1050;   ;Origin Hours        ;Option        ;CaptionML=[ENU=Origin Hours;
                                                              NOR=Opprinnelige timer;
                                                              SVE=Ursprungliga timmar];
                                                   OptionCaptionML=[ENU=" ,HourAcc. Site Manager";
                                                                    NOR=" ,Timebokfõring prosjektleder";
                                                                    SVE=" ,Timbokf. Arbetschef"];
                                                   OptionString=[ ,HrAccSiteMgt];
                                                   Editable=No }
    { 1060;   ;Origin Company      ;Text30        ;TableRelation=Company;
                                                   CaptionML=[ENU=Origin Company;
                                                              NOR=Opprinnelig selskap;
                                                              SVE=Ursprungligt fîretag];
                                                   Description=NAV Company for hours with another origin (only if origin is a NAV Company);
                                                   Editable=No }
    { 1080;   ;Resource Req. Receiv. Company;Text30;
                                                   TableRelation=Company;
                                                   OnValidate=BEGIN
                                                                IF xRec."Resource Req. Receiv. Company" <> "Resource Req. Receiv. Company" THEN
                                                                 "Resource Request No." := '';
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Resource Request Receiving Company }
    { 1090;   ;Resource Request No.;Code20        ;TableRelation=IF (Resource Req. Receiv. Company=FILTER('')) "Resource Request";
                                                   OnValidate=VAR
                                                                ResourceRequest@1100529000 : Record 11124901;
                                                                PlantLocation@1100529001 : Record 11012554;
                                                              BEGIN
                                                                //DP01195
                                                                TestStatusOpen(FALSE);
                                                                IF "Resource Request No." <> '' THEN BEGIN
                                                                  IF Type = Type::Indirect THEN
                                                                    TESTFIELD("Resource Request No.", '');
                                                                  ResourceRequest.CHANGECOMPANY("Resource Req. Receiv. Company");
                                                                  ResourceRequest.GET("Resource Request No.");
                                                                  CASE Type OF
                                                                    Type::Project:
                                                                      BEGIN
                                                                        TESTFIELD("Project No.");
                                                                        ResourceRequest.TESTFIELD("Source Type", ResourceRequest."Source Type"::Project);
                                                                        ResourceRequest.CheckResRequestReceivCompany("Receiving Company", CURRENTCOMPANY);
                                                                        ResourceRequest.TESTFIELD("Source No.", "Project No.");
                                                                      END;
                                                                    Type::Service:
                                                                      BEGIN
                                                                        TESTFIELD("Service Order No.");
                                                                        ResourceRequest.TESTFIELD("Source Type", ResourceRequest."Source Type"::ServiceOrder);
                                                                        ResourceRequest.CheckResRequestReceivCompany("Receiving Company", CURRENTCOMPANY);
                                                                        ResourceRequest.TESTFIELD("Source No.", "Service Order No.");
                                                                      END;
                                                                    Type::Plant:
                                                                      BEGIN
                                                                        IF "Plant Location" <> '' THEN BEGIN
                                                                          IF NOT (ResourceRequest."Source Type" IN [ResourceRequest."Source Type"::Project, ResourceRequest."Source Type"::ServiceOrder]) THEN
                                                                            ResourceRequest.FIELDERROR("Source Type");
                                                                          PlantLocation.CHANGECOMPANY("Receiving Company");
                                                                          PlantLocation.GET("Plant Location");
                                                                          ResourceRequest.CheckResRequestReceivCompany(PlantLocation."Company Name", "Receiving Company");
                                                                          CASE ResourceRequest."Source Type" OF
                                                                            ResourceRequest."Source Type"::Project:
                                                                              ResourceRequest.TESTFIELD("Source No.", PlantLocation."Project No.");
                                                                            ResourceRequest."Source Type"::ServiceOrder:
                                                                              ResourceRequest.TESTFIELD("Source No.", PlantLocation."Service Order No.");
                                                                          END;
                                                                        END;
                                                                      END;
                                                                  END;
                                                                END;
                                                                FillDepartmentCode;
                                                              END;

                                                   OnLookup=VAR
                                                              ResourceRequest@1100529001 : Record 11124901;
                                                              PlantLocation@1100529000 : Record 11012554;
                                                            BEGIN
                                                              IF Type = Type::Indirect THEN
                                                                EXIT;
                                                              ResourceRequest.CHANGECOMPANY("Resource Req. Receiv. Company");
                                                              ResourceRequest.SETCURRENTKEY("Source Type", "Source No.");
                                                              CASE Type OF
                                                                Type::Project:
                                                                  BEGIN
                                                                    ResourceRequest.SETRANGE("Source Type", ResourceRequest."Source Type"::Project);
                                                                    ResourceRequest.SETRANGE("Source No.", "Project No.");
                                                                    ResourceRequest.SetFilterOnReceivingCompany("Receiving Company", CURRENTCOMPANY);
                                                                  END;
                                                                Type::Service:
                                                                  BEGIN
                                                                    ResourceRequest.SETRANGE("Source Type", ResourceRequest."Source Type"::ServiceOrder);
                                                                    ResourceRequest.SETRANGE("Source No.", "Service Order No.");
                                                                    ResourceRequest.SetFilterOnReceivingCompany("Receiving Company", CURRENTCOMPANY);
                                                                  END;
                                                                Type::Plant:
                                                                  BEGIN
                                                                    IF "Plant Location" <> '' THEN BEGIN
                                                                      PlantLocation.CHANGECOMPANY("Receiving Company");
                                                                      PlantLocation.GET("Plant Location");
                                                                      IF (PlantLocation."Project No." = '') AND (PlantLocation."Service Order No." = '') THEN
                                                                        EXIT;
                                                                      ResourceRequest.SetFilterOnReceivingCompany(PlantLocation."Company Name", "Receiving Company");
                                                                      IF PlantLocation."Project No." <> '' THEN BEGIN
                                                                        ResourceRequest.SETRANGE("Source Type", ResourceRequest."Source Type"::Project);
                                                                        ResourceRequest.SETRANGE("Source No.", PlantLocation."Project No.");
                                                                      END ELSE BEGIN
                                                                        ResourceRequest.SETRANGE("Source Type", ResourceRequest."Source Type"::ServiceOrder);
                                                                        ResourceRequest.SETRANGE("Source No.", PlantLocation."Service Order No.");
                                                                      END;
                                                                    END;
                                                                  END;
                                                              END;
                                                              ResourceRequest."No." := "Resource Request No.";
                                                              IF PAGE.RUNMODAL(0, ResourceRequest) = ACTION::LookupOK THEN BEGIN
                                                                IF ResourceRequest."No." <> "Resource Request No." THEN
                                                                  VALIDATE("Resource Request No.", ResourceRequest."No.");
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Request No.;
                                                              NOR=Forespõrselnr.;
                                                              SVE=FîrfrÜgansnr] }
    { 1100;   ;Registration Day    ;Option        ;CaptionML=[ENU=Registration Day;
                                                              NOR=Registreringsdag;
                                                              SVE=Registreringsdag];
                                                   OptionCaptionML=[ENU=" ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday";
                                                                    NOR=" ,Mandag,Tirsdag,Onsdag,Torsdag,Fredag,Lõrdag,Sõndag";
                                                                    SVE=" ,MÜndag,Tisdag,Onsdag,Torsdag,Fredag,Lîrdag,Sîndag"];
                                                   OptionString=[ ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday] }
    { 1110;   ;Purchase Order No.  ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=[ENU=Purchase Order No.;
                                                              NOR=Innkjõpsordrenr.;
                                                              SVE=Inkîpsordernr];
                                                   Editable=No }
    { 1115;   ;Purchase Order Line No.;Integer    ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                   Document No.=FIELD(Purchase Order No.));
                                                   CaptionML=[ENU=Purchase Order Line No.;
                                                              SVE=Inkîpsorderradnr];
                                                   Editable=No }
    { 1120;   ;Start Time          ;Time          ;CaptionML=[ENU=Start Time;
                                                              NOR=Starttid;
                                                              SVE=Starttid];
                                                   Description=DP00530;
                                                   Editable=No }
    { 1130;   ;End Time            ;Time          ;CaptionML=[ENU=End Time;
                                                              NOR=Sluttid;
                                                              SVE=Sluttid];
                                                   Description=DP00530;
                                                   Editable=No }
    { 1140;   ;Start Kilometer     ;Integer       ;CaptionML=[ENU=Start kilometer;
                                                              SVE=MÑtarstÑllning, start] }
    { 1150;   ;End Kilometer       ;Integer       ;CaptionML=[ENU=End Kilometer;
                                                              SVE=MÑtarstÑllning, slut] }
    { 1160;   ;Travel Expenses     ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Wage Component" WHERE (Code=FIELD(Wage Component),
                                                                                             Component Type=CONST(Expenses),
                                                                                             Kilometer Expense=CONST(Yes)));
                                                   CaptionML=[ENU=Travel Expenses;
                                                              NOR=Reisekostnader;
                                                              SVE=Resekostnader];
                                                   Editable=No }
    { 1170;   ;Service Category    ;Code10        ;CaptionML=[ENU=Service Category;
                                                              SVE=Servicekategori];
                                                   Editable=No }
    { 1200;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=ENU=Open,,Released,,,,Pending Approval,,,,Approved,,,,,Rejected;
                                                   OptionString=Open,,Released,,,,Pending Approval,,,,Approved,,,,,Rejected;
                                                   Editable=No }
    { 1300;   ;Address From        ;Text100       ;CaptionML=[ENU=Address From;
                                                              SVE=FrÜn adress];
                                                   Description=DP01903 }
    { 1301;   ;Address To          ;Text100       ;CaptionML=[ENU=Address To;
                                                              SVE=Till adress];
                                                   Description=DP01903 }
    { 1310;   ;Post Code From      ;Code20        ;TableRelation=IF (Country/Region Code From=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code From=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code From));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode("City From", "Post Code From", CountyCode, "Country/Region Code From", (CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code From;
                                                              SVE=FrÜn postkod];
                                                   Description=DP01903 }
    { 1311;   ;Post Code To        ;Code20        ;TableRelation=IF (Country/Region Code To=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code To=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code To));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode("City To", "Post Code To", CountyCode, "Country/Region Code To", (CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code To;
                                                              SVE=Till postkod];
                                                   Description=DP01903 }
    { 1320;   ;City From           ;Text30        ;OnValidate=BEGIN
                                                                PostCode.ValidateCity("City From", "Post Code From", CountyCode, "Country/Region Code From", (CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   CaptionML=[ENU=City From;
                                                              SVE=FrÜn ort];
                                                   Description=DP01903 }
    { 1321;   ;City To             ;Text30        ;OnValidate=BEGIN
                                                                PostCode.ValidateCity("City To", "Post Code To", CountyCode, "Country/Region Code To", (CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   CaptionML=[ENU=City To;
                                                              SVE=Till ort];
                                                   Description=DP01903 }
    { 1330;   ;Country/Region Code From;Code10    ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code From;
                                                              SVE=FrÜn landkod];
                                                   Description=DP01903 }
    { 1331;   ;Country/Region Code To;Code10      ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code To;
                                                              SVE=Till landkod];
                                                   Description=DP01903 }
    { 1340;   ;Departure Date      ;Date          ;OnValidate=BEGIN
                                                                IF ("Departure Date" <> 0D) AND ("Arrival Date" <> 0D) AND ("Departure Date" > "Arrival Date") THEN
                                                                  FIELDERROR("Departure Date");
                                                              END;

                                                   CaptionML=[ENU=Departure Date;
                                                              SVE=Avresa datum];
                                                   Description=DP01903 }
    { 1341;   ;Departure Time      ;Time          ;CaptionML=[ENU=Departure Time;
                                                              SVE=Avresa tid];
                                                   Description=DP01903 }
    { 1350;   ;Arrival Date        ;Date          ;OnValidate=BEGIN
                                                                IF ("Departure Date" <> 0D) AND ("Arrival Date" <> 0D) AND ("Departure Date" > "Arrival Date") THEN
                                                                  FIELDERROR("Arrival Date");
                                                              END;

                                                   CaptionML=[ENU=Arrival Date;
                                                              NOR=Ankomstdato;
                                                              SVE=Hemkomst datum];
                                                   Description=DP01903 }
    { 1351;   ;Arrival Time        ;Time          ;CaptionML=[ENU=Arrival Time;
                                                              SVE=Hemkomst tid];
                                                   Description=DP01903 }
    { 11128000;;Statistic code     ;Code10        ;CaptionML=[ENU=Statistic code;
                                                              NOR=Statistikk-kode;
                                                              SVE=Statistik kod] }
    { 11128001;;Imported           ;Boolean       ;CaptionML=[ENU=Imported;
                                                              NOR=Importert;
                                                              SVE=Importerad] }
    { 11128002;;Project Principal  ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Principal".Principal WHERE (Project No.=FIELD(Project No.)));
                                                   CaptionML=[ENU=Project Principal;
                                                              NOR=Prosjektoppdragsgiver;
                                                              SVE=Projektuppdragsgivare];
                                                   Editable=No }
    { 11128003;;Project Principal Name;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Name WHERE (No.=FIELD(Project Principal)));
                                                   CaptionML=[ENU=Project Principal Name;
                                                              NOR=Navn pÜ prosjektoppdragsgiver;
                                                              SVE=Projektuppdragsgivarenamn];
                                                   Editable=No }
    { 11128004;;Actual date of line;Date          ;CaptionML=SVE=Verkligt datum pÜ raden;
                                                   Description=ENH050 }
    { 11128230;;Team Code          ;Code10        ;TableRelation="Team Code";
                                                   CaptionML=[ENU=Team Code;
                                                              NOR=Prosjektgruppekode;
                                                              SVE=Arbetslagskod];
                                                   Description=SESB.I037 }
    { 11128231;;Excl. from Normal&Extra Hours;Boolean;
                                                   CaptionML=[ENU=Exclude from Normal&Extra Hours;
                                                              NOR=Ekskluder fra Normale&Ekstra timer;
                                                              SVE=Undanta frÜn Normal&Extra timmar];
                                                   Description=SESB.I038 }
    { 11128232;;Changed            ;Boolean       ;CaptionML=[ENU=Changed;
                                                              NOR=Endret;
                                                              SVE=éndrad];
                                                   Description=SESB.I031;
                                                   Editable=No }
    { 11128233;;Status SE          ;Option        ;CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=[ENU=Open,Processed,Cancelled;
                                                                    NOR=èpen,Behandlet,Avbrutt;
                                                                    SVE=ôppen,Behandlad,Avbruten];
                                                   OptionString=Open,Processed,Cancelled;
                                                   Description=SESB.I031;
                                                   Editable=No }
    { 11128234;;Denied             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Hours Consent Line OLD".Denied WHERE (Year=FIELD(Year),
                                                                                                             Week=FIELD(Week),
                                                                                                             Employee=FIELD(Employee No.),
                                                                                                             Line No.=FIELD(Line No.),
                                                                                                             LineType=CONST(Normal),
                                                                                                             Denied=CONST(Yes)));
                                                   CaptionML=[ENU=Denied;
                                                              NOR=Avvist;
                                                              SVE=Nekad];
                                                   Description=SESB.I035.I036;
                                                   Editable=No }
    { 11128235;;Denied By          ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Hours Consent Line OLD"."Denied By" WHERE (Year=FIELD(Year),
                                                                                                                  Week=FIELD(Week),
                                                                                                                  Employee=FIELD(Employee No.),
                                                                                                                  Line No.=FIELD(Line No.),
                                                                                                                  LineType=CONST(Normal),
                                                                                                                  Denied=CONST(Yes)));
                                                   CaptionML=[ENU=Denied By;
                                                              NOR=Avvist av;
                                                              SVE=Nekad av];
                                                   Description=SESB.I035.I036;
                                                   Editable=No }
    { 11128236;;Deny Comment       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Hours Consent Line OLD".Comment WHERE (Year=FIELD(Year),
                                                                                                              Week=FIELD(Week),
                                                                                                              Employee=FIELD(Employee No.),
                                                                                                              Line No.=FIELD(Line No.),
                                                                                                              LineType=CONST(Normal),
                                                                                                              Denied=CONST(Yes)));
                                                   CaptionML=[ENU=Deny Comment;
                                                              NOR=Avvis Kommentar;
                                                              SVE=Kommentar nekande];
                                                   Description=SESB.I035.I036;
                                                   Editable=No }
    { 11128238;;Charge Exp. Hour to Project;Boolean }
    { 11128385;;Posted Overtime Hours;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Posted Hour Line"."Total Line" WHERE (Year=FIELD(Year),
                                                                                                          Week=FIELD(Week),
                                                                                                          Employee No.=FIELD(Employee No.),
                                                                                                          Overtime=FILTER(Yes),
                                                                                                          Cost Type=FILTER(Labor|Sundry|Plant),
                                                                                                          Component Type=FILTER(Hours),
                                                                                                          Wage Component=FILTER(<>'')));
                                                   CaptionML=[ENU=Posted Overtime Hours;
                                                              NOR=Bokfõrte ôvertidtimer;
                                                              SVE=Bokfîrda ôvertidtimmar];
                                                   Description=Flex correction;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Year,Week,Employee No.,Line No.         ;MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Main Project No.,Project No.,Cost Object,Posting Date;
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Project No.,Element,Extension Contract,Cost Type,Cost Object,Posting Date;
                                                   MaintainSIFTIndex=No }
    {    ;Service Contract No.,Service Location No.,Service Order No.,Service Source Type,Cost Component,Service Control Year,Posting Date;
                                                   MaintainSIFTIndex=No }
    {    ;Connection No.                          ;MaintainSIFTIndex=No }
    {    ;Employer,Project No.,Service Order No.,Plant Type,Cost Code;
                                                   MaintainSIFTIndex=No }
    {    ;Service Order No.                        }
    {    ;Main Project No.,Project No.,Element,Posting Date;
                                                   MaintainSIFTIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PlantSetupRec@1100485021 : Record 11012550;
      GLSetup@1100525008 : Record 98;
      GenJournal@11012003 : Record 80;
      HourAccRec@1210190007 : Record 11012038;
      EmplRec@1210190008 : Record 5200;
      DimValRec@1210190005 : Record 349;
      WageCompRec@1210190006 : Record 11012014;
      ICHumanResourcesSetup@1100525014 : Record 5218;
      ICJobsSetup@1210190019 : Record 315;
      ICServiceSetup@1210190009 : Record 11012800;
      EstRec@1100525012 : Record 11012151;
      ProjRec@1210190004 : Record 11072003;
      ProjElemRec@11012006 : Record 11012010;
      ExtRec@1210190018 : Record 11012004;
      ServOrderRec@1210190000 : Record 11012823;
      Text001@1210190021 : TextConst 'ENU=may not be of Cost Type %1;NOR=kan ikke vëre kostnadstypen %1;SVE=fÜr inte vara kostnadstypen %1';
      PlantLocRec@1100525004 : Record 11012554;
      PlantTypeRec@1100525000 : Record 11012551;
      PlantNoRec@1100525001 : Record 11012552;
      PlantRateCodeRec@1100525002 : Record 11020502;
      PlantCostCompRec@1100525003 : Record 11012575;
      UserSetupRec@1100485036 : Record 91;
      PostingDateRec@1210190020 : Record 11020202;
      CostCodeRec@1210190015 : Record 11012083;
      RentalUnitRec@1100485000 : Record 11012940;
      EmplPriceCostObjectRec@1100485003 : Record 11020259;
      HourAccProjHeader@1100485011 : Record 11020224;
      TempServOrderRec@1100485033 : TEMPORARY Record 11012823;
      TempJobRec@1100485022 : TEMPORARY Record 11072003;
      TempHourLinesRec@1100485019 : TEMPORARY Record 11012039;
      TempField@1100485017 : TEMPORARY Record 2000000041;
      PostedHourLineRec@1100485016 : Record 11012085;
      HourAccountingLineRec@1100485012 : Record 11012039;
      HoursAccntLinesRec@1100485018 : Record 11012039;
      ServiceLocation@1100525011 : Record 11012801;
      "Try-out"@1100525009 : Record 11012750;
      PostCode@1100528304 : Record 225;
      TradeAssociation@1100529600 : Record 11012015;
      DimMgt@1210190003 : Codeunit 408;
      ElementFormat@1210190002 : Codeunit 11012022;
      Text002@1100485013 : TextConst 'ENU="%1 must be %2 in %3 %4=''%5'',%6=''%7'',%8=''%9''.";NOR="%1 mÜ vëre %2 i %3 %4=''%5'',%6=''%7'',%8=''%9''.";SVE="%1 mÜste vara %2 i %3 %4=''%5'',%6=''%7'',%8=''%9''."';
      Text003@1210190022 : TextConst 'ENU=%1 %2 is created from %3.\Changes must be made in %3.;NOR=%1 %2 er opprettet fra %3.\Endringer mÜ gjõres i %3.;SVE=%1 %2 har skapats frÜn %3.\éndringar mÜste gîras i %3.';
      Text004@1210190023 : TextConst 'ENU=in combination with %1 %2 may not be of Cost Type %3;NOR=i kombinasjon med %1 kan %2 ikke vëre Kostnadstype %3;SVE=i kombination med %1 kan %2 inte vara kostnadstyp %3';
      Text005@1210190024 : TextConst 'ENU=and %1 may not be filled both;NOR=og %1 kan ikke begge vëre fylt ut;SVE=och %1 fÜr inte bÜda vara ifyllda';
      Text007@1100485005 : TextConst 'ENU=Line is recorded on time, hour accounting via day not possible.;NOR=Raden er innspilt i tid, timerapportering via dag er ikke mulig.;SVE=Raden Ñr inspelad i tid, tidrapportering via dag Ñr inte mîjlig.';
      Text008@1100485006 : TextConst 'ENU=Line is not recorded on time, hour accounting via time not possible.;NOR=Raden er ikke innspilt i tid, timerapportering via Tid er ikke mulig.;SVE=Raden Ñr inte inspelad i tid, tidrapportering via tid Ñr inte mîjlig.';
      Text009@1100485007 : TextConst 'ENU=Give day first.;NOR=Angi dag fõrst.;SVE=Ange dag fîrst.';
      Text010@1100485004 : TextConst 'ENU=There is a time overlap on this day.;NOR=Det finnes en tidsoverlapping pÜ denne dagen.;SVE=Det finns en tidsîverlappning denna dag.';
      Text011@1100485010 : TextConst 'ENU=may not be modified, %1 is created from %2;NOR=kan ikke endres, %1 er opprettet fra %2;SVE=fÜr inte Ñndras, %1 har skapats frÜn %2';
      Text012@1100485001 : TextConst 'ENU="Posting Date should be within the week. ";NOR=Bokfõringsdatoen mÜ vëre i lõpet av uken.;SVE="Bokfîringsdatumet ska vara inom veckan. "';
      GanttChartMgt@1100525005 : Codeunit 11012037;
      UpdateAction@1100485009 : 'Insert,Modify,Delete,Rename';
      gFromHourAccByProj@1100485041 : Boolean;
      gCurrFieldNo@1100485040 : Integer;
      LineNo@1100485023 : Integer;
      Globaldim2code@1100485024 : Code[20];
      WageComp@1100485025 : Code[10];
      WeekDec@1100485026 : Decimal;
      CurrentYear@1100485028 : Integer;
      CurrentWeek@1100485029 : Integer;
      Jaargang@1100485034 : Date;
      JaargangTxt@1100485035 : Text[10];
      Text013@1100485037 : TextConst 'ENU=No valid Employee No. by this UserID (user setup);NOR=Det finnes ingen gyldige Ansattnr for denne Bruker-IDen (brukerinnstillinger);SVE=Det finns inget giltigt anstÑllningsnr fîr det hÑr anvÑndar-ID:t (anvÑndarinstÑllningar)';
      Text015@1100485008 : TextConst 'ENU="Table %1 ; %2";NOR="Tabel %1 ; %2";SVE="Tabell %1 ; %2"';
      Text016@1100525006 : TextConst 'ENU=only allowed for Plant Hours if a project is linked to the plant location;NOR=kun tillatt for maskintimer hvis et prosjekt er linket til maskinlokasjonen;SVE=endast tillÜtet fîr Maskintimmar om ett projekt Ñr lÑnkat till Maskinplatsen';
      Text018@1101285000 : TextConst 'ENU=%1 %2 is not linked to %3.;NOR=%1 %2 er ikke linket til %3.;SVE=%1 %2 Ñr inte kopplad till %3.';
      Text11128230@1100285000 : TextConst 'ENU="Value or total lines value in field %1 must be between %2 and %3 for %4 = %5, %6 = %7";NOR="Verdi eller totalt radbelõp i feltet %1 mÜ vëre mellom %2 og %3 for %4 = %5, %6 = %7";SVE="VÑrde eller totalt radbelopp i fÑltet %1 mÜste vara mellan %2 och %3 fîr %4 = %5, %6 = %7"';
      Text017@1100527900 : TextConst 'ENU=Amount of leave hours %1, must be less than/equal to %2 for the %3.';
      TotalLineCaption@1100485038 : TextConst 'ENU=Total Line;NOR=Totalrad;SVE=Totalrad';
      AmountCaption@1100485039 : TextConst 'ENU=Amount;NOR=Belõp;SVE=Belopp';
      PlantLocProjectCompany@1100525007 : Text[30];
      RenamingHeader@1100485002 : Boolean;
      UpdateFromProjHourLine@1100525010 : Boolean;
      DPA_Management@1100525013 : Codeunit 11012783;
      Address2@1100528301 : Text[30];
      PhoneNo@1100528302 : Text;
      FaxNo@1100528303 : Text;
      CountyCode@1100528305 : Text;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
      FromDeleteHeader@1100528500 : Boolean;
      Text1100018@1100527350 : TextConst 'ENU=Description;SVE=Beskrivning';
      Text019@1100529601 : TextConst 'ENU="""%1"" must be equal to ''No'' in %2 in company ""%3"". Current value is ''Yes''."';

    PROCEDURE InitRecord@1210190009();
    VAR
      HumanResourcesSetup@1100527201 : Record 5218;
      GenJournal@1100527200 : Record 80;
    BEGIN
      IF CURRENTCOMPANY <> COMPANYNAME THEN BEGIN
        HumanResourcesSetup.CHANGECOMPANY(CURRENTCOMPANY);
        GenJournal.CHANGECOMPANY(CURRENTCOMPANY);
      END;
      HumanResourcesSetup.GET;
      HumanResourcesSetup.TESTFIELD("Hours Journal Template");
      GenJournal.GET(HumanResourcesSetup."Hours Journal Template");
      "Source Code" := GenJournal."Source Code";
      "Reason Code" := GenJournal."Reason Code";
      //"Connection No." := 0;  Not allowed here, moved to OnInsertRecord on form
      "Cost Plus Entry Created" := FALSE;
      "Employee Portal Document No." := '';
      "Origin Hours" := "Origin Hours"::" ";  //* C-019595
      "Origin Company" := '';  //* C-027056

      FillMainProject;
      GetFixedEmployeeData;
    END;

    PROCEDURE TotalHours@1();
    BEGIN
      "Total Line" := Monday + Tuesday + Wednesday + Thursday + Friday + Saturday + Sunday;
      //>>RFC256
      IF "Total Line" <> 0 THEN BEGIN
      //>>190628, RFC226
        IF "Excl. from Normal&Extra Hours" AND ("Component Type"="Component Type"::Addition) THEN BEGIN
          Quantity := 0;
          Amount := "Unit Cost" * "Total Line";
          "Amount (LCY)" := "Unit Cost (LCY)" * "Total Line";
        END;
      //<<190628, RFC226
        "Unit Cost" := Amount /"Total Line";
        "Unit Cost (LCY)" := "Amount (LCY)" /"Total Line";
      END;
      //<<RFC256
      CalcRateAndAmount;
    END;

    PROCEDURE FillDocNoPostingDate@3(HardGet@1100485000 : Boolean);
    VAR
      HeaderExists@1100485001 : Boolean;
    BEGIN
      CLEAR(HourAccRec);
      IF CURRENTCOMPANY <> COMPANYNAME THEN
        HourAccRec.CHANGECOMPANY(CURRENTCOMPANY);
      IF HardGet THEN BEGIN
        HourAccRec.GET(Year,Week,"Employee No.");
        HeaderExists := TRUE;
      END ELSE
        HeaderExists := HourAccRec.GET(Year,Week,"Employee No.");

      IF HeaderExists THEN BEGIN
        "Document No." := HourAccRec."Document No.";
        IF "Employee No." <> '' THEN
          "Supplying Company" := HourAccRec."Supplying Company";
      END;

      CheckPostingDate;
    END;

    PROCEDURE CheckPostingDate@1210190004();
    BEGIN
      IF CURRENTCOMPANY <> COMPANYNAME THEN
        PostingDateRec.CHANGECOMPANY(CURRENTCOMPANY);
      IF PostingDateRec.GET(Year, Week) THEN
        IF PostingDateRec."Posting Date" <> 0D THEN BEGIN
          "Posting Date" := PostingDateRec."Posting Date";
          EXIT;
        END;

      CALCFIELDS("Component Type");
      IF "Component Type" = "Component Type"::Expenses THEN
        VALIDATE("Posting Date") //In this case Posting Date is editable, so don't fill it automatically
      ELSE BEGIN
        IF (Monday = 0) AND (Tuesday = 0) AND (Wednesday = 0) AND
           (Thursday = 0) AND (Friday = 0) AND (Saturday = 0) AND (Sunday = 0) AND
           ("Posting Date" <> 0D) AND
           ("Posting Date" >= DWY2DATE(1,Week,Year)) AND ("Posting Date" <= DWY2DATE(7,Week,Year))
        THEN
          EXIT;  //* From BDA also worden ook zero lines created, these should be posted on BDA-hour date

        IF CURRENTCOMPANY <> COMPANYNAME THEN
          HourAccRec.CHANGECOMPANY(CURRENTCOMPANY);
        IF HourAccRec.GET(Year,Week,"Employee No.") THEN
          "Posting Date" := HourAccRec."Posting Date";

        IF Monday <> 0 THEN "Posting Date" := DWY2DATE(1,Week,Year);
        IF Tuesday <> 0 THEN "Posting Date" := DWY2DATE(2,Week,Year);
        IF Wednesday <> 0 THEN "Posting Date" := DWY2DATE(3,Week,Year);
        IF Thursday <> 0 THEN "Posting Date" := DWY2DATE(4,Week,Year);
        IF Friday <> 0 THEN "Posting Date" := DWY2DATE(5,Week,Year);
        IF Saturday <> 0 THEN "Posting Date" := DWY2DATE(6,Week,Year);
        IF Sunday <> 0 THEN "Posting Date" := DWY2DATE(7,Week,Year);
      END;
    END;

    PROCEDURE GetFixedEmployeeData@2();
    BEGIN
      CheckCompanyIC;
      IF EmplRec.GET("Employee No.") THEN BEGIN
        "Calculate Wage Costs" := EmplRec."Calculate Wage Costs";
        External := EmplRec.External;
        Employer := EmplRec.Employer;
      END;
    END;

    PROCEDURE CheckCompanyIC@32();
    BEGIN
      ICJobsSetup.CHANGECOMPANY("Receiving Company");
      ICHumanResourcesSetup.CHANGECOMPANY("Receiving Company");
      ProjRec.CHANGECOMPANY("Receiving Company");
      ProjElemRec.CHANGECOMPANY("Receiving Company");
      ExtRec.CHANGECOMPANY("Receiving Company");
      DimMgt.SetCompany("Receiving Company");
      DimValRec.CHANGECOMPANY("Receiving Company");
      ServOrderRec.CHANGECOMPANY("Receiving Company");
      CostCodeRec.CHANGECOMPANY("Receiving Company");
      RentalUnitRec.CHANGECOMPANY("Receiving Company");
      PlantSetupRec.CHANGECOMPANY("Receiving Company");
      PlantLocRec.CHANGECOMPANY("Receiving Company");
      PlantTypeRec.CHANGECOMPANY("Receiving Company");
      PlantNoRec.CHANGECOMPANY("Receiving Company");
      PlantRateCodeRec.CHANGECOMPANY("Receiving Company");
      PlantCostCompRec.CHANGECOMPANY("Receiving Company");
      "Try-out".CHANGECOMPANY("Receiving Company"); //C007286
      EstRec.CHANGECOMPANY("Receiving Company");  //db, 05-05-14: C014120
      IF ("Supplying Company" = '') AND (CURRENTCOMPANY <> COMPANYNAME) THEN BEGIN
        EmplRec.CHANGECOMPANY(CURRENTCOMPANY);
        TradeAssociation.CHANGECOMPANY(CURRENTCOMPANY);
      END ELSE BEGIN
        EmplRec.CHANGECOMPANY("Supplying Company");
        TradeAssociation.CHANGECOMPANY(CURRENTCOMPANY);
      END;

      ICJobsSetup.GET;
      ICHumanResourcesSetup.GET;
    END;

    PROCEDURE RefersToOtherCompany@1100525008() : Boolean;
    BEGIN
      EXIT(("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME));
    END;

    PROCEDURE DetermineTryOut@1210190000() : Code[20];
    VAR
      TryOutRelationRec@1210190000 : Record 11012761;
    BEGIN
      TryOutRelationRec.CHANGECOMPANY("Receiving Company"); //C007286
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(TryOutRelationRec) THEN BEGIN
        IF "Project No." <> '' THEN BEGIN
          TryOutRelationRec.SETCURRENTKEY("Project No.");
          TryOutRelationRec.SETRANGE("Project No.", "Project No.");
          IF TryOutRelationRec.FINDFIRST THEN
            EXIT(TryOutRelationRec."Try-out No.");
        END;
        IF "Estimate No." <> '' THEN BEGIN
          TryOutRelationRec.RESET;
          TryOutRelationRec.CHANGECOMPANY(COMPANYNAME); //C007286
          TryOutRelationRec.SETCURRENTKEY("Estimate No.");
          TryOutRelationRec.SETRANGE("Estimate No.", "Estimate No.");
          IF TryOutRelationRec.FINDFIRST THEN
            EXIT(TryOutRelationRec."Try-out No.");
        END;
      END;
      EXIT('');
    END;

    PROCEDURE ProjDescrOtherCompany@1210190005();
    BEGIN
      IF "Receiving Company" = '' THEN
        EXIT;

      "Project Description" := '';
      "Project City" := '';
      "Service Order Description" := '';

      IF Type = Type::Project THEN BEGIN
        IF "Project No." = '' THEN EXIT;
        ProjRec.CHANGECOMPANY("Receiving Company");
        IF ProjRec.GET("Project No.") THEN BEGIN
          "Project Description" := ProjRec.Description;
          "Project City" := ProjRec.City;
        END;
      END;

      IF Type = Type::Service THEN BEGIN
        IF "Service Order No." = '' THEN EXIT;
        ServOrderRec.CHANGECOMPANY("Receiving Company");
        IF ServOrderRec.GET("Service Order No.") THEN
          "Service Order Description" := ServOrderRec.Description;
      END;
    END;

    PROCEDURE CostObjDescr@1100485000();
    BEGIN
      "Cost Object Description" := '';
      IF "Cost Object" = '' THEN
        EXIT;

      CheckCompanyIC;
      DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, "Project No.");
      "Cost Object Description" := DimValRec.Name;
    END;

    PROCEDURE ServiceLocationDescription@1100525007();
    BEGIN
      // 33633.n
      "Service Location Description" := '';
      IF "Service Location No." = '' THEN
        EXIT;

      ServiceLocation.CHANGECOMPANY("Receiving Company");
      IF ServiceLocation.GET("Service Location No.") THEN
        //"Service Location Description" := ServiceLocation.Description;  //spill overflow
        "Service Location Description" := COPYSTR(ServiceLocation.Description,1,MAXSTRLEN("Service Location Description"));
        //PSSE, spill overflow
    END;

    PROCEDURE CalcRateAndAmount@1210190006();
    VAR
      lvRecRef@1100485000 : RecordRef;
      lCostObjectCostPriceRec@1100525000 : Record 11020356;
      HourAccountingLine@1100525001 : Record 11012039;
      CurrencyDate@1100528202 : Date;
      CurrencyExchangeRateRec@1100528201 : Record 330;
      Currency2@1100528200 : Record 4;
      HumanResourcesSetup@1100525005 : Record 5218;
      FCurrency@1100525002 : Boolean;
      FCurrencyPurchase@1100525003 : Boolean;
      RateFound@1100525004 : Boolean;
      lEmplWageCCostPriceRec@1100530700 : Record 11020390;
      lWageCompSalA@1100285300 : Record 11128109;
      lvJobSetup@1100285100 : Record 315;
      JobsSetup@1100528203 : Record 315;
      tempValueDec@1100285101 : Decimal;
    BEGIN
      //190304
      CALCFIELDS("Component Type");  //190529
      IF "Excl. from Normal&Extra Hours" AND ("Component Type"="Component Type"::Addition) THEN BEGIN
        //>>190529
        //"Unit Cost (LCY)" := GetCostPrice(FALSE, FCurrency);
        tempValueDec := GetCostPrice(FALSE, FCurrency);
        IF tempValueDec <> 0 THEN
          "Unit Cost (LCY)" := tempValueDec;
        //<<190529
        "Amount (LCY)" := 0;
        "Precalc. Surcharge Expenses" := 0;
        CASE TRUE OF
          (Quantity<>0):
            BEGIN
              "Amount (LCY)" := ROUND(Quantity * "Unit Cost (LCY)");
              "Precalc. Surcharge Expenses" := ROUND(Quantity * "Precalc. Surcharge Rate");
            END;
          ("Total Line"<>0):
            BEGIN
              "Amount (LCY)" := ROUND("Total Line" * "Unit Cost (LCY)");
              "Precalc. Surcharge Expenses" := ROUND("Total Line" * "Precalc. Surcharge Rate");
            END;
        END;

        "Surcharge Overtime" := 0;
        //Assumption: expenses are always in local currency
        "Unit Cost" := "Unit Cost (LCY)";
        "Purchase Unit Cost" := "Purchase Unit Cost (LCY)";
        Amount := "Amount (LCY)";
      END;

      // SESB.I038 ASH 19.07.2013 >>
      IF "Excl. from Normal&Extra Hours" THEN
        EXIT;
      // SESB.I038 ASH 19.07.2013 <<

      CheckCompanyIC;
      IF CURRENTCOMPANY <> COMPANYNAME THEN
        HumanResourcesSetup.CHANGECOMPANY(CURRENTCOMPANY);
      HumanResourcesSetup.GET;
      "Purchase Unit Cost (LCY)" := 0;
      IF "Cost Type" = "Cost Type"::Plant THEN BEGIN
        IF ICHumanResourcesSetup."Determine Plant Costs Hours" =
           ICHumanResourcesSetup."Determine Plant Costs Hours"::"By Cost Object" THEN
        BEGIN //C000988
          "Precalc. Surcharge Rate" := 0;
          "Precalc. Surcharge Expenses" := 0;
          IF "Cost Object" <> '' THEN BEGIN
            DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, '');
            lCostObjectCostPriceRec.SETRANGE("Cost Object", "Cost Object");
            lCostObjectCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
            lCostObjectCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
            IF lCostObjectCostPriceRec.FINDLAST THEN BEGIN
              "Unit Cost (LCY)" := lCostObjectCostPriceRec."Cost Price";
              lvRecRef.GETTABLE(lCostObjectCostPriceRec);
              FillCostPriceFound(lvRecRef);
            END ELSE BEGIN
              "Unit Cost (LCY)" := DimValRec.Price;
              IF DimValRec.Price <> 0 THEN BEGIN
                lvRecRef.GETTABLE(DimValRec);
                FillCostPriceFound(lvRecRef);
              END ELSE
                "Cost Price Found at" := '';
            END;
            IF DimValRec."Precalc. Surcharge Hours %" <> 0 THEN
              "Unit Cost (LCY)" := "Unit Cost (LCY)" * (1 + DimValRec."Precalc. Surcharge Hours %"/100);
            "Amount (LCY)" := ROUND("Total Line" * "Unit Cost (LCY)");
            "Surcharge Overtime" := 0;
          END ELSE BEGIN
            "Unit Cost (LCY)" := 0;
            "Cost Price Found at" := '';
            "Amount (LCY)" := 0;
          END;

          //Call C022483 sn
          "Unit Cost" := "Unit Cost (LCY)";
          Amount := "Amount (LCY)";
          FCurrency := FALSE;
          FCurrencyPurchase := FALSE;
          IF External THEN
            IF (ICHumanResourcesSetup."Internal Charge Rate Ext Hours" =
                ICHumanResourcesSetup."Internal Charge Rate Ext Hours"::"Internal Rate")
            THEN BEGIN
              EmplRec."No." := "Employee No.";
              HourAccountingLine.COPY(Rec);
              "Purchase Unit Cost" := HourAccountingLine.GetCostPrice(TRUE,  FCurrencyPurchase);
            END ELSE
             "Purchase Unit Cost" := "Unit Cost"
          ELSE
             "Purchase Unit Cost" := 0;
          //Call C022483 en
          // EXIT;            //Call C02248 o
          RateFound := TRUE;  //Call C02248 n
        END; //C000988
      END;

      IF NOT RateFound THEN   //Call C02248 n
        IF ("Employee No." = '') OR ("Wage Component" = '') THEN BEGIN
          "Precalc. Surcharge Rate" := 0;
          "Precalc. Surcharge Expenses" := 0;
          "Unit Cost" := 0;
          "Cost Price Found at" := '';
          Amount := 0;
          "Surcharge Overtime" := 0;
          //Call C022483 sn
          "Unit Cost (LCY)" := 0;
          "Amount (LCY)" := 0;
          "Purchase Unit Cost (LCY)" := 0;
          "Purchase Unit Cost" := 0;
          //Call C022483 en
          EXIT;
        END;

      //>>RFC184
      lvJobSetup.GET;
      IF (lvJobSetup."Cost rate in timesheet Act.Rat" = lvJobSetup."Cost rate in timesheet Act.Rat"::Inactive ) AND EmplRec.GET("Employee No.") THEN
        IF EmplRec."Calculate Wage Costs" = EmplRec."Calculate Wage Costs"::"Actual Rate" THEN BEGIN
          CalcAmountToLCY(FCurrency,FCurrencyPurchase);
          EXIT;
        END;
      //<<RFC184

      IF NOT RateFound THEN BEGIN   //Call C02248 n

        FCurrency := FALSE;  //M25781
        FCurrencyPurchase := FALSE; //M25781

        CALCFIELDS("Component Type");
        CASE "Component Type" OF
          "Component Type"::Hours:
            BEGIN
              "Precalc. Surcharge Rate" := 0;
              "Precalc. Surcharge Expenses" := 0;
              "Unit Cost" := GetCostPrice(FALSE, FCurrency);
              IF External THEN
                IF (ICHumanResourcesSetup."Internal Charge Rate Ext Hours" =
                    ICHumanResourcesSetup."Internal Charge Rate Ext Hours"::"Internal Rate")
                THEN BEGIN
                  EmplRec."No." := "Employee No.";
                  HourAccountingLine.COPY(Rec);
                  "Purchase Unit Cost" := HourAccountingLine.GetCostPrice(TRUE,  FCurrencyPurchase);
                END ELSE
                  "Purchase Unit Cost" := "Unit Cost"
              ELSE
                "Purchase Unit Cost" := 0;

              IF NOT WageCompRec.GET("Wage Component") THEN
                WageCompRec.INIT;

              IF WageCompRec."Surcharge %" <> 0 THEN BEGIN
                "Unit Cost" := "Unit Cost" * WageCompRec."Surcharge %"/100;
                "Purchase Unit Cost" := "Purchase Unit Cost" * WageCompRec."Surcharge %"/100;
              END;

              IF WageCompRec.Overtime THEN BEGIN
                "Surcharge Overtime" := ("Unit Cost" * WageCompRec."Overtime Surcharge %"/100) -
                                        "Unit Cost";
                "Unit Cost" := "Unit Cost" * WageCompRec."Overtime Surcharge %"/100;
                "Purchase Unit Cost" := "Purchase Unit Cost" * WageCompRec."Overtime Surcharge %"/100;
              END ELSE
                "Surcharge Overtime" := 0;

              DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, '');
              "Unit Cost" := "Unit Cost" * (1 + DimValRec."Precalc. Surcharge Hours %"/100);
              "Purchase Unit Cost" := "Purchase Unit Cost" * (1 + DimValRec."Precalc. Surcharge Hours %"/100);

              Amount := ROUND("Total Line" * "Unit Cost");
            END;
          "Component Type"::Expenses:
            BEGIN
              IF ("Unit Cost (LCY)" = 0) OR (GetCurrFieldNo() = FIELDNO("Cost Object")) OR (GetCurrFieldNo() = FIELDNO("Cost Code")) OR
                 (GetCurrFieldNo() = FIELDNO("Wage Component")) OR (GetCurrFieldNo() = FIELDNO("Employee No."))
              THEN BEGIN
                IF NOT WageCompRec.GET("Wage Component") THEN
                  WageCompRec.INIT;
                IF HumanResourcesSetup."Travel Rate from Supplying Cy." AND WageCompRec."Kilometer Expense" AND
                  (("Supplying Company" <> '') OR ("Receiving Company" <> ''))
                THEN BEGIN
                  IF "Supplying Company" <> '' THEN BEGIN
                    DimValRec.CHANGECOMPANY("Supplying Company");
                    lCostObjectCostPriceRec.CHANGECOMPANY("Supplying Company");
                    lEmplWageCCostPriceRec.CHANGECOMPANY("Supplying Company")
                  END ELSE BEGIN
                    DimValRec.CHANGECOMPANY(COMPANYNAME);
                    lCostObjectCostPriceRec.CHANGECOMPANY(COMPANYNAME);
                    lEmplWageCCostPriceRec.CHANGECOMPANY(COMPANYNAME)
                  END;
                END ELSE BEGIN
                  lCostObjectCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lEmplWageCCostPriceRec.CHANGECOMPANY("Receiving Company")
                END;

                DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, "Cost Object" <> '', '');
                lCostObjectCostPriceRec.SETRANGE("Cost Object", "Cost Object");
                lCostObjectCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                lCostObjectCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                IF lCostObjectCostPriceRec.FINDLAST THEN BEGIN
                  "Unit Cost (LCY)" := lCostObjectCostPriceRec."Cost Price";
                  lvRecRef.GETTABLE(lCostObjectCostPriceRec);
                  FillCostPriceFound(lvRecRef);
                END ELSE BEGIN
                  "Unit Cost (LCY)" := DimValRec.Price;
                  IF DimValRec.Price <> 0 THEN BEGIN
                    lvRecRef.GETTABLE(DimValRec);
                    FillCostPriceFound(lvRecRef);
                  END ELSE
                    "Cost Price Found at" := '';
                END;

                EmplPriceCostObjectRec.SETRANGE("Employee No.","Employee No.");
                EmplPriceCostObjectRec.SETRANGE("Cost Object","Cost Object");
                EmplPriceCostObjectRec.SETRANGE("Starting Date",0D,"Posting Date");
                EmplPriceCostObjectRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                IF EmplPriceCostObjectRec.FINDLAST THEN BEGIN
                  "Unit Cost (LCY)" := EmplPriceCostObjectRec."Cost Price";
                  lvRecRef.GETTABLE(EmplPriceCostObjectRec);
                  FillCostPriceFound(lvRecRef);
                END;

                lEmplWageCCostPriceRec.SETRANGE("Employee No.", "Employee No.");
                lEmplWageCCostPriceRec.SETRANGE("Wage Component", "Wage Component");
                lEmplWageCCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                lEmplWageCCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                IF lEmplWageCCostPriceRec.FINDLAST THEN BEGIN
                  "Unit Cost (LCY)" := lEmplWageCCostPriceRec."Cost Price";
                  lvRecRef.GETTABLE(lEmplWageCCostPriceRec);
                  FillCostPriceFound(lvRecRef);
                END;

                "Precalc. Surcharge Rate" := "Unit Cost (LCY)" * DimValRec."Precalc. Surcharge Hours %"/100;
                "Unit Cost (LCY)" := "Unit Cost (LCY)" * (1 + DimValRec."Precalc. Surcharge Hours %"/100);

              END;
              "Amount (LCY)" := ROUND(Quantity * "Unit Cost (LCY)");
              "Precalc. Surcharge Expenses" := ROUND(Quantity * "Precalc. Surcharge Rate");
              "Surcharge Overtime" := 0;

              //Assumption: expenses are always in local currency
              "Unit Cost" := "Unit Cost (LCY)";
              "Purchase Unit Cost" := "Purchase Unit Cost (LCY)";
              Amount := "Amount (LCY)";
            END;
        END;
      END;     //Call C02248 n
      CalcAmountToLCY(FCurrency,FCurrencyPurchase);
    END;

    PROCEDURE CalcAmountToLCY@1100285100(FCurrency@1000000003 : Boolean;FCurrencyPurchase@1000000004 : Boolean);
    VAR
      CurrencyDate@1101285000 : Date;
      CurrencyExchangeRateRec@1101285001 : Record 330;
      Currency2@1101285002 : Record 4;
      lWageCompSalA@1101285003 : Record 11128109;
    BEGIN
      Currency2.InitRoundingPrecision;
      IF "Currency Code" <> '' THEN BEGIN
        CurrencyDate := TODAY;

        IF FCurrency THEN BEGIN
          "Unit Cost (LCY)" :=
            ROUND(
            CurrencyExchangeRateRec.ExchangeAmtFCYToLCY(
              1, "Project No.", CurrencyDate, "Currency Code", "Unit Cost",
               CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
               Currency2."Amount Rounding Precision");

            "Amount (LCY)" :=
            ROUND(
            CurrencyExchangeRateRec.ExchangeAmtFCYToLCY(
              1, "Project No.", CurrencyDate, "Currency Code", Amount,
               CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
               Currency2."Amount Rounding Precision");
        END ELSE BEGIN
          //M 25781 sn Rate in local currency
          "Unit Cost (LCY)" := "Unit Cost";
          "Amount (LCY)" := Amount;

          "Unit Cost" :=
            ROUND(
            CurrencyExchangeRateRec.ExchangeAmtLCYToFCY(
              1, "Project No.", CurrencyDate, "Currency Code", "Unit Cost (LCY)",
               CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
               Currency2."Amount Rounding Precision");

            Amount :=
            ROUND(
            CurrencyExchangeRateRec.ExchangeAmtLCYToFCY(
              1, "Project No.", CurrencyDate, "Currency Code", "Amount (LCY)",
               CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
               Currency2."Amount Rounding Precision");
          //M 25781 en
        END;

        IF FCurrencyPurchase THEN BEGIN
          "Purchase Unit Cost (LCY)" :=
            ROUND(
            CurrencyExchangeRateRec.ExchangeAmtFCYToLCY(
              1, "Project No.", CurrencyDate, "Currency Code", "Purchase Unit Cost",
               CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
               Currency2."Amount Rounding Precision");
        END ELSE BEGIN
          //M 25781 sn
          "Purchase Unit Cost (LCY)" := "Purchase Unit Cost";
          "Purchase Unit Cost" :=
            ROUND(
            CurrencyExchangeRateRec.ExchangeAmtLCYToFCY(
              1, "Project No.", CurrencyDate, "Currency Code", "Purchase Unit Cost (LCY)",
               CurrencyExchangeRateRec.ExchangeRate(1, "Project No.", CurrencyDate, "Currency Code",FALSE),FALSE),
               Currency2."Amount Rounding Precision");

          //M 25781 en
        END;

      END ELSE BEGIN
        "Unit Cost (LCY)" := ROUND("Unit Cost",Currency2."Amount Rounding Precision");
        "Purchase Unit Cost (LCY)" := ROUND("Purchase Unit Cost",Currency2."Amount Rounding Precision");
        "Amount (LCY)" := ROUND(Amount,Currency2."Amount Rounding Precision");
      END;
    END;

    PROCEDURE CalcOverheadSurcharge@1210190003();
    VAR
      lSurchargeRec@1210190000 : Record 11020208;
      lEmployeeRec@1100485000 : Record 5200;
      HourLineSurcharge@1100485003 : Record 11020308;
      SurchDimValRec@1100485004 : Record 349;
      lBaseAmount@1100485001 : Decimal;
      lTotSurchAmount@1100485008 : Decimal;
      lvServType@1100485002 : Code[20];
      DepartmentCode@1100525000 : Code[20];
    BEGIN
      HourLineSurcharge.RESET;
      HourLineSurcharge.SETRANGE(Year, Year);
      HourLineSurcharge.SETRANGE(Week, Week);
      HourLineSurcharge.SETRANGE("Employee No.", "Employee No.");
      HourLineSurcharge.SETRANGE("Hour Line No.", "Line No.");
      IF NOT HourLineSurcharge.ISEMPTY THEN
        HourLineSurcharge.DELETEALL;

      HourLineSurcharge.INIT;
      HourLineSurcharge.TRANSFERFIELDS(Rec);
      HourLineSurcharge."Line No." := 0;

      HourLineSurcharge."Overhead Surcharge Project" := 0;
      HourLineSurcharge."Overhead Surcharge Service" := 0;

      IF ("Cost Object" = '') OR NOT (Type IN [Type::Project, Type::Service]) OR ("Amount (LCY)" = 0) THEN
        EXIT;

      CheckCompanyIC;
      DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, '');

      IF ("Employee No." <> '') THEN BEGIN
        lEmployeeRec.CHANGECOMPANY("Supplying Company");
        IF lEmployeeRec.GET("Employee No.") THEN;
      END;
      IF (DimValRec."Cost Type" = DimValRec."Cost Type"::Labor) AND
        ("Employee No." <> '') THEN
      BEGIN
        IF (lEmployeeRec.External) AND (lEmployeeRec."External Post No Surcharge") THEN
          EXIT;
      END;

      GLSetup.GET;

      IF ICHumanResourcesSetup."Surcharge Overtime excl." THEN
        lBaseAmount := "Amount (LCY)" - ("Surcharge Overtime" * "Total Line")
      ELSE
        lBaseAmount := "Amount (LCY)";

      IF "Service Order No." <> '' THEN BEGIN
        ServOrderRec.GET("Service Order No.");
        IF "Additional Cost (Service)" = TRUE THEN
          lvServType := ServOrderRec."Service Type (Other)"
        ELSE
          lvServType := ServOrderRec."Service Type";

        IF GLSetup."Source Department Surcharge" = GLSetup."Source Department Surcharge"::Employee THEN
          DepartmentCode := lEmployeeRec."Global Dimension 1 Code"
        ELSE
          DepartmentCode := ServOrderRec."Global Dimension 1 Code";
        IF lSurchargeRec.GetSurcharges(1, lvServType, '', TRUE, DimValRec."Cost Type", "Cost Object", "Wage Component",
          DepartmentCode,  lEmployeeRec."Trade Association", "Cost Component", "Posting Date",
          lSurchargeRec) THEN
          REPEAT
            IF lSurchargeRec.Percentage <> 0 THEN
              HourLineSurcharge."Overhead Surcharge Service" := ROUND(lBaseAmount * lSurchargeRec.Percentage/100)
            ELSE
              HourLineSurcharge."Overhead Surcharge Service" := ROUND(lSurchargeRec.Amount * "Total Line");

            IF HourLineSurcharge."Overhead Surcharge Service" <> 0 THEN BEGIN
              lSurchargeRec.GetSurchargeDimVal(DimValRec, SurchDimValRec);
              HourLineSurcharge."Cost Object" := SurchDimValRec.Code;
              HourLineSurcharge."Cost Type" := SurchDimValRec."Cost Type";
              IF SurchDimValRec."Cost Component" <> '' THEN
                HourLineSurcharge."Cost Component" := SurchDimValRec."Cost Component";

              HourLineSurcharge.INSERT(TRUE);
              HourLineSurcharge."Line No." += 1;
            END;
          UNTIL lSurchargeRec.NEXT = 0;
      END ELSE BEGIN
        IF "Project No." <> '' THEN BEGIN
          ProjRec.GET("Project No.");
          IF GLSetup."Source Department Surcharge" = GLSetup."Source Department Surcharge"::Employee THEN
            DepartmentCode := lEmployeeRec."Global Dimension 1 Code"
          ELSE
            DepartmentCode := ProjRec."Global Dimension 1 Code";

          IF lSurchargeRec.GetSurcharges(0, ProjRec."Project Type", "Project No.", TRUE, DimValRec."Cost Type", "Cost Object",
            "Wage Component", DepartmentCode, lEmployeeRec."Trade Association", "Cost Component",
            "Posting Date", lSurchargeRec) THEN
            REPEAT
              IF lSurchargeRec.Percentage <> 0 THEN
                IF lSurchargeRec."Surcharge over Surcharge" THEN
                  HourLineSurcharge."Overhead Surcharge Project" := ROUND(
                    (lBaseAmount + lTotSurchAmount) * lSurchargeRec.Percentage/100)
                ELSE
                  HourLineSurcharge."Overhead Surcharge Project" := ROUND(lBaseAmount * lSurchargeRec.Percentage/100)
              ELSE
                HourLineSurcharge."Overhead Surcharge Project" := ROUND(lSurchargeRec.Amount * "Total Line");

              IF HourLineSurcharge."Overhead Surcharge Project" <> 0 THEN BEGIN
                lSurchargeRec.GetSurchargeDimVal(DimValRec, SurchDimValRec);
                HourLineSurcharge."Cost Object" := SurchDimValRec.Code;
                HourLineSurcharge."Cost Type" := SurchDimValRec."Cost Type";
                IF SurchDimValRec."Cost Component" <> '' THEN
                  HourLineSurcharge."Cost Component" := SurchDimValRec."Cost Component";
                //call22080
                IF (lSurchargeRec."Element Surcharge" <> '') THEN
                  HourLineSurcharge.Element := lSurchargeRec."Element Surcharge";
                //
                HourLineSurcharge.INSERT(TRUE);
                HourLineSurcharge."Line No." += 1;
                lTotSurchAmount := lTotSurchAmount + HourLineSurcharge."Overhead Surcharge Project";
              END;
            UNTIL lSurchargeRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE EmptyLine@1210190007() : Boolean;
    BEGIN
      CALCFIELDS("Component Type");
      IF "Component Type" = "Component Type"::Hours THEN
        EXIT(
          (Monday = 0) AND (Tuesday = 0) AND (Wednesday = 0) AND (Thursday = 0) AND
          (Friday = 0) AND (Saturday = 0) AND (Sunday = 0) )
      ELSE
        EXIT(("Cost Object" = '') AND ("Wage Component" ='') AND (Quantity = 0) AND ("Amount (LCY)" = 0));
    END;

    PROCEDURE CheckCostType@1210190008(ErrorMode@1100525000 : Boolean) : Boolean;
    VAR
      ShowErrorMessage@1210190000 : Boolean;
    BEGIN
      IF "Cost Object" = '' THEN
        EXIT(TRUE);  //C005137.c

      ICHumanResourcesSetup.CHANGECOMPANY("Receiving Company");
      ICHumanResourcesSetup.GET;

      //mg.sn, 09-09-11: M27549
      IF Type = Type::Service THEN BEGIN //call 31396
        ICServiceSetup.CHANGECOMPANY("Receiving Company");
        ICServiceSetup.GET;
      END;
      //mg.en, 09-09-11: M27549

      //Checks irrespective of Component Type
      CASE "Cost Type" OF
        "Cost Type"::Material:
          ShowErrorMessage := TRUE;
      //DP01010.sn
        "Cost Type"::Subcontracting:
          IF NOT External THEN
            ShowErrorMessage := TRUE;
      //DP01010.en
        "Cost Type"::Plant:
          BEGIN
            //IF "Connection No." > 0 THEN    //*C-019491.o
            //  TESTFIELD("Employee No.",''); //*C-019491.o
            //IF External THEN BEGIN //C004448.o
            IF External AND (NOT (Type IN [Type::Project, Type::Service])) THEN BEGIN //C004448.n
              IF NOT ErrorMode THEN  //C005137.n
                EXIT(FALSE);
              FIELDERROR("Cost Object", STRSUBSTNO(Text004, FIELDCAPTION(External), External, "Cost Type"));
            END;
            IF NOT (Type IN [Type::Project, Type::Plant, Type::Service]) THEN BEGIN //mg, 09-09-11: M27549
              IF NOT ErrorMode THEN  //C005137.n
                EXIT(FALSE);
              FIELDERROR("Cost Object", STRSUBSTNO(Text004, FIELDCAPTION(Type), Type, "Cost Type"));
            END;
            IF (Type IN [Type::Project,Type::Service]) THEN //#C012006.n
              ShowErrorMessage := NOT ((ICHumanResourcesSetup."Accept Plant Costs Hours" AND (Type = Type::Project)) OR
                (ICServiceSetup."Accept Plant Costs Hours" AND (Type = Type::Service))); //mg.c, 20-09-11: M27549
          END;
      END;
      IF (NOT ErrorMode) AND ShowErrorMessage THEN  //C005137.n
        EXIT(FALSE);
      IF ShowErrorMessage THEN
        FIELDERROR("Cost Object", STRSUBSTNO(Text001, "Cost Type"));

      IF "Wage Component" = '' THEN
        EXIT(TRUE);  //C005137.c

      //Checks depending on Component Type
      CALCFIELDS("Component Type");
      IF "Component Type" = "Component Type"::Hours THEN
        CASE "Cost Type" OF
          "Cost Type"::Labor:;
          "Cost Type"::Subcontracting:; //DP01010
          "Cost Type"::Plant:
            IF (Type IN [Type::Project,Type::Service]) THEN //#C012006.n
              ShowErrorMessage := NOT ((ICHumanResourcesSetup."Accept Plant Costs Hours" AND (Type = Type::Project)) OR
                (ICServiceSetup."Accept Plant Costs Hours" AND (Type = Type::Service))); //mg.c, 20-09-11: M27549
          "Cost Type"::Sundry:
            ShowErrorMessage := (NOT ICHumanResourcesSetup."Accept Sundry Costs Hours");
          ELSE
            ShowErrorMessage := TRUE;
        END;

      IF (NOT ErrorMode) AND ShowErrorMessage THEN  //C005137.n
        EXIT(FALSE);
      IF ShowErrorMessage THEN
        FIELDERROR("Cost Object", STRSUBSTNO(Text004, FIELDCAPTION("Component Type"), "Component Type", "Cost Type"));
      EXIT(TRUE);  //C005137.n
    END;

    PROCEDURE LineIsEditable@1210190011() : Boolean;
    VAR
      HumanResourcesSetup@1100525000 : Record 5218;
    BEGIN
      TestStatusOpen(TRUE);
      IF (Status <> Status::Open) AND (Status <> Status::Rejected) THEN
        EXIT(FALSE);

      HumanResourcesSetup.GET;

      IF HumanResourcesSetup."Change Project Hours Allowed" THEN
        EXIT(TRUE);

      IF "Connection No." > 0 THEN
        MESSAGE(Text003, TABLECAPTION, "Line No.", HourAccProjHeader.TABLECAPTION);

      EXIT("Connection No." = 0);
    END;

    PROCEDURE GetHoursFromEmployeeAbsence@1100485001(HourAccounting@1100485000 : Record 11012038);
    VAR
      EmployeeAbsence@1100528400 : Record 5207;
      FirstDateOfWeek@1100528401 : Date;
      LastDateOfWeek@1100528402 : Date;
    BEGIN
      HourAccounting.TESTFIELD(Status, HourAccounting.Status::Open);

      FirstDateOfWeek := DWY2DATE(1, HourAccounting.Week, HourAccounting.Year);
      LastDateOfWeek := DWY2DATE(7, HourAccounting.Week, HourAccounting.Year);

      EmployeeAbsence.SETCURRENTKEY("Employee No.", "From Date");
      EmployeeAbsence.SETRANGE("Employee No.", HourAccounting."Employee No.");
      EmployeeAbsence.SETFILTER(EmployeeAbsence."From Date", '<=%1', LastDateOfWeek);
      EmployeeAbsence.SETFILTER(EmployeeAbsence."To Date", '>=%1', FirstDateOfWeek);

      IF EmployeeAbsence.FINDSET THEN
        REPEAT
          GetHoursFromEmployeeAbsenceEntry(HourAccounting, EmployeeAbsence);
        UNTIL EmployeeAbsence.NEXT = 0;
    END;

    LOCAL PROCEDURE GetHoursFromEmployeeAbsenceEntry@1100528407(HourAccounting@1100528402 : Record 11012038;EmployeeAbsence@1100528400 : Record 5207);
    VAR
      WeekDay@1100528401 : Integer;
    BEGIN
      EmployeeAbsence.TESTFIELD("From Date");
      EmployeeAbsence.TESTFIELD("To Date");
      IF EmployeeAbsence."From Time" = 0T THEN
        EmployeeAbsence.TESTFIELD("Until Time", 0T);
      IF EmployeeAbsence."From Time" > 0T THEN
        EmployeeAbsence.TESTFIELD("Until Time");

      FOR WeekDay := 1 TO 7 DO BEGIN
        GetHoursFromEmployeeAbsenceEntryForWeekDay(HourAccounting, EmployeeAbsence, WeekDay);
      END;
    END;

    LOCAL PROCEDURE GetHoursFromEmployeeAbsenceEntryForWeekDay@1100528413(HourAccounting@1100528403 : Record 11012038;EmployeeAbsence@1100528400 : Record 5207;WeekDay@1100528402 : Integer);
    VAR
      HourAccountingLine@1100528404 : Record 11012039;
      CurrentDate@1100528401 : Date;
      Hours@1100528405 : Decimal;
    BEGIN
      CurrentDate := DWY2DATE(WeekDay, HourAccounting.Week, HourAccounting.Year);
      IF CurrentDate < EmployeeAbsence."From Date" THEN
        EXIT;
      IF CurrentDate > EmployeeAbsence."To Date" THEN
        EXIT;

      Hours := CalcEmployeeAbsenceHours(EmployeeAbsence, CurrentDate, WeekDay);
      Hours := ROUND(Hours,0.001);
      IF Hours = 0 THEN
        EXIT;

      HourAccountingLine.INIT;
      HourAccountingLine.Year := HourAccounting.Year;
      HourAccountingLine.Week := HourAccounting.Week;
      HourAccountingLine.VALIDATE("Employee No.", HourAccounting."Employee No.");
      HourAccountingLine.VALIDATE(Type, HourAccountingLine.Type::Indirect);
      HourAccountingLine.VALIDATE("Cost Code", EmployeeAbsence."Cost Code");
      IF GetHourAccountingLine(HourAccountingLine) THEN BEGIN
        HourAccountingLine.AddHoursToWeekDay(WeekDay, Hours);
        HourAccountingLine.MODIFY(TRUE);
      END ELSE BEGIN
        HourAccountingLine.AddHoursToWeekDay(WeekDay, Hours);
        HourAccountingLine."Line No." := HourAccountingLine.GetNextFreeLineNo;
        HourAccountingLine.INSERT(TRUE);
      END;
    END;

    PROCEDURE CalcWorkingHours@1100528442(WorkOrder@1100528400 : Record 11229279;EmployeeNo@1100528401 : Code[20];CurrentDate@1100528404 : Date;WeekDay@1100528403 : Integer) ActualWorkingHours : Decimal;
    VAR
      NormalWorkFrom@1100528410 : Time;
      NormalWorkUntil@1100528409 : Time;
      NormalPauseFrom@1100528408 : Time;
      NormalPauseUntil@1100528407 : Time;
      ActualWorkingFromTime@1100528406 : Time;
      ActualWorkingUntilTime@1100528405 : Time;
      WorkOrderStartingTime@1100528411 : Time;
      WorkOrderEndingTime@1100528412 : Time;
      WorkOrderStartingDate@1100528414 : Date;
      WorkOrderEndingDate@1100528413 : Date;
      NormalHours@1100528402 : Decimal;
    BEGIN
      GetNormalEmployeeWorkingTimeForWeekDay(
        EmployeeNo, TRUE, CurrentDate, WeekDay, NormalHours, NormalWorkFrom,
        NormalWorkUntil, NormalPauseFrom, NormalPauseUntil);
      IF NormalHours = 0 THEN
        EXIT; //Only calculate hours for days on which the employee normally works.

      WorkOrderStartingTime := DateTime2Time(WorkOrder."Starting Date/Time");
      WorkOrderStartingDate := DT2DATE(WorkOrder."Starting Date/Time");
      IF (WorkOrderStartingTime > 0T) AND
         (WorkOrderStartingTime <> NormalWorkFrom) AND
         (WorkOrderStartingDate = CurrentDate)
      THEN
        ActualWorkingFromTime := WorkOrderStartingTime;

      WorkOrderEndingTime := DateTime2Time(WorkOrder."Ending Date/Time");
      WorkOrderEndingDate := DT2DATE(WorkOrder."Ending Date/Time");
      IF (WorkOrderEndingTime > 0T) AND
         (WorkOrderEndingTime <> NormalWorkUntil) AND
         (WorkOrderEndingDate = CurrentDate)
      THEN
        ActualWorkingUntilTime := WorkOrderEndingTime;

      ActualWorkingHours := CalcActualWorkingHours(
        NormalHours, NormalWorkFrom, NormalWorkUntil, NormalPauseFrom, NormalPauseUntil,
        ActualWorkingFromTime, ActualWorkingUntilTime, TRUE);
    END;

    LOCAL PROCEDURE DateTime2Time@1100528412(DateTime@1100528400 : DateTime) Time : Time;
    BEGIN
      IF CREATEDATETIME(DT2DATE(DateTime), 0T) = DateTime THEN
        Time:= 0T // 00:00T is considered to be 0T (undefined).
      ELSE
        Time:= DT2TIME(DateTime);
    END;

    PROCEDURE CalcEmployeeAbsenceHours@1100528408(EmployeeAbsence@1100528400 : Record 5207;CurrentDate@1100528401 : Date;WeekDay@1100528402 : Integer) AbsenceHours : Decimal;
    VAR
      NormalWorkFrom@1100528406 : Time;
      NormalWorkUntil@1100528407 : Time;
      NormalPauseFrom@1100528408 : Time;
      NormalPauseUntil@1100528409 : Time;
      AbsenceFromTime@1100528403 : Time;
      AbsenceUntilTime@1100528411 : Time;
      NormalHours@1100528405 : Decimal;
    BEGIN
      GetNormalEmployeeWorkingTimeForWeekDay(
        EmployeeAbsence."Employee No.", NOT EmployeeAbsence."Calendar Entry", CurrentDate,
        WeekDay, NormalHours, NormalWorkFrom, NormalWorkUntil, NormalPauseFrom, NormalPauseUntil);

      IF (EmployeeAbsence."From Time" > NormalWorkFrom) AND
         (EmployeeAbsence."From Date" = CurrentDate)
      THEN
        AbsenceFromTime := EmployeeAbsence."From Time";

      IF (EmployeeAbsence."Until Time" > 0T) AND
         (EmployeeAbsence."Until Time" < NormalWorkUntil) AND
         (EmployeeAbsence."To Date" = CurrentDate)
      THEN
        AbsenceUntilTime := EmployeeAbsence."Until Time";

      AbsenceHours := CalcActualWorkingHours(
        NormalHours, NormalWorkFrom, NormalWorkUntil, NormalPauseFrom, NormalPauseUntil,
        AbsenceFromTime, AbsenceUntilTime, FALSE);
    END;

    PROCEDURE CalcActualWorkingHours@1100528418(NormalHours@1100528400 : Decimal;NormalWorkFrom@1100528401 : Time;NormalWorkUntil@1100528402 : Time;NormalPauseFrom@1100528405 : Time;NormalPauseUntil@1100528406 : Time;ActualWorkingFromTime@1100528403 : Time;ActualWorkingUntilTime@1100528404 : Time;AllowMoreThanNormalHours@1100528407 : Boolean) ActualWorkingHours : Decimal;
    BEGIN
      IF (NormalPauseFrom > 0T) AND
         (NormalPauseUntil > 0T)
      THEN
        ActualWorkingHours := CalcActualWorkingHoursForKnownPause(
          NormalHours, NormalWorkFrom, NormalWorkUntil, NormalPauseFrom, NormalPauseUntil,
          ActualWorkingFromTime, ActualWorkingUntilTime, AllowMoreThanNormalHours)
      ELSE
        ActualWorkingHours := CalcActualWorkingHoursForUnknownPause(
          NormalHours, NormalWorkFrom, NormalWorkUntil, ActualWorkingFromTime, ActualWorkingUntilTime,
          AllowMoreThanNormalHours);
    END;

    PROCEDURE GetNormalEmployeeWorkingTimeForWeekDay@1100528415(EmployeeNo@1100528407 : Code[20];SkipNonWorkingDay@1100528418 : Boolean;CurrentDate@1100528406 : Date;WeekDay@1100528405 : Integer;VAR NormalHours@1100528404 : Decimal;VAR NormalWorkFrom@1100528400 : Time;VAR NormalWorkUntil@1100528401 : Time;VAR NormalPauseFrom@1100528402 : Time;VAR NormalPauseUntil@1100528403 : Time);
    VAR
      EmployeeTimeTable@1100528409 : Record 11012923;
      HumanResourcesSetup@1100528408 : Record 5218;
      CompanyInformation@1100528410 : Record 79;
      BaseCalendar@1100528411 : Record 11072014;
      CalendarManagement@1100528412 : Codeunit 7600;
      Description@1100528413 : Text;
      WorkDay@1100528414 : Boolean;
    BEGIN
      NormalHours := 0;
      NormalWorkFrom := 0T;
      NormalWorkUntil := 0T;
      NormalPauseFrom := 0T;
      NormalPauseUntil := 0T;

      WorkDay := TRUE;
      IF CompanyInformation.GET THEN;
      IF BaseCalendar.GET(CompanyInformation."Base Calendar Code") THEN
        WorkDay := NOT CalendarManagement.CheckDateStatus(
          CompanyInformation."Base Calendar Code", CurrentDate, Description);
      IF NOT WorkDay AND SkipNonWorkingDay THEN
        EXIT;

      HumanResourcesSetup.GET;

      EmployeeTimeTable.SETRANGE("Employee No.", EmployeeNo);
      EmployeeTimeTable.SETFILTER("Effective Date", '<%1', CurrentDate);
      IF EmployeeTimeTable.FINDLAST AND NOT HumanResourcesSetup."Absence Hours Ignore Work Day" THEN
        EmployeeTimeTable.GetWorkingTimeForWeekDay(
          WeekDay, NormalHours, NormalWorkFrom, NormalWorkUntil, NormalPauseFrom, NormalPauseUntil)
      ELSE BEGIN
        IF BaseCalendar.Code <> '' THEN
          BaseCalendar.GetWorkingTimeForWeekDay(
            WeekDay, NormalHours, NormalWorkFrom, NormalWorkUntil, NormalPauseFrom, NormalPauseUntil);
        IF NormalHours = 0 THEN BEGIN
          HumanResourcesSetup.TESTFIELD("Norm Hours");
          NormalHours := HumanResourcesSetup."Norm Hours";
          NormalWorkFrom := HumanResourcesSetup."Starting Time";
          NormalWorkUntil := HumanResourcesSetup."Finishing Time";
        END;
      END;
    END;

    LOCAL PROCEDURE CalcActualWorkingHoursForKnownPause@1100528430(NormalHours@1100528400 : Decimal;NormalWorkFrom@1100528401 : Time;NormalWorkUntil@1100528402 : Time;NormalPauseFrom@1100528405 : Time;NormalPauseUntil@1100528406 : Time;ActualWorkingFromTime@1100528403 : Time;ActualWorkingUntilTime@1100528404 : Time;AllowMoreThanNormalHours@1100528411 : Boolean) ActualWorkingHours : Decimal;
    VAR
      StartTime@1100528407 : Time;
      EndTime@1100528408 : Time;
      HoursBeforePause@1100528409 : Decimal;
      HoursAfterPause@1100528410 : Decimal;
    BEGIN
      StartTime := DetermineStartTime(NormalWorkFrom, ActualWorkingFromTime, AllowMoreThanNormalHours);
      EndTime := DetermineEndTime(NormalWorkUntil, ActualWorkingUntilTime, AllowMoreThanNormalHours);
      IF (StartTime = 0T) OR
         (EndTime = 0T)
      THEN BEGIN
        ActualWorkingHours := NormalHours;
        EXIT;
      END;

      IF StartTime < NormalPauseFrom THEN BEGIN
        IF EndTime > NormalPauseFrom THEN
          HoursBeforePause := (NormalPauseFrom - StartTime)/3600000
        ELSE
          HoursBeforePause := (EndTime - StartTime)/3600000;
        IF HoursBeforePause < 0 THEN
          HoursBeforePause := 0;
      END;

      IF EndTime > NormalPauseUntil THEN BEGIN
        IF StartTime < NormalPauseUntil THEN
          HoursAfterPause := (EndTime - NormalPauseUntil)/3600000
        ELSE
          HoursAfterPause := (EndTime - StartTime)/3600000;
        IF HoursAfterPause < 0 THEN
          HoursAfterPause := 0;
      END;

      ActualWorkingHours := HoursBeforePause + HoursAfterPause;
    END;

    LOCAL PROCEDURE DetermineStartTime@1100528411(NormalWorkFrom@1100528402 : Time;ActualWorkingFromTime@1100528401 : Time;AllowMoreThanNormalHours@1100528400 : Boolean) StartTime : Time;
    BEGIN
      IF ActualWorkingFromTime = 0T THEN BEGIN
        StartTime := NormalWorkFrom;
        EXIT;
      END;

      IF ActualWorkingFromTime > NormalWorkFrom THEN
        StartTime := ActualWorkingFromTime
      ELSE
        IF AllowMoreThanNormalHours THEN
          StartTime := ActualWorkingFromTime
        ELSE
          StartTime := NormalWorkFrom;
    END;

    LOCAL PROCEDURE DetermineEndTime@1100528417(NormalWorkUntil@1100528402 : Time;ActualWorkingUntilTime@1100528401 : Time;AllowMoreThanNormalHours@1100528400 : Boolean) EndTime : Time;
    BEGIN
      IF ActualWorkingUntilTime = 0T THEN BEGIN
        EndTime := NormalWorkUntil;
        EXIT;
      END;

      IF ActualWorkingUntilTime < NormalWorkUntil THEN
        EndTime := ActualWorkingUntilTime
      ELSE
        IF AllowMoreThanNormalHours THEN
          EndTime := ActualWorkingUntilTime
        ELSE
          EndTime := NormalWorkUntil;
    END;

    LOCAL PROCEDURE CalcActualWorkingHoursForUnknownPause@1100528431(NormalHours@1100528400 : Decimal;NormalWorkFrom@1100528401 : Time;NormalWorkUntil@1100528402 : Time;ActualWorkingFromTime@1100528403 : Time;ActualWorkingUntilTime@1100528404 : Time;AllowMoreThanNormalHours@1100528408 : Boolean) ActualWorkingHours : Decimal;
    VAR
      PauseFrom@1100528405 : Time;
      PauseUntil@1100528407 : Time;
      PauseDuration@1100528406 : Decimal;
    BEGIN
      //Assumption: Pause starts at 12:00 when it is not specified.
      PauseFrom := DT2TIME(CREATEDATETIME(TODAY, 0T)) + 12 * 3600000;
      IF (NormalHours > 0) AND
         (NormalWorkFrom > 0T) AND
         (NormalWorkUntil > 0T)
      THEN
        PauseDuration := NormalWorkUntil - NormalWorkFrom - (NormalHours * 3600000);

      IF PauseDuration > 0 THEN
        PauseUntil := PauseFrom + PauseDuration
      ELSE
        PauseUntil := PauseFrom;

      ActualWorkingHours := CalcActualWorkingHoursForKnownPause(
        NormalHours, NormalWorkFrom, NormalWorkUntil, PauseFrom, PauseUntil,
        ActualWorkingFromTime, ActualWorkingUntilTime, AllowMoreThanNormalHours);
    END;

    PROCEDURE AddHoursToWeekDay@1100528425(WeekDay@1100528400 : Integer;Hours@1100528401 : Decimal);
    BEGIN
      CASE WeekDay OF
        1:
          VALIDATE(Monday, Monday + Hours);
        2:
          VALIDATE(Tuesday, Tuesday + Hours);
        3:
          VALIDATE(Wednesday, Wednesday + Hours);
        4:
          VALIDATE(Thursday, Thursday + Hours);
        5:
          VALIDATE(Friday, Friday + Hours);
        6:
          VALIDATE(Saturday, Saturday + Hours);
        7:
          VALIDATE(Sunday, Sunday + Hours);
      END;
    END;

    PROCEDURE GetHourAccountingLine@1100485002(VAR vHourAccountingLineRec@1100485000 : Record 11012039) : Boolean;
    VAR
      iHourAccountingLineRec@1100485001 : Record 11012039;
    BEGIN
      WITH iHourAccountingLineRec DO BEGIN
        RESET;
        SETRANGE(Year,vHourAccountingLineRec.Year);
        SETRANGE(Week,vHourAccountingLineRec.Week);
        SETRANGE("Employee No.",vHourAccountingLineRec."Employee No.");
        SETRANGE("Project No.",vHourAccountingLineRec."Project No.");
        SETRANGE(Element,vHourAccountingLineRec.Element);
        SETRANGE("Cost Object",vHourAccountingLineRec."Cost Object");
        SETRANGE("Wage Component",vHourAccountingLineRec."Wage Component");
        SETRANGE("Service Order No.",vHourAccountingLineRec."Service Order No.");
        SETRANGE("Service Location No.",vHourAccountingLineRec."Service Location No.");
        SETRANGE("Service Contract No.",vHourAccountingLineRec."Service Contract No.");
        SETRANGE("Cost Code",vHourAccountingLineRec."Cost Code");
        SETRANGE(Type,vHourAccountingLineRec.Type);
        IF FINDFIRST THEN BEGIN
          vHourAccountingLineRec := iHourAccountingLineRec;
          EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetHoursFromPostedHours@1100485003(iHourAccountingRec@1100485004 : Record 11012038);
    VAR
      PostedHourHeaderRec@1100485000 : Record 11012084;
      PostedHourLineRec@1100485001 : Record 11012085;
      HourAccountingLineRec@1100485002 : Record 11012039;
      PostedHourHeaderFrm@1100485005 : Page 11012272;
      NextLineNo@1100485003 : Integer;
    BEGIN
      iHourAccountingRec.TESTFIELD(Status, iHourAccountingRec.Status::Open);

      PostedHourHeaderRec.SETCURRENTKEY("Employee No.");
      PostedHourHeaderRec.SETRANGE("Employee No.",iHourAccountingRec."Employee No.");
      IF PostedHourHeaderRec.FINDLAST THEN;
      PostedHourHeaderFrm.SETTABLEVIEW(PostedHourHeaderRec);
      PostedHourHeaderFrm.SETRECORD(PostedHourHeaderRec);
      PostedHourHeaderFrm.LOOKUPMODE := TRUE;
      IF NOT (PostedHourHeaderFrm.RUNMODAL = ACTION::LookupOK) THEN
        EXIT;

      PostedHourHeaderFrm.GETRECORD(PostedHourHeaderRec);

      PostedHourLineRec.SETRANGE(Year,PostedHourHeaderRec.Year);
      PostedHourLineRec.SETRANGE(Week,PostedHourHeaderRec.Week);
      PostedHourLineRec.SETRANGE("Employee No.",PostedHourHeaderRec."Employee No.");
      PostedHourLineRec.SETFILTER("Component Type", '<>%1', PostedHourLineRec."Component Type"::Days);
      IF PostedHourLineRec.FINDSET THEN BEGIN
        HourAccountingLineRec.SETRANGE(Year,iHourAccountingRec.Year);
        HourAccountingLineRec.SETRANGE(Week,iHourAccountingRec.Week);
        HourAccountingLineRec.SETRANGE("Employee No.",iHourAccountingRec."Employee No.");
        IF HourAccountingLineRec.FINDLAST THEN
          NextLineNo := HourAccountingLineRec."Line No."
        ELSE
          NextLineNo := 0;
        REPEAT
          HourAccountingLineRec.INIT;
          HourAccountingLineRec.TRANSFERFIELDS(PostedHourLineRec);
          HourAccountingLineRec.Year := iHourAccountingRec.Year;
          HourAccountingLineRec.Week := iHourAccountingRec.Week;
          NextLineNo += 10000;
          IF HourAccountingLineRec.Type = 3 THEN
            HourAccountingLineRec.Type := HourAccountingLineRec.Type::Indirect;
          HourAccountingLineRec."Line No." := NextLineNo;
          HourAccountingLineRec.CALCFIELDS("Component Type");
          //>>ITERO.GH 141010
          HourAccountingLineRec.VALIDATE("Wage Component" , PostedHourLineRec."Wage Component");
          //<<ITero.GH 141010
          IF HourAccountingLineRec."Component Type" = "Component Type"::Expenses THEN
            HourAccountingLineRec."Posting Date" := iHourAccountingRec."Posting Date";
          HourAccountingLineRec.CalcRateAndAmount;
          HourAccountingLineRec.INSERT(TRUE);
        UNTIL PostedHourLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE FillMainProject@1100485004();
    BEGIN
      IF "Project No." <> '' THEN BEGIN
        ProjRec.CHANGECOMPANY("Receiving Company");
        ProjRec.GET("Project No.");
        "Main Project No." := ProjRec."Main Project";
      END ELSE
        "Main Project No." := '';
    END;

    PROCEDURE GetPlantDefaultsFromPlantSetup@1100485025();
    VAR
      RateCode@1100525000 : Code[10];
    BEGIN
      //* Be sure that the company for the plant tables is set before calling this function
      IF ("Plant Rate Code" <> '') AND ("Cost Component Plant" <> '') THEN //Call C001222
        EXIT;

      PlantSetupRec.GET;
      //DP00485.so
      //IF ("Plant Rate Code" = '') AND PlantSetupRec."Rate Codes" AND (PlantSetupRec."Default Rate Code Rental" <> '') THEN BEGIN
      //  IF PlantRateCodeRec.CheckPlantRateCode(
      //    "Plant Location", PlantSetupRec."Default Rate Code Rental", FALSE, "Receiving Company")
      //  THEN
      //    VALIDATE("Plant Rate Code", PlantSetupRec."Default Rate Code Rental");
      //END;
      //DP00485.eo
      //DP00485.sn C009408
      IF ("Plant Rate Code" = '') AND PlantSetupRec."Rate Codes" THEN BEGIN
        RateCode := PlantRateCodeRec.GetDefaultRateCodeRental("Plant Location",  FALSE, "Receiving Company");
        IF (RateCode <> '') AND PlantRateCodeRec.CheckPlantRateCode("Plant Location", RateCode, FALSE, "Receiving Company", 0) THEN
          VALIDATE("Plant Rate Code", RateCode);
      END;
      //DP00485.en
      IF ("Cost Component Plant" = '') AND (PlantSetupRec."Cost Component Hour Costs" <> '') THEN
        VALIDATE("Cost Component Plant", PlantSetupRec."Cost Component Hour Costs");
    END;

    PROCEDURE InsertPlantHourRevLine@1100485092() : Integer;
    VAR
      lvPlantHourRevHeadRec@1100485000 : Record 11012573;
      lvPlantHourRevLineRec@1100485002 : Record 11012574;
      lvPlantHourRevLineRec2@1100525000 : Record 11012574;
    BEGIN
      IF (Type <> Type::Plant) OR ("Plant Location" = '') THEN
        EXIT(0);

      IF "Receiving Company" <> '' THEN BEGIN
        lvPlantHourRevHeadRec.CHANGECOMPANY("Receiving Company");
        lvPlantHourRevLineRec.CHANGECOMPANY("Receiving Company");
        lvPlantHourRevLineRec2.CHANGECOMPANY("Receiving Company");
      END;

      //Create Plant Hour Revenue Header if necessary (if not already exist)
      IF NOT lvPlantHourRevHeadRec.GET(Year, Week, "Plant Type", "Plant No.") THEN BEGIN
        lvPlantHourRevHeadRec.INIT;
        lvPlantHourRevHeadRec.Year := Year;
        lvPlantHourRevHeadRec.Week := Week;
        lvPlantHourRevHeadRec."Plant Type" := "Plant Type";
        lvPlantHourRevHeadRec."Plant No." := "Plant No.";
        lvPlantHourRevHeadRec.INSERT(FALSE);
      END;

      //Create Plant Hour Revenue Line
      lvPlantHourRevLineRec.INIT;
      TransferHoursToPlantHoursRev(lvPlantHourRevLineRec);
      lvPlantHourRevLineRec2.SETRANGE(Year, Year);
      lvPlantHourRevLineRec2.SETRANGE(Week, Week);
      lvPlantHourRevLineRec2.SETRANGE("Plant Type", "Plant Type");
      lvPlantHourRevLineRec2.SETRANGE("Plant No.", "Plant No.");
      IF lvPlantHourRevLineRec2.FINDLAST THEN
        lvPlantHourRevLineRec."Line No." := lvPlantHourRevLineRec2."Line No." + 10000
      ELSE
        lvPlantHourRevLineRec."Line No." := 10000;
      lvPlantHourRevLineRec.INSERT(FALSE);


      EXIT(lvPlantHourRevLineRec."Line No.");
    END;

    PROCEDURE TransferHoursToPlantHoursRev@1100485023(VAR PlantHourRevLine@1100485001 : Record 11012574);
    BEGIN
      CALCFIELDS("Component Type");
      PlantHourRevLine.Year := Year;
      PlantHourRevLine.Week := Week;
      PlantHourRevLine."Plant Type" := "Plant Type";
      PlantHourRevLine."Plant No." := "Plant No.";
      PlantHourRevLine."Plant Location" := "Plant Location";
      PlantHourRevLine."Employee No." := "Employee No.";
      PlantHourRevLine.Element := Element;
      IF "Component Type" <> "Component Type"::Expenses THEN BEGIN
        PlantHourRevLine.Type := PlantHourRevLine.Type::Hours;
        PlantHourRevLine."Rate Code" := "Plant Rate Code";
        PlantHourRevLine."Wage Component" := "Wage Component";  //DP00812
        PlantHourRevLine."Cost Object" := '';
        PlantHourRevLine.Quantity := 0;
        PlantHourRevLine."Unit Price" := 0;
        PlantHourRevLine.Amount := 0;
      END ELSE BEGIN
        PlantHourRevLine.Type := PlantHourRevLine.Type::Expenses;
        PlantHourRevLine."Rate Code" := '';
        PlantHourRevLine."Cost Object" := "Cost Object";
        PlantHourRevLine.Quantity := Quantity;
        PlantHourRevLine."Unit Price" := 0;
        //PlantHourRevLine.Amount := "Amount (LCY)";
        PlantHourRevLine.Amount := ExchangeToLCYInPlantCompany("Amount (LCY)", FALSE);
        IF Quantity <> 0 THEN
          PlantHourRevLine.VALIDATE(Amount);  //* Calculate 'Unit Price'
      END;
      PlantHourRevLine.Monday := Monday;
      PlantHourRevLine.Tuesday := Tuesday;
      PlantHourRevLine.Wednesday := Wednesday;
      PlantHourRevLine.Thursday := Thursday;
      PlantHourRevLine.Friday := Friday;
      PlantHourRevLine.Saturday := Saturday;
      PlantHourRevLine.Sunday := Sunday;
      PlantHourRevLine."Total Line" := "Total Line";
      PlantHourRevLine.Comment := Comment;
      PlantHourRevLine.Origin := PlantHourRevLine.Origin::HourAcc;
      PlantHourRevLine."Employee Company" := DetermineEmplCompanyForPlantHr("Supplying Company", "Receiving Company");
    END;

    PROCEDURE InsertPlantHourCostLine@1100485026() : Integer;
    VAR
      lvPlantHourCostHeadRec@1100485000 : Record 11012577;
      lvPlantHourCostLineRec@1100485002 : Record 11012578;
      lvPlantHourCostLineRec2@1100485003 : Record 11012578;
      lvSupplyingCompany@1100525000 : Text[30];
    BEGIN
      CALCFIELDS("Component Type");
      //IF (Type <> Type::Plant) OR ("Component Type" <> "Component Type"::Hours) THEN  //*C-019484.o
      IF (Type <> Type::Plant) THEN  //*C-019484.n
        EXIT(0);

      IF "Receiving Company" <> '' THEN BEGIN
        lvPlantHourCostHeadRec.CHANGECOMPANY("Receiving Company");
        lvPlantHourCostLineRec.CHANGECOMPANY("Receiving Company");
        lvPlantHourCostLineRec2.CHANGECOMPANY("Receiving Company");
      END;
      lvSupplyingCompany := DetermineEmplCompanyForPlantHr("Supplying Company", "Receiving Company");

      //Create Plant Hour Cost Header if necessary (if not already exist)
      IF NOT lvPlantHourCostHeadRec.GET(Year, Week, lvSupplyingCompany, "Employee No.") THEN BEGIN
        lvPlantHourCostHeadRec.INIT;
        lvPlantHourCostHeadRec.Year := Year;
        lvPlantHourCostHeadRec.Week := Week;
        lvPlantHourCostHeadRec."Employee Company" := lvSupplyingCompany;
        lvPlantHourCostHeadRec."Employee No." := "Employee No.";
        lvPlantHourCostHeadRec.INSERT(FALSE);
      END;

      //Create Plant Hour Cost Line
      lvPlantHourCostLineRec.INIT;
      TransferHoursToPlantHoursCost(lvPlantHourCostLineRec, lvSupplyingCompany, TRUE);
      lvPlantHourCostLineRec2.SETRANGE(Year, Year);
      lvPlantHourCostLineRec2.SETRANGE(Week, Week);
      lvPlantHourCostLineRec2.SETRANGE("Employee Company",lvSupplyingCompany);
      lvPlantHourCostLineRec2.SETRANGE("Employee No.","Employee No.");
      IF lvPlantHourCostLineRec2.FINDLAST THEN
        lvPlantHourCostLineRec."Line No." := lvPlantHourCostLineRec2."Line No." + 10000
      ELSE
        lvPlantHourCostLineRec."Line No." := 10000;
      lvPlantHourCostLineRec.INSERT(FALSE);

      EXIT(lvPlantHourCostLineRec."Line No.");
    END;

    PROCEDURE TransferHoursToPlantHoursCost@1100485027(VAR PlantHourCostLine@1100485001 : Record 11012578;ISupplyingCompany@1100525000 : Text[30];ExchangeRateCurrencycyAllowed@1100525001 : Boolean);
    BEGIN
      PlantHourCostLine.Year := Year;
      PlantHourCostLine.Week := Week;
      PlantHourCostLine."Employee Company" := ISupplyingCompany;
      PlantHourCostLine."Employee No." := "Employee No.";
      PlantHourCostLine."Plant Type" := "Plant Type";
      PlantHourCostLine."Plant No." := "Plant No.";
      PlantHourCostLine."Department Code" := "Department Code";
      PlantHourCostLine."Cost Component" := "Cost Component Plant";
      IF "Component Type" <> "Component Type"::Expenses THEN BEGIN //*C-019484.n
        PlantHourCostLine.Type := PlantHourCostLine.Type::Hours;   //*C-019484.n
        PlantHourCostLine.Monday := Monday;
        PlantHourCostLine.Tuesday := Tuesday;
        PlantHourCostLine.Wednesday := Wednesday;
        PlantHourCostLine.Thursday := Thursday;
        PlantHourCostLine.Friday := Friday;
        PlantHourCostLine.Saturday := Saturday;
        PlantHourCostLine.Sunday := Sunday;
        PlantHourCostLine."Total Line" := "Total Line";
        IF ExchangeRateCurrencycyAllowed THEN
          PlantHourCostLine."Unit Cost" := ExchangeToLCYInPlantCompany("Unit Cost (LCY)", TRUE)  //db, 06-12-16
        ELSE
          PlantHourCostLine."Unit Cost" := "Unit Cost (LCY)";
        PlantHourCostLine.Quantity := 0;    //*C-019484.n
        PlantHourCostLine."Unit Rate" := 0; //*C-019484.n
        PlantHourCostLine.Amount := 0;      //*C-019484.n
      //*C-019484.sn
      END ELSE BEGIN
        PlantHourCostLine.Type := PlantHourCostLine.Type::Expenses;
        PlantHourCostLine."Cost Object" := "Cost Object";
        PlantHourCostLine."Wage Component Expenses" := "Wage Component";
        PlantHourCostLine.Quantity := Quantity;
        PlantHourCostLine."Unit Rate" := 0;
        IF ExchangeRateCurrencycyAllowed THEN
          PlantHourCostLine.Amount := ExchangeToLCYInPlantCompany("Amount (LCY)", FALSE)
        ELSE
          PlantHourCostLine.Amount := "Amount (LCY)";
        IF Quantity <> 0 THEN
          PlantHourCostLine.VALIDATE(Amount);  //* Calculate 'Unit Rate'
        PlantHourCostLine."Posting Date (Exp.)" := "Posting Date";  //C015176.n
      END;
      //*C-019484.en
      PlantHourCostLine.Comment := Comment;
      PlantHourCostLine.Origin := PlantHourCostLine.Origin::HourAcc;
      PlantHourCostLine."Department Code" := "Department Code";
    END;

    LOCAL PROCEDURE ExchangeToLCYInPlantCompany@1100525009(Amt@1100525001 : Decimal;IsUnitAmount@1100525004 : Boolean) : Decimal;
    VAR
      GeneralLedgerSetup@1100525000 : Record 98;
      Currency@1100525005 : Record 4;
      CurrencyExchangeRate@1100525006 : Record 330;
      LCYCodeCurrCompany@1100525002 : Code[10];
      LCYCodePlantCompany@1100525003 : Code[10];
      CurrencyFactor@1100525007 : Decimal;
      RoundingPrecision@1100525008 : Decimal;
    BEGIN
      IF Amt = 0 THEN
        EXIT(Amt);
      IF ("Receiving Company" = '') OR ("Receiving Company" = COMPANYNAME) THEN
        EXIT(Amt);
      LCYCodeCurrCompany := GeneralLedgerSetup.GetLCYCode();
      GeneralLedgerSetup.CHANGECOMPANY("Receiving Company");
      LCYCodePlantCompany := GeneralLedgerSetup.GetLCYCode();
      IF (LCYCodeCurrCompany = '') OR (LCYCodePlantCompany = '') OR (LCYCodeCurrCompany = LCYCodePlantCompany) THEN
        EXIT(Amt);

      Currency.GET(LCYCodePlantCompany);
      CurrencyFactor := CurrencyExchangeRate.ExchangeRate(0, '', "Posting Date", LCYCodePlantCompany, FALSE);
      IF IsUnitAmount THEN
        RoundingPrecision := Currency."Unit-Amount Rounding Precision"
      ELSE
        RoundingPrecision := Currency."Amount Rounding Precision";

      EXIT(ROUND(
        CurrencyExchangeRate.ExchangeAmtLCYToFCY(
          0, '', "Posting Date", LCYCodePlantCompany, Amt, CurrencyFactor, FALSE),
        RoundingPrecision));
    END;

    PROCEDURE CreateTempPlantHourCostLine@1100525003(VAR lvTempPlantHoursCostRec@1100525001 : TEMPORARY Record 11012578) : Integer;
    VAR
      lvSupplyingCompany@1100525000 : Text[30];
    BEGIN
      CALCFIELDS("Component Type");
      //IF (Type <> Type::Plant) OR ("Component Type" <> "Component Type"::Hours) THEN  //*C-019484.o
      IF (Type <> Type::Plant) THEN  //*C-019484.n
        EXIT(0);

      lvSupplyingCompany := '';

      //Create Plant Hour Cost Line
      lvTempPlantHoursCostRec.INIT;
      TransferHoursToPlantHoursCost(lvTempPlantHoursCostRec, lvSupplyingCompany, FALSE);
                     //Exchange rate (if needed) will be done when IC-Entry is processed
      lvTempPlantHoursCostRec."Line No." := 10000;
      lvTempPlantHoursCostRec.INSERT(FALSE);

      EXIT(lvTempPlantHoursCostRec."Line No.");
    END;

    PROCEDURE DetermineEmplCompanyForPlantHr@1100525000(IEmplComp@1100525000 : Text[30];IPlantComp@1100525001 : Text[30]) : Text[30];
    VAR
      lvEmplComp@1100525003 : Text[30];
      lvPlantComp@1100525002 : Text[30];
    BEGIN
      IF (IEmplComp <> '') THEN
        lvEmplComp := IEmplComp
      ELSE
        lvEmplComp := COMPANYNAME;
      IF (IPlantComp <> '') THEN
        lvPlantComp := IPlantComp
      ELSE
        lvPlantComp := COMPANYNAME;

      IF (lvEmplComp <> lvPlantComp) THEN
        EXIT(lvEmplComp);

      EXIT(''); //* Empty, in plant hours the employee company may only be filled if unequal to the plant company
    END;

    PROCEDURE FromTimeToDuration@1100485008();
    VAR
      lvDuration@1100485000 : Duration;
    BEGIN
      IF ("Time From" <> 0T) AND ("Time Until" <> 0T) THEN BEGIN
        lvDuration := "Time Until" - "Time From";
        //IF "Time Until" < "Time From" THEN
        //  ERROR(Text006, FIELDCAPTION("Time From"), FIELDCAPTION("Time Until"));
        IF "Time Until" < "Time From" THEN
          lvDuration := (24 * 3600000) + lvDuration;  //* lvDuration is negative
        VALIDATE(Duration, lvDuration);
      END;
    END;

    PROCEDURE FromDurationToHours@1100485006(lDuration@1100485000 : Duration) Hours : Decimal;
    BEGIN
      Hours := lDuration / 3600000;  //* Duration in msec, so divide by 1000 * 60 * 60
      Hours := ROUND(Hours,0.001); //C036062
    END;

    PROCEDURE CheckTimeOverlap@1100485014();
    VAR
      HourAccLine@1100485000 : Record 11012039;
    BEGIN
      { Klopt niet kan over de dag heen  bv 22:00 tot 02:00. Wordt dan allemaal wel erg complex om overlap te testen
        Ging toch al niet altijd goed, als nieuwe periode een bestaande volledig overlapte dan kreeg je toch al
        geen melding.
        GJK/PS:
         Besloten om maar helemaal niet meer te testen want waarom zou dit niet mogen. Ook kan al een deel van de uren
         geboekt zijn daar wordt ook niet op getest. En het kan zelfs nodig zijn voor correcties (negatief aantal uren).

      HourAccLine.SETRANGE(Year, Year);
      HourAccLine.SETRANGE(Week, Week);
      HourAccLine.SETRANGE("Employee No.", "Employee No.");
      HourAccLine.SETFILTER("Line No.", '<>%1', "Line No.");
      HourAccLine.SETRANGE(Day, Day);
      HourAccLine.SETFILTER("Time From", '..%1', "Time From");
      HourAccLine.SETFILTER("Time Until", '>%1', "Time From");
      IF HourAccLine.FINDFIRST THEN
        ERROR(Text010);

      HourAccLine.SETFILTER("Time From", '<%1', "Time Until");
      HourAccLine.SETFILTER("Time Until", '%1..', "Time Until");
      IF HourAccLine.FINDFIRST THEN
        ERROR(Text010);
      }
    END;

    PROCEDURE CompTypeEditable@1100485007() : Boolean;
    BEGIN
      CALCFIELDS("Component Type");
      // SESB.I038 ASH 10.07.2013 >>
      // IF "Component Type" = "Component Type"::Expenses THEN BEGIN
      IF "Component Type" IN ["Component Type"::Expenses,"Component Type"::"Expense hours"] THEN BEGIN
      // SESB.I038 ASH 10.07.2013 <<
        IF CURRENTCOMPANY <> COMPANYNAME THEN
          PostingDateRec.CHANGECOMPANY(CURRENTCOMPANY);
        EXIT(NOT ( (PostingDateRec.GET(Year, Week)) AND (PostingDateRec."Posting Date" <> 0D)));
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE UpdateProjectHourLine@1100485009(UpdateAction@1210190001 : 'Insert,Modify,Delete,Rename');
    VAR
      HourProjLine@1210190002 : Record 11020225;
    BEGIN
      IF "Connection No." = 0 THEN
        EXIT;

      IF UpdateFromProjHourLine THEN
        EXIT;

      IF NOT LineIsEditable THEN
        ERROR('');

      CASE UpdateAction OF
        //UpdateAction::Insert: //No Action
        //* 30-08-2006 When this will ever happens, see dataport 11012425, possibily it should be delete there.
        UpdateAction::Modify:
          BEGIN
            HourProjLine.RESET;
            HourProjLine.SETCURRENTKEY("Connection No.");
            HourProjLine.SETRANGE("Connection No.", "Connection No.");
            IF HourProjLine.FINDFIRST THEN BEGIN
              IF ("Project No." = HourProjLine."Project No.") AND
                  ("Receiving Company" = HourProjLine."Receiving Company")
              THEN BEGIN
                HourProjLine.TRANSFERFIELDS(Rec,FALSE);
                HourProjLine.MODIFY;
              END ELSE BEGIN
                UpdateProjectHourLine(UpdateAction::Delete);
                //UpdateProjectHourLine(UpdateAction::Insert);
              END;
            END;
          END;
        UpdateAction::Delete:
          BEGIN
            HourProjLine.RESET;
            HourProjLine.SETCURRENTKEY("Connection No.");
            HourProjLine.SETRANGE("Connection No.", "Connection No.");
            IF HourProjLine.FINDFIRST THEN
              HourProjLine.DELETE;
            "Connection No." := 0;
            MODIFY;
          END;
        UpdateAction::Rename:
          BEGIN
            UpdateProjectHourLine(UpdateAction::Delete);
            //UpdateProjectHourLine(UpdateAction::Insert);
          END;
      END;
    END;

    PROCEDURE GetExecutionDate@1100485010() ReturnDate : Date;
    BEGIN
      ReturnDate := 0D;

      IF CURRENTCOMPANY <> COMPANYNAME THEN
        HourAccRec.CHANGECOMPANY(CURRENTCOMPANY);
      IF HourAccRec.GET(Year,Week,"Employee No.") THEN
        ReturnDate := HourAccRec."Posting Date";

      IF Monday <> 0 THEN ReturnDate := DWY2DATE(1,Week,Year);
      IF Tuesday <> 0 THEN ReturnDate := DWY2DATE(2,Week,Year);
      IF Wednesday <> 0 THEN ReturnDate := DWY2DATE(3,Week,Year);
      IF Thursday <> 0 THEN ReturnDate := DWY2DATE(4,Week,Year);
      IF Friday <> 0 THEN ReturnDate := DWY2DATE(5,Week,Year);
      IF Saturday <> 0 THEN ReturnDate := DWY2DATE(6,Week,Year);
      IF Sunday <> 0 THEN ReturnDate := DWY2DATE(7,Week,Year);
    END;

    PROCEDURE UpdateCostControlStatus@1100485013(lUpdateAction@1100485002 : 'Insert,Modify,Delete');
    VAR
      ActionType@1100528400 : 'Insert,Modify,Delete';
    BEGIN
      CASE lUpdateAction OF
        lUpdateAction::Insert, lUpdateAction::Delete:
          BEGIN
            IF ("Receiving Company" = '') AND ("Project No." <> '') THEN BEGIN
              ProjRec.CHANGECOMPANY("Receiving Company");
              IF ProjRec.GET("Project No.") THEN
                ProjRec.UpdateCostControlStatus(lUpdateAction, xRec."Cost Object", "Cost Object");
            END;
          END;
        lUpdateAction::Modify:
          BEGIN
            //Update xRec, handle as delete
            IF ((xRec."Receiving Company" <> "Receiving Company") OR (xRec."Project No." <> "Project No.")) AND
               ((xRec."Receiving Company" = '') AND (xRec."Project No." <> '')) THEN BEGIN
              ProjRec.CHANGECOMPANY(xRec."Receiving Company");
              IF ProjRec.GET(xRec."Project No.") THEN
                ProjRec.UpdateCostControlStatus(lUpdateAction::Delete, xRec."Cost Object", "Cost Object");
            END;

            //Update Rec
            IF ("Receiving Company" = '') AND ("Project No." <> '') THEN BEGIN
              ProjRec.CHANGECOMPANY("Receiving Company");
              IF "Project No." = xRec."Project No." THEN
                ActionType := ActionType::Modify
              ELSE
                ActionType := ActionType::Insert;
              IF ProjRec.GET("Project No.") THEN
                ProjRec.UpdateCostControlStatus(ActionType, xRec."Cost Object", "Cost Object");
            END;
          END;
      END;
    END;

    PROCEDURE TestStatusOpen@1100485011(lMessageOnly@1100485000 : Boolean);
    VAR
      lHourAccRec@1100485001 : Record 11012038;
    BEGIN
      IF CURRENTCOMPANY <> COMPANYNAME THEN
        HourAccRec.CHANGECOMPANY(CURRENTCOMPANY);
      IF NOT HourAccRec.GET(Year,Week,"Employee No.") THEN BEGIN
        CLEAR(HourAccRec);
        EXIT;
      END;

      IF (Status <> Status::Open) AND (Status <> Status::Rejected) THEN BEGIN

        IF lMessageOnly THEN BEGIN
          IF NOT (HourAccRec.Status = HourAccRec.Status::Open) THEN BEGIN
            lHourAccRec.Status := lHourAccRec.Status::Open;
            MESSAGE(Text002,
              HourAccRec.FIELDCAPTION(Status), lHourAccRec.Status, HourAccRec.TABLECAPTION,
              HourAccRec.FIELDCAPTION(Year), HourAccRec.Year, HourAccRec.FIELDCAPTION(Week), HourAccRec.Week,
              HourAccRec.FIELDCAPTION("Employee No."), HourAccRec."Employee No.");
          END;
        END ELSE
          HourAccRec.TESTFIELD(Status, HourAccRec.Status::Open);

      END;
    END;

    PROCEDURE DeleteSurcharge@1100485012();
    VAR
      HourLineSurcharge@1100485000 : Record 11020308;
    BEGIN
      //db, 12-06-07
      HourLineSurcharge.RESET;
      HourLineSurcharge.SETRANGE(Year, Year);
      HourLineSurcharge.SETRANGE(Week, Week);
      HourLineSurcharge.SETRANGE("Employee No.", "Employee No.");
      HourLineSurcharge.SETRANGE("Hour Line No.", "Line No.");
      HourLineSurcharge.DELETEALL;
    END;

    PROCEDURE GetLeaveTypeTotal@1100485016() : Decimal;
    VAR
      LeaveLedgEntry@1100485001 : Record 11020235;
    BEGIN
      //**4PS
      IF "Leave Type" <> '' THEN
      BEGIN
        LeaveLedgEntry.RESET;
        LeaveLedgEntry.SETCURRENTKEY("Employee No.","Leave Type");
        LeaveLedgEntry.SETRANGE("Employee No.", "Employee No.");
        LeaveLedgEntry.SETRANGE("Leave Type", "Leave Type");
        LeaveLedgEntry.CALCSUMS("No. of Hours");
        EXIT(LeaveLedgEntry."No. of Hours");
      END;
      EXIT(0);
    END;

    PROCEDURE GetCostObjectTotal@1100528701() Result : Decimal;
    VAR
      HourAccountingLine@1100528700 : Record 11012039;
      PostedHourLine@1100528701 : Record 11012085;
    BEGIN
      Result := 0;

      HourAccountingLine.SETRANGE(Year, Year);
      HourAccountingLine.SETRANGE(Week, Week);
      HourAccountingLine.SETRANGE("Employee No.", "Employee No.");
      HourAccountingLine.SETRANGE("Cost Object", "Cost Object");
      IF HourAccountingLine.FINDSET THEN
        REPEAT
          Result := Result + HourAccountingLine.Quantity;
          Result := Result + HourAccountingLine."Total Line";
        UNTIL HourAccountingLine.NEXT = 0;

      PostedHourLine.SETRANGE(Year, Year);
      PostedHourLine.SETRANGE(Week, Week);
      PostedHourLine.SETRANGE("Employee No.", "Employee No.");
      PostedHourLine.SETRANGE("Cost Object", "Cost Object");
      IF PostedHourLine.FINDSET THEN
        REPEAT
          Result := Result + PostedHourLine.Quantity;
          Result := Result + PostedHourLine."Total Line";
        UNTIL PostedHourLine.NEXT = 0;

      EXIT(Result);
    END;

    PROCEDURE GetProjAndServiceOrderData@1100485017(iHourAccountingRec@1100485009 : Record 11012038);
    VAR
      HumanResourcesSetup@1100525001 : Record 5218;
      EnterNoOfWeeksBack@1100525000 : Page 11126490;
      lWeeks@1100485000 : Integer;
      Text002@1100485001 : TextConst 'ENU=Number of weeks cannot be 0 or smaller than 0.;NOR=Antall uker kan ikke vëre 0 eller fërre enn 0;SVE=Antal veckor fÜr inte vara 0 eller fÑrre Ñn 0';
      Text003@1100485007 : TextConst 'ENU=Number of weeks can not be greater than 52.;NOR=Antall uker kan ikke overstige 52.;SVE=Antal veckor fÜr inte îverstiga 52.';
      lWeekNumber@1100485004 : Integer;
      Text001@1100485003 : TextConst 'ENU=How Many Weeks;NOR=Hvor mange uker;SVE=Hur mÜnga veckor';
      Window@1100485005 : Dialog;
      Text044@1100485002 : TextConst 'ENU=Confirm with Return;NOR=Bekreft med Returtasten;SVE=BekrÑfta vid retur';
    BEGIN
      TempJobRec.DELETEALL;
      TempServOrderRec.DELETEALL;
      TempHourLinesRec.DELETEALL;

      JaargangTxt := STRSUBSTNO('3112' + '%1',iHourAccountingRec.Year);
      EVALUATE(Jaargang,JaargangTxt);
      lWeekNumber := DATE2DWY(Jaargang,2);
      IF lWeekNumber = 1 THEN lWeekNumber := 52;

      EnterNoOfWeeksBack.LOOKUPMODE := TRUE;
      IF EnterNoOfWeeksBack.RUNMODAL = ACTION::LookupOK THEN
        EnterNoOfWeeksBack.GetField(lWeeks)
      ELSE
        EXIT;

      Window.OPEN(Text001 + '\' + Text044);
      Window.INPUT(1,lWeeks);
      IF (lWeeks <=0)  THEN ERROR(Text002);
      IF (lWeeks > lWeekNumber) THEN ERROR(Text003);

      CurrentYear := iHourAccountingRec.Year;
      CurrentWeek := iHourAccountingRec.Week;

      HoursAccntLinesRec.RESET;
      HoursAccntLinesRec.SETRANGE(Year,iHourAccountingRec.Year);
      HoursAccntLinesRec.SETRANGE(Week,iHourAccountingRec.Week);
      HoursAccntLinesRec.SETRANGE("Employee No.",iHourAccountingRec."Employee No.");
      IF HoursAccntLinesRec.FINDLAST THEN
        LineNo := HoursAccntLinesRec."Line No." + 10000
      ELSE
        LineNo := 10000;

      EmplRec.GET(iHourAccountingRec."Employee No.");
      Globaldim2code := EmplRec."Global Dimension 2 Code";

      DimValRec.RESET;
      DimValRec.SETRANGE(Code,EmplRec."Global Dimension 2 Code");
      IF DimValRec.FINDFIRST THEN
        WageComp := DimValRec."Wage Component";

      HumanResourcesSetup.GET;
      GenJournal.GET(HumanResourcesSetup."Hours Journal Template");

      PostedHourLineRec.RESET;
      PostedHourLineRec.SETRANGE("Employee No.",iHourAccountingRec."Employee No.");
      PostedHourLineRec.SETFILTER("Supplying Company",'');

      IF lWeeks >= CurrentWeek THEN BEGIN
        WeekDec := lWeekNumber - (-(CurrentWeek - lWeeks));
        PostedHourLineRec.SETFILTER(Year,'=%1',CurrentYear - 1);
        PostedHourLineRec.SETFILTER(Week,'>=%1',WeekDec);
        FillTempTables;
        PostedHourLineRec.SETFILTER(Year,'%1',CurrentYear);
        PostedHourLineRec.SETFILTER(Week,'<=%1',CurrentWeek);
        FillTempTables;
      END ELSE BEGIN
        PostedHourLineRec.SETFILTER(Year,'%1',CurrentYear);
        PostedHourLineRec.SETFILTER(Week,'>=%1&<=%2',(CurrentWeek - lWeeks),CurrentWeek);
        FillTempTables;
      END;

      IF TempJobRec.FINDSET THEN
        REPEAT
          HoursAccntLinesRec.INIT;
          HoursAccntLinesRec.Year := CurrentYear;
          HoursAccntLinesRec.Week := CurrentWeek;
          HoursAccntLinesRec."Employee No." := iHourAccountingRec."Employee No.";
          HoursAccntLinesRec."Line No." := LineNo;
          HoursAccntLinesRec."Posting Date" := TODAY;
          HoursAccntLinesRec."Project No." := TempJobRec."No.";
          HoursAccntLinesRec.Type := HoursAccntLinesRec.Type::Project;
          HoursAccntLinesRec."Cost Object" := Globaldim2code;
          HoursAccntLinesRec."Wage Component" := WageComp;
          HoursAccntLinesRec."Source Code" := GenJournal."Source Code";
          HoursAccntLinesRec."Reason Code" := GenJournal."Reason Code";
          HoursAccntLinesRec."Component Type" := HoursAccntLinesRec."Component Type"::Hours;
          HoursAccntLinesRec.INSERT(TRUE);
          LineNo := LineNo + 10000;
        UNTIL TempJobRec.NEXT = 0;

      IF TempServOrderRec.FINDSET THEN
        REPEAT
          HoursAccntLinesRec.INIT;
          HoursAccntLinesRec.Year := CurrentYear;
          HoursAccntLinesRec.Week := CurrentWeek;
          HoursAccntLinesRec."Employee No." := iHourAccountingRec."Employee No.";
          HoursAccntLinesRec."Line No." := LineNo;
          HoursAccntLinesRec."Posting Date" := TODAY;
          HoursAccntLinesRec."Service Order No." := TempServOrderRec."No.";
          HoursAccntLinesRec.Type := HoursAccntLinesRec.Type::Service;
          HoursAccntLinesRec."Cost Object" := Globaldim2code;
          HoursAccntLinesRec."Wage Component" := WageComp;
          HoursAccntLinesRec."Source Code" := GenJournal."Source Code";
          HoursAccntLinesRec."Reason Code" := GenJournal."Reason Code";
          HoursAccntLinesRec."Component Type" := HoursAccntLinesRec."Component Type"::Hours;
          HoursAccntLinesRec.INSERT(TRUE);
          LineNo := LineNo + 10000;
        UNTIL TempServOrderRec.NEXT = 0;

      IF TempHourLinesRec.FINDSET THEN
        REPEAT
          HoursAccntLinesRec.INIT;
          HoursAccntLinesRec.Year := CurrentYear;
          HoursAccntLinesRec.Week := CurrentWeek;
          HoursAccntLinesRec."Employee No." := iHourAccountingRec."Employee No.";
          HoursAccntLinesRec."Line No." := LineNo;
          HoursAccntLinesRec."Posting Date" := TODAY;
          HoursAccntLinesRec.Type := HoursAccntLinesRec.Type::Indirect;
          HoursAccntLinesRec."Cost Object" := Globaldim2code;
          HoursAccntLinesRec."Wage Component" := TempHourLinesRec."Wage Component";
          HoursAccntLinesRec."Component Type" := HoursAccntLinesRec."Component Type"::Hours;
          HoursAccntLinesRec."Cost Code" := TempHourLinesRec."Cost Code";
          HoursAccntLinesRec."Cost Object" := TempHourLinesRec."Cost Object";
          HoursAccntLinesRec."Cost Component" := TempHourLinesRec."Cost Component";
          HoursAccntLinesRec."Department Code" := TempHourLinesRec."Department Code";
          HoursAccntLinesRec.Chargeable := TempHourLinesRec.Chargeable;
          HoursAccntLinesRec.INSERT(TRUE);
          LineNo := LineNo + 10000;
        UNTIL TempHourLinesRec.NEXT = 0;
    END;

    PROCEDURE FillTempTables@1100485031();
    BEGIN
      IF PostedHourLineRec.FINDSET THEN BEGIN
        REPEAT
          IF PostedHourLineRec."Project No." <>'' THEN BEGIN
            TempJobRec.INIT;
            TempJobRec."No." := PostedHourLineRec."Project No.";
            IF TempJobRec.INSERT THEN;
          END ELSE
          IF PostedHourLineRec."Service Order No." <>'' THEN BEGIN
            TempServOrderRec.INIT;
            TempServOrderRec."No." :=  PostedHourLineRec."Service Order No.";
            IF TempServOrderRec.INSERT THEN;
          END;
          IF PostedHourLineRec.Type = PostedHourLineRec.Type::Indirect THEN BEGIN
            TempHourLinesRec.INIT;
            TempHourLinesRec."Wage Component" := PostedHourLineRec."Wage Component";
            TempHourLinesRec."Cost Code" := PostedHourLineRec."Cost Code";
            TempHourLinesRec."Cost Object" := PostedHourLineRec."Cost Object";
            TempHourLinesRec."Cost Component" := PostedHourLineRec."Cost Component";
            TempHourLinesRec."Department Code" := PostedHourLineRec."Department Code";
            TempHourLinesRec.Chargeable := PostedHourLineRec.Chargeable;
            IF TempHourLinesRec.INSERT THEN;
          END;
        UNTIL PostedHourLineRec.NEXT = 0
      END;
    END;

    PROCEDURE CheckCostCompServOrderType@1100485018();
    VAR
      lvCostCompRec@1100485000 : Record 11012012;
    BEGIN
      lvCostCompRec.CheckDefaultCostComponent("Service Order No.", "Cost Component", "Receiving Company", "Cost Type",
        "Additional Cost (Service)");  //db, 24-02-10
    END;

    PROCEDURE LogModification@1100485030(VAR RecRef@1000 : RecordRef;VAR xRecRef@1001 : RecordRef);
    VAR
      HumanResourcesSetup@1100525000 : Record 5218;
      FldRef@1003 : FieldRef;
      xFldRef@1004 : FieldRef;
      i@1002 : Integer;
      lHoursLogEntrRec@1100485001 : Record 11072024;
    BEGIN
      HumanResourcesSetup.GET;
      IF NOT HumanResourcesSetup."Activation Hour Log Entries" THEN
        EXIT;

      lHoursLogEntrRec.SETRANGE(Year, Year);
      lHoursLogEntrRec.SETRANGE(Week, Week);
      lHoursLogEntrRec.SETRANGE("Employee No.","Employee No.");
      IF lHoursLogEntrRec.FINDFIRST THEN BEGIN
        FOR i := 1 TO RecRef.FIELDCOUNT DO BEGIN
          FldRef := RecRef.FIELDINDEX(i);
          xFldRef := xRecRef.FIELDINDEX(i);
          IF IsNormalField(RecRef.NUMBER,FldRef.NUMBER) THEN;
            IF FORMAT(FldRef.VALUE) <> FORMAT(xFldRef.VALUE) THEN
              InsertLogEntry(FldRef,xFldRef,RecRef,1);
        END;
      END;
    END;

    LOCAL PROCEDURE IsNormalField@12(TableNumber@1001 : Integer;FieldNumber@1002 : Integer) : Boolean;
    VAR
      Field@1000 : Record 2000000041;
    BEGIN
      GetField(TableNumber,FieldNumber,Field);
      EXIT(Field.Class = TempField.Class::Normal);
    END;

    LOCAL PROCEDURE GetField@7(TableNumber@1001 : Integer;FieldNumber@1002 : Integer;VAR Field2@1003 : Record 2000000041);
    VAR
      Field@1000 : Record 2000000041;
    BEGIN
      IF NOT TempField.GET(TableNumber,FieldNumber) THEN BEGIN
        Field.GET(TableNumber,FieldNumber);
        TempField := Field;
        TempField.INSERT;
      END;
      Field2 := TempField;
    END;

    LOCAL PROCEDURE InsertLogEntry@8(VAR FldRef@1000 : FieldRef;VAR xFldRef@1001 : FieldRef;VAR RecRef@1004 : RecordRef;TypeOfChange@1002 : 'Insertion,Modification,Deletion');
    VAR
      lHoursLogEntrLinesRec@1100485000 : Record 11072025;
    BEGIN
      lHoursLogEntrLinesRec.SETRANGE(Year,Year);
      lHoursLogEntrLinesRec.SETRANGE(Week,Week);
      lHoursLogEntrLinesRec.SETRANGE("Employee No.","Employee No.");
      IF lHoursLogEntrLinesRec.FINDLAST THEN
        LineNo := lHoursLogEntrLinesRec."Line No." + 100
      ELSE
        LineNo := 10000;

      CALCFIELDS("Department Code Employee"); //4PSSE

      lHoursLogEntrLinesRec.INIT;
      lHoursLogEntrLinesRec."Line No." := LineNo;
      lHoursLogEntrLinesRec.Year := Year;
      lHoursLogEntrLinesRec.Week := Week;
      lHoursLogEntrLinesRec."Employee No." := "Employee No.";
      lHoursLogEntrLinesRec.Date := TODAY;
      lHoursLogEntrLinesRec.Time := TIME;
      IF UserSetupRec.GET(USERID) THEN
        lHoursLogEntrLinesRec."Approver Change" := UserSetupRec."Employee No."
      ELSE
        ERROR(Text013);
      lHoursLogEntrLinesRec.Field := FldRef.CAPTION;

      IF STRLEN(FormatValue(xFldRef)) < 50 THEN
        lHoursLogEntrLinesRec."Old Value" := FormatValue(xFldRef)
      ELSE
        lHoursLogEntrLinesRec."Old Value" := DELSTR((FormatValue(xFldRef)),50);
      IF STRLEN(FormatValue(FldRef)) < 50 THEN
        lHoursLogEntrLinesRec."New Value" := FormatValue(FldRef)
      ELSE
        lHoursLogEntrLinesRec."New Value" := DELSTR((FormatValue(FldRef)),50);

      lHoursLogEntrLinesRec.Type := Type;
      lHoursLogEntrLinesRec."Cost Code" := "Cost Code";
      lHoursLogEntrLinesRec."Receiving Company" := "Receiving Company";
      lHoursLogEntrLinesRec."Service Order No." := "Service Order No.";
      lHoursLogEntrLinesRec."Service Location No." := "Service Location No.";
      lHoursLogEntrLinesRec."Project No." := "Project No.";
      lHoursLogEntrLinesRec.Element := Element;
      lHoursLogEntrLinesRec."Extension Contract" := "Extension Contract";
      lHoursLogEntrLinesRec."Rental Unit" := "Rental Unit";
      lHoursLogEntrLinesRec."Estimate No." := "Estimate No.";
      lHoursLogEntrLinesRec."Try-out No." := "Try-out No.";
      lHoursLogEntrLinesRec."Plant Location" := "Plant Location";
      lHoursLogEntrLinesRec."Plant Type" := "Plant Type";
      lHoursLogEntrLinesRec."Plant No." := "Plant No.";
      lHoursLogEntrLinesRec."Plant Rate Code" := "Plant Rate Code";
      lHoursLogEntrLinesRec."Cost Component Plant" := "Cost Component Plant";
      lHoursLogEntrLinesRec."Cost Object" := "Cost Object";
      lHoursLogEntrLinesRec."Cost Component" := "Cost Component";
      lHoursLogEntrLinesRec."Wage Component" := "Wage Component";
      lHoursLogEntrLinesRec.Monday := Monday;
      lHoursLogEntrLinesRec.Tuesday := Tuesday;
      lHoursLogEntrLinesRec.Wednesday := Wednesday;
      lHoursLogEntrLinesRec.Thursday := Thursday;
      lHoursLogEntrLinesRec.Friday := Friday;
      lHoursLogEntrLinesRec.Saturday := Saturday;
      lHoursLogEntrLinesRec.Sunday := Sunday;
      lHoursLogEntrLinesRec.Comment := Comment;
      lHoursLogEntrLinesRec."Department Code Employee" := "Department Code Employee";
      lHoursLogEntrLinesRec."Department Code Project" := "Department Code";
      lHoursLogEntrLinesRec."Reason Code" := "Reason Code";
      lHoursLogEntrLinesRec.Amount := "Amount (LCY)";
      lHoursLogEntrLinesRec.Quantity := Quantity;
      lHoursLogEntrLinesRec."Unit Cost" := "Unit Cost (LCY)";
      lHoursLogEntrLinesRec."Resource Req. Receiv. Company" := "Resource Req. Receiv. Company";
      lHoursLogEntrLinesRec."Resource Request No." := "Resource Request No.";

      lHoursLogEntrLinesRec."Hour Acc. Line No." := "Line No."; // SESB.I035.I036 VKO 29.07.2013
      //>>ENH032
      lHoursLogEntrLinesRec."Team Code" := "Team Code";
      lHoursLogEntrLinesRec.Informed := TRUE;

      IF (FldRef.NUMBER = FIELDNO("Amount (LCY)")) THEN BEGIN
        CALCFIELDS("Component Type");
        IF ("Component Type" IN ["Component Type"::Expenses, "Component Type"::"Expense hours"] ) THEN
          lHoursLogEntrLinesRec.Informed := FALSE;
      END;
      IF (FldRef.NUMBER IN [ FIELDNO("Project No."),  FIELDNO("Wage Component"),  FIELDNO("Cost Code"), FIELDNO("Team Code"),
            FIELDNO(Monday), FIELDNO(Tuesday), FIELDNO(Wednesday), FIELDNO(Thursday), FIELDNO(Friday), FIELDNO(Saturday), FIELDNO(Sunday) ]) THEN
        lHoursLogEntrLinesRec.Informed := FALSE;
      //<<ENH032

      //>>IME-107
      IF lHoursLogEntrLinesRec."Approver Change" <> '' THEN BEGIN
         IF lHoursLogEntrLinesRec."Employee No." = lHoursLogEntrLinesRec."Approver Change" THEN
            lHoursLogEntrLinesRec.Informed := TRUE;
      //   ELSE
      //      lHoursLogEntrLinesRec.Informed := FALSE;
      END;
      //<<IME-107

      lHoursLogEntrLinesRec.INSERT;

      IF lHoursLogEntrLinesRec.Field = TotalLineCaption THEN
        lHoursLogEntrLinesRec.DELETE;
      IF lHoursLogEntrLinesRec.Field = AmountCaption THEN
        lHoursLogEntrLinesRec.DELETE;
    END;

    LOCAL PROCEDURE FormatValue@17(VAR FldRef@1000 : FieldRef) : Text[250];
    BEGIN
      EXIT(FORMAT(FldRef.VALUE));
    END;

    PROCEDURE SetFromHourAccByProj@1100485019(ICurrFieldNo@1100485000 : Integer);
    BEGIN
      gFromHourAccByProj := TRUE;
      gCurrFieldNo := ICurrFieldNo;
    END;

    LOCAL PROCEDURE GetCurrFieldNo@1100485029() : Integer;
    BEGIN
      IF NOT gFromHourAccByProj THEN
        EXIT(CurrFieldNo)
      ELSE
        EXIT(gCurrFieldNo);
    END;

    PROCEDURE UpdatePreregistration@1100485020();
    VAR
      LvHourRec@1100485000 : Record 11012038;
    BEGIN
      IF CURRENTCOMPANY <> COMPANYNAME THEN
        LvHourRec.CHANGECOMPANY(CURRENTCOMPANY);
      IF LvHourRec.GET(Year,Week,"Employee No.") THEN BEGIN
        LvHourRec.Received := TRUE;
        LvHourRec."Delivery Date" := TODAY;
        LvHourRec."Recorded By" := USERID;
        LvHourRec.MODIFY;
      END;
    END;

    PROCEDURE GetCostPrice@1100485032(GetRentalPrice@1100525001 : Boolean;VAR FCurrency@1100525002 : Boolean) RetCostPrice : Decimal;
    VAR
      lCostPriceReadOrderLine@1100485022 : Record 11020355;
      lBudgetRateRec@1100485021 : Record 11012000;
      lProjBudgetRateRec@1100485020 : Record 11020231;
      lProjCostObjectCostPriceRec@1100485023 : Record 11020365;
      lProjEmplCostPriceRec@1100485019 : Record 11020253;
      lProjEmplWageCCostPriceRec@1100485017 : Record 11020366;
      lProjTradeAssCostPriceRec@1100485016 : Record 11020361;
      lProjTradeAssWageCostPriceRec@1100485015 : Record 11020362;
      lEmplCostPriceRec@1100485014 : Record 11020315;
      lEmplWageCCostPriceRec@1100525000 : Record 11020390;
      lEmplCostObjCostPriceRec@1100485013 : Record 11020259;
      lTradeAssCostPriceRec@1100485012 : Record 11020269;
      lTradeAssWageCCostPriceRec@1100485011 : Record 11020295;
      lServContEmplCostPriceRec@1100485010 : Record 11020322;
      lServTradeAssCostPriceRec@1100485009 : Record 11020323;
      lServCostObjCostPriceRec@1100485008 : Record 11020324;
      lServTradeWageCCostPriceRec@1100485007 : Record 11020325;
      lCostObjectCostPriceRec@1100485006 : Record 11020356;
      lDepartmentCostPriceRec@1100485005 : Record 11020357;
      lDepCostObjCostPriceRec@1100485004 : Record 11020358;
      lDepTradeAssCostPriceRec@1100485003 : Record 11020359;
      lDepTradeWageCostPriceRec@1100485002 : Record 11020360;
      lExceptionalCostPriceRec@1100485001 : Record 11020363;
      lExceptCostPriceperDateRec@1100485000 : Record 11020364;
      lRecRef@1100485018 : RecordRef;
    BEGIN
      CLEAR(DimValRec);
      CLEAR(EmplRec);
      "Cost Price Found at" := '';
      FCurrency := FALSE;   //M 25781
      IF GetPlantSalesPrice(RetCostPrice) THEN  //DP00812
        EXIT;

      CheckCompanyIC;

      IF "Cost Object" <> '' THEN
        DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, TRUE, '');
      IF "Employee No." <> '' THEN
        EmplRec.GET("Employee No.");

      WITH lCostPriceReadOrderLine DO BEGIN
        SETCURRENTKEY("Price Type", "Read Order");
        IF GetRentalPrice THEN
          SETRANGE("Price Type", "Price Type"::"Rental - External Employee")
        ELSE
          CASE Type OF
            Type::Project:
              IF External THEN
                SETRANGE("Price Type", "Price Type"::"Project - External Employee")
              ELSE
                SETRANGE("Price Type", "Price Type"::Project);
            Type::Service:
              IF External THEN
                SETRANGE("Price Type", "Price Type"::"Service - External Employee")
              ELSE
                SETRANGE("Price Type", "Price Type"::Service);
            Type::Indirect:
              IF External THEN
                SETRANGE("Price Type", "Price Type"::"Indirect - External Employee")
              ELSE
                SETRANGE("Price Type", "Price Type"::Indirect);
            Type::Plant:
              IF External THEN
                SETRANGE("Price Type", "Price Type"::"Plant - External Employee")
              ELSE
                SETRANGE("Price Type", "Price Type"::Plant);
            Type::ResourceRequest:
              IF External THEN
                SETRANGE("Price Type", "Price Type"::"ResourceRequest - External Employee")
              ELSE
                SETRANGE("Price Type", "Price Type"::ResourceRequest);
          END;
        SETFILTER("Read Order",'1..');
        IF FINDSET THEN
          REPEAT
            CASE "Table No." OF
              DATABASE::"Budget Rate":
                BEGIN
                  lBudgetRateRec.CHANGECOMPANY("Receiving Company");
                  lBudgetRateRec.SETRANGE(Code, DimValRec."Rate Code");
                  lBudgetRateRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lBudgetRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lBudgetRateRec.FINDLAST THEN BEGIN
                    RetCostPrice := lBudgetRateRec.Rate;
                    lRecRef.GETTABLE(lBudgetRateRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Project Budget Rate":
                BEGIN
                  lProjBudgetRateRec.CHANGECOMPANY("Receiving Company");
                  lProjBudgetRateRec.SETRANGE("Project No.", "Project No.");
                  lProjBudgetRateRec.SETRANGE("Rate Code", DimValRec."Rate Code");
                  lProjBudgetRateRec.SETRANGE("Starting Date", 0D,"Posting Date");
                  lProjBudgetRateRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lProjBudgetRateRec.FINDLAST THEN BEGIN
                    RetCostPrice := lProjBudgetRateRec."Rate (LCY)";
                    lRecRef.GETTABLE(lProjBudgetRateRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Proj - Cost Object Cost Price":
                BEGIN
                  lProjCostObjectCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lProjCostObjectCostPriceRec.SETRANGE("Project No.", "Project No.");
                  lProjCostObjectCostPriceRec.SETRANGE("Cost Object", "Cost Object");
                  lProjCostObjectCostPriceRec.SETRANGE("Starting Date", 0D,"Posting Date");
                  lProjCostObjectCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lProjCostObjectCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lProjCostObjectCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lProjCostObjectCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Project - Employee Cost Price":
                BEGIN
                  lProjEmplCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lProjEmplCostPriceRec.SETRANGE("Project No.", "Project No." );
                  lProjEmplCostPriceRec.SETRANGE("Employee No.", "Employee No.");
                  lProjEmplCostPriceRec.SETRANGE("Starting Date", 0D,"Posting Date");
                  lProjEmplCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lProjEmplCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lProjEmplCostPriceRec."Cost Price"; //29-12-2010, Multi Currency, instead of Cost Price (LCY)
                    lRecRef.GETTABLE(lProjEmplCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Proj - Empl - Wage Cost Price":
                BEGIN
                  lProjEmplWageCCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lProjEmplWageCCostPriceRec.SETRANGE("Project No.", "Project No." );
                  lProjEmplWageCCostPriceRec.SETRANGE("Employee No.", "Employee No.");
                  lProjEmplWageCCostPriceRec.SETRANGE("Wage Component", "Wage Component");
                  lProjEmplWageCCostPriceRec.SETRANGE("Starting Date", 0D,"Posting Date");
                  lProjEmplWageCCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lProjEmplWageCCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lProjEmplWageCCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lProjEmplWageCCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Project - Trade As. Cost Price":
                BEGIN
                  lProjTradeAssCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lProjTradeAssCostPriceRec.SETRANGE("Project No.", "Project No.");
                  lProjTradeAssCostPriceRec.SETRANGE("Trade Association", EmplRec."Trade Association");
                  lProjTradeAssCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lProjTradeAssCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lProjTradeAssCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lProjTradeAssCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lProjTradeAssCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Proj - Trade - Wage Cost Price":
                BEGIN
                  lProjTradeAssWageCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lProjTradeAssWageCostPriceRec.SETRANGE("Project No.", "Project No.");
                  lProjTradeAssWageCostPriceRec.SETRANGE("Trade Association", EmplRec."Trade Association");
                  lProjTradeAssWageCostPriceRec.SETRANGE("Wage Component", "Wage Component");
                  lProjTradeAssWageCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lProjTradeAssWageCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lProjTradeAssWageCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lProjTradeAssWageCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lProjTradeAssWageCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Employee Cost Price":
                BEGIN
                  lEmplCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lEmplCostPriceRec.SETRANGE("Employee No.", "Employee No.");
                  lEmplCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lEmplCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lEmplCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lEmplCostPriceRec."Cost Price"; //29-12-2010, Multi Currency, instead of Cost Price (LCY)
                    FCurrency := TRUE;  //M 25781
                    lRecRef.GETTABLE(lEmplCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Employee - Wage C. Cost Price":
                BEGIN
                  lEmplWageCCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lEmplWageCCostPriceRec.SETRANGE("Employee No.", "Employee No.");
                  lEmplWageCCostPriceRec.SETRANGE("Wage Component", "Wage Component");
                  lEmplWageCCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lEmplWageCCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lEmplWageCCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lEmplWageCCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lEmplWageCCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Empl. - Cost Obj. Cost Price":
                BEGIN
                  lEmplCostObjCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lEmplCostObjCostPriceRec.SETRANGE("Employee No.", "Employee No.");
                  lEmplCostObjCostPriceRec.SETRANGE("Cost Object", "Cost Object");
                  lEmplCostObjCostPriceRec.SETRANGE("Starting Date", 0D,"Posting Date");
                  lEmplCostObjCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lEmplCostObjCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lEmplCostObjCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lEmplCostObjCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Trade Association Cost Price":
                BEGIN
                  lTradeAssCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lTradeAssCostPriceRec.SETRANGE("Trade Association", EmplRec."Trade Association");
                  lTradeAssCostPriceRec.SETRANGE("Starting Date",0D,"Posting Date");
                  lTradeAssCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lTradeAssCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lTradeAssCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lTradeAssCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Trade As. - Wage C. Cost Price":
                BEGIN
                  lTradeAssWageCCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lTradeAssWageCCostPriceRec.SETRANGE("Trade Association", EmplRec."Trade Association");
                  lTradeAssWageCCostPriceRec.SETRANGE("Wage Component", "Wage Component");
                  lTradeAssWageCCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lTradeAssWageCCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lTradeAssWageCCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice  := lTradeAssWageCCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lTradeAssWageCCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Serv. - Empl. Cost Price":
                BEGIN
                  lServContEmplCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lServContEmplCostPriceRec.SETRANGE("Service Contract No.", "Service Contract No.");
                  lServContEmplCostPriceRec.SETRANGE("Employee No.", "Employee No.");
                  lServContEmplCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lServContEmplCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lServContEmplCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lServContEmplCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lServContEmplCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Serv. - Trade As. Cost Price":
                BEGIN
                  lServTradeAssCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lServTradeAssCostPriceRec.SETRANGE("Service Contract No.", "Service Contract No.");
                  lServTradeAssCostPriceRec.SETRANGE("Trade Association", EmplRec."Trade Association");
                  lServTradeAssCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lServTradeAssCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lServTradeAssCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lServTradeAssCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lServTradeAssCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Serv. - Cost Object Cost Price":
                BEGIN
                  lServCostObjCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lServCostObjCostPriceRec.SETRANGE("Service Contract No.", "Service Contract No.");
                  lServCostObjCostPriceRec.SETRANGE("Cost Object", "Cost Object");
                  lServCostObjCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lServCostObjCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lServCostObjCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lServCostObjCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lServCostObjCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Serv. - Trade -Wage Cost Price":
                BEGIN
                  lServTradeWageCCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lServTradeWageCCostPriceRec.SETRANGE("Service Contract No.", "Service Contract No.");
                  lServTradeWageCCostPriceRec.SETRANGE("Trade Association", EmplRec."Trade Association");
                  lServTradeWageCCostPriceRec.SETRANGE("Wage Component", "Wage Component");
                  lServTradeWageCCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lServTradeWageCCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lServTradeWageCCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lServTradeWageCCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lServTradeWageCCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Cost Object Cost Price":
                BEGIN
                  lCostObjectCostPriceRec.CHANGECOMPANY("Receiving Company");
                  lCostObjectCostPriceRec.SETRANGE("Cost Object", "Cost Object");
                  lCostObjectCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lCostObjectCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lCostObjectCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lCostObjectCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lCostObjectCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Department Cost Price":
                BEGIN
                  lDepartmentCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lDepartmentCostPriceRec.SETRANGE("Department Code", EmplRec."Global Dimension 1 Code");
                  lDepartmentCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lDepartmentCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lDepartmentCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lDepartmentCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lDepartmentCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Dep. - Cost Object Cost Price":
                BEGIN
                  lDepCostObjCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lDepCostObjCostPriceRec.SETRANGE("Department Code", EmplRec."Global Dimension 1 Code");
                  lDepCostObjCostPriceRec.SETRANGE("Cost Object", "Cost Object");
                  lDepCostObjCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lDepCostObjCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lDepCostObjCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lDepCostObjCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lDepCostObjCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Dep. - Trade As. Cost Price":
                BEGIN
                  lDepTradeAssCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lDepTradeAssCostPriceRec.SETRANGE("Department Code", EmplRec."Global Dimension 1 Code");
                  lDepTradeAssCostPriceRec.SETRANGE("Trade Association", EmplRec."Trade Association");
                  lDepTradeAssCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lDepTradeAssCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lDepTradeAssCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lDepTradeAssCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lDepTradeAssCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Dep. - Trade - Wage Cost Price":
                BEGIN
                  lDepTradeWageCostPriceRec.CHANGECOMPANY("Supplying Company");
                  lDepTradeWageCostPriceRec.SETRANGE("Department Code", EmplRec."Global Dimension 1 Code");
                  lDepTradeWageCostPriceRec.SETRANGE("Trade Association", EmplRec."Trade Association");
                  lDepTradeWageCostPriceRec.SETRANGE("Wage Component", "Wage Component");
                  lDepTradeWageCostPriceRec.SETRANGE("Starting Date", 0D, "Posting Date");
                  lDepTradeWageCostPriceRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                  IF lDepTradeWageCostPriceRec.FINDLAST THEN BEGIN
                    RetCostPrice := lDepTradeWageCostPriceRec."Cost Price";
                    lRecRef.GETTABLE(lDepTradeWageCostPriceRec);
                    FillCostPriceFound(lRecRef);
                    EXIT;
                  END;
                END;
              DATABASE::"Exceptional Cost Price":
                BEGIN
                  IF lExceptionalCostPriceRec.FINDLAST THEN
                    REPEAT
                      IF TestExceptionalPrice(lExceptionalCostPriceRec) THEN BEGIN
                        lExceptCostPriceperDateRec.SETRANGE(Level, lExceptionalCostPriceRec.Level);
                        lExceptCostPriceperDateRec.SETRANGE("Starting Date", 0D, "Posting Date");
                        lExceptCostPriceperDateRec.SETFILTER("Ending Date",'%1|>=%2',0D, "Posting Date");
                        IF lExceptCostPriceperDateRec.FINDLAST THEN BEGIN
                          RetCostPrice := lExceptCostPriceperDateRec."Cost Price";
                          lRecRef.GETTABLE(lExceptCostPriceperDateRec);
                          FillCostPriceFound(lRecRef);
                          EXIT;
                        END;
                      END;
                    UNTIL lExceptionalCostPriceRec.NEXT(-1) = 0;
                END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE TestExceptionalPrice@1100485035(IExceptionalCostPriceRec@1100485000 : Record 11020363) : Boolean;
    BEGIN
      IF (IExceptionalCostPriceRec."Employee No." <> '') AND (IExceptionalCostPriceRec."Employee No." <> "Employee No.") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Trade Association" <> '') AND
        (IExceptionalCostPriceRec."Trade Association" <> EmplRec."Trade Association") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Department Code" <> '') AND
         (IExceptionalCostPriceRec."Department Code" <> EmplRec."Global Dimension 1 Code") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Cost Object" <> '') AND (IExceptionalCostPriceRec."Cost Object" <> "Cost Object") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Project No." <> '') AND (IExceptionalCostPriceRec."Project No." <> "Project No.") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec.Element <> '') AND (IExceptionalCostPriceRec.Element <> Element) THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Wage Component" <> '') AND (IExceptionalCostPriceRec."Wage Component" <> "Wage Component") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Cost Component" <> '') AND (IExceptionalCostPriceRec."Cost Component" <> "Cost Component") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Extension Contract" <> '') AND
         (IExceptionalCostPriceRec."Extension Contract" <> "Extension Contract") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Service Order No." <> '') AND
         (IExceptionalCostPriceRec."Service Order No." <> "Service Order No.") THEN
        EXIT(FALSE);

      IF (IExceptionalCostPriceRec."Service Contract No." <> '') AND
         (IExceptionalCostPriceRec."Service Contract No." <> "Service Contract No.") THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE FillCostPriceFound@1100485033(lRecRef@1100485006 : RecordRef);
    VAR
      lAllObjWithCapRec@1100485001 : Record 2000000058;
    BEGIN
      lAllObjWithCapRec.SETRANGE("Object Type", lAllObjWithCapRec."Object Type"::Table);
      lAllObjWithCapRec.SETRANGE("Object ID", lRecRef.NUMBER);
      IF lAllObjWithCapRec.FINDFIRST THEN;

      lRecRef.RESET;
      lRecRef.SETRECFILTER;

      "Cost Price Found at" := COPYSTR(
        STRSUBSTNO(Text015, lAllObjWithCapRec."Object Caption", lRecRef.GETFILTERS), 1, MAXSTRLEN("Cost Price Found at"));
    END;

    PROCEDURE SetRenameHeader@1100485005(lRenamingHeader@1100485000 : Boolean);
    BEGIN
      RenamingHeader := lRenamingHeader;
    END;

    PROCEDURE ElementDescription@1100525001();
    BEGIN
      //* C-017858 (16-11-2009) Now also element for plant (if plant location is linked to a project)
      IF Type <> Type::Plant THEN BEGIN
        IF "Receiving Company" = '' THEN
          EXIT;
        "Element Description" := '';
        IF Element = '' THEN
          EXIT;
        ProjElemRec.CHANGECOMPANY("Receiving Company");
        IF ProjElemRec.GET("Project No.",Element) THEN
          "Element Description" := ProjElemRec.Description;
      END ELSE BEGIN
        "Element Description" := '';
        IF Element = '' THEN
          EXIT;
        IF NOT CheckPlantLocLinkedToProject() THEN
          EXIT;
        IF ProjElemRec.GET(PlantLocRec."Project No.",Element) THEN
          "Element Description" := ProjElemRec.Description;
      END;
    END;

    PROCEDURE UpdateServHoursGanttChart@1100525002(UpdateAction@1100525000 : 'Insert,Modify,Delete,Rename,Post');
    BEGIN
      GanttChartMgt.UpdateHourAcc(UpdateAction,Rec,xRec);
    END;

    PROCEDURE CheckPlantLocLinkedToProject@1100525005() : Boolean;
    BEGIN
      //* C-017858 (16-11-2009)
      IF (Type <> Type::Plant) OR ("Plant Location" = '') THEN
        EXIT(FALSE);
      CheckCompanyIC;
      IF NOT PlantLocRec.GET("Plant Location") THEN
        EXIT(FALSE);
      IF PlantLocRec."Project No." = '' THEN
        EXIT(FALSE);

      IF PlantLocRec."Company Name" <> '' THEN
        PlantLocProjectCompany := PlantLocRec."Company Name"
      ELSE
        PlantLocProjectCompany := "Receiving Company";
      IF PlantLocProjectCompany <> "Receiving Company" THEN
        ProjElemRec.CHANGECOMPANY(PlantLocProjectCompany);

      EXIT(TRUE);
    END;

    PROCEDURE CheckAdditionalCostService@1100525017();
    BEGIN
      //db, 24-02-10
      IF "Service Order No." = '' THEN EXIT;
      CheckCompanyIC;
      IF NOT ServOrderRec.GET("Service Order No.") THEN EXIT;

      IF NOT "Add. Cost Changed Manually" THEN
        "Additional Cost (Service)" :=      //*** Validate doesn't work because of recursion
          ServOrderRec.GetAdditionalCostService("Service Order No.","Cost Object","Cost Type"+1,"Receiving Company", Rec);

      IF (CurrFieldNo = FIELDNO("Service Order No.")) OR (CurrFieldNo = FIELDNO("Cost Type")) THEN BEGIN
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN
        BEGIN
          FillDepartmentCode;
        END;
        IF ("Service Order No." <> xRec."Service Order No.") OR
           ("Cost Type" <> xRec."Cost Type") THEN BEGIN
          VALIDATE("Cost Component");
        END;
      END;
    END;

    PROCEDURE SetUpdateFromProjHourLine@1100525004(NewUpdateFromProjHourLine@1100525000 : Boolean);
    BEGIN
      UpdateFromProjHourLine := NewUpdateFromProjHourLine;
    END;

    PROCEDURE ValidateAdditionalCost@1100525011();
    VAR
      CostCompRec@1100525001 : Record 11012012;
      SaveCostComp@1100525000 : Text[30];
    BEGIN
      SaveCostComp := "Cost Component";
      IF CurrFieldNo = FIELDNO("Additional Cost (Service)") THEN
        "Add. Cost Changed Manually" := TRUE;
      TESTFIELD("Service Order No.");
      VALIDATE("Service Order No.");

      IF CurrFieldNo <> FIELDNO("Additional Cost (Service)") THEN EXIT;  //db, 18-03-10: T4641

      IF CURRENTCOMPANY <> COMPANYNAME THEN
        CostCompRec.CHANGECOMPANY(CURRENTCOMPANY);
      IF CostCompRec.GET(SaveCostComp) THEN BEGIN
         "Cost Component" := SaveCostComp;
         IF ("Additional Cost (Service)" = TRUE) THEN BEGIN
           IF (CostCompRec."Cost Component (Add.Cost)" <> '') THEN
             "Cost Component" := CostCompRec."Cost Component (Add.Cost)";
         END ELSE BEGIN
           CostCompRec.SETRANGE("Cost Component (Add.Cost)", SaveCostComp);
           IF CostCompRec.FINDSET THEN BEGIN
             REPEAT
               IF (CostCompRec."Cost Component (Add.Cost)" = SaveCostComp) THEN
                 "Cost Component" := CostCompRec.Code;
             UNTIL CostCompRec.NEXT = 0;
           END;
         END;
      END;
    END;

    PROCEDURE ValidateCostComponent@1100525010();
    VAR
      CostCompRec@1100525000 : Record 11012012;
      CostCompRec2@1100525001 : Record 11012012;
    BEGIN
      IF CurrFieldNo <> FIELDNO("Cost Component") THEN EXIT;  //db, 18-03-10: T4642

      IF CURRENTCOMPANY <> COMPANYNAME THEN BEGIN
        CostCompRec.CHANGECOMPANY(CURRENTCOMPANY);
        CostCompRec2.CHANGECOMPANY(CURRENTCOMPANY);
      END;
      IF CostCompRec.GET("Cost Component") THEN BEGIN
        //db.sn, 06-12-10: M24263
        IF CostCompRec."Additional Cost (Service)" THEN BEGIN
          CostCompRec2.SETRANGE("Cost Component (Add.Cost)", "Cost Component");
          IF NOT CostCompRec2.FINDFIRST THEN EXIT;
        END ELSE BEGIN
          IF CostCompRec."Cost Component (Add.Cost)" = '' THEN EXIT;
        END;
        //db.en, 06-12-10: M24263
        VALIDATE("Additional Cost (Service)", CostCompRec."Additional Cost (Service)");
      END;
    END;

    PROCEDURE CheckProjectStatus@1100525006();
    VAR
      BlockingCode@1100525000 : Record 11012027;
    BEGIN
      ProjRec.CHANGECOMPANY("Receiving Company");
      ProjRec.GET("Project No.");
      ICJobsSetup.CHANGECOMPANY("Receiving Company");
      ICJobsSetup.GET;

      IF (ProjRec."Blocking Code" <> '') AND
         ((ProjRec."Project Status" = ProjRec."Project Status"::"Technical Finished") OR
          (ProjRec."Project Status" = ProjRec."Project Status"::"Administrative Finished") OR
          ((ProjRec."Project Status" = ProjRec."Project Status"::Finished) AND ICJobsSetup."Provisions at Closure")
         ) THEN
      BEGIN
        IF NOT External THEN
          BlockingCode.Switch := BlockingCode.Switch::"Hour Accounting"
        ELSE
          BlockingCode.Switch := BlockingCode.Switch::"Post Hours External";
        BlockingCode.CheckBlocked(ProjRec."Blocking Code", BlockingCode.Switch, ProjRec, TRUE);
      END ELSE BEGIN
        IF (ICJobsSetup."Provisions at Closure") THEN
          ProjRec.CheckProjectStatus(-1)
        ELSE
          ProjRec.CheckProjectStatus(1);
      END;
    END;

    PROCEDURE CreateHoursConsentLine@1100528400();
    VAR
      HoursConsentLine@1100528400 : Record 11020437;
      ProcessedHoursConsentLine@1101285000 : Record 11020439;
      Employee@1100528402 : Record 5200;
      SerialNumber@1100528403 : Integer;
      Consenter@1100528404 : Code[20];
      AllHourConsenter@1100285002 : Code[20];
      AllHourSerialNumber@1100285001 : Integer;
      ProjectLineInserted@1100285000 : Boolean;
      lvHoursConsentLine@1000000000 : Record 11020437;
    BEGIN
      //140410 ITERO.GH
      CALCFIELDS("Component Type");
      //140410 ITERO.GH
      // SESB.I031 ASH 16.07.2013 >>
      //180412 changed ProcessedHoursConsentLine to HoursConsentLine
      IF Changed THEN BEGIN
        lvHoursConsentLine.SETRANGE(Year, Year);
        lvHoursConsentLine.SETRANGE(Week, Week);
        lvHoursConsentLine.SETRANGE(Employee, "Employee No.");
        lvHoursConsentLine.SETRANGE("Line No.", "Line No.");
        lvHoursConsentLine.SETRANGE(LineType, HoursConsentLine.LineType::Normal);
        lvHoursConsentLine.DELETEALL(TRUE);
      END ELSE
        CASE "Status SE" OF
          "Status SE"::Cancelled:
            EXIT;
        END;

      HoursConsentLine.RESET;
      // SESB.I031 ASH 16.07.2013 <<

      // SESB.I026 VKO 26.07.2013 >>
      // IF NOT GetHourConsenterInfo(SerialNumber, Consenter, -2147483647) THEN
      //   EXIT;
      IF GetHourConsenterInfo(SerialNumber, Consenter, FindLastSerialNumber + 1) THEN BEGIN
      // SESB.I026 VKO 26.07.2013 <<

        Employee.GET("Employee No.");

        // SESB.I031 VKO 07.08.2013 >>
        // IF NOT HoursConsentLine.GET(
        //  Year,
        //  Week,
        //  "Employee No.",
        //  HoursConsentLine.LineType::Normal,
        //  SerialNumber,
        //  DetermineHoursConsentLineType(Rec),
        //  DetermineHoursConsentLineNo(Rec),
        //  "Line No.",
        //  Consenter,
        //  FALSE,
        //  FALSE)
        // THEN BEGIN

        HoursConsentLine.SETRANGE(Year,Year);
        HoursConsentLine.SETRANGE(Week,Week);
        HoursConsentLine.SETRANGE(Employee,"Employee No.");
        HoursConsentLine.SETRANGE(LineType,HoursConsentLine.LineType::Normal);
        HoursConsentLine.SETRANGE("Serial Number",SerialNumber);
        HoursConsentLine.SETRANGE(Type,DetermineHoursConsentLineType(Rec));
        HoursConsentLine.SETRANGE("No.",DetermineHoursConsentLineNo(Rec));
        HoursConsentLine.SETRANGE("Line No.","Line No.");
        HoursConsentLine.SETRANGE(Approver,Consenter);
        //180412.sn
        //HoursConsentLine.SETRANGE(Denied, FALSE);//180502
        //HoursConsentLine.SETRANGE(Consent, FALSE);//180502
        HoursConsentLine.SETRANGE(Source, HoursConsentLine.Source::"Hour Accounting");
        HoursConsentLine.SETRANGE("Supplying Company", '');
        //180412.en
        //>>140410 ITERO.GH
        HoursConsentLine.SETRANGE("Component Type" , "Component Type");
        //>>GHE 131115
        //HoursConsentLine.SETRANGE("Wage Component","Wage Component");
        //<<GHE 131115
        //<<140410 ITERO.GH
        //HoursConsentLine.SETRANGE("Team Code", "Team Code");  //180412 RFC151
        HoursConsentLine.SETRANGE(CombinedWTEEKey, "Wage Component" +','+ "Team Code" +','+ Element +','+ "Extension Contract");  //180412
        IF HoursConsentLine.ISEMPTY THEN BEGIN
        // SESB.I031 VKO 07.08.2013 <<
          HoursConsentLine.INIT;
          HoursConsentLine.Approver := Consenter;
          HoursConsentLine.Year := Year;
          HoursConsentLine.Week := Week;
          HoursConsentLine.Employee := "Employee No.";
          HoursConsentLine."Wage Component" := "Wage Component";
          HoursConsentLine."Cost Object" := "Cost Object";
          HoursConsentLine.LineType := HoursConsentLine.LineType::Normal;
          HoursConsentLine."Serial Number" := SerialNumber;
          HoursConsentLine.Source := HoursConsentLine.Source::"Hour Accounting";
          HoursConsentLine."Line No." := "Line No.";
          HoursConsentLine."Hours Quantity" := "Total Line";

          //>>RFC151
          HoursConsentLine."Team Code" := "Team Code";
          HoursConsentLine.CombinedWTEEKey := "Wage Component" +','+ "Team Code" +','+ Element +','+ "Extension Contract"; //180412
          //<<RFC151

          //>>RFC152
          HoursConsentLine.Comment := Comment;
          //<<RFC152

          //>>IME-087
          //HoursConsentLine.Amount := "Amount (LCY)";
          IF "Excl. from Normal&Extra Hours" THEN
      //>>RFC226,190723
      //      HoursConsentLine.Amount := "Amount (LCY)" * "Total Line"
            HoursConsentLine.Amount := "Unit Cost (LCY)" * "Total Line"
      //<<
          ELSE
            HoursConsentLine.Amount := "Amount (LCY)";
          //IME-087
          HoursConsentLine.Type := DetermineHoursConsentLineType(Rec);
          HoursConsentLine."No." := DetermineHoursConsentLineNo(Rec);
          HoursConsentLine."Global Dimension 1 Code" := Employee."Global Dimension 1 Code";
          HoursConsentLine."Supplying Company" := "Supplying Company";
          HoursConsentLine."Receiving Company" := "Receiving Company";
        //kkleermaker.sn, 110818, M28423
          HoursConsentLine.Element := Element;
          HoursConsentLine."Extension Contract" := "Extension Contract";
        //kkleermaker.en, 110818, M28423

          HoursConsentLine.Quantity := Quantity; // SESB.I035.I036 VKO 12.07.2012

          //>>IME-123
          HoursConsentLine."Component Type" := "Component Type";
          //<<IME-123

          HoursConsentLine.INSERT(TRUE);


          // SESB.I031 ASH 15.07.2013 >>
          ProjectLineInserted := TRUE;
          IF CheckUserIsConsenter(HoursConsentLine.Approver,USERID) THEN
            HoursConsentLine.ConsentNormalLine;
          // SESB.I031 ASH 15.07.2013 <<
          //>>140327 ITERO.DJ 4PS-028
            //HoursConsentLine.HourAccountingCheck(HoursConsentLine); //4PSSE.o 171212
          //<<4PS-028

        END;

      END;

      // SESB.I026 ASH 15.07.2013 >>
      CASE Type OF
        Type::Project:
          IF ProjectLineInserted THEN
            AllHourSerialNumber := SerialNumber
          ELSE
            AllHourSerialNumber := FindLastSerialNumber + 1;
        Type::Indirect:
          AllHourSerialNumber := 0;
        ELSE
          EXIT; // Do not check for "All Hours" consent lines
      END;

      IF GetAllHourConsenterInfo(AllHourSerialNumber,AllHourConsenter,ProjectLineInserted) AND
        (AllHourConsenter <> Consenter)
      THEN BEGIN
        Employee.GET("Employee No.");    // <- 140919 ITERO.DL

        // SESB.I026 VKO 26.07.2013 >>
        HoursConsentLine.RESET;
        HoursConsentLine.SETRANGE(Year,Year);
        HoursConsentLine.SETRANGE(Week,Week);
        HoursConsentLine.SETRANGE(Employee,"Employee No.");
        HoursConsentLine.SETRANGE(LineType,HoursConsentLine.LineType::Normal);
        HoursConsentLine.SETRANGE("Serial Number",AllHourSerialNumber);
        HoursConsentLine.SETRANGE("Line No.","Line No.");
        HoursConsentLine.SETRANGE(Type,DetermineHoursConsentLineType(Rec));
        HoursConsentLine.SETRANGE("No.",DetermineHoursConsentLineNo(Rec));
        HoursConsentLine.SETRANGE(Approver,AllHourConsenter);
        //180412.sn
        //HoursConsentLine.SETRANGE(Denied, FALSE); //180502
        //HoursConsentLine.SETRANGE(Consent, FALSE);  //180502
        HoursConsentLine.SETRANGE(Source, HoursConsentLine.Source::"Hour Accounting");
        HoursConsentLine.SETRANGE("Supplying Company", '');
        //180412.en
        //>>140410 ITERO.GH
        HoursConsentLine.SETRANGE("Component Type" , "Component Type");
        //>>GHE 131115
        //HoursConsentLine.SETRANGE("Wage Component","Wage Component");
        //<<GHE 131115
        //<<140410 ITERO.GH
        //HoursConsentLine.SETRANGE("Team Code", "Team Code");  //180412 RFC151
        HoursConsentLine.SETRANGE(CombinedWTEEKey, "Wage Component" +','+ "Team Code" +','+ Element +','+ "Extension Contract");  //180412
        IF HoursConsentLine.ISEMPTY THEN BEGIN
          HoursConsentLine.INIT;
          HoursConsentLine.Approver := Consenter;
          HoursConsentLine.Year := Year;
          HoursConsentLine.Week := Week;
          HoursConsentLine.Employee := "Employee No.";
          HoursConsentLine."Wage Component" := "Wage Component";
          //>>140418 IME-123 WvG
          HoursConsentLine."Component Type" := "Component Type";
          //<<140418 IME-123 WvG
          HoursConsentLine."Cost Object" := "Cost Object";
          HoursConsentLine.LineType := HoursConsentLine.LineType::Normal;
          HoursConsentLine."Serial Number" := AllHourSerialNumber;
          HoursConsentLine."Line No." := "Line No.";
          HoursConsentLine."Hours Quantity" := "Total Line";

          //>>RFC151
          HoursConsentLine."Team Code" := "Team Code";
          HoursConsentLine.CombinedWTEEKey := "Wage Component" +','+ "Team Code" +','+ Element +','+ "Extension Contract"; //180412
          //<<RFC151

          //>>RFC152
          HoursConsentLine.Comment := Comment;
          //<<RFC152
          HoursConsentLine.Source := HoursConsentLine.Source::"Hour Accounting";
          HoursConsentLine."Line No." := "Line No.";
          HoursConsentLine."Hours Quantity" := "Total Line";
          //>>140418 IME-123 WvG
          //HoursConsentLine.Amount := "Amount (LCY)";
          IF "Excl. from Normal&Extra Hours" THEN
      //>>RFC226,190723
      //      HoursConsentLine.Amount := "Amount (LCY)" * "Total Line"
            HoursConsentLine.Amount := "Unit Cost (LCY)" * "Total Line"
      //<<RFC226
          ELSE
            HoursConsentLine.Amount := "Amount (LCY)";
          //<<140418 IME-123 WvG
          HoursConsentLine.Type := DetermineHoursConsentLineType(Rec);
          HoursConsentLine."No." := DetermineHoursConsentLineNo(Rec);
          HoursConsentLine."Global Dimension 1 Code" := Employee."Global Dimension 1 Code";
          HoursConsentLine."Supplying Company" := "Supplying Company";
          HoursConsentLine."Receiving Company" := "Receiving Company";
        //kkleermaker.sn, 110818, M28423
          HoursConsentLine.Element := Element;
          HoursConsentLine."Extension Contract" := "Extension Contract";
          HoursConsentLine.Quantity := Quantity; // SESB.I035.I036 VKO 12.07.2012
        //kkleermaker.en, 110818, M28423
          //Call C028290 sn
          HoursConsentLine."Plant Company" := "Receiving Company";
          HoursConsentLine."Plant Type" := "Plant Type";
          HoursConsentLine."Plant No." := "Plant No.";
          //Call C028290 en
          HoursConsentLine."Start Time" := "Start Time"; //Call C024380
          HoursConsentLine."End Time" := "End Time"; //Call C024380
          // SESB.I026 VKO 26.07.2013 <<
          HoursConsentLine.Approver := AllHourConsenter;
          HoursConsentLine."Serial Number" := AllHourSerialNumber;
          // SESB.I026 ASH 15.07.2013 <<

          HoursConsentLine.INSERT(TRUE);

          // SESB.I031 ASH 15.07.2013 >>
          IF CheckUserIsConsenter(HoursConsentLine.Approver,USERID) THEN
            HoursConsentLine.ConsentNormalLine;
          // SESB.I031 ASH 15.07.2013 <<
          //>>140327 ITERO.DJ 4PS-028
            //HoursConsentLine.HourAccountingCheck(HoursConsentLine); //4PSSE.o 171212
          //<<4PS-028
        END;
      END;
    END;

    PROCEDURE GetHourConsenterInfo@1100528401(VAR SerialNumber@1100528400 : Integer;VAR Consenter@1100528401 : Code[50];MinimumSerialNo@1100528407 : Integer) : Boolean;
    VAR
      HoursConsentSetup@1100528406 : Record 11020436;
    BEGIN
      // EXIT(HoursConsentSetup.GetHourConsenterInfo(
      //  SerialNumber, Consenter, HoursConsentSetup.Source::"Hour Accounting", DetermineHoursConsentLineType(Rec),
      //  "Project No.", "Service Contract No.", "Service Order No.", "Employee No.", "Plant Location", "Receiving Company",
      // //>>RFC086
      //  //"Supplying Company", MinimumSerialNo));
      //  "Supplying Company", MinimumSerialNo, "Shortcut Dimension 1 Code"));
      // //<<RFC086
    END;

    PROCEDURE GetApplicableHoursConsentSetup@1100528405(VAR HoursConsentSetup@1100528400 : Record 11020436;MinimumSerialNo@1100528401 : Integer) : Boolean;
    BEGIN
      EXIT(HoursConsentSetup.GetApplicableHoursConsentSetup(
        HoursConsentSetup, HoursConsentSetup.Source::"Hour Accounting", DetermineHoursConsentLineType(Rec), "Project No.",
        "Service Contract No.", "Service Order No.", "Employee No.", "Plant Location", MinimumSerialNo));
    END;

    LOCAL PROCEDURE GetUserIDOfEmployee@1100528414(EmployeeNo@1100528400 : Code[20]) : Code[50];
    VAR
      UserSetup@1100528401 : Record 91;
      Employee@1100528402 : Record 5200;
    BEGIN
      UserSetup.SETCURRENTKEY("Employee No.");
      UserSetup.SETRANGE("Employee No.", EmployeeNo);
      IF UserSetup.FINDFIRST THEN
        EXIT(UserSetup."User ID")
      ELSE
        ERROR(Text1100018, Employee.TABLECAPTION, EmployeeNo, UserSetup.TABLECAPTION);
    END;

    LOCAL PROCEDURE DetermineHoursConsentLineType@1100528403(HourAccountingLine@1100528400 : Record 11012039) : Integer;
    VAR
      HoursConsentLine@1100528401 : Record 11020437;
    BEGIN
      CASE HourAccountingLine.Type OF
        HourAccountingLine.Type::Project:
          EXIT(HoursConsentLine.Type::Project);
        HourAccountingLine.Type::Service:
          EXIT(HoursConsentLine.Type::Service);
        HourAccountingLine.Type::Indirect:
          EXIT(HoursConsentLine.Type::Indirect);
        HourAccountingLine.Type::Plant:
          EXIT(HoursConsentLine.Type::Plant);
        HourAccountingLine.Type::ResourceRequest:
          EXIT(HoursConsentLine.Type::ResourceRequest);
      END;
    END;

    LOCAL PROCEDURE DetermineHoursConsentLineNo@1100528402(HourAccountingLine@1100528400 : Record 11012039) : Code[20];
    BEGIN
      CASE HourAccountingLine.Type OF
        HourAccountingLine.Type::Project:
          EXIT(HourAccountingLine."Project No.");
        HourAccountingLine.Type::Service:
          EXIT(HourAccountingLine."Service Contract No.");
        HourAccountingLine.Type::Indirect:
          EXIT(HourAccountingLine."Cost Code");
        HourAccountingLine.Type::Plant:
          EXIT(HourAccountingLine."Plant Location");
        HourAccountingLine.Type::ResourceRequest:
          EXIT(HourAccountingLine."Resource Request No.");
      END;
    END;

    PROCEDURE GetNextFreeLineNo@1100528700() : Integer;
    VAR
      HourAccountingLine@1100528700 : Record 11012039;
    BEGIN
      HourAccountingLine := Rec;
      HourAccountingLine.RESET;
      HourAccountingLine.SETRANGE(Year, Year);
      HourAccountingLine.SETRANGE(Week, Week);
      HourAccountingLine.SETRANGE("Employee No.", "Employee No.");
      IF HourAccountingLine.FINDLAST THEN
        EXIT(HourAccountingLine."Line No." + 10000)
      ELSE
        EXIT(10000);
    END;

    PROCEDURE FillDepartmentCode@1100409000();
    VAR
      TableID@1100409001 : ARRAY [10] OF Integer;
      No@1100409000 : ARRAY [10] OF Code[40];
      GlobalDim1Code@1100409003 : Code[20];
      GlobalDim2Code@1100409002 : Code[20];
    BEGIN
      IF ("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME) AND (Type <> Type::Indirect) THEN BEGIN
        VALIDATE("Department Code",  '');
        EXIT;
      END;

      IF ("Supplying Company" <> '') AND ("Supplying Company" <> COMPANYNAME) THEN BEGIN //**CALL C005231 snew
        IF Type = Type::Indirect THEN BEGIN
          VALIDATE("Department Code",  '');
          EXIT;
        END;
      END;                                                                               //**CALL C005231 enew

      IF Type <> Type::Indirect THEN BEGIN
        IF Type <> Type::ResourceRequest THEN BEGIN
          IF "Service Order No." <> '' THEN BEGIN
            ServOrderRec.GET("Service Order No.");
            IF "Additional Cost (Service)" THEN
              GlobalDim1Code := ServOrderRec."Department Code (Other)"
            ELSE
              GlobalDim1Code := ServOrderRec."Global Dimension 1 Code";
          END ELSE BEGIN
            TableID[1] := DATABASE::Job;
            No[1] := "Project No.";
            TableID[2] := DATABASE::"Service Order";
            No[2] := "Service Order No.";
            TableID[3] := DATABASE::"Service-Contract";
            No[3] := "Service Contract No.";
            TableID[4] := DATABASE::"Plant Number";
            No[4] := DimMgt.MakeCombinedPlantNo("Plant Type", "Plant No.");
            TableID[5] := DATABASE::"Plant Type";
            No[5] := "Plant Type";

            DimMgt.SetCompany("Receiving Company");
            DimMgt.SetSkipDepartmentAuthorization(TRUE); //TestCall T006969
            "Dimension Set ID" :=
              DimMgt.GetDefaultDimID(TableID,No,'',GlobalDim1Code,GlobalDim2Code, 0,0);
            DimMgt.SetSkipDepartmentAuthorization(FALSE); //TestCall T006969
            DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GlobalDim1Code,GlobalDim2Code);
          END;
        END ELSE BEGIN
          EmplRec.GET("Employee No.");
          GlobalDim1Code := EmplRec."Global Dimension 1 Code";
          IF (GlobalDim1Code = '') AND (EmplRec."Trade Association" <> '') THEN BEGIN
            IF TradeAssociation.GET(EmplRec."Trade Association") THEN
              GlobalDim1Code := TradeAssociation."Department Code"
          END;
        END;
      END ELSE BEGIN
        IF "Cost Code" = '' THEN BEGIN  //**CALL C005231 snew
          VALIDATE("Department Code",  '');
          EXIT;
        END;                            //**CALL C005231 enew
        GlobalDim1Code := GetDepartmentCode(FALSE);
      END;

      VALIDATE("Department Code", GlobalDim1Code);
    END;

    PROCEDURE GetDepartmentCode@1100529600(CheckRecords@1100529600 : Boolean) : Code[20];
    BEGIN
      CheckCompanyIC;
      IF CheckRecords THEN
        CostCodeRec.GET("Cost Code")
      ELSE
        IF NOT CostCodeRec.GET("Cost Code") THEN
          CostCodeRec.INIT;

      IF CostCodeRec."Source Global Dim 1 Code" = CostCodeRec."Source Global Dim 1 Code"::Fixed THEN
        EXIT(CostCodeRec."Global Dimension 1 Code");
      EmplRec.GET("Employee No.");
      IF CostCodeRec."Source Global Dim 1 Code" = CostCodeRec."Source Global Dim 1 Code"::Employee THEN
        EXIT(EmplRec."Global Dimension 1 Code");
      IF CheckRecords THEN
        TradeAssociation.GET(EmplRec."Trade Association")
      ELSE
        IF NOT TradeAssociation.GET(EmplRec."Trade Association") THEN
          TradeAssociation.INIT;
      IF TradeAssociation."Source Department Code" = TradeAssociation."Source Department Code"::"Trade Association" THEN
        EXIT(TradeAssociation."Department Code")
      ELSE
        EXIT(EmplRec."Global Dimension 1 Code");
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      //Show only, not editable
      DimMgt.SetCompany("Receiving Company");
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3 %4',Year,Week,"Employee No.","Line No."));
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(11012039) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 11012039');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Hour Accounting", "Department Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Department Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Department Code");
    END;

    PROCEDURE ValidatePlantNo@1100525031();
    VAR
      PlantType@1100525000 : Record 11012551;
      PlantSetup@1100525002 : Record 11012550;
    BEGIN
      //**4PS
      IF ("Plant Type" <> '') AND ("Plant No." = '') THEN BEGIN
        PlantSetup.GET;
        IF PlantSetup."Posting on Unique Plant No." THEN
          IF PlantType.GET("Plant Type") THEN
            IF NOT PlantType.Bulk THEN
              IF PlantSetup."Cost Component Acquisition" <> "Cost Component Plant" THEN
                TESTFIELD("Plant No.");
      END;
    END;

    PROCEDURE GetNoWageComponentTotal@1100528302() Result : Decimal;
    VAR
      HourAccountingLine@1100528700 : Record 11012039;
      PostedHourLine@1100528701 : Record 11012085;
    BEGIN
      Result := 0;

      HourAccountingLine.SETRANGE(Year, Year);
      HourAccountingLine.SETRANGE(Week, Week);
      HourAccountingLine.SETRANGE("Employee No.", "Employee No.");
      HourAccountingLine.SETRANGE("Wage Component", '');
      IF HourAccountingLine.FINDSET THEN
        REPEAT
          Result += HourAccountingLine.Quantity;
          Result += HourAccountingLine."Total Line";
        UNTIL HourAccountingLine.NEXT = 0;

      PostedHourLine.SETRANGE(Year, Year);
      PostedHourLine.SETRANGE(Week, Week);
      PostedHourLine.SETRANGE("Employee No.", "Employee No.");
      PostedHourLine.SETRANGE("Wage Component", '');
      IF PostedHourLine.FINDSET THEN
        REPEAT
          Result += PostedHourLine.Quantity;
          Result += PostedHourLine."Total Line";
        UNTIL PostedHourLine.NEXT = 0;

      EXIT(Result);
    END;

    PROCEDURE GetHoursFromChangeRequestTasks@1100528301(HourAccounting@1100528302 : Record 11012038);
    VAR
      ServiceSetup@1100528304 : Record 11012800;
      ChangeRequestTaskHourAcc@1100528300 : Record 11072222;
      HourAccountingLine@1100528301 : Record 11012039;
      ChangeRequestTask@1100528303 : Record 11072214;
    BEGIN
      ServiceSetup.GET;
      ServiceSetup.TESTFIELD("Default Hour Cost Cd ChangeReq");

      ChangeRequestTaskHourAcc.SETRANGE("Employee No.", HourAccounting."Employee No.");
      ChangeRequestTaskHourAcc.SETRANGE(Year, HourAccounting.Year);
      ChangeRequestTaskHourAcc.SETRANGE(Week, HourAccounting.Week);
      ChangeRequestTaskHourAcc.SETRANGE(Processed, FALSE);
      IF (NOT ChangeRequestTaskHourAcc.FINDSET(TRUE)) THEN
        EXIT;

      REPEAT
        HourAccountingLine.InitRecord;
        HourAccountingLine.VALIDATE(Year, ChangeRequestTaskHourAcc.Year);
        HourAccountingLine.VALIDATE(Week, ChangeRequestTaskHourAcc.Week);
        HourAccountingLine.VALIDATE("Employee No.", ChangeRequestTaskHourAcc."Employee No.");
        HourAccountingLine.VALIDATE("Supplying Company", HourAccounting."Supplying Company");
        HourAccountingLine."Line No." := HourAccountingLine.GetNextFreeLineNo;
        HourAccountingLine.VALIDATE(Type, HourAccountingLine.Type::Indirect);
        HourAccountingLine.VALIDATE("Cost Code", ServiceSetup."Default Hour Cost Cd ChangeReq");
        CASE ChangeRequestTaskHourAcc.Day OF
          ChangeRequestTaskHourAcc.Day::Monday:
            HourAccountingLine.VALIDATE(Monday, ChangeRequestTaskHourAcc.Hours);
          ChangeRequestTaskHourAcc.Day::Tuesday:
            HourAccountingLine.VALIDATE(Tuesday, ChangeRequestTaskHourAcc.Hours);
          ChangeRequestTaskHourAcc.Day::Wednesday:
            HourAccountingLine.VALIDATE(Wednesday, ChangeRequestTaskHourAcc.Hours);
          ChangeRequestTaskHourAcc.Day::Thursday:
            HourAccountingLine.VALIDATE(Thursday, ChangeRequestTaskHourAcc.Hours);
          ChangeRequestTaskHourAcc.Day::Friday:
            HourAccountingLine.VALIDATE(Friday, ChangeRequestTaskHourAcc.Hours);
          ChangeRequestTaskHourAcc.Day::Saturday:
            HourAccountingLine.VALIDATE(Saturday, ChangeRequestTaskHourAcc.Hours);
          ChangeRequestTaskHourAcc.Day::Sunday:
            HourAccountingLine.VALIDATE(Sunday, ChangeRequestTaskHourAcc.Hours);
        END;
        IF (HourAccountingLine."Total Line" <> 0) THEN BEGIN
          HourAccountingLine.Comment := COPYSTR(STRSUBSTNO('%1: %2-%3', ChangeRequestTask.TABLECAPTION,
            ChangeRequestTaskHourAcc."Change Request No.", ChangeRequestTaskHourAcc.Task), 1, MAXSTRLEN(HourAccountingLine.Comment));
          HourAccountingLine.INSERT(TRUE);

          //ChangeRequestTaskHourAcc.Processed := true;
          //ChangeRequestTaskHourAcc.modify(true);
        END;
      UNTIL (ChangeRequestTaskHourAcc.NEXT = 0);
    END;

    PROCEDURE LookupCostCode@1100528406();
    BEGIN
      CheckCompanyIC;
      CostCodeRec.Code := "Cost Code";
      IF PAGE.RUNMODAL(0, CostCodeRec) = ACTION::LookupOK THEN BEGIN
        CurrFieldNo := FIELDNO("Cost Code");
        IF Type = Type::Indirect THEN
          VALIDATE("Cost Code", CostCodeRec.Code);
      END;
    END;

    PROCEDURE LookupProjectNo@1100528409();
    VAR
      PageNo@1100528400 : Integer;
    BEGIN
      CheckCompanyIC;
      ProjRec."No." := "Project No.";
      IF RefersToOtherCompany THEN
        PageNo := PAGE::"Job List IC";
      IF PAGE.RUNMODAL(PageNo, ProjRec) = ACTION::LookupOK THEN
        IF (Type = Type::Project) AND ("Connection No." = 0) THEN
          VALIDATE("Project No.", ProjRec."No.");
    END;

    PROCEDURE LookupCostObject@1100528410();
    BEGIN
      CheckCompanyIC;

      DimValRec.RESET;
      DimValRec.Code := "Cost Object";
      DimValRec.SETRANGE("Global Dimension No.", 2);
      //DP01010.sn
      IF External THEN
        DimValRec.SETFILTER("Cost Type",'%1|%2|%3|%4',
          DimValRec."Cost Type"::Labor,DimValRec."Cost Type"::Subcontracting,DimValRec."Cost Type"::Plant,DimValRec."Cost Type"::Sundry)
      ELSE
      //DP01010.en
        DimValRec.SETFILTER("Cost Type",'%1|%2|%3',
          DimValRec."Cost Type"::Labor,DimValRec."Cost Type"::Plant,DimValRec."Cost Type"::Sundry);
      DimValRec.SETRANGE("Project Filter", "Project No.");
      IF "Receiving Company" = '' THEN
        DimValRec.SETRANGE("Company Filter")
      ELSE
        DimValRec.SETRANGE("Company Filter", "Receiving Company");
      IF PAGE.RUNMODAL(PAGE::"Cost Object List", DimValRec) = ACTION::LookupOK THEN BEGIN
        CurrFieldNo := FIELDNO("Cost Object");
        VALIDATE("Cost Object", DimValRec.Code);
      END;
      DimValRec.RESET;
    END;

    LOCAL PROCEDURE LookupHourLineTemplate@1100528000();
    VAR
      HourLineTemplate@1100528000 : Record 11229799;
    BEGIN
      HourLineTemplate.Code := "Hour Line Template Code";
      IF "Receiving Company" = '' THEN
        HourLineTemplate.SETRANGE("Receiving Company", COMPANYNAME)
      ELSE
        HourLineTemplate.SETRANGE("Receiving Company", "Receiving Company");
      CASE Type OF
        Type::Indirect: HourLineTemplate.SETRANGE(Type, HourLineTemplate.Type::Indirect);
        Type::Plant: HourLineTemplate.SETRANGE(Type, HourLineTemplate.Type::Plant);
        Type::Project: HourLineTemplate.SETRANGE(Type, HourLineTemplate.Type::Project);
        Type::Service: HourLineTemplate.SETRANGE(Type, HourLineTemplate.Type::Service);
      ELSE
        EXIT;
      END;
      IF PAGE.RUNMODAL(PAGE::"Hour Line Template List", HourLineTemplate) = ACTION::LookupOK THEN
        VALIDATE("Hour Line Template Code", HourLineTemplate.Code);
    END;

    LOCAL PROCEDURE LookupDepartmentCode@1100529601();
    BEGIN
      CheckCompanyIC;

      DimValRec.RESET;
      DimValRec.Code := "Department Code";
      DimValRec.SETRANGE("Global Dimension No.", 1);

      IF PAGE.RUNMODAL(0, DimValRec) = ACTION::LookupOK THEN
        VALIDATE("Department Code", DimValRec.Code);

      DimValRec.RESET;
    END;

    PROCEDURE GetLastLineNo@1100528303() : Integer;
    VAR
      HourAccountingLine@1100528300 : Record 11012039;
    BEGIN
      HourAccountingLine.SETRANGE(Year, Year);
      HourAccountingLine.SETRANGE(Week, Week);
      HourAccountingLine.SETRANGE("Employee No.", "Employee No.");
      IF (HourAccountingLine.FINDLAST) THEN
        EXIT(HourAccountingLine."Line No.");
      EXIT(0);
    END;

    PROCEDURE GetServiceOrProjectAddress@1100529100() Address : Text[250];
    VAR
      Job@1100529101 : Record 11072003;
      ServiceOrder@1100529102 : Record 11012823;
      ServiceContract@1100529103 : Record 11012812;
    BEGIN
      IF "Project No." <> '' THEN BEGIN
        Job.CHANGECOMPANY("Receiving Company");
        IF Job.GET("Project No.") THEN
          Address := Job.Address;
      END;
      IF ("Service Order No." = '') AND ("Service Contract No." <> '') THEN BEGIN
        ServiceContract.CHANGECOMPANY("Receiving Company");
        IF ServiceContract.GET("Service Contract No.") THEN
          Address := ServiceContract.Address;
      END;
      IF "Service Order No." <> '' THEN BEGIN
        ServiceOrder.CHANGECOMPANY("Receiving Company");
        IF ServiceOrder.GET("Service Order No.") THEN
          Address := ServiceOrder.Address;
      END;
    END;

    PROCEDURE CheckFieldLimits@1100294000(lvCurrFieldNo@1100294007 : Integer;Value@1100294001 : Decimal);
    VAR
      HourLine@1100294000 : Record 11012039;
      RecRef@1100294002 : RecordRef;
      FieldRef@1100294003 : FieldRef;
      TotalValue@1100294005 : Decimal;
      tValue@1100294006 : Decimal;
      LineNo@1100294008 : Integer;
      lvCurrFieldNo1@1100294009 : Integer;
    BEGIN
      // SESB.I033 ASH 03.07.2013 >>
      IF Value <> 0 THEN
        IF WageCompRec.GET("Wage Component") THEN BEGIN

          IF gFromHourAccByProj THEN BEGIN
            HourLine.SETCURRENTKEY("Connection No.");
            HourLine.SETRANGE("Connection No.","Connection No.");
            HourLine.SETRANGE("Employee No.","Employee No.");
            IF HourLine.FINDLAST THEN
              LineNo := HourLine."Line No."
            ELSE
              LineNo := 0;
          END ELSE
            LineNo := "Line No.";

          HourLine.RESET;
          HourLine.SETCURRENTKEY("Document No.","Employee No.",Year,Week,"Wage Component");
          HourLine.SETRANGE(Year,Year);
          HourLine.SETRANGE(Week,Week);
          HourLine.SETRANGE("Employee No.","Employee No.");
          HourLine.SETFILTER("Line No.",'<>%1',LineNo);
          HourLine.SETRANGE("Wage Component","Wage Component");
          HourLine.CALCSUMS(Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday,"Amount (LCY)",Quantity);

          CASE lvCurrFieldNo OF
            FIELDNO(Quantity):
              BEGIN
                TotalValue := Value + HourLine.Quantity;

                IF ((WageCompRec."Minimum Quantity a Week" <> 0) AND ((Value < WageCompRec."Minimum Quantity a Week") OR
                  (TotalValue < WageCompRec."Minimum Quantity a Week"))) OR
                  ((WageCompRec."Maximum Quantity a Week" <> 0) AND (TotalValue > WageCompRec."Maximum Quantity a Week"))
                THEN
                  ERROR(Text11128230,FIELDCAPTION(Quantity),
                    WageCompRec."Minimum Quantity a Week",
                    WageCompRec."Maximum Quantity a Week",
                    FIELDCAPTION("Employee No."),
                    "Employee No.",
                    WageCompRec.TABLECAPTION,
                    WageCompRec.Code);
              END;
            FIELDNO("Amount (LCY)"):
              BEGIN
                TotalValue := Value + HourLine."Amount (LCY)";

                IF ((WageCompRec."Minimum Amount a Week" <> 0) AND ((Value < WageCompRec."Minimum Amount a Week") OR
                  (TotalValue < WageCompRec."Minimum Amount a Week"))) OR
                  ((WageCompRec."Maximum Amount a Week" <> 0) AND (TotalValue > WageCompRec."Maximum Amount a Week"))
                THEN
                  ERROR(Text11128230,FIELDCAPTION("Amount (LCY)"),
                    WageCompRec."Minimum Amount a Week",
                    WageCompRec."Maximum Amount a Week",
                    FIELDCAPTION("Employee No."),
                    "Employee No.",
                    WageCompRec.TABLECAPTION,
                    WageCompRec.Code);
              END;
            FIELDNO(Monday),FIELDNO(Tuesday),
            FIELDNO(Wednesday),FIELDNO(Thursday),
            FIELDNO(Friday),FIELDNO(Saturday),FIELDNO(Sunday),
            FIELDNO(Duration):
              BEGIN
                IF lvCurrFieldNo = FIELDNO(Duration) THEN BEGIN
                  CASE Day OF
                    Day::Monday:
                      lvCurrFieldNo1 := FIELDNO(Monday);
                    Day::Tuesday:
                      lvCurrFieldNo1 := FIELDNO(Tuesday);
                    Day::Wednesday:
                      lvCurrFieldNo1 := FIELDNO(Wednesday);
                    Day::Thursday:
                      lvCurrFieldNo1 := FIELDNO(Thursday);
                    Day::Friday:
                      lvCurrFieldNo1 := FIELDNO(Friday);
                    Day::Saturday:
                      lvCurrFieldNo1 := FIELDNO(Saturday);
                    Day::Sunday:
                      lvCurrFieldNo1 := FIELDNO(Sunday);
                  END;
                END ELSE
                  lvCurrFieldNo1 := lvCurrFieldNo;

                RecRef.GETTABLE(HourLine);
                FieldRef := RecRef.FIELD(lvCurrFieldNo1);
                FieldRef.CALCSUM;
                EVALUATE(TotalValue,FORMAT(FieldRef));
                TotalValue += Value;

                IF ((WageCompRec."Minimum Number of Hours a Day" <> 0) AND ((Value < WageCompRec."Minimum Number of Hours a Day") OR
                  (TotalValue < WageCompRec."Minimum Number of Hours a Day"))) OR
                  ((WageCompRec."Maximum Number of Hours a Day" <> 0) AND (TotalValue > WageCompRec."Maximum Number of Hours a Day"))
                THEN BEGIN
                  RecRef.GETTABLE(Rec);
                  FieldRef := RecRef.FIELD(lvCurrFieldNo);
                  ERROR(Text11128230,FieldRef.CAPTION,
                    WageCompRec."Minimum Number of Hours a Day",
                    WageCompRec."Maximum Number of Hours a Day",
                    FIELDCAPTION("Employee No."),
                    "Employee No.",
                    WageCompRec.TABLECAPTION,
                    WageCompRec.Code);
                END
              END;
          END;
        END;
      // SESB.I033 ASH 03.07.2013 <<
    END;

    PROCEDURE ShowLineComments@61();
    VAR
      HourAccCommentLine@1000 : Record 11128234;
      HourAccCommentSheetForm@1001 : Page 11128234;
      RecRef@1100294000 : RecordRef;
    BEGIN
      // SESB.I039 ASH 05.07.2013 >>
      TESTFIELD(Year);
      TESTFIELD(Week);
      TESTFIELD("Employee No.");
      TESTFIELD("Line No.");
      RecRef.GETTABLE(Rec);
      HourAccCommentLine.SETRANGE("Table Name",HourAccCommentLine."Table Name"::"Hour Accounting Line");
      HourAccCommentLine.SETRANGE("Record ID",RecRef.RECORDID);
      HourAccCommentSheetForm.SETTABLEVIEW(HourAccCommentLine);
      HourAccCommentSheetForm.RUNMODAL;
      // SESB.I039 ASH 05.07.2013 <<
    END;

    PROCEDURE CommentLineExist@1100294001() : Boolean;
    VAR
      RecRef@1210190000 : RecordRef;
      HourAccCommentLine@1100294000 : Record 11128234;
    BEGIN
      // SESB.I039 ASH 05.07.2013 >>
      RecRef.GETTABLE(Rec);
      HourAccCommentLine.SETRANGE("Table Name", HourAccCommentLine."Table Name"::"Hour Accounting Line");
      HourAccCommentLine.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
      EXIT(NOT HourAccCommentLine.ISEMPTY);
      // SESB.I039 ASH 05.07.2013 <<
    END;

    PROCEDURE DeleteLineComments@1100294002();
    VAR
      RecRef@1100294001 : RecordRef;
      HourCommentLine@1100294000 : Record 11128234;
    BEGIN
      // SESB.I031 ASH 12.07.2013 >>
      RecRef.GETTABLE(Rec);
      HourCommentLine.SETRANGE("Table Name", HourCommentLine."Table Name"::"Hour Accounting Line");
      HourCommentLine.SETRANGE("Record ID", RecRef.RECORDID);
      HourCommentLine.DELETEALL;
      // SESB.I031 ASH 12.07.2013 <<
    END;

    PROCEDURE RecIsChanged@1100294003(VAR RecRef@1100294001 : RecordRef;VAR xRecRef@1100294000 : RecordRef) : Boolean;
    VAR
      FldRef@1100294004 : FieldRef;
      xFldRef@1100294003 : FieldRef;
      i@1100294002 : Integer;
      HoursLogEntry@1101285000 : Record 11072025;
    BEGIN
      IF "Status SE" <> "Status SE"::Open THEN    //4psse.n 276488
        // SESB.I031 ASH 12.07.2013 >>
        FOR i := 1 TO RecRef.FIELDCOUNT DO BEGIN
          FldRef := RecRef.FIELDINDEX(i);
          xFldRef := xRecRef.FIELDINDEX(i);
          IF FORMAT(FldRef.VALUE) <> FORMAT(xFldRef.VALUE) THEN
            EXIT(TRUE);
        END;
        // SESB.I031 ASH 12.07.2013 <<
    END;

    PROCEDURE GetAllHourConsenterInfo@1100294004(VAR SerialNumber@1100528400 : Integer;VAR Consenter@1100528401 : Code[20];FirstConsentLine@1100294000 : Boolean) : Boolean;
    VAR
      Employee@1100528405 : Record 5200;
      HoursConsentSetup@1100528406 : Record 11020436;
      DimVal@1101285000 : Record 349;
    BEGIN
      {
            EXIT(HoursConsentSetup.GetHourConsenterInfo(
              SerialNumber, Consenter, HoursConsentSetup.Source::"Hour Accounting", HoursConsentSetup.Type::"All Hours",
              '', '', '', "Employee No.", '', '',
      //>>rfc086
              //"Supplying Company", 0));
              "Supplying Company", 0,"Shortcut Dimension 1 Code"));
      //<<rfc086
      }

      // SESB.I026 ASH 15.07.2013 >>
      HoursConsentSetup.SETRANGE(Type,HoursConsentSetup.Type::"All Hours");
      // SESB.I031 VKO 09.08.2013 >>
      IF FirstConsentLine THEN
        HoursConsentSetup.SETFILTER("Serial Number",'..%1',SerialNumber)
      ELSE
        HoursConsentSetup.SETFILTER("Serial Number",'%1..',SerialNumber);
      // SESB.I031 VKO 09.08.2013 <<
      IF HoursConsentSetup.FINDFIRST THEN BEGIN
        IF HoursConsentSetup.Approver <> '' THEN
          Consenter := HoursConsentSetup.Approver
        ELSE BEGIN
          IF "Supplying Company" <> '' THEN
            EXIT(FALSE); // Consenter (manager of employee) should be employee of current company.
          Employee.GET("Employee No.");
          Employee.TESTFIELD("Manager No.");
      //rfc086
          //Consenter := GetUserIDOfEmployee(Employee."Manager No.");
          IF ("Department Code" = Employee."Global Dimension 1 Code") OR (NOT Employee."Allow other department indir") OR (Type<>Type::Indirect) THEN
            Consenter := GetUserIDOfEmployee(Employee."Manager No.")
          ELSE BEGIN
            GLSetup.GET;
            IF DimVal.GET(GLSetup."Global Dimension 1 Code","Department Code") THEN
              Consenter := GetUserIDOfEmployee(DimVal.CostCenterResponsible);
            IF Consenter = '' THEN
              Consenter := GetUserIDOfEmployee(Employee."Manager No.");
          END;
      //rfc086
        END;
        SerialNumber := HoursConsentSetup."Serial Number";
        EXIT(TRUE);
      END;
      // SESB.I026 ASH 15.07.2013 <<
    END;

    PROCEDURE UpdateLineStatus@1100294005();
    VAR
      lvHoursConsentLine@1100294000 : Record 11020437;
      HoursConsentSetup@1000000000 : Record 11020436;
    BEGIN
      // SESB.I031 ASH 16.07.2013 >>
      lvHoursConsentLine.SETRANGE(Year, Year);
      lvHoursConsentLine.SETRANGE(Week, Week);
      lvHoursConsentLine.SETRANGE(Employee, "Employee No.");
      lvHoursConsentLine.SETRANGE("Line No.", "Line No.");
      lvHoursConsentLine.SETRANGE(LineType, lvHoursConsentLine.LineType::Normal);
      IF lvHoursConsentLine.FINDSET THEN
        REPEAT
          CASE TRUE OF
            lvHoursConsentLine.Consent:
              "Status SE" := "Status SE"::Processed;
            lvHoursConsentLine.Denied:
              "Status SE" := "Status SE"::Cancelled;
            ELSE
              "Status SE" := "Status SE"::Open;
          END;
        UNTIL lvHoursConsentLine.NEXT = 0
      ELSE
        "Status SE" := "Status SE"::Open;
      Changed := FALSE;

      //MODIFY;  //180412
      // SESB.I031 ASH 16.07.2013 <<
    END;

    PROCEDURE CheckUserIsConsenter@1100294007(Consenter@1100294000 : Code[20];ForUserID@1100294004 : Code[20]) : Boolean;
    VAR
      HoursConsenterTemp@1100294003 : TEMPORARY Record 11020438;
      HoursConsenter@1100294002 : Record 11020438;
      ConsenterFilterString@1100294001 : Text[1000];
    BEGIN
      // SESB.I031 VKO 09.08.2013 >>
      ConsenterFilterString := ForUserID;
      HoursConsenter.SETRANGE("User ID Substitute",ForUserID);
      HoursConsenter.SETRANGE("Substitute Active",TRUE);
      IF HoursConsenter.FINDSET THEN
        REPEAT
          ConsenterFilterString := ConsenterFilterString + '|' + HoursConsenter."User ID";
        UNTIL HoursConsenter.NEXT = 0;

      HoursConsenterTemp."User ID" := Consenter;
      HoursConsenterTemp.INSERT;
      HoursConsenterTemp.SETFILTER("User ID",ConsenterFilterString);
      EXIT(NOT HoursConsenterTemp.ISEMPTY);
      // SESB.I031 VKO 09.08.2013 <<
    END;

    PROCEDURE FindLastSerialNumber@1100294006() : Integer;
    VAR
      HoursConsentLine@1100294000 : Record 11020437;
    BEGIN
      // SESB.I031 VKO 09.08.2013 >>
      HoursConsentLine.RESET;
      //HoursConsentLine.SETCURRENTKEY("Serial Number");  //180412
      HoursConsentLine.SETRANGE(Year,Year);
      HoursConsentLine.SETRANGE(Week,Week);
      HoursConsentLine.SETRANGE(Employee,"Employee No.");
      HoursConsentLine.SETRANGE(LineType,HoursConsentLine.LineType::Normal);
      HoursConsentLine.SETRANGE("No.",DetermineHoursConsentLineNo(Rec));
      HoursConsentLine.SETRANGE("Line No.","Line No.");
      IF HoursConsentLine.FINDLAST THEN
        EXIT(HoursConsentLine."Serial Number");

      EXIT(-2147483647);
      // SESB.I031 VKO 09.08.2013 <<
    END;

    PROCEDURE "***4PSSE***"@1100285000();
    BEGIN
    END;

    PROCEDURE GetNormHourMon@1100285001() NormHour : Decimal;
    VAR
      PersonalWorkSchedule@1100285000 : Record 11128051;
      WorkSchedule@1100285001 : Record 11128050;
      EmployeeTimeTable@1100285002 : Record 11012923;
    BEGIN
      IF Week = 0 THEN
        EXIT;
      //4PSSE.I047 130910  Calculate norm hours monday-sunday
      // IF Week <> 0 THEN BEGIN
      PersonalWorkSchedule.SETRANGE("Employee number","Employee No.");
      PersonalWorkSchedule.SETRANGE(Date,DWY2DATE(1,Week,Year));
      IF PersonalWorkSchedule.FINDSET THEN BEGIN
        NormHour:=PersonalWorkSchedule."Norm hours";
        EXIT(NormHour);
      END;

      WorkSchedule.SETRANGE(Date,DWY2DATE(1,Week,Year));
      IF WorkSchedule.FINDSET THEN BEGIN
        NormHour:=WorkSchedule."Norm Hours";

        EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
        //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(1,Week,Year));
        IF EmployeeTimeTable.FINDSET THEN BEGIN
         IF (EmployeeTimeTable.Monday <> 0) AND (EmployeeTimeTable.Monday < NormHour) THEN
            NormHour:=EmployeeTimeTable.Monday;
        END;
        EXIT(NormHour);
      END;

      EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
      //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(1,Week,Year));
      IF EmployeeTimeTable.FINDSET THEN BEGIN
        NormHour:=EmployeeTimeTable.Monday;
        EXIT(NormHour);
      END;
      // END;
    END;

    PROCEDURE GetNormHourTue@1100285009() NormHour : Decimal;
    VAR
      PersonalWorkSchedule@1100285000 : Record 11128051;
      WorkSchedule@1100285001 : Record 11128050;
      EmployeeTimeTable@1100285002 : Record 11012923;
    BEGIN
      IF Week = 0 THEN
        EXIT;
      //4PSSE.I047
      // IF Week <> 0 THEN BEGIN
      PersonalWorkSchedule.SETRANGE("Employee number","Employee No.");
      PersonalWorkSchedule.SETRANGE(Date,DWY2DATE(2,Week,Year));
      IF PersonalWorkSchedule.FINDSET THEN BEGIN
        NormHour:=PersonalWorkSchedule."Norm hours";
        EXIT(NormHour);
      END;

      WorkSchedule.SETRANGE(Date,DWY2DATE(2,Week,Year));
      IF WorkSchedule.FINDSET THEN BEGIN
        NormHour:=WorkSchedule."Norm Hours";

        EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
        //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(2,Week,Year));
        IF EmployeeTimeTable.FINDSET THEN BEGIN
         IF (EmployeeTimeTable.Tuesday <> 0) AND (EmployeeTimeTable.Tuesday < NormHour) THEN
            NormHour:=EmployeeTimeTable.Tuesday;
        END;

        EXIT(NormHour);
      END;

      EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
      //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(2,Week,Year));
      IF EmployeeTimeTable.FINDSET THEN BEGIN
        NormHour:=EmployeeTimeTable.Tuesday;
        EXIT(NormHour);
      END;
      // END;
    END;

    PROCEDURE GetNormHourWed@1100285010() NormHour : Decimal;
    VAR
      PersonalWorkSchedule@1100285000 : Record 11128051;
      WorkSchedule@1100285001 : Record 11128050;
      EmployeeTimeTable@1100285002 : Record 11012923;
    BEGIN
      IF Week = 0 THEN
        EXIT;
      //4PSSE.I047
      // IF Week <> 0 THEN BEGIN
      PersonalWorkSchedule.SETRANGE("Employee number","Employee No.");
      PersonalWorkSchedule.SETRANGE(Date,DWY2DATE(3,Week,Year));
      IF PersonalWorkSchedule.FINDSET THEN BEGIN
        NormHour:=PersonalWorkSchedule."Norm hours";
        EXIT(NormHour);
      END;

      WorkSchedule.SETRANGE(Date,DWY2DATE(3,Week,Year));
      IF WorkSchedule.FINDSET THEN BEGIN
        NormHour:=WorkSchedule."Norm Hours";

        EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
        //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(3,Week,Year));
        IF EmployeeTimeTable.FINDSET THEN BEGIN
         IF (EmployeeTimeTable.Wednesday <> 0) AND (EmployeeTimeTable.Wednesday < NormHour) THEN
            NormHour:=EmployeeTimeTable.Wednesday;
        END;

        EXIT(NormHour);
      END;

      EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
      //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(3,Week,Year));
      IF EmployeeTimeTable.FINDSET THEN BEGIN
        NormHour:=EmployeeTimeTable.Wednesday;
        EXIT(NormHour);
      END;
      // END;
    END;

    PROCEDURE GetNormHourThu@1100285011() NormHour : Decimal;
    VAR
      PersonalWorkSchedule@1100285000 : Record 11128051;
      WorkSchedule@1100285001 : Record 11128050;
      EmployeeTimeTable@1100285002 : Record 11012923;
    BEGIN
      IF Week = 0 THEN
        EXIT;
      //4PSSE.I047
      // IF Week <> 0 THEN BEGIN
      PersonalWorkSchedule.SETRANGE("Employee number","Employee No.");
      PersonalWorkSchedule.SETRANGE(Date,DWY2DATE(4,Week,Year));
      IF PersonalWorkSchedule.FINDSET THEN BEGIN
        NormHour:=PersonalWorkSchedule."Norm hours";
        EXIT(NormHour);
      END;

      WorkSchedule.SETRANGE(Date,DWY2DATE(4,Week,Year));
      IF WorkSchedule.FINDSET THEN BEGIN
        NormHour:=WorkSchedule."Norm Hours";

        EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
        //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(4,Week,Year));
        IF EmployeeTimeTable.FINDSET THEN BEGIN
         IF (EmployeeTimeTable.Thursday <> 0) AND (EmployeeTimeTable.Thursday < NormHour) THEN
            NormHour:=EmployeeTimeTable.Thursday;
        END;

        EXIT(NormHour);
      END;

      EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
      //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(4,Week,Year));
      IF EmployeeTimeTable.FINDSET THEN BEGIN
        NormHour:=EmployeeTimeTable.Thursday;
        EXIT(NormHour);
      END;
      // END;
    END;

    PROCEDURE GetNormHourFri@1100285012() NormHour : Decimal;
    VAR
      PersonalWorkSchedule@1100285000 : Record 11128051;
      WorkSchedule@1100285001 : Record 11128050;
      EmployeeTimeTable@1100285002 : Record 11012923;
    BEGIN
      IF Week = 0 THEN
        EXIT;
      //4PSSE.I047
      // IF Week <> 0 THEN BEGIN
      PersonalWorkSchedule.SETRANGE("Employee number","Employee No.");
      PersonalWorkSchedule.SETRANGE(Date,DWY2DATE(5,Week,Year));
      IF PersonalWorkSchedule.FINDSET THEN BEGIN
        NormHour:=PersonalWorkSchedule."Norm hours";
        EXIT(NormHour);
      END;

      WorkSchedule.SETRANGE(Date,DWY2DATE(5,Week,Year));
      IF WorkSchedule.FINDSET THEN BEGIN
        NormHour:=WorkSchedule."Norm Hours";

        EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
        //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(5,Week,Year));
        IF EmployeeTimeTable.FINDSET THEN BEGIN
         IF (EmployeeTimeTable.Friday <> 0) AND (EmployeeTimeTable.Friday < NormHour) THEN
            NormHour:=EmployeeTimeTable.Friday;
        END;

        EXIT(NormHour);
      END;

      EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
      //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(5,Week,Year));
      IF EmployeeTimeTable.FINDSET THEN BEGIN
        NormHour:=EmployeeTimeTable.Friday;
        EXIT(NormHour);
      END;
      // END;
    END;

    PROCEDURE GetNormHourSat@1100285013() NormHour : Decimal;
    VAR
      PersonalWorkSchedule@1100285000 : Record 11128051;
      WorkSchedule@1100285001 : Record 11128050;
      EmployeeTimeTable@1100285002 : Record 11012923;
    BEGIN
      IF Week = 0 THEN
        EXIT;
      //4PSSE.I047
      // IF Week <> 0 THEN BEGIN
      PersonalWorkSchedule.SETRANGE("Employee number","Employee No.");
      PersonalWorkSchedule.SETRANGE(Date,DWY2DATE(6,Week,Year));
      IF PersonalWorkSchedule.FINDSET THEN BEGIN
        NormHour:=PersonalWorkSchedule."Norm hours";
        EXIT(NormHour);
      END;

      WorkSchedule.SETRANGE(Date,DWY2DATE(6,Week,Year));
      IF WorkSchedule.FINDSET THEN BEGIN
        NormHour:=WorkSchedule."Norm Hours";

        EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
        //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(6,Week,Year));
        IF EmployeeTimeTable.FINDSET THEN BEGIN
         IF (EmployeeTimeTable.Saturday <> 0) AND (EmployeeTimeTable.Saturday < NormHour) THEN
            NormHour:=EmployeeTimeTable.Saturday;
        END;

        EXIT(NormHour);
      END;

      EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
      //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(6,Week,Year));
      IF EmployeeTimeTable.FINDSET THEN BEGIN
        NormHour:=EmployeeTimeTable.Saturday;
        EXIT(NormHour);
      END;
      // END;
    END;

    PROCEDURE GetNormHourSun@1100285014() NormHour : Decimal;
    VAR
      PersonalWorkSchedule@1100285000 : Record 11128051;
      WorkSchedule@1100285001 : Record 11128050;
      EmployeeTimeTable@1100285002 : Record 11012923;
    BEGIN
      IF Week = 0 THEN
        EXIT;
      //4PSSE.I047
      // IF Week <> 0 THEN BEGIN
      PersonalWorkSchedule.SETRANGE("Employee number","Employee No.");
      PersonalWorkSchedule.SETRANGE(Date,DWY2DATE(7,Week,Year));
      IF PersonalWorkSchedule.FINDSET THEN BEGIN
        NormHour:=PersonalWorkSchedule."Norm hours";
        EXIT(NormHour);
      END;

      WorkSchedule.SETRANGE(Date,DWY2DATE(7,Week,Year));
      IF WorkSchedule.FINDSET THEN BEGIN
        NormHour:=WorkSchedule."Norm Hours";

        EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
        //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(7,Week,Year));
        IF EmployeeTimeTable.FINDSET THEN BEGIN
         IF (EmployeeTimeTable.Sunday <> 0) AND (EmployeeTimeTable.Sunday < NormHour) THEN
            NormHour:=EmployeeTimeTable.Sunday;
        END;

        EXIT(NormHour);
      END;

      EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
      //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(7,Week,Year));
      IF EmployeeTimeTable.FINDSET THEN BEGIN
        NormHour:=EmployeeTimeTable.Sunday;
        EXIT(NormHour);
      END;
      // END;
      //>>
    END;

    PROCEDURE GetDiffMon@1100285002() DiffMon : Decimal;
    VAR
      Norm@1100285000 : Decimal;
    BEGIN
      //4PSSE.I047 130911 Calculate difference between "Norm" and "Normal" hours
      Norm:=GetNormHourMon;
      CALCFIELDS("Total Monday");
      DiffMon:=Norm-"Total Monday";
      EXIT(DiffMon);
    END;

    PROCEDURE GetDiffTue@1100285003() DiffTue : Decimal;
    VAR
      Norm@1100285000 : Decimal;
    BEGIN
      //4PSSE.I047

      Norm:=GetNormHourTue;
      CALCFIELDS("Total Tuesday");
      DiffTue:=Norm-"Total Tuesday";
      EXIT(DiffTue);
    END;

    PROCEDURE GetDiffWed@1100285004() DiffWed : Decimal;
    VAR
      Norm@1100285000 : Decimal;
    BEGIN
      //4PSSE.I047

      Norm:=GetNormHourWed;
      CALCFIELDS("Total Wednesday");
      DiffWed:=Norm-"Total Wednesday";
      EXIT(DiffWed);
    END;

    PROCEDURE GetDiffThu@1100285005() DiffThu : Decimal;
    VAR
      Norm@1100285000 : Decimal;
    BEGIN
      //4PSSE.I047

      Norm:=GetNormHourThu;
      CALCFIELDS("Total Thursday");
      DiffThu:=Norm-"Total Thursday";
      EXIT(DiffThu);
    END;

    PROCEDURE GetDiffFri@1100285006() DiffFri : Decimal;
    VAR
      Norm@1100285000 : Decimal;
    BEGIN
      //4PSSE.I047

      Norm:=GetNormHourFri;
      CALCFIELDS("Total Friday");
      DiffFri:=Norm-"Total Friday";
      EXIT(DiffFri);
    END;

    PROCEDURE GetDiffSat@1100285007() DiffSat : Decimal;
    VAR
      Norm@1100285000 : Decimal;
    BEGIN

      Norm:=GetNormHourSat;
      CALCFIELDS("Total Saturday");
      DiffSat:=Norm-"Total Saturday";
      EXIT(DiffSat);
    END;

    PROCEDURE GetDiffSun@1100285008() DiffSun : Decimal;
    VAR
      Norm@1100285000 : Decimal;
    BEGIN
      //4PSSE.I047

      Norm:=GetNormHourSun;
      CALCFIELDS("Total Sunday");
      DiffSun:=Norm-"Total Sunday";
      EXIT(DiffSun);
      //<<
    END;

    LOCAL PROCEDURE GetCaptionClass@34(FieldNumber@1100285001 : Integer;DayNo@1100285005 : Integer) : Text[80];
    VAR
      CaptionField@1100285000 : Text[30];
      Datetxt@1100285002 : Text[30];
      Date@1100285003 : Date;
      Caption@1100285004 : Text[50];
      HourAccounting@1100285006 : Record 11012038;
    BEGIN
      //4PSSE.I047 130912 Dynamic captions to add date to weekday
      IF HourAccounting.GET(Year,Week,"Employee No.") THEN BEGIN

        Date:=DWY2DATE(DayNo,Week,Year);

        Datetxt:=FORMAT(Date,0,'<Year,2>-<Month,2>-<Day,2>');

        CaptionField:=GetFieldCaption(FieldNumber);

        Caption:= CaptionField + ' ' + Datetxt;

        EXIT('3,' + Caption);

      END;
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      //4PSSE.I047
      Field.GET(DATABASE::"Hour Accounting Line",FieldNumber);
      EXIT(Field."Field Caption");
    END;

    PROCEDURE UpdateActualDateOnTheLine@1100285500();
    BEGIN
      //>>141103, ENH050, save last date with day-value

      //WvG: With days you don't have to do anything
      IF "Component Type" = "Component Type"::Days THEN
        EXIT;

      //WvG: AnvÑnd datum av fredag fîr utgifter, det Ñr standard funktionalitet.
      "Actual date of line":= DWY2DATE(5,Week,Year);
      IF "Component Type" = "Component Type"::Expenses THEN
        EXIT;

      //WvG: Spara sista dagen som finns pÜ raden.
      IF Sunday<>0 THEN "Actual date of line" := DWY2DATE(7,Week,Year) ELSE
      IF Saturday<>0 THEN "Actual date of line" := DWY2DATE(6,Week,Year) ELSE
      IF Friday<>0 THEN "Actual date of line" := DWY2DATE(5,Week,Year) ELSE
      IF Thursday<>0 THEN "Actual date of line" := DWY2DATE(4,Week,Year) ELSE
      IF Wednesday<>0 THEN "Actual date of line" := DWY2DATE(3,Week,Year) ELSE
      IF Tuesday<>0 THEN "Actual date of line" := DWY2DATE(2,Week,Year) ELSE
      IF Monday<>0 THEN "Actual date of line" := DWY2DATE(1,Week,Year);

      //<<141103, ENH050
    END;

    LOCAL PROCEDURE GetPlantSalesPrice@1100529000(VAR SalesPrice@1100529000 : Decimal) : Boolean;
    VAR
      SalesPriceReadOrderLine@1100529001 : Record 11020376;
      SalesPriceMgt@1100529002 : Codeunit 11012036;
    BEGIN
      //DP00812
      IF Type = Type::Plant THEN BEGIN
        CheckCompanyIC;
        PlantSetupRec.GET;
        IF PlantSetupRec."Empl. Sales Rate as Hour Rate" THEN BEGIN
          IF (NOT PlantLocRec.GET("Plant Location")) OR ("Plant Location" = '') THEN
            PlantLocRec."Customer No." := '';
          SalesPrice := SalesPriceMgt.GetSalesPrice(
            SalesPriceReadOrderLine."Price Type"::Plant,
            '', '', '', PlantLocRec."Customer No.", '', "Wage Component", "Supplying Company", "Employee No.",
            '', '', '', "Plant Location", "Receiving Company", '', "Posting Date", 0, "Cost Price Found at");
          EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetTryOutDescription@1100529200() TryOutDescription : Text[250];
    VAR
      Tryout@1100529200 : Record 11012750;
    BEGIN
      IF "Try-out No." <> '' THEN BEGIN
        Tryout.CHANGECOMPANY("Receiving Company");
        IF Tryout.GET("Try-out No.") THEN
          TryOutDescription := Tryout.Description;
      END;
    END;

    PROCEDURE GetEstimateDescription@1100527000() EstimateDescription : Text;
    VAR
      Estimate@1100527000 : Record 11012151;
    BEGIN
      IF "Estimate No." <> '' THEN BEGIN
        Estimate.CHANGECOMPANY("Receiving Company");
        IF Estimate.GET("Estimate No.") THEN
          EstimateDescription := Estimate.Description;
      END;
    END;

    PROCEDURE Release@1100528420();
    VAR
      HourAccounting@1100528400 : Record 11012038;
      ApprovalManagement4PSConstr@1100528200 : Codeunit 11125349;
      ApprovalsMgmt@1100528203 : Codeunit 1535;
      ApprovalsWorkFlowEnabled@1100528202 : Boolean;
      ApprovalsBridge4PSConstruct@1100525000 : Codeunit 11125348;
    BEGIN
      IF FINDSET THEN BEGIN
        REPEAT
          IF (Status <> Status::Open) AND
             (Status <> Status::Rejected)
          THEN
            FIELDERROR(Status);

        UNTIL NEXT = 0;
      END;

      IF (FINDSET(TRUE)) THEN BEGIN

        HourAccounting.GET(Year, Week, "Employee No.");
        ApprovalsWorkFlowEnabled := ApprovalManagement4PSConstr.IsHourAccountingApprovalsWorkflowEnabled(HourAccounting);
        IF ApprovalsWorkFlowEnabled AND
          (NOT ApprovalsMgmt.HasOpenOrPendingApprovalEntries(HourAccounting.RECORDID))
           AND (NOT ApprovalsBridge4PSConstruct.CheckWorkFlowActive(HourAccounting.RECORDID)) THEN BEGIN
            HourAccounting.SendHourAccountingForApproval;
          EXIT;
        END;

        REPEAT
          IF ApprovalsMgmt.LineHasOpenOrPendingApprovalEntries(HourAccounting.RECORDID, "Line No.") THEN
            Status := Status::"Pending Approval"
          ELSE
            IF ApprovalsWorkFlowEnabled THEN BEGIN
              IF Status IN [Status::Open,Status::Released,Status::Rejected] THEN BEGIN
                HourAccounting.SendHourAccountingForApproval;
                EXIT;
              END;
            END ELSE
              Status := Status::Released;
          MODIFY;

        UNTIL (NEXT = 0);
        UpdateHeaderStatus(FALSE,FALSE,FALSE);
      END;
    END;

    PROCEDURE PendingApproval@1100525012();
    VAR
      HourAccounting@1100528400 : Record 11012038;
      ApprovalManagement4PSConstr@1100528200 : Codeunit 11125349;
      ApprovalsMgmt@1100528203 : Codeunit 1535;
      ApprovalsWorkFlowEnabled@1100528202 : Boolean;
    BEGIN
      IF FINDSET THEN BEGIN
        REPEAT
          IF (Status <> Status::Open) AND
             (Status <> Status::Rejected)
          THEN
            FIELDERROR(Status);
        UNTIL NEXT = 0;
      END;

      IF (FINDSET(TRUE)) THEN BEGIN
        HourAccounting.GET(Year, Week, "Employee No.");
        ApprovalsWorkFlowEnabled := ApprovalManagement4PSConstr.IsHourAccountingApprovalsWorkflowEnabled(HourAccounting);
        REPEAT
          IF ApprovalsMgmt.LineHasOpenOrPendingApprovalEntries(HourAccounting.RECORDID, "Line No.") THEN
            Status := Status::"Pending Approval"
          ELSE
            IF ApprovalsWorkFlowEnabled THEN
              Status := Status::Approved
            ELSE
              Status := Status::Released;
          MODIFY;
        UNTIL (NEXT = 0);
        UpdateHeaderStatus(FALSE,FALSE,FALSE);
      END;
    END;

    PROCEDURE Reopen@1100528404();
    VAR
      HourAccounting@1100528201 : Record 11012038;
      ApprovalManagement4PSConstr@1100528200 : Codeunit 11125349;
      ApprovalsWorkFlowEnabled@1100528202 : Boolean;
      ApprovalsMgmt@1100528203 : Codeunit 1535;
    BEGIN
      IF (FINDSET(TRUE)) THEN BEGIN
        HourAccounting.GET(Year, Week, "Employee No.");
        ApprovalsWorkFlowEnabled := ApprovalManagement4PSConstr.IsHourAccountingApprovalsWorkflowEnabled(HourAccounting);
        REPEAT

          IF (ApprovalsWorkFlowEnabled) AND (ApprovalsMgmt.LineHasOpenOrPendingApprovalEntries(HourAccounting.RECORDID, "Line No.")) AND
            (Status = Status::"Pending Approval")
          THEN
            FIELDERROR(Status);

          VALIDATE(Status, Status::Open);
          MODIFY;
        UNTIL (NEXT = 0);
        UpdateHeaderStatus(FALSE,FALSE,FALSE);
      END;
    END;

    PROCEDURE Approve@1100528202();
    VAR
      HourAccounting@1100528203 : Record 11012038;
      ApprovalManagement4PSConstr@1100528202 : Codeunit 11125349;
      ApprovalsMgmt@1100528201 : Codeunit 1535;
      ApprovalsWorkFlowEnabled@1100528200 : Boolean;
    BEGIN
      IF (FINDSET(TRUE)) THEN BEGIN
        HourAccounting.GET(Year, Week, "Employee No.");
        IF ApprovalManagement4PSConstr.IsHourAccountingApprovalsWorkflowEnabled(HourAccounting) THEN
          ApprovalsWorkFlowEnabled := TRUE;
        REPEAT
          IF ((ApprovalsWorkFlowEnabled) AND (NOT ApprovalsMgmt.LineHasOpenOrPendingApprovalEntries(HourAccounting.RECORDID, "Line No."))) OR
             (NOT ApprovalsWorkFlowEnabled)
          THEN BEGIN
            TESTFIELD(Status, Status::"Pending Approval");
            VALIDATE(Status, Status::Approved);
            MODIFY;
          END;
        UNTIL (NEXT = 0);
        UpdateHeaderStatus(FALSE,FALSE,FALSE);
      END;
    END;

    PROCEDURE Reject@1100528201(RejectText@1100529500 : Text);
    VAR
      HourAccounting@1100528203 : Record 11012038;
      ApprovalManagement4PSConstr@1100528202 : Codeunit 11125349;
      ApprovalsMgmt@1100528201 : Codeunit 1535;
      ApprovalsWorkFlowEnabled@1100528200 : Boolean;
    BEGIN
      IF (FINDSET(TRUE)) THEN BEGIN
        HourAccounting.GET(Year, Week, "Employee No.");
        IF ApprovalManagement4PSConstr.IsHourAccountingApprovalsWorkflowEnabled(HourAccounting) THEN
          ApprovalsWorkFlowEnabled := TRUE;
        REPEAT
          IF ((ApprovalsWorkFlowEnabled) AND (NOT ApprovalsMgmt.LineHasOpenOrPendingApprovalEntries(HourAccounting.RECORDID, "Line No."))) OR
             (NOT ApprovalsWorkFlowEnabled)
          THEN BEGIN
            TESTFIELD(Status, Status::"Pending Approval");
            VALIDATE(Status, Status::Rejected);
            MODIFY;
          END;
        UNTIL (NEXT = 0);
        UpdateHeaderStatus(FALSE,FALSE,FALSE);
      END;
    END;

    PROCEDURE UpdateHeaderStatus@1100528305(CalledFromDelete@1100409005 : Boolean;CalledFromInsert@1100528201 : Boolean;CalledFromModify@1100529600 : Boolean);
    VAR
      HourAccounting@1100528300 : Record 11012038;
      NewStatus@1100528200 : Option;
      ModifyHeader@1100529601 : Boolean;
    BEGIN
      //**CALL C040211.sn
      IF CalledFromInsert THEN BEGIN
        IF CURRENTCOMPANY <> COMPANYNAME THEN
          HourAccounting.CHANGECOMPANY(CURRENTCOMPANY);
        IF NOT HourAccounting.GET(Year, Week, "Employee No.") THEN
          EXIT;
      END;
      //**CALL C040211.en

      NewStatus := GetLineStatusForHeader(CalledFromDelete,CalledFromInsert);

      IF CURRENTCOMPANY <> COMPANYNAME THEN
        HourAccounting.CHANGECOMPANY(CURRENTCOMPANY);
      HourAccounting.GET(Year, Week, "Employee No.");
      IF HourAccounting.Status <> NewStatus THEN BEGIN
        HourAccounting.Status := NewStatus;
        IF HourAccounting.Status = HourAccounting.Status::Approved THEN
          HourAccounting.Consented := TRUE;
        IF HourAccounting.Status IN
          [HourAccounting.Status::Open,HourAccounting.Status::"Pending Approval",HourAccounting.Status::Rejected]
        THEN
          HourAccounting.Consented := FALSE;
        ModifyHeader := TRUE;
      END ELSE
        ModifyHeader := CalledFromInsert OR CalledFromDelete OR CalledFromModify;

      IF ModifyHeader THEN BEGIN
        HourAccounting."Modified On" := TODAY;
        HourAccounting."Modified By" := USERID;
        HourAccounting.MODIFY;
      END;
    END;

    PROCEDURE GetLineStatusForHeader@1100409001(CalledFromDelete@1100409005 : Boolean;CalledFrominsert@1100528203 : Boolean) : Integer;
    VAR
      HourAccounting@1100528200 : Record 11012038;
      HourAccountingLine@1100528301 : Record 11012039;
      NewStatus@1100528302 : Option;
      CountAll@1100409000 : Integer;
      CountReleased@1100409001 : Integer;
      CountApproved@1100409002 : Integer;
      CountRejected@1100409003 : Integer;
      CountOpen@1100409004 : Integer;
      CountPendingApproval@1100528202 : Integer;
    BEGIN
      IF CURRENTCOMPANY <> COMPANYNAME THEN BEGIN
        HourAccounting.CHANGECOMPANY(CURRENTCOMPANY);
        HourAccountingLine.CHANGECOMPANY(CURRENTCOMPANY);
      END;
      HourAccounting.GET(Year, Week, "Employee No.");
      NewStatus := HourAccounting.Status::Open;

      HourAccountingLine.SETRANGE(Year, Year);
      HourAccountingLine.SETRANGE(Week, Week);
      HourAccountingLine.SETRANGE("Employee No.", "Employee No.");
      IF (CalledFromDelete) THEN
        HourAccountingLine.SETFILTER("Line No.", '<>%1', "Line No.");

      CountAll := HourAccountingLine.COUNT;

      HourAccountingLine.SETRANGE(Status, HourAccountingLine.Status::Released);
      CountReleased := HourAccountingLine.COUNT;
      HourAccountingLine.SETRANGE(Status, HourAccountingLine.Status::"Pending Approval");
      CountPendingApproval := HourAccountingLine.COUNT;
      HourAccountingLine.SETRANGE(Status, HourAccountingLine.Status::Approved);
      CountApproved := HourAccountingLine.COUNT;
      HourAccountingLine.SETRANGE(Status, HourAccountingLine.Status::Rejected);
      CountRejected := HourAccountingLine.COUNT;
      HourAccountingLine.SETRANGE(Status, HourAccountingLine.Status::Open);
      CountOpen := HourAccountingLine.COUNT;

      IF CalledFrominsert THEN BEGIN
        CountOpen += 1;
        CountAll += 1;
      END;

      IF (CountAll > 0) AND (CountAll = CountApproved) THEN
        NewStatus := HourAccounting.Status::Approved
      ELSE
        IF (CountAll > 0) AND (CountAll = CountApproved+CountPendingApproval) THEN
          NewStatus := HourAccounting.Status::"Pending Approval";

      IF (CountAll > 0) AND (CountAll = CountReleased) THEN
        NewStatus := HourAccounting.Status::Released;

      IF CountOpen > 0 THEN
        NewStatus := HourAccounting.Status::Open;

      IF CountRejected > 0 THEN
        NewStatus := HourAccounting.Status::Rejected;

      EXIT(NewStatus);
    END;

    PROCEDURE ResourceRequestDescription@1100529005() : Text;
    VAR
      ResourceRequest@1100529000 : Record 11124901;
    BEGIN
      IF "Resource Request No." <> '' THEN BEGIN
        ResourceRequest.CHANGECOMPANY("Resource Req. Receiv. Company");
        IF ResourceRequest.GET("Resource Request No.") THEN
          EXIT(ResourceRequest.Description);
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE "--Itero"@1101285000();
    BEGIN
    END;

    PROCEDURE GetQuantity@1101285001() Result : Decimal;
    VAR
      PostedHourLine@1101285000 : Record 11012085;
      HourAccountingLine@1101285001 : Record 11012039;
    BEGIN
      Result := 0;

      HourAccountingLine.SETRANGE(Year, Year);
      HourAccountingLine.SETRANGE(Week, Week);
      HourAccountingLine.SETRANGE("Employee No.", "Employee No.");
      HourAccountingLine.SETFILTER(Quantity, '<>0');
      IF HourAccountingLine.FINDSET THEN
        REPEAT
          Result += HourAccountingLine.Quantity;
        UNTIL HourAccountingLine.NEXT = 0;

      PostedHourLine.SETRANGE(Year, Year);
      PostedHourLine.SETRANGE(Week, Week);
      PostedHourLine.SETRANGE("Employee No.", "Employee No.");
      PostedHourLine.SETFILTER(Quantity, '<>0');
      IF PostedHourLine.FINDSET THEN
        REPEAT
          Result += PostedHourLine.Quantity;
        UNTIL PostedHourLine.NEXT = 0;

      EXIT(Result);
    END;

    PROCEDURE GetQuantity2@1101285002() Result : Decimal;
    VAR
      PostedHourLine@1101285000 : Record 11012085;
      HourAccountingLine@1101285001 : Record 11012039;
    BEGIN
      Result := 0;

      HourAccountingLine.SETRANGE(Year, Year);
      HourAccountingLine.SETRANGE(Week, Week);
      HourAccountingLine.SETRANGE("Employee No.", "Employee No.");
      HourAccountingLine.SETFILTER(Quantity, '<>0');
      IF HourAccountingLine.FINDSET THEN
        REPEAT
          Result += HourAccountingLine.Quantity;
        UNTIL HourAccountingLine.NEXT = 0;

      EXIT(Result);
    END;

    LOCAL PROCEDURE DeleteConsentLine@1000000000();
    VAR
      HoursConsentLine@1000000000 : Record 11020437;
    BEGIN
      HoursConsentLine.SETRANGE(Year, Year);
      HoursConsentLine.SETRANGE(Week, Week);
      HoursConsentLine.SETRANGE(Employee, "Employee No.");
      HoursConsentLine.SETRANGE("Line No.","Line No.");
      IF HoursConsentLine.FINDSET(TRUE) THEN
         HoursConsentLine.DELETEALL;
    END;

    PROCEDURE GetExtensionContractDescription@1100528500() : Text;
    VAR
      ExtensionContract@1100528503 : Record 11012004;
    BEGIN
      IF ("Project No." <> '') AND ("Extension Contract" <> '') THEN BEGIN
        IF "Receiving Company" <> '' THEN
          ExtensionContract.CHANGECOMPANY("Receiving Company");
        IF ExtensionContract.GET("Project No.", "Extension Contract") THEN
          EXIT(ExtensionContract.Description);
      END;
      EXIT('');
    END;

    PROCEDURE GetProjectDescription@1100525013() : Text[100];
    VAR
      Job@1100525000 : Record 11072003;
    BEGIN
      IF Type = Type::Project THEN BEGIN
        IF "Project No." = '' THEN
          EXIT;
        IF "Receiving Company" <> '' THEN
          Job.CHANGECOMPANY("Receiving Company");
        IF Job.GET("Project No.") THEN
          EXIT(Job.Description);
      END;
    END;

    PROCEDURE GetProjectCity@1100525026() : Text[50];
    VAR
      Job@1100525000 : Record 11072003;
    BEGIN
      IF Type = Type::Project THEN BEGIN
        IF "Project No." = '' THEN
          EXIT;
        IF "Receiving Company" <> '' THEN
          Job.CHANGECOMPANY("Receiving Company");
        IF Job.GET("Project No.") THEN
          EXIT(Job.City);
      END;
    END;

    PROCEDURE GetServiceOrderDescription@1100525018() : Text[50];
    VAR
      ServiceOrder@1100525000 : Record 11012823;
    BEGIN
      IF Type = Type::Service THEN BEGIN
        IF "Service Order No." = '' THEN
          EXIT;
        IF "Receiving Company" <> '' THEN
          ServiceOrder.CHANGECOMPANY("Receiving Company");
        IF ServiceOrder.GET("Service Order No.") THEN
          EXIT(ServiceOrder.Description);
      END;
    END;

    PROCEDURE GetElementDescription@1100525014() : Text[50];
    VAR
      ProjectElement@1100525000 : Record 11012010;
    BEGIN
      IF Type <> Type::Plant THEN BEGIN
        IF Element = '' THEN
          EXIT;
        IF "Receiving Company" <> '' THEN
          ProjectElement.CHANGECOMPANY("Receiving Company");
        IF ProjectElement.GET("Project No.", Element) THEN
          EXIT(ProjectElement.Description);
      END ELSE BEGIN
        IF Element = '' THEN
          EXIT;
        IF NOT CheckPlantLocLinkedToProject() THEN
          EXIT;
        IF ProjectElement.GET(PlantLocRec."Project No.", Element) THEN
          EXIT(ProjectElement.Description);
      END;
    END;

    PROCEDURE GetCostObjectDescription@1100525022() : Text[50];
    BEGIN
      IF "Cost Object" = '' THEN
        EXIT('');
      CheckCompanyIC;
      DimMgt.GetDimValueRec(2, "Cost Object", DimValRec, FALSE, "Project No.");
      EXIT(DimValRec.Name);
    END;

    PROCEDURE CheckLeave@1100527900();
    VAR
      WageComponent@1100527901 : Record 11012014;
      HourAccountingLine@1100527902 : Record 11012039;
      LeaveTypeTotal@1100527900 : Decimal;
    BEGIN
      IF "Wage Component" = '' THEN
        EXIT;
      WageComponent.GET("Wage Component");
      IF ("Leave Type" = '') OR NOT WageComponent."Negative Balance Not Allowed" THEN
        EXIT;

      LeaveTypeTotal := GetLeaveTypeTotal;

      HourAccountingLine.SETRANGE(Year,Year);
      HourAccountingLine.SETRANGE(Week,Week);
      HourAccountingLine.SETRANGE("Employee No.","Employee No.");
      HourAccountingLine.SETRANGE("Wage Component","Wage Component");
      HourAccountingLine.CALCSUMS("Total Line");

      IF HourAccountingLine."Total Line" > LeaveTypeTotal THEN
        ERROR(Text017,HourAccountingLine."Total Line",LeaveTypeTotal,"Leave Type");
    END;

    PROCEDURE CheckProjectEmployee@1100527901();
    VAR
      ProjectEmplHourAccounting@1100527901 : Record 11229439;
    BEGIN
      ProjectEmplHourAccounting.CheckProjectEmployee("Project No.","Receiving Company","Employee No.");
    END;

    PROCEDURE GetPlantDescription@1100528501() Description : Text;
    VAR
      PlantType@1100528501 : Record 11012551;
      PlantNumber@1100528500 : Record 11012552;
    BEGIN
      IF "Plant Type" <> '' THEN BEGIN
        IF "Plant No." <> '' THEN BEGIN
          IF "Receiving Company" <> '' THEN
            PlantNumber.CHANGECOMPANY("Receiving Company");
          IF PlantNumber.GET("Plant Type", "Plant No.") THEN BEGIN
            IF PlantNumber.Description <> '' THEN
              EXIT(PlantNumber.Description);
          END;
        END;
        IF "Receiving Company" <> '' THEN
          PlantType.CHANGECOMPANY("Receiving Company");
        IF PlantType.GET("Plant Type") THEN
          EXIT(PlantType.Description);
      END;
      EXIT('');
    END;

    PROCEDURE SetFromDeleteHeader@1100528591();
    BEGIN
      FromDeleteHeader := TRUE;
    END;

    PROCEDURE GetCostCodeDescription@1100527550() Description : Text;
    VAR
      CostCode@1100527550 : Record 11012083;
    BEGIN
      IF "Cost Code" <> '' THEN BEGIN
        IF "Receiving Company" <> '' THEN
          CostCode.CHANGECOMPANY("Receiving Company");
        IF CostCode.GET("Cost Code") THEN
          EXIT(CostCode.Description);
      END;
      EXIT('');
    END;

    BEGIN
    {
      4PS, 15-11-13, DP00483, Performance tuning:
      - MaintainSIFTIndex disabled for all keys
      - MaintainSQLIndex disabled for all keys except the primary key
      DP00824: index on Employer+Type (project) to collect external hours on purchase order

      4PSSE DL 21-12-12 fixed spill overflow in ServiceLocationDescription()

      SESB.I033 Limitations on hours per day
         ASH 03.07.2013 Trigger CheckFieldLimits added
         ASH 03.07.2013 Trigger "Monday - OnValidate" changed
         ASH 03.07.2013 Trigger "Tuesday - OnValidate" changed
         ASH 03.07.2013 Trigger "Wednesday - OnValidate" changed
         ASH 03.07.2013 Trigger "Thursday - OnValidate" changed
         ASH 03.07.2013 Trigger "Friday - OnValidate" changed
         ASH 03.07.2013 Trigger "Saturday - OnValidate" changed
         ASH 03.07.2013 Trigger "Sunday - OnValidate" changed
         ASH 03.07.2013 Trigger "Quantity - OnValidate" changed
         ASH 03.07.2013 Trigger "Amount (LCY) - OnValidate" changed
         ASH 03.07.2013 Trigger "Wage Component - OnValidate" changed
         ASH 03.07.2013 Trigger "Duration - OnValidate" changed
         ASH 03.07.2013 Trigger "Employee No. - OnValidate" changed

      SESB.I037 Enter LAG Number
         ASH 04.07.2013 Field 11128230 "Team Code" added

      SESB.I038 New Wage Component type
         ASH 04.07.2013 Field 360 "Component Type" changed - option "Expense hours" added
         ASH 04.07.2013 Field 11128231 "Excl. from Normal&Extra Hours" added
         ASH 04.07.2013 Key "Year,Week,Employee No.,Overtime,Cost Type,NonCalculate" added
         ASH 04.07.2013 Trigger "Wage Component - OnValidate" changed
         ASH 04.07.2013 Trigger "Amount (LCY) - OnValidate" changed
         ASH 04.07.2013 CalcFormula changed for Normal and Overtime hours sum fields
         ASH 10.07.2013 Trigger CompTypeEditable changed
         ASH 19.07.2013 Trigger CalcRateAndAmount changed

      SESB.I039 Extend no of characters in hour line
         ASH 05.07.2013 Trigger ShowLineComments added
         ASH 05.07.2013 Trigger CommentLineExist added

      SESB.I031 Work Flow - Approval of hours
         ASH 11.07.2013 Field 11128232 Changed added
         ASH 11.07.2013 Field 11128233 Status added
         ASH 12.07.2013 Trigger DeleteLineComments added
         ASH 12.07.2013 Trigger OnDelete changed
         ASH 12.07.2013 Trigger RecIsChanged added
         ASH 12.07.2013 Trigger OnModify changed
         ASH 12.07.2013 Trigger CreateHoursConsentLine changed
         ASH 15.07.2013 Trigger TryConsentLine added
         VKO 09.08.2013 Trigger CheckUserIsConsenter added

      SESB.I035.I036 FD Message when dissaproving-correcting hours
         VKO 12.07.2013 Trigger CreateHoursConsentLine changed
         VKO 29.07.2013 Trigger InsertLogEntry changed
         VKO 29.07.2013 Field 11128234 Denied added
         VKO 29.07.2013 Field 11128235 "Denied By" added
         VKO 29.07.2013 Field 11128236 "Deny Comment" added

      SESB.I026 2 step approval
         ASH 15.07.2013 Trigger GetAllHourConsenterInfo added
         ASH 15.07.2013 Trigger CreateHoursConsentLine changed
         VKO 26.07.2013 Trigger CreateHoursConsentLine changed
         VKO 09.08.2013 Trigger FindLastSerialNumber added


      4PSSE.I047
      130910  ITERO.SB Added functions for calculations of norm hours monday-sunday
      130911 ITERO.SB added func for calculation of diff.normhours
      130912 ITERO.SB Added date in weekday captions (CaptionClass) + functions GetCaptionClass and Getfieldcaption
      131111 ITERO.DJ IME056 added IF statement ot "GetNormHour(weekday)" to check value of week
      131115  GHE HoursConsentLine.SETRANGE("Wage Component","Wage Component");
      131115 ITERO.LP Field 11128237 "Overtime Monday (Renewed)" added
      131115 ITERO.LP New functions: GetOvertimeTotal() and OpenOvertimeView().
      140114 ITERO.GH IME-087 Changed amount calculation for Consent Line
      140213 ITERO.GH IME-107 HR/ Timesheet/ Notification changed timesheet
      140327 ITERO.DJ 4PS-028 added call for function HourAccountingCheck in creation of ConsetLines
      140408 ITERO.DL ENH-032  InsertLogEntry() altered to not inform on everything
      140410 ITERO.GH IME-123 Component Type added
      140418 IME-123 WvG
      141009 ITERO.GH IME-206 EVALUATE blocked
      141010 ITERO.GH IME-206 Added Validation, Can not release a copied week
      141015 ITERO.WG IME-206 Added Component type to filter of field Posted Normal Hours
      141103 ITERO.DL ENH-050 Save actual date on posted hour line, change in export file to Agda
                              new field "Actual date of line"
      150219 ITERO.WG IM-REP-162  Added field
      160105 ITERO.PR Cost object from table 11128109  if <> null
      160119 ITERO.PR Unit cost from table 11128109 if <> 0
      161024 ITERO.DL RFC-184 - Change rate calculation hour accounting, modify CalcRateAndAmount
      170118 ITERO.DL split CalcRateAndAmount into CalcRateAndAmount + CalcAmountToLCY
                      moved RFC-184 within CalcRateAndAmount and added CalcAmountToLCY

      REMOVED <170410 ITERO.FH RFC151 Included "Team Code" in function CreateHoursConsentLine()>

      170410 ITERO.FH RFC152 Included   Comment   in function CreateHoursConsentLine()
      170419 ITERO.DL RFC089 Hour accounting to other department (Glob.Dim.1) than own
      170628 ITERO.SB Fix Shortcut Dimension 1 and Code Shortcut Dimension 2 Code
      170906 ITERO.WG Pure276488 Fix when changing a line
      171212 ITERO.WG Hour Accounting consented

      180327 ITERO.WG RFC151
      180427 ORANGO.DL RFC150 Default value for Team code
      180502 ORANGO.WG Problem with dubble consent line
      180504 ORANGO.WG #181313 removed local var Week from function GetNormHourSun
      180601 ORANGO.DL RFC150 only for (Type = Type::Project)
      180607 ORANGO.WG Delete consent line on delete or modify
      180607 ORANGO.WG Problems with Hour Accounting and attest
      190117 ORANGO.DL RFC256 update unitcost if quantity or hours (total line) has changed based on amount
      190110 ORANGO.PR RFC226 Added optionvalue to "Component Type" - Addition
      190304 ORANGO.DL FRC226 after tests, cost is missing if comp.type =addition
      190529 ORANGO.DL RFC226 handle new wagecomponent type 'addition'
      190723 ORANGO.DL RFC226 corrections OnValidate Amount, "Amount (LCY)"
                              correction CreateHoursConsentLine
      190905 ORANGO.DL RFC226 open "Unit Cost (LCY)" for editing, add code for Currency
      200121 ORANGO.DL RFC1199 report only vacation as full day, code cleanup GetNormHourMon..GetNormHourSun
      200124 ORANGO.DL #27621 removed obsolete GetOvertimeTotal(), OpenOvertimeView(), "Overtime Monday (Renewed)"
    }
    END.
  }
}

