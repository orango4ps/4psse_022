OBJECT Codeunit 5068 WordApplicationHandler
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00;
  }
  PROPERTIES
  {
    EventSubscriberInstance=Manual;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WordApplication@1002 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      WordHelper@1003 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHelper" RUNONCLIENT;
      Active@1000 : Boolean;
      ID@1001 : Integer;

    [External]
    PROCEDURE Activate@2(VAR WordApplicationHandler@1000 : Codeunit 5068;HandlerID@1001 : Integer);
    BEGIN
      Active := BINDSUBSCRIPTION(WordApplicationHandler);
      ID := HandlerID;
    END;

    LOCAL PROCEDURE CloseApplication@7();
    BEGIN
      IF IsAlive THEN
        WordHelper.CallQuit(WordApplication,FALSE);
      CLEAR(WordApplication);
      Active := FALSE;
      ID := 0;
    END;

    LOCAL PROCEDURE GetApplication@5() : Boolean;
    VAR
      ErrorMessage@1000 : Text;
    BEGIN
      IF NOT ISNULL(WordApplication) THEN
        IF IsAlive THEN
          EXIT(TRUE);
      IF NOT CANLOADTYPE(WordApplication) THEN
        EXIT(FALSE);
      WordApplication := WordHelper.GetApplication(ErrorMessage);
      IF ISNULL(WordApplication) THEN
        ERROR(ErrorMessage);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetWordApplication@3(VAR NewWordApplication@1000 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT) : Boolean;
    BEGIN
      IF GetApplication THEN
        NewWordApplication := WordApplication
      ELSE
        CLEAR(NewWordApplication);
      EXIT(NOT ISNULL(NewWordApplication));
    END;

    [TryFunction]
    [External]
    PROCEDURE IsAlive@9();
    BEGIN
      // returns FALSE if the application has been terminated
      IF WordApplication.Name <> '' THEN;
    END;

    [EventSubscriber(Codeunit,11072023,OnFindActiveSubscriber)]
    LOCAL PROCEDURE OnFindActiveHandler@4(VAR IsFound@1000 : Boolean);
    BEGIN
      IF NOT IsFound THEN
        IsFound := Active;
    END;

    [EventSubscriber(Codeunit,11072023,OnGetWord)]
    LOCAL PROCEDURE OnGetWordApplicationHandler@1(VAR NewWordApplication@1000 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;VAR IsFound@1001 : Boolean);
    BEGIN
      IF Active THEN
        IsFound := GetWordApplication(NewWordApplication);
    END;

    [EventSubscriber(Codeunit,11072023,OnDeactivate)]
    LOCAL PROCEDURE OnDeactivateHandler@6(HandlerID@1000 : Integer);
    BEGIN
      IF Active AND (HandlerID = ID) THEN
        CloseApplication;
    END;

    BEGIN
    {
      4PS, Codeunit 11072023 renumbered to 11072023
    }
    END.
  }
}

