OBJECT Codeunit 6085604 Record ID Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW13.70.00.5.00.07;
  }
  PROPERTIES
  {
    Permissions=TableData 6085763=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1160040000 : TextConst 'DEU=Kann Lookup nicht durchfÅhren, da Tabellennr. fehlt.;ENU=Unable to perform lookup since Table No. is missing.;NLD=Opzoeken onmogelijk omdat tabelnr. mist.';
      Text002@1160040002 : TextConst 'DEU=%1 kann nicht geÑndert werden, weil dieses Feld bereits einen Wert fÅr einen oder mehrere Belege hat.;ENU=%1 cannot be changed because this field already have a value on one or more documents.;NLD=%1 kan niet worden gewijzigd omdat het veld al een waarde heeft op ÇÇn of meer documenten.';
      Text003@1160040003 : TextConst 'DEU=%1 kann nicht geÑndert werden, weil %2 bereits erstellte Belege hat.;ENU=%1 cannot be changed because this %2 already have documents created.;NLD=%1 kan niet worden gewijzigd omdat voor deze %2 al documenten aangemaakt zijn.';
      Object@161024012 : Integer;
      Text004@161024013 : TextConst 'DEU=Feldart ''%1'' nicht als SchlÅsselwert unterstÅtzt.;ENU=Field Type ''%1'' not supported as a key value.;NLD=Veldtype ''%1'' niet ondersteund als een sleutelwaarde.';

    PROCEDURE GetRecIDTreeID@161024012(VAR RecRef@161024012 : RecordRef;Create@161024017 : Boolean) ParentID : Integer;
    VAR
      RecIDTree@161024014 : Record 6085763;
      KeyRef@161024013 : KeyRef;
      FieldRef@161024015 : FieldRef;
      i@161024016 : Integer;
    BEGIN
      KeyRef := RecRef.KEYINDEX(1);
      FOR i := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(i);

        IF i = 1 THEN
          FilterRecIDTree(RecIDTree,0,RecRef.NUMBER,FieldRef)
        ELSE
          FilterRecIDTree(RecIDTree,ParentID,RecRef.NUMBER,FieldRef);

        IF NOT RecIDTree.FINDFIRST THEN BEGIN
          IF NOT Create THEN
            EXIT(0);

          RecIDTree.INIT;
          RecIDTree."Parent ID" := ParentID;
          RecIDTree."Table No." := RecRef.NUMBER;
          RecIDTree."Field No." := FieldRef.NUMBER;
          RecIDTree."Key Index" := i;
          SetTreeIDValueFromFieldRef(RecIDTree,FieldRef);
          RecIDTree.INSERT(TRUE);
        END;

        ParentID := RecIDTree.ID;
      END;
    END;

    PROCEDURE GetRecIDFromTreeID@161024020(RecIDTreeID@161024012 : Integer;VAR RecID@161024013 : RecordID) : Boolean;
    VAR
      RecIDTree@161024014 : Record 6085763;
      RecRef@6085601 : RecordRef SECURITYFILTERING(Filtered);
      FieldRef@161024016 : FieldRef;
      Field@6085573 : Record 2000000041;
    BEGIN
      IF NOT RecIDTree.GET(RecIDTreeID) THEN
        EXIT(FALSE);

      RecRef.OPEN(RecIDTree."Table No.");
      //RecRef.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward

      WHILE RecIDTree.GET(RecIDTreeID) DO BEGIN
        FieldRef := RecRef.FIELD(RecIDTree."Field No.");

        // Changed to SETRANGE to handle vendors with filter symbols in number, e.g. the & symbol
        Field.GET(RecIDTree."Table No.",RecIDTree."Field No.");

        CASE Field.Type OF
          Field.Type::Code,Field.Type::Text:
            FieldRef.SETRANGE(RecIDTree."Value (Text)");

          Field.Type::Integer,Field.Type::Option:
            FieldRef.SETRANGE(RecIDTree."Value (Integer)");

          Field.Type::Decimal:
            FieldRef.SETRANGE(RecIDTree."Value (Decimal)");

          Field.Type::Boolean:
            FieldRef.SETRANGE(RecIDTree."Value (Boolean)");

          Field.Type::Date:
            FieldRef.SETRANGE(RecIDTree."Value (Date)");

          Field.Type::GUID:
            FieldRef.SETRANGE(RecIDTree."Value (GUID)");

          ELSE
            ERROR(Text004,Field.Type);
        END;

        RecIDTreeID := RecIDTree."Parent ID";
      END;

      IF RecRef.FINDFIRST THEN BEGIN
        RecID := RecRef.RECORDID;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE RenameRecIDTree@161024014(VAR xRecRef@161024012 : RecordRef;VAR RecRef@161024017 : RecordRef) ParentID : Integer;
    VAR
      RecIDTree@161024014 : Record 6085763;
      KeyRef@161024013 : KeyRef;
      xKeyRef@161024019 : KeyRef;
      RecRef2@161024022 : RecordRef;
      xFieldRef@161024018 : FieldRef;
      FieldRef@161024015 : FieldRef;
      i@161024016 : Integer;
      Empty@161024020 : Boolean;
    BEGIN
      xKeyRef := xRecRef.KEYINDEX(1);
      FOR i := 1 TO xKeyRef.FIELDCOUNT DO BEGIN
        xFieldRef := xKeyRef.FIELDINDEX(i);

        IF i = 1 THEN
          FilterRecIDTree(RecIDTree,0,xRecRef.NUMBER,xFieldRef)
        ELSE
          FilterRecIDTree(RecIDTree,ParentID,xRecRef.NUMBER,xFieldRef);

        IF NOT RecIDTree.FINDFIRST THEN BEGIN
          i := xKeyRef.FIELDCOUNT;
          Empty := TRUE;
        END ELSE
          ParentID := RecIDTree.ID;
      END;

      IF NOT Empty THEN BEGIN
        // The Tree has been found and we can now change the key values
        KeyRef := RecRef.KEYINDEX(1);
        FOR i := 1 TO xKeyRef.FIELDCOUNT DO BEGIN
          xFieldRef := xKeyRef.FIELDINDEX(i);
          FieldRef := KeyRef.FIELDINDEX(i);

          IF i = 1 THEN
            FilterRecIDTree(RecIDTree,0,xRecRef.NUMBER,xFieldRef)
          ELSE
            FilterRecIDTree(RecIDTree,ParentID,xRecRef.NUMBER,xFieldRef);

          RecIDTree.FINDFIRST;
          IF GetRecIDTreeValueAsText('',RecIDTree) <>  FORMAT(FieldRef.VALUE) THEN BEGIN
            SetTreeIDValueFromFieldRef(RecIDTree,FieldRef);
            RecIDTree.MODIFY;
          END;

          ParentID := RecIDTree.ID;
        END;
      END;
    END;

    PROCEDURE GetKeyValue@161024015(RecIDTreeID@161024012 : Integer;FieldNo@161024014 : Integer) : Text[250];
    VAR
      RecIDTree@161024013 : Record 6085763;
      Field@161024015 : Record 2000000041;
    BEGIN
      WHILE RecIDTree.GET(RecIDTreeID) DO BEGIN
        IF RecIDTree."Field No." = FieldNo THEN BEGIN
          Field.GET(RecIDTree."Table No.",RecIDTree."Field No.");
          CASE Field.Type OF
            Field.Type::Code,Field.Type::Text:
              EXIT(RecIDTree."Value (Text)");

            Field.Type::Integer,Field.Type::Option:
              EXIT(FORMAT(RecIDTree."Value (Integer)"));

            Field.Type::Decimal:
              EXIT(FORMAT(RecIDTree."Value (Decimal)"));

            Field.Type::Boolean:
              EXIT(FORMAT(RecIDTree."Value (Boolean)"));

            Field.Type::Date:
              EXIT(FORMAT(RecIDTree."Value (Date)"));

            Field.Type::GUID:
              EXIT(FORMAT(RecIDTree."Value (GUID)"));
          END;

        END ELSE
          RecIDTreeID := RecIDTree."Parent ID";
      END;
    END;

    PROCEDURE GetRecIDTreeID2@161024019(TableNo@161024015 : Integer;FieldNo@161024014 : Integer;FilterGUID@161024013 : GUID;KeyValue@161024012 : Text[100]) : Integer;
    VAR
      RecRef@161024016 : RecordRef;
      FieldRef@161024017 : FieldRef;
    BEGIN
      IF KeyValue = '' THEN
        EXIT;

      RecRef.OPEN(TableNo);
      FilterRecRefWithGUID(RecRef,FilterGUID);

      FieldRef := RecRef.FIELD(FieldNo);
      // Changed to SETRANGE to handle vendors with filter symbols in number, e.g. the & symbol
      FieldRef.SETRANGE(COPYSTR(KeyValue,1,FieldRef.LENGTH));

      IF NOT RecRef.FINDFIRST THEN
        EXIT;

      EXIT(GetRecIDTreeID(RecRef,FALSE));
    END;

    PROCEDURE SetKeyValueWithGUID@161024016(TableNo@161024015 : Integer;FieldNo@161024014 : Integer;SearchFieldNo@1160040000 : Integer;FilterGUID@161024013 : GUID;KeyValue@161024012 : Text[100];ErrorIfNoRecord@1160040002 : Boolean) : Integer;
    VAR
      RecRef@161024016 : RecordRef;
      RecRef2@1160040001 : RecordRef;
      FieldRef@161024017 : FieldRef;
      FieldRef2@1160040006 : FieldRef;
      CaptureMgt@1160040003 : Codeunit 6085576;
      Found@1160040004 : Boolean;
    BEGIN
      // Some SETFILTER changed to SETRANGE to handle vendors with filter symbols in number, e.g. the & symbol
      IF KeyValue = '' THEN
        EXIT;

      RecRef.OPEN(TableNo);
      FilterRecRefWithGUID(RecRef,FilterGUID);
      RecRef2 := RecRef.DUPLICATE;

      FieldRef := RecRef.FIELD(FieldNo);
      IF STRLEN(KeyValue) <= FieldRef.LENGTH THEN BEGIN
        FieldRef.SETRANGE(KeyValue);
        Found := RecRef.FINDFIRST;
      END;

      IF NOT Found THEN BEGIN
        IF SearchFieldNo = 0 THEN BEGIN
          IF ErrorIfNoRecord THEN BEGIN
            FieldRef.SETRANGE(KeyValue);
            RecRef.FINDFIRST;
          END ELSE
            EXIT;
        END;

        FieldRef2 := RecRef2.FIELD(SearchFieldNo);

        IF IsCodeOrText(TableNo,SearchFieldNo) THEN BEGIN
          FieldRef2.SETFILTER('@' + CaptureMgt.ReplaceIllegalFilterCharacters(KeyValue,FALSE,0) + '*')
        END ELSE
          FieldRef2.SETRANGE(KeyValue);

        IF RecRef2.FINDFIRST THEN
          RecRef := RecRef2.DUPLICATE
        ELSE BEGIN
          IF ErrorIfNoRecord THEN BEGIN
            FieldRef.SETRANGE(KeyValue);
            RecRef.FINDFIRST;
          END ELSE
            EXIT;
        END;
      END;

      EXIT(GetRecIDTreeID(RecRef,TRUE));
    END;

    PROCEDURE GetFieldValue@161024021(RecIDTreeID@161024013 : Integer;FieldNo@161024012 : Integer) : Text[1024];
    VAR
      RecIDTree@161024014 : Record 6085763;
      RecRef@161024015 : RecordRef;
      FieldRef@161024017 : FieldRef;
      RecID@161024016 : RecordID;
    BEGIN
      IF RecIDTreeID = 0 THEN
        EXIT;

      IF FieldNo = 0 THEN
        EXIT;

      IF NOT GetRecIDFromTreeID(RecIDTreeID,RecID) THEN
        EXIT;

      RecRef.GET(RecID);
      FieldRef := RecRef.FIELD(FieldNo);
      EXIT(FORMAT(FieldRef.VALUE));
    END;

    PROCEDURE IsValueWithinFilters@161024022(TableNo@161024016 : Integer;FieldNo@161024015 : Integer;FilterGUID@161024014 : GUID;KeyValue@161024013 : Text[100]) : Boolean;
    VAR
      RecRef@161024017 : RecordRef;
      FieldRef@161024012 : FieldRef;
    BEGIN
      RecRef.OPEN(TableNo);
      FilterRecRefWithGUID(RecRef,FilterGUID);
      FieldRef := RecRef.FIELD(FieldNo);
      // Changed to SETRANGE to handle vendors with filter symbols in number, e.g. the & symbol
      FieldRef.SETRANGE(KeyValue);
      EXIT(NOT RecRef.ISEMPTY);
    END;

    PROCEDURE GetView@1160040003(VAR RecRef@1160040002 : RecordRef;VAR LookupRecID@1160040001 : Record 6085760);
    VAR
      RecID@1160040000 : RecordID;
      RecRef2@161024013 : RecordRef;
      FieldRef@1160040003 : FieldRef;
      i@1160040004 : Integer;
    BEGIN
      IF FilterRecRefWithLookupRecID(RecRef,LookupRecID) THEN BEGIN
        RecRef2 := RecRef;
        IF LookupRecID."Record ID Tree ID" <> 0 THEN
          IF GetRecIDFromTreeID(LookupRecID."Record ID Tree ID",RecID) THEN
            IF RecRef.GET(RecID) THEN BEGIN
              FOR i := 0 TO 10 DO BEGIN
                RecRef.FILTERGROUP(i);
                RecRef2.FILTERGROUP(i);
                RecRef.SETVIEW(RecRef2.GETVIEW);
              END;
            END;

        RecRef.FILTERGROUP(1);
        RecRef2.FILTERGROUP(1);
        RecRef.SETVIEW(RecRef2.GETVIEW);
        RecRef.FILTERGROUP(0);
      END ELSE BEGIN

        IF LookupRecID."Table No." = 0 THEN
          LookupRecID."Table No." := GetTableNoFromRecID(LookupRecID."Record ID Tree ID");

        IF LookupRecID."Table No." = 0 THEN
          ERROR(Text001);
      END;
    END;

    PROCEDURE FilterRecRefWithGUID@1160040004(VAR RecRef@1160040000 : RecordRef;SourceGUID@1160040001 : GUID) : Boolean;
    VAR
      TableFilterField@1160040002 : Record 6085762;
      FieldRef@1160040003 : FieldRef;
      OldFilterGroup@161024012 : Integer;
      Values@1160040004 : Text[100];
    BEGIN
      OldFilterGroup := RecRef.FILTERGROUP;
      RecRef.FILTERGROUP(2);
      TableFilterField.SETRANGE("Table Filter GUID",SourceGUID);
      TableFilterField.SETRANGE("Filter Type",TableFilterField."Filter Type"::"Fixed Filter");
      IF TableFilterField.FINDSET THEN
        REPEAT
          FieldRef := RecRef.FIELD(TableFilterField."Field No.");
          TableFilterField.GetValues(Values,TableFilterField."Filter Type");
          FieldRef.SETFILTER(Values);
        UNTIL TableFilterField.NEXT = 0;

      RecRef.FILTERGROUP(OldFilterGroup);

      EXIT(RecRef.FINDSET);
    END;

    PROCEDURE GetFirstKeyField@1160040005(TableNo@1160040000 : Integer) : Integer;
    VAR
      KeyRef@1160040001 : KeyRef;
      FieldRef@1160040002 : FieldRef;
      RecRef@6085602 : RecordRef SECURITYFILTERING(Ignored);
    BEGIN
      IF TableNo = 0 THEN
        EXIT;

      RecRef.OPEN(TableNo);
      //RecRef.SETPERMISSIONFILTER;  Not supported from NAV 2013 and forward
      IF RecRef.FINDFIRST THEN;
      KeyRef := RecRef.KEYINDEX(1);
      FieldRef := KeyRef.FIELDINDEX(1);
      EXIT(FieldRef.NUMBER);
    END;

    PROCEDURE GetFirstKeyFieldValue@6085574(VAR RecRef@1160040000 : RecordRef) : Code[250];
    VAR
      KeyRef@1160040001 : KeyRef;
      FieldRef@1160040002 : FieldRef;
    BEGIN
      IF RecRef.NUMBER = 0 THEN
        EXIT;

      KeyRef := RecRef.KEYINDEX(1);
      IF KeyRef.FIELDCOUNT > 1 THEN
        EXIT;

      FieldRef := KeyRef.FIELDINDEX(1);
      IF FORMAT(FieldRef.TYPE) = 'Code' THEN
        EXIT(FieldRef.VALUE);
    END;

    PROCEDURE GetKeyFields@1160040015(TableNo@1160040000 : Integer;VAR TempKeyFields@1160040004 : TEMPORARY Record 2000000041);
    VAR
      Field@1160040002 : Record 2000000041;
      KeyRef@1160040001 : KeyRef;
      RecRef@1160040003 : RecordRef;
      FieldRef@1160040006 : FieldRef;
      i@1160040005 : Integer;
    BEGIN
      IF TableNo = 0 THEN
        EXIT;

      RecRef.OPEN(TableNo);
      IF RecRef.FINDFIRST THEN;
      KeyRef := RecRef.KEYINDEX(1);
      FOR i := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(i);
        Field.GET(TableNo,FieldRef.NUMBER);
        TempKeyFields := Field;
        TempKeyFields.INSERT;
      END
    END;

    PROCEDURE KeyIsOneFieldCodeType@6085573(VAR RecRef@6085575 : RecordRef) : Boolean;
    VAR
      KeyRef@6085574 : KeyRef;
      FieldRef@6085573 : FieldRef;
    BEGIN
      IF RecRef.NUMBER = 0 THEN
        EXIT;

      KeyRef := RecRef.KEYINDEX(1);
      IF KeyRef.FIELDCOUNT > 1 THEN
        EXIT;

      FieldRef := KeyRef.FIELDINDEX(1);
      EXIT(FORMAT(FieldRef.TYPE) = 'Code');
    END;

    PROCEDURE PartOfKey@1160040006(TableNo@1160040005 : Integer;FieldNo@1160040000 : Integer) : Boolean;
    VAR
      KeyRef@1160040004 : KeyRef;
      FieldRef@1160040003 : FieldRef;
      RecRef@1160040002 : RecordRef;
      Count@1160040001 : Integer;
    BEGIN
      RecRef.OPEN(TableNo);
      IF RecRef.FINDFIRST THEN;
      KeyRef := RecRef.KEYINDEX(1);
      FOR Count := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(Count);
        IF FieldNo = FieldRef.NUMBER THEN
          EXIT(TRUE);
      END;
    END;

    PROCEDURE LookupField@1160040007(VAR Text@1160040003 : Text[250];TableNo@1160040001 : Integer;OnlyKeys@1160040000 : Boolean) : Boolean;
    VAR
      Field@1160040002 : Record 2000000041;
      LookupField@1160040007 : TEMPORARY Record 2000000041;
      FieldNo@1160040004 : Integer;
    BEGIN
      Field.SETRANGE(TableNo,TableNo);
      Field.SETRANGE(Enabled,TRUE);
      Field.SETRANGE(Class,Field.Class::Normal);
      IF Field.FINDSET THEN
        REPEAT
          IF (NOT OnlyKeys) OR (PartOfKey(Field.TableNo,Field."No.")) THEN BEGIN
            LookupField := Field;
            LookupField.INSERT;
            IF FieldNo = 0 THEN
              IF LookupField."Field Caption" = Text THEN
                FieldNo := LookupField."No.";
          END;
        UNTIL Field.NEXT = 0;

      IF EVALUATE(FieldNo,Text) THEN;

      IF NOT LookupField.GET(TableNo,FieldNo) THEN
        IF LookupField.FINDFIRST THEN;

      IF PAGE.RUNMODAL(PAGE::"Field List",LookupField) = ACTION::LookupOK THEN BEGIN
        Text := FORMAT(LookupField."No.");
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetFieldID@1160040016(TableNo@1160040001 : Integer;Text@1160040000 : Text[250]) FieldNo : Integer;
    VAR
      Field@1160040002 : Record 2000000041;
    BEGIN
      IF NOT EVALUATE(FieldNo,Text) THEN BEGIN
        Field.SETRANGE(TableNo,TableNo);
        Field.SETRANGE(Enabled,TRUE);
        Field.SETRANGE("Field Caption",Text);
        IF Field.FINDFIRST THEN
          EXIT(Field."No.");
      END;
    END;

    PROCEDURE ShowTableFields@1160040008(TableNo@1160040001 : Integer;TemplNo@1160040003 : Code[20];TemplFieldType@1160040006 : 'Header,Line';ShowFieldType@1160040007 : Boolean;VAR SourceGUID@1160040000 : GUID);
    VAR
      Field@1160040002 : Record 2000000041;
      TableFilterField@161024012 : Record 6085762;
      TableFilterFieldList@1160040005 : Page 6085762;
      EmptyGUID@1160040004 : GUID;
    BEGIN
      IF TableNo = 0 THEN
        EXIT;

      IF SourceGUID = EmptyGUID THEN
        SourceGUID := CREATEGUID;

      Field.FILTERGROUP(4);
      Field.SETRANGE(TableNo,TableNo);
      Field.SETRANGE(Enabled,TRUE);
      Field.SETRANGE(Class,Field.Class::Normal);
      Field.FILTERGROUP(0);
      IF Field.FINDFIRST THEN BEGIN
        TableFilterFieldList.SetParam(TemplNo,TemplFieldType,SourceGUID,ShowFieldType);
        TableFilterFieldList.SETTABLEVIEW(Field);
        TableFilterFieldList.RUNMODAL;
      END;
    END;

    PROCEDURE DeleteTableFilter@1160040009(TableGUID@1160040005 : GUID);
    VAR
      TableFilterField@1160040000 : Record 6085762;
    BEGIN
      TableFilterField.SETRANGE("Table Filter GUID",TableGUID);
      IF NOT TableFilterField.ISEMPTY THEN
        TableFilterField.DELETEALL;
    END;

    PROCEDURE CheckDocument@1160040010(CategoryCode@1160040004 : Code[20];FieldCap@1160040002 : Text[30]);
    VAR
      DocCat@1160040000 : Record 6085575;
      Document@1160040001 : Record 6085590;
    BEGIN
      Document.SETRANGE("Document Category Code",CategoryCode);
      Document.SETFILTER("Source Record ID Tree ID",'<>%1',0);
      IF NOT Document.ISEMPTY THEN
        ERROR(Text003,FieldCap,DocCat.TABLECAPTION);
    END;

    PROCEDURE CheckDocValue@1160040011(IsLineField@1160040003 : Boolean;Code@1160040004 : Code[20];TemplNo@1160040000 : Code[20];FieldCap@1160040002 : Text[30]);
    VAR
      Value@1160040001 : Record 6085593;
    BEGIN
      Value.SETRANGE(Code,Code);
      Value.SETRANGE("Template No.",TemplNo);
      IF IsLineField THEN
        Value.SETFILTER("Line No.",'<>%1',0);
      Value.SETFILTER("Value (Record ID Tree ID)",'<>%1',0);
      IF NOT Value.ISEMPTY THEN
        ERROR(Text002,FieldCap);
    END;

    PROCEDURE LookupRecordID@161024018(DocCat@1160040004 : Code[20];VAR Text@1160040003 : Text[250]) : Boolean;
    VAR
      Category@1160040001 : Record 6085575;
      TempLookupRecID@161024012 : Record 6085760;
    BEGIN
      Category.GET(DocCat);

      TempLookupRecID."Table No." := Category."Source Table No.";

      IF Text <> '' THEN
        TempLookupRecID."Record ID Tree ID" :=
          GetRecIDTreeID2(TempLookupRecID."Table No.",Category."Source Field No.",Category."Document Category GUID",Text);

      TempLookupRecID."Table Filter GUID" := Category."Document Category GUID";

      CODEUNIT.RUN(CODEUNIT::"Record ID Lookup",TempLookupRecID);

      IF TempLookupRecID."Lookup Mode" = TempLookupRecID."Lookup Mode"::OK THEN BEGIN
        Text := GetKeyValue(TempLookupRecID."Record ID Tree ID",Category."Source Field No.");
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetSourceTableNo@161024017(DocCat@1160040002 : Code[20];RecIDTreeID@1160040000 : Integer) : Integer;
    VAR
      Category@161024012 : Record 6085575;
    BEGIN
      IF GetTableNoFromRecID(RecIDTreeID) <> 0 THEN
        EXIT(GetTableNoFromRecID(RecIDTreeID))
      ELSE BEGIN
        Category.GET(DocCat);
        Category.TESTFIELD("Source Table No.");
        EXIT(Category."Source Table No.");
      END;
    END;

    PROCEDURE GetTableNoFromRecID@1160040018(RecIDTreeID@1160040000 : Integer) : Integer;
    VAR
      RecIDTree@1160040001 : Record 6085763;
    BEGIN
      IF RecIDTree.GET(RecIDTreeID) THEN
        EXIT(RecIDTree."Table No.");
    END;

    PROCEDURE FilterRecRefWithLookupRecID@1160040001(VAR RecRef@1160040000 : RecordRef;LookupRecID@1160040001 : Record 6085760) : Boolean;
    VAR
      TableFilterField@1160040002 : Record 6085762;
      TemplField@1160040006 : Record 6085580;
      CaptureMgt@1160040005 : Codeunit 6085576;
      FieldRef@1160040003 : FieldRef;
      OldFilterGroup@161024012 : Integer;
      Values@1160040004 : Text[100];
    BEGIN
      OldFilterGroup := RecRef.FILTERGROUP;
      RecRef.FILTERGROUP(2);
      TableFilterField.SETRANGE("Table Filter GUID",LookupRecID."Table Filter GUID");
      IF TableFilterField.FINDSET THEN
        REPEAT
          FieldRef := RecRef.FIELD(TableFilterField."Field No.");
          IF TableFilterField."Filter Type" = TableFilterField."Filter Type"::"Fixed Filter" THEN BEGIN
            TableFilterField.GetValues(Values,TableFilterField."Filter Type");
            FieldRef.SETFILTER(Values);
          END ELSE BEGIN
            IF TemplField.GET(TableFilterField."Template No.",TableFilterField."Template Field Type",
              TableFilterField."Template Field Code")
            THEN
              FieldRef.SETFILTER(CaptureMgt.GetValueAsText(LookupRecID."Document No.",LookupRecID."Line No.",TemplField));
          END;
        UNTIL TableFilterField.NEXT = 0;

      RecRef.FILTERGROUP(OldFilterGroup);

      EXIT(RecRef.FINDSET);
    END;

    PROCEDURE SetKeyValueWithLookupRecID@1160040000(TableNo@161024015 : Integer;FieldNo@161024014 : Integer;LookupRecID@161024013 : Record 6085760;KeyValue@161024012 : Text[100];ErrorIfNoRecord@1160040000 : Boolean) : Integer;
    VAR
      RecRef@161024016 : RecordRef;
      FieldRef@161024017 : FieldRef;
    BEGIN
      IF KeyValue = '' THEN
        EXIT;

      RecRef.OPEN(TableNo);
      FilterRecRefWithLookupRecID(RecRef,LookupRecID);

      FieldRef := RecRef.FIELD(FieldNo);
      // Changed to SETRANGE to handle vendors with filter symbols in number, e.g. the & symbol
      FieldRef.SETRANGE(COPYSTR(KeyValue,1,FieldRef.LENGTH));

      IF ErrorIfNoRecord THEN
        RecRef.FINDFIRST
      ELSE
        IF NOT RecRef.FINDFIRST THEN
          EXIT;

      EXIT(GetRecIDTreeID(RecRef,TRUE));
    END;

    LOCAL PROCEDURE FilterRecIDTree@161024013(VAR RecIDTree@161024013 : Record 6085763;ParentKeyIndex@161024022 : Integer;TableNo@161024014 : Integer;FieldRef@161024012 : FieldRef);
    VAR
      CaptureMgt@1160040000 : Codeunit 6085576;
      Field@161024015 : Record 2000000041;
      Int@161024016 : Integer;
      Dec@161024017 : Decimal;
      Date@161024018 : Date;
      Time@161024019 : Time;
      GUID@161024020 : GUID;
      Bool@161024021 : Boolean;
    BEGIN
      RecIDTree.RESET;
      RecIDTree.SETRANGE("Table No.",TableNo);
      RecIDTree.SETRANGE("Parent ID",ParentKeyIndex);

      Field.GET(TableNo,FieldRef.NUMBER);
      CASE Field.Type OF
        Field.Type::Code,Field.Type::Text:
          BEGIN
            RecIDTree.SETCURRENTKEY("Table No.","Parent ID","Value (Text)");
            RecIDTree.SETRANGE("Value (Text)",FORMAT(FieldRef.VALUE));
          END;

        Field.Type::Integer:
          BEGIN
            RecIDTree.SETCURRENTKEY("Table No.","Parent ID","Value (Integer)");
            IF EVALUATE(Int,FORMAT(FieldRef.VALUE)) THEN;
            RecIDTree.SETRANGE("Value (Integer)",Int);
          END;

        Field.Type::Option:
          BEGIN
            RecIDTree.SETCURRENTKEY("Table No.","Parent ID","Value (Integer)");
            IF NOT EVALUATE(Int,FORMAT(FieldRef.VALUE)) THEN
              Int := CaptureMgt.NoOfOccourance(
                COPYSTR(FieldRef.OPTIONCAPTION,1,STRPOS(FieldRef.OPTIONCAPTION,FORMAT(FieldRef.VALUE))),',');
            RecIDTree.SETRANGE("Value (Integer)",Int);
          END;

        Field.Type::Decimal:
          BEGIN
            RecIDTree.SETCURRENTKEY("Table No.","Parent ID","Value (Decimal)");
            IF EVALUATE(Dec,FORMAT(FieldRef.VALUE)) THEN;
            RecIDTree.SETRANGE("Value (Decimal)",Dec);
          END;

        Field.Type::Boolean:
          BEGIN
            RecIDTree.SETCURRENTKEY("Table No.","Parent ID","Value (Boolean)");
            IF EVALUATE(Bool,FORMAT(FieldRef.VALUE)) THEN;
            RecIDTree.SETRANGE("Value (Boolean)",Bool);
          END;

        Field.Type::Date:
          BEGIN
            RecIDTree.SETCURRENTKEY("Table No.","Parent ID","Value (Date)");
            IF EVALUATE(Date,FORMAT(FieldRef.VALUE)) THEN;
            RecIDTree.SETRANGE("Value (Date)",Date);
          END;

        Field.Type::GUID:
          BEGIN
            RecIDTree.SETCURRENTKEY("Table No.","Parent ID","Value (GUID)");
            IF EVALUATE(GUID,FORMAT(FieldRef.VALUE)) THEN;
            RecIDTree.SETRANGE("Value (GUID)",GUID);
          END;

        ELSE
          ERROR(Text004,Field.Type);
      END;
    END;

    LOCAL PROCEDURE SetTreeIDValueFromFieldRef@161024023(VAR RecIDTree@161024013 : Record 6085763;FieldRef@161024014 : FieldRef);
    VAR
      Field@161024012 : Record 2000000041;
      CaptureMgt@1160040001 : Codeunit 6085576;
      int@1160040000 : Integer;
    BEGIN
      Field.GET(RecIDTree."Table No.",RecIDTree."Field No.");
      CASE Field.Type OF
        Field.Type::Code,Field.Type::Text:
          RecIDTree."Value (Text)" := FORMAT(FieldRef.VALUE);

        Field.Type::Integer:
          IF EVALUATE(RecIDTree."Value (Integer)",FORMAT(FieldRef.VALUE)) THEN;

        Field.Type::Option:
          BEGIN
            IF (NOT EVALUATE(int,FORMAT(FieldRef.VALUE))) AND (Field.Type = Field.Type::Option) THEN
              int := CaptureMgt.NoOfOccourance(
                COPYSTR(FieldRef.OPTIONCAPTION,1,STRPOS(FieldRef.OPTIONCAPTION,FORMAT(FieldRef.VALUE))),',');
            RecIDTree."Value (Integer)" := int;
          END;

        Field.Type::Decimal:
          IF EVALUATE(RecIDTree."Value (Decimal)",FORMAT(FieldRef.VALUE)) THEN;

        Field.Type::Boolean:
          IF EVALUATE(RecIDTree."Value (Boolean)",FORMAT(FieldRef.VALUE)) THEN;

        Field.Type::Date:
          IF EVALUATE(RecIDTree."Value (Date)",FORMAT(FieldRef.VALUE)) THEN;

        Field.Type::GUID:
          IF EVALUATE(RecIDTree."Value (GUID)",FORMAT(FieldRef.VALUE)) THEN;

        ELSE
          ERROR(Text004,Field.Type);
      END;
    END;

    LOCAL PROCEDURE GetRecIDTreeValueAsText@161024035(FromCompany@1160040000 : Text[30];RecIDTree@161024013 : Record 6085763) : Text[30];
    VAR
      Field@161024012 : Record 2000000041;
    BEGIN
      IF FromCompany <> '' THEN
        Field.CHANGECOMPANY(FromCompany);

      Field.GET(RecIDTree."Table No.",RecIDTree."Field No.");
      CASE Field.Type OF
        Field.Type::Code,Field.Type::Text:
          EXIT(RecIDTree."Value (Text)");

        Field.Type::Integer,Field.Type::Option:
          EXIT(FORMAT(RecIDTree."Value (Integer)"));

        Field.Type::Decimal:
          EXIT(FORMAT(RecIDTree."Value (Decimal)"));

        Field.Type::Boolean:
          EXIT(FORMAT(RecIDTree."Value (Boolean)"));

        Field.Type::Date:
          EXIT(FORMAT(RecIDTree."Value (Date)"));

        Field.Type::GUID:
          EXIT(FORMAT(RecIDTree."Value (GUID)"));

        ELSE
          ERROR(Text004,Field.Type);
      END;
    END;

    PROCEDURE IsCodeOrText@1160040002(TableNo@1160040000 : Integer;FieldNo@1160040001 : Integer) : Boolean;
    VAR
      Field@1160040002 : Record 2000000041;
    BEGIN
      Field.GET(TableNo,FieldNo);
      CASE Field.Type OF
        Field.Type::Code,Field.Type::Text:
          EXIT(TRUE);
        ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE GetFieldValueInCompany@1160040014(FromCompany@1160040000 : Text[30];FromRecIDTreeID@1160040001 : Integer;FromFieldNo@1160040002 : Integer) : Text[1024];
    VAR
      RecIDTree@1160040005 : Record 6085763;
      RecRef@1160040003 : RecordRef;
      FieldRef@1160040004 : FieldRef;
      Field@6085573 : Record 2000000041;
    BEGIN
      IF FromCompany = '' THEN
        EXIT;

      IF FromRecIDTreeID = 0 THEN
        EXIT;

      IF FromFieldNo = 0 THEN
        EXIT;

      RecIDTree.CHANGECOMPANY(FromCompany);
      IF NOT RecIDTree.GET(FromRecIDTreeID) THEN
        EXIT;

      RecRef.OPEN(RecIDTree."Table No.",FALSE,FromCompany);
      WHILE RecIDTree.GET(FromRecIDTreeID) DO BEGIN
        FieldRef := RecRef.FIELD(RecIDTree."Field No.");
        // Changed to SETRANGE to handle vendors with filter symbols in number, e.g. the & symbol

        IF FromCompany <> '' THEN
          Field.CHANGECOMPANY(FromCompany);

        Field.GET(RecIDTree."Table No.",RecIDTree."Field No.");

        CASE Field.Type OF
          Field.Type::Code,Field.Type::Text:
            FieldRef.SETRANGE(RecIDTree."Value (Text)");

          Field.Type::Integer,Field.Type::Option:
            FieldRef.SETRANGE(RecIDTree."Value (Integer)");

          Field.Type::Decimal:
            FieldRef.SETRANGE(RecIDTree."Value (Decimal)");

          Field.Type::Boolean:
            FieldRef.SETRANGE(RecIDTree."Value (Boolean)");

          Field.Type::Date:
            FieldRef.SETRANGE(RecIDTree."Value (Date)");

          Field.Type::GUID:
            FieldRef.SETRANGE(RecIDTree."Value (GUID)");

          ELSE
            ERROR(Text004,Field.Type);
        END;

        FromRecIDTreeID := RecIDTree."Parent ID";
      END;

      IF NOT RecRef.FINDFIRST THEN
        EXIT;

      FieldRef := RecRef.FIELD(FromFieldNo);
      EXIT(FORMAT(FieldRef.VALUE));
    END;

    PROCEDURE FilterRecRef@1(VAR RecRef@1160040000 : RecordRef;FieldNo@1160040001 : Integer;FieldFilter@1160040002 : Text[250]);
    VAR
      FieldRef@1160040003 : FieldRef;
    BEGIN
      FieldRef := RecRef.FIELD(FieldNo);
      // Changed to SETRANGE to handle vendors with filter symbols in number, e.g. the & symbol
      // When the field type is option, a SETRANGE results in the following error: The type NavOption is unknown.
      // A similary error happens for boolean fields.
      // We therefore keep SETFILTER for option and boolean fields
      IF (FORMAT(FieldRef.TYPE) = 'Option') OR (FORMAT(FieldRef.TYPE) = 'Boolean') THEN
        FieldRef.SETFILTER(FieldFilter)
      ELSE
        FieldRef.SETRANGE(FieldFilter);
    END;

    PROCEDURE GetObjectCaption@4(ObjectType@1160040000 : Integer;ObjectID@1160040001 : Integer) : Text[250];
    VAR
      AllObjWithCaption@1000 : Record 2000000058;
    BEGIN
      IF ObjectID = 0 THEN
        EXIT('');

      IF NOT AllObjWithCaption.GET(ObjectType,ObjectID) THEN
        EXIT(FORMAT(ObjectID));

      EXIT(AllObjWithCaption."Object Caption");
    END;

    PROCEDURE GetObjectID@6(ObjectType@1000 : Integer;Text@1160040000 : Text[250]) ObjectID : Integer;
    BEGIN
      IF Text = '' THEN
        EXIT;

      IF NOT EVALUATE(ObjectID,Text) THEN
        ObjectID := GetObjectIDFromCaption(ObjectType,Text);
    END;

    PROCEDURE GetFieldCaption@5(TableNo@1160040000 : Integer;FieldNo@1160040001 : Integer) : Text[250];
    VAR
      Field@1160040002 : Record 2000000041;
    BEGIN
      IF Field.GET(TableNo,FieldNo) THEN
        EXIT(Field."Field Caption");
    END;

    PROCEDURE LookupObject@3(ObjectType@1160040001 : Integer;VAR Text@1160040000 : Text[250]) : Boolean;
    VAR
      AllObjWithCaption@1000 : Record 2000000058;
      ObjectID@1160040002 : Integer;
    BEGIN
      IF Text <> '' THEN
        IF NOT EVALUATE(ObjectID,Text) THEN
          IF STRPOS(Text,'(') > 0 THEN
            IF EVALUATE(ObjectID,DELCHR(COPYSTR(Text,1,STRPOS(Text,'(')-1),'=',' ')) THEN;

      AllObjWithCaption.SETRANGE("Object Type",ObjectType);
      IF (ObjectID = 0) AND (Text <> '') THEN
        ObjectID := GetObjectIDFromCaption(ObjectType,Text);

      IF AllObjWithCaption.GET(ObjectType,ObjectID) THEN;

      IF PAGE.RUNMODAL(PAGE::"Objects 2",AllObjWithCaption) = ACTION::LookupOK THEN BEGIN
        Text := FORMAT(AllObjWithCaption."Object ID");
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetObjectIDFromCaption@11(ObjectType@1001 : Integer;VAR Text@1000 : Text[250]) ObjectID : Integer;
    VAR
      AllObjWithCaption@1002 : Record 2000000058;
    BEGIN
      AllObjWithCaption.SETRANGE("Object Type",ObjectType);
      IF AllObjWithCaption.FINDSET THEN
        REPEAT
          IF UPPERCASE(AllObjWithCaption."Object Caption") = UPPERCASE(Text) THEN BEGIN
            Text := AllObjWithCaption."Object Caption";
            EXIT(AllObjWithCaption."Object ID");
          END;
        UNTIL AllObjWithCaption.NEXT = 0;
    END;

    PROCEDURE IntToOptionText@1160040012(TableNo@1160040001 : Integer;FieldNo@1160040002 : Integer;OptionValue@1160040000 : Text[30]) : Text[250];
    VAR
      RecRef@1160040004 : RecordRef;
      FieldRef@1160040003 : FieldRef;
      OptionValueAsInt@1160040005 : Integer;
    BEGIN
      IF NOT EVALUATE(OptionValueAsInt,OptionValue) THEN
        EXIT;

      IF OptionValueAsInt = -1 THEN
        EXIT;

      RecRef.OPEN(TableNo);
      FieldRef := RecRef.FIELD(FieldNo);
      EXIT(FORMAT(SELECTSTR(OptionValueAsInt+1,FieldRef.OPTIONCAPTION)));
    END;

    PROCEDURE LookupOptionString@1160040020(TableID@1160040008 : Integer;FldNo@1160040009 : Integer;VAR NewValue@1160040004 : Text[250]) : Boolean;
    VAR
      LookupTableTemp@1160040002 : TEMPORARY Record 6085607;
      RecRef@1160040000 : RecordRef;
      SourceNoFieldRef@1160040001 : FieldRef;
    BEGIN
      RecRef.OPEN(TableID);
      SourceNoFieldRef := RecRef.FIELD(FldNo);
      ParseOptionString(SourceNoFieldRef.OPTIONCAPTION,LookupTableTemp);

      LookupTableTemp.SETRANGE(Value,NewValue);
      LookupTableTemp.SETRANGE(Value);
      IF LookupTableTemp.FINDFIRST THEN;
      IF PAGE.RUNMODAL(0,LookupTableTemp) = ACTION::LookupOK THEN BEGIN
        NewValue := LookupTableTemp.Value;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ParseOptionString@6085575(TextOptString@1160040001 : Text[250];VAR LookupTableTemp@1160040002 : TEMPORARY Record 6085607);
    VAR
      Pos@1160040000 : Integer;
    BEGIN
      REPEAT
        Pos := STRPOS(TextOptString,',');

        LookupTableTemp."Entry No." += 1;
        IF Pos <> 0 THEN
          LookupTableTemp.Value := COPYSTR(TextOptString,1,Pos - 1)
        ELSE
          LookupTableTemp.Value := COPYSTR(TextOptString,1);
        LookupTableTemp.INSERT;

        TextOptString := COPYSTR(TextOptString,Pos + 1);
      UNTIL Pos = 0;
    END;

    PROCEDURE GetFieldCountInKey@2(TableNo@1160040000 : Integer;KeyIndex@6085573 : Integer) : Integer;
    VAR
      KeyRef@1160040001 : KeyRef;
      RecRef@1160040003 : RecordRef;
    BEGIN
      IF TableNo = 0 THEN
        EXIT;

      RecRef.OPEN(TableNo);
      IF RecRef.FINDFIRST THEN;
      KeyRef := RecRef.KEYINDEX(KeyIndex);
      EXIT(KeyRef.FIELDCOUNT);
    END;

    BEGIN
    {
      Some SETFILTER changed to SETRANGE to handle vendors with filter symbols in the number field, e.g. the & symbol
      SETRANGE on Option fields using option caption (text value) will result in an error
      SETRANGE on Boolean fields the text string yes or no will result in an error
      SETFILTER has only been changed to SETRANGE where a filter won't be applied to a option or boolean field
    }
    END.
  }
}

