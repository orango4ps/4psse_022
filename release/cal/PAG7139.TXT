OBJECT Page 7139 Sales Budget Overview
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW113.00,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Sales Budget Overview;
               NOR=Oversikt over salgsbudsjett;
               SVE=FîrsÑljningsbudgetîversikt];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    PageType=ListPlus;
    OnInit=BEGIN
             BudgetDim3FilterEnable := TRUE;
             BudgetDim2FilterEnable := TRUE;
             BudgetDim1FilterEnable := TRUE;
           END;

    OnOpenPage=BEGIN
                 IF ValueType = 0 THEN
                   ValueType := ValueType::"Sales Amount";
                 CurrentAnalysisArea := CurrentAnalysisArea::Sales;
                 ItemBudgetManagement.BudgetNameSelection(
                   CurrentAnalysisArea,CurrentBudgetName,ItemBudgetName,ItemStatisticsBuffer,
                   BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);

                 IF (NewBudgetName <> '') AND (CurrentBudgetName <> NewBudgetName) THEN BEGIN
                   CurrentBudgetName := NewBudgetName;
                   ItemBudgetManagement.CheckBudgetName(CurrentAnalysisArea,CurrentBudgetName,ItemBudgetName);
                   ItemBudgetManagement.SetItemBudgetName(
                     CurrentBudgetName,ItemBudgetName,ItemStatisticsBuffer,
                     BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);
                 END;

                 ItemBudgetManagement.SetLineAndColDim(
                   ItemBudgetName,LineDimCode,LineDimOption,ColumnDimCode,ColumnDimOption);

                 GLSetup.GET;
                 SourceTypeFilter := SourceTypeFilter::Customer;

                 UpdateDimCtrls;

                 FindPeriod('');
                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                 UpdateMatrixSubForm;
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 40      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 NOR=F&unksjoner;
                                 SVE=Fu&nktioner];
                      Image=Action }
      { 41      ;2   ;Action    ;
                      CaptionML=[ENU=Reverse Lines and Columns;
                                 NOR=Reverser linjer og kolonner;
                                 SVE=Byt plats pÜ rader och kolumner];
                      ToolTipML=[ENU=Change the display of the matrix by inverting the values in the Show as Lines and Show as Columns fields.;
                                 NOR=Endre visningen av matrisen ved Ü invertere verdiene i feltene Vis som linjer og Vis som kolonner.;
                                 SVE=éndra visning av matrisen genom att invertera vÑrdena i fÑlten Visa som rader och Visa som kolumner.];
                      ApplicationArea=#SalesBudget;
                      Image=Undo;
                      OnAction=VAR
                                 TempDimCode@1001 : Text[30];
                               BEGIN
                                 TempDimCode := ColumnDimCode;
                                 ColumnDimCode := LineDimCode;
                                 LineDimCode := TempDimCode;
                                 ItemBudgetManagement.ValidateLineDimCode(
                                   ItemBudgetName,LineDimCode,LineDimOption,ColumnDimOption,
                                   InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                                 ItemBudgetManagement.ValidateColumnDimCode(
                                   ItemBudgetName,ColumnDimCode,ColumnDimOption,LineDimOption,
                                   InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 53      ;2   ;Separator  }
      { 54      ;2   ;Action    ;
                      Name=DeleteBudget;
                      CaptionML=[ENU=Delete Budget;
                                 NOR=Slett budsjett;
                                 SVE=Ta bort budget];
                      ToolTipML=[ENU=Delete the current budget.;
                                 NOR=Slett det gjeldende budsjettet.;
                                 SVE=Ta bort aktuell budget.];
                      ApplicationArea=#SalesBudget;
                      Image=Delete;
                      OnAction=BEGIN
                                 ItemBudgetManagement.DeleteBudget(
                                   CurrentAnalysisArea,CurrentBudgetName,
                                   ItemFilter,DateFilter,
                                   SourceTypeFilter,SourceNoFilter,
                                   GlobalDim1Filter,GlobalDim2Filter,
                                   BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);
                               END;
                                }
      { 55      ;2   ;Separator  }
      { 42      ;1   ;ActionGroup;
                      CaptionML=[ENU=Export to Excel;
                                 NOR=Eksporter til Excel;
                                 SVE=Exportera till Excel];
                      Image=ExportToExcel }
      { 38      ;2   ;Action    ;
                      CaptionML=[ENU=Create New Document;
                                 NOR=Opprett nytt dokument;
                                 SVE=Skapa nytt dokument];
                      ToolTipML=[ENU=Open the analysis report in a new Excel workbook. This creates an Excel workbook on your device.;
                                 NOR=èpne analyserapporten i en ny Excel-arbeidsbok. Dermed opprettes det en Excel-arbeidsbok pÜ enheten.;
                                 SVE=ôppna analysrapporten i en ny Excel-arbetsbok. DÜ skapas en Excel-arbetsbok pÜ enheten.];
                      ApplicationArea=#SalesBudget;
                      Image=ExportToExcel;
                      OnAction=VAR
                                 ExportItemBudgetToExcel@1000 : Report 7132;
                               BEGIN
                                 ExportItemBudgetToExcel.SetOptions(
                                   CurrentAnalysisArea,
                                   CurrentBudgetName,
                                   ValueType,
                                   GlobalDim1Filter,GlobalDim2Filter,
                                   BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter,
                                   DateFilter,
                                   SourceTypeFilter,SourceNoFilter,
                                   ItemFilter,
                                   InternalDateFilter,PeriodInitialized,PeriodType,
                                   LineDimOption,ColumnDimOption,LineDimCode,ColumnDimCode,RoundingFactor);
                                 ExportItemBudgetToExcel.RUN;
                               END;
                                }
      { 4       ;2   ;Action    ;
                      CaptionML=[ENU=Update Existing Document;
                                 NOR=Oppdater eksisterende dokument;
                                 SVE=Uppdatera befintligt dokument];
                      ToolTipML=[ENU=Refresh the data in an existing Excel workbook. You must specify the workbook that you want to update.;
                                 NOR=Oppdater dataene i en eksisterende Excel-arbeidsbok. Du mÜ angi arbeidsboken du vil oppdatere.;
                                 SVE=Uppdatera informationen i ett befintligt Excel-ark. Du mÜste ange arket som du vill uppdatera.];
                      ApplicationArea=#SalesBudget;
                      Image=ExportToExcel;
                      OnAction=VAR
                                 ExportItemBudgetToExcel@1000 : Report 7132;
                               BEGIN
                                 ExportItemBudgetToExcel.SetOptions(
                                   CurrentAnalysisArea,
                                   CurrentBudgetName,
                                   ValueType,
                                   GlobalDim1Filter,GlobalDim2Filter,
                                   BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter,
                                   DateFilter,
                                   SourceTypeFilter,SourceNoFilter,
                                   ItemFilter,
                                   InternalDateFilter,PeriodInitialized,PeriodType,
                                   LineDimOption,ColumnDimOption,LineDimCode,ColumnDimCode,RoundingFactor);
                                 ExportItemBudgetToExcel.SetUpdateExistingWorksheet(TRUE);
                                 ExportItemBudgetToExcel.RUN;
                               END;
                                }
      { 56      ;1   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Import from Excel;
                                 NOR=Importer fra Excel;
                                 SVE=Importera frÜn Excel];
                      ToolTipML=[ENU=Import a budget that you exported to Excel earlier.;
                                 NOR=Importer et budsjett du eksporterte til Excel tidligere.;
                                 SVE=Importera en budget som du tidigare exporterade till Excel.];
                      ApplicationArea=#SalesBudget;
                      Image=ImportExcel;
                      OnAction=VAR
                                 ImportItemBudgetFromExcel@1000 : Report 7131;
                               BEGIN
                                 ImportItemBudgetFromExcel.SetParameters(CurrentBudgetName,CurrentAnalysisArea,ValueType);
                                 ImportItemBudgetFromExcel.RUNMODAL;
                                 CLEAR(ImportItemBudgetFromExcel);
                               END;
                                }
      { 13      ;1   ;Action    ;
                      CaptionML=[ENU=Next Period;
                                 NOR=Neste periode;
                                 SVE=NÑsta period];
                      ToolTipML=[ENU=Show the information based on the next period. If you set the View by field to Day, the date filter changes to the day before.;
                                 NOR=Vis informasjonen basert pÜ den neste perioden. Hvis du setter feltet Vis etter til Dag, endres datofiltret til dagen fõr.;
                                 SVE=Visa informationen baserad pÜ nÑsta period. Om du stÑller in fÑltet Visa efter pÜ Dag Ñndras dagsfiltret till dagen fîre.];
                      ApplicationArea=#SalesBudget;
                      Promoted=Yes;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 IF (LineDimOption = LineDimOption::Period) OR (ColumnDimOption = ColumnDimOption::Period) THEN
                                   EXIT;
                                 FindPeriod('>');
                                 CurrPage.UPDATE;
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 10      ;1   ;Action    ;
                      CaptionML=[ENU=Previous Period;
                                 NOR=Forrige periode;
                                 SVE=FîregÜende period];
                      ToolTipML=[ENU=Show the information based on the previous period. If you set the View by field to Day, the date filter changes to the day before.;
                                 NOR=Vis informasjonen basert pÜ den forrige perioden. Hvis du setter feltet Vis etter til Dag, endres datofiltret til dagen fõr.;
                                 SVE=Visa informationen baserad pÜ fîregÜende period. Om du stÑller in fÑltet Visa efter pÜ Dag Ñndras dagfiltret till dagen fîre.];
                      ApplicationArea=#SalesBudget;
                      Promoted=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 IF (LineDimOption = LineDimOption::Period) OR (ColumnDimOption = ColumnDimOption::Period) THEN
                                   EXIT;
                                 FindPeriod('<');
                                 CurrPage.UPDATE;
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 23      ;1   ;Action    ;
                      CaptionML=[ENU=Previous Set;
                                 NOR=Forrige sett;
                                 SVE=FîregÜende uppsÑttning];
                      ToolTipML=[ENU=Go to the previous set of data.;
                                 NOR=GÜ til forrige datasett.;
                                 SVE=GÜ till fîregÜende datauppsÑttning.];
                      ApplicationArea=#SalesBudget;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 MATRIX_Step@1001 : 'Initial,Previous,Same,Next';
                               BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Previous);
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 9       ;1   ;Action    ;
                      CaptionML=[ENU=Previous Column;
                                 NOR=Forrige kolonne;
                                 SVE=FîregÜende kolumn];
                      ToolTipML=[ENU=Go to the previous column.;
                                 NOR=GÜ til forrige kolonne.;
                                 SVE=GÜ till fîregÜende kolumn.];
                      ApplicationArea=#SalesBudget;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::PreviousColumn);
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 11      ;1   ;Action    ;
                      CaptionML=[ENU=Next Column;
                                 NOR=Neste kolonne;
                                 SVE=NÑsta kolumn];
                      ToolTipML=[ENU=Go to the next column.;
                                 NOR=GÜ til neste kolonne.;
                                 SVE=GÜ till nÑsta kolumn.];
                      ApplicationArea=#SalesBudget;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::NextColumn);
                                 UpdateMatrixSubForm;
                               END;
                                }
      { 24      ;1   ;Action    ;
                      CaptionML=[ENU=Next Set;
                                 NOR=Neste sett;
                                 SVE=NÑsta uppsÑttning];
                      ToolTipML=[ENU=Go to the next set of data.;
                                 NOR=GÜ til neste datasett.;
                                 SVE=GÜ till nÑsta datauppsÑttning.];
                      ApplicationArea=#SalesBudget;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextSet;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 MATRIX_Step@1001 : 'Initial,Previous,Same,Next';
                               BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_Step::Next);
                                 UpdateMatrixSubForm;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           NOR=Generelt;
                           SVE=AllmÑnt] }

    { 3   ;2   ;Field     ;
                CaptionML=[ENU=Item Budget Name;
                           NOR=Navn pÜ varebudsjett;
                           SVE=Artikelbudgetnamn];
                ToolTipML=[ENU=Specifies the name of the budget to be shown in the window.;
                           NOR=Angir navnet pÜ budsjettet som skal vises i vinduet.;
                           SVE=Anger namnet pÜ den budget som ska visas i fînstret.];
                ApplicationArea=#SalesBudget;
                SourceExpr=CurrentBudgetName;
                Importance=Promoted;
                OnValidate=BEGIN
                             ItemBudgetManagement.CheckBudgetName(CurrentAnalysisArea,CurrentBudgetName,ItemBudgetName);
                             UpdateMatrixSubForm;
                             CurrentBudgetNameOnAfterValida;
                           END;

                OnLookup=BEGIN
                           ItemBudgetManagement.LookupItemBudgetName(
                             CurrentBudgetName,ItemBudgetName,ItemStatisticsBuffer,
                             BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);
                           ItemBudgetManagement.ValidateLineDimCode(
                             ItemBudgetName,LineDimCode,LineDimOption,ColumnDimOption,
                             InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                           ItemBudgetManagement.ValidateColumnDimCode(
                             ItemBudgetName,ColumnDimCode,ColumnDimOption,LineDimOption,
                             InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                           UpdateDimCtrls;
                           UpdateMatrixSubForm;
                           CurrPage.UPDATE(FALSE);
                         END;
                          }

    { 5   ;2   ;Field     ;
                CaptionML=[ENU=Show as Lines;
                           NOR=Vis som linjer;
                           SVE=Visa som rader];
                ToolTipML=[ENU=Specifies which values you want to show as lines in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                           NOR=Angir hvilke verdier du vil skal vises som linjer i vinduet. Dermed kan du vise det samme matrisevinduet fra ulike perspektiver, spesielt nÜr du bruker bÜde feltet Vis som linjer og feltet Vis som kolonner.;
                           SVE=Anger vilka vÑrden som visas som rader i fînstret. Det gîr det mîjligt att visa samma matrisfînster med flera olika perspektiv, sÑrskilt om du anvÑnder bÜde fÑltet Visa som rader och fÑltet Visa som kolumner.];
                ApplicationArea=#SalesBudget;
                SourceExpr=LineDimCode;
                OnValidate=BEGIN
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               ColumnDimCode := '';
                               ItemBudgetManagement.ValidateColumnDimCode(
                                 ItemBudgetName,ColumnDimCode,ColumnDimOption,LineDimOption,
                                 InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             END;
                             ItemBudgetManagement.ValidateLineDimCode(
                               ItemBudgetName,LineDimCode,LineDimOption,ColumnDimOption,
                               InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             LineDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1000 : Text[30];
                         BEGIN
                           NewCode := ItemBudgetManagement.GetDimSelection(LineDimCode,ItemBudgetName);
                           IF NewCode <> LineDimCode THEN BEGIN
                             Text := NewCode;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 7   ;2   ;Field     ;
                CaptionML=[ENU=Show as Columns;
                           NOR=Vis som kolonner;
                           SVE=Visa som kolumner];
                ToolTipML=[ENU=Specifies which values you want to show as columns in the window. This allows you to see the same matrix window from various perspectives, especially when you use both the Show as Lines field and the Show as Columns field.;
                           NOR=Angir hvilke verdier du vil skal vises som kolonner i vinduet. Dermed kan du vise det samme matrisevinduet fra ulike perspektiver, spesielt nÜr du bruker bÜde feltet Vis som linjer og feltet Vis som kolonner.;
                           SVE=Anger vilka vÑrden som visas som kolumner i fînstret. Det gîr det mîjligt att visa samma matrisfînster med flera olika perspektiv, sÑrskilt om du anvÑnder bÜde fÑltet Visa som rader och fÑltet Visa som kolumner.];
                ApplicationArea=#SalesBudget;
                SourceExpr=ColumnDimCode;
                OnValidate=BEGIN
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               LineDimCode := '';
                               ItemBudgetManagement.ValidateLineDimCode(
                                 ItemBudgetName,LineDimCode,LineDimOption,ColumnDimOption,
                                 InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             END;
                             ItemBudgetManagement.ValidateColumnDimCode(
                               ItemBudgetName,ColumnDimCode,ColumnDimOption,LineDimOption,
                               InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);

                             MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
                             ColumnDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1000 : Text[30];
                         BEGIN
                           NewCode := ItemBudgetManagement.GetDimSelection(ColumnDimCode,ItemBudgetName);
                           IF NewCode <> ColumnDimCode THEN BEGIN
                             Text := NewCode;
                             EXIT(TRUE);
                           END;
                         END;

                ShowMandatory=TRUE }

    { 14  ;2   ;Field     ;
                CaptionML=[ENU=Show Value as;
                           NOR=Vis verdi som;
                           SVE=Visa vÑrde som];
                ToolTipML=[ENU=Specifies if you want to view the item values by sales amount, cost amount, or quantity.;
                           NOR=Angir om du vil vise vareverdiene etter salgsbelõp, kostnadsbelõp eller antall.;
                           SVE=Anger om du vill visa artikelvÑrden efter fîrsÑljningsbelopp, kostnadsbelopp eller antal.];
                OptionCaptionML=[ENU=Sales Amount,Cost Amount,Quantity;
                                 NOR=Salgsbelõp,Kostbelõp,Antall;
                                 SVE=FîrsÑljningsbelopp,Kostnadsbelopp,Antal];
                ApplicationArea=#SalesBudget;
                SourceExpr=ValueType;
                OnValidate=BEGIN
                             ValueTypeOnAfterValidate;
                           END;
                            }

    { 21  ;2   ;Field     ;
                CaptionML=[ENU=View by;
                           NOR=Vis etter;
                           SVE=Visa per];
                ToolTipML=[ENU=Specifies by which period amounts are displayed.;
                           NOR=Angir hvilken periode belõp vises basert pÜ.;
                           SVE=Anger efter vilken period belopp visas.];
                OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                 NOR=Dag,Uke,MÜned,Kvartal,èr,Regnskapsperiode;
                                 SVE=Dag,Vecka,MÜnad,Kvartal,èr,Bokfîringsperiod];
                ApplicationArea=#SalesBudget;
                SourceExpr=PeriodType;
                Importance=Promoted;
                OnValidate=BEGIN
                             FindPeriod('');
                             PeriodTypeOnAfterValidate;
                           END;
                            }

    { 27  ;2   ;Field     ;
                CaptionML=[ENU=Rounding Factor;
                           NOR=Avrundingsfaktor;
                           SVE=Avrundningsfaktor];
                ToolTipML=[ENU=Specifies the factor that is used to round the amounts in the columns.;
                           NOR=Angir faktoren som brukes til Ü avrunde belõpene i kolonnene.;
                           SVE=Anger faktorn som avrundar beloppen i kolumnerna.];
                OptionCaptionML=[ENU=None,1,1000,1000000;
                                 NOR=Ingen,1,1000,1000000;
                                 SVE=Ingen,1,1000,1000000];
                ApplicationArea=#SalesBudget;
                SourceExpr=RoundingFactor;
                OnValidate=BEGIN
                             RoundingFactorOnAfterValidate;
                           END;
                            }

    { 26  ;2   ;Field     ;
                CaptionML=[ENU=Show Column Name;
                           NOR=Vis kolonnenavn;
                           SVE=Visa kolumnnamn];
                ToolTipML=[ENU=Specifies that the names of columns are shown in the matrix window.;
                           NOR=Angir at navnene pÜ kolonnene vises i matrisevinduet.;
                           SVE=Anger namnen pÜ kolumnerna som visas i matrisfînstret.];
                ApplicationArea=#SalesBudget;
                SourceExpr=ShowColumnName;
                OnValidate=BEGIN
                             ShowColumnNameOnAfterValidate;
                           END;
                            }

    { 17  ;1   ;Part      ;
                Name=MATRIX;
                ApplicationArea=#SalesBudget;
                PagePartID=Page9239 }

    { 1907524401;1;Group  ;
                CaptionML=[ENU=Filters;
                           NOR=Filtre;
                           SVE=Filter] }

    { 33  ;2   ;Field     ;
                CaptionML=[ENU=Date Filter;
                           NOR=Datofilter;
                           SVE=Datumfilter];
                ToolTipML=[ENU=Specifies a date filter by which budget amounts are displayed.;
                           NOR=Angir et datofilter som budsjettbelõp skal vises etter.;
                           SVE=Anger ett datumfilter som budgetbeloppen ska visas med.];
                ApplicationArea=#SalesBudget;
                SourceExpr=DateFilter;
                Importance=Promoted;
                OnValidate=VAR
                             TextManagement@1000 : Codeunit 41;
                           BEGIN
                             TextManagement.MakeDateFilter(DateFilter);
                             ItemStatisticsBuffer.SETFILTER("Date Filter",DateFilter);
                             DateFilter := ItemStatisticsBuffer.GETFILTER("Date Filter");
                             InternalDateFilter := DateFilter;
                             DateFilterOnAfterValidate;
                           END;
                            }

    { 31  ;2   ;Field     ;
                Name=SalesCodeFilterCtrl;
                CaptionML=[ENU=Customer Filter;
                           NOR=Kundefilter;
                           SVE=Kundfilter];
                ToolTipML=[ENU=Specifies the filter that applies to the customers to whom items are sold.;
                           NOR=Angir filteret som gjelder for kundene som varene er solgt til.;
                           SVE=Anger filtret som gÑller fîr kunder som artiklarna sÑljs till.];
                ApplicationArea=#SalesBudget;
                SourceExpr=SourceNoFilter;
                Importance=Promoted;
                OnValidate=BEGIN
                             SourceNoFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           CustList@1005 : Page 22;
                           VendList@1004 : Page 27;
                         BEGIN
                           CASE SourceTypeFilter OF
                             SourceTypeFilter::Customer:
                               BEGIN
                                 CustList.LOOKUPMODE := TRUE;
                                 IF CustList.RUNMODAL = ACTION::LookupOK THEN
                                   Text := CustList.GetSelectionFilter
                                 ELSE
                                   EXIT(FALSE);
                               END;
                             SourceTypeFilter::Vendor:
                               BEGIN
                                 VendList.LOOKUPMODE := TRUE;
                                 IF VendList.RUNMODAL = ACTION::LookupOK THEN
                                   Text := VendList.GetSelectionFilter
                                 ELSE
                                   EXIT(FALSE);
                               END;
                           END;

                           EXIT(TRUE);
                         END;
                          }

    { 32  ;2   ;Field     ;
                CaptionML=[ENU=Item Filter;
                           NOR=Varefilter;
                           SVE=Artikelfilter];
                ToolTipML=[ENU=Specifies which items to include in the budget overview.;
                           NOR=Angir hvilke varer som skal inkluderes i budsjettoversikten.;
                           SVE=Anger vilka artiklar som ska ingÜ i budgetîversikten.];
                ApplicationArea=#SalesBudget;
                SourceExpr=ItemFilter;
                OnValidate=BEGIN
                             ItemFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           ItemList@1002 : Page 31;
                         BEGIN
                           ItemList.LOOKUPMODE(TRUE);
                           IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             Text := ItemList.GetSelectionFilter;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 1100528900;2;Field  ;
                CaptionML=[ENU=Forecast Filter;
                           NOR=Prognosefilter];
                SourceExpr=ForecastFilter;
                OnValidate=BEGIN
                             //**4PS (DP00120)
                             ItemBudgetManagement.SetSelectionConstruct(ForecastFilter);
                             ItemStatisticsBuffer.SETFILTER("Forecast Filter",ForecastFilter);
                             CurrPage.UPDATE(FALSE);
                           END;

                OnLookup=VAR
                           StockForecast@1100528900 : Record 11071898;
                         BEGIN
                           //**4PS (DP00120)
                           IF PAGE.RUNMODAL(0, StockForecast) = ACTION::LookupOK THEN BEGIN
                             Text := StockForecast.Code;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 47  ;2   ;Field     ;
                Name=BudgetDim1Filter;
                CaptionML=[ENU=Budget Dimension 1 Filter;
                           NOR=Filter for budsjettdim. 1;
                           SVE=Budget dimension 1 filter];
                ToolTipML=[ENU="Specifies a filter by a budget dimension. ";
                           NOR="Angir et filter etter en budsjettdimensjon. ";
                           SVE="Anger ett filter efter en budgetdimension. "];
                ApplicationArea=#Dimensions;
                SourceExpr=BudgetDim1Filter;
                CaptionClass=GetCaptionClass(1);
                Enabled=BudgetDim1FilterEnable;
                OnValidate=BEGIN
                             BudgetDim1FilterOnAfterValidat;
                           END;

                OnLookup=BEGIN
                           EXIT(LookUpDimFilter(ItemBudgetName."Budget Dimension 1 Code",Text));
                         END;
                          }

    { 44  ;2   ;Field     ;
                Name=BudgetDim2Filter;
                CaptionML=[ENU=Budget Dimension 2 Filter;
                           NOR=Filter for budsjettdim. 2;
                           SVE=Budget dimension 2 filter];
                ToolTipML=[ENU="Specifies a second filter by a budget dimension. ";
                           NOR="Angir ytterligere et filter etter en budsjettdimensjon. ";
                           SVE="Anger ett andra filter efter en budgetdimension. "];
                ApplicationArea=#Dimensions;
                SourceExpr=BudgetDim2Filter;
                CaptionClass=GetCaptionClass(2);
                Enabled=BudgetDim2FilterEnable;
                OnValidate=BEGIN
                             BudgetDim2FilterOnAfterValidat;
                           END;

                OnLookup=BEGIN
                           EXIT(LookUpDimFilter(ItemBudgetName."Budget Dimension 2 Code",Text));
                         END;
                          }

    { 43  ;2   ;Field     ;
                Name=BudgetDim3Filter;
                CaptionML=[ENU=Budget Dimension 3 Filter;
                           NOR=Filter for budsjettdim. 3;
                           SVE=Budget dimension 3 filter];
                ToolTipML=[ENU="Specifies a third filter by a budget dimension. ";
                           NOR="Angir et tredje filter etter en budsjettdimensjon. ";
                           SVE="Anger ett tredje filter efter en budgetdimension. "];
                ApplicationArea=#Dimensions;
                SourceExpr=BudgetDim3Filter;
                CaptionClass=GetCaptionClass(3);
                Enabled=BudgetDim3FilterEnable;
                OnValidate=BEGIN
                             BudgetDim3FilterOnAfterValidat;
                           END;

                OnLookup=BEGIN
                           EXIT(LookUpDimFilter(ItemBudgetName."Budget Dimension 3 Code",Text));
                         END;
                          }

    { 50  ;2   ;Field     ;
                Name=GlobalDim1Filter;
                CaptionML=[ENU=Global Dimension 1 Filter;
                           NOR=Filter for global dimensjon 1;
                           SVE=Global dimension 1 filter];
                ToolTipML=[ENU=Specifies by which global dimension data is shown. Global dimensions are the dimensions that you analyze most frequently. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                           NOR=Angir hvilken global dimensjon data vises etter. Globale dimensjoner er dimensjonene du analyserer oftest. To globale dimensjoner, vanligvis for selskapets mest viktige aktiviteter, er tilgjengelige pÜ alle kort, dokumenter, rapporter og lister.;
                           SVE=Anger vilken global dimension data visas med. Globala dimensioner Ñr de dimensioner som analyseras oftast. TvÜ globala dimensioner, som vanligtvis Ñr dem fîr fîretagets viktigaste aktiviteter, finns pÜ alla kort, dokument, rapporter och listor.];
                ApplicationArea=#Dimensions;
                SourceExpr=GlobalDim1Filter;
                CaptionClass='1,3,1';
                OnValidate=BEGIN
                             GlobalDim1FilterOnAfterValidat;
                           END;

                OnLookup=BEGIN
                           EXIT(LookUpDimFilter(GLSetup."Global Dimension 1 Code",Text));
                         END;
                          }

    { 49  ;2   ;Field     ;
                Name=GlobalDim2Filter;
                CaptionML=[ENU=Global Dimension 2 Filter;
                           NOR=Filter for global dimensjon 2;
                           SVE=Global dimension 2 filter];
                ToolTipML=[ENU=Specifies by which global dimension data is shown. Global dimensions are the dimensions that you analyze most frequently. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                           NOR=Angir hvilken global dimensjon data vises etter. Globale dimensjoner er dimensjonene du analyserer oftest. To globale dimensjoner, vanligvis for selskapets mest viktige aktiviteter, er tilgjengelige pÜ alle kort, dokumenter, rapporter og lister.;
                           SVE=Anger vilken global dimension data visas med. Globala dimensioner Ñr de dimensioner som analyseras oftast. TvÜ globala dimensioner, som vanligtvis Ñr dem fîr fîretagets viktigaste aktiviteter, finns pÜ alla kort, dokument, rapporter och listor.];
                ApplicationArea=#Dimensions;
                SourceExpr=GlobalDim2Filter;
                CaptionClass='1,3,2';
                OnValidate=BEGIN
                             GlobalDim2FilterOnAfterValidat;
                           END;

                OnLookup=BEGIN
                           EXIT(LookUpDimFilter(GLSetup."Global Dimension 2 Code",Text));
                         END;
                          }

  }
  CODE
  {
    VAR
      GLSetup@1026 : Record 98;
      ItemBudgetName@1010 : Record 7132;
      ItemStatisticsBuffer@1006 : Record 5821;
      MATRIX_MatrixRecords@1137 : ARRAY [32] OF Record 367;
      ItemBudgetManagement@1003 : Codeunit 7130;
      MATRIX_CaptionSet@1138 : ARRAY [32] OF Text[80];
      MATRIX_CaptionRange@1139 : Text;
      FirstColumn@1020 : Text;
      LastColumn@1021 : Text;
      MATRIX_PrimKeyFirstCaptionInCu@1143 : Text;
      MATRIX_CurrentNoOfColumns@1144 : Integer;
      CurrentAnalysisArea@1005 : 'Sales,Purchase,Inventory';
      CurrentBudgetName@1002 : Code[10];
      SourceTypeFilter@1017 : ' ,Customer,Vendor,Item';
      SourceNoFilter@1016 : Text;
      ItemFilter@1019 : Text;
      ValueType@1018 : 'Sales Amount,Cost Amount,Quantity';
      RoundingFactor@1028 : 'None,1,1000,1000000';
      LineDimOption@1001 : 'Item,Customer,Vendor,Period,Location,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3';
      ColumnDimOption@1000 : 'Item,Customer,Vendor,Period,Location,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3';
      PeriodType@1022 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      GlobalDim1Filter@1024 : Text;
      GlobalDim2Filter@1023 : Text;
      BudgetDim1Filter@1009 : Text;
      BudgetDim2Filter@1008 : Text;
      BudgetDim3Filter@1007 : Text;
      LineDimCode@1012 : Text[30];
      ColumnDimCode@1011 : Text[30];
      DateFilter@1014 : Text;
      InternalDateFilter@1013 : Text;
      PeriodInitialized@1015 : Boolean;
      ShowColumnName@1025 : Boolean;
      Text003@1034 : TextConst 'ENU=1,6,,Budget Dimension 1 Filter;NOR=1,6,,Filter for budsjettdim. 1;SVE=1,6,,Budgetdimension 1 filter';
      Text004@1033 : TextConst 'ENU=1,6,,Budget Dimension 2 Filter;NOR=1,6,,Filter for budsjettdim. 2;SVE=1,6,,Budgetdimension 2 filter';
      Text005@1004 : TextConst 'ENU=1,6,,Budget Dimension 3 Filter;NOR=1,6,,Filter for budsjettdim. 3;SVE=1,6,,Budgetdimension 3 filter';
      Text100@1036 : TextConst 'ENU=Period;NOR=Periode;SVE=Period';
      NewBudgetName@1037 : Code[10];
      MATRIX_Step@1029 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';
      BudgetDim1FilterEnable@19060021 : Boolean INDATASET;
      BudgetDim2FilterEnable@19020249 : Boolean INDATASET;
      BudgetDim3FilterEnable@19077914 : Boolean INDATASET;
      ForecastFilter@1100528900 : Code[250];

    LOCAL PROCEDURE MATRIX_GenerateColumnCaptions@1152(MATRIX_SetWanted@1000 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn');
    VAR
      MATRIX_PeriodRecords@1001 : ARRAY [32] OF Record 2000000007;
      Location@1005 : Record 14;
      Item@1007 : Record 27;
      Customer@1008 : Record 18;
      Vendor@1009 : Record 23;
      MatrixMgt@1003 : Codeunit 9200;
      RecRef@1004 : RecordRef;
      FieldRef@1011 : FieldRef;
      i@1002 : Integer;
    BEGIN
      CLEAR(MATRIX_CaptionSet);
      CLEAR(MATRIX_MatrixRecords);
      FirstColumn := '';
      LastColumn := '';
      MATRIX_CurrentNoOfColumns := 12;

      IF ColumnDimCode = '' THEN
        EXIT;

      CASE ColumnDimCode OF
        Text100:  // Period
          BEGIN
            MatrixMgt.GeneratePeriodMatrixData(
              MATRIX_SetWanted,12,ShowColumnName,
              PeriodType,DateFilter,MATRIX_PrimKeyFirstCaptionInCu,
              MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns,MATRIX_PeriodRecords);
            FOR i := 1 TO 12 DO BEGIN
              MATRIX_MatrixRecords[i]."Period Start" := MATRIX_PeriodRecords[i]."Period Start";
              MATRIX_MatrixRecords[i]."Period End" := MATRIX_PeriodRecords[i]."Period End";
            END;
            FirstColumn := FORMAT(MATRIX_PeriodRecords[1]."Period Start");
            LastColumn := FORMAT(MATRIX_PeriodRecords[MATRIX_CurrentNoOfColumns]."Period End");
          END;
        Location.TABLECAPTION:
          BEGIN
            CLEAR(MATRIX_CaptionSet);
            RecRef.GETTABLE(Location);
            RecRef.SETTABLE(Location);
            MatrixMgt.GenerateMatrixData(
              RecRef,MATRIX_SetWanted,12,1,
              MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
            FOR i := 1 TO MATRIX_CurrentNoOfColumns DO
              MATRIX_MatrixRecords[i].Code := MATRIX_CaptionSet[i];
            IF ShowColumnName THEN
              MatrixMgt.GenerateMatrixData(
                RecRef,MATRIX_SetWanted::Same,12,2,
                MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
          END;
        Item.TABLECAPTION:
          BEGIN
            CLEAR(MATRIX_CaptionSet);
            RecRef.GETTABLE(Item);
            RecRef.SETTABLE(Item);
            IF ItemFilter <> '' THEN BEGIN
              FieldRef := RecRef.FIELD(Item.FIELDNO("No."));
              FieldRef.SETFILTER(ItemFilter);
            END;
            MatrixMgt.GenerateMatrixData(
              RecRef,MATRIX_SetWanted,12,1,
              MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
            FOR i := 1 TO MATRIX_CurrentNoOfColumns DO
              MATRIX_MatrixRecords[i].Code := MATRIX_CaptionSet[i];
            IF ShowColumnName THEN
              MatrixMgt.GenerateMatrixData(
                RecRef,MATRIX_SetWanted::Same,12,3,
                MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
          END;
        Customer.TABLECAPTION:
          BEGIN
            CLEAR(MATRIX_CaptionSet);
            RecRef.GETTABLE(Customer);
            RecRef.SETTABLE(Customer);
            IF SourceNoFilter <> '' THEN BEGIN
              FieldRef := RecRef.FIELD(Customer.FIELDNO("No."));
              FieldRef.SETFILTER(SourceNoFilter);
            END;
            MatrixMgt.GenerateMatrixData(
              RecRef,MATRIX_SetWanted,12,1,
              MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
            FOR i := 1 TO MATRIX_CurrentNoOfColumns DO
              MATRIX_MatrixRecords[i].Code := MATRIX_CaptionSet[i];
            IF ShowColumnName THEN
              MatrixMgt.GenerateMatrixData(
                RecRef,MATRIX_SetWanted::Same,12,2,
                MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
          END;
        Vendor.TABLECAPTION:
          BEGIN
            CLEAR(MATRIX_CaptionSet);
            RecRef.GETTABLE(Vendor);
            RecRef.SETTABLE(Vendor);
            MatrixMgt.GenerateMatrixData(
              RecRef,MATRIX_SetWanted,12,1,
              MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
            FOR i := 1 TO MATRIX_CurrentNoOfColumns DO
              MATRIX_MatrixRecords[i].Code := MATRIX_CaptionSet[i];
            IF ShowColumnName THEN
              MatrixMgt.GenerateMatrixData(
                RecRef,MATRIX_SetWanted::Same,12,2,
                MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
          END;
        GLSetup."Global Dimension 1 Code":
          MatrixMgt.GenerateDimColumnCaption(
            GLSetup."Global Dimension 1 Code",
            GlobalDim1Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaptionInCu,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
        GLSetup."Global Dimension 2 Code":
          MatrixMgt.GenerateDimColumnCaption(
            GLSetup."Global Dimension 2 Code",
            GlobalDim2Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaptionInCu,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
        ItemBudgetName."Budget Dimension 1 Code":
          MatrixMgt.GenerateDimColumnCaption(
            ItemBudgetName."Budget Dimension 1 Code",
            BudgetDim1Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaptionInCu,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
        ItemBudgetName."Budget Dimension 2 Code":
          MatrixMgt.GenerateDimColumnCaption(
            ItemBudgetName."Budget Dimension 2 Code",
            BudgetDim2Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaptionInCu,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
        ItemBudgetName."Budget Dimension 3 Code":
          MatrixMgt.GenerateDimColumnCaption(
            ItemBudgetName."Budget Dimension 3 Code",
            BudgetDim3Filter,MATRIX_SetWanted,MATRIX_PrimKeyFirstCaptionInCu,FirstColumn,LastColumn,
            MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,ShowColumnName,MATRIX_CaptionRange);
      END;
    END;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[3]);
    VAR
      PeriodFormMgt@1003 : Codeunit 359;
    BEGIN
      PeriodFormMgt.FindPeriodOnMatrixPage(
        DateFilter,InternalDateFilter,SearchText,PeriodType,
        (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period));
    END;

    LOCAL PROCEDURE GetCaptionClass@13(BudgetDimType@1000 : Integer) : Text[250];
    BEGIN
      IF ItemBudgetName.Name <> CurrentBudgetName THEN
        ItemBudgetName.GET(CurrentAnalysisArea,CurrentBudgetName);
      CASE BudgetDimType OF
        1:
          BEGIN
            IF ItemBudgetName."Budget Dimension 1 Code" <> '' THEN
              EXIT('1,6,' + ItemBudgetName."Budget Dimension 1 Code");
            EXIT(Text003);
          END;
        2:
          BEGIN
            IF ItemBudgetName."Budget Dimension 2 Code" <> '' THEN
              EXIT('1,6,' + ItemBudgetName."Budget Dimension 2 Code");
            EXIT(Text004);
          END;
        3:
          BEGIN
            IF ItemBudgetName."Budget Dimension 3 Code" <> '' THEN
              EXIT('1,6,' + ItemBudgetName."Budget Dimension 3 Code");
            EXIT(Text005);
          END;
      END;
    END;

    LOCAL PROCEDURE LookUpDimFilter@57(Dim@1000 : Code[20];VAR Text@1001 : Text[250]) : Boolean;
    VAR
      DimVal@1002 : Record 349;
      DimValList@1003 : Page 560;
    BEGIN
      IF Dim = '' THEN
        EXIT(FALSE);
      DimVal.SETRANGE("Dimension Code",Dim);
      DimValList.SETTABLEVIEW(DimVal);
      DimValList.LOOKUPMODE(TRUE);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValList.GETRECORD(DimVal);
        Text := DimValList.GetSelectionFilter;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE UpdateDimCtrls@1();
    BEGIN
      BudgetDim1FilterEnable := ItemBudgetName."Budget Dimension 1 Code" <> '';
      BudgetDim2FilterEnable := ItemBudgetName."Budget Dimension 2 Code" <> '';
      BudgetDim3FilterEnable := ItemBudgetName."Budget Dimension 3 Code" <> '';
    END;

    [External]
    PROCEDURE SetNewBudgetName@5(NewPurchBudgetName@1000 : Code[10]);
    BEGIN
      NewBudgetName := NewPurchBudgetName;
    END;

    LOCAL PROCEDURE UpdateMatrixSubForm@7();
    BEGIN
      CurrPage.MATRIX.PAGE.SetFilters(
        DateFilter,ItemFilter,SourceNoFilter,
        GlobalDim1Filter,GlobalDim2Filter,
        BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);
      CurrPage.MATRIX.PAGE.Load(
        MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,
        CurrentBudgetName,LineDimOption,ColumnDimOption,RoundingFactor,ValueType,PeriodType);
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE CurrentBudgetNameOnAfterValida@19022925();
    BEGIN
      ItemBudgetManagement.SetItemBudgetName(
        CurrentBudgetName,ItemBudgetName,ItemStatisticsBuffer,
        BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter);
      ItemBudgetManagement.ValidateLineDimCode(
        ItemBudgetName,LineDimCode,LineDimOption,ColumnDimOption,
        InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
      ItemBudgetManagement.ValidateColumnDimCode(
        ItemBudgetName,ColumnDimCode,ColumnDimOption,LineDimOption,
        InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
      UpdateDimCtrls;
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ColumnDimCodeOnAfterValidate@19023109();
    BEGIN
      FindPeriod('');
      MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE LineDimCodeOnAfterValidate@19031201();
    BEGIN
      FindPeriod('');
      MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE ValueTypeOnAfterValidate@19028630();
    BEGIN
      FindPeriod('');
      MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE PeriodTypeOnAfterValidate@19015506();
    VAR
      MATRIX_Step@1001 : 'First,Previous,Next';
    BEGIN
      IF ColumnDimOption = ColumnDimOption::Period THEN
        MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE ShowColumnNameOnAfterValidate@19074585();
    VAR
      MATRIX_SetWanted@1000 : 'First,Previous,Same,Next';
    BEGIN
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Same);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE RoundingFactorOnAfterValidate@19029817();
    BEGIN
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE BudgetDim3FilterOnAfterValidat@19015715();
    BEGIN
      IF ColumnDimOption = ColumnDimOption::"Budget Dimension 3" THEN
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE BudgetDim2FilterOnAfterValidat@19061952();
    BEGIN
      IF ColumnDimOption = ColumnDimOption::"Budget Dimension 2" THEN
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE BudgetDim1FilterOnAfterValidat@19002351();
    BEGIN
      IF ColumnDimOption = ColumnDimOption::"Budget Dimension 1" THEN
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE GlobalDim2FilterOnAfterValidat@19025957();
    BEGIN
      IF ColumnDimOption = ColumnDimOption::"Global Dimension 2" THEN
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE GlobalDim1FilterOnAfterValidat@19037628();
    BEGIN
      IF ColumnDimOption = ColumnDimOption::"Global Dimension 1" THEN
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE SourceNoFilterOnAfterValidate@19003103();
    BEGIN
      IF ColumnDimOption = ColumnDimOption::Customer THEN
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE ItemFilterOnAfterValidate@19051257();
    BEGIN
      IF ColumnDimOption = ColumnDimOption::Item THEN
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    LOCAL PROCEDURE DateFilterOnAfterValidate@19006009();
    BEGIN
      IF ColumnDimOption = ColumnDimOption::Period THEN
        MATRIX_GenerateColumnCaptions(MATRIX_Step::Initial);
      UpdateMatrixSubForm;
    END;

    BEGIN
    END.
  }
}

