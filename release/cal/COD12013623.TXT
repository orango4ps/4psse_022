OBJECT Codeunit 12013623 Import Data
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF404000;
  }
  PROPERTIES
  {
    OnRun=VAR
            ImportDataRowNo@1100285000 : Codeunit 12013622;
            ImportType@1100285010 : Integer;
          BEGIN
            ImportType := ImportDataRowNo.GetImportType;

            CASE ImportType OF
             0: ImportExFlowSetup;
             1: ImportWorkSheetLines;
             2: ImportRequisitions;
            END;
          END;

  }
  CODE
  {
    VAR
      Text001@1240150001 : TextConst 'ENU=Analyzing Data...\@1@@@@@@@@@@@@@@@@@@@@\Updating Data...\@2@@@@@@@@@@@@@@@@@@@@;SVE=Analyzerar Data...\@1@@@@@@@@@@@@@@@@@@@@\Uppdaterar Data...\@2@@@@@@@@@@@@@@@@@@@@';
      Text002@1240150003 : TextConst 'ENU=Primary Key Fields are not positioned at the very far left in the spreadsheet! \\Import stopped.;SVE=Prim„rnyckel f„lten „r inte l„ngst till v„nster i arbetsboken. \\Importen stoppad.';
      Text003@1240150002 : TextConst 'ENU=You do not have update permission on table %1. \\Import stopped.;SVE=Du har inte beh”righet till tabell %1. \\Importen stoppad.';
      BlankRef@1240150004 : TextConst 'ENU=<BLANK>;SVE=<BLANK>';
      TempCodingRuleLine@1100285000 : TEMPORARY Record 12013663;
      TempCodingRule@1100285002 : TEMPORARY Record 12013660;
      EXF003@1100285005 : TextConst 'ENU=%1 is not a valid company in this database.;SVE=%1 „r inte ett giltigt f”retag i databasen.';
      EXF004@1100285006 : TextConst 'ENU=You have to be in the company %1 that you are importing data for!;SVE=Du m†ste ha ”ppet f”retaget %1 n„r du importerar detta data.';
      EXF005@1100285001 : TextConst 'ENU=Import stopped.;SVE=Importen stoppad.';
      TempExDoc@1100285003 : TEMPORARY Record 12013608;
      TempExDocLine@1100285004 : TEMPORARY Record 12013609;

    PROCEDURE ImportExFlowSetup@1100285008();
    VAR
      TempErrorRec@1100285019 : TEMPORARY Record 12013666;
      TempExcelBuf@1100285018 : TEMPORARY Record 12013665;
      TempExcelBuf2@1100285017 : TEMPORARY Record 12013665;
      TempExcelBufAll@1100285016 : TEMPORARY Record 12013665;
      ImportMgt@1100285015 : Codeunit 12013621;
      UpdateOption@1100285013 : 'Insert&Modify,Modify Only,Insert Only';
      SkipUpdateIfErrorIsFound@1100285012 : Boolean;
      ImportError@1100285011 : Boolean;
      DataStartsAtRowNo@1100285010 : Integer;
      FieldNamesRowNo@1100285009 : Integer;
      FileName@1100285007 : Text[250];
      ErrorFileName@1100285006 : Text[250];
      TempTableNo@1100285005 : Code[10];
      DeleteExColumns@1100285004 : Boolean;
      DeleteExCodingRules@1100285003 : Boolean;
      DeleteTemplateRuleLines@1100285002 : Boolean;
      DeleteExLineTypes@1100285001 : Boolean;
      DeleteExDocs@1100285008 : Boolean;
      ValidatePGBGFields@1100285000 : Boolean;
      SheetName@1100285014 : Text[250];
    BEGIN
      ImportMgt.GetFileInfo(DataStartsAtRowNo,FieldNamesRowNo,UpdateOption,
                            SkipUpdateIfErrorIsFound,FileName,ErrorFileName,DeleteExColumns,DeleteExCodingRules,
                            DeleteTemplateRuleLines,DeleteExLineTypes,DeleteExDocs,ValidatePGBGFields,SheetName);

      TempExcelBufAll.RESET;
      TempExcelBufAll.DELETEALL;
      ImportMgt.ReadXMLFile(TempExcelBufAll,FileName);

      TempExcelBufAll.RESET;
      IF TempExcelBufAll.FIND('-') THEN BEGIN
        TempTableNo := TempExcelBufAll.TableNo;
        TempExcelBuf2.INIT;
        TempExcelBuf2."Sort Order" := TempExcelBufAll."Sort Order";
        TempExcelBuf2.TableNo := TempExcelBufAll.TableNo;
        TempExcelBuf2.INSERT;

        REPEAT
          IF TempTableNo <> TempExcelBufAll.TableNo THEN BEGIN
            TempExcelBuf2.INIT;
            TempExcelBuf2."Sort Order" := TempExcelBufAll."Sort Order";
            TempExcelBuf2.TableNo := TempExcelBufAll.TableNo;
            TempExcelBuf2.INSERT;

            TempTableNo := TempExcelBufAll.TableNo;
          END;

        UNTIL TempExcelBufAll.NEXT = 0;
      END;

      TempExcelBuf2.RESET;
      IF TempExcelBuf2.FIND('-') THEN
        REPEAT
          TempExcelBuf.RESET;
          TempExcelBuf.DELETEALL;

          TempExcelBufAll.RESET;
          TempExcelBufAll.SETRANGE(TableNo, TempExcelBuf2.TableNo);
          TempExcelBufAll.FIND('-');
          REPEAT
            TempExcelBuf.INIT;
            TempExcelBuf.TRANSFERFIELDS(TempExcelBufAll);
            TempExcelBuf.INSERT;
          UNTIL TempExcelBufAll.NEXT = 0;

          IF ImportExFlowData(TempErrorRec,TempExcelBuf,TempExcelBuf2.TableNo,DataStartsAtRowNo,FieldNamesRowNo,
                        UpdateOption,SkipUpdateIfErrorIsFound,DeleteExColumns,DeleteExCodingRules,
                        DeleteTemplateRuleLines,DeleteExLineTypes,DeleteExDocs) THEN
            ImportError := TRUE;

          IF ImportError AND SkipUpdateIfErrorIsFound THEN
            ERROR(EXF005);
        UNTIL TempExcelBuf2.NEXT = 0;

      IF ImportError THEN
        ImportMgt.ExportErrorList(TempErrorRec,ErrorFileName);

      ExFlowFunctions(ValidatePGBGFields);
    END;

    PROCEDURE ImportWorkSheetLines@1100285011();
    VAR
      ImportWorkSheetHeader@1100285022 : Record 12013587;
      ImportWorkSheetLine@1100285023 : Record 12013588;
      TempErrorRec@1100285014 : TEMPORARY Record 12013666;
      TempExcelBuf@1100285001 : TEMPORARY Record 12013665;
      TempExcelBuf2@1100285021 : TEMPORARY Record 12013665;
      TempExcelBufAll@1100285020 : TEMPORARY Record 370;
      TempExcelBufAllImp@1100285016 : TEMPORARY Record 12013665;
      ImportMgt@1100285000 : Codeunit 12013621;
      ImportDataRowNo@1100285017 : Codeunit 12013622;
      ExFWorkFlowMgt@1100285025 : Codeunit 12013593;
      FileName@1100285002 : Text[250];
      ErrorFileName@1100285006 : Text[250];
      SheetName@1100285015 : Text[250];
      UpdateOption@1100285007 : 'Insert&Modify,Modify Only,Insert Only';
      DataStartsAtRowNo@1100285005 : Integer;
      FieldNamesRowNo@1100285004 : Integer;
      TempRowNo@1100285018 : Integer;
      TempLineNo@1100285019 : Integer;
      ImportError@1100285003 : Boolean;
      SkipUpdateIfErrorIsFound@1100285013 : Boolean;
      DeleteExColumns@1100285012 : Boolean;
      DeleteExCodingRules@1100285011 : Boolean;
      DeleteTemplateRuleLines@1100285010 : Boolean;
      DeleteExLineTypes@1100285009 : Boolean;
      DeleteExDocs@1100285024 : Boolean;
      ValidatePGBGFields@1100285008 : Boolean;
    BEGIN
      ImportWorkSheetHeader.GET(ImportDataRowNo.GetImportWorkHeader);

      ImportMgt.GetFileInfo(DataStartsAtRowNo,FieldNamesRowNo,UpdateOption,
                            SkipUpdateIfErrorIsFound,FileName,ErrorFileName,DeleteExColumns,DeleteExCodingRules,
                            DeleteTemplateRuleLines,DeleteExLineTypes,DeleteExDocs,ValidatePGBGFields,SheetName);

      TempExcelBufAll.RESET;
      TempExcelBufAll.DELETEALL;
      ImportMgt.ReadExcelSheet(TempExcelBufAll,FileName,SheetName);

      TempExcelBufAll.RESET;
      IF TempExcelBufAll.FIND('-') THEN BEGIN
        TempExcelBuf2.INIT;
        TempExcelBuf2.TableNo := FORMAT(DATABASE::"Exflow Purchase Document Line");
        TempExcelBuf2."Sort Order" := 0;
        TempExcelBuf2.INSERT;

        TempExcelBufAllImp.INIT;
        TempExcelBufAllImp.TableNo := FORMAT(DATABASE::"Exflow Purchase Document Line");
        TempExcelBufAllImp."Row No." := TempExcelBufAll."Row No.";
        TempExcelBufAllImp."Column No." := 1;
        TempExcelBufAllImp."Cell Value as Text" := '12013589'; // field inbound doc no
        TempExcelBufAllImp.INSERT;

        TempExcelBufAllImp.INIT;
        TempExcelBufAllImp.TableNo := FORMAT(DATABASE::"Exflow Purchase Document Line");
        TempExcelBufAllImp."Row No." := TempExcelBufAll."Row No.";
        TempExcelBufAllImp."Column No." := 2;
        TempExcelBufAllImp."Cell Value as Text" := '4';  // field line no.
        TempExcelBufAllImp.INSERT;

        TempExcelBufAllImp.INIT;
        TempExcelBufAllImp.TableNo := FORMAT(DATABASE::"Exflow Purchase Document Line");
        TempExcelBufAllImp."Row No." := TempExcelBufAll."Row No.";
        TempExcelBufAllImp."Column No." := 3;
        TempExcelBufAllImp."Cell Value as Text" := '1';  // document type
        TempExcelBufAllImp.INSERT;

        TempRowNo := TempExcelBufAll."Row No.";
        ImportWorkSheetLine.SETRANGE("Inbound Document No.", ImportWorkSheetHeader."Inbound Document No.");
        IF ImportWorkSheetLine.FINDLAST THEN
          TempLineNo := ImportWorkSheetLine."Line No." + 10000
        ELSE
          TempLineNo := 10000;

        REPEAT
          IF TempRowNo <> TempExcelBufAll."Row No." THEN BEGIN
            TempExcelBufAllImp.INIT;
            TempExcelBufAllImp.TableNo := FORMAT(DATABASE::"Exflow Purchase Document Line");
            TempExcelBufAllImp."Row No." := TempExcelBufAll."Row No.";
            TempExcelBufAllImp."Column No." := 1;
            TempExcelBufAllImp."Cell Value as Text" := FORMAT(ImportWorkSheetHeader."Inbound Document No.");
            TempExcelBufAllImp.INSERT;

            TempExcelBufAllImp.INIT;
            TempExcelBufAllImp.TableNo := FORMAT(DATABASE::"Exflow Purchase Document Line");
            TempExcelBufAllImp."Row No." := TempExcelBufAll."Row No.";
            TempExcelBufAllImp."Column No." := 2;
            TempExcelBufAllImp."Cell Value as Text" := FORMAT(TempLineNo);
            TempExcelBufAllImp.INSERT;

            TempExcelBufAllImp.INIT;
            TempExcelBufAllImp.TableNo := FORMAT(DATABASE::"Exflow Purchase Document Line");
            TempExcelBufAllImp."Row No." := TempExcelBufAll."Row No.";
            TempExcelBufAllImp."Column No." := 3;
            TempExcelBufAllImp."Cell Value as Text" := FORMAT(ImportWorkSheetHeader."Document Type");
            TempExcelBufAllImp.INSERT;

            TempLineNo := TempLineNo + 10000;

            TempRowNo := TempExcelBufAll."Row No.";
          END;

          TempExcelBufAllImp.INIT;
          TempExcelBufAllImp.TRANSFERFIELDS(TempExcelBufAll);
          TempExcelBufAllImp."Column No." := TempExcelBufAll."Column No." + 3;
          TempExcelBufAllImp.INSERT;
        UNTIL TempExcelBufAll.NEXT = 0;
      END;

      MoveDimData(TempExcelBufAllImp,TempExcelBuf2,ImportWorkSheetHeader,DataStartsAtRowNo,FieldNamesRowNo);

      TempExcelBuf2.RESET;
      IF TempExcelBuf2.FIND('-') THEN
        REPEAT
          TempExcelBuf.RESET;
          TempExcelBuf.DELETEALL;

          TempExcelBufAllImp.RESET;
          TempExcelBufAllImp.SETRANGE(TableNo, TempExcelBuf2.TableNo);
          TempExcelBufAllImp.FIND('-');
          REPEAT
            TempExcelBuf.INIT;
            TempExcelBuf.TRANSFERFIELDS(TempExcelBufAllImp);
            TempExcelBuf."Cell Value as Text" := DELCHR(TempExcelBuf."Cell Value as Text",'=','ÿ');
            TempExcelBuf.INSERT;
          UNTIL TempExcelBufAllImp.NEXT = 0;

          IF NOT ImportError THEN
            IF ImportExFlowData(TempErrorRec,TempExcelBuf,TempExcelBuf2.TableNo,DataStartsAtRowNo,FieldNamesRowNo,
                          UpdateOption,SkipUpdateIfErrorIsFound,DeleteExColumns,DeleteExCodingRules,
                          DeleteTemplateRuleLines,DeleteExLineTypes,DeleteExDocs) THEN
              ImportError := TRUE;

          IF ImportError AND SkipUpdateIfErrorIsFound THEN
            ERROR(EXF005);
        UNTIL TempExcelBuf2.NEXT = 0;

      IF ImportError THEN
        ImportMgt.ExportErrorList(TempErrorRec,ErrorFileName)
      ELSE
        ExFWorkFlowMgt.PrePostUpdateApprovers(ImportWorkSheetHeader);
    END;

    PROCEDURE ImportRequisitions@1100285013();
    VAR
      ImportWorkSheetHeader@1100285022 : Record 12013587;
      ImportWorkSheetLine@1100285023 : Record 12013588;
      TempErrorRec@1100285014 : TEMPORARY Record 12013666;
      TempExcelBuf@1100285001 : TEMPORARY Record 12013665;
      TempExcelBuf2@1100285021 : TEMPORARY Record 12013665;
      TempExcelBufAll@1100285020 : TEMPORARY Record 370;
      TempExcelBufAllImp@1100285016 : TEMPORARY Record 12013665;
      ImportMgt@1100285000 : Codeunit 12013621;
      ImportDataRowNo@1100285017 : Codeunit 12013622;
      FileName@1100285002 : Text[250];
      ErrorFileName@1100285006 : Text[250];
      SheetName@1100285015 : Text[250];
      UpdateOption@1100285007 : 'Insert&Modify,Modify Only,Insert Only';
      DataStartsAtRowNo@1100285005 : Integer;
      FieldNamesRowNo@1100285004 : Integer;
      TempRowNo@1100285018 : Integer;
      TempLineNo@1100285019 : Integer;
      ImportError@1100285003 : Boolean;
      SkipUpdateIfErrorIsFound@1100285013 : Boolean;
      DeleteExColumns@1100285012 : Boolean;
      DeleteExCodingRules@1100285011 : Boolean;
      DeleteTemplateRuleLines@1100285010 : Boolean;
      DeleteExLineTypes@1100285009 : Boolean;
      DeleteExDocs@1100285024 : Boolean;
      ValidatePGBGFields@1100285008 : Boolean;
    BEGIN
      ImportWorkSheetHeader.GET(ImportDataRowNo.GetImportWorkHeader);

      ImportMgt.GetFileInfo(DataStartsAtRowNo,FieldNamesRowNo,UpdateOption,
                            SkipUpdateIfErrorIsFound,FileName,ErrorFileName,DeleteExColumns,DeleteExCodingRules,
                            DeleteTemplateRuleLines,DeleteExLineTypes,DeleteExDocs,ValidatePGBGFields,SheetName);

      TempExcelBufAll.RESET;
      TempExcelBufAll.DELETEALL;
      ImportMgt.ReadExcelSheet(TempExcelBufAll,FileName,SheetName);

      TempExcelBufAll.RESET;
      IF TempExcelBufAll.FIND('-') THEN BEGIN
        TempExcelBuf2.INIT;
        TempExcelBuf2.TableNo := FORMAT(DATABASE::"EX Document");
        TempExcelBuf2."Sort Order" := 0;
        TempExcelBuf2.INSERT;

        TempExcelBufAllImp.INIT;
        TempExcelBufAllImp.TableNo := FORMAT(DATABASE::"EX Document");
        TempExcelBufAllImp."Row No." := TempExcelBufAll."Row No.";
        TempExcelBufAllImp."Column No." := 1;
        TempExcelBufAllImp."Cell Value as Text" := '26'; // field ID
        TempExcelBufAllImp.INSERT;

        TempRowNo := TempExcelBufAll."Row No.";
        ImportWorkSheetLine.SETRANGE("Inbound Document No.", ImportWorkSheetHeader."Inbound Document No.");
        IF ImportWorkSheetLine.FINDLAST THEN
          TempLineNo := ImportWorkSheetLine."Line No." + 10000
        ELSE
          TempLineNo := 10000;

        REPEAT
          IF TempRowNo <> TempExcelBufAll."Row No." THEN BEGIN
            TempExcelBufAllImp.INIT;
            TempExcelBufAllImp.TableNo := FORMAT(DATABASE::"Exflow Purchase Document Line");
            TempExcelBufAllImp."Row No." := TempExcelBufAll."Row No.";
            TempExcelBufAllImp."Column No." := 1;
            TempExcelBufAllImp."Cell Value as Text" := FORMAT(ImportWorkSheetHeader."Inbound Document No.");
            TempExcelBufAllImp.INSERT;

            TempExcelBufAllImp.INIT;
            TempExcelBufAllImp.TableNo := FORMAT(DATABASE::"Exflow Purchase Document Line");
            TempExcelBufAllImp."Row No." := TempExcelBufAll."Row No.";
            TempExcelBufAllImp."Column No." := 2;
            TempExcelBufAllImp."Cell Value as Text" := FORMAT(TempLineNo);
            TempExcelBufAllImp.INSERT;

            TempExcelBufAllImp.INIT;
            TempExcelBufAllImp.TableNo := FORMAT(DATABASE::"Exflow Purchase Document Line");
            TempExcelBufAllImp."Row No." := TempExcelBufAll."Row No.";
            TempExcelBufAllImp."Column No." := 3;
            TempExcelBufAllImp."Cell Value as Text" := FORMAT(ImportWorkSheetHeader."Document Type");
            TempExcelBufAllImp.INSERT;

            TempLineNo := TempLineNo + 10000;

            TempRowNo := TempExcelBufAll."Row No.";
          END;

          TempExcelBufAllImp.INIT;
          TempExcelBufAllImp.TRANSFERFIELDS(TempExcelBufAll);
          TempExcelBufAllImp."Column No." := TempExcelBufAll."Column No." + 3;
          TempExcelBufAllImp.INSERT;
        UNTIL TempExcelBufAll.NEXT = 0;
      END;

      MoveDimData(TempExcelBufAllImp,TempExcelBuf2,ImportWorkSheetHeader,DataStartsAtRowNo,FieldNamesRowNo);

      TempExcelBuf2.RESET;
      IF TempExcelBuf2.FIND('-') THEN
        REPEAT
          TempExcelBuf.RESET;
          TempExcelBuf.DELETEALL;

          TempExcelBufAllImp.RESET;
          TempExcelBufAllImp.SETRANGE(TableNo, TempExcelBuf2.TableNo);
          TempExcelBufAllImp.FIND('-');
          REPEAT
            TempExcelBuf.INIT;
            TempExcelBuf.TRANSFERFIELDS(TempExcelBufAllImp);
            TempExcelBuf.INSERT;
          UNTIL TempExcelBufAllImp.NEXT = 0;

          IF NOT ImportError THEN
            IF ImportExFlowData(TempErrorRec,TempExcelBuf,TempExcelBuf2.TableNo,DataStartsAtRowNo,FieldNamesRowNo,
                          UpdateOption,SkipUpdateIfErrorIsFound,DeleteExColumns,DeleteExCodingRules,
                          DeleteTemplateRuleLines,DeleteExLineTypes,DeleteExDocs) THEN
              ImportError := TRUE;

          IF ImportError AND SkipUpdateIfErrorIsFound THEN
            ERROR(EXF005);
        UNTIL TempExcelBuf2.NEXT = 0;

      IF ImportError THEN
        ImportMgt.ExportErrorList(TempErrorRec,ErrorFileName);
    END;

    PROCEDURE ImportExFlowData@1240150001(VAR TempErrorRec@1240150006 : TEMPORARY Record 12013666;VAR TempExcelBuf@1100285006 : TEMPORARY Record 12013665;TempTableNo@1100285005 : Code[50];DataStartsAtRowNo@1240150017 : Integer;FieldNamesRowNo@1240150003 : Integer;UpdateOption@1240150025 : 'Insert&Modify,Modify Only,Insert Only';SkipUpdateIfErrorIsFound@1240150024 : Boolean;DeleteExColumns@1100285002 : Boolean;DeleteExCodingRules@1100285001 : Boolean;DeleteTemplateRuleLines@1100285003 : Boolean;DeleteExLineTypes@1100285004 : Boolean;DeleteExDocs@1100285000 : Boolean) ImportError : Boolean;
    VAR
      Object@1240150021 : Record 2000000001;
      TempFieldList@1240150012 : TEMPORARY Record 12013666;
      TempRecordList@1240150014 : TEMPORARY Record 12013666;
      TempPKList@1240150018 : TEMPORARY Record 12013666;
      Company@1100285008 : Record 2000000006;
      ImportLastRowNo@1240150005 : Codeunit 12013622;
      ImportMgt@1240150007 : Codeunit 12013621;
      ImportFieldRef@1240150009 : FieldRef;
      ImportRecordRef@1240150010 : RecordRef;
      ImportRecordRef2@1240150016 : RecordRef;
      TempImportRecordRef@1240150013 : RecordRef;
      TempRecInserted@1240150019 : Boolean;
      RecInserted@1240150020 : Boolean;
      RecordExists@1240150015 : Boolean;
      ModifyCheckRequired@1240150008 : Boolean;
      ProcessBuffer@1240150026 : Boolean;
      ProcessBufferRecord@1240150027 : Boolean;
      RecordError@1240150028 : Boolean;
      TotalRecNo@1240150002 : Integer;
      RecNo@1240150001 : Integer;
      TableNo@1100285007 : Integer;
      Window@1240150000 : Dialog;
    BEGIN
      // Import the Table Number
      TempExcelBuf.SETRANGE("Row No.",1);
      TempExcelBuf.SETRANGE("Column No.",1);
      IF NOT TempExcelBuf.FIND('-') THEN
        EXIT;

      IF NOT EVALUATE(TableNo, TempTableNo) THEN BEGIN
        Object.SETRANGE(Type, Object.Type::Table);
        Object.SETRANGE(Name, TempTableNo);
        IF NOT Object.FINDFIRST THEN
          EXIT
        ELSE
          TableNo := Object.ID;
      END;

      Object.RESET;
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, TableNo);
      IF NOT Object.FINDFIRST THEN
        EXIT;

      TempExcelBuf.RESET;
      TempExcelBuf.SETFILTER("Row No.",'>=%1',DataStartsAtRowNo);
      TempExcelBuf.SETFILTER("Cell Value as Text", '<>%1', '');
      IF NOT TempExcelBuf.FIND('+') THEN
        EXIT;
      TotalRecNo := TempExcelBuf."Row No.";

      // Build list of PK in the table
      BuildPKKeyList(TableNo,TempPKList);

      // Import the Field Numbers
      ImportFieldNumbers(TableNo,FieldNamesRowNo,TempExcelBuf,TempFieldList,TempPKList);

      // Verify PK's are included in the file as well as in the very first column(s)
      IF NOT (TableNo IN [12013608,12013609,12013610,12013611]) THEN
        VerifyPKPlacement(TempPKList,TempFieldList);

      // Open RecRef variables
      IF TableNo = 12013671 THEN // temp import of dimensions
        ImportRecordRef.OPEN(TableNo,TRUE)
      ELSE
        ImportRecordRef.OPEN(TableNo);

      ImportRecordRef2.OPEN(TableNo);

      IF NOT ImportRecordRef.WRITEPERMISSION THEN
        ERROR(Text003, Object.Name);

      // If table is empty, no modify check is required
      ImportRecordRef.RESET;
      ModifyCheckRequired := NOT ImportRecordRef.ISEMPTY;

      IF GUIALLOWED THEN
        Window.OPEN(Text001);

      TempExcelBuf.RESET;
      TempExcelBuf.SETFILTER("Row No.",'>=%1',DataStartsAtRowNo);
      ConvertExFlowData(TableNo,TempExcelBuf,TempFieldList);

      TempExcelBuf.RESET;
      TempExcelBuf.SETFILTER("Row No.",'>=%1',DataStartsAtRowNo);
      CleanExFlowData(TableNo,TempExcelBuf,TempFieldList,DeleteExColumns,DeleteExCodingRules,DeleteTemplateRuleLines,
                      DeleteExLineTypes,DeleteExDocs);
      COMMIT;

      // Test the values before update
      TempExcelBuf.RESET;
      TempExcelBuf.SETFILTER("Row No.",'>=%1',DataStartsAtRowNo);
      TempExcelBuf.SETFILTER("Cell Value as Text", '<>%1', '');
      IF TempExcelBuf.FIND('-') THEN
        REPEAT
          ImportLastRowNo.SetLastRowNo(TempExcelBuf."Row No.");

          RecNo := RecNo + 1;
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
          BEGIN
            TempRecInserted := FALSE;
            TempPKList.RESET;
            TempPKList.MODIFYALL("Field Found",FALSE);

            CLEAR(TempImportRecordRef);
            TempImportRecordRef.OPEN(TableNo,TRUE);

            TempExcelBuf.SETRANGE("Row No.", TempExcelBuf."Row No.");

            RecordError := FALSE;

            REPEAT
              IF TempFieldList.GET(TempExcelBuf."Column No.") THEN BEGIN // Flowfields are excluded from the import
                IF TempFieldList."Company Name Field" THEN BEGIN
                  IF NOT Company.GET(TempExcelBuf."Cell Value as Text") THEN
                    ERROR('%1', STRSUBSTNO(EXF003, TempExcelBuf."Cell Value as Text"));
                  IF COMPANYNAME <> Company.Name THEN
                    ERROR('%1', STRSUBSTNO(EXF004, TempExcelBuf."Cell Value as Text"));
                END;

                ImportFieldRef := TempImportRecordRef.FIELD(TempFieldList."Field No");

                IF UPPERCASE(TempExcelBuf."Cell Value as Text") = BlankRef THEN
                  TempExcelBuf."Cell Value as Text" := '';

                ImportMgt.SetValidateCheck(NOT ExFlowValidateTrue(TableNo));

                IF NOT ImportMgt.ValidateField(ImportFieldRef.NUMBER,TempExcelBuf."Cell Value as Text",
                                               TempExcelBuf."Row No.",TempExcelBuf."Column No.",TempExcelBuf.xlColID,
                                               ImportFieldRef.NAME,TableNo,TempFieldList."Field Type",
                                               TempImportRecordRef,TempErrorRec) THEN
                BEGIN
                  ImportError := TRUE;
                  RecordError := TRUE;
                END
                ELSE
                  UpdateRecord(ImportFieldRef,TempExcelBuf."Cell Value as Text",FALSE,
                               TableNo,TempFieldList."Field No",TempFieldList."Field Type");

                // Insert temp record when all PK have been found
                // This to get around any MODIFY commands in any of the validation triggers
                // of the target table
                IF NOT TempRecInserted THEN BEGIN
                  IF TempPKList.GET(TempFieldList."Field No") THEN BEGIN
                    TempPKList."Field Found" := TRUE;
                    TempPKList.MODIFY;
                  END;

                  TempPKList.SETRANGE("Field Found", FALSE);
                  IF NOT TempPKList.FIND('-') THEN BEGIN // All PK found
                    TempImportRecordRef.INSERT;
                    TempRecInserted := TRUE;
                  END;
                END;
              END;
            UNTIL TempExcelBuf.NEXT = 0;

            IF ModifyCheckRequired THEN
              ImportRecordRef2.SETPOSITION(TempImportRecordRef.GETPOSITION(FALSE));
              IF ImportRecordRef2.FIND('=') THEN BEGIN
                TempRecordList.INIT;
                TempRecordList."Entry No." := TempExcelBuf."Row No.";
                TempRecordList."Record ID" := ImportRecordRef2.RECORDID;
                TempRecordList.INSERT;
              END;

            IF RecordError THEN BEGIN
              TempExcelBuf.SETRANGE("Cell Value as Text");
              TempExcelBuf.MODIFYALL("Import Error", TRUE);
              TempExcelBuf.SETFILTER("Cell Value as Text", '<>%1', '');
            END;

            TempExcelBuf.SETRANGE("Row No.");
          END;
        UNTIL TempExcelBuf.NEXT = 0;

      // Insert/Modify the values
      RecNo := 1;

      TempPKList.RESET;
      TempPKList.MODIFYALL("Field Found", FALSE);

      TempExcelBuf.RESET;
      TempExcelBuf.SETFILTER("Row No.",'>=%1',DataStartsAtRowNo);
      IF SkipUpdateIfErrorIsFound AND ImportError THEN
        ProcessBuffer := FALSE
      ELSE BEGIN
        TempExcelBuf.SETRANGE("Import Error", FALSE);
        ProcessBuffer := TempExcelBuf.FIND('-');
      END;

      IF ProcessBuffer THEN
        REPEAT
          ImportLastRowNo.SetLastRowNo(TempExcelBuf."Row No.");

          RecNo := RecNo + 1;
          Window.UPDATE(2,ROUND(RecNo / TotalRecNo * 10000,1));
          BEGIN
            RecInserted := FALSE;
            TempPKList.RESET;
            TempPKList.MODIFYALL("Field Found",FALSE);

            TempExcelBuf.SETRANGE("Row No.", TempExcelBuf."Row No.");

            RecordExists := FALSE;
            IF ModifyCheckRequired THEN
              IF TempRecordList.GET(TempExcelBuf."Row No.") THEN
                RecordExists := TRUE;

            ProcessBufferRecord := FALSE;
            CASE UpdateOption OF
              UpdateOption::"Insert&Modify": ProcessBufferRecord := TRUE;
              UpdateOption::"Insert Only": ProcessBufferRecord := NOT RecordExists;
              UpdateOption::"Modify Only": ProcessBufferRecord := RecordExists;
            END;

            IF ProcessBufferRecord THEN BEGIN
              IF RecordExists THEN
                ImportRecordRef.GET(TempRecordList."Record ID")
              ELSE
                ImportRecordRef.INIT;

              REPEAT
                IF TempFieldList.GET(TempExcelBuf."Column No.") THEN BEGIN // Flowfields are excluded from the import
                  IF TempExcelBuf."Cell Value as Text" <> '' THEN BEGIN
                    IF UPPERCASE(TempExcelBuf."Cell Value as Text") = BlankRef THEN
                      TempExcelBuf."Cell Value as Text" := '';

                    ImportFieldRef := ImportRecordRef.FIELD(TempFieldList."Field No");
                    IF NOT (RecordExists AND (TempFieldList."Primary Key" = 'Y')) THEN
                    // Do Not validate PK field(s) for existing records
                      UpdateRecord(ImportFieldRef,TempExcelBuf."Cell Value as Text",ExFlowValidateTrue(TableNo),
                                   TableNo,TempFieldList."Field No",TempFieldList."Field Type");
                  END;

                  // Insert record when all PK have been found
                  // This to get around any MODIFY commands in any of the validation triggers
                  // of the target table
                  IF (NOT RecordExists) AND (NOT RecInserted) THEN BEGIN
                    IF TempPKList.GET(TempFieldList."Field No") THEN BEGIN
                      TempPKList."Field Found" := TRUE;
                      TempPKList.MODIFY;
                    END;

                    TempPKList.SETRANGE("Field Found", FALSE);
                    IF NOT TempPKList.FIND('-') THEN BEGIN // All PK found
                      IF NOT ExFlowDelayedInsert(TableNo) THEN
                        InsertRecordRef(ImportRecordRef,TableNo);
                      RecInserted := TRUE;
                    END;
                  END;
                END;
              UNTIL TempExcelBuf.NEXT = 0;

              IF ExFlowDelayedInsert(TableNo) THEN
                InsertRecordRef(ImportRecordRef,TableNo)
              ELSE BEGIN
                ImportRecordRef.MODIFY(TRUE);
              END;
            END
            ELSE // Do Not process Excel Buf record
              TempExcelBuf.FIND('+');

            TempExcelBuf.SETRANGE("Row No.");
          END;
        UNTIL TempExcelBuf.NEXT = 0;

      IF GUIALLOWED THEN
        Window.CLOSE;

      IF TableNo = 12013671 THEN // temp import of dimensions
        UpdateDimValueForWorksheetLines(ImportRecordRef);

      COMMIT;
      IF TableNo = DATABASE::"EX User Company" THEN
        ExFlowUpdateUser;
      COMMIT;
    END;

    PROCEDURE UpdateRecord@1240150000(VAR ImportFieldRef@1240150011 : FieldRef;TextValue@1240150017 : Text[1024];Validate@1240150003 : Boolean;TableNo@1100285000 : Integer;FieldNo@1240150004 : Integer;FieldType@1240150006 : Integer) : Boolean;
    VAR
      Field@1240150007 : Record 2000000041;
      ImportMgt@1240150014 : Codeunit 12013621;
      TempInt@1240150002 : Integer;
      TempBigInt@1100285002 : BigInteger;
      TempDec@1240150001 : Decimal;
      TempDate@1240150000 : Date;
      TempTime@1240150008 : Time;
      TempDateFormula@1240150005 : DateFormula;
      TempDateTime@1100285001 : DateTime;
    BEGIN
      IF FieldType = -1 THEN
        Field.GET(TableNo,FieldNo)
      ELSE
        Field.Type := FieldType;
      CASE Field.Type OF
        Field.Type::Option:
          BEGIN
            IF ImportMgt.ConvertOptionToInteger(TempInt, ImportFieldRef.OPTIONCAPTION,TextValue) THEN
              IF Validate THEN
                ImportFieldRef.VALIDATE(TempInt)
              ELSE
                ImportFieldRef.VALUE := TempInt;
          END;
        Field.Type::Code:
          BEGIN
            IF Validate THEN
              ImportFieldRef.VALIDATE(TextValue)
            ELSE
              ImportFieldRef.VALUE := TextValue;
          END;
        Field.Type::Date:
          BEGIN
            IF ImportMgt.ConvertTextToDate(TempDate, TextValue) THEN
              IF Validate THEN
                ImportFieldRef.VALIDATE(TempDate)
              ELSE
                ImportFieldRef.VALUE := TempDate;
          END;
        Field.Type::Time:
          BEGIN
            IF ImportMgt.ConvertTextToTime(TempTime, TextValue) THEN
              IF Validate THEN
                ImportFieldRef.VALIDATE(TempTime)
              ELSE
                ImportFieldRef.VALUE := TempTime;
          END;
        Field.Type::DateFormula:
          BEGIN
            EVALUATE(TempDateFormula, TextValue);
            IF Validate THEN
              ImportFieldRef.VALIDATE(TempDateFormula)
            ELSE
              ImportFieldRef.VALUE := TempDateFormula;
          END;
        Field.Type::Decimal:
          BEGIN
            EVALUATE(TempDec, TextValue);
            IF Validate THEN
              ImportFieldRef.VALIDATE(TempDec)
            ELSE
              ImportFieldRef.VALUE := TempDec;
          END;
        Field.Type::Integer:
          BEGIN
            IF TextValue = '' THEN
              TempInt := 0
            ELSE
              EVALUATE(TempInt, TextValue);

            IF Validate THEN
              ImportFieldRef.VALIDATE(TempInt)
            ELSE
              ImportFieldRef.VALUE := TempInt;
          END;
        Field.Type::BigInteger:
          BEGIN
            IF TextValue = '' THEN
              TempBigInt := 0
            ELSE
              EVALUATE(TempBigInt, TextValue);

            IF Validate THEN
              ImportFieldRef.VALIDATE(TempBigInt)
            ELSE
              ImportFieldRef.VALUE := TempBigInt;
          END;

        Field.Type::Text:
          BEGIN
            IF Validate THEN
              ImportFieldRef.VALIDATE(TextValue)
            ELSE
              ImportFieldRef.VALUE := TextValue;
          END;
        Field.Type::Boolean:
          BEGIN
            IF NOT EVALUATE(TempInt, TextValue) THEN
              IF UPPERCASE(TextValue) IN ['YES','Y','JA','J'] THEN
                TempInt := 1
              ELSE
                IF UPPERCASE(TextValue) IN ['NO','N','NEJ'] THEN
                  TempInt := 0;

            IF Validate THEN
              ImportFieldRef.VALIDATE(TempInt)
            ELSE
              ImportFieldRef.VALUE := TempInt;
          END;
        Field.Type::DateTime:
          BEGIN
            EVALUATE(TempDateTime, TextValue);
            IF Validate THEN
              ImportFieldRef.VALIDATE(TempDateTime)
            ELSE
              ImportFieldRef.VALUE := TempDateTime;
          END;
      END;
    END;

    PROCEDURE ImportFieldNumbers@1240150005(TableNo@1240150003 : Integer;FieldNamesRowNo@1240150004 : Integer;VAR TempExcelBuf@1240150001 : TEMPORARY Record 12013665;VAR TempFieldList@1240150000 : TEMPORARY Record 12013666;VAR TempPKList@1240150007 : TEMPORARY Record 12013666);
    VAR
      Field@1240150002 : Record 2000000041;
      TempFieldNo@1240150006 : Integer;
      FieldFound@1240150005 : Boolean;
      TempFieldName@1100285000 : Text[100];
    BEGIN
      TempExcelBuf.RESET;
      TempExcelBuf.SETRANGE("Row No.",FieldNamesRowNo);
      IF TempExcelBuf.FIND('-') THEN
        REPEAT
          FieldFound := FALSE;

          IF EVALUATE(TempFieldNo, TempExcelBuf."Cell Value as Text") THEN BEGIN
            Field.RESET;
            Field.SETRANGE(TableNo, TableNo);
            Field.SETRANGE("No.", TempFieldNo);
            FieldFound := Field.FINDFIRST;
          END;

          IF NOT FieldFound THEN BEGIN
            FieldFound := TRUE;

            TempExcelBuf."Cell Value as Text" := CONVERTSTR(TempExcelBuf."Cell Value as Text",'(','?');
            TempExcelBuf."Cell Value as Text" := CONVERTSTR(TempExcelBuf."Cell Value as Text",')','?');
            TempExcelBuf."Cell Value as Text" := CONVERTSTR(TempExcelBuf."Cell Value as Text",'=','?');

            Field.RESET;
            Field.SETRANGE(TableNo, TableNo);
            TempFieldName := TempExcelBuf."Cell Value as Text";
            IF STRLEN(TempFieldName) < MAXSTRLEN(Field."Field Caption") THEN
              TempFieldName := '@'+TempFieldName;
            Field.SETFILTER("Field Caption", TempFieldName);
            IF NOT Field.FINDFIRST THEN BEGIN
              Field.SETRANGE("Field Caption");
              TempFieldName := TempExcelBuf."Cell Value as Text";
              IF STRLEN(TempFieldName) < MAXSTRLEN(Field.FieldName) THEN
                TempFieldName := '@'+TempFieldName;
              Field.SETFILTER(FieldName, TempFieldName);
              IF NOT Field.FINDFIRST THEN
                FieldFound := FALSE;
            END;
          END;

          IF FieldFound AND (Field.Class = Field.Class::Normal) THEN BEGIN
            TempFieldList.INIT;
            TempFieldList."Entry No." := TempExcelBuf."Column No.";
            TempFieldList."Field No" := Field."No.";
            TempFieldList."Field Type" := Field.Type;
            IF TempPKList.GET(TempFieldList."Field No") THEN
              TempFieldList."Primary Key" := 'Y';
            TempFieldList."Company Name Field" := Field.RelationTableNo = DATABASE::Company;
            TempFieldList.INSERT;
          END;
        UNTIL TempExcelBuf.NEXT = 0;
    END;

    PROCEDURE BuildPKKeyList@1240150004(TableNo@1240150004 : Integer;VAR TempPKList@1240150001 : TEMPORARY Record 12013666);
    VAR
      Field@1240150003 : Record 2000000041;
      TableKey@1240150002 : Record 2000000063;
      CommaPos@1240150000 : Integer;
      TempFieldName@1240150005 : Text[250];
      KeyString@1240150006 : Text[1024];
    BEGIN
      TableKey.SETRANGE(TableNo, TableNo);
      TableKey.SETRANGE("No.", 1); // Primary Key
      TableKey.FINDSET;
      REPEAT
        KeyString := TableKey.Key;

        IF STRPOS(KeyString,',') = 0 THEN BEGIN
          Field.RESET;
          Field.SETRANGE(TableNo, TableNo);
          Field.SETRANGE(FieldName, KeyString);
          Field.FINDFIRST;

          TempPKList.INIT;
          TempPKList."Entry No." := Field."No.";
          TempPKList.INSERT;
        END
        ELSE BEGIN
          CommaPos := STRPOS(KeyString,',');
          TempFieldName := COPYSTR(KeyString,1,CommaPos - 1);
          KeyString := DELSTR(KeyString,1,CommaPos);

          WHILE (CommaPos <> 0) DO BEGIN
            Field.RESET;
            Field.SETRANGE(TableNo, TableNo);
            Field.SETRANGE(FieldName, TempFieldName);
            Field.FINDFIRST;

            TempPKList.INIT;
            TempPKList."Entry No." := Field."No.";
            TempPKList.INSERT;

            CommaPos := STRPOS(KeyString,',');
            IF CommaPos = 0 THEN BEGIN
              TempFieldName := KeyString;

              Field.RESET;
              Field.SETRANGE(TableNo, TableNo);
              Field.SETRANGE(FieldName, TempFieldName);
              Field.FINDFIRST;

              TempPKList.INIT;
              TempPKList."Entry No." := Field."No.";
              TempPKList.INSERT;
            END
            ELSE BEGIN
              TempFieldName := COPYSTR(KeyString,1,CommaPos - 1);
              KeyString := DELSTR(KeyString,1,CommaPos);
            END;
          END;
        END;
      UNTIL TableKey.NEXT = 0;

      CASE TableNo OF
        DATABASE::"Template Rule Line":
          BEGIN
            TempPKList.SETRANGE("Entry No.", 3); // Line No.
            TempPKList.DELETEALL;
          END;
      END;

      TempPKList.RESET;
    END;

    PROCEDURE VerifyPKPlacement@1240150002(VAR TempPKList@1240150002 : TEMPORARY Record 12013666;VAR TempFieldList@1240150000 : TEMPORARY Record 12013666);
    VAR
      NoOfPK@1240150001 : Integer;
    BEGIN
      TempPKList.RESET;
      NoOfPK := TempPKList.COUNT;

      TempFieldList.RESET;
      TempFieldList.FIND('-'); // Top left column
      WHILE NoOfPK > 0 DO BEGIN
        IF NOT TempPKList.GET(TempFieldList."Field No") THEN
          ERROR(Text002);
        NoOfPK -= 1;
      END;
    END;

    PROCEDURE "**ExFlow**"@1100285006();
    BEGIN
    END;

    PROCEDURE InsertRecordRef@1100285004(VAR ImportRecordRef@1100285000 : RecordRef;TableNo@1100285002 : Integer);
    VAR
      EXColumn@1100285006 : Record 12013661;
      EXTemplateRuleLine@1100285007 : Record 12013603;
      ExCodingRule@1100285008 : Record 12013660;
      ExCodingRuleLine@1100285009 : Record 12013663;
      TempLineNo@1100285001 : Integer;
      ImportFieldRef@1100285003 : FieldRef;
      DoInsert@1100285010 : Boolean;
    BEGIN
      DoInsert := TRUE;

      CASE TableNo OF
        DATABASE::"Template Rule Line":
          BEGIN
            EXTemplateRuleLine.RESET;
            ImportFieldRef := ImportRecordRef.FIELD(2); // Code
            EXTemplateRuleLine.SETRANGE(Code, FORMAT(ImportFieldRef.VALUE));

            ImportFieldRef := ImportRecordRef.FIELD(3); // Line No.
            IF EXTemplateRuleLine.FINDLAST THEN
              ImportFieldRef.VALUE := EXTemplateRuleLine."Line No." + 10000
            ELSE
              ImportFieldRef.VALUE := 10000;
          END;
        DATABASE::"EX Document":
          BEGIN
            // Set ID to 0 - this is set by AutoIncrement
            ImportFieldRef := ImportRecordRef.FIELD(26); // ID
            TempExDoc.INIT;
            TempExDoc.ID := ImportFieldRef.VALUE;
            ImportFieldRef.VALUE := 0;
            ImportRecordRef.INSERT(ExFlowInsertTrue(TableNo));
            DoInsert := FALSE;

            ImportFieldRef := ImportRecordRef.FIELD(26); // ID
            TempExDoc."Ex Location ID" := ImportFieldRef.VALUE;
            TempExDoc.INSERT;
          END;
        DATABASE::"EX Document Line":
          BEGIN
            // Set ID to 0 - this is set by AutoIncrement
            ImportFieldRef := ImportRecordRef.FIELD(114); // ID
            TempExDocLine.INIT;
            TempExDocLine.ID := ImportFieldRef.VALUE;
            ImportFieldRef.VALUE := 0;

            ImportFieldRef := ImportRecordRef.FIELD(113); // Document ID
            TempExDoc.GET(ImportFieldRef.VALUE);
            ImportFieldRef.VALUE := TempExDoc."Ex Location ID";

            ImportRecordRef.INSERT(ExFlowInsertTrue(TableNo));
            DoInsert := FALSE;

            ImportFieldRef := ImportRecordRef.FIELD(114); // ID
            TempExDocLine."Connected Line ID" := ImportFieldRef.VALUE;
            TempExDocLine.INSERT;
          END;
        DATABASE::"EX Document Line Approver":
          BEGIN
            // Set ID to 0 - this is set by AutoIncrement
            ImportFieldRef := ImportRecordRef.FIELD(30); // ID
            ImportFieldRef.VALUE := 0;

            ImportFieldRef := ImportRecordRef.FIELD(29); // Document Line ID
            TempExDocLine.GET(ImportFieldRef.VALUE);
            ImportFieldRef.VALUE := TempExDocLine."Connected Line ID";
          END;
        DATABASE::"EX Document Line Dimension":
          BEGIN
            // Set ID to 0 - this is set by AutoIncrement
            ImportFieldRef := ImportRecordRef.FIELD(13); // ID
            ImportFieldRef.VALUE := 0;

            ImportFieldRef := ImportRecordRef.FIELD(12); // Document Line ID
            TempExDocLine.GET(ImportFieldRef.VALUE);
            ImportFieldRef.VALUE := TempExDocLine."Connected Line ID";
          END;
      END;

      IF DoInsert THEN
        ImportRecordRef.INSERT(ExFlowInsertTrue(TableNo))
    END;

    PROCEDURE ExFlowFunctions@1100285000(ValidatePGBGFields@1100285003 : Boolean);
    VAR
      ExCodingRuleLine@1100285002 : Record 12013663;
      VendorIDMgt@1100285000 : Codeunit 12013667;
    BEGIN
      IF TempCodingRule.FINDSET THEN
        REPEAT
          ExCodingRuleLine.SETRANGE(ID, TempCodingRule.ID);
          IF ExCodingRuleLine.FINDFIRST THEN
            ExCodingRuleLine.UpdateExpression;
        UNTIL TempCodingRule.NEXT = 0;

      IF ValidatePGBGFields THEN
        VendorIDMgt.UpdateAllFieldIDs(TRUE);
    END;

    PROCEDURE CleanExFlowData@1100285001(TableNo@1100285000 : Integer;VAR TempExcelBuf@1100285003 : TEMPORARY Record 12013665;VAR TempFieldList@1100285001 : TEMPORARY Record 12013666;DeleteExColumns@1100285008 : Boolean;DeleteExCodingRules@1100285007 : Boolean;DeleteTemplateRuleLines@1100285012 : Boolean;DeleteLineType@1100285017 : Boolean;DeleteExDoc@1100285024 : Boolean);
    VAR
      TempExcelBuf2@1100285002 : TEMPORARY Record 12013665;
      NumberRec@1100285004 : Record 2000000026;
      ExColumn@1100285006 : Record 12013661;
      ExCodingRule@1100285010 : Record 12013660;
      ExCodingRuleLine@1100285011 : Record 12013663;
      TempCompanyList@1100285009 : TEMPORARY Record 2000000006;
      TempTemplateRule@1100285013 : TEMPORARY Record 12013645;
      TemplateRuleLine@1100285014 : Record 12013603;
      ExLineType@1100285018 : Record 12013642;
      ExDoc@1100285020 : Record 12013608;
      ExDocLine@1100285021 : Record 12013609;
      ExDocLineApp@1100285022 : Record 12013610;
      ExDocLineDim@1100285023 : Record 12013611;
      RowExists@1100285005 : Boolean;
      TempCompanyName@1100285015 : Text[50];
      TempTemplateCode@1100285016 : Code[50];
      ExCodingAppGrp@1100285019 : Record 12013664;
      DividerChar@1100285025 : Char;
    BEGIN
      TempExcelBuf2.RESET;
      TempExcelBuf2.DELETEALL;

      CASE TableNo OF
        DATABASE::"EX Column":
          BEGIN
            TempFieldList.SETRANGE("Field No", 10); // Field:Code
            TempFieldList.FIND('-');

            NumberRec.SETFILTER(Number, '>=%1', 1);
            NumberRec.FIND('-');
            REPEAT
              TempExcelBuf.RESET;
              TempExcelBuf.SETRANGE("Row No.", NumberRec.Number);
              RowExists := TempExcelBuf.FIND('-');

              IF RowExists THEN BEGIN
                TempExcelBuf.SETRANGE("Column No.", TempFieldList."Entry No.");
                TempExcelBuf.SETFILTER("Cell Value as Text", '<>%1&<>%2', '', FORMAT(0));
                IF NOT TempExcelBuf.FIND('-') THEN BEGIN
                  TempExcelBuf2."Row No." := TempExcelBuf."Row No.";
                  TempExcelBuf2.INSERT;
                END;
              END;
            UNTIL (NumberRec.NEXT = 0) OR NOT RowExists;

            TempExcelBuf2.RESET;
            IF TempExcelBuf2.FIND('-') THEN
              REPEAT
                TempExcelBuf.SETRANGE("Row No.", TempExcelBuf2."Row No.");
                TempExcelBuf.DELETEALL;
              UNTIL TempExcelBuf2.NEXT = 0;

            // Change format - this because of ascii/ansi conversion errors
            TempFieldList.SETRANGE("Field No", 12); // Field:Format
            IF TempFieldList.FIND('-') THEN BEGIN
              DividerChar := 8212;
              TempExcelBuf.RESET;
              TempExcelBuf.SETRANGE("Column No.", TempFieldList."Entry No.");
              IF TempExcelBuf.FIND('-') THEN
                REPEAT
                  IF TempExcelBuf."Cell Value as Text" = '{0}{1}' THEN BEGIN
                    TempExcelBuf."Cell Value as Text" := '{0}' + FORMAT(DividerChar) + '{1}';
                    TempExcelBuf.MODIFY;
                  END;
                UNTIL TempExcelBuf.NEXT = 0;
            END;

            IF DeleteExColumns THEN BEGIN
              ExColumn.DELETEALL;
            END;
          END;
        DATABASE::"EX Coding Rule":
          BEGIN
            IF DeleteExCodingRules THEN BEGIN
              ExCodingRule.DELETEALL;

              ExCodingRuleLine.DELETEALL;

              ExCodingAppGrp.DELETEALL;
            END;
          END;
        DATABASE::"Ex Coding Rule Line":
          BEGIN
            TempFieldList.SETRANGE("Field No", 10); // Field:Code
            TempFieldList.FIND('-');

            NumberRec.SETFILTER(Number, '>=%1', 1);
            NumberRec.FIND('-');
            REPEAT
              TempExcelBuf.RESET;
              TempExcelBuf.SETRANGE("Row No.", NumberRec.Number);
              RowExists := TempExcelBuf.FIND('-');

              IF RowExists THEN BEGIN
                TempExcelBuf.SETRANGE("Column No.", TempFieldList."Entry No.");
                TempExcelBuf.SETFILTER("Cell Value as Text", '<>%1&<>%2', '', FORMAT(0));
                IF NOT TempExcelBuf.FIND('-') THEN BEGIN
                  TempExcelBuf2."Row No." := TempExcelBuf."Row No.";
                  TempExcelBuf2.INSERT;
                END;
              END;
            UNTIL (NumberRec.NEXT = 0) OR NOT RowExists;

            TempExcelBuf2.RESET;
            IF TempExcelBuf2.FIND('-') THEN
              REPEAT
                TempExcelBuf.SETRANGE("Row No.", TempExcelBuf2."Row No.");
                TempExcelBuf.DELETEALL;
              UNTIL TempExcelBuf2.NEXT = 0;

            IF DeleteExCodingRules THEN BEGIN
              ExCodingRuleLine.DELETEALL;
            END;
          END;
        DATABASE::"Template Rule Line":
          BEGIN
            // Delete lines without a code
            TempFieldList.SETRANGE("Field No", 2); // Field:Code
            TempFieldList.FIND('-');

            NumberRec.SETFILTER(Number, '>=%1', 1);
            NumberRec.FIND('-');
            REPEAT
              TempExcelBuf.RESET;
              TempExcelBuf.SETRANGE("Row No.", NumberRec.Number);
              RowExists := TempExcelBuf.FIND('-');

              IF RowExists THEN BEGIN
                TempExcelBuf.SETRANGE("Column No.", TempFieldList."Entry No.");
                TempExcelBuf.SETFILTER("Cell Value as Text", '<>%1&<>%2', '', FORMAT(0));
                IF NOT TempExcelBuf.FIND('-') THEN BEGIN
                  TempExcelBuf2."Row No." := TempExcelBuf."Row No.";
                  TempExcelBuf2.INSERT;
                END;
              END;
            UNTIL (NumberRec.NEXT = 0) OR NOT RowExists;

            TempExcelBuf2.RESET;
            IF TempExcelBuf2.FIND('-') THEN
              REPEAT
                TempExcelBuf.SETRANGE("Row No.", TempExcelBuf2."Row No.");
                TempExcelBuf.DELETEALL;
              UNTIL TempExcelBuf2.NEXT = 0;

            // Delete Imported values for field Line No. - should be set by the system
            TempFieldList.SETRANGE("Field No", 3); // Field:Line No
            IF TempFieldList.FIND('-') THEN BEGIN
              TempExcelBuf.RESET;
              TempExcelBuf.SETRANGE("Column No.", TempFieldList."Entry No.");
              TempExcelBuf.DELETEALL;
            END;

            IF DeleteTemplateRuleLines THEN BEGIN
              TempFieldList.SETRANGE("Field No", 2); // Field:Code
              TempFieldList.FIND('-');
              TempExcelBuf.SETRANGE("Column No.", TempFieldList."Entry No.");
              TempExcelBuf.SETRANGE("Row No.", TempExcelBuf."Row No.");
              TempExcelBuf.FIND('-');
              REPEAT
                TempTemplateCode := UPPERCASE(TempExcelBuf."Cell Value as Text");

                TempTemplateRule.SETRANGE(Code, TempTemplateCode);
                IF NOT TempTemplateRule.FIND('-') THEN BEGIN
                  TempTemplateRule.Code := TempTemplateCode;
                  TempTemplateRule.INSERT;
                END;
              UNTIL TempExcelBuf.NEXT = 0;

              TempTemplateRule.RESET;
              TempTemplateRule.FIND('-');
              REPEAT
                TemplateRuleLine.SETRANGE(Code, TempTemplateRule.Code);
                TemplateRuleLine.DELETEALL;
              UNTIL TempTemplateRule.NEXT = 0;
            END;
          END;
        DATABASE::"EX Line Type":
          BEGIN
            IF DeleteLineType THEN BEGIN
              ExLineType.RESET;
              ExLineType.DELETEALL;
            END;
          END;
        DATABASE::"EX User Company":
          BEGIN
            // Delete lines without a code
            TempFieldList.SETRANGE("Field No", 2); // Field:User ID
            TempFieldList.FIND('-');

            NumberRec.SETFILTER(Number, '>=%1', 1);
            NumberRec.FIND('-');
            REPEAT
              TempExcelBuf.RESET;
              TempExcelBuf.SETRANGE("Row No.", NumberRec.Number);
              RowExists := TempExcelBuf.FIND('-');

              IF RowExists THEN BEGIN
                TempExcelBuf.SETRANGE("Column No.", TempFieldList."Entry No.");
                TempExcelBuf.SETFILTER("Cell Value as Text", '<>%1&<>%2', '', FORMAT(0));
                IF NOT TempExcelBuf.FIND('-') THEN BEGIN
                  TempExcelBuf2."Row No." := TempExcelBuf."Row No.";
                  TempExcelBuf2.INSERT;
                END;
              END;
            UNTIL (NumberRec.NEXT = 0) OR NOT RowExists;

            TempExcelBuf2.RESET;
            IF TempExcelBuf2.FIND('-') THEN
              REPEAT
                TempExcelBuf.SETRANGE("Row No.", TempExcelBuf2."Row No.");
                TempExcelBuf.DELETEALL;
              UNTIL TempExcelBuf2.NEXT = 0;
          END;
        DATABASE::"Template Rule":
          BEGIN
            // Delete lines without a code
            TempFieldList.SETRANGE("Field No", 2); // Field:Code
            TempFieldList.FIND('-');

            NumberRec.SETFILTER(Number, '>=%1', 1);
            NumberRec.FIND('-');
            REPEAT
              TempExcelBuf.RESET;
              TempExcelBuf.SETRANGE("Row No.", NumberRec.Number);
              RowExists := TempExcelBuf.FIND('-');

              IF RowExists THEN BEGIN
                TempExcelBuf.SETRANGE("Column No.", TempFieldList."Entry No.");
                TempExcelBuf.SETFILTER("Cell Value as Text", '<>%1&<>%2', '', FORMAT(0));
                IF NOT TempExcelBuf.FIND('-') THEN BEGIN
                  TempExcelBuf2."Row No." := TempExcelBuf."Row No.";
                  TempExcelBuf2.INSERT;
                END;
              END;
            UNTIL (NumberRec.NEXT = 0) OR NOT RowExists;

            TempExcelBuf2.RESET;
            IF TempExcelBuf2.FIND('-') THEN
              REPEAT
                TempExcelBuf.SETRANGE("Row No.", TempExcelBuf2."Row No.");
                TempExcelBuf.DELETEALL;
              UNTIL TempExcelBuf2.NEXT = 0;
          END;
        DATABASE::"EX Document":
          BEGIN
            IF DeleteExDoc THEN BEGIN
              ExDoc.DELETEALL;
              ExDocLine.DELETEALL;
              ExDocLineApp.DELETEALL;
              ExDocLineDim.DELETEALL;
            END;
          END;
        DATABASE::"Vendor ID Field":
          BEGIN
            // Delete lines without a field number
            TempFieldList.SETRANGE("Field No", 4); // Field:Field No.
            TempFieldList.FIND('-');

            NumberRec.SETFILTER(Number, '>=%1', 1);
            NumberRec.FIND('-');
            REPEAT
              TempExcelBuf.RESET;
              TempExcelBuf.SETRANGE("Row No.", NumberRec.Number);
              RowExists := TempExcelBuf.FIND('-');

              IF RowExists THEN BEGIN
                TempExcelBuf.SETRANGE("Column No.", TempFieldList."Entry No.");
                TempExcelBuf.SETFILTER("Cell Value as Text", '<>%1&<>%2', '', FORMAT(0));
                IF NOT TempExcelBuf.FIND('-') THEN BEGIN
                  TempExcelBuf2."Row No." := TempExcelBuf."Row No.";
                  TempExcelBuf2.INSERT;
                END;
              END;
            UNTIL (NumberRec.NEXT = 0) OR NOT RowExists;

            TempExcelBuf2.RESET;
            IF TempExcelBuf2.FIND('-') THEN
              REPEAT
                TempExcelBuf.SETRANGE("Row No.", TempExcelBuf2."Row No.");
                TempExcelBuf.DELETEALL;
              UNTIL TempExcelBuf2.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE ExFlowInsertTrue@1100285002(TableNo@1100285002 : Integer) : Boolean;
    BEGIN
      CASE TableNo OF
        DATABASE::"EX Column": EXIT(FALSE);
        DATABASE::"EX Coding Rule": EXIT(FALSE);
        DATABASE::"Ex Coding Rule Line": EXIT(FALSE);
        DATABASE::"ExFlow Setup": EXIT(FALSE);
        DATABASE::"EX User Company": EXIT(FALSE);
        DATABASE::"Template Rule Line": EXIT(FALSE);
        DATABASE::"Template Rule": EXIT(FALSE);
        12013671: EXIT(FALSE); // DATABASE::Temp Import Dimension
        DATABASE::"Exflow Purchase Document Line": EXIT(TRUE);
        DATABASE::"EX Document": EXIT(FALSE);
        DATABASE::"EX Document Line": EXIT(FALSE);
        DATABASE::"EX Document Line Approver": EXIT(FALSE);
        DATABASE::"EX Document Line Dimension": EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ExFlowValidateTrue@1100285007(TableNo@1100285002 : Integer) : Boolean;
    BEGIN
      CASE TableNo OF
        DATABASE::"Ex Coding Rule Line": EXIT(FALSE);
        DATABASE::"ExFlow Setup": EXIT(FALSE);
        DATABASE::"EX Document": EXIT(FALSE);
        DATABASE::"EX Document Line": EXIT(FALSE);
        DATABASE::"EX Document Line Approver": EXIT(FALSE);
        DATABASE::"EX Document Line Dimension": EXIT(FALSE);
        DATABASE::"EX Standard Purchase Line": EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ExFlowDelayedInsert@1100285012(TableNo@1100285002 : Integer) : Boolean;
    BEGIN
      CASE TableNo OF
        12013671: EXIT(TRUE); // DATABASE::Temp Import Dimension
        DATABASE::"Exflow Purchase Document Line": EXIT(TRUE);
        DATABASE::"EX Document": EXIT(TRUE);
        DATABASE::"EX Document Line": EXIT(TRUE);
        DATABASE::"EX Document Line Approver": EXIT(TRUE);
        DATABASE::"EX Document Line Dimension": EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ConvertExFlowData@1100285003(TableNo@1100285001 : Integer;VAR TempExcelBuf@1100285000 : TEMPORARY Record 12013665;VAR TempFieldList@1100285006 : TEMPORARY Record 12013666);
    VAR
      ExColumn@1100285002 : Record 12013661;
      TempExcelBuf2@1100285003 : TEMPORARY Record 12013665;
      TempExcelBuf3@1100285005 : TEMPORARY Record 12013665;
      GLSetup@1100285004 : Record 98;
      SourceColumnNo@1100285007 : Integer;
      CodeColumnNo@1100285008 : Integer;
    BEGIN
      CASE TableNo OF
        DATABASE::"EX Column":
          BEGIN
            GLSetup.GET;

            TempExcelBuf2 := TempExcelBuf;

            TempFieldList.SETRANGE("Field No", ExColumn.FIELDNO(Code));
            TempFieldList.FIND('-');
            CodeColumnNo := TempFieldList."Entry No.";

            TempFieldList.SETRANGE("Field No", ExColumn.FIELDNO(Source));
            TempFieldList.FIND('-');
            SourceColumnNo := TempFieldList."Entry No.";

            TempExcelBuf.SETRANGE("Column No.", CodeColumnNo);
            IF TempExcelBuf.FIND('-') THEN
              REPEAT
                CASE UPPERCASE(TempExcelBuf."Cell Value as Text") OF
                  UPPERCASE(GLSetup."Shortcut Dimension 1 Code"):
                    BEGIN
                      TempExcelBuf3 := TempExcelBuf;

                      TempExcelBuf.SETRANGE("Row No.", TempExcelBuf."Row No.");
                      TempExcelBuf.SETRANGE("Column No.", SourceColumnNo);
                      TempExcelBuf.FIND('-');
                      TempExcelBuf."Cell Value as Text" := 'DIM1';
                      TempExcelBuf.MODIFY;

                      TempExcelBuf.SETRANGE("Row No.");
                      TempExcelBuf.SETRANGE("Column No.", CodeColumnNo);
                      TempExcelBuf := TempExcelBuf3;
                    END;
                  UPPERCASE(GLSetup."Shortcut Dimension 2 Code"):
                    BEGIN
                      TempExcelBuf3 := TempExcelBuf;

                      TempExcelBuf.SETRANGE("Row No.", TempExcelBuf."Row No.");
                      TempExcelBuf.SETRANGE("Column No.", SourceColumnNo);
                      TempExcelBuf.FIND('-');
                      TempExcelBuf."Cell Value as Text" := 'DIM2';
                      TempExcelBuf.MODIFY;

                      TempExcelBuf.SETRANGE("Row No.");
                      TempExcelBuf.SETRANGE("Column No.", CodeColumnNo);
                      TempExcelBuf := TempExcelBuf3;
                    END;
                  UPPERCASE(GLSetup."Shortcut Dimension 3 Code"):
                    BEGIN
                      TempExcelBuf3 := TempExcelBuf;

                      TempExcelBuf.SETRANGE("Row No.", TempExcelBuf."Row No.");
                      TempExcelBuf.SETRANGE("Column No.", SourceColumnNo);
                      TempExcelBuf.FIND('-');
                      TempExcelBuf."Cell Value as Text" := 'DIM3';
                      TempExcelBuf.MODIFY;

                      TempExcelBuf.SETRANGE("Row No.");
                      TempExcelBuf.SETRANGE("Column No.", CodeColumnNo);
                      TempExcelBuf := TempExcelBuf3;
                    END;
                  UPPERCASE(GLSetup."Shortcut Dimension 4 Code"):
                    BEGIN
                      TempExcelBuf3 := TempExcelBuf;

                      TempExcelBuf.SETRANGE("Row No.", TempExcelBuf."Row No.");
                      TempExcelBuf.SETRANGE("Column No.", SourceColumnNo);
                      TempExcelBuf.FIND('-');
                      TempExcelBuf."Cell Value as Text" := 'DIM4';
                      TempExcelBuf.MODIFY;

                      TempExcelBuf.SETRANGE("Row No.");
                      TempExcelBuf.SETRANGE("Column No.", CodeColumnNo);
                      TempExcelBuf := TempExcelBuf3;
                    END;
                  UPPERCASE(GLSetup."Shortcut Dimension 5 Code"):
                    BEGIN
                      TempExcelBuf3 := TempExcelBuf;

                      TempExcelBuf.SETRANGE("Row No.", TempExcelBuf."Row No.");
                      TempExcelBuf.SETRANGE("Column No.", SourceColumnNo);
                      TempExcelBuf.FIND('-');
                      TempExcelBuf."Cell Value as Text" := 'DIM5';
                      TempExcelBuf.MODIFY;

                      TempExcelBuf.SETRANGE("Row No.");
                      TempExcelBuf.SETRANGE("Column No.", CodeColumnNo);
                      TempExcelBuf := TempExcelBuf3;
                    END;
                  UPPERCASE(GLSetup."Shortcut Dimension 6 Code"):
                    BEGIN
                      TempExcelBuf3 := TempExcelBuf;

                      TempExcelBuf.SETRANGE("Row No.", TempExcelBuf."Row No.");
                      TempExcelBuf.SETRANGE("Column No.", SourceColumnNo);
                      TempExcelBuf.FIND('-');
                      TempExcelBuf."Cell Value as Text" := 'DIM6';
                      TempExcelBuf.MODIFY;

                      TempExcelBuf.SETRANGE("Row No.");
                      TempExcelBuf.SETRANGE("Column No.", CodeColumnNo);
                      TempExcelBuf := TempExcelBuf3;
                    END;
                  UPPERCASE(GLSetup."Shortcut Dimension 7 Code"):
                    BEGIN
                      TempExcelBuf3 := TempExcelBuf;

                      TempExcelBuf.SETRANGE("Row No.", TempExcelBuf."Row No.");
                      TempExcelBuf.SETRANGE("Column No.", SourceColumnNo);
                      TempExcelBuf.FIND('-');
                      TempExcelBuf."Cell Value as Text" := 'DIM7';
                      TempExcelBuf.MODIFY;

                      TempExcelBuf.SETRANGE("Row No.");
                      TempExcelBuf.SETRANGE("Column No.", CodeColumnNo);
                      TempExcelBuf := TempExcelBuf3;
                    END;
                  UPPERCASE(GLSetup."Shortcut Dimension 8 Code"):
                    BEGIN
                      TempExcelBuf3 := TempExcelBuf;

                      TempExcelBuf.SETRANGE("Row No.", TempExcelBuf."Row No.");
                      TempExcelBuf.SETRANGE("Column No.", SourceColumnNo);
                      TempExcelBuf.FIND('-');
                      TempExcelBuf."Cell Value as Text" := 'DIM8';
                      TempExcelBuf.MODIFY;

                      TempExcelBuf.SETRANGE("Row No.");
                      TempExcelBuf.SETRANGE("Column No.", CodeColumnNo);
                      TempExcelBuf := TempExcelBuf3;
                    END;
                END;
              UNTIL TempExcelBuf.NEXT = 0;

            TempExcelBuf.SETRANGE("Column No.");
            TempExcelBuf := TempExcelBuf3;
          END;
      END;
    END;

    PROCEDURE ExFlowUpdateUser@1100285009();
    VAR
      ExUser@1100285001 : Record 12013640;
      ExUserCompany@1100285000 : Record 12013641;
      ExCodingRule@1100285002 : Record 12013660;
    BEGIN
      ExUserCompany.RESET;
      IF ExUserCompany.FINDSET(TRUE) THEN BEGIN
        REPEAT
          IF NOT ExUser.GET(ExUserCompany."User ID") THEN BEGIN
            ExUser.INIT;
            ExUser."User ID" := ExUserCompany."User ID";
            ExUser."User Name" := ExUserCompany."User Name";
            ExUser.INSERT;
          END;
        UNTIL ExUserCompany.NEXT = 0;

        ExUserCompany.CreateApprovalGroups('');
      END;
    END;

    PROCEDURE MoveDimData@1100285010(VAR TempExcelBuf@1100285002 : TEMPORARY Record 12013665;VAR TempExcelRecList@1100285005 : TEMPORARY Record 12013665;ImportWorkSheetHeader@1100285008 : Record 12013587;DataStartsAtRowNo@1100285006 : Integer;FieldNamesRowNo@1100285003 : Integer);
    VAR
      TempRecList@1100285011 : TEMPORARY Record 12013665;
      TempExcelBuf3@1100285010 : TEMPORARY Record 12013665;
      Dimension@1100285007 : Record 348;
      ExFlow@1100285001 : Codeunit 12013601;
      TempDimCode@1100285009 : Code[20];
      Index@1100285000 : Integer;
      TempRowNo@1100285004 : Integer;
    BEGIN
      TempExcelRecList.INIT;
      TempExcelRecList.TableNo := FORMAT(12013671);
      TempExcelRecList."Sort Order" := 1;
      TempExcelRecList.INSERT;

      // Create field list entries
      TempExcelBuf.TableNo := FORMAT(12013671);
      TempExcelBuf."Sort Order" := 1;
      TempExcelBuf."Column No." := 1;
      TempExcelBuf."Row No." := FieldNamesRowNo;
      TempExcelBuf."Cell Value as Text" := '1';
      TempExcelBuf.INSERT;
      TempExcelBuf.TableNo := FORMAT(12013671);
      TempExcelBuf."Sort Order" := 1;
      TempExcelBuf."Column No." := 2;
      TempExcelBuf."Row No." := FieldNamesRowNo;
      TempExcelBuf."Cell Value as Text" := '2';
      TempExcelBuf.INSERT;
      TempExcelBuf.TableNo := FORMAT(12013671);
      TempExcelBuf."Sort Order" := 1;
      TempExcelBuf."Column No." := 3;
      TempExcelBuf."Row No." := FieldNamesRowNo;
      TempExcelBuf."Cell Value as Text" :=  '3';
      TempExcelBuf.INSERT;
      TempExcelBuf.TableNo := FORMAT(12013671);
      TempExcelBuf."Sort Order" := 1;
      TempExcelBuf."Column No." := 4;
      TempExcelBuf."Row No." := FieldNamesRowNo;
      TempExcelBuf."Cell Value as Text" := '4';
      TempExcelBuf.INSERT;
      TempExcelBuf.TableNo := FORMAT(12013671);
      TempExcelBuf."Sort Order" := 1;
      TempExcelBuf."Column No." := 5;
      TempExcelBuf."Row No." := FieldNamesRowNo;
      TempExcelBuf."Cell Value as Text" := '5';
      TempExcelBuf.INSERT;
      TempExcelBuf.TableNo := FORMAT(12013671);
      TempExcelBuf."Sort Order" := 1;
      TempExcelBuf."Column No." := 6;
      TempExcelBuf."Row No." := FieldNamesRowNo;
      TempExcelBuf."Cell Value as Text" := '6';
      TempExcelBuf.INSERT;

      TempExcelBuf.RESET;
      TempExcelBuf.SETRANGE("Row No.",FieldNamesRowNo);
      TempExcelBuf.FIND('-');
      TempRowNo := DataStartsAtRowNo;
      REPEAT
        ExFlow.GetDimIndex(COPYSTR(UPPERCASE(TempExcelBuf."Cell Value as Text"),1,20),Index);
        IF Index = 0 THEN BEGIN
          Dimension.SETFILTER("Code Caption", '%1', '@'+COPYSTR(TempExcelBuf."Cell Value as Text",1,30));
          IF Dimension.FINDFIRST THEN BEGIN
            ExFlow.GetDimIndex(Dimension.Code,Index);
            TempExcelBuf."Cell Value as Text" := Dimension.Code;
            TempExcelBuf.MODIFY;
          END;
        END;

        IF Index > 0 THEN BEGIN
          TempExcelBuf3 := TempExcelBuf;

          TempRecList.RESET;
          TempRecList.DELETEALL;

          TempDimCode := UPPERCASE(TempExcelBuf."Cell Value as Text");
          TempExcelBuf."Cell Value as Text" := '';
          TempExcelBuf.MODIFY;

          TempExcelBuf.SETRANGE(TableNo, FORMAT(DATABASE::"Exflow Purchase Document Line"));
          TempExcelBuf.SETFILTER("Row No.", '>=%1', DataStartsAtRowNo);
          TempExcelBuf.SETRANGE("Column No.", TempExcelBuf."Column No.");
          IF TempExcelBuf.FIND('-') THEN
            REPEAT
              IF TempExcelBuf."Cell Value as Text" <> '' THEN BEGIN
                TempRecList."Row No." := TempExcelBuf."Row No.";
                TempRecList.INSERT;
              END;
            UNTIL TempExcelBuf.NEXT = 0;

          IF TempRecList.FIND('-') THEN
            REPEAT
              TempExcelBuf.SETRANGE("Row No.", TempRecList."Row No.");
              TempExcelBuf.SETRANGE("Column No.", TempExcelBuf3."Column No.");
              TempExcelBuf.FIND('-');

              // Dim value
              TempExcelBuf.TableNo := FORMAT(12013671);
              TempExcelBuf."Sort Order" := 1;
              TempExcelBuf."Column No." := 6;
              TempExcelBuf."Row No." := TempRowNo;
              TempExcelBuf.INSERT;
              TempExcelBuf.SETRANGE("Row No.", TempRecList."Row No.");
              TempExcelBuf.SETRANGE("Column No.", TempExcelBuf3."Column No.");
              TempExcelBuf.FIND('-');
              TempExcelBuf.DELETE;

              TempExcelBuf.SETRANGE("Row No.", TempRecList."Row No.");
              TempExcelBuf.SETRANGE("Column No.", 1);
              TempExcelBuf.FIND('-');

              // Inb doc no
              TempExcelBuf.TableNo := FORMAT(12013671);
              TempExcelBuf."Sort Order" := 1;
              TempExcelBuf."Column No." := 3;
              TempExcelBuf."Row No." := TempRowNo;
              TempExcelBuf.INSERT;

              // Line no
              TempExcelBuf.SETRANGE("Column No.", 2); // Line no
              TempExcelBuf.FIND('-');

              TempExcelBuf.TableNo := FORMAT(12013671);
              TempExcelBuf."Sort Order" := 1;
              TempExcelBuf."Column No." := 4;
              TempExcelBuf."Row No." := TempRowNo;
              TempExcelBuf.INSERT;

              // Insert table no
              TempExcelBuf.TableNo := FORMAT(12013671);
              TempExcelBuf."Sort Order" := 1;
              TempExcelBuf."Column No." := 1;
              TempExcelBuf."Row No." := TempRowNo;
              TempExcelBuf."Cell Value as Text" := FORMAT(DATABASE::"Exflow Purchase Document Line");
              TempExcelBuf.INSERT;

              // Insert doc type
              TempExcelBuf.TableNo := FORMAT(12013671);
              TempExcelBuf."Sort Order" := 1;
              TempExcelBuf."Column No." := 2;
              TempExcelBuf."Row No." := TempRowNo;
              TempExcelBuf."Cell Value as Text" := FORMAT(ImportWorkSheetHeader."Document Type",0,'<Number>');
              TempExcelBuf.INSERT;

              // Insert dim code
              TempExcelBuf.TableNo := FORMAT(12013671);
              TempExcelBuf."Sort Order" := 1;
              TempExcelBuf."Column No." := 5;
              TempExcelBuf."Row No." := TempRowNo;
              TempExcelBuf."Cell Value as Text" := TempDimCode;
              TempExcelBuf.INSERT;

              TempRowNo += 1;
            UNTIL TempRecList.NEXT = 0;

          TempExcelBuf.SETRANGE("Column No.");
          TempExcelBuf.SETRANGE("Row No.",FieldNamesRowNo);
          TempExcelBuf := TempExcelBuf3;
        END;
      UNTIL TempExcelBuf.NEXT = 0;
    END;

    PROCEDURE UpdateDimValueForWorksheetLines@1100285016(VAR ImportRecordRef@1100285000 : RecordRef);
    VAR
      ExFPurchDocLine@1100285001 : Record 12013588;
      TempDimSetEntry@1100285002 : TEMPORARY Record 480;
      TempDimImport@1100285004 : TEMPORARY Record 12013671;
      TempDimImport2@1100285006 : TEMPORARY Record 12013671;
      DimMgt@1100285003 : Codeunit 408;
      FldRef@1100285005 : FieldRef;
      TempInbDocNo@1100285007 : Integer;
    BEGIN
      ImportRecordRef.RESET;
      IF ImportRecordRef.FINDSET THEN BEGIN
        REPEAT
          FldRef := ImportRecordRef.FIELD(3);
          TempDimImport."Document No." := FldRef.VALUE;

          FldRef := ImportRecordRef.FIELD(4);
          TempDimImport."Line No." := FldRef.VALUE;

          FldRef := ImportRecordRef.FIELD(5);
          TempDimImport."Dimension Code" := FldRef.VALUE;

          FldRef := ImportRecordRef.FIELD(6);
          TempDimImport."Dimension Value Code" := FldRef.VALUE;

          TempDimImport.INSERT;

          IF NOT TempDimImport2.GET(0,0,TempDimImport."Document No.",TempDimImport."Line No.",'') THEN BEGIN
            TempDimImport2.INIT;
            TempDimImport2."Document No." := TempDimImport."Document No.";
            TempDimImport2."Line No." := TempDimImport."Line No.";
            TempDimImport2.INSERT;
          END;
        UNTIL ImportRecordRef.NEXT = 0;

        TempDimImport2.RESET;
        IF TempDimImport2.FIND('-') THEN
          REPEAT
            TempDimSetEntry.RESET;
            TempDimSetEntry.DELETEALL;

            TempDimImport.RESET;
            TempDimImport.SETRANGE("Document No.", TempDimImport2."Document No.");
            TempDimImport.SETRANGE("Line No.", TempDimImport2."Line No.");
            IF TempDimImport.FIND('-') THEN
              REPEAT
                TempDimSetEntry.INIT;
                TempDimSetEntry.VALIDATE("Dimension Code", TempDimImport."Dimension Code");
                TempDimSetEntry.VALIDATE("Dimension Value Code", TempDimImport."Dimension Value Code");
                TempDimSetEntry.INSERT;
              UNTIL TempDimImport.NEXT = 0;

            EVALUATE(TempInbDocNo,TempDimImport2."Document No.");
            ExFPurchDocLine.GET(TempInbDocNo,TempDimImport2."Line No.");
            ExFPurchDocLine."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
            DimMgt.UpdateGlobalDimFromDimSetID(ExFPurchDocLine."Dimension Set ID",ExFPurchDocLine."Shortcut Dimension 1 Code",ExFPurchDocLine."Shortcut Dimension 2 Code");
            ExFPurchDocLine.MODIFY;
          UNTIL TempDimImport2.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

