OBJECT Table 7316 Warehouse Receipt Header
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01;
  }
  PROPERTIES
  {
    Permissions=TableData 7317=rd;
    OnInsert=BEGIN
               WhseSetup.GET;
               IF "No." = '' THEN BEGIN
                 WhseSetup.TESTFIELD("Whse. Receipt Nos.");
                 NoSeriesMgt.InitSeries(WhseSetup."Whse. Receipt Nos.",xRec."No. Series","Posting Date","No.","No. Series");
               END;

               NoSeriesMgt.SetDefaultSeries("Receiving No. Series",WhseSetup."Posted Whse. Receipt Nos.");

               GetLocation("Location Code");
               VALIDATE("Bin Code",Location."Receipt Bin Code");
               VALIDATE("Cross-Dock Bin Code",Location."Cross-Dock Bin Code");
               "Posting Date" := WORKDATE;
             END;

    OnDelete=BEGIN
               DeleteRelatedLines(TRUE);
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=[ENU=Warehouse Receipt Header;
               NOR=Lagermottakshode];
    LookupPageID=Page7332;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                WhseSetup.GET;
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  NoSeriesMgt.TestManual(WhseSetup."Whse. Receipt Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              NOR=Nr.;
                                                              SVE=Nr] }
    { 2   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=VAR
                                                                WhseRcptLine@1000 : Record 7317;
                                                              BEGIN
                                                                IF NOT WmsManagement.LocationIsAllowed("Location Code") THEN
                                                                  ERROR(Text003,"Location Code");

                                                                IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                  "Zone Code" := '';
                                                                  "Bin Code" := '';
                                                                  "Cross-Dock Zone Code" := '';
                                                                  "Cross-Dock Bin Code" := '';
                                                                  WhseRcptLine.SETRANGE("No.","No.");
                                                                  IF NOT WhseRcptLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text001,
                                                                      FIELDCAPTION("Location Code"));
                                                                END;

                                                                GetLocation("Location Code");
                                                                Location.TESTFIELD("Require Receive");
                                                                IF Location."Directed Put-away and Pick" OR Location."Bin Mandatory" THEN BEGIN
                                                                  VALIDATE("Bin Code",Location."Receipt Bin Code");
                                                                  VALIDATE("Cross-Dock Bin Code",Location."Cross-Dock Bin Code");
                                                                END;

                                                                IF USERID <> '' THEN BEGIN
                                                                  FILTERGROUP := 2;
                                                                  SETRANGE("Location Code","Location Code");
                                                                  FILTERGROUP := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              NOR=Lokasjonskode;
                                                              SVE=Lagerst„llekod] }
    { 3   ;   ;Assigned User ID    ;Code50        ;TableRelation="Warehouse Employee" WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                IF "Assigned User ID" <> '' THEN BEGIN
                                                                  "Assignment Date" := TODAY;
                                                                  "Assignment Time" := TIME;
                                                                END ELSE BEGIN
                                                                  "Assignment Date" := 0D;
                                                                  "Assignment Time" := 0T;
                                                                END;
                                                              END;

                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Assigned User ID;
                                                              NOR=Tilordnet bruker-ID;
                                                              SVE=Tilldelat anv„ndar-ID] }
    { 4   ;   ;Assignment Date     ;Date          ;CaptionML=[ENU=Assignment Date;
                                                              NOR=Tilordningsdato;
                                                              SVE=Tilldelat datum];
                                                   Editable=No }
    { 5   ;   ;Assignment Time     ;Time          ;CaptionML=[ENU=Assignment Time;
                                                              NOR=Tilordningstidspkt.;
                                                              SVE=Tilldelat tid];
                                                   Editable=No }
    { 6   ;   ;Sorting Method      ;Option        ;OnValidate=BEGIN
                                                                IF "Sorting Method" <> xRec."Sorting Method" THEN
                                                                  SortWhseDoc;
                                                              END;

                                                   CaptionML=[ENU=Sorting Method;
                                                              NOR=Sorteringsmetode;
                                                              SVE=Sorteringsmetod];
                                                   OptionCaptionML=[ENU=" ,Item,Document,Shelf or Bin,Due Date,Ship-To";
                                                                    NOR=" ,Vare,Dokument,Hylle,Forfallsdato,Lever til";
                                                                    SVE=" ,Artikel,Dokument,Hyllplats el. lagerplats,F”rfallodatum,Leverans"];
                                                   OptionString=[ ,Item,Document,Shelf or Bin,Due Date,Ship-To] }
    { 7   ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              NOR=Nr.serie;
                                                              SVE=Nr-serie] }
    { 8   ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                IF "Zone Code" <> xRec."Zone Code" THEN BEGIN
                                                                  IF "Zone Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Directed Put-away and Pick");
                                                                  END;
                                                                  "Bin Code" := '';
                                                                  MessageIfRcptLinesExist(FIELDCAPTION("Zone Code"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Zone Code;
                                                              NOR=Sonekode;
                                                              SVE=Zonkod] }
    { 9   ;   ;Bin Code            ;Code20        ;TableRelation=IF (Zone Code=FILTER('')) Bin.Code WHERE (Location Code=FIELD(Location Code))
                                                                 ELSE IF (Zone Code=FILTER(<>'')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                  Zone Code=FIELD(Zone Code));
                                                   OnValidate=VAR
                                                                Bin@1001 : Record 7354;
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                IF (xRec."Bin Code" <> "Bin Code") OR ("Zone Code" = '') THEN BEGIN
                                                                  IF "Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    WhseIntegrationMgt.CheckBinTypeCode(DATABASE::"Warehouse Receipt Header",
                                                                      FIELDCAPTION("Bin Code"),
                                                                      "Location Code",
                                                                      "Bin Code",0);
                                                                    IF Location."Directed Put-away and Pick" THEN BEGIN
                                                                      Bin.GET("Location Code","Bin Code");
                                                                      "Zone Code" := Bin."Zone Code";
                                                                    END;
                                                                  END;
                                                                  MessageIfRcptLinesExist(FIELDCAPTION("Bin Code"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Bin Code;
                                                              NOR=Hyllekode;
                                                              SVE=Lagerplatskod] }
    { 10  ;   ;Document Status     ;Option        ;CaptionML=[ENU=Document Status;
                                                              NOR=Dokumentstatus;
                                                              SVE=Dokumentstatus];
                                                   OptionCaptionML=[ENU=" ,Partially Received,Completely Received";
                                                                    NOR=" ,Delvis mottatt,Fullstendig mottatt"];
                                                   OptionString=[ ,Partially Received,Completely Received];
                                                   Editable=No }
    { 11  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Warehouse Comment Line" WHERE (Table Name=CONST(Whse. Receipt),
                                                                                                     Type=CONST(" "),
                                                                                                     No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              NOR=Merknad;
                                                              SVE=Kommentar];
                                                   Editable=No }
    { 12  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              NOR=Bokf›ringsdato;
                                                              SVE=Bokf”ringsdatum] }
    { 13  ;   ;Vendor Shipment No. ;Code35        ;CaptionML=[ENU=Vendor Shipment No.;
                                                              NOR=Leverand›rs f›lgeseddelnr.;
                                                              SVE=Leverant”rens utleveransnr] }
    { 16  ;   ;Cross-Dock Zone Code;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code),
                                                                                  Cross-Dock Bin Zone=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                IF "Cross-Dock Zone Code" <> xRec."Cross-Dock Zone Code" THEN BEGIN
                                                                  IF "Cross-Dock Zone Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Directed Put-away and Pick");
                                                                  END;
                                                                  "Cross-Dock Bin Code" := '';
                                                                  MessageIfRcptLinesExist(FIELDCAPTION("Cross-Dock Zone Code"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Cross-Dock Zone Code;
                                                              NOR=Kryssoverf›ringssone - kode] }
    { 17  ;   ;Cross-Dock Bin Code ;Code20        ;TableRelation=IF (Cross-Dock Zone Code=FILTER('')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                      Cross-Dock Bin=CONST(Yes))
                                                                                                                      ELSE IF (Cross-Dock Zone Code=FILTER(<>'')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                  Zone Code=FIELD(Cross-Dock Zone Code),
                                                                                                                                                                                  Cross-Dock Bin=CONST(Yes));
                                                   OnValidate=VAR
                                                                Bin@1001 : Record 7354;
                                                              BEGIN
                                                                IF (xRec."Cross-Dock Bin Code" <> "Cross-Dock Bin Code") OR ("Cross-Dock Zone Code" = '') THEN BEGIN
                                                                  IF "Cross-Dock Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    IF "Cross-Dock Bin Code" = Location."Adjustment Bin Code" THEN
                                                                      FIELDERROR(
                                                                        "Cross-Dock Bin Code",
                                                                        STRSUBSTNO(
                                                                          Text005,
                                                                          Location.FIELDCAPTION("Adjustment Bin Code"),
                                                                          Location.TABLECAPTION));

                                                                    Bin.GET("Location Code","Cross-Dock Bin Code");
                                                                    Bin.TESTFIELD("Cross-Dock Bin",TRUE);
                                                                    "Cross-Dock Zone Code" := Bin."Zone Code";
                                                                  END;
                                                                  MessageIfRcptLinesExist(FIELDCAPTION("Cross-Dock Bin Code"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Cross-Dock Bin Code;
                                                              NOR=Hyllekode for kryssoverf›ring;
                                                              SVE=Direktutlevns lagerplatskod] }
    { 50  ;   ;Create Posted Header;Boolean       ;CaptionML=[ENU=Create Posted Header;
                                                              NOR=Opprett bokf›rt hode] }
    { 51  ;   ;Receiving No.       ;Code20        ;CaptionML=[ENU=Receiving No.;
                                                              NOR=Mottaksnr.;
                                                              SVE=Inleveransnr] }
    { 62  ;   ;Last Receiving No.  ;Code20        ;TableRelation="Posted Whse. Receipt Header";
                                                   CaptionML=[ENU=Last Receiving No.;
                                                              NOR=Siste mottaksnr.;
                                                              SVE=Senaste inleveransnr] }
    { 63  ;   ;Receiving No. Series;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Receiving No. Series" <> '' THEN BEGIN
                                                                  WhseSetup.GET;
                                                                  WhseSetup.TESTFIELD("Posted Whse. Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(WhseSetup."Posted Whse. Receipt Nos.","Receiving No. Series");
                                                                END;
                                                                TESTFIELD("Receiving No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH WhseRcptHeader DO BEGIN
                                                                WhseRcptHeader := Rec;
                                                                WhseSetup.GET;
                                                                WhseSetup.TESTFIELD("Posted Whse. Receipt Nos.");
                                                                IF NoSeriesMgt.LookupSeries(WhseSetup."Posted Whse. Receipt Nos.","Receiving No. Series") THEN
                                                                  VALIDATE("Receiving No. Series");
                                                                Rec := WhseRcptHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Receiving No. Series;
                                                              NOR=Mottaksnr.serie;
                                                              SVE=Inleverans nr-serie] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Location Code                            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Location@1009 : Record 14;
      WhseRcptHeader@1002 : Record 7316;
      WhseSetup@1001 : Record 5769;
      WhseCommentLine@1011 : Record 5770;
      NoSeriesMgt@1000 : Codeunit 396;
      WmsManagement@1004 : Codeunit 7302;
      Text000@1007 : TextConst 'ENU=You cannot rename a %1.;NOR=Du kan ikke gi nytt navn til en %1.;SVE=Du kan inte byta namn p† %1.';
      Text001@1006 : TextConst 'ENU=You cannot change the %1, because the document has one or more lines.;NOR=Du kan ikke endre %1, fordi dokumentet har ‚n eller flere linjer.';
      Text002@1005 : TextConst 'ENU=You must first set up user %1 as a warehouse employee.;NOR=Du m† f›rst definere bruker %1 som lageransatt.;SVE=Du m†st f”rst registrera anv„ndare %1 som dist.lager personal.';
      Text003@1008 : TextConst 'ENU=You are not allowed to use location code %1.;NOR=Du kan ikke bruke lokasjonskoden %1.';
      Text005@1014 : TextConst 'ENU=must not be the %1 of the %2;NOR=kan ikke v‘re %1 til %2en';
      Text006@1013 : TextConst 'ENU=You have changed %1 on the %2, but it has not been changed on the existing Warehouse Receipt Lines.\;NOR=Du har endret %1 i %2, men det er ikke endret i de eksisterende lagermottakslinjene.\';
      Text007@1012 : TextConst 'ENU=You must update the existing Warehouse Receipt Lines manually.;NOR=Du m† oppdatere de eksisterende lagermottakslinjene manuelt.';
      HideValidationDialog@1015 : Boolean;
      Text008@1010 : TextConst 'ENU=The Whse. Receipt is not completely received.\Do you really want to delete the Whse. Receipt?;NOR=Lagermottaket er ikke fullstendig mottatt.\Er du sikker p† at du vil slette lagermottaket?';
      Text009@1016 : TextConst 'ENU=Cancelled.;NOR=Avbrutt.;SVE=Avbryten';

    [External]
    PROCEDURE AssistEdit@8(OldWhseRcptHeader@1000 : Record 7316) : Boolean;
    BEGIN
      WhseSetup.GET;
      WITH WhseRcptHeader DO BEGIN
        WhseRcptHeader := Rec;
        WhseSetup.TESTFIELD("Whse. Receipt Nos.");
        IF NoSeriesMgt.SelectSeries(
             WhseSetup."Whse. Receipt Nos.",OldWhseRcptHeader."No. Series","No. Series")
        THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := WhseRcptHeader;
          EXIT(TRUE);
        END;
      END;

      OnAfterAssistEdit(OldWhseRcptHeader);
    END;

    [External]
    PROCEDURE SortWhseDoc@3();
    VAR
      WhseRcptLine@1001 : Record 7317;
      SequenceNo@1000 : Integer;
    BEGIN
      WhseRcptLine.SETRANGE("No.","No.");
      GetLocation("Location Code");
      CASE "Sorting Method" OF
        "Sorting Method"::Item:
          WhseRcptLine.SETCURRENTKEY("No.","Item No.");
        "Sorting Method"::Document:
          WhseRcptLine.SETCURRENTKEY("No.","Source Document","Source No.");
        "Sorting Method"::"Shelf or Bin":
          BEGIN
            IF Location."Bin Mandatory" THEN
              WhseRcptLine.SETCURRENTKEY("No.","Bin Code")
            ELSE
              WhseRcptLine.SETCURRENTKEY("No.","Shelf No.");
          END;
        "Sorting Method"::"Due Date":
          WhseRcptLine.SETCURRENTKEY("No.","Due Date");
      END;

      IF WhseRcptLine.FIND('-') THEN BEGIN
        SequenceNo := 10000;
        REPEAT
          WhseRcptLine."Sorting Sequence No." := SequenceNo;
          WhseRcptLine.MODIFY;
          SequenceNo := SequenceNo + 10000;
        UNTIL WhseRcptLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE MessageIfRcptLinesExist@7(ChangedFieldName@1000 : Text[80]);
    VAR
      WhseRcptLine@1001 : Record 7317;
    BEGIN
      WhseRcptLine.SETRANGE("No.","No.");
      IF NOT WhseRcptLine.ISEMPTY THEN
        IF NOT HideValidationDialog THEN
          MESSAGE(
            STRSUBSTNO(
              Text006,ChangedFieldName,TABLECAPTION) + Text007);
    END;

    [External]
    PROCEDURE DeleteRelatedLines@11(UseTableTrigger@1001 : Boolean);
    VAR
      CrossDockOpp@1002 : Record 5768;
      WhseRcptLine@1003 : Record 7317;
      Confirmed@1000 : Boolean;
    BEGIN
      WhseRcptLine.SETRANGE("No.","No.");
      IF UseTableTrigger THEN BEGIN
        IF WhseRcptLine.FIND('-') THEN BEGIN
          REPEAT
            OnBeforeDeleteWhseRcptRelatedLines(WhseRcptLine);
            IF (WhseRcptLine.Quantity <> WhseRcptLine."Qty. Outstanding") AND
               (WhseRcptLine."Qty. Outstanding" <> 0)
            THEN
              IF NOT CONFIRM(Text008,FALSE) THEN
                ERROR(Text009)
              ELSE
                Confirmed := TRUE;
          UNTIL (WhseRcptLine.NEXT = 0) OR Confirmed;
          WhseRcptLine.DELETEALL;
        END;
      END ELSE
        WhseRcptLine.DELETEALL(UseTableTrigger);

      CrossDockOpp.SETRANGE("Source Template Name",'');
      CrossDockOpp.SETRANGE("Source Name/No.","No.");
      CrossDockOpp.DELETEALL;

      WhseCommentLine.SETRANGE("Table Name",WhseCommentLine."Table Name"::"Whse. Receipt");
      WhseCommentLine.SETRANGE(Type,WhseCommentLine.Type::" ");
      WhseCommentLine.SETRANGE("No.","No.");
      WhseCommentLine.DELETEALL;
    END;

    [External]
    PROCEDURE GetHeaderStatus@15(LineNo@1003 : Integer) : Integer;
    VAR
      WhseReceiptLine2@1001 : Record 7317;
      OrderStatus@1002 : ' ,Partially Received,Completely Received';
    BEGIN
      WhseReceiptLine2.SETRANGE("No.","No.");
      WITH WhseReceiptLine2 DO BEGIN
        IF LineNo <> 0 THEN
          SETFILTER("Line No.",'<>%1',LineNo);
        IF FIND('-') THEN
          REPEAT
            CASE OrderStatus OF
              OrderStatus::" ":
                OrderStatus := Status;
              OrderStatus::"Completely Received":
                IF Status = Status::"Partially Received" THEN
                  OrderStatus := OrderStatus::"Partially Received";
            END;
          UNTIL NEXT = 0;
      END;
      EXIT(OrderStatus);
    END;

    [External]
    PROCEDURE LookupWhseRcptHeader@5(VAR WhseRcptHeader@1001 : Record 7316);
    BEGIN
      COMMIT;
      IF USERID <> '' THEN BEGIN
        WhseRcptHeader.FILTERGROUP := 2;
        WhseRcptHeader.SETRANGE("Location Code");
      END;
      IF PAGE.RUNMODAL(0,WhseRcptHeader) = ACTION::LookupOK THEN;
      IF USERID <> '' THEN BEGIN
        WhseRcptHeader.FILTERGROUP := 2;
        WhseRcptHeader.SETRANGE("Location Code",WhseRcptHeader."Location Code");
        WhseRcptHeader.FILTERGROUP := 0;
      END;
    END;

    [External]
    PROCEDURE LookupLocation@4(VAR WhseRcptHeader@1001 : Record 7316);
    VAR
      Location@1000 : Record 14;
    BEGIN
      COMMIT;
      Location.FILTERGROUP := 2;
      Location.SETRANGE(Code);
      IF PAGE.RUNMODAL(PAGE::"Locations with Warehouse List",Location) = ACTION::LookupOK THEN
        WhseRcptHeader.VALIDATE("Location Code",Location.Code);
      Location.FILTERGROUP := 0;
    END;

    LOCAL PROCEDURE GetLocation@10(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        Location.GetLocationSetup(LocationCode,Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    [External]
    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [External]
    PROCEDURE FindFirstAllowedRec@1(Which@1000 : Text[1024]) : Boolean;
    VAR
      WhseRcptHeader@1001 : Record 7316;
      WMSManagement@1002 : Codeunit 7302;
    BEGIN
      IF FIND(Which) THEN BEGIN
        WhseRcptHeader := Rec;
        WHILE TRUE DO BEGIN
          IF WMSManagement.LocationIsAllowedToView("Location Code") THEN
            EXIT(TRUE);

          IF NEXT(1) = 0 THEN BEGIN
            Rec := WhseRcptHeader;
            IF FIND(Which) THEN
              WHILE TRUE DO BEGIN
                IF WMSManagement.LocationIsAllowedToView("Location Code") THEN
                  EXIT(TRUE);

                IF NEXT(-1) = 0 THEN
                  EXIT(FALSE);
              END;
          END;
        END;
      END;
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE FindNextAllowedRec@6(Steps@1000 : Integer) : Integer;
    VAR
      WhseRcptHeader@1002 : Record 7316;
      WMSManagement@1001 : Codeunit 7302;
      RealSteps@1003 : Integer;
      NextSteps@1004 : Integer;
    BEGIN
      RealSteps := 0;
      IF Steps <> 0 THEN BEGIN
        WhseRcptHeader := Rec;
        REPEAT
          NextSteps := NEXT(Steps / ABS(Steps));
          IF WMSManagement.LocationIsAllowedToView("Location Code") THEN BEGIN
            RealSteps := RealSteps + NextSteps;
            WhseRcptHeader := Rec;
          END;
        UNTIL (NextSteps = 0) OR (RealSteps = Steps);
        Rec := WhseRcptHeader;
        IF NOT FIND THEN;
      END;
      EXIT(RealSteps);
    END;

    [External]
    PROCEDURE ErrorIfUserIsNotWhseEmployee@12();
    VAR
      WhseEmployee@1000 : Record 7301;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeErrorIfUserIsNotWhseEmployee("Location Code",IsHandled);
      IF IsHandled THEN
        EXIT;

      IF USERID <> '' THEN BEGIN
        WhseEmployee.SETRANGE("User ID",USERID);
        IF WhseEmployee.ISEMPTY THEN
          ERROR(Text002,USERID);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssistEdit@9(VAR WarehouseReceiptHeader@1000 : Record 7316);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDeleteWhseRcptRelatedLines@2(VAR WhseRcptLine@1000 : Record 7317);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeErrorIfUserIsNotWhseEmployee@24(LocationCode@1000 : Code[10];VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

