OBJECT Codeunit 6086371 EM Workflow Response Handling
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW19.00.00.2.60;
  }
  PROPERTIES
  {
    EventSubscriberInstance=Static-Automatic;
    Permissions=TableData 36=rm,
                TableData 38=rm,
                TableData 1511=imd,
                TableData 6086320=rm,
                TableData 6086338=rm,
                TableData 6086339=rm;
    SingleInstance=No;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CreateApprovalRequestTxt@1005 : TextConst 'DEU=Genehmigungsanfrage unter Verwendung von Art Genehmigender %1 und %2 erstellen.;ENU=Create an approval request using approver type %1 and %2.;NLD=Maak een goedkeuringsaanvraag met gebruik van goedkeurdertype %1 en %2.';
      ForceApproveExpenseTxt@1001 : TextConst 'DEU=Erzwungene Genehmigung der Kostenposition.;ENU=Force approval of the document.;NLD=Geforceerde goedkeuring van het document.';
      OpenExpenseTxt@1004 : TextConst 'DEU=Kostenposition wieder îffnen.;ENU=Reopen the expense.;NLD=Heropen de uitgave.';
      ResponseAlreadyExistErr@1000 : TextConst 'DEU=Eine Antwort mit der Beschreibung %1 ist bereits vorhanden.;ENU=A response with description %1 already exists.;NLD=Een antwoord met omschrijving %1 bestaat reeds.;NOR=Et svar med beskrivelsen %1 finnes allerede.;SVE=Ett svar med beskrivning %1ˇfinns redan.';
      ExpStatusToApprovedTxt@1003 : TextConst 'DEU=Kostenpositionsstatus auf Genehmigt einstellen.;ENU=Set the expense status to Approved.;NLD=Zet de status van een uitgave op Goedgekeurd.';
      ExpStatusToPendingApprovalTxt@1002 : TextConst 'DEU=Kostenpositionsstatus auf Genehmigung steht aus einstellen.;ENU=Set expense status to Pending Approval.;NLD=Zet de status van een uitgave op Afwachten goedkeuring.';
      EMWorkflowEventHandling@1007 : Codeunit 6086370;
      WorkflowEventHandling@1006 : Codeunit 1520;
      UnsupportedRecordTypeErr@1009 : TextConst 'DEU=Der Datensatztyp %1 wird von dieser Workflowreaktion nicht unterstÅtzt.;ENU=Record type %1 is not supported by this workflow response.;NLD=Recordtype %1 is niet toegestaan voor dit workflow antwoord.;NOR=Posttypen %1 stõttes ikke av dette arbeidsflytsvaret.;SVE=Posttyp %1 stîds inte i arbetsflîdessvaret.';
      OpenMileageTxt@1020 : TextConst 'DEU=Kilometerleistung erneut îffnen.;ENU=Reopen the mileage.;NLD=Heropen de kilometrage.';
      MilStatusToApprovedTxt@1018 : TextConst 'DEU=Kilometerleistungsstatus auf ≥Genehmigt  einstellen.;ENU=Set the mileage status to Approved.;NLD=Zet kilometragestatus op Goedgekeurd.';
      MilStatusToPendingApprovalTxt@1016 : TextConst 'DEU=Kilometerleistungsstatus auf ≥Genehmigung steht aus  einstellen.;ENU=Set mileage status to Pending Approval.;NLD=Zet kilometragestatus op Wacht op Goedkeuring.';
      OpenSettlementTxt@1011 : TextConst 'DEU=ôffnen Sie den Ausgleich erneut.;ENU=Reopen the settlement.;NLD=Heropen de afrekening.';
      StlStatusToApprovedTxt@1010 : TextConst 'DEU=Setzen Sie den Status des Ausgleichs auf Genehmigt.;ENU=Set the settlement status to Approved.;NLD=Zet de status afrekening op Goedgekeurd.';
      StlStatusToPendingApprovalTxt@1008 : TextConst 'DEU=Erzwungene Abweisung der Kostenposition.;ENU=Set settlement status to Pending Approval.;NLD=Zet status afrekening op Afwachten goedkeuring.';

    [EventSubscriber(Codeunit,1520,OnAddWorkflowEventsToLibrary,"",Skip)]
    PROCEDURE OnCreateResponsesLibrary@25();
    BEGIN
      AddResponseToLibrary(CreateApprovalRequestEMCode,0,CreateApprovalRequestTxt,'GROUP 0');
      AddResponseToLibrary(ForceApproveApprovalRequestEMCode,0,ForceApproveExpenseTxt,'GROUP 0');

      AddResponseToLibrary(OpenExpenseCode,0,OpenExpenseTxt,'GROUP 0');
      AddResponseToLibrary(SetExpenseStatusToPendingApprovalCode,0,ExpStatusToPendingApprovalTxt,'GROUP 0');
      AddResponseToLibrary(SetExpenseStatusToApprovedCode,0,ExpStatusToApprovedTxt,'GROUP 0');

      AddResponseToLibrary(OpenMileageCode,0,OpenMileageTxt,'GROUP 0');
      AddResponseToLibrary(SetMileageStatusToPendingApprovalCode,0,MilStatusToPendingApprovalTxt,'GROUP 0');
      AddResponseToLibrary(SetMileageStatusToApprovedCode,0,MilStatusToApprovedTxt,'GROUP 0');

      AddResponseToLibrary(OpenSettlementCode,0,OpenSettlementTxt,'GROUP 0');
      AddResponseToLibrary(SetSettlementStatusToPendingApprovalCode,0,StlStatusToPendingApprovalTxt,'GROUP 0');
      AddResponseToLibrary(SetSettlementStatusToApprovedCode,0,StlStatusToApprovedTxt,'GROUP 0');
    END;

    LOCAL PROCEDURE AddResponsePredecessors@33(ResponseFunctionName@1002 : Code[128]);
    BEGIN
      CASE ResponseFunctionName OF
        CreateApprovalRequestEMCode:
          BEGIN
            AddResponsePredecessor(CreateApprovalRequestEMCode,EMWorkflowEventHandling.RunWorkflowOnSendExpenseForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestEMCode,EMWorkflowEventHandling.RunWorkflowOnSendMileageForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestEMCode,EMWorkflowEventHandling.RunWorkflowOnSendSettlementForApprovalCode);
          END;

        ForceApproveApprovalRequestEMCode:
          AddResponsePredecessor(ForceApproveApprovalRequestEMCode,EMWorkflowEventHandling.RunWorkflowOnExpenseForceApproveApprovalRequestCode);

        OpenExpenseCode:
          AddResponsePredecessor(OpenExpenseCode,EMWorkflowEventHandling.RunWorkflowOnCancelExpenseApprovalRequestCode);
        SetExpenseStatusToPendingApprovalCode:
          AddResponsePredecessor(SetExpenseStatusToPendingApprovalCode,EMWorkflowEventHandling.RunWorkflowOnSendExpenseForApprovalCode);
        SetExpenseStatusToApprovedCode:
          AddResponsePredecessor(SetExpenseStatusToApprovedCode,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode);

        OpenMileageCode:
          AddResponsePredecessor(OpenMileageCode,EMWorkflowEventHandling.RunWorkflowOnCancelMileageApprovalRequestCode);
        SetMileageStatusToPendingApprovalCode:
          AddResponsePredecessor(SetMileageStatusToPendingApprovalCode,EMWorkflowEventHandling.RunWorkflowOnSendMileageForApprovalCode);
        SetMileageStatusToApprovedCode:
          AddResponsePredecessor(SetMileageStatusToApprovedCode,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode);

        OpenSettlementCode:
          AddResponsePredecessor(OpenSettlementCode,EMWorkflowEventHandling.RunWorkflowOnCancelSettlementApprovalRequestCode);
        SetSettlementStatusToPendingApprovalCode:
          AddResponsePredecessor(SetSettlementStatusToPendingApprovalCode,EMWorkflowEventHandling.RunWorkflowOnSendSettlementForApprovalCode);
        SetSettlementStatusToApprovedCode:
          AddResponsePredecessor(SetSettlementStatusToApprovedCode,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode);
      END;
    END;

    [EventSubscriber(Codeunit,1521,OnAddWorkflowResponsePredecessorsToLibrary,"",Skip)]
    LOCAL PROCEDURE OnAddResponsePredecessors@21(ResponseFunctionName@1000 : Code[128]);
    VAR
      DCWorkflowEventHandling@1002 : Codeunit 6085785;
      WorkflowResponseHandling@1001 : Codeunit 1521;
    BEGIN
      // In order to enable standard responses to succes EM events
      CASE ResponseFunctionName OF
        WorkflowResponseHandling.SendApprovalRequestForApprovalCode:
          BEGIN
            AddResponsePredecessor(WorkflowResponseHandling.SendApprovalRequestForApprovalCode,EMWorkflowEventHandling.RunWorkflowOnSendExpenseForApprovalCode);
            AddResponsePredecessor(WorkflowResponseHandling.SendApprovalRequestForApprovalCode,EMWorkflowEventHandling.RunWorkflowOnSendMileageForApprovalCode);
            AddResponsePredecessor(WorkflowResponseHandling.SendApprovalRequestForApprovalCode,EMWorkflowEventHandling.RunWorkflowOnSendSettlementForApprovalCode);
          END;
      END;
    END;

    [EventSubscriber(Codeunit,1521,OnExecuteWorkflowResponse,"",Skip)]
    PROCEDURE ExecuteResponse@2(VAR ResponseExecuted@1000 : Boolean;Variant@1001 : Variant;xVariant@1004 : Variant;ResponseWorkflowStepInstance@1005 : Record 1504);
    VAR
      WorkflowResponse@1002 : Record 1521;
      WorkflowChangeRecMgt@1007 : Codeunit 1531;
      Handled@1003 : Boolean;
    BEGIN
      Handled := TRUE;

      OnBeforeExecuteResponseStepInstance(ResponseWorkflowStepInstance);

      IF WorkflowResponse.GET(ResponseWorkflowStepInstance."Function Name") THEN
        CASE WorkflowResponse."Function Name" OF
          CreateApprovalRequestEMCode:
            CreateApprovalRequestEM(Variant,ResponseWorkflowStepInstance);
          ForceApproveApprovalRequestEMCode:
            ForceApproveApprovalRequestEM(Variant,ResponseWorkflowStepInstance);

          OpenExpenseCode,SetExpenseStatusToRejectedCode:
            OpenExpense(Variant,ResponseWorkflowStepInstance);
          SetExpenseStatusToApprovedCode:
            SetExpenseStatusToApproved(Variant,ResponseWorkflowStepInstance);
          SetExpenseStatusToPendingApprovalCode:
            SetExpenseStatusToPendingApproval(Variant,ResponseWorkflowStepInstance);

          OpenMileageCode,SetMileageStatusToRejectedCode:
            OpenMileage(Variant,ResponseWorkflowStepInstance);
          SetMileageStatusToApprovedCode:
            SetMileageStatusToApproved(Variant,ResponseWorkflowStepInstance);
          SetMileageStatusToPendingApprovalCode:
            SetMileageStatusToPendingApproval(Variant,ResponseWorkflowStepInstance);

          OpenSettlementCode:
            OpenSettlement(Variant,ResponseWorkflowStepInstance);
          SetSettlementStatusToApprovedCode:
            SetSettlementStatusToApproved(Variant,ResponseWorkflowStepInstance);
          SetSettlementStatusToPendingApprovalCode:
            SetSettlementStatusToPendingApproval(Variant,ResponseWorkflowStepInstance);
          ELSE
            Handled := FALSE;
        END;

      IF Handled THEN
        ResponseExecuted := TRUE;
    END;

    PROCEDURE CreateApprovalRequestEMCode@9() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateApprovalRequestsEM'));
    END;

    LOCAL PROCEDURE CreateApprovalRequestEM@8(VAR Variant@1005 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      ApprovalEntry@1004 : Record 454;
      EMApprovalMgmt@1002 : Codeunit 6086312;
      TableID@1003 : Integer;
      DocumentNo@1001 : Code[20];
    BEGIN
      GetTableIDAndDocFromVariant(Variant,TableID,DocumentNo);
      ApprovalEntry."Table ID" := TableID;
      ApprovalEntry."Document No." := FORMAT(DocumentNo);
      EMApprovalMgmt.RUN(ApprovalEntry);
    END;

    PROCEDURE ForceApproveApprovalRequestEMCode@6() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ForceApproveApprovalRequestEM'));
    END;

    LOCAL PROCEDURE ForceApproveApprovalRequestEM@5(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      Expense@1002 : Record 6086320;
      EMApprovalMgmt@1003 : Codeunit 6086312;
      TableID@1005 : Integer;
      DocumentNo@1004 : Code[20];
    BEGIN
      GetTableIDAndDocFromVariant(Variant,TableID,DocumentNo);
      EMApprovalMgmt.ForceApproval(TableID,DocumentNo,FALSE);
    END;

    PROCEDURE SetExpenseStatusToApprovedCode@52() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SetExpenseStatusToApproved'));
    END;

    LOCAL PROCEDURE SetExpenseStatusToApproved@51(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      Expense@1002 : Record 6086320;
      EMApprovalMgmt@1003 : Codeunit 6086312;
    BEGIN
      GetExpenseFromVariant(Variant,Expense);
      Expense.Status := Expense.Status::Released;
      Expense.MODIFY;
    END;

    PROCEDURE SetExpenseStatusToPendingApprovalCode@1() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SetExpenseStatusToPendingApproval'));
    END;

    LOCAL PROCEDURE SetExpenseStatusToPendingApproval@3(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      Expense@1002 : Record 6086320;
      EMApprovalMgmt@1003 : Codeunit 6086312;
    BEGIN
      GetExpenseFromVariant(Variant,Expense);
      Expense.Status := Expense.Status::"Pending Approval";
      Expense.MODIFY;
    END;

    PROCEDURE OpenExpenseCode@38() : Code[128];
    BEGIN
      EXIT(UPPERCASE('OpenExpense'));
    END;

    LOCAL PROCEDURE OpenExpense@37(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      Expense@1002 : Record 6086320;
      EMApprovalMgmt@1003 : Codeunit 6086312;
    BEGIN
      GetExpenseFromVariant(Variant,Expense);
      Expense.Status := Expense.Status::Open;
      Expense.MODIFY;
    END;

    PROCEDURE SetMileageStatusToApprovedCode@17() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SetMileageStatusToApproved'));
    END;

    LOCAL PROCEDURE SetMileageStatusToApproved@16(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      Mileage@1002 : Record 6086338;
      EMApprovalMgmt@1003 : Codeunit 6086312;
    BEGIN
      GetMileageFromVariant(Variant,Mileage);
      Mileage.Status := Mileage.Status::Released;
      Mileage.MODIFY;
    END;

    PROCEDURE SetMileageStatusToPendingApprovalCode@15() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SetMileageStatusToPendingApproval'));
    END;

    LOCAL PROCEDURE SetMileageStatusToPendingApproval@14(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      Mileage@1002 : Record 6086338;
      EMApprovalMgmt@1003 : Codeunit 6086312;
    BEGIN
      GetMileageFromVariant(Variant,Mileage);
      Mileage.Status := Mileage.Status::"Pending Approval";
      Mileage.MODIFY;
    END;

    PROCEDURE OpenMileageCode@11() : Code[128];
    BEGIN
      EXIT(UPPERCASE('OpenMileage'));
    END;

    LOCAL PROCEDURE OpenMileage@10(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      Mileage@1002 : Record 6086338;
      EMApprovalMgmt@1003 : Codeunit 6086312;
    BEGIN
      GetMileageFromVariant(Variant,Mileage);
      Mileage.Status := Mileage.Status::Open;
      Mileage.MODIFY;
    END;

    PROCEDURE SetSettlementStatusToApprovedCode@27() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SetSettlementStatusToApproved'));
    END;

    LOCAL PROCEDURE SetSettlementStatusToApproved@23(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      ExpHeader@1002 : Record 6086339;
      EMApprovalMgmt@1003 : Codeunit 6086312;
    BEGIN
      GetExpHeaderFromVariant(Variant,ExpHeader);
      EMApprovalMgmt.SetApprovedStatus(DATABASE::"Expense Header",ExpHeader."No.");
    END;

    PROCEDURE SetSettlementStatusToPendingApprovalCode@13() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SetSettlementStatusToPendingApproval'));
    END;

    LOCAL PROCEDURE SetSettlementStatusToPendingApproval@12(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      ExpHeader@1002 : Record 6086339;
      EMApprovalMgmt@1003 : Codeunit 6086312;
    BEGIN
      GetExpHeaderFromVariant(Variant,ExpHeader);
      EMApprovalMgmt.SetPendingStatus(DATABASE::"Expense Header",ExpHeader."No.");
    END;

    PROCEDURE OpenSettlementCode@7() : Code[128];
    BEGIN
      EXIT(UPPERCASE('OpenSettlement'));
    END;

    LOCAL PROCEDURE OpenSettlement@4(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      ExpHeader@1004 : Record 6086339;
      EMApprovalMgmt@1003 : Codeunit 6086312;
    BEGIN
      GetExpHeaderFromVariant(Variant,ExpHeader);
      ExpHeader.Status := ExpHeader.Status::Open;
      ExpHeader.MODIFY;
    END;

    PROCEDURE SetExpenseStatusToRejectedCode@1160040004() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SetExpenseStatusToRejected'));
    END;

    PROCEDURE SetMileageStatusToRejectedCode@30() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SetMileageStatusToRejected'));
    END;

    LOCAL PROCEDURE "--"@22();
    BEGIN
    END;

    PROCEDURE AddResponseToLibrary@26(FunctionName@1002 : Code[128];TableID@1001 : Integer;Description@1000 : Text[250];ResponseOptionGroup@1004 : Code[20]);
    VAR
      WorkflowResponse@1003 : Record 1521;
    BEGIN
      IF WorkflowResponse.GET(FunctionName) THEN
        EXIT;

      WorkflowResponse.SETRANGE(Description,Description);
      IF WorkflowResponse.FINDFIRST THEN
        ERROR(ResponseAlreadyExistErr,Description);

      WorkflowResponse.INIT;
      WorkflowResponse."Function Name" := FunctionName;
      WorkflowResponse."Table ID" := TableID;
      WorkflowResponse.Description := Description;
      WorkflowResponse."Response Option Group" := ResponseOptionGroup;
      WorkflowResponse.INSERT;

      AddResponsePredecessors(WorkflowResponse."Function Name");
    END;

    PROCEDURE AddResponsePredecessor@61(FunctionName@1000 : Code[128];PredecessorFunctionName@1001 : Code[128]);
    VAR
      WFEventResponseCombination@1002 : Record 1509;
    BEGIN
      WFEventResponseCombination.INIT;
      WFEventResponseCombination.Type := WFEventResponseCombination.Type::Response;
      WFEventResponseCombination."Function Name" := FunctionName;
      WFEventResponseCombination."Predecessor Type" := WFEventResponseCombination."Predecessor Type"::"Event";
      WFEventResponseCombination."Predecessor Function Name" := PredecessorFunctionName;
      IF WFEventResponseCombination.INSERT THEN;
    END;

    [Integration]
    PROCEDURE OnBeforeExecuteResponseStepInstance@19(VAR NewWorkflowStepInstance@1000 : Record 1504);
    BEGIN
    END;

    LOCAL PROCEDURE GetExpenseFromVariant@20(VAR Variant@1001 : Variant;VAR Expense@1000 : Record 6086320);
    VAR
      ApprovalEntry@1003 : Record 454;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            Expense.GET(ApprovalEntry."Record ID to Approve");
          END;
        DATABASE::Expense:
          BEGIN
            Expense.SETPOSITION(RecRef.GETPOSITION);
            Expense.FIND;
          END;
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    LOCAL PROCEDURE GetMileageFromVariant@18(VAR Variant@1001 : Variant;VAR Mileage@1000 : Record 6086338);
    VAR
      ApprovalEntry@1003 : Record 454;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            Mileage.GET(ApprovalEntry."Record ID to Approve");
          END;
        DATABASE::Mileage:
          BEGIN
            Mileage.SETPOSITION(RecRef.GETPOSITION);
            Mileage.FIND;
          END;
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    LOCAL PROCEDURE GetExpHeaderFromVariant@28(VAR Variant@1001 : Variant;VAR ExpHeader@1000 : Record 6086339);
    VAR
      ApprovalEntry@1003 : Record 454;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            ExpHeader.GET(ApprovalEntry."Record ID to Approve");
          END;
        DATABASE::"Expense Header":
          BEGIN
            ExpHeader.SETPOSITION(RecRef.GETPOSITION);
            ExpHeader.FIND;
          END;
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    LOCAL PROCEDURE GetTableIDAndDocFromVariant@24(VAR Variant@1001 : Variant;VAR TableID@1005 : Integer;VAR DocumentNo@1006 : Code[20]);
    VAR
      ApprovalEntry@1003 : Record 454;
      Expense@1004 : Record 6086320;
      Mileage@1000 : Record 6086338;
      ExpHeader@1008 : Record 6086339;
      RecRef@1002 : RecordRef;
      EMAppMgt@1007 : Codeunit 6086312;
    BEGIN
      RecRef.GETTABLE(Variant);
      TableID := RecRef.NUMBER;

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            DocumentNo := ApprovalEntry."Document No.";
          END;
        DATABASE::Expense:
          BEGIN
            Expense.SETPOSITION(RecRef.GETPOSITION);
            Expense.FIND;
            DocumentNo := FORMAT(Expense."Entry No.");
          END;
        DATABASE::Mileage:
          BEGIN
            Mileage.SETPOSITION(RecRef.GETPOSITION);
            Mileage.FIND;
            DocumentNo := FORMAT(Mileage."Entry No.");
          END;
        DATABASE::"Expense Header":
          BEGIN
            ExpHeader.SETPOSITION(RecRef.GETPOSITION);
            ExpHeader.FIND;
            DocumentNo := ExpHeader."No.";
          END;
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    BEGIN
    END.
  }
}

