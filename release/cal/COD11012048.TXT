OBJECT Codeunit 11012048 Purch.-Get Allocation
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PurchAllocation@1210190000 : Record 11020200;
      PurchAllocationLine@1210190001 : Record 11020201;
      LineNo@1210190004 : Integer;
      TotAmountToAllocate@1210190005 : Decimal;
      TotAmountAllocated@1100525001 : Decimal;

    [External]
    PROCEDURE PurchaseHeader@1210190000(Rec@1210190000 : Record 38);
    VAR
      OrigPurchLine@1100528500 : Record 39;
      PurchHeader@1100528502 : Record 38;
      PurchLine@1100528501 : Record 39;
    BEGIN
      PurchHeader := Rec;
      PurchHeader.TESTFIELD("No.");

      IF NOT GetSelectedAllocationCode(PurchHeader."Buy-from Vendor No.") THEN
        EXIT;

      CLEAR(OrigPurchLine);
      OrigPurchLine."Document Type" := PurchHeader."Document Type";
      OrigPurchLine."Document No." := PurchHeader."No.";

      WITH PurchLine DO BEGIN
        SETRANGE("Document Type", PurchHeader."Document Type");
        SETRANGE("Document No.", PurchHeader."No.");
        IF FINDLAST THEN
          LineNo := "Line No." + 10000
        ELSE
          LineNo := 10000;

        PurchAllocationLine.RESET;
        PurchAllocationLine.SETRANGE("Purch. Allocation Code", PurchAllocation.Code);
        PurchAllocationLine.SETFILTER("Allocation %", '0');

        //Fixed Amount first
        IF PurchAllocationLine.FINDSET THEN
          REPEAT
            InsertPurchLine(OrigPurchLine,PurchHeader,PurchLine);
          UNTIL PurchAllocationLine.NEXT = 0;

        //Allocation %
        PurchAllocationLine.SETFILTER("Allocation %", '<>0');
        IF PurchAllocationLine.FINDSET THEN BEGIN
          CALCFIELDS("Balance Incl. VAT");
          TotAmountToAllocate := PurchHeader."Amount incl. VAT" - "Balance Incl. VAT";
          REPEAT
            InsertPurchLine(OrigPurchLine,PurchHeader,PurchLine);
          UNTIL PurchAllocationLine.NEXT = 0
        END;
      END;
    END;

    [External]
    PROCEDURE PurchaseLine@1100527007(OrigPurchLine@1210190000 : Record 39);
    VAR
      PurchHeader@1100528502 : Record 38;
      PurchLine@1100528500 : Record 39;
    BEGIN
      OrigPurchLine.TESTFIELD("Line No.");
      PurchHeader.GET(OrigPurchLine."Document Type", OrigPurchLine."Document No.");

      IF NOT GetSelectedAllocationCode(PurchHeader."Buy-from Vendor No.") THEN
        EXIT;

      TotAmountAllocated := 0;

      WITH PurchLine DO BEGIN
        SETRANGE("Document Type", PurchHeader."Document Type");
        SETRANGE("Document No.", PurchHeader."No.");
        IF FINDLAST THEN
          LineNo := "Line No." + 10000
        ELSE
          LineNo := 10000;

        PurchAllocationLine.RESET;
        PurchAllocationLine.SETRANGE("Purch. Allocation Code", PurchAllocation.Code);
        PurchAllocationLine.SETFILTER("Allocation %", '0');

        //Fixed Amount first
        IF PurchAllocationLine.FINDSET THEN
          REPEAT
            InsertPurchLine(OrigPurchLine,PurchHeader,PurchLine);
          UNTIL PurchAllocationLine.NEXT = 0;

        //Allocation %
        PurchAllocationLine.SETFILTER("Allocation %", '<>0');
        IF PurchAllocationLine.FINDSET THEN BEGIN
          TotAmountToAllocate := OrigPurchLine."Amount Including VAT" - TotAmountAllocated;
          REPEAT
            InsertPurchLine(OrigPurchLine,PurchHeader,PurchLine);
          UNTIL PurchAllocationLine.NEXT = 0
        END;

        OrigPurchLine.DELETE(TRUE);
      END;
    END;

    [External]
    PROCEDURE PurchaseInvoiceApproval@1210190001(PurchInvHeader@1210190000 : Record 122);
    VAR
      OrigPurchApprovalLine@1100528500 : Record 11012032;
      PurchApprovalLine@1100528502 : Record 11012032;
    BEGIN
      PurchInvHeader.TESTFIELD("No.");
      IF PurchInvHeader."DMS Status" > PurchInvHeader."DMS Status"::"Awaiting Line Entry" THEN
        PurchInvHeader.FIELDERROR("DMS Status");

      CLEAR(OrigPurchApprovalLine);
      OrigPurchApprovalLine."Journal Template Name" := PurchInvHeader."Journal Template";
      OrigPurchApprovalLine."Document Type" := OrigPurchApprovalLine."Document Type"::"Purchase Invoice";
      OrigPurchApprovalLine."Document No." := PurchInvHeader."No.";

      IF NOT GetSelectedAllocationCode(PurchInvHeader."Buy-from Vendor No.") THEN
        EXIT;

      WITH PurchApprovalLine DO BEGIN
        SETRANGE("Journal Template Name", PurchInvHeader."Journal Template");
        SETRANGE("Document Type", "Document Type"::"Purchase Invoice");
        SETRANGE("Document No.", PurchInvHeader."No.");
        IF FINDLAST THEN
          LineNo := "Line No." + 10000
        ELSE
          LineNo := 10000;

        PurchAllocationLine.RESET;
        PurchAllocationLine.SETRANGE("Purch. Allocation Code", PurchAllocation.Code);
        PurchAllocationLine.SETFILTER("Allocation %", '0');

        //Fixed Amount first
        IF PurchAllocationLine.FINDSET THEN
          REPEAT
            InsertPurchApprovalLine(OrigPurchApprovalLine,PurchApprovalLine,PurchInvHeader."Amounts only");
          UNTIL PurchAllocationLine.NEXT = 0;

        //Allocation %
        PurchAllocationLine.SETFILTER("Allocation %", '<>0');
        IF PurchAllocationLine.FINDSET THEN BEGIN
          PurchInvHeader.CALCFIELDS("Balance Due");
          CALCFIELDS(Balance);
          TotAmountToAllocate := PurchInvHeader."Balance Due" - Balance;
          REPEAT
            InsertPurchApprovalLine(OrigPurchApprovalLine,PurchApprovalLine,PurchInvHeader."Amounts only");
          UNTIL PurchAllocationLine.NEXT = 0
        END;
      END;
    END;

    [External]
    PROCEDURE PurchaseCrMemoApproval@1210190004(PurchCrMemoHeader@1210190000 : Record 124);
    VAR
      OrigPurchApprovalLine@1100528500 : Record 11012032;
      PurchApprovalLine@1100528502 : Record 11012032;
    BEGIN
      PurchCrMemoHeader.TESTFIELD("No.");
      IF PurchCrMemoHeader."DMS Status" > PurchCrMemoHeader."DMS Status"::"Awaiting Line Entry" THEN
        PurchCrMemoHeader.FIELDERROR("DMS Status");

      CLEAR(OrigPurchApprovalLine);
      OrigPurchApprovalLine."Journal Template Name" := PurchCrMemoHeader."Journal Template";
      OrigPurchApprovalLine."Document Type" := OrigPurchApprovalLine."Document Type"::"Credit Memo";
      OrigPurchApprovalLine."Document No." := PurchCrMemoHeader."No.";

      IF NOT GetSelectedAllocationCode(PurchCrMemoHeader."Buy-from Vendor No.") THEN
        EXIT;

      WITH PurchApprovalLine DO BEGIN
        SETRANGE("Journal Template Name", PurchCrMemoHeader."Journal Template");
        SETRANGE("Document Type", "Document Type"::"Credit Memo");
        SETRANGE("Document No.", PurchCrMemoHeader."No.");
        IF FINDLAST THEN
          LineNo := "Line No." + 10000
        ELSE
          LineNo := 10000;

        PurchAllocationLine.RESET;
        PurchAllocationLine.SETRANGE("Purch. Allocation Code", PurchAllocation.Code);
        PurchAllocationLine.SETFILTER("Allocation %", '0');

        //Fixed Amount first
        IF PurchAllocationLine.FINDSET THEN
          REPEAT
            InsertPurchApprovalLine(OrigPurchApprovalLine,PurchApprovalLine,PurchCrMemoHeader."Amounts only");
          UNTIL PurchAllocationLine.NEXT = 0;

        //Allocation %
        PurchAllocationLine.SETFILTER("Allocation %", '<>0');
        IF PurchAllocationLine.FINDSET THEN BEGIN
          PurchCrMemoHeader.CALCFIELDS("Balance Due");
          CALCFIELDS(Balance);
          TotAmountToAllocate := PurchCrMemoHeader."Balance Due" - Balance;
          REPEAT
            InsertPurchApprovalLine(OrigPurchApprovalLine,PurchApprovalLine,PurchCrMemoHeader."Amounts only");
          UNTIL PurchAllocationLine.NEXT = 0
        END;
      END;
    END;

    [External]
    PROCEDURE PurchaseApprovalLine@1100528501(OrigPurchApprovalLine@1210190000 : Record 11012032);
    VAR
      PurchApprovalLine@1100528505 : Record 11012032;
      PurchInvHeader@1100528503 : Record 122;
      PurchCrMemoHeader@1100528504 : Record 124;
      BuyFromVendorCode@1100528500 : Code[20];
      AmountsOnly@1100528501 : Boolean;
    BEGIN
      OrigPurchApprovalLine.TESTFIELD("Line No.");

      IF OrigPurchApprovalLine ."Document Type" = OrigPurchApprovalLine ."Document Type"::"Purchase Invoice" THEN BEGIN
        PurchInvHeader.GET(OrigPurchApprovalLine ."Document No.");
        IF PurchInvHeader."DMS Status" > PurchInvHeader."DMS Status"::"Awaiting Line Entry" THEN
          PurchInvHeader.FIELDERROR("DMS Status");
        BuyFromVendorCode := PurchInvHeader."Buy-from Vendor No.";
        AmountsOnly := PurchInvHeader."Amounts only";
      END ELSE BEGIN
        PurchCrMemoHeader.GET(OrigPurchApprovalLine ."Document No.");
        IF PurchCrMemoHeader."DMS Status" > PurchCrMemoHeader."DMS Status"::"Awaiting Line Entry" THEN
          PurchCrMemoHeader.FIELDERROR("DMS Status");
        BuyFromVendorCode := PurchCrMemoHeader."Buy-from Vendor No.";
        AmountsOnly := PurchCrMemoHeader."Amounts only";
      END;

      IF NOT GetSelectedAllocationCode(BuyFromVendorCode) THEN
        EXIT;

      TotAmountAllocated := 0;

      WITH PurchApprovalLine DO BEGIN
        SETRANGE("Journal Template Name",OrigPurchApprovalLine."Journal Template Name");
        SETRANGE("Document Type",OrigPurchApprovalLine."Document Type");
        SETRANGE("Document No.",OrigPurchApprovalLine."Document No.");
        IF FINDLAST THEN
          LineNo := "Line No." + 10000
        ELSE
          LineNo := 10000;

        PurchAllocationLine.RESET;
        PurchAllocationLine.SETRANGE("Purch. Allocation Code", PurchAllocation.Code);
        PurchAllocationLine.SETFILTER("Allocation %", '0');

        //Fixed Amount first
        IF PurchAllocationLine.FINDSET THEN
          REPEAT
            InsertPurchApprovalLine(OrigPurchApprovalLine,PurchApprovalLine,AmountsOnly);
          UNTIL PurchAllocationLine.NEXT = 0;

        //Allocation %
        PurchAllocationLine.SETFILTER("Allocation %", '<>0');
        IF PurchAllocationLine.FINDSET THEN BEGIN
          TotAmountToAllocate := OrigPurchApprovalLine.Amount - TotAmountAllocated;
          REPEAT
            InsertPurchApprovalLine(OrigPurchApprovalLine,PurchApprovalLine,AmountsOnly);;
          UNTIL PurchAllocationLine.NEXT = 0
        END;

        OrigPurchApprovalLine.DELETE(TRUE);
      END;
    END;

    [External]
    PROCEDURE GeneralJournalLine@1100525000(OrigGenJnlLine@1210190000 : Record 81);
    VAR
      GenJnlLine@1100528501 : Record 81;
      VendorCode@1100528502 : Code[20];
    BEGIN
      OrigGenJnlLine.TESTFIELD("Line No.");

      IF OrigGenJnlLine."Account Type" = OrigGenJnlLine."Account Type"::Vendor THEN
        VendorCode := OrigGenJnlLine."Account No.";

      IF NOT GetSelectedAllocationCode(VendorCode) THEN
        EXIT;

      TotAmountAllocated := 0;

      WITH GenJnlLine DO BEGIN
        SETRANGE("Journal Template Name", OrigGenJnlLine."Journal Template Name");
        SETRANGE("Journal Batch Name", OrigGenJnlLine."Journal Batch Name");
        IF FINDLAST THEN
          LineNo := "Line No." + 10000
        ELSE
          LineNo := 10000;

        PurchAllocationLine.RESET;
        PurchAllocationLine.SETRANGE("Purch. Allocation Code", PurchAllocation.Code);
        PurchAllocationLine.SETFILTER("Allocation %", '0');

        //Fixed Amount first
        IF PurchAllocationLine.FINDSET THEN
          REPEAT
            InsertGenJnlLine(OrigGenJnlLine);
          UNTIL PurchAllocationLine.NEXT = 0;

        //Allocation %
        PurchAllocationLine.SETFILTER("Allocation %", '<>0');
        IF PurchAllocationLine.FINDSET THEN BEGIN
          TotAmountToAllocate := OrigGenJnlLine.Amount - TotAmountAllocated;
          REPEAT
            InsertGenJnlLine(OrigGenJnlLine);
          UNTIL PurchAllocationLine.NEXT = 0
        END;

        OrigGenJnlLine.DELETE(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetSelectedAllocationCode@1100528500(VendorCode@1100528500 : Code[20]) : Boolean;
    VAR
      Vendor@1100528501 : Record 23;
    BEGIN
      PurchAllocation.RESET;
      IF VendorCode <> '' THEN
        IF Vendor.GET(VendorCode) THEN
          IF Vendor."Purchase Allocation Code" <> '' THEN
            IF PurchAllocation.GET(Vendor."Purchase Allocation Code") THEN
              PurchAllocation.SETRANGE(Code, PurchAllocation.Code);

      EXIT(PAGE.RUNMODAL(PAGE::"Purchase Allocation List", PurchAllocation) = ACTION::LookupOK);
    END;

    LOCAL PROCEDURE InsertPurchLine@1210190002(OrigPurchLine@1100528500 : Record 39;PurchHeader@1100528503 : Record 38;VAR PurchLine@1100528501 : Record 39);
    VAR
      AllocAmount@1100528502 : Decimal;
    BEGIN
      WITH PurchLine DO BEGIN
        PurchLine := OrigPurchLine;
        "Line No." :=  LineNo;
        LineNo := LineNo + 10000;
        INSERT(TRUE);

        IF OrigPurchLine."Line No." = 0 THEN
          InitRecord;

        Type := Type::"G/L Account";
        IF PurchAllocationLine."Receiving Company" <> '' THEN
          VALIDATE("Receiving Company",PurchAllocationLine."Receiving Company");
        IF PurchAllocationLine."Project No." <> '' THEN
          VALIDATE("Job No.", PurchAllocationLine."Project No.");
        VALIDATE(Element, PurchAllocationLine.Element);
        VALIDATE("Rental Unit", PurchAllocationLine."Rental Unit");
        "Cost Type" := PurchAllocationLine."Cost Type";
        VALIDATE("No.", PurchAllocationLine."Account No.");
        VALIDATE("Shortcut Dimension 1 Code", PurchAllocationLine."Shortcut Dimension 1 Code");
        VALIDATE("Shortcut Dimension 2 Code", PurchAllocationLine."Shortcut Dimension 2 Code");

        IF PurchAllocationLine."Shortcut Dimension 3 Code" <>'' THEN
          ValidateShortcutDimCode(3, PurchAllocationLine."Shortcut Dimension 3 Code");
        IF PurchAllocationLine."Shortcut Dimension 4 Code" <>'' THEN
          ValidateShortcutDimCode(4, PurchAllocationLine."Shortcut Dimension 4 Code");
        IF PurchAllocationLine."Shortcut Dimension 5 Code" <>'' THEN
          ValidateShortcutDimCode(5, PurchAllocationLine."Shortcut Dimension 5 Code");
        IF PurchAllocationLine."Shortcut Dimension 6 Code" <>'' THEN
          ValidateShortcutDimCode(6, PurchAllocationLine."Shortcut Dimension 6 Code");
        IF PurchAllocationLine."Shortcut Dimension 7 Code" <>'' THEN
          ValidateShortcutDimCode(7, PurchAllocationLine."Shortcut Dimension 7 Code");
        IF PurchAllocationLine."Shortcut Dimension 8 Code" <>'' THEN
          ValidateShortcutDimCode(8, PurchAllocationLine."Shortcut Dimension 8 Code");

        Description := PurchAllocationLine.Description;
        IF OrigPurchLine.Description <> '' THEN
          Description := OrigPurchLine.Description;

        IF NOT PurchHeader."Amounts only" THEN
          IF PurchAllocationLine."Allocation %" = 0 THEN
            Quantity := PurchAllocationLine.Quantity
          ELSE
            Quantity := 1;
        VALIDATE(Quantity);

        IF OrigPurchLine."Line No." > 0 THEN BEGIN
          "VAT Bus. Posting Group" := OrigPurchLine."VAT Bus. Posting Group";
          VALIDATE("VAT Prod. Posting Group", OrigPurchLine."VAT Prod. Posting Group");
        END;

        "Unit of Measure Code" := PurchAllocationLine."Unit of Measure Code";
        "Unit of Measure" := PurchAllocationLine."Unit of Measure";
        "Direct Unit Cost" := PurchAllocationLine."Direct Unit Cost";

        IF PurchAllocationLine."Allocation %" = 0 THEN
          VALIDATE("Line Amount", PurchAllocationLine.Amount)
        ELSE BEGIN
          AllocAmount := PurchAllocationLine."Allocation %"/100 * TotAmountToAllocate;

          IF PurchHeader."Prices Including VAT" THEN BEGIN
            VALIDATE("Line Amount",AllocAmount);
            IF "Manually VAT Posting" THEN
              VALIDATE("Amount Including VAT", AllocAmount);
          END ELSE
            VALIDATE("Amount Including VAT", AllocAmount);

          IF Quantity <> 0 THEN
            IF PurchHeader."Prices Including VAT" THEN
              VALIDATE("Direct Unit Cost", "Amount Including VAT"/Quantity)
            ELSE
              VALIDATE("Direct Unit Cost", Amount/Quantity)
          ELSE
            IF PurchHeader."Prices Including VAT" THEN
              VALIDATE("Direct Unit Cost", "Amount Including VAT")
            ELSE
              VALIDATE("Direct Unit Cost", Amount);

          IF PurchHeader."Amounts only" THEN BEGIN
            UpdateAmounts;
            VALIDATE("Line Amount");
          END;
        END;

        "Modified by" := USERID; //DP00469
        "Last Date Modified" := TODAY;//DP00469
        MODIFY;

        TotAmountAllocated := TotAmountAllocated + "Amount Including VAT";
      END;
    END;

    LOCAL PROCEDURE InsertPurchApprovalLine@1210190003(OrigPurchApprovalLine@1100528501 : Record 11012032;VAR PurchApprovalLine@1100528504 : Record 11012032;AmountsOnly@1100528500 : Boolean);
    VAR
      AllocAmount@1100528503 : Decimal;
    BEGIN
      WITH PurchApprovalLine DO BEGIN
        PurchApprovalLine := OrigPurchApprovalLine;
        "Line No." :=  LineNo;
        LineNo := LineNo + 10000;
        INSERT(TRUE);

        VALIDATE("Receiving Company",PurchAllocationLine."Receiving Company");
        Type := Type::"G/L Account";
        IF PurchAllocationLine."Project No." <> '' THEN
          VALIDATE("Project No.", PurchAllocationLine."Project No.");
        VALIDATE(Element, PurchAllocationLine.Element);
        VALIDATE("Rental Unit", PurchAllocationLine."Rental Unit");
        "Cost Type" := PurchAllocationLine."Cost Type";
        VALIDATE("Account No.", PurchAllocationLine."Account No.");
        VALIDATE("Shortcut Dimension 1 Code", PurchAllocationLine."Shortcut Dimension 1 Code");
        VALIDATE("Shortcut Dimension 2 Code", PurchAllocationLine."Shortcut Dimension 2 Code");

        IF PurchAllocationLine."Shortcut Dimension 3 Code" <>'' THEN
          ValidateShortcutDimCode(3, PurchAllocationLine."Shortcut Dimension 3 Code");
        IF PurchAllocationLine."Shortcut Dimension 4 Code" <>'' THEN
          ValidateShortcutDimCode(4, PurchAllocationLine."Shortcut Dimension 4 Code");
        IF PurchAllocationLine."Shortcut Dimension 5 Code" <>'' THEN
          ValidateShortcutDimCode(5, PurchAllocationLine."Shortcut Dimension 5 Code");
        IF PurchAllocationLine."Shortcut Dimension 6 Code" <>'' THEN
          ValidateShortcutDimCode(6, PurchAllocationLine."Shortcut Dimension 6 Code");
        IF PurchAllocationLine."Shortcut Dimension 7 Code" <>'' THEN
          ValidateShortcutDimCode(7, PurchAllocationLine."Shortcut Dimension 7 Code");
        IF PurchAllocationLine."Shortcut Dimension 8 Code" <>'' THEN
          ValidateShortcutDimCode(8, PurchAllocationLine."Shortcut Dimension 8 Code");

        Description := PurchAllocationLine.Description;
        IF OrigPurchApprovalLine.Description <> '' THEN
          Description := OrigPurchApprovalLine.Description;

        IF NOT AmountsOnly THEN
          IF PurchAllocationLine."Allocation %" = 0 THEN
            Quantity := PurchAllocationLine.Quantity
          ELSE
            Quantity := 1;
        VALIDATE(Quantity);
        "Unit of Measure Code" := PurchAllocationLine."Unit of Measure Code";
        Price := PurchAllocationLine."Direct Unit Cost";

        IF PurchAllocationLine."Allocation %" = 0 THEN
          VALIDATE(Amount, PurchAllocationLine.Amount)
        ELSE BEGIN
          AllocAmount := PurchAllocationLine."Allocation %"/100 * TotAmountToAllocate;

          IF Quantity <> 0 THEN
            VALIDATE(Price, AllocAmount/Quantity)
          ELSE
            VALIDATE(Price, AllocAmount);

          VALIDATE(Amount, AllocAmount);
        END;
        CalculateAmount;

        MODIFY;

        TotAmountAllocated := TotAmountAllocated + Amount;
      END;
    END;

    LOCAL PROCEDURE InsertGenJnlLine@1100525001(OrigGenJnlLine@1100528501 : Record 81);
    VAR
      GenJnlLine@1100528500 : Record 81;
      AllocAmount@1100528502 : Decimal;
    BEGIN
      WITH GenJnlLine DO BEGIN
        GenJnlLine := OrigGenJnlLine;
        "Line No." := LineNo;
        LineNo := LineNo + 10000;
        INSERT(TRUE);

        VALIDATE("Receiving Company", PurchAllocationLine."Receiving Company");
        "Account Type" := "Account Type"::"G/L Account";
        IF PurchAllocationLine."Project No." <> '' THEN
          VALIDATE("Job No.", PurchAllocationLine."Project No.");
        VALIDATE(Element, PurchAllocationLine.Element);
        VALIDATE("Rental Unit", PurchAllocationLine."Rental Unit");
        VALIDATE("Account No.", PurchAllocationLine."Account No.");
        VALIDATE("Shortcut Dimension 1 Code", PurchAllocationLine."Shortcut Dimension 1 Code");
        VALIDATE("Shortcut Dimension 2 Code", PurchAllocationLine."Shortcut Dimension 2 Code");

        IF PurchAllocationLine."Shortcut Dimension 3 Code" <>'' THEN
          ValidateShortcutDimCode(3, PurchAllocationLine."Shortcut Dimension 3 Code");
        IF PurchAllocationLine."Shortcut Dimension 4 Code" <>'' THEN
          ValidateShortcutDimCode(4, PurchAllocationLine."Shortcut Dimension 4 Code");
        IF PurchAllocationLine."Shortcut Dimension 5 Code" <>'' THEN
          ValidateShortcutDimCode(5, PurchAllocationLine."Shortcut Dimension 5 Code");
        IF PurchAllocationLine."Shortcut Dimension 6 Code" <>'' THEN
          ValidateShortcutDimCode(6, PurchAllocationLine."Shortcut Dimension 6 Code");
        IF PurchAllocationLine."Shortcut Dimension 7 Code" <>'' THEN
          ValidateShortcutDimCode(7, PurchAllocationLine."Shortcut Dimension 7 Code");
        IF PurchAllocationLine."Shortcut Dimension 8 Code" <>'' THEN
          ValidateShortcutDimCode(8, PurchAllocationLine."Shortcut Dimension 8 Code");

        Description := PurchAllocationLine.Description;
        IF OrigGenJnlLine.Description <> '' THEN
          Description := OrigGenJnlLine.Description;

        "VAT Bus. Posting Group" := OrigGenJnlLine."VAT Bus. Posting Group";
        VALIDATE("VAT Prod. Posting Group", OrigGenJnlLine."VAT Prod. Posting Group");
        "Unit of Measure Code" := PurchAllocationLine."Unit of Measure Code";

        IF PurchAllocationLine."Allocation %" = 0 THEN
          AllocAmount := PurchAllocationLine.Amount
        ELSE
          AllocAmount := PurchAllocationLine."Allocation %"/100 * TotAmountToAllocate;
        VALIDATE(Amount, AllocAmount);

        MODIFY;
        TotAmountAllocated := TotAmountAllocated + Amount;
      END;
    END;

    BEGIN
    END.
  }
}

