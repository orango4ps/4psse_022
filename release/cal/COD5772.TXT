OBJECT Codeunit 5772 Whse.-Purch. Release
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    Permissions=TableData 5765=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WhseRqst@1000 : Record 5765;
      PurchLine@1001 : Record 39;
      Location@1002 : Record 14;
      OldLocationCode@1003 : Code[10];
      First@1004 : Boolean;

    [External]
    PROCEDURE Release@1(PurchHeader@1000 : Record 38);
    VAR
      WhseType@1002 : 'Inbound,Outbound';
      OldWhseType@1001 : 'Inbound,Outbound';
    BEGIN
      OnBeforeRelease(PurchHeader);

      WITH PurchHeader DO BEGIN
        CASE "Document Type" OF
          "Document Type"::Order:
            WhseRqst."Source Document" := WhseRqst."Source Document"::"Purchase Order";
          "Document Type"::"Return Order":
            WhseRqst."Source Document" := WhseRqst."Source Document"::"Purchase Return Order";
          ELSE
            EXIT;
        END;

        PurchLine.SETCURRENTKEY("Document Type","Document No.","Location Code");
        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        PurchLine.SETRANGE(Type,PurchLine.Type::Item);
        PurchLine.SETRANGE("Drop Shipment",FALSE);
        PurchLine.SETRANGE("Job No.",'');
        PurchLine.SETRANGE("Work Center No.",'');
        OnAfterReleaseSetFilters(PurchLine,PurchHeader);
        IF PurchLine.FIND('-') THEN BEGIN
          First := TRUE;
          REPEAT
            IF (("Document Type" = "Document Type"::Order) AND (PurchLine.Quantity >= 0)) OR
               (("Document Type" = "Document Type"::"Return Order") AND (PurchLine.Quantity < 0))
            THEN
              WhseType := WhseType::Inbound
            ELSE
              WhseType := WhseType::Outbound;
            IF First OR (PurchLine."Location Code" <> OldLocationCode) OR (WhseType <> OldWhseType) THEN
              CreateWhseRqst(PurchHeader,PurchLine,WhseType);

            OnReleaseOnAfterCreateWhseRequest(PurchHeader,PurchLine,WhseType);

            First := FALSE;
            OldLocationCode := PurchLine."Location Code";
            OldWhseType := WhseType;
          UNTIL PurchLine.NEXT = 0;
        END;

        FilterWarehouseRequest(WhseRqst,PurchHeader,WhseRqst."Document Status"::Open);
        IF NOT WhseRqst.ISEMPTY THEN
          WhseRqst.DELETEALL(TRUE);
      END;

      OnAfterRelease(PurchHeader);
    END;

    [External]
    PROCEDURE Reopen@2(PurchHeader@1000 : Record 38);
    BEGIN
      OnBeforeReopen(PurchHeader);

      WITH PurchHeader DO BEGIN
        CASE "Document Type" OF
          "Document Type"::Order:
            WhseRqst.Type := WhseRqst.Type::Inbound;
          "Document Type"::"Return Order":
            WhseRqst.Type := WhseRqst.Type::Outbound;
        END;

        FilterWarehouseRequest(WhseRqst,PurchHeader,WhseRqst."Document Status"::Released);
        IF NOT WhseRqst.ISEMPTY THEN
          WhseRqst.MODIFYALL("Document Status",WhseRqst."Document Status"::Open);
      END;

      OnAfterReopen(PurchHeader);
    END;

    LOCAL PROCEDURE CreateWhseRqst@3(VAR PurchHeader@1000 : Record 38;VAR PurchLine@1003 : Record 39;WhseType@1002 : 'Inbound,Outbound');
    VAR
      PurchLine2@1001 : Record 39;
    BEGIN
      IF ((WhseType = WhseType::Outbound) AND
          (Location.RequireShipment(PurchLine."Location Code") OR
           Location.RequirePicking(PurchLine."Location Code"))) OR
         ((WhseType = WhseType::Inbound) AND
          (Location.RequireReceive(PurchLine."Location Code") OR
           Location.RequirePutaway(PurchLine."Location Code")))
      THEN BEGIN
        PurchLine2.COPY(PurchLine);
        PurchLine2.SETRANGE("Location Code",PurchLine."Location Code");
        PurchLine2.SETRANGE("Unit of Measure Code",'');
        IF PurchLine2.FINDFIRST THEN
          PurchLine2.TESTFIELD("Unit of Measure Code");

        WhseRqst.Type := WhseType;
        WhseRqst."Source Type" := DATABASE::"Purchase Line";
        WhseRqst."Source Subtype" := PurchHeader."Document Type";
        WhseRqst."Source No." := PurchHeader."No.";
        WhseRqst."Shipment Method Code" := PurchHeader."Shipment Method Code";
        WhseRqst."Document Status" := PurchHeader.Status::Released;
        WhseRqst."Location Code" := PurchLine."Location Code";
        WhseRqst."Destination Type" := WhseRqst."Destination Type"::Vendor;
        WhseRqst."Destination No." := PurchHeader."Buy-from Vendor No.";
        WhseRqst."External Document No." := PurchHeader."Vendor Shipment No.";
        IF WhseType = WhseType::Inbound THEN
          WhseRqst."Expected Receipt Date" := PurchHeader."Expected Receipt Date"
        ELSE
          WhseRqst."Shipment Date" := PurchHeader."Expected Receipt Date";
        PurchHeader.SETRANGE("Location Filter",PurchLine."Location Code");
        PurchHeader.CALCFIELDS("Completely Received");
        WhseRqst."Completely Handled" := PurchHeader."Completely Received";
        OnBeforeCreateWhseRequest(WhseRqst,PurchHeader,PurchLine,WhseType);
        IF NOT WhseRqst.INSERT THEN
          WhseRqst.MODIFY;
        OnAfterCreateWhseRqst(WhseRqst,PurchHeader,PurchLine,WhseType);
      END;
    END;

    LOCAL PROCEDURE FilterWarehouseRequest@4(VAR WarehouseRequest@1000 : Record 5765;PurchaseHeader@1001 : Record 38;DocumentStatus@1002 : Option);
    BEGIN
      WITH WarehouseRequest DO BEGIN
        RESET;
        SETCURRENTKEY("Source Type","Source Subtype","Source No.");
        SETRANGE(Type,Type);
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype",PurchaseHeader."Document Type");
        SETRANGE("Source No.",PurchaseHeader."No.");
        SETRANGE("Document Status",DocumentStatus);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateWhseRqst@11(VAR WhseRqst@1003 : Record 5765;VAR PurchHeader@1002 : Record 38;VAR PurchLine@1001 : Record 39;WhseType@1000 : 'Inbound,Outbound');
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCreateWhseRequest@5(VAR WhseRqst@1000 : Record 5765;VAR PurchHeader@1001 : Record 38;VAR PurchLine@1002 : Record 39;WhseType@1003 : 'Inbound,Outbound');
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterRelease@6(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterReleaseSetFilters@8(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterReopen@7(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRelease@9(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeReopen@10(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnReleaseOnAfterCreateWhseRequest@12(PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;WhseType@1002 : 'Inbound,Outbound');
    BEGIN
    END;

    BEGIN
    END.
  }
}

