OBJECT Table 6086309 Expense Posting Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW16.00.10.3.00.04;
  }
  PROPERTIES
  {
    Permissions=TableData 6086309=rimd;
    DataCaptionFields=No.;
    OnInsert=BEGIN
               IF "Country/Region Type" = "Country/Region Type"::Country THEN
                 TESTFIELD("Country/Region Code");
             END;

    OnModify=BEGIN
               IF "Country/Region Type" = "Country/Region Type"::Country THEN
                 TESTFIELD("Country/Region Code");
             END;

    CaptionML=[DEU=Buch.einr. fÅr Ausgaben/Km-L..;
               ENU=Posting setup for Expense/Mileage;
               NLD=Boekingsinstellingen voor Uitgave/Kilometrage];
    LookupPageID=Page6086312;
    DrillDownPageID=Page6086312;
  }
  FIELDS
  {
    { 1   ;   ;Type                ;Option        ;CaptionML=[DEU=Art;
                                                              ENU=Type;
                                                              NLD=Type;
                                                              NOR=Radtype;
                                                              SVE=Typ];
                                                   OptionCaptionML=[DEU=Kilometerleistung,Ausgabe;
                                                                    ENU=Mileage,Expense;
                                                                    NLD=Rijden,Uitgave];
                                                   OptionString=Mileage,Expense }
    { 2   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Expense)) "Expense Type"
                                                                 ELSE IF (Type=CONST(Mileage)) "Vehicle DC";
                                                   CaptionML=[DEU=Typcode;
                                                              ENU=Type Code;
                                                              NLD=Typecode;
                                                              NOR=Typekode;
                                                              SVE=Typkod] }
    { 3   ;   ;Country/Region Type ;Option        ;OnValidate=BEGIN
                                                                IF xRec."Country/Region Type" <> "Country/Region Type" THEN
                                                                  CLEAR("Country/Region Code");
                                                              END;

                                                   CaptionML=[DEU=Land/Region-Art;
                                                              ENU=Country/Region Type;
                                                              NLD=Land-/regiotype];
                                                   OptionCaptionML=[DEU=Alle LÑnder/Regionen,Land;
                                                                    ENU=All Countries/Regions,Country;
                                                                    NLD=Alle landen/regio's,Land];
                                                   OptionString=All Countries/Regions,Country }
    { 4   ;   ;Country/Region Code ;Code10        ;TableRelation=IF (Country/Region Type=CONST(Country)) Country/Region;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Type,"Country/Region Type"::Country);

                                                                IF "Country/Region Type" = "Country/Region Type"::Country THEN
                                                                  TESTFIELD("Country/Region Code");
                                                              END;

                                                   CaptionML=[DEU=LÑnder-/Regionscode;
                                                              ENU=Country/Region Code;
                                                              NLD=Land-/regiocode;
                                                              NOR=Lands-/regionkode;
                                                              SVE=Lands-/regionkod] }
    { 5   ;   ;Employee No.        ;Code50        ;TableRelation="Continia User Setup";
                                                   CaptionML=[DEU=Mitarbeiternr.;
                                                              ENU=Employee No.;
                                                              NLD=Werknemersnr.;
                                                              NOR=Ansattnr;
                                                              SVE=AnstÑllningsnr] }
    { 8   ;   ;Employee Group      ;Code20        ;TableRelation="Expense User Group";
                                                   CaptionML=[DEU=Mitarbeitergruppe;
                                                              ENU=Employee Group;
                                                              NLD=Werknemersgroep] }
    { 9   ;   ;Posting Account Type;Option        ;OnValidate=BEGIN
                                                                IF xRec."Posting Account Type" <> "Posting Account Type" THEN
                                                                  CLEAR("Posting Account No.");

                                                                IF Type = Type::Expense THEN
                                                                  IF NOT ("Posting Account Type" IN
                                                                     ["Posting Account Type"::" ","Posting Account Type"::"G/L Account","Posting Account Type"::Item])
                                                                  THEN
                                                                    ERROR(WrongPostingAccountType,FIELDCAPTION(Type),FORMAT(Type),FIELDCAPTION("Posting Account Type"));
                                                                IF "Posting Account Type" <> xRec."Posting Account Type" THEN
                                                                  CheckForExistingDocuments;
                                                              END;

                                                   CaptionML=[DEU=Buchungskontoart;
                                                              ENU=Posting Account Type;
                                                              NLD=Boekingsrekeningtype];
                                                   OptionCaptionML=[DEU=" ,Sachkonto,,,Artikel";
                                                                    ENU=" ,G/L Account,,,Item";
                                                                    NLD=" ,Grootboekrekening,,,Artikel"];
                                                   OptionString=[ ,G/L Account,,,Item] }
    { 10  ;   ;Posting Account No. ;Code20        ;TableRelation=IF (Posting Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Posting Account Type=CONST(Item)) Item;
                                                   OnValidate=VAR
                                                                GLAcc@1160040001 : Record 15;
                                                                Item@1160040000 : Record 27;
                                                              BEGIN
                                                                IF "Posting Account No." <> '' THEN
                                                                  TESTFIELD("Posting Account Type");
                                                                CASE "Posting Account Type" OF
                                                                  "Posting Account Type"::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("Posting Account No.");
                                                                      GLAcc.CheckGLAcc;
                                                                    END;

                                                                  "Posting Account Type"::Item:
                                                                    BEGIN
                                                                      TESTFIELD(Type,Type::Expense);
                                                                      Item.GET("Posting Account No.");
                                                                      Item.TESTFIELD(Blocked,FALSE);
                                                                      Item.TESTFIELD("Gen. Prod. Posting Group");
                                                                    END;
                                                                END;

                                                                IF "Posting Account No." <> xRec."Posting Account No." THEN
                                                                  CheckForExistingDocuments;
                                                              END;

                                                   CaptionML=[DEU=Sachkontonr.;
                                                              ENU=Posting Account No.;
                                                              NLD=Rekeningnr. boeken;
                                                              NOR=Regnskapskontonr;
                                                              SVE=Redovisningskontonr] }
    { 45  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[DEU=Produktbuchungsgruppe;
                                                              ENU=Gen. Prod. Posting Group;
                                                              NLD=Algemene productboekingsgroep;
                                                              NOR=Generell Produktbokfõringsmall;
                                                              SVE=Produktbokfîringsmall] }
    { 46  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[DEU=GeschÑftsbuchungsgruppe;
                                                              ENU=Gen. Bus. Posting Group;
                                                              NLD=Bedrijfsboekingsgroep;
                                                              SVE=Gen. rîrelsebokfîringsmall] }
    { 58  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[DEU=MwSt.-Produktbuchungsgruppe;
                                                              ENU=VAT Prod. Posting Group;
                                                              NLD=Btw-productboekingsgroep;
                                                              NOR=Moms produktbokfõringsmal;
                                                              SVE=Moms produktbokfîringsmall] }
    { 59  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[DEU=MwSt.-GeschÑftsbuchungsgruppe;
                                                              ENU=VAT Bus. Posting Group;
                                                              NLD=Btw-bedrijfsboekingsgroep;
                                                              SVE=Moms rîrelsebokfîringsmall] }
    { 65  ;   ;External Posting Account Type;Option;
                                                   OnValidate=VAR
                                                                EMSetup@1160040000 : Record 6086300;
                                                              BEGIN
                                                                IF xRec."External Posting Account Type" <> "External Posting Account Type" THEN BEGIN
                                                                  IF ("External Posting Account Type" <> "External Posting Account Type"::" ") AND (Type = Type::Expense) THEN
                                                                    ERROR(MileageOnly,FIELDCAPTION("External Posting Account Type"),FORMAT("External Posting Account Type"),
                                                                    FIELDCAPTION(Type),FORMAT(Type));
                                                                  CLEAR("External Posting Account No.");
                                                                END;

                                                                IF "External Posting Account Type" IN ["External Posting Account Type"::"Lessor Pay Type",
                                                                   "External Posting Account Type"::"Dataloen Pay Type"]
                                                                THEN BEGIN
                                                                  EMSetup.GET;
                                                                  IF EMSetup."Expense Posting" = EMSetup."Expense Posting"::"Always Purchase Invoice" THEN
                                                                    ERROR(PurchasePostingNotAllowed,EMSetup.TABLECAPTION,EMSetup.FIELDCAPTION("Expense Posting"),
                                                                      FORMAT(EMSetup."Expense Posting"),TABLECAPTION,FORMAT("External Posting Account Type"));
                                                                END;
                                                                IF "External Posting Account Type" <> xRec."External Posting Account Type" THEN
                                                                  CheckForExistingDocumentsExt;
                                                              END;

                                                   CaptionML=[DEU=Externe Buchungskontoart;
                                                              ENU=External Posting Account Type;
                                                              NLD=Extern boekingsrekeningtype];
                                                   OptionCaptionML=[DEU=" ,Vermieter Zahlungsart,Leiher Zahlungsart";
                                                                    ENU=" ,Lessor Pay Type,Dataloen Pay Type";
                                                                    NLD=" ,Verhuurder betaaltype,Lener betaaltype"];
                                                   OptionString=[ ,Lessor Pay Type,Dataloen Pay Type] }
    { 67  ;   ;External Posting Account No.;Code20;OnValidate=VAR
                                                                LessorIntegration@1160040003 : Codeunit 6086327;
                                                                DataloenIntegration@1160040002 : Codeunit 6086328;
                                                              BEGIN
                                                                CASE "External Posting Account Type" OF
                                                                  "External Posting Account Type"::"Lessor Pay Type":
                                                                    IF "Posting Account No." <> '' THEN
                                                                      LessorIntegration.ValidatePayType("External Posting Account No.");

                                                                  "External Posting Account Type"::"Dataloen Pay Type":
                                                                    IF "Posting Account No." <> '' THEN
                                                                      DataloenIntegration.ValidatePayType("External Posting Account No.");
                                                                END;

                                                                IF "Posting Account No." <> xRec."Posting Account No." THEN
                                                                  CheckForExistingDocumentsExt;
                                                              END;

                                                   CaptionML=[DEU=Externe Buchungskontonr.;
                                                              ENU=External Posting Account No.;
                                                              NLD=Extern boekingsrekeningtype.] }
  }
  KEYS
  {
    {    ;Type,No.,Country/Region Type,Country/Region Code,Employee Group,Employee No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ExpenseWithPostingInfo@1160040001 : TextConst 'DEU=Es gibt %1 nicht gebuchte Ausgaben mit Kontonummer ''%2'' fÅr Ausgabenart %3.\Mîchten Sie sie alle auf das Konto ''%4'' aktualisieren?;ENU=There are %1 unposted Expenses with account number ''%2'' for Expense Type %3.\Do you want to update all of them to account ''%4''?;NLD=Er zijn %1 ongeboekte uitgaven met rekeningnummer ''%2'' voor uitgavetype %3.\Wilt u deze allemaal bijwerken naar rekening ''%4''?';
      MileageOnly@1160040000 : TextConst 'DEU=%2 in %1 darf nicht selektiert sein, wenn %3 %4 ist;ENU=%2 in %1 must not be selected, when %3 is %4;NLD=%2 in %1 mag niet geselecteerd zijn als %3 %4 is';
      MileageWithPostingInfo@1160040002 : TextConst 'DEU=Es gibt %1 nicht gebuchte %2 mit  %3 ''%4'' fÅr Fahrzeuge %5.\Mîchten Sie sie alle auf ''%6'' aktualisieren?;ENU=There are %1 unposted %2 with %3 ''%4'' for vehicle %5.\Do you want to update all of them to ''%6''?;NLD=Er zijn %1 ongeboekte %2 met %3 ''%4'' voor voertuig %5.\Wilt u ze allemaal bijwerken naar ''%6''?';
      PurchasePostingNotAllowed@1160040004 : TextConst 'DEU=%1 %2 kann nicht %3 sein, wenn %4 mit %5 vorhanden ist;ENU=%1 %2 cannot be %3, when %4 with %5 exists;NLD=%1 %2 kan niet %3 zijn, wanneer %4 met %5 bestaat';
      WrongPostingAccountType@1160040003 : TextConst 'DEU=Kontoart muss Sachkonto oder leer sein, wenn der Art Ausgabe ist.;ENU=Account Type must be G/L Account or Blank when Type is Expense.;NLD=Rekeningtype moet Grootboek of leeg zijn wanneer het type Uitgave is.';

    PROCEDURE FindPostingSetup@1160040000(Expense@1160040000 : Code[20];CountryRegion@1160040001 : Code[20];Employee@1160040002 : Code[50];Group@1160040003 : Code[20]) : Boolean;
    VAR
      ExpPostingSetup@1160040004 : Record 6086309;
    BEGIN
      //EMPLOYEE,EMPLOYEE GROUP
      ExpPostingSetup.SETRANGE("No.",Expense);
      ExpPostingSetup.SETRANGE(Type,Type::Expense);
      ExpPostingSetup.SETRANGE("Country/Region Type","Country/Region Type"::Country);
      ExpPostingSetup.SETRANGE("Country/Region Code",CountryRegion);
      ExpPostingSetup.SETRANGE("Employee No.",Employee);
      ExpPostingSetup.SETRANGE("Employee Group",Group);
      IF ExpPostingSetup.FINDFIRST THEN BEGIN
        Rec := ExpPostingSetup;
        EXIT(TRUE);
      END;

      ExpPostingSetup.SETRANGE("Country/Region Type","Country/Region Type"::"All Countries/Regions");
      ExpPostingSetup.SETRANGE("Country/Region Code");
      IF ExpPostingSetup.FINDFIRST THEN BEGIN
        Rec := ExpPostingSetup;
        EXIT(TRUE);
      END;

      //EMPLOYEE
      ExpPostingSetup.SETRANGE("Employee Group");
      ExpPostingSetup.SETRANGE("Country/Region Type","Country/Region Type"::Country);
      ExpPostingSetup.SETRANGE("Country/Region Code",CountryRegion);
      IF ExpPostingSetup.FINDFIRST THEN BEGIN
        Rec := ExpPostingSetup;
        EXIT(TRUE);
      END;

      ExpPostingSetup.SETRANGE("Country/Region Type","Country/Region Type"::"All Countries/Regions");
      ExpPostingSetup.SETRANGE("Country/Region Code");
      IF ExpPostingSetup.FINDFIRST THEN BEGIN
        Rec := ExpPostingSetup;
        EXIT(TRUE);
      END;

      //EMPLOYEE GROUP
      ExpPostingSetup.SETRANGE("Employee No.");
      ExpPostingSetup.SETRANGE("Employee Group",Group);
      ExpPostingSetup.SETRANGE("Country/Region Type","Country/Region Type"::Country);
      ExpPostingSetup.SETRANGE("Country/Region Code",CountryRegion);
      IF ExpPostingSetup.FINDFIRST THEN BEGIN
        Rec := ExpPostingSetup;
        EXIT(TRUE);
      END;

      ExpPostingSetup.SETRANGE("Country/Region Type","Country/Region Type"::"All Countries/Regions");
      ExpPostingSetup.SETRANGE("Country/Region Code");
      IF ExpPostingSetup.FINDFIRST THEN BEGIN
        Rec := ExpPostingSetup;
        EXIT(TRUE);
      END;

      //GENERIC
      ExpPostingSetup.SETRANGE("Employee Group");
      ExpPostingSetup.SETRANGE("Country/Region Type","Country/Region Type"::Country);
      ExpPostingSetup.SETRANGE("Country/Region Code",CountryRegion);
      IF ExpPostingSetup.FINDFIRST THEN BEGIN
        Rec := ExpPostingSetup;
        EXIT(TRUE);
      END;

      ExpPostingSetup.SETRANGE("Country/Region Type","Country/Region Type"::"All Countries/Regions");
      ExpPostingSetup.SETRANGE("Country/Region Code");
      IF ExpPostingSetup.FINDFIRST THEN BEGIN
        Rec := ExpPostingSetup;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE FindMileagePostingSetup@1160040001(Vehicle@1160040003 : Code[20];Employee@1160040001 : Code[50];Group@1160040000 : Code[20]) : Boolean;
    VAR
      ExpPostingSetup@1160040002 : Record 6086309;
    BEGIN
      ExpPostingSetup.SETRANGE("No.",Vehicle);
      ExpPostingSetup.SETRANGE(Type,Type::Mileage);
      ExpPostingSetup.SETRANGE("Country/Region Type","Country/Region Type"::"All Countries/Regions");
      ExpPostingSetup.SETRANGE("Employee No.",Employee);
      ExpPostingSetup.SETRANGE("Employee Group",Group);
      IF ExpPostingSetup.FINDFIRST THEN BEGIN
        Rec := ExpPostingSetup;
        EXIT(TRUE);
      END;

      ExpPostingSetup.SETRANGE("Employee Group");
      IF ExpPostingSetup.FINDFIRST THEN BEGIN
        Rec := ExpPostingSetup;
        EXIT(TRUE);
      END;

      ExpPostingSetup.SETRANGE("Employee No.");
      ExpPostingSetup.SETRANGE("Employee Group",Group);
      IF ExpPostingSetup.FINDFIRST THEN BEGIN
        Rec := ExpPostingSetup;
        EXIT(TRUE);
      END;

      ExpPostingSetup.SETRANGE("Employee Group");
      IF ExpPostingSetup.FINDFIRST THEN BEGIN
        Rec := ExpPostingSetup;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE LookupPostingAccount@1000000000(VAR Text@1000000000 : Text[1024]) : Boolean;
    VAR
      LessorIntegration@1000000002 : Codeunit 6086327;
      DataloenIntegration@1000000001 : Codeunit 6086328;
    BEGIN
      TESTFIELD("External Posting Account Type");
      CASE "External Posting Account Type" OF
        "External Posting Account Type"::"Lessor Pay Type":
          EXIT(LessorIntegration.LookupPayType(Text));

        "External Posting Account Type"::"Dataloen Pay Type":
          EXIT(DataloenIntegration.LookupPayType(Text));
      END;
    END;

    LOCAL PROCEDURE CheckForExistingDocuments@1160040002();
    VAR
      ContiniaUserSetup@1160040003 : Record 6086002;
      Expense@1160040000 : Record 6086320;
      Mileage@1160040001 : Record 6086338;
    BEGIN
      CASE Type OF
        Type::Expense:
          BEGIN
            Expense.SETRANGE(Posted,FALSE);
            Expense.SETRANGE("Expense Type","No.");
            Expense.SETRANGE("Exp. Account Manually Changed",FALSE);
            Expense.SETRANGE("Expense Account Type",xRec."Posting Account Type");
            IF "Employee No." <> '' THEN
              Expense.SETRANGE("Continia User ID","Employee No.");
            IF "Country/Region Code" <> '' THEN
              Expense.SETRANGE("Country/Region Code","Country/Region Code");
            IF NOT Expense.FINDSET THEN
              EXIT;
            REPEAT
              Expense.MARK(TRUE);
              IF "Employee Group" <> '' THEN BEGIN
                ContiniaUserSetup.GET(Expense."Continia User ID");
                IF ContiniaUserSetup."Expense User Group" <> "Employee Group" THEN
                  Expense.MARK(FALSE);
              END;
            UNTIL Expense.NEXT = 0;
            Expense.MARKEDONLY(TRUE);
            IF NOT Expense.ISEMPTY THEN
              IF CONFIRM(ExpenseWithPostingInfo,FALSE,FORMAT(Expense.COUNT),xRec."Posting Account No.","No.","Posting Account No.")
              THEN BEGIN
                Expense.FINDSET;
                REPEAT
                  Expense.VALIDATE("Expense Account Type","Posting Account Type");
                  Expense.VALIDATE("Expense Account","Posting Account No.");
                  Expense.MODIFY;
                UNTIL Expense.NEXT = 0;
              END;
          END;

        Type::Mileage:
          BEGIN
            Mileage.SETRANGE(Posted,FALSE);
            Mileage.SETRANGE("Mileage Account Type",xRec."Posting Account Type");
            Mileage.SETRANGE("Vehicle Code","No.");
            Mileage.SETRANGE("Mileage Account",xRec."Posting Account No.");
            IF "Employee No." <> '' THEN
              Mileage.SETRANGE("Continia User ID","Employee No.");
            IF NOT Mileage.FINDSET THEN
              EXIT;
            REPEAT
              Mileage.MARK(TRUE);
              IF "Employee Group" <> '' THEN BEGIN
                ContiniaUserSetup.GET(Mileage."Continia User ID");
                IF ContiniaUserSetup."Expense User Group" <> "Employee Group" THEN
                  Mileage.MARK(FALSE);
              END;
            UNTIL Mileage.NEXT = 0;
            Mileage.MARKEDONLY(TRUE);
            IF NOT Mileage.ISEMPTY THEN
              IF CONFIRM(MileageWithPostingInfo,FALSE,FORMAT(Mileage.COUNT),Mileage.TABLECAPTION,
                 Mileage.FIELDCAPTION("Mileage Account"),xRec."Posting Account No.","No.","Posting Account No.")
              THEN BEGIN
                Mileage.FINDSET;
                REPEAT
                  Mileage.VALIDATE("Mileage Account Type","Posting Account Type");
                  Mileage.VALIDATE("Mileage Account","Posting Account No.");
                  Mileage.MODIFY;
                UNTIL Mileage.NEXT = 0;
              END;
          END;
      END;
    END;

    LOCAL PROCEDURE CheckForExistingDocumentsExt@1160040003();
    VAR
      ContiniaUserSetup@1160040003 : Record 6086002;
      Mileage@1160040001 : Record 6086338;
    BEGIN
      Mileage.SETRANGE(Posted,FALSE);
      Mileage.SETRANGE("External Posting Account Type",xRec."External Posting Account Type");
      Mileage.SETRANGE("Vehicle Code","No.");
      Mileage.SETRANGE("External Posting Account No.",xRec."External Posting Account No.");
      IF "Employee No." <> '' THEN
        Mileage.SETRANGE("Continia User ID","Employee No.");
      IF NOT Mileage.FINDSET THEN
        EXIT;
      REPEAT
        Mileage.MARK(TRUE);
        IF "Employee Group" <> '' THEN BEGIN
          ContiniaUserSetup.GET(Mileage."Continia User ID");
          IF ContiniaUserSetup."Expense User Group" <> "Employee Group" THEN
            Mileage.MARK(FALSE);
        END;
      UNTIL Mileage.NEXT = 0;
      Mileage.MARKEDONLY(TRUE);
      IF NOT Mileage.ISEMPTY THEN
        IF CONFIRM(MileageWithPostingInfo,FALSE,FORMAT(Mileage.COUNT),Mileage.TABLECAPTION,
          Mileage.FIELDCAPTION("External Posting Account No."),xRec."External Posting Account No.","No.",
          "External Posting Account No.")
        THEN BEGIN
          Mileage.FINDSET;
          REPEAT
            Mileage.VALIDATE("External Posting Account Type","External Posting Account Type");
            Mileage.VALIDATE("External Posting Account No.","External Posting Account No.");
            Mileage.MODIFY;
          UNTIL Mileage.NEXT = 0;
        END;
    END;

    BEGIN
    END.
  }
}

