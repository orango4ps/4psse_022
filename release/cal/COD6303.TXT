OBJECT Codeunit 6303 Azure AD Auth Flow
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AuthFlow@1000 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.ALAzureAdCodeGrantFlow";
      ProviderNotInitializedErr@1001 : TextConst 'ENU=The Azure AD Authentication Flow provider has not been initialized.;NOR=Leverand›ren av Azure AD-godkjenningsflyt er ikke initialisert.;SVE=Leverant”r av Azure AD autentiseringsfl”de inte initierad.';

    [External]
    PROCEDURE CanHandle@11() : Boolean;
    VAR
      AzureADMgtSetup@1000 : Record 6303;
    BEGIN
      IF AzureADMgtSetup.GET THEN
        EXIT(AzureADMgtSetup."Auth Flow Codeunit ID" = CODEUNIT::"Azure AD Auth Flow");

      EXIT(FALSE);
    END;

    [Internal]
    PROCEDURE Initialize@1(RedirectUri@1001 : Text);
    VAR
      Uri@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
    BEGIN
      IF CanHandle THEN
        AuthFlow := AuthFlow.ALAzureAdCodeGrantFlow(Uri.Uri(RedirectUri))
      ELSE
        OnInitialize(RedirectUri,AuthFlow);
    END;

    [Internal]
    PROCEDURE AcquireTokenByAuthorizationCode@2(AuthorizationCode@1000 : Text;ResourceName@1001 : Text) AccessToken : Text;
    BEGIN
      CheckProvider;
      IF CanHandle THEN
        AccessToken := AuthFlow.ALAcquireTokenByAuthorizationCode(AuthorizationCode,ResourceName)
      ELSE
        OnAcquireTokenByAuthorizationCode(AuthorizationCode,ResourceName,AccessToken);
    END;

    [Internal]
    PROCEDURE AcquireTokenByAuthorizationCodeWithCredentials@3(AuthorizationCode@1000 : Text;ClientID@1002 : Text;ApplicationKey@1003 : Text;ResourceName@1001 : Text) AccessToken : Text;
    BEGIN
      CheckProvider;
      IF CanHandle THEN
        AccessToken := AuthFlow.ALAcquireTokenByAuthorizationCodeWithCredentials(AuthorizationCode,ClientID,ApplicationKey,ResourceName)
      ELSE
        OnAcquireTokenByAuthorizationCodeWithCredentials(AuthorizationCode,ClientID,ApplicationKey,ResourceName,AccessToken);
    END;

    [Internal]
    PROCEDURE AcquireTokenFromCache@4(ResourceName@1000 : Text) AccessToken : Text;
    BEGIN
      CheckProvider;
      IF CanHandle THEN
        AccessToken := AuthFlow.ALAcquireTokenFromCache(ResourceName)
      ELSE
        OnAcquireTokenFromCache(ResourceName,AccessToken);
    END;

    PROCEDURE AcquireTokenFromCacheState@24(ResourceName@1000 : Text;AadUserId@1001 : Text;TokenCacheState@1002 : Text;VAR NewTokenCacheState@1003 : Text) AccessToken : Text;
    BEGIN
      CheckProvider;
      IF CanHandle THEN
        AccessToken := AuthFlow.ALAcquireTokenFromTokenCacheState(ResourceName,AadUserId,TokenCacheState,NewTokenCacheState)
      ELSE
        OnAcquireTokenFromCacheState(ResourceName,AadUserId,TokenCacheState,NewTokenCacheState,AccessToken);
    END;

    PROCEDURE AcquireGuestToken@18(ResourceName@1000 : Text;GuestTenantId@1001 : Text) AccessToken : Text;
    BEGIN
      CheckProvider;
      IF CanHandle THEN
        AccessToken := AuthFlow.ALAcquireGuestToken(ResourceName,GuestTenantId)
      ELSE
        OnAcquireGuestToken(ResourceName,GuestTenantId,AccessToken);
    END;

    [Internal]
    PROCEDURE AcquireOnBehalfOfToken@20(ResourceName@1002 : Text) AccessToken : Text;
    BEGIN
      CheckProvider;
      IF CanHandle THEN
        AccessToken := AuthFlow.ALAcquireOnBehalfOfToken(ResourceName)
      ELSE
        OnAcquireAcquireOnBehalfOfToken(ResourceName,AccessToken);
    END;

    [Internal]
    PROCEDURE AcquireOnBehalfOfTokenAndTokenCacheState@23(ResourceName@1002 : Text;VAR TokenCacheState@1000 : Text) AccessToken : Text;
    BEGIN
      CheckProvider;
      IF CanHandle THEN
        AccessToken := AuthFlow.ALAcquireOnBehalfOfToken(ResourceName,TokenCacheState)
      ELSE
        OnAcquireOnBehalfOfTokenAndTokenCacheState(ResourceName,AccessToken,TokenCacheState);
    END;

    [Internal]
    PROCEDURE AcquireTokenFromCacheWithCredentials@5(ClientID@1000 : Text;AppKey@1001 : Text;ResourceName@1002 : Text) AccessToken : Text;
    BEGIN
      CheckProvider;
      IF CanHandle THEN
        AccessToken := AuthFlow.ALAcquireTokenFromCacheWithCredentials(ClientID,AppKey,ResourceName)
      ELSE
        OnAcquireTokenFromCacheWithCredentials(ClientID,AppKey,ResourceName,AccessToken);
    END;

    [Internal]
    PROCEDURE AcquireApplicationToken@17(ClientID@1000 : Text;ClientSecret@1001 : Text;Authority@1002 : Text;ResourceUri@1003 : Text) AccessToken : Text;
    BEGIN
      CheckProvider;
      AccessToken := AuthFlow.ALAcquireApplicationToken(ClientID,ClientSecret,Authority,ResourceUri);
    END;

    [Internal]
    PROCEDURE GetSaasClientId@15() ClientID : Text;
    BEGIN
      CheckProvider;
      IF CanHandle THEN
        ClientID := AuthFlow.ALGetSaasClientId
      ELSE
        OnGetSaasClientId(ClientID);
    END;

    [Internal]
    PROCEDURE GetInitialTenantDomainName@22() InitialTenantDomainName : Text;
    BEGIN
      CheckProvider;
      IF CanHandle THEN
        InitialTenantDomainName := AuthFlow.ALGetInitialDomainNameFromAad;
    END;

    [Internal]
    PROCEDURE CreateExchangeServiceWrapperWithToken@14(Token@1000 : Text;VAR Service@1002 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.ExchangeServiceWrapper");
    VAR
      ServiceFactory@1003 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.ServiceWrapperFactory";
    BEGIN
      IF CanHandle THEN
        Service := ServiceFactory.CreateServiceWrapperWithToken(Token)
      ELSE
        OnCreateExchangeServiceWrapperWithToken(Token,Service);
    END;

    LOCAL PROCEDURE CheckProvider@35();
    VAR
      Initialized@1000 : Boolean;
    BEGIN
      IF CanHandle THEN
        Initialized := NOT ISNULL(AuthFlow)
      ELSE
        OnCheckProvider(Initialized);

      IF NOT Initialized THEN
        ERROR(ProviderNotInitializedErr);
    END;

    [Integration]
    LOCAL PROCEDURE OnInitialize@6(RedirectUri@1001 : Text;VAR AzureADAuthFlow@1003 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.ALAzureAdCodeGrantFlow");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAcquireTokenByAuthorizationCode@7(AuthorizationCode@1000 : Text;ResourceName@1001 : Text;VAR AccessToken@1002 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAcquireTokenByAuthorizationCodeWithCredentials@8(AuthorizationCode@1004 : Text;ClientID@1003 : Text;ApplicationKey@1001 : Text;ResourceName@1000 : Text;VAR AccessToken@1002 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAcquireTokenFromCache@9(ResourceName@1000 : Text;VAR AccessToken@1001 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAcquireTokenFromCacheState@28(ResourceName@1000 : Text;AadUserId@1002 : Text;TokenCacheState@1003 : Text;VAR NewTokenCacheState@1001 : Text;VAR AccessToken@1004 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAcquireGuestToken@19(ResourceName@1000 : Text;GuestTenantId@1001 : Text;VAR AccessToken@1002 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAcquireAcquireOnBehalfOfToken@21(ResourceName@1001 : Text;VAR AccessToken@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAcquireOnBehalfOfTokenAndTokenCacheState@25(ResourceName@1001 : Text;VAR AccessToken@1000 : Text;VAR TokenCacheState@1002 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAcquireTokenFromCacheWithCredentials@10(ClientID@1000 : Text;AppKey@1001 : Text;ResourceName@1002 : Text;VAR AccessToken@1003 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetSaasClientId@16(VAR ClientID@1000 : Text);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCreateExchangeServiceWrapperWithToken@13(Token@1000 : Text;VAR Service@1002 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.ExchangeServiceWrapper");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCheckProvider@12(VAR Result@1000 : Boolean);
    BEGIN
    END;

    BEGIN
    {
      // This codeunit should never be called directly. It should only be called through COD6300.
    }
    END.
  }
}

