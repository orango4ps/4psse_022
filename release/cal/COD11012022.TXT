OBJECT Codeunit 11012022 Format Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@11012010 : TextConst 'DEU=%1 %2 existiert nicht.;ENU=%1 %2 does not exist;NLD=%1 %2 bestaat niet;NOR=%1 %2 finnes ikke;SVE=%1 %2 finns inte.';
      Text002@11012013 : TextConst 'DEU=Startelement;ENU=Starting Element;NLD=Startelement;NOR=Startelement;SVE=Startelement';
      Text005@11012015 : TextConst 'DEU=XX.XX.XX;ENU=XX.XX.XX;NLD=XX.XX.XX;NOR=XX.XX.XX;SVE=XX.XX.XX';
      Text006@11012016 : TextConst 'DEU=Nicht mehr als 3 Stufen zul„ssig;ENU=Only 3 levels allowed;NLD=Niet meer dan 3 niveaus toegestaan;NOR=kun tre niv†er tillates;SVE=Endast tre niv†er till†ts';
      Text007@11012017 : TextConst 'DEU=Code darf nicht l„nger sein als Format %1;ENU=Code should not exceed format %1;NLD=Code mag niet langer zijn dan formaat %1;NOR=Kodee kan ikke overskride Format %1;SVE=Kod f†r inte ”verstiga format %1';
      EstSetup@11012000 : Record 11012150;
      ProjSetup@11012001 : Record 315;
      CodeSystRec@1210190001 : Record 11012088;
      ServLocRec@1100526200 : Record 11012801;
      ServiceSurveyLocation@1100528601 : Record 11071804;
      gvCodingSystem@1210190002 : Code[10];
      gvServiceLocation@1100528600 : Code[20];
      gvServiceSurvey@1100528602 : Code[20];
      gvServiceSurveyLoc@1100528603 : Code[20];
      Frmt@11012002 : Code[20];
      StartCode@11012003 : Code[20];
      TempCode@11012004 : Code[20];
      lp@11012005 : Integer;
      sp1@11012006 : Integer;
      sp2@11012007 : Integer;
      sp3@11012008 : Integer;
      x@11012009 : Integer;
      Text008@1210190004 : TextConst 'DEU=******************************;ENU=******************************;NLD=******************************;NOR=******************************;SVE=******************************';
      Text009@1100485000 : TextConst 'DEU=%1 %2 existiert nicht.;ENU=%1 %2 does not exist;NLD=%1 %2 bestaat niet;NOR=%1 %2 finnes ikke;SVE=%1 %2 finns inte.';

    PROCEDURE CreateStandardElement@16(VAR Element@11012000 : Code[20];VAR Chapter@11012001 : Code[20];VAR Paragraph@11012002 : Code[20];VAR Level@11012003 : Integer);
    VAR
      ElemRec@11012004 : Record 11012060;
    BEGIN
      FormatElem(Element,0,'');
      DetermineLevel(Element,Chapter,Paragraph,Level);

      CASE Level OF
        1:IF NOT ElemRec.GET(StartCode) THEN
            ERROR(Text000, ElemRec.TABLECAPTION, StartCode);
        2:IF NOT ElemRec.GET(Chapter) THEN
            ERROR(Text000, ElemRec.TABLECAPTION, Chapter);
        3:IF NOT ElemRec.GET(Paragraph) THEN
            ERROR(Text000, ElemRec.TABLECAPTION, Paragraph);
      END;
    END;

    PROCEDURE CreateStandardPartEst@4(PartGroup@11012000 : Code[20];VAR Element@11012001 : Code[20];VAR Chapter@11012002 : Code[20];VAR Paragraph@11012003 : Code[20];VAR Level@11012004 : Integer);
    VAR
      PartRec@11012005 : Record 11012169;
    BEGIN
      FormatElem(Element,1,'');
      DetermineLevel(Element,Chapter,Paragraph,Level);

      CASE Level OF
        1:IF NOT PartRec.GET(PartGroup,StartCode) THEN
            ERROR(Text000, PartRec.TABLECAPTION, StartCode);
        2:IF NOT PartRec.GET(PartGroup,Chapter) THEN
            ERROR(Text000, PartRec.TABLECAPTION, Chapter);
        3:IF NOT PartRec.GET(PartGroup,Paragraph) THEN
            ERROR(Text000, PartRec.TABLECAPTION, Paragraph);
      END;
    END;

    [External]
    PROCEDURE CreateProjPlanningBaseActivity@1100528400(VAR ActivityCode@11012000 : Code[10];VAR Chapter@11012001 : Code[10];VAR Paragraph@11012002 : Code[10];VAR Level@11012003 : Integer);
    VAR
      ProjectPlanningBaseActivity@11012004 : Record 11012434;
    BEGIN
      FormatElem(ActivityCode, 20, '');
      DetermineLevel(ActivityCode, Chapter, Paragraph, Level);

      CASE Level OF
        2:
          IF NOT ProjectPlanningBaseActivity.GET(Chapter) THEN
            ERROR(Text000, ProjectPlanningBaseActivity.TABLECAPTION, Chapter)
          ELSE
            ProjectPlanningBaseActivity.TESTFIELD(Type, ProjectPlanningBaseActivity.Type::Summary);
        3:IF NOT ProjectPlanningBaseActivity.GET(Paragraph) THEN
            ERROR(Text000, ProjectPlanningBaseActivity.TABLECAPTION, Paragraph)
          ELSE
            ProjectPlanningBaseActivity.TESTFIELD(Type, ProjectPlanningBaseActivity.Type::Summary);
      END;
    END;

    [External]
    PROCEDURE CreateProjPlanningActivity@1100528401(ProjectNo@1100528400 : Code[20];VAR ActivityCode@11012000 : Code[10];VAR Chapter@11012001 : Code[10];VAR Paragraph@11012002 : Code[10];VAR Level@11012003 : Integer);
    VAR
      ProjectPlanningActivity@11012004 : Record 11012431;
      ParentActivityCode@1100528401 : Code[10];
    BEGIN
      FormatElem(ActivityCode, 20, '');
      DetermineLevel(ActivityCode, Chapter, Paragraph, Level);

      CASE Level OF
        0: EXIT;
        1: EXIT;
        2: ParentActivityCode := Chapter;
        3: ParentActivityCode := Paragraph;
      END;

      REPEAT
        IF NOT ProjectPlanningActivity.GET(ProjectNo + ParentActivityCode) THEN BEGIN
          ProjectPlanningActivity.INIT;
          ProjectPlanningActivity."Project No." := ProjectNo;
          ProjectPlanningActivity.VALIDATE(Code, ParentActivityCode);
          ProjectPlanningActivity.VALIDATE(Type, ProjectPlanningActivity.Type::Summary);
          ProjectPlanningActivity.INSERT(TRUE);
        END;
        CASE ProjectPlanningActivity.Level OF
          2: ParentActivityCode := Chapter;
          3: ParentActivityCode := Paragraph;
        END;
      UNTIL ProjectPlanningActivity.Level = 1;
    END;

    [External]
    PROCEDURE CreateCodePerCodingSystem@1210190002(CodingSystem@1210190000 : Code[20];VAR Code@11012000 : Code[20];VAR Chapter@11012001 : Code[20];VAR Paragraph@11012002 : Code[20];VAR Level@11012003 : Integer);
    VAR
      CodeRec@11012004 : Record 11012089;
    BEGIN
      FormatElem(Code,4,'');
      DetermineLevel(Code,Chapter,Paragraph,Level);

      CASE Level OF
        1:IF NOT CodeRec.GET(CodingSystem,StartCode) THEN
            ERROR(Text000, CodeRec.TABLECAPTION, StartCode);
        2:IF NOT CodeRec.GET(CodingSystem,Chapter) THEN
            ERROR(Text000, CodeRec.TABLECAPTION, Chapter);
        3:IF NOT CodeRec.GET(CodingSystem,Paragraph) THEN
            ERROR(Text000, CodeRec.TABLECAPTION, Paragraph);
      END;
    END;

    PROCEDURE CreateProjElem@1(ProjectNo@11012000 : Code[20];VAR Element@11012001 : Code[20];VAR Chapter@11012002 : Code[20];VAR Paragraph@11012003 : Code[20];VAR Level@11012004 : Integer);
    VAR
      ProjElemRec@11012005 : Record 11012010;
      lvElemRec@1210190000 : Record 11012060;
      lvElement@1210190001 : Code[20];
    BEGIN
      FormatElem(Element,2,'');
      DetermineLevel(Element,Chapter,Paragraph,Level);

      CASE Level OF
        0: EXIT;
        1: lvElement := StartCode;
        2: lvElement := Chapter;
        3: lvElement := Paragraph;
      END;

      REPEAT
        IF NOT ProjElemRec.GET(ProjectNo, lvElement) THEN BEGIN
          FormatElem(lvElement, 2, '');

          ProjElemRec.INIT;
          ProjElemRec."Project No." := ProjectNo;
          ProjElemRec.VALIDATE(Element, lvElement);
          IF lvElemRec.GET(lvElement) THEN
            ProjElemRec.Description := lvElemRec.Description
          ELSE
            IF lvElement = StartCode THEN  //db, 11-05-20
              ProjElemRec.Description := Text002;
          ProjElemRec.INSERT(TRUE);
        END;
        CASE ProjElemRec.Level OF
          1: lvElement := StartCode;
          2: lvElement := Chapter;
          3: lvElement := Paragraph;
        END;
      UNTIL ProjElemRec.Level = 0;
    END;

    PROCEDURE CreateEstPart@2(EstimateNo@11012000 : Code[20];SubEstimate@11012001 : Code[20];EstimateGroup@11012002 : Code[20];VAR EstimatePart@11012003 : Code[20];VAR Chapter@11012004 : Code[20];VAR Paragraph@11012005 : Code[20];VAR Level@11012006 : Integer;SkipMessage@1210190001 : Boolean);
    VAR
      NEWSubEstRec@1100525000 : Record 11072074;
      NEWEstPartRec@1100528900 : Record 11072073;
      lvPartRec@1210190000 : Record 11012169;
      lvPart@1100485000 : Code[20];
      lvChapter@1100485003 : Code[20];
      lvParagraph@1100485002 : Code[20];
      lvLevel@1100485001 : Integer;
      ExcelTemplate@1100528000 : Text[250];
    BEGIN
      FormatElem(EstimatePart,1,'');
      DetermineLevel(EstimatePart,Chapter,Paragraph,Level);

      CASE Level OF
        0: EXIT;
        1: lvPart := StartCode;
        2: lvPart := Chapter;
        3: lvPart := Paragraph;
      END;

      IF NOT NEWSubEstRec.GET(EstimateNo,SubEstimate) THEN NEWSubEstRec.INIT;  //db, 27-01-15
      REPEAT
        IF NOT NEWEstPartRec.GET(EstimateNo,SubEstimate,EstimateGroup,lvPart) THEN BEGIN
          IF SkipMessage THEN BEGIN
            FormatElem(lvPart,1,'');
            DetermineLevel(lvPart,lvChapter,lvParagraph,lvLevel);
            NEWEstPartRec.INIT;
            NEWEstPartRec."Estimate No." := EstimateNo;
            NEWEstPartRec."Sub-Estimate No." := SubEstimate;
            NEWEstPartRec."Part Group" := EstimateGroup;
            NEWEstPartRec.Part := lvPart;
            NEWEstPartRec.Chapter := lvChapter;
            NEWEstPartRec.Paragraph := lvParagraph;
            NEWEstPartRec.Level := lvLevel;
            IF lvPartRec.GET(EstimateGroup, lvPart) THEN BEGIN
              NEWEstPartRec.Description := lvPartRec.Description;
              //db.sn, 15-01-15: C015981
              NEWEstPartRec.Element := lvPartRec.Element;
              NEWEstPartRec."Project Planning Activity Code" := lvPartRec."Project Plann. Base Act. Code";
              //db.en, 15-01-15: C015981
              //db.sn, 24-03-15: C016775
              ExcelTemplate := lvPartRec."Excel Estimate Template";
              IF (ExcelTemplate = '') AND (lvPart = StartCode) THEN
                ExcelTemplate := EstSetup."Excel Estimate Template";
              IF ExcelTemplate <> '' THEN
                NEWEstPartRec.VALIDATE("Excel Estimate Template", ExcelTemplate);
              //db.en, 24-03-15: C016775
            END ELSE BEGIN
              NEWEstPartRec.Description := Text008;
            END;
            //db.sn, 27-01-15
            IF NEWEstPartRec.Element = '' THEN
              NEWEstPartRec.Element := NEWSubEstRec.Element;
            IF NEWEstPartRec."Project Planning Activity Code" = '' THEN
              NEWEstPartRec."Project Planning Activity Code" := NEWSubEstRec."Project Planning Activity Code";
            //db.en, 27-01-15
            NEWEstPartRec.INSERT(TRUE);
          END ELSE BEGIN
            ERROR(Text000, NEWEstPartRec.TABLECAPTION, lvPart);
          END;
        END;
        CASE NEWEstPartRec.Level OF
          1: lvPart := StartCode;
          2: lvPart := NEWEstPartRec.Chapter;
          3: lvPart := NEWEstPartRec.Paragraph;
        END;
      UNTIL NEWEstPartRec.Level = 0;
    END;

    [External]
    PROCEDURE CreateServLocStructureElement@1100526200(ServLoc@11012000 : Code[20];StructureNo@11012001 : Integer;VAR Level0@1100528601 : Code[20];VAR Level1@11012004 : Code[20];VAR Level2@11012005 : Code[20];VAR Element@1100485000 : Code[20];VAR Level@11012006 : Integer;ParentCheck@1100528600 : Boolean);
    VAR
      lvLocStructRec@11012007 : Record 11071720;
      lvPart@1100485006 : Code[20];
    BEGIN
      //* For use in granule project engineering.
      gvServiceLocation := ServLoc;
      FormatElem(Element,15,'');
      Level0 := StartCode;
      DetermineLevel(Element,Level1,Level2,Level);

      IF sp1 = 0 THEN
        EXIT; //if no levels, then element 0 not required

      IF NOT ParentCheck THEN
        EXIT;

      //* Check whether parent exists
      CASE Level OF
        0: EXIT;
        1: lvPart := StartCode;
        2: lvPart := Level1;
        3: lvPart := Level2;
      END;

      REPEAT
        lvLocStructRec.SETFILTER("Service Location No.", ServLoc);
        lvLocStructRec.SETFILTER("No.", lvPart);
        lvLocStructRec.SETRANGE("Structure No.", StructureNo);
        IF NOT lvLocStructRec.FINDFIRST THEN BEGIN
          ERROR(Text009, lvLocStructRec.TABLECAPTION, lvPart);
        END;
        CASE lvLocStructRec.Level OF
          1: lvPart := StartCode;
          2: lvPart := lvLocStructRec."Element Level 1";
          3: lvPart := lvLocStructRec."Element Level 2";
        END;
      UNTIL lvLocStructRec.Level = 0;
    END;

    [External]
    PROCEDURE CreateCalcLocStructureElement@1100528600(ServSurveyNo@11012000 : Code[20];ServSurveyLocNo@1100528600 : Code[20];StructureNo@11012001 : Integer;VAR Level1@11012004 : Code[20];VAR Level2@11012005 : Code[20];VAR Element@1100485000 : Code[20];VAR Level@11012006 : Integer);
    VAR
      ServiceSurveyStructureLine@11012007 : Record 11071806;
      lvPart@1100485006 : Code[20];
    BEGIN
      //* For use in granule project engineering.
      gvServiceSurvey := ServSurveyNo;
      gvServiceSurveyLoc := ServSurveyLocNo;
      FormatElem(Element, 16, '');
      DetermineLevel(Element, Level1, Level2, Level);

      IF sp1 = 0 THEN
        EXIT; //if no levels, then element 0 not required

      //* Check whether parent exists
      CASE Level OF
        0: EXIT;
        1: lvPart := StartCode;
        2: lvPart := Level1;
        3: lvPart := Level2;
      END;

      REPEAT
        ServiceSurveyStructureLine.SETFILTER("Survey No.", ServSurveyNo);
        ServiceSurveyStructureLine.SETRANGE("Location Code", ServSurveyLocNo);
        ServiceSurveyStructureLine.SETRANGE("Structure No.", StructureNo);
        ServiceSurveyStructureLine.SETFILTER(Code, lvPart);
        IF NOT ServiceSurveyStructureLine.FINDFIRST THEN BEGIN
          ERROR(Text009, ServiceSurveyStructureLine.TABLECAPTION, lvPart);
        END;
        CASE ServiceSurveyStructureLine.Level OF
          1: lvPart := StartCode;
          2: lvPart := ServiceSurveyStructureLine."Element Level 1";
          3: lvPart := ServiceSurveyStructureLine."Element Level 2";
        END;
      UNTIL ServiceSurveyStructureLine.Level = 0;
    END;

    [External]
    PROCEDURE CreateNEN2767Element@1100528601(NEN2767VersionCode@1100528600 : Code[10];VAR Code@11012000 : Code[20];VAR Chapter@11012001 : Code[20];VAR Paragraph@11012002 : Code[20];VAR Level@11012003 : Integer);
    VAR
      NENElement@11012004 : Record 11128770;
    BEGIN
      FormatElem(Code,21,'');
      DetermineLevel(Code, Chapter, Paragraph, Level);

      CASE Level OF
        1:IF NOT NENElement.GET(NEN2767VersionCode, StartCode) THEN
            ERROR(Text000, NENElement.TABLECAPTION, StartCode);
        2:IF NOT NENElement.GET(NEN2767VersionCode, Chapter) THEN
            ERROR(Text000, NENElement.TABLECAPTION, Chapter);
        3:IF NOT NENElement.GET(NEN2767VersionCode, Paragraph) THEN
            ERROR(Text000, NENElement.TABLECAPTION, Paragraph);
      END;
    END;

    PROCEDURE FormatElem@5(VAR Element@11012000 : Code[20];SourceType@11012001 : Integer;CompName@1100485000 : Text[50]);
    VAR
      NEN2767LTMPSetup@1100528600 : Record 11128772;
    BEGIN
      x := 0;
      sp1 := 0;
      sp2 := 0;
      sp3 := 0;
      StartCode := '';
      IF CompName = '' THEN CompName := COMPANYNAME;

      IF SourceType = 1 THEN BEGIN
        EstSetup.CHANGECOMPANY(CompName);
        EstSetup.GET();
        EstSetup.TESTFIELD("Part Format");
        Frmt := EstSetup."Part Format";
      END;

      IF SourceType = 2 THEN BEGIN
        ProjSetup.CHANGECOMPANY(CompName);
        ProjSetup.GET();
        ProjSetup.TESTFIELD("Project Element Format");
        Frmt := ProjSetup."Project Element Format";
      END;

      IF SourceType = 4 THEN BEGIN
        CodeSystRec.GET(gvCodingSystem);
        CodeSystRec.TESTFIELD(Format);
        Frmt := CodeSystRec.Format;
      END;

      IF SourceType = 11 THEN BEGIN
        EstSetup.CHANGECOMPANY(CompName);
        EstSetup.GET();
        EstSetup.TESTFIELD("Sub-Estimate Format");
        Frmt := EstSetup."Sub-Estimate Format";
      END;

      IF SourceType = 15 THEN BEGIN
        ServLocRec.CHANGECOMPANY(CompName);
        ServLocRec.GET(gvServiceLocation);
        ServLocRec.TESTFIELD("Location Structure Format");
        Frmt := ServLocRec."Location Structure Format";
      END;

      IF SourceType = 16 THEN BEGIN
        ServiceSurveyLocation.CHANGECOMPANY(CompName);
        ServiceSurveyLocation.GET(gvServiceSurvey, gvServiceSurveyLoc);
        ServiceSurveyLocation.TESTFIELD("Location Structure Format");
        Frmt := ServiceSurveyLocation."Location Structure Format";
      END;

      IF SourceType = 20 THEN BEGIN
        ProjSetup.GET;
        IF ProjSetup."Planning Activity Format" = '' THEN
          EXIT;
        Frmt := ProjSetup."Planning Activity Format";
      END;

      IF SourceType = 21 THEN BEGIN
        NEN2767LTMPSetup.GET;
        NEN2767LTMPSetup.TESTFIELD("NEN2767 Element Format");
        Frmt := NEN2767LTMPSetup."NEN2767 Element Format";
      END;

      //Try for standard elements first format of project element
      //if empty, then formatting according old fixed format
      IF Frmt = '' THEN BEGIN
        ProjSetup.GET();
        Frmt := ProjSetup."Project Element Format";
      END;
      IF Frmt = '' THEN
        Frmt := Text005;
      lp := STRLEN(Frmt);

      REPEAT
        x := x + 1;
        IF COPYSTR(Frmt,x,1) = '.' THEN BEGIN
          IF sp1 = 0 THEN
            sp1 := x
          ELSE
            IF sp2 = 0 THEN
              sp2 :=x
            ELSE
              ERROR(Text006);
          StartCode := StartCode + '.';
        END ELSE BEGIN
          StartCode := StartCode + '0';
        END;
      UNTIL x = lp;

      IF Element = '' THEN
        EXIT;

      //Delete points
      WHILE STRPOS(Element,'.') > 0 DO
        Element := DELSTR(Element, STRPOS(Element,'.'),1);
      TempCode := StartCode;
      WHILE STRPOS(TempCode,'.') > 0 DO
        TempCode := DELSTR(TempCode, STRPOS(TempCode,'.'),1);

      //Test length
      IF STRLEN(Element) > STRLEN(TempCode) THEN
        ERROR(Text007, Frmt);

      //Add zeros
      Element := PADSTR(Element, lp, '0');

      //Add points
      x := 0;
      TempCode := '';
      IF sp1 <> 0 THEN BEGIN
        x := sp1;
        TempCode := COPYSTR(Element, 1, sp1-1) + '.';
      END;
      IF sp2 <> 0 THEN BEGIN
        x := sp2 - 1;
        TempCode := TempCode + COPYSTR(Element, sp1, sp2-sp1-1) + '.';
      END;
      IF sp3 <> 0 THEN BEGIN
        x := sp3 - 2;
        TempCode := TempCode + COPYSTR(Element, sp2, sp3-sp2-1) + '.';
      END;
      IF (x > 1) AND (x < lp) THEN BEGIN
        TempCode := TempCode + COPYSTR(Element, x, lp-x);
        Element := COPYSTR(TempCode, 1, lp);
      END;
    END;

    PROCEDURE DetermineLevel@6(VAR Element@11012000 : Code[20];VAR Chapter@11012001 : Code[20];VAR Paragraph@11012002 : Code[20];VAR Level@11012003 : Integer);
    BEGIN
      IF COPYSTR(Element, 1, lp) = COPYSTR(StartCode, 1, lp) THEN
        Level := 0
      ELSE
        IF sp1 = 0 THEN
          Level := 1
        ELSE
          IF COPYSTR(Element, sp1+1, lp-sp1) = COPYSTR(StartCode, sp1+1, lp-sp1) THEN
            Level := 1
          ELSE
            IF sp2 = 0 THEN
              Level := 2
            ELSE
              IF COPYSTR(Element, sp2+1, lp-sp2) = COPYSTR(StartCode, sp2+1, lp-sp2) THEN
                Level := 2
              ELSE
                Level := 3;

      CASE Level OF
        0:BEGIN
            Chapter := '';
            Paragraph := '';
          END;
        1:BEGIN
            Chapter := Element;
            Paragraph := '';
          END;
        2,3:BEGIN
            IF sp2 <> 0 THEN BEGIN
              Chapter := COPYSTR(Element, 1, sp1) + COPYSTR(StartCode, sp1+1, lp-sp1);
              Paragraph := COPYSTR(Element, 1, sp2) + COPYSTR(StartCode, sp2+1, lp-sp2);
            END ELSE BEGIN
              Chapter := COPYSTR(Element, 1, sp1) + COPYSTR(StartCode, sp1+1, lp-sp1);
              Paragraph := '';
            END;
          END;
      END;
    END;

    [External]
    PROCEDURE FormatElemExtended@1210190001(SourceType@1210190004 : Integer;VAR Element@1210190003 : Code[20];VAR Chapter@1210190002 : Code[20];VAR Paragraph@1210190001 : Code[20];VAR Level@1210190000 : Integer);
    BEGIN
      FormatElem(Element, SourceType,'');
      DetermineLevel(Element,Chapter,Paragraph,Level);
    END;

    [External]
    PROCEDURE SetSelection@1210190003(lvCodingSystem@1210190000 : Code[20]);
    BEGIN
      gvCodingSystem := lvCodingSystem;
    END;

    [External]
    PROCEDURE FormatSubEstimate@1100485004(VAR SubEstCde@11012000 : Code[20];VAR Chapter@11012001 : Code[20];VAR Paragraph@1100485000 : Code[20];VAR Level@11012002 : Integer;EstCde@11012003 : Code[20];SkipMessage@1100485002 : Boolean);
    VAR
      SubEstRecNEW@1100528900 : Record 11072074;
    BEGIN
      FormatElem(SubEstCde,11,'');
      DetermineLevel(SubEstCde,Chapter,Paragraph,Level);
      IF Level = 0 THEN
        Chapter := SubEstCde;
      IF Level > 0 THEN Level := Level - 1;

      IF SkipMessage = TRUE THEN EXIT;

      CASE Level OF
        1:IF NOT SubEstRecNEW.GET(EstCde,Chapter) THEN
            ERROR(Text000, SubEstRecNEW.TABLECAPTION, Chapter);
        2:IF NOT SubEstRecNEW.GET(EstCde,Paragraph) THEN
            ERROR(Text000, SubEstRecNEW.TABLECAPTION, Paragraph);
      END;
    END;

    [External]
    PROCEDURE Numeric@1100485001(Text@11012001 : Text[250]) Res@11012000 : Boolean;
    BEGIN
      EXIT(DELCHR(Text,'=',' .0123456789')='');
    END;

    [External]
    PROCEDURE IsIllegalCode@1210190004(ICode@1210190000 : Code[20]) : Boolean;
    VAR
      FormatCode@1210190006 : Code[20];
      StartingCode@1100528600 : Code[20];
      CodeLength@1210190001 : Integer;
      x@1210190002 : Integer;
      DotPos1@1210190003 : Integer;
      DotPos2@1210190004 : Integer;
    BEGIN
      CodeLength := STRLEN(ICode);
      REPEAT
        x := x + 1;
        IF COPYSTR(ICode, x, 1) = '.' THEN BEGIN
          IF DotPos1 = 0 THEN
            DotPos1 := x
          ELSE
            IF DotPos2 = 0 THEN
              DotPos2 :=x
            ELSE
              ERROR(Text006);
          StartingCode := StartingCode + '.';
          FormatCode := FormatCode + '.';
        END ELSE BEGIN
          StartingCode := StartingCode + '0';
          FormatCode := FormatCode + 'X';
        END;
      UNTIL x = CodeLength;

      IF DotPos1 > 0 THEN
        IF (COPYSTR(ICode, 1, DotPos1 -1) = COPYSTR(StartingCode, 1, DotPos1 -1)) AND
           (COPYSTR(ICode, DotPos1 +1, CodeLength - DotPos1) <> COPYSTR(StartingCode, DotPos1 +1, CodeLength - DotPos1)) THEN
          EXIT(TRUE);
      IF DotPos2 > 0 THEN
        IF (COPYSTR(ICode, DotPos1 +1, DotPos2 - DotPos1 -1) = COPYSTR(StartingCode, DotPos1 +1, DotPos2 - DotPos1 -1)) AND
           (COPYSTR(ICode, DotPos2 +1, CodeLength - DotPos2) <> COPYSTR(StartingCode, DotPos2 +1, CodeLength - DotPos2)) THEN
          EXIT(TRUE);
    END;

    [External]
    PROCEDURE CheckFormat@1100528900(SourceType@1100528901 : Integer;VAR sp1@1100485004 : Integer;VAR sp2@1100485005 : Integer);
    VAR
      ProjectSetup@11012000 : Record 315;
      EstimateSetup@1100528902 : Record 11012150;
      x@1100485002 : Integer;
      lp@1100485001 : Integer;
      Frmt@1100528900 : Text;
    BEGIN
      //C063045
      x := 0;
      sp1 := 0;
      sp2 := 0;

      IF SourceType = 1 THEN BEGIN
        EstimateSetup.GET();
        EstimateSetup.TESTFIELD("Part Format");
        Frmt := EstimateSetup."Part Format";
      END;

      IF SourceType = 2 THEN BEGIN
        ProjectSetup.GET();
        ProjectSetup.TESTFIELD("Project Element Format");
        Frmt := ProjectSetup."Project Element Format";
      END;

      IF SourceType = 11 THEN BEGIN
        EstimateSetup.GET();
        EstimateSetup.TESTFIELD("Sub-Estimate Format");
        Frmt := EstimateSetup."Sub-Estimate Format";
      END;

      lp := STRLEN(Frmt);

      REPEAT
        x := x + 1;
        IF COPYSTR(Frmt,x,1) = '.' THEN BEGIN
          IF sp1 = 0 THEN
            sp1 := x
          ELSE
            IF sp2 = 0 THEN
              sp2 :=x
            ELSE
              ERROR(Text006);
        END;
      UNTIL x = lp;
    END;

    BEGIN
    END.
  }
}

