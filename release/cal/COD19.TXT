OBJECT Codeunit 19 Gen. Jnl.-Post Preview
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.05;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NothingToPostMsg@1019 : TextConst 'ENU=There is nothing to post.;NOR=Det finnes ingenting † bokf›re.;SVE=Det finns inget att bokf”ra.';
      PreviewModeErr@1002 : TextConst 'ENU=Preview mode.;NOR=Forh†ndsvisningsmodus.;SVE=F”rhandsgranskningsl„ge.';
      PostingPreviewEventHandler@1000 : Codeunit 20;
      SubscriberTypeErr@1001 : TextConst 'ENU=Invalid Subscriber type. The type must be CODEUNIT.;NOR=Ugyldig Subscriber-type. Typen m† v‘re CODEUNIT.;SVE=Ogiltig prenumeranttyp. Typen m†ste vara CODEUNIT.';
      RecVarTypeErr@1003 : TextConst 'ENU=Invalid RecVar type. The type must be RECORD.;NOR=Ugyldig RecVar-type. Typen m† v‘re RECORD.;SVE=Ogiltig postvariabeltyp. Typen m†ste vara RECORD.';
      PreviewExitStateErr@1004 : TextConst 'ENU=The posting preview has stopped because of a state that is not valid.;NOR=Forh†ndsvisningen av bokf›ringen har stoppet p† grunn av en ugyldig status.;SVE=F”rhandsvisningen av bokf”ringen har stoppats p† grund av ett ogiltigt tillst†nd.';

    [External]
    PROCEDURE Preview@6(Subscriber@1002 : Variant;RecVar@1000 : Variant);
    VAR
      ErrorMessageHandler@1005 : Codeunit 29;
      ErrorMessageMgt@1001 : Codeunit 28;
      RunResult@1003 : Boolean;
    BEGIN
      IF NOT Subscriber.ISCODEUNIT THEN
        ERROR(SubscriberTypeErr);
      IF NOT RecVar.ISRECORD THEN
        ERROR(RecVarTypeErr);

      BINDSUBSCRIPTION(PostingPreviewEventHandler);
      ErrorMessageMgt.Activate(ErrorMessageHandler);
      ErrorMessageMgt.PushContext(RecVar,0,PreviewModeErr);
      OnAfterBindSubscription;

      RunResult := RunPreview(Subscriber,RecVar);

      UNBINDSUBSCRIPTION(PostingPreviewEventHandler);
      OnAfterUnbindSubscription;

      // The OnRunPreview event expects subscriber following template: Result := <Codeunit>.RUN
      // So we assume RunPreview returns FALSE with the error.
      // To prevent return FALSE without thrown error we check error call stack.
      IF RunResult OR (GETLASTERRORCALLSTACK = '') THEN
        ERROR(PreviewExitStateErr);

      IF GETLASTERRORTEXT <> PreviewModeErr THEN
        IF ErrorMessageHandler.ShowErrors THEN
          ERROR('');
      ShowAllEntries;
      ERROR('');
    END;

    [External]
    PROCEDURE IsActive@8() : Boolean;
    VAR
      Result@1000 : Boolean;
    BEGIN
      // The lookup to event subscription system virtual table is the performance killer.
      // We call subscriber CU 20 to get active state of posting preview context.
      OnSystemSetPostingPreviewActive(Result);

      OnAfterIsActive(Result);
      EXIT(Result);
    END;

    LOCAL PROCEDURE RunPreview@5(Subscriber@1000 : Variant;RecVar@1002 : Variant) : Boolean;
    VAR
      Result@1001 : Boolean;
    BEGIN
      OnRunPreview(Result,Subscriber,RecVar);
      EXIT(Result);
    END;

    LOCAL PROCEDURE ShowAllEntries@20();
    VAR
      TempDocumentEntry@1000 : TEMPORARY Record 265;
      GLPostingPreview@1001 : Page 115;
      IsHandled@1002 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeShowAllEntries(TempDocumentEntry,IsHandled);
      IF IsHandled THEN
        EXIT;

      PostingPreviewEventHandler.FillDocumentEntry(TempDocumentEntry);
      IF NOT TempDocumentEntry.ISEMPTY THEN BEGIN
        GLPostingPreview.Set(TempDocumentEntry,PostingPreviewEventHandler);
        GLPostingPreview.RUN
      END ELSE
        MESSAGE(NothingToPostMsg);
    END;

    [External]
    PROCEDURE ShowDimensions@4(TableID@1000 : Integer;EntryNo@1001 : Integer;DimensionSetID@1002 : Integer);
    VAR
      DimMgt@1003 : Codeunit 408;
      RecRef@1004 : RecordRef;
    BEGIN
      RecRef.OPEN(TableID);
      DimMgt.ShowDimensionSet(DimensionSetID,STRSUBSTNO('%1 %2',RecRef.CAPTION,EntryNo));
    END;

    [External]
    PROCEDURE ThrowError@7();
    BEGIN
      OnBeforeThrowError;
      ERROR(PreviewModeErr);
    END;

    [Integration]
    LOCAL PROCEDURE OnRunPreview@3(VAR Result@1000 : Boolean;Subscriber@1001 : Variant;RecVar@1002 : Variant);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterBindSubscription@1();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUnbindSubscription@2();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnSystemSetPostingPreviewActive@13(VAR Result@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterIsActive@9(VAR Result@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowAllEntries@10(VAR TempDocumentEntry@1000 : TEMPORARY Record 265;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeThrowError@11();
    BEGIN
    END;

    BEGIN
    END.
  }
}

