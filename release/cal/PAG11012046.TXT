OBJECT Page 11012046 Settlement Sheet
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Settlement Sheet;
               NOR=Oppgj›rsskjema;
               SVE=Avr„kningsark];
    SourceTable=Table11012021;
    PopulateAllFields=Yes;
    PageType=Document;
    RefreshOnActivate=Yes;
    OnInit=BEGIN
             SheetLineSFEditable := TRUE;
           END;

    OnOpenPage=BEGIN
                 //>> 160226 ITERO.SB Create cost plus entries when open page (Radiator rfc-182)
                 GetProjectEntry("Project No.",Principal,"Commission No.","No.");
                 //<<
               END;

    OnAfterGetRecord=BEGIN
                       CALCFIELDS("Open (Purchase)","Received/Not Invoiced");
                       SetSubformEditable();
                     END;

    OnNewRecord=VAR
                  lvSettlRec@1210190000 : Record 11012021;
                  Commission@1100525001 : Record 11012020;
                  TmpSettlSheet@1100525002 : TEMPORARY Record 11012021;
                  lString@1100525501 : Text[500];
                  lProjNo@1100525502 : Code[20];
                  lPrincipal@1100525503 : Code[20];
                  lCommNo@1100525504 : Code[20];
                BEGIN
                  PassDatabetweenPages.GetSettlementSheet(lProjNo, lPrincipal, lCommNo);
                  xRec."Project No." := lProjNo;
                  xRec.Principal := lPrincipal;
                  xRec."Commission No." := lCommNo;

                  lProjNo := '';
                  lPrincipal := '';
                  lCommNo := '';

                  lString := GETFILTER("Project No.");
                  lString := DELCHR(lString, '<>');
                  IF (STRLEN(lString) <= 20) AND (STRLEN(lString) > 0) THEN BEGIN
                    lProjNo := lString;
                    lString := GETFILTER(Principal);
                    lString := DELCHR(lString, '<>');
                    IF (STRLEN(lString) <= 20) AND (STRLEN(lString) > 0) THEN BEGIN
                      lPrincipal := lString;
                      lString := GETFILTER("Commission No.");
                      lString := DELCHR(lString, '<>');
                      IF (STRLEN(lString) <= 20) AND (STRLEN(lString) > 0) THEN BEGIN
                        lCommNo := lString;
                        "Project No." := lProjNo;
                        Principal := lPrincipal;
                        "Commission No." := lCommNo;
                      END;
                    END;
                  END;
                  //* C-027523.sn
                  IF (("Project No." = '') OR (Principal = '') OR ("Commission No." = '')) AND
                     ((xRec."Project No." <> '') AND (xRec.Principal <> '') AND (xRec."Commission No." <> ''))
                  THEN BEGIN
                    //* If there is a (single) filter on the fields proj/prin/comm then these fields are filled automaticaly (fields not
                    //* on form). But if the user has modified/reset the filter then it possible that these fields are not filled autom.,
                    //* then try with xRec. Note: Combination proj/prin/comm must exist and must be within filters of Rec.
                    IF Commission.GET(xRec."Project No.", xRec.Principal, xRec."Commission No.") THEN BEGIN
                      IF "Project No." <> '' THEN
                        TmpSettlSheet."Project No." := "Project No."
                      ELSE
                        TmpSettlSheet."Project No." := xRec."Project No.";
                      IF Principal <> '' THEN
                        TmpSettlSheet.Principal := Principal
                      ELSE
                        TmpSettlSheet.Principal := xRec.Principal;
                      IF "Commission No." <> '' THEN
                        TmpSettlSheet."Commission No." := "Commission No."
                      ELSE
                        TmpSettlSheet."Commission No." := xRec."Commission No.";
                      TmpSettlSheet.INSERT;
                      TmpSettlSheet.COPYFILTERS(Rec);
                      TmpSettlSheet.SETRANGE("No.");  //* Reset filter on Settl. No.
                      IF TmpSettlSheet.FINDFIRST THEN BEGIN
                        "Project No." := TmpSettlSheet."Project No.";
                        Principal := TmpSettlSheet.Principal;
                        "Commission No." := TmpSettlSheet."Commission No.";
                      END;
                    END;
                  END;


                  lvSettlRec.SETRANGE("Project No.","Project No.");
                  lvSettlRec.SETRANGE(Principal,Principal);
                  lvSettlRec.SETRANGE("Commission No.","Commission No.");
                  IF lvSettlRec.FINDLAST AND (lvSettlRec."No." <> '') THEN
                    "No." := INCSTR(lvSettlRec."No.")
                  ELSE
                    IF "No." = '1' THEN
                      "No." := '001';
                  WHILE lvSettlRec.GET("Project No.", Principal, "Commission No.", "No.") DO
                    "No." := INCSTR(lvSettlRec."No.");
                  //* C-027523.en
                END;

    OnAfterGetCurrRecord=VAR
                           RecRef@1100528400 : RecordRef;
                         BEGIN
                           RecRef.GETTABLE(Rec);
                           CurrPage.RegisterExternalDocumentFB.PAGE.SetRecordReference(RecRef);
                           CurrPage.RegisterExternalDocumentFB.PAGE.SetByCompany(TRUE);
                           CurrPage.RegisterExternalDocumentFB.PAGE.SetDepartmentCode("Global Dimension 1 Code");

                           PassDatabetweenPages.SetSettlementSheet("Project No.", Principal, "Commission No.");
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 12      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Settlement Sheet;
                                 NOR=&Oppgj›rsskjema;
                                 SVE=&Avr„kningsark] }
      { 1210190008;2 ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=[ENU=Statistics;
                                 NOR=Statistikk;
                                 SVE=Statistik];
                      RunObject=Page 11124850;
                      RunPageView=SORTING(Project No.,Principal,Commission No.,No.);
                      RunPageLink=Project No.=FIELD(Project No.),
                                  Principal=FIELD(Principal),
                                  Commission No.=FIELD(Commission No.),
                                  No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Statistics;
                      PromotedCategory=Process }
      { 1100485010;2 ;Action    ;
                      CaptionML=[ENU=&Documents;
                                 NOR=&Dokumenter;
                                 SVE=&Dokument];
                      Image=Documents;
                      OnAction=VAR
                                 DocumentFilters@1100525001 : Codeunit 11012432;
                                 RecRef@1100525002 : RecordRef;
                               BEGIN
                                 RecRef.GETTABLE(Rec);
                                 //DocumentFilters.CreateTempFilterAndExecute2(RecRef, '', FALSE, TRUE, FORMAT(TRUE)); //C008584.o
                                 DocumentFilters.CreateTempFilterAndExecute1(RecRef, '', FALSE, TRUE); //C008584.n
                               END;
                                }
      { 1100525003;2 ;Action    ;
                      CaptionML=[ENU=Project Cost Plus Surcharges;
                                 NOR=Tilleggsgebyrer for prosjektets rapporterte selvkoster;
                                 SVE=Till„ggsavgifter f”r projektets redovisade sj„lvkostnader];
                      Image=CostEntries;
                      OnAction=VAR
                                 ProjSurchargeForm@1100525001 : Page 11072598;
                                 ProjectCostPlusSurcharge@1100525000 : Record 11020561;
                               BEGIN
                                 ProjectCostPlusSurcharge.FILTERGROUP(10);
                                 ProjectCostPlusSurcharge.SETRANGE(Level, ProjectCostPlusSurcharge.Level::"Project Principal");
                                 ProjectCostPlusSurcharge.SETRANGE("Project No.", "Project No.");
                                 ProjectCostPlusSurcharge.SETRANGE(Principal, Principal);
                                 ProjectCostPlusSurcharge.FILTERGROUP(0);
                                 ProjectCostPlusSurcharge.Level := ProjectCostPlusSurcharge.Level::"Project Principal";
                                 ProjSurchargeForm.SETTABLEVIEW(ProjectCostPlusSurcharge);
                                 ProjSurchargeForm.SETRECORD(ProjectCostPlusSurcharge);
                                 ProjSurchargeForm.RUNMODAL;
                               END;
                                }
      { 1100285101;2 ;Action    ;
                      CaptionML=[ENU=Invoices;
                                 NOR=Fakturaer;
                                 SVE=Fakturor];
                      RunObject=Page 9301;
                      RunPageView=SORTING(Document Type,No.)
                                  ORDER(Ascending)
                                  WHERE(Document Type=CONST(Invoice));
                      RunPageLink=Job No.=FIELD(Project No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Invoice;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 //ITERO.PR RFC-013-2
                               END;
                                }
      { 1101285000;2 ;Action    ;
                      Name=<Page Sales Credit Memos>;
                      CaptionML=[ENU=Credit Memos;
                                 NOR=Kreditnotaer;
                                 SVE=Kreditnotor];
                      RunObject=Page 9302;
                      RunPageView=SORTING(Document Type,No.)
                                  ORDER(Ascending)
                                  WHERE(Document Type=CONST(Credit Memo));
                      RunPageLink=Job No.=FIELD(Project No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=CreditMemo;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 //ITERO.PR RFC-013-2
                               END;
                                }
      { 1100285102;2 ;Action    ;
                      Name=<Action1100285000>;
                      CaptionML=[ENU=ROT/RUT Reduction;
                                 SVE=ROT/RUT avdrag];
                      Promoted=Yes;
                      Image=AmountByPeriod;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ROTInformation@1100285000 : Record 11128101;
                                 ROTInformationPage@1100285001 : Page 11128101;
                               BEGIN
                                 // Check if there is any ROT related to the current record
                                 ROTInformation.RESET();
                                 ROTInformation.SETRANGE(Type, ROTInformation.Type::Project);
                                 ROTInformation.SETRANGE("Document No.","Project No.");
                                 ROTInformation.SETRANGE("Project Principle",Principal);

                                 // Set the page view and open ROT Information page.
                                 ROTInformationPage.SETTABLEVIEW(ROTInformation);
                                 ROTInformationPage.RUN;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1210190000;1 ;Action    ;
                      CaptionML=[ENU=&Text;
                                 NOR=&Tekst;
                                 SVE=&Text];
                      Promoted=Yes;
                      Image=SNInfo;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CurrPage.SheetLineSF.PAGE.EditText;
                               END;
                                }
      { 1210190001;1 ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 NOR=Fu&nksjon;
                                 SVE=F&unktioner] }
      { 1100525500;2 ;Action    ;
                      CaptionML=[ENU=Get Open Purchase Order Lines;
                                 NOR=Hente †pne Kj›psordrerader;
                                 SVE=H„mta ”ppna ink”psorderrader];
                      Image=GetLines;
                      OnAction=VAR
                                 JobPurchFrm@1100525501 : Page 11020267;
                                 PurchaseLineRec@1100525500 : Record 39;
                               BEGIN
                                 PurchaseLineRec.SETRANGE("Job No.","Project No.");
                                 PurchaseLineRec.SETRANGE("Document Type", PurchaseLineRec."Document Type"::Order);
                                 JobPurchFrm.LOOKUPMODE := TRUE;
                                 JobPurchFrm.SetSelection(DATABASE::"Project Cost Plus Entry","Project No.",Principal,"Commission No.","No.");
                                 JobPurchFrm.SETTABLEVIEW(PurchaseLineRec);
                                 JobPurchFrm.RUNMODAL;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1100525502;2 ;Action    ;
                      CaptionML=[ENU=Get Open Hour Lines;
                                 NOR=Hente †pne timerader;
                                 SVE=H„mta ”ppna timrader];
                      Image=GetEntries;
                      OnAction=VAR
                                 HourLineRec@1100525506 : Record 11012039;
                                 HourLineFrm@1100525505 : Page 11012277;
                                 ProjSetup@1100525504 : Record 315;
                                 ProjRec@1100525503 : Record 11072003;
                                 lvCopyPerm@1100525502 : Boolean;
                               BEGIN
                                 ProjSetup.GET;
                                 ProjRec.GET("Project No.");
                                 IF ProjRec."Small Project" THEN
                                   lvCopyPerm := (ProjSetup."Small Project Cost Plus Hours" = ProjSetup."Small Project Cost Plus Hours"::"All Hours")
                                 ELSE
                                   lvCopyPerm := (ProjSetup."Project Cost Plus Hours from" = ProjSetup."Project Cost Plus Hours from"::"All Hours");

                                 HourLineRec.SETRANGE("Project No.", "Project No.");
                                 IF lvCopyPerm THEN
                                   HourLineFrm.SetSelection(DATABASE::"Project Cost Plus Entry", "Project No.", Principal, "Commission No.", "No.", FALSE);
                                 HourLineFrm.SETTABLEVIEW(HourLineRec);
                                 HourLineFrm.RUNMODAL();
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100525005;2 ;Action    ;
                      CaptionML=ENU=Generate Cost Plus Entries (Job Entry);
                      Image=SelectEntries;
                      OnAction=BEGIN
                                 CurrPage.SheetLineSF.PAGE.GetProjectEntry("Project No.", Principal, "Commission No.", "No.");  //DP00887
                               END;
                                }
      { 1210190006;2 ;Action    ;
                      CaptionML=[ENU=Generate Cost Plus Entries (Estimate);
                                 NOR=Generer rapporterte selvkoster (kalkyle);
                                 SVE=Generera redovisade sj„lvkostnader (kalkyl)];
                      Image=CreateLinesFromJob;
                      OnAction=BEGIN
                                 CurrPage.SheetLineSF.PAGE.CreateProjectCostPlusEntries(Rec);
                               END;
                                }
      { 1100485008;2 ;Action    ;
                      CaptionML=[ENU=Set Cost Plus Entries to Processed;
                                 NOR=Still inn Rapporterte Egenkoster til Behandlet;
                                 SVE=St„ll in redovisade sj„lvkostnader p† behandlat];
                      Image=SetupList;
                      OnAction=BEGIN
                                 //SetCPEntriesProcessed(); // 34599.o
                                 CurrPage.SheetLineSF.PAGE.SetProcessed;  // 34599.n
                               END;
                                }
      { 1100525001;2 ;Action    ;
                      CaptionML=[ENU=Get Project Cost Plus Sur&charge Lines;
                                 NOR=Hente tilleggsgebyrsrader for &prosjekt med selvkost;
                                 SVE=H„mta rader med till„ggsavgifter f”r &Projekt med sj„lvkostnad];
                      Image=GetStandardJournal;
                      OnAction=BEGIN
                                 CreateSurchargeLines;
                               END;
                                }
      { 1100285100;2 ;Action    ;
                      CaptionML=[ENU=Get Credit Memos Lines;
                                 SVE=H„mta krediterade rader];
                      Image=GetStandardJournal;
                      OnAction=VAR
                                 lvCredMemoLines@1100285100 : Record 115;
                                 lvProjCostPlusEntry@1100285101 : Record 11012019;
                                 NextLine@1100285102 : Integer;
                                 lvSettleSheet@1100285103 : Record 11012021;
                               BEGIN
                                 lvCredMemoLines.SETRANGE("Job No.","Project No.");
                                 lvCredMemoLines.SETRANGE("Sell-to Customer No.",Principal);
                                 //lvCredMemoLines.SETRANGE("Settl.Sheet No.","No.");
                                 //lvCredMemoLines.SETRANGE("Commission No.","Commission No.");
                                 //>>IME424x
                                 //IF lvCredMemoLines.FINDFIRST THEN BEGIN
                                 IF lvCredMemoLines.FINDSET(FALSE) THEN BEGIN
                                 //<<IME424x
                                   lvProjCostPlusEntry.SETRANGE("Project No.","Project No.");
                                   lvProjCostPlusEntry.SETRANGE(Principal,Principal);
                                   lvProjCostPlusEntry.SETRANGE("Commission No.","Commission No.");
                                   lvProjCostPlusEntry.SETRANGE("Settl.Sheet No.","No.");
                                   IF lvProjCostPlusEntry.FINDLAST THEN BEGIN
                                     NextLine := lvProjCostPlusEntry."Line No." + 10000;
                                   END ELSE BEGIN
                                     NextLine := 10000;
                                   END;
                                   CLEAR(lvProjCostPlusEntry);
                                   REPEAT
                                     lvProjCostPlusEntry.INIT;
                                     lvProjCostPlusEntry.VALIDATE("Project No.","Project No.");
                                     lvProjCostPlusEntry.VALIDATE(Principal,Principal);
                                     lvProjCostPlusEntry.VALIDATE("Commission No.",lvCredMemoLines."Commission No.");
                                     lvProjCostPlusEntry.VALIDATE("Settl.Sheet No.","No.");
                                     lvProjCostPlusEntry."Line No." := NextLine;
                                     NextLine := NextLine + 10000;
                                     lvProjCostPlusEntry.VALIDATE("Cost Object",lvCredMemoLines."Cost Object Cost Plus Line");
                                     IF lvCredMemoLines."Trade Item"<>'' THEN BEGIN
                                       lvProjCostPlusEntry.VALIDATE("Vendor (Trade Item)",lvCredMemoLines."Vendor (Trade Item)");
                                       lvProjCostPlusEntry.VALIDATE("Trade Item",lvCredMemoLines."Trade Item");
                                     END;
                                     IF lvCredMemoLines."Item No."<>'' THEN
                                       lvProjCostPlusEntry.VALIDATE("Item No.",lvCredMemoLines."Item No.");
                                     lvProjCostPlusEntry.SETRANGE("Unit of Measure",lvCredMemoLines."Unit of Measure Code");
                                     lvProjCostPlusEntry.Description := lvCredMemoLines.Description;
                                     lvProjCostPlusEntry.VALIDATE(Quantity,lvCredMemoLines.Quantity);
                                     lvProjCostPlusEntry.VALIDATE("Gross Price (LCY)",lvCredMemoLines."Gross Price");
                                     lvProjCostPlusEntry.VALIDATE("Basic Price (LCY)",lvCredMemoLines."Basic Price");
                                     lvProjCostPlusEntry.VALIDATE("Surcharge %",lvCredMemoLines."Surcharge %");
                                     lvProjCostPlusEntry.VALIDATE("Surcharge Amount (LCY)",lvCredMemoLines."Surcharge Amount");

                                     lvProjCostPlusEntry.VALIDATE("Sales Price (LCY)",lvCredMemoLines."Sales Price");
                                     lvProjCostPlusEntry."Last Date Modified" := WORKDATE;     //?
                                     lvProjCostPlusEntry."Creation Date" := WORKDATE;
                                     //lvProjCostPlusEntry.VALIDATE("Cost Price",?);
                                     //lvProjCostPlusEntry.VALIDATE("Cost Amount",?);
                                     lvProjCostPlusEntry.INSERT;
                                   UNTIL lvCredMemoLines.NEXT = 0;
                                 END;
                               END;
                                }
      { 1100409000;2 ;Action    ;
                      CaptionML=[ENU=Update Description Cost Plus Entries;
                                 NOR=Oppdater beskrivelse for selvkosttransaksjoner;
                                 SVE=Uppdatera beskrivning (Cost Plus)];
                      Image=RefreshText;
                      OnAction=BEGIN
                                 CurrPage.SheetLineSF.PAGE.UpdateDescriptionCPE;  //db, 12-12-12: C002998
                               END;
                                }
      { 1100525009;2 ;ActionGroup;
                      CaptionML=[ENU=Calculate;
                                 NOR=Beregn;
                                 SVE=Ber„kna];
                      Image=CostAccounting }
      { 1100485015;3 ;Action    ;
                      ShortCutKey=Shift+Ctrl+S;
                      CaptionML=[ENU=Calculate &Surcharge;
                                 NOR=Beregn &tilleggsgebyr;
                                 SVE=Ber„kna &till„ggsavgift];
                      Image=Calculate;
                      OnAction=VAR
                                 CostPlusRec@1100485000 : Record 11012019;
                               BEGIN
                                 CostPlusRec.CalcSurcharge("Project No.", Principal, "Commission No.", "No.");
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100485005;3 ;Action    ;
                      ShortCutKey=Shift+Ctrl+R;
                      CaptionML=[ENU=Calculate Removal Contribution;
                                 NOR=Beregn Fjerningsbidrag;
                                 SVE=Ber„kna borttagningsbidrag];
                      Image=RemoveLine;
                      OnAction=VAR
                                 CostPlusRec@1100485000 : Record 11012019;
                               BEGIN
                                 CostPlusRec."Project No." := "Project No.";
                                 CostPlusRec.Principal := Principal;
                                 CostPlusRec."Commission No." := "Commission No.";
                                 CostPlusRec."Settl.Sheet No." := "No.";
                                 CostPlusRec.DetermineRemovalContribution;
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100525006;3 ;Action    ;
                      ShortCutKey=Shift+Ctrl+T;
                      CaptionML=[ENU=Calculate &Travel Cost;
                                 NOR=Beregn &Reisekost;
                                 SVE=Ber„kna &resekostnad];
                      Image=Delivery;
                      OnAction=VAR
                                 CostPlusRec@1100525000 : Record 11012019;
                               BEGIN
                                 CostPlusRec."Project No." := "Project No.";
                                 CostPlusRec.Principal := Principal;
                                 CostPlusRec."Commission No." := "Commission No.";
                                 CostPlusRec."Settl.Sheet No." := "No.";
                                 CostPlusRec.CheckTravelData;
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1100525000;2 ;Action    ;
                      CaptionML=[ENU=Release Cost Plus Entries;
                                 NOR=Frigi Rapporterte Egenkoster;
                                 SVE=Sl„pp redovisade sj„lvkostnader];
                      Promoted=Yes;
                      Image=Approve;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CurrPage.SheetLineSF.PAGE.SetChargeable;  // 34599.n
                               END;
                                }
      { 1100527000;2 ;Action    ;
                      CaptionML=ENU=Put Cost Plus Entries on Not Chargeable;
                      Promoted=Yes;
                      Image=Undo;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CurrPage.SheetLineSF.PAGE.SetNotChargeable;
                               END;
                                }
      { 1100485009;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Create Invoice;
                                 NOR=Opprette faktura;
                                 SVE=Skapa faktura];
                      Promoted=Yes;
                      Image=CreateJobSalesInvoice;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Job@1210190002 : Record 11072003;
                                 Commission@1100485000 : Record 11012020;
                                 ProjectPrincipal@1100485001 : Record 11012005;
                                 ProjectCostPlusEntry@1100527300 : Record 11012019;
                               BEGIN
                                 Commission.GET("Project No.", Principal, "Commission No.");
                                 Commission.TESTFIELD("Collect Cost Plus Lines By", Commission."Collect Cost Plus Lines By"::"Settlement Sheet");

                                 //RFC085
                                 CheckMarginsByLine(Rec);
                                 Job.GET("Project No.");
                                 Job.SETRECFILTER;
                                 ProjectPrincipal.SETRANGE(Principal,Principal);

                                 ProjectCostPlusEntry.SETRANGE("Project No.", "Project No.");
                                 ProjectCostPlusEntry.SETRANGE(Principal, Principal);
                                 ProjectCostPlusEntry.SETRANGE("Commission No.", "Commission No.");
                                 ProjectCostPlusEntry.SETRANGE("Settl.Sheet No.", "No.");

                                 Job.CreateInvoicesFromSettlementSheet(Job,ProjectPrincipal,ProjectCostPlusEntry);

                                 CurrPage.SheetLineSF.PAGE.UpdateForm();
                               END;
                                }
      { 1100528202;2 ;Action    ;
                      CaptionML=[ENU=Create Collective List;
                                 NOR=Opprett samlingsfaktura;
                                 SVE=Skapa samlingsfaktura];
                      Image=ApplyEntries;
                      OnAction=BEGIN
                                 CreateCollectiveListPerSettlem();
                               END;
                                }
      { 16      ;1   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=&Print;
                                 NOR=Skriv &ut;
                                 SVE=Skriv &ut];
                      Promoted=Yes;
                      Image=Print;
                      PromotedCategory=Report;
                      OnAction=VAR
                                 PrintDoc@1210190001 : Codeunit 229;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(SettlRec);
                                 PrintDoc.PrintProjCostPlus(SettlRec);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           NOR=Generell;
                           SVE=Allm„nt];
                GroupType=Group }

    { 2   ;2   ;Field     ;
                SourceExpr="No." }

    { 4   ;2   ;Field     ;
                SourceExpr=Description;
                OnValidate=BEGIN
                             DescriptionOnAfterValidate;
                           END;
                            }

    { 6   ;2   ;Field     ;
                SourceExpr=Status }

    { 1100485001;2;Field  ;
                SourceExpr="Order No. Customer" }

    { 1100485011;2;Field  ;
                SourceExpr="Commision Date Principal" }

    { 1100528200;2;Field  ;
                SourceExpr="Collective List No." }

    { 8   ;2   ;Field     ;
                SourceExpr=Text;
                Importance=Additional;
                MultiLine=Yes }

    { 1100485006;2;Field  ;
                SourceExpr=["Hash Total" ] }

    { 1210190003;2;Field  ;
                SourceExpr="Reference Date";
                OnValidate=BEGIN
                             ReferenceDateOnAfterValidate;
                           END;
                            }

    { 1100525010;2;Field  ;
                SourceExpr="Expected Invoice Date";
                Importance=Additional }

    { 1100525004;2;Field  ;
                SourceExpr="Date Last Status Change";
                Importance=Additional }

    { 10  ;1   ;Part      ;
                Name=SheetLineSF;
                SubPageLink=Project No.=FIELD(Project No.),
                            Principal=FIELD(Principal),
                            Commission No.=FIELD(Commission No.),
                            Settl.Sheet No.=FIELD(No.);
                PagePartID=Page11012048;
                Editable=SheetLineSFEditable }

    { 1210190002;0;Container;
                ContainerType=FactBoxArea }

    { 1100529900;1;Part   ;
                Name=RegisterExternalDocumentFB;
                PagePartID=Page11125053;
                PartType=Page }

    { 1100525002;1;Part   ;
                SubPageLink=Project No.=FIELD(Project No.),
                            Principal=FIELD(Principal),
                            Commission No.=FIELD(Commission No.);
                PagePartID=Page11130000;
                PartType=Page }

    { 1210190004;1;Part   ;
                SubPageLink=Project No.=FIELD(Project No.),
                            Principal=FIELD(Principal),
                            Commission No.=FIELD(Commission No.),
                            No.=FIELD(No.);
                PagePartID=Page11130119;
                PartType=Page }

    { 1210190005;1;Part   ;
                SubPageLink=Project No.=FIELD(Project No.),
                            Principal=FIELD(Principal),
                            Commission No.=FIELD(Commission No.),
                            Settl.Sheet No.=FIELD(Settl.Sheet No.),
                            Line No.=FIELD(Line No.);
                PagePartID=Page11130116;
                ProviderID=10;
                PartType=Page }

    { 3   ;1   ;Part      ;
                SubPageLink=Project No.=FIELD(Project No.),
                            Principal=FIELD(Principal),
                            Commission No.=FIELD(Commission No.),
                            Settl.Sheet No.=FIELD(Settl.Sheet No.),
                            Line No.=FIELD(Line No.);
                PagePartID=Page11128045;
                ProviderID=10;
                PartType=Page }

    { 1100525008;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1100525007;1;Part   ;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      SettlRec@1100485000 : Record 11012021;
      CostPlusRec@1100525000 : Record 11012019;
      SheetLineSFEditable@19032568 : Boolean INDATASET;
      PassDatabetweenPages@1100527650 : Codeunit 11012634;

    PROCEDURE SetSubformEditable@1100525001();
    VAR
      lvCostPlusRec@1100525000 : Record 11012019;
    BEGIN
      lvCostPlusRec."Project No." := "Project No.";
      SheetLineSFEditable := lvCostPlusRec.CheckModifyAllowed(FALSE);
    END;

    LOCAL PROCEDURE DescriptionOnAfterValidate@19030973();
    BEGIN
      IF ("Project No." <> '') AND (Principal <> '') AND ("Commission No." <> '') AND ("No." <> '') THEN BEGIN
        IF NOT SettlRec.GET("Project No.", Principal, "Commission No.") THEN
          CurrPage.UPDATE;
      END;
    END;

    LOCAL PROCEDURE ReferenceDateOnAfterValidate@19033250();
    BEGIN
      CurrPage.UPDATE;
    END;

    PROCEDURE GetProjectEntry@1100485004(IProjectNo@1100485003 : Code[20];IPrincipalNo@1100485002 : Code[20];ICommisionNo@1100485001 : Code[20];ISettlSheetNo@1100485000 : Code[10]);
    VAR
      lvProjRec@1100485008 : Record 11072003;
      lvProjLedgEntryRec@1100485007 : Record 11072005;
      lvPostedHourLineRec@1100485006 : Record 11012085;
      lvHourAccLineRec@1100485005 : Record 11012039;
      lvCreateCostPlusRpt@1100485004 : Report 11012013;
      Text0001@1100285300 : TextConst 'ENU=Create cost plus entries?;SVE=Generera redovisad sj„lvkostnad?';
      JobsSetup@1101285000 : Record 315;
    BEGIN
      //>>170823, pure274753
      IF (IProjectNo='') OR (IPrincipalNo='') OR (ICommisionNo='') OR (ISettlSheetNo='') THEN
        EXIT;
      //<<274753
      JobsSetup.GET;
      IF NOT JobsSetup.GetProjEntrySettlementSheet THEN
        EXIT;
      //>>160226 ITERO.SB Create cost plus entries when open page (Radiator rfc-182)
      lvProjRec.SETRANGE("No.", IProjectNo);
      lvProjLedgEntryRec.SETRANGE("Job No.", IProjectNo); //Call 17014
      lvProjLedgEntryRec.SETRANGE("Cost Plus Entry Created", FALSE);
      lvPostedHourLineRec.SETRANGE("Project No.", IProjectNo); //Call 17014
      lvPostedHourLineRec.SETRANGE("Cost Plus Entry Created", FALSE);
      lvHourAccLineRec.SETRANGE("Project No.", IProjectNo); //Call 17014
      lvHourAccLineRec.SETRANGE("Cost Plus Entry Created", FALSE);
      //>>170915 ITERO.FH
      //IF (NOT lvProjLedgEntryRec.ISEMPTY) OR (NOT lvPostedHourLineRec.ISEMPTY) OR (NOT lvHourAccLineRec.ISEMPTY) THEN BEGIN
        IF ((NOT lvProjLedgEntryRec.ISEMPTY) OR (NOT lvPostedHourLineRec.ISEMPTY) OR (NOT lvHourAccLineRec.ISEMPTY)) AND (lvProjRec."Settlement Method" <> lvProjRec."Settlement Method"::"Fixed Price") THEN BEGIN
      //<<170915 ITERO.FH
        IF CONFIRM(Text0001) THEN BEGIN
          lvCreateCostPlusRpt.SETTABLEVIEW(lvProjRec);
          lvCreateCostPlusRpt.SETTABLEVIEW(lvProjLedgEntryRec);
          lvCreateCostPlusRpt.SETTABLEVIEW(lvPostedHourLineRec);
          lvCreateCostPlusRpt.SETTABLEVIEW(lvHourAccLineRec);
          lvCreateCostPlusRpt.SetSelection(IProjectNo,IPrincipalNo,ICommisionNo,ISettlSheetNo);
          lvCreateCostPlusRpt.RUNMODAL;

          CurrPage.UPDATE(TRUE);
        END;
      END;
      //<<
    END;

    BEGIN
    {
      ITERO.PR RFC-013-2 New Page Action - Sales Invoice List - Proforma Invoice
      ITERO.PR RFC-020 New Page Action - Get Credit Memos Lines
      151211 ITERO.DL RFC085 warning if wrong pricelist is used or missing
      160226 ITERO.SB Create cost plus entries when open page (Radiator rfc-182)
      160229 ITERO.DL IME424x repace 'findfirst then repeat' (causes locking) with 'findset(false) then repeat'
      170512 ITERO.DL RFC188 new button for ROT/RUT
      170823 ITERO.DL pure274753 Unable to create new settlement sheet
      170829 ITERO.DL pure274753 new field 'GetProjEntrySettlementSheet' by setup
      170915 ITERO.FH pure276590 Removed Cost plus question if Job Settlement Method is Fixed Price
      180108 ORANGO.SB RFC-1151 Added action, Page Sales Credit Memos
    }
    END.
  }
}

