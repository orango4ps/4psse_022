OBJECT Table 11020376 Sales Price Read Order Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Sales Price Read Order Line;
               NOR=Salgspris for Leseordrerad;
               SVE=F”rs„ljningspris f”r repetitionsorderrad];
  }
  FIELDS
  {
    { 10  ;   ;Price Type          ;Option        ;CaptionML=[ENU=Price Type;
                                                              NOR=Pristype;
                                                              SVE=Pristyp];
                                                   OptionCaptionML=ENU=Project,Service,,Plant,Customer (Request);
                                                   OptionString=Project,Service,,Plant,CustomerRequest }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 30  ;   ;Read Order          ;Integer       ;OnValidate=BEGIN
                                                                IF "Read Order" > 0 THEN BEGIN
                                                                  SalesPriceReadOrderLine.RESET;
                                                                  SalesPriceReadOrderLine.SETCURRENTKEY("Price Type", "Read Order");
                                                                  SalesPriceReadOrderLine.SETRANGE("Price Type", "Price Type");
                                                                  SalesPriceReadOrderLine.SETRANGE("Read Order", "Read Order");
                                                                  SalesPriceReadOrderLine.SETFILTER("Line No.",'<>%1', "Line No.");
                                                                  IF SalesPriceReadOrderLine.FINDFIRST THEN
                                                                    ERROR(Text001, FIELDCAPTION("Read Order"), "Read Order");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Read Order;
                                                              NOR=Les Ordre;
                                                              SVE=L„sorder];
                                                   BlankZero=Yes }
    { 40  ;   ;Table No.           ;Integer       ;CaptionML=[ENU=Table No.;
                                                              NOR=Tabellnr;
                                                              SVE=Tabellnr] }
    { 50  ;   ;Sales Price Table   ;Text249       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Table),
                                                                                                                Object ID=FIELD(Table No.)));
                                                   CaptionML=[ENU=Sales Price Table;
                                                              NOR=Salgspristabell;
                                                              SVE=F”rs„ljningspristabell];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Price Type,Line No.                     ;Clustered=Yes }
    {    ;Price Type,Read Order                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ServSetup@1100485003 : Record 11012800;
      PlantSetup@1100529000 : Record 11012550;
      SalesPriceReadOrderLine@1100485000 : Record 11020376;
      Text001@1100485001 : TextConst 'ENU=%1 %2 may only be used once.;NOR=%1 %2 kan kun brukes en g†ng.;SVE=%1 %2 kan endast anv„ndas en g†ng.';
      Text002@1100485005 : TextConst 'ENU=Table %1 is not involved in a Sales Price Read Order.;NOR=Tabell %1 er ikke involvert i Slagspris for Leseordre.;SVE=Tabell %1 „r inte inblandad i f”rs-pris f”r repetitionsorder.';
      FPSLicenseManagement@1100527400 : Codeunit 11229289;

    PROCEDURE CreateReadOrderLines@1100485000(Initialize@1100485000 : Boolean);
    VAR
      ResourcePlanningSetup@1100529004 : Record 11124900;
      lReadOrderLine@1100485003 : Record 11020376;
      lPriceType@1100485001 : 'Project,Service';
      lNewReadOrder@1100485002 : Integer;
      InitializeProject@1100529000 : Boolean;
      InitializeService@1100529001 : Boolean;
      InitializePlant@1100529002 : Boolean;
      InitializeCustomerRequest@1100529003 : Boolean;
    BEGIN
      IF Initialize THEN
        lReadOrderLine.DELETEALL
      ELSE BEGIN
        //Initialize := lReadOrderLine.ISEMPTY;
        lReadOrderLine.SETRANGE("Price Type", "Price Type"::Project);
        InitializeProject := lReadOrderLine.ISEMPTY;
        lReadOrderLine.SETRANGE("Price Type", "Price Type"::Service);
        InitializeService := lReadOrderLine.ISEMPTY;
        lReadOrderLine.SETRANGE("Price Type", "Price Type"::Plant);
        InitializePlant := lReadOrderLine.ISEMPTY;
        lReadOrderLine.SETRANGE("Price Type", "Price Type"::CustomerRequest);
        InitializeCustomerRequest := lReadOrderLine.ISEMPTY;
      END;

      //Project
      lPriceType := lPriceType::Project;
      CreateReadOrderLine(lPriceType,DATABASE::"Exceptional Sales Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Proj - Empl - C -Wage S. Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Proj - Empl - Cost Ob S. Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Project - Employee Sales Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Proj - Cost Ob - Wage S. Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Proj - Cost Object Sales Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Proj - Princ - Cost O S. Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Cust - Empl - C -Wage S. Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Cust - Empl - Cost Ob S. Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Cust - Employee Sales Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Cust - Cost Obj -Wage S. Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Cust - Cost Object Sales Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Project Principal Hour Rate");
      CreateReadOrderLine(lPriceType,DATABASE::"Customer Hour Rate");
      CreateReadOrderLine(lPriceType,DATABASE::"Empl - Cost Obj -Wage S. Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Empl - Cost Object Sales Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Hour Rate");
      CreateReadOrderLine(lPriceType,DATABASE::"Cost Obj - Wage Comp. S. Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Cost Object Sales Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Cost Price Read Order Line");
      CreateReadOrderLine(lPriceType,DATABASE::"Discipline Sales Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Customer - Discipline S. Price");
      CreateReadOrderLine(lPriceType,DATABASE::"Employee - Discipline S. Price");

      //Service
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServSetup) THEN BEGIN
        lPriceType := lPriceType::Service;
        CreateReadOrderLine(lPriceType,DATABASE::"Exceptional Sales Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Serv - Empl - C -Wage S. Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Serv - Empl - Cost - S. Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Serv - Employee - Sales Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Serv - Cost Obj -Wage S. Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Serv - Cost Object Sales Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Cust - Empl - C -Wage S. Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Cust - Empl - Cost Ob S. Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Cust - Employee Sales Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Cust - Cost Obj -Wage S. Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Cust - Cost Object Sales Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Service Contract Hour Rate");
        CreateReadOrderLine(lPriceType,DATABASE::"Customer Hour Rate");
        CreateReadOrderLine(lPriceType,DATABASE::"Empl - Cost Obj -Wage S. Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Empl - Cost Object Sales Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Hour Rate");
        CreateReadOrderLine(lPriceType,DATABASE::"Cost Obj - Wage Comp. S. Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Cost Object Sales Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Cost Price Read Order Line");
        CreateReadOrderLine(lPriceType,DATABASE::"Customer Price Group Hour Rate");
        CreateReadOrderLine(lPriceType,DATABASE::"Discipline Sales Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Customer - Discipline S. Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Employee - Discipline S. Price");
      END;

      //Plant (DP00812)
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(PlantSetup) THEN BEGIN
        lPriceType := "Price Type"::Plant;
        CreateReadOrderLine(lPriceType,DATABASE::"Plant Exceptional Sales Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Trade Association Cost Price");
      END;

      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ResourcePlanningSetup) THEN BEGIN
        lPriceType := "Price Type"::CustomerRequest;
        CreateReadOrderLine(lPriceType,DATABASE::"Discipline Sales Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Customer - Discipline S. Price");
        CreateReadOrderLine(lPriceType,DATABASE::"Employee - Discipline S. Price");
      END;

      //IF NOT Initialize THEN
      //  EXIT;

      //Init Project
      IF Initialize OR InitializeProject THEN BEGIN
        lPriceType := lPriceType::Project;
        lNewReadOrder := 1;
        WriteInitialReadOrder(lPriceType,DATABASE::"Proj - Princ - Cost O S. Price", lNewReadOrder);
        WriteInitialReadOrder(lPriceType,DATABASE::"Cust - Cost Object Sales Price", lNewReadOrder);
        WriteInitialReadOrder(lPriceType,DATABASE::"Project Principal Hour Rate", lNewReadOrder);
        WriteInitialReadOrder(lPriceType,DATABASE::"Customer Hour Rate", lNewReadOrder);
        WriteInitialReadOrder(lPriceType,DATABASE::"Hour Rate", lNewReadOrder);
        WriteInitialReadOrder(lPriceType,DATABASE::"Cost Object Sales Price", lNewReadOrder);
        WriteInitialReadOrder(lPriceType,DATABASE::"Cost Price Read Order Line", lNewReadOrder);
      END;

      //Init Service
      IF Initialize OR InitializeService THEN BEGIN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServSetup) THEN BEGIN
          lPriceType := lPriceType::Service;
          lNewReadOrder := 1;
          WriteInitialReadOrder(lPriceType,DATABASE::"Cust - Cost Object Sales Price", lNewReadOrder);
          WriteInitialReadOrder(lPriceType,DATABASE::"Service Contract Hour Rate", lNewReadOrder);
          WriteInitialReadOrder(lPriceType,DATABASE::"Customer Hour Rate", lNewReadOrder);
          WriteInitialReadOrder(lPriceType,DATABASE::"Customer Price Group Hour Rate", lNewReadOrder);
          WriteInitialReadOrder(lPriceType,DATABASE::"Hour Rate", lNewReadOrder);
          WriteInitialReadOrder(lPriceType,DATABASE::"Cost Object Sales Price", lNewReadOrder);
          WriteInitialReadOrder(lPriceType,DATABASE::"Cost Price Read Order Line", lNewReadOrder);
        END;
      END;

      //Init Plant (DP00812)
      IF Initialize OR InitializePlant THEN BEGIN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(PlantSetup) THEN BEGIN
          lPriceType := "Price Type"::Plant;
          lNewReadOrder := 1;
          WriteInitialReadOrder(lPriceType,DATABASE::"Trade Association Cost Price", lNewReadOrder);
        END;
      END;

      IF Initialize OR InitializeCustomerRequest THEN BEGIN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ResourcePlanningSetup) THEN BEGIN
          lPriceType := "Price Type"::CustomerRequest;
          lNewReadOrder := 1;
          WriteInitialReadOrder(lPriceType,DATABASE::"Discipline Sales Price", lNewReadOrder);
        END;
      END;
    END;

    PROCEDURE CreateReadOrderLine@1100485001(PriceType@1100485001 : Option;TableNo@1100485002 : Integer);
    VAR
      lReadOrderLine@1100485000 : Record 11020376;
      lLineNo@1100485004 : Integer;
    BEGIN
      WITH lReadOrderLine DO BEGIN
        SETRANGE("Price Type", PriceType);
        IF FINDLAST THEN
          lLineNo := "Line No." + 1
        ELSE
          lLineNo := 1;

        SETRANGE("Table No.", TableNo);
        IF FINDFIRST THEN
          EXIT;

        INIT;
        "Price Type" := PriceType;
        "Line No." := lLineNo;
        "Table No." := TableNo;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE WriteInitialReadOrder@1100485008(PriceType@1100485002 : Option;TableNo@1100485001 : Integer;VAR vNewReadOrder@1100485003 : Integer);
    VAR
      lReadOrderLine@1100485000 : Record 11020376;
    BEGIN
      WITH lReadOrderLine DO BEGIN
        SETRANGE("Price Type", PriceType);
        SETRANGE("Table No.", TableNo);
        FINDFIRST;
        IF "Read Order" = 0 THEN BEGIN
          "Read Order" := vNewReadOrder;
          MODIFY;
          vNewReadOrder := vNewReadOrder + 1;
        END;
      END;
    END;

    PROCEDURE EditSalesPrices@1100485005();
    VAR
      lExceptionalSalesPriceRec@1100485020 : Record 11020388;
      lProjEmplCostObjWagePriceRec@1100485019 : Record 11020387;
      lProjEmplCostObjSalesPriceRec@1100485018 : Record 11020386;
      lProjEmplSalesPriceRec@1100485017 : Record 11020385;
      lProjCostObjWageSalesPriceRec@1100485016 : Record 11020384;
      lProjCostObjSalesPriceRec@1100485015 : Record 11020383;
      lProjPrincCostObjSalesPriceRec@1100485014 : Record 11020255;
      lCustEmplCostObjWagePriceRec@1100485013 : Record 11020382;
      lCustEmplCostObjSalesPriceRec@1100485012 : Record 11020381;
      lCustEmplSalesPriceRec@1100485011 : Record 11020380;
      lCustCostObjWageSalesPriceRec@1100485010 : Record 11020379;
      lCustCostObjSalesPriceRec@1100485009 : Record 11012080;
      lProjPrincHourRateRec@1100485008 : Record 11012024;
      lCustHourRateRec@1100485007 : Record 11012023;
      lEmplCostObjWageSalesPriceRec@1100485006 : Record 11020378;
      lEmplCostObjSalesPriceRec@1100485005 : Record 11020377;
      lHourRateRec@1100485004 : Record 11012022;
      lServEmplCostObjWagePriceRec@1100485003 : Record 11020331;
      lServEmplCostObjSalesPriceRec@1100485002 : Record 11020330;
      lServEmplSalesPriceRec@1100485001 : Record 11020329;
      lServCostObjWageSalesPriceRec@1100485000 : Record 11020328;
      lServCostObjSalesPriceRec@1100485021 : Record 11020327;
      lServHourRateRec@1100485022 : Record 11012815;
      CostObjWageCompSalesPrice@1210190000 : Record 11020658;
      lCostObjSalesPriceRec@1100485023 : Record 11020351;
      lDepartmentHourRate@1100528600 : Record 11071896;
      lDepartmentCustomerHourRate@1100528601 : Record 11071897;
      lCustomerPriceGroupHourRate@1100528602 : Record 11229790;
      PlantExceptionalSalesPrice@1100529000 : Record 11229881;
      TradeAssociationCostPrices@1100529002 : Page 11020332;
      DisciplineSalesPrice@1100529004 : Record 11229343;
      CustomerDisciplineSPrice@1100529003 : Record 11229344;
      EmployeeDisciplineSPrice@1100529001 : Record 11229345;
      lCostObjCostCentSalesPrice@1100285101 : Record 11128043;
      lCostObjCostCentSalesPriceDisc@1100285100 : Record 11128044;
    BEGIN
      CASE "Table No." OF
        DATABASE::"Exceptional Sales Price": PAGE.RUNMODAL(0, lExceptionalSalesPriceRec);
        DATABASE::"Proj - Empl - C -Wage S. Price": PAGE.RUNMODAL(0, lProjEmplCostObjWagePriceRec);
        DATABASE::"Proj - Empl - Cost Ob S. Price": PAGE.RUNMODAL(0, lProjEmplCostObjSalesPriceRec);
        DATABASE::"Project - Employee Sales Price": PAGE.RUNMODAL(0, lProjEmplSalesPriceRec);
        DATABASE::"Proj - Cost Ob - Wage S. Price": PAGE.RUNMODAL(0, lProjCostObjWageSalesPriceRec);
        DATABASE::"Proj - Cost Object Sales Price": PAGE.RUNMODAL(0, lProjCostObjSalesPriceRec);
        DATABASE::"Proj - Princ - Cost O S. Price": PAGE.RUNMODAL(0, lProjPrincCostObjSalesPriceRec);
        DATABASE::"Cust - Empl - C -Wage S. Price": PAGE.RUNMODAL(0, lCustEmplCostObjWagePriceRec);
        DATABASE::"Cust - Empl - Cost Ob S. Price": PAGE.RUNMODAL(0, lCustEmplCostObjSalesPriceRec);
        DATABASE::"Cust - Employee Sales Price": PAGE.RUNMODAL(0, lCustEmplSalesPriceRec);
        DATABASE::"Cust - Cost Obj -Wage S. Price": PAGE.RUNMODAL(0, lCustCostObjWageSalesPriceRec);
        DATABASE::"Cust - Cost Object Sales Price": PAGE.RUNMODAL(0, lCustCostObjSalesPriceRec);
        DATABASE::"Project Principal Hour Rate": PAGE.RUNMODAL(0, lProjPrincHourRateRec);
        DATABASE::"Customer Hour Rate": PAGE.RUNMODAL(0, lCustHourRateRec);
        DATABASE::"Empl - Cost Obj -Wage S. Price": PAGE.RUNMODAL(0, lEmplCostObjWageSalesPriceRec);
        DATABASE::"Empl - Cost Object Sales Price": PAGE.RUNMODAL(0, lEmplCostObjSalesPriceRec);
        DATABASE::"Hour Rate": PAGE.RUNMODAL(PAGE::"Hour Rates", lHourRateRec);
        DATABASE::"Serv - Empl - C -Wage S. Price": PAGE.RUNMODAL(0, lServEmplCostObjWagePriceRec);
        DATABASE::"Serv - Empl - Cost - S. Price": PAGE.RUNMODAL(0, lServEmplCostObjSalesPriceRec);
        DATABASE::"Serv - Employee - Sales Price": PAGE.RUNMODAL(0, lServEmplSalesPriceRec);
        DATABASE::"Serv - Cost Obj -Wage S. Price": PAGE.RUNMODAL(0, lServCostObjWageSalesPriceRec);
        DATABASE::"Serv - Cost Object Sales Price": PAGE.RUNMODAL(0, lServCostObjSalesPriceRec);
        DATABASE::"Service Contract Hour Rate": PAGE.RUNMODAL(0, lServHourRateRec);
        DATABASE::"Cost Obj - Wage Comp. S. Price": PAGE.RUNMODAL(0, CostObjWageCompSalesPrice);
        DATABASE::"Cost Object Sales Price": PAGE.RUNMODAL(0, lCostObjSalesPriceRec);
        DATABASE::"Department Hour Rate": PAGE.RUNMODAL(0, lDepartmentHourRate);
        DATABASE::"Department Customer Hour Rate": PAGE.RUNMODAL(0, lDepartmentCustomerHourRate);
        DATABASE::"Customer Price Group Hour Rate": PAGE.RUNMODAL(0, lCustomerPriceGroupHourRate);
        DATABASE::"Plant Exceptional Sales Price": PAGE.RUNMODAL(0, PlantExceptionalSalesPrice);  //DP00812
        DATABASE::"Cost Obj Cost Cent Sales Price": PAGE.RUNMODAL(0,lCostObjCostCentSalesPrice); //ORANGO.PR 200520
        DATABASE::"Cost Obj Cust Sales Price/Disc": PAGE.RUNMODAL(0,lCostObjCostCentSalesPriceDisc); //ORANGO.PR 200520
        DATABASE::"Trade Association Cost Price":  //DP00812
          BEGIN
            TradeAssociationCostPrices.SetFromSalesPriceReadOrder();
            TradeAssociationCostPrices.RUNMODAL;
          END;
        DATABASE::"Discipline Sales Price": PAGE.RUNMODAL(0, DisciplineSalesPrice);
        DATABASE::"Customer - Discipline S. Price": PAGE.RUNMODAL(0, CustomerDisciplineSPrice);
        DATABASE::"Employee - Discipline S. Price": PAGE.RUNMODAL(0, EmployeeDisciplineSPrice);
      END;
    END;

    PROCEDURE CheckSalesPriceInReadOrder@1100485004(lTableNo@1100485000 : Integer);
    VAR
      lRecRef@1100485002 : RecordRef;
    BEGIN
      WITH SalesPriceReadOrderLine DO BEGIN
        RESET;
        SETFILTER("Read Order", '1..');
        SETRANGE("Table No.", lTableNo);
        IF ISEMPTY THEN BEGIN
          lRecRef.OPEN(lTableNo);
          MESSAGE(Text002, lRecRef.CAPTION);
        END;
      END;
    END;

    BEGIN
    {
      200520 ORANGO.PR Added Code in EditSalesPrices
    }
    END.
  }
}

