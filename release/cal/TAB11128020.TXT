OBJECT Table 11128020 Dimension Value Chains
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 480=ri;
    CaptionML=[ENU=Dimension Value Chains;
               NOR=Koblede dimensjoner;
               SVE=L„nkade dimensioner];
  }
  FIELDS
  {
    { 1   ;   ;Start Dimension Code;Code20        ;TableRelation=Dimension.Code;
                                                   CaptionML=[ENU=Dimension Code;
                                                              NOR=Dimensjonskode;
                                                              SVE=Dimensionskod];
                                                   NotBlank=Yes }
    { 2   ;   ;Start Dimension Value Code;Code20  ;TableRelation="Dimension Value".Code WHERE (Dimension Code=FIELD(Start Dimension Code));
                                                   CaptionML=[ENU=Dimension Value Code;
                                                              NOR=Dimensjonsverdikode;
                                                              SVE=Dimensionsv„rdekod];
                                                   NotBlank=Yes }
    { 3   ;   ;Next Dimension Code ;Code20        ;TableRelation="Dimension Chains Permitted Com"."Next Dimension Code" WHERE (Start Dimension Code=FIELD(Start Dimension Code));
                                                   CaptionML=[ENU=Connected Dimension Code;
                                                              NOR=Tilknyttet dimensjonskode;
                                                              SVE=L„nkad dimensionskod];
                                                   NotBlank=Yes }
    { 4   ;   ;Next Dimension Value Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Dimension Code=FIELD(Next Dimension Code));
                                                   OnValidate=BEGIN
                                                                //IF CheckForLoop("Start Dimension Code","Start Dimension Value Code") THEN ERROR('start Loop exits');
                                                                IF CheckForLoop("Next Dimension Code","Next Dimension Value Code") THEN ERROR('Loop exits');
                                                              END;

                                                   CaptionML=[ENU=Connected Dimension Value Code;
                                                              NOR=Tilknyttet dimensjonsverdi;
                                                              SVE=L„nkat dimensionsv„rde];
                                                   NotBlank=Yes }
  }
  KEYS
  {
    {    ;Start Dimension Code,Start Dimension Value Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE CheckForLoop@1100285000(SourceDimCode@1100285003 : Code[20];SourceDimValue@1100285002 : Code[20]) : Boolean;
    VAR
      DimValChain@1100285004 : Record 11128020;
      TargetDimCode@1100285001 : Code[20];
      TargetDimValue@1100285000 : Code[20];
    BEGIN


      IF NOT DimValChain.GET(SourceDimCode,SourceDimValue) THEN
        EXIT(FALSE);
      TargetDimCode  := DimValChain."Next Dimension Code";
      TargetDimValue := DimValChain."Next Dimension Value Code";

      REPEAT
        IF NOT DimValChain.GET(TargetDimCode,TargetDimValue) THEN
          EXIT(FALSE);
        TargetDimCode  := DimValChain."Next Dimension Code";
        TargetDimValue := DimValChain."Next Dimension Value Code";
      UNTIL ((TargetDimCode='') AND (TargetDimValue='')) OR ((TargetDimCode=SourceDimCode) AND (TargetDimValue=SourceDimValue));

      IF (TargetDimCode='') AND (TargetDimValue='') THEN
        EXIT(FALSE);

      IF (TargetDimCode=SourceDimCode) AND (TargetDimValue=SourceDimValue) THEN
        EXIT(TRUE);
    END;

    PROCEDURE GetDimNextInChain@1100285004(SourceDimCode@1100285001 : Code[20];SourceDimValue@1100285000 : Code[20];VAR TargetDimCode@1100285003 : Code[20];VAR TargetDimValue@1100285002 : Code[20]);
    VAR
      DimValChain@1100285004 : Record 11128020;
    BEGIN
      IF NOT DimValChain.GET(SourceDimCode,SourceDimValue) THEN BEGIN
        TargetDimCode  := '';
        TargetDimValue := '';
        EXIT;
      END;

      TargetDimCode  := DimValChain."Next Dimension Code";
      TargetDimValue := DimValChain."Next Dimension Value Code";
    END;

    LOCAL PROCEDURE GetChainJnlLineDim@1100285001();
    VAR
      DimValChain@1100285004 : Record 11128020;
      TargetDimCode@1100285003 : Code[20];
      TargetDimValue@1100285002 : Code[20];
      i@1100285005 : Integer;
    BEGIN
      {
      //GetChainJnlLineDim(VAR FromJnlLineDim : Record Table356;VAR ToJnlLineDim : Record Table356)
      i := ToJnlLineDim.COUNT;
      //called from cu408 CopyJnlLineDimToJnlLineDim(...)
      IF NOT DimValChain.GET(FromJnlLineDim."Dimension Code",FromJnlLineDim."Dimension Value Code") THEN
        EXIT;
      TargetDimCode  := DimValChain."Next Dimension Code";
      IF TargetDimCode = '' THEN EXIT;
      TargetDimValue := DimValChain."Next Dimension Value Code";
      ToJnlLineDim := FromJnlLineDim;
      ToJnlLineDim."Dimension Code" := TargetDimCode;
      ToJnlLineDim."Dimension Value Code" := TargetDimValue;
      IF ToJnlLineDim.INSERT THEN;

      i := ToJnlLineDim.COUNT;


      WHILE DimValChain.GET(TargetDimCode,TargetDimValue) DO BEGIN
        TargetDimCode  := DimValChain."Next Dimension Code";
        IF TargetDimCode = '' THEN EXIT;
        TargetDimValue := DimValChain."Next Dimension Value Code";
        ToJnlLineDim := FromJnlLineDim;
        ToJnlLineDim."Dimension Code" := TargetDimCode;
        ToJnlLineDim."Dimension Value Code" := TargetDimValue;
        IF ToJnlLineDim.INSERT THEN;
      END;
      }
    END;

    LOCAL PROCEDURE GetChainDocDimToJnlLineDim@1100285002();
    VAR
      DimValChain@1100285004 : Record 11128020;
      TargetDimCode@1100285003 : Code[20];
      TargetDimValue@1100285002 : Code[20];
    BEGIN
      {
      //GetChainDocDimToJnlLineDim(VAR FromJnlLineDim : Record Table357;VAR ToJnlLineDim : Record Table356)
      //called from cu408 CopyJnlLineDimToJnlLineDim(...)
      IF NOT DimValChain.GET(FromJnlLineDim."Dimension Code",FromJnlLineDim."Dimension Value Code") THEN
        EXIT;
      TargetDimCode  := DimValChain."Next Dimension Code";
      TargetDimValue := DimValChain."Next Dimension Value Code";
      IF TargetDimCode = '' THEN EXIT;

      ToJnlLineDim."Table ID" := FromJnlLineDim."Table ID";
      ToJnlLineDim."Dimension Code" := TargetDimCode;
      ToJnlLineDim."Dimension Value Code" := TargetDimValue;
      ToJnlLineDim."Receiving Company" := FromJnlLineDim."Receiving Company";  //**4PS.n
      IF ToJnlLineDim.INSERT THEN;

      WHILE DimValChain.GET(TargetDimCode,TargetDimValue) DO BEGIN
        TargetDimCode  := DimValChain."Next Dimension Code";
        TargetDimValue := DimValChain."Next Dimension Value Code";
        IF TargetDimCode = '' THEN EXIT;

        ToJnlLineDim."Table ID" := FromJnlLineDim."Table ID";
        ToJnlLineDim."Dimension Code" := TargetDimCode;
        ToJnlLineDim."Dimension Value Code" := TargetDimValue;
        ToJnlLineDim."Receiving Company" := FromJnlLineDim."Receiving Company";  //**4PS.n
        IF ToJnlLineDim.INSERT THEN;
      END;
      }
    END;

    LOCAL PROCEDURE GetChainDimBufToJnlLineDim@1100285003();
    VAR
      DimValChain@1100285004 : Record 11128020;
      TargetDimCode@1100285003 : Code[20];
      TargetDimValue@1100285002 : Code[20];
    BEGIN
      //GetChainDimBufToJnlLineDim(VAR FromJnlLineDim : Record "Dimension Buffer";VAR ToJnlLineDim : Record Table356;JnlTemplateName : Code[20];JnlBatchName : Code[20];JnlLineNo : Integer)
      //called from cu408 CopyJnlLineDimToJnlLineDim(...)
      {
      IF NOT DimValChain.GET(FromJnlLineDim."Dimension Code",FromJnlLineDim."Dimension Value Code") THEN
        EXIT;
      TargetDimCode  := DimValChain."Next Dimension Code";
      TargetDimValue := DimValChain."Next Dimension Value Code";
      IF TargetDimCode = '' THEN EXIT;

      ToJnlLineDim."Table ID" := FromJnlLineDim."Table ID";
      ToJnlLineDim."Journal Template Name" := JnlTemplateName;
      ToJnlLineDim."Journal Batch Name" := JnlBatchName;
      ToJnlLineDim."Journal Line No." := JnlLineNo;
      ToJnlLineDim."Dimension Code" := TargetDimCode;
      ToJnlLineDim."Dimension Value Code" := TargetDimValue;
      ToJnlLineDim."Receiving Company" := FromJnlLineDim."Receiving Company";  //**4PS.n
      IF ToJnlLineDim.INSERT THEN;

      WHILE DimValChain.GET(TargetDimCode,TargetDimValue) DO BEGIN
        TargetDimCode  := DimValChain."Next Dimension Code";
        TargetDimValue := DimValChain."Next Dimension Value Code";
        IF TargetDimCode = '' THEN EXIT;

        ToJnlLineDim."Table ID" := FromJnlLineDim."Table ID";
        ToJnlLineDim."Journal Template Name" := JnlTemplateName;
        ToJnlLineDim."Journal Batch Name" := JnlBatchName;
        ToJnlLineDim."Journal Line No." := JnlLineNo;
        ToJnlLineDim."Dimension Code" := TargetDimCode;
        ToJnlLineDim."Dimension Value Code" := TargetDimValue;
        ToJnlLineDim."Receiving Company" := FromJnlLineDim."Receiving Company";  //**4PS.n
        IF ToJnlLineDim.INSERT THEN;
      END;
      }
    END;

    PROCEDURE ExtendDimSet@1100285005(DimSetID@1100285000 : Integer);
    VAR
      DimensionSetEntry@1100285005 : Record 480;
      DimensionSetEntry2@1100285004 : Record 480;
      DimValChain@1100285003 : Record 11128020;
      TargetDimCode@1100285002 : Code[20];
      TargetDimValue@1100285001 : Code[20];
    BEGIN
      //called from record 17 - OnInsert
      IF DimSetID = 0 THEN
        EXIT;

      DimensionSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      IF DimensionSetEntry.ISEMPTY THEN
        EXIT;

      //key DimensionSetEntry
      //Dimension Set ID,Dimension Code

      IF DimensionSetEntry.FINDSET THEN
      REPEAT
        IF NOT DimValChain.GET(DimensionSetEntry."Dimension Code",DimensionSetEntry."Dimension Value Code") THEN
          EXIT;
        TargetDimCode  := DimValChain."Next Dimension Code";
        IF TargetDimCode = '' THEN EXIT;
        TargetDimValue := DimValChain."Next Dimension Value Code";
        SaveExtendDimSetLine(DimensionSetEntry, TargetDimCode, TargetDimValue);

        WHILE DimValChain.GET(TargetDimCode,TargetDimValue) DO BEGIN
          TargetDimCode  := DimValChain."Next Dimension Code";
          IF TargetDimCode = '' THEN EXIT;
          TargetDimValue := DimValChain."Next Dimension Value Code";
          SaveExtendDimSetLine(DimensionSetEntry, TargetDimCode, TargetDimValue);
        END;
      UNTIL DimensionSetEntry.NEXT=0;
    END;

    LOCAL PROCEDURE SaveExtendDimSetLine@1100285013(DimensionSetEntry@1100285004 : Record 480;TargetDimCode@1100285001 : Code[20];TargetDimValue@1100285000 : Code[20]);
    VAR
      DimensionSetEntry2@1100285003 : Record 480;
    BEGIN
      DimensionSetEntry2 := DimensionSetEntry;
      DimensionSetEntry2."Dimension Code" := TargetDimCode;
      DimensionSetEntry2."Dimension Value Code" := TargetDimValue;
      IF NOT DimensionSetEntry2.INSERT THEN
        EXIT;
    END;

    PROCEDURE AddExtendDimSetEntry@1100285006(VAR DimSetEntry@1100285000 : Record 480;ReceivingCompany@1100285004 : Text[80];ModifyRec@1100285005 : Boolean);
    VAR
      DimValChain@1100285003 : Record 11128020;
      TargetDimCode@1100285002 : Code[20];
      TargetDimValue@1100285001 : Code[20];
      DimensionValue@1100285500 : Record 349;
    BEGIN
      IF ReceivingCompany <> '' THEN
        DimValChain.CHANGECOMPANY(ReceivingCompany);

      IF NOT DimValChain.GET(DimSetEntry."Dimension Code",DimSetEntry."Dimension Value Code") THEN
        EXIT;
      TargetDimCode  := DimValChain."Next Dimension Code";
      TargetDimValue := DimValChain."Next Dimension Value Code";
      IF TargetDimCode = '' THEN EXIT;

      //>>IME171
      IF ModifyRec THEN
        IF DimSetEntry.GET(DimSetEntry."Dimension Set ID",TargetDimCode) THEN;
      //<<IME171

      //>>IME205
      //DimSetEntry."Dimension Code" := TargetDimCode;
      //DimSetEntry."Dimension Value Code" := TargetDimValue;
      DimSetEntry.VALIDATE("Dimension Code", TargetDimCode);
      DimSetEntry.VALIDATE("Dimension Value Code", TargetDimValue);
      //<<IME205
      //>>IME171
      //IF DimSetEntry.INSERT THEN;
      IF NOT DimSetEntry.INSERT THEN
        IF ModifyRec THEN DimSetEntry.MODIFY;
      //<<IME171


      WHILE DimValChain.GET(TargetDimCode,TargetDimValue) DO BEGIN
        TargetDimCode  := DimValChain."Next Dimension Code";
        TargetDimValue := DimValChain."Next Dimension Value Code";
        IF TargetDimCode = '' THEN EXIT;

      //>>IME171
        IF ModifyRec THEN
          IF DimSetEntry.GET(DimSetEntry."Dimension Set ID",TargetDimCode) THEN;
      //<<IME171

      //>>IME205
        //DimSetEntry."Dimension Code" := TargetDimCode;
        //DimSetEntry."Dimension Value Code" := TargetDimValue;
        DimSetEntry.VALIDATE("Dimension Code", TargetDimCode);
        DimSetEntry.VALIDATE("Dimension Value Code", TargetDimValue);
      //<<IME205

      //>>IME171
        //IF DimSetEntry.INSERT THEN;
        IF NOT DimSetEntry.INSERT THEN
          IF ModifyRec THEN DimSetEntry.MODIFY;
      //<<IME171
      END;
    END;

    PROCEDURE getSourceDimensions@1100285007(startDimCode@1100285002 : Code[20];startDimValue@1100285003 : Code[20];targetDimCode@1100285006 : Code[20];VAR sourceChain@1100285001 : Record 11128020);
    VAR
      dvc@1100285000 : Record 11128020;
      nextDimCode@1100285005 : Code[20];
      nextDimValue@1100285004 : Code[20];
    BEGIN
      //4PS-003
      IF ( startDimCode = targetDimCode ) OR ( startDimCode = '' ) THEN
        EXIT;

      dvc.SETRANGE("Next Dimension Code",startDimCode);
      IF startDimValue <> '' THEN
        dvc.SETRANGE("Next Dimension Value Code",startDimValue);
      IF dvc.ISEMPTY THEN
        EXIT;

      dvc.FINDSET;
      REPEAT
        getSourceDimensions(dvc."Start Dimension Code",dvc."Start Dimension Value Code",targetDimCode,sourceChain);
        IF dvc."Start Dimension Code" = targetDimCode THEN BEGIN
          sourceChain."Start Dimension Code" := dvc."Start Dimension Code";
          sourceChain."Start Dimension Value Code" := dvc."Start Dimension Value Code";
          IF sourceChain.INSERT THEN;
        END;
      UNTIL dvc.NEXT=0;
    END;

    PROCEDURE RemoveExtendDimSetEntry@1100285500(VAR TempDimSetEntry@1100285500 : Record 480);
    VAR
      DimensionValueChains@1100285503 : Record 11128020;
      TargetDimCode@1100285502 : Code[20];
      TargetDimValue@1100285501 : Code[20];
    BEGIN
      //IME250
      IF NOT DimensionValueChains.GET(TempDimSetEntry."Dimension Code",TempDimSetEntry."Dimension Value Code") THEN
        EXIT;
      TargetDimCode  := DimensionValueChains."Next Dimension Code";
      TargetDimValue := DimensionValueChains."Next Dimension Value Code";
      IF TargetDimCode = '' THEN EXIT;

      IF TempDimSetEntry.GET(TempDimSetEntry."Dimension Set ID",TargetDimCode) THEN
        TempDimSetEntry.DELETE;

      WHILE DimensionValueChains.GET(TargetDimCode,TargetDimValue) DO BEGIN
        TargetDimCode  := DimensionValueChains."Next Dimension Code";
        TargetDimValue := DimensionValueChains."Next Dimension Value Code";

        IF TempDimSetEntry.GET(TempDimSetEntry."Dimension Set ID",TargetDimCode) THEN
          TempDimSetEntry.DELETE;
        IF TargetDimCode = '' THEN EXIT;

      END;
    END;

    BEGIN
    {
      4PSSE.I009, Migrate Dimensions to 2013,
        +ExtendDimSet()
        +SaveExtendDimSetLine()
        -GetChainJnlLineDim
        -GetChainDocDimToJnlLineDim
        -GetChainDimBufToJnlLineDim

      140905 ITERO.DL IME171 Dimensions are not extended due to lack of VALIDATEs
      140926 ITERO.DL IME205 Reorganization still not work
      150108 ITERO.DL IME250 Dimension value combination is wrong when writing time between cost center
      150317 ITERO.WG SC003293 Deleted ; after THEN in RemoveExtendDimSetEntry(VAR TempDimSetEntry : Record "Dimension Set Entry")
    }
    END.
  }
}

