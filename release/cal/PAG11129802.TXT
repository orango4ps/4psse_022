OBJECT Page 11129802 Repeat Employee Absence
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Abwesenheit wiederholen;
               ENU=Repeat Absence;
               NLD=Afwezigheid repeteren];
    SaveValues=Yes;
    SourceTable=Table5207;
    PageType=StandardDialog;
    SourceTableTemporary=Yes;
    OnInit=BEGIN
             RecurrencePerWeek := 1;
             StartingDate := TODAY;
           END;

    OnOpenPage=BEGIN
                 IF NOT CauseofAbsence.GET(CauseofAbsenceCode) THEN
                   CauseofAbsenceCode := '';
                 IF CauseofAbsenceCode <> '' THEN
                   VALIDATE("Cause of Absence Code", CauseofAbsenceCode);
                 INSERT;
                 CreateAbsenceVisible := TRUE;
               END;

    OnQueryClosePage=BEGIN
                       CloseActionOK := CloseAction IN [ACTION::OK,ACTION::LookupOK];
                       IF CloseActionOK THEN BEGIN
                         IF (EndingDate = 0D) AND (NoOfRecurrences = 0) THEN
                           ERROR(Text000);
                         IF StartingDate = 0D THEN
                           ERROR(Text001);
                         IF EndingDate <> 0D THEN
                           IF CREATEDATETIME(StartingDate, StartingTime) > CREATEDATETIME(EndingDate, EndingTime) THEN
                             ERROR(Text002);
                         IF TmpMyEmployee.ISEMPTY THEN
                           ERROR(Text003);
                       END;
                     END;

    ActionList=ACTIONS
    {
      { 1100525000;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525001;1 ;Action    ;
                      CaptionML=[DEU=Abwesenheit erstellen;
                                 ENU=Create Absence;
                                 NLD=Afwezigheid aanmaken];
                      Visible=CreateAbsenceVisible;
                      OnAction=BEGIN
                                 CreateEmployeeAbsence;
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100528600;;Container;
                ContainerType=ContentArea }

    { 1100528601;1;Group  ;
                CaptionML=[DEU=Fehlzeit;
                           ENU=Absence;
                           NLD=Afwezigheid;
                           NOR=Frav‘r;
                           SVE=Fr†nvaro];
                GroupType=Group }

    { 1100528605;2;Field  ;
                CaptionML=[DEU=Mitarbeiter;
                           ENU=Employees;
                           NLD=Werknemers;
                           NOR=Ansatte;
                           SVE=Personal];
                SourceExpr=GetNoOfEmployees;
                OnAssistEdit=BEGIN
                               AssistEditEmployees;
                             END;
                              }

    { 1100528606;2;Field  ;
                CaptionML=[DEU=Code Abwesenheitsgrund;
                           ENU=Cause of Absence Code;
                           NLD=Afw.-redencode;
                           NOR=Kode frav‘rs†rsak;
                           SVE=Kod f”r Orsak till fr†nvaro];
                SourceExpr=CauseofAbsenceCode;
                TableRelation="Cause of Absence";
                OnValidate=BEGIN
                             IF CauseofAbsenceCode <> '' THEN
                               VALIDATE("Cause of Absence Code", CauseofAbsenceCode)
                             ELSE
                               "Cause of Absence Code" := '';
                           END;
                            }

    { 1100528603;2;Field  ;
                SourceExpr=Description }

    { 1100528602;2;Field  ;
                SourceExpr="From Date" }

    { 1100528604;2;Field  ;
                SourceExpr="To Date" }

    { 1100528622;2;Field  ;
                CaptionML=[DEU=Startzeit;
                           ENU=Starting Time;
                           NLD=Begintijd;
                           NOR=Starttidspunkt;
                           SVE=Starttid];
                SourceExpr=StartingTime }

    { 1100528623;2;Field  ;
                CaptionML=[DEU=Endzeit;
                           ENU=Ending Time;
                           NLD=Eindtijd;
                           NOR=Sluttidspunkt;
                           SVE=Sluttid];
                SourceExpr=EndingTime }

    { 1100528609;1;Group  ;
                Name=Herhalingspatroon;
                CaptionML=[DEU=Wiederholungsmuster;
                           ENU=Repeat Pattern;
                           NLD=Herhalingspatroon];
                GroupType=Group }

    { 1100528610;2;Field  ;
                CaptionML=[DEU=Wird alle X Woche/Wochen wiederholt;
                           ENU=Recurs every X week/weeks;
                           NLD=Keert elke X week/weken terug];
                SourceExpr=RecurrencePerWeek }

    { 1100528611;2;Field  ;
                CaptionML=[DEU=Montag;
                           ENU=Monday;
                           NLD=Maandag;
                           NOR=Mandag;
                           SVE=M†ndag];
                SourceExpr=Monday }

    { 1100528612;2;Field  ;
                CaptionML=[DEU=Dienstag;
                           ENU=Tuesday;
                           NLD=Dinsdag;
                           NOR=Tirsdag;
                           SVE=Tisdag];
                SourceExpr=Tuesday }

    { 1100528613;2;Field  ;
                CaptionML=[DEU=Mittwoch;
                           ENU=Wednesday;
                           NLD=Woensdag;
                           NOR=Onsdag;
                           SVE=Onsdag];
                SourceExpr=Wednesday }

    { 1100528614;2;Field  ;
                CaptionML=[DEU=Donnerstag;
                           ENU=Thursday;
                           NLD=Donderdag;
                           NOR=Torsdag;
                           SVE=Torsdag];
                SourceExpr=Thursday }

    { 1100528615;2;Field  ;
                CaptionML=[DEU=Freitag;
                           ENU=Friday;
                           NLD=Vrijdag;
                           NOR=Fredag;
                           SVE=Fredag];
                SourceExpr=Friday }

    { 1100528616;2;Field  ;
                CaptionML=[DEU=Samstag;
                           ENU=Saturday;
                           NLD=Zaterdag;
                           NOR=L›rdag;
                           SVE=L”rdag];
                SourceExpr=Saturday }

    { 1100528617;2;Field  ;
                CaptionML=[DEU=Sonntag;
                           ENU=Sunday;
                           NLD=Zondag;
                           NOR=S›ndag;
                           SVE=S”ndag];
                SourceExpr=Sunday }

    { 1100528618;1;Group  ;
                CaptionML=[DEU=Wiederholungsbereich;
                           ENU=Recurrence Range;
                           NLD=Bereik van terugkeerpatroon];
                GroupType=Group }

    { 1100528619;2;Field  ;
                CaptionML=[DEU=Start;
                           ENU=Start;
                           NLD=Begin;
                           NOR=Start;
                           SVE=Starta];
                SourceExpr=StartingDate }

    { 1100528620;2;Field  ;
                CaptionML=[DEU=Endet am;
                           ENU=Ends on;
                           NLD=Eindigt op];
                SourceExpr=EndingDate }

    { 1100528621;2;Field  ;
                CaptionML=[DEU=Endet nach X Wiederholungen;
                           ENU=Ends after X recurrences;
                           NLD=Eindigt na X keer];
                SourceExpr=NoOfRecurrences }

  }
  CODE
  {
    VAR
      TmpMyEmployee@1100528617 : TEMPORARY Record 11020654;
      Monday@1100528600 : Boolean;
      Tuesday@1100528601 : Boolean;
      Wednesday@1100528602 : Boolean;
      Thursday@1100528603 : Boolean;
      Friday@1100528604 : Boolean;
      Saturday@1100528605 : Boolean;
      Sunday@1100528606 : Boolean;
      RecurrencePerWeek@1100528607 : Integer;
      StartingDate@1100528608 : Date;
      StartingTime@1100528614 : Time;
      EndingDate@1100528609 : Date;
      EndingTime@1100528615 : Time;
      NoOfRecurrences@1100528610 : Integer;
      CloseActionOK@1100528611 : Boolean;
      Text000@1100528612 : TextConst 'DEU=³Endet amÊ oder ³Endet nachÊ muss angegeben werden;ENU=Ends on or Ends after has to be given;NLD=Eindigt op of Eindigt na dient gevuld te zijn';
      Text001@1100528613 : TextConst 'DEU=³StartÊ muss angegeben werden;ENU=Start has to be given;NLD=Begin dient gevuld te zijn';
      Text002@1100528616 : TextConst 'DEU=Endzeitpunkt muss nach dem Startzeitpunkt liegen;ENU=Ending Time must be greater than Starting Time;NLD=Eindtijd moet groter zijn dan begintijd';
      CreateAbsenceVisible@1100525000 : Boolean INDATASET;
      Text003@1100528618 : TextConst 'DEU=Es ist mindestens ein Mitarbeiter erforderlich;ENU=A minimum of one employee is required;NLD=Minimaal 1 werknemer dient opgegeven te worden';
      CauseofAbsenceCode@1100528619 : Code[10];
      CauseofAbsence@1100527450 : Record 5206;

    PROCEDURE SetEmployeeNoFilter@1100528600(IEmployeeNo@1100528600 : Code[20]);
    BEGIN
      TmpMyEmployee."Employee No." := IEmployeeNo;
      TmpMyEmployee."User ID" := USERID;
      TmpMyEmployee.INSERT;
    END;

    PROCEDURE CreateEmployeeAbsence@1100528601();
    VAR
      EmployeeAbsence@1100528603 : Record 5207;
      DateRec@1100528600 : Record 2000000007;
      RecurrenceCount@1100528601 : Integer;
      WeekCount@1100528602 : Integer;
      DayNo@1100528607 : Integer;
      DoCreateAbsence@1100528608 : Boolean;
    BEGIN
      DateRec.SETRANGE("Period Type", DateRec."Period Type"::Week);
      DateRec.SETFILTER("Period Start", '<=%1', StartingDate);
      IF NOT DateRec.FINDLAST THEN
        EXIT;
      IF EndingDate <> 0D THEN BEGIN
        DateRec.SETRANGE("Period Start", DateRec."Period Start", EndingDate)
      END ELSE
        DateRec.SETFILTER("Period Start", '>=%1', DateRec."Period Start");
      IF DateRec.FINDSET THEN
        REPEAT
          IF WeekCount MOD RecurrencePerWeek = 0 THEN BEGIN
            FOR DayNo := 1 TO 7 DO BEGIN
              CASE DayNo OF
                1: DoCreateAbsence := Monday;
                2: DoCreateAbsence := Tuesday;
                3: DoCreateAbsence := Wednesday;
                4: DoCreateAbsence := Thursday;
                5: DoCreateAbsence := Friday;
                6: DoCreateAbsence := Saturday;
                7: DoCreateAbsence := Sunday;
              END;
              IF DateRec."Period Start" + (DayNo -1) < StartingDate THEN
                DoCreateAbsence := FALSE;
              IF (NoOfRecurrences > 0) AND (RecurrenceCount >= NoOfRecurrences) THEN
                DoCreateAbsence := FALSE;
              IF DoCreateAbsence THEN BEGIN
                IF TmpMyEmployee.FINDSET THEN
                  REPEAT
                    CLEAR(EmployeeAbsence);
                    EmployeeAbsence.VALIDATE("Employee No.", TmpMyEmployee."Employee No.");
                    EmployeeAbsence.VALIDATE("From Date", DateRec."Period Start" + (DayNo -1));
                    EmployeeAbsence.VALIDATE("To Date", EmployeeAbsence."From Date" + ("To Date" - "From Date"));
                    EmployeeAbsence.VALIDATE("From Time", StartingTime);
                    EmployeeAbsence.VALIDATE("Until Time", EndingTime);
                    IF "Cause of Absence Code" <> '' THEN
                      EmployeeAbsence.VALIDATE("Cause of Absence Code", "Cause of Absence Code");
                    EmployeeAbsence.VALIDATE(Description, Description);
                    EmployeeAbsence.INSERT(TRUE);
                    RecurrenceCount += 1;
                  UNTIL TmpMyEmployee.NEXT = 0;
              END;
            END;
          END;
          WeekCount += 1;
        UNTIL (DateRec.NEXT = 0) OR ((RecurrenceCount >= NoOfRecurrences) AND (NoOfRecurrences > 0));
    END;

    PROCEDURE InitData@1100528604();
    BEGIN
      StartingDate := TODAY;
      IF StartingDate = 0D THEN
        StartingDate := TODAY;
      EndingDate := TODAY;

      CASE DATE2DWY(StartingDate, 1) OF
        1: Monday := TRUE;
        2: Tuesday := TRUE;
        3: Wednesday := TRUE;
        4: Thursday := TRUE;
        5: Friday := TRUE;
        6: Saturday := TRUE;
        7: Sunday := TRUE;
      END;

      StartingTime := "From Time";
      EndingTime := "Until Time";
    END;

    LOCAL PROCEDURE GetNoOfEmployees@1100528602() : Code[20];
    BEGIN
      CASE TmpMyEmployee.COUNT OF
        0:
          EXIT('');
        1:
          BEGIN
            TmpMyEmployee.FINDFIRST;
            EXIT(TmpMyEmployee."Employee No.");
          END;
      ELSE
        EXIT(STRSUBSTNO('[%1]', TmpMyEmployee.COUNT));
      END;
    END;

    LOCAL PROCEDURE AssistEditEmployees@1100528605();
    BEGIN
      PAGE.RUNMODAL(PAGE::"My Employees", TmpMyEmployee);
    END;

    PROCEDURE "---"@1100528603();
    BEGIN
    END;

    LOCAL PROCEDURE StdDialogConfirm@1100528402() : Boolean;
    BEGIN
      COMMIT;
      CurrPage.RUNMODAL;
      EXIT(CloseActionOK);
    END;

    LOCAL PROCEDURE StdDialogDoAction@1100528401();
    BEGIN
      CreateEmployeeAbsence;
    END;

    PROCEDURE StdDialogRunModal@1100528404();
    BEGIN
      IF StdDialogConfirm THEN
        StdDialogDoAction;
    END;

    BEGIN
    END.
  }
}

