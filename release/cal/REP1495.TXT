OBJECT Report 1495 Delete Check Ledger Entries
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    Permissions=TableData 272=rimd,
                TableData 45=rimd,
                TableData 87=rimd;
    CaptionML=[DEU=Scheckposten lîschen;
               ENU=Delete Check Ledger Entries;
               NLD=Chequeposten verwijderen;
               NOR=Slett sjekkposter];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  CheckLedgEntryFilter := COPYSTR("Check Ledger Entry".GETFILTERS,1,MAXSTRLEN(DateComprReg.Filter));
                END;

  }
  DATASET
  {
    { 5439;    ;DataItem;Check Ledger Entry  ;
               DataItemTable=Table272;
               DataItemTableView=SORTING(Bank Account No.,Check Date)
                                 WHERE(Entry Status=FILTER(<>Printed));
               OnPreDataItem=BEGIN
                               IF NOT CONFIRM(Text000,FALSE) THEN
                                 CurrReport.BREAK;

                               IF EntrdDateComprReg."Ending Date" = 0D THEN
                                 ERROR(Text003,EntrdDateComprReg.FIELDCAPTION("Ending Date"));

                               Window.OPEN(Text004);

                               SourceCodeSetup.GET;
                               SourceCodeSetup.TESTFIELD("Compress Check Ledger");

                               CheckLedgEntry2.LOCKTABLE;
                               IF CheckLedgEntry3.FINDLAST THEN;
                               DateComprReg.LOCKTABLE;

                               SETRANGE("Check Date",EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date");
                               DateComprMgt.GetDateFilter(EntrdDateComprReg."Ending Date",EntrdDateComprReg,TRUE);

                               InitRegister;
                             END;

               OnAfterGetRecord=BEGIN
                                  CheckLedgEntry2 := "Check Ledger Entry";
                                  WITH CheckLedgEntry2 DO BEGIN
                                    SETCURRENTKEY("Bank Account No.","Check Date");
                                    COPYFILTERS("Check Ledger Entry");

                                    Window.UPDATE(1,"Bank Account No.");

                                    REPEAT
                                      DELETE;
                                      DateComprReg."No. Records Deleted" := DateComprReg."No. Records Deleted" + 1;
                                      Window.UPDATE(4,DateComprReg."No. Records Deleted");
                                    UNTIL NEXT = 0;
                                  END;

                                  IF DateComprReg."No. Records Deleted" >= NoOfDeleted + 10 THEN BEGIN
                                    NoOfDeleted := DateComprReg."No. Records Deleted";
                                    InsertRegisters(DateComprReg);
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF DateComprReg."No. Records Deleted" > NoOfDeleted THEN
                                  InsertRegisters(DateComprReg);
                              END;

               ReqFilterFields=Bank Account No.,Bank Payment Type }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF EntrdDateComprReg."Ending Date" = 0D THEN
                     EntrdDateComprReg."Ending Date" := TODAY;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1   ;2   ;Field     ;
                  CaptionML=[DEU=Startdatum;
                             ENU=Starting Date;
                             NLD=Begindatum;
                             NOR=Startdato;
                             SVE=Startdatum];
                  ToolTipML=[DEU=Gibt das erste Datum der Periode an, ab dem Scheckposten vorgeschlagen werden sollen. Die Stapelverarbeitung berÅcksichtigt alle Posten ab diesem Datum bis zum Enddatum.;
                             ENU=Specifies the first date of the period from which the check ledger entries are suggested. The batch job includes all entries from this date to the ending date.;
                             NLD=Hiermee wordt de begindatum opgegeven van de periode waarvoor chequeposten worden voorgesteld. De batchtaak bevat alle posten vanaf deze datum tot en met de einddatum.;
                             NOR=Angir fõrste dato i perioden som programmet foreslÜr sjekkposter fra. Kjõrselen inkluderer alle poster fra denne datoen til sluttdatoen.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=EntrdDateComprReg."Starting Date" }

      { 2   ;2   ;Field     ;
                  CaptionML=[DEU=Enddatum;
                             ENU=Ending Date;
                             NLD=Einddatum;
                             NOR=Sluttdato;
                             SVE=Slutdatum];
                  ToolTipML=[DEU=Gibt das letzte Datum der Periode an, bis zu dem Scheckposten vorgeschlagen werden sollen. Die Stapelverarbeitung berÅcksichtigt alle Posten vom Startdatum bis zu diesem Datum.;
                             ENU=Specifies the last date of the period from which the check ledger entries are suggested. The batch job includes all entries from the starting date to this date.;
                             NLD=Hiermee wordt de einddatum opgegeven van de periode waaruit chequeposten moeten worden voorgesteld. In de batchverwerking worden alle posten vanaf de begindatum tot deze datum opgenomen.;
                             NOR=Angir siste dato i perioden som programmet foreslÜr sjekkposter fra. Kjõrselen inkluderer alle poster fra og med startdatoen til og med denne datoen.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=EntrdDateComprReg."Ending Date" }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Durch diesen Batchauftrag werden Posten gelîscht. Daher muss vor dem AusfÅhren des Batchauftrags eine Datenbanksicherung erstellt werden.\\Mîchten Sie die Posten datumskomprimieren?;ENU=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\Do you want to date compress the entries?;NLD=Met deze batchverwerking worden posten verwijderd. Maak daarom eerst een reservekopie van de database voor u de batchverwerking uitvoert.\\Wilt u de posten comprimeren?;NOR=Denne kjõrselen sletter poster. Derfor er det viktig at du tar en sikkerhetskopi av databasen fõr du starter kjõrselen.\\Vil du datokomprimere postene?;SVE=Detta batchjobb tar bort transaktioner. Det Ñr dÑrfîr viktigt att du tar en sÑkerhetskopia pÜ databasen innan du kîr batchjobbet.\\Vill du datumkomprimera transaktionerna?';
      Text003@1003 : TextConst 'DEU=%1 muss angegeben werden.;ENU=%1 must be specified.;NLD=%1 moet opgegeven worden.;NOR=%1 mÜ angis.;SVE=%1 mÜste specificeras.';
      Text004@1004 : TextConst 'DEU=Datumskomprimierung fÅr Scheckposten wird ausgefÅhrt...\\Bankkontonr.             #1##########\Anzahl gelîschter Posten #4######;ENU=Date compressing check ledger entries...\\Bank Account No.       #1##########\No. of entries deleted #4######;NLD=Comprimeren chequeposten...\\Bankrekeningnr.       #1##########\Verwijderde posten #4######;NOR=Datokomprimerer sjekkposter ...\\Bankkontonr.       #1##########\Antall slettede poster #4######';
      Text007@1007 : TextConst 'DEU=Alle DatensÑtze gelîscht;ENU=All records deleted;NLD=Alle records verwijderd;NOR=Alle poster er slettet';
      SourceCodeSetup@1008 : Record 242;
      DateComprReg@1009 : Record 87;
      EntrdDateComprReg@1010 : Record 87;
      CheckLedgEntry2@1011 : Record 272;
      CheckLedgEntry3@1012 : Record 272;
      DateComprMgt@1013 : Codeunit 356;
      Window@1014 : Dialog;
      CheckLedgEntryFilter@1015 : Text[250];
      NoOfDeleted@1016 : Integer;
      RegExists@1017 : Boolean;

    LOCAL PROCEDURE InitRegister@4();
    VAR
      NextRegNo@1000 : Integer;
    BEGIN
      IF DateComprReg.FINDLAST THEN
        NextRegNo := DateComprReg."No." + 1;

      DateComprReg.InitRegister(
        DATABASE::"Check Ledger Entry",NextRegNo,
        EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date",EntrdDateComprReg."Period Length",
        CheckLedgEntryFilter,0,SourceCodeSetup."Compress Check Ledger");

      DateComprReg."Retain Field Contents" := Text007;

      RegExists := FALSE;
      NoOfDeleted := 0;
    END;

    LOCAL PROCEDURE InsertRegisters@1(DateComprReg@1000 : Record 87);
    BEGIN
      IF RegExists THEN BEGIN
        DateComprReg.MODIFY;
      END ELSE BEGIN
        DateComprReg.INSERT;
        RegExists := TRUE;
      END;
      COMMIT;

      CheckLedgEntry2.LOCKTABLE;
      IF CheckLedgEntry3.FINDLAST THEN;
      DateComprReg.LOCKTABLE;

      InitRegister;
    END;

    [External]
    PROCEDURE InitializeRequest@2(StartingDate@1000 : Date;EndingDate@1001 : Date);
    BEGIN
      EntrdDateComprReg."Starting Date" := StartingDate;
      EntrdDateComprReg."Ending Date" := EndingDate;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

