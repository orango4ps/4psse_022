OBJECT XMLport 11012081 Export Hours DBS
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Export Hours DBS;
               SVE=Exportera timmar DBS];
    Direction=Export;
    OnInitXMLport=BEGIN
                    HumanResourcesSetup.GET;
                    HumanResourcesSetup.TESTFIELD("Exchange Salary Application");
                    HumanResourcesSetup.TESTFIELD("Salary Application",HumanResourcesSetup."Salary Application"::DBS);
                    PathText := HumanResourcesSetup."Pathname Files to Salary";
                  END;

    OnPreXMLport=BEGIN
                   IF (DocumentFilterCde = '') AND ((gvStartDate=0D) OR (gvEndDate=0D)) THEN
                     ERROR(Text006);

                   currXMLport.FILENAME(PathText + Text011);

                   IF CURRENTCLIENTTYPE = CLIENTTYPE::Windows THEN
                     IF FileMgt.ClientFileExists(currXMLport.FILENAME) THEN
                       IF NOT FileMgt.ExistingFileMustBeReplaced(currXMLport.FILENAME, TRUE) THEN
                         ERROR('');

                   IF CompanyData.GET(COMPANYNAME) THEN
                     CompanyNo := CompanyData."Company No.";

                   FillPayRec;
                 END;

    OnPostXMLport=BEGIN
                    PayRec.DELETEALL;
                    COMMIT;

                    IF Lineno = 0 THEN
                      MESSAGE(Text014)
                    ELSE
                      MESSAGE(Text015, Lineno);
                  END;

    Format=Fixed Text;
  }
  ELEMENTS
  {
    { [{CED5D564-168E-4530-B380-1447C50D42F9}];  ;Root                ;Element ;Text     }

    { [{F8C70EE9-8381-414B-A9A2-10C4BE6955BE}];1 ;BufferHourExport    ;Element ;Table   ;
                                                  SourceTable=Table11012042;
                                                  SourceTableView=SORTING(Field10);
                                                  Export::OnAfterGetRecord=VAR
                                                                             RecRef@1100528400 : RecordRef;
                                                                           BEGIN
                                                                             RecRef.GETTABLE("Buffer Hour Export");
                                                                             XMLportStatusDialogMgt.ShowExportStatus(RecRef);
                                                                           END;
                                                                            }

    { [{7EBC4774-EAEC-4923-A636-060125046B55}];2 ;Text                ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=Buffer Hour Export::Text;
                                                  Width=102 }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      HumanResourcesSetup@1100528420 : Record 5218;
      HoursExportRec@1100528419 : Record 11012041;
      PayRec@1100528418 : Record 11012042;
      PostedHourLine@1100528417 : Record 11012085;
      EmplRec@1100528416 : Record 5200;
      WageCompRec@1100528415 : Record 11012014;
      EmployerRec@1100528414 : Record 11012013;
      CompanyData@1100528500 : Record 11020674;
      XMLportStatusDialogMgt@1100528433 : Codeunit 11130006;
      FileMgt@1100528434 : Codeunit 419;
      PathText@1100528412 : Text[100];
      LineNoInt@1100528410 : Integer;
      Lineno@1100528409 : Integer;
      DocumentFilterCde@1100528408 : Code[100];
      EmployerCde@1100528407 : Code[20];
      CompanyNo@1100528501 : Code[5];
      NotExportedLinesOnly@1100528404 : Boolean;
      ExportDateTime@1100528403 : DateTime;
      gvStartDate@1100528402 : Date;
      gvEndDate@1100528401 : Date;
      AllCompanies@1100528400 : Boolean;
      Text006@1100528429 : TextConst 'ENU=Fill out Document Filter.;SVE=Fyll i dokumentfilter.';
      Text011@1100528428 : TextConst 'ENU=UREN.EXP;SVE=UREN.EXP';
      Text014@1100528427 : TextConst 'ENU=No Hour lines Exported.;SVE=Inga timrader har exporterats.';
      Text015@1100528426 : TextConst 'ENU=Export Finished. There are %1 hour lines exported.;SVE=Export f„rdig. %1 timrader har exporterats.';
      Text017@1100528424 : TextConst 'ENU=No hours present for document %1.;SVE=Det finns inga timmar f”r dokumentet %1.';
      Text022@1100528423 : TextConst 'ENU=%1 %2 is to long for DBS. Maximum length is set to %3.;SVE=%1 %2 „r f”r l†ng f”r DBS. Maximal l„ngd „r angiven som %3.';
      Text037@1100528421 : TextConst 'ENU=Only < and > are allowed as parameter in function outline;SVE=Endast < och > till†ts som parametrar i funktionsutkastet';

    PROCEDURE SetGlobalVars@1100528400(DocumentFilterCde2@1100528400 : Code[100];EmployerCde2@1100528401 : Code[20];NotExportedLinesOnly2@1100528402 : Boolean;StartDate2@1100528403 : Date;EndDate2@1100528404 : Date;AllCompanies2@1100528405 : Boolean);
    BEGIN
      DocumentFilterCde := DocumentFilterCde2;
      EmployerCde := EmployerCde2;
      NotExportedLinesOnly := NotExportedLinesOnly2;
      gvStartDate := StartDate2;
      gvEndDate := EndDate2;
      AllCompanies := AllCompanies2;
    END;

    PROCEDURE FillPayRec@12();
    BEGIN
      PayRec.LOCKTABLE;
      PayRec.DELETEALL;
      Lineno := 0;
      ExportDateTime := CURRENTDATETIME;

      // Hours- & Day lines
      WITH PostedHourLine DO BEGIN
        SETCURRENTKEY("Document No.","Employee No.");
        SETFILTER("Document No.",DocumentFilterCde);
        SETRANGE(External,FALSE);
        SETFILTER("Supplying Company", '%1', '');
        SETFILTER("Cost Type", '%1|%2', "Cost Type"::Labor, "Cost Type"::Sundry);
        IF EmployerCde <> '' THEN
          SETRANGE(Employer,EmployerCde);
        IF NotExportedLinesOnly THEN
          SETRANGE(Exported, FALSE);
        SETRANGE("Posting Date", gvStartDate, gvEndDate);
        IF FINDSET(TRUE, FALSE) THEN
          REPEAT
            EmplRec.GET("Employee No.");
            IF PostedHourLine.Employer = '' THEN
              CLEAR(EmployerRec)
            ELSE
              IF PostedHourLine.Employer <> EmployerRec.Code THEN
                EmployerRec.GET(PostedHourLine.Employer);

            CASE "Component Type" OF
              "Component Type"::Hours:
                BEGIN
                  TestHourLine;
                  IF WageCompRec."DBS Code" <> '' THEN BEGIN
                    IF Monday <> 0 THEN AddHourLine(Monday, 1);
                    IF Tuesday <> 0 THEN AddHourLine(Tuesday, 2);
                    IF Wednesday <> 0 THEN AddHourLine(Wednesday, 3);
                    IF Thursday <> 0 THEN AddHourLine(Thursday, 4);
                    IF Friday <> 0 THEN AddHourLine(Friday, 5);
                    IF Saturday <> 0 THEN AddHourLine(Saturday, 6);
                    IF Sunday <> 0 THEN AddHourLine(Sunday, 7);
                  END;
                END;
              "Component Type"::Expenses:
                BEGIN
                  TestHourLine;
                  IF WageCompRec."DBS Code" <> '' THEN
                    AddHourLine(0, 0);
                END;
              "Component Type"::Days:
                BEGIN
                  TestHourLine;
                  IF WageCompRec."DBS Code" <> '' THEN
                    AddDayLine();
                END;
            END;
            Status := Status::Export;
            Exported := TRUE;
            "Exported on" := ExportDateTime;
            MODIFY;
          UNTIL NEXT = 0;
      END;

      IF Lineno = 0 THEN BEGIN
        COMMIT;
        ERROR(Text017,DocumentFilterCde);
      END;
    END;

    PROCEDURE TestHourLine@8();
    BEGIN
      WITH PostedHourLine DO BEGIN
        TESTFIELD("Wage Component");
        WageCompRec.GET("Wage Component");

        IF STRLEN("Cost Object") > 7 THEN
          ERROR(
            Text022,
            FIELDCAPTION("Cost Object"),"Cost Object",7);
      END;
    END;

    PROCEDURE AddHourLine@9(NumberOfHours@11012000 : Decimal;DayInWeek@1100485000 : Integer);
    VAR
      PostAsHourLine@1100485003 : Boolean;
      TmpDate@1210190004 : Date;
      MonthNo@1210190003 : Integer;
      Text1@1210190002 : Text[30];
    BEGIN
      Lineno += 1;
      IF (Lineno = 1) OR (HoursExportRec."Document No." <> PostedHourLine."Document No.") THEN
        FillLogBook;

      WageCompRec.GET(PostedHourLine."Wage Component");
      PostAsHourLine :=
        (PostedHourLine."Component Type" = PostedHourLine."Component Type"::Hours) OR
        ((PostedHourLine."Component Type" = PostedHourLine."Component Type"::Expenses) AND
         WageCompRec."Export Quantity i.s.o. Amount");

      WITH PayRec DO BEGIN
        INIT;
        "Line No." := Lineno;
        Text := '';

        IF CompanyNo <> '' THEN
          Text := INSSTR(Text, fill(CompanyNo, 5, ' ', '<'), 1);

        TmpDate := DWY2DATE(1,PostedHourLine.Week,PostedHourLine.Year);
        MonthNo := DATE2DMY(TmpDate,2);
        IF MonthNo < 10 THEN
          Text1 := STRSUBSTNO('%1%2%3',PostedHourLine.Year,'0',MonthNo)
        ELSE
          Text1 := STRSUBSTNO('%1%2',PostedHourLine.Year,MonthNo);

        Text := INSSTR(Text,Text1,6);

        Text := INSSTR(Text, fill(PostedHourLine."Employee No.", 8, ' ', '<'), 12);
        Text := INSSTR(Text, '0', 20);
        Text := INSSTR(Text, '0', 21);

        Text := INSSTR(Text,fill(PostedHourLine."Department Code Employee", 7,' ','<'), 22);
        Text := INSSTR(Text,fill(PostedHourLine."Cost Object", 7,' ','<'), 29);
        IF (PostedHourLine."Component Type" = PostedHourLine."Component Type"::Expenses) THEN
          Text := INSSTR(Text, 'B', 36)
        ELSE
          Text := INSSTR(Text, 'U', 36);

        Text := INSSTR(Text, fill(WageCompRec."DBS Code", 4,' ','<'),37);

        IF (PostedHourLine."Component Type" = PostedHourLine."Component Type"::Expenses) THEN
          //NumberOfHours := PostedHourLine.Quantity; // C003856.o
          NumberOfHours := PostedHourLine."Amount (LCY)"; // C003856.n

        Text := INSSTR(Text, fill(FORMAT(ROUND(100*NumberOfHours,1),0,2), 10, ' ', '<'), 41);
        INSERT;
      END;
    END;

    PROCEDURE AddDayLine@1100485001();
    VAR
      TmpDate@1210190002 : Date;
      MonthNo@1210190003 : Integer;
      Text1@1210190004 : Text[30];
    BEGIN
      Lineno += 1;
      IF (Lineno = 1) OR (HoursExportRec."Document No." <> PostedHourLine."Document No.") THEN
        FillLogBook;

      WITH PayRec DO BEGIN
        INIT;

        "Line No." := Lineno;

        Text := '';
        IF CompanyNo <> '' THEN
          Text := INSSTR(Text, fill(CompanyNo, 5, ' ', '<'), 1);

        TmpDate := DWY2DATE(1,PostedHourLine.Week,PostedHourLine.Year);
        MonthNo := DATE2DMY(TmpDate,2);
        IF MonthNo < 10 THEN
          Text1 := STRSUBSTNO('%1%2%3',PostedHourLine.Year,'0',MonthNo)
        ELSE
          Text1 := STRSUBSTNO('%1%2',PostedHourLine.Year,MonthNo);

        Text := INSSTR(Text,Text1,6);
        Text := INSSTR(Text, fill(PostedHourLine."Employee No.", 8, ' ', '<'), 12);
        Text := INSSTR(Text, '0', 20);
        Text := INSSTR(Text, '0', 21);
        Text := INSSTR(Text,fill(PostedHourLine."Department Code Employee", 7,' ','<'), 22);
        Text := INSSTR(Text,fill(PostedHourLine."Cost Object", 7,' ','<'), 29);
        Text := INSSTR(Text, 'D', 36);
        Text := INSSTR(Text, fill(WageCompRec."DBS Code", 4,' ','<'),37);
        Text := INSSTR(Text, fill(FORMAT(ROUND(100*PostedHourLine.Quantity,1),0,2), 10, ' ', '<'), 41);
        INSERT;
      END;
    END;

    PROCEDURE FillLogBook@33();
    BEGIN
      HoursExportRec.RESET;
      IF HoursExportRec.FIND('+') THEN
        LineNoInt := HoursExportRec."Line No." + 1
      ELSE
        LineNoInt := 1;

      HoursExportRec.INIT;
      HoursExportRec."Line No." := LineNoInt;
      HoursExportRec."Document No." :=  PostedHourLine."Document No.";
      HoursExportRec."User ID" := USERID;
      HoursExportRec.Date := TODAY;
      HoursExportRec.Time := TIME;
      HoursExportRec.INSERT;
    END;

    PROCEDURE Alphanumeric@6(Text@11012001 : Text[250]) @11012000 : Boolean;
    BEGIN
      EXIT(DELCHR(Text,'=',' 0123456789')<>'');
    END;

    PROCEDURE fill@4(String@11012001 : Text[142];TotLength@11012002 : Integer;WithCharacter@11012003 : Text[1];TrueBool@11012004 : Char) @11012000 : Text[142];
    VAR
      Length@11012005 : Integer;
    BEGIN
      Length:=STRLEN(String);
      IF TotLength>Length THEN BEGIN
        CASE TrueBool OF
          '<': String:=PADSTR('',TotLength-Length,WithCharacter)+String;
          '>': String:=String+PADSTR('',TotLength-Length,WithCharacter);
          ELSE ERROR(Text037);
        END;
      END;

      EXIT(String);
    END;

    PROCEDURE Sign@3(Value@11012001 : Decimal) @11012000 : Text[1];
    BEGIN
      IF Value >= 0 THEN
        EXIT(' ')
      ELSE
        EXIT('-');
    END;

    PROCEDURE WeekNoConvertedToSCAB@1100485000() WeekNoSCAB : Integer;
    BEGIN
      WeekNoSCAB := PostedHourLine.Week;

      IF PostedHourLine.Week = 53 THEN
        EXIT;

      IF (PostedHourLine.Employer = '') THEN
        EXIT;

      IF EmployerRec."Period Type" = EmployerRec."Period Type"::"4-Weeks" THEN
        WeekNoSCAB := 4 * ((PostedHourLine.Week + 3) DIV 4);
    END;

    BEGIN
    {
      CC: Dataport 11012351
    }
    END.
  }
}

