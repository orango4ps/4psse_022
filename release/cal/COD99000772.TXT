OBJECT Codeunit 99000772 Prod. Order Route Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CannotCalculateRoutingNumberErr@1000 : TextConst '@@@="%1: Status Text; %2: Field(Prod. Order No.); %3: Field(Routing No.); %4: Direction Text; %5: Field(Actual Sequence); %6: Field (Max. Sequences)";DEU=Die Nummer des Arbeitsplans %3 %4 in %1 Fertigungsauftrag %2 kann nicht berechnet werden, weil die Laufnummer %5 hîher als die maximale Laufnummer %6 ist.;ENU=Cannot calculate routing number %3 %4 in %1 production order %2, because sequence number %5 is higher than the maximum sequence number, %6.;NLD=Kan bewerkingsplannummer %3 %4 in %1 productieorder %2 niet berekenen, omdat volgnummer %5 groter is dan het maximale volgnummer, %6.;NOR=Kan ikke beregne rutingsnummeret %3 %4 i %1-produksjonsordren %2, fordi antall sekvensnumre (%5) er hõyere enn det tillatte antallet (%6).;SVE=Det gÜr inte att berÑkna operationsfîljdsnumret %3 %4 i %1 produktionsorder %2, eftersom sekvensnumret %5 Ñr hîgre Ñn det hîgsta tillÜtna sekvensnumret, %6.';
      Text001@1001 : TextConst 'DEU=ZurÅck;ENU=Back;NLD=Achterwaarts;NOR=Tilbake;SVE=Tillbaka';
      Text002@1002 : TextConst 'DEU=rÅckwÑrts;ENU=back;NLD=achterwaarts;NOR=tilbake;SVE=Tillbaka';
      Text003@1003 : TextConst 'DEU=Aktuelle Anzahl der beendeten DurchlÑufe fÅr Fertigungsauftrag %1 Arbeitsplan %2 ist %3. Sie sollten 1 sein. PrÅfen Sie %4.;ENU=Actual number of termination processes in prod. order %1 route %2  is %3. They should be 1. Check %4.;NLD=Huidig aantal stopprocessen in prod.-order %1 bewerkingsplan %2 is %3 in plaats van 1. Controleer %4.;NOR=Faktisk antall avbrudd i prod.ordre %1 rute %2 er %3. Det skulle vërt 1. Kontroller %4.;SVE=Faktiskt antal avslutningsprocesser i prod.order %1 oper.fîljd %2 Ñr %3. De borde vara 1. Kontrollera %4.';
      Text004@1004 : TextConst 'DEU=Aktuelle Anzahl der begonnenen DurchlÑufe fÅr Fertigungsauftrag %1 Arbeitsplan %2 ist %3. Sie sollten 1 sein. PrÅfen Sie %4.;ENU=Actual Number of start processes in prod. order %1 route %2 is %3. They should be 1. Check %4.;NLD=Huidig aantal startprocessen in prod.-order %1 bewerkingsplan %2 is %3 in plaats van 1. Controleer %4.;NOR=Faktisk antall startprosedyrer i prod.order %1 rute %2 er %3. Det skulle vërt 1. Kontroller %4.;SVE=Faktiskt antal startprocesser i prod.order %1 oper.fîljd %2 Ñr %3. De borde vara 1. Kontrollera %4.';
      Text005@1005 : TextConst 'DEU=Es sind nicht alle ArbeitsgÑnge im Arbeitsplan %1 rÅckwÑrts berechnet. PrÅfen Sie %2.;ENU=Not all routing lines are sequenced backwards on routing %1. Check %2.;NLD=Niet alle bewerkingsplanregels zijn achterwaarts doorgeschoven voor bewerkingsplan %1. Controleer %2.;NOR=Ikke alle rutelinjene er i rekkefõlge bakover i rute %1. Kontroller %2.;SVE=Inte alla oper.fîljdsrader Ñr sekvenserade bakÜt i operationsfîljd %1. Kontrollera %2.';
      Text006@1006 : TextConst 'DEU=Es sind nicht alle ArbeitsgÑnge im Arbeitsplan %1 vorwÑrts berechnet. PrÅfen Sie %2.;ENU=Not all routing lines are sequenced forward on routing %1. Check %2.;NLD=Niet alle bewerkingsplanregels zijn voorwaarts doorgeschoven voor bewerkingsplan %1. Controleer %2.;NOR=Ikke alle rutelinjene er i rekkefõlge fremover i rute %1. Kontroller %2.;SVE=Inte alla oper.fîljdsrader Ñr sekvenserade framÜt i operationsfîljd %1. Kontrollera %2.';
      Text007@1007 : TextConst 'DEU=Vorhergehende ArbeitsgÑnge fÅr %1 kînnen nicht gefunden werden.;ENU=Previous operations for %1 cannot be found.;NLD=Kan vorige bewerkingen voor %1 niet vinden.;NOR=Finner ikke tidligere operasjoner for %1.;SVE=FîregÜende operationer fîr %1 kan inte hittas.';
      Text008@1008 : TextConst 'DEU=Nachfolgende ArbeitsgÑnge fÅr %1 kînnen nicht gefunden werden.;ENU=Next operations for %1 cannot be found.;NLD=Kan geen volgende bewerkingen voor %1 vinden.;NOR=Finner ikke neste operasjoner for %1.;SVE=De nÑsta operationerna fîr %1 kan inte hittas.';
      ErrList@1009 : Text[50];
      Text009@1010 : TextConst
        'DEU=Aufgrund dieser énderung unterscheiden sich die Lagerplatzcodes in einigen Fertigungsauftragskomponentenzeilen unter UmstÑnden von den Codes im Fertigungsauftragsarbeitsgang. Sollen alle Lagerplatzcodes ohne öbereinstimmung automatisch zugeordnet werden?',
        'ENU=This change may have caused bin codes on some production order component lines to be different from those on the production order routing line. Do you want to automatically align all of these unmatched bin codes?',
        'NLD=Deze wijziging kan ertoe hebben geleid dat opslaglocatiecodes op sommige productieordermateriaalregels verschillen van die op de productieorderbewerkingsplanregel. Wilt u alle niet-overeenkomende opslaglocaties automatisch op elkaar afstemmen?',
        'NOR=Denne endringen kan ha fõrt til at hyllekoder pÜ noen komponentlinjer for produksjonsordrer er annerledes sammenlignet med hyllekodene pÜ produksjonsordrerutelinjen. Vil du automatisk justere alle disse hyllekodene som ikke samsvarer?',
        'SVE=éndringen kan ha lett till att lagerplatskoderna pÜ vissa produktionsorderkomponentsrader skiljer sig frÜn raderna pÜ operationsfîljdsraden i produktionsordern. Vill du att alla omatchade lagerplatskoder ska justeras automatiskt?';

    [External]
    PROCEDURE NeedsCalculation@8(Status@1000 : 'Simulated,Planned,Firm Planned,Released';ProdOrderNo@1001 : Code[20];RoutingRefNo@1002 : Integer;RoutingNo@1003 : Code[20]) : Boolean;
    VAR
      ProdOrderRtngLine@1004 : Record 5409;
    BEGIN
      SetRoutingFilter(ProdOrderRtngLine,Status,ProdOrderNo,RoutingNo,RoutingRefNo);
      ProdOrderRtngLine.SETRANGE(Recalculate,TRUE);
      ProdOrderRtngLine.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine."Routing Status"::Finished);

      EXIT(ProdOrderRtngLine.FINDFIRST);
    END;

    LOCAL PROCEDURE ErrorInRouting@1(Status@1000 : 'Simulated,Planned,Firm Planned,Released';ProdOrderNo@1001 : Code[20];RoutingNo@1002 : Code[20];Direction@1003 : Text[20];ActualSequence@1004 : Integer;MaxSequences@1005 : Integer);
    VAR
      LocalText000@1006 : TextConst 'DEU=Simuliert,Geplant,Fest geplant,Freigegeben;ENU=Simulated,Planned,Firm Planned,Released;NLD=Gesimuleerd,Gepland,Vast gepland,Vrijgegeven;NOR=Simulert,Planlagt,Fast planlagt,Frigitt;SVE=Simulerad,Planerad,Fast planerad,SlÑppt';
    BEGIN
      ERROR(
        CannotCalculateRoutingNumberErr,
        SELECTSTR(Status + 1,LocalText000),
        ProdOrderNo,
        RoutingNo,
        Direction,
        ActualSequence,
        MaxSequences);
    END;

    LOCAL PROCEDURE InsertInErrList@10(ProdOrderRtngLine@1000 : Record 5409);
    BEGIN
      IF (STRLEN(ErrList) + STRLEN(ProdOrderRtngLine."Operation No.") + 1) > MAXSTRLEN(ErrList) THEN
        EXIT;

      IF STRLEN(ErrList) > 0 THEN
        ErrList := ErrList + ',' + ProdOrderRtngLine."Operation No."
      ELSE
        ErrList := ProdOrderRtngLine."Operation No.";
    END;

    [External]
    PROCEDURE SetNextOperations@12(ProdOrderLine@1000 : Record 5406);
    VAR
      ProdOrderRtngLine@1001 : Record 5409;
      ProdOrderRtngLine2@1002 : Record 5409;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeSetNextOperations(ProdOrderLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      SetRoutingFilter(
        ProdOrderRtngLine,ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",
        ProdOrderLine."Routing No.",ProdOrderLine."Routing Reference No.");
      ProdOrderRtngLine.MODIFYALL("Next Operation No.",'');

      IF ProdOrderRtngLine.FIND('-') THEN
        REPEAT
          ProdOrderRtngLine2 := ProdOrderRtngLine;
          ProdOrderRtngLine2.SETRANGE(Status,ProdOrderLine.Status);
          ProdOrderRtngLine2.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
          ProdOrderRtngLine2.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
          ProdOrderRtngLine2.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
          IF ProdOrderRtngLine2.FIND('>') THEN BEGIN
            ProdOrderRtngLine."Next Operation No." := ProdOrderRtngLine2."Operation No.";
            ProdOrderRtngLine.MODIFY;
          END;
        UNTIL ProdOrderRtngLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcPreviousOperations@11(ProdOrderLine@1000 : Record 5406);
    VAR
      ProdOrderRtngLine@1001 : Record 5409;
      ProdOrderRtngLine2@1002 : Record 5409;
      IsHandled@1003 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCalcPreviousOperations(ProdOrderLine,IsHandled);
      IF IsHandled THEN
        EXIT;

      SetRoutingFilter(
        ProdOrderRtngLine,ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",
        ProdOrderLine."Routing No.",ProdOrderLine."Routing Reference No.");
      ProdOrderRtngLine.MODIFYALL("Previous Operation No.",'');

      IF ProdOrderRtngLine.FIND('-') THEN
        REPEAT
          IF ProdOrderRtngLine."Next Operation No." <> '' THEN BEGIN
            SetRoutingFilter(
              ProdOrderRtngLine2,ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",
              ProdOrderLine."Routing No.",ProdOrderLine."Routing Reference No.");
            ProdOrderRtngLine2.SETFILTER("Operation No.",ProdOrderRtngLine."Next Operation No.");
            IF ProdOrderRtngLine2.FIND('-') THEN
              REPEAT
                IF ProdOrderRtngLine2."Previous Operation No." <> '' THEN
                  ProdOrderRtngLine2."Previous Operation No." :=
                    ProdOrderRtngLine2."Previous Operation No." + '|';
                ProdOrderRtngLine2."Previous Operation No." :=
                  ProdOrderRtngLine2."Previous Operation No." +
                  ProdOrderRtngLine."Operation No.";
                ProdOrderRtngLine2.MODIFY;
              UNTIL ProdOrderRtngLine2.NEXT = 0;
          END;
        UNTIL ProdOrderRtngLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SetRtngLineSequenceBack@6(RoutingType@1000 : 'Serial,Parallel';ProdOrderRtngLine@1001 : Record 5409;Maxsequences@1002 : Integer;Actsequences@1003 : Integer;TotalCalculation@1004 : Boolean);
    VAR
      ProdOrderRtngLine2@1005 : Record 5409;
      SequenceNo@1006 : Integer;
    BEGIN
      IF RoutingType = RoutingType::Parallel THEN BEGIN
        IF (Actsequences - 1) > Maxsequences THEN
          ErrorInRouting(
            ProdOrderRtngLine.Status,
            ProdOrderRtngLine."Prod. Order No.",
            ProdOrderRtngLine."Routing No.",
            Text001,
            Actsequences,
            Maxsequences);

        IF TotalCalculation THEN
          ProdOrderRtngLine."Sequence No. (Backward)" := 1
        ELSE
          ProdOrderRtngLine."Sequence No. (Actual)" := 1;

        SetRoutingFilter(
          ProdOrderRtngLine2,ProdOrderRtngLine.Status,ProdOrderRtngLine."Prod. Order No.",
          ProdOrderRtngLine."Routing No.",ProdOrderRtngLine."Routing Reference No.");
        IF ProdOrderRtngLine."Next Operation No." <> '' THEN BEGIN
          ProdOrderRtngLine2.SETFILTER("Operation No.",ProdOrderRtngLine."Next Operation No.");
          IF ProdOrderRtngLine2.FIND('-') THEN
            REPEAT
              IF TotalCalculation THEN BEGIN
                IF (ProdOrderRtngLine2."Sequence No. (Backward)" + 1) > ProdOrderRtngLine."Sequence No. (Backward)" THEN
                  ProdOrderRtngLine."Sequence No. (Backward)" := ProdOrderRtngLine2."Sequence No. (Backward)" + 1;
              END ELSE BEGIN
                IF (ProdOrderRtngLine2."Sequence No. (Actual)" + 1) > ProdOrderRtngLine."Sequence No. (Actual)" THEN
                  ProdOrderRtngLine."Sequence No. (Actual)" := ProdOrderRtngLine2."Sequence No. (Actual)" + 1;
              END;
            UNTIL ProdOrderRtngLine2.NEXT = 0;
        END;
        ProdOrderRtngLine.MODIFY;

        IF ProdOrderRtngLine."Previous Operation No." <> '' THEN BEGIN
          ProdOrderRtngLine2.SETFILTER("Operation No.",ProdOrderRtngLine."Previous Operation No.");
          IF ProdOrderRtngLine2.FIND('-') THEN
            REPEAT
              SetRtngLineSequenceBack(
                RoutingType,
                ProdOrderRtngLine2,
                Maxsequences,
                Actsequences + 1,
                TotalCalculation);
            UNTIL ProdOrderRtngLine2.NEXT = 0;
        END;
      END ELSE BEGIN
        SequenceNo := 1;
        ProdOrderRtngLine2 := ProdOrderRtngLine;
        SetRoutingFilter(
          ProdOrderRtngLine2,ProdOrderRtngLine.Status,ProdOrderRtngLine."Prod. Order No.",
          ProdOrderRtngLine."Routing No.",ProdOrderRtngLine."Routing Reference No.");
        IF ProdOrderRtngLine2.FIND THEN
          REPEAT
            IF TotalCalculation THEN
              ProdOrderRtngLine2."Sequence No. (Backward)" := SequenceNo
            ELSE
              ProdOrderRtngLine2."Sequence No. (Actual)" := SequenceNo;
            ProdOrderRtngLine2.MODIFY;
            SequenceNo := SequenceNo + 1;
          UNTIL ProdOrderRtngLine2.NEXT(-1) = 0;
      END;
    END;

    LOCAL PROCEDURE SetRtngLineSequenceForward@7(RoutingType@1000 : 'Serial,Parallel';ProdOrderRtngLine@1001 : Record 5409;MaxSequences@1002 : Integer;ActSequences@1003 : Integer;TotalCalculation@1004 : Boolean);
    VAR
      ProdOrderRtngLine2@1005 : Record 5409;
      SequenceNo@1006 : Integer;
    BEGIN
      IF RoutingType = RoutingType::Parallel THEN BEGIN
        IF ActSequences > MaxSequences THEN
          ErrorInRouting(
            ProdOrderRtngLine.Status,
            ProdOrderRtngLine."Prod. Order No.",
            ProdOrderRtngLine."Routing No.",
            Text002,
            ActSequences,
            MaxSequences);

        IF TotalCalculation THEN
          ProdOrderRtngLine."Sequence No. (Forward)" := 1
        ELSE
          ProdOrderRtngLine."Sequence No. (Actual)" := 1;

        SetRoutingFilter(
          ProdOrderRtngLine2,ProdOrderRtngLine.Status,ProdOrderRtngLine."Prod. Order No.",
          ProdOrderRtngLine."Routing No.",ProdOrderRtngLine."Routing Reference No.");
        IF ProdOrderRtngLine."Previous Operation No." <> '' THEN BEGIN
          ProdOrderRtngLine2.SETFILTER("Operation No.",ProdOrderRtngLine."Previous Operation No.");
          IF ProdOrderRtngLine2.FIND('-') THEN
            REPEAT
              IF TotalCalculation THEN BEGIN
                IF (ProdOrderRtngLine2."Sequence No. (Forward)" + 1) > ProdOrderRtngLine."Sequence No. (Forward)" THEN
                  ProdOrderRtngLine."Sequence No. (Forward)" := ProdOrderRtngLine2."Sequence No. (Forward)" + 1;
              END ELSE BEGIN
                IF (ProdOrderRtngLine2."Sequence No. (Actual)" + 1) > ProdOrderRtngLine."Sequence No. (Actual)" THEN
                  ProdOrderRtngLine."Sequence No. (Actual)" :=
                    ProdOrderRtngLine."Sequence No. (Actual)" + 1;
              END;
            UNTIL ProdOrderRtngLine2.NEXT = 0;
        END;
        ProdOrderRtngLine.MODIFY;

        IF ProdOrderRtngLine."Next Operation No." <> '' THEN BEGIN
          ProdOrderRtngLine2.SETFILTER("Operation No.",ProdOrderRtngLine."Next Operation No.");
          IF ProdOrderRtngLine2.FIND('-') THEN
            REPEAT
              SetRtngLineSequenceForward(
                RoutingType,
                ProdOrderRtngLine2,
                MaxSequences,
                ActSequences + 1,
                TotalCalculation);
            UNTIL ProdOrderRtngLine2.NEXT = 0;
        END;
      END ELSE BEGIN
        SequenceNo := 1;
        ProdOrderRtngLine2 := ProdOrderRtngLine;
        SetRoutingFilter(
          ProdOrderRtngLine2,ProdOrderRtngLine.Status,ProdOrderRtngLine."Prod. Order No.",
          ProdOrderRtngLine."Routing No.",ProdOrderRtngLine."Routing Reference No.");
        IF ProdOrderRtngLine2.FIND THEN
          REPEAT
            IF TotalCalculation THEN
              ProdOrderRtngLine2."Sequence No. (Forward)" := SequenceNo
            ELSE
              ProdOrderRtngLine2."Sequence No. (Actual)" := SequenceNo;
            ProdOrderRtngLine2.MODIFY;
            SequenceNo := SequenceNo + 1;
          UNTIL ProdOrderRtngLine2.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CalcSequenceBack@2(ProdOrderLine@1000 : Record 5406);
    VAR
      ProdOrderRtngLine@1001 : Record 5409;
      MaxSeq@1002 : Integer;
    BEGIN
      SetRoutingFilter(
        ProdOrderRtngLine,ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",
        ProdOrderLine."Routing No.",ProdOrderLine."Routing Reference No.");

      IF ProdOrderRtngLine.FIND('-') THEN
        REPEAT
          ProdOrderRtngLine."Sequence No. (Backward)" := 0;
          ProdOrderRtngLine."Fixed Scrap Qty. (Accum.)" := 0;
          ProdOrderRtngLine."Scrap Factor % (Accumulated)" := 0;
          ProdOrderRtngLine.MODIFY;
        UNTIL ProdOrderRtngLine.NEXT = 0;

      MaxSeq := ProdOrderRtngLine.COUNT;

      ProdOrderRtngLine.SETFILTER("Next Operation No.",'%1','');
      ProdOrderRtngLine.FIND('-');
      SetRtngLineSequenceBack(ProdOrderLine."Routing Type",ProdOrderRtngLine,MaxSeq,1,TRUE);
    END;

    LOCAL PROCEDURE CalcSequenceForward@3(ProdOrderLine@1000 : Record 5406);
    VAR
      ProdOrderRtngLine@1001 : Record 5409;
      MaxSeq@1002 : Integer;
    BEGIN
      SetRoutingFilter(
        ProdOrderRtngLine,ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",
        ProdOrderLine."Routing No.",ProdOrderLine."Routing Reference No.");
      ProdOrderRtngLine.MODIFYALL("Sequence No. (Forward)",0);

      MaxSeq := ProdOrderRtngLine.COUNT;

      ProdOrderRtngLine.SETFILTER("Previous Operation No.",'%1','');
      ProdOrderRtngLine.FINDFIRST;
      SetRtngLineSequenceForward(ProdOrderLine."Routing Type",ProdOrderRtngLine,MaxSeq,1,TRUE);
    END;

    [External]
    PROCEDURE CalcSequenceFromActual@9(ProdOrderRtngLine@1000 : Record 5409;Direction@1001 : 'Forward,Backward');
    VAR
      ProdOrderLine@1002 : Record 5406;
      ProdOrderRtngLine2@1003 : Record 5409;
      MaxSeq@1004 : Integer;
    BEGIN
      IF NeedsCalculation(
           ProdOrderRtngLine.Status,
           ProdOrderRtngLine."Prod. Order No.",
           ProdOrderRtngLine."Routing Reference No.",
           ProdOrderRtngLine."Routing No.")
      THEN BEGIN
        SetOrderLineRoutingFilter(
          ProdOrderLine,ProdOrderRtngLine.Status,ProdOrderRtngLine."Prod. Order No.",
          ProdOrderRtngLine."Routing No.",ProdOrderRtngLine."Routing Reference No.");
        ProdOrderLine.FINDFIRST;

        Calculate(ProdOrderLine);
      END;
      SetRoutingFilter(
        ProdOrderRtngLine2,ProdOrderRtngLine.Status,ProdOrderRtngLine."Prod. Order No.",
        ProdOrderRtngLine."Routing No.",ProdOrderRtngLine."Routing Reference No.");
      ProdOrderRtngLine2.MODIFYALL("Sequence No. (Actual)",0);

      MaxSeq := ProdOrderRtngLine2.COUNT;

      CASE Direction OF
        Direction::Forward:
          SetRtngLineSequenceForward(ProdOrderLine."Routing Type",ProdOrderRtngLine,MaxSeq,1,FALSE);
        Direction::Backward:
          SetRtngLineSequenceBack(ProdOrderLine."Routing Type",ProdOrderRtngLine,MaxSeq,1,FALSE);
      END;
    END;

    [External]
    PROCEDURE Calculate@4(ProdOrderLine@1000 : Record 5406);
    VAR
      ProdOrderRtngLine@1001 : Record 5409;
      ProdOrderRtngLine2@1002 : Record 5409;
      CalcScrapFactor@1003 : Decimal;
      CalcScrapQty@1004 : Decimal;
      ScrapFactorThis@1005 : Decimal;
      ScrapQtyThis@1006 : Decimal;
    BEGIN
      IF ProdOrderLine."Routing Type" = ProdOrderLine."Routing Type"::Serial THEN
        SetNextOperations(ProdOrderLine);

      CalcPreviousOperations(ProdOrderLine);
      CalcSequenceBack(ProdOrderLine);
      CalcSequenceForward(ProdOrderLine);

      ProdOrderRtngLine.SETCURRENTKEY(
        Status,"Prod. Order No.","Routing Reference No.","Routing No.","Sequence No. (Backward)");
      SetRoutingFilter(
        ProdOrderRtngLine,ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",
        ProdOrderLine."Routing No.",ProdOrderLine."Routing Reference No.");

      IF ProdOrderRtngLine.FIND('-') THEN
        REPEAT
          IF ProdOrderRtngLine."Next Operation No." <> '' THEN BEGIN
            SetRoutingFilter(
              ProdOrderRtngLine2,ProdOrderRtngLine.Status,ProdOrderRtngLine."Prod. Order No.",
              ProdOrderRtngLine."Routing No.",ProdOrderRtngLine."Routing Reference No.");
            ProdOrderRtngLine2.SETFILTER("Operation No.",ProdOrderRtngLine."Next Operation No.");
            CalcScrapFactor := 0;
            CalcScrapQty := 0;
            IF ProdOrderRtngLine2.FIND('-') THEN
              REPEAT
                ScrapFactorThis := ProdOrderRtngLine2."Scrap Factor % (Accumulated)";
                ScrapQtyThis := ProdOrderRtngLine2."Fixed Scrap Qty. (Accum.)";
                IF CalcScrapFactor < ScrapFactorThis THEN
                  CalcScrapFactor := ScrapFactorThis;
                IF CalcScrapQty < ScrapQtyThis THEN
                  CalcScrapQty := ScrapQtyThis;
              UNTIL ProdOrderRtngLine2.NEXT = 0;
          END;
          IF CalcScrapFactor <> 0 THEN BEGIN
            IF ProdOrderRtngLine."Scrap Factor %" <> 0 THEN
              CalcScrapFactor :=
                ROUND(
                  (1 + CalcScrapFactor) *
                  (1 + ProdOrderRtngLine."Scrap Factor %" / 100),0.00001) - 1;
          END ELSE
            CalcScrapFactor := ROUND(1 + ProdOrderRtngLine."Scrap Factor %" / 100,0.00001) - 1;
          CalcScrapQty := CalcScrapQty + ProdOrderRtngLine."Fixed Scrap Quantity";
          OnCalculateOnAfterCalcScrapQtyAndFactor(ProdOrderRtngLine,CalcScrapQty,CalcScrapFactor);
          ProdOrderRtngLine."Fixed Scrap Qty. (Accum.)" := CalcScrapQty;
          ProdOrderRtngLine."Scrap Factor % (Accumulated)" := CalcScrapFactor;
          ProdOrderRtngLine.MODIFY;
        UNTIL ProdOrderRtngLine.NEXT = 0;

      IF ProdOrderRtngLine.FINDSET(TRUE) THEN
        REPEAT
          ProdOrderRtngLine.Recalculate := FALSE;
          ProdOrderRtngLine.UpdateComponentsBin(1); // modify option
          ProdOrderRtngLine.MODIFY(FALSE);
        UNTIL ProdOrderRtngLine.NEXT = 0;
      Check(ProdOrderLine);
    END;

    [External]
    PROCEDURE Check@5(ProdOrderLine@1000 : Record 5406);
    VAR
      ProdOrderRtngLine@1001 : Record 5409;
      ProdOrderRtngLine2@1002 : Record 5409;
      NoOfProcesses@1003 : Integer;
    BEGIN
      SetRoutingFilter(
        ProdOrderRtngLine,ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",
        ProdOrderLine."Routing No.",ProdOrderLine."Routing Reference No.");

      ProdOrderRtngLine.SETFILTER("Next Operation No.",'%1','');

      NoOfProcesses := ProdOrderRtngLine.COUNT;
      IF NoOfProcesses <> 1 THEN BEGIN
        REPEAT
          InsertInErrList(ProdOrderRtngLine);
        UNTIL ProdOrderRtngLine.NEXT = 0;
        ERROR(
          Text003,
          ProdOrderLine."Prod. Order No.",
          ProdOrderLine."Routing No.",
          NoOfProcesses,
          ErrList);
      END;

      ProdOrderRtngLine.SETFILTER("Previous Operation No.",'%1','');
      ProdOrderRtngLine.SETRANGE("Next Operation No.");
      NoOfProcesses := ProdOrderRtngLine.COUNT;
      IF NoOfProcesses <> 1 THEN BEGIN
        REPEAT
          InsertInErrList(ProdOrderRtngLine);
        UNTIL ProdOrderRtngLine.NEXT = 0;
        ERROR(
          Text004,
          ProdOrderLine."Prod. Order No.",
          ProdOrderLine."Routing No.",
          NoOfProcesses,
          ErrList);
      END;
      ProdOrderRtngLine.SETRANGE("Previous Operation No.");

      ProdOrderRtngLine.SETRANGE("Sequence No. (Backward)",0);
      IF ProdOrderRtngLine.FIND('-') THEN BEGIN
        REPEAT
          InsertInErrList(ProdOrderRtngLine);
        UNTIL ProdOrderRtngLine.NEXT = 0;
        ERROR(
          Text005,
          ProdOrderRtngLine."Routing No.",
          ErrList);
      END;
      ProdOrderRtngLine.SETRANGE("Sequence No. (Backward)");

      ProdOrderRtngLine.SETRANGE("Sequence No. (Forward)",0);
      IF ProdOrderRtngLine.FIND('-') THEN BEGIN
        REPEAT
          InsertInErrList(ProdOrderRtngLine);
        UNTIL ProdOrderRtngLine.NEXT = 0;
        ERROR(
          Text006,
          ProdOrderRtngLine."Routing No.",
          ErrList);
      END;
      ProdOrderRtngLine.SETRANGE("Sequence No. (Forward)");

      ProdOrderRtngLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.",
        "Routing No.","Sequence No. (Backward)");
      ProdOrderRtngLine.SETFILTER("Previous Operation No.",'<>%1','');

      IF ProdOrderRtngLine.FIND('-') THEN
        REPEAT
          SetRoutingFilter(
            ProdOrderRtngLine2,ProdOrderRtngLine.Status,ProdOrderRtngLine."Prod. Order No.",
            ProdOrderRtngLine."Routing No.",ProdOrderRtngLine."Routing Reference No.");
          ProdOrderRtngLine2.SETFILTER("Operation No.",ProdOrderRtngLine."Previous Operation No.");
          IF ProdOrderRtngLine2.ISEMPTY THEN
            ERROR(
              Text007,
              ProdOrderRtngLine."Routing No.");
        UNTIL ProdOrderRtngLine.NEXT = 0;

      ProdOrderRtngLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.",
        "Routing No.","Sequence No. (Forward)");
      ProdOrderRtngLine.SETFILTER("Next Operation No.",'<>%1','');
      ProdOrderRtngLine.SETRANGE("Operation No.");

      IF ProdOrderRtngLine.FIND('-') THEN
        REPEAT
          SetRoutingFilter(
            ProdOrderRtngLine2,ProdOrderRtngLine.Status,ProdOrderRtngLine."Prod. Order No.",
            ProdOrderRtngLine."Routing No.",ProdOrderRtngLine."Routing Reference No.");
          ProdOrderRtngLine2.SETFILTER("Operation No.",ProdOrderRtngLine."Next Operation No.");
          IF ProdOrderRtngLine2.ISEMPTY THEN
            ERROR(Text008,ProdOrderRtngLine."Routing No.");
        UNTIL ProdOrderRtngLine.NEXT = 0;
    END;

    [External]
    PROCEDURE UpdateComponentsBin@13(VAR FilteredProdOrderRtngLineSet@1000 : Record 5409;IgnoreErrors@1005 : Boolean) : Boolean;
    VAR
      ProdOrderComponent@1001 : Record 5407;
      ProdOrderLine@1002 : Record 5406;
      BinCode@1003 : Code[20];
      AutoUpdateCompBinCode@1004 : Boolean;
      ErrorOccured@1006 : Boolean;
      SkipUpdate@1007 : Boolean;
    BEGIN
      OnBeforeUpdateComponentsBin(FilteredProdOrderRtngLineSet,SkipUpdate,ErrorOccured,AutoUpdateCompBinCode);
      IF SkipUpdate THEN
        EXIT(NOT ErrorOccured);

      WITH FilteredProdOrderRtngLineSet DO BEGIN
        IF NOT FINDFIRST THEN
          EXIT;
        SetOrderLineRoutingFilter(ProdOrderLine,Status,"Prod. Order No.","Routing No.","Routing Reference No.");
        IF ProdOrderLine.FINDSET(FALSE) THEN
          REPEAT
            ProdOrderComponent.SETCURRENTKEY(Status,"Prod. Order No.","Prod. Order Line No.","Line No.");
            ProdOrderComponent.SETRANGE(Status,Status);
            ProdOrderComponent.SETRANGE("Prod. Order No.","Prod. Order No.");
            ProdOrderComponent.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
            ProdOrderComponent.SETRANGE("Location Code",ProdOrderLine."Location Code");
            IF ProdOrderComponent.FINDSET(TRUE) THEN
              REPEAT
                IF IgnoreErrors THEN
                  ProdOrderComponent.SetIgnoreErrors;
                BinCode := ProdOrderComponent.GetDefaultConsumptionBin(FilteredProdOrderRtngLineSet);
                IF BinCode <> ProdOrderComponent."Bin Code" THEN BEGIN
                  IF NOT AutoUpdateCompBinCode THEN
                    IF CONFIRM(Text009,FALSE) THEN
                      AutoUpdateCompBinCode := TRUE
                    ELSE
                      EXIT;
                  ProdOrderComponent.VALIDATE("Bin Code",BinCode);
                  ProdOrderComponent.MODIFY;
                  IF ProdOrderComponent.HasErrorOccured THEN
                    ErrorOccured := TRUE;
                END;
              UNTIL ProdOrderComponent.NEXT = 0;
          UNTIL ProdOrderLine.NEXT = 0;
      END;
      EXIT(NOT ErrorOccured);
    END;

    LOCAL PROCEDURE SetRoutingFilter@15(VAR ProdOrderRtngLine@1000 : Record 5409;Status@1001 : Option;ProdOrderNo@1002 : Code[20];RoutingNo@1004 : Code[20];RoutingRefNo@1003 : Integer);
    BEGIN
      ProdOrderRtngLine.SETRANGE(Status,Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderRtngLine.SETRANGE("Routing Reference No.",RoutingRefNo);
      ProdOrderRtngLine.SETRANGE("Routing No.",RoutingNo);
    END;

    LOCAL PROCEDURE SetOrderLineRoutingFilter@17(VAR ProdOrderLine@1004 : Record 5406;Status@1003 : Option;ProdOrderNo@1002 : Code[20];RoutingNo@1001 : Code[20];RoutingRefNo@1000 : Integer);
    BEGIN
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderLine.SETRANGE("Routing Reference No.",RoutingRefNo);
      ProdOrderLine.SETRANGE("Routing No.",RoutingNo);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcPreviousOperations@16(ProdOrderLine@1001 : Record 5406;VAR IsHandled@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSetNextOperations@14(ProdOrderLine@1000 : Record 5406;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeUpdateComponentsBin@18(VAR ProdOrderRoutingLine@1000 : Record 5409;VAR SkipUpdate@1001 : Boolean;VAR ErrorOccured@1002 : Boolean;VAR AutoUpdateCompBinCode@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalculateOnAfterCalcScrapQtyAndFactor@19(VAR ProdOrderRoutingLine@1000 : Record 5409;VAR ScrapQty@1001 : Decimal;VAR ScrapFactor@1002 : Decimal);
    BEGIN
    END;

    BEGIN
    END.
  }
}

