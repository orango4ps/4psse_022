OBJECT XMLport 11012344 Import ICM Order Confirmations
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Import ICM Order Confirmations;
               SVE=Importera ICM-orderbekr„ftelser];
    DefaultFieldsValidation=No;
    TextEncoding=WINDOWS;
    OnPreXMLport=BEGIN
                   PurchSetupRec.GET;
                   currXMLport.FILENAME(gPathNameTxt);

                   LineCounter := 1;
                 END;

    OnPostXMLport=VAR
                    OrderConfHeader@1100525004 : Record 11012324;
                    OrderConfLine@1100525003 : Record 11012325;
                    FileMgt@1100525005 : Codeunit 419;
                    OrdRecCounter@1100525002 : Integer;
                    ImportError@1100525001 : Boolean;
                    PurchHeaderRec@1100525000 : Record 38;
                  BEGIN
                    WITH "ICM Order Confirmation Buffer" DO BEGIN
                      //First Process Header
                      ImportError := FALSE;
                      SETFILTER("Line No.",'%1..%2',1,20);
                      IF FIND('-') THEN BEGIN
                        OrderConfHeader.INIT;
                        OrderConfHeader."Confirmation/Error" := "gConfirmation/Error";
                        OrderConfHeader."Order No." := gOrderNoCde;
                        OrderConfHeader."Entry No." := gSeqNoInt;
                        REPEAT
                          //Actual Shipment Date
                          IF "Line No." = 8 THEN BEGIN
                            OrderConfHeader."Actual Shipment (Text)" := Value;
                            ConvertShipmentDate(OrderConfHeader);  //db, 26-06-08: M9913
                          END;

                          //Net Order Value
                          IF "Line No." = 9 THEN BEGIN
                            IF Value <> '' THEN BEGIN
                              EVALUATE(OrderConfHeader."Net Order Value",Value);
                              OrderConfHeader."Net Order Value" := OrderConfHeader."Net Order Value"/100;
                            END ELSE
                              OrderConfHeader."Net Order Value" := 0;
                          END;

                          //Error Message 1 (Address/Login-data)
                          IF  "Line No." = 10 THEN BEGIN
                            IF Value <> '' THEN BEGIN
                              ImportError := TRUE;
                              OrderConfHeader."Error Message 1" := COPYSTR(Value, 1, MAXSTRLEN(OrderConfHeader."Error Message 1"));  //db, 05-01-10
                            END ELSE BEGIN
                              OrderConfHeader."Error Message 1" := '';
                            END;
                          END;

                          //Error Message 2 (Delivery Date)
                          IF "Line No." = 11 THEN BEGIN
                            IF Value <> '' THEN BEGIN
                              ImportError := TRUE;
                              OrderConfHeader."Error Message 2" := COPYSTR(Value, 1, MAXSTRLEN(OrderConfHeader."Error Message 2"));  //db, 05-01-10
                            END ELSE BEGIN
                              OrderConfHeader."Error Message 2" := '';
                            END;
                          END;

                          //Error Message 3 (Order Lines)
                          IF "Line No." = 12 THEN BEGIN
                            IF Value <> '' THEN BEGIN
                              ImportError := TRUE;
                              OrderConfHeader."Error Message 3" := COPYSTR(Value, 1, MAXSTRLEN(OrderConfHeader."Error Message 3"));  //db, 05-01-10
                            END ELSE BEGIN
                              OrderConfHeader."Error Message 3" := '';
                            END;
                          END;

                          //Error Message 4 (Order Header)
                          IF "Line No." = 13 THEN BEGIN
                            IF Value <> '' THEN BEGIN
                              ImportError := TRUE;
                              OrderConfHeader."Error Message 4" := COPYSTR(Value, 1, MAXSTRLEN(OrderConfHeader."Error Message 4"));  //db, 05-01-10
                            END ELSE BEGIN
                              OrderConfHeader."Error Message 4" := '';
                            END;
                          END;

                          //Order Number Vendor
                          IF "Line No." = 14 THEN BEGIN
                            IF Value <> '' THEN
                              OrderConfHeader."Order Number Vendor" := Value
                            ELSE
                              OrderConfHeader."Order Number Vendor" := '';
                          END;
                        UNTIL NEXT = 0;

                        IF ImportError THEN
                          OrderConfHeader."Confirmation/Error" := OrderConfHeader."Confirmation/Error"::Error;

                        OrderConfHeader.INSERT;
                      END;

                      //Then Process Lines
                      SETFILTER("Line No.",'%1..',21);
                      IF FIND('-') THEN BEGIN
                        OrdRecCounter := 1;
                        OrderConfLine.INIT;
                        REPEAT
                          //Number Confirmed
                          IF OrdRecCounter = 1 THEN BEGIN
                            IF Value <> '' THEN
                              EVALUATE(OrderConfLine.Quantity,Value)
                            ELSE
                              OrderConfLine.Quantity := 0;
                          END;

                          //ItemNumber
                          IF OrdRecCounter = 2 THEN BEGIN
                            IF Value <> '' THEN BEGIN
                              //StripZero(Value);
                              OrderConfLine.ItemNumber := Value;
                            END ELSE
                              OrderConfLine.ItemNumber := '';
                          END;

                          //VendorInfo
                          IF OrdRecCounter = 4 THEN BEGIN
                            IF Value <> '' THEN
                              OrderConfLine.VendorInfo := COPYSTR(Value,1,MAXSTRLEN(OrderConfLine.VendorInfo))
                            ELSE
                              OrderConfLine.VendorInfo := '';
                          END;

                          //Error message
                          IF OrdRecCounter = 5 THEN BEGIN
                            IF Value <> '' THEN BEGIN
                              ImportError := TRUE;
                              OrderConfLine."Error message" := COPYSTR(Value,1,MAXSTRLEN(OrderConfLine."Error message"));
                            END ELSE BEGIN
                              OrderConfLine."Error message" := '';
                            END;
                          END;

                          //Net Linevalue
                          IF OrdRecCounter = 6 THEN BEGIN
                            IF Value <> '' THEN BEGIN
                              EVALUATE(OrderConfLine."Net Linevalue",Value);
                              OrderConfLine."Net Linevalue" := OrderConfLine."Net Linevalue" / 100;
                            END ELSE BEGIN
                              OrderConfLine."Net Linevalue" := 0;
                            END;
                            OrderConfLine."Confirmation/Error" := "gConfirmation/Error";
                            OrderConfLine."Order No." := gOrderNoCde;
                            OrderConfLine."Entry No." := gSeqNoInt;
                            OrderConfLine."Line No." := OrderConfLine."Line No." + 10000;
                            OrderConfLine.INSERT;
                            CheckPricePurchOrderLine(OrderConfLine);
                            UpdatePromisedReceiptDate(OrderConfHeader, OrderConfLine);  //db, 26-06-08: M9913

                            OrdRecCounter := 0;
                            OrderConfLine.INIT;
                          END;
                          OrdRecCounter := OrdRecCounter + 1;
                        UNTIL NEXT = 0;
                      END;

                      IF ImportError = FALSE THEN BEGIN  //db, 10-12-08: M13552
                        PurchHeaderRec.SETRANGE("Document Type", PurchHeaderRec."Document Type"::Order);
                        PurchHeaderRec.SETRANGE("No.", gOrderNoCde);
                        IF PurchHeaderRec.FINDSET(TRUE, FALSE) THEN BEGIN
                          IF OrderConfHeader."Actual Shipment (Date)" <> 0D THEN BEGIN
                            PurchHeaderRec."Promised Receipt Date" := OrderConfHeader."Actual Shipment (Date)";
                            PurchHeaderRec.MODIFY;
                          END;
                        END;
                      END;

                      SETRANGE("Line No.");
                      DELETEALL;
                    END;

                    FileMgt.RenameClientFile(currXMLport.FILENAME, gPathNameRewriteTxt, TRUE);
                  END;

    Format=Fixed Text;
    TableSeparator=<None>;
    UseRequestPage=No;
  }
  ELEMENTS
  {
    { [{F7170F2A-79FB-4885-9E23-002BBBF1E37C}];  ;Root                ;Element ;Text     }

    { [{BD36C9AA-267C-469E-90BC-FF9C29AB675A}];1 ;ICMOrderConfirmationBuffer;Element;Table;
                                                  SourceTable=Table11012323;
                                                  Import::OnBeforeInsertRecord=BEGIN
                                                                                 IF LineCounter <= 20 THEN
                                                                                   "ICM Order Confirmation Buffer".Type := "ICM Order Confirmation Buffer".Type::Header
                                                                                 ELSE
                                                                                   "ICM Order Confirmation Buffer".Type := "ICM Order Confirmation Buffer".Type::Order;

                                                                                 "ICM Order Confirmation Buffer"."Line No." := LineCounter;
                                                                                 LineCounter := LineCounter + 1;

                                                                                 RecRef.GETTABLE("ICM Order Confirmation Buffer");
                                                                                 XMLportStatusDialogMgt.ShowImportStatus(RecRef);
                                                                               END;
                                                                                }

    { [{4240D904-0CD4-40AB-8E40-3EFEDBB90999}];2 ;Value               ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=ICM Order Confirmation Buffer::Value;
                                                  MinOccurs=Zero;
                                                  Width=250 }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      PurchSetupRec@1100525008 : Record 312;
      RecRef@1100525006 : RecordRef;
      XMLportStatusDialogMgt@1100525009 : Codeunit 11130006;
      LineCounter@1100525007 : Integer;
      gPathNameTxt@1100525004 : Text[250];
      gPathNameRewriteTxt@1100525003 : Text[250];
      gOrderNoCde@1100525002 : Code[20];
      gSeqNoInt@1100525001 : Integer;
      "gConfirmation/Error"@1100525000 : 'Confirmation,Error';
      Text001@1100525005 : TextConst 'ENU=Price difference out of margins;SVE=Prisskillnad ur marginaler';

    PROCEDURE SetSelection@1(lPathNameTxt@11012000 : Text[250];lPathNameRewriteTxt@1210190000 : Text[250];lOrderNoCde@11012001 : Code[20];lSeqNoInt@11012002 : Integer;"lConfirmation/Error"@11012003 : 'Confirmation,Error');
    BEGIN
      gPathNameTxt := lPathNameTxt;
      gPathNameRewriteTxt := lPathNameRewriteTxt;
      gOrderNoCde := lOrderNoCde;
      gSeqNoInt := lSeqNoInt;
      "gConfirmation/Error" := "lConfirmation/Error";
    END;

    PROCEDURE StripZero@1210190000(VAR convtext@11012000 : Text[30]);
    VAR
      Position@11012001 : Integer;
    BEGIN
      Position := STRPOS(convtext,'0');
      WHILE Position = 1 DO
        BEGIN
          convtext := DELSTR(convtext,Position,1);
          Position  := STRPOS(convtext,'0');
        END;
    END;

    PROCEDURE CheckPricePurchOrderLine@1210190002(IOrderConfLineRec@1210190001 : Record 11012325);
    VAR
      lvOrderConfLineRec@1210190003 : Record 11012325;
      lvPurchOrderLineRec@1210190000 : Record 39;
      lvLineNo@1210190004 : Integer;
      lvPriceDiff@1210190002 : Decimal;
    BEGIN
      IF (PurchSetupRec."Margin Amount (Detail)" = 0) AND (PurchSetupRec."Margin % (Detail)" = 0) THEN
        EXIT;

      IF (IOrderConfLineRec."Confirmation/Error" <> IOrderConfLineRec."Confirmation/Error"::Confirmation) OR
         (IOrderConfLineRec."Error message" <> '') OR
         (IOrderConfLineRec.ItemNumber = '') OR
         (IOrderConfLineRec."Net Linevalue" <= 0)
      THEN
        EXIT;

      lvPurchOrderLineRec.RESET;
      lvPurchOrderLineRec.SETRANGE("Document Type", lvPurchOrderLineRec."Document Type"::Order);
      lvPurchOrderLineRec.SETRANGE("Document No.", IOrderConfLineRec."Order No.");
      lvPurchOrderLineRec.SETRANGE("Trade Item",IOrderConfLineRec.ItemNumber);
      IF NOT lvPurchOrderLineRec.FINDFIRST THEN
        EXIT;

      IF IOrderConfLineRec.Quantity <> 0 THEN
        lvPriceDiff := ABS((IOrderConfLineRec."Net Linevalue"/IOrderConfLineRec.Quantity) - lvPurchOrderLineRec."Direct Unit Cost");
      IF lvPriceDiff = 0 THEN
        EXIT;

      IF ((lvPriceDiff > PurchSetupRec."Margin Amount (Detail)") AND
          (PurchSetupRec."Margin Amount (Detail)" <> 0)) OR
      // (((lvPriceDiff/lvPurchOrderLineRec."Direct Unit Cost" * 100) > PurchSetupRec."Margin % (Detail)") AND  //db, 23-09-14: C017577
         (((lvPriceDiff * 100) > (PurchSetupRec."Margin % (Detail)" * lvPurchOrderLineRec."Direct Unit Cost")) AND
          (PurchSetupRec."Margin % (Detail)" <> 0))
      THEN BEGIN
        // Line No. not in same series (10000, 20000, etc.) because in some cases this gives problems (already exist).
        lvLineNo := IOrderConfLineRec."Line No.";
        lvOrderConfLineRec.SETRANGE("Confirmation/Error", lvOrderConfLineRec."Confirmation/Error"::Error);
        lvOrderConfLineRec.SETRANGE("Order No.", IOrderConfLineRec."Order No.");
        lvOrderConfLineRec.SETRANGE("Entry No.", IOrderConfLineRec."Entry No.");
        lvOrderConfLineRec.SETRANGE("Line No.", (lvLineNo + 1) , (lvLineNo + 9999));
        IF lvOrderConfLineRec.FIND('+') THEN
          lvLineNo := lvOrderConfLineRec."Line No.";

        lvOrderConfLineRec.RESET;
        lvOrderConfLineRec := IOrderConfLineRec;

        lvOrderConfLineRec."Confirmation/Error" := lvOrderConfLineRec."Confirmation/Error"::Error;
        lvOrderConfLineRec."Line No." := lvLineNo + 1;
        lvOrderConfLineRec.VendorInfo := '';
        lvOrderConfLineRec."Error message" := Text001;
        lvOrderConfLineRec.INSERT;
      END ELSE BEGIN
        lvPurchOrderLineRec.SuspendStatusCheck(TRUE);  //db, 16-03-09: M14657
        lvPurchOrderLineRec.VALIDATE("Direct Unit Cost", (IOrderConfLineRec."Net Linevalue"/IOrderConfLineRec.Quantity));
        lvPurchOrderLineRec.MODIFY(TRUE);
      END;
    END;

    PROCEDURE UpdatePromisedReceiptDate@1100485001(IOrderConfHeaderRec@1100485001 : Record 11012324;IOrderConfLineRec@1100485000 : Record 11012325);
    VAR
      lvPurchOrderLineRec@1100485002 : Record 39;
    BEGIN
      //db, 26-06-08: M9913
      IF IOrderConfHeaderRec."Actual Shipment (Date)" = 0D THEN EXIT;
      IF IOrderConfLineRec."Error message" <> '' THEN EXIT;  //db, 10-12-08

      lvPurchOrderLineRec.RESET;
      lvPurchOrderLineRec.SETRANGE("Document Type", lvPurchOrderLineRec."Document Type"::Order);
      lvPurchOrderLineRec.SETRANGE("Document No.", IOrderConfLineRec."Order No.");
      lvPurchOrderLineRec.SETRANGE("Trade Item",IOrderConfLineRec.ItemNumber);
      IF lvPurchOrderLineRec.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          lvPurchOrderLineRec.SuspendStatusCheck(TRUE);  //db, 16-03-09: M14657
          lvPurchOrderLineRec.VALIDATE("Promised Receipt Date", IOrderConfHeaderRec."Actual Shipment (Date)");
          lvPurchOrderLineRec.MODIFY(TRUE);
          UpdatePromisedReceiptDateRemCo(lvPurchOrderLineRec);
        UNTIL lvPurchOrderLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE UpdatePromisedReceiptDateRemCo@1100525000(IPurchaseLine@1100525000 : Record 39);
    VAR
      PurchaseLine@1100525001 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type", IPurchaseLine."Document Type");
      PurchaseLine.SETRANGE("Document No.", IPurchaseLine."Document No.");
      PurchaseLine.SETFILTER("Line No.", '>%1', IPurchaseLine."Line No.");
      IF PurchaseLine.FINDSET(TRUE, FALSE) THEN
        IF PurchaseLine."Removal Contribution" THEN BEGIN
          PurchaseLine.SuspendStatusCheck(TRUE);
          PurchaseLine.VALIDATE("Promised Receipt Date", IPurchaseLine."Promised Receipt Date");
          PurchaseLine.MODIFY(TRUE);
        END;
    END;

    PROCEDURE ConvertShipmentDate@1100485002(VAR OrderConfHeader@1100485000 : Record 11012324);
    VAR
      lvDay@1100485008 : Integer;
      lvMonth@1100485007 : Integer;
      lvYear@1100485006 : Integer;
      lvPos@1100485005 : Integer;
      lvPos1@1100485004 : Integer;
      lvPos2@1100485003 : Integer;
      lvPos3@1100485002 : Integer;
      lvText@1100485001 : Text[250];
      DayHas2Digits@1100528400 : Boolean;
    BEGIN
      //db, 26-06-08: M9913
      WITH OrderConfHeader DO BEGIN
        IF STRLEN("Actual Shipment (Text)") = 10 THEN BEGIN
          IF (COPYSTR("Actual Shipment (Text)",3,1) = '-') AND
             (COPYSTR("Actual Shipment (Text)",6,1) = '-') THEN BEGIN  //dd-mm-eeyy
            EVALUATE(lvDay, COPYSTR("Actual Shipment (Text)",1,2));
            EVALUATE(lvMonth, COPYSTR("Actual Shipment (Text)",4,2));
            EVALUATE(lvYear, COPYSTR("Actual Shipment (Text)",7,4));
            "Actual Shipment (Date)" := DMY2DATE(lvDay, lvMonth, lvYear);
            EXIT;
          END;
          IF (COPYSTR("Actual Shipment (Text)",5,1) = '-') AND
             (COPYSTR("Actual Shipment (Text)",8,1) = '-') THEN BEGIN  //eeyy-mm-dd
            EVALUATE(lvDay, COPYSTR("Actual Shipment (Text)",9,2));
            EVALUATE(lvMonth, COPYSTR("Actual Shipment (Text)",6,2));
            EVALUATE(lvYear, COPYSTR("Actual Shipment (Text)",1,4));
            "Actual Shipment (Date)" := DMY2DATE(lvDay, lvMonth, lvYear);
            EXIT;
          END;
        END;
        IF STRLEN("Actual Shipment (Text)") > 10 THEN BEGIN  //official date format: thursday 26 june 2008
          lvPos := 0;
          WHILE lvPos < STRLEN("Actual Shipment (Text)") DO BEGIN
            lvPos := lvPos + 1;
            IF NumericCharacter(COPYSTR("Actual Shipment (Text)", lvPos, 1)) THEN BEGIN
              IF lvPos1 = 0 THEN
                lvPos1 := lvPos;
              IF lvPos = lvPos1 THEN
                EVALUATE(lvDay, COPYSTR("Actual Shipment (Text)",lvPos1,1));
              IF lvPos = lvPos1+1 THEN BEGIN
                EVALUATE(lvDay, COPYSTR("Actual Shipment (Text)",lvPos1,2));
                DayHas2Digits := TRUE;
              END;
              IF lvPos > lvPos1+1 THEN BEGIN
                IF lvPos2 = 0 THEN
                  lvPos2 := lvPos;
                IF lvPos = lvPos2 THEN
                  EVALUATE(lvYear, COPYSTR("Actual Shipment (Text)",lvPos2,1));
                IF lvPos = lvPos2+1 THEN
                  EVALUATE(lvYear, COPYSTR("Actual Shipment (Text)",lvPos2,2));
                IF lvPos = lvPos2+2 THEN
                  EVALUATE(lvYear, COPYSTR("Actual Shipment (Text)",lvPos2,3));
                IF lvPos = lvPos2+3 THEN
                  EVALUATE(lvYear, COPYSTR("Actual Shipment (Text)",lvPos2,4));
              END;
            END;
          END;
          IF (lvPos1 <> 0) AND (lvPos2 > lvPos1) THEN BEGIN
            IF DayHas2Digits THEN
              lvPos3 := lvPos1 + 3
            ELSE
              lvPos3 := lvPos1 + 2;
            lvText := COPYSTR("Actual Shipment (Text)", lvPos3, lvPos2-lvPos3);
            CASE COPYSTR(lvText,1,3) OF
              'jan': lvMonth := 1;
              'feb': lvMonth := 2;
              'maa': lvMonth := 3;
              'apr': lvMonth := 4;
              'mei': lvMonth := 5;
              'jun': lvMonth := 6;
              'jul': lvMonth := 7;
              'aug': lvMonth := 8;
              'sep': lvMonth := 9;
              'okt': lvMonth := 10;
              'nov': lvMonth := 11;
              'dec': lvMonth := 12;
            END;
            IF lvMonth <> 0 THEN
              "Actual Shipment (Date)" := DMY2DATE(lvDay, lvMonth, lvYear);
          END;
        END;
      END;
    END;

    PROCEDURE NumericCharacter@1100485000(lvText@1100485000 : Text[30]) : Boolean;
    BEGIN
      //db, 26-06-08: M9913
      IF STRPOS(lvText, '0') > 0 THEN EXIT(TRUE);
      IF STRPOS(lvText, '1') > 0 THEN EXIT(TRUE);
      IF STRPOS(lvText, '2') > 0 THEN EXIT(TRUE);
      IF STRPOS(lvText, '3') > 0 THEN EXIT(TRUE);
      IF STRPOS(lvText, '4') > 0 THEN EXIT(TRUE);
      IF STRPOS(lvText, '5') > 0 THEN EXIT(TRUE);
      IF STRPOS(lvText, '6') > 0 THEN EXIT(TRUE);
      IF STRPOS(lvText, '7') > 0 THEN EXIT(TRUE);
      IF STRPOS(lvText, '8') > 0 THEN EXIT(TRUE);
      IF STRPOS(lvText, '9') > 0 THEN EXIT(TRUE);

      EXIT(FALSE);
    END;

    BEGIN
    {
      CC: Datapport 11012324
    }
    END.
  }
}

