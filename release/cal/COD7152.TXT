OBJECT Codeunit 7152 Export Item Analysis View
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Item@1007 : Record 27;
      TempDimValue2@1042 : TEMPORARY Record 349;
      TempDimValue3@1037 : TEMPORARY Record 349;
      TempExcelBuffer@1028 : TEMPORARY Record 370;
      FileMgt@1039 : Codeunit 419;
      NoOfColumns@1001 : Integer;
      MaxLevelDim@1019 : ARRAY [3] OF Integer;
      Text000@1012 : TextConst 'ENU=You can only export Actual amounts and Budgeted amounts.\Please change the option in the Show field.;NOR=Du kan bare eksportere faktiske og budsjetterte belõp.\Endre alternativet i visningsfeltet.;SVE=Du kan bara exportera aktuella belopp och budgeterade belopp.\éndra alternativet i visa fÑlt.';
      Text002@1023 : TextConst 'ENU=General Info._;NOR=Generell info._;SVE=AllmÑn info._';
      Text003@1020 : TextConst 'ENU=None;NOR=Ingen;SVE=Ingen';
      Text004@1033 : TextConst 'ENU=Day;NOR=Dag;SVE=Dag';
      Text005@1024 : TextConst 'ENU=Week;NOR=Uke;SVE=Vecka';
      Text006@1014 : TextConst 'ENU=Month;NOR=MÜned;SVE=MÜnad';
      Text007@1025 : TextConst 'ENU=Quarter;NOR=Kvartal;SVE=Kvartal';
      Text008@1026 : TextConst 'ENU=Year;NOR=èr;SVE=èr';
      Text009@1027 : TextConst 'ENU=Accounting Period;NOR=Regnskapsperiode;SVE=Bokfîringsperiod';
      Text011@1029 : TextConst 'ENU="Analysis by Dimension ";NOR="Analyse per dimensjon ";SVE="Analys per dimension "';
      Text012@1030 : TextConst 'ENU=Amount Type;NOR=Belõpstype;SVE=Beloppstyp';
      Text015@1018 : TextConst 'ENU=Date Filter;NOR=Datofilter;SVE=Datumfilter';
      Text016@1022 : TextConst 'ENU=Budget Filter;NOR=Budsjettfilter;SVE=Budgetfilter';
      Text018@1017 : TextConst 'ENU=Item;NOR=Vare;SVE=Artikel';
      Text020@1021 : TextConst 'ENU=Budg. Sales Amount;NOR=Budsjettert salgsbelõp;SVE=Budg. fîrsÑljningsbelopp';
      Text022@1043 : TextConst 'ENU=Level;NOR=NivÜ;SVE=NivÜ';
      Text023@1040 : TextConst 'ENU=Analysis View Name;NOR=Analysevisningsnavn;SVE=Analysvynamn';
      Text028@1048 : TextConst 'ENU=Show Opposite Sign;NOR=Vis motsatt fortegn;SVE=Visa motsatt tecken';
      Text029@1004 : TextConst 'ENU=Yes;NOR=Ja;SVE=Ja';
      Text030@1003 : TextConst 'ENU=No;NOR=Nei;SVE=Nej';
      Text031@1051 : TextConst 'ENU=Data_;NOR=Data_;SVE=Data_';
      Text032@1000 : TextConst 'ENU=Sales Amount;NOR=Salgsbelõp;SVE=FîrsÑljningsbelopp';
      Text033@1053 : TextConst 'ENU=Cost Amount;NOR=Kostbelõp;SVE=Kostnadsbelopp';
      Text035@1055 : TextConst 'ENU=Budg. Cost Amount;NOR=Budsjettert kostbelõp;SVE=Budg. kostnadsbelopp';
      Text036@1056 : TextConst 'ENU=Budg. Quantity;NOR=Budsjettert antall;SVE=Budg. antal';
      Text039@1036 : TextConst 'ENU=Location;NOR=Lokasjon;SVE=LagerstÑlle';
      ServerFileName@1016 : Text;
      SkipDownload@1015 : Boolean;

    [Internal]
    PROCEDURE ExportData@3(VAR ItemAnalysisViewEntry@1000 : Record 7154;ShowName@1011 : Boolean;DateFilter@1013 : Text;ItemFilter@1004 : Text;BudgetFilter@1014 : Text;Dim1Filter@1015 : Text;Dim2Filter@1017 : Text;Dim3Filter@1018 : Text;ShowActualBudg@1024 : 'Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%';LocationFilter@1031 : Text;Sign@1006 : Boolean);
    BEGIN
      IF (ShowActualBudg <> 0) AND (ShowActualBudg <> 1) THEN
        ERROR(Text000);

      ServerFileName := FileMgt.ServerTempFileName('xlsx');
      CreateFillGeneralInfoSheet(
        ItemAnalysisViewEntry,Sign,DateFilter,ItemFilter,BudgetFilter,Dim1Filter,Dim2Filter,Dim3Filter,LocationFilter);

      TempExcelBuffer.CreateBook(ServerFileName,STRSUBSTNO('%1%2',Text002,ItemAnalysisViewEntry."Analysis View Code"));
      TempExcelBuffer.WriteSheet(STRSUBSTNO('%1%2',Text002,ItemAnalysisViewEntry."Analysis View Code"),COMPANYNAME,USERID);

      CreateDataSheet(
        ItemAnalysisViewEntry,ShowName,ItemFilter,Dim1Filter,Dim2Filter,
        Dim3Filter,DateFilter,LocationFilter,BudgetFilter,Sign);

      TempExcelBuffer.SelectOrAddSheet(STRSUBSTNO('%1%2',Text031,ItemAnalysisViewEntry."Analysis View Code"));
      TempExcelBuffer.WriteAllToCurrentSheet(TempExcelBuffer);

      TempExcelBuffer.CloseBook;

      IF NOT SkipDownload THEN
        TempExcelBuffer.OpenExcel;
    END;

    LOCAL PROCEDURE CreateDataSheet@1(VAR ItemAnalysisViewEntry@1000 : Record 7154;ShowName@1018 : Boolean;ItemFilter@1020 : Text;Dim1Filter@1025 : Text;Dim2Filter@1024 : Text;Dim3Filter@1023 : Text;DateFilter@1011 : Text;LocationFilter@1030 : Text;BudgetFilter@1045 : Text;Sign@1009 : Boolean);
    VAR
      ItemAnalysisViewEntry2@1001 : Record 7154;
      ItemAnalysisView@1002 : Record 7152;
      StartDate@1028 : Date;
      EndDate@1013 : Date;
      WeekNo@1029 : Integer;
      Year@1026 : Integer;
      SignValue@1007 : Integer;
      NoOfLeadingColumns@1006 : Integer;
    BEGIN
      TempExcelBuffer.DELETEALL;

      ItemAnalysisViewEntry2.COPY(ItemAnalysisViewEntry);
      ItemAnalysisView.GET(ItemAnalysisViewEntry."Analysis Area",ItemAnalysisViewEntry."Analysis View Code");
      ItemAnalysisViewEntry2.SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area");
      ItemAnalysisViewEntry2.SETRANGE("Analysis View Code",ItemAnalysisView.Code);

      FindDimLevel(ItemAnalysisView."Dimension 1 Code",Dim1Filter,1);
      FindDimLevel(ItemAnalysisView."Dimension 2 Code",Dim2Filter,2);
      FindDimLevel(ItemAnalysisView."Dimension 3 Code",Dim3Filter,3);

      SignValue := 1;
      IF Sign THEN
        SignValue := -1;

      CreateRowWithColumnsCaptions(ItemAnalysisViewEntry2,ItemAnalysisView);

      CreateItemAnalysisViewEntryPart(ItemAnalysisViewEntry2,ItemAnalysisView,StartDate,EndDate,ShowName,SignValue);

      CreateItemAnalysisViewBudgetEntryPart(ItemAnalysisView,StartDate,EndDate,DateFilter,
        ItemFilter,LocationFilter,BudgetFilter,Dim1Filter,Dim2Filter,Dim3Filter,ShowName,SignValue);

      IF ItemFilter <> '' THEN
        Item.SETFILTER("No.",ItemFilter);
      IF Item.FIND('-') THEN
        REPEAT
          IF NOT Item.MARK THEN BEGIN
            FillOutItem(Item."No.",ShowName);
            StartNewRow;
          END;
        UNTIL Item.NEXT = 0;

      NoOfLeadingColumns := 1;
      IF ItemAnalysisView."Dimension 1 Code" <> '' THEN
        WriteDimLine(1,Dim1Filter,ItemAnalysisView."Dimension 1 Code",NoOfLeadingColumns,ShowName);
      NoOfLeadingColumns := NoOfLeadingColumns + MaxLevelDim[1] + 1;

      IF ItemAnalysisView."Dimension 2 Code" <> '' THEN
        WriteDimLine(2,Dim2Filter,ItemAnalysisView."Dimension 2 Code",NoOfLeadingColumns,ShowName);
      NoOfLeadingColumns := NoOfLeadingColumns + MaxLevelDim[2] + 1;

      IF ItemAnalysisView."Dimension 3 Code" <> '' THEN
        WriteDimLine(3,Dim3Filter,ItemAnalysisView."Dimension 3 Code",NoOfLeadingColumns,ShowName);
      NoOfLeadingColumns := NoOfLeadingColumns + MaxLevelDim[3] + 1;

      WeekNo := DATE2DWY(StartDate,2);
      Year := DATE2DWY(StartDate,3);
      StartDate := DWY2DATE(1,WeekNo,Year);

      NoOfLeadingColumns += 1;
      WHILE StartDate <= EndDate DO BEGIN
        SetStartColumnNo(NoOfLeadingColumns);
        FillNextCellInRow(FORMAT(CalculatePeriodStart(StartDate,0),0,9));
        FillNextCellInRow(FORMAT(CalculatePeriodStart(StartDate,1),0,9));
        FillNextCellInRow(FORMAT(CalculatePeriodStart(StartDate,2),0,9));
        FillNextCellInRow(FORMAT(CalculatePeriodStart(StartDate,3),0,9));
        FillNextCellInRow(FORMAT(CalculatePeriodStart(StartDate,4),0,9));
        StartNewRow;

        StartDate := CALCDATE('<1W>',StartDate);
      END;
    END;

    LOCAL PROCEDURE CreateFillGeneralInfoSheet@20(VAR ItemAnalysisViewEntry@1000 : Record 7154;Sign@1016 : Boolean;DateFilter@1005 : Text;ItemFilter@1006 : Text;BudgetFilter@1011 : Text;Dim1Filter@1010 : Text;Dim2Filter@1009 : Text;Dim3Filter@1008 : Text;LocationFilter@1012 : Text);
    VAR
      ItemAnalysisView@1001 : Record 7152;
      ItemAnalysisViewFilter@1003 : Record 7153;
      RowNoCount@1002 : Integer;
    BEGIN
      TempExcelBuffer.RESET;
      TempExcelBuffer.DELETEALL;

      WITH ItemAnalysisViewEntry DO BEGIN
        FillCell(1,1,ItemAnalysisView.TABLECAPTION);
        FillCell(2,2,FIELDCAPTION("Analysis View Code"));
        FillCell(2,3,"Analysis View Code");
        FillCell(3,2,Text023);
        ItemAnalysisView.GET("Analysis Area","Analysis View Code");
        FillCell(3,3,ItemAnalysisView.Name);
        RowNoCount := 3;
        IF ItemAnalysisView."Item Filter" <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          FillCell(RowNoCount,2,ItemAnalysisView.FIELDCAPTION("Item Filter"));
          FillCell(RowNoCount,3,ItemAnalysisView."Item Filter");
        END;
        RowNoCount := RowNoCount + 1;
        FillCell(RowNoCount,2,ItemAnalysisView.FIELDCAPTION("Date Compression"));
        CASE ItemAnalysisView."Date Compression" OF
          0:
            FillCell(RowNoCount,3,Text003);
          1:
            FillCell(RowNoCount,3,Text004);
          2:
            FillCell(RowNoCount,3,Text005);
          3:
            FillCell(RowNoCount,3,Text006);
          4:
            FillCell(RowNoCount,3,Text007);
          5:
            FillCell(RowNoCount,3,Text008);
          6:
            FillCell(RowNoCount,3,Text009);
        END;
        IF ItemAnalysisView."Starting Date" <> 0D THEN BEGIN
          RowNoCount := RowNoCount + 1;
          FillCell(RowNoCount,2,ItemAnalysisView.FIELDCAPTION("Starting Date"));
          FillCell(RowNoCount,3,FORMAT(ItemAnalysisView."Starting Date"));
        END;
        RowNoCount := RowNoCount + 1;
        FillCell(RowNoCount,2,ItemAnalysisView.FIELDCAPTION("Last Date Updated"));
        FillCell(RowNoCount,3,FORMAT(ItemAnalysisView."Last Date Updated"));
        ItemAnalysisViewFilter.SETRANGE("Analysis View Code","Analysis View Code");
        IF ItemAnalysisViewFilter.FINDSET THEN
          REPEAT
            RowNoCount := RowNoCount + 1;
            FillCell(RowNoCount,2,ItemAnalysisViewFilter."Dimension Code");
            FillCell(RowNoCount,3,ItemAnalysisViewFilter."Dimension Value Filter");
          UNTIL ItemAnalysisViewFilter.NEXT = 0;
        RowNoCount := RowNoCount + 1;
        FillCell(RowNoCount,1,Text011);
        RowNoCount := RowNoCount + 1;
        FillCell(RowNoCount,2,Text012);

        IF DateFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          FillCell(RowNoCount,2,Text015);
          FillCell(RowNoCount,3,DateFilter);
        END;
        IF ItemFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          FillCell(RowNoCount,2,ItemAnalysisView.FIELDCAPTION("Item Filter"));
          FillCell(RowNoCount,3,ItemFilter);
        END;
        IF LocationFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          FillCell(RowNoCount,2,Text039);
          FillCell(RowNoCount,3,LocationFilter);
        END;
        IF BudgetFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          FillCell(RowNoCount,2,Text016);
          FillCell(RowNoCount,3,BudgetFilter);
        END;

        IF Dim1Filter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          FillCell(RowNoCount,2,ItemAnalysisView."Dimension 1 Code");
          FillCell(RowNoCount,3,Dim1Filter);
        END;
        IF Dim2Filter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          FillCell(RowNoCount,2,ItemAnalysisView."Dimension 2 Code");
          FillCell(RowNoCount,3,Dim2Filter);
        END;
        IF Dim3Filter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          FillCell(RowNoCount,2,ItemAnalysisView."Dimension 3 Code");
          FillCell(RowNoCount,3,Dim3Filter);
        END;

        RowNoCount := RowNoCount + 1;
        FillCell(RowNoCount,2,Text028);
        IF Sign THEN
          FillCell(RowNoCount,3,Text029)
        ELSE
          FillCell(RowNoCount,3,Text030);
      END;
    END;

    LOCAL PROCEDURE CreateRowWithColumnsCaptions@27(ItemAnalysisViewEntry@1000 : Record 7154;ItemAnalysisView@1001 : Record 7152);
    VAR
      i@1002 : Integer;
    BEGIN
      WITH ItemAnalysisViewEntry DO BEGIN
        NoOfColumns := NoOfColumns + 1;
        FillCell(1,NoOfColumns,FORMAT(Text018) + ' ' + FORMAT(Text022) + ' ' + FORMAT(0));
        IF ItemAnalysisView."Dimension 1 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[1] DO BEGIN
            NoOfColumns := NoOfColumns + 1;
            FillCell(1,NoOfColumns,ItemAnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i));
          END;
        IF ItemAnalysisView."Dimension 2 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[2] DO BEGIN
            NoOfColumns := NoOfColumns + 1;
            FillCell(1,NoOfColumns,ItemAnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i));
          END;
        IF ItemAnalysisView."Dimension 3 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[3] DO BEGIN
            NoOfColumns := NoOfColumns + 1;
            FillCell(1,NoOfColumns,ItemAnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i));
          END;

        FillNextCellInRow(Text004);
        FillNextCellInRow(Text005);
        FillNextCellInRow(Text006);
        FillNextCellInRow(Text007);
        FillNextCellInRow(Text008);
        FillNextCellInRow(Text009);
        FillNextCellInRow(Text032);
        FillNextCellInRow(Text033);
        FillNextCellInRow(FIELDCAPTION(Quantity));
        FillNextCellInRow(Text039);
        FillNextCellInRow(Text020);
        FillNextCellInRow(Text035);
        FillNextCellInRow(Text036);

        StartNewRow;
      END;
    END;

    LOCAL PROCEDURE CreateItemAnalysisViewEntryPart@31(VAR ItemAnalysisViewEntry@1001 : Record 7154;ItemAnalysisView@1004 : Record 7152;VAR StartDate@1000 : Date;VAR EndDate@1002 : Date;ShowName@1003 : Boolean;SignValue@1005 : Integer);
    BEGIN
      WITH ItemAnalysisViewEntry DO BEGIN
        StartDate := "Posting Date";

        IF FIND('-') THEN
          REPEAT
            IF "Item No." <> Item."No." THEN
              IF Item.GET("Item No.") THEN
                Item.MARK(TRUE);
            IF "Posting Date" = NORMALDATE("Posting Date") THEN BEGIN
              IF "Posting Date" >= EndDate THEN
                EndDate := "Posting Date"
              ELSE
                IF "Posting Date" <= StartDate THEN
                  StartDate := "Posting Date";
              FillOutItem("Item No.",ShowName);
              IF ItemAnalysisView."Dimension 1 Code" <> '' THEN
                FillOutDim("Dimension 1 Value Code",ItemAnalysisView."Dimension 1 Code",1,ShowName);
              IF ItemAnalysisView."Dimension 2 Code" <> '' THEN
                FillOutDim("Dimension 2 Value Code",ItemAnalysisView."Dimension 2 Code",2,ShowName);
              IF ItemAnalysisView."Dimension 3 Code" <> '' THEN
                FillOutDim("Dimension 3 Value Code",ItemAnalysisView."Dimension 3 Code",3,ShowName);

              FillNextCellInRow(FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),-1),0,9));
              FillNextCellInRow(FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),0),0,9));
              FillNextCellInRow(FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),1),0,9));
              FillNextCellInRow(FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),2),0,9));
              FillNextCellInRow(FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),3),0,9));
              FillNextCellInRow(FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),4),0,9));
              FillNextCellInRow(FORMAT(("Sales Amount (Actual)" + "Sales Amount (Expected)") * SignValue,0,'<Standard Format,1>'));
              FillNextCellInRow(
                FORMAT(
                  ("Cost Amount (Actual)" + "Cost Amount (Expected)" + "Cost Amount (Non-Invtbl.)") * SignValue,
                  0,'<Standard Format,1>'));
              FillNextCellInRow(FORMAT(Quantity * SignValue,0,'<Standard Format,1>'));
              FillNextCellInRow(FORMAT("Location Code"));

              StartNewRow;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateItemAnalysisViewBudgetEntryPart@36(ItemAnalysisView@1004 : Record 7152;VAR StartDate@1003 : Date;VAR EndDate@1002 : Date;DateFilter@1006 : Text;ItemFilter@1007 : Text;LocationFilter@1008 : Text;BudgetFilter@1009 : Text;Dim1Filter@1010 : Text;Dim2Filter@1012 : Text;Dim3Filter@1011 : Text;ShowName@1001 : Boolean;SignValue@1000 : Integer);
    VAR
      ItemAnalysisViewBudgEntry@1005 : Record 7156;
    BEGIN
      WITH ItemAnalysisViewBudgEntry DO BEGIN
        SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area");
        SETRANGE("Analysis View Code",ItemAnalysisView.Code);
        SETFILTER("Posting Date",DateFilter);
        SETFILTER("Item No.",ItemFilter);
        SETFILTER("Location Code",LocationFilter);
        SETFILTER("Budget Name",BudgetFilter);
        SETFILTER("Dimension 1 Value Code",Dim1Filter);
        SETFILTER("Dimension 2 Value Code",Dim2Filter);
        SETFILTER("Dimension 3 Value Code",Dim3Filter);
        IF FIND('-') THEN
          REPEAT
            IF "Item No." <> Item."No." THEN
              IF Item.GET("Item No.") THEN
                Item.MARK(TRUE);
            IF "Posting Date" = NORMALDATE("Posting Date") THEN BEGIN
              IF "Posting Date" >= EndDate THEN
                EndDate := "Posting Date"
              ELSE
                IF "Posting Date" <= StartDate THEN
                  StartDate := "Posting Date";
              FillOutItem("Item No.",ShowName);

              IF ItemAnalysisView."Dimension 1 Code" <> '' THEN
                FillOutDim("Dimension 1 Value Code",ItemAnalysisView."Dimension 1 Code",1,ShowName);
              IF ItemAnalysisView."Dimension 2 Code" <> '' THEN
                FillOutDim("Dimension 2 Value Code",ItemAnalysisView."Dimension 2 Code",2,ShowName);
              IF ItemAnalysisView."Dimension 3 Code" <> '' THEN
                FillOutDim("Dimension 3 Value Code",ItemAnalysisView."Dimension 3 Code",3,ShowName);

              FillNextCellInRow(FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),-1),0,9));
              FillNextCellInRow(FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),0),0,9));
              FillNextCellInRow(FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),1),0,9));
              FillNextCellInRow(FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),2),0,9));
              FillNextCellInRow(FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),3),0,9));
              FillNextCellInRow(FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),4),0,9));
              FillNextCellInRow('');
              FillNextCellInRow('');
              FillNextCellInRow('');
              FillNextCellInRow(FORMAT("Location Code"));
              FillNextCellInRow(FORMAT("Sales Amount" * SignValue,0,'<Standard Format,1>'));
              FillNextCellInRow(FORMAT("Cost Amount" * SignValue,0,'<Standard Format,1>'));
              FillNextCellInRow(FORMAT(Quantity * SignValue,0,'<Standard Format,1>'));
              StartNewRow;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CalculatePeriodStart@4(PostingDate@1000 : Date;DateCompression@1001 : Integer) : Date;
    VAR
      AccountingPeriod@1002 : Record 50;
      PrevPostingDate@1004 : Date;
      PrevCalculatedPostingDate@1005 : Date;
    BEGIN
      CASE DateCompression OF
        0:// Week :
          PostingDate := CALCDATE('<CW+1D-1W>',PostingDate);
        1:// Month :
          PostingDate := CALCDATE('<CM+1D-1M>',PostingDate);
        2:// Quarter :
          PostingDate := CALCDATE('<CQ+1D-1Q>',PostingDate);
        3:// Year :
          PostingDate := CALCDATE('<CY+1D-1Y>',PostingDate);
        4:// Period :
          BEGIN
            IF PostingDate <> PrevPostingDate THEN BEGIN
              PrevPostingDate := PostingDate;
              AccountingPeriod.SETRANGE("Starting Date",0D,PostingDate);
              IF AccountingPeriod.FINDLAST THEN BEGIN
                PrevCalculatedPostingDate := AccountingPeriod."Starting Date"
              END ELSE
                PrevCalculatedPostingDate := PostingDate;
            END;
            PostingDate := PrevCalculatedPostingDate;
          END;
      END;
      EXIT(PostingDate);
    END;

    LOCAL PROCEDURE FindDimLevel@8(DimCode@1000 : Code[20];DimFilter@1001 : Text;ArrayNo@1003 : Integer);
    VAR
      DimValue@1002 : Record 349;
    BEGIN
      IF DimCode = '' THEN
        EXIT;
      DimValue.SETRANGE("Dimension Code",DimCode);
      IF DimValue.FIND('-') THEN
        REPEAT
          TempDimValue2.COPY(DimValue);
          TempDimValue2.INSERT;
          TempDimValue3.COPY(DimValue);
          TempDimValue3.INSERT;
        UNTIL DimValue.NEXT = 0;
      TempDimValue2.SETFILTER(Code,DimFilter);
      IF TempDimValue2.FIND('-') THEN
        REPEAT
          IF MaxLevelDim[ArrayNo] < TempDimValue2.Indentation THEN
            MaxLevelDim[ArrayNo] := TempDimValue2.Indentation;
        UNTIL TempDimValue2.NEXT = 0;
    END;

    LOCAL PROCEDURE FindDimParent@6(VAR Account@1000 : Code[20];DimensionCode@1001 : Code[20]);
    BEGIN
      TempDimValue3.RESET;
      TempDimValue3.SETRANGE("Dimension Code",DimensionCode);
      TempDimValue3.GET(DimensionCode,Account);
      IF TempDimValue3.Indentation <> 0 THEN BEGIN
        TempDimValue3.SETRANGE(Indentation,TempDimValue3.Indentation - 1);
        TempDimValue3.NEXT(-1);
      END;
      Account := TempDimValue3.Code;
    END;

    LOCAL PROCEDURE FillOutDim@9(DimValueCode@1003 : Code[20];DimCode@1004 : Code[20];DimNo@1005 : Integer;ShowName@1006 : Boolean);
    VAR
      ParentTempNameValueBuffer@1000 : TEMPORARY Record 823;
      DimensionValue@1008 : Record 349;
      Indent@1002 : Integer;
      i@1001 : Integer;
      DimValueCode2@1011 : Code[20];
    BEGIN
      IF DimValueCode <> '' THEN BEGIN
        IF TempDimValue2.GET(DimCode,DimValueCode) THEN
          TempDimValue2.MARK(TRUE)
        ELSE
          TempDimValue2.INIT;
        DimValueCode2 := DimValueCode;
        Indent := TempDimValue2.Indentation;
        IF (Indent <> 0) AND (DimValueCode2 <> '') THEN
          FOR i := Indent DOWNTO 1 DO BEGIN
            FindDimParent(DimValueCode2,DimCode);
            TempDimValue2.GET(DimCode,DimValueCode2);
            AddParentToBuffer(ParentTempNameValueBuffer,i,TempDimValue2.Code,TempDimValue2.Name);
          END;

        IF ParentTempNameValueBuffer.FINDSET THEN
          REPEAT
            AddAcc(ShowName,ParentTempNameValueBuffer.Name,ParentTempNameValueBuffer.Value);
          UNTIL ParentTempNameValueBuffer.NEXT = 0;

        IF DimensionValue.GET(DimCode,DimValueCode) THEN;

        IF DimensionValue.Indentation <> MaxLevelDim[DimNo] THEN
          FOR i := DimensionValue.Indentation + 1 TO MaxLevelDim[DimNo] DO
            AddAcc(ShowName,DimensionValue.Code,DimensionValue.Name);

        AddAcc(ShowName,DimensionValue.Code,DimensionValue.Name);
      END ELSE
        FOR i := 0 TO MaxLevelDim[DimNo] DO
          AddAcc(FALSE,'','');
    END;

    LOCAL PROCEDURE FillOutItem@5(ItemNo@1001 : Code[20];ShowName@1005 : Boolean);
    BEGIN
      AddAcc(ShowName AND (ItemNo <> ''),ItemNo,Item.Description);
    END;

    LOCAL PROCEDURE FillCell@26(RowNo@1001 : Integer;ColumnNo@1002 : Integer;CellValueAsText@1003 : Text);
    BEGIN
      WITH TempExcelBuffer DO BEGIN
        INIT;
        VALIDATE("Row No.",RowNo);
        VALIDATE("Column No.",ColumnNo);
        "Cell Value as Text" := COPYSTR(CellValueAsText,1,MAXSTRLEN("Cell Value as Text"));
        INSERT;
      END;
    END;

    LOCAL PROCEDURE FillNextCellInRow@82(CellValueAsText@1000 : Text);
    VAR
      RowNo@1001 : Integer;
      ColumnNo@1002 : Integer;
    BEGIN
      WITH TempExcelBuffer DO BEGIN
        RowNo := "Row No.";
        ColumnNo := "Column No." + 1;
        INIT;
        VALIDATE("Row No.",RowNo);
        VALIDATE("Column No.",ColumnNo);
        "Cell Value as Text" := COPYSTR(CellValueAsText,1,MAXSTRLEN("Cell Value as Text"));
        INSERT;
      END;
    END;

    LOCAL PROCEDURE StartNewRow@32();
    VAR
      RowNo@1001 : Integer;
    BEGIN
      RowNo := TempExcelBuffer."Row No." + 1;
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",0);
    END;

    LOCAL PROCEDURE SetStartColumnNo@40(ColumntNo@1001 : Integer);
    BEGIN
      TempExcelBuffer."Column No." := ColumntNo;
    END;

    [External]
    PROCEDURE SetCommonFilters@10(CurrentAnalysisArea@1001 : Option;CurrentAnalysisViewCode@1002 : Code[10];VAR ItemAnalysisViewEntry@1000 : Record 7154;DateFilter@1006 : Text[30];ItemFilter@1007 : Code[250];Dim1Filter@1009 : Code[250];Dim2Filter@1010 : Code[250];Dim3Filter@1011 : Code[250];LocationFilter@1013 : Code[250]);
    VAR
      DepartmentAuthorizationMgt@1100525000 : Codeunit 11012783;
    BEGIN
      ItemAnalysisViewEntry.SETRANGE("Analysis Area",CurrentAnalysisArea);
      ItemAnalysisViewEntry.SETRANGE("Analysis View Code",CurrentAnalysisViewCode);
      IF DateFilter <> '' THEN
        ItemAnalysisViewEntry.SETFILTER("Posting Date",DateFilter);
      IF ItemFilter <> '' THEN
        ItemAnalysisViewEntry.SETFILTER("Item No.",ItemFilter);
      IF Dim1Filter <> '' THEN
        ItemAnalysisViewEntry.SETFILTER("Dimension 1 Value Code",Dim1Filter);
      IF Dim2Filter <> '' THEN
        ItemAnalysisViewEntry.SETFILTER("Dimension 2 Value Code",Dim2Filter);
      IF Dim3Filter <> '' THEN
        ItemAnalysisViewEntry.SETFILTER("Dimension 3 Value Code",Dim3Filter);
      IF LocationFilter <> '' THEN
        ItemAnalysisViewEntry.SETFILTER("Location Code",LocationFilter);
      //**4PS.sn
      IF DPA_IsActive THEN
        DepartmentAuthorizationMgt.AddHardDPAFiltToItAnViewEntry(
          CurrentAnalysisArea,
          CurrentAnalysisViewCode,
          ItemAnalysisViewEntry);
      //**4PS.en
    END;

    LOCAL PROCEDURE AddAcc@14(ShowName@1002 : Boolean;Account@1000 : Text;AccName@1001 : Text);
    VAR
      CellValueAsText@1004 : Text;
    BEGIN
      IF Account = '' THEN
        CellValueAsText := ''
      ELSE
        IF ShowName THEN
          CellValueAsText := Account + ' ' + AccName
        ELSE
          CellValueAsText := Account;

      FillNextCellInRow(CellValueAsText);
    END;

    LOCAL PROCEDURE AddParentToBuffer@12(VAR NameValueBuffer@1000 : Record 823;id@1003 : Integer;AccountNumber@1001 : Text[250];AccountName@1002 : Text[250]);
    BEGIN
      NameValueBuffer.INIT;
      NameValueBuffer.ID := id;
      NameValueBuffer.Name := AccountNumber;
      NameValueBuffer.Value := AccountName;
      NameValueBuffer.INSERT;
    END;

    LOCAL PROCEDURE WriteDimLine@13(DimNo@1008 : Integer;DimFilter@1002 : Text;DimCode@1003 : Code[20];NoOfLeadingColumns@1007 : Integer;ShowName@1006 : Boolean);
    BEGIN
      SetStartColumnNo(NoOfLeadingColumns);
      TempDimValue2.SETFILTER(Code,DimFilter);
      TempDimValue2.SETFILTER("Dimension Code",DimCode);
      TempDimValue2.SETRANGE("Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
      IF TempDimValue2.FIND('-') THEN
        REPEAT
          IF NOT TempDimValue2.MARK THEN BEGIN
            FillOutDim(TempDimValue2.Code,DimCode,DimNo,ShowName);
            StartNewRow;
            SetStartColumnNo(NoOfLeadingColumns);
          END;
        UNTIL TempDimValue2.NEXT = 0;
    END;

    [External]
    PROCEDURE GetServerFileName@22() : Text;
    BEGIN
      EXIT(ServerFileName);
    END;

    [External]
    PROCEDURE SetSkipDownload@43();
    BEGIN
      SkipDownload := TRUE;
    END;

    LOCAL PROCEDURE DPA_IsActive@1100525000() : Boolean;
    VAR
      DepartmentAuthorizObject@1100525000 : Record 11012466;
      DepartmentAuthorizationMgt@1100525001 : Codeunit 11012783;
      FPSLicenseManagement@1100525002 : Codeunit 11229289;
    BEGIN
      //**4PS
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DepartmentAuthorizationMgt.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

