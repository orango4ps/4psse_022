OBJECT Report 11012271 Fill Prognosis from Req. Cap.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Prognose von gefragter KapazitÑt pro AktivitÑt aus ausfÅllen;
               ENU=Fill Prognosis from Requested Activity Capacity;
               NLD=Prognose vanuit gevraagde capaciteit per activiteit vullen;
               NOR=Fyll ut Prognose fra Anmodet Aktivitetskapasitet;
               SVE=Fyll i prognos frÜn begÑrd aktivitetskapacitet];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   GLSetup.GET;
                 END;

    OnPreReport=BEGIN
                  IF ProjectNo <> '' THEN
                    Progn.GET(ProjectNo, PrognosisDate);
                  IF PrognosisDate = 0D THEN
                    ERROR(Text001, Progn.FIELDCAPTION("Prognosis Date"));

                  IF StartingDatePlanning = 0D THEN
                    StartingDatePlanning := PrognosisDate;

                  Window.OPEN(Text000);
                END;

    OnPostReport=BEGIN
                   Window.CLOSE;
                 END;

  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table11072003;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF ProjectNo <> '' THEN
                                 SETRANGE("No.", ProjectNo);
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1, "No.");
                                  IF NOT Progn.GET("No.", PrognosisDate) THEN
                                    CurrReport.SKIP;
                                END;
                                 }

    { 5362;1   ;DataItem;CostTypeNo          ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1|4));
               OnAfterGetRecord=BEGIN
                                  PrognLine.RESET;
                                  PrognLine.SETRANGE("Project No.", Job."No.");
                                  PrognLine.SETRANGE("Prognosis Date", PrognosisDate);
                                  CASE Number OF
                                    1: PrognLine.SETRANGE("Cost Type", PrognLine."Cost Type"::Labor);
                                    4: PrognLine.SETRANGE("Cost Type", PrognLine."Cost Type"::Plant);
                                  ELSE
                                    CurrReport.SKIP;
                                  END;
                                  IF NOT PrognLine.FINDFIRST THEN
                                    CurrReport.SKIP;

                                  Window.UPDATE(2, PrognLine."Cost Type");

                                  ReqActCapByDay.RESET;
                                  ReqActCapByDay.SETCURRENTKEY("Project No.", "Resource Type");
                                  ReqActCapByDay.SETRANGE("Project No.", Job."No.");
                                  CASE Number OF
                                    1: ReqActCapByDay.SETRANGE("Resource Type", ReqActCapByDay."Resource Type"::Discipline);
                                    4: ReqActCapByDay.SETRANGE("Resource Type", ReqActCapByDay."Resource Type"::Plant);
                                  END;
                                  IF ReqActCapByDay.ISEMPTY THEN  //* Only if there is something of project / resource type
                                    CurrReport.SKIP;

                                  TmpBudgetTotalByCostObjectAct.RESET;
                                  TmpBudgetTotalByCostObjectAct.DELETEALL;
                                  TmpBudgetTotalByActivity.RESET;
                                  TmpBudgetTotalByActivity.DELETEALL;
                                  TmpReqActCapTotalByActRes.RESET;
                                  TmpReqActCapTotalByActRes.DELETEALL;
                                END;
                                 }

    { 2271;2   ;DataItem;                    ;
               DataItemTable=Table11012431;
               DataItemTableView=SORTING(Project No.,Code)
                                 WHERE(Code=FILTER(<>''));
               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(3, Code);
                                END;

               DataItemLinkReference=Job;
               DataItemLink=Project No.=FIELD(No.) }

    { 5115;3   ;DataItem;                    ;
               DataItemTable=Table11012001;
               DataItemTableView=SORTING(Project No.,Project Planning Activity No.,Cost Object);
               OnPreDataItem=BEGIN
                               Window.UPDATE(4, TABLECAPTION);

                               CASE CostTypeNo.Number OF
                                 1: SETRANGE("Cost Type", "Cost Type"::Labor);
                                 4: SETRANGE("Cost Type", "Cost Type"::Plant);
                               END;
                             END;

               OnAfterGetRecord=BEGIN
                                  UpdTmpBudgTotalByCostObjectAct("Cost Type", "Cost Object", Element, "Project Planning Activity".Code, "Amount (LCY)");
                                  UpdTmpBudgetTotalByActivity("Project Planning Activity".Code, "Amount (LCY)");
                                END;

               DataItemLinkReference=Project Planning Activity;
               DataItemLink=Project No.=FIELD(Project No.),
                            Project Planning Activity No.=FIELD(No.) }

    { 2057;3   ;DataItem;                    ;
               DataItemTable=Table11125709;
               DataItemTableView=SORTING(Project No.,Activity Code,Resource Type,Date);
               OnPreDataItem=BEGIN
                               Window.UPDATE(4, TABLECAPTION);

                               CASE CostTypeNo.Number OF
                                 1: SETRANGE("Resource Type", "Resource Type"::Discipline);
                                 4: SETRANGE("Resource Type", "Resource Type"::Plant);
                               END;

                               SETFILTER(Date, '>=%1', StartingDatePlanning);
                             END;

               OnAfterGetRecord=BEGIN
                                  UpdTmpReqActCapTotalByActRes("Project Planning Activity".Code, "Resource Type", "Resource Code", Hours);
                                END;

               DataItemLinkReference=Project Planning Activity;
               DataItemLink=Project No.=FIELD(Project No.),
                            Activity Code=FIELD(Code) }

    { 5975;2   ;DataItem;                    ;
               DataItemTable=Table11012035;
               DataItemTableView=SORTING(Project No.,Prognosis Date,Cost Type,Element,Cost Object)
                                 WHERE(Cost Object=FILTER(<>''));
               OnPreDataItem=BEGIN
                               Window.UPDATE(4, TABLECAPTION);

                               CASE CostTypeNo.Number OF
                                 1: SETRANGE("Cost Type", "Cost Type"::Labor);
                                 4: SETRANGE("Cost Type", "Cost Type"::Plant);
                               END;

                               SETRANGE("Prognosis Date", Progn."Prognosis Date"); //call C000619
                             END;

               OnAfterGetRecord=VAR
                                  TotalLaborHours@1100525001 : Decimal;
                                  TotalPlantAmount@1100525000 : Decimal;
                                BEGIN
                                  CASE "Cost Type" OF
                                    "Cost Type"::Labor:
                                      BEGIN
                                        TotalLaborHours := GetTotalLaborHours("Cost Object", Element);
                                        VALIDATE(Quantity, ROUND(TotalLaborHours, 0.00001));
                                      END;
                                    "Cost Type"::Plant:
                                      BEGIN
                                        TotalPlantAmount := GetTotalPlantAmount("Cost Object", Element);
                                        VALIDATE(Amount, ROUND(TotalPlantAmount, GLSetup."Unit-Amount Rounding Precision"));
                                      END;
                                  END;
                                  MODIFY(TRUE);
                                END;

               DataItemLinkReference=Job;
               DataItemLink=Project No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   StartingDatePlanning := PrognosisDate;
                 END;

    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  CaptionML=[DEU=Planungsdatum ab;
                             ENU=Planning Date from;
                             NLD=Planningsdatum vanaf;
                             NOR=Planleggingsdato fra;
                             SVE=Planeringsdatum frÜn];
                  SourceExpr=StartingDatePlanning }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      GLSetup@1100528401 : Record 98;
      Progn@1100525006 : Record 11012034;
      PrognLine@1100525000 : Record 11012035;
      ReqActCapByDay@1100525005 : Record 11125709;
      TmpBudgetTotalByCostObjectAct@1100525009 : TEMPORARY Record 11012217;
      TmpBudgetTotalByActivity@1100525010 : TEMPORARY Record 11012217;
      TmpReqActCapTotalByActRes@1100525011 : TEMPORARY Record 11012217;
      Window@1100525016 : Dialog;
      StartingDatePlanning@1100525003 : Date;
      PrognosisDate@1100525002 : Date;
      ProjectNo@1100525001 : Code[20];
      Text000@1100525017 : TextConst 'DEU=Projekt     #1############\Kostenart #2############\AktivitÑt  #3############\Verarbeiten   #4#########################;ENU=Project   #1############\Cost Type #2############\Activity  #3############\Process   #4#########################;NLD=Project     #1############\Kostensoort #2############\Activiteit  #3############\Verwerken   #4#########################;NOR=Prosjekt #1############\Kostnadstype #2############\Aktivitet #3############\Prosesser #4#########################;SVE=Projekt   #1############\Kostnadstyp #2############\Aktivitet  #3############\Process   #4#########################';
      Text001@1100525004 : TextConst 'DEU=%1 unbekannt.;ENU=%1 unknown.;NLD=%1 onbekend.;NOR=%1 ukjent;SVE=%1 Ñr okÑnd.';

    PROCEDURE SetSelection@1100525001(ProjNo@1100525000 : Code[20];PrognDate@1100525001 : Date);
    BEGIN
      ProjectNo := ProjNo;
      PrognosisDate := PrognDate;
    END;

    LOCAL PROCEDURE UpdTmpBudgTotalByCostObjectAct@1100525000(CostType@1100525004 : Option;CostObject@1100525001 : Code[20];ElemCode@1100525002 : Code[20];ActCode@1100525000 : Code[20];BudgetAmount@1100525003 : Decimal);
    BEGIN
      IF ElemCode <> '' THEN BEGIN
        IF NOT PrognLine.GET(Job."No.", Progn."Prognosis Date", CostType, ElemCode, CostObject) THEN
          ElemCode := '';
      END;

      WITH TmpBudgetTotalByCostObjectAct DO BEGIN  //* Total 1: Budget total by CostObject (/ Element) / Activity
        IF NOT GET(CostObject, ElemCode, ActCode) THEN BEGIN
          INIT;
          "Code 1" := CostObject;
          "Code 2" := ElemCode;
          "Code 3" := ActCode;
          Value := BudgetAmount;
          INSERT;
        END ELSE BEGIN
          Value := Value + BudgetAmount;
          MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdTmpBudgetTotalByActivity@1100525002(ActCode@1100525005 : Code[20];BudgetAmount@1100525003 : Decimal);
    BEGIN
      WITH TmpBudgetTotalByActivity DO BEGIN  //* Total 2: Budget total by Activity
        IF NOT GET(ActCode, '', '') THEN BEGIN
          INIT;
          "Code 1" := ActCode;
          "Code 2" := '';
          "Code 3" := '';
          Value := BudgetAmount;
          INSERT;
        END ELSE BEGIN
          Value := Value + BudgetAmount;
          MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdTmpReqActCapTotalByActRes@1100525004(ActCode@1100525005 : Code[20];ResourceType@1100525000 : Option;ResourceCode@1100525001 : Code[20];PlannedHours@1100525003 : Decimal);
    BEGIN
      WITH TmpReqActCapTotalByActRes DO BEGIN  //* Total 3: Req. Act. Capacity total by Activity / Resource (discipline or plant type)
        IF NOT GET(ActCode, ResourceCode, '') THEN BEGIN
          INIT;
          "Code 1" := ActCode;
          "Code 2" := ResourceCode;  //* Discipline Code or Plant Type Code
          "Code 3" := '';
          Value := PlannedHours;
          INSERT;
        END ELSE BEGIN
          Value := Value + PlannedHours;
          MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE GetTotalLaborHours@1100525003(CostObject@1100525001 : Code[20];ElemCode@1100525002 : Code[20]) TotalLaborHours : Decimal;
    VAR
      TotalAmount@1100528400 : Decimal;
    BEGIN
      GetTotalHrsAndTotalPlantAmount(CostObject, ElemCode, FALSE, TotalLaborHours, TotalAmount);
    END;

    LOCAL PROCEDURE GetTotalPlantAmount@1100528411(CostObject@1100528401 : Code[20];ElemCode@1100528400 : Code[20]) TotalPlantAmount : Decimal;
    VAR
      TotalHours@1100528402 : Decimal;
    BEGIN
      GetTotalHrsAndTotalPlantAmount(CostObject, ElemCode, TRUE, TotalHours, TotalPlantAmount);
    END;

    LOCAL PROCEDURE GetTotalHrsAndTotalPlantAmount@1100528412(CostObject@1100528401 : Code[20];ElemCode@1100528400 : Code[20];CalcTotalPlantAmount@1100528405 : Boolean;VAR TotalHours@1100528402 : Decimal;VAR TotalPlantAmount@1100528403 : Decimal) PlantRate : Decimal;
    VAR
      PlanHours@1100528404 : Decimal;
      SearchRate@1100528406 : Codeunit 11012567;
    BEGIN
      TotalHours := 0;
      TotalPlantAmount := 0;

      TmpBudgetTotalByCostObjectAct.RESET;
      TmpBudgetTotalByCostObjectAct.SETRANGE("Code 1", CostObject);
      TmpBudgetTotalByCostObjectAct.SETRANGE("Code 2", ElemCode);
      IF TmpBudgetTotalByCostObjectAct.FINDSET THEN BEGIN
        TmpReqActCapTotalByActRes.RESET;
        REPEAT
          IF TmpBudgetTotalByActivity.GET(TmpBudgetTotalByCostObjectAct."Code 3", '', '') THEN BEGIN  //* Activity
            IF TmpBudgetTotalByActivity.Value <> 0 THEN BEGIN
              TmpReqActCapTotalByActRes.SETRANGE("Code 1", TmpBudgetTotalByCostObjectAct."Code 3");  //* Activity
              IF TmpReqActCapTotalByActRes.FINDSET THEN BEGIN
                REPEAT
                  PlanHours :=
                    (TmpBudgetTotalByCostObjectAct.Value / TmpBudgetTotalByActivity.Value) * TmpReqActCapTotalByActRes.Value;
                  TotalHours := TotalHours + PlanHours;
                  IF CalcTotalPlantAmount THEN
                    TotalPlantAmount :=
                      TotalPlantAmount +
                      PlanHours * SearchRate.Rate('', TmpReqActCapTotalByActRes."Code 2", '', '', PrognosisDate, 3, 0, '');
                UNTIL TmpReqActCapTotalByActRes.NEXT = 0;
              END;
            END;
          END;
        UNTIL TmpBudgetTotalByCostObjectAct.NEXT = 0;
      END;
    END;

    BEGIN
    {
      BUDGET
      CostObject  Activity  Amount
      K1          A1        60
      K1          A1        40
      K2          A1        90
      K2          A1        60
      K1          A2        100
      K1          A2        100
      K2          A2        100
      K2          A2        100
      K2          A2        100

      BUDGET TOTALS: CostObject / Activity
      CostObject  Activity  Amount
      K1          A1        100    (T1a)
      K1          A2        200    (T1b)
      K2          A1        150    (T1c)
      K2          A2        300    (T1d)

      BUDGET TOTALS: Activity
      Activity  Amount
      A1        250                (T2a)
      A2        500                (T2b)

      REQUESTED ACTIVITY CAPACITY TOTALS: Activity / Discipline (or Activity / Plant Type)
      Activity  Discipline or  Hours                Rental Rate Internal
                Plant Type                          of Plant Type
      A1        1              10                   80                      (T3a)
      A1        2              15                   85                      (T3b)
      A2        1              5                    80                      (T3c)
      A2        4              25                   90                      (T3d)

      Example 1:
      PROGNOSIS for labor (displines): CostObject K1 + K2
      K1
        Read budget totals by CostObject / Activity for K1
          T1a / T2a = 100/250
            Read requested activity capacity hours for activity A1
            100/250 * 10 =  4 hours
            100/250 * 15 =  6 hours
          T1b / T2b = 200/500
            Read requested activity capacity hours activity A2
            200/500 *  5 =  2 hours
            200/500 * 25 = 10 hours
      K2
        Read budget totals by CostObject / Activity for K1
          T1c / T2a = 150/250
            Read requested activity capacity hours for activity A1
            150/250 * 10 =  6 hours
            150/250 * 15 =  9 hours
          T1d / T2b = 300/500
            Read requested activity capacity hours for activity A2
            300/500 *  5 =  3 hours
            300/500 * 25 = 15 hours
      CostObject  Quantity
      K1          22
      K2          33
      When the prognosis for labor is calculated the quantity (=number of hours) of the prognosis line
      is filled with the new number of hours. Then the OnValidate event of the quantity field is executed to recalculate
      the amount of the prognosis line.

      Example 2:
      PROGNOSIS for plant types: CostObject K1 + K2
      K1
        Read budget totals by CostObject / Activity for K1
          T1a / T2a = 100/250
            Read requested activity capacity hours for activity A1
            100/250 * 10 =  4 hours (4*80 = 320,-)
            100/250 * 15 =  6 hours (6*85 = 510,-)
          T1b / T2b = 200/500
            Read requested activity capacity hours activity A2
            200/500 *  5 =  2 hours (2*80 = 160,-)
            200/500 * 25 = 10 hours (10*90 = 900,-)
      K2
        Read budget totals by CostObject / Activity for K1
          T1c / T2a = 150/250
            Read requested activity capacity hours for activity A1
            150/250 * 10 =  6 hours   (6*80 = 480,-)
            150/250 * 15 =  9 hours   (9*85 = 765,-)
          T1d / T2b = 300/500
            Read requested activity capacity hours for activity A2
            300/500 *  5 =  3 hours   (3*80 = 240,-)
            300/500 * 25 = 15 hours (15*90 = 1350,-)
      CostObject  Amount
      K1          1890
      K2          2835
      When the prognosis for labor is calculated the amount of the prognosis line
      is filled with the new amount. Then the OnValidate event of the amount field is executed.
    }
    END.
  }
  RDLDATA
  {
  }
}

