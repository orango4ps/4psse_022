OBJECT Table 11012361 Site Mngmnt. Hours Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 11012361=rimd;
    OnInsert=VAR
               HumanResourcesSetup@1100528200 : Record 5218;
               GenJournalTemplate@1100528201 : Record 80;
             BEGIN
               IF Type <> Type::UnmannedPlant THEN
                 TESTFIELD("Employee No.");

               IF SiteMngmntHoursSetup.GET THEN
                 SiteMngmntHoursSetup.CheckPostedHoursLine(Year,Week,"Employee No.","Supplying Company");

               HumanResourcesSetup.GET;
               HumanResourcesSetup.TESTFIELD("Hours Journal Template");
               GenJournalTemplate.GET(HumanResourcesSetup."Hours Journal Template");
               "Reason Code" := GenJournalTemplate."Reason Code";
               FillDocNoPostingDate;
               CheckResetOnComponentType();  //*C-027136
               UpdateProjectHourLine(UpdateAction::Insert);
               UpdateHeaderStatus(FALSE,TRUE); //T005889.n
             END;

    OnModify=VAR
               HourPortalSetup@1100528300 : Record 11020454;
               FPSLicenseManagement@1100527400 : Codeunit 11229289;
             BEGIN
               IF SiteMngmntHoursSetup.GET THEN
                 SiteMngmntHoursSetup.CheckPostedHoursLine(Year,Week,"Employee No.","Supplying Company");

               IF (FPSLicenseManagement.LicenseAndReadPermissionForTable(HourPortalSetup)) THEN BEGIN
                 IF (NOT HourPortalSetup.GET) THEN
                   HourPortalSetup.INIT;
                 IF (HourPortalSetup."Hour Portal Active") AND
                    ("Line Template Code" = '') AND
                    NOT "Imported from Work Order"
                 THEN
                   FIELDERROR("Line Template Code");
               END;
               CheckIfChangingLineIsAllowed;
               CheckResetOnComponentType();  //*C-027136
               CheckProjectElement(GUIALLOWED); //T005889.n
               CheckDeleteUnmandPlantHourLine(UpdateAction::Modify);
               UpdateProjectHourLine(UpdateAction::Modify);
               UpdateHeaderStatus(FALSE,FALSE);
               IF HourAccRec.GET(Year,Week,"Supplying Company","Employee No.") THEN BEGIN
                 HourAccRec."Modified By" := USERID;
                 HourAccRec.Modified := CURRENTDATETIME;
                 HourAccRec.MODIFY;
               END;
             END;

    OnDelete=BEGIN
               CheckIfChangingLineIsAllowed;
               CheckDeleteUnmandPlantHourLine(UpdateAction::Delete);
               UpdateProjectHourLine(UpdateAction::Delete);
               UpdateHeaderStatus(TRUE,FALSE); //T005889.n
             END;

    OnRename=BEGIN
               UpdateProjectHourLine(UpdateAction::Rename);
             END;

    CaptionML=[ENU=Site Mngmnt. Hours Line;
               NOR=Timerad for byggeledelse];
    LookupPageID=Page11130642;
    DrillDownPageID=Page11130642;
  }
  FIELDS
  {
    { 20  ;   ;Year                ;Integer       ;CaptionML=[ENU=Year;
                                                              NOR=èr;
                                                              SVE=èr];
                                                   MinValue=1 }
    { 30  ;   ;Week                ;Integer       ;CaptionML=[ENU=Week;
                                                              NOR=Uke;
                                                              SVE=Vecka];
                                                   MinValue=1;
                                                   MaxValue=53 }
    { 35  ;   ;Object No.          ;Code20        ;OnValidate=VAR
                                                                lvObjectRec@1100485000 : Record 11012359;
                                                                lvCostCodeRec@1100485005 : Record 11012083;
                                                                lvWageComp@1100485004 : Record 11012014;
                                                                lvEmployeeRec@1100525000 : Record 5200;
                                                              BEGIN
                                                                IF "Object No." <> xRec."Object No." THEN BEGIN
                                                                  Element := '';
                                                                  "Extension Contract" := '';
                                                                  "Object Name" := '';
                                                                  "Plant Location" := '';
                                                                  IF Type <> Type::Indirect THEN
                                                                    "Shift Code" := '';
                                                                  Address := '';
                                                                END;

                                                                IF CURRENTCOMPANY <> COMPANYNAME THEN BEGIN
                                                                  lvObjectRec.CHANGECOMPANY(CURRENTCOMPANY);
                                                                  lvWageComp.CHANGECOMPANY(CURRENTCOMPANY);
                                                                END;

                                                                IF gSetProjHrsValidateMode AND (Type <> Type::Indirect) THEN BEGIN
                                                                  lvObjectRec.GET("Receiving Company", lvObjectRec.Type::Project, "Object No.");
                                                                  "Object Name" := lvObjectRec.Description;
                                                                END ELSE BEGIN
                                                                  lvObjectRec.SETCURRENTKEY(Type, Code);
                                                                  IF "Receiving Company" <> '' THEN
                                                                    lvObjectRec.SETRANGE(Company, "Receiving Company");
                                                                  lvObjectRec.FILTERGROUP(6);
                                                                  CASE Type OF
                                                                    Type::Indirect:
                                                                      lvObjectRec.SETRANGE(Type, lvObjectRec.Type::"Cost Code");
                                                                    Type::Service:
                                                                      lvObjectRec.SETRANGE(Type, lvObjectRec.Type::"Service Order");
                                                                    Type::ResourceRequest:
                                                                      lvObjectRec.SETRANGE(Type, lvObjectRec.Type::Request);
                                                                    Type::Plant,
                                                                    Type::UnmannedPlant:
                                                                      lvObjectRec.SETFILTER(Type, '%1|%2', lvObjectRec.Type::Project, lvObjectRec.Type::"Service Order");
                                                                    ELSE
                                                                      lvObjectRec.SETRANGE(Type, lvObjectRec.Type::Project);
                                                                  END;
                                                                  lvObjectRec.FILTERGROUP(0);
                                                                  lvObjectRec.SETRANGE(Code, "Object No.");
                                                                  ObjectNoType := 0;
                                                                  IF lvObjectRec.COUNT > 1 THEN BEGIN
                                                                    lvObjectRec.Code := "Object No.";
                                                                    lvObjectRec.Company := "Receiving Company";
                                                                    IF PAGE.RUNMODAL(0, lvObjectRec) = ACTION::LookupOK THEN BEGIN
                                                                      "Receiving Company" := lvObjectRec.Company;
                                                                      "Object No." := lvObjectRec.Code;
                                                                      "Object Name" := lvObjectRec.Description;
                                                                      Address := lvObjectRec.Address;
                                                                      CASE lvObjectRec.Type OF
                                                                        lvObjectRec.Type::"Service Order": ObjectNoType := ObjectNoType::Service;
                                                                        lvObjectRec.Type::Project: ObjectNoType := ObjectNoType::Project;
                                                                      END;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    lvObjectRec.FINDFIRST;
                                                                    "Receiving Company" := lvObjectRec.Company;
                                                                    "Object No." := lvObjectRec.Code;
                                                                    "Object Name" := lvObjectRec.Description;
                                                                    Address := lvObjectRec.Address;
                                                                    CASE lvObjectRec.Type OF
                                                                      lvObjectRec.Type::"Service Order": ObjectNoType := ObjectNoType::Service;
                                                                      lvObjectRec.Type::Project: ObjectNoType := ObjectNoType::Project;
                                                                    END;
                                                                  END;
                                                                  IF Type IN [Type::Plant, Type::UnmannedPlant] THEN BEGIN
                                                                    FillDefaultPlantCompany();  //* Receiving Company can be modified
                                                                    IF "Object No." <> xRec."Object No." THEN
                                                                      "Plant Location" := FillDefaultPlantLoc();
                                                                  END;
                                                                  ObjectNoType := 0;
                                                                END;

                                                                CheckProjectEmployee;

                                                                IF Type = Type::Indirect THEN BEGIN
                                                                  IF "Object No." <> '' THEN BEGIN
                                                                    SiteMngmntHoursSetup.GET;
                                                                    lvCostCodeRec.CHANGECOMPANY(GetReceivingCompany);
                                                                    lvCostCodeRec.GET("Object No.");
                                                                    IF lvCostCodeRec.Component = '' THEN BEGIN
                                                                      "Wage Component" := '';
                                                                      "Component Type" := "Component Type"::Hours;
                                                                    END ELSE BEGIN
                                                                      VALIDATE("Wage Component", lvCostCodeRec.Component);
                                                                      IF (NOT SiteMngmntHoursSetup."Fill Wage Comp. By Indirect") AND ("Component Type" = "Component Type"::Hours) THEN
                                                                        "Wage Component" := '';
                                                                      IF lvWageComp.GET(lvCostCodeRec.Component) THEN BEGIN
                                                                        IF lvWageComp."Kilometer Expense" THEN BEGIN
                                                                          "Component Type" := "Component Type"::Kilometers;
                                                                          lvEmployeeRec.CHANGECOMPANY("Supplying Company");
                                                                          lvEmployeeRec.GET("Employee No.");
                                                                          SetDefaultDriverType(lvEmployeeRec."Driver Type");
                                                                        END;
                                                                      END;
                                                                    END;
                                                                  END;
                                                                END;

                                                                IF (Type = Type::Project) AND ("Cost Object" <> '') THEN
                                                                  VALIDATE("Cost Object", "Cost Object");
                                                                FillDepartmentCode;
                                                                FillServiceLocation;
                                                              END;

                                                   OnLookup=VAR
                                                              ObjectRec@1100485000 : Record 11012359;
                                                            BEGIN
                                                              ObjectRec.SETCURRENTKEY(Type,Code);
                                                              ObjectRec.FILTERGROUP(9);
                                                              CASE Type OF
                                                                Type::Indirect:
                                                                  BEGIN
                                                                    ObjectRec.SETRANGE(Type,ObjectRec.Type::"Cost Code");
                                                                    ObjectRec.Type := ObjectRec.Type::"Cost Code";
                                                                  END;
                                                                Type::Service:
                                                                  BEGIN
                                                                    ObjectRec.SETRANGE(Type,ObjectRec.Type::"Service Order");
                                                                    ObjectRec.Type := ObjectRec.Type::"Service Order";
                                                                  END;
                                                                Type::ResourceRequest:
                                                                  BEGIN
                                                                    ObjectRec.SETRANGE(Type,ObjectRec.Type::Request);
                                                                    ObjectRec.Type := ObjectRec.Type::Request;
                                                                  END;
                                                                Type::Plant,
                                                                Type::UnmannedPlant:
                                                                  ObjectRec.SETFILTER(Type,'%1|%2',ObjectRec.Type::Project,ObjectRec.Type::"Service Order");
                                                                ELSE BEGIN
                                                                  ObjectRec.SETRANGE(Type,ObjectRec.Type::Project);
                                                                  ObjectRec.Type := ObjectRec.Type::Project;
                                                                END;
                                                              END;
                                                              ObjectRec.FILTERGROUP(0);

                                                              IF "Receiving Company" = '' THEN BEGIN
                                                                SitemngmntEmployees.RESET;
                                                                SitemngmntEmployees.SETRANGE("No.","Employee No.");
                                                                IF SitemngmntEmployees.FINDFIRST THEN
                                                                  IF SitemngmntEmployees.COUNT = 1 THEN
                                                                    ObjectRec.SETRANGE(Company,SitemngmntEmployees.Company);
                                                              END ELSE BEGIN
                                                                ObjectRec.SETRANGE(Company,"Receiving Company");
                                                                ObjectRec.Company := "Receiving Company";
                                                              END;
                                                              ObjectRec.Code := "Object No.";
                                                              IF PAGE.RUNMODAL(0,ObjectRec)= ACTION::LookupOK THEN BEGIN
                                                                IF "Receiving Company" <> ObjectRec.Company THEN
                                                                  VALIDATE("Receiving Company",ObjectRec.Company);
                                                                VALIDATE("Object No.",ObjectRec.Code);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Object No.;
                                                              NOR=Objektnr.;
                                                              SVE=Objektnr] }
    { 37  ;   ;Object Name         ;Text100       ;CaptionML=[ENU=Object Name;
                                                              NOR=Objektnavn;
                                                              SVE=Objektnamn] }
    { 39  ;   ;Supplying Company   ;Text50        ;TableRelation="Site Mngmnt. Hours Companies".Company;
                                                   CaptionML=[ENU=Supplying Company;
                                                              NOR=Leverende  selskap;
                                                              SVE=Levererande fîretag] }
    { 40  ;   ;Employee No.        ;Code20        ;TableRelation="Site Mngmnt. Hours Employee".No.;
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Employee No.;
                                                              NOR=Ansattnr;
                                                              SVE=AnstÑllningsnr] }
    { 50  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 55  ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              NOR=Dokumentnr.;
                                                              SVE=Dokumentnr] }
    { 60  ;   ;Receiving Company   ;Text50        ;TableRelation="Site Mngmnt. Hours Companies".Company;
                                                   OnValidate=VAR
                                                                SiteMngmntHoursCompanies@1100525000 : Record 11012356;
                                                                RelationCode@1100525001 : Code[10];
                                                              BEGIN
                                                                SiteMngmntHoursCompanies.GET(COMPANYNAME);
                                                                RelationCode := SiteMngmntHoursCompanies."Relation Code";
                                                                SiteMngmntHoursCompanies.GET("Receiving Company");
                                                                IF (SiteMngmntHoursCompanies."Relation Code" <> RelationCode) THEN
                                                                  ERROR(Text001, SiteMngmntHoursCompanies.FIELDCAPTION("Relation Code"), RelationCode, SiteMngmntHoursCompanies."Relation Code");

                                                                IF ("Receiving Company" <> xRec."Receiving Company") AND (xRec."Receiving Company" <> '') THEN BEGIN
                                                                  "Object No." := '';
                                                                  "Object Name" := '';
                                                                  Element := '';
                                                                  "Extension Contract" := '';
                                                                  "Plant Location" := '';
                                                                  "Plant Type" := '';
                                                                  "Plant No." := '';
                                                                  "Cost Component Plant" := '';
                                                                  "Cost Object" := '';
                                                                  "Cost Object Description" := '';
                                                                  "Resource Req. Receiv. Company" := '';
                                                                  "Resource Request No." := '';
                                                                  IF Type <> Type::Indirect THEN
                                                                    "Shift Code" := '';
                                                                  IF (Type <> Type::Service) THEN
                                                                    "Service Location No." := '';
                                                                  FillDepartmentCode;
                                                                END;
                                                                CheckCurrentOrGetFirstValidLineTemplateCode;
                                                                IF Type IN [Type::Plant, Type::UnmannedPlant] THEN
                                                                  FillDefaultPlantCompany();
                                                              END;

                                                   OnLookup=VAR
                                                              SiteMngmntHoursCompanies@1100525000 : Record 11012356;
                                                            BEGIN
                                                              IF (PAGE.RUNMODAL(0, SiteMngmntHoursCompanies) = ACTION::LookupOK) THEN
                                                                VALIDATE("Receiving Company", SiteMngmntHoursCompanies.Company);
                                                            END;

                                                   CaptionML=[ENU=Receiving Company;
                                                              NOR=Mottakselskap;
                                                              SVE=Mottagningsfîretag] }
    { 75  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                SiteMngmntHoursSetup.GET;
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  "Object No." := '';
                                                                  "Object Name" := '';
                                                                  Element := '';
                                                                  "Extension Contract" := '';
                                                                  "Plant Company" := '';
                                                                  "Plant Location" := '';
                                                                  "Plant Type" := '';
                                                                  "Plant No." := '';
                                                                  "Cost Component Plant" := '';
                                                                  "Cost Object" := '';
                                                                  "Cost Object Description" := '';
                                                                  "Shift Code" := '';
                                                                  "Department Code" := '';
                                                                  "Resource Request No." := '';
                                                                  IF (Type <> Type::Service) THEN
                                                                    "Service Location No." := '';
                                                                END;
                                                                CheckCurrentOrGetFirstValidLineTemplateCode;
                                                                IF Type IN [Type::Plant, Type::UnmannedPlant] THEN
                                                                  FillDefaultPlantCompany();
                                                                IF Type <> Type::UnmannedPlant THEN
                                                                  TESTFIELD("Employee No.");
                                                                IF (Type = Type::Indirect) AND (NOT SiteMngmntHoursSetup."Allow Indirect for IC") THEN
                                                                  VALIDATE("Receiving Company", COMPANYNAME);

                                                                IF ("Employee No." <> '') AND ("Cost Object" = '') AND (Type <> Type::Indirect) THEN BEGIN
                                                                  IF SitemngmntEmployees.GET("Receiving Company", "Employee No.") THEN BEGIN
                                                                    IF "Cost Object" <> SitemngmntEmployees."Global Dimension 2 Code" THEN
                                                                      VALIDATE("Cost Object", SitemngmntEmployees."Global Dimension 2 Code");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              NOR=Radtype;
                                                              SVE=Radtyp];
                                                   OptionCaptionML=ENU=Project,Indirect,Service,Plant,UnmannedPlant,Request;
                                                   OptionString=Project,Indirect,Service,Plant,UnmannedPlant,ResourceRequest }
    { 80  ;   ;Extension Contract  ;Code10        ;OnValidate=BEGIN
                                                                IF "Extension Contract" = '' THEN
                                                                  EXIT;

                                                                TESTFIELD(Type, Type::Project);
                                                                TESTFIELD("Object No.");

                                                                ExtRec.RESET;
                                                                ExtRec.CHANGECOMPANY("Receiving Company");
                                                                ExtRec.GET("Object No.", "Extension Contract");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (Type <> Type::Project) OR ("Object No." = '') THEN
                                                                EXIT;

                                                              ExtRec.RESET;
                                                              ExtRec.CHANGECOMPANY("Receiving Company");
                                                              ExtRec.FILTERGROUP(9);
                                                              ExtRec.SETRANGE("Project No.", "Object No.");
                                                              ExtRec.FILTERGROUP(0);
                                                              ExtRec."Project No." := "Object No.";
                                                              ExtRec."Contract No." := "Extension Contract";
                                                              IF PAGE.RUNMODAL(0, ExtRec) = ACTION::LookupOK THEN
                                                                VALIDATE("Extension Contract", ExtRec."Contract No.");
                                                            END;

                                                   CaptionML=[ENU=Extension Contract;
                                                              NOR=ETA;
                                                              SVE=éTA] }
    { 90  ;   ;Cost Object         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                                                                 Cost Type=FILTER(Labor|Plant|Sundry));
                                                   OnValidate=VAR
                                                                lvWageComp@1100525000 : Record 11012014;
                                                                CostObjectDescription@1210190000 : Text[50];
                                                                ProjectElement@1100528500 : Record 11012010;
                                                              BEGIN
                                                                SiteMngmntHoursSetup.GET;

                                                                IF "Cost Object" <> '' THEN BEGIN
                                                                  CostObjectDescription := '';
                                                                  DimensionValueRec.RESET;
                                                                  DimensionValueRec.CHANGECOMPANY(GetReceivingCompany);
                                                                  DimensionValueRec.SETRANGE(Code, "Cost Object");
                                                                  DimensionValueRec.SETRANGE("Global Dimension No.", 2);

                                                                  IF IsExternalEmployee THEN
                                                                    DimensionValueRec.SETFILTER("Cost Type", '%1|%2|%3|%4', DimensionValueRec."Cost Type"::Labor,
                                                                      DimensionValueRec."Cost Type"::Subcontracting, DimensionValueRec."Cost Type"::Plant, DimensionValueRec."Cost Type"::Sundry)
                                                                  ELSE
                                                                    DimensionValueRec.SETFILTER("Cost Type", '%1|%2|%3', DimensionValueRec."Cost Type"::Labor,
                                                                      DimensionValueRec."Cost Type"::Plant, DimensionValueRec."Cost Type"::Sundry);
                                                                  IF DimensionValueRec.FINDFIRST THEN BEGIN
                                                                    "Cost Object Description" := DimensionValueRec.Name;
                                                                    CostObjectDescription := DimensionValueRec.Name;  // 33618.n
                                                                    "Cost Component" := DimensionValueRec."Cost Component";
                                                                    CheckCostCompServOrderType(DimensionValueRec."Cost Type");
                                                                  END;
                                                                  IF (DimensionValueRec.Element <> '') AND ("Object No." <> '') THEN BEGIN
                                                                    ProjectElement.CHANGECOMPANY(GetReceivingCompany);
                                                                    IF ProjectElement.GET("Object No.", DimensionValueRec.Element) THEN
                                                                      IF NOT ProjectElement.Blocked THEN
                                                                        VALIDATE(Element, DimensionValueRec.Element);
                                                                  END;

                                                                  IF SiteMngmntHoursSetup."Use Job Cost Objects" THEN BEGIN
                                                                    ProjectCostObjectRec.RESET;
                                                                    ProjectCostObjectRec.CHANGECOMPANY(GetReceivingCompany);
                                                                    ProjectCostObjectRec.SETRANGE("Project No.", "Object No.");
                                                                    ProjectCostObjectRec.SETRANGE("Cost Object", "Cost Object");
                                                                    IF ProjectCostObjectRec.FINDFIRST THEN BEGIN
                                                                      "Cost Object Description" := ProjectCostObjectRec.Name;
                                                                      CostObjectDescription := ProjectCostObjectRec.Name; // 33618.n
                                                                    END;
                                                                  END;

                                                                  IF CostObjectDescription = '' THEN
                                                                    ERROR(Text010, "Cost Object");

                                                                  IF Type IN [Type::Project, Type::Service, Type::Plant, Type::Indirect] THEN BEGIN
                                                                    IF (DimensionValueRec."Wage Component" <> '') AND (lvWageComp.GET(DimensionValueRec."Wage Component")) THEN BEGIN
                                                                      VALIDATE("Wage Component", DimensionValueRec."Wage Component");
                                                                      IF Type <> Type::Indirect THEN BEGIN
                                                                        IF (NOT SiteMngmntHoursSetup."Fill Wage Comp. By Direct") AND ("Component Type" = "Component Type"::Hours) THEN
                                                                          "Wage Component" := '';
                                                                      END ELSE BEGIN
                                                                        IF (NOT SiteMngmntHoursSetup."Fill Wage Comp. By Indirect") AND ("Component Type" = "Component Type"::Hours) THEN
                                                                          "Wage Component" := '';
                                                                      END;
                                                                    END;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  IF Type <> Type::Indirect THEN BEGIN
                                                                    "Wage Component" := '';
                                                                    "Component Type" := "Component Type"::Hours;
                                                                  END;
                                                                  "Cost Object Description" := '';
                                                                END;

                                                                IF "Component Type" <> "Component Type"::Hours THEN
                                                                  IF NOT SiteMngmntHoursSetup."Cost Object By Indirect Lines" THEN
                                                                    IF Type = Type::Indirect THEN BEGIN
                                                                      "Cost Object" := '';
                                                                      "Cost Object Description" := '';
                                                                    END;

                                                                CheckCostType;
                                                              END;

                                                   OnLookup=BEGIN
                                                              GetCostObjectWithLookup;  // 33618.n (moved to function)
                                                            END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Kostnadsobjekt;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 95  ;   ;Cost Object Description;Text50     ;CaptionML=[ENU=Cost Object Description;
                                                              NOR=Kostnadsobjekt, Beskrivelse;
                                                              SVE=Kostnadsobjekt, beskrivning];
                                                   Editable=No;
                                                   CaptionClass='1,11012000,2, , ' + Text019 }
    { 100 ;   ;Element             ;Code20        ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Receiving Company),
                                                                                                        Type=CONST(Element),
                                                                                                        Project No.=FIELD(Object No.),
                                                                                                        Blocked=CONST(No));
                                                   OnValidate=VAR
                                                                lvHoursCodeElementRec@1100525000 : Record 11012358;
                                                                ProjElem@1100525001 : Record 11012010;
                                                              BEGIN
                                                                IF Element = '' THEN
                                                                  EXIT;
                                                                IF (Type = Type::Indirect) THEN
                                                                  TESTFIELD(Element, '')
                                                                ELSE BEGIN
                                                                   ElementFormat.FormatElem(Element, 2, GetReceivingCompany);
                                                                   lvHoursCodeElementRec.GET("Receiving Company", lvHoursCodeElementRec.Type::Element, "Object No.", Element);
                                                                   ProjElem.CHANGECOMPANY(GetReceivingCompany);
                                                                   ProjElem.GET("Object No.", Element);
                                                                   ProjElem.TESTFIELD(Blocked, FALSE);  //T003806
                                                                END;

                                                                CALCFIELDS("Element Description");
                                                              END;

                                                   OnLookup=VAR
                                                              SiteMngmntHoursCodesRec@1100527700 : Record 11012358;
                                                            BEGIN
                                                              SiteMngmntHoursCodesRec.FILTERGROUP(10);
                                                              SiteMngmntHoursCodesRec.SETRANGE(Company,"Receiving Company");
                                                              SiteMngmntHoursCodesRec.SETRANGE(Type,SiteMngmntHoursCodesRec.Type::Element);
                                                              SiteMngmntHoursCodesRec.SETRANGE("Project No.","Object No.");
                                                              SiteMngmntHoursCodesRec.SETRANGE(Blocked,FALSE);
                                                              IF SiteMngmntHoursCodesRec.FINDSET THEN BEGIN
                                                                REPEAT
                                                                  IF NOT SiteMngmntHoursCodesRec."Block Outside Date Range" THEN
                                                                    SiteMngmntHoursCodesRec.MARK(TRUE)
                                                                  ELSE BEGIN
                                                                    IF (SiteMngmntHoursCodesRec."Starting Date" = 0D) AND (SiteMngmntHoursCodesRec."Ending Date" = 0D) THEN
                                                                      SiteMngmntHoursCodesRec.MARK(TRUE);
                                                                    IF (SiteMngmntHoursCodesRec."Starting Date" <> 0D) AND (SiteMngmntHoursCodesRec."Ending Date" = 0D) THEN
                                                                      IF SiteMngmntHoursCodesRec."Starting Date" <= DWY2DATE(7,Week,Year) THEN
                                                                        SiteMngmntHoursCodesRec.MARK(TRUE);
                                                                    IF (SiteMngmntHoursCodesRec."Starting Date" = 0D) AND (SiteMngmntHoursCodesRec."Ending Date" <> 0D) THEN
                                                                      IF SiteMngmntHoursCodesRec."Ending Date" >= DWY2DATE(1,Week,Year) THEN
                                                                        SiteMngmntHoursCodesRec.MARK(TRUE);
                                                                    IF (SiteMngmntHoursCodesRec."Starting Date" <> 0D) AND (SiteMngmntHoursCodesRec."Ending Date" <> 0D) THEN
                                                                      IF (SiteMngmntHoursCodesRec."Ending Date" >= DWY2DATE(1,Week,Year)) AND (SiteMngmntHoursCodesRec."Starting Date" <= DWY2DATE(7,Week,Year)) THEN
                                                                        SiteMngmntHoursCodesRec.MARK(TRUE);
                                                                  END;
                                                                UNTIL SiteMngmntHoursCodesRec.NEXT = 0;
                                                              END;
                                                              SiteMngmntHoursCodesRec.MARKEDONLY(TRUE);
                                                              IF SiteMngmntHoursCodesRec.FINDFIRST THEN;

                                                              SiteMngmntHoursCodesRec.FILTERGROUP(0);

                                                              IF PAGE.RUNMODAL(11072213,SiteMngmntHoursCodesRec)=ACTION::LookupOK THEN BEGIN
                                                                SiteMngmntHoursCodesRec.GET(SiteMngmntHoursCodesRec.Company,SiteMngmntHoursCodesRec.Type::Element,SiteMngmntHoursCodesRec."Project No.",SiteMngmntHoursCodesRec.Code);
                                                                VALIDATE(Element,SiteMngmntHoursCodesRec.Code);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Element;
                                                              NOR=Element;
                                                              SVE=Element] }
    { 110 ;   ;Monday              ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Component Type" = "Component Type"::Expenses) THEN BEGIN
                                                                  IF ExpensesPerDay THEN
                                                                    VALIDATE("Monday Quantity", Monday)
                                                                  ELSE
                                                                    IF (Monday <> 0) THEN
                                                                      FIELDERROR("Component Type");
                                                                END ELSE BEGIN
                                                                  CreateHourLineForGrade(1, Monday);
                                                                  CalculateTotalLine;
                                                                  IF Monday = 0 THEN BEGIN
                                                                    "Overtime Hours Monday" := 0;
                                                                    "Overtime Comp. Monday" := '';
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Monday;
                                                              NOR=Mandag;
                                                              SVE=MÜndag];
                                                   BlankZero=Yes }
    { 112 ;   ;Monday Quantity     ;Decimal       ;OnValidate=VAR
                                                                AllowanceperDay@1100528300 : Record 11125855;
                                                                DimensionValue@1100528301 : Record 349;
                                                              BEGIN
                                                                IF ("Component Type" = "Component Type"::Expenses) THEN BEGIN
                                                                  IF ExpensesPerDay THEN BEGIN
                                                                    Monday := "Monday Quantity";
                                                                    CalculateTotalLine;
                                                                  END ELSE BEGIN
                                                                    DimMgt.GetDimValueRec(2, "Cost Object", DimensionValue, FALSE, '');
                                                                    VALIDATE("Monday Amount", ROUND("Monday Quantity" * DimensionValue.Price));
                                                                  END;
                                                                END;
                                                                TotalQuantities;
                                                                GetEmployeeRec;
                                                                IF (AllowanceperDay.GetAllowancePerDay("Wage Component", EmployeeRec, AllowanceperDay)) THEN
                                                                  VALIDATE("Monday Amount", "Monday Quantity" * AllowanceperDay."Amount Monday");
                                                              END;

                                                   CaptionML=ENU=Monday Quantity;
                                                   BlankZero=Yes }
    { 113 ;   ;Monday Amount       ;Decimal       ;OnValidate=BEGIN
                                                                TotalAmounts;
                                                              END;

                                                   CaptionML=ENU=Monday Amount;
                                                   BlankZero=Yes }
    { 115 ;   ;Overtime Comp. Monday;Code20       ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=[ENU=Overtime Comp. Monday;
                                                              NOR=Overtidskomp. Mandag;
                                                              SVE=ôvertidskomp. MÜndag] }
    { 116 ;   ;Overtime Hours Monday;Decimal      ;CaptionML=[ENU=Overtime Hours Monday;
                                                              NOR=Overtidstimer, Mandag;
                                                              SVE=ôvertidstimmar, mÜndag] }
    { 117 ;   ;Travel Hours Monday ;Option        ;CaptionML=[ENU=Travel Hours Monday;
                                                              NOR=Reisetimer, Mandag;
                                                              SVE=Restimmar mÜndag];
                                                   OptionCaptionML=[ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                                    NOR=Passasjer,SjÜfõr uten passasjerer,SjÜfõr med passasjerer,Arbeid til Arbeid;
                                                                    SVE=Passagerare,Fîrare utan passagerare,Fîrare med passagerare,Arbete till arbete];
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to Work }
    { 120 ;   ;Tuesday             ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Component Type" = "Component Type"::Expenses) THEN BEGIN
                                                                  IF ExpensesPerDay THEN
                                                                    VALIDATE("Tuesday Quantity", Tuesday)
                                                                  ELSE
                                                                    IF (Tuesday <> 0) THEN
                                                                      FIELDERROR("Component Type");
                                                                END ELSE BEGIN
                                                                  CreateHourLineForGrade(2, Tuesday);
                                                                  CalculateTotalLine;
                                                                  IF Tuesday = 0 THEN BEGIN
                                                                    "Overtime Hours Tuesday" := 0;
                                                                    "Overtime Comp.Tuesday" := '';
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Tuesday;
                                                              NOR=Tirsdag;
                                                              SVE=Tisdag];
                                                   BlankZero=Yes }
    { 122 ;   ;Tuesday Quantity    ;Decimal       ;OnValidate=VAR
                                                                AllowanceperDay@1100528300 : Record 11125855;
                                                                DimensionValue@1100528301 : Record 349;
                                                              BEGIN
                                                                IF ("Component Type" = "Component Type"::Expenses) THEN BEGIN
                                                                  IF ExpensesPerDay THEN BEGIN
                                                                    Tuesday := "Tuesday Quantity";
                                                                    CalculateTotalLine;
                                                                  END ELSE BEGIN
                                                                    DimMgt.GetDimValueRec(2, "Cost Object", DimensionValue, FALSE, '');
                                                                    VALIDATE("Tuesday Amount", ROUND("Tuesday Quantity" * DimensionValue.Price));
                                                                  END;
                                                                END;
                                                                TotalQuantities;
                                                                GetEmployeeRec;
                                                                IF (AllowanceperDay.GetAllowancePerDay("Wage Component", EmployeeRec, AllowanceperDay)) THEN
                                                                  VALIDATE("Tuesday Amount", "Tuesday Quantity" * AllowanceperDay."Amount Tuesday");
                                                              END;

                                                   CaptionML=ENU=Tuesday Quantity;
                                                   BlankZero=Yes }
    { 123 ;   ;Tuesday Amount      ;Decimal       ;OnValidate=BEGIN
                                                                TotalAmounts;
                                                              END;

                                                   CaptionML=ENU=Tuesday Amount;
                                                   BlankZero=Yes }
    { 125 ;   ;Overtime Comp.Tuesday;Code20       ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=[ENU=Overtime Comp.Tuesday;
                                                              NOR=Overtidskomp. Tirsdag;
                                                              SVE=ôvertidskomp.tisdag] }
    { 126 ;   ;Overtime Hours Tuesday;Decimal     ;CaptionML=[ENU=Overtime Hours Tuesday;
                                                              NOR=Overtidstimer tirsdag;
                                                              SVE=ôvertidstimmar, tisdag] }
    { 127 ;   ;Travel Hours Tuesday;Option        ;CaptionML=[ENU=Travel Hours Tuesday;
                                                              NOR=Reisetimer tirsdag;
                                                              SVE=Restimmar tisdag];
                                                   OptionCaptionML=[ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                                    NOR=Passasjer,SjÜfõr uten passasjerer,SjÜfõr med passasjerer,Arbeid til Arbeid;
                                                                    SVE=Passagerare,Fîrare utan passagerare,Fîrare med passagerare,Arbete till arbete];
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to work }
    { 130 ;   ;Wednesday           ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Component Type" = "Component Type"::Expenses) THEN BEGIN
                                                                  IF ExpensesPerDay THEN
                                                                    VALIDATE("Wednesday Quantity", Wednesday)
                                                                  ELSE
                                                                    IF (Wednesday <> 0) THEN
                                                                      FIELDERROR("Component Type");
                                                                END ELSE BEGIN
                                                                  CreateHourLineForGrade(3, Wednesday);
                                                                  CalculateTotalLine;
                                                                  IF Wednesday = 0 THEN BEGIN
                                                                    "Overtime Hours Wednesday" := 0;
                                                                    "Overtime Comp.Wednesday" := '';
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Wednesday;
                                                              NOR=Onsdag;
                                                              SVE=Onsdag];
                                                   BlankZero=Yes }
    { 132 ;   ;Wednesday Quantity  ;Decimal       ;OnValidate=VAR
                                                                AllowanceperDay@1100528300 : Record 11125855;
                                                                DimensionValue@1100528301 : Record 349;
                                                              BEGIN
                                                                IF ("Component Type" = "Component Type"::Expenses) THEN BEGIN
                                                                  IF ExpensesPerDay THEN BEGIN
                                                                    Wednesday := "Wednesday Quantity";
                                                                    CalculateTotalLine;
                                                                  END ELSE BEGIN
                                                                    DimMgt.GetDimValueRec(2, "Cost Object", DimensionValue, FALSE, '');
                                                                    VALIDATE("Wednesday Amount", ROUND("Wednesday Quantity" * DimensionValue.Price));
                                                                  END;
                                                                END;
                                                                TotalQuantities;
                                                                GetEmployeeRec;
                                                                IF (AllowanceperDay.GetAllowancePerDay("Wage Component", EmployeeRec, AllowanceperDay)) THEN
                                                                  VALIDATE("Wednesday Amount", "Wednesday Quantity" * AllowanceperDay."Amount Wednesday");
                                                              END;

                                                   CaptionML=ENU=Wednesday Quantity;
                                                   BlankZero=Yes }
    { 133 ;   ;Wednesday Amount    ;Decimal       ;OnValidate=BEGIN
                                                                TotalAmounts;
                                                              END;

                                                   CaptionML=ENU=Wednesday Amount;
                                                   BlankZero=Yes }
    { 135 ;   ;Overtime Comp.Wednesday;Code20     ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=[ENU=Overtime Comp.Wednesday;
                                                              NOR=Overtidskomp onsdag;
                                                              SVE=ôvertidskomp.onsdag] }
    { 136 ;   ;Overtime Hours Wednesday;Decimal   ;CaptionML=[ENU=Overtime Hours Wednesday;
                                                              NOR=Ovvertidstimer onsdag;
                                                              SVE=ôvertidstimmar, onsdag] }
    { 137 ;   ;Travel Hours Wednesday;Option      ;CaptionML=[ENU=Travel Hours Wednesday;
                                                              NOR=Reisetimer onsdag;
                                                              SVE=Restimmar onsdag];
                                                   OptionCaptionML=[ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                                    NOR=Passasjer,SjÜfõr uten passasjerer,SjÜfõr med passasjerer,Arbeid til Arbeid;
                                                                    SVE=Passagerare,Fîrare utan passagerare,Fîrare med passagerare,Arbete till arbete];
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to Work }
    { 140 ;   ;Thursday            ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Component Type" = "Component Type"::Expenses) THEN BEGIN
                                                                  IF ExpensesPerDay THEN
                                                                    VALIDATE("Thursday Quantity", Thursday)
                                                                  ELSE
                                                                    IF (Thursday <> 0) THEN
                                                                      FIELDERROR("Component Type");
                                                                END ELSE BEGIN
                                                                  CreateHourLineForGrade(4, Thursday);
                                                                  CalculateTotalLine;
                                                                  IF Thursday = 0 THEN BEGIN
                                                                    "Overtime Hours Thursday" := 0;
                                                                    "Overtime Comp.Thursday" := '';
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Thursday;
                                                              NOR=Torsdag;
                                                              SVE=Torsdag];
                                                   BlankZero=Yes }
    { 142 ;   ;Thursday Quantity   ;Decimal       ;OnValidate=VAR
                                                                AllowanceperDay@1100528300 : Record 11125855;
                                                                DimensionValue@1100528301 : Record 349;
                                                              BEGIN
                                                                IF ("Component Type" = "Component Type"::Expenses) THEN BEGIN
                                                                  IF ExpensesPerDay THEN BEGIN
                                                                    Thursday := "Thursday Quantity";
                                                                    CalculateTotalLine;
                                                                  END ELSE BEGIN
                                                                    DimMgt.GetDimValueRec(2, "Cost Object", DimensionValue, FALSE, '');
                                                                    VALIDATE("Thursday Amount", ROUND("Thursday Quantity" * DimensionValue.Price));
                                                                  END;
                                                                END;
                                                                TotalQuantities;
                                                                GetEmployeeRec;
                                                                IF (AllowanceperDay.GetAllowancePerDay("Wage Component", EmployeeRec, AllowanceperDay)) THEN
                                                                  VALIDATE("Thursday Amount", "Thursday Quantity" * AllowanceperDay."Amount Thursday");
                                                              END;

                                                   CaptionML=ENU=Thursday Quantity;
                                                   BlankZero=Yes }
    { 143 ;   ;Thursday Amount     ;Decimal       ;OnValidate=BEGIN
                                                                TotalAmounts;
                                                              END;

                                                   CaptionML=ENU=Thursday Amount;
                                                   BlankZero=Yes }
    { 145 ;   ;Overtime Comp.Thursday;Code20      ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=[ENU=Overtime Comp.Thursday;
                                                              NOR=Overtidskomp. Torsdag;
                                                              SVE=ôvertidskomp.torsdag] }
    { 146 ;   ;Overtime Hours Thursday;Decimal    ;CaptionML=[ENU=Overtime Hours Thursday;
                                                              NOR=Overtidstimer torsdag;
                                                              SVE=ôvertidstimmar, torsdag] }
    { 147 ;   ;Travel Hours Thursday;Option       ;CaptionML=[ENU=Travel Hours Thursday;
                                                              NOR=Reisetimer torsdag;
                                                              SVE=Restimmar torsdag];
                                                   OptionCaptionML=[ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                                    NOR=Passasjer,SjÜfõr uten passasjerer,SjÜfõr med passasjerer,Arbeid til Arbeid;
                                                                    SVE=Passagerare,Fîrare utan passagerare,Fîrare med passagerare,Arbete till arbete];
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to work }
    { 150 ;   ;Friday              ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Component Type" = "Component Type"::Expenses) THEN BEGIN
                                                                  IF ExpensesPerDay THEN
                                                                    VALIDATE("Friday Quantity", Friday)
                                                                  ELSE
                                                                    IF (Friday <> 0) THEN
                                                                      FIELDERROR("Component Type");
                                                                END ELSE BEGIN
                                                                  CreateHourLineForGrade(5, Friday);
                                                                  CalculateTotalLine;
                                                                  IF Friday = 0 THEN BEGIN
                                                                    "Overtime Hours Friday" := 0;
                                                                    "Overtime Comp.Friday" := '';
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Friday;
                                                              NOR=Fredag;
                                                              SVE=Fredag];
                                                   BlankZero=Yes }
    { 152 ;   ;Friday Quantity     ;Decimal       ;OnValidate=VAR
                                                                AllowanceperDay@1100528300 : Record 11125855;
                                                                DimensionValue@1100528301 : Record 349;
                                                              BEGIN
                                                                IF ("Component Type" = "Component Type"::Expenses) THEN BEGIN
                                                                  IF ExpensesPerDay THEN BEGIN
                                                                    Friday := "Friday Quantity";
                                                                    CalculateTotalLine;
                                                                  END ELSE BEGIN
                                                                    DimMgt.GetDimValueRec(2, "Cost Object", DimensionValue, FALSE, '');
                                                                    VALIDATE("Friday Amount", ROUND("Friday Quantity" * DimensionValue.Price));
                                                                  END;
                                                                END;
                                                                TotalQuantities;
                                                                GetEmployeeRec;
                                                                IF (AllowanceperDay.GetAllowancePerDay("Wage Component", EmployeeRec, AllowanceperDay)) THEN
                                                                  VALIDATE("Friday Amount", "Friday Quantity" * AllowanceperDay."Amount Friday");
                                                              END;

                                                   CaptionML=ENU=Friday Amount;
                                                   BlankZero=Yes }
    { 153 ;   ;Friday Amount       ;Decimal       ;OnValidate=BEGIN
                                                                TotalAmounts;
                                                              END;

                                                   CaptionML=ENU=Friday Quantity;
                                                   BlankZero=Yes }
    { 155 ;   ;Overtime Comp.Friday;Code20        ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=[ENU=Overtime Comp.Friday;
                                                              NOR=Overtidskomp. Fredag;
                                                              SVE=ôvertidskomp.fredag] }
    { 156 ;   ;Overtime Hours Friday;Decimal      ;CaptionML=[ENU=Overtime Hours Friday;
                                                              NOR=Overtidstimer fredag;
                                                              SVE=ôvertidstimmar, fredag] }
    { 157 ;   ;Travel Hours Friday ;Option        ;CaptionML=[ENU=Travel Hours Friday;
                                                              NOR=Reisetimer fredag;
                                                              SVE=Restimmar fredag];
                                                   OptionCaptionML=[ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                                    NOR=Passasjer,SjÜfõr uten passasjerer,SjÜfõr med passasjerer,Arbeid til Arbeid;
                                                                    SVE=Passagerare,Fîrare utan passagerare,Fîrare med passagerare,Arbete till arbete];
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to Work }
    { 160 ;   ;Saturday            ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Component Type" = "Component Type"::Expenses) THEN BEGIN
                                                                  IF ExpensesPerDay THEN
                                                                    VALIDATE("Saturday Quantity", Saturday)
                                                                  ELSE
                                                                    IF (Saturday <> 0) THEN
                                                                      FIELDERROR("Component Type");
                                                                END ELSE BEGIN
                                                                  CreateHourLineForGrade(6, Saturday);
                                                                  CalculateTotalLine;
                                                                  IF Saturday = 0 THEN BEGIN
                                                                    "Overtime Hours Saturday" := 0;
                                                                    "Overtime Comp.Saturday" := '';
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Saturday;
                                                              NOR=Lõrdag;
                                                              SVE=Lîrdag];
                                                   BlankZero=Yes }
    { 162 ;   ;Saturday Quantity   ;Decimal       ;OnValidate=VAR
                                                                AllowanceperDay@1100528300 : Record 11125855;
                                                                DimensionValue@1100528301 : Record 349;
                                                              BEGIN
                                                                IF ("Component Type" = "Component Type"::Expenses) THEN BEGIN
                                                                  IF ExpensesPerDay THEN BEGIN
                                                                    Saturday := "Saturday Quantity";
                                                                    CalculateTotalLine;
                                                                  END ELSE BEGIN
                                                                    DimMgt.GetDimValueRec(2, "Cost Object", DimensionValue, FALSE, '');
                                                                    VALIDATE("Saturday Amount", ROUND("Saturday Quantity" * DimensionValue.Price));
                                                                  END;
                                                                END;
                                                                TotalQuantities;
                                                                GetEmployeeRec;
                                                                IF (AllowanceperDay.GetAllowancePerDay("Wage Component", EmployeeRec, AllowanceperDay)) THEN
                                                                  VALIDATE("Saturday Amount", "Saturday Quantity" * AllowanceperDay."Amount Saturday");
                                                              END;

                                                   CaptionML=ENU=Saturday Quantity;
                                                   BlankZero=Yes }
    { 163 ;   ;Saturday Amount     ;Decimal       ;OnValidate=BEGIN
                                                                TotalAmounts;
                                                              END;

                                                   CaptionML=ENU=Saturday Amount;
                                                   BlankZero=Yes }
    { 165 ;   ;Overtime Comp.Saturday;Code20      ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=[ENU=Overtime Comp.Saturday;
                                                              NOR=Overtidskomp. Lõrdag;
                                                              SVE=ôvertidskomp.lîrdag] }
    { 166 ;   ;Overtime Hours Saturday;Decimal    ;CaptionML=[ENU=Overtime Hours Saturday;
                                                              NOR=Overtidstimer lõrdag;
                                                              SVE=ôvertidstimmar, lîrdag] }
    { 167 ;   ;Travel Hours Saturday;Option       ;CaptionML=[ENU=Travel Hours Saturday;
                                                              NOR=Reisetimer lõrdag;
                                                              SVE=Restimmar lîrdag];
                                                   OptionCaptionML=[ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                                    NOR=Passasjer,SjÜfõr uten passasjerer,SjÜfõr med passasjerer,Arbeid til Arbeid;
                                                                    SVE=Passagerare,Fîrare utan passagerare,Fîrare med passagerare,Arbete till arbete];
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to Work }
    { 170 ;   ;Sunday              ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Component Type" = "Component Type"::Expenses) THEN BEGIN
                                                                  IF ExpensesPerDay THEN
                                                                    VALIDATE("Sunday Quantity", Sunday)
                                                                  ELSE
                                                                    IF (Sunday <> 0) THEN
                                                                      FIELDERROR("Component Type");
                                                                END ELSE BEGIN
                                                                  CreateHourLineForGrade(7, Sunday);
                                                                  CalculateTotalLine;
                                                                  IF Sunday = 0 THEN BEGIN
                                                                    "Overtime Hours Sunday" := 0;
                                                                    "Overtime Comp.Sunday" := '';
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Sunday;
                                                              NOR=Sõndag;
                                                              SVE=Sîndag];
                                                   BlankZero=Yes }
    { 172 ;   ;Sunday Quantity     ;Decimal       ;OnValidate=VAR
                                                                AllowanceperDay@1100528300 : Record 11125855;
                                                                DimensionValue@1100528301 : Record 349;
                                                              BEGIN
                                                                IF ("Component Type" = "Component Type"::Expenses) THEN BEGIN
                                                                  IF ExpensesPerDay THEN BEGIN
                                                                    Sunday := "Sunday Quantity";
                                                                    CalculateTotalLine;
                                                                  END ELSE BEGIN
                                                                    DimMgt.GetDimValueRec(2, "Cost Object", DimensionValue, FALSE, '');
                                                                    VALIDATE("Sunday Amount", ROUND("Sunday Quantity" * DimensionValue.Price));
                                                                  END;
                                                                END;
                                                                TotalQuantities;
                                                                GetEmployeeRec;
                                                                IF (AllowanceperDay.GetAllowancePerDay("Wage Component", EmployeeRec, AllowanceperDay)) THEN
                                                                  VALIDATE("Sunday Amount", "Sunday Quantity" * AllowanceperDay."Amount Sunday");
                                                              END;

                                                   CaptionML=ENU=Sunday Quantity;
                                                   BlankZero=Yes }
    { 173 ;   ;Sunday Amount       ;Decimal       ;OnValidate=BEGIN
                                                                TotalAmounts;
                                                              END;

                                                   CaptionML=ENU=Sunday Amount;
                                                   BlankZero=Yes }
    { 175 ;   ;Overtime Comp.Sunday;Code20        ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days),
                                                                                                        Overtime=CONST(Yes));
                                                   CaptionML=[ENU=Overtime Comp.Sunday;
                                                              NOR=Overtidskomp. Sõndag;
                                                              SVE=ôvertidskomp.sîndag] }
    { 176 ;   ;Overtime Hours Sunday;Decimal      ;CaptionML=[ENU=Overtime Hours Sunday;
                                                              NOR=Overtidstimer sõndag;
                                                              SVE=ôvertidstimmar, sîndag] }
    { 177 ;   ;Travel Hours Sunday ;Option        ;CaptionML=[ENU=Travel Hours Sunday;
                                                              NOR=Reisetimer sõndag;
                                                              SVE=Restimmar sîndag];
                                                   OptionCaptionML=[ENU=Passenger,Driver without passengers,Driver with passengers,Work to Work;
                                                                    NOR=Passasjer,SjÜfõr uten passasjerer,SjÜfõr med passasjerer,Arbeid til Arbeid;
                                                                    SVE=Passagerare,Fîrare utan passagerare,Fîrare med passagerare,Arbete till arbete];
                                                   OptionString=Passenger,Driver without passengers,Driver with passengers,Work to Work }
    { 180 ;   ;Total Line          ;Decimal       ;CaptionML=[ENU=Total Line;
                                                              NOR=Totalrad;
                                                              SVE=Totalrad] }
    { 190 ;   ;Norm Hours          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Employee."Norm Hours" WHERE (No.=FIELD(Employee No.)));
                                                   CaptionML=[ENU=Norm Hours;
                                                              NOR=Normtimer;
                                                              SVE=Norm (timmar)];
                                                   Editable=No }
    { 200 ;   ;Total Hours         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Site Mngmnt. Hours Line"."Total Line" WHERE (Year=FIELD(Year),
                                                                                                                 Week=FIELD(Week),
                                                                                                                 Supplying Company=FIELD(Supplying Company),
                                                                                                                 Employee No.=FIELD(Employee No.),
                                                                                                                 Component Type=CONST(Hours),
                                                                                                                 Overtime=CONST(No)));
                                                   CaptionML=[ENU=Total Hours;
                                                              NOR=Timer totalt;
                                                              SVE=Timmar totalt];
                                                   Editable=No }
    { 210 ;   ;Connection No.      ;Integer       ;CaptionML=[ENU=Connection No.;
                                                              NOR=Tilkoblingsnr;
                                                              SVE=Anslutningsnr] }
    { 220 ;   ;Wage Component      ;Code20        ;TableRelation="Site Mngmnt. Hours Codes".Code WHERE (Company=FIELD(Supplying Company),
                                                                                                        Type=CONST(Wage Components),
                                                                                                        Component Type=FILTER(<>Days));
                                                   OnValidate=VAR
                                                                lvEmployeeRec@1100525000 : Record 5200;
                                                                WageCompRec@1100528500 : Record 11012014;
                                                              BEGIN
                                                                "Start Kilometer" := 0;
                                                                "End Kilometer" := 0;
                                                                Chargeable := FALSE;

                                                                IF "Wage Component" <>'' THEN BEGIN
                                                                  IF Type = Type::UnmannedPlant THEN
                                                                    TESTFIELD("Wage Component",'');

                                                                  WageCompRec.GET("Wage Component");

                                                                  IF WageCompRec."Kilometer Expense" THEN BEGIN
                                                                    "Component Type" := "Component Type"::Kilometers;
                                                                    lvEmployeeRec.CHANGECOMPANY("Supplying Company");
                                                                    lvEmployeeRec.GET("Employee No.");
                                                                    SetDefaultDriverType(lvEmployeeRec."Driver Type");
                                                                  END ELSE
                                                                    CASE WageCompRec."Component Type" OF
                                                                      WageCompRec."Component Type"::Hours:
                                                                        "Component Type" := "Component Type"::Hours;
                                                                      WageCompRec."Component Type"::Expenses:
                                                                        "Component Type" := "Component Type"::Expenses;
                                                                      WageCompRec."Component Type"::Days:
                                                                        "Component Type" := "Component Type"::Days;
                                                                    END;
                                                                  Chargeable := WageCompRec.Chargeable;
                                                                END;
                                                                CheckCostType;

                                                                "Leave Type" := WageCompRec."Leave Type";
                                                                "Leave Factor" := WageCompRec."Leave Factor";
                                                              END;

                                                   CaptionML=[ENU=Wage Component;
                                                              NOR=Lõnnsart;
                                                              SVE=Lîneart] }
    { 230 ;   ;Component Type      ;Option        ;CaptionML=[ENU=Component Type;
                                                              NOR=Komponenttype;
                                                              SVE=Komponenttyp];
                                                   OptionCaptionML=[ENU=Hours,Days,Expenses,Kilometers;
                                                                    NOR=Timer,Dager,Utgifter,Kilometer;
                                                                    SVE=Timmar,dagar,utgifter,kilometer];
                                                   OptionString=Hours,Days,Expenses,Kilometers;
                                                   Editable=No }
    { 240 ;   ;Overtime            ;Boolean       ;CaptionML=[ENU=Overtime;
                                                              NOR=Overtid;
                                                              SVE=ôvertid];
                                                   Editable=No }
    { 260 ;   ;Comment             ;Text100       ;CaptionML=[ENU=Comment;
                                                              NOR=Kommentar;
                                                              SVE=Kommentar] }
    { 280 ;   ;Shift Code          ;Code10        ;OnValidate=VAR
                                                                ProjShift@1210190000 : Record 11125538;
                                                                ProjNo@1210190001 : Code[20];
                                                              BEGIN
                                                                //*DP00033
                                                                IF "Shift Code" = '' THEN
                                                                  EXIT;

                                                                ProjNo := GetProjectNoForShift();
                                                                IF ProjNo = '' THEN BEGIN
                                                                  IF (Type <> Type::Indirect) THEN
                                                                    TESTFIELD("Object No.")
                                                                  ELSE
                                                                    FIELDERROR(Type);;
                                                                END;
                                                                ProjShift.CHANGECOMPANY("Receiving Company");
                                                                ProjShift.GET(ProjNo, "Shift Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupShiftCode(TRUE);
                                                            END;

                                                   CaptionML=[ENU=Shift Code;
                                                              NOR=Skiftkode;
                                                              SVE=Skiftkod] }
    { 422 ;   ;Reason Code         ;Code10        ;OnValidate=VAR
                                                                ReasonCode@1100528200 : Record 231;
                                                              BEGIN
                                                                //*DP01205
                                                                IF "Reason Code" = '' THEN
                                                                  EXIT;
                                                                ReasonCode.CHANGECOMPANY("Receiving Company");
                                                                ReasonCode.GET("Reason Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupReasonCode(TRUE);
                                                            END;

                                                   CaptionML=[ENU=Reason Code;
                                                              NOR=èrsaksspor;
                                                              SVE=Uppfîljningskod] }
    { 460 ;   ;Service Location No.;Code20        ;OnValidate=VAR
                                                                ServiceLocation@1100528200 : Record 11012801;
                                                              BEGIN
                                                                //*DP01205
                                                                IF "Service Location No." = '' THEN
                                                                  EXIT;
                                                                ServiceLocation.CHANGECOMPANY("Receiving Company");
                                                                ServiceLocation.GET("Service Location No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupServiceLocation(TRUE);
                                                            END;

                                                   CaptionML=[ENU=Service Location No.;
                                                              NOR=Servicelokasjon Nr.;
                                                              SVE=Serviceplatsnr];
                                                   Editable=No }
    { 530 ;   ;Department Code     ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                IF GUIALLOWED AND (CurrFieldNo  = FIELDNO("Department Code")) THEN
                                                                  IF (Type <> Type::Indirect) OR
                                                                     (("Receiving Company" <> '') AND ("Receiving Company" <> CURRENTCOMPANY))
                                                                  THEN
                                                                    TESTFIELD("Department Code", xRec."Department Code"); //may not change
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              NOR=Avdelingskode;
                                                              SVE=Global dimension 1 kod];
                                                   CaptionClass='1,1,1' }
    { 560 ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                DimVal@1210190000 : Record 349;
                                                                DimMgt@1210190001 : Codeunit 408;
                                                                AllowanceperDay@1101285000 : Record 11125855;
                                                              BEGIN
                                                                //*C-027136
                                                                IF Quantity <> 0 THEN BEGIN
                                                                  CheckIfNotExpensesPerDay;
                                                                  TESTFIELD("Component Type", "Component Type"::Expenses);
                                                                  IF Type = Type::UnmannedPlant THEN
                                                                    FIELDERROR(Type);;
                                                                END;

                                                                //4PSSE.sn 180319
                                                                IF Amount = 0 THEN BEGIN
                                                                  IF HourAccRec.GET(Year,Week,"Supplying Company","Employee No.") THEN BEGIN
                                                                    EmployeeRec.GET("Employee No.");
                                                                    AllowanceperDay.SETRANGE("CAO Code",EmployeeRec.CAO);
                                                                    AllowanceperDay.SETRANGE("Wage Component","Wage Component");
                                                                    IF AllowanceperDay.FIND('-') THEN
                                                                      Amount := AllowanceperDay."Amount Monday";
                                                                  END;
                                                                END;
                                                                //4PSSE.en 180319

                                                                IF (Quantity <> 0) AND (xRec.Quantity = 0) AND (Amount = 0) THEN BEGIN
                                                                  DimMgt.GetDimValueRec(2, "Cost Object", DimVal, FALSE, '');
                                                                  Amount := ROUND(Quantity * DimVal.Price);
                                                                END ELSE BEGIN
                                                                  IF Quantity = 0 THEN
                                                                    Amount := 0
                                                                  ELSE BEGIN
                                                                    IF xRec.Quantity = 0 THEN
                                                                      Amount := Quantity * Amount
                                                                    ELSE
                                                                      Amount := Quantity * (Amount / xRec.Quantity);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   BlankZero=Yes;
                                                   Description=Only for expenses }
    { 570 ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                //*C-027136
                                                                IF Amount <> 0 THEN BEGIN
                                                                  CheckIfNotExpensesPerDay;
                                                                  TESTFIELD("Component Type", "Component Type"::Expenses);
                                                                  TESTFIELD(Quantity);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              NOR=Belõp;
                                                              SVE=Belopp];
                                                   BlankZero=Yes;
                                                   Description=Only for expenses }
    { 580 ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                //*C-027136
                                                                IF "Posting Date" <> 0D THEN BEGIN
                                                                  CheckIfNotExpensesPerDay;
                                                                  TESTFIELD("Component Type", "Component Type"::Expenses);
                                                                  IF ("Posting Date" < DWY2DATE(1,Week,Year)) OR ("Posting Date" > DWY2DATE(7,Week,Year)) THEN
                                                                    ERROR(Text009, DWY2DATE(1,Week,Year), DWY2DATE(7,Week,Year));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              NOR=Bokfõringsdato;
                                                              SVE=Bokfîringsdatum];
                                                   Description=Only for expenses }
    { 640 ;   ;Chargeable          ;Boolean       ;CaptionML=[ENU=Chargeable;
                                                              NOR=Belastbar;
                                                              SVE=Debiterbar];
                                                   Editable=No }
    { 660 ;   ;Cost Component      ;Code20        ;OnValidate=BEGIN
                                                                ValidateCostComponent;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupCostComponent(TRUE);
                                                            END;

                                                   CaptionML=[ENU=Cost Component;
                                                              NOR=Kostnadskomponent;
                                                              SVE=Kostnadskomponent] }
    { 700 ;   ;Plant Company       ;Text30        ;TableRelation=Company;
                                                   OnValidate=VAR
                                                                PlantMgtCompRec@1100525001 : Record 11020586;
                                                                TmpPlantMgtCompRec@1100525000 : TEMPORARY Record 11020586;
                                                                NoOfPlantComps@1100527650 : Integer;
                                                              BEGIN
                                                                IF "Plant Company" <> '' THEN BEGIN
                                                                  IF NOT PlantMgtCompRec.GET("Plant Company") THEN
                                                                    ERROR(Text005, "Plant Company", PlantMgtCompRec.TABLECAPTION)
                                                                  ELSE BEGIN
                                                                    IF "Object No." <> '' THEN BEGIN
                                                                      IF Type IN [Type::Project, Type::Plant, Type::UnmannedPlant] THEN
                                                                        NoOfPlantComps := PlantMgtCompRec.GetPlantCompaniesForProject("Object No.", TmpPlantMgtCompRec, "Receiving Company", FALSE);
                                                                      IF (Type IN [Type::Service, Type::Plant, Type::UnmannedPlant]) AND (NoOfPlantComps = 0) THEN
                                                                        PlantMgtCompRec.GetPlantCompaniesForService("Object No.", TmpPlantMgtCompRec, "Receiving Company", FALSE);
                                                                      IF NOT TmpPlantMgtCompRec.GET("Plant Company") THEN
                                                                        ERROR(Text006, "Object No.", FIELDCAPTION("Plant Company"), "Plant Company");
                                                                    END;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  IF Type IN [Type::Plant, Type::UnmannedPlant] THEN
                                                                    TESTFIELD("Plant Company");
                                                                END;

                                                                IF ("Plant Company" = '') OR ("Plant Company" <> xRec."Plant Company") THEN BEGIN
                                                                  "Plant Location" := '';
                                                                  "Plant Type" := '';
                                                                  "Plant No." := '';
                                                                  "Cost Component Plant" := '';
                                                                  "Plant Location" := FillDefaultPlantLoc();
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupPlantCompany();
                                                            END;

                                                   CaptionML=[ENU=Plant Company;
                                                              NOR=Maskinselskap;
                                                              SVE=Maskinfîretag];
                                                   Description=Supplying Plant Company }
    { 705 ;   ;Plant Location      ;Code20        ;OnValidate=VAR
                                                                lvPlantLocRec@1100525000 : Record 11012554;
                                                              BEGIN
                                                                IF "Object No." = '' THEN
                                                                  "Plant Location" := '';
                                                                IF "Plant Location" <> '' THEN BEGIN
                                                                  IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) THEN
                                                                    FIELDERROR(Type);

                                                                  TESTFIELD("Plant Company");
                                                                  lvPlantLocRec.CHANGECOMPANY("Plant Company");
                                                                  lvPlantLocRec.GET("Plant Location");
                                                                  CheckPlantLocLinkedToProject(lvPlantLocRec);
                                                                  lvPlantLocRec.CheckBlockFromOtherCompany(1, FALSE, TRUE, "Plant Company");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupPlantLocation();
                                                            END;

                                                   CaptionML=[ENU=Plant Location;
                                                              NOR=Maskinplassering;
                                                              SVE=Maskinutplacering] }
    { 710 ;   ;Plant Type          ;Code20        ;OnValidate=VAR
                                                                lvPlantTypeRec@1100525000 : Record 11012551;
                                                              BEGIN
                                                                IF ("Plant Type" = '') OR ("Plant Type" <> xRec."Plant Type") THEN
                                                                  "Plant No." := '';
                                                                IF "Plant Type" <> '' THEN BEGIN
                                                                  IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) THEN
                                                                    FIELDERROR(Type);

                                                                  TESTFIELD("Plant Company");
                                                                  lvPlantTypeRec.CHANGECOMPANY("Plant Company");
                                                                  lvPlantTypeRec.GET("Plant Type");
                                                                  IF "Cost Component Plant" = '' THEN
                                                                    FillDefaultCostCompPlant();
                                                                END;
                                                                FillDepartmentCode;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupPlantType();
                                                            END;

                                                   CaptionML=[ENU=Plant Type;
                                                              NOR=Maskintype;
                                                              SVE=Maskintyp] }
    { 720 ;   ;Plant No.           ;Code10        ;OnValidate=VAR
                                                                lvPlantNoRec@1100525000 : Record 11012552;
                                                              BEGIN
                                                                IF "Plant No." <> '' THEN BEGIN
                                                                  IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) THEN
                                                                    FIELDERROR(Type);

                                                                  lvPlantNoRec.CHANGECOMPANY("Plant Company");
                                                                  lvPlantNoRec.GET("Plant Type", "Plant No.");
                                                                END;
                                                                FillDepartmentCode;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupPlantNo();
                                                            END;

                                                   CaptionML=[ENU=Plant No.;
                                                              NOR=Maskinnr.;
                                                              SVE=Maskinnr] }
    { 730 ;   ;Cost Component Plant;Code10        ;OnValidate=VAR
                                                                lvPlantCostCompRec@1100525000 : Record 11012575;
                                                              BEGIN
                                                                IF "Cost Component Plant" <> '' THEN BEGIN
                                                                  TESTFIELD(Type, Type::Plant);

                                                                  lvPlantCostCompRec.CHANGECOMPANY("Plant Company");
                                                                  lvPlantCostCompRec.GET("Cost Component Plant");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupCostCompPlant();
                                                            END;

                                                   CaptionML=[ENU=Cost Component Plant;
                                                              NOR=Kostdel, maskin;
                                                              SVE=Kostnadsdel, Maskin] }
    { 750 ;   ;Plant Hour Rev. Line No.;Integer   ;CaptionML=[ENU=Plant Hour Rev. Line No.;
                                                              NOR=Maskintimer rev.radnr.;
                                                              SVE=Maskintimmar rev. radnr];
                                                   Description=Only used for unmanned plant;
                                                   Editable=No }
    { 780 ;   ;Additional Cost (Service);Boolean  ;OnValidate=BEGIN
                                                                ValidateAdditionalCost;
                                                                FillDepartmentCode;
                                                              END;

                                                   CaptionML=[ENU=Additional Cost (Service);
                                                              NOR=Tilleggskoster (service);
                                                              SVE=TillÑggskostnader (service)] }
    { 800 ;   ;Leave Type          ;Code10        ;TableRelation="Leave Type";
                                                   CaptionML=[ENU=Leave Type;
                                                              NOR=Fravërstype;
                                                              SVE=FrÜnvarotyp];
                                                   Editable=No }
    { 810 ;   ;Leave Factor        ;Decimal       ;CaptionML=[ENU=Leave Factor;
                                                              NOR=Fravërsfaktor;
                                                              SVE=FrÜnvarofaktor];
                                                   Editable=No }
    { 820 ;   ;Element Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Site Mngmnt. Hours Codes".Description WHERE (Company=FIELD(Receiving Company),
                                                                                                                    Type=CONST(Element),
                                                                                                                    Project No.=FIELD(Object No.),
                                                                                                                    Code=FIELD(Element)));
                                                   CaptionML=[ENU=Element Description;
                                                              NOR=Elementbeskrivelse;
                                                              SVE=Elementbeskrivning];
                                                   Editable=No }
    { 830 ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=ENU=Open,,,,,Released,Pending Approval,,,,Approved,,,,,Rejected,,,,,Posted;
                                                   OptionString=Open,,,,,Released,Pending Approval,,,,Approved,,,,,Rejected,,,,,Posted;
                                                   Description=DP00530;
                                                   Editable=No }
    { 840 ;   ;Line Template Code  ;Code20        ;TableRelation="Hour Line Template".Code WHERE (Source=CONST(Site Mngmnt. Hours),
                                                                                                  Receiving Company=FIELD(Receiving Company));
                                                   OnValidate=VAR
                                                                Employee@1100528300 : Record 5200;
                                                                HourLineTemplate@1100528301 : Record 11229799;
                                                              BEGIN
                                                                IF (NOT HourLineTemplate.GET(HourLineTemplate.Source::"Site Mngmnt. Hours", "Receiving Company", "Line Template Code")) THEN
                                                                  HourLineTemplate.Type := Type;
                                                                Type := HourLineTemplate.Type;
                                                                CheckCurrentOrGetFirstValidLineTemplateCode;
                                                                Employee.CHANGECOMPANY("Supplying Company");
                                                                IF (NOT Employee.GET("Employee No.")) THEN
                                                                  Employee.INIT;
                                                                SetDefaultDriverType(Employee."Driver Type");
                                                                CALCFIELDS("Line Template Description");
                                                              END;

                                                   OnLookup=VAR
                                                              HourLineTemplate@1100528300 : TEMPORARY Record 11229799;
                                                              HourLineTemplateMgt@1100528302 : Codeunit 11012025;
                                                            BEGIN
                                                              TESTFIELD("Receiving Company");
                                                              TESTFIELD("Employee No.");

                                                              HourLineTemplateMgt.FillTempHourLineTemplate(HourLineTemplate, 1, "Employee No.",
                                                                "Supplying Company", "Receiving Company");
                                                              HourLineTemplate.SETRANGE(Source);
                                                              HourLineTemplate.SETRANGE("Receiving Company");
                                                              HourLineTemplate.SETRANGE(Type, Type);
                                                              HourLineTemplate.SETCURRENTKEY(Source, "Receiving Company", "Seq. No.", Code);
                                                              IF (PAGE.RUNMODAL(0, HourLineTemplate) = ACTION::LookupOK) THEN
                                                                VALIDATE("Line Template Code", HourLineTemplate.Code);
                                                            END;

                                                   CaptionML=[ENU=Line Template Code;
                                                              SVE=Mallrad kod];
                                                   Description=DP00530 }
    { 841 ;   ;Line Template Description;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Hour Line Template".Description WHERE (Source=CONST(Site Mngmnt. Hours),
                                                                                                              Receiving Company=FIELD(Receiving Company),
                                                                                                              Code=FIELD(Line Template Code)));
                                                   OnValidate=VAR
                                                                HourLineTemplateMgt@1100528300 : Codeunit 11012025;
                                                              BEGIN
                                                                IF ("Receiving Company" <> '') AND ("Employee No." <> '') THEN
                                                                  HourLineTemplateMgt.GetDefaultsSiteMgtLine(Rec);
                                                              END;

                                                   OnLookup=VAR
                                                              HourLineTemplate@1100528300 : TEMPORARY Record 11229799;
                                                              HourLineTemplateMgt@1100528302 : Codeunit 11012025;
                                                            BEGIN
                                                              TESTFIELD("Receiving Company");
                                                              TESTFIELD("Employee No.");

                                                              HourLineTemplateMgt.FillTempHourLineTemplate(HourLineTemplate, 1, "Employee No.",
                                                                "Supplying Company", "Receiving Company");
                                                              HourLineTemplate.SETRANGE(Source);
                                                              HourLineTemplate.SETRANGE("Receiving Company");
                                                              HourLineTemplate.SETRANGE(Type, Type);
                                                              HourLineTemplate.SETCURRENTKEY(Source, "Receiving Company", "Seq. No.", Code);
                                                              IF (PAGE.RUNMODAL(0, HourLineTemplate) = ACTION::LookupOK) THEN
                                                                VALIDATE("Line Template Code", HourLineTemplate.Code);
                                                            END;

                                                   CaptionML=ENU=Line Template Description;
                                                   Editable=No }
    { 850 ;   ;Hour Portal Link Guid;Text50       ;CaptionML=[ENU=Hour Portal Link Guid;
                                                              SVE=Tidportal lÑnknings GUID];
                                                   Description=DP00530;
                                                   Editable=Yes }
    { 860 ;   ;Start Time          ;Time          ;CaptionML=[ENU=Start Time;
                                                              NOR=Starttid;
                                                              SVE=Starttid];
                                                   Description=DP00530;
                                                   Editable=No }
    { 870 ;   ;End Time            ;Time          ;CaptionML=[ENU=End Time;
                                                              NOR=Sluttid;
                                                              SVE=Sluttid];
                                                   Description=DP00530;
                                                   Editable=No }
    { 880 ;   ;OLDReject Text      ;Text250       ;CaptionML=[ENU=Reject Text;
                                                              SVE=Avvisadetext];
                                                   Description=DP00530;
                                                   Editable=No }
    { 900 ;   ;Start Kilometer     ;Integer       ;CaptionML=[ENU=Start kilometer;
                                                              SVE=MÑtarstÑllning, start] }
    { 910 ;   ;End Kilometer       ;Integer       ;CaptionML=[ENU=End Kilometer;
                                                              SVE=MÑtarstÑllning, slut] }
    { 920 ;   ;Imported from Work Order;Boolean   ;CaptionML=ENU=Imported from Work Order }
    { 930 ;   ;Address             ;Text160       ;CaptionML=[ENU=Address;
                                                              NOR=Adresse;
                                                              SVE=Adress];
                                                   Editable=No }
    { 940 ;   ;Related Hour Line Template;Boolean ;CaptionML=ENU=Related Hour Line Template;
                                                   Editable=No }
    { 950 ;   ;Day                 ;Option        ;OnValidate=BEGIN
                                                                IF Day <> xRec.Day THEN BEGIN
                                                                  CASE xRec.Day OF
                                                                    xRec.Day::Monday:Monday := 0;
                                                                    xRec.Day::Tuesday:Tuesday := 0;
                                                                    xRec.Day::Wednesday:Wednesday := 0;
                                                                    xRec.Day::Thursday:Thursday := 0;
                                                                    xRec.Day::Friday:Friday := 0;
                                                                    xRec.Day::Saturday:Saturday := 0;
                                                                    xRec.Day::Sunday:Sunday := 0;
                                                                  END;
                                                                  "Total Line"  := 0;
                                                                  VALIDATE(Duration);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Day;
                                                              NOR=Dag;
                                                              SVE=Dag];
                                                   OptionCaptionML=[ENU=" ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday";
                                                                    NOR=" ,Mandag,Tirsdag,Onsdag,Torsdag,Fredag,Lõrdag,Sõndag";
                                                                    SVE=" ,MÜndag,Tisdag,Onsdag,Torsdag,Fredag,Lîrdag,Sîndag"];
                                                   OptionString=[ ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday] }
    { 960 ;   ;Time From           ;Time          ;OnValidate=BEGIN
                                                                FromTimeToDuration;
                                                                IF ("Time From" <> 0T) AND ("Time Until" = 0T) AND (Duration <> 0) THEN
                                                                  "Time Until" := "Time From" + ABS(Duration);
                                                              END;

                                                   CaptionML=[ENU=Time From;
                                                              NOR=Tid fra;
                                                              SVE=Tid frÜn] }
    { 970 ;   ;Time Until          ;Time          ;OnValidate=BEGIN
                                                                FromTimeToDuration;
                                                                IF ("Time From" = 0T) AND ("Time Until" <> 0T) AND (Duration <> 0) THEN
                                                                  "Time From" := "Time Until" - ABS(Duration);
                                                              END;

                                                   CaptionML=[ENU=Time Until;
                                                              NOR=Tid til;
                                                              SVE=Tid tills] }
    { 980 ;   ;Duration            ;Duration      ;OnValidate=BEGIN
                                                                IF NOT (
                                                                   ((CurrFieldNo = FIELDNO("Time From")) OR (CurrFieldNo = FIELDNO("Time Until"))) AND
                                                                   ("Time From" <> 0T) AND ("Time Until" <> 0T)
                                                                  )
                                                                THEN BEGIN
                                                                  IF Duration < 0 THEN BEGIN
                                                                    IF "Time Until" <> 0T THEN
                                                                      "Time From" := "Time Until" - ABS(Duration)
                                                                    ELSE
                                                                      "Time From" := 0T;
                                                                  END ELSE BEGIN
                                                                    IF "Time From" <> 0T THEN
                                                                      "Time Until" := "Time From" + ABS(Duration)
                                                                    ELSE
                                                                      "Time Until" := 0T;
                                                                  END;
                                                                END;


                                                                CASE Day OF
                                                                  Day::" ": ERROR(Text014);
                                                                  Day::Monday: Monday := FromDurationToHours(Duration);
                                                                  Day::Tuesday: Tuesday := FromDurationToHours(Duration);
                                                                  Day::Wednesday: Wednesday := FromDurationToHours(Duration);
                                                                  Day::Thursday: Thursday := FromDurationToHours(Duration);
                                                                  Day::Friday: Friday := FromDurationToHours(Duration);
                                                                  Day::Saturday: Saturday := FromDurationToHours(Duration);
                                                                  Day::Sunday: Sunday := FromDurationToHours(Duration);
                                                                END;

                                                                CalculateTotalLine;

                                                                IF "Total Line" <> FromDurationToHours(Duration) THEN
                                                                  ERROR(Text013);
                                                              END;

                                                   CaptionML=[ENU=Duration;
                                                              NOR=Varighet;
                                                              SVE=Duration] }
    { 990 ;   ;Vehicle             ;Code10        ;TableRelation="Site Mngmnt. Vehicle";
                                                   CaptionML=[ENU=Vehicle;
                                                              SVE=Leasingavtal fîr fordon] }
    { 1000;   ;Origin Company      ;Text30        ;TableRelation=Company;
                                                   CaptionML=[ENU=Origin Company;
                                                              NOR=Opprinnelig selskap;
                                                              SVE=Ursprungligt fîretag];
                                                   Editable=No }
    { 1300;   ;Address From        ;Text100       ;CaptionML=[ENU=Address From;
                                                              SVE=FrÜn adress];
                                                   Description=DP01903 }
    { 1301;   ;Address To          ;Text100       ;CaptionML=[ENU=Address To;
                                                              SVE=Till adress];
                                                   Description=DP01903 }
    { 1310;   ;Post Code From      ;Code20        ;TableRelation=IF (Country/Region Code From=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code From=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code From));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode("City From", "Post Code From", CountyCode, "Country/Region Code From", (CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code From;
                                                              SVE=FrÜn postkod];
                                                   Description=DP01903 }
    { 1311;   ;Post Code To        ;Code20        ;TableRelation=IF (Country/Region Code To=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code To=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code To));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode("City To", "Post Code To", CountyCode, "Country/Region Code To", (CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code To;
                                                              SVE=Till postkod];
                                                   Description=DP01903 }
    { 1320;   ;City From           ;Text30        ;OnValidate=BEGIN
                                                                PostCode.ValidateCity("City From", "Post Code From", CountyCode, "Country/Region Code From", (CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   CaptionML=[ENU=City From;
                                                              SVE=FrÜn ort];
                                                   Description=DP01903 }
    { 1321;   ;City To             ;Text30        ;OnValidate=BEGIN
                                                                PostCode.ValidateCity("City To", "Post Code To", CountyCode, "Country/Region Code To", (CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   CaptionML=[ENU=City To;
                                                              SVE=Till ort];
                                                   Description=DP01903 }
    { 1330;   ;Country/Region Code From;Code10    ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code From;
                                                              SVE=FrÜn landkod];
                                                   Description=DP01903 }
    { 1331;   ;Country/Region Code To;Code10      ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code To;
                                                              SVE=Till landkod];
                                                   Description=DP01903 }
    { 1340;   ;Departure Date      ;Date          ;OnValidate=BEGIN
                                                                IF ("Departure Date" <> 0D) AND ("Arrival Date" <> 0D) AND ("Departure Date" > "Arrival Date") THEN
                                                                  FIELDERROR("Departure Date");
                                                              END;

                                                   CaptionML=[ENU=Departure Date;
                                                              SVE=Avresa datum];
                                                   Description=DP01903 }
    { 1341;   ;Departure Time      ;Time          ;CaptionML=[ENU=Departure Time;
                                                              SVE=Avresa tid];
                                                   Description=DP01903 }
    { 1350;   ;Arrival Date        ;Date          ;OnValidate=BEGIN
                                                                IF ("Departure Date" <> 0D) AND ("Arrival Date" <> 0D) AND ("Departure Date" > "Arrival Date") THEN
                                                                  FIELDERROR("Arrival Date");
                                                              END;

                                                   CaptionML=[ENU=Arrival Date;
                                                              NOR=Ankomstdato;
                                                              SVE=Ankomstdatum];
                                                   Description=DP01903 }
    { 1351;   ;Arrival Time        ;Time          ;CaptionML=[ENU=Arrival Time;
                                                              SVE=Hemkomst tid];
                                                   Description=DP01903 }
    { 1360;   ;Resource Request No.;Code20        ;TableRelation=IF (Resource Req. Receiv. Company=FILTER('')) "Resource Request";
                                                   OnValidate=VAR
                                                                ResourceRequest@1100527301 : Record 11124901;
                                                                PlantLocation@1100527300 : Record 11012554;
                                                              BEGIN
                                                                IF "Resource Request No." <> '' THEN BEGIN
                                                                  IF Type = Type::Indirect THEN
                                                                    TESTFIELD("Resource Request No.", '');
                                                                  ResourceRequest.CHANGECOMPANY("Resource Req. Receiv. Company");
                                                                  ResourceRequest.GET("Resource Request No.");
                                                                  CASE Type OF
                                                                    Type::Project:
                                                                      BEGIN
                                                                        TESTFIELD("Object No.");
                                                                        ResourceRequest.TESTFIELD("Source Type", ResourceRequest."Source Type"::Project);
                                                                        ResourceRequest.CheckResRequestReceivCompany("Receiving Company", CURRENTCOMPANY);
                                                                        ResourceRequest.TESTFIELD("Source No.", "Object No.");
                                                                      END;
                                                                    Type::Service:
                                                                      BEGIN
                                                                        TESTFIELD("Object No.");
                                                                        ResourceRequest.TESTFIELD("Source Type", ResourceRequest."Source Type"::ServiceOrder);
                                                                        ResourceRequest.CheckResRequestReceivCompany("Receiving Company", CURRENTCOMPANY);
                                                                        ResourceRequest.TESTFIELD("Source No.", "Object No.");
                                                                      END;
                                                                    Type::Plant:
                                                                      BEGIN
                                                                        IF "Plant Location" <> '' THEN BEGIN
                                                                          IF NOT (ResourceRequest."Source Type" IN [ResourceRequest."Source Type"::Project, ResourceRequest."Source Type"::ServiceOrder]) THEN
                                                                            ResourceRequest.FIELDERROR("Source Type");
                                                                          PlantLocation.CHANGECOMPANY("Receiving Company");
                                                                          PlantLocation.GET("Plant Location");
                                                                          ResourceRequest.CheckResRequestReceivCompany(PlantLocation."Company Name", "Receiving Company");
                                                                          CASE ResourceRequest."Source Type" OF
                                                                            ResourceRequest."Source Type"::Project:
                                                                              ResourceRequest.TESTFIELD("Source No.", PlantLocation."Project No.");
                                                                            ResourceRequest."Source Type"::ServiceOrder:
                                                                              ResourceRequest.TESTFIELD("Source No.", PlantLocation."Service Order No.");
                                                                          END;
                                                                        END;
                                                                      END;
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ResourceRequest@1100527301 : Record 11124901;
                                                              PlantLocation@1100527300 : Record 11012554;
                                                            BEGIN
                                                              IF Type = Type::Indirect THEN
                                                                EXIT;
                                                              ResourceRequest.CHANGECOMPANY("Resource Req. Receiv. Company");
                                                              ResourceRequest.SETCURRENTKEY("Source Type", "Source No.");
                                                              CASE Type OF
                                                                Type::Project:
                                                                  BEGIN
                                                                    ResourceRequest.SETRANGE("Source Type", ResourceRequest."Source Type"::Project);
                                                                    ResourceRequest.SETRANGE("Source No.", "Object No.");
                                                                    ResourceRequest.SetFilterOnReceivingCompany("Receiving Company", CURRENTCOMPANY);
                                                                  END;
                                                                Type::Service:
                                                                  BEGIN
                                                                    ResourceRequest.SETRANGE("Source Type", ResourceRequest."Source Type"::ServiceOrder);
                                                                    ResourceRequest.SETRANGE("Source No.", "Object No.");
                                                                    ResourceRequest.SetFilterOnReceivingCompany("Receiving Company", CURRENTCOMPANY);
                                                                  END;
                                                                Type::Plant:
                                                                  BEGIN
                                                                    IF "Plant Location" <> '' THEN BEGIN
                                                                      PlantLocation.CHANGECOMPANY("Receiving Company");
                                                                      PlantLocation.GET("Plant Location");
                                                                      IF (PlantLocation."Project No." = '') AND (PlantLocation."Service Order No." = '') THEN
                                                                        EXIT;
                                                                      ResourceRequest.SetFilterOnReceivingCompany(PlantLocation."Company Name", "Receiving Company");
                                                                      IF PlantLocation."Project No." <> '' THEN BEGIN
                                                                        ResourceRequest.SETRANGE("Source Type", ResourceRequest."Source Type"::Project);
                                                                        ResourceRequest.SETRANGE("Source No.", PlantLocation."Project No.");
                                                                      END ELSE BEGIN
                                                                        ResourceRequest.SETRANGE("Source Type", ResourceRequest."Source Type"::ServiceOrder);
                                                                        ResourceRequest.SETRANGE("Source No.", PlantLocation."Service Order No.");
                                                                      END;
                                                                    END;
                                                                  END;
                                                              END;
                                                              ResourceRequest."No." := "Resource Request No.";
                                                              IF PAGE.RUNMODAL(0, ResourceRequest) = ACTION::LookupOK THEN BEGIN
                                                                IF ResourceRequest."No." <> "Resource Request No." THEN
                                                                  VALIDATE("Resource Request No.", ResourceRequest."No.");
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Resource Request No.;
                                                              SVE=ResursbegÑran nr] }
    { 1370;   ;Resource Req. Receiv. Company;Text30;
                                                   TableRelation=Company;
                                                   OnValidate=BEGIN
                                                                IF xRec."Resource Req. Receiv. Company" <> "Resource Req. Receiv. Company" THEN
                                                                 "Resource Request No." := '';
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Resource Request Receiving Company }
    { 1380;   ;Try-out No.         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) Try-out;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen();
                                                                IF "Try-out No." = '' THEN
                                                                  EXIT;
                                                                TryOut.CHANGECOMPANY("Receiving Company");
                                                                TryOut.GET("Try-out No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              TryOut.CHANGECOMPANY("Receiving Company");
                                                              TryOut.SETRANGE("Try-Out Not Active", FALSE);
                                                              TryOut.Code := "Try-out No.";
                                                              IF PAGE.RUNMODAL(0, TryOut) = ACTION::LookupOK THEN
                                                                VALIDATE("Try-out No.", TryOut.Code);
                                                            END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Try-out No.;
                                                              SVE=Anbudsnr] }
    { 1390;   ;Estimate No.        ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) Estimate.No.;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen();
                                                                IF "Estimate No." <> '' THEN BEGIN
                                                                  Estimate.CHANGECOMPANY("Receiving Company");
                                                                  Estimate.GET("Estimate No.");
                                                                END;
                                                                "Try-out No." := DetermineTryOut;
                                                              END;

                                                   OnLookup=BEGIN
                                                              Estimate.CHANGECOMPANY("Receiving Company");
                                                              Estimate."No." := "Estimate No.";
                                                              IF PAGE.RUNMODAL(0, Estimate) = ACTION::LookupOK THEN
                                                                VALIDATE("Estimate No.", Estimate."No.");
                                                            END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Estimate No.;
                                                              SVE=Kalkylnr] }
    { 11128190;;Total Monday       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Site Mngmnt. Hours Line".Monday WHERE (Year=FIELD(Year),
                                                                                                           Week=FIELD(Week),
                                                                                                           Employee No.=FIELD(Employee No.),
                                                                                                           Wage Component=FILTER(<>''),
                                                                                                           Cost Component=FILTER(<>''),
                                                                                                           Overtime=CONST(No)));
                                                   CaptionML=[ENU=Total Monday;
                                                              NOR=Totalt mandag;
                                                              SVE=Totalt mÜndag];
                                                   Description=#15536;
                                                   Editable=No }
    { 11128200;;Total Tuesday      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Site Mngmnt. Hours Line".Tuesday WHERE (Year=FIELD(Year),
                                                                                                            Week=FIELD(Week),
                                                                                                            Employee No.=FIELD(Employee No.),
                                                                                                            Wage Component=FILTER(<>''),
                                                                                                            Cost Component=FILTER(<>''),
                                                                                                            Overtime=CONST(No)));
                                                   CaptionML=[ENU=Total Tuesday;
                                                              NOR=Totalt tirsdag;
                                                              SVE=Totalt tisdag];
                                                   Description=#15536;
                                                   Editable=No }
    { 11128210;;Total Wednesday    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Site Mngmnt. Hours Line".Wednesday WHERE (Year=FIELD(Year),
                                                                                                              Week=FIELD(Week),
                                                                                                              Employee No.=FIELD(Employee No.),
                                                                                                              Wage Component=FILTER(<>''),
                                                                                                              Cost Component=FILTER(<>''),
                                                                                                              Overtime=CONST(No)));
                                                   CaptionML=[ENU=Total Wednesday;
                                                              NOR=Totalt onsdag;
                                                              SVE=Totalt onsdag];
                                                   Description=#15536;
                                                   Editable=No }
    { 11128220;;Total Thursday     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Site Mngmnt. Hours Line".Thursday WHERE (Year=FIELD(Year),
                                                                                                             Week=FIELD(Week),
                                                                                                             Employee No.=FIELD(Employee No.),
                                                                                                             Wage Component=FILTER(<>''),
                                                                                                             Cost Component=FILTER(<>''),
                                                                                                             Overtime=CONST(No)));
                                                   CaptionML=[ENU=Total Thursday;
                                                              NOR=Totalt torsdag;
                                                              SVE=Totalt torsdag];
                                                   Description=#15536;
                                                   Editable=No }
    { 11128230;;Total Friday       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Site Mngmnt. Hours Line".Friday WHERE (Year=FIELD(Year),
                                                                                                           Week=FIELD(Week),
                                                                                                           Employee No.=FIELD(Employee No.),
                                                                                                           Wage Component=FILTER(<>''),
                                                                                                           Cost Component=FILTER(<>''),
                                                                                                           Overtime=CONST(No)));
                                                   CaptionML=[ENU=Total Friday;
                                                              NOR=Totalt fredag;
                                                              SVE=Totalt fredag];
                                                   Description=#15536;
                                                   Editable=No }
    { 11128240;;Total Saturday     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Site Mngmnt. Hours Line".Saturday WHERE (Year=FIELD(Year),
                                                                                                             Week=FIELD(Week),
                                                                                                             Employee No.=FIELD(Employee No.),
                                                                                                             Wage Component=FILTER(<>''),
                                                                                                             Cost Component=FILTER(<>''),
                                                                                                             Overtime=CONST(No)));
                                                   CaptionML=[ENU=Total Saturday;
                                                              NOR=Totalt lõrdag;
                                                              SVE=Totalt lîrdag];
                                                   Description=#15536;
                                                   Editable=No }
    { 11128250;;Total Sunday       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Site Mngmnt. Hours Line".Sunday WHERE (Year=FIELD(Year),
                                                                                                           Week=FIELD(Week),
                                                                                                           Employee No.=FIELD(Employee No.),
                                                                                                           Wage Component=FILTER(<>''),
                                                                                                           Cost Component=FILTER(<>''),
                                                                                                           Overtime=CONST(No)));
                                                   CaptionML=[ENU=Total Sunday;
                                                              NOR=Totalt sõndag;
                                                              SVE=Totalt sîndag];
                                                   Description=#15536;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Year,Week,Supplying Company,Employee No.,Line No.;
                                                   SumIndexFields=Total Line;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Connection No.                           }
    {    ;Year,Week,Supplying Company,Employee No.,Component Type,Overtime;
                                                   SumIndexFields=Total Line,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday }
    {    ;Year,Week,Employee No.,Object No.        }
    {    ;Type,Object No.,Receiving Company,Status }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HourAccRec@1100485000 : Record 11012360;
      EmployeeRec@1100485003 : Record 5200;
      HoursLineRec@1100485007 : Record 11012361;
      SiteMngmntHoursSetup@1100485014 : Record 11012355;
      SitemngmntEmployees@1100485015 : Record 11012357;
      DimensionValueRec@1100485017 : Record 349;
      ProjectCostObjectRec@1100525007 : Record 11012065;
      ExtRec@1100525005 : Record 11012004;
      HourPortalSetup@1100528300 : Record 11020454;
      PostCode@1100528303 : Record 225;
      ElementFormat@1100525002 : Codeunit 11012022;
      DimMgt@1100409000 : Codeunit 408;
      UpdateAction@1100525006 : 'Insert,Modify,Delete,Rename';
      SkipDefaultTemplateCode@1100529000 : Boolean;
      gSetProjHrsValidateMode@1100525001 : Boolean;
      gProjHrsLineNo@1100525004 : Integer;
      LineNo@1100485005 : Integer;
      Text000@1100528301 : TextConst 'ENU=Fill 1 Day per Line.\\This is because %1 is set to %2.;SVE=Fyll i en dag per rad.\Det beror pÜ att %1 Ñr satt till %2.';
      Text001@1100525010 : TextConst 'ENU=%1 must be ''%2''.\(Current Value: ''%3'')';
      Text004@1100525003 : TextConst 'ENU=''%1'' is not linked to project ''%2'', company ''%3'';NOR=''%1'' er ikke linket til prosjekt ''%2'', selskap ''%3''';
      Text005@1100525009 : TextConst 'ENU="''%1'' is not setup as %2. ";NOR=%1'' er ikke satt opp som %2.;SVE="''%1'' har inte stÑllts in som %2. "';
      Text006@1100525008 : TextConst 'ENU=There is no plant location of project ''%1'' present in %2 ''%3''.;NOR=Det finnes ingen maskinlokasjon for prosjekt ''%1'' i %2 ''%3''.;SVE=Det finns ingen Maskinsplats fîr projektet ''%1'' i %2 ''%3''.';
      Text007@1210190000 : TextConst 'ENU=in combination with %1 %2 may not be of Cost Type %3;NOR=i kombinasjon med %1 kan %2 ikke vëre Kostnadstype %3;SVE=i kombination med %1 kan %2 inte vara kostnadstyp %3';
      Text008@1210190001 : TextConst 'ENU=may not be of Cost Type %1;NOR=kan ikke vëre kostnadstypen %1;SVE=fÜr inte vara kostnadstypen %1';
      Text009@1210190002 : TextConst 'ENU=Posting Date should be within the week (%1..%2).;NOR=Bokfõringsdatoen mÜ vëre innenfor uken (%1..%2);SVE=Bokfîringsdatumet ska vara inom veckan (%1..%2).';
      Text010@1210190003 : TextConst 'ENU=Cost Object %1 unknown.;NOR=Kostnadsobjekt ukjent';
      Text011@1100525011 : TextConst 'ENU=Change not allowed for %1';
      Text012@1100525012 : TextConst 'ENU="%1 %2 must be ''%3'' or ''%4''. Current Value:''%5''.\ In Year=%6, Week=%7, Supplying Company=%8, Employee No.=%9, Line No.=%10."';
      SiteMngmntHoursCompanies@1100529400 : Record 11012356;
      Text013@1100528201 : TextConst 'ENU=Line is not recorded on time, hour accounting via time not possible.;NOR=Raden er ikke innspilt i tid, timerapportering via Tid er ikke mulig.;SVE=Raden Ñr inte inspelad i tid, tidrapportering via tid Ñr inte mîjlig.';
      Text014@1100528200 : TextConst 'ENU=Give day first.;NOR=Angi dag fõrst.;SVE=Ange dag fîrst.';
      ObjectNoType@1100529700 : ' ,Project,Service';
      PhoneNo@1100528304 : Text;
      FaxNo@1100528305 : Text;
      CountyCode@1100528306 : Text;
      Address2@1100528307 : Text[30];
      Text015@1100527901 : TextConst 'ENU=Amount of leave hours %1, must be less than/equal to %2 for the %3.';
      Text016@1100527702 : TextConst 'ENU=Element %1 has been blocked outside the period of %2 until %3';
      Text017@1100527701 : TextConst 'ENU=Element %1 does not match the period from %2';
      Text018@1100527700 : TextConst 'ENU=Element %1 does not match the period until %2';
      Text019@1100527350 : TextConst 'ENU=Description;SVE=Beskrivning';
      TryOut@1100527351 : Record 11012750;
      Estimate@1100527352 : Record 11012151;
      Text11128000@1101285000 : TextConst 'ENU=Number of hours (%1) is not equal to norm hours (%2).;NOR=Antall timer (%1) stemmer ikke i forhold til normert tid (%2).;SVE=Antal timmar (%1) Ñr inte lika med normtiden (%2).';
      Text11128008@1101285001 : TextConst 'ENU=Number of hours (%1) is not equal to norm hours (%2).\%3 %4, date %5.;NOR=Antall timer (%1) stemmer ikke i forhold til normert tid (%2).\%3 %4, dato %5';
      Text11128025@1101285002 : TextConst 'ENU=Number of hours (%1) different from norm hours (%2);NOR=Antall timer (%1) skiller seg fra normtimer (%2);SVE=Antal timmar (%1) skiljer sig frÜn normtimmar (%2)';

    PROCEDURE AddRelatedTemplateLines@1100529900() AddedLineNos : Text;
    VAR
      HourLineTemplate@1100529902 : Record 11229799;
      SiteMngmntHoursLine@1100529901 : Record 11012361;
      HourLineTemplateManagement@1100529900 : Codeunit 11012025;
    BEGIN
      IF ("Line Template Code" = '') OR ("Related Hour Line Template") THEN
        EXIT;
      IF ("Receiving Company" = '') THEN
        "Receiving Company" := COMPANYNAME;
      HourLineTemplate.GET(HourLineTemplate.Source::"Site Mngmnt. Hours", "Receiving Company", "Line Template Code");
      IF (HourLineTemplate."Relate Code" = '') THEN
        EXIT;

      HourLineTemplate.SETCURRENTKEY(Source, "Receiving Company", "Seq. No.", Code);
      HourLineTemplate.SETRANGE(Source, HourLineTemplate.Source::"Site Mngmnt. Hours");
      HourLineTemplate.SETRANGE("Receiving Company", "Receiving Company");
      HourLineTemplate.SETFILTER(Code, '<>%1', "Line Template Code");
      HourLineTemplate.SETRANGE("Relate Code", HourLineTemplate."Relate Code");
      IF (NOT HourLineTemplate.FINDSET) THEN
        EXIT;

      AddedLineNos := '';
      REPEAT
        IF (HourLineTemplateManagement.IsEmployeeInCAOFilter("Supplying Company", "Employee No.",  HourLineTemplate."CAO Filter"))
        THEN BEGIN
          SiteMngmntHoursLine.Year := Year;
          SiteMngmntHoursLine.Week := Week;
          SiteMngmntHoursLine."Supplying Company" := "Supplying Company";
          SiteMngmntHoursLine."Employee No." := "Employee No.";
          SiteMngmntHoursLine."Line No." := GetFirstFreeLineNo;
          SiteMngmntHoursLine."Receiving Company" := "Receiving Company";
          SiteMngmntHoursLine."Line Template Code" := HourLineTemplate.Code;
          HourLineTemplateManagement.GetDefaultsSiteMgtLine(SiteMngmntHoursLine);
          IF (Type = SiteMngmntHoursLine.Type) THEN BEGIN
            IF (SiteMngmntHoursLine."Object No." = '') THEN
              SiteMngmntHoursLine."Object No." := "Object No.";
            IF SiteMngmntHoursLine."Department Code" = '' THEN
              SiteMngmntHoursLine.FillDepartmentCode;
            IF (SiteMngmntHoursLine."Object Name" = '') THEN
              SiteMngmntHoursLine."Object Name" := "Object Name";
            IF (SiteMngmntHoursLine."Extension Contract" = '') THEN
              SiteMngmntHoursLine."Extension Contract" := "Extension Contract";
            IF (SiteMngmntHoursLine.Element = '') THEN
              SiteMngmntHoursLine.Element := Element;
            IF (SiteMngmntHoursLine."Plant Company" = '') THEN  BEGIN
              SiteMngmntHoursLine."Plant Company" := "Plant Company";
              SiteMngmntHoursLine."Plant Location" := "Plant Location";
              SiteMngmntHoursLine."Plant Type" := "Plant Type";
              SiteMngmntHoursLine."Plant No." := "Plant No.";
              SiteMngmntHoursLine."Cost Component Plant" := "Cost Component Plant";
              SiteMngmntHoursLine."Plant Hour Rev. Line No." := "Plant Hour Rev. Line No.";
            END;
          END;
          SiteMngmntHoursLine."Related Hour Line Template" := TRUE;
          SiteMngmntHoursLine.INSERT(TRUE);
          IF (AddedLineNos = '') THEN
            AddedLineNos := FORMAT(SiteMngmntHoursLine."Line No.")
          ELSE
            AddedLineNos += STRSUBSTNO(';%1', SiteMngmntHoursLine."Line No.");
        END;
      UNTIL (HourLineTemplate.NEXT = 0);
    END;

    LOCAL PROCEDURE GetEmployeeRec@1100528309();
    BEGIN
      EmployeeRec.CHANGECOMPANY("Supplying Company");
      EmployeeRec.GET("Employee No.");
      EmployeeRec.TESTFIELD(CAO);
    END;

    PROCEDURE FillDocNoPostingDate@3();
    BEGIN
      IF CURRENTCOMPANY <> COMPANYNAME THEN
        HourAccRec.CHANGECOMPANY(CURRENTCOMPANY);
      IF HourAccRec.GET(Year, Week, "Supplying Company", "Employee No.") THEN
        "Document No." := HourAccRec."Document No.";
    END;

    PROCEDURE TotalQuantities@1100528308();
    BEGIN
      Quantity := "Monday Quantity" + "Tuesday Quantity" + "Wednesday Quantity" + "Thursday Quantity" + "Friday Quantity" +
        "Saturday Quantity" + "Sunday Quantity";
    END;

    PROCEDURE TotalAmounts@1100528310();
    BEGIN
      Amount := "Monday Amount" + "Tuesday Amount" + "Wednesday Amount" + "Thursday Amount" + "Friday Amount" +
        "Saturday Amount" + "Sunday Amount";
    END;

    PROCEDURE CalculateTotalLine@1100485010();
    VAR
      FilledFields@1100528300 : Integer;
    BEGIN
      IF (NOT HourPortalSetup.GET) THEN
        HourPortalSetup.INIT;
      IF (NOT SiteMngmntHoursCompanies.GET("Supplying Company")) THEN
        SiteMngmntHoursCompanies.INIT;
      IF (HourPortalSetup."Hour Portal Active") AND (NOT SiteMngmntHoursCompanies."Hour Portal Not Used") THEN BEGIN
        FilledFields := 0;
        IF (Monday <> 0) THEN FilledFields += 1;
        IF (Tuesday <> 0) THEN FilledFields += 1;
        IF (Wednesday <> 0) THEN FilledFields += 1;
        IF (Thursday <> 0) THEN FilledFields += 1;
        IF (Friday <> 0) THEN FilledFields += 1;
        IF (Saturday <> 0) THEN FilledFields += 1;
        IF (Sunday <> 0) THEN FilledFields += 1;
        IF (FilledFields > 1) THEN
          ERROR(Text000, HourPortalSetup.FIELDCAPTION("Hour Portal Active"), HourPortalSetup."Hour Portal Active");
      END;

      IF ("Component Type" = "Component Type"::Hours) OR ("Component Type" = "Component Type"::Expenses) THEN
        "Total Line" := Monday + Tuesday + Wednesday + Thursday + Friday + Saturday + Sunday;
      IF "Component Type" = "Component Type"::Kilometers THEN
        "Total Line" := ROUND(Monday,1) + ROUND(Tuesday,1) + ROUND(Wednesday,1) + ROUND(Thursday,1)
                        + ROUND(Friday,1) + ROUND(Saturday,1) + ROUND(Sunday,1);
    END;

    PROCEDURE UpdateProjectHourLine@1100485009(UpdateAction@1210190001 : 'Insert,Modify,Delete,Rename');
    VAR
      HrAccConnectionNos@1100525000 : Record 11020451;
      HourEmplHead@1100525001 : Record 11012360;
      HourProjHead@1100525002 : Record 11012362;
      HourProjLine@1210190002 : Record 11012363;
      LineNo@1100525003 : Integer;
      ProjNo@1100525004 : Code[20];
    BEGIN
      IF (Type = Type::Service) THEN
        EXIT;

      IF (SiteMngmntHoursSetup."Synchronize Proj. and Empl.") AND NOT (UpdateAction = UpdateAction::Delete) THEN
        EXIT;

      CASE UpdateAction OF
        UpdateAction::Insert:
          BEGIN
            IF (Type = Type::Indirect) OR ("Object No." = '') THEN BEGIN  //* Indirect (project independant) or project is empty
              "Connection No." := 0;
              EXIT;
            END;
            HourEmplHead.GET(Year, Week, "Supplying Company", "Employee No.");

            //Create Hour Project Header if necessary
            IF NOT HourProjHead.GET(Year, Week, "Receiving Company", "Object No.") THEN BEGIN
              HourProjHead.TRANSFERFIELDS(HourEmplHead);
              HourProjHead."Receiving Company" := "Receiving Company";
              HourProjHead."Project No." := "Object No.";
              HourProjHead.INSERT;
              SiteMngmntHoursSetup.GET;
              IF SiteMngmntHoursSetup."Sel. Empl./Codes by Proj./Wk" THEN
                HourProjHead.CopySelectedForProjOfPrevWeek(Year, Week, "Receiving Company", HourProjHead."Project No.", TRUE);
            END;

            //Determine Connection No
            "Connection No." := HrAccConnectionNos.GetConnectionNo();

            //Create Hour Project Line
            GetCostObjectDescription;
            HourProjLine.RESET;
            HourProjLine.SETRANGE(Year, Year);
            HourProjLine.SETRANGE(Week, Week);
            HourProjLine.SETRANGE("Receiving Company","Receiving Company");
            HourProjLine.SETRANGE("Project No.", "Object No.");
            IF HourProjLine.FINDLAST THEN
              LineNo := HourProjLine."Line No." + 10000
            ELSE
              LineNo := 10000;

            CLEAR(HourProjLine);
            HourProjLine.TRANSFERFIELDS(Rec);
            HourProjLine."Line No." := LineNo;
            HourProjLine.Type := Type;      //* Not the same fieldno (75/250)
            HourProjLine.Amount := Amount;  //* Not the same fieldno (570/270)
            HourEmplHead.CALCFIELDS("Name Employee");
            HourProjLine."Name Employee" := HourEmplHead."Name Employee";
            HourProjLine.INSERT;
          END;
        UpdateAction::Modify:
          BEGIN
            IF "Connection No." = 0 THEN
              UpdateProjectHourLine(UpdateAction::Insert)
            ELSE BEGIN
              HourProjLine.RESET;
              HourProjLine.SETCURRENTKEY("Connection No.");
              HourProjLine.SETRANGE("Connection No.", "Connection No.");
              IF NOT HourProjLine.FINDFIRST THEN
                UpdateProjectHourLine(UpdateAction::Insert)
              ELSE BEGIN
                IF Type = Type::Indirect THEN
                  ProjNo := HourProjLine."Project No."
                ELSE
                  ProjNo := "Object No.";
                IF (ProjNo = HourProjLine."Project No.") AND (ProjNo <> '') AND
                   ("Receiving Company" = HourProjLine."Receiving Company")
                THEN BEGIN
                  GetCostObjectDescription;
                  HourProjLine.TRANSFERFIELDS(Rec,FALSE);
                  HourProjLine.Type := Type;      //* Not the same fieldno (75/250)
                  HourProjLine.Amount := Amount;  //* Not the same fieldno (570/270)
                  IF Type = Type::Indirect THEN BEGIN
                    HourProjLine."Cost Code" := "Object No.";
                    HourProjLine."Cost Code Description" := COPYSTR("Object Name",1,MAXSTRLEN(HourProjLine."Cost Code Description"));
                  END ELSE BEGIN
                    HourProjLine."Cost Code" := '';
                    HourProjLine."Cost Code Description" := '';
                  END;
                  HourProjLine.MODIFY;
                END ELSE BEGIN
                  UpdateProjectHourLine(UpdateAction::Delete);
                  UpdateProjectHourLine(UpdateAction::Insert);
                END;
              END;
            END;
          END;
        UpdateAction::Delete:
          BEGIN
            IF "Connection No." <> 0 THEN BEGIN
              HourProjLine.RESET;
              HourProjLine.SETCURRENTKEY("Connection No.");
              HourProjLine.SETRANGE("Connection No.", "Connection No.");
              IF HourProjLine.FINDFIRST THEN BEGIN
                HourProjLine.DELETE;
                HourProjLine.RESET;
                HourProjLine.SETRANGE(Year, HourProjLine.Year);
                HourProjLine.SETRANGE(Week, HourProjLine.Week);
                HourProjLine.SETRANGE("Receiving Company", HourProjLine."Receiving Company");
                HourProjLine.SETRANGE("Project No.", HourProjLine."Project No.");
                IF NOT HourProjLine.FINDFIRST THEN BEGIN
                  IF HourProjHead.GET(
                    HourProjLine.Year, HourProjLine.Week, HourProjLine."Receiving Company", HourProjLine."Project No.")
                  THEN
                    HourProjHead.DELETE;
                END;
              END;
            END;
          END;
        UpdateAction::Rename:
          BEGIN
            UpdateProjectHourLine(UpdateAction::Delete);
            UpdateProjectHourLine(UpdateAction::Insert);
          END;
      END;
    END;

    LOCAL PROCEDURE CreateHourLineForGrade@1100528401(DayInt@1100528402 : Integer;HourLineKilometers@1100528401 : Decimal);
    BEGIN
      SiteMngmntHoursSetup.GET;
      CASE TRUE OF
        SiteMngmntHoursSetup."Kilometers One Way Trip" AND SiteMngmntHoursSetup."Kilometer Grades One Way Trip":
          CheckGrades(DayInt, HourLineKilometers);
        SiteMngmntHoursSetup."Kilometers One Way Trip" AND NOT SiteMngmntHoursSetup."Kilometer Grades One Way Trip":
          CheckGrades(DayInt, HourLineKilometers * 2);
        NOT SiteMngmntHoursSetup."Kilometers One Way Trip" AND SiteMngmntHoursSetup."Kilometer Grades One Way Trip":
          CheckGrades(DayInt, HourLineKilometers / 2);
        NOT SiteMngmntHoursSetup."Kilometers One Way Trip" AND NOT SiteMngmntHoursSetup."Kilometer Grades One Way Trip":
          CheckGrades(DayInt, HourLineKilometers);
      END;
    END;

    PROCEDURE CheckGrades@1100485000(DayInt@1100485001 : Integer;TempDec@1100485002 : Decimal);
    VAR
      LvSiteMngmntKmGrades@1100485000 : Record 11012442;
      LvSiteMngmntKmGradesRec@1100485006 : Record 11012442;
      CUSiteMngMntHours@1100485003 : Codeunit 11012178;
      lHoursDec@1100485004 : Decimal;
      lCostObjectCode@1100485005 : Code[10];
      lvHourLine@1100525000 : Record 11012361;
    BEGIN
      IF Type = Type::UnmannedPlant THEN
        EXIT;

      IF "Component Type" <> "Component Type"::Kilometers THEN
        EXIT;
      CASE DayInt OF
        1: IF "Travel Hours Monday" = "Travel Hours Monday"::"Work to Work" THEN
             EXIT;
        2: IF "Travel Hours Tuesday" = "Travel Hours Tuesday"::"Work to work" THEN
             EXIT;
        3: IF "Travel Hours Wednesday" = "Travel Hours Wednesday"::"Work to Work" THEN
             EXIT;
        4: IF "Travel Hours Thursday" = "Travel Hours Thursday"::"Work to work" THEN
             EXIT;
        5: IF "Travel Hours Friday" = "Travel Hours Friday"::"Work to Work" THEN
             EXIT;
        6: IF "Travel Hours Saturday" = "Travel Hours Saturday"::"Work to Work" THEN
             EXIT;
        7: IF "Travel Hours Sunday" = "Travel Hours Sunday"::"Work to Work" THEN
             EXIT;
      END;

      GetEmployeeRec;

      LvSiteMngmntKmGrades.SETRANGE(CAO,EmployeeRec.CAO);
      LvSiteMngmntKmGrades.SETRANGE("Extra Expense",FALSE);
      LvSiteMngmntKmGrades.SETRANGE(Vehicle,Vehicle);

      CASE DayInt OF
        1: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Monday");
        2: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Tuesday");
        3: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Wednesday");
        4: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Thursday");
        5: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Friday");
        6: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Saturday");
        7: LvSiteMngmntKmGrades.SETRANGE(Type,"Travel Hours Sunday");
      END;

      LvSiteMngmntKmGrades.SETFILTER(Kilometerstaffel,'>=%1',TempDec);
      IF NOT LvSiteMngmntKmGrades.FINDFIRST THEN BEGIN
        LvSiteMngmntKmGrades.RESET;
        LvSiteMngmntKmGradesRec.SETCURRENTKEY(Vehicle,Type,Kilometerstaffel);
        LvSiteMngmntKmGradesRec.SETRANGE(CAO,EmployeeRec.CAO);
        LvSiteMngmntKmGradesRec.SETRANGE(Vehicle,Vehicle);
        LvSiteMngmntKmGradesRec.SETFILTER(Kilometerstaffel,'<=%1',TempDec);
        CASE DayInt OF
          1: LvSiteMngmntKmGradesRec.SETRANGE(Type,"Travel Hours Monday");
          2: LvSiteMngmntKmGradesRec.SETRANGE(Type,"Travel Hours Tuesday");
          3: LvSiteMngmntKmGradesRec.SETRANGE(Type,"Travel Hours Wednesday");
          4: LvSiteMngmntKmGradesRec.SETRANGE(Type,"Travel Hours Thursday");
          5: LvSiteMngmntKmGradesRec.SETRANGE(Type,"Travel Hours Friday");
          6: LvSiteMngmntKmGradesRec.SETRANGE(Type,"Travel Hours Saturday");
          7: LvSiteMngmntKmGradesRec.SETRANGE(Type,"Travel Hours Sunday");
        END;
        IF LvSiteMngmntKmGradesRec.FINDLAST THEN
           CUSiteMngMntHours.StartTravelExceptionForm(lHoursDec,lCostObjectCode);
        IF lHoursDec > 0 THEN BEGIN
          HoursLineRec.INIT;
          HoursLineRec.Type := Type;
          HoursLineRec.Year := Year;
          HoursLineRec.Week := Week;
          HoursLineRec."Supplying Company" := "Supplying Company";
          HoursLineRec."Receiving Company" := "Receiving Company";
          HoursLineRec."Employee No." := "Employee No.";
          HoursLineRec.VALIDATE("Object No.","Object No.");
          HoursLineRec.VALIDATE("Cost Object",LvSiteMngmntKmGradesRec."Cost Object");
          HoursLineRec.VALIDATE("Wage Component", LvSiteMngmntKmGradesRec."Wage Component");  // C001173, add validation
          lvHourLine.SETRANGE(Year,Year);
          lvHourLine.SETRANGE(Week,Week);
          lvHourLine.SETRANGE("Supplying Company","Supplying Company");
          lvHourLine.SETRANGE("Employee No.","Employee No.");
          IF lvHourLine.FINDLAST THEN
            HoursLineRec."Line No." := lvHourLine."Line No." + 1000;
          CASE DayInt OF
            1: HoursLineRec.VALIDATE(Monday,lHoursDec);
            2: HoursLineRec.VALIDATE(Tuesday,lHoursDec);
            3: HoursLineRec.VALIDATE(Wednesday,lHoursDec);
            4: HoursLineRec.VALIDATE(Thursday,lHoursDec);
            5: HoursLineRec.VALIDATE(Friday,lHoursDec);
            6: HoursLineRec.VALIDATE(Saturday,lHoursDec);
            7: HoursLineRec.VALIDATE(Sunday,lHoursDec);
          END;
          HoursLineRec.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE GetLeaveTypeTotal@1100525000() : Decimal;
    VAR
      LeaveLedgEntry@1100525000 : Record 11020235;
    BEGIN
      //**4PS
      IF "Leave Type" <> '' THEN
      BEGIN
        LeaveLedgEntry.RESET;
        LeaveLedgEntry.SETCURRENTKEY("Employee No.","Leave Type");
        LeaveLedgEntry.SETRANGE("Employee No.", "Employee No.");
        LeaveLedgEntry.SETRANGE("Leave Type", "Leave Type");
        LeaveLedgEntry.CALCSUMS("No. of Hours");
        EXIT(LeaveLedgEntry."No. of Hours");
      END;
      EXIT(0);
    END;

    PROCEDURE SetDefaultDriverType@1100525007(DriverTypeOpt@1100525000 : 'Passenger,Driver without passengers,Driver with passengers');
    BEGIN
      "Travel Hours Monday" := DriverTypeOpt;
      "Travel Hours Tuesday" := DriverTypeOpt;
      "Travel Hours Wednesday" := DriverTypeOpt;
      "Travel Hours Thursday" := DriverTypeOpt;
      "Travel Hours Friday" := DriverTypeOpt;
      "Travel Hours Saturday" := DriverTypeOpt;
      "Travel Hours Sunday" := DriverTypeOpt;
    END;

    PROCEDURE SetProjHrsValidate@1100525008(ProjHrsLineNo@1100525000 : Integer);
    BEGIN
      gProjHrsLineNo := ProjHrsLineNo;
      gSetProjHrsValidateMode := TRUE;
    END;

    PROCEDURE CheckCostType@1210190008();
    VAR
      HumanResourcesSetup@1210190001 : Record 5218;
      DimVal@1210190003 : Record 349;
      SiteMgtEmpl@1210190002 : Record 11012357;
      ShowErrorMessage@1210190000 : Boolean;
    BEGIN
      //* Function copied from T11012039.
      //* In 'Hour Acc. Site Manager':
      //* - The field 'Cost Type' is not in this table, so first read 'Cost Object' to determine Cost Type.
      //* - Component Type can be filled if Wage Component is empty (here Wage Component most times is empty,
      //*   so it will be determined according to CAO-rules when posted to normal Hour Acc.). So check on
      //*   Wage Component is empty can not be used here. Here a normal field, so not a flowfield.
      //* - Field external not in this table, so first read employee.

      IF "Cost Object" = '' THEN
        EXIT;

      DimVal.RESET;
      DimVal.CHANGECOMPANY("Receiving Company");
      DimVal.SETRANGE(Code, "Cost Object");
      DimVal.SETRANGE("Global Dimension No.", 2);
      IF NOT DimVal.FINDFIRST THEN  //* Will be present, is checked on field 'Cost Object'. But if not
        EXIT;                       //* then exit, so then no check on Cost Type (assumed Labor).

      HumanResourcesSetup.CHANGECOMPANY(GetReceivingCompany);
      HumanResourcesSetup.GET;

      //Checks irrespective of Component Type
      CASE DimVal."Cost Type" OF
        DimVal."Cost Type"::Material:
          ShowErrorMessage := TRUE;
        DimVal."Cost Type"::Subcontracting:
          IF NOT IsExternalEmployee THEN //DP01010.n
            ShowErrorMessage := TRUE;
        DimVal."Cost Type"::Plant:
          BEGIN
            IF SiteMgtEmpl.GET("Supplying Company", "Employee No.") THEN BEGIN
              IF SiteMgtEmpl.External AND NOT (Type IN [Type::Project]) THEN
                FIELDERROR("Cost Object",
                  STRSUBSTNO(Text007, SiteMgtEmpl.FIELDCAPTION(External), SiteMgtEmpl.External, DimVal."Cost Type"));
            END;
            IF NOT (Type IN [Type::Project, Type::Plant, Type::UnmannedPlant, Type::Indirect]) THEN
              FIELDERROR("Cost Object", STRSUBSTNO(Text007, FIELDCAPTION(Type), Type, DimVal."Cost Type"));
            ShowErrorMessage := (NOT HumanResourcesSetup."Accept Plant Costs Hours");
          END;
      END;
      IF ShowErrorMessage THEN
        FIELDERROR("Cost Object", STRSUBSTNO(Text008, DimVal."Cost Type"));

      //Checks depending on Component Type
      IF "Component Type" = "Component Type"::Hours THEN
        CASE DimVal."Cost Type" OF
          DimVal."Cost Type"::Labor:;
          DimVal."Cost Type"::Subcontracting:; //DP01010
          DimVal."Cost Type"::Plant:
            ShowErrorMessage := (NOT HumanResourcesSetup."Accept Plant Costs Hours");
          DimVal."Cost Type"::Sundry:
            ShowErrorMessage := (NOT HumanResourcesSetup."Accept Sundry Costs Hours");
          ELSE
            ShowErrorMessage := TRUE;
        END;

      IF ShowErrorMessage THEN
        FIELDERROR("Cost Object", STRSUBSTNO(Text007, FIELDCAPTION("Component Type"), "Component Type", DimVal."Cost Type"));
    END;

    PROCEDURE FillDefaultPlantCompany@1100525004();
    VAR
      PlantMgtCompRec@1100525000 : Record 11020586;
      TmpPlantMgtCompRec@1100525003 : TEMPORARY Record 11020586;
      NoOfPlantComps@1100525001 : Integer;
      NewPlantCompany@1100525002 : Text[30];
    BEGIN
      IF "Receiving Company" = '' THEN BEGIN
        "Plant Company" := '';
        "Plant Location" := '';
        "Plant Type" := '';
        "Plant No." := '';
        "Cost Component Plant" := '';
        EXIT;
      END;

      CASE Type OF
        Type::UnmannedPlant:
          BEGIN
            NewPlantCompany := '';  //*For unmanned plant only the supplying company allowed
            IF ("Object No." <> '') THEN BEGIN
              IF (ObjectNoType = ObjectNoType::Service) OR ((ObjectNoType = 0) AND CheckServiceOrderType) THEN
                PlantMgtCompRec.GetPlantCompaniesForService("Object No.", TmpPlantMgtCompRec, "Receiving Company", FALSE)
              ELSE
                PlantMgtCompRec.GetPlantCompaniesForProject("Object No.", TmpPlantMgtCompRec, "Receiving Company", FALSE);
              IF TmpPlantMgtCompRec.GET("Supplying Company") THEN
                NewPlantCompany := "Supplying Company";
            END ELSE BEGIN
              IF PlantMgtCompRec.GET("Supplying Company") THEN
                NewPlantCompany := "Supplying Company";
            END;
          END;
        Type::Plant:
          BEGIN
            NewPlantCompany := "Plant Company";
            PlantMgtCompRec."Plant Company" := PlantMgtCompRec.GetPlantCompany(TRUE, NoOfPlantComps, "Receiving Company");
            IF (PlantMgtCompRec."Plant Company" <> '') AND (NoOfPlantComps = 1) THEN
              NewPlantCompany := PlantMgtCompRec."Plant Company";
            IF (NoOfPlantComps > 1) AND ("Object No." = '') THEN BEGIN
              IF ("Plant Company" = '') OR (NOT PlantMgtCompRec.GET("Plant Company")) THEN BEGIN
                NewPlantCompany := '';
                PlantMgtCompRec.SETRANGE(Default, TRUE);
                IF PlantMgtCompRec.FINDFIRST THEN
                  NewPlantCompany := PlantMgtCompRec."Plant Company";
                PlantMgtCompRec.SETRANGE(Default);  //* Reset filter
              END;
            END;
            IF (NoOfPlantComps > 1) AND ("Object No." <> '') THEN BEGIN
              NoOfPlantComps := PlantMgtCompRec.GetPlantCompaniesForProject("Object No.", TmpPlantMgtCompRec, "Receiving Company", FALSE);
              IF NoOfPlantComps = 0 THEN
                NoOfPlantComps := PlantMgtCompRec.GetPlantCompaniesForService("Object No.", TmpPlantMgtCompRec, "Receiving Company", FALSE);
              IF NoOfPlantComps = 1 THEN
                NewPlantCompany := TmpPlantMgtCompRec."Plant Company"
              ELSE BEGIN
                IF ("Plant Company" = '') OR (NOT TmpPlantMgtCompRec.GET("Plant Company")) THEN BEGIN
                  NewPlantCompany := '';
                  TmpPlantMgtCompRec.SETRANGE(Default, TRUE);
                  IF TmpPlantMgtCompRec.FINDFIRST THEN
                    NewPlantCompany := TmpPlantMgtCompRec."Plant Company";
                  TmpPlantMgtCompRec.SETRANGE(Default);  //* Reset filter
                END;
              END;
            END;
          END;
      END;

      IF "Plant Company" <> NewPlantCompany THEN BEGIN
        "Plant Company" := NewPlantCompany;
        "Plant Location" := '';
        "Plant Type" := '';
        "Plant No." := '';
        "Cost Component Plant" := '';
      END;
    END;

    PROCEDURE FillDefaultPlantLoc@1100525012() : Code[20];
    VAR
      lvPlantLocRec@1100525001 : Record 11012554;
      lvDefPlantLoc@1100525002 : Code[20];
      lvProjCompany@1100525000 : Text[30];
    BEGIN
      //* Default location only when there is only 1 plant location of the project.
      IF "Plant Company" = '' THEN
        EXIT('');
      IF "Object No." <> '' THEN BEGIN
        IF "Plant Company" <> "Receiving Company" THEN
          lvProjCompany := "Receiving Company";
        lvPlantLocRec.CHANGECOMPANY("Plant Company");
        lvPlantLocRec.SETCURRENTKEY("Company Name", "Project No.", "Service Order No.", "Employee No.");
        IF (ObjectNoType = ObjectNoType::Service) OR (((Type = Type::Plant) OR (Type = Type::UnmannedPlant)) AND (ObjectNoType = 0) AND CheckServiceOrderType) THEN
          lvPlantLocRec.SETRANGE("Service Order No.", "Object No.")
        ELSE
          lvPlantLocRec.SETRANGE("Project No.", "Object No.");
        lvPlantLocRec.SETRANGE("Company Name", lvProjCompany);
        lvPlantLocRec.SETRANGE(Blocked, FALSE);
        IF lvPlantLocRec.FINDFIRST THEN BEGIN
          lvDefPlantLoc := lvPlantLocRec.Code;
          IF lvPlantLocRec.NEXT <> 0 THEN
            lvDefPlantLoc := '';
        END;
      END;
      EXIT(lvDefPlantLoc);
    END;

    PROCEDURE GetPlantDescription@1100525002() : Text[50];
    VAR
      lvPlantTypeRec@1100525000 : Record 11012551;
      lvPlantNoRec@1100525001 : Record 11012552;
    BEGIN
      IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) OR ("Plant Type" = '') THEN
        EXIT('');
      lvPlantTypeRec.CHANGECOMPANY("Plant Company");
      lvPlantNoRec.CHANGECOMPANY("Plant Company");
      IF ("Plant No." <> '') THEN BEGIN
        IF lvPlantNoRec.GET("Plant Type", "Plant No.") THEN BEGIN
          IF (lvPlantNoRec.Description <> '') THEN
          EXIT(lvPlantNoRec.Description);
        END;
      END;
      IF lvPlantTypeRec.GET("Plant Type") THEN
        EXIT(lvPlantTypeRec.Description);
      EXIT('');
    END;

    PROCEDURE LookupPlantCompany@1100525014();
    VAR
      PlantMgtCompRec@1100525001 : Record 11020586;
      TmpPlantMgtCompRec@1100525002 : TEMPORARY Record 11020586;
      NoOfPlantComps@1100525000 : Integer;
    BEGIN
      IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) OR ("Receiving Company" = '') THEN
        EXIT;
      PlantMgtCompRec.GetPlantCompany(TRUE, NoOfPlantComps, "Receiving Company");
      IF ("Object No." <> '') THEN BEGIN
        NoOfPlantComps := 0;
        IF (Type = Type::Plant) OR (Type = Type::UnmannedPlant) THEN
          IF CheckServiceOrderType THEN
            NoOfPlantComps := PlantMgtCompRec.GetPlantCompaniesForService("Object No.", TmpPlantMgtCompRec, "Receiving Company", FALSE);
        IF NoOfPlantComps = 0 THEN
          NoOfPlantComps := PlantMgtCompRec.GetPlantCompaniesForProject("Object No.", TmpPlantMgtCompRec, "Receiving Company",FALSE);
        IF NoOfPlantComps = 0 THEN BEGIN
          PlantMgtCompRec.CHANGECOMPANY("Receiving Company");
          PlantMgtCompRec."Plant Company" := "Plant Company";
          PAGE.RUNMODAL(0, PlantMgtCompRec);
        END ELSE BEGIN
          TmpPlantMgtCompRec."Plant Company" := "Plant Company";
          IF (NOT CheckUnmannedPlantHourLineOpen()) THEN BEGIN
            PAGE.RUNMODAL(0, PlantMgtCompRec)
          END ELSE BEGIN
            IF PAGE.RUNMODAL(0, TmpPlantMgtCompRec) = ACTION::LookupOK THEN BEGIN
              IF TmpPlantMgtCompRec."Plant Company" <> "Plant Company" THEN BEGIN
                xRec."Plant Company" := "Plant Company";
                VALIDATE("Plant Company", TmpPlantMgtCompRec."Plant Company");
              END;
            END;
          END;
        END;
      END ELSE BEGIN
        PlantMgtCompRec.CHANGECOMPANY("Receiving Company");
        PlantMgtCompRec."Plant Company" := "Plant Company";
        IF (NOT CheckUnmannedPlantHourLineOpen()) OR (Type = Type::UnmannedPlant) THEN
          PAGE.RUNMODAL(0, PlantMgtCompRec)
        ELSE BEGIN
          IF PAGE.RUNMODAL(0, PlantMgtCompRec) = ACTION::LookupOK THEN
            VALIDATE("Plant Company", PlantMgtCompRec."Plant Company");
        END;
      END;
    END;

    PROCEDURE LookupPlantLocation@1100525013();
    VAR
      lvPlantLocRec@1100525001 : Record 11012554;
      lvProjCompany@1100525000 : Text[30];
    BEGIN
      IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) OR ("Object No." = '') THEN
        EXIT;
      IF "Plant Company" <> "Receiving Company" THEN
        lvProjCompany := "Receiving Company";

      lvPlantLocRec.CHANGECOMPANY("Plant Company");
      lvPlantLocRec.SETCURRENTKEY("Company Name", "Project No.", "Service Order No.", "Employee No.");
      lvPlantLocRec.FILTERGROUP(9);
      IF ((Type = Type::Plant) OR (Type = Type::UnmannedPlant)) AND CheckServiceOrderType THEN
        lvPlantLocRec.SETRANGE("Service Order No.", "Object No.")
      ELSE
        lvPlantLocRec.SETRANGE("Project No.", "Object No.");
      lvPlantLocRec.SETRANGE("Company Name", lvProjCompany);
      lvPlantLocRec.FILTERGROUP(0);
      lvPlantLocRec.Code := "Plant Location";
      lvPlantLocRec."Project No." := "Object No.";
      lvPlantLocRec."Company Name" := lvProjCompany;
      IF NOT CheckUnmannedPlantHourLineOpen() THEN
         PAGE.RUNMODAL(0, lvPlantLocRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, lvPlantLocRec) = ACTION::LookupOK THEN
          VALIDATE("Plant Location", lvPlantLocRec.Code);
      END;
    END;

    PROCEDURE LookupPlantType@1100525001();
    VAR
      PlantSetup@1100529900 : Record 11012550;
      lvPlantTypeRec@1100525000 : Record 11012551;
    BEGIN
      IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) THEN
        EXIT;
      PlantSetup.CHANGECOMPANY("Plant Company");
      lvPlantTypeRec.CHANGECOMPANY("Plant Company");
      PlantSetup.GET;
      IF NOT PlantSetup."No Filter on Hr. Acc. Type" THEN BEGIN
        IF Type = Type::UnmannedPlant THEN  //C-028223 (Soft filter)
          lvPlantTypeRec.SETRANGE("Hour Accounting Type", lvPlantTypeRec."Hour Accounting Type"::Unmanned)
        ELSE
          lvPlantTypeRec.SETRANGE("Hour Accounting Type", lvPlantTypeRec."Hour Accounting Type"::Manned);
      END;
      lvPlantTypeRec.Code := "Plant Type";
      IF NOT CheckUnmannedPlantHourLineOpen() THEN
        PAGE.RUNMODAL(0, lvPlantTypeRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, lvPlantTypeRec) = ACTION::LookupOK THEN
          VALIDATE("Plant Type", lvPlantTypeRec.Code);
      END;
    END;

    PROCEDURE LookupPlantNo@1100525003();
    VAR
      lvPlantNoRec@1100525000 : Record 11012552;
    BEGIN
      IF (NOT (Type IN [Type::Plant, Type::UnmannedPlant])) THEN
        EXIT;
      lvPlantNoRec.CHANGECOMPANY("Plant Company");
      lvPlantNoRec.SETRANGE("Plant Type", "Plant Type");
      lvPlantNoRec."Plant Type" := "Plant Type";
      lvPlantNoRec."No." := "Plant No.";
      IF NOT CheckUnmannedPlantHourLineOpen() THEN
        PAGE.RUNMODAL(0, lvPlantNoRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, lvPlantNoRec) = ACTION::LookupOK THEN
          VALIDATE("Plant No.", lvPlantNoRec."No.");
      END;
    END;

    PROCEDURE LookupCostCompPlant@1100525005();
    VAR
      lvPlantCostCompRec@1100525000 : Record 11012575;
    BEGIN
      IF (Type <> Type::Plant) THEN
        EXIT;
      lvPlantCostCompRec.CHANGECOMPANY("Plant Company");
      lvPlantCostCompRec.Code := "Cost Component Plant";
      IF PAGE.RUNMODAL(0, lvPlantCostCompRec) = ACTION::LookupOK THEN
        VALIDATE("Cost Component Plant", lvPlantCostCompRec.Code);
    END;

    PROCEDURE LookupShiftCode@1210190005(EditableMode@1210190000 : Boolean);
    VAR
      ProjShift@1100525000 : Record 11125538;
      ProjNo@1210190001 : Code[20];
    BEGIN
      //*DP00033
      ProjNo := GetProjectNoForShift();
      IF ProjNo = '' THEN
        EXIT;

      ProjShift.CHANGECOMPANY("Receiving Company");
      ProjShift.FILTERGROUP(9);
      ProjShift.SETRANGE("Project No.", ProjNo);
      ProjShift.SETFILTER("Shift Code", '<>%1', '');  //* Only Shift level
      ProjShift.FILTERGROUP(0);
      ProjShift."Project No." := ProjNo;
      ProjShift."Shift Code" := "Shift Code";
      IF PAGE.RUNMODAL(0, ProjShift) = ACTION::LookupOK THEN BEGIN
        IF EditableMode AND (ProjShift."Shift Code" <> '') THEN
          VALIDATE("Shift Code", ProjShift."Shift Code");
      END;
    END;

    PROCEDURE LookupReasonCode@1100528202(EditableMode@1210190000 : Boolean);
    VAR
      ReasonCode@1100525000 : Record 231;
    BEGIN
      //*DP01205
      ReasonCode.CHANGECOMPANY("Receiving Company");
      ReasonCode.Code := "Reason Code";
      IF PAGE.RUNMODAL(0, ReasonCode) = ACTION::LookupOK THEN BEGIN
        IF EditableMode AND (ReasonCode.Code <> '') THEN
          VALIDATE("Reason Code", ReasonCode.Code);
      END;
    END;

    PROCEDURE LookupServiceLocation@1100528204(EditableMode@1210190000 : Boolean);
    VAR
      ServiceLocation@1100525000 : Record 11012801;
    BEGIN
      //*DP01205
      ServiceLocation.CHANGECOMPANY("Receiving Company");
      ServiceLocation."No." := "Service Location No.";
      IF PAGE.RUNMODAL(0, ServiceLocation) = ACTION::LookupOK THEN BEGIN
        IF EditableMode AND (ServiceLocation."No." <> '') THEN
          VALIDATE("Service Location No.", ServiceLocation."No.");
      END;
    END;

    PROCEDURE GetProjectNoForShift@1210190000() : Code[20];
    VAR
      SiteMgtProjHourLine@1210190000 : Record 11012363;
    BEGIN
      //*DP00033
      IF (Type <> Type::Indirect) THEN
        EXIT("Object No.")
      ELSE BEGIN
        IF "Connection No." <> 0 THEN BEGIN
          SiteMgtProjHourLine.SETCURRENTKEY("Connection No.");
          SiteMgtProjHourLine.SETRANGE("Connection No.", "Connection No.");
          IF SiteMgtProjHourLine.FINDFIRST THEN
            EXIT(SiteMgtProjHourLine."Project No.");
        END;
      END;
      EXIT('');
    END;

    PROCEDURE FillDefaultCostCompPlant@1100525006();
    VAR
      lvPlantSetupRec@1100525000 : Record 11012550;
    BEGIN
      IF (Type <> Type::Plant) THEN
        EXIT;

      lvPlantSetupRec.CHANGECOMPANY("Plant Company");
      lvPlantSetupRec.GET;
      IF lvPlantSetupRec."Cost Component Hour Costs" <> '' THEN
        "Cost Component Plant" := lvPlantSetupRec."Cost Component Hour Costs";
    END;

    PROCEDURE CheckPlantLocLinkedToProject@1100525011(IPlantLocRec@1100525001 : Record 11012554);
    VAR
      lvProjHourLineRec@1100525002 : Record 11012363;
      lvProjCompany@1100525000 : Text[30];
    BEGIN
      IF "Plant Company" <> "Receiving Company" THEN
        lvProjCompany := "Receiving Company";
      IF (IPlantLocRec."Project No." = '') OR
         (IPlantLocRec."Project No." <> "Object No.") OR
         (IPlantLocRec."Company Name" <> lvProjCompany)
      THEN BEGIN
        IF ((Type = Type::Plant) OR (Type = Type::UnmannedPlant)) AND CheckServiceOrderType THEN
          IF IPlantLocRec."Service Order No." = "Object No." THEN
            EXIT;
        IF NOT gSetProjHrsValidateMode THEN
          FIELDERROR("Plant Location", STRSUBSTNO(Text004, "Plant Location", "Object No.", "Receiving Company"))
        ELSE BEGIN
          lvProjHourLineRec.Year := Year;
          lvProjHourLineRec.Week := Week;
          lvProjHourLineRec."Receiving Company" := "Receiving Company";
          lvProjHourLineRec."Project No." := "Object No.";
          lvProjHourLineRec."Line No." := gProjHrsLineNo;
          lvProjHourLineRec."Plant Location" := "Plant Location";
          lvProjHourLineRec.FIELDERROR("Plant Location", STRSUBSTNO(Text004, "Plant Location", "Object No.", "Receiving Company"));
        END;
      END;
    END;

    PROCEDURE CheckDeleteUnmandPlantHourLine@1100525010(IUpdateAction@1100525000 : Option);
    VAR
      lvXRec@1100525001 : Record 11012361;
      lvSiteMgtHoursCU@1100525002 : Codeunit 11012179;
      lvText001@1100525003 : TextConst 'ENU=Plant hours of the unmanned plant are already posted, modify not allowed.;NOR=Maskintimer for ubemannet maskin er allerede bokfõrt, endring ikke tillatt.;SVE=Maskintimmar har redan bokfîrts fîr den obemannade Maskinen. éndringar Ñr inte tillÜtna.';
    BEGIN
      IF "Plant Hour Rev. Line No." = 0 THEN
        EXIT;
      IF NOT lvXRec.GET(Year, Week, "Supplying Company", "Employee No." , "Line No.") THEN
        EXIT;
      IF (lvXRec.Type <> lvXRec.Type::UnmannedPlant) THEN
        EXIT;

      CASE IUpdateAction OF
        UpdateAction::Modify:
          BEGIN
            IF NOT lvSiteMgtHoursCU.CheckPlantHourRevLineOpen(
              lvXRec.Year, lvXRec.Week, lvXRec."Plant Type", lvXRec."Plant No.",
              lvXRec."Plant Hour Rev. Line No.", lvXRec."Plant Company")
            THEN
              ERROR(lvText001);
            lvSiteMgtHoursCU.DeletePlantHourRevLineOpen(
              lvXRec.Year, lvXRec.Week, lvXRec."Plant Type", lvXRec."Plant No.",
              lvXRec."Plant Hour Rev. Line No.", lvXRec."Plant Company");
            "Plant Hour Rev. Line No." := 0;
          END;
        UpdateAction::Delete:
          BEGIN
            lvSiteMgtHoursCU.DeletePlantHourRevLineOpen(
              lvXRec.Year, lvXRec.Week, lvXRec."Plant Type", lvXRec."Plant No.",
              lvXRec."Plant Hour Rev. Line No.", lvXRec."Plant Company");
          END;
      END;
    END;

    PROCEDURE CheckUnmannedPlantHourLineOpen@1100525009() : Boolean;
    VAR
      lvSiteMgtHoursCU@1100525002 : Codeunit 11012179;
    BEGIN
      IF (Type <> Type::UnmannedPlant) OR ("Plant Hour Rev. Line No." = 0) THEN
        EXIT(TRUE);

      IF NOT lvSiteMgtHoursCU.CheckPlantHourRevLineOpen(
        Year, Week, "Plant Type", "Plant No.", "Plant Hour Rev. Line No.", "Plant Company")
      THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE CheckResetOnComponentType@1210190001();
    BEGIN
      //*C-027136
      IF ("Component Type" = "Component Type"::Expenses) THEN BEGIN
        IF ExpensesPerDay THEN
          "Posting Date" := 0D
        ELSE BEGIN
          Monday := 0;
          Tuesday := 0;
          Wednesday := 0;
          Thursday := 0;
          Friday := 0;
          Saturday := 0;
          Sunday := 0;
          CalculateTotalLine;
        END;
      END ELSE BEGIN
        Quantity := 0;
        Amount := 0;
        "Posting Date" := 0D;
      END;
    END;

    PROCEDURE GetCostObjectWithLookup@1210190003();
    VAR
      DimValRec@1210190000 : Record 349;
    BEGIN
      SiteMngmntHoursSetup.GET;
      CASE Type OF
        Type::Project,
        Type::Plant:
          BEGIN
            DimValRec.RESET;
            DimValRec.CHANGECOMPANY("Receiving Company"); // 33618.n
            DimValRec.FILTERGROUP(9);
            DimValRec.SETRANGE("Global Dimension No.", 2);
            //DP01010.sn
            IF IsExternalEmployee THEN
              DimValRec.SETFILTER("Cost Type",'%1|%2|%3|%4',
                DimValRec."Cost Type"::Labor,DimValRec."Cost Type"::Subcontracting,DimValRec."Cost Type"::Plant,DimValRec."Cost Type"::Sundry)
            ELSE
            //DP01010.en
              DimValRec.SETFILTER("Cost Type",'%1|%2|%3',
                DimValRec."Cost Type"::Labor,DimValRec."Cost Type"::Plant,DimValRec."Cost Type"::Sundry);
            DimValRec.FILTERGROUP(0);
            DimValRec.SETRANGE("Project Filter", "Object No.");
            IF "Receiving Company" = '' THEN
              DimValRec.SETRANGE("Company Filter")
            ELSE
              DimValRec.SETRANGE("Company Filter", "Receiving Company");
            IF DimValRec.FINDSET THEN BEGIN
              IF "Cost Object" <> '' THEN
                DimValRec.Code := "Cost Object";
              IF PAGE.RUNMODAL(PAGE::"Cost Object List", DimValRec) = ACTION::LookupOK THEN
                VALIDATE("Cost Object",DimValRec.Code);
            END;
          END;
        Type::Indirect,
        Type::Service:
          BEGIN
            IF (SiteMngmntHoursSetup."Cost Object By Indirect Lines") OR
               (Type = Type::Service)
            THEN BEGIN
              DimValRec.RESET;
              DimValRec.CHANGECOMPANY("Receiving Company"); // 33618.n
              DimValRec.FILTERGROUP(9);
              DimValRec.SETRANGE("Global Dimension No.", 2);
              //DP01010.sn
              IF IsExternalEmployee THEN
                DimValRec.SETFILTER("Cost Type",'%1|%2|%3',
                  DimValRec."Cost Type"::Labor,DimValRec."Cost Type"::Subcontracting,DimValRec."Cost Type"::Sundry)
              ELSE
              //DP01010.en
                DimValRec.SETFILTER("Cost Type",'%1|%2', DimValRec."Cost Type"::Labor,DimValRec."Cost Type"::Sundry);
              DimValRec.FILTERGROUP(0);
              IF DimValRec.FINDSET THEN BEGIN
                IF "Receiving Company" = '' THEN
                  DimValRec.SETRANGE("Company Filter")
                ELSE
                  DimValRec.SETRANGE("Company Filter", "Receiving Company");
                IF "Cost Object" <> '' THEN
                  DimValRec.Code := "Cost Object";
                IF PAGE.RUNMODAL(PAGE::"Cost Object List", DimValRec) = ACTION::LookupOK THEN
                  VALIDATE("Cost Object",DimValRec.Code);
              END;
            END;
          END;
      END;
    END;

    PROCEDURE FillDepartmentCode@1100409000() : Code[20];
    VAR
      TradeAssRec@1100409005 : Record 11012015;
      EmplRec@1100409006 : Record 5200;
      CostCodeRec@1100409007 : Record 11012083;
      TableID@1100409001 : ARRAY [10] OF Integer;
      No@1100409000 : ARRAY [10] OF Code[40];
      GlobalDim1Code@1100409003 : Code[20];
      GlobalDim2Code@1100409002 : Code[20];
      DimensionSet@1100525000 : Integer;
      ServiceOrder@1100529400 : Record 11012823;
    BEGIN
      IF ("Receiving Company" <> '') AND ("Receiving Company" <> CURRENTCOMPANY) THEN BEGIN
        VALIDATE("Department Code",  '');
        EXIT;
      END;
      DimMgt.SetCompany(GetReceivingCompany);

      CASE Type OF
        Type::Project:
          BEGIN
            TableID[1] := DATABASE::Job;
            No[1] := "Object No.";
            DimMgt.SetSkipDepartmentAuthorization(TRUE); //TestCall T006969
            DimensionSet := DimMgt.GetDefaultDimID(TableID, No, '', GlobalDim1Code,GlobalDim2Code, 0, 0); //** DP00387 changed
            DimMgt.SetSkipDepartmentAuthorization(FALSE); //TestCall T006969
          END;
        Type::Service:
          BEGIN
            IF "Object No." <> '' THEN BEGIN
              ServiceOrder.CHANGECOMPANY(GetReceivingCompany);
              ServiceOrder.GET("Object No.");
              IF "Additional Cost (Service)" THEN
                GlobalDim1Code := ServiceOrder."Department Code (Other)"
              ELSE
                GlobalDim1Code := ServiceOrder."Global Dimension 1 Code";
            END;
          END;
        Type::Plant, Type::UnmannedPlant:
          BEGIN
            TableID[1] := DATABASE::"Plant Number";
            No[1] := DimMgt.MakeCombinedPlantNo("Plant Type", "Plant No.");
            TableID[2] := DATABASE::"Plant Type";
            No[2] := "Plant Type";
            DimensionSet := DimMgt.GetDefaultDimID(TableID, No, '', GlobalDim1Code, GlobalDim2Code, 0, 0);   //** DP00387 changed
          END;
        Type::Indirect:
          BEGIN
            EmplRec.CHANGECOMPANY(GetReceivingCompany);
            TradeAssRec.CHANGECOMPANY(GetReceivingCompany);
            CostCodeRec.CHANGECOMPANY(GetReceivingCompany);
            EmplRec.GET("Employee No.");
            IF NOT TradeAssRec.GET(EmplRec."Trade Association") THEN
              TradeAssRec.INIT;
            IF NOT CostCodeRec.GET("Object No.") THEN
              CostCodeRec.INIT;
            IF CostCodeRec."Source Global Dim 1 Code" = CostCodeRec."Source Global Dim 1 Code"::Fixed THEN
              GlobalDim1Code := CostCodeRec."Global Dimension 1 Code"
            ELSE
              IF CostCodeRec."Source Global Dim 1 Code" = CostCodeRec."Source Global Dim 1 Code"::Employee THEN
                GlobalDim1Code := EmplRec."Global Dimension 1 Code"
              ELSE
                IF TradeAssRec."Source Department Code" = TradeAssRec."Source Department Code"::"Trade Association" THEN
                  GlobalDim1Code := TradeAssRec."Department Code"
                ELSE
                  GlobalDim1Code := EmplRec."Global Dimension 1 Code";
          END;
      END;

      VALIDATE("Department Code",  GlobalDim1Code);
    END;

    PROCEDURE ValidatePlantNo@1100525031();
    VAR
      PlantType@1100525000 : Record 11012551;
      PlantSetup@1100525002 : Record 11012550;
    BEGIN
      //**4PS
      IF ("Plant Type" <> '') AND ("Plant No." = '') THEN BEGIN
        PlantSetup.GET;
        IF PlantSetup."Posting on Unique Plant No." THEN
          IF PlantType.GET("Plant Type") THEN
            IF NOT PlantType.Bulk THEN
              IF PlantSetup."Cost Component Acquisition" <> "Cost Component Plant" THEN
                TESTFIELD("Plant No.");
      END;
    END;

    PROCEDURE Release@1100528420();
    VAR
      SiteMngmntHoursSetup@1100528400 : Record 11012355;
      Job@1100529500 : Record 11072003;
      HumanResourcesSetup@1100528900 : Record 5218;
      SiteMngmntHoursHeader@1100528201 : Record 11012360;
      ApprovalManagement4PSConstr@1100528200 : Codeunit 11125349;
      ApprovalsMgmt@1100528203 : Codeunit 1535;
      ApprovalsWorkFlowEnabled@1100528202 : Boolean;
      ApprovalsBridge4PSConstruct@1100525000 : Codeunit 11125348;
      EmployeeRec@1100285100 : Record 5200;
      TotalNormHours@1100285102 : Decimal;
    BEGIN
      SiteMngmntHoursSetup.GET;
      IF FINDSET THEN BEGIN
        REPEAT

          IF (Status <> Status::Open) AND
             (Status <> Status::Rejected)
          THEN
            FIELDERROR(Status);

          CheckLeave;

          CASE Type OF
            Type::Plant,
            Type::UnmannedPlant: BEGIN
              IF Type = Type::Plant THEN BEGIN
                IF ("Receiving Company" <> '') THEN
                  HumanResourcesSetup.CHANGECOMPANY("Receiving Company");
                HumanResourcesSetup.GET;

                IF (HumanResourcesSetup."Salary Application" IN
                  [HumanResourcesSetup."Salary Application"::"LOSA-CTB",
                   HumanResourcesSetup."Salary Application"::"LOSA-Kraan",
                   HumanResourcesSetup."Salary Application"::"LOSA-Cobra"])
                THEN
                  TESTFIELD("Cost Object");
              END;

              IF "Component Type" = "Component Type"::Expenses THEN
                TESTFIELD("Cost Object");
            END;
            Type::Project,
            Type::Service: BEGIN
              TESTFIELD("Object No."); //#C045080.n
              TESTFIELD("Cost Object");
            END;
            Type::Indirect: BEGIN
              TESTFIELD("Object No."); //#C045080.n
              IF SiteMngmntHoursSetup."Cost Object By Indirect Lines" THEN
                TESTFIELD("Cost Object");
            END;
          END;

          CASE Type OF
            Type::Project:
              BEGIN
                CheckProjectEmployee;
                CheckProjectStatus("Object No.", "Receiving Company", TRUE);
                IF Element <> '' THEN
                  CheckProjectElementBlockedPerWeek;
                Job.CHANGECOMPANY("Receiving Company");
                IF Job.GET("Object No.") THEN
                  IF (Job."Posting Element Mandatory") AND ("Total Line" <> 0) THEN
                    TESTFIELD(Element);
              END;
          END;
        UNTIL (NEXT = 0);
      END;

      IF FINDSET(TRUE) THEN BEGIN
        SiteMngmntHoursHeader.GET(Year, Week, "Supplying Company", "Employee No.");
        ApprovalsWorkFlowEnabled := ApprovalManagement4PSConstr.IsSiteMngmntHoursHeaderApprovalsWorkflowEnabled(SiteMngmntHoursHeader);
        IF ApprovalsWorkFlowEnabled AND
          (NOT ApprovalsMgmt.HasOpenOrPendingApprovalEntries(SiteMngmntHoursHeader.RECORDID))
          AND (NOT ApprovalsBridge4PSConstruct.CheckWorkFlowActive(SiteMngmntHoursHeader.RECORDID))
        THEN BEGIN
          SiteMngmntHoursHeader.SendSiteMngmntHoursHeaderForApproval;
          EXIT;
        END;
        REPEAT
          IF ApprovalsMgmt.LineHasOpenOrPendingApprovalEntries(SiteMngmntHoursHeader.RECORDID, "Line No.") THEN BEGIN
            Status := Status::"Pending Approval";
          END ELSE BEGIN
            IF ApprovalsWorkFlowEnabled THEN BEGIN
              IF Status IN [Status::Open,Status::Rejected,Status::Released] THEN BEGIN
                SiteMngmntHoursHeader.SendSiteMngmntHoursHeaderForApproval;
                EXIT;
              END ELSE
                Status := Status::Approved;
            END ELSE
              Status := Status::Released;
          END;

          MODIFY;
      //>>180706 #15536
      //    IF JobsSetup."Explode Hour Lines at Release" THEN
      //      ExplodeLines;
          HumanResourcesSetup.GET;
          IF SiteMngmntHoursSetup."Check Hours on Release" THEN
            CheckLines;
          IF HumanResourcesSetup."Norm Check" THEN BEGIN
            EmployeeRec.GET("Employee No.");
            IF EmployeeRec."Account Hours" = EmployeeRec."Account Hours"::"Required according to Norm" THEN
              IF NOT CheckNormHoursConsent(Rec) THEN
                ERROR(Text11128025,TotalNormHours,EmployeeRec."Norm Hours"); //40 hours check
          END;
      //<<180706 #15536
          UpdateHeaderStatus(FALSE,FALSE);
        UNTIL (NEXT = 0);
      END;
    END;

    PROCEDURE PendingApproval@1100525019();
    VAR
      SiteMngmntHoursHeader@1100528400 : Record 11012360;
      ApprovalManagement4PSConstr@1100528200 : Codeunit 11125349;
      ApprovalsMgmt@1100528203 : Codeunit 1535;
      ApprovalsWorkFlowEnabled@1100528202 : Boolean;
    BEGIN
      IF FINDSET THEN BEGIN
        REPEAT
          IF (Status <> Status::Open) AND
             (Status <> Status::Rejected)
          THEN
            FIELDERROR(Status);
        UNTIL NEXT = 0;
      END;

      IF (FINDSET(TRUE)) THEN BEGIN
        SiteMngmntHoursHeader.GET(Year, Week, "Supplying Company", "Employee No.");
        ApprovalsWorkFlowEnabled := ApprovalManagement4PSConstr.IsSiteMngmntHoursHeaderApprovalsWorkflowEnabled(SiteMngmntHoursHeader);
        REPEAT
          IF ApprovalsMgmt.LineHasOpenOrPendingApprovalEntries(SiteMngmntHoursHeader.RECORDID, "Line No.") THEN
            Status := Status::"Pending Approval"
          ELSE
            IF ApprovalsWorkFlowEnabled THEN
              Status := Status::Approved
            ELSE
              Status := Status::Released;
          MODIFY;
        UNTIL (NEXT = 0);
        UpdateHeaderStatus(FALSE,FALSE);
      END;
    END;

    PROCEDURE Reopen@1100528404();
    BEGIN
      IF (FINDSET(TRUE)) THEN BEGIN
        REPEAT
          ReopenSingleRec;
        UNTIL (NEXT = 0);
      END;
    END;

    PROCEDURE ReopenSingleRec@1100525015();
    VAR
      SiteMngmntHoursSetup@1100528400 : Record 11012355;
      SiteMngmntHoursHeader@1100528200 : Record 11012360;
      ApprovalManagement4PSConstr@1100528201 : Codeunit 11125349;
      ApprovalsWorkFlowEnabled@1100528202 : Boolean;
      ApprovalsMgmt@1100528203 : Codeunit 1535;
    BEGIN
      SiteMngmntHoursSetup.GET;
      SiteMngmntHoursHeader.GET(Year, Week, "Supplying Company", "Employee No.");

      ApprovalsWorkFlowEnabled := ApprovalManagement4PSConstr.IsSiteMngmntHoursHeaderApprovalsWorkflowEnabled(SiteMngmntHoursHeader);

      IF (ApprovalsWorkFlowEnabled) AND (ApprovalsMgmt.LineHasOpenOrPendingApprovalEntries(SiteMngmntHoursHeader.RECORDID, "Line No.")) AND
        (Status = Status::"Pending Approval")
      THEN
        FIELDERROR(Status);

      IF (ApprovalsWorkFlowEnabled) AND (Status = Status::Posted)
      THEN
        FIELDERROR(Status);

      IF ApprovalsWorkFlowEnabled AND (Status = Status::Approved) THEN
        ApprovalsMgmt.DeleteApprovalEntries4PS(SiteMngmntHoursHeader.RECORDID, "Line No.");

      VALIDATE(Status, Status::Open);
      MODIFY;
      UpdateHeaderStatus(FALSE,FALSE);
    END;

    PROCEDURE Approve@1100528408();
    VAR
      SiteMngmntHoursHeader@1100528203 : Record 11012360;
      ApprovalManagement4PSConstr@1100528202 : Codeunit 11125349;
      ApprovalsMgmt@1100528201 : Codeunit 1535;
      ApprovalsWorkFlowEnabled@1100528200 : Boolean;
    BEGIN
      SiteMngmntHoursSetup.GET;
      IF (FINDSET(TRUE)) THEN BEGIN
        SiteMngmntHoursHeader.GET(Year, Week, "Supplying Company", "Employee No.");
        IF ApprovalManagement4PSConstr.IsSiteMngmntHoursHeaderApprovalsWorkflowEnabled(SiteMngmntHoursHeader) THEN
          ApprovalsWorkFlowEnabled := TRUE;

        REPEAT
          IF ((ApprovalsWorkFlowEnabled) AND (NOT ApprovalsMgmt.LineHasOpenOrPendingApprovalEntries(SiteMngmntHoursHeader.RECORDID, "Line No."))) OR
             (NOT ApprovalsWorkFlowEnabled)
          THEN BEGIN
            TESTFIELD(Status, Status::"Pending Approval");
            VALIDATE(Status, Status::Approved);
            MODIFY;
            UpdateHeaderStatus(FALSE,FALSE);
          END;
        UNTIL (NEXT = 0);
      END;
    END;

    PROCEDURE Reject@1100528407(RejectText@1100529500 : Text);
    VAR
      SiteMngmntHoursSetup@1100528400 : Record 11012355;
      SiteMngmntHoursHeader@1100528203 : Record 11012360;
      ApprovalManagement4PSConstr@1100528202 : Codeunit 11125349;
      ApprovalsMgmt@1100528201 : Codeunit 1535;
      ApprovalsWorkFlowEnabled@1100528200 : Boolean;
    BEGIN
      SiteMngmntHoursSetup.GET;
      IF (FINDSET(TRUE)) THEN BEGIN
        SiteMngmntHoursHeader.GET(Year, Week, "Supplying Company", "Employee No.");
          IF ApprovalManagement4PSConstr.IsSiteMngmntHoursHeaderApprovalsWorkflowEnabled(SiteMngmntHoursHeader) THEN
          ApprovalsWorkFlowEnabled := TRUE;
        REPEAT
          IF ((ApprovalsWorkFlowEnabled) AND (NOT ApprovalsMgmt.LineHasOpenOrPendingApprovalEntries(SiteMngmntHoursHeader.RECORDID, "Line No."))) OR
             (NOT ApprovalsWorkFlowEnabled)
          THEN BEGIN
            TESTFIELD(Status, Status::"Pending Approval");
            VALIDATE(Status, Status::Rejected);
            MODIFY;
            UpdateHeaderStatus(FALSE,FALSE);
          END;
        UNTIL (NEXT = 0);
      END;
    END;

    PROCEDURE Posted@1100528409();
    VAR
      SiteMngmntHoursHeader@1100528201 : Record 11012360;
      ApprovalManagement4PSConstr@1100528200 : Codeunit 11125349;
    BEGIN
      SiteMngmntHoursSetup.GET;
      SiteMngmntHoursHeader.GET(Year, Week, "Supplying Company", "Employee No.");
      IF ApprovalManagement4PSConstr.IsSiteMngmntHoursHeaderApprovalsWorkflowEnabled(SiteMngmntHoursHeader) THEN
        TESTFIELD(Status, Status::Approved);
      VALIDATE(Status, Status::Posted);
      MODIFY;
    END;

    PROCEDURE UpdateHeaderStatus@1100528305(CalledFromDelete@1100409005 : Boolean;CalledFromInsert@1100528200 : Boolean);
    VAR
      SiteMngmntHoursHeader@1100528300 : Record 11012360;
      NewStatus@1100528302 : Option;
    BEGIN
      NewStatus := GetLineStatusForHeader(CalledFromDelete, CalledFromInsert);

      IF CURRENTCOMPANY <> COMPANYNAME THEN
        SiteMngmntHoursHeader.CHANGECOMPANY(CURRENTCOMPANY);

      SiteMngmntHoursHeader.GET(Year, Week, "Supplying Company", "Employee No.");
      IF (SiteMngmntHoursHeader.Status <> NewStatus) THEN BEGIN
        SiteMngmntHoursHeader.Status := NewStatus;
        SiteMngmntHoursHeader.MODIFY;
      END;
    END;

    PROCEDURE GetLineStatusForHeader@1100409001(CalledFromDelete@1100409005 : Boolean;CalledFromInsert@1100528203 : Boolean) : Integer;
    VAR
      SiteMngmntHoursHeader@1100528201 : Record 11012360;
      SiteMngmntHoursLine@1100528301 : Record 11012361;
      NewStatus@1100528302 : Option;
      CountAll@1100409000 : Integer;
      CountReleased@1100409001 : Integer;
      CountApproved@1100409002 : Integer;
      CountRejected@1100409003 : Integer;
      CountOpen@1100409004 : Integer;
      CountPosted@1100529500 : Integer;
      ApprovalManagement4PSConstr@1100528200 : Codeunit 11125349;
      PendingApprovalCount@1100528202 : Integer;
    BEGIN
      IF CURRENTCOMPANY <> COMPANYNAME THEN BEGIN
        SiteMngmntHoursHeader.CHANGECOMPANY(CURRENTCOMPANY);
        SiteMngmntHoursLine.CHANGECOMPANY(CURRENTCOMPANY);
      END;

      SiteMngmntHoursHeader.GET(Year, Week, "Supplying Company", "Employee No.");
      SiteMngmntHoursSetup.GET;
      NewStatus := SiteMngmntHoursLine.Status::Open;

      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.SETRANGE("Employee No.", "Employee No.");

      IF (CalledFromDelete) THEN
        SiteMngmntHoursLine.SETFILTER("Line No.", '<>%1', "Line No.");

      CountAll := SiteMngmntHoursLine.COUNT;
      SiteMngmntHoursLine.SETRANGE(Status, SiteMngmntHoursLine.Status::Posted);
      CountPosted := SiteMngmntHoursLine.COUNT;

      IF  (CountAll > 0) AND (CountAll = CountPosted) THEN
        NewStatus := SiteMngmntHoursLine.Status::Posted;

      IF ApprovalManagement4PSConstr.IsSiteMngmntHoursHeaderApprovalsWorkflowEnabled(SiteMngmntHoursHeader) THEN BEGIN
        SiteMngmntHoursLine.SETFILTER(Status, '<>%1', SiteMngmntHoursLine.Status::Posted);
        CountAll := SiteMngmntHoursLine.COUNT;
      END;

      SiteMngmntHoursLine.SETRANGE(Status, SiteMngmntHoursLine.Status::Released);
      CountReleased := SiteMngmntHoursLine.COUNT;
      SiteMngmntHoursLine.SETRANGE(Status, SiteMngmntHoursLine.Status::"Pending Approval");
      PendingApprovalCount := SiteMngmntHoursLine.COUNT;
      SiteMngmntHoursLine.SETRANGE(Status, SiteMngmntHoursLine.Status::Approved);
      CountApproved := SiteMngmntHoursLine.COUNT;
      SiteMngmntHoursLine.SETRANGE(Status, SiteMngmntHoursLine.Status::Rejected);
      CountRejected := SiteMngmntHoursLine.COUNT;
      SiteMngmntHoursLine.SETRANGE(Status, SiteMngmntHoursLine.Status::Open);
      CountOpen := SiteMngmntHoursLine.COUNT;

      IF CalledFromInsert THEN BEGIN
        CountOpen +=1;
      END;


      IF (CountAll > 0) AND (CountAll = CountApproved) THEN
        NewStatus := SiteMngmntHoursLine.Status::Approved
      ELSE
        IF (CountAll > 0) AND (CountAll = PendingApprovalCount+CountApproved) THEN
          NewStatus := SiteMngmntHoursLine.Status::"Pending Approval";

      IF CountReleased > 0 THEN
        NewStatus := SiteMngmntHoursLine.Status::Released;
      IF CountOpen > 0 THEN
        NewStatus := SiteMngmntHoursLine.Status::Open;
      IF CountRejected > 0 THEN
        NewStatus := SiteMngmntHoursLine.Status::Rejected;

      EXIT(NewStatus);
    END;

    LOCAL PROCEDURE CheckIfChangingLineIsAllowed@1100528406();
    VAR
      lvPlantHourRevLineRec@1100525000 : Record 11012574;
    BEGIN
      IF NOT CheckUnmannedPlantHourLineOpen() THEN
        ERROR(Text011, lvPlantHourRevLineRec.TABLECAPTION);

      IF (Status <> Status::Open) AND (Status <> Status::Rejected) THEN
        ERROR(Text012, TABLECAPTION, FIELDCAPTION(Status), Status::Open, Status::Rejected, Status,
              Year,Week,"Supplying Company","Employee No.","Line No.");
    END;

    LOCAL PROCEDURE GetWageComponentDescription@1100528300() : Text[50];
    VAR
      WageComponent@1100528300 : Record 11012014;
    BEGIN
      IF ("Wage Component" = '') THEN
        EXIT('');
      IF ("Receiving Company" <> '') THEN
        WageComponent.CHANGECOMPANY("Receiving Company");
      IF (WageComponent.GET("Wage Component")) THEN
        EXIT(WageComponent.Description);
      EXIT('');
    END;

    PROCEDURE GetCostObjectDescription@1100528301();
    VAR
      DimensionValue@1100528300 : Record 349;
    BEGIN
      "Cost Object Description" := '';
      IF "Cost Object" = '' THEN
        EXIT;

      DimMgt.SetCompany("Receiving Company");
      IF Type = Type::Project THEN
        DimMgt.GetDimValueRec(2, "Cost Object", DimensionValue, FALSE, "Object No.")
      ELSE
        DimMgt.GetDimValueRec(2, "Cost Object", DimensionValue, FALSE, '');
      "Cost Object Description" := DimensionValue.Name;
    END;

    LOCAL PROCEDURE GetWeekDay@1100528302() : Integer;
    BEGIN
      CASE TRUE OF
        (Monday <> 0) AND (Tuesday+Wednesday+Thursday+Friday+Saturday+Sunday = 0): EXIT(1); //Monday
        (Tuesday <> 0) AND (Monday+Wednesday+Thursday+Friday+Saturday+Sunday = 0): EXIT(2); //Tuesday
        (Wednesday <> 0) AND (Monday+Tuesday+Thursday+Friday+Saturday+Sunday = 0): EXIT(3); //Wednesday
        (Thursday <> 0) AND (Monday+Tuesday+Wednesday+Friday+Saturday+Sunday = 0): EXIT(4); //Thursday
        (Friday <> 0) AND (Monday+Tuesday+Wednesday+Thursday+Saturday+Sunday = 0): EXIT(5); //Friday
        (Saturday <> 0) AND (Monday+Tuesday+Wednesday+Thursday+Friday+Sunday = 0): EXIT(6); //Saturday
        (Sunday <> 0) AND (Monday+Tuesday+Wednesday+Thursday+Friday+Saturday = 0): EXIT(7); //Sunday
      END;
      EXIT(7);
    END;

    PROCEDURE GetFirstFreeLineNo@1100528307() : Integer;
    VAR
      SiteMngmntHoursLine@1100528300 : Record 11012361;
      CurrLineNo@1100528301 : Integer;
    BEGIN
      CurrLineNo := "Line No.";
      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.SETRANGE("Employee No.", "Employee No.");
      SiteMngmntHoursLine.SETFILTER("Line No.", '>%1', "Line No.");
      IF (SiteMngmntHoursLine.FINDSET) THEN BEGIN
        REPEAT
          IF (SiteMngmntHoursLine."Line No." - CurrLineNo > 1) THEN
            EXIT(CurrLineNo + 1);
          CurrLineNo := SiteMngmntHoursLine."Line No.";
        UNTIL (SiteMngmntHoursLine.NEXT = 0);
      END;
      EXIT(CurrLineNo + 1);
    END;

    PROCEDURE GetLastLineNo@1100528303() : Integer;
    VAR
      SiteMngmntHoursLine@1100528300 : Record 11012361;
    BEGIN
      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Supplying Company", "Supplying Company");
      SiteMngmntHoursLine.SETRANGE("Employee No.", "Employee No.");
      IF (SiteMngmntHoursLine.FINDLAST) THEN
        EXIT(SiteMngmntHoursLine."Line No.");
      EXIT(0);
    END;

    PROCEDURE GetEmployeeName@1100528304() : Text[100];
    VAR
      Employee@1100528300 : Record 5200;
    BEGIN
      IF (Employee.GET("Employee No.")) THEN
        EXIT(Employee."Full Name");
      EXIT('');
    END;

    PROCEDURE CheckProjectElement@1100525016(CheckElementValue@1100525001 : Boolean);
    VAR
      Job@1100525000 : Record 11072003;
    BEGIN
      IF (NOT CheckElementValue) THEN //called from a Web Service
        EXIT;
      IF (Type <> Type::Project) THEN
        EXIT;
      IF (NOT Job.GET("Object No.")) THEN
        EXIT;
      IF (GUIALLOWED) AND (Job."Posting Element Mandatory") AND ("Total Line" <> 0) AND (Element = '') THEN
        FIELDERROR(Element);
    END;

    LOCAL PROCEDURE IsExternalEmployee@1100528507() : Boolean;
    VAR
      Employee@1100528500 : Record 5200;
    BEGIN
      //DP010101
      IF NOT Employee.GET("Employee No.") THEN
        EXIT;

      EXIT(Employee.External);
    END;

    PROCEDURE CheckLinesBeforeApproval@1100528200() : Boolean;
    VAR
      SiteMngmntHoursSetup@1100528400 : Record 11012355;
      Job@1100529500 : Record 11072003;
      HumanResourcesSetup@1100528200 : Record 5218;
    BEGIN
      SiteMngmntHoursSetup.GET;
      IF (FINDSET(TRUE)) THEN BEGIN
        REPEAT
          IF (Status <> Status::Open) AND
             (Status <> Status::Released) AND
             (Status <> Status::Rejected)
          THEN
            FIELDERROR(Status);

          CASE Type OF
            Type::Plant,
            Type::UnmannedPlant: BEGIN
              IF Type = Type::Plant THEN BEGIN
                IF ("Receiving Company" <> '') THEN
                  HumanResourcesSetup.CHANGECOMPANY("Receiving Company");
                HumanResourcesSetup.GET;

                IF (HumanResourcesSetup."Salary Application" IN
                  [HumanResourcesSetup."Salary Application"::"LOSA-CTB",
                   HumanResourcesSetup."Salary Application"::"LOSA-Kraan",
                   HumanResourcesSetup."Salary Application"::"LOSA-Cobra"])
                THEN
                  TESTFIELD("Cost Object");
              END;

              IF "Component Type" = "Component Type"::Expenses THEN
                TESTFIELD("Cost Object");
            END;
            Type::Project,
            Type::Service:
              TESTFIELD("Cost Object");
            Type::Indirect: BEGIN
              IF SiteMngmntHoursSetup."Cost Object By Indirect Lines" THEN
                TESTFIELD("Cost Object");
            END;
          END;

          CASE Type OF
            Type::Project:
              BEGIN
                Job.CHANGECOMPANY("Receiving Company");
                IF Job.GET("Object No.") THEN
                  IF (Job."Posting Element Mandatory") AND ("Total Line" <> 0) THEN
                    TESTFIELD(Element);
              END;
          END;
          MODIFY;
        UNTIL (NEXT = 0);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE ValidateAdditionalCost@1100528205();
    VAR
      CostCompRec@1100525001 : Record 11012012;
      SaveCostComp@1100525000 : Text[30];
    BEGIN
      TESTFIELD(Type, Type::Service);
      TESTFIELD("Object No.");

      SaveCostComp := "Cost Component";

      IF CurrFieldNo <> FIELDNO("Additional Cost (Service)") THEN EXIT;

      CostCompRec.CHANGECOMPANY("Receiving Company");
      IF CostCompRec.GET(SaveCostComp) THEN BEGIN
         "Cost Component" := SaveCostComp;
         IF ("Additional Cost (Service)" = TRUE) THEN BEGIN
           IF (CostCompRec."Cost Component (Add.Cost)" <> '') THEN
             "Cost Component" := CostCompRec."Cost Component (Add.Cost)";
         END ELSE BEGIN
           CostCompRec.SETRANGE("Cost Component (Add.Cost)", SaveCostComp);
           IF CostCompRec.FINDSET THEN BEGIN
             REPEAT
               IF (CostCompRec."Cost Component (Add.Cost)" = SaveCostComp) THEN
                 "Cost Component" := CostCompRec.Code;
             UNTIL CostCompRec.NEXT = 0;
           END;
         END;
      END;
    END;

    PROCEDURE ValidateCostComponent@1100528201();
    VAR
      CostCompRec@1100525000 : Record 11012012;
      CostCompRec2@1100525001 : Record 11012012;
    BEGIN
      IF CurrFieldNo <> FIELDNO("Cost Component") THEN EXIT;

      CostCompRec.CHANGECOMPANY("Receiving Company");
      CostCompRec2.CHANGECOMPANY("Receiving Company");
      IF CostCompRec.GET("Cost Component") THEN BEGIN
        IF CostCompRec."Additional Cost (Service)" THEN BEGIN
          CostCompRec2.SETRANGE("Cost Component (Add.Cost)", "Cost Component");
          IF NOT CostCompRec2.FINDFIRST THEN EXIT;
        END ELSE BEGIN
          IF CostCompRec."Cost Component (Add.Cost)" = '' THEN EXIT;
        END;
        VALIDATE("Additional Cost (Service)", CostCompRec."Additional Cost (Service)");
      END;
    END;

    PROCEDURE LookupCostComponent@1100528206(EditableMode@1210190000 : Boolean);
    VAR
      CostComponent@1100525000 : Record 11012012;
    BEGIN
      CostComponent.CHANGECOMPANY("Receiving Company");
      CostComponent.Code := "Cost Component";
      IF PAGE.RUNMODAL(0, CostComponent) = ACTION::LookupOK THEN BEGIN
        IF EditableMode AND (CostComponent.Code <> '') THEN
          VALIDATE("Cost Component", CostComponent.Code);
      END;
    END;

    PROCEDURE CheckCostCompServOrderType@1100485018(CostType@1100528200 : Option);
    VAR
      lvCostCompRec@1100485000 : Record 11012012;
    BEGIN
      IF Type = Type::Service THEN
        lvCostCompRec.CheckDefaultCostComponent("Object No.", "Cost Component", GetReceivingCompany, CostType,
          "Additional Cost (Service)");
    END;

    LOCAL PROCEDURE FillServiceLocation@1100528222();
    VAR
      ServiceOrder@1100528200 : Record 11012823;
    BEGIN
      "Service Location No." := '';
      IF Type = Type::Service THEN
        IF "Object No." <> '' THEN BEGIN
          ServiceOrder.CHANGECOMPANY(GetReceivingCompany);
          ServiceOrder.GET("Object No.");
          "Service Location No." := ServiceOrder."Service Location No.";
        END;
    END;

    PROCEDURE FromTimeToDuration@1100485008();
    VAR
      lvDuration@1100485000 : Duration;
    BEGIN
      IF ("Time From" <> 0T) AND ("Time Until" <> 0T) THEN BEGIN
        lvDuration := "Time Until" - "Time From";
        IF "Time Until" < "Time From" THEN
          lvDuration := (24 * 3600000) + lvDuration;  //* lvDuration is negative
        VALIDATE(Duration, lvDuration);
      END;
    END;

    PROCEDURE FromDurationToHours@1100485006(lDuration@1100485000 : Duration) Hours : Decimal;
    BEGIN
      Hours := lDuration / 3600000;  //* Duration in msec, so divide by 1000 * 60 * 60
      Hours := ROUND(Hours,0.001); //C036062
    END;

    LOCAL PROCEDURE CheckServiceOrderType@1100529708() : Boolean;
    VAR
      SiteMngmntHoursObjects@1100529700 : Record 11012359;
    BEGIN
      IF "Receiving Company" <> '' THEN
        SiteMngmntHoursObjects.SETRANGE(Company, "Receiving Company");
      SiteMngmntHoursObjects.SETRANGE(Type, SiteMngmntHoursObjects.Type::"Service Order");
      SiteMngmntHoursObjects.SETRANGE(Code, "Object No.");
      EXIT(SiteMngmntHoursObjects.FINDSET)
    END;

    PROCEDURE CheckLeave@1100527901();
    VAR
      WageComponent@1100527901 : Record 11012014;
      SiteMngmntHoursLine@1100527902 : Record 11012361;
      LeaveTypeTotal@1100527900 : Decimal;
    BEGIN
      IF WageComponent.GET("Wage Component") THEN BEGIN
        IF NOT WageComponent."Negative Balance Not Allowed" THEN
          EXIT;

        LeaveTypeTotal := GetLeaveTypeTotal;

        SiteMngmntHoursLine.SETRANGE(Year,Year);
        SiteMngmntHoursLine.SETRANGE(Week,Week);
        SiteMngmntHoursLine.SETRANGE("Employee No.","Employee No.");
        SiteMngmntHoursLine.SETRANGE("Supplying Company","Supplying Company");
        SiteMngmntHoursLine.SETRANGE("Wage Component","Wage Component");
        SiteMngmntHoursLine.CALCSUMS("Total Line");

        IF SiteMngmntHoursLine."Total Line" > LeaveTypeTotal THEN
          ERROR(Text015,SiteMngmntHoursLine."Total Line",LeaveTypeTotal,"Leave Type");
      END;
    END;

    PROCEDURE CheckProjectEmployee@1100527900();
    VAR
      ProjectEmplHourAccounting@1100527901 : Record 11229439;
    BEGIN
      IF (Type = Type::Project) AND ("Object No." <> '') THEN
        ProjectEmplHourAccounting.CheckProjectEmployee("Object No.", GetReceivingCompany, "Employee No.");
    END;

    PROCEDURE ExpensesPerDay@1100528400() : Boolean;
    VAR
      SiteMngmntHoursSetup@1100528400 : Record 11012355;
    BEGIN
      IF NOT SiteMngmntHoursSetup.GET THEN
        EXIT(FALSE);

      EXIT(SiteMngmntHoursSetup."Expenses per Day");
    END;

    PROCEDURE CheckIfNotExpensesPerDay@1100528421();
    VAR
      SiteMngmntHoursSetup@1100528400 : Record 11012355;
    BEGIN
      IF NOT SiteMngmntHoursSetup.GET THEN
        EXIT;

      SiteMngmntHoursSetup.TESTFIELD("Expenses per Day", FALSE);
    END;

    PROCEDURE ResourceRequestDescription@1100527305() : Text;
    VAR
      ResourceRequest@1100527300 : Record 11124901;
    BEGIN
      IF "Resource Request No." <> '' THEN BEGIN
        ResourceRequest.CHANGECOMPANY("Resource Req. Receiv. Company");
        IF ResourceRequest.GET("Resource Request No.") THEN
          EXIT(ResourceRequest.Description);
      END;
      EXIT('');
    END;

    PROCEDURE CheckProjectElementBlockedPerWeek@1100527701();
    VAR
      SiteMngmntHoursCodes@1100527701 : Record 11012358;
    BEGIN
      IF NOT SiteMngmntHoursCodes.GET("Receiving Company",SiteMngmntHoursCodes.Type::Element,"Object No.",Element) THEN
        EXIT;

      IF SiteMngmntHoursCodes."Block Outside Date Range" THEN BEGIN
        IF Monday <> 0 THEN
          CheckProjectElementBlockedPerDay(DWY2DATE(1,Week,Year),SiteMngmntHoursCodes);
        IF Tuesday <> 0 THEN
          CheckProjectElementBlockedPerDay(DWY2DATE(2,Week,Year),SiteMngmntHoursCodes);
        IF Wednesday <> 0 THEN
          CheckProjectElementBlockedPerDay(DWY2DATE(3,Week,Year),SiteMngmntHoursCodes);
        IF Thursday <> 0 THEN
          CheckProjectElementBlockedPerDay(DWY2DATE(4,Week,Year),SiteMngmntHoursCodes);
        IF Friday <> 0 THEN
          CheckProjectElementBlockedPerDay(DWY2DATE(5,Week,Year),SiteMngmntHoursCodes);
        IF Saturday <> 0 THEN
          CheckProjectElementBlockedPerDay(DWY2DATE(6,Week,Year),SiteMngmntHoursCodes);
        IF Sunday <> 0 THEN
          CheckProjectElementBlockedPerDay(DWY2DATE(7,Week,Year),SiteMngmntHoursCodes);
      END;
    END;

    PROCEDURE CheckProjectElementBlockedPerDay@1100527702(TestDate@1100527700 : Date;SiteMngmntHoursCodes@1100527701 : Record 11012358);
    BEGIN
      WITH SiteMngmntHoursCodes DO BEGIN
        IF ("Starting Date" <> 0D) AND ("Ending Date" <> 0D) THEN BEGIN
          IF "Ending Date" < TestDate THEN
            ERROR(Text016,Element,"Starting Date","Ending Date");
          IF "Starting Date" > TestDate THEN
            ERROR(Text016,Element,"Starting Date","Ending Date");
        END;

        IF ("Starting Date" = 0D) AND ("Ending Date" <> 0D) THEN
          IF "Ending Date" < TestDate THEN
            ERROR(Text018,Element,"Ending Date");
        IF ("Starting Date" <> 0D) AND ("Ending Date" = 0D) THEN
          IF "Starting Date" > TestDate THEN
            ERROR(Text017,Element,"Starting Date");
      END;
    END;

    LOCAL PROCEDURE TestStatusOpen@1100485011();
    VAR
      SiteMngmntHoursHeader@1100527350 : Record 11012360;
    BEGIN
      IF CURRENTCOMPANY <> COMPANYNAME THEN
        SiteMngmntHoursHeader.CHANGECOMPANY(CURRENTCOMPANY);
      IF NOT SiteMngmntHoursHeader.GET(Year,Week,"Employee No.") THEN
        EXIT;

      IF (Status <> Status::Open) AND (Status <> Status::Rejected) THEN
        SiteMngmntHoursHeader.TESTFIELD(Status, SiteMngmntHoursHeader.Status::Open);
    END;

    LOCAL PROCEDURE DetermineTryOut@1100527352() : Code[20];
    VAR
      TryOutSuccessor@1210190000 : Record 11012761;
      FPSLicenseManagement@1100527350 : Codeunit 11229289;
    BEGIN
      TryOutSuccessor.CHANGECOMPANY("Receiving Company");
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(TryOutSuccessor) THEN BEGIN
        TryOutSuccessor.CHANGECOMPANY(COMPANYNAME);
        TryOutSuccessor.SETCURRENTKEY("Estimate No.");
        TryOutSuccessor.SETRANGE("Estimate No.", "Estimate No.");
        IF TryOutSuccessor.FINDFIRST THEN
          EXIT(TryOutSuccessor."Try-out No.");
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE GetReceivingCompany@1100529600() : Text[50];
    BEGIN
      IF "Receiving Company" <> '' THEN
        EXIT("Receiving Company");
      EXIT(CURRENTCOMPANY);
    END;

    PROCEDURE CheckProjectStatus@1100529000(ProjectNo@1100529000 : Code[20];ProjectCompany@1100529001 : Text;ErrorMode@1100529005 : Boolean) : Boolean;
    VAR
      ProjectSetup@1100529002 : Record 315;
      Project@1100529003 : Record 11072003;
      ExtraStepsLimitation@1100529004 : Integer;
    BEGIN
      ProjectSetup.CHANGECOMPANY(ProjectCompany);
      Project.CHANGECOMPANY(ProjectCompany);
      ProjectSetup.GET;
      Project.GET(ProjectNo);
      ExtraStepsLimitation := 1;
      IF (ProjectSetup."Provisions at Closure") THEN
        ExtraStepsLimitation := -1;
      IF ErrorMode THEN
        Project.CheckProjectStatus(ExtraStepsLimitation)
      ELSE
        EXIT(Project.CheckProjectStatusOK(ExtraStepsLimitation));
      EXIT(TRUE);
    END;

    PROCEDURE CheckCurrentOrGetFirstValidLineTemplateCode@1100525017();
    VAR
      HourLineTemplateManagement@1100525000 : Codeunit 11012025;
    BEGIN
      IF ("Line Template Code" = '') AND SkipDefaultTemplateCode THEN
        EXIT;
      IF (NOT HourLineTemplateManagement.IsLineTemplateCodeValid(Rec)) THEN BEGIN
        IF ("Line Template Code" <> '') THEN
          "Line Template Code" := HourLineTemplateManagement.GetFirstValidLineTemplateCode(Rec);
      END;
      IF ("Line Template Code" <> '') THEN
        HourLineTemplateManagement.GetDefaultsSiteMgtLine(Rec);
    END;

    PROCEDURE SetSkipDefaultTemplateCode@1100529001();
    BEGIN
      SkipDefaultTemplateCode := TRUE;
    END;

    LOCAL PROCEDURE "**ORANGO"@1100285111();
    BEGIN
      //180706 #15536
    END;

    LOCAL PROCEDURE CheckLines@1100285107();
    VAR
      CheckHourLine@1100285100 : Codeunit 11012003;
      ErrMsg@1100285102 : Text[1024];
      SiteMngmntHoursLine@1100285103 : Record 11012361;
    BEGIN
      //180706 #15536
      SiteMngmntHoursLine.SETRANGE(Year, Year);
      SiteMngmntHoursLine.SETRANGE(Week, Week);
      SiteMngmntHoursLine.SETRANGE("Employee No.", "Employee No.");
      IF SiteMngmntHoursLine.FINDSET THEN
      REPEAT
        IF ("Wage Component" <> '') THEN //#C012006.n
          CheckNormPostingHours(SiteMngmntHoursLine, TRUE, FALSE, ErrMsg);
      UNTIL SiteMngmntHoursLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckNormHoursConsent@1100285109(HourLine@1100285100 : Record 11012361) : Boolean;
    VAR
      LvHourLines@1100285102 : Record 11012361;
      ErrMsg@1100285101 : Text[1024];
    BEGIN
      //180706 #15536
      LvHourLines.SETRANGE(Year,HourLine.Year);
      LvHourLines.SETRANGE(Week,HourLine.Week);
      LvHourLines.SETRANGE("Employee No.",HourLine."Employee No.");
      IF LvHourLines.FINDFIRST THEN
        IF ("Wage Component" <> '') THEN //#C012006.n
          EXIT(CheckNormPostingHours(LvHourLines, TRUE, FALSE, ErrMsg));
      EXIT(TRUE);
    END;

    PROCEDURE CheckNormPostingHours@1100528701(SiteMngmntHoursLine@1100528700 : Record 11012361;CheckBeforePost@1100528703 : Boolean;ReturnErrMsg@1100528701 : Boolean;VAR ErrMsg@1100528702 : Text[1024]) : Boolean;
    BEGIN
      //180706 #15536
      // Function can be called form outside the codeunit
      SiteMngmntHoursSetup.GET;

      CASE SiteMngmntHoursSetup."Norm Check Posting Hours" OF
        SiteMngmntHoursSetup."Norm Check Posting Hours"::"Per week":
          EXIT(CheckNormPostingHoursPerWeek(SiteMngmntHoursLine, CheckBeforePost, ReturnErrMsg, ErrMsg));

         SiteMngmntHoursSetup."Norm Check Posting Hours"::"Per day":
          EXIT(CheckNormPostingHoursPerDay(SiteMngmntHoursLine, ReturnErrMsg, ErrMsg));

         SiteMngmntHoursSetup."Norm Check Posting Hours"::"All days per Week":
           EXIT(CheckNormPostingHoursAllDaysPerWeek(SiteMngmntHoursLine, ReturnErrMsg, ErrMsg));
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CheckNormPostingHoursPerWeek@1100528702(SiteMngmntHoursLine@1100528700 : Record 11012361;CheckBeforePost@1100528710 : Boolean;ReturnErrMsg@1100528708 : Boolean;VAR ErrMsg@1100528709 : Text[1024]) : Boolean;
    VAR
      Employee@1100528701 : Record 5200;
      HoursEmployeeOtherCompanies@1100528707 : Decimal;
      TotalHours@1100528702 : Decimal;
      StartDate@1100528703 : Date;
      EndDate@1100528704 : Date;
      MonthIn@1100528705 : Integer;
      MonthOut@1100528706 : Integer;
      ProjSetup@1100285100 : Record 315;
      HumanResourcesSetup@1100583000 : Record 5218;
    BEGIN
      //180706 #15536
      // Function can be called form outside the codeunit
      IF SiteMngmntHoursLine."Component Type" <> SiteMngmntHoursLine."Component Type"::Hours THEN
        EXIT(TRUE);
      IF SiteMngmntHoursLine."Employee No." = '' THEN
        EXIT(TRUE);

      IF SiteMngmntHoursLine."Supplying Company" <> '' THEN
        Employee.CHANGECOMPANY(SiteMngmntHoursLine."Supplying Company");
      IF SiteMngmntHoursLine."Employee No." <> '' THEN
        Employee.GET(SiteMngmntHoursLine."Employee No.");

      IF NOT ((Employee."Account Hours" = Employee."Account Hours"::"Required according to Norm") AND
              (NOT Employee.External))
      THEN
        EXIT(TRUE);

      ProjSetup.GET;
      HumanResourcesSetup.GET;

      SiteMngmntHoursLine.CALCFIELDS("Norm Hours");//, "Posted Norm Hours");
      // IF SiteMngmntHoursLine."Supplying Company" <> '' THEN
      //  SiteMngmntHoursLine."Posted Normal Hours" := 0;

      // HoursEmployeeOtherCompanies := GetHoursOtherCompanies(SiteMngmntHoursLine);

      TotalHours := SiteMngmntHoursLine."Norm Hours";// + SiteMngmntHoursLine."Posted Normal Hours" + HoursEmployeeOtherCompanies;
      TotalHours := ROUND(TotalHours, 0.01, '=');    //C007973.n

      IF CheckBeforePost THEN BEGIN
        IF (TotalHours <> 0) AND (Employee."Norm Hours" <> TotalHours) THEN BEGIN
          IF (NOT HumanResourcesSetup."Soft Norm Check") OR (Employee."Norm Hours" < TotalHours) THEN BEGIN
            IF ReturnErrMsg THEN BEGIN
              ErrMsg := STRSUBSTNO(Text000, TotalHours, Employee."Norm Hours");
              EXIT(FALSE);
            END ELSE
              SiteMngmntHoursLine.FIELDERROR(
                "Employee No.", STRSUBSTNO(Text000, TotalHours, Employee."Norm Hours"));
          END ELSE BEGIN
            StartDate := DWY2DATE(1, SiteMngmntHoursLine.Week, SiteMngmntHoursLine.Year);
            EndDate := DWY2DATE(7, SiteMngmntHoursLine.Week, SiteMngmntHoursLine.Year);
            MonthIn := DATE2DMY(StartDate, 2);
            MonthOut := DATE2DMY(EndDate, 2);
            IF MonthIn = MonthOut THEN BEGIN
              IF ReturnErrMsg THEN BEGIN
                ErrMsg := STRSUBSTNO(Text000, TotalHours, Employee."Norm Hours");
                EXIT(FALSE);
              END ELSE
                SiteMngmntHoursLine.FIELDERROR(
                  "Employee No.", STRSUBSTNO(Text000, TotalHours, Employee."Norm Hours"));
      //      END ELSE BEGIN
      //        IF gvGiveMessage THEN BEGIN
      //          MESSAGE(Text005);
      //          gvGiveMessage := FALSE;
      //        END;
            END;
          END;
        END;
      END ELSE BEGIN
        IF Employee."Norm Hours" <> TotalHours THEN
          IF ReturnErrMsg THEN BEGIN
            ErrMsg := STRSUBSTNO(Text11128000, TotalHours, Employee."Norm Hours");
            EXIT(FALSE);
          END ELSE
            SiteMngmntHoursLine.FIELDERROR(
              "Employee No.", STRSUBSTNO(Text11128000, TotalHours, Employee."Norm Hours"));
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CheckNormPostingHoursPerDay@1100528700(SiteMngmntHoursLine@1100528700 : Record 11012361;ReturnErrMsg@1100528709 : Boolean;VAR ErrMsg@1100528710 : Text[1024]) : Boolean;
    VAR
      Employee@1100528708 : Record 5200;
      PostedHourLine@1100528704 : Record 11012085;
      DayOfWeek@1100528701 : Integer;
      NormalHours@1100528702 : Decimal;
      PostedNormalHours@1100528703 : Decimal;
      NormHours@1100528705 : Decimal;
      TotalHours@1100528706 : Decimal;
      HoursEmployeeOtherCompanies@1100528707 : Decimal;
      Text001@1100285000 : TextConst 'ENU=Number of hours (%1) is not equal to norm hours (%2) for Employee (%3), date: (%4);NOR=Antall timer (%1) stemmer ikke i forhold til Normtid (%2) for Ansatt (%3), Dato: (%4);SVE=Antal timmar (%1) Ñr inte lika med normtid (%2) fîr anstÑlld (%3), datum: (%4)';
      DateWeekend@1100285001 : Date;
    BEGIN
      //180706 #15536
      // Function can be called form outside the codeunit
      IF SiteMngmntHoursLine."Component Type" <> SiteMngmntHoursLine."Component Type"::Hours THEN
        EXIT(TRUE);
      IF SiteMngmntHoursLine."Employee No." = '' THEN
        EXIT(TRUE);

      IF SiteMngmntHoursLine."Supplying Company" <> '' THEN
        Employee.CHANGECOMPANY(SiteMngmntHoursLine."Supplying Company");
      IF SiteMngmntHoursLine."Employee No." <> '' THEN
        Employee.GET(SiteMngmntHoursLine."Employee No.");

      IF NOT ((Employee."Account Hours" = Employee."Account Hours"::"Required according to Norm") AND
              (NOT Employee.External))
      THEN
        EXIT(TRUE);

      SiteMngmntHoursLine.CALCFIELDS(
        "Total Monday", "Total Tuesday", "Total Wednesday",
        "Total Thursday", "Total Friday", "Total Saturday", "Total Sunday");

      FOR DayOfWeek := 1 TO 7 DO BEGIN
        CASE DayOfWeek OF
          1 : NormalHours := SiteMngmntHoursLine."Total Monday";
          2 : NormalHours := SiteMngmntHoursLine."Total Tuesday";
          3 : NormalHours := SiteMngmntHoursLine."Total Wednesday";
          4 : NormalHours := SiteMngmntHoursLine."Total Thursday";
          5 : NormalHours := SiteMngmntHoursLine."Total Friday";
          6 : NormalHours := SiteMngmntHoursLine."Total Saturday";
          7 : NormalHours := SiteMngmntHoursLine."Total Sunday";
        END;

        PostedNormalHours := 0;
        IF (SiteMngmntHoursLine."Supplying Company" = '') OR (SiteMngmntHoursLine."Supplying Company" = COMPANYNAME) THEN BEGIN
          PostedHourLine.SETRANGE(Year, SiteMngmntHoursLine.Year);
          PostedHourLine.SETRANGE(Week, SiteMngmntHoursLine.Week);
          PostedHourLine.SETRANGE("Employee No.", SiteMngmntHoursLine."Employee No.");
          IF PostedHourLine.FINDFIRST THEN BEGIN
            PostedHourLine.CALCFIELDS(
              "Total Monday", "Total Tuesday", "Total Wednesday",
              "Total Thursday", "Total Friday", "Total Saturday", "Total Sunday");
            CASE DayOfWeek OF
              1 : PostedNormalHours := PostedHourLine."Total Monday";
              2 : PostedNormalHours := PostedHourLine."Total Tuesday";
              3 : PostedNormalHours := PostedHourLine."Total Wednesday";
              4 : PostedNormalHours := PostedHourLine."Total Thursday";
              5 : PostedNormalHours := PostedHourLine."Total Friday";
              6 : PostedNormalHours := PostedHourLine."Total Saturday";
              7 : PostedNormalHours := PostedHourLine."Total Sunday";
            END;
          END;
        END;

      //  HoursEmployeeOtherCompanies := GetHoursOtherCompaniesPerDay(SiteMngmntHoursLine, DayOfWeek);

        TotalHours := NormalHours + PostedNormalHours + HoursEmployeeOtherCompanies;
        TotalHours := ROUND(TotalHours, 0.01, '=');    //C007973.n

        //>> I047 ITERO 130917
        //NormHours := GetNormHoursPerDay(SiteMngmntHoursLine."Employee No.", DayOfWeek,DWY2DATE(DayOfWeek, SiteMngmntHoursLine.Week, SiteMngmntHoursLine.Year),SiteMngmntHoursLine."Supplying Company");
        NormHours := GetNormHoursPerDay(SiteMngmntHoursLine."Employee No.", DayOfWeek, SiteMngmntHoursLine.Year, SiteMngmntHoursLine.Week);
        //<<

        IF (TotalHours <> 0) AND (NormHours <> TotalHours) THEN
          IF ReturnErrMsg THEN BEGIN
            ErrMsg := STRSUBSTNO(Text11128008,
              //NormHours, TotalHours,
              TotalHours, NormHours,
              SiteMngmntHoursLine.FIELDCAPTION("Employee No."),
              SiteMngmntHoursLine."Employee No.",
              DWY2DATE(DayOfWeek, SiteMngmntHoursLine.Week, SiteMngmntHoursLine.Year));
            EXIT(FALSE);
          END ELSE
            ERROR(Text11128008,
              //NormHours, TotalHours,
              TotalHours, NormHours,
              SiteMngmntHoursLine.FIELDCAPTION("Employee No."),
              SiteMngmntHoursLine."Employee No.",
              DWY2DATE(DayOfWeek, SiteMngmntHoursLine.Week, SiteMngmntHoursLine.Year))
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CheckNormPostingHoursAllDaysPerWeek@1100285500(SiteMngmntHoursLine@1100528700 : Record 11012361;ReturnErrMsg@1100528709 : Boolean;VAR ErrMsg@1100528710 : Text[1024]) : Boolean;
    VAR
      Employee@1100528708 : Record 5200;
      PostedHourLine@1100528704 : Record 11012085;
      DayOfWeek@1100528701 : Integer;
      NormalHours@1100528702 : Decimal;
      PostedNormalHours@1100528703 : Decimal;
      NormHours@1100528705 : Decimal;
      TotalHours@1100528706 : Decimal;
      HoursEmployeeOtherCompanies@1100528707 : Decimal;
      Text001@1100285000 : TextConst 'ENU=Number of hours (%1) is not equal to norm hours (%2) for Employee (%3), date: (%4);NOR=Antall timer (%1) stemmer ikke i forhold til Normtid (%2) for Ansatt (%3), Dato: (%4);SVE=Antal timmar (%1) Ñr inte lika med normtid (%2) fîr anstÑlld (%3), datum: (%4)';
      DateWeekend@1100285001 : Date;
      lvSiteMngmntHoursLine@1100285500 : Record 11012361;
      lvWageComponent@1100285100 : Record 11012014;
    BEGIN
      //180706 #15536
      // Function can be called form outside the codeunit
      IF SiteMngmntHoursLine."Component Type" <> SiteMngmntHoursLine."Component Type"::Hours THEN
        EXIT(TRUE);

      IF SiteMngmntHoursLine."Supplying Company" <> '' THEN
        Employee.CHANGECOMPANY(SiteMngmntHoursLine."Supplying Company");
      IF SiteMngmntHoursLine."Employee No." <> '' THEN
        Employee.GET(SiteMngmntHoursLine."Employee No.");

      IF NOT ((Employee."Account Hours" = Employee."Account Hours"::"Required according to Norm") AND
              (NOT Employee.External))
      THEN
        EXIT(TRUE);

      SiteMngmntHoursLine.CALCFIELDS(
        "Total Monday"  , "Total Tuesday", "Total Wednesday",
        "Total Thursday", "Total Friday" , "Total Saturday" , "Total Sunday");

      CLEAR(lvSiteMngmntHoursLine);
      lvSiteMngmntHoursLine.SETRANGE(Year             , SiteMngmntHoursLine.Year);
      lvSiteMngmntHoursLine.SETRANGE(Week             , SiteMngmntHoursLine.Week);
      lvSiteMngmntHoursLine.SETRANGE("Employee No."   , SiteMngmntHoursLine."Employee No.");
      lvSiteMngmntHoursLine.SETRANGE(Overtime         , FALSE);

      FOR DayOfWeek := 1 TO 7 DO BEGIN
        NormalHours := 0;
        CASE DayOfWeek OF
          1 : BEGIN
                //NormalHours := SiteMngmntHoursLine."Total Monday";
                IF SiteMngmntHoursLine."Total Monday" <> 0 THEN
                   NormalHours := SiteMngmntHoursLine."Total Monday"
                ELSE BEGIN
                  IF lvSiteMngmntHoursLine.FINDSET(FALSE) THEN REPEAT
                    IF lvWageComponent.GET(lvSiteMngmntHoursLine."Wage Component") THEN
                      IF lvWageComponent."Component Type" < lvWageComponent."Component Type"::Expenses THEN
                     NormalHours := NormalHours + lvSiteMngmntHoursLine.Monday;
                  UNTIL lvSiteMngmntHoursLine.NEXT = 0;
                END;
              END;
          2 : BEGIN
                //NormalHours := SiteMngmntHoursLine."Total Tuesday";
                IF SiteMngmntHoursLine."Total Tuesday"<> 0 THEN
                   NormalHours := SiteMngmntHoursLine."Total Tuesday"
                ELSE BEGIN
                  IF lvSiteMngmntHoursLine.FINDSET(FALSE) THEN REPEAT
                    IF lvWageComponent.GET(lvSiteMngmntHoursLine."Wage Component") THEN
                      IF lvWageComponent."Component Type" < lvWageComponent."Component Type"::Expenses THEN
                     NormalHours := NormalHours + lvSiteMngmntHoursLine.Tuesday;
                  UNTIL lvSiteMngmntHoursLine.NEXT = 0;
                END;
              END;
          3 : BEGIN
                //NormalHours := SiteMngmntHoursLine."Total Wednesday";
                IF SiteMngmntHoursLine."Total Wednesday" <> 0 THEN
                   NormalHours := SiteMngmntHoursLine."Total Wednesday"
                ELSE BEGIN
                  IF lvSiteMngmntHoursLine.FINDSET(FALSE) THEN REPEAT
                    IF lvWageComponent.GET(lvSiteMngmntHoursLine."Wage Component") THEN
                      IF lvWageComponent."Component Type" < lvWageComponent."Component Type"::Expenses THEN
                     NormalHours := NormalHours + lvSiteMngmntHoursLine.Wednesday;
                  UNTIL lvSiteMngmntHoursLine.NEXT = 0;
                END;
              END;
          4 : BEGIN
                //NormalHours := SiteMngmntHoursLine."Total Thursday";
                IF SiteMngmntHoursLine."Total Thursday" <> 0 THEN
                   NormalHours := SiteMngmntHoursLine."Total Thursday"
                ELSE BEGIN
                  IF lvSiteMngmntHoursLine.FINDSET(FALSE) THEN REPEAT
                    IF lvWageComponent.GET(lvSiteMngmntHoursLine."Wage Component") THEN
                      IF lvWageComponent."Component Type" < lvWageComponent."Component Type"::Expenses THEN
                     NormalHours := NormalHours + lvSiteMngmntHoursLine.Thursday;
                  UNTIL lvSiteMngmntHoursLine.NEXT = 0;
                END;
              END;
          5 : BEGIN
                //NormalHours := SiteMngmntHoursLine."Total Friday";
                IF SiteMngmntHoursLine."Total Friday" <> 0 THEN
                   NormalHours := SiteMngmntHoursLine."Total Friday"
                ELSE BEGIN
                  IF lvSiteMngmntHoursLine.FINDSET(FALSE) THEN REPEAT
                    IF lvWageComponent.GET(lvSiteMngmntHoursLine."Wage Component") THEN
                      IF lvWageComponent."Component Type" < lvWageComponent."Component Type"::Expenses THEN
                     NormalHours := NormalHours + lvSiteMngmntHoursLine.Friday;
                  UNTIL lvSiteMngmntHoursLine.NEXT = 0;
                END;
              END;
          6 : BEGIN
                //NormalHours := SiteMngmntHoursLine."Total Saturday";
                IF SiteMngmntHoursLine."Total Saturday" <> 0 THEN
                   NormalHours := SiteMngmntHoursLine."Total Saturday"
                ELSE BEGIN
                  IF lvSiteMngmntHoursLine.FINDSET(FALSE) THEN REPEAT
                    IF lvWageComponent.GET(lvSiteMngmntHoursLine."Wage Component") THEN
                      IF lvWageComponent."Component Type" < lvWageComponent."Component Type"::Expenses THEN
                     NormalHours := NormalHours + lvSiteMngmntHoursLine.Saturday;
                  UNTIL lvSiteMngmntHoursLine.NEXT = 0;
                END;
              END;
          7 : BEGIN
                //NormalHours := SiteMngmntHoursLine."Total Sunday";
                IF SiteMngmntHoursLine."Total Sunday" <> 0 THEN
                   NormalHours := SiteMngmntHoursLine."Total Sunday"
                ELSE BEGIN
                  IF lvSiteMngmntHoursLine.FINDSET(FALSE) THEN REPEAT
                    IF lvWageComponent.GET(lvSiteMngmntHoursLine."Wage Component") THEN
                      IF lvWageComponent."Component Type" < lvWageComponent."Component Type"::Expenses THEN
                     NormalHours := NormalHours + lvSiteMngmntHoursLine.Sunday;
                  UNTIL lvSiteMngmntHoursLine.NEXT = 0;
                END;
              END;
        END;//Case

        PostedNormalHours := 0;
        IF (SiteMngmntHoursLine."Supplying Company" = '') OR (SiteMngmntHoursLine."Supplying Company" = COMPANYNAME) THEN BEGIN
          PostedHourLine.SETRANGE(Year, SiteMngmntHoursLine.Year);
          PostedHourLine.SETRANGE(Week, SiteMngmntHoursLine.Week);
          PostedHourLine.SETRANGE("Employee No.", SiteMngmntHoursLine."Employee No.");
          IF PostedHourLine.FINDFIRST THEN BEGIN
            PostedHourLine.CALCFIELDS(
              "Total Monday", "Total Tuesday", "Total Wednesday",
              "Total Thursday", "Total Friday", "Total Saturday", "Total Sunday");
            CASE DayOfWeek OF
              1 : PostedNormalHours := PostedHourLine."Total Monday";
              2 : PostedNormalHours := PostedHourLine."Total Tuesday";
              3 : PostedNormalHours := PostedHourLine."Total Wednesday";
              4 : PostedNormalHours := PostedHourLine."Total Thursday";
              5 : PostedNormalHours := PostedHourLine."Total Friday";
              6 : PostedNormalHours := PostedHourLine."Total Saturday";
              7 : PostedNormalHours := PostedHourLine."Total Sunday";
            END;
          END;
        END;

      //  HoursEmployeeOtherCompanies := GetHoursOtherCompaniesPerDay(SiteMngmntHoursLine, DayOfWeek);

        TotalHours := NormalHours + PostedNormalHours + HoursEmployeeOtherCompanies;

        NormHours := GetNormHoursPerDay(SiteMngmntHoursLine."Employee No.", DayOfWeek, SiteMngmntHoursLine.Year, SiteMngmntHoursLine.Week);

        //IF (TotalHours <> 0) AND (NormHours <> TotalHours) THEN
        IF (NormHours <> TotalHours) THEN
          IF ReturnErrMsg THEN BEGIN
            ErrMsg := STRSUBSTNO(Text11128008,
              //NormHours, TotalHours,
              TotalHours, NormHours,
              SiteMngmntHoursLine.FIELDCAPTION("Employee No."),
              SiteMngmntHoursLine."Employee No.",
              DWY2DATE(DayOfWeek, SiteMngmntHoursLine.Week, SiteMngmntHoursLine.Year));
            EXIT(FALSE);
          END ELSE
            ERROR(Text11128008,
              //NormHours, TotalHours,
              TotalHours, NormHours,
              SiteMngmntHoursLine.FIELDCAPTION("Employee No."),
              SiteMngmntHoursLine."Employee No.",
              FORMAT(DWY2DATE(DayOfWeek, SiteMngmntHoursLine.Week, SiteMngmntHoursLine.Year)
                ,0,'<Year4>-<Month,2>-<Day,2> (<Weekday Text>)')        )
      //        DWY2DATE(DayOfWeek, SiteMngmntHoursLine.Week, SiteMngmntHoursLine.Year))
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetNormHoursPerDay@1100528717(EmployeeNo@1100528700 : Code[20];DayOfWeek@1100528701 : Integer;Year@1100528702 : Integer;Week@1100528703 : Integer) : Decimal;
    VAR
      EmployeeTimeTable@1100528704 : Record 11012923;
      SiteMngmntHoursLine@1100285000 : Record 11012361;
    BEGIN
      //180706 #15536
      SiteMngmntHoursLine.SETRANGE(Year,Year);
      SiteMngmntHoursLine.SETRANGE(Week,Week);
      SiteMngmntHoursLine.SETRANGE("Employee No.",EmployeeNo);
      IF SiteMngmntHoursLine.FINDSET THEN BEGIN
        CASE DayOfWeek OF
          1: EXIT(SiteMngmntHoursLine.GetNormHourMon);
          2: EXIT(SiteMngmntHoursLine.GetNormHourTue);
          3: EXIT(SiteMngmntHoursLine.GetNormHourWed);
          4: EXIT(SiteMngmntHoursLine.GetNormHourThu);
          5: EXIT(SiteMngmntHoursLine.GetNormHourFri);
          6: EXIT(SiteMngmntHoursLine.GetNormHourSat);
          7: EXIT(SiteMngmntHoursLine.GetNormHourSun);

        END;
      END;
    END;

    PROCEDURE GetNormHourMon@1100285001() NormHour : Decimal;
    VAR
      PersonalWorkSchedule@1100285000 : Record 11128051;
      WorkSchedule@1100285001 : Record 11128050;
      EmployeeTimeTable@1100285002 : Record 11012923;
    BEGIN
      //180706 #15536
      //4PSSE.I047 130910  Calculate norm hours monday-sunday
      IF Week <> 0 THEN BEGIN
        PersonalWorkSchedule.SETRANGE("Employee number","Employee No.");
        PersonalWorkSchedule.SETRANGE(Date,DWY2DATE(1,Week,Year));
        IF PersonalWorkSchedule.FINDSET THEN BEGIN
          NormHour:=PersonalWorkSchedule."Norm hours";
          EXIT(NormHour);
        END;

        WorkSchedule.SETRANGE(Date,DWY2DATE(1,Week,Year));
        IF WorkSchedule.FINDSET THEN BEGIN
          NormHour:=WorkSchedule."Norm Hours";

          EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
          //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(1,Week,Year));
          IF EmployeeTimeTable.FINDSET THEN BEGIN
           IF (EmployeeTimeTable.Monday <> 0) AND (EmployeeTimeTable.Monday < NormHour) THEN
              NormHour:=EmployeeTimeTable.Monday;
          END;
          EXIT(NormHour);
        END;

        EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
        //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(1,Week,Year));
        IF EmployeeTimeTable.FINDSET THEN BEGIN
          NormHour:=EmployeeTimeTable.Monday;
          EXIT(NormHour);
        END;
      END;
    END;

    PROCEDURE GetNormHourTue@1100285009() NormHour : Decimal;
    VAR
      PersonalWorkSchedule@1100285000 : Record 11128051;
      WorkSchedule@1100285001 : Record 11128050;
      EmployeeTimeTable@1100285002 : Record 11012923;
    BEGIN
      //4PSSE.I047
      IF Week <> 0 THEN BEGIN
        PersonalWorkSchedule.SETRANGE("Employee number","Employee No.");
        PersonalWorkSchedule.SETRANGE(Date,DWY2DATE(2,Week,Year));
        IF PersonalWorkSchedule.FINDSET THEN BEGIN
          NormHour:=PersonalWorkSchedule."Norm hours";
          EXIT(NormHour);
        END;

        WorkSchedule.SETRANGE(Date,DWY2DATE(2,Week,Year));
        IF WorkSchedule.FINDSET THEN BEGIN
          NormHour:=WorkSchedule."Norm Hours";

          EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
          //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(2,Week,Year));
          IF EmployeeTimeTable.FINDSET THEN BEGIN
           IF (EmployeeTimeTable.Tuesday <> 0) AND (EmployeeTimeTable.Tuesday < NormHour) THEN
              NormHour:=EmployeeTimeTable.Tuesday;
          END;

          EXIT(NormHour);
        END;

        EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
        //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(2,Week,Year));
        IF EmployeeTimeTable.FINDSET THEN BEGIN
          NormHour:=EmployeeTimeTable.Tuesday;
          EXIT(NormHour);
        END;
      END;
    END;

    PROCEDURE GetNormHourWed@1100285010() NormHour : Decimal;
    VAR
      PersonalWorkSchedule@1100285000 : Record 11128051;
      WorkSchedule@1100285001 : Record 11128050;
      EmployeeTimeTable@1100285002 : Record 11012923;
    BEGIN
      //180706 #15536
      //4PSSE.I047
      IF Week <> 0 THEN BEGIN
        PersonalWorkSchedule.SETRANGE("Employee number","Employee No.");
        PersonalWorkSchedule.SETRANGE(Date,DWY2DATE(3,Week,Year));
        IF PersonalWorkSchedule.FINDSET THEN BEGIN
          NormHour:=PersonalWorkSchedule."Norm hours";
          EXIT(NormHour);
        END;

        WorkSchedule.SETRANGE(Date,DWY2DATE(3,Week,Year));
        IF WorkSchedule.FINDSET THEN BEGIN
          NormHour:=WorkSchedule."Norm Hours";

          EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
          //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(3,Week,Year));
          IF EmployeeTimeTable.FINDSET THEN BEGIN
           IF (EmployeeTimeTable.Wednesday <> 0) AND (EmployeeTimeTable.Wednesday < NormHour) THEN
              NormHour:=EmployeeTimeTable.Wednesday;
          END;

          EXIT(NormHour);
        END;

        EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
        //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(3,Week,Year));
        IF EmployeeTimeTable.FINDSET THEN BEGIN
          NormHour:=EmployeeTimeTable.Wednesday;
          EXIT(NormHour);
        END;
      END;
    END;

    PROCEDURE GetNormHourThu@1100285011() NormHour : Decimal;
    VAR
      PersonalWorkSchedule@1100285000 : Record 11128051;
      WorkSchedule@1100285001 : Record 11128050;
      EmployeeTimeTable@1100285002 : Record 11012923;
    BEGIN
      //180706 #15536
      //4PSSE.I047
      IF Week <> 0 THEN BEGIN
        PersonalWorkSchedule.SETRANGE("Employee number","Employee No.");
        PersonalWorkSchedule.SETRANGE(Date,DWY2DATE(4,Week,Year));
        IF PersonalWorkSchedule.FINDSET THEN BEGIN
          NormHour:=PersonalWorkSchedule."Norm hours";
          EXIT(NormHour);
        END;

        WorkSchedule.SETRANGE(Date,DWY2DATE(4,Week,Year));
        IF WorkSchedule.FINDSET THEN BEGIN
          NormHour:=WorkSchedule."Norm Hours";

          EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
          //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(4,Week,Year));
          IF EmployeeTimeTable.FINDSET THEN BEGIN
           IF (EmployeeTimeTable.Thursday <> 0) AND (EmployeeTimeTable.Thursday < NormHour) THEN
              NormHour:=EmployeeTimeTable.Thursday;
          END;

          EXIT(NormHour);
        END;

        EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
        //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(4,Week,Year));
        IF EmployeeTimeTable.FINDSET THEN BEGIN
          NormHour:=EmployeeTimeTable.Thursday;
          EXIT(NormHour);
        END;
      END;
    END;

    PROCEDURE GetNormHourFri@1100285012() NormHour : Decimal;
    VAR
      PersonalWorkSchedule@1100285000 : Record 11128051;
      WorkSchedule@1100285001 : Record 11128050;
      EmployeeTimeTable@1100285002 : Record 11012923;
    BEGIN
      //180706 #15536
      //4PSSE.I047
      IF Week <> 0 THEN BEGIN
        PersonalWorkSchedule.SETRANGE("Employee number","Employee No.");
        PersonalWorkSchedule.SETRANGE(Date,DWY2DATE(5,Week,Year));
        IF PersonalWorkSchedule.FINDSET THEN BEGIN
          NormHour:=PersonalWorkSchedule."Norm hours";
          EXIT(NormHour);
        END;

        WorkSchedule.SETRANGE(Date,DWY2DATE(5,Week,Year));
        IF WorkSchedule.FINDSET THEN BEGIN
          NormHour:=WorkSchedule."Norm Hours";

          EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
          //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(5,Week,Year));
          IF EmployeeTimeTable.FINDSET THEN BEGIN
           IF (EmployeeTimeTable.Friday <> 0) AND (EmployeeTimeTable.Friday < NormHour) THEN
              NormHour:=EmployeeTimeTable.Friday;
          END;

          EXIT(NormHour);
        END;

        EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
        //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(5,Week,Year));
        IF EmployeeTimeTable.FINDSET THEN BEGIN
          NormHour:=EmployeeTimeTable.Friday;
          EXIT(NormHour);
        END;
      END;
    END;

    PROCEDURE GetNormHourSat@1100285013() NormHour : Decimal;
    VAR
      PersonalWorkSchedule@1100285000 : Record 11128051;
      WorkSchedule@1100285001 : Record 11128050;
      EmployeeTimeTable@1100285002 : Record 11012923;
    BEGIN
      //180706 #15536
      //4PSSE.I047
      IF Week <> 0 THEN BEGIN
        PersonalWorkSchedule.SETRANGE("Employee number","Employee No.");
        PersonalWorkSchedule.SETRANGE(Date,DWY2DATE(6,Week,Year));
        IF PersonalWorkSchedule.FINDSET THEN BEGIN
          NormHour:=PersonalWorkSchedule."Norm hours";
          EXIT(NormHour);
        END;

        WorkSchedule.SETRANGE(Date,DWY2DATE(6,Week,Year));
        IF WorkSchedule.FINDSET THEN BEGIN
          NormHour:=WorkSchedule."Norm Hours";

          EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
          //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(6,Week,Year));
          IF EmployeeTimeTable.FINDSET THEN BEGIN
           IF (EmployeeTimeTable.Saturday <> 0) AND (EmployeeTimeTable.Saturday < NormHour) THEN
              NormHour:=EmployeeTimeTable.Saturday;
          END;

          EXIT(NormHour);
        END;

        EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
        //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(6,Week,Year));
        IF EmployeeTimeTable.FINDSET THEN BEGIN
          NormHour:=EmployeeTimeTable.Saturday;
          EXIT(NormHour);
        END;
      END;
    END;

    PROCEDURE GetNormHourSun@1100285014() NormHour : Decimal;
    VAR
      PersonalWorkSchedule@1100285000 : Record 11128051;
      WorkSchedule@1100285001 : Record 11128050;
      EmployeeTimeTable@1100285002 : Record 11012923;
      Week@1100285003 : Integer;
    BEGIN
      //180706 #15536
      //4PSSE.I047
      IF Week <> 0 THEN BEGIN
        PersonalWorkSchedule.SETRANGE("Employee number","Employee No.");
        PersonalWorkSchedule.SETRANGE(Date,DWY2DATE(7,Week,Year));
        IF PersonalWorkSchedule.FINDSET THEN BEGIN
          NormHour:=PersonalWorkSchedule."Norm hours";
          EXIT(NormHour);
        END;

        WorkSchedule.SETRANGE(Date,DWY2DATE(7,Week,Year));
        IF WorkSchedule.FINDSET THEN BEGIN
          NormHour:=WorkSchedule."Norm Hours";

          EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
          //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(7,Week,Year));
          IF EmployeeTimeTable.FINDSET THEN BEGIN
           IF (EmployeeTimeTable.Sunday <> 0) AND (EmployeeTimeTable.Sunday < NormHour) THEN
              NormHour:=EmployeeTimeTable.Sunday;
          END;

          EXIT(NormHour);
        END;

        EmployeeTimeTable.SETRANGE("Employee No.","Employee No.");
        //EmployeeTimeTable.SETRANGE("Effective Date",DWY2DATE(7,Week,Year));
        IF EmployeeTimeTable.FINDSET THEN BEGIN
          NormHour:=EmployeeTimeTable.Sunday;
          EXIT(NormHour);
        END;
      END;
    END;

    PROCEDURE GetDiffMon@1100285002() DiffMon : Decimal;
    VAR
      Norm@1100285000 : Decimal;
    BEGIN
      //180706 #15536
      //4PSSE.I047 130911 Calculate difference between "Norm" and "Normal" hours
      Norm:=GetNormHourMon;
      CALCFIELDS("Total Monday");
      DiffMon:=Norm-"Total Monday";
      EXIT(DiffMon);
    END;

    PROCEDURE GetDiffTue@1100285003() DiffTue : Decimal;
    VAR
      Norm@1100285000 : Decimal;
    BEGIN
      //180706 #15536
      //4PSSE.I047
      Norm:=GetNormHourTue;
      CALCFIELDS("Total Tuesday");
      DiffTue:=Norm-"Total Tuesday";
      EXIT(DiffTue);
    END;

    PROCEDURE GetDiffWed@1100285004() DiffWed : Decimal;
    VAR
      Norm@1100285000 : Decimal;
    BEGIN
      //180706 #15536
      //4PSSE.I047
      Norm:=GetNormHourWed;
      CALCFIELDS("Total Wednesday");
      DiffWed:=Norm-"Total Wednesday";
      EXIT(DiffWed);
    END;

    PROCEDURE GetDiffThu@1100285005() DiffThu : Decimal;
    VAR
      Norm@1100285000 : Decimal;
    BEGIN
      //180706 #15536
      //4PSSE.I047
      Norm:=GetNormHourThu;
      CALCFIELDS("Total Thursday");
      DiffThu:=Norm-"Total Thursday";
      EXIT(DiffThu);
    END;

    PROCEDURE GetDiffFri@1100285006() DiffFri : Decimal;
    VAR
      Norm@1100285000 : Decimal;
    BEGIN
      //180706 #15536
      //4PSSE.I047
      Norm:=GetNormHourFri;
      CALCFIELDS("Total Friday");
      DiffFri:=Norm-"Total Friday";
      EXIT(DiffFri);
    END;

    PROCEDURE GetDiffSat@1100285007() DiffSat : Decimal;
    VAR
      Norm@1100285000 : Decimal;
    BEGIN
      //180706 #15536
      Norm:=GetNormHourSat;
      CALCFIELDS("Total Saturday");
      DiffSat:=Norm-"Total Saturday";
      EXIT(DiffSat);
    END;

    PROCEDURE GetDiffSun@1100285008() DiffSun : Decimal;
    VAR
      Norm@1100285000 : Decimal;
    BEGIN
      //180706 #15536
      //4PSSE.I047
      Norm:=GetNormHourSun;
      CALCFIELDS("Total Sunday");
      DiffSun:=Norm-"Total Sunday";
      EXIT(DiffSun);
    END;

    BEGIN
    {
      180319 ITERO.PR New Code Quantity
      180706 ORANGO.DL #15536 normtime check against personal workschedule during release
      180907 ORANGO.WG #18834 Added Quantity an Componenttype to consentlines
    }
    END.
  }
}

