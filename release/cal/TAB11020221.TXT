OBJECT Table 11020221 Purchase Order Control Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 11072003=rm;
    CaptionML=[ENU=Purchase Order Control Line;
               NOR=Kontrollrad for Innkj›psordre;
               SVE=Kontrollrad f”r ink”psorder];
    LookupPageID=Page11020214;
    DrillDownPageID=Page11020214;
  }
  FIELDS
  {
    { 10  ;   ;Order No.           ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=[ENU=Order No.;
                                                              NOR=Ordrenr.;
                                                              SVE=Ordernr] }
    { 20  ;   ;Order Line No.      ;Integer       ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                   Document No.=FIELD(Order No.));
                                                   CaptionML=[ENU=Order Line No.;
                                                              NOR=Ordrelinjenr.;
                                                              SVE=Orderradnr] }
    { 30  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 35  ;   ;Line Type           ;Option        ;CaptionML=[ENU=Line Type;
                                                              NOR=Radtype;
                                                              SVE=Radtyp];
                                                   OptionCaptionML=[ENU=Order,Receipt,Invoice,Credit Memo,Closing,Correction;
                                                                    NOR=Ordre,Kvittering,Faktura,Kreditnota,Avslutter,Korrigering;
                                                                    SVE=Order,Inleverans,Faktura,Kreditnota,Avslut,Korrigering];
                                                   OptionString=Order,Receipt,Invoice,Credit Memo,Closing,Correction }
    { 40  ;   ;Date                ;Date          ;CaptionML=[ENU=Date;
                                                              NOR=Dato;
                                                              SVE=Datum] }
    { 50  ;   ;Receipt No.         ;Code20        ;TableRelation="Purch. Rcpt. Header";
                                                   CaptionML=[ENU=Receipt No.;
                                                              NOR=Kvitteringsnr.;
                                                              SVE=Inleveransnr] }
    { 60  ;   ;Receipt Line No.    ;Integer       ;TableRelation="Purch. Rcpt. Line"."Line No." WHERE (Document No.=FIELD(Receipt No.));
                                                   CaptionML=[ENU=Receipt Line No.;
                                                              NOR=Mottakslinjenr.;
                                                              SVE=Inleveransradnr];
                                                   BlankZero=Yes }
    { 70  ;   ;Invoice Document No.;Code20        ;TableRelation="Purch. Inv. Header";
                                                   CaptionML=[ENU=Invoice Document No.;
                                                              NOR=Fakturadokumentnr.;
                                                              SVE=Fakturanr] }
    { 80  ;   ;Invoice Line No.    ;Integer       ;TableRelation="Purch. Inv. Line"."Line No." WHERE (Document No.=FIELD(Invoice Document No.));
                                                   CaptionML=[ENU=Invoice Line No.;
                                                              NOR=Fakturaradnr.;
                                                              SVE=Fakturaradnr];
                                                   BlankZero=Yes }
    { 90  ;   ;Credit Memo Document No.;Code20    ;TableRelation="Purch. Cr. Memo Hdr.";
                                                   CaptionML=[ENU=Credit Memo Document No.;
                                                              NOR=Dokumentnr. for kreditnota;
                                                              SVE=Dokumentnr f”r kreditnota] }
    { 100 ;   ;Credit Memo Line No.;Integer       ;TableRelation="Purch. Cr. Memo Line"."Line No." WHERE (Document No.=FIELD(Credit Memo Document No.));
                                                   CaptionML=[ENU=Credit Memo Line No.;
                                                              NOR=Radnr. for kreditnota;
                                                              SVE=Radnr f”r kreditnota];
                                                   BlankZero=Yes }
    { 110 ;   ;Outstanding Hours   ;Decimal       ;CaptionML=[ENU=Outstanding Hours;
                                                              NOR=Utest†ende timer;
                                                              SVE=Utest†ende timmar];
                                                   DecimalPlaces=0:5 }
    { 120 ;   ;Outstanding Amount  ;Decimal       ;CaptionML=[ENU=Outstanding Amount;
                                                              NOR=Utest†ende bel›p;
                                                              SVE=Utest†ende belopp];
                                                   DecimalPlaces=2:5 }
    { 130 ;   ;Hours Rcd. Not Invoiced;Decimal    ;CaptionML=[ENU=Hours Rcd. Not Invoiced;
                                                              NOR=Mottatte timer ikke fakturert;
                                                              SVE=Mott. timmar Inte fakturerad];
                                                   DecimalPlaces=0:5 }
    { 140 ;   ;Amt. Rcd. Not Invoiced;Decimal     ;CaptionML=[ENU=Amt. Rcd. Not Invoiced;
                                                              NOR=Mottatt bel›p ikke fakturert;
                                                              SVE=Inlevererat bel. ej faktrd];
                                                   DecimalPlaces=2:5 }
    { 150 ;   ;Overhead Surcharge Firm;Decimal    ;CaptionML=[ENU=Overhead Surcharge Firm Commitents;
                                                              NOR=Overheadkost for faste engasjementer;
                                                              SVE=Overheadkostnad f”r fasta †taganden];
                                                   DecimalPlaces=2:5 }
    { 155 ;   ;Overhead Surcharge Soft;Decimal    ;CaptionML=[ENU=Overhead Surcharge Soft Commitments;
                                                              NOR=Overheadkost for l›pende engasjementer;
                                                              SVE=Overheadkostnad f”r l”pande †taganden];
                                                   DecimalPlaces=2:5 }
    { 160 ;   ;Project No.         ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr] }
    { 170 ;   ;Element             ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Element;
                                                              NOR=Element;
                                                              SVE=Element] }
    { 180 ;   ;Cost Type           ;Option        ;CaptionML=[ENU=Cost Type;
                                                              NOR=Kostnadstype;
                                                              SVE=Kostnadstyp];
                                                   OptionCaptionML=[ENU=" ,Labor,Material,Subcontracting,Plant,Sundry";
                                                                    NOR=" ,Arbeidskraft,Materiale,Underentrepen›r,Maskin,Diverse";
                                                                    SVE=" ,Arbetskraft,Material,Underentreprenad,Maskin,Diverse"];
                                                   OptionString=[ ,Labor,Material,Subcontracting,Plant,Sundry] }
    { 190 ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              NOR=Snarveisdimensjon 2 - kode;
                                                              SVE=Genv„g dimension 2 kod];
                                                   CaptionClass='1,2,2' }
    { 195 ;   ;Cost Component      ;Code20        ;TableRelation="Cost Component".Code;
                                                   CaptionML=[ENU=Cost Component;
                                                              NOR=Kostnadskomponent;
                                                              SVE=Kostnadskomponent] }
    { 200 ;   ;Purchase Action     ;Code10        ;TableRelation="Project Purchase Action".Code WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Purchase Action;
                                                              NOR=Innkj›pshandling;
                                                              SVE=Ink”ps†tg„rd] }
    { 210 ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract.No.;
                                                   CaptionML=[ENU=Service Contract No.;
                                                              NOR=Servicekontraktnr;
                                                              SVE=Servicekontraktnr] }
    { 220 ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order".No.;
                                                   OnValidate=VAR
                                                                ServiceOrder@1100525000 : Record 11012823;
                                                              BEGIN
                                                                IF ServiceOrder.GET("Service Order No.") THEN BEGIN
                                                                  "Base Service Order No." := ServiceOrder."Base Service Order No.";
                                                                  "Service Control Period Date" := ServiceOrder."Service Control Period Date";
                                                                  "Service Category" := ServiceOrder."Service Category";
                                                                END ELSE BEGIN
                                                                  "Base Service Order No." := '';
                                                                  "Service Control Period Date" := 0D;
                                                                  "Service Category" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Service Order No.;
                                                              NOR=Serviceordrenr.;
                                                              SVE=Serviceordernr] }
    { 221 ;   ;Service Source Type ;Option        ;InitValue=Other;
                                                   CaptionML=[ENU=Service Source Type;
                                                              NOR=Servicekildetype;
                                                              SVE=Serviceursprungstyp];
                                                   OptionCaptionML=[ENU=Call,Contract,Other,Estimate;
                                                                    NOR=Samtale,Kontrakt,Andre,Kalkyle;
                                                                    SVE=Samtal,Kontrakt,™vrigt,Kalkyl];
                                                   OptionString=Call,Contract,Other,Estimate;
                                                   Editable=No }
    { 225 ;   ;Base Service Order No.;Code20      ;TableRelation="Service Order".No.;
                                                   CaptionML=[ENU=Base Service Order No.;
                                                              NOR=Baseserviceordrenr;
                                                              SVE=Basserviceordernr];
                                                   Editable=No }
    { 230 ;   ;Service Location No.;Code20        ;TableRelation="Service Location".No.;
                                                   CaptionML=[ENU=Service Location No.;
                                                              NOR=Servicelokasjon Nr.;
                                                              SVE=Serviceplatsnr] }
    { 240 ;   ;Extension Contract  ;Code10        ;TableRelation="Extension Contract"."Contract No." WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Extension Contract;
                                                              NOR=ETA;
                                                              SVE=ŽTA] }
    { 250 ;   ;Outstanding Quantity;Decimal       ;CaptionML=[ENU=Outstanding Quantity;
                                                              NOR=Utest†ende antall;
                                                              SVE=Restnoterat antal];
                                                   DecimalPlaces=0:5 }
    { 260 ;   ;Quantity Rcd. Not Invoiced;Decimal ;CaptionML=[ENU=Quantity Rcd. Not Invoiced;
                                                              NOR=Mottatt antall ikke fakturert;
                                                              SVE=Mott. antal Inte fakturerad];
                                                   DecimalPlaces=0:5 }
    { 270 ;   ;Main Project No.    ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Main Project No.;
                                                              NOR=Hovedprosjektnr.;
                                                              SVE=Huvudprojektnr] }
    { 280 ;   ;Cum. Amt. Rcd. Not Invoiced;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Amt. Rcd. Not Invoiced" WHERE (Order No.=FIELD(Order No.),
                                                                                                                                 Order Line No.=FIELD(Order Line No.)));
                                                   CaptionML=[ENU=Cum. Amt. Rcd. Not Invoiced;
                                                              NOR="Akk. mottatt bel›p ikke fakturert ";
                                                              SVE=Ackum. belopp mott. inte fakturerat];
                                                   DecimalPlaces=2:5;
                                                   Editable=No }
    { 290 ;   ;Cum. Outstanding Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Order Control Line"."Outstanding Amount" WHERE (Order No.=FIELD(Order No.),
                                                                                                                             Order Line No.=FIELD(Order Line No.)));
                                                   CaptionML=[ENU=Cum. Outstanding Amount;
                                                              NOR=Akk. utest†ende bel›p;
                                                              SVE=Ackum. Utest†ende belopp];
                                                   DecimalPlaces=2:5;
                                                   Editable=No }
    { 300 ;   ;Service Control Year;Integer       ;CaptionML=[ENU=Service Control Year;
                                                              NOR=Servicekontroll†r;
                                                              SVE=Servicekontroll†r] }
    { 305 ;   ;Service Control Period Date;Date   ;CaptionML=[ENU=Service Control Period Date;
                                                              NOR=Servicekontrollperiode, dato;
                                                              SVE=Servicekontroll datumperiod];
                                                   Editable=No }
    { 310 ;   ;Vendor No.          ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchase Header"."Buy-from Vendor No." WHERE (No.=FIELD(Order No.),
                                                                                                                     Document Type=CONST(Order)));
                                                   CaptionML=[ENU=Vendor No.;
                                                              NOR=Leverand›rnr.;
                                                              SVE=Lev.nr];
                                                   Editable=No }
    { 311 ;   ;Vendor Name         ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchase Header"."Buy-from Vendor Name" WHERE (No.=FIELD(Order No.),
                                                                                                                      Document Type=CONST(Order)));
                                                   CaptionML=[ENU=Vendor Name;
                                                              NOR=Leverand›rsnavn;
                                                              SVE=Leverant”rsnamn];
                                                   Editable=No }
    { 320 ;   ;Coverage Account Surcharge;Code20  ;TableRelation="G/L Account".No.;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Coverage Account Surcharge;
                                                              NOR=Dekning, tilleggsgebyr konto;
                                                              SVE=T„ckning, till„ggsavgift konto] }
    { 325 ;   ;Coverage Department Surcharge;Code20;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Coverage Department Surcharge;
                                                              NOR=Dekning, tilleggsgebyr avdeling;
                                                              SVE=T„ckning, till„ggsavgift avdelning] }
    { 330 ;   ;Additional Cost (Service);Boolean  ;CaptionML=[ENU=Additional Cost (Service);
                                                              NOR=Tilleggskoster (service);
                                                              SVE=Till„ggskostnader (service)] }
    { 340 ;   ;Service Category    ;Code10        ;CaptionML=[ENU=Service Category;
                                                              SVE=Servicekategori];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Order No.,Order Line No.,Line No.       ;MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Project No.,Date                        ;MaintainSIFTIndex=No }
    {    ;Main Project No.,Project No.,Shortcut Dimension 2 Code,Date,Purchase Action;
                                                   MaintainSIFTIndex=No }
    {    ;Service Contract No.,Service Order No.,Service Location No.,Service Source Type,Cost Component,Service Control Year,Date;
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Project No.,Date,Purchase Action;
                                                   MaintainSIFTIndex=No }
    {    ;Service Contract No.,Cost Type,Shortcut Dimension 2 Code;
                                                   MaintainSIFTIndex=No }
    {    ;Service Contract No.,Cost Component,Cost Type,Shortcut Dimension 2 Code,Service Source Type,Line Type,Service Control Year,Date;
                                                   MaintainSIFTIndex=No }
    {    ;Main Project No.,Project No.,Cost Component,Date,Purchase Action;
                                                   MaintainSIFTIndex=No }
    {    ;Service Order No.,Cost Component,Cost Type,Shortcut Dimension 2 Code,Line Type,Date,Additional Cost (Service);
                                                   MaintainSIFTIndex=No }
    {    ;Project No.,Cost Component              ;MaintainSIFTIndex=No }
    {    ;Main Project No.,Cost Component         ;MaintainSIFTIndex=No }
    {    ;Main Project No.,Shortcut Dimension 2 Code,Element;
                                                   MaintainSIFTIndex=No }
    {    ;Base Service Order No.,Service Order No.,Cost Component,Date,Project No.;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Overhead Surcharge Firm,Overhead Surcharge Soft,Hours Rcd. Not Invoiced }
    {    ;Project No.,Cost Type,Extension Contract,Date,Service Contract No.,Service Order No.;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Overhead Surcharge Firm,Overhead Surcharge Soft,Hours Rcd. Not Invoiced;
                                                   MaintainSQLIndex=No }
    {    ;Project No.,Cost Type,Extension Contract,Shortcut Dimension 2 Code,Date,Service Contract No.,Service Order No.;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Overhead Surcharge Firm,Overhead Surcharge Soft,Hours Rcd. Not Invoiced;
                                                   MaintainSQLIndex=No }
    {    ;Main Project No.,Cost Type,Date,Service Contract No.,Service Order No.;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Overhead Surcharge Firm,Overhead Surcharge Soft,Hours Rcd. Not Invoiced;
                                                   MaintainSQLIndex=No }
    {    ;Main Project No.,Cost Type,Shortcut Dimension 2 Code,Date,Purchase Action,Service Contract No.,Service Order No.;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Overhead Surcharge Firm,Overhead Surcharge Soft,Hours Rcd. Not Invoiced;
                                                   MaintainSQLIndex=No }
    {    ;Main Project No.,Cost Type,Element,Date,Service Contract No.,Service Order No.;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Overhead Surcharge Firm,Overhead Surcharge Soft,Hours Rcd. Not Invoiced;
                                                   MaintainSQLIndex=No }
    {    ;Main Project No.,Cost Type,Element,Shortcut Dimension 2 Code,Date,Service Contract No.,Service Order No.;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Overhead Surcharge Firm,Overhead Surcharge Soft,Hours Rcd. Not Invoiced;
                                                   MaintainSQLIndex=No }
    {    ;Main Project No.,Project No.,Cost Type,Shortcut Dimension 2 Code,Date,Service Contract No.,Service Order No.;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Overhead Surcharge Firm,Overhead Surcharge Soft,Hours Rcd. Not Invoiced;
                                                   MaintainSQLIndex=No }
    {    ;Main Project No.,Project No.,Cost Type,Element,Date,Service Contract No.,Service Order No.;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Overhead Surcharge Firm,Overhead Surcharge Soft,Hours Rcd. Not Invoiced;
                                                   MaintainSQLIndex=No }
    {    ;Main Project No.,Project No.,Cost Type,Element,Shortcut Dimension 2 Code,Line Type,Date,Service Contract No.,Service Order No.;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Overhead Surcharge Firm,Overhead Surcharge Soft,Hours Rcd. Not Invoiced,Quantity Rcd. Not Invoiced,Outstanding Quantity;
                                                   MaintainSQLIndex=No }
    {    ;Service Contract No.,Cost Type,Shortcut Dimension 2 Code,Project No.;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Overhead Surcharge Firm,Overhead Surcharge Soft,Hours Rcd. Not Invoiced;
                                                   MaintainSQLIndex=No }
    {    ;Service Contract No.,Service Source Type,Cost Component,Date;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced;
                                                   MaintainSQLIndex=No }
    {    ;Service Order No.,Cost Type             ;SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Overhead Surcharge Firm,Overhead Surcharge Soft,Hours Rcd. Not Invoiced;
                                                   MaintainSQLIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PurchReceiptLine@1210190001 : Record 121;
      PurchInvLine@1210190000 : Record 123;
      PurchCredMemoLine@1210190002 : Record 125;
      PurchHeader@1210190003 : Record 38;
      ServOrderRec@1100525000 : Record 11012823;
      ProjRec@1100525001 : Record 11072003;
      PurchSetup@1100525004 : Record 312;
      CurrExchRate@1100525005 : Record 330;
      LineMax@1100485000 : Integer;
      SaveLineNo@1100485001 : Integer;
      Text001@1100485002 : TextConst 'ENU=''%1'' not present on project ''%2'';NOR=''%1'' finnes ikke for prosjekt ''%2'';SVE=''%1'' finns inte f”r projekt ''%2''';
      ReservedLineNo@1100525006 : Integer;
      gvPurchLineAmount@1100525002 : Decimal;
      gvIncludeVATAmount@1100525003 : Boolean;
      ReservedRec@1100525007 : Record 11020221;

    PROCEDURE CreatePurchOrderControlLines@1210190001(lPurchLine@1210190000 : Record 39;DeleteOnly@1210190001 : Boolean;BatchRun@1100525003 : Boolean);
    VAR
      lRec2@1100485003 : Record 11020221;
      TempSurchTotallLine@1100525001 : TEMPORARY Record 11020221;
      ProjSetup@1100525002 : Record 315;
      OrderControlLineToBuild@1100525004 : Record 11020592;
      lTotOutstQuan@1210190004 : Decimal;
      lTotOutstHours@1100485001 : Decimal;
      lTotOutstAmount@1210190003 : Decimal;
      lTotOvhSurchFirm@1210190002 : Decimal;
      lTotOvhSurchSoft@1100525005 : Decimal;
      lTotRcdNotInvQuan@1210190006 : Decimal;
      lTotRcdNotInvHours@1100485002 : Decimal;
      lTotRcdNotInvAmount@1210190005 : Decimal;
      lFirstDate@1210190007 : Date;
      lLastDate@1210190008 : Date;
      lLineNo@1210190009 : Integer;
      lOrderAmountDiff@1210190010 : Decimal;
      lHoursInvolved@1100485000 : Boolean;
      lPurchLineIsClosed@1100525000 : Boolean;
      WageCompRec@1100525006 : Record 11012014;
    BEGIN
      IF (lPurchLine."Document Type" <> lPurchLine."Document Type"::Order) OR
         (lPurchLine."Document No." = '')
      THEN
        EXIT;

      SetCompany;

      IF CURRENTCOMPANY <> COMPANYNAME THEN BEGIN
        lRec2.CHANGECOMPANY(CURRENTCOMPANY);
        ProjSetup.CHANGECOMPANY(CURRENTCOMPANY);
        OrderControlLineToBuild.CHANGECOMPANY(CURRENTCOMPANY);
        WageCompRec.CHANGECOMPANY(CURRENTCOMPANY);
      END;

      //*30439.sn
      IF (lPurchLine."Job No." <> '') AND (NOT DeleteOnly) THEN BEGIN
        IF NOT ProjRec.GET(lPurchLine."Job No.") THEN  //* Will not exist if project is (archived and) deleted
          DeleteOnly := TRUE;
      END;
      //*30439.sn

      RESET;
      IF lRec2.CURRENTCOMPANY <> COMPANYNAME THEN
        CHANGECOMPANY(lRec2.CURRENTCOMPANY);
      SETRANGE("Order No.", lPurchLine."Document No.");
      SETRANGE("Order Line No.", lPurchLine."Line No.");
      ProjSetup.GET;
      IF (ProjSetup."Build Purchase Control" = ProjSetup."Build Purchase Control"::Batch) AND
         NOT BatchRun AND NOT DeleteOnly THEN
      BEGIN
        IF (lPurchLine."Job No." <> '') THEN
          InsertOrderControlLineToBuild(lPurchLine, lPurchLine."Job No.");
        IF FINDFIRST THEN
          IF ("Project No." <> '') AND ("Project No." <> lPurchLine."Job No.") THEN
            InsertOrderControlLineToBuild(lPurchLine, "Project No.");
        EXIT;
      END;

      DELETEALL;
      IF DeleteOnly THEN BEGIN
        OrderControlLineToBuild.INIT;
        OrderControlLineToBuild.SETRANGE("Order No.", lPurchLine."Document No.");
        OrderControlLineToBuild.SETRANGE("Order Line No.", lPurchLine."Line No.");
        OrderControlLineToBuild.DELETEALL;
        EXIT;
      END;
      IF lPurchLine.Type <> lPurchLine.Type::"G/L Account" THEN
        EXIT;
      IF (lPurchLine."Receiving Company" <> '') AND (lPurchLine."Receiving Company" <> CURRENTCOMPANY) THEN
        EXIT;
      IF (lPurchLine."Job No." = '') AND (lPurchLine."Service Order No." = '') AND (lPurchLine."Service Contract No." = '') THEN
        EXIT;

      PurchHeader.GET(lPurchLine."Document Type",lPurchLine."Document No.");

      //Because of Parameter: Job."VAT Indicator (Purchase)".No, (VAT is Calcutated but not posted).
      //Outstanding and Received amounts have to be calculated with VAT.
      gvPurchLineAmount := lPurchLine."Amount (LCY)";
      gvIncludeVATAmount := FALSE;
      IF lPurchLine."Job No." <> '' THEN BEGIN
        //IC mutations are not included. see above
        ProjRec.GET(lPurchLine."Job No.");
        PurchSetup.GET;
        IF (PurchSetup."VAT Indicator (Purchase)" = PurchSetup."VAT Indicator (Purchase)"::"No VAT") AND
           (ProjRec."VAT Indicator (Purchase)" = ProjRec."VAT Indicator (Purchase)"::"No VAT") THEN
          gvIncludeVATAmount := TRUE;
      END;

      IF gvIncludeVATAmount THEN BEGIN
        // field "Amount Including VAT" was not filled reliable after receipt of orderlines.
        //Calc Amount incl. VAT
        IF lPurchLine."VAT %" <> 0 THEN
          gvPurchLineAmount := ROUND(lPurchLine."Amount (LCY)" *
                                     (1 + lPurchLine."VAT %" / 100),
                                     0.00001)
      END;

      lLineNo := 10;
      lHoursInvolved := (lPurchLine."Cost Type" = lPurchLine."Cost Type"::Labor) OR (lPurchLine."Employee No." <> '');

      //db.sn, 03-04-13: C006323
      IF lPurchLine."Wage Component" <> '' THEN BEGIN
        IF WageCompRec.GET(lPurchLine."Wage Component") THEN
          IF WageCompRec."Component Type" = WageCompRec."Component Type"::Expenses THEN
            lHoursInvolved := FALSE;
      END;
      //db.en, 03-04-13: C006323

      PurchReceiptLine.SETCURRENTKEY("Order No.", "Order Line No.");
      PurchReceiptLine.SETRANGE("Order No.", lPurchLine."Document No.");
      PurchReceiptLine.SETRANGE("Order Line No.", lPurchLine."Line No.");
      IF PurchReceiptLine.FINDSET THEN BEGIN
        REPEAT
          //Insert Receipt Lines
          InitRecord(lPurchLine);
          lLineNo := lLineNo + 1;
          "Line No." := lLineNo;
          "Line Type" := "Line Type"::Receipt;
          Date := PurchReceiptLine."Posting Date";
          "Receipt No." := PurchReceiptLine."Document No.";
          "Receipt Line No." := PurchReceiptLine."Line No.";
          "Outstanding Quantity" := -PurchReceiptLine.Quantity;
          "Quantity Rcd. Not Invoiced" := PurchReceiptLine.Quantity;
          IF lHoursInvolved THEN BEGIN
            "Outstanding Hours" := -PurchReceiptLine.Quantity;
            "Hours Rcd. Not Invoiced" := PurchReceiptLine.Quantity;
          END;

          IF (NOT gvIncludeVATAmount) OR (PurchReceiptLine."VAT %" = 0) THEN BEGIN
            "Outstanding Amount" := -ROUND(PurchReceiptLine."Amount (LCY)", 0.00001);
            "Amt. Rcd. Not Invoiced" := ROUND(PurchReceiptLine."Amount (LCY)", 0.00001);
          END ELSE BEGIN
            //Calc Amount incl. VAT
            "Outstanding Amount" := ROUND(PurchReceiptLine."Received (line)" *
                                            (1 + PurchReceiptLine."VAT %" / 100),
                                             0.00001);
            //Calc Amount LCY
            IF lPurchLine."Currency Code" <> '' THEN
              "Outstanding Amount" := ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                                                 0, '', PurchReceiptLine."Posting Date",
                                                 PurchHeader."Currency Code",
                                                 "Outstanding Amount",
                                                 PurchHeader."Currency Factor",FALSE));

            "Amt. Rcd. Not Invoiced" := "Outstanding Amount";
            "Outstanding Amount" := -"Outstanding Amount";

          END;
          INSERT;

          CountTotals(
            lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
            lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount);

          //07-10-2010 sn
          //added by dividing overhead surcharge for soft and firm commitments
          //Surcharge in separate record
          lRec2 := Rec;
          CalcOverheadSurcharge(
          lPurchLine, lLineNo,
          lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
          lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount,TempSurchTotallLine);
          //07-10-2010 en
          CheckFirstAndLastDate(lFirstDate, lLastDate);
          Rec := lRec2;  //In CalcOverheadSurcharge Cost Object AND Cost Type are changed

          lOrderAmountDiff := 0;
          IF lPurchLine.Quantity <> 0 THEN BEGIN
            lOrderAmountDiff :=
              ROUND(
                PurchReceiptLine.Quantity / lPurchLine.Quantity * lPurchLine."Amount (LCY)" -
                PurchReceiptLine."Amount (LCY)", 0.00001);

            IF lOrderAmountDiff <> 0 THEN BEGIN

              IF (gvIncludeVATAmount) AND (PurchReceiptLine."VAT %" <> 0) THEN BEGIN
                //Calc Amount incl. VAT
                lOrderAmountDiff := ROUND(lOrderAmountDiff *
                                             (1 + PurchReceiptLine."VAT %" / 100),
                                              0.00001);
                //Calc Amount LCY
                IF lPurchLine."Currency Code" <> '' THEN
                  lOrderAmountDiff := ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                                                 0, '', PurchReceiptLine."Posting Date",
                                                 PurchHeader."Currency Code",
                                                 lOrderAmountDiff,
                                                 PurchHeader."Currency Factor",FALSE));
              END;

              //Insert Correction Line Due To Order Change Or Exceeding Order Amount
              lLineNo := lLineNo + 1;
              "Line No." := lLineNo;
              "Line Type" := "Line Type"::Correction;
              "Outstanding Quantity" := 0;
              "Outstanding Hours" := 0;
              "Outstanding Amount" := -lOrderAmountDiff;
              "Quantity Rcd. Not Invoiced" := 0;
              "Hours Rcd. Not Invoiced" := 0;
              "Amt. Rcd. Not Invoiced" := lOrderAmountDiff;
              INSERT;
              CountTotals(
                lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
                lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount);
              //At receipts the open overhead surcharges will not be updated.
              //07-10-2010 sn
              //Nu wel
              //Surcharge in separate record
              lRec2 := Rec;
              CalcOverheadSurcharge(
                lPurchLine, lLineNo,
                lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
                lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount,TempSurchTotallLine);
              Rec := lRec2;
              //07-10-2010 en
            END;
          END;

          //Reserve space (LineNo) for possible correction line. lTotOvhSurchSoft must be zero in
          //Case of receipts are complete.
          ReservedLineNo := 0;
          IF ((gvPurchLineAmount > 0) AND (lTotRcdNotInvAmount >= gvPurchLineAmount)) OR
             ((gvPurchLineAmount < 0) AND (lTotRcdNotInvAmount <= gvPurchLineAmount)) THEN
          BEGIN
            ReservedRec := Rec;
            lLineNo := lLineNo + 1;
            ReservedLineNo := lLineNo;
          END;

          //Insert Invoice Lines
          PurchInvLine.SETCURRENTKEY("Receipt No.","Receipt Line No.");
          PurchInvLine.SETRANGE("Receipt No.", PurchReceiptLine."Document No.");
          PurchInvLine.SETRANGE("Receipt Line No.", PurchReceiptLine."Line No.");
          IF PurchInvLine.FINDSET THEN
            REPEAT
              InitRecord(lPurchLine);
              lLineNo := lLineNo + 1;
              "Line No." := lLineNo;
              "Line Type" := "Line Type"::Invoice;
              IF PurchInvLine."Posting Date" < PurchReceiptLine."Posting Date" THEN
                Date := PurchReceiptLine."Posting Date"
              ELSE
                Date := PurchInvLine."Posting Date";
              "Receipt No." := PurchReceiptLine."Document No.";
              "Receipt Line No." := PurchReceiptLine."Line No.";
              "Invoice Document No." := PurchInvLine."Document No.";
              "Invoice Line No." := PurchInvLine."Line No.";
              "Quantity Rcd. Not Invoiced" := -PurchInvLine.Quantity;
              IF lHoursInvolved THEN
                "Hours Rcd. Not Invoiced" := -PurchInvLine.Quantity;

              IF (NOT gvIncludeVATAmount) OR (PurchInvLine."VAT %" = 0) THEN BEGIN
                "Amt. Rcd. Not Invoiced" := -ROUND(PurchInvLine."Amount (LCY)", 0.00001);
              END ELSE BEGIN
                //Calc Amount incl. VAT
                 "Amt. Rcd. Not Invoiced" := -ROUND(PurchInvLine."Amount Including VAT", 0.00001);
                //Calc Amount LCY
                IF lPurchLine."Currency Code" <> '' THEN
                  "Amt. Rcd. Not Invoiced" := ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                                                         0, '', PurchInvLine."Posting Date",
                                                         PurchHeader."Currency Code",
                                                         "Amt. Rcd. Not Invoiced",
                                                         PurchHeader."Currency Factor",FALSE));
              END;

              "Overhead Surcharge Firm" := 0;
              "Overhead Surcharge Soft" := 0;
              INSERT;

              CountTotals(
                lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
                lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount);

              //Surcharge in separate record
              lRec2 := Rec;
              CalcOverheadSurcharge(
                lPurchLine, lLineNo,
                lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
                lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount,TempSurchTotallLine);

              CheckFirstAndLastDate(lFirstDate, lLastDate);
              Rec := lRec2;  //In CalcOverheadSurcharge Cost Object AND Cost Type are changed
              IF lPurchLine.Quantity <> 0 THEN BEGIN
                lOrderAmountDiff := ROUND(PurchInvLine.Quantity / lPurchLine.Quantity * lPurchLine."Amount (LCY)" -
                                          PurchInvLine."Amount (LCY)", 0.00001);
                IF lOrderAmountDiff <> 0 THEN BEGIN
                  //Insert Correction Line Due To Order Change (Price)

                  IF (gvIncludeVATAmount) AND (PurchInvLine."VAT %" <> 0) THEN BEGIN
                    //Calc Amount incl. VAT
                    lOrderAmountDiff := ROUND(lOrderAmountDiff *
                                             (1 + PurchInvLine."VAT %" / 100),
                                              0.00001);
                    //Calc Amount LCY
                    IF lPurchLine."Currency Code" <> '' THEN
                       lOrderAmountDiff := ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                                                    0, '', PurchInvLine."Posting Date",
                                                    PurchHeader."Currency Code",
                                                    lOrderAmountDiff,
                                                    PurchHeader."Currency Factor",FALSE));
                  END;

                  lLineNo := lLineNo + 1;
                  "Line No." := lLineNo;
                  "Line Type" := "Line Type"::Correction;
                  "Outstanding Quantity" := 0;
                  "Outstanding Hours" := 0;
                  "Quantity Rcd. Not Invoiced" := 0;
                  "Hours Rcd. Not Invoiced" := 0;

                  "Amt. Rcd. Not Invoiced" := -lOrderAmountDiff;

                  "Overhead Surcharge Firm" := 0;
                  "Overhead Surcharge Soft" := 0;
                  INSERT;
                  CountTotals(
                    lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
                    lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount);
                  //Surcharge in separate record
                  CalcOverheadSurcharge(
                    lPurchLine, lLineNo,
                    lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
                    lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount,TempSurchTotallLine);
                END;
              END;
            UNTIL PurchInvLine.NEXT = 0;

          //Insert Credit Memo Lines
          PurchCredMemoLine.SETCURRENTKEY("Receipt No.","Receipt Line No.");
          PurchCredMemoLine.SETRANGE("Receipt No.", PurchReceiptLine."Document No.");
          PurchCredMemoLine.SETRANGE("Receipt Line No.", PurchReceiptLine."Line No.");
          IF PurchCredMemoLine.FINDSET THEN
            REPEAT
              InitRecord(lPurchLine);
              lLineNo := lLineNo + 1;
              "Line No." := lLineNo;
              "Line Type" := "Line Type"::"Credit Memo";
              IF PurchCredMemoLine."Posting Date" < PurchReceiptLine."Posting Date" THEN
                Date := PurchReceiptLine."Posting Date"
              ELSE
                Date := PurchCredMemoLine."Posting Date";
              "Receipt No." := PurchReceiptLine."Document No.";
              "Receipt Line No." := PurchReceiptLine."Line No.";
              "Credit Memo Document No." := PurchCredMemoLine."Document No.";
              "Credit Memo Line No." := PurchCredMemoLine."Line No.";
              "Quantity Rcd. Not Invoiced" := PurchCredMemoLine.Quantity;
              IF lHoursInvolved THEN
                "Hours Rcd. Not Invoiced" := PurchCredMemoLine.Quantity;


              IF (NOT gvIncludeVATAmount) OR (PurchInvLine."VAT %" = 0) THEN BEGIN
                "Amt. Rcd. Not Invoiced" := ROUND(PurchCredMemoLine."Amount (LCY)", 0.00001);
              END ELSE BEGIN
                //Calc Amount incl. VAT
                 "Amt. Rcd. Not Invoiced" := ROUND(PurchCredMemoLine."Amount Including VAT", 0.00001);
                //Calc Amount LCY
                IF lPurchLine."Currency Code" <> '' THEN
                  "Amt. Rcd. Not Invoiced" := ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                                                         0, '', PurchCredMemoLine."Posting Date",
                                                         PurchHeader."Currency Code",
                                                         "Amt. Rcd. Not Invoiced",
                                                         PurchHeader."Currency Factor",FALSE));
              END;

              INSERT;
              CountTotals(
                lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
                lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount);

              //Surcharge in separate record
              lRec2 := Rec;
              CalcOverheadSurcharge(
                lPurchLine, lLineNo,
                lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
                lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount,TempSurchTotallLine);

              CheckFirstAndLastDate(lFirstDate, lLastDate);
              Rec := lRec2;  //In CalcOverheadSurcharge Cost Object AND Cost Type are changed
              IF lPurchLine.Quantity <> 0 THEN BEGIN
                lOrderAmountDiff := ROUND(PurchCredMemoLine.Quantity / lPurchLine.Quantity * lPurchLine."Amount (LCY)" -
                                          PurchCredMemoLine."Amount (LCY)", 0.00001);
                IF lOrderAmountDiff <> 0 THEN BEGIN
                  //Insert Correction Line Due To Order Change

                  IF (gvIncludeVATAmount) AND (PurchCredMemoLine."VAT %" <> 0) THEN BEGIN
                    //Calc Amount incl. VAT
                    lOrderAmountDiff := ROUND(lOrderAmountDiff *
                                             (1 + PurchCredMemoLine."VAT %" / 100),
                                              0.00001);
                    //Calc Amount LCY
                    IF lPurchLine."Currency Code" <> '' THEN
                       lOrderAmountDiff := ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                                                    0, '', PurchCredMemoLine."Posting Date",
                                                    PurchHeader."Currency Code",
                                                    lOrderAmountDiff,
                                                    PurchHeader."Currency Factor",FALSE));
                  END;


                  lLineNo := lLineNo + 1;
                  "Line No." := lLineNo;
                  "Line Type" := "Line Type"::Correction;
                  "Outstanding Quantity" := 0;
                  "Outstanding Hours" := 0;
                  "Quantity Rcd. Not Invoiced" := 0;
                  "Hours Rcd. Not Invoiced" := 0;
                  "Amt. Rcd. Not Invoiced" := lOrderAmountDiff;
                  "Overhead Surcharge Firm" := 0;
                  "Overhead Surcharge Soft" := 0;
                  INSERT;
                  CountTotals(
                    lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
                    lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount);

                  //Surcharge in separate record
                  CalcOverheadSurcharge(
                    lPurchLine, lLineNo,
                    lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
                    lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount,TempSurchTotallLine);
                END;
              END;
            UNTIL PurchCredMemoLine.NEXT = 0;
        UNTIL PurchReceiptLine.NEXT = 0;

        //Insert Correction In case Invoice Amount exceeds Order Amount
        IF (PurchHeader.Status <> PurchHeader.Status::Closed) THEN BEGIN
          IF ((gvPurchLineAmount > 0) AND (lTotRcdNotInvAmount < 0)) OR
             ((gvPurchLineAmount < 0) AND (lTotRcdNotInvAmount > 0))
          THEN BEGIN
            InitRecord(lPurchLine);
            lLineNo := lLineNo + 1;
            "Line No." := lLineNo;
            "Line Type" := "Line Type"::Correction;
            Date := lLastDate;

            "Amt. Rcd. Not Invoiced" := ROUND(-lTotRcdNotInvAmount, 0.00001);

            INSERT;
            CountTotals(
              lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
              lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount);

            //Surcharge in separate record
            CalcOverheadSurcharge(
              lPurchLine, lLineNo,
              lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
              lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount,TempSurchTotallLine);
          END;

        END;
      END;

      //Insert Order Line
      InitRecord(lPurchLine);
      "Line No." := 1;
      "Line Type" := "Line Type"::Order;
      IF (lFirstDate < lPurchLine."Order Date") AND (lFirstDate > 0D) THEN
        Date := lFirstDate
      ELSE
        Date := lPurchLine."Order Date";

      "Outstanding Quantity" := lPurchLine.Quantity;
      IF lHoursInvolved THEN
        "Outstanding Hours" := lPurchLine.Quantity;

      "Outstanding Amount" := ROUND(gvPurchLineAmount, 0.00001);

      INSERT;
      CountTotals(
        lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
        lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount);

      SaveLineNo := lLineNo;
      lLineNo := 1;
      LineMax := 9;
      //Surcharge in separate record

      CalcOverheadSurcharge(
        lPurchLine, lLineNo,
        lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
        lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount,TempSurchTotallLine);

      LineMax := 0;
      IF lLineNo < SaveLineNo THEN
        lLineNo := SaveLineNo;

      CheckFirstAndLastDate(lFirstDate, lLastDate);

      SaveLineNo := lLineNo;
      //Correction Line Due to Rounding Differences Or Receipts Exceeding Order Amount
      //In that Case Surcharge Soft Commitments should total to zero
      IF ((gvPurchLineAmount > 0) AND (lTotRcdNotInvAmount >= gvPurchLineAmount)) OR
         ((gvPurchLineAmount < 0) AND (lTotRcdNotInvAmount <= gvPurchLineAmount)) THEN
      BEGIN
        IF (lTotOvhSurchSoft <> 0) AND (ReservedLineNo <> 0) THEN BEGIN
           //Insert Correction Line
           Rec := ReservedRec;
           lLineNo := ReservedLineNo;
           "Line No." := ReservedLineNo;
           "Line Type" := "Line Type"::Correction;
           "Outstanding Quantity" := 0;
           "Outstanding Hours" := 0;
           "Outstanding Amount" := 0;
           "Quantity Rcd. Not Invoiced" := 0;
           "Hours Rcd. Not Invoiced" := 0;
           "Amt. Rcd. Not Invoiced" := 0;
           "Overhead Surcharge Firm" := 0;
           "Overhead Surcharge Soft":= -lTotOvhSurchSoft;
           INSERT;
           CountTotals(
             lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
             lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount);
        END;
      END;

      IF lLineNo < SaveLineNo THEN
        lLineNo := SaveLineNo;


      //Insert Closing Line
      IF (ABS(lTotOutstQuan) > 0.0001) OR (ABS(lTotOutstAmount) > 0.0001) OR
         (ABS(lTotOvhSurchFirm) > 0.0001) OR  (ABS(lTotOvhSurchSoft) > 0.0001) OR
         (ABS(lTotRcdNotInvQuan) > 0.0001) OR (ABS(lTotRcdNotInvAmount) > 0.0001) THEN
      BEGIN
        IF (PurchHeader.Status = PurchHeader.Status::Closed) THEN
          lPurchLineIsClosed := TRUE
        ELSE
          IF "Service Order No." <> '' THEN BEGIN
            IF "Service Order No." <> ServOrderRec."No." THEN
              IF NOT ServOrderRec.GET("Service Order No.") THEN
                ServOrderRec.Status := ServOrderRec.Status::Finished;
            //call 26248
            IF ServOrderRec.Status >= ServOrderRec.Status::Finished THEN
              lPurchLineIsClosed := TRUE;
          END ELSE BEGIN
            IF "Project No." <> '' THEN BEGIN
              IF "Project No." <> ProjRec."No." THEN
                IF NOT ProjRec.GET("Project No.") THEN
                  ProjRec."Project Status" := ProjRec."Project Status"::Archived;
              //call 26248
              IF ProjRec."Project Status" >= ProjRec."Project Status"::Finished THEN
                IF NOT (ProjSetup."Provisions at Closure" AND (ProjRec."Project Status" = ProjRec."Project Status"::Finished)) THEN
                  lPurchLineIsClosed := TRUE;
            END;
          END;
        IF lPurchLineIsClosed THEN BEGIN
          IF (ABS(lTotOutstQuan) > 0.0001) OR (ABS(lTotOutstAmount) > 0.0001) OR
            (ABS(lTotRcdNotInvQuan) > 0.0001) OR (ABS(lTotRcdNotInvAmount) > 0.0001) THEN BEGIN
            InitRecord(lPurchLine);
            lLineNo := lLineNo + 1;
            "Line No." := lLineNo;
            "Line Type" := "Line Type"::Closing;
            Date := DetermineDateOfClosingLine(lLastDate);
            "Outstanding Quantity" := -lTotOutstQuan;
            "Outstanding Hours" := -lTotOutstHours;
            "Outstanding Amount" := -lTotOutstAmount;
            "Hours Rcd. Not Invoiced" := -lTotRcdNotInvHours;
            "Quantity Rcd. Not Invoiced" := -lTotRcdNotInvQuan;
            "Amt. Rcd. Not Invoiced" := -lTotRcdNotInvAmount;
            INSERT;
          END;

          //Surcharge in separate record
          TempSurchTotallLine.RESET;
          IF TempSurchTotallLine.FINDSET THEN BEGIN
            REPEAT
              IF (TempSurchTotallLine."Overhead Surcharge Firm" <> 0) OR
                 (TempSurchTotallLine."Overhead Surcharge Soft" <> 0) THEN BEGIN
                InitRecord(lPurchLine);
                lLineNo := lLineNo + 1;
                "Line No." := lLineNo;
                "Line Type" := "Line Type"::Closing;
                "Overhead Surcharge Firm" := -TempSurchTotallLine."Overhead Surcharge Firm";
                "Overhead Surcharge Soft" := -TempSurchTotallLine."Overhead Surcharge Soft";
                "Shortcut Dimension 2 Code" := TempSurchTotallLine."Shortcut Dimension 2 Code";
                "Cost Type" := TempSurchTotallLine."Cost Type";
                "Cost Component" := TempSurchTotallLine."Cost Component";
                Element := TempSurchTotallLine.Element;
                "Coverage Account Surcharge" := TempSurchTotallLine."Coverage Account Surcharge";
                "Coverage Department Surcharge" := TempSurchTotallLine."Coverage Department Surcharge";  // 30825.n
                Date := DetermineDateOfClosingLine(lLastDate);
                INSERT;
              END;
            UNTIL TempSurchTotallLine.NEXT = 0;
            TempSurchTotallLine.DELETEALL;
          END;

        END;
      END;
    END;

    PROCEDURE InitRecord@1210190003(lPurchLine@1210190000 : Record 39);
    BEGIN
      INIT;
      "Order No." := lPurchLine."Document No.";
      "Order Line No." := lPurchLine."Line No.";
      "Project No." := lPurchLine."Job No.";
      "Main Project No." := lPurchLine."Main Project No.";
      Element := lPurchLine.Element;
      "Extension Contract" := lPurchLine."Extension Contract";
      "Cost Type" := lPurchLine."Cost Type";
      "Shortcut Dimension 2 Code" := lPurchLine."Shortcut Dimension 2 Code";
      "Cost Component" := lPurchLine."Cost Component";
      "Purchase Action" := lPurchLine."Purchase Action";
      "Service Contract No." := lPurchLine."Service Contract No.";
      VALIDATE("Service Order No.", lPurchLine."Service Order No."); //fill base service order no.
      "Service Control Year" := lPurchLine."Service Control Year";
      "Service Location No." := lPurchLine."Service Location No.";
      "Service Source Type" := lPurchLine."Service Source Type";
      "Additional Cost (Service)" := lPurchLine."Additional Cost (Service)";
    END;

    PROCEDURE CountTotals@1210190006(VAR lTotOutstQuan@1100485000 : Decimal;VAR lTotOutstHours@1210190000 : Decimal;VAR lTotOutstAmount@1210190001 : Decimal;VAR lTotOvhSurchFirm@1210190002 : Decimal;VAR lTotOvhSurchSoft@1100525000 : Decimal;VAR lTotRcdNotInvQuan@1210190003 : Decimal;VAR lTotRcdNotInvHours@1100485001 : Decimal;VAR lTotRcdNotInvAmount@1210190004 : Decimal);
    BEGIN
      lTotOutstQuan := lTotOutstQuan + "Outstanding Quantity";
      lTotOutstHours := lTotOutstHours + "Outstanding Hours";
      lTotOutstAmount := lTotOutstAmount + "Outstanding Amount";
      lTotOvhSurchFirm := lTotOvhSurchFirm + "Overhead Surcharge Firm";
      lTotOvhSurchSoft := lTotOvhSurchSoft + "Overhead Surcharge Soft";
      lTotRcdNotInvQuan := lTotRcdNotInvQuan + "Quantity Rcd. Not Invoiced";
      lTotRcdNotInvHours := lTotRcdNotInvHours + "Hours Rcd. Not Invoiced";
      lTotRcdNotInvAmount := lTotRcdNotInvAmount + "Amt. Rcd. Not Invoiced";
    END;

    PROCEDURE CheckFirstAndLastDate@1210190000(VAR lFirstDate@1210190001 : Date;VAR lLastDate@1210190000 : Date);
    BEGIN
      IF (Date < lFirstDate) OR (lFirstDate = 0D)THEN
        lFirstDate := Date;

      IF Date > lLastDate THEN
        lLastDate := Date;
    END;

    PROCEDURE CalcOverheadSurcharge@1210190013(lPurchLine@1100485001 : Record 39;VAR lLineNo@1100485005 : Integer;VAR lTotOutstQuan@1100485012 : Decimal;VAR lTotOutstHours@1100485011 : Decimal;VAR lTotOutstAmount@1100485010 : Decimal;VAR lTotOvhSurchFirm@1100485009 : Decimal;VAR lTotOvhSurchSoft@1100525007 : Decimal;VAR lTotRcdNotInvQuan@1100485008 : Decimal;VAR lTotRcdNotInvHours@1100485007 : Decimal;VAR lTotRcdNotInvAmount@1100485006 : Decimal;VAR SurchTotallLine@1100525001 : Record 11020221);
    VAR
      lvJobSetup@1210190000 : Record 315;
      SurchargeRec@1210190001 : Record 11020208;
      lEmployeeRec@1100485000 : Record 5200;
      DimValRec@1100485013 : Record 349;
      lServOrderRec@1100485002 : Record 11012823;
      lProjRec@1100485003 : Record 11072003;
      lCostControlRec@1100485016 : Record 11012047;
      lvProjElemRec@1100485017 : Record 11012010;
      SurchDimValRec@1100525000 : Record 349;
      DimMgt@1100485014 : Codeunit 408;
      lvFactorFirm@1100485004 : Decimal;
      lvFactorSoft@1100525004 : Decimal;
      lvOk@1100485015 : Boolean;
      lvServType@1100485018 : Code[20];
      lvTotalSurchargeFirm@1100525005 : Decimal;
      lvTotalSurchargeSoft@1100525006 : Decimal;
      SourceTypeDepartment@1100529600 : 'Fixed,EmplOrFixed,EmplJobOrFixed,All';
    BEGIN
      IF gvPurchLineAmount = 0 THEN
        EXIT;

      SetCompany;
      IF CURRENTCOMPANY <> COMPANYNAME THEN BEGIN
        lvJobSetup.CHANGECOMPANY(CURRENTCOMPANY);
        SurchargeRec.CHANGECOMPANY(CURRENTCOMPANY);
        lEmployeeRec.CHANGECOMPANY(CURRENTCOMPANY);
        DimValRec.CHANGECOMPANY(CURRENTCOMPANY);
        lServOrderRec.CHANGECOMPANY(CURRENTCOMPANY);
        lProjRec.CHANGECOMPANY(CURRENTCOMPANY);
        lCostControlRec.CHANGECOMPANY(CURRENTCOMPANY);
        lvProjElemRec.CHANGECOMPANY(CURRENTCOMPANY);
        SurchDimValRec.CHANGECOMPANY(CURRENTCOMPANY);
      END;

      lvJobSetup.GET;

      //CALL 15792.so
      //IF ("Outstanding Amount" = 0) AND ("Amt. Rcd. Not Invoiced" <> 0) THEN
      //  lvFactor := "Amt. Rcd. Not Invoiced" / gvPurchLineAmount;
      //
      //IF ("Outstanding Amount" <> 0) AND ("Amt. Rcd. Not Invoiced" = 0) THEN
      //  lvFactor := "Outstanding Amount" / gvPurchLineAmount;
      //
      //IF ("Outstanding Amount" <> 0) AND ("Amt. Rcd. Not Invoiced" <> 0) THEN
      //  lvFactor := ("Outstanding Amount" + "Amt. Rcd. Not Invoiced") / gvPurchLineAmount;
      //CALL 15792.eo

      lvFactorFirm := "Amt. Rcd. Not Invoiced";
      lvFactorSoft := "Outstanding Amount";

      //IF NOT lvJobSetup."Total Cost Excl. Open Purchase" THEN
      //  lvFactorSoft := 0;     Provisionally always calculate, at calculate total costs this can be checked.

      "Outstanding Amount" := 0;
      "Outstanding Quantity" := 0;
      "Outstanding Hours" := 0;
      "Quantity Rcd. Not Invoiced" := 0;
      "Hours Rcd. Not Invoiced" := 0;
      "Amt. Rcd. Not Invoiced" := 0;
      "Purchase Action" := ''; //No Purchase Action on surcharges

      lvTotalSurchargeFirm := 0;
      lvTotalSurchargeSoft := 0;

      IF (lPurchLine."Receiving Company" <> '') AND (lPurchLine."Receiving Company" <> CURRENTCOMPANY) THEN
        EXIT;

      IF "Cost Type" < "Cost Type"::Labor THEN
        EXIT;

      IF NOT lvJobSetup."Ovh.Surch.CostControl" THEN
        EXIT;

      //CALL 15792.sn
      IF (lvFactorFirm = 0) AND (lvFactorSoft = 0) THEN
        EXIT;
      lvFactorFirm := lvFactorFirm / gvPurchLineAmount;
      lvFactorSoft := lvFactorSoft / gvPurchLineAmount;
      //CALL 15792.en


      IF (lPurchLine."Employee No." <> '') THEN
        IF lEmployeeRec.GET(lPurchLine."Employee No.") THEN;

      IF ("Cost Type" = "Cost Type"::Labor) AND
         (lPurchLine."Employee No." <> '') THEN
      BEGIN
        IF (lEmployeeRec.External) AND
           (lEmployeeRec."External Post No Surcharge") THEN
          EXIT;
      END;

      SourceTypeDepartment := SourceTypeDepartment::EmplJobOrFixed;
      IF "Service Order No." <> '' THEN BEGIN
        lServOrderRec.GET("Service Order No.");
        IF lPurchLine."Additional Cost (Service)" THEN
          lvServType := lServOrderRec."Service Type (Other)"
        ELSE
          lvServType := lServOrderRec."Service Type";

        lvOk := SurchargeRec.GetSurchargesIC(
          1, lvServType, '', TRUE, "Cost Type" - 1, "Shortcut Dimension 2 Code", lPurchLine."Wage Component",
          lPurchLine."Shortcut Dimension 1 Code", lEmployeeRec."Trade Association", "Cost Component", Date,
          SurchargeRec, CURRENTCOMPANY, SourceTypeDepartment);
      END ELSE BEGIN
        IF lPurchLine."Job No." <> '' THEN BEGIN
          IF lProjRec.GET(lPurchLine."Job No.") THEN
            lvOk := SurchargeRec.GetSurchargesIC(
              0, lProjRec."Project Type", lPurchLine."Job No.", TRUE, "Cost Type" - 1, "Shortcut Dimension 2 Code",
              lPurchLine."Wage Component", lPurchLine."Shortcut Dimension 1 Code", lEmployeeRec."Trade Association",
              "Cost Component", Date, SurchargeRec, CURRENTCOMPANY, SourceTypeDepartment);
        END;
      END;

      DimMgt.SetCompany(CURRENTCOMPANY);
      IF "Shortcut Dimension 2 Code" <> '' THEN
        DimMgt.GetDimValueRec(2, "Shortcut Dimension 2 Code", DimValRec, TRUE, '')
      ELSE
        lvOk := FALSE;

      IF lvOk THEN
        REPEAT
          SurchargeRec.GetSurchargeDimVal(DimValRec, SurchDimValRec);
          "Shortcut Dimension 2 Code" := SurchDimValRec.Code;
          "Cost Type" := SurchDimValRec."Cost Type" + 1;
          IF SurchDimValRec."Cost Component" <> '' THEN
            "Cost Component" := SurchDimValRec."Cost Component";

          IF ("Project No." <> '') AND (SurchargeRec."Element Surcharge" <> '') THEN BEGIN
            IF NOT (lvProjElemRec.GET("Project No.", SurchargeRec."Element Surcharge")) THEN
              SurchargeRec.FIELDERROR("Element Surcharge", STRSUBSTNO(Text001,SurchargeRec."Element Surcharge","Project No."));
            Element := SurchargeRec."Element Surcharge";
          END;

          IF ("Project No." <> '') AND lProjRec."Cost Control Up to Date" THEN BEGIN
            IF NOT lCostControlRec.GET("Project No.", "Cost Type", "Shortcut Dimension 2 Code") THEN BEGIN
              IF lProjRec.GET("Project No.") THEN BEGIN  //SYM065
                lProjRec."Cost Control Up to Date" := FALSE;
                lProjRec.MODIFY;
              END;  //SYM065
            END;
          END;

          IF SurchargeRec.Percentage <> 0 THEN BEGIN
            IF SurchargeRec."Surcharge over Surcharge" THEN BEGIN
              "Overhead Surcharge Firm" := ROUND((lvFactorFirm * gvPurchLineAmount + lvTotalSurchargeFirm) * SurchargeRec.Percentage/100);
              "Overhead Surcharge Soft" := ROUND((lvFactorSoft * gvPurchLineAmount + lvTotalSurchargeSoft) * SurchargeRec.Percentage/100);
            END ELSE BEGIN
              "Overhead Surcharge Firm" := ROUND(lvFactorFirm * gvPurchLineAmount * SurchargeRec.Percentage/100);
              "Overhead Surcharge Soft" := ROUND(lvFactorSoft * gvPurchLineAmount * SurchargeRec.Percentage/100);
            END;
          END ELSE BEGIN
            "Overhead Surcharge Firm" := ROUND(lvFactorFirm * SurchargeRec.Amount * lPurchLine.Quantity);
            "Overhead Surcharge Soft" := ROUND(lvFactorSoft * SurchargeRec.Amount * lPurchLine.Quantity);
          END;

          lvTotalSurchargeFirm := lvTotalSurchargeFirm + "Overhead Surcharge Firm";
          lvTotalSurchargeSoft := lvTotalSurchargeSoft + "Overhead Surcharge Soft";

          lLineNo := lLineNo + 1;
          IF (LineMax <> 0) AND (lLineNo > LineMax) THEN BEGIN
            //When more then 9 surchargelines for linetype "Order"
            lLineNo := SaveLineNo + 1;
            LineMax := 0;
          END;

          IF ("Overhead Surcharge Firm" <> 0) OR ("Overhead Surcharge Soft" <> 0) THEN BEGIN
            "Coverage Account Surcharge" := SurchargeRec."Coverage Account";
            "Coverage Department Surcharge" := GetCoverageDepartmentSurcharge(SurchargeRec); // 30825.n
          END;

          "Line No." := lLineNo;
          INSERT;

          CountTotals(
            lTotOutstQuan, lTotOutstHours, lTotOutstAmount, lTotOvhSurchFirm, lTotOvhSurchSoft,
            lTotRcdNotInvQuan, lTotRcdNotInvHours, lTotRcdNotInvAmount);

          //Store Surcharge in TempTable to ease closing
          SurchTotallLine.SETRANGE("Order No.", lPurchLine."Document No.");
          SurchTotallLine.SETRANGE("Order Line No.", lPurchLine."Line No.");
          SurchTotallLine.SETRANGE("Shortcut Dimension 2 Code", "Shortcut Dimension 2 Code");
          SurchTotallLine.SETRANGE("Cost Type", "Cost Type");
          SurchTotallLine.SETRANGE("Cost Component", "Cost Component");
          SurchTotallLine.SETRANGE(Element, Element);

          IF ("Overhead Surcharge Firm" <> 0) OR ("Overhead Surcharge Soft" <> 0) THEN BEGIN
            SurchTotallLine.SETRANGE("Coverage Account Surcharge", SurchargeRec."Coverage Account");
            SurchTotallLine.SETRANGE("Coverage Department Surcharge", SurchargeRec."Coverage Department"); // 30825.n
          END ELSE BEGIN
            SurchTotallLine.SETRANGE("Coverage Account Surcharge");
            SurchTotallLine.SETRANGE("Coverage Department Surcharge"); // 30825.n
          END;

          IF SurchTotallLine.FINDFIRST THEN BEGIN
            SurchTotallLine."Overhead Surcharge Firm" := SurchTotallLine."Overhead Surcharge Firm" + "Overhead Surcharge Firm";
            SurchTotallLine."Overhead Surcharge Soft" := SurchTotallLine."Overhead Surcharge Soft" + "Overhead Surcharge Soft";
            SurchTotallLine.MODIFY;
          END ELSE BEGIN
            SurchTotallLine := Rec;
            SurchTotallLine.INIT;
            SurchTotallLine."Line No." := 0;
            SurchTotallLine."Overhead Surcharge Firm" := "Overhead Surcharge Firm";
            SurchTotallLine."Overhead Surcharge Soft" := "Overhead Surcharge Soft";
            SurchTotallLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
            SurchTotallLine."Cost Type" := "Cost Type";
            SurchTotallLine."Cost Component" := "Cost Component";
            SurchTotallLine.Element := Element;
            IF ("Overhead Surcharge Firm" <> 0) OR ("Overhead Surcharge Soft" <> 0) THEN BEGIN
              SurchTotallLine."Coverage Account Surcharge" := SurchargeRec."Coverage Account";
              SurchTotallLine."Coverage Department Surcharge" := GetCoverageDepartmentSurcharge(SurchargeRec); // 30825.n
            END;

            REPEAT
              SurchTotallLine."Line No." := SurchTotallLine."Line No." + 1;
            UNTIL SurchTotallLine.INSERT;
          END;

        UNTIL SurchargeRec.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertOrderControlLineToBuild@1100525000(PurchLine@1100525000 : Record 39;ProjectNo@1100525001 : Code[20]);
    VAR
      OrderControlLineToBuild@1100525002 : Record 11020592;
    BEGIN
      IF CURRENTCOMPANY <> COMPANYNAME THEN
        OrderControlLineToBuild.CHANGECOMPANY(CURRENTCOMPANY);
      IF NOT OrderControlLineToBuild.GET(PurchLine."Document No.", PurchLine."Line No.", ProjectNo) THEN BEGIN
        IF ProjRec."No." <> ProjectNo THEN
          ProjRec.GET(ProjectNo);
        OrderControlLineToBuild.INIT;
        OrderControlLineToBuild."Order No." := PurchLine."Document No.";
        OrderControlLineToBuild."Order Line No." := PurchLine."Line No.";
        OrderControlLineToBuild."Project No." := ProjectNo;
        OrderControlLineToBuild."Main Project No." := ProjRec."Main Project";
        OrderControlLineToBuild.INSERT;
      END;
    END;

    PROCEDURE GetCoverageDepartmentSurcharge@1210190002(SurchargeRec@1210190002 : Record 11020208) : Code[20];
    VAR
      CoverageDepartment@1210190000 : Code[20];
      PurchLine@1210190005 : Record 39;
      TradeAssRec@1210190001 : Record 11012015;
      EmplRec@1210190003 : Record 5200;
      ProjRec@1210190006 : Record 11072003;
      ServiceOrderRec@1210190004 : Record 11012823;
    BEGIN
      // 30825.n
      SetCompany;
      IF CURRENTCOMPANY <> COMPANYNAME THEN BEGIN
        PurchLine.CHANGECOMPANY(CURRENTCOMPANY);
        TradeAssRec.CHANGECOMPANY(CURRENTCOMPANY);
        EmplRec.CHANGECOMPANY(CURRENTCOMPANY);
        ProjRec.CHANGECOMPANY(CURRENTCOMPANY);
        ServiceOrderRec.CHANGECOMPANY(CURRENTCOMPANY);
      END;

      CoverageDepartment := '';
      CASE SurchargeRec."Source Type Department" OF
        SurchargeRec."Source Type Department"::Employee:
          BEGIN
            IF PurchLine.GET(PurchLine."Document Type"::Order,"Order No.","Order Line No.") THEN BEGIN
              IF EmplRec.GET(PurchLine."Employee No.") THEN
              BEGIN
                IF TradeAssRec.GET(EmplRec."Trade Association") THEN
                BEGIN
                  IF TradeAssRec."Source Department Code" = TradeAssRec."Source Department Code"::"Trade Association" THEN
                    CoverageDepartment := TradeAssRec."Department Code"
                  ELSE
                    CoverageDepartment := EmplRec."Global Dimension 1 Code";
                END ELSE BEGIN
                  CoverageDepartment := EmplRec."Global Dimension 1 Code";
                END;
              END;
            END;
          END;
        SurchargeRec."Source Type Department"::Job:
          BEGIN
            IF "Project No." <> '' THEN BEGIN
              IF ProjRec.GET("Project No.") THEN
                CoverageDepartment := ProjRec."Global Dimension 1 Code";
            END;
            IF "Service Order No." <> '' THEN BEGIN
              IF ServiceOrderRec.GET("Service Order No.") THEN
                CoverageDepartment := ServiceOrderRec."Global Dimension 1 Code";
            END;
          END;
        SurchargeRec."Source Type Department"::Fixed:
          CoverageDepartment := SurchargeRec."Coverage Department"
      END;
      EXIT(CoverageDepartment);
    END;

    LOCAL PROCEDURE SetCompany@1100529601();
    BEGIN
      PurchReceiptLine.CHANGECOMPANY(CURRENTCOMPANY);
      PurchInvLine.CHANGECOMPANY(CURRENTCOMPANY);
      PurchCredMemoLine.CHANGECOMPANY(CURRENTCOMPANY);
      PurchHeader.CHANGECOMPANY(CURRENTCOMPANY);
      ServOrderRec.CHANGECOMPANY(CURRENTCOMPANY);
      ProjRec.CHANGECOMPANY(CURRENTCOMPANY);
      PurchSetup.CHANGECOMPANY(CURRENTCOMPANY);
      CurrExchRate.CHANGECOMPANY(CURRENTCOMPANY);
      ReservedRec.CHANGECOMPANY(CURRENTCOMPANY);
    END;

    LOCAL PROCEDURE DetermineDateOfClosingLine@1100528500(LastDate@1100528500 : Date) : Date;
    BEGIN
      IF PurchHeader."Closing Date" > LastDate THEN
        EXIT(PurchHeader."Closing Date");

      EXIT(LastDate);
    END;

    BEGIN
    {
      30-11-2011 Add field "Coverage Department Surcharge" // 30825.n
      4PS, 20-12-2013, C010708, MainTainSQLIndex "Main Project No.,Project No.,Shortcut Dimension 2 Code,Date,Purchase Action" activated
                                Four MaintainIndex deactivated
    }
    END.
  }
}

