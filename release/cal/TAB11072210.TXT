OBJECT Table 11072210 SO Plant Maintenance Scheme
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Service Order No.");
               TESTFIELD("Maintenance Scheme");
               "Inspection Updated" := FALSE;
               AddServiceOrderBudgetAndInspections;
             END;

    OnModify=BEGIN
               IF UpdatePlantInspection(GetOldInspectionResult) THEN
                 "Inspection Updated" := TRUE;
             END;

    OnDelete=VAR
               ServiceOrderBudgetLine@1100528800 : Record 11012875;
               ServiceOrderInspectionLine@1100528801 : Record 11071753;
             BEGIN
               ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
               ServiceOrderBudgetLine.SETRANGE("Service Order No.", "Service Order No.");
               ServiceOrderBudgetLine.SETRANGE("Maintenance Scheme Type", ServiceOrderBudgetLine."Maintenance Scheme Type"::Plant);
               ServiceOrderBudgetLine.SETRANGE("Maintenance Scheme", "Maintenance Scheme");
               ServiceOrderBudgetLine.DELETEALL;

               ServiceOrderInspectionLine.SETRANGE("Service Order No.", "Service Order No.");
               ServiceOrderInspectionLine.SETRANGE("Maintenance Scheme Code", "Maintenance Scheme");
               ServiceOrderInspectionLine.SETRANGE("Inspection Type", ServiceOrderInspectionLine."Inspection Type"::Plant);
               ServiceOrderInspectionLine.DELETEALL;
             END;

    OnRename=BEGIN
               ERROR(Text001);
             END;

    CaptionML=ENU=Service Order Plant Maintenance Scheme;
  }
  FIELDS
  {
    { 10  ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order";
                                                   CaptionML=[ENU=Service Order No.;
                                                              NOR=Serviceordrenr.;
                                                              SVE=Serviceordernr];
                                                   NotBlank=Yes }
    { 20  ;   ;Maintenance Scheme  ;Code20        ;TableRelation="Plant - Maintenance Scheme"."Maintenance Scheme" WHERE (Plant Type=FIELD(Plant Type),
                                                                                                                          Plant No.=FIELD(Plant No.));
                                                   OnValidate=VAR
                                                                PlantMaintenanceScheme@1100529000 : Record 11072677;
                                                              BEGIN
                                                                IF "Maintenance Scheme" <> '' THEN BEGIN
                                                                  ReadAndCheckServiceOrder;
                                                                  IF ServiceOrder."Plant Company" <> '' THEN
                                                                    PlantMaintenanceScheme.CHANGECOMPANY(ServiceOrder."Plant Company");
                                                                  PlantMaintenanceScheme.GET(ServiceOrder."Plant Type", ServiceOrder."Plant Number", "Maintenance Scheme");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupPlantMaintenanceScheme;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Maintenance Scheme;
                                                              NOR=Vedlikeholdsskjema;
                                                              SVE=Underh†llsschema];
                                                   NotBlank=Yes }
    { 30  ;   ;Maintenance Scheme Description;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Stnd. Maintenance Scheme".Description WHERE (Code=FIELD(Maintenance Scheme)));
                                                   CaptionML=[ENU=Maintenance Scheme Description;
                                                              NOR=Beskrivelse av vedlikeholdskjema;
                                                              SVE=Beskrivning av underh†llsschema];
                                                   Editable=No }
    { 40  ;   ;Plant Type          ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order"."Plant Type" WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=[ENU=Plant Type;
                                                              SVE=Maskintyp];
                                                   Editable=No }
    { 45  ;   ;Plant No.           ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order"."Plant Number" WHERE (No.=FIELD(Service Order No.)));
                                                   CaptionML=[ENU=Plant No.;
                                                              SVE=Maskinnr];
                                                   Editable=No }
    { 110 ;   ;Inspected on        ;Date          ;OnValidate=BEGIN
                                                                CheckInspectionUpdated(FIELDNO("Inspected on"));
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Inspected on;
                                                              SVE=Inspekterad den] }
    { 115 ;   ;Inspected by        ;Code20        ;TableRelation="Resource (WOP)" WHERE (Type=FILTER(Employee|Subcontractor));
                                                   OnValidate=BEGIN
                                                                CheckInspectionUpdated(FIELDNO("Inspected by"));
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Inspected by;
                                                              SVE=Inspekterad av] }
    { 120 ;   ;Certificate No.     ;Code20        ;OnValidate=BEGIN
                                                                CheckInspectionUpdated(FIELDNO("Certificate No."));
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Certificate No.;
                                                              SVE=Certifikatnr] }
    { 125 ;   ;Certificate Date    ;Date          ;OnValidate=BEGIN
                                                                CheckInspectionUpdated(FIELDNO("Certificate Date"));
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Certificate Date;
                                                              SVE=Certifikatdatum] }
    { 130 ;   ;Report No.          ;Code20        ;OnValidate=BEGIN
                                                                CheckInspectionUpdated(FIELDNO("Report No."));
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Report No.;
                                                              SVE=Rapportnr] }
    { 140 ;   ;Inspection Result   ;Option        ;OnValidate=VAR
                                                                ServiceOrder@1100529000 : Record 11012823;
                                                              BEGIN
                                                                IF "Inspection Result" <> "Inspection Result"::" " THEN BEGIN
                                                                  ServiceOrder.GET("Service Order No.");
                                                                  IF (ServiceOrder.Status < ServiceOrder.Status::"In Process") OR (ServiceOrder.Status = ServiceOrder.Status::Cancelled) THEN
                                                                    ServiceOrder.FIELDERROR(Status);
                                                                  TESTFIELD("Inspected on");
                                                                  CheckInspectionUpdated(FIELDNO("Inspection Result"));
                                                                END;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Inspection Result;
                                                              SVE=Inspektionsresultat];
                                                   OptionCaptionML=[ENU=" ,Approved,Disapproved";
                                                                    SVE=" ,Godk„nd,Nekad"];
                                                   OptionString=[ ,Approved,Disapproved] }
    { 150 ;   ;Inspection Location ;Code20        ;TableRelation="Plant Location";
                                                   OnValidate=VAR
                                                                PlantLocation@1100529000 : Record 11012554;
                                                                ServiceOrder@1100529001 : Record 11012823;
                                                              BEGIN
                                                                IF "Inspection Location" <> '' THEN BEGIN
                                                                  TESTFIELD("Service Order No.");
                                                                  ServiceOrder.GET("Service Order No.");
                                                                  IF ServiceOrder."Plant Company" <> '' THEN
                                                                    PlantLocation.CHANGECOMPANY(ServiceOrder."Plant Company");
                                                                  PlantLocation.GET("Inspection Location");
                                                                  CheckInspectionUpdated(FIELDNO("Inspection Location"));
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              PlantLocation@1100529001 : Record 11012554;
                                                              ServiceOrder@1100529000 : Record 11012823;
                                                            BEGIN
                                                              TESTFIELD("Service Order No.");
                                                              ServiceOrder.GET("Service Order No.");
                                                              IF ServiceOrder."Plant Company" <> '' THEN
                                                                PlantLocation.CHANGECOMPANY(ServiceOrder."Plant Company");
                                                              PlantLocation.Code := "Inspection Location";
                                                              IF PAGE.RUNMODAL(0, PlantLocation) = ACTION::LookupOK THEN
                                                                VALIDATE("Inspection Location", PlantLocation.Code);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Inspection Location;
                                                              SVE=Inspektion, lagerst„lle] }
    { 160 ;   ;Inspection Updated  ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Inspection Updated;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Service Order No.,Maintenance Scheme    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100529000 : TextConst 'ENU=Rename not allowed;SVE=Det „r inte till†tet att byta namn.';
      ServiceOrder@1100529001 : Record 11012823;

    PROCEDURE GetPlantMaintenanceSchemeFields@1100529005(VAR PlantMaintenanceSchemeFields@1100529000 : Record 11072677) : Boolean;
    VAR
      ServiceOrder@1100529004 : Record 11012823;
      PlantMaintenanceScheme@1100529005 : Record 11072677;
      PlantStndMaintenanceScheme@1100529002 : Record 11072673;
      PlantNumber@1100529001 : Record 11012552;
      InspectionType@1100529006 : Record 11012562;
      Inspection@1100529007 : Record 11012564;
    BEGIN
      CLEAR(PlantMaintenanceSchemeFields);
      IF ("Service Order No." = '') OR ("Maintenance Scheme" = '') THEN
        EXIT;
      IF NOT ServiceOrder.GET("Service Order No.") THEN
        EXIT;
      IF (ServiceOrder."Plant Type" = '') OR (ServiceOrder."Plant Number" = '') THEN
        EXIT;
      IF ServiceOrder."Plant Company" <> '' THEN BEGIN
        PlantMaintenanceScheme.CHANGECOMPANY(ServiceOrder."Plant Company");
        PlantStndMaintenanceScheme.CHANGECOMPANY(ServiceOrder."Plant Company");
        PlantNumber.CHANGECOMPANY(ServiceOrder."Plant Company");
        InspectionType.CHANGECOMPANY(ServiceOrder."Plant Company");
        Inspection.CHANGECOMPANY(ServiceOrder."Plant Company");
      END;
      IF NOT PlantMaintenanceScheme.GET(ServiceOrder."Plant Type", ServiceOrder."Plant Number", "Maintenance Scheme") THEN
        EXIT;
      PlantMaintenanceSchemeFields := PlantMaintenanceScheme;
      CLEAR(PlantMaintenanceSchemeFields."Interval Maintenance");
      PlantMaintenanceSchemeFields."Interval Meter Reading" := 0;
      PlantMaintenanceSchemeFields."Specific Meter Reading" := 0;
      PlantMaintenanceSchemeFields.Meter := '';
      PlantMaintenanceSchemeFields."Meter Reading Type" := '';
      IF PlantMaintenanceScheme."Inspection Type" = '' THEN BEGIN
        IF (FORMAT(PlantMaintenanceScheme."Interval Maintenance") <> '') THEN
          PlantMaintenanceSchemeFields."Interval Maintenance" := PlantMaintenanceScheme."Interval Maintenance"
        ELSE BEGIN
          IF PlantMaintenanceScheme."Interval Meter Reading" <> 0 THEN
            PlantMaintenanceSchemeFields."Interval Meter Reading" := PlantMaintenanceScheme."Interval Meter Reading"
          ELSE BEGIN
            IF PlantMaintenanceScheme."Specific Meter Reading" <> 0 THEN
              PlantMaintenanceSchemeFields."Specific Meter Reading" := PlantMaintenanceScheme."Specific Meter Reading";
          END;
        END;
        IF (PlantMaintenanceScheme."Interval Meter Reading" <> 0) OR (PlantMaintenanceScheme."Specific Meter Reading" <> 0) THEN BEGIN
          PlantMaintenanceSchemeFields.Meter := PlantMaintenanceScheme.Meter;
          PlantMaintenanceSchemeFields."Meter Reading Type" := PlantMaintenanceScheme."Meter Reading Type";
        END;
      END ELSE BEGIN
        PlantMaintenanceScheme.GetInspectionTypeInterval(
          PlantMaintenanceSchemeFields."Interval Maintenance", PlantMaintenanceSchemeFields."Interval Meter Reading", ServiceOrder."Plant Company");
        Inspection.SETRANGE("Plant Type", PlantMaintenanceScheme."Plant Type");
        Inspection.SETRANGE("Plant No.", PlantMaintenanceScheme."Plant No.");
        Inspection.SETRANGE("Inspection Type", PlantMaintenanceScheme."Inspection Type");
        Inspection.SETRANGE("Maintenance Scheme", PlantMaintenanceScheme."Maintenance Scheme");
        IF Inspection.FINDLAST THEN BEGIN
          PlantMaintenanceSchemeFields.Meter := Inspection."Plant Meter";
          PlantMaintenanceSchemeFields."Meter Reading Type" := Inspection."Meter Reading Type";
        END;
        IF ServiceOrder."Plant Company" = '' THEN
          PlantMaintenanceSchemeFields.CALCFIELDS("Inspection Type Description")
        ELSE BEGIN
          IF InspectionType.GET(PlantMaintenanceScheme."Inspection Type") THEN
            PlantMaintenanceSchemeFields."Inspection Type Description" := InspectionType.Description;
        END;
      END;
      IF ServiceOrder."Plant Company" = '' THEN
        PlantMaintenanceSchemeFields.CALCFIELDS("Inspection No.", "Maintenance Scheme Description")
      ELSE BEGIN
        IF PlantNumber.GET(PlantMaintenanceScheme."Plant Type", PlantMaintenanceScheme."Plant No.") THEN
          PlantMaintenanceSchemeFields."Inspection No." := PlantNumber."Inspection No.";
        IF PlantStndMaintenanceScheme.GET("Maintenance Scheme") THEN
          PlantMaintenanceSchemeFields."Maintenance Scheme Description" := PlantStndMaintenanceScheme.Description;
      END;
    END;

    LOCAL PROCEDURE ReadAndCheckServiceOrder@1100529001();
    VAR
      PlantType@1100529000 : Record 11012551;
    BEGIN
      ServiceOrder.GET("Service Order No.");
      ServiceOrder.TESTFIELD("Plant Type");
      IF ServiceOrder."Plant Company" <> '' THEN
        PlantType.CHANGECOMPANY(ServiceOrder."Plant Company");
      PlantType.GET(ServiceOrder."Plant Type");
      IF NOT PlantType.Bulk THEN
        ServiceOrder.TESTFIELD("Plant Number");
    END;

    LOCAL PROCEDURE AddServiceOrderBudgetAndInspections@1100529000();
    VAR
      TmpPlantMaintenanceSchemeVersionLine@1100529000 : TEMPORARY Record 11072675;
      TmpPlantInspectionLine@1100529002 : TEMPORARY Record 11072684;
      PlantMaintenanceManagement@1100529004 : Codeunit 11012872;
      MaintenanceSchemeLevel@1100529003 : 'Maintenance Scheme,Plant Type,Plant Number';
      NextLineNo@1100529001 : Integer;
      BaseInspectionList@1100529005 : Code[20];
    BEGIN
      ReadAndCheckServiceOrder;

      PlantMaintenanceManagement.GetApplicableActivities(
        TmpPlantMaintenanceSchemeVersionLine,  MaintenanceSchemeLevel::"Plant Number",
        ServiceOrder."Plant Type", ServiceOrder."Plant Number", "Maintenance Scheme",
        ServiceOrder."Starting Date", FALSE, ServiceOrder."Plant Company");
      IF TmpPlantMaintenanceSchemeVersionLine.FINDSET THEN BEGIN
        NextLineNo := GetNextServiceOrderBudgetLineNo;
        REPEAT
          InsertServiceOrderBudgetLine(TmpPlantMaintenanceSchemeVersionLine, NextLineNo, ServiceOrder."Starting Date");
          NextLineNo := NextLineNo + 10000;
        UNTIL TmpPlantMaintenanceSchemeVersionLine.NEXT = 0;
        CreateServiceAdviceOrderLines;
      END;

      BaseInspectionList := PlantMaintenanceManagement.GetBaseInspectionListByPlantNumber(
        ServiceOrder."Plant Type",ServiceOrder."Plant Number","Maintenance Scheme", ServiceOrder."Plant Company");
      PlantMaintenanceManagement.GetApplicableInspectionLines(
        TmpPlantInspectionLine, MaintenanceSchemeLevel::"Plant Number",
        ServiceOrder."Plant Type", ServiceOrder."Plant Number", "Maintenance Scheme",
        ServiceOrder."Starting Date", BaseInspectionList, FALSE, ServiceOrder."Plant Company");
      IF TmpPlantInspectionLine.FINDSET THEN BEGIN
        NextLineNo := GetNextServiceOrderInspectionLineNo;
        REPEAT
          InsertServiceOrderInspectionLine(TmpPlantInspectionLine, NextLineNo);
          NextLineNo := NextLineNo + 10000;
        UNTIL TmpPlantInspectionLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetNextServiceOrderBudgetLineNo@1100528805() : Integer;
    VAR
      ServiceOrderBudgetLine@1100528801 : Record 11012875;
    BEGIN
      ServiceOrderBudgetLine.SETRANGE("Budget Type",ServiceOrderBudgetLine."Budget Type"::Order);
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", "Service Order No.");
      ServiceOrderBudgetLine.SETRANGE("Service Contract No.", '');
      ServiceOrderBudgetLine.SETRANGE("Object No.", '');
      ServiceOrderBudgetLine.SETRANGE("Maintenance Scheme", "Maintenance Scheme");
      IF ServiceOrderBudgetLine.FINDLAST THEN
        EXIT(ServiceOrderBudgetLine."Line No." + 10000);
      EXIT(10000);
    END;

    LOCAL PROCEDURE InsertServiceOrderBudgetLine@1100528800(VAR PlantMaintenanceSchemeVersionLine@1100528800 : TEMPORARY Record 11072675;NextLineNo@1100528802 : Integer;ServiceOrderStartingDate@1100528803 : Date);
    VAR
      ServiceOrderBudgetLine@1100528801 : Record 11012875;
    BEGIN
      ServiceOrderBudgetLine.INIT;
      ServiceOrderBudgetLine."Budget Type" := ServiceOrderBudgetLine."Budget Type"::Order;
      ServiceOrderBudgetLine.VALIDATE("Service Order No.", "Service Order No.");
      ServiceOrderBudgetLine."Service Contract No." := '';
      ServiceOrderBudgetLine."Object No." := '';
      ServiceOrderBudgetLine."Maintenance Scheme Type" := ServiceOrderBudgetLine."Maintenance Scheme Type"::Plant;
      ServiceOrderBudgetLine."Maintenance Scheme" := "Maintenance Scheme";
      ServiceOrderBudgetLine."Line No." := NextLineNo;
      ServiceOrderBudgetLine.INSERT(TRUE);
      ServiceOrderBudgetLine.VALIDATE("Cost Type", PlantMaintenanceSchemeVersionLine."Cost Type");
      ServiceOrderBudgetLine."Item No." := PlantMaintenanceSchemeVersionLine."Item No.";
      ServiceOrderBudgetLine.Manufacturer := PlantMaintenanceSchemeVersionLine.Manufacturer;
      ServiceOrderBudgetLine."Basic Item" := PlantMaintenanceSchemeVersionLine."Basic Item";
      ServiceOrderBudgetLine."Trade Item" := PlantMaintenanceSchemeVersionLine."Trade Item";
      ServiceOrderBudgetLine."Vendor (Trade Item)" := PlantMaintenanceSchemeVersionLine."Vendor (Trade Item)";
      ServiceOrderBudgetLine.Vendor := PlantMaintenanceSchemeVersionLine.Vendor;
      ServiceOrderBudgetLine."Cost Object" := PlantMaintenanceSchemeVersionLine."Cost Object";
      ServiceOrderBudgetLine."Cost Component" := PlantMaintenanceSchemeVersionLine."Cost Component";
      ServiceOrderBudgetLine.Description := PlantMaintenanceSchemeVersionLine.Description;
      ServiceOrderBudgetLine."Description 2" := PlantMaintenanceSchemeVersionLine."Description 2";
      ServiceOrderBudgetLine."External Text" := PlantMaintenanceSchemeVersionLine.Text;
      ServiceOrderBudgetLine."External Text Block" := PlantMaintenanceSchemeVersionLine."Text Block";
      ServiceOrderBudgetLine."Index Date" := ServiceOrderStartingDate;
      ServiceOrderBudgetLine."Additional Cost" := PlantMaintenanceSchemeVersionLine."Additional Cost";
      ServiceOrderBudgetLine.Discipline := PlantMaintenanceSchemeVersionLine.Discipline;
      ServiceOrderBudgetLine."Trade Speciality" := PlantMaintenanceSchemeVersionLine."Trade Speciality";
      ServiceOrderBudgetLine."Trade Expertise" := PlantMaintenanceSchemeVersionLine."Trade Expertise";
      ServiceOrderBudgetLine.Code := PlantMaintenanceSchemeVersionLine.Code;
      ServiceOrderBudgetLine."Unit of Measure" := PlantMaintenanceSchemeVersionLine."Unit of Measure";
      ServiceOrderBudgetLine.Norm := PlantMaintenanceSchemeVersionLine.Norm;
      IF ServiceOrderBudgetLine.Norm <> 0 THEN
        ServiceOrderBudgetLine."Production Rate"  := 1 / ServiceOrderBudgetLine.Norm;
      ServiceOrderBudgetLine."Rate Code" := PlantMaintenanceSchemeVersionLine."Rate Code";
      ServiceOrderBudgetLine.Rate := PlantMaintenanceSchemeVersionLine.Rate;
      ServiceOrderBudgetLine.Hours := PlantMaintenanceSchemeVersionLine.Hours;
      ServiceOrderBudgetLine.Price := PlantMaintenanceSchemeVersionLine."Cost Price";
      ServiceOrderBudgetLine."Gross Price" := PlantMaintenanceSchemeVersionLine."Gross Price";
      ServiceOrderBudgetLine."Discount %" := PlantMaintenanceSchemeVersionLine."Purchase Discount %";
      ServiceOrderBudgetLine.VALIDATE(Quantity, PlantMaintenanceSchemeVersionLine.Quantity);
      ServiceOrderBudgetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetNextServiceOrderInspectionLineNo@1100528801() : Integer;
    VAR
      ServiceOrderInspectionLine@1100528801 : Record 11071753;
    BEGIN
      ServiceOrderInspectionLine.SETRANGE("Service Order No.", "Service Order No.");
      ServiceOrderInspectionLine.SETRANGE("Service Object No.", '');
      ServiceOrderInspectionLine.SETRANGE("Maintenance Scheme Code", "Maintenance Scheme");
      IF ServiceOrderInspectionLine.FINDLAST THEN
        EXIT(ServiceOrderInspectionLine."Line No." + 10000);
      EXIT(10000);
    END;

    LOCAL PROCEDURE InsertServiceOrderInspectionLine@1100528807(VAR PlantInspectionLine@1100528800 : TEMPORARY Record 11072684;NextLineNo@1100528802 : Integer);
    VAR
      ServiceOrderInspectionLine@1100528801 : Record 11071753;
    BEGIN
      ServiceOrderInspectionLine.INIT;
      ServiceOrderInspectionLine."Service Order No." := "Service Order No.";
      ServiceOrderInspectionLine."Service Object No." := '';
      ServiceOrderInspectionLine."Inspection Type" := ServiceOrderInspectionLine."Inspection Type"::Plant;
      ServiceOrderInspectionLine."Maintenance Scheme Code" := "Maintenance Scheme";
      ServiceOrderInspectionLine."Line No." := NextLineNo;
      ServiceOrderInspectionLine."Service Contract No." := '';
      ServiceOrderInspectionLine.Code :=  PlantInspectionLine."Plant No.";
      ServiceOrderInspectionLine."Belongs to Scheme" := PlantInspectionLine."Maintenance Scheme";
      ServiceOrderInspectionLine."Index Date" := PlantInspectionLine."Index Date";
      ServiceOrderInspectionLine."Inspection Line No." := PlantInspectionLine."Line No.";
      ServiceOrderInspectionLine.Type := PlantInspectionLine.Type;
      ServiceOrderInspectionLine."Inspection Code" := PlantInspectionLine."Inspection Code";
      ServiceOrderInspectionLine.Description := PlantInspectionLine.Description;
      ServiceOrderInspectionLine."Description 2" := PlantInspectionLine."Description 2";
      ServiceOrderInspectionLine."Field Type" := PlantInspectionLine."Field Type";
      ServiceOrderInspectionLine."Unit Of Measure" := PlantInspectionLine."Unit Of Measure";
      ServiceOrderInspectionLine."Inspection Group Code" := PlantInspectionLine."Inspection Group Code";
      ServiceOrderInspectionLine.Mandatory := PlantInspectionLine.Mandatory;
      ServiceOrderInspectionLine."Belongs to Base Insp. List" := PlantInspectionLine."Base Inspection List";
      ServiceOrderInspectionLine."Plant Type" := PlantInspectionLine."Plant Type";
      ServiceOrderInspectionLine.INSERT;
    END;

    LOCAL PROCEDURE CreateServiceAdviceOrderLines@1100529006();
    VAR
      ServiceOrderBudgetLine@1100529000 : Record 11012875;
      AdviceOrderMgt@1100529001 : Codeunit 11012041;
    BEGIN
      ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrder."No.");
      ServiceOrderBudgetLine.SETRANGE("Service Contract No.", '');
      ServiceOrderBudgetLine.SETRANGE("Object No.", '');
      ServiceOrderBudgetLine.SETRANGE("Maintenance Scheme Type", ServiceOrderBudgetLine."Maintenance Scheme Type"::Plant);
      ServiceOrderBudgetLine.SETRANGE("Maintenance Scheme", "Maintenance Scheme");
      ServiceOrderBudgetLine.SETFILTER("Cost Type", '<>%1', ServiceOrderBudgetLine."Cost Type"::Labor);
      ServiceOrderBudgetLine.SETRANGE(Advised, FALSE);
      IF NOT ServiceOrderBudgetLine.ISEMPTY THEN
        AdviceOrderMgt.CreateServiceAdvice(ServiceOrderBudgetLine, FALSE);
    END;

    LOCAL PROCEDURE UpdatePlantInspection@1100529007(OldInspectionResult@1100529000 : Option) InspectionUpdated : Boolean;
    VAR
      ServiceOrder@1100529004 : Record 11012823;
      PlantMaintenanceScheme@1100529001 : Record 11072677;
      PlantTypeInspectionType@1100529006 : Record 11012563;
      Inspection@1100529002 : Record 11012564;
      ProcessInspections@1100529003 : Codeunit 11012580;
      PlantServiceMaintWSRequest@1100529005 : Codeunit 11012598;
    BEGIN
      IF ("Inspection Result" = "Inspection Result"::" ") OR ("Inspection Result" = OldInspectionResult) THEN
        EXIT;
      ServiceOrder.GET("Service Order No.");
      IF ServiceOrder."Plant Company" <> '' THEN BEGIN
        PlantMaintenanceScheme.CHANGECOMPANY(ServiceOrder."Plant Company");
        PlantTypeInspectionType.CHANGECOMPANY(ServiceOrder."Plant Company");
        Inspection.CHANGECOMPANY(ServiceOrder."Plant Company");
      END;
      IF NOT PlantMaintenanceScheme.GET(ServiceOrder."Plant Type", ServiceOrder."Plant Number", "Maintenance Scheme") THEN
        EXIT;
      IF PlantMaintenanceScheme."Inspection Type" = '' THEN
        EXIT;
      IF NOT PlantTypeInspectionType.GET(ServiceOrder."Plant Type", PlantMaintenanceScheme."Inspection Type") THEN
        EXIT;
      IF NOT PlantTypeInspectionType."Upd. Inspection from SO Maint." THEN
        EXIT;

      Inspection.SETRANGE("Plant Type", ServiceOrder."Plant Type");
      Inspection.SETRANGE("Plant No.", ServiceOrder."Plant Number");
      Inspection.SETRANGE("Inspection Type", PlantMaintenanceScheme."Inspection Type");
      Inspection.SETRANGE("Maintenance Scheme", "Maintenance Scheme");
      IF Inspection.ISEMPTY THEN
        EXIT;
      Inspection.SETCURRENTKEY("Plant Type", "Plant No.", "Inspected on");
      Inspection.SETFILTER("Inspected on", '>%1', "Inspected on");
      IF NOT Inspection.ISEMPTY THEN
        EXIT;

      IF (ServiceOrder."Plant Company" = '') OR (ServiceOrder."Plant Company" = COMPANYNAME) THEN BEGIN
        InspectionUpdated := ProcessInspections.ServiceOrder_Process(
          ServiceOrder."Plant Type", ServiceOrder."Plant Number",
          PlantMaintenanceScheme."Inspection Type", Rec);
      END ELSE BEGIN
        InspectionUpdated := PlantServiceMaintWSRequest.UpdatePlantInspection(
          ServiceOrder."Plant Company", Rec,
          ServiceOrder."Plant Type", ServiceOrder."Plant Number",
          PlantMaintenanceScheme."Inspection Type");
      END;
      EXIT(InspectionUpdated);
    END;

    LOCAL PROCEDURE GetOldInspectionResult@1100529009() : Integer;
    VAR
      SOPlantMaintenanceScheme@1100529000 : Record 11072210;
    BEGIN
      IF SOPlantMaintenanceScheme.GET("Service Order No.", "Maintenance Scheme") THEN
        EXIT(SOPlantMaintenanceScheme."Inspection Result");
      EXIT(0);
    END;

    LOCAL PROCEDURE CheckInspectionUpdated@1100529011(FieldNumber@1100529000 : Integer);
    BEGIN
      IF NOT "Inspection Updated" THEN
        EXIT;
      IF GetOldInspectionResult = "Inspection Result"::" " THEN
        EXIT;
      CASE FieldNumber OF
        FIELDNO("Inspected on"):
          IF "Inspected on" = xRec."Inspected on" THEN
            EXIT;
        FIELDNO("Inspected by"):
          IF "Inspected by" = xRec."Inspected by" THEN
            EXIT;
        FIELDNO("Certificate No."):
          IF "Certificate No." = xRec."Certificate No." THEN
            EXIT;
        FIELDNO("Certificate Date"):
          IF "Certificate Date" = xRec."Certificate Date" THEN
            EXIT;
        FIELDNO("Report No."):
          IF "Report No." = xRec."Report No." THEN
            EXIT;
        FIELDNO("Inspection Location"):
          IF "Inspection Location" = xRec."Inspection Location" THEN
            EXIT;
        FIELDNO("Inspection Result"):
          IF ("Inspection Result" = xRec."Inspection Result") OR ("Inspection Result" = "Inspection Result"::" ") THEN
            EXIT;
      END;
      TESTFIELD("Inspection Updated", FALSE);
    END;

    PROCEDURE ShowBudgetLines@1100529002();
    VAR
      ServiceOrderBudgetLine@1100529000 : Record 11012875;
    BEGIN
      TESTFIELD("Service Order No.");
      TESTFIELD("Maintenance Scheme");
      ServiceOrderBudgetLine.FILTERGROUP(4);
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", "Service Order No.");
      ServiceOrderBudgetLine.SETRANGE("Maintenance Scheme", "Maintenance Scheme");
      ServiceOrderBudgetLine.SETRANGE("Maintenance Scheme Type", ServiceOrderBudgetLine."Maintenance Scheme Type"::Plant);
      ServiceOrderBudgetLine.FILTERGROUP(0);
      PAGE.RUN(PAGE::"Service Order Budget Lines 2", ServiceOrderBudgetLine);
    END;

    PROCEDURE ShowInspectionLines@1100529003();
    VAR
      ServiceOrderInspectionLine@1100529000 : Record 11071753;
    BEGIN
      TESTFIELD("Service Order No.");
      TESTFIELD("Maintenance Scheme");
      ServiceOrderInspectionLine.FILTERGROUP(4);
      ServiceOrderInspectionLine.SETRANGE("Service Order No.", "Service Order No.");
      ServiceOrderInspectionLine.SETRANGE("Maintenance Scheme Code", "Maintenance Scheme");
      ServiceOrderInspectionLine.SETRANGE("Inspection Type", ServiceOrderInspectionLine."Inspection Type"::Plant);
      ServiceOrderInspectionLine.FILTERGROUP(0);
      PAGE.RUN(0, ServiceOrderInspectionLine);
    END;

    PROCEDURE ShowPlantParts@1100529004();
    VAR
      ServiceOrderPlantPart@1100529000 : Record 11072320;
      ServiceOrderPlantParts@1100529001 : Page 11126824;
    BEGIN
      TESTFIELD("Service Order No.");
      TESTFIELD("Maintenance Scheme");
      ServiceOrderPlantPart.FILTERGROUP(4);
      ServiceOrderPlantPart.SETRANGE("Service Order No.", "Service Order No.");
      ServiceOrderPlantPart.SETRANGE("Maintenance Scheme", "Maintenance Scheme");
      ServiceOrderPlantPart.FILTERGROUP(0);
      ServiceOrderPlantParts.SETTABLEVIEW(ServiceOrderPlantPart);
      ServiceOrderPlantParts.SetDefaultMaintenanceScheme("Maintenance Scheme");
      ServiceOrderPlantParts.RUNMODAL;
    END;

    PROCEDURE LookupPlantMaintenanceScheme@1100529008();
    VAR
      PlantMaintenanceScheme@1100529001 : Record 11072677;
      PlantStndMaintenanceScheme@1100529002 : Record 11072673;
    BEGIN
      ReadAndCheckServiceOrder;
      PlantStndMaintenanceScheme.CHANGECOMPANY(ServiceOrder."Plant Company");
      PlantMaintenanceScheme.CHANGECOMPANY(ServiceOrder."Plant Company");
      PlantMaintenanceScheme.SETRANGE("Plant Type", ServiceOrder."Plant Type");
      PlantMaintenanceScheme.SETRANGE("Plant No.", ServiceOrder."Plant Number");
      IF PlantMaintenanceScheme.FINDSET THEN BEGIN
        REPEAT
          IF PlantStndMaintenanceScheme.GET(PlantMaintenanceScheme."Maintenance Scheme") THEN
            PlantStndMaintenanceScheme.MARK(TRUE);
        UNTIL PlantMaintenanceScheme.NEXT = 0;
      END;
      PlantStndMaintenanceScheme.MARKEDONLY(TRUE);
      PlantStndMaintenanceScheme.Code := "Maintenance Scheme";
      IF PAGE.RUNMODAL(PAGE::"Plant Stnd. Maintenance Scheme", PlantStndMaintenanceScheme) = ACTION::LookupOK THEN BEGIN
        IF (PlantStndMaintenanceScheme.Code <> '') AND (PlantStndMaintenanceScheme.Code <> "Maintenance Scheme") THEN
          VALIDATE("Maintenance Scheme", PlantStndMaintenanceScheme.Code);
      END;
    END;

    BEGIN
    END.
  }
}

