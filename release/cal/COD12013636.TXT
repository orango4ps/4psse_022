OBJECT Codeunit 12013636 ExFlow Web Service Doc Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF513000,4PS;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EXF001@1100285011 : TextConst 'ENU=ExFlow Error position %1.;SVE=ExFlow Fel position %1.';
      EXF002@1100285005 : TextConst 'ENU=Web service must connect using the company from the record!;SVE=Web tj„nsten m†ste ansluta med samma f”retag som posten tillh”r!';
      WebCompID@1100285006 : Record 12013630;
      EXF003@1100285000 : TextConst 'ENU=Column ID %1 is not found!;SVE=Hittar inte Ex kolumn med ID %1!';
      EXF004@1100285002 : TextConst 'ENU=A document already on hold cannot be set on hold again! Only approve or reject are allowed.;SVE=Ett dokument som redan „r satt p† bevakning kan inte s„ttas p† bevakning igen! Enbart godk„nn eller avvisa „r till†tet.';
      EXF006@1100285008 : TextConst 'ENU=You cannot delete a line that is connected to an order!;SVE=Du kan inte ta bort en rad som „r kopplad mot order!';
      EXF007@1100285009 : TextConst 'ENU=You cannot approve a document that you delegated to another user!;SVE=Du kan inte godk„nna ett dokument som du har delegerat till en annan anv„ndare!';
      Text033@1100285003 : TextConst 'ENU=The combination of dimensions used in line with No %1 is blocked. %2;SVE=Kombinationen av dimensioner som anv„nds p† rad med Nr %1 „r sp„rrad. %2';
      Text035@1100285001 : TextConst 'ENU=The combination of dimensions used in line with No %1 is invalid. %2;SVE=Kombinationen av dimensioner som anv„nds p† rad med Nr %1 „r ogiltig. %2';
      TempCreatedDocLines@1100285004 : TEMPORARY Record 12013609;
      EXF008@1100285010 : TextConst 'ENU=You are not allowed to approve total line amount %1. Your max allowed approval amount is %2.;SVE=Du har ej r„tt att slutattestera total belopp %1. Ditt max belopp f”r slutattest „r %2.';

    PROCEDURE GetLinesChangeDate@1100285019(VAR Params@1100285000 : BigText);
    VAR
      ExDoc@1100285008 : Record 12013608;
      ExDocLine@1100285006 : Record 12013609;
      XMLMgt@1100285007 : Codeunit 6224;
      XmlDoc@1100285003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNode@1100285002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlNodeList@1100285001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      newRecNode@1100285010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      i@1100285004 : Integer;
      DocID@1100285005 : BigInteger;
      TempChangeDate@1100285012 : DateTime;
    BEGIN
      // Get In params
      IF ParseInParams(XmlDoc,XmlNode,Params) THEN BEGIN
        XmlNodeList := XmlNode.ChildNodes();
        FOR i := 0 TO XmlNodeList.Count - 1 DO BEGIN
          XmlNode := XmlNodeList.Item(i);
          CASE LOWERCASE(XmlNode.Name()) OF
            'documentid': EVALUATE(DocID,XmlNode.InnerText());
          END
        END
      END;

      // Prepare ResultSet(s)
      CLEAR(XmlDoc);
      CLEAR(XmlNode);
      CreateXMLHeader(XmlDoc,XmlNode,'ChangeDates');

      ExDoc.SETCURRENTKEY("Web ID");
      ExDoc.SETRANGE("Web ID", DocID);
      ExDoc.FINDFIRST;

      TempChangeDate := ExDoc."Change Date";

      XMLMgt.AddElement(XmlNode,TransformString(FORMAT(ExDoc.TABLENAME)),'','',newRecNode);
      XMLMgt.AddNode(newRecNode,TransformString(ExDoc.FIELDNAME(ID)),FORMAT(ExDoc."Web ID"));
      XMLMgt.AddNode(newRecNode,TransformString(ExDoc.FIELDNAME("Change Date")),FORMAT(TempChangeDate,0,9));

      ExDocLine.RESET;
      ExDocLine.SETCURRENTKEY("Document ID");
      ExDocLine.SETRANGE("Document ID",ExDoc.ID);
      IF ExDocLine.FINDSET THEN
        REPEAT
          ExDocLine.CALCFIELDS("Last Change Date Dimension");
          TempChangeDate := ExDocLine."Change Date";
          ExDocLine.CALCFIELDS("Last Change Date Dimension");
          IF ExDocLine."Last Change Date Dimension" > TempChangeDate THEN
            TempChangeDate := ExDocLine."Last Change Date Dimension";

          XMLMgt.AddElement(XmlNode,TransformString(FORMAT(ExDocLine.TABLENAME)),'','',newRecNode);
          XMLMgt.AddNode(newRecNode,TransformString(ExDocLine.FIELDNAME(ID)),FORMAT(ExDocLine.ID+ExDoc."Web Company ID"));
          XMLMgt.AddNode(newRecNode,TransformString(ExDocLine.FIELDNAME("Change Date")),FORMAT(TempChangeDate,0,9));
        UNTIL ExDocLine.NEXT = 0;

      // Export Resultset
      CLEAR(Params);
      Params.ADDTEXT(XmlDoc.OuterXml());

      IF TestMode THEN
        XmlDoc.Save('c:\temp\getlineschangedate_out.xml');
    END;

    PROCEDURE SetDocument@1100285032(VAR Params@1100285000 : BigText;DocID@1100285015 : BigInteger;InUserID@1100285014 : Code[50]) ErrorValue : Integer;
    VAR
      ExFlowSetup@1100285013 : Record 12013601;
      TempExDocLineApp@1100285007 : TEMPORARY Record 12013610;
      ExDocLine@1100285009 : Record 12013609;
      ExDoc@1100285010 : Record 12013608;
      TempDocLineApproved@1100285019 : TEMPORARY Record 12013609;
      TempManuallyAddedApproversFromWeb@1100285020 : TEMPORARY Record 12013610;
      TempDocLineAdded@1100285022 : TEMPORARY Record 12013609;
      ExFlow@1100285008 : Codeunit 12013601;
      XmlDoc@1100285003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNodeList@1100285002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XmlNode@1100285004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlNodeRowChangeState@1100285005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Writer@1100285018 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlTextWriter";
      StrWriter@1100285017 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StringWriter";
      TempCompName@1100285012 : Text[30];
      i@1100285001 : Integer;
      NewDocHeaderID@1100285006 : BigInteger;
      TempID@1100285021 : BigInteger;
      AddedApprover@1100285011 : Boolean;
      DelegatedToUsed@1100285016 : Boolean;
    BEGIN
      // Implement changes from the web to Document, DocumentLines and DocumentLineApprovers.
      XmlDoc := XmlDoc.XmlDocument();
      XmlDoc.LoadXml(Params);
      XmlNode := XmlDoc.FirstChild();
      XmlNode := XmlNode.NextSibling();

      IF TestMode THEN
        XmlDoc.Save('c:\temp\documentin.xml');

      ExFlowSetup.GET;

      TempExDocLineApp.RESET;
      TempExDocLineApp.DELETEALL;
      TempDocLineApproved.RESET;
      TempDocLineApproved.DELETEALL;
      TempManuallyAddedApproversFromWeb.RESET;
      TempManuallyAddedApproversFromWeb.DELETEALL;

      AddedApprover := FALSE;

      IF XmlNode.HasChildNodes() THEN BEGIN
        XmlNodeList := XmlNode.ChildNodes();

        // Handle inserts of documents and lines first
        FOR i := 0 TO XmlNodeList.Count - 1  DO BEGIN
          XmlNode := XmlNodeList.Item(i);
          CASE LOWERCASE(XmlNode.Name()) OF
            'document':
              BEGIN
                XmlNodeRowChangeState := XmlNode.LastChild();
                IF XmlNodeRowChangeState.InnerText() = 'Added' THEN
                  NewDocHeaderID := InsertDocumentHeader(XmlNode,TempCompName,ExFlowSetup)
              END;

            'documentlines':
              BEGIN
                XmlNodeRowChangeState := XmlNode.LastChild();
                CASE XmlNodeRowChangeState.InnerText() OF
                  'Added': InsertDocLine(XmlNode,InUserID,TempDocLineAdded);
                  'Modified': ;
                  'Deleted': ;
                  '':; // Unchanged records

                  ELSE
                    ERROR(EXF001,20);
                END;
              END;
          END;
        END;

        // Insert/Modify all other records.
        FOR i := 0 TO XmlNodeList.Count - 1 DO BEGIN
          XmlNode := XmlNodeList.Item(i);
          CASE LOWERCASE(XmlNode.Name()) OF
            'document':
              BEGIN
                XmlNodeRowChangeState := XmlNode.LastChild();
                CASE XmlNodeRowChangeState.InnerText() OF
                  'Added':; // Should already have been handled.
                  'Modified': UpdateDocumentHeader(NewDocHeaderID,XmlNode.Clone());
                  'Deleted':; // Not allowed from the web.
                  '':; // Unchanged records.
                ELSE
                  ERROR(EXF001,17);
                END;
              END;

            'documentlines':
              BEGIN
                XmlNodeRowChangeState := XmlNode.LastChild();
                CASE XmlNodeRowChangeState.InnerText() OF
                  'Added': ;
                  'Modified': UpdateDocLine(XmlNode,InUserID);
                  'Deleted': DeleteDocLine(XmlNode); // Will recursively delete linked line approvers.
                  '':; // Unchanged records.
                ELSE
                  ERROR(EXF001,20);
                END;
              END;

            'documentlineapprovers':
              BEGIN
                XmlNodeRowChangeState := XmlNode.LastChild();
                CASE XmlNodeRowChangeState.InnerText() OF
                  'Added':
                    BEGIN
                      InsertDocLineApprover(XmlNode,InUserID,TempExDocLineApp,TempDocLineApproved,TempManuallyAddedApproversFromWeb,TempID);
                      AddedApprover := TRUE;
                    END;
                  'Modified': UpdateDocLineApprover(XmlNode,InUserID,TempDocLineApproved,DelegatedToUsed);
                  'Deleted': DeleteDocLineApprover(XmlNode,InUserID);
                  '':; // Unchanged records.
                ELSE
                  ERROR(EXF001,22);
                END;
              END;

            'documentlinedimensions':
              BEGIN
                XmlNodeRowChangeState := XmlNode.LastChild();
                CASE XmlNodeRowChangeState.InnerText() OF
                  'Added': UpdateDocLineDim(XmlNode,FALSE,InUserID);
                  'Modified': UpdateDocLineDim(XmlNode,FALSE,InUserID);
                  'Deleted': UpdateDocLineDim(XmlNode,TRUE,InUserID);
                  '':; // Unchanged records.
                ELSE
                  ERROR(EXF001,23);
                END;
              END;

            ELSE ERROR(EXF001,24);
          END;
        END;
      END;

      CLEAR(Params);

      IF TempDocLineAdded.FINDFIRST THEN BEGIN
        ExDocLine.GET(TempDocLineAdded.ID);
        ExDocLine.DocumentStatus(ExDocLine,'New');
      END;

      IF NewDocHeaderID <> 0 THEN BEGIN
        ExDoc.SETCURRENTKEY("Web ID");
        ExDoc.SETRANGE("Web ID", NewDocHeaderID);
        ExDoc.FINDFIRST;

        StrWriter := StrWriter.StringWriter;
        Writer := Writer.XmlTextWriter(StrWriter);
        Writer.WriteStartElement('Document');
        Writer.WriteElementString('ID',FORMAT(NewDocHeaderID));

        Writer.WriteEndElement; // Document
        Params.ADDTEXT(StrWriter.ToString);
      END ELSE BEGIN
        ExDoc.SETCURRENTKEY("Web ID");
        ExDoc.SETRANGE("Web ID", DocID);
        ExDoc.FINDFIRST;
      END;

      CheckDimWeb(TempDocLineApproved);

      IF ExFlowSetup."Check Dim Web Requisition" THEN
        CheckDimWebRequisition(ExDoc);


      //4PS
      CASE ExFlowSetup."Web 4PS Validation" OF
        ExFlowSetup."Web 4PS Validation"::Always:
          BEGIN
            TempDocLineApproved.RESET;
            IF TempDocLineApproved.FINDSET THEN
              REPEAT
                ExDocLine.GET(TempDocLineApproved.ID);
                Validate4PS(ExDocLine);
              UNTIL TempDocLineApproved.NEXT = 0;
          END;
        ExFlowSetup."Web 4PS Validation"::"At Final approval":
          BEGIN
            TempDocLineApproved.RESET;
            IF TempDocLineApproved.FINDSET THEN
              REPEAT
                ExDocLine.GET(TempDocLineApproved.ID);
                IF ExDocLine.Flowstatus = ExDocLine.Flowstatus::Approved THEN
                  Validate4PS(ExDocLine);
              UNTIL TempDocLineApproved.NEXT = 0;
          END;
      END;
      //4PS
      IF ExDoc."Document Type" = ExDoc."Document Type"::Requisition THEN
        EXIT;

      IF ExFlowSetup."Propose New Approvers Web" THEN BEGIN
        TempDocLineApproved.RESET;
        IF TempDocLineApproved.FINDSET THEN
          REPEAT
            ExDocLine.GET(TempDocLineApproved.ID);
            ExFlow.CreateApproversFromExDoc(ExDocLine, '', FALSE, '', '', TempExDocLineApp, InUserID,FALSE,0);
          UNTIL TempDocLineApproved.NEXT = 0;
      END;

      CheckMaxUserApprovalAmount(ExDoc,ExDocLine,TempDocLineApproved,InUserID);
    END;

    LOCAL PROCEDURE InsertDocLine@1100285022(VAR XmlNode@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";InUserID@1100285009 : Code[50];VAR TempDocLineAdded@1100285004 : TEMPORARY Record 12013609);
    VAR
      ExDocLine@1100285006 : Record 12013609;
      ExDocLine2@1100285001 : Record 12013609;
      ExDocLine3@1100285002 : Record 12013609;
      ExDoc@1100285007 : Record 12013608;
      TempCompName@1100285010 : Text[30];
    BEGIN
      ParseExDocLine(XmlNode,ExDocLine2,TempCompName);

      IF COMPANYNAME <> TempCompName THEN
        ERROR(EXF002);

      IF ExDocLine2."Document ID" > 0 THEN
        ExDoc.GET(ExDocLine2."Document ID")
      ELSE
        ExDoc.RetrieveRecord(ExDoc,ExDocLine2."Document Type",ExDocLine2."Document No.");

      ExDocLine.INIT;
      ExDocLine.TRANSFERFIELDS(ExDocLine2);
      ExDocLine.ID := 0;
      ExDocLine."Document No." := ExDoc."Document No.";
      ExDocLine."Document ID" := ExDoc.ID;
      ExDocLine.VALIDATE("Job No.", ExDocLine2."Job No.");
      ExDocLine.Amount := ExDocLine2.Amount;
      ExDocLine.VALIDATE("Periodic Template Code", ExDocLine2."Periodic Template Code");
      ExDocLine.VALIDATE("Periodic Starting Date", ExDocLine2."Periodic Starting Date");
      ExDocLine.VALIDATE("Connected Line ID", ExDocLine2."Connected Line ID");
      ExDocLine."Created By" := InUserID;
      ExDocLine."Created Date" := CREATEDATETIME(TODAY, TIME);
      ExDocLine."New Line" := TRUE;
      IF ExDocLine."Connected Line ID" = 0 THEN BEGIN
        ExDocLine."Order No." := '';
        ExDocLine."Order Line No." := 0;
      END;

      IF ExDocLine."Document Type" = ExDocLine."Document Type"::Requisition THEN
        ExDocLine."Split from Parent ID" := 0;

      // retrieve first approver and template rule from parent line
      IF ExDocLine."Split from Parent ID" <> 0 THEN BEGIN
        IF ExDocLine."Split from Parent ID" > 0 THEN
          ExDocLine3.GET(ExDocLine."Split from Parent ID")
        ELSE BEGIN
          TempCreatedDocLines.GET(ExDocLine."Split from Parent ID");
          ExDocLine3.GET(TempCreatedDocLines."Split from Parent ID")
        END;

        ExDocLine."First Approver" := ExDocLine3."First Approver";
        ExDocLine."Template Rule" := ExDocLine3."Template Rule";
      END;

      ExDocLine.INSERT;

      IF ExDocLine2.ID < 0 THEN BEGIN
        // negative ID means the line was created on the web
        // this variable is used to keep track between the id from the web and the new ID
        // genereated in NAV. This to handle multiple splits (line 2 is split, and line 3 is split from line 2)
        TempCreatedDocLines.ID := ExDocLine2.ID;
        TempCreatedDocLines."Split from Parent ID" := ExDocLine.ID;
        TempCreatedDocLines.INSERT;
      END;

      IF (ExDocLine.Flowstatus = ExDocLine.Flowstatus::Approved) AND (ExDocLine."Connected Line ID" = 0) THEN BEGIN // do not call this function for a web receipt
        TempDocLineAdded.INIT;
        TempDocLineAdded.TRANSFERFIELDS(ExDocLine);
        TempDocLineAdded.INSERT;
      END;
    END;

    LOCAL PROCEDURE UpdateDocLine@1100285058(VAR XmlNode@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";InUserID@1100285008 : Code[50]);
    VAR
      ExDocLine2@1100285002 : Record 12013609;
      ExDocLine@1100285006 : Record 12013609;
      TempCompName@1100285001 : Text[30];
    BEGIN
      ParseExDocLine(XmlNode,ExDocLine2,TempCompName);

      IF COMPANYNAME <> TempCompName THEN
        ERROR(EXF002);

      IF ExDocLine.GET(ExDocLine2.ID) THEN BEGIN
        IF ExDocLine2.Flowstatus = ExDocLine2.Flowstatus::Approved THEN
          ExDocLine.Flowstatus := ExDocLine2.Flowstatus;

        IF ExDocLine.Quantity <> ExDocLine2.Quantity THEN
          ExDocLine.ConnectedToReceipt(TRUE);
        ExDocLine.Quantity := ExDocLine2.Quantity;
        ExDocLine."Direct Unit Cost" := ExDocLine2."Direct Unit Cost";
        ExDocLine."Line Discount %" := ExDocLine2."Line Discount %";
        ExDocLine.Amount := ExDocLine2.Amount;
        ExDocLine."Changed By" := InUserID;
        ExDocLine."Change Date" := CREATEDATETIME(TODAY, TIME);
        ExDocLine.MODIFY;
      END ELSE
        ERROR(EXF001,3);
    END;

    LOCAL PROCEDURE DeleteDocLine@1100285047(XmlNode@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      ExDocLine2@1100285004 : Record 12013609;
      ExDocLine@1100285003 : Record 12013609;
      ExDocLine3@1100285002 : Record 12013609;
      ExDocLineApp@1100285005 : Record 12013610;
      ExDocLineDim@1100285006 : Record 12013611;
      PurchLine@1100285007 : Record 39;
      TempCompName@1100285001 : Text[30];
    BEGIN
      ParseExDocLine(XmlNode,ExDocLine2,TempCompName);

      IF COMPANYNAME <> TempCompName THEN
        ERROR(EXF002);

      IF ExDocLine.GET(ExDocLine2.ID) THEN BEGIN
        IF ExDocLine."Order No." <> '' THEN
          ERROR(EXF006);

        IF PurchLine.GET(ExDocLine."Document Type",ExDocLine."Document No.",ExDocLine."Line No.") THEN BEGIN
          ExDocLine3.SETCURRENTKEY("Document ID");
          ExDocLine3.SETRANGE("Document ID", ExDocLine."Document ID");
          ExDocLine3.SETRANGE("New Line", TRUE);
          ExDocLine3.FINDFIRST; // delib error if not found
          ExDocLine3."Line No." := ExDocLine."Line No.";
          ExDocLine3."New Line" := FALSE;
          ExDocLine3.MODIFY;
        END;

        ExDocLineApp.RESET;
        ExDocLineApp.SETCURRENTKEY("Document Line ID");
        ExDocLineApp.SETRANGE("Document Line ID", ExDocLine.ID);
        ExDocLineApp.DELETEALL;
        ExDocLineDim.RESET;
        ExDocLineDim.SETCURRENTKEY("Document Line ID");
        ExDocLineDim.SETRANGE("Document Line ID", ExDocLine.ID);
        ExDocLineDim.DELETEALL;
        ExDocLine.DELETE;
      END ELSE
        ERROR(EXF001,4);
    END;

    LOCAL PROCEDURE UpdateDocLineDim@1100285059(VAR XmlNode@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";DeleteRec@1100285017 : Boolean;InUserID@1100285018 : Code[50]);
    VAR
      ExDocLineDim@1100285001 : Record 12013611;
      ExDocLineDim2@1100285002 : Record 12013611;
      ExDocLine@1100285004 : Record 12013609;
      ExColumn@1100285005 : Record 12013661;
      ExDoc@1100285008 : Record 12013608;
      ExQuoteToReq@1100285006 : Codeunit 12013614;
      ExImportMgt@1100285007 : Codeunit 12013604;
      TempCompName@1100285003 : Text[30];
      TempJobNo@1100285009 : Code[20];
      TempJobTaskNo@1100285010 : Code[20];
      IsPurchDescription@1100285011 : Boolean;
      TempServOrderNo@1100583000 : Code[20];
    BEGIN
      ParseExDocLineDim(XmlNode,ExDocLineDim2,TempCompName);

      IF COMPANYNAME <> TempCompName THEN
        ERROR(EXF002);

      ExDocLine.LOCKTABLE;
      IF ExDocLineDim2."Document Line ID" > 0 THEN
        ExDocLine.GET(ExDocLineDim2."Document Line ID")
      ELSE IF NOT ExDocLine.RetrieveRecord(ExDocLine,ExDocLineDim2."Document Type",ExDocLineDim2."Document No.",ExDocLineDim2."Line No.") THEN
        EXIT; // No line added due to missing document line.

      ExDoc.GET(ExDocLine."Document ID");
      IF NOT ExColumn.GET(ExDocLineDim2."Column ID") THEN
        ERROR(STRSUBSTNO(EXF003,ExDocLineDim2."Column ID"));

      ExDocLineDim.RESET;
      ExDocLineDim.SETCURRENTKEY("Document Line ID");
      ExDocLineDim.SETRANGE("Document Line ID",ExDocLine.ID);
      ExDocLineDim.SETRANGE("Column ID",ExDocLineDim2."Column ID");
      IF NOT ExDocLineDim.ISEMPTY THEN
        ExDocLineDim.DELETEALL;

      IF ExDocLineDim2."Dimension Code" = 'DESCRIPTION' THEN BEGIN
        IsPurchDescription := TRUE;
        IF DeleteRec THEN
          ExDocLine.Description := ''
        ELSE
          ExDocLine.Description := ExDocLineDim2."Dimension Desc.";
      END;

      ExDocLineDim.INIT;
      ExDocLineDim.TRANSFERFIELDS(ExDocLineDim2);
      ExDocLineDim.ID := 0;
      ExDocLineDim."Document ID" := ExDocLine."Document ID";
      ExDocLineDim."Document Line ID" := ExDocLine.ID;

      IF (NOT DeleteRec) AND (NOT IsPurchDescription)THEN
        ExDocLineDim.INSERT;

      TempJobNo := '';
      TempJobTaskNo := '';

      IF ExColumn."Dimension Code" = '' THEN BEGIN
        CASE ExDocLineDim."Dimension Code" OF
          'G_LACCOUNT':
            IF DeleteRec THEN
              ExDocLine."No." := ''
            ELSE BEGIN
              ExDocLine.ConnectedToReceipt(FALSE);
              ExDocLine."No." :=  ExDocLineDim."Dimension Value";
              ExDocLine."Line Type" := ExDocLine."Line Type"::"G/L Account";
            END;
          'CHARGE':
            IF DeleteRec THEN
              ExDocLine."No." := ''
            ELSE BEGIN
              ExDocLine.ConnectedToReceipt(FALSE);
              ExDocLine."No." :=  ExDocLineDim."Dimension Value";
              ExDocLine."Line Type" := ExDocLine."Line Type"::"Charge (Item)";
            END;
          'FIXEDASSET':
            IF DeleteRec THEN
              ExDocLine."No." := ''
            ELSE BEGIN
              ExDocLine.ConnectedToReceipt(FALSE);
              ExDocLine."No." :=  ExDocLineDim."Dimension Value";
              ExDocLine."Line Type" := ExDocLine."Line Type"::"Fixed Asset";
            END;
          'ITEM':
            IF DeleteRec THEN
              ExDocLine."No." := ''
            ELSE BEGIN
              ExDocLine.ConnectedToReceipt(FALSE);
              ExDocLine."No." :=  ExDocLineDim."Dimension Value";
              ExDocLine."Line Type" := ExDocLine."Line Type"::Item;
            END;
          'JOB':
            IF DeleteRec THEN
              ExDocLine."Job No." := ''
            ELSE
              TempJobNo := ExDocLineDim."Dimension Value";
          'JOBTASK':
            IF DeleteRec THEN
              ExDocLine."Job Task No." := ''
            ELSE
              TempJobTaskNo := ExDocLineDim."Dimension Value";
          'PERCODE':
            IF DeleteRec THEN
              ExDocLine."Periodic Template Code" := ''
            ELSE
              ExDocLine."Periodic Template Code" := ExDocLineDim."Dimension Value";
          'PERDATE':
            IF DeleteRec THEN
              ExDocLine."Periodic Starting Date" := 0D
            ELSE
              ExDocLine."Periodic Starting Date" := ExQuoteToReq.DateField(ExDocLineDim."Dimension Value");
          'DESCRIPTION':
            IF DeleteRec THEN
              ExDocLine.Description := ''
            ELSE
              ExDocLine.Description := ExDocLine.Description;
          'INV_CODE':
            IF DeleteRec THEN
              ExDocLine."Invoicing Code" := ''
            ELSE
              ExDocLine."Invoicing Code" := ExDocLineDim."Dimension Value";
          'CUSTOMERINV':
            BEGIN
              IF DeleteRec THEN
                ExDocLine."Invoice to Customer" := FALSE
              ELSE IF UPPERCASE(ExDocLineDim."Dimension Value") IN ['1','YES','TRUE'] THEN
                ExDocLine."Invoice to Customer" := TRUE
              ELSE
                ExDocLine."Invoice to Customer" := FALSE;
            END;
          'INVDATE':
            IF DeleteRec THEN
              ExDocLine."Start Date for Invoicing" := 0D
            ELSE
              ExDocLine."Start Date for Invoicing" := ExQuoteToReq.DateField(ExDocLineDim."Dimension Value");
          'AMOUNTINV':
            BEGIN
              IF DeleteRec THEN
                ExDocLine."Invoicing Amount" := 0
              ELSE
                ExImportMgt.TransformNumber(ExDocLineDim."Dimension Value",ExDocLine."Invoicing Amount");
            END;
          'VATPRODPOSTGRP':
            IF DeleteRec THEN
              ExDocLine."VAT Prod. Posting Group" := ''
            ELSE
              ExDocLine."VAT Prod. Posting Group" := ExDocLineDim."Dimension Value";
          //4PS
          'SERVICEORDERNO':
            BEGIN
              IF DeleteRec THEN
                ExDocLine."Service Order No." := ''
              ELSE
                TempServOrderNo := ExDocLineDim."Dimension Value";
            END;
          //4PS
        END;
      END;

      IF TempJobNo <> '' THEN
        ExDocLine.VALIDATE("Job No.", TempJobNo);
      IF TempJobTaskNo <> '' THEN
        ExDocLine.VALIDATE("Job Task No.", TempJobTaskNo);

      //4PS
      IF TempServOrderNo <> '' THEN
        ExDocLine.VALIDATE("Service Order No.",TempServOrderNo);
      //4PS

      ExDocLine."Change Date" := CREATEDATETIME(TODAY, TIME);
      ExDocLine."Changed By" := InUserID;

      IF NOT ExDocLine.MODIFY THEN
        ERROR(EXF001,6);
    END;

    LOCAL PROCEDURE InsertDocLineApprover@1100285023(VAR XmlNode@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";InUserID@1100285009 : Code[50];VAR TempExDocLineApp@1100285005 : TEMPORARY Record 12013610;VAR TempDocLineApproved@1100285008 : TEMPORARY Record 12013609;VAR TempManuallyAddedApproversFromWeb@1100285007 : TEMPORARY Record 12013610;VAR TempID@1100285010 : BigInteger);
    VAR
      ExDocLineApp@1100285001 : Record 12013610;
      ExDocLineApp2@1100285002 : Record 12013610;
      ExDocLineApp3@1100285006 : Record 12013610;
      ExDocLine@1100285004 : Record 12013609;
      TempCompName@1100285003 : Text[30];
    BEGIN
      ParseExDocLineApp(XmlNode,ExDocLineApp2,TempCompName);

      IF COMPANYNAME <> TempCompName THEN
        ERROR(EXF002);

      ExDocLine.LOCKTABLE;
      IF ExDocLineApp2."Document Line ID" > 0 THEN
        ExDocLine.GET(ExDocLineApp2."Document Line ID")
      ELSE IF NOT ExDocLine.RetrieveRecord(ExDocLine,ExDocLineApp2."Document Type",ExDocLineApp2."Document No.",ExDocLineApp2."Line No.") THEN
        ERROR(EXF001,21); // No line added due to missing document line.

      ExDocLineApp.INIT;
      ExDocLineApp.TRANSFERFIELDS(ExDocLineApp2);
      ExDocLineApp.ID := 0;
      ExDocLineApp."Document Line ID" := ExDocLine.ID;
      ExDocLineApp."Document ID" := ExDocLine."Document ID";
      IF ExDocLineApp.Flowstatus > 1 THEN
        ExDocLineApp."Approval Date" := CREATEDATETIME(TODAY, TIME);

      ExDocLineApp."Created By" := InUserID;
      ExDocLineApp."Created Date" := CREATEDATETIME(TODAY, TIME);

      IF (NOT ExDocLineApp."Under review") AND (ExDocLineApp.Flowstatus = ExDocLineApp.Flowstatus::Approved) THEN
        IF NOT TempDocLineApproved.GET(ExDocLine.ID) THEN BEGIN
          TempDocLineApproved.INIT;
          TempDocLineApproved.TRANSFERFIELDS(ExDocLine);
          TempDocLineApproved.INSERT;
        END;

      IF ExDocLine."Split from Parent ID" < 0 THEN BEGIN
        TempCreatedDocLines.GET(ExDocLine."Split from Parent ID");
        ExDocLine."Split from Parent ID" := TempCreatedDocLines."Split from Parent ID";
      END;

      IF ExDocLine."Split from Parent ID" = 0 THEN BEGIN
        TempManuallyAddedApproversFromWeb.INIT;
        TempManuallyAddedApproversFromWeb.TRANSFERFIELDS(ExDocLineApp);
        TempID := TempID + 1;
        TempManuallyAddedApproversFromWeb.ID := TempID;
        TempManuallyAddedApproversFromWeb.INSERT;

        ExDocLineApp.Source := ExDocLineApp.Source::"Manually in Web";

        TempExDocLineApp.INIT;
        TempExDocLineApp.TRANSFERFIELDS(ExDocLineApp);
        TempID := TempID + 1;
        TempExDocLineApp.ID := TempID;
        TempExDocLineApp.INSERT;
      END;

      ExDocLineApp.INSERT;

      ExDocLine.MODIFY;

      // when using dynamic approvals, we still need to honor manually added approvers
      // however, for lines being split we should only add approvers that didn't come from the split line but
      // from the user directly
      IF ExDocLine."Split from Parent ID" > 0 THEN BEGIN
        ExDocLineApp3.RESET;
        ExDocLineApp3.SETCURRENTKEY("Document Line ID");
        ExDocLineApp3.SETRANGE("Document Line ID", ExDocLine."Split from Parent ID");
        ExDocLineApp3.SETRANGE(Approver, ExDocLineApp.Approver);
        IF NOT ExDocLineApp3.FINDFIRST THEN BEGIN
          TempExDocLineApp.INIT;
          TempExDocLineApp.TRANSFERFIELDS(ExDocLineApp);
          TempID := TempID + 1;
          TempExDocLineApp.ID := TempID;
          TempExDocLineApp.INSERT;
        END ELSE BEGIN
          ExDocLineApp.Source := ExDocLineApp3.Source;
          ExDocLineApp.MODIFY;

          // Special situation where manually added approver is added to all lines
          // then this depends on what order the approvers are inserted
          TempManuallyAddedApproversFromWeb.RESET;
          TempManuallyAddedApproversFromWeb.SETRANGE(Approver, ExDocLineApp.Approver);
          IF TempManuallyAddedApproversFromWeb.FINDFIRST THEN BEGIN
            TempExDocLineApp.INIT;
            TempExDocLineApp.TRANSFERFIELDS(ExDocLineApp);
            TempID := TempID + 1;
            TempExDocLineApp.ID := TempID;
            TempExDocLineApp.INSERT;
          END;
        END;
      END;

      IF ExDocLineApp2."Delegated to" <> '' THEN BEGIN
        AddApproverToDelegatedLine(ExDocLineApp,ExDocLineApp3,ExDocLine."Split from Parent ID");
      END;
    END;

    LOCAL PROCEDURE UpdateDocLineApprover@1100285030(VAR XmlNode@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";InUserID@1100285008 : Code[50];VAR TempDocLineApproved@1100285011 : TEMPORARY Record 12013609;VAR DelegatedToUsed@1100285010 : Boolean);
    VAR
      ExDocLineApp@1100285004 : Record 12013610;
      ExDocLineApp2@1100285003 : Record 12013610;
      ExDocLineApp3@1100285007 : Record 12013610;
      ExDocLine@1100285002 : Record 12013609;
      NewExDocLineApp@1100285005 : Record 12013610;
      TempExDocLineApp@1100285012 : TEMPORARY Record 12013610;
      TempCompName@1100285001 : Text[30];
      TempApproverOrder@1100285006 : Integer;
      TempApproverOrder2@1100285009 : Integer;
    BEGIN
      DelegatedToUsed := FALSE;

      ParseExDocLineApp(XmlNode,ExDocLineApp2,TempCompName);

      IF COMPANYNAME <> TempCompName THEN
        ERROR(EXF002);

      ExDocLine.LOCKTABLE;
      IF ExDocLineApp2."Document Line ID" > 0 THEN
        ExDocLine.GET(ExDocLineApp2."Document Line ID")
      ELSE IF NOT ExDocLine.RetrieveRecord(ExDocLine,ExDocLineApp2."Document Type",ExDocLineApp2."Document No.",ExDocLineApp2."Line No.") THEN
        EXIT; // No line added due to missing document line.

      ExDocLineApp.GET(ExDocLineApp2.ID);
      IF (ExDocLineApp."Delegated to" <> '') AND (ExDocLineApp.Flowstatus = ExDocLineApp.Flowstatus::"On hold") THEN
        ERROR(EXF007);

      ExDocLineApp."Approved By" := ExDocLineApp2."Approved By";
      ExDocLineApp.Comment := ExDocLineApp2.Comment;
      ExDocLineApp.Description := ExDocLineApp2.Description;
      ExDocLineApp.Flowstatus := ExDocLineApp2.Flowstatus;
      IF ExDocLineApp.Flowstatus > 1 THEN
        ExDocLineApp."Approval Date" := CREATEDATETIME(TODAY, TIME);
      ExDocLineApp."Changed By" := InUserID;
      ExDocLineApp."Change Date" := CREATEDATETIME(TODAY, TIME);
      IF ExDocLineApp2."Delegated to" <> '' THEN
        ExDocLineApp."Delegated to" := ExDocLineApp2."Delegated to";

      IF (ExDocLineApp2."Delegated to" <> '') AND (ExDocLineApp.Flowstatus = ExDocLineApp.Flowstatus::"On hold") THEN
        // Check if already under review
        IF ExDocLineApp."Under review" THEN
          ERROR(EXF004);

      IF (ExDocLineApp2."Delegated to" <> '') AND (ExDocLineApp.Flowstatus = ExDocLineApp.Flowstatus::"On hold") THEN
        ExDocLineApp."Under review" := TRUE;

      IF (NOT ExDocLineApp."Under review") AND (ExDocLineApp.Flowstatus = ExDocLineApp.Flowstatus::Approved) THEN BEGIN
        TempDocLineApproved.INIT;
        TempDocLineApproved.TRANSFERFIELDS(ExDocLine);
        TempDocLineApproved.INSERT;
      END;

      ExDocLineApp.MODIFY;


      IF ExDocLineApp2."Delegated to" <> '' THEN
        AddApproverToDelegatedLine(ExDocLineApp,ExDocLineApp3,ExDocLine.ID)
      ELSE IF ExDocLineApp."Under review" THEN BEGIN
        // Find previous approver and set that to approved
        ExDocLineApp3.RESET;
        ExDocLineApp3.SETCURRENTKEY("Document Line ID","Approver Order");
        ExDocLineApp3.SETRANGE("Document Line ID", ExDocLine.ID);
        ExDocLineApp3.SETFILTER("Approver Order", '<%1', ExDocLineApp."Approver Order");
        ExDocLineApp3.SETRANGE("Under review", TRUE);
        IF ExDocLineApp3.FINDLAST THEN BEGIN
          ExDocLineApp3.Flowstatus := ExDocLineApp3.Flowstatus::Approved;
          ExDocLineApp3.MODIFY;
        END;

        // Find next approver and make that current
        ExDocLineApp3.RESET;
        ExDocLineApp3.SETCURRENTKEY("Document Line ID","Approver Order");
        ExDocLineApp3.SETRANGE("Document Line ID", ExDocLine.ID);
        ExDocLineApp3.SETFILTER("Approver Order", '>%1', ExDocLineApp."Approver Order");
        IF ExDocLineApp3.FINDFIRST THEN BEGIN
          ExDocLineApp3.Flowstatus := ExDocLineApp3.Flowstatus::Current;
          ExDocLineApp3.MODIFY;

          ExDocLine.Flowstatus := ExDocLine.Flowstatus::Active;
        END;
      END ELSE IF ExDocLineApp.Flowstatus = ExDocLineApp.Flowstatus::Rejected THEN
        ExDocLine.Flowstatus := ExDocLine.Flowstatus::Rejected;

      IF NOT ExDocLine.MODIFY THEN
        ERROR(EXF001,10);
    END;

    LOCAL PROCEDURE DeleteDocLineApprover@1100285041(VAR XmlNode@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";InUserID@1100285009 : Code[50]);
    BEGIN
      // Deleting approvers from web not supported
    END;

    LOCAL PROCEDURE InsertDocumentHeader@1100285024(VAR XmlNode@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR TempCompName@1100285004 : Text[30];ExFlowSetup@1100285003 : Record 12013601) : BigInteger;
    VAR
      ExDoc@1100285001 : Record 12013608;
      InExDoc@1100285002 : Record 12013608;
    BEGIN
      ParseExDoc(XmlNode,InExDoc,TempCompName);

      IF COMPANYNAME <> TempCompName THEN
        ERROR(EXF002);

      ExDoc.INIT;
      ExDoc.TRANSFERFIELDS(InExDoc);
      ExDoc.ID := 0;

      IF ExFlowSetup."Requisition Nos." <> '' THEN
        ExDoc."Requisition No. Series" := ExFlowSetup."Requisition Nos.";

      ExDoc."Create Date" := TODAY;
      ExDoc."Created Date" := CURRENTDATETIME;
      ExDoc.INSERT;

      GetWebComp(TempCompName);
      ExDoc."Web Company ID" := WebCompID."Web Company ID";
      ExDoc."Web ID" := ExDoc.ID + ExDoc."Web Company ID";
      ExDoc.MODIFY;

      EXIT(ExDoc."Web ID");
    END;

    LOCAL PROCEDURE UpdateDocumentHeader@1100285031(NewExDocID@1100285004 : BigInteger;XmlNode@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      ExDoc@1100285001 : Record 12013608;
      ExDoc2@1100285002 : Record 12013608;
      TempCompName@1100285003 : Text[30];
    BEGIN
      ParseExDoc(XmlNode,ExDoc2,TempCompName);

      IF COMPANYNAME <> TempCompName THEN
        ERROR(EXF002);

      IF NOT ExDoc.GET(ExDoc2.ID) THEN
        ExDoc.GET(NewExDocID);

      ExDoc.VALIDATE(Status,ExDoc2.Status);
      ExDoc.VALIDATE("Requisition Status",ExDoc2."Requisition Status");
      ExDoc.VALIDATE("Text Field 1",ExDoc2."Text Field 1");
      ExDoc.VALIDATE("Text Field 2",ExDoc2."Text Field 2");
      ExDoc.VALIDATE("Text Field 3",ExDoc2."Text Field 3");
      ExDoc.VALIDATE("Text Field 4",ExDoc2."Text Field 4");
      ExDoc.VALIDATE("Text Field 5",ExDoc2."Text Field 5");
      ExDoc.VALIDATE("Text Field 6",ExDoc2."Text Field 6");
      ExDoc.VALIDATE("Text Field 7",ExDoc2."Text Field 7");
      ExDoc.VALIDATE("Text Field 8",ExDoc2."Text Field 8");
      ExDoc.VALIDATE("Text Field 9",ExDoc2."Text Field 9");
      ExDoc.VALIDATE("Text Field 10",ExDoc2."Text Field 10");
      // Temp. Solution ->
      //uncomment ExDoc."Approver Comments" := ExDoc2."Approver Comments";
      ExDoc."Web Approver Comments" := ExDoc2."Web Approver Comments";
      // Temp. Solution <-
      ExDoc."Changed By" := USERID;
      ExDoc."Change Date" := CREATEDATETIME(TODAY,TIME);
      ExDoc.MODIFY;
    END;

    PROCEDURE SetDocNewAttachments@1100285008(BigTxt@1100285001 : BigText);
    VAR
      ExDoc@1100285008 : Record 12013608;
      ExAttachment@1100285013 : Record 12013643;
      XmlDoc@1100285003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNode@1100285002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlNode2@1100285009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlNodeList@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XmlNodeList2@1100285005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      TempDocID@1100285004 : BigInteger;
      TempPath@1100285010 : Text;
      TempName@1100285011 : Text;
      InUserID@1100285014 : Code[50];
      i@1100285006 : Integer;
      j@1100285007 : Integer;
    BEGIN
      CLEAR(XmlDoc);
      CLEAR(XmlNode);

      IF TestMode THEN BEGIN
        XmlDoc := XmlDoc.XmlDocument();
        XmlDoc.LoadXml(BigTxt);
        XmlDoc.Save('c:\temp\SetDocNewAttachments_In.xml');
      END;

      CLEAR(XmlDoc);
      CLEAR(XmlNode);

      XmlDoc := XmlDoc.XmlDocument();
      XmlDoc.LoadXml(BigTxt);
      XmlNode := XmlDoc.SelectSingleNode('NewAttachments/DocumentID');
      EVALUATE(TempDocID,XmlNode.InnerText());

      ExDoc.SETCURRENTKEY("Web ID");
      ExDoc.SETRANGE("Web ID", TempDocID);
      ExDoc.FINDFIRST;

      XmlNodeList := XmlDoc.SelectNodes('NewAttachments/Attachment');
      FOR i := 0 TO XmlNodeList.Count - 1 DO BEGIN
        XmlNode := XmlNodeList.Item(i);
        XmlNodeList2 := XmlNode.ChildNodes();
        FOR j := 0 TO XmlNodeList2.Count - 1 DO BEGIN
          XmlNode2 := XmlNodeList2.Item(j);
          CASE LOWERCASE(XmlNode2.Name()) OF
            'name': TempName := COPYSTR(XmlNode2.InnerText(),1,MAXSTRLEN(TempName));
            'path': TempPath := COPYSTR(XmlNode2.InnerText(),1,MAXSTRLEN(TempPath));
            'filepath': TempPath := COPYSTR(XmlNode2.InnerText(),1,MAXSTRLEN(TempPath));
            'filename': TempName := COPYSTR(XmlNode2.InnerText(),1,MAXSTRLEN(TempName));
            'userid': InUserID := COPYSTR(XmlNode2.InnerText(),1,MAXSTRLEN(InUserID));
          END;
        END;

        IF TempName <> '' THEN BEGIN
          ExAttachment.INIT;
          ExAttachment."Entry No." := 0;
          ExAttachment."Attached File" := FORMAT(ExDoc."Web ID") + '\' + TempName;
          ExAttachment."Document Type" := ExDoc."Document Type";
          ExAttachment."Document No." := ExDoc."Document No.";
          ExAttachment.Attached := TRUE;
          ExAttachment."Document ID" := ExDoc.ID;
          ExAttachment."Created By" := InUserID;
          ExAttachment."Created Date" := CREATEDATETIME(TODAY,TIME);
          ExAttachment.Source := ExAttachment.Source::Web;
          ExAttachment.INSERT;
        END;
      END;
    END;

    PROCEDURE DeleteAttachment@1100285037(DocID@1100285002 : Integer;TempCompName@1100285001 : Text[30]);
    VAR
      ExAttachedFile@1100285000 : Record 12013643;
    BEGIN
      IF COMPANYNAME <> TempCompName THEN
        ERROR(EXF002);

      ExAttachedFile.RESET;
      ExAttachedFile.SETRANGE("Document ID",DocID);
      ExAttachedFile.DELETEALL;
    END;

    PROCEDURE DeleteAutoFillCodingRule@1100285038(ID@1100285001 : Integer;TempCompName@1100285002 : Text[30]);
    VAR
      ExCodingRule@1100285000 : Record 12013660;
    BEGIN
      IF COMPANYNAME <> TempCompName THEN
        ERROR(EXF002);

      ExCodingRule.RESET;
      ExCodingRule.SETRANGE(ID,ID);
      ExCodingRule.DELETEALL;
    END;

    PROCEDURE GetAllVendorsBySearchText@1100285040(_approver@1100285003 : Text[100];_compName@1100285004 : Text[30];_searchText@1100285005 : Text[1024];VAR _bigText@1100285001 : BigText) : Integer;
    VAR
      Vendor@1100285000 : Record 23;
      TempVendor@1100285002 : TEMPORARY Record 23;
      TempPriority@1100285008 : Integer;
      Writer@1100285007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlTextWriter";
      strWriter@1100285006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StringWriter";
      XmlDoc@1100285009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Count@1100285010 : Integer;
    BEGIN
      Vendor.RESET;
      Vendor.SETCURRENTKEY("Search Name");
      Vendor.SETFILTER("Search Name", '%1', '*' + _searchText + '*');
      Count := 0;
      IF Vendor.FINDSET THEN BEGIN
        TempPriority := 1;

        REPEAT
          IF (Vendor.Name <> '') AND (Vendor.Blocked = 0) AND
             (Vendor."Vendor Type (Web Req.)" IN [Vendor."Vendor Type (Web Req.)"::Preferred,
                                                  Vendor."Vendor Type (Web Req.)"::Visible])
          THEN BEGIN
            TempVendor.INIT;
            TempVendor.TRANSFERFIELDS(Vendor);
            IF Vendor."Vendor Type (Web Req.)" = Vendor."Vendor Type (Web Req.)"::Visible THEN
              TempVendor.Priority := TempPriority + 50000000 // Very unlikely that there are more than 50 M vendors
            ELSE
              TempVendor.Priority := TempPriority;
            TempVendor.INSERT;
            TempPriority += 1;
            Count += 1;
          END;
        UNTIL (Vendor.NEXT = 0) OR (Count >= 20);

        TempVendor.RESET;
        TempVendor.SETCURRENTKEY(Priority);
        IF TempVendor.FINDSET THEN BEGIN
          strWriter := strWriter.StringWriter;
          Writer := Writer.XmlTextWriter(strWriter);
          Writer.WriteStartElement('EXF_Message');
          Writer.WriteElementString('Type','Xml');

          Writer.WriteStartElement('Body');
          Writer.WriteStartElement('Vendors');

          REPEAT
            Writer.WriteStartElement('Vendor');
            Writer.WriteElementString('VendorNo',TempVendor."No.");
            Writer.WriteElementString('Name',DELCHR(TempVendor.Name,'<'));
            Writer.WriteElementString('Address',TempVendor.Address);
            Writer.WriteElementString('City',TransformString(TempVendor.City));
            Writer.WriteElementString('Contact',TempVendor.Contact);
            Writer.WriteElementString('PhoneNo',TempVendor."Phone No.");
            Writer.WriteElementString('CurrencyCode',TempVendor."Currency Code");
            Writer.WriteElementString('CompName',COMPANYNAME);
            Writer.WriteEndElement;
          UNTIL TempVendor.NEXT = 0;

          Writer.WriteEndElement; // EXF_Message
          Writer.WriteEndElement; // Body
          Writer.WriteEndElement; // Vendors
          _bigText.ADDTEXT(strWriter.ToString);

          IF TestMode THEN BEGIN
            XmlDoc := XmlDoc.XmlDocument();
            XmlDoc.LoadXml(_bigText);
            XmlDoc.Save('c:\temp\GetAllVendorsBySearchText.xml');
          END;
        END;
      END;
    END;

    PROCEDURE GetCodingRulesByAutoFill@1100285043(VAR _bigText@1100285001 : BigText) : Integer;
    VAR
      ExCodingRule@1100285000 : Record 12013660;
      XMLMgmt@1100285002 : Codeunit 6224;
      XmlNode@1100285004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlDoc@1100285003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XmlCreateDoc(0,XmlNode,xmlDoc); // creates xmlDoc and xmlNode as 'Body'
      XMLMgmt.AddElement(XmlNode,'CodingRules','','',XmlNode);

      WITH ExCodingRule DO BEGIN
        RESET;
        SETRANGE(IsAutofill,FALSE);
        SETRANGE(Active,TRUE);
        IF FINDSET THEN
          REPEAT
            XMLMgmt.AddElement(XmlNode,'CodingRule','','',XmlNode);
            XMLMgmt.AddNode(XmlNode,'CompName',COMPANYNAME);
            XMLMgmt.AddNode(XmlNode,'Name',Name);
            XMLMgmt.AddNode(XmlNode,'ValidationMessage',"Validation Message");
            XMLMgmt.AddNode(XmlNode,'MemoryNote',"Memory Note");
            XMLMgmt.AddNode(XmlNode,'Active',FORMAT(Active,0,9));
            XMLMgmt.AddNode(XmlNode,'IsValidation',FORMAT("Is Validation",0,9));
            XMLMgmt.AddNode(XmlNode,'IsFilter',FORMAT("Is Filter",0,9));
            XMLMgmt.AddNode(XmlNode,'IsSubset',FORMAT("Is Subset",0,9));
            XMLMgmt.AddNode(XmlNode,'IsDeny',FORMAT(IsDeny,0,9));
            XMLMgmt.AddNode(XmlNode,'Expression',Expression +Expression2 +Expression3 +Expression4);
            XMLMgmt.AddNode(XmlNode,'TestExpression1',TestExpression1);
            XMLMgmt.AddNode(XmlNode,'TestExpression2',TestExpression2);
            XMLMgmt.AddNode(XmlNode,'TestExpression3',TestExpression3);
            XMLMgmt.AddNode(XmlNode,'TestExpression4',TestExpression4);
            XMLMgmt.AddNode(XmlNode,'TestExpression5',TestExpression5);
            XmlNode := XmlNode.ParentNode; // back to collection (or body if no use of collection)
          UNTIL NEXT() = 0;
      END;

      _bigText.ADDTEXT(xmlDoc.OuterXml());
    END;

    PROCEDURE GetInvoiceCodeForAutoComplete@1100285046(TempCompName@1100285002 : Text[30];_prefix@1100285006 : Text[100];VAR _bigText@1100285001 : BigText) : Integer;
    VAR
      _exInvCode@1100285000 : Record 12013597;
      XMLMgmt@1100285005 : Codeunit 6224;
      XmlNode@1100285004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlDoc@1100285003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF TempCompName = '' THEN
        TempCompName := COMPANYNAME;

      XmlCreateDoc(0,XmlNode,xmlDoc); // creates xmlDoc and xmlNode as 'Body'
      XMLMgmt.AddElement(XmlNode,'InvoicingCodes','','',XmlNode);

      WITH _exInvCode DO BEGIN
        RESET;
        CHANGECOMPANY(TempCompName);

        SETFILTER(Description,STRSUBSTNO('%1*',_prefix));
        IF FINDSET THEN
          REPEAT
            XMLMgmt.AddElement(XmlNode,'InvoicingCode','','',XmlNode);
            XMLMgmt.AddNode(XmlNode,'Description',Description);
            XMLMgmt.AddNode(XmlNode,'Value',"Invoicing Code");
            XmlNode := XmlNode.ParentNode; // back to collection (or body if no use of collection)
          UNTIL NEXT = 0;
      END;

      _bigText.ADDTEXT(xmlDoc.OuterXml());
    END;

    PROCEDURE GetRegionForAutoComplete@1100285051(_compName@1100285002 : Text[30];_prefix@1100285001 : Text[100];VAR _bigText@1100285003 : BigText) : Integer;
    VAR
      _exCountry@1100285000 : Record 12013616;
      XMLMgmt@1100285006 : Codeunit 6224;
      XmlNode@1100285005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlDoc@1100285004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF _compName = '' THEN
        _compName := COMPANYNAME;

      XmlCreateDoc(0,XmlNode,xmlDoc); // creates xmlDoc and xmlNode as 'Body'

      WITH _exCountry DO BEGIN
        RESET;
        CHANGECOMPANY(_compName);
        SETFILTER("Country Name",STRSUBSTNO('%1*',_prefix));
        IF FINDSET() THEN REPEAT
          XMLMgmt.AddElement(XmlNode,'Country','','',XmlNode);
          XMLMgmt.AddNode(XmlNode,'Description',"Country Name");
          XMLMgmt.AddNode(XmlNode,'Value',"Country Code");
          XmlNode := XmlNode.ParentNode; // back to collection (or body if no use of collection)
        UNTIL NEXT() = 0;
      END;

      _bigText.ADDTEXT(xmlDoc.OuterXml());
    END;

    PROCEDURE GetVendor@1100285053(_name@1100285000 : Text[50];_compName@1100285001 : Text[30];VAR _bigText@1100285004 : BigText) : Integer;
    VAR
      _vendor@1100285002 : Record 23;
      XMLMgmt@1100285006 : Codeunit 6224;
      XmlNode@1100285005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlDoc@1100285003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF _compName = '' THEN
        _compName := COMPANYNAME;

      // creates xmlDoc and xmlNode as 'Body'
      CreateXmlDoc('Vendor',TRUE,XmlNode,xmlDoc);

      _vendor.RESET();
      _vendor.SETCURRENTKEY(Name);
      _vendor.SETRANGE(Name,_name);
      IF _vendor.FINDSET() THEN BEGIN
        XMLMgmt.AddElement(XmlNode,'Vendor','','',XmlNode);
        XMLMgmt.AddNode(XmlNode,'VendorNo',_vendor."No.");
        XMLMgmt.AddNode(XmlNode,'Name',_vendor.Name);
        XMLMgmt.AddNode(XmlNode,'Address',_vendor.Address);
        XMLMgmt.AddNode(XmlNode,'City',_vendor.City);
        XMLMgmt.AddNode(XmlNode,'Contact',_vendor.Contact);
        XMLMgmt.AddNode(XmlNode,'PhoneNo',_vendor."Phone No.");
        XMLMgmt.AddNode(XmlNode,'CurrencyCode',_vendor."Currency Code");
        XmlNode := XmlNode.ParentNode;
      END;

      _bigText.ADDTEXT(xmlDoc.OuterXml());
    END;

    PROCEDURE InsertLocation@1100285056(TempCompName@1100285000 : Text[30];_name@1100285001 : Text[30];_address@1100285002 : Text[50];_address2@1100285003 : Text[50];_city@1100285004 : Text[30];_postCode@1100285005 : Code[20];_countryCode@1100285006 : Code[10];VAR _nameReturn@1100285007 : Text[30];InUserId@1100285010 : Text[50]) : Integer;
    VAR
      ExLocation@1100285008 : Record 12013613;
    BEGIN
      IF TempCompName = '' THEN
        TempCompName := COMPANYNAME;

      IF COMPANYNAME <> TempCompName THEN
        ExLocation.CHANGECOMPANY(TempCompName);

      ExLocation.RESET();
      ExLocation.SETRANGE(Name,_name);
      IF NOT ExLocation.FINDFIRST THEN BEGIN
        ExLocation.INIT;
        ExLocation.ID := 0;
        ExLocation."Created By" := InUserId;
        ExLocation.INSERT;
      END;

      ExLocation.Name :=_name;
      ExLocation.Address := _address;
      ExLocation."Address 2" := _address2;
      ExLocation.City := _city;
      ExLocation."Post Code" := _postCode;
      ExLocation."Country/Region Code" := _countryCode;
      ExLocation.MODIFY;

      _nameReturn := ExLocation.Name;
    END;

    LOCAL PROCEDURE CheckDim@34(ExDocLine@1100285014 : Record 12013609);
    VAR
      TempDimSetEntry@1100285000 : TEMPORARY Record 480;
      TempDimValueP@1100285008 : TEMPORARY Record 349;
      TempDimValueD@1100285007 : TEMPORARY Record 349;
      PurchLine@1100285010 : Record 39;
      DimValue@1100285013 : Record 349;
      ExColumn@1100285003 : Record 12013661;
      DimMgt@1100285001 : Codeunit 408;
      ExFlowDimMgt@1100285009 : Codeunit 12013605;
      TempDimSetID@1100285002 : Integer;
      TableIDArr@1100285005 : ARRAY [10] OF Integer;
      NumberArr@1100285004 : ARRAY [10] OF Code[20];
      CurrentDocDimCode@1100285012 : Code[20];
      CurrentDocDimValue@1100285011 : Code[20];
      CurrentDocDimFound@1100285006 : Boolean;
    BEGIN
      TempDimSetEntry.RESET;
      TempDimSetEntry.DELETEALL;

      CurrentDocDimFound := FALSE;
      TempDimValueD.RESET;
      TempDimValueD.DELETEALL;
      TempDimValueP.RESET;
      TempDimValueP.DELETEALL;
      IF PurchLine.GET(ExDocLine."Document Type",ExDocLine."Document No.",ExDocLine."Line No.") THEN
        ExFlowDimMgt.GetDimFromPurchLine(PurchLine,CurrentDocDimFound,CurrentDocDimCode,CurrentDocDimValue,TempDimValueP);
      ExFlowDimMgt.GetDimFromDocLine(ExDocLine,CurrentDocDimFound,CurrentDocDimCode,CurrentDocDimValue,TempDimValueD);

      TempDimValueP.RESET;
      IF TempDimValueP.FINDSET THEN
        REPEAT
          ExColumn.SETRANGE("Dimension Code", TempDimValueP."Dimension Code");
          IF NOT ExColumn.FINDFIRST THEN BEGIN
            TempDimValueD.SETRANGE("Dimension Code", TempDimValueP."Dimension Code");
            IF NOT TempDimValueD.FINDFIRST THEN BEGIN
              TempDimValueD.INIT;
              TempDimValueD.TRANSFERFIELDS(TempDimValueP);
              TempDimValueD.INSERT;
            END;
          END;
        UNTIL TempDimValueP.NEXT = 0;

      TempDimValueD.RESET;
      IF TempDimValueD.FINDSET THEN
        REPEAT
          DimValue.GET(TempDimValueD."Dimension Code",TempDimValueD.Code);

          TempDimSetEntry.INIT;
          TempDimSetEntry."Dimension Code" := DimValue."Dimension Code";
          TempDimSetEntry."Dimension Value Code" := DimValue.Code;
          TempDimSetEntry."Dimension Value ID" := DimValue."Dimension Value ID";
          TempDimSetEntry.INSERT;
        UNTIL TempDimValueD.NEXT = 0;

      TempDimSetID := DimMgt.GetDimensionSetID(TempDimSetEntry);

      IF NOT DimMgt.CheckDimIDComb(TempDimSetID) THEN
        ERROR(Text033,ExDocLine."No.",DimMgt.GetDimCombErr);

      TableIDArr[1] := DimMgt.TypeToTableID3(ExDocLine."Line Type");
      NumberArr[1] := ExDocLine."No.";
      TableIDArr[2] := DATABASE::Job;
      NumberArr[2] := ExDocLine."Job No.";
      IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,TempDimSetID) THEN
        ERROR(Text035,ExDocLine."No.",DimMgt.GetDimValuePostingErr);
    END;

    LOCAL PROCEDURE CheckMaxUserApprovalAmount@1100285001(ExDoc@1100285000 : Record 12013608;ExDocLine@1100285003 : Record 12013609;VAR TempDocLineApproved@1100285006 : TEMPORARY Record 12013609;InUserID@1100285001 : Code[50]);
    VAR
      ExUserComp@1100285002 : Record 12013641;
      PurchHeader@1100285004 : Record 38;
      Amount@1100285005 : Decimal;
      CurrExchRate@1100285007 : Record 330;
    BEGIN
      ExUserComp.GET(InUserID);

      IF NOT ExUserComp."Check Max Approval Amount" THEN
        EXIT;

      TempDocLineApproved.RESET;
      IF TempDocLineApproved.FINDSET THEN
        REPEAT
          ExDocLine.GET(TempDocLineApproved.ID);
          IF ExDocLine.Flowstatus = ExDocLine.Flowstatus::Approved THEN
            Amount := Amount + ExDocLine.Amount;
        UNTIL TempDocLineApproved.NEXT = 0;

      IF (Amount > 0) AND (ExUserComp."Max final Approval Amount" = 0) THEN
        ERROR(STRSUBSTNO(EXF008,Amount,ExUserComp."Max final Approval Amount"));

      IF (Amount <> 0) AND (ExDoc."Currency Code" <> '') THEN BEGIN
        PurchHeader.GET(ExDoc."Document Type",ExDoc."Document No.");
        IF (PurchHeader."Currency Factor" <> 0) AND (PurchHeader."Currency Factor" <> 1) THEN
          Amount := CurrExchRate.ExchangeAmtFCYToLCY(0,ExDocLine."Job No.", //4PS
          PurchHeader."Posting Date",
          PurchHeader."Currency Code",
          Amount,
          PurchHeader."Currency Factor",FALSE); //4PS
      END;

      IF (Amount > ExUserComp."Max final Approval Amount") THEN
        ERROR(STRSUBSTNO(EXF008,Amount,ExUserComp."Max final Approval Amount"));
    END;

    LOCAL PROCEDURE CheckXMLDate@1100285099(DateText@1100285000 : Text[50]) : Date;
    VAR
      Year@1100285001 : Integer;
      Month@1100285002 : Integer;
      Day@1100285003 : Integer;
    BEGIN
      // Assumes that datetext is in XML format, ie YYYYMMDD
      IF DateText = '' THEN
        EXIT;

      IF STRPOS(DateText,'T') > 0 THEN
        DateText := DELCHR(COPYSTR(DateText,1,STRPOS(DateText,'T') - 1),'=','-')
      ELSE IF(STRPOS(DateText,'Z') > 0) THEN
        DateText := DELCHR(COPYSTR(DateText,1,STRPOS(DateText,'Z') - 1),'=','-');

      IF STRLEN(DateText) = 8 THEN BEGIN
        EVALUATE(Year,COPYSTR(DateText,1,4));
        EVALUATE(Month, COPYSTR(DateText,5,2));
        EVALUATE(Day, COPYSTR(DateText,7,2));
      END ELSE IF STRLEN(DateText) = 6 THEN BEGIN
        EVALUATE(Year, COPYSTR(DateText,1,2));
        EVALUATE(Month, COPYSTR(DateText,3,2));
        EVALUATE(Day, COPYSTR(DateText,5,2));
      END;

      IF Year > 1900 THEN
        EXIT(DMY2DATE(Day,Month,Year));
    END;

    LOCAL PROCEDURE XmlCreateDoc@1100285009(Int@1100285000 : Integer;VAR xmlNode@1100285001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR xmlDoc@1100285004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      xmlProcInstr@1100285005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlProcessingInstruction";
      XMLMgmt@1100285003 : Codeunit 6224;
    BEGIN
      xmlDoc := xmlDoc.XmlDocument();
      xmlProcInstr := xmlDoc.CreateProcessingInstruction('xml','version="1.0" encoding="UTF-16" standalone="yes"');
      xmlNode := xmlDoc.AppendChild(xmlProcInstr);
      xmlNode := xmlDoc.CreateElement('EXF_Message');
      xmlNode := xmlDoc.AppendChild(xmlNode);

      XMLMgmt.AddNode(xmlNode,'Type','Xml');
      XMLMgmt.AddNode(xmlNode,'Message','');
      XMLMgmt.AddElement(xmlNode,'Body','','',xmlNode);
      IF Int > 0 THEN
        XMLMgmt.AddAttribute(xmlNode,'quantity',FORMAT(Int,0,9));
    END;

    PROCEDURE CheckSum@1100285007(VAR InText@1100285004 : BigText) CheckSumValue : Decimal;
    VAR
      StringPart@1100285000 : Text[1024];
      CharNo@1100285001 : Integer;
      MaxInteger@1100285002 : Integer;
      DecValue@1100285003 : Decimal;
      StringPos@1100285005 : BigInteger;
    BEGIN
      RANDOMIZE(1);
      MaxInteger := 2147483647;
      StringPart := '';
      StringPos := 1;

      WHILE StringPos < InText.LENGTH DO BEGIN
        InText.GETSUBTEXT(StringPart,StringPos,MAXSTRLEN(StringPart));
        FOR CharNo := 1 TO STRLEN(StringPart) DO
          DecValue := (DecValue + (((StringPart[CharNo] MOD 43) + 1) * RANDOM((MaxInteger DIV 44)))) MOD MaxInteger;
        StringPos := StringPos + STRLEN(StringPart);
      END;

      CheckSumValue := DecValue;
    END;

    PROCEDURE GetCheckSum@1100285086(InText@1100285000 : BigText) NewCheckSum : Decimal;
    VAR
      xmlDoc@1100285002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      xmlNode@1100285001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      xmlDoc := xmlDoc.XmlDocument();
      xmlDoc.LoadXml(InText);
      xmlNode := xmlDoc.FirstChild();
      IF xmlNode.HasChildNodes() THEN BEGIN
        xmlNode := xmlNode.FirstChild();
        xmlNode := xmlNode.FirstChild();
        IF LOWERCASE(xmlNode.Name()) = 'checksum' THEN
          EVALUATE(NewCheckSum,xmlNode.InnerText())
        ELSE
          EXIT(-1)
      END ELSE
        EXIT(-1);

      EXIT(NewCheckSum);
    END;

    PROCEDURE AppendCheckSum@1100285013(VAR InText@1100285000 : BigText;CheckSum@1100285001 : Decimal);
    VAR
      xmlDoc@1100285003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      xmlNode@1100285002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      xmlDoc := xmlDoc.XmlDocument();
      xmlDoc.LoadXml(InText);
      xmlNode := xmlDoc.FirstChild.FirstChild().PrependChild(xmlDoc.CreateElement('CheckSum'));
      xmlNode.InnerText := FORMAT(CheckSum);
      CLEAR(InText);
      InText.ADDTEXT(xmlDoc.OuterXml());
    END;

    LOCAL PROCEDURE CreateXmlDoc@1100285016(DSName@1100285000 : Text[50];nameSpace@1100285001 : Boolean;VAR XmlNode@1100285003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR xmlDoc@1100285002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      XMLMgmt@1100285004 : Codeunit 6224;
    BEGIN
      xmlDoc := xmlDoc.XmlDocument();
      XmlNode := xmlDoc.CreateElement(DSName);
      IF nameSpace THEN
        XMLMgmt.AddAttribute(XmlNode,'xmlns', 'http://tempuri.org/'+DSName+'.xsd');
      XmlNode := xmlDoc.AppendChild(XmlNode);
    END;

    LOCAL PROCEDURE ParseExDocLine@1100285002(VAR XmlNode@1100285000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR InExDocLine@1100285001 : Record 12013609;VAR TempCompanyName@1100285004 : Text[30]);
    VAR
      ExDoc@1100285005 : Record 12013608;
      ExFImportMgt@1100285006 : Codeunit 12013604;
      XmlNodeList@1100285002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      i@1100285003 : Integer;
    BEGIN
      CLEAR(InExDocLine);
      InExDocLine.INIT;
      XmlNodeList := XmlNode.ChildNodes();
      FOR i := 0 TO XmlNodeList.Count - 1 DO BEGIN
        XmlNode := XmlNodeList.Item(i);
        CASE LOWERCASE(XmlNode.Name()) OF
          'compname': TempCompanyName := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(TempCompanyName));
          'doctype': EVALUATE(InExDocLine."Document Type",XmlNode.InnerText());
          'docno': InExDocLine."Document No." := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDocLine."Document No."));
          'lineno_': EVALUATE(InExDocLine."Line No.",XmlNode.InnerText());
          'flowstatus': EVALUATE(InExDocLine.Flowstatus,XmlNode.InnerText());
          'linetype': EVALUATE(InExDocLine."Line Type", XmlNode.InnerText());
          'description': InExDocLine.Description := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDocLine.Description));
          'quantity': ExFImportMgt.TransformNumber(XmlNode.InnerText(),InExDocLine.Quantity);
          'unitcost': ExFImportMgt.TransformNumber(XmlNode.InnerText(),InExDocLine."Direct Unit Cost");
          'linediscount': ExFImportMgt.TransformNumber(XmlNode.InnerText(),InExDocLine."Line Discount %");
          'linediff': EVALUATE(InExDocLine."Line Difference",XmlNode.InnerText());
          'jobno': ;
          'amount': ExFImportMgt.TransformNumber(XmlNode.InnerText(),InExDocLine.Amount);
          'periodictemplatecode':;
          'documentid': EVALUATE(InExDocLine."Document ID",XmlNode.InnerText());
          'id': EVALUATE(InExDocLine.ID,XmlNode.InnerText());
          'xfinternal':;
          'xfid':;
          'orderno': InExDocLine."Order No." := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDocLine."Order No."));
          'orderunitcost': ExFImportMgt.TransformNumber(XmlNode.InnerText(),InExDocLine."Order Unit Cost");
          'connectedlineid': EVALUATE(InExDocLine."Connected Line ID",XmlNode.InnerText());
          'expression1':;
          'changedby':;
          'parentlineid': EVALUATE(InExDocLine."Split from Parent ID",XmlNode.InnerText());
        END;
      END;

      IF InExDocLine."Document ID" > 0 THEN BEGIN
        ExDoc.SETCURRENTKEY("Web ID");
        ExDoc.SETRANGE("Web ID", InExDocLine."Document ID");
        ExDoc.FINDFIRST;
      END ELSE
        ExDoc.RetrieveRecord(ExDoc,InExDocLine."Document Type",InExDocLine."Document No.");

      IF InExDocLine.ID > 0 THEN
        InExDocLine.ID := InExDocLine.ID - ExDoc."Web Company ID";
      IF InExDocLine."Connected Line ID" > 0 THEN
        InExDocLine."Connected Line ID" := InExDocLine."Connected Line ID" - ExDoc."Web Company ID";
      IF InExDocLine."Split from Parent ID" > 0 THEN
        InExDocLine."Split from Parent ID" := InExDocLine."Split from Parent ID" - ExDoc."Web Company ID";
      InExDocLine."Document ID" := ExDoc.ID;
    END;

    LOCAL PROCEDURE ParseExDocLineDim@1100285017(VAR XmlNode@1100285002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR InExDocLineDim@1100285001 : Record 12013611;VAR TempCompanyName@1100285000 : Text[30]);
    VAR
      ExDoc@1100285005 : Record 12013608;
      XmlNodeList@1100285004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      i@1100285003 : Integer;
    BEGIN
      CLEAR(InExDocLineDim);
      InExDocLineDim.INIT;
      XmlNodeList := XmlNode.ChildNodes();
      FOR i := 0 TO XmlNodeList.Count - 1 DO BEGIN
        XmlNode := XmlNodeList.Item(i);
        CASE LOWERCASE(XmlNode.Name()) OF
          'compname': TempCompanyName := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(TempCompanyName));
          'doctype': EVALUATE(InExDocLineDim."Document Type",XmlNode.InnerText());
          'docno': InExDocLineDim."Document No." := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDocLineDim."Document No."));
          'lineno_': EVALUATE(InExDocLineDim."Line No.",XmlNode.InnerText());
          'dimensioncode': InExDocLineDim."Dimension Code" := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDocLineDim."Dimension Code"));
          'dimensionvalue':
            BEGIN
              IF STRLEN(XmlNode.InnerText()) > MAXSTRLEN(InExDocLineDim."Dimension Value") THEN
                InExDocLineDim."Dimension Desc." := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDocLineDim."Dimension Desc."))
              ELSE BEGIN
                InExDocLineDim."Dimension Value" := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDocLineDim."Dimension Value"));
                IF InExDocLineDim."Dimension Code" = 'DESCRIPTION' THEN
                   InExDocLineDim."Dimension Desc." := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDocLineDim."Dimension Value"));
              END;
            END;
          'columnid': EVALUATE(InExDocLineDim."Column ID",XmlNode.InnerText());
          'documentlineid': EVALUATE(InExDocLineDim."Document Line ID",XmlNode.InnerText());
          'documentid': EVALUATE(InExDocLineDim."Document ID",XmlNode.InnerText());
          'id': EVALUATE(InExDocLineDim.ID,XmlNode.InnerText());
          'xfid':;
          'changedby':;
        END;
      END;

      IF InExDocLineDim."Document ID" > 0 THEN BEGIN
        ExDoc.SETCURRENTKEY("Web ID");
        ExDoc.SETRANGE("Web ID", InExDocLineDim."Document ID");
        ExDoc.FINDFIRST;
      END ELSE
        ExDoc.RetrieveRecord(ExDoc,InExDocLineDim."Document Type",InExDocLineDim."Document No.");

      IF InExDocLineDim.ID > 0 THEN
        InExDocLineDim.ID := InExDocLineDim.ID - ExDoc."Web Company ID";
      IF InExDocLineDim."Document Line ID" > 0 THEN
        InExDocLineDim."Document Line ID" := InExDocLineDim."Document Line ID" - ExDoc."Web Company ID";
      IF InExDocLineDim."Document ID" > 0 THEN
        InExDocLineDim."Document ID" := InExDocLineDim."Document ID" - ExDoc."Web Company ID";

      GetWebComp(TempCompanyName);
      IF InExDocLineDim."Column ID" > 0 THEN
        InExDocLineDim."Column ID" := InExDocLineDim."Column ID" - WebCompID."Web Company ID";
    END;

    LOCAL PROCEDURE ParseExDocLineApp@1100285020(VAR XmlNode@1100285002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR InExDocLineApp@1100285001 : Record 12013610;VAR TempCompanyName@1100285000 : Text[30]);
    VAR
      ExDoc@1100285005 : Record 12013608;
      XmlNodeList@1100285004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      i@1100285003 : Integer;
    BEGIN
      CLEAR(InExDocLineApp);
      InExDocLineApp.INIT;
      XmlNodeList := XmlNode.ChildNodes();
      FOR i := 0 TO XmlNodeList.Count - 1 DO BEGIN
        XmlNode := XmlNodeList.Item(i);
        CASE LOWERCASE(XmlNode.Name()) OF
          'compname': TempCompanyName := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(TempCompanyName));
          'id': EVALUATE(InExDocLineApp.ID,XmlNode.InnerText());
          'doctype': EVALUATE(InExDocLineApp."Document Type",XmlNode.InnerText());
          'docno': InExDocLineApp."Document No." := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDocLineApp."Document No."));
          'lineno_': EVALUATE(InExDocLineApp."Line No.",XmlNode.InnerText());
          'approver': InExDocLineApp.Approver := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDocLineApp.Approver));
          'approvedby': InExDocLineApp."Approved By" := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDocLineApp."Approved By"));
          'comment': InExDocLineApp.Comment := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDocLineApp.Comment));
          'approvaldate': EVALUATE(InExDocLineApp."Approval Date", FORMAT(CheckXMLDate(XmlNode.InnerText())));
          'comment': InExDocLineApp.Comment := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDocLineApp.Comment));
          'documentlineid': EVALUATE(InExDocLineApp."Document Line ID",XmlNode.InnerText());
          'documentid': EVALUATE(InExDocLineApp."Document ID",XmlNode.InnerText());
          'apporder': EVALUATE(InExDocLineApp."Approver Order",XmlNode.InnerText());
          'no_': InExDocLineApp."No." := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDocLineApp."No."));
          'description': InExDocLineApp.Description := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDocLineApp.Description));
          'flowstatus': EVALUATE(InExDocLineApp.Flowstatus,XmlNode.InnerText());
          'delegateto': EVALUATE(InExDocLineApp."Delegated to",XmlNode.InnerText());
          'changedby':;
        END;
      END;

      IF InExDocLineApp."Document ID" > 0 THEN BEGIN
        ExDoc.SETCURRENTKEY("Web ID");
        ExDoc.SETRANGE("Web ID", InExDocLineApp."Document ID");
        ExDoc.FINDFIRST;
      END ELSE
        ExDoc.RetrieveRecord(ExDoc,InExDocLineApp."Document Type",InExDocLineApp."Document No.");

      IF InExDocLineApp.ID > 0 THEN
        InExDocLineApp.ID := InExDocLineApp.ID - ExDoc."Web Company ID";
      IF InExDocLineApp."Document Line ID" > 0 THEN
        InExDocLineApp."Document Line ID" := InExDocLineApp."Document Line ID" - ExDoc."Web Company ID";
      IF InExDocLineApp."Document ID" > 0 THEN
        InExDocLineApp."Document ID" := InExDocLineApp."Document ID" - ExDoc."Web Company ID";
    END;

    LOCAL PROCEDURE ParseExDoc@1100285027(VAR XmlNode@1100285002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR InExDoc@1100285001 : Record 12013608;VAR TempCompanyName@1100285000 : Text[30]);
    VAR
      ExDoc2@1100285008 : Record 12013608;
      ExQuoteToReq@1100285005 : Codeunit 12013614;
      ExFImportMgt@1100285009 : Codeunit 12013604;
      XmlNodeList@1100285004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      i@1100285003 : Integer;
      OStream@1100285006 : OutStream;
      TempText@1100285007 : Text;
    BEGIN
      CLEAR(InExDoc);
      InExDoc.INIT;
      XmlNodeList := XmlNode.ChildNodes();
      FOR i := 0 TO XmlNodeList.Count - 1 DO BEGIN
        XmlNode := XmlNodeList.Item(i);
        CASE LOWERCASE(XmlNode.Name()) OF
          'compname': TempCompanyName := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(TempCompanyName));
          'doctype': EVALUATE(InExDoc."Document Type",XmlNode.InnerText());
          'docno': InExDoc."Document No." := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Document No."));
          'initiator': InExDoc.Initiator := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc.Initiator));
          'vendorno': InExDoc."Vendor No." := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Vendor No."));
          'admincomment': InExDoc."Admin Comment" := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Admin Comment"));
          'createdate': EVALUATE(InExDoc."Create Date",FORMAT(CheckXMLDate(XmlNode.InnerText())));
          'duedate': EVALUATE(InExDoc."Due Date",FORMAT(CheckXMLDate(XmlNode.InnerText())));
          'postingdate': EVALUATE(InExDoc."Posting Date",FORMAT(CheckXMLDate(XmlNode.InnerText())));
          'documentdate': EVALUATE(InExDoc."Document Date",FORMAT(CheckXMLDate(XmlNode.InnerText())));
          'status':  EVALUATE(InExDoc.Status,XmlNode.InnerText());
          'postingno': InExDoc."Predefind Posting No." := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Admin Comment"));
          'vendordocno': InExDoc."Vendor Document No." := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Vendor Document No."));
          'currencycode': InExDoc."Currency Code" := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Currency Code"));
          'vendorname': InExDoc."Vendor Name" := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Vendor Name"));
          'netamount': ExFImportMgt.TransformNumber(XmlNode.InnerText(),InExDoc."Net Amount");
          'amount': ExFImportMgt.TransformNumber(XmlNode.InnerText(),InExDoc."Gross Amount");
          'id': EVALUATE(InExDoc.ID,XmlNode.InnerText());
          'requisitionstatus' : EVALUATE(InExDoc."Requisition Status",XmlNode.InnerText());
          'docsubtype' : EVALUATE(InExDoc."Requisition Subtype",XmlNode.InnerText());
          'expectedreceiptdate': InExDoc."Expected Receipt Date" := ExQuoteToReq.DateField(XmlNode.InnerText());
          'textfield1': InExDoc."Text Field 1" := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Text Field 1"));
          'textfield2': InExDoc."Text Field 2" := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Text Field 2"));
          'textfield3': InExDoc."Text Field 3" := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Text Field 3"));
          'textfield4': InExDoc."Text Field 4" := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Text Field 4"));
          'textfield5': InExDoc."Text Field 5" := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Text Field 5"));
          'textfield6': InExDoc."Text Field 6" := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Text Field 6"));
          'textfield7': InExDoc."Text Field 7" := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Text Field 7"));
          'textfield8': InExDoc."Text Field 8" := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Text Field 8"));
          'textfield9': InExDoc."Text Field 9" := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Text Field 9"));
          'textfield10': InExDoc."Text Field 10" := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Text Field 10"));
          'decimalfield1': ExFImportMgt.TransformNumber(XmlNode.InnerText(),InExDoc."Decimal Field 1");
          'decimalfield2': ExFImportMgt.TransformNumber(XmlNode.InnerText(),InExDoc."Decimal Field 2");
          'decimalfield3': ExFImportMgt.TransformNumber(XmlNode.InnerText(),InExDoc."Decimal Field 3");
          'decimalfield4': ExFImportMgt.TransformNumber(XmlNode.InnerText(),InExDoc."Decimal Field 4");
          'approvercomments':
            BEGIN
      // Temp. Solution ->
      //uncomment        InExDoc."Approver Comments".CREATEOUTSTREAM(OStream);
              InExDoc."Web Approver Comments".CREATEOUTSTREAM(OStream);//delete
      // Temp. Solution <-
              TempText := XmlNode.InnerText();
              OStream.WRITETEXT(TempText);
            END;
          'createdby' : InExDoc."Created By" := COPYSTR(XmlNode.InnerText(),1,MAXSTRLEN(InExDoc."Created By"));
          'createddate': EVALUATE(InExDoc."Created Date",FORMAT(CheckXMLDate(XmlNode.InnerText())));

          'attachmentpath':; // Not handled in Ex Document table.
          'rowchangestate':; // Not handled in Ex Document table.
        END;
      END;

      InExDoc."Created By" := InExDoc.Initiator;
      InExDoc."Assigned Receipt Group" := InExDoc.Initiator;

      IF InExDoc.ID > 0 THEN BEGIN
        ExDoc2.SETCURRENTKEY("Web ID");
        ExDoc2.SETRANGE("Web ID", InExDoc.ID);
        ExDoc2.FINDFIRST;

        InExDoc."Web ID" := InExDoc.ID;
        InExDoc.ID := InExDoc.ID - ExDoc2."Web Company ID";
        InExDoc."Web Company ID" := ExDoc2."Web Company ID";
      END;
    END;

    LOCAL PROCEDURE GetWebComp@1100285018(CompName@1100285000 : Text[30]);
    VAR
      WebSearchMgt@1100285001 : Codeunit 12013635;
    BEGIN
      WebSearchMgt.GetWebComp(WebCompID,CompName);
    END;

    PROCEDURE ParseInParams@1100285102(VAR XmlDoc@1100285003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XmlNode@1100285001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Params@1100285000 : BigText) : Boolean;
    BEGIN
      // Finds the Params element and returns a boolean if there are any params.
      XmlDoc := XmlDoc.XmlDocument();
      XmlDoc.LoadXml(Params);
      XmlNode := XmlDoc.FirstChild();
      XmlNode := XmlNode.FirstChild();
      IF XmlNode.HasChildNodes() THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE)
    END;

    PROCEDURE ParseXMLHeader@1100285015(VAR XmlDoc@1100285002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XmlNode@1100285001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR Params@1100285000 : BigText) : Boolean;
    BEGIN
      // Finds the Params element and returns a boolean if there are any params.
      XmlDoc := XmlDoc.XmlDocument();
      XmlDoc.LoadXml(Params);
      XmlNode := XmlDoc.SelectSingleNode('Document');
      IF (XmlNode.HasChildNodes()) THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE)
    END;

    PROCEDURE CreateXMLHeader@1100285005(VAR XmlDoc@1100285001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XmlNode@1100285004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";TempName@1100285005 : Text);
    BEGIN
      CreateXmlDoc(TempName,FALSE,XmlNode,XmlDoc);
      XmlDoc := XmlDoc;
      XmlNode := XmlNode;
    END;

    PROCEDURE CreateXMLBody@1100285006(VAR XmlNode@1100285001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";TableNo@1100285002 : Integer;RecRef@1100285004 : RecordRef;FilterStr@1100285000 : Text[1024];Special@1100285003 : Integer);
    VAR
      XMLMgt@1100285005 : Codeunit 6224;
      FieldRec@1100285011 : Record 2000000041;
      FldRef@1100285009 : FieldRef;
      newRecNode@1100285010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      // Creates elements in the body tag, with one element per record in the recordset.
      // The xmlNode should be created with the CreateXMLHeader function and be pointing to the <Body>.
      // The xmlNode will be returned containing the resultset, one element per record with the name of the table.
      // If this function is called multiple times with different tables those resultsets should be appended as sibling to each other.
      // _tableNo is the table to be added.
      // _recordSet (recordRef) is all the records that should be included. Filtering and modifying the set is done in the each WS function.
      // _filterStr is the filter for the fieldlist. Normally we will exclude unwanted fields like this '<>1&<>3&<>12' OR just use two fields '1|5'
      // _special is an integer that specify if some extra code should be run.
      //   0 = normal.
      //   1 = Do not include BLOB fields. (Not implemented, just an example.)
      //   2+ = Most adjustments should be done directly to the refRecordset.
      // This is the current Body:
      {
        <body quantity="203">
          <tablename>
            <fieldnameone>valueone</fieldone>
            <fieldnametwo>valuetwo</fieldnametwo>
          </tablename>
            <fieldnameone>valueone</fieldone>
            <fieldnametwo>valuetwo</fieldnametwo>
          <tablenametwo>
          </tablenametwo>
          <tablenamethree>
          </tablenamethree>
        </body>
      }
      IF RecRef.FINDFIRST THEN
        REPEAT
          // Add field nodes to the record element.
          FieldRec.RESET;
          FieldRec.SETRANGE(TableNo, TableNo);
          FieldRec.SETRANGE(Enabled,TRUE);
          IF FilterStr <> '' THEN
            FieldRec.SETFILTER("No.", FilterStr);
          IF FieldRec.FINDFIRST THEN BEGIN
            // Add element with the name of the table name.
            XMLMgt.AddElement(XmlNode,TransformString(FORMAT(FieldRec.TableName)),'','',newRecNode);
            REPEAT
              FldRef := RecRef.FIELD(FieldRec."No.");
              XMLMgt.AddNode(newRecNode,TransformString(FORMAT(FieldRec.FieldName)),ConvertToString(FieldRec,FldRef,Special))
            UNTIL FieldRec.NEXT = 0;
          END;
          CASE Special OF
            0: ; // Normal
            1: ; // Adjust for BLOB or other special handling.
          ELSE
            ERROR ('Unhandled special parameter');
          END;
        UNTIL RecRef.NEXT = 0;
    END;

    PROCEDURE TransformString@1100285011(InStr@1100285000 : Text[1024]) : Text[1024];
    BEGIN
      InStr := DELCHR(LOWERCASE(InStr));
      InStr := CONVERTSTR(InStr,'''():-','_____');
      EXIT(InStr);
    END;

    PROCEDURE ConvertToString@1100285012(VAR Field@1100285000 : Record 2000000041;VAR FieldRef@1100285001 : FieldRef;special@1100285005 : Integer) : Text[1024];
    VAR
      TempBoolean@1100285002 : Boolean;
      TempDate@1100285003 : Date;
      TempDec@1100285008 : Decimal;
      TempTime@1100285009 : Time;
    BEGIN
      // Format the SQL versions of Inparam values so they will match the web.
      // We included the special parameter so we can include individual call adjustments, like BLOBS, etc.

      CASE Field.Type OF
        Field.Type::Boolean:
          IF EVALUATE(TempBoolean,FORMAT(FieldRef.VALUE)) THEN
            EXIT(FORMAT(TempBoolean,0,2));
        Field.Type::Date:
          IF EVALUATE(TempDate,FORMAT(FieldRef.VALUE)) THEN
            EXIT(FORMAT(TempDate,0,9));
        Field.Type::DateTime:
          EXIT(FORMAT(FieldRef.VALUE,0,9));
        Field.Type::Decimal:
          IF EVALUATE(TempDec,FORMAT(FieldRef.VALUE),0) THEN
            EXIT(FORMAT(TempDec,0,9));
        Field.Type::Time:
          IF EVALUATE(TempTime,FORMAT(FieldRef.VALUE)) THEN
            EXIT(FORMAT(TempTime,0,9));
        ELSE
          EXIT(FORMAT(FieldRef.VALUE));
      END;

      EXIT('');
    END;

    LOCAL PROCEDURE TestMode@1100285000() : Boolean;
    VAR
      WebServReqMgt@1100285000 : Codeunit 12013629;
    BEGIN
      EXIT(WebServReqMgt.TestMode(WebCompID));
    END;

    PROCEDURE CleanUpXmlBigText@1100285048(VAR BigTextLoc@1100285000 : BigText);
    VAR
      TmpStr@1100285001 : Text;
    BEGIN
      BigTextLoc.GETSUBTEXT(TmpStr,1,BigTextLoc.LENGTH);
      CLEAR(BigTextLoc);
      BigTextLoc.ADDTEXT(CleanUpXmlText(TmpStr));
    END;

    PROCEDURE CleanUpXmlText@1100285004(InStr@1100285000 : Text) : Text;
    VAR
      i@1100285001 : Integer;
      Pos@1100285006 : Integer;
      HexArr@1100285007 : ARRAY [161] OF Text[10];
    BEGIN
      LoadHexArray(HexArr);

      FOR i := 1 TO ARRAYLEN(HexArr) DO BEGIN
        REPEAT
          Pos := STRPOS(InStr,HexArr[i]);
          IF Pos > 0 THEN
            InStr := DELSTR(InStr,Pos,STRLEN(HexArr[i]));
        UNTIL Pos = 0;
      END;

      EXIT(InStr);
    END;

    PROCEDURE LoadHexArray@1100285076(VAR HexArr@1100285000 : ARRAY [161] OF Text[10]);
    VAR
      i@1100285002 : Integer;
      Ind@1100285001 : Integer;
    BEGIN
      FOR i := 0 TO 255 DO
        IF (i < 32) OR (i > 126) THEN BEGIN
          Ind += 1;
          HexArr[Ind] := IntToHex(i);
        END;
    END;

    PROCEDURE IntToHex@1100285003(IntValue@1100285000 : Integer) : Text[10];
    VAR
      HexDigits@1100285001 : Text;
      HexValue@1100285002 : Text;
    BEGIN
      HexDigits := '0123456789ABCDEF';
      HexValue := '';

      REPEAT
        HexValue := COPYSTR(HexDigits,(IntValue MOD 16) + 1,1) + HexValue;
        IntValue := (IntValue - (IntValue MOD 16)) / 16;
      UNTIL IntValue = 0;

      EXIT(STRSUBSTNO('&#x%1;',HexValue));
    END;

    LOCAL PROCEDURE CheckDimWeb@1100285026(VAR TempDocLineApproved@1100285001 : TEMPORARY Record 12013609);
    VAR
      ExFlowSetup@1100285000 : Record 12013601;
      ExDocLine@1100285002 : Record 12013609;
    BEGIN
      ExFlowSetup.GET;
      CASE ExFlowSetup."Check Dimensions Web" OF
        ExFlowSetup."Check Dimensions Web"::Always:
          BEGIN
            TempDocLineApproved.RESET;
            IF TempDocLineApproved.FINDSET THEN
              REPEAT
                ExDocLine.GET(TempDocLineApproved.ID);
                CheckDim(ExDocLine);
              UNTIL TempDocLineApproved.NEXT = 0;
          END;

        ExFlowSetup."Check Dimensions Web"::"Final Approver Only":
          BEGIN
            TempDocLineApproved.RESET;
            IF TempDocLineApproved.FINDSET THEN
              REPEAT
                ExDocLine.GET(TempDocLineApproved.ID);
                IF ExDocLine.Flowstatus = ExDocLine.Flowstatus::Approved THEN
                  CheckDim(ExDocLine);
              UNTIL TempDocLineApproved.NEXT = 0;
          END;
      END;
    END;

    LOCAL PROCEDURE CheckDimWebRequisition@1100285021(EXDoc@1100285001 : Record 12013608);
    VAR
      EXDocLine@1100285000 : Record 12013609;
    BEGIN
      IF EXDoc."Document Type" <> EXDoc."Document Type"::Requisition THEN
        EXIT;

      EXDocLine.RESET;
      EXDocLine.SETRANGE("Document ID", EXDoc.ID);
      IF EXDocLine.FINDSET THEN
        REPEAT
          CheckDim(EXDocLine);
        UNTIL EXDocLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AddApproverToDelegatedLine@1100285014(ExDocLineApp@1100285007 : Record 12013610;ExDocLineAppUnApproved@1100285005 : Record 12013610;ID@1100285011 : Integer);
    VAR
      NewExDocLineApp@1100285003 : Record 12013610;
      TempCompName@1100285002 : Text[30];
      TempApproverOrder@1100285001 : Integer;
      TempApproverOrder2@1100285000 : Integer;
      DelegatedToUsed@1100285008 : Boolean;
      First@1100285010 : Boolean;
    BEGIN
      DelegatedToUsed := TRUE;

      CASE ExDocLineApp.Flowstatus OF
        ExDocLineApp.Flowstatus::Rejected:
          BEGIN
            NewExDocLineApp.INIT;
            NewExDocLineApp.TRANSFERFIELDS(ExDocLineApp);
            NewExDocLineApp.ID := 0;
            NewExDocLineApp.Approver := ExDocLineApp."Delegated to";
            NewExDocLineApp.Comment := '';
            NewExDocLineApp."Delegated to" := '';

            ExDocLineAppUnApproved.SETCURRENTKEY("Document Line ID","Approver Order");
            ExDocLineAppUnApproved.SETRANGE("Document Line ID", ID);
            ExDocLineAppUnApproved.SETFILTER(Approver, '<>%1', ExDocLineApp."Delegated to");
            ExDocLineAppUnApproved.SETFILTER("Approver Order", '>%1', ExDocLineApp."Approver Order");
            IF ExDocLineAppUnApproved.FINDFIRST THEN BEGIN
              TempApproverOrder := ExDocLineAppUnApproved."Approver Order";
              NewExDocLineApp."Approver Order" := ROUND(ExDocLineApp."Approver Order" + ((TempApproverOrder - ExDocLineApp."Approver Order") / 2),1);
            END ELSE
              NewExDocLineApp."Approver Order" := ExDocLineApp."Approver Order" + 10000;

            CLEAR(NewExDocLineApp."Approval Date");
            NewExDocLineApp."Approved By" := '';
            NewExDocLineApp.Flowstatus := NewExDocLineApp.Flowstatus::Current;
            NewExDocLineApp.Source := NewExDocLineApp.Source::"Manually in Web";
            NewExDocLineApp.INSERT(TRUE);
          END;
        ExDocLineApp.Flowstatus::"On hold":
          BEGIN
            NewExDocLineApp.INIT;
            NewExDocLineApp.TRANSFERFIELDS(ExDocLineApp);
            NewExDocLineApp.ID := 0;
            NewExDocLineApp.Approver := ExDocLineApp."Delegated to";
            NewExDocLineApp.Comment := '';
            NewExDocLineApp."Delegated to" := '';

            ExDocLineAppUnApproved.SETCURRENTKEY("Document Line ID","Approver Order");
            ExDocLineAppUnApproved.SETRANGE("Document Line ID", ID);
            ExDocLineAppUnApproved.SETFILTER("Approver Order", '>%1', ExDocLineApp."Approver Order");
            IF ExDocLineAppUnApproved.FINDFIRST THEN BEGIN
              TempApproverOrder := ExDocLineAppUnApproved."Approver Order";
              NewExDocLineApp."Approver Order" := ROUND(ExDocLineApp."Approver Order" + ((TempApproverOrder - ExDocLineApp."Approver Order") / 2),1);
            END ELSE BEGIN
              TempApproverOrder := NewExDocLineApp."Approver Order" + 10000;
              NewExDocLineApp."Approver Order" := ExDocLineApp."Approver Order" + 10000;
            END;

            CLEAR(NewExDocLineApp."Approval Date");
            NewExDocLineApp."Approved By" := '';
            NewExDocLineApp.Flowstatus := NewExDocLineApp.Flowstatus::Current;
            NewExDocLineApp."Delegated to" := '';
            NewExDocLineApp.Source := NewExDocLineApp.Source::"Manually in Web";
            NewExDocLineApp.INSERT(TRUE);
            TempApproverOrder2 := NewExDocLineApp."Approver Order";

            // Add in the approver in again that put it on hold
            NewExDocLineApp.INIT;
            NewExDocLineApp.TRANSFERFIELDS(ExDocLineApp);
            NewExDocLineApp.ID := 0;
            NewExDocLineApp.Comment := '';
            NewExDocLineApp."Approver Order" := ROUND(TempApproverOrder2 + ((TempApproverOrder - TempApproverOrder2) / 2),1);

            CLEAR(NewExDocLineApp."Approval Date");
            NewExDocLineApp."Approved By" := '';
            NewExDocLineApp.Flowstatus := NewExDocLineApp.Flowstatus::"Not processed";
            NewExDocLineApp."Under review" := FALSE;
            NewExDocLineApp."Delegated to" := '';
            NewExDocLineApp.Source := NewExDocLineApp.Source::"Manually in Web";
            NewExDocLineApp.INSERT(TRUE);
          END;
      END;
    END;

    PROCEDURE Validate4PS@1101285001(ExDocLine@1101285000 : Record 12013609);
    VAR
      ExDocLineDim@1101285001 : Record 12013611;
      CostOBjDimVal@1101285002 : Code[20];
      GlAcc@1101285003 : Record 15;
      ServOrdernNo@1101285004 : Code[20];
      ExColumn@1101285005 : Record 12013661;
      Txt001@1101285006 : TextConst 'ENU=You can not select a cost account when a Project/Service Order is selected;SVE=Du f†r ej boka mot kostnadskonto och projekt/serviceorder samtidigt';
      Txt002@1101285007 : TextConst 'ENU=You must select a %1;SVE=Du m†ste v„lja ett %1';
      Txt003@1101285008 : TextConst 'ENU=You can not use Service Order and Project at the same time;SVE=Du kan inte v„lja serviceorder i kombination med projekt';
      Txt004@1101285009 : TextConst 'ENU=You must select type of cost (No./Project/Service Order);SVE=Du m†ste v„lja typ av kostnad (Nr./Projekt/Service Order)';
      Txt005@1101285010 : TextConst 'ENU=You can not select %1 without Project/Service order.;SVE=Du kan inte v„lja %1 utan projekt/service order';
      Txt006@1101285011 : TextConst 'ENU=You must select a account a cost account;SVE=Du m†ste v„lja ett kostnadskonto';
      ExtContract@1101285012 : Record 11012004;
      Element@1101285013 : Record 11012010;
    BEGIN
      //Cost Object must be a column to enable logic
      ExColumn.RESET;
      ExColumn.SETRANGE(Source,'DIM2');
      IF NOT ExColumn.FINDFIRST THEN
        EXIT;

      ExDocLineDim.RESET;
      ExDocLineDim.SETCURRENTKEY("Document Line ID");
      ExDocLineDim.SETRANGE("Document Line ID", ExDocLine.ID);
      ExDocLineDim.SETRANGE("Dimension Code",ExColumn.Code);
      IF ExDocLineDim.FINDFIRST THEN
        CostOBjDimVal := ExDocLineDim."Dimension Value";
      //Column Code hardcoded in setup
      ExDocLineDim.SETRANGE("Dimension Code",'SERVICEORDERNO');
      IF ExDocLineDim.FINDFIRST THEN
        ServOrdernNo := ExDocLineDim."Dimension Value";


      IF ExDocLine."Job No." <> '' THEN BEGIN
        ExDocLine.TESTFIELD("Line Type",ExDocLine."Line Type"::"G/L Account");
        IF ExDocLine."No." <> '' THEN BEGIN
          GlAcc.GET(ExDocLine."No.");
          IF GlAcc."Direct Posting" THEN
            ERROR(Txt001);
        END;
        IF CostOBjDimVal = '' THEN
          ERROR(Txt002,ExColumn.Code);
        IF ServOrdernNo <> '' THEN
          ERROR(Txt003);
        EXIT;
      END;

      IF ServOrdernNo <> '' THEN BEGIN
        ExDocLine.TESTFIELD("Line Type",ExDocLine."Line Type"::"G/L Account");
        IF ExDocLine."No." <> '' THEN BEGIN
          GlAcc.GET(ExDocLine."No.");
          IF GlAcc."Direct Posting" THEN
            ERROR(Txt001);
        END;
        IF CostOBjDimVal = '' THEN
          ERROR(Txt002,ExColumn.Code);
        IF ExDocLine."Job No." <> '' THEN
          ERROR(Txt003);
        EXIT;
      END;

      IF ExDocLine."No." = '' THEN
        ERROR(Txt004);

      IF CostOBjDimVal <> '' THEN
        ERROR(Txt005,ExColumn.Code);

      IF ExDocLine."Line Type" = ExDocLine."Line Type"::"G/L Account" THEN BEGIN
        GlAcc.GET(ExDocLine."No.");
        IF NOT GlAcc."Direct Posting" THEN
          ERROR(Txt006);
      END;

      ExDocLineDim.RESET;
      ExDocLineDim.SETCURRENTKEY("Document Line ID");
      ExDocLineDim.SETRANGE("Document Line ID", ExDocLine.ID);
      ExDocLineDim.SETRANGE("Dimension Code",'EXTCONTR_4PS');
      IF ExDocLineDim.FINDFIRST THEN
        ExtContract.GET(ExDocLine."Job No.",ExDocLineDim."Dimension Value"); //Delib error

      ExDocLineDim.SETRANGE("Dimension Code",'ELEMENT_4PS');
      IF ExDocLineDim.FINDFIRST THEN
        ExtContract.GET(ExDocLine."Job No.",ExDocLineDim."Dimension Value"); //Delib error
    END;

    BEGIN
    END.
  }
}

