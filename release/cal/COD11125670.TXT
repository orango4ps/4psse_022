OBJECT Codeunit 11125670 Transfer Estimate RAW
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11072003=m;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@11012015 : TextConst 'ENU=Copy from          #1##########\\;NOR=Kopier fra          #1##########\\;SVE=Kopiera fr†n       #1##########\\';
      Text001@11012016 : TextConst 'ENU=Copy to              #2##########\\;NOR=Kopier til              #2##########\\;SVE=Kopiera till         #2##########\\';
      Text002@11012017 : TextConst 'ENU=Busy with         #3################# @4@@@@@@@@@@@@@;NOR=Opptatt med         #3################# @4@@@@@@@@@@@@@;SVE=Upptagen med      #3################# @4@@@@@@@@@@@@@';
      Text003@11012018 : TextConst 'ENU=Budget is Fixed, transfer Estimate only allowed to Adjustment or Extension;NOR=Budsjettet er fast. Overf›ring av kalkyle tillates kun for Justering eller ETA.;SVE=Budgeten „r fast. ™verf”ring av kalkyl till†ts endast f”r Justering eller ŽTA.';
      Text004@11012019 : TextConst 'ENU=Collect;NOR=Samle inn;SVE=Samla in';
      Text006@11012021 : TextConst 'ENU=Transfer;NOR=Overf›ring;SVE=™verf”ring';
      Text007@11012022 : TextConst 'ENU=No data within selection;NOR=Det finnes ingen data i markeringen;SVE=Det finns inga data i markeringen';
      Text008@11012023 : TextConst 'ENU=There is a budget for this project %1, do you want to add estimate ?;NOR=Det finnes et budsjett for prosjekt %1, vil du legge til kalkylen?;SVE=Det finns en budget f”r projektet %1, vill du l„gga till kalkylen?';
      Text009@11012024 : TextConst 'ENU=Create Start Element in table %1;NOR=Opprette startelement i tabell %1;SVE=Skapa startelement i tabell %1';
      HelpRec@11012000 : TEMPORARY Record 11012174;
      EstSetup@1210190005 : Record 11012150;
      QASetup@1100528501 : Record 11126001;
      JobSetup@1100525010 : Record 315;
      EstRec@1100525005 : Record 11012151;
      EstimateLineRAW@1100528911 : Record 11125698;
      EstRateRec@1210190000 : Record 11012160;
      ServSetup@1100528901 : Record 11012800;
      ServOrderRec@1100525004 : Record 11012823;
      TmpServOrderRec@1100525006 : TEMPORARY Record 11012823;
      ObjectModification@1100528905 : Record 11071700;
      TmpObjectModification@1100528904 : TEMPORARY Record 11071700;
      TryOutRec@1100525011 : Record 11012761;
      ProjRec@1210190004 : Record 11072003;
      PlotRec@1100485005 : Record 11012500;
      ProjBudgetRec@11012006 : Record 11012001;
      ProjElemRec@11012007 : Record 11012010;
      ElemRec@11012008 : Record 11012060;
      Elem2Rec@11012014 : Record 11012060;
      RouteRefMgtCU@1210190008 : Codeunit 11012045;
      Status@11012011 : Dialog;
      NoOfRecords@11012012 : Integer;
      LineCount@11012013 : Integer;
      HelpLino@1100525013 : Integer;
      BudgetLino@1100525015 : Integer;
      ProjectElement@11012009 : Code[20];
      JobNo@1210190001 : Code[20];
      Text011@1210190002 : TextConst 'ENU=Adjustment Hours Additional Costs Summary Sheet;NOR=Sammendragsark for justering av tilleggskoster, timer;SVE=Summeringsark f”r justering av till„ggskostnader, timmar';
      Text012@1210190003 : TextConst 'ENU="Correction Factor %1: ";NOR=Rettelsesfaktor %1:;SVE="R„ttningsfaktor %1: "';
      desc1@1210190014 : Text[100];
      desc2@1210190013 : Text[100];
      Text013@1100485001 : TextConst 'ENU=Do you want to transfer this estimate to more then 1 project ?;NOR=Vil du overf›re denne kalkylen til flere enn ett prosjekt?;SVE=Vill du ”verf”ra den h„r kalkylen till mer „n 1 projekt?';
      LastProject@1100485002 : Code[20];
      ServSheet@1100525014 : Code[20];
      SeriesServOrder@1100525009 : Code[10];
      SkipQuestionProject@1100485003 : Boolean;
      TransferZeroLines@1100525003 : Boolean;
      TransferStructure@1100525002 : Boolean;
      TransferSalesPrice@1100485006 : Boolean;
      TransferSubEstimate@1100485007 : Boolean;
      TransferPurchAction@1100485008 : Boolean;
      TransferCommentLines@1100525017 : Boolean;
      TransferPartToTenderParagraph@1100525000 : Boolean;
      TransferDestination@1100525001 : 'Project,ServLoc,ServOrder,Modification,,,,,,,,,,TransferPlantNeed';
      SettlementMethod@1100525008 : 'FixedPrice,CostPlus';
      CopyTryOut@1100525007 : Boolean;
      Text014@1100525012 : TextConst 'ENU=%1 (%2) updated;NOR=%1 (%2) er oppdatert;SVE=%1 (%2) har uppdaterats';
      CopyFeatures@1100525016 : ' ,TechSpec,CheckList,Both';
      CommentLinesTransfered@1100525018 : Boolean;
      "-dp01585-"@1100525020 : Integer;
      EstFrom@1100525019 : Code[20];
      SubEstFilter@1100525024 : Text[250];
      EstPartFilter@1100525023 : Text[250];
      SheetFilter@1100525022 : Text[250];
      StatusFilter@1100525021 : Text[250];
      ProjTo@1100525033 : Code[20];
      ExtTo@1100525032 : Code[20];
      AdjTo@1100525031 : Code[20];
      PlotTo@1100525030 : Code[20];
      HouseModelTo@1100525029 : Code[20];
      MainGroupTo@1100525028 : Code[20];
      GroupTo@1100525027 : Code[20];
      SubGroupTo@1100525026 : Code[20];
      OptTo@1100525025 : Code[20];
      ServOrderNo@1100528909 : Code[20];
      ServiceLocationNo@1100528910 : Code[20];
      OrderKind@1100525035 : Code[20];
      OrderType@1100525034 : Code[20];
      UpdateOrderAmount@1100525040 : ' ,Summary,TryOutQuote';
      OrderAmount@1100525039 : Decimal;
      InstScheme@1100525038 : Code[20];
      ValidateRateCode@1100525042 : Boolean;
      CopyPrPlActivities@1100525037 : Boolean;
      CopyPrPlTemplate@1100525036 : Code[10];
      SelectSheet@1100525044 : Boolean;
      UpdateProject@1100525043 : Boolean;
      Text015@1100528902 : TextConst 'ENU=of line within recipe %1 with description "%2" must have a value;NOR=p† raden i malen %1 med Beskrivelsen "%2" m† ha en verdi;SVE=p† raden i mallen %1 med beskrivningen "%2" m†ste ha ett v„rde';
      CollectSubEstimates@1100528903 : Boolean;
      SaveRecipeStructure@1100528906 : Boolean;
      BomLine@1100528900 : Integer;
      Text016@1100528908 : TextConst 'ENU=There is a budget for Service Order %1, do you want to add lines ?';
      Text017@1100528907 : TextConst 'ENU=There is a Modification Activities for Object Modification %1, do you want to add lines ?';
      TransferRates@1100525041 : 'AssignAmountOnly,AssignCodeAndAmount,ValidateRateCode';
      ServiceOrderNo@1100525045 : Code[20];
      FillContractAmount@1100529600 : Boolean;
      TransferBudgetToAdviceOrder@1100528500 : Boolean;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;

    PROCEDURE SetTransferOptions@1100485003(iTransferZeroLines@1100525002 : Boolean;iTransferStructure@1100525001 : Boolean;iTransferPartToTenderParagraph@1100525000 : Boolean;iTransferSalesPrice@1100485000 : Boolean;iTransferSubEstimate@1100485001 : Boolean;iTransferPurchAction@1100485002 : Boolean;iTransferCommentLines@1100525007 : Boolean;iTransferDestination@1100525003 : 'Project,ServLoc,ServOrder';iSettlementMethod@1100525005 : 'FixedPrice,CostPlus';iCopyTryOut@1100525004 : Boolean;iCopyFeatures@1100525006 : ' ,TechSpec,CheckList,Both';FillContractAmountNew@1100529600 : Boolean);
    BEGIN
      TransferZeroLines := iTransferZeroLines;
      TransferStructure := iTransferStructure;
      TransferPartToTenderParagraph := iTransferPartToTenderParagraph;
      TransferSalesPrice := iTransferSalesPrice;
      TransferSubEstimate := iTransferSubEstimate;
      TransferPurchAction := iTransferPurchAction;
      TransferCommentLines := iTransferCommentLines;
      TransferDestination := iTransferDestination;
      SettlementMethod := iSettlementMethod;
      CopyTryOut := iCopyTryOut;
      CopyFeatures := iCopyFeatures;
      FillContractAmount := FillContractAmountNew;
    END;

    PROCEDURE SetEstimateOptions@1100525005(iEstFrom@1100525004 : Code[20];iSubEstFilter@1100525003 : Text[250];iEstPartFilter@1100525002 : Text[250];iSheetFilter@1100525001 : Text[250];iStatusFilter@1100525000 : Text[250]);
    BEGIN
      //DP01585
      EstFrom := iEstFrom;
      SubEstFilter := iSubEstFilter;
      EstPartFilter := iEstPartFilter;
      SheetFilter := iSheetFilter;
      StatusFilter := iStatusFilter;
    END;

    PROCEDURE SetProjectOptions@1100525020(iProjTo@1100525008 : Code[20];iExtTo@1100525007 : Code[20];iAdjTo@1100525006 : Code[20];iPlotTo@1100525005 : Code[20];iHouseModelTo@1100525004 : Code[20];iMainGroupTo@1100525003 : Code[20];iGroupTo@1100525002 : Code[20];iSubGroupTo@1100525001 : Code[20];iOptTo@1100525000 : Code[20]);
    BEGIN
      //DP01585
      ProjTo := iProjTo;
      ExtTo := iExtTo;
      AdjTo := iAdjTo;
      PlotTo := iPlotTo;
      HouseModelTo := iHouseModelTo;
      MainGroupTo := iMainGroupTo;
      GroupTo := iGroupTo;
      SubGroupTo := iSubGroupTo;
      OptTo := iOptTo;
    END;

    PROCEDURE SetProjectPlanningOptions@1210190007(iCopyPrPlActivities@1210190000 : Boolean;iCopyPrPlTemplate@1210190001 : Code[10]);
    BEGIN
      //DP01585
      CopyPrPlActivities := iCopyPrPlActivities;
      CopyPrPlTemplate := iCopyPrPlTemplate;
    END;

    PROCEDURE SetServiceOptions@1100525021(iOrderKind@1100525000 : Code[20];iOrderType@1100525001 : Code[20];iUpdateOrderAmount@1100409002 : ' ,Summary,TryOutQuote';iOrderAmount@1100409001 : Decimal;iInstScheme@1100409000 : Code[20];iServiceLocationNo@1100528600 : Code[20];iServiceOrderNo@1100525002 : Code[20];iTransferBudgetToAdviceOrder@1100528500 : Boolean);
    BEGIN
      //DP01585
      OrderKind := iOrderKind;
      OrderType := iOrderType;
      UpdateOrderAmount := iUpdateOrderAmount;
      OrderAmount := iOrderAmount;
      InstScheme := iInstScheme;
      ServiceLocationNo := iServiceLocationNo;
      ServiceOrderNo := iServiceOrderNo;  //C043087
      TransferBudgetToAdviceOrder := iTransferBudgetToAdviceOrder;  //C030978
    END;

    PROCEDURE SetValidateRateCode@1100525025(iValidateRateCode@1100525000 : Boolean);
    BEGIN
      //DP01585
      ValidateRateCode := iValidateRateCode;
    END;

    PROCEDURE SetRateOption@1100525009(iTransferRates@1100525000 : Option);
    BEGIN
      TransferRates := iTransferRates;
    END;

    PROCEDURE Start@1();
    BEGIN
      Status.OPEN(
         Text000 +
         Text001 +
         Text002);
      Status.UPDATE(1, EstFrom);
      Status.UPDATE(2, ProjTo);

      IF TransferDestination = TransferDestination::Project THEN BEGIN
        IF ProjRec.GET(ProjTo) THEN
          IF ProjRec."Budget Fixed" AND ((ExtTo = '') AND (AdjTo = '') AND (OptTo = '')) THEN
            ERROR(Text003);
      END;

      EstSetup.GET;
      JobSetup.GET;

      EstRec.GET(EstFrom);

      Collect;
      Transfer;

      IF TransferDestination = TransferDestination::Project THEN BEGIN
        IF UpdateProject THEN
          UpdateProjRec;
        IF TransferPartToTenderParagraph THEN
          CopyEstimateParagraphToTenderParagraph;
        IF CopyTryOut AND FPSLicenseManagement.LicenseAndReadPermissionForTable(TryOutRec) THEN
          TryOutRec.CopyRelation(1, 0, EstFrom, ProjTo);
        CheckBudgetSummary;
      END;

      Status.CLOSE;
    END;

    PROCEDURE Collect@2();
    BEGIN
      Status.UPDATE(3, Text004);
      HelpLino := 0;

      //DP01676.sn
      EstRec.GET(EstFrom);
      CollectFromEstLine;
      //DP01676.en
      CollectFromRcpLine;
      IF SelectSheet = TRUE THEN BEGIN
        IF TransferDestination = TransferDestination::Project THEN
          CollectFromSumLine;
      END;
    END;

    PROCEDURE CollectFromEstLine@1100525010();
    VAR
      EstimateRoomLineQuantity@1100525002 : Record 11125685;
      OrigQuantity@1100525003 : Decimal;
      RoomQuantity@1100525004 : Decimal;
      RestQuantity@1100525005 : Decimal;
    BEGIN
      EstimateLineRAW.SETRANGE("Estimate No.", EstFrom);  //DP01090
      IF EstPartFilter <> '' THEN
        EstimateLineRAW.SETFILTER("Tender Paragraph No.", EstPartFilter);
      IF StatusFilter <> '' THEN
        EstimateLineRAW.SETFILTER("Line Status", StatusFilter);
      IF EstimateLineRAW.FINDSET THEN BEGIN
        LineCount := 0;
        NoOfRecords := EstimateLineRAW.COUNT;
        REPEAT
          CASE TransferDestination OF
            TransferDestination::Project:
              BEGIN
                IF (EstimateLineRAW."Project No." <> '') THEN
                  JobNo := EstimateLineRAW."Project No."
                ELSE
                  JobNo := DetermineProject(EstimateLineRAW."Estimate No.",'','','','');
                IF (EstimateLineRAW.Element <> '') THEN
                  ProjectElement := EstimateLineRAW.Element
                ELSE
                  ProjectElement := DetermineElement(EstimateLineRAW."Estimate No.",'','','','');
              END;
            TransferDestination::ServOrder:
              BEGIN
                //C051185.sn
                ServOrderNo := EstimateLineRAW."Service Order No.";
                IF ServOrderNo = '' THEN BEGIN
                  EstRec.GET(EstimateLineRAW."Estimate No.");
                  ServOrderNo := EstRec."Service Order No.";
                END;
                IF ServOrderNo = '' THEN
                  ServOrderNo := ServiceOrderNo;  //import value
                //C051185.en
              END;
          END;
          LineCount := LineCount + 1;
          Status.UPDATE(4,ROUND(LineCount / NoOfRecords * 10000,1));
          OrigQuantity := EstimateLineRAW."Cumulative Quantity";
          IF OrigQuantity <> 0 THEN BEGIN
            RestQuantity := OrigQuantity;
            EstimateRoomLineQuantity.SETRANGE("Estimate No.", EstimateLineRAW."Estimate No.");
            EstimateRoomLineQuantity.SETRANGE("Tender Paragraph No.", EstimateLineRAW."Tender Paragraph No.");
            EstimateRoomLineQuantity.SETRANGE("Estimate Line", EstimateLineRAW."Line No.");
            IF EstimateRoomLineQuantity.FINDSET THEN BEGIN
              REPEAT
                //option ignore quantity does not change Part Quantity but updates Cumulative Quantity: hence, use percentage
                RoomQuantity := (EstimateRoomLineQuantity.Quantity * (EstimateLineRAW."Cumulative Quantity" / EstimateLineRAW.Quantity));
                FillHelpEstimateRec(EstFrom, EstimateRoomLineQuantity.Room, RoomQuantity);
                RestQuantity := RestQuantity - RoomQuantity;
              UNTIL EstimateRoomLineQuantity.NEXT = 0;
            END;
            IF RestQuantity <> 0 THEN
              //specification by room deviating from estimate line
              FillHelpEstimateRec(EstFrom, '', RestQuantity);
          END ELSE BEGIN
            //transfer zero line
            FillHelpEstimateRec(EstFrom, '', OrigQuantity);
          END;
        UNTIL EstimateLineRAW.NEXT = 0;
      END;
    END;

    PROCEDURE CollectFromRcpLine@1100525013();
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE CollectFromSumLine@1100525016();
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE Transfer@4();
    VAR
      SHCopyManagement@1100529501 : Codeunit 11125987;
      StoreProj@1210190000 : Code[20];
      SwitchProj@1210190001 : Boolean;
      LineTransfered@1210190005 : Boolean;
      lvCostType@1100485000 : Integer;
      PrevCode@1100525000 : Code[20];
      SHActive@1100529500 : Boolean;
      FirstTime@1100525001 : Boolean;
    BEGIN
      Status.UPDATE(3, Text006);
      BudgetLino := 0;
      StoreProj := ProjTo;
      SwitchProj := TRUE;
      PrevCode := '~';
      SHActive := GetSHActive;
      FirstTime := TRUE;

      JobSetup.GET;

      CASE TransferDestination OF
        TransferDestination::ServOrder:
          BEGIN
            ServSetup.GET;
            IF NOT TestSOBudgetLinesExist THEN
              EXIT;
            IF TransferStructure = TRUE THEN
              HelpRec.SETCURRENTKEY("Estimate No.", "Sub-Estimate No.")
            ELSE
              HelpRec.SETCURRENTKEY("Estimate No.", Code);
            HelpRec.SETRANGE("Summary Line", FALSE);
          END;
        TransferDestination::Modification:
          BEGIN
            IF NOT TestObjectModificationLinesExists THEN
              EXIT;
          END;
      END;
      HelpRec.SETRANGE("Estimate No.", EstFrom);
      IF NOT HelpRec.FINDSET THEN BEGIN
        MESSAGE(Text007);
      END ELSE BEGIN
        LineCount := 0;
        NoOfRecords := HelpRec.COUNT;
        REPEAT
          LineCount := LineCount + 1;
          Status.UPDATE(4,ROUND(LineCount / NoOfRecords * 10000,1));

          CASE TransferDestination OF
            TransferDestination::Project:
              BEGIN
                IF HelpRec."Project No." = '' THEN
                  HelpRec."Project No." := StoreProj;
                IF ProjTo <> HelpRec."Project No." THEN BEGIN
                  ProjTo := HelpRec."Project No.";
                  SwitchProj := TRUE;
                END;
                IF ProjRec.GET(ProjTo) THEN BEGIN
                  ProjRec."Estimate No." := EstFrom;
                  ProjRec.MODIFY(TRUE);
                END;

                ProjBudgetRec.RESET;
                ProjBudgetRec.SETRANGE("Project No.", ProjTo);
                ProjBudgetRec.SETRANGE("Extension Contract", '');
                ProjBudgetRec.SETRANGE(Adjustment, '');
                ProjBudgetRec.SETRANGE(Option, '');
                IF ExtTo <> '' THEN
                  ProjBudgetRec.SETRANGE("Extension Contract", ExtTo);
                IF AdjTo <> '' THEN
                  ProjBudgetRec.SETRANGE(Adjustment, AdjTo);
                IF OptTo <> '' THEN
                  ProjBudgetRec.SETRANGE(Option, OptTo);
                ProjBudgetRec.SETRANGE("Budget Summary Line", FALSE);
                IF ProjBudgetRec.FINDLAST THEN BEGIN
                  IF SwitchProj = TRUE THEN
                    IF NOT CONFIRM(Text008, FALSE, ProjTo) THEN
                      ERROR('');
                  BudgetLino := ProjBudgetRec."Line No.";
                END;

                SwitchProj := FALSE;
                IF ProjTo <> '' THEN
                  CheckProjectElement(ProjTo);
                IF PlotTo <> '' THEN
                  PlotRec.GET(ProjTo, PlotTo);
              END;
            TransferDestination::ServOrder:
              BEGIN
                ServSetup.GET;
                IF (CollectSubEstimates AND (HelpRec."Estimate No." <> PrevCode)) OR
                   (NOT CollectSubEstimates AND (
                    ((TransferStructure = FALSE) AND (HelpRec.Code <> PrevCode)) OR
                    ((TransferStructure = TRUE) AND (HelpRec."Sub-Estimate No." <> PrevCode)))
                   ) THEN BEGIN
                  IF HelpRec."Service Order No." = '' THEN BEGIN
                    IF (TransferStructure = TRUE) AND NOT CollectSubEstimates THEN
                      CreateServOrder(ServOrderRec, HelpRec."Sub-Estimate No.")
                    ELSE
                      CreateServOrder(ServOrderRec, '');
                    BudgetLino := 0;
                  END;
                END;
                IF (HelpRec."Service Order No." <> '') AND (HelpRec."Service Order No." <> ServOrderRec."No.") THEN BEGIN
                  ServOrderRec.GET(HelpRec."Service Order No.");
                  IF ServOrderRec."Expected Hours" = 0 THEN
                    ServOrderRec."Expected Hours" := ServSetup."Expected Hours";
                  UpdateServOrderIndication;
                  UpdateServOrderAmount;
                  ServOrderRec.MODIFY;
                END;
                IF HelpRec."Service Order No." = '' THEN
                  HelpRec."Service Order No." := ServOrderRec."No.";
                IF EstimateLineRAW.GET(HelpRec."Estimate No.", HelpRec.Part, HelpRec."Estimate Line No.") THEN BEGIN
                  EstimateLineRAW."Service Order No." := HelpRec."Service Order No.";
                  EstimateLineRAW.MODIFY;
                END;
                IF CollectSubEstimates THEN
                  PrevCode := HelpRec."Estimate No."
                ELSE
                  IF TransferStructure = TRUE THEN
                    PrevCode := HelpRec."Sub-Estimate No."
                  ELSE
                    PrevCode := HelpRec.Code;
              END;
            TransferDestination::Modification:
              BEGIN
                IF HelpRec."Estimate No." <> PrevCode THEN
                  IF HelpRec."Object Modification No." = '' THEN
                    CreateObjectModification(ObjectModification);
                IF (HelpRec."Object Modification No." <> '') AND (HelpRec."Object Modification No." <> ObjectModification."No.") THEN
                  ObjectModification.GET(HelpRec."Object Modification No.");
                IF HelpRec."Object Modification No." = '' THEN
                  HelpRec."Object Modification No." := ObjectModification."No.";
                IF EstimateLineRAW.GET(HelpRec."Estimate No.", HelpRec."Sub-Estimate No.", HelpRec."Part Group", HelpRec.Part, HelpRec."Estimate Line No.")
                THEN BEGIN
                  //EstimateLineRAW."Object Modification No." := HelpRec."Object Modification No.";
                  EstimateLineRAW.MODIFY;
                END;
                PrevCode := HelpRec."Estimate No.";
              END;
          END;

          IF (HelpRec.Quantity <> 0) OR (HelpRec."BOM Item No." <> '') OR
             (SaveRecipeStructure AND (HelpRec.Recipe <> '')) OR
             (TransferZeroLines = TRUE) THEN BEGIN
            LineTransfered := FALSE;
            CommentLinesTransfered := FALSE;
            FOR lvCostType := 1 TO 5 DO BEGIN
              IF CostTypeValid(lvCostType) THEN BEGIN
                LineTransfered := TRUE;
                CASE TransferDestination OF
                  TransferDestination::Project:
                    BEGIN
                      IF CheckProjBudgetPresent(lvCostType) THEN BEGIN
                        UpdateProjBudget;
                      END ELSE BEGIN
                        FillProjBudgetRec(lvCostType);
                        CopyCommentToBudgetLine;
                      END;
                      IF ProjBudgetRec.Option <> '' THEN
                        AssignOptionBudget;
                    END;
                  TransferDestination::ServOrder:
                    UpdateServBudgetFromEstimate(lvCostType);
                  TransferDestination::Modification:
                    UpdateModificationFromEstimate(lvCostType);
                END;
              END;
            END;
            IF LineTransfered = FALSE THEN BEGIN
              lvCostType := 5;
              IF HelpRec."Item No." + HelpRec."Basic Item" + HelpRec."Trade Item" <> '' THEN
                lvCostType := 2
              ELSE
                IF HelpRec."Cost Object Labor" <> '' THEN
                  lvCostType := 1
                ELSE
                  IF HelpRec."Cost Object Material" <> '' THEN
                    lvCostType := 2
                  ELSE
                    IF HelpRec."Cost Object Subcontracting" <> '' THEN
                      lvCostType := 3
                    ELSE
                      IF HelpRec."Cost Object Plant" <> '' THEN
                        lvCostType := 4;
              CASE TransferDestination OF
                TransferDestination::Project:
                  BEGIN
                    IF CheckProjBudgetPresent(lvCostType) THEN BEGIN
                      UpdateProjBudget;
                    END ELSE BEGIN
                      FillProjBudgetRec(lvCostType);
                      IF NOT CommentLinesTransfered THEN
                        CopyCommentToBudgetLine;
                    END;
                    IF ProjBudgetRec.Option <> '' THEN
                      AssignOptionBudget;
                    IF (SHActive AND FirstTime)THEN
                      SHCopyManagement.CopyEstimateWorkplanToStandard(HelpRec);
                    FirstTime := FALSE;
                  END;
                TransferDestination::ServOrder:
                  UpdateServBudgetFromEstimate(lvCostType);
                TransferDestination::Modification:
                  UpdateModificationFromEstimate(lvCostType);
              END;
            END;
          END;
          IF TransferDestination = TransferDestination::ServOrder THEN BEGIN
            IF ServOrderRec.GET(HelpRec."Service Order No.") THEN BEGIN
              IF EstRec."Starting Date" <> 0D THEN
                ServOrderRec."Starting Date" := EstRec."Starting Date"
              ELSE
                ServOrderRec."Starting Date" := WORKDATE;
              IF EstRec."Ending Date" <> 0D THEN
                ServOrderRec."Ending Date" := EstRec."Ending Date";
              ServOrderRec.MODIFY;
            END;
          END;
          IF (TransferDestination = TransferDestination::Project) AND (SHActive) THEN
            SHCopyManagement.CopyEstimateWorkplanToStandard(HelpRec);
        UNTIL HelpRec.NEXT = 0;
      END;

      CASE TransferDestination OF
        TransferDestination::ServOrder:
          BEGIN
            CheckRelationSubEstServOrder;
            UpdateServOrderSummary;
          END;
        TransferDestination::Modification:
          CheckRelationSubEstObjectModification;
      END;
    END;

    PROCEDURE DetermineProject@13(lvEst@1210190000 : Code[20];lvSubEst@1210190001 : Code[20];lvPartGrp@1210190002 : Code[20];lvPart@1210190003 : Code[20];lvSum@1210190004 : Code[20]) : Code[20];
    VAR
      EstRec@11012002 : Record 11012151;
    BEGIN
      IF NOT EstRec.GET(lvEst) THEN
        EstRec.INIT;
      IF EstRec."Project No." <> '' THEN
        EXIT(EstRec."Project No.");

      EXIT('');
    END;

    PROCEDURE DetermineElement@1210190000(lvEst@1210190004 : Code[20];lvSubEst@1210190003 : Code[20];lvPartGrp@1210190002 : Code[20];lvPart@1210190001 : Code[20];lvSum@1210190000 : Code[20]) : Code[20];
    VAR
      EstRec@11012002 : Record 11012151;
      lvProjRec@1100485000 : Record 11072003;
    BEGIN
      IF NOT EstRec.GET(lvEst) THEN
        EstRec.INIT;
      IF EstRec.Element <> '' THEN
        EXIT(EstRec.Element);

      EXIT('');
    END;

    PROCEDURE CheckProjectElement@1210190002(ProjTo@1210190000 : Code[20]);
    BEGIN
      ProjElemRec.SETRANGE("Project No.", ProjTo);
      ProjElemRec.SETFILTER(Level, '%1', 0);
      IF NOT ProjElemRec.FINDSET(TRUE, FALSE) THEN BEGIN
        ElemRec.SETFILTER(Level, '%1', 0);
        IF NOT ElemRec.FINDFIRST THEN BEGIN
          ERROR(Text009, ElemRec.TABLECAPTION);
        END ELSE BEGIN
          ProjElemRec.INIT;
          ProjElemRec."Project No." := ProjTo;
          ProjElemRec.VALIDATE(Element, ElemRec.Code);
          ProjElemRec.INSERT(TRUE);

          ProjRec.GET(ProjTo);
          ProjElemRec."Starting Date" := ProjRec."Starting Date";
          ProjElemRec."Ending Date" := ProjRec."Ending Date";
          ProjElemRec.Description := ElemRec.Description;
          ProjElemRec."Unit of Measure" := ElemRec."Unit of Measure";
          ProjElemRec.Quantity := 1;
          ProjElemRec.MODIFY(TRUE);
        END;
      END;

      ProjElemRec.RESET;
      ElemRec.RESET;

      IF NOT ProjElemRec.GET(ProjTo, HelpRec."Project Element") THEN BEGIN
        IF ElemRec.GET(HelpRec."Project Element") THEN BEGIN
          IF NOT ProjElemRec.GET(ProjTo, ElemRec.Chapter) THEN BEGIN
            IF Elem2Rec.GET(ElemRec.Chapter) THEN BEGIN
              ProjElemRec.INIT;
              ProjElemRec."Project No." := ProjTo;
              ProjElemRec.VALIDATE(Element, ElemRec.Chapter);
              ProjElemRec.INSERT(TRUE);
              ProjElemRec.Description := Elem2Rec.Description;
              ProjElemRec."Unit of Measure" := Elem2Rec."Unit of Measure";
              ProjElemRec.Quantity := 1;
              ProjElemRec.MODIFY(TRUE);
            END;
          END;
          IF NOT ProjElemRec.GET(ProjTo, ElemRec.Paragraph) THEN BEGIN
            IF Elem2Rec.GET(ElemRec.Paragraph) THEN BEGIN
              ProjElemRec.INIT;
              ProjElemRec."Project No." := ProjTo;
              ProjElemRec.VALIDATE(Element, ElemRec.Paragraph);
              ProjElemRec.INSERT(TRUE);
              ProjElemRec.Description := Elem2Rec.Description;
              ProjElemRec."Unit of Measure" := Elem2Rec."Unit of Measure";
              ProjElemRec.Quantity := 1;
              ProjElemRec.MODIFY(TRUE);
            END;
          END;
          IF NOT ProjElemRec.GET(ProjTo, ElemRec.Code) THEN BEGIN
            IF Elem2Rec.GET(ElemRec.Code) THEN BEGIN
              ProjElemRec.INIT;
              ProjElemRec."Project No." := ProjTo;
              ProjElemRec.VALIDATE(Element, ElemRec.Code);
              ProjElemRec.INSERT(TRUE);
              ProjElemRec.Description := Elem2Rec.Description;
              ProjElemRec."Unit of Measure" := Elem2Rec."Unit of Measure";
              ProjElemRec.Quantity := 1;
              ProjElemRec.MODIFY(TRUE);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CopyStructure@1210190003(lvEst@1210190003 : Code[20];lvSubEst@1210190002 : Code[20];lvPartGrp@1210190001 : Code[20];lvPart@1210190000 : Code[20]);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE FillHelpEstimateRec@12(EstFrom@1100485001 : Code[20];iRoom@1100525000 : Code[20];iQuantity@1100525001 : Decimal);
    VAR
      PartQty@1100528900 : Decimal;
    BEGIN
      HelpRec.INIT;
      HelpRec."Estimate No." := EstFrom;
      HelpRec.Part := EstimateLineRAW."Tender Paragraph No.";
      HelpRec."Estimate Line No." := EstimateLineRAW."Line No.";
      HelpRec."Line No." := HelpLino + 10000;
      HelpLino := HelpRec."Line No.";
      HelpRec."Project No." := JobNo;
      HelpRec."Project Element" := ProjectElement;
      CheckElementMandatory(1);  //C052902
      HelpRec.Description := EstimateLineRAW.Description;
      HelpRec."Time Quantity" := EstimateLineRAW."Time Quantity";
      HelpRec."Unit of Time" := EstimateLineRAW."Unit of Time";
      HelpRec.Quantity := iQuantity;
      HelpRec.Room := iRoom;
      HelpRec."Unit of Measure" := EstimateLineRAW."Unit of Measure";
      //DP01676.sn
      IF EstimateLineRAW."Cum. Adj. Factor" = 0 THEN
        EstimateLineRAW."Cum. Adj. Factor" := 1;
      IF EstimateLineRAW."Cost Type" = EstimateLineRAW."Cost Type"::Labor THEN BEGIN
        HelpRec.Norm := EstimateLineRAW.Norm * EstimateLineRAW."Cum. Adj. Factor";
        HelpRec."Rate Code" := EstimateLineRAW."Rate Code";
        HelpRec.Rate := EstimateLineRAW.Rate;
      END;
      IF EstimateLineRAW."Cost Type" = EstimateLineRAW."Cost Type"::Material THEN
        HelpRec."Material Price" := EstimateLineRAW."Net Cost Price" * EstimateLineRAW."Cum. Adj. Factor";
      IF EstimateLineRAW."Cost Type" = EstimateLineRAW."Cost Type"::Subcontracting THEN BEGIN
        HelpRec."Subcontracting Price" := EstimateLineRAW."Net Cost Price"  * EstimateLineRAW."Cum. Adj. Factor";
        IF EstimateLineRAW."Subcontracting in Hours" THEN BEGIN  //C053751
          HelpRec."Norm (Subcontracting)" := EstimateLineRAW.Norm;
          IF HelpRec."Norm (Subcontracting)" = 0 THEN
            HelpRec."Subcontracting Price" := 0;
        END;
      END;
      IF EstimateLineRAW."Cost Type" = EstimateLineRAW."Cost Type"::Plant THEN BEGIN
        HelpRec."Plant Price" := EstimateLineRAW."Net Cost Price" * EstimateLineRAW."Cum. Adj. Factor";
        IF EstimateLineRAW."Plant Rates in Hours" THEN BEGIN
          HelpRec."Norm (Plant)" := EstimateLineRAW.Norm;
          IF HelpRec."Norm (Plant)" = 0 THEN
            HelpRec."Plant Price" := 0;
        END;
      END;
      IF EstimateLineRAW."Cost Type" = EstimateLineRAW."Cost Type"::Sundry THEN
        HelpRec."Sundry Cost" := EstimateLineRAW."Net Cost Price" * EstimateLineRAW."Cum. Adj. Factor";
      HelpRec."Gross Price" := EstimateLineRAW."Gross Price";
      HelpRec."Discount %" := EstimateLineRAW."Purchase Discount %";
      HelpRec."Cost Object" := EstimateLineRAW."Cost Object";
      //C050327.sn
      CASE EstimateLineRAW."Cost Type" OF
        EstimateLineRAW."Cost Type"::Labor: HelpRec."Cost Object Labor" := EstimateLineRAW."Cost Object";
        EstimateLineRAW."Cost Type"::Material: HelpRec."Cost Object Material" := EstimateLineRAW."Cost Object";
        EstimateLineRAW."Cost Type"::Subcontracting: HelpRec."Cost Object Subcontracting" := EstimateLineRAW."Cost Object";
        EstimateLineRAW."Cost Type"::Plant: HelpRec."Cost Object Plant" := EstimateLineRAW."Cost Object";
        EstimateLineRAW."Cost Type"::Sundry: HelpRec."Cost Object Sundry" := EstimateLineRAW."Cost Object";
      END;
      //C050327.en
      HelpRec."Production Rate" := EstimateLineRAW."Production Rate";
      HelpRec."Apply Obligation" := EstimateLineRAW."Apply Obligation";
      HelpRec."Quantity (Result Obligation)" := EstimateLineRAW.ReadObligation;
      IF (EstimateLineRAW."Cumulative Quantity" <> EstimateLineRAW.Quantity) THEN BEGIN
        IF EstimateLineRAW.Quantity <> 0 THEN BEGIN
          PartQty := EstimateLineRAW."Cumulative Quantity" / EstimateLineRAW.Quantity;
          HelpRec."Quantity (Result Obligation)" := HelpRec."Quantity (Result Obligation)" * PartQty;
        END;
      END;
      //DP01676.en
      IF TransferDestination <> TransferDestination::TransferPlantNeed THEN
        FillWithAdmiCodeCostobjects(EstimateLineRAW.Admicode);
      HelpRec."Cost Component" := EstimateLineRAW."Cost Component";
      HelpRec."Item No." := EstimateLineRAW."Item No.";
      HelpRec."Basic Item" := EstimateLineRAW."Basic Item";
      HelpRec."Trade Item" := EstimateLineRAW."Trade Item";
      HelpRec."Vendor (Trade Item)" := EstimateLineRAW."Vendor (Trade Item)";
      HelpRec.Manufacturer := EstimateLineRAW.Manufacturer;
      HelpRec."External Text" := EstimateLineRAW."External Text";
      HelpRec."Purchase Route Reference" := EstimateLineRAW."Purchase Route Reference";
      HelpRec."Price Agreement" := EstimateLineRAW."Price Agreement";
      HelpRec.Vendor := EstimateLineRAW.Vendor;
      HelpRec.Subcontractor := EstimateLineRAW.Subcontractor;
      HelpRec."Subcontracting Activity" := EstimateLineRAW."Subcontracting Activity";  //DP01492-2
      HelpRec.Discipline := EstimateLineRAW.Discipline;
      HelpRec."Trade Speciality" := EstimateLineRAW."Trade Speciality";
      HelpRec."Trade Expertise" := EstimateLineRAW."Trade Expertise";
      HelpRec."Scheme Code" := EstimateLineRAW."Scheme Code";
      HelpRec.Comments := EstimateLineRAW. Comments;
      HelpRec.Supply := EstimateLineRAW.Supply;
      HelpRec."Remarks for Logistics" := EstimateLineRAW."Comments for Logistics";
      HelpRec."Material Sheet" := EstimateLineRAW."Material Sheet";
      IF TransferPurchAction THEN
        HelpRec."Purchase Action" := EstimateLineRAW."Purchase Action";  //DP01676

      HelpRec."Record Type" := TransferDestination;
      HelpRec."Summary Line" := EstimateLineRAW."Summary Line";
      IF ServOrderRec.GET(EstimateLineRAW."Service Order No.") THEN
        HelpRec."Service Order No." := EstimateLineRAW."Service Order No.";

      HelpRec."Plant Company" := EstRec."Plant Company";
      HelpRec."Plant Location" := EstRec."Plant Location";
      HelpRec."Plant Type" := EstimateLineRAW."Plant Type";
      HelpRec."Plant Rates in Hours" := EstimateLineRAW."Plant Rates in Hours";  //DP01492-5
      HelpRec."Subcontracting in Hours" := EstimateLineRAW."Subcontracting in Hours";  //C053751

      HelpRec."Project Planning Activity Code" := EstimateLineRAW."Project Planning Activity Code";
      HelpRec."Project Planning Activity No." := HelpRec."Project No." + EstimateLineRAW."Project Planning Activity Code";
      //DP01676.sn
      HelpRec.Length := EstimateLineRAW.Length;
      HelpRec.Width := EstimateLineRAW.Width;
      HelpRec.Height := EstimateLineRAW.Height;
      //DP01676.en
      IF (HelpRec.Quantity <> 0) THEN BEGIN
        HelpRec.INSERT;
      END ELSE BEGIN
        IF (HelpRec."BOM Item No." <> '') THEN BEGIN
          HelpRec.INSERT;
        END ELSE BEGIN
          IF TransferZeroLines THEN
            HelpRec.INSERT;
        END;
      END;

      CASE TransferDestination OF
        TransferDestination::Project:
          CheckLastProject;
        TransferDestination::ServOrder:
          FillTmpServOrder;
        TransferDestination::Modification:
          FillTmpObjectModification;
      END;
    END;

    PROCEDURE FillHelpRecipeRec@6(EstFrom@1100485001 : Code[20]);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE FillHelpSummaryRec@9(EstFrom@1100485001 : Code[20]);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE FillProjBudgetRec@7(CostType@1210190003 : Integer);
    VAR
      ProjectPlanningActivity@1100525000 : Record 11012431;
      BudgetLine2@1100528900 : Record 11012001;
    BEGIN
      ProjBudgetRec.INIT;
      ProjBudgetRec."Project No." := ProjTo;
      ProjBudgetRec.Adjustment :=  AdjTo;
      ProjBudgetRec."Extension Contract" := ExtTo;
      ProjBudgetRec.Option := OptTo;
      ProjBudgetRec."Line No." := BudgetLino + 10000;
      //C058824.sn
      //Check if line exists (possible with large budget, goal is to insert lines before summary
      //But sometimes there are too much lines so the summary lines must be stepped over.
      IF BudgetLine2.GET(ProjTo, AdjTo, ExtTo, OptTo, ProjBudgetRec."Line No.") THEN BEGIN
        REPEAT
          ProjBudgetRec."Line No." := BudgetLino + 10000;
          BudgetLino := ProjBudgetRec."Line No.";
        UNTIL NOT BudgetLine2.GET(ProjTo, AdjTo, ExtTo, OptTo, ProjBudgetRec."Line No.")
      END;
      //C058824.en
      ProjBudgetRec.Element := HelpRec."Project Element";
      IF ProjBudgetRec.Option = '' THEN
        ProjBudgetRec.VALIDATE(Element);
      SplitDesc(HelpRec.Description, MAXSTRLEN(ProjBudgetRec.Description));
      ProjBudgetRec.Description := desc1;
      ProjBudgetRec."Description 2" := desc2;
      ProjBudgetRec."Unit of Measure" :=  HelpRec."Unit of Measure";
      ProjBudgetRec.Quantity := HelpRec.Quantity;
      ProjBudgetRec."Time Quantity" := HelpRec."Time Quantity";
      ProjBudgetRec."Unit of Time" := HelpRec."Unit of Time";
      ProjBudgetRec.VALIDATE("External Text", HelpRec."External Text");
      ProjBudgetRec."Estimate No." := HelpRec."Estimate No.";
      IF TransferSubEstimate THEN
        ProjBudgetRec."Sub-Estimate No." := HelpRec."Sub-Estimate No.";
      ProjBudgetRec."Tender Paragraph" := HelpRec.Part;
      //DP01676.sn
      ProjBudgetRec.Room := HelpRec.Room;
      ProjBudgetRec.Length := HelpRec.Length;
      ProjBudgetRec.Width := HelpRec.Width;
      ProjBudgetRec.Height := HelpRec.Height;
      //DP01676.en
      IF HelpRec."Project Planning Activity Code" <> '' THEN BEGIN
        ProjectPlanningActivity."Project No." := ProjTo;
        ProjectPlanningActivity.VALIDATE(Code, HelpRec."Project Planning Activity Code");
        IF NOT ProjectPlanningActivity.INSERT(TRUE) THEN;
        ProjBudgetRec."Project Planning Activity No." := ProjectPlanningActivity."No.";
      END;

      CASE CostType OF
        1:BEGIN
            ProjBudgetRec."Cost Type" := ProjBudgetRec."Cost Type"::Labor;
            IF HelpRec."Cost Object Labor" = '' THEN
              ProjBudgetRec."Cost Object" := EstSetup."Absence Value Labor"
            ELSE
              ProjBudgetRec."Cost Object" := HelpRec."Cost Object Labor";
            ConvertRateType(HelpRec."Estimate No.", HelpRec."Rate Code", HelpRec.Norm, HelpRec.Rate);
            ProjBudgetRec.VALIDATE(Norm, HelpRec.Norm);
            ProjBudgetRec."Rate (LCY)" := HelpRec.Rate;
            IF TransferRates = TransferRates::AssignCodeAndAmount THEN
              ProjBudgetRec."Rate Code" := HelpRec."Rate Code";
            IF TransferRates = TransferRates::ValidateRateCode THEN
              IF HelpRec."Rate Code" <> '' THEN
                ProjBudgetRec.VALIDATE("Rate Code", HelpRec."Rate Code");
          END;
        2:BEGIN
            ProjBudgetRec."Cost Type" := ProjBudgetRec."Cost Type"::Material;
            IF HelpRec."Cost Object Material" = '' THEN
              ProjBudgetRec."Cost Object" := EstSetup."Absence Value Material"
            ELSE
              ProjBudgetRec."Cost Object" := HelpRec."Cost Object Material";
            ProjBudgetRec."Price (LCY)" := HelpRec."Material Price";
            ProjBudgetRec.Manufacturer := HelpRec.Manufacturer;
            ProjBudgetRec."Item No." := HelpRec."Item No.";
            ProjBudgetRec."Basic Item" := HelpRec."Basic Item";
            ProjBudgetRec."Trade Item" := HelpRec."Trade Item";
            ProjBudgetRec."Vendor (Trade Item)" := HelpRec."Vendor (Trade Item)";
            ProjBudgetRec."Scheme Code" := HelpRec."Scheme Code";
            ProjBudgetRec.Comments := HelpRec.Comments;
            ProjBudgetRec.Supply := HelpRec.Supply;
            ProjBudgetRec."Comments for Logistics" := HelpRec."Remarks for Logistics";
            ProjBudgetRec."Material Sheet" := HelpRec."Material Sheet";
            IF TransferPurchAction THEN
              ProjBudgetRec."Purchase Action" := HelpRec."Purchase Action";  //DP01676
          END;
        3:BEGIN
            ProjBudgetRec."Cost Type" := ProjBudgetRec."Cost Type"::Subcontracting;
            IF HelpRec."Cost Object Subcontracting" = '' THEN
              ProjBudgetRec."Cost Object" := EstSetup."Absence Value Subcontracting"
            ELSE
              ProjBudgetRec."Cost Object" := HelpRec."Cost Object Subcontracting";
            ProjBudgetRec."Price (LCY)" := HelpRec."Subcontracting Price";
            IF HelpRec."Norm (Subcontracting)" <> 0 THEN   //DP01676
              ProjBudgetRec.VALIDATE(Norm, HelpRec."Norm (Subcontracting)");
            ProjBudgetRec."Subcontracting in Hours" := HelpRec."Subcontracting in Hours";  //C053751
            IF TransferPurchAction THEN
              ProjBudgetRec."Purchase Action" := HelpRec."Purchase Action";  //DP01676
          END;
        4:BEGIN
            ProjBudgetRec."Cost Type" := ProjBudgetRec."Cost Type"::Plant;
            IF HelpRec."Cost Object Plant" = '' THEN
              ProjBudgetRec."Cost Object" := EstSetup."Absence Value Plant"
            ELSE
              ProjBudgetRec."Cost Object" := HelpRec."Cost Object Plant";
            ProjBudgetRec."Price (LCY)" := HelpRec."Plant Price";
            IF TransferPurchAction THEN
              ProjBudgetRec."Purchase Action" := HelpRec."Purchase Action";  //DP01676
            ProjBudgetRec."Plant Company" := HelpRec."Plant Company";
            ProjBudgetRec."Plant Location" := HelpRec."Plant Location";
            ProjBudgetRec."Plant Type" := HelpRec."Plant Type";
            IF HelpRec."Norm (Plant)" <> 0 THEN   //DP01047
              ProjBudgetRec.VALIDATE(Norm, HelpRec."Norm (Plant)");
            ProjBudgetRec."Plant Rates in Hours" := HelpRec."Plant Rates in Hours";  //DP01492-5
          END;
        5:BEGIN
            ProjBudgetRec."Cost Type" := ProjBudgetRec."Cost Type"::Sundry;
            IF HelpRec."Cost Object Sundry" = '' THEN
              ProjBudgetRec."Cost Object" := EstSetup."Absence Value Sundry Cost"
            ELSE
              ProjBudgetRec."Cost Object" := HelpRec."Cost Object Sundry";
            ProjBudgetRec."Price (LCY)" := HelpRec."Sundry Cost";
          END;
      END;

      IF ProjBudgetRec."Cost Type" = ProjBudgetRec."Cost Type"::Subcontracting THEN BEGIN
        ProjBudgetRec.Vendor := HelpRec.Subcontractor;
        ProjBudgetRec."Subcontracting Activity" := HelpRec."Subcontracting Activity";  //DP01492-2
      END ELSE BEGIN
        ProjBudgetRec.Vendor := HelpRec.Vendor;
      END;

      ProjBudgetRec."Cost Component" :=
        GetCostComponent(HelpRec."Cost Component", ProjBudgetRec."Cost Object", ProjBudgetRec."Project No.", '', FALSE);

      IF HelpRec."Discount %" <> 0 THEN BEGIN
        ProjBudgetRec."Discount %" := HelpRec."Discount %";
        ProjBudgetRec."Gross Price (LCY)" := HelpRec."Gross Price";
      END;
      ProjBudgetRec.CalcTotals;
      IF ProjBudgetRec.Option = '' THEN BEGIN
        IF ProjBudgetRec."Purchase Action" <> '' THEN BEGIN
          CheckPurchaseAction;
          ProjBudgetRec.UpdatePurchActionStatusInLine();
        END;
        ProjBudgetRec.INSERT(TRUE);
        ProjBudgetRec."Price Agreement" := HelpRec."Price Agreement";
        ProjBudgetRec."Plant Rates in Hours" := HelpRec."Plant Rates in Hours";   //DP02115 (OnInsert takes default from Project)
        ProjBudgetRec."Subcontracting in Hours" := HelpRec."Subcontracting in Hours";  //C053751
        //DP01676.sn
        ProjBudgetRec."Production Rate" := HelpRec."Production Rate";
        ProjBudgetRec."Quantity (Result Obligation)" := HelpRec."Quantity (Result Obligation)";
        ProjBudgetRec."Apply Obligation" := HelpRec."Apply Obligation";
        //DP01676.en
        IF (HelpRec."Purchase Route Reference" <> '') THEN BEGIN
          ProjBudgetRec."Purchase Route Reference" := HelpRec."Purchase Route Reference";
          RouteRefMgtCU.UpdateQuoteLinesFromBudget(ProjBudgetRec);
        END;
        ProjBudgetRec.MODIFY;
      END;
    END;

    PROCEDURE CheckProjBudgetPresent@5(CostType@11012000 : Integer) : Boolean;
    BEGIN
      EXIT(FALSE);

      IF OptTo <> '' THEN
        EXIT;

      ProjBudgetRec.SETRANGE(Norm);
      ProjBudgetRec.SETRANGE("Rate (LCY)");
      ProjBudgetRec.SETRANGE("Price (LCY)");
      ProjBudgetRec.SETRANGE("Item No.");
      ProjBudgetRec.SETRANGE("Basic Item");
      ProjBudgetRec.SETRANGE("Trade Item");
      ProjBudgetRec.SETRANGE("Vendor (Trade Item)");
      ProjBudgetRec.SETRANGE(Manufacturer);
      ProjBudgetRec.SETRANGE("Scheme Code");
      ProjBudgetRec.SETRANGE(Comments);
      ProjBudgetRec.SETRANGE(Supply);
      ProjBudgetRec.SETRANGE("Comments for Logistics");
      ProjBudgetRec.SETRANGE("Material Sheet");
      ProjBudgetRec.SETRANGE("Purchase Action");
      ProjBudgetRec.SETRANGE("Plant Company");
      ProjBudgetRec.SETRANGE("Plant Location");
      ProjBudgetRec.SETRANGE("Plant Type");
      ProjBudgetRec.SETRANGE("Plant Rates in Hours");  //DP01492-5
      ProjBudgetRec.SETRANGE("Subcontracting in Hours");   //C053751

      CASE CostType OF
        1:BEGIN
            ProjBudgetRec.SETRANGE("Cost Type", ProjBudgetRec."Cost Type"::Labor);
            ProjBudgetRec.SETRANGE("Cost Object", HelpRec."Cost Object Labor");
            ProjBudgetRec.SETRANGE(Norm, HelpRec.Norm);
            ProjBudgetRec.SETRANGE("Rate (LCY)", HelpRec.Rate);
            ProjBudgetRec.SETRANGE("Wage Component", HelpRec."Wage Component");  //DP00236
          END;
        2:BEGIN
            ProjBudgetRec.SETRANGE("Cost Type", ProjBudgetRec."Cost Type"::Material);
            ProjBudgetRec.SETRANGE("Cost Object", HelpRec."Cost Object Material");
            ProjBudgetRec.SETRANGE("Price (LCY)", HelpRec."Material Price");
            ProjBudgetRec.SETRANGE("Item No.", HelpRec."Item No.");
            ProjBudgetRec.SETRANGE("Basic Item", HelpRec."Basic Item");
            ProjBudgetRec.SETRANGE("Trade Item", HelpRec."Trade Item");
            ProjBudgetRec.SETRANGE("Vendor (Trade Item)", HelpRec."Vendor (Trade Item)");
            ProjBudgetRec.SETRANGE(Manufacturer, HelpRec.Manufacturer);
            ProjBudgetRec.SETRANGE("Scheme Code", HelpRec."Scheme Code");
            ProjBudgetRec.SETRANGE(Comments, HelpRec.Comments);
            ProjBudgetRec.SETRANGE(Supply, HelpRec.Supply);
            ProjBudgetRec.SETRANGE("Comments for Logistics", HelpRec."Remarks for Logistics");
            ProjBudgetRec.SETRANGE("Material Sheet", HelpRec."Material Sheet");
            IF TransferPurchAction THEN
              ProjBudgetRec.SETFILTER("Purchase Action", '%1', HelpRec."Purchase Action");  //DP01676
          END;
        3:BEGIN
            ProjBudgetRec.SETRANGE("Cost Type", ProjBudgetRec."Cost Type"::Subcontracting);
            ProjBudgetRec.SETRANGE("Cost Object", HelpRec."Cost Object Subcontracting");
            ProjBudgetRec.SETRANGE("Subcontracting Activity", HelpRec."Subcontracting Activity");  //DP01492-2
            ProjBudgetRec.SETRANGE("Price (LCY)", HelpRec."Subcontracting Price");
            ProjBudgetRec.SETRANGE(Norm, HelpRec."Norm (Subcontracting)");  //DP01676
            ProjBudgetRec.SETRANGE("Subcontracting in Hours", HelpRec."Subcontracting in Hours");  //C053751
            IF TransferPurchAction THEN
              ProjBudgetRec.SETFILTER("Purchase Action", '%1', HelpRec."Purchase Action");  //DP01676
          END;
        4:BEGIN
            ProjBudgetRec.SETRANGE("Cost Type", ProjBudgetRec."Cost Type"::Plant);
            ProjBudgetRec.SETRANGE("Cost Object", HelpRec."Cost Object Plant");
            ProjBudgetRec.SETRANGE("Price (LCY)", HelpRec."Plant Price");
            //DP01047.sn
            ProjBudgetRec.SETRANGE(Norm, HelpRec."Norm (Plant)");
            ProjBudgetRec.SETRANGE("Plant Company", HelpRec."Plant Company");
            ProjBudgetRec.SETRANGE("Plant Location", HelpRec."Plant Location");
            ProjBudgetRec.SETRANGE("Plant Type", HelpRec."Plant Type");
            //DP01047.en
            ProjBudgetRec.SETRANGE("Plant Rates in Hours", HelpRec."Plant Rates in Hours");  //DP01492-5
            IF TransferPurchAction THEN
              ProjBudgetRec.SETFILTER("Purchase Action", '%1', HelpRec."Purchase Action");  //DP01676
          END;
        5:BEGIN
            ProjBudgetRec.SETRANGE("Cost Type", ProjBudgetRec."Cost Type"::Sundry);
            ProjBudgetRec.SETRANGE("Cost Object", HelpRec."Cost Object Sundry");
            ProjBudgetRec.SETRANGE("Price (LCY)", HelpRec."Sundry Cost");
          END;
      END;

      ProjBudgetRec.SETRANGE("Cost Component",
        GetCostComponent(HelpRec."Cost Component", HelpRec."Cost Object", HelpRec."Project No.", '', FALSE));

      SplitDesc(HelpRec.Description, MAXSTRLEN(ProjBudgetRec.Description));
      ProjBudgetRec.SETRANGE(Description, desc1);
      ProjBudgetRec.SETRANGE("Description 2", desc2);
      ProjBudgetRec.SETRANGE("Unit of Measure", HelpRec."Unit of Measure");
      ProjBudgetRec.SETRANGE("Unit of Time", HelpRec."Unit of Time");
      ProjBudgetRec.SETRANGE("Time Quantity", HelpRec."Time Quantity");
      ProjBudgetRec.SETRANGE(Element, HelpRec."Project Element");
      ProjBudgetRec.SETRANGE("Project Planning Activity No.", HelpRec."Project Planning Activity No.");
      ProjBudgetRec.SETRANGE("External Text", HelpRec."External Text");
      ProjBudgetRec.SETRANGE("Purchase Route Reference", HelpRec."Purchase Route Reference");
      ProjBudgetRec.SETRANGE("Price Agreement", HelpRec."Price Agreement");
      ProjBudgetRec.SETRANGE(Vendor, HelpRec.Vendor);
      ProjBudgetRec.SETRANGE("Discount %", HelpRec."Discount %");
      ProjBudgetRec.SETRANGE(Advised, FALSE);
      //DP01676.sn
      ProjBudgetRec.SETRANGE("Quantity (Result Obligation)", HelpRec."Quantity (Result Obligation)");
      ProjBudgetRec.SETRANGE("Apply Obligation", HelpRec."Apply Obligation");
      //Dp01676.en
      ProjBudgetRec.SETRANGE("Estimate No.", HelpRec."Estimate No.");
      IF TransferSubEstimate THEN
        ProjBudgetRec.SETRANGE("Sub-Estimate No.", HelpRec."Sub-Estimate No.");

      IF ProjBudgetRec.FINDSET(TRUE, FALSE) THEN //Later on table is modified
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE UpdateProjBudget@8();
    BEGIN
      ProjBudgetRec.Quantity := ProjBudgetRec.Quantity + HelpRec.Quantity;
      ProjBudgetRec.CalcTotals;
      ProjBudgetRec.MODIFY(TRUE);
    END;

    PROCEDURE UpdateProjRec@1210190001();
    VAR
      ProjectPrincipal@1100485000 : Record 11012005;
      ExtensionContract@1100528901 : Record 11012004;
    BEGIN
      EstRec.GET(EstFrom);
      ProjRec.GET(ProjTo);

      //DP00883.sn
      ProjRec."Currency Code" := EstRec."Currency Code";
      ProjRec."Reference Date (Currency)" := EstRec."Reference Date (Rate)";
      //DP00883.en

      IF ProjRec.Description = '' THEN ProjRec.Description := EstRec.Description;
      IF ProjRec."Description 2" = '' THEN ProjRec."Description 2" := EstRec."Description 2";
      IF ProjRec.Address = '' THEN ProjRec.Address := EstRec.Address;
      IF ProjRec."Post Code" = '' THEN ProjRec."Post Code" := EstRec."Post Code";
      IF ProjRec.City = '' THEN ProjRec.City := EstRec.City;
      IF ProjRec."Territory Code" = '' THEN ProjRec."Territory Code" := EstRec."Territory Code";
      IF ProjRec.Discipline = '' THEN ProjRec.Discipline := EstRec.Discipline;
      IF ProjRec.Type = '' THEN ProjRec.Type := EstRec.Type;
      IF ProjRec."Bill-to Customer No." = '' THEN ProjRec."Bill-to Customer No." := EstRec."Customer No.";
      IF (ProjRec."Starting Date" = 0D) OR (EstRec."Starting Date" <> 0D) THEN BEGIN
        ProjRec."Starting Date" := EstRec."Starting Date";
        ProjRec.UpdateProjectStartElement;
      END;
      IF (ProjRec."Ending Date" = 0D) OR (EstRec."Ending Date" <> 0D) THEN BEGIN
        ProjRec."Ending Date" := EstRec."Ending Date";
        ProjRec.UpdateProjectStartElement;
      END;
      IF ProjRec.Estimator = '' THEN ProjRec.Estimator := EstRec.Estimator;
      IF ProjRec."Purchaser Code" = '' THEN ProjRec."Purchaser Code" := EstRec."Purchaser Code";
      IF ProjRec."Reference Date (Item)" = 0D THEN ProjRec."Reference Date (Item)" := EstRec."Reference Date (Item)";
      IF ProjRec."Purch Discount Term Group 1" = '' THEN
        ProjRec.VALIDATE("Purch Discount Term Group 1", EstRec."Purch Discount Term Group 1");
      IF ProjRec."Purch Discount Term Group 2" = '' THEN
        ProjRec.VALIDATE("Purch Discount Term Group 2" , EstRec."Purch Discount Term Group 2");
      IF ProjRec."Sales Discount Term Group 1" = '' THEN
        ProjRec.VALIDATE("Sales Discount Term Group 1", EstRec."Sales Discount Term Group 1");
      IF ProjRec."Sales Discount Term Group 2" = '' THEN
        ProjRec.VALIDATE("Sales Discount Term Group 2" , EstRec."Sales Discount Term Group 2");

      ProjRec.MODIFY(TRUE);

      IF ProjRec."Bill-to Customer No." <> '' THEN BEGIN
        IF NOT ProjectPrincipal.GET(ProjRec."No.", ProjRec."Bill-to Customer No.") THEN BEGIN
          ProjectPrincipal.INIT;
          ProjectPrincipal."Project No." := ProjRec."No.";
          ProjectPrincipal.VALIDATE(Principal, ProjRec."Bill-to Customer No.");
          ProjectPrincipal.INSERT(TRUE);
        END;
      END;

      //DP00883.sn
      IF EstRec."Currency Code" <> '' THEN BEGIN
        UpdateExchangeRate(EstRec."No.", ProjRec."No.");
        ProjRec.UpdateBudgetRate;
      END;
      //DP00883.en

      GenerateProjRespPerson(EstRec."No.", ProjRec."No.");

      //DP01488.sn
       IF ExtTo <> '' THEN BEGIN
         IF ExtensionContract.GET(ProjRec."No.", ExtTo) THEN BEGIN
           IF (EstRec."Summary Cost (RAW)" = EstRec."Summary Cost (RAW)"::Percentage) THEN BEGIN
             ExtensionContract."Summary Cost (RAW)" := ExtensionContract."Summary Cost (RAW)"::"Percentage (Order)";
             ExtensionContract."Apply Perc. (Surcharge)" := (EstRec."Percentage (GeneralCost)" <> 0);
             ExtensionContract."Apply Perc. (Profit/Risk)" := (EstRec."Percentage (Profit/Risk)" <> 0);
             ExtensionContract."Apply Perc. (ExecutionCost)" := (EstRec."Percentage (ExecutionCost)" <> 0);
             ExtensionContract."Apply Perc. (Discount)" := (EstRec."Percentage (Discount)" <> 0);
             ExtensionContract."Percentage (Surcharge)" := EstRec."Percentage (GeneralCost)";
             ExtensionContract."Percentage (Profit/Risk)" := EstRec."Percentage (Profit/Risk)";
             ExtensionContract."Percentage (ExecutionCost)" := EstRec."Percentage (ExecutionCost)";
             ExtensionContract."Percentage (Discount)" := EstRec."Percentage (Discount)";
           END;
           ExtensionContract.MODIFY;
         END;
       END ELSE BEGIN
         IF ProjectPrincipal.GET(ProjRec."No.", ProjRec."Bill-to Customer No.") THEN BEGIN
           IF (EstRec."Summary Cost (RAW)" = EstRec."Summary Cost (RAW)"::Percentage) THEN BEGIN
             ProjectPrincipal."Summary Cost (RAW)" := ProjectPrincipal."Summary Cost (RAW)"::"Percentage (Order)";
             ProjectPrincipal."Apply Perc. (Surcharge)" := (EstRec."Percentage (GeneralCost)" <> 0);
             ProjectPrincipal."Apply Perc. (Profit/Risk)" := (EstRec."Percentage (Profit/Risk)" <> 0);
             ProjectPrincipal."Apply Perc. (ExecutionCost)" := (EstRec."Percentage (ExecutionCost)" <> 0);
             ProjectPrincipal."Apply Perc. (Discount)" := (EstRec."Percentage (Discount)" <> 0);
             ProjectPrincipal."Percentage (Surcharge)" := EstRec."Percentage (GeneralCost)";
             ProjectPrincipal."Percentage (Profit/Risk)" := EstRec."Percentage (Profit/Risk)";
             ProjectPrincipal."Percentage (ExecutionCost)" := EstRec."Percentage (ExecutionCost)";
             ProjectPrincipal."Percentage (Discount)" := EstRec."Percentage (Discount)";
           END;
           ProjectPrincipal.MODIFY;
         END;
      END;
      //DP01488.en
    END;

    LOCAL PROCEDURE UpdateExchangeRate@1100525026(EstimateNo@1100525002 : Code[20];ProjectNo@1100525003 : Code[20]);
    VAR
      ProjectExchangeRate@1100525000 : Record 11020628;
      EstimateExchangeRate@1100525001 : Record 11229770;
    BEGIN
      //DP00883
      EstimateExchangeRate.SETRANGE("Estimate No.", EstimateNo);
      IF EstimateExchangeRate.FINDSET THEN BEGIN
        REPEAT
          IF NOT ProjectExchangeRate.GET(ProjectNo, EstimateExchangeRate."Currency Code", EstimateExchangeRate."Starting Date") THEN BEGIN
            ProjectExchangeRate.INIT;
            ProjectExchangeRate.TRANSFERFIELDS( EstimateExchangeRate);
            ProjectExchangeRate."Project No." := ProjectNo;
            ProjectExchangeRate.INSERT;
          END ELSE BEGIN
            ProjectExchangeRate.TRANSFERFIELDS( EstimateExchangeRate);
            ProjectExchangeRate."Project No." := ProjectNo;
            ProjectExchangeRate.MODIFY;
          END;
        UNTIL EstimateExchangeRate.NEXT = 0;
      END;
    END;

    PROCEDURE AssignOptionBudget@3();
    VAR
      LastLino@11012000 : Integer;
      OptionBudgetRec@1210190005 : Record 11012503;
    BEGIN
      OptionBudgetRec.SETRANGE("Project No.", ProjBudgetRec."Project No.");
      OptionBudgetRec.SETFILTER("Plot No.",'%1', PlotTo);
      OptionBudgetRec.SETRANGE("House Model", HouseModelTo);
      OptionBudgetRec.SETRANGE("Main Group", MainGroupTo);
      OptionBudgetRec.SETRANGE(Group, GroupTo);
      OptionBudgetRec.SETRANGE("Sub Group", SubGroupTo);
      OptionBudgetRec.SETRANGE(Option, ProjBudgetRec.Option);
      IF NOT OptionBudgetRec.FINDLAST THEN
        LastLino := 10000
      ELSE
        LastLino := OptionBudgetRec."Line No." + 10000;

      OptionBudgetRec.INIT;
      OptionBudgetRec."Project No." := ProjBudgetRec."Project No.";
      OptionBudgetRec."Plot No." := PlotTo;
      OptionBudgetRec."House Model" := HouseModelTo;
      OptionBudgetRec."Main Group" := MainGroupTo;
      OptionBudgetRec.Group := GroupTo;
      OptionBudgetRec."Sub Group" := SubGroupTo;
      OptionBudgetRec.Option := ProjBudgetRec.Option;
      OptionBudgetRec.Element := ProjBudgetRec.Element;
      OptionBudgetRec.Chapter := ProjBudgetRec.Chapter;
      OptionBudgetRec.Paragraph := ProjBudgetRec.Paragraph;
      OptionBudgetRec."Cost Object" := ProjBudgetRec."Cost Object";
      OptionBudgetRec."Cost Component" := ProjBudgetRec."Cost Component";
      OptionBudgetRec.Description := ProjBudgetRec.Description;
      OptionBudgetRec."Description 2" := ProjBudgetRec."Description 2";
      OptionBudgetRec.Quantity := ProjBudgetRec.Quantity;
      OptionBudgetRec."Unit of Measure" := ProjBudgetRec."Unit of Measure";
      OptionBudgetRec.Norm := ProjBudgetRec.Norm;
      OptionBudgetRec.Rate := ProjBudgetRec."Rate (LCY)";
      OptionBudgetRec."Rate Code" := ProjBudgetRec."Rate Code";  //C063635
      OptionBudgetRec.Hours := ProjBudgetRec.Hours;
      OptionBudgetRec.Amount := ProjBudgetRec."Amount (LCY)";
      OptionBudgetRec."Line No." := LastLino;
      OptionBudgetRec."Total Amount" := ProjBudgetRec."Total Amount";
      OptionBudgetRec."Total Hours" := ProjBudgetRec."Total Hours";
      OptionBudgetRec."Cost Type" := ProjBudgetRec."Cost Type";
      OptionBudgetRec.Price := ProjBudgetRec."Price (LCY)";
      OptionBudgetRec."Gross Price" := ProjBudgetRec."Gross Price (LCY)";
      OptionBudgetRec."Discount %" := ProjBudgetRec."Discount %";
      OptionBudgetRec."Time Quantity" := ProjBudgetRec."Time Quantity";
      OptionBudgetRec."Unit of Time" := ProjBudgetRec."Unit of Time";
      OptionBudgetRec."Item No." := ProjBudgetRec."Item No.";
      OptionBudgetRec."Basic Item" := ProjBudgetRec."Basic Item";
      OptionBudgetRec."Trade Item" := ProjBudgetRec."Trade Item";
      OptionBudgetRec."Vendor (Trade Item)" := ProjBudgetRec."Vendor (Trade Item)";
      OptionBudgetRec.Manufacturer := ProjBudgetRec.Manufacturer;
      OptionBudgetRec.INSERT;
      OptionBudgetRec.MODIFY(TRUE);
    END;

    PROCEDURE CostTypeValid@1210190005("Cost Type"@1210190000 : Integer) : Boolean;
    BEGIN
      IF "Cost Type" = 1 THEN
        EXIT((HelpRec.Norm <> 0) OR
             ((HelpRec.Norm = 0) AND
              (HelpRec."Cost Object Labor" <> '') AND
              (TransferZeroLines = TRUE)));

      IF "Cost Type" = 2 THEN
        EXIT((HelpRec."Material Price" <> 0) OR
             ((HelpRec."Material Price" = 0) AND
              (HelpRec."Cost Object Material" <> '') AND
              (TransferZeroLines = TRUE)));

      IF "Cost Type" = 3 THEN
        EXIT((HelpRec."Subcontracting Price" <> 0) OR
             ((HelpRec."Subcontracting Price" = 0) AND
              (HelpRec."Cost Object Subcontracting" <> '') AND
              (TransferZeroLines = TRUE)));

      IF "Cost Type" = 4 THEN
        EXIT((HelpRec."Plant Price" <> 0) OR
             ((HelpRec."Plant Price" = 0) AND
              (HelpRec."Cost Object Plant" <> '') AND
              (TransferZeroLines = TRUE)));

      IF "Cost Type" = 5 THEN
        EXIT((HelpRec."Sundry Cost" <> 0) OR
             ((HelpRec."Sundry Cost" = 0) AND
              (HelpRec."Cost Object Sundry" <> '') AND
              (TransferZeroLines = TRUE)));
    END;

    PROCEDURE SplitDesc@1210190004(lvDesc@1100485000 : Text[100];lvMaxLen@1100485001 : Integer);
    VAR
      sep@1210190000 : Integer;
    BEGIN
      sep := STRPOS(lvDesc, '\');
      IF sep <> 0 THEN BEGIN
        desc1 := COPYSTR(lvDesc, 1, sep-1);
        desc2 := COPYSTR(lvDesc, sep+1, STRLEN(lvDesc)-sep);
      END ELSE BEGIN
        IF STRLEN(lvDesc) > lvMaxLen THEN BEGIN
          desc1 := COPYSTR(lvDesc, 1, lvMaxLen);
          desc2 := COPYSTR(lvDesc, lvMaxLen+1, lvMaxLen);
        END ELSE BEGIN
          desc1 := lvDesc;
          desc2 := '';
        END;
      END;

      desc1 := COPYSTR(desc1, 1, lvMaxLen);
      desc2 := COPYSTR(desc2, 1, lvMaxLen);
    END;

    PROCEDURE ProcessRecipeChild@1210190006(lvRcpGrp@1210190001 : Code[20];lvRcp@1210190002 : Code[20];EstFrom@1100485000 : Code[20]);
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE CheckLastProject@1100485000();
    BEGIN
      IF LastProject = '' THEN
        LastProject := HelpRec."Project No.";
      IF LastProject <> HelpRec."Project No." THEN BEGIN
        IF SkipQuestionProject = FALSE THEN BEGIN
          IF NOT CONFIRM(Text013, FALSE) THEN
            ERROR('')
          ELSE
            SkipQuestionProject := TRUE;
        END;
      END;
    END;

    PROCEDURE CopyEstimateParagraphToTenderParagraph@1100485002();
    VAR
      ProjectPrincipal@1100485000 : Record 11012005;
      TenderParagraphbyPrincipal@1100485002 : Record 11012470;
      DummyAmount@1100485005 : Boolean;
      EstimateParagraphRAW@1100525001 : Record 11125679;
      EstimateParagraphRAW2@1100525005 : Record 11125679;
      EstimateVATSpecRAW@1100525009 : Record 11125678;
      EstimateVATSpecRAW2@1100525006 : Record 11125678;
      TenderParagraphVATSpec@1100525004 : Record 11012476;
      TenderParagraphVATSpec2@1100525007 : Record 11012476;
      TmpTenderParagraphVATSpec@1100525012 : TEMPORARY Record 11012476;
      ProjectTenderParagraph@1100525008 : Record 11012263;
      ProjectTenderElementText@1100525003 : Record 11012269;
      UnitRec@1100525000 : Record 204;
      TenderParagraph@1100525002 : Code[20];
      LineNo@1100525010 : Integer;
      EstimateRAWSetup@1100528900 : Record 11125673;
      ElementPercentage@1100528901 : Decimal;
      RaisePerc@1100525011 : Decimal;
      FactorPrice@1100528902 : Decimal;
      TotalPrice@1100528903 : Decimal;
    BEGIN
      EstRec.GET(EstFrom);
      ProjRec.GET(ProjTo);
      EstimateRAWSetup.GET;  //DP01488

      EstimateParagraphRAW.RESET;
      EstimateParagraphRAW.SETRANGE("Estimate No.", EstFrom);
      IF EstPartFilter <> '' THEN
        EstimateParagraphRAW.SETFILTER("Tender Paragraph No.", EstPartFilter);  //db, 14-03-19
      EstimateParagraphRAW.SETRANGE(Title, TRUE);
      IF EstimateParagraphRAW.FINDFIRST THEN BEGIN
        REPEAT
          IF NOT ProjectTenderParagraph.GET(ProjRec."No.", EstimateParagraphRAW."Tender Paragraph No.") THEN BEGIN
            ProjectTenderParagraph.INIT;
            ProjectTenderParagraph."Project No." := ProjRec."No.";
            ProjectTenderParagraph.VALIDATE("Tender Paragraph", EstimateParagraphRAW."Tender Paragraph No.");
            ProjectTenderParagraph.INSERT(TRUE);
            ProjectTenderParagraph.Description := COPYSTR(EstimateParagraphRAW.Text, 1, MAXSTRLEN(ProjectTenderParagraph.Description));
            ProjectTenderParagraph."Unit of Measure Code" := '';
            ProjectTenderParagraph.Quantity := 1;
            ProjectTenderParagraph.MODIFY(TRUE);
          END;
          CopyCommentToTenderElement(EstimateParagraphRAW."Estimate No.", EstimateParagraphRAW."Tender Paragraph No.",
             ProjRec."No.", EstRec."Customer No.", ExtTo);
        UNTIL EstimateParagraphRAW.NEXT = 0;
      END;

      EstimateParagraphRAW.RESET;
      EstimateParagraphRAW.SETRANGE("Estimate No.", EstFrom);
      IF EstPartFilter <> '' THEN
        EstimateParagraphRAW.SETFILTER("Tender Paragraph No.", EstPartFilter);  //db, 14-03-19
      EstimateParagraphRAW.SETRANGE(Title, FALSE);
      IF EstimateParagraphRAW.FINDFIRST THEN BEGIN
        REPEAT
          IF TenderParagraph <> EstimateParagraphRAW."Tender Paragraph No." THEN BEGIN
            ProjectTenderElementText.RESET;
            ProjectTenderElementText.SETRANGE("Source Type", ProjectTenderElementText."Source Type"::defi);
            ProjectTenderElementText.SETRANGE("Project No.", ProjRec."No.");
            ProjectTenderElementText.SETRANGE("Tender Paragraph", EstimateParagraphRAW."Tender Paragraph No.");
            ProjectTenderElementText.DELETEALL;
            LineNo := 0;
          END;
          //
          ProjectTenderElementText.INIT;
          ProjectTenderElementText."Project No." := ProjRec."No.";
          ProjectTenderElementText."Tender Paragraph" := EstimateParagraphRAW."Tender Paragraph No.";
          ProjectTenderElementText."Source Type" := ProjectTenderElementText."Source Type"::defi;
          ProjectTenderElementText."Text Line No." := LineNo + 10000;
          ProjectTenderElementText.Text := EstimateParagraphRAW.Text;
          ProjectTenderElementText.INSERT;
          //
          TenderParagraph := ProjectTenderElementText."Tender Paragraph";
          LineNo := ProjectTenderElementText."Text Line No.";
        UNTIL EstimateParagraphRAW.NEXT = 0;
      END;

      IF EstRec."Customer No." = '' THEN
        EXIT;

      IF ProjRec."Bill-to Customer No." <> EstRec."Customer No." THEN BEGIN
        IF NOT ProjectPrincipal.GET(ProjRec."No.",EstRec."Customer No.") THEN BEGIN
          ProjectPrincipal.INIT;
          ProjectPrincipal."Project No." := ProjRec."No.";
          ProjectPrincipal.VALIDATE(Principal, EstRec."Customer No.");
          ProjectPrincipal.INSERT(TRUE);
        END;
      END;

      IF FillContractAmount THEN BEGIN
        ProjectPrincipal.GET(ProjRec."No.", EstRec."Customer No.");
        ProjectPrincipal.VALIDATE("Contract Amount (LCY)", EstRec."Contract Amount (Actual)");
        ProjectPrincipal.MODIFY;
      END;

      EstimateParagraphRAW.RESET;
      EstimateParagraphRAW.SETRANGE("Estimate No.", EstFrom);
      IF EstPartFilter <> '' THEN
        EstimateParagraphRAW.SETFILTER("Tender Paragraph No.", EstPartFilter)  //db, 14-03-19
      ELSE
        EstimateParagraphRAW.SETFILTER("Tender Paragraph No.", '<>%1', '919990');  //Totaal eenmalige kosten
      EstimateParagraphRAW.SETRANGE(Title, TRUE);
      EstimateParagraphRAW.SETFILTER(Type, '..%1', EstimateParagraphRAW.Type::"Commitment (Main Line)");

      IF EstimateParagraphRAW.FINDSET THEN BEGIN
        ProjectPrincipal.GET(ProjRec."No.",EstRec."Customer No.");
        IF ProjectPrincipal."Installm.Motivation Method" <> ProjectPrincipal."Installm.Motivation Method"::"Element Quantity" THEN  BEGIN
          ProjectPrincipal."Installm.Motivation Method" := ProjectPrincipal."Installm.Motivation Method"::"Element Quantity";
          ProjectPrincipal.MODIFY;
        END;

        //Fill provisionally Contract Amount
        DummyAmount := FALSE;
        IF ProjectPrincipal."Contract Amount (LCY)" = 0 THEN BEGIN
          DummyAmount := TRUE;
          ProjectPrincipal."Contract Amount (LCY)" := 10000;
          ProjectPrincipal.MODIFY;
        END;

        REPEAT
           TenderParagraphbyPrincipal.INIT;
           TenderParagraphbyPrincipal.VALIDATE("Project No.", ProjRec."No.");
           TenderParagraphbyPrincipal.VALIDATE(Principal, EstRec."Customer No.");
           TenderParagraphbyPrincipal."Contract No."  :=  ExtTo;  //C053183
           TenderParagraphbyPrincipal.FillDefaultSettleExcess();
           TenderParagraphbyPrincipal.VALIDATE("No.", EstimateParagraphRAW."Tender Paragraph No.");
           IF TenderParagraphbyPrincipal.INSERT(TRUE) THEN;
           TenderParagraphbyPrincipal.Description := EstimateParagraphRAW.Text;
           IF EstimateParagraphRAW.Type = EstimateParagraphRAW.Type::"Commitment (Main Line)" THEN BEGIN
             IF UnitRec.GET(EstimateParagraphRAW."Internal Unit of Measure Code") THEN
               TenderParagraphbyPrincipal."Unit of Measure" := EstimateParagraphRAW."Internal Unit of Measure Code"
             ELSE
               IF UnitRec.GET(EstimateParagraphRAW."External Unit of Measure Code") THEN
                 TenderParagraphbyPrincipal."Unit of Measure" := EstimateParagraphRAW."External Unit of Measure Code";
             TenderParagraphbyPrincipal."Unit Price (LCY)" := EstimateParagraphRAW."Actual Unit Price";
             TenderParagraphbyPrincipal.VALIDATE(Quantity, EstimateParagraphRAW."Actual Quantity");
             CASE EstimateParagraphRAW."Quantity Type" OF
               EstimateParagraphRAW."Quantity Type"::V:
                 TenderParagraphbyPrincipal.VALIDATE("Settlement Type", TenderParagraphbyPrincipal."Settlement Type"::Settling);
               EstimateParagraphRAW."Quantity Type"::N:
                 TenderParagraphbyPrincipal.VALIDATE("Settlement Type", TenderParagraphbyPrincipal."Settlement Type"::"Non Settling");
               EstimateParagraphRAW."Quantity Type"::M:
                 TenderParagraphbyPrincipal.VALIDATE("Settlement Type", TenderParagraphbyPrincipal."Settlement Type"::Reduction);
               EstimateParagraphRAW."Quantity Type"::O:
                 TenderParagraphbyPrincipal.VALIDATE("Settlement Type", TenderParagraphbyPrincipal."Settlement Type"::Open);
               EstimateParagraphRAW."Quantity Type"::A:
                 TenderParagraphbyPrincipal.VALIDATE("Settlement Type", TenderParagraphbyPrincipal."Settlement Type"::Approved);
               ELSE
                 TenderParagraphbyPrincipal.VALIDATE("Settlement Type", TenderParagraphbyPrincipal."Settlement Type"::" ");
             END;
           END;
           //DP01488.sn
           IF (TenderParagraphbyPrincipal."No." = EstimateRAWSetup."Paragraph No.(Discount)") OR
              (TenderParagraphbyPrincipal."No." = EstimateRAWSetup."Paragraph No.(GeneralCost)") OR
              (TenderParagraphbyPrincipal."No." = EstimateRAWSetup."Paragraph No.(Profit/Risk)") OR
              (TenderParagraphbyPrincipal."No." = EstimateRAWSetup."Paragraph No.(ExecutionCost)") THEN
           BEGIN
             IF (TenderParagraphbyPrincipal."No." = EstimateRAWSetup."Paragraph No.(Discount)") THEN
               ElementPercentage := EstRec."Percentage (Discount)";
             IF (TenderParagraphbyPrincipal."No." = EstimateRAWSetup."Paragraph No.(GeneralCost)") THEN
               ElementPercentage := EstRec."Percentage (GeneralCost)";
             IF (TenderParagraphbyPrincipal."No." = EstimateRAWSetup."Paragraph No.(Profit/Risk)") THEN
               ElementPercentage := EstRec."Percentage (Profit/Risk)";
             IF (TenderParagraphbyPrincipal."No." = EstimateRAWSetup."Paragraph No.(ExecutionCost)") THEN
               ElementPercentage := EstRec."Percentage (ExecutionCost)";
             TenderParagraphbyPrincipal."Unit of Measure" := TenderParagraphbyPrincipal.EUR();
             //C055850.sn
             TotalPrice := EstimateParagraphRAW."Actual Amount";
             CheckNegativeAmount(TotalPrice, FactorPrice);
             TenderParagraphbyPrincipal.VALIDATE("Unit Price (FCY)", FactorPrice);
             TenderParagraphbyPrincipal.VALIDATE(Quantity, TotalPrice);
             //C055850.en
           END;
           //DP01488.en
           TenderParagraphbyPrincipal.MODIFY;

           IF ProjectTenderParagraph.GET(ProjRec."No.", EstimateParagraphRAW."Tender Paragraph No.") THEN BEGIN
             ProjectTenderParagraph.Quantity := TenderParagraphbyPrincipal.Quantity;
             ProjectTenderParagraph."Unit of Measure Code" := TenderParagraphbyPrincipal."Unit of Measure";
             ProjectTenderParagraph.MODIFY;
           END;

           IF EstimateParagraphRAW.Type = EstimateParagraphRAW.Type::"Commitment (Main Line)" THEN BEGIN
             TenderParagraphVATSpec.RESET;
             TenderParagraphVATSpec.SETFILTER("Project No.", TenderParagraphbyPrincipal."Project No.");
             TenderParagraphVATSpec.SETFILTER(Principal, TenderParagraphbyPrincipal.Principal);
             TenderParagraphVATSpec.SETFILTER("Contract No.", TenderParagraphbyPrincipal."Contract No.");
             TenderParagraphVATSpec.SETFILTER("Tender Paragraph", TenderParagraphbyPrincipal."No.");
             TenderParagraphVATSpec.DELETEALL;

             TmpTenderParagraphVATSpec.DELETEALL;

             EstimateVATSpecRAW.SETRANGE("Estimate No.", EstimateParagraphRAW."Estimate No.");
             EstimateVATSpecRAW.SETRANGE("Tender Paragraph No.", EstimateParagraphRAW."Tender Paragraph No.");
             IF EstimateVATSpecRAW.FINDSET THEN BEGIN
               REPEAT
                 EstimateVATSpecRAW.CALCFIELDS("VAT Base Amount");
                 IF (EstimateVATSpecRAW."VAT Base Amount" <> 0) THEN BEGIN
                   TenderParagraphVATSpec.INIT;
                   TenderParagraphVATSpec."Project No." := TenderParagraphbyPrincipal."Project No.";
                   TenderParagraphVATSpec.Principal := TenderParagraphbyPrincipal.Principal;
                   TenderParagraphVATSpec."Contract No."  := TenderParagraphbyPrincipal."Contract No.";
                   TenderParagraphVATSpec."Tender Paragraph" := TenderParagraphbyPrincipal."No.";
                   TenderParagraphVATSpec."VAT Prod. Posting Group" := EstimateVATSpecRAW."VAT Prod. Posting Group";
                   TenderParagraphVATSpec.Amount := EstimateVATSpecRAW."VAT Base Amount";
                   TenderParagraphVATSpec.INSERT;
                   TmpTenderParagraphVATSpec := TenderParagraphVATSpec;
                   TmpTenderParagraphVATSpec.Amount := EstimateVATSpecRAW."VAT Base Amount";
                   TmpTenderParagraphVATSpec.INSERT;
                 END;
               UNTIL EstimateVATSpecRAW.NEXT = 0;
             END;

             EstimateParagraphRAW2.COPY(EstimateParagraphRAW);
             EstimateParagraphRAW2.SETRANGE("Tender Paragraph No.",
               COPYSTR(EstimateParagraphRAW."Tender Paragraph No.", 1, 5) + '1',
               COPYSTR(EstimateParagraphRAW."Tender Paragraph No.", 1, 5) + '9');
             EstimateParagraphRAW2.SETRANGE(Type, EstimateParagraphRAW2.Type::"Commitment Description (Main Line)");
             IF EstimateParagraphRAW2.FINDSET THEN BEGIN
               REPEAT
                 EstimateVATSpecRAW2.SETRANGE("Estimate No.", EstimateParagraphRAW2."Estimate No.");
                 EstimateVATSpecRAW2.SETRANGE("Tender Paragraph No.", EstimateParagraphRAW2."Tender Paragraph No.");
                 IF EstimateVATSpecRAW2.FINDSET THEN BEGIN
                   REPEAT
                     EstimateVATSpecRAW2.CALCFIELDS("VAT Base Amount");
                     IF NOT TenderParagraphVATSpec2.GET(TenderParagraphbyPrincipal."Project No.", TenderParagraphbyPrincipal.Principal,
                       TenderParagraphbyPrincipal."Contract No.", TenderParagraphbyPrincipal."No.",
                       EstimateVATSpecRAW2."VAT Prod. Posting Group") THEN
                     BEGIN
                       TenderParagraphVATSpec2.INIT;
                       TenderParagraphVATSpec2."Project No." := TenderParagraphbyPrincipal."Project No.";
                       TenderParagraphVATSpec2.Principal := TenderParagraphbyPrincipal.Principal;
                       TenderParagraphVATSpec2."Contract No."  := TenderParagraphbyPrincipal."Contract No.";
                       TenderParagraphVATSpec2."Tender Paragraph" := TenderParagraphbyPrincipal."No.";
                       TenderParagraphVATSpec2."VAT Prod. Posting Group" := EstimateVATSpecRAW2."VAT Prod. Posting Group";
                       TenderParagraphVATSpec2.INSERT;
                       TmpTenderParagraphVATSpec := TenderParagraphVATSpec2;
                       TmpTenderParagraphVATSpec.INSERT;
                     END;
                     IF TmpTenderParagraphVATSpec.GET(TenderParagraphbyPrincipal."Project No.", TenderParagraphbyPrincipal.Principal,
                        TenderParagraphbyPrincipal."Contract No.", TenderParagraphbyPrincipal."No.",
                        EstimateVATSpecRAW2."VAT Prod. Posting Group") THEN
                     BEGIN
                       TmpTenderParagraphVATSpec.Amount := TmpTenderParagraphVATSpec.Amount + EstimateVATSpecRAW2."VAT Base Amount";
                       TmpTenderParagraphVATSpec.MODIFY;
                     END;
                     TenderParagraphVATSpec2.Amount := TmpTenderParagraphVATSpec.Amount;
                     TenderParagraphVATSpec2.MODIFY;
                   UNTIL EstimateVATSpecRAW2.NEXT = 0;
                 END;
               UNTIL EstimateParagraphRAW2.NEXT = 0;
             END;
             TenderParagraphVATSpec.RESET;
             TenderParagraphVATSpec.SETRANGE("Project No.", TenderParagraphbyPrincipal."Project No.");
             TenderParagraphVATSpec.SETRANGE(Principal, TenderParagraphbyPrincipal.Principal);
             TenderParagraphVATSpec.SETRANGE("Contract No.", TenderParagraphbyPrincipal."Contract No.");
             TenderParagraphVATSpec.SETRANGE("Tender Paragraph", TenderParagraphbyPrincipal."No.");
             IF TenderParagraphVATSpec.COUNT = 1 THEN BEGIN
               TenderParagraphVATSpec.FINDFIRST;
               TenderParagraphVATSpec.CALCFIELDS("Total Amount");
               IF TenderParagraphVATSpec.Amount <> TenderParagraphVATSpec."Total Amount" THEN BEGIN
                 TenderParagraphVATSpec.Amount := TenderParagraphVATSpec."Total Amount";
                 TenderParagraphVATSpec.MODIFY;
               END;
             END;
           END;
        UNTIL EstimateParagraphRAW.NEXT = 0;

        //Clear provisionally Contract Amount again
        IF DummyAmount THEN BEGIN
          ProjectPrincipal."Contract Amount (LCY)" := 0;
          ProjectPrincipal.MODIFY;
        END;

        //C059987.sn
        IF TenderParagraphbyPrincipal."Contract No." = '' THEN BEGIN
          ProjectPrincipal.GET(TenderParagraphbyPrincipal."Project No.", TenderParagraphbyPrincipal.Principal);
          RaisePerc := TenderParagraphbyPrincipal.CalcRaisePerc(FALSE, ProjectPrincipal."Fictitious Amount Open (LCY)");
          ProjectPrincipal."Calc. Raise % Settlement Price" := RaisePerc;
          IF ProjectPrincipal."Fixed Raise %" = FALSE THEN BEGIN
            IF ProjectPrincipal."Act. Raise % Settlement Price" <> RaisePerc THEN
              ProjectPrincipal.VALIDATE("Act. Raise % Settlement Price", RaisePerc);
          END;
          ProjectPrincipal.MODIFY;
        END;
        //C059987.en
      END;
    END;

    PROCEDURE CheckPurchaseAction@1100485005();
    VAR
      lvProjPurchActRec@1100485000 : Record 11012026;
      lvEstPurchActRec@1100485001 : Record 11012366;
      lvVendorsPurchActRec@1100485002 : Record 11012068;
      lvVendorsPurchActRec2@1100485003 : Record 11012068;
      lvPurchaseTextRec@1100485004 : Record 11012067;
      lvPurchaseTextRec2@1100485005 : Record 11012067;
      lvPurchActFeatureRec@1100485006 : Record 11012069;
      lvPurchActFeatureRec2@1100485007 : Record 11012069;
    BEGIN
      IF NOT lvProjPurchActRec.GET(ProjBudgetRec."Project No.", ProjBudgetRec."Purchase Action") THEN BEGIN
        IF lvEstPurchActRec.GET(ProjBudgetRec."Estimate No.", ProjBudgetRec."Purchase Action") THEN BEGIN
          lvProjPurchActRec.TRANSFERFIELDS(lvEstPurchActRec);
          lvProjPurchActRec."Project No." := ProjBudgetRec."Project No.";
          lvProjPurchActRec.Code := lvEstPurchActRec.Code;
          lvProjPurchActRec.INSERT;

          lvVendorsPurchActRec.SETRANGE(Source, lvVendorsPurchActRec.Source::Estimate);
          lvVendorsPurchActRec.SETRANGE("Estimate No.", ProjBudgetRec."Estimate No.");
          lvVendorsPurchActRec.SETRANGE("Purchase Action", ProjBudgetRec."Purchase Action");
          IF lvVendorsPurchActRec.FINDSET THEN BEGIN
            REPEAT
              lvVendorsPurchActRec2 := lvVendorsPurchActRec;
              lvVendorsPurchActRec2.Source := lvVendorsPurchActRec2.Source::Project;
              lvVendorsPurchActRec2."Estimate No." := '';
              lvVendorsPurchActRec2."Project No." := ProjBudgetRec."Project No.";
              lvVendorsPurchActRec2.INSERT;
            UNTIL lvVendorsPurchActRec.NEXT = 0;
          END;

          lvPurchaseTextRec.SETRANGE("Line Type", lvPurchaseTextRec."Line Type"::"Estimate Purchase Action");
          lvPurchaseTextRec.SETRANGE("No.", ProjBudgetRec."Estimate No.");
          lvPurchaseTextRec.SETRANGE("Purchase Action", ProjBudgetRec."Purchase Action");
          IF lvPurchaseTextRec.FINDSET THEN BEGIN
            REPEAT
              lvPurchaseTextRec2 := lvPurchaseTextRec;
              lvPurchaseTextRec2."Line Type" := lvPurchaseTextRec2."Line Type"::"Project Purchase Action";
              lvPurchaseTextRec2."No." := ProjBudgetRec."Project No.";
              lvPurchaseTextRec2.INSERT;
            UNTIL lvPurchaseTextRec.NEXT = 0;
          END;

          lvPurchActFeatureRec.SETRANGE(Source, lvPurchActFeatureRec.Source::Estimate);
          lvPurchActFeatureRec.SETRANGE("Estimate No.", ProjBudgetRec."Estimate No.");
          lvPurchActFeatureRec.SETRANGE("Purchase Action", ProjBudgetRec."Purchase Action");
          IF lvPurchActFeatureRec.FINDSET THEN BEGIN
            REPEAT
              lvPurchActFeatureRec2 := lvPurchActFeatureRec;
              lvPurchActFeatureRec2.Source := lvPurchActFeatureRec2.Source::Project;
              lvPurchActFeatureRec2."Estimate No." := '';
              lvPurchActFeatureRec2."Project No." := ProjBudgetRec."Project No.";
              lvPurchActFeatureRec2.INSERT;
            UNTIL lvPurchActFeatureRec.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE GetCostComponent@1100485004(lvCostComponent@1100485004 : Code[20];lvCostObject@1100485000 : Code[20];lvProject@1100485001 : Code[20];lvServOrder@1100525000 : Code[20];lvAdditionalCost@1100525002 : Boolean) : Code[20];
    VAR
      lvCostCompRec@1100525001 : Record 11012012;
      lvDimValRec@1100485002 : Record 349;
      lvDimMgt@1100485003 : Codeunit 408;
    BEGIN
      IF lvServOrder <> '' THEN BEGIN
        lvDimMgt.GetDimValueRec(2, lvCostObject, lvDimValRec, FALSE, lvProject);
        lvCostCompRec.CheckDefaultCostComponent(lvServOrder, lvCostComponent, '', lvDimValRec."Cost Type", lvAdditionalCost);
      END;

      IF lvCostComponent <> '' THEN
        EXIT(lvCostComponent);

      IF lvCostObject <> '' THEN BEGIN
        lvDimMgt.GetDimValueRec(2, lvCostObject, lvDimValRec, TRUE, lvProject);
        IF NOT lvDimValRec.Blocked THEN
          EXIT(lvDimValRec."Cost Component");
      END;

      EXIT('');
    END;

    PROCEDURE GetCode@1100525000(lvField@1100525010 : Integer;lvEst@1100525000 : Code[20];lvSubEst@1100525001 : Code[20];lvPartGrp@1100525002 : Code[20];lvPart@1100525003 : Code[20];lvLine@1100525007 : Integer;lvCode@1100525008 : Code[20]) : Code[20];
    BEGIN
      //not implemented for RAW
      EXIT('');
    END;

    PROCEDURE CreateServOrder@1100525002(VAR ServOrderRec@1100485000 : Record 11012823;lvSubEst@1100525002 : Code[20]);
    VAR
      ServLocRec@1100525001 : Record 11012801;
      ServContrRec@1100485003 : Record 11012812;
      Estimate@1100528901 : Record 11012151;
    BEGIN
      WITH EstRec DO BEGIN
        ServOrderRec.INIT;
        ServOrderRec."No." := '';
        ServOrderRec."Source Type" := ServOrderRec."Source Type"::Direct;
        IF CheckServSeries(1) THEN BEGIN
          IF SeriesServOrder = '' THEN BEGIN
            COMMIT;
            ServOrderRec.AssistEdit(ServOrderRec);
            IF ServOrderRec."No." = '' THEN EXIT;
          END;
        END;
        ServOrderRec.INSERT(TRUE);
        SeriesServOrder := ServOrderRec."No. Series";

        ServOrderRec.VALIDATE(Description, Description);
        ServOrderRec.VALIDATE("Customer No.", "Customer No.");
        IF ServLocRec.GET(ServiceLocationNo) THEN
          ServOrderRec.VALIDATE("Service Location No.", ServiceLocationNo)
        ELSE
          IF ServLocRec.GET("Service Location No.") THEN
            ServOrderRec.VALIDATE("Service Location No.", "Service Location No.");
        IF NOT ServContrRec.GET("Service Contract No.") THEN
          ServContrRec.INIT;
        IF ServContrRec."Bill-to Customer No. (CP)" <> '' THEN  //dummy-contract without (bill-to) customer
          ServOrderRec.VALIDATE("Bill-to Customer No.", ServContrRec."Bill-to Customer No. (CP)");
        IF "Service Contract No." <> '' THEN
          ServOrderRec.VALIDATE("Service Contract No.", "Service Contract No.");
        ServOrderRec.DetermineObjectNo;
        ServOrderRec.Address := Address;
        ServOrderRec.City := City;
        ServOrderRec."Post Code" := "Post Code";
        ServOrderRec."Territory Code":= "Territory Code";
        IF "Starting Date" <> 0D THEN
          ServOrderRec."Starting Date" := "Starting Date";
        ServOrderRec."Ending Date" := "Ending Date";
        ServOrderRec."Estimate No." := "No.";
        ServOrderRec."Sub-Estimate No." := lvSubEst;
        ServOrderRec."Order No. Customer" := "Order No. Customer";
        ServOrderRec."Reference Date (Item)" := "Reference Date (Item)";
        //ServOrderRec."Purch Discount Term Group 1" := "Purch Discount Term Group 1";
        //ServOrderRec."Purch Discount Term Group 2" := "Purch Discount Term Group 2";
        IF SettlementMethod = SettlementMethod::CostPlus THEN
          ServOrderRec."Settlement Method" := ServOrderRec."Settlement Method"::"Cost Plus"
        ELSE
          ServOrderRec."Settlement Method" := ServOrderRec."Settlement Method"::"Fixed Price";
        ServOrderRec.Discipline := Discipline;
        IF "Global Dimension 1 Code" = '' THEN BEGIN
          IF ServContrRec."Global Dimension 1 Code" <> '' THEN
            ServOrderRec.VALIDATE("Global Dimension 1 Code", ServContrRec."Global Dimension 1 Code")
        END ELSE
          ServOrderRec.VALIDATE("Global Dimension 1 Code", "Global Dimension 1 Code");
        UpdateServOrderIndication;
        UpdateServOrderAmount;
        ServOrderRec.CheckDurationOnInitServOrder;
        ServOrderRec.MODIFY;

        //C043087.sn
        Estimate.GET("No.");
        IF Estimate."Service Order No." = '' THEN BEGIN
          Estimate."Service Order No." := ServOrderRec."No.";
          Estimate."Service Location No." := ServOrderRec."Service Location No.";
          Estimate."Service Contract No." := ServOrderRec."Service Contract No.";
          Estimate.MODIFY;
        END;
        //C043087.en

        TmpServOrderRec.INIT;
        TmpServOrderRec."No." := ServOrderRec."No.";
        TmpServOrderRec."Estimate No." := ServOrderRec."Estimate No.";
        TmpServOrderRec."Sub-Estimate No." := ServOrderRec."Sub-Estimate No.";
        IF TmpServOrderRec.INSERT THEN;

        IF CopyTryOut AND FPSLicenseManagement.LicenseAndReadPermissionForTable(TryOutRec) THEN
          TryOutRec.CopyRelation(1, 4, ServOrderRec."Estimate No.", ServOrderRec."No.");
      END;
    END;

    PROCEDURE CreateServAdvice@1100485016(VAR ServBudgetRec@1100485002 : Record 11012875);
    VAR
      ServAdviceRec@1100485001 : Record 11012055;
    BEGIN
      IF ServBudgetRec."Surcharge Line" THEN EXIT;

      ServAdviceRec.INIT;
      ServAdviceRec."Record Type" := ServAdviceRec."Record Type"::ServOrder;
      ServAdviceRec.VALIDATE("Service Order No.", ServBudgetRec."Service Order No.");
      ServAdviceRec.VALIDATE("Line No.", 0);  //** 0=signal for table trigger to determine first free number
      ServAdviceRec.INSERT(TRUE);
      ServAdviceRec.InitRecord;

      ServAdviceRec."Service Contract No." := ServBudgetRec."Service Contract No.";
      ServAdviceRec."Cost Object" := ServBudgetRec."Cost Object";
      ServAdviceRec."Cost Component" := ServBudgetRec."Cost Component";
      CASE ServBudgetRec."Cost Type" OF
        ServBudgetRec."Cost Type"::Material:
          BEGIN
            ServAdviceRec."Cost Type" := ServAdviceRec."Cost Type"::Material;
            ServAdviceRec.Vendor := ServBudgetRec.Vendor;
            ServAdviceRec."Item No." := ServBudgetRec."Item No.";
            ServAdviceRec.Manufacturer := ServBudgetRec.Manufacturer;
            ServAdviceRec."Basic Item" := ServBudgetRec."Basic Item";
            ServAdviceRec."Vendor (Trade Item)" := ServBudgetRec."Vendor (Trade Item)";
            ServAdviceRec."Trade Item" := ServBudgetRec."Trade Item";
            IF ServAdviceRec.Vendor = '' THEN
               ServAdviceRec.Vendor := ServAdviceRec.PreferredVendor;
          END;
        ServBudgetRec."Cost Type"::Subcontracting:
          BEGIN
            ServAdviceRec."Cost Type" := ServAdviceRec."Cost Type"::Subcontracting;
            ServAdviceRec.Vendor := ServBudgetRec.Vendor;
          END;
        ServBudgetRec."Cost Type"::Plant:
          BEGIN
            ServAdviceRec."Cost Type" := ServAdviceRec."Cost Type"::Plant;
          END;
      END;
      ServAdviceRec.Description := ServBudgetRec.Description;
      ServAdviceRec."Description 2" := ServBudgetRec."Description 2";
      ServAdviceRec."Quantity (Budget)" := ServBudgetRec.Quantity;
      ServAdviceRec."Quantity (Advice)" := ServBudgetRec.Quantity;
      ServAdviceRec."Unit of Measure" := ServBudgetRec."Unit of Measure";
      ServAdviceRec."Price (LCY)" := ServBudgetRec.Price;
      ServAdviceRec.VALIDATE(Transaction, JobSetup."Advice Order Purch.Transaction");
      IF (ServBudgetRec."Item No." <> '') AND (ServBudgetRec."Cost Type" = ServBudgetRec."Cost Type"::Material) THEN BEGIN
        IF JobSetup."Advice Order Transaction" = JobSetup."Advice Order Transaction"::Inventory THEN
          ServAdviceRec.VALIDATE(Transaction, ServAdviceRec.Transaction::Inventory);
      END;
      IF ServAdviceRec."Ship To Location" = '' THEN
        ServAdviceRec.VALIDATE(Deliver, ServAdviceRec.Deliver::"Service Location");
      ServAdviceRec.VALIDATE("Delivery Period", '');
      IF ServOrderRec."Starting Date" <> 0D THEN BEGIN
        ServAdviceRec.VALIDATE("Receipt Date", ServOrderRec."Starting Date");
        IF ServAdviceRec."Delivery Period" <> '' THEN
          ServAdviceRec.VALIDATE("Delivery Period")
        ELSE
          ServAdviceRec."Order Date" := ServAdviceRec."Receipt Date";
      END;
      ServAdviceRec."Additional Cost (Service)" := ServBudgetRec."Additional Cost";
      ServAdviceRec.VALIDATE("External Text", ServBudgetRec."External Text");
      ServAdviceRec.CalculateTotal;
      ServAdviceRec.MODIFY;

      ServBudgetRec.Advised := TRUE;
      ServBudgetRec.MODIFY;
    END;

    PROCEDURE UpdateServBudgetFromEstimate@1100525006(CostType@1100525000 : Integer);
    VAR
      ServBudgetRec@1100525001 : Record 11012875;
      EstimateLine@1100528900 : Record 11125698;
    BEGIN
      ServBudgetRec.SETRANGE("Budget Type", ServBudgetRec."Budget Type"::Order);
      ServBudgetRec.SETRANGE("Service Order No.", ServOrderRec."No.");
      IF ServBudgetRec.FINDLAST THEN
        BudgetLino := ServBudgetRec."Line No.";
      ServBudgetRec.RESET;

      ServBudgetRec.INIT;
      ServBudgetRec."Service Order No." := ServOrderRec."No.";
      ServBudgetRec."Line No." := BudgetLino + 10000;
      BudgetLino := ServBudgetRec."Line No.";
      ServBudgetRec.INSERT(TRUE);

      ServBudgetRec."Summary Line" := HelpRec."Summary Line";
      ServBudgetRec."Surcharge Line" :=  HelpRec."Surcharge Line";
      SplitDesc(HelpRec.Description, MAXSTRLEN(ServBudgetRec.Description));
      ServBudgetRec.Description := desc1;
      ServBudgetRec."Description 2" := desc2;
      ServBudgetRec."Unit of Time" := HelpRec."Unit of Time";
      ServBudgetRec."Time Quantity" := HelpRec."Time Quantity";
      ServBudgetRec.Quantity := HelpRec.Quantity;
      ServBudgetRec."Unit of Measure" := HelpRec."Unit of Measure";
      ServBudgetRec."Purchase Route Reference" := HelpRec."Purchase Route Reference";
      ServBudgetRec."Price Agreement" := HelpRec."Price Agreement";
      ServBudgetRec.Discipline := HelpRec.Discipline;
      ServBudgetRec."Trade Speciality" := HelpRec."Trade Speciality";
      ServBudgetRec."Trade Expertise" := HelpRec."Trade Expertise";
      ServBudgetRec.Code := HelpRec.Code;
      ServBudgetRec."BOM Item No." := HelpRec."BOM Item No.";
      ServBudgetRec."Level BOM" := HelpRec."Level BOM";
      ServBudgetRec."Original Quantity" := HelpRec."Original Quantity";
      IF HelpRec."BOM Item No." <> '' THEN BEGIN
        IF HelpRec."Level BOM" = 0 THEN
          BomLine := ServBudgetRec."Line No."
        ELSE
          ServBudgetRec."Part of Line" := BomLine;
      END;
      //DP01676.sn
      ServBudgetRec."Quantity (Result Obligation)" := HelpRec."Quantity (Result Obligation)";
      ServBudgetRec."Apply Obligation" := HelpRec."Apply Obligation";
      //DP01676.en

      CASE CostType OF
        1:BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Labor;
            IF HelpRec."Cost Object Labor" = '' THEN
              ServBudgetRec."Cost Object" := EstSetup."Absence Value Labor"
            ELSE
              ServBudgetRec."Cost Object" := HelpRec."Cost Object Labor";
            ConvertRateType(HelpRec."Estimate No.", HelpRec."Rate Code", HelpRec.Norm, HelpRec.Rate);
            ServBudgetRec.Norm := HelpRec.Norm;
            ServBudgetRec."Production Rate" := HelpRec."Production Rate";  //DP01676
            ServBudgetRec.Rate := HelpRec.Rate;
            IF ValidateRateCode THEN
              ServBudgetRec.VALIDATE("Rate Code", HelpRec."Rate Code");
            ServBudgetRec."Wage Component" := HelpRec."Wage Component";  //DP00236
          END;
        2:BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Material;
            IF HelpRec."Cost Object Material" = '' THEN
              ServBudgetRec."Cost Object" := EstSetup."Absence Value Material"
            ELSE
              ServBudgetRec."Cost Object" := HelpRec."Cost Object Material";
            ServBudgetRec.Price := HelpRec."Material Price";
            ServBudgetRec."Gross Price" := HelpRec."Gross Price";
            ServBudgetRec."Discount %" := HelpRec."Discount %";
            ServBudgetRec."Item No." := HelpRec."Item No.";
            ServBudgetRec.Manufacturer := HelpRec.Manufacturer;
            ServBudgetRec."Basic Item" := HelpRec."Basic Item";
            ServBudgetRec."Vendor (Trade Item)" := HelpRec."Vendor (Trade Item)";
            ServBudgetRec."Trade Item" := HelpRec."Trade Item";
            ServBudgetRec."Scheme Code" := HelpRec."Scheme Code";
            ServBudgetRec.Comments := HelpRec.Comments;
            ServBudgetRec.Supply := HelpRec.Supply;
            ServBudgetRec."Comments for Logistics" := HelpRec."Remarks for Logistics";
            ServBudgetRec."Material Sheet" := HelpRec."Material Sheet";
          END;
        3:BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Subcontracting;
            IF HelpRec."Cost Object Subcontracting" = '' THEN
              ServBudgetRec."Cost Object" := EstSetup."Absence Value Subcontracting"
            ELSE
              ServBudgetRec."Cost Object" := HelpRec."Cost Object Subcontracting";
            ServBudgetRec.Price := HelpRec."Subcontracting Price";
            IF (HelpRec."Production Rate" <> 0) THEN
              ServBudgetRec.VALIDATE("Production Rate", HelpRec."Production Rate");  //DP01676
            ServBudgetRec."Subcontracting in Hours" := HelpRec."Subcontracting in Hours";  //C053751
          END;
        4:BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Plant;
            IF HelpRec."Cost Object Plant" = '' THEN
              ServBudgetRec."Cost Object" := EstSetup."Absence Value Plant"
            ELSE
              ServBudgetRec."Cost Object" := HelpRec."Cost Object Plant";
            ServBudgetRec.Price := HelpRec."Plant Price";
            //DP02115.sn
            ServBudgetRec."Plant Company" := HelpRec."Plant Company";
            //ServBudgetRec."Plant Location" := HelpRec."Plant Location";
            ServBudgetRec."Plant Type" := HelpRec."Plant Type";
            IF (HelpRec."Production Rate" <> 0) THEN
              ServBudgetRec.VALIDATE("Production Rate", HelpRec."Production Rate");  //DP01676
            ServBudgetRec."Plant Rates in Hours" := HelpRec."Plant Rates in Hours";
            //DP02115.en
          END;
        5:BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Sundry;
            IF HelpRec."Cost Object Sundry" = '' THEN
              ServBudgetRec."Cost Object" := EstSetup."Absence Value Sundry Cost"
            ELSE
              ServBudgetRec."Cost Object" := HelpRec."Cost Object Sundry";
            ServBudgetRec.Price := HelpRec."Sundry Cost";
          END;
      END;

      ServBudgetRec."Tender Paragraph" := HelpRec.Part;  //DP01958a
      IF ServBudgetRec."Cost Type" = ServBudgetRec."Cost Type"::Subcontracting THEN BEGIN
        ServBudgetRec.Vendor := HelpRec.Subcontractor;
        ServBudgetRec."Subcontracting Activity" := HelpRec."Subcontracting Activity";  //DP01958a
      END ELSE BEGIN
        ServBudgetRec.Vendor := HelpRec.Vendor;
      END;

      IF ServSetup."Add.Cost Based On Contr.Disc." = FALSE THEN BEGIN
        ServBudgetRec."Additional Cost" := ServOrderRec."Additional Cost";
      END ELSE BEGIN
        CASE ServBudgetRec."Cost Type" OF
          ServBudgetRec."Cost Type"::Labor: ServBudgetRec."Additional Cost" := ServOrderRec."Additional Cost (Labor)";
          ServBudgetRec."Cost Type"::Material: ServBudgetRec."Additional Cost" := ServOrderRec."Additional Cost (Material)";
          ServBudgetRec."Cost Type"::Subcontracting: ServBudgetRec."Additional Cost" := ServOrderRec."Additional Cost (Subc)";
          ServBudgetRec."Cost Type"::Plant: ServBudgetRec."Additional Cost" := ServOrderRec."Additional Cost (Plant)";
          ServBudgetRec."Cost Type"::Sundry: ServBudgetRec."Additional Cost" := ServOrderRec."Additional Cost (Sundry)";
        END;
      END;

      IF (HelpRec."Cost Component" <> '') THEN BEGIN
        ServBudgetRec."Cost Component" := HelpRec."Cost Component";
        ServBudgetRec.CheckCostComponent(ServBudgetRec."Cost Component");
      END ELSE BEGIN
        ServBudgetRec."Cost Component" :=
          GetCostComponent(HelpRec."Cost Component", ServBudgetRec."Cost Object", '', ServBudgetRec."Service Order No.",
            ServBudgetRec."Additional Cost");
      END;

      ServBudgetRec.VALIDATE("External Text", HelpRec."External Text");
      ServBudgetRec.CalcTotals;
      IF (ServSetup."Cost Component Mandatory") AND (ServBudgetRec."Cost Component" = '') AND (ServBudgetRec.Amount <> 0) THEN
        IF EstimateLine.GET(HelpRec."Estimate No.", HelpRec."Sub-Estimate No.", HelpRec."Part Group", HelpRec.Part,
          HelpRec."Estimate Line No.") THEN
          IF EstimateLine."Recipe No." <> '' THEN
            EstimateLine.FIELDERROR("Cost Component", STRSUBSTNO(Text015, EstimateLine."Recipe No.", HelpRec.Description))
          ELSE
            EstimateLine.TESTFIELD("Cost Component");

      ServBudgetRec.MODIFY(TRUE);
      ServBudgetRec.UpdateServHoursGanttChart(0);

      IF ServBudgetRec."Cost Type" <> ServBudgetRec."Cost Type"::Labor THEN
        IF TransferBudgetToAdviceOrder THEN  //C030978
          CreateServAdvice(ServBudgetRec);
    END;

    PROCEDURE UpdateServBudgetFromSummary@1100485001(lvServOrder@1100485002 : Code[20]);
    VAR
      ServBudgetRec@1100485001 : Record 11012875;
      CostCompRec@1100525001 : Record 11012012;
      lvBudgetLino@1100525000 : Integer;
    BEGIN
      ServBudgetRec.SETRANGE("Budget Type", ServBudgetRec."Budget Type"::Order);
      ServBudgetRec.SETRANGE("Service Order No.", lvServOrder);
      IF ServBudgetRec.FINDLAST THEN
        lvBudgetLino := ServBudgetRec."Line No."
      ELSE
        lvBudgetLino := 0;

      HelpRec.SETRANGE("Summary Line", TRUE);
      HelpRec.SETRANGE("Contract Amount", FALSE);
      IF HelpRec.FINDSET THEN BEGIN
        REPEAT
          ServBudgetRec.INIT;
          ServBudgetRec."Service Order No." := lvServOrder;
          ServBudgetRec."Line No." := lvBudgetLino + 10000;
          lvBudgetLino := ServBudgetRec."Line No.";
          ServBudgetRec.INSERT(TRUE);

          ServBudgetRec."Summary Line" := HelpRec."Summary Line";
          SplitDesc(HelpRec.Description, MAXSTRLEN(ServBudgetRec.Description));
          ServBudgetRec.Description := desc1;
          ServBudgetRec."Description 2" := desc2;
          ServBudgetRec."Unit of Measure" :=  HelpRec."Unit of Measure";
          ServBudgetRec.Quantity := HelpRec.Quantity;
          ServBudgetRec."Time Quantity" := HelpRec."Time Quantity";
          ServBudgetRec."Unit of Time" := HelpRec."Unit of Time";

          IF HelpRec."Cost Object Labor" <> '' THEN BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Labor;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Labor";
            ConvertRateType(HelpRec."Estimate No.", HelpRec."Rate Code", HelpRec.Norm, HelpRec.Rate);
            ServBudgetRec.Norm := HelpRec.Norm;
            ServBudgetRec.Rate := HelpRec.Rate;
            ServBudgetRec."Wage Component" := HelpRec."Wage Component";  //DP00236
          END;

          IF HelpRec."Cost Object Material" <> '' THEN BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Material;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Material";
            ServBudgetRec.Price := HelpRec."Material Price";
          END;

          IF HelpRec."Cost Object Subcontracting" <> '' THEN BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Subcontracting;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Subcontracting";
            ServBudgetRec.Price := HelpRec."Subcontracting Price";
          END;

          IF HelpRec."Cost Object Plant" <> '' THEN BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Plant;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Plant";
            ServBudgetRec.Price := HelpRec."Plant Price";
          END;

          IF HelpRec."Cost Object Sundry" <> '' THEN BEGIN
            ServBudgetRec."Cost Type" := ServBudgetRec."Cost Type"::Sundry;
            ServBudgetRec."Cost Object" := HelpRec."Cost Object Sundry";
            ServBudgetRec.Price := HelpRec."Sundry Cost";
          END;

          IF HelpRec."Discount %" <> 0 THEN BEGIN
            ServBudgetRec."Discount %" := HelpRec."Discount %";
            ServBudgetRec."Gross Price" := HelpRec."Gross Price";
          END;

          ServBudgetRec."Wage Component" := HelpRec."Wage Component";
          IF HelpRec."Cost Component" <> '' THEN BEGIN
            CostCompRec.GET(HelpRec."Cost Component");
            ServBudgetRec."Cost Component" := HelpRec."Cost Component";
            ServBudgetRec."Additional Cost" := CostCompRec."Additional Cost (Service)";
          END ELSE BEGIN
            ServBudgetRec."Cost Component" :=
              GetCostComponent(HelpRec."Cost Component", ServBudgetRec."Cost Object", '', ServBudgetRec."Service Order No.",
                ServBudgetRec."Additional Cost");
          END;

          ServBudgetRec."Price Agreement" := HelpRec."Price Agreement";
          IF ServBudgetRec."Cost Type" = ServBudgetRec."Cost Type"::Subcontracting THEN BEGIN
            ServBudgetRec.Vendor := HelpRec.Subcontractor;
            //ServBudgetRec."Subcontracting Activity" := HelpRec."Subcontracting Activity";  //DP01492-2
          END ELSE BEGIN
            ServBudgetRec.Vendor := HelpRec.Vendor;
          END;
          IF (HelpRec."Purchase Route Reference" <> '') THEN BEGIN
            ServBudgetRec."Purchase Route Reference" := HelpRec."Purchase Route Reference";
            //RouteRefMgtCU.UpdateQuoteLinesFromBudget(ServBudgetRec);
          END;
          ServBudgetRec.CalcTotals;
          ServBudgetRec.MODIFY(TRUE);
          ServBudgetRec.UpdateServHoursGanttChart(0);
        UNTIL HelpRec.NEXT = 0;
        HelpRec.DELETEALL;
      END;
    END;

    PROCEDURE FillTmpServOrder@1100525001();
    VAR
      ServiceOrder@1100528600 : Record 11012823;
    BEGIN
      IF HelpRec."Service Order No." = '' THEN EXIT;

      IF NOT TmpServOrderRec.GET(HelpRec."Service Order No.") THEN BEGIN
        TmpServOrderRec.INIT;
        TmpServOrderRec."No." := HelpRec."Service Order No.";
        ServiceOrder.GET(HelpRec."Service Order No.");
        TmpServOrderRec."Estimate No." := HelpRec."Estimate No.";
        IF TransferStructure = TRUE THEN
          TmpServOrderRec."Sub-Estimate No." := HelpRec."Sub-Estimate No."
        ELSE
          TmpServOrderRec."Sub-Estimate No." := HelpRec.Code;
        TmpServOrderRec.INSERT;
      END;
    END;

    PROCEDURE RemoveServOrderLines@1100525003();
    VAR
      ServBudgetRec@1100525000 : Record 11012875;
      ServAdviceRec@1100525002 : Record 11012055;
    BEGIN
      WITH TmpServOrderRec DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            ServBudgetRec.SETRANGE("Budget Type", ServBudgetRec."Budget Type"::Order);
            ServBudgetRec.SETRANGE("Service Order No.", "No.");
            ServBudgetRec.DELETEALL(TRUE);

            ServAdviceRec.SETRANGE("Record Type", ServAdviceRec."Record Type"::ServOrder);
            ServAdviceRec.SETRANGE("Service Order No.", "No.");
            ServAdviceRec.DELETEALL(TRUE);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE UpdateServOrderSummary@1100525008();
    VAR
      ServiceOrder@1100528601 : Record 11012823;
      ServiceSurchargeManagement@1100528600 : Codeunit 11012834;
      FirstServOrder@1100525004 : Code[20];
      LastServOrder@1100525003 : Code[20];
      InfoTxt@1100525002 : Text[50];
    BEGIN
      WITH TmpServOrderRec DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            IF FirstServOrder = '' THEN
              FirstServOrder := "No.";
            LastServOrder := "No.";

            ServiceOrder.GET("No.");
            ServiceSurchargeManagement.UpdateSOSurchargeBudgetLines(ServiceOrder);
            ServiceOrder.UpdateSOHours;
          UNTIL NEXT = 0;
          RemoveSummary("Estimate No.", ServSheet);

          IF FirstServOrder <> LastServOrder THEN
            InfoTxt := FirstServOrder + '..' + LastServOrder
          ELSE
            InfoTxt := FirstServOrder;
          IF InfoTxt <> '' THEN
            MESSAGE(Text014, TABLECAPTION, InfoTxt);
        END;
      END;
    END;

    PROCEDURE ConvertRateType@1100525004(lvEst@1100525000 : Code[20];lvRateCode@1100525001 : Code[20];VAR ioNorm@1100525002 : Decimal;VAR ioRateAmnt@1100525003 : Decimal);
    BEGIN
      IF NOT EstRateRec.GET(lvEst, lvRateCode) THEN
        EstRateRec.INIT;  //Rate Code not filled for additional cost (type labor) in summary
      IF EstRateRec."Rate Type" = EstRateRec."Rate Type"::Minuts THEN BEGIN
        ioNorm := ioNorm / 60;
        ioRateAmnt := ioRateAmnt * 60;
        IF EstRateRec."Team Size" <> 0 THEN BEGIN
          ioNorm := ioNorm * EstRateRec."Team Size";
          ioRateAmnt := ioRateAmnt / EstRateRec."Team Size";
        END;
      END;
    END;

    PROCEDURE CheckServSeries@1100525007(lvAct@1210190002 : Integer) : Boolean;
    VAR
      SerieRel@1210190000 : Record 310;
      ServSetup@1210190004 : Record 11012800;
      ServiceSourceTypeSetup@1100528600 : Record 11071726;
    BEGIN
      ServSetup.GET;
      CASE lvAct OF
        0:
          BEGIN
            ServSetup.TESTFIELD("Service Location Nos.");
            SerieRel.SETRANGE(Code, ServSetup."Service Location Nos.");
          END;
        1:
          BEGIN
            ServiceSourceTypeSetup.GET(ServiceSourceTypeSetup."Source Type"::Direct);
            ServiceSourceTypeSetup.TESTFIELD("No. Series");
            SerieRel.SETRANGE(Code, ServiceSourceTypeSetup."No. Series");
          END;
      END;

      EXIT(SerieRel.FINDFIRST);
    END;

    PROCEDURE UpdateSummary@1100525011(EstFrom@1100525001 : Code[20];SheetFrom@1100525000 : Code[20];SumLineFilter@1100525003 : Text[250]);
    VAR
      SumRec@1100525004 : Record 11012172;
      SumLineRec@1100525002 : Record 11012171;
    BEGIN
      IF SumRec.GET(EstFrom, SheetFrom) THEN BEGIN
        SumRec."Modified by" := USERID;
        SumRec."Last Date Modified" := TODAY;
        SumRec."Last Time Modified" := TIME;
        SumRec.Fixed := FALSE;
        SumRec.MODIFY;

        SumLineRec.SETRANGE("Estimate No.", SumRec."Estimate No.");
        SumLineRec.SETRANGE(Summary, SumRec.Summary);
        SumLineRec.SETRANGE(Type, SumLineRec.Type::"Cost Type");
        IF SumLineRec.FINDSET THEN BEGIN
          REPEAT
            IF TransferStructure = TRUE THEN BEGIN
              SumLineRec."Code Filter" := '';
              SumLineRec.VALIDATE("Sub-Estimate Filter", SumLineFilter);
            END ELSE BEGIN
              SumLineRec."Sub-Estimate Filter" := '';
              IF SumLineFilter = '' THEN
                SumLineRec.VALIDATE("Code Filter", '''''')
              ELSE
                SumLineRec.VALIDATE("Code Filter", SumLineFilter);
            END;
            SumLineRec.MODIFY;
          UNTIL SumLineRec.NEXT = 0;
          SumLineRec.UpdateLogbook;
        END;

        SumLineRec.UpdateSummarySheet(SumRec."Estimate No.", SumRec.Summary, FALSE);
      END;
    END;

    PROCEDURE RemoveSummary@1100525012(EstFrom@1100525001 : Code[20];SheetFrom@1100525000 : Code[20]);
    VAR
      SumRec@1100525002 : Record 11012172;
    BEGIN
      IF SumRec.GET(EstFrom, SheetFrom) THEN
        SumRec.DELETE(TRUE);
    END;

    PROCEDURE CheckRelationSubEstServOrder@1100525014();
    BEGIN
      //not implemented for RAW
    END;

    PROCEDURE CheckBudgetSummary@1100525017();
    VAR
      lvBudgetSumRec@1100525003 : Record 11012064;
    BEGIN
      IF ProjTo = '' THEN
        lvBudgetSumRec.SETFILTER("Project No.", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("Project No.", ProjTo);
      IF ExtTo = '' THEN
        lvBudgetSumRec.SETFILTER("Contract No.", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("Contract No.", ExtTo);
      IF PlotTo = '' THEN
        lvBudgetSumRec.SETFILTER("Plot No.", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("Plot No.", PlotTo);
      IF HouseModelTo = '' THEN
        lvBudgetSumRec.SETFILTER("House Model", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("House Model", HouseModelTo);
      IF MainGroupTo = '' THEN
        lvBudgetSumRec.SETFILTER("Main Group", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("Main Group", MainGroupTo);
      IF GroupTo = '' THEN
        lvBudgetSumRec.SETFILTER(Group, '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE(Group, GroupTo);
      IF SubGroupTo = '' THEN
        lvBudgetSumRec.SETFILTER("Sub Group", '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE("Sub Group", SubGroupTo);
      IF OptTo = '' THEN
        lvBudgetSumRec.SETFILTER(Option, '%1', '')
      ELSE
        lvBudgetSumRec.SETRANGE(Option, OptTo);
      IF lvBudgetSumRec.FINDFIRST THEN BEGIN
        IF OptTo <> '' THEN BEGIN
          lvBudgetSumRec.ReCalcOptionSummaryLines;
          lvBudgetSumRec.UpdateOptBudgetLines;
        END ELSE BEGIN
          lvBudgetSumRec.ReCalcSummaryLines(AdjTo);
          lvBudgetSumRec.UpdateBudgetLines(TRUE,AdjTo);
        END;
      END;
    END;

    PROCEDURE FillWithAdmiCodeCostobjects@1100525018(AdmiCode@1100525000 : Code[10]);
    VAR
      lvAdmiCodeRec@1100525001 : Record 11012390;
    BEGIN
      IF AdmiCode = '' THEN
        EXIT;
      IF (HelpRec."Cost Object Labor" <> '') AND (HelpRec."Cost Object Material" <> '') AND
         (HelpRec."Cost Object Subcontracting" <> '') AND (HelpRec."Cost Object Plant" <> '')
      THEN
        EXIT;
      IF NOT lvAdmiCodeRec.GET(AdmiCode) THEN
        EXIT;

      IF HelpRec."Cost Object Labor" = '' THEN
        HelpRec."Cost Object Labor" := lvAdmiCodeRec."Cost Object Labor";
      IF HelpRec."Cost Object Material" = '' THEN
        HelpRec."Cost Object Material" := lvAdmiCodeRec."Cost Object Material";
      IF HelpRec."Cost Object Subcontracting" = '' THEN
        HelpRec."Cost Object Subcontracting" := lvAdmiCodeRec."Cost Object Subcontracting";
      IF HelpRec."Cost Object Plant" = '' THEN
        HelpRec."Cost Object Plant" := lvAdmiCodeRec."Cost Object Plant";
    END;

    PROCEDURE CopyCommentToBudgetLine@1100529800();
    VAR
      CommentLineFrom@1100529803 : Record 11125684;
      CommentLineTo@1100529804 : Record 11020634;
      RecRef@1100529800 : RecordRef;
      LineNo@1100529802 : Integer;
    BEGIN
      //DP01086
      IF NOT TransferCommentLines THEN
        EXIT;

      IF CommentLinesTransfered THEN
        EXIT;

      CommentLineFrom.RESET;
      CommentLineFrom.SETRANGE("Table No.", DATABASE::"Estimate Line RAW");
      CommentLineFrom.SETRANGE("Estimate No.", HelpRec."Estimate No.");
      CommentLineFrom.SETRANGE("Tender Paragraph No.", HelpRec.Part);
      CommentLineFrom.SETRANGE("Estimate Line No.", HelpRec."Estimate Line No.");
      IF CommentLineFrom.FINDSET THEN BEGIN
        RecRef.GETTABLE(ProjBudgetRec);

        CommentLineTo.RESET;
        CommentLineTo.SETRANGE("Table Name", CommentLineTo."Table Name"::Budget);
        CommentLineTo.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
        IF CommentLineTo.FINDLAST THEN
          LineNo := CommentLineTo."Line No." + 10000
        ELSE
          LineNo := 10000;

        REPEAT
          CommentLineTo.INIT;
          CommentLineTo."Table Name" := CommentLineTo."Table Name"::Budget;
          CommentLineTo."Record ID" := RecRef.RECORDID();
          CommentLineTo."Line No." := LineNo;
          CommentLineTo.Date := CommentLineFrom.Date;
          CommentLineTo.Code := CommentLineFrom.Code;
          CommentLineTo.Comment := CommentLineFrom.Comment;
          CommentLineTo."Comment Code" := CommentLineFrom."Comment Code";
          CommentLineTo."Created by" := CommentLineFrom."Created by";
          CommentLineTo."Time Created" := CommentLineFrom."Time Created";
          CommentLineTo."Line Break" := CommentLineFrom."Line Break";
          CommentLineTo.INSERT(FALSE);

          LineNo += 10000;
        UNTIL CommentLineFrom.NEXT = 0;
      END;

      CommentLinesTransfered := TRUE;
    END;

    PROCEDURE CopyCommentToTenderElement@1100525019(iEstimate@1100525001 : Code[20];iElement@1100525002 : Code[20];iProject@1100525003 : Code[20];iCustomer@1100525005 : Code[20];iExtensionContract@1100525006 : Code[20]);
    VAR
      CommentLineFrom@1100529803 : Record 11125684;
      TenderParagraphTextBudget@1100529804 : Record 11012269;
      TenderParagraphTextInvoice@1100525000 : Record 11012475;
      LineNoBudget@1100529802 : Integer;
      LineNoInvoice@1100525004 : Integer;
    BEGIN
      //db, 24-05-16: DP01086 (comment line to Budget Text of Tender Paragraph)
      //db, 29-12-17: C041294 (comment line to Invoice Text of Tender Paragraph)
      IF NOT TransferCommentLines THEN
        EXIT;

      CommentLineFrom.RESET;
      CommentLineFrom.SETRANGE("Table No.", DATABASE::"Estimate Paragraph RAW");
      CommentLineFrom.SETRANGE("Estimate No.", iEstimate);
      CommentLineFrom.SETRANGE("Tender Paragraph No.", iElement);
      CommentLineFrom.SETRANGE("Estimate Line No.", 0);
      IF CommentLineFrom.FINDSET THEN BEGIN
        TenderParagraphTextInvoice.RESET;
        TenderParagraphTextInvoice.SETRANGE("Project No.", iProject);
        TenderParagraphTextInvoice.SETRANGE(Principal, iCustomer);
        TenderParagraphTextInvoice.SETRANGE("Contract No.", iExtensionContract);
        TenderParagraphTextInvoice.SETRANGE("Tender Paragraph", iElement);
        IF TenderParagraphTextInvoice.FINDLAST THEN
          LineNoInvoice := TenderParagraphTextInvoice."Text Line No." + 10000
        ELSE
          LineNoInvoice := 10000;
        //
        TenderParagraphTextBudget.RESET;
        TenderParagraphTextBudget.SETRANGE("Source Type", TenderParagraphTextBudget."Source Type"::comment);
        TenderParagraphTextBudget.SETRANGE("Project No.", iProject);
        TenderParagraphTextBudget.SETRANGE("Tender Paragraph", iElement);
        IF TenderParagraphTextBudget.FINDLAST THEN
          LineNoBudget := TenderParagraphTextBudget."Text Line No." + 10000
        ELSE
          LineNoBudget := 10000;
        //
        REPEAT
          TenderParagraphTextInvoice.INIT;
          TenderParagraphTextInvoice."Project No." := iProject;
          TenderParagraphTextInvoice.Principal := iCustomer;
          TenderParagraphTextInvoice."Contract No." := iExtensionContract;
          TenderParagraphTextInvoice."Tender Paragraph" := iElement;
          TenderParagraphTextInvoice."Text Line No." := LineNoInvoice;
          TenderParagraphTextInvoice.Text := CommentLineFrom.Comment;
          TenderParagraphTextInvoice."Line Break" := CommentLineFrom."Line Break";
          TenderParagraphTextInvoice.INSERT;
          LineNoInvoice += 10000;
          //
          TenderParagraphTextBudget.INIT;
          TenderParagraphTextBudget."Project No." := iProject;
          TenderParagraphTextBudget."Tender Paragraph" := iElement;
          TenderParagraphTextBudget."Source Type" := TenderParagraphTextBudget."Source Type"::comment;
          TenderParagraphTextBudget."Text Line No." := LineNoBudget;
          TenderParagraphTextBudget.Date := CommentLineFrom.Date;
          TenderParagraphTextBudget.Code := CommentLineFrom.Code;
          TenderParagraphTextBudget.Text := CommentLineFrom.Comment;
          TenderParagraphTextBudget."Comment Code" := CommentLineFrom."Comment Code";
          TenderParagraphTextBudget."Created by" := CommentLineFrom."Created by";
          TenderParagraphTextBudget."Time Created" := CommentLineFrom."Time Created";
          TenderParagraphTextBudget."Line Break" := CommentLineFrom."Line Break";
          TenderParagraphTextBudget.INSERT;
          LineNoBudget += 10000;
        UNTIL CommentLineFrom.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetSHActive@1100529500() : Boolean;
    BEGIN
      IF (NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(QASetup)) THEN
        EXIT(FALSE);

      QASetup.GET;
      EXIT(QASetup."SH Active");
    END;

    PROCEDURE TestSOBudgetLinesExist@1100525022() : Boolean;
    VAR
      ServiceOrderBudgetLine@1100525001 : Record 11012875;
      FoundServiceOrderNo@1100525002 : Code[20];
      BudgetLinesExist@1100525000 : Boolean;
    BEGIN
      IF TmpServOrderRec.FINDSET THEN
        REPEAT
          ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
          ServiceOrderBudgetLine.SETRANGE("Service Order No.", TmpServOrderRec."No.");
          BudgetLinesExist := NOT ServiceOrderBudgetLine.ISEMPTY;
          FoundServiceOrderNo := TmpServOrderRec."No.";
        UNTIL BudgetLinesExist OR (TmpServOrderRec.NEXT = 0);

      IF BudgetLinesExist THEN
        IF NOT CONFIRM(Text016, FALSE, FoundServiceOrderNo) THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE UpdateServOrderAmount@1100409001();
    BEGIN
      IF ServOrderRec."Settlement Method" = ServOrderRec."Settlement Method"::"Fixed Price" THEN BEGIN
        IF OrderAmount <> 0 THEN
          ServOrderRec.VALIDATE("Order Amount (LCY)", OrderAmount);
        IF InstScheme <> '' THEN
          ServOrderRec.VALIDATE("Installment Scheme", InstScheme);
      END;
    END;

    PROCEDURE UpdateServOrderIndication@1100409002();
    BEGIN
      IF OrderKind <> '' THEN
        ServOrderRec.VALIDATE("Order Kind", OrderKind);
      IF OrderType <> '' THEN
        ServOrderRec.VALIDATE("Order Type", OrderType);
    END;

    PROCEDURE GenerateProjRespPerson@1100528901(EstNo@1100525000 : Code[20];ProjectNo@1100525001 : Code[20]);
    VAR
      ProjRespPersonRec@1100525003 : Record 11012040;
      EstRespPersonRec@1100525002 : Record 11012159;
      LastLine@1100525004 : Integer;
    BEGIN
      ProjRespPersonRec.SETRANGE("Project No.", ProjectNo);
      IF ProjRespPersonRec.FINDLAST THEN
        LastLine :=  ProjRespPersonRec."Line No.";

      EstRespPersonRec.SETRANGE("Estimate No.", EstNo);
      IF EstRespPersonRec.FINDSET THEN BEGIN
        REPEAT
          ProjRespPersonRec.SETRANGE("Project No.", ProjectNo);
          ProjRespPersonRec.SETRANGE(Responsibility, EstRespPersonRec.Responsibility);
          ProjRespPersonRec.DELETEALL(TRUE);

          ProjRespPersonRec.INIT;
          ProjRespPersonRec."Project No." := ProjectNo;
          ProjRespPersonRec."Line No." := LastLine + 10000;
          LastLine := ProjRespPersonRec."Line No.";
          ProjRespPersonRec.Responsibility := EstRespPersonRec.Responsibility;
          ProjRespPersonRec."Employee No." := EstRespPersonRec."Employee No.";
          ProjRespPersonRec.INSERT(TRUE);
        UNTIL EstRespPersonRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateObjectModification@1100528602(VAR CreatedObjectModification@1100528600 : Record 11071700);
    BEGIN
      CreatedObjectModification.VALIDATE("Customer No.", EstRec."Customer No.");
      CreatedObjectModification.VALIDATE(Description, EstRec.Description);
      CreatedObjectModification.VALIDATE(Discipline, EstRec.Discipline);
      CreatedObjectModification.VALIDATE("Order Kind", OrderKind);
      CreatedObjectModification.INSERT(TRUE);

      IF NOT TmpObjectModification.GET(CreatedObjectModification."No.") THEN BEGIN
        TmpObjectModification."No." := CreatedObjectModification."No.";
        TmpObjectModification.INSERT;
      END;
    END;

    LOCAL PROCEDURE UpdateModificationFromEstimate@1100528600(CostType@1100528600 : Integer);
    VAR
      MaintenanceSchemeVersion@1100528601 : Record 11071743;
      MaintSchemeVersionLine@1100528602 : Record 11071744;
      LineNo@1100528603 : Integer;
    BEGIN
      IF NOT MaintenanceSchemeVersion.GET(MaintenanceSchemeVersion."Line Type"::Modification, ObjectModification."No.", '', TODAY) THEN BEGIN
        MaintenanceSchemeVersion."Line Type" := MaintenanceSchemeVersion."Line Type"::Modification;
        MaintenanceSchemeVersion.Code := ObjectModification."No.";
        MaintenanceSchemeVersion."Belongs to Scheme" := '';
        MaintenanceSchemeVersion."Index Date" := TODAY;
        MaintenanceSchemeVersion.INSERT(TRUE);
      END;

      MaintSchemeVersionLine.SETRANGE("Line Type", MaintenanceSchemeVersion."Line Type");
      MaintSchemeVersionLine.SETRANGE("Type Code", MaintenanceSchemeVersion.Code);
      MaintSchemeVersionLine.SETRANGE("Belongs to Scheme", '');
      MaintSchemeVersionLine.SETRANGE("Index Date", MaintenanceSchemeVersion."Index Date");
      IF MaintSchemeVersionLine.FINDLAST THEN
        LineNo := MaintSchemeVersionLine."Line No.";
      LineNo += 10000;

      MaintSchemeVersionLine."Line Type" := MaintenanceSchemeVersion."Line Type";
      MaintSchemeVersionLine."Type Code" := MaintenanceSchemeVersion.Code;
      MaintSchemeVersionLine."Index Date" := MaintenanceSchemeVersion."Index Date";
      MaintSchemeVersionLine."Line No." := LineNo;
      MaintSchemeVersionLine.INSERT(TRUE);

      MaintSchemeVersionLine."Item No." := HelpRec."Item No.";
      MaintSchemeVersionLine.Manufacturer := HelpRec.Manufacturer;
      MaintSchemeVersionLine."Basic Item" := HelpRec."Basic Item";
      MaintSchemeVersionLine."Vendor (Trade Item)" := HelpRec."Vendor (Trade Item)";
      MaintSchemeVersionLine."Trade Item" := HelpRec."Trade Item";
      MaintSchemeVersionLine."Gross Price" := HelpRec."Gross Price";
      MaintSchemeVersionLine."Unit of Measure" := HelpRec."Unit of Measure";

      MaintSchemeVersionLine.Description := COPYSTR(HelpRec.Description, 1, MAXSTRLEN(MaintSchemeVersionLine.Description));
      MaintSchemeVersionLine.Quantity := HelpRec.Quantity;
      MaintSchemeVersionLine."Cost Object" := HelpRec."Cost Object";
      MaintSchemeVersionLine."Cost Component" := HelpRec."Cost Component";
      MaintSchemeVersionLine."Price Agreement" := HelpRec."Price Agreement";

      CASE CostType OF
        1:BEGIN
            MaintSchemeVersionLine."Cost Type" := MaintSchemeVersionLine."Cost Type"::Labor;
            IF HelpRec."Cost Object Labor" = '' THEN
              MaintSchemeVersionLine."Cost Object" := EstSetup."Absence Value Labor"
            ELSE
              MaintSchemeVersionLine."Cost Object" := HelpRec."Cost Object Labor";
            ConvertRateType(HelpRec."Estimate No.", HelpRec."Rate Code", HelpRec.Norm, HelpRec.Rate);
            MaintSchemeVersionLine.Norm := HelpRec.Norm;
            MaintSchemeVersionLine.Rate := HelpRec.Rate;
            IF ValidateRateCode THEN
              MaintSchemeVersionLine.VALIDATE("Rate Code", HelpRec."Rate Code");
          END;
        2:BEGIN
            MaintSchemeVersionLine."Cost Type" := MaintSchemeVersionLine."Cost Type"::Material;
            IF HelpRec."Cost Object Material" = '' THEN
              MaintSchemeVersionLine."Cost Object" := EstSetup."Absence Value Material"
            ELSE
              MaintSchemeVersionLine."Cost Object" := HelpRec."Cost Object Material";
            MaintSchemeVersionLine."Cost Price" := HelpRec."Material Price";
            MaintSchemeVersionLine."Gross Price" := HelpRec."Gross Price";
            MaintSchemeVersionLine."Purchase Discount %" := HelpRec."Discount %";
            MaintSchemeVersionLine."Item No." := HelpRec."Item No.";
            MaintSchemeVersionLine.Manufacturer := HelpRec.Manufacturer;
            MaintSchemeVersionLine."Basic Item" := HelpRec."Basic Item";
            MaintSchemeVersionLine."Vendor (Trade Item)" := HelpRec."Vendor (Trade Item)";
            MaintSchemeVersionLine."Trade Item" := HelpRec."Trade Item";
          END;
        3:BEGIN
            MaintSchemeVersionLine."Cost Type" := MaintSchemeVersionLine."Cost Type"::Subcontracting;
            IF HelpRec."Cost Object Subcontracting" = '' THEN
              MaintSchemeVersionLine."Cost Object" := EstSetup."Absence Value Subcontracting"
            ELSE
              MaintSchemeVersionLine."Cost Object" := HelpRec."Cost Object Subcontracting";
            MaintSchemeVersionLine."Cost Price" := HelpRec."Subcontracting Price";
          END;
        4:BEGIN
            MaintSchemeVersionLine."Cost Type" := MaintSchemeVersionLine."Cost Type"::Plant;
            IF HelpRec."Cost Object Plant" = '' THEN
              MaintSchemeVersionLine."Cost Object" := EstSetup."Absence Value Plant"
            ELSE
              MaintSchemeVersionLine."Cost Object" := HelpRec."Cost Object Plant";
            MaintSchemeVersionLine."Cost Price" := HelpRec."Plant Price";
          END;
        5:BEGIN
            MaintSchemeVersionLine."Cost Type" := MaintSchemeVersionLine."Cost Type"::Sundry;
            IF HelpRec."Cost Object Sundry" = '' THEN
              MaintSchemeVersionLine."Cost Object" := EstSetup."Absence Value Sundry Cost"
            ELSE
              MaintSchemeVersionLine."Cost Object" := HelpRec."Cost Object Sundry";
            MaintSchemeVersionLine."Cost Price" := HelpRec."Sundry Cost";
          END;
      END;
      MaintSchemeVersionLine.CalcTotals;
      MaintSchemeVersionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE TestObjectModificationLinesExists@1100528601() : Boolean;
    VAR
      MaintSchemeVersionLine@1100528602 : Record 11071744;
      ObjectModificationLinesExist@1100528600 : Boolean;
      FoundObjectModificationNo@1100528601 : Code[10];
    BEGIN
      IF TmpObjectModification.FINDSET THEN
        REPEAT
          MaintSchemeVersionLine.SETRANGE("Line Type", MaintSchemeVersionLine."Line Type"::Modification);
          MaintSchemeVersionLine.SETRANGE("Type Code", TmpObjectModification."No.");
          MaintSchemeVersionLine.SETRANGE("Belongs to Scheme", '');
          MaintSchemeVersionLine.SETRANGE("Index Date", TODAY);
          ObjectModificationLinesExist := NOT MaintSchemeVersionLine.ISEMPTY;
          FoundObjectModificationNo := TmpObjectModification."No.";
        UNTIL ObjectModificationLinesExist OR (TmpObjectModification.NEXT = 0);

      IF ObjectModificationLinesExist THEN
        IF NOT CONFIRM(Text017, FALSE, FoundObjectModificationNo) THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FillTmpObjectModification@1100528603();
    BEGIN
      IF HelpRec."Object Modification No." = '' THEN EXIT;

      IF NOT TmpObjectModification.GET(HelpRec."Object Modification No.") THEN BEGIN
        TmpObjectModification.INIT;
        TmpObjectModification."No." := HelpRec."Object Modification No.";
        TmpObjectModification.INSERT;
      END;
    END;

    LOCAL PROCEDURE CheckRelationSubEstObjectModification@1100528604();
    BEGIN
      //not implemented for RAW
    END;

    LOCAL PROCEDURE CheckElementMandatory@1100528501(iLevel@1100528500 : Integer);
    BEGIN
      //C052902
      IF HelpRec."Project No." = '' THEN EXIT;  //db, 15-03-19

      IF HelpRec."Project Element" = '' THEN BEGIN
        ProjRec.GET(HelpRec."Project No.");
        IF ProjRec."Posting Element Mandatory" THEN BEGIN
          CASE iLevel OF
            1: IF EstimateLineRAW.Amount <> 0 THEN EstimateLineRAW.TESTFIELD(Element);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckNegativeAmount@1100528903(VAR TotalPrice@1100528900 : Decimal;VAR FactorPrice@1100528901 : Decimal);
    BEGIN
      //C055850
      IF TotalPrice < 0 THEN BEGIN
        FactorPrice := -1;
        TotalPrice := ABS(TotalPrice);
      END ELSE BEGIN
        FactorPrice := 1;
      END;
    END;

    BEGIN
    {
      DP01585:
      - split common, project and service options;
      - changed interface several functions conform codeunit 11012228
      - activate functions for service (order/modification)
    }
    END.
  }
}

