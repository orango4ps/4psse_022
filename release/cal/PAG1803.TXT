OBJECT Page 1803 Assisted Company Setup Wizard
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Company Setup;
               NOR=Selskapsoppsett;
               SVE=F”retagsinst„llning];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table8627;
    PageType=NavigatePage;
    SourceTableTemporary=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Step 4,Step 5;
                                NOR=Ny,Prosess,Rapport,Trinn 4,Trinn 5;
                                SVE=Ny,Process,Rapport,Steg 4,Steg 5];
    ShowFilter=No;
    OnInit=BEGIN
             InitializeRecord;
             LoadTopBanners;
           END;

    OnOpenPage=BEGIN
                 ResetWizardControls;
                 ShowIntroStep;
                 TypeSelectionEnabled := LoadConfigTypes AND NOT PackageImported;
               END;

    OnAfterGetRecord=BEGIN
                       LogoPositionOnDocumentsShown := Picture.HASVALUE;
                     END;

    OnQueryClosePage=VAR
                       AssistedSetup@1000 : Record 1803;
                     BEGIN
                       IF CloseAction = ACTION::OK THEN
                         IF AssistedSetup.GetStatus(PAGE::"Assisted Company Setup Wizard") = AssistedSetup.Status::"Not Completed" THEN
                           IF NOT CONFIRM(NotSetUpQst,FALSE) THEN
                             ERROR('');
                     END;

    ActionList=ACTIONS
    {
      { 4       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 3       ;1   ;Action    ;
                      Name=ActionBack;
                      CaptionML=[ENU=Back;
                                 NOR=Tilbake;
                                 SVE=Bak†t];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=BackEnabled;
                      InFooterBar=Yes;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 NextStep(TRUE);
                               END;
                                }
      { 2       ;1   ;Action    ;
                      Name=ActionNext;
                      CaptionML=[ENU=Next;
                                 NOR=Neste;
                                 SVE=N„sta];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NextEnabled;
                      InFooterBar=Yes;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 IF (Step = Step::"Select Type") AND NOT (TypeStandard OR TypeEvaluation) THEN
                                   IF NOT CONFIRM(NoSetupTypeSelectedQst,FALSE) THEN
                                     ERROR('');
                                 NextStep(FALSE);
                               END;
                                }
      { 1       ;1   ;Action    ;
                      Name=ActionFinish;
                      CaptionML=[ENU=Finish;
                                 NOR=Fullf›r;
                                 SVE=Slutf”r];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=FinishEnabled;
                      InFooterBar=Yes;
                      Image=Approve;
                      OnAction=VAR
                                 AssistedSetup@1001 : Record 1803;
                                 AssistedCompanySetup@1000 : Codeunit 1800;
                                 ErrorText@1002 : Text;
                               BEGIN
                                 AssistedCompanySetup.WaitForPackageImportToComplete;
                                 BankAccount.TRANSFERFIELDS(TempBankAccount,TRUE);
                                 AssistedCompanySetup.ApplyUserInput(Rec,BankAccount,AccountingPeriodStartDate,TypeEvaluation);

                                 UpdateCompanyDisplayNameIfNameChanged;

                                 AssistedSetup.SetStatus(PAGE::"Assisted Company Setup Wizard",AssistedSetup.Status::Completed);
                                 IF (BankAccount."No." <> '') AND (NOT TempOnlineBankAccLink.ISEMPTY) THEN
                                   IF NOT TryLinkBankAccount THEN
                                     ErrorText := GETLASTERRORTEXT;
                                 CurrPage.CLOSE;

                                 IF ErrorText <> '' THEN BEGIN
                                   MESSAGE(STRSUBSTNO(BankAccountLinkingFailedMsg,ErrorText));
                                   PAGE.RUN(PAGE::"Bank Account List");
                                 END;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 96  ;1   ;Group     ;
                Visible=TopBannerVisible AND NOT DoneVisible;
                Editable=FALSE;
                GroupType=Group }

    { 97  ;2   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaResourcesStandard."Media Reference";
                Editable=FALSE;
                ShowCaption=No }

    { 98  ;1   ;Group     ;
                Visible=TopBannerVisible AND DoneVisible;
                Editable=FALSE;
                GroupType=Group }

    { 99  ;2   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaResourcesDone."Media Reference";
                Editable=FALSE;
                ShowCaption=No }

    { 8   ;1   ;Group     ;
                Visible=IntroVisible;
                GroupType=Group }

    { 5   ;2   ;Group     ;
                CaptionML=[ENU=Welcome to Company Setup.;
                           NOR=Velkommen til selskapsoppsett.;
                           SVE=V„lkommen till F”retagsinst„llning.];
                GroupType=Group;
                InstructionalTextML=[ENU=To prepare Dynamics 365 Business Central for first use, you must specify some basic information about your company. This information is used on your external documents, such as sales invoices, and includes your company logo and bank information. You must also set up the fiscal year.;
                                     NOR=Hvis du vil klargj›re Dynamics 365ÿBusiness Central for f›rstegangsbruk, m† du angi grunnleggende informasjon om selskapet. Denne informasjonen brukes i dine eksterne dokumenter, for eksempel salgsfakturaer, og den inneholder selskapslogoen og bankinformasjonen. Du m† ogs† definere regnskaps†ret.;
                                     SVE=F”rbered Dynamics 365 Business Central f”r anv„ndning f”r f”rsta g†ngen genom att ange viss grundinformation om ditt f”retag. Denna information anv„nds p† dina externa dokument, t.ex. f”rs„ljningsfakturor, och omfattar f”retagets logotyp och bankuppgifter. Du m†ste „ven v„lja r„kenskaps†r.] }

    { 11  ;2   ;Group     ;
                CaptionML=[ENU=Let's go!;
                           NOR=La oss sette i gang!;
                           SVE=S„tt ig†ng!];
                GroupType=Group;
                InstructionalTextML=[ENU=Choose Next so you can specify basic company information.;
                                     NOR=Velg Neste slik at du kan angi generelle selskapsopplysninger.;
                                     SVE=V„lj N„sta s† att du kan ange grundl„ggande f”retagsinformation.] }

    { 18  ;1   ;Group     ;
                Visible=SelectTypeVisible AND TypeSelectionEnabled;
                GroupType=Group }

    { 22  ;2   ;Group     ;
                CaptionML=[ENU=Standard Setup;
                           NOR=Standardoppsett;
                           SVE=Standardinst„llning];
                Visible=StandardVisible;
                GroupType=Group;
                InstructionalTextML=[ENU=The company will be ready to use when Setup has completed.;
                                     NOR=Selskapet er klart til bruk n†r installasjonen er fullf›rt.;
                                     SVE=F”retaget „r klart att anv„nda n„r inst„llningen har utf”rts.] }

    { 19  ;3   ;Field     ;
                Name=Standard;
                CaptionML=[ENU=Set up as Standard;
                           NOR=Installer som standard;
                           SVE=St„ll in som standard];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TypeStandard;
                OnValidate=BEGIN
                             IF TypeStandard THEN
                               TypeEvaluation := FALSE;
                             CalcCompanyData;
                           END;
                            }

    { 23  ;2   ;Group     ;
                CaptionML=[ENU=Evaluation Setup;
                           NOR=Evalueringsinstallasjon;
                           SVE=Utv„rderingsinst„llning];
                Visible=EvaluationVisible;
                GroupType=Group;
                InstructionalTextML=[ENU=The company will be set up in demonstration mode for exploring and testing.;
                                     NOR=Selskapet konfigureres i demonstrasjonsmodus for utforsking og testing.;
                                     SVE=F”retaget st„lls in i demonstrationsl„ge f”r utforskning och testning.] }

    { 20  ;3   ;Field     ;
                Name=Evaluation;
                CaptionML=[ENU=Set up as Evaluation;
                           NOR=Installer som evaluering;
                           SVE=St„ll in som utv„rdering];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TypeEvaluation;
                OnValidate=BEGIN
                             IF TypeEvaluation THEN
                               TypeStandard := FALSE;
                             CalcCompanyData;
                           END;
                            }

    { 17  ;2   ;Group     ;
                CaptionML=[ENU=Important;
                           NOR=Viktig!;
                           SVE=Viktigt!];
                Visible=TypeStandard OR TypeEvaluation;
                GroupType=Group;
                InstructionalTextML=[ENU=You cannot change your choice of setup after you choose Next.;
                                     NOR=Du kan ikke endre installasjonsvalget etter at du har valgt Neste.;
                                     SVE=Du kan inte „ndra inst„llningarna efter att du valt N„sta.] }

    { 56  ;1   ;Group     ;
                Visible=CompanyDetailsVisible;
                GroupType=Group }

    { 12  ;2   ;Group     ;
                CaptionML=[ENU=Specify your company's address information and logo.;
                           NOR=Angi selskapsadresse og logo.;
                           SVE=Ange f”retagets adress och logotyp.];
                GroupType=Group;
                InstructionalTextML=[ENU=This is used in invoices and other documents where general information about your company is printed.;
                                     NOR=Denne brukes ved fakturering og i andre dokumenter der generell informasjon om selskapet skrives ut.;
                                     SVE=Den anv„nds i fakturor och andra dokument d„r allm„n information om f”retaget skrivs ut.] }

    { 55  ;3   ;Field     ;
                CaptionML=[ENU=Company Name;
                           NOR=Selskapsnavn;
                           SVE=F”retagsnamn];
                ApplicationArea=#Basic,#Suite;
                NotBlank=Yes;
                SourceExpr=Name;
                ShowMandatory=TRUE }

    { 54  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Address }

    { 53  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Address 2";
                Visible=FALSE }

    { 52  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Post Code" }

    { 51  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=City }

    { 50  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Country/Region Code";
                TableRelation=Country/Region.Code }

    { 48  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="VAT Registration No.";
                Visible=FALSE }

    { 47  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                NotBlank=Yes;
                SourceExpr="Industrial Classification";
                Visible=FALSE;
                ShowMandatory=TRUE }

    { 10  ;3   ;Field     ;
                CaptionML=[ENU=Company Logo;
                           NOR=Selskapslogo;
                           SVE=F”retagslogotyp];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Picture;
                OnValidate=BEGIN
                             LogoPositionOnDocumentsShown := Picture.HASVALUE;
                             IF LogoPositionOnDocumentsShown THEN BEGIN
                               IF "Logo Position on Documents" = "Logo Position on Documents"::"No Logo" THEN
                                 "Logo Position on Documents" := "Logo Position on Documents"::Right;
                             END ELSE
                               "Logo Position on Documents" := "Logo Position on Documents"::"No Logo";
                             CurrPage.UPDATE(TRUE);
                           END;
                            }

    { 45  ;1   ;Group     ;
                Visible=CommunicationDetailsVisible;
                GroupType=Group }

    { 13  ;2   ;Group     ;
                CaptionML=[ENU=Specify the contact details for your company.;
                           NOR=Angi kontaktinformasjonen for selskapet.;
                           SVE=Ange f”retagets kontaktinformation.];
                GroupType=Group;
                InstructionalTextML=[ENU=This is used in invoices and other documents where general information about your company is printed.;
                                     NOR=Denne brukes ved fakturering og i andre dokumenter der generell informasjon om selskapet skrives ut.;
                                     SVE=Den anv„nds i fakturor och andra dokument d„r allm„n information om f”retaget skrivs ut.] }

    { 44  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Phone No.";
                OnValidate=VAR
                             TypeHelper@1000 : Codeunit 10;
                           BEGIN
                             IF "Phone No." = '' THEN
                               EXIT;

                             IF NOT TypeHelper.IsPhoneNumber("Phone No.") THEN
                               ERROR(InvalidPhoneNumberErr)
                           END;
                            }

    { 42  ;3   ;Field     ;
                ExtendedDatatype=E-Mail;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="E-Mail";
                OnValidate=VAR
                             MailManagement@1000 : Codeunit 9520;
                           BEGIN
                             IF "E-Mail" = '' THEN
                               EXIT;

                             MailManagement.CheckValidEmailAddress("E-Mail");
                           END;
                            }

    { 41  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Home Page";
                OnValidate=VAR
                             WebRequestHelper@1000 : Codeunit 1299;
                           BEGIN
                             IF "Home Page" = '' THEN
                               EXIT;

                             WebRequestHelper.IsValidUriWithoutProtocol("Home Page");
                           END;
                            }

    { 29  ;1   ;Group     ;
                Visible=BankStatementConfirmationVisible;
                GroupType=Group }

    { 25  ;2   ;Group     ;
                CaptionML=[ENU=Bank Feed Service;
                           NOR=Bankfeedservice;
                           SVE=Tj„nst f”r bankfeed];
                GroupType=Group;
                InstructionalTextML=[ENU=You can use a bank feeds service to import electronic bank statements from your bank to quickly process payments.;
                                     NOR=Du kan bruke en bankfeedservice til † importere elektroniske bankkontoutdrag fra banken for raskt † behandle betalinger.;
                                     SVE=Du kan anv„nda en tj„nst f”r bankfeed om du vill importera elektroniska bankutdrag fr†n din bank och snabbt behandla betalningar.] }

    { 46  ;3   ;Field     ;
                CaptionML=[ENU=Use a bank feed service;
                           NOR=Bruk en bankfeedservice;
                           SVE=Anv„nd en tj„nst f”r bankfeed];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=UseBankStatementFeed }

    { 26  ;2   ;Group     ;
                CaptionML=[ENU=NOTE:;
                           NOR=MERK:;
                           SVE=Obs!];
                Visible=UseBankStatementFeed;
                GroupType=Group;
                InstructionalTextML=[ENU=When you choose Next, you accept the terms of use for the bank feed service.;
                                     NOR=N†r du velger Neste, godtar du vilk†rene for bruk for bankfeedservicen.;
                                     SVE=N„r du v„ljer N„sta accepterar du anv„ndarvillkoren f”r tj„nsten f”r bankfeed.] }

    { 28  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TermsOfUseLbl;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              HYPERLINK(TermsOfUseUrlTxt);
                            END;

                ShowCaption=No }

    { 32  ;1   ;Group     ;
                CaptionML=[ENU=Select bank account.;
                           NOR=Velg bankkonto.;
                           SVE=V„lj bankkonto.];
                Visible=SelectBankAccountVisible;
                GroupType=Group }

    { 24  ;2   ;Part      ;
                Name=OnlineBanckAccountLinkPagePart;
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page270;
                PartType=Page }

    { 37  ;1   ;Group     ;
                Visible=PaymentDetailsVisible;
                GroupType=Group }

    { 14  ;2   ;Group     ;
                CaptionML=[ENU=Specify your company's bank information.;
                           NOR=Angi bankinformasjon for selskapet.;
                           SVE=Ange f”retagets bankuppgifter.];
                GroupType=Group;
                InstructionalTextML=[ENU=This information is included on documents that you send to customer and vendors to inform about payments to your bank account.;
                                     NOR=Denne informasjonen inng†r i dokumenter som du sender til kunder og leverand›rer for † informere om betalinger til bankkontoen din.;
                                     SVE=Den h„r information inkluderas i dokument som du skickar till kunder och leverant”rer f”r att informera om betalningar till ditt bankkonto.] }

    { 36  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bank Name" }

    { 35  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bank Branch No." }

    { 34  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bank Account No.";
                OnValidate=BEGIN
                             ShowBankAccountCreationWarning := NOT ValidateBankAccountNotEmpty;
                           END;
                            }

    { 31  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="SWIFT Code" }

    { 27  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=IBAN }

    { 33  ;2   ;Group     ;
                CaptionML=[ENU=" ";
                           NOR=" ";
                           SVE=" "];
                Visible=ShowBankAccountCreationWarning;
                GroupType=Group;
                InstructionalTextML=[ENU=To create a bank account that is linked to the related online bank account, you must specify the bank account information above.;
                                     NOR=Hvis du vil opprette en bankkontoen som er knyttet til den relaterte nettbankkontoen, m† du angi bankkontoinformasjonen ovenfor.;
                                     SVE=Om du vill skapa ett bankkonto som „r l„nkat till det relaterade bankkontot online, m†ste du ange bankkontoinformationen ovan.] }

    { 6   ;1   ;Group     ;
                Visible=AccountingPeriodVisible;
                GroupType=Group }

    { 15  ;2   ;Group     ;
                CaptionML=[ENU=Specify the start date of the company's fiscal year.;
                           NOR=Angi startdatoen for selskapets regnskaps†r.;
                           SVE=Ange startdatumet f”r f”retagets r„kenskaps†r.];
                GroupType=Group;
                InstructionalTextML=[ENU=Specify the start of the company's fiscal year, or select the Skip for Now field if you want to define accounting periods later.;
                                     NOR=Angi start for selskapets regnskaps†r, eller merk av for feltet Hopp over for n† hvis du vil definere regnskapsperioder senere.;
                                     SVE=Ange b”rjan p† f”retagets r„kenskaps†r eller markera f„ltet Hoppa ”ver nu om du vill definiera bokf”ringsperioderna senare.] }

    { 7   ;3   ;Field     ;
                CaptionML=[ENU=Fiscal Year Start Date;
                           NOR=Regnskaps†rets startdato;
                           SVE=Startdatum f”r r„kenskaps†r];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AccountingPeriodStartDate;
                Editable=NOT SkipAccountingPeriod;
                OnValidate=BEGIN
                             IF (NOT SkipAccountingPeriod) AND (AccountingPeriodStartDate = 0D) THEN
                               ERROR(AccountingPeriodStartDateBlankErr);
                             UserAccountingPeriodStartDate := AccountingPeriodStartDate;
                           END;

                ShowMandatory=TRUE }

    { 38  ;3   ;Field     ;
                Name=SkipAccountingPeriod;
                CaptionML=[ENU=Skip for Now;
                           NOR=Hopp over n†;
                           SVE=Hoppa ”ver nu];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SkipAccountingPeriod;
                OnValidate=BEGIN
                             IF SkipAccountingPeriod THEN
                               CLEAR(AccountingPeriodStartDate)
                             ELSE
                               AccountingPeriodStartDate := UserAccountingPeriodStartDate;
                           END;
                            }

    { 57  ;1   ;Group     ;
                Visible=CostingMethodVisible;
                GroupType=Group }

    { 58  ;2   ;Group     ;
                CaptionML=[ENU=Specify the costing method for your inventory valuation.;
                           NOR=Angi lagermetoden for lagerverdisettingen.;
                           SVE=Ange v„rderingsprincipen f”r lagerv„rderingen.];
                GroupType=Group }

    { 122 ;3   ;Group     ;
                GroupType=Group;
                InstructionalTextML=[ENU=The costing method works together with the posting date and sequence to determine how to record the cost flow.;
                                     NOR=Lagermetoden fungerer sammen med bokf›ringsdatoen og rekkef›lgen for † finne ut hvordan kostnadsflyten skal registreres.;
                                     SVE=V„rderingsprincipen fungerar tillsammans med bokf”ringsdatumet och sekvensen f”r att fastst„lla hur kostnadsfl”det ska registreras.] }

    { 123 ;4   ;Field     ;
                Name=Cost Method;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CostMethodeLbl;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              HYPERLINK(CostMethodUrlTxt);
                            END;

                ShowCaption=No }

    { 59  ;4   ;Field     ;
                Name=Costing Method;
                CaptionML=[ENU=Costing Method;
                           NOR=Lagermetode;
                           SVE=V„rderingsprincip];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=InventorySetup."Default Costing Method";
                OnValidate=VAR
                             ExistingInventorySetup@1000 : Record 313;
                           BEGIN
                             IF NOT ExistingInventorySetup.GET THEN BEGIN
                               InventorySetup."Automatic Cost Adjustment" := InventorySetup."Automatic Cost Adjustment"::Always;
                               InventorySetup."Automatic Cost Posting" := TRUE;
                             END;

                             IF InventorySetup."Default Costing Method" = InventorySetup."Default Costing Method"::Average THEN BEGIN
                               InventorySetup."Average Cost Period" := InventorySetup."Average Cost Period"::Day;
                               InventorySetup."Average Cost Calc. Type" := InventorySetup."Average Cost Calc. Type"::Item;
                             END;

                             IF NOT InventorySetup.MODIFY THEN
                               InventorySetup.INSERT;
                           END;

                ShowMandatory=TRUE }

    { 9   ;1   ;Group     ;
                Visible=DoneVisible;
                GroupType=Group }

    { 16  ;2   ;Group     ;
                CaptionML=[ENU=That's it!;
                           NOR=Det var det!;
                           SVE=Klart!];
                GroupType=Group;
                InstructionalTextML=[ENU=Choose Finish to prepare the application for first use. This will take a few moments.;
                                     NOR=Velg Fullf›r for † klargj›re programmet for f›rstegangsbruk. Dette kan ta en liten stund.;
                                     SVE=V„lj Slutf”r f”r att f”rbereda programmet innan du anv„nder det f”r f”rsta g†ngen. Det kan ta n†gra minuter.] }

    { 21  ;3   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=HelpLbl;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              HYPERLINK(HelpLinkTxt);
                            END;
                             }

  }
  CODE
  {
    VAR
      MediaRepositoryStandard@1040 : Record 9400;
      TempSavedBankAccount@1044 : TEMPORARY Record 270;
      TempBankAccount@1029 : TEMPORARY Record 270;
      BankAccount@1039 : Record 270;
      TempOnlineBankAccLink@1033 : TEMPORARY Record 777;
      MediaRepositoryDone@1041 : Record 9400;
      MediaResourcesStandard@1055 : Record 2000000182;
      MediaResourcesDone@1057 : Record 2000000182;
      InventorySetup@1060 : Record 313;
      AssistedCompanySetup@1045 : Codeunit 1800;
      ClientTypeManagement@1014 : Codeunit 4030;
      AccountingPeriodStartDate@1000 : Date;
      UserAccountingPeriodStartDate@1021 : Date;
      CompanyData@1046 : 'Evaluation Data,Standard Data,None,Extended Data,Full No Data';
      TypeStandard@1018 : Boolean;
      TypeEvaluation@1019 : Boolean;
      Step@1012 : 'Intro,Sync,Select Type,Company Details,Communication Details,BankStatementFeed,SelectBankAccont,Payment Details,Accounting Period,Costing Method,Done';
      BackEnabled@1003 : Boolean;
      NextEnabled@1004 : Boolean;
      FinishEnabled@1005 : Boolean;
      TopBannerVisible@1042 : Boolean;
      IntroVisible@1006 : Boolean;
      SelectTypeVisible@1015 : Boolean;
      CompanyDetailsVisible@1007 : Boolean;
      CommunicationDetailsVisible@1008 : Boolean;
      PaymentDetailsVisible@1010 : Boolean;
      AccountingPeriodVisible@1009 : Boolean;
      CostingMethodVisible@1049 : Boolean;
      DoneVisible@1011 : Boolean;
      TypeSelectionEnabled@1026 : Boolean;
      StandardVisible@1023 : Boolean;
      EvaluationVisible@1024 : Boolean;
      SkipAccountingPeriod@1013 : Boolean;
      NotSetUpQst@1001 : TextConst 'ENU=The application has not been set up. Setup will continue the next time you start the program.\\Are you sure that you want to exit?;NOR=Programmet er ikke installert. Installasjonen vil fortsette neste gang du starter programmet.\\Er du sikker p† at du vil avslutte?;SVE=Programmet har inte konfigurerats. Konfigureringen forts„tter n„sta g†ng du startar programmet.\\Vill du avsluta?';
      HideBankStatementProvider@1028 : Boolean;
      NoSetupTypeSelectedQst@1020 : TextConst 'ENU=You have not selected any setup type. If you proceed, the application will not be fully functional, until you set it up manually.\\Do you want to continue?;NOR=Du har ikke valgt noen installasjonstype. Hvis du fortsetter, vil ikke programmet v‘re fullstendig funksjonelt f›r du konfigurerer det manuelt.\\Vil du fortsette?;SVE=Du har inte valt n†gon konfigureringstyp. Om du forts„tter kommer programmet inte att fungera fullt ut f”rr„n du konfigurerar det manuellt.\\Vill du forts„tta?';
      HelpLbl@1027 : TextConst 'ENU=Learn more about setting up your company;NOR=Finn ut mer om hvordan du konfigurerer selskapet;SVE=L„s mer om att konfigurera f”retaget';
      HelpLinkTxt@1022 : TextConst '@@@={Locked};ENU="http://go.microsoft.com/fwlink/?LinkId=746160";NOR="http://go.microsoft.com/fwlink/?LinkId=746160";SVE="http://go.microsoft.com/fwlink/?LinkId=746160"';
      BankStatementConfirmationVisible@1030 : Boolean;
      UseBankStatementFeed@1032 : Boolean;
      UseBankStatementFeedInitialized@1017 : Boolean;
      BankAccountInformationUpdated@1037 : Boolean;
      SelectBankAccountVisible@1038 : Boolean;
      TermsOfUseLbl@1031 : TextConst 'ENU=Envestnet Yodlee Terms of Use;NOR=Vilk†r for bruk for Envestnet Yodlee;SVE=Anv„ndarvillkor f”r Envestnet Yodlee';
      TermsOfUseUrlTxt@1025 : TextConst '@@@={Locked};ENU="https://go.microsoft.com/fwlink/?LinkId=746179";NOR="https://go.microsoft.com/fwlink/?LinkId=746179";SVE="https://go.microsoft.com/fwlink/?LinkId=746179"';
      LogoPositionOnDocumentsShown@1034 : Boolean;
      ShowBankAccountCreationWarning@1036 : Boolean;
      InvalidPhoneNumberErr@1002 : TextConst 'ENU=The phone number is invalid.;NOR=Telefonnummeret er ugyldig.;SVE=Telefonnumret „r ogiltigt.';
      CostMethodeLbl@1143 : TextConst 'ENU=Learn more;NOR=Finn ut mer;SVE=L„s mer';
      CostMethodUrlTxt@1145 : TextConst '@@@={Locked};ENU="https://go.microsoft.com/fwlink/?linkid=858295";NOR="https://go.microsoft.com/fwlink/?linkid=858295";SVE="https://go.microsoft.com/fwlink/?linkid=858295"';
      BankAccountLinkingFailedMsg@1016 : TextConst '@@@=%1 - an error message;ENU=Linking the company bank account failed with the following message:\''%1''\Link the company bank account from the Bank Accounts page.;NOR=Kobling av firmaets bankkonto mislyktes med f›lgende melding:\''%1''\Koble firmaets bankkonto fra siden Bankkonti.;SVE=Det gick inte att l„nka f”retagets bankkonto och f”ljande meddelande visas:\%1\L„nka f”retagets bankkonto fr†n sidan Bankkonton.';
      AccountingPeriodStartDateBlankErr@1035 : TextConst 'ENU=You have not specified a start date for the fiscal year. You must either specify a date in the Fiscal Year Start Date field or select the Skip for Now field.;NOR=Du har ikke angitt en startdato for regnskaps†ret. Du m† angi en dato i feltet Startdato for regnskaps†r, eller velg feltet Hopp over for n†.;SVE=Du har inte angett n†got startdatum f”r r„kenskaps†ret. Du m†ste ange ett datum i f„ltet Startdatum f”r r„kenskaps†r eller markera f„ltet Hoppa ”ver nu.';

    LOCAL PROCEDURE NextStep@3(Backwards@1000 : Boolean);
    BEGIN
      ResetWizardControls;

      IF Backwards THEN
        Step := Step - 1
      ELSE
        Step := Step + 1;

      CASE Step OF
        Step::Intro:
          ShowIntroStep;
        Step::Sync:
          ShowSyncStep(Backwards);
        Step::"Select Type":
          IF NOT TypeSelectionEnabled THEN
            NextStep(Backwards)
          ELSE
            ShowSelectTypeStep;
        Step::"Company Details":
          IF TypeEvaluation THEN BEGIN
            Step := Step::Done;
            ShowDoneStep;
          END ELSE
            ShowCompanyDetailsStep;
        Step::"Communication Details":
          ShowCommunicationDetailsStep;
        Step::BankStatementFeed:
          IF NOT ShowBankStatementFeedStep THEN
            NextStep(Backwards)
          ELSE
            ShowBankStatementFeedConfirmation;
        Step::SelectBankAccont:
          BEGIN
            IF NOT Backwards THEN
              ShowOnlineBankStatement;
            IF NOT ShowSelectBankAccountStep THEN
              NextStep(Backwards)
            ELSE
              ShowSelectBankAccount;
          END;
        Step::"Payment Details":
          BEGIN
            IF NOT Backwards THEN
              PopulateBankAccountInformation;
            ShowPaymentDetailsStep;
            ShowBankAccountCreationWarning := NOT ValidateBankAccountNotEmpty;
          END;
        Step::"Accounting Period":
          IF SkipAccountingPeriod THEN
            NextStep(Backwards)
          ELSE
            ShowAccountingPeriodStep;
        Step::"Costing Method":
          ShowCostingMethodStep;
        Step::Done:
          ShowDoneStep;
      END;
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE ShowIntroStep@1();
    BEGIN
      IntroVisible := TRUE;
      BackEnabled := FALSE;
    END;

    LOCAL PROCEDURE ShowSyncStep@22(Backwards@1000 : Boolean);
    BEGIN
      NextStep(Backwards);
    END;

    LOCAL PROCEDURE ShowSelectTypeStep@12();
    BEGIN
      SelectTypeVisible := TRUE;
    END;

    LOCAL PROCEDURE ShowCompanyDetailsStep@2();
    BEGIN
      CompanyDetailsVisible := TRUE;
      IF TypeSelectionEnabled THEN BEGIN
        StartConfigPackageImport;
        BackEnabled := FALSE;
      END;
    END;

    LOCAL PROCEDURE ShowCommunicationDetailsStep@4();
    BEGIN
      CommunicationDetailsVisible := TRUE;
    END;

    LOCAL PROCEDURE ShowPaymentDetailsStep@5();
    BEGIN
      PaymentDetailsVisible := TRUE;
    END;

    LOCAL PROCEDURE ShowOnlineBankStatement@19();
    VAR
      CompanyInformationMgt@1001 : Codeunit 1306;
    BEGIN
      IF CompanyInformationMgt.IsDemoCompany THEN
        EXIT;

      IF HideBankStatementProvider THEN
        EXIT;

      TempOnlineBankAccLink.RESET;
      TempOnlineBankAccLink.DELETEALL;

      IF NOT TempBankAccount.StatementProvidersExist THEN
        EXIT;

      IF UseBankStatementFeed THEN BEGIN
        TempBankAccount.SimpleLinkStatementProvider(TempOnlineBankAccLink);
        IF TempOnlineBankAccLink.FINDFIRST THEN
          IF NOT TempOnlineBankAccLink.ISEMPTY THEN BEGIN
            CurrPage.OnlineBanckAccountLinkPagePart.PAGE.SetRecs(TempOnlineBankAccLink);
            HideBankStatementProvider := TRUE;
          END;
      END ELSE BEGIN
        TempBankAccount.UnlinkStatementProvider;
        TempBankAccount.DisableStatementProviders;
      END;
    END;

    LOCAL PROCEDURE ShowAccountingPeriodStep@7();
    BEGIN
      AccountingPeriodVisible := TRUE;
    END;

    LOCAL PROCEDURE ShowCostingMethodStep@23();
    BEGIN
      IF InventorySetup.GET THEN;
      CostingMethodVisible := TRUE;
    END;

    LOCAL PROCEDURE ShowDoneStep@6();
    BEGIN
      DoneVisible := TRUE;
      NextEnabled := FALSE;
      FinishEnabled := TRUE;
      IF TypeEvaluation THEN BEGIN
        StartConfigPackageImport;
        BackEnabled := FALSE;
      END;
    END;

    LOCAL PROCEDURE ResetWizardControls@10();
    BEGIN
      CompanyData := CompanyData::None;

      // Buttons
      BackEnabled := TRUE;
      NextEnabled := TRUE;
      FinishEnabled := FALSE;

      // Tabs
      IntroVisible := FALSE;
      SelectTypeVisible := FALSE;
      CompanyDetailsVisible := FALSE;
      CommunicationDetailsVisible := FALSE;
      BankStatementConfirmationVisible := FALSE;
      SelectBankAccountVisible := FALSE;
      PaymentDetailsVisible := FALSE;
      AccountingPeriodVisible := FALSE;
      CostingMethodVisible := FALSE;
      DoneVisible := FALSE;
    END;

    LOCAL PROCEDURE InitializeRecord@8();
    VAR
      CompanyInformation@1001 : Record 79;
      AccountingPeriod@1000 : Record 50;
    BEGIN
      INIT;

      IF CompanyInformation.GET THEN BEGIN
        TRANSFERFIELDS(CompanyInformation);
        IF Name = '' THEN
          Name := COMPANYNAME;
      END ELSE
        Name := COMPANYNAME;

      SkipAccountingPeriod := NOT AccountingPeriod.ISEMPTY;
      IF NOT SkipAccountingPeriod THEN BEGIN
        AccountingPeriodStartDate := CALCDATE('<-CY>',TODAY);
        UserAccountingPeriodStartDate := AccountingPeriodStartDate;
      END;

      INSERT;
    END;

    LOCAL PROCEDURE CalcCompanyData@21();
    BEGIN
      CompanyData := CompanyData::None;
      IF TypeStandard THEN
        CompanyData := CompanyData::"Standard Data";
      IF TypeEvaluation THEN
        CompanyData := CompanyData::"Evaluation Data";
    END;

    LOCAL PROCEDURE StartConfigPackageImport@9();
    BEGIN
      IF NOT TypeSelectionEnabled THEN
        EXIT;
      IF CompanyData IN [CompanyData::None,CompanyData::"Full No Data"] THEN
        EXIT;
      IF AssistedCompanySetup.IsCompanySetupInProgress(COMPANYNAME) THEN
        EXIT;
      AssistedCompanySetup.FillCompanyData(COMPANYNAME,CompanyData);
    END;

    LOCAL PROCEDURE LoadConfigTypes@42() : Boolean;
    BEGIN
      StandardVisible :=
        AssistedCompanySetup.ExistsConfigurationPackageFile(CompanyData::"Standard Data");
      EvaluationVisible :=
        AssistedCompanySetup.ExistsConfigurationPackageFile(CompanyData::"Evaluation Data");
      EXIT(StandardVisible OR EvaluationVisible);
    END;

    LOCAL PROCEDURE PackageImported@11() : Boolean;
    VAR
      AssistedCompanySetupStatus@1000 : Record 1802;
    BEGIN
      AssistedCompanySetupStatus.GET(COMPANYNAME);
      EXIT(AssistedCompanySetupStatus."Package Imported" OR AssistedCompanySetupStatus."Import Failed");
    END;

    LOCAL PROCEDURE LoadTopBanners@40();
    BEGIN
      IF MediaRepositoryStandard.GET('AssistedSetup-NoText-400px.png',FORMAT(ClientTypeManagement.GetCurrentClientType)) AND
         MediaRepositoryDone.GET('AssistedSetupDone-NoText-400px.png',FORMAT(ClientTypeManagement.GetCurrentClientType))
      THEN
        IF MediaResourcesStandard.GET(MediaRepositoryStandard."Media Resources Ref") AND
           MediaResourcesDone.GET(MediaRepositoryDone."Media Resources Ref")
        THEN
          TopBannerVisible := MediaResourcesDone."Media Reference".HASVALUE;
    END;

    LOCAL PROCEDURE PopulateBankAccountInformation@14();
    BEGIN
      IF BankAccountInformationUpdated THEN
        IF TempOnlineBankAccLink.COUNT = 0 THEN BEGIN
          RestoreBankAccountInformation(TempSavedBankAccount);
          EXIT;
        END;

      IF TempOnlineBankAccLink.COUNT = 1 THEN
        TempOnlineBankAccLink.FINDFIRST
      ELSE
        CurrPage.OnlineBanckAccountLinkPagePart.PAGE.GETRECORD(TempOnlineBankAccLink);

      IF (TempBankAccount."Bank Account No." = TempOnlineBankAccLink."Bank Account No.") AND
         (TempBankAccount.Name = TempOnlineBankAccLink.Name)
      THEN
        EXIT;

      IF NOT IsBankAccountFormatValid(TempOnlineBankAccLink."Bank Account No.") THEN
        CLEAR(TempOnlineBankAccLink."Bank Account No.");

      IF NOT BankAccountInformationUpdated THEN
        StoreBankAccountInformation(TempSavedBankAccount);

      TempBankAccount.INIT;
      TempBankAccount.CreateNewAccount(TempOnlineBankAccLink);
      RestoreBankAccountInformation(TempBankAccount);
      BankAccountInformationUpdated := TRUE;
    END;

    LOCAL PROCEDURE StoreBankAccountInformation@25(VAR BufferBankAccount@1000 : Record 270);
    BEGIN
      IF NOT BufferBankAccount.ISEMPTY THEN
        EXIT;
      BufferBankAccount.INIT;
      BufferBankAccount."Bank Account No." := "Bank Account No.";
      BufferBankAccount.Name := "Bank Name";
      BufferBankAccount."Bank Branch No." := "Bank Branch No.";
      BufferBankAccount."SWIFT Code" := "SWIFT Code";
      BufferBankAccount.IBAN := IBAN;
      BufferBankAccount.INSERT;
    END;

    LOCAL PROCEDURE RestoreBankAccountInformation@26(VAR BufferBankAccount@1000 : Record 270);
    BEGIN
      IF BufferBankAccount.ISEMPTY THEN
        EXIT;
      "Bank Account No." := BufferBankAccount."Bank Account No.";
      "Bank Name" := BufferBankAccount.Name;
      "Bank Branch No." := BufferBankAccount."Bank Branch No.";
      "SWIFT Code" := BufferBankAccount."SWIFT Code";
      IBAN := BufferBankAccount.IBAN;
    END;

    LOCAL PROCEDURE ShowBankStatementFeedConfirmation@18();
    BEGIN
      BankStatementConfirmationVisible := TRUE;
    END;

    LOCAL PROCEDURE ShowBankStatementFeedStep@37() : Boolean;
    VAR
      GeneralLedgerSetup@1000 : Record 98;
      BankStatementProviderExists@1001 : Boolean;
    BEGIN
      IF NOT GeneralLedgerSetup.GET THEN
        EXIT(FALSE);

      IF GeneralLedgerSetup."LCY Code" = '' THEN
        EXIT(FALSE);

      BankStatementProviderExists := BankAccount.StatementProvidersExist;

      IF NOT UseBankStatementFeedInitialized THEN BEGIN
        UseBankStatementFeed := BankStatementProviderExists;
        UseBankStatementFeedInitialized := TRUE;
      END;

      EXIT(BankStatementProviderExists);
    END;

    LOCAL PROCEDURE ShowSelectBankAccountStep@13() : Boolean;
    BEGIN
      EXIT(TempOnlineBankAccLink.COUNT > 1);
    END;

    LOCAL PROCEDURE ShowSelectBankAccount@16();
    BEGIN
      SelectBankAccountVisible := TRUE;
    END;

    LOCAL PROCEDURE IsBankAccountFormatValid@15(BankAccount@1000 : Text) : Boolean;
    VAR
      VarInt@1001 : Integer;
      Which@1002 : Text;
    BEGIN
      Which := ' -';
      EXIT(EVALUATE(VarInt,DELCHR(BankAccount,'=',Which)));
    END;

    LOCAL PROCEDURE ValidateBankAccountNotEmpty@17() : Boolean;
    BEGIN
      EXIT(("Bank Account No." <> '') OR TempOnlineBankAccLink.ISEMPTY);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryLinkBankAccount@20();
    BEGIN
      BankAccount.OnMarkAccountLinkedEvent(TempOnlineBankAccLink,BankAccount);
    END;

    LOCAL PROCEDURE UpdateCompanyDisplayNameIfNameChanged@28();
    VAR
      Company@1000 : Record 2000000006;
    BEGIN
      IF COMPANYPROPERTY.DISPLAYNAME = Name THEN
        EXIT;

      Company.GET(COMPANYNAME);
      Company."Display Name" := Name;
      Company.MODIFY;
    END;

    BEGIN
    END.
  }
}

