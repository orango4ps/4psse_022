OBJECT Codeunit 9010 Azure AD User Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.05;
  }
  PROPERTIES
  {
    Permissions=TableData 9004=rimd,
                TableData 9005=rimd,
                TableData 2000000053=rimd,
                TableData 2000000120=rimd,
                TableData 2000000121=rimd,
                TableData 2000000195=rimd;
    OnRun=BEGIN
            IF ClientTypeManagement.GetCurrentClientType = CLIENTTYPE::Background THEN
              EXIT;

            Run(USERSECURITYID);
          END;

  }
  CODE
  {
    VAR
      PermissionManager@1001 : Codeunit 9002;
      ClientTypeManagement@1006 : Codeunit 4030;
      Graph@1000 : DotNet "'Microsoft.Dynamics.Nav.AzureADGraphClient, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.AzureADGraphClient.GraphQuery";
      IsInitialized@1003 : Boolean;
      UserDoesNotObjectIdSetErr@1004 : TextConst '@@@="%1 =  The specified User Security ID";ENU=The user with the security ID %1 does not have a valid object ID in Azure Active Directory.;NOR=Brukeren med sikkerhets-ID-en %1 har ikke en gyldig objekt-ID i Azure Active Directory.;SVE=Anv„ndaren med s„kerhets-ID %1 har inget giltigt objekt-ID i Azure Active Directory.';
      CouldNotFindGraphUserErr@1005 : TextConst '@@@="%1 = The specified object id";ENU=An Azure Active Directory user with the object ID %1 was not found.;NOR=Finner ikke en bruker med objekt-ID-en %1 i Azure Active Directory.;SVE=Det finns ingen Azure Active Directory-anv„ndare med objekt-ID %1.';
      IsTest@1002 : Boolean;
      MixedSKUsWithoutBasicErr@1010 : TextConst 'ENU=You cannot mix plans of type Essential and Premium. Contact your system administrator or Microsoft partner for assistance.\\You will be logged out when you choose the OK button.;NOR=Du kan ikke kombinere planer av typen Essential og Premium. Kontakt systemansvarlig eller Microsoft-partneren for † f† hjelp.\\Du logges av n†r du velger knappen OK.;SVE=Du kan inte blanda planer av typen Essential och Premium. Kontakta systemadministrat”ren eller en Microsoft-partner f”r att f† hj„lp.\\Du loggas ut n„r du v„ljer knappen OK.';
      MixedSKUsWithBasicErr@1012 : TextConst 'ENU=You cannot mix plans of type Basic, Essential, and Premium. Contact your system administrator or Microsoft partner for assistance.\\You will be logged out when you choose the OK button.;NOR=Du kan ikke kombinere planer av typen Basic,ÿEssential og Premium. Kontakt systemansvarlig eller Microsoft-partneren for † f† hjelp.\\Du logges av n†r du velger knappen OK.;SVE=Du kan inte blanda planer av typen Basic, Essential och Premium. Kontakta systemadministrat”ren eller en Microsoft-partner f”r att f† hj„lp.\\Du loggas ut n„r du v„ljer knappen OK.';
      ChangesInPlansDetectedMsg@1011 : TextConst 'ENU=Changes in users plans were detected. Choose the Refresh all User Groups action in the Users window.;NOR=Endringer i brukerplaner ble oppdaget. Velg handlingen Oppdater alle brukergrupper i vinduet Brukere.;SVE=Žndringar i anv„ndarplaner har uppt„ckts. V„lj †tg„rden Uppdatera alla anv„ndargrupper i f”nstret Anv„ndare.';
      ProgressDlgMsg@1007 : TextConst '@@@=%1 Integer number, %2 a user name;ENU=Number of users retrieved: ''#1#################################\Current user name: ''#2#################################\;NOR=Antall brukere som er hentet: #1#################################\Navn p† gjeldende bruker: #2#################################\;SVE=Antal h„mtade anv„ndare: ''#1#################################\Aktuellt anv„ndarnamn: ''#2#################################\';
      NoOfUsersRetrievedMsg@1008 : TextConst '@@@="%1=integer number";ENU=Number of users retrieved: %1.;NOR=Antall brukere som er hentet: %1.;SVE=Antal h„mtade anv„ndare: %1.';
      UserCategoryTxt@1013 : TextConst '@@@={Locked};ENU=AL User;NOR=AL User;SVE=AL User';
      CouldNotGetUserErr@1014 : TextConst '@@@={Locked};ENU=Could not get a user.;NOR=Could not get a user.;SVE=Could not get a user.';
      UserTenantAdminMsg@1015 : TextConst '@@@={Locked};ENU=User is a tenant admin.;NOR=User is a tenant admin.;SVE=User is a tenant admin.';
      UserNotTenantAdminMsg@1016 : TextConst '@@@={Locked};ENU=User is not a tenant admin.;NOR=User is not a tenant admin.;SVE=User is not a tenant admin.';
      CompanyAdminRoleTemplateIdTok@1009 : TextConst '@@@={Locked};ENU=62e90394-69f5-4237-9190-012177145e10;NOR=62e90394-69f5-4237-9190-012177145e10;SVE=62e90394-69f5-4237-9190-012177145e10';
      NoMixPlans@1017 : ARRAY [3] OF GUID;
      UserSetupCategoryTxt@1018 : TextConst '@@@={Locked};ENU=User Setup;NOR=User Setup;SVE=User Setup';
      DevicePlanFoundMsg@1019 : TextConst '@@@={Locked};ENU=Device plan %1 found for user %2.;NOR=Device plan %1 found for user %2.;SVE=Device plan %1 found for user %2.';
      NotBCUserMsg@1020 : TextConst '@@@={Locked};ENU=User %1 is not a Business Central user.;NOR=User %1 is not a Business Central user.;SVE=User %1 is not a Business Central user.';
      DeviceGroupNameTxt@1021 : TextConst '@@@={Locked};ENU=Dynamics 365 Business Central Device Users;NOR=Dynamics 365 Business Central Device Users;SVE=Dynamics 365 Business Central Device Users';
      DeviceUserCannotBeFirstUserErr@1022 : TextConst 'ENU=The device user cannot be the first user to log into the system.;NOR=Enhetsbrukeren kan ikke v‘re den f›rste brukeren til † logge p† systemet.;SVE=Enhetsanv„ndaren kan inte vara den f”rsta anv„ndaren som loggar in i systemet.';

    [Internal]
    PROCEDURE Run@3(ForUserSecurityId@1000 : GUID);
    VAR
      UserProperty@1002 : Record 2000000121;
      PermissionManager@1001 : Codeunit 9002;
    BEGIN
      // This function exists for testability
      IF NOT PermissionManager.SoftwareAsAService THEN
        EXIT;

      IF NOT UserProperty.GET(ForUserSecurityId) THEN
        EXIT;

      IF NOT PermissionManager.IsFirstLogin(ForUserSecurityId) THEN
        EXIT;

      IF GetUserAuthenticationObjectId(ForUserSecurityId) = '' THEN
        EXIT;

      RefreshUserPlanAssignments(ForUserSecurityId);
    END;

    [Internal]
    PROCEDURE RefreshUserPlanAssignments@8(ForUserSecurityId@1000 : GUID);
    VAR
      User@1002 : Record 2000000120;
      UserPlan@1003 : Record 9005;
      GraphUser@1001 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo";
    BEGIN
      IF NOT User.GET(ForUserSecurityId) THEN
        EXIT;

      IF NOT Initialize THEN
        EXIT;

      IF NOT GetGraphUserFromObjectId(ForUserSecurityId,GraphUser) THEN
        EXIT;

      IF UserPlan.ISEMPTY THEN
        IF IsDeviceRole(GraphUser) THEN
          ERROR(DeviceUserCannotBeFirstUserErr);

      UpdateUserFromAzureGraph(User,GraphUser);
      UpdateUserPlansFromAzureGraph(User."User Security ID",GraphUser);
    END;

    [Internal]
    PROCEDURE GetUserPlans@2(VAR TempPlan@1003 : TEMPORARY Record 9004;ForUserSecurityId@1000 : GUID;IncludePlansWithoutEntitlement@1001 : Boolean);
    VAR
      GraphUser@1004 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo";
    BEGIN
      IF NOT Initialize THEN
        EXIT;

      IF GetGraphUserFromObjectId(ForUserSecurityId,GraphUser) THEN
        GetGraphUserPlans(TempPlan,GraphUser,IncludePlansWithoutEntitlement);
    END;

    [Internal]
    PROCEDURE CreateNewUsersFromAzureAD@11();
    VAR
      User@1013 : Record 2000000120;
      GraphUser@1001 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo";
      GraphUserPage@1004 : DotNet "'Microsoft.Dynamics.Nav.AzureADGraphClient, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.AzureADGraphClient.UserInfoPage";
      Window@1000 : Dialog;
      i@1002 : Integer;
      UsersPerPage@1003 : Integer;
    BEGIN
      IF NOT Initialize THEN
        EXIT;
      IF GUIALLOWED THEN
        Window.OPEN(ProgressDlgMsg);

      UsersPerPage := 100;
      GraphUserPage := Graph.GetUsersPage(UsersPerPage);
      REPEAT
        FOREACH GraphUser IN GraphUserPage.CurrentPage() DO
          IF NOT GetUserFromAuthenticationObjectId(GraphUser.ObjectId,User) THEN BEGIN
            IF GUIALLOWED THEN BEGIN
              Window.UPDATE(1,i);
              Window.UPDATE(2,GraphUser.DisplayName);
            END;
            IF CreateNewUserFromGraphUser(GraphUser) THEN
              i += 1;
          END;
      UNTIL (NOT GraphUserPage.GetNextPage());
      IF GUIALLOWED THEN BEGIN
        Window.CLOSE;
        MESSAGE(NoOfUsersRetrievedMsg,i);
      END;
    END;

    [Internal]
    PROCEDURE CreateNewUserFromGraphUser@47(GraphUser@1003 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo") : Boolean;
    VAR
      UserAccountHelper@1001 : DotNet "'Microsoft.Dynamics.Nav.NavUserAccount, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.NavUserAccount.NavUserAccountHelper";
      NewUserSecurityId@1002 : GUID;
    BEGIN
      IF IsGraphUserEntitledFromServicePlan(GraphUser) THEN BEGIN
        EnsureAuthenticationEmailIsNotInUse(GraphUser.UserPrincipalName);
        COMMIT;
        NewUserSecurityId := UserAccountHelper.CreateUserFromAzureADObjectId(GraphUser.ObjectId);
        IF NOT ISNULLGUID(NewUserSecurityId) THEN BEGIN
          InitializeAsNewUser(NewUserSecurityId,GraphUser);
          EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE RemoveUnassignedUserPlans@42(VAR TempO365Plan@1006 : TEMPORARY Record 9004;ForUserSecurityId@1003 : GUID);
    VAR
      NavUserPlan@1002 : Record 9005;
      TempNavUserPlan@1004 : TEMPORARY Record 9005;
    BEGIN
      // Have any plans been removed from this user in O365, since last time he logged-in to NAV?
      // Get all plans assigned to the user, in NAV
      NavUserPlan.SETRANGE("User Security ID",ForUserSecurityId);
      IF NOT NavUserPlan.FINDSET THEN
        EXIT;

      REPEAT
        TempNavUserPlan.COPY(NavUserPlan,FALSE);
        TempNavUserPlan.INSERT;
      UNTIL NavUserPlan.NEXT = 0;

      // Get all plans assigned to the user in Office
      IF TempO365Plan.FINDSET THEN
        // And remove them from the list of plans assigned to the user
        REPEAT
          TempNavUserPlan.SETRANGE("Plan ID",TempO365Plan."Plan ID");
          IF NOT TempNavUserPlan.ISEMPTY THEN
            TempNavUserPlan.DELETEALL;
        UNTIL TempO365Plan.NEXT = 0;

      // If any plans belong to the user in NAV, but not in Office, de-assign them
      TempNavUserPlan.SETRANGE("Plan ID");
      IF TempNavUserPlan.FINDSET THEN
        REPEAT
          NavUserPlan.SETRANGE("Plan ID",TempNavUserPlan."Plan ID");
          IF NavUserPlan.FINDFIRST THEN BEGIN
            NavUserPlan.LOCKTABLE;
            NavUserPlan.DELETE;
            RemoveUserGroupsForUserAndPlan(NavUserPlan);
            IF NOT IsTest THEN
              COMMIT; // Finalize the transaction. Else any further error can rollback and create elevation of priviledge
          END;
        UNTIL TempNavUserPlan.NEXT = 0;
    END;

    [Internal]
    PROCEDURE GetCurrentUserTokenClaim@27(ClaimName@1001 : Text) : Text;
    VAR
      UserAccountHelper@1000 : DotNet "'Microsoft.Dynamics.Nav.NavUserAccount, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.NavUserAccount.NavUserAccountHelper";
    BEGIN
      EXIT(UserAccountHelper.GetCurrentUserTokenClaim(ClaimName));
    END;

    LOCAL PROCEDURE AddNewlyAssignedUserPlans@46(VAR TempO365Plan@1006 : TEMPORARY Record 9004;ForUserSecurityId@1003 : GUID;UserHadBeenSetupBefore@1001 : Boolean);
    VAR
      NavUserPlan@1002 : Record 9005;
      PermissionManager@1005 : Codeunit 9002;
      UserGroupsAdded@1000 : Boolean;
    BEGIN
      // Have any plans been added to this user in O365, since last time he logged-in to NAV?
      // For each plan assigned to the user in Office
      IF TempO365Plan.FINDSET THEN
        REPEAT
          // Does this assignment exist in NAV? If not, add it.
          NavUserPlan.SETRANGE("Plan ID",TempO365Plan."Plan ID");
          NavUserPlan.SETRANGE("User Security ID",ForUserSecurityId);
          IF NavUserPlan.ISEMPTY THEN BEGIN
            InsertFromTempPlan(TempO365Plan);
            NavUserPlan.LOCKTABLE;
            NavUserPlan.INIT;
            NavUserPlan."Plan ID" := TempO365Plan."Plan ID";
            NavUserPlan."User Security ID" := ForUserSecurityId;
            NavUserPlan.INSERT;
            // The SUPER role is replaced with O365 FULL ACCESS for new users.
            // This happens only for users who are created from O365 (i.e. are added to plans)
            IF PermissionManager.UpdateUserAccessForSaaS(NavUserPlan."User Security ID") THEN
              UserGroupsAdded := TRUE;
          END;
        UNTIL TempO365Plan.NEXT = 0;

      // Only remove SUPER if other permissions are granted (to avoid user lockout)
      IF UserGroupsAdded THEN BEGIN
        IF NOT UserHadBeenSetupBefore THEN
          PermissionManager.RemoveSUPERPermissionSetFromUserIfMoreSupersExist(ForUserSecurityId);
        IF NOT IsTest THEN
          COMMIT; // Finalize the transaction. Else any further error can rollback and create elevation of priviledge
      END;
    END;

    LOCAL PROCEDURE GetGraphUserPlans@13(VAR TempPlan@1008 : TEMPORARY Record 9004;VAR GraphUser@1000 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo";IncludePlansWithoutEntitlement@1001 : Boolean);
    VAR
      AssignedPlan@1004 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.ServicePlanInfo";
      DirectoryRole@1002 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.RoleInfo";
      ServicePlanIdValue@1009 : Variant;
      HaveAssignedPlans@1003 : Boolean;
      DevicesPlanId@1006 : GUID;
      DevicesPlanName@1007 : Text;
      SystemRoleAdded@1010 : Boolean;
    BEGIN
      TempPlan.RESET;
      TempPlan.DELETEALL;

      // Loop through assigned Azzure AD Plans
      FOREACH AssignedPlan IN GraphUser.AssignedPlans DO
        IF AssignedPlan.CapabilityStatus = 'Enabled' THEN BEGIN
          ServicePlanIdValue := AssignedPlan.ServicePlanId;
          IF IncludePlansWithoutEntitlement OR IsNavServicePlan(ServicePlanIdValue) THEN BEGIN
            AddToTempPlan(ServicePlanIdValue,AssignedPlan.ServicePlanName,TempPlan);
            HaveAssignedPlans := TRUE;
          END;
        END;

      // If there are no Azure AD Plans, loop through Azure AD Roles
      IF NOT HaveAssignedPlans THEN
        IF NOT ISNULL(GraphUser.Roles) THEN
          FOREACH DirectoryRole IN GraphUser.Roles DO
            IF IncludePlansWithoutEntitlement OR IsNavServicePlan(DirectoryRole.RoleTemplateId) THEN BEGIN
              AddToTempPlan(DirectoryRole.RoleTemplateId,DirectoryRole.DisplayName,TempPlan);
              SystemRoleAdded := TRUE;
            END;

      // If there are no Azure AD Plans and no system roles assigned, then check if its a device user
      IF HaveAssignedPlans OR SystemRoleAdded THEN
        EXIT;

      IF IsDeviceRole(GraphUser) THEN BEGIN
        GetDevicesPlanInfo(DevicesPlanId,DevicesPlanName);
        SENDTRACETAG('00009L6',UserSetupCategoryTxt,VERBOSITY::Normal,
          STRSUBSTNO(DevicePlanFoundMsg,DevicesPlanName,GraphUser.DisplayName),DATACLASSIFICATION::CustomerContent);
        AddToTempPlan(DevicesPlanId,DevicesPlanName,TempPlan);
      END ELSE
        SENDTRACETAG('00009L7',UserSetupCategoryTxt,VERBOSITY::Normal,STRSUBSTNO(NotBCUserMsg,GraphUser.DisplayName),
          DATACLASSIFICATION::CustomerContent);
    END;

    LOCAL PROCEDURE IsDeviceRole@39(VAR GraphUser@1001 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo") : Boolean;
    VAR
      GroupInfo@1000 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.GroupInfo";
    BEGIN
      IF ISNULL(GraphUser) THEN
        EXIT(FALSE);

      IF ISNULL(GraphUser.Groups) THEN
        EXIT(FALSE);

      FOREACH GroupInfo IN GraphUser.Groups DO
        IF UPPERCASE(GroupInfo.DisplayName) = UPPERCASE(DeviceGroupNameTxt) THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetDevicesPlanInfo@40(VAR PlanId@1000 : GUID;VAR PlanName@1001 : Text);
    VAR
      MembershipEntitlement@1002 : Record 2000000195;
      Plan@1003 : Record 9004;
    BEGIN
      IF IsTest THEN BEGIN
        PlanId := Plan.GetDevicePlanId;
        EXIT;
      END;

      MembershipEntitlement.SETRANGE(Type,MembershipEntitlement.Type::"Azure AD Device Plan");
      IF MembershipEntitlement.FINDFIRST THEN BEGIN
        EVALUATE(PlanId,MembershipEntitlement.ID);
        PlanName := MembershipEntitlement.Name;
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE GetGraphUserFromObjectId@1(ForUserSecurityID@1000 : GUID;VAR GraphUser@1001 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo");
    VAR
      UserObjectID@1002 : Text;
    BEGIN
      IF ForUserSecurityID = USERSECURITYID THEN BEGIN
        GraphUser := Graph.GetCurrentUser;
        IF NOT ISNULL(GraphUser) THEN
          EXIT;
      END;

      UserObjectID := GetUserAuthenticationObjectId(ForUserSecurityID);
      IF UserObjectID = '' THEN
        ERROR(CouldNotFindGraphUserErr,UserObjectID);

      GraphUser := Graph.GetUserByObjectId(UserObjectID);
      IF ISNULL(GraphUser) THEN
        ERROR(CouldNotFindGraphUserErr,UserObjectID);
    END;

    LOCAL PROCEDURE InsertFromTempPlan@17(VAR TempPlan@1000 : TEMPORARY Record 9004);
    VAR
      Plan@1001 : Record 9004;
    BEGIN
      IF NOT Plan.GET(TempPlan."Plan ID") THEN BEGIN
        Plan.INIT;
        Plan.COPY(TempPlan);
        Plan.INSERT;
      END;
    END;

    LOCAL PROCEDURE IsGraphUserEntitledFromServicePlan@18(VAR GraphUser@1000 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo") : Boolean;
    VAR
      AssignedPlan@1010 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.ServicePlanInfo";
      ServicePlanIdValue@1011 : Variant;
    BEGIN
      FOREACH AssignedPlan IN GraphUser.AssignedPlans DO BEGIN
        ServicePlanIdValue := AssignedPlan.ServicePlanId;
        IF IsNavServicePlan(ServicePlanIdValue) THEN
          EXIT(TRUE);
      END;

      IF IsDeviceRole(GraphUser) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsNavServicePlan@26(ServicePlanId@1001 : GUID) : Boolean;
    VAR
      Plan@1000 : Record 9004;
    BEGIN
      EXIT(Plan.GET(ServicePlanId));
    END;

    [Internal]
    PROCEDURE GetUserObjectId@20(ForUserSecurityId@1002 : GUID) : Text[250];
    VAR
      User@1001 : Record 2000000120;
      GraphUser@1000 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo";
    BEGIN
      IF NOT User.GET(ForUserSecurityId) THEN
        EXIT('');

      IF NOT GetGraphUserFromObjectId(ForUserSecurityId,GraphUser) THEN
        EXIT('');

      EXIT(COPYSTR(GraphUser.ObjectId,1,250));
    END;

    LOCAL PROCEDURE GetUserAuthenticationObjectId@7(ForUserSecurityId@1000 : GUID) : Text;
    VAR
      UserProperty@1002 : Record 2000000121;
    BEGIN
      IF NOT UserProperty.GET(ForUserSecurityId) THEN
        ERROR(UserDoesNotObjectIdSetErr,ForUserSecurityId);

      EXIT(UserProperty."Authentication Object ID");
    END;

    LOCAL PROCEDURE GetUserFromAuthenticationObjectId@12(AuthenticationObjectId@1000 : Text;VAR FoundUser@1001 : Record 2000000120) : Boolean;
    VAR
      UserProperty@1002 : Record 2000000121;
    BEGIN
      UserProperty.SETRANGE("Authentication Object ID",AuthenticationObjectId);
      IF UserProperty.FINDFIRST THEN
        EXIT(FoundUser.GET(UserProperty."User Security ID"));
      EXIT(FALSE)
    END;

    [External]
    PROCEDURE IsUserTenantAdmin@34() : Boolean;
    VAR
      GraphUser@1000 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo";
      GraphRoleInfo@1001 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.RoleInfo";
    BEGIN
      IF NOT Initialize THEN
        EXIT(FALSE);

      IF NOT GetGraphUserFromObjectId(USERSECURITYID,GraphUser) THEN BEGIN
        SENDTRACETAG('0000728',UserCategoryTxt,VERBOSITY::Error,CouldNotGetUserErr,DATACLASSIFICATION::SystemMetadata);
        EXIT(FALSE);
      END;

      IF ISNULL(GraphUser) THEN BEGIN
        SENDTRACETAG('000071V',UserCategoryTxt,VERBOSITY::Error,CouldNotGetUserErr,DATACLASSIFICATION::SystemMetadata);
        EXIT(FALSE);
      END;

      FOREACH GraphRoleInfo IN GraphUser.Roles DO
        IF NOT ISNULL(GraphRoleInfo) THEN
          IF GraphRoleInfo.RoleTemplateId = CompanyAdminRoleTemplateIdTok THEN BEGIN
            SENDTRACETAG('000071T',UserCategoryTxt,VERBOSITY::Normal,UserTenantAdminMsg,DATACLASSIFICATION::CustomerContent);
            EXIT(TRUE);
          END;

      SENDTRACETAG('000071Y',UserCategoryTxt,VERBOSITY::Normal,UserNotTenantAdminMsg,DATACLASSIFICATION::CustomerContent);

      EXIT(FALSE);
    END;

    PROCEDURE GetAzureUserPlanRoleCenterId@1020(ForUserSecurityId@1003 : GUID) : Integer;
    VAR
      TempO365Plan@1001 : TEMPORARY Record 9004;
      User@1005 : Record 2000000120;
      GraphUser@1006 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo";
    BEGIN
      IF NOT User.GET(ForUserSecurityId) THEN
        EXIT(0);

      IF NOT Initialize THEN
        EXIT(0);

      IF NOT GetGraphUserFromObjectId(ForUserSecurityId,GraphUser) THEN
        EXIT(0);

      GetGraphUserPlans(TempO365Plan,GraphUser,FALSE);

      TempO365Plan.SETFILTER("Role Center ID",'<>0');

      IF NOT TempO365Plan.FINDFIRST THEN
        EXIT(0);

      EXIT(TempO365Plan."Role Center ID");
    END;

    [TryFunction]
    [Internal]
    PROCEDURE TryGetAzureUserPlanRoleCenterId@4(VAR RoleCenterID@1001 : Integer;ForUserSecurityId@1000 : GUID);
    BEGIN
      RoleCenterID := GetAzureUserPlanRoleCenterId(ForUserSecurityId);
    END;

    LOCAL PROCEDURE CheckUpdateUserRequired@44(VAR User@1001 : Record 2000000120;VAR GraphUser@1002 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo") : Boolean;
    VAR
      TempString@1004 : Text;
    BEGIN
      IF NOT User.GET(User."User Security ID") THEN
        EXIT(FALSE);

      IF (UPPERCASE(FORMAT(GraphUser.AccountEnabled)) = 'TRUE') AND (User.State = User.State::Disabled) THEN
        EXIT(TRUE);

      IF (UPPERCASE(FORMAT(GraphUser.AccountEnabled)) = 'FALSE') AND (User.State = User.State::Enabled) THEN
        EXIT(TRUE);

      TempString := GraphUser.GivenName;
      IF GraphUser.Surname <> '' THEN
        TempString := TempString + ' ';
      TempString := TempString + GraphUser.Surname;
      TempString := COPYSTR(TempString,1,MAXSTRLEN(User."Full Name"));
      IF LOWERCASE(User."Full Name") <> LOWERCASE(TempString) THEN
        EXIT(TRUE);

      TempString := FORMAT(GraphUser.Mail);
      TempString := COPYSTR(TempString,1,MAXSTRLEN(User."Contact Email"));
      IF LOWERCASE(User."Contact Email") <> LOWERCASE(TempString) THEN
        EXIT(TRUE);

      TempString := COPYSTR(GraphUser.UserPrincipalName,1,MAXSTRLEN(User."Authentication Email"));
      IF LOWERCASE(User."Authentication Email") <> LOWERCASE(TempString) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE UpdateUserFromAzureGraph@15(VAR User@1001 : Record 2000000120;VAR GraphUser@1002 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo") : Boolean;
    VAR
      ModifyUser@1003 : Boolean;
      TempString@1004 : Text;
    BEGIN
      IF NOT CheckUpdateUserRequired(User,GraphUser) THEN
        EXIT;

      User.LOCKTABLE;
      IF NOT User.GET(User."User Security ID") THEN BEGIN
        COMMIT;
        EXIT;
      END;

      IF (UPPERCASE(FORMAT(GraphUser.AccountEnabled)) = 'TRUE') AND (User.State = User.State::Disabled) THEN BEGIN
        User.State := User.State::Enabled;
        ModifyUser := TRUE;
      END;

      IF (UPPERCASE(FORMAT(GraphUser.AccountEnabled)) = 'FALSE') AND (User.State = User.State::Enabled) THEN BEGIN
        User.State := User.State::Disabled;
        ModifyUser := TRUE;
      END;

      TempString := GraphUser.GivenName;
      IF GraphUser.Surname <> '' THEN
        TempString := TempString + ' ';
      TempString := TempString + GraphUser.Surname;
      TempString := COPYSTR(TempString,1,MAXSTRLEN(User."Full Name"));
      IF LOWERCASE(User."Full Name") <> LOWERCASE(TempString) THEN BEGIN
        User."Full Name" := TempString;
        ModifyUser := TRUE;
      END;

      TempString := FORMAT(GraphUser.Mail);
      TempString := COPYSTR(TempString,1,MAXSTRLEN(User."Contact Email"));
      IF LOWERCASE(User."Contact Email") <> LOWERCASE(TempString) THEN BEGIN
        User."Contact Email" := TempString;
        ModifyUser := TRUE;
      END;

      TempString := COPYSTR(GraphUser.UserPrincipalName,1,MAXSTRLEN(User."Authentication Email"));
      IF LOWERCASE(User."Authentication Email") <> LOWERCASE(TempString) THEN BEGIN
        // Clear current authentication mail
        User."Authentication Email" := '';
        User.MODIFY;
        ModifyUser := FALSE;

        EnsureAuthenticationEmailIsNotInUse(TempString);
        UpdateAuthenticationEmail(User,GraphUser);
      END;

      IF ModifyUser THEN
        User.MODIFY;

      SetUserLanguage(GraphUser.PreferredLanguage);
      COMMIT;
      EXIT(ModifyUser);
    END;

    LOCAL PROCEDURE UpdateUserPlansFromAzureGraph@23(ForUserSecurityId@1003 : GUID;VAR GraphUser@1000 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo");
    VAR
      TempO365Plan@1001 : TEMPORARY Record 9004;
      UserPlan@1004 : Record 9005;
      HasUserBeenSetupBefore@1002 : Boolean;
    BEGIN
      GetGraphUserPlans(TempO365Plan,GraphUser,FALSE);

      // Has the user been setup earlier?
      UserPlan.SETRANGE("User Security ID",ForUserSecurityId);
      HasUserBeenSetupBefore := NOT (UserPlan.ISEMPTY AND PermissionManager.IsFirstLogin(ForUserSecurityId));

      // Have any plans been removed from this user in O365, since last time he logged-in to NAV?
      RemoveUnassignedUserPlans(TempO365Plan,ForUserSecurityId);

      // Have any plans been added to this user in O365, since last time he logged-in to NAV?
      AddNewlyAssignedUserPlans(TempO365Plan,ForUserSecurityId,HasUserBeenSetupBefore);
    END;

    [Internal]
    PROCEDURE UpdateUserPlansFromAzureGraphAllUsers@22();
    VAR
      User@1000 : Record 2000000120;
      GraphUser@1002 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo";
    BEGIN
      IF NOT Initialize THEN
        EXIT;

      User.SETFILTER("License Type",'<>%1',User."License Type"::"External User");
      User.SETFILTER("Windows Security ID",'=''''');

      IF NOT User.FINDSET THEN
        EXIT;

      REPEAT
        IF GetGraphUserFromObjectId(User."User Security ID",GraphUser) THEN
          UpdateUserPlansFromAzureGraph(User."User Security ID",GraphUser);
      UNTIL User.NEXT = 0;
    END;

    LOCAL PROCEDURE AddToTempPlan@16(ServicePlanId@1000 : GUID;ServicePlanName@1001 : Text;VAR TempPlan@1002 : TEMPORARY Record 9004);
    VAR
      Plan@1003 : Record 9004;
    BEGIN
      WITH TempPlan DO BEGIN
        IF GET(ServicePlanId) THEN
          EXIT;

        IF Plan.GET(ServicePlanId) THEN;

        INIT;
        "Plan ID" := ServicePlanId;
        Name := COPYSTR(ServicePlanName,1,MAXSTRLEN(Name));
        "Role Center ID" := Plan."Role Center ID";
        INSERT;
      END;
    END;

    LOCAL PROCEDURE EnsureAuthenticationEmailIsNotInUse@37(AuthenticationEmail@1000 : Text);
    VAR
      User@1001 : Record 2000000120;
      ModifiedUser@1002 : Record 2000000120;
      GraphUser@1003 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo";
      UserSecurityId@1005 : GUID;
    BEGIN
      // Clear all duplicate authentication email.
      User.SETRANGE("Authentication Email",COPYSTR(AuthenticationEmail,1,MAXSTRLEN(User."Authentication Email")));
      IF NOT User.FINDFIRST THEN
        EXIT;
      REPEAT
        UserSecurityId := User."User Security ID";
        // Modifying the user authentication email breaks the connection to AD by clearing the Authentication Object Id
        User."Authentication Email" := '';
        User.MODIFY;

        // Cascade changes to authentication email, terminates at the first time an authentication email is not found.
        IF GetGraphUserFromObjectId(User."User Security ID",GraphUser) THEN BEGIN
          EnsureAuthenticationEmailIsNotInUse(GraphUser.UserPrincipalName);
          IF ModifiedUser.GET(UserSecurityId) THEN
            UpdateAuthenticationEmail(ModifiedUser,GraphUser);
        END;
      UNTIL NOT User.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateAuthenticationEmail@38(VAR User@1000 : Record 2000000120;VAR GraphUser@1001 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo");
    VAR
      NavUserAuthenticationHelper@1002 : DotNet "'Microsoft.Dynamics.Nav.NavUserAccount, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.NavUserAccount.NavUserAccountHelper";
    BEGIN
      User."Authentication Email" := COPYSTR(GraphUser.UserPrincipalName,1,MAXSTRLEN(User."Authentication Email"));
      User.MODIFY;
      NavUserAuthenticationHelper.SetAuthenticationObjectId(User."User Security ID",GraphUser.ObjectId);
    END;

    LOCAL PROCEDURE SetUserLanguage@24(PreferredLanguage@1000 : Text);
    VAR
      Language@1002 : Record 8;
      UserPersonalization@1004 : Record 2000000073;
      LanguageManagement@1005 : Codeunit 43;
      IdentityManagement@1006 : Codeunit 9801;
      LanguageCode@1003 : Code[10];
      LanguageId@1001 : Integer;
    BEGIN
      IF NOT IdentityManagement.IsInvAppId THEN
        EXIT;

      LanguageId := LanguageManagement.ApplicationLanguage;

      // We will use default application language if the PreferredLanguage is blank or en-us
      // (i.e. don't spend time trying to lookup the code)
      IF NOT (LOWERCASE(PreferredLanguage) IN ['','en-us']) THEN
        IF TryGetLanguageCode(PreferredLanguage,LanguageCode) THEN ;

      // If we support the language, get the language id
      // If we don't, we keep the current value (default application language)
      IF LanguageCode <> '' THEN
        IF Language.GET(LanguageCode) THEN
          LanguageId := Language."Windows Language ID";

      IF NOT UserPersonalization.GET(USERSECURITYID) THEN
        EXIT;

      // Only lock the table if there is a change
      IF UserPersonalization."Language ID" = LanguageId THEN
        EXIT; // No changes required

      UserPersonalization.LOCKTABLE;
      UserPersonalization.GET(USERSECURITYID);
      UserPersonalization.VALIDATE("Language ID",LanguageId);
      UserPersonalization.VALIDATE("Locale ID",LanguageId);
      UserPersonalization.MODIFY(TRUE);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetLanguageCode@25(CultureName@1000 : Text;VAR CultureCode@1002 : Code[10]);
    VAR
      CultureInfo@1001 : DotNet "'mscorlib, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      CultureInfo := CultureInfo.CultureInfo(CultureName);
      CultureCode := CultureInfo.ThreeLetterWindowsLanguageName;
    END;

    LOCAL PROCEDURE InitializeAsNewUser@5(NewUserSecurityId@1000 : GUID;VAR GraphUser@1001 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo");
    VAR
      User@1003 : Record 2000000120;
    BEGIN
      User.GET(NewUserSecurityId);

      UpdateUserFromAzureGraph(User,GraphUser);
      UpdateUserPlansFromAzureGraph(User."User Security ID",GraphUser);
    END;

    LOCAL PROCEDURE Initialize@9() : Boolean;
    BEGIN
      IF NOT PermissionManager.SoftwareAsAService THEN
        EXIT(FALSE);

      IF IsInitialized THEN
        EXIT(TRUE);

      IF CanHandle THEN BEGIN
        IF NOT TryCreateGraph(Graph) THEN
          EXIT(FALSE)
      END ELSE
        OnInitialize(Graph);

      IsInitialized := NOT ISNULL(Graph);
      EXIT(IsInitialized);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryCreateGraph@10(VAR GraphQuery@1000 : DotNet "'Microsoft.Dynamics.Nav.AzureADGraphClient, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.AzureADGraphClient.GraphQuery");
    BEGIN
      GraphQuery := GraphQuery.GraphQuery
    END;

    LOCAL PROCEDURE CanHandle@6() : Boolean;
    VAR
      AzureADMgtSetup@1000 : Record 6303;
    BEGIN
      IF AzureADMgtSetup.GET THEN
        EXIT(AzureADMgtSetup."Azure AD User Mgt. Codeunit ID" = CODEUNIT::"Azure AD User Management");

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE RemoveUserGroupsForUserAndPlan@19(UserPlan@1002 : Record 9005);
    VAR
      UserGroupMember@1000 : Record 9001;
      UserGroupPlan@1001 : Record 9007;
    BEGIN
      // Remove related user groups from the user
      UserGroupPlan.SETRANGE("Plan ID",UserPlan."Plan ID");
      IF NOT UserGroupPlan.FINDSET THEN
        EXIT; // no user groups to remove from this user

      UserGroupMember.SETRANGE("User Security ID",UserPlan."User Security ID");
      REPEAT
        UserGroupMember.SETRANGE("User Group Code",UserGroupPlan."User Group Code");
        UserGroupMember.DELETEALL(TRUE);
      UNTIL UserGroupPlan.NEXT = 0;
    END;

    [Integration(DEFAULT,TRUE)]
    LOCAL PROCEDURE OnInitialize@21(VAR GraphQuery@1000 : DotNet "'Microsoft.Dynamics.Nav.AzureADGraphClient, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.AzureADGraphClient.GraphQuery");
    BEGIN
    END;

    [Internal]
    PROCEDURE GetTenantDetail@14(VAR TenantDetail@1000 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.TenantInfo") : Boolean;
    BEGIN
      IF NOT Initialize THEN
        EXIT(FALSE);

      TenantDetail := Graph.GetTenantDetail;
      EXIT(NOT ISNULL(TenantDetail));
    END;

    [External]
    PROCEDURE SetTestability@140(EnableTestability@1000 : Boolean);
    BEGIN
      IsTest := EnableTestability;
    END;

    [External]
    PROCEDURE CheckMixedPlans@28();
    VAR
      Plan@1000 : Record 9004;
      UserPlan@1001 : Record 9005;
      Company@1002 : Record 2000000006;
      PermissionManager@1003 : Codeunit 9002;
    BEGIN
      IF NOT PermissionManager.SoftwareAsAService THEN
        EXIT;

      IF NOT GUIALLOWED THEN
        EXIT;

      IF Company.GET(COMPANYNAME) THEN
        IF Company."Evaluation Company" THEN
          EXIT;

      IF Plan.ISEMPTY THEN
        EXIT;

      IF UserPlan.ISEMPTY THEN
        EXIT;

      IF NOT MixedPlansExist THEN
        EXIT;

      IF NOT PermissionManager.CanCurrentUserManagePlansAndGroups THEN BEGIN
        IF PlansExist(Plan.GetBasicPlanId) THEN
          ERROR(MixedSKUsWithBasicErr);
        ERROR(MixedSKUsWithoutBasicErr);
      END;
      MESSAGE(ChangesInPlansDetectedMsg);
    END;

    LOCAL PROCEDURE FillNoMixPlans@50();
    VAR
      Plan@1000 : Record 9004;
    BEGIN
      NoMixPlans[1] := Plan.GetBasicPlanId;
      NoMixPlans[2] := Plan.GetEssentialPlanId;
      NoMixPlans[3] := Plan.GetPremiumPlanId;
    END;

    [External]
    PROCEDURE MixedPlansExist@29() : Boolean;
    VAR
      i@1001 : Integer;
    BEGIN
      IF ISNULLGUID(NoMixPlans[1]) THEN
        FillNoMixPlans;

      FOR i := 1 TO ARRAYLEN(NoMixPlans) DO BEGIN
        IF IsMixedPlan(NoMixPlans[i]) THEN
          EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE IsMixedPlan@36(PlanId@1000 : GUID) : Boolean;
    BEGIN
      EXIT(PlansExist(PlanId) AND PlansApartFromExist(PlanId));
    END;

    [External]
    PROCEDURE PlansExist@31(PlanId@1003 : GUID) : Boolean;
    VAR
      UsersInPlans@1002 : Query 774;
    BEGIN
      UsersInPlans.SETRANGE(User_State,UsersInPlans.User_State::Enabled);
      UsersInPlans.SETRANGE(Plan_ID,PlanId);

      IF UsersInPlans.OPEN THEN
        EXIT(UsersInPlans.READ);
    END;

    [External]
    PROCEDURE PlansApartFromExist@35(PlanId@1003 : GUID) : Boolean;
    VAR
      i@1002 : Integer;
    BEGIN
      IF ISNULLGUID(NoMixPlans[1]) THEN
        FillNoMixPlans;

      FOR i := 1 TO ARRAYLEN(NoMixPlans) DO BEGIN
        IF (NoMixPlans[i] <> PlanId) AND PlansExist(NoMixPlans[i]) THEN
          EXIT(TRUE);
      END;
    END;

    [EventSubscriber(Codeunit,40,OnAfterCompanyOpen)]
    LOCAL PROCEDURE CheckMixedPlansOnAfterCompanyOpen@30();
    VAR
      AzureADUserManagement@1000 : Codeunit 9010;
    BEGIN
      AzureADUserManagement.CheckMixedPlans;
    END;

    [External]
    PROCEDURE SynchronizeLicensedUserFromDirectory@32(AuthenticationEmail@1002 : Text) : Boolean;
    VAR
      User@1001 : Record 2000000120;
      GraphUser@1000 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.UserInfo";
    BEGIN
      IF NOT Initialize THEN
        EXIT(FALSE);

      GraphUser := Graph.GetUser(AuthenticationEmail);
      IF ISNULL(GraphUser) THEN
        EXIT(FALSE);

      IF GetUserFromAuthenticationObjectId(GraphUser.ObjectId,User) THEN BEGIN
        UpdateUserFromAzureGraph(User,GraphUser);
        UpdateUserPlansFromAzureGraph(User."User Security ID",GraphUser);
      END ELSE
        CreateNewUserFromGraphUser(GraphUser);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE SynchronizeAllLicensedUsersFromDirectory@33();
    BEGIN
      CreateNewUsersFromAzureAD
    END;

    BEGIN
    END.
  }
}

