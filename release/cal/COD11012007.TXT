OBJECT Codeunit 11012007 Generate Project Installments
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@11012011 : TextConst 'ENU=Do you want to generate Installments ?;NOR=Vil du generere avdrag?;SVE=Vill du skapa avbetalningar?';
      Text001@11012012 : TextConst 'ENU=Total percentage of Installment Scheme ''%1'' is not 100 percent. Continue?;NOR=Totalprosenten for betalingsplanen ''%1'' er ikke 100 prosent. Fortsette?;SVE=Totalprocenten f”r avbetalningsplanen ''%1'' „r inte 100 procent. Forts„tta?';
      Text002@11012013 : TextConst 'ENU=Installment schem %1 has no plot Installment to invoice the Plot price on.;NOR=Betalingsplan %1 mangler tegningavdrag † fakture tegningprisen p†.;SVE=Betalplan %1 saknar ritningsunderlag att fakturera Ritningspriset p†.';
      Text003@11012014 : TextConst 'ENU=No installments generated.;NOR=Ingen avdrag generert.;SVE=Inga avbetalningar har genererats.';
      Text004@11012015 : TextConst 'ENU=%1 installments created;NOR=%1 avdrag er opprettet;SVE=%1 avbetalningar har skapats';
      Text005@11012016 : TextConst 'ENU=Plot Price not filled, continue ?;NOR=Tegningprisen er ikke fylt ut. Vil du fortsette?;SVE=Ritningspriset har inte fyllts i. Vill du forts„tta?';
      Text006@11012017 : TextConst 'ENU=Process aborted.;NOR=Prosessen er avbrutt;SVE=Processen avbr”ts.';
      Text007@11012018 : TextConst 'ENU="Contract Amount not filled; continue ?";NOR=Kontraktsbel›pet er ikke fylt ut. Vil du fortsette?;SVE=Kontraktsbeloppet har inte fyllts i. Vill du forts„tta?';
      ProjPrincipalRec@11012000 : Record 11012005;
      PlotNoRec@11012001 : Record 11012500;
      ExtBudgetRec@11012002 : Record 11012004;
      OptionRec@11012003 : Record 11012502;
      ProjSetupRec@1210190000 : Record 315;
      ProjRec@11012004 : Record 11072003;
      InstalmRec@11012005 : Record 11012017;
      ProjectInstallment@11012006 : Record 11012018;
      TempProjectInstallment@1100527701 : TEMPORARY Record 11012018;
      VATPostingSetupRec@1210190005 : Record 325;
      InstallmentsGenerated@11012008 : Boolean;
      FromProj@11012009 : Boolean;
      PriceQuestion1@1100485006 : Boolean;
      PriceQuestion2@1100485005 : Boolean;
      PercentageQuestion@1100485007 : Boolean;
      CounterInstallmentsCreated@1100485003 : Integer;
      HelpInstallmAmount@1210190004 : Decimal;
      Text008@1210190001 : TextConst 'ENU=Total percentage of Installment Scheme from Plot  %1-%2  is not 100 percent. Continue?;NOR=Totalprosenten for betalingsplanen fra tegningen %1-%2 er ikke 100 prosent. Fortsette?;SVE=Totalprocenten f”r avbetalningsplan fr†n Ritningen %1-%2 „r inte 100 procent. Forts„tta?';
      Text009@1210190002 : TextConst 'ENU=Installment scheme from Plot %1-%2 has no plot Installment to invoice the Plot price on.;NOR=Betalingsplanen fra tegning %1-%2 mangler tegningavdrag † fakturere tegningprisen p†.;SVE=Betalplaner fr†n %1-%2 saknar ritningsunderlag att fakturera Ritningspriset p†.';
      Text010@1210190003 : TextConst 'ENU=For Plot %1-%2 the Contract Date is empty.;NOR=Kontraktsdato er tom for tegning %1-%2.;SVE=F”r ritningen %1-%2 „r kontraktsdatum tomt.';
      SaveElemCheckProjNo@1100485002 : Code[20];
      SaveElemCheckPrincipal@1100485001 : Code[20];
      SaveElemCheckPlotNo@1100485000 : Code[10];
      Text011@1100485004 : TextConst 'ENU=In the installment scheme the same element is used several times.\Therefore the element can not be filled for all project installments in Project ''%1'', Principal ''%2'', Plot No. ''%3''.;NOR="I betalingsplanen er samme element brukt flere ganger.\Derfor kan elementet ikke fylles ut for alle prosjektsavdrag i prosjekt ''%1'', oppdragsgiver ''%2'' tegningnr ''%3''.  ";SVE=I avbetalningsschemat kan samma element anv„ndas flera g†nger.\D„rf”r kan elementet inte fyllas i f”r alla projektavbetalningar i projekt ''%1'', huvudkonto ''%2'', Ritningnr ''%3''.';
      Text012@1100525000 : TextConst 'ENU=%2 is released.;NOR=%2 er sluppet;SVE=%2 „r sl„ppt.';
      bSilent@1100528000 : Boolean;
      Text11128230@1100285001 : TextConst 'ENU=Final Installment;NOR=Innest†ende bel›p;SVE=Slutfaktura';
      DimMgt@1100285500 : Codeunit 408;
      DimValRec@1100285501 : Record 349;
      VirtualInstallmentsForCashflow@1100527700 : Boolean;

    PROCEDURE FromPrincipal@1(CurrProj@11012000 : Code[20];CurrentPrincipal@11012001 : Code[20]);
    VAR
      lvCommissionRec@1100485001 : Record 11012020;
      lvCommissionNo@1100485000 : Code[20];
    BEGIN
      IF NOT FromProj THEN
        IF NOT CONFIRM(Text000,FALSE) THEN
          EXIT;

      WITH ProjPrincipalRec DO BEGIN
        RESET;
        SETRANGE("Project No.",CurrProj);
        SETFILTER(Principal,CurrentPrincipal);
        IF VirtualInstallmentsForCashflow THEN
          SETFILTER("Installment Scheme",'<>%1','')
        ELSE
          SETRANGE("Generate Installments",TRUE);
        SETRANGE("Installments Generated",FALSE);
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            TESTFIELD("Project No.");
            ProjSetupRec.GET;
            ProjRec.GET("Project No.");
            IF (ProjSetupRec."Provisions at Closure") THEN
              ProjRec.CheckProjectStatus(-1)
            ELSE
              ProjRec.CheckProjectStatus(0);

            ProjRec.TESTFIELD(ProjRec."Settlement Method",ProjRec."Settlement Method"::"Fixed Price");
            TESTFIELD(Principal);
            TESTFIELD("Installment Scheme");
            lvCommissionNo := '';
            IF (STRLEN("Principal Reference") <= MAXSTRLEN(lvCommissionRec."No.")) THEN BEGIN
              IF lvCommissionRec.GET("Project No.", Principal, "Principal Reference") THEN
                lvCommissionNo := "Principal Reference";
            END;
            IF VirtualInstallmentsForCashflow THEN
              GenerateProjectInstallments(TempProjectInstallment,
                CurrProj, Principal, "Installment Scheme", "Currency Code", "Contract Amount", "Plot Price",
                '','','','','','','','',lvCommissionNo,"VAT Amount Long Lease",
                // SESB.I022 KD 18.07.2013 >>
                "Method Last Installment" = "Method Last Installment"::"Final Installment",
                "Withheld Perc. Final Installm.","Withheld Perc. Contract Amount")
                // SESB.I022 KD 18.07.2013 <<
            ELSE BEGIN
              GenerateProjectInstallments(ProjectInstallment,
                CurrProj, Principal, "Installment Scheme", "Currency Code", "Contract Amount", "Plot Price",
                '','','','','','','','',lvCommissionNo,"VAT Amount Long Lease",
                // SESB.I022 KD 18.07.2013 >>
                "Method Last Installment" = "Method Last Installment"::"Final Installment",
                "Withheld Perc. Final Installm.","Withheld Perc. Contract Amount");
                // SESB.I022 KD 18.07.2013 <<
              IF InstallmentsGenerated THEN BEGIN
                "Installments Generated" := TRUE;
                "Generation Date" := TODAY;
                MODIFY;
              END;

            END;
          UNTIL NEXT = 0;
        END ELSE BEGIN
          IF NOT FromProj THEN BEGIN
            SETRANGE("Generate Installments");
            SETRANGE("Installments Generated");
            SETRANGE("Installments per Plot",TRUE);
            IF FINDFIRST THEN BEGIN
              FromProj := TRUE;  //prevents 2x question and informing
              FromPlotNumber(CurrProj,CurrentPrincipal,'');
              FromProj := FALSE;
            END;
          END;
        END;
      END;

      IF NOT FromProj THEN
        Inform();
    END;

    [External]
    PROCEDURE FromPlotSelection@1100528200(VAR Plot@1100528200 : Record 11012500);
    BEGIN
      FromProj := TRUE;  //prevents 2x question and informing
      WITH Plot DO BEGIN
        IF FINDSET(TRUE,FALSE) THEN
          REPEAT
            FromPlotNumber("Project No.",Principal,"Plot No.");
          UNTIL NEXT = 0;
      END;
      Inform();
    END;

    PROCEDURE FromPlotNumber@10(CurrProj@11012000 : Code[20];CurrentPrincipal@11012001 : Code[20];CurrentPlot@1210190000 : Code[20]);
    BEGIN
      IF NOT FromProj THEN
        IF NOT CONFIRM(Text000,FALSE) THEN
          EXIT;

      WITH PlotNoRec DO BEGIN
        RESET;
        SETRANGE("Project No.",CurrProj);
        SETFILTER(Principal,CurrentPrincipal);
        SETFILTER("Plot No.",CurrentPlot);
        IF VirtualInstallmentsForCashflow THEN
          SETFILTER("Installment Scheme",'<>%1','')
        ELSE
          SETRANGE("Generate Installments",TRUE);
        SETRANGE("Installments Generated",FALSE);
        IF FINDSET(TRUE,FALSE) THEN
          REPEAT
            TESTFIELD("Project No.");
            ProjRec.GET("Project No.");
            ProjRec.TESTFIELD(ProjRec."Settlement Method",ProjRec."Settlement Method"::"Fixed Price");
            TESTFIELD(Principal);
            TESTFIELD("Installment Scheme");
            CALCFIELDS("Modular Option Total");
            IF "Interest Applicable" THEN BEGIN
              IF ("Contract Date" = 0D) THEN BEGIN
                IF NOT FromProj THEN
                  ERROR(Text010);
              END ELSE BEGIN
                IF VirtualInstallmentsForCashflow THEN
                  GenerateProjPlotInstallments(TempProjectInstallment,
                    CurrProj, Principal, "Installment Scheme", ("Building Price" + "Additional Costs" + "Modular Option Total"),
                    "Plot Price", '','', "Plot No.",'','','','',"VAT Amount Long Lease")
                ELSE
                  GenerateProjPlotInstallments(ProjectInstallment,
                    CurrProj, Principal, "Installment Scheme", ("Building Price" + "Additional Costs" + "Modular Option Total"),
                    "Plot Price", '','', "Plot No.",'','','','',"VAT Amount Long Lease");
              END
            END ELSE
              IF VirtualInstallmentsForCashflow THEN
                GenerateProjectInstallments(TempProjectInstallment,
                  CurrProj, Principal, "Installment Scheme", '', ("Building Price" + "Additional Costs" + "Modular Option Total"),
                  "Plot Price", '','', "Plot No.",'','','','','','',"VAT Amount Long Lease",
                  FALSE,0,0) // SESB.I022 KD 18.07.2013
              ELSE BEGIN
                GenerateProjectInstallments(ProjectInstallment,
                  CurrProj, Principal, "Installment Scheme", '', ("Building Price" + "Additional Costs" + "Modular Option Total"),
                  "Plot Price", '','', "Plot No.",'','','','','','',"VAT Amount Long Lease",
                  FALSE,0,0); // SESB.I022 KD 18.07.2013

                IF InstallmentsGenerated THEN BEGIN
                  "Installments Generated" := TRUE;
                  "Generation Date" := TODAY;
                  MODIFY;
                END;
            END;
          UNTIL NEXT = 0;
      END;

      IF NOT FromProj THEN
        Inform();
    END;

    PROCEDURE FromExtension@2(CurrProj@11012000 : Code[20];CurrContract@11012001 : Code[10]);
    VAR
      lvCommissionRec@1210190000 : Record 11012020;
      lvCommissionNo@1210190001 : Code[20];
    BEGIN
      IF NOT FromProj THEN
        IF NOT CONFIRM(Text000,FALSE) THEN
          EXIT;

      WITH ExtBudgetRec DO BEGIN
        RESET;
        SETRANGE("Project No.",CurrProj);
        SETFILTER("Contract No.",CurrContract);
        IF VirtualInstallmentsForCashflow THEN
          SETFILTER("Installment Scheme",'<>%1','')
        ELSE
          SETRANGE("Generate Installments",TRUE);
        SETRANGE("Installments Generated",FALSE);
        SETFILTER(Status, '%1|%2', Status::Order, Status::"Invoicing Allowed");
        IF FINDSET(TRUE,FALSE) THEN
          REPEAT
            TESTFIELD("Project No.");
            ProjRec.GET("Project No.");
            TESTFIELD("Settlement Method", "Settlement Method"::"Fixed Price");
            TESTFIELD(Principal);
            TESTFIELD("Installment Scheme");
            lvCommissionNo := '';
            IF (STRLEN("Your Reference") <= MAXSTRLEN(lvCommissionRec."No.")) THEN BEGIN
              IF lvCommissionRec.GET("Project No.", Principal, "Your Reference") THEN
                lvCommissionNo := "Your Reference";
            END;
            IF VirtualInstallmentsForCashflow THEN
              GenerateProjectInstallments(TempProjectInstallment,
                CurrProj,Principal,"Installment Scheme", "Contract Currency Code",
                "Contract Amount",0,'',"Contract No.",'','','','','','',lvCommissionNo,0,
                // SESB.I022 KD 18.07.2013 >>
                //"Contract Amount",0,'',"Contract No.",'','','','','',lvCommissionNo,0)
                "Method Last Installment" = "Method Last Installment"::"Final Installment",
                "Withheld Perc. Final Installm.","Withheld Perc. Contract Amount")
                // SESB.I022 KD 18.07.2013 <<
            ELSE BEGIN
              GenerateProjectInstallments(ProjectInstallment,
                CurrProj,Principal,"Installment Scheme", "Contract Currency Code",
                "Contract Amount",0,'',"Contract No.",'','','','','','',lvCommissionNo,0,
                // SESB.I022 KD 18.07.2013 >>
                //"Contract Amount",0,'',"Contract No.",'','','','','',lvCommissionNo,0);
                "Method Last Installment" = "Method Last Installment"::"Final Installment",
                "Withheld Perc. Final Installm.","Withheld Perc. Contract Amount");
                // SESB.I022 KD 18.07.2013 <<
                //* Do not add 'Description' because contract description is available on Installment line and
                //* an extra text line will be created for this at an invoice. Otherwise everything will be twice on the invoice.
                //* Besides, combine 2 fields of 50 pos. in a field of 50 pos., will not fit. A (big) part will disappear.
              IF InstallmentsGenerated THEN BEGIN
                "Installments Generated" := TRUE;
                "Generation Date" := TODAY;
                MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
      END;

      IF NOT FromProj THEN
        Inform();
    END;

    PROCEDURE FromOption@8(CurrProj@11012000 : Code[20];CurrPlotNo@1210190004 : Code[10];CurrModel@1210190000 : Code[20];CurrMainGroup@1210190001 : Code[20];CurrGroup@1210190002 : Code[20];CurrSubGroup@1210190003 : Code[20];CurrOption@1210190005 : Code[20]);
    VAR
      lCustomerRec@1100485001 : Record 18;
      JobsSetup@1100528400 : Record 315;
      OptionDescription@1100528401 : Text;
      lvInstallmentAmount@1100485000 : Decimal;
      lvOptionAmount@1100485002 : Decimal;
    BEGIN
      IF NOT FromProj THEN
        IF NOT CONFIRM(Text000,FALSE) THEN
          EXIT;

      JobsSetup.GET;
      WITH OptionRec DO BEGIN
        RESET;
        SETRANGE("Project No.",CurrProj);
        SETFILTER(Option,CurrOption);
        SETFILTER("Plot No.",CurrPlotNo);
        SETFILTER("House Model", CurrModel);
        SETFILTER("Main Group", CurrMainGroup);
        SETFILTER(Group, CurrGroup);
        SETFILTER("Sub Group", CurrSubGroup);
        IF VirtualInstallmentsForCashflow THEN
          SETFILTER("Installment Scheme",'<>%1','')
        ELSE
          SETRANGE("Generate Installments",TRUE);
        SETRANGE("Installments Generated",FALSE);
        SETFILTER(Status, '%1|%2', Status::Order, Status::Invoice);
        IF FINDSET(TRUE, FALSE) THEN
          REPEAT
            TESTFIELD("Project No.");
            ProjRec.GET("Project No.");
            ProjRec.TESTFIELD(ProjRec."Settlement Method",ProjRec."Settlement Method"::"Fixed Price");
            TESTFIELD(Principal);
            TESTFIELD("Installment Scheme");
            lCustomerRec.GET(Principal);
            lvInstallmentAmount := CalcInstallmentAmount(CurrProj,CurrPlotNo,CurrModel,CurrMainGroup,CurrGroup,CurrSubGroup,CurrOption);
            IF lCustomerRec."Prices Including VAT" THEN
              lvOptionAmount := "Sales Amount incl. VAT" - lvInstallmentAmount
            ELSE
              lvOptionAmount := "Contract Amount" - lvInstallmentAmount;

            IF JobsSetup."No Option Descr. in Installm." THEN
              OptionDescription := ''
            ELSE
              OptionDescription := Description;
            IF VirtualInstallmentsForCashflow THEN
              GenerateProjectInstallments(TempProjectInstallment,
                CurrProj, Principal, "Installment Scheme", '',lvOptionAmount, 0, OptionDescription,'', "Plot No.",
                Option, Group, "Sub Group", "Main Group",'','',0,
                FALSE,0,0) // SESB.I022 KD 18.07.2013
            ELSE BEGIN
              GenerateProjectInstallments(ProjectInstallment,
                CurrProj, Principal, "Installment Scheme", '',lvOptionAmount, 0, OptionDescription,'', "Plot No.",
                Option, Group, "Sub Group", "Main Group",'','',0,
                FALSE,0,0); // SESB.I022 KD 18.07.2013
              IF InstallmentsGenerated THEN BEGIN
                "Installments Generated" := TRUE;
                "Generation Date" := TODAY;
                MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
      END;

      IF NOT FromProj THEN
        Inform();
    END;

    [External]
    PROCEDURE FromExpiredModularOption@1100528600(CurrProj@1100528606 : Code[20];CurrPlotNo@1100528605 : Code[10];CurrModel@1100528604 : Code[20];CurrMainGroup@1100528603 : Code[20];CurrGroup@1100528602 : Code[20];CurrSubGroup@1100528601 : Code[20];CurrOption@1100528600 : Code[20]);
    VAR
      JobsSetup@1100528607 : Record 315;
      lCustomerRec@1100528608 : Record 18;
      OptionDescription@1100528611 : Text;
      InstallmentAmount@1100528609 : Decimal;
      OptionAmount@1100528610 : Decimal;
    BEGIN
      IF NOT FromProj THEN
        IF NOT CONFIRM(Text000,FALSE) THEN
          EXIT;

      JobsSetup.GET;
      WITH OptionRec DO BEGIN
        RESET;
        SETRANGE("Project No.",CurrProj);
        SETFILTER(Option,CurrOption);
        SETFILTER("Plot No.",CurrPlotNo);
        SETFILTER("House Model", CurrModel);
        SETFILTER("Main Group", CurrMainGroup);
        SETFILTER(Group, CurrGroup);
        SETFILTER("Sub Group", CurrSubGroup);
        IF VirtualInstallmentsForCashflow THEN
          SETFILTER("Installment Scheme",'<>%1','')
        ELSE
          SETRANGE("Installments Generated",FALSE);
        SETRANGE(Status, Status::Expired);
        SETRANGE(Modular, TRUE);
        IF FINDSET(TRUE, FALSE) THEN
          REPEAT
            TESTFIELD("Project No.");
            ProjRec.GET("Project No.");
            ProjRec.TESTFIELD(ProjRec."Settlement Method",ProjRec."Settlement Method"::"Fixed Price");
            TESTFIELD(Principal);
            lCustomerRec.GET(Principal);
            InstallmentAmount := CalcInstallmentAmount(CurrProj,CurrPlotNo,CurrModel,CurrMainGroup,CurrGroup,CurrSubGroup,CurrOption);
            IF lCustomerRec."Prices Including VAT" THEN
              OptionAmount := -("Sales Amount incl. VAT" + InstallmentAmount)
            ELSE
              OptionAmount := -("Contract Amount" + InstallmentAmount);

            IF JobsSetup."No Option Descr. in Installm." THEN
              OptionDescription := ''
            ELSE
              OptionDescription := Description;
            IF VirtualInstallmentsForCashflow THEN
              GenerateProjectInstallments(TempProjectInstallment,
                CurrProj, Principal, "Installment Scheme", '', OptionAmount, 0, OptionDescription,'', "Plot No.",
                Option, Group, "Sub Group", "Main Group", '', '', 0,
                FALSE,0,0) // SESB.I022 KD 18.07.2013
            ELSE BEGIN
              GenerateProjectInstallments(ProjectInstallment,
                CurrProj, Principal, "Installment Scheme", '', OptionAmount, 0, OptionDescription,'', "Plot No.",
                Option, Group, "Sub Group", "Main Group", '', '', 0,
                FALSE,0,0); // SESB.I022 KD 18.07.2013
              IF InstallmentsGenerated THEN BEGIN
                "Installments Generated" := TRUE;
                "Generation Date" := TODAY;
                MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
      END;

      IF NOT FromProj THEN
        Inform();
    END;

    [External]
    PROCEDURE FromOptionQuote@1100528400(CurrProj@11012000 : Code[20];CurrPlotNo@1210190004 : Code[10];CurrOptionQuoteNo@1210190000 : Code[20]);
    VAR
      OptionQuoteHeader@1100528400 : Record 11012513;
      Plot@1100528401 : Record 11012500;
      Customer@1100528402 : Record 18;
      OptionQuoteAmount@1100528403 : Decimal;
    BEGIN
      IF NOT FromProj THEN
        IF NOT CONFIRM(Text000, FALSE) THEN
          EXIT;

      WITH OptionQuoteHeader DO BEGIN
        SETCURRENTKEY("Project No.", "Plot No.", "No.");
        SETRANGE("Project No.", CurrProj);
        SETFILTER("Plot No.", CurrPlotNo);
        SETFILTER("No.", CurrOptionQuoteNo);
        IF VirtualInstallmentsForCashflow THEN
          SETFILTER("Installment Scheme", '<>%1', '')
        ELSE
          SETRANGE("Generate Installments", TRUE);
        SETRANGE("Installments Generated", FALSE);
        SETFILTER(Status, '%1|%2', Status::Order, Status::Invoice);
        IF FINDSET(TRUE, FALSE) THEN
          REPEAT
            TESTFIELD("Project No.");
            ProjRec.GET("Project No.");
            ProjRec.TESTFIELD(ProjRec."Settlement Method", ProjRec."Settlement Method"::"Fixed Price");
            TESTFIELD("Plot No.");
            Plot.GET("Project No.", "Plot No.");
            Plot.TESTFIELD(Principal);
            TESTFIELD("Installment Scheme");
            CheckStatusOfLines;
            Customer.GET(Plot.Principal);
            IF Customer."Prices Including VAT" THEN BEGIN
              CALCFIELDS("Quote Amount incl. VAT");
              OptionQuoteAmount := "Quote Amount incl. VAT";
            END ELSE BEGIN
              CALCFIELDS("Quote Amount excl. VAT");
              OptionQuoteAmount := "Quote Amount excl. VAT";
            END;
            IF VirtualInstallmentsForCashflow THEN
              GenerateProjectInstallments(
                TempProjectInstallment, CurrProj, Plot.Principal, "Installment Scheme", '',
                OptionQuoteAmount, 0, '', '', "Plot No.", '', '', '', '', OptionQuoteHeader."No.", '', 0,
                FALSE,0,0) // SESB.I022 KD 18.07.2013
            ELSE BEGIN
              GenerateProjectInstallments(
                ProjectInstallment, CurrProj, Plot.Principal, "Installment Scheme", '',
                OptionQuoteAmount, 0, '', '', "Plot No.", '', '', '', '', OptionQuoteHeader."No.", '', 0,
                FALSE,0,0); // SESB.I022 KD 18.07.2013
              IF InstallmentsGenerated THEN BEGIN
                "Installments Generated" := TRUE;
                "Generation Date" := TODAY;
                MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
      END;
      IF NOT FromProj THEN
        Inform();
    END;

    PROCEDURE FromProject@4(CurrProj@11012000 : Code[20]);
    BEGIN
      IF NOT CONFIRM(Text000,FALSE) THEN
        EXIT;
      FromProj := TRUE;
      FromPrincipal(CurrProj,'');
      FromPlotNumber(CurrProj,'','');
      FromExtension(CurrProj,'');
      FromOption(CurrProj,'','','','','','');
      FromOptionQuote(CurrProj,'','');
      Inform();
    END;

    [External]
    PROCEDURE FromCashFlow@1100527701(CurrProj@1100527700 : Code[20];VAR VirtualProjectInstallment@1100527701 : TEMPORARY Record 11012018);
    BEGIN
      FromProj := TRUE;
      VirtualInstallmentsForCashflow := TRUE;
      FromPrincipal(CurrProj,'');
      FromPlotNumber(CurrProj,'','');
      FromExtension(CurrProj,'');
      FromOption(CurrProj,'','','','','','');
      FromOptionQuote(CurrProj,'','');

      VirtualProjectInstallment.COPY(TempProjectInstallment,TRUE);
    END;

    PROCEDURE GenerateProjectInstallments@5(VAR ProjInstalmRec@1100527701 : Record 11012018;CurrProj@11012000 : Code[20];CurrentPrincipal@11012001 : Code[20];CurrScheme@11012002 : Code[10];CurrCurrency@1100525001 : Code[20];CurrContractPrice@11012003 : Decimal;CurPlotPrice@11012004 : Decimal;ExtraDescription@11012005 : Text[100];Extension@11012006 : Code[10];CurrPlotNo@11012007 : Code[10];Option@11012008 : Code[20];OptionGroup@11012009 : Code[20];OptionSubGroup@11012010 : Code[20];OptionMainGroup@1210190002 : Code[20];OptionQuoteNo@1100528400 : Code[20];CommissionNo@1210190003 : Code[20];VATAmountLongLease@1100485000 : Decimal;CreateFinalInstalment@1100285002 : Boolean;LineWithheldAmtPerc@1100285001 : Decimal;TotalWithheldAmtPerc@1100285000 : Decimal);
    VAR
      lvJobSetupRec@1100525000 : Record 315;
      NrOfInst@1210190001 : Integer;
      InstCounter@1100527700 : Integer;
      TotInst@1210190000 : Decimal;
      CreateFinalInstalmentLoc@1100285007 : Boolean;
      TotalWithheldAmt@1100285006 : Decimal;
      InsertedWithheldAmt@1100285005 : Decimal;
      LineWithheldAmt@1100285004 : Decimal;
      WithheldAmtRercLoc@1100285003 : Decimal;
    BEGIN
      SaveElemCheckProjNo := '';
      SaveElemCheckPrincipal := '';
      SaveElemCheckPlotNo := '';

      // SESB.I022 KD 18.07.2013 >>
      CreateFinalInstalmentLoc := CreateFinalInstalment AND (LineWithheldAmtPerc <> 0) AND (TotalWithheldAmtPerc <> 0);
      IF CreateFinalInstalmentLoc THEN BEGIN
        TotalWithheldAmt := ROUND(CurrContractPrice * TotalWithheldAmtPerc / 100);
        InsertedWithheldAmt := 0;
      END;
      // SESB.I022 KD 18.07.2013 <<

      lvJobSetupRec.GET;

      InstallmentsGenerated := FALSE;
      InstalmRec.SETRANGE(Scheme,CurrScheme);
      InstalmRec.SETRANGE("Installment No.");
      IF InstalmRec.FINDSET THEN BEGIN
        InstalmRec.CALCFIELDS("Total percentage");
        IF (InstalmRec."Total percentage" <> 0) THEN BEGIN
          IF (NOT PercentageQuestion) AND (InstalmRec."Total percentage" <> 100) THEN BEGIN
            IF NOT CONFIRM(Text001, FALSE, InstalmRec.Scheme) THEN
              ERROR('')
            ELSE
              PercentageQuestion := TRUE;
          END;
        END;
        IF (InstalmRec."Installment No." > '0') AND (CurPlotPrice <> 0) THEN
          ERROR(Text002, InstalmRec.Scheme);
        NrOfInst := InstalmRec.COUNT;
        TotInst := 0;

        REPEAT
          IF lvJobSetupRec."Cost Component Mandatory" THEN
            InstalmRec.TESTFIELD("Cost Component");
          IF InstalmRec."Installment No." = '0' THEN BEGIN
            //Installment 0 = Plot Installment
            IF CurPlotPrice = 0 THEN
              CheckProgress(0);
            CLEAR(ProjInstalmRec);
            IF ProjInstalmRec.GET(CurrProj,CurrentPrincipal,CurrPlotNo,GroundInstallmentNo) THEN BEGIN
              ProjInstalmRec.VALIDATE("Currency Code", CurrCurrency);
              ProjInstalmRec.VALIDATE(
                "Installment Amount (LCY)", ProjInstalmRec."Installment Amount (LCY)" + CurPlotPrice);
              ProjInstalmRec.MODIFY(TRUE);
            END ELSE BEGIN
              ProjInstalmRec.INIT;
              ProjInstalmRec."Project No." := CurrProj;
              ProjInstalmRec.Principal := CurrentPrincipal;
              ProjInstalmRec."Plot No." := CurrPlotNo;
              ProjInstalmRec."Extension Contract" := Extension;
              ProjInstalmRec.Option := Option;
              ProjInstalmRec."Main Group" := OptionMainGroup;
              ProjInstalmRec.Group := OptionGroup;
              ProjInstalmRec."Sub Group" := OptionSubGroup;
              ProjInstalmRec."Option Quote No." := OptionQuoteNo;
              ProjInstalmRec.Element := FillElementCode(CurrProj,CurrentPrincipal,CurrPlotNo,InstalmRec.Element,Option,Extension);
              ProjInstalmRec.Scheme := CurrScheme;
              ProjInstalmRec."Installment No." := GroundInstallmentNo;
              ProjInstalmRec.Description := InstalmRec.Description;
              //>> 190122 ITERO.SB RFC-1152
              ProjInstalmRec.CALCFIELDS("Description Extension Contract");
              IF ProjInstalmRec."Description Extension Contract" <> '' THEN
                ProjInstalmRec.Description := ProjInstalmRec."Description Extension Contract";
              //<<
              ProjInstalmRec."Cost Object" := GetCostObject(InstalmRec."Cost Object", CurrProj, CurrentPrincipal);
              ProjInstalmRec."Cost Component" := InstalmRec."Cost Component";
              ProjInstalmRec."Last Installment" := InstalmRec."Last Installment";
              ProjInstalmRec."Commission No." := CommissionNo;
              ProjInstalmRec."VAT Prod. Posting Group" := GetProdPostingGroup(CurrProj,CurrentPrincipal,Extension);
              ProjInstalmRec.VALIDATE("Currency Code", CurrCurrency);
              ProjInstalmRec.VALIDATE("Installment Amount (LCY)",CurPlotPrice);
              // SESB.I022 KD 18.07.2013 >>
              IF CreateFinalInstalmentLoc THEN
                IF InsertedWithheldAmt < TotalWithheldAmt THEN BEGIN
                  LineWithheldAmt := ROUND(ProjInstalmRec."Installment Amount" * LineWithheldAmtPerc / 100);
                  IF LineWithheldAmt + InsertedWithheldAmt < TotalWithheldAmt THEN BEGIN
                    ProjInstalmRec.VALIDATE("Withheld Amount",LineWithheldAmt);
                    InsertedWithheldAmt += LineWithheldAmt;
                  END ELSE BEGIN
                    ProjInstalmRec.VALIDATE("Withheld Amount",TotalWithheldAmt - InsertedWithheldAmt);
                    InsertedWithheldAmt := TotalWithheldAmt;
                  END;
                END;
              // SESB.I022 KD 18.07.2013 <<
              ProjInstalmRec.VALIDATE("VAT Amount Long Lease",VATAmountLongLease);
              ProjInstalmRec."Installment Scheme SerNo." := InstalmRec."Installment No.";
              ProjInstalmRec.INSERT(TRUE);
            END;
          END ELSE BEGIN
            //Installment 1..
            IF CurrContractPrice = 0 THEN
              CheckProgress(1);
            ProjInstalmRec.RESET;
            ProjInstalmRec.INIT;
            ProjInstalmRec."Project No." := CurrProj;
            ProjInstalmRec.Principal := CurrentPrincipal;
            ProjInstalmRec."Plot No." := CurrPlotNo;
            ProjInstalmRec.Scheme := CurrScheme;
            IF VirtualInstallmentsForCashflow THEN
              ProjInstalmRec."Installment No." := GetFreeVirtualInstallmentNo(ProjInstalmRec,CurrProj,CurrentPrincipal,CurrPlotNo)
            ELSE
              ProjInstalmRec."Installment No." := GetFreeInstallmentNo(CurrProj, CurrentPrincipal, CurrPlotNo);
            ProjInstalmRec."Extension Contract" := Extension;
            ProjInstalmRec.Option := Option;
            ProjInstalmRec."Main Group" := OptionMainGroup;
            ProjInstalmRec.Group := OptionGroup;
            ProjInstalmRec."Sub Group" := OptionSubGroup;
            ProjInstalmRec."Option Quote No." := OptionQuoteNo;
            ProjInstalmRec.Element := FillElementCode(CurrProj, CurrentPrincipal, CurrPlotNo, InstalmRec.Element,Option,Extension);
            ProjInstalmRec.Description := InstalmRec.Description;
            ProjInstalmRec.Description := ProjInstalmRec.Description +
              COPYSTR(' ' + ExtraDescription,1,MAXSTRLEN(ProjInstalmRec.Description)-STRLEN(ProjInstalmRec.Description));
            //>> 190122 ITERO.SB RFC-1152
            ProjInstalmRec.CALCFIELDS("Description Extension Contract");
            IF ProjInstalmRec."Description Extension Contract" <> '' THEN
              ProjInstalmRec.Description := ProjInstalmRec."Description Extension Contract";
            //<<
            ProjInstalmRec."Cost Object" := GetCostObject(InstalmRec."Cost Object", CurrProj, CurrentPrincipal);
            ProjInstalmRec."Cost Component" := InstalmRec."Cost Component";
            ProjInstalmRec."Last Installment" := InstalmRec."Last Installment";
            ProjInstalmRec."Installment Scheme SerNo." := InstalmRec."Installment No.";
            ProjInstalmRec."VAT Prod. Posting Group" := GetProdPostingGroup(CurrProj,CurrentPrincipal,Extension);
            InstalmRec.CALCFIELDS("Total percentage");
            ProjInstalmRec.VALIDATE("Currency Code", CurrCurrency);

            IF (NrOfInst = InstCounter + 1) AND (InstalmRec."Total percentage" = 100) THEN
              ProjInstalmRec.VALIDATE("Installment Amount",ROUND(CurrContractPrice - TotInst))
            ELSE
              ProjInstalmRec.VALIDATE("Installment Amount",ROUND(InstalmRec.Percentage/100 * CurrContractPrice));

            // SESB.I022 KD 18.07.2013 >>
            IF CreateFinalInstalmentLoc THEN
              IF InsertedWithheldAmt < TotalWithheldAmt THEN BEGIN
                LineWithheldAmt := ROUND(ProjInstalmRec."Installment Amount" * LineWithheldAmtPerc / 100);
                IF LineWithheldAmt + InsertedWithheldAmt < TotalWithheldAmt THEN BEGIN
                  //>> 170710 ITERO.SB
                  //ProjInstalmRec.VALIDATE("Withheld Amount",LineWithheldAmt);
                  //<<
                  InsertedWithheldAmt += LineWithheldAmt;
                END ELSE BEGIN
                  //>> 170710 ITERO.SB
                  //ProjInstalmRec.VALIDATE("Withheld Amount",TotalWithheldAmt - InsertedWithheldAmt);
                  //<<
                  InsertedWithheldAmt := TotalWithheldAmt;
                END;
              END;
            // SESB.I022 KD 18.07.2013 <<

            ProjInstalmRec."Commission No." := CommissionNo;
            ProjInstalmRec."Percentage Contract Amount" := InstalmRec.Percentage;
            ProjInstalmRec.INSERT(TRUE);

            TotInst := TotInst + ProjInstalmRec."Installment Amount";
          END;
          InstallmentsGenerated := TRUE;
          InstCounter += 1;
          CounterInstallmentsCreated += 1;
        UNTIL InstalmRec.NEXT = 0;
      END;

      // SESB.I022 KD 18.07.2013 >>
      IF CreateFinalInstalmentLoc THEN
        CalcFinalInstalment(
          CurrProj,CurrentPrincipal,CurrCurrency,Extension,CommissionNo,TotalWithheldAmtPerc,
          InsertedWithheldAmt,CurrContractPrice,lvJobSetupRec."Final Installment Cost Object")
      // SESB.I022 KD 18.07.2013 <<
    END;

    [External]
    PROCEDURE GenerateProjPlotInstallments@1210190002(VAR ProjInstalmRec@1100527700 : Record 11012018;CurrProj@11012000 : Code[20];CurrentPrincipal@11012001 : Code[20];CurrScheme@11012002 : Code[10];CurrContractPrice@11012003 : Decimal;CurPlotPrice@11012004 : Decimal;ExtraDescription@11012005 : Text[100];Extension@11012006 : Code[10];CurrPlotNo@11012007 : Code[10];Option@11012008 : Code[20];OptionGroup@11012009 : Code[20];OptionSubGroup@11012010 : Code[20];OptionMainGroup@1210190011 : Code[20];VATAmountLongLease@1100485000 : Decimal);
    VAR
      PlotInstalmRec@1210190002 : Record 11012510;
      lJobSetupRec@1210190003 : Record 315;
      lJobRec@1210190004 : Record 11072003;
      lPlotRec@1210190005 : Record 11012500;
      lCustomerRec@1210190006 : Record 18;
      lvProjPrinRec@1100485001 : Record 11012005;
      lPaymentTermsRec@1210190007 : Record 3;
      lDimValRec@1210190010 : Record 349;
      NrOfInst@1210190001 : Integer;
      TotInst@1210190000 : Decimal;
      InstCounter@1100527701 : Integer;
      lInstallmAmount@1210190009 : Decimal;
      lDays@1210190008 : Integer;
      PaymentTermsCode@1210190012 : Code[10];
    BEGIN
      SaveElemCheckProjNo := '';
      SaveElemCheckPrincipal := '';
      SaveElemCheckPlotNo := '';

      InstallmentsGenerated := FALSE;
      PlotInstalmRec.SETRANGE("Project No.",CurrProj);
      PlotInstalmRec.SETRANGE("Plot No.",CurrPlotNo);

      lJobSetupRec.GET;
      lJobRec.GET(CurrProj);
      lPlotRec.GET(CurrProj,CurrPlotNo);
      lCustomerRec.GET(lPlotRec.Principal);

      lJobSetupRec.TESTFIELD("Cost Object Interest Contract");
      lJobRec.TESTFIELD("VAT Prod. P. Group Inst. Int.");
      lCustomerRec.TESTFIELD("Payment Terms Code");

      IF PlotInstalmRec.FINDSET THEN BEGIN
        PlotInstalmRec.CALCFIELDS("Total percentage");
        IF (PlotInstalmRec."Total percentage" <> 0) THEN BEGIN
          IF (NOT PercentageQuestion) AND (PlotInstalmRec."Total percentage" <> 100) THEN BEGIN
            IF NOT CONFIRM(Text008, FALSE, CurrProj, CurrPlotNo) THEN
              ERROR('')
            ELSE
              PercentageQuestion := TRUE;
          END;
        END;
        IF (PlotInstalmRec."Installment No." > '0') AND (CurPlotPrice <> 0) THEN
          ERROR(Text009,  CurrProj, CurrPlotNo);
        NrOfInst := PlotInstalmRec.COUNT;
        TotInst := 0;
        REPEAT
          IF lJobSetupRec."Cost Component Mandatory" THEN
            PlotInstalmRec.TESTFIELD("Cost Component");
          IF PlotInstalmRec."Installment No." = '0' THEN BEGIN
            //Installment 0 = Plot Installment
            IF CurPlotPrice = 0 THEN
              CheckProgress(0);
            CLEAR(ProjInstalmRec);
            IF ProjInstalmRec.GET(CurrProj,CurrentPrincipal,CurrPlotNo,GroundInstallmentNo) THEN BEGIN
              ProjInstalmRec.VALIDATE(
                "Installment Amount (LCY)", ProjInstalmRec."Installment Amount (LCY)" + CurPlotPrice);
              ProjInstalmRec.MODIFY(TRUE);
            END ELSE BEGIN
              ProjInstalmRec.INIT;
              ProjInstalmRec."Project No." := CurrProj;
              ProjInstalmRec.Principal := CurrentPrincipal;
              ProjInstalmRec."Plot No." := CurrPlotNo;
              ProjInstalmRec."Extension Contract" := Extension;
              ProjInstalmRec.Option := Option;
              ProjInstalmRec."Main Group" := OptionMainGroup;
              ProjInstalmRec.Group := OptionGroup;
              ProjInstalmRec."Sub Group" := OptionSubGroup;
              ProjInstalmRec.Element := FillElementCode(CurrProj,CurrentPrincipal,CurrPlotNo,PlotInstalmRec.Element,Option,Extension);
              ProjInstalmRec.Scheme := CurrScheme;
              ProjInstalmRec."Installment No." := GroundInstallmentNo;
              ProjInstalmRec.Description := PlotInstalmRec.Description;
              ProjInstalmRec."Cost Object" := GetCostObject(PlotInstalmRec."Cost Object", CurrProj, CurrentPrincipal);
              ProjInstalmRec."Cost Component" := PlotInstalmRec."Cost Component";
              ProjInstalmRec."Last Installment" := PlotInstalmRec."Last Installment";
              ProjInstalmRec."VAT Prod. Posting Group" := PlotInstalmRec."VAT Prod. Posting Group";
              ProjInstalmRec.VALIDATE("Installment Amount (LCY)",CurPlotPrice);
              ProjInstalmRec.VALIDATE("VAT Amount Long Lease",VATAmountLongLease);
              ProjInstalmRec."Due Date Base" := lPlotRec."Due Date Plot";
              ProjInstalmRec."Installment Scheme SerNo." := PlotInstalmRec."Installment No.";
              ProjInstalmRec.INSERT(TRUE);
            END;
          END ELSE BEGIN
            //Installment 1..
            IF CurrContractPrice = 0 THEN
              CheckProgress(1);
            ProjInstalmRec.RESET;
            ProjInstalmRec.INIT;
            ProjInstalmRec."Project No." := CurrProj;
            ProjInstalmRec.Principal := CurrentPrincipal;
            ProjInstalmRec."Plot No." := CurrPlotNo;
            ProjInstalmRec.Scheme := CurrScheme;
            IF VirtualInstallmentsForCashflow THEN
              ProjInstalmRec."Installment No." := GetFreeVirtualInstallmentNo(ProjInstalmRec,CurrProj,CurrentPrincipal,CurrPlotNo)
            ELSE
              ProjInstalmRec."Installment No." := GetFreeInstallmentNo(CurrProj, CurrentPrincipal, CurrPlotNo);
            ProjInstalmRec."Extension Contract" := Extension;
            ProjInstalmRec.Option := Option;
            ProjInstalmRec."Main Group" := OptionMainGroup;
            ProjInstalmRec.Group := OptionGroup;
            ProjInstalmRec."Sub Group" := OptionSubGroup;
            ProjInstalmRec.Element := FillElementCode(CurrProj,CurrentPrincipal,CurrPlotNo,PlotInstalmRec.Element,Option,Extension);
            ProjInstalmRec.Description := PlotInstalmRec.Description;
            ProjInstalmRec.Description := ProjInstalmRec.Description +
              COPYSTR(' ' + ExtraDescription,1,MAXSTRLEN(ProjInstalmRec.Description)-STRLEN(ProjInstalmRec.Description));
            ProjInstalmRec."Cost Object" := GetCostObject(PlotInstalmRec."Cost Object", CurrProj, CurrentPrincipal);
            ProjInstalmRec."Cost Component" := PlotInstalmRec."Cost Component";
            ProjInstalmRec."Last Installment" := PlotInstalmRec."Last Installment";
            ProjInstalmRec."VAT Prod. Posting Group" := PlotInstalmRec."VAT Prod. Posting Group";
            PlotInstalmRec.CALCFIELDS("Total percentage");
            IF (NrOfInst = InstCounter + 1) AND (PlotInstalmRec."Total percentage" = 100) THEN
              ProjInstalmRec.VALIDATE("Installment Amount (LCY)",ROUND(CurrContractPrice - TotInst))
            ELSE
              ProjInstalmRec.VALIDATE("Installment Amount (LCY)",ROUND(PlotInstalmRec.Percentage/100 * CurrContractPrice));
            ProjInstalmRec."Due Date Base" := PlotInstalmRec."Due Date";
            ProjInstalmRec."Installment Scheme SerNo." := PlotInstalmRec."Installment No.";
            ProjInstalmRec."Percentage Contract Amount" := PlotInstalmRec.Percentage;
            ProjInstalmRec.INSERT(TRUE);

            TotInst := TotInst + ProjInstalmRec."Installment Amount (LCY)";
          END;
          InstallmentsGenerated := TRUE;
          InstCounter += 1;
          CounterInstallmentsCreated += 1;
        UNTIL PlotInstalmRec.NEXT = 0;

        IF lPlotRec."Contract Date" > 0D THEN BEGIN
          IF (lCustomerRec."Payment Terms Code" <> '') AND
             (lJobSetupRec."Cost Object Interest Contract" <> '') AND
             (lJobRec."VAT Prod. P. Group Inst. Int." <> '') THEN
          BEGIN
            lInstallmAmount := 0;
            ProjInstalmRec.RESET;
            ProjInstalmRec.SETRANGE("Project No.",CurrProj);
            ProjInstalmRec.SETFILTER(Principal,CurrentPrincipal);
            ProjInstalmRec.SETRANGE("Plot No.",CurrPlotNo);
            ProjInstalmRec.SETRANGE("Installment No.");
            IF ProjInstalmRec.FINDSET(TRUE, FALSE) THEN BEGIN
              REPEAT
                IF (ProjInstalmRec."Due Date Base" <> 0D) THEN BEGIN
                  IF ProjInstalmRec."Installment No." <> GroundInstallmentNo THEN BEGIN
                    PaymentTermsCode := ProjInstalmRec.GetPaymentTermsCode();
                    lPaymentTermsRec.GET(PaymentTermsCode);
                    ProjInstalmRec."Due Date Actual" := CALCDATE(lPaymentTermsRec."Due Date Calculation",ProjInstalmRec."Due Date Base");
                  END ELSE
                    ProjInstalmRec."Due Date Actual" := ProjInstalmRec."Due Date Base";

                  IF (ProjInstalmRec."Due Date Actual" < lPlotRec."Contract Date") THEN BEGIN
                    lDays := lPlotRec."Contract Date" - ProjInstalmRec."Due Date Actual";
                    IF lCustomerRec."Prices Including VAT" THEN BEGIN
                      IF NOT lvProjPrinRec.GET(CurrProj, CurrentPrincipal) THEN
                        lvProjPrinRec.INIT;
                      IF (lvProjPrinRec."VAT Bus. Posting Group" <> '') THEN
                        VATPostingSetupRec.GET(lvProjPrinRec."VAT Bus. Posting Group", ProjInstalmRec."VAT Prod. Posting Group")
                      ELSE
                        VATPostingSetupRec.GET(lJobRec."VAT Bus. Posting Group", ProjInstalmRec."VAT Prod. Posting Group");
                      // Get VAT from Installment.
                      HelpInstallmAmount := 100 * (ProjInstalmRec."Installment Amount (LCY)"/(100+VATPostingSetupRec."VAT %"));
                    END ELSE
                      HelpInstallmAmount := ProjInstalmRec."Installment Amount (LCY)";
                    IF lPlotRec."Div. Int. Before Contract Date" = 0 THEN
                      lInstallmAmount := lInstallmAmount +
                                         (HelpInstallmAmount *
                                          (ProjRec."Interest Before Contract Date"/100) *
                                          (lDays/365)
                                         )
                    ELSE
                      lInstallmAmount := lInstallmAmount +
                                         (HelpInstallmAmount *
                                          (lPlotRec."Div. Int. Before Contract Date"/100) *
                                          (lDays/365)
                                         )

                  END;
                  ProjInstalmRec.MODIFY;
                END;
              UNTIL ProjInstalmRec.NEXT = 0;

              IF lInstallmAmount <> 0 THEN BEGIN

                lDimValRec.SETCURRENTKEY(Code,"Global Dimension No.");
                lDimValRec.INIT;
                IF lJobSetupRec."Cost Object Interest Contract" <> '' THEN BEGIN
                  lDimValRec.SETRANGE(Code,lJobSetupRec."Cost Object Interest Contract");
                  lDimValRec.SETRANGE("Global Dimension No.",2);
                  lDimValRec.FINDFIRST;
                END;

                ProjInstalmRec.RESET;
                ProjInstalmRec.INIT;
                ProjInstalmRec."Project No." := CurrProj;
                ProjInstalmRec.Principal := CurrentPrincipal;
                ProjInstalmRec."Plot No." := CurrPlotNo;
                ProjInstalmRec.Scheme := CurrScheme;
                IF VirtualInstallmentsForCashflow THEN
                  ProjInstalmRec."Installment No." := GetFreeVirtualInstallmentNo(ProjInstalmRec,CurrProj,CurrentPrincipal,CurrPlotNo)
                ELSE
                  ProjInstalmRec."Installment No." := GetFreeInstallmentNo(CurrProj, CurrentPrincipal, CurrPlotNo);
                ProjInstalmRec."Extension Contract" := Extension;
                ProjInstalmRec.Option := Option;
                ProjInstalmRec."Main Group" := OptionMainGroup;
                ProjInstalmRec.Group := OptionGroup;
                ProjInstalmRec."Sub Group" := OptionSubGroup;
                ProjInstalmRec.Element := FillElementCode(CurrProj, CurrentPrincipal, CurrPlotNo, '', Option, Extension);
                ProjInstalmRec.Description := lDimValRec.Name;
                ProjInstalmRec."Cost Object" := lJobSetupRec."Cost Object Interest Contract";
                ProjInstalmRec."Last Installment" := FALSE;
                ProjInstalmRec."VAT Prod. Posting Group" := lJobRec."VAT Prod. P. Group Inst. Int.";
                IF lCustomerRec."Prices Including VAT" THEN BEGIN
                  IF NOT lvProjPrinRec.GET(CurrProj, CurrentPrincipal) THEN
                    lvProjPrinRec.INIT;
                  IF (lvProjPrinRec."VAT Bus. Posting Group" <> '') THEN
                    VATPostingSetupRec.GET(lvProjPrinRec."VAT Bus. Posting Group", ProjInstalmRec."VAT Prod. Posting Group")
                  ELSE
                    VATPostingSetupRec.GET(lJobRec."VAT Bus. Posting Group", ProjInstalmRec."VAT Prod. Posting Group");
                  IF VATPostingSetupRec."VAT %" <> 0 THEN
                    lInstallmAmount := lInstallmAmount + (lInstallmAmount * VATPostingSetupRec."VAT %"  /100);
                END;
                ProjInstalmRec.VALIDATE("Installment Amount (LCY)",ROUND(lInstallmAmount));
                ProjInstalmRec."Due Date Base" := lPlotRec."Contract Date";
                ProjInstalmRec."Due Date Actual":= CALCDATE(lPaymentTermsRec."Due Date Calculation",ProjInstalmRec."Due Date Base");
                ProjInstalmRec."Interest Installment" := ProjInstalmRec."Interest Installment"::"Before Contract Date";
                ProjInstalmRec.INSERT(TRUE);

                TotInst := TotInst + ProjInstalmRec."Installment Amount (LCY)";
                InstallmentsGenerated := TRUE;
                CounterInstallmentsCreated += 1;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE Inform@7();
    BEGIN
      IF CounterInstallmentsCreated = 0 THEN
        MESSAGE(Text003)
      ELSE
        MESSAGE(Text004,CounterInstallmentsCreated);
    END;

    PROCEDURE CheckProgress@6(lvInstalm@11012000 : Integer);
    BEGIN
      IF lvInstalm = 0 THEN BEGIN
        IF PriceQuestion1 = FALSE THEN
          IF CONFIRM(Text005, TRUE) THEN
            PriceQuestion1 := TRUE
          ELSE
            ERROR(Text006);
      END ELSE BEGIN
        IF PriceQuestion2 = FALSE THEN
          IF CONFIRM(Text007, TRUE) THEN
            PriceQuestion2 := TRUE
          ELSE
            ERROR(Text006);
      END;
    END;

    PROCEDURE GetProdPostingGroup@9(CurrProj@11012000 : Code[20];CurrentPrincipal@11012001 : Code[20];ExtContractNo@1210190000 : Code[10]) : Code[10];
    VAR
      ExtContr@1210190001 : Record 11012004;
    BEGIN
      IF InstalmRec."VAT Prod. Posting Group" <> '' THEN
        EXIT(InstalmRec."VAT Prod. Posting Group");

      //*C-026129.sn
      IF ExtContractNo <> '' THEN BEGIN
        IF ExtContr.GET(CurrProj, ExtContractNo) THEN BEGIN
          IF ExtContr."VAT Prod. Posting Group" <> '' THEN
            EXIT(ExtContr."VAT Prod. Posting Group");
        END;
      END;
      //*C-026129.en

      IF (ProjPrincipalRec."Project No." <> CurrProj) OR
         (ProjPrincipalRec.Principal <> CurrentPrincipal)
      THEN
        // SESB.I022 KD 08.09.2013 >>
        // ProjPrincipalRec.GET(CurrProj,CurrentPrincipal);
        IF NOT ProjPrincipalRec.GET(CurrProj,CurrentPrincipal) THEN
          CLEAR(ProjPrincipalRec);
        // SESB.I022 KD 08.09.2013 <<

      EXIT(ProjPrincipalRec."VAT Prod. Posting Group");
    END;

    [External]
    PROCEDURE FillElementCode@1210190003(IProjectNo@1210190000 : Code[20];IPrincipal@1210190007 : Code[20];IPlotNo@1210190008 : Code[10];IElement@1210190003 : Code[20];IOption@1210190002 : Code[20];IExtensionContract@1100485000 : Code[10]) : Code[20];
    VAR
      lvProjRec@1210190001 : Record 11072003;
      lvProjInstalmRec@1210190005 : Record 11012018;
      lvCreateProjElemCU@1210190004 : Codeunit 11012058;
      lvInstallNo@1210190006 : Code[10];
    BEGIN
      IF (IProjectNo = '') THEN
        EXIT('');

      IF NOT lvProjRec.GET(IProjectNo) THEN
        lvProjRec.INIT;


      IF (IElement <> '') THEN BEGIN
        //IF lvProjRec."Progress from Instal. Progress" AND (IOption = '') THEN BEGIN  //C-019166.o
        IF lvProjRec."Progress from Instal. Progress" AND lvProjRec."Element per Installment" AND (IOption = '') THEN BEGIN //C-019166.n
          IF NOT lvProjInstalmRec.CheckElementAllowedOnInstall(
                   IProjectNo, IPrincipal, IPlotNo, IElement, IOption, IExtensionContract, '', lvInstallNo)
          THEN BEGIN
            IF (IProjectNo <> SaveElemCheckProjNo) OR
               (IPrincipal <> SaveElemCheckPrincipal) OR
               (IPlotNo <> SaveElemCheckPlotNo)
           THEN BEGIN
              SaveElemCheckProjNo := IProjectNo;
              SaveElemCheckPrincipal := IPrincipal;
              SaveElemCheckPlotNo := IPlotNo;
              MESSAGE(Text011, IProjectNo, IPrincipal, IPlotNo);
            END;
            EXIT('');
          END;
        END;
        lvCreateProjElemCU.CreateProjElementWithParents(IProjectNo, IElement);
        EXIT(IElement);
      END ELSE BEGIN
        //IF NOT lvProjRec."Progress from Instal. Progress" THEN  //C-019166.o
        IF (NOT lvProjRec."Progress from Instal. Progress") OR (NOT lvProjRec."Element per Installment") THEN //C-019166.n
          EXIT(GetDefaultElement(IProjectNo));
      END;

      EXIT('');
    END;

    [External]
    PROCEDURE GetDefaultElement@1210190000(CurrProj@1210190000 : Code[20]) : Code[20];
    VAR
      ProjElemRec@1210190001 : Record 11012010;
    BEGIN
      ProjElemRec.SETRANGE("Project No.", CurrProj);
      ProjElemRec.SETRANGE(Level, 0);
      ProjElemRec.SETRANGE(Blocked, FALSE);  //C015872.n
      IF ProjElemRec.FINDFIRST THEN
        EXIT(ProjElemRec.Element)
      ELSE
        EXIT('');
    END;

    [External]
    PROCEDURE FromExtensionNotAsk@1100525001(CurrProj@1100525000 : Code[20];CurrContract@1100525001 : Code[10]);
    VAR
      ExtensionContract@1100525003 : Record 11012004;
    BEGIN
      //kzwerver, 08-12-2010, FO Release Extension Contract
      FromProj := TRUE;
      FromExtension(CurrProj, CurrContract);
      FromProj := FALSE;

      IF (NOT bSilent) THEN BEGIN  //DP00793-RFC11
        IF (CounterInstallmentsCreated = 0) THEN
          MESSAGE(Text003 + '\' + Text012, '', ExtensionContract.TABLECAPTION)
        ELSE
          MESSAGE(Text004 + '\' + Text012, CounterInstallmentsCreated, ExtensionContract.TABLECAPTION);
      END;
    END;

    [External]
    PROCEDURE FromOptionNotAsk@1210190001(CurrProj@11012000 : Code[20];CurrPlotNo@1210190004 : Code[10];CurrModel@1210190003 : Code[20];CurrMainGroup@1210190002 : Code[20];CurrGroup@1210190001 : Code[20];CurrSubGroup@1210190000 : Code[20];CurrOption@11012001 : Code[20]);
    BEGIN
      FromProj := TRUE;
      FromOption(CurrProj,CurrPlotNo,CurrModel,CurrMainGroup,CurrGroup,CurrSubGroup,CurrOption);
      FromProj := FALSE;
    END;

    [External]
    PROCEDURE CalcInstallmentAmount@1100485000(CurrProj@1100485006 : Code[20];CurrPlotNo@1100485005 : Code[10];CurrModel@1100485004 : Code[20];CurrMainGroup@1100485003 : Code[20];CurrGroup@1100485002 : Code[20];CurrSubGroup@1100485001 : Code[20];CurrOption@1100485000 : Code[20]) rAmount : Decimal;
    VAR
      lvProjInstallmentRec@1100485007 : Record 11012018;
    BEGIN
      rAmount := 0;
      WITH lvProjInstallmentRec DO BEGIN
        SETRANGE("Project No.",CurrProj);
        SETRANGE("Plot No.",CurrPlotNo);
        SETRANGE("Main Group",CurrMainGroup);
        SETRANGE(Group,CurrGroup);
        SETRANGE("Sub Group",CurrSubGroup);
        SETRANGE(Option,CurrOption);
        IF FINDSET THEN
          REPEAT
            rAmount += lvProjInstallmentRec."Installment Amount (LCY)";
          UNTIL NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE GetFreeInstallmentNo@1100485001(IProjectNo@1100485002 : Code[20];IPrincipal@1100485001 : Code[20];IPlotNo@1100485000 : Code[10]) : Code[10];
    VAR
      lvProjInstallmentRec@1100485003 : Record 11012018;
    BEGIN
      lvProjInstallmentRec.SETRANGE("Project No.", IProjectNo);
      lvProjInstallmentRec.SETFILTER(Principal, IPrincipal);
      lvProjInstallmentRec.SETRANGE("Plot No.", IPlotNo);
      IF NOT lvProjInstallmentRec.FINDLAST THEN
        EXIT('1');

      //* 'REPEAT - UNTIL' is needed for SQL environment (for different sorting in SQL).
      //* Read till non existing number found.
      REPEAT
        lvProjInstallmentRec."Installment No." := INCSTR(lvProjInstallmentRec."Installment No.")
      UNTIL NOT lvProjInstallmentRec.GET(IProjectNo, IPrincipal, IPlotNo, lvProjInstallmentRec."Installment No.");

      EXIT(lvProjInstallmentRec."Installment No.");
    END;

    [External]
    PROCEDURE GetFreeVirtualInstallmentNo@1100527700(VAR TempProjectInstallment@1100527700 : TEMPORARY Record 11012018;IProjectNo@1100485002 : Code[20];IPrincipal@1100485001 : Code[20];IPlotNo@1100485000 : Code[10]) : Code[10];
    VAR
      TempProjectInstallment2@1100527701 : TEMPORARY Record 11012018;
    BEGIN
      TempProjectInstallment2.COPY(TempProjectInstallment,TRUE);

      TempProjectInstallment2.SETRANGE("Project No.", IProjectNo);
      TempProjectInstallment2.SETFILTER(Principal, IPrincipal);
      TempProjectInstallment2.SETRANGE("Plot No.", IPlotNo);
      IF NOT TempProjectInstallment2.FINDLAST THEN
        EXIT('V1');

      //* 'REPEAT - UNTIL' is needed for SQL environment (for different sorting in SQL).
      //* Read till non existing number found.
      REPEAT
        TempProjectInstallment2."Installment No." := INCSTR(TempProjectInstallment2."Installment No.")
      UNTIL NOT TempProjectInstallment2.GET(IProjectNo,IPrincipal,IPlotNo,TempProjectInstallment2."Installment No.");

      EXIT(TempProjectInstallment2."Installment No.");
    END;

    [External]
    PROCEDURE GetCostObject@1210190004(InstallCostObject@1210190000 : Code[20];ProjNo@1210190003 : Code[20];PrinNo@1210190004 : Code[20]) : Code[20];
    VAR
      ProjSetup@1210190001 : Record 315;
      ProjPrin@1210190002 : Record 11012005;
    BEGIN
      //*29882
      ProjSetup.GET;
      IF (ProjSetup."Cost Object from" = ProjSetup."Cost Object from"::"Project Principal") THEN BEGIN
        IF ProjPrin.GET(ProjNo, PrinNo) THEN BEGIN
          IF ProjPrin."Cost Object" <> '' THEN
            EXIT(ProjPrin."Cost Object");       //* Only if proj-principal exist with Cost Object filled
        END;
      END;
      EXIT(InstallCostObject);  //* So also if Cost Object from "Project Principal" but not found/filled there
                                //* (was also in old situation).
    END;

    PROCEDURE CalcFinalInstalmentPrincipal@1100294005(CurrProj@11012000 : Code[20];CurrentPrincipal@11012001 : Code[20]);
    VAR
      lvCommissionRec@1100485001 : Record 11012020;
      lvCommissionNo@1100485000 : Code[20];
    BEGIN
      // SESB.I022 KD 18.07.2013 >>
      WITH ProjPrincipalRec DO BEGIN
        RESET;
        SETRANGE("Project No.",CurrProj);
        SETFILTER(Principal,CurrentPrincipal);
        IF FINDSET THEN
          REPEAT
            TESTFIELD("Project No.");
            ProjSetupRec.GET;
            ProjRec.GET("Project No.");
            IF (ProjSetupRec."Provisions at Closure") THEN
              ProjRec.CheckProjectStatus(-1)
            ELSE
              ProjRec.CheckProjectStatus(0);

            ProjRec.TESTFIELD(ProjRec."Settlement Method",ProjRec."Settlement Method"::"Fixed Price");
            TESTFIELD(Principal);
            lvCommissionNo := '';
            IF (STRLEN("Principal Reference") <= MAXSTRLEN(lvCommissionRec."No.")) THEN BEGIN
              IF lvCommissionRec.GET("Project No.",Principal,"Principal Reference") THEN
                lvCommissionNo := "Principal Reference";
            END;

            UpdateWithheldAmount(
              CurrProj,Principal,"Currency Code","Contract Amount",'',lvCommissionNo,
              "Method Last Installment" = "Method Last Installment"::"Final Installment",
              "Withheld Perc. Final Installm.","Withheld Perc. Contract Amount");
          UNTIL NEXT = 0;
      END;
      // SESB.I022 KD 18.07.2013 <<
    END;

    PROCEDURE CalcFinalInstalmentExtension@1100294004(CurrProj@11012000 : Code[20];CurrContract@11012001 : Code[10]);
    VAR
      lvCommissionRec@1210190000 : Record 11012020;
      lvCommissionNo@1210190001 : Code[20];
    BEGIN
      // SESB.I022 KD 18.07.2013 >>
      WITH ExtBudgetRec DO BEGIN
        RESET;
        SETRANGE("Project No.",CurrProj);
        SETFILTER("Contract No.",CurrContract);
        IF FINDSET THEN
          REPEAT
            TESTFIELD("Project No.");
            ProjRec.GET("Project No.");
            TESTFIELD("Settlement Method","Settlement Method"::"Fixed Price");
            TESTFIELD(Principal);
            lvCommissionNo := '';
            IF (STRLEN("Your Reference") <= MAXSTRLEN(lvCommissionRec."No.")) THEN BEGIN
              IF lvCommissionRec.GET("Project No.", Principal, "Your Reference") THEN
                lvCommissionNo := "Your Reference";
            END;

      //>>140425 ITERO.DJ IME134
        IF "Method Last Installment" <> "Method Last Installment"::" " THEN
      //<<140425 ITERO.DJ IME134
              UpdateWithheldAmount(
                CurrProj,Principal,"Contract Currency Code","Contract Amount","Contract No.",lvCommissionNo,
                "Method Last Installment" = "Method Last Installment"::"Final Installment",
                "Withheld Perc. Final Installm.","Withheld Perc. Contract Amount");
            UNTIL NEXT = 0;
      END;
      // SESB.I022 KD 18.07.2013 <<
    END;

    PROCEDURE CalcFinalInstalmentProject@1100294003(CurrProj@11012000 : Code[20]);
    BEGIN
      // SESB.I022 KD 18.07.2013 >>
      CalcFinalInstalmentPrincipal(CurrProj,'');
      CalcFinalInstalmentExtension(CurrProj,'');
      // SESB.I022 KD 18.07.2013 <<
    END;

    PROCEDURE UpdateWithheldAmount@1100294002(CurrProj@11012000 : Code[20];CurrentPrincipal@11012001 : Code[20];CurrCurrency@1100525001 : Code[20];CurrContractPrice@1100294009 : Decimal;Extension@11012006 : Code[10];CommissionNo@1210190003 : Code[20];CreateFinalInstalment@1100294000 : Boolean;LineWithheldAmtPerc@1100294001 : Decimal;TotalWithheldAmtPerc@1100294002 : Decimal);
    VAR
      lvJobSetupRec@1100525000 : Record 315;
      CreateFinalInstalmentLoc@1100294003 : Boolean;
      TotalWithheldAmt@1100294004 : Decimal;
      InsertedWithheldAmt@1100294005 : Decimal;
      LineWithheldAmt@1100294006 : Decimal;
    BEGIN
      // SESB.I022 KD 18.07.2013 >>
      CreateFinalInstalmentLoc := CreateFinalInstalment AND (LineWithheldAmtPerc <> 0) AND (TotalWithheldAmtPerc <> 0);
      IF NOT CreateFinalInstalmentLoc THEN
        EXIT;

      ProjectInstallment.RESET;
      ProjectInstallment.SETCURRENTKEY("Project No.",Principal,"Extension Contract","Plot No.");
      ProjectInstallment.SETRANGE("Project No.",CurrProj);
      ProjectInstallment.SETRANGE(Principal,CurrentPrincipal);
      ProjectInstallment.SETRANGE("Extension Contract",Extension);
      ProjectInstallment.SETRANGE("Plot No.",'');
      IF ProjectInstallment.ISEMPTY THEN
        EXIT;
      ProjectInstallment.SETRANGE("Last Installment",TRUE);
      IF NOT ProjectInstallment.ISEMPTY THEN
        EXIT;

      TotalWithheldAmt := ROUND(CurrContractPrice * TotalWithheldAmtPerc / 100);
      InsertedWithheldAmt := 0;

      lvJobSetupRec.GET;

      ProjectInstallment.SETRANGE("Last Installment");

      //>>ENH015
      IF ProjectInstallment.FINDSET THEN
      REPEAT
        ProjectInstallment.CALCFIELDS("Invoiced Price","Invoice in Process");
        IF (ProjectInstallment."Invoiced Price" = 0) AND (ProjectInstallment."Invoice in Process" = 0) THEN BEGIN
          ProjectInstallment.VALIDATE("Withheld Amount",0);
          ProjectInstallment.MODIFY(TRUE);
        END
        ELSE
         InsertedWithheldAmt += ProjectInstallment."Withheld Amount";
      UNTIL (ProjectInstallment.NEXT = 0) ;
      //<<ENH015

      ProjectInstallment.SETCURRENTKEY("Project No.",Principal,"Plot No.","Installment No.");
      ProjectInstallment.FINDSET;

      REPEAT
        LineWithheldAmt := ROUND(ProjectInstallment."Installment Amount" * LineWithheldAmtPerc / 100);
        IF LineWithheldAmt + InsertedWithheldAmt < TotalWithheldAmt THEN BEGIN
          ProjectInstallment.VALIDATE("Withheld Amount",LineWithheldAmt);
          InsertedWithheldAmt += LineWithheldAmt;
        END ELSE BEGIN
          ProjectInstallment.VALIDATE("Withheld Amount",TotalWithheldAmt - InsertedWithheldAmt);
          InsertedWithheldAmt := TotalWithheldAmt;
        END;
        //>> ITERO.LP NAVSE
        ProjectInstallment.VALIDATE("Withheld Amount", 0);
        //<< ITERO.LP NAVSE

        ProjectInstallment.MODIFY(TRUE)
      UNTIL (ProjectInstallment.NEXT = 0) OR (InsertedWithheldAmt = TotalWithheldAmt);

      CalcFinalInstalment(
        CurrProj,CurrentPrincipal,CurrCurrency,Extension,CommissionNo,TotalWithheldAmtPerc,
        InsertedWithheldAmt,CurrContractPrice,lvJobSetupRec."Final Installment Cost Object")
      // SESB.I022 KD 18.07.2013 <<
    END;

    PROCEDURE CalcFinalInstalment@1100294001(CurrProj@11012000 : Code[20];CurrentPrincipal@11012001 : Code[20];CurrCurrency@1100525001 : Code[20];Extension@11012006 : Code[10];CommissionNo@1210190003 : Code[20];WithheldAmtRerc@1100294002 : Decimal;WithheldAmt@1100294007 : Decimal;TotalAmt@1100294001 : Decimal;FinalInstCostObject@1100294000 : Code[20]);
    BEGIN
      // SESB.I022 KD 18.07.2013 >>
      ProjectInstallment.RESET;
      ProjectInstallment.SetSuspendAmountCheck;
      ProjectInstallment.INIT;
      ProjectInstallment."Project No." := CurrProj;
      ProjectInstallment.Principal := CurrentPrincipal;
      ProjectInstallment."Installment No." := GetFreeInstallmentNo(CurrProj,CurrentPrincipal,'');
      ProjectInstallment."Extension Contract" := Extension;
      ProjectInstallment.Description := Text11128230;
      ProjectInstallment."Cost Object" := FinalInstCostObject;

      //>>140428 IME140 ITERO.DJ
      IF ProjectInstallment."Cost Object" <> '' THEN BEGIN
        DimMgt.GetDimValueRec(2, ProjectInstallment."Cost Object", DimValRec, TRUE, ProjectInstallment."Project No.");
        ProjectInstallment."Cost Component" := DimValRec."Cost Component";
      END;
      //<<140428 IME140 ITERO.DJ

      ProjectInstallment."Last Installment" := TRUE;
      ProjectInstallment."VAT Prod. Posting Group" := GetProdPostingGroup(CurrProj,CurrentPrincipal,Extension);
      ProjectInstallment.VALIDATE("Currency Code", CurrCurrency);
      ProjectInstallment.VALIDATE("Installment Amount",WithheldAmt);
      IF WithheldAmt = ROUND(TotalAmt * WithheldAmtRerc / 100) THEN
        ProjectInstallment."Percentage Contract Amount" := WithheldAmtRerc
      ELSE
        ProjectInstallment."Percentage Contract Amount" := ROUND(100 * WithheldAmt / TotalAmt);
      ProjectInstallment."Commission No." := CommissionNo;
      ProjectInstallment.INSERT(TRUE);

      CounterInstallmentsCreated += 1;
      // SESB.I022 KD 18.07.2013 <<
    END;

    PROCEDURE CheckFinalInstCreated@1100294000(ProjPrincipalLoc@1100294002 : Record 11012005) : Boolean;
    BEGIN
      // SESB.I022 KD 09.08.2013 >>
      WITH ProjectInstallment DO BEGIN
        RESET;
        SETRANGE("Project No.",ProjPrincipalLoc."Project No.");
        SETRANGE(Principal,ProjPrincipalLoc.Principal);
        SETRANGE("Plot No.",'');

        IF ProjPrincipalLoc."Method Last Installment" = ProjPrincipalLoc."Method Last Installment"::"Final Installment" THEN BEGIN
          SETRANGE("Extension Contract",'');
          IF NOT ISEMPTY THEN BEGIN
            SETRANGE("Last Installment",TRUE);
            IF ISEMPTY THEN
              EXIT(FALSE);
            SETRANGE("Last Installment");
          END;
        END;

        SETFILTER("Extension Contract",'<>''''');
        IF ISEMPTY THEN
          EXIT(TRUE);
        FINDSET;
        REPEAT
          SETRANGE("Extension Contract","Extension Contract");
          IF ExtBudgetRec.GET("Project No.","Extension Contract") THEN
            IF ExtBudgetRec."Method Last Installment" = ExtBudgetRec."Method Last Installment"::"Final Installment" THEN BEGIN
              SETRANGE("Last Installment",TRUE);
              IF ISEMPTY THEN
                EXIT(FALSE);
            END;
          SETRANGE("Last Installment");
          FINDLAST;
          SETRANGE("Extension Contract");
        UNTIL NEXT = 0;
      END;

      EXIT(TRUE);
      // SESB.I022 KD 09.08.2013 <<
    END;

    PROCEDURE RecalculateProjInstalment@1100285500(CurrProj@1100285508 : Code[20];CurrentPrincipal@1100285507 : Code[20];CurrCurrency@1100285506 : Code[20];CurrContractPrice@1100285505 : Decimal;Extension@1100285504 : Code[10];CommissionNo@1100285503 : Code[20];CreateFinalInstalment@1100285502 : Boolean;LineWithheldAmtPerc@1100285501 : Decimal;TotalWithheldAmtPerc@1100285500 : Decimal;InstallmentNo@1100285514 : Code[10];InstallmentChargeable@1100285515 : Boolean);
    VAR
      lvJobSetupRec@1100285513 : Record 315;
      CreateFinalInstalmentLoc@1100285512 : Boolean;
      TotalWithheldAmt@1100285511 : Decimal;
      InsertedWithheldAmt@1100285510 : Decimal;
      LineWithheldAmt@1100285509 : Decimal;
    BEGIN
      //>>ITERO.DJ/DL, 140317, ENH015
      CreateFinalInstalmentLoc := CreateFinalInstalment AND (LineWithheldAmtPerc <> 0) AND (TotalWithheldAmtPerc <> 0);
      IF NOT CreateFinalInstalmentLoc THEN
        EXIT;

      ProjectInstallment.RESET;
      ProjectInstallment.SETRANGE("Project No.",CurrProj);
      ProjectInstallment.SETRANGE(Principal,CurrentPrincipal);
      ProjectInstallment.SETRANGE("Extension Contract",Extension);
      ProjectInstallment.SETRANGE("Plot No.",'');
      IF ProjectInstallment.ISEMPTY THEN
        EXIT;

      ProjectInstallment.SETRANGE("Last Installment",TRUE);
      IF ProjectInstallment.FINDFIRST THEN
        IF ProjectInstallment.Chargeable THEN
          EXIT;
      ProjectInstallment.SETRANGE("Last Installment");


      TotalWithheldAmt := ROUND(CurrContractPrice * TotalWithheldAmtPerc / 100);
      InsertedWithheldAmt := 0;
      lvJobSetupRec.GET;

      IF ProjectInstallment.FINDSET THEN
      REPEAT
        ProjectInstallment.CALCFIELDS("Invoiced Price","Invoice in Process");
        IF (ProjectInstallment."Invoiced Price" = 0) AND (ProjectInstallment."Invoice in Process" = 0) THEN BEGIN
          ProjectInstallment.VALIDATE("Withheld Amount",0);
          ProjectInstallment.MODIFY(TRUE);
        END
        ELSE
         InsertedWithheldAmt += ProjectInstallment."Withheld Amount";
      UNTIL (ProjectInstallment.NEXT = 0) ;


      ProjectInstallment.SETCURRENTKEY("Project No.",Principal,"Plot No.","Installment No.");
      //>>140509 ITERO.DJ IME134
      ProjectInstallment.SETRANGE("Last Installment", FALSE);
      //<<140509 ITERO.DJ IME134
      IF ProjectInstallment.FINDSET THEN
      REPEAT
        ProjectInstallment.CALCFIELDS("Invoiced Price","Invoice in Process");
        IF (ProjectInstallment.Chargeable OR
            ((ProjectInstallment."Installment No." = InstallmentNo) AND (ProjectInstallment.Chargeable <> InstallmentChargeable))
            ) AND (ProjectInstallment."Invoiced Price" = 0)
            AND (ProjectInstallment."Invoice in Process" = 0)
            THEN BEGIN
          LineWithheldAmt := ROUND(ProjectInstallment."Installment Amount" * LineWithheldAmtPerc / 100);
          IF LineWithheldAmt + InsertedWithheldAmt < TotalWithheldAmt THEN BEGIN
            ProjectInstallment.VALIDATE("Withheld Amount",LineWithheldAmt);
          END ELSE BEGIN
            ProjectInstallment.VALIDATE("Withheld Amount",TotalWithheldAmt - InsertedWithheldAmt);
          END;
          InsertedWithheldAmt += ProjectInstallment."Withheld Amount";
          ProjectInstallment.MODIFY(TRUE);
        END;
      UNTIL (ProjectInstallment.NEXT = 0) OR (InsertedWithheldAmt = TotalWithheldAmt);


      //ProjectInstallment.SETRANGE(Chargeable, FALSE);
      IF ProjectInstallment.FINDSET THEN
      REPEAT
        ProjectInstallment.CALCFIELDS("Invoiced Price","Invoice in Process");
        IF ((NOT ProjectInstallment.Chargeable ) OR
            ((ProjectInstallment."Installment No." = InstallmentNo) AND (ProjectInstallment.Chargeable <> InstallmentChargeable))
            ) AND (ProjectInstallment."Invoiced Price" = 0)
            AND (ProjectInstallment."Invoice in Process" = 0)
            THEN BEGIN

        LineWithheldAmt := ROUND(ProjectInstallment."Installment Amount" * LineWithheldAmtPerc / 100);
        IF LineWithheldAmt + InsertedWithheldAmt < TotalWithheldAmt THEN BEGIN
          ProjectInstallment.VALIDATE("Withheld Amount",LineWithheldAmt);
        END ELSE BEGIN
          ProjectInstallment.VALIDATE("Withheld Amount",TotalWithheldAmt - InsertedWithheldAmt);
        END;
        InsertedWithheldAmt += ProjectInstallment."Withheld Amount";
        ProjectInstallment.MODIFY(TRUE);
      END;
      UNTIL (ProjectInstallment.NEXT = 0) OR (InsertedWithheldAmt = TotalWithheldAmt);
      ProjectInstallment.SETRANGE(Chargeable);

      ProjectInstallment.SETRANGE("Last Installment",TRUE);
      IF NOT ProjectInstallment.ISEMPTY THEN
        EXIT;
      CalcFinalInstalment(
        CurrProj,CurrentPrincipal,CurrCurrency,Extension,CommissionNo,TotalWithheldAmtPerc,
        InsertedWithheldAmt,CurrContractPrice,lvJobSetupRec."Final Installment Cost Object")
      //<<ITERO.DJ/DL, 140317, ENH015
    END;

    [External]
    PROCEDURE SetSilent@1100285000(pSilent@1100285000 : Boolean);
    BEGIN
      //DP00793-RFC11
      bSilent := pSilent;
    END;

    LOCAL PROCEDURE GroundInstallmentNo@1100527702() : Text;
    BEGIN
      IF VirtualInstallmentsForCashflow THEN
        EXIT('V0');

      EXIT('0');
    END;

    BEGIN
    {
      4PS01 JD 04-12-2006 Call 6110 When Principal Reference is an 'Commission' like linked to a Principal,
      then also take to the Installments, same as done at Extension contracts.
      4PS02 JD 08-01-2007 Call 8832 Total of Installments is sometimes higher then contract amount caused by Rounding Difference.
      4PS03 JD 23-12-2008 Call 13244 Early 'crash' when costcomponent not filled while mandatory
      4PSSE GH 130412     IMSE-011: New function + controle message

      SESB.I022 Final Instalment
         KD 18.07.2013 Trigger FromPrincipal changed
         KD 18.07.2013 Trigger FromPlotNumber changed
         KD 18.07.2013 Trigger FromExtension changed
         KD 18.07.2013 Trigger FromOption changed
         KD 18.07.2013 Trigger GenerateProjectInstallments changed
         KD 18.07.2013 Trigger CalcFinalInstalmentPrincipal added
         KD 18.07.2013 Trigger CalcFinalInstalmentExtension added
         KD 18.07.2013 Trigger CalcFinalInstalmentProject added
         KD 18.07.2013 Trigger UpdateWithheldAmount added
         KD 18.07.2013 Trigger CalcFinalInstalment added
         KD 08.08.2013 Trigger GetProdPostingGroup changed
         KD 09.08.2013 Trigger CheckFinalInstCreated added

      ITERO.DJ 140425 IME134 added check for method last instalment before calculating
      ITERO.DJ 140428 IME140 added cost component for final installment
      ITERO.DJ 140509 IME134 exclude last installment line from recalculation
      ITERO.LP 160316 NAVSE Adjustment in function UpdateWithheldAmount.
      170710 ITERO.SB 4PSSE Withheld functionality update
      190122 ITERO.SB RFC-1152 vers2
    }
    END.
  }
}

