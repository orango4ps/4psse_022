OBJECT Codeunit 871 Social Listening Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      MslProductNameTxt@1000 : TextConst '@@@={locked};ENU=Microsoft Social Engagement;NOR=Microsoft Social Engagement;SVE=Microsoft Social Engagement';
      FailedToConnectTxt@1002 : TextConst '@@@="%1 = Microsoft Social Engagement, %2 = refresh, %3 - product name";ENU=Failed to connect to %1.<br><br>Verify the configuration of %1 in %3.<br><br>Afterwards %2 to try connecting to %1 again.;NOR=Kan ikke koble til %1.<br><br>Kontroller konfigurasjonen for %1 i %3.<br><br>%2 etterp† for † pr›ve † koble til %1 p† nytt.;SVE=Det gick inte att ansluta till %1.<br><br>Kontrollera konfigurationen av %1 i %3.<br><br>F”rs”k sedan %2 att ansluta till %1 igen.';
      HasNotBeenAuthenticatedTxt@1001 : TextConst '@@@="%1 = Microsoft Social Engagement, %2= Microsoft Social Engagement,%3 = refresh";ENU=%1 has not been authenticated.<br><br>Go to %2 to open the authentication window.<br><br>Afterwards %3 to show data.;NOR=%1 er ikke godkjent.<br><br>G† til %2 for † †pne godkjenningsvinduet.<br><br>%3 etterp† for † vise data.;SVE=%1 har inte autentiserats.<br><br>G† till %2 och ”ppna autentiseringsf”nstret.<br><br>Sedan %3 kan du visa data.';
      ExpectedValueErr@1004 : TextConst 'ENU=Expected value should be an integer or url path containing %2 in %1.;NOR=Forventet verdi m† v‘re et heltall eller en bane til URL-adresse som inneholder %2 i %1.;SVE=Det f”rv„ntade v„rdet ska vara ett heltal eller en URL som inneh†ller %2 i %1.';
      RefreshTxt@1003 : TextConst 'ENU=refresh;NOR=forny;SVE=uppdatera';

    [External]
    PROCEDURE GetSignupURL@17() : Text[250];
    BEGIN
      EXIT('http://go.microsoft.com/fwlink/p/?LinkId=401462');
    END;

    [External]
    PROCEDURE GetTermsOfUseURL@1() : Text[250];
    BEGIN
      EXIT('http://go.microsoft.com/fwlink/?LinkID=389042');
    END;

    [External]
    PROCEDURE GetMSL_URL@5() : Text[250];
    VAR
      SocialListeningSetup@1000 : Record 870;
    BEGIN
      WITH SocialListeningSetup DO BEGIN
        IF GET AND ("Social Listening URL" <> '') THEN
          EXIT(COPYSTR("Social Listening URL",1,STRPOS("Social Listening URL",'/app/') - 1));
        TESTFIELD("Social Listening URL");
      END;
    END;

    [External]
    PROCEDURE GetMSLAppURL@15() : Text[250];
    BEGIN
      EXIT(STRSUBSTNO('%1/app/%2/',GetMSL_URL,GetMSLSubscriptionID));
    END;

    [External]
    PROCEDURE MSLUsersURL@16() : Text;
    BEGIN
      EXIT(STRSUBSTNO('%1/settings/%2/?locale=%3#page:users',GetMSL_URL,GetMSLSubscriptionID,GetLanguage));
    END;

    [External]
    PROCEDURE MSLSearchItemsURL@2() : Text;
    BEGIN
      EXIT(STRSUBSTNO('%1/app/%2/?locale=%3#search:topics',GetMSL_URL,GetMSLSubscriptionID,GetLanguage));
    END;

    LOCAL PROCEDURE MSLAuthenticationURL@3() : Text;
    BEGIN
      EXIT(STRSUBSTNO('%1/widgetapi/%2/authenticate.htm?lang=%3',GetMSL_URL,GetMSLSubscriptionID,GetLanguage));
    END;

    [External]
    PROCEDURE MSLAuthenticationStatusURL@4() : Text;
    BEGIN
      EXIT(STRSUBSTNO('%1/widgetapi/%2/auth_status.htm?lang=%3',GetMSL_URL,GetMSLSubscriptionID,GetLanguage));
    END;

    [External]
    PROCEDURE GetAuthenticationWidget@12(SearchTopic@1000 : Text) : Text;
    BEGIN
      EXIT(
        STRSUBSTNO(
          '%1/widgetapi/%2/?locale=%3#analytics:overview?date=today&nodeId=%4',
          GetMSL_URL,GetMSLSubscriptionID,GetLanguage,SearchTopic));
    END;

    LOCAL PROCEDURE GetAuthenticationLink@6() : Text;
    BEGIN
      EXIT(
        STRSUBSTNO(
          '<a style="text-decoration: none" href="javascript:;" onclick="openAuthenticationWindow(''%1'');">%2</a>',
          MSLAuthenticationURL,MslProductNameTxt));
    END;

    LOCAL PROCEDURE GetRefreshLink@8() : Text;
    BEGIN
      EXIT(STRSUBSTNO('<a style="text-decoration: none" href="javascript:;" onclick="raiseMessageLinkClick(1);">%1</a>',RefreshTxt));
    END;

    LOCAL PROCEDURE GetMSLSubscriptionID@18() : Text[250];
    VAR
      SocialListeningSetup@1000 : Record 870;
    BEGIN
      SocialListeningSetup.GET;
      SocialListeningSetup.TESTFIELD("Solution ID");
      EXIT(SocialListeningSetup."Solution ID");
    END;

    LOCAL PROCEDURE GetLanguage@30() : Text;
    VAR
      CultureInfo@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      CultureInfo := CultureInfo.CultureInfo(GLOBALLANGUAGE);
      EXIT(CultureInfo.TwoLetterISOLanguageName);
    END;

    [External]
    PROCEDURE GetAuthenticationConectionErrorMsg@10() : Text;
    BEGIN
      EXIT(STRSUBSTNO(FailedToConnectTxt,MslProductNameTxt,GetRefreshLink,PRODUCTNAME.FULL));
    END;

    [External]
    PROCEDURE GetAuthenticationUserErrorMsg@11() : Text;
    BEGIN
      EXIT(STRSUBSTNO(HasNotBeenAuthenticatedTxt,MslProductNameTxt,GetAuthenticationLink,GetRefreshLink));
    END;

    [External]
    PROCEDURE GetCustFactboxVisibility@7(Cust@1000 : Record 18;VAR MSLSetupVisibility@1001 : Boolean;VAR MSLVisibility@1002 : Boolean);
    VAR
      SocialListeningSetup@1005 : Record 870;
      SocialListeningSearchTopic@1004 : Record 871;
    BEGIN
      WITH SocialListeningSetup DO
        MSLSetupVisibility := GET AND "Show on Customers" AND "Accept License Agreement" AND ("Solution ID" <> '');

      IF MSLSetupVisibility THEN
        WITH SocialListeningSearchTopic DO
          MSLVisibility := FindSearchTopic("Source Type"::Customer,Cust."No.") AND ("Search Topic" <> '')
    END;

    [External]
    PROCEDURE GetVendFactboxVisibility@9(Vend@1000 : Record 23;VAR MSLSetupVisibility@1001 : Boolean;VAR MSLVisibility@1002 : Boolean);
    VAR
      SocialListeningSetup@1005 : Record 870;
      SocialListeningSearchTopic@1004 : Record 871;
    BEGIN
      WITH SocialListeningSetup DO
        MSLSetupVisibility := GET AND "Show on Vendors" AND "Accept License Agreement" AND ("Solution ID" <> '');

      IF MSLSetupVisibility THEN
        WITH SocialListeningSearchTopic DO
          MSLVisibility := FindSearchTopic("Source Type"::Vendor,Vend."No.") AND ("Search Topic" <> '');
    END;

    [External]
    PROCEDURE GetItemFactboxVisibility@14(Item@1000 : Record 27;VAR MSLSetupVisibility@1001 : Boolean;VAR MSLVisibility@1002 : Boolean);
    VAR
      SocialListeningSetup@1005 : Record 870;
      SocialListeningSearchTopic@1004 : Record 871;
    BEGIN
      WITH SocialListeningSetup DO
        MSLSetupVisibility := GET AND "Show on Items" AND "Accept License Agreement" AND ("Solution ID" <> '');

      IF MSLSetupVisibility THEN
        WITH SocialListeningSearchTopic DO
          MSLVisibility := FindSearchTopic("Source Type"::Item,Item."No.") AND ("Search Topic" <> '');
    END;

    [External]
    PROCEDURE ConvertURLToID@13(URL@1000 : Text;where@1006 : Text) : Text[250];
    VAR
      i@1001 : Integer;
      j@1003 : Integer;
      PositionOfID@1004 : Integer;
      ID@1002 : Text;
      IntegerValue@1005 : Integer;
    BEGIN
      IF URL = '' THEN
        EXIT(URL);
      IF EVALUATE(IntegerValue,URL) THEN
        EXIT(URL);

      PositionOfID := STRPOS(LOWERCASE(URL),LOWERCASE(where));
      IF PositionOfID = 0 THEN
        ERROR(ExpectedValueErr,where,URL);

      j := 1;
      FOR i := PositionOfID + STRLEN(where) TO STRLEN(URL) DO BEGIN
        IF NOT (URL[i] IN ['0'..'9']) THEN
          BREAK;

        ID[j] := URL[i];
        j += 1;
      END;

      IF ID = '' THEN
        ERROR(ExpectedValueErr,where,LOWERCASE(GetMSL_URL));
      EXIT(ID);
    END;

    [EventSubscriber(Table,1400,OnRegisterServiceConnection)]
    [External]
    PROCEDURE HandleMSERegisterServiceConnection@19(VAR ServiceConnection@1003 : Record 1400);
    VAR
      SocialListeningSetup@1001 : Record 870;
      PermissionManager@1000 : Codeunit 9002;
      RecRef@1002 : RecordRef;
    BEGIN
      IF PermissionManager.SoftwareAsAService THEN
        EXIT;

      SocialListeningSetup.GET;
      RecRef.GETTABLE(SocialListeningSetup);

      WITH SocialListeningSetup DO BEGIN
        ServiceConnection.Status := ServiceConnection.Status::Enabled;
        IF NOT "Show on Items" AND NOT "Show on Customers" AND NOT "Show on Vendors" THEN
          ServiceConnection.Status := ServiceConnection.Status::Disabled;
        ServiceConnection.InsertServiceConnection(
          ServiceConnection,RecRef.RECORDID,TABLECAPTION,"Social Listening URL",PAGE::"Social Listening Setup");
      END;
    END;

    [External]
    PROCEDURE CheckURLPath@20(URL@1000 : Text;where@1001 : Text);
    VAR
      IntegerValue@1002 : Integer;
    BEGIN
      IF URL = '' THEN
        EXIT;
      IF EVALUATE(IntegerValue,URL) THEN
        EXIT;

      IF STRPOS(LOWERCASE(URL),LOWERCASE(GetMSL_URL)) = 0 THEN
        ERROR(ExpectedValueErr,where,LOWERCASE(GetMSL_URL));
    END;

    BEGIN
    END.
  }
}

