OBJECT Codeunit 11012367 Encryption Management 4PS
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            test1@1100528550 : Text;
            test2@1100528551 : Text;
          BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetHashes@1100528200(IsServerFile@1100525000 : Boolean;FileName@1100528200 : Text;VAR MD5Hash@1100528205 : Text;VAR SHA1Hash@1100528204 : Text;VAR SHA256Hash@1100528203 : Text);
    VAR
      FileManagement@1100528201 : Codeunit 419;
      ServerTempFileName@1100528202 : Text;
    BEGIN
      IF IsServerFile THEN
        ServerTempFileName := FileName
      ELSE
        ServerTempFileName := FileManagement.UploadFileSilent(FileName);
      MD5Hash := GetMD5(ServerTempFileName);
      SHA1Hash := GetSHA1(ServerTempFileName);
      SHA256Hash := GetSHA256(ServerTempFileName);
      IF NOT IsServerFile THEN
        ERASE(ServerTempFileName);
    END;

    LOCAL PROCEDURE GetSHA1@1100528201(FileName@1100528201 : Text) : Text;
    VAR
      SHA1CryptoServiceProvider@1100528200 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.SHA1CryptoServiceProvider";
    BEGIN
      SHA1CryptoServiceProvider := SHA1CryptoServiceProvider.SHA1CryptoServiceProvider();
      EXIT(GetHashString(FileName,SHA1CryptoServiceProvider));
    END;

    LOCAL PROCEDURE GetSHA256@1100528207(FileName@1100528200 : Text) : Text;
    VAR
      SHA256Managed@1100528203 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.SHA256Managed";
    BEGIN
      SHA256Managed := SHA256Managed.SHA256Managed();
      EXIT(GetHashString(FileName,SHA256Managed));
    END;

    LOCAL PROCEDURE GetMD5@1100528202(FileName@1100528200 : Text) : Text;
    VAR
      MD5CryptoServiceProvider@1100528201 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.MD5CryptoServiceProvider";
    BEGIN
      MD5CryptoServiceProvider := MD5CryptoServiceProvider.MD5CryptoServiceProvider();
      EXIT(GetHashString(FileName,MD5CryptoServiceProvider));
    END;

    LOCAL PROCEDURE GetHashString@1100528205(Filename@1100528200 : Text;HashAlgorithm@1100528201 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.HashAlgorithm") : Text;
    VAR
      FileStream@1100528202 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileStream";
      BitConverter@1100528203 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.BitConverter";
      HashString@1100528204 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      ReturnHash@1100528205 : Text;
    BEGIN
      IF NOT GetFileStream(Filename,FileStream) THEN
        EXIT('');

      HashString := BitConverter.ToString(HashAlgorithm.ComputeHash(FileStream));
      ReturnHash := HashString.Replace('-','');
      FileStream.Close();
      EXIT(ReturnHash);
    END;

    LOCAL PROCEDURE GetFileStream@1100528206(Filename@1100528200 : Text;VAR ReturnFileStream@1100528201 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileStream") : Boolean;
    VAR
      FileMode@1100528202 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileMode";
    BEGIN
      ReturnFileStream := ReturnFileStream.FileStream(Filename,FileMode.Open);

      IF NOT ISNULL(ReturnFileStream) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE CalculateStringMD5@1100528101(InputString@1100528100 : Text) HashValue : Text[32];
    VAR
      SystemSecurityCryptographyMD5@1100525000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.MD5";
      SystemArray@1100525002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      SystemTextEncoding@1100525003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      SystemSecurityCryptographyMD5 := SystemSecurityCryptographyMD5.Create;

      SystemArray := SystemSecurityCryptographyMD5.ComputeHash(SystemTextEncoding.UTF8.GetBytes(InputString));
      HashValue := ConvertSystemArray2Text(SystemArray);
    END;

    LOCAL PROCEDURE ConvertSystemArray2Text@1100525011(SystemArray@1100525005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array") HashValue : Text;
    VAR
      SystemByte@1100525001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Byte";
      i@1100528103 : Integer;
    BEGIN
      FOR i := 1 TO SystemArray.Length DO BEGIN
        SystemByte := SystemArray.GetValue(i - 1);
        HashValue := HashValue + SystemByte.ToString('x2');
      END;
    END;

    PROCEDURE GenerateHash@1100528550(InputString@1100528550 : Text;HashAlgorithmType@1100528551 : 'MD5,SHA1,SHA256,SHA384,SHA512') : Text;
    VAR
      HashBytes@1100528552 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
    BEGIN
      IF InputString = '' THEN
        EXIT('');
      IF NOT TryGenerateHash(HashBytes,InputString,FORMAT(HashAlgorithmType)) THEN
        ERROR(GETLASTERRORTEXT);
      EXIT(ConvertByteHashToString(HashBytes));
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGenerateHash@1100528551(VAR HashBytes@1100528550 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";InputString@1100528551 : Text;Algorithm@1100528552 : Text);
    VAR
      HashAlgorithm@1100528553 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.HashAlgorithm";
      Encoding@1100528554 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      HashAlgorithm := HashAlgorithm.Create(Algorithm);
      HashBytes := HashAlgorithm.ComputeHash(Encoding.UTF8.GetBytes(InputString));
      HashAlgorithm.Dispose;
    END;

    PROCEDURE GenerateKeyedHash@1100528556(InputString@1100528550 : Text;Key@1100528551 : Text;HashAlgorithmType@1100528552 : 'HMACMD5,HMACSHA1,HMACSHA256,HMACSHA384,HMACSHA512') : Text;
    VAR
      HashBytes@1100528553 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
    BEGIN
      IF (InputString = '') OR (Key = '') THEN
        EXIT('');
      IF NOT TryGenerateKeyedHash(HashBytes,InputString,Key,FORMAT(HashAlgorithmType)) THEN
        ERROR(GETLASTERRORTEXT);
      EXIT(ConvertByteHashToString(HashBytes));
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGenerateKeyedHash@1100528557(VAR HashBytes@1100528550 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";InputString@1100528551 : Text;Key@1100528552 : Text;Algorithm@1100528553 : Text);
    VAR
      KeyedHashAlgorithm@1100528554 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.KeyedHashAlgorithm";
      Encoding@1100528555 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      KeyedHashAlgorithm := KeyedHashAlgorithm.Create(Algorithm);
      KeyedHashAlgorithm.Key(Encoding.UTF8.GetBytes(Key));
      HashBytes := KeyedHashAlgorithm.ComputeHash(Encoding.UTF8.GetBytes(InputString));
      KeyedHashAlgorithm.Dispose;
    END;

    LOCAL PROCEDURE ConvertByteHashToString@1100528554(HashBytes@1100528550 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array") : Text;
    VAR
      Byte@1100528551 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Byte";
      StringBuilder@1100528552 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      I@1100528553 : Integer;
    BEGIN
      StringBuilder := StringBuilder.StringBuilder;
      FOR I := 0 TO HashBytes.Length - 1 DO BEGIN
        Byte := HashBytes.GetValue(I);
        StringBuilder.Append(Byte.ToString('X2'));
      END;
      EXIT(StringBuilder.ToString);
    END;

    LOCAL PROCEDURE GeneratePBDKF2Hash@1100528552() : Text;
    VAR
      RfCDerivedBytes@1100528550 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.Rfc2898DeriveBytes";
      HashAlgorithmName@1100528551 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.HashAlgorithmName";
      DeriveBytes@1100528553 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.DeriveBytes";
      HashAlgorithm@1100528552 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.HashAlgorithm";
      Encoding@1100528554 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      //not tested
      RfCDerivedBytes := RfCDerivedBytes.Rfc2898DeriveBytes('123',Encoding.UTF8.GetBytes('testtest'),10000);
      EXIT(ConvertByteHashToString(RfCDerivedBytes.GetBytes(16)));
    END;

    BEGIN
    END.
  }
}

