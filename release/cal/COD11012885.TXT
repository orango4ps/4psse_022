OBJECT Codeunit 11012885 SC Control by Period Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            ServiceContract@1100525000 : Record 11012812;
            SCControlbyPeriodMgt@1100525001 : Codeunit 11012885;
          BEGIN
            IF ServiceContractNoFilterIsSet THEN
              CreateSCControlPeriodLines(ServiceContractNoFilter)
            ELSE BEGIN
              CLEARLASTERROR;
              CLEAR(SCControlbyPeriodMgt);
              SCControlbyPeriodMgt.SetServiceContractNoFilter('');
              IF NOT SCControlbyPeriodMgt.RUN THEN
                LogErrorMessage('', ServOrderWithoutContract + ': ' + GETLASTERRORTEXT);
              COMMIT;

              ServiceContract.SETRANGE(Status, ServiceContract.Status::"Invoicing Allowed");
              IF ServiceContract.FINDSET THEN
                REPEAT
                  CLEARLASTERROR;
                  CLEAR(SCControlbyPeriodMgt);
                  SCControlbyPeriodMgt.SetServiceContractNoFilter(ServiceContract."No.");
                  IF NOT SCControlbyPeriodMgt.RUN THEN
                    LogErrorMessage(ServiceContract."No.", GETLASTERRORTEXT);
                  COMMIT;
                UNTIL ServiceContract.NEXT = 0;

              IF GUIALLOWED THEN BEGIN
                ServiceContractControlMsg.SETRANGE("Service Contract No.");
                ServiceContractControlMsg.MARKEDONLY(TRUE);
                IF NOT ServiceContractControlMsg.ISEMPTY THEN
                  PAGE.RUNMODAL(PAGE::"SC Control Message List", ServiceContractControlMsg);
              END;
            END;
          END;

  }
  CODE
  {
    VAR
      ServiceSetup@1100529603 : Record 11012800;
      TmpServicePrognosisByCostType@1100529600 : TEMPORARY Record 11072553;
      TmpStandardObjectBudgetCost@1100528500 : TEMPORARY Record 11020579;
      TmpSCControlByPeriodDetail@1100529602 : TEMPORARY Record 11072552;
      LineType@1100528600 : ',Period,Source Type,Service Category,Service Order';
      SourceType@1100528601 : 'Call,Contract,Direct,Estimate,,,Modification,Replacement';
      Text000@1100528602 : TextConst 'ENU=Progress:\Contract: @1@@@@@\Period: @2@@@@@\Cost Type: @3@@@@@\Rounding up:\Type: #5#####\Period: @6@@@@@';
      Text001@1100528603 : TextConst 'ENU=Field %1 from table %2 is before the work date, continue anyway?';
      CalculateCostTypeAmounts@1100529601 : Boolean;
      CalculateCostTypeRevenues@1100525000 : Boolean;
      ServiceContractNoFilter@1100525001 : Text;
      ServiceContractNoFilterIsSet@1100527650 : Boolean;
      ServOrderWithoutContract@1100527651 : TextConst 'ENU=Service Orders Without Contract';
      ServiceContractControlMsg@1100530700 : Record 11071956;

    LOCAL PROCEDURE GetSOActualCostLines@1100528607(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text;VAR OServiceLedgerEntry@1100528600 : Record 11012819);
    BEGIN
      OServiceLedgerEntry.RESET;
      SetSOServiceLedgerEntryFilter(IServiceOrderNo, IAmountType, IPostingDateFilter, OServiceLedgerEntry);
    END;

    PROCEDURE GetSOActualCost@1100409001(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528600 : 'All,No Additional,Additional';IPostingDateFilter@1100528602 : Text) : Decimal;
    VAR
      ServiceLedgerEntry@1100409000 : Record 11012819;
    BEGIN
      GetSOActualCostLines(IServiceOrderNo, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      ServiceLedgerEntry.CALCSUMS("Total Cost (LCY)");
      EXIT(ServiceLedgerEntry."Total Cost (LCY)");
    END;

    PROCEDURE ShowSOActualCostLines@1100528603(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
    BEGIN
      GetSOActualCostLines(IServiceOrderNo, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      PAGE.RUNMODAL(0, ServiceLedgerEntry);
    END;

    LOCAL PROCEDURE GetSOClosedCostLines@1100528610(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text;VAR OServiceLedgerEntry@1100528601 : Record 11012819);
    BEGIN
      OServiceLedgerEntry.RESET;
      OServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.", "Source Type");
      OServiceLedgerEntry.SETRANGE("Base Service Order No.", IServiceOrderNo);
      CASE IAmountType OF
        IAmountType::"No Additional":
          OServiceLedgerEntry.SETRANGE("Additional Cost", FALSE);
        IAmountType::Additional:
          OServiceLedgerEntry.SETRANGE("Additional Cost", TRUE);
      END;
      IF IPostingDateFilter <> '' THEN
        OServiceLedgerEntry.SETFILTER("Posting Date", IPostingDateFilter);
    END;

    PROCEDURE GetSOClosedCost@1100409000(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528601 : 'All,No Additional,Additional';IPostingDateFilter@1100528602 : Text) : Decimal;
    VAR
      ServiceLedgerEntry@1100409000 : Record 11012819;
    BEGIN
      GetSOClosedCostLines(IServiceOrderNo, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      ServiceLedgerEntry.CALCSUMS("Closed Costs");
      EXIT(-ServiceLedgerEntry."Closed Costs");
    END;

    PROCEDURE ShowSOClosedCostLines@1100528612(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
    BEGIN
      GetSOClosedCostLines(IServiceOrderNo, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      ServiceLedgerEntry.SETFILTER("Closed Costs", '<> 0');
      PAGE.RUNMODAL(0, ServiceLedgerEntry);
    END;

    LOCAL PROCEDURE GetSOPreclosureLines@1100528615(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text;VAR OServiceLedgerEntry@1100528600 : Record 11012819);
    BEGIN
      OServiceLedgerEntry.RESET;
      OServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.", "Source Type");
      OServiceLedgerEntry.SETRANGE("Base Service Order No.", IServiceOrderNo);
      CASE IAmountType OF
        IAmountType::"No Additional":
          OServiceLedgerEntry.SETRANGE("Additional Cost", FALSE);
        IAmountType::Additional:
          OServiceLedgerEntry.SETRANGE("Additional Cost", TRUE);
      END;
    END;

    PROCEDURE GetSOPreclosure@1100409021(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528601 : 'All,No Additional,Additional';IPostingDateFilter@1100528602 : Text) : Decimal;
    VAR
      ServiceLedgerEntry@1100409000 : Record 11012819;
    BEGIN
      GetSOPreclosureLines(IServiceOrderNo, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      ServiceLedgerEntry.CALCSUMS("Actual Preclosure Result");
      EXIT(ServiceLedgerEntry."Actual Preclosure Result");
    END;

    PROCEDURE ShowSOPreclosureLines@1100528616(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
    BEGIN
      GetSOPreclosureLines(IServiceOrderNo, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      PAGE.RUNMODAL(0, ServiceLedgerEntry);
    END;

    LOCAL PROCEDURE GetSCPreclosureLines@1100528618(IServiceContractNo@1100528602 : Code[20];IStartingDate@1100528601 : Date;IEndingDate@1100528600 : Date;IAmountType@1100528604 : 'All,No Additional,Additional';IPostingDateFilter@1100528605 : Text;VAR OServiceLedgerEntry@1100528603 : Record 11012819);
    BEGIN
      OServiceLedgerEntry.RESET;
      OServiceLedgerEntry.SETCURRENTKEY("Service Contract No.", "Posting Date");
      OServiceLedgerEntry.SETRANGE("Posting Date", IStartingDate, IEndingDate);
      OServiceLedgerEntry.SETRANGE("Service Contract No.", IServiceContractNo);
      CASE IAmountType OF
        IAmountType::"No Additional":
          OServiceLedgerEntry.SETRANGE("Additional Cost", FALSE);
        IAmountType::Additional:
          OServiceLedgerEntry.SETRANGE("Additional Cost", TRUE);
      END;
      IF IPostingDateFilter <> '' THEN
        OServiceLedgerEntry.SETFILTER("Posting Date", IPostingDateFilter);
    END;

    PROCEDURE GetSCPreclosure@1100409028(IServiceContractNo@1100409001 : Code[20];IStartingDate@1100528600 : Date;IEndingDate@1100528601 : Date;IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text) PreClosureResult : Decimal;
    VAR
      ServiceLedgerEntry@1100409000 : Record 11012819;
    BEGIN
      GetSCPreclosureLines(IServiceContractNo, IStartingDate, IEndingDate, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      ServiceLedgerEntry.CALCSUMS("Actual Preclosure Result");
      EXIT(ServiceLedgerEntry."Actual Preclosure Result");
    END;

    PROCEDURE ShowSCPreclosureLines@1100528619(IServiceContractNo@1100528602 : Code[20];IStartingDate@1100528601 : Date;IEndingDate@1100528600 : Date;IAmountType@1100528604 : 'All,No Additional,Additional';IPostingDateFilter@1100528605 : Text);
    VAR
      ServiceLedgerEntry@1100528603 : Record 11012819;
    BEGIN
      GetSCPreclosureLines(IServiceContractNo, IStartingDate, IEndingDate, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      PAGE.RUNMODAL(0, ServiceLedgerEntry);
    END;

    LOCAL PROCEDURE GetSOClosedRevenueLines@1100528621(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text;VAR OServiceLedgerEntry@1100528600 : Record 11012819);
    BEGIN
      OServiceLedgerEntry.RESET;
      OServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.");
      OServiceLedgerEntry.SETRANGE("Base Service Order No.", IServiceOrderNo);
      CASE IAmountType OF
        IAmountType::"No Additional":
          OServiceLedgerEntry.SETRANGE("Additional Cost", FALSE);
        IAmountType::Additional:
          OServiceLedgerEntry.SETRANGE("Additional Cost", TRUE);
      END;
      IF IPostingDateFilter <> '' THEN
        OServiceLedgerEntry.SETFILTER("Posting Date", IPostingDateFilter);
    END;

    PROCEDURE GetSOClosedRevenue@1100409006(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528601 : 'All,No Additional,Additional';IPostingDateFilter@1100528602 : Text) : Decimal;
    VAR
      ServiceLedgerEntry@1100409000 : Record 11012819;
    BEGIN
      GetSOClosedRevenueLines(IServiceOrderNo, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      ServiceLedgerEntry.CALCSUMS("Closed Revenues");
      EXIT(ServiceLedgerEntry."Closed Revenues");
    END;

    PROCEDURE ShowSOClosedRevenueLines@1100528622(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
    BEGIN
      GetSOClosedRevenueLines(IServiceOrderNo, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      ServiceLedgerEntry.SETFILTER("Closed Revenues", '<> 0');
      PAGE.RUNMODAL(0, ServiceLedgerEntry);
    END;

    LOCAL PROCEDURE GetSCClosedRevenueLines@1100528626(IServiceContractNo@1100528603 : Code[20];IStartingDate@1100528602 : Date;IEndingDate@1100528601 : Date;IServiceCategory@1100528600 : Code[20];IAmountType@1100528605 : 'All,No Additional,Additional';IPostingDateFilter@1100528606 : Text;VAR OServiceLedgerEntry@1100528604 : Record 11012819);
    BEGIN
      OServiceLedgerEntry.RESET;
      OServiceLedgerEntry.SETCURRENTKEY("Service Contract No.", "Service Control Period Date");
      OServiceLedgerEntry.SETRANGE("Service Contract No.", IServiceContractNo);
      OServiceLedgerEntry.SETRANGE("Service Order No.", '');
      OServiceLedgerEntry.SETRANGE("Service Control Period Date", IStartingDate, IEndingDate);
      OServiceLedgerEntry.SETRANGE("Service Category", IServiceCategory);
      CASE IAmountType OF
        IAmountType::"No Additional":
          OServiceLedgerEntry.SETRANGE("Additional Cost", FALSE);
        IAmountType::Additional:
          OServiceLedgerEntry.SETRANGE("Additional Cost", TRUE);
      END;
      IF IPostingDateFilter <> '' THEN
        OServiceLedgerEntry.SETFILTER("Posting Date", IPostingDateFilter);
    END;

    PROCEDURE GetSCClosedRevenue@1100409007(IServiceContractNo@1100528602 : Code[20];IStartingDate@1100528601 : Date;IEndingDate@1100528600 : Date;IServiceCategory@1100528603 : Code[20];IAmountType@1100528604 : 'All,No Additional,Additional';IPostingDateFilter@1100528605 : Text) : Decimal;
    VAR
      ServiceLedgerEntry@1100409000 : Record 11012819;
    BEGIN
      GetSCClosedRevenueLines(IServiceContractNo, IStartingDate, IEndingDate, IServiceCategory, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      ServiceLedgerEntry.CALCSUMS("Closed Revenues");
      EXIT(ServiceLedgerEntry."Closed Revenues");
    END;

    PROCEDURE ShowSCClosedRevenueLines@1100528627(IServiceContractNo@1100528604 : Code[20];IStartingDate@1100528603 : Date;IEndingDate@1100528602 : Date;IServiceCategory@1100528601 : Code[20];IAmountType@1100528605 : 'All,No Additional,Additional';IPostingDateFilter@1100528606 : Text);
    VAR
      ServiceLedgerEntry@1100528600 : Record 11012819;
    BEGIN
      GetSCClosedRevenueLines(IServiceContractNo, IStartingDate, IEndingDate, IServiceCategory, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      PAGE.RUNMODAL(0, ServiceLedgerEntry);
    END;

    LOCAL PROCEDURE GetSOOpenPurchaseLines@1100528633(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IDateFilter@1100528603 : Text;VAR OPurchaseOrderControlLine@1100528600 : Record 11020221);
    BEGIN
      OPurchaseOrderControlLine.RESET;
      SetPurchaseOrderControlLineFilter(IServiceOrderNo, IAmountType, IDateFilter, OPurchaseOrderControlLine);
    END;

    PROCEDURE GetSOOpenPurchase@1100409005(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528601 : 'All,No Additional,Additional';IDateFilter@1100528602 : Text) : Decimal;
    VAR
      PurchaseOrderControlLine@1100409000 : Record 11020221;
    BEGIN
      GetSOOpenPurchaseLines(IServiceOrderNo, IAmountType, IDateFilter, PurchaseOrderControlLine);
      PurchaseOrderControlLine.CALCSUMS("Outstanding Amount");
      EXIT(PurchaseOrderControlLine."Outstanding Amount");
    END;

    PROCEDURE ShowSOOpenPurchaseLines@1100528634(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IDateFilter@1100528603 : Text);
    VAR
      PurchaseOrderControlLine@1100528601 : Record 11020221;
    BEGIN
      GetSOOpenPurchaseLines(IServiceOrderNo, IAmountType, IDateFilter, PurchaseOrderControlLine);
      PAGE.RUNMODAL(0, PurchaseOrderControlLine);
    END;

    PROCEDURE GetOpenPurchaseSurcharge@1100409009(IServiceOrderNo@1100409001 : Code[20];IAmountType@1100528600 : 'All,No Additional,Additional';IDateFilter@1100528601 : Text) : Decimal;
    VAR
      PurchaseOrderControlLine@1100409000 : Record 11020221;
    BEGIN
      PurchaseOrderControlLine.SETCURRENTKEY(
          "Base Service Order No.", "Cost Component", "Cost Type", "Shortcut Dimension 2 Code", "Line Type", Date,
          "Additional Cost (Service)");
      PurchaseOrderControlLine.SETRANGE("Base Service Order No.", IServiceOrderNo);
      CASE IAmountType OF
        IAmountType::"No Additional":
          PurchaseOrderControlLine.SETRANGE("Additional Cost (Service)", FALSE);
        IAmountType::Additional:
          PurchaseOrderControlLine.SETRANGE("Additional Cost (Service)", TRUE);
      END;
      IF IDateFilter <> '' THEN
        PurchaseOrderControlLine.SETFILTER(Date, IDateFilter);
      PurchaseOrderControlLine.CALCSUMS("Overhead Surcharge Soft");
      EXIT(PurchaseOrderControlLine."Overhead Surcharge Soft");
    END;

    PROCEDURE GetSOReceivedNotInvoiced@1100409015(IServiceOrderNo@1100409000 : Code[20];IAmountType@1100528600 : 'All,No Additional,Additional';IDateFilter@1100528601 : Text) : Decimal;
    VAR
      PurchaseOrderControlLine@1100409001 : Record 11020221;
    BEGIN
      PurchaseOrderControlLine.SETCURRENTKEY(
          "Base Service Order No.", "Cost Component", "Cost Type", "Shortcut Dimension 2 Code", "Line Type", Date,
          "Additional Cost (Service)");
      PurchaseOrderControlLine.SETRANGE("Base Service Order No.", IServiceOrderNo);
      CASE IAmountType OF
        IAmountType::"No Additional":
          PurchaseOrderControlLine.SETRANGE("Additional Cost (Service)", FALSE);
        IAmountType::Additional:
          PurchaseOrderControlLine.SETRANGE("Additional Cost (Service)", TRUE);
      END;
      IF IDateFilter <> '' THEN
        PurchaseOrderControlLine.SETFILTER(Date, IDateFilter);
      PurchaseOrderControlLine.CALCSUMS("Amt. Rcd. Not Invoiced");
      EXIT(PurchaseOrderControlLine."Amt. Rcd. Not Invoiced");
    END;

    PROCEDURE GetSOReceivedNotInvoicedSurcharge@1100409016(IServiceOrderNo@1100409000 : Code[20];IAmountType@1100528600 : 'All,No Additional,Additional';IDateFilter@1100528601 : Text) : Decimal;
    VAR
      PurchaseOrderControlLine@1100409001 : Record 11020221;
    BEGIN
      PurchaseOrderControlLine.SETCURRENTKEY(
          "Base Service Order No.", "Cost Component", "Cost Type", "Shortcut Dimension 2 Code", "Line Type", Date,
          "Additional Cost (Service)");
      PurchaseOrderControlLine.SETRANGE("Base Service Order No.", IServiceOrderNo);
      CASE IAmountType OF
        IAmountType::"No Additional":
          PurchaseOrderControlLine.SETRANGE("Additional Cost (Service)", FALSE);
        IAmountType::Additional:
          PurchaseOrderControlLine.SETRANGE("Additional Cost (Service)", TRUE);
      END;
      IF IDateFilter <> '' THEN
        PurchaseOrderControlLine.SETFILTER(Date, IDateFilter);
      PurchaseOrderControlLine.CALCSUMS("Overhead Surcharge Firm");
      EXIT(PurchaseOrderControlLine."Overhead Surcharge Firm");
    END;

    LOCAL PROCEDURE GetSOBudgetLines@1100528636(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';VAR OServiceOrderBudgetLine@1100528600 : Record 11012875);
    BEGIN
      OServiceOrderBudgetLine.RESET;
      SetSOBudgetLinesFilter(IServiceOrderNo, IAmountType, OServiceOrderBudgetLine);
    END;

    PROCEDURE GetSOBudget@1100409002(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528601 : 'All,No Additional,Additional') : Decimal;
    VAR
      ServiceOrderBudgetLine@1100409001 : Record 11012875;
    BEGIN
      GetSOBudgetLines(IServiceOrderNo, IAmountType, ServiceOrderBudgetLine);
      ServiceOrderBudgetLine.CALCSUMS(Amount);
      EXIT(ServiceOrderBudgetLine.Amount);
    END;

    PROCEDURE GetSOBudgetHours@1100528628(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528600 : 'All,No Additional,Additional') : Decimal;
    VAR
      ServiceOrderBudgetLine@1100528602 : Record 11012875;
    BEGIN
      GetSOBudgetLines(IServiceOrderNo, IAmountType, ServiceOrderBudgetLine);
      ServiceOrderBudgetLine.SETRANGE("Cost Type", ServiceOrderBudgetLine."Cost Type"::Labor);
      ServiceOrderBudgetLine.CALCSUMS(Hours);
      EXIT(ServiceOrderBudgetLine.Hours);
    END;

    PROCEDURE ShowSOBudgetLines@1100528637(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional');
    VAR
      ServiceOrderBudgetLine@1100528601 : Record 11012875;
    BEGIN
      GetSOBudgetLines(IServiceOrderNo, IAmountType, ServiceOrderBudgetLine);
      PAGE.RUNMODAL(0, ServiceOrderBudgetLine);
    END;

    PROCEDURE GetSCBudgetRevenue@1100409003(IServiceContractNo@1100528601 : Code[20];IStartingDate@1100528602 : Date;IEndingDate@1100528603 : Date;IServiceCategory@1100528604 : Code[20]) : Decimal;
    VAR
      ServiceContract@1100528600 : Record 11012812;
      GetMaintenanceSalesAndCost@1100409002 : Codeunit 11012827;
    BEGIN
      IF NOT ServiceContract.GET(IServiceContractNo) THEN
        EXIT;
      GetMaintenanceSalesAndCost.SetCheckOtherServiceCategories(TRUE);
      EXIT(GetMaintenanceSalesAndCost.CalculateContractRevenue(IServiceContractNo, IServiceCategory, IStartingDate, IEndingDate));
    END;

    LOCAL PROCEDURE GetSOOpenCostPlusEntries@1100528645(IServiceOrderNo@1100528601 : Code[20];IInclNextOrders@1100528604 : Boolean;IAmountType@1100528600 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text;VAR OServiceOrderCostPlusEntry@1100528602 : Record 11012825);
    BEGIN
      OServiceOrderCostPlusEntry.RESET;
      SetSOBudgetRevenueLinesFilter(IServiceOrderNo, IInclNextOrders, IAmountType, IPostingDateFilter, OServiceOrderCostPlusEntry);
    END;

    PROCEDURE GetSOBudgetRevenue@1100409004(IBaseServiceOrderNo@1100528601 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528604 : Text) : Decimal;
    VAR
      ServiceOrder@1100528605 : Record 11012823;
      ServiceOrderCostPlusEntry@1100528600 : Record 11012825;
      InvoicePrice@1100528603 : Decimal;
    BEGIN
      IF NOT ServiceOrder.GET(IBaseServiceOrderNo) THEN
        EXIT;
      ServiceOrder.SETCURRENTKEY("Base Service Order No.");
      ServiceOrder.SETRANGE("Base Service Order No.", IBaseServiceOrderNo);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          IF ServiceOrder."Settlement Method" = ServiceOrder."Settlement Method"::"Fixed Price" THEN
            InvoicePrice += ServiceOrder."Order Amount (LCY)"
          ELSE BEGIN
            GetSOOpenCostPlusEntries(ServiceOrder."No.", FALSE, IAmountType, IPostingDateFilter, ServiceOrderCostPlusEntry);
            ServiceOrderCostPlusEntry.SETRANGE(Invoiced, TRUE);
            ServiceOrderCostPlusEntry.CALCSUMS("Invoice Price (LCY)");
            InvoicePrice += ServiceOrderCostPlusEntry."Invoice Price (LCY)";
            ServiceOrderCostPlusEntry.SETRANGE(Invoiced, FALSE);
            ServiceOrderCostPlusEntry.SETRANGE(Chargeable, TRUE);
            ServiceOrderCostPlusEntry.CALCSUMS("Invoice Price (LCY)");
            InvoicePrice += ServiceOrderCostPlusEntry."Invoice Price (LCY)";
            IF ServiceOrder."Settlement Method" IN [
              ServiceOrder."Settlement Method"::"Collective Installment Overview",
              ServiceOrder."Settlement Method"::"Installment Overview by Service Order"]
            THEN
              InvoicePrice += GetSOSUPRecordingLineRecordingAmount(ServiceOrder."No.", FALSE, IPostingDateFilter);
          END;
        UNTIL ServiceOrder.NEXT = 0;
      EXIT(InvoicePrice);
    END;

    LOCAL PROCEDURE GetSCRevenueLines@1100528639(IServiceContractNo@1100528604 : Code[20];IStartingDate@1100528603 : Date;IEndingDate@1100528602 : Date;IServiceCategory@1100528601 : Code[20];IAmountType@1100528605 : 'All,No Additional,Additional';IPostingDateFilter@1100528606 : Text;VAR OServiceLedgerEntry@1100528600 : Record 11012819);
    BEGIN
      OServiceLedgerEntry.RESET;
      OServiceLedgerEntry.SETCURRENTKEY("Service Contract No.", "Service Order No.", "Service Control Period Date");
      OServiceLedgerEntry.SETRANGE("Service Contract No.", IServiceContractNo);
      OServiceLedgerEntry.SETRANGE("Service Order No.", '');
      OServiceLedgerEntry.SETRANGE("Service Control Period Date", IStartingDate, IEndingDate);
      OServiceLedgerEntry.SETRANGE("Service Category", IServiceCategory);
      CASE IAmountType OF
        IAmountType::"No Additional":
          OServiceLedgerEntry.SETRANGE("Additional Cost", FALSE);
        IAmountType::Additional:
          OServiceLedgerEntry.SETRANGE("Additional Cost", TRUE);
      END;
      IF IPostingDateFilter <> '' THEN
        OServiceLedgerEntry.SETFILTER("Posting Date", IPostingDateFilter);
    END;

    PROCEDURE GetSCRevenue@1100409018(IServiceContractNo@1100528602 : Code[20];IStartingDate@1100528603 : Date;IEndingDate@1100528604 : Date;IServiceCategory@1100528605 : Code[20];IAmountType@1100528606 : 'All,No Additional,Additional';IPostingDateFilter@1100528607 : Text) : Decimal;
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
    BEGIN
      GetSCRevenueLines(IServiceContractNo, IStartingDate, IEndingDate, IServiceCategory, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      ServiceLedgerEntry.CALCSUMS("Total Revenue (LCY)");
      EXIT(ServiceLedgerEntry."Total Revenue (LCY)");
    END;

    PROCEDURE GetSCAmount@1100528651(IServiceContractNo@1100528602 : Code[20];IStartingDate@1100528601 : Date;IEndingDate@1100528600 : Date) : Decimal;
    VAR
      ContractAmountsbyDate@1100528603 : Record 11071708;
    BEGIN
      IF IServiceContractNo = '' THEN
        EXIT;
      ContractAmountsbyDate.SETRANGE(Type, ContractAmountsbyDate.Type::"Service Contract");
      ContractAmountsbyDate.SETRANGE("Service Contract No.", IServiceContractNo);
      ContractAmountsbyDate.SETRANGE("Service Object No.", '');
      ContractAmountsbyDate.SETRANGE("Installment Line No.", 0);
      ContractAmountsbyDate.SETFILTER("Index Date", '<=%1', IEndingDate);
      IF ContractAmountsbyDate.FINDLAST THEN
        EXIT(ContractAmountsbyDate."Amount (LCY)");
    END;

    PROCEDURE ShowSCRevenueLines@1100528640(IServiceContractNo@1100528603 : Code[20];IStartingDate@1100528602 : Date;IEndingDate@1100528601 : Date;IServiceCategory@1100528600 : Code[20];IAmountType@1100528605 : 'All,No Additional,Additional';IPostingDateFilter@1100528606 : Text);
    VAR
      ServiceLedgerEntry@1100528604 : Record 11012819;
    BEGIN
      GetSCRevenueLines(IServiceContractNo, IStartingDate, IEndingDate, IServiceCategory, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      PAGE.RUNMODAL(0, ServiceLedgerEntry);
    END;

    LOCAL PROCEDURE GetSORevenueLines@1100528642(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text;VAR OServiceLedgerEntry@1100528601 : Record 11012819);
    BEGIN
      OServiceLedgerEntry.RESET;
      SetSORevenueLinesFilter(IServiceOrderNo, IAmountType, IPostingDateFilter, OServiceLedgerEntry);
    END;

    PROCEDURE GetSORevenue@1100409027(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528601 : 'All,No Additional,Additional';IPostingDateFilter@1100528602 : Text) : Decimal;
    VAR
      ServiceLedgerEntry@1100409001 : Record 11012819;
    BEGIN
      GetSORevenueLines(IServiceOrderNo, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      ServiceLedgerEntry.CALCSUMS("Total Revenue (LCY)");
      EXIT(ServiceLedgerEntry."Total Revenue (LCY)");
    END;

    PROCEDURE ShowSORevenueLines@1100528643(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
    BEGIN
      GetSORevenueLines(IServiceOrderNo, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      PAGE.RUNMODAL(0, ServiceLedgerEntry);
    END;

    PROCEDURE GetPaidAmount@1100409008(ILevel@1100409006 : 'Contract,Order';IServiceContractNo@1100528600 : Code[20];IStartingDate@1100528601 : Date;IEndingDate@1100528602 : Date;IServiceCategory@1100528603 : Code[20];IServiceOrderNo@1100528604 : Code[20];IAmountType@1100528605 : 'All,No Additional,Additional';IPostingDateFilter@1100528606 : Text) : Decimal;
    VAR
      ServiceLedgerEntry@1100409001 : Record 11012819;
      GenericTempTable@1100409002 : TEMPORARY Record 11020579;
      CustLedgerEntry@1100409003 : Record 21;
      PercPaid@1100409004 : Decimal;
      Paid@1100409005 : Decimal;
    BEGIN
      CASE ILevel OF
        ILevel::Order:
          BEGIN
            ServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.","Source Type","Cost Type","Global Dimension 2 Code","Cost Component",
              "Additional Cost","Cost Present","Revenue Present","Posting Date");
            ServiceLedgerEntry.SETRANGE("Base Service Order No.", IServiceOrderNo);
          END;
        ILevel::Contract:
          BEGIN
            ServiceLedgerEntry.SETCURRENTKEY("Service Contract No.", "Posting Date");
            ServiceLedgerEntry.SETRANGE("Service Contract No.", IServiceContractNo);
            ServiceLedgerEntry.SETRANGE("Service Order No.", '');
            ServiceLedgerEntry.SETRANGE("Posting Date", IStartingDate, IEndingDate);
            ServiceLedgerEntry.SETRANGE("Service Category", IServiceCategory);
          END;
      END;
      ServiceLedgerEntry.SETRANGE("Revenue Present", TRUE);
      ServiceLedgerEntry.SETFILTER("Document Type", '%1|%2', ServiceLedgerEntry."Document Type"::"Sales Invoice", ServiceLedgerEntry."Document Type"::"Sales Credit Memo");
      CASE IAmountType OF
        IAmountType::"No Additional":
          ServiceLedgerEntry.SETRANGE("Additional Cost", FALSE);
        IAmountType::Additional:
          ServiceLedgerEntry.SETRANGE("Additional Cost", TRUE);
      END;
      IF IPostingDateFilter <> '' THEN
        ServiceLedgerEntry.SETFILTER("Posting Date", IPostingDateFilter);
      IF ServiceLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          IF NOT GenericTempTable.GET(ServiceLedgerEntry."Document No.") THEN BEGIN
            GenericTempTable.INIT;
            GenericTempTable."Key Code1" := ServiceLedgerEntry."Document No.";
            GenericTempTable.Dec1 := ServiceLedgerEntry."Total Revenue (LCY)";
            GenericTempTable.INSERT;
          END ELSE BEGIN
            GenericTempTable.Dec1 += ServiceLedgerEntry."Total Revenue (LCY)";
            GenericTempTable.MODIFY;
          END;
        UNTIL ServiceLedgerEntry.NEXT = 0;
      END;

      IF GenericTempTable.FINDFIRST THEN BEGIN
        REPEAT
          CustLedgerEntry.SETCURRENTKEY("Document No.");
          CustLedgerEntry.SETRANGE("Document No.", GenericTempTable."Key Code1");
          CustLedgerEntry.SETFILTER("Document Type", '%1|%2', CustLedgerEntry."Document Type"::Invoice, CustLedgerEntry."Document Type"::"Credit Memo");
          IF IPostingDateFilter <> '' THEN
            CustLedgerEntry.SETFILTER("Posting Date", IPostingDateFilter);
          IF CustLedgerEntry.FINDFIRST THEN BEGIN
            CustLedgerEntry.CALCFIELDS("Amount (LCY)", "Remaining Amt. (LCY)");
            IF CustLedgerEntry."Amount (LCY)" <> 0 THEN BEGIN
              PercPaid := (-1 * GenericTempTable.Dec1) / CustLedgerEntry."Amount (LCY)";
              Paid := Paid + ROUND((PercPaid * (CustLedgerEntry."Amount (LCY)" - CustLedgerEntry."Remaining Amt. (LCY)")), 0.01);
            END;
          END;
        UNTIL GenericTempTable.NEXT = 0;
      END;
      EXIT(-Paid);
    END;

    PROCEDURE GetSCMaintenanceBudgetAndCreateDetails@1100409010(IServiceContractNo@1100528607 : Code[20];IControlPeriodCode@1100528614 : Code[10];IStartingDate@1100528608 : Date;IEndingDate@1100528609 : Date;IServiceCategory@1100528610 : Code[20];ISourceType@1100528613 : Option;IAllArrangements@1100528612 : Boolean;VAR OBudgetHours@1100528611 : Decimal;VAR ContractBudgetRevenue@1100529640 : Decimal) MaintenanceBudget : Decimal;
    VAR
      ServiceContractArrangement@1100409002 : Record 11071705;
      ServiceContract@1100528600 : Record 11012812;
      ServiceOrder@1100528601 : Record 11012823;
      SCBudgetVersion@1100528603 : Record 11071990;
      MaintenanceManagement@1100409006 : Codeunit 11012829;
      MaintenanceSalesAndCostMgt@1100528606 : Codeunit 11012827;
      DepartmentCode@1100409007 : Code[20];
      LaborAmount@1100409008 : Decimal;
      Hours@1100409009 : Decimal;
      Material@1100409010 : Decimal;
      Subcontracting@1100409011 : Decimal;
      Plant@1100409012 : Decimal;
      Sundry@1100409013 : Decimal;
      TotalCost@1100409014 : Decimal;
      SurChargeAmount@1100409015 : Decimal;
      ServiceObject@1100409017 : Record 11071691;
      NoOfDaysPerYear@1100528602 : Integer;
      Factor@1100528605 : Decimal;
      CategoryBudgetPercentage@1100528615 : Decimal;
      BudgetBasedOn@1100528616 : Option;
      BudgetType@1100528617 : 'Budget,Budget Calls,Budget Additional,Revenue Calls,Revenue Additional,Revenue';
      Discipline@1100528618 : Code[10];
      TradeSpeciality@1100528619 : Code[10];
      CallBudgetAmount@1100528620 : Decimal;
      CallBudgetHours@1100528621 : Decimal;
      BudgetLinesOnContractObjectLevelFlag@1100528500 : Boolean;
    BEGIN
      IF NOT ServiceContract.GET(IServiceContractNo) THEN
        EXIT;
      ClearTmpStandardObjectBudgetCost;
      BudgetBasedOn := ServiceContract."Budget Based on";
      IF (BudgetBasedOn = ServiceContract."Budget Based on"::"Category + Maintenance Scheme") AND (ISourceType <> SourceType::Contract) THEN
        BudgetBasedOn := ServiceContract."Budget Based on"::Category;
      CASE BudgetBasedOn OF
        ServiceContract."Budget Based on"::"Maintenance Scheme",
        ServiceContract."Budget Based on"::"Category + Maintenance Scheme":
          BEGIN
            ServiceContractArrangement.SETRANGE("Service Contract No.", IServiceContractNo);
            ServiceContractArrangement.SETRANGE("Theoretical Maintenance Date", IStartingDate, IEndingDate);
            ServiceContractArrangement.SETRANGE(Cancelled, FALSE);
            IF NOT IAllArrangements THEN
              ServiceContractArrangement.SETRANGE("Service Order No.", '');
            ServiceContractArrangement.SETRANGE("Service Category", IServiceCategory);
            IF ServiceContractArrangement.FINDSET THEN
              REPEAT
                LaborAmount := 0;
                Hours := 0;
                Material := 0;
                Subcontracting := 0;
                Sundry := 0;
                Plant := 0;
                TotalCost := 0;
                SurChargeAmount := 0;
                ServiceObject.GET(ServiceContractArrangement."Object No.");
                DepartmentCode := ServiceObject.GetDepartmentCode(ServiceContractArrangement."Service Contract No.");

                BudgetLinesOnContractObjectLevelFlag := BudgetLinesOnContractObjectLevel(IServiceContractNo, ServiceObject."No.", ServiceContractArrangement."Maintenance Scheme", ServiceContractArrangement."Theoretical Maintenance Date");
                IF (ServiceContract."Control Details" = ServiceContract."Control Details"::"Cost Type/Cost Object") OR
                    BudgetLinesOnContractObjectLevelFlag OR
                    NOT TmpStandardObjectBudgetCost.GET(IServiceContractNo, ServiceObject."Standard Object No.", ServiceContractArrangement."Maintenance Scheme", '', '', '') THEN
                BEGIN
                  IF ServiceContract."Control Details" = ServiceContract."Control Details"::"Cost Type/Cost Object" THEN
                    MaintenanceManagement.SetUseTmpBuffer(CalculateCostTypeAmounts);
                  MaintenanceManagement.CalcBudgetLines2(
                    6, ServiceContractArrangement."Object No.", ServiceContractArrangement."Maintenance Scheme", IServiceContractNo,
                    ServiceContractArrangement."Theoretical Maintenance Date",
                    ServiceObject.Quantity, DepartmentCode, 0, 0, TRUE, ServiceOrder."Source Type"::Contract,
                    LaborAmount, Hours, Material, Subcontracting, Plant, Sundry, TotalCost, SurChargeAmount);
                  IF ServiceContract."Control Details" = ServiceContract."Control Details"::"Cost Type/Cost Object" THEN
                    MaintenanceManagement.GetTmpBuffer(TmpServicePrognosisByCostType);
                  IF (ServiceContract."Control Details" = ServiceContract."Control Details"::"Source Type") AND NOT BudgetLinesOnContractObjectLevelFlag THEN
                    InsertTmpStandardObjectBudgetCost(
                      IServiceContractNo, ServiceObject."Standard Object No.", ServiceContractArrangement."Maintenance Scheme",
                      LaborAmount, Hours, Material, Subcontracting, Plant, Sundry, TotalCost, SurChargeAmount);
                END ELSE
                  FillValuesFromTmpStandardObjectBudgetCost(
                    TmpStandardObjectBudgetCost, LaborAmount, Hours, Material, Subcontracting, Plant, Sundry, TotalCost, SurChargeAmount);

                MaintenanceBudget += TotalCost + SurChargeAmount;
                OBudgetHours += Hours;

                ServiceContractArrangement.GetDisciplineTradeSpeciality(Discipline, TradeSpeciality);
                CASE ISourceType OF
                  SourceType::Call:
                    BEGIN
                      GetCallBudgetValues(
                        ServiceContract."No.", TotalCost + SurChargeAmount, Hours, IStartingDate, IEndingDate, CallBudgetAmount, CallBudgetHours);
                      InsertSCControlBudgetLine(
                        ServiceContract."No.", ServiceContractArrangement."Object No.", ServiceContractArrangement."Service Order No.",
                        ServiceContractArrangement."Theoretical Maintenance Date", CallBudgetAmount, CallBudgetHours, 0, BudgetType::"Budget Calls",
                        ServiceContractArrangement."Maintenance Proposal No.", Discipline, TradeSpeciality, ServiceContractArrangement."Service Category");
                    END;
                  SourceType::Contract:
                    InsertSCControlBudgetLine(
                      ServiceContract."No.", ServiceContractArrangement."Object No.", ServiceContractArrangement."Service Order No.",
                      ServiceContractArrangement."Theoretical Maintenance Date", TotalCost + SurChargeAmount, Hours, 0, BudgetType::Budget,
                      ServiceContractArrangement."Maintenance Proposal No.", Discipline, TradeSpeciality, ServiceContractArrangement."Service Category");
                END;
              UNTIL ServiceContractArrangement.NEXT = 0;
          END;
        ServiceContract."Budget Based on"::Category:
          BEGIN
            NoOfDaysPerYear := MaintenanceSalesAndCostMgt.NoOfDaysPerYear(IStartingDate);

            SCBudgetVersion.SETRANGE("Service Contract No.", ServiceContract."No.");
            CASE ISourceType OF
              SourceType::Call:
                SCBudgetVersion.SETRANGE("Source Type", SCBudgetVersion."Source Type"::Call);
              SourceType::Contract:
                SCBudgetVersion.SETRANGE("Source Type", SCBudgetVersion."Source Type"::Contract);
              SourceType::Direct:
                SCBudgetVersion.SETRANGE("Source Type", SCBudgetVersion."Source Type"::Direct);
            END;
            SCBudgetVersion.SETFILTER("Index Date", '<=%1', IEndingDate);
            IF SCBudgetVersion.FINDLAST THEN BEGIN
              GetTmpServPrognByCostTypeFromSCBudgetVersion(SCBudgetVersion, IServiceCategory, IEndingDate, ISourceType);
              IF IServiceCategory = '' THEN
                SCBudgetVersion.SETRANGE("Service Category Filter", IServiceCategory)
              ELSE
                SCBudgetVersion.SETFILTER("Service Category Filter", IServiceCategory);

              SCBudgetVersion.CALCFIELDS("Cost Amount", Hours, "Revenue Amount");
              SurChargeAmount := GetSCBudgetVersionSurchargeAmount(SCBudgetVersion, ISourceType, IEndingDate, IServiceCategory, FALSE, 0 , FALSE, '');

              IF GetServiceCategoryBudgetPercentageByPeriod(ServiceContract."No.", IServiceCategory, IControlPeriodCode, CategoryBudgetPercentage) THEN
                Factor := CategoryBudgetPercentage / 100
              ELSE
                Factor := MaintenanceSalesAndCostMgt.NoOfDaysInterval(ServiceContract, IStartingDate, IEndingDate) / NoOfDaysPerYear;
              MaintenanceBudget := (SCBudgetVersion."Cost Amount" + SurChargeAmount) * Factor;
              ContractBudgetRevenue := SCBudgetVersion."Revenue Amount" * Factor;
              OBudgetHours := SCBudgetVersion.Hours * Factor;
              IF ServiceContract."Control Details" = ServiceContract."Control Details"::"Cost Type/Cost Object" THEN
                UpdateTmpServicePrognosisByCostType(0, Factor, FALSE);

              CASE ISourceType OF
                SourceType::Call:
                  BudgetType := BudgetType::"Budget Calls";
                SourceType::Contract:
                  BudgetType := BudgetType::Budget;
              END;

              IF ISourceType <> SourceType::Direct THEN
                InsertSCControlBudgetLine(
                  IServiceContractNo, '', '', IStartingDate, MaintenanceBudget, OBudgetHours, 0, BudgetType, '', '', '', IServiceCategory)
              ELSE
                InsertSOControlBudgetLine(IServiceContractNo, '', '', MaintenanceBudget, OBudgetHours, 0);
            END;
          END;
      END;
      EXIT(MaintenanceBudget);
    END;

    LOCAL PROCEDURE GetSOOpenHourLines@1100528606(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text;VAR OHourAccountingLine@1100528600 : Record 11012039);
    BEGIN
      OHourAccountingLine.RESET;
      SetHourAccountingLineFilter(IServiceOrderNo, IAmountType, IPostingDateFilter, OHourAccountingLine);
    END;

    PROCEDURE GetSOOpenHoursAmount@1100526231(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528600 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text) : Decimal;
    VAR
      HourAccountingLine@1100528602 : Record 11012039;
    BEGIN
      GetSOOpenHourLines(IServiceOrderNo, IAmountType, IPostingDateFilter, HourAccountingLine);
      HourAccountingLine.CALCSUMS("Amount (LCY)");
      EXIT(HourAccountingLine."Amount (LCY)");
    END;

    PROCEDURE GetSOOpenHours@1100528624(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528600 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text) : Decimal;
    VAR
      HourAccountingLine@1100528602 : Record 11012039;
    BEGIN
      GetSOOpenHourLines(IServiceOrderNo, IAmountType, IPostingDateFilter, HourAccountingLine);
      HourAccountingLine.CALCSUMS("Total Line");
      EXIT(HourAccountingLine."Total Line");
    END;

    PROCEDURE ShowSOOpenHourLines@1100528608(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text);
    VAR
      HourAccountingLine@1100528601 : Record 11012039;
    BEGIN
      GetSOOpenHourLines(IServiceOrderNo, IAmountType, IPostingDateFilter, HourAccountingLine);
      PAGE.RUNMODAL(0, HourAccountingLine);
    END;

    LOCAL PROCEDURE GetSOOpenHourSurchargeLines@1100528631(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text;VAR OHourAccountingLine@1100528600 : Record 11012039);
    BEGIN
      OHourAccountingLine.RESET;
      SetHourAccountingLineFilter(IServiceOrderNo, IAmountType, IPostingDateFilter, OHourAccountingLine);
    END;

    PROCEDURE GetSOOpenHoursAmountSurcharge@1100528630(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528600 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text) Surcharge : Decimal;
    VAR
      HourAccountingLine@1100528602 : Record 11012039;
    BEGIN
      GetSOOpenHourSurchargeLines(IServiceOrderNo, IAmountType, IPostingDateFilter, HourAccountingLine);
      IF HourAccountingLine.FINDSET THEN
        REPEAT
          HourAccountingLine.CALCFIELDS("Overhead Surcharge Service");
          Surcharge += HourAccountingLine."Overhead Surcharge Service";
        UNTIL HourAccountingLine.NEXT = 0;
    END;

    PROCEDURE ShowSOOpenHourSurchargeLines@1100528629(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text);
    VAR
      HourAccountingLine@1100528601 : Record 11012039;
    BEGIN
      GetSOOpenHourSurchargeLines(IServiceOrderNo, IAmountType, IPostingDateFilter, HourAccountingLine);
      PAGE.RUNMODAL(0, HourAccountingLine);
    END;

    LOCAL PROCEDURE GetSOOpenInventoryLines@1100528620(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text;VAR OItemJournalLine@1100528600 : Record 83);
    BEGIN
      OItemJournalLine.RESET;
      SetItemJournalLineFilter(IServiceOrderNo, IAmountType, IPostingDateFilter, OItemJournalLine);
    END;

    PROCEDURE GetSOOpenInventoryAmount@1100526239(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528600 : 'All,No Additional,Additional';IPostingDateFilter@1100528602 : Text) : Decimal;
    VAR
      ItemJournalLine@1100526202 : Record 83;
    BEGIN
      GetSOOpenInventoryLines(IServiceOrderNo, IAmountType, IPostingDateFilter, ItemJournalLine);
      ItemJournalLine.CALCSUMS(Amount);
      EXIT(ItemJournalLine.Amount);
    END;

    PROCEDURE ShowSOOpenInventoryLines@1100528623(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text);
    VAR
      ItemJournalLine@1100528601 : Record 83;
    BEGIN
      GetSOOpenInventoryLines(IServiceOrderNo, IAmountType, IPostingDateFilter, ItemJournalLine);
      PAGE.RUNMODAL(0, ItemJournalLine);
    END;

    LOCAL PROCEDURE GetSOOpenInventorySurchageLines@1100528617(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text;VAR OItemJournalLine@1100528600 : Record 83);
    BEGIN
      OItemJournalLine.RESET;
      SetItemJournalLineFilter(IServiceOrderNo, IAmountType, IPostingDateFilter, OItemJournalLine);
    END;

    PROCEDURE GetSOOpenInventorySurchargeAmount@1100528613(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528600 : 'All,No Additional,Additional';IPostingDateFilter@1100528602 : Text) SurchargeAmount : Decimal;
    VAR
      ItemJournalLine@1100526202 : Record 83;
    BEGIN
      GetSOOpenInventorySurchageLines(IServiceOrderNo, IAmountType, IPostingDateFilter, ItemJournalLine);
      IF ItemJournalLine.FINDFIRST THEN
        REPEAT
          ItemJournalLine.CALCFIELDS("Overhead Surcharge Service");
          SurchargeAmount += ItemJournalLine."Overhead Surcharge Service";
        UNTIL ItemJournalLine.NEXT = 0;
    END;

    PROCEDURE ShowSOOpenInventorySurchargeLines@1100528611(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text);
    VAR
      ItemJournalLine@1100528601 : Record 83;
    BEGIN
      GetSOOpenInventorySurchageLines(IServiceOrderNo, IAmountType, IPostingDateFilter, ItemJournalLine);
      PAGE.RUNMODAL(0, ItemJournalLine);
    END;

    PROCEDURE GetSOStatus@1100528604(IServiceOrderNo@1100528601 : Code[20]) : Integer;
    VAR
      ServiceOrder@1100528600 : Record 11012823;
    BEGIN
      ServiceOrder.GET(IServiceOrderNo);
      EXIT(ServiceOrder.Status);
    END;

    PROCEDURE GetMaintenanceBudgetAndRevenue@1100528605(IServiceContractNo@1100528615 : Code[20];IControlPeriodCode@1100528620 : Code[10];IStartingDate@1100528614 : Date;IEndingDate@1100528613 : Date;IServiceCategory@1100528612 : Code[20];ISourceType@1100528617 : Option;ILineType@1100528616 : Option;IPostingDateFilter@1100528619 : Text;VAR ORevenueAmount@1100528602 : Decimal;VAR OBudgetHours@1100528609 : Decimal;VAR ContractBudgetRevenue@1100529640 : Decimal) MaintenanceBudget : Decimal;
    VAR
      ServiceContract@1100528601 : Record 11012812;
      SCBudgetVersionCalls@1100528603 : Record 11071928;
      MaintenanceSalesAndCostMgt@1100528605 : Codeunit 11012827;
      ServiceSurchargeManagement@1100528607 : Codeunit 11012834;
      ContractRevenue@1100528610 : Decimal;
      ContractMaintenanceBudget@1100528611 : Decimal;
      ContractMaintenanceHours@1100528618 : Decimal;
      PercentageShareCalls@1100528600 : Decimal;
      NoOfDaysPerYear@1100528604 : Integer;
      SurchargeAmount@1100528606 : Decimal;
      Factor@1100528608 : Decimal;
    BEGIN
      IF NOT ServiceContract.GET(IServiceContractNo) THEN
        EXIT;
      IF (ILineType = LineType::"Service Order") AND
         (ServiceContract."Budget Based on" = ServiceContract."Budget Based on"::"Maintenance Scheme") AND
         NOT (ISourceType IN [SourceType::Call, SourceType::Contract])
      THEN
        EXIT;

      ContractRevenue := GetSCRevenue(IServiceContractNo, IStartingDate, IEndingDate, IServiceCategory, 0, IPostingDateFilter);
      ContractMaintenanceBudget :=
        GetSCMaintenanceBudgetAndCreateDetails(
          IServiceContractNo, IControlPeriodCode, IStartingDate, IEndingDate, IServiceCategory, ISourceType, ISourceType = SourceType::Call, ContractMaintenanceHours, ContractBudgetRevenue);

      IF (ServiceContract."Budget Based on" IN [ServiceContract."Budget Based on"::Category, ServiceContract."Budget Based on"::"Category + Maintenance Scheme"]) THEN
        ILineType := LineType::"Service Category";

      ORevenueAmount := 0;
      CASE ILineType OF
        LineType::"Source Type",
        LineType::"Service Order":
          BEGIN
            CASE ISourceType OF
              SourceType::Call:
                BEGIN
                  PercentageShareCalls := ServiceContract.GetPercentageShareCalls(IEndingDate);
                  ORevenueAmount := ROUND(ContractRevenue * PercentageShareCalls / 100);
                  IF CalculateCostTypeRevenues THEN
                    ProcessSCServiceLedgerEntry(IServiceContractNo, IStartingDate, IEndingDate, IServiceCategory, PercentageShareCalls);

                  SCBudgetVersionCalls.SETRANGE("Service Contract No.", ServiceContract."No.");
                  SCBudgetVersionCalls.SETFILTER("Index Date", '<=%1', IEndingDate);
                  IF SCBudgetVersionCalls.FINDLAST THEN BEGIN
                    SCBudgetVersionCalls.CALCFIELDS("Cost Amount", Hours, "Cost Amount (Material)", "Cost Amount (Labor)",
                      "Cost Amount (Subcontr.)", "Cost Amount (Plant)", "Cost Amount (Sundry)", Hours);
                    SurchargeAmount := ServiceSurchargeManagement.CalculateSCSurchargeAmount(
                      ServiceContract."No.", SourceType::Call,
                      IEndingDate,
                      SCBudgetVersionCalls."Cost Amount (Labor)",
                      SCBudgetVersionCalls."Cost Amount (Material)",
                      SCBudgetVersionCalls."Cost Amount (Subcontr.)",
                      SCBudgetVersionCalls."Cost Amount (Plant)",
                      SCBudgetVersionCalls."Cost Amount (Sundry)",
                      SCBudgetVersionCalls."Cost Amount");
                    NoOfDaysPerYear := MaintenanceSalesAndCostMgt.NoOfDaysPerYear(IStartingDate);
                    Factor := MaintenanceSalesAndCostMgt.NoOfDaysInterval(ServiceContract, IStartingDate, IEndingDate) / NoOfDaysPerYear;
                    MaintenanceBudget := ROUND((SCBudgetVersionCalls."Cost Amount" + SurchargeAmount) * Factor);
                    OBudgetHours := ROUND(SCBudgetVersionCalls.Hours * Factor);
                  END ELSE BEGIN
                    MaintenanceBudget := ROUND(ContractMaintenanceBudget * PercentageShareCalls / 100);
                    OBudgetHours := ROUND(ContractMaintenanceHours * PercentageShareCalls / 100);
                    IF ServiceContract."Control Details" = ServiceContract."Control Details"::"Cost Type/Cost Object" THEN
                      UpdateTmpServicePrognosisByCostType(0, PercentageShareCalls, TRUE);
                  END;
                END;
              SourceType::Contract:
                BEGIN
                  PercentageShareCalls := ServiceContract.GetPercentageShareCalls(IEndingDate);
                  ORevenueAmount := ROUND(ContractRevenue * (100 - PercentageShareCalls) / 100);
                  IF CalculateCostTypeRevenues THEN
                    ProcessSCServiceLedgerEntry(IServiceContractNo, IStartingDate, IEndingDate, IServiceCategory, 100 - PercentageShareCalls);
                  MaintenanceBudget := ContractMaintenanceBudget;
                  OBudgetHours := ContractMaintenanceHours;
                END;
            END;
          END;
        LineType::"Service Category":
          BEGIN
            PercentageShareCalls := ServiceContract.GetCategoryDivisionPercentageShareCalls(IServiceCategory, IEndingDate);
            CASE ISourceType OF
              SourceType::Call:
                BEGIN
                  ORevenueAmount := ROUND(ContractRevenue * PercentageShareCalls / 100);
                  IF CalculateCostTypeRevenues THEN
                    ProcessSCServiceLedgerEntry(IServiceContractNo, IStartingDate, IEndingDate, IServiceCategory, PercentageShareCalls);
                END;
              SourceType::Contract:
                BEGIN
                  ORevenueAmount := ROUND(ContractRevenue * (100 - PercentageShareCalls) / 100);
                  IF CalculateCostTypeRevenues THEN
                    ProcessSCServiceLedgerEntry(IServiceContractNo, IStartingDate, IEndingDate, IServiceCategory, 100 - PercentageShareCalls);
                END;
            END;
            MaintenanceBudget := ContractMaintenanceBudget;
            OBudgetHours := ContractMaintenanceHours;
          END;
      END;
    END;

    LOCAL PROCEDURE GetSOActualHoursLines@1100528635(IServiceOrderNo@1100528600 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text;VAR OServiceLedgerEntry@1100528601 : Record 11012819);
    BEGIN
      OServiceLedgerEntry.RESET;
      SetSOServiceLedgerEntryLaborFilter(IServiceOrderNo, IAmountType, IPostingDateFilter, OServiceLedgerEntry);
    END;

    PROCEDURE GetSOActualHours@1100528638(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528602 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text) : Decimal;
    VAR
      ServiceLedgerEntry@1100528600 : Record 11012819;
    BEGIN
      GetSOActualHoursLines(IServiceOrderNo, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      ServiceLedgerEntry.CALCSUMS(Quantity);
      EXIT(ServiceLedgerEntry.Quantity);
    END;

    PROCEDURE ShowSOActualHoursLines@1100528646(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528600 : 'All,No Additional,Additional';IPostingDateFilter@1100528603 : Text);
    VAR
      ServiceLedgerEntry@1100528602 : Record 11012819;
    BEGIN
      GetSOActualHoursLines(IServiceOrderNo, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      PAGE.RUNMODAL(0, ServiceLedgerEntry);
    END;

    LOCAL PROCEDURE GetSOAllowedHoursLines@1100528648(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528600 : 'All,No Additional,Additional';VAR OServiceOrderBudgetLine@1100528602 : Record 11012875);
    BEGIN
      OServiceOrderBudgetLine.RESET;
      OServiceOrderBudgetLine.SETRANGE("Budget Type", OServiceOrderBudgetLine."Budget Type"::Order);
      OServiceOrderBudgetLine.SETRANGE("Base Service Order No.", IServiceOrderNo);
      OServiceOrderBudgetLine.SETRANGE("Cost Type", OServiceOrderBudgetLine."Cost Type"::Labor);
      OServiceOrderBudgetLine.SETRANGE(Finished, TRUE);
      CASE IAmountType OF
        IAmountType::"No Additional":
          OServiceOrderBudgetLine.SETRANGE("Additional Cost", FALSE);
        IAmountType::Additional:
          OServiceOrderBudgetLine.SETRANGE("Additional Cost", TRUE);
      END;
    END;

    PROCEDURE GetSOAllowedHours@1100528649(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528600 : 'All,No Additional,Additional') : Decimal;
    VAR
      ServiceOrderBudgetLine@1100528602 : Record 11012875;
    BEGIN
      GetSOAllowedHoursLines(IServiceOrderNo, IAmountType, ServiceOrderBudgetLine);
      ServiceOrderBudgetLine.CALCSUMS(Hours);
      EXIT(ServiceOrderBudgetLine.Hours);
    END;

    PROCEDURE ShowSOAllowedHoursLines@1100528650(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528600 : 'All,No Additional,Additional');
    VAR
      ServiceOrderBudgetLine@1100528602 : Record 11012875;
    BEGIN
      GetSOAllowedHoursLines(IServiceOrderNo, IAmountType, ServiceOrderBudgetLine);
      PAGE.RUNMODAL(0, ServiceOrderBudgetLine);
    END;

    LOCAL PROCEDURE GetSOAllowedCostLines@1100528656(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528600 : 'All,No Additional,Additional';VAR OServiceOrderBudgetLine@1100528602 : Record 11012875);
    BEGIN
      OServiceOrderBudgetLine.RESET;
      OServiceOrderBudgetLine.SETRANGE("Budget Type", OServiceOrderBudgetLine."Budget Type"::Order);
      OServiceOrderBudgetLine.SETRANGE("Base Service Order No.", IServiceOrderNo);
      OServiceOrderBudgetLine.SETRANGE(Finished, TRUE);
      CASE IAmountType OF
        IAmountType::"No Additional":
          OServiceOrderBudgetLine.SETRANGE("Additional Cost", FALSE);
        IAmountType::Additional:
          OServiceOrderBudgetLine.SETRANGE("Additional Cost", TRUE);
      END;
    END;

    PROCEDURE GetSOAllowedCost@1100528655(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528600 : 'All,No Additional,Additional') : Decimal;
    VAR
      ServiceOrderBudgetLine@1100528602 : Record 11012875;
    BEGIN
      GetSOAllowedCostLines(IServiceOrderNo, IAmountType, ServiceOrderBudgetLine);
      ServiceOrderBudgetLine.CALCSUMS(Amount);
      EXIT(ServiceOrderBudgetLine.Amount);
    END;

    PROCEDURE ShowSOAllowedCostLines@1100528654(IServiceOrderNo@1100528601 : Code[20];IAmountType@1100528600 : 'All,No Additional,Additional');
    VAR
      ServiceOrderBudgetLine@1100528602 : Record 11012875;
    BEGIN
      GetSOAllowedCostLines(IServiceOrderNo, IAmountType, ServiceOrderBudgetLine);
      PAGE.RUNMODAL(0, ServiceOrderBudgetLine);
    END;

    PROCEDURE GetServiceCategoryBudgetPercentageByPeriod@1100528644(IServiceContractNo@1100528600 : Code[20];IServiceCategoryCode@1100528602 : Code[10];IControlPeriodCode@1100528601 : Code[10];VAR OBudgetPercentage@1100528604 : Decimal) : Boolean;
    VAR
      ServCategoryBudgetbyPer@1100528603 : Record 11072314;
    BEGIN
      ServCategoryBudgetbyPer.SETRANGE("Service Contract No.", IServiceContractNo);
      ServCategoryBudgetbyPer.SETRANGE("Service Category", IServiceCategoryCode);
      ServCategoryBudgetbyPer.SETRANGE("Control Period Code", IControlPeriodCode);
      IF ServCategoryBudgetbyPer.FINDFIRST THEN BEGIN
        OBudgetPercentage := ServCategoryBudgetbyPer."Year Budget Percentage";
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetCallBudgetValues@1100528661(IServiceContractNo@1100528600 : Code[20];IMaintenanceBudgetAmount@1100528603 : Decimal;IMaintenanceBudgetHours@1100528614 : Decimal;IStartingDate@1100528612 : Date;IEndingDate@1100528605 : Date;VAR OCallBudgetAmount@1100528604 : Decimal;VAR OCallBudgetHours@1100528613 : Decimal);
    VAR
      ServiceContract@1100528601 : Record 11012812;
      SCBudgetVersionCalls@1100528606 : Record 11071928;
      ServiceSurchargeManagement@1100528608 : Codeunit 11012834;
      MaintenanceSalesAndCostMgt@1100528611 : Codeunit 11012827;
      PercentageShareCalls@1100528602 : Decimal;
      SurchargeAmount@1100528607 : Decimal;
      NoOfDaysPerYear@1100528609 : Integer;
      Factor@1100528610 : Decimal;
    BEGIN
      ServiceContract.GET(IServiceContractNo);
      PercentageShareCalls := ServiceContract.GetPercentageShareCalls(IEndingDate);

      SCBudgetVersionCalls.SETRANGE("Service Contract No.", ServiceContract."No.");
      SCBudgetVersionCalls.SETFILTER("Index Date", '<=%1', IEndingDate);
      IF SCBudgetVersionCalls.FINDLAST THEN BEGIN
        SCBudgetVersionCalls.CALCFIELDS("Cost Amount", Hours, "Cost Amount (Material)", "Cost Amount (Labor)",
          "Cost Amount (Subcontr.)", "Cost Amount (Plant)", "Cost Amount (Sundry)", Hours);
        SurchargeAmount := ServiceSurchargeManagement.CalculateSCSurchargeAmount(
          ServiceContract."No.", SourceType::Call,
          IEndingDate,
          SCBudgetVersionCalls."Cost Amount (Labor)",
          SCBudgetVersionCalls."Cost Amount (Material)",
          SCBudgetVersionCalls."Cost Amount (Subcontr.)",
          SCBudgetVersionCalls."Cost Amount (Plant)",
          SCBudgetVersionCalls."Cost Amount (Sundry)",
          SCBudgetVersionCalls."Cost Amount");
        NoOfDaysPerYear := MaintenanceSalesAndCostMgt.NoOfDaysPerYear(IStartingDate);
        Factor := MaintenanceSalesAndCostMgt.NoOfDaysInterval(ServiceContract, IStartingDate, IEndingDate) / NoOfDaysPerYear;
        OCallBudgetAmount := ROUND((SCBudgetVersionCalls."Cost Amount" + SurchargeAmount) * Factor);
        OCallBudgetHours := ROUND(SCBudgetVersionCalls.Hours * Factor);
      END ELSE BEGIN
        OCallBudgetAmount := ROUND(IMaintenanceBudgetAmount * PercentageShareCalls / 100);
        OCallBudgetHours := ROUND(IMaintenanceBudgetHours * PercentageShareCalls / 100);
      END;
    END;

    LOCAL PROCEDURE "----"@1100528600();
    BEGIN
    END;

    PROCEDURE DeleteSCControlPeriodLines@1100528602(IServiceContractNoFilter@1100528601 : Text);
    VAR
      SCControlbyPeriod@1100528600 : Record 11072311;
    BEGIN
      IF IServiceContractNoFilter <> '' THEN
        SCControlbyPeriod.SETFILTER("Service Contract No.", IServiceContractNoFilter);
      IF ServiceContractNoFilterIsSet AND (IServiceContractNoFilter = '') THEN
        SCControlbyPeriod.SETRANGE("Service Contract No.", IServiceContractNoFilter);

      SCControlbyPeriod.SETRANGE("Closed Period", FALSE);
      SCControlbyPeriod.DELETEALL(TRUE);
    END;

    [External]
    PROCEDURE CreateSCControlPeriodLines@1100528614(IServiceContractNoFilter@1100528614 : Text);
    VAR
      TmpServiceContract@1100528613 : TEMPORARY Record 11012812;
      SCControlbyPeriod@1100528603 : Record 11072311;
      TmpServiceControlPeriod@1100528618 : TEMPORARY Record 11071755;
      ServiceOrder@1100528600 : Record 11012823;
      TmpServiceCategory@1100528616 : TEMPORARY Record 11071985;
      ServicePrognosisManagement@1100528612 : Codeunit 11012884;
      ProgressDialog@1100528606 : Dialog;
      SourceType@1100528604 : Option;
      EntryNo@1100528605 : Integer;
      TotalNoOfContracts@1100528609 : Integer;
      NoOfContracts@1100528607 : Integer;
      TotalNoOfPeriods@1100528610 : Integer;
      NoOfPeriods@1100528608 : Integer;
      LineType@1100528615 : Option;
      StartLineType@1100525000 : Option;
      SourceTypeLineAdded@1100528602 : Boolean;
      TotalNoOfSCControlPeriods@1100529901 : Integer;
      NoOfSCControlPeriods@1100529902 : Integer;
      TotalBudgetRevenueContract@1100528500 : Decimal;
      HasCalculatedTotalBudgetRevenueContract@1100528501 : Boolean;
      ProcessStartedAt@1100528502 : DateTime;
    BEGIN
      ServiceSetup.GET;

      ProcessStartedAt := CURRENTDATETIME;

      ServicePrognosisManagement.TestRealTimeControlMethod;

      DeleteSCControlPeriodLines(IServiceContractNoFilter);

      IF GUIALLOWED THEN
        ProgressDialog.OPEN(Text000);
      EntryNo := GetLastEntryNo;
      FillTmpServiceContract(IServiceContractNoFilter, TmpServiceContract);
      IF TmpServiceContract.FINDSET THEN BEGIN
        TotalNoOfContracts := TmpServiceContract.COUNT;
        REPEAT
          NoOfContracts += 1;
          NoOfPeriods := 0;
          IF GUIALLOWED THEN BEGIN
            ProgressDialog.UPDATE(1, ROUND(NoOfContracts / TotalNoOfContracts * 10000, 1));
            ProgressDialog.UPDATE(2, 0);
            ProgressDialog.UPDATE(3, 0);
            ProgressDialog.UPDATE(5, '');
            ProgressDialog.UPDATE(6, 0);
          END;
          IF FillTmpServiceControlPeriod(TmpServiceContract."No. Series", TmpServiceContract."Global Dimension 1 Code", TmpServiceControlPeriod) THEN BEGIN
            UpdateContractArrangements(TmpServiceContract."No. Series", TmpServiceContract."Budget Based on", TmpServiceControlPeriod);
            TotalNoOfPeriods := TmpServiceControlPeriod.COUNT;
            REPEAT
              HasCalculatedTotalBudgetRevenueContract := FALSE;
              TotalBudgetRevenueContract := 0;

              NoOfPeriods += 1;
              IF GUIALLOWED THEN
                IF TotalNoOfPeriods > 0 THEN
                  ProgressDialog.UPDATE(2, ROUND(NoOfPeriods / TotalNoOfPeriods * 10000, 1));
              AddSCControlbyPeriodLine(TmpServiceContract, TmpServiceControlPeriod.Code, SCControlbyPeriod."Line Type"::Period, '', 0, '', EntryNo, 0);

              IF TmpServiceContract."Control Details" = TmpServiceContract."Control Details"::"Cost Type/Cost Object" THEN
                ProcessCostObjectDetails(TmpServiceContract."No. Series", TmpServiceControlPeriod);

              FillTmpServiceCategory(TmpServiceContract."No. Series", TmpServiceCategory);
              REPEAT
                IF (TmpServiceContract."No. Series" <> '') AND
                   ((TmpServiceCategory.Code <> '') OR
                    (TmpServiceContract."Budget Based on" IN [TmpServiceContract."Budget Based on"::Category, TmpServiceContract."Budget Based on"::"Category + Maintenance Scheme"]))
                THEN
                  AddSCControlbyPeriodLine(
                    TmpServiceContract, TmpServiceControlPeriod.Code, SCControlbyPeriod."Line Type"::"Service Category",
                    TmpServiceCategory.Code, 0, '', EntryNo, 0);

                ServiceOrder.RESET;
                ServiceOrder.SETCURRENTKEY("Service Contract No.");
                ServiceOrder.SETRANGE("Service Contract No.", TmpServiceContract."No. Series");
                IF TmpServiceContract."No. Series" = '' THEN
                  ServiceOrder.SETRANGE("Global Dimension 1 Code", TmpServiceContract."Global Dimension 1 Code");
                IF TmpServiceControlPeriod.Code <> '' THEN
                  ServiceOrder.SETRANGE("Service Control Period Date", TmpServiceControlPeriod."Starting Date", TmpServiceControlPeriod."Ending Date");
                ServiceOrder.SETRANGE("Service Category", TmpServiceCategory.Code);
                ServiceOrder.SETFILTER(Status, '<>%1', ServiceOrder.Status::Cancelled);
                ServiceOrder.SETRANGE("Base Service Order", TRUE);

                FOR SourceType := SCControlbyPeriod."Source Type"::Call TO SCControlbyPeriod."Source Type"::Direct DO BEGIN
                  SourceTypeLineAdded := FALSE;
                  IF (TmpServiceContract."No. Series" <> '') AND
                      (((SourceType IN [SCControlbyPeriod."Source Type"::Call, SCControlbyPeriod."Source Type"::Contract]) AND
                        (TmpServiceContract."Budget Based on" IN [TmpServiceContract."Budget Based on"::"Maintenance Scheme"])) OR
                       ((TmpServiceContract."Budget Based on"  IN [TmpServiceContract."Budget Based on"::Category, TmpServiceContract."Budget Based on"::"Category + Maintenance Scheme"])))
                  THEN BEGIN
                    AddSCControlbyPeriodLine(
                      TmpServiceContract, TmpServiceControlPeriod.Code, SCControlbyPeriod."Line Type"::"Source Type",
                      TmpServiceCategory.Code, SourceType, '', EntryNo, 0);
                    IF (TmpServiceContract."Budget Based on" IN [TmpServiceContract."Budget Based on"::Category, TmpServiceContract."Budget Based on"::"Category + Maintenance Scheme"]) OR
                       (SourceType IN [SCControlbyPeriod."Source Type"::Call, SCControlbyPeriod."Source Type"::Contract])
                    THEN BEGIN
                      IF (TmpServiceCategory.Code = '') AND (NOT HasCalculatedTotalBudgetRevenueContract) THEN BEGIN
                        TotalBudgetRevenueContract := GetSCBudgetRevenue(
                          TmpServiceContract."No. Series", TmpServiceControlPeriod."Starting Date", TmpServiceControlPeriod."Ending Date", '');
                        HasCalculatedTotalBudgetRevenueContract := TRUE;
                      END;
                      AddSCControlbyPeriodLine(
                        TmpServiceContract, TmpServiceControlPeriod.Code, SCControlbyPeriod."Line Type"::"Service Order",
                        TmpServiceCategory.Code, SourceType, '', EntryNo, TotalBudgetRevenueContract);
                    END;
                    SourceTypeLineAdded := TRUE;
                  END;
                  ServiceOrder.SETRANGE("Source Type", SourceType);
                  IF ServiceOrder.FINDSET THEN BEGIN
                    IF NOT SourceTypeLineAdded THEN BEGIN
                      IF (SourceType IN [SCControlbyPeriod."Source Type"::Call, SCControlbyPeriod."Source Type"::Contract]) THEN
                        IF (TmpServiceCategory.Code = '') AND (NOT HasCalculatedTotalBudgetRevenueContract) THEN BEGIN
                          TotalBudgetRevenueContract := GetSCBudgetRevenue(
                            TmpServiceContract."No. Series", TmpServiceControlPeriod."Starting Date", TmpServiceControlPeriod."Ending Date", '');
                          HasCalculatedTotalBudgetRevenueContract := TRUE;
                        END;
                      AddSCControlbyPeriodLine(
                        TmpServiceContract, TmpServiceControlPeriod.Code, SCControlbyPeriod."Line Type"::"Source Type",
                        TmpServiceCategory.Code, SourceType, '', EntryNo, TotalBudgetRevenueContract);
                    END;
                    REPEAT
                      AddSCControlbyPeriodLine(
                        TmpServiceContract, TmpServiceControlPeriod.Code, SCControlbyPeriod."Line Type"::"Service Order",
                        ServiceOrder."Service Category", ServiceOrder."Source Type", ServiceOrder."No.", EntryNo, 0);
                    UNTIL ServiceOrder.NEXT = 0;
                  END;
                END;
              UNTIL TmpServiceCategory.NEXT = 0;
            UNTIL TmpServiceControlPeriod.NEXT = 0;
          END;

          SCControlbyPeriod.RESET;
          SCControlbyPeriod.SETCURRENTKEY("Service Contract No.");
          SCControlbyPeriod.SETRANGE("Service Contract No.", TmpServiceContract."No. Series");
          IF TmpServiceContract."No. Series" = '' THEN
            SCControlbyPeriod.SETRANGE("Global Dimension 1 Code", TmpServiceContract."Global Dimension 1 Code");
          SCControlbyPeriod.SETFILTER("Last Updated at", '>=%1', ProcessStartedAt);

          IF TmpServiceContract."Control Details" = TmpServiceContract."Control Details"::"Cost Type/Cost Object" THEN
            StartLineType := SCControlbyPeriod."Line Type"::"Service Order"
          ELSE
            StartLineType := SCControlbyPeriod."Line Type"::"Source Type";
          SCControlbyPeriod.SETRANGE("Service Order No.", '');

          FOR LineType := StartLineType DOWNTO SCControlbyPeriod."Line Type"::Period DO BEGIN
            IF GUIALLOWED THEN BEGIN
              SCControlbyPeriod."Line Type" := LineType;
              ProgressDialog.UPDATE(5, SCControlbyPeriod."Line Type");
            END;
            SCControlbyPeriod.SETRANGE("Line Type", LineType);

            IF SCControlbyPeriod.FINDSET(TRUE) THEN BEGIN
              NoOfSCControlPeriods := 0;
              TotalNoOfSCControlPeriods := SCControlbyPeriod.COUNT;
              REPEAT
                NoOfSCControlPeriods += 1;
                IF GUIALLOWED THEN
                  ProgressDialog.UPDATE(6, ROUND(NoOfSCControlPeriods * 10000 / TotalNoOfSCControlPeriods, 1));

                IF SCControlbyPeriod."Line Type" <> SCControlbyPeriod."Line Type"::"Service Order" THEN BEGIN
                  SCControlbyPeriod.DetermineTotals;
                  SCControlbyPeriod.MODIFY(TRUE);
                END;

                IF TmpServiceContract."Control Details" = TmpServiceContract."Control Details"::"Cost Type/Cost Object" THEN
                  GetSCControlByPeriodTotalsForUpperLevels(TmpServiceContract, SCControlbyPeriod);
              UNTIL SCControlbyPeriod.NEXT = 0;
            END;
          END;
        UNTIL TmpServiceContract.NEXT = 0;
      END;
      IF GUIALLOWED THEN
        ProgressDialog.CLOSE;
    END;

    LOCAL PROCEDURE AddSCControlbyPeriodLine@1100528601(IServiceContract@1100528604 : Record 11012812;IControlPeriodCode@1100528603 : Code[20];ILineType@1100528602 : Option;IServiceCategory@1100528607 : Code[10];ISourceType@1100528605 : Option;IServiceOrderNo@1100528606 : Code[20];VAR IOLastEntryNo@1100528601 : Integer;TotalBudgetRevenueContract@1100528500 : Decimal);
    VAR
      SCControlbyPeriod@1100528600 : Record 11072311;
    BEGIN
      IOLastEntryNo += 1;
      SCControlbyPeriod.SetTotalBudgetRevenueContract(TotalBudgetRevenueContract);
      SCControlbyPeriod."Entry No." := IOLastEntryNo;
      SCControlbyPeriod.VALIDATE("Service Contract No.", IServiceContract."No. Series");
      SCControlbyPeriod."Control Details" := IServiceContract."Control Details";
      SCControlbyPeriod.VALIDATE("Control Period Code", IControlPeriodCode);
      SCControlbyPeriod."Line Type" := ILineType;
      SCControlbyPeriod.VALIDATE("Service Category", IServiceCategory);
      SCControlbyPeriod."Source Type" := ISourceType;
      SCControlbyPeriod.VALIDATE("Service Order No.", IServiceOrderNo);
      SCControlbyPeriod."Global Dimension 1 Code" := IServiceContract."Global Dimension 1 Code";
      SCControlbyPeriod.INSERT(TRUE);

      IF IServiceContract."Control Details" = IServiceContract."Control Details"::"Cost Type/Cost Object" THEN
        ProcessTmpSCControlByPeriodDetail(SCControlbyPeriod);
    END;

    LOCAL PROCEDURE GetLastEntryNo@1100528609() : Integer;
    VAR
      SCControlbyPeriod@1100528600 : Record 11072311;
    BEGIN
      IF SCControlbyPeriod.FINDLAST THEN
        EXIT(SCControlbyPeriod."Entry No.");
    END;

    LOCAL PROCEDURE FillTmpServiceContract@1100528641(IServiceContractNoFilter@1100528600 : Text;VAR OTmpServiceContract@1100528601 : TEMPORARY Record 11012812);
    VAR
      ServiceContract@1100528602 : Record 11012812;
      DimensionValue@1100529600 : Record 349;
      TmpServiceContractNo@1100529601 : Code[20];
    BEGIN
      IF NOT OTmpServiceContract.ISTEMPORARY THEN
        EXIT;
      TmpServiceContractNo := '0000001';
      OTmpServiceContract.RESET;
      OTmpServiceContract.DELETEALL;

      IF IServiceContractNoFilter = '' THEN BEGIN
        CLEAR(OTmpServiceContract);
        OTmpServiceContract.INSERT;

        DimensionValue.SETRANGE("Global Dimension No.", 1);
        IF DimensionValue.FINDSET THEN
          REPEAT
            OTmpServiceContract."No." := TmpServiceContractNo;
            OTmpServiceContract."Global Dimension 1 Code" := DimensionValue.Code;
            OTmpServiceContract.INSERT;
            TmpServiceContractNo := INCSTR(TmpServiceContractNo);
          UNTIL DimensionValue.NEXT = 0;
      END ELSE
        ServiceContract.SETFILTER("No.", IServiceContractNoFilter);

      IF (IServiceContractNoFilter <> '') OR (NOT ServiceContractNoFilterIsSet) THEN BEGIN
        ServiceContract.SETRANGE(Status, ServiceContract.Status::"Invoicing Allowed");
        IF ServiceContract.FINDSET THEN
          REPEAT
            OTmpServiceContract := ServiceContract;
            OTmpServiceContract."No." := TmpServiceContractNo;
            OTmpServiceContract."No. Series" := ServiceContract."No.";
            OTmpServiceContract.INSERT;
            TmpServiceContractNo := INCSTR(TmpServiceContractNo);
          UNTIL ServiceContract.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FillTmpServiceControlPeriod@1100528625(IServiceContractNo@1100528600 : Code[20];GlobalDim1Code@1100529603 : Code[20];VAR OTmpServiceControlPeriod@1100528601 : Record 11071755) : Boolean;
    VAR
      ServiceSetup@1100528605 : Record 11012800;
      ServiceControlPeriod@1100528602 : Record 11071755;
      ServiceContractCtrlPeriod@1100528603 : Record 11071746;
      LocServiceContract@1100529600 : Record 11012812;
      ControlReferenceDate@1100528604 : Date;
      NoOfPeriods@1100529602 : Integer;
    BEGIN
      IF NOT OTmpServiceControlPeriod.ISTEMPORARY THEN
        EXIT(FALSE);
      OTmpServiceControlPeriod.RESET;
      OTmpServiceControlPeriod.DELETEALL;

      IF IServiceContractNo <> '' THEN BEGIN
        LocServiceContract.GET(IServiceContractNo);
        NoOfPeriods := LocServiceContract."Number of Control Ref. Periods";
        ControlReferenceDate := LocServiceContract."Control Reference Date";
        IF (ControlReferenceDate <> 0D) AND (ControlReferenceDate < WORKDATE) AND GUIALLOWED THEN
          IF NOT CONFIRM(Text001, FALSE, LocServiceContract.FIELDCAPTION("Control Reference Date"), LocServiceContract.TABLECAPTION) THEN
            ERROR('');
        IF (LocServiceContract."Ending Date" <> 0D) AND ((ControlReferenceDate = 0D) OR (ControlReferenceDate > LocServiceContract."Ending Date")) THEN
          ControlReferenceDate := LocServiceContract."Ending Date";
      END;
      IF (ControlReferenceDate = 0D) AND (NoOfPeriods = 0) THEN BEGIN
        ServiceSetup.GET;
        ControlReferenceDate := ServiceSetup."Control Reference Date";
        IF ControlReferenceDate = 0D THEN
          ControlReferenceDate := WORKDATE
        ELSE
          IF (ControlReferenceDate < WORKDATE) AND GUIALLOWED THEN
            IF NOT CONFIRM(Text001, FALSE, ServiceSetup.FIELDCAPTION("Control Reference Date"), ServiceSetup.TABLECAPTION) THEN
              ERROR('');
      END;

      IF IServiceContractNo = '' THEN BEGIN
        ServiceControlPeriod.SETFILTER("Starting Date", '<=%1', ControlReferenceDate);
        IF ServiceControlPeriod.FINDSET THEN
          REPEAT
            IF NOT ControlPeriodAlreadyExist(IServiceContractNo, GlobalDim1Code, ServiceControlPeriod.Code) THEN BEGIN
              OTmpServiceControlPeriod := ServiceControlPeriod;
              OTmpServiceControlPeriod.INSERT;
            END;
          UNTIL ServiceControlPeriod.NEXT = 0;
      END ELSE BEGIN
        ServiceContractCtrlPeriod.UpdateControlPeriodsNumber(IServiceContractNo, WORKDATE, ControlReferenceDate);
        ServiceContractCtrlPeriod.SETRANGE("Service Contract No.", IServiceContractNo);
        ServiceContractCtrlPeriod.SETFILTER("Starting Date", '<=%1', ControlReferenceDate);
        IF ServiceContractCtrlPeriod.FINDSET THEN
          REPEAT
            IF NOT ControlPeriodAlreadyExist(IServiceContractNo, GlobalDim1Code, ServiceContractCtrlPeriod.Code) THEN BEGIN
              OTmpServiceControlPeriod.Code := ServiceContractCtrlPeriod.Code;
              OTmpServiceControlPeriod."Starting Date" := ServiceContractCtrlPeriod."Starting Date";
              OTmpServiceControlPeriod."Ending Date" := ServiceContractCtrlPeriod."Ending Date";
              OTmpServiceControlPeriod.INSERT;
            END;
          UNTIL ServiceContractCtrlPeriod.NEXT = 0;
      END;
      EXIT(OTmpServiceControlPeriod.FINDFIRST);
    END;

    LOCAL PROCEDURE ControlPeriodAlreadyExist@1100528647(IServiceContractNo@1100528600 : Code[20];GlobalDim1Code@1100529600 : Code[20];IControlPeriodCode@1100528601 : Code[10]) : Boolean;
    VAR
      SCControlbyPeriod@1100528602 : Record 11072311;
    BEGIN
      SCControlbyPeriod.SETRANGE("Service Contract No.", IServiceContractNo);
      IF IServiceContractNo = '' THEN
        SCControlbyPeriod.SETRANGE("Global Dimension 1 Code", GlobalDim1Code);
      SCControlbyPeriod.SETRANGE("Control Period Code", IControlPeriodCode);
      EXIT(NOT SCControlbyPeriod.ISEMPTY);
    END;

    LOCAL PROCEDURE FillTmpServiceCategory@1100528632(IServiceContractNo@1100528601 : Code[20];VAR OTmpServiceCategory@1100528600 : TEMPORARY Record 11071985);
    VAR
      ServiceCategory@1100528602 : Record 11071985;
    BEGIN
      IF NOT OTmpServiceCategory.ISTEMPORARY THEN
        EXIT;
      CLEAR(OTmpServiceCategory);
      OTmpServiceCategory.DELETEALL;
      OTmpServiceCategory.INSERT;
      ServiceCategory.SETFILTER("Service Contract No.", '<>%1&%2', '', IServiceContractNo);
      IF ServiceCategory.FINDSET THEN
        REPEAT
          OTmpServiceCategory := ServiceCategory;
          OTmpServiceCategory.INSERT;
        UNTIL ServiceCategory.NEXT = 0;
      OTmpServiceCategory.FINDFIRST;
    END;

    LOCAL PROCEDURE "-----"@1100528652();
    BEGIN
    END;

    PROCEDURE GenerateControlBudgetLines@1100528653(IServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceOrder@1100528602 : Record 11012823;
      ServiceOrderObject@1100528601 : Record 11071724;
      ServiceOrderBudgetLine@1100528603 : Record 11012875;
      TotalAmount@1100528604 : Decimal;
      TotalHours@1100528605 : Decimal;
      FinishedPercentage@1100528606 : Decimal;
      BudgetType@1100528607 : 'Budget,Budget Calls,Budget Additional,Revenue Calls,Revenue Additional,Revenue ';
    BEGIN
      ServiceOrder.SETRANGE("Base Service Order No.", IServiceOrderNo);
      IF ServiceOrder.ISEMPTY THEN
        EXIT;
      ServiceOrder.FINDSET;
      REPEAT
        ServiceOrderObject.SETRANGE("Service Order No.", ServiceOrder."No.");
        IF ServiceOrderObject.FINDSET THEN
          REPEAT
            ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrder."No.");
            IF ServiceOrderObject."Object No." <> '' THEN
              ServiceOrderBudgetLine.SETRANGE("Object No.", ServiceOrderObject."Object No.");
            IF ServiceOrderObject."Maintenance Scheme" <> '' THEN
              ServiceOrderBudgetLine.SETRANGE("Maintenance Scheme", ServiceOrderObject."Maintenance Scheme")
            ELSE
              ServiceOrderBudgetLine.SETRANGE("Maintenance Scheme");
            ServiceOrderBudgetLine.CALCSUMS(Amount, Hours);
            TotalAmount := ServiceOrderBudgetLine.Amount;
            TotalHours := ServiceOrderBudgetLine.Hours;
            ServiceOrderBudgetLine.SETRANGE(Finished, TRUE);
            ServiceOrderBudgetLine.CALCSUMS(Amount, Hours);
            IF TotalAmount <> 0 THEN
              FinishedPercentage := ServiceOrderBudgetLine.Amount / TotalAmount * 100
            ELSE
              IF ServiceOrderObject.Finished THEN
                FinishedPercentage := 100;
            ServiceOrderBudgetLine.SETRANGE(Finished);
            InsertSOControlBudgetLine(
              ServiceOrder."Service Contract No.", ServiceOrder."No.", ServiceOrderObject."Object No.",
              TotalAmount, TotalHours, FinishedPercentage);
            CASE ServiceOrder."Source Type" OF
              ServiceOrder."Source Type"::Call:
                BudgetType := BudgetType::"Budget Calls";
              ServiceOrder."Source Type"::Contract:
                BudgetType := BudgetType::Budget;
              ServiceOrder."Source Type"::Direct:
                BudgetType := BudgetType::"Budget Additional";
            END;
            InsertSCControlBudgetLine(
              ServiceOrder."Service Contract No.", ServiceOrderObject."Object No.", ServiceOrder."No.",
              ServiceOrder."Starting Date", TotalAmount, TotalHours, FinishedPercentage, BudgetType,
              '', ServiceOrder.Discipline, ServiceOrder."Trade Speciality", ServiceOrder."Service Category");
          UNTIL ServiceOrderObject.NEXT = 0;
      UNTIL ServiceOrder.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertSOControlBudgetLine@1100528659(IServiceContractNo@1100528608 : Code[20];IServiceOrderNo@1100528602 : Code[20];IObjectNo@1100528607 : Code[20];IAmount@1100528604 : Decimal;IHours@1100528609 : Decimal;IFinishedPerc@1100528605 : Decimal);
    VAR
      ServiceOrderControlBudget@1100528600 : Record 11071757;
      ServiceOrder@1100528603 : Record 11012823;
      ServiceContract@1100528606 : Record 11012812;
      LineNo@1100528601 : Integer;
    BEGIN
      IF (IServiceOrderNo <> '') AND NOT ServiceOrder.GET(IServiceOrderNo) THEN
        EXIT;
      IF NOT ServiceContract.GET(IServiceContractNo) THEN
        EXIT;

      ServiceOrderControlBudget.SETRANGE("Reporting Date", TODAY);
      ServiceOrderControlBudget.SETRANGE("Service Order No.", IServiceOrderNo);
      IF ServiceOrderControlBudget.FINDLAST THEN
        LineNo := ServiceOrderControlBudget."Line No." + 10000
      ELSE
        LineNo := 10000;

      ServiceOrderControlBudget.RESET;
      ServiceOrderControlBudget.INIT;
      ServiceOrderControlBudget."Reporting Date" := TODAY;
      ServiceOrderControlBudget.VALIDATE("Service Order No.", ServiceOrder."No.");
      IF ServiceContract.IsAlwaysCloseOrdersAllowed(ServiceOrder."Service Contract No.", ServiceOrder."Source Type") THEN
        ServiceOrderControlBudget.Status := ServiceOrder.Status::Finished
      ELSE
        ServiceOrderControlBudget.Status := ServiceOrder.Status;
      ServiceOrderControlBudget."Source Type" := ServiceOrder."Source Type";
      ServiceOrderControlBudget."Service Control Period Date" := ServiceOrder."Service Control Period Date";
      ServiceOrderControlBudget."Line No." := LineNo;
      ServiceOrderControlBudget.Work := ServiceOrderControlBudget.Work::Contract;
      ServiceOrderControlBudget.VALIDATE("No.", ServiceOrder."Service Contract No.");
      ServiceOrderControlBudget.Amount := IAmount;
      ServiceOrderControlBudget.Hours := IHours;
      ServiceOrderControlBudget.Finished := IFinishedPerc = 100;
      ServiceOrderControlBudget."Allowed Amount" := (ServiceOrderControlBudget.Amount / 100) * IFinishedPerc;
      ServiceOrderControlBudget."Customer No." := ServiceContract."Customer No.";
      ServiceOrderControlBudget."Global Dimension 1 Code" := ServiceContract."Global Dimension 1 Code";
      ServiceOrderControlBudget."Contract Group" := ServiceContract."Contract Group";
      ServiceOrderControlBudget.Surcharge := FALSE;
      ServiceOrderControlBudget."Budget Type" := ServiceOrderControlBudget."Budget Type"::Budget;
      ServiceOrderControlBudget.Discipline := ServiceOrder.Discipline;
      ServiceOrderControlBudget."Trade Speciality" := ServiceOrder."Trade Speciality";
      ServiceOrderControlBudget."Territory Code" := ServiceOrder."Territory Code";
      ServiceOrderControlBudget."Service Object No." := IObjectNo;
      ServiceOrderControlBudget."Base Service Order" := ServiceOrder."Base Service Order";
      ServiceOrderControlBudget."Service Location No." := ServiceOrder."Service Location No.";
      ServiceOrderControlBudget.INSERT(TRUE);
    END;

    PROCEDURE GenerateSOControlCostRevLines@1100528662(IServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceOrder@1100528601 : Record 11012823;
      HourAccountingSurcharge@1100528603 : Record 11020308;
      ServiceLedgerEntry@1100528606 : Record 11012819;
      HourAccountingLine@1100528607 : Record 11012039;
      ItemJournalLine@1100528608 : Record 83;
      ItemJournalSurcharge@1100528609 : Record 11020585;
      PurchaseOrderControlLine@1100528610 : Record 11020221;
      DataSource@1100528602 : 'Service Ledger,Hour Accounting,Hour Accounting Surcharge,Inventory,Purchase Control,Sales Line,Cost Plus Entry';
      CostType@1100528605 : ' ,Labor,Material,Subcontracting,Plant,Sundry';
      Type@1100528604 : 'Revenue,Cost,Surcharge Soft,Surcharge Firm,Open Purchase,Received not Invoiced,Hours';
    BEGIN
      ServiceOrder.SETRANGE("Base Service Order No.", IServiceOrderNo);
      IF ServiceOrder.ISEMPTY THEN
        EXIT;
      ServiceOrder.FINDSET;
      REPEAT
        //Open Hours Surcharge
        HourAccountingSurcharge.SETCURRENTKEY(
          "Service Order No.", "Cost Type", "Cost Object", "Cost Component", "Posting Date", "Additional Cost (Service)");
        HourAccountingSurcharge.SETRANGE("Service Order No.", IServiceOrderNo);
        HourAccountingSurcharge.SETRANGE("Additional Cost (Service)", FALSE);
        HourAccountingSurcharge.SETRANGE("Cost Type", HourAccountingSurcharge."Cost Type"::Labor);
        HourAccountingSurcharge.CALCSUMS("Overhead Surcharge Service");
        IF HourAccountingSurcharge."Overhead Surcharge Service" <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::"Hour Accounting", HourAccountingSurcharge."Overhead Surcharge Service", 0, CostType::Labor, Type::"Surcharge Firm");
        HourAccountingSurcharge.SETFILTER("Cost Type", '<>%1', HourAccountingSurcharge."Cost Type"::Labor);
        HourAccountingSurcharge.CALCSUMS("Overhead Surcharge Service");
        IF HourAccountingSurcharge."Overhead Surcharge Service" <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::"Hour Accounting", HourAccountingSurcharge."Overhead Surcharge Service", 0, CostType::" ", Type::"Surcharge Firm");

        //Actual Cost
        ServiceLedgerEntry.SETCURRENTKEY(
          "Service Order No.", "Source Type", "Cost Type", "Global Dimension 2 Code", "Cost Component", "Additional Cost",
          "Cost Present", "Revenue Present", "Posting Date");
        ServiceLedgerEntry.SETRANGE("Service Order No.", IServiceOrderNo);
        ServiceLedgerEntry.SETRANGE("Additional Cost", FALSE);
        ServiceLedgerEntry.SETRANGE("Cost Type", ServiceLedgerEntry."Cost Type"::Labor);
        ServiceLedgerEntry.CALCSUMS("Total Cost (LCY)", Quantity);
        IF ServiceLedgerEntry."Total Cost (LCY)" <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::"Service Ledger", ServiceLedgerEntry."Total Cost (LCY)", ServiceLedgerEntry.Quantity, CostType::Labor, Type::Cost);
        ServiceLedgerEntry.SETFILTER("Cost Type", '<>%1', ServiceLedgerEntry."Cost Type"::Labor);
        ServiceLedgerEntry.CALCSUMS("Total Cost (LCY)");
        IF ServiceLedgerEntry."Total Cost (LCY)" <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::"Service Ledger", ServiceLedgerEntry."Total Cost (LCY)", 0, CostType::" ", Type::Cost);

        //Open Hours
        HourAccountingLine.SETCURRENTKEY(
          "Service Order No.", "Cost Type", "Cost Object", "Cost Component", "Posting Date", "Additional Cost (Service)");
        HourAccountingLine.SETRANGE("Service Order No.", IServiceOrderNo);
        HourAccountingLine.SETRANGE("Additional Cost (Service)", FALSE);
        HourAccountingLine.SETRANGE("Cost Type", HourAccountingLine."Cost Type"::Labor);
        HourAccountingLine.CALCSUMS("Total Line", "Amount (LCY)");
        IF HourAccountingLine."Amount (LCY)" <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::"Hour Accounting", HourAccountingLine."Amount (LCY)", HourAccountingLine."Total Line", CostType::Labor, Type::Cost);
        HourAccountingLine.SETFILTER("Cost Type", '<>%1', HourAccountingLine."Cost Type"::Labor);
        HourAccountingLine.CALCSUMS("Amount (LCY)");
        IF HourAccountingLine."Amount (LCY)" <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::"Hour Accounting", HourAccountingLine."Amount (LCY)", 0, CostType::" ", Type::Cost);

        //Open Inventory Amount
        ItemJournalLine.SETCURRENTKEY(
          "Service Order No.", "Cost Type", "Shortcut Dimension 2 Code", "Cost Component", "Service Control Year", "Posting Date",
          "Additional Cost (Service)");
        ItemJournalLine.SETRANGE("Service Order No.", IServiceOrderNo);
        ItemJournalLine.SETRANGE("Additional Cost (Service)", FALSE);
        ItemJournalLine.SETRANGE("Cost Type", ItemJournalLine."Cost Type"::Labor);
        ItemJournalLine.CALCSUMS(Quantity, Amount);
        IF ItemJournalLine.Amount <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::Inventory, ItemJournalLine.Amount, ItemJournalLine.Quantity, CostType::Labor, Type::Cost);
        ItemJournalLine.SETFILTER("Cost Type", '<>%1', ItemJournalLine."Cost Type"::Labor);
        ItemJournalLine.CALCSUMS(Amount);
        IF ItemJournalLine.Amount <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::Inventory, ItemJournalLine.Amount, 0, CostType::" ", Type::Cost);

        //Open Inventory Surcharge
        ItemJournalSurcharge.SETCURRENTKEY(
          "Service Order No.", "Cost Type", "Shortcut Dimension 2 Code", "Cost Component", "Service Control Year", "Posting Date",
          "Additional Cost (Service)");
        ItemJournalSurcharge.SETRANGE("Service Order No.", IServiceOrderNo);
        ItemJournalSurcharge.SETRANGE("Additional Cost (Service)", FALSE);
        ItemJournalSurcharge.SETRANGE("Cost Type", ItemJournalSurcharge."Cost Type"::Labor);
        ItemJournalSurcharge.CALCSUMS("Overhead Surcharge Service");
        IF ItemJournalSurcharge."Overhead Surcharge Service" <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::Inventory, ItemJournalSurcharge."Overhead Surcharge Service", 0, CostType::Labor, Type::"Surcharge Firm");
        ItemJournalSurcharge.SETFILTER("Cost Type", '<>%1', ItemJournalSurcharge."Cost Type"::Labor);
        ItemJournalSurcharge.CALCSUMS("Overhead Surcharge Service");
        IF ItemJournalSurcharge."Overhead Surcharge Service" <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::Inventory, ItemJournalSurcharge."Overhead Surcharge Service", 0, CostType::" ", Type::"Surcharge Firm");

        //Open Purchase
        PurchaseOrderControlLine.SETCURRENTKEY(
          "Service Order No.", "Cost Component", "Cost Type", "Shortcut Dimension 2 Code", "Line Type",Date, "Additional Cost (Service)");
        PurchaseOrderControlLine.SETRANGE("Service Order No.", IServiceOrderNo);
        PurchaseOrderControlLine.SETRANGE("Additional Cost (Service)", FALSE);
        PurchaseOrderControlLine.SETRANGE("Cost Type", PurchaseOrderControlLine."Cost Type"::Labor);
        PurchaseOrderControlLine.CALCSUMS("Outstanding Amount", "Outstanding Hours");
        IF PurchaseOrderControlLine."Outstanding Amount" <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::"Purchase Control", PurchaseOrderControlLine."Outstanding Amount", PurchaseOrderControlLine."Outstanding Hours",
            CostType::Labor, Type::"Open Purchase");
        PurchaseOrderControlLine.SETFILTER("Cost Type", '<>%1', PurchaseOrderControlLine."Cost Type"::Labor);
        PurchaseOrderControlLine.CALCSUMS("Outstanding Amount");
        IF PurchaseOrderControlLine."Outstanding Amount" <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::"Purchase Control", PurchaseOrderControlLine."Outstanding Amount", 0,
            CostType::" ", Type::"Open Purchase");

        //Received/Not Invoiced
        PurchaseOrderControlLine.SETRANGE("Cost Type", PurchaseOrderControlLine."Cost Type"::Labor);
        PurchaseOrderControlLine.CALCSUMS("Amt. Rcd. Not Invoiced", "Hours Rcd. Not Invoiced");
        IF PurchaseOrderControlLine."Amt. Rcd. Not Invoiced" <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::"Purchase Control", PurchaseOrderControlLine."Amt. Rcd. Not Invoiced",
            PurchaseOrderControlLine."Hours Rcd. Not Invoiced", CostType::Labor, Type::"Received not Invoiced");
        PurchaseOrderControlLine.SETFILTER("Cost Type", '<>%1', PurchaseOrderControlLine."Cost Type"::Labor);
        PurchaseOrderControlLine.CALCSUMS("Amt. Rcd. Not Invoiced");
        IF PurchaseOrderControlLine."Amt. Rcd. Not Invoiced" <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::"Purchase Control", PurchaseOrderControlLine."Amt. Rcd. Not Invoiced",
            0, CostType::" ", Type::"Received not Invoiced");

        //Open Purchase Overhead Open
        PurchaseOrderControlLine.SETRANGE("Cost Type", PurchaseOrderControlLine."Cost Type"::Labor);
        PurchaseOrderControlLine.CALCSUMS("Overhead Surcharge Soft");
        IF PurchaseOrderControlLine."Overhead Surcharge Soft" <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::"Purchase Control", PurchaseOrderControlLine."Overhead Surcharge Soft", 0, CostType::Labor, Type::"Surcharge Soft");
        PurchaseOrderControlLine.SETFILTER("Cost Type", '<>%1', PurchaseOrderControlLine."Cost Type"::Labor);
        PurchaseOrderControlLine.CALCSUMS("Overhead Surcharge Soft");
        IF PurchaseOrderControlLine."Overhead Surcharge Soft" <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::"Purchase Control", PurchaseOrderControlLine."Overhead Surcharge Soft", 0, CostType::" ", Type::"Surcharge Soft");

        //Open Purchase Overhead Received/Not Invoiced
        PurchaseOrderControlLine.SETRANGE("Cost Type", PurchaseOrderControlLine."Cost Type"::Labor);
        PurchaseOrderControlLine.CALCSUMS("Overhead Surcharge Firm");
        IF PurchaseOrderControlLine."Overhead Surcharge Firm" <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::"Purchase Control", PurchaseOrderControlLine."Overhead Surcharge Firm", 0, CostType::Labor, Type::"Surcharge Firm");
        PurchaseOrderControlLine.SETFILTER("Cost Type", '<>%1', PurchaseOrderControlLine."Cost Type"::Labor);
        PurchaseOrderControlLine.CALCSUMS("Overhead Surcharge Firm");
        IF PurchaseOrderControlLine."Overhead Surcharge Firm" <> 0 THEN
          InsertSOControlCostRevLine(
            IServiceOrderNo, DataSource::"Purchase Control", PurchaseOrderControlLine."Overhead Surcharge Firm", 0, CostType::" ", Type::"Surcharge Firm");
      UNTIL ServiceOrder.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertSOControlCostRevLine@1100528663(IServiceOrderNo@1100528601 : Code[20];IDataSource@1100528617 : 'Service Ledger,Hour Accounting,Hour Accounting Surcharge,Inventory,Purchase Control,Sales Line,Cost Plus Entry';ICostAmount@1100528616 : Decimal;IHours@1100528615 : Decimal;ICostType@1100528609 : ' ,Labor,Material,Subcontracting,Plant,Sundry';IType@1100528608 : 'Revenue,Cost,Surcharge Soft,Surcharge Firm,Open Purchase,Received not Invoiced,Hours');
    VAR
      ServiceContract@1100528603 : Record 11012812;
      ServiceOrder@1100528600 : Record 11012823;
      ServiceOrderCtrlCostRev@1100528602 : Record 11071756;
      LineNo@1100528604 : Integer;
    BEGIN
      IF NOT ServiceOrder.GET(IServiceOrderNo) THEN EXIT;
      IF NOT ServiceContract.GET(ServiceOrder."Service Contract No.") THEN EXIT;

      ServiceOrderCtrlCostRev.INIT;
      ServiceOrderCtrlCostRev.SETRANGE("Reporting Date", TODAY);
      ServiceOrderCtrlCostRev.SETRANGE("Service Order No.", ServiceOrder."No.");
      IF ServiceOrderCtrlCostRev.FINDLAST THEN
        LineNo := ServiceOrderCtrlCostRev."Line No." + 10000
      ELSE
        LineNo := 10000;

      ServiceOrderCtrlCostRev.RESET;
      ServiceOrderCtrlCostRev.INIT;
      ServiceOrderCtrlCostRev."Reporting Date" := TODAY;
      ServiceOrderCtrlCostRev."Service Order No." := ServiceOrder."No.";
      IF ServiceContract.IsAlwaysCloseOrdersAllowed(ServiceOrder."Service Contract No.", ServiceOrder."Source Type") THEN
        ServiceOrderCtrlCostRev.Status := ServiceOrder.Status::Finished
      ELSE
        ServiceOrderCtrlCostRev.Status := ServiceOrder.Status;
      ServiceOrderCtrlCostRev."Service Control Period Date" := ServiceOrder."Service Control Period Date";
      ServiceOrderCtrlCostRev."Line No." := LineNo;
      ServiceOrderCtrlCostRev.Work := ServiceOrderCtrlCostRev.Work::Contract;
      ServiceOrderCtrlCostRev.VALIDATE("No.", ServiceOrder."Service Contract No.");
      ServiceOrderCtrlCostRev."Data Source" := IDataSource;
      ServiceOrderCtrlCostRev."Cost Amount" := ICostAmount;
      ServiceOrderCtrlCostRev.Hours := IHours;
      ServiceOrderCtrlCostRev."Cost Type" := ICostType;
      ServiceOrderCtrlCostRev."Customer No." := ServiceContract."Customer No.";
      ServiceOrderCtrlCostRev."Global Dimension 1 Code" := ServiceContract."Global Dimension 1 Code";
      ServiceOrderCtrlCostRev."Contract Group" := ServiceContract."Contract Group";
      ServiceOrderCtrlCostRev."Data Source" := IDataSource;
      ServiceOrderCtrlCostRev.Type := IType;
      ServiceOrderCtrlCostRev."Source Type" := ServiceOrder."Source Type";
      ServiceOrderCtrlCostRev.Discipline := ServiceOrder.Discipline;
      ServiceOrderCtrlCostRev."Trade Speciality" := ServiceOrder."Trade Speciality";
      ServiceOrderCtrlCostRev."Territory Code" := ServiceOrder."Territory Code";
      ServiceOrderCtrlCostRev."Service Location No." := ServiceOrder."Service Location No.";
      ServiceOrderCtrlCostRev.INSERT(TRUE);
    END;

    PROCEDURE InsertSCControlBudgetLine@1100528658(IServiceContractNo@1100528615 : Code[20];IObjectNo@1100528614 : Code[20];IServiceOrderNo@1100528600 : Code[20];IReferenceDate@1100528612 : Date;IAmount@1100528611 : Decimal;IHours@1100528610 : Decimal;IFinishedPerc@1100528607 : Decimal;IBudgetType@1100528606 : 'Budget,Budget Calls,Budget Additional,Revenue Calls,Revenue Additional,Revenue';IMaintenanceProposalCode@1100528605 : Code[20];IDiscipline@1100528602 : Code[10];ITradeSpeciality@1100528601 : Code[10];IServiceCategory@1100528616 : Code[10]);
    VAR
      ServiceContract@1100528603 : Record 11012812;
      ServiceLocation@1100528613 : Record 11012801;
      ServiceOrder@1100528604 : Record 11012823;
      ServiceContractCtrlBudget@1100528609 : Record 11071759;
      LineNo@1100528608 : Integer;
    BEGIN
      IF NOT ServiceOrder.GET(IServiceOrderNo) THEN ServiceOrder.INIT;
      IF NOT ServiceContract.GET(IServiceContractNo) THEN EXIT;

      ServiceContractCtrlBudget.SETRANGE("Reporting Date", TODAY);
      ServiceContractCtrlBudget.SETRANGE("Service Contract No.", IServiceContractNo);
      IF ServiceContractCtrlBudget.FINDLAST THEN
        LineNo := ServiceContractCtrlBudget."Line No." + 10000
      ELSE
        LineNo := 10000;

      ServiceContractCtrlBudget.RESET;
      ServiceContractCtrlBudget.INIT;
      ServiceContractCtrlBudget."Reporting Date" := TODAY;
      ServiceContractCtrlBudget.VALIDATE("Service Contract No.", IServiceContractNo);
      ServiceContractCtrlBudget.VALIDATE("Service Object No.", IObjectNo);
      IF ServiceContractCtrlBudget."Service Location No." = '' THEN
        ServiceContractCtrlBudget."Service Location No." := ServiceOrder."Service Location No.";
      IF ServiceOrder.GET(IServiceOrderNo) THEN BEGIN
        ServiceContractCtrlBudget.Discipline := ServiceOrder.Discipline;
        ServiceContractCtrlBudget."Trade Speciality" := ServiceOrder."Trade Speciality";
        ServiceContractCtrlBudget."Territory Code" := ServiceOrder."Territory Code"
      END ELSE BEGIN
        ServiceContractCtrlBudget.Discipline := IDiscipline;
        ServiceContractCtrlBudget."Trade Speciality" := ITradeSpeciality;
        IF ServiceLocation.GET(ServiceContractCtrlBudget."Service Location No.") THEN
          ServiceContractCtrlBudget."Territory Code" := ServiceLocation."Territory Code";
      END;
      ServiceContractCtrlBudget."Reference Date" := IReferenceDate;
      ServiceContractCtrlBudget."Line No." := LineNo;
      ServiceContractCtrlBudget.Status := ServiceOrder.Status;
      IF ServiceOrder.GET(IServiceOrderNo) THEN BEGIN
        IF ServiceContract.IsAlwaysCloseOrdersAllowed(ServiceOrder."Service Contract No.", ServiceOrder."Source Type") THEN
          ServiceContractCtrlBudget.Status := ServiceOrder.Status::Finished;
        IF ServiceOrder."Base Service Order" THEN
          ServiceContractCtrlBudget."Budget Maintenance Source" := ServiceContractCtrlBudget."Budget Maintenance Source"::"Base Service Order"
        ELSE
          ServiceContractCtrlBudget."Budget Maintenance Source" := ServiceContractCtrlBudget."Budget Maintenance Source"::"Next Service Order";
      END ELSE
        ServiceContractCtrlBudget."Budget Maintenance Source" := ServiceContractCtrlBudget."Budget Maintenance Source"::"Maintenance Scheme";
      ServiceContractCtrlBudget.Amount := IAmount;
      ServiceContractCtrlBudget.Hours := IHours;
      ServiceContractCtrlBudget.Finished := IFinishedPerc = 100;
      ServiceContractCtrlBudget."Budget Type" := IBudgetType;
      ServiceContractCtrlBudget."Service Order No." := IServiceOrderNo;
      ServiceContractCtrlBudget."Maintenance Proposal No." := IMaintenanceProposalCode;
      ServiceContractCtrlBudget."Service Category" := IServiceCategory;
      ServiceContractCtrlBudget.INSERT(TRUE);
    END;

    LOCAL PROCEDURE GetPercentageShareCalls@1100528673(IServiceContractNo@1100528600 : Code[20];IIndexDate@1100528603 : Date) PercentageShareCalls : Decimal;
    VAR
      ServiceContract@1100528601 : Record 11012812;
      SCBudgetLineVersionCalls@1100528602 : Record 11071929;
    BEGIN
      ServiceContract.GET(IServiceContractNo);
      IF ServiceContract."Budget Based on" <> ServiceContract."Budget Based on"::"Maintenance Scheme" THEN
        EXIT;
      SCBudgetLineVersionCalls.SETRANGE("Service Contract No.", IServiceContractNo);
      SCBudgetLineVersionCalls.SETFILTER("Index Date", '<=%1', IIndexDate);
      IF NOT SCBudgetLineVersionCalls.ISEMPTY THEN
        EXIT(0);
      EXIT(ServiceContract.GetPercentageShareCalls(IIndexDate));
    END;

    LOCAL PROCEDURE GetSCClosedCostLines@1100529902(IServiceContractNo@1100528603 : Code[20];IStartingDate@1100528602 : Date;IEndingDate@1100528601 : Date;IServiceCategory@1100528600 : Code[20];IAmountType@1100528605 : 'All,No Additional,Additional';IPostingDateFilter@1100528606 : Text;VAR OServiceLedgerEntry@1100528604 : Record 11012819);
    BEGIN
      OServiceLedgerEntry.RESET;
      OServiceLedgerEntry.SETCURRENTKEY("Service Contract No.", "Service Control Period Date");
      OServiceLedgerEntry.SETRANGE("Service Contract No.", IServiceContractNo);
      OServiceLedgerEntry.SETRANGE("Service Order No.", '');
      OServiceLedgerEntry.SETRANGE("Service Control Period Date", IStartingDate, IEndingDate);
      IF IServiceCategory <> '' THEN
        OServiceLedgerEntry.SETRANGE("Service Category", IServiceCategory);
      CASE IAmountType OF
        IAmountType::"No Additional":
          OServiceLedgerEntry.SETRANGE("Additional Cost", FALSE);
        IAmountType::Additional:
          OServiceLedgerEntry.SETRANGE("Additional Cost", TRUE);
      END;
      IF IPostingDateFilter <> '' THEN
        OServiceLedgerEntry.SETFILTER("Posting Date", IPostingDateFilter);
    END;

    PROCEDURE GetSCClosedCost@1100529901(IServiceContractNo@1100528602 : Code[20];IStartingDate@1100528601 : Date;IEndingDate@1100528600 : Date;IServiceCategory@1100528603 : Code[20];IAmountType@1100528604 : 'All,No Additional,Additional';IPostingDateFilter@1100528605 : Text) : Decimal;
    VAR
      ServiceLedgerEntry@1100409000 : Record 11012819;
    BEGIN
      GetSCClosedCostLines(IServiceContractNo, IStartingDate, IEndingDate, IServiceCategory, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      ServiceLedgerEntry.CALCSUMS("Closed Costs");
      EXIT(ServiceLedgerEntry."Closed Costs");
    END;

    PROCEDURE ShowSCClosedCostLines@1100529900(IServiceContractNo@1100528604 : Code[20];IStartingDate@1100528603 : Date;IEndingDate@1100528602 : Date;IServiceCategory@1100528601 : Code[20];IAmountType@1100528605 : 'All,No Additional,Additional';IPostingDateFilter@1100528606 : Text);
    VAR
      ServiceLedgerEntry@1100528600 : Record 11012819;
    BEGIN
      GetSCClosedCostLines(IServiceContractNo, IStartingDate, IEndingDate, IServiceCategory, IAmountType, IPostingDateFilter, ServiceLedgerEntry);
      PAGE.RUNMODAL(0, ServiceLedgerEntry);
    END;

    PROCEDURE ShowActualCostLinesMultiLevel@1100529903(ISCControlByPeriod@1100529905 : Record 11072311;AmountType@1100528602 : 'All,No Additional,Additional';DateFilter@1100528603 : Text);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
      SCControlByPeriod@1100529900 : Record 11072311;
    BEGIN
      ServiceLedgerEntry.RESET;
      IF ISCControlByPeriod."Service Order No." <> '' THEN
        ShowSOActualCostLines(ISCControlByPeriod."Service Order No.", AmountType, DateFilter)
      ELSE BEGIN
        SCControlByPeriod.SetMultiLevelFilter(ISCControlByPeriod);
        IF SCControlByPeriod.FINDSET THEN
        REPEAT
          ResetSOServiceLedgerEntryFilter(ServiceLedgerEntry);
          ServiceLedgerEntry.SETRANGE("Service Contract No.", SCControlByPeriod."Service Contract No.");
          SetSOServiceLedgerEntryFilter(SCControlByPeriod."Service Order No.", AmountType, DateFilter, ServiceLedgerEntry);
          IF ServiceLedgerEntry.FINDSET THEN
          REPEAT
            ServiceLedgerEntry.MARK(TRUE);
          UNTIL ServiceLedgerEntry.NEXT = 0
        UNTIL SCControlByPeriod.NEXT = 0;
        ResetSOServiceLedgerEntryFilter(ServiceLedgerEntry);
        ServiceLedgerEntry.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(0, ServiceLedgerEntry);
      END;
    END;

    LOCAL PROCEDURE SetSOServiceLedgerEntryFilter@1100529914(ServiceOrderNo@1100528601 : Code[20];AmountType@1100528602 : 'All,No Additional,Additional';DateFilter@1100528603 : Text;VAR ServiceLedgerEntry@1100528600 : Record 11012819);
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.", "Source Type");
      ServiceLedgerEntry.SETRANGE("Base Service Order No.", ServiceOrderNo);
      ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
      CASE AmountType OF
        AmountType::"No Additional":
          ServiceLedgerEntry.SETRANGE("Additional Cost", FALSE);
        AmountType::Additional:
          ServiceLedgerEntry.SETRANGE("Additional Cost", TRUE);
      END;
      IF DateFilter <> '' THEN
        ServiceLedgerEntry.SETFILTER("Posting Date", DateFilter);
    END;

    LOCAL PROCEDURE ResetSOServiceLedgerEntryFilter@1100529926(VAR ServiceLedgerEntry@1100528600 : Record 11012819);
    BEGIN
      ServiceLedgerEntry.SETRANGE("Service Order No.");
      ServiceLedgerEntry.SETRANGE("Base Service Order No.");
      ServiceLedgerEntry.SETRANGE("Additional Cost");
      ServiceLedgerEntry.SETFILTER("Posting Date", '');
      ServiceLedgerEntry.SETRANGE("Cost Present");
      ServiceLedgerEntry.SETRANGE("Cost Type");
      ServiceLedgerEntry.SETRANGE("Global Dimension 2 Code");
      ServiceLedgerEntry.SETRANGE("Service Contract No.");
      ServiceLedgerEntry.SETRANGE("Posting Date");
      ServiceLedgerEntry.SETRANGE("Service Control Period Date");
      ServiceLedgerEntry.SETRANGE("Service Category");
      ServiceLedgerEntry.SETRANGE("Source Type");
    END;

    PROCEDURE ShowOpenPurchaseLinesMultiLevel@1100529907(ISCControlByPeriod@1100529905 : Record 11072311;AmountType@1100528602 : 'All,No Additional,Additional';DateFilter@1100528603 : Text;FieldNameForFilter@1100529902 : Text);
    VAR
      PurchaseOrderControlLine@1100529901 : Record 11020221;
      SCControlByPeriod@1100529900 : Record 11072311;
    BEGIN
      PurchaseOrderControlLine.RESET;
      IF ISCControlByPeriod."Service Order No." <> '' THEN
        ShowSOOpenPurchaseLines(ISCControlByPeriod."Service Order No.", AmountType, DateFilter)
      ELSE BEGIN
        SCControlByPeriod.SetMultiLevelFilter(ISCControlByPeriod);
        IF SCControlByPeriod.FINDSET THEN
        REPEAT
          ResetPurchaseOrderControlLineFilter(PurchaseOrderControlLine);
          PurchaseOrderControlLine.SETRANGE("Service Contract No.", SCControlByPeriod."Service Contract No.");
          PurchaseOrderControlLine.SETRANGE(Date, ISCControlByPeriod."Starting Date", ISCControlByPeriod."Ending Date");
          CASE FieldNameForFilter OF
            'Open Ovh. Surch. Soft (Purch.)':
              PurchaseOrderControlLine.SETFILTER("Overhead Surcharge Soft", ' <> 0');
            'Open (Purchase)':
              PurchaseOrderControlLine.SETFILTER("Outstanding Amount",' <> 0');
            'Received/Not Invoiced':
              PurchaseOrderControlLine.SETFILTER("Amt. Rcd. Not Invoiced",' <> 0');
            'Open Ovh. Surch. Firm (Purch.)':
              PurchaseOrderControlLine.SETFILTER("Overhead Surcharge Firm", ' <> 0');
          END;
          SetPurchaseOrderControlLineFilter(SCControlByPeriod."Service Order No.", AmountType, DateFilter, PurchaseOrderControlLine);
          IF PurchaseOrderControlLine.FINDSET THEN
          REPEAT
            PurchaseOrderControlLine.MARK(TRUE);
          UNTIL PurchaseOrderControlLine.NEXT = 0
        UNTIL SCControlByPeriod.NEXT = 0;
        ResetPurchaseOrderControlLineFilter(PurchaseOrderControlLine);
        PurchaseOrderControlLine.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(0, PurchaseOrderControlLine);
      END;
    END;

    LOCAL PROCEDURE SetPurchaseOrderControlLineFilter@1100529906(ServiceOrderNo@1100528601 : Code[20];AmountType@1100528602 : 'All,No Additional,Additional';DateFilter@1100528603 : Text;VAR PurchaseOrderControlLine@1100529900 : Record 11020221);
    BEGIN
      PurchaseOrderControlLine.SETCURRENTKEY("Base Service Order No.");
      IF ServiceOrderNo <> '' THEN
        PurchaseOrderControlLine.SETRANGE("Base Service Order No.", ServiceOrderNo);
      CASE AmountType OF
        AmountType::"No Additional":
          PurchaseOrderControlLine.SETRANGE("Additional Cost (Service)", FALSE);
        AmountType::Additional:
          PurchaseOrderControlLine.SETRANGE("Additional Cost (Service)", TRUE);
      END;
      IF DateFilter <> '' THEN
        PurchaseOrderControlLine.SETFILTER(Date, DateFilter);
    END;

    LOCAL PROCEDURE ResetPurchaseOrderControlLineFilter@1100529905(VAR PurchaseOrderControlLine@1100529900 : Record 11020221);
    BEGIN
      PurchaseOrderControlLine.SETRANGE("Service Order No.");
      PurchaseOrderControlLine.SETRANGE("Base Service Order No.");
      PurchaseOrderControlLine.SETRANGE("Additional Cost (Service)");
      PurchaseOrderControlLine.SETRANGE("Service Contract No.");
      PurchaseOrderControlLine.SETRANGE(Date);
      PurchaseOrderControlLine.SETRANGE("Cost Type");
      PurchaseOrderControlLine.SETRANGE("Shortcut Dimension 2 Code");
      PurchaseOrderControlLine.SETRANGE("Service Category");
    END;

    PROCEDURE ShowOpenInventoryLinesMultiLevel@1100529919(ISCControlByPeriod@1100529905 : Record 11072311;AmountType@1100528602 : 'All,No Additional,Additional';DateFilter@1100528603 : Text);
    VAR
      ItemJournalLine@1100529901 : Record 83;
      SCControlByPeriod@1100529900 : Record 11072311;
    BEGIN
      ItemJournalLine.RESET;
      IF ISCControlByPeriod."Service Order No." <> '' THEN
        ShowSOOpenInventoryLines(ISCControlByPeriod."Service Order No.", AmountType, DateFilter)
      ELSE BEGIN
        SCControlByPeriod.SetMultiLevelFilter(ISCControlByPeriod);
        IF SCControlByPeriod.FINDSET THEN
        REPEAT
          ResetItemJournalLineFilter(ItemJournalLine);
          ItemJournalLine.SETRANGE("Service Contract No.", SCControlByPeriod."Service Contract No.");
          ItemJournalLine.SETRANGE("Posting Date", ISCControlByPeriod."Starting Date", ISCControlByPeriod."Ending Date");
          SetItemJournalLineFilter(SCControlByPeriod."Service Order No.", AmountType, DateFilter, ItemJournalLine);
          IF ItemJournalLine.FINDSET THEN
          REPEAT
            ItemJournalLine.MARK(TRUE);
          UNTIL ItemJournalLine.NEXT = 0
        UNTIL SCControlByPeriod.NEXT = 0;
        ResetItemJournalLineFilter(ItemJournalLine);
        ItemJournalLine.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(0, ItemJournalLine);
      END;
    END;

    LOCAL PROCEDURE SetItemJournalLineFilter@1100529918(ServiceOrderNo@1100528601 : Code[20];AmountType@1100528602 : 'All,No Additional,Additional';DateFilter@1100528603 : Text;VAR ItemJournalLine@1100529900 : Record 83);
    BEGIN
      ItemJournalLine.SETCURRENTKEY("Base Service Order No.");
      ItemJournalLine.SETRANGE("Base Service Order No.", ServiceOrderNo);
      CASE AmountType OF
        AmountType::"No Additional":
          ItemJournalLine.SETRANGE("Additional Cost (Service)", FALSE);
        AmountType::Additional:
          ItemJournalLine.SETRANGE("Additional Cost (Service)", TRUE);
      END;
      IF DateFilter <> '' THEN
        ItemJournalLine.SETFILTER("Posting Date", DateFilter);
    END;

    LOCAL PROCEDURE ResetItemJournalLineFilter@1100529917(VAR ItemJournalLine@1100529901 : Record 83);
    BEGIN
      ItemJournalLine.SETRANGE("Service Order No.");
      ItemJournalLine.SETRANGE("Base Service Order No.");
      ItemJournalLine.SETRANGE("Additional Cost (Service)");
      ItemJournalLine.SETFILTER("Posting Date", '');
      ItemJournalLine.SETRANGE("Service Contract No.");
      ItemJournalLine.SETRANGE("Posting Date");
      ItemJournalLine.SETRANGE("Cost Type");
      ItemJournalLine.SETRANGE("Shortcut Dimension 2 Code");
      ItemJournalLine.SETRANGE("Service Category");
    END;

    PROCEDURE ShowOpenHourLinesMultiLevel@1100529912(ISCControlByPeriod@1100529905 : Record 11072311;AmountType@1100528602 : 'All,No Additional,Additional';DateFilter@1100528603 : Text);
    VAR
      HourAccountingLine@1100529901 : Record 11012039;
      SCControlByPeriod@1100529900 : Record 11072311;
    BEGIN
      HourAccountingLine.RESET;
      IF ISCControlByPeriod."Service Order No." <> '' THEN
        ShowSOOpenHourLines(ISCControlByPeriod."Service Order No.", AmountType, DateFilter)
      ELSE BEGIN
        SCControlByPeriod.SetMultiLevelFilter(ISCControlByPeriod);
        IF SCControlByPeriod.FINDSET THEN
        REPEAT
          ResetHourAccountingLineFilter(HourAccountingLine);
          HourAccountingLine.SETRANGE("Service Contract No.", SCControlByPeriod."Service Contract No.");
          HourAccountingLine.SETRANGE("Posting Date", ISCControlByPeriod."Starting Date", ISCControlByPeriod."Ending Date");
          SetHourAccountingLineFilter(SCControlByPeriod."Service Order No.", AmountType, DateFilter, HourAccountingLine);
          IF HourAccountingLine.FINDSET THEN
          REPEAT
            HourAccountingLine.MARK(TRUE);
          UNTIL HourAccountingLine.NEXT = 0
        UNTIL SCControlByPeriod.NEXT = 0;
        ResetHourAccountingLineFilter(HourAccountingLine);
        HourAccountingLine.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(0, HourAccountingLine);
      END;
    END;

    PROCEDURE ShowOpenHourSurchargeLinesMultiLevel@1100529916(ISCControlByPeriod@1100529905 : Record 11072311;AmountType@1100528602 : 'All,No Additional,Additional';DateFilter@1100528603 : Text);
    VAR
      HourAccountingSurcharge@1100529902 : Record 11020308;
      SCControlByPeriod@1100529900 : Record 11072311;
    BEGIN
      HourAccountingSurcharge.RESET;
      IF ISCControlByPeriod."Service Order No." <> '' THEN
        ShowSOOpenHourSurchargeLines(ISCControlByPeriod."Service Order No.", AmountType, DateFilter)
      ELSE BEGIN
        SCControlByPeriod.SetMultiLevelFilter(ISCControlByPeriod);
        IF SCControlByPeriod.FINDSET THEN
        REPEAT
          ResetHourAccountingSurchargeFilter(HourAccountingSurcharge);
          HourAccountingSurcharge.SETRANGE("Service Contract No.", SCControlByPeriod."Service Contract No.");
          HourAccountingSurcharge.SETRANGE("Posting Date", ISCControlByPeriod."Starting Date", ISCControlByPeriod."Ending Date");
          SetHourAccountingSurchargeFilter(SCControlByPeriod."Service Order No.", AmountType, DateFilter, HourAccountingSurcharge);
          IF HourAccountingSurcharge.FINDSET THEN
          REPEAT
            HourAccountingSurcharge.MARK(TRUE);
          UNTIL HourAccountingSurcharge.NEXT = 0
        UNTIL SCControlByPeriod.NEXT = 0;
        ResetHourAccountingSurchargeFilter(HourAccountingSurcharge);
        HourAccountingSurcharge.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(0, HourAccountingSurcharge);
      END;
    END;

    LOCAL PROCEDURE SetHourAccountingLineFilter@1100529915(ServiceOrderNo@1100528601 : Code[20];AmountType@1100528602 : 'All,No Additional,Additional';DateFilter@1100528603 : Text;VAR HourAccountingLine@1100529900 : Record 11012039);
    BEGIN
      HourAccountingLine.SETCURRENTKEY("Base Service Order No.");
      HourAccountingLine.SETRANGE("Base Service Order No.", ServiceOrderNo);
      CASE AmountType OF
        AmountType::"No Additional":
          HourAccountingLine.SETRANGE("Additional Cost (Service)", FALSE);
        AmountType::Additional:
          HourAccountingLine.SETRANGE("Additional Cost (Service)", TRUE);
      END;
      IF DateFilter <> '' THEN
        HourAccountingLine.SETFILTER("Posting Date", DateFilter);
    END;

    LOCAL PROCEDURE ResetHourAccountingLineFilter@1100529913(VAR HourAccountingLine@1100529900 : Record 11012039);
    BEGIN
      HourAccountingLine.SETRANGE("Service Order No.");
      HourAccountingLine.SETRANGE("Base Service Order No.");
      HourAccountingLine.SETRANGE("Additional Cost (Service)");
      HourAccountingLine.SETFILTER("Posting Date", '');
      HourAccountingLine.SETRANGE("Service Contract No.");
      HourAccountingLine.SETRANGE("Posting Date");
      HourAccountingLine.SETRANGE("Cost Type");
      HourAccountingLine.SETRANGE("Cost Object");
      HourAccountingLine.SETRANGE("Service Category");
    END;

    LOCAL PROCEDURE SetHourAccountingSurchargeFilter@1100528504(ServiceOrderNo@1100528601 : Code[20];AmountType@1100528602 : 'All,No Additional,Additional';DateFilter@1100528603 : Text;VAR HourAccountingSurcharge@1100529900 : Record 11020308);
    BEGIN
      HourAccountingSurcharge.SETCURRENTKEY("Base Service Order No.");
      HourAccountingSurcharge.SETRANGE("Base Service Order No.", ServiceOrderNo);
      CASE AmountType OF
        AmountType::"No Additional":
          HourAccountingSurcharge.SETRANGE("Additional Cost (Service)", FALSE);
        AmountType::Additional:
          HourAccountingSurcharge.SETRANGE("Additional Cost (Service)", TRUE);
      END;
      IF DateFilter <> '' THEN
        HourAccountingSurcharge.SETFILTER("Posting Date", DateFilter);
    END;

    LOCAL PROCEDURE ResetHourAccountingSurchargeFilter@1100528503(VAR HourAccountingSurcharge@1100529900 : Record 11020308);
    BEGIN
      HourAccountingSurcharge.SETRANGE("Service Order No.");
      HourAccountingSurcharge.SETRANGE("Base Service Order No.");
      HourAccountingSurcharge.SETRANGE("Additional Cost (Service)");
      HourAccountingSurcharge.SETFILTER("Posting Date", '');
      HourAccountingSurcharge.SETRANGE("Service Contract No.");
      HourAccountingSurcharge.SETRANGE("Posting Date");
      HourAccountingSurcharge.SETRANGE("Cost Type");
      HourAccountingSurcharge.SETRANGE("Cost Object");
      HourAccountingSurcharge.SETRANGE("Service Category");
    END;

    PROCEDURE ShowSOBudgetLinesMultiLevel@1100529924(ISCControlByPeriod@1100529905 : Record 11072311;AmountType@1100528602 : 'All,No Additional,Additional');
    VAR
      ServiceOrderBudgetLine@1100529901 : Record 11012875;
      SCControlByPeriod@1100529900 : Record 11072311;
    BEGIN
      ServiceOrderBudgetLine.RESET;
      IF ISCControlByPeriod."Service Order No." <> '' THEN
        ShowSOBudgetLines(ISCControlByPeriod."Service Order No.", AmountType)
      ELSE BEGIN
        SCControlByPeriod.SetMultiLevelFilter(ISCControlByPeriod);
        IF SCControlByPeriod.FINDSET THEN
        REPEAT
          ResetSOBudgetLinesFilter(ServiceOrderBudgetLine);
          ServiceOrderBudgetLine.SETRANGE("Service Contract No.", SCControlByPeriod."Service Contract No.");
          SetSOBudgetLinesFilter(SCControlByPeriod."Service Order No.", AmountType, ServiceOrderBudgetLine);
          IF ServiceOrderBudgetLine.FINDSET THEN
          REPEAT
            ServiceOrderBudgetLine.MARK(TRUE);
          UNTIL ServiceOrderBudgetLine.NEXT = 0
        UNTIL SCControlByPeriod.NEXT = 0;
        ResetSOBudgetLinesFilter(ServiceOrderBudgetLine);
        ServiceOrderBudgetLine.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(0, ServiceOrderBudgetLine);
      END;
    END;

    PROCEDURE ShowSOBudgetLinesMultiLevelForHours@1100529964(ISCControlByPeriod@1100529905 : Record 11072311;AmountType@1100528602 : 'All,No Additional,Additional');
    VAR
      ServiceOrderBudgetLine@1100529901 : Record 11012875;
      SCControlByPeriod@1100529900 : Record 11072311;
    BEGIN
      ServiceOrderBudgetLine.RESET;
      IF ISCControlByPeriod."Service Order No." <> '' THEN
        ShowSOBudgetLines(ISCControlByPeriod."Service Order No.", AmountType)
      ELSE BEGIN
        SCControlByPeriod.SetMultiLevelFilter(ISCControlByPeriod);
        IF SCControlByPeriod.FINDSET THEN
        REPEAT
          ResetSOBudgetLinesFilter(ServiceOrderBudgetLine);
          ServiceOrderBudgetLine.SETRANGE("Service Contract No.", SCControlByPeriod."Service Contract No.");
          ServiceOrderBudgetLine.SETRANGE("Cost Type", ServiceOrderBudgetLine."Cost Type"::Labor);
          SetSOBudgetLinesFilter(SCControlByPeriod."Service Order No.", AmountType, ServiceOrderBudgetLine);
          IF ServiceOrderBudgetLine.FINDSET THEN
          REPEAT
            ServiceOrderBudgetLine.MARK(TRUE);
          UNTIL ServiceOrderBudgetLine.NEXT = 0
        UNTIL SCControlByPeriod.NEXT = 0;
        ResetSOBudgetLinesFilter(ServiceOrderBudgetLine);
        ServiceOrderBudgetLine.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(0, ServiceOrderBudgetLine);
      END;
    END;

    LOCAL PROCEDURE SetSOBudgetLinesFilter@1100529923(ServiceOrderNo@1100528601 : Code[20];AmountType@1100528602 : 'All,No Additional,Additional';VAR ServiceOrderBudgetLine@1100529900 : Record 11012875);
    BEGIN
      ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrderNo);
      CASE AmountType OF
        AmountType::"No Additional":
          ServiceOrderBudgetLine.SETRANGE("Additional Cost", FALSE);
        AmountType::Additional:
          ServiceOrderBudgetLine.SETRANGE("Additional Cost", TRUE);
      END;
    END;

    LOCAL PROCEDURE ResetSOBudgetLinesFilter@1100529922(VAR ServiceOrderBudgetLine@1100529900 : Record 11012875);
    BEGIN
      ServiceOrderBudgetLine.SETRANGE("Service Order No.");
      ServiceOrderBudgetLine.SETRANGE("Base Service Order No.");
      ServiceOrderBudgetLine.SETRANGE("Additional Cost");
      ServiceOrderBudgetLine.SETRANGE("Service Contract No.");
      ServiceOrderBudgetLine.SETRANGE("Cost Type");
      ServiceOrderBudgetLine.SETRANGE("Cost Object");
    END;

    PROCEDURE ShowSOActualHourLinesMultiLevel@1100529932(ISCControlByPeriod@1100529905 : Record 11072311;AmountType@1100528602 : 'All,No Additional,Additional';DateFilter@1100529902 : Text);
    VAR
      ServiceLedgerEntry@1100529901 : Record 11012819;
      SCControlByPeriod@1100529900 : Record 11072311;
    BEGIN
      ServiceLedgerEntry.RESET;
      IF ISCControlByPeriod."Service Order No." <> '' THEN
        ShowSOActualHoursLines(ISCControlByPeriod."Service Order No.", AmountType, DateFilter)
      ELSE BEGIN
        SCControlByPeriod.SetMultiLevelFilter(ISCControlByPeriod);
        IF SCControlByPeriod.FINDSET THEN
        REPEAT
          ResetSOServiceLedgerEntryFilter(ServiceLedgerEntry);
          ServiceLedgerEntry.SETRANGE("Service Contract No.", SCControlByPeriod."Service Contract No.");
          ServiceLedgerEntry.SETRANGE("Posting Date", SCControlByPeriod."Starting Date", SCControlByPeriod."Ending Date");
          SetSOServiceLedgerEntryLaborFilter(SCControlByPeriod."Service Order No.", AmountType, DateFilter, ServiceLedgerEntry);
          IF ServiceLedgerEntry.FINDSET THEN
          REPEAT
            ServiceLedgerEntry.MARK(TRUE);
          UNTIL ServiceLedgerEntry.NEXT = 0
        UNTIL SCControlByPeriod.NEXT = 0;
        ResetSOServiceLedgerEntryFilter(ServiceLedgerEntry);
        ServiceLedgerEntry.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(0, ServiceLedgerEntry);
      END;
    END;

    LOCAL PROCEDURE SetSOServiceLedgerEntryLaborFilter@1100529931(ServiceOrderNo@1100528601 : Code[20];AmountType@1100528602 : 'All,No Additional,Additional';DateFilter@1100529901 : Text;VAR ServiceLedgerEntry@1100529900 : Record 11012819);
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.");
      ServiceLedgerEntry.SETRANGE("Base Service Order No.", ServiceOrderNo);
      ServiceLedgerEntry.SETRANGE("Cost Type", ServiceLedgerEntry."Cost Type"::Labor);
      ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
      CASE AmountType OF
        AmountType::"No Additional":
          ServiceLedgerEntry.SETRANGE("Additional Cost", FALSE);
        AmountType::Additional:
          ServiceLedgerEntry.SETRANGE("Additional Cost", TRUE);
      END;
      IF DateFilter <> '' THEN
        ServiceLedgerEntry.SETFILTER("Posting Date", DateFilter);
    END;

    PROCEDURE ShowSOBudgetRevenueLinesMultiLevel@1100529909(ISCControlByPeriod@1100529905 : Record 11072311;AmountType@1100528602 : 'All,No Additional,Additional');
    VAR
      ServiceOrderCostPlusEntry@1100529901 : Record 11012825;
      SCControlByPeriod@1100529900 : Record 11072311;
    BEGIN
      ServiceOrderCostPlusEntry.RESET;
      SCControlByPeriod.SetMultiLevelFilter(ISCControlByPeriod);
      IF SCControlByPeriod.FINDSET THEN
      REPEAT
        ResetSOBudgetRevenueLinesFilter(ServiceOrderCostPlusEntry);
        ServiceOrderCostPlusEntry.SETRANGE("Service Contract No.", SCControlByPeriod."Service Contract No.");
        SetSOBudgetRevenueLinesFilter(SCControlByPeriod."Service Order No.", TRUE, AmountType, '', ServiceOrderCostPlusEntry);
        IF ServiceOrderCostPlusEntry.FINDSET THEN
        REPEAT
          IF ServiceOrderCostPlusEntry.Invoiced OR (NOT ServiceOrderCostPlusEntry.Invoiced AND ServiceOrderCostPlusEntry.Chargeable) THEN
            ServiceOrderCostPlusEntry.MARK(TRUE);
        UNTIL ServiceOrderCostPlusEntry.NEXT = 0
      UNTIL SCControlByPeriod.NEXT = 0;
      ResetSOBudgetRevenueLinesFilter(ServiceOrderCostPlusEntry);
      ServiceOrderCostPlusEntry.MARKEDONLY(TRUE);
      PAGE.RUNMODAL(0, ServiceOrderCostPlusEntry);
    END;

    LOCAL PROCEDURE SetSOBudgetRevenueLinesFilter@1100529908(ServiceOrderNo@1100528601 : Code[20];InclNextOrders@1100528600 : Boolean;AmountType@1100528602 : 'All,No Additional,Additional';DateFilter@1100529901 : Text;VAR ServiceOrderCostPlusEntry@1100529900 : Record 11012825);
    BEGIN
      IF InclNextOrders THEN BEGIN
        ServiceOrderCostPlusEntry.SETCURRENTKEY("Base Service Order No.", Invoiced, Chargeable, "Additional Cost");
        ServiceOrderCostPlusEntry.SETRANGE("Base Service Order No.", ServiceOrderNo);
      END ELSE BEGIN
        ServiceOrderCostPlusEntry.SETCURRENTKEY("Service Order No.");
        ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", ServiceOrderNo);
      END;
      CASE AmountType OF
        AmountType::"No Additional":
          ServiceOrderCostPlusEntry.SETRANGE("Additional Cost", FALSE);
        AmountType::Additional:
          ServiceOrderCostPlusEntry.SETRANGE("Additional Cost", TRUE);
      END;
      IF DateFilter <> '' THEN
        ServiceOrderCostPlusEntry.SETFILTER("Posting Date", DateFilter);
    END;

    LOCAL PROCEDURE ResetSOBudgetRevenueLinesFilter@1100529904(VAR ServiceOrderCostPlusEntry@1100529900 : Record 11012825);
    BEGIN
      ServiceOrderCostPlusEntry.SETRANGE("Service Contract No.");
      ServiceOrderCostPlusEntry.SETRANGE("Service Order No.");
      ServiceOrderCostPlusEntry.SETRANGE("Base Service Order No.");
      ServiceOrderCostPlusEntry.SETRANGE("Additional Cost");
      ServiceOrderCostPlusEntry.SETRANGE("Posting Date");
      ServiceOrderCostPlusEntry.SETRANGE("Cost Type");
      ServiceOrderCostPlusEntry.SETRANGE("Cost Object");
    END;

    PROCEDURE ShowSORevenueLinesMultiLevel@1100529927(ISCControlByPeriod@1100529905 : Record 11072311;AmountType@1100528602 : 'All,No Additional,Additional');
    VAR
      ServiceLedgerEntry@1100529901 : Record 11012819;
      SCControlByPeriod@1100529900 : Record 11072311;
    BEGIN
      ServiceLedgerEntry.RESET;
      IF SCControlByPeriod."Service Order No." <> '' THEN
        ShowSORevenueLines(ISCControlByPeriod."Service Order No.", AmountType, '')
      ELSE BEGIN
        SCControlByPeriod.SetMultiLevelFilter(ISCControlByPeriod);
        IF SCControlByPeriod.FINDSET THEN
        REPEAT
          ResetSOServiceLedgerEntryFilter(ServiceLedgerEntry);
          ServiceLedgerEntry.SETRANGE("Service Contract No.", SCControlByPeriod."Service Contract No.");
          ServiceLedgerEntry.SETRANGE("Source Type", SCControlByPeriod."Source Type");
          ServiceLedgerEntry.SETRANGE("Service Category", SCControlByPeriod."Service Category");
          ServiceLedgerEntry.SETRANGE("Service Control Period Date", SCControlByPeriod."Starting Date", SCControlByPeriod."Ending Date");
          ServiceLedgerEntry.SETRANGE("Cost Type",ServiceLedgerEntry."Cost Type"::Revenues);
          SetSORevenueLinesFilter(SCControlByPeriod."Service Order No.", AmountType, '', ServiceLedgerEntry);
          IF ServiceLedgerEntry.FINDSET THEN
          REPEAT
            ServiceLedgerEntry.MARK(TRUE);
          UNTIL ServiceLedgerEntry.NEXT = 0
        UNTIL SCControlByPeriod.NEXT = 0;
        ResetSOServiceLedgerEntryFilter(ServiceLedgerEntry);
        ServiceLedgerEntry.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(0, ServiceLedgerEntry);
      END;
    END;

    LOCAL PROCEDURE SetSORevenueLinesFilter@1100529925(ServiceOrderNo@1100528601 : Code[20];AmountType@1100528602 : 'All,No Additional,Additional';DateFilter@1100529901 : Text;VAR ServiceLedgerEntry@1100529900 : Record 11012819);
    BEGIN
      ServiceLedgerEntry.SETCURRENTKEY("Base Service Order No.");
      IF ServiceOrderNo <> '' THEN
        ServiceLedgerEntry.SETRANGE("Base Service Order No.", ServiceOrderNo);
      CASE AmountType OF
        AmountType::"No Additional":
          ServiceLedgerEntry.SETRANGE("Additional Cost", FALSE);
        AmountType::Additional:
          ServiceLedgerEntry.SETRANGE("Additional Cost", TRUE);
      END;
      IF DateFilter <> '' THEN
        ServiceLedgerEntry.SETFILTER("Posting Date", DateFilter);
    END;

    LOCAL PROCEDURE ResetSORevenueLinesFilter@1100529921(VAR ServiceLedgerEntry@1100529900 : Record 11012819);
    BEGIN
      ServiceLedgerEntry.SETRANGE("Service Order No.");
      ServiceLedgerEntry.SETRANGE("Base Service Order No.");
      ServiceLedgerEntry.SETRANGE("Additional Cost");
      ServiceLedgerEntry.SETRANGE("Service Contract No.");
      ServiceLedgerEntry.SETRANGE("Service Control Period Date");
      ServiceLedgerEntry.SETRANGE("Posting Date");
      ServiceLedgerEntry.SETRANGE("Cost Type");
    END;

    PROCEDURE ShowClosedCostLinesMultiLevel@1100529910(ISCControlByPeriod@1100529905 : Record 11072311;AmountType@1100528602 : 'All,No Additional,Additional';DateFilter@1100528603 : Text);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
      SCControlByPeriod@1100529900 : Record 11072311;
    BEGIN
      ServiceLedgerEntry.RESET;
      IF ISCControlByPeriod."Service Order No." <> '' THEN
        ShowSOClosedCostLines(ISCControlByPeriod."Service Order No.", AmountType, DateFilter)
      ELSE BEGIN
        SCControlByPeriod.SetMultiLevelFilter(ISCControlByPeriod);
        IF SCControlByPeriod.FINDSET THEN
        REPEAT
          ResetSOServiceLedgerEntryFilter(ServiceLedgerEntry);
          ServiceLedgerEntry.SETRANGE("Service Contract No.", SCControlByPeriod."Service Contract No.");
          ServiceLedgerEntry.SETRANGE("Posting Date", SCControlByPeriod."Starting Date", SCControlByPeriod."Ending Date");
          ServiceLedgerEntry.SETRANGE("Base Service Order No.", SCControlByPeriod."Service Order No.");
          ServiceLedgerEntry.SETFILTER("Closed Costs", '<> 0');
          IF ServiceLedgerEntry.FINDSET THEN
          REPEAT
            ServiceLedgerEntry.MARK(TRUE);
          UNTIL ServiceLedgerEntry.NEXT = 0
        UNTIL SCControlByPeriod.NEXT = 0;
        ResetSOServiceLedgerEntryFilter(ServiceLedgerEntry);
        ServiceLedgerEntry.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(0, ServiceLedgerEntry);
      END;
    END;

    PROCEDURE ShowClosedRevenueLinesMultiLevel@1100529928(ISCControlByPeriod@1100529905 : Record 11072311;AmountType@1100528602 : 'All,No Additional,Additional';DateFilter@1100528603 : Text);
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
      SCControlByPeriod@1100529900 : Record 11072311;
    BEGIN
      ServiceLedgerEntry.RESET;
      IF ISCControlByPeriod."Service Order No." <> '' THEN
        ShowSOClosedRevenueLines(ISCControlByPeriod."Service Order No.", AmountType, DateFilter)
      ELSE BEGIN
        SCControlByPeriod.SetMultiLevelFilter(ISCControlByPeriod);
        IF SCControlByPeriod.FINDSET THEN
        REPEAT
          ResetSOServiceLedgerEntryFilter(ServiceLedgerEntry);
          ServiceLedgerEntry.SETRANGE("Service Contract No.", SCControlByPeriod."Service Contract No.");
          ServiceLedgerEntry.SETRANGE("Posting Date", SCControlByPeriod."Starting Date", SCControlByPeriod."Ending Date");
          ServiceLedgerEntry.SETFILTER("Closed Revenues", '<> 0');
          ServiceLedgerEntry.SETRANGE("Base Service Order No.", SCControlByPeriod."Service Order No.");
          IF ServiceLedgerEntry.FINDSET THEN
          REPEAT
            ServiceLedgerEntry.MARK(TRUE);
          UNTIL ServiceLedgerEntry.NEXT = 0
        UNTIL SCControlByPeriod.NEXT = 0;
        ResetSOServiceLedgerEntryFilter(ServiceLedgerEntry);
        ServiceLedgerEntry.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(0, ServiceLedgerEntry);
      END;
    END;

    PROCEDURE GetSOPurchaseAmount@1100529911(ServiceOrderNo@1100528600 : Code[20];PostingDateFilter@1100528602 : Text) : Decimal;
    VAR
      PurchaseLine@1100409000 : Record 39;
    BEGIN
      GetSOPurchaseLines(ServiceOrderNo, PostingDateFilter, PurchaseLine);
      PurchaseLine.CALCSUMS("Amount (LCY)");
      EXIT(PurchaseLine."Amount (LCY)");
    END;

    PROCEDURE ShowSOPurchaseLines@1100529929(ServiceOrderNo@1100528600 : Code[20];PostingDateFilter@1100528603 : Text);
    VAR
      PurchaseLine@1100528601 : Record 39;
    BEGIN
      GetSOPurchaseLines(ServiceOrderNo, PostingDateFilter, PurchaseLine);
      PurchaseLine.SETRANGE("Base Service Order No.",ServiceOrderNo);
      PAGE.RUNMODAL(0, PurchaseLine);
    END;

    LOCAL PROCEDURE GetSOPurchaseLines@1100529930(ServiceOrderNo@1100528601 : Code[20];PostingDateFilter@1100528603 : Text;VAR PurchaseLine@1100528600 : Record 39);
    BEGIN
      PurchaseLine.RESET;
      PurchaseLine.SETCURRENTKEY("Base Service Order No.");
      PurchaseLine.SETRANGE("Base Service Order No.", ServiceOrderNo);
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      IF PostingDateFilter <> '' THEN
        PurchaseLine.SETFILTER("Posting Date", PostingDateFilter);
    END;

    PROCEDURE ShowPurchaseLinesMultiLevel@1100529934(ISCControlByPeriod@1100529905 : Record 11072311;DateFilter@1100528603 : Text);
    VAR
      PurchaseLine@1100528601 : Record 39;
      SCControlByPeriod@1100529900 : Record 11072311;
    BEGIN
      PurchaseLine.RESET;
      IF ISCControlByPeriod."Service Order No." <> '' THEN
        ShowSOPurchaseLines(ISCControlByPeriod."Service Order No.", DateFilter)
      ELSE BEGIN
        SCControlByPeriod.SetMultiLevelFilter(ISCControlByPeriod);
        IF SCControlByPeriod.FINDSET THEN
        REPEAT
          ResetSOPurchaseLinesFilter(PurchaseLine);
          PurchaseLine.SETRANGE("Service Contract No.",SCControlByPeriod."Service Contract No.");
          PurchaseLine.SETRANGE("Base Service Order No.", SCControlByPeriod."Service Order No.");
          PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
          IF PurchaseLine.FINDSET THEN
          REPEAT
            PurchaseLine.MARK(TRUE);
          UNTIL PurchaseLine.NEXT = 0
        UNTIL SCControlByPeriod.NEXT = 0;
        ResetSOPurchaseLinesFilter(PurchaseLine);
        PurchaseLine.MARKEDONLY(TRUE);
        PAGE.RUNMODAL(0, PurchaseLine);
      END;
    END;

    LOCAL PROCEDURE ResetSOPurchaseLinesFilter@1100529935(VAR PurchaseLine@1100529900 : Record 39);
    BEGIN
      PurchaseLine.SETRANGE("Service Contract No.");
      PurchaseLine.SETRANGE("Service Order No.");
      PurchaseLine.SETRANGE("Base Service Order No.");
      PurchaseLine.SETRANGE("Posting Date");
      PurchaseLine.SETRANGE("Document Type");
      PurchaseLine.SETRANGE("Cost Type");
      PurchaseLine.SETRANGE("Shortcut Dimension 2 Code");
    END;

    PROCEDURE ShowActualCostLinesbyCostTypeAndCostObject@1100529952(ISCControlbyPeriodDetail@1100529901 : Record 11072552;AmountType@1100528602 : 'All,No Additional,Additional');
    VAR
      ServiceLedgerEntry@1100528601 : Record 11012819;
      SCControlByPeriodDetail@1100529900 : Record 11072552;
    BEGIN
      ServiceLedgerEntry.RESET;
      SCControlByPeriodDetail.SetMultiLevelFilter(ISCControlbyPeriodDetail);
      IF SCControlByPeriodDetail.FINDSET THEN
        REPEAT
          ResetSOServiceLedgerEntryFilter(ServiceLedgerEntry);
          SetServiceLedgerEntryGeneralFilter(SCControlByPeriodDetail, AmountType, ServiceLedgerEntry);
          ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
          ServiceLedgerEntry.SETRANGE("Service Category", SCControlByPeriodDetail."Service Category");
          IF ServiceLedgerEntry.FINDSET THEN
            REPEAT
              ServiceLedgerEntry.MARK(TRUE);
            UNTIL ServiceLedgerEntry.NEXT = 0
        UNTIL SCControlByPeriodDetail.NEXT = 0;
      ResetSOServiceLedgerEntryFilter(ServiceLedgerEntry);
      ServiceLedgerEntry.MARKEDONLY(TRUE);
      PAGE.RUNMODAL(0, ServiceLedgerEntry);
    END;

    PROCEDURE ShowOpenPurchaseLinesbyCostTypeAndCostObject@1100529951(ISCControlbyPeriodDetail@1100529902 : Record 11072552;AmountType@1100528602 : 'All,No Additional,Additional');
    VAR
      PurchaseOrderControlLine@1100529901 : Record 11020221;
      SCControlByPeriodDetail@1100529900 : Record 11072552;
    BEGIN
      PurchaseOrderControlLine.RESET;
      SCControlByPeriodDetail.SetMultiLevelFilter(ISCControlbyPeriodDetail);
      IF SCControlByPeriodDetail.FINDSET THEN
        REPEAT
          ResetPurchaseOrderControlLineFilter(PurchaseOrderControlLine);
          SetPurchaseOrderControlLineGeneralFilter(SCControlByPeriodDetail, AmountType, PurchaseOrderControlLine);
          PurchaseOrderControlLine.SETRANGE("Service Category", SCControlByPeriodDetail."Service Category");
          IF PurchaseOrderControlLine.FINDSET THEN
            REPEAT
              PurchaseOrderControlLine.MARK(TRUE);
            UNTIL PurchaseOrderControlLine.NEXT = 0
        UNTIL SCControlByPeriodDetail.NEXT = 0;
      ResetPurchaseOrderControlLineFilter(PurchaseOrderControlLine);
      PurchaseOrderControlLine.MARKEDONLY(TRUE);
      PAGE.RUNMODAL(0, PurchaseOrderControlLine);
    END;

    PROCEDURE ShowOpenInventoryLinesbyCostTypeAndCostObject@1100529950(ISCControlbyPeriodDetail@1100529902 : Record 11072552;AmountType@1100528602 : 'All,No Additional,Additional');
    VAR
      ItemJournalLine@1100529901 : Record 83;
      SCControlByPeriodDetail@1100529900 : Record 11072552;
    BEGIN
      ItemJournalLine.RESET;
      SCControlByPeriodDetail.SetMultiLevelFilter(ISCControlbyPeriodDetail);
      IF SCControlByPeriodDetail.FINDSET THEN
        REPEAT
          ResetItemJournalLineFilter(ItemJournalLine);
          SetItemJournalLineGeneralFilter(SCControlByPeriodDetail, AmountType, ItemJournalLine);
          ItemJournalLine.SETRANGE("Service Category", SCControlByPeriodDetail."Service Category");
          IF ItemJournalLine.FINDSET THEN
            REPEAT
              ItemJournalLine.MARK(TRUE);
            UNTIL ItemJournalLine.NEXT = 0
        UNTIL SCControlByPeriodDetail.NEXT = 0;
      ResetItemJournalLineFilter(ItemJournalLine);
      ItemJournalLine.MARKEDONLY(TRUE);
      PAGE.RUNMODAL(0, ItemJournalLine);
    END;

    PROCEDURE ShowOpenHourLinesbyCostTypeAndCostObject@1100529949(ISCControlbyPeriodDetail@1100529902 : Record 11072552;AmountType@1100528602 : 'All,No Additional,Additional');
    VAR
      HourAccountingLine@1100529901 : Record 11012039;
      SCControlByPeriodDetail@1100529900 : Record 11072552;
    BEGIN
      HourAccountingLine.RESET;
      SCControlByPeriodDetail.SetMultiLevelFilter(ISCControlbyPeriodDetail);
      IF SCControlByPeriodDetail.FINDSET THEN
        REPEAT
          ResetHourAccountingLineFilter(HourAccountingLine);
          SetHourAccountingLineGeneralFilter(SCControlByPeriodDetail, AmountType, HourAccountingLine);
          HourAccountingLine.SETRANGE("Service Category", SCControlByPeriodDetail."Service Category");
          IF HourAccountingLine.FINDSET THEN
            REPEAT
              HourAccountingLine.MARK(TRUE);
            UNTIL HourAccountingLine.NEXT = 0
        UNTIL SCControlByPeriodDetail.NEXT = 0;
      ResetHourAccountingLineFilter(HourAccountingLine);
      HourAccountingLine.MARKEDONLY(TRUE);
      PAGE.RUNMODAL(0, HourAccountingLine);
    END;

    PROCEDURE ShowOpenHourSurchargeLinesbyCostTypeAndCostObject@1100529948(ISCControlbyPeriodDetail@1100529901 : Record 11072552;AmountType@1100528602 : 'All,No Additional,Additional');
    VAR
      HourAccountingSurcharge@1100529902 : Record 11020308;
      SCControlByPeriodDetail@1100529900 : Record 11072552;
    BEGIN
      HourAccountingSurcharge.RESET;
      SCControlByPeriodDetail.SetMultiLevelFilter(ISCControlbyPeriodDetail);
      IF SCControlByPeriodDetail.FINDSET THEN
        REPEAT
          ResetHourAccountingSurchargeFilter(HourAccountingSurcharge);
          SetHourAccountingSurchargeGeneralFilter(SCControlByPeriodDetail, AmountType, HourAccountingSurcharge);
          HourAccountingSurcharge.SETRANGE("Service Category", SCControlByPeriodDetail."Service Category");
          IF HourAccountingSurcharge.FINDSET THEN
            REPEAT
              HourAccountingSurcharge.MARK(TRUE);
            UNTIL HourAccountingSurcharge.NEXT = 0
        UNTIL SCControlByPeriodDetail.NEXT = 0;
      ResetHourAccountingSurchargeFilter(HourAccountingSurcharge);
      HourAccountingSurcharge.MARKEDONLY(TRUE);
      PAGE.RUNMODAL(0, HourAccountingSurcharge);
    END;

    PROCEDURE ShowSOBudgetLinesbyCostTypeAndCostObject@1100529947(ISCControlbyPeriodDetail@1100529902 : Record 11072552;AmountType@1100528602 : 'All,No Additional,Additional');
    VAR
      ServiceOrderBudgetLine@1100529901 : Record 11012875;
      SCControlByPeriodDetail@1100529900 : Record 11072552;
    BEGIN
      ServiceOrderBudgetLine.RESET;
      SCControlByPeriodDetail.SetMultiLevelFilter(ISCControlbyPeriodDetail);
      IF SCControlByPeriodDetail.FINDSET THEN
      REPEAT
        ResetSOBudgetLinesFilter(ServiceOrderBudgetLine);
        ServiceOrderBudgetLine.SETRANGE("Service Contract No.", SCControlByPeriodDetail."Service Contract No.");
        SetSOBudgetLinesFilter(SCControlByPeriodDetail."Service Order No.", AmountType, ServiceOrderBudgetLine);
        SetServiceOrderBudgetLineFilterForCostType(SCControlByPeriodDetail."Cost Type", ServiceOrderBudgetLine);
        IF SCControlByPeriodDetail."Cost Object" <> '' THEN
          ServiceOrderBudgetLine.SETRANGE("Cost Object", SCControlByPeriodDetail."Cost Object");

        ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);

        IF ServiceOrderBudgetLine.FINDSET THEN
        REPEAT
          ServiceOrderBudgetLine.MARK(TRUE);
        UNTIL ServiceOrderBudgetLine.NEXT = 0
      UNTIL SCControlByPeriodDetail.NEXT = 0;
      ResetSOBudgetLinesFilter(ServiceOrderBudgetLine);
      ServiceOrderBudgetLine.MARKEDONLY(TRUE);
      PAGE.RUNMODAL(0, ServiceOrderBudgetLine);
    END;

    PROCEDURE ShowSOActualHourLinesbyCostTypeAndCostObject@1100529946(ISCControlbyPeriodDetail@1100529903 : Record 11072552;AmountType@1100528602 : 'All,No Additional,Additional');
    VAR
      ServiceLedgerEntry@1100529901 : Record 11012819;
      SCControlByPeriodDetail@1100529900 : Record 11072552;
    BEGIN
      ServiceLedgerEntry.RESET;
      SCControlByPeriodDetail.SetMultiLevelFilter(ISCControlbyPeriodDetail);
      IF SCControlByPeriodDetail.FINDSET THEN
        REPEAT
          ResetSOServiceLedgerEntryFilter(ServiceLedgerEntry);
          SetServiceLedgerEntryGeneralFilter(SCControlByPeriodDetail, AmountType, ServiceLedgerEntry);
          ServiceLedgerEntry.SETRANGE("Cost Present", TRUE);
          ServiceLedgerEntry.SETRANGE("Service Category", SCControlByPeriodDetail."Service Category");
          IF ServiceLedgerEntry.FINDSET THEN
            REPEAT
              ServiceLedgerEntry.MARK(TRUE);
            UNTIL ServiceLedgerEntry.NEXT = 0
        UNTIL SCControlByPeriodDetail.NEXT = 0;
      ResetSOServiceLedgerEntryFilter(ServiceLedgerEntry);
      ServiceLedgerEntry.MARKEDONLY(TRUE);
      PAGE.RUNMODAL(0, ServiceLedgerEntry);
    END;

    PROCEDURE ShowSORevenueBudgetLinesbyCostTypeAndCostObject@1100529945(ISCControlbyPeriodDetail@1100529902 : Record 11072552;AmountType@1100528602 : 'All,No Additional,Additional');
    VAR
      SCControlByPeriodDetail@1100529900 : Record 11072552;
      ServiceOrderCostPlusEntry@1100529903 : Record 11012825;
    BEGIN
      ServiceOrderCostPlusEntry.RESET;
      SCControlByPeriodDetail.SetMultiLevelFilter(ISCControlbyPeriodDetail);
      IF SCControlByPeriodDetail.FINDSET THEN
        REPEAT
          ResetSOBudgetRevenueLinesFilter(ServiceOrderCostPlusEntry);
          SetServiceOrderCostPlusEntryGeneralFilter(SCControlByPeriodDetail."Service Order No.", AmountType, ServiceOrderCostPlusEntry);
          IF ServiceOrderCostPlusEntry.FINDSET THEN
            REPEAT
              ServiceOrderCostPlusEntry.MARK(TRUE);
            UNTIL ServiceOrderCostPlusEntry.NEXT = 0
        UNTIL SCControlByPeriodDetail.NEXT = 0;
      ResetSOBudgetRevenueLinesFilter(ServiceOrderCostPlusEntry);
      ServiceOrderCostPlusEntry.MARKEDONLY(TRUE);
      PAGE.RUNMODAL(0, ServiceOrderCostPlusEntry);
    END;

    PROCEDURE ShowSORevenueLinesbyCostTypeAndCostObject@1100529953(ISCControlbyPeriodDetail@1100529902 : Record 11072552;AmountType@1100528602 : 'All,No Additional,Additional');
    VAR
      ServiceLedgerEntry@1100529901 : Record 11012819;
      SCControlByPeriodDetail@1100529900 : Record 11072552;
    BEGIN
      ServiceLedgerEntry.RESET;
      SCControlByPeriodDetail.SetMultiLevelFilter(ISCControlbyPeriodDetail);
      IF SCControlByPeriodDetail.FINDSET THEN
        REPEAT
          ResetSOServiceLedgerEntryFilter(ServiceLedgerEntry);
          SetServiceLedgerEntryGeneralFilter(SCControlByPeriodDetail, AmountType, ServiceLedgerEntry);
          ServiceLedgerEntry.SETRANGE("Service Category", SCControlByPeriodDetail."Service Category");
          ServiceLedgerEntry.SETRANGE("Source Type", SCControlByPeriodDetail."Source Type");
          IF ServiceLedgerEntry.FINDSET THEN
            REPEAT
              ServiceLedgerEntry.MARK(TRUE);
            UNTIL ServiceLedgerEntry.NEXT = 0
        UNTIL SCControlByPeriodDetail.NEXT = 0;
      ResetSOServiceLedgerEntryFilter(ServiceLedgerEntry);
      ServiceLedgerEntry.MARKEDONLY(TRUE);
      PAGE.RUNMODAL(0, ServiceLedgerEntry);
    END;

    PROCEDURE ShowPurchaseLinesbyCostTypeAndCostObject@1100529944(ISCControlbyPeriodDetail@1100529901 : Record 11072552);
    VAR
      PurchaseLine@1100528601 : Record 39;
      SCControlByPeriodDetail@1100529900 : Record 11072552;
    BEGIN
      PurchaseLine.RESET;
      SCControlByPeriodDetail.SetMultiLevelFilter(ISCControlbyPeriodDetail);
      IF SCControlByPeriodDetail.FINDSET THEN
        REPEAT
          ResetSOPurchaseLinesFilter(PurchaseLine);
          SetPurchaseLineGeneralFilter(SCControlByPeriodDetail, PurchaseLine);
          IF PurchaseLine.FINDSET THEN
            REPEAT
              PurchaseLine.MARK(TRUE);
            UNTIL PurchaseLine.NEXT = 0
        UNTIL SCControlByPeriodDetail.NEXT = 0;
      ResetSOPurchaseLinesFilter(PurchaseLine);
      PurchaseLine.MARKEDONLY(TRUE);
      PAGE.RUNMODAL(0, PurchaseLine);
    END;

    PROCEDURE SetPurchaseLineFilterForCostType@1100529954(CostType@1100529901 : 'Labor,Material,Subcontracting,Plant,Sundry,Revenue';VAR PurchaseLine@1100529900 : Record 39);
    BEGIN
      CASE CostType OF
        CostType::Labor:
          PurchaseLine.SETRANGE("Cost Type", PurchaseLine."Cost Type"::Labor);
        CostType::Material:
          PurchaseLine.SETRANGE("Cost Type", PurchaseLine."Cost Type"::Material);
        CostType::Plant:
          PurchaseLine.SETRANGE("Cost Type", PurchaseLine."Cost Type"::Plant);
        CostType::Subcontracting:
          PurchaseLine.SETRANGE("Cost Type", PurchaseLine."Cost Type"::Subcontracting);
        CostType::Sundry:
          PurchaseLine.SETRANGE("Cost Type", PurchaseLine."Cost Type"::Sundry);
      END;
    END;

    PROCEDURE SetPurchaseOrderLineControlFilterForCostType@1100529957(CostType@1100529901 : 'Labor,Material,Subcontracting,Plant,Sundry,Revenue';VAR PurchaseOrderControlLine@1100529900 : Record 11020221);
    BEGIN
      CASE CostType OF
        CostType::Labor:
          PurchaseOrderControlLine.SETRANGE("Cost Type", PurchaseOrderControlLine."Cost Type"::Labor);
        CostType::Material:
          PurchaseOrderControlLine.SETRANGE("Cost Type", PurchaseOrderControlLine."Cost Type"::Material);
        CostType::Plant:
          PurchaseOrderControlLine.SETRANGE("Cost Type", PurchaseOrderControlLine."Cost Type"::Plant);
        CostType::Subcontracting:
          PurchaseOrderControlLine.SETRANGE("Cost Type", PurchaseOrderControlLine."Cost Type"::Subcontracting);
        CostType::Sundry:
          PurchaseOrderControlLine.SETRANGE("Cost Type", PurchaseOrderControlLine."Cost Type"::Sundry);
      END;
    END;

    PROCEDURE SetServiceOrderBudgetLineFilterForCostType@1100529960(CostType@1100529901 : 'Labor,Material,Subcontracting,Plant,Sundry,Revenue';VAR ServiceOrderBudgetLine@1100529900 : Record 11012875);
    BEGIN
      CASE CostType OF
        CostType::Labor:
          ServiceOrderBudgetLine.SETRANGE("Cost Type", ServiceOrderBudgetLine."Cost Type"::Labor);
        CostType::Material:
          ServiceOrderBudgetLine.SETRANGE("Cost Type", ServiceOrderBudgetLine."Cost Type"::Material);
        CostType::Plant:
          ServiceOrderBudgetLine.SETRANGE("Cost Type", ServiceOrderBudgetLine."Cost Type"::Plant);
        CostType::Subcontracting:
          ServiceOrderBudgetLine.SETRANGE("Cost Type", ServiceOrderBudgetLine."Cost Type"::Subcontracting);
        CostType::Sundry:
          ServiceOrderBudgetLine.SETRANGE("Cost Type", ServiceOrderBudgetLine."Cost Type"::Sundry);
      END;
    END;

    PROCEDURE SetItemJournalLineFilterForCostType@1100529969(CostType@1100529901 : 'Labor,Material,Subcontracting,Plant,Sundry,Revenue';VAR ItemJournalLine@1100529900 : Record 83);
    BEGIN
      CASE CostType OF
        CostType::Labor:
          ItemJournalLine.SETRANGE("Cost Type", ItemJournalLine."Cost Type"::Labor);
        CostType::Material:
          ItemJournalLine.SETRANGE("Cost Type", ItemJournalLine."Cost Type"::Material);
        CostType::Plant:
          ItemJournalLine.SETRANGE("Cost Type", ItemJournalLine."Cost Type"::Plant);
        CostType::Subcontracting:
          ItemJournalLine.SETRANGE("Cost Type", ItemJournalLine."Cost Type"::Subcontracting);
        CostType::Sundry:
          ItemJournalLine.SETRANGE("Cost Type", ItemJournalLine."Cost Type"::Sundry);
      END;
    END;

    LOCAL PROCEDURE SetServiceLedgerEntryGeneralFilter@1100529967(SCControlbyPeriodDetail@1100529900 : Record 11072552;AmountType@1100529902 : 'All,No Additional,Additional';VAR ServiceLedgerEntry@1100529901 : Record 11012819);
    BEGIN
      ServiceLedgerEntry.SETRANGE("Service Contract No.", SCControlbyPeriodDetail."Service Contract No.");
      IF SCControlbyPeriodDetail."Service Order No." <> '' THEN
        ServiceLedgerEntry.SETRANGE("Base Service Order No.", SCControlbyPeriodDetail."Service Order No.")
      ELSE
        ServiceLedgerEntry.SETRANGE("Service Control Period Date", SCControlbyPeriodDetail."Starting Date", SCControlbyPeriodDetail."Ending Date");
      CASE AmountType OF
        AmountType::"No Additional":
          ServiceLedgerEntry.SETRANGE("Additional Cost", FALSE);
        AmountType::Additional:
          ServiceLedgerEntry.SETRANGE("Additional Cost", TRUE);
      END;
      ServiceLedgerEntry.SETRANGE("Cost Type", SCControlbyPeriodDetail."Cost Type");
      IF SCControlbyPeriodDetail."Cost Object" <> '' THEN
        ServiceLedgerEntry.SETRANGE("Global Dimension 2 Code", SCControlbyPeriodDetail."Cost Object");
    END;

    LOCAL PROCEDURE SetPurchaseLineGeneralFilter@1100529968(SCControlbyPeriodDetail@1100529900 : Record 11072552;VAR PurchaseLine@1100529901 : Record 39);
    BEGIN
      PurchaseLine.SETRANGE("Service Contract No.", SCControlbyPeriodDetail."Service Contract No.");
      IF SCControlbyPeriodDetail."Service Order No." <> '' THEN
        PurchaseLine.SETRANGE("Base Service Order No.", SCControlbyPeriodDetail."Service Order No.");
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      SetPurchaseLineFilterForCostType(SCControlbyPeriodDetail."Cost Type", PurchaseLine);
      IF SCControlbyPeriodDetail."Cost Object" <> '' THEN
        PurchaseLine.SETRANGE("Shortcut Dimension 2 Code", SCControlbyPeriodDetail."Cost Object");
    END;

    LOCAL PROCEDURE SetServiceOrderCostPlusEntryGeneralFilter@1100529972(ServiceOrderNo@1100529900 : Code[20];AmountType@1100529902 : 'All,No Additional,Additional';VAR ServiceOrderCostPlusEntry@1100529901 : Record 11012825);
    BEGIN
      ServiceOrderCostPlusEntry.SETRANGE("Base Service Order No.", ServiceOrderNo);
      CASE AmountType OF
        AmountType::"No Additional":
          ServiceOrderCostPlusEntry.SETRANGE("Additional Cost", FALSE);
        AmountType::Additional:
          ServiceOrderCostPlusEntry.SETRANGE("Additional Cost", TRUE);
      END;
    END;

    LOCAL PROCEDURE SetItemJournalLineGeneralFilter@1100529973(SCControlbyPeriodDetail@1100529900 : Record 11072552;AmountType@1100529902 : 'All,No Additional,Additional';VAR ItemJournalLine@1100529901 : Record 83);
    BEGIN
      ItemJournalLine.SETRANGE("Service Contract No.", SCControlbyPeriodDetail."Service Contract No.");
      ItemJournalLine.SETCURRENTKEY("Base Service Order No.");
      IF SCControlbyPeriodDetail."Service Order No." <> '' THEN
        ItemJournalLine.SETRANGE("Base Service Order No.", SCControlbyPeriodDetail."Service Order No.")
      ELSE
        ItemJournalLine.SETRANGE("Posting Date", SCControlbyPeriodDetail."Starting Date", SCControlbyPeriodDetail."Ending Date");
      IF SCControlbyPeriodDetail."Cost Object" <> '' THEN
        ItemJournalLine.SETRANGE("Shortcut Dimension 2 Code", SCControlbyPeriodDetail."Cost Object");
      SetItemJournalLineFilterForCostType(SCControlbyPeriodDetail."Cost Type", ItemJournalLine);
      CASE AmountType OF
        AmountType::"No Additional":
          ItemJournalLine.SETRANGE("Additional Cost (Service)", FALSE);
        AmountType::Additional:
          ItemJournalLine.SETRANGE("Additional Cost (Service)", TRUE);
      END;
    END;

    LOCAL PROCEDURE SetHourAccountingLineGeneralFilter@1100529974(SCControlbyPeriodDetail@1100529900 : Record 11072552;AmountType@1100529902 : 'All,No Additional,Additional';VAR HourAccountingLine@1100529901 : Record 11012039);
    BEGIN
      HourAccountingLine.SETCURRENTKEY("Service Contract No.");
      HourAccountingLine.SETRANGE("Service Contract No.", SCControlbyPeriodDetail."Service Contract No.");
      HourAccountingLine.SETRANGE("Cost Type", SCControlbyPeriodDetail."Cost Type");
      IF SCControlbyPeriodDetail."Service Order No." <> '' THEN
        HourAccountingLine.SETRANGE("Base Service Order No.", SCControlbyPeriodDetail."Service Order No.")
      ELSE
        HourAccountingLine.SETRANGE("Posting Date", SCControlbyPeriodDetail."Starting Date", SCControlbyPeriodDetail."Ending Date");
      IF SCControlbyPeriodDetail."Cost Object" <> '' THEN
        HourAccountingLine.SETRANGE("Cost Object", SCControlbyPeriodDetail."Cost Object");
      CASE AmountType OF
        AmountType::"No Additional":
          HourAccountingLine.SETRANGE("Additional Cost (Service)", FALSE);
        AmountType::Additional:
          HourAccountingLine.SETRANGE("Additional Cost (Service)", TRUE);
      END;
    END;

    LOCAL PROCEDURE SetHourAccountingSurchargeGeneralFilter@1100528508(SCControlbyPeriodDetail@1100529900 : Record 11072552;AmountType@1100529902 : 'All,No Additional,Additional';VAR HourAccountingSurcharge@1100529901 : Record 11020308);
    BEGIN
      HourAccountingSurcharge.SETCURRENTKEY("Service Contract No.");
      HourAccountingSurcharge.SETRANGE("Service Contract No.", SCControlbyPeriodDetail."Service Contract No.");
      HourAccountingSurcharge.SETRANGE("Cost Type", SCControlbyPeriodDetail."Cost Type");
      IF SCControlbyPeriodDetail."Service Order No." <> '' THEN
        HourAccountingSurcharge.SETRANGE("Base Service Order No.", SCControlbyPeriodDetail."Service Order No.")
      ELSE
        HourAccountingSurcharge.SETRANGE("Posting Date", SCControlbyPeriodDetail."Starting Date", SCControlbyPeriodDetail."Ending Date");
      IF SCControlbyPeriodDetail."Cost Object" <> '' THEN
        HourAccountingSurcharge.SETRANGE("Cost Object", SCControlbyPeriodDetail."Cost Object");
      CASE AmountType OF
        AmountType::"No Additional":
          HourAccountingSurcharge.SETRANGE("Additional Cost (Service)", FALSE);
        AmountType::Additional:
          HourAccountingSurcharge.SETRANGE("Additional Cost (Service)", TRUE);
      END;
    END;

    LOCAL PROCEDURE SetPurchaseOrderControlLineGeneralFilter@1100529985(SCControlbyPeriodDetail@1100529900 : Record 11072552;AmountType@1100529902 : 'All,No Additional,Additional';VAR PurchaseOrderControlLine@1100529901 : Record 11020221);
    BEGIN
      IF SCControlbyPeriodDetail."Service Order No." <> '' THEN
        PurchaseOrderControlLine.SETRANGE("Base Service Order No.", SCControlbyPeriodDetail."Service Order No.")
      ELSE
        PurchaseOrderControlLine.SETRANGE(Date, SCControlbyPeriodDetail."Starting Date", SCControlbyPeriodDetail."Ending Date");
      CASE AmountType OF
        AmountType::"No Additional":
          PurchaseOrderControlLine.SETRANGE("Additional Cost (Service)", FALSE);
        AmountType::Additional:
          PurchaseOrderControlLine.SETRANGE("Additional Cost (Service)", TRUE);
      END;
      SetPurchaseOrderLineControlFilterForCostType(SCControlbyPeriodDetail."Cost Type", PurchaseOrderControlLine);
      IF SCControlbyPeriodDetail."Cost Object" <> '' THEN
        PurchaseOrderControlLine.SETRANGE("Shortcut Dimension 2 Code", SCControlbyPeriodDetail."Cost Object");
    END;

    PROCEDURE SetCalculateCostTypeAmounts@1100529600(NewCalculateCostTypeAmounts@1100529600 : Boolean;NewCalculateCostTypeRevenues@1100529602 : Boolean);
    BEGIN
      CalculateCostTypeAmounts := NewCalculateCostTypeAmounts;
      IF CalculateCostTypeAmounts THEN
        CalculateCostTypeRevenues := NewCalculateCostTypeRevenues
      ELSE
        CalculateCostTypeRevenues := FALSE;

      TmpServicePrognosisByCostType.RESET;
      TmpServicePrognosisByCostType.DELETEALL;
    END;

    LOCAL PROCEDURE GetTmpServPrognByCostTypeFromSCBudgetVersion@1100529603(LocSCBudgetVersion@1100529600 : Record 11071990;LocServiceCategory@1100529602 : Code[20];LocEndingDate@1100529604 : Date;LocSourceType@1100529605 : Option);
    VAR
      ServiceSurchargeManagement@1100529603 : Codeunit 11012834;
      SCBudgetVersionLine@1100529601 : Query 11012805;
      TmpBuffer@1100529606 : TEMPORARY Record 11012875;
    BEGIN
      IF NOT CalculateCostTypeAmounts THEN
        EXIT;

      CLEAR(TmpServicePrognosisByCostType);
      SCBudgetVersionLine.SETRANGE(Service_Contract_No, LocSCBudgetVersion."Service Contract No.");
      SCBudgetVersionLine.SETRANGE(Source_Type, LocSCBudgetVersion."Source Type");
      SCBudgetVersionLine.SETRANGE(Index_Date, LocSCBudgetVersion."Index Date");
      SCBudgetVersionLine.SETRANGE(Service_Category, LocServiceCategory);
      SCBudgetVersionLine.OPEN;
      WHILE SCBudgetVersionLine.READ DO BEGIN
        TmpServicePrognosisByCostType.INIT;
        TmpServicePrognosisByCostType."Prognosis Line No." += 1;
        TmpServicePrognosisByCostType."Cost Type" := SCBudgetVersionLine.Cost_Type;
        TmpServicePrognosisByCostType."Cost Object" := SCBudgetVersionLine.Cost_Object;
        IF SCBudgetVersionLine.Cost_Type = SCBudgetVersionLine.Cost_Type::Revenue THEN
          TmpServicePrognosisByCostType.Result := SCBudgetVersionLine.Sum_Cost_Amount
        ELSE BEGIN
          TmpServicePrognosisByCostType."Budget Cost" := SCBudgetVersionLine.Sum_Cost_Amount;
          IF TmpServicePrognosisByCostType."Cost Type" = TmpServicePrognosisByCostType."Cost Type"::Labor THEN
            TmpServicePrognosisByCostType."Budget Hours" := SCBudgetVersionLine.Sum_Hours;
          ServiceSurchargeManagement.InsertTmpBuffer(
            TmpBuffer, TmpServicePrognosisByCostType."Cost Type", TmpServicePrognosisByCostType."Cost Object",
            TmpServicePrognosisByCostType."Budget Cost", 0, FALSE);
        END;
        TmpServicePrognosisByCostType.INSERT;
      END;

      SCBudgetVersionLine.CLOSE;

      ServiceSurchargeManagement.CalculateSCSurchargeAmountCostObject(LocSCBudgetVersion."Service Contract No.", LocSourceType, LocEndingDate, TmpBuffer);
      TmpBuffer.RESET;
      TmpBuffer.SETRANGE("Surcharge Line", TRUE);
      IF TmpBuffer.ISEMPTY THEN
        EXIT;
      TmpBuffer.FINDSET;
      REPEAT
        TmpServicePrognosisByCostType.INIT;
        TmpServicePrognosisByCostType."Prognosis Line No." += 1;
        TmpServicePrognosisByCostType."Cost Type" := TmpBuffer."Cost Type";
        TmpServicePrognosisByCostType."Cost Object" := TmpBuffer."Cost Object";
        TmpServicePrognosisByCostType."Budget Cost" := TmpBuffer.Amount;
        TmpServicePrognosisByCostType.INSERT;
      UNTIL TmpBuffer.NEXT = 0;
    END;

    PROCEDURE UpdateTmpServicePrognosisByCostType@1100529601(AmtType@1100529600 : 'Budget,Allowed';Percentage@1100529601 : Decimal;RoundValues@1100529602 : Boolean);
    BEGIN
      IF NOT CalculateCostTypeAmounts THEN
        EXIT;
      TmpServicePrognosisByCostType.RESET;
      IF TmpServicePrognosisByCostType.ISEMPTY THEN
        EXIT;

      TmpServicePrognosisByCostType.FINDSET;
      REPEAT
        CASE AmtType OF
          AmtType::Budget:
            IF RoundValues THEN BEGIN
              TmpServicePrognosisByCostType."Budget Cost" := ROUND(TmpServicePrognosisByCostType."Budget Cost" * Percentage / 100);
              TmpServicePrognosisByCostType."Budget Hours" := ROUND(TmpServicePrognosisByCostType."Budget Hours" * Percentage / 100);
            END ELSE BEGIN
              TmpServicePrognosisByCostType."Budget Cost" := TmpServicePrognosisByCostType."Budget Cost" * Percentage;
              TmpServicePrognosisByCostType."Budget Hours" := TmpServicePrognosisByCostType."Budget Hours" * Percentage;
              TmpServicePrognosisByCostType.Result := TmpServicePrognosisByCostType.Result * Percentage; // Revenues
            END;
          AmtType::Allowed:
            BEGIN
              TmpServicePrognosisByCostType."Allowed Cost" := TmpServicePrognosisByCostType."Budget Cost" * Percentage / 100;
              TmpServicePrognosisByCostType."Allowed Hours" := TmpServicePrognosisByCostType."Allowed Hours" * Percentage / 100;
            END;
        END;
        TmpServicePrognosisByCostType.MODIFY;
      UNTIL TmpServicePrognosisByCostType.NEXT = 0;
    END;

    PROCEDURE GetCompressedTmpServicePrognosisByCostType@1100529602(ServicePrognosisLine@1100529600 : Record 11072310);
    VAR
      NewServicePrognosisByCostType@1100529601 : Record 11072553;
    BEGIN
      IF NOT CalculateCostTypeAmounts THEN
        EXIT;

      TmpServicePrognosisByCostType.RESET;
      IF TmpServicePrognosisByCostType.ISEMPTY THEN
        EXIT;

      TmpServicePrognosisByCostType.SETCURRENTKEY("Cost Type", "Cost Object");
      TmpServicePrognosisByCostType.FINDSET;
      REPEAT
        TmpServicePrognosisByCostType.SETRANGE("Cost Type", TmpServicePrognosisByCostType."Cost Type");
        TmpServicePrognosisByCostType.SETRANGE("Cost Object", TmpServicePrognosisByCostType."Cost Object");
        TmpServicePrognosisByCostType.CALCSUMS("Budget Cost", "Budget Hours");

        NewServicePrognosisByCostType := TmpServicePrognosisByCostType;
        NewServicePrognosisByCostType."Prognosis Date" := ServicePrognosisLine."Prognosis Date";
        NewServicePrognosisByCostType."Prognosis Seq. No." := ServicePrognosisLine."Prognosis Seq. No.";
        NewServicePrognosisByCostType."Prognosis Line No." := ServicePrognosisLine."Line No.";
        NewServicePrognosisByCostType."Line Type" := ServicePrognosisLine."Line Type";
        NewServicePrognosisByCostType."Source Type" := ServicePrognosisLine."Source Type";
        NewServicePrognosisByCostType."Control Period Code" := ServicePrognosisLine."Control Period Code";
        NewServicePrognosisByCostType."Starting Date" := ServicePrognosisLine."Starting Date";
        NewServicePrognosisByCostType."Ending Date" := ServicePrognosisLine."Ending Date";
        NewServicePrognosisByCostType."Service Contract No." := ServicePrognosisLine."Service Contract No.";
        NewServicePrognosisByCostType."Service Category" := ServicePrognosisLine."Service Category";
        NewServicePrognosisByCostType.Available := NewServicePrognosisByCostType."Budget Cost";
        NewServicePrognosisByCostType.INSERT;

        TmpServicePrognosisByCostType.FINDLAST;
        TmpServicePrognosisByCostType.SETRANGE("Cost Type");
        TmpServicePrognosisByCostType.SETRANGE("Cost Object");
      UNTIL TmpServicePrognosisByCostType.NEXT = 0;
    END;

    PROCEDURE GetCompressedSCControlByPeriodDetail@1100529608(SCControlByPeriod@1100529600 : Record 11072311;ReleasePercentage@1100529602 : Decimal);
    VAR
      NewSCControlbyPeriodDetail@1100529601 : Record 11072552;
    BEGIN
      IF NOT CalculateCostTypeAmounts THEN
        EXIT;

      TmpServicePrognosisByCostType.RESET;
      IF NOT TmpServicePrognosisByCostType.ISEMPTY THEN BEGIN
        TmpServicePrognosisByCostType.SETCURRENTKEY("Cost Type", "Cost Object");
        TmpServicePrognosisByCostType.FINDSET;
        REPEAT
          TmpServicePrognosisByCostType.SETRANGE("Cost Type", TmpServicePrognosisByCostType."Cost Type");
          TmpServicePrognosisByCostType.SETRANGE("Cost Object", TmpServicePrognosisByCostType."Cost Object");
          TmpServicePrognosisByCostType.CALCSUMS("Budget Cost", "Budget Hours", Result);

          NewSCControlbyPeriodDetail.InitValuesFromSCControlByPeriod(SCControlByPeriod);
          NewSCControlbyPeriodDetail."Cost Type" := TmpServicePrognosisByCostType."Cost Type";
          NewSCControlbyPeriodDetail."Cost Object" := TmpServicePrognosisByCostType."Cost Object";
          NewSCControlbyPeriodDetail."Budget Cost" := TmpServicePrognosisByCostType."Budget Cost";
          IF NewSCControlbyPeriodDetail."Cost Type" = NewSCControlbyPeriodDetail."Cost Type"::Labor THEN
            NewSCControlbyPeriodDetail."Budget Hours" := TmpServicePrognosisByCostType."Budget Hours";
          IF SCControlByPeriod."Source Type" = SCControlByPeriod."Source Type"::Call THEN BEGIN
            NewSCControlbyPeriodDetail."Allowed Cost" := NewSCControlbyPeriodDetail."Budget Cost" * ReleasePercentage / 100;
            IF NewSCControlbyPeriodDetail."Cost Type" = NewSCControlbyPeriodDetail."Cost Type"::Labor THEN
              NewSCControlbyPeriodDetail."Allowed Hours" := NewSCControlbyPeriodDetail."Budget Hours" * ReleasePercentage / 100;
          END;
          IF NewSCControlbyPeriodDetail."Cost Type" = NewSCControlbyPeriodDetail."Cost Type"::Revenue THEN
            NewSCControlbyPeriodDetail."Total Budget Revenue" := TmpServicePrognosisByCostType.Result;
          NewSCControlbyPeriodDetail.INSERT(TRUE);

          TmpServicePrognosisByCostType.FINDLAST;
          TmpServicePrognosisByCostType.SETRANGE("Cost Type");
          TmpServicePrognosisByCostType.SETRANGE("Cost Object");
        UNTIL TmpServicePrognosisByCostType.NEXT = 0;
      END;

      IF TmpSCControlByPeriodDetail.ISEMPTY THEN
        EXIT;

      TmpSCControlByPeriodDetail.SETCURRENTKEY("Cost Type", "Cost Object");
      TmpSCControlByPeriodDetail.FINDSET;
      REPEAT
        TmpSCControlByPeriodDetail.SETRANGE("Cost Type", TmpSCControlByPeriodDetail."Cost Type");
        TmpSCControlByPeriodDetail.SETRANGE("Cost Object", TmpSCControlByPeriodDetail."Cost Object");
        TmpSCControlByPeriodDetail.CALCSUMS("Revenue Amount");

        IF NewSCControlbyPeriodDetail.GET(SCControlByPeriod."Entry No.", TmpSCControlByPeriodDetail."Cost Type", TmpSCControlByPeriodDetail."Cost Object") THEN BEGIN
          NewSCControlbyPeriodDetail."Revenue Amount" += TmpSCControlByPeriodDetail."Revenue Amount";
          NewSCControlbyPeriodDetail.MODIFY(TRUE);
        END ELSE BEGIN
          NewSCControlbyPeriodDetail.InitValuesFromSCControlByPeriod(SCControlByPeriod);
          NewSCControlbyPeriodDetail."Cost Type" := TmpSCControlByPeriodDetail."Cost Type";
          NewSCControlbyPeriodDetail."Cost Object" := TmpSCControlByPeriodDetail."Cost Object";
          NewSCControlbyPeriodDetail."Revenue Amount" := TmpSCControlByPeriodDetail."Revenue Amount";
          NewSCControlbyPeriodDetail.INSERT(TRUE);
        END;

        TmpSCControlByPeriodDetail.FINDLAST;
        TmpSCControlByPeriodDetail.SETRANGE("Cost Type");
        TmpSCControlByPeriodDetail.SETRANGE("Cost Object");
      UNTIL TmpSCControlByPeriodDetail.NEXT = 0;
    END;

    LOCAL PROCEDURE GetSOSUPRecordingLines@1100528501(ServiceOrderNo@1100528604 : Code[20];InclNextOrders@1100528601 : Boolean;PostingDateFilter@1100528606 : Text;VAR SUPRecordingLine@1100528600 : Record 11071772);
    BEGIN
      SUPRecordingLine.RESET;
      IF InclNextOrders THEN BEGIN
        SUPRecordingLine.SETCURRENTKEY("Base Service Order No.");
        SUPRecordingLine.SETRANGE("Base Service Order No.", ServiceOrderNo);
      END ELSE BEGIN
        SUPRecordingLine.SETCURRENTKEY("Service Order No.");
        SUPRecordingLine.SETRANGE("Service Order No.", ServiceOrderNo);
      END;
      IF PostingDateFilter <> '' THEN
        SUPRecordingLine.SETFILTER("Index Date", PostingDateFilter);
    END;

    LOCAL PROCEDURE GetSOSUPRecordingLineRecordingAmount@1100528500(ServiceOrderNo@1100528602 : Code[20];IInclNextOrders@1100528600 : Boolean;PostingDateFilter@1100528607 : Text) : Decimal;
    VAR
      SUPRecordingLine@1100528601 : Record 11071772;
    BEGIN
      GetSOSUPRecordingLines(ServiceOrderNo, IInclNextOrders, PostingDateFilter, SUPRecordingLine);
      SUPRecordingLine.CALCSUMS("Recording Amount");
      EXIT(SUPRecordingLine."Recording Amount");
    END;

    PROCEDURE GetTotalCostBalanceSheetOrPL@1100529750(LocServiceContractNo@1100528615 : Code[20];LocServiceCategory@1100529756 : Code[20];LocServiceOrderNo@1100529757 : Code[20];LocSourceType@1100529758 : Option;LocStartingDate@1100528614 : Date;LocEndingDate@1100528613 : Date;LocPostingDateFilter@1100528619 : Text;VAR TotalCostWIPOnBalSheet@1100529751 : Decimal;VAR TotalRevWIPOnBalSheet@1100529752 : Decimal;VAR TotalCostOnPL@1100529753 : Decimal;VAR TotalRevenueOnPL@1100529754 : Decimal) MaintenanceBudget : Decimal;
    VAR
      GLAccount@1100529755 : Record 15;
      ServLedgEntrybyBalOrPL@1100529750 : Query 11012806;
    BEGIN
      TotalCostWIPOnBalSheet := 0;
      TotalRevWIPOnBalSheet := 0;
      TotalCostOnPL := 0;
      TotalRevenueOnPL := 0;

      ServLedgEntrybyBalOrPL.SETRANGE(Service_Contract_No, LocServiceContractNo);
      ServLedgEntrybyBalOrPL.SETRANGE(Service_Category, LocServiceCategory);
      ServLedgEntrybyBalOrPL.SETRANGE(Base_Service_Order_No, LocServiceOrderNo);
      ServLedgEntrybyBalOrPL.SETRANGE(Source_Type, LocSourceType);
      ServLedgEntrybyBalOrPL.SETRANGE(Service_Control_Period_Date, LocStartingDate, LocEndingDate);
      IF LocPostingDateFilter <> '' THEN
        ServLedgEntrybyBalOrPL.SETFILTER(Posting_Date, LocPostingDateFilter);

      IF LocServiceOrderNo = '' THEN
        ServLedgEntrybyBalOrPL.SETRANGE(Service_Contract_WIP_processed, FALSE)
      ELSE
        ServLedgEntrybyBalOrPL.SETRANGE(Service_Order_WIP_processed, FALSE);

      ServLedgEntrybyBalOrPL.OPEN;
      WHILE ServLedgEntrybyBalOrPL.READ DO
        IF ServLedgEntrybyBalOrPL.Income_Balance = GLAccount."Income/Balance"::"Balance Sheet" THEN BEGIN
          TotalCostWIPOnBalSheet += ServLedgEntrybyBalOrPL.Sum_Total_Cost_LCY;
          TotalRevWIPOnBalSheet += ServLedgEntrybyBalOrPL.Sum_Total_Revenue_LCY;
        END ELSE BEGIN
          TotalCostOnPL += ServLedgEntrybyBalOrPL.Sum_Total_Cost_LCY;
          TotalRevenueOnPL += ServLedgEntrybyBalOrPL.Sum_Total_Revenue_LCY;
        END;

      ServLedgEntrybyBalOrPL.CLOSE;
    END;

    PROCEDURE GetPreclosureResultValues@1100529751(LocServiceContractNo@1100529761 : Code[20];LocControlPeriodCode@1100529756 : Code[10];LocServiceCategory@1100529760 : Code[20];LocServiceOrderNo@1100529759 : Code[20];LocGlobalDim1Code@1100529600 : Code[20];LocLineType@1100529751 : Option;LocSourceType@1100529758 : Option;VAR PostedPreclosureResult@1100529754 : Decimal;VAR PostedProvisionLoss@1100529753 : Decimal);
    VAR
      ServicePreclosureResultLine@1100529750 : Record 11072313;
      ServiceType@1100529752 : Record 11012814;
      PostServicePreclosureMgt@1100529755 : Codeunit 11012886;
    BEGIN
      PostedPreclosureResult := 0;
      PostedProvisionLoss := 0;

      ServicePreclosureResultLine.SETRANGE("Service Contract No.", LocServiceContractNo);
      IF LocServiceContractNo = '' THEN
        ServicePreclosureResultLine.SETRANGE("Global Dimension 1 Code", LocGlobalDim1Code);
      ServicePreclosureResultLine.SETRANGE("Control Period Code", LocControlPeriodCode);
      ServicePreclosureResultLine.SETRANGE("Service Category", LocServiceCategory);
      ServicePreclosureResultLine.SETRANGE("Service Order No.", LocServiceOrderNo);
      ServicePreclosureResultLine.SETRANGE("Line Type", LocLineType);
      ServicePreclosureResultLine.SETRANGE("Source Type", LocSourceType);
      ServicePreclosureResultLine.SETRANGE(Posted, TRUE);
      ServicePreclosureResultLine.SETRANGE("Correction Posted", FALSE);
      IF ServicePreclosureResultLine.ISEMPTY THEN
        EXIT;

      ServicePreclosureResultLine.SETRANGE(Posted);
      ServicePreclosureResultLine.SETRANGE("Correction Posted");
      ServicePreclosureResultLine.FINDLAST;
      CASE PostServicePreclosureMgt.PreclosureMethodServiceContract(LocServiceContractNo, ServicePreclosureResultLine."Service Category") OF
        ServiceType."Method Preclosure Results"::Net:
          BEGIN
            ServicePreclosureResultLine.CALCFIELDS("Prev. Actual Preclosure Result", "Previous Actual Provision Loss");
            PostedPreclosureResult := ServicePreclosureResultLine."Prev. Actual Preclosure Result";
            PostedProvisionLoss := ServicePreclosureResultLine."Previous Actual Provision Loss";
          END;
        ServiceType."Method Preclosure Results"::Gross:
          BEGIN
            ServicePreclosureResultLine.CALCFIELDS("Prev. Actual Preclosure Rev.", "Prev. Actual Preclosure Cost", "Previous Actual Provision Loss");
            PostedPreclosureResult := ServicePreclosureResultLine."Prev. Actual Preclosure Rev." - ServicePreclosureResultLine."Prev. Actual Preclosure Cost";
            PostedProvisionLoss := ServicePreclosureResultLine."Previous Actual Provision Loss";
          END;
        ServiceType."Method Preclosure Results"::GrossPL:
          BEGIN
            ServicePreclosureResultLine.CALCFIELDS("Previous Revenue Accrual", "Previous Cost Accrual", "Previous Actual Provision Loss");
            PostedPreclosureResult := ServicePreclosureResultLine."Revenue Amount" + ServicePreclosureResultLine."Previous Revenue Accrual" -
                                      ServicePreclosureResultLine."Actual Cost" - ServicePreclosureResultLine."Previous Cost Accrual";
            PostedProvisionLoss := ServicePreclosureResultLine."Previous Actual Provision Loss";
          END;
      END;
    END;

    PROCEDURE UpdateContractArrangements@1100528502(IServiceContractNo@1100528501 : Code[20];IServiceContractBudgetBasedOn@1100529600 : Option;VAR IServiceControlPeriod@1100528500 : Record 11071755);
    VAR
      TmpServiceControlPeriod@1100528502 : TEMPORARY Record 11071755;
      ContractObjectMaintenance@1100528504 : Record 11071692;
      ServiceContract@1100529601 : Record 11012812;
    BEGIN
      IF IServiceContractNo = '' THEN
        EXIT;
      IF NOT (IServiceContractBudgetBasedOn IN [ServiceContract."Budget Based on"::"Category + Maintenance Scheme", ServiceContract."Budget Based on"::"Maintenance Scheme"]) THEN
        EXIT;
      TmpServiceControlPeriod.COPY(IServiceControlPeriod, TRUE);
      IF NOT TmpServiceControlPeriod.FINDLAST THEN
        EXIT;
      ContractObjectMaintenance.SETRANGE("Service Contract No.", IServiceContractNo);
      IF ContractObjectMaintenance.FINDSET THEN
        REPEAT
          ContractObjectMaintenance.UpdateServiceContractArr(TmpServiceControlPeriod."Ending Date", TRUE, FALSE, TRUE);
        UNTIL ContractObjectMaintenance.NEXT = 0;
    END;

    LOCAL PROCEDURE BudgetLinesOnContractObjectLevel@1100528507(IServiceContractNo@1100528500 : Code[20];IServiceObjectNo@1100528501 : Code[20];IMaintenanceSchemeCode@1100528504 : Code[20];ISeekDate@1100528503 : Date) : Boolean;
    VAR
      MaintenanceSchemeVersion@1100528502 : Record 11071743;
    BEGIN
      MaintenanceSchemeVersion.SETRANGE("Line Type", MaintenanceSchemeVersion."Line Type"::Object);
      MaintenanceSchemeVersion.SETRANGE(Code, IServiceObjectNo);
      MaintenanceSchemeVersion.SETRANGE("Belongs to Scheme", IMaintenanceSchemeCode);
      MaintenanceSchemeVersion.SETFILTER("Index Date", '<=%1', ISeekDate);
      MaintenanceSchemeVersion.SETRANGE(Expired, FALSE);
      EXIT(NOT MaintenanceSchemeVersion.ISEMPTY);
    END;

    LOCAL PROCEDURE ClearTmpStandardObjectBudgetCost@1100528505();
    BEGIN
      TmpStandardObjectBudgetCost.RESET;
      TmpStandardObjectBudgetCost.DELETEALL;
    END;

    LOCAL PROCEDURE InsertTmpStandardObjectBudgetCost@1100528510(IServiceContractNo@1100528500 : Code[20];IStandardObjectNo@1100528501 : Code[20];IMaintenanceSchemeCode@1100528502 : Code[20];ILaborAmount@1100528503 : Decimal;IHours@1100528504 : Decimal;IMaterial@1100528505 : Decimal;ISubcontracting@1100528506 : Decimal;IPlant@1100528507 : Decimal;ISundry@1100528508 : Decimal;ITotalCost@1100528509 : Decimal;ISurchargeAmount@1100528510 : Decimal);
    BEGIN
      TmpStandardObjectBudgetCost."Key Code1" := IServiceContractNo;
      TmpStandardObjectBudgetCost."Key Code2" := IStandardObjectNo;
      TmpStandardObjectBudgetCost."Key Code3" := IMaintenanceSchemeCode;
      TmpStandardObjectBudgetCost.Dec1 := ILaborAmount;
      TmpStandardObjectBudgetCost.Dec2 := IHours;
      TmpStandardObjectBudgetCost.Dec3 := IMaterial;
      TmpStandardObjectBudgetCost.Dec4 := ISubcontracting;
      TmpStandardObjectBudgetCost.Dec5 := IPlant;
      TmpStandardObjectBudgetCost.Dec6 := ISundry;
      TmpStandardObjectBudgetCost.Dec7 := ITotalCost;
      TmpStandardObjectBudgetCost.Dec8 := ISurchargeAmount;
      TmpStandardObjectBudgetCost.INSERT;
    END;

    LOCAL PROCEDURE FillValuesFromTmpStandardObjectBudgetCost@1100528513(VAR TmpStandardObjectBudgetCost@1100528508 : TEMPORARY Record 11020579;VAR OLaborAmount@1100528507 : Decimal;VAR OHours@1100528506 : Decimal;VAR OMaterial@1100528505 : Decimal;VAR OSubcontracting@1100528504 : Decimal;VAR OPlant@1100528503 : Decimal;VAR OSundry@1100528502 : Decimal;VAR OTotalCost@1100528501 : Decimal;VAR OSurchargeAmount@1100528500 : Decimal);
    BEGIN
      OLaborAmount := TmpStandardObjectBudgetCost.Dec1;
      OHours := TmpStandardObjectBudgetCost.Dec2;
      OMaterial := TmpStandardObjectBudgetCost.Dec3;
      OSubcontracting := TmpStandardObjectBudgetCost.Dec4;
      OPlant := TmpStandardObjectBudgetCost.Dec5;
      OSundry := TmpStandardObjectBudgetCost.Dec6;
      OTotalCost := TmpStandardObjectBudgetCost.Dec7;
      OSurchargeAmount := TmpStandardObjectBudgetCost.Dec8;
    END;

    PROCEDURE GetSCBudgetVersionSurchargeAmount@1100529604(SCBudgetVersion@1100529602 : Record 11071990;LocSourceType@1100529603 : Option;EndingDate@1100529604 : Date;ServiceCategoryCode@1100529605 : Code[20];FilterByCostType@1100529606 : Boolean;CostType@1100529608 : 'Labor,Material,Subcontracting,Plant,Sundry';FilterByCostObject@1100529609 : Boolean;CostObject@1100529607 : Code[20]) SurChargeAmount : Decimal;
    VAR
      SCBudgetVersionLine@1100529601 : Record 11071991;
      ServiceSurchargeManagement@1100529600 : Codeunit 11012834;
      TmpBuffer@1100529610 : TEMPORARY Record 11012875;
    BEGIN
      SurChargeAmount := 0;
      SCBudgetVersionLine.SETRANGE("Service Contract No.", SCBudgetVersion."Service Contract No.");
      SCBudgetVersionLine.SETRANGE("Source Type", SCBudgetVersion."Source Type");
      SCBudgetVersionLine.SETRANGE("Index Date", SCBudgetVersion."Index Date");
      SCBudgetVersionLine.SETRANGE("Service Category", ServiceCategoryCode);
      SCBudgetVersionLine.SETRANGE("Cost Type", SCBudgetVersionLine."Cost Type"::Labor, SCBudgetVersionLine."Cost Type"::Sundry);
      IF SCBudgetVersionLine.ISEMPTY THEN
        EXIT;

      TmpBuffer.RESET;
      TmpBuffer.DELETEALL;

      SCBudgetVersionLine.FINDSET;
      REPEAT
        ServiceSurchargeManagement.InsertTmpBuffer(
          TmpBuffer, SCBudgetVersionLine."Cost Type", SCBudgetVersionLine."Cost Object",
          SCBudgetVersionLine."Cost Amount", 0, FALSE);
      UNTIL SCBudgetVersionLine.NEXT = 0;

      ServiceSurchargeManagement.CalculateSCSurchargeAmountCostObject(
        SCBudgetVersion."Service Contract No.", LocSourceType, EndingDate, TmpBuffer);
      TmpBuffer.RESET;
      TmpBuffer.SETRANGE("Surcharge Line", TRUE);
      IF FilterByCostType THEN
        TmpBuffer.SETRANGE("Cost Type", CostType);
      IF FilterByCostObject THEN
        TmpBuffer.SETRANGE("Cost Object", CostObject);
      IF TmpBuffer.ISEMPTY THEN
        EXIT(0);
      TmpBuffer.CALCSUMS(Amount);
      EXIT(TmpBuffer.Amount);
    END;

    LOCAL PROCEDURE ProcessCostObjectDetails@1100529620(ServiceContractNo@1100529602 : Code[20];TmpServiceControlPeriod@1100529600 : TEMPORARY Record 11071755);
    BEGIN
      TmpSCControlByPeriodDetail.RESET;
      TmpSCControlByPeriodDetail.DELETEALL;

      ProcessServiceOrderBudgetLine(ServiceContractNo, TmpServiceControlPeriod);
      ProcessServiceLedgerEntry(ServiceContractNo, TmpServiceControlPeriod);
      ProcessPurchaseOrderControlLine(ServiceContractNo, TmpServiceControlPeriod);
      ProcessItemJournalLine(ServiceContractNo, TmpServiceControlPeriod);
      ProcessHourAccountingLine(ServiceContractNo, TmpServiceControlPeriod);
      ProcessPurchaseLine(ServiceContractNo, TmpServiceControlPeriod);
      ProcessHourAccountingSurcharge(ServiceContractNo, TmpServiceControlPeriod);
    END;

    LOCAL PROCEDURE ProcessServiceOrderBudgetLine@1100529613(ServiceContractNo@1100529603 : Code[20];TmpServiceControlPeriod@1100529602 : TEMPORARY Record 11071755);
    VAR
      ServiceOrderBudgetLine@1100529600 : Query 11012808;
    BEGIN
      ServiceOrderBudgetLine.SETRANGE(Service_Contract_No, ServiceContractNo);
      IF TmpServiceControlPeriod.Code <> '' THEN
        ServiceOrderBudgetLine.SETRANGE(Service_Control_Period_Date, TmpServiceControlPeriod."Starting Date", TmpServiceControlPeriod."Ending Date");
      ServiceOrderBudgetLine.OPEN;
      WHILE ServiceOrderBudgetLine.READ DO BEGIN
        TmpSCControlByPeriodDetail.INIT;
        TmpSCControlByPeriodDetail."Entry No." += 1;
        TmpSCControlByPeriodDetail."Service Contract No." := ServiceContractNo;
        TmpSCControlByPeriodDetail."Service Order No." := ServiceOrderBudgetLine.Service_Order_No;
        TmpSCControlByPeriodDetail."Cost Type" := ServiceOrderBudgetLine.Cost_Type;
        TmpSCControlByPeriodDetail."Cost Object" := ServiceOrderBudgetLine.Cost_Object;
        TmpSCControlByPeriodDetail."Budget Cost" := ServiceOrderBudgetLine.Sum_Amount;
        TmpSCControlByPeriodDetail."Budget Hours" := ServiceOrderBudgetLine.Sum_Hours;
        IF ServiceOrderBudgetLine.Finished THEN BEGIN
          TmpSCControlByPeriodDetail."Allowed Cost" := ServiceOrderBudgetLine.Sum_Amount;
          TmpSCControlByPeriodDetail."Allowed Hours" := ServiceOrderBudgetLine.Sum_Hours;
        END;
        TmpSCControlByPeriodDetail.INSERT;
      END;
      ServiceOrderBudgetLine.CLOSE;
    END;

    LOCAL PROCEDURE ProcessServiceLedgerEntry@1100529611(ServiceContractNo@1100529603 : Code[20];TmpServiceControlPeriod@1100529602 : TEMPORARY Record 11071755);
    VAR
      ServLedgEntryByCostType@1100529600 : Query 11012809;
    BEGIN
      ServLedgEntryByCostType.SETRANGE(Service_Contract_No, ServiceContractNo);
      IF TmpServiceControlPeriod.Code <> '' THEN
        ServLedgEntryByCostType.SETRANGE(Service_Control_Period_Date, TmpServiceControlPeriod."Starting Date", TmpServiceControlPeriod."Ending Date");
      ServLedgEntryByCostType.OPEN;
      WHILE ServLedgEntryByCostType.READ DO BEGIN
        TmpSCControlByPeriodDetail.INIT;
        TmpSCControlByPeriodDetail."Entry No." += 1;
        TmpSCControlByPeriodDetail."Service Contract No." := ServiceContractNo;
        TmpSCControlByPeriodDetail."Service Order No." := ServLedgEntryByCostType.Service_Order_No;
        TmpSCControlByPeriodDetail."Cost Type" := ServLedgEntryByCostType.Cost_Type;
        TmpSCControlByPeriodDetail."Cost Object" := ServLedgEntryByCostType.Cost_Object;
        IF ServLedgEntryByCostType.Cost_Present THEN BEGIN
          TmpSCControlByPeriodDetail."Actual Cost" := ServLedgEntryByCostType.Sum_Total_Cost_LCY;
          TmpSCControlByPeriodDetail."Actual Hours" := ServLedgEntryByCostType.Sum_Quantity;
        END;
        TmpSCControlByPeriodDetail."Revenue Amount" := ServLedgEntryByCostType.Sum_Total_Revenue_LCY;
        IF ServLedgEntryByCostType.Additional_Cost THEN BEGIN
          IF ServLedgEntryByCostType.Cost_Present THEN
            TmpSCControlByPeriodDetail."Total Hours (Additional)" := ServLedgEntryByCostType.Sum_Quantity;
          TmpSCControlByPeriodDetail."Revenue Amount (Additional)" := ServLedgEntryByCostType.Sum_Total_Revenue_LCY;
        END;
        TmpSCControlByPeriodDetail.INSERT;
      END;
      ServLedgEntryByCostType.CLOSE;
    END;

    LOCAL PROCEDURE ProcessPurchaseOrderControlLine@1100529610(ServiceContractNo@1100529603 : Code[20];TmpServiceControlPeriod@1100529602 : TEMPORARY Record 11071755);
    VAR
      PurchaseOrderControlLine@1100529600 : Query 11012810;
    BEGIN
      PurchaseOrderControlLine.SETRANGE(Service_Contract_No, ServiceContractNo);
      IF TmpServiceControlPeriod.Code <> '' THEN
        PurchaseOrderControlLine.SETRANGE(Service_Control_Period_Date, TmpServiceControlPeriod."Starting Date", TmpServiceControlPeriod."Ending Date");
      PurchaseOrderControlLine.OPEN;
      WHILE PurchaseOrderControlLine.READ DO BEGIN
        TmpSCControlByPeriodDetail.INIT;
        TmpSCControlByPeriodDetail."Entry No." += 1;
        TmpSCControlByPeriodDetail."Service Contract No." := ServiceContractNo;
        TmpSCControlByPeriodDetail."Service Order No." := PurchaseOrderControlLine.Service_Order_No;
        TmpSCControlByPeriodDetail."Cost Type" := PurchaseOrderControlLine.Cost_Type - 1;
        TmpSCControlByPeriodDetail."Cost Object" := PurchaseOrderControlLine.Cost_Object;
        TmpSCControlByPeriodDetail."Open (Purchase)" := PurchaseOrderControlLine.Sum_Outstanding_Amount;
        TmpSCControlByPeriodDetail."Open Ovh. Surch. Soft (Purch.)" := PurchaseOrderControlLine.Sum_Overhead_Surcharge_Soft;
        TmpSCControlByPeriodDetail."Received/Not Invoiced" := PurchaseOrderControlLine.Sum_Amt_Rcd_Not_Invoiced;
        TmpSCControlByPeriodDetail."Open Ovh. Surch. Firm (Purch.)" := PurchaseOrderControlLine.Sum_Overhead_Surcharge_Firm;
        TmpSCControlByPeriodDetail.INSERT;
      END;
      PurchaseOrderControlLine.CLOSE;
    END;

    LOCAL PROCEDURE ProcessItemJournalLine@1100529609(ServiceContractNo@1100529603 : Code[20];TmpServiceControlPeriod@1100529602 : TEMPORARY Record 11071755);
    VAR
      ItemJournalLine@1100529600 : Query 11012811;
    BEGIN
      ItemJournalLine.SETRANGE(Service_Contract_No, ServiceContractNo);
      IF TmpServiceControlPeriod.Code <> '' THEN
        ItemJournalLine.SETRANGE(Service_Control_Period_Date, TmpServiceControlPeriod."Starting Date", TmpServiceControlPeriod."Ending Date");
      ItemJournalLine.OPEN;
      WHILE ItemJournalLine.READ DO BEGIN
        TmpSCControlByPeriodDetail.INIT;
        TmpSCControlByPeriodDetail."Entry No." += 1;
        TmpSCControlByPeriodDetail."Service Contract No." := ServiceContractNo;
        TmpSCControlByPeriodDetail."Service Order No." := ItemJournalLine.Service_Order_No;
        TmpSCControlByPeriodDetail."Cost Type" := ItemJournalLine.Cost_Type - 1;
        TmpSCControlByPeriodDetail."Cost Object" := ItemJournalLine.Cost_Object;
        TmpSCControlByPeriodDetail."Open (Inventory)" := ItemJournalLine.Sum_Amount;
        TmpSCControlByPeriodDetail."Open Ovh. Surch. (Inventory)" := ItemJournalLine.Sum_Overhead_Surcharge_Service;
        TmpSCControlByPeriodDetail.INSERT;
      END;
      ItemJournalLine.CLOSE;
    END;

    LOCAL PROCEDURE ProcessHourAccountingLine@1100529612(ServiceContractNo@1100529603 : Code[20];TmpServiceControlPeriod@1100529602 : TEMPORARY Record 11071755);
    VAR
      HourAccountingLine@1100529600 : Query 11012812;
    BEGIN
      HourAccountingLine.SETRANGE(Service_Contract_No, ServiceContractNo);
      IF TmpServiceControlPeriod.Code <> '' THEN
        HourAccountingLine.SETRANGE(Service_Control_Period_Date, TmpServiceControlPeriod."Starting Date", TmpServiceControlPeriod."Ending Date");
      HourAccountingLine.OPEN;
      WHILE HourAccountingLine.READ DO BEGIN
        TmpSCControlByPeriodDetail.INIT;
        TmpSCControlByPeriodDetail."Entry No." += 1;
        TmpSCControlByPeriodDetail."Service Contract No." := ServiceContractNo;
        TmpSCControlByPeriodDetail."Service Order No." := HourAccountingLine.Service_Order_No;
        TmpSCControlByPeriodDetail."Cost Type" := HourAccountingLine.Cost_Type;
        TmpSCControlByPeriodDetail."Cost Object" := HourAccountingLine.Cost_Object;
        TmpSCControlByPeriodDetail."Open Amount (Hours)" := HourAccountingLine.Sum_Amount_LCY;
        TmpSCControlByPeriodDetail."Open Hours" := HourAccountingLine.Sum_Total_Line;
        IF HourAccountingLine.Additional_Cost_Service THEN
          TmpSCControlByPeriodDetail."Total Hours (Additional)" := HourAccountingLine.Sum_Total_Line;
        TmpSCControlByPeriodDetail.INSERT;
      END;
      HourAccountingLine.CLOSE;
    END;

    LOCAL PROCEDURE ProcessPurchaseLine@1100529607(ServiceContractNo@1100529603 : Code[20];TmpServiceControlPeriod@1100529602 : TEMPORARY Record 11071755);
    VAR
      PurchaseLine@1100529600 : Query 11012813;
    BEGIN
      PurchaseLine.SETRANGE(Service_Contract_No, ServiceContractNo);
      IF TmpServiceControlPeriod.Code <> '' THEN
        PurchaseLine.SETRANGE(Service_Control_Period_Date, TmpServiceControlPeriod."Starting Date", TmpServiceControlPeriod."Ending Date");
      PurchaseLine.OPEN;
      WHILE PurchaseLine.READ DO BEGIN
        TmpSCControlByPeriodDetail.INIT;
        TmpSCControlByPeriodDetail."Entry No." += 1;
        TmpSCControlByPeriodDetail."Service Contract No." := ServiceContractNo;
        TmpSCControlByPeriodDetail."Service Order No." := PurchaseLine.Service_Order_No;
        TmpSCControlByPeriodDetail."Cost Type" := PurchaseLine.Cost_Type - 1;
        TmpSCControlByPeriodDetail."Cost Object" := PurchaseLine.Cost_Object;
        TmpSCControlByPeriodDetail.Purchase := PurchaseLine.Sum_Amount_LCY;
        TmpSCControlByPeriodDetail.INSERT;
      END;
      PurchaseLine.CLOSE;
    END;

    LOCAL PROCEDURE ProcessSCServiceLedgerEntry@1100525000(ServiceContractNo@1100525003 : Code[20];StartingDate@1100525002 : Date;EndingDate@1100525001 : Date;ServiceCategory@1100525000 : Code[20];PercentageShareCalls@1100525004 : Decimal);
    VAR
      ServLedgEntryByCostType@1100529600 : Query 11012814;
    BEGIN
      TmpSCControlByPeriodDetail.RESET;
      TmpSCControlByPeriodDetail.DELETEALL;

      IF PercentageShareCalls = 0 THEN
        EXIT;

      ServLedgEntryByCostType.SETRANGE(Service_Contract_No, ServiceContractNo);
      ServLedgEntryByCostType.SETRANGE(Service_Control_Period_Date , StartingDate, EndingDate);
      ServLedgEntryByCostType.SETRANGE(Service_Category, ServiceCategory);
      ServLedgEntryByCostType.OPEN;
      WHILE ServLedgEntryByCostType.READ DO BEGIN
        TmpSCControlByPeriodDetail.INIT;
        TmpSCControlByPeriodDetail."Entry No." += 1;
        TmpSCControlByPeriodDetail."Service Contract No." := ServiceContractNo;
        TmpSCControlByPeriodDetail."Cost Type" := ServLedgEntryByCostType.Cost_Type;
        TmpSCControlByPeriodDetail."Cost Object" := ServLedgEntryByCostType.Cost_Object;
        TmpSCControlByPeriodDetail."Revenue Amount" := ServLedgEntryByCostType.Sum_Total_Revenue_LCY;
        TmpSCControlByPeriodDetail.INSERT;
      END;
      ServLedgEntryByCostType.CLOSE;

      IF TmpSCControlByPeriodDetail.ISEMPTY THEN
        EXIT;

      TmpSCControlByPeriodDetail.FINDSET;
      REPEAT
        TmpSCControlByPeriodDetail."Revenue Amount" := ROUND(TmpSCControlByPeriodDetail."Revenue Amount" * PercentageShareCalls / 100);
        TmpSCControlByPeriodDetail.MODIFY;
      UNTIL TmpSCControlByPeriodDetail.NEXT = 0;

      TmpSCControlByPeriodDetail.SETRANGE("Revenue Amount", 0);
      TmpSCControlByPeriodDetail.DELETEALL;
      TmpSCControlByPeriodDetail.RESET;
    END;

    LOCAL PROCEDURE ProcessHourAccountingSurcharge@1100529615(ServiceContractNo@1100529603 : Code[20];TmpServiceControlPeriod@1100529602 : TEMPORARY Record 11071755);
    VAR
      HourAccountingSurcharge@1100529600 : Query 11012817;
    BEGIN
      HourAccountingSurcharge.SETRANGE(Service_Contract_No, ServiceContractNo);
      IF TmpServiceControlPeriod.Code <> '' THEN
        HourAccountingSurcharge.SETRANGE(Service_Control_Period_Date, TmpServiceControlPeriod."Starting Date", TmpServiceControlPeriod."Ending Date");
      HourAccountingSurcharge.OPEN;
      WHILE HourAccountingSurcharge.READ DO BEGIN
        TmpSCControlByPeriodDetail.INIT;
        TmpSCControlByPeriodDetail."Entry No." += 1;
        TmpSCControlByPeriodDetail."Service Contract No." := ServiceContractNo;
        TmpSCControlByPeriodDetail."Service Order No." := HourAccountingSurcharge.Service_Order_No;
        TmpSCControlByPeriodDetail."Cost Type" := HourAccountingSurcharge.Cost_Type;
        TmpSCControlByPeriodDetail."Cost Object" := HourAccountingSurcharge.Cost_Object;
        TmpSCControlByPeriodDetail."Open Ovh. Surch. (Hours)" := HourAccountingSurcharge.Sum_Overhead_Surcharge_Service;
        TmpSCControlByPeriodDetail.INSERT;
      END;
      HourAccountingSurcharge.CLOSE;
    END;

    LOCAL PROCEDURE CalcSumsSCControlByPeriodDetail@1100529617(CostType@1100529600 : Integer;VAR SourceSCControlbyPeriodDetail@1100529601 : Record 11072552);
    BEGIN
      IF CostType = SourceSCControlbyPeriodDetail."Cost Type"::Revenue THEN
        SourceSCControlbyPeriodDetail.CALCSUMS("Total Budget Revenue")
      ELSE BEGIN
        SourceSCControlbyPeriodDetail.CALCSUMS("Budget Cost", "Allowed Cost", "Actual Cost", Purchase,
                                            "Open (Purchase)", "Open Ovh. Surch. Soft (Purch.)",
                                            "Received/Not Invoiced", "Open Ovh. Surch. Firm (Purch.)",
                                            "Open (Inventory)", "Open Ovh. Surch. (Inventory)",
                                            "Open Ovh. Surch. (Hours)");
        IF CostType <> SourceSCControlbyPeriodDetail."Cost Type"::Material THEN
          SourceSCControlbyPeriodDetail.CALCSUMS("Open Amount (Hours)", "Open Hours", "Total Hours (Additional)");
        IF CostType = SourceSCControlbyPeriodDetail."Cost Type"::Labor THEN
          SourceSCControlbyPeriodDetail.CALCSUMS("Budget Hours", "Allowed Hours", "Actual Hours");
      END;
      SourceSCControlbyPeriodDetail.CALCSUMS("Revenue Amount", "Revenue Amount (Additional)");
    END;

    LOCAL PROCEDURE CopyValuesSCControlByPeriodDetail@1100529616(SourceSCControlbyPeriodDetail@1100529600 : Record 11072552;VAR NewSCControlbyPeriodDetail@1100529601 : Record 11072552;CopyCostObject@1100529602 : Boolean);
    BEGIN
      IF CopyCostObject THEN BEGIN
        NewSCControlbyPeriodDetail."Cost Type" := SourceSCControlbyPeriodDetail."Cost Type";
        NewSCControlbyPeriodDetail."Cost Object" := SourceSCControlbyPeriodDetail."Cost Object";
      END;

      IF NewSCControlbyPeriodDetail."Cost Type" = NewSCControlbyPeriodDetail."Cost Type"::Revenue THEN
        NewSCControlbyPeriodDetail."Total Budget Revenue" := SourceSCControlbyPeriodDetail."Total Budget Revenue"
      ELSE BEGIN
        NewSCControlbyPeriodDetail."Budget Cost" := SourceSCControlbyPeriodDetail."Budget Cost";
        NewSCControlbyPeriodDetail."Open (Purchase)" := SourceSCControlbyPeriodDetail."Open (Purchase)";
        NewSCControlbyPeriodDetail."Received/Not Invoiced" := SourceSCControlbyPeriodDetail."Received/Not Invoiced";
        NewSCControlbyPeriodDetail.Purchase := SourceSCControlbyPeriodDetail.Purchase;
        NewSCControlbyPeriodDetail."Actual Cost" := SourceSCControlbyPeriodDetail."Actual Cost";
        NewSCControlbyPeriodDetail."Total Cost" := SourceSCControlbyPeriodDetail."Total Cost";
        NewSCControlbyPeriodDetail."Allowed Cost" := SourceSCControlbyPeriodDetail."Allowed Cost";
        NewSCControlbyPeriodDetail.Result := SourceSCControlbyPeriodDetail.Result;
        NewSCControlbyPeriodDetail."Open Ovh. Surch. Soft (Purch.)" := SourceSCControlbyPeriodDetail."Open Ovh. Surch. Soft (Purch.)";
        NewSCControlbyPeriodDetail."Open Ovh. Surch. Firm (Purch.)" := SourceSCControlbyPeriodDetail."Open Ovh. Surch. Firm (Purch.)";
        NewSCControlbyPeriodDetail."Open (Inventory)" := SourceSCControlbyPeriodDetail."Open (Inventory)";
        NewSCControlbyPeriodDetail."Open Ovh. Surch. (Inventory)" := SourceSCControlbyPeriodDetail."Open Ovh. Surch. (Inventory)";
        NewSCControlbyPeriodDetail."Open Ovh. Surch. (Hours)" := SourceSCControlbyPeriodDetail."Open Ovh. Surch. (Hours)";
        IF NewSCControlbyPeriodDetail."Cost Type" <> NewSCControlbyPeriodDetail."Cost Type"::Material THEN BEGIN
          NewSCControlbyPeriodDetail."Open Amount (Hours)" := SourceSCControlbyPeriodDetail."Open Amount (Hours)";
          NewSCControlbyPeriodDetail."Open Hours" := SourceSCControlbyPeriodDetail."Open Hours";
          NewSCControlbyPeriodDetail."Total Hours (Additional)" := SourceSCControlbyPeriodDetail."Total Hours (Additional)";
        END;
        IF NewSCControlbyPeriodDetail."Cost Type" = NewSCControlbyPeriodDetail."Cost Type"::Labor THEN BEGIN
          NewSCControlbyPeriodDetail."Budget Hours" := SourceSCControlbyPeriodDetail."Budget Hours";
          NewSCControlbyPeriodDetail."Actual Hours" := SourceSCControlbyPeriodDetail."Actual Hours";
          NewSCControlbyPeriodDetail."Allowed Hours" := SourceSCControlbyPeriodDetail."Allowed Hours";
          NewSCControlbyPeriodDetail."Total Hours" := SourceSCControlbyPeriodDetail."Total Hours";
          NewSCControlbyPeriodDetail."Result Hours" := SourceSCControlbyPeriodDetail."Result Hours";
        END;
      END;
      NewSCControlbyPeriodDetail."Revenue Amount" := SourceSCControlbyPeriodDetail."Revenue Amount";
      NewSCControlbyPeriodDetail."Revenue Amount (Additional)" := SourceSCControlbyPeriodDetail."Revenue Amount (Additional)";
    END;

    LOCAL PROCEDURE ProcessTmpSCControlByPeriodDetail@1100529605(SCControlByPeriod@1100529600 : Record 11072311);
    VAR
      SCControlbyPeriodDetail@1100529601 : Record 11072552;
    BEGIN
      IF SCControlByPeriod."Line Type" <> SCControlByPeriod."Line Type"::"Service Order" THEN
        EXIT;

      IF SCControlByPeriod."Service Order No." <> '' THEN BEGIN
        IF SCControlByPeriod."Zero Line" THEN BEGIN
          InsertZeroSCControlByPeriodTotalsCostTypeLevel(SCControlByPeriod);
          EXIT;
        END;

        TmpSCControlByPeriodDetail.RESET;

        IF SCControlByPeriod."Budget Revenue (Order)" <> 0 THEN BEGIN
          IF TmpSCControlByPeriodDetail.FINDLAST THEN;
          TmpSCControlByPeriodDetail.INIT;
          TmpSCControlByPeriodDetail."Entry No." += 1;
          TmpSCControlByPeriodDetail."Service Contract No." := SCControlByPeriod."Service Contract No.";
          TmpSCControlByPeriodDetail."Service Order No." := SCControlByPeriod."Service Order No.";
          TmpSCControlByPeriodDetail."Cost Type" := TmpSCControlByPeriodDetail."Cost Type"::Revenue;
          TmpSCControlByPeriodDetail."Cost Object" := ServiceSetup."Cost Object Revenues";
          TmpSCControlByPeriodDetail."Total Budget Revenue" := SCControlByPeriod."Budget Revenue (Order)";
          TmpSCControlByPeriodDetail.INSERT;
        END;

        TmpSCControlByPeriodDetail.SETRANGE("Service Contract No.", SCControlByPeriod."Service Contract No.");
        TmpSCControlByPeriodDetail.SETRANGE("Service Order No.", SCControlByPeriod."Service Order No.");

        IF NOT TmpSCControlByPeriodDetail.ISEMPTY THEN BEGIN
          TmpSCControlByPeriodDetail.SETCURRENTKEY("Cost Type", "Cost Object", "Service Contract No.", "Control Period Code",
                                                   "Service Category", "Source Type", "Line Type");
          TmpSCControlByPeriodDetail.FINDSET;
          REPEAT
            TmpSCControlByPeriodDetail.SETRANGE("Cost Type", TmpSCControlByPeriodDetail."Cost Type");
            TmpSCControlByPeriodDetail.SETRANGE("Cost Object", TmpSCControlByPeriodDetail."Cost Object");

            CalcSumsSCControlByPeriodDetail(TmpSCControlByPeriodDetail."Cost Type", TmpSCControlByPeriodDetail);
            SCControlbyPeriodDetail.InitValuesFromSCControlByPeriod(SCControlByPeriod);
            CopyValuesSCControlByPeriodDetail(TmpSCControlByPeriodDetail, SCControlbyPeriodDetail, TRUE);
            SCControlbyPeriodDetail.INSERT(TRUE);

            TmpSCControlByPeriodDetail.FINDLAST;
            TmpSCControlByPeriodDetail.SETRANGE("Cost Type");
            TmpSCControlByPeriodDetail.SETRANGE("Cost Object");
          UNTIL TmpSCControlByPeriodDetail.NEXT = 0;
        END;
        UpdateSCControlByPeriodTotalsCostTypeLevel(SCControlByPeriod);
      END ELSE
        IF SCControlByPeriod."Budget Revenue (Contract)" <> 0 THEN BEGIN
          IF NOT SCControlbyPeriodDetail.GET(SCControlByPeriod."Entry No.", SCControlbyPeriodDetail."Cost Type"::Revenue, ServiceSetup."Cost Object Revenues") THEN BEGIN
            SCControlbyPeriodDetail.InitValuesFromSCControlByPeriod(SCControlByPeriod);
            SCControlbyPeriodDetail."Cost Type" := SCControlbyPeriodDetail."Cost Type"::Revenue;
            SCControlbyPeriodDetail."Cost Object" := ServiceSetup."Cost Object Revenues";
            SCControlbyPeriodDetail.INSERT(TRUE);
          END;
          SCControlbyPeriodDetail."Total Budget Revenue" += SCControlByPeriod."Budget Revenue (Contract)";
          SCControlbyPeriodDetail.MODIFY(TRUE);
        END;
    END;

    LOCAL PROCEDURE CalcAmountLevelLinesTotals@1100529614(ServiceContract@1100529602 : Record 11012812;SCControlbyPeriod@1100525000 : Record 11072311);
    VAR
      ServiceOrderSCControlbyPeriodDetail@1100529604 : Record 11072552;
      AmountLevelSCControlbyPeriodDetail@1100529603 : Record 11072552;
    BEGIN
      IF (ServiceContract."No. Series" <> '') AND (SCControlbyPeriod."Service Category" <> '') AND
         ((ServiceContract."Budget Based on" = ServiceContract."Budget Based on"::Category) OR
         ((SCControlbyPeriod."Source Type" <> SCControlbyPeriod."Source Type"::Contract) AND
         (ServiceContract."Budget Based on" = ServiceContract."Budget Based on"::"Category + Maintenance Scheme")))
      THEN BEGIN
        ServiceOrderSCControlbyPeriodDetail.SETRANGE("Service Contract No.", SCControlbyPeriod."Service Contract No.");
        ServiceOrderSCControlbyPeriodDetail.SETRANGE("Control Period Code", SCControlbyPeriod."Control Period Code");
        ServiceOrderSCControlbyPeriodDetail.SETRANGE("Service Category", SCControlbyPeriod."Service Category");
        ServiceOrderSCControlbyPeriodDetail.SETRANGE("Line Type", ServiceOrderSCControlbyPeriodDetail."Line Type"::"Service Order");
        ServiceOrderSCControlbyPeriodDetail.SETFILTER("Service Order No.", '<>%1', '');
        ServiceOrderSCControlbyPeriodDetail.SETFILTER("Cost Object", '<>%1', '');
        ServiceOrderSCControlbyPeriodDetail.SETRANGE("Source Type", SCControlbyPeriod."Source Type");
        IF NOT ServiceOrderSCControlbyPeriodDetail.ISEMPTY THEN BEGIN
          ServiceOrderSCControlbyPeriodDetail.FINDSET;
          REPEAT
            IF (ServiceOrderSCControlbyPeriodDetail."Budget Cost" <> 0) OR
               (ServiceOrderSCControlbyPeriodDetail."Budget Hours" <> 0) OR
               (ServiceOrderSCControlbyPeriodDetail."Total Budget Revenue" <> 0)
            THEN
              IF AmountLevelSCControlbyPeriodDetail.GET(SCControlbyPeriod."Entry No.",
                                                        ServiceOrderSCControlbyPeriodDetail."Cost Type",
                                                        ServiceOrderSCControlbyPeriodDetail."Cost Object")
              THEN BEGIN
                AmountLevelSCControlbyPeriodDetail."Budget Cost" -= ServiceOrderSCControlbyPeriodDetail."Budget Cost";
                IF AmountLevelSCControlbyPeriodDetail."Budget Cost" < 0 THEN
                  AmountLevelSCControlbyPeriodDetail."Budget Cost" := 0;
                AmountLevelSCControlbyPeriodDetail."Budget Hours" -= ServiceOrderSCControlbyPeriodDetail."Budget Hours";
                IF AmountLevelSCControlbyPeriodDetail."Budget Hours" < 0 THEN
                  AmountLevelSCControlbyPeriodDetail."Budget Hours" := 0;
                AmountLevelSCControlbyPeriodDetail."Total Budget Revenue" -= ServiceOrderSCControlbyPeriodDetail."Total Budget Revenue";
                IF AmountLevelSCControlbyPeriodDetail."Total Budget Revenue" < 0 THEN
                  AmountLevelSCControlbyPeriodDetail."Total Budget Revenue" := 0;

                AmountLevelSCControlbyPeriodDetail.MODIFY(TRUE);
              END ELSE
                IF (ServiceOrderSCControlbyPeriodDetail."Budget Cost" < 0) OR
                   (ServiceOrderSCControlbyPeriodDetail."Budget Hours" < 0) OR
                   (ServiceOrderSCControlbyPeriodDetail."Total Budget Revenue" < 0)
                THEN BEGIN
                  AmountLevelSCControlbyPeriodDetail.InitValuesFromSCControlByPeriod(SCControlbyPeriod);
                  AmountLevelSCControlbyPeriodDetail."Cost Type" := ServiceOrderSCControlbyPeriodDetail."Cost Type";
                  AmountLevelSCControlbyPeriodDetail."Cost Object" := ServiceOrderSCControlbyPeriodDetail."Cost Object";
                  IF ServiceOrderSCControlbyPeriodDetail."Budget Cost" < 0 THEN
                    AmountLevelSCControlbyPeriodDetail."Budget Cost" := -ServiceOrderSCControlbyPeriodDetail."Budget Cost";
                  IF ServiceOrderSCControlbyPeriodDetail."Budget Hours" < 0 THEN
                    AmountLevelSCControlbyPeriodDetail."Budget Hours" := -ServiceOrderSCControlbyPeriodDetail."Budget Hours";
                  IF ServiceOrderSCControlbyPeriodDetail."Total Budget Revenue" < 0 THEN
                    AmountLevelSCControlbyPeriodDetail."Total Budget Revenue" := -ServiceOrderSCControlbyPeriodDetail."Total Budget Revenue";
                  AmountLevelSCControlbyPeriodDetail.INSERT(TRUE);
                END;
          UNTIL ServiceOrderSCControlbyPeriodDetail.NEXT = 0;
        END;
      END;

      UpdateSCControlByPeriodTotalsCostTypeLevel(SCControlbyPeriod);
    END;

    LOCAL PROCEDURE UpdateSCControlByPeriodTotalsCostTypeLevel@1100529623(SCControlByPeriod@1100529600 : Record 11072311);
    VAR
      NewSCControlbyPeriodDetail@1100529601 : Record 11072552;
      SCControlbyPeriodCostType@1100525000 : Query 11012815;
    BEGIN
      IF SCControlByPeriod."Line Type" <> SCControlByPeriod."Line Type"::"Service Order" THEN
        EXIT;

      SCControlbyPeriodCostType.SETRANGE(Service_Contract_No, SCControlByPeriod."Service Contract No.");
      SCControlbyPeriodCostType.SETRANGE(Control_Period_Code, SCControlByPeriod."Control Period Code");
      SCControlbyPeriodCostType.SETRANGE(Service_Category, SCControlByPeriod."Service Category");
      SCControlbyPeriodCostType.SETRANGE(Source_Type, SCControlByPeriod."Source Type");
      SCControlbyPeriodCostType.SETRANGE(Service_Order_No, SCControlByPeriod."Service Order No.");
      SCControlbyPeriodCostType.SETRANGE(Line_Type, SCControlByPeriod."Line Type"::"Service Order");

      SCControlbyPeriodCostType.OPEN;
      WHILE SCControlbyPeriodCostType.READ DO BEGIN
        IF NOT NewSCControlbyPeriodDetail.GET(SCControlByPeriod."Entry No.", SCControlbyPeriodCostType.Cost_Type, '') THEN BEGIN
          NewSCControlbyPeriodDetail.InitValuesFromSCControlByPeriod(SCControlByPeriod);
          NewSCControlbyPeriodDetail."Cost Type" := SCControlbyPeriodCostType.Cost_Type;
          NewSCControlbyPeriodDetail."Cost Object" := '';
          NewSCControlbyPeriodDetail.INSERT(TRUE);
        END;

        IF NewSCControlbyPeriodDetail."Cost Type" = NewSCControlbyPeriodDetail."Cost Type"::Revenue THEN
          NewSCControlbyPeriodDetail."Total Budget Revenue" := SCControlbyPeriodCostType.Sum_Total_Budget_Revenue
        ELSE BEGIN
          NewSCControlbyPeriodDetail."Budget Cost" := SCControlbyPeriodCostType.Sum_Budget_Cost;
          NewSCControlbyPeriodDetail."Open (Purchase)" := SCControlbyPeriodCostType.Sum_Open_Purchase;
          NewSCControlbyPeriodDetail."Received/Not Invoiced" := SCControlbyPeriodCostType.Sum_Received_Not_Invoiced;
          NewSCControlbyPeriodDetail.Purchase := SCControlbyPeriodCostType.Sum_Purchase;
          NewSCControlbyPeriodDetail."Actual Cost" := SCControlbyPeriodCostType.Sum_Actual_Cost;
          NewSCControlbyPeriodDetail."Allowed Cost" := SCControlbyPeriodCostType.Sum_Allowed_Cost;
          NewSCControlbyPeriodDetail."Open Ovh. Surch. Soft (Purch.)" := SCControlbyPeriodCostType.Sum_Open_Ovh_Surch_Soft_Purch;
          NewSCControlbyPeriodDetail."Open Ovh. Surch. Firm (Purch.)" := SCControlbyPeriodCostType.Sum_Open_Ovh_Surch_Firm_Purch;
          NewSCControlbyPeriodDetail."Open (Inventory)" := SCControlbyPeriodCostType.Sum_Open_Inventory;
          NewSCControlbyPeriodDetail."Open Ovh. Surch. (Inventory)" := SCControlbyPeriodCostType.Sum_Open_Ovh_Surch_Inventory;
          NewSCControlbyPeriodDetail."Open Ovh. Surch. (Hours)" := SCControlbyPeriodCostType.Sum_Open_Ovh_Surch_Hours;
          IF NewSCControlbyPeriodDetail."Cost Type" <> NewSCControlbyPeriodDetail."Cost Type"::Material THEN BEGIN
            NewSCControlbyPeriodDetail."Open Amount (Hours)" := SCControlbyPeriodCostType.Sum_Open_Amount_Hours;
            NewSCControlbyPeriodDetail."Open Hours" := SCControlbyPeriodCostType.Sum_Open_Hours;
            NewSCControlbyPeriodDetail."Total Hours (Additional)" := SCControlbyPeriodCostType.Sum_Total_Hours_Additional;
          END;
          IF NewSCControlbyPeriodDetail."Cost Type" = NewSCControlbyPeriodDetail."Cost Type"::Labor THEN BEGIN
            NewSCControlbyPeriodDetail."Budget Hours" := SCControlbyPeriodCostType.Sum_Budget_Hours;
            NewSCControlbyPeriodDetail."Actual Hours" := SCControlbyPeriodCostType.Sum_Actual_Hours;
            NewSCControlbyPeriodDetail."Allowed Hours" := SCControlbyPeriodCostType.Sum_Allowed_Hours;
          END;
        END;
        NewSCControlbyPeriodDetail."Revenue Amount" := SCControlbyPeriodCostType.Sum_Revenue_Amount;
        NewSCControlbyPeriodDetail."Revenue Amount (Additional)" := SCControlbyPeriodCostType.Sum_Revenue_Amount_Additional;
        NewSCControlbyPeriodDetail.MODIFY(TRUE);
      END;
      SCControlbyPeriodCostType.CLOSE;
    END;

    LOCAL PROCEDURE GetSCControlByPeriodTotalsForUpperLevels@1100529606(TmpServiceContract@1100529603 : TEMPORARY Record 11012812;SCControlbyPeriod@1100529602 : Record 11072311);
    VAR
      NewSCControlbyPeriodDetail@1100529601 : Record 11072552;
      SCControlbyPeriodCostObject@1100529600 : Query 11012816;
    BEGIN
      IF SCControlbyPeriod."Zero Line" THEN BEGIN
        InsertZeroSCControlByPeriodTotalsCostTypeLevel(SCControlbyPeriod);
        EXIT;
      END;

      IF SCControlbyPeriod."Line Type" = SCControlbyPeriod."Line Type"::"Service Order" THEN BEGIN
        CalcAmountLevelLinesTotals(TmpServiceContract, SCControlbyPeriod);
        EXIT;
      END;

      SCControlbyPeriodCostObject.SETRANGE(Service_Contract_No, SCControlbyPeriod."Service Contract No.");
      SCControlbyPeriodCostObject.SETRANGE(Control_Period_Code, SCControlbyPeriod."Control Period Code");
      CASE SCControlbyPeriod."Line Type" OF
        SCControlbyPeriod."Line Type"::"Source Type":
          BEGIN
            SCControlbyPeriodCostObject.SETRANGE(Service_Category, SCControlbyPeriod."Service Category");
            SCControlbyPeriodCostObject.SETRANGE(Source_Type, SCControlbyPeriod."Source Type");
            SCControlbyPeriodCostObject.SETRANGE(Line_Type, SCControlbyPeriod."Line Type"::"Service Order");
          END;
        SCControlbyPeriod."Line Type"::"Service Category":
          BEGIN
            SCControlbyPeriodCostObject.SETRANGE(Service_Category, SCControlbyPeriod."Service Category");
            SCControlbyPeriodCostObject.SETRANGE(Line_Type, SCControlbyPeriod."Line Type"::"Source Type");
          END;
        SCControlbyPeriod."Line Type"::Period:
          IF TmpServiceContract."Budget Based on" = TmpServiceContract."Budget Based on"::"Maintenance Scheme" THEN
            SCControlbyPeriodCostObject.SETRANGE(Line_Type, SCControlbyPeriod."Line Type"::"Source Type")
          ELSE
            SCControlbyPeriodCostObject.SETRANGE(Line_Type, SCControlbyPeriod."Line Type"::"Service Category");
      END;

      SCControlbyPeriodCostObject.OPEN;
      WHILE SCControlbyPeriodCostObject.READ DO BEGIN
        NewSCControlbyPeriodDetail.InitValuesFromSCControlByPeriod(SCControlbyPeriod);
        NewSCControlbyPeriodDetail."Cost Type" := SCControlbyPeriodCostObject.Cost_Type;
        NewSCControlbyPeriodDetail."Cost Object" := SCControlbyPeriodCostObject.Cost_Object;

        IF NewSCControlbyPeriodDetail."Cost Type" = NewSCControlbyPeriodDetail."Cost Type"::Revenue THEN
          NewSCControlbyPeriodDetail."Total Budget Revenue" := SCControlbyPeriodCostObject.Sum_Total_Budget_Revenue
        ELSE BEGIN
          NewSCControlbyPeriodDetail."Budget Cost" := SCControlbyPeriodCostObject.Sum_Budget_Cost;
          NewSCControlbyPeriodDetail."Open (Purchase)" := SCControlbyPeriodCostObject.Sum_Open_Purchase;
          NewSCControlbyPeriodDetail."Received/Not Invoiced" := SCControlbyPeriodCostObject.Sum_Received_Not_Invoiced;
          NewSCControlbyPeriodDetail.Purchase := SCControlbyPeriodCostObject.Sum_Purchase;
          NewSCControlbyPeriodDetail."Actual Cost" := SCControlbyPeriodCostObject.Sum_Actual_Cost;
          NewSCControlbyPeriodDetail."Allowed Cost" := SCControlbyPeriodCostObject.Sum_Allowed_Cost;
          NewSCControlbyPeriodDetail."Total Cost" := SCControlbyPeriodCostObject.Sum_Total_Cost;
          NewSCControlbyPeriodDetail."Open Ovh. Surch. Soft (Purch.)" := SCControlbyPeriodCostObject.Sum_Open_Ovh_Surch_Soft_Purch;
          NewSCControlbyPeriodDetail."Open Ovh. Surch. Firm (Purch.)" := SCControlbyPeriodCostObject.Sum_Open_Ovh_Surch_Firm_Purch;
          NewSCControlbyPeriodDetail."Open (Inventory)" := SCControlbyPeriodCostObject.Sum_Open_Inventory;
          NewSCControlbyPeriodDetail."Open Ovh. Surch. (Inventory)" := SCControlbyPeriodCostObject.Sum_Open_Ovh_Surch_Inventory;
          NewSCControlbyPeriodDetail.Result := SCControlbyPeriodCostObject.Sum_Result;
          NewSCControlbyPeriodDetail."Open Ovh. Surch. (Hours)" := SCControlbyPeriodCostObject.Sum_Open_Ovh_Surch_Hours;
          IF NewSCControlbyPeriodDetail."Cost Type" <> NewSCControlbyPeriodDetail."Cost Type"::Material THEN BEGIN
            NewSCControlbyPeriodDetail."Open Amount (Hours)" := SCControlbyPeriodCostObject.Sum_Open_Amount_Hours;
            NewSCControlbyPeriodDetail."Open Hours" := SCControlbyPeriodCostObject.Sum_Open_Hours;
            NewSCControlbyPeriodDetail."Total Hours (Additional)" := SCControlbyPeriodCostObject.Sum_Total_Hours_Additional;
          END;
          IF NewSCControlbyPeriodDetail."Cost Type" = NewSCControlbyPeriodDetail."Cost Type"::Labor THEN BEGIN
            NewSCControlbyPeriodDetail."Budget Hours" := SCControlbyPeriodCostObject.Sum_Budget_Hours;
            NewSCControlbyPeriodDetail."Actual Hours" := SCControlbyPeriodCostObject.Sum_Actual_Hours;
            NewSCControlbyPeriodDetail."Allowed Hours" := SCControlbyPeriodCostObject.Sum_Allowed_Hours;
            NewSCControlbyPeriodDetail."Total Hours" := SCControlbyPeriodCostObject.Sum_Total_Hours;
            NewSCControlbyPeriodDetail."Result Hours" := SCControlbyPeriodCostObject.Sum_Result_Hours;
          END;
        END;
        NewSCControlbyPeriodDetail."Revenue Amount" := SCControlbyPeriodCostObject.Sum_Revenue_Amount;
        NewSCControlbyPeriodDetail."Revenue Amount (Additional)" := SCControlbyPeriodCostObject.Sum_Revenue_Amount_Additional;

        NewSCControlbyPeriodDetail.GetPrognosisData(SCControlbyPeriod, NewSCControlbyPeriodDetail);
        NewSCControlbyPeriodDetail.INSERT(TRUE);
      END;
      SCControlbyPeriodCostObject.CLOSE;
    END;

    LOCAL PROCEDURE InsertZeroSCControlByPeriodTotalsCostTypeLevel@1100525003(SCControlByPeriod@1100529600 : Record 11072311);
    VAR
      NewSCControlbyPeriodDetail@1100529601 : Record 11072552;
      CostType@1100529602 : Integer;
    BEGIN
      FOR CostType := 0 TO 5 DO
        IF NOT NewSCControlbyPeriodDetail.GET(SCControlByPeriod."Entry No.", CostType, '') THEN BEGIN
          NewSCControlbyPeriodDetail.InitValuesFromSCControlByPeriod(SCControlByPeriod);
          NewSCControlbyPeriodDetail."Cost Type" := CostType;
          NewSCControlbyPeriodDetail."Cost Object" := '';
          NewSCControlbyPeriodDetail.INSERT(TRUE);
        END;
    END;

    [External]
    PROCEDURE SetServiceContractNoFilter@1100525001(NewServiceContractNoFilter@1100525000 : Text);
    BEGIN
      ServiceContractNoFilter := NewServiceContractNoFilter;
      ServiceContractNoFilterIsSet := TRUE;
    END;

    LOCAL PROCEDURE LogErrorMessage@1100530702(ServiceContractNo@1100530700 : Code[20];LastErrorText@1100530701 : Text);
    VAR
      LineNo@1100530702 : Integer;
    BEGIN
      IF LastErrorText = '' THEN
        EXIT;

      ServiceContractControlMsg.SETRANGE("Service Contract No.", ServiceContractNo);
      IF ServiceContractControlMsg.FINDLAST THEN
        LineNo := ServiceContractControlMsg."Line No.";
      LineNo += 10000;

      ServiceContractControlMsg.INIT;
      ServiceContractControlMsg."Service Contract No." := ServiceContractNo;
      ServiceContractControlMsg."Line No." := LineNo;
      ServiceContractControlMsg.Message := COPYSTR(LastErrorText, 1, MAXSTRLEN(ServiceContractControlMsg.Message));
      ServiceContractControlMsg.INSERT(TRUE);
      ServiceContractControlMsg.MARK(TRUE);
    END;

    BEGIN
    END.
  }
}

