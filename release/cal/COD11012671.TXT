OBJECT Codeunit 11012671 Project Invent. Delivery-Post
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 313=r,
                TableData 11012063=ri;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ProjInventDeliveryRec@11012000 : Record 11012671;
      ProjInventDeliveryRec3@1210190000 : Record 11012671;
      ProjSetupRec@1210190010 : Record 315;
      ProjRec@1210190003 : Record 11072003;
      ItemRec@1210190004 : Record 27;
      LocRec@1210190008 : Record 14;
      BinRec@1100526200 : Record 7354;
      ShelfRec@1100485000 : Record 11020241;
      InventSetupRec@1100525007 : Record 313;
      GenJnlBatchRec@1100525005 : Record 232;
      DimValRec@1100525004 : Record 349;
      Item@1100528600 : Record 27;
      ProjInventPostLineCU@1210190005 : Codeunit 11012670;
      Text001@1210190006 : TextConst 'DEU=Es ist kein einziger Artikel oder/und keine Beschreibung fÅr Projektnr. %1, Zeilennr. %2 eingeben worden.;ENU="There is not entered any item and/or description  for Project No. %1, Line No. %2 ";NLD=Er is geen enkel artikel en/of omschrijving ingegeven voor projectnr. %1, regelnr. %2.;NOR=Ingen artikler og/eller ingen Beskrivelse er angitt for prosjekt nr %1, rad nr %2;SVE="Inga artiklar och/eller ingen beskrivning har angetts fîr projektnr %1, radnr %2 "';
      Text002@1210190007 : TextConst 'DEU=Neues Projekt, Standort und Regalnummer dÅrfen nicht dieselben Werte haben, fÅr Projektnr. %1, Zeilennr. %2.;ENU=New Project, Location and Shelf may not be equal to the old values, for Project No. %1, Line No. %2.;NLD=Nieuw project, vestiging en schapnummer mag niet gelijk zijn aan oude, voor projectnr. %1, regelnr. %2.;NOR=Nytt prosjekt, lokasjon og Hylle kan ikke vëre like med de gamle verdiene for prosjekt nr. %1, Linje nr %2.;SVE=Nytt projekt, lagerstÑlle and hylla fÜr inte vara lika med de gamla vÑrdena fîr projektnumret %1, radnr %2.';
      DimMgtCU@1100525000 : Codeunit 408;
      NSItemTrackingEntriesApply@1100528601 : Codeunit 11012352;
      GenJnlLinesCreated@1100525003 : Boolean;
      NextGenJnlLineNo@1100525001 : Integer;
      GenJnlDocNo@1100525002 : Code[20];
      Text004@1100528500 : TextConst 'DEU=%1 entspricht nicht der in der Artikelverfolgung definierten Menge.;ENU=The %1 does not match the quantity defined in item tracking for item %2.;NLD=%1 komt niet overeen met het aantal dat is gedefinieerd bij artikeltracering voor artikel %2.;NOR=%1 samsvarer ikke med antallet som er definert i varesporing.;SVE=%1 stÑmmer inte med det antal som har angetts vid artikelspÜrning.';
      ProjInventDocNo@1100525006 : Code[20];
      ProjectInventoryDeliveryTmp@1100529400 : TEMPORARY Record 11012671;
      FilterLines@1100529401 : Boolean;
      ProjInventEntryTmp@1100529720 : TEMPORARY Record 11012670;

    PROCEDURE RunWithCheck@1210190000(VAR ProjInventDeliveryRec2@1210190000 : Record 11012671;ProjInventDocNo2@1100525000 : Code[20]);
    BEGIN
      ProjInventDeliveryRec.COPY(ProjInventDeliveryRec2);
      ProjInventDocNo := ProjInventDocNo2;  //C007818.n
      Code;
      ProjInventDeliveryRec2 := ProjInventDeliveryRec;
    END;

    LOCAL PROCEDURE Code@1();
    VAR
      ProjectElement@1100525000 : Record 11012010;
      ProjectInventoryEntry2@1100529000 : Record 11012670;
    BEGIN
      GenJnlLinesCreated := FALSE;
      GenJnlDocNo := '';
      InventSetupRec.GET;

      WITH ProjInventDeliveryRec DO BEGIN
        LOCKTABLE;

        IF NOT FIND('-') THEN
          EXIT;

        REPEAT
          IF (NOT EmptyLine) AND
             ((NOT FilterLines) OR (ProjectInventoryDeliveryTmp.GET("Project No.","Line No."))) //**4PS.n BI006 KD 28-09-16
          THEN BEGIN
            TESTFIELD("Project No.");
            TESTFIELD("Posting Date");
            TESTFIELD("Location Code");
            TESTFIELD(Description);
            TESTFIELD(Quantity);
            IF ("Item No." <> '') OR ("Basic Item" <> '') OR ("Trade Item" <> '') THEN
              TESTFIELD("Unit of Measure Code");

            IF ("Item No." = '') AND ("Basic Item" = '') AND ("Trade Item" = '') AND (Description = '') THEN
              ERROR(Text001, "Project No.", "Line No.");

            ProjSetupRec.GET;
            ProjRec.GET("Project No.");

            //hbk,10-06-2010,TM4872 >>
            IF Element <> '' THEN BEGIN
              ProjectElement.GET("Project No.",Element);
              ProjectElement.TESTFIELD(Blocked,FALSE);
            //END ELSE BEGIN //call 31763
              //ProjRec.TESTFIELD("Posting Element Mandatory",FALSE);
              //IF ProjRec."Posting Element Mandatory" THEN //call 31763
              //  FIELDERROR(Element, STRSUBSTNO(Text003, FIELDCAPTION("Project No."), "Project No.")); //call 31763
            END;
            //hbk,10-06-2010,TM4872 <<

            IF ("Entry Type" = "Entry Type"::Delivery) THEN BEGIN
              IF (ProjSetupRec."Provisions at Closure") THEN
                ProjRec.CheckProjectStatus(-1)
              ELSE
                ProjRec.CheckProjectStatus(1);
            END;

            IF ("Item No." <> '') THEN
               ItemRec.GET("Item No.")
            ELSE BEGIN
              IF ("Basic Item" <> '') THEN
                TESTFIELD(Manufacturer);
              IF ("Trade Item" <> '') THEN
                TESTFIELD("Vendor (Trade Item)");
            END;

            LocRec.GET("Location Code");
            IF (ProjRec."Job Inventory Location/Shelf") AND //kzwerver, 110614, c, #26823
               ("Shelf No." <> '')
            THEN
              ShelfRec.GET("Location Code", "Shelf No.");

            IF ("Entry Type" = "Entry Type"::Delivery) THEN BEGIN
              IF Deliver = Deliver::" " THEN
                TESTFIELD("Ship To Location", '')
              ELSE
                TESTFIELD("Ship To Location");
            END ELSE BEGIN
              TESTFIELD(Deliver, Deliver::" ");
              TESTFIELD("Ship To Location", '');
            END;

            CheckProjectInventory(ProjInventDeliveryRec);
            IF ("Entry Type" = "Entry Type"::"Positive Adjmt.") THEN  //For this type checks not done in 'CheckProjectInventory'
              ProjectInventoryEntry2.CheckDetailNoPrjInventDelivery(ProjInventDeliveryRec);

            IF ("Entry Type" = "Entry Type"::Transfer) THEN BEGIN
              TESTFIELD("New Project No.");
              TESTFIELD("New Location Code");

              //hbk,10-06-10,TM4873 >>
              //NewProject.GET("New Project No."); //call 31763
              //IF NewProject."Posting Element Mandatory" AND ("New Element" = '') THEN //call 31763
              //  FIELDERROR("New Element", STRSUBSTNO(Text003, FIELDCAPTION("New Project No."), "New Project No.")); //call 31763
              //hbk,10-06-10,TM4873 <<

              IF ("New Project No." = "Project No.") AND
                 ("New Location Code" = "Location Code") AND
                 ("New Bin Code" = "Bin Code") AND  //db, 02-11-10
                 ("New Shelf No." = "Shelf No.") AND
                 ("New Element" = Element) AND
                 ("New Extension Contract" = "Extension Contract") AND
                 ("New Plot No." = "Plot No.")
              THEN
                ERROR(Text002, "Project No.", "Line No.");

              LocRec.GET("New Location Code");
              IF ("New Bin Code" <> '') THEN
                BinRec.GET("New Location Code", "New Bin Code");  //db, 02-11-10
              IF ("New Shelf No." <> '') THEN
                ShelfRec.GET("New Location Code", "New Shelf No.");
            END;

            IF InventSetupRec."Ledg. Entries Job Inv Transfer" AND
               //(("Entry Type" = "Entry Type"::Transfer) AND ("New Project No." <> "Project No."))  //*22580.o
               (("Entry Type" = "Entry Type"::Transfer) AND
               (("New Project No." <> "Project No.") OR (Element <> "New Element") OR //*22580.n
               ("New Extension Contract" <> "Extension Contract") OR ("New Plot No." <> "Plot No.")))
            THEN
              InsertGenJnlLine();

            ProjInventDeliveryRec.GetProjectInventory(ProjInventDeliveryRec, ProjInventEntryTmp); //**4PS.n BI006 KD 15-12-16

            CASE "Entry Type" OF
              "Entry Type"::Transfer:
                BEGIN
                  PostProjInventory('OLD', -1);
                  PostProjInventory('NEW', 1);
                  IF ("Create Advice Order") AND ("New Project No." <> "Project No.") THEN
                    CreateAdviceOrderLineProjFrom();
                END;
              "Entry Type"::"Positive Adjmt.":
                PostProjInventory('', 1)
              ELSE
                PostProjInventory('', -1);
            END;
            PostItemTracking(ProjInventDeliveryRec); //DP00121
          END;
        UNTIL NEXT = 0;

        IF GenJnlLinesCreated THEN
          PostGenJnlLines();

        // Delete lines
        ProjInventDeliveryRec3.COPY(ProjInventDeliveryRec);
        IF ProjInventDeliveryRec3.FIND('-') THEN BEGIN
          REPEAT
            IF (ProjInventDeliveryRec3."Entry Type" = ProjInventDeliveryRec3."Entry Type"::Delivery) THEN BEGIN
              ProjInventDeliveryRec3.CALCFIELDS("Inventory Quantity");
              IF (ProjInventDeliveryRec3."Inventory Quantity" <= 0) THEN
                ProjInventDeliveryRec3.DELETE
              ELSE BEGIN
                IF (ProjInventDeliveryRec3.Quantity <> 0) THEN BEGIN
                  ProjInventDeliveryRec3.Quantity := 0;
                  ProjInventDeliveryRec3.MODIFY;
                END;
              END;
            END ELSE
              ProjInventDeliveryRec3.DELETE;
          UNTIL ProjInventDeliveryRec3.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE PostProjInventory@1210190006(IMode@1210190001 : Code[10];IFactor@1210190002 : Integer);
    VAR
      lvProjInventEntry@1100529720 : Record 11012670;
    BEGIN
      //**4PS.n
      WITH lvProjInventEntry DO BEGIN
        //**4PS.sn BI006 KD 15-12-16
        IF ProjInventEntryTmp.FINDSET THEN
          REPEAT
        //**4PS.en BI006 KD 15-12-16
            INIT;
            "Document Date" := ProjInventDeliveryRec."Posting Date";
            //"Document No." := '';  //C007818.o
            "Document No." := ProjInventDocNo;  //C007818.n
            "Posting Date" := ProjInventDeliveryRec."Posting Date";
            "Project No." := ProjInventDeliveryRec."Project No.";
            "Item No." := ProjInventDeliveryRec."Item No.";
            //IF ("Item No." = '') THEN BEGIN   //C025612.o
              Manufacturer := ProjInventDeliveryRec.Manufacturer;
              "Basic Item" := ProjInventDeliveryRec."Basic Item";
              "Vendor (Trade Item)" := ProjInventDeliveryRec."Vendor (Trade Item)";
              "Trade Item" := ProjInventDeliveryRec."Trade Item";
            //END;   //C025612.o
            Description := ProjInventDeliveryRec.Description;
            "Description 2" := ProjInventDeliveryRec."Description 2";
            "Location Code" := ProjInventDeliveryRec."Location Code";
            "Bin Code" := ProjInventDeliveryRec."Bin Code";  //db, 02-11-10
            "Shelf No." := ProjInventDeliveryRec."Shelf No.";  //db, 29-08-05
            // Quantity := ProjInventDeliveryRec.Quantity * IFactor; //**4PS.o BI006 KD 15-12-16
            Quantity := ProjInventEntryTmp.Quantity * IFactor; //**4PS.n BI006 KD 15-12-16
            "Unit of Measure Code" := ProjInventDeliveryRec."Unit of Measure Code";
            // "Receipt Line No." := 0; //**4PS.o BI006 KD 27-10-16
            //**4PS.sn BI006 KD 27-10-16
            "Receipt No." := ProjInventEntryTmp."Receipt No.";
            "Receipt Line No." := ProjInventEntryTmp."Receipt Line No.";
            //**4PS.en BI006 KD 27-10-16

            CASE ProjInventDeliveryRec."Entry Type" OF
              ProjInventDeliveryRec."Entry Type"::Delivery:
               "Entry Type" := "Entry Type"::Delivery;
              ProjInventDeliveryRec."Entry Type"::"Positive Adjmt.":
               "Entry Type" := "Entry Type"::"Positive Adjmt.";
              ProjInventDeliveryRec."Entry Type"::"Negative Adjmt.":
               "Entry Type" := "Entry Type"::"Negative Adjmt.";
              ProjInventDeliveryRec."Entry Type"::Transfer:
               "Entry Type" := "Entry Type"::Transfer;
            END;
            "Employee No." := ProjInventDeliveryRec."Employee No.";
            Deliver := ProjInventDeliveryRec.Deliver;
            "Ship To Location" := ProjInventDeliveryRec."Ship To Location";
            Element  := ProjInventDeliveryRec.Element; //**4PS.n hbk,06-05-2010
            "Variant Code"  := ProjInventDeliveryRec."Variant Code";  // X0.71
            "Purch. Detail No."  := ProjInventDeliveryRec."Purch. Detail No.";  //DP00749
            "Cost Object" := ProjInventDeliveryRec."Global Dimension 2 Code";
            //DP01137.sn
            "Purchase Route Reference" := ProjInventDeliveryRec."Purchase Route Reference";
            "Purchase Requisition No." := ProjInventDeliveryRec."Purchase Requisition No.";
            "Plant Type" := ProjInventDeliveryRec."Plant Type";
            "Plant No." := ProjInventDeliveryRec."Plant No.";
            Comment := ProjInventDeliveryRec.Comment;
            "Extension Contract" := ProjInventDeliveryRec."Extension Contract";
            "Plot No." := ProjInventDeliveryRec."Plot No.";

            //DP01137.en

            IF (IMode = 'NEW') THEN BEGIN
              "Project No." := ProjInventDeliveryRec."New Project No.";
              "Location Code" := ProjInventDeliveryRec."New Location Code";
              "Bin Code" := ProjInventDeliveryRec."New Bin Code";  //db, 02-11-10
              "Shelf No." := ProjInventDeliveryRec."New Shelf No.";
              Element := ProjInventDeliveryRec."New Element"; //hbk,10-06-10,TM4873
              "Extension Contract" := ProjInventDeliveryRec."New Extension Contract";
              "Plot No." := ProjInventDeliveryRec."New Plot No.";
              "Transfer Project No." := ProjInventDeliveryRec."Project No.";
              "Transfer Location Code" := ProjInventDeliveryRec."Location Code";
              "Transfer Bin Code" := ProjInventDeliveryRec."Bin Code";  //db, 02-11-10
              "Transfer Shelf No." := ProjInventDeliveryRec."Shelf No.";
              "Transfer Element" := ProjInventDeliveryRec.Element; //hbk,10-06-10,TM4873
            END;
            IF (IMode = 'OLD') THEN BEGIN
              "Transfer Project No." := ProjInventDeliveryRec."New Project No.";
              "Transfer Location Code" := ProjInventDeliveryRec."New Location Code";
              "Transfer Bin Code" := ProjInventDeliveryRec."New Bin Code";  //db, 02-11-10
              "Transfer Shelf No." := ProjInventDeliveryRec."New Shelf No.";
              "Transfer Element" := ProjInventDeliveryRec."New Element"; //hbk,10-06-10,TM4873
            END;

            //hbk M17929 >>
            "Yard No." := ProjInventDeliveryRec."Yard No.";
            "System No." := ProjInventDeliveryRec."System No.";
            "Entity Type" := ProjInventDeliveryRec."Entity Type";
            "Entity No." := ProjInventDeliveryRec."Entity No.";
            "Assembly Yard Number Object" := ProjInventDeliveryRec."Assembly Yard Number Object";
            "Gland Position" := ProjInventDeliveryRec."Gland Position";
            //hbk M17929 <<

            //**4PS.sn
            // "Object Type Assembly" := ProjInventDeliveryRec."Object Type Assembly"; to be changed in future when object Type has changed.
            //**4PS.en

            ProjInventPostLineCU.RunWithCheck(lvProjInventEntry);
          UNTIL ProjInventEntryTmp.NEXT = 0
      END;
    END;

    PROCEDURE CreateAdviceOrderLineProjFrom@1100525000();
    VAR
      lvAdvOrderLineRec@1100525000 : Record 11012055;
      lvAdvOrderLineRec2@1100525001 : Record 11012055;
    BEGIN
      WITH lvAdvOrderLineRec DO BEGIN
        INIT;
        "Record Type" := "Record Type"::Project;
        VALIDATE("Project No.", ProjInventDeliveryRec."Project No.");
        "Service Order No." := '';
        lvAdvOrderLineRec2.SETRANGE("Record Type", "Record Type");
        lvAdvOrderLineRec2.SETRANGE("Project No.", "Project No.");
        lvAdvOrderLineRec2.SETRANGE("Service Order No.", "Service Order No.");
        IF lvAdvOrderLineRec2.FINDLAST THEN
          "Line No." := lvAdvOrderLineRec2."Line No." + 10000
        ELSE
          "Line No." := 10000;
        InitRecord();
        INSERT(TRUE);

        //DP01137.sn
        "Purchase Route Reference" := ProjInventDeliveryRec."Purchase Route Reference";
        //"Purchase Requisition No." := ProjInventDeliveryRec."Purchase Requisition No.";
        "Plant Type" := ProjInventDeliveryRec."Plant Type";
        //"Plant No." := ProjInventDeliveryRec."Plant No.";
        //Comment := ProjInventDeliveryRec.Comment;
        IF ProjInventDeliveryRec."Trade Item" <> '' THEN BEGIN
          "Vendor (Trade Item)" := ProjInventDeliveryRec."Vendor (Trade Item)";
          VALIDATE("Vendor (Trade Item)", ProjInventDeliveryRec."Vendor (Trade Item)");
        END ELSE BEGIN
          IF ProjInventDeliveryRec."Basic Item" <> '' THEN BEGIN
            Manufacturer := ProjInventDeliveryRec.Manufacturer;
            VALIDATE("Basic Item", ProjInventDeliveryRec."Basic Item");
          END ELSE BEGIN
            IF ProjInventDeliveryRec."Item No." <> '' THEN BEGIN
               VALIDATE("Item No.", ProjInventDeliveryRec."Item No.");
            END;
          END;
        END;
        //DP01137.en
        VALIDATE("Unit of Measure", ProjInventDeliveryRec."Unit of Measure Code");
        IF ProjInventDeliveryRec.Description <> '' THEN BEGIN
          Description := ProjInventDeliveryRec.Description;
          "Description 2" := ProjInventDeliveryRec."Description 2";
        END;
        //VALIDATE(Transaction, Transaction::Purchase);  //* Item used for another project because not enough, so purchase
        VALIDATE(Transaction, ProjSetupRec."Advice Order Purch.Transaction");  //* Item used for another project because not enough, so purchase
        IF ProjInventDeliveryRec."Location Code" <> '' THEN BEGIN
          "Ship To Location" := '';
          VALIDATE(Deliver, Deliver::Location);
          VALIDATE("Ship To Location", ProjInventDeliveryRec."Location Code");
        END;
        VALIDATE("Quantity (Advice)", ProjInventDeliveryRec.Quantity);
        VALIDATE(Element, ProjInventDeliveryRec.Element);  //db, 01-02-11: M24445
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE InsertGenJnlLine@1100525001();
    VAR
      lvGenJnlLineRec@1100525000 : Record 81;
      lvProjInventEntryRec@1100525001 : Record 11012670;
      lvNoSeriesMgtCU@1100525003 : Codeunit 396;
      lvPrice@1100525002 : Decimal;
    BEGIN
      WITH ProjInventDeliveryRec DO BEGIN
        IF ("Item No." = '') AND ("Basic Item" = '') AND ("Trade Item" = '') THEN
          EXIT;
        lvProjInventEntryRec."Item No." := "Item No.";
        lvProjInventEntryRec.Manufacturer := Manufacturer;
        lvProjInventEntryRec."Basic Item" := "Basic Item";
        lvProjInventEntryRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
        lvProjInventEntryRec."Trade Item" := "Trade Item";
        lvPrice := lvProjInventEntryRec.GetItemPrice();

        IF NOT GenJnlLinesCreated THEN BEGIN  //* First time
          GenJnlLinesCreated := TRUE;
          InventSetupRec.TESTFIELD("Job Inventory Journal Template");
          InventSetupRec.TESTFIELD("Job Inventory Journal Batch");
          InventSetupRec.TESTFIELD("Job Invnt. Def. Cost Obj. Mat.");

          GenJnlBatchRec.GET(InventSetupRec."Job Inventory Journal Template", InventSetupRec."Job Inventory Journal Batch");
          GenJnlBatchRec.TESTFIELD("No. Series");
          //GenJnlDocNo := lvNoSeriesMgtCU.TryGetNextNo(GenJnlBatchRec."No. Series", "Posting Date");  //* See T81
          GenJnlDocNo := lvNoSeriesMgtCU.GetNextNo(GenJnlBatchRec."No. Series", "Posting Date" , FALSE); //call 14900

          lvGenJnlLineRec.SETRANGE("Journal Template Name", InventSetupRec."Job Inventory Journal Template");
          lvGenJnlLineRec.SETRANGE("Journal Batch Name", InventSetupRec."Job Inventory Journal Batch");
          IF NOT lvGenJnlLineRec.FINDLAST THEN
            NextGenJnlLineNo := 10000
          ELSE
            NextGenJnlLineNo := lvGenJnlLineRec."Line No." + 10000;
          lvGenJnlLineRec.RESET;
        END;

        lvGenJnlLineRec.INIT;
        lvGenJnlLineRec.VALIDATE("Journal Template Name", InventSetupRec."Job Inventory Journal Template");
        lvGenJnlLineRec.VALIDATE("Journal Batch Name", InventSetupRec."Job Inventory Journal Batch");
        lvGenJnlLineRec."Line No." := NextGenJnlLineNo;
        lvGenJnlLineRec."System-Created Entry" := TRUE;
        lvGenJnlLineRec."Posting Date" := "Posting Date";
        lvGenJnlLineRec."Document Date" := WORKDATE;
        lvGenJnlLineRec."Document No." := GenJnlDocNo;
        lvGenJnlLineRec.VALIDATE("Job No.", "Project No.");
        IF Element <> '' THEN
          lvGenJnlLineRec.VALIDATE(Element, Element);  //hbk,06-05-2010
        IF ("Item No." <> '') THEN
          lvGenJnlLineRec.VALIDATE("Item No.", "Item No.")
        ELSE BEGIN
          IF ("Trade Item" <> '') THEN BEGIN
            lvGenJnlLineRec.VALIDATE("Vendor (Trade Item)", "Vendor (Trade Item)");
            lvGenJnlLineRec.VALIDATE("Trade Item", "Trade Item");
          END ELSE BEGIN
            IF ("Basic Item" <> '') THEN BEGIN
              lvGenJnlLineRec.VALIDATE(Manufacturer, Manufacturer);
              lvGenJnlLineRec.VALIDATE("Basic Item", "Basic Item");
            END;
          END;
        END;
        IF lvGenJnlLineRec."Shortcut Dimension 2 Code" <> '' THEN
         DimMgtCU.GetDimValueRec(2,lvGenJnlLineRec."Shortcut Dimension 2 Code",DimValRec,TRUE,'');
        IF (lvGenJnlLineRec."Shortcut Dimension 2 Code" = '') OR (DimValRec."Cost Type" <> DimValRec."Cost Type"::Material) THEN
          lvGenJnlLineRec.VALIDATE("Shortcut Dimension 2 Code", InventSetupRec."Job Invnt. Def. Cost Obj. Mat.");
        //* Project filled and cost object of cost type 'Material' then lvGenJnlLineRec."Account No." will be WIP-acc. for materials.
        lvGenJnlLineRec.VALIDATE("Unit of Measure Code", "Unit of Measure Code");
        lvGenJnlLineRec.Quantity := -Quantity;
        lvGenJnlLineRec.VALIDATE(Amount, lvPrice * -Quantity);
        lvGenJnlLineRec.Description := Description;
        lvGenJnlLineRec.VALIDATE("Gen. Posting Type", lvGenJnlLineRec."Gen. Posting Type"::" ");
        lvGenJnlLineRec.VALIDATE("Gen. Bus. Posting Group", '');
        lvGenJnlLineRec.VALIDATE("Gen. Prod. Posting Group", '');
        lvGenJnlLineRec.VALIDATE("VAT Bus. Posting Group", '');
        lvGenJnlLineRec.VALIDATE("VAT Prod. Posting Group", '');
        lvGenJnlLineRec.INSERT(TRUE);

        lvGenJnlLineRec."Line No." := lvGenJnlLineRec."Line No." + 10;
        lvGenJnlLineRec."Job No." := '';
        lvGenJnlLineRec.Element := '';
        lvGenJnlLineRec.VALIDATE("Job No.", "New Project No.");
        IF "New Element" <> '' THEN
          lvGenJnlLineRec.VALIDATE(Element, "New Element");  //hbk,06-05-2010
        lvGenJnlLineRec.Quantity := Quantity;
        lvGenJnlLineRec.VALIDATE(Amount, lvPrice * Quantity);
        lvGenJnlLineRec.VALIDATE("Gen. Posting Type", lvGenJnlLineRec."Gen. Posting Type"::" ");
        lvGenJnlLineRec.VALIDATE("Gen. Bus. Posting Group", '');
        lvGenJnlLineRec.VALIDATE("Gen. Prod. Posting Group", '');
        lvGenJnlLineRec.VALIDATE("VAT Bus. Posting Group", '');
        lvGenJnlLineRec.VALIDATE("VAT Prod. Posting Group", '');
        lvGenJnlLineRec.INSERT(TRUE);

        NextGenJnlLineNo := NextGenJnlLineNo + 10000;

      END;
    END;

    PROCEDURE PostGenJnlLines@1100525002();
    VAR
      lvGenJnlLineRec@1100525001 : Record 81;
      lvPostGenJnlBatchCU@1100525000 : Codeunit 13;
    BEGIN
      lvGenJnlLineRec.SETRANGE("Journal Template Name", InventSetupRec."Job Inventory Journal Template");
      lvGenJnlLineRec.SETRANGE("Journal Batch Name", InventSetupRec."Job Inventory Journal Batch");
      lvGenJnlLineRec.SETRANGE("Document No.", GenJnlDocNo);
      IF lvGenJnlLineRec.FINDFIRST THEN BEGIN
        lvPostGenJnlBatchCU.SetSuppressCommit(TRUE);
        lvPostGenJnlBatchCU.RUN(lvGenJnlLineRec);
      END;
    END;

    PROCEDURE PostItemTracking@1100528601(ProjectInventoryDeliveryLine@1100528601 : Record 11012671);
    VAR
      NSReservationEntry@1100528604 : Record 11071900;
      NSItemTrackingCheck@1100528600 : Codeunit 11012353;
      QuantityProcessed@1100528602 : Decimal;
      IsFirstReservLine@1100528500 : Boolean;
      EntryType@1100409000 : 'Purchase,Sale';
    BEGIN
      //**4PS DP000121
      IF (ProjectInventoryDeliveryLine."Item No." = '') THEN
        EXIT;

      IF NOT Item.GET(ProjectInventoryDeliveryLine."Item No.") THEN
        EXIT;

      IF Item."Item Tracking Code" = '' THEN
        EXIT;

      NSReservationEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype");
      NSReservationEntry.SETRANGE("Source ID", ProjectInventoryDeliveryLine."Project No.");
      NSReservationEntry.SETRANGE("Source Type", DATABASE::"Project Inventory Delivery");
      NSReservationEntry.SETRANGE("Source Ref. No.", ProjectInventoryDeliveryLine."Line No.");
      IF NSReservationEntry.FINDSET THEN BEGIN
        IsFirstReservLine := TRUE;
        REPEAT
          IF (NSReservationEntry."Qty. to Handle (Base)" <> 0) AND
             ((NSReservationEntry."Serial No." <> '') OR (NSReservationEntry."Lot No." <> '')) THEN
          BEGIN
            IF ProjectInventoryDeliveryLine."Entry Type" = ProjectInventoryDeliveryLine."Entry Type"::"Positive Adjmt." THEN
              EntryType := EntryType::Purchase
            ELSE
              EntryType := EntryType::Sale;
            NSItemTrackingCheck.CheckLine(
              NSReservationEntry, EntryType, ProjectInventoryDeliveryLine."Posting Date",
              ProjectInventoryDeliveryLine.Quantity, IsFirstReservLine,
              ProjectInventoryDeliveryLine.FIELDCAPTION(Quantity));
            PostItemTrackingEntry(NSReservationEntry, ProjectInventoryDeliveryLine);
            QuantityProcessed +=  NSReservationEntry."Qty. to Handle (Base)";
            IsFirstReservLine := FALSE;
            NSReservationEntry.DELETE;
          END;
        UNTIL NSReservationEntry.NEXT = 0;
      END;

      IF ABS(QuantityProcessed) <> ABS(ProjectInventoryDeliveryLine.Quantity) THEN
        ERROR(STRSUBSTNO(Text004,ProjectInventoryDeliveryLine.FIELDCAPTION(Quantity),ProjectInventoryDeliveryLine."Item No."));
    END;

    PROCEDURE PostItemTrackingEntry@1100528603(NSReservationEntry@1100528600 : Record 11071900;ProjectInventoryDeliveryLine@1100528605 : Record 11012671);
    VAR
      NSTrackingSpecification@1100528601 : Record 11071901;
      NSItemTrackingEntry@1100528604 : Record 11071902;
      ItemTrackingMgt@1100528606 : Codeunit 6500;
      EntryNo@1100528602 : Integer;
    BEGIN
      //**4PS DP000121
      { Do not store trackingspecification because original inventory line will be reused
      WITH NSTrackingSpecification DO BEGIN
        LOCKTABLE;
        IF FINDLAST THEN
          EntryNo := "Entry No." + 1
        ELSE
          EntryNo := 1;

        INIT;
        TRANSFERFIELDS(NSReservationEntry);
        "Entry No." := EntryNo;
        "Quantity Handled (Base)" := NSReservationEntry."Qty. to Handle (Base)";
        "Qty. to Handle (Base)" := 0;
        INSERT;
      END;
      }
      WITH NSItemTrackingEntry DO BEGIN
        LOCKTABLE;
        IF FINDLAST THEN
          EntryNo := "Entry No." + 1
        ELSE
          EntryNo := 1;

        INIT;
        "Entry No." := EntryNo;
        "Item No." := NSReservationEntry."Item No.";
        "Posting Date" := ProjectInventoryDeliveryLine."Posting Date";
        "Location Code" := ProjectInventoryDeliveryLine."Location Code";
        "Document Type" := "Document Type"::"Project Inventory Delivery";
        //No Document for Project Inventory Delivery
        "Document No." := '';
        "Document Line No." := 0;
        "Variant Code" := ProjectInventoryDeliveryLine."Variant Code";
        Open := TRUE;
        "Serial No." := NSReservationEntry."Serial No.";
        "Lot No." := NSReservationEntry."Lot No.";
        "Warranty Date Vendor" := NSReservationEntry."Warranty Date Vendor";
        "Warranty Code Vendor" := NSReservationEntry."Warranty Code Vendor";
        "Warranty Start Date Vendor" := NSReservationEntry."Warranty Start Date Vendor";
        "Warranty Period Vendor" := NSReservationEntry."Warranty Period Vendor";
        "Warranty Code Customer" := NSReservationEntry."Warranty Code Customer";
        "Warranty Start Date Customer" := NSReservationEntry."Warranty Start Date Customer";
        "Warranty Period Customer" := NSReservationEntry."Warranty Period Customer";
        "Warranty Date Customer" := NSReservationEntry."Warranty Date Customer";
        "Good Customs":= NSReservationEntry."Good Customs";
        "Shipment with T1" := NSReservationEntry."Shipment with T1";
        "Customs Destination Code" := NSReservationEntry."Customs Destination Code";
        "Expiration Date" := NSReservationEntry."Expiration Date";
        Quantity := NSReservationEntry."Qty. to Handle (Base)";
        "Remaining Quantity" := Quantity;
        Positive := ("Remaining Quantity" > 0);
        "Item Tracking":= ItemTrackingMgt.ItemTrackingOption(
          NSReservationEntry."Lot No.", NSReservationEntry."Serial No.");
        "Source Type":= 0;
        "Source No.":= '';
        "Project No." := ProjectInventoryDeliveryLine."Project No.";
        NSItemTrackingEntriesApply.ApplyNSItemTrackingEntry(NSItemTrackingEntry, Item."Item Tracking Code");
        INSERT;
      END;

      IF ProjectInventoryDeliveryLine."Entry Type" <> ProjectInventoryDeliveryLine."Entry Type"::Transfer THEN
        EXIT;

      //Posting the transfer
      EntryNo := EntryNo + 1;
      WITH NSItemTrackingEntry DO BEGIN
        INIT;
        "Entry No." := EntryNo;
        "Item No." := NSReservationEntry."Item No.";
        "Posting Date" := ProjectInventoryDeliveryLine."Posting Date";
        CASE ProjectInventoryDeliveryLine."Entry Type" OF
          ProjectInventoryDeliveryLine."Entry Type"::Delivery:
           "Entry Type" := "Entry Type"::Sale;
          ProjectInventoryDeliveryLine."Entry Type"::"Positive Adjmt.":
           "Entry Type" := "Entry Type"::"Positive Adjmt.";
          ProjectInventoryDeliveryLine."Entry Type"::"Negative Adjmt.":
           "Entry Type" := "Entry Type"::"Negative Adjmt.";
          ProjectInventoryDeliveryLine."Entry Type"::Transfer:
           "Entry Type" := "Entry Type"::Transfer;
        END;
        "Location Code" := ProjectInventoryDeliveryLine."New Location Code";
        "Document Type" := "Document Type"::"Project Inventory Delivery";
        //No Document for Project Inventory Delivery
        "Document No." := '';
        "Document Line No." := 0;
        "Variant Code" := ProjectInventoryDeliveryLine."Variant Code";
        Open := TRUE;
        "Serial No." := NSReservationEntry."Serial No.";
        "Lot No." := NSReservationEntry."Lot No.";
        "Warranty Date Vendor" := NSReservationEntry."Warranty Date Vendor";
        "Warranty Code Vendor" := NSReservationEntry."Warranty Code Vendor";
        "Warranty Start Date Vendor" := NSReservationEntry."Warranty Start Date Vendor";
        "Warranty Period Vendor" := NSReservationEntry."Warranty Period Vendor";
        "Warranty Code Customer" := NSReservationEntry."Warranty Code Customer";
        "Warranty Start Date Customer" := NSReservationEntry."Warranty Start Date Customer";
        "Warranty Period Customer" := NSReservationEntry."Warranty Period Customer";
        "Warranty Date Customer" := NSReservationEntry."Warranty Date Customer";
        "Good Customs":= NSReservationEntry."Good Customs";
        "Shipment with T1" := NSReservationEntry."Shipment with T1";
        "Customs Destination Code" := NSReservationEntry."Customs Destination Code";
        "Expiration Date" := NSReservationEntry."Expiration Date";
        Quantity := -NSReservationEntry."Qty. to Handle (Base)";
        "Remaining Quantity" := Quantity;
        Positive := ("Remaining Quantity" > 0);
        "Item Tracking":= ItemTrackingMgt.ItemTrackingOption(
          NSReservationEntry."Lot No.", NSReservationEntry."Serial No.");
        "Source Type":= 0;
        "Source No.":= '';
        "Project No." := ProjectInventoryDeliveryLine."New Project No.";
        NSItemTrackingEntriesApply.ApplyNSItemTrackingEntry(NSItemTrackingEntry, Item."Item Tracking Code");
        INSERT;
      END;
    END;

    PROCEDURE SetFilteredLines@1100529400(FilterLinesNew@1100529400 : Boolean;VAR ProjectInventoryDeliveryTmpNew@1100529401 : TEMPORARY Record 11012671);
    BEGIN
      //**4PS.sn BI006 KD 28-09-16
      FilterLines := FilterLinesNew;

      ProjectInventoryDeliveryTmp.RESET;
      ProjectInventoryDeliveryTmp.DELETEALL;

      IF NOT FilterLines THEN
        EXIT;

      ProjectInventoryDeliveryTmp.COPY(ProjectInventoryDeliveryTmpNew,TRUE);
      //**4PS.en BI006 KD 28-09-16
    END;

    BEGIN
    {
      4PS HBK 22-04-2010 Added assignment Engineering Fields in PostProjInventory (M17929)
      4PS HBK 06-05-2010 PostProjInventory changed: added Element
      4PS 28-09-16 UKR-C21173 KD: New project inventory screen (BI006) - Trigger SetFilteredLines added; triggers Code, PostProjInventory changed
    }
    END.
  }
}

