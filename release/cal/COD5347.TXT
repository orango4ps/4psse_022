OBJECT Codeunit 5347 Integration Rec. Delete Invoke
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CheckContext;
            DeleteRecord(IntegrationTableMappingContext,DestinationRecordRefContext,SynchActionContext,
              JobIdContext);
          END;

  }
  CODE
  {
    VAR
      IntegrationTableMappingContext@1015 : Record 5335;
      DestinationRecordRefContext@1013 : RecordRef;
      JobIdContext@1009 : GUID;
      SynchActionType@1000 : 'None,Insert,Modify,ForceModify,IgnoreUnchanged,Fail,Skip,Delete';
      SynchActionContext@1011 : Option;
      IsContextInitialized@1017 : Boolean;
      ContextErr@1018 : TextConst 'ENU=The integration record synchronization context has not been initialized.;NOR=Synkroniseringen av integreringsposten har ikke blitt initialisert.;SVE=Synkroniseringen av integreringsposten har inte initierats.';

    [External]
    PROCEDURE SetContext@4(IntegrationTableMapping@1006 : Record 5335;DestinationRecordRef@1004 : RecordRef;SynchAction@1007 : Option;JobId@1008 : GUID);
    BEGIN
      IntegrationTableMappingContext := IntegrationTableMapping;
      DestinationRecordRefContext := DestinationRecordRef;
      SynchActionContext := SynchAction;
      JobIdContext := JobId;
      IsContextInitialized := TRUE;
    END;

    [External]
    PROCEDURE GetContext@3(VAR IntegrationTableMapping@1006 : Record 5335;VAR DestinationRecordRef@1004 : RecordRef;VAR SynchAction@1000 : Option);
    BEGIN
      CheckContext;
      IntegrationTableMapping := IntegrationTableMappingContext;
      DestinationRecordRef := DestinationRecordRefContext;
      SynchAction := SynchActionContext;
    END;

    LOCAL PROCEDURE CheckContext@5();
    BEGIN
      IF NOT IsContextInitialized THEN
        ERROR(ContextErr);
    END;

    LOCAL PROCEDURE DeleteRecord@9(VAR IntegrationTableMapping@1006 : Record 5335;VAR DestinationRecordRef@1004 : RecordRef;SynchAction@1000 : Option;JobId@1008 : GUID);
    BEGIN
      IF SynchAction = SynchActionType::Fail THEN
        EXIT;

      IF SynchAction <> SynchActionType::Delete THEN
        EXIT;

      OnBeforeDeleteRecord(IntegrationTableMapping,DestinationRecordRef);

      IF NOT DestinationRecordRef.DELETE THEN
        LogSynchError(DestinationRecordRef,GETLASTERRORTEXT,JobId);

      OnAfterDeleteRecord(IntegrationTableMapping,DestinationRecordRef);
      COMMIT;
    END;

    LOCAL PROCEDURE LogSynchError@30(VAR DestinationRecordRef@1001 : RecordRef;ErrorMessage@1002 : Text;JobId@1005 : GUID);
    VAR
      IntegrationSynchJobErrors@1003 : Record 5339;
      EmptyRecordID@1000 : RecordID;
    BEGIN
      EVALUATE(EmptyRecordID,'');
      IF DestinationRecordRef.NUMBER <> 0 THEN BEGIN
        IntegrationSynchJobErrors.LogSynchError(JobId,EmptyRecordID,DestinationRecordRef.RECORDID,ErrorMessage);
        // Close destination - it is in error state and can no longer be used.
        DestinationRecordRef.CLOSE;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDeleteRecord@27(IntegrationTableMapping@1003 : Record 5335;VAR DestinationRecordRef@1001 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterDeleteRecord@28(IntegrationTableMapping@1003 : Record 5335;VAR DestinationRecordRef@1001 : RecordRef);
    BEGIN
    END;

    BEGIN
    END.
  }
}

