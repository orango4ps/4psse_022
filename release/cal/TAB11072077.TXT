OBJECT Table 11072077 Estimate Line Total
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Estimate Line Total;
  }
  FIELDS
  {
    { 10  ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate.No.;
                                                   CaptionML=[ENU=Estimate No.;
                                                              NOR=Kalkylenr;
                                                              SVE=Kalkylnr] }
    { 20  ;   ;Sub-Estimate No.    ;Code20        ;TableRelation=Sub-Estimate."Sub-Estimate No." WHERE (Estimate No.=FIELD(Estimate No.));
                                                   CaptionML=[ENU=Sub-Estimate No.;
                                                              NOR=Delkalkylenummer;
                                                              SVE=Delkalkylnr] }
    { 21  ;   ;Chapter (Sub-Estimate);Code20      ;CaptionML=[ENU=Chapter Sub-Estimate;
                                                              NOR=Kapittel, delkalkyle;
                                                              SVE=Kapitel delkalkyl] }
    { 22  ;   ;Paragraph (Sub-Estimate);Code20    ;CaptionML=[ENU=Paragraph Sub-Estimate;
                                                              NOR=Avsnitt, delkalkyle;
                                                              SVE=Stycke, delkalkyl] }
    { 30  ;   ;Part Group          ;Code10        ;TableRelation="Estimate Part"."Part Group" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                     Sub-Estimate No.=FIELD(Sub-Estimate No.));
                                                   CaptionML=[ENU=Part Group;
                                                              NOR=Del gruppe;
                                                              SVE=Delgrupp] }
    { 40  ;   ;Part                ;Code20        ;TableRelation="Estimate Part".Part WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                             Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                             Part Group=FIELD(Part Group));
                                                   CaptionML=[ENU=Part;
                                                              NOR=Del;
                                                              SVE=Del] }
    { 41  ;   ;Chapter             ;Code20        ;CaptionML=[ENU=Chapter;
                                                              NOR=Kapittel;
                                                              SVE=Kapitel] }
    { 42  ;   ;Paragraph           ;Code20        ;CaptionML=[ENU=Paragraph;
                                                              NOR=Avsnitt;
                                                              SVE=Stycke] }
    { 50  ;   ;Line No.            ;Integer       ;ValidateTableRelation=No;
                                                   CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 51  ;   ;Line Exist          ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Estimate Line" WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                            Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                            Part Group=FIELD(Part Group),
                                                                                            Part=FIELD(Part),
                                                                                            Line No.=FIELD(Line No.)));
                                                   OnLookup=VAR
                                                              EstimateManagementRTC@1100525000 : Codeunit 11130010;
                                                            BEGIN
                                                              EstimateManagementRTC.EditViewEstimateLines("Estimate No.", "Sub-Estimate No.", "Part Group", Part, 0, FALSE);  //C033558
                                                            END;

                                                   CaptionML=ENU=Line Exist;
                                                   Editable=No }
    { 60  ;   ;Description         ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Estimate Line".Description WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                         Sub-Estimate No.=FIELD(Sub-Estimate No.),
                                                                                                         Part Group=FIELD(Part Group),
                                                                                                         Part=FIELD(Part),
                                                                                                         Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 70  ;   ;Hours               ;Decimal       ;CaptionML=[ENU=Hours;
                                                              NOR="Timer ";
                                                              SVE=Timmar];
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 80  ;   ;Hours (Sales)       ;Decimal       ;CaptionML=[ENU=Hours (Sales);
                                                              SVE=Timmar];
                                                   DecimalPlaces=2:;
                                                   Editable=No }
    { 90  ;   ;Cost Type (Hours)   ;Option        ;CaptionML=ENU=Cost Type (Hours);
                                                   OptionCaptionML=ENU="Labor,,,Plant,, ";
                                                   OptionString=[Labor,,,Plant,, ];
                                                   Description=DP01047 }
    { 100 ;   ;Cumulative Hours    ;Decimal       ;CaptionML=[ENU=Cumulative Hours;
                                                              NOR=Akkumulerte timer;
                                                              SVE=Ackumulerade timmar] }
    { 101 ;   ;Cumulative Hours (Sales);Decimal   ;CaptionML=ENU=Cumulative Hours (Sales) }
    { 110 ;   ;Cumulative Labor    ;Decimal       ;CaptionML=[ENU=Cumulative Labor;
                                                              NOR=Akkumulert arbeidskraft;
                                                              SVE=Ackumulerad arbetskraft];
                                                   AutoFormatType=1 }
    { 111 ;   ;Cumulative Labor (Sales);Decimal   ;CaptionML=ENU=Cumulative Labor (Sales);
                                                   AutoFormatType=1 }
    { 120 ;   ;Cumulative Material ;Decimal       ;CaptionML=[ENU=Cumulative Material;
                                                              NOR=Akkumulert Materiale;
                                                              SVE=Ackumulerat material];
                                                   AutoFormatType=1 }
    { 121 ;   ;Cumulative Material (Sales);Decimal;CaptionML=ENU=Cumulative Material  (Sales);
                                                   AutoFormatType=1 }
    { 140 ;   ;Cumulative Subcontracting;Decimal  ;CaptionML=[ENU=Cumulative Subcontracting;
                                                              NOR=Akkumulert underentrepen›r;
                                                              SVE=Ackumulerad underentreprenad];
                                                   AutoFormatType=1 }
    { 141 ;   ;Cumulative Subcontr. (Sales);Decimal;
                                                   CaptionML=ENU=Cumulative Subcontracting (Sales);
                                                   AutoFormatType=1 }
    { 150 ;   ;Cumulative Plant    ;Decimal       ;CaptionML=[ENU=Cumulative Plant;
                                                              NOR=Akkumulert maskin;
                                                              SVE=Ackumulerad Maskin];
                                                   AutoFormatType=1 }
    { 151 ;   ;Cumulative Plant (Sales);Decimal   ;CaptionML=ENU=Cumulative Plant (Sales);
                                                   AutoFormatType=1 }
    { 160 ;   ;Cumulative Buy Back ;Decimal       ;CaptionML=[ENU=Cumulative Buy Back;
                                                              NOR=Akkumulert Tilbakekj›p;
                                                              SVE=Ackumulerat †terk”p];
                                                   AutoFormatType=1 }
    { 170 ;   ;Cumulative Sundry   ;Decimal       ;CaptionML=[ENU=Cumulative Sundry;
                                                              NOR=Akkumulert diverse;
                                                              SVE=Ackumulerad diverse];
                                                   AutoFormatType=1 }
    { 171 ;   ;Cumulative Sundry (Sales);Decimal  ;CaptionML=ENU=Cumulative Sundry (Sales);
                                                   AutoFormatType=1 }
    { 180 ;   ;Cumulative Total    ;Decimal       ;CaptionML=[ENU=Cumulative Total;
                                                              NOR=Akkumulert totalt;
                                                              SVE=Ackumulerat totalt];
                                                   AutoFormatType=1 }
    { 181 ;   ;Cumulative Total (Sales);Decimal   ;CaptionML=ENU=Cumulative Total (Sales);
                                                   AutoFormatType=1 }
    { 190 ;   ;Cumulative Weight   ;Decimal       ;CaptionML=[ENU=Cumulative Weight;
                                                              NOR=Akkumulert Vekt;
                                                              SVE=Ackumulerad vikt];
                                                   DecimalPlaces=0:2 }
    { 200 ;   ;Cumulative Labor (FCY);Decimal     ;CaptionML=ENU=Cumulative Labor (FCY);
                                                   AutoFormatType=1 }
    { 201 ;   ;Cumulative Labor (Sales) (FCY);Decimal;
                                                   CaptionML=ENU=Cumulative Labor (Sales) (FCY);
                                                   AutoFormatType=1 }
    { 220 ;   ;Cumulative Material (FCY);Decimal  ;CaptionML=ENU=Cumulative Material (FCY);
                                                   AutoFormatType=1 }
    { 221 ;   ;Cum. Material (Sales) (FCY);Decimal;CaptionML=ENU=Cumulative Material (FCY);
                                                   AutoFormatType=1 }
    { 240 ;   ;Cum. Subcontracting (FCY);Decimal  ;CaptionML=ENU=Cumulative Subcontracting (FCY);
                                                   AutoFormatType=1 }
    { 241 ;   ;Cum. Subcontr. (Sales) (FCY);Decimal;
                                                   CaptionML=ENU=Cumulative Subcontracting (Sales) (FCY);
                                                   AutoFormatType=1 }
    { 260 ;   ;Cumulative Plant (FCY);Decimal     ;CaptionML=ENU=Cumulative Plant (FCY);
                                                   AutoFormatType=1 }
    { 261 ;   ;Cumulative Plant (Sales) (FCY);Decimal;
                                                   CaptionML=ENU=Cumulative Plant (Sales) (FCY);
                                                   AutoFormatType=1 }
    { 280 ;   ;Cumulative Buy Back (FCY);Decimal  ;CaptionML=ENU=Cumulative Buy Back (FCY);
                                                   AutoFormatType=1 }
    { 290 ;   ;Cumulative Sundry (FCY);Decimal    ;CaptionML=ENU=Cumulative Sundry (FCY);
                                                   AutoFormatType=1 }
    { 291 ;   ;Cum. Sundry (Sales) (FCY);Decimal  ;CaptionML=ENU=Cumulative Sundry (Sales) (FCY);
                                                   AutoFormatType=1 }
    { 310 ;   ;Cumulative Total (FCY);Decimal     ;CaptionML=ENU=Cumulative Total (FCY);
                                                   AutoFormatType=1 }
    { 311 ;   ;Cumulative Total (Sales) (FCY);Decimal;
                                                   CaptionML=ENU=Cumulative Total (Sales) (FCY);
                                                   AutoFormatType=1 }
    { 315 ;   ;Product Discount    ;Decimal       ;CaptionML=[ENU=Product Discount;
                                                              SVE=Produktrabatt];
                                                   Description=DP01727;
                                                   AutoFormatType=1 }
    { 320 ;   ;Cumulative Product Discount;Decimal;CaptionML=ENU=Cumulative Product Discount;
                                                   Description=DP01727;
                                                   AutoFormatType=1 }
    { 400 ;   ;Calc. Cost Amount   ;Decimal       ;CaptionML=ENU=Calculated Cost Amount;
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 405 ;   ;Calc. Hours         ;Decimal       ;CaptionML=ENU=Calculated Hours;
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 410 ;   ;Calc. Labor Amount  ;Decimal       ;CaptionML=ENU=Calculated Labor Amount;
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 415 ;   ;Calc. Material Amount;Decimal      ;CaptionML=ENU=Calculated Material Amount;
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 420 ;   ;Calc. Subc. Amount  ;Decimal       ;CaptionML=ENU=Calculated Subcontracting Amount;
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 425 ;   ;Calc. Plant Amount  ;Decimal       ;CaptionML=ENU=Calculated Plant Amount;
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 430 ;   ;Calc. Sundry Amount ;Decimal       ;CaptionML=ENU=Calculated Sundry Amount;
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 450 ;   ;Calc. Cum. Cost Amount;Decimal     ;CaptionML=ENU=Calculated Cum. Cost Amount;
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 455 ;   ;Calc. Cum. Hours    ;Decimal       ;CaptionML=ENU=Calculated Cum. Hours;
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 460 ;   ;Calc. Cum. Labor Amount;Decimal    ;CaptionML=ENU=Calculated Cum. Labor Amount;
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 465 ;   ;Calc. Cum. Material Amount;Decimal ;CaptionML=ENU=Calculated Cum. Material Amount;
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 470 ;   ;Calc. Cum. Subc. Amount;Decimal    ;CaptionML=ENU=Calculated Cum. Subcontracting Amount;
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 475 ;   ;Calc. Cum. Plant Amount;Decimal    ;CaptionML=ENU=Calculated Cum. Plant Amount;
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 480 ;   ;Calc. Cum. Sundry Amount;Decimal   ;CaptionML=ENU=Calculated Cum. Sundry Amount;
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 490 ;   ;Calc. Factor Labor  ;Decimal       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Calculated Surcharge Factor Labor;
                                                   Description=C055105;
                                                   AutoFormatType=1 }
    { 491 ;   ;Calc. Factor Mat.   ;Decimal       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Calculated Surcharge Factor Material;
                                                   Description=C055105;
                                                   AutoFormatType=1 }
    { 492 ;   ;Calc. Factor Subc.  ;Decimal       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Calculated Surcharge Factor Subcontracting;
                                                   Description=C055105;
                                                   AutoFormatType=1 }
    { 493 ;   ;Calc. Factor Plant  ;Decimal       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Calculated Surcharge Factor Plant;
                                                   Description=C055105;
                                                   AutoFormatType=1 }
    { 494 ;   ;Calc. Factor Sundry ;Decimal       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Calculated Surcharge Factor Sundry;
                                                   Description=C055105;
                                                   AutoFormatType=1 }
    { 500 ;   ;Calc. Sales Amount  ;Decimal       ;CaptionML=[ENU=Calculated Sales Amount;
                                                              NOR=Estimert salgsbel›p;
                                                              SVE=Ber„knat f”rs„ljningsbelopp];
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 505 ;   ;Calc. Hours (Sales) ;Decimal       ;CaptionML=ENU=Calculated Hours (Sales);
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 510 ;   ;Calc. Labor Amount (Sales);Decimal ;CaptionML=ENU=Calculated Labor Amount (Sales);
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 515 ;   ;Calc. Material Amount (Sales);Decimal;
                                                   CaptionML=ENU=Calculated Material Amount (Sales);
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 520 ;   ;Calc. Subc. Amount (Sales);Decimal ;CaptionML=ENU=Calculated Subcontracting Amount (Sales);
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 525 ;   ;Calc. Plant Amount (Sales);Decimal ;CaptionML=ENU=Calculated Plant Amount (Sales);
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 530 ;   ;Calc. Sundry Amount (Sales);Decimal;CaptionML=ENU=Calculated Sundry Amount (Sales);
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 550 ;   ;Calc. Cum. Sales Amount;Decimal    ;CaptionML=ENU=Calculated Cum. Sales Amount;
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 555 ;   ;Calc. Cum. Hours (Sales);Decimal   ;CaptionML=ENU=Calculated Cum. Hours (Sales);
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 560 ;   ;Calc. Cum. Labor Amnt (Sales);Decimal;
                                                   CaptionML=ENU=Calculated Cum. Labor Amount (Sales);
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 565 ;   ;Calc. Cum. Mat. Amnt (Sales);Decimal;
                                                   CaptionML=ENU=Calculated Cum. Material Amount (Sales);
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 570 ;   ;Calc. Cum. Subc. Amnt (Sales);Decimal;
                                                   CaptionML=ENU=Calculated Subcontracting Amount (Sales);
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 575 ;   ;Calc. Cum. Plant Amnt (Sales);Decimal;
                                                   CaptionML=ENU=Calculated Cum. Plant Amount (Sales);
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 580 ;   ;Calc. Cum. Sundry Amnt (Sales);Decimal;
                                                   CaptionML=ENU=Calculated Sundry Amount (Sales);
                                                   Description=DP01175;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 590 ;   ;Calc. Factor Labor (Sales);Decimal ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Calculated Surcharge Factor Labor (Sales);
                                                   Description=C055105;
                                                   AutoFormatType=1 }
    { 591 ;   ;Calc. Factor Mat. (Sales);Decimal  ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Calculated Surcharge Factor Material (Sales);
                                                   Description=C055105;
                                                   AutoFormatType=1 }
    { 592 ;   ;Calc. Factor Subc. (Sales);Decimal ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Calculated Surcharge Factor Subcontracting (Sales);
                                                   Description=C055105;
                                                   AutoFormatType=1 }
    { 593 ;   ;Calc. Factor Plant (Sales);Decimal ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Calculated Surcharge Factor Plant (Sales);
                                                   Description=C055105;
                                                   AutoFormatType=1 }
    { 594 ;   ;Calc. Factor Sundry (Sales);Decimal;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Calculated Surcharge Factor Sundry (Sales);
                                                   Description=C055105;
                                                   AutoFormatType=1 }
    { 600 ;   ;Line Status         ;Code10        ;TableRelation="Line Status".Status;
                                                   CaptionML=[ENU=Line Status;
                                                              NOR=Radstatus;
                                                              SVE=Radstatus];
                                                   Description=DP01175 }
  }
  KEYS
  {
    {    ;Estimate No.,Sub-Estimate No.,Part Group,Part,Line No.;
                                                   SumIndexFields=Cumulative Total,Cumulative Total (Sales);
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Estimate No.,Chapter (Sub-Estimate)     ;SumIndexFields=Hours,Hours (Sales),Cumulative Hours,Cumulative Hours (Sales),Cumulative Labor,Cumulative Labor (Sales),Cumulative Material,Cumulative Material (Sales),Cumulative Subcontracting,Cumulative Subcontr. (Sales),Cumulative Plant,Cumulative Plant (Sales),Cumulative Sundry,Cumulative Sundry (Sales);
                                                   MaintainSIFTIndex=No }
    {    ;Estimate No.,Paragraph (Sub-Estimate)   ;SumIndexFields=Hours,Hours (Sales),Cumulative Hours,Cumulative Hours (Sales),Cumulative Labor,Cumulative Labor (Sales),Cumulative Material,Cumulative Material (Sales),Cumulative Subcontracting,Cumulative Subcontr. (Sales),Cumulative Plant,Cumulative Plant (Sales),Cumulative Sundry,Cumulative Sundry (Sales);
                                                   MaintainSIFTIndex=No }
    {    ;Estimate No.,Sub-Estimate No.,Chapter   ;SumIndexFields=Hours,Hours (Sales),Cumulative Hours,Cumulative Hours (Sales),Cumulative Labor,Cumulative Labor (Sales),Cumulative Material,Cumulative Material (Sales),Cumulative Subcontracting,Cumulative Subcontr. (Sales),Cumulative Plant,Cumulative Plant (Sales),Cumulative Sundry,Cumulative Sundry (Sales);
                                                   MaintainSIFTIndex=No }
    {    ;Estimate No.,Sub-Estimate No.,Paragraph ;SumIndexFields=Hours,Hours (Sales),Cumulative Hours,Cumulative Hours (Sales),Cumulative Labor,Cumulative Labor (Sales),Cumulative Material,Cumulative Material (Sales),Cumulative Subcontracting,Cumulative Subcontr. (Sales),Cumulative Plant,Cumulative Plant (Sales),Cumulative Sundry,Cumulative Sundry (Sales);
                                                   MaintainSIFTIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      TempSummarySheetLine1@1100525001 : TEMPORARY Record 11012171;
      TempSummarySheetLine2@1100525000 : TEMPORARY Record 11012171;
      TotSurchargeAmount@1100525003 : Decimal;
      TotSurchargeHours@1100525002 : Decimal;

    PROCEDURE CalculateOfferPrice@1100525000(Estimate@1100525001 : Record 11012151;SummarySheet@1100525000 : Record 11012172;VAR SelectedEstimateLine@1100529400 : Record 11072072;PrintTotalsBasedOn@1100525003 : 'Cost,Sales,Both';ApplyLastCalcSurchFactor@1100528904 : Boolean);
    VAR
      EstimateLine@1100525002 : Record 11072072;
      EstimateLineTotal@1100525004 : Record 11072077;
      Text010@1100528900 : TextConst 'ENU=Calculate Full Cost Price\Estimate Part  #1#################';
      LastKeyValue@1100528902 : Text[250];
      DialogWindow@1100528901 : Dialog;
      ActualEstimateLine@1100528903 : Record 11072072;
      SurchargeFactorCalculated@1100528905 : Boolean;
    BEGIN
      //DP01175
      InitTmpSheetLines(Estimate, SummarySheet);

      //C055105.sn
      DialogWindow.OPEN(Text010);
      IF ApplyLastCalcSurchFactor = FALSE THEN
        InitEstimateLineTotals(Estimate, PrintTotalsBasedOn)
      ELSE
        SummarySheet.TESTFIELD("Recalculate Full Cost Price", FALSE);
      //C055105.en

      EstimateLine.COPY(SelectedEstimateLine);
      IF EstimateLine.FINDSET THEN BEGIN
        REPEAT
          //C055105.sn
          ActualEstimateLine := EstimateLine;
          IF LastKeyValue <> EstimateLine."Estimate No." + EstimateLine."Sub-Estimate No." + EstimateLine."Part Group" + EstimateLine.Part THEN BEGIN
            LastKeyValue := EstimateLine."Estimate No." + EstimateLine."Sub-Estimate No." + EstimateLine."Part Group" + EstimateLine.Part;
            DialogWindow.UPDATE(1, EstimateLine."Sub-Estimate No."+'-'+EstimateLine.Part);
          END;
          IF NOT EstimateLineTotal.GET(EstimateLine."Estimate No.",EstimateLine."Sub-Estimate No.",
            EstimateLine."Part Group",EstimateLine.Part,EstimateLine."Line No.") THEN
            EstimateLineTotal.INIT;
          SurchargeFactorCalculated :=
            (EstimateLineTotal."Calc. Factor Labor" <> 0) OR (EstimateLineTotal."Calc. Factor Mat." <> 0) OR
            (EstimateLineTotal."Calc. Factor Subc." <> 0) OR (EstimateLineTotal."Calc. Factor Plant" <> 0) OR
            (EstimateLineTotal."Calc. Factor Sundry" <> 0);
          //C055105.en
          IF EstimateLine.Recipe = '' THEN BEGIN
            EstimateLine.CalculateTotalsWithOptions(FALSE);
            IF (ApplyLastCalcSurchFactor = FALSE) OR (SurchargeFactorCalculated = FALSE) THEN  //C055105
              DetermineSurchEstLine(EstimateLine, EstimateLineTotal, SummarySheet, PrintTotalsBasedOn);
          END ELSE BEGIN
            IF (ApplyLastCalcSurchFactor = FALSE) OR (SurchargeFactorCalculated = FALSE) THEN  //C055105
              DetermineAmountRecipeEstLine(EstimateLine, EstimateLineTotal, SummarySheet, PrintTotalsBasedOn);
          END;
          StoreCalculatedPrice(EstimateLine, EstimateLineTotal, PrintTotalsBasedOn, ActualEstimateLine, ApplyLastCalcSurchFactor);  //C055105
        UNTIL EstimateLine.NEXT = 0;
      END;

      //C055105.sn
      IF ApplyLastCalcSurchFactor = FALSE THEN BEGIN
        IF SummarySheet.Summary <> '' THEN BEGIN  //skip update on case of IgnoreSummary.
          SummarySheet.FIND;  //update latest version
          SummarySheet."Recalculate Full Cost Price" := FALSE;
          SummarySheet.MODIFY;
        END;
      END;
      DialogWindow.CLOSE;
      //C055105.en
    END;

    LOCAL PROCEDURE StoreCalculatedPrice@1100525003(CalculatedEstimateLine@1100525000 : Record 11072072;CalculatedLineTotal@1100525003 : Record 11072077;PrintTotalsBasedOn@1100525002 : 'Cost,Sales,Both';ActualEstimateLine@1100528900 : Record 11072072;ApplyLastCalcSurchFactor@1100528901 : Boolean);
    VAR
      EstimateLineTotal@1100525001 : Record 11072077;
      EstimatePart@1100525004 : Record 11072073;
    BEGIN
      //DP01175
      IF CalculatedEstimateLine."Part Quantity" = 0 THEN EXIT;  //C055105

      IF NOT EstimateLineTotal.GET(
        CalculatedEstimateLine."Estimate No.", CalculatedEstimateLine."Sub-Estimate No.",
        CalculatedEstimateLine."Part Group", CalculatedEstimateLine.Part, CalculatedEstimateLine."Line No.") THEN EXIT;

      EstimatePart.GET(
        CalculatedEstimateLine."Estimate No.", CalculatedEstimateLine."Sub-Estimate No.",
        CalculatedEstimateLine."Part Group", CalculatedEstimateLine.Part);

      EstimateLineTotal."Line Status" := CalculatedEstimateLine."Line Status";
      IF (PrintTotalsBasedOn = PrintTotalsBasedOn::Cost) OR (PrintTotalsBasedOn = PrintTotalsBasedOn::Both) THEN BEGIN
        IF ApplyLastCalcSurchFactor THEN BEGIN
          //C055105.sn
          EstimateLineTotal."Calc. Hours" := ActualEstimateLine.Hours;
          EstimateLineTotal."Calc. Labor Amount" := ActualEstimateLine."Labor Cost Amount" * EstimateLineTotal."Calc. Factor Labor";
          EstimateLineTotal."Calc. Material Amount" := ActualEstimateLine."Material Cost Amount" * EstimateLineTotal."Calc. Factor Mat.";
          EstimateLineTotal."Calc. Subc. Amount" := ActualEstimateLine."Subcontracting Cost Amount" * EstimateLineTotal."Calc. Factor Subc.";
          EstimateLineTotal."Calc. Plant Amount" := ActualEstimateLine."Plant Cost Amount" * EstimateLineTotal."Calc. Factor Plant";
          EstimateLineTotal."Calc. Sundry Amount" := ActualEstimateLine."Sundry Cost Amount" * EstimateLineTotal."Calc. Factor Sundry";
          EstimateLineTotal."Calc. Cost Amount" :=
            EstimateLineTotal."Calc. Labor Amount" + EstimateLineTotal."Calc. Material Amount" +
            EstimateLineTotal."Calc. Subc. Amount" + EstimateLineTotal."Calc. Plant Amount" + EstimateLineTotal."Calc. Sundry Amount";

          EstimateLineTotal."Calc. Cum. Hours" := EstimateLineTotal."Calc. Hours" * ActualEstimateLine."Part Quantity";
          EstimateLineTotal."Calc. Cum. Labor Amount" := EstimateLineTotal."Calc. Labor Amount" * ActualEstimateLine."Part Quantity";
          EstimateLineTotal."Calc. Cum. Material Amount" := EstimateLineTotal."Calc. Material Amount" * ActualEstimateLine."Part Quantity";
          EstimateLineTotal."Calc. Cum. Subc. Amount" := EstimateLineTotal."Calc. Subc. Amount" * ActualEstimateLine."Part Quantity";
          EstimateLineTotal."Calc. Cum. Plant Amount" := EstimateLineTotal."Calc. Plant Amount" * ActualEstimateLine."Part Quantity";
          EstimateLineTotal."Calc. Cum. Sundry Amount" := EstimateLineTotal."Calc. Sundry Amount" * ActualEstimateLine."Part Quantity";
          EstimateLineTotal."Calc. Cum. Cost Amount" :=
            EstimateLineTotal."Calc. Cum. Labor Amount" + EstimateLineTotal."Calc. Cum. Material Amount" +
            EstimateLineTotal."Calc. Cum. Subc. Amount" + EstimateLineTotal."Calc. Cum. Plant Amount" + EstimateLineTotal."Calc. Cum. Sundry Amount";
          //C055105.en
        END ELSE BEGIN
          EstimateLineTotal."Calc. Cost Amount" := CalculatedEstimateLine."Cost Amount";
          EstimateLineTotal."Calc. Hours" := CalculatedEstimateLine.Hours;
          EstimateLineTotal."Calc. Labor Amount" := CalculatedEstimateLine."Labor Cost Amount";
          EstimateLineTotal."Calc. Material Amount" := CalculatedEstimateLine."Material Cost Amount";
          EstimateLineTotal."Calc. Subc. Amount" := CalculatedEstimateLine."Subcontracting Cost Amount";
          EstimateLineTotal."Calc. Plant Amount" := CalculatedEstimateLine."Plant Cost Amount";
          EstimateLineTotal."Calc. Sundry Amount" := CalculatedEstimateLine."Sundry Cost Amount";

          EstimateLineTotal."Calc. Cum. Cost Amount" := CalculatedLineTotal."Cumulative Total";
          EstimateLineTotal."Calc. Cum. Hours" := CalculatedLineTotal."Cumulative Hours";
          EstimateLineTotal."Calc. Cum. Labor Amount" := CalculatedLineTotal."Cumulative Labor";
          EstimateLineTotal."Calc. Cum. Material Amount" := CalculatedLineTotal."Cumulative Material";
          EstimateLineTotal."Calc. Cum. Subc. Amount" := CalculatedLineTotal."Cumulative Subcontracting";
          EstimateLineTotal."Calc. Cum. Plant Amount" := CalculatedLineTotal."Cumulative Plant";
          EstimateLineTotal."Calc. Cum. Sundry Amount" := CalculatedLineTotal."Cumulative Sundry";
          //C055105.sn
          EstimateLineTotal."Calc. Factor Labor" := 1;
          EstimateLineTotal."Calc. Factor Mat." := 1;
          EstimateLineTotal."Calc. Factor Subc." := 1;
          EstimateLineTotal."Calc. Factor Plant" := 1;
          EstimateLineTotal."Calc. Factor Sundry" := 1;
          IF ActualEstimateLine."Labor Cost Amount" <> 0 THEN
            EstimateLineTotal."Calc. Factor Labor" := EstimateLineTotal."Calc. Labor Amount" / ActualEstimateLine."Labor Cost Amount";
          IF ActualEstimateLine."Material Cost Amount" <> 0 THEN
            EstimateLineTotal."Calc. Factor Mat." := EstimateLineTotal."Calc. Material Amount" / ActualEstimateLine."Material Cost Amount";
          IF ActualEstimateLine."Subcontracting Cost Amount" <> 0 THEN
            EstimateLineTotal."Calc. Factor Subc." := EstimateLineTotal."Calc. Subc. Amount" / ActualEstimateLine."Subcontracting Cost Amount";
          IF ActualEstimateLine."Plant Cost Amount" <> 0 THEN
            EstimateLineTotal."Calc. Factor Plant" := EstimateLineTotal."Calc. Plant Amount" / ActualEstimateLine."Plant Cost Amount";
          IF ActualEstimateLine."Sundry Cost Amount" <> 0 THEN
            EstimateLineTotal."Calc. Factor Sundry" := EstimateLineTotal."Calc. Sundry Amount" / ActualEstimateLine."Sundry Cost Amount";
          //C055105.en
        END;
      END;
      IF (PrintTotalsBasedOn = PrintTotalsBasedOn::Sales) OR (PrintTotalsBasedOn = PrintTotalsBasedOn::Both) THEN BEGIN
        IF ApplyLastCalcSurchFactor THEN BEGIN
          //C055105.sn
          EstimateLineTotal."Calc. Hours (Sales)" := ActualEstimateLine."Hours (Sales)";
          EstimateLineTotal."Calc. Labor Amount (Sales)" := ActualEstimateLine."Labor Sales Amount" * EstimateLineTotal."Calc. Factor Labor (Sales)";
          EstimateLineTotal."Calc. Material Amount (Sales)" := ActualEstimateLine."Material Sales Amount" * EstimateLineTotal."Calc. Factor Mat. (Sales)";
          EstimateLineTotal."Calc. Subc. Amount (Sales)" := ActualEstimateLine."Subcontracting Sales Amount" * EstimateLineTotal."Calc. Factor Subc. (Sales)";
          EstimateLineTotal."Calc. Plant Amount (Sales)" := ActualEstimateLine."Plant Sales Amount" * EstimateLineTotal."Calc. Factor Plant (Sales)";
          EstimateLineTotal."Calc. Sundry Amount (Sales)" := ActualEstimateLine."Sundry Sales Amount" * EstimateLineTotal."Calc. Factor Sundry (Sales)";
          EstimateLineTotal."Calc. Sales Amount" :=
            EstimateLineTotal."Calc. Labor Amount (Sales)" + EstimateLineTotal."Calc. Material Amount (Sales)" +
            EstimateLineTotal."Calc. Subc. Amount (Sales)" + EstimateLineTotal."Calc. Plant Amount (Sales)" + EstimateLineTotal."Calc. Sundry Amount (Sales)";

          EstimateLineTotal."Calc. Cum. Hours (Sales)" := EstimateLineTotal."Calc. Hours (Sales)" * ActualEstimateLine."Part Quantity";
          EstimateLineTotal."Calc. Cum. Labor Amnt (Sales)" := EstimateLineTotal."Calc. Labor Amount (Sales)" * ActualEstimateLine."Part Quantity";
          EstimateLineTotal."Calc. Cum. Mat. Amnt (Sales)" := EstimateLineTotal."Calc. Material Amount (Sales)" * ActualEstimateLine."Part Quantity";
          EstimateLineTotal."Calc. Cum. Subc. Amnt (Sales)" := EstimateLineTotal."Calc. Subc. Amount (Sales)" * ActualEstimateLine."Part Quantity";
          EstimateLineTotal."Calc. Cum. Plant Amnt (Sales)" := EstimateLineTotal."Calc. Plant Amount (Sales)" * ActualEstimateLine."Part Quantity";
          EstimateLineTotal."Calc. Cum. Sundry Amnt (Sales)" := EstimateLineTotal."Calc. Sundry Amount (Sales)" * ActualEstimateLine."Part Quantity";
          EstimateLineTotal."Calc. Cum. Sales Amount" :=
            EstimateLineTotal."Calc. Cum. Labor Amnt (Sales)" + EstimateLineTotal."Calc. Cum. Mat. Amnt (Sales)" +
            EstimateLineTotal."Calc. Cum. Subc. Amnt (Sales)" + EstimateLineTotal."Calc. Cum. Plant Amnt (Sales)" + EstimateLineTotal."Calc. Cum. Sundry Amnt (Sales)";
          //C055105.en
        END ELSE BEGIN
          EstimateLineTotal."Calc. Sales Amount" := CalculatedEstimateLine."Sales Amount";
          EstimateLineTotal."Calc. Hours (Sales)" := CalculatedEstimateLine."Hours (Sales)";
          EstimateLineTotal."Calc. Labor Amount (Sales)" := CalculatedEstimateLine."Labor Sales Amount";
          EstimateLineTotal."Calc. Material Amount (Sales)" := CalculatedEstimateLine."Material Sales Amount";
          EstimateLineTotal."Calc. Subc. Amount (Sales)" := CalculatedEstimateLine."Subcontracting Sales Amount";
          EstimateLineTotal."Calc. Plant Amount (Sales)" := CalculatedEstimateLine."Plant Sales Amount";
          EstimateLineTotal."Calc. Sundry Amount (Sales)" := CalculatedEstimateLine."Sundry Sales Amount";

          EstimateLineTotal."Calc. Cum. Sales Amount" := CalculatedLineTotal."Cumulative Total (Sales)";
          EstimateLineTotal."Calc. Cum. Hours (Sales)" := CalculatedLineTotal."Cumulative Hours (Sales)";
          EstimateLineTotal."Calc. Cum. Labor Amnt (Sales)" := CalculatedLineTotal."Cumulative Labor (Sales)";
          EstimateLineTotal."Calc. Cum. Mat. Amnt (Sales)" := CalculatedLineTotal."Cumulative Material (Sales)";
          EstimateLineTotal."Calc. Cum. Subc. Amnt (Sales)" := CalculatedLineTotal."Cumulative Subcontr. (Sales)";
          EstimateLineTotal."Calc. Cum. Plant Amnt (Sales)" := CalculatedLineTotal."Cumulative Plant (Sales)";
          EstimateLineTotal."Calc. Cum. Sundry Amnt (Sales)" := CalculatedLineTotal."Cumulative Sundry (Sales)";
          //C055105.sn
          EstimateLineTotal."Calc. Factor Labor (Sales)" := 1;
          EstimateLineTotal."Calc. Factor Mat. (Sales)" := 1;
          EstimateLineTotal."Calc. Factor Subc. (Sales)" := 1;
          EstimateLineTotal."Calc. Factor Plant (Sales)" := 1;
          EstimateLineTotal."Calc. Factor Sundry (Sales)" := 1;
          IF ActualEstimateLine."Labor Sales Amount" <> 0 THEN
            EstimateLineTotal."Calc. Factor Labor (Sales)" := EstimateLineTotal."Calc. Labor Amount (Sales)" / ActualEstimateLine."Labor Sales Amount";
          IF ActualEstimateLine."Material Sales Amount" <> 0 THEN
            EstimateLineTotal."Calc. Factor Mat. (Sales)" := EstimateLineTotal."Calc. Material Amount (Sales)" / ActualEstimateLine."Material Sales Amount";
          IF ActualEstimateLine."Subcontracting Sales Amount" <> 0 THEN
            EstimateLineTotal."Calc. Factor Subc. (Sales)" := EstimateLineTotal."Calc. Subc. Amount (Sales)" / ActualEstimateLine."Subcontracting Sales Amount";
          IF ActualEstimateLine."Plant Sales Amount" <> 0 THEN
            EstimateLineTotal."Calc. Factor Plant (Sales)" := EstimateLineTotal."Calc. Plant Amount (Sales)" / ActualEstimateLine."Plant Sales Amount";
          IF ActualEstimateLine."Sundry Sales Amount" <> 0 THEN
            EstimateLineTotal."Calc. Factor Sundry (Sales)" := EstimateLineTotal."Calc. Sundry Amount (Sales)" / ActualEstimateLine."Sundry Sales Amount";
          //C055105.en
        END;
      END;
      EstimateLineTotal.MODIFY;
    END;

    LOCAL PROCEDURE DetermineSurchEstLine@1100485000(VAR EstimateLine@1100485000 : Record 11072072;VAR EstimateLineTotal@1100525002 : Record 11072077;SummarySheet@1100525004 : Record 11012172;PrintTotalsBasedOn@1100525003 : 'Cost,Sales,Both');
    VAR
      HoursCostOld@1100485002 : Decimal;
      HoursSalesOld@1100525001 : Decimal;
      LaborCostAmountOld@1100485006 : Decimal;
      LaborSalesAmountOld@1100525000 : Decimal;
    BEGIN
      //save old values
      HoursCostOld := EstimateLine.Hours;
      HoursSalesOld := EstimateLine."Hours (Sales)";
      LaborCostAmountOld := EstimateLine."Labor Cost Amount";
      LaborSalesAmountOld := EstimateLine."Labor Sales Amount";

      //determine surcharges for each 'Cost Type' line.
      TempSummarySheetLine1.SETRANGE(Type, TempSummarySheetLine1.Type::"Cost Type");
      IF TempSummarySheetLine1.FINDSET THEN
        REPEAT
          //these are the lines in which the Estimate Line exist
          IF EstLineInSummarySheetLineFilters(EstimateLine, TempSummarySheetLine1) THEN BEGIN
            IF (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Labor) OR
               (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              IF SummarySheet."Summary Type" = SummarySheet."Summary Type"::Cost THEN BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateLine."Labor Cost Amount", EstimateLine.Hours, TotSurchargeAmount, TotSurchargeHours);
                EstimateLine."Labor Cost Amount" += TotSurchargeAmount;
                EstimateLine.Hours += TotSurchargeHours;
              END ELSE BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateLine."Labor Sales Amount", EstimateLine."Hours (Sales)", TotSurchargeAmount, TotSurchargeHours);
                EstimateLine."Labor Sales Amount" += TotSurchargeAmount;
                EstimateLine."Hours (Sales)" += TotSurchargeHours;
              END;
            END;

            IF (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Material) OR
               (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              IF SummarySheet."Summary Type" = SummarySheet."Summary Type"::Cost THEN BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateLine."Material Cost Amount", EstimateLine.Hours, TotSurchargeAmount, TotSurchargeHours);
                EstimateLine."Material Cost Amount" += TotSurchargeAmount;
              END ELSE BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateLine."Material Sales Amount", EstimateLine."Hours (Sales)", TotSurchargeAmount, TotSurchargeHours);
                EstimateLine."Material Sales Amount" += TotSurchargeAmount;
              END;
            END;

            IF (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Subcontracting) OR
               (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              IF SummarySheet."Summary Type" = SummarySheet."Summary Type"::Cost THEN BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateLine."Subcontracting Cost Amount", EstimateLine.Hours, TotSurchargeAmount, TotSurchargeHours);
                EstimateLine."Subcontracting Cost Amount" += TotSurchargeAmount;
              END ELSE BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateLine."Subcontracting Sales Amount", EstimateLine."Hours (Sales)", TotSurchargeAmount, TotSurchargeHours);
                EstimateLine."Subcontracting Sales Amount" += TotSurchargeAmount;
              END;
            END;

            IF (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Plant) OR
               (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              IF SummarySheet."Summary Type" = SummarySheet."Summary Type"::Cost THEN BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateLine."Plant Cost Amount", EstimateLine.Hours, TotSurchargeAmount, TotSurchargeHours);
                EstimateLine."Plant Cost Amount" += TotSurchargeAmount;
              END ELSE BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateLine."Plant Sales Amount", EstimateLine."Hours (Sales)", TotSurchargeAmount, TotSurchargeHours);
                EstimateLine."Plant Sales Amount" += TotSurchargeAmount;
              END;
            END;

            IF (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Sundry) OR
               (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              IF SummarySheet."Summary Type" = SummarySheet."Summary Type"::Cost THEN BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateLine."Sundry Cost Amount", EstimateLine.Hours, TotSurchargeAmount, TotSurchargeHours);
                EstimateLine."Sundry Cost Amount" += TotSurchargeAmount;
              END ELSE BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateLine."Sundry Sales Amount", EstimateLine."Hours (Sales)", TotSurchargeAmount, TotSurchargeHours);
                EstimateLine."Sundry Sales Amount" += TotSurchargeAmount;
              END;
            END;
          END;
        UNTIL TempSummarySheetLine1.NEXT = 0;

      EstimateLine."Cost Amount" :=
        EstimateLine."Labor Cost Amount" +
        EstimateLine."Material Cost Amount" +
        EstimateLine."Subcontracting Cost Amount" +
        EstimateLine."Plant Cost Amount" +
        EstimateLine."Sundry Cost Amount";

      EstimateLine."Sales Amount" :=
        EstimateLine."Labor Sales Amount" +
        EstimateLine."Material Sales Amount" +
        EstimateLine."Subcontracting Sales Amount" +
        EstimateLine."Plant Sales Amount" +
        EstimateLine."Sundry Sales Amount";

      IF HoursCostOld <> EstimateLine.Hours THEN
        IF EstimateLine.Quantity <> 0 THEN
          EstimateLine.Norm := EstimateLine.Hours / EstimateLine.Quantity;
      IF HoursSalesOld <> EstimateLine."Hours (Sales)" THEN
        IF EstimateLine."Quantity (Sales)" <> 0 THEN
          EstimateLine."Norm (Sales)" := EstimateLine."Hours (Sales)" / EstimateLine."Quantity (Sales)";

      IF LaborCostAmountOld <> EstimateLine."Labor Cost Amount" THEN
        IF EstimateLine.Hours <> 0 THEN
          EstimateLine."Cost Rate" := EstimateLine."Labor Cost Amount" / EstimateLine.Hours;
      IF LaborSalesAmountOld <> EstimateLine."Labor Sales Amount" THEN
        IF EstimateLine."Hours (Sales)" <> 0 THEN
          EstimateLine."Sales Rate" := EstimateLine."Labor Sales Amount" / EstimateLine."Hours (Sales)";

      IF NOT EstimateLineTotal.GET(
        EstimateLine."Estimate No.", EstimateLine."Sub-Estimate No.",
        EstimateLine."Part Group", EstimateLine.Part, EstimateLine."Line No.") THEN
        EstimateLineTotal.INIT;

      IF (PrintTotalsBasedOn = PrintTotalsBasedOn::Cost) OR (PrintTotalsBasedOn = PrintTotalsBasedOn::Both) THEN BEGIN
        EstimateLineTotal."Cumulative Hours" := EstimateLine.Hours * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Labor" := EstimateLine."Labor Cost Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Material" := EstimateLine."Material Cost Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Subcontracting" := EstimateLine."Subcontracting Cost Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Plant" := EstimateLine."Plant Cost Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Sundry" := EstimateLine."Sundry Cost Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Total" := EstimateLine."Cost Amount" * EstimateLine."Part Quantity";
      END;
      IF (PrintTotalsBasedOn = PrintTotalsBasedOn::Sales) OR (PrintTotalsBasedOn = PrintTotalsBasedOn::Both) THEN BEGIN
        EstimateLineTotal."Cumulative Hours (Sales)" := EstimateLine."Hours (Sales)" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Labor (Sales)" := EstimateLine."Labor Sales Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Material (Sales)" := EstimateLine."Material Sales Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Subcontr. (Sales)" := EstimateLine."Subcontracting Sales Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Plant (Sales)" := EstimateLine."Plant Sales Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Sundry (Sales)" := EstimateLine."Sundry Sales Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Total (Sales)" := EstimateLine."Sales Amount" * EstimateLine."Part Quantity";
      END;
    END;

    LOCAL PROCEDURE EstLineInSummarySheetLineFilters@1100485002(EstimateLine@1100485000 : Record 11072072;SummarySheetLine@1100485001 : Record 11012171) LineInFilter : Boolean;
    VAR
      TempEstimateLine@1100485003 : TEMPORARY Record 11072072;
    BEGIN
      //Determine if Estimate Line fits in filter of the 'Cost Type' line.
      IF (EstimateLine."Summary Line" = TRUE) THEN
        EXIT(FALSE);  //DP02080: skip summary lines from estimate, because they were created assuming that no summary will be activated

      TempEstimateLine := EstimateLine;
      TempEstimateLine.INSERT;

      TempEstimateLine.SETRANGE("Estimate No.", SummarySheetLine."Estimate No.");
      TempEstimateLine.SETFILTER("Sub-Estimate No.", SummarySheetLine."Sub-Estimate Filter");
      TempEstimateLine.SETFILTER(Part, SummarySheetLine."Part Filter");
      TempEstimateLine.SETFILTER("Line Status", SummarySheetLine."Line Status Filter");
      TempEstimateLine.SETFILTER("Rate Code", SummarySheetLine."Rate Filter");
      TempEstimateLine.SETFILTER(Discipline, SummarySheetLine."Discipline Filter");
      TempEstimateLine.SETFILTER("Trade Speciality", SummarySheetLine."Trade Speciality Filter");
      TempEstimateLine.SETFILTER("Wage Component", SummarySheetLine."Wage Component Filter");
      IF SummarySheetLine."Material Price Filter" <> '' THEN BEGIN
        TempEstimateLine.SETRANGE("Cost Type (Price)", TempEstimateLine."Cost Type (Price)"::Material);
        TempEstimateLine.SETFILTER("Net Cost Price", SummarySheetLine."Material Price Filter");
      END;
      TempEstimateLine.SETFILTER(Code, SummarySheetLine."Code Filter");

      IF SummarySheetLine."Cost Type" IN
        [SummarySheetLine."Cost Type"::Labor, SummarySheetLine."Cost Type"::"Just Hours", SummarySheetLine."Cost Type"::Total]
      THEN
        TempEstimateLine.SETFILTER("Cost Object Labor", SummarySheetLine."Cost Object Filter");

      IF SummarySheetLine."Cost Type" IN
        [SummarySheetLine."Cost Type"::Material, SummarySheetLine."Cost Type"::Subcontracting, SummarySheetLine."Cost Type"::Plant,
         SummarySheetLine."Cost Type"::Sundry, SummarySheetLine."Cost Type"::Total]
      THEN
        TempEstimateLine.SETFILTER("Cost Object Price", SummarySheetLine."Cost Object Filter");

      TempEstimateLine.SETFILTER(Recipe, '%1', '');

      LineInFilter := (NOT TempEstimateLine.ISEMPTY);  //C055105
      EXIT(LineInFilter);
    END;

    PROCEDURE SummaryLineInFilter@1100485001(SummarySheet@1100525000 : Record 11012172;SummarySheetLine@1100485000 : Record 11012171;Level@1100485003 : Integer;BaseAmount@1100485004 : Decimal;BaseHours@1100485006 : Decimal;VAR TotSurchargeAmount@1100525002 : Decimal;VAR TotSurchargeHours@1100525003 : Decimal);
    VAR
      TempSummarySheetLine@1100485001 : TEMPORARY Record 11012171;
      SummarySheetLine2@1100485002 : Record 11012171;
      SurchargeAmount@1100485005 : Decimal;
      SurchargeHours@1100485007 : Decimal;
    BEGIN
      //calculates 1 level subcharge: called recursive!

      TempSummarySheetLine."Estimate No." := SummarySheetLine."Estimate No.";
      TempSummarySheetLine.Summary := SummarySheetLine.Summary;
      TempSummarySheetLine."Row No." := SummarySheetLine."Row No.";
      TempSummarySheetLine.INSERT;

      TempSummarySheetLine2.SETRANGE("Estimate No.", SummarySheetLine."Estimate No.");
      TempSummarySheetLine2.SETRANGE(Summary, SummarySheetLine.Summary);
      IF TempSummarySheetLine2.FINDSET THEN
        REPEAT
          IF TempSummarySheetLine2."Row No." <> SummarySheetLine."Row No." THEN BEGIN
            TempSummarySheetLine.SETRANGE("Estimate No.", TempSummarySheetLine2."Estimate No.");
            TempSummarySheetLine.SETRANGE(Summary, TempSummarySheetLine2.Summary);
            TempSummarySheetLine.SETFILTER("Row No.", TempSummarySheetLine2."Surcharge Over Row");
            IF TempSummarySheetLine.FINDFIRST THEN BEGIN
              IF TempSummarySheetLine2.Type = TempSummarySheetLine2.Type::"Surcharge Amount" THEN BEGIN
                SurchargeAmount := BaseAmount * TempSummarySheetLine2."Surcharge Percentage" / 100;
                TotSurchargeAmount += SurchargeAmount;
                SummarySheetLine2.COPY(TempSummarySheetLine2); //Save
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine2, Level + 1, SurchargeAmount, 0, TotSurchargeAmount, TotSurchargeHours);
                TempSummarySheetLine2.COPY(SummarySheetLine2); //Retrieve
              END;
              IF TempSummarySheetLine2.Type = TempSummarySheetLine2.Type::"Surcharge Hours" THEN BEGIN
                SurchargeHours := BaseHours * TempSummarySheetLine2."Surcharge Percentage" / 100;
                IF SummarySheet."Summary Type" = SummarySheet."Summary Type"::Cost THEN BEGIN
                  TempSummarySheetLine2.CALCFIELDS("Cost Rate");
                  SurchargeAmount := SurchargeHours * TempSummarySheetLine2."Cost Rate";
                END ELSE BEGIN
                  TempSummarySheetLine2.CALCFIELDS("Sales Rate");
                  SurchargeAmount := SurchargeHours * TempSummarySheetLine2."Sales Rate";
                END;
                TotSurchargeHours += SurchargeHours;
                TotSurchargeAmount += SurchargeAmount;
                SummarySheetLine2.COPY(TempSummarySheetLine2); //Save
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine2, Level + 1, SurchargeAmount, SurchargeHours, TotSurchargeAmount, TotSurchargeHours);
                TempSummarySheetLine2.COPY(SummarySheetLine2); //Retrieve
              END;
            END;
          END;
        UNTIL TempSummarySheetLine2.NEXT = 0;
    END;

    PROCEDURE DetermineSurchRcpLine@1100485007(VAR EstimateRecipeLine@1100485000 : Record 11072075;SummarySheet@1100525002 : Record 11012172);
    VAR
      HoursCostOld@1100485006 : Decimal;
      HoursSalesOld@1100525000 : Decimal;
      LaborCostAmountOld@1100485002 : Decimal;
      LaborSalesAmountOld@1100525001 : Decimal;
    BEGIN
      //Search concerning Summary Sheet lines

      //save old values
      HoursCostOld := EstimateRecipeLine.Hours;
      HoursSalesOld := EstimateRecipeLine."Hours (Sales)";
      LaborCostAmountOld := EstimateRecipeLine."Labor Cost Amount";
      LaborSalesAmountOld := EstimateRecipeLine."Labor Sales Amount";

      IF EstimateRecipeLine."Cost Type (Price)" = EstimateRecipeLine."Cost Type (Price)"::Material THEN BEGIN
        EstimateRecipeLine."Subcontracting Cost Amount" := 0;
        EstimateRecipeLine."Subcontracting Sales Amount" := 0;
        EstimateRecipeLine."Plant Cost Amount" := 0;
        EstimateRecipeLine."Plant Sales Amount" := 0;
        EstimateRecipeLine."Sundry Cost Amount" := 0;
        EstimateRecipeLine."Sundry Sales Amount" := 0;
      END;
      IF EstimateRecipeLine."Cost Type (Price)" = EstimateRecipeLine."Cost Type (Price)"::Subcontracting THEN BEGIN
        EstimateRecipeLine."Material Cost Amount" := 0;
        EstimateRecipeLine."Material Sales Amount" := 0;
        EstimateRecipeLine."Plant Cost Amount" := 0;
        EstimateRecipeLine."Plant Sales Amount" := 0;
        EstimateRecipeLine."Sundry Cost Amount" := 0;
        EstimateRecipeLine."Sundry Sales Amount" := 0;
      END;
      IF EstimateRecipeLine."Cost Type (Price)" = EstimateRecipeLine."Cost Type (Price)"::Plant THEN BEGIN
        EstimateRecipeLine."Material Cost Amount" := 0;
        EstimateRecipeLine."Material Sales Amount" := 0;
        EstimateRecipeLine."Subcontracting Cost Amount" := 0;
        EstimateRecipeLine."Subcontracting Sales Amount" := 0;
        EstimateRecipeLine."Sundry Cost Amount" := 0;
        EstimateRecipeLine."Sundry Sales Amount" := 0;
      END;
      IF EstimateRecipeLine."Cost Type (Price)" = EstimateRecipeLine."Cost Type (Price)"::Sundry THEN BEGIN
        EstimateRecipeLine."Material Cost Amount" := 0;
        EstimateRecipeLine."Material Sales Amount" := 0;
        EstimateRecipeLine."Subcontracting Cost Amount" := 0;
        EstimateRecipeLine."Subcontracting Sales Amount" := 0;
        EstimateRecipeLine."Plant Cost Amount" := 0;
        EstimateRecipeLine."Plant Sales Amount" := 0;
      END;

      //Determine subcharges for each "Cost Type" line.
      TempSummarySheetLine1.SETRANGE(Type, TempSummarySheetLine1.Type::"Cost Type");
      IF TempSummarySheetLine1.FINDSET THEN
        REPEAT
          //these are the lines in which the Estimate Line exist.
          IF RcpLineInSummarySheetLineFilters(EstimateRecipeLine, TempSummarySheetLine1) THEN BEGIN
            IF (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Labor) OR
               (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              IF SummarySheet."Summary Type" = SummarySheet."Summary Type"::Cost THEN BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateRecipeLine."Labor Cost Amount", EstimateRecipeLine.Hours, TotSurchargeAmount, TotSurchargeHours);
                EstimateRecipeLine."Labor Cost Amount" += TotSurchargeAmount;
                EstimateRecipeLine.Hours += TotSurchargeHours;
              END ELSE BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateRecipeLine."Labor Sales Amount", EstimateRecipeLine."Hours (Sales)", TotSurchargeAmount, TotSurchargeHours);
                EstimateRecipeLine."Labor Sales Amount" += TotSurchargeAmount;
                EstimateRecipeLine."Hours (Sales)" += TotSurchargeHours;
              END;
            END;
            IF (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Material) OR
               (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              IF SummarySheet."Summary Type" = SummarySheet."Summary Type"::Cost THEN BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateRecipeLine."Material Cost Amount", EstimateRecipeLine.Hours, TotSurchargeAmount, TotSurchargeHours);
                EstimateRecipeLine."Material Cost Amount" += TotSurchargeAmount;
              END ELSE BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateRecipeLine."Material Sales Amount", EstimateRecipeLine."Hours (Sales)", TotSurchargeAmount, TotSurchargeHours);
                EstimateRecipeLine."Material Sales Amount" += TotSurchargeAmount;
              END;
            END;
            IF (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Subcontracting) OR
               (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              IF SummarySheet."Summary Type" = SummarySheet."Summary Type"::Cost THEN BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateRecipeLine."Subcontracting Cost Amount", EstimateRecipeLine.Hours, TotSurchargeAmount, TotSurchargeHours);
                EstimateRecipeLine."Subcontracting Cost Amount" += TotSurchargeAmount;
              END ELSE BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateRecipeLine."Subcontracting Sales Amount", EstimateRecipeLine."Hours (Sales)", TotSurchargeAmount, TotSurchargeHours);
                EstimateRecipeLine."Subcontracting Sales Amount" += TotSurchargeAmount;
              END;
            END;
            IF (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Plant) OR
               (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              IF SummarySheet."Summary Type" = SummarySheet."Summary Type"::Cost THEN BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateRecipeLine."Plant Cost Amount", EstimateRecipeLine.Hours, TotSurchargeAmount, TotSurchargeHours);
                EstimateRecipeLine."Plant Cost Amount" += TotSurchargeAmount;
              END ELSE BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateRecipeLine."Plant Sales Amount", EstimateRecipeLine."Hours (Sales)", TotSurchargeAmount, TotSurchargeHours);
                EstimateRecipeLine."Plant Sales Amount" += TotSurchargeAmount;
              END;
            END;
            IF (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Sundry) OR
               (TempSummarySheetLine1."Cost Type" = TempSummarySheetLine1."Cost Type"::Total)
            THEN BEGIN
              TotSurchargeAmount := 0;
              TotSurchargeHours := 0;
              IF SummarySheet."Summary Type" = SummarySheet."Summary Type"::Cost THEN BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateRecipeLine."Sundry Cost Amount", EstimateRecipeLine.Hours, TotSurchargeAmount, TotSurchargeHours);
                EstimateRecipeLine."Sundry Cost Amount" += TotSurchargeAmount;
              END ELSE BEGIN
                SummaryLineInFilter(SummarySheet, TempSummarySheetLine1, 0, EstimateRecipeLine."Sundry Sales Amount", EstimateRecipeLine."Hours (Sales)", TotSurchargeAmount, TotSurchargeHours);
                EstimateRecipeLine."Sundry Sales Amount" += TotSurchargeAmount;
              END;
            END;
          END;
        UNTIL TempSummarySheetLine1.NEXT = 0;

      EstimateRecipeLine."Cost Amount" :=
        EstimateRecipeLine."Labor Cost Amount" +
        EstimateRecipeLine."Material Cost Amount" +
        EstimateRecipeLine."Subcontracting Cost Amount" +
        EstimateRecipeLine."Plant Cost Amount" +
        EstimateRecipeLine."Sundry Cost Amount";

      EstimateRecipeLine."Sales Amount" :=
        EstimateRecipeLine."Labor Sales Amount" +
        EstimateRecipeLine."Material Sales Amount" +
        EstimateRecipeLine."Subcontracting Sales Amount" +
        EstimateRecipeLine."Plant Sales Amount" +
        EstimateRecipeLine."Sundry Sales Amount";

      IF HoursCostOld <> EstimateRecipeLine.Hours THEN
        IF EstimateRecipeLine.Quantity <> 0 THEN
          EstimateRecipeLine.Norm := EstimateRecipeLine.Hours / EstimateRecipeLine.Quantity;
      IF HoursSalesOld <> EstimateRecipeLine."Hours (Sales)" THEN
        IF EstimateRecipeLine."Quantity (Sales)" <> 0 THEN
          EstimateRecipeLine."Norm (Sales)" := EstimateRecipeLine."Hours (Sales)"/ EstimateRecipeLine."Quantity (Sales)";

      IF LaborCostAmountOld <> EstimateRecipeLine."Labor Cost Amount" THEN
        IF EstimateRecipeLine.Hours <> 0 THEN
          EstimateRecipeLine."Cost Rate" := EstimateRecipeLine."Labor Cost Amount" / EstimateRecipeLine.Hours;
      IF LaborSalesAmountOld <> EstimateRecipeLine."Labor Sales Amount" THEN
        IF EstimateRecipeLine."Hours (Sales)" <> 0 THEN
          EstimateRecipeLine."Sales Rate" := EstimateRecipeLine."Labor Sales Amount" / EstimateRecipeLine."Hours (Sales)";
    END;

    LOCAL PROCEDURE RcpLineInSummarySheetLineFilters@1100485008(EstimateRecipeLine@1100485000 : Record 11072075;SummarySheetLine@1100485001 : Record 11012171) LineInFilter : Boolean;
    VAR
      TempEstimateRecipeLine@1100485003 : TEMPORARY Record 11072075;
    BEGIN
      //Determine if Estimate Line fits in filter of the 'Cost Type' line.
      TempEstimateRecipeLine := EstimateRecipeLine;
      TempEstimateRecipeLine.INSERT;

      TempEstimateRecipeLine.SETRANGE("Estimate No.", SummarySheetLine."Estimate No.");
      TempEstimateRecipeLine.SETFILTER("Sub-Estimate No.", SummarySheetLine."Sub-Estimate Filter");
      TempEstimateRecipeLine.SETFILTER(Part, SummarySheetLine."Part Filter");
      TempEstimateRecipeLine.SETFILTER("Line Status", SummarySheetLine."Line Status Filter");
      TempEstimateRecipeLine.SETFILTER("Rate Code", SummarySheetLine."Rate Filter");
      TempEstimateRecipeLine.SETFILTER(Discipline, SummarySheetLine."Discipline Filter");
      TempEstimateRecipeLine.SETFILTER("Trade Speciality", SummarySheetLine."Trade Speciality Filter");
      TempEstimateRecipeLine.SETFILTER("Wage Component", SummarySheetLine."Wage Component Filter");
      IF SummarySheetLine."Material Price Filter" <> '' THEN BEGIN
        TempEstimateRecipeLine.SETRANGE("Cost Type (Price)", TempEstimateRecipeLine."Cost Type (Price)"::Material);
        TempEstimateRecipeLine.SETFILTER("Net Cost Price", SummarySheetLine."Material Price Filter");
      END;
      TempEstimateRecipeLine.SETFILTER(Code, SummarySheetLine."Code Filter");

      IF SummarySheetLine."Cost Type" IN
        [SummarySheetLine."Cost Type"::Labor, SummarySheetLine."Cost Type"::"Just Hours", SummarySheetLine."Cost Type"::Total]
      THEN
        TempEstimateRecipeLine.SETFILTER("Cost Object Labor", SummarySheetLine."Cost Object Filter");

      IF SummarySheetLine."Cost Type" IN
        [SummarySheetLine."Cost Type"::Material, SummarySheetLine."Cost Type"::Subcontracting, SummarySheetLine."Cost Type"::Plant,
         SummarySheetLine."Cost Type"::Sundry, SummarySheetLine."Cost Type"::Total]
      THEN
        TempEstimateRecipeLine.SETFILTER("Cost Object Price", SummarySheetLine."Cost Object Filter");

      LineInFilter := (NOT TempEstimateRecipeLine.ISEMPTY);  //C055105
      EXIT(LineInFilter);
    END;

    LOCAL PROCEDURE DetermineAmountRecipeEstLine@1100485017(VAR EstimateLine@1100485000 : Record 11072072;VAR EstimateLineTotal@1100525001 : Record 11072077;SummarySheet@1100525003 : Record 11012172;PrintTotalsBasedOn@1100525002 : 'Cost,Sales,Both');
    VAR
      EstimateRecipeLine@1100525000 : Record 11072075;
    BEGIN
      EstimateLine.Hours := 0;
      EstimateLine."Labor Cost Amount" := 0;
      EstimateLine."Material Cost Amount" := 0;
      EstimateLine."Subcontracting Cost Amount" := 0;
      EstimateLine."Plant Cost Amount" := 0;
      EstimateLine."Sundry Cost Amount" := 0;
      EstimateLine."Cost Amount" := 0;
      EstimateLine.Norm := 0;
      EstimateLine."Cost Rate" := 0;

      EstimateLine."Hours (Sales)" := 0;
      EstimateLine."Labor Sales Amount" := 0;
      EstimateLine."Material Sales Amount" := 0;
      EstimateLine."Subcontracting Sales Amount" := 0;
      EstimateLine."Plant Sales Amount" := 0;
      EstimateLine."Sundry Sales Amount" := 0;
      EstimateLine."Sales Amount" := 0;
      EstimateLine."Norm (Sales)" := 0;
      EstimateLine."Sales Rate" := 0;

      EstimateRecipeLine.SETRANGE("Estimate No.", EstimateLine."Estimate No.");
      EstimateRecipeLine.SETRANGE("Sub-Estimate No.", EstimateLine."Sub-Estimate No.");
      EstimateRecipeLine.SETRANGE("Part Group", EstimateLine."Part Group");
      EstimateRecipeLine.SETRANGE(Part, EstimateLine.Part);
      EstimateRecipeLine.SETRANGE("Estimate Line", EstimateLine."Line No.");
      IF EstimateRecipeLine.FINDSET THEN
        REPEAT
          DetermineSurchRcpLine(EstimateRecipeLine, SummarySheet);

          EstimateLine.Hours += EstimateRecipeLine.Hours * EstimateLine.Quantity;
          EstimateLine."Labor Cost Amount" += EstimateRecipeLine."Labor Cost Amount" * EstimateLine.Quantity;
          EstimateLine."Material Cost Amount" += EstimateRecipeLine."Material Cost Amount" * EstimateLine.Quantity;
          EstimateLine."Subcontracting Cost Amount" += EstimateRecipeLine."Subcontracting Cost Amount" * EstimateLine.Quantity;
          EstimateLine."Plant Cost Amount" += EstimateRecipeLine."Plant Cost Amount" * EstimateLine.Quantity;
          EstimateLine."Sundry Cost Amount" += EstimateRecipeLine."Sundry Cost Amount" * EstimateLine.Quantity;
          EstimateLine."Cost Amount" += EstimateRecipeLine."Cost Amount" * EstimateLine.Quantity;

          EstimateLine."Hours (Sales)" += EstimateRecipeLine."Hours (Sales)" * EstimateLine."Quantity (Sales)";
          EstimateLine."Labor Sales Amount" += EstimateRecipeLine."Labor Sales Amount" * EstimateLine."Quantity (Sales)";
          EstimateLine."Material Sales Amount" += EstimateRecipeLine."Material Sales Amount" * EstimateLine."Quantity (Sales)";
          EstimateLine."Subcontracting Sales Amount" += EstimateRecipeLine."Subcontracting Sales Amount" * EstimateLine."Quantity (Sales)";
          EstimateLine."Plant Sales Amount" += EstimateRecipeLine."Plant Sales Amount" * EstimateLine."Quantity (Sales)";
          EstimateLine."Sundry Sales Amount" += EstimateRecipeLine."Sundry Sales Amount" * EstimateLine."Quantity (Sales)";
          EstimateLine."Sales Amount" += EstimateRecipeLine."Sales Amount" * EstimateLine."Quantity (Sales)";
        UNTIL EstimateRecipeLine.NEXT = 0;

      IF EstimateLine.Quantity <> 0 THEN
        EstimateLine.Norm := EstimateLine.Hours / EstimateLine.Quantity;
      IF EstimateLine."Quantity (Sales)" <> 0 THEN
        EstimateLine."Norm (Sales)" := EstimateLine."Hours (Sales)" / EstimateLine."Quantity (Sales)";

      IF EstimateLine.Hours <> 0 THEN
        EstimateLine."Cost Rate" := EstimateLine."Labor Cost Amount" / EstimateLine.Hours;
      IF EstimateLine."Hours (Sales)" <> 0 THEN
        EstimateLine."Sales Rate" := EstimateLine."Labor Sales Amount" / EstimateLine."Hours (Sales)";

      IF NOT EstimateLineTotal.GET(
        EstimateLine."Estimate No.", EstimateLine."Sub-Estimate No.",
        EstimateLine."Part Group", EstimateLine.Part, EstimateLine."Line No.") THEN
        EstimateLineTotal.INIT;

        IF (PrintTotalsBasedOn = PrintTotalsBasedOn::Cost) OR (PrintTotalsBasedOn = PrintTotalsBasedOn::Both) THEN BEGIN
        EstimateLineTotal."Cumulative Hours" := EstimateLine.Hours * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Labor" := EstimateLine."Labor Cost Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Material" := EstimateLine."Material Cost Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Subcontracting" := EstimateLine."Subcontracting Cost Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Plant" := EstimateLine."Plant Cost Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Sundry" := EstimateLine."Sundry Cost Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Total" := EstimateLine."Cost Amount" * EstimateLine."Part Quantity";
      END;
      IF (PrintTotalsBasedOn = PrintTotalsBasedOn::Sales) OR (PrintTotalsBasedOn = PrintTotalsBasedOn::Both) THEN BEGIN
        EstimateLineTotal."Cumulative Hours (Sales)" := EstimateLine."Hours (Sales)" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Labor (Sales)" := EstimateLine."Labor Sales Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Material (Sales)" := EstimateLine."Material Sales Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Subcontr. (Sales)" := EstimateLine."Subcontracting Sales Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Plant (Sales)" := EstimateLine."Plant Sales Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Sundry (Sales)" := EstimateLine."Sundry Sales Amount" * EstimateLine."Part Quantity";
        EstimateLineTotal."Cumulative Total (Sales)" := EstimateLine."Sales Amount" * EstimateLine."Part Quantity";
      END;
    END;

    LOCAL PROCEDURE InitTmpSheetLines@1100525002(Estimate@1100525001 : Record 11012151;SummarySheet@1100525000 : Record 11012172);
    VAR
      SummarySheetLine@1100525002 : Record 11012171;
      Text000@1100525003 : TextConst 'ENU=NotAppl;NOR=NotAppl;SVE=NotAppl';
    BEGIN
      TempSummarySheetLine1.RESET;
      TempSummarySheetLine1.DELETEALL;
      TempSummarySheetLine2.RESET;
      TempSummarySheetLine2.DELETEALL;

      SummarySheetLine.SETRANGE("Estimate No.", Estimate."No.");
      SummarySheetLine.SETRANGE(Summary, SummarySheet.Summary);
      //SummarySheetLine.SETFILTER(Amount, '<>%1', 0);  //C038281
      IF SummarySheetLine.FINDSET THEN BEGIN
        REPEAT
          //C038281.sn
          IF (SummarySheetLine.Amount <> 0) OR
             (SummarySheetLine.Type = SummarySheetLine.Type::"Cost Type") THEN
          BEGIN
            TempSummarySheetLine1 := SummarySheetLine;
            TempSummarySheetLine1.INSERT;
          END;
          IF SummarySheetLine."Surcharge Over Row" <> Text000 THEN BEGIN
            TempSummarySheetLine2 := SummarySheetLine;
            TempSummarySheetLine2.INSERT;
          END;
          //C038281.en
        UNTIL SummarySheetLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InitEstimateLineTotals@1100529400(Estimate@1100529400 : Record 11012151;PrintTotalsBasedOn@1100529402 : 'Cost,Sales,Both');
    VAR
      EstimateLineTotal@1100529401 : Record 11072077;
    BEGIN
      EstimateLineTotal.SETRANGE("Estimate No.", Estimate."No.");
      IF EstimateLineTotal.FINDSET THEN BEGIN
        REPEAT
          IF (PrintTotalsBasedOn = PrintTotalsBasedOn::Cost) OR (PrintTotalsBasedOn = PrintTotalsBasedOn::Both) THEN BEGIN
            EstimateLineTotal."Calc. Cost Amount" := 0;
            EstimateLineTotal."Calc. Hours" := 0;
            EstimateLineTotal."Calc. Labor Amount" := 0;
            EstimateLineTotal."Calc. Material Amount" := 0;
            EstimateLineTotal."Calc. Subc. Amount" := 0;
            EstimateLineTotal."Calc. Plant Amount" := 0;
            EstimateLineTotal."Calc. Sundry Amount" := 0;
            EstimateLineTotal."Calc. Cum. Cost Amount" := 0;
            EstimateLineTotal."Calc. Cum. Hours" := 0;
            EstimateLineTotal."Calc. Cum. Labor Amount" := 0;
            EstimateLineTotal."Calc. Cum. Material Amount" := 0;
            EstimateLineTotal."Calc. Cum. Subc. Amount" := 0;
            EstimateLineTotal."Calc. Cum. Plant Amount" := 0;
            EstimateLineTotal."Calc. Cum. Sundry Amount" := 0;
          END;
          IF (PrintTotalsBasedOn = PrintTotalsBasedOn::Sales) OR (PrintTotalsBasedOn = PrintTotalsBasedOn::Both) THEN BEGIN
            EstimateLineTotal."Calc. Sales Amount" := 0;
            EstimateLineTotal."Calc. Hours (Sales)" := 0;
            EstimateLineTotal."Calc. Labor Amount (Sales)" := 0;
            EstimateLineTotal."Calc. Material Amount (Sales)" := 0;
            EstimateLineTotal."Calc. Subc. Amount (Sales)" := 0;
            EstimateLineTotal."Calc. Plant Amount (Sales)" := 0;
            EstimateLineTotal."Calc. Sundry Amount (Sales)" := 0;
            EstimateLineTotal."Calc. Cum. Sales Amount" := 0;
            EstimateLineTotal."Calc. Cum. Hours (Sales)" := 0;
            EstimateLineTotal."Calc. Cum. Labor Amnt (Sales)" := 0;
            EstimateLineTotal."Calc. Cum. Mat. Amnt (Sales)" := 0;
            EstimateLineTotal."Calc. Cum. Subc. Amnt (Sales)" := 0;
            EstimateLineTotal."Calc. Cum. Plant Amnt (Sales)" := 0;
            EstimateLineTotal."Calc. Cum. Sundry Amnt (Sales)" := 0;
          END;
          EstimateLineTotal.MODIFY;
        UNTIL EstimateLineTotal.NEXT = 0;
      END;
    END;

    BEGIN
    {
      DP01175
      Next functions are moved from report Open Budget to store calculated total in order to count totals
      - DetermineSurchEstLine
      - EstLineInSummarySheetLineFilters
      - SummaryLineInFilter
      - DetermineSurchRcpLine
      - RcpLineInSummarySheetLineFilters
      - DetermineAmountRecipeEstLine
      Main procedure:
      - CalculateOfferPrice
    }
    END.
  }
}

