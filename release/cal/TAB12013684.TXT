OBJECT Table 12013684 Add EX Column
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF513000,4PS;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    CaptionML=[ENU=Add ExFlow Column;
               SVE=Add ExFlow Kolumn];
  }
  FIELDS
  {
    { 5   ;   ;Type                ;Option        ;CaptionML=[ENU=Column Type;
                                                              SVE=Kolumntyp];
                                                   OptionCaptionML=[ENU=Line Type,Dimension,Misc.;
                                                                    SVE=Radtyp,Dimension,Annat];
                                                   OptionString=Line Type,Dimension,Misc;
                                                   Editable=No }
    { 6   ;   ;Source              ;Text50        ;CaptionML=[ENU=Source;
                                                              SVE=KÑlla];
                                                   Editable=No }
    { 10  ;   ;Code                ;Text50        ;CaptionML=[ENU=Code;
                                                              SVE=Kod];
                                                   Editable=Yes }
    { 12  ;   ;Format              ;Text250       ;CaptionML=[ENU=Format;
                                                              SVE=Format];
                                                   Editable=Yes }
    { 14  ;   ;Use Auto Completion ;Boolean       ;CaptionML=[ENU=Use Auto Completion;
                                                              SVE=Automatisk komplettering] }
    { 15  ;   ;Is Free Text        ;Boolean       ;CaptionML=[ENU=Is Free Text;
                                                              SVE=Fritext] }
    { 16  ;   ;Current Sort Order  ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("EX Column"."Sort Order" WHERE (Source=FIELD(Source)));
                                                   CaptionML=[ENU=Current Sort Order;
                                                              SVE=Nuvararande Sorteringsordning];
                                                   Editable=No }
    { 17  ;   ;Document Display Expr;Text250      ;CaptionML=[ENU=Document Display Expr;
                                                              SVE=Dokumentvisnings uttryck] }
    { 18  ;   ;Line Display Expr   ;Text250       ;CaptionML=[ENU=Line Display Expr;
                                                              SVE=Radvisnigns uttryck] }
    { 19  ;   ;Data Type           ;Text30        ;CaptionML=[ENU=Data Type;
                                                              SVE=Datatyp] }
    { 20  ;   ;Dimension Code      ;Code20        ;TableRelation=Dimension;
                                                   CaptionML=[ENU=Dimension;
                                                              SVE=Dimension] }
    { 22  ;   ;Exists              ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("EX Column" WHERE (Source=FIELD(Source)));
                                                   CaptionML=[ENU=Exists;
                                                              SVE=Existerar];
                                                   Editable=No }
    { 23  ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              SVE=Beskrivning];
                                                   Editable=No }
    { 24  ;   ;New Sort Order      ;Integer       ;CaptionML=[ENU=New Sort Order;
                                                              SVE=Ny Sorteringsordning] }
    { 25  ;   ;ExFlow Base Version ;Integer       ;CaptionML=[ENU=ExFlow Base Version;
                                                              SVE=ExFlow Basversion];
                                                   Editable=No }
    { 26  ;   ;New Visibility      ;Option        ;CaptionML=[ENU=New Visibility;
                                                              SVE=Ny Synlighet];
                                                   OptionCaptionML=[ENU=,Visible,Hidden;
                                                                    SVE=,Synlig,Dold];
                                                   OptionString=0,Visible,Hidden;
                                                   BlankZero=Yes }
    { 100 ;   ;Purchase Line Field ID;Integer     ;TableRelation=Field.No. WHERE (TableNo=CONST(39));
                                                   CaptionML=[ENU=Purchase Line Field ID;
                                                              SVE=Inkîpsrad fÑltnr];
                                                   Description=736 }
    { 101 ;   ;Is Autofill Trigger ;Option        ;OnValidate=BEGIN
                                                                TestIsDim;
                                                              END;

                                                   CaptionML=[ENU=Auto fill Column;
                                                              SVE=Fyll automatiskt];
                                                   OptionCaptionML=[ENU=Inactive,Default NAV;
                                                                    SVE=Inaktiv,Standard NAV];
                                                   OptionString=Inactive,Default dim }
    { 102 ;   ;Copy Dimenson On Split;Boolean     ;OnValidate=BEGIN
                                                                TestIsDim;
                                                              END;

                                                   CaptionML=[ENU=Copy dimension when splitting line;
                                                              SVE=Kopiera dimensioner vid delning av rad] }
  }
  KEYS
  {
    {    ;Type,Source                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text009@1100285003 : TextConst 'ENU=The column %1 is Added/modified;SVE=Kolumnen %1 Ñr Tillagd/Ñndrad';
      Text010@1100285002 : TextConst 'ENU=Sorting %1 already assigned;SVE=Sortering %1 finns redan';
      Text011@1100285001 : TextConst 'ENU=Sorting must be > 0;SVE=Sortering mÜste vara > 0';
      Text012@1100285000 : TextConst 'ENU=The Column %1 already exists;SVE=Kolumnen %1 finns redan';
      Text013@1100285004 : TextConst 'ENU=Do you wish to proceed adding Column %1?;SVE=Vill du lÑgga till kolumnen %1?';
      Text014@1100285005 : TextConst 'ENU=Aborted;SVE=ètgÑrden avbryten';
      Text015@1100285006 : TextConst 'ENU=The Column %1 doesnt exist.;SVE=Kolumnen %1 finns inte.';
      Text018@1100285009 : TextConst 'ENU=Sort Order Must be 0 for Line Type;SVE=Sorteringsordning mÜste vara 0 fîr Rad typen';
      Text019@1100285010 : TextConst 'ENU=Can not verify ExFlow version.;SVE=Kan inte verifiera ExFlow version.';
      Text020@1100285011 : TextConst 'ENU=Column requires ExFlow version %1. You are currently running %2;SVE=Kolumnen krÑver ExFlow version %1. Ni har version %2';
      Text028@1100285013 : TextConst 'ENU=Job (Project Granule);SVE=Projekt (Granul)';
      Text022@1100285014 : TextConst 'ENU=G/L Account;SVE=Redovisningskonto';
      Text023@1100285015 : TextConst 'ENU=Item;SVE=Artiklar';
      Text024@1100285016 : TextConst 'ENU=Fixed Asset;SVE=AnlÑggningstillgÜngar';
      Text025@1100285017 : TextConst 'ENU=Item Charges;SVE=Omkostnadsartiklar';
      Text026@1100285018 : TextConst 'ENU=SE Periodic Codes (Requires Swedish ExFlow Version);SVE=Periodisingskod';
      Text027@1100285019 : TextConst 'ENU=SE Periodic Date (Requires Swedish NAV/ExFlow ver.);SVE=Peridiskt startdatum';
      Text029@1100285021 : TextConst 'ENU=You may not modify settings for Line Types.;SVE=éndringar av instÑllningar fîr Radtyper tillÜts ej.';
      Text030@1100285022 : TextConst 'ENU=An Error occured uppdating visibilty setting. No changes saved.;SVE=Ett problem uppstod vid Ñndring av VisningsinstÑllning. Inga Ñndringar sparades.';
      Text031@1100285012 : TextConst 'ENU=Job Task (Project Granule);SVE=Projektaktivitet (Granul)';
      Text032@1100285020 : TextConst 'ENU=Customer (Invoicing);SVE=Kund (fakturering)';
      Text033@1100285023 : TextConst 'ENU=Invoicing code;SVE=Fakturakod';
      Text034@1100285024 : TextConst 'ENU=Customer Invoice (Yes/No);SVE=Kundfaktura (Ja/Nej)';
      Text035@1100285025 : TextConst 'ENU=Invoicing Amount;SVE=Kundfaktureringsbelopp';
      Text036@1100285026 : TextConst 'ENU=Invoicing Date;SVE=Kundfaktureringsdatum';
      Text037@1100285008 : TextConst 'ENU=Deferral code;SVE=Periodiseringskod (NAV2016 och nyare)';
      Text038@1100285007 : TextConst 'ENU=Deferral Start Date;SVE=Periodiseringsstartdatum';
      Text039@1100285027 : TextConst 'ENU=This option can only be used for dimensions.;SVE=Detta alternativ fÜr endast anvÑndas fîr dimensioner.';
      Text040@1100285028 : TextConst 'ENU=Description;SVE=Beskrivning';
      Text041@1100285029 : TextConst 'ENU=VAT Prod. Posting Group;SVE=Moms produktbokfîringsmall';

    PROCEDURE InitTable@1100285000();
    VAR
      Dimension@1100285006 : Record 348;
      EXColumn@1100285000 : Record 12013661;
      DimCode@1100285004 : Code[50];
      DimSourceNr@1100285007 : Integer;
    BEGIN
      DELETEALL;
      RESET;
      InitLineType;
      InsertColumn;

      WITH Dimension DO BEGIN
        SETRANGE(Blocked, FALSE);
        SETFILTER(Code, '<>%1', '');
        IF FINDSET THEN BEGIN
          REPEAT
            IF NOT ExColumnExist(Code) THEN BEGIN
              DimSourceNr := GetDimSourceNr(DimSourceNr);
              InsertDim(Code, 'DIM' + SYSTEM.FORMAT(DimSourceNr),FALSE,0);
            END ELSE BEGIN
              EXColumn.RESET;
              EXColumn.SETRANGE(Code, Code);
              IF EXColumn.FINDFIRST THEN;
                InsertDim(EXColumn.Code, EXColumn.Source,EXColumn."Copy Dimenson On Split",EXColumn."Is Autofill Trigger");
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE InsertDim@1100285001(DimCode@1100285000 : Code[50];DimSource@1100285001 : Text[50];CopyDimOnSplit@1100285003 : Boolean;AutoFill@1100285004 : Integer);
    VAR
      DividerChar@1100285002 : Char;
    BEGIN
      DividerChar := 8212;

      // Dim
      INIT;
      Type := Type::Dimension;
      "Dimension Code" := DimCode;
      Source := DimSource;
      Code := DimCode;
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(DimCode);
      "ExFlow Base Version" := 500000;
      "Use Auto Completion" := TRUE;
      "Copy Dimenson On Split" := CopyDimOnSplit;
      "Is Autofill Trigger" := AutoFill;
      INSERT(TRUE);
    END;

    PROCEDURE InsertColumn@1100285011();
    VAR
      Object@1100285001 : Record 2000000001;
      DividerChar@1100285000 : Char;
      _purchline@1100583000 : Record 39;
    BEGIN
      DividerChar := 8212;

      // GL
      INIT;
      Type := Type::"Line Type";
      Source := 'G_LACCOUNT';
      Code := 'G_LACCOUNT';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text022);
      "Line Display Expr" := 'LineType=1';
      "ExFlow Base Version" := 342000;
      "Use Auto Completion" := TRUE;
      INSERT(TRUE);

      // Item
      INIT;
      Type := Type::"Line Type";
      Source := 'ITEM';
      Code := 'ITEM';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text023);
      "Line Display Expr" := 'LineType=2';
      "ExFlow Base Version" := 342000;
      "Use Auto Completion" := TRUE;
      INSERT(TRUE);

      // FA
      INIT;
      Type := Type::"Line Type";
      Source := 'FIXEDASSET';
      Code := 'FIXEDASSET';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text024);
      "Line Display Expr" := 'LineType=4';
      "ExFlow Base Version" := 342000;
      "Use Auto Completion" := TRUE;
      INSERT(TRUE);

      // Charge
      INIT;
      Type := Type::"Line Type";
      Source := 'CHARGE';
      Code := 'CHARGE';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text025);
      "Line Display Expr" := 'LineType=5';
      "ExFlow Base Version" := 342000;
      "Use Auto Completion" := TRUE;
      INSERT(TRUE);

      // Deferral codes in 2016 and Periodic Code in 2015
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETRANGE(ID, 1700);
      IF Object.FINDFIRST THEN BEGIN
        // Deferral Code
        INIT;
        Type := Type::Misc;
        Source := 'PERCODE';
        Code := 'PERCODE';
        Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
        Description := STRSUBSTNO(Text037);
        "ExFlow Base Version" := 400000;
        "Use Auto Completion" := TRUE;
        INSERT(TRUE);

        // Return Deferral Periodic Date
        INIT;
        Type := Type::Misc;
        Source := 'PERDATE';
        Code := 'PERDATE';
        Format := '{0:d}';
        Description := STRSUBSTNO(Text038);
        "ExFlow Base Version" := 500000;
        "Use Auto Completion" := FALSE;
        "Is Free Text" := FALSE;
        "Data Type" := 'System.DateTime';
        INSERT(TRUE);
      END
      ELSE BEGIN
        // Periodic Code
        INIT;
        Type := Type::Misc;
        Source := 'PERCODE';
        Code := 'PERCODE';
        Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
        Description := STRSUBSTNO(Text026);
        "ExFlow Base Version" := 342000;
        "Use Auto Completion" := TRUE;
        INSERT(TRUE);

        // Periodic Date
        INIT;
        Type := Type::Misc;
        Source := 'PERDATE';
        Code := 'PERDATE';
        Format := '{0:d}';
        Description := STRSUBSTNO(Text027);
        "ExFlow Base Version" := 342000;
        "Use Auto Completion" := FALSE;
        "Is Free Text" := FALSE;
        "Data Type" := 'System.DateTime';
        INSERT(TRUE);
      END;

      // Job
      INIT;
      Type := Type::Misc;
      Source := 'JOB';
      Code := 'JOB';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text028);
      "ExFlow Base Version" := 344000;
      "Use Auto Completion" := TRUE;
      INSERT(TRUE);

      { ** 4PS
      // Job task
      INIT;
      Type := Type::Misc;
      Source := 'JOBTASK';
      Code := 'JOBTASK';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text031);
      "ExFlow Base Version" := 344000;
      "Use Auto Completion" := TRUE;
      INSERT(TRUE);
      ** }

      // Customer
      INIT;
      Type := Type::Misc;
      Source := 'CUSTOMER';
      Code := 'CUSTOMER';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text032);
      "ExFlow Base Version" := 344000;
      "Use Auto Completion" := TRUE;
      INSERT(TRUE);

      // Invoicing code
      INIT;
      Type := Type::Misc;
      Source := 'INV_CODE';
      Code := 'INV_CODE';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text033);
      "ExFlow Base Version" := 344000;
      "Use Auto Completion" := TRUE;
      "Purchase Line Field ID" := 12013614;
      INSERT(TRUE);

      // Customer invoice
      INIT;
      Type := Type::Misc;
      Source := 'CUSTOMERINV';
      Code := 'CUSTOMERINV';
      Format := '{0}';
      Description := STRSUBSTNO(Text034);
      "ExFlow Base Version" := 344000;
      "Use Auto Completion" := FALSE;
      "Data Type" := 'System.Boolean';
      "Purchase Line Field ID" := 12013611;
      INSERT(TRUE);

      // Invoicing amount
      INIT;
      Type := Type::Misc;
      Source := 'AMOUNTINV';
      Code := 'AMOUNTINV';
      Format := '{0:N}';
      Description := STRSUBSTNO(Text035);
      "ExFlow Base Version" := 344000;
      "Use Auto Completion" := FALSE;
      "Data Type" := 'System.Decimal';
      "Purchase Line Field ID" := 12013612;
      INSERT(TRUE);

      // Invoicing date
      INIT;
      Type := Type::Misc;
      Source := 'INVDATE';
      Code := 'INVDATE';
      Format := '{0:d}';
      Description := STRSUBSTNO(Text036);
      "ExFlow Base Version" := 344000;
      "Use Auto Completion" := FALSE;
      "Data Type" := 'System.DateTime';
      "Purchase Line Field ID" := 12013613;
      INSERT(TRUE);

      // Description
      INIT;
      Type := Type::Misc;
      Source := 'DESCRIPTION';
      Code := 'DESCRIPTION';
      Format := '{0}';
      Description := STRSUBSTNO(Text040);
      "ExFlow Base Version" := 510000;
      "Data Type" := 'System.String';
      "Use Auto Completion" := FALSE;
      "Is Free Text" := TRUE;
      INSERT(TRUE);

      //VAT Prod. Posting Group
      INIT;
      Type := Type::Misc;
      Source := 'VATPRODPOSTGRP';
      Code := 'VATPRODPOSTGRP';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := STRSUBSTNO(Text041);
      "ExFlow Base Version" := 510000;
      "Use Auto Completion" := TRUE;
      INSERT(TRUE);

      //>> 4PS
      INIT;
      Type := Type::Misc;
      Source := 'EXTCONTR_4PS';
      Code := 'EXTCONTR_4PS';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := _purchline.FIELDCAPTION("Extension Contract") +' (4PS)';
      "ExFlow Base Version" := 350000;
      "Use Auto Completion" := TRUE;
      "Purchase Line Field ID" := 11012080;
      INSERT(TRUE);

      // Element
      INIT;
      Type := Type::Misc;
      Source := 'ELEMENT_4PS';
      Code := 'ELEMENT_4PS';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := _purchline.FIELDCAPTION(Element) +' (4PS)';
      "ExFlow Base Version" := 350000;
      "Use Auto Completion" := TRUE;
      "Purchase Line Field ID" := 11012070;
      INSERT(TRUE);

      // Plot No.
      INIT;
      Type := Type::Misc;
      Source := 'PLOT_4PS';
      Code := 'PLOT_4PS';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := _purchline.FIELDCAPTION("Plot No.") +' (4PS)';
      "ExFlow Base Version" := 350000;
      "Use Auto Completion" := TRUE;
      "Purchase Line Field ID" := 11012085;
      INSERT(TRUE);

      INIT;
      Type := Type::Misc;
      Source := 'SERVICEORDERNO';
      Code := 'SERVICEORDERNO';
      Format := '{0}'+SYSTEM.FORMAT(DividerChar)+'{1}';
      Description := _purchline.FIELDCAPTION("Service Order No.") +' (4PS)';
      "ExFlow Base Version" := 350000;
      "Use Auto Completion" := TRUE;
      INSERT(TRUE);
      //<< 4PS
    END;

    PROCEDURE CreateColumn@1100285002(pAddNewColumn@1100285006 : Record 12013684);
    VAR
      lEXColumn@1100285002 : Record 12013661;
      lEXCodingRule@1100285001 : Record 12013660;
      lEXCodingRuleLine@1100285000 : Record 12013663;
      lNextLineNo@1100285003 : Integer;
      IntBaseVersion@1100285007 : Integer;
    BEGIN
      IF pAddNewColumn.Exists THEN
        ERROR(Text012,pAddNewColumn.Code);

      IF pAddNewColumn.Type = Type::"Line Type" THEN
        pAddNewColumn."New Sort Order" := 0
      ELSE BEGIN
        IF pAddNewColumn."New Sort Order" <> 0 THEN
          CheckSortOrderOk(pAddNewColumn.Type,pAddNewColumn."New Sort Order")
        ELSE
          pAddNewColumn."New Sort Order" := GetNextSortOrder;
      END;

      IF NOT CONFIRM(Text013,TRUE,pAddNewColumn.Code) THEN
        ERROR(Text014);

      IF pAddNewColumn.Type = Type::Misc THEN BEGIN
        GetBaseVersion(IntBaseVersion);
        IF pAddNewColumn."ExFlow Base Version" > IntBaseVersion THEN
          ERROR(Text020,pAddNewColumn."ExFlow Base Version",IntBaseVersion);
      END;

      lEXColumn.INIT;
      lEXColumn.TRANSFERFIELDS(pAddNewColumn);
      lEXColumn.ID := GetNextID;
      lEXColumn.Source :=  pAddNewColumn.Source;
      lEXColumn."Sort Order" := pAddNewColumn."New Sort Order";
      IF pAddNewColumn.Type = Type::"Line Type" THEN
        ActivateLineType(pAddNewColumn.Code);

      lEXColumn.INSERT(TRUE);

      lEXCodingRule.RESET;
      IF lEXCodingRule.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          lEXCodingRuleLine.RESET;
          lEXCodingRuleLine.SETRANGE(ID,lEXCodingRule.ID);
          IF lEXCodingRuleLine.FINDLAST THEN
            lNextLineNo := lEXCodingRuleLine."Line No." + 10000
          ELSE
            lNextLineNo := 10000;

          lEXCodingRuleLine.RESET;
          lEXCodingRuleLine.INIT;
          lEXCodingRuleLine.ID := lEXCodingRule.ID;
          lEXCodingRuleLine."Line No." := lNextLineNo;
          lEXCodingRuleLine."Column Code" := lEXColumn.Code;
          lEXCodingRuleLine."Column ID" := lEXColumn.ID;
          IF NOT lEXCodingRule.IsDeny THEN BEGIN
            lEXCodingRuleLine.All := TRUE;
            lEXCodingRuleLine.Empty := (lEXCodingRule."Is Validation") OR (lEXCodingRule."Is Filter");
          END;
          // Exception for job task
          IF lEXCodingRule."Is Filter" THEN
            //4PS
            IF (lEXCodingRuleLine."Column Code" = 'JOBTASK') OR (lEXCodingRuleLine."Column Code" = 'EXTCONTR_4PS') OR (lEXCodingRuleLine."Column Code" = 'ELEMENT_4PS') THEN BEGIN
            //4PS
              lEXCodingRuleLine.All := FALSE;
              lEXCodingRuleLine.Empty := FALSE;
            END;
          lEXCodingRuleLine."Column Source":= lEXColumn.Source;
          lEXCodingRuleLine.INSERT(TRUE);
          lEXCodingRuleLine.UpdateExpression;
        UNTIL lEXCodingRule.NEXT = 0;
      END;

      MESSAGE(Text009,pAddNewColumn.Code);
    END;

    PROCEDURE UpdateColumn@1100285009(pAddNewColumn@1100285006 : Record 12013684);
    VAR
      lEXColumn@1100285002 : Record 12013661;
    BEGIN
      IF NOT pAddNewColumn.Exists THEN
        ERROR(Text015,pAddNewColumn.Code);

      IF pAddNewColumn.Type = Type::"Line Type" THEN
        ERROR(Text029);

      lEXColumn.RESET;
      lEXColumn.SETRANGE(Source,pAddNewColumn.Source);
      lEXColumn.FINDFIRST;

      IF pAddNewColumn."New Sort Order" <> 0 THEN BEGIN
        CheckSortOrderOk(pAddNewColumn.Type,pAddNewColumn."New Sort Order");
        lEXColumn."Sort Order" := pAddNewColumn."New Sort Order";
      END;

      IF pAddNewColumn."New Visibility" = "New Visibility"::Visible THEN BEGIN
        IF UPPERCASE(lEXColumn."Document Display Expr") = 'FALSE' THEN
          lEXColumn."Document Display Expr" := '';
        IF UPPERCASE(lEXColumn."Line Display Expr") = 'FALSE' THEN
          lEXColumn."Line Display Expr" := '';
      END;

      IF pAddNewColumn."New Visibility" = "New Visibility"::Hidden THEN BEGIN
        IF UPPERCASE(lEXColumn."Line Display Expr") = '' THEN
          lEXColumn."Line Display Expr" := 'FALSE'
        ELSE IF UPPERCASE(lEXColumn."Document Display Expr") = '' THEN
          lEXColumn."Document Display Expr" := 'FALSE'
        ELSE
          ERROR(Text030);
      END;

      lEXColumn."Is Autofill Trigger" := pAddNewColumn."Is Autofill Trigger";
      lEXColumn."Copy Dimenson On Split" := pAddNewColumn."Copy Dimenson On Split";
      lEXColumn.MODIFY(TRUE);

      MESSAGE(Text009,pAddNewColumn.Code);
    END;

    PROCEDURE InitLineType@1100285004();
    VAR
      ExLineType@1100285000 : Record 12013642;
      ExLineType2@1100285001 : Record 12013642;
    BEGIN
      ExLineType.RESET;
      ExLineType.SETRANGE("Line Type",'G_LACCOUNT');
      IF NOT ExLineType.FINDFIRST THEN BEGIN
        ExLineType2.INIT;
        ExLineType2.Code := 1;
        ExLineType2."Line Type" := 'G_LACCOUNT';
        ExLineType2.Value := 1;
        ExLineType2."Document Display Expr" := 'FALSE';
        ExLineType2."Line Display Expr" := 'LineType>0';
        ExLineType2.INSERT(TRUE);
      END;

      ExLineType.RESET;
      ExLineType.SETRANGE("Line Type",'ITEM');
      IF NOT ExLineType.FINDFIRST THEN BEGIN
        ExLineType2.INIT;
        ExLineType2.Code := 2;
        ExLineType2."Line Type" := 'ITEM';
        ExLineType2.Value := 2;
        ExLineType2."Document Display Expr" := 'FALSE';
        ExLineType2.INSERT(TRUE);
      END;

      ExLineType.RESET;
      ExLineType.SETRANGE("Line Type",'FIXEDASSET');
      IF NOT ExLineType.FINDFIRST THEN BEGIN
        ExLineType2.INIT;
        ExLineType2.Code := 3;
        ExLineType2."Line Type" := 'FIXEDASSET';
        ExLineType2.Value := 3;
        ExLineType2."Document Display Expr" := 'FALSE';
        ExLineType2.INSERT(TRUE);
      END;

      ExLineType.RESET;
      ExLineType.SETRANGE("Line Type",'CHARGE');
      IF NOT ExLineType.FINDFIRST THEN BEGIN
        ExLineType2.INIT;
        ExLineType2.Code := 4;
        ExLineType2."Line Type" := 'CHARGE';
        ExLineType2.Value := 4;
        ExLineType2."Document Display Expr" := 'FALSE';
        ExLineType2.INSERT(TRUE);
      END;
    END;

    PROCEDURE ActivateLineType@1100285003(pCode@1100285000 : Code[50]);
    VAR
      ExLineType@1100285001 : Record 12013642;
    BEGIN
      ExLineType.RESET;
      ExLineType.SETRANGE("Line Type",pCode);
      ExLineType.FIND('-');
      ExLineType."Document Display Expr" := 'TRUE';
      ExLineType.MODIFY(TRUE);
    END;

    PROCEDURE GetNextID@1100285005() : Integer;
    VAR
      ExColumn@1100285001 : Record 12013661;
    BEGIN
      ExColumn.RESET;
      ExColumn.SETCURRENTKEY(ID);
      IF ExColumn.FINDLAST THEN
        EXIT(ExColumn.ID + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE GetNextSortOrder@1100285006() : Integer;
    VAR
      ExColumn@1100285000 : Record 12013661;
      lNdx@1100285001 : Integer;
    BEGIN
      lNdx := 0;
      ExColumn.RESET;
      ExColumn.SETCURRENTKEY(ID);
      IF ExColumn.FINDSET THEN
        REPEAT
          IF ExColumn."Sort Order" > lNdx THEN
            lNdx := ExColumn."Sort Order";
        UNTIL ExColumn.NEXT = 0;
      EXIT(lNdx + 1);
    END;

    PROCEDURE CheckSortOrderOk@1100285007(LineType@1100285003 : Integer;pSortOrder@1100285000 : Integer) : Boolean;
    VAR
      ExColumn@1100285001 : Record 12013661;
    BEGIN
      IF (LineType = 0) THEN BEGIN
        IF (pSortOrder <> 0) THEN
          ERROR(Text018);
      END ELSE BEGIN
        IF pSortOrder = 0 THEN
          ERROR(Text011);

        ExColumn.RESET;
        ExColumn.SETRANGE("Sort Order", pSortOrder);
        IF NOT ExColumn.ISEMPTY THEN
          ERROR(Text010,pSortOrder);
      END;
    END;

    PROCEDURE GetBaseVersion@1100285010(VAR IntBaseVer@1100285013 : Integer);
    VAR
      ExAppSetup@1100285012 : Record 12013601;
      BaseVersion@1100285011 : Text[250];
      HotfixNumbers@1100285010 : Text[250];
      DateForBaseVersion@1100285009 : Date;
      ModifiedObjectsExists@1100285008 : Boolean;
      VersionListForFirstModifiedObj@1100285007 : Text[250];
      DateForModObj@1100285006 : Date;
      BaseVersionStd@1100285005 : Text[250];
      HotfixNumbersStd@1100285004 : Text[250];
      DateForBaseVersionStd@1100285003 : Date;
      ModifiedObjectsExistsStd@1100285002 : Boolean;
      VersionListForFirstModObjStd@1100285001 : Text[250];
      DateForModObjStd@1100285000 : Date;
    BEGIN
      ExAppSetup.ReturnExFlowVersionData(BaseVersion,HotfixNumbers,DateForBaseVersion,
                                         ModifiedObjectsExists,VersionListForFirstModifiedObj,
                                         DateForModObj,BaseVersionStd,HotfixNumbersStd,DateForBaseVersionStd,ModifiedObjectsExistsStd,
                                         VersionListForFirstModObjStd,DateForModObjStd);
      IF NOT(EVALUATE(IntBaseVer,BaseVersion)) THEN
        ERROR(Text019);
    END;

    PROCEDURE IsVisible@1100285012() : Boolean;
    VAR
      ExColumn@1100285001 : Record 12013661;
    BEGIN
      ExColumn.RESET;
      ExColumn.SETRANGE(Source,Source);

      IF NOT ExColumn.FINDFIRST THEN
        EXIT(FALSE);

      IF (UPPERCASE(ExColumn."Document Display Expr") = 'FALSE') OR (UPPERCASE(ExColumn."Line Display Expr") = 'FALSE') THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ExColumnExist@1100285013(DimCode@1100285001 : Code[50]) : Boolean;
    VAR
      EXColumn@1100285000 : Record 12013661;
    BEGIN
      EXColumn.RESET;
      EXColumn.SETRANGE(Code, DimCode);
      IF EXColumn.FINDFIRST THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetDimSourceNr@1100285014(CurrDimSourceNr@1100285000 : Integer) ReturnDimNr : Integer;
    VAR
      EXColumn@1100285001 : Record 12013661;
      NotInUse@1100285002 : Boolean;
    BEGIN
      ReturnDimNr := CurrDimSourceNr + 1;
      REPEAT
        EXColumn.RESET;
        EXColumn.SETRANGE(Source, 'DIM' + SYSTEM.FORMAT(ReturnDimNr));
        IF EXColumn.ISEMPTY THEN
          NotInUse := TRUE
        ELSE
          ReturnDimNr := ReturnDimNr + 1;
      UNTIL NotInUse = TRUE;
    END;

    LOCAL PROCEDURE TestIsDim@1100285008();
    BEGIN
      IF STRPOS(Source,'DIM') = 0 THEN
        ERROR(Text039);
    END;

    BEGIN
    END.
  }
}

