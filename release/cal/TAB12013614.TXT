OBJECT Table 12013614 OCR Format Conversion
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF404000;
  }
  PROPERTIES
  {
    OnInsert=VAR
               OCRFormatConv@1100285000 : Record 12013614;
             BEGIN
               OCRFormatConv.RESET;
               OCRFormatConv.SETCURRENTKEY("Entry No.");
               OCRFormatConv.LOCKTABLE;
               IF OCRFormatConv.FINDLAST THEN
                 "Entry No." := OCRFormatConv."Entry No." + 1
               ELSE
                 "Entry No." := 1;
             END;

    CaptionML=[ENU=OCR Format Conversion;
               SVE=OCR Format konvertering];
  }
  FIELDS
  {
    { 2   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              SVE=L”pnr] }
    { 4   ;   ;Table               ;Option        ;OnValidate=BEGIN
                                                                IF Table <> xRec.Table THEN
                                                                  "Field No." := 0;
                                                              END;

                                                   CaptionML=[ENU=Table;
                                                              SVE=Tabell];
                                                   OptionCaptionML=[ENU=Header,Line;
                                                                    SVE=Huvud,Rad];
                                                   OptionString=Header,Line }
    { 5   ;   ;Field No.           ;Integer       ;TableRelation=IF (Table=CONST(Header)) Field.No. WHERE (TableNo=CONST(12013648))
                                                                 ELSE IF (Table=CONST(Line)) Field.No. WHERE (TableNo=CONST(12013649));
                                                   OnValidate=VAR
                                                                Field@1100285000 : Record 2000000041;
                                                              BEGIN
                                                                CASE Table OF
                                                                  Table::Header: Field.GET(DATABASE::"Exflow Purch. Import Header","Field No.");
                                                                  Table::Line: Field.GET(DATABASE::"Exflow Purch. Import Line","Field No.");
                                                                END;

                                                                IF NOT (Field.Type IN [Field.Type::Text,Field.Type::Code]) THEN
                                                                  ERROR(Text002);
                                                              END;

                                                   CaptionML=[ENU=Field No.;
                                                              SVE=F„ltnr.] }
    { 8   ;   ;In Example string   ;Text50        ;OnValidate=BEGIN
                                                                ConvertChars;
                                                                BuildOutFormat;
                                                              END;

                                                   CaptionML=[ENU=In-Example string;
                                                              SVE=In-Exempel str„ng] }
    { 10  ;   ;In Format           ;Text50        ;OnValidate=BEGIN
                                                                BuildOutFormat;
                                                              END;

                                                   CaptionML=[ENU=In Format;
                                                              SVE=In-format] }
    { 20  ;   ;Copy from position  ;Integer       ;OnValidate=BEGIN
                                                                BuildOutFormat;
                                                              END;

                                                   CaptionML=[ENU=Copy from position;
                                                              SVE=Kopiera fr†n position] }
    { 21  ;   ;Length              ;Integer       ;OnValidate=BEGIN
                                                                BuildOutFormat;
                                                              END;

                                                   CaptionML=[ENU=Length;
                                                              SVE=L„ngd] }
    { 25  ;   ;Delete Chars        ;Text30        ;OnValidate=BEGIN
                                                                BuildOutFormat;
                                                              END;

                                                   CaptionML=[ENU=Delete Characters;
                                                              SVE=Plocka bort tecken] }
    { 30  ;   ;Add Prefix          ;Text30        ;OnValidate=BEGIN
                                                                BuildOutFormat;
                                                              END;

                                                   CaptionML=[ENU=Add Prefix;
                                                              SVE=L„gg till prefix] }
    { 40  ;   ;Blank Value         ;Boolean       ;OnValidate=BEGIN
                                                                "Out Format" := '';
                                                                "Out Example string" := '';
                                                              END;

                                                   CaptionML=[ENU=Set out value to blank;
                                                              SVE=S„tt utv„rdet till blankt] }
    { 50  ;   ;Out Format          ;Text50        ;CaptionML=[ENU=Out Format;
                                                              SVE=Ut-format];
                                                   Editable=No }
    { 55  ;   ;Out Example string  ;Text50        ;OnValidate=BEGIN
                                                                ConvertChars;
                                                                BuildOutFormat;
                                                              END;

                                                   CaptionML=[ENU=Out-Example string;
                                                              SVE=Ut-Exempel str„ng];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100285000 : TextConst 'ENU=Use the characters "[" for alpha-numeric values and "]" for numeric.;SVE=Anv„nd tecknen "[" f”r alfa-numeriska v„rden och "]" f”r numeriska.';
      Text002@1100285001 : TextConst 'ENU=The field type must be either Text or Code!;SVE=F„lttypen m†ste antingen vara Text eller Code!';
      ImportManager@1100285002 : Codeunit 12013604;

    PROCEDURE GetHelp@1100285000() : Text[250];
    BEGIN
      EXIT(Text001);
    END;

    PROCEDURE BuildOutFormat@1100285001();
    VAR
      TempValue@1100285000 : Text[1024];
    BEGIN
      "Out Format" := "In Format";

      ImportManager.FormatConvertValue(Rec,"Out Format");
      TempValue := "In Example string";
      ImportManager.FormatConvertValue(Rec,TempValue);
      "Out Example string" := TempValue;
    END;

    PROCEDURE GetFieldName@1100285002() : Text[100];
    VAR
      Field@1100285000 : Record 2000000041;
    BEGIN
      CLEAR(Field);

      IF "Field No." = 0 THEN
        EXIT;

      CASE Table OF
        Table::Header: IF Field.GET(DATABASE::"Exflow Purch. Import Header","Field No.") THEN;
        Table::Line: IF Field.GET(DATABASE::"Exflow Purch. Import Line","Field No.") THEN;
      END;

      EXIT(Field."Field Caption");
    END;

    PROCEDURE ConvertChars@1100285003();
    BEGIN
      "In Format" := CONVERTSTR("In Example string",'0123465789',']]]]]]]]]]');
    END;

    BEGIN
    END.
  }
}

