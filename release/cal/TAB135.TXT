OBJECT Table 135 Acc. Sched. KPI Web Srv. Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Primary Key",'');
             END;

    OnModify=BEGIN
               "Last G/L Entry Included" := 0;
               "Data Last Updated" := 0DT;
             END;

    OnDelete=VAR
               AccSchedKPIWebSrvLine@1000 : Record 136;
             BEGIN
               AccSchedKPIWebSrvLine.DELETEALL;
             END;

    CaptionML=[ENU=Acc. Sched. KPI Web Srv. Setup;
               NOR=Oppsett av KPI-webtjeneste for kontoskjema;
               SVE=Installation av webbtjÑnst fîr KPI fîr kontouppst.];
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;OnValidate=BEGIN
                                                                TESTFIELD("Primary Key",'');
                                                              END;

                                                   CaptionML=[ENU=Primary Key;
                                                              NOR=Primërnõkkel;
                                                              SVE=PrimÑrnyckel] }
    { 2   ;   ;Forecasted Values Start;Option     ;CaptionML=[ENU=Forecasted Values Start;
                                                              NOR=Startdato for prognoseberegnede verdier;
                                                              SVE=Start fîr prognostiserade vÑrden];
                                                   OptionCaptionML=[ENU=After Latest Closed Period,After Current Date;
                                                                    NOR=Etter siste lukkede periode,Etter gjeldende dato;
                                                                    SVE=Efter senaste stÑngda period,Efter aktuellt datum];
                                                   OptionString=After Latest Closed Period,After Current Date }
    { 3   ;   ;G/L Budget Name     ;Code10        ;TableRelation="G/L Budget Name";
                                                   CaptionML=[ENU=G/L Budget Name;
                                                              NOR=Budsjettnavn;
                                                              SVE=Redov.budgetnamn] }
    { 4   ;   ;Period              ;Option        ;CaptionML=[ENU=Period;
                                                              NOR=Periode;
                                                              SVE=Period];
                                                   OptionCaptionML=[ENU=Fiscal Year - Last Locked Period,Current Fiscal Year,Current Calendar Year,Current Calendar Quarter,Current Month,Today,Current Period,Last Locked Period,Current Fiscal Year + 3 Previous Years;
                                                                    NOR=RegnskapsÜr - siste lÜste periode,Innevërende regnskapsÜr,Innevërende kalenderÜr,Innevërende kalenderkvartal,Innevërende mÜned,I dag,Innevërende periode,Siste lÜste periode,Gjeldende regnskapsÜr + tre foregÜende Ür;
                                                                    SVE=RÑkenskapsÜr - Senaste lÜsta period,Aktuellt rÑkenskapsÜr,Aktuellt kalenderÜr,Aktuellt kalenderkvartal,Aktuell mÜnad,I dag,Aktuell period,Senaste lÜsta period,Aktuellt rÑkenskapsÜr + 3 fîregÜende Ür];
                                                   OptionString=Fiscal Year - Last Locked Period,Current Fiscal Year,Current Calendar Year,Current Calendar Quarter,Current Month,Today,Current Period,Last Locked Period,Current Fiscal Year + 3 Previous Years }
    { 5   ;   ;View By             ;Option        ;InitValue=Month;
                                                   CaptionML=[ENU=View By;
                                                              NOR=Vis etter;
                                                              SVE=Visa per];
                                                   OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Period;
                                                                    NOR=Dag,Uke,MÜned,Kvartal,èr,Periode;
                                                                    SVE=Dag,Vecka,MÜnad,Kvartal,èr,Period];
                                                   OptionString=Day,Week,Month,Quarter,Year,Period }
    { 6   ;   ;Web Service Name    ;Text240       ;OnValidate=VAR
                                                                i@1001 : Integer;
                                                                s@1000 : Text;
                                                              BEGIN
                                                                IF "Web Service Name" = '' THEN
                                                                  EXIT;
                                                                s := LOWERCASE("Web Service Name");
                                                                FOR i := 1 TO STRLEN(s) DO
                                                                  IF NOT (s[i] IN ['a'..'z','0'..'9','-']) THEN
                                                                    ERROR(ServiceNameErr);
                                                              END;

                                                   CaptionML=[ENU=Web Service Name;
                                                              NOR=Webtjenestenavn;
                                                              SVE=WebbtjÑnstnamn] }
    { 7   ;   ;Published           ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Web Service" WHERE (Object Type=CONST(Page),
                                                                                          Object ID=CONST(197),
                                                                                          Published=CONST(Yes)));
                                                   CaptionML=[ENU=Published;
                                                              NOR=Publisert;
                                                              SVE=Publicerat];
                                                   Editable=No }
    { 8   ;   ;Data Last Updated   ;DateTime      ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Data Last Updated;
                                                              NOR=Data sist oppdatert];
                                                   Editable=No }
    { 9   ;   ;Last G/L Entry Included;Integer    ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Last G/L Entry Included;
                                                              NOR=Siste finanspost inkludert];
                                                   Editable=No }
    { 10  ;   ;Data Time To Live (hours);Integer  ;InitValue=24;
                                                   OnValidate=BEGIN
                                                                IF "Data Time To Live (hours)" = 0 THEN
                                                                  "Data Time To Live (hours)" := 4;
                                                              END;

                                                   CaptionML=[ENU=Data Time To Live (hours);
                                                              NOR=Datatid til direkte (timer)] }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ServiceNameErr@1000 : TextConst 'ENU=The service name may only contain letters A-Z, a-z, digits 0-9, and hyphens (-). No other characters are allowed.;NOR=Tjenestenavnet kan bare inneholde bokstavene A-Z/a-z, sifrene 0-9 og bindestreker (-). Ingen andre tegn er tillatt.;SVE=Det hÑr tjÑnstnamnet fÜr bara innehÜlla bokstÑverna A-Z, a-z, siffrorna 0-9 och bindestreck (-). Inga andra tecken tillÜts.';

    [External]
    PROCEDURE GetPeriodLength@7(VAR NoOfLines@1003 : Integer;VAR StartDate@1004 : Date;VAR EndDate@1005 : Date);
    VAR
      AccountingPeriod@1002 : Record 50;
      TotalNoOfDays@1000 : Integer;
    BEGIN
      CASE Period OF
        Period::"Fiscal Year - Last Locked Period":
          GetFiscalYear(GetLastClosedAccDate,StartDate,EndDate);
        Period::"Current Fiscal Year":
          GetFiscalYear(WORKDATE,StartDate,EndDate);
        Period::"Current Period":
          BEGIN
            AccountingPeriod.SETFILTER("Starting Date",'<=%1',WORKDATE);
            IF AccountingPeriod.FINDLAST THEN
              StartDate := AccountingPeriod."Starting Date";
            AccountingPeriod.SETRANGE("Starting Date");
            IF AccountingPeriod.FIND('>') THEN
              EndDate := AccountingPeriod."Starting Date" - 1
            ELSE
              EndDate := CALCDATE('<CM>',StartDate);
          END;
        Period::"Last Locked Period":
          BEGIN
            AccountingPeriod.SETFILTER("Starting Date",'<=%1',GetLastClosedAccDate);
            IF AccountingPeriod.FINDLAST THEN
              StartDate := AccountingPeriod."Starting Date";
            AccountingPeriod.SETRANGE("Starting Date");
            IF AccountingPeriod.FIND('>') THEN
              EndDate := AccountingPeriod."Starting Date" - 1
            ELSE
              EndDate := CALCDATE('<CM>',StartDate);
          END;
        Period::"Current Calendar Year":
          BEGIN
            StartDate := CALCDATE('<-CY>',WORKDATE);
            EndDate := CALCDATE('<CY>',StartDate);
          END;
        Period::"Current Calendar Quarter":
          BEGIN
            StartDate := CALCDATE('<-CQ>',WORKDATE);
            EndDate := CALCDATE('<CQ>',StartDate);
          END;
        Period::"Current Month":
          BEGIN
            StartDate := CALCDATE('<-CM>',WORKDATE);
            EndDate := CALCDATE('<CM>',StartDate);
          END;
        Period::Today:
          BEGIN
            StartDate := WORKDATE;
            EndDate := WORKDATE;
          END;
        Period::"Current Fiscal Year + 3 Previous Years":
          BEGIN
            GetFiscalYear(WORKDATE,StartDate,EndDate);
            StartDate := CALCDATE('<-3Y>',StartDate);
            AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
            IF AccountingPeriod.FINDFIRST THEN // Get oldest accounting year
              IF AccountingPeriod."Starting Date" > StartDate THEN
                StartDate := AccountingPeriod."Starting Date";
          END;
      END;
      TotalNoOfDays := EndDate - StartDate + 1;

      CASE "View By" OF
        "View By"::Period:
          BEGIN
            AccountingPeriod.RESET;
            AccountingPeriod.SETRANGE("Starting Date",StartDate,EndDate);
            NoOfLines := AccountingPeriod.COUNT;
          END;
        "View By"::Year:
          NoOfLines := CalcNoOfLines(365,TotalNoOfDays);
        "View By"::Quarter:
          NoOfLines := CalcNoOfLines(90,TotalNoOfDays);
        "View By"::Month:
          NoOfLines := CalcNoOfLines(30,TotalNoOfDays);
        "View By"::Week:
          NoOfLines := CalcNoOfLines(7,TotalNoOfDays);
        "View By"::Day:
          NoOfLines := CalcNoOfLines(1,TotalNoOfDays);
      END;

      IF NoOfLines = 0 THEN
        NoOfLines := 1;
    END;

    LOCAL PROCEDURE GetFiscalYear@13(Date@1000 : Date;VAR StartDate@1001 : Date;VAR EndDate@1002 : Date);
    VAR
      AccountingPeriod@1003 : Record 50;
    BEGIN
      StartDate := Date;
      AccountingPeriod.SETFILTER("Starting Date",'<=%1',Date);
      AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
      IF AccountingPeriod.FINDLAST THEN
        StartDate := AccountingPeriod."Starting Date";
      AccountingPeriod.SETRANGE("Starting Date");
      IF AccountingPeriod.FIND('>') THEN
        EndDate := AccountingPeriod."Starting Date" - 1
      ELSE
        EndDate := CALCDATE('<1Y-1D>',StartDate);
    END;

    LOCAL PROCEDURE CalcNoOfLines@14(NoOfDaysPerLine@1000 : Integer;TotalNoOfDays@1001 : Integer) : Integer;
    BEGIN
      EXIT(TotalNoOfDays DIV NoOfDaysPerLine);
    END;

    [External]
    PROCEDURE CalcNextStartDate@4(OrgStartDate@1000 : Date;OffSet@1001 : Integer) : Date;
    VAR
      AccountingPeriod@1004 : Record 50;
      DateCalc@1003 : DateFormula;
      DateCalcStr@1002 : Text;
    BEGIN
      IF OffSet = 0 THEN
        EXIT(OrgStartDate);

      CASE "View By" OF
        "View By"::Period:
          BEGIN
            AccountingPeriod."Starting Date" := OrgStartDate;
            AccountingPeriod.FIND('=><');
            AccountingPeriod.NEXT(OffSet);
            EXIT(AccountingPeriod."Starting Date")
          END;
        "View By"::Year:
          DateCalcStr := '<%1Y>';
        "View By"::Quarter:
          DateCalcStr := '<%1Q>';
        "View By"::Month:
          DateCalcStr := '<%1M>';
        "View By"::Week:
          DateCalcStr := '<%1W>';
        "View By"::Day:
          DateCalcStr := '<%1D>';
      END;

      EVALUATE(DateCalc,STRSUBSTNO(DateCalcStr,OffSet));
      EXIT(CALCDATE(DateCalc,OrgStartDate));
    END;

    [External]
    PROCEDURE GetLastClosedAccDate@1() : Date;
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      GLSetup.GET;
      IF GLSetup."Allow Posting From" <> 0D THEN
        EXIT(GLSetup."Allow Posting From" - 1);
      EXIT(WORKDATE);
    END;

    [External]
    PROCEDURE GetLastBudgetChangedDate@2() : Date;
    VAR
      GLBudgetEntry@1001 : Record 96;
    BEGIN
      IF "G/L Budget Name" <> '' THEN
        GLBudgetEntry.SETRANGE("Budget Name","G/L Budget Name");
      GLBudgetEntry.SETCURRENTKEY("Last Date Modified","Budget Name");
      IF GLBudgetEntry.FINDLAST THEN
        EXIT(GLBudgetEntry."Last Date Modified");
      EXIT(0D);
    END;

    PROCEDURE PublishWebService@8();
    VAR
      WebService@1000 : Record 2000000076;
      WebServiceManagement@1001 : Codeunit 9750;
      PermissionManager@1002 : Codeunit 9002;
    BEGIN
      TESTFIELD("Web Service Name");
      DeleteWebService;

      IF PermissionManager.SoftwareAsAService THEN BEGIN
        WebServiceManagement.CreateTenantWebService(WebService."Object Type"::Page,
          PAGE::"Acc. Sched. KPI Web Service","Web Service Name",TRUE);
        WebServiceManagement.CreateTenantWebService(WebService."Object Type"::Query,
          QUERY::"Dimension Sets",'',TRUE);
      END ELSE BEGIN
        WebServiceManagement.CreateWebService(WebService."Object Type"::Page,
          PAGE::"Acc. Sched. KPI Web Service","Web Service Name",TRUE);
        WebServiceManagement.CreateWebService(WebService."Object Type"::Query,
          QUERY::"Dimension Sets",'',TRUE);
      END;
    END;

    PROCEDURE DeleteWebService@12();
    VAR
      WebService@1000 : Record 2000000076;
      TenantWebService@1001 : Record 2000000168;
      PermissionManager@1002 : Codeunit 9002;
    BEGIN
      IF PermissionManager.SoftwareAsAService THEN BEGIN
        TenantWebService.SETRANGE("Object Type",WebService."Object Type"::Page);
        TenantWebService.SETRANGE("Object ID",PAGE::"Acc. Sched. KPI Web Service");
        TenantWebService.SETRANGE("Service Name","Web Service Name");
        IF TenantWebService.ISEMPTY THEN
          TenantWebService.SETRANGE("Service Name");
        MarkAndResetTenantWebService(TenantWebService);

        TenantWebService.SETRANGE("Object Type",WebService."Object Type"::Page);
        TenantWebService.SETRANGE("Object ID",PAGE::"Acc. Sched. KPI WS Dimensions");
        MarkAndResetTenantWebService(TenantWebService);

        TenantWebService.SETRANGE("Object Type",WebService."Object Type"::Query);
        TenantWebService.SETRANGE("Object ID",QUERY::"Dimension Sets");
        MarkAndResetTenantWebService(TenantWebService);

        TenantWebService.MARKEDONLY(TRUE);
        TenantWebService.DELETEALL;
      END ELSE BEGIN
        WebService.SETRANGE("Object Type",WebService."Object Type"::Page);
        WebService.SETRANGE("Object ID",PAGE::"Acc. Sched. KPI Web Service");
        WebService.SETRANGE("Service Name","Web Service Name");
        IF WebService.ISEMPTY THEN
          WebService.SETRANGE("Service Name");
        MarkAndReset(WebService);

        WebService.SETRANGE("Object Type",WebService."Object Type"::Page);
        WebService.SETRANGE("Object ID",PAGE::"Acc. Sched. KPI WS Dimensions");
        MarkAndReset(WebService);

        WebService.SETRANGE("Object Type",WebService."Object Type"::Query);
        WebService.SETRANGE("Object ID",QUERY::"Dimension Sets");
        MarkAndReset(WebService);

        WebService.MARKEDONLY(TRUE);
        WebService.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE MarkAndReset@25(VAR WebService@1000 : Record 2000000076);
    BEGIN
      IF WebService.FINDSET THEN
        REPEAT
          WebService.MARK(TRUE);
        UNTIL WebService.NEXT = 0;
      WebService.SETRANGE("Object Type");
      WebService.SETRANGE("Object ID");
      WebService.SETRANGE("Service Name");
    END;

    LOCAL PROCEDURE MarkAndResetTenantWebService@3(VAR TenantWebService@1000 : Record 2000000168);
    BEGIN
      IF TenantWebService.FINDSET THEN
        REPEAT
          TenantWebService.MARK(TRUE);
        UNTIL TenantWebService.NEXT = 0;
      TenantWebService.SETRANGE("Object Type");
      TenantWebService.SETRANGE("Object ID");
      TenantWebService.SETRANGE("Service Name");
    END;

    BEGIN
    END.
  }
}

