OBJECT Page 11229932 Bing Maps Nearby Orders
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Bing Maps Optionen in der NÑhe;
               ENU=Bing Maps Nearby Options;
               NLD=Bing Maps in de omgeving instellingen];
    SourceTable=Table11072392;
    OnInit=BEGIN
             ServiceOrderTableIDText := FORMAT(DATABASE::"Service Order");
             ServiceObjectTableIDText := FORMAT(DATABASE::"Service-Object");
             ServiceOrderTableIDInt := DATABASE::"Service Order";
             ServiceObjectTableIDInt := DATABASE::"Service-Object";
           END;

    OnOpenPage=BEGIN
                 IF NOT GET(USERID) THEN BEGIN
                   "User ID" := USERID;
                   INSERT;
                 END;
               END;

    OnAfterGetRecord=BEGIN
                       PrioFilter := "Priority Filter";
                     END;

    ActionList=ACTIONS
    {
      { 1100525005;  ;ActionContainer;
                      Name=Actions;
                      CaptionML=[DEU=Aktionen;
                                 ENU=Actions;
                                 NLD=Acties;
                                 NOR=Handlinger;
                                 SVE=ètgÑrder];
                      ActionContainerType=NewDocumentItems }
      { 1100525006;1 ;Action    ;
                      Name=Update Map;
                      CaptionML=[DEU=Karte aktualisieren.;
                                 ENU=Update Map;
                                 NLD=Werk kaart bij];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Map;
                      OnAction=BEGIN
                                 handleMapLoaded;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100525000;;Container;
                Name=Container;
                CaptionML=[DEU=Container;
                           ENU=Container;
                           NLD=Container;
                           NOR=Container;
                           SVE=BehÜllare];
                ContainerType=ContentArea }

    { 1100525009;1;Group  ;
                CaptionML=[DEU=Optionen;
                           ENU=Options;
                           NLD=Opties;
                           NOR=Alternativer;
                           SVE=Alternativ];
                GroupType=Group }

    { 1100525001;2;Field  ;
                SourceExpr=Timehorizon }

    { 1100525002;2;Field  ;
                SourceExpr=Range }

    { 1100525003;2;Field  ;
                Lookup=Yes;
                SourceExpr="Max Actual Reference Point";
                LookupPageID=Reference Points }

    { 1100525004;2;Field  ;
                Name=Priority Filter;
                SourceExpr=PrioFilter;
                OnValidate=BEGIN
                             "Priority Filter" := PrioFilter;
                           END;

                OnLookup=VAR
                           ServicePriority@1100525002 : Record 11012829;
                         BEGIN
                           IF PAGE.RUNMODAL(0, ServicePriority) = ACTION::LookupOK THEN BEGIN
                             Text := ServicePriority.Code;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 1100525010;2;Field  ;
                SourceExpr="Discipline Filter" }

    { 1100525007;1;Group  ;
                CaptionML=[DEU=Karte;
                           ENU=Map;
                           NLD=Kaart];
                GroupType=Group }

    { 1100525008;2;Field  ;
                Name=Map;
                CaptionML=[DEU=Karte;
                           ENU=Map;
                           NLD=Kaart];
                ControlAddIn=[Fps.Nav.Addin.BingMaps;PublicKeyToken=024bd013665211e9] }

  }
  CODE
  {
    VAR
      originalLatitude@1100525002 : Code[255];
      originalLongitude@1100525001 : Code[255];
      BingMapsHandler@1100525000 : Codeunit 11012485;
      ServiceObjectTableIDText@1100525005 : Text[30];
      ServiceOrderTableIDText@1100525007 : Text[30];
      Text001@1100525008 : TextConst 'DEU=Bing Maps konfigurieren.;ENU=Configure Bing Maps.;NLD=Stel Bing Maps in.';
      ServiceObjectTableIDInt@1100525009 : Integer;
      ServiceOrderTableIDInt@1100525010 : Integer;
      Text002@1100525004 : TextConst 'DEU=Nach-Plan;ENU=Afterplan;NLD=Naplannen';
      originalServiceOrder@1100525006 : Record 11012823;
      Text003@1100525003 : TextConst 'DEU=%1 (Aktueller Serviceauftrag);ENU=%1 (Current Service Order);NLD=%1 (huidige service order)';
      PrioFilter@1100525011 : Code[30];

    PROCEDURE setOriginalLatLng@1100525001(latitude@1100525000 : Code[255];longitude@1100525001 : Code[255]);
    BEGIN
      originalLatitude := latitude;
      originalLongitude := longitude;
    END;

    LOCAL PROCEDURE addLocationPinToMap@1100525004(ServiceOrder@1100525001 : Record 11012823;Colour@1100525004 : Text;SOLatitude@1100525003 : Code[20];SOLongitude@1100525005 : Code[20]);
    VAR
      titleValue@1100525000 : Text;
      descriptionValue@1100525002 : Text;
      ReturnType@1100525006 : 'NAV,FSA';
    BEGIN
      descriptionValue := BingMapsHandler.BuildDescription(ServiceOrder.RECORDID, ServiceOrderTableIDInt, ReturnType::NAV);

      IF originalServiceOrder."No." = ServiceOrder."No." THEN BEGIN
        titleValue := STRSUBSTNO(Text003, BingMapsHandler.GetValueFromField(ServiceOrder.RECORDID, ServiceOrderTableIDInt,
                        BingMapsHandler.GetFieldIDForTitle(ServiceOrderTableIDInt, ReturnType::NAV)));
        CurrPage.Map.addPinToMapLatLng(ServiceOrder."No.", titleValue, 'original-service-order', descriptionValue,
          Colour, SOLatitude, SOLongitude);
      END ELSE BEGIN
        titleValue := BingMapsHandler.GetValueFromField(ServiceOrder.RECORDID, ServiceOrderTableIDInt,
                        BingMapsHandler.GetFieldIDForTitle(ServiceOrderTableIDInt, ReturnType::NAV));
        CurrPage.Map.addPinToMapLatLng(ServiceOrder."No.", titleValue, ServiceOrderTableIDText, descriptionValue,
          Colour, SOLatitude, SOLongitude)
      END;
    END;

    LOCAL PROCEDURE handleMapLoaded@1100525005();
    VAR
      colour@1100525003 : Code[10];
      filteredServiceOrders@1100525004 : Record 11012823;
      ServiceOrderExtension@1100525005 : Record 11071727;
    BEGIN
      CurrPage.Map.reset;
      filteredServiceOrders.RESET;
      filteredServiceOrders.SETFILTER("Starting Date", '%1..%2', WORKDATE, CALCDATE(Timehorizon, WORKDATE));
      IF PrioFilter <> '' THEN
        filteredServiceOrders.SETFILTER(Priority, PrioFilter);
      filteredServiceOrders.SETFILTER("Actual Reference Point", '0..%1', "Max Actual Reference Point");
      IF "Discipline Filter" <> '' THEN
        filteredServiceOrders.SETFILTER(Discipline, "Discipline Filter");
      IF filteredServiceOrders.FINDSET THEN
        REPEAT
          IF ServiceOrderExtension.GET(filteredServiceOrders."No.") THEN BEGIN
            colour := BingMapsHandler.GetColour(filteredServiceOrders);
            IF (ServiceOrderExtension.Latitude <> '') AND (ServiceOrderExtension.Longitude <> '') THEN
              IF BingMapsHandler.GetDistanceBetweenPoints(ServiceOrderExtension.Latitude, ServiceOrderExtension.Longitude,
                  originalLatitude, originalLongitude) < Range THEN
                addLocationPinToMap(filteredServiceOrders, colour, ServiceOrderExtension.Latitude, ServiceOrderExtension.Longitude);
          END;
        UNTIL filteredServiceOrders.NEXT = 0;
    END;

    LOCAL PROCEDURE PlanCurrentServiceOrderAfterSelectedServiceOrder@1100525000(ServiceOrderNo@1100525000 : Code[30]);
    VAR
      SelectedServiceOrder@1100525001 : Record 11012823;
      WorkOrder@1100525002 : Record 11229279;
    BEGIN
      IF SelectedServiceOrder.GET(ServiceOrderNo) THEN BEGIN
        WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
        WorkOrder.SETRANGE("Source No.", originalServiceOrder."No.");
        IF WorkOrder.FINDLAST THEN BEGIN
          IF (SelectedServiceOrder."Ending Date" <> 0D) AND (SelectedServiceOrder."Ending Time" <> 0T) THEN BEGIN
            originalServiceOrder."Starting Time" := SelectedServiceOrder."Ending Time";
            originalServiceOrder."Starting Date" := SelectedServiceOrder."Starting Date";
            WorkOrder."Starting Date/Time" := CREATEDATETIME(SelectedServiceOrder."Ending Date", SelectedServiceOrder."Ending Time");
          END ELSE BEGIN
            originalServiceOrder."Starting Time" := TIME;
            originalServiceOrder."Starting Date" := TODAY;
            WorkOrder."Starting Date/Time" := CURRENTDATETIME;
          END;
          IF SelectedServiceOrder."Employee No." <> '' THEN BEGIN
            originalServiceOrder."Employee No." := SelectedServiceOrder."Employee No.";
            originalServiceOrder."Employee Name" := SelectedServiceOrder."Employee Name";
          END;
          WorkOrder.MODIFY;
          originalServiceOrder.MODIFY;
          CurrPage.CLOSE;
        END;
      END;
    END;

    PROCEDURE setOriginalServiceOrder@1100525007(ServiceOrder@1100525000 : Record 11012823);
    BEGIN
      originalServiceOrder := ServiceOrder;
    END;

    EVENT Map@-1100525008::ControlAddInReady@20();
    VAR
      BingMapsSetup@1100525000 : Page 11127140;
    BEGIN
      IF BingMapsHandler.SetupIsDoneAndEnabled THEN
        CurrPage.Map.setApiKey(BingMapsHandler.GetApiKey(CurrPage.OBJECTID(FALSE)))
      ELSE
        BEGIN
          MESSAGE(Text001);
          BingMapsSetup.RUN;
          CurrPage.CLOSE;
        END;
    END;

    EVENT Map@-1100525008::MapLoaded@21();
    BEGIN
      CurrPage.Map.setExtraAction('Open');
      CurrPage.Map.allowActionForType('Open', ServiceObjectTableIDText);
      CurrPage.Map.allowActionForType('Open', ServiceOrderTableIDText);
      IF originalServiceOrder."No." <> '' THEN BEGIN
        CurrPage.Map.setExtraAction(Text002);
        CurrPage.Map.allowActionForType(Text002, ServiceOrderTableIDText);
      END;

      IF BingMapsHandler.DisplayAsPin(ServiceOrderTableIDInt) THEN
        CurrPage.Map.displayAsPin(ServiceOrderTableIDText);
      IF BingMapsHandler.DisplayAsPin(ServiceObjectTableIDInt) THEN
        CurrPage.Map.displayAsPin(ServiceObjectTableIDText);
      handleMapLoaded;
    END;

    EVENT Map@-1100525008::PinAdded@22(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
      CurrPage.Map.setBestView;
    END;

    EVENT Map@-1100525008::AddLocationToSelection@23(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525008::RemoveLocationFromSelection@24(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525008::DirectionsReady@25(distance@1100525001 : Text;time@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525008::DirectionsError@26();
    BEGIN
    END;

    EVENT Map@-1100525008::LocationUpdated@27(no@1100525003 : Text;type@1100525002 : Text;lat@1100525001 : Text;lng@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525008::LocationAdded@28(no@1100525003 : Text;type@1100525002 : Text;lat@1100525001 : Text;lng@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525008::LocationRemoved@29(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525008::ExtraAction@30(action@1100525002 : Text;no@1100525001 : Text;type@1100525000 : Text);
    VAR
      TableIDInt@1100525003 : Integer;
    BEGIN
      IF action = 'Open' THEN BEGIN
        EVALUATE(TableIDInt, type);
        BingMapsHandler.OpenCard(no, TableIDInt);
      END;
      IF action = Text002 THEN BEGIN
        EVALUATE(TableIDInt, type);
        PlanCurrentServiceOrderAfterSelectedServiceOrder(no);
      END;
    END;

    EVENT Map@-1100525008::ZoomLevel@31(level@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525008::RegisterEvent@32(no@1100528102 : Text;type@1100528101 : Text;eventname@1100528100 : Text);
    BEGIN
      BingMapsHandler.WriteToBingMapsLogUsingQuery(no, CurrPage.OBJECTID(FALSE), eventname, type);
    END;

    BEGIN
    END.
  }
}

