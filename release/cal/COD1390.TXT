OBJECT Codeunit 1390 Document Notifications
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.05;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE CopySellToCustomerAddressFieldsFromSalesDocument@2(VAR ModifyCustomerAddressNotification@1001 : Notification);
    VAR
      Customer@1000 : Record 18;
      SalesHeader@1002 : Record 36;
      UpdateAddress@1003 : Page 1330;
    BEGIN
      IF NOT ModifyCustomerAddressNotification.HASDATA(SalesHeader.FIELDNAME("Sell-to Customer No.")) THEN
        EXIT;

      OnBeforeCopySellToCustomerAddressFieldsFromSalesDocument(ModifyCustomerAddressNotification,SalesHeader);

      // Document Type
      EVALUATE(SalesHeader."Document Type",ModifyCustomerAddressNotification.GETDATA(SalesHeader.FIELDNAME("Document Type")));
      SalesHeader.GET(SalesHeader."Document Type",ModifyCustomerAddressNotification.GETDATA(SalesHeader.FIELDNAME("No.")));
      IF Customer.GET(ModifyCustomerAddressNotification.GETDATA(SalesHeader.FIELDNAME("Sell-to Customer No."))) THEN BEGIN
        UpdateAddress.SetName(Customer.Name);
        UpdateAddress.SetExistingAddress(GetCustomerFullAddress(Customer));
        UpdateAddress.SetUpdatedAddress(GetSalesHeaderFullSellToAddress(SalesHeader));

        IF UpdateAddress.RUNMODAL IN [ACTION::OK,ACTION::LookupOK] THEN BEGIN
          Customer.SetAddress(SalesHeader."Sell-to Address",SalesHeader."Sell-to Address 2",
            SalesHeader."Sell-to Post Code",SalesHeader."Sell-to City",SalesHeader."Sell-to County",
            SalesHeader."Sell-to Country/Region Code",SalesHeader."Sell-to Contact");
          Customer.MODIFY(TRUE);
        END;
      END;
    END;

    [External]
    PROCEDURE CopyBillToCustomerAddressFieldsFromSalesDocument@4(ModifyCustomerAddressNotification@1001 : Notification);
    VAR
      Customer@1000 : Record 18;
      SalesHeader@1002 : Record 36;
      UpdateAddress@1003 : Page 1330;
    BEGIN
      IF NOT ModifyCustomerAddressNotification.HASDATA(SalesHeader.FIELDNAME("Bill-to Customer No.")) THEN
        EXIT;

      OnBeforeCopyBillToCustomerAddressFieldsFromSalesDocument(ModifyCustomerAddressNotification,SalesHeader);

      // Document Type
      EVALUATE(SalesHeader."Document Type",ModifyCustomerAddressNotification.GETDATA(SalesHeader.FIELDNAME("Document Type")));
      SalesHeader.GET(SalesHeader."Document Type",ModifyCustomerAddressNotification.GETDATA(SalesHeader.FIELDNAME("No.")));
      IF Customer.GET(ModifyCustomerAddressNotification.GETDATA(SalesHeader.FIELDNAME("Bill-to Customer No."))) THEN BEGIN
        UpdateAddress.SetExistingAddress(GetCustomerFullAddress(Customer));
        UpdateAddress.SetName(Customer.Name);
        UpdateAddress.SetUpdatedAddress(GetSalesHeaderFullBillToAddress(SalesHeader));

        IF UpdateAddress.RUNMODAL IN [ACTION::OK,ACTION::LookupOK] THEN BEGIN
          Customer.SetAddress(SalesHeader."Bill-to Address",SalesHeader."Bill-to Address 2",
            SalesHeader."Bill-to Post Code",SalesHeader."Bill-to City",SalesHeader."Bill-to County",
            SalesHeader."Bill-to Country/Region Code",SalesHeader."Bill-to Contact");
          Customer.MODIFY(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE GetCustomerFullAddress@15(Customer@1000 : Record 18) : Text;
    VAR
      AddressArray@1002 : ARRAY [7] OF Text;
    BEGIN
      AddressArray[1] := Customer.Address;
      AddressArray[2] := Customer."Address 2";
      AddressArray[3] := Customer."Post Code";
      AddressArray[4] := Customer.City;
      AddressArray[5] := Customer.County;
      AddressArray[6] := Customer."Country/Region Code";
      AddressArray[7] := Customer.Contact;

      EXIT(FormatAddress(AddressArray));
    END;

    LOCAL PROCEDURE GetSalesHeaderFullSellToAddress@34(SalesHeader@1000 : Record 36) : Text;
    VAR
      AddressArray@1002 : ARRAY [7] OF Text;
    BEGIN
      AddressArray[1] := SalesHeader."Sell-to Address";
      AddressArray[2] := SalesHeader."Sell-to Address 2";
      AddressArray[3] := SalesHeader."Sell-to Post Code";
      AddressArray[4] := SalesHeader."Sell-to City";
      AddressArray[5] := SalesHeader."Sell-to County";
      AddressArray[6] := SalesHeader."Sell-to Country/Region Code";
      AddressArray[7] := SalesHeader."Sell-to Contact";

      EXIT(FormatAddress(AddressArray));
    END;

    LOCAL PROCEDURE GetSalesHeaderFullBillToAddress@45(SalesHeader@1000 : Record 36) : Text;
    VAR
      AddressArray@1002 : ARRAY [7] OF Text;
    BEGIN
      AddressArray[1] := SalesHeader."Bill-to Address";
      AddressArray[2] := SalesHeader."Bill-to Address 2";
      AddressArray[3] := SalesHeader."Bill-to Post Code";
      AddressArray[4] := SalesHeader."Bill-to City";
      AddressArray[5] := SalesHeader."Bill-to County";
      AddressArray[6] := SalesHeader."Bill-to Country/Region Code";
      AddressArray[7] := SalesHeader."Bill-to Contact";

      EXIT(FormatAddress(AddressArray));
    END;

    LOCAL PROCEDURE FormatAddress@35(AddressArray@1000 : ARRAY [7] OF Text) : Text;
    VAR
      FullAddress@1003 : Text;
      Index@1001 : Integer;
    BEGIN
      FOR Index := 1 TO 7 DO
        IF AddressArray[Index] <> '' THEN
          FullAddress := FullAddress + AddressArray[Index] + ', ';

      IF STRLEN(FullAddress) > 0 THEN
        FullAddress := DELSTR(FullAddress,STRLEN(FullAddress) - 1);

      EXIT(FullAddress);
    END;

    [External]
    PROCEDURE HideNotificationForCurrentUser@52(Notification@1000 : Notification);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      SalesHeader.DontNotifyCurrentUserAgain(Notification.ID);
    END;

    [EventSubscriber(Page,1518,OnInitializingNotificationWithDefaultState)]
    PROCEDURE EnableModifyCustomerAddressNotificationOnInitializingWithDefaultState@5();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.SetModifyCustomerAddressNotificationDefaultState;
    END;

    [EventSubscriber(Page,1518,OnInitializingNotificationWithDefaultState)]
    PROCEDURE EnableModifyBillToCustomerAddressNotificationOnInitializingWithDefaultState@6();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.SetModifyBillToCustomerAddressNotificationDefaultState;
    END;

    [External]
    PROCEDURE CopyBuyFromVendorAddressFieldsFromSalesDocument@55(VAR ModifyVendorAddressNotification@1001 : Notification);
    VAR
      Vendor@1000 : Record 23;
      PurchaseHeader@1002 : Record 38;
      UpdateAddress@1003 : Page 1330;
    BEGIN
      IF NOT ModifyVendorAddressNotification.HASDATA(PurchaseHeader.FIELDNAME("Buy-from Vendor No.")) THEN
        EXIT;

      OnBeforeCopyBuyFromVendorAddressFieldsFromSalesDocument(ModifyVendorAddressNotification,PurchaseHeader);

      // Document Type
      EVALUATE(PurchaseHeader."Document Type",ModifyVendorAddressNotification.GETDATA(PurchaseHeader.FIELDNAME("Document Type")));
      PurchaseHeader.GET(PurchaseHeader."Document Type",ModifyVendorAddressNotification.GETDATA(PurchaseHeader.FIELDNAME("No.")));
      IF Vendor.GET(ModifyVendorAddressNotification.GETDATA(PurchaseHeader.FIELDNAME("Buy-from Vendor No."))) THEN BEGIN
        UpdateAddress.SetName(Vendor.Name);
        UpdateAddress.SetExistingAddress(GetVendorFullAddress(Vendor));
        UpdateAddress.SetUpdatedAddress(GetPurchaseHeaderFullBuyFromAddress(PurchaseHeader));

        IF UpdateAddress.RUNMODAL IN [ACTION::OK,ACTION::LookupOK] THEN BEGIN
          Vendor.SetAddress(PurchaseHeader."Buy-from Address",PurchaseHeader."Buy-from Address 2",
            PurchaseHeader."Buy-from Post Code",PurchaseHeader."Buy-from City",PurchaseHeader."Buy-from County",
            PurchaseHeader."Buy-from Country/Region Code",PurchaseHeader."Buy-from Contact");
          Vendor.MODIFY(TRUE);
        END;
      END;
    END;

    [External]
    PROCEDURE CopyPayToVendorAddressFieldsFromSalesDocument@56(ModifyVendorAddressNotification@1001 : Notification);
    VAR
      Vendor@1000 : Record 23;
      PurchaseHeader@1002 : Record 38;
      UpdateAddress@1003 : Page 1330;
    BEGIN
      IF NOT ModifyVendorAddressNotification.HASDATA(PurchaseHeader.FIELDNAME("Pay-to Vendor No.")) THEN
        EXIT;

      OnBeforeCopyPayToVendorAddressFieldsFromSalesDocument(ModifyVendorAddressNotification,PurchaseHeader);

      // Document Type
      EVALUATE(PurchaseHeader."Document Type",ModifyVendorAddressNotification.GETDATA(PurchaseHeader.FIELDNAME("Document Type")));
      PurchaseHeader.GET(PurchaseHeader."Document Type",ModifyVendorAddressNotification.GETDATA(PurchaseHeader.FIELDNAME("No.")));
      IF Vendor.GET(ModifyVendorAddressNotification.GETDATA(PurchaseHeader.FIELDNAME("Pay-to Vendor No."))) THEN BEGIN
        UpdateAddress.SetName(Vendor.Name);
        UpdateAddress.SetUpdatedAddress(GetPurchaseHeaderFullPayToAddress(PurchaseHeader));
        UpdateAddress.SetExistingAddress(GetVendorFullAddress(Vendor));

        IF UpdateAddress.RUNMODAL IN [ACTION::OK,ACTION::LookupOK] THEN BEGIN
          Vendor.SetAddress(PurchaseHeader."Pay-to Address",PurchaseHeader."Pay-to Address 2",
            PurchaseHeader."Pay-to Post Code",PurchaseHeader."Pay-to City",PurchaseHeader."Pay-to County",
            PurchaseHeader."Pay-to Country/Region Code",PurchaseHeader."Pay-to Contact");
          Vendor.MODIFY(TRUE);
        END;
      END;
    END;

    [External]
    PROCEDURE ShowVendorLedgerEntry@1(Notification@1000 : Notification);
    VAR
      VendorLedgerEntry@1001 : Record 25;
      EntryNo@1003 : Integer;
    BEGIN
      IF NOT Notification.HASDATA(VendorLedgerEntry.FIELDNAME("Entry No.")) THEN
        EXIT;

      EVALUATE(EntryNo,Notification.GETDATA(VendorLedgerEntry.FIELDNAME("Entry No.")));
      VendorLedgerEntry.GET(EntryNo);
      VendorLedgerEntry.SETRECFILTER;

      PAGE.RUNMODAL(PAGE::"Vendor Ledger Entries",VendorLedgerEntry);
    END;

    [External]
    PROCEDURE ShowGLSetup@8(Notification@1000 : Notification);
    VAR
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      PAGE.RUNMODAL(PAGE::"General Ledger Setup",GeneralLedgerSetup);
    END;

    [External]
    PROCEDURE ShowUserSetup@7(Notification@1000 : Notification);
    VAR
      UserSetup@1001 : Record 91;
    BEGIN
      UserSetup.SETRANGE("User ID",USERID);
      PAGE.RUNMODAL(PAGE::"User Setup",UserSetup);
    END;

    LOCAL PROCEDURE GetVendorFullAddress@57(Vendor@1000 : Record 23) : Text;
    VAR
      AddressArray@1002 : ARRAY [7] OF Text;
    BEGIN
      AddressArray[1] := Vendor.Address;
      AddressArray[2] := Vendor."Address 2";
      AddressArray[3] := Vendor."Post Code";
      AddressArray[4] := Vendor.City;
      AddressArray[5] := Vendor.County;
      AddressArray[6] := Vendor."Country/Region Code";
      AddressArray[7] := Vendor.Contact;

      EXIT(FormatAddress(AddressArray));
    END;

    LOCAL PROCEDURE GetPurchaseHeaderFullBuyFromAddress@58(PurchaseHeader@1000 : Record 38) : Text;
    VAR
      AddressArray@1002 : ARRAY [7] OF Text;
    BEGIN
      AddressArray[1] := PurchaseHeader."Buy-from Address";
      AddressArray[2] := PurchaseHeader."Buy-from Address 2";
      AddressArray[3] := PurchaseHeader."Buy-from Post Code";
      AddressArray[4] := PurchaseHeader."Buy-from City";
      AddressArray[5] := PurchaseHeader."Buy-from County";
      AddressArray[6] := PurchaseHeader."Buy-from Country/Region Code";
      AddressArray[7] := PurchaseHeader."Buy-from Contact";

      EXIT(FormatAddress(AddressArray));
    END;

    LOCAL PROCEDURE GetPurchaseHeaderFullPayToAddress@59(PurchaseHeader@1000 : Record 38) : Text;
    VAR
      AddressArray@1002 : ARRAY [7] OF Text;
    BEGIN
      AddressArray[1] := PurchaseHeader."Pay-to Address";
      AddressArray[2] := PurchaseHeader."Pay-to Address 2";
      AddressArray[3] := PurchaseHeader."Pay-to Post Code";
      AddressArray[4] := PurchaseHeader."Pay-to City";
      AddressArray[5] := PurchaseHeader."Pay-to County";
      AddressArray[6] := PurchaseHeader."Pay-to Country/Region Code";
      AddressArray[7] := PurchaseHeader."Pay-to Contact";

      EXIT(FormatAddress(AddressArray));
    END;

    [External]
    PROCEDURE HidePurchaseNotificationForCurrentUser@60(Notification@1000 : Notification);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      PurchaseHeader.DontNotifyCurrentUserAgain(Notification.ID);
    END;

    [EventSubscriber(Page,1518,OnInitializingNotificationWithDefaultState)]
    PROCEDURE EnableModifyVendorAddressNotificationOnInitializingWithDefaultState@61();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      PurchaseHeader.SetModifyVendorAddressNotificationDefaultState;
    END;

    [EventSubscriber(Page,1518,OnInitializingNotificationWithDefaultState)]
    PROCEDURE EnableModifyPayToVendorAddressNotificationOnInitializingWithDefaultState@62();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      PurchaseHeader.SetModifyPayToVendorAddressNotificationDefaultState;
    END;

    [EventSubscriber(Page,1518,OnInitializingNotificationWithDefaultState)]
    LOCAL PROCEDURE EnablePurchExternalDocAlreadyExistNotificationOnInitializingWithDefaultState@3();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      PurchaseHeader.SetShowExternalDocAlreadyExistNotificationDefaultState(TRUE);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCopyBillToCustomerAddressFieldsFromSalesDocument@9(VAR ModifyCustomerAddressNotification@1001 : Notification;VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCopySellToCustomerAddressFieldsFromSalesDocument@12(VAR ModifyCustomerAddressNotification@1001 : Notification;VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCopyBuyFromVendorAddressFieldsFromSalesDocument@13(VAR ModifyVendorAddressNotification@1000 : Notification;VAR PurchaseHeader@1001 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCopyPayToVendorAddressFieldsFromSalesDocument@14(VAR ModifyVendorAddressNotification@1000 : Notification;VAR PurchaseHeader@1001 : Record 38);
    BEGIN
    END;

    BEGIN
    END.
  }
}

