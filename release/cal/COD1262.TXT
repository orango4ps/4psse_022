OBJECT Codeunit 1262 Pre & Post Process XML Import
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW113.00,NAVDK;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DiffCurrQst@1001 : TextConst '@@@="%1 %2 = Currency Code EUR; %3 %4 = LCY Code DKK.";ENU=The bank statement that you are importing contains transactions in %1 %2. This conflicts with the %3 %4.\\Do you want to continue?;NOR=Bankkontoutdraget som du importerer, inneholder transaksjoner i %1 %2. Dette er i konflikt med %3 %4.\\Vil du fortsette?;SVE=Det bankutdrag som du importerar inneh†ller transaktioner i %1 %2. Detta leder till en konflikt med %3 %4.\\Vill du forts„tta?';
      MissingStmtDateInDataMsg@1012 : TextConst 'ENU=The statement date was not found in the data to be imported.;NOR=Finner ikke kontoutdragsdatoen i dataene som skal importeres.;SVE=Utdragsdatumet hittades inte i de data som ska importeras.';
      MissingCrdDbtIndInDataMsg@1013 : TextConst 'ENU=The credit/debit indicator was not found in the data to be imported.;NOR=Finner ikke kredit/debet-indikatoren i dataene som skal importeres.;SVE=Kredit-/debetindikatorn hittades inte i de data som ska importeras.';
      MissingBalTypeInDataMsg@1014 : TextConst 'ENU=The balance type was not found in the data to be imported.;NOR=Finner ikke saldotypen i dataene som skal importeres.;SVE=Saldotypen hittades inte i de data som ska importeras.';
      MissingClosingBalInDataMsg@1015 : TextConst 'ENU=The closing balance was not found in the data to be imported.;NOR=Finner ikke sluttsaldoen i dataene som skal importeres.;SVE=Utg†ende saldo hittades inte i de data som ska importeras.';
      MissingBankAccNoQst@1022 : TextConst 'ENU=Bank account %1 does not have a bank account number.\\Do you want to continue?;NOR=Bankkontoen %1 har ikke et bankkontonummer.\\Vil du fortsette?;SVE=Bankkontot %1 har inte ett bankkontonummer.\\Vill du forts„tta?';
      BankAccCurrErr@1020 : TextConst '@@@="%1 %2 = Currency Code EUR; %3 = Bank Account No.";ENU=The bank statement that you are importing contains transactions in currencies other than the %1 %2 of bank account %3.;NOR=Bankkontoutdraget som du importerer, inneholder transaksjoner i andre valutaer enn %1 %2 i bankkontoen %3.;SVE=Det bankutdrag som du importerar inneh†ller transaktioner i andra valutor „n %1 %2 f”r bankkontot %3.';
      MultipleStmtErr@1019 : TextConst 'ENU=The file that you are trying to import contains more than one bank statement.;NOR=Filen du pr›ver † importere, inneholder mer enn ett bankkontoutdrag.;SVE=Filen som du f”rs”ker att importera inneh†ller ett eller flera tomma bankutdrag.';
      MissingBankAccNoInDataErr@1018 : TextConst 'ENU=The bank account number was not found in the data to be imported.;NOR=Finner ikke bankkontonummeret i dataene som skal importeres.;SVE=Bankkontonumret hittades inte i de data som ska importeras.';
      BankAccMismatchQst@1017 : TextConst '@@@="%1=Value; %2 = Bank account no.";ENU=Bank account %1 does not have the bank account number %2, as specified in the bank statement file.\\Do you want to continue?;NOR=Bankkontoen %1 har ikke bankkontonummeret %2, som er angitt i bankkontoutdragsfilen.\\Vil du fortsette?;SVE=Bankkontot %1 har inte bankkontonumret %2 som anges i bankutdragsfilen.\\Vill du forts„tta?';

    [External]
    PROCEDURE PostProcessStatementDate@3(DataExch@1002 : Record 1220;VAR RecRef@1000 : RecordRef;FieldNo@1001 : Integer;StmtDatePathFilter@1004 : Text);
    VAR
      DataExchFieldDetails@1007 : Query 1232;
    BEGIN
      SetValueFromDataExchField(DataExchFieldDetails,DataExch,StmtDatePathFilter,MissingStmtDateInDataMsg,RecRef,FieldNo);
    END;

    [External]
    PROCEDURE PostProcessStatementEndingBalance@11(DataExch@1004 : Record 1220;VAR RecRef@1000 : RecordRef;FieldNo@1001 : Integer;BalTypeDescriptor@1009 : Text;BalTypePathFilter@1007 : Text;BalAmtPathFilter@1010 : Text;CrdDbtIndPathFilter@1011 : Text;ParentNodeOffset@1012 : Integer);
    VAR
      DataExchFieldDetails@1008 : Query 1232;
      GroupNodeID@1002 : Text;
    BEGIN
      DataExchFieldDetails.SETRANGE(FieldValue,BalTypeDescriptor);
      IF NOT HasDataExchFieldValue(DataExchFieldDetails,DataExch."Entry No.",BalTypePathFilter) THEN BEGIN
        MESSAGE(MissingBalTypeInDataMsg);
        EXIT;
      END;

      GroupNodeID := GetSubTreeRoot(DataExchFieldDetails.Node_ID,ParentNodeOffset);
      CLEAR(DataExchFieldDetails);
      DataExchFieldDetails.SETFILTER(Node_ID,'%1',GroupNodeID + '*');
      IF NOT SetValueFromDataExchField(DataExchFieldDetails,DataExch,BalAmtPathFilter,MissingClosingBalInDataMsg,RecRef,FieldNo) THEN
        EXIT;

      IF CrdDbtIndPathFilter = '' THEN
        EXIT;

      SetValueFromDataExchField(DataExchFieldDetails,DataExch,CrdDbtIndPathFilter,MissingCrdDbtIndInDataMsg,RecRef,FieldNo);
    END;

    [External]
    PROCEDURE PreProcessBankAccount@5(DataExch@1005 : Record 1220;BankAccNo@1004 : Code[20];IBANPathFilter@1006 : Text;BankAccIDPathFilter@1000 : Text;CurrCodePathFilter@1007 : Text);
    VAR
      BankAccount@1001 : Record 270;
    BEGIN
      BankAccount.GET(BankAccNo);
      CheckBankAccNo(DataExch,BankAccount,IBANPathFilter,BankAccIDPathFilter);
      CheckBankAccCurrency(DataExch,BankAccount,CurrCodePathFilter);
    END;

    [External]
    PROCEDURE PreProcessGLAccount@1(DataExch@1005 : Record 1220;VAR GenJournalLineTemplate@1004 : Record 81;CurrencyCodePathFilter@1001 : Text);
    VAR
      GLSetup@1000 : Record 98;
      DataExchFieldDetails@1007 : Query 1232;
      StatementCurrencyCode@1006 : Code[10];
    BEGIN
      GLSetup.GET;

      DataExchFieldDetails.SETFILTER(FieldValue,'<>%1&<>%2','',GLSetup."LCY Code");
      IF HasDataExchFieldValue(DataExchFieldDetails,DataExch."Entry No.",CurrencyCodePathFilter) THEN
        IF NOT CONFIRM(STRSUBSTNO(DiffCurrQst,GenJournalLineTemplate.FIELDCAPTION("Currency Code"),
               DataExchFieldDetails.FieldValue,GLSetup.FIELDCAPTION("LCY Code"),GLSetup."LCY Code"))
        THEN
          ERROR('');

      DataExchFieldDetails.SETRANGE(FieldValue);
      IF HasDataExchFieldValue(DataExchFieldDetails,DataExch."Entry No.",CurrencyCodePathFilter) THEN BEGIN
        StatementCurrencyCode := FORMAT(DataExchFieldDetails.FieldValue,-MAXSTRLEN(GenJournalLineTemplate."Currency Code"));
        GenJournalLineTemplate.VALIDATE("Currency Code",GLSetup.GetCurrencyCode(StatementCurrencyCode));
      END;
    END;

    [External]
    PROCEDURE PreProcessFile@6(DataExch@1000 : Record 1220;StatementIdPathFilter@1001 : Text);
    BEGIN
      CheckMultipleStatements(DataExch,StatementIdPathFilter);
    END;

    LOCAL PROCEDURE GetSubTreeRoot@13(Node@1002 : Text;Distance@1001 : Integer) : Text;
    BEGIN
      EXIT(COPYSTR(Node,1,STRLEN(Node) - Distance * 4));
    END;

    LOCAL PROCEDURE CheckBankAccNo@4(DataExch@1003 : Record 1220;BankAccount@1000 : Record 270;IBANPathFilter@1001 : Text;BankAccIDPathFilter@1004 : Text);
    VAR
      DataExchFieldDetails@1002 : Query 1232;
      FileHasIBAN@1005 : Boolean;
      FileHasBankAccID@1006 : Boolean;
    BEGIN
      IF BankAccount.GetBankAccountNo = '' THEN BEGIN
        IF NOT CONFIRM(STRSUBSTNO(MissingBankAccNoQst,BankAccount."No.")) THEN
          ERROR('');
        EXIT;
      END;

      FileHasIBAN := HasDataExchFieldValue(DataExchFieldDetails,DataExch."Entry No.",IBANPathFilter);
      IF NOT FileHasIBAN AND (BankAccIDPathFilter <> '') THEN
        FileHasBankAccID := HasDataExchFieldValue(DataExchFieldDetails,DataExch."Entry No.",BankAccIDPathFilter);

      IF NOT FileHasIBAN AND NOT FileHasBankAccID THEN
        ERROR(MissingBankAccNoInDataErr);

      IF (DELCHR(DataExchFieldDetails.FieldValue,'=','- ') <> DELCHR(BankAccount."Bank Account No.",'=','- ')) AND
         (DELCHR(DataExchFieldDetails.FieldValue,'=','- ') <> DELCHR(BankAccount."Bank Branch No." + BankAccount."Bank Account No.",'=','- ')) AND  //NAVDK
         (DELCHR(DataExchFieldDetails.FieldValue,'=','- ') <> DELCHR(BankAccount.IBAN,'=','- '))
      THEN
        IF NOT CONFIRM(STRSUBSTNO(BankAccMismatchQst,BankAccount."No.",DataExchFieldDetails.FieldValue)) THEN
          ERROR('');
    END;

    LOCAL PROCEDURE CheckBankAccCurrency@9(DataExch@1004 : Record 1220;BankAccount@1000 : Record 270;CurrCodePathFilter@1001 : Text);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      DataExchFieldDetails@1002 : Query 1232;
    BEGIN
      GeneralLedgerSetup.GET;

      DataExchFieldDetails.SETFILTER(FieldValue,'<>%1&<>%2','',GeneralLedgerSetup.GetCurrencyCode(BankAccount."Currency Code"));
      IF HasDataExchFieldValue(DataExchFieldDetails,DataExch."Entry No.",CurrCodePathFilter) THEN
        ERROR(BankAccCurrErr,BankAccount.FIELDCAPTION("Currency Code"),
          GeneralLedgerSetup.GetCurrencyCode(BankAccount."Currency Code"),BankAccount."No.");
    END;

    LOCAL PROCEDURE CheckMultipleStatements@2(DataExch@1003 : Record 1220;StatementIdPathFilter@1000 : Text);
    VAR
      DataExchFieldDetails@1001 : Query 1232;
      StmtCount@1002 : Integer;
    BEGIN
      IF HasDataExchFieldValue(DataExchFieldDetails,DataExch."Entry No.",StatementIdPathFilter) THEN BEGIN
        StmtCount := 1;
        WHILE DataExchFieldDetails.READ DO
          StmtCount += 1;
      END;

      IF StmtCount > 1 THEN
        ERROR(MultipleStmtErr);
    END;

    [External]
    PROCEDURE HasDataExchFieldValue@7(VAR DataExchFieldDetails@1003 : Query 1232;DataExchEntryNo@1001 : Integer;PathFilter@1002 : Text) : Boolean;
    BEGIN
      DataExchFieldDetails.SETRANGE(Data_Exch_No,DataExchEntryNo);
      DataExchFieldDetails.SETFILTER(Path,PathFilter);
      DataExchFieldDetails.OPEN;
      EXIT(DataExchFieldDetails.READ);
    END;

    LOCAL PROCEDURE SetValueFromDataExchField@8(VAR DataExchFieldDetails@1000 : Query 1232;DataExch@1001 : Record 1220;PathFilter@1005 : Text;NotFoundMessage@1006 : Text;RecRef@1003 : RecordRef;FieldNo@1004 : Integer) : Boolean;
    VAR
      DataExchField@1002 : Record 1221;
      TempFieldIdsToNegate@1009 : TEMPORARY Record 2000000026;
      DummyDataExchFieldMapping@1008 : Record 1225;
      ProcessDataExch@1007 : Codeunit 1201;
    BEGIN
      IF NOT HasDataExchFieldValue(DataExchFieldDetails,DataExch."Entry No.",PathFilter) THEN BEGIN
        MESSAGE(NotFoundMessage);
        EXIT(FALSE);
      END;

      DataExchField.GET(
        DataExchFieldDetails.Data_Exch_No,
        DataExchFieldDetails.Line_No,
        DataExchFieldDetails.Column_No,
        DataExchFieldDetails.Node_ID);

      DummyDataExchFieldMapping."Data Exch. Def Code" := DataExch."Data Exch. Def Code";
      DummyDataExchFieldMapping."Data Exch. Line Def Code" := DataExch."Data Exch. Line Def Code";
      DummyDataExchFieldMapping."Column No." := DataExchFieldDetails.Column_No;
      DummyDataExchFieldMapping."Field ID" := FieldNo;
      DummyDataExchFieldMapping."Table ID" := RecRef.NUMBER;

      ProcessDataExch.SetField(RecRef,DummyDataExchFieldMapping,DataExchField,TempFieldIdsToNegate);
      ProcessDataExch.NegateAmounts(RecRef,TempFieldIdsToNegate);

      RecRef.MODIFY(TRUE);
      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

