OBJECT Codeunit 1400 DocumentNoVisibility
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE SalesDocumentNoIsVisible@2(DocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Reminder,FinChMemo';DocNo@1003 : Code[20]) : Boolean;
    VAR
      NoSeries@1002 : Record 308;
      SalesNoSeriesSetup@1001 : Page 1401;
      DocNoSeries@1004 : Code[20];
      IsHandled@1005 : Boolean;
      IsVisible@1006 : Boolean;
    BEGIN
      EXIT(TRUE); //**4PS.n

      IsHandled := FALSE;
      IsVisible := FALSE;
      OnBeforeSalesDocumentNoIsVisible(DocType,DocNo,IsVisible,IsHandled);
      IF IsHandled THEN
        EXIT(IsVisible);

      IF DocNo <> '' THEN
        EXIT(FALSE);

      DocNoSeries := DetermineSalesSeriesNo(DocType);

      IF NOT NoSeries.GET(DocNoSeries) THEN BEGIN
        SalesNoSeriesSetup.SetFieldsVisibility(DocType);
        SalesNoSeriesSetup.RUNMODAL;
        DocNoSeries := DetermineSalesSeriesNo(DocType);
      END;

      EXIT(ForceShowNoSeriesForDocNo(DocNoSeries));
    END;

    [External]
    PROCEDURE PurchaseDocumentNoIsVisible@6(DocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocNo@1003 : Code[20]) : Boolean;
    VAR
      NoSeries@1002 : Record 308;
      PurchaseNoSeriesSetup@1001 : Page 1402;
      DocNoSeries@1004 : Code[20];
      IsHandled@1006 : Boolean;
      IsVisible@1005 : Boolean;
    BEGIN
      EXIT(TRUE); //**4PS.n

      IsHandled := FALSE;
      IsVisible := FALSE;
      OnBeforePurchaseDocumentNoIsVisible(DocType,DocNo,IsVisible,IsHandled);
      IF IsHandled THEN
        EXIT(IsVisible);

      IF DocNo <> '' THEN
        EXIT(FALSE);

      DocNoSeries := DeterminePurchaseSeriesNo(DocType);

      IF NOT NoSeries.GET(DocNoSeries) THEN BEGIN
        PurchaseNoSeriesSetup.SetFieldsVisibility(DocType);
        PurchaseNoSeriesSetup.RUNMODAL;
        DocNoSeries := DeterminePurchaseSeriesNo(DocType);
      END;

      EXIT(ForceShowNoSeriesForDocNo(DocNoSeries));
    END;

    [External]
    PROCEDURE TransferOrderNoIsVisible@24() : Boolean;
    VAR
      NoSeriesCode@1004 : Code[20];
      IsHandled@1001 : Boolean;
      IsVisible@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      IsVisible := FALSE;
      OnBeforeTransferOrderNoIsVisible(IsVisible,IsHandled);
      IF IsHandled THEN
        EXIT(IsVisible);

      NoSeriesCode := DetermineTransferOrderSeriesNo;
      EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
    END;

    [External]
    PROCEDURE CustomerNoIsVisible@4() : Boolean;
    VAR
      NoSeriesCode@1004 : Code[20];
      IsHandled@1001 : Boolean;
      IsVisible@1000 : Boolean;
    BEGIN
      EXIT(TRUE); //**4PS.n

      IsHandled := FALSE;
      IsVisible := FALSE;
      OnBeforeCustomerNoIsVisible(IsVisible,IsHandled);
      IF IsHandled THEN
        EXIT(IsVisible);

      NoSeriesCode := DetermineCustomerSeriesNo;
      EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
    END;

    [External]
    PROCEDURE VendorNoIsVisible@21() : Boolean;
    VAR
      NoSeriesCode@1004 : Code[20];
      IsHandled@1001 : Boolean;
      IsVisible@1000 : Boolean;
    BEGIN
      EXIT(TRUE); //**4PS.n

      IsHandled := FALSE;
      IsVisible := FALSE;
      OnBeforeVendorNoIsVisible(IsVisible,IsHandled);
      IF IsHandled THEN
        EXIT(IsVisible);

      NoSeriesCode := DetermineVendorSeriesNo;
      EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
    END;

    [External]
    PROCEDURE ItemNoIsVisible@22() : Boolean;
    VAR
      NoSeriesCode@1004 : Code[20];
      IsHandled@1001 : Boolean;
      IsVisible@1000 : Boolean;
    BEGIN
      EXIT(TRUE); //**4PS.n

      IsHandled := FALSE;
      IsVisible := FALSE;
      OnBeforeItemNoIsVisible(IsVisible,IsHandled);
      IF IsHandled THEN
        EXIT(IsVisible);

      NoSeriesCode := DetermineItemSeriesNo;
      EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
    END;

    [External]
    PROCEDURE FixedAssetNoIsVisible@8() : Boolean;
    VAR
      NoSeriesCode@1004 : Code[20];
      IsHandled@1001 : Boolean;
      IsVisible@1000 : Boolean;
    BEGIN
      EXIT(TRUE); //**4PS.n

      IsHandled := FALSE;
      IsVisible := FALSE;
      OnBeforeFixedAssetNoIsVisible(IsVisible,IsHandled);
      IF IsHandled THEN
        EXIT(IsVisible);

      NoSeriesCode := DetermineFixedAssetSeriesNo;
      EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
    END;

    [External]
    PROCEDURE EmployeeNoIsVisible@18() : Boolean;
    VAR
      NoSeriesCode@1004 : Code[20];
      IsHandled@1001 : Boolean;
      IsVisible@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      IsVisible := FALSE;
      OnBeforeEmployeeNoIsVisible(IsVisible,IsHandled);
      IF IsHandled THEN
        EXIT(IsVisible);

      NoSeriesCode := DetermineEmployeeSeriesNo;
      EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
    END;

    [External]
    PROCEDURE BankAccountNoIsVisible@23() : Boolean;
    VAR
      NoSeriesCode@1004 : Code[20];
      IsHandled@1001 : Boolean;
      IsVisible@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      IsVisible := FALSE;
      OnBeforeBankAccountNoIsVisible(IsVisible,IsHandled);
      IF IsHandled THEN
        EXIT(IsVisible);

      NoSeriesCode := DetermineBankAccountSeriesNo;
      EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
    END;

    [External]
    PROCEDURE ResourceNoIsVisible@26() : Boolean;
    VAR
      NoSeriesCode@1004 : Code[20];
      IsHandled@1001 : Boolean;
      IsVisible@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      IsVisible := FALSE;
      OnBeforeResourceNoIsVisible(IsVisible,IsHandled);
      IF IsHandled THEN
        EXIT(IsVisible);

      NoSeriesCode := DetermineResourceSeriesNo;
      EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
    END;

    [External]
    PROCEDURE JobNoIsVisible@27() : Boolean;
    VAR
      NoSeriesCode@1004 : Code[20];
      IsHandled@1001 : Boolean;
      IsVisible@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      IsVisible := FALSE;
      OnBeforeJobNoIsVisible(IsVisible,IsHandled);
      IF IsHandled THEN
        EXIT(IsVisible);

      NoSeriesCode := DetermineJobSeriesNo;
      EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
    END;

    [External]
    PROCEDURE ContactNoIsVisible@28() : Boolean;
    VAR
      NoSeriesCode@1004 : Code[20];
      IsHandled@1001 : Boolean;
      IsVisible@1000 : Boolean;
    BEGIN
      IsHandled := FALSE;
      IsVisible := FALSE;
      OnBeforeContactNoIsVisible(IsVisible,IsHandled);
      IF IsHandled THEN
        EXIT(IsVisible);

      NoSeriesCode := DetermineContactSeriesNo;
      EXIT(ForceShowNoSeriesForDocNo(NoSeriesCode));
    END;

    [External]
    PROCEDURE CustomerNoSeriesIsDefault@10() : Boolean;
    VAR
      NoSeries@1000 : Record 308;
    BEGIN
      IF NoSeries.GET(DetermineCustomerSeriesNo) THEN
        EXIT(NoSeries."Default Nos.");

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE VendorNoSeriesIsDefault@15() : Boolean;
    VAR
      NoSeries@1000 : Record 308;
    BEGIN
      IF NoSeries.GET(DetermineVendorSeriesNo) THEN
        EXIT(NoSeries."Default Nos.");

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE ItemNoSeriesIsDefault@16() : Boolean;
    VAR
      NoSeries@1000 : Record 308;
    BEGIN
      IF NoSeries.GET(DetermineItemSeriesNo) THEN
        EXIT(NoSeries."Default Nos.");
    END;

    [External]
    PROCEDURE TransferOrderNoSeriesIsDefault@20() : Boolean;
    VAR
      NoSeries@1000 : Record 308;
    BEGIN
      IF NoSeries.GET(DetermineTransferOrderSeriesNo) THEN
        EXIT(NoSeries."Default Nos.");
    END;

    [External]
    PROCEDURE FixedAssetNoSeriesIsDefault@11() : Boolean;
    VAR
      NoSeries@1000 : Record 308;
    BEGIN
      IF NoSeries.GET(DetermineFixedAssetSeriesNo) THEN
        EXIT(NoSeries."Default Nos.");
    END;

    [External]
    PROCEDURE EmployeeNoSeriesIsDefault@19() : Boolean;
    VAR
      NoSeries@1000 : Record 308;
    BEGIN
      IF NoSeries.GET(DetermineEmployeeSeriesNo) THEN
        EXIT(NoSeries."Default Nos.");
    END;

    LOCAL PROCEDURE DetermineSalesSeriesNo@5(DocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Reminder,FinChMemo') : Code[20];
    VAR
      SalesReceivablesSetup@1001 : Record 311;
      SalesHeader@1002 : Record 36;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesHeader.SETRANGE("Document Type",DocType);
      CASE DocType OF
        DocType::Quote:
          BEGIN
            CheckNumberSeries(SalesHeader,SalesReceivablesSetup."Quote Nos.",SalesHeader.FIELDNO("No."));
            EXIT(SalesReceivablesSetup."Quote Nos.");
          END;
        DocType::Order:
          BEGIN
            CheckNumberSeries(SalesHeader,SalesReceivablesSetup."Order Nos.",SalesHeader.FIELDNO("No."));
            EXIT(SalesReceivablesSetup."Order Nos.");
          END;
        DocType::Invoice:
          BEGIN
            CheckNumberSeries(SalesHeader,SalesReceivablesSetup."Invoice Nos.",SalesHeader.FIELDNO("No."));
            EXIT(SalesReceivablesSetup."Invoice Nos.");
          END;
        DocType::"Credit Memo":
          BEGIN
            CheckNumberSeries(SalesHeader,SalesReceivablesSetup."Credit Memo Nos.",SalesHeader.FIELDNO("No."));
            EXIT(SalesReceivablesSetup."Credit Memo Nos.");
          END;
        DocType::"Blanket Order":
          BEGIN
            CheckNumberSeries(SalesHeader,SalesReceivablesSetup."Blanket Order Nos.",SalesHeader.FIELDNO("No."));
            EXIT(SalesReceivablesSetup."Blanket Order Nos.");
          END;
        DocType::"Return Order":
          BEGIN
            CheckNumberSeries(SalesHeader,SalesReceivablesSetup."Return Order Nos.",SalesHeader.FIELDNO("No."));
            EXIT(SalesReceivablesSetup."Return Order Nos.");
          END;
        DocType::Reminder:
          BEGIN
            CheckNumberSeries(SalesHeader,SalesReceivablesSetup."Reminder Nos.",SalesHeader.FIELDNO("No."));
            EXIT(SalesReceivablesSetup."Reminder Nos.");
          END;
        DocType::FinChMemo:
          BEGIN
            CheckNumberSeries(SalesHeader,SalesReceivablesSetup."Fin. Chrg. Memo Nos.",SalesHeader.FIELDNO("No."));
            EXIT(SalesReceivablesSetup."Fin. Chrg. Memo Nos.");
          END;
      END;
    END;

    LOCAL PROCEDURE DeterminePurchaseSeriesNo@1(DocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order') : Code[20];
    VAR
      PurchasesPayablesSetup@1001 : Record 312;
      PurchaseHeader@1002 : Record 38;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchaseHeader.SETRANGE("Document Type",DocType);
      CASE DocType OF
        DocType::Quote:
          BEGIN
            CheckNumberSeries(PurchaseHeader,PurchasesPayablesSetup."Quote Nos.",PurchaseHeader.FIELDNO("No."));
            EXIT(PurchasesPayablesSetup."Quote Nos.");
          END;
        DocType::Order:
          BEGIN
            CheckNumberSeries(PurchaseHeader,PurchasesPayablesSetup."Order Nos.",PurchaseHeader.FIELDNO("No."));
            EXIT(PurchasesPayablesSetup."Order Nos.");
          END;
        DocType::Invoice:
          BEGIN
            CheckNumberSeries(PurchaseHeader,PurchasesPayablesSetup."Invoice Nos.",PurchaseHeader.FIELDNO("No."));
            EXIT(PurchasesPayablesSetup."Invoice Nos.");
          END;
        DocType::"Credit Memo":
          BEGIN
            CheckNumberSeries(PurchaseHeader,PurchasesPayablesSetup."Credit Memo Nos.",PurchaseHeader.FIELDNO("No."));
            EXIT(PurchasesPayablesSetup."Credit Memo Nos.");
          END;
        DocType::"Blanket Order":
          BEGIN
            CheckNumberSeries(PurchaseHeader,PurchasesPayablesSetup."Blanket Order Nos.",PurchaseHeader.FIELDNO("No."));
            EXIT(PurchasesPayablesSetup."Blanket Order Nos.");
          END;
        DocType::"Return Order":
          BEGIN
            CheckNumberSeries(PurchaseHeader,PurchasesPayablesSetup."Return Order Nos.",PurchaseHeader.FIELDNO("No."));
            EXIT(PurchasesPayablesSetup."Return Order Nos.");
          END;
      END;
    END;

    LOCAL PROCEDURE DetermineTransferOrderSeriesNo@14() : Code[20];
    VAR
      InventorySetup@1000 : Record 313;
      TransferHeader@1001 : Record 5740;
    BEGIN
      InventorySetup.GET;
      CheckNumberSeries(TransferHeader,InventorySetup."Transfer Order Nos.",TransferHeader.FIELDNO("No."));
      EXIT(InventorySetup."Transfer Order Nos.");
    END;

    LOCAL PROCEDURE DetermineCustomerSeriesNo@7() : Code[20];
    VAR
      SalesReceivablesSetup@1001 : Record 311;
      Customer@1000 : Record 18;
    BEGIN
      SalesReceivablesSetup.GET;
      CheckNumberSeries(Customer,SalesReceivablesSetup."Customer Nos.",Customer.FIELDNO("No."));
      EXIT(SalesReceivablesSetup."Customer Nos.");
    END;

    LOCAL PROCEDURE DetermineVendorSeriesNo@12() : Code[20];
    VAR
      PurchasesPayablesSetup@1001 : Record 312;
      Vendor@1000 : Record 23;
    BEGIN
      PurchasesPayablesSetup.GET;
      CheckNumberSeries(Vendor,PurchasesPayablesSetup."Vendor Nos.",Vendor.FIELDNO("No."));
      EXIT(PurchasesPayablesSetup."Vendor Nos.");
    END;

    LOCAL PROCEDURE DetermineItemSeriesNo@17() : Code[20];
    VAR
      InventorySetup@1001 : Record 313;
      Item@1000 : Record 27;
    BEGIN
      InventorySetup.GET;
      CheckNumberSeries(Item,InventorySetup."Item Nos.",Item.FIELDNO("No."));
      EXIT(InventorySetup."Item Nos.");
    END;

    LOCAL PROCEDURE DetermineFixedAssetSeriesNo@9() : Code[20];
    VAR
      FASetup@1001 : Record 5603;
      FixedAsset@1000 : Record 5600;
    BEGIN
      FASetup.GET;
      CheckNumberSeries(FixedAsset,FASetup."Fixed Asset Nos.",FixedAsset.FIELDNO("No."));
      EXIT(FASetup."Fixed Asset Nos.");
    END;

    LOCAL PROCEDURE DetermineEmployeeSeriesNo@13() : Code[20];
    VAR
      HumanResourcesSetup@1001 : Record 5218;
      Employee@1000 : Record 5200;
    BEGIN
      HumanResourcesSetup.GET;
      CheckNumberSeries(Employee,HumanResourcesSetup."Employee Nos.",Employee.FIELDNO("No."));
      EXIT(HumanResourcesSetup."Employee Nos.");
    END;

    LOCAL PROCEDURE DetermineBankAccountSeriesNo@25() : Code[20];
    VAR
      GeneralLedgerSetup@1001 : Record 98;
      BankAccount@1000 : Record 270;
    BEGIN
      GeneralLedgerSetup.GET;
      CheckNumberSeries(BankAccount,GeneralLedgerSetup."Bank Account Nos.",BankAccount.FIELDNO("No."));
      EXIT(GeneralLedgerSetup."Bank Account Nos.");
    END;

    LOCAL PROCEDURE DetermineResourceSeriesNo@29() : Code[20];
    VAR
      ResourcesSetup@1001 : Record 314;
      Resource@1000 : Record 156;
    BEGIN
      ResourcesSetup.GET;
      CheckNumberSeries(Resource,ResourcesSetup."Resource Nos.",Resource.FIELDNO("No."));
      EXIT(ResourcesSetup."Resource Nos.");
    END;

    LOCAL PROCEDURE DetermineJobSeriesNo@30() : Code[20];
    VAR
      JobsSetup@1001 : Record 315;
      Job@1000 : Record 11072003;
    BEGIN
      JobsSetup.GET;
      CheckNumberSeries(Job,JobsSetup."Job Nos.",Job.FIELDNO("No."));
      EXIT(JobsSetup."Job Nos.");
    END;

    LOCAL PROCEDURE DetermineContactSeriesNo@31() : Code[20];
    VAR
      MarketingSetup@1001 : Record 5079;
      Contact@1000 : Record 5050;
    BEGIN
      MarketingSetup.GET;
      CheckNumberSeries(Contact,MarketingSetup."Contact Nos.",Contact.FIELDNO("No."));
      EXIT(MarketingSetup."Contact Nos.");
    END;

    LOCAL PROCEDURE ForceShowNoSeriesForDocNo@3(NoSeriesCode@1004 : Code[20]) : Boolean;
    VAR
      NoSeries@1005 : Record 308;
      NoSeriesRelationship@1001 : Record 310;
      NoSeriesMgt@1000 : Codeunit 396;
      SeriesDate@1002 : Date;
    BEGIN
      IF NOT NoSeries.GET(NoSeriesCode) THEN
        EXIT(TRUE);

      SeriesDate := WORKDATE;
      NoSeriesRelationship.SETRANGE(Code,NoSeriesCode);
      IF NOT NoSeriesRelationship.ISEMPTY THEN
        EXIT(TRUE);

      IF NoSeries."Manual Nos." OR (NoSeries."Default Nos." = FALSE) THEN
        EXIT(TRUE);

      EXIT(NoSeriesMgt.DoGetNextNo(NoSeriesCode,SeriesDate,FALSE,TRUE) = '');
    END;

    LOCAL PROCEDURE CheckNumberSeries@32(RecVariant@1000 : Variant;NoSeriesCode@1001 : Code[20];FieldNo@1002 : Integer);
    VAR
      NoSeries@1007 : Record 308;
      NoSeriesMgt@1003 : Codeunit 396;
      RecRef@1004 : RecordRef;
      FieldRef@1005 : FieldRef;
      NewNo@1006 : Code[20];
    BEGIN
      IF RecVariant.ISRECORD AND (NoSeriesCode <> '') AND NoSeries.GET(NoSeriesCode) THEN BEGIN
        NewNo := NoSeriesMgt.DoGetNextNo(NoSeriesCode,0D,FALSE,TRUE);
        RecRef.GETTABLE(RecVariant);
        FieldRef := RecRef.FIELD(FieldNo);
        FieldRef.SETRANGE(NewNo);
        IF RecRef.FINDFIRST THEN BEGIN
          NoSeriesMgt.SaveNoSeries;
          CheckNumberSeries(RecRef,NoSeriesCode,FieldNo);
        END;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSalesDocumentNoIsVisible@33(DocType@1001 : Option;DocNo@1000 : Code[20];VAR IsVisible@1002 : Boolean;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePurchaseDocumentNoIsVisible@36(DocType@1001 : Option;DocNo@1000 : Code[20];VAR IsVisible@1002 : Boolean;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTransferOrderNoIsVisible@35(VAR IsVisible@1000 : Boolean;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCustomerNoIsVisible@41(VAR IsVisible@1000 : Boolean;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeVendorNoIsVisible@43(VAR IsVisible@1000 : Boolean;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeItemNoIsVisible@45(VAR IsVisible@1000 : Boolean;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeFixedAssetNoIsVisible@48(VAR IsVisible@1000 : Boolean;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeEmployeeNoIsVisible@50(VAR IsVisible@1000 : Boolean;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeBankAccountNoIsVisible@52(VAR IsVisible@1000 : Boolean;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeResourceNoIsVisible@54(VAR IsVisible@1000 : Boolean;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeJobNoIsVisible@56(VAR IsVisible@1000 : Boolean;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeContactNoIsVisible@60(VAR IsVisible@1000 : Boolean;VAR IsHandled@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

