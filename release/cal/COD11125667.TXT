OBJECT Codeunit 11125667 Copy Constr. Spec. to Estimate
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE CopyConstrSpecToEstimate@1100525000(EstimateNo@1100525000 : Code[20];ConstrSpecNo@1100525001 : Code[20];ReplaceData@1100528904 : Boolean);
    VAR
      ConstrSpecElemLineRAW@1100525002 : Record 11125670;
      EstimateRAW@1100525009 : Record 11012151;
      EstimateParagraphRAW@1100525003 : Record 11125679;
      EstimateParagraphRAW2@1100525005 : Record 11125679;
      EstimateRAWSetup@1100528500 : Record 11125673;
      ConstructionSpecRAW@1100528900 : Record 11125666;
      EstimateUnitMappingRAW@1100528501 : Record 11125675;
      DefiCodes@1100525006 : ARRAY [6] OF Code[1];
      NextLineNo@1100525004 : Integer;
      RecalculateEstimateRAW@1100528902 : Codeunit 11125669;
      TmpParagraph@1100528903 : TEMPORARY Record 11125670;
      EstimateParagraph@1100528901 : Record 11125679;
    BEGIN
      EstimateRAWSetup.GET;  //C047968
      ConstructionSpecRAW.GET(ConstrSpecNo);  //DP01676

      EstimateRAW.GET(EstimateNo);
      EstimateRAW.TESTFIELD(Finished, FALSE);
      //DP02278a.sn
      IF (ConstructionSpecRAW."Information Notice" = TRUE) AND (ReplaceData = TRUE) THEN
        EstimateRAW."Construction Spec. No. (Note)" := ConstrSpecNo
      ELSE
        EstimateRAW."Construction Spec. No." := ConstrSpecNo;
      //DP02278a.en
      EstimateRAW.MODIFY;

      //DP02278a.sn
      IF (ConstructionSpecRAW."Information Notice" = TRUE) AND (ReplaceData = TRUE) THEN BEGIN
        ConstrSpecElemLineRAW.SETRANGE("Specification No.", ConstrSpecNo);
        IF ConstrSpecElemLineRAW.FINDSET THEN BEGIN
          REPEAT
            TmpParagraph := ConstrSpecElemLineRAW;
            IF TmpParagraph.INSERT THEN;
          UNTIL ConstrSpecElemLineRAW.NEXT = 0;
        END;
      END;
      //DP02278a.sn

      ConstrSpecElemLineRAW.SETRANGE("Specification No.", ConstrSpecNo);
      IF ConstrSpecElemLineRAW.FINDSET THEN BEGIN
        REPEAT
          //DP02278a.sn
          IF (ConstructionSpecRAW."Information Notice" = TRUE) AND (ReplaceData = TRUE) THEN BEGIN
            TmpParagraph.SETRANGE("Specification No.", ConstrSpecElemLineRAW."Specification No.");
            TmpParagraph.SETRANGE("Tender Paragraph No.", ConstrSpecElemLineRAW."Tender Paragraph No.");
            IF TmpParagraph.FINDSET THEN BEGIN
              TmpParagraph.DELETEALL;
              EstimateParagraph.SETRANGE("Estimate No.", EstimateNo);
              EstimateParagraph.SETRANGE("Tender Paragraph No.", TmpParagraph."Tender Paragraph No.");
              EstimateParagraph.DELETEALL;
            END;
          END;
          //DP02278a.en
          NextLineNo := NextLineNo + 10000;

          IF ConstrSpecElemLineRAW."External Unit of Measure Code" <> '' THEN
            ConstrSpecElemLineRAW.TESTFIELD("Internal Unit of Measure Code");

          EstimateParagraphRAW.INIT;
          EstimateParagraphRAW.VALIDATE("Estimate No.", EstimateNo);
          EstimateParagraphRAW."Tender Paragraph No." := ConstrSpecElemLineRAW."Tender Paragraph No.";
          EstimateParagraphRAW."Line No." := NextLineNo;
          EstimateParagraphRAW.Type := ConstrSpecElemLineRAW.Type;
          EstimateParagraphRAW."Information Notice" := ConstructionSpecRAW."Information Notice";  //DP02278a
          EstimateParagraphRAW.Source := EstimateParagraphRAW.Source::"Construction Specification";
          EstimateParagraphRAW."Defi Code Position 1" := ConstrSpecElemLineRAW."Defi Code Position 1";
          EstimateParagraphRAW."Defi Code Position 2" := ConstrSpecElemLineRAW."Defi Code Position 2";
          EstimateParagraphRAW."Defi Code Position 3" := ConstrSpecElemLineRAW."Defi Code Position 3";
          EstimateParagraphRAW."Defi Code Position 4" := ConstrSpecElemLineRAW."Defi Code Position 4";
          EstimateParagraphRAW."Defi Code Position 5" := ConstrSpecElemLineRAW."Defi Code Position 5";
          EstimateParagraphRAW."Defi Code Position 6" := ConstrSpecElemLineRAW."Defi Code Position 6";
          EstimateParagraphRAW."Construction Spec. Line No." := ConstrSpecElemLineRAW."Line No.";
          EstimateParagraphRAW.VALIDATE(Activity, ConstrSpecElemLineRAW.Activity);
          EstimateParagraphRAW.Commitment := ConstrSpecElemLineRAW.Commitment;
          EstimateParagraphRAW.Text := ConstrSpecElemLineRAW.Text;
          EstimateParagraphRAW.Title := ConstrSpecElemLineRAW.Title;
          EstimateParagraphRAW.Indentation := ConstrSpecElemLineRAW.Indentation;
          EstimateParagraphRAW.Quantity := ConstrSpecElemLineRAW.Quantity;
          EstimateParagraphRAW."External Unit of Measure Code" := ConstrSpecElemLineRAW."External Unit of Measure Code";
          EstimateParagraphRAW."Internal Unit of Measure Code" := ConstrSpecElemLineRAW."Internal Unit of Measure Code";
          //DP01676.sn
          IF EstimateParagraphRAW."External Unit of Measure Code" <> EstimateParagraphRAW.EUR() THEN BEGIN  //C056424
            IF NOT EstimateUnitMappingRAW.GET(ConstrSpecElemLineRAW."External Unit of Measure Code") THEN
              EstimateUnitMappingRAW."Ignore Result Obligation" := TRUE;  //C058696
            IF EstimateUnitMappingRAW."Ignore Result Obligation" = FALSE THEN BEGIN  //C050659
              EstimateParagraphRAW."Quantity (Result Obligation)" := ConstrSpecElemLineRAW.Quantity;
              EstimateParagraphRAW."Unit of Measure (Obligation)" := ConstrSpecElemLineRAW."Internal Unit of Measure Code";
            END;
          END;
          //DP01676.en

          // General costs are always EUR-entries
          IF COPYSTR(EstimateParagraphRAW."Tender Paragraph No.", 1, 2) = '91' THEN BEGIN
            IF STRLEN(EstimateParagraphRAW."Tender Paragraph No.") = 6 THEN BEGIN
              IF EstimateParagraphRAW."Tender Paragraph No." <> EstimateRAWSetup."Paragraph No.(Discount)" THEN BEGIN  //C047968
                EstimateParagraphRAW."Internal Unit of Measure Code" := EstimateParagraphRAW.EUR();  //C056424
                EstimateParagraphRAW."External Unit of Measure Code" := EstimateParagraphRAW.EUR();  //C056424
                EstimateParagraphRAW."Calculated Unit Price" := 1;
              END;
            END;
          END;

          EstimateParagraphRAW."Quantity Type" := ConstrSpecElemLineRAW."Quantity Type";
          EstimateParagraphRAW.INSERT;

          // Line '00' should contain the quantity; copy it from line '01'
          IF EstimateParagraphRAW."Construction Spec. Line No." = '01' THEN BEGIN
            EstimateParagraphRAW2.SETRANGE("Estimate No.", EstimateParagraphRAW."Estimate No.");
            EstimateParagraphRAW2.SETRANGE("Tender Paragraph No.", EstimateParagraphRAW."Tender Paragraph No.");
            EstimateParagraphRAW2.SETRANGE("Defi Code Position 1", EstimateParagraphRAW."Defi Code Position 1");
            EstimateParagraphRAW2.SETRANGE("Defi Code Position 2", EstimateParagraphRAW."Defi Code Position 2");
            EstimateParagraphRAW2.SETRANGE("Defi Code Position 3", EstimateParagraphRAW."Defi Code Position 3");
            EstimateParagraphRAW2.SETRANGE("Defi Code Position 4", EstimateParagraphRAW."Defi Code Position 4");
            EstimateParagraphRAW2.SETRANGE("Defi Code Position 5", EstimateParagraphRAW."Defi Code Position 5");
            EstimateParagraphRAW2.SETRANGE("Defi Code Position 6", EstimateParagraphRAW."Defi Code Position 6");
            EstimateParagraphRAW2.SETRANGE("Construction Spec. Line No.", '00');
            IF EstimateParagraphRAW2.FINDFIRST THEN BEGIN
              EstimateParagraphRAW2.Quantity := EstimateParagraphRAW.Quantity;
              EstimateParagraphRAW2."External Unit of Measure Code" := EstimateParagraphRAW."External Unit of Measure Code";
              EstimateParagraphRAW2."Internal Unit of Measure Code" := EstimateParagraphRAW."Internal Unit of Measure Code";
              // EstimateParagraphRAW2."Quantity Type" := EstimateParagraphRAW."Quantity Type";
              EstimateParagraphRAW2.MODIFY;
            END;
          END;

          IF EstimateParagraphRAW.IsProvisionalSum(EstimateParagraphRAW."Tender Paragraph No.") THEN BEGIN  //C056424
            IF EstimateParagraphRAW.Type = EstimateParagraphRAW.Type::"Commitment (Main Line)" THEN BEGIN
              //C056424.sn
              EstimateParagraphRAW2.RESET;
              EstimateParagraphRAW2.SETRANGE("Estimate No.", EstimateParagraphRAW."Estimate No.");
              EstimateParagraphRAW2.SETRANGE("Tender Paragraph No.", EstimateParagraphRAW."Tender Paragraph No.");
              EstimateParagraphRAW2.SETRANGE("Construction Spec. Line No.", '00');
              IF EstimateParagraphRAW2.FINDSET THEN BEGIN
                EstimateParagraphRAW2."Calculated Unit Price" := 1;
                EstimateParagraphRAW2."Calculated Amount" := EstimateParagraphRAW2.Quantity * EstimateParagraphRAW2."Calculated Unit Price";
                EstimateParagraphRAW2."Actual Quantity" := EstimateParagraphRAW2.Quantity;
                EstimateParagraphRAW2."Actual Unit Price" := 1;
                EstimateParagraphRAW2."Actual Amount" := EstimateParagraphRAW2."Actual Quantity" * EstimateParagraphRAW2."Actual Unit Price";
                EstimateParagraphRAW2.MODIFY;
                RecalculateEstimateRAW.CheckProvisionalSum(EstimateParagraphRAW2."Estimate No.", EstimateParagraphRAW2."Tender Paragraph No.",
                  EstimateParagraphRAW2."Actual Amount");
              END;
              //C056424.en
            END;
          END;
        UNTIL ConstrSpecElemLineRAW.NEXT = 0;
      END;

      EstimateParagraphRAW.RESET;
      EstimateParagraphRAW.SETRANGE("Estimate No.", EstimateNo);
      EstimateParagraphRAW.SETFILTER("Tender Paragraph No.", '<%1', '9');

      IF EstimateParagraphRAW.FINDSET(TRUE, FALSE) THEN
        REPEAT
          // Find recipe selection
          IF EstimateParagraphRAW."Construction Spec. Line No." = '00' THEN BEGIN
            IF STRLEN(EstimateParagraphRAW."Tender Paragraph No.") = 6 THEN BEGIN
              EstimateParagraphRAW.CombineDefiCodes(DefiCodes);
              CopyActivityLines(EstimateParagraphRAW, DefiCodes);
              EstimateParagraphRAW.MODIFY;
            END;
          END;
        UNTIL EstimateParagraphRAW.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyActivityLines@1100525001(EstimateParagraphRAW@1100525001 : Record 11125679;DefiCodes@1100525005 : ARRAY [6] OF Code[1]);
    VAR
      EstimateRAW@1100525004 : Record 11012151;
      ConstrSpecActLineRAW@1100525000 : Record 11125683;
      EstimateLineRAW@1100528900 : Record 11125698;
      CommentLineRAW@1100525006 : Record 11125684;
      LastLine@1100525003 : Integer;
    BEGIN
      EstimateRAW.GET(EstimateParagraphRAW."Estimate No.");
      IF EstimateRAW."Copy Part Lines"= FALSE THEN EXIT;

      ConstrSpecActLineRAW.SETRANGE("Part Group", EstimateRAW."Part Group");
      ConstrSpecActLineRAW.SETRANGE(Activity, EstimateParagraphRAW.Activity);
      IF ConstrSpecActLineRAW.FINDSET THEN BEGIN
        EstimateLineRAW.SETRANGE("Estimate No.", EstimateParagraphRAW."Estimate No.");
        EstimateLineRAW.SETRANGE("Tender Paragraph No.", EstimateParagraphRAW."Tender Paragraph No.");
        IF EstimateLineRAW.FINDLAST THEN
          LastLine := EstimateLineRAW."Line No.";
        REPEAT
          IF MatchDefiCode(ConstrSpecActLineRAW, DefiCodes) THEN BEGIN
            EstimateLineRAW.INIT;  //DP01619
            EstimateLineRAW."Estimate No." := EstimateParagraphRAW."Estimate No.";
            EstimateLineRAW."Tender Paragraph No." := EstimateParagraphRAW."Tender Paragraph No.";
            EstimateLineRAW."Line No." := LastLine + 10000;
            LastLine := EstimateLineRAW."Line No.";
            EstimateLineRAW.INSERT(TRUE);
            //
            EstimateLineRAW.Source := EstimateLineRAW.Source::User;  //do not use option Recipe;
            EstimateLineRAW."Recipe Group" := ConstrSpecActLineRAW."Recipe Group";
            EstimateLineRAW."Recipe No." := ConstrSpecActLineRAW.Recipe;
            IF ConstrSpecActLineRAW.Recipe <> '' THEN
              EstimateLineRAW."Recipe Type" := EstimateLineRAW."Recipe Type"::"Recipe Header"
            ELSE
              CLEAR(EstimateLineRAW."Recipe Type");
            EstimateLineRAW."Plant Type" := ConstrSpecActLineRAW."Plant Type";
            EstimateLineRAW."Item No." := ConstrSpecActLineRAW."Item No.";
            EstimateLineRAW.Manufacturer := ConstrSpecActLineRAW.Manufacturer;
            EstimateLineRAW."Basic Item" := ConstrSpecActLineRAW."Basic Item";
            EstimateLineRAW."Vendor (Trade Item)" := ConstrSpecActLineRAW."Vendor (Trade Item)";
            EstimateLineRAW."Trade Item" := ConstrSpecActLineRAW."Trade Item";
            EstimateLineRAW.Description := ConstrSpecActLineRAW.Description;
            EstimateLineRAW."Time Quantity" := ConstrSpecActLineRAW."Time Quantity";
            EstimateLineRAW."Unit of Time" := ConstrSpecActLineRAW."Unit of Time";
            EstimateLineRAW.VALIDATE(Quantity, ConstrSpecActLineRAW.Quantity);
            EstimateLineRAW."Unit of Measure" := ConstrSpecActLineRAW."Unit of Measure";
            //DP01676.sn
            IF ConstrSpecActLineRAW."Cost Object Labor" <> '' THEN BEGIN
              ConstrSpecActLineRAW.TESTFIELD("Cost Object Price", '');
              EstimateLineRAW.VALIDATE("Cost Object", ConstrSpecActLineRAW."Cost Object Labor");
            END;
            IF ConstrSpecActLineRAW."Cost Object Price" <> '' THEN BEGIN
              ConstrSpecActLineRAW.TESTFIELD("Cost Object Labor", '');
              EstimateLineRAW.VALIDATE("Cost Object", ConstrSpecActLineRAW."Cost Object Price");
            END;
            IF (ConstrSpecActLineRAW.Quantity <> 0) THEN
              IF ConstrSpecActLineRAW.Recipe = '' THEN  //db, 04-02-20
                EstimateLineRAW.TESTFIELD("Cost Object");
            IF ConstrSpecActLineRAW."Cost Type (Hours)" = ConstrSpecActLineRAW."Cost Type (Hours)"::Labor THEN BEGIN
              IF (ConstrSpecActLineRAW.Norm <> 0) OR (ConstrSpecActLineRAW."Sub Operation Code" <> '') THEN BEGIN
                ConstrSpecActLineRAW.TESTFIELD("Gross Price", 0);
                ConstrSpecActLineRAW.TESTFIELD("Net Cost Price", 0);
              END;
              IF (ConstrSpecActLineRAW."Gross Price" <> 0) OR (ConstrSpecActLineRAW."Net Cost Price" <> 0) THEN BEGIN
                ConstrSpecActLineRAW.TESTFIELD(Norm, 0);
                ConstrSpecActLineRAW.TESTFIELD("Production Rate", 0);
              END;
            END;
            //DP01676.en
            EstimateLineRAW."Sub Operation Code" := ConstrSpecActLineRAW."Sub Operation Code";
            EstimateLineRAW.Norm := ConstrSpecActLineRAW.Norm;
            EstimateLineRAW."Production Rate" := ConstrSpecActLineRAW."Production Rate";
            IF ConstrSpecActLineRAW."Rate Code" <> '' THEN
              EstimateLineRAW.VALIDATE("Rate Code", ConstrSpecActLineRAW."Rate Code");  //DP01676
            EstimateLineRAW."Gross Price" := ConstrSpecActLineRAW."Gross Price";
            EstimateLineRAW."Purchase Discount %" := ConstrSpecActLineRAW."Purchase Discount %";
            EstimateLineRAW."Net Cost Price" := ConstrSpecActLineRAW."Net Cost Price";  //DP01676
            EstimateLineRAW."Sales Discount %" := ConstrSpecActLineRAW."Sales Discount %";
            //EstimateLineRAW."Net Sales Price" := ConstrSpecActLineRAW."Net Sales Price";
            EstimateLineRAW.VALIDATE("Part Quantity", EstimateParagraphRAW.Quantity);
            EstimateLineRAW."Subcontracting Activity" := ConstrSpecActLineRAW."Subcontracting Activity";  //DP01492-2
            EstimateLineRAW.Subcontractor := ConstrSpecActLineRAW.Subcontractor;  //DP01492-2
            EstimateLineRAW."Wage Component" := ConstrSpecActLineRAW."Wage Component";  //DP01676
            EstimateLineRAW.CalculateTotals;
             //DP01619.sn
            IF EstimateLineRAW."Recipe No." <> '' THEN BEGIN
              EstimateLineRAW."Appliance Type" := EstimateLineRAW."Appliance Type"::Recipe;
              EstimateLineRAW."Appliance Code" := EstimateLineRAW."Recipe No.";
            END;
            //DP01619.en
            EstimateLineRAW.FillApplianceTypeFromRecipeActivity;  //db, 04-02-20
            EstimateLineRAW.MODIFY;
            //
            IF ConstrSpecActLineRAW.Recipe <> '' THEN BEGIN
              CommentLineRAW.CopyCommentRecipeToEstLine(EstimateLineRAW."Recipe Group", EstimateLineRAW."Recipe No.", 0, EstimateLineRAW);  //DP01086
              EstimateLineRAW.AddLineFromStandardRecipe(
                EstimateLineRAW."Estimate No.", EstimateLineRAW."Tender Paragraph No.",
                EstimateLineRAW."Recipe Group", EstimateLineRAW."Recipe No.",
                EstimateLineRAW."Line No.",
                EstimateLineRAW."Recipe Type"::"Recipe Line",
                EstimateLineRAW."Part Quantity",
                EstimateLineRAW.Source,
                LastLine);  //DP01619: explode child-recipe
              IF EstimateLineRAW.FINDLAST THEN
                LastLine := EstimateLineRAW."Line No.";
            END;
          END;
        UNTIL ConstrSpecActLineRAW.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE MatchDefiCode@1100525003(ConstrSpecActLineRAW@1100525001 : Record 11125683;DefiCodes@1100525003 : ARRAY [6] OF Code[1]) : Boolean;
    VAR
      ProjSetup@1100529500 : Record 315;
    BEGIN
      IF ConstrSpecActLineRAW."Defi Code Position 1" <> '' THEN
        IF NOT ProjSetup.CodeInFilter(DefiCodes[1], ConstrSpecActLineRAW."Defi Code Position 1") THEN
           EXIT(FALSE);
      IF ConstrSpecActLineRAW."Defi Code Position 2" <> '' THEN
        IF NOT ProjSetup.CodeInFilter(DefiCodes[2], ConstrSpecActLineRAW."Defi Code Position 2") THEN
           EXIT(FALSE);
      IF ConstrSpecActLineRAW."Defi Code Position 3" <> '' THEN
        IF NOT ProjSetup.CodeInFilter(DefiCodes[3], ConstrSpecActLineRAW."Defi Code Position 3") THEN
           EXIT(FALSE);
      IF ConstrSpecActLineRAW."Defi Code Position 4" <> '' THEN
        IF NOT ProjSetup.CodeInFilter(DefiCodes[4], ConstrSpecActLineRAW."Defi Code Position 4") THEN
           EXIT(FALSE);
      IF ConstrSpecActLineRAW."Defi Code Position 5" <> '' THEN
        IF NOT ProjSetup.CodeInFilter(DefiCodes[5], ConstrSpecActLineRAW."Defi Code Position 5") THEN
           EXIT(FALSE);
      IF ConstrSpecActLineRAW."Defi Code Position 6" <> '' THEN
        IF NOT ProjSetup.CodeInFilter(DefiCodes[6], ConstrSpecActLineRAW."Defi Code Position 6") THEN
           EXIT(FALSE);

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

