OBJECT Codeunit 11128514 Remitt. journal - Check line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVNO10.00 (15000001);
  }
  PROPERTIES
  {
    TableNo=81;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1080006 : TextConst 'ENU=Field %1 is used for settlement return and should be left empty.;NOR=Feltet %1 settes ved avregningsretur og m† ikke fylles ut.';
      CreditMemoOffsetMsg@1080013 : TextConst '@@@=%1 - Day of Today;ENU=Credit memo offset can not be made in arrear and must not be made before %1.;NOR=Motregning av kreditnota kan ikke skje tilbake i tiden, og m† ikke komme f›r %1.';
      Text009@1080014 : TextConst '@@@=Parameter 1 - Jln line description, 2 - text with error;ENU=Error in journal line "%1".\%2.;NOR=Feil i kladdelinje "%1"\%2.';
      TwelveMonthsMsg@1080007 : TextConst 'ENU=12 months;NOR=12 m†neder';
      ThirteenMonthsMsg@1080002 : TextConst 'ENU=13 months;NOR=13 m†neder';
      PostingDateAfterMaxDateMsg@1080001 : TextConst '@@@=%1 - Count of months, %2 - Max Date;ENU=Payment must be made within %1, and should not be due after %2.;NOR=Betaling m† utf›res innen %1 og kan ikke forfalle etter %2.';
      PostingDateBeforeMaxDateMsg@1080000 : TextConst '@@@=%1 - Max Date;ENU=Payment must be made up to one year in arrears, and should not be due before %1.;NOR=Betaling kan utf›res maksimalt ett †r tilbake i tid og kan ikke forfalle f›r %1.';
      VendorRemittedMsg@1080010 : TextConst '@@@=%1 - Caption of "Account Type", %2 - Account type;ENU=%1 should be %2. Only the vendors are remitted.;NOR=%1 skal v‘re %2. Kun leverand›rer kan remitteres.';
      DocumentTypeMsg@1080015 : TextConst '@@@=%1 - Caption of "Document Type";ENU=%1 should be left empty when "paying" credit memo/debit entry.;NOR=%1 skal v‘re tom ved "betaling" av kreditnota/debetpost.';
      PaymentAndCashDiscMsg@1080004 : TextConst 'ENU=Due date and cash discount date are both the same Saturday or Sunday. Payment is not due before Monday, which is later than the cash discount date.;NOR=Betalingsdato og kontantrabattdato ligger p† samme l›rdag/s›ndag. Betalingen forfaller ikke f›r mandag, som er senere enn kontantrabattdatoen.';
      FieldIsNotUseForRemmitanceMsg@1080016 : TextConst '@@@=%1 - name of field;ENU=The %1 field must be empty because it is not used for remittance.;NOR=%1-feltet m† st† tomt fordi det ikke brukes til remittering.';

    PROCEDURE Check@1(GenJnlline@1080000 : Record 81;RemAccount@1080001 : Record 11128506;VAR ErrorText@1080004 : ARRAY [50] OF Text[250];VAR ErrorFatal@1080003 : ARRAY [50] OF Boolean) : Boolean;
    VAR
      RemAgreement@1080002 : Record 11128503;
      PaymentDay@1080007 : Record 2000000007;
      CashDiscountDay@1080008 : Record 2000000007;
      VendorLedgerEntry@1080009 : Record 25;
      RemittanceTools@1080010 : Codeunit 11128515;
      ErrorCounter@1080005 : Integer;
      CheckDatesError@1080006 : Text[250];
      GenJnlLineExt@111280000 : Record 11128091;
    BEGIN
      ErrorCounter := 0;
      RemAgreement.GET(RemAccount."Remittance Agreement Code");

      IF GenJnlline."Applies-to Doc. No." = '' THEN
        VendorLedgerEntry.INIT
      ELSE
        RemittanceTools.SearchEntry(GenJnlline,VendorLedgerEntry);

      // "Bal. Account nr." is not in use and must be left empty:
      IF GenJnlline."Bal. Account No." <> '' THEN
        AddError(STRSUBSTNO(FieldIsNotUseForRemmitanceMsg,GenJnlline.FIELDCAPTION("Bal. Account No.")),
          TRUE,ErrorCounter,ErrorText,ErrorFatal);

      // Document no. is used for settlement return. Must be left empty:
      IF GenJnlline."Document No." <> '' THEN
        AddError(STRSUBSTNO(Text001,GenJnlline.FIELDCAPTION("Document No.")),TRUE,ErrorCounter,ErrorText,ErrorFatal);

      IF GenJnlline."Account Type" <> GenJnlline."Account Type"::Vendor THEN
        AddError(STRSUBSTNO(VendorRemittedMsg,GenJnlline.FIELDCAPTION("Account Type"),GenJnlline."Account Type"),
          TRUE,ErrorCounter,ErrorText,ErrorFatal);

      IF (GenJnlline.Amount < 0) AND (GenJnlline."Document Type" <> 0) THEN
        AddError(STRSUBSTNO(DocumentTypeMsg,GenJnlline.FIELDCAPTION("Document Type")),TRUE,ErrorCounter,ErrorText,ErrorFatal);

      CheckDatesError := CheckDates(GenJnlline);
      IF CheckDatesError <> '' THEN
        AddError(CheckDatesError,TRUE,ErrorCounter,ErrorText,ErrorFatal);

      // Both payment and cash discount are due on the same saturday/sunday
      IF PaymentDay.GET(PaymentDay."Period Type"::Date,GenJnlline."Posting Date") AND
         CashDiscountDay.GET(CashDiscountDay."Period Type"::Date,VendorLedgerEntry."Pmt. Discount Date")
      THEN
        IF (PaymentDay."Period No." IN [6,7]) AND
           (CashDiscountDay."Period No." IN [6,7]) AND
           ((VendorLedgerEntry."Pmt. Discount Date" - GenJnlline."Posting Date") IN [0,1])
        THEN
          AddError(PaymentAndCashDiscMsg,FALSE,ErrorCounter,ErrorText,ErrorFatal);

      // Check for PostBanken: Credit memo-date must be prior to TODAY:
      GenJnlLineExt.InitGetLine(GenJnlline); //4PSSE
      RemAccount.GET(GenJnlLineExt."Remittance Account Code");
      IF RemAgreement."Payment System" = RemAgreement."Payment System"::Postbanken THEN
        IF (GenJnlline."Posting Date" < TODAY) AND (GenJnlline.Amount < 0) THEN
          AddError(STRSUBSTNO(CreditMemoOffsetMsg,TODAY),TRUE,ErrorCounter,ErrorText,ErrorFatal);

      EXIT(ErrorText[1] <> '');
    END;

    PROCEDURE CheckUntilFirstError@1080001(GenJnlLine@1080000 : Record 81;RemittanceAccount@1080001 : Record 11128506);
    VAR
      ErrorText@1080003 : ARRAY [50] OF Text[250];
      ErrorFatal@1080004 : ARRAY [50] OF Boolean;
    BEGIN
      IF Check(GenJnlLine,RemittanceAccount,ErrorText,ErrorFatal) THEN
        ERROR(Text009,GenJnlLine.Description,ErrorText[1]);
    END;

    LOCAL PROCEDURE CheckDates@1080000(GenJnlLine@1080000 : Record 81) : Text[250];
    VAR
      RemittanceAccount@1080001 : Record 11128506;
      RemittanceAgreement@1080002 : Record 11128503;
      MaxDate@1080004 : Date;
      MessageText@1080003 : Text[100];
      GenJnlLineExt@111280000 : Record 11128091;
    BEGIN
      GenJnlLineExt.InitGetLine(GenJnlLine); //4PSSE
      RemittanceAccount.GET(GenJnlLineExt."Remittance Account Code");
      RemittanceAgreement.GET(RemittanceAccount."Remittance Agreement Code");

      // Payment made up to 12/13 mths. in advance
      IF RemittanceAgreement."Payment System" = RemittanceAgreement."Payment System"::BBS THEN BEGIN
        MaxDate := CALCDATE('<+12M-1D>',TODAY);
        MessageText := TwelveMonthsMsg;
      END ELSE BEGIN
        MaxDate := CALCDATE('<+13M-1D>',TODAY);
        MessageText := ThirteenMonthsMsg;
      END;
      IF GenJnlLine."Posting Date" > MaxDate THEN
        EXIT(STRSUBSTNO(PostingDateAfterMaxDateMsg,MessageText,MaxDate));

      // Payment made up to 1 year in arrear:
      MaxDate := CALCDATE('<-12M>',TODAY);
      IF GenJnlLine."Posting Date" < MaxDate THEN
        EXIT(STRSUBSTNO(PostingDateBeforeMaxDateMsg,MaxDate));
    END;

    LOCAL PROCEDURE AddError@1080002(ErrorMsg@1080000 : Text[250];Fatal@1080001 : Boolean;VAR ErrorCounter@1080002 : Integer;VAR ErrorText@1080004 : ARRAY [50] OF Text[250];VAR ErrorFatal@1080003 : ARRAY [50] OF Boolean);
    BEGIN
      ErrorCounter := ErrorCounter + 1;
      ErrorText[ErrorCounter] := ErrorMsg;
      ErrorFatal[ErrorCounter] := Fatal;
    END;

    BEGIN
    END.
  }
}

