OBJECT Report 11125677 Convert Base Recipe Lines RAW
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Konversion Kalkulationszeile (RAW);
               ENU=Convert Estimate Line (RAW);
               NLD=Conversie calculatieregel (RAW)];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 1100528901;;DataItem;                  ;
               DataItemTable=Table11020581;
               OnPreDataItem=BEGIN
                               Window.OPEN(Text001);
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1, "Base Recipe".TABLECAPTION + '  ' + "Base Recipe"."Recipe Group" + '-' + "Base Recipe"."No.");
                                  ProcessBaseRecipeLines;
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE;
                              END;

               ReqFilterFields=Recipe Group }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Window@1100528905 : Dialog;
      Text001@1100528906 : TextConst 'DEU=Besch„ftigt mit #1################# @2@@@@@@@@@@@@@;ENU=Busy with       #1################# @2@@@@@@@@@@@@@;NLD=Bezig met       #1################# @2@@@@@@@@@@@@@;SVE=Upptagen med    #1################# @2@@@@@@@@@@@@@';

    LOCAL PROCEDURE ProcessBaseRecipeLines@1100528902();
    VAR
      BaseRecipeLine@1100528903 : Record 11020582;
      currec@1100528901 : Integer;
      maxrec@1100528902 : Integer;
      TmpBaseRecipeLine@1100528900 : TEMPORARY Record 11020582;
    BEGIN
      IF BaseRecipeLine.FINDSET THEN BEGIN
        currec := 0;
        maxrec := BaseRecipeLine.COUNT;
        REPEAT
          currec := currec + 1;
          Window.UPDATE(2,ROUND(currec / maxrec * 10000,1));
          //
          IF BaseRecipeLine."Cost Type (Hours)" = BaseRecipeLine."Cost Type (Hours)"::Labor THEN BEGIN
            IF ((BaseRecipeLine.Norm <> 0) OR (BaseRecipeLine."Sub Operation Code" <> '')) AND
               ((BaseRecipeLine."Gross Price" <> 0) OR (BaseRecipeLine."Net Cost Price" <> 0)) AND
               (BaseRecipeLine."Recipe (Child)" = '') THEN BEGIN
               TmpBaseRecipeLine.INIT;
               TmpBaseRecipeLine."Recipe Group" := BaseRecipeLine."Recipe Group";
               TmpBaseRecipeLine.Recipe := BaseRecipeLine.Recipe;
               TmpBaseRecipeLine."Line No." := BaseRecipeLine."Line No.";
               TmpBaseRecipeLine."Attached to Line No." := BaseRecipeLine."Line No.";
               REPEAT
                 TmpBaseRecipeLine."Line No." := TmpBaseRecipeLine."Line No." + 1;
               UNTIL TmpBaseRecipeLine.INSERT;
               //
               TmpBaseRecipeLine."Rate Code" := BaseRecipeLine."Rate Code";
               TmpBaseRecipeLine."Cost Rate" := BaseRecipeLine."Cost Rate";
               TmpBaseRecipeLine."Sales Rate" := BaseRecipeLine."Sales Rate";
               TmpBaseRecipeLine."Rate Type" := BaseRecipeLine."Rate Type";
               TmpBaseRecipeLine."Team Size" := BaseRecipeLine."Team Size";
               TmpBaseRecipeLine."Wage Component" := BaseRecipeLine."Wage Component";
               TmpBaseRecipeLine."Sub Operation Code" := BaseRecipeLine."Sub Operation Code";
               TmpBaseRecipeLine."Norm Group" := BaseRecipeLine."Norm Group";
               TmpBaseRecipeLine."Norm Agreement" := BaseRecipeLine."Norm Agreement";
               TmpBaseRecipeLine.Norm := BaseRecipeLine.Norm;
               TmpBaseRecipeLine."Production Rate" := BaseRecipeLine."Production Rate";
               TmpBaseRecipeLine."Surcharge % Labor" := BaseRecipeLine."Surcharge % Labor";
               TmpBaseRecipeLine."Cost Object Labor" := BaseRecipeLine."Cost Object Labor";
               TmpBaseRecipeLine.Description := BaseRecipeLine.Description;
               TmpBaseRecipeLine.Quantity := BaseRecipeLine.Quantity;
               TmpBaseRecipeLine."Unit of Measure" := BaseRecipeLine."Unit of Measure";
               TmpBaseRecipeLine."Time Quantity" := BaseRecipeLine."Time Quantity";
               TmpBaseRecipeLine."Unit of Measure" := BaseRecipeLine."Unit of Time";
               TmpBaseRecipeLine."Line Status" := BaseRecipeLine."Line Status";
               TmpBaseRecipeLine.Element := BaseRecipeLine.Element;
               TmpBaseRecipeLine."Project Planning Activity Code" := BaseRecipeLine."Project Planning Activity Code";
               TmpBaseRecipeLine.MODIFY;
               //
               BaseRecipeLine."Rate Code" := '';
               BaseRecipeLine."Sub Operation Code" := '';
               BaseRecipeLine."Norm Group" := '';
               BaseRecipeLine."Norm Agreement" := FALSE;
               BaseRecipeLine."Surcharge % Labor" := 0;
               BaseRecipeLine."Cost Object Labor" := '';
               BaseRecipeLine.InitRateRelatedFields;
               BaseRecipeLine.InitNormRelatedFields(0);
               BaseRecipeLine.CalculateTotals;
            END;
          END;
          //
          BaseRecipeLine.MODIFY;
        UNTIL BaseRecipeLine.NEXT = 0;
      END;
      //
      IF TmpBaseRecipeLine.FINDSET THEN BEGIN
        REPEAT
          BaseRecipeLine := TmpBaseRecipeLine;
          BaseRecipeLine.INSERT;
          BaseRecipeLine.CalculateTotals;
          BaseRecipeLine.MODIFY;
        UNTIL TmpBaseRecipeLine.NEXT = 0;
        TmpBaseRecipeLine.DELETEALL;
      END;
    END;

    BEGIN
    {
      db, 19-03-18: opgenomen in codeunit 11125347 ("4PSDataUpgrade".ExecuteDataPerCompanyUpgrade);
      db, 12-04-18: uitsplitsen standaard recepten naar 1 kostensoort per regel
    }
    END.
  }
  RDLDATA
  {
  }
}

