OBJECT Codeunit 11020217 Prognosis Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ProjSetup@1100525026 : Record 315;
      BudgetDec@1100525000 : Decimal;
      BudgetSurchargeDec@1100525001 : Decimal;
      ActualDec@1100525002 : Decimal;
      AllowedDec@1100525003 : Decimal;
      TotalCostDec@1100525005 : Decimal;
      AvailableDec@1100525006 : Decimal;
      RecNotInvDec@1100525007 : Decimal;
      OpenDec@1100525008 : Decimal;
      OpenAmountHoursDec@1100525009 : Decimal;
      PrognTotCostDec@1100525010 : Decimal;
      BudgHoursDec@1100525011 : Decimal;
      OpenHoursDec@1100525012 : Decimal;
      ActualHoursDec@1100525013 : Decimal;
      AllowedHoursDec@1100525014 : Decimal;
      ResHoursDec@1100525015 : Decimal;
      TotalHoursDec@1100525016 : Decimal;
      AvailHoursDec@1100525017 : Decimal;
      ProgHoursDec@1100525018 : Decimal;
      SurchOpenDec@1100525019 : Decimal;
      SurchOpenAmountHoursDec@1100525020 : Decimal;
      OpenAmountInvDec@1100525021 : Decimal;
      SurchOpenAmountInvDec@1100525022 : Decimal;
      TotCostExclRiscCovDec@1100525023 : Decimal;
      EstimPurchResultDec@1100525024 : Decimal;
      Text001@1100525025 : TextConst 'ENU=Project %1 -  Element %2 does not exist (from surcharges);NOR=Prosjekt %1 Í Element %2 finnes ikke (fra tileggsgebyrer);SVE=Projekt %1 Í elementet %2 finns inte (fr†n till„ggsavgifter)';
      RiscCoverage@1100528802 : Decimal;
      RiscCoverageWithdraw@1100528801 : Decimal;
      PrognTotHoursDec@1100528800 : Decimal;
      OriginalBudgetAmt@1100529005 : Decimal;
      AdjustmentsBudget@1100529004 : Decimal;
      ExtensionBudget@1100529003 : Decimal;
      OptionsBudget@1100525027 : Decimal;
      PurchaseBudget@1100529002 : Decimal;
      PurchaseAmount@1100529001 : Decimal;
      PurchaseAmountGetOrders@1100528400 : Decimal;
      ActualCostsPurchaseAction@1100529000 : Decimal;
      ProductDiscount@1100528900 : Decimal;
      PurchaseAmountPurchaseAction@1100527300 : Decimal;
      PurchaseResult@1100529600 : Decimal;
      "-EVRY-"@1100285041 : Integer;
      AutomaticGeneratePrognosis@1100285040 : Report 11012668;
      AutomaticGeneratePrognosisCC@1100285039 : Report 11128270;
      StartProcess@1100285038 : Boolean;
      PrognosisDate@1100285037 : Date;
      CopyPrevCostPrognosis@1100285036 : Boolean;
      CopyPrevPrognosisEndResult@1100285035 : Boolean;
      CopyPrevRevenuePrognosis@1100285034 : Boolean;
      CopyPrevPrognosisTotalRev@1100285033 : Boolean;
      CopyCommentsPrevPrognosis@1100285032 : Boolean;
      FillProgWithAvailableCost@1100285031 : Boolean;
      FillProgWithExtrapolatedCosts@1100285030 : Boolean;
      FillProgFromProjPlanningAct@1100285029 : Boolean;
      FillProgFromRequestedActCap@1100285028 : Boolean;
      FillProgFromAssignedActCap@1100285027 : Boolean;
      FillProgRevenues@1100285026 : Boolean;
      CalcSurcharges@1100285025 : Boolean;
      CalcRiscCoverage@1100525100 : Boolean;
      GenerateCostPlusEntries@1100285024 : Boolean;
      CopyPrevRevenuePrognosis2@1100285023 : Boolean;
      CopyPrevPrognosisEndResRevenue@1100285022 : Boolean;
      FillPrognosisExpectedRevenue@1100285021 : Boolean;
      CostTypes@1100285020 : 'Cost,Revenue,Both';
      ProjRec@1100285019 : Record 11072003;
      PrevPrognosis1@1100285018 : Record 11012034;
      newPrognosisLine@1100285017 : Record 11128270;
      tempCostComp@1100285016 : TEMPORARY Record 37;
      BudgetLine@1100285015 : Record 11012001;
      JobLedgEntry@1100285014 : Record 11072005;
      PurchLine@1100285013 : Record 39;
      HourAccLine@1100285012 : Record 11012039;
      PostedHourLine@1100285011 : Record 11012085;
      PurchOrderCtrlLine@1100285010 : Record 11020221;
      PrognosisLine@1100285009 : Record 11128270;
      SalesLine@1100285008 : Record 37;
      SalesInvLine@1100285007 : Record 113;
      ProjectInstallment@1100285006 : Record 11012018;
      ProjCostPlusEntry@1100285005 : Record 11012019;
      ProjPrincipal@1100285004 : Record 11012005;
      GLSetup@1100285003 : Record 98;
      DimVal@1100285002 : Record 349;
      CreateProjectCostPlus@1100285001 : Report 11012013;
      SubProject@1100285000 : Record 11072003;
      includeFinishedJobs@1100285100 : Boolean;
      IsFromWebService@1100285101 : Boolean;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
      ActualCostsNotPurchaseOrderRelated@1100528200 : Decimal;
      Window@1100525004 : Dialog;
      Text002@1100525028 : TextConst 'ENU=Prognosis Lines         @1@@@@@@@@@@@@@\';
      Text003@1100525029 : TextConst 'ENU=Prognosis Specification @2@@@@@@@@@@@@@';
      CopyCommentsCurrentPrognosis@1100527450 : Boolean;

    PROCEDURE RoughPrognTotCost@1100525001(ProjRec@1100525001 : Record 11072003;VAR PrognRec@1100525002 : Record 11012034);
    VAR
      SubProjRec@1100525000 : Record 11072003;
      ExtRec@1100525003 : Record 11012004;
      BudgetLine@1100525007 : Record 11012001;
      CostContMgt@1100525006 : Codeunit 11012006;
    BEGIN
      WITH PrognRec DO BEGIN
        "Rough Prognosis Total Cost" := 0;
        IF "Prognosis Level" = "Prognosis Level"::Detailed THEN
          EXIT;

        SubProjRec.SETCURRENTKEY("Main Project");
        SubProjRec.SETRANGE("Main Project", ProjRec."Main Project");
        IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SubProjRec.SETRANGE("No.", ProjRec."No.");
        SubProjRec.SETRANGE("Cumulation Filter", 0D, "Prognosis Date");
        IF SubProjRec.FINDSET THEN
          REPEAT
            SubProjRec.SETRANGE("Project Filter", SubProjRec."No.");
            IF SubProjRec."Settlement Method" = SubProjRec."Settlement Method"::"Fixed Price" THEN BEGIN
              //Fixed Price: budget
              SubProjRec.CALCFIELDS(Budget);
              "Rough Prognosis Total Cost" := "Rough Prognosis Total Cost" + SubProjRec.Budget;

              ExtRec.RESET;
              ExtRec.SETRANGE("Project No.", SubProjRec."No.");
              ExtRec.SETFILTER(Status, '<%1', ExtRec.Status::Order);
              ExtRec.SETRANGE("Include in Expectation", TRUE);
              IF ExtRec.FINDSET THEN
                REPEAT
                  //Add Expected Budget Extensions
                  BudgetLine.SETCURRENTKEY("Project No.", "Extension Contract");
                  BudgetLine.SETRANGE("Project No.", ExtRec."Project No.");
                  BudgetLine.SETRANGE("Extension Contract", ExtRec."Contract No.");
                  BudgetLine.SETFILTER("Extension Contract Status", '<%1', BudgetLine."Extension Contract Status"::Order);
                  BudgetLine.SETRANGE("Version Date", 0D, "Prognosis Date");
                  IF BudgetLine.FINDSET THEN
                    REPEAT
                      "Rough Prognosis Total Cost" := "Rough Prognosis Total Cost" + BudgetLine."Amount (LCY)";
                    UNTIL BudgetLine.NEXT = 0;
                UNTIL ExtRec.NEXT = 0;
            END ELSE BEGIN
              //Cost Plus: total cost
              "Rough Prognosis Total Cost" := "Rough Prognosis Total Cost" + CostContMgt.TotCostProject(SubProjRec,TRUE);
            END;
          UNTIL SubProjRec.NEXT = 0;
      END;
    END;

    PROCEDURE PrognRevenues@1100525002(ProjRec@1100525001 : Record 11072003;VAR PrognRec@1100525002 : Record 11012034);
    VAR
      SubProjRec@1100525000 : Record 11072003;
      ExtRec@1100525003 : Record 11012004;
      UnitPriceProdRec@1100525009 : Record 11020425;
      UnitPriceProdLine@1100525005 : Record 11020426;
      JobLedgEntry@1100525004 : Record 11072005;
      SalesLine@1100525014 : Record 37;
      ProjCostPlusEntry@1100525008 : Record 11012019;
      UnitPriceExists@1100525006 : Boolean;
      HandleCostPlusUnitPriAsContr@1100525012 : Boolean;
      CountUnitPrice@1100525013 : Boolean;
      ProdUnitPriceContractAmount@1100525011 : Decimal;
      CostPlusAmountToInvoiceDec@1100525010 : Decimal;
    BEGIN
      WITH PrognRec DO BEGIN
        IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          ProjRec.SETFILTER("Project Filter", "Project No.");
        ProjRec.SETRANGE("Cumulation Filter", 0D, "Prognosis Date");

        //Revenues Expected
        ProjRec.CALCFIELDS(
          "Project Contract Amount", "Extension Contract Amount", "Project Plot Price",
          "Options Contract Amount", "Extension Quoted Amount");
        "Contract Amount Project" := ProjRec."Project Contract Amount";
        "Plot Price Project" := ProjRec."Project Plot Price";
        "Contract Amount Extensions" := ProjRec."Extension Contract Amount";
        "Contract Amount Options" := ProjRec."Options Contract Amount";
        "Quotation Amount Extensions" := ProjRec."Extension Quoted Amount";

        //Revenues Invoiced
        "Contract Amount Invoiced" := 0;
        "Plot Price Invoiced" := 0;
        "Extension Amount Invoiced" := 0;
        "Option Amount Invoiced" := 0;
        "Cost Plus Invoiced" := 0;
        "Project Invoiced" := 0;
        JobLedgEntry.RESET;
        JobLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Entry Type");
        JobLedgEntry.SETRANGE("Main Project No.", ProjRec."Main Project");
        IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          JobLedgEntry.SETRANGE("Job No.", "Project No.");
        JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
        JobLedgEntry.SETRANGE("Posting Date", 0D, "Prognosis Date");
        JobLedgEntry.SETRANGE("Advance Payment", FALSE);
        IF JobLedgEntry.FINDSET THEN
          REPEAT
           IF JobLedgEntry."Project Invoice" AND JobLedgEntry."Installment Invoice" THEN BEGIN
             IF (JobLedgEntry."Installment No." <> '0') THEN BEGIN
               IF JobLedgEntry."Extension Contract" = '' THEN
                 IF IsOptionInstallment(JobLedgEntry) THEN
                   "Option Amount Invoiced" := "Option Amount Invoiced" - JobLedgEntry."Total Price (LCY)"
                 ELSE
                   "Contract Amount Invoiced" := "Contract Amount Invoiced" - JobLedgEntry."Total Price (LCY)"
               ELSE
                 "Extension Amount Invoiced" := "Extension Amount Invoiced" - JobLedgEntry."Total Price (LCY)";
             END ELSE
               "Plot Price Invoiced" := "Plot Price Invoiced" - JobLedgEntry."Total Price (LCY)";
           END ELSE
             "Cost Plus Invoiced" := "Cost Plus Invoiced" - JobLedgEntry."Total Price (LCY)";
           "Project Invoiced" := "Project Invoiced" - JobLedgEntry."Total Price (LCY)";
          UNTIL JobLedgEntry.NEXT = 0;

        SubProjRec.SETCURRENTKEY("Main Project");
        SubProjRec.SETRANGE("Main Project", ProjRec."Main Project");
        IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SubProjRec.SETRANGE("No.", "Project No.");
        IF SubProjRec.FINDSET THEN
          REPEAT
            //Unit Prices
            UnitPriceExists := FALSE;
            IF FPSLicenseManagement.LicenseAndReadPermissionForTable(UnitPriceProdRec) THEN BEGIN
              UnitPriceProdRec.RESET;
              UnitPriceProdRec.SETRANGE("Project No.", SubProjRec."No.");
              UnitPriceExists := NOT UnitPriceProdRec.ISEMPTY;
            END;
            HandleCostPlusUnitPriAsContr :=
              UnitPriceExists AND
              (SubProjRec."Settlement Method" = SubProjRec."Settlement Method"::"Fixed Price");
            IF HandleCostPlusUnitPriAsContr THEN BEGIN
              ProdUnitPriceContractAmount := 0;
              JobLedgEntry.RESET;
              JobLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Entry Type");
              JobLedgEntry.SETRANGE("Main Project No.", SubProjRec."Main Project");
              JobLedgEntry.SETRANGE("Job No.", SubProjRec."No.");
              JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
              JobLedgEntry.SETRANGE("Project Invoice", TRUE);
              JobLedgEntry.SETRANGE("Installment Invoice", FALSE);
              JobLedgEntry.SETRANGE("Posting Date", 0D, "Prognosis Date");
              JobLedgEntry.SETRANGE("Advance Payment", FALSE);
              IF JobLedgEntry.FINDSET THEN
                REPEAT
                  ProdUnitPriceContractAmount := ProdUnitPriceContractAmount - JobLedgEntry."Total Price (LCY)";
                UNTIL JobLedgEntry.NEXT = 0;
              "Cost Plus Invoiced" := "Cost Plus Invoiced" - ProdUnitPriceContractAmount;
              "Contract Amount Invoiced" := "Contract Amount Invoiced" + ProdUnitPriceContractAmount;
            END ELSE BEGIN
              IF UnitPriceExists THEN BEGIN
                UnitPriceProdRec.RESET;
                UnitPriceProdRec.SETRANGE("Project No.", SubProjRec."No.");
                UnitPriceProdRec.SETRANGE(Status, UnitPriceProdRec.Status::Offered, UnitPriceProdRec.Status::Approved);
                UnitPriceProdRec.SETFILTER("Production Date", '..%1', "Prognosis Date");
                IF UnitPriceProdRec.FINDSET THEN
                  REPEAT
                    IF UnitPriceProdRec.Invoiced THEN BEGIN
                      SalesLine.SETCURRENTKEY("Document Type","Job No.");
                      SalesLine.SETRANGE(
                        "Document Type",SalesLine."Document Type"::Invoice,SalesLine."Document Type"::"Credit Memo");
                      SalesLine.SETRANGE("Job No.", SubProjRec."No.");
                      SalesLine.SETRANGE("Production Motivation Date", UnitPriceProdRec."Production Date");
                      SalesLine.SETRANGE("Production Motivation Code", UnitPriceProdRec.Code);
                      CountUnitPrice := NOT SalesLine.ISEMPTY;
                    END ELSE
                      CountUnitPrice := TRUE;
                    IF CountUnitPrice THEN BEGIN
                      UnitPriceProdLine.SETRANGE("Project No.", UnitPriceProdRec."Project No.");
                      UnitPriceProdLine.SETRANGE("Project Principal", UnitPriceProdRec."Project Principal");
                      UnitPriceProdLine.SETRANGE("Production Date", UnitPriceProdRec."Production Date");
                      UnitPriceProdLine.SETRANGE(Code, UnitPriceProdRec.Code);
                      IF UnitPriceProdLine.FINDSET THEN
                        REPEAT
                          CostPlusAmountToInvoiceDec := CostPlusAmountToInvoiceDec + UnitPriceProdLine."Production Value";
                        UNTIL UnitPriceProdLine.NEXT = 0;
                    END;
                  UNTIL UnitPriceProdRec.NEXT = 0;
              END ELSE
                CostPlusAmountToInvoiceDec := CostPlusAmountToInvoiceDec + CostPlustAmountToInvoice(SubProjRec);
            END;
          UNTIL SubProjRec.NEXT = 0;

        //Revenues To Invoice

        //Revenues To Invoice Cost Plus Manually added
        ProjCostPlusEntry.SETRANGE("Project No.", "Project No.");
        ProjCostPlusEntry.SETRANGE("Entry No. Project Ledger", 0);
        IF ProjCostPlusEntry.FINDSET THEN
          REPEAT
            IF ProjCostPlusEntry.Invoiced THEN BEGIN
              ProjCostPlusEntry.CALCFIELDS("Invoice in Process", "Credit Memo in Process");
              CostPlusAmountToInvoiceDec :=
                CostPlusAmountToInvoiceDec +
                ProjCostPlusEntry."Invoice in Process" +
                ProjCostPlusEntry."Credit Memo in Process";
            END ELSE
              CostPlusAmountToInvoiceDec :=
                CostPlusAmountToInvoiceDec + ProjCostPlusEntry."Sales Amount (LCY)";
          UNTIL ProjCostPlusEntry.NEXT = 0;

        "Contract Amount to Invoice" := "Contract Amount Project" - "Contract Amount Invoiced";
        "Plot Price to Invoice" := "Plot Price Project" - "Plot Price Invoiced";
        "Extension Amount to Invoice" := "Contract Amount Extensions" - "Extension Amount Invoiced";
        "Option Amount to Invoice" := "Contract Amount Options" - "Option Amount Invoiced";
        "Cost Plus to Invoice" := CostPlusAmountToInvoiceDec;

        //Revenue Prognosis
        IF "Prognosis Level" = "Prognosis Level"::Rough THEN BEGIN
          "Rough Prognosis Total Revenues" :=
            "Cost Plus Invoiced" + CostPlusAmountToInvoiceDec +
            "Contract Amount Project" + "Contract Amount Extensions" + "Contract Amount Options";
          IF "Include Plot Price in Revenues" THEN
            "Rough Prognosis Total Revenues" += "Plot Price Project";

          ExtRec.RESET;
          ExtRec.SETCURRENTKEY("Main Project No.");
          ExtRec.SETRANGE("Main Project No.", ProjRec."Main Project");
          IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
            ExtRec.SETRANGE("Project No.", "Project No.");
          ExtRec.SETRANGE(Status, ExtRec.Status::Applied, ExtRec.Status::Offered);
          ExtRec.SETRANGE("Treat like Order", FALSE);
          ExtRec.SETRANGE("Include in Expectation", TRUE);
          IF ExtRec.FINDSET THEN
            REPEAT
              IF ExtRec.Status = ExtRec.Status::Applied THEN
                "Rough Prognosis Total Revenues" := "Rough Prognosis Total Revenues" + ExtRec."Estimated Amount"
              ELSE
                "Rough Prognosis Total Revenues" := "Rough Prognosis Total Revenues" + ExtRec."Offered Amount";
            UNTIL ExtRec.NEXT = 0;
        END;

        "To Invoice Incl Offered Ext." :=
          "Contract Amount to Invoice" + "Plot Price to Invoice" + "Extension Amount to Invoice" +
          "Option Amount to Invoice" + "Quotation Amount Extensions";
      END;
    END;

    PROCEDURE CostPlustAmountToInvoice@11020217(ProjRec@1100525001 : Record 11072003) : Decimal;
    VAR
      CalcCostPlus@1100525000 : Report 11020287;
    BEGIN
      CalcCostPlus.SetRepeatForRestQuan;
      CalcCostPlus.USEREQUESTPAGE(FALSE);
      ProjRec.SETRANGE("No.", ProjRec."No.");
      CalcCostPlus.SETTABLEVIEW(ProjRec);
      CalcCostPlus.RUNMODAL;
      EXIT(CalcCostPlus.GetSalesAmountProj);
    END;

    PROCEDURE FillRoughPrognProjRecLine@1100525000(ProjRec@1100525001 : Record 11072003;VAR ProjRecordingLine@1100525002 : Record 11072021);
    VAR
      PrognRec@1100525000 : Record 11012034;
    BEGIN
      //#C027085.c
      ProjRecordingLine."Rough Prognosis Total Cost" := 0;
      ProjRecordingLine."Rough Prognosis Total Revenues" := 0;
      IF ProjRec."Prognosis Level" = ProjRec."Prognosis Level"::Rough THEN BEGIN
        PrognRec."Project No." := ProjRecordingLine."Project No.";
        PrognRec."Prognosis Date" := ProjRecordingLine."Recording Date";
        PrognRec."Prognosis Level" := ProjRec."Prognosis Level";
        PrognRevenues(ProjRec, PrognRec);
        RoughPrognTotCost(ProjRec, PrognRec);

        ProjRecordingLine.VALIDATE("Rough Prognosis Total Cost", PrognRec."Rough Prognosis Total Cost");
        ProjRecordingLine.VALIDATE("Rough Prognosis Total Revenues", PrognRec."Rough Prognosis Total Revenues");
      END;
      //#C027085.sn
      IF ProjRec."Prognosis Level" = ProjRec."Prognosis Level"::Element THEN
        IF PrognRec.GET(ProjRecordingLine."Project No.", ProjRecordingLine."Recording Date") THEN BEGIN
          PrognRec.CALCFIELDS("Prognosis Total Cost Element", "Prognosis Revenue Element");
          ProjRecordingLine.VALIDATE("Rough Prognosis Total Cost", PrognRec."Prognosis Total Cost Element");
          ProjRecordingLine.VALIDATE("Rough Prognosis Total Revenues", PrognRec."Prognosis Revenue Element");
        END ELSE BEGIN
          PrognRevenues(ProjRec, PrognRec);
          ProjRecordingLine.VALIDATE("Rough Prognosis Total Revenues", PrognRec."Rough Prognosis Total Revenues");
        END;
      //#C027085.en
    END;

    PROCEDURE IsOptionInstallment@1210190000(JobLedgerEntry@1210190000 : Record 11072005) : Boolean;
    VAR
      ProjectInstallment@1210190001 : Record 11012018;
    BEGIN
      WITH JobLedgerEntry DO BEGIN
        IF "Plot No." = '' THEN
          EXIT(FALSE);

        IF NOT ProjectInstallment.GET("Job No.", Principal, "Plot No.", "Installment No.") THEN
          EXIT(FALSE);

        EXIT(ProjectInstallment.Option <> '');
      END;
    END;

    PROCEDURE SetValuesToZero@4();
    BEGIN
      BudgetDec := 0;
      BudgetSurchargeDec := 0;
      ActualDec := 0;
      AllowedDec := 0;
      TotalCostDec := 0;
      AvailableDec := 0;
      RecNotInvDec := 0;
      ProductDiscount := 0;
      OpenDec := 0;
      OpenAmountHoursDec := 0;
      PrognTotCostDec :=0;

      BudgHoursDec := 0;
      OpenHoursDec := 0;
      ActualHoursDec := 0;
      AllowedHoursDec := 0;
      ResHoursDec  := 0;
      TotalHoursDec := 0;
      AvailHoursDec := 0;
      ProgHoursDec := 0;

      SurchOpenDec := 0;
      SurchOpenAmountHoursDec := 0;
      OpenAmountInvDec := 0;
      SurchOpenAmountInvDec := 0;

      TotCostExclRiscCovDec := 0;
      EstimPurchResultDec := 0;
      RiscCoverage := 0;
      RiscCoverageWithdraw := 0;
      PrognTotHoursDec := 0;

      OriginalBudgetAmt := 0;
      AdjustmentsBudget := 0;
      ExtensionBudget := 0;
      OptionsBudget := 0;
      PurchaseBudget := 0;
      PurchaseAmount := 0;
      PurchaseAmountGetOrders := 0;
      ActualCostsPurchaseAction := 0;
      ActualCostsNotPurchaseOrderRelated := 0;
      PurchaseAmountPurchaseAction := 0;
      PurchaseResult := 0;
    END;

    PROCEDURE CalculateValues@10(VAR lPrognLineRec@11012000 : Record 11012035;SaveValues@1210190000 : Boolean);
    VAR
      ProjRec@1100525001 : Record 11072003;
      ElemCstObjCntrlRec@1100525005 : Record 11012050;
      CstObjCntrlRec@1100525007 : Record 11012047;
      lvProgHeaderRec@1100525000 : Record 11012034;
      SearchProgrDate@1100525004 : Codeunit 11012014;
      CostContMgt@1100525006 : Codeunit 11012006;
      DummyDec@1100525003 : Decimal;
    BEGIN
      WITH lPrognLineRec DO BEGIN
        SetValuesToZero;

        IF NOT ProjRec.GET("Project No.") THEN
          EXIT;
        IF NOT ProjSetup.GET THEN
          EXIT;

        IF NOT SaveValues AND "Fix Prognosis Line" THEN BEGIN
          BudgetDec := "Budget Amount";
          BudgetSurchargeDec := "Budget Surcharge Amount";
          ActualDec := "Actual Costs";
          TotalCostDec := "Total Cost";
          TotCostExclRiscCovDec := "Total Cost (Excl. Risc Cov.)";
          AllowedDec := "Allowed Costs";
          RecNotInvDec := "Received/Not Invoiced";
          ProductDiscount := "Product Discount (Purchase)";
          OpenDec := "Open (Purchase)";
          RiscCoverage := "Total Risc Coverage Amount";
          RiscCoverageWithdraw := "Total Release Risc Coverage";
          SurchOpenDec := "Open Ovh. Surch. (Purchase)";
          SurchOpenAmountHoursDec := "Open Ovh. Surch. (Hours)";
          OpenAmountInvDec := "Open (Inventory)";
          SurchOpenAmountInvDec := "Open Ovh. Surch. (Inventory)";

          AvailableDec := CalculateAvailable(
            "Budget Amount", AllowedDec, OpenDec, ProductDiscount, TotalCostDec,
            ProjSetup."Calculate Available" = ProjSetup."Calculate Available"::"Budget - Allowed Cost");

          PrognTotCostDec := "Amount incl. Surcharge" + "Total Cost";

          IF "Cost Type" <> "Cost Type"::Labor THEN BEGIN
            EstimPurchResultDec := "Estimated Purchase Result";
          END ELSE BEGIN
            OpenAmountHoursDec := "Open Amount (Hours)";
            BudgHoursDec := "Budget Hours";
            OpenHoursDec := "Open Hours";
            ActualHoursDec := "Actual Hours";
            AllowedHoursDec := "Allowed Hours";
            ResHoursDec := "Result Hours";
            TotalHoursDec := "Total Hours";
            PrognTotHoursDec := "Total Hours" + Quantity;
            EstimPurchResultDec := "Estimated Purchase Result";

            AvailHoursDec := CalculateAvailableHours(
              "Budget Hours", "Allowed Hours", OpenHoursDec, TotalHoursDec,
              ProjSetup."Calculate Available" = ProjSetup."Calculate Available"::"Budget - Allowed Cost");

            ProgHoursDec := AvailHoursDec - Quantity;
          END;
          OriginalBudgetAmt := "Original Budget Amount";
          AdjustmentsBudget := Adjustments;
          ExtensionBudget := Extension;
          OptionsBudget := Options;
          PurchaseBudget := "Purchase Budget";
          PurchaseAmount := "Purchase Amount";
          PurchaseAmountGetOrders := "Purchase Amount (Get Orders)";
          ActualCostsPurchaseAction := "Actual Costs (Purchase Action)";
          ActualCostsNotPurchaseOrderRelated := "Actual Costs (Not P. O. Rel.)";
          PurchaseAmountPurchaseAction := "Purchase (Purchase Action)";
          PurchaseResult := "Purchase Result";
        END ELSE BEGIN
          //Set Filters
          ProjRec.SETRANGE("Period Filter",0D,"Prognosis Date");
          SearchProgrDate.DetermineDate(ProjRec,FALSE);

          IF ProjRec."Prognosis per Element" THEN BEGIN
            //Prognosis per Project-Element-Cost Object
            IF ElemCstObjCntrlRec.GET("Project No.",Element,"Cost Type","Cost Object") THEN BEGIN
              ElemCstObjCntrlRec.RESET;
              ProjRec.COPYFILTER("Progress Filter", ElemCstObjCntrlRec."Progress Filter");
              ElemCstObjCntrlRec.SETRANGE("Prognosis Filter", "Prognosis Date");
              ElemCstObjCntrlRec.SETRANGE("Cumulation Filter",0D,"Prognosis Date");
              ElemCstObjCntrlRec.SETRANGE("Main Project No.","Main Project No.");
              IF (ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project") OR ("Project No." <> "Main Project No.") THEN
                ElemCstObjCntrlRec.SETRANGE("Project Filter","Project No.");
              //>> 190131 ORANGO.SB RFC-226
              //>>IME155
              //ElemCstObjCntrlRec.SETFILTER("Wage Component Type Filter",'<>%1',CstObjCntrlRec."Wage Component Type Filter"::"Expense hours");
              ElemCstObjCntrlRec.SETFILTER("Wage Component Type Filter",'<>%1&<>%2',CstObjCntrlRec."Wage Component Type Filter"::"Expense hours",CstObjCntrlRec."Wage Component Type Filter"::Addition);
              //<<IME155
              //<<
              ElemCstObjCntrlRec.CALCFIELDS(Budget, "Actual Costs", "Open Hours",
                                           "Open Amount (Hours)","Budget Surcharge Amount",
                                           "Original Budget Amount", Adjustments, Extension, Options, "Purchase Budget", Purchase,
                                           "Risc Coverage","Risc Coverage Withdraw");
              PurchaseResult := CostContMgt.PurchResultElemCostObj(ElemCstObjCntrlRec, TRUE);
              BudgetDec := ElemCstObjCntrlRec.Budget;
              RiscCoverage := ElemCstObjCntrlRec."Risc Coverage";
              RiscCoverageWithdraw := ElemCstObjCntrlRec."Risc Coverage Withdraw";
              BudgetSurchargeDec := ElemCstObjCntrlRec."Budget Surcharge Amount";
              OpenAmountHoursDec := ElemCstObjCntrlRec."Open Amount (Hours)";
              ActualDec := ElemCstObjCntrlRec."Actual Costs";
              CostContMgt.AllowedAndPurchElemCostObj(ElemCstObjCntrlRec, AllowedDec,AllowedHoursDec,
                DummyDec,DummyDec,
                DummyDec, EstimPurchResultDec, DummyDec, DummyDec, DummyDec, TRUE);
              ProductDiscount := CostContMgt.ProductDiscountElemCostObj(ElemCstObjCntrlRec,TRUE);
              OpenDec := CostContMgt.OutstandingElemCostObj(ElemCstObjCntrlRec,TRUE);
              RecNotInvDec := CostContMgt.ReceivedNotInvoicedElemCostObj(ElemCstObjCntrlRec,TRUE);
              TotalCostDec := CostContMgt.TotCostElemCostObj(ElemCstObjCntrlRec,TRUE);
              TotalCostDec := TotalCostDec + "Risc Coverage" - ElemCstObjCntrlRec."Risc Coverage (Prognosis)";
              OriginalBudgetAmt := ElemCstObjCntrlRec."Original Budget Amount";
              AdjustmentsBudget := ElemCstObjCntrlRec.Adjustments;
              ExtensionBudget := ElemCstObjCntrlRec.Extension;
              OptionsBudget := ElemCstObjCntrlRec.Options;
              PurchaseBudget := ElemCstObjCntrlRec."Purchase Budget";
              PurchaseAmount := ElemCstObjCntrlRec.Purchase;
              PurchaseAmountGetOrders := ElemCstObjCntrlRec.CalculatePurchaseAmountGetOrders;
              //>> 190131 ORANGO.SB RFC-226
              //>>IME155
              //ElemCstObjCntrlRec.SETFILTER("Wage Component Type Filter",'<>%1',CstObjCntrlRec."Wage Component Type Filter"::"Expense hours");
              ElemCstObjCntrlRec.SETFILTER("Wage Component Type Filter",'<>%1&<>%2',CstObjCntrlRec."Wage Component Type Filter"::"Expense hours",CstObjCntrlRec."Wage Component Type Filter"::Addition);
              //<<IME155
              //<<
              ElemCstObjCntrlRec.CALCFIELDS("Open Ovh. Surch. (Hours)", "Open (Inventory)",
                "Open Ovh. Surch. (Inventory)");
              SurchOpenDec := CostContMgt.OpenOvhPurchElemCostObj(ElemCstObjCntrlRec,TRUE);
              SurchOpenAmountHoursDec := ElemCstObjCntrlRec."Open Ovh. Surch. (Hours)";
              OpenAmountInvDec := ElemCstObjCntrlRec."Open (Inventory)";
              SurchOpenAmountInvDec := ElemCstObjCntrlRec."Open Ovh. Surch. (Inventory)";

              AvailableDec := CalculateAvailable(
                BudgetDec, AllowedDec, OpenDec, ProductDiscount, TotalCostDec,
                ProjSetup."Calculate Available" = ProjSetup."Calculate Available"::"Budget - Allowed Cost");

              PrognTotCostDec := "Amount incl. Surcharge" + TotalCostDec;
              "Prognosis End Result" := AvailableDec - "Amount incl. Surcharge";

              //ElemCstObjCntrlRec.CALCFIELDS("Risc Coverage (Prognosis)");
              //TotCostExclRiscCovDec := TotalCostDec - ElemCstObjCntrlRec."Risc Coverage (Prognosis)";
              TotCostExclRiscCovDec := TotalCostDec - "Risc Coverage";
              IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
                ElemCstObjCntrlRec.CALCFIELDS("Budget Hours", "Actual Hours");
                BudgHoursDec := ElemCstObjCntrlRec."Budget Hours";
                OpenHoursDec := ElemCstObjCntrlRec."Open Hours";
                ActualHoursDec := ElemCstObjCntrlRec."Actual Hours";
                ResHoursDec := CostContMgt.ResultHoursElemCostObj(ElemCstObjCntrlRec,TRUE);
                TotalHoursDec := CostContMgt.TotHoursElemCostObj(ElemCstObjCntrlRec,TRUE);
                PrognTotHoursDec := TotalHoursDec + Quantity;
                AvailHoursDec := CalculateAvailableHours(
                  BudgHoursDec, AllowedHoursDec, OpenHoursDec, TotalHoursDec,
                  ProjSetup."Calculate Available" = ProjSetup."Calculate Available"::"Budget - Allowed Cost");
                ProgHoursDec := AvailHoursDec - Quantity;
              END;
              ElemCstObjCntrlRec.SETFILTER("Purchase Action Filter", '<>%1', '');
              ElemCstObjCntrlRec.CALCFIELDS("Actual Costs", Purchase);
              ActualCostsPurchaseAction := ElemCstObjCntrlRec."Actual Costs";
              PurchaseAmountPurchaseAction := ElemCstObjCntrlRec.Purchase;
              ActualCostsNotPurchaseOrderRelated := GetActualCostsNotPurchaseOrderRelated(lPrognLineRec, TRUE);
            END;
          END ELSE BEGIN
            //Prognosis per Project-Cost Object
            IF CstObjCntrlRec.GET("Project No.","Cost Type","Cost Object") THEN BEGIN
              CstObjCntrlRec.RESET;
              ProjRec.COPYFILTER("Progress Filter",CstObjCntrlRec."Progress Filter");
              CstObjCntrlRec.SETRANGE("Prognosis Filter", "Prognosis Date");
              CstObjCntrlRec.SETRANGE("Cumulation Filter",0D,"Prognosis Date");
              CstObjCntrlRec.SETRANGE("Main Project No.","Main Project No.");
              IF (ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project") OR ("Project No." <> "Main Project No.") THEN
                CstObjCntrlRec.SETRANGE("Project Filter","Project No.");
              //>> 190131 ORANGO.SB RFC-226
              //>>IME155
              //CstObjCntrlRec.SETFILTER("Wage Component Type Filter",'<>%1',CstObjCntrlRec."Wage Component Type Filter"::"Expense hours");
              CstObjCntrlRec.SETFILTER("Wage Component Type Filter",'<>%1&<>%2',CstObjCntrlRec."Wage Component Type Filter"::"Expense hours",CstObjCntrlRec."Wage Component Type Filter"::Addition);
              //<<IME155
              //<<
              CstObjCntrlRec.CALCFIELDS(Budget, "Actual Costs", "Open Hours",
                                        "Open Amount (Hours)", "Budget Surcharge Amount",
                                        "Original Budget Amount", Adjustments, Extension, Options, "Purchase Budget", Purchase,
                                        "Risc Coverage","Risc Coverage Withdraw");
              PurchaseResult := CostContMgt.PurchResultCostObj(CstObjCntrlRec, TRUE);
              BudgetDec := CstObjCntrlRec.Budget;
              RiscCoverage := CstObjCntrlRec."Risc Coverage";
              RiscCoverageWithdraw := CstObjCntrlRec."Risc Coverage Withdraw";
              BudgetSurchargeDec := CstObjCntrlRec."Budget Surcharge Amount" ;
              OpenAmountHoursDec := CstObjCntrlRec."Open Amount (Hours)";
              ActualDec := CstObjCntrlRec."Actual Costs";
              CostContMgt.AllowedAndPurchCostObj(CstObjCntrlRec, AllowedDec,
                AllowedHoursDec,DummyDec,DummyDec,
                DummyDec, EstimPurchResultDec, DummyDec, DummyDec, DummyDec, TRUE);
              ProductDiscount := CostContMgt.ProductDiscountCostObj(CstObjCntrlRec,TRUE);
              OpenDec := CostContMgt.OutstandingCostObj(CstObjCntrlRec,TRUE);
              RecNotInvDec := CostContMgt.ReceivedNotInvoicedCostObj(CstObjCntrlRec,TRUE);
              TotalCostDec := CostContMgt.TotCostCostObj(CstObjCntrlRec,TRUE);
              TotalCostDec := TotalCostDec + "Risc Coverage" - CstObjCntrlRec."Risc Coverage (Prognosis)";
              OriginalBudgetAmt := CstObjCntrlRec."Original Budget Amount";
              AdjustmentsBudget := CstObjCntrlRec.Adjustments;
              ExtensionBudget := CstObjCntrlRec.Extension;
              OptionsBudget := CstObjCntrlRec.Options;
              PurchaseBudget := CstObjCntrlRec."Purchase Budget";
              PurchaseAmount := CstObjCntrlRec.Purchase;
              PurchaseAmountGetOrders := CstObjCntrlRec.CalculatePurchaseAmountGetOrders;

              //>> 190131 ORANGO.SB RFC-226
              //>>IME155
              //CstObjCntrlRec.SETFILTER("Wage Component Type Filter",'<>%1',CstObjCntrlRec."Wage Component Type Filter"::"Expense hours");
              CstObjCntrlRec.SETFILTER("Wage Component Type Filter",'<>%1&<>%2',CstObjCntrlRec."Wage Component Type Filter"::"Expense hours",CstObjCntrlRec."Wage Component Type Filter"::Addition);
              //<<IME155
              //<<
              CstObjCntrlRec.CALCFIELDS("Open Ovh. Surch. (Hours)", "Open (Inventory)",
                "Open Ovh. Surch. (Inventory)");
              SurchOpenDec := CostContMgt.OpenOvhPurchCostObj(CstObjCntrlRec,TRUE);
              SurchOpenAmountHoursDec := CstObjCntrlRec."Open Ovh. Surch. (Hours)";
              OpenAmountInvDec := CstObjCntrlRec."Open (Inventory)";
              SurchOpenAmountInvDec := CstObjCntrlRec."Open Ovh. Surch. (Inventory)";

              AvailableDec := CalculateAvailable(
                BudgetDec, AllowedDec, OpenDec, ProductDiscount, TotalCostDec,
                ProjSetup."Calculate Available" = ProjSetup."Calculate Available"::"Budget - Allowed Cost");

              PrognTotCostDec := "Amount incl. Surcharge" + TotalCostDec;
              "Prognosis End Result" := AvailableDec - "Amount incl. Surcharge";

              TotCostExclRiscCovDec := TotalCostDec - "Risc Coverage";
              IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
                CstObjCntrlRec.CALCFIELDS("Budget Hours", "Actual Hours");
                BudgHoursDec := CstObjCntrlRec."Budget Hours";
                OpenHoursDec := CstObjCntrlRec."Open Hours";
                ActualHoursDec := CstObjCntrlRec."Actual Hours";
                ResHoursDec := CostContMgt.ResultHoursCostObj(CstObjCntrlRec,TRUE);
                TotalHoursDec := CostContMgt.TotHoursCostObj(CstObjCntrlRec,TRUE);
                PrognTotHoursDec := TotalHoursDec + Quantity;
                AvailHoursDec := CalculateAvailableHours(
                  BudgHoursDec, AllowedHoursDec, OpenHoursDec, TotalHoursDec,
                  ProjSetup."Calculate Available" = ProjSetup."Calculate Available"::"Budget - Allowed Cost");
                ProgHoursDec := AvailHoursDec - Quantity;
              END;
              CstObjCntrlRec.SETFILTER("Purchase Action Filter", '<>%1', '');
              CstObjCntrlRec.CALCFIELDS("Actual Costs", Purchase);
              ActualCostsPurchaseAction := CstObjCntrlRec."Actual Costs";
              PurchaseAmountPurchaseAction := CstObjCntrlRec.Purchase;
              ActualCostsNotPurchaseOrderRelated := GetActualCostsNotPurchaseOrderRelated(lPrognLineRec, FALSE);
            END;
          END;
        END;

        IF SaveValues THEN BEGIN
          IF NOT lvProgHeaderRec.GET("Project No.", "Prognosis Date") THEN lvProgHeaderRec.INIT;
          "Fix Prognosis Line" := lvProgHeaderRec."Fix Prognosis Line";

          "Budget Amount" := BudgetDec;
          "Total Risc Coverage Amount" := RiscCoverage;
          "Total Release Risc Coverage" := RiscCoverageWithdraw;
          "Budget Surcharge Amount" := BudgetSurchargeDec;
          "Actual Costs" := ActualDec;
          "Product Discount (Purchase)" := ProductDiscount;
          "Open (Purchase)" := OpenDec;
          "Received/Not Invoiced" := RecNotInvDec;
          "Open Amount (Hours)" := OpenAmountHoursDec;
          "Total Cost" := TotalCostDec;
          "Total Cost (Excl. Risc Cov.)" := TotCostExclRiscCovDec;
          "Allowed Costs" := AllowedDec;

          "Open Ovh. Surch. (Purchase)" := SurchOpenDec;
          "Open Ovh. Surch. (Hours)" := SurchOpenAmountHoursDec;
          "Open (Inventory)" := OpenAmountInvDec;
          "Open Ovh. Surch. (Inventory)" := SurchOpenAmountInvDec;

          "Prognosis Total Cost" := PrognTotCostDec;

          "Budget Hours" := BudgHoursDec;
          "Open Hours" := OpenHoursDec;
          "Actual Hours" := ActualHoursDec;
          "Allowed Hours" := AllowedHoursDec;
          "Result Hours" := ResHoursDec;
          "Total Hours" := TotalHoursDec;
          "Prognosis Total Hours" := PrognTotHoursDec;
          "Prognosis End Result Hours" := ProgHoursDec;
          "Estimated Purchase Result" :=  EstimPurchResultDec;
          "Original Budget Amount" := OriginalBudgetAmt;
          Adjustments := AdjustmentsBudget;
          Extension := ExtensionBudget;
          Options := OptionsBudget;
          "Purchase Budget" := PurchaseBudget;
          "Purchase Amount" := PurchaseAmount;
          "Purchase Amount (Get Orders)" := PurchaseAmountGetOrders;
          "Actual Costs (Purchase Action)" := ActualCostsPurchaseAction;
          "Actual Costs (Not P. O. Rel.)" := ActualCostsNotPurchaseOrderRelated;
          "Purchase (Purchase Action)" := PurchaseAmountPurchaseAction;
          "Purchase Result" := PurchaseResult;
          "Hours Available" := AvailHoursDec;
          "Remaining Budget" := "Budget Amount" - "Purchase Budget";
        END;

        SetPreviousDateFilter;
        CALCFIELDS("Previous Prognosis","Prev Prognosis End Result","Prev Prognosis Total Cost");
      END;
    END;

    PROCEDURE CalculateValuesElements@1100528804(VAR PrognosisPerElement@11012000 : Record 11071893;SaveValues@1210190000 : Boolean);
    VAR
      ProjRec@1100525001 : Record 11072003;
      ElemCstObjCntrlRec@1100525005 : Record 11012048;
      lvProgHeaderRec@1100525000 : Record 11012034;
      SearchProgrDate@1100525004 : Codeunit 11012014;
      CostContMgt@1100525006 : Codeunit 11012006;
      DummyDec@1100525003 : Decimal;
    BEGIN
      WITH PrognosisPerElement DO BEGIN
        SetValuesToZero;

        IF NOT ProjRec.GET("Project No.") THEN
          EXIT;

        IF NOT SaveValues AND "Fix Prognosis Line" THEN BEGIN
          BudgetDec := "Budget Amount";
          BudgetSurchargeDec := "Budget Surcharge Amount";
          ActualDec := "Actual Costs";
          TotalCostDec := "Total Cost";
          TotCostExclRiscCovDec := "Total Cost (Excl. Risc Cov.)";
          AllowedDec := "Allowed Costs";
          RecNotInvDec := "Received/Not Invoiced";
          ProductDiscount := "Product Discount (Purchase)";
          OpenDec := "Open (Purchase)";
          RiscCoverage := "Total Risc Coverage Amount";
          RiscCoverageWithdraw := "Total Release Risc Coverage";
          SurchOpenDec := "Open Ovh. Surch. (Purchase)";
          OpenAmountInvDec := "Open (Inventory)";
          SurchOpenAmountInvDec := "Open Ovh. Surch. (Inventory)";

          AvailableDec := CalculateAvailable(
            "Budget Amount", AllowedDec, OpenDec, ProductDiscount, TotalCostDec,
            ProjSetup."Calculate Available" = ProjSetup."Calculate Available"::"Budget - Allowed Cost");

          PrognTotCostDec := "Amount incl. Surcharge" + "Total Cost";
          EstimPurchResultDec := "Estimated Purchase Result";
        END ELSE BEGIN
          //Set Filters
          ProjRec.SETRANGE("Period Filter",0D,"Prognosis Date");
          SearchProgrDate.DetermineDate(ProjRec,FALSE);

          IF ProjRec."Prognosis Level" =  ProjRec."Prognosis Level"::Element THEN BEGIN
            //Prognosis per Project-Element
            IF ElemCstObjCntrlRec.GET("Project No.",Element) THEN BEGIN
              ElemCstObjCntrlRec.RESET;
              ProjRec.COPYFILTER("Progress Filter", ElemCstObjCntrlRec."Progress Filter");
              ElemCstObjCntrlRec.SETRANGE("Prognosis Filter", "Prognosis Date");
              ElemCstObjCntrlRec.SETRANGE("Cumulation Filter",0D,"Prognosis Date");
              ElemCstObjCntrlRec.SETRANGE("Main Project No.","Main Project No.");
              ElemCstObjCntrlRec.SETRANGE("Element Filter",Element);
              IF (ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project") OR ("Project No." <> "Main Project No.") THEN
                ElemCstObjCntrlRec.SETRANGE("Project Filter","Project No.");
              ElemCstObjCntrlRec.CALCFIELDS(Budget, "Actual Costs",
                                           "Risc Coverage","Risc Coverage Withdraw");
              BudgetDec := ElemCstObjCntrlRec.Budget;
              RiscCoverage := ElemCstObjCntrlRec."Risc Coverage";
              RiscCoverageWithdraw := ElemCstObjCntrlRec."Risc Coverage Withdraw";
              ActualDec := ElemCstObjCntrlRec."Actual Costs";
              CostContMgt.AllowedAndPurchElem(ElemCstObjCntrlRec, AllowedDec,
                DummyDec, DummyDec, DummyDec, TRUE);
              ProductDiscount := CostContMgt.ProductDiscountElem(ElemCstObjCntrlRec,TRUE);
              OpenDec := CostContMgt.OutstandingElem(ElemCstObjCntrlRec,TRUE);
              RecNotInvDec := CostContMgt.ReceivedNotInvoicedElem(ElemCstObjCntrlRec,TRUE);
              TotalCostDec := CostContMgt.TotCostElem(ElemCstObjCntrlRec,TRUE);
              TotalCostDec := TotalCostDec + "Risc Coverage" - ElemCstObjCntrlRec."Risc Coverage (Prognosis)";

              ElemCstObjCntrlRec.CALCFIELDS("Open (Inventory)", "Open Ovh. Surch. (Inventory)");
              SurchOpenDec := CostContMgt.OpenOvhPurchElem(ElemCstObjCntrlRec,TRUE);
              OpenAmountInvDec := ElemCstObjCntrlRec."Open (Inventory)";
              SurchOpenAmountInvDec := ElemCstObjCntrlRec."Open Ovh. Surch. (Inventory)";

              AvailableDec := CalculateAvailable(
                BudgetDec, AllowedDec, OpenDec, ProductDiscount, TotalCostDec,
                ProjSetup."Calculate Available" = ProjSetup."Calculate Available"::"Budget - Allowed Cost");

              PrognTotCostDec := "Amount incl. Surcharge" + TotalCostDec;
              TotCostExclRiscCovDec := TotalCostDec - "Risc Coverage";
            END;
          END;
        END;

        IF SaveValues THEN BEGIN
          IF NOT lvProgHeaderRec.GET("Project No.", "Prognosis Date") THEN lvProgHeaderRec.INIT;
          "Fix Prognosis Line" := lvProgHeaderRec."Fix Prognosis Line";

          "Budget Amount" := BudgetDec;
          "Total Risc Coverage Amount" := RiscCoverage;
          "Total Release Risc Coverage" := RiscCoverageWithdraw;
          "Budget Surcharge Amount" := BudgetSurchargeDec;
          "Actual Costs" := ActualDec;
          "Product Discount (Purchase)" := ProductDiscount;
          "Open (Purchase)" := OpenDec;
          "Received/Not Invoiced" := RecNotInvDec;
          "Total Cost" := TotalCostDec;
          "Total Cost (Excl. Risc Cov.)" := TotCostExclRiscCovDec;
          "Allowed Costs" := AllowedDec;

          "Open Ovh. Surch. (Purchase)" := SurchOpenDec;
          "Open (Inventory)" := OpenAmountInvDec;
          "Open Ovh. Surch. (Inventory)" := SurchOpenAmountInvDec;

          "Prognosis Total Cost" := PrognTotCostDec;
          "Prognosis End Result" := "Budget Amount" - "Prognosis Total Cost";
          "Estimated Purchase Result" :=  EstimPurchResultDec;
        END;

        SetPreviousDateFilter;
        CALCFIELDS("Previous Prognosis","Prev Prognosis End Result","Prev Prognosis Total Cost");
      END;
    END;

    PROCEDURE CopyPrevPrognosis@1210190002(IPrognosisHeader@1100525004 : Record 11012034;CopyPrognosisAmounts@1210190000 : 'No,CopyEndResult,CopyPrognosisTotal';ICostTypes@1100525000 : 'Cost,Revenue,Both');
    VAR
      lPrognLineRec@11012000 : Record 11012035;
      lPrevPrognosisLineRec@11012001 : Record 11012035;
      OrigPrognosisLine@1100525001 : Record 11012035;
      lPrevPrognosisHeader@1100525002 : Record 11012034;
      lPrognDate@1100485001 : Date;
      lPrevDate@1100485002 : Date;
    BEGIN
      ProjSetup.GET;

      lPrevPrognosisHeader.RESET;
      lPrevPrognosisHeader.SETRANGE("Project No.", IPrognosisHeader."Project No.");
      lPrevPrognosisHeader.SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
      IF lPrevPrognosisHeader.FINDFIRST THEN  BEGIN
        lPrevPrognosisHeader.SETFILTER("Prognosis Date", '<%1', IPrognosisHeader."Prognosis Date");
         IF lPrevPrognosisHeader.FINDLAST THEN  BEGIN
           lPrevDate := lPrevPrognosisHeader."Prognosis Date";
         END ELSE BEGIN
           EXIT; // There is no previous prognose
         END;
      END;

      WITH lPrognLineRec DO BEGIN
        FILTERGROUP(4);
        SETRANGE("Project No.", IPrognosisHeader."Project No.");
        SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
        SETRANGE("Cost Type");
        FILTERGROUP(0);
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            IF (ICostTypes = ICostTypes::Both) OR
               ((ICostTypes = ICostTypes::Cost) AND ("Cost Type" <> "Cost Type"::Revenue)) OR
               ((ICostTypes = ICostTypes::Revenue) AND ("Cost Type" = "Cost Type"::Revenue))
            THEN BEGIN
              SetPreviousDateFilter;
              CALCFIELDS("Previous Date");
              IF "Previous Date" = lPrevDate THEN BEGIN
                // only if the same line in the exact previous prognosis is present
                OrigPrognosisLine := lPrognLineRec;
                lPrevPrognosisLineRec := lPrognLineRec;
                lPrevPrognosisLineRec."Prognosis Date" := "Previous Date";
                IF lPrevPrognosisLineRec.FIND('=') THEN BEGIN
                  TRANSFERFIELDS(lPrevPrognosisLineRec,FALSE);
                  "Fix Prognosis Line" := IPrognosisHeader."Fix Prognosis Line";
                  IF CopyCommentsCurrentPrognosis THEN
                    Comment := OrigPrognosisLine.Comment;

                  IF ProjSetup."Prognosis Specifications" THEN BEGIN
                    IF CopyPrognosisAmounts = CopyPrognosisAmounts::No THEN
                      CopyPreviousDetailLines(lPrognLineRec,lPrevPrognosisLineRec)
                    ELSE
                      DeleteDetailLines(lPrognLineRec);
                  END;

                  IF "Cost Type" <> "Cost Type"::Revenue THEN
                    CalculateValues(lPrognLineRec,TRUE)
                  ELSE BEGIN
                    Invoiced := OrigPrognosisLine.Invoiced;
                    "Installment Amount" := OrigPrognosisLine."Installment Amount";
                  END;

                  IF CopyPrognosisAmounts <> CopyPrognosisAmounts::No THEN BEGIN
                    CASE "Cost Type" OF
                      "Cost Type"::Revenue:
                        VALIDATE("Amount Revenue",
                          lPrevPrognosisLineRec."Amount Revenue" + lPrevPrognosisLineRec.Invoiced - Invoiced);
                      ELSE BEGIN
                        IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
                          IF CopyPrognosisAmounts = CopyPrognosisAmounts::CopyEndResult THEN BEGIN
                              VALIDATE(Quantity,
                                lPrevPrognosisLineRec.Quantity +
                                ("Budget Hours" - lPrevPrognosisLineRec."Budget Hours") -
                                ("Total Hours" - lPrevPrognosisLineRec."Total Hours"));
                              ValidateQuantityOfCopy(lPrognLineRec);
                            END;
                        END;
                        IF CopyPrognosisAmounts = CopyPrognosisAmounts::CopyEndResult THEN
                          VALIDATE("Prognosis End Result", lPrevPrognosisLineRec."Prognosis End Result")
                        ELSE
                          VALIDATE("Prognosis Total Cost", lPrevPrognosisLineRec."Prognosis Total Cost");

                        IF (lPrevPrognosisLineRec."Ovh. Surcharge" <> 0) AND
                           (lPrevPrognosisLineRec."Amount incl. Surcharge" <> 0)
                        THEN BEGIN
                          "Ovh. Surcharge" := ROUND(("Amount incl. Surcharge" *
                             (lPrevPrognosisLineRec."Ovh. Surcharge"/lPrevPrognosisLineRec."Amount incl. Surcharge")), 0.01);
                          Amount := "Amount incl. Surcharge" - "Ovh. Surcharge";
                        END ELSE BEGIN
                          IF "Budget Surcharge Amount" > 0 THEN BEGIN
                            "Ovh. Surcharge" := "Budget Surcharge Amount";
                            Amount := "Amount incl. Surcharge" - "Ovh. Surcharge";
                          END;
                        END;

                        VALIDATE("Amount incl. Surcharge"); //Amount incl Surcharge = Amount + Surcharge (Amount is inputfld)
                        ValidateAmountOfCopy(lPrognLineRec);
                      END;
                    END;
                  END;
                  MODIFY(TRUE);
                  UpdateDetailLinesFromPrevious(lPrognLineRec, lPrevPrognosisLineRec);
                END;
              END ELSE BEGIN
                IF CopyPrognosisAmounts <> CopyPrognosisAmounts::No THEN BEGIN
                  CASE "Cost Type" OF
                    "Cost Type"::Revenue:;
                    ELSE BEGIN
                      IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
                        VALIDATE(Quantity, "Budget Hours" - "Total Hours");
                        ValidateQuantityOfCopy(lPrognLineRec);
                      END;
                      VALIDATE("Prognosis End Result", 0);
                      ValidateAmountOfCopy(lPrognLineRec);
                      MODIFY(TRUE);
                    END;
                  END;
                END;
              END;
            END;
          UNTIL NEXT = 0;
          //copy manually added revenues
          IF lPrevDate <> 0D THEN BEGIN
            IF (ICostTypes = ICostTypes::Both) OR (ICostTypes = ICostTypes::Revenue) THEN BEGIN
              lPrognDate := "Prognosis Date";
              lPrevPrognosisLineRec.SETRANGE("Project No.", IPrognosisHeader."Project No.");
              lPrevPrognosisLineRec.SETRANGE("Prognosis Date", lPrevDate);
              lPrevPrognosisLineRec.SETRANGE("Cost Type", lPrevPrognosisLineRec."Cost Type"::Revenue);
              IF lPrevPrognosisLineRec.FINDSET THEN
                REPEAT
                  lPrognLineRec := lPrevPrognosisLineRec;
                  "Prognosis Date" := lPrognDate;
                  IF NOT FIND('=') THEN BEGIN
                    INSERT;
                    IF Amount <> 0 THEN
                      InsertDetailLine(lPrognLineRec);
                  END;
                UNTIL lPrevPrognosisLineRec.NEXT =0;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CopyPrevPrognosisElements@1100528802(IPrognosisHeader@1100525004 : Record 11012034;ICopyEndResult@1210190000 : Boolean;ICostTypes@1100525000 : 'Cost,Revenue,Both');
    VAR
      lPrognLineRec@11012000 : Record 11071893;
      lPrevPrognosisLineRec@11012001 : Record 11071893;
      OrigPrognosisLine@1100525001 : Record 11071893;
      lPrevPrognosisHeader@1100525002 : Record 11012034;
      lPrognDate@1100485001 : Date;
      lPrevDate@1100485002 : Date;
    BEGIN
      ProjSetup.GET;

      lPrevPrognosisHeader.RESET;
      lPrevPrognosisHeader.SETRANGE("Project No.", IPrognosisHeader."Project No.");
      lPrevPrognosisHeader.SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
      IF lPrevPrognosisHeader.FINDFIRST THEN BEGIN
        lPrevPrognosisHeader.SETFILTER("Prognosis Date", '<%1', IPrognosisHeader."Prognosis Date");
        IF lPrevPrognosisHeader.FINDLAST THEN
          lPrevDate := lPrevPrognosisHeader."Prognosis Date"
        ELSE
          EXIT; // There is no previous prognosis
      END;

      WITH lPrognLineRec DO BEGIN
        FILTERGROUP(4);
        SETRANGE("Project No.", IPrognosisHeader."Project No.");
        SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
        FILTERGROUP(0);
        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            SetPreviousDateFilter;
            CALCFIELDS("Previous Date");
            IF "Previous Date" = lPrevDate THEN BEGIN
              IF "Previous Date" <> 0D THEN BEGIN
                OrigPrognosisLine := lPrognLineRec;
                lPrevPrognosisLineRec := lPrognLineRec;
                lPrevPrognosisLineRec."Prognosis Date" := "Previous Date";
                IF lPrevPrognosisLineRec.FIND('=') THEN BEGIN
                  TRANSFERFIELDS(lPrevPrognosisLineRec,FALSE);
                  "Fix Prognosis Line" := IPrognosisHeader."Fix Prognosis Line";

                  IF ICostTypes IN [ICostTypes::Both, ICostTypes::Cost] THEN
                    CalculateValuesElements(lPrognLineRec,TRUE);
                  IF ICostTypes IN [ICostTypes::Both, ICostTypes::Revenue] THEN BEGIN
                    Invoiced := OrigPrognosisLine.Invoiced;
                    "Installment Amount" := OrigPrognosisLine."Installment Amount";
                  END;
                  IF ICopyEndResult THEN BEGIN
                    IF ICostTypes IN [ICostTypes::Both, ICostTypes::Revenue] THEN
                      VALIDATE("Amount Revenue",
                        lPrevPrognosisLineRec."Amount Revenue" + lPrevPrognosisLineRec.Invoiced - Invoiced);
                    VALIDATE("Prognosis End Result", lPrevPrognosisLineRec."Prognosis End Result");
                    VALIDATE("Amount incl. Surcharge"); //Amunt incl Surcharge = Amount + Surcharge (Amount is inputfld)
                    IF (Amount < 0) AND
                       (ProjSetup."Fill Prognosis End Result" =
                        ProjSetup."Fill Prognosis End Result"::"Prognosis may not be Negative" )
                    THEN
                      VALIDATE(Amount, 0);
                  END;
                  MODIFY(TRUE);
                END;
              END;
            END;
          UNTIL NEXT = 0;
          //copy manually added revenues
          IF lPrevDate <> 0D THEN BEGIN
            IF (ICostTypes = ICostTypes::Both) OR (ICostTypes = ICostTypes::Revenue) THEN BEGIN
              lPrognDate := "Prognosis Date";
              lPrevPrognosisLineRec.SETRANGE("Project No.", "Project No.");
              lPrevPrognosisLineRec.SETRANGE("Prognosis Date", lPrevDate);
              IF lPrevPrognosisLineRec.FINDSET THEN
                REPEAT
                  lPrognLineRec := lPrevPrognosisLineRec;
                  "Prognosis Date" := lPrognDate;
                  IF NOT FIND('=') THEN
                    INSERT;

                    IF Amount <> 0 THEN
                      InsertDetailLineElements(lPrognLineRec);

                UNTIL lPrevPrognosisLineRec.NEXT =0;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE FillPrognosisWithAvailable@1(IPrognosisHeader@1100525002 : Record 11012034);
    VAR
      lPrognLineRec@11012000 : Record 11012035;
      PrognosisLineSpec@1100525006 : Record 11020687;
      DimValRec@1100525004 : Record 349;
      JobRec@1100528601 : Record 11072003;
      DimMgt@1100525003 : Codeunit 408;
      BudgetRateManagement@1100528600 : Codeunit 11012358;
      lvRate@1100525001 : Decimal;
      BudgetRateFoundAt@1100528602 : Text[250];
    BEGIN
      ProjSetup.GET;

      WITH lPrognLineRec DO BEGIN
        FILTERGROUP(4);
        SETRANGE("Project No.", IPrognosisHeader."Project No.");
        SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
        SETRANGE("Cost Type");
        FILTERGROUP(0);

        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            CalculateValues(lPrognLineRec,FALSE);
            IF "Amount incl. Surcharge" <> AvailableDec THEN BEGIN
              DimMgt.GetDimValueRec(2, "Cost Object",DimValRec,FALSE,'');
              IF (ProjSetup."Fill Prognosis with Available" = ProjSetup."Fill Prognosis with Available"::Always) OR
                 (("Prognosis End Result" >= 0) AND (ProjSetup."Fill Prognosis with Available" =
                   ProjSetup."Fill Prognosis with Available"::"Only if Prognosis End Result is Positive")) OR
                 (("Prognosis End Result" >= 0) AND NOT DimValRec."Record Progress" AND
                   (ProjSetup."Fill Prognosis with Available" =
                   ProjSetup."Fill Prognosis with Available"::"Only if Prognosis End Result is Positive and Progress is not recorded"))
              THEN BEGIN
                Quantity := AvailHoursDec;
                IF Quantity = 0 THEN
                  Quantity := 1;
                "Amount incl. Surcharge" := AvailableDec;
              END ELSE BEGIN
                Quantity := 0;
                "Amount incl. Surcharge" := 0;
              END;

              //IME272
              IF DimValRec."Used for surcharge" THEN
                "Amount incl. Surcharge" := 0;

              Amount := "Amount incl. Surcharge"; // Do not validate!
              "Ovh. Surcharge" := 0; // Do not validate!

              IF (BudgetSurchargeDec <> 0) AND (BudgetDec <> 0 ) THEN BEGIN
                "Ovh. Surcharge" := ROUND((BudgetSurchargeDec * (AvailableDec/BudgetDec)), 0.01);
                Amount := "Amount incl. Surcharge" - "Ovh. Surcharge";
              END;


              IF ("Amount incl. Surcharge" <> 0) AND ("Cost Type" = "Cost Type"::Labor) THEN BEGIN
                IF "Rate Code" = '' THEN
                  "Rate Code" := DimValRec."Rate Code";
                IF "Rate Code" <> '' THEN BEGIN
                  IF NOT JobRec.GET("Project No.") THEN
                    JobRec.INIT;
                  lvRate := BudgetRateManagement.GetBudgetRate(
                    0, "Project No.", '', '', JobRec."Global Dimension 1 Code", "Rate Code", "Prognosis Date", BudgetRateFoundAt);
                  IF lvRate <> Rate THEN
                    "Rate Code" := '';
                END;
              END;


              VALIDATE("Amount incl. Surcharge");
              MODIFY(TRUE);

              IF ProjSetup."Prognosis Specifications" THEN BEGIN
                PrognosisLineSpec.SETRANGE("Project No.", "Project No.");
                PrognosisLineSpec.SETRANGE("Prognosis Date", "Prognosis Date");
                IF Element = '' THEN
                  PrognosisLineSpec.SETFILTER(Element, '%1', '')
                ELSE
                  PrognosisLineSpec.SETRANGE(Element, Element);
                PrognosisLineSpec.SETRANGE("Cost Type", "Cost Type");
                PrognosisLineSpec.SETRANGE("Cost Object", "Cost Object");
                PrognosisLineSpec.CALCSUMS(Quantity, Amount);

                Amount := Amount - PrognosisLineSpec.Amount;
                Quantity := Quantity - PrognosisLineSpec.Quantity;

                IF (Amount <> 0) OR (Quantity <> 0) THEN
                  InsertDetailLine(lPrognLineRec);
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE FillPrognosisWithAvailableElem@1100528803(IPrognosisHeader@1100525002 : Record 11012034);
    VAR
      lPrognLineRec@11012000 : Record 11071893;
      PrognosisLineSpecification@1100529700 : Record 11020687;
      DimValRec@1100525004 : Record 349;
    BEGIN
      ProjSetup.GET;

      WITH lPrognLineRec DO BEGIN

        FILTERGROUP(4);
        SETRANGE("Project No.", IPrognosisHeader."Project No.");
        SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
        FILTERGROUP(0);

        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            CalculateValuesElements(lPrognLineRec,FALSE);
            IF "Amount incl. Surcharge" <> AvailableDec THEN BEGIN
              IF (ProjSetup."Fill Prognosis with Available" = ProjSetup."Fill Prognosis with Available"::Always) OR
                 (("Prognosis End Result" >= 0) AND (ProjSetup."Fill Prognosis with Available" =
                   ProjSetup."Fill Prognosis with Available"::"Only if Prognosis End Result is Positive")) OR
                 (("Prognosis End Result" >= 0) AND NOT DimValRec."Record Progress" AND
                   (ProjSetup."Fill Prognosis with Available" =
                   ProjSetup."Fill Prognosis with Available"::"Only if Prognosis End Result is Positive and Progress is not recorded"))
              THEN BEGIN
                Quantity := AvailHoursDec;
                IF Quantity = 0 THEN
                  Quantity := 1;
                "Amount incl. Surcharge" := AvailableDec;
              END ELSE BEGIN
                Quantity := 0;
                "Amount incl. Surcharge" := 0;
              END;

              Amount := "Amount incl. Surcharge"; // Do not validate!
              "Ovh. Surcharge" := 0; // Do not validate!

              IF (BudgetSurchargeDec <> 0) AND (BudgetDec <> 0 ) THEN BEGIN
                "Ovh. Surcharge" := ROUND((BudgetSurchargeDec * (AvailableDec/BudgetDec)), 0.01);
                Amount := "Amount incl. Surcharge" - "Ovh. Surcharge";
              END;

              VALIDATE("Amount incl. Surcharge");
              MODIFY(TRUE);

              IF ProjSetup."Prognosis Specifications" THEN BEGIN
                PrognosisLineSpecification.SETRANGE("Project No.", "Project No.");
                PrognosisLineSpecification.SETRANGE("Prognosis Date", "Prognosis Date");
                IF Element = '' THEN
                  PrognosisLineSpecification.SETFILTER(Element, '%1', '')
                ELSE
                  PrognosisLineSpecification.SETRANGE(Element, Element);

                PrognosisLineSpecification.CALCSUMS(Quantity, Amount);

                Amount := Amount - PrognosisLineSpecification.Amount;
                Quantity := Quantity - PrognosisLineSpecification.Quantity;

                IF (Amount <> 0) OR (Quantity <> 0) THEN
                  InsertDetailLineElements(lPrognLineRec);
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE FillPrognosisWithXtraPolCost@1210190500(IPrognosisHeader@1100525000 : Record 11012034);
    VAR
      lPrognLineRec@11012000 : Record 11012035;
      OldAmount@1100525001 : Decimal;
    BEGIN
      WITH lPrognLineRec DO BEGIN
        FILTERGROUP(4);
        SETRANGE("Project No.", IPrognosisHeader."Project No.");
        SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
        SETRANGE("Cost Type");
        FILTERGROUP(0);

        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            OldAmount := Amount;
            CalculateValues(lPrognLineRec,FALSE);
            Quantity := 0;
            "Amount incl. Surcharge" := 0;
            IF "Cost Type" = "Cost Type"::Labor THEN BEGIN
              IF (AllowedHoursDec <> 0) THEN BEGIN
                Quantity := ActualHoursDec * ((BudgHoursDec / AllowedHoursDec) - 1);
                IF (ActualHoursDec <> 0) THEN
                  "Amount incl. Surcharge" := Quantity * (TotalCostDec / ActualHoursDec);
              END;
            END ELSE BEGIN
              IF (AllowedDec <> 0) THEN BEGIN
                Quantity := 1;
                "Amount incl. Surcharge" := TotalCostDec * ((BudgetDec / AllowedDec) - 1);
              END;
            END;
            Amount := "Amount incl. Surcharge"; // Do not validate!
            "Ovh. Surcharge" := 0; // Do not validate!
            VALIDATE("Amount incl. Surcharge");
            MODIFY(TRUE);

            Amount := Amount - OldAmount;
            IF Amount <> 0 THEN
              InsertDetailLine(lPrognLineRec);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE FillPrognRevenues@1100525003(IPrognosisHeader@1100525020 : Record 11012034);
    VAR
      ProjInstallmRec@1100525000 : Record 11012018;
      PrognLine@1100525001 : Record 11012035;
      PrognLine2@1100525014 : Record 11012035;
      ProjRec@1100525002 : Record 11072003;
      ProjPrincRec@1100525007 : Record 11012005;
      ExtensionRec@1100525004 : Record 11012004;
      UnitPriceProdRec@1100525010 : Record 11020425;
      UnitPriceProdLine@1100525011 : Record 11020426;
      SubProjRec@1100525015 : Record 11072003;
      JobLedgEntry@1100525018 : Record 11072005;
      SalesLine@1100525023 : Record 37;
      ProjCostPlusEntry@1100525022 : Record 11012019;
      PrognMgt@1100525019 : Codeunit 11020217;
      TotInstalmAmount@1100525008 : Decimal;
      RemainingContractAmount@1100525009 : Decimal;
      CostPlusAmountToInvoice@1100525006 : Decimal;
      ProdUnitPriceAmount@1100525012 : Decimal;
      ProdUnitPriceContractAmount@1100525017 : Decimal;
      PrognosisAmount@1100525013 : Decimal;
      InstallmentIsValid@1100525003 : Boolean;
      UnitPriceExists@1100525005 : Boolean;
      HandleCostPlusUnitPriAsContr@1100525016 : Boolean;
      CountUnitPrice@1100525021 : Boolean;
    BEGIN
      ProjRec.GET(IPrognosisHeader."Project No.");
      ProjRec.SETRANGE("No.", IPrognosisHeader."Project No.");

      //Reset Amount Revenues
      PrognLine.SETRANGE("Project No.", IPrognosisHeader."Project No.");
      PrognLine.SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
      PrognLine.SETRANGE("Cost Type", PrognLine."Cost Type"::Revenue);
      PrognLine.MODIFYALL("Amount Revenue",0,TRUE);
      COMMIT; //Necessary cause error report might popup in calccostplus report.

      SubProjRec.SETCURRENTKEY("Main Project");
      SubProjRec.SETRANGE("Main Project", ProjRec."Main Project");
      IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
        SubProjRec.SETRANGE("No.", IPrognosisHeader."Project No.");
      //>>IME403
      IF NOT includeFinishedJobs THEN
        SubProjRec.SETRANGE("Project Status",0,SubProjRec."Project Status"::"Administrative Finished");
      //<<IME403
      IF SubProjRec.FINDSET THEN
        REPEAT

          //Add Installment Prognosis Lines
          ProjInstallmRec.RESET;
          ProjInstallmRec.SETRANGE("Project No.", SubProjRec."No.");
          ProjInstallmRec.SETFILTER("Cost Object", '<>%1', '');
          ProjInstallmRec.SETRANGE("Advance Payment", FALSE);
          IF NOT IPrognosisHeader."Include Plot Price in Revenues" THEN
            ProjInstallmRec.SETFILTER("Installment No.", '<>%1', '0');
          IF ProjInstallmRec.FINDSET THEN
            REPEAT
              ProjInstallmRec.CALCFIELDS("Invoiced Price (LCY)");
              InstallmentIsValid := TRUE;
              IF ProjInstallmRec."Extension Contract" <> '' THEN
                InstallmentIsValid :=
                  (ExtensionRec.GET(ProjInstallmRec."Project No.", ProjInstallmRec."Extension Contract")) AND
                  (ExtensionRec.Status <> ExtensionRec.Status::Expired);
              PrognosisAmount := ProjInstallmRec."Installment Amount (LCY)" - InvoicedAmountInstallments(IPrognosisHeader,ProjInstallmRec);

              IF InstallmentIsValid AND (PrognosisAmount <> 0) THEN BEGIN
                IF ProjRec."Prognosis per Element" THEN
                  PrognLine.Element := ProjInstallmRec.Element
                ELSE
                  PrognLine.Element := '';

                PrognLine.GET(
                  IPrognosisHeader."Project No.",IPrognosisHeader."Prognosis Date",
                  PrognLine."Cost Type"::Revenue, PrognLine.Element, ProjInstallmRec."Cost Object");

                PrognLine."Amount Revenue" := PrognLine."Amount Revenue" + PrognosisAmount;
                PrognLine."Prognosis Total Revenues" := PrognLine."Amount Revenue" + PrognLine.Invoiced;
                PrognLine."Prognosis End Result Revenues" := PrognLine."Prognosis Total Revenues" - PrognLine."Installment Amount";
                PrognLine."Diff W Prev Prog End Res Rev" := PrognLine."Prognosis End Result Revenues" - PrognLine.GetPrevProgEndResultRev;
                PrognLine.MODIFY;
              END;
              TotInstalmAmount := TotInstalmAmount + ProjInstallmRec."Installment Amount (LCY)";
            UNTIL ProjInstallmRec.NEXT = 0;

          //Cost Plus / Production Unit Prices
          UnitPriceExists := FALSE;
          IF FPSLicenseManagement.LicenseAndReadPermissionForTable(UnitPriceProdRec) THEN BEGIN
            UnitPriceProdRec.RESET;
            UnitPriceProdRec.SETRANGE("Project No.", SubProjRec."No.");
            UnitPriceExists := NOT UnitPriceProdRec.ISEMPTY;
          END;
          HandleCostPlusUnitPriAsContr :=
            UnitPriceExists AND
            (SubProjRec."Settlement Method" = SubProjRec."Settlement Method"::"Fixed Price");

          IF HandleCostPlusUnitPriAsContr THEN BEGIN
            JobLedgEntry.RESET;
            JobLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Entry Type");
            JobLedgEntry.SETRANGE("Main Project No.", SubProjRec."Main Project");
            JobLedgEntry.SETRANGE("Job No.", SubProjRec."No.");
            JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
            JobLedgEntry.SETRANGE("Project Invoice", TRUE);
            JobLedgEntry.SETRANGE("Installment Invoice", FALSE);
            JobLedgEntry.SETRANGE("Posting Date", 0D, IPrognosisHeader."Prognosis Date");
            JobLedgEntry.SETRANGE("Advance Payment", FALSE);
            IF JobLedgEntry.FINDSET THEN
              REPEAT
                ProdUnitPriceContractAmount := ProdUnitPriceContractAmount - JobLedgEntry."Total Price (LCY)";
              UNTIL JobLedgEntry.NEXT = 0;
          END ELSE BEGIN
            IF UnitPriceExists THEN BEGIN
              UnitPriceProdRec.RESET;
              UnitPriceProdRec.SETRANGE("Project No.", SubProjRec."No.");
              UnitPriceProdRec.SETRANGE(Status, UnitPriceProdRec.Status::Offered, UnitPriceProdRec.Status::Approved);
              UnitPriceProdRec.SETFILTER("Production Date", '..%1', IPrognosisHeader."Prognosis Date");
              IF UnitPriceProdRec.FINDSET THEN
                REPEAT
                  IF UnitPriceProdRec.Invoiced THEN BEGIN
                    SalesLine.SETCURRENTKEY("Document Type","Job No.");
                    SalesLine.SETRANGE(
                      "Document Type",SalesLine."Document Type"::Invoice,SalesLine."Document Type"::"Credit Memo");
                    SalesLine.SETRANGE("Job No.", SubProjRec."No.");
                    SalesLine.SETRANGE("Production Motivation Date", UnitPriceProdRec."Production Date");
                    SalesLine.SETRANGE("Production Motivation Code", UnitPriceProdRec.Code);
                    CountUnitPrice := NOT SalesLine.ISEMPTY;
                  END ELSE
                    CountUnitPrice := TRUE;
                  IF CountUnitPrice THEN BEGIN
                    UnitPriceProdLine.SETRANGE("Project No.", UnitPriceProdRec."Project No.");
                    UnitPriceProdLine.SETRANGE("Production Date", UnitPriceProdRec."Production Date");
                    UnitPriceProdLine.SETRANGE(Code, UnitPriceProdRec.Code);
                    IF UnitPriceProdLine.FINDSET THEN
                      REPEAT
                        ProdUnitPriceAmount := ProdUnitPriceAmount + UnitPriceProdLine."Production Value";
                      UNTIL UnitPriceProdLine.NEXT = 0;
                  END;
                UNTIL UnitPriceProdRec.NEXT = 0;
            END ELSE
              CostPlusAmountToInvoice := CostPlusAmountToInvoice + PrognMgt.CostPlustAmountToInvoice(SubProjRec);

            //Cost Plus Manually added
            ProjCostPlusEntry.SETRANGE("Project No.", IPrognosisHeader."Project No.");
            ProjCostPlusEntry.SETRANGE("Entry No. Project Ledger", 0);
            IF ProjCostPlusEntry.FINDSET THEN
              REPEAT
                IF ProjCostPlusEntry.Invoiced THEN BEGIN
                  ProjCostPlusEntry.CALCFIELDS("Invoice in Process", "Credit Memo in Process");
                  CostPlusAmountToInvoice :=
                    CostPlusAmountToInvoice +
                    ProjCostPlusEntry."Invoice in Process" +
                    ProjCostPlusEntry."Credit Memo in Process";
                END ELSE
                  CostPlusAmountToInvoice :=
                    CostPlusAmountToInvoice + ProjCostPlusEntry."Sales Amount (LCY)";
              UNTIL ProjCostPlusEntry.NEXT = 0;

          END;
        UNTIL SubProjRec.NEXT = 0;

      //Calculate Difference Contract Amount and Project Installments
      RemainingContractAmount :=
        (IPrognosisHeader."Contract Amount Project" + IPrognosisHeader."Contract Amount Extensions" +
         IPrognosisHeader."Contract Amount Options") -
        TotInstalmAmount - ProdUnitPriceContractAmount;
      IF IPrognosisHeader."Include Plot Price in Revenues" THEN
        RemainingContractAmount += IPrognosisHeader."Plot Price Project";

      //Add Prognosis Line
      PrognosisAmount := CostPlusAmountToInvoice + RemainingContractAmount + ProdUnitPriceAmount;
      IF PrognosisAmount <> 0 THEN BEGIN
        IF ProjRec."Prognosis per Element" THEN
          PrognLine.Element := ProjInstallmRec.Element
        ELSE
          PrognLine.Element := '';
        IF ProjPrincRec.GET(IPrognosisHeader."Project No.", ProjRec."Bill-to Customer No.") THEN
          PrognLine."Cost Object" := ProjPrincRec."Cost Object"
        ELSE
          PrognLine."Cost Object" := '';
        IF PrognLine.GET(
          IPrognosisHeader."Project No.",IPrognosisHeader."Prognosis Date",
          PrognLine."Cost Type"::Revenue, PrognLine.Element, PrognLine."Cost Object") THEN
        BEGIN
          PrognLine."Amount Revenue" := PrognLine."Amount Revenue" + PrognosisAmount;
          PrognLine.MODIFY;
        END ELSE BEGIN
          PrognLine2.INIT;
          PrognLine2."Project No." := IPrognosisHeader."Project No.";
          PrognLine2."Prognosis Date" := IPrognosisHeader."Prognosis Date";
          PrognLine2."Cost Type" := PrognLine."Cost Type"::Revenue;
          PrognLine2.Element := PrognLine.Element;
          PrognLine2."Cost Object" := PrognLine."Cost Object";
          PrognLine2."Amount Revenue" := PrognosisAmount;
          PrognLine2.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE FillPrognRevenuesElements@1100529604(PrognosisHeader@1100525020 : Record 11012034);
    VAR
      ProjectInstallment@1100525000 : Record 11012018;
      PrognosisPerElement@1100525001 : Record 11071893;
      PrognosisPerElement2@1100525014 : Record 11071893;
      Project@1100525002 : Record 11072003;
      SubProject@1100529600 : Record 11072003;
      ExtensionContract@1100525004 : Record 11012004;
      UnitPriceProduction@1100525010 : Record 11020425;
      UnitPriceProductionLine@1100525011 : Record 11020426;
      JobLedgEntry@1100525018 : Record 11072005;
      SalesLine@1100525023 : Record 37;
      ProjCostPlusEntry@1100525022 : Record 11012019;
      PrognosisMgt@1100525019 : Codeunit 11020217;
      TotInstalmAmount@1100525008 : Decimal;
      RemainingContractAmount@1100525009 : Decimal;
      CostPlusAmountToInvoice@1100525006 : Decimal;
      ProdUnitPriceAmount@1100525012 : Decimal;
      ProdUnitPriceContractAmount@1100525017 : Decimal;
      PrognosisAmount@1100525013 : Decimal;
      InstallmentIsValid@1100525003 : Boolean;
      UnitPriceExists@1100525005 : Boolean;
      HandleCostPlusUnitPriAsContr@1100525016 : Boolean;
      CountUnitPrice@1100525021 : Boolean;
    BEGIN
      Project.GET(PrognosisHeader."Project No.");
      Project.SETRANGE("No.", PrognosisHeader."Project No.");

      //Reset Amount Revenues
      PrognosisPerElement.SETRANGE("Project No.", PrognosisHeader."Project No.");
      PrognosisPerElement.SETRANGE("Prognosis Date", PrognosisHeader."Prognosis Date");
      PrognosisPerElement.MODIFYALL("Amount Revenue", 0, TRUE);
      COMMIT;

      SubProject.SETCURRENTKEY("Main Project");
      SubProject.SETRANGE("Main Project", Project."Main Project");
      IF Project."Single/Main/Sub Project" <> Project."Single/Main/Sub Project"::"Main Project" THEN
        SubProject.SETRANGE("No.", PrognosisHeader."Project No.");
      IF SubProject.FINDSET THEN
        REPEAT
          //Add Installment Prognosis Lines
          ProjectInstallment.RESET;
          ProjectInstallment.SETRANGE("Project No.", SubProject."No.");
          ProjectInstallment.SETFILTER("Cost Object", '<>%1', '');
          ProjectInstallment.SETRANGE("Advance Payment", FALSE);
          IF NOT PrognosisHeader."Include Plot Price in Revenues" THEN
            ProjectInstallment.SETFILTER("Installment No.", '<>%1', '0');
          IF ProjectInstallment.FINDSET THEN
            REPEAT
              ProjectInstallment.CALCFIELDS("Invoiced Price (LCY)");
              InstallmentIsValid := TRUE;
              IF ProjectInstallment."Extension Contract" <> '' THEN
                InstallmentIsValid :=
                  (ExtensionContract.GET(ProjectInstallment."Project No.", ProjectInstallment."Extension Contract")) AND
                  (ExtensionContract.Status <> ExtensionContract.Status::Expired);
              PrognosisAmount := ProjectInstallment."Installment Amount (LCY)" - InvoicedAmountInstallments(PrognosisHeader, ProjectInstallment);

              IF InstallmentIsValid AND (PrognosisAmount <> 0) THEN BEGIN
                PrognosisPerElement.GET(
                  PrognosisHeader."Project No.", PrognosisHeader."Prognosis Date", ProjectInstallment.Element);
                PrognosisPerElement."Amount Revenue" := PrognosisPerElement."Amount Revenue" + PrognosisAmount;
                PrognosisPerElement."Prognosis Total Revenues" := PrognosisPerElement."Amount Revenue" + PrognosisPerElement.Invoiced;
                PrognosisPerElement."Prognosis End Result Revenues" := PrognosisPerElement."Prognosis Total Revenues" - PrognosisPerElement."Installment Amount";
                PrognosisPerElement."Diff W Prev Prog End Res Rev" := PrognosisPerElement."Prognosis End Result Revenues" - PrognosisPerElement.GetPreviousPrognosisEndResultRevenue;
                PrognosisPerElement.MODIFY;
              END;
              TotInstalmAmount := TotInstalmAmount + ProjectInstallment."Installment Amount (LCY)";
            UNTIL ProjectInstallment.NEXT = 0;

          //Cost Plus / Production Unit Prices
          UnitPriceExists := FALSE;
          IF FPSLicenseManagement.LicenseAndReadPermissionForTable(UnitPriceProduction) THEN BEGIN
            UnitPriceProduction.RESET;
            UnitPriceProduction.SETRANGE("Project No.", SubProject."No.");
            UnitPriceExists := NOT UnitPriceProduction.ISEMPTY;
          END;
          HandleCostPlusUnitPriAsContr :=
            UnitPriceExists AND
            (SubProject."Settlement Method" = SubProject."Settlement Method"::"Fixed Price");

          IF HandleCostPlusUnitPriAsContr THEN BEGIN
            JobLedgEntry.RESET;
            JobLedgEntry.SETCURRENTKEY("Main Project No.", "Job No.", "Entry Type");
            JobLedgEntry.SETRANGE("Main Project No.", SubProject."Main Project");
            JobLedgEntry.SETRANGE("Job No.", SubProject."No.");
            JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
            JobLedgEntry.SETRANGE("Project Invoice", TRUE);
            JobLedgEntry.SETRANGE("Installment Invoice", FALSE);
            JobLedgEntry.SETRANGE("Posting Date", 0D, PrognosisHeader."Prognosis Date");
            JobLedgEntry.SETRANGE("Advance Payment", FALSE);
            IF JobLedgEntry.FINDSET THEN
              REPEAT
                ProdUnitPriceContractAmount := ProdUnitPriceContractAmount - JobLedgEntry."Total Price (LCY)";
              UNTIL JobLedgEntry.NEXT = 0;
          END ELSE BEGIN
            IF UnitPriceExists THEN BEGIN
              UnitPriceProduction.RESET;
              UnitPriceProduction.SETRANGE("Project No.", SubProject."No.");
              UnitPriceProduction.SETRANGE(Status, UnitPriceProduction.Status::Offered, UnitPriceProduction.Status::Approved);
              UnitPriceProduction.SETFILTER("Production Date", '..%1', PrognosisHeader."Prognosis Date");
              IF UnitPriceProduction.FINDSET THEN
                REPEAT
                  IF UnitPriceProduction.Invoiced THEN BEGIN
                    SalesLine.SETCURRENTKEY("Document Type", "Job No.");
                    SalesLine.SETRANGE(
                      "Document Type", SalesLine."Document Type"::Invoice, SalesLine."Document Type"::"Credit Memo");
                    SalesLine.SETRANGE("Job No.", SubProject."No.");
                    SalesLine.SETRANGE("Production Motivation Date", UnitPriceProduction."Production Date");
                    SalesLine.SETRANGE("Production Motivation Code", UnitPriceProduction.Code);
                    CountUnitPrice := NOT SalesLine.ISEMPTY;
                  END ELSE
                    CountUnitPrice := TRUE;
                  IF CountUnitPrice THEN BEGIN
                    UnitPriceProductionLine.SETRANGE("Project No.", UnitPriceProduction."Project No.");
                    UnitPriceProductionLine.SETRANGE("Production Date", UnitPriceProduction."Production Date");
                    UnitPriceProductionLine.SETRANGE(Code, UnitPriceProduction.Code);
                    IF UnitPriceProductionLine.FINDSET THEN
                      REPEAT
                        ProdUnitPriceAmount := ProdUnitPriceAmount + UnitPriceProductionLine."Production Value";
                      UNTIL UnitPriceProductionLine.NEXT = 0;
                  END;
                UNTIL UnitPriceProduction.NEXT = 0;
            END ELSE
              CostPlusAmountToInvoice := CostPlusAmountToInvoice + PrognosisMgt.CostPlustAmountToInvoice(SubProject);

            //Cost Plus Manually added
            ProjCostPlusEntry.SETRANGE("Project No.", PrognosisHeader."Project No.");
            ProjCostPlusEntry.SETRANGE("Entry No. Project Ledger", 0);
            IF ProjCostPlusEntry.FINDSET THEN
              REPEAT
                IF ProjCostPlusEntry.Invoiced THEN BEGIN
                  ProjCostPlusEntry.CALCFIELDS("Invoice in Process", "Credit Memo in Process");
                  CostPlusAmountToInvoice :=
                    CostPlusAmountToInvoice +
                    ProjCostPlusEntry."Invoice in Process" +
                    ProjCostPlusEntry."Credit Memo in Process";
                END ELSE
                  CostPlusAmountToInvoice :=
                    CostPlusAmountToInvoice + ProjCostPlusEntry."Sales Amount (LCY)";
              UNTIL ProjCostPlusEntry.NEXT = 0;

          END;
        UNTIL SubProject.NEXT = 0;

      //Calculate Difference Contract Amount and Project Installments
      RemainingContractAmount :=
        (PrognosisHeader."Contract Amount Project" + PrognosisHeader."Contract Amount Extensions" +
         PrognosisHeader."Contract Amount Options") -
        TotInstalmAmount - ProdUnitPriceContractAmount;
      IF PrognosisHeader."Include Plot Price in Revenues" THEN
        RemainingContractAmount += PrognosisHeader."Plot Price Project";
      //Add Prognosis Line
      PrognosisAmount := CostPlusAmountToInvoice + RemainingContractAmount + ProdUnitPriceAmount;
      IF PrognosisAmount <> 0 THEN BEGIN
        IF PrognosisPerElement.GET(
          PrognosisHeader."Project No.",PrognosisHeader."Prognosis Date", ProjectInstallment.Element) THEN
        BEGIN
          PrognosisPerElement."Amount Revenue" += PrognosisAmount;
          PrognosisPerElement.MODIFY;
        END ELSE BEGIN
          PrognosisPerElement2.INIT;
          PrognosisPerElement2."Project No." := PrognosisHeader."Project No.";
          PrognosisPerElement2."Prognosis Date" := PrognosisHeader."Prognosis Date";
          PrognosisPerElement2.Element := PrognosisPerElement.Element;
          PrognosisPerElement2."Amount Revenue" := PrognosisAmount;
          PrognosisPerElement2.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE RemoveSurcharges@1100525004(IPrognosisHeader@1100525002 : Record 11012034);
    VAR
      lPrognLineRec@1100525000 : Record 11012035;
      lvPrognosisRec@1100525001 : Record 11012034;
    BEGIN
      WITH lPrognLineRec DO BEGIN

        FILTERGROUP(4);
        SETRANGE("Project No.", IPrognosisHeader."Project No.");
        SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
        SETRANGE("Cost Type");
        FILTERGROUP(0);

        IF FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
            "Ovh. Surcharge" := 0;
            VALIDATE("Amount incl. Surcharge", Amount); //Amunt incl Surcharge = Amount + Surcharge (Amount is inputfld)
            MODIFY(TRUE);
          UNTIL NEXT = 0;
        END;
      END;

      lvPrognosisRec.INIT;
      lvPrognosisRec.SETRANGE("Project No.", IPrognosisHeader."Project No.");
      lvPrognosisRec.SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
      IF lvPrognosisRec.FINDFIRST THEN BEGIN
        IF lvPrognosisRec."Ovh. Surcharges Calculated" THEN BEGIN
          lvPrognosisRec."Ovh. Surcharges Calculated" := FALSE;
          lvPrognosisRec."Altered After Calculation" := FALSE;
          lvPrognosisRec.MODIFY;
        END;
      END;
    END;

    PROCEDURE CalculateSurcharges@1100525007(IPrognosisHeader@1100525002 : Record 11012034);
    VAR
      lPrognLineRec@1100525000 : Record 11012035;
      lvPrognosisRec@1100525001 : Record 11012034;
    BEGIN
      ProjSetup.GET;

      WITH lPrognLineRec DO BEGIN

        FILTERGROUP(4);
        SETRANGE("Project No.", IPrognosisHeader."Project No.");
        SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
        SETRANGE("Cost Type");
        FILTERGROUP(0);

        IF NOT ProjSetup."Prognosis Ovh Surcharge Labor" THEN
          SETFILTER("Cost Type", '<>%1', "Cost Type"::Labor);

        IF FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            CalcSurcharge(lPrognLineRec);
          UNTIL NEXT = 0;
        END;
      END;

      lvPrognosisRec.INIT;
      lvPrognosisRec.SETRANGE("Project No.", IPrognosisHeader."Project No.");
      lvPrognosisRec.SETRANGE("Prognosis Date", IPrognosisHeader."Prognosis Date");
      IF lvPrognosisRec.FINDFIRST THEN BEGIN
        lvPrognosisRec."Ovh. Surcharges Calculated" := TRUE;
        lvPrognosisRec."Altered After Calculation" := FALSE;
        lvPrognosisRec.MODIFY;
      END;
    END;

    PROCEDURE CalcSurcharge@1210190009(lPrognLineRec@1100525000 : Record 11012035);
    VAR
      ProjRec@1100525009 : Record 11072003;
      ProjectTypeRec@1100485001 : Record 11012009;
      SurchargeRec@1100525003 : Record 11020208;
      SurchDimValRec@1100525004 : Record 349;
      lPrognLineRec2@1100525005 : Record 11012035;
      lPrognLineRec3@1100525007 : Record 11012035;
      lProjectElementRec@1100525008 : Record 11012010;
      DimValRec@1100525011 : Record 349;
      DimMgt@1100525010 : Codeunit 408;
      lvType@1100525001 : Code[20];
      lvOrigin@1100525002 : 'Project,Service';
      lvTotSurchAmount@1100525006 : Decimal;
      ElementCode@1100527550 : Code[20];
    BEGIN
      WITH lPrognLineRec DO BEGIN
        ProjRec.GET("Project No.");
        lvType := ProjRec."Project Type";
        ProjectTypeRec.GET(ProjRec."Project Type");

        DimMgt.GetDimValueRec(2, "Cost Object",DimValRec,FALSE,'');
        IF SurchargeRec.GetSurcharges(lvOrigin::Project, lvType, "Project No.",
                                            (DimValRec."Cost Type" <> DimValRec."Cost Type"::Revenue),
                                            DimValRec."Cost Type", DimValRec.Code, '',
                                            ProjRec."Global Dimension 1 Code", '',
                                            "Cost Component", "Prognosis Date",
                                            SurchargeRec) THEN
        BEGIN
          REPEAT

            SurchargeRec.GetSurchargeDimVal(DimValRec, SurchDimValRec);
            lPrognLineRec2 := lPrognLineRec;
            lPrognLineRec2."Ovh. Surcharge" := 0;

            InitSurcharge(lPrognLineRec2, DimValRec, SurchDimValRec,
                          SurchargeRec, '', lvType, lvTotSurchAmount, '');

            IF SurchargeRec."Element Surcharge" = '' THEN
              ElementCode := lPrognLineRec2.Element
            ELSE
              IF lPrognLineRec2.Element <> '' THEN
                ElementCode := SurchargeRec."Element Surcharge";

            lPrognLineRec3.INIT;
            lPrognLineRec3.RESET;
            IF lPrognLineRec3.GET(lPrognLineRec2."Project No.",
                                  lPrognLineRec2."Prognosis Date",
                                  lPrognLineRec2."Cost Type",
                                  ElementCode,
                                  lPrognLineRec2."Cost Object") THEN
            BEGIN
              lPrognLineRec3."Ovh. Surcharge" := lPrognLineRec3."Ovh. Surcharge" + lPrognLineRec2."Ovh. Surcharge";
              lPrognLineRec3.VALIDATE(Amount);
              lPrognLineRec3.MODIFY;
            END ELSE BEGIN
              IF lPrognLineRec2.Element <> '' THEN BEGIN
                IF NOT lProjectElementRec.GET(lPrognLineRec2."Project No.", lPrognLineRec2.Element) THEN
                  ERROR(STRSUBSTNO(Text001, lPrognLineRec2."Project No.", lPrognLineRec2.Element));
              END;
              lPrognLineRec3."Project No." := lPrognLineRec2."Project No.";
              lPrognLineRec3."Prognosis Date" := lPrognLineRec2."Prognosis Date";
              lPrognLineRec3."Cost Type" := lPrognLineRec2."Cost Type";
              lPrognLineRec3.Element := ElementCode;
              lPrognLineRec3."Cost Object" := lPrognLineRec2."Cost Object";
              lPrognLineRec3."Ovh. Surcharge" := lPrognLineRec2."Ovh. Surcharge";
              lPrognLineRec3.VALIDATE(Amount);
              lPrognLineRec3.INSERT(TRUE);
            END;
          UNTIL SurchargeRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE InitSurcharge@1100525008(VAR lProgLineRec@1210190002 : Record 11012035;OrigDimRec@1210190001 : Record 349;SurchDimRec@1210190009 : Record 349;SurchargeRec@1210190004 : Record 11020208;Dim1@1210190005 : Code[20];ProjType@1210190006 : Code[20];VAR vTotSurchAmount@1100485002 : Decimal;VendorPostingGroup@1100525000 : Code[20]);
    VAR
      PrognosisLineAmount@1100528400 : Decimal;
      Job@1100528500 : Record 11072003;
    BEGIN
      WITH lProgLineRec DO BEGIN

        IF lProgLineRec."Cost Type" = lProgLineRec."Cost Type"::Revenue THEN
          PrognosisLineAmount := "Amount Revenue"
        ELSE
          PrognosisLineAmount := Amount;
        IF SurchargeRec.Percentage <> 0 THEN
          IF SurchargeRec."Surcharge over Surcharge" THEN
            "Ovh. Surcharge" := ROUND((PrognosisLineAmount + vTotSurchAmount) * SurchargeRec.Percentage/100)
          ELSE
            "Ovh. Surcharge" := ROUND(PrognosisLineAmount * SurchargeRec.Percentage/100)
        ELSE
          "Ovh. Surcharge" := ROUND(SurchargeRec.Amount * Quantity);

        "Unit of Measure" := SurchDimRec."Unit of Measure";
        "Cost Object" := SurchDimRec.Code;
        "Cost Type" := SurchDimRec."Cost Type";

        IF (SurchargeRec."Element Surcharge" <> '') AND Job.GET(lProgLineRec."Project No.") THEN
          IF Job."Prognosis Level" = Job."Prognosis Level"::Detailed THEN
            IF Job."Prognosis per Element" THEN
              lProgLineRec.Element := SurchargeRec."Element Surcharge"
            ELSE
              lProgLineRec.Element := '';

        vTotSurchAmount := vTotSurchAmount + "Ovh. Surcharge";

      END;
    END;

    PROCEDURE CreatePrognosis@1100528800(VAR Prognosis@1210190001 : Record 11012034;ICostTypes@1100525000 : 'Cost,Revenue,Both');
    VAR
      PrevPrognosisRec@1100525001 : Record 11012034;
      SubProjRec@1100525002 : Record 11072003;
      ProjRec@1100528801 : Record 11072003;
      CostControlRec@1100528806 : Record 11012050;
      ProgLineRec@1100528805 : Record 11012035;
      DimValRec@1100528804 : Record 349;
      ProjPrincRec@1100528810 : Record 11012005;
      ProjInstallmRec@1100528809 : Record 11012018;
      CostControlProjElemRec@1100528808 : Record 11012048;
      JobLedgEntry@1100528807 : Record 11072005;
      PrognMgt@1100525007 : Codeunit 11020217;
      CreateCostObjContrElem@1100528802 : Codeunit 11012032;
      DimMgt@1100528803 : Codeunit 408;
      BudgetRateManagement@1100528600 : Codeunit 11012358;
      ElementCode@1210190000 : Code[20];
      lvRate@1100525004 : Decimal;
      BudgetRateFound@1100528601 : Text[250];
      lJobProjectStatus@1100285101 : Record 11072003;
      lJobProjectStatusOK@1100285100 : Boolean;
      LineCounter@1100525003 : Integer;
      NoOfLines@1100525005 : Integer;
    BEGIN
      WITH Prognosis DO BEGIN
        ProjSetup.GET;
        ProjRec.GET("Project No.");

        //Build Cost Control
        ProjRec.BuildCostControl;
        CreateCostObjContrElem.RUN(ProjRec);
        COMMIT; //Necessary cause error report might popup in calccostplus report.
        //

        IF GUIALLOWED THEN
          Window.OPEN(Text002 + Text003);

        //Prognosis Header
        IF ICostTypes = ICostTypes::Both THEN
          IF "Expected Finishing Date" = 0D THEN BEGIN
            PrevPrognosisRec := Prognosis;
            PrevPrognosisRec.SETRANGE("Project No.", "Project No.");
            IF PrevPrognosisRec.NEXT(-1) <> 0 THEN
              "Expected Finishing Date" := PrevPrognosisRec."Expected Finishing Date";
          END;
        IF ICostTypes <> ICostTypes::Cost THEN
          PrognMgt.PrognRevenues(ProjRec, Prognosis);
        IF ICostTypes <> ICostTypes::Revenue THEN
          PrognMgt.RoughPrognTotCost(ProjRec, Prognosis);
        MODIFY;

        IF "Prognosis Level" = "Prognosis Level"::Detailed THEN BEGIN
          //Prognosis Cost Lines
          IF ICostTypes <> ICostTypes::Revenue THEN BEGIN
            CostControlRec.SETRANGE("Project No.","Project No.");

            IF GUIALLOWED THEN BEGIN
              LineCounter := 0;
              NoOfLines := CostControlRec.COUNT;
            END;

            IF CostControlRec.FINDSET(FALSE, FALSE) THEN
              REPEAT

                IF GUIALLOWED THEN BEGIN
                  LineCounter += 1;
                  Window.UPDATE(1,ROUND(LineCounter/NoOfLines*10000,1));
                END;

                IF ProjRec."Prognosis per Element" THEN
                  ElementCode := CostControlRec.Element
                ELSE
                  ElementCode := '';
                IF NOT ProgLineRec.GET(
                  CostControlRec."Project No.", "Prognosis Date", CostControlRec."Cost Type",
                  ElementCode, CostControlRec."Cost Object") THEN
                BEGIN
                  ProgLineRec.INIT;
                  ProgLineRec."Project No." := "Project No.";
                  ProgLineRec."Prognosis Date" := "Prognosis Date";
                  ProgLineRec.VALIDATE(Element, ElementCode);
                  ProgLineRec."Cost Type" := CostControlRec."Cost Type";
                  ProgLineRec."Cost Object" := CostControlRec."Cost Object";
                  DimMgt.GetDimValueRec(2, CostControlRec."Cost Object",DimValRec,FALSE,'');
                  ProgLineRec."Unit Cost Object" := DimValRec."Unit of Measure";
                  ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
                  ProgLineRec."Rate Code" := DimValRec."Rate Code"; //19153 No validation
                  ProgLineRec.INSERT(TRUE);
                END;

                ProgLineRec."Fix Prognosis Line" := "Fix Prognosis Line";
                CalculateValues(ProgLineRec,TRUE);
                ProgLineRec."Cost Component" := CostControlRec."Cost Component";

                IF ProgLineRec."Cost Type" = ProgLineRec."Cost Type"::Labor THEN BEGIN
                  lvRate := BudgetRateManagement.GetBudgetRate(
                    0, ProgLineRec."Project No.", '', '', ProjRec."Global Dimension 1 Code", ProgLineRec."Rate Code",
                    ProgLineRec."Prognosis Date", BudgetRateFound);
                  ProgLineRec.Rate := lvRate;

                  IF (ProgLineRec."Total Hours" <> 0) AND (ProgLineRec."Total Cost" <> 0) THEN BEGIN
                     lvRate := ROUND(ProgLineRec."Total Cost"/ ProgLineRec."Total Hours", 0.01);
                  END ELSE BEGIN
                     IF (ProgLineRec."Budget Amount" <> 0) AND (ProgLineRec."Budget Hours" <> 0) THEN
                       lvRate := ROUND(ProgLineRec."Budget Amount"/ ProgLineRec."Budget Hours", 0.01);
                  END;
                  IF NOT ProjSetup."Use Rate Code in Progn. Line" THEN BEGIN
                    IF ProgLineRec.Rate <> lvRate THEN BEGIN
                      ProgLineRec.Rate := lvRate;
                      ProgLineRec."Rate Code" := '';
                    END;
                  END;
                END;

                ProgLineRec.MODIFY(TRUE);
              UNTIL CostControlRec.NEXT = 0;
          END;

          //Prognosis Revenue Lines
          IF ICostTypes <> ICostTypes::Cost THEN BEGIN
            ProjPrincRec.RESET;
            ProjPrincRec.SETCURRENTKEY("Main Project No.");
            ProjPrincRec.SETRANGE("Main Project No.", ProjRec."Main Project");
            IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
              ProjPrincRec.SETRANGE("Project No.", "Project No.");
            ProjPrincRec.SETFILTER("Cost Object", '<>%1', '');
            IF ProjPrincRec.FINDSET THEN
              REPEAT
                ProgLineRec.INIT;
                ProgLineRec."Project No." := "Project No.";
                ProgLineRec."Prognosis Date" := "Prognosis Date";
                ProgLineRec."Cost Type" := ProgLineRec."Cost Type"::Revenue;
                ProgLineRec."Cost Object" := ProjPrincRec."Cost Object";
                DimMgt.GetDimValueRec(2, ProjPrincRec."Cost Object",DimValRec,FALSE,'');
                ProgLineRec."Unit Cost Object" := DimValRec."Unit of Measure";
                ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
                IF NOT ProjRec."Prognosis per Element" THEN BEGIN
                  IF ProgLineRec.INSERT(TRUE) THEN;
                END ELSE BEGIN
                  CostControlProjElemRec.SETRANGE("Project No.", "Project No.");
                  IF CostControlProjElemRec.FINDSET THEN
                    REPEAT
                      ProgLineRec.VALIDATE(Element, CostControlProjElemRec.Element);
                   UNTIL CostControlProjElemRec.NEXT = 0;
                END;
              UNTIL ProjPrincRec.NEXT = 0;

            SubProjRec.SETCURRENTKEY("Main Project");
            SubProjRec.SETRANGE("Main Project", ProjRec."Main Project");
            IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
              SubProjRec.SETRANGE("No.", "Project No.");
      //>>IME403
          IF NOT includeFinishedJobs THEN
            SubProjRec.SETRANGE("Project Status",0,SubProjRec."Project Status"::"Administrative Finished");
      //<<IME403
            IF SubProjRec.FINDSET THEN
              REPEAT
                ProjInstallmRec.RESET;
                ProjInstallmRec.SETRANGE("Project No.", SubProjRec."No.");
                ProjInstallmRec.SETFILTER("Cost Object", '<>%1', '');
                ProjInstallmRec.SETRANGE("Advance Payment", FALSE);
                IF NOT Prognosis."Include Plot Price in Revenues" THEN
                  ProjInstallmRec.SETFILTER("Installment No.", '<>%1', '0');
                IF ProjInstallmRec.FINDSET THEN
                  REPEAT
                    ProgLineRec.INIT;
                    ProgLineRec."Project No." := "Project No.";
                    ProgLineRec."Prognosis Date" := "Prognosis Date";
                    IF ProjRec."Prognosis per Element" THEN
                      ProgLineRec.VALIDATE(Element, ProjInstallmRec.Element)
                    ELSE
                      ProgLineRec.Element := '';
                    ProgLineRec."Cost Type" := ProgLineRec."Cost Type"::Revenue;
                    ProgLineRec."Cost Object" := ProjInstallmRec."Cost Object";
                    DimMgt.GetDimValueRec(2, ProjInstallmRec."Cost Object",DimValRec,FALSE,'');
                    ProgLineRec."Unit Cost Object" := DimValRec."Unit of Measure";
                    ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
                    IF ProgLineRec.INSERT(TRUE) THEN;
                  UNTIL ProjInstallmRec.NEXT = 0;
              UNTIL SubProjRec.NEXT = 0;

            JobLedgEntry.RESET;
            JobLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Cost Type","Global Dimension 2 Code","Entry Type","Posting Date");
            JobLedgEntry.SETRANGE("Main Project No.", ProjRec."Main Project");
            IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
              JobLedgEntry.SETRANGE("Job No.", "Project No.");
            JobLedgEntry.SETRANGE("Cost Type", JobLedgEntry."Cost Type"::Revenues);
            JobLedgEntry.SETFILTER("Global Dimension 2 Code", '<>%1', '');
            JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
            JobLedgEntry.SETRANGE("Posting Date", 0D, "Prognosis Date");
            JobLedgEntry.SETRANGE("Advance Payment", FALSE);
            IF JobLedgEntry.FINDSET THEN BEGIN
              REPEAT
      //>>IME403
              lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, JobLedgEntry."Job No.");
              IF lJobProjectStatusOK THEN BEGIN
      //<<IME403
                IF ProjRec."Prognosis per Element" THEN
                  ElementCode := JobLedgEntry.Element
                ELSE
                  ElementCode := '';
                IF ProgLineRec.GET(
                  "Project No.", "Prognosis Date", ProgLineRec."Cost Type"::Revenue,
                  ElementCode, JobLedgEntry."Global Dimension 2 Code")
                THEN BEGIN
                  IF NOT ProjRec."Prognosis per Element" THEN BEGIN
                    JobLedgEntry.SETRANGE("Global Dimension 2 Code", JobLedgEntry."Global Dimension 2 Code");
                    JobLedgEntry.FINDLAST;
                    JobLedgEntry.SETFILTER("Global Dimension 2 Code", '<>%1', '');  // Restore filter
                  END;
                END ELSE BEGIN
                  ProgLineRec.INIT;
                  ProgLineRec."Project No." := "Project No.";
                  ProgLineRec."Prognosis Date" := "Prognosis Date";
                  IF ProjRec."Prognosis per Element" THEN
                    ProgLineRec.VALIDATE(Element, ElementCode)
                  ELSE
                    ProgLineRec.Element := '';
                  ProgLineRec."Cost Type" := ProgLineRec."Cost Type"::Revenue;
                  ProgLineRec."Cost Object" := JobLedgEntry."Global Dimension 2 Code";
                  DimMgt.GetDimValueRec(2, ProgLineRec."Cost Object",DimValRec,FALSE,'');
                  ProgLineRec."Unit Cost Object" := DimValRec."Unit of Measure";
                  ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
                  IF "Include Plot Price in Revenues" OR
                     (JobLedgEntry."Installment No." <> '0') OR
                     NOT JobLedgEntry."Project Invoice" OR
                     NOT JobLedgEntry."Installment Invoice"
                  THEN
                    ProgLineRec.INSERT(TRUE);
                END;
              END;
              UNTIL JobLedgEntry.NEXT = 0;
            END;

            //Revenues Invoiced
            ProgLineRec.RESET;
            ProgLineRec.SETRANGE("Project No.", "Project No.");
            ProgLineRec.SETRANGE("Prognosis Date", "Prognosis Date");
            ProgLineRec.SETRANGE("Cost Type", ProgLineRec."Cost Type"::Revenue);
            IF ProgLineRec.FINDSET(TRUE, FALSE) THEN
              REPEAT
                JobLedgEntry.RESET;
                JobLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Entry Type",Element);
                JobLedgEntry.SETRANGE("Main Project No.", ProjRec."Main Project");
                IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
                  JobLedgEntry.SETRANGE("Job No.", "Project No.");
                JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
                IF ProjRec."Prognosis per Element" THEN
                  JobLedgEntry.SETRANGE(Element, ProgLineRec.Element);
                JobLedgEntry.SETRANGE("Global Dimension 2 Code", ProgLineRec."Cost Object");
                JobLedgEntry.SETRANGE("Posting Date", 0D, "Prognosis Date");
                JobLedgEntry.SETRANGE("Advance Payment", FALSE);
                ProgLineRec.Invoiced := 0;
                IF JobLedgEntry.FINDSET THEN
                  REPEAT
                    IF "Include Plot Price in Revenues" OR
                       (JobLedgEntry."Installment No." <> '0') OR
                       NOT JobLedgEntry."Project Invoice" OR
                       NOT JobLedgEntry."Installment Invoice"
        //>>IME403
                       OR JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, JobLedgEntry."Job No.")
                       OR includeFinishedJobs
        //<<IME403
                    THEN
                      ProgLineRec.Invoiced -= JobLedgEntry."Total Price (LCY)";
                  UNTIL JobLedgEntry.NEXT = 0;

                SubProjRec.RESET;
                SubProjRec.SETCURRENTKEY("Main Project");
                SubProjRec.SETRANGE("Main Project", ProjRec."Main Project");
                IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
                  SubProjRec.SETRANGE("No.", "Project No.");
                ProgLineRec."Installment Amount" := 0;
                IF SubProjRec.FINDSET THEN
                  REPEAT
                    ProjInstallmRec.RESET;
                    ProjInstallmRec.SETRANGE("Project No.", SubProjRec."No.");
                    ProjInstallmRec.SETRANGE("Cost Object", ProgLineRec."Cost Object");
                    ProjInstallmRec.SETRANGE(Element, ProgLineRec.Element);
                    IF NOT "Include Plot Price in Revenues" THEN
                      ProjInstallmRec.SETFILTER("Installment No.", '<>%1', '0');
                    ProjInstallmRec.CALCSUMS("Installment Amount (LCY)");
                    ProgLineRec."Installment Amount" += ProjInstallmRec."Installment Amount (LCY)";
                  UNTIL SubProjRec.NEXT = 0;
                ProgLineRec.VALIDATE("Amount Revenue");
                ProgLineRec.MODIFY;
              UNTIL ProgLineRec.NEXT = 0;
          END;

        END;
      END;

      CheckPrognosisSpecification(Prognosis."Project No.", Prognosis."Prognosis Date");

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE CreatePrognosisElements@1100528801(VAR Prognosis@1210190001 : Record 11012034;ICostTypes@1100525000 : 'Cost,Revenue,Both');
    VAR
      PrevPrognosisRec@1100525001 : Record 11012034;
      SubProjRec@1100525002 : Record 11072003;
      ProjRec@1100528801 : Record 11072003;
      CostControlRec@1100528806 : Record 11012050;
      ProgLineRec@1100528805 : Record 11071893;
      DimValRec@1100528804 : Record 349;
      ProjPrincRec@1100528810 : Record 11012005;
      ProjInstallmRec@1100528809 : Record 11012018;
      CostControlProjElemRec@1100528808 : Record 11012048;
      JobLedgEntry@1100528807 : Record 11072005;
      CreateCostObjContrElem@1100528802 : Codeunit 11012032;
      DimMgt@1100528803 : Codeunit 408;
      PrognosisMgt@1100529600 : Codeunit 11020217;
      ElementCode@1210190000 : Code[20];
      LineCounter@1100528501 : Integer;
      NoOfLines@1100528500 : Integer;
    BEGIN
      WITH Prognosis DO BEGIN
        ProjSetup.GET;
        ProjRec.GET("Project No.");

        //Build Cost Control
        ProjRec.BuildCostControl;
        CreateCostObjContrElem.RUN(ProjRec);
        COMMIT; //Necessary cause error report might popup in calccostplus report.

        IF ICostTypes = ICostTypes::Both THEN
          IF "Expected Finishing Date" = 0D THEN BEGIN
            PrevPrognosisRec := Prognosis;
            PrevPrognosisRec.SETRANGE("Project No.", "Project No.");
            IF PrevPrognosisRec.NEXT(-1) <> 0 THEN
              "Expected Finishing Date" := PrevPrognosisRec."Expected Finishing Date";
          END;
        IF ICostTypes <> ICostTypes::Cost THEN
          PrognosisMgt.PrognRevenues(ProjRec, Prognosis);
        MODIFY;

        IF GUIALLOWED THEN
          Window.OPEN(Text002 + Text003);

        //Prognosis Cost Lines
        IF ICostTypes <> ICostTypes::Revenue THEN BEGIN
          CostControlRec.SETRANGE("Project No.","Project No.");

          IF GUIALLOWED THEN BEGIN
            LineCounter := 0;
            NoOfLines := CostControlRec.COUNT;
          END;

          IF CostControlRec.FINDSET(FALSE, FALSE) THEN
            REPEAT
              IF GUIALLOWED THEN BEGIN
                LineCounter += 1;
                Window.UPDATE(1,ROUND(LineCounter/NoOfLines*10000,1));
              END;

              ElementCode := CostControlRec.Element;
              IF NOT ProgLineRec.GET(
                CostControlRec."Project No.", "Prognosis Date", ElementCode) THEN
              BEGIN
                ProgLineRec.INIT;
                ProgLineRec."Project No." := "Project No.";
                ProgLineRec."Prognosis Date" := "Prognosis Date";
                ProgLineRec.VALIDATE(Element, ElementCode);
                ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
                ProgLineRec.INSERT(TRUE);
              END;

              ProgLineRec."Fix Prognosis Line" := "Fix Prognosis Line";
              CalculateValuesElements(ProgLineRec,TRUE);

              ProgLineRec.MODIFY(TRUE);
            UNTIL CostControlRec.NEXT = 0;
        END;

        //Prognosis Revenue Lines
        IF ICostTypes <> ICostTypes::Cost THEN BEGIN
          ProjPrincRec.RESET;
          ProjPrincRec.SETCURRENTKEY("Main Project No.");
          ProjPrincRec.SETRANGE("Main Project No.", ProjRec."Main Project");
          IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
            ProjPrincRec.SETRANGE("Project No.", "Project No.");
          ProjPrincRec.SETFILTER("Cost Object", '<>%1', '');
          IF ProjPrincRec.FINDSET THEN
            REPEAT
              ProgLineRec.INIT;
              ProgLineRec."Project No." := "Project No.";
              ProgLineRec."Prognosis Date" := "Prognosis Date";
              DimMgt.GetDimValueRec(2, ProjPrincRec."Cost Object",DimValRec,FALSE,'');
              ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
              CostControlProjElemRec.SETRANGE("Project No.", "Project No.");
              IF CostControlProjElemRec.FINDSET THEN
                REPEAT
                  ProgLineRec.VALIDATE(Element, CostControlProjElemRec.Element);
               UNTIL CostControlProjElemRec.NEXT = 0;
            UNTIL ProjPrincRec.NEXT = 0;

          SubProjRec.SETCURRENTKEY("Main Project");
          SubProjRec.SETRANGE("Main Project", ProjRec."Main Project");
          IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
            SubProjRec.SETRANGE("No.", "Project No.");
          IF SubProjRec.FINDSET THEN
            REPEAT
              ProjInstallmRec.RESET;
              ProjInstallmRec.SETRANGE("Project No.", SubProjRec."No.");
              ProjInstallmRec.SETFILTER("Cost Object", '<>%1', '');
              ProjInstallmRec.SETRANGE("Advance Payment", FALSE);
              IF NOT Prognosis."Include Plot Price in Revenues" THEN
                ProjInstallmRec.SETFILTER("Installment No.", '<>%1', '0');
              IF ProjInstallmRec.FINDSET THEN
                REPEAT
                  ProgLineRec.INIT;
                  ProgLineRec."Project No." := "Project No.";
                  ProgLineRec."Prognosis Date" := "Prognosis Date";
                  ProgLineRec.VALIDATE(Element, ProjInstallmRec.Element);
                  DimMgt.GetDimValueRec(2, ProjInstallmRec."Cost Object",DimValRec,FALSE,'');
                  ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
                  IF ProgLineRec.INSERT(TRUE) THEN;
                UNTIL ProjInstallmRec.NEXT = 0;
            UNTIL SubProjRec.NEXT = 0;

          //*C000527.sn
          JobLedgEntry.RESET;
          JobLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Cost Type","Global Dimension 2 Code","Entry Type","Posting Date");
          JobLedgEntry.SETRANGE("Main Project No.", ProjRec."Main Project");
          IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
            JobLedgEntry.SETRANGE("Job No.", "Project No.");
          JobLedgEntry.SETRANGE("Cost Type", JobLedgEntry."Cost Type"::Revenues);
          JobLedgEntry.SETFILTER("Global Dimension 2 Code", '<>%1', '');
          JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
          JobLedgEntry.SETRANGE("Posting Date", 0D, "Prognosis Date");
          JobLedgEntry.SETRANGE("Advance Payment", FALSE);
          IF JobLedgEntry.FINDSET THEN BEGIN
            REPEAT
              ElementCode := JobLedgEntry.Element;
              IF NOT ProgLineRec.GET("Project No.", "Prognosis Date", ElementCode) THEN
              BEGIN
                ProgLineRec.INIT;
                ProgLineRec."Project No." := "Project No.";
                ProgLineRec."Prognosis Date" := "Prognosis Date";
                ProgLineRec.VALIDATE(Element, ElementCode);
                ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
                IF "Include Plot Price in Revenues" OR
                   (JobLedgEntry."Installment No." <> '0') OR
                   NOT JobLedgEntry."Project Invoice" OR
                   NOT JobLedgEntry."Installment Invoice"
                THEN
                  ProgLineRec.INSERT(TRUE);
              END;
            UNTIL JobLedgEntry.NEXT = 0;
          END;
          //*C000527.en

          //Revenues Invoiced
          ProgLineRec.RESET;
          ProgLineRec.SETRANGE("Project No.", "Project No.");
          ProgLineRec.SETRANGE("Prognosis Date", "Prognosis Date");
          IF ProgLineRec.FINDSET(TRUE, FALSE) THEN
            REPEAT
              JobLedgEntry.RESET;
              JobLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Entry Type",Element);
              JobLedgEntry.SETRANGE("Main Project No.", ProjRec."Main Project");
              IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
                JobLedgEntry.SETRANGE("Job No.", "Project No.");
              JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
              JobLedgEntry.SETRANGE(Element, ProgLineRec.Element);
              JobLedgEntry.SETRANGE("Advance Payment", FALSE);
              JobLedgEntry.SETRANGE("Posting Date", 0D, "Prognosis Date");
              ProgLineRec.Invoiced := 0;
              IF JobLedgEntry.FINDSET THEN
                REPEAT
                  IF "Include Plot Price in Revenues" OR
                     (JobLedgEntry."Installment No." <> '0') OR
                     NOT JobLedgEntry."Project Invoice" OR
                     NOT JobLedgEntry."Installment Invoice"
                  THEN
                    ProgLineRec.Invoiced -= JobLedgEntry."Total Price (LCY)";
                UNTIL JobLedgEntry.NEXT = 0;

              SubProjRec.RESET;
              SubProjRec.SETCURRENTKEY("Main Project");
              SubProjRec.SETRANGE("Main Project", ProjRec."Main Project");
              IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
                SubProjRec.SETRANGE("No.", "Project No.");
              ProgLineRec."Installment Amount" := 0;
              IF SubProjRec.FINDSET THEN
                REPEAT
                  ProjInstallmRec.RESET;
                  ProjInstallmRec.SETRANGE("Project No.", SubProjRec."No.");
                  ProjInstallmRec.SETRANGE(Element, ProgLineRec.Element);
                  IF NOT "Include Plot Price in Revenues" THEN
                   ProjInstallmRec.SETFILTER("Installment No.", '<>%1', '0');
                                  ProjInstallmRec.CALCSUMS("Installment Amount (LCY)");
                  ProgLineRec."Installment Amount" += ProjInstallmRec."Installment Amount (LCY)";
                UNTIL SubProjRec.NEXT = 0;
              ProgLineRec.MODIFY;
            UNTIL ProgLineRec.NEXT = 0;
        END;
      END;

      CheckPrognosisSpecificationElements(Prognosis."Project No.", Prognosis."Prognosis Date");

      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    LOCAL PROCEDURE CheckPrognosisSpecification@11136550(iProject@11136551 : Code[20];iPrognosisDate@11136554 : Date);
    VAR
      PrognosisLine@11136552 : Record 11012035;
      LineCounter@1100525001 : Integer;
      NoOfLines@1100525000 : Integer;
    BEGIN
      IF NOT ProjSetup."Prognosis Specifications" THEN
        EXIT;

      PrognosisLine.SETRANGE("Project No.", iProject);
      PrognosisLine.SETRANGE("Prognosis Date", iPrognosisDate);

      IF GUIALLOWED THEN BEGIN
        LineCounter := 0;
        NoOfLines := PrognosisLine.COUNT;
      END;

      IF PrognosisLine.FINDSET THEN
        REPEAT
          IF GUIALLOWED THEN BEGIN
            LineCounter += 1;
            Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
          END;
          CheckPrognosisSpecificationbyBudget(iProject, iPrognosisDate, PrognosisLine.Element, PrognosisLine."Cost Type", PrognosisLine."Cost Object")
        UNTIL PrognosisLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckPrognosisSpecificationElements@1100529705(iProject@11136551 : Code[20];iPrognosisDate@11136554 : Date);
    VAR
      PrognosisperElement@1100529700 : Record 11071893;
      LineCounter@1100528501 : Integer;
      NoOfLines@1100528500 : Integer;
    BEGIN
      IF NOT ProjSetup."Prognosis Specifications" THEN
        EXIT;

      PrognosisperElement.SETRANGE("Project No.", iProject);
      PrognosisperElement.SETRANGE("Prognosis Date", iPrognosisDate);

      IF GUIALLOWED THEN BEGIN
        LineCounter := 0;
        NoOfLines := PrognosisperElement.COUNT;
      END;

      IF PrognosisperElement.FINDSET THEN
        REPEAT
          IF GUIALLOWED THEN BEGIN
            LineCounter += 1;
            Window.UPDATE(2,ROUND(LineCounter/NoOfLines*10000,1));
          END;
          CheckPrognosisSpecificationbyBudget(iProject, iPrognosisDate, PrognosisperElement.Element, 0, '')
        UNTIL PrognosisperElement.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckPrognosisSpecificationbyBudget@1100529703(iProject@11136551 : Code[20];iPrognosisDate@11136554 : Date;iElement@1100529700 : Code[20];iCostType@1100529702 : Integer;iCostObject@1100529701 : Code[20]);
    VAR
      Job@11136553 : Record 11072003;
      Prognosis@1100529703 : Record 11012034;
      BudgetLine@11136550 : Record 11012001;
      PrognosisLineSpecification@11136556 : Record 11020687;
    BEGIN
      Job.GET(iProject);
      Prognosis.GET(iProject, iPrognosisDate);

      BudgetLine.SETCURRENTKEY("Project No.", Element, "Cost Type", "Cost Object");
      BudgetLine.SETRANGE("Project No.", iProject);
      IF Job."Prognosis per Element" THEN
        BudgetLine.SETRANGE(Element, iElement);
      IF (Prognosis."Prognosis Level" <> Prognosis."Prognosis Level"::Element) THEN BEGIN
        BudgetLine.SETRANGE("Cost Type", iCostType);
        BudgetLine.SETRANGE("Cost Object", iCostObject);
      END;
      BudgetLine.SETFILTER("Extension Contract Status", '%1|%2|%3',
        BudgetLine."Extension Contract Status"::"Not Applicable",
        BudgetLine."Extension Contract Status"::Order,
        BudgetLine."Extension Contract Status"::"Invoicing Allowed");
      IF BudgetLine.FINDSET THEN BEGIN
        REPEAT
          IF ISNULLGUID(BudgetLine."Reference No.") THEN BEGIN
            BudgetLine."Reference No." := CREATEGUID;
            BudgetLine.MODIFY;
          END;

          PrognosisLineSpecification.SETRANGE("Reference No.", BudgetLine."Reference No.");
          PrognosisLineSpecification.SETRANGE("Project No.", iProject);
          PrognosisLineSpecification.SETRANGE("Prognosis Date", iPrognosisDate);
          IF PrognosisLineSpecification.ISEMPTY THEN BEGIN
            CreatePrognosisSpecification(
              iProject,
              iPrognosisDate,
              iElement,
              BudgetLine."Cost Type",
              BudgetLine."Cost Object",
              BudgetLine."Reference No.",
              BudgetLine.Description,
              BudgetLine."Extension Contract",
              BudgetLine."Cost Component",
              BudgetLine."Amount (LCY)");
          END;
        UNTIL BudgetLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreatePrognosisSpecification@11136551(iProject@11136555 : Code[20];iPrognosisDate@11136554 : Date;iElement@11136553 : Code[20];iCostType@11136552 : Integer;iCostObject@11136551 : Code[20];iReference@11136556 : GUID;iDescription@11136558 : Text[100];iExtensionContract@11136559 : Code[10];iCostComponent@11136560 : Code[20];iBudgetAmount@1210190000 : Decimal);
    VAR
      PrognosisLineSpec@11136550 : Record 11020687;
    BEGIN
      IF NOT ProjSetup."Prognosis Specifications" THEN
        EXIT;
      PrognosisLineSpec.VALIDATE("Project No.", iProject);
      PrognosisLineSpec.VALIDATE("Prognosis Date", iPrognosisDate);
      //Validation depends on flowfield: bad impact on performance



      PrognosisLineSpec."Cost Type" := iCostType;
      PrognosisLineSpec.Element := iElement;
      PrognosisLineSpec."Cost Object" := iCostObject;
      PrognosisLineSpec.VALIDATE("Reference No.", iReference);
      PrognosisLineSpec.VALIDATE(Description, iDescription);
      PrognosisLineSpec.VALIDATE("Extension Contract", iExtensionContract);
      PrognosisLineSpec.VALIDATE("Cost Component", iCostComponent);
      PrognosisLineSpec.INSERT(TRUE);
      PrognosisLineSpec."Budget Amount" := iBudgetAmount;
      PrognosisLineSpec.MODIFY;
    END;

    LOCAL PROCEDURE UpdateDetailLinesFromPrevious@11136554(PrognosisLine@11136550 : Record 11012035;PreviousPrognosisLine@11136551 : Record 11012035);
    VAR
      PrognosisLineSpec@11136552 : Record 11020687;
      PrognosisLineSpec2@11136554 : Record 11020687;
      PreviousPrognosisLineSpec@11136553 : Record 11020687;
      RemainingAmount@11136555 : Decimal;
      RemainingQuantity@11136556 : Decimal;
      NullGUID@1210190000 : GUID;
    BEGIN
      IF NOT ProjSetup."Prognosis Specifications" THEN
        EXIT;
      //PreviousPrognosisLineSpec.SETCURRENTKEY("Reference No.");  // Do not use key on field with DataType (performance)
      PreviousPrognosisLineSpec.SETRANGE("Project No.", PreviousPrognosisLine."Project No.");
      PreviousPrognosisLineSpec.SETRANGE("Prognosis Date", PreviousPrognosisLine."Prognosis Date");

      //PrognosisLineSpec.SETCURRENTKEY("Reference No.");  // Do not use key on field with DataType (performance)
      PrognosisLineSpec.SETRANGE("Project No.", PrognosisLine."Project No.");
      PrognosisLineSpec.SETRANGE("Prognosis Date", PrognosisLine."Prognosis Date");
      IF PrognosisLine.Element = '' THEN
        PrognosisLineSpec.SETFILTER(Element, '%1', '')
      ELSE
        PrognosisLineSpec.SETRANGE(Element, PrognosisLine.Element);
      PrognosisLineSpec.SETRANGE("Cost Type", PrognosisLine."Cost Type");
      PrognosisLineSpec.SETRANGE("Cost Object", PrognosisLine."Cost Object");
      PrognosisLineSpec.SETFILTER("Reference No.", '<>%1', NullGUID);
      IF PrognosisLineSpec.FINDSET THEN BEGIN
        REPEAT
          PreviousPrognosisLineSpec.SETRANGE("Reference No.", PrognosisLineSpec."Reference No.");
          IF PreviousPrognosisLineSpec.FINDFIRST THEN BEGIN
            PrognosisLineSpec2 := PrognosisLineSpec;
            PrognosisLineSpec2.Amount := PreviousPrognosisLineSpec.Amount;
            PrognosisLineSpec2.Quantity := PreviousPrognosisLineSpec.Quantity;
            PrognosisLineSpec2.UpdatePrice;
            PrognosisLineSpec2.MODIFY;
          END;
        UNTIL PrognosisLineSpec.NEXT = 0;
      END;

      // Find totals for all detail lines
      PrognosisLineSpec.SETRANGE("Reference No.");
      PrognosisLineSpec.CALCSUMS(Amount, Quantity);

      // Compare detail line totals against prognosis line values
      RemainingAmount := ROUND(PrognosisLine.Amount - PrognosisLineSpec.Amount);
      RemainingQuantity := ROUND(PrognosisLine.Quantity - PrognosisLineSpec.Quantity,0.00001);

      // If necessary, create detail line for remaining amount
      IF (RemainingAmount <> 0) OR (RemainingQuantity <> 0) THEN BEGIN
        PrognosisLine.Amount := RemainingAmount;
        PrognosisLine.Quantity := RemainingQuantity;
        InsertDetailLine(PrognosisLine);
      END;
    END;

    LOCAL PROCEDURE InsertDetailLine@1100525005(PrognosisLine@11136551 : Record 11012035);
    BEGIN
      WITH PrognosisLine DO BEGIN
        CALCFIELDS("Cost Object Description");
        InsertPrognosisSpecification("Project No.", "Prognosis Date", Element, "Cost Type", "Cost Object", "Cost Object Description",  "Unit of Measure", Amount, Quantity)
      END;
    END;

    LOCAL PROCEDURE InsertDetailLineElements@1100529700(PrognosisperElement@11136551 : Record 11071893);
    BEGIN
      WITH PrognosisperElement DO BEGIN
        CALCFIELDS("Element Description");
        InsertPrognosisSpecification("Project No.", "Prognosis Date", Element, 0, '', "Element Description",  "Unit of Measure", Amount, Quantity)
      END;
    END;

    LOCAL PROCEDURE InsertPrognosisSpecification@1100529704(iProject@11136555 : Code[20];iPrognosisDate@11136554 : Date;iElement@11136553 : Code[20];iCostType@11136552 : Integer;iCostObject@11136551 : Code[20];iDescription@11136558 : Text[100];iUnit@1100529701 : Code[10];iAmount@1210190000 : Decimal;iQuantity@1100529700 : Decimal);
    VAR
      PrognosisLineSpecification@11136550 : Record 11020687;
    BEGIN
      IF NOT ProjSetup."Prognosis Specifications" THEN
        EXIT;

      WITH PrognosisLineSpecification DO BEGIN
        "Project No." := iProject;
        VALIDATE("Prognosis Date", iPrognosisDate);
        Element := iElement;
        "Cost Type" := iCostType;
        "Cost Object" := iCostObject;
        "Line No." := FindNextLineNo;
        Description := iDescription;
        Amount := iAmount;
        Quantity := iQuantity;

        IF (Amount <> 0) AND (Quantity = 0) THEN
         Quantity := 1;

        "Unit of Measure" := iUnit;
        "Reference No." := CREATEGUID;
        UpdatePrice;

        INSERT(FALSE);
      END;
    END;

    LOCAL PROCEDURE CopyPreviousDetailLines@1100529200(PrognosisLine@1100529200 : Record 11012035;PreviousPrognosisLine@1100529201 : Record 11012035);
    VAR
      PrognosisLineSpecification@1100529202 : Record 11020687;
      PreviousPrognosisLineSpecification@1100529203 : Record 11020687;
    BEGIN
      PreviousPrognosisLineSpecification.SETRANGE("Project No.",PreviousPrognosisLine."Project No.");
      PreviousPrognosisLineSpecification.SETRANGE("Prognosis Date",PreviousPrognosisLine."Prognosis Date");
      PreviousPrognosisLineSpecification.SETRANGE("Cost Type",PreviousPrognosisLine."Cost Type");
      PreviousPrognosisLineSpecification.SETRANGE(Element,PreviousPrognosisLine.Element);
      PreviousPrognosisLineSpecification.SETRANGE("Cost Object",PreviousPrognosisLine."Cost Object");
      IF PreviousPrognosisLineSpecification.FINDSET THEN
        REPEAT
          PrognosisLineSpecification.COPY(PreviousPrognosisLineSpecification);
          PrognosisLineSpecification."Prognosis Date" := PrognosisLine."Prognosis Date";
          IF PrognosisLineSpecification.INSERT THEN;
        UNTIL PreviousPrognosisLineSpecification.NEXT = 0;
    END;

    LOCAL PROCEDURE DeleteDetailLines@1100529202(PrognosisLine@1100529200 : Record 11012035);
    VAR
      PrognosisLineSpecification@1100529202 : Record 11020687;
    BEGIN
      PrognosisLineSpecification.SETRANGE("Project No.",PrognosisLine."Project No.");
      PrognosisLineSpecification.SETRANGE("Prognosis Date",PrognosisLine."Prognosis Date");
      PrognosisLineSpecification.SETRANGE("Cost Type",PrognosisLine."Cost Type");
      PrognosisLineSpecification.SETRANGE(Element,PrognosisLine.Element);
      PrognosisLineSpecification.SETRANGE("Cost Object",PrognosisLine."Cost Object");
      IF NOT PrognosisLineSpecification.ISEMPTY THEN
        PrognosisLineSpecification.DELETEALL;
    END;

    LOCAL PROCEDURE ValidateQuantityOfCopy@1210190003(VAR PrognosisLine@1210190000 : Record 11012035);
    BEGIN
      ProjSetup.GET;
      WITH PrognosisLine DO BEGIN
        IF (Quantity < 0) AND
           (ProjSetup."Fill Prognosis End Result" =
            ProjSetup."Fill Prognosis End Result"::"Prognosis may not be Negative" )
        THEN
          VALIDATE(Quantity, 0);
      END;
    END;

    LOCAL PROCEDURE ValidateAmountOfCopy@1210190004(VAR PrognosisLine@1210190000 : Record 11012035);
    BEGIN
      ProjSetup.GET;
      WITH PrognosisLine DO BEGIN
        IF (Amount < 0) AND
           (ProjSetup."Fill Prognosis End Result" =
             ProjSetup."Fill Prognosis End Result"::"Prognosis may not be Negative" )
        THEN BEGIN
          "Ovh. Surcharge" := 0;
          VALIDATE(Amount, 0);
        END;
      END;
    END;

    PROCEDURE CalculateRiscCoverage@1100525006(Prognosis@1100525000 : Record 11012034);
    VAR
      PrognosisLine@1100525001 : Record 11012035;
    BEGIN
      WITH PrognosisLine DO BEGIN
        SETRANGE("Project No.",Prognosis."Project No.");
        SETRANGE("Prognosis Date",Prognosis."Prognosis Date");
        IF FINDSET(TRUE, FALSE) THEN
          REPEAT
            VALIDATE("Risc Coverage", "Total Risc Coverage Amount" - "Total Release Risc Coverage");
            MODIFY(TRUE);
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InvoicedAmountInstallments@1100529500(PrognosisHeader@1100529500 : Record 11012034;ProjectInstallment@1100529502 : Record 11012018) : Decimal;
    VAR
      JobLedgerEntry@1100529501 : Record 11072005;
    BEGIN
      JobLedgerEntry.SETRANGE(Principal,ProjectInstallment.Principal);
      JobLedgerEntry.SETRANGE("Installment No.",ProjectInstallment."Installment No.");
      JobLedgerEntry.SETRANGE("Plot No.",ProjectInstallment."Plot No.");
      JobLedgerEntry.SETRANGE("Job No.",ProjectInstallment."Project No.");
      JobLedgerEntry.SETRANGE("Installment Invoice",TRUE);
      JobLedgerEntry.SETRANGE("Project Invoice",TRUE);
      JobLedgerEntry.SETRANGE("Posting Date",0D,PrognosisHeader."Prognosis Date");
      JobLedgerEntry.SETRANGE("Advance Payment", FALSE);
      JobLedgerEntry.CALCSUMS("Total Price (LCY)");
      EXIT(-JobLedgerEntry."Total Price (LCY)");
    END;

    PROCEDURE UpdatePrognosisSpecification@1100529702(iProjectNo@1100529704 : Code[20];iPrognosisDate@1100529703 : Date;iElement@1100529702 : Code[20];iCostType@1100529701 : Integer;iCostObject@1100529700 : Code[20];OldQuantity@11136550 : Decimal;NewQuantity@11136552 : Decimal;OldPrice@11136553 : Decimal;NewPrice@11136554 : Decimal;OldAmount@1100525001 : Decimal;NewAmount@1100525000 : Decimal;NewDescription@1100529705 : Text);
    VAR
      Prognosis@1100529706 : Record 11012034;
      PrognosisLineSpecification@11136551 : Record 11020687;
      PrognosisLineSpecification2@11136555 : Record 11020687;
      UpdateAmountOnly@1100525002 : Boolean;
    BEGIN
      ProjSetup.GET;
      IF NOT ProjSetup."Prognosis Specifications" THEN
        EXIT;

      IF OldAmount <> NewAmount THEN BEGIN
        IF (OldQuantity = 0) AND (NewQuantity = 0) AND
           (OldPrice = 0) AND (NewPrice = 0) THEN BEGIN
          UpdateAmountOnly := TRUE;
          OldPrice := OldAmount;
          NewPrice := NewAmount;
        END;
      END;

      IF (NewPrice <> OldPrice) THEN BEGIN
        Prognosis.GET(iProjectNo, iPrognosisDate);
        PrognosisLineSpecification.SETRANGE("Project No.", iProjectNo);
        PrognosisLineSpecification.SETRANGE("Prognosis Date", iPrognosisDate);
        IF iElement = '' THEN
          PrognosisLineSpecification.SETFILTER(Element, '%1', '')
        ELSE
          PrognosisLineSpecification.SETRANGE(Element, iElement);
        IF (Prognosis."Prognosis Level" <> Prognosis."Prognosis Level"::Element) THEN BEGIN
          PrognosisLineSpecification.SETRANGE("Cost Type", iCostType);
          PrognosisLineSpecification.SETRANGE("Cost Object", iCostObject);
        END;
        IF PrognosisLineSpecification.FINDSET THEN BEGIN
          REPEAT
            PrognosisLineSpecification2 := PrognosisLineSpecification;
            IF UpdateAmountOnly THEN BEGIN
              PrognosisLineSpecification2.Amount := NewAmount;
            END ELSE BEGIN
              PrognosisLineSpecification2.Price := NewPrice;
              PrognosisLineSpecification2.UpdateAmount;
            END;
            PrognosisLineSpecification2.MODIFY;
          UNTIL PrognosisLineSpecification.NEXT = 0;
          UpdateAmountOnly := FALSE;
        END;
      END;

      IF (NewQuantity <> OldQuantity) OR (UpdateAmountOnly = TRUE) THEN BEGIN  //C034480
        PrognosisLineSpecification."Project No." := iProjectNo;
        PrognosisLineSpecification."Prognosis Date" := iPrognosisDate;
        PrognosisLineSpecification."Cost Type" := iCostType;
        PrognosisLineSpecification.Element := iElement;
        PrognosisLineSpecification."Cost Object" := iCostObject;
        PrognosisLineSpecification.Description := NewDescription;
        IF UpdateAmountOnly THEN BEGIN
          PrognosisLineSpecification.Amount := NewAmount;
        END ELSE BEGIN
          PrognosisLineSpecification.Quantity := NewQuantity - OldQuantity;
          PrognosisLineSpecification.Price := NewPrice;
          PrognosisLineSpecification.UpdateAmount;
        END;
        PrognosisLineSpecification."Reference No." := CREATEGUID;
        PrognosisLineSpecification."Line No." := PrognosisLineSpecification.FindNextLineNo;
        PrognosisLineSpecification.INSERT;
      END;
    END;

    PROCEDURE AmountOnDrillDown@1100529701(iProjectNo@1100529704 : Code[20];iPrognosisDate@1100529703 : Date;iElement@1100529702 : Code[20];iCostType@1100529701 : Integer;iCostObject@1100529700 : Code[20]);
    VAR
      Prognosis@1100529705 : Record 11012034;
      PrognosisLineSpecification@11136550 : Record 11020687;
    BEGIN
      ProjSetup.GET;
      IF NOT ProjSetup."Prognosis Specifications" THEN
        EXIT;
      COMMIT;

      Prognosis.GET(iProjectNo, iPrognosisDate);
      PrognosisLineSpecification.SETRANGE("Project No.", iProjectNo);
      PrognosisLineSpecification.SETRANGE("Prognosis Date", iPrognosisDate);
      IF iElement = '' THEN
        PrognosisLineSpecification.SETFILTER(Element, '%1', '')
      ELSE
        PrognosisLineSpecification.SETRANGE(Element, iElement);
      IF (Prognosis."Prognosis Level" <> Prognosis."Prognosis Level"::Element) THEN BEGIN
        PrognosisLineSpecification.SETRANGE("Cost Type", iCostType);
        PrognosisLineSpecification.SETRANGE("Cost Object", iCostObject);
      END;

      PAGE.RUNMODAL(0, PrognosisLineSpecification);
    END;

    PROCEDURE ProcessPrognosis@1100525009(Prognosis@1100528800 : Record 11012034);
    VAR
      CostTypes@1100525000 : 'Cost,Revenue,Both';
      CopyPrognosisAmounts@1100525001 : 'No,CopyEndResult,CopyPrognosisTotal';
      ProductDiscountMgt@1100528900 : Codeunit 11012308;
      Job@1100528901 : Record 11072003;
      CostGroup@1100530700 : Record 11126038;
      CostObjectsbyCostGroup@1100530701 : Record 11126039;
      CostObjectTmp@1100530702 : TEMPORARY Record 1113;
      PrognosisLine@1100530703 : Record 11012035;
    BEGIN
      WITH Prognosis DO BEGIN
        IF NOT Prognosis.Fixed THEN BEGIN
          IF "Calculate Product Discount" THEN BEGIN
            Job.GET("Project No.");
            ProductDiscountMgt.CalculateDiscountPurchaseOrder(Job);
          END;
          CreatePrognosis(Prognosis, CostTypes::Both);

          IF NOT "Copy Comments Prev. Prognosis" THEN
            CopyCommentsCurrentPrognosis := TRUE;
          IF "Copy Prev. Cost Prognosis" THEN
            CopyPrevPrognosis(Prognosis, CopyPrognosisAmounts::No, CostTypes::Cost);
          IF "Copy Prev. Progn. End Result" THEN
            CopyPrevPrognosis(Prognosis, CopyPrognosisAmounts::CopyEndResult, CostTypes::Cost);
          IF "Copy Prev. Progn. Total Cost" THEN
            CopyPrevPrognosis(Prognosis, CopyPrognosisAmounts::CopyPrognosisTotal, CostTypes::Cost);
          IF "Copy Prev. Revenue Prognosis" THEN
            CopyPrevPrognosis(Prognosis, CopyPrognosisAmounts::No, CostTypes::Revenue);
          IF "Copy Prev. Progn. Tot. Revenue" THEN
            CopyPrevPrognosis(Prognosis, CopyPrognosisAmounts::CopyPrognosisTotal, CostTypes::Revenue);
          IF "Copy Comments Prev. Prognosis" THEN BEGIN
            Prognosis.CopyPreviousComments;
            Prognosis.CopyPreviousCommentLines;
            "Copy Comments Prev. Prognosis" := FALSE;
            MODIFY;
          END;
          CopyCommentsCurrentPrognosis := FALSE;

          IF "Fill Progn. with Avail. Cost" THEN
            FillPrognosisWithAvailable(Prognosis);
          IF "Fill Progn. with extr. Costs" THEN
            FillPrognosisWithXtraPolCost(Prognosis);

          IF "Fill Prognosis Revenues" THEN
            FillPrognRevenues(Prognosis);
          IF "Calculate Surcharges" THEN BEGIN
            IF "Prognosis Level" = "Prognosis Level"::Detailed THEN BEGIN
              Prognosis."Ovh. Surcharges Calculated" := TRUE;
              Prognosis."Altered After Calculation" := FALSE;
              Prognosis.MODIFY;

              RemoveSurcharges(Prognosis);
              CalculateSurcharges(Prognosis);
            END;
          END;
          IF "Calculate Risc Coverage" THEN
            IF "Prognosis Level" = "Prognosis Level"::Detailed THEN
              CalculateRiscCoverage(Prognosis);

          IF "Release Calculation Result" THEN BEGIN
            CostGroup.SETRANGE("Estimate Result", TRUE);
            IF CostGroup.FINDSET THEN
              REPEAT
                CostObjectsbyCostGroup.SETRANGE("Cost Group Code", CostGroup.Code);
                IF CostObjectsbyCostGroup.FINDSET THEN
                  REPEAT
                    IF NOT CostObjectTmp.GET(CostObjectsbyCostGroup."Cost Object Code") THEN BEGIN
                      CostObjectTmp.INIT;
                      CostObjectTmp.Code := CostObjectsbyCostGroup."Cost Object Code";
                      CostObjectTmp.INSERT;
                    END;
                  UNTIL CostObjectsbyCostGroup.NEXT = 0;
              UNTIL CostGroup.NEXT = 0;

            PrognosisLine.SETRANGE("Project No.", "Project No.");
            PrognosisLine.SETRANGE("Prognosis Date", "Prognosis Date");
            IF CostObjectTmp.FINDSET THEN
              REPEAT
                PrognosisLine.SETRANGE("Cost Object", CostObjectTmp.Code);
                IF PrognosisLine. FINDSET THEN
                  REPEAT
                    PrognosisLine.VALIDATE("Prognosis End Result", PrognosisLine.Amount);
                    PrognosisLine.VALIDATE(Amount, 0);
                    PrognosisLine.MODIFY(TRUE);
                  UNTIL PrognosisLine.NEXT = 0;
              UNTIL CostObjectTmp.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE CopyPrevPrognosisElementsTotalCost@1100529600(Prognosis@1100529600 : Record 11012034);
    VAR
      PrevPrognosis@1100529601 : Record 11012034;
      PrognosisPerElement@1100529602 : Record 11071893;
      PrevPrognosisPerElement@1100529603 : Record 11071893;
    BEGIN
      IF Prognosis."Prognosis Date" = 0D THEN
        EXIT;
      PrevPrognosis.SETRANGE("Project No.", Prognosis."Project No.");
      PrevPrognosis.SETFILTER("Prognosis Date", '<%1', Prognosis."Prognosis Date");
      IF PrevPrognosis.ISEMPTY THEN
        EXIT;
      PrognosisPerElement.SETRANGE("Project No.", Prognosis."Project No.");
      PrognosisPerElement.SETRANGE("Prognosis Date", Prognosis."Prognosis Date");
      IF PrognosisPerElement.ISEMPTY THEN
        EXIT;

      PrevPrognosis.FINDLAST;
      PrognosisPerElement.FINDSET;
      REPEAT
        IF PrevPrognosisPerElement.GET(PrevPrognosis."Project No.", PrevPrognosis."Prognosis Date", PrognosisPerElement.Element) THEN BEGIN
          PrognosisPerElement.VALIDATE("Prognosis Total Cost", PrevPrognosisPerElement."Prognosis Total Cost");
          PrognosisPerElement.MODIFY(TRUE);
        END;
      UNTIL PrognosisPerElement.NEXT = 0;
    END;

    PROCEDURE CopyRiscCoverageFromTotalRiscCoverage@1100529601(Prognosis@1100525000 : Record 11012034);
    VAR
      PrognosisLine@1100525001 : Record 11012035;
    BEGIN
      PrognosisLine.SETRANGE("Project No.", Prognosis."Project No.");
      PrognosisLine.SETRANGE("Prognosis Date", Prognosis."Prognosis Date");
      IF PrognosisLine.FINDSET THEN
        REPEAT
          PrognosisLine.VALIDATE("Risc Coverage", PrognosisLine."Total Risc Coverage Amount");
          PrognosisLine.MODIFY(TRUE);
        UNTIL PrognosisLine.NEXT = 0;
    END;

    PROCEDURE FillPrognosisEndResultWithPurchaseResult@1100529602(Prognosis@1100525000 : Record 11012034);
    VAR
      PrognosisLine@1100525001 : Record 11012035;
    BEGIN
      PrognosisLine.SETRANGE("Project No.", Prognosis."Project No.");
      PrognosisLine.SETRANGE("Prognosis Date", Prognosis."Prognosis Date");
      IF PrognosisLine.FINDSET THEN
        REPEAT
          PrognosisLine.VALIDATE("Prognosis End Result", PrognosisLine."Estimated Purchase Result" - PrognosisLine."Risc Coverage");
          PrognosisLine.MODIFY(TRUE);
        UNTIL PrognosisLine.NEXT = 0;
    END;

    PROCEDURE "---EVRY---"@1100290010();
    BEGIN
    END;

    PROCEDURE ProcessPrognosisOLD@1100290012(VAR Prognosis@1100528800 : Record 11012034);
    VAR
      ProjectPlanningActivity@1100528806 : Record 11012431;
      FillPrognosisFromProjAct@1100528805 : Report 11012272;
      RequestedActivityCapacity@1100528804 : Record 11125708;
      FillPrognosisFromReqCap@1100528803 : Report 11012271;
      AssignedActivCapRec@1100528802 : Record 11125710;
      FillPrognFromCapPlanningRpt@1100528801 : Report 11012270;
      CopyPrevPrognosisTotalCost@1101285000 : Boolean;
    BEGIN
      CLEAR(AutomaticGeneratePrognosis);
      AutomaticGeneratePrognosis.SetSelections(Prognosis."Prognosis Date");
      AutomaticGeneratePrognosis.RUNMODAL;
      AutomaticGeneratePrognosis.GetSelections(StartProcess,PrognosisDate,
        CopyPrevCostPrognosis,CopyPrevPrognosisEndResult,CopyPrevPrognosisTotalCost,
        CopyPrevRevenuePrognosis,CopyPrevPrognosisTotalRev,
        CopyCommentsPrevPrognosis,FillProgWithAvailableCost,FillProgWithExtrapolatedCosts,FillProgFromProjPlanningAct,
        FillProgFromRequestedActCap,FillProgFromAssignedActCap,FillProgRevenues,CalcSurcharges,CalcRiscCoverage
        ,includeFinishedJobs             //IME403
        );

      IF NOT StartProcess THEN
        EXIT;

      IF Prognosis."Prognosis Date" <> PrognosisDate THEN BEGIN
        Prognosis."Prognosis Date" := PrognosisDate;

        IF NOT Prognosis.GET(Prognosis."Project No.", PrognosisDate) THEN BEGIN
          Prognosis.INIT;
          Prognosis."Project No." := Prognosis."Project No.";
          Prognosis.VALIDATE("Prognosis Date",PrognosisDate);
          Prognosis.INSERT(TRUE);
        END;
      END;

      IF NOT Prognosis.Fixed THEN BEGIN
        CreatePrognosis(Prognosis, CostTypes::Both);

        IF CopyPrevCostPrognosis THEN
          CopyPrevPrognosis(Prognosis, 0, CostTypes::Cost);
        IF CopyPrevPrognosisEndResult THEN
          CopyPrevPrognosis(Prognosis, 0, CostTypes::Cost);
        IF CopyPrevRevenuePrognosis THEN
          CopyPrevPrognosis(Prognosis, 0, CostTypes::Revenue);
        IF CopyPrevPrognosisTotalRev THEN
          CopyPrevPrognosis(Prognosis, 2, CostTypes::Revenue);
        IF CopyCommentsPrevPrognosis THEN
          Prognosis.CopyPreviousComments;

        IF FillProgWithAvailableCost THEN
          FillPrognosisWithAvailable(Prognosis);
        IF FillProgWithExtrapolatedCosts THEN
          FillPrognosisWithXtraPolCost(Prognosis);
        IF FillProgFromProjPlanningAct THEN BEGIN
          ProjectPlanningActivity.SETRANGE("Project No.", Prognosis."Project No.");
          ProjectPlanningActivity.FINDFIRST;  //* There must be a project planning activity for the project.
          ProjRec.SETRANGE("No.", Prognosis."Project No.");
          FillPrognosisFromProjAct.SETTABLEVIEW(ProjRec);
          FillPrognosisFromProjAct.SetSelection(Prognosis."Project No.", Prognosis."Prognosis Date");
          FillPrognosisFromProjAct.RUNMODAL;
        END;
        IF FillProgFromRequestedActCap THEN BEGIN
          RequestedActivityCapacity.SETRANGE("Project No.", Prognosis."Project No.");
          RequestedActivityCapacity.FINDFIRST;  //* There must be a requested activity capacity for the project.
          ProjRec.SETRANGE("No.", Prognosis."Project No.");
          FillPrognosisFromReqCap.SETTABLEVIEW(ProjRec);
          FillPrognosisFromReqCap.SetSelection(Prognosis."Project No.", Prognosis."Prognosis Date");
          FillPrognosisFromReqCap.RUNMODAL;
        END;
        IF FillProgFromAssignedActCap THEN BEGIN
          AssignedActivCapRec.SETRANGE("Project No.", Prognosis."Project No.");
          AssignedActivCapRec.FINDFIRST;  //* There must be a capacity planning of the project
          ProjRec.SETRANGE("No.", Prognosis."Project No.");
          FillPrognFromCapPlanningRpt.SETTABLEVIEW(ProjRec);
          FillPrognFromCapPlanningRpt.SetSelection(Prognosis."Project No.", Prognosis."Prognosis Date");
          FillPrognFromCapPlanningRpt.RUNMODAL;
        END;
        IF FillProgRevenues THEN
          FillPrognRevenues(Prognosis);
        IF CalcSurcharges THEN BEGIN
          IF Prognosis."Prognosis Level" = Prognosis."Prognosis Level"::Detailed THEN BEGIN
            Prognosis."Ovh. Surcharges Calculated" := TRUE;
            Prognosis."Altered After Calculation" := FALSE;
            Prognosis.MODIFY;

            RemoveSurcharges(Prognosis);
            CalculateSurcharges(Prognosis);
          END;
        END;
      END;
    END;

    PROCEDURE ProcessPrognosisCC@1100290000(VAR Prognosis@1100528800 : Record 11012034);
    VAR
      _costComp@1000000002 : Record 11012012;
      _dimVal@1000000003 : Record 349;
      _dec@1100290000 : Decimal;
      _revLoop@1000000000 : Integer;
      _revenue@1000000001 : Boolean;
      HourAccountingLine@1100285001 : Record 11012039;
      ItemJournalLine@1100285000 : Record 83;
      lCostComponent@1100285500 : Record 11012012;
      ExtensionContract@1100285501 : Record 11012004;
      ProjPrincipalRec@1100285502 : Record 11012005;
      lJobProjectStatus@1100285100 : Record 11072003;
      lJobProjectStatusOK@1100285101 : Boolean;
      JobsSetup@1100285102 : Record 315;
      HumanResourcesSetup@1100583000 : Record 5218;
    BEGIN
      // LAHE 121213 For Cost Component
      GLSetup.GET;
      // pop up selection for end user
      HumanResourcesSetup.GET;

      //>> ITERO.FH RFC236
      IF NOT IsFromWebService THEN BEGIN
      //<< RFC236
        CLEAR(AutomaticGeneratePrognosisCC);
        AutomaticGeneratePrognosisCC.SetSelections(Prognosis."Prognosis Date");
        AutomaticGeneratePrognosisCC.RUNMODAL;
        AutomaticGeneratePrognosisCC.GetSelections(StartProcess
          ,PrognosisDate
          ,CopyPrevCostPrognosis
          ,CopyPrevPrognosisEndResult
          ,FillProgWithAvailableCost
          ,GenerateCostPlusEntries
          ,CopyPrevRevenuePrognosis2
          ,CopyPrevPrognosisEndResRevenue
          ,FillPrognosisExpectedRevenue
          ,includeFinishedJobs             //IME403
          );

      //>> ITERO.FH RFC236
      END ELSE BEGIN
        StartProcess  := TRUE;
        PrognosisDate := Prognosis."Prognosis Date";
        FillProgWithAvailableCost := TRUE; //DL 180307
      END;
      //<< RFC236

      IF NOT StartProcess THEN
        EXIT;
      //>>IME076
      //check if new date will overwrite exitsing fixed prognosis
      IF (PrognosisDate <> 0D) AND Prognosis.GET(Prognosis."Project No.", PrognosisDate) THEN
        Prognosis.TESTFIELD(Fixed,FALSE);
      //<<IME076

      // create prognosis for date if not there
      IF Prognosis."Prognosis Date" <> PrognosisDate THEN BEGIN
        Prognosis."Prognosis Date" := PrognosisDate;

        IF NOT Prognosis.GET(Prognosis."Project No.", PrognosisDate) THEN BEGIN
          Prognosis.INIT;
          Prognosis."Project No." := Prognosis."Project No.";
          Prognosis.VALIDATE("Prognosis Date",PrognosisDate);
          Prognosis.INSERT(TRUE);
        END;
      END;

      ProjRec.GET(Prognosis."Project No."); // delib. error

      //PrevPrognosis.RESET;
      //PrevPrognosis.SETRANGE("Project No.",ProjRec."No.");
      //PrevPrognosis.SETRANGE("Prognosis Date",0D,PrognosisDate -1);
      //IF NOT PrevPrognosis.FINDLAST THEN
      //  PrevPrognosis := Prognosis;

      ProjRec.SETRECFILTER();
      IF GenerateCostPlusEntries THEN BEGIN
        CLEAR(CreateProjectCostPlus);
        // Commission No.?
        CreateProjectCostPlus.USEREQUESTPAGE(FALSE);
        //CreateProjectCostPlus.SETTABLEVIEW(ProjRec);
        //CreateProjectCostPlus.RUNMODAL;

        // from Proj Card call
        JobLedgEntry.RESET;
        JobLedgEntry.SETRANGE("Cost Plus Entry Created", FALSE);
        PostedHourLine.RESET;
        PostedHourLine.SETRANGE("Cost Plus Entry Created", FALSE);
        HourAccLine.RESET;
        HourAccLine.SETRANGE("Cost Plus Entry Created", FALSE);

        CreateProjectCostPlus.SETTABLEVIEW(ProjRec);
        CreateProjectCostPlus.SETTABLEVIEW(JobLedgEntry);
        CreateProjectCostPlus.SETTABLEVIEW(PostedHourLine);
        CreateProjectCostPlus.SETTABLEVIEW(HourAccLine);
        CreateProjectCostPlus.SetDefault(ProjRec."No.");
        //>> 171212 ITERO.SB Pure 283898
        //CreateProjectCostPlus.SetReqForm(FALSE);
        CreateProjectCostPlus.SetReqForm(TRUE);
        //<<
        CreateProjectCostPlus.RUNMODAL;

        // repeat for sub projects if main project
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN BEGIN
          SubProject.RESET;
          SubProject.SETRANGE("Main Project",ProjRec."No.");
      //>>IME403
          IF NOT includeFinishedJobs THEN
            SubProject.SETRANGE("Project Status",0,SubProject."Project Status"::"Administrative Finished");
      //<<IME403
          IF SubProject.FINDSET THEN REPEAT
            //>> 150512 ITERO.SB IME-329
            CLEAR(ProjPrincipalRec);
            ProjPrincipalRec.SETRANGE("Project No.", SubProject."No.");
            ProjPrincipalRec.SETRANGE("Cost Plus Customer",TRUE);
            IF ProjPrincipalRec.FINDSET THEN BEGIN
            //<<
              SubProject.SETRECFILTER();
              CLEAR(CreateProjectCostPlus);
              // Commission No.?
              CreateProjectCostPlus.USEREQUESTPAGE(FALSE);
              //CreateProjectCostPlus.SETTABLEVIEW(ProjRec);
              //CreateProjectCostPlus.RUNMODAL;

              // from Proj Card call
              JobLedgEntry.RESET;
              JobLedgEntry.SETRANGE("Cost Plus Entry Created", FALSE);
              PostedHourLine.RESET;
              PostedHourLine.SETRANGE("Cost Plus Entry Created", FALSE);
              HourAccLine.RESET;
              HourAccLine.SETRANGE("Cost Plus Entry Created", FALSE);

              CreateProjectCostPlus.SETTABLEVIEW(SubProject);
              CreateProjectCostPlus.SETTABLEVIEW(JobLedgEntry);
              CreateProjectCostPlus.SETTABLEVIEW(PostedHourLine);
              CreateProjectCostPlus.SETTABLEVIEW(HourAccLine);
              CreateProjectCostPlus.SetDefault(SubProject."No.");
              //>> 171212 ITERO.SB Pure 283898
              //CreateProjectCostPlus.SetReqForm(FALSE);
              CreateProjectCostPlus.SetReqForm(TRUE);
              //<<
              CreateProjectCostPlus.RUNMODAL;
              SubProject.SETRANGE("No.");
            END;
          UNTIL SubProject.NEXT = 0;
        END;

      END;    //IF GenerateCostPlusEntries


      //IF NOT ProjRec."Prognosis per Element" THEN BEGIN
      //IF TRUE THEN BEGIN
      //One line for each cost component in that occurs in the budget, project ledger,
      //purchase control, hour accounting line (purchase order line) or previous prognosis.
      //Each cost component will only have one line.

      tempCostComp.RESET;  // Sales Line table
      tempCostComp.DELETEALL;

      WITH BudgetLine DO BEGIN
        RESET;
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          SETRANGE("Project No.",ProjRec."No.");
        SETFILTER("Cost Component",'<>%1','');
        SETRANGE("Version Date",0D,Prognosis."Prognosis Date");
        //>>IME-096
        SETFILTER("Extension Contract Status",'%1|%2|%3',
          "Extension Contract Status"::"Not Applicable",      //no extension connected
          "Extension Contract Status"::Order,"Extension Contract Status"::"Invoicing Allowed");
        //<<IME-096
        IF FINDSET THEN REPEAT

      //>>IME403
          lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
          //IF "Cost Component" <> '' THEN BEGIN
          IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN BEGIN
      //<<IME403

            IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
              // save new occurance
              tempCostComp."Document Type" := -1;
              tempCostComp."Document No." := "Cost Component";
              tempCostComp."Line No." := 0;
              tempCostComp.INIT;
              tempCostComp.INSERT;
            END;
            //IF NOT CONFIRM('Component "%1"',TRUE,tempCostComp."Document No.") THEN ERROR('');
            //Total amount in the budget lines of the project with the version date equal or before the prognosis date.
            //Total hours in the budget lines of the project with the version date equal or before the prognosis date.
            //IF "Version Date" <= PrevPrognosis."Prognosis Date" THEN BEGIN
            IF "Version Date" <= Prognosis."Prognosis Date" THEN BEGIN
              //TotAmountBudget += Amount;
              //TotHoursBudget += Hours;
              tempCostComp.Amount += "Amount (LCY)"; // carrierfield budget amount
              tempCostComp.Quantity += Hours; // carrierfield budget hours
              tempCostComp.MODIFY;
            END;
          END;
        UNTIL NEXT = 0;
      END;

      //>>ENH-025
      //a cost plus project
      IF (ProjRec."Settlement Method" = ProjRec."Settlement Method"::"Cost Plus") AND
          (ProjPrincipal.GET(ProjRec."No.",ProjRec."Bill-to Customer No.")) THEN BEGIN
        GLSetup.GET;
        DimVal.GET(GLSetup."Global Dimension 2 Code",ProjPrincipal."Cost Object");
        IF DimVal."Cost Component" <> '' THEN BEGIN
          IF NOT tempCostComp.GET(-1,DimVal."Cost Component",0) THEN BEGIN
            // save new occurance
            tempCostComp."Document Type" := -1;
            tempCostComp."Document No." := DimVal."Cost Component";
            tempCostComp."Line No." := 0;
            tempCostComp.INIT;
            tempCostComp.INSERT;
          END;
        END;
      END;
      //a project which has a cost plus extension
      //ExtensionContract.key: "Project No.","Contract No."
      ExtensionContract.SETRANGE("Project No.",ProjRec."No.");
      ExtensionContract.SETRANGE("Settlement Method",ExtensionContract."Settlement Method"::"Cost Plus");
      IF ExtensionContract.FINDSET(FALSE) THEN
      REPEAT
        IF ProjPrincipal.GET(ProjRec."No.",ExtensionContract.Principal) THEN BEGIN
          GLSetup.GET;
          DimVal.GET(GLSetup."Global Dimension 2 Code",ProjPrincipal."Cost Object");
          IF DimVal."Cost Component" <> '' THEN BEGIN
            IF NOT tempCostComp.GET(-1,DimVal."Cost Component",0) THEN BEGIN
              // save new occurance
              tempCostComp."Document Type" := -1;
              tempCostComp."Document No." := DimVal."Cost Component";
              tempCostComp."Line No." := 0;
              tempCostComp.INIT;
              tempCostComp.INSERT;
            END;
          END;
        END;
      UNTIL ExtensionContract.NEXT=0;
      //<<ENH-025

      // proj ledg entries
      WITH JobLedgEntry DO BEGIN
        RESET;
        SETCURRENTKEY("Job No.");
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          SETRANGE("Job No.",ProjRec."No.");
        SETFILTER("Cost Component",'<>%1','');
        SETRANGE("Posting Date",0D,Prognosis."Prognosis Date");
        IF FINDSET THEN REPEAT
      //>>IME403
          lJobProjectStatusOK := TRUE;
          IF NOT includeFinishedJobs THEN BEGIN
            IF  lJobProjectStatus."No." <> "Job No." THEN
              lJobProjectStatus.GET("Job No.");
            lJobProjectStatusOK := (lJobProjectStatus."Project Status" IN [0..lJobProjectStatus."Project Status"::"Administrative Finished"]);
          END;
          //IF "Cost Component" <> '' THEN BEGIN
          IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN BEGIN
      //<<IME403
            IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
              // save new occurance
              tempCostComp."Document Type" := -1;
              tempCostComp."Document No." := "Cost Component";
              tempCostComp."Line No." := 0;
              tempCostComp.INIT;
              tempCostComp.INSERT;
            END;
            //Total of the project ledger entries for the project
            //with a posting date equal or before the prognosis date (Field: Total price)
            //Total of the project ledger entries for the project with a posting date equal or before the prognosis date
            //and cost type = ÊLaborË (Field: Quantity)
            //IF JobLedgEntry."Posting Date" <= PrevPrognosis."Prognosis Date" THEN BEGIN
            IF JobLedgEntry."Posting Date" <= Prognosis."Prognosis Date" THEN BEGIN
              //TotActualAmount += JobLedgEntry."Total Price (LCY)";
              //IF "Cost Type" = "Cost Type"::Labor THEN
              //  TotActualHours += JobLedgEntry.Quantity;
              //tempCostComp."Outstanding Amount" += -JobLedgEntry."Total Price (LCY)"; // carrierfield actual amount
              tempCostComp."Outstanding Amount" += JobLedgEntry."Total Cost (LCY)"; // carrierfield actual amount
      //>>ENH-011
              JobLedgEntry.CALCFIELDS("Component Type (Wage Comp.)");
              IF lCostComponent.GET("Cost Component") THEN
                //>> 190131 ORANGO.SB RFC-226
                IF ((lCostComponent."Cost Type" = lCostComponent."Cost Type"::Labor) AND (JobLedgEntry."Component Type (Wage Comp.)"<>JobLedgEntry."Component Type (Wage Comp.)"::Addition))THEN
                //IF (lCostComponent."Cost Type" = lCostComponent."Cost Type"::Labor) THEN
                //<<
      //<<ENH-011
              tempCostComp."Qty. Invoiced (Base)" += JobLedgEntry.Quantity; // carrierfield actual hours
              tempCostComp.MODIFY;
            END;
          END;
        UNTIL JobLedgEntry.NEXT = 0;
      END;

      // Hour Accounting Lines
      WITH HourAccLine DO BEGIN
        RESET;
        SETCURRENTKEY("Project No.");
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          SETRANGE("Project No.",ProjRec."No.");
        SETFILTER("Cost Component",'<>%1','');
        SETRANGE("Posting Date",0D,Prognosis."Prognosis Date");
        IF FINDSET THEN REPEAT
      //>>IME403
          lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
          //IF "Cost Component" <> '' THEN BEGIN
          IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN BEGIN
      //<<IME403
            IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
              // save new occurance
              tempCostComp."Document Type" := -1;
              tempCostComp."Document No." := "Cost Component";
              tempCostComp."Line No." := 0;
              tempCostComp.INIT;
              tempCostComp.INSERT;
            END;
            //Total of the hour accounting lines (Field: Amount) for the project
            //where the posting date is equal or before the prognosis date
            //Total of the hour accounting lines (Field: Total line) for the project
            //where the posting date is equal or before the prognosis date
            //IF "Posting Date" <= PrevPrognosis."Prognosis Date" THEN BEGIN
      //>>IME155
            CALCFIELDS("Component Type");
            //IF "Posting Date" <= Prognosis."Prognosis Date" THEN BEGIN
            IF ("Posting Date" <= Prognosis."Prognosis Date") AND ("Component Type"<>"Component Type"::"Expense hours") AND ("Component Type"<>"Component Type"::Addition) THEN BEGIN
      //<<IME155
              //TotOpenAmtHours += Amount;
              //TotOpenHours += "Total Line";
              tempCostComp."Net Weight" += HourAccLine.Amount;
      //>>ENH-011
              IF lCostComponent.GET("Cost Component") THEN
                IF lCostComponent."Cost Type" = lCostComponent."Cost Type"::Labor THEN
      //<<ENH-011
              tempCostComp."Qty. to Invoice" += "Total Line";
              tempCostComp.MODIFY;
            END;
          END;
        UNTIL NEXT = 0;
      END;

      // Posted Hour Lines
      WITH PostedHourLine DO BEGIN
        RESET;
        SETCURRENTKEY("Project No.");
        //>> 190131 ORANGO.SB RFC-226
        //SETFILTER("Component Type",'<>%1',"Component Type"::"Expense hours");  //IME155
        SETFILTER("Component Type",'<>%1&<>%2',"Component Type"::"Expense hours","Component Type"::Addition);
        //<<
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN BEGIN
        //  SETRANGE("Main Project No.",ProjRec."No.")
          SubProject.RESET;
          SubProject.SETRANGE("Main Project",ProjRec."No.");
      //>>IME403
          IF NOT includeFinishedJobs THEN BEGIN
            SubProject.SETRANGE("Project Status" ,0, SubProject."Project Status"::"Administrative Finished");
          END;
      //<<IME403
          IF SubProject.FINDSET THEN REPEAT
            // duplicate code as below
            SETRANGE("Project No.",SubProject."No.");
            SETFILTER("Cost Component",'<>%1','');
            IF FINDSET THEN REPEAT
      //>>IME403
              lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
              //IF "Cost Component" <> '' THEN BEGIN
              IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN BEGIN
      //<<IME403
                IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
                  // save new occurance
                  tempCostComp."Document Type" := -1;
                  tempCostComp."Document No." := "Cost Component";
                  tempCostComp."Line No." := 0;
                  tempCostComp.INIT;
                  tempCostComp."Quantity Invoiced" := Amount;
                  IF HumanResourcesSetup."Surcharge Overtime excl." THEN  //IME448
      //>>4PS-001
                  tempCostComp."Gross Weight" := PostedHourLine."Surcharge Overtime" + PostedHourLine."Precalc. Surcharge Expenses";
      //<<4PS-001

                  tempCostComp.INSERT;
                END ELSE BEGIN
                  tempCostComp."Quantity Invoiced" += Amount;
                  IF HumanResourcesSetup."Surcharge Overtime excl." THEN  //IME448
      //>>4PS-001
                  tempCostComp."Gross Weight" += PostedHourLine."Surcharge Overtime" + PostedHourLine."Precalc. Surcharge Expenses";
      //<<4PS-001
                  tempCostComp.MODIFY;
                END;
              END;
            UNTIL NEXT = 0;
          UNTIL SubProject.NEXT = 0;
        END ELSE BEGIN
          // duplicate code as above
          SETRANGE("Project No.",ProjRec."No.");
          SETFILTER("Cost Component",'<>%1','');
          IF FINDSET THEN REPEAT
      //>>IME403
            lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
            //IF "Cost Component" <> '' THEN BEGIN
            IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN BEGIN
      //<<IME403
              IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
                // save new occurance
                tempCostComp."Document Type" := -1;
                tempCostComp."Document No." := "Cost Component";
                tempCostComp."Line No." := 0;
                tempCostComp.INIT;
                tempCostComp."Quantity Invoiced" := Amount;
                tempCostComp.INSERT;
              END ELSE BEGIN
                tempCostComp."Quantity Invoiced" += Amount;
                tempCostComp.MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      // Prognosis Lines (cost component)
      //IF Prognosis."Prognosis Date" <> PrevPrognosis."Prognosis Date" THEN
      WITH PrognosisLine DO BEGIN
        RESET;
        SETCURRENTKEY("Project No.");
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          SETRANGE("Project No.",ProjRec."No.");
        //SETRANGE("Prognosis Date",PrevPrognosis."Prognosis Date");
        SETRANGE("Prognosis Date",Prognosis."Prognosis Date");
        SETFILTER("Cost Component Code",'<>%1','');
        IF FINDSET THEN REPEAT
      //>>IME403
          lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
          //IF "Cost Component Code" <> '' THEN BEGIN
          IF lJobProjectStatusOK AND ("Cost Component Code" <> '') THEN BEGIN
      //<<IME403
            IF NOT tempCostComp.GET(-1,"Cost Component Code",0) THEN BEGIN
              // save new occurance
              tempCostComp."Document Type" := -1;
              tempCostComp."Document No." := "Cost Component Code";
              tempCostComp."Line No." := 0;
              tempCostComp.INIT;
              //tempCostComp.Description := FORMAT(Amount);
              tempCostComp."Qty. to Ship (Base)" := "Prognosis Costs";
              tempCostComp.INSERT;
            END ELSE BEGIN
              //EVALUATE(_dec,tempCostComp.Description);
              //tempCostComp.Description := FORMAT(Amount +_dec);
              tempCostComp."Qty. to Ship (Base)" += "Prognosis Costs";
              tempCostComp.MODIFY;
            END;
          END;
        UNTIL NEXT = 0;
      END;

      // Purchase Order Control Lines
      WITH PurchOrderCtrlLine DO BEGIN
        RESET;
        SETCURRENTKEY("Project No.");
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          SETRANGE("Project No.",ProjRec."No.");
        SETFILTER("Cost Component",'<>%1','');
        SETRANGE(Date,0D,Prognosis."Prognosis Date");
        IF FINDSET THEN REPEAT
      //>>IME403
          lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
          //IF "Cost Component" <> '' THEN BEGIN
          IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN BEGIN
      //<<IME403
            IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
              // save new occurance
              tempCostComp."Document Type" := -1;
              tempCostComp."Document No." := "Cost Component";
              tempCostComp."Line No." := 0;
              tempCostComp.INIT;
              tempCostComp.INSERT;
            END;
            //Total of the Purchase order control lines with the date equal or before the prognosis date
            //IF Date <= PrevPrognosis."Prognosis Date" THEN BEGIN
            IF Date <= Prognosis."Prognosis Date" THEN BEGIN
              tempCostComp."Line Discount Amount" += "Outstanding Amount"
                //+"Overhead Surcharge Soft"
                //+"Overhead Surcharge Firm"
                +"Amt. Rcd. Not Invoiced";
      //>>4PS-001
              tempCostComp."Line Amount" += "Overhead Surcharge Soft" + "Overhead Surcharge Firm";
      //<<4PS-001
              tempCostComp.MODIFY;
            END;
          END;
        UNTIL NEXT = 0;
      END;

      // Sales Lines (collect any other component)
      WITH SalesLine DO BEGIN
        RESET;
        SETCURRENTKEY("Document Type","Job No.");
        SETFILTER("Cost Component",'<>%1','');
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN BEGIN
        //  SETRANGE("Main Project No.",ProjRec."No.")
          SubProject.RESET;
          SubProject.SETRANGE("Main Project",ProjRec."No.");
            IF NOT includeFinishedJobs THEN BEGIN
              SubProject.SETRANGE("Project Status",0,SubProject."Project Status"::"Administrative Finished");
            END;
          IF SubProject.FINDSET THEN REPEAT
            // duplicate code as below
            SETRANGE("Job No.",SubProject."No.");
            IF FINDSET THEN REPEAT
              lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Job No.");
              IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN BEGIN
                IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
                  // save new occurance
                  tempCostComp."Document Type" := -1;
                  tempCostComp."Document No." := "Cost Component";
                  tempCostComp."Line No." := 0;
                  tempCostComp.INIT;
                  tempCostComp.INSERT;
                END;
              END;
            UNTIL NEXT = 0;
          UNTIL SubProject.NEXT = 0;
        END ELSE BEGIN
          // duplicate code as above
          SETRANGE("Job No.",ProjRec."No.");
          IF FINDSET THEN REPEAT
            lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Job No.");
            IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN BEGIN
              IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
                // save new occurance
                tempCostComp."Document Type" := -1;
                tempCostComp."Document No." := "Cost Component";
                tempCostComp."Line No." := 0;
                tempCostComp.INIT;
                tempCostComp.INSERT;
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      // Project Installment (collect any other component)
      WITH ProjectInstallment DO BEGIN
        RESET;
        SETCURRENTKEY("Project No.");
        SETFILTER("Cost Component",'<>%1','');
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN BEGIN
        //  SETRANGE("Main Project No.",ProjRec."No.")
          SubProject.RESET;
          SubProject.SETRANGE("Main Project",ProjRec."No.");
          IF SubProject.FINDSET THEN REPEAT
            // duplicate code as below
            SETRANGE("Project No.",SubProject."No.");
            IF FINDSET THEN REPEAT
              lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
              IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN
                IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
                  // save new occurance
                  tempCostComp."Document Type" := -1;
                  tempCostComp."Document No." := "Cost Component";
                  tempCostComp."Line No." := 0;
                  tempCostComp.INIT;
                  tempCostComp.INSERT;
                END;
            UNTIL NEXT = 0;
          UNTIL SubProject.NEXT = 0;
        END ELSE BEGIN
          // duplicate code as above
          SETRANGE("Project No.",ProjRec."No.");
          IF FINDSET THEN REPEAT
            lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
            IF lJobProjectStatusOK AND ("Cost Component" <> '') THEN
              IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
                // save new occurance
                tempCostComp."Document Type" := -1;
                tempCostComp."Document No." := "Cost Component";
                tempCostComp."Line No." := 0;
                tempCostComp.INIT;
                tempCostComp.INSERT;
              END;
          UNTIL NEXT = 0;
        END;
      END;

      //  { ** LAHE: will have other then Revenue cost objects but treated based on Principal cost object
      GLSetup.GET;
      // Project Cost Plus Entry (collect any other component)
      WITH ProjCostPlusEntry DO BEGIN
        RESET;
        SETCURRENTKEY("Project No.");
        SETRANGE("Project No.",ProjRec."No.");
        SETFILTER("Cost Component",'<>%1','');
        SETRANGE("Entry No. Project Ledger", 0);
        SETRANGE(Invoiced,FALSE);
        IF FINDSET THEN REPEAT
          lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
          IF lJobProjectStatusOK THEN BEGIN
            IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
              // save new occurance
              tempCostComp."Document Type" := -1;
              tempCostComp."Document No." := "Cost Component";
              tempCostComp."Line No." := 0;
              tempCostComp.INIT;
              tempCostComp.INSERT;
            END;

            IF ProjPrincipal.GET("Project No.",Principal) THEN
              IF DimVal.GET(GLSetup."Global Dimension 2 Code",ProjPrincipal."Cost Object") THEN
                IF NOT tempCostComp.GET(-1,DimVal."Cost Component",0) THEN BEGIN
                  // save new occurance
                  tempCostComp."Document Type" := -1;
                  tempCostComp."Document No." := DimVal."Cost Component";
                  tempCostComp."Line No." := 0;
                  tempCostComp.INIT;
                  tempCostComp.INSERT;
                END;
          END;
        UNTIL NEXT = 0;
      END;

      WITH HourAccountingLine DO BEGIN
        RESET;
        SETCURRENTKEY("Project No.");
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          SETRANGE("Project No.",ProjRec."No.");
        SETFILTER("Cost Component",'',' save new occurance');
        SETRANGE("Posting Date",0D,Prognosis."Prognosis Date");
        //>> 190131 ORANGO.SB RFC-226
        //SETFILTER(HourAccountingLine."Component Type",'<>%1',HourAccountingLine."Component Type"::"Expense hours");  //IME155
        SETFILTER(HourAccountingLine."Component Type",'<>%1&<>%2',HourAccountingLine."Component Type"::"Expense hours",HourAccountingLine."Component Type"::Addition);
        //<<
        IF FINDSET THEN REPEAT
          lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Project No.");
          IF lJobProjectStatusOK THEN BEGIN
            IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
              tempCostComp."Document Type" := -1;
              tempCostComp."Document No." := "Cost Component";
              tempCostComp."Line No." := 0;
              tempCostComp.INIT;
              tempCostComp.INSERT;
            END;
            IF "Posting Date" <= Prognosis."Prognosis Date" THEN BEGIN
              tempCostComp."Unit Volume" += HourAccountingLine."Amount (LCY)";
              tempCostComp.MODIFY;
            END;
          END;
        UNTIL NEXT = 0;
      END;

      WITH ItemJournalLine DO BEGIN
        RESET;
        SETCURRENTKEY("Main Project No.");
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          SETRANGE("Job No.",ProjRec."No.");
        SETFILTER("Cost Component",'',' save new occurance');
        SETRANGE("Posting Date",0D,Prognosis."Prognosis Date");
        IF FINDSET THEN REPEAT
          lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, "Job No.");
          IF lJobProjectStatusOK THEN BEGIN
            IF NOT tempCostComp.GET(-1,"Cost Component",0) THEN BEGIN
              tempCostComp."Document Type" := -1;
              tempCostComp."Document No." := "Cost Component";
              tempCostComp."Line No." := 0;
              tempCostComp.INIT;
              tempCostComp.INSERT;
            END;
            // _revLoop for seperate non-revenue lines from renevue lines is now useless but does no harm
            IF "Posting Date" <= Prognosis."Prognosis Date" THEN BEGIN
              tempCostComp."Units per Parcel" += ItemJournalLine.Amount;
              tempCostComp.MODIFY;
            END;
          END;
        UNTIL NEXT = 0;
      END;
      //Exist("Dimension Value" WHERE (Cost Type=CONST(Revenue),Cost Component=FIELD(Cost Component Code)))

      FOR _revLoop := 1 TO 2 DO BEGIN
        IF tempCostComp.FINDSET THEN REPEAT
          // PK: Project No.,Prognosis Date,Cost Component Code
          DimVal.RESET();
          DimVal.SETRANGE("Cost Type",DimVal."Cost Type"::Revenue);
          DimVal.SETRANGE("Cost Component",tempCostComp."Document No.");
          _revenue := NOT DimVal.ISEMPTY;
          IF ((_revLoop = 1) AND NOT _revenue)
            OR ((_revLoop = 2) AND _revenue)
          THEN BEGIN
            //IF tempCostComp."Document No." <> ' LAHE 130214' THEN
            BEGIN
              // LAHE 130214
              IF NOT newPrognosisLine.GET(ProjRec."No.",PrognosisDate,tempCostComp."Document No.") THEN BEGIN // LAHE 130308
                newPrognosisLine.INIT;
                newPrognosisLine.VALIDATE("Project No.",ProjRec."No.");
                newPrognosisLine.VALIDATE("Prognosis Date",PrognosisDate);
                newPrognosisLine.VALIDATE("Cost Component Code",tempCostComp."Document No."); //>> LAHE 130528 IMSE-005
                newPrognosisLine.VALIDATE("Main Project No.",ProjRec."Main Project"); // LAHE 130708 - what to say, just dont validate..
      //>>ENH-011
                IF lCostComponent.GET(newPrognosisLine."Cost Component Code") THEN
                  newPrognosisLine."Cost Type" := lCostComponent."Cost Type"-1;
      //<<ENH-011
                newPrognosisLine.INSERT;
              END;

              //IF JobLedgEntry."Entry Type" = JobLedgEntry."Entry Type"::Sale THEN
              newPrognosisLine.CALCFIELDS(Revenue);
              IF newPrognosisLine.Revenue THEN BEGIN
                newPrognosisLine.Quantity := 0; ////SalesInvLine."Amount (LCY)";
                newPrognosisLine."Actual Revenues" := 0;
                JobLedgEntry.RESET;
                JobLedgEntry.SETCURRENTKEY("Job No.");
                IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
                  JobLedgEntry.SETRANGE("Main Project No.",ProjRec."No.")
                ELSE
                  JobLedgEntry.SETRANGE("Job No.",ProjRec."No.");
                JobLedgEntry.SETRANGE("Cost Component",tempCostComp."Document No.");
                JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
                IF JobLedgEntry.FINDSET THEN REPEAT
                  // credit lines?
                  lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, JobLedgEntry."Job No.");
                  IF lJobProjectStatusOK THEN
                    newPrognosisLine."Actual Revenues" -= JobLedgEntry."Total Price (LCY)"; //  SETRANGE("Main Project No.",ProjRec."No.")
                UNTIL JobLedgEntry.NEXT = 0; // duplicate code as below

                newPrognosisLine."Open Revenues" := 0;
                SalesLine.RESET;
                SalesLine.SETCURRENTKEY("Document Type","Job No.");
                SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice,SalesLine."Document Type"::"Credit Memo");
                SalesLine.SETRANGE("Cost Component",tempCostComp."Document No.");
                IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN BEGIN
                // remove Blanket Order etc?
                  SubProject.RESET;
                  SubProject.SETRANGE("Main Project",ProjRec."No.");
                  IF NOT includeFinishedJobs THEN
                    SubProject.SETRANGE("Project Status",0,SubProject."Project Status"::"Administrative Finished");
                  IF SubProject.FINDSET THEN REPEAT
                    // duplicate code as above
                    SalesLine.SETRANGE("Job No.",SubProject."No.");
                    IF SalesLine.FINDSET THEN REPEAT
                      IF SalesLine."Document Type" IN
                        [SalesLine."Document Type"::"Credit Memo",SalesLine."Document Type"::"Return Order"]
                      THEN
                        newPrognosisLine."Open Revenues" -= SalesLine."Amount (LCY)"
                      ELSE
                        newPrognosisLine."Open Revenues" += SalesLine."Amount (LCY)";
                      // remove Blanket Order etc?
                    UNTIL SalesLine.NEXT = 0;
                  UNTIL SubProject.NEXT = 0;
                END ELSE BEGIN
                  SalesLine.SETRANGE("Job No.",ProjRec."No.");
                  IF SalesLine.FINDSET THEN REPEAT
                    lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, SalesLine."Job No.");
                    IF lJobProjectStatusOK THEN
                      IF SalesLine."Document Type" IN
                        [SalesLine."Document Type"::"Credit Memo",SalesLine."Document Type"::"Return Order"]
                      THEN
                        newPrognosisLine."Open Revenues" -= SalesLine."Amount (LCY)"
                      ELSE
                        newPrognosisLine."Open Revenues" += SalesLine."Amount (LCY)";
                      // duplicate code as below
                  UNTIL SalesLine.NEXT = 0;
                END;

                newPrognosisLine."Expected Revenues Installments" := 0;
                ProjectInstallment.RESET;
                ProjectInstallment.SETCURRENTKEY("Project No.");
                IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN BEGIN
                //MAHA *** 4PS-015 blocked*** <<
                  SubProject.RESET;
                  SubProject.SETRANGE("Main Project",ProjRec."No.");
                  IF NOT includeFinishedJobs THEN
                    SubProject.SETRANGE("Project Status",0,SubProject."Project Status"::"Administrative Finished");
                  IF SubProject.FINDSET THEN REPEAT
                    ProjectInstallment.SETRANGE("Project No.",SubProject."No.");
                    // >>
                    // value removed when invoicing begins or check flowfield "Invoice in Process (LCY)" etc?
                    // duplicate code as above
                    IF ProjectInstallment.FINDSET THEN REPEAT
                      newPrognosisLine."Expected Revenues Installments" += ProjectInstallment."Invoice Price (LCY)";
                    UNTIL ProjectInstallment.NEXT = 0;
                  UNTIL SubProject.NEXT = 0;
                END ELSE BEGIN
                  ProjectInstallment.SETRANGE("Project No.",ProjRec."No.");
                  // value removed when invoicing begins or check flowfield "Invoice in Process (LCY)" etc?
                  // In case of expected revenue for costplus entries, the cost object should be selected from the project principal card
                  IF ProjectInstallment.FINDSET THEN REPEAT
                    lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, ProjectInstallment."Project No.");
                    IF lJobProjectStatusOK THEN
                      //use the cost componeent which is related to this cost object, instead of using the cost object from the costplus entry.
                      newPrognosisLine."Expected Revenues Installments" += ProjectInstallment."Invoice Price (LCY)";
                  UNTIL ProjectInstallment.NEXT = 0;
                END;

                GLSetup.GET;
                GLSetup.TESTFIELD("Global Dimension 2 Code");
                newPrognosisLine."Expected Revenues Cost Plus" := 0;
                ProjCostPlusEntry.RESET;
                //IF Prinicipal.Cost Object = Revenue Style then collect all cost plus for this project
                ProjCostPlusEntry.SETCURRENTKEY("Project No.");
      // duplicate code as below
                ProjCostPlusEntry.SETRANGE(Invoiced,FALSE);
      // duplicate code as above
                IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN BEGIN
                  SubProject.RESET;
                  SubProject.SETRANGE("Main Project",ProjRec."No.");
                  IF NOT includeFinishedJobs THEN
                    SubProject.SETRANGE("Project Status",0,SubProject."Project Status"::"Administrative Finished");
                  IF SubProject.FINDSET THEN REPEAT
                    //newPrognosisLine."Total Revenues"
                    ProjCostPlusEntry.SETRANGE("Project No.",SubProject."No.");
                    IF ProjCostPlusEntry.FINDSET THEN REPEAT
                      IF ProjPrincipal.GET(ProjCostPlusEntry."Project No.",ProjCostPlusEntry.Principal) THEN
                        IF DimVal.GET(GLSetup."Global Dimension 2 Code",ProjPrincipal."Cost Object") THEN
                          IF DimVal."Cost Type" = DimVal."Cost Type"::Revenue THEN
                            newPrognosisLine."Expected Revenues Cost Plus" += ProjCostPlusEntry."Sales Amount (LCY)"
                    UNTIL ProjCostPlusEntry.NEXT = 0;
                  UNTIL SubProject.NEXT = 0;
                END ELSE BEGIN
                  //<<Call 4PS-001
                  ProjCostPlusEntry.SETRANGE("Project No.",ProjRec."No.");
                  IF ProjCostPlusEntry.FINDSET THEN REPEAT
                    lJobProjectStatusOK := JobProjectStatusCheck(lJobProjectStatus, includeFinishedJobs, ProjCostPlusEntry."Project No.");
                      IF  lJobProjectStatus."No." <> ProjCostPlusEntry."Project No." THEN
                    IF lJobProjectStatusOK THEN
                      IF ProjPrincipal.GET(ProjCostPlusEntry."Project No.",ProjCostPlusEntry.Principal) THEN
                        IF DimVal.GET(GLSetup."Global Dimension 2 Code",ProjPrincipal."Cost Object") THEN
                          IF DimVal."Cost Type" = DimVal."Cost Type"::Revenue THEN
                            newPrognosisLine."Expected Revenues Cost Plus" += ProjCostPlusEntry."Sales Amount (LCY)"
                  UNTIL ProjCostPlusEntry.NEXT = 0;
                END;

                IF FillPrognosisExpectedRevenue THEN
                  newPrognosisLine."Prognosis Amount Revenue" := newPrognosisLine."Expected Revenues Installments"
                    +newPrognosisLine."Expected Revenues Cost Plus";

                newPrognosisLine."Total Revenues" :=
                  newPrognosisLine."Actual Revenues"
                  +newPrognosisLine."Open Revenues"
                  +newPrognosisLine."Expected Revenues Installments"
                  +newPrognosisLine."Expected Revenues Cost Plus";
                newPrognosisLine."Prognosis Total Revenues" :=
      // Manual input field
                  // NOT newPrognosisLine.Revenue
                  newPrognosisLine."Open Revenues" +
                  newPrognosisLine."Actual Revenues"
                  +newPrognosisLine."Prognosis Amount Revenue"; //TotHoursBudget);
              END ELSE BEGIN  //TotOpenAmtHours);
                newPrognosisLine.VALIDATE("Budget Amount",tempCostComp.Amount); //TotOpenHours);
                newPrognosisLine.VALIDATE("Budget Hours",tempCostComp.Quantity); //TotActualAmount);
                newPrognosisLine.VALIDATE("Open (Purchase)",tempCostComp."Line Discount Amount");
                newPrognosisLine.VALIDATE("Open Amount (Hours)",tempCostComp."Net Weight"); //TotActualHours);
                newPrognosisLine.VALIDATE("Open Hours",tempCostComp."Qty. to Invoice"); // flowfield! newPrognosisLine.VALIDATE("Previous Prognosis",tempCostComp."Payments (LCY)");
                newPrognosisLine.VALIDATE("Actual Costs",tempCostComp."Outstanding Amount"); //>> LAHE 130214
                newPrognosisLine.VALIDATE("Actual Hours",tempCostComp."Qty. Invoiced (Base)"); //>>4PS-001

                newPrognosisLine.VALIDATE("Total Cost",tempCostComp."Line Discount Amount"
                                                        +tempCostComp."Net Weight" +tempCostComp."Outstanding Amount");
                newPrognosisLine.VALIDATE("Total Hours",tempCostComp."Qty. to Invoice" +tempCostComp."Qty. Invoiced (Base)");

                newPrognosisLine.VALIDATE(Available,newPrognosisLine."Budget Amount" -newPrognosisLine."Total Cost");
                newPrognosisLine.VALIDATE("Available Hours",newPrognosisLine."Budget Hours" -newPrognosisLine."Total Hours");
                //newPrognosisLine."Prognosis Total Cost" := newPrognosisLine."Total Cost" +newPrognosisLine."Prognosis Costs";
                newPrognosisLine."Prognosis Total Cost" := newPrognosisLine."Total Cost" +newPrognosisLine."Prognosis Costs" + newPrognosisLine."Overhead Surch. Progn. Costs" + newPrognosisLine."Ovh. Surcharge";
      // if minus then zero
                newPrognosisLine."Prognosis Total Hours" := newPrognosisLine."Total Hours" +newPrognosisLine."Prognosis Hours";
                newPrognosisLine."Prognosis End Result" := newPrognosisLine."Budget Amount" -newPrognosisLine."Prognosis Total Cost";
                newPrognosisLine."Open Ovh. Surch. (Purchase)" := tempCostComp."Line Amount";
                newPrognosisLine."Open Ovh. Surch. (Hours)" := tempCostComp."Gross Weight";
                newPrognosisLine."Open Amount (Hours)" := tempCostComp."Unit Volume";
                newPrognosisLine."Open (Inventory)" := tempCostComp."Units per Parcel";

                newPrognosisLine.Quantity := 1;
                newPrognosisLine.Price := newPrognosisLine.Available;
                newPrognosisLine.VALIDATE("Prognosis Costs",newPrognosisLine.Quantity *newPrognosisLine.Price);
                newPrognosisLine.VALIDATE("Rate Code");

                newPrognosisLine."Prognosis Hours" := 0;
                IF (newPrognosisLine."Cost Type" = newPrognosisLine."Cost Type"::Labor) AND
                    (newPrognosisLine."Actual Hours"<>0) AND (newPrognosisLine."Actual Costs"<>0) THEN
                  newPrognosisLine.VALIDATE("Prognosis Hours",
                    newPrognosisLine."Prognosis Costs"/(newPrognosisLine."Actual Costs"/newPrognosisLine."Actual Hours"));

                IF newPrognosisLine."Prognosis Hours" < 0 THEN
                  newPrognosisLine.VALIDATE("Prognosis Hours",0);
                IF newPrognosisLine."Prognosis Costs" < 0 THEN
                  newPrognosisLine.VALIDATE("Prognosis Costs",0);
      //Budget: Total amount in the budget lines of the project with the version date equal or before the prognosis date.
              END;
              //Budget Hours: Total hours in the budget lines of the project with the version date equal or before the prognosis date.
              newPrognosisLine."Prognosis Total Hours" := newPrognosisLine."Total Hours" +newPrognosisLine."Prognosis Hours";
              IF lCostComponent.GET(newPrognosisLine."Cost Component Code") THEN
                newPrognosisLine."Cost Type" := lCostComponent."Cost Type"-1;
              newPrognosisLine.MODIFY;
            END;
          END;
        UNTIL tempCostComp.NEXT = 0;
      END;

      {Open purchase: Total of the Purchase order control lines with the date equal or before the prognosis date of the following fields:
      "Outstanding amount
      "Overhead surcharge soft commitments
      "Amount Rcd. Not invoiced
      "Overhead surcharge firm commitments
      Open Amount hours: Total of the hour accounting lines (Field: Amount) for the project where the posting date is equal or before th
      Open hours: Total of the hour accounting lines (Field: Total line) for the project where the posting date is equal or before the p
      Actual: Total of the project ledger entries for the project with a posting date equal or before the prognosis date (Field: Total p
      Actual hours: Total of the project ledger entries for the project with a posting date equal or before the prognosis date and cost
      Total cost: Open purchase + Open amount hours + Actual
      Total hours: Open hours + Actual hours
      Available: Budget -/- Total cost
      Available hours: Budget hours -/- total hours
      Previous prognosis: Amount from the previous prognosis for this project for this combination of element and cost component
      ***
      }

      IF CopyPrevCostPrognosis THEN
        CopyPrevPrognosisCC(Prognosis,FALSE);
      IF CopyPrevPrognosisEndResult THEN
        CopyPrevPrognosisCC(Prognosis,TRUE);
      IF FillProgWithAvailableCost THEN
        FillPrognosisWithAvailableCC(Prognosis);

      IF CopyPrevRevenuePrognosis2 THEN
        CopyPrevPrognosisRevenueCC(Prognosis);
      IF CopyPrevPrognosisEndResRevenue THEN
        CopyPrevPrognosisEndResRevCC(Prognosis);

      CalcPrognosisSurchargesCC(newPrognosisLine);
      CalcHoursSurchargesCC(newPrognosisLine);
      CalcPurchSurchargesCC(newPrognosisLine);
      CopyPrevPrognosisTotalProductionHours(Prognosis); //180524 RFC1049
    END;

    PROCEDURE CopyPrevPrognosisCC@1100290001(IPrognosisHeader@1100525004 : Record 11012034;ICopyEndResult@1210190000 : Boolean);
    VAR
      PrevPrognosis@1100285000 : Record 11012034;
      newPrognEndRes@1100285001 : Decimal;
      lvType@1100285006 : Code[20];
      TEMPlPrognLineRec2@1100285005 : TEMPORARY Record 11128270;
      TEMPlPrognLineRec3@1100285010 : TEMPORARY Record 11128270;
      DimValRec@1100285003 : Record 349;
      DimMgt@1100285002 : Codeunit 408;
      SurchargeRec@1100285007 : Record 11020208;
      SurchDimValRec@1100285004 : Record 349;
      lvTotSurchAmount@1100285008 : Decimal;
      lvTotSurchPct@1100285009 : Decimal;
      CostComponent@1100285011 : Record 11012012;
    BEGIN
      PrevPrognosis.RESET;
      PrevPrognosis.SETRANGE("Project No.",IPrognosisHeader."Project No.");
      PrevPrognosis.SETRANGE("Prognosis Date",0D,IPrognosisHeader."Prognosis Date" -1);
      IF NOT PrevPrognosis.FINDLAST THEN
        EXIT;

      TEMPlPrognLineRec3.RESET;
      TEMPlPrognLineRec3.DELETEALL;
      DimMgt.GetDimValueRec(1, ProjRec."Global Dimension 1 Code", DimValRec, FALSE, ProjRec."No.");

      //For each line of the prognosis the fields will be filled with the value of the previous prognosis of the project.
      WITH PrognosisLine DO BEGIN
        RESET;
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          SETRANGE("Project No.",PrevPrognosis."Project No.");
        SETRANGE("Prognosis Date",PrevPrognosis."Prognosis Date");
        IF FINDSET THEN
        REPEAT
          IF newPrognosisLine.GET("Project No.",IPrognosisHeader."Prognosis Date","Cost Component Code") THEN BEGIN

            newPrognosisLine.VALIDATE(Price, Price);
            newPrognosisLine.VALIDATE(Quantity, Quantity);
            newPrognosisLine."Prognosis Hours" := "Prognosis Hours";
            newPrognosisLine."Unit of Measure" := "Unit of Measure";
            newPrognosisLine.VALIDATE("Prognosis Costs", (newPrognosisLine.Quantity *newPrognosisLine.Price)
              +(newPrognosisLine."Prognosis Hours" *newPrognosisLine.Rate));
      //>>IME066
            IF NOT CostComponent.GET("Cost Component Code") THEN
              CostComponent.INIT;
            IF CostComponent."Used for surcharge" AND (newPrognosisLine."Prognosis Costs" <> 0) THEN
              newPrognosisLine.VALIDATE("Prognosis Costs",0);
      //<<IME066

            IF newPrognosisLine.Quantity <>0 THEN
              newPrognosisLine.Price := newPrognosisLine."Prognosis Costs" / newPrognosisLine.Quantity;

      //>>IME065
            //newPrognosisLine."Prognosis Total Revenues" := "Prognosis Total Revenues"; //4PSSE131002
      //<<IME065

            IF NOT ICopyEndResult THEN
              newPrognosisLine."Rate Code" := "Rate Code"
            ELSE BEGIN
              //?newPrognosisLine."Actual Hours"
              //?newPrognosisLine."Actual Costs"
      //>>ENH-011
      //>>4PS-043
              //newPrognosisLine.VALIDATE("Prognosis Hours",0);
              newPrognosisLine."Prognosis Hours" := 0;
      //<<4PS-043
              IF (newPrognosisLine."Cost Type" = newPrognosisLine."Cost Type"::Labor) AND
                  (newPrognosisLine."Actual Hours"<>0) AND (newPrognosisLine."Actual Costs"<>0) THEN
                newPrognosisLine.VALIDATE("Prognosis Hours",
                  newPrognosisLine."Prognosis Costs"/(newPrognosisLine."Actual Costs"/newPrognosisLine."Actual Hours"));
      //<<ENH-011
            END;
            newPrognosisLine.Rate := Rate;
            newPrognosisLine.Comment := Comment;

            //newPrognosisLine.CheckSurchargesCalculated;
            newPrognosisLine.CalculateAmount;

            IF ICopyEndResult THEN
              IF PrognosisLine."Prognosis End Result" <> newPrognosisLine."Prognosis End Result" THEN BEGIN

                //get "Overhead Surch. Progn. Costs"  from "Prognosis Costs"
                TEMPlPrognLineRec2 := newPrognosisLine;
                lvTotSurchAmount := 0;
                lvType := ProjRec."Project Type";
                IF newPrognosisLine."Overhead Surch. Progn. Costs" <> 0 THEN BEGIN
                  IF SurchargeRec.GetSurcharges(0, lvType, newPrognosisLine."Project No.",
                                                (DimValRec."Cost Type" <> DimValRec."Cost Type"::Revenue),
                                                DimValRec."Cost Type", DimValRec.Code, '',
                                                ProjRec."Global Dimension 1 Code", '',      //M21761
                                                newPrognosisLine."Cost Component Code", newPrognosisLine."Prognosis Date",
                                                SurchargeRec) THEN
                  BEGIN
                    REPEAT
                      SurchargeRec.GetSurchargeDimVal(DimValRec, SurchDimValRec);
                      InitPrognosisSurcharge(TEMPlPrognLineRec2,
                                TEMPlPrognLineRec2."Prognosis Costs",
                                TEMPlPrognLineRec2."Overhead Surch. Progn. Costs",
                                DimValRec, SurchDimValRec, SurchargeRec, '', lvType, lvTotSurchAmount, '');

                    UNTIL SurchargeRec.NEXT = 0;
                  END;
                  IF TEMPlPrognLineRec2."Prognosis Costs" <> 0 THEN
                    lvTotSurchPct :=
                                lvTotSurchAmount / TEMPlPrognLineRec2."Prognosis Costs";

                  newPrognosisLine.Comment := FORMAT(lvTotSurchPct) + ' ' + FORMAT(TEMPlPrognLineRec2."Overhead Surch. Progn. Costs");
                END
                ELSE BEGIN
                  IF SurchargeRec.GetSurcharges(0, lvType, newPrognosisLine."Project No.",
                                                (DimValRec."Cost Type" <> DimValRec."Cost Type"::Revenue),
                                                DimValRec."Cost Type", DimValRec.Code, '',
                                                ProjRec."Global Dimension 1 Code", '',      //M21761
                                                newPrognosisLine."Cost Component Code", newPrognosisLine."Prognosis Date",
                                                SurchargeRec) THEN
                  BEGIN
                    REPEAT
                      SurchargeRec.GetSurchargeDimVal(DimValRec, SurchDimValRec);
                      IF newPrognosisLine."Cost Component Code" <> SurchDimValRec."Cost Component" THEN BEGIN
                        TEMPlPrognLineRec3.INIT;
                        TEMPlPrognLineRec3."Project No." := newPrognosisLine."Project No.";
                        TEMPlPrognLineRec3."Prognosis Date" := newPrognosisLine."Prognosis Date";
                        TEMPlPrognLineRec3."Cost Component Code" := SurchDimValRec."Cost Component";
                        IF TEMPlPrognLineRec3.INSERT THEN;
                      END;
                    UNTIL SurchargeRec.NEXT = 0;
                  END;
                END;
                //newPrognosisLine.CalculateAmount;
                newPrognosisLine.VALIDATE("Prognosis Costs",
                  newPrognosisLine."Prognosis Costs" + (newPrognosisLine."Prognosis End Result" - PrognosisLine."Prognosis End Result"));
      //>>IME066
                IF CostComponent."Used for surcharge" AND (newPrognosisLine."Prognosis Costs" <> 0) THEN
                  newPrognosisLine.VALIDATE("Prognosis Costs",0);
      //<<IME066
                IF newPrognosisLine.Quantity <>0 THEN
                  newPrognosisLine.Price := newPrognosisLine."Prognosis Costs" / newPrognosisLine.Quantity;
                //recalc of surchagelines


      //>>IME066
                //CalcPrognosisSurchargesCC(newPrognosisLine);
                newPrognosisLine.MODIFY;
                CalcPrognosisSurchargesCC(newPrognosisLine);
                newPrognosisLine.GET("Project No.",IPrognosisHeader."Prognosis Date","Cost Component Code");
      //<<IME066
              END;

            newPrognosisLine.MODIFY;
          END;
        UNTIL NEXT = 0;
      END;


      //4PSSE131002
      IF TEMPlPrognLineRec3.FINDSET THEN
      REPEAT
        WITH PrognosisLine DO BEGIN
          RESET;
          IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
            SETRANGE("Main Project No.",ProjRec."No.")
          ELSE
            SETRANGE("Project No.",PrevPrognosis."Project No.");
          SETRANGE("Prognosis Date",PrevPrognosis."Prognosis Date");
          SETRANGE("Cost Component Code", TEMPlPrognLineRec3."Cost Component Code");
          IF FINDSET THEN
          REPEAT
            IF newPrognosisLine.GET("Project No.",IPrognosisHeader."Prognosis Date","Cost Component Code") THEN BEGIN

              newPrognosisLine.VALIDATE(Price, Price);
              newPrognosisLine.VALIDATE(Quantity, Quantity);
              newPrognosisLine."Prognosis Hours" := "Prognosis Hours";
              newPrognosisLine."Unit of Measure" := "Unit of Measure";
              newPrognosisLine.VALIDATE("Prognosis Costs", (newPrognosisLine.Quantity *newPrognosisLine.Price)
                +(newPrognosisLine."Prognosis Hours" *newPrognosisLine.Rate));

      //>>IME066
            IF NOT CostComponent.GET("Cost Component Code") THEN
              CostComponent.INIT;
            IF CostComponent."Used for surcharge" AND (newPrognosisLine."Prognosis Costs" <> 0) THEN
              newPrognosisLine.VALIDATE("Prognosis Costs",0);
      //<<IME066
              IF newPrognosisLine.Quantity <>0 THEN
                newPrognosisLine.Price := newPrognosisLine."Prognosis Costs" / newPrognosisLine.Quantity;

      //>>IME065
              //newPrognosisLine."Prognosis Total Revenues" := "Prognosis Total Revenues"; //?newPrognosisLine."Actual Hours"
              newPrognosisLine.VALIDATE("Prognosis Amount Revenue", "Prognosis Amount Revenue");
      //<<IME065

              IF NOT ICopyEndResult THEN
                newPrognosisLine."Rate Code" := "Rate Code"
              ELSE BEGIN
                //?newPrognosisLine."Actual Costs"
                //?newPrognosisLine."Actual Costs"
      //>>ENH-011
      //>>4PS-043
                //newPrognosisLine.VALIDATE("Prognosis Hours",0);
                newPrognosisLine."Prognosis Hours" := 0;
      //<<4PS-043
                IF (newPrognosisLine."Cost Type" = newPrognosisLine."Cost Type"::Labor) AND
                    (newPrognosisLine."Actual Hours"<>0) AND (newPrognosisLine."Actual Costs"<>0) THEN
                  newPrognosisLine.VALIDATE("Prognosis Hours",
                    newPrognosisLine."Prognosis Costs"/(newPrognosisLine."Actual Costs"/newPrognosisLine."Actual Hours"));
      //<<ENH-011
              END;
              newPrognosisLine.Rate := Rate;
              newPrognosisLine.Comment := Comment;

              //newPrognosisLine.CheckSurchargesCalculated;
              newPrognosisLine.CalculateAmount;

              IF ICopyEndResult THEN
                IF PrognosisLine."Prognosis End Result" <> newPrognosisLine."Prognosis End Result" THEN BEGIN
                  newPrognosisLine.VALIDATE("Prognosis Costs",
                    newPrognosisLine."Prognosis Costs" + (newPrognosisLine."Prognosis End Result" - PrognosisLine."Prognosis End Result"));
      //>>IME066
                  IF CostComponent."Used for surcharge" AND (newPrognosisLine."Prognosis Costs" <> 0) THEN
                    newPrognosisLine.VALIDATE("Prognosis Costs",0);
      //<<IME066
                  IF newPrognosisLine.Quantity <>0 THEN
                    newPrognosisLine.Price := newPrognosisLine."Prognosis Costs" / newPrognosisLine.Quantity;
                  //newPrognosisLine.CalculateAmount;


      //>>IME066
                  //CalcPrognosisSurchargesCC(newPrognosisLine);
                  newPrognosisLine.MODIFY;
                  CalcPrognosisSurchargesCC(newPrognosisLine);
                  newPrognosisLine.GET("Project No.",IPrognosisHeader."Prognosis Date","Cost Component Code");
      //<<IME066
                END;

              newPrognosisLine.MODIFY;
            END;
          UNTIL NEXT = 0;
        END;
      UNTIL TEMPlPrognLineRec3.NEXT = 0;
    END;

    PROCEDURE FillPrognosisWithAvailableCC@1100290002(IPrognosisHeader@1100525002 : Record 11012034);
    VAR
      ProjSetup@1100525005 : Record 315;
      lPrognLineRec@11012000 : Record 11128270;
      RateRec@1100525000 : Record 11012000;
      DimValRec@1100525004 : Record 349;
      DimMgt@1100525003 : Codeunit 408;
      lvRate@1100525001 : Decimal;
      CostComponent@1100285000 : Record 11012012;
    BEGIN
      //PrevPrognosis.RESET;
      //PrevPrognosis.SETRANGE("Project No.",IPrognosisHeader."Project No.");
      //PrevPrognosis.SETRANGE("Prognosis Date",0D,IPrognosisHeader."Prognosis Date" -1);
      //IF NOT PrevPrognosis.FINDLAST THEN
      //  EXIT;

      //For each line of the prognosis the fields will be filled with the value of the previous prognosis of the project.
      WITH PrognosisLine DO BEGIN
        RESET;
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          //SETRANGE("Project No.",PrevPrognosis."Project No.");
          SETRANGE("Project No.",ProjRec."No.");
        //SETRANGE("Prognosis Date",PrevPrognosis."Prognosis Date");
        SETRANGE("Prognosis Date",IPrognosisHeader."Prognosis Date");
        IF FINDSET THEN REPEAT
          IF newPrognosisLine.GET("Project No.",IPrognosisHeader."Prognosis Date","Cost Component Code") THEN BEGIN
            newPrognosisLine.Quantity := 1;
            newPrognosisLine.Price := newPrognosisLine.Available;
            //ENH-011  newPrognosisLine.VALIDATE("Prognosis Hours",newPrognosisLine."Budget Hours" -"Prognosis Hours");
            newPrognosisLine.VALIDATE("Prognosis Costs",newPrognosisLine.Quantity *newPrognosisLine.Price);
            newPrognosisLine.VALIDATE("Unit of Measure","Unit of Measure");
            newPrognosisLine.VALIDATE("Rate Code","Rate Code");
            newPrognosisLine.VALIDATE(Rate,Rate);
      //>>ENH-011
      //>>4PS-043
            //newPrognosisLine.VALIDATE("Prognosis Hours",0);
            newPrognosisLine."Prognosis Hours" := 0;
      //<<4PS-043
            IF (newPrognosisLine."Cost Type" = newPrognosisLine."Cost Type"::Labor) AND
                (newPrognosisLine."Actual Hours"<>0) AND (newPrognosisLine."Actual Costs"<>0) THEN
              newPrognosisLine.VALIDATE("Prognosis Hours",
                newPrognosisLine."Prognosis Costs"/(newPrognosisLine."Actual Costs"/newPrognosisLine."Actual Hours"));
      //<<ENH-011

            // if minus then zero
            IF newPrognosisLine."Prognosis Hours" < 0 THEN
              newPrognosisLine.VALIDATE("Prognosis Hours",0);
            IF newPrognosisLine."Prognosis Costs" < 0 THEN
              newPrognosisLine.VALIDATE("Prognosis Costs",0);
      //>>IME066
            IF NOT CostComponent.GET("Cost Component Code") THEN
              CostComponent.INIT;
            IF CostComponent."Used for surcharge" THEN
              newPrognosisLine.VALIDATE("Prognosis Costs",0);
      //<<IME066
            newPrognosisLine.Comment := Comment;
            newPrognosisLine.MODIFY;
          END;
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CopyPrevPrognosisRevenueCC@1000000005(IPrognosisHeader@1100525004 : Record 11012034);
    VAR
      PrevPrognosis@1100285000 : Record 11012034;
    BEGIN
      PrevPrognosis.RESET;
      PrevPrognosis.SETRANGE("Project No.",IPrognosisHeader."Project No.");
      PrevPrognosis.SETRANGE("Prognosis Date",0D,IPrognosisHeader."Prognosis Date" -1);
      IF NOT PrevPrognosis.FINDLAST THEN
        EXIT;

      //This will enter the same prognosis amount in the prognosis for the revenue lines
      //as the last prognosis for the same cost component
      WITH PrognosisLine DO BEGIN
        RESET;
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          SETRANGE("Project No.",PrevPrognosis."Project No.");
        SETRANGE("Prognosis Date",PrevPrognosis."Prognosis Date");
        IF FINDSET THEN REPEAT
          IF newPrognosisLine.GET("Project No.",IPrognosisHeader."Prognosis Date","Cost Component Code") THEN BEGIN
            newPrognosisLine.CALCFIELDS(Revenue);
            IF newPrognosisLine.Revenue THEN BEGIN
              newPrognosisLine.VALIDATE("Prognosis Amount Revenue","Prognosis Amount Revenue");
              newPrognosisLine.Comment := Comment;
              newPrognosisLine.MODIFY;
            END;
          END;
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CopyPrevPrognosisEndResRevCC@1000000004(IPrognosisHeader@1100525002 : Record 11012034);
    VAR
      ProjSetup@1100525005 : Record 315;
      lPrognLineRec@11012000 : Record 11128270;
      RateRec@1100525000 : Record 11012000;
      DimValRec@1100525004 : Record 349;
      DimMgt@1100525003 : Codeunit 408;
      lvRate@1100525001 : Decimal;
      PrevPrognosis@1100285000 : Record 11012034;
      CostComponent@1100285001 : Record 11012012;
    BEGIN
      PrevPrognosis.RESET;
      PrevPrognosis.SETRANGE("Project No.",IPrognosisHeader."Project No.");
      PrevPrognosis.SETRANGE("Prognosis Date",0D,IPrognosisHeader."Prognosis Date" -1);
      IF NOT PrevPrognosis.FINDLAST THEN
        EXIT;

      //Copy Previous Prognosis End Result Revenue
      //This will enter the prognosis amount so that the result of the line is the same as in the last prognosis .
      WITH PrognosisLine DO BEGIN
        RESET;
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          SETRANGE("Project No.",PrevPrognosis."Project No.");
        SETRANGE("Prognosis Date",PrevPrognosis."Prognosis Date");
        IF FINDSET THEN REPEAT
          IF newPrognosisLine.GET("Project No.",IPrognosisHeader."Prognosis Date","Cost Component Code") THEN BEGIN
      //>>IME066
            IF NOT CostComponent.GET("Cost Component Code") THEN
              CostComponent.INIT;
            IF CostComponent."Used for surcharge" THEN BEGIN
              newPrognosisLine.VALIDATE("Prognosis Costs",0);
              newPrognosisLine.Comment := Comment;
              newPrognosisLine.MODIFY;
            END;
      //<<IME066

            newPrognosisLine.CALCFIELDS(Revenue);
            IF newPrognosisLine.Revenue THEN BEGIN
      //>>Call 4PS-001
              //newPrognosisLine."Prognosis Amount Revenue" := "Total Revenues" -newPrognosisLine."Prognosis Total Revenues";
      //>>IME065
              //newPrognosisLine."Prognosis Amount Revenue" := "Actual Revenues" + "Open Revenues" -newPrognosisLine."Prognosis Total Revenues";
              newPrognosisLine.VALIDATE("Prognosis Amount Revenue", "Actual Revenues" + "Open Revenues" -newPrognosisLine."Prognosis Total Revenues");
      //<<IME065
      //<<Call 4PS-001
              newPrognosisLine.Comment := Comment;
              newPrognosisLine.MODIFY;
            END;
          END;
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE "---4PSSE---"@1100285001();
    BEGIN
    END;

    PROCEDURE CalcPrognosisSurchargesCC@11128001(VAR lPrognLineRec@1100285000 : Record 11128270);
    VAR
      Text001@1100285013 : TextConst 'ENU=Project %1 -  Element %2 does not exist (from surcharges);NOR=Prosjekt %1 Í Element %2 finnes ikke (fra tileggsgebyrer);SVE=Projekt %1 Í elementet %2 finns inte (fr†n till„ggsavgifter)';
      lvType@1100285001 : Code[20];
      lPrognLineRec2@1100285005 : Record 11128270;
      lPrognLineRec3@1100285002 : Record 11128270;
      DimValRec@1100285004 : Record 349;
      DimMgt@1100285003 : Codeunit 408;
    BEGIN
      //4PSSE, 4PS-001

      //>>ENH025
      //ProjRec.GET(lPrognLineRec."Project No.");
      IF NOT ProjRec.GET(lPrognLineRec."Project No.") THEN
        EXIT;
      //<<ENH025

      lvType := ProjRec."Project Type";
      lPrognLineRec."Overhead Surch. Progn. Costs" := 0;
      lPrognLineRec."Ovh. Surcharge" := 0;

      lPrognLineRec3.RESET;
      lPrognLineRec3.SETRANGE("Project No.", lPrognLineRec."Project No.");
      lPrognLineRec3.SETRANGE("Prognosis Date", lPrognLineRec."Prognosis Date");
      //lPrognLineRec3.SETFILTER("Cost Component Code",'<>%1',lPrognLineRec."Cost Component Code");
      IF NOT lPrognLineRec3.ISEMPTY THEN
        lPrognLineRec3.MODIFYALL("Overhead Surch. Progn. Costs", 0, FALSE);

      lPrognLineRec3.RESET;
      lPrognLineRec3 := lPrognLineRec;

      DimMgt.GetDimValueRec(1, ProjRec."Global Dimension 1 Code", DimValRec, FALSE, ProjRec."No.");

      CalcPrognosisSurcharge(lPrognLineRec3, DimValRec, ProjRec, lvType);


      lPrognLineRec2.RESET;
      lPrognLineRec2.SETRANGE("Project No.",ProjRec."No.");
      lPrognLineRec2.SETRANGE("Prognosis Date",lPrognLineRec."Prognosis Date");
      lPrognLineRec2.SETFILTER("Cost Component Code",'<>%1',lPrognLineRec."Cost Component Code");
      //lPrognLineRec2.SETFILTER("Prognosis Costs",'<>0');
      IF lPrognLineRec2.FINDSET THEN
      REPEAT
        CalcPrognosisSurcharge(lPrognLineRec2, DimValRec, ProjRec, lvType);
      UNTIL lPrognLineRec2.NEXT=0;
    END;

    LOCAL PROCEDURE CalcPrognosisSurcharge@1100285000(lPrognLineRec@1100285000 : Record 11128270;DimValRec@1100285005 : Record 349;ProjRec@1100285004 : Record 11072003;lvType@1100285003 : Code[20]);
    VAR
      ProjectTypeRec@1100285011 : Record 11012009;
      SurchargeRec@1100285010 : Record 11020208;
      SurchDimValRec@1100285009 : Record 349;
      lPrognLineRec2@1100285008 : Record 11128270;
      lPrognLineRec3@1100285007 : Record 11128270;
      lProjectElementRec@1100285006 : Record 11012010;
      lvOrigin@1100285002 : 'Project,Service';
      lvTotSurchAmount@1100285001 : Decimal;
    BEGIN
      //4PSSE, 4PS-001
      IF SurchargeRec.GetSurcharges(lvOrigin::Project, lvType, lPrognLineRec."Project No.",
                                    (DimValRec."Cost Type" <> DimValRec."Cost Type"::Revenue),
                                    DimValRec."Cost Type", DimValRec.Code, '',
                                    ProjRec."Global Dimension 1 Code", '',      //M21761
                                    lPrognLineRec."Cost Component Code", lPrognLineRec."Prognosis Date",
                                    SurchargeRec) THEN
      BEGIN
        lPrognLineRec."Overhead Surch. Progn. Costs" := 0;

        REPEAT
          SurchargeRec.GetSurchargeDimVal(DimValRec, SurchDimValRec);

          lPrognLineRec2 := lPrognLineRec;

          InitPrognosisSurcharge(lPrognLineRec2,
                    lPrognLineRec2."Prognosis Costs",
                    lPrognLineRec2."Overhead Surch. Progn. Costs",
                    DimValRec, SurchDimValRec, SurchargeRec, '', lvType, lvTotSurchAmount, '');

          //There is now a line filled with a cost and a surcharge.
          //The corresponding line should be looked up in the table and the
          //storage fee should be rehearsal.

            lPrognLineRec3.INIT;
            lPrognLineRec3.RESET;
            IF lPrognLineRec3.GET(lPrognLineRec2."Project No.",
                                  lPrognLineRec2."Prognosis Date",
                                  SurchDimValRec."Cost Component") THEN
            BEGIN
              lPrognLineRec3."Overhead Surch. Progn. Costs" := lPrognLineRec3."Overhead Surch. Progn. Costs" + lPrognLineRec2."Overhead Surch. Progn. Costs";
              lPrognLineRec3.VALIDATE("Prognosis Date", lPrognLineRec2."Prognosis Date");
              lPrognLineRec3.CalculatePrognosisFields;
              lPrognLineRec3.VALIDATE("Prognosis Total Cost");
              lPrognLineRec3.MODIFY;
            END ELSE BEGIN
              IF lPrognLineRec2.Element <> '' THEN BEGIN
                IF NOT lProjectElementRec.GET(lPrognLineRec2."Project No.", lPrognLineRec2.Element) THEN
                  ERROR(STRSUBSTNO(Text001, lPrognLineRec2."Project No.", lPrognLineRec2.Element));
              END;
              lPrognLineRec3."Project No." := lPrognLineRec2."Project No.";
              lPrognLineRec3."Cost Component Code" := SurchDimValRec."Cost Component";
              lPrognLineRec3.VALIDATE("Prognosis Date", lPrognLineRec2."Prognosis Date");
              lPrognLineRec3."Cost Type" := SurchDimValRec."Cost Type";
              lPrognLineRec3."Overhead Surch. Progn. Costs" := lPrognLineRec2."Overhead Surch. Progn. Costs";
              lPrognLineRec3.CalculatePrognosisFields;
              lPrognLineRec3.VALIDATE("Prognosis Total Cost");
              lPrognLineRec3.INSERT(TRUE);   //db, 21-12-12: apply insert-trigger
            END;

        UNTIL SurchargeRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InitPrognosisSurcharge@11128003(VAR lProgLineRec@1210190002 : Record 11128270;VAR BaseAmt@1100285001 : Decimal;VAR OHSurch@1100285000 : Decimal;OrigDimRec@1210190001 : Record 349;SurchDimRec@1210190009 : Record 349;SurchargeRec@1210190004 : Record 11020208;Dim1@1210190005 : Code[20];ProjType@1210190006 : Code[20];VAR vTotSurchAmount@1100485002 : Decimal;VendorPostingGroup@1100525000 : Code[20]);
    BEGIN
      //4PSSE, 4PS-001
      IF SurchargeRec.Percentage <> 0 THEN
        IF SurchargeRec."Surcharge over Surcharge" THEN
          OHSurch := ROUND((BaseAmt + vTotSurchAmount) * SurchargeRec.Percentage/100)
        ELSE
          OHSurch := ROUND(BaseAmt * SurchargeRec.Percentage/100)
      ELSE
        OHSurch := ROUND(SurchargeRec.Amount * lProgLineRec.Quantity);

      lProgLineRec."Unit of Measure" := SurchDimRec."Unit of Measure";
      lProgLineRec."Cost Type" := SurchDimRec."Cost Type";

      IF SurchargeRec."Element Surcharge" <> '' THEN     //** CALL 19699 10-06-2010
        lProgLineRec.Element := SurchargeRec."Element Surcharge";

      vTotSurchAmount := vTotSurchAmount + OHSurch;
    END;

    PROCEDURE CalcHoursSurchargesCC@1100285002(VAR lPrognLineRec@1100285000 : Record 11128270);
    VAR
      lvType@1100285005 : Code[20];
      lPrognLineRec2@1100285004 : Record 11128270;
      lPrognLineRec3@1100285003 : Record 11128270;
      DimValRec@1100285002 : Record 349;
      DimMgt@1100285001 : Codeunit 408;
    BEGIN
      //4PSSE, 4PS-001
      //>>ENH025
      //ProjRec.GET(lPrognLineRec."Project No.");
      IF NOT ProjRec.GET(lPrognLineRec."Project No.") THEN
        EXIT;
      //<<ENH025
      lvType := ProjRec."Project Type";

      lPrognLineRec3.RESET;
      lPrognLineRec3.SETRANGE("Project No.", lPrognLineRec."Project No.");
      lPrognLineRec3.SETRANGE("Prognosis Date", lPrognLineRec."Prognosis Date");
      lPrognLineRec3.SETFILTER("Cost Component Code",'<>%1',lPrognLineRec."Cost Component Code");
      IF NOT lPrognLineRec3.ISEMPTY THEN
        lPrognLineRec3.MODIFYALL("Open Ovh. Surch. (Hours)", 0, FALSE);
      lPrognLineRec."Open Ovh. Surch. (Hours)" := 0;

      lPrognLineRec3.RESET;
      lPrognLineRec3 := lPrognLineRec;

      DimMgt.GetDimValueRec(1, ProjRec."Global Dimension 1 Code", DimValRec, FALSE, ProjRec."No.");

      CalcHoursSurchargeCC(lPrognLineRec3, DimValRec, ProjRec, lvType);

      lPrognLineRec2.RESET;
      lPrognLineRec2.SETRANGE("Project No.",ProjRec."No.");
      lPrognLineRec2.SETRANGE("Prognosis Date",lPrognLineRec."Prognosis Date");
      lPrognLineRec2.SETFILTER("Cost Component Code",'<>%1',lPrognLineRec."Cost Component Code");
      lPrognLineRec2.SETFILTER("Open Amount (Hours)",'<>0');
      IF lPrognLineRec2.FINDSET THEN
      REPEAT
        CalcHoursSurchargeCC(lPrognLineRec2, DimValRec, ProjRec, lvType);
      UNTIL lPrognLineRec2.NEXT=0;
    END;

    LOCAL PROCEDURE CalcHoursSurchargeCC@1100285011(lPrognLineRec@1100285003 : Record 11128270;DimValRec@1100285002 : Record 349;ProjRec@1100285001 : Record 11072003;lvType@1100285000 : Code[20]);
    VAR
      ProjectTypeRec@1100285011 : Record 11012009;
      SurchargeRec@1100285010 : Record 11020208;
      SurchDimValRec@1100285009 : Record 349;
      lPrognLineRec2@1100285008 : Record 11128270;
      lPrognLineRec3@1100285007 : Record 11128270;
      lProjectElementRec@1100285006 : Record 11012010;
      lvOrigin@1100285005 : 'Project,Service';
      lvTotSurchAmount@1100285004 : Decimal;
    BEGIN
      //4PSSE, 4PS-001
      IF SurchargeRec.GetSurcharges(lvOrigin::Project, lvType, lPrognLineRec."Project No.",
                                    (DimValRec."Cost Type" <> DimValRec."Cost Type"::Revenue),
                                    DimValRec."Cost Type", DimValRec.Code, '',
                                    ProjRec."Global Dimension 1 Code", '',      //M21761
                                    lPrognLineRec."Cost Component Code", lPrognLineRec."Prognosis Date",
                                    SurchargeRec) THEN
      BEGIN
        REPEAT
          SurchargeRec.GetSurchargeDimVal(DimValRec, SurchDimValRec);

          lPrognLineRec2 := lPrognLineRec;
          lPrognLineRec2."Open Ovh. Surch. (Hours)" := 0;

          InitPrognosisSurcharge(lPrognLineRec2,
                lPrognLineRec2."Open Amount (Hours)",
                lPrognLineRec2."Open Ovh. Surch. (Hours)",
                DimValRec, SurchDimValRec, SurchargeRec, '', lvType, lvTotSurchAmount, '');

          //There is now a line filled with a cost and a surcharge.
          //The corresponding line should be looked up in the table and the
          //storage fee should be rehearsal.
          IF lPrognLineRec2."Open Ovh. Surch. (Hours)" <> 0 THEN BEGIN
            lPrognLineRec3.INIT;
            lPrognLineRec3.RESET;
            IF lPrognLineRec3.GET(lPrognLineRec2."Project No.",
                                  lPrognLineRec2."Prognosis Date",
                                  SurchDimValRec."Cost Component") THEN
            BEGIN
              lPrognLineRec3."Open Ovh. Surch. (Hours)" := lPrognLineRec3."Open Ovh. Surch. (Hours)" + lPrognLineRec2."Open Ovh. Surch. (Hours)";
              lPrognLineRec3.VALIDATE("Prognosis Date", lPrognLineRec2."Prognosis Date");
              lPrognLineRec3.CalculatePrognosisFields;
              lPrognLineRec3.MODIFY;
            END ELSE BEGIN
              IF lPrognLineRec2.Element <> '' THEN BEGIN
                IF NOT lProjectElementRec.GET(lPrognLineRec2."Project No.", lPrognLineRec2.Element) THEN
                  ERROR(STRSUBSTNO(Text001, lPrognLineRec2."Project No.", lPrognLineRec2.Element));
              END;
              lPrognLineRec3."Project No." := lPrognLineRec2."Project No.";
              lPrognLineRec3."Cost Component Code" := SurchDimValRec."Cost Component";
              lPrognLineRec3.VALIDATE("Prognosis Date", lPrognLineRec2."Prognosis Date");
              lPrognLineRec3."Cost Type" := SurchDimValRec."Cost Type";
              lPrognLineRec3."Open Ovh. Surch. (Hours)" := lPrognLineRec2."Open Ovh. Surch. (Hours)";
              lPrognLineRec3.CalculatePrognosisFields;
              lPrognLineRec3.INSERT(TRUE);   //db, 21-12-12: apply insert-trigger
            END;
          END;
        UNTIL SurchargeRec.NEXT = 0;
      END;
    END;

    PROCEDURE CalcTotalPrognosisAmount@1100529603(ProjectNo@1100529611 : Code[20];PrognosisDate@1100529608 : Date;CostType@1100529600 : Integer;CostObjectFilter@1100529607 : Text;VAR OriginalBudgetLoc@1100529604 : Decimal;VAR ExtensionBudgetLoc@1100529603 : Decimal;VAR OptionBudgetLoc@1100529606 : Decimal;VAR AdjustmentBudgetLoc@1100529605 : Decimal);
    VAR
      Prognosis@1100529601 : Record 11012034;
      PrognosisLine@1100529610 : Record 11012035;
    BEGIN
      OriginalBudgetLoc := 0;
      ExtensionBudgetLoc := 0;
      OptionBudgetLoc := 0;
      AdjustmentBudgetLoc := 0;

      IF NOT Prognosis.GET(ProjectNo, PrognosisDate) THEN
        EXIT;
      IF NOT Prognosis."Select For Reporting" THEN
        EXIT;

      PrognosisLine.SETRANGE("Project No.", ProjectNo);
      PrognosisLine.SETRANGE("Prognosis Date", PrognosisDate);
      IF CostType > 0 THEN
        PrognosisLine.SETRANGE("Cost Type", CostType - 1);
      IF CostObjectFilter <> '' THEN
        PrognosisLine.SETFILTER("Cost Object", CostObjectFilter);
      IF PrognosisLine.ISEMPTY THEN
        EXIT;

      PrognosisLine.CALCSUMS("Original Budget Amount", PrognosisLine.Options, PrognosisLine.Extension, PrognosisLine.Adjustments);
      OriginalBudgetLoc := PrognosisLine."Original Budget Amount";
      ExtensionBudgetLoc := PrognosisLine.Extension;
      OptionBudgetLoc := PrognosisLine.Options;
      AdjustmentBudgetLoc := PrognosisLine.Adjustments;
    END;

    PROCEDURE CalcEstimateResultPrognosis@1100529611(ProjectNo@1100529614 : Code[20];DateFilter@1100529613 : Date;VAR CostType@1100529610 : Option;VAR CostObjectFilter@1100529602 : Text;VAR EstimateOriginalBudget@1100529606 : Decimal;VAR EstimateExtensionBudget@1100529605 : Decimal;VAR EstimateOptionsBudget@1100529604 : Decimal;VAR EstimateAdjustmentBudget@1100529603 : Decimal);
    VAR
      CostGroup@1100529600 : Record 11126038;
      ReportLinesSetup@1100529601 : Record 11126218;
    BEGIN
      CostType := 0;
      CostObjectFilter := '';

      CostGroup.SETRANGE("Estimate Result", TRUE);
      IF CostGroup.ISEMPTY THEN
        EXIT;

      CostGroup.FINDFIRST;
      CostType := 0;
      CostObjectFilter := ReportLinesSetup.GetCostObjectFilter(CostGroup.Code, CostType);
      IF CostObjectFilter = '' THEN
        EXIT;

      CalcTotalPrognosisAmount(ProjectNo, DateFilter, ReportLinesSetup."Cost Type", CostObjectFilter,
        EstimateOriginalBudget, EstimateExtensionBudget, EstimateOptionsBudget, EstimateAdjustmentBudget);
    END;

    PROCEDURE CalcPreviousPrognosisSums@1100527300(VAR PrognosisLine@1100527300 : Record 11012035;ViewPrognPerElementByCostObj@1100529600 : Boolean);
    VAR
      PrognosisLineLoc@1100527301 : Record 11012035;
      Prognosis@1100527302 : Record 11012034;
    BEGIN
      Prognosis.SETRANGE("Project No.", PrognosisLine."Project No.");
      Prognosis.SETFILTER("Prognosis Date", '<%1', PrognosisLine."Prognosis Date");
      IF Prognosis.FINDLAST THEN BEGIN
        PrognosisLineLoc.SETRANGE("Project No.", PrognosisLine."Project No.");
        PrognosisLineLoc.SETRANGE("Prognosis Date", Prognosis."Prognosis Date");
        IF ViewPrognPerElementByCostObj THEN BEGIN
          PrognosisLineLoc.SETRANGE("Cost Type", PrognosisLine."Cost Type");
          IF PrognosisLine.Level = 2 THEN
            PrognosisLineLoc.SETRANGE("Cost Object", PrognosisLine."Cost Object");
        END ELSE BEGIN
          PrognosisLineLoc.SETRANGE(Element, PrognosisLine.Element);
          IF PrognosisLine.Level = 2 THEN
            PrognosisLineLoc.SETRANGE("Cost Type", PrognosisLine."Cost Type");
          PrognosisLineLoc.SETFILTER("Cost Object", '<>%1', '');
        END;
        PrognosisLineLoc.CALCSUMS("Prognosis End Result", "Prognosis Total Cost", "Amount incl. Surcharge");

        PrognosisLine."Prev Prognosis End Result" := PrognosisLineLoc."Prognosis End Result";
        PrognosisLine."Prev Prognosis Total Cost" := PrognosisLineLoc."Prognosis Total Cost";
        PrognosisLine."Previous Prognosis" := PrognosisLineLoc."Amount incl. Surcharge";
      END;
    END;

    PROCEDURE CopyPrevPrognosisElementsTotalRev@1100527350(Prognosis@1100527350 : Record 11012034);
    VAR
      PrevPrognosis@1100527351 : Record 11012034;
      PrognosisPerElement@1100527353 : Record 11071893;
      PrevPrognosisPerElement@1100527352 : Record 11071893;
    BEGIN
      IF Prognosis."Prognosis Date" = 0D THEN
        EXIT;
      PrevPrognosis.SETRANGE("Project No.", Prognosis."Project No.");
      PrevPrognosis.SETFILTER("Prognosis Date", '<%1', Prognosis."Prognosis Date");
      IF PrevPrognosis.ISEMPTY THEN
        EXIT;
      PrognosisPerElement.SETRANGE("Project No.", Prognosis."Project No.");
      PrognosisPerElement.SETRANGE("Prognosis Date", Prognosis."Prognosis Date");
      IF PrognosisPerElement.ISEMPTY THEN
        EXIT;

      PrevPrognosis.FINDLAST;
      PrognosisPerElement.FINDSET;
      REPEAT
        IF PrevPrognosisPerElement.GET(PrevPrognosis."Project No.", PrevPrognosis."Prognosis Date", PrognosisPerElement.Element) THEN BEGIN
          PrognosisPerElement.VALIDATE("Prognosis Total Revenues", PrevPrognosisPerElement."Prognosis Total Revenues");
          PrognosisPerElement.MODIFY(TRUE);
        END;
      UNTIL PrognosisPerElement.NEXT = 0;
    END;

    PROCEDURE CalcPurchSurchargesCC@1100285003(VAR lPrognLineRec@1100285000 : Record 11128270);
    VAR
      lvType@1100285005 : Code[20];
      lPrognLineRec2@1100285004 : Record 11128270;
      lPrognLineRec3@1100285003 : Record 11128270;
      DimValRec@1100285002 : Record 349;
      DimMgt@1100285001 : Codeunit 408;
    BEGIN
      //4PSSE, 4PS-001
      //>>ENH025
      //ProjRec.GET(lPrognLineRec."Project No.");
      IF NOT ProjRec.GET(lPrognLineRec."Project No.") THEN
        EXIT;
      //<<ENH025
      lvType := ProjRec."Project Type";

      lPrognLineRec3.RESET;
      lPrognLineRec3.SETRANGE("Project No.", lPrognLineRec."Project No.");
      lPrognLineRec3.SETRANGE("Prognosis Date", lPrognLineRec."Prognosis Date");
      lPrognLineRec3.SETFILTER("Cost Component Code",'<>%1',lPrognLineRec."Cost Component Code");
      lPrognLineRec3.SETFILTER("Open Ovh. Surch. (Inventory)", '<>0');
      IF NOT lPrognLineRec3.ISEMPTY THEN
        lPrognLineRec3.MODIFYALL("Open Ovh. Surch. (Inventory)", 0, FALSE);
      lPrognLineRec."Open Ovh. Surch. (Inventory)" := 0;

      lPrognLineRec3.RESET;
      lPrognLineRec3 := lPrognLineRec;

      DimMgt.GetDimValueRec(1, ProjRec."Global Dimension 1 Code", DimValRec, FALSE, ProjRec."No.");

      CalcPurchSurchargeCC(lPrognLineRec3, DimValRec, ProjRec, lvType);


      lPrognLineRec2.RESET;
      lPrognLineRec2.SETRANGE("Project No.",ProjRec."No.");
      lPrognLineRec2.SETRANGE("Prognosis Date",lPrognLineRec."Prognosis Date");
      lPrognLineRec2.SETFILTER("Cost Component Code",'<>%1',lPrognLineRec."Cost Component Code");
      lPrognLineRec2.SETFILTER("Open (Inventory)",'<>0');
      IF lPrognLineRec2.FINDSET THEN
      REPEAT
        CalcPurchSurchargeCC(lPrognLineRec2, DimValRec, ProjRec, lvType);
      UNTIL lPrognLineRec2.NEXT=0;
    END;

    LOCAL PROCEDURE CalcPurchSurchargeCC@1100285006(lPrognLineRec@1100285003 : Record 11128270;DimValRec@1100285002 : Record 349;ProjRec@1100285001 : Record 11072003;lvType@1100285000 : Code[20]);
    VAR
      ProjectTypeRec@1100285011 : Record 11012009;
      SurchargeRec@1100285010 : Record 11020208;
      SurchDimValRec@1100285009 : Record 349;
      lPrognLineRec2@1100285008 : Record 11128270;
      lPrognLineRec3@1100285007 : Record 11128270;
      lProjectElementRec@1100285006 : Record 11012010;
      lvOrigin@1100285005 : 'Project,Service';
      lvTotSurchAmount@1100285004 : Decimal;
    BEGIN
      //4PSSE, 4PS-001
      IF SurchargeRec.GetSurcharges(lvOrigin::Project, lvType, lPrognLineRec."Project No.",
                                    (DimValRec."Cost Type" <> DimValRec."Cost Type"::Revenue),
                                    DimValRec."Cost Type", DimValRec.Code, '',
                                    ProjRec."Global Dimension 1 Code", '',      //M21761
                                    lPrognLineRec."Cost Component Code", lPrognLineRec."Prognosis Date",
                                    SurchargeRec) THEN
      BEGIN
        REPEAT
          SurchargeRec.GetSurchargeDimVal(DimValRec, SurchDimValRec);

          lPrognLineRec2 := lPrognLineRec;
          lPrognLineRec2."Open Ovh. Surch. (Inventory)" := 0;

          InitPrognosisSurcharge(lPrognLineRec2,
                lPrognLineRec2."Open (Inventory)",
                lPrognLineRec2."Open Ovh. Surch. (Inventory)",
                DimValRec, SurchDimValRec, SurchargeRec, '', lvType, lvTotSurchAmount, '');

          //There is now a line filled with a cost and a surcharge.
          //The corresponding line should be looked up in the table and the
          //storage fee should be rehearsal.
          IF lPrognLineRec2."Open Ovh. Surch. (Inventory)" <> 0 THEN BEGIN
            lPrognLineRec3.INIT;
            lPrognLineRec3.RESET;
            IF lPrognLineRec3.GET(lPrognLineRec2."Project No.",
                                  lPrognLineRec2."Prognosis Date",
                                  SurchDimValRec."Cost Component") THEN
            BEGIN
              lPrognLineRec3."Open Ovh. Surch. (Inventory)" := lPrognLineRec3."Open Ovh. Surch. (Inventory)" + lPrognLineRec2."Open Ovh. Surch. (Inventory)";
              lPrognLineRec3.VALIDATE("Prognosis Date", lPrognLineRec2."Prognosis Date");
              lPrognLineRec3.CalculatePrognosisFields;
              lPrognLineRec3.MODIFY;
            END ELSE BEGIN
              IF lPrognLineRec2.Element <> '' THEN BEGIN
                IF NOT lProjectElementRec.GET(lPrognLineRec2."Project No.", lPrognLineRec2.Element) THEN
                  ERROR(STRSUBSTNO(Text001, lPrognLineRec2."Project No.", lPrognLineRec2.Element));
              END;
              lPrognLineRec3."Project No." := lPrognLineRec2."Project No.";
              lPrognLineRec3."Cost Component Code" := SurchDimValRec."Cost Component";
              lPrognLineRec3.VALIDATE("Prognosis Date", lPrognLineRec2."Prognosis Date");
              lPrognLineRec3."Cost Type" := SurchDimValRec."Cost Type";
              lPrognLineRec3."Open Ovh. Surch. (Inventory)" := lPrognLineRec2."Open Ovh. Surch. (Inventory)";
              lPrognLineRec3.CalculatePrognosisFields;
              lPrognLineRec3.INSERT(TRUE);
            END;
          END;
        UNTIL SurchargeRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE JobProjectStatusCheck@1100285100(VAR lJobProjectStatus@1100285100 : Record 11072003;pincludeFinishedJobs@1100285101 : Boolean;pJobNo@1100285102 : Code[20]) : Boolean;
    VAR
      lJobProjectStatusOK@1100285103 : Boolean;
    BEGIN
      //IME403
      IF pincludeFinishedJobs THEN
        EXIT(TRUE);

      IF  lJobProjectStatus."No." <> pJobNo THEN
        lJobProjectStatus.GET(pJobNo);

      lJobProjectStatusOK := (lJobProjectStatus."Project Status" IN [0..lJobProjectStatus."Project Status"::"Administrative Finished"]);
      EXIT(lJobProjectStatusOK);
    END;

    PROCEDURE SetIncludeFinishedJobs@1100285101(lincludeFinishedJobs@1100285100 : Boolean);
    BEGIN
      //IME403
      includeFinishedJobs := lincludeFinishedJobs;
    END;

    PROCEDURE SetIsFromWebService@1100285102(IsFromWS@1100285100 : Boolean);
    BEGIN
      //RFC236
      IsFromWebService := IsFromWS;
    END;

    PROCEDURE CopyPrevPrognosisTotalProductionHours@1100285103(IPrognosisHeader@1100525004 : Record 11012034);
    VAR
      PrevPrognosis@1100285000 : Record 11012034;
      newPrognEndRes@1100285001 : Decimal;
      lvType@1100285006 : Code[20];
      TEMPlPrognLineRec2@1100285005 : TEMPORARY Record 11128270;
      TEMPlPrognLineRec3@1100285010 : TEMPORARY Record 11128270;
      DimValRec@1100285003 : Record 349;
      DimMgt@1100285002 : Codeunit 408;
      SurchargeRec@1100285007 : Record 11020208;
      SurchDimValRec@1100285004 : Record 349;
      lvTotSurchAmount@1100285008 : Decimal;
      lvTotSurchPct@1100285009 : Decimal;
      CostComponent@1100285011 : Record 11012012;
    BEGIN
      //180524 RFC1049
      PrevPrognosis.RESET;
      PrevPrognosis.SETRANGE("Project No.",IPrognosisHeader."Project No.");
      PrevPrognosis.SETRANGE("Prognosis Date",0D,IPrognosisHeader."Prognosis Date" -1);
      IF NOT PrevPrognosis.FINDLAST THEN
        EXIT;

      WITH PrognosisLine DO BEGIN
        RESET;
        IF ProjRec."Single/Main/Sub Project" = ProjRec."Single/Main/Sub Project"::"Main Project" THEN
          SETRANGE("Main Project No.",ProjRec."No.")
        ELSE
          SETRANGE("Project No.",PrevPrognosis."Project No.");
        SETRANGE("Prognosis Date",PrevPrognosis."Prognosis Date");
        IF FINDSET THEN
        REPEAT
          IF newPrognosisLine.GET("Project No.",IPrognosisHeader."Prognosis Date","Cost Component Code") THEN BEGIN
            newPrognosisLine."Total Production Hours" := "Total Production Hours";
            newPrognosisLine.MODIFY;
          END;
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE FillPrognRevenuesFromProjDevProducts@1100527702(Prognosis@1100527700 : Record 11012034);
    VAR
      ProjectCFPRoduct@1100527706 : Record 11012633;
      ProjectCFRubric@1100527702 : Record 11012637;
      TempPrognosisLine@1100527701 : TEMPORARY Record 11012035;
      LandCost@1100527707 : Decimal;
      ConstructionCost@1100527708 : Decimal;
    BEGIN
      Prognosis.TESTFIELD(Fixed,FALSE);
      Prognosis.TESTFIELD("Prognosis Level",Prognosis."Prognosis Level"::Detailed);

      WITH ProjectCFPRoduct DO BEGIN
        SETRANGE("Record Type","Record Type"::Project);
        SETRANGE("Project No.",Prognosis."Project No.");
        SETFILTER("Unit Price Excl. VAT",'<>%1',0);
        SETFILTER(Quantity,'<>%1',0);
        IF FINDSET THEN
          REPEAT
            LandCost := "Land Cost Excl. VAT" * Quantity;
            ConstructionCost := "Construction Cost Excl. VAT" * Quantity;

            IF LandCost <> 0 THEN BEGIN
              TESTFIELD("Rubric Land");
              ProjectCFRubric.GET("Record Type","Project No.","Cash Flow","Rubric Land","Template Code");
              SumUpTempPrognLines(Prognosis,ProjectCFRubric,TempPrognosisLine,LandCost);
            END;
            IF ConstructionCost <> 0 THEN BEGIN
              TESTFIELD("Rubric Construct");
              ProjectCFRubric.GET("Record Type","Project No.","Cash Flow","Rubric Construct","Template Code");
              SumUpTempPrognLines(Prognosis,ProjectCFRubric,TempPrognosisLine,ConstructionCost);
            END;
          UNTIL NEXT = 0;
      END;

      InsertPrognLines(TempPrognosisLine);
    END;

    PROCEDURE FillPrognRevenuesFromCashFlow@1100527700(Prognosis@1100527700 : Record 11012034);
    VAR
      ProjectCF@1100527701 : Record 11012635;
      ProjectCFRubric@1100527702 : Record 11012637;
      TempPrognosisLine@1100527706 : TEMPORARY Record 11012035;
    BEGIN
      Prognosis.TESTFIELD(Fixed,FALSE);
      Prognosis.TESTFIELD("Prognosis Level",Prognosis."Prognosis Level"::Detailed);

      ProjectCF.FILTERGROUP(10);
      ProjectCF.SETRANGE("Project No.",Prognosis."Project No.");
      ProjectCF.FILTERGROUP(0);
      CASE ProjectCF.COUNT OF
        0: ProjectCF.FINDFIRST; //shows error
        1: ProjectCF.FINDFIRST;
        ELSE BEGIN
          ProjectCF.FINDLAST;
          IF NOT (PAGE.RUNMODAL(0,ProjectCF) = ACTION::LookupOK) THEN
            EXIT;
        END;
      END;

      ProjectCFRubric.SETRANGE("Record Type",ProjectCFRubric."Record Type"::"Cash Flow");
      ProjectCFRubric.SETRANGE("Project No.",ProjectCF."Project No.");
      ProjectCFRubric.SETRANGE("Cash Flow",ProjectCF."Cash Flow");
      ProjectCFRubric.SETRANGE(Type,ProjectCFRubric.Type::Revenues);
      ProjectCFRubric.SETFILTER("Cost Object Filter",'<>%1','');
      IF ProjectCFRubric.FINDSET THEN
        REPEAT
          SumUpTempPrognLines(Prognosis,ProjectCFRubric,TempPrognosisLine,ProjectCFRubric."Prognosis Amount");
        UNTIL ProjectCFRubric.NEXT = 0;

      InsertPrognLines(TempPrognosisLine);
    END;

    LOCAL PROCEDURE SumUpTempPrognLines@1100527703(Prognosis@1100527700 : Record 11012034;ProjectCFRubric@1100527702 : Record 11012637;VAR TempPrognosisLine@1100527703 : Record 11012035;RevenueAmount@1100527701 : Decimal);
    VAR
      GLSetup@1100527706 : Record 98;
      DimensionValue@1100527704 : Record 349;
      CostObjectFilterIsACostObject@1100527705 : Boolean;
    BEGIN
      IF STRLEN(ProjectCFRubric."Cost Object Filter") > MAXSTRLEN(DimensionValue.Code) THEN
        CostObjectFilterIsACostObject := FALSE
      ELSE BEGIN
        GLSetup.GET;
        CostObjectFilterIsACostObject := DimensionValue.GET(GLSetup."Shortcut Dimension 2 Code",ProjectCFRubric."Cost Object Filter");
      END;
      IF NOT CostObjectFilterIsACostObject THEN
        EXIT;

      IF TempPrognosisLine.GET(
        Prognosis."Project No.",Prognosis."Prognosis Date",
        TempPrognosisLine."Cost Type"::Revenue,'',ProjectCFRubric."Cost Object Filter") THEN
      BEGIN
        TempPrognosisLine."Amount Revenue" += RevenueAmount;
        TempPrognosisLine.MODIFY;
      END ELSE BEGIN
        TempPrognosisLine.INIT;
        TempPrognosisLine."Project No." := Prognosis."Project No.";
        TempPrognosisLine."Prognosis Date" := Prognosis."Prognosis Date";
        TempPrognosisLine."Cost Type" := TempPrognosisLine."Cost Type"::Revenue;
        TempPrognosisLine."Cost Object" := ProjectCFRubric."Cost Object Filter";
        TempPrognosisLine."Amount Revenue" := RevenueAmount;
        TempPrognosisLine.INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertPrognLines@1100527704(VAR TempPrognosisLine@1100527700 : Record 11012035);
    VAR
      PrognosisLine@1100527701 : Record 11012035;
    BEGIN
      IF TempPrognosisLine.FINDSET THEN
        REPEAT
          PrognosisLine := TempPrognosisLine;
          IF PrognosisLine.FIND THEN BEGIN
            PrognosisLine."Amount Revenue" := TempPrognosisLine."Amount Revenue"; //Overwrite
            PrognosisLine.MODIFY;
          END ELSE
            PrognosisLine.INSERT(TRUE);
        UNTIL TempPrognosisLine.NEXT = 0;
    END;

    PROCEDURE GetActualCostsNotPurchaseOrderRelated@1100528200(VAR lPrognLineRec@1100528201 : Record 11012035;ElementLevel@1100528202 : Boolean) : Decimal;
    VAR
      JobLedgerEntry@1100528200 : Record 11072005;
    BEGIN
      WITH lPrognLineRec DO BEGIN
        JobLedgerEntry.RESET;
        IF ElementLevel THEN BEGIN
          JobLedgerEntry.SETCURRENTKEY("Main Project No.","Job No.","Entry Type","Cost Type","Global Dimension 2 Code",Element,"Purchase Action","Posting Date");
          JobLedgerEntry.SETRANGE(Element, Element);
        END ELSE BEGIN
          JobLedgerEntry.SETCURRENTKEY("Main Project No.","Job No.","Entry Type","Cost Type","Global Dimension 2 Code","Posting Date","Purchase Action", "Purchase Route Reference");
        END;
        JobLedgerEntry.SETRANGE("Main Project No.","Main Project No.");
        IF "Project No." <> "Main Project No." THEN
           JobLedgerEntry.SETRANGE("Job No.","Project No.");
        JobLedgerEntry.SETRANGE("Cost Type", "Cost Type");
        JobLedgerEntry.SETRANGE("Global Dimension 2 Code", "Cost Object");
        JobLedgerEntry.SETRANGE("Posting Date", 0D, "Prognosis Date");
        JobLedgerEntry.SETFILTER("Purchase Route Reference", '=%1', '');
        JobLedgerEntry.CALCSUMS("Total Cost (LCY)");
        EXIT(JobLedgerEntry."Total Cost (LCY)");
      END;
    END;

    PROCEDURE CalculateAvailable@1100528400(BudgetAmount@1100528400 : Decimal;AllowedCosts@1100528401 : Decimal;OpenPurchase@1100528402 : Decimal;ProductDiscount@1100528403 : Decimal;TotalCost@1100528404 : Decimal;BudgetMinusAllowedCost@1100528405 : Boolean) : Decimal;
    BEGIN
      IF BudgetMinusAllowedCost THEN
        EXIT(BudgetAmount - AllowedCosts - OpenPurchase - ProductDiscount)
      ELSE
        EXIT(BudgetAmount - TotalCost);
    END;

    PROCEDURE CalculateAvailableHours@1100528402(BudgetHours@1100528400 : Decimal;AllowedHours@1100528401 : Decimal;OpenHours@1100528402 : Decimal;TotalHours@1100528404 : Decimal;BudgetMinusAllowedCost@1100528405 : Boolean) : Decimal;
    BEGIN
      IF BudgetMinusAllowedCost THEN
        EXIT(BudgetHours - AllowedHours - OpenHours)
      ELSE
        EXIT(BudgetHours - TotalHours);
    END;

    PROCEDURE AddRisksAndOpportunities@1100528201(Prognosis@1100528800 : Record 11012034) Successful : Boolean;
    VAR
      Job@1100528200 : Record 11072003;
      ProjectElement@1100528210 : Record 11012010;
      Amounts@1100528203 : ARRAY [4] OF Decimal;
      CostObjects@1100528208 : ARRAY [4] OF Code[20];
    BEGIN
      WITH Prognosis DO BEGIN
        Job.GET("Project No.");
        GetCostObjects(CostObjects);
        GetRiskAndOpportunityValues(Prognosis,CostObjects,Amounts);
        IF Job."Prognosis per Element" THEN BEGIN
          ProjectElement.SETRANGE("Project No.","Project No.");
          IF ProjectElement.FINDFIRST THEN;
        END;
        RemoveRiskAndOpportunityPrognosisLines(Prognosis,ProjectElement.Element,CostObjects);
        Successful := AddRiskAndOpportunityPrognosisLines(Prognosis,ProjectElement.Element,CostObjects,Amounts);
      END;
    END;

    LOCAL PROCEDURE GetCostObjects@1100528204(VAR CostObjects@1100528204 : ARRAY [4] OF Code[10]);
    VAR
      JobsSetup@1100528200 : Record 315;
    BEGIN
      JobsSetup.GET;
      JobsSetup.TESTFIELD("Cost Object Risk Cost");
      JobsSetup.TESTFIELD("Cost Object Risk Revenue");
      JobsSetup.TESTFIELD("Cost Object Opportunity Cost");
      JobsSetup.TESTFIELD("Cost Object Opport. Revenue");
      CostObjects[1] := JobsSetup."Cost Object Risk Cost";
      CostObjects[2] := JobsSetup."Cost Object Risk Revenue";
      CostObjects[3] := JobsSetup."Cost Object Opportunity Cost";
      CostObjects[4] := JobsSetup."Cost Object Opport. Revenue";
    END;

    LOCAL PROCEDURE GetRiskAndOpportunityValues@1100528202(Prognosis@1100528200 : Record 11012034;CostObjects@1100528204 : ARRAY [4] OF Code[10];VAR Amounts@1100528203 : ARRAY [4] OF Decimal);
    VAR
      RiskOpportunitySchedule@1100528207 : Record 11229900;
      RiskLine@1100528206 : Record 11229903;
      OpportunityLine@1100528205 : Record 11229904;
    BEGIN
      WITH Prognosis DO BEGIN
        RiskOpportunitySchedule.SETCURRENTKEY(Source,"Source Code",Date);
        RiskOpportunitySchedule.SETRANGE(Source,RiskOpportunitySchedule.Source::Project);
        RiskOpportunitySchedule.SETRANGE("Source Code","Project No.");
        RiskOpportunitySchedule.SETFILTER(Date, '..%1',"Prognosis Date");
        RiskOpportunitySchedule.FINDLAST; //Error when not present is intended.
        RiskLine.SETCURRENTKEY(Source,"Source Code","Schedule Date","Line No.");
        RiskLine.SETRANGE(Source,RiskLine.Source::Project);
        RiskLine.SETRANGE("Source Code","Project No.");
        RiskLine.SETRANGE("Schedule Date",RiskOpportunitySchedule.Date);
        IF RiskLine.FINDFIRST THEN BEGIN
          RiskLine.CALCFIELDS("Total Anticipated Cost","Total Anticipated Sales");
          Amounts[1] := RiskLine."Total Anticipated Cost";
          Amounts[2] := RiskLine."Total Anticipated Sales";
        END;
        OpportunityLine.SETCURRENTKEY(Source,"Source Code","Schedule Date","Line No.");
        OpportunityLine.SETRANGE(Source,OpportunityLine.Source::Project);
        OpportunityLine.SETRANGE("Source Code","Project No.");
        OpportunityLine.SETRANGE("Schedule Date",RiskOpportunitySchedule.Date);
        IF OpportunityLine.FINDFIRST THEN BEGIN
          OpportunityLine.CALCFIELDS("Total Anticipated Cost","Total Anticipated Sales");
          Amounts[3] := OpportunityLine."Total Anticipated Cost";
          Amounts[4] := OpportunityLine."Total Anticipated Sales";
        END;
      END;
    END;

    LOCAL PROCEDURE RemoveRiskAndOpportunityPrognosisLines@1100528206(Prognosis@1100528204 : Record 11012034;ProjectElement@1100528203 : Code[20];CostObjects@1100528202 : ARRAY [4] OF Code[20]);
    VAR
      DimensionValue@1100528201 : Record 349;
      PrognosisLine@1100528200 : Record 11012035;
      I@1100528205 : Integer;
    BEGIN
      WITH Prognosis DO BEGIN
        FOR I := 1 TO 4 DO BEGIN
          DimensionValue.SETRANGE("Global Dimension No.",2);
          DimensionValue.SETRANGE(Code,CostObjects[I]);
          DimensionValue.FINDFIRST;
          IF PrognosisLine.GET("Project No.","Prognosis Date",DimensionValue."Cost Type",ProjectElement,DimensionValue.Code) THEN BEGIN
            PrognosisLine."Ovh. Surcharge" := 0;
            PrognosisLine.VALIDATE(Amount,0);
            PrognosisLine.VALIDATE("Amount Revenue",0);
            PrognosisLine.MODIFY(TRUE);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE AddRiskAndOpportunityPrognosisLines@1100528205(Prognosis@1100528200 : Record 11012034;ProjectElement@1100528204 : Code[20];CostObjects@1100528201 : ARRAY [4] OF Code[20];Amounts@1100528206 : ARRAY [4] OF Decimal) Succesful : Boolean;
    VAR
      DimensionValue@1100528202 : Record 349;
      PrognosisLine@1100528203 : Record 11012035;
      Job@1100528207 : Record 11072003;
      ElemCstObjCntrlRec@1100528209 : Record 11012050;
      CstObjCntrlRec@1100528208 : Record 11012047;
      I@1100528205 : Integer;
    BEGIN
      WITH Prognosis DO BEGIN
        Job.GET("Project No.");
        FOR I := 1 TO 4 DO BEGIN
          DimensionValue.SETRANGE("Global Dimension No.",2);
          DimensionValue.SETRANGE(Code,CostObjects[I]);
          DimensionValue.FINDFIRST;
          IF (I IN [2,4]) AND (DimensionValue."Cost Type" <> DimensionValue."Cost Type"::Revenue) THEN
            Amounts[I] := -1 * Amounts[I];
          IF PrognosisLine.GET("Project No.","Prognosis Date",DimensionValue."Cost Type",ProjectElement,DimensionValue.Code) THEN BEGIN
            PrognosisLine."Ovh. Surcharge" := 0;
            IF DimensionValue."Cost Type" <> DimensionValue."Cost Type"::Revenue THEN
              PrognosisLine.VALIDATE(Amount,PrognosisLine.Amount+Amounts[I])
            ELSE
              PrognosisLine.VALIDATE("Amount Revenue",PrognosisLine."Amount Revenue"+Amounts[I]);
            PrognosisLine.MODIFY(TRUE);
            Succesful := TRUE;
          END ELSE BEGIN
            PrognosisLine.INIT;
            PrognosisLine."Project No." := "Project No.";
            PrognosisLine."Prognosis Date" := "Prognosis Date";
            PrognosisLine."Cost Type" := DimensionValue."Cost Type";
            PrognosisLine.Element := ProjectElement;
            PrognosisLine."Cost Object" := DimensionValue.Code;
            PrognosisLine."Ovh. Surcharge" := 0;
            IF DimensionValue."Cost Type" <> DimensionValue."Cost Type"::Revenue THEN
              PrognosisLine.VALIDATE(Amount,Amounts[I])
            ELSE
              PrognosisLine.VALIDATE("Amount Revenue",Amounts[I]);
            PrognosisLine.INSERT(TRUE);

            IF Job."Prognosis per Element" THEN BEGIN
              IF NOT ElemCstObjCntrlRec.GET("Project No.",ProjectElement,DimensionValue."Cost Type",DimensionValue.Code) THEN BEGIN
                ElemCstObjCntrlRec.INIT;
                ElemCstObjCntrlRec."Project No." := "Project No.";
                ElemCstObjCntrlRec.Element := ProjectElement;
                ElemCstObjCntrlRec."Cost Type" := DimensionValue."Cost Type";
                ElemCstObjCntrlRec."Cost Object" := DimensionValue.Code;
                ElemCstObjCntrlRec.INSERT(TRUE);
              END;
            END ELSE BEGIN
              IF NOT CstObjCntrlRec.GET("Project No.",DimensionValue."Cost Type",DimensionValue.Code) THEN BEGIN
                CstObjCntrlRec.INIT;
                CstObjCntrlRec."Project No." := "Project No.";
                CstObjCntrlRec."Cost Type" := DimensionValue."Cost Type";
                CstObjCntrlRec."Cost Object" := DimensionValue.Code;
                CstObjCntrlRec.INSERT(TRUE);
              END;
            END;

            Succesful := TRUE;
          END;
        END;
      END;
    END;

    BEGIN
    {
      -SE EVRY-
      LAHE 121211 Moved functions from Page 11125069 here to avoid duplicated code
      LAHE 130214 Missing fields added and cost component summary fixed
      LAHE 130308 "Main Project"
      LAHE 130528 IMSE-005: Revenues


      used fields:
      tempCostComp."Line Discount Amount"
      tempCostComp."Line No."
      tempCostComp."Net Weight"
      tempCostComp."Outstanding Amount"
      tempCostComp."Qty. Invoiced (Base)"
      tempCostComp."Qty. to Invoice"
      tempCostComp."Qty. to Ship (Base)"
      tempCostComp."Quantity Invoiced"
      tempCostComp.Amount
      tempCostComp.Quantity
      tempCostComp."Line Amount"
      tempCostComp."Gross Weight"
      tempCostComp."Unit Volume"
      tempCostComp."Units per Parcel"

      4PS-001 include cost component in prognosis
      131029  4PS-015 Blocked range to account for problem not the last invoice was not included (due to different cost component)
      140116  IME-096 DL SETFILTER on "Extension Contract Status" to exclude quotes
      140128  ENH-011#5.6, redefinition of PrognosisLineCC."Prognosis Hours" and following calculations
      140322  ENH-025, add prognosis for revenue on cost-plus-projects
      140815  ITERO.DL IME155 exclude "Component Type"::'expense hours' from "Open Amount (Hours)", "Open Ovh. Surch. (Hours)", "Open Hours"
      140911  ITERO.DL 4PS-043 Prognosis not working correctly
      150127  ITERO.DL IME272 added "Used for surcharge"
      150512  ITERO.SB IME-329
      160120  ITERO.DL IME403 don't include closed projects in prognosis
      160303  ITERO.DL IME448 don't include surcharge in prognosis if not enabled in JobSetup
      171212  ITERO.SB Pure 283898
      180524 ORANGO.FH RFC1049 added function to copy "Total Production Hours" from previous prognosis
      190131 ORANGO.SB RFC-226 Added "Addition" in Wage Component Type Filter
    }
    END.
  }
}

