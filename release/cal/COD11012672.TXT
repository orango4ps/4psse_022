OBJECT Codeunit 11012672 Proj. Del. Note-Post
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11012672;
    OnRun=BEGIN
            ProjDelNoteHeader.COPY(Rec);
            Code;
            Rec := ProjDelNoteHeader;
          END;

  }
  CODE
  {
    VAR
      ProjSetup@1210190000 : Record 315;
      ProjDelNoteHeader@1100525000 : Record 11012672;
      Text001@1100525002 : TextConst 'DEU=liegt nicht innerhalb des zugelassenen Buchungszeitraums.;ENU=is not within your range of allowed posting dates.;NLD=is geen geldige boekingsdatum. De datum valt buiten het toegestane bereik.;NOR=er ikke i ditt tillatte intervall for bokf›ringsdato;SVE=„r inte i ditt till†tna intervall f”r bokf”ringsdatum.';
      InventSetupRec@1100525004 : Record 313;
      GenJnlBatchRec@1100525003 : Record 232;
      Item@1100528602 : Record 27;
      NoSeriesMgt@1100528603 : Codeunit 396;
      NSItemTrackingEntriesApply@1100528601 : Codeunit 11012352;
      GenJnlLinesCreated@1100525007 : Boolean;
      NextGenJnlLineNo@1100525006 : Integer;
      GenJnlDocNo@1100525005 : Code[20];
      Text002@1100528500 : TextConst 'DEU=%1 entspricht nicht der in der Artikelverfolgung definierten Menge.;ENU=The %1 does not match the quantity defined in item tracking for item %2.;NLD=%1 komt niet overeen met het aantal dat is gedefinieerd bij artikeltracering voor artikel %2.;NOR=%1 samsvarer ikke med antallet som er definert i varesporing.;SVE=%1 st„mmer inte med det antal som har angetts vid artikelsp†rning.';

    PROCEDURE Code@1100525000();
    VAR
      PostedProjDelNoteHeader@1100525000 : Record 11012674;
      ProjDelNoteLine@1100525001 : Record 11012673;
      PostedProjDelNoteLine@1100525002 : Record 11012675;
      ProjectInventoryEntry2@1100529000 : Record 11012670;
      Project@1100525004 : Record 11072003;
      Project2@1100525005 : Record 11072003;
      GenJnlCheckLine@1100525003 : Codeunit 11;
    BEGIN
      GenJnlLinesCreated := FALSE;
      GenJnlDocNo := '';
      InventSetupRec.GET;
      ProjSetup.GET; //call 31763

      WITH ProjDelNoteHeader DO BEGIN
      //DP00653.sn
        IF CheckStatus THEN
          TESTFIELD(Status,Status::Released);
        Status := Status::Open;
        MODIFY(FALSE);
      //DP00653.en

        TESTFIELD("Project No.");
        Project.GET("Project No.");
        IF "Transaction Type" = "Transaction Type"::Transfer THEN BEGIN
          TESTFIELD("Receiving Project No.");
          Project2.GET("Receiving Project No.");
        END;

        IF "Posting Date" = 0D THEN
          "Posting Date" := WORKDATE;
        IF "Document Date" = 0D THEN
          "Document Date" := WORKDATE;

        IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
          FIELDERROR("Posting Date",Text001);

        IF "Posting No." = '' THEN BEGIN
          IF ("No. Series" <> "Posting No. Series") AND ("Posting No. Series" <> '') THEN
            "Posting No." := NoSeriesMgt.GetNextNo("Posting No. Series","Posting Date",TRUE)
          ELSE
            "Posting No." := "No.";
        END;

        PostedProjDelNoteHeader.INIT;
        PostedProjDelNoteHeader.TRANSFERFIELDS(ProjDelNoteHeader);
        PostedProjDelNoteHeader."No." := "Posting No.";
        PostedProjDelNoteHeader.INSERT;


        ProjDelNoteLine.SETRANGE("Project Delivery Note No.","No.");
        IF ProjDelNoteLine.FINDSET THEN
          REPEAT
            IF Project."Posting Element Mandatory" AND NOT ProjSetup."No Elements In Project Invent." THEN //call 31763
              ProjDelNoteLine.TESTFIELD(Element);
            IF "Transaction Type" = "Transaction Type"::Transfer THEN BEGIN
              //C008936
              ProjDelNoteLine.TESTFIELD("To Location Code");
              ProjDelNoteLine.TESTFIELD("Global Dimension 2 Code");
              //
              IF Project2."Posting Element Mandatory" AND NOT ProjSetup."No Elements In Project Invent." THEN //call 31763
                ProjDelNoteLine.TESTFIELD("To Element");
            END;
            IF "Transaction Type" = "Transaction Type"::"Internal Transfer" THEN BEGIN //DP00653
              ProjDelNoteLine.TESTFIELD("To Location Code");
              ProjDelNoteLine.TESTFIELD("Global Dimension 2 Code");
              IF Project."Posting Element Mandatory" AND NOT ProjSetup."No Elements In Project Invent." THEN
                ProjDelNoteLine.TESTFIELD("To Element");
            END;
            IF ProjDelNoteLine.Quantity <> 0 THEN BEGIN
              ProjDelNoteLine.TESTFIELD("Location Code");
              ProjDelNoteLine.CheckProjectInventory();
            END;
            IF ("Transaction Type" = "Transaction Type"::Return) THEN  //For this type checks not done in 'CheckProjectInventory'
              ProjectInventoryEntry2.CheckDetailNoProjDeliveryNote(ProjDelNoteHeader, ProjDelNoteLine);
            IF ProjDelNoteLine."Create Advice Order" THEN
              CreateAdviceOrderLine(ProjDelNoteLine);
            PostProjectInventory(ProjDelNoteLine);
            PostItemTracking(ProjDelNoteLine); //DP000121
            PostedProjDelNoteLine.INIT;
            PostedProjDelNoteLine.TRANSFERFIELDS(ProjDelNoteLine);
            PostedProjDelNoteLine."Posted Proj. Del. Note No." := "Posting No.";
            PostedProjDelNoteLine.INSERT;
          UNTIL ProjDelNoteLine.NEXT = 0;

        IF GenJnlLinesCreated THEN
          PostGenJnlLines();

        Status := Status::Open; //DP00653
        DELETE(TRUE);
      END;
    END;

    PROCEDURE PostProjectInventory@1100485002(ProjDelNoteLine@1100525000 : Record 11012673);
    VAR
      ProjInventEntry@1100485001 : Record 11012670;
      ProjInventEntry2@1100525001 : Record 11012670;
      ProjInventPostLine@1100485000 : Codeunit 11012670;
    BEGIN
      WITH ProjInventEntry DO BEGIN
        INIT;
        "Document No." := ProjDelNoteHeader."No.";
        "Document Date" := ProjDelNoteHeader."Document Date";
        "Posting Date" := ProjDelNoteHeader."Posting Date";
        "Project No." := ProjDelNoteHeader."Project No.";
        Deliver := ProjDelNoteHeader.Deliver;
        "Ship To Location" := ProjDelNoteHeader."Ship To Location";
        "Item No." := ProjDelNoteLine."Item No.";
        Description := ProjDelNoteLine.Description;
        "Description 2" := ProjDelNoteLine."Description 2";
        "Location Code" := ProjDelNoteLine."Location Code";
        "Bin Code" := ProjDelNoteLine."Bin Code";  //db, 02-11-10
        Quantity := ProjDelNoteLine.Quantity;
        "Unit of Measure Code" := ProjDelNoteLine."Unit of Measure Code";
        "Yard No." := ProjDelNoteLine."Yard No.";
        "System No." := ProjDelNoteLine."System No.";
        "Entity Type" := ProjDelNoteLine."Entity Type";
        "Entity No." := ProjDelNoteLine."Entity No.";
        "Gland Position" := ProjDelNoteLine."Gland Position";
        //kkleermaker.sn, 130829, C008352
        "Assembly Yard Number Object" := ProjDelNoteLine."Assembly Yard Number Object";
        //kkleermaker.en
        "Cost Object" := ProjDelNoteLine."Global Dimension 2 Code";
        "Project Delivery Note No." := ProjDelNoteLine."Project Delivery Note No.";
        Manufacturer := ProjDelNoteLine.Manufacturer;
        "Basic Item" := ProjDelNoteLine."Basic Item";
        "Vendor (Trade Item)" := ProjDelNoteLine."Vendor (Trade Item)";
        "Trade Item" := ProjDelNoteLine."Trade Item";
        "Shelf No." := ProjDelNoteLine."Shelf No.";
        "Item Composition" := ProjDelNoteLine."Item Composition";
        Element := ProjDelNoteLine.Element;  //hbk,06-05-2010
        "Variant Code" := ProjDelNoteLine."Variant Code"; // X0.71
        "Purch. Detail No."  := ProjDelNoteLine."Purch. Detail No.";  //DP00749
        //DP01137.sn
        "Purchase Route Reference" := ProjDelNoteLine."Purchase Route Reference";
        "Purchase Requisition No." := ProjDelNoteLine."Purchase Requisition No.";
        "Plant Type" := ProjDelNoteLine."Plant Type";
        "Plant No." := ProjDelNoteLine."Plant No.";
        Comment := ProjDelNoteLine.Comment;
        "Extension Contract" := ProjDelNoteLine."Extension Contract";
        "Plot No." := ProjDelNoteLine."Plot No.";
        //DP01137.en

        CASE ProjDelNoteHeader."Transaction Type" OF
          ProjDelNoteHeader."Transaction Type"::Delivery:
            BEGIN
              Quantity := -Quantity;
              "Entry Type" := ProjInventEntry."Entry Type"::Delivery;
            END;
          ProjDelNoteHeader."Transaction Type"::Return:
            BEGIN
              "Entry Type" := ProjInventEntry."Entry Type"::Return;
            END;
          ProjDelNoteHeader."Transaction Type"::Transfer:
            BEGIN
              //post line receiving project
              ProjInventEntry2.COPY(ProjInventEntry);
              ProjInventEntry2."Project No." := ProjDelNoteHeader."Receiving Project No.";
              ProjInventEntry2."Entry Type" := ProjInventEntry."Entry Type"::Transfer;
              ProjInventEntry2.Element := ProjDelNoteLine."To Element";  //hbk,06-05-2010
              //db.sn, 10-05-11: M26934
              ProjInventEntry2."Location Code" := ProjDelNoteLine."To Location Code";
              ProjInventEntry2."Bin Code" := ProjDelNoteLine."To Bin Code";
              //db.en, 10-05-11: M26934
              ProjInventEntry2."Yard No." := ProjDelNoteLine."To Yard No.";
              ProjInventEntry2."System No." := ProjDelNoteLine."To System No.";
              ProjInventEntry2."Entity Type" := ProjDelNoteLine."To Entity Type";
              ProjInventEntry2."Entity No." := ProjDelNoteLine."To Entity No.";
              ProjInventEntry2."Gland Position" := ProjDelNoteLine."To Gland Position";
              ProjInventEntry2."Extension Contract" := ProjDelNoteLine."To Extension Contract";
              ProjInventEntry2."Plot No." := ProjDelNoteLine."To Plot No.";
              //kkleermaker.sn, 130829, C008352
              ProjInventEntry2."Assembly Yard Number Object" := ProjDelNoteLine."Assembly Yard Number Object";
              //kkleermaker.en
              ProjInventPostLine.RunWithCheck(ProjInventEntry2);

              //sending project
              "Project No." := ProjDelNoteHeader."Project No.";
              Quantity := -Quantity;
              "Entry Type" := ProjInventEntry."Entry Type"::Transfer;
              IF InventSetupRec."Ledg. Entries Job Inv Transfer" AND
                 (("Entry Type" = "Entry Type"::Transfer) AND (ProjInventEntry2."Project No." <> "Project No."))
              THEN
                InsertGenJnlLine(ProjInventEntry, ProjInventEntry2);

            END;
          ProjDelNoteHeader."Transaction Type"::"Temporary Shipment Third Party":
            BEGIN
              Quantity := -Quantity;
              "Entry Type" := ProjInventEntry."Entry Type"::"Temporary Shipment Third Party";
            END;
          ProjDelNoteHeader."Transaction Type"::"Return Temporary Shipment Third Party":
            BEGIN
              "Entry Type" := ProjInventEntry."Entry Type"::"Return Temporary Shipment Third Party";
            END;
          ProjDelNoteHeader."Transaction Type"::"Internal Transfer": //DP00653
            BEGIN
              //post line receiving entity
              ProjInventEntry2.COPY(ProjInventEntry);
              ProjInventEntry2."Entry Type" := ProjInventEntry."Entry Type"::Transfer;
              ProjInventEntry2.Element := ProjDelNoteLine."To Element";
              ProjInventEntry2."Location Code" := ProjDelNoteLine."To Location Code";
              ProjInventEntry2."Bin Code" := ProjDelNoteLine."To Bin Code";
              ProjInventEntry2."Yard No." := ProjDelNoteLine."To Yard No.";
              ProjInventEntry2."System No." := ProjDelNoteLine."To System No.";
              ProjInventEntry2."Entity Type" := ProjDelNoteLine."To Entity Type";
              ProjInventEntry2."Entity No." := ProjDelNoteLine."To Entity No.";
              ProjInventEntry2."Gland Position" := ProjDelNoteLine."To Gland Position";
              ProjInventEntry2."Assembly Yard Number Object" := ProjDelNoteLine."Assembly Yard Number Object";
              ProjInventEntry2."Extension Contract" := ProjDelNoteLine."To Extension Contract";
              ProjInventEntry2."Plot No." := ProjDelNoteLine."To Plot No.";
              ProjInventPostLine.RunWithCheck(ProjInventEntry2);

              //post line sending entity
              Quantity := -Quantity;
              "Entry Type" := ProjInventEntry."Entry Type"::Transfer;
              IF InventSetupRec."Ledg. Entries Job Inv Transfer" AND
                 (ProjInventEntry2.Element <> Element)
               THEN
                InsertGenJnlLine(ProjInventEntry, ProjInventEntry2);
            END;

        END;
        ProjInventPostLine.RunWithCheck(ProjInventEntry);
      END;
    END;

    PROCEDURE CreateAdviceOrderLine@1100525001(ProjDelNoteLine@1100525002 : Record 11012673);
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
      AdviceOrderLine2@1100525001 : Record 11012055;
    BEGIN
      WITH AdviceOrderLine DO BEGIN
        INIT;
        "Record Type" := "Record Type"::Project;
        VALIDATE("Project No.",ProjDelNoteHeader."Project No.");
        AdviceOrderLine2.SETRANGE("Record Type",AdviceOrderLine2."Record Type"::Project);
        AdviceOrderLine2.SETRANGE("Project No.",ProjDelNoteHeader."Project No.");
        IF AdviceOrderLine2.FINDLAST THEN
          "Line No." := AdviceOrderLine2."Line No." + 10000
        ELSE
          "Line No." := 10000;
        InitRecord;
        INSERT(TRUE);

        VALIDATE("Item No.",ProjDelNoteLine."Item No.");
        VALIDATE("Unit of Measure",ProjDelNoteLine."Unit of Measure Code");
        Description := ProjDelNoteLine.Description;
        "Description 2" := ProjDelNoteLine."Description 2";
        //VALIDATE(Transaction,Transaction::Purchase);
        VALIDATE(Transaction,ProjSetup."Advice Order Purch.Transaction");
        "Global Dimension 1 Code" := ProjDelNoteLine."Global Dimension 1 Code";
        "Cost Object" := ProjDelNoteLine."Global Dimension 2 Code";
        Manufacturer := ProjDelNoteLine.Manufacturer;
        "Basic Item" := ProjDelNoteLine."Basic Item";
        "Vendor (Trade Item)" := ProjDelNoteLine."Vendor (Trade Item)";
        "Trade Item" := ProjDelNoteLine."Trade Item";
        //DP01137.sn
        "Purchase Route Reference" := ProjDelNoteLine."Purchase Route Reference";
        //"Purchase Requisition No." := ProjDelNoteLine."Purchase Requisition No.";
        "Plant Type" := ProjDelNoteLine."Plant Type";
        //"Plant No." := ProjDelNoteLine."Plant No.";
        //Comment := ProjDelNoteLine.Comment;
        //DP01137.en
        IF ProjDelNoteLine."Location Code" <> '' THEN BEGIN
          "Ship To Location" := '';
          VALIDATE(Deliver,Deliver::Location);
          VALIDATE("Ship To Location",ProjDelNoteLine."Location Code");
        END;
        VALIDATE("Quantity (Advice)",ProjDelNoteLine.Quantity);
        VALIDATE("Yard No.",ProjDelNoteLine."Yard No.");
        VALIDATE("System No.",ProjDelNoteLine."System No.");
        VALIDATE("Entity Type",ProjDelNoteLine."Entity Type");
        VALIDATE("Entity No.",ProjDelNoteLine."Entity No.");
        VALIDATE("Cable Transit Pos.",ProjDelNoteLine."Gland Position");
        VALIDATE(Element, ProjDelNoteLine.Element);  //db, 01-02-11: M24445
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE InsertGenJnlLine@1100525003(ProjInventEntryOld@1100525005 : Record 11012670;ProjInventEntryNew@1100525004 : Record 11012670);
    VAR
      lvGenJnlLineRec@1100525000 : Record 81;
      lvProjInventEntryRec@1100525001 : Record 11012670;
      lvNoSeriesMgtCU@1100525003 : Codeunit 396;
      DimMgtCU@1100525006 : Codeunit 408;
      DimValRec@1100525007 : Record 349;
      lvPrice@1100525002 : Decimal;
    BEGIN
      WITH ProjInventEntryOld DO BEGIN
        lvProjInventEntryRec."Item No." := "Item No.";
        lvProjInventEntryRec.Manufacturer := Manufacturer;
        lvProjInventEntryRec."Basic Item" := "Basic Item";
        lvProjInventEntryRec."Vendor (Trade Item)" := "Vendor (Trade Item)";
        lvProjInventEntryRec."Trade Item" := "Trade Item";
        lvPrice := lvProjInventEntryRec.GetItemPrice();

        IF NOT GenJnlLinesCreated THEN BEGIN  //* First time
          GenJnlLinesCreated := TRUE;
          InventSetupRec.TESTFIELD("Job Inventory Journal Template");
          InventSetupRec.TESTFIELD("Job Inventory Journal Batch");
          InventSetupRec.TESTFIELD("Job Invnt. Def. Cost Obj. Mat.");

          GenJnlBatchRec.GET(InventSetupRec."Job Inventory Journal Template", InventSetupRec."Job Inventory Journal Batch");
          GenJnlBatchRec.TESTFIELD("No. Series");
          //GenJnlDocNo := lvNoSeriesMgtCU.TryGetNextNo(GenJnlBatchRec."No. Series", "Posting Date");  //* See T81
          GenJnlDocNo := lvNoSeriesMgtCU.GetNextNo(GenJnlBatchRec."No. Series", "Posting Date" , FALSE); //call 14900

          lvGenJnlLineRec.SETRANGE("Journal Template Name", InventSetupRec."Job Inventory Journal Template");
          lvGenJnlLineRec.SETRANGE("Journal Batch Name", InventSetupRec."Job Inventory Journal Batch");
          IF NOT lvGenJnlLineRec.FINDLAST THEN
            NextGenJnlLineNo := 10000
          ELSE
            NextGenJnlLineNo := lvGenJnlLineRec."Line No." + 10000;
          lvGenJnlLineRec.RESET;
        END;

        lvGenJnlLineRec.INIT;
        lvGenJnlLineRec.VALIDATE("Journal Template Name", InventSetupRec."Job Inventory Journal Template");
        lvGenJnlLineRec.VALIDATE("Journal Batch Name", InventSetupRec."Job Inventory Journal Batch");
        lvGenJnlLineRec."Line No." := NextGenJnlLineNo;
        lvGenJnlLineRec."System-Created Entry" := TRUE;
        lvGenJnlLineRec."Posting Date" := "Posting Date";
        lvGenJnlLineRec."Document Date" := WORKDATE;
        lvGenJnlLineRec."Document No." := GenJnlDocNo;
        lvGenJnlLineRec.VALIDATE("Job No.", "Project No.");
        IF Element <> '' THEN
          lvGenJnlLineRec.VALIDATE(Element, Element);  //hbk,06-05-2010
        //DP01137.sn
        lvGenJnlLineRec."Plant Type" := "Plant Type";
        lvGenJnlLineRec."Plant No." := "Plant No.";
        //DP01137.en
        IF ("Trade Item" <> '') THEN BEGIN
          lvGenJnlLineRec.VALIDATE("Vendor (Trade Item)", "Vendor (Trade Item)");
          lvGenJnlLineRec.VALIDATE("Trade Item", "Trade Item");
        END ELSE BEGIN
          IF ("Basic Item" <> '') THEN BEGIN
            lvGenJnlLineRec.VALIDATE(Manufacturer, Manufacturer);
            lvGenJnlLineRec.VALIDATE("Basic Item", "Basic Item");
          END ELSE BEGIN
            IF ("Item No." <> '') THEN BEGIN
              lvGenJnlLineRec.VALIDATE("Item No.", "Item No.");
            END;
          END;
        END;
        IF lvGenJnlLineRec."Shortcut Dimension 2 Code" <> '' THEN
         DimMgtCU.GetDimValueRec(2,lvGenJnlLineRec."Shortcut Dimension 2 Code",DimValRec,TRUE,'');
        IF (lvGenJnlLineRec."Shortcut Dimension 2 Code" = '') OR (DimValRec."Cost Type" <> DimValRec."Cost Type"::Material) THEN
          lvGenJnlLineRec.VALIDATE("Shortcut Dimension 2 Code", InventSetupRec."Job Invnt. Def. Cost Obj. Mat.");
        //* Project filled and cost object of cost type 'Material' then lvGenJnlLineRec."Account No." will be WIP-acc. for materials.
        lvGenJnlLineRec.VALIDATE("Unit of Measure Code", "Unit of Measure Code");
        //lvGenJnlLineRec.Quantity := -Quantity; //18618
        lvGenJnlLineRec.Quantity := Quantity;    //18618  ProjInventEntryOld.Quantity is already made negative before calling
        lvGenJnlLineRec.VALIDATE(Amount, lvPrice * lvGenJnlLineRec.Quantity);
        lvGenJnlLineRec.Description := Description;
        lvGenJnlLineRec.VALIDATE("Gen. Posting Type", lvGenJnlLineRec."Gen. Posting Type"::" ");
        lvGenJnlLineRec.VALIDATE("Gen. Bus. Posting Group", '');
        lvGenJnlLineRec.VALIDATE("Gen. Prod. Posting Group", '');
        lvGenJnlLineRec.VALIDATE("VAT Bus. Posting Group", '');
        lvGenJnlLineRec.VALIDATE("VAT Prod. Posting Group", '');
        lvGenJnlLineRec.INSERT(TRUE);

        lvGenJnlLineRec."Line No." := lvGenJnlLineRec."Line No." + 10;
        lvGenJnlLineRec.Element := '';  //hbk,06-05-2010
        lvGenJnlLineRec.VALIDATE("Job No.", ProjInventEntryNew."Project No.");
        IF ProjInventEntryNew.Element <> '' THEN
          lvGenJnlLineRec.VALIDATE(Element, ProjInventEntryNew.Element);  //hbk,06-05-2010
        //lvGenJnlLineRec.Quantity := Quantity;                  //18618  ProjInventEntryOld.Quantity is negative,
        lvGenJnlLineRec.Quantity := ProjInventEntryNew.Quantity; //18618  so use ProjInventEntryNew.Quantity
        lvGenJnlLineRec.VALIDATE(Amount, lvPrice * lvGenJnlLineRec.Quantity);
        lvGenJnlLineRec.VALIDATE("Gen. Posting Type", lvGenJnlLineRec."Gen. Posting Type"::" ");
        lvGenJnlLineRec.VALIDATE("Gen. Bus. Posting Group", '');
        lvGenJnlLineRec.VALIDATE("Gen. Prod. Posting Group", '');
        lvGenJnlLineRec.VALIDATE("VAT Bus. Posting Group", '');
        lvGenJnlLineRec.VALIDATE("VAT Prod. Posting Group", '');
        lvGenJnlLineRec.INSERT(TRUE);

        NextGenJnlLineNo := NextGenJnlLineNo + 10000;

      END;
    END;

    PROCEDURE PostGenJnlLines@1100525002();
    VAR
      lvGenJnlLineRec@1100525001 : Record 81;
      lvPostGenJnlBatchCU@1100525000 : Codeunit 13;
    BEGIN
      lvGenJnlLineRec.SETRANGE("Journal Template Name", InventSetupRec."Job Inventory Journal Template");
      lvGenJnlLineRec.SETRANGE("Journal Batch Name", InventSetupRec."Job Inventory Journal Batch");
      lvGenJnlLineRec.SETRANGE("Document No.", GenJnlDocNo);
      IF lvGenJnlLineRec.FINDFIRST THEN BEGIN
        lvPostGenJnlBatchCU.SetSuppressCommit(TRUE);
        lvPostGenJnlBatchCU.RUN(lvGenJnlLineRec);
      END;
    END;

    PROCEDURE PostItemTracking@1100528601(ProjectDeliveryNoteLine@1100528601 : Record 11012673);
    VAR
      NSReservationEntry@1100528604 : Record 11071900;
      NSItemTrackingCheck@1100528600 : Codeunit 11012353;
      QuantityProcessed@1100528602 : Decimal;
      IsFirstReservLine@1100528500 : Boolean;
    BEGIN
      //**4PS DP000121
      IF (ProjectDeliveryNoteLine."Item No." = '') THEN
        EXIT;

      IF NOT Item.GET(ProjectDeliveryNoteLine."Item No.") THEN
        EXIT;

      IF Item."Item Tracking Code" = '' THEN
        EXIT;

      NSReservationEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype");
      NSReservationEntry.SETRANGE("Source ID", ProjectDeliveryNoteLine."Project Delivery Note No.");
      NSReservationEntry.SETRANGE("Source Type", DATABASE::"Project Delivery Note Line");
      NSReservationEntry.SETRANGE("Source Ref. No.", ProjectDeliveryNoteLine."Line No.");
      IF NSReservationEntry.FINDSET(TRUE) THEN BEGIN
        IsFirstReservLine := TRUE;
        IF ProjDelNoteHeader."Transaction Type" IN
          [ProjDelNoteHeader."Transaction Type"::Return,
           ProjDelNoteHeader."Transaction Type"::"Return Temporary Shipment Third Party"]
        THEN
          NSItemTrackingCheck.SetProjDeliveryNoteReturn(TRUE);  //C007689.n
        REPEAT
          IF (NSReservationEntry."Qty. to Handle (Base)" <> 0) AND
             ((NSReservationEntry."Serial No." <> '') OR (NSReservationEntry."Lot No." <> '')) THEN
          BEGIN
            NSItemTrackingCheck.CheckLine(
              NSReservationEntry, 1, ProjDelNoteHeader."Document Date",
              ProjectDeliveryNoteLine.Quantity, IsFirstReservLine,
              ProjectDeliveryNoteLine.FIELDCAPTION(Quantity));
            PostItemTrackingEntry(NSReservationEntry, ProjectDeliveryNoteLine);
            QuantityProcessed += NSReservationEntry."Qty. to Handle (Base)";
            IsFirstReservLine := FALSE;
            NSReservationEntry.DELETE;
          END;
        UNTIL NSReservationEntry.NEXT = 0;
      END;

      IF ABS(QuantityProcessed) <> ABS(ProjectDeliveryNoteLine.Quantity) THEN
        ERROR(STRSUBSTNO(Text002,ProjectDeliveryNoteLine.FIELDCAPTION(Quantity),ProjectDeliveryNoteLine."Item No."));
    END;

    PROCEDURE PostItemTrackingEntry@1100528603(NSReservationEntry@1100528600 : Record 11071900;ProjectDeliveryNoteLine@1100528605 : Record 11012673);
    VAR
      NSTrackingSpecification@1100528601 : Record 11071901;
      NSItemTrackingEntry@1100528604 : Record 11071902;
      NSItemTrackingEntryRelation@1100528603 : Record 11071903;
      ItemTrackingMgt@1100528606 : Codeunit 6500;
      EntryNo@1100528602 : Integer;
    BEGIN
      //**4PS DP000121
      WITH NSTrackingSpecification DO BEGIN
        LOCKTABLE;
        IF FINDLAST THEN
          EntryNo := "Entry No." + 1
        ELSE
          EntryNo := 1;

        INIT;
        TRANSFERFIELDS(NSReservationEntry);
        "Entry No." := EntryNo;
        "Quantity Handled (Base)" := NSReservationEntry."Qty. to Handle (Base)";
        "Qty. to Handle (Base)" := 0;
        INSERT;
      END;

      WITH NSItemTrackingEntry DO BEGIN
        LOCKTABLE;
        IF FINDLAST THEN
          EntryNo := "Entry No." + 1
        ELSE
          EntryNo := 1;

        INIT;
        "Entry No." := EntryNo;
        "Item No." := NSReservationEntry."Item No.";
        "Posting Date" := ProjDelNoteHeader."Posting Date";
        CASE ProjDelNoteHeader."Transaction Type" OF
          ProjDelNoteHeader."Transaction Type"::Delivery,
          ProjDelNoteHeader."Transaction Type"::"Temporary Shipment Third Party":
            "Entry Type" := "Entry Type"::Sale;
          ProjDelNoteHeader."Transaction Type"::Return,
          ProjDelNoteHeader."Transaction Type"::"Return Temporary Shipment Third Party":
            "Entry Type" := "Entry Type"::Purchase;
          ProjDelNoteHeader."Transaction Type"::Transfer:
            "Entry Type" := "Entry Type"::Transfer;
          ProjDelNoteHeader."Transaction Type"::"Internal Transfer":
            "Entry Type" := "Entry Type"::Transfer;
        END;
        "Location Code" := ProjectDeliveryNoteLine."Location Code";
        "Document Type" := "Document Type"::"Project Delivery Note";
        "Document No." := ProjDelNoteHeader."Posting No.";
        "Document Line No." := ProjectDeliveryNoteLine."Line No.";
        "Variant Code" := ProjectDeliveryNoteLine."Variant Code";
        Open := TRUE;
        "Serial No." := NSReservationEntry."Serial No.";
        "Lot No." := NSReservationEntry."Lot No.";
        "Warranty Date Vendor" := NSReservationEntry."Warranty Date Vendor";
        "Warranty Code Vendor" := NSReservationEntry."Warranty Code Vendor";
        "Warranty Start Date Vendor" := NSReservationEntry."Warranty Start Date Vendor";
        "Warranty Period Vendor" := NSReservationEntry."Warranty Period Vendor";
        "Warranty Code Customer" := NSReservationEntry."Warranty Code Customer";
        "Warranty Start Date Customer" := NSReservationEntry."Warranty Start Date Customer";
        "Warranty Period Customer" := NSReservationEntry."Warranty Period Customer";
        "Warranty Date Customer" := NSReservationEntry."Warranty Date Customer";
        "Good Customs":= NSReservationEntry."Good Customs";
        "Shipment with T1" := NSReservationEntry."Shipment with T1";
        "Customs Destination Code" := NSReservationEntry."Customs Destination Code";
        "Expiration Date" := NSReservationEntry."Expiration Date";
        Quantity := NSReservationEntry."Qty. to Handle (Base)";
        "Remaining Quantity" := Quantity;
        Positive := ("Remaining Quantity" > 0);
        "Item Tracking":= ItemTrackingMgt.ItemTrackingOption(
          NSReservationEntry."Lot No.", NSReservationEntry."Serial No.");
        "Source Type":= 0;
        "Source No.":= '';
        "Project No." := ProjDelNoteHeader."Project No.";
        NSItemTrackingEntriesApply.ApplyNSItemTrackingEntry(NSItemTrackingEntry, Item."Item Tracking Code");
        INSERT;
      END;

      WITH NSItemTrackingEntryRelation DO BEGIN
        INIT;
        "Item Tracking Entry No." := EntryNo;
        "Serial No." := NSReservationEntry."Serial No.";
        "Lot No." := NSReservationEntry."Lot No.";
        TransferFieldsProjDelNote(ProjectDeliveryNoteLine,ProjDelNoteHeader."Posting No.");
        INSERT;
      END;

      IF (ProjDelNoteHeader."Transaction Type" <> ProjDelNoteHeader."Transaction Type"::Transfer) AND
         (ProjDelNoteHeader."Transaction Type" <> ProjDelNoteHeader."Transaction Type"::"Internal Transfer") THEN
        EXIT;

      //Posting the transfer
      EntryNo := EntryNo + 1; //C003404
      WITH NSItemTrackingEntry DO BEGIN
        INIT;
        "Entry No." := EntryNo; //C003404
        "Item No." := NSReservationEntry."Item No.";
        "Posting Date" := ProjDelNoteHeader."Posting Date";
        "Entry Type" := "Entry Type"::Transfer;
        "Location Code" := ProjectDeliveryNoteLine."To Location Code";
        "Document Type" := "Document Type"::"Project Delivery Note";
        "Document No." := ProjDelNoteHeader."Posting No.";
        "Document Line No." := ProjectDeliveryNoteLine."Line No.";
        "Variant Code" := ProjectDeliveryNoteLine."Variant Code";
        Open := TRUE;
        "Serial No." := NSReservationEntry."Serial No.";
        "Lot No." := NSReservationEntry."Lot No.";
        "Warranty Date Vendor" := NSReservationEntry."Warranty Date Vendor";
        "Warranty Code Vendor" := NSReservationEntry."Warranty Code Vendor";
        "Warranty Start Date Vendor" := NSReservationEntry."Warranty Start Date Vendor";
        "Warranty Period Vendor" := NSReservationEntry."Warranty Period Vendor";
        "Warranty Code Customer" := NSReservationEntry."Warranty Code Customer";
        "Warranty Start Date Customer" := NSReservationEntry."Warranty Start Date Customer";
        "Warranty Period Customer" := NSReservationEntry."Warranty Period Customer";
        "Warranty Date Customer" := NSReservationEntry."Warranty Date Customer";
        "Good Customs":= NSReservationEntry."Good Customs";
        "Shipment with T1" := NSReservationEntry."Shipment with T1";
        "Customs Destination Code" := NSReservationEntry."Customs Destination Code";
        "Expiration Date" := NSReservationEntry."Expiration Date";
        Quantity := -NSReservationEntry."Qty. to Handle (Base)";
        "Remaining Quantity" := Quantity;
        Positive := ("Remaining Quantity" > 0);
        "Item Tracking":= ItemTrackingMgt.ItemTrackingOption(
          NSReservationEntry."Lot No.", NSReservationEntry."Serial No.");
        "Source Type":= 0;
        "Source No.":= '';
        "Project No." := ProjDelNoteHeader."Receiving Project No.";
        NSItemTrackingEntriesApply.ApplyNSItemTrackingEntry(NSItemTrackingEntry, Item."Item Tracking Code");
        INSERT;
      END;

      WITH NSItemTrackingEntryRelation DO BEGIN
        INIT;
        "Item Tracking Entry No." := EntryNo;
        "Serial No." := NSReservationEntry."Serial No.";
        "Lot No." := NSReservationEntry."Lot No.";
        TransferFieldsProjDelNote(ProjectDeliveryNoteLine,ProjDelNoteHeader."Posting No.");
        INSERT;
      END;
    END;

    BEGIN
    END.
  }
}

