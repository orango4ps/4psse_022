OBJECT Codeunit 11012300 Import Item Data
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            PAGE.RUNMODAL(PAGE::"Import Item Data");
          END;

  }
  CODE
  {
    VAR
      ProjSetup@1100485042 : Record 315;
      InvtSetup@1100409000 : Record 313;
      ItemSetup@1100485020 : Record 11012300;
      ImportSetup@1100485019 : Record 11012301;
      ImportTradeItemRec@1100485029 : Record 11012333;
      ImportBasicItemRec@1100485037 : Record 11012334;
      TradeItemRec@1100485028 : Record 11012317;
      BasicItemRec@1100485036 : Record 11012316;
      PriceHistRec@1100485018 : Record 11012315;
      DiscHistRec@1100485045 : Record 11012312;
      VendorRec@1100485016 : Record 11012304;
      ManufacturerRec@1100485015 : Record 11012304;
      UbimRec@1100485039 : Record 11012302;
      ReplaceItemRec@1100485014 : Record 11012322;
      MessageRec@1100525016 : Record 11012738;
      TempMessageRec@1100525012 : TEMPORARY Record 11012738;
      BasicErrorRec@1100485034 : Record 11012336;
      TradeErrorRec@1100485066 : Record 11012337;
      TmpExcelBufRec@1100525013 : TEMPORARY Record 370;
      LogRec@1100485032 : Record 11012335;
      MutCode@1100485011 : Text[30];
      ProcCode@1100485010 : Text[30];
      DelivCode@1100485009 : Text[30];
      MpCode@1100485008 : Text[30];
      TextLine@1100485007 : Text[1000];
      Window@1100485006 : Dialog;
      LinesRead@1100485005 : Integer;
      LinesProcessed@1100485062 : Integer;
      CommitCounter@1100485004 : Integer;
      CharsRead@1100485003 : Integer;
      RecordExists@1100485001 : Boolean;
      LastUpdateTime@1100485000 : Time;
      Text001@1100485026 : TextConst 'ENU=Import ...\\;NOR=Importer...\\;SVE=Importera...\\';
      Text002@1100485025 : TextConst 'ENU=File Name     #1#######################\\;NOR=Filnavn     #1#######################\\;SVE=Filnamn       #1#######################\\';
      Text003@1100485024 : TextConst 'ENU=Record          #2#######################\\;NOR=Post          #2#######################\\;SVE=Post          #2#######################\\';
      Text004@1100485023 : TextConst 'ENU=@3@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;NOR=@3@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;SVE=@3@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      CurrFile@1100485027 : File;
      MaxLines@1100485030 : Integer;
      ConvTxt@1100485040 : Text[30];
      MessBasicItem@1100485043 : Integer;
      Text017@1100485050 : TextConst 'ENU=Check ...\;NOR=Check...\;SVE=Check...\';
      Text018@1100485049 : TextConst 'ENU=Import Basic Items;NOR=Importer Fabrikantartikler;SVE=Importera basartiklar';
      Text019@1100485051 : TextConst 'ENU=Import Trade Items;NOR=Importer katalogartikler;SVE=Importera skaffningsartiklar';
      Text020@1100485052 : TextConst 'ENU=Check Basic Items;NOR=Kontroller Fabrikantartikler;SVE=Kontrollera basartiklar';
      Text021@1100485053 : TextConst 'ENU=Check Trade Items;NOR=Kontroller katalogartikler;SVE=Kontrollera skaffningsartiklar';
      Text022@1100485054 : TextConst 'ENU=Update Basic Items;NOR=Oppdater Fabrikantartikler;SVE=Uppdatera basartiklar';
      Text023@1100485055 : TextConst 'ENU=Update Trade Items;NOR=Oppdater katalogartikler;SVE=Uppdatera skaffningsartiklar';
      Text024@1100485056 : TextConst 'ENU=Update ...\;NOR=Oppdater...\;SVE=Uppdatera...\';
      MessTradeItem@1100485021 : Integer;
      ItemSearchMgt@1100485063 : Codeunit 11012301;
      CalcItemPrice@1100485065 : Codeunit 11012303;
      ItemMgt@1100485012 : Codeunit 11012033;
      StringFunctions@1100528400 : Codeunit 11012273;
      MaxPriceDiff@1100485061 : Decimal;
      ActualPriceDiff@1100525017 : Decimal;
      ActualPriceOld@1100525023 : Decimal;
      ActualPriceNew@1100525024 : Decimal;
      Text100@1100525002 : TextConst 'ENU=Invalid Value for %1 %2.';
      Text101@1100525003 : TextConst 'ENU=%1 changed from %2 to %3.';
      Text102@1100525004 : TextConst 'ENU=Invalid Date %1.;SVE=Ogiltigt datum %1.';
      Text103@1100525014 : TextConst 'ENU=Invalide date for %1 %2m, date illed with %3.';
      Text104@1100525007 : TextConst 'ENU=%1 is not filled.;NOR=%1 er ikke fylt ut.;SVE=%1 har inte fyllts i.';
      Text105@1100525008 : TextConst 'ENU=Item expired.';
      Text106@1100525011 : TextConst 'ENU=New price %1 differs from old price %3 with %2.';
      Text106a@1100525022 : TextConst 'ENU=New price %1 differs from future price %3 with %2.';
      Text107@1100528901 : TextConst 'ENU=New discount %1 differs from old discount %3 with %2.';
      Text108@1100525015 : TextConst 'ENU=Trade Item refers to Item Relation with other Base Unit of Measure: check Item Ledger Entry.';
      Text200@1100525019 : TextConst 'ENU=Vendor %1 not present in table %2.;SVE=Leverant”r %1 finns inte i tabell %2.';
      Text201@1100525018 : TextConst 'ENU=Manufacturer %1 not present in table %2.;SVE=Tillverkare %1 finns inte i tabell %2.';
      Text202@1100525005 : TextConst 'ENU=Trade Items of %1 will be skipped.';
      Text203@1100525006 : TextConst 'ENU=Basic Items of  %1 will be skipped.';
      Text204@1100525009 : TextConst 'ENU=%1 %2 not present, Item skipped.';
      Text205@1100525010 : TextConst 'ENU=%1 %2 not selected for update, Item skipped.';
      Text206@1100525020 : TextConst 'ENU=%1 %2 not present for Vendor %3.;SVE=%1 %2 finns inte f”r leverant”r %3.';
      MaxDiscDiff@1100528900 : Decimal;
      StartDateLog@1100525021 : DateTime;
      Text207@1100528600 : TextConst 'ENU=%1 is set to 0.;SVE=%1 „r satt till 0.';
      Text207b@1100285500 : TextConst 'ENU=Net Price is higher than Gross Price for Trade Item %1.';
      Text208@1100528401 : TextConst 'ENU=%1 %2 does not exist.;NOR=%1 %2 finnes ikke.;SVE=%1 %2 finns inte.';

    PROCEDURE ImportBasicItems@1100485008();
    VAR
      LastLine@1100525000 : Integer;
      CurrFileLength@1100525001 : BigInteger;
    BEGIN
      SetVars;

      IF ImportSetup."Delete Existing Import Data" THEN BEGIN
        ImportBasicItemRec.DELETEALL;
        BasicErrorRec.DELETEALL;
      END ELSE BEGIN
        IF ImportBasicItemRec.FINDLAST THEN
          LastLine := ImportBasicItemRec."Line No.";
      END;
      COMMIT;

      StartDateLog := CURRENTDATETIME;

      LinesRead := 0;
      LinesProcessed := 0;
      CommitCounter := 0;
      LastUpdateTime := TIME;

      OpenFile(ItemSetup."Pathname Files Item Data", ItemSetup."Basic Items", CurrFileLength);
      OpenWindow(Text001 + Text002 + Text003 + Text004, BasicItemRec.TABLECAPTION);

      WHILE CurrFile.POS <> CurrFile.LEN DO BEGIN
        ReadLineFromFile(CurrFileLength);

        WITH ImportBasicItemRec DO BEGIN
          INIT;
          "Line No." := LastLine + 1;
          LastLine := "Line No.";
          MutCode := StripSpaces(COPYSTR(TextLine,1,1));
          "Product Code" := StripSpaces(COPYSTR(TextLine,2,20));
          Manufacturer := StripSpaces(COPYSTR(TextLine,22,13));
          "Product Group" := StripSpaces(COPYSTR(TextLine,325,4));

          "GTIN Code" := StripSpaces(COPYSTR(TextLine,35,14));
          ConvTxt := ConvDateForBasicItem(ImportBasicItemRec,COPYSTR(TextLine,49,8));
          IF NOT EVALUATE("Starting Date", ConvTxt) THEN BEGIN
            WriteBasicMessage(ImportBasicItemRec,STRSUBSTNO(Text103,FIELDCAPTION("Starting Date"),ConvTxt,TODAY),
              0,FALSE,'Text103',FIELDNO("Starting Date"));
            "Starting Date" := TODAY;
          END;
          "Product Description" := StripSpaces(COPYSTR(TextLine,57,50));
          "Product Description" := StringFunctions.DeleteInvalidXMLCharacters("Product Description");
          "Product Description 2" := StripSpaces(COPYSTR(TextLine,107,20));
          "Product Description 2" := StringFunctions.DeleteInvalidXMLCharacters("Product Description 2");
          "Status Code" := StripSpaces(COPYSTR(TextLine,127,3));
          "GTIN Code (Successor)" := StripSpaces(COPYSTR(TextLine,130,14));
          "Product Code (Successor)" := StripSpaces(COPYSTR(TextLine,144,20));
          "GTIN Code (Predecessor)" := StripSpaces(COPYSTR(TextLine,164,14));
          "Product Code (Predecessor)" := StripSpaces(COPYSTR(TextLine,178,20));
          ConvTxt := ConvDecimal(COPYSTR(TextLine,198,19));
          IF NOT EVALUATE("Net Weight", ConvTxt) THEN
            WriteBasicMessage(ImportBasicItemRec,STRSUBSTNO(Text100,FIELDCAPTION("Net Weight"),ConvTxt),
              0,FALSE,'Text100',FIELDNO("Net Weight"));
          "Weight ID" := StripSpaces(COPYSTR(TextLine,217,3));
          "Item Brand" := StripSpaces(COPYSTR(TextLine,220,35));
          "Item Series" := StripSpaces(COPYSTR(TextLine,255,35));
          "Item Type" := StripSpaces(COPYSTR(TextLine,290,35));
          "Product Group" := StripSpaces(COPYSTR(TextLine,325,4));
          "Product Group Line No." := StripSpaces(COPYSTR(TextLine,329,3));
          ProjSetup.StripZero("Product Group Line No.");

          CheckAlternativeManufacturer(Manufacturer,"Alternative Manufacturer");

          CASE ItemSetup."Adjust Item Description" OF
            ItemSetup."Adjust Item Description"::ToUpper:
              BEGIN
                "Product Description" := UPPERCASE("Product Description");
                "Product Description 2" := UPPERCASE("Product Description 2");
                "Item Type" := UPPERCASE("Item Type");
                "Item Series" := UPPERCASE("Item Series");
                "Item Brand" := UPPERCASE("Item Brand");
              END;
            ItemSetup."Adjust Item Description"::ToLower:
              BEGIN
                "Product Description" := LOWERCASE("Product Description");
                "Product Description 2" := LOWERCASE("Product Description 2");
                "Item Type" := LOWERCASE("Item Type");
                "Item Series" := LOWERCASE("Item Series");
                "Item Brand" := LOWERCASE("Item Brand");
              END;
          END;

          Expired := (MutCode = '2');
          INSERT;

          CommitCounter := CommitCounter + 1;
          HandleCommit(BasicItemRec.TABLECAPTION);
        END;
      END;

      CloseWindow;
      CloseFile;

      LogRec.UpdateLogbook(Text018, LinesRead, 0, 0, StartDateLog);
      COMMIT;
    END;

    PROCEDURE ImportTradeItems@1100485000();
    VAR
      LastLine@1100525000 : Integer;
      CurrFileLength@1100525001 : BigInteger;
    BEGIN
      SetVars;

      IF ImportSetup."Delete Existing Import Data" THEN BEGIN
        ImportTradeItemRec.SETFILTER("Import Type", '<>%1', ImportTradeItemRec."Import Type"::"Web Service");
        ImportTradeItemRec.DELETEALL;
        ImportTradeItemRec.SETRANGE("Import Type");
        TradeErrorRec.SETFILTER("Import Type", '<>%1', TradeErrorRec."Import Type"::"Web Service");
        TradeErrorRec.DELETEALL;
        TradeErrorRec.SETRANGE("Import Type");
      END;
      IF ImportTradeItemRec.FINDLAST THEN
        LastLine := ImportTradeItemRec."Line No.";

      COMMIT;

      StartDateLog := CURRENTDATETIME;

      LinesRead := 0;
      LinesProcessed := 0;
      CommitCounter := 0;
      LastUpdateTime := TIME;

      OpenFile(ItemSetup."Pathname Files Item Data", ItemSetup."Trade Items", CurrFileLength);
      OpenWindow(Text001 + Text002 + Text003 + Text004, TradeItemRec.TABLECAPTION);

      WHILE CurrFile.POS <> CurrFile.LEN DO BEGIN
        ReadLineFromFile(CurrFileLength);

        LastLine += 1;
        ImportTradeItem(LastLine, TextLine);

        CommitCounter += 1;
        HandleCommit(TradeItemRec.TABLECAPTION);
      END;

      CloseWindow;
      CloseFile;

      LogRec.UpdateLogbook(Text019, LinesRead, 0, 0, StartDateLog);
      COMMIT;
    END;

    PROCEDURE ImportTradeItem@1100525006(LastLine@1100525000 : Integer;ItemTextLine@1100525001 : Text);
    BEGIN
      WITH ImportTradeItemRec DO BEGIN
        INIT;
        "Line No." := LastLine;
        MutCode := StripSpaces(COPYSTR(ItemTextLine,1,1));
        "Item Code" := StripSpaces(COPYSTR(ItemTextLine,2,20));
        Vendor := StripSpaces(COPYSTR(ItemTextLine,22,13));

        "GTIN Code (Item)" := StripSpaces(COPYSTR(ItemTextLine,35,14));
        ConvTxt := ConvDateForTradeItem(ImportTradeItemRec,COPYSTR(ItemTextLine,49,8));
        IF NOT EVALUATE("Starting Date Item", ConvTxt) THEN BEGIN
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text103,FIELDCAPTION("Starting Date Item"),ConvTxt,TODAY),
            0,FALSE,'Text103',FIELDNO("Starting Date Item"));
          "Starting Date Item" := TODAY;
        END;
        DelivCode := StripSpaces(COPYSTR(ItemTextLine,57,3));
        ProcCode :=  StripSpaces(COPYSTR(ItemTextLine,60,3));
        "Status Code" := StripSpaces(COPYSTR(ItemTextLine,63,3));
        "GTIN Code (Successor)" := StripSpaces(COPYSTR(ItemTextLine,66,14));
        "Item Code (Successor)" := StripSpaces(COPYSTR(ItemTextLine,80,20));
        "GTIN Code (Predecessor)" := StripSpaces(COPYSTR(ItemTextLine,100,14));
        "Item Code (Predecessor)" := StripSpaces(COPYSTR(ItemTextLine,114,20));
        ConvTxt := ConvDecimal(COPYSTR(ItemTextLine,134,16));
        IF NOT EVALUATE("Application Unit Quantity",ConvTxt,9) THEN
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text100,FIELDCAPTION("Application Unit Quantity"),ConvTxt),
            0,FALSE,'Text100',FIELDNO("Application Unit Quantity"));
        "Application ID" := StripSpaces(COPYSTR(ItemTextLine,150,3));
        Manufacturer := StripSpaces(COPYSTR(ItemTextLine,153,13));
        "Product Code" := StripSpaces(COPYSTR(ItemTextLine,166,20));
        "GTIN Code (Product)" := StripSpaces(COPYSTR(ItemTextLine,186,14));
        "Item Code (Manufacturer)" := StripSpaces(COPYSTR(ItemTextLine,200,20));
        "GTIN Code (Manufacturer)" := StripSpaces(COPYSTR(ItemTextLine,220,14));
        "Delivery Group Code" := StripSpaces(COPYSTR(ItemTextLine,234,17));
        "CBS Code" := StripSpaces(COPYSTR(ItemTextLine,251,17));
        "Item Description" := StripSpaces(COPYSTR(ItemTextLine,268,50));
        "Item Description" := StringFunctions.DeleteInvalidXMLCharacters("Item Description");
        "Item Description 2" := StripSpaces(COPYSTR(ItemTextLine,318,20));
        "Item Description 2" := StringFunctions.DeleteInvalidXMLCharacters("Item Description 2");
        "Packaging Code" := StripSpaces(COPYSTR(ItemTextLine,338,3));
        ConvTxt := ConvDecimal(COPYSTR(ItemTextLine,341,19));
        IF NOT EVALUATE("Gross Weight", ConvTxt,9) THEN
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text100,FIELDCAPTION("Gross Weight"),ConvTxt),
            0,FALSE,'Text100',FIELDNO("Gross Weight"));
        "Weight ID" := StripSpaces(COPYSTR(ItemTextLine,360,3));
        ConvTxt := ConvDecimal(COPYSTR(ItemTextLine,363,19));
        IF NOT EVALUATE(Height, ConvTxt,9) THEN
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text100,FIELDCAPTION(Height),ConvTxt),
            0,FALSE,'Text100',FIELDNO(Height));
        ConvTxt := ConvDecimal(COPYSTR(ItemTextLine,382,19));
        IF NOT EVALUATE(Length, ConvTxt,9) THEN
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text100,FIELDCAPTION(Length),ConvTxt),
            0,FALSE,'Text100',FIELDNO(Length));
        ConvTxt := ConvDecimal(COPYSTR(ItemTextLine,401,19));
        IF NOT EVALUATE(Width, ConvTxt,9) THEN
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text100,FIELDCAPTION(Width),ConvTxt),
            0,FALSE,'Text100',FIELDNO(Width));
        "Size ID" := StripSpaces(COPYSTR(ItemTextLine,420,3));
        "Order ID" := StripSpaces(COPYSTR(ItemTextLine,423,3));
        ConvTxt := ConvDecimal(COPYSTR(ItemTextLine,426,16));
        IF NOT EVALUATE("Minimum Order Quantity",ConvTxt,9) THEN
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text100,FIELDCAPTION("Minimum Order Quantity"),ConvTxt),
            0,FALSE,'Text100',FIELDNO("Minimum Order Quantity"));
        ConvTxt := ConvDecimal(COPYSTR(ItemTextLine,442,16));
        IF NOT EVALUATE("Lot Size Quantity", ConvTxt,9) THEN
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text100,FIELDCAPTION("Lot Size Quantity"),ConvTxt),
            0,FALSE,'Text100',FIELDNO("Lot Size Quantity"));
        ConvTxt := ConvDecimal(COPYSTR(ItemTextLine,458,15));
        IF NOT EVALUATE("Delivery Period", ConvTxt) THEN
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text100,FIELDCAPTION("Delivery Period"),ConvTxt),
            0,FALSE,'Text100',FIELDNO("Delivery Period"));
        "Delivery Time ID" := StripSpaces(COPYSTR(ItemTextLine,473,6));
        ConvTxt := ConvDateForTradeItem(ImportTradeItemRec,COPYSTR(ItemTextLine,479,8));
        IF NOT EVALUATE("Starting Date Price", ConvTxt) THEN BEGIN
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text103,FIELDCAPTION("Starting Date Price"),ConvTxt,TODAY),
            0,FALSE,'Text103',FIELDNO("Starting Date Price"));
          "Starting Date Price" := TODAY;
        END;
        "VAT Code" := StripSpaces(COPYSTR(ItemTextLine,487,1));
        ConvTxt := ConvDecimal(COPYSTR(ItemTextLine,488,18));
        IF NOT EVALUATE("VAT %", ConvTxt,9) THEN
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text100,FIELDCAPTION("VAT %"),ConvTxt),
            0,FALSE,'Text100',FIELDNO("VAT %"));
        MpCode := StripSpaces(COPYSTR(ItemTextLine,506,3));
        ConvTxt := ConvDecimal(COPYSTR(ItemTextLine,509,16));
        IF NOT EVALUATE("Gross Price Operation Surch.",ConvTxt,9) THEN
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text100,FIELDCAPTION("Gross Price Operation Surch."),ConvTxt),
            0,FALSE,'Text100',FIELDNO("Gross Price Operation Surch."));
        "Discount Group Code" := StripSpaces(COPYSTR(ItemTextLine,525,35));
        ConvTxt := ConvDecimal(COPYSTR(ItemTextLine,560,16));
        IF NOT EVALUATE("Gross Price",ConvTxt,9) THEN
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text100,FIELDCAPTION("Gross Price"),ConvTxt),
            0,FALSE,'Text100',FIELDNO("Gross Price"));
        "Price On Demand" := StripSpaces(COPYSTR(ItemTextLine,560,16)) = '';
        ConvTxt := ConvDecimal(COPYSTR(ItemTextLine,576,10));
        IF NOT EVALUATE("Quantity Per Price",ConvTxt,9) THEN
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text100,FIELDCAPTION("Quantity Per Price"),ConvTxt),
            0,FALSE,'Text100',FIELDNO("Quantity Per Price"));
        "Price ID" := StripSpaces(COPYSTR(ItemTextLine,586,3));
        ConvTxt := ConvDecimal(COPYSTR(ItemTextLine,589,16));
        IF NOT EVALUATE("Net Price",ConvTxt,9) THEN
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text100,FIELDCAPTION("Net Price"),ConvTxt),
            0,FALSE,'Text100',FIELDNO("Net Price"));
        ConvTxt := ConvDecimal(COPYSTR(ItemTextLine,605,16));
        IF NOT EVALUATE("Factor Price-Purchase Unit",ConvTxt,9) THEN
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text100,FIELDCAPTION("Factor Price-Purchase Unit"),ConvTxt),
            0,FALSE,'Text100', FIELDNO("Factor Price-Purchase Unit"));
        "Currency Code" := StripSpaces(COPYSTR(ItemTextLine,621,3));

        CheckAlternativeVendor(Vendor,"Alternative Vendor");
        CheckAlternativeManufacturer(Manufacturer,"Alternative Manufacturer");

        CASE ItemSetup."Adjust Item Description" OF
          ItemSetup."Adjust Item Description"::ToUpper:
            BEGIN
              "Item Description" := UPPERCASE("Item Description");
              "Item Description 2" := UPPERCASE("Item Description 2");
            END;
          ItemSetup."Adjust Item Description"::ToLower:
            BEGIN
              "Item Description" := LOWERCASE("Item Description");
              "Item Description 2" := LOWERCASE("Item Description 2");
            END;
        END;

        Processable := (ProcCode = 'YES');
        Deliverable := (DelivCode = 'YES');
        "Price Manufacturer" := (MpCode = 'YES');
        Expired := (MutCode = '2');

        "Import Date-Time" := ImportSetup."Import Date-Time";
        INSERT;
      END;
    END;

    PROCEDURE CheckBasicItems@1100485024();
    BEGIN
      SetVars;
      StartDateLog := CURRENTDATETIME;

      LinesRead := 0;
      LinesProcessed := 0;
      CommitCounter := 0;
      LastUpdateTime := TIME;

      OpenWindow(Text017 + Text002 + Text003 + Text004, BasicItemRec.TABLECAPTION);

      WITH ImportBasicItemRec DO BEGIN
        BasicErrorRec.SETRANGE("Process Step",BasicErrorRec."Process Step"::Check);
        BasicErrorRec.DELETEALL;
        BasicErrorRec.SETRANGE("Process Step");
        SETCURRENTKEY(Manufacturer,"Product Code");
        IF FINDSET THEN BEGIN
          MaxLines := COUNT;
          REPEAT
            LinesRead := LinesRead + 1;
            IF (TIME > LastUpdateTime + 1000) THEN BEGIN
              UpdateWindowImport(LinesRead, LinesRead, MaxLines);
              LastUpdateTime := TIME;
            END;

            BasicErrorRec.SETCURRENTKEY("Product Code",Manufacturer);
            BasicErrorRec.SETRANGE("Product Code","Product Code");
            BasicErrorRec.SETRANGE(Manufacturer,Manufacturer);
            IF NOT BasicErrorRec.FINDFIRST THEN BEGIN
              Warnings := FALSE;
              MODIFY;
            END;
            BasicErrorRec.RESET;

            IF Manufacturer <> ManufacturerRec.Code THEN BEGIN
              IF NOT ManufacturerRec.GET(Manufacturer) THEN
                WriteBasicMessage(ImportBasicItemRec,STRSUBSTNO(Text201,Manufacturer,ManufacturerRec.TABLECAPTION),
                  1,TRUE,'Text201',0);
            END;

            IF "Product Group" <> UbimRec.Code THEN BEGIN
              IF NOT UbimRec.GET("Product Group") THEN
                WriteBasicMessage(ImportBasicItemRec,STRSUBSTNO(Text204, FIELDCAPTION("Product Group"),"Product Group"),
                  1,TRUE,'Text204',0);
            END;
            IF NOT ItemSetup.LegalCharacter("Product Code") THEN
              WriteBasicMessage(ImportBasicItemRec,STRSUBSTNO(Text100,FIELDCAPTION("Product Code"),"Product Code"),
                1,TRUE,'Text100',FIELDNO("Product Code"));

            CommitCounter := CommitCounter + 1;
            HandleCommit(BasicItemRec.TABLECAPTION);
          UNTIL NEXT = 0;
        END;
      END;

      CloseWindow;
      LogRec.UpdateLogbook(Text020, LinesRead, 0, 0, StartDateLog);
    END;

    PROCEDURE CheckTradeItems@1100485030();
    VAR
      RecordExists@1100528400 : Boolean;
      MessageTradeItemExists@1100528401 : Boolean;
    BEGIN
      SetVars;

      StartDateLog := CURRENTDATETIME;

      LinesRead := 0;
      LinesProcessed := 0;
      CommitCounter := 0;
      LastUpdateTime := TIME;

      ItemSetup.GET;

      OpenWindow(Text017 + Text002 + Text003 + Text004,  TradeItemRec.TABLECAPTION);

      WITH ImportTradeItemRec DO BEGIN
        TradeErrorRec.SETRANGE("Process Step",TradeErrorRec."Process Step"::Check);
        TradeErrorRec.SETFILTER("Import Type", '<>%1', TradeErrorRec."Import Type"::"Web Service");
        TradeErrorRec.DELETEALL;
        TradeErrorRec.SETRANGE("Process Step");
        TradeErrorRec.SETRANGE("Import Type");

        SETCURRENTKEY("Import Type", Vendor, "Item Code");
        SETFILTER("Import Type", '<>%1', "Import Type"::"Web Service");
        IF FINDSET THEN BEGIN
          MaxLines := COUNT;
          REPEAT
            LinesRead := LinesRead + 1;
            IF (TIME > LastUpdateTime + 1000) THEN BEGIN
              UpdateWindowImport(LinesRead, LinesRead, MaxLines);
              LastUpdateTime := TIME;
            END;

            IF "Alternative Vendor" <> '' THEN
              RecordExists := TradeItemRec.GET("Alternative Vendor","Item Code")
            ELSE
              RecordExists := TradeItemRec.GET(Vendor,"Item Code");
            CheckTradeItem(RecordExists, MessageTradeItemExists);

            CommitCounter := CommitCounter + 1;
            HandleCommit(TradeItemRec.TABLECAPTION);
          UNTIL NEXT = 0;
        END;
        SETRANGE("Import Type");
      END;
      CloseWindow;
      LogRec.UpdateLogbook(Text021, LinesRead, 0, 0, StartDateLog);
    END;

    PROCEDURE DoChecksOnTradeItem@1100528420(ImportTradeItem@1100528400 : Record 11012333;TradeItemBeforeImport@1100528401 : Record 11012317;VAR MessageTradeItemExists@1100528404 : Boolean);
    VAR
      RecordExistedBeforeImport@1100528402 : Boolean;
    BEGIN
      SetVars;
      ImportTradeItemRec := ImportTradeItem;
      TradeItemRec := TradeItemBeforeImport;
      RecordExistedBeforeImport := (TradeItemBeforeImport."Item Code" <> '');
      CheckTradeItem(RecordExistedBeforeImport, MessageTradeItemExists);
    END;

    LOCAL PROCEDURE CheckTradeItem@1100528401(RecordExistedBeforeImport@1100528400 : Boolean;VAR MessageTradeItemExists@1100528401 : Boolean);
    BEGIN
      WITH ImportTradeItemRec DO BEGIN
        TradeErrorRec.SETCURRENTKEY("Item Code",Vendor);
        TradeErrorRec.SETRANGE("Item Code","Item Code");
        TradeErrorRec.SETRANGE(Vendor,Vendor);
        TradeErrorRec.SETRANGE("Import Type", "Import Type");

        IF NOT TradeErrorRec.FINDFIRST THEN BEGIN
          Warnings := FALSE;
          MODIFY;
        END;
        TradeErrorRec.RESET;

      // ITERO.MH SYM-044 150203 <<
        IF ("Gross Price" <> 0) AND ("Net Price" <> 0) AND ("Gross Price" < "Net Price") THEN BEGIN
          "Gross Price" := "Net Price";
          MODIFY;
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text207b, "Item Code"),
            1,TRUE,'Text207b',0);
        END;
      // ITERO.MH SYM-044 150203 >>

        IF Vendor <> VendorRec.Code THEN BEGIN
          IF NOT VendorRec.GET(Vendor) THEN
            WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text200,Vendor,VendorRec.TABLECAPTION),
              1,TRUE,'Text200',0);
        END;

        IF NOT ItemSetup.LegalCharacter("Item Code") THEN
          WriteTradeMessage(ImportTradeItemRec,STRSUBSTNO(Text100,FIELDCAPTION("Item Code"),"Item Code"),
            1,TRUE,'Text100',FIELDNO("Item Code"));

        CheckDiscount;
        CheckPriceHistory;

        CheckNewTradeItem(ImportTradeItemRec,TradeItemRec);
        IF RecordExistedBeforeImport THEN
          CheckOldTradeItem(ImportTradeItemRec,TradeItemRec);
        MessageTradeItemExists := Warnings;
      END;
    END;

    PROCEDURE CheckOldTradeItem@1100485018(VAR lImportTradeItemRec@1100485000 : Record 11012333;lTradeItemRec@1100485001 : Record 11012317);
    VAR
      lvOldPrice@1100485002 : Decimal;
      lvNewPrice@1100485003 : Decimal;
      lvPriceHistRec@1100485004 : Record 11012315;
      ChargeRec@1100528901 : Record 11012332;
      ImportChargeRec@1100528900 : Record 11012740;
      EtimVendorRec@1100525003 : Record 11012313;
      CurrVendor@1100525004 : Code[20];
      lvOldDisc@1100528902 : Decimal;
      lvNewDisc@1100528903 : Decimal;
      lvStartDate@1100528905 : Date;
      ItemCode@1100525000 : Code[20];
      ItemRec@1100525001 : Record 27;
      ApplicationUnit@1100525002 : Text[30];
      NextPrice@1100525005 : Decimal;
      OldPriceFound@1100525006 : Boolean;
      NextPriceFound@1100525007 : Boolean;
    BEGIN
      WITH lImportTradeItemRec DO BEGIN
        IF "Product Code" <> lTradeItemRec."Product Code" THEN
          WriteTradeMessage(lImportTradeItemRec,
            STRSUBSTNO(Text101,FIELDCAPTION("Product Code"),lTradeItemRec."Product Code","Product Code"),
              1,TRUE,'Text101',FIELDNO("Product Code"));
        IF "Application ID" <> lTradeItemRec."Application ID" THEN
          WriteTradeMessage(lImportTradeItemRec,
            STRSUBSTNO(Text101,FIELDCAPTION("Application ID"),lTradeItemRec."Application ID","Application ID"),
              1,TRUE,'Text101',FIELDNO("Application ID"));
        IF "Order ID" <> lTradeItemRec."Order ID" THEN
          WriteTradeMessage(lImportTradeItemRec,
            STRSUBSTNO(Text101,FIELDCAPTION("Order ID"),lTradeItemRec."Order ID","Order ID"),
              1,TRUE,'Text101',FIELDNO("Order ID"));
        IF "Price ID" <> lTradeItemRec."Price ID" THEN
          WriteTradeMessage(lImportTradeItemRec,
            STRSUBSTNO(Text101,FIELDCAPTION("Price ID"),lTradeItemRec."Price ID","Price ID"),
              1,TRUE,'Text101',FIELDNO("Price ID"));
        IF "Discount Group Code" <> lTradeItemRec."Discount Group Code" THEN
          WriteTradeMessage(lImportTradeItemRec,
            STRSUBSTNO(Text101,FIELDCAPTION("Discount Group Code"),lTradeItemRec."Discount Group Code","Discount Group Code"),
              1,TRUE,'Text101',FIELDNO("Discount Group Code"));

        IF MaxPriceDiff = 0 THEN  //assumed that CheckDiscount is executed before
          MaxPriceDiff := ItemSetup."Maximum % Price Difference";
        IF MaxPriceDiff <> 0 THEN BEGIN
          lvPriceHistRec.SETRANGE(Vendor, lTradeItemRec.Vendor);
          lvPriceHistRec.SETRANGE("Item Code", lTradeItemRec."Item Code");
          IF "Starting Date Price" = 0D THEN
            lvStartDate := TODAY
          ELSE
            lvStartDate := "Starting Date Price";
          lvPriceHistRec.SETFILTER("Starting Date", '..%1', lvStartDate);
          lvPriceHistRec.SETRANGE("Future Price", FALSE);

          lvPriceHistRec.SETRANGE("Price List Code","Price List Code"); // LAHE 130705 new primKey

          IF lvPriceHistRec.FINDLAST THEN BEGIN
            OldPriceFound := TRUE;
            IF "Source Type" = "Source Type"::sib THEN
              lvOldPrice := lvPriceHistRec."Net Price"
            ELSE
              lvOldPrice := lvPriceHistRec."Gross Price";
            IF lvPriceHistRec."Quantity Per Price" <> 0 THEN
              lvOldPrice := lvOldPrice / lvPriceHistRec."Quantity Per Price";
            IF lTradeItemRec."Application Unit Quantity" <> 0 THEN
              lvOldPrice := lvOldPrice / lTradeItemRec."Application Unit Quantity";
          END;
          IF OldPriceFound THEN BEGIN
            IF "Source Type" = "Source Type"::sib THEN
              lvNewPrice := "Net Price"
            ELSE
              lvNewPrice := "Gross Price";
            IF "Quantity Per Price" <> 0 THEN
              lvNewPrice := lvNewPrice / "Quantity Per Price";
            IF "Application Unit Quantity" <> 0 THEN
              lvNewPrice := lvNewPrice / "Application Unit Quantity";
            //
            ActualPriceDiff := CalcPercDiff(lvNewPrice,lvOldPrice);
            ActualPriceOld := lvOldPrice;
            ActualPriceNew := lvNewPrice;
            IF ActualPriceDiff > MaxPriceDiff THEN
              WriteTradeMessage(lImportTradeItemRec,
                STRSUBSTNO(Text106,lvNewPrice,MaxPriceDiff,lvOldPrice),1,TRUE,'Text106',0);
          END;

          lvPriceHistRec.SETRANGE("Future Price");
          IF ImportSetup."Price History Trade Items" THEN BEGIN
            //this option does not check price history (current price included by ArtLev.txt) but future price (ArtPr2.txt)
            lvPriceHistRec.SETFILTER("Starting Date", '>%1', lvStartDate);
            IF lvPriceHistRec.FINDFIRST THEN BEGIN
              NextPriceFound := TRUE;
              IF "Source Type" = "Source Type"::sib THEN
                NextPrice := lvPriceHistRec."Net Price"
              ELSE
                NextPrice := lvPriceHistRec."Gross Price";
              IF lvPriceHistRec."Quantity Per Price" <> 0 THEN
                NextPrice := NextPrice / lvPriceHistRec."Quantity Per Price";
              IF lTradeItemRec."Application Unit Quantity" <> 0 THEN
                NextPrice := NextPrice / lTradeItemRec."Application Unit Quantity";
            END;
            IF NextPriceFound THEN BEGIN
              IF "Source Type" = "Source Type"::sib THEN
                lvNewPrice := "Net Price"
              ELSE
                lvNewPrice := "Gross Price";
              IF "Quantity Per Price" <> 0 THEN
                lvNewPrice := lvNewPrice / "Quantity Per Price";
              IF "Application Unit Quantity" <> 0 THEN
                lvNewPrice := lvNewPrice / "Application Unit Quantity";
              //
              ActualPriceDiff := CalcPercDiff(lvNewPrice,NextPrice);
              ActualPriceOld := lvNewPrice;
              ActualPriceNew := NextPrice;
              IF ActualPriceDiff > MaxPriceDiff THEN
                WriteTradeMessage(lImportTradeItemRec,
                  STRSUBSTNO(Text106a,lvNewPrice,MaxPriceDiff,NextPrice),1,TRUE,'Text106a',0);
            END;
          END;
        END;

        IF "Source Type" = "Source Type"::sib THEN BEGIN
          MaxDiscDiff := ItemSetup."Maximum % Discount Difference";
          IF "Alternative Vendor" <> '' THEN
            CurrVendor := "Alternative Vendor"
          ELSE
            CurrVendor := Vendor;
          IF NOT EtimVendorRec.GET(CurrVendor) THEN EtimVendorRec.INIT;
          IF EtimVendorRec."Discount/Charge Code" = '' THEN
            EtimVendorRec."Discount/Charge Code" := 'TD';

          ImportChargeRec.RESET;
          ImportChargeRec.SETRANGE(Vendor, Vendor);
          ImportChargeRec.SETRANGE("Item Code", "Item Code");
          ImportChargeRec.SETRANGE("Discount/Charge Code", EtimVendorRec."Discount/Charge Code");
          IF ImportChargeRec.FINDLAST THEN BEGIN
            lvStartDate := ImportChargeRec."Starting Date";
            ImportChargeRec.SETRANGE("Starting Date", lvStartDate);
            IF ImportChargeRec.FINDSET THEN BEGIN
              REPEAT
                IF lvNewDisc = 0 THEN
                  lvNewDisc := ImportChargeRec.Percentage
                ELSE
                  lvNewDisc := GetDiscountPercentage(lvNewDisc, ImportChargeRec.Percentage);
              UNTIL ImportChargeRec.NEXT = 0;
            END;
            ChargeRec.RESET;
            ChargeRec.SETRANGE(Vendor, CurrVendor);
            ChargeRec.SETRANGE("Item Code", "Item Code");
            ChargeRec.SETRANGE("Discount/Charge Code", EtimVendorRec."Discount/Charge Code");
            ChargeRec.SETFILTER("Starting Date", '..%1', ImportChargeRec."Starting Date");
            IF ChargeRec.FINDLAST THEN BEGIN
              lvStartDate := ChargeRec."Starting Date";
              ChargeRec.SETRANGE("Starting Date", lvStartDate);
              IF ChargeRec.FINDSET THEN BEGIN
                REPEAT
                  IF lvOldDisc = 0 THEN
                    lvOldDisc := ChargeRec.Percentage
                  ELSE
                    lvOldDisc := GetDiscountPercentage(lvOldDisc, ChargeRec.Percentage);
                UNTIL ChargeRec.NEXT = 0;
              END;
              IF lvOldDisc - lvNewDisc > MaxDiscDiff THEN
                WriteTradeMessage(lImportTradeItemRec,
                  STRSUBSTNO(Text107,lvNewDisc,MaxDiscDiff,lvOldDisc),1,TRUE,'Text107',0);
            END;
          END;
        END;

        ItemCode := lTradeItemRec.GetItemCode;
        IF ItemRec.GET(ItemCode) THEN BEGIN
          IF lImportTradeItemRec."Application ID" <> '' THEN
            ApplicationUnit :=  ItemMgt.CheckUnitConversion(lImportTradeItemRec."Application ID");
          IF ItemRec."Base Unit of Measure" <> UPPERCASE(ApplicationUnit) THEN BEGIN
            WriteTradeMessage(lImportTradeItemRec,Text108,1,TRUE,'Text108',0);
            "Exclude from update" := TRUE;
            MODIFY;
          END;
        END;

        IF Expired THEN
          WriteTradeMessage(lImportTradeItemRec,Text105,1,TRUE,'Text105',0);
      END;
    END;

    PROCEDURE CheckNewTradeItem@1210190001(VAR lImportTradeItemRec@1100485000 : Record 11012333;lTradeItemRec@1100485001 : Record 11012317);
    VAR
      DeliveryGroupRec@1210190000 : Record 11012320;
      TradeItem2@1100528400 : Record 11012317;
      VendorCode@1100528900 : Code[20];
      VendorRec@1100409000 : Record 11012304;
      DummyCode@1100409001 : Code[20];
    BEGIN
      WITH lImportTradeItemRec DO BEGIN
        IF "Alternative Vendor" <> '' THEN
          VendorCode := "Alternative Vendor"
        ELSE
          VendorCode := Vendor;

        IF "Application ID" = '' THEN
          WriteTradeMessage(lImportTradeItemRec,
            STRSUBSTNO(Text104,FIELDCAPTION("Application ID")),1,TRUE,'Text104',FIELDNO("Application ID"));
        IF "Order ID" = '' THEN
          WriteTradeMessage(lImportTradeItemRec,
            STRSUBSTNO(Text104,FIELDCAPTION("Order ID")),1,TRUE,'Text104',FIELDNO("Order ID"));
        IF "Price ID" = '' THEN
          WriteTradeMessage(lImportTradeItemRec,
            STRSUBSTNO(Text104,FIELDCAPTION("Price ID")),1,TRUE,'Text104',FIELDNO("Price ID"));

        IF NOT VendorRec.GET(VendorCode) THEN VendorRec.INIT;

        IF "Item Code (Successor)" <> '' THEN
          IF NOT TradeItem2.GET(VendorCode, "Item Code (Successor)") THEN
            WriteTradeMessage(lImportTradeItemRec,
              STRSUBSTNO(Text208,FIELDCAPTION("Item Code (Successor)"),"Item Code (Successor)"),1,
              TRUE,'Text208',FIELDNO("Item Code (Successor)"));

        IF ("Delivery Group Code" <> '') AND (ItemSetup."Apply DiscGroup as DelivGroup" = FALSE) THEN
          IF NOT DeliveryGroupRec.GET(VendorCode, "Delivery Group Code") THEN
            IF NOT TradeItemRec.CheckFormatCondition(VendorRec, VendorCode, "Delivery Group Code", DummyCode, DummyCode) THEN  //C003610
              IF NOT DeliveryGroupRec.GET('', "Delivery Group Code") THEN
                IF NOT TradeItemRec.CheckFormatCondition(VendorRec, '', "Delivery Group Code", DummyCode, DummyCode) THEN  //C003610
                  WriteTradeMessage(lImportTradeItemRec,
                    STRSUBSTNO(Text206,FIELDCAPTION("Delivery Group Code"),"Delivery Group Code",VendorCode),
                      1,TRUE,'Text206',FIELDNO("Delivery Group Code"));

        IF ("Discount Group Code" <> '') AND (ItemSetup."Apply DiscGroup as DelivGroup" = TRUE) THEN
          IF NOT DeliveryGroupRec.GET(VendorCode, "Discount Group Code") THEN
            IF NOT TradeItemRec.CheckFormatCondition(VendorRec, VendorCode, "Discount Group Code", DummyCode, DummyCode) THEN  //C003610
              IF NOT DeliveryGroupRec.GET('', "Discount Group Code") THEN
                IF NOT TradeItemRec.CheckFormatCondition(VendorRec, '', "Discount Group Code", DummyCode, DummyCode) THEN  //C003610
                  WriteTradeMessage(lImportTradeItemRec,
                    STRSUBSTNO(Text206,FIELDCAPTION("Delivery Group Code"),"Discount Group Code",VendorCode),
                      1,TRUE,'Text206',FIELDNO("Delivery Group Code"));
      END;
    END;

    PROCEDURE CalcPercDiff@1100485009(NewPrice@1100485000 : Decimal;OldPrice@1100485001 : Decimal) PercDiff : Decimal;
    BEGIN
      IF (NewPrice = 0)  AND (OldPrice <> 0) THEN
        EXIT(-100);

      IF (NewPrice <> 0) AND (OldPrice = 0) THEN
        EXIT(100);

      IF (NewPrice = 0) AND (OldPrice = 0) THEN
        EXIT(0);

      PercDiff := (OldPrice / NewPrice) * 100;
      EXIT(ABS(100-PercDiff));
    END;

    PROCEDURE CheckDiscount@1100485026();
    VAR
      TradeItem@1100528400 : Record 11012317;
      lvDiscType@1100525001 : 'Purchase,Sales';
    BEGIN
      WITH ImportTradeItemRec DO BEGIN
        MaxPriceDiff := 0;
        TradeItem.TRANSFERFIELDS(ImportTradeItemRec);
        IF "Alternative Vendor" <> '' THEN
          TradeItem.Vendor := "Alternative Vendor";
        CLEAR(DiscHistRec);
        ItemMgt.CheckDiscountLevel(TradeItem, DiscHistRec, TRUE, 0, '', TODAY, lvDiscType::Purchase);
        MaxPriceDiff := DiscHistRec."Maximum % Price Difference";
        IF (DiscHistRec.Vendor = '') AND ("Discount Group Code" <> '') THEN
          WriteTradeMessage(ImportTradeItemRec,
            STRSUBSTNO(Text206,FIELDCAPTION("Discount Group Code"),"Discount Group Code",TradeItem.Vendor),
              1,TRUE,'Text206',FIELDNO("Discount Group Code"));
      END;
    END;

    PROCEDURE CheckPriceHistory@1100528600();
    VAR
      PriceHistoryTradeItem@1100528600 : Record 11012315;
    BEGIN
      PriceHistoryTradeItem.SETRANGE(Vendor, ImportTradeItemRec.Vendor);
      PriceHistoryTradeItem.SETRANGE("Item Code", ImportTradeItemRec."Item Code");
      PriceHistoryTradeItem.SETFILTER("Starting Date", '<%1', ImportTradeItemRec."Starting Date Item");
      IF PriceHistoryTradeItem.FINDLAST THEN
        IF (PriceHistoryTradeItem."Gross Price" <> 0) AND (ImportTradeItemRec."Gross Price" = 0) THEN
          WriteTradeMessage(ImportTradeItemRec,
            STRSUBSTNO(Text207, ImportTradeItemRec.FIELDCAPTION("Gross Price")),
              1, TRUE, 'Text207', ImportTradeItemRec.FIELDNO("Gross Price"));
    END;

    PROCEDURE UpdateBasicItems@1100485013();
    BEGIN
      SetVars;
      StartDateLog := CURRENTDATETIME;

      LinesRead := 0;
      LinesProcessed := 0;
      LinesProcessed := 0;

      CommitCounter := 0;
      LastUpdateTime := TIME;

      OpenWindow(Text024 + Text002 + Text003 + Text004,  BasicItemRec.TABLECAPTION);

      WITH ImportBasicItemRec DO BEGIN
        SETCURRENTKEY(Manufacturer, "Product Code");
        IF FINDSET THEN BEGIN
          MaxLines := COUNT;
          BasicErrorRec.SETCURRENTKEY("Product Code",Manufacturer);
          REPEAT
            LinesRead := LinesRead + 1;
            IF (TIME > LastUpdateTime + 1000) THEN BEGIN
              UpdateWindowImport(LinesRead, LinesRead, MaxLines);
              LastUpdateTime := TIME;
            END;
            IF NOT "Exclude from update" AND NOT SkipManufacturer THEN BEGIN
              IF "Alternative Manufacturer" <> '' THEN
                RecordExists := BasicItemRec.GET("Alternative Manufacturer","Product Code")
              ELSE
                RecordExists := BasicItemRec.GET(Manufacturer,"Product Code");

              IF NOT RecordExists THEN
                BasicItemRec.INIT;

              BasicItemRec.TRANSFERFIELDS(ImportBasicItemRec);

              IF "Alternative Manufacturer" <> '' THEN
                BasicItemRec.Manufacturer := "Alternative Manufacturer";

              BasicItemRec.VALIDATE(Expired);

              IF RecordExists THEN
                BasicItemRec.MODIFY
              ELSE
                BasicItemRec.INSERT;

              LinesProcessed := LinesProcessed + 1;

              IF ImportSetup."Create Search Index" THEN
                ItemSearchMgt.ParseBasicItem(BasicItemRec);

              IF Expired THEN
                ReplaceItemRec.ReplaceBasicItem(BasicItemRec);

              BasicErrorRec.SETCURRENTKEY("Product Code", Manufacturer);
              BasicErrorRec.SETRANGE("Product Code","Product Code");
              BasicErrorRec.SETRANGE(Manufacturer,Manufacturer);
              BasicErrorRec.DELETEALL;

              DELETE;

              CommitCounter := CommitCounter + 1;
              HandleCommit(Text022);
            END;
          UNTIL NEXT = 0;
        END;
      END;

      BasicErrorRec.RESET;

      CloseWindow;
      LogRec.UpdateLogbook(Text022, LinesRead, LinesProcessed, 0, StartDateLog);
      COMMIT;
    END;

    PROCEDURE UpdateTradeItems@1100485010();
    VAR
      TableIsEmpty@1100485001 : Boolean;
      OldSubOperation@1100525000 : Code[20];
      NewSubOperation@1100525001 : Code[20];
      ItemRelationRec@1210190000 : Record 11012319;
      OldGtinCode@1100528000 : Code[20];
      NewGtinCode@1100528001 : Code[20];
    BEGIN
      SetVars;
      StartDateLog := CURRENTDATETIME;

      LinesRead := 0;
      LinesProcessed := 0;
      CommitCounter := 0;
      LastUpdateTime := TIME;
      OpenWindow(Text024 + Text002 + Text003 + Text004,  TradeItemRec.TABLECAPTION);

      WITH ImportTradeItemRec DO BEGIN
        SETCURRENTKEY("Import Type", Vendor, "Item Code");
        SETFILTER("Import Type", '<>%1', "Import Type"::"Web Service");
        IF FINDSET THEN BEGIN
          MaxLines := COUNT;
          TradeErrorRec.SETCURRENTKEY("Item Code",Vendor);
          IF NOT TradeItemRec.FINDFIRST THEN
            TableIsEmpty := TRUE
          ELSE
            TradeItemRec.INIT;
          REPEAT
            LinesRead := LinesRead + 1;
            IF (TIME > LastUpdateTime + 1000) THEN BEGIN
              UpdateWindowImport(LinesRead, LinesRead, MaxLines);
              LastUpdateTime := TIME;
            END;
            IF NOT "Exclude from update" AND NOT SkipVendor THEN BEGIN
              IF NOT TableIsEmpty THEN
                IF "Alternative Vendor" <> '' THEN
                  RecordExists := TradeItemRec.GET("Alternative Vendor","Item Code")
                ELSE
                  RecordExists := TradeItemRec.GET(Vendor,"Item Code");

              IF TableIsEmpty OR NOT RecordExists THEN
                TradeItemRec.INIT;

              OldSubOperation := TradeItemRec."Sub Operation Code";
              NewSubOperation := ImportTradeItemRec."Sub Operation Code";
              OldGtinCode := TradeItemRec."GTIN Code (Item)";
              NewGtinCode := ImportTradeItemRec."GTIN Code (Item)";
              TradeItemRec.TRANSFERFIELDS(ImportTradeItemRec);
              IF (NOT TestValidGtinCode(NewGtinCode)) AND (OldGtinCode <> '') THEN
                 TradeItemRec."GTIN Code (Item)" := OldGtinCode;

              //>> LAHE 130705
              TradeItemRec.VALIDATE("Cost Object","Cost Object Code"); // not in transferfields due to fieldno rules
              //<< LAHE 130705

              IF (NewSubOperation = '') AND (OldSubOperation <> '') THEN
                TradeItemRec."Sub Operation Code" := OldSubOperation;

              IF "Alternative Vendor" <> '' THEN
                TradeItemRec.Vendor := "Alternative Vendor";

              IF "Alternative Manufacturer" <> '' THEN
                TradeItemRec.Manufacturer := "Alternative Manufacturer";

              TradeItemRec.VALIDATE(Expired);

              IF TableIsEmpty OR NOT RecordExists THEN BEGIN
                IF (NOT TradeItemRec."Cost Object changed Manually") THEN
                  TradeItemRec."Cost Object" := TradeItemRec.GetDefaultCostObject(FALSE); // False: Normal Cost Object
                TradeItemRec."Cost Object (Removal)" := TradeItemRec.GetDefaultCostObject(TRUE); // True: Removal Cost Object
                TradeItemRec.GetUnitData;
              END;
              TradeItemRec.GetRefDateHistPrice;
              IF TradeItemRec."Search Argument" = '' THEN
                TradeItemRec."Search Argument" :=
                  COPYSTR(TradeItemRec."Item Description", 1, MAXSTRLEN(TradeItemRec."Search Argument"));

              IF TableIsEmpty OR NOT RecordExists THEN
                TradeItemRec.INSERT
              ELSE
                TradeItemRec.MODIFY;

              LinesProcessed := LinesProcessed + 1;

              UpdatePriceHistory;
              UpdateChargeHistory;
              UpdateDeliveryGroup;
              CheckRemovalContribution;

              IF Expired THEN
                ReplaceItemRec.ReplaceTradeItem(TradeItemRec, TRUE);

              IF ImportSetup."Update Item Data" THEN
                CalcItemPrice.ProcessTradeItem(TradeItemRec,FALSE);

              IF ImportSetup."Update Navision Items" THEN
                CalcItemPrice.ProcessItemRelation(1, ItemRelationRec, BasicItemRec, TradeItemRec);

              IF ImportSetup."Create Search Index" THEN
                ItemSearchMgt.ParseTradeItem(TradeItemRec);

              TradeErrorRec.SETCURRENTKEY("Item Code",Vendor);
              TradeErrorRec.SETRANGE("Item Code","Item Code");
              TradeErrorRec.SETRANGE(Vendor,Vendor);
              TradeErrorRec.SETRANGE("Import Type","Import Type");
              TradeErrorRec.DELETEALL;

              DELETE;

              CommitCounter := CommitCounter + 1;
              HandleCommit(Text023);
            END;
          UNTIL NEXT = 0;
        END;
        SETRANGE("Import Type");
      END;

      TradeErrorRec.RESET;

      CloseWindow;
      LogRec.UpdateLogbook(Text023, LinesRead, LinesProcessed, 0, StartDateLog);
    END;

    PROCEDURE UpdatePriceHistory@1100485011();
    BEGIN
      WITH ImportTradeItemRec DO BEGIN
        IF "Alternative Vendor" <> '' THEN BEGIN
          //RecordExists := PriceHistRec.GET("Alternative Vendor","Item Code","Starting Date Price");
          RecordExists := PriceHistRec.GET("Alternative Vendor","Item Code","Starting Date Price","Price List Code"); // LAHE 130709
          PriceHistRec.Vendor := "Alternative Vendor";
        END ELSE BEGIN
          //RecordExists := PriceHistRec.GET(Vendor,"Item Code","Starting Date Price");
          RecordExists := PriceHistRec.GET(Vendor,"Item Code","Starting Date Price","Price List Code"); // LAHE 130709 new primKey
          PriceHistRec.Vendor := Vendor;
        END;
        PriceHistRec."Item Code" := "Item Code";
        PriceHistRec."Starting Date" := "Starting Date Price";
        //PriceHistRec.VALIDATE("Price List Code","Price List Code"); // LAHE 130705
        PriceHistRec."Price List Code" := "Price List Code"; // 130925
        PriceHistRec."Gross Price" := "Gross Price";
        PriceHistRec."Net Price" := "Net Price";
        PriceHistRec."Quantity Per Price" := "Quantity Per Price";
        PriceHistRec."Price ID" := "Price ID";
        PriceHistRec."Currency Code" := "Currency Code";
        PriceHistRec."Gross Price Operation Surch." := "Gross Price Operation Surch.";
        PriceHistRec."Price Manufacturer" := "Price Manufacturer";
        PriceHistRec."VAT Code" := "VAT Code";
        PriceHistRec."VAT %" := "VAT %";
        PriceHistRec.Expired := Expired;
        PriceHistRec."Price on Demand" := "Price On Demand";
        PriceHistRec."Future Price":= FALSE;
        IF RecordExists THEN
          PriceHistRec.MODIFY
        ELSE
          PriceHistRec.INSERT;
      END;
    END;

    PROCEDURE UpdateChargeHistory@1210190000();
    VAR
      ChargeRec@1210190000 : Record 11012332;
      ImportChargeRec@1210190001 : Record 11012740;
      DiscHistRec@1210190003 : Record 11012312;
      EtimVendorRec@1100525000 : Record 11012313;
      CurrVendor@1210190002 : Code[20];
    BEGIN
      WITH ImportTradeItemRec DO BEGIN
        IF "Alternative Vendor" <> '' THEN
          CurrVendor := "Alternative Vendor"
        ELSE
          CurrVendor := Vendor;
        IF NOT EtimVendorRec.GET(CurrVendor) THEN EtimVendorRec.INIT;
        IF EtimVendorRec."Discount/Charge Code" = '' THEN
          EtimVendorRec."Discount/Charge Code" := 'TD';

        ImportChargeRec.SETRANGE(Vendor, Vendor);
        ImportChargeRec.SETRANGE("Item Code", "Item Code");
        IF ImportChargeRec.FINDSET THEN BEGIN
          REPEAT
            IF (ImportChargeRec.Percentage <> 0) THEN BEGIN
              //provisionally no amounts, only process filled percentage (problem: Net Price<>0)
              IF ChargeRec.GET(CurrVendor, ImportChargeRec."Item Code",
                ImportChargeRec."Discount/Charge Code", ImportChargeRec."Starting Date",
                ImportChargeRec."Line No.") THEN
                ChargeRec.DELETE;
              ChargeRec.TRANSFERFIELDS(ImportChargeRec);
              ChargeRec.Vendor := CurrVendor;
              ChargeRec.INSERT;
              IF ImportChargeRec."Discount/Charge Code" = EtimVendorRec."Discount/Charge Code" THEN BEGIN
                DiscHistRec.Vendor := ChargeRec.Vendor;
                DiscHistRec."Discount Group" := '';
                DiscHistRec."Item Code" := ChargeRec."Item Code";
                DiscHistRec."Discount Level" := DiscHistRec."Discount Level"::Company;
                DiscHistRec."Discount Reference" := '';
                DiscHistRec."Starting Date" := ChargeRec."Starting Date";
                IF DiscHistRec.INSERT THEN;
                DiscHistRec.Description := ChargeRec.Description;
                DiscHistRec.Currency := ChargeRec.Currency;
                IF ImportChargeRec."Discount/Charge Code" <> 'TD' THEN BEGIN
                  DiscHistRec."Discount Percentage 1" := ChargeRec.Percentage;
                  DiscHistRec."Discount Percentage 2" := 0;
                  DiscHistRec."Discount Percentage 3" := 0;
                END ELSE BEGIN
                  IF ChargeRec."Line No." = 1 THEN
                    DiscHistRec."Discount Percentage 1" := ChargeRec.Percentage;
                  IF ChargeRec."Line No." = 2 THEN
                    DiscHistRec."Discount Percentage 2" := ChargeRec.Percentage;
                  IF ChargeRec."Line No." = 3 THEN
                    DiscHistRec."Discount Percentage 3" := ChargeRec.Percentage;
                END;
                DiscHistRec.MODIFY(TRUE);
              END;
            END;
            ImportChargeRec.DELETE;
          UNTIL ImportChargeRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE UpdateDeliveryGroup@1100528901();
    VAR
      DiscHistRec@1100528902 : Record 11012312;
      DeliveryGroupRec@1100528900 : Record 11012320;
      VendorRec@1100409000 : Record 11012304;
      VendorCode@1100528903 : Code[20];
      DeliveryGroupCode@1100528901 : Code[50];
      DummyCode@1100409001 : Code[20];
      CompRelationRec@1100409003 : Record 11012059;
      LeadingCompany@1100409002 : Text[250];
      DeliveryGrpPresent@1100409004 : Boolean;
    BEGIN
      WITH ImportTradeItemRec DO BEGIN
        IF "Alternative Vendor" <> '' THEN
          VendorCode := "Alternative Vendor"
        ELSE
          VendorCode := Vendor;
        IF ItemSetup."Apply DiscGroup as DelivGroup" THEN
          DeliveryGroupCode := "Discount Group Code"
        ELSE
          DeliveryGroupCode := "Delivery Group Code";
        IF DeliveryGroupCode <> '' THEN BEGIN
          IF InvtSetup."Central Management" AND InvtSetup."Delivery Groups" THEN BEGIN
            LeadingCompany := CompRelationRec.GetLeadingCompany(DATABASE::"Inventory Setup",TRUE);
            IF (LeadingCompany <> COMPANYNAME) AND (LeadingCompany <> '') THEN
              DeliveryGroupRec.CHANGECOMPANY(LeadingCompany);
          END;
          IF NOT VendorRec.GET(VendorCode) THEN VendorRec.INIT;
          IF NOT DeliveryGroupRec.GET(VendorCode, DeliveryGroupCode) THEN BEGIN
            DeliveryGrpPresent := FALSE;
            IF VendorRec."Format Discount Term" <> VendorRec."Format Discount Term"::" " THEN
              DeliveryGrpPresent := TradeItemRec.CheckFormatCondition(VendorRec, VendorCode, DeliveryGroupCode, DummyCode, DummyCode);
            IF NOT DeliveryGrpPresent THEN BEGIN
              DeliveryGroupRec.INIT;
              DeliveryGroupRec.Vendor := VendorCode;
              DeliveryGroupRec.Code := DeliveryGroupCode;
              DeliveryGroupRec.Description := DeliveryGroupCode;
              DeliveryGroupRec.INSERT(InvtSetup."Central Management");
            END;
          END;
          IF ItemSetup."Apply DiscGroup as DelivGroup" THEN BEGIN
            DiscHistRec.SETRANGE(Vendor, VendorCode);
            DiscHistRec.SETRANGE("Discount Group", "Discount Group Code");
            DiscHistRec.SETFILTER("Item Code", '%1', '');
            DiscHistRec.SETRANGE("Discount Level", DiscHistRec."Discount Level"::Company);
            DiscHistRec.SETFILTER("Discount Reference", '%1', '');
            IF DiscHistRec.FINDLAST THEN BEGIN
              IF DeliveryGroupRec.GET(VendorCode, "Discount Group Code") THEN BEGIN
                DeliveryGroupRec.Description := DiscHistRec.Description;
                DeliveryGroupRec.MODIFY(InvtSetup."Central Management");
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE WriteBasicMessage@1100485012(VAR ImportBasicItem@1100485003 : Record 11012334;MessageTxt@1100485000 : Text[250];ProcessStep@1100485004 : Option;UpdateTradeItem@1100485001 : Boolean;MessageID@1100525000 : Text[30];FieldNumber@1100525001 : Integer);
    BEGIN
      WriteMessageCode(MessageRec."Source Type"::BasicItem,MessageTxt,ProcessStep,MessageID,FieldNumber);

      IF MessBasicItem = 0 THEN BEGIN
        IF BasicErrorRec.FINDLAST THEN
          MessBasicItem := BasicErrorRec."Line No.";
      END;
      MessBasicItem := MessBasicItem + 1;

      BasicErrorRec.INIT;
      BasicErrorRec."Line No." := MessBasicItem;
      BasicErrorRec."Product Code" := ImportBasicItem."Product Code";
      BasicErrorRec.Manufacturer := ImportBasicItem.Manufacturer;
      BasicErrorRec.Comment := MessageTxt;
      BasicErrorRec."Process Step" := ProcessStep;
      BasicErrorRec."Message Code" := TempMessageRec.Code;
      BasicErrorRec."Compress Level" := TempMessageRec."Process Step";
      BasicErrorRec."Line No. Import Basic Item" := ImportBasicItemRec."Line No.";   //CALL C000327 add lineno from import item data
      BasicErrorRec.INSERT;

      ImportBasicItem.Warnings := TRUE;
      IF UpdateTradeItem THEN
        ImportBasicItem.MODIFY;
    END;

    PROCEDURE WriteTradeMessage@1100485001(VAR ImportTradeItem@1100485003 : Record 11012333;MessageTxt@1100485000 : Text[250];ProcessStep@1100485004 : Option;UpdateTradeItem@1100485001 : Boolean;MessageID@1100525000 : Text[30];FieldNumber@1100525001 : Integer);
    BEGIN
      WriteMessageCode(MessageRec."Source Type"::TradeItem,MessageTxt,ProcessStep,MessageID,FieldNumber);

      IF MessTradeItem = 0 THEN BEGIN
        IF TradeErrorRec.FINDLAST THEN
          MessTradeItem := TradeErrorRec."Line No.";
      END;
      MessTradeItem := MessTradeItem + 1;

      TradeErrorRec.INIT;
      TradeErrorRec."Line No." := MessTradeItem;
      TradeErrorRec."Item Code" := ImportTradeItem."Item Code";
      TradeErrorRec.Vendor := ImportTradeItem.Vendor;
      TradeErrorRec.Comment := MessageTxt;
      TradeErrorRec."Process Step" := ProcessStep;
      TradeErrorRec."Message Code" := TempMessageRec.Code;
      TradeErrorRec."Compress Level" := TempMessageRec."Process Step";
      TradeErrorRec."Price Difference %" := ROUND(ActualPriceDiff);
      TradeErrorRec."Old Price" := ActualPriceOld;
      TradeErrorRec."New Price" := ActualPriceNew;
      TradeErrorRec."Line No. Import Trade Item" := ImportTradeItem."Line No.";
      TradeErrorRec."Import Type" := ImportTradeItem."Import Type";
      TradeErrorRec.INSERT;

      ImportTradeItem.Warnings := TRUE;
      IF UpdateTradeItem THEN
        ImportTradeItem.MODIFY;

      ActualPriceDiff := 0;
      ActualPriceOld := 0;
      ActualPriceNew := 0;
    END;

    PROCEDURE WriteMessageCode@1100525001(SourceType@1100525001 : Integer;MessageTxt@1100525004 : Text[250];ProcessStep@1100525005 : Option;MessageID@1100525003 : Text[30];FieldNumber@1100525002 : Integer);
    VAR
      StdMessTxt@1100525000 : Text[250];
    BEGIN
      StdMessTxt := MessageTxt;

      IF SourceType = MessageRec."Source Type"::BasicItem THEN BEGIN
        CASE MessageID OF
          'Text100':
            BEGIN
              CASE FieldNumber OF
                BasicItemRec.FIELDNO("Product Code"):
                  StdMessTxt := STRSUBSTNO(Text100, BasicItemRec.FIELDCAPTION("Product Code"), '..');
              END;
            END;
          'Text201': StdMessTxt := STRSUBSTNO(Text201, '..', '..');
          'Text203': StdMessTxt := STRSUBSTNO(Text203, '..');
          'Text204': StdMessTxt := STRSUBSTNO(Text204, BasicItemRec.FIELDCAPTION("Product Code"), '..');
          'Text205': StdMessTxt := STRSUBSTNO(Text205, BasicItemRec.FIELDCAPTION("Product Group"), '..');
        END;
      END;

      IF SourceType = MessageRec."Source Type"::TradeItem THEN BEGIN
        CASE MessageID OF
          'Text100':
            BEGIN
              CASE FieldNumber OF
                TradeItemRec.FIELDNO("Item Code"):
                  StdMessTxt := STRSUBSTNO(Text100, TradeItemRec.FIELDCAPTION("Item Code"), '..');
                TradeItemRec.FIELDNO("Application Unit Quantity"):
                  StdMessTxt := STRSUBSTNO(Text100, TradeItemRec.FIELDCAPTION("Application Unit Quantity"), '..');
                TradeItemRec.FIELDNO("Minimum Order Quantity"):
                  StdMessTxt := STRSUBSTNO(Text100, TradeItemRec.FIELDCAPTION("Minimum Order Quantity"),'..');
                TradeItemRec.FIELDNO("Lot Size Quantity"):
                  StdMessTxt := STRSUBSTNO(Text100, TradeItemRec.FIELDCAPTION("Lot Size Quantity"), '..');
                TradeItemRec.FIELDNO("Gross Price"):
                  StdMessTxt := STRSUBSTNO(Text100, TradeItemRec.FIELDCAPTION("Gross Price"), '..');
                TradeItemRec.FIELDNO("Net Price"):
                  StdMessTxt := STRSUBSTNO(Text100, TradeItemRec.FIELDCAPTION("Net Price"), '..');
                TradeItemRec.FIELDNO("Quantity Per Price"):
                  StdMessTxt := STRSUBSTNO(Text100, TradeItemRec.FIELDCAPTION("Quantity Per Price"), '..');
                TradeItemRec.FIELDNO("Factor Price-Purchase Unit"):
                  StdMessTxt := STRSUBSTNO(Text100, TradeItemRec.FIELDCAPTION("Factor Price-Purchase Unit"), '..');
                TradeItemRec.FIELDNO("Delivery Period"):
                  StdMessTxt := STRSUBSTNO(Text100, TradeItemRec.FIELDCAPTION("Delivery Period"), '..');
              END;
            END;
          'Text101':
            BEGIN
              CASE FieldNumber OF
                TradeItemRec.FIELDNO("Product Code"):
                  StdMessTxt := STRSUBSTNO(Text101, TradeItemRec.FIELDCAPTION("Product Code"), '..', '..');
                TradeItemRec.FIELDNO("Application ID"):
                  StdMessTxt := STRSUBSTNO(Text101, TradeItemRec.FIELDCAPTION("Application ID"), '..', '..');
                TradeItemRec.FIELDNO("Order ID"):
                  StdMessTxt := STRSUBSTNO(Text101, TradeItemRec.FIELDCAPTION("Order ID"), '..', '..');
                TradeItemRec.FIELDNO("Price ID"):
                  StdMessTxt := STRSUBSTNO(Text101, TradeItemRec.FIELDCAPTION("Price ID"), '..', '..');
                TradeItemRec.FIELDNO("Discount Group Code"):
                  StdMessTxt := STRSUBSTNO(Text101, TradeItemRec.FIELDCAPTION("Discount Group Code"), '..', '..');
              END;
            END;
          'Text102': StdMessTxt := STRSUBSTNO(Text102, '..');
          'Text103':
            BEGIN
              CASE FieldNumber OF
                TradeItemRec.FIELDNO("Starting Date Item"):
                  StdMessTxt := STRSUBSTNO(Text103, TradeItemRec.FIELDCAPTION("Starting Date Item"), '..', '..');
                TradeItemRec.FIELDNO("Starting Date Price"):
                  StdMessTxt := STRSUBSTNO(Text103, TradeItemRec.FIELDCAPTION("Starting Date Price"), '..', '..');
              END;
            END;
          'Text104':
            BEGIN
              CASE FieldNumber OF
                TradeItemRec.FIELDNO("Application ID"):
                  StdMessTxt := STRSUBSTNO(Text104, TradeItemRec.FIELDCAPTION("Application ID"));
                TradeItemRec.FIELDNO("Order ID"):
                  StdMessTxt := STRSUBSTNO(Text104, TradeItemRec.FIELDCAPTION("Order ID"));
                TradeItemRec.FIELDNO("Price ID"):
                  StdMessTxt := STRSUBSTNO(Text104, TradeItemRec.FIELDCAPTION("Price ID"));
              END;
            END;
          'Text105': StdMessTxt := STRSUBSTNO(Text105, '..', '..', '..');
          'Text106': StdMessTxt := STRSUBSTNO(Text106, '..', '..', '..');
          'Text106a': StdMessTxt := STRSUBSTNO(Text106a, '..', '..', '..');
          'Text107': StdMessTxt := STRSUBSTNO(Text107, '..', '..', '..');
          'Text108': StdMessTxt := STRSUBSTNO(Text108, '..', '..', '..');
          'Text200': StdMessTxt := STRSUBSTNO(Text200, '..', '..');
          'Text202': StdMessTxt := STRSUBSTNO(Text202, '..');
          'Text206':
            BEGIN
              CASE FieldNumber OF
                TradeItemRec.FIELDNO("Discount Group Code"):
                  StdMessTxt := STRSUBSTNO(Text206, TradeItemRec.FIELDCAPTION("Discount Group Code"), '..', '..');
                TradeItemRec.FIELDNO("Delivery Group Code"):
                  StdMessTxt := STRSUBSTNO(Text206, TradeItemRec.FIELDCAPTION("Delivery Group Code"), '..', '..');
              END;
            END;
        END;
      END;

      IF FieldNumber <> 0 THEN
        MessageID := MessageID + STRSUBSTNO('-%1',FieldNumber);
      IF NOT MessageRec.GET(SourceType, MessageID) THEN BEGIN
        MessageRec.INIT;
        MessageRec."Source Type" := SourceType;
        MessageRec.Code := MessageID;
        MessageRec.INSERT;
      END;
      MessageRec.Description := StdMessTxt;
      MessageRec."Process Step" := ProcessStep;
      MessageRec.MODIFY;
      IF NOT TempMessageRec.GET(MessageRec."Source Type", MessageRec.Code) THEN BEGIN
        TempMessageRec.COPY(MessageRec);
        TempMessageRec.INSERT;
        IF TempMessageRec.Compress THEN
          TempMessageRec."Process Step" := 10
        ELSE
          TempMessageRec."Process Step" := 0;
      END ELSE BEGIN
        IF TempMessageRec.Compress THEN
          TempMessageRec."Process Step" := 11
        ELSE
          TempMessageRec."Process Step" := 1;
      END;
      TempMessageRec.MODIFY;
    END;

    PROCEDURE OpenFile@1100485019(lvPath@1100485000 : Text[250];lvFile@1100485001 : Text[250];VAR FileLength@1100525003 : BigInteger);
    VAR
      FileMgt@1100525000 : Codeunit 419;
      FileName@1100525001 : Text[1024];
      ClientFileName@1100525002 : Text[1024];
      MaxInt@1100525004 : BigInteger;
    BEGIN
      IF GUIALLOWED THEN BEGIN
        ClientFileName := lvPath + lvFile;
        FileName := FileMgt.UploadFileSilent(ClientFileName);
      END ELSE
        FileName := lvPath + lvFile;

      CurrFile.TEXTMODE := TRUE;
      CurrFile.OPEN(FileName, TEXTENCODING::Windows);

      FileLength := CurrFile.LEN;
      IF FileLength < 0 THEN BEGIN // CurrFile.LEN < 0 means that file length > MaxInt
        MaxInt := 2147483647;
        FileLength := (2 * MaxInt) + FileLength;
      END;
    END;

    PROCEDURE ReadLineFromFile@1100485040(FileLength@1100525000 : BigInteger);
    BEGIN
      CurrFile.READ(TextLine);
      CharsRead := CharsRead + STRLEN(TextLine);
      LinesRead := LinesRead + 1;
      IF (TIME > LastUpdateTime + 1000) THEN BEGIN
        UpdateWindowImport(LinesRead, CharsRead, FileLength);
        LastUpdateTime := TIME;
      END;
    END;

    LOCAL PROCEDURE CloseFile@1100525011();
    VAR
      CurrFileName@1100525000 : Text[1024];
    BEGIN
      CurrFileName := CurrFile.NAME;
      CurrFile.CLOSE;
      IF GUIALLOWED THEN
        ERASE(CurrFileName);
    END;

    PROCEDURE HandleCommit@1100485022(lLogbookText@1100485000 : Text[250]);
    BEGIN
      IF CommitCounter = 50000 THEN BEGIN
        CommitCounter := 0;
        IF lLogbookText <> '' THEN
          LogRec.UpdateLogbook(lLogbookText, LinesRead, LinesProcessed, 0, StartDateLog);
        COMMIT;
      END;
    END;

    PROCEDURE ConvDecimal@1100485007(DecTxt@1100485000 : Text[30]) : Text[30];
    BEGIN
      DecTxt := DELCHR(DecTxt , '=' , ' ');

      IF DecTxt = '' THEN
        EXIT('0')
      ELSE
        EXIT(DecTxt);
    END;

    PROCEDURE ConvDateForBasicItem@1100528405(VAR ImportBasicItem@1100528400 : Record 11012334;DateTxt@1100485000 : Text[30]) : Text[30];
    VAR
      DateTxt2@1100528401 : Text[30];
      ErrorOccurred@1100485001 : Boolean;
    BEGIN
      DateTxt2 := ConvDate(DateTxt, ErrorOccurred);
      IF ErrorOccurred THEN
        WriteBasicMessage(ImportBasicItem,STRSUBSTNO(Text102,DateTxt),0,FALSE,'Text102',0);

      EXIT(DateTxt2);
    END;

    PROCEDURE ConvDateForTradeItem@1100528415(VAR ImportTradeItem@1100528400 : Record 11012333;DateTxt@1100485000 : Text[30]) : Text[30];
    VAR
      DateTxt2@1100528401 : Text[30];
      ErrorOccurred@1100485001 : Boolean;
    BEGIN
      DateTxt2 := ConvDate(DateTxt, ErrorOccurred);
      IF ErrorOccurred THEN
        WriteTradeMessage(ImportTradeItem,STRSUBSTNO(Text102,DateTxt),0,FALSE,'Text102',0);

      EXIT(DateTxt2);
    END;

    PROCEDURE ConvDate@1100485006(DateTxt@1100485000 : Text[30];VAR ErrorOccurred@1100528400 : Boolean) : Text[30];
    VAR
      DateTxt2@1100528401 : Text[30];
      DateDec@1100485001 : Decimal;
    BEGIN
      ErrorOccurred := FALSE;
      DateTxt2 := DELCHR(DateTxt, '=', ' ');
      DateTxt2 := COPYSTR(DateTxt2,7,2) + COPYSTR(DateTxt2,5,2) + COPYSTR(DateTxt2,1,4);

      IF DateTxt2 <> '' THEN BEGIN
        IF NOT EVALUATE(DateDec, DateTxt2) THEN BEGIN
          ErrorOccurred := TRUE;
          DateTxt2 := '';
        END;
        IF DateDec = 0 THEN DateTxt2 := '';
      END;

      EXIT(DateTxt2);
    END;

    PROCEDURE StripSpaces@1100485002(Txt@1100485000 : Text[100]) : Text[100];
    BEGIN
      EXIT(DELCHR(Txt , '<>' , ' '));
    END;

    PROCEDURE SkipVendor@1100485004() : Boolean;
    BEGIN
      WITH ImportTradeItemRec DO BEGIN
        IF Vendor <> VendorRec.Code THEN
          IF NOT VendorRec.GET(Vendor) THEN
            EXIT(TRUE);

        IF NOT ItemSetup.LegalCharacter("Item Code") THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE SkipManufacturer@1100485014() : Boolean;
    BEGIN
      WITH ImportBasicItemRec DO BEGIN
        IF Manufacturer <> ManufacturerRec.Code THEN
          IF NOT ManufacturerRec.GET(Manufacturer) THEN
            EXIT(TRUE);

        IF NOT ItemSetup.LegalCharacter("Product Code") THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CheckAlternativeVendor@1100485003(lVendorCde@1100485001 : Code[20];VAR lvAltVendor@1100485000 : Code[20]) Present : Boolean;
    BEGIN
      IF lVendorCde <> VendorRec.Code THEN
        IF NOT VendorRec.GET(lVendorCde) THEN EXIT(FALSE);

      IF VendorRec."Alternative Vendor Code" <> '' THEN BEGIN
        lvAltVendor := VendorRec."Alternative Vendor Code";
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CheckAlternativeManufacturer@1100485005(lManufCde@1100485001 : Code[20];VAR lAltManufCde@1100485000 : Code[20]) Present : Boolean;
    BEGIN
      IF lManufCde <> ManufacturerRec.Code THEN
        IF NOT ManufacturerRec.GET(lManufCde) THEN EXIT(FALSE);

      IF ManufacturerRec."Alternative Vendor Code" <> '' THEN BEGIN
        lAltManufCde := ManufacturerRec."Alternative Vendor Code";
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CalculatePrice@1100485017();
    VAR
      BasicItemRec@1100485004 : Record 11012316;
      TradeItemRec@1100485003 : Record 11012317;
      CalcRep@1100485001 : Report 11012304;
    BEGIN
      ImportSetup.GET;
      IF ImportSetup."Update Item Data" THEN BEGIN
        StartDateLog := CURRENTDATETIME;

        CalcRep.USEREQUESTPAGE := FALSE;
        CalcRep.CheckSelection;
        TradeItemRec.SETCURRENTKEY("Import Date-Time");
        TradeItemRec.SETRANGE("Import Date-Time", ImportSetup."Import Date-Time");
        CalcRep.SETTABLEVIEW(TradeItemRec);
        BasicItemRec.SETRANGE(Manufacturer, '');  //skip basic items
        CalcRep.SETTABLEVIEW(BasicItemRec);
        CalcRep.RUNMODAL;

        LinesRead := TradeItemRec.COUNT;
        LogRec.UpdateLogbook(ImportSetup.FIELDCAPTION("Update Item Data"), LinesRead, 0, 0, StartDateLog);
      END;
    END;

    PROCEDURE RenewSearchArgument@1100485016();
    VAR
      TradeItemRec@1210190002 : Record 11012317;
      IndexRep@1210190001 : Report 11012314;
    BEGIN
      ImportSetup.GET;
      IF ImportSetup."Create Search Index" THEN BEGIN
        StartDateLog := CURRENTDATETIME;

        IndexRep.USEREQUESTPAGE := FALSE;
        TradeItemRec.SETCURRENTKEY("Import Date-Time");
        TradeItemRec.SETRANGE("Import Date-Time", ImportSetup."Import Date-Time");
        IndexRep.SETTABLEVIEW(TradeItemRec);
        IndexRep.CheckSelectedFields;
        IndexRep.RUNMODAL;

        LinesRead := TradeItemRec.COUNT;
        LogRec.UpdateLogbook(ImportSetup.FIELDCAPTION("Create Search Index"), LinesRead, 0, 0, StartDateLog);
      END;
    END;

    PROCEDURE CheckRemovalContribution@1100485015();
    VAR
      ItemChrgRec@1100485000 : Record 11012332;
    BEGIN
      WITH ImportTradeItemRec DO BEGIN
        IF "Feg-Item" = FALSE THEN EXIT;

        IF "Removal Contribution" <> 0 THEN BEGIN
          IF ItemChrgRec.GET(Vendor, "Item Code", 'CRS', "Starting Date Price") THEN BEGIN
            ItemChrgRec.Amount := "Removal Contribution";
            ItemChrgRec.MODIFY(TRUE);
          END ELSE BEGIN
            ItemChrgRec.INIT;
            ItemChrgRec.Vendor := Vendor;
            ItemChrgRec."Item Code" := "Item Code";
            ItemChrgRec."Discount/Charge Code" := 'CRS';
            ItemChrgRec."Starting Date" := "Starting Date Price";
            ItemChrgRec.Amount := "Removal Contribution";
            ItemChrgRec.INSERT(TRUE);
          END;
        END ELSE BEGIN
          IF ItemChrgRec.GET(Vendor, "Item Code", 'CRS', "Starting Date Price") THEN
            ItemChrgRec.DELETE(TRUE);
        END;
      END;
    END;

    PROCEDURE ExportTradeItemMessageToExcel@1100525003(VAR TradeItemMessageRec@1100525002 : Record 11012337;SaveSheet@1100525007 : Boolean);
    VAR
      lvText000@1100525000 : TextConst 'ENU=Build Excel Buffer..\ \;NOR=Bygg Excel-buffer..\ \;SVE=Bygg Excel-buffert..\ \';
      lvCounter@1100525005 : Integer;
      lvMaxRec@1100525006 : Integer;
      RowNo@1100525003 : Integer;
    BEGIN
      CLEAR(TmpExcelBufRec);
      TmpExcelBufRec.DELETEALL;
      IF NOT TradeItemMessageRec.FINDFIRST THEN EXIT;
      lvMaxRec := TradeItemMessageRec.COUNT;

      OpenWindow(lvText000 + '@1@@@@@@@@@@@@@@@@@@@@@@@@@\',  '');
      RowNo := 1;
      REPEAT
        lvCounter := lvCounter + 1;
        UpdateWindowExport(lvCounter, lvMaxRec);
        IF RowNo = 1 THEN BEGIN
          EnterCell(RowNo, 1, TradeItemMessageRec.FIELDCAPTION(Vendor), TRUE, TmpExcelBufRec."Cell Type"::Text);
          EnterCell(RowNo, 2, TradeItemMessageRec.FIELDCAPTION("Vendor Name"), TRUE, TmpExcelBufRec."Cell Type"::Text);
          EnterCell(RowNo, 3, TradeItemMessageRec.FIELDCAPTION("Item Code"), TRUE, TmpExcelBufRec."Cell Type"::Text);
          EnterCell(RowNo, 4, TradeItemMessageRec.FIELDCAPTION("Item Description"), TRUE, TmpExcelBufRec."Cell Type"::Text);
          EnterCell(RowNo, 5, TradeItemMessageRec.FIELDCAPTION(Comment), TRUE, TmpExcelBufRec."Cell Type"::Text);
          EnterCell(RowNo, 6, TradeItemMessageRec.FIELDCAPTION("Message Code"), TRUE, TmpExcelBufRec."Cell Type"::Text);
          EnterCell(RowNo, 7, TradeItemMessageRec.FIELDCAPTION("Exclude from update"), TRUE, TmpExcelBufRec."Cell Type"::Text);
          EnterCell(RowNo, 8, TradeItemMessageRec.FIELDCAPTION("Process Step"), TRUE, TmpExcelBufRec."Cell Type"::Text);
          EnterCell(RowNo, 9, TradeItemMessageRec.FIELDCAPTION("Price Difference %"), TRUE, TmpExcelBufRec."Cell Type"::Text);
        END;
        RowNo :=  RowNo + 1;
        TradeItemMessageRec.CALCFIELDS("Vendor Name", "Item Description", "Exclude from update");
        EnterCell(RowNo, 1, TradeItemMessageRec.Vendor, FALSE, TmpExcelBufRec."Cell Type"::Text);
        EnterCell(RowNo, 2, TradeItemMessageRec."Vendor Name", FALSE, TmpExcelBufRec."Cell Type"::Text);
        EnterCell(RowNo, 3, TradeItemMessageRec."Item Code", FALSE, TmpExcelBufRec."Cell Type"::Text);
        EnterCell(RowNo, 4, TradeItemMessageRec."Item Description", FALSE, TmpExcelBufRec."Cell Type"::Text);
        EnterCell(RowNo, 5, TradeItemMessageRec.Comment, FALSE, TmpExcelBufRec."Cell Type"::Text);
        EnterCell(RowNo, 6, TradeItemMessageRec."Message Code", FALSE, TmpExcelBufRec."Cell Type"::Text);
        EnterCell(RowNo, 7, FORMAT(TradeItemMessageRec."Exclude from update"), FALSE, TmpExcelBufRec."Cell Type"::Text);
        EnterCell(RowNo, 8, FORMAT(TradeItemMessageRec."Process Step"), FALSE, TmpExcelBufRec."Cell Type"::Text);
        EnterCell(RowNo, 9, FORMAT(TradeItemMessageRec."Price Difference %",0), FALSE, TmpExcelBufRec."Cell Type"::Number);
      UNTIL TradeItemMessageRec.NEXT = 0;
      CloseWindow;

      TmpExcelBufRec.CreateBook('',TradeItemMessageRec.TABLECAPTION);
      TmpExcelBufRec.WriteSheet('', COMPANYNAME, USERID);
      TmpExcelBufRec.CloseBook;
      IF SaveSheet THEN BEGIN
        IF GUIALLOWED THEN
          TmpExcelBufRec.MoveFileToClient(PathNameExcel(MessageRec."Source Type"::TradeItem))
        ELSE
          TmpExcelBufRec.MoveServerFile(PathNameExcel(MessageRec."Source Type"::TradeItem));
      END ELSE BEGIN
        TmpExcelBufRec.OpenExcel;
      END;
      TmpExcelBufRec.DELETEALL;
      CLEAR(TmpExcelBufRec);
    END;

    PROCEDURE ExportBasicItemMessageToExcel@1100525002(VAR BasicItemMessageRec@1100525002 : Record 11012336;SaveSheet@1100525007 : Boolean);
    VAR
      lvText000@1100525000 : TextConst 'ENU=Build Excel Buffer..\ \;NOR=Bygg Excel-buffer..\ \;SVE=Bygg Excel-buffert..\ \';
      lvCounter@1100525005 : Integer;
      lvMaxRec@1100525006 : Integer;
      RowNo@1100525003 : Integer;
    BEGIN
      CLEAR(TmpExcelBufRec);
      TmpExcelBufRec.DELETEALL;
      IF NOT BasicItemMessageRec.FINDFIRST THEN EXIT;
      lvMaxRec := BasicItemMessageRec.COUNT;

      OpenWindow(lvText000 + '@1@@@@@@@@@@@@@@@@@@@@@@@@@\', '');
      RowNo := 1;
      REPEAT
        lvCounter := lvCounter + 1;
        UpdateWindowExport(lvCounter, lvMaxRec);
        IF RowNo = 1 THEN BEGIN
          EnterCell(RowNo, 1, BasicItemMessageRec.FIELDCAPTION(Manufacturer), TRUE, TmpExcelBufRec."Cell Type"::Text);
          EnterCell(RowNo, 2, BasicItemMessageRec.FIELDCAPTION("Manufacturer Name"), TRUE, TmpExcelBufRec."Cell Type"::Text);
          EnterCell(RowNo, 3, BasicItemMessageRec.FIELDCAPTION("Product Code"), TRUE, TmpExcelBufRec."Cell Type"::Text);
          EnterCell(RowNo, 4, BasicItemMessageRec.FIELDCAPTION("Product Description"), TRUE, TmpExcelBufRec."Cell Type"::Text);
          EnterCell(RowNo, 5, BasicItemMessageRec.FIELDCAPTION(Comment), TRUE, TmpExcelBufRec."Cell Type"::Text);
          EnterCell(RowNo, 6, BasicItemMessageRec.FIELDCAPTION("Message Code"), TRUE, TmpExcelBufRec."Cell Type"::Text);
          EnterCell(RowNo, 7, BasicItemMessageRec.FIELDCAPTION("Exclude from update"), TRUE, TmpExcelBufRec."Cell Type"::Text);
          EnterCell(RowNo, 8, BasicItemMessageRec.FIELDCAPTION("Process Step"), TRUE, TmpExcelBufRec."Cell Type"::Text);
        END;
        RowNo :=  RowNo + 1;
        BasicItemMessageRec.CALCFIELDS("Manufacturer Name", "Product Description", "Exclude from update");
        EnterCell(RowNo, 1, BasicItemMessageRec.Manufacturer, FALSE, TmpExcelBufRec."Cell Type"::Text);
        EnterCell(RowNo, 2, BasicItemMessageRec."Manufacturer Name", FALSE, TmpExcelBufRec."Cell Type"::Text);
        EnterCell(RowNo, 3, BasicItemMessageRec."Product Code", FALSE, TmpExcelBufRec."Cell Type"::Text);
        EnterCell(RowNo, 4, BasicItemMessageRec."Product Description", FALSE, TmpExcelBufRec."Cell Type"::Text);
        EnterCell(RowNo, 5, BasicItemMessageRec.Comment, FALSE, TmpExcelBufRec."Cell Type"::Text);
        EnterCell(RowNo, 6, BasicItemMessageRec."Message Code", FALSE, TmpExcelBufRec."Cell Type"::Text);
        EnterCell(RowNo, 7, FORMAT(BasicItemMessageRec."Exclude from update"), FALSE, TmpExcelBufRec."Cell Type"::Text);
        EnterCell(RowNo, 8, FORMAT(BasicItemMessageRec."Process Step"), FALSE, TmpExcelBufRec."Cell Type"::Text);
      UNTIL BasicItemMessageRec.NEXT = 0;
      CloseWindow;

      TmpExcelBufRec.CreateBook('',BasicItemMessageRec.TABLECAPTION);
      TmpExcelBufRec.WriteSheet('', COMPANYNAME, USERID);
      TmpExcelBufRec.CloseBook;
      IF SaveSheet THEN BEGIN
        IF GUIALLOWED THEN
          TmpExcelBufRec.MoveFileToClient(PathNameExcel(MessageRec."Source Type"::BasicItem))
        ELSE
          TmpExcelBufRec.MoveServerFile(PathNameExcel(MessageRec."Source Type"::BasicItem));
      END ELSE BEGIN
        TmpExcelBufRec.OpenExcel;
      END;
      TmpExcelBufRec.DELETEALL;
      CLEAR(TmpExcelBufRec);
    END;

    LOCAL PROCEDURE EnterCell@3(IRowNo@1000 : Integer;IColumnNo@1001 : Integer;ICellValue@1002 : Text[250];IBold@1003 : Boolean;CellType@1100525000 : Option);
    BEGIN
      WITH TmpExcelBufRec DO BEGIN
        INIT;
        VALIDATE("Row No.", IRowNo);
        VALIDATE("Column No.", IColumnNo);
        "Cell Value as Text" := ICellValue;
        Formula := '';
        Bold := IBold;
        "Cell Type" := CellType;
        INSERT;
      END;
    END;

    PROCEDURE PathNameExcel@1100525004(SourceType@1100525002 : Integer) : Text[1000];
    VAR
      ItemSetup@1100525003 : Record 11012300;
      PathName@1100525000 : Text[1000];
      FileName@1100525001 : Text[1000];
    BEGIN
      ItemSetup.GET;
      ItemSetup.TESTFIELD("Pathname Files Item Messages");
      PathName := ItemSetup."Pathname Files Item Messages";
      IF SourceType = MessageRec."Source Type"::BasicItem THEN
        FileName := BasicErrorRec.TABLECAPTION;
      IF SourceType = MessageRec."Source Type"::TradeItem THEN
        FileName := TradeErrorRec.TABLECAPTION;
      FileName := FileName + ' ' + FORMAT(CURRENTDATETIME,0,3);
      FileName := DELCHR(FileName,'=','+"&/,.;:-_(){}#!?$\');
      FileName := FileName + '.xlsx';
      EXIT(PathName+FileName);
    END;

    PROCEDURE SetSelectionExpired@1100525005(iVendor@1100525000 : Code[20]);
    VAR
      TradeItemRec@1100525002 : Record 11012317;
    BEGIN
      TradeItemRec.SETRANGE(Vendor, iVendor);
      TradeItemRec.MODIFYALL(Expired, TRUE);
    END;

    PROCEDURE GetDiscountPercentage@1100528903(DiscPrev@1100528900 : Decimal;DiscCurr@1100528901 : Decimal) DiscNext : Decimal;
    BEGIN
      DiscNext := DiscPrev;
      IF DiscCurr <> 0 THEN
        DiscNext := DiscPrev + ((100 - DiscPrev) * (DiscCurr / 100));

      EXIT(DiscNext)
    END;

    PROCEDURE ImportETIMProductSpecsV10@1100528400();
    VAR
      ItemSetup@1100528401 : Record 11012300;
      ETIMProductSpecification@1100528403 : Record 11012314;
      CurrFileLength@1100528402 : BigInteger;
    BEGIN
      LastUpdateTime := TIME;
      ItemSetup.GET;
      OpenFile(ItemSetup."Pathname Files Item Data", ItemSetup."Product Specifications", CurrFileLength);
      OpenWindow(Text001 + Text002 + Text003 + Text004, ETIMProductSpecification.TABLECAPTION);
      WHILE CurrFile.POS <> CurrFile.LEN DO BEGIN
        ReadLineFromFile(CurrFileLength);
        FillETIMProductSpecFields(ETIMProductSpecification);
        SaveETIMProductSpecification(ETIMProductSpecification, ManufacturerRec);
      END;
      CloseWindow;
      CloseFile;
    END;

    LOCAL PROCEDURE FillETIMProductSpecFields@1100528402(VAR ETIMProductSpecification@1100528400 : Record 11012314);
    VAR
      FeatureValueNumericTxt@1100528401 : Text[20];
      FeatureValueLogicalTxt@1100528402 : Text[3];
      FeatureValueLowerLimitTxt@1100528403 : Text[20];
      FeatureValueUpperLimitTxt@1100528404 : Text[20];
    BEGIN
      ETIMProductSpecification.INIT;
      ETIMProductSpecification."Product Code" := StripSpaces(COPYSTR(TextLine, 1, 20));
      ETIMProductSpecification.Manufacturer := StripSpaces(COPYSTR(TextLine, 21, 13));
      ETIMProductSpecification.Feature := StripSpaces(COPYSTR(TextLine, 34, 8));
      ETIMProductSpecification."Feature Value (Alphanumeric)" := StripSpaces(COPYSTR(TextLine, 42, 8));
      ETIMProductSpecification."Feature Value (Text)" := StripSpaces(COPYSTR(TextLine, 50, 70));
      FeatureValueNumericTxt := ConvDecimal(COPYSTR(TextLine, 120, 20));
      IF FeatureValueNumericTxt <> '' THEN
        EVALUATE(ETIMProductSpecification."Feature Value (Numeric)", FeatureValueNumericTxt);
      FeatureValueLogicalTxt := StripSpaces(COPYSTR(TextLine, 140, 3));
      ETIMProductSpecification."Feature Value (Logical)" := FeatureValueLogicalTxt = 'YES';
      FeatureValueLowerLimitTxt := ConvDecimal(COPYSTR(TextLine, 143, 20));
      IF FeatureValueLowerLimitTxt <> '' THEN
        EVALUATE(ETIMProductSpecification."Feature Value (Lower Limit)", FeatureValueLowerLimitTxt);
      FeatureValueUpperLimitTxt := ConvDecimal(COPYSTR(TextLine, 163, 20));
      IF FeatureValueUpperLimitTxt <> '' THEN
        EVALUATE(ETIMProductSpecification."Feature Value (Upper Limit)", FeatureValueUpperLimitTxt);
    END;

    LOCAL PROCEDURE SaveETIMProductSpecification@1100528406(ETIMProductSpecification@1100528400 : Record 11012314;VAR ManufacturerRec@1100528403 : Record 11012304);
    VAR
      ItemSetup@1100528401 : Record 11012300;
      BasicItem@1100525001 : Record 11012316;
      ETIMProductSpecification2@1100528402 : Record 11012314;
      BasicItemPresent@1100525000 : Boolean;
    BEGIN
      IF NOT ItemSetup.LegalCharacter(ETIMProductSpecification."Product Code") THEN
        EXIT;

      IF ETIMProductSpecification.Manufacturer <> ManufacturerRec.Code THEN
        IF NOT ManufacturerRec.GET(ETIMProductSpecification.Manufacturer) THEN
          EXIT;

      IF ManufacturerRec."Alternative Vendor Code" <> '' THEN
        ETIMProductSpecification.Manufacturer := ManufacturerRec."Alternative Vendor Code";

      BasicItemPresent :=
        BasicItem.GET(ETIMProductSpecification.Manufacturer, ETIMProductSpecification."Product Code");
      IF NOT BasicItemPresent THEN
        BasicItemPresent := ImportBasicItemExists(
          ETIMProductSpecification.Manufacturer, ETIMProductSpecification."Product Code");

      IF BasicItemPresent THEN
        IF ETIMProductSpecification2.GET(
          ETIMProductSpecification.Manufacturer,
          ETIMProductSpecification."Product Code",
          ETIMProductSpecification.Feature)
        THEN
          UpdateETIMProductSpecification(ETIMProductSpecification, ETIMProductSpecification2)
        ELSE
          ETIMProductSpecification.INSERT;
    END;

    LOCAL PROCEDURE UpdateETIMProductSpecification@1100525000(ETIMProductSpecification@1100525000 : Record 11012314;ETIMProductSpecification2@1100528400 : Record 11012314);
    BEGIN
      ETIMProductSpecification2."Feature Value (Alphanumeric)" :=
        ETIMProductSpecification."Feature Value (Alphanumeric)";
      ETIMProductSpecification2."Feature Value (Text)" :=
        ETIMProductSpecification."Feature Value (Text)";
      ETIMProductSpecification2."Feature Value (Numeric)" :=
        ETIMProductSpecification."Feature Value (Numeric)";
      ETIMProductSpecification2."Feature Value (Logical)" :=
        ETIMProductSpecification."Feature Value (Logical)";
      ETIMProductSpecification2."Feature Value (Lower Limit)" :=
        ETIMProductSpecification."Feature Value (Lower Limit)";
      ETIMProductSpecification2."Feature Value (Upper Limit)" :=
        ETIMProductSpecification."Feature Value (Upper Limit)";

      ETIMProductSpecification2.MODIFY;
    END;

    PROCEDURE ImportETIMChargesV10@1100528403();
    VAR
      ItemSetup@1100528401 : Record 11012300;
      ItemImportSetup@1100528405 : Record 11012301;
      TradeItem@1100528404 : Record 11012317;
      TradeItemCharge@1100528403 : Record 11012332;
      TmpETIMUnit@1100528407 : TEMPORARY Record 11012307;
      CurrFileLength@1100528402 : BigInteger;
      TradeItemPresent@1100528406 : Boolean;
      CommitCounter@1100528408 : Integer;
    BEGIN
      LastUpdateTime := TIME;
      ItemSetup.GET;
      ItemImportSetup.GET;
      OpenFile(ItemSetup."Pathname Files Item Data", ItemSetup."Charge Trade Items", CurrFileLength);
      OpenWindow(Text001 + Text002 + Text003 + Text004, TradeItemCharge.TABLECAPTION);
      WHILE CurrFile.POS <> CurrFile.LEN DO BEGIN
        IF CommitCounter = 50000 THEN BEGIN
          CommitCounter := 0;
          COMMIT;
        END;
        ReadLineFromFile(CurrFileLength);
        FillTradeItemChargeFields(TradeItemCharge, TextLine);
        IF SaveTradeItemCharge(
          TradeItemCharge, VendorRec, TradeItem, TradeItemPresent, ItemImportSetup)
        THEN BEGIN
          WriteTmpETIMUnit(TradeItemCharge."Lower Limit Order Unit", TmpETIMUnit);
          CommitCounter := CommitCounter + 1;
        END;
      END;
      WriteETIMUnits(TmpETIMUnit);
      CloseWindow;
      CloseFile;
    END;

    PROCEDURE FillTradeItemChargeFields@1100528413(VAR TradeItemCharge@1100528400 : Record 11012332;ChargeTextLine@1100525000 : Text);
    VAR
      StartingDateTxt@1100528401 : Text[8];
      LineNoTxt@1100528402 : Text[2];
      PercentageTxt@1100528403 : Text[11];
      AmountTxt@1100528404 : Text[16];
      LowerLimitOrderQuantityTxt@1100528405 : Text[19];
    BEGIN
      TradeItemCharge.INIT;
      TradeItemCharge."Item Code" := StripSpaces(COPYSTR(ChargeTextLine, 1, 20));
      TradeItemCharge.Vendor := StripSpaces(COPYSTR(ChargeTextLine, 21, 13));
      TradeItemCharge."Discount/Charge Code" := StripSpaces(COPYSTR(ChargeTextLine, 34, 3));
      StartingDateTxt := COPYSTR(ChargeTextLine, 37, 8);
      TradeItemCharge."Starting Date" := ConvertDateTxtToDate(StartingDateTxt);
      LineNoTxt := StripSpaces(COPYSTR(ChargeTextLine, 45, 2));
      IF LineNoTxt <> '' THEN
        EVALUATE(TradeItemCharge."Line No.", LineNoTxt);
      TradeItemCharge."Discount/Charge Type" := StripSpaces(COPYSTR(ChargeTextLine, 47, 1));
      TradeItemCharge.Description := StripSpaces(COPYSTR(ChargeTextLine, 48, 35));
      TradeItemCharge.Language := StripSpaces(COPYSTR(ChargeTextLine, 83, 2));
      PercentageTxt := ConvDecimal(COPYSTR(ChargeTextLine, 85, 11));
      IF PercentageTxt <> '' THEN
        EVALUATE(TradeItemCharge.Percentage, PercentageTxt,9);  //C041633
      AmountTxt := ConvDecimal(COPYSTR(ChargeTextLine, 96, 16));
      IF AmountTxt <> '' THEN
        EVALUATE(TradeItemCharge.Amount, AmountTxt,9);  //C041633
      TradeItemCharge.Currency := StripSpaces(COPYSTR(ChargeTextLine, 112, 3));
      LowerLimitOrderQuantityTxt := ConvDecimal(COPYSTR(ChargeTextLine, 115, 19));
      IF LowerLimitOrderQuantityTxt <> '' THEN
        EVALUATE(TradeItemCharge."Lower Limit Order Quantity", LowerLimitOrderQuantityTxt);
      TradeItemCharge."Lower Limit Order Unit" := StripSpaces(COPYSTR(ChargeTextLine, 134, 3));
    END;

    LOCAL PROCEDURE ConvertDateTxtToDate@1100528417(DateTxt@1100528400 : Text[8]) : Date;
    VAR
      Year@1100528401 : Integer;
      Month@1100528402 : Integer;
      Day@1100528403 : Integer;
    BEGIN
      IF NOT EVALUATE(Year, COPYSTR(DateTxt, 1, 4)) THEN
        EXIT;
      IF NOT EVALUATE(Month, COPYSTR(DateTxt, 5, 2)) THEN
        EXIT;
      IF NOT EVALUATE(Day, COPYSTR(DateTxt, 7, 2)) THEN
        EXIT;

      EXIT(DMY2DATE(Day, Month, Year));
    END;

    PROCEDURE SaveTradeItemCharge@1100528433(TradeItemCharge@1100528400 : Record 11012332;VAR VendorRec@1100528403 : Record 11012304;VAR TradeItem@1100528402 : Record 11012317;VAR TradeItemPresent@1100528408 : Boolean;ItemImportSetup@1100528405 : Record 11012301) : Boolean;
    VAR
      ItemSetup@1100528401 : Record 11012300;
      TradeItemCharge2@1100528407 : Record 11012332;
    BEGIN
      IF NOT ItemSetup.LegalCharacter(TradeItemCharge."Item Code") THEN
        EXIT(FALSE);

      IF TradeItemCharge.Vendor <> VendorRec.Code THEN
        IF NOT VendorRec.GET(TradeItemCharge.Vendor) THEN
          EXIT(FALSE);

      IF VendorRec."Alternative Vendor Code" <> '' THEN
        TradeItemCharge.Vendor := VendorRec."Alternative Vendor Code";

      IF (TradeItemCharge.Vendor <> TradeItem.Vendor) OR
         (TradeItemCharge."Item Code" <> TradeItem."Item Code")
      THEN BEGIN
        TradeItemPresent := TradeItem.GET(TradeItemCharge.Vendor, TradeItemCharge."Item Code");
        IF TradeItemPresent THEN
          UpdateTradeItemImportDateTime(TradeItem, ItemImportSetup."Import Date-Time")
        ELSE
          TradeItemPresent := ImportTradeItemExists(
            TradeItemCharge.Vendor, TradeItemCharge."Item Code");
      END;

      IF TradeItemPresent THEN BEGIN
        IF TradeItemCharge2.GET(
          TradeItemCharge.Vendor,
          TradeItemCharge."Item Code",
          TradeItemCharge."Discount/Charge Code",
          TradeItemCharge."Starting Date",
          TradeItemCharge."Line No.")
        THEN
          UpdateTradeItemCharge(TradeItemCharge, TradeItemCharge2)
        ELSE
          TradeItemCharge.INSERT;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateTradeItemCharge@1100528443(TradeItemCharge@1100525000 : Record 11012332;TradeItemCharge2@1100528400 : Record 11012332);
    BEGIN
      TradeItemCharge2."Discount/Charge Type" := TradeItemCharge."Discount/Charge Type";
      TradeItemCharge2.Description := TradeItemCharge.Description;
      TradeItemCharge2.Language := TradeItemCharge.Language;
      TradeItemCharge2.Percentage := TradeItemCharge.Percentage;
      TradeItemCharge2.Amount := TradeItemCharge.Amount;
      TradeItemCharge2.Currency := TradeItemCharge.Currency;
      TradeItemCharge2."Lower Limit Order Quantity" := TradeItemCharge."Lower Limit Order Quantity";
      TradeItemCharge2."Lower Limit Order Unit" := TradeItemCharge."Lower Limit Order Unit";

      TradeItemCharge2.MODIFY;
    END;

    PROCEDURE WriteTmpETIMUnit@1100528449(ETIMUnitCode@1100528400 : Code[10];VAR TmpETIMUnit@1100528401 : TEMPORARY Record 11012307);
    BEGIN
      IF ETIMUnitCode = '' THEN
        EXIT;

      IF TmpETIMUnit.Code = ETIMUnitCode THEN
        EXIT;

      TmpETIMUnit.Code := ETIMUnitCode;
      IF TmpETIMUnit.INSERT THEN;
    END;

    PROCEDURE WriteETIMUnits@1100528453(VAR TmpETIMUnit@1100528400 : TEMPORARY Record 11012307);
    VAR
      ETIMUnit@1100528401 : Record 11012307;
    BEGIN
      IF TmpETIMUnit.FINDSET THEN
        REPEAT
          ETIMUnit.CheckImportUnit(TmpETIMUnit.Code);
        UNTIL TmpETIMUnit.NEXT = 0;
    END;

    PROCEDURE ImportETIMPriceHistoryV10@1100528404();
    VAR
      ItemSetup@1100528401 : Record 11012300;
      ItemImportSetup@1100528405 : Record 11012301;
      TradeItem@1100528404 : Record 11012317;
      PriceHistoryTradeItem@1100528403 : Record 11012315;
      TmpETIMUnit@1100528407 : TEMPORARY Record 11012307;
      CurrFileLength@1100528402 : BigInteger;
      TradeItemPresent@1100528406 : Boolean;
      CommitCounter@1100528408 : Integer;
    BEGIN
      LastUpdateTime := TIME;
      ItemSetup.GET;
      ItemImportSetup.GET;
      OpenFile(ItemSetup."Pathname Files Item Data", ItemSetup."Price History Trade Items", CurrFileLength);
      OpenWindow(Text001 + Text002 + Text003 + Text004, PriceHistoryTradeItem.TABLECAPTION);
      WHILE CurrFile.POS <> CurrFile.LEN DO BEGIN
        IF CommitCounter = 50000 THEN BEGIN
          CommitCounter := 0;
          COMMIT;
        END;
        ReadLineFromFile(CurrFileLength);
        FillPriceHistoryFields(PriceHistoryTradeItem, TextLine);
        IF SavePriceHistoryTradeItem(
          PriceHistoryTradeItem, VendorRec, TradeItem, TradeItemPresent, ItemImportSetup, ItemSetup)
        THEN BEGIN
          WriteTmpETIMUnit(PriceHistoryTradeItem."Price ID", TmpETIMUnit);
          CommitCounter := CommitCounter + 1;
        END;
      END;
      WriteETIMUnits(TmpETIMUnit);
      CloseWindow;
      CloseFile;
    END;

    PROCEDURE FillPriceHistoryFields@1100528407(VAR PriceHistoryTradeItem@1100528400 : Record 11012315;PriceTextLine@1100525000 : Text);
    VAR
      MutCode@1100528401 : Code[1];
      StartingDateTxt@1100528402 : Text[8];
      GrossPriceTxt@1100528403 : Text[16];
      NetPriceTxt@1100528404 : Text[16];
      QuantityPerPriceTxt@1100528405 : Text[10];
      GrossPriceOperationSurchTxt@1100528406 : Text[16];
      VATTxt@1100528407 : Text[18];
      EtimVendor@1100528500 : Record 11012304;
    BEGIN
      PriceHistoryTradeItem.INIT;
      PriceHistoryTradeItem."Future Price":= TRUE;

      MutCode := StripSpaces(COPYSTR(PriceTextLine, 1, 1));
      PriceHistoryTradeItem.Expired := (MutCode = '2');
      PriceHistoryTradeItem."Item Code" := StripSpaces(COPYSTR(PriceTextLine, 2, 20));
      PriceHistoryTradeItem.Vendor := StripSpaces(COPYSTR(PriceTextLine, 22, 13));
      StartingDateTxt := StripSpaces(COPYSTR(PriceTextLine, 35, 8));
      PriceHistoryTradeItem."Starting Date" := ConvertDateTxtToDate(StartingDateTxt);
      GrossPriceTxt := ConvDecimal(COPYSTR(PriceTextLine, 43, 16));
      IF GrossPriceTxt <> '' THEN
        EVALUATE(PriceHistoryTradeItem."Gross Price", GrossPriceTxt,9);
      NetPriceTxt := ConvDecimal(COPYSTR(PriceTextLine, 59, 16));
      IF NetPriceTxt <> '' THEN
        EVALUATE(PriceHistoryTradeItem."Net Price", NetPriceTxt,9);
      QuantityPerPriceTxt := ConvDecimal(COPYSTR(PriceTextLine, 75, 10));
      IF QuantityPerPriceTxt <> '' THEN
        EVALUATE(PriceHistoryTradeItem."Quantity Per Price", QuantityPerPriceTxt,9);
      PriceHistoryTradeItem."Price ID" := StripSpaces(COPYSTR(PriceTextLine, 85, 3));
      PriceHistoryTradeItem."Currency Code" := StripSpaces(COPYSTR(PriceTextLine, 88, 3));
      GrossPriceOperationSurchTxt := ConvDecimal(COPYSTR(PriceTextLine, 91, 16));
      IF GrossPriceOperationSurchTxt <> '' THEN
        EVALUATE(PriceHistoryTradeItem."Gross Price Operation Surch.", GrossPriceOperationSurchTxt,9);
      PriceHistoryTradeItem."VAT Code" := StripSpaces(COPYSTR(PriceTextLine, 110, 1));
      VATTxt := ConvDecimal(COPYSTR(PriceTextLine, 111, 18));
      IF VATTxt <> '' THEN
        EVALUATE(PriceHistoryTradeItem."VAT %", VATTxt,9);

      //C038538.sn
      IF NOT EtimVendor.GET(PriceHistoryTradeItem.Vendor) THEN EtimVendor.INIT;
      //IF EtimVendor."Alternative Vendor Code" <> '' THEN
      //  IF NOT EtimVendor.GET(EtimVendor."Alternative Vendor Code") THEN EtimVendor.INIT;  //db, 16-04-19
      IF EtimVendor.Code = '8714253035000' THEN BEGIN
        //db, 30-11-18: Oosterberg levert voor sommige artikelen een nettoprijs aan zonder brutoprijs
        //deze nettoprijs is beslist geen inkoopprijs, maar een adviesprijs en dient als brutoprijs opgevat te worden.
        IF (GrossPriceTxt = '0') AND (NetPriceTxt <> '0') THEN BEGIN
          EVALUATE(PriceHistoryTradeItem."Gross Price", NetPriceTxt,9);
          EVALUATE(PriceHistoryTradeItem."Net Price", GrossPriceTxt,9);
        END;
      END;
      //C038538.en
    END;

    PROCEDURE SavePriceHistoryTradeItem@1100528409(PriceHistoryTradeItem@1100528400 : Record 11012315;VAR VendorRec@1100528403 : Record 11012304;VAR TradeItem@1100528402 : Record 11012317;VAR TradeItemPresent@1100528408 : Boolean;ItemImportSetup@1100528405 : Record 11012301;ItemSetup@1100528404 : Record 11012300) : Boolean;
    VAR
      PriceHistoryTradeItem2@1100528407 : Record 11012315;
    BEGIN
      IF PriceHistoryTradeItem."Starting Date" < ItemSetup."Price History From" THEN
        EXIT(FALSE);

      IF NOT ItemSetup.LegalCharacter(PriceHistoryTradeItem."Item Code") THEN
        EXIT(FALSE);

      IF PriceHistoryTradeItem.Vendor <> VendorRec.Code THEN
        IF NOT VendorRec.GET(PriceHistoryTradeItem.Vendor) THEN
          EXIT(FALSE);

      IF VendorRec."Alternative Vendor Code" <> '' THEN
        PriceHistoryTradeItem.Vendor := VendorRec."Alternative Vendor Code";

      IF (PriceHistoryTradeItem.Vendor <> TradeItem.Vendor) OR
         (PriceHistoryTradeItem."Item Code" <> TradeItem."Item Code")
      THEN BEGIN
        TradeItemPresent := TradeItem.GET(PriceHistoryTradeItem.Vendor, PriceHistoryTradeItem."Item Code");
        IF TradeItemPresent THEN
          UpdateTradeItemImportDateTime(TradeItem, ItemImportSetup."Import Date-Time")
        ELSE
          TradeItemPresent := ImportTradeItemExists(
            VendorRec.Code, PriceHistoryTradeItem."Item Code");
      END;

      IF TradeItemPresent THEN BEGIN
        IF PriceHistoryTradeItem2.GET(
          PriceHistoryTradeItem.Vendor,
          PriceHistoryTradeItem."Item Code",
          PriceHistoryTradeItem."Starting Date")
        THEN
          UpdatePriceHistoryTradeItem(PriceHistoryTradeItem, PriceHistoryTradeItem2)
        ELSE
          PriceHistoryTradeItem.INSERT;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdatePriceHistoryTradeItem@1100528408(PriceHistoryTradeItem@1100525000 : Record 11012315;PriceHistoryTradeItem2@1100528400 : Record 11012315);
    BEGIN
      PriceHistoryTradeItem2."Future Price":= PriceHistoryTradeItem."Future Price";
      PriceHistoryTradeItem2.Expired := PriceHistoryTradeItem.Expired;
      PriceHistoryTradeItem2."Gross Price" := PriceHistoryTradeItem."Gross Price";
      PriceHistoryTradeItem2."Net Price" := PriceHistoryTradeItem."Net Price";
      PriceHistoryTradeItem2."Quantity Per Price" := PriceHistoryTradeItem."Quantity Per Price";
      PriceHistoryTradeItem2."Price ID" := PriceHistoryTradeItem."Price ID";
      PriceHistoryTradeItem2."Currency Code" := PriceHistoryTradeItem."Currency Code";
      PriceHistoryTradeItem2."Gross Price Operation Surch." := PriceHistoryTradeItem."Gross Price Operation Surch.";
      PriceHistoryTradeItem2."VAT Code" := PriceHistoryTradeItem."VAT Code";
      PriceHistoryTradeItem2."VAT %" := PriceHistoryTradeItem."VAT %";

      PriceHistoryTradeItem2.MODIFY;
    END;

    LOCAL PROCEDURE UpdateTradeItemImportDateTime@1100528426(VAR TradeItem@1100528400 : Record 11012317;ImportDateTime@1100528401 : Decimal);
    BEGIN
      IF TradeItem."Import Date-Time" <> ImportDateTime THEN BEGIN
        TradeItem."Import Date-Time" := ImportDateTime;
        TradeItem.MODIFY;
      END;
    END;

    LOCAL PROCEDURE ImportTradeItemExists@1100528430(VendorCode@1100528400 : Code[15];ItemCode@1100528401 : Code[20]) : Boolean;
    VAR
      ImportTradeItem@1100528402 : Record 11012333;
    BEGIN
      ImportTradeItem.SETCURRENTKEY(Vendor, "Item Code");
      ImportTradeItem.SETRANGE(Vendor, VendorCode);
      ImportTradeItem.SETRANGE("Item Code", ItemCode);
      IF NOT ImportTradeItem.ISEMPTY THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE ImportBasicItemExists@1100528435(ManufacturerCode@1100528400 : Code[15];ProductCode@1100528401 : Code[20]) : Boolean;
    VAR
      ImportBasicItem@1100528402 : Record 11012334;
    BEGIN
      ImportBasicItem.SETCURRENTKEY(Manufacturer, "Product Code");
      ImportBasicItem.SETRANGE(Manufacturer, ManufacturerCode);
      ImportBasicItem.SETRANGE("Product Code", ProductCode);
      IF NOT ImportBasicItem.ISEMPTY THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE OpenWindow@1100528410(WindowText@1100528400 : Text[1024];TableCaptionText@1100528401 : Text[1024]);
    BEGIN
      IF GUIALLOWED THEN BEGIN
        Window.OPEN(WindowText);
        IF TableCaptionText <> '' THEN
          Window.UPDATE(1, TableCaptionText);
      END;
    END;

    LOCAL PROCEDURE CloseWindow@1100528412();
    BEGIN
      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    LOCAL PROCEDURE UpdateWindowImport@1100528411(LinesRead@1100528400 : Integer;CurrentProgress@1100528401 : Integer;MaxProgress@1100528402 : Integer);
    BEGIN
      IF GUIALLOWED THEN BEGIN
        Window.UPDATE(2, LinesRead);
        IF MaxProgress > 0 THEN
          Window.UPDATE(3, 100 * ROUND(CurrentProgress / MaxProgress * 100, 1));
      END;
    END;

    LOCAL PROCEDURE UpdateWindowExport@1100528414(Counter@1100528401 : Integer;MaxRec@1100528400 : Integer);
    BEGIN
      IF GUIALLOWED THEN
        IF MaxRec > 0 THEN
          Window.UPDATE(1, ROUND(Counter / MaxRec * 10000, 1));
    END;

    PROCEDURE SetVars@1100525007();
    BEGIN
      ImportSetup.GET;
      ItemSetup.GET;
      InvtSetup.GET;
    END;

    LOCAL PROCEDURE TestValidGtinCode@1100525008(GtinCode@1100525000 : Code[20]) : Boolean;
    VAR
      GtinChar@1100525002 : Code[1];
      Counter@1100525001 : Integer;
    BEGIN
      IF (GtinCode = '') THEN
        EXIT(FALSE);
      FOR Counter := 1 TO STRLEN(GtinCode) DO BEGIN
        GtinChar := COPYSTR(GtinCode, Counter, 1);
        IF (GtinChar <> ' ') AND (GtinChar <> '0') THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    BEGIN
    {
      SEEV.I045B2 LAHE 130705 Symbrio "Cost Object Code", "Price List Code" (IMSE-045, #SYMB2#)

      150203 ITERO.MH SYM044  Import discount letter included net prices
    }
    END.
  }
}

