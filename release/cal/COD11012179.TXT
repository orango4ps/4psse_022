OBJECT Codeunit 11012179 Site Mngmnt. Hours Generate
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11012573=rimd,
                TableData 11012574=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100485000 : TextConst 'DEU=%1 StundenÅbersichten erstellt\\%2 Stundenzeilen erstellt;ENU=%1 Hour Headers Generated\\%2 Hour Lines Generated;NLD=%1 urenstaten gegenereerd\\%2 urenregels gegenereerd;SVE=%1 timrubriker har genererats\\%2 timrader har genererats';
      Question@1100525000 : Text[100];
      Text002@1100528400 : TextConst 'DEU=Einkaufspreis wird wÑhrend der Buchung bestimmt.;ENU=Cost Price will be determined during posting.;NLD=Kostprijs wordt bepaald tijdens boeken.';
      Text004@1100525003 : TextConst 'DEU=Zeilen erstellt. Weiter buchen?;ENU=Lines validated, continue post?;NLD=regels gegenereerd, doorboeken?;SVE=Giltiga rader. FortsÑtta bokfîring?';
      Text006@1100525001 : TextConst 'DEU=Stundenzeile %1-%2-%3-%4 in Konzern %5 bereits vorhanden;ENU=Hourline %1-%2-%3-%4 in company %5 already exists;NLD=Urenregel %1-%2-%3-%4 in bedrijf %5 bestaat reeds;SVE=Timraden %1-%2-%3-%4 i fîretaget %5 finns redan';
      LineNo@1100525005 : Integer;
      SiteMngmntHoursSetup@1100525006 : Record 11012355;
      Text008@1100525007 : TextConst 'DEU=Stundenerfassung hat Status freigegeben;ENU=Hoursaccounting Is  Not  Open;NLD=Urenverantwoording heeft status vrijgegeven;SVE=Tidrapportering Ñr inte îppen';
      ErrorMess@1100525010 : Text[250];
      ErrorRec@1100525011 : Record 11012051;

    PROCEDURE GenerateHoursHeaders@1100485000(TemplateRec@1100485000 : Record 11012445);
    VAR
      LvSiteMngmntHoursHeadRec@1100485001 : Record 11012360;
      LvSiteMngmntHoursLine@1100485002 : Record 11012361;
      LvSiteMngmntHoursEmplRec@1100485003 : Record 11012357;
      InsertHeadCounter@1100485004 : Integer;
      InsertLineCounter@1100485005 : Integer;
      EmplCounter@1100485006 : Integer;
    BEGIN
      EXIT;  //* Do not use this function, if needed then redesign needed
             //* Gives many problems when this is used
      REPEAT
        LvSiteMngmntHoursEmplRec.SETRANGE(Company,TemplateRec."Receiving Company");
        IF LvSiteMngmntHoursEmplRec.FINDSET(FALSE,FALSE) THEN BEGIN
          EmplCounter := LvSiteMngmntHoursEmplRec.COUNT;
          REPEAT
            IF NOT LvSiteMngmntHoursHeadRec.GET(TemplateRec.Year,TemplateRec.Week,
                                                TemplateRec."Receiving Company",LvSiteMngmntHoursEmplRec."No.") THEN
            BEGIN
              LvSiteMngmntHoursHeadRec.INIT;
              LvSiteMngmntHoursHeadRec.TRANSFERFIELDS(TemplateRec);       // TRANSFRFIELDS?
              LvSiteMngmntHoursHeadRec.VALIDATE(Week,TemplateRec.Week);
              LvSiteMngmntHoursHeadRec."Employee No." := LvSiteMngmntHoursEmplRec."No.";
              IF LvSiteMngmntHoursHeadRec.INSERT(TRUE) THEN
                InsertHeadCounter := InsertHeadCounter + 1;
            END;

            LvSiteMngmntHoursLine.SETRANGE(Year,TemplateRec.Year);
            LvSiteMngmntHoursLine.SETRANGE(Week,TemplateRec.Week);
            LvSiteMngmntHoursLine.SETRANGE("Receiving Company",TemplateRec."Receiving Company");
            LvSiteMngmntHoursLine.SETRANGE("Object No.",TemplateRec."Cost Code");
            LvSiteMngmntHoursLine.SETRANGE("Wage Component",TemplateRec."Wage Component");
            LvSiteMngmntHoursLine.SETRANGE(Type,LvSiteMngmntHoursLine.Type::Indirect);
            LvSiteMngmntHoursLine.SETRANGE("Cost Object",TemplateRec."Cost Object");
            LvSiteMngmntHoursLine.SETRANGE("Employee No.",LvSiteMngmntHoursEmplRec."No.");
            LvSiteMngmntHoursLine.SETRANGE("Document No.",LvSiteMngmntHoursHeadRec."Document No.");
            IF LvSiteMngmntHoursLine.FINDFIRST THEN BEGIN      // FILTER ON TYPE=INDIRECT, BUT HOURS (MON..SUN) ARE UPDATE
              IF TemplateRec.Monday <>0 THEN
                IF LvSiteMngmntHoursLine.Monday = 0 THEN
                  LvSiteMngmntHoursLine.Monday := TemplateRec.Monday;
              IF TemplateRec.Tuesday <>0 THEN
                IF LvSiteMngmntHoursLine.Tuesday = 0 THEN
                  LvSiteMngmntHoursLine.Tuesday := TemplateRec.Tuesday;
              IF TemplateRec.Wednesday <>0 THEN
                IF LvSiteMngmntHoursLine.Wednesday = 0 THEN
                  LvSiteMngmntHoursLine.Wednesday := TemplateRec.Wednesday;
              IF TemplateRec.Thursday <>0 THEN
                IF LvSiteMngmntHoursLine.Thursday = 0 THEN
                  LvSiteMngmntHoursLine.Thursday := TemplateRec.Thursday;
              IF TemplateRec.Friday <>0 THEN
                IF LvSiteMngmntHoursLine.Friday = 0 THEN
                  LvSiteMngmntHoursLine.Friday := TemplateRec.Friday;
              IF TemplateRec.Saturday <>0 THEN
                IF LvSiteMngmntHoursLine.Saturday = 0 THEN
                  LvSiteMngmntHoursLine.Saturday := TemplateRec.Saturday;
              IF TemplateRec.Sunday <>0 THEN
                IF LvSiteMngmntHoursLine.Sunday = 0 THEN
                  LvSiteMngmntHoursLine.Sunday := TemplateRec.Sunday;
              LvSiteMngmntHoursLine.MODIFY;                   // ONLY MODIFY, NO INSERT    WHY A HEADER IS CREATED
              TemplateRec."Line processed" := TRUE;
              TemplateRec.MODIFY;
            END ELSE BEGIN                       // ?
              LvSiteMngmntHoursLine.INIT;
              LvSiteMngmntHoursLine.TRANSFERFIELDS(TemplateRec,TRUE);
              LvSiteMngmntHoursLine."Receiving Company" := TemplateRec."Receiving Company";
              LvSiteMngmntHoursLine."Line No." := 5555;            // WHY THIS LINENUMBER?
              LvSiteMngmntHoursLine."Total Line" := TemplateRec.Monday + TemplateRec.Tuesday + TemplateRec.Wednesday +
                                                    TemplateRec.Thursday + TemplateRec.Friday + TemplateRec.Saturday +
                                                    TemplateRec.Sunday;
              LvSiteMngmntHoursLine."Employee No." := LvSiteMngmntHoursEmplRec."No.";
              LvSiteMngmntHoursLine.Type := LvSiteMngmntHoursLine.Type::Indirect;
              LvSiteMngmntHoursLine."Object No." := TemplateRec."Cost Code";
              LvSiteMngmntHoursLine."Document No." := LvSiteMngmntHoursHeadRec."Document No.";
              IF LvSiteMngmntHoursLine.INSERT THEN BEGIN
                InsertLineCounter := InsertLineCounter + 1;
                TemplateRec."Line processed" := TRUE;
                TemplateRec.MODIFY;
              END;
            END;

          UNTIL LvSiteMngmntHoursEmplRec.NEXT = 0;
          END;
      UNTIL TemplateRec.NEXT = 0;

      MESSAGE(Text001,InsertHeadCounter,InsertLineCounter);
    END;

    PROCEDURE GenerateHourLines@1100485001();
    BEGIN
    END;

    PROCEDURE PostHours@1100485013(VAR TempHourLinesRec@1100525000 : TEMPORARY Record 11012039);
    VAR
      LvHourLines@1100485000 : Record 11012039;
      LvHourHeader@1100485001 : Record 11012038;
      HourAccountingPostingDate@1100528400 : Record 11020202;
      LvSuccesInt@1100485002 : Integer;
      HeaderBl@1100525001 : Boolean;
      HumanResourcesSetup@1100525002 : Record 5218;
      lvJournalTemplate@1100525003 : Record 80;
      lvDimVal@1100525004 : Record 349;
      ServiceOrder@1100527450 : Record 11012823;
      FPSLicenseManagement@1100527451 : Codeunit 11229289;
      ServiceOrderIndication@1100527452 : Record 11012837;
    BEGIN
      SiteMngmntHoursSetup.GET;
      Question := STRSUBSTNO('%1 '+ Text004,TempHourLinesRec.COUNT);
      LineNo := 0;

      LvHourLines.CHANGECOMPANY(TempHourLinesRec."Supplying Company");
      LvHourLines.SETRANGE(Year,TempHourLinesRec.Year);
      LvHourLines.SETRANGE(Week,TempHourLinesRec.Week);
      LvHourLines.SETRANGE("Employee No.",TempHourLinesRec."Employee No.");
      LvHourLines.SETRANGE("Origin Hours",LvHourLines."Origin Hours"::HrAccSiteMgt);  //* C-019595
      LvHourLines.SETRANGE("Origin Company",COMPANYNAME);  //* C-027056
      IF LvHourLines.FINDSET(FALSE,FALSE) THEN BEGIN
        IF SiteMngmntHoursSetup."Gen. Only By Open Hoursacc." THEN BEGIN
          LvHourHeader.CHANGECOMPANY(TempHourLinesRec."Supplying Company");
          IF LvHourHeader.GET(TempHourLinesRec.Year, TempHourLinesRec.Week, TempHourLinesRec."Employee No.") THEN BEGIN
            IF LvHourHeader.Status <> LvHourHeader.Status::Open THEN
              ERROR(Text008);
          END;
        END;

        IF SiteMngmntHoursSetup."Overrule Created" THEN
          LvHourLines.DELETEALL(TRUE);

      END;

      BEGIN
        //* C-027193.sn
        lvDimVal.CHANGECOMPANY(TempHourLinesRec."Supplying Company");
        lvDimVal.SETCURRENTKEY(Code, "Global Dimension No.");
        lvDimVal.SETRANGE("Global Dimension No.", 2);  //* 2=Cost Object
        //* C-027193.en
        IF TempHourLinesRec.FINDSET(FALSE,FALSE) THEN
          REPEAT
            IF NOT HeaderBl THEN BEGIN
              //Invoeren urenkop als deze nog niet bestaat, in juiste bedrijf
              LvHourHeader.CHANGECOMPANY(TempHourLinesRec."Supplying Company");
              LvHourHeader.SETRANGE(Year,TempHourLinesRec.Year);
              LvHourHeader.SETRANGE(Week,TempHourLinesRec.Week);
              LvHourHeader.SETRANGE("Employee No.",TempHourLinesRec."Employee No.");
              IF NOT LvHourHeader.FIND('-') THEN BEGIN
                LvHourHeader.INIT;
                LvHourHeader.Year := TempHourLinesRec.Year;
                LvHourHeader.Week := TempHourLinesRec.Week;
                LvHourHeader.GetPostingDate(TempHourLinesRec."Supplying Company");
                LvHourHeader.FillDocumentNo(TempHourLinesRec."Supplying Company");
                LvHourHeader."Employee No." := TempHourLinesRec."Employee No.";
                LvHourHeader."Supplying Company" := TempHourLinesRec."Supplying Company";  //* Needed for the next function
                LvHourHeader.FillEmployeeRelatedFields();  //* In this function EmplRec is read in Supplying Company
                LvHourHeader."Supplying Company" := '';  //* Supplying Company is the Hour Company, so empty
                LvHourHeader."Check by Empl. No." :=
                  LvHourHeader.GetDefaultCheckByEmplNo(TempHourLinesRec."Supplying Company",LvHourHeader."Employee No.",LvHourHeader."Supplying Company");
                LvHourHeader."Inserted On" := TODAY;
                LvHourHeader."Inserted By" := USERID;
                LvHourHeader.INSERT;
              END ELSE BEGIN
                IF SiteMngmntHoursSetup."Gen. Only By Open Hoursacc." THEN BEGIN
                  IF LvHourHeader.Status <> LvHourHeader.Status::Open THEN
                    ERROR(Text008)
                END;
              END;
              HeaderBl := TRUE;
            END;

            // Bepalen regelnummer
            LvHourLines.RESET;
            LvHourLines.CHANGECOMPANY(TempHourLinesRec."Supplying Company");
            LvHourLines.SETRANGE(Year,TempHourLinesRec.Year);
            LvHourLines.SETRANGE(Week,TempHourLinesRec.Week);
            LvHourLines.SETRANGE("Employee No.",TempHourLinesRec."Employee No.");
            //LvHourLines.SETRANGE("Supplying Company",TempHourLinesRec."Supplying Company"); Not a field of Key1, so no filter!!!!
            IF LvHourLines.FINDLAST THEN
              LineNo := LvHourLines."Line No." + 1000
            ELSE
              LineNo := LineNo + 1000;

            //Invoeren urenregel
            LvHourLines.RESET;
            LvHourLines.CHANGECOMPANY(TempHourLinesRec."Supplying Company");
            LvHourLines.INIT;
            LvHourLines."Line No." := LineNo;
            LvHourLines.Year := TempHourLinesRec.Year;
            //* Suppl.comp. must first be filled, made empty just before insert (needed because not always suppl. is current company)
            LvHourLines."Supplying Company" := TempHourLinesRec."Supplying Company";
            LvHourLines."Receiving Company" := TempHourLinesRec."Receiving Company";  //db, 20-12-12: C004513
            LvHourLines.VALIDATE(Week,TempHourLinesRec.Week);
            LvHourLines."Cost Object" := TempHourLinesRec."Cost Object";
            LvHourLines."Cost Type" := TempHourLinesRec."Cost Type";
            LvHourLines.VALIDATE("Employee No.",TempHourLinesRec."Employee No.");
            LvHourLines."Document No." := LvHourHeader."Document No.";

            IF TempHourLinesRec.Type = TempHourLinesRec.Type::Project THEN BEGIN
              LvHourLines.Type := LvHourLines.Type::Project;
              LvHourLines."Project No." := TempHourLinesRec."Project No.";
              LvHourLines."Extension Contract" := TempHourLinesRec."Extension Contract";
            END;

            IF TempHourLinesRec.Type = TempHourLinesRec.Type::Plant THEN BEGIN
              LvHourLines.Type := LvHourLines.Type::Plant;
              LvHourLines."Plant Location" := TempHourLinesRec."Plant Location";
              LvHourLines."Plant Type" := TempHourLinesRec."Plant Type";
              LvHourLines."Plant No." := TempHourLinesRec."Plant No.";
              LvHourLines."Cost Component Plant" := TempHourLinesRec."Cost Component Plant";
              LvHourLines."Plant Rate Code" := TempHourLinesRec."Plant Rate Code";
            END;

            IF TempHourLinesRec.Type = TempHourLinesRec.Type::Service THEN BEGIN
              LvHourLines.Type := LvHourLines.Type::Service;
              LvHourLines."Service Order No." := TempHourLinesRec."Service Order No.";
              LvHourLines."Base Service Order No." := TempHourLinesRec."Base Service Order No.";
              LvHourLines."Service Location No." := TempHourLinesRec."Service Location No.";
              LvHourLines."Service Contract No." := TempHourLinesRec."Service Contract No.";
              LvHourLines."Additional Cost (Service)" := TempHourLinesRec."Additional Cost (Service)";
            END;

            IF TempHourLinesRec.Type = TempHourLinesRec.Type::ResourceRequest THEN
              LvHourLines.Type := LvHourLines.Type::ResourceRequest;

            IF TempHourLinesRec."Cost Code" <>'' THEN BEGIN
              LvHourLines.Type := LvHourLines.Type::Indirect;
              LvHourLines."Cost Code" := TempHourLinesRec."Cost Code";
            END;

            LvHourLines.Element := TempHourLinesRec.Element;
            LvHourLines."Department Code" := TempHourLinesRec."Department Code"; //kzwerver, 2013-06-10, n, #C008055
            LvHourLines."Resource Req. Receiv. Company" := TempHourLinesRec."Resource Req. Receiv. Company";
            LvHourLines."Resource Request No." := TempHourLinesRec."Resource Request No.";
            LvHourLines."Try-out No." := TempHourLinesRec."Try-out No.";
            LvHourLines."Estimate No." := TempHourLinesRec."Estimate No.";

            //* C-027193.sn
            IF LvHourLines."Cost Object" <> '' THEN BEGIN
              lvDimVal.SETRANGE(Code, LvHourLines."Cost Object");
              IF lvDimVal.FINDFIRST THEN BEGIN
                IF lvDimVal."Cost Component" <> '' THEN
                  LvHourLines."Cost Component" := lvDimVal."Cost Component";
              END;

              IF (LvHourLines."Cost Component" = '') AND (LvHourLines.Type = LvHourLines.Type::Service) THEN
                IF TempHourLinesRec."Supplying Company" = TempHourLinesRec."Receiving Company" THEN
                  IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServiceOrder) THEN BEGIN
                    ServiceOrder.CHANGECOMPANY(TempHourLinesRec."Supplying Company");
                    IF ServiceOrder.GET(LvHourLines."Service Order No.") THEN BEGIN
                      ServiceOrderIndication.CHANGECOMPANY(TempHourLinesRec."Supplying Company");
                      IF ServiceOrderIndication.GET(ServiceOrderIndication.Indication::Kind, ServiceOrder."Order Kind") THEN
                        LvHourLines."Cost Component" := ServiceOrderIndication."Cost Component";
                    END;
                  END;
            END;
            //* C-027193.en
            IF TempHourLinesRec."Wage Component" <>'' THEN
              LvHourLines.VALIDATE("Wage Component",TempHourLinesRec."Wage Component");
            LvHourLines.Monday := TempHourLinesRec.Monday;
            LvHourLines.Tuesday := TempHourLinesRec.Tuesday;
            LvHourLines.Wednesday := TempHourLinesRec.Wednesday;
            LvHourLines.Thursday := TempHourLinesRec.Thursday;
            LvHourLines.Friday := TempHourLinesRec.Friday;
            LvHourLines.Saturday := TempHourLinesRec.Saturday;
            LvHourLines.Sunday := TempHourLinesRec.Sunday;
            LvHourLines."Total Line" := TempHourLinesRec."Total Line";
            LvHourLines.Quantity := TempHourLinesRec.Quantity;
            LvHourLines."Currency Code" := '';
            LvHourLines."Unit Cost (LCY)" := TempHourLinesRec."Unit Cost (LCY)";
            LvHourLines."Amount (LCY)" := TempHourLinesRec."Amount (LCY)";
            //*C-028665.sn
            LvHourLines."Unit Cost" := TempHourLinesRec."Unit Cost (LCY)";
            LvHourLines.Amount := TempHourLinesRec."Amount (LCY)";
            IF (TempHourLinesRec."Unit Cost (LCY)" = 0) AND (TempHourLinesRec."Amount (LCY)" = 0) THEN  // If not filled yet (C11012178)
              LvHourLines.CalcRateAndAmount();
            //*C-028665.sn
            LvHourLines.Comment := TempHourLinesRec.Comment;

            HumanResourcesSetup.CHANGECOMPANY(TempHourLinesRec."Supplying Company");
            HumanResourcesSetup.GET;
            HumanResourcesSetup.TESTFIELD("Hours Journal Template");
            lvJournalTemplate.CHANGECOMPANY(TempHourLinesRec."Supplying Company");
            lvJournalTemplate.GET(HumanResourcesSetup."Hours Journal Template");
            LvHourLines."Source Code" := lvJournalTemplate."Source Code";
            LvHourLines."Reason Code" := lvJournalTemplate."Reason Code";
            IF TempHourLinesRec."Reason Code" <> '' THEN
              LvHourLines."Reason Code" := TempHourLinesRec."Reason Code";

            IF TempHourLinesRec."Posting Date" <> 0D THEN
              LvHourLines."Posting Date" := TempHourLinesRec."Posting Date"
            ELSE BEGIN
              HourAccountingPostingDate.CHANGECOMPANY(TempHourLinesRec."Supplying Company");
              IF HourAccountingPostingDate.GET(LvHourLines.Year,LvHourLines.Week) THEN
                LvHourLines."Posting Date" := HourAccountingPostingDate."Posting Date"
              ELSE BEGIN
                LvHourLines."Posting Date" := DWY2DATE(5,TempHourLinesRec.Week,TempHourLinesRec.Year);
                //*26415.sn
                IF LvHourLines.Monday <> 0 THEN LvHourLines."Posting Date" := DWY2DATE(1,LvHourLines.Week,LvHourLines.Year);
                IF LvHourLines.Tuesday <> 0 THEN LvHourLines."Posting Date" := DWY2DATE(2,LvHourLines.Week,LvHourLines.Year);
                IF LvHourLines.Wednesday <> 0 THEN LvHourLines."Posting Date" := DWY2DATE(3,LvHourLines.Week,LvHourLines.Year);
                IF LvHourLines.Thursday <> 0 THEN LvHourLines."Posting Date" := DWY2DATE(4,LvHourLines.Week,LvHourLines.Year);
                IF LvHourLines.Friday <> 0 THEN LvHourLines."Posting Date" := DWY2DATE(5,LvHourLines.Week,LvHourLines.Year);
                IF LvHourLines.Saturday <> 0 THEN LvHourLines."Posting Date" := DWY2DATE(6,LvHourLines.Week,LvHourLines.Year);
                IF LvHourLines.Sunday <> 0 THEN LvHourLines."Posting Date" := DWY2DATE(7,LvHourLines.Week,LvHourLines.Year);
                //*26415.en
              END;
            END;
            IF TempHourLinesRec.External THEN
              LvHourLines.External := TRUE;
            // C001638.sn
            LvHourLines."Receiving Company" := TempHourLinesRec."Receiving Company";
            LvHourLines.FillMainProject();  //*C-028703
            LvHourLines."Receiving Company" := '';
            // C001638.en
            IF TempHourLinesRec."Receiving Company" <> TempHourLinesRec."Supplying Company" THEN
              LvHourLines."Receiving Company" := TempHourLinesRec."Receiving Company";
            LvHourLines."Supplying Company" := '';  //* Records added in suppl.company so must be empty (see also remarks above)
            LvHourLines."Origin Hours" := LvHourLines."Origin Hours"::HrAccSiteMgt;  //* C-019595
            LvHourLines."Origin Company" := COMPANYNAME;  //* C-027056 NAV Company! (so not Suppl. or Receiving Company)
            // LvHourLines.FillMainProject();  //*C-028703 // C001638.o
            //Call C024379 sn
            LvHourLines."Start Time" := TempHourLinesRec."Start Time";
            LvHourLines."End Time" := TempHourLinesRec."End Time" ;
            //Call C024379 en

            LvHourLines."Cost Price Found at" := Text002;
            FillNacFields(TempHourLinesRec, LvHourLines);
            IF LvHourLines.INSERT THEN
              LvSuccesInt := LvSuccesInt + 1
            ELSE BEGIN
              ErrorMess := STRSUBSTNO(Text006 ,LvHourLines.Year,
                                      TempHourLinesRec.Week,
                                      LvHourLines."Employee No.",
                                      LvHourLines."Project No.",
                                      TempHourLinesRec."Receiving Company");
              StoreMessage(ErrorMess);
            END;
          UNTIL TempHourLinesRec.NEXT = 0;
      END;

      ErrorRec.SETRANGE("User ID", USERID);
      ErrorRec.SETRANGE("Source Type", ErrorRec."Source Type"::"Hoursacc. Site manager");
      IF ErrorRec.FIND('-') THEN BEGIN
        COMMIT;
        PAGE.RUNMODAL(PAGE::Errors, ErrorRec);
      END;
    END;

    PROCEDURE StoreMessage@5(lvMess@11012001 : Text[250]);
    VAR
      ErrorRec@1210190000 : Record 11012051;
      lvError@11012002 : Integer;
    BEGIN
      WITH ErrorRec DO BEGIN
        SETRANGE("User ID", USERID);
        SETRANGE("Source Type", "Source Type"::"Hoursacc. Site manager");
        IF FINDLAST THEN
          lvError := "Line No." + 1
        ELSE
          lvError := 1;

        INIT;
        "User ID" := USERID;
        "Source Type" := "Source Type"::"Hoursacc. Site manager";
        "Line No." := lvError;
        "Error message" := ErrorMess;
        INSERT;
      END;
    END;

    PROCEDURE UpdatePlantHourRevLine@1100485092(ISiteMgtHourHeadRec@1100525001 : Record 11012360;ISiteMgtHourLineRec@1100525002 : Record 11012361) : Integer;
    VAR
      lvPlantHourRevHeadRec@1100485000 : Record 11012573;
      lvPlantHourRevLineRec@1100485002 : Record 11012574;
      lvPlantHourRevLineRec2@1100525000 : Record 11012574;
    BEGIN
      //* Unmanned plant always only hours (so no expenses)
      WITH ISiteMgtHourLineRec DO BEGIN
        IF (Type <> Type::UnmannedPlant) THEN
          EXIT;

        IF "Plant Company" <> COMPANYNAME THEN BEGIN
          lvPlantHourRevHeadRec.CHANGECOMPANY("Plant Company");
          lvPlantHourRevLineRec.CHANGECOMPANY("Plant Company");
          lvPlantHourRevLineRec2.CHANGECOMPANY("Plant Company");
        END;

        //Create Plant Hour Revenue Header if necessary (if not already exist)
        IF NOT lvPlantHourRevHeadRec.GET(Year, Week, "Plant Type", "Plant No.") THEN BEGIN
          lvPlantHourRevHeadRec.INIT;
          lvPlantHourRevHeadRec.Year := Year;
          lvPlantHourRevHeadRec.Week := Week;
          lvPlantHourRevHeadRec."Plant Type" := "Plant Type";
          lvPlantHourRevHeadRec."Plant No." := "Plant No.";
          lvPlantHourRevHeadRec.INSERT(FALSE);
        END;

        //Create Plant Hour Revenue Line
        lvPlantHourRevLineRec.INIT;
        lvPlantHourRevLineRec.Year := Year;
        lvPlantHourRevLineRec.Week := Week;
        lvPlantHourRevLineRec."Plant Type" := "Plant Type";
        lvPlantHourRevLineRec."Plant No." := "Plant No.";
        lvPlantHourRevLineRec2.SETRANGE(Year, Year);
        lvPlantHourRevLineRec2.SETRANGE(Week, Week);
        lvPlantHourRevLineRec2.SETRANGE("Plant Type", "Plant Type");
        lvPlantHourRevLineRec2.SETRANGE("Plant No.", "Plant No.");
        IF lvPlantHourRevLineRec2.FINDLAST THEN
          lvPlantHourRevLineRec."Line No." := lvPlantHourRevLineRec2."Line No." + 10000
        ELSE
          lvPlantHourRevLineRec."Line No." := 10000;
        lvPlantHourRevLineRec.INSERT(FALSE);
        lvPlantHourRevLineRec."Plant Location" := "Plant Location";
        lvPlantHourRevLineRec."Employee No." := '';
        //lvPlantHourRevLineRec.Type := lvPlantHourRevLineRec.Type::Hours;  //C-019470.o
        lvPlantHourRevLineRec.Type := lvPlantHourRevLineRec.Type::"Unmanned Hours";  //C-019470.n
        IF lvPlantHourRevLineRec."Rate Code" = '' THEN
          lvPlantHourRevLineRec."Rate Code" := GetDefaultPlantRateCode("Plant Location", "Plant Company");
        lvPlantHourRevLineRec.Element := Element;
        lvPlantHourRevLineRec.Quantity := 0;
        lvPlantHourRevLineRec."Unit Price" := 0;
        lvPlantHourRevLineRec.Amount := 0;
        lvPlantHourRevLineRec.Monday := Monday;
        lvPlantHourRevLineRec.Tuesday := Tuesday;
        lvPlantHourRevLineRec.Wednesday := Wednesday;
        lvPlantHourRevLineRec.Thursday := Thursday;
        lvPlantHourRevLineRec.Friday := Friday;
        lvPlantHourRevLineRec.Saturday := Saturday;
        lvPlantHourRevLineRec.Sunday := Sunday;
        lvPlantHourRevLineRec."Total Line" := "Total Line";
        lvPlantHourRevLineRec.Comment := Comment;
        lvPlantHourRevLineRec.Origin := lvPlantHourRevLineRec.Origin::HourAcc;
        IF "Plant Company" <> COMPANYNAME THEN                      //* For unmanned plant the field 'Employee Company' is used
          lvPlantHourRevLineRec."Employee Company" := COMPANYNAME;  //* for the '(Site Mgt) Hour Acc. Company' (empty when equal).
        lvPlantHourRevLineRec.MODIFY(FALSE);

        EXIT(lvPlantHourRevLineRec."Line No.");
      END;
    END;

    PROCEDURE GetDefaultPlantRateCode@1100525001(IPlantLocation@1100525002 : Code[20];IPlantCompany@1100525001 : Text[30]) : Code[10];
    VAR
      lvPlantSetupRec@1100525000 : Record 11012550;
      PlantRateCodeRec@1100525003 : Record 11020502;
      RateCode@1100525004 : Code[10];
    BEGIN
      lvPlantSetupRec.CHANGECOMPANY(IPlantCompany);
      lvPlantSetupRec.GET;
      IF lvPlantSetupRec."Rate Codes" THEN BEGIN
        //DP00485.so
        //IF PlantRateCodeRec.CheckPlantRateCode(IPlantLocation, lvPlantSetupRec."Default Rate Code Rental" ,FALSE, IPlantCompany) THEN
        //  EXIT(lvPlantSetupRec."Default Rate Code Rental");
        //DP00485.sn C009408
        RateCode := PlantRateCodeRec.GetDefaultRateCodeRental(IPlantLocation,FALSE, IPlantCompany);
        IF PlantRateCodeRec.CheckPlantRateCode(IPlantLocation, RateCode ,FALSE, IPlantCompany, 0) THEN
          EXIT(RateCode);
        //DP00485.en
      END;
      EXIT('');
    END;

    PROCEDURE CheckPlantHourRevLineOpen@1100525003(IYear@1100525001 : Integer;IWeek@1100525002 : Integer;IPlantType@1100525003 : Code[20];IPlantNo@1100525004 : Code[10];IPlantLineNo@1100525005 : Integer;IPlantCompany@1100525006 : Text[30]) : Boolean;
    VAR
      lvPlantHourRevLineRec@1100525000 : Record 11012574;
      HourAccCompany@1100525007 : Text[30];
    BEGIN
      IF (IPlantLineNo = 0) THEN
        EXIT(TRUE);

      IF (IPlantCompany <> COMPANYNAME) THEN BEGIN
        lvPlantHourRevLineRec.CHANGECOMPANY(IPlantCompany);
        HourAccCompany := COMPANYNAME;
      END ELSE
        HourAccCompany := '';

      IF lvPlantHourRevLineRec.GET(IYear, IWeek, IPlantType, IPlantNo, IPlantLineNo) THEN BEGIN
        IF (lvPlantHourRevLineRec.Origin = lvPlantHourRevLineRec.Origin::HourAcc) AND
           (lvPlantHourRevLineRec."Employee Company" = HourAccCompany)
        THEN BEGIN
           IF (lvPlantHourRevLineRec.Status <> lvPlantHourRevLineRec.Status::Open) THEN
             EXIT(FALSE);
        END;
      END;
      IF NOT SiteMngmntHoursSetup.CheckPostingInWeekAllowed(IYear, IWeek, IPlantCompany, FALSE) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DeletePlantHourRevLineOpen@1100525006(IYear@1100525001 : Integer;IWeek@1100525002 : Integer;IPlantType@1100525003 : Code[20];IPlantNo@1100525004 : Code[10];IPlantLineNo@1100525005 : Integer;IPlantCompany@1100525006 : Text[30]);
    VAR
      lvPlantHourRevLineRec@1100525000 : Record 11012574;
      lvPlantHourRevHeadRec@1100525007 : Record 11012573;
      HourAccCompany@1100525008 : Text[30];
    BEGIN
      IF (IPlantLineNo = 0) THEN
        EXIT;

      IF (IPlantCompany <> COMPANYNAME) THEN BEGIN
        lvPlantHourRevLineRec.CHANGECOMPANY(IPlantCompany);
        HourAccCompany := COMPANYNAME;
      END ELSE
        HourAccCompany := '';

      IF lvPlantHourRevLineRec.GET(IYear, IWeek, IPlantType, IPlantNo, IPlantLineNo) THEN BEGIN
        IF (lvPlantHourRevLineRec.Origin = lvPlantHourRevLineRec.Origin::HourAcc) AND
           (lvPlantHourRevLineRec."Employee Company" = HourAccCompany) AND
           (lvPlantHourRevLineRec.Status = lvPlantHourRevLineRec.Status::Open)
        THEN BEGIN
          lvPlantHourRevLineRec.DELETE(FALSE);
          //
          lvPlantHourRevLineRec.SETRANGE(Year, IYear);
          lvPlantHourRevLineRec.SETRANGE(Week, IWeek);
          lvPlantHourRevLineRec.SETRANGE("Plant Type", IPlantType);
          lvPlantHourRevLineRec.SETRANGE("Plant No.", IPlantNo);
          IF lvPlantHourRevLineRec.ISEMPTY THEN BEGIN
            IF lvPlantHourRevHeadRec.GET(IYear, IWeek, IPlantType, IPlantNo) THEN
              lvPlantHourRevHeadRec.DELETE(FALSE);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE FillNacFields@1100528300(VAR TempHoursLogEntries@1100528300 : TEMPORARY Record 11012039;VAR HourAccountingLine@1100528301 : Record 11012039);
    BEGIN
      HourAccountingLine."Address From" := TempHoursLogEntries."Address From";
      HourAccountingLine."Address To" := TempHoursLogEntries."Address To";
      HourAccountingLine."Post Code From" := TempHoursLogEntries."Post Code From";
      HourAccountingLine."Post Code To" := TempHoursLogEntries."Post Code To";
      HourAccountingLine."City From" := TempHoursLogEntries."City From";
      HourAccountingLine."City To" := TempHoursLogEntries."City To";
      HourAccountingLine."Country/Region Code From" := TempHoursLogEntries."Country/Region Code From";
      HourAccountingLine."Country/Region Code To" := TempHoursLogEntries."Country/Region Code To";
      HourAccountingLine."Departure Date" := TempHoursLogEntries."Departure Date";
      HourAccountingLine."Departure Time" := TempHoursLogEntries."Departure Time";
      HourAccountingLine."Arrival Date" := TempHoursLogEntries."Arrival Date";
      HourAccountingLine."Arrival Time" := TempHoursLogEntries."Arrival Time";
    END;

    BEGIN
    END.
  }
}

