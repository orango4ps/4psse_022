OBJECT Codeunit 9200 Matrix Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=The previous column set could not be found.;NOR=Finner ikke forrige kolonnesett.;SVE=Det gick inte att hitta f”reg†ende kolumnupps„ttning.';
      Text002@1001 : TextConst 'ENU=The period could not be found.;NOR=Finner ikke perioden.;SVE=Det gick inte att hitta perioden.';
      Text003@1002 : TextConst 'ENU=There are no Calendar entries within the filter.;NOR=Det finnes ingen kalenderposter i filteret.;SVE=Det finns inga kalendertransaktioner i filtret.';
      RoundingFormatTxt@1003 : TextConst '@@@={Locked};ENU=<Precision,%1><Standard Format,0>;NOR=<Precision,%1><Standard Format,0>;SVE=<Precision,%1><Standard Format,0>';
      GeneralLedgerSetup@1005 : Record 98;
      GLSetupRead@1004 : Boolean;
      SetOption@1006 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn,,,,,FirstRec,LastRec';

    [External]
    PROCEDURE SetPeriodColumnSet@3(DateFilter@1012 : Text;PeriodType@1013 : 'Day,Week,Month,Quarter,Year,Accounting Period';Direction@1010 : 'Backward,Forward';VAR FirstColumn@1009 : Date;VAR LastColumn@1007 : Date;NoOfColumns@1006 : Integer);
    VAR
      Period@1008 : Record 2000000007;
      PeriodFormMgt@1005 : Codeunit 359;
      Steps@1004 : Integer;
      TmpFirstColumn@1001 : Date;
      TmpLastColumn@1000 : Date;
    BEGIN
      Period.SETRANGE("Period Type",PeriodType);
      IF DateFilter = '' THEN BEGIN
        Period."Period Start" := WORKDATE;
        IF PeriodFormMgt.FindDate('<=',Period,PeriodType) THEN
          Steps := 1;
        PeriodFormMgt.NextDate(Steps,Period,PeriodType);
        DateFilter := '>=' + FORMAT(Period."Period Start");
      END ELSE BEGIN
        Period.SETFILTER("Period Start",DateFilter);
        Period.FIND('-');
      END;

      IF (FORMAT(FirstColumn) = '') AND (FORMAT(LastColumn) = '') THEN BEGIN
        FirstColumn := Period."Period Start";
        Period.NEXT(NoOfColumns - 1);
        LastColumn := Period."Period Start";
        EXIT;
      END;

      IF Direction = Direction::Forward THEN BEGIN
        Period.SETFILTER("Period Start",DateFilter);
        IF Period.GET(PeriodType,LastColumn) THEN
          Period.NEXT;
        TmpFirstColumn := Period."Period Start";
        Period.NEXT(NoOfColumns - 1);
        TmpLastColumn := Period."Period Start";
        IF TmpFirstColumn <> LastColumn THEN BEGIN
          FirstColumn := TmpFirstColumn;
          LastColumn := TmpLastColumn;
        END;
        EXIT;
      END;

      IF Direction = Direction::Backward THEN BEGIN
        IF Period.GET(PeriodType,FirstColumn) THEN
          Period.NEXT(-1);
        TmpLastColumn := Period."Period Start";
        Period.NEXT(-NoOfColumns + 1);
        TmpFirstColumn := Period."Period Start";
        IF TmpLastColumn <> FirstColumn THEN BEGIN
          FirstColumn := TmpFirstColumn;
          LastColumn := TmpLastColumn;
        END;
      END;
    END;

    [External]
    PROCEDURE SetDimColumnSet@17(DimensionCode@1003 : Code[20];DimFilter@1002 : Text;SetWanted@1008 : Option;VAR RecordPosition@1010 : Text;VAR FirstColumn@1007 : Text;VAR LastColumn@1006 : Text;NoOfColumns@1004 : Integer);
    VAR
      DimVal@1005 : Record 349;
      TmpFirstColumn@1001 : Text[1024];
      TmpLastColumn@1000 : Text[1024];
      TmpSteps@1009 : Integer;
    BEGIN
      DimVal.SETRANGE("Dimension Code",DimensionCode);
      IF DimFilter <> '' THEN
        DimVal.SETFILTER(Code,DimFilter);

      CASE SetWanted OF
        SetOption::Initial:
          BEGIN
            IF DimVal.FIND('-') THEN BEGIN
              RecordPosition := DimVal.GETPOSITION;
              FirstColumn := DimVal.Code;
              TmpSteps := DimVal.NEXT(NoOfColumns - 1);
              LastColumn := DimVal.Code;
            END;
          END;
        SetOption::Same:
          BEGIN
            IF RecordPosition <> '' THEN BEGIN
              DimVal.SETPOSITION(RecordPosition);
              DimVal.FIND('=');
              FirstColumn := DimVal.Code;
              TmpSteps := DimVal.NEXT(NoOfColumns - 1);
              LastColumn := DimVal.Code;
            END;
          END;
        SetOption::Next:
          BEGIN
            IF RecordPosition <> '' THEN BEGIN
              DimVal.SETPOSITION(RecordPosition);
              DimVal.FIND('=');
              IF DimVal.NEXT(NoOfColumns) <> 0 THEN BEGIN
                RecordPosition := DimVal.GETPOSITION;
                TmpFirstColumn := DimVal.Code;
                TmpSteps := DimVal.NEXT(NoOfColumns - 1);
                TmpLastColumn := DimVal.Code;
                IF TmpFirstColumn <> LastColumn THEN BEGIN
                  FirstColumn := TmpFirstColumn;
                  LastColumn := TmpLastColumn;
                END;
              END ELSE
                SetDimColumnSet(DimensionCode,DimFilter,SetOption::Same,RecordPosition,FirstColumn,LastColumn,NoOfColumns);
            END;
          END;
        SetOption::Previous:
          BEGIN
            IF RecordPosition <> '' THEN BEGIN
              DimVal.SETPOSITION(RecordPosition);
              DimVal.FIND('=');
              IF DimVal.NEXT(-1) <> 0 THEN BEGIN
                TmpLastColumn := DimVal.Code;
                TmpSteps := DimVal.NEXT(-NoOfColumns + 1);
                RecordPosition := DimVal.GETPOSITION;
                TmpFirstColumn := DimVal.Code;
                IF TmpLastColumn <> FirstColumn THEN BEGIN
                  FirstColumn := TmpFirstColumn;
                  LastColumn := TmpLastColumn;
                END;
              END ELSE
                SetDimColumnSet(DimensionCode,DimFilter,SetOption::Same,RecordPosition,FirstColumn,LastColumn,NoOfColumns);
            END;
          END;
        SetOption::NextColumn:
          BEGIN
            IF RecordPosition <> '' THEN BEGIN
              DimVal.SETPOSITION(RecordPosition);
              DimVal.FIND('=');
              IF DimVal.NEXT <> 0 THEN BEGIN
                RecordPosition := DimVal.GETPOSITION;
                TmpFirstColumn := DimVal.Code;
                TmpSteps := DimVal.NEXT(NoOfColumns - 1);
                TmpLastColumn := DimVal.Code;
                IF TmpFirstColumn <> LastColumn THEN BEGIN
                  FirstColumn := TmpFirstColumn;
                  LastColumn := TmpLastColumn;
                END;
              END ELSE
                SetDimColumnSet(DimensionCode,DimFilter,SetOption::Same,RecordPosition,FirstColumn,LastColumn,NoOfColumns);
            END;
          END;
        SetOption::PreviousColumn:
          BEGIN
            IF RecordPosition <> '' THEN BEGIN
              DimVal.SETPOSITION(RecordPosition);
              DimVal.FIND('=');
              IF DimVal.NEXT(-1) <> 0 THEN BEGIN
                RecordPosition := DimVal.GETPOSITION;
                TmpFirstColumn := DimVal.Code;
                TmpSteps := DimVal.NEXT(NoOfColumns - 1);
                TmpLastColumn := DimVal.Code;
                IF TmpLastColumn <> FirstColumn THEN BEGIN
                  FirstColumn := TmpFirstColumn;
                  LastColumn := TmpLastColumn;
                END;
              END ELSE
                SetDimColumnSet(DimensionCode,DimFilter,SetOption::Same,RecordPosition,FirstColumn,LastColumn,NoOfColumns);
            END;
          END;
      END;

      IF ABS(TmpSteps) <> NoOfColumns THEN
        NoOfColumns := ABS(TmpSteps);
    END;

    [External]
    PROCEDURE DimToCaptions@9(VAR CaptionSet@1000 : ARRAY [32] OF Text[80];VAR MatrixRecords@1007 : ARRAY [32] OF Record 367;DimensionCode@1001 : Code[20];FirstColumn@1003 : Text;LastColumn@1011 : Text;VAR NumberOfColumns@1006 : Integer;ShowColumnName@1008 : Boolean;VAR CaptionRange@1009 : Text;DimensionValueFilter@1002 : Text);
    VAR
      DimensionValue@1004 : Record 349;
      i@1005 : Integer;
    BEGIN
      DimensionValue.SETRANGE("Dimension Code",DimensionCode);
      DimensionValue.SETRANGE(Code,FirstColumn,LastColumn);
      DimensionValue.FILTERGROUP(7);
      IF DimensionValueFilter <> '' THEN
        DimensionValue.SETFILTER(Code,DimensionValueFilter);
      DimensionValue.FILTERGROUP(0);

      i := 0;
      IF DimensionValue.FINDSET THEN
        REPEAT
          i := i + 1;
          MatrixRecords[i].Code := DimensionValue.Code;
          MatrixRecords[i].Name := DimensionValue.Name;
          MatrixRecords[i].Totaling := DimensionValue.Totaling;
          IF ShowColumnName THEN
            CaptionSet[i] := DimensionValue.Name
          ELSE
            CaptionSet[i] := DimensionValue.Code
        UNTIL (i = ARRAYLEN(CaptionSet)) OR (DimensionValue.NEXT = 0);

      NumberOfColumns := i;

      IF NumberOfColumns > 1 THEN
        CaptionRange := COPYSTR(CaptionSet[1] + '..' + CaptionSet[NumberOfColumns],1,MAXSTRLEN(CaptionRange))
      ELSE
        CaptionRange := CaptionSet[1];
    END;

    [External]
    PROCEDURE GenerateMatrixData@7(VAR RecRef@1000 : RecordRef;SetWanted@1008 : Option;MaximumSetLength@1001 : Integer;CaptionFieldNo@1002 : Integer;VAR RecordPosition@1006 : Text;VAR CaptionSet@1005 : ARRAY [32] OF Text[80];VAR CaptionRange@1004 : Text;VAR CurrSetLength@1007 : Integer);
    VAR
      Steps@1009 : Integer;
      Caption@1003 : Text;
      MaxCaptionLength@1010 : Integer;
    BEGIN
      CLEAR(CaptionSet);
      CaptionRange := '';
      CurrSetLength := 0;

      IF RecRef.ISEMPTY THEN BEGIN
        RecordPosition := '';
        EXIT;
      END;

      CASE SetWanted OF
        SetOption::Initial:
          RecRef.FINDFIRST;
        SetOption::Previous:
          BEGIN
            RecRef.SETPOSITION(RecordPosition);
            RecRef.GET(RecRef.RECORDID);
            Steps := RecRef.NEXT(-MaximumSetLength);
            //**4PS.so.dbeekman
            //IF NOT (Steps IN [-MaximumSetLength,0]) THEN
            //  ERROR(Text001);
            //**4PS.eo
          END;
        SetOption::Same:
          BEGIN
            RecRef.SETPOSITION(RecordPosition);
            RecRef.GET(RecRef.RECORDID);
          END;
        SetOption::Next:
          BEGIN
            RecRef.SETPOSITION(RecordPosition);
            RecRef.GET(RecRef.RECORDID);
            IF NOT (RecRef.NEXT(MaximumSetLength) = MaximumSetLength) THEN BEGIN
              RecRef.SETPOSITION(RecordPosition);
              RecRef.GET(RecRef.RECORDID);
            END;
          END;
        SetOption::PreviousColumn:
          BEGIN
            RecRef.SETPOSITION(RecordPosition);
            RecRef.GET(RecRef.RECORDID);
            Steps := RecRef.NEXT(-1);
            IF NOT (Steps IN [-1,0]) THEN
              ERROR(Text001);
          END;
        SetOption::NextColumn:
          BEGIN
            RecRef.SETPOSITION(RecordPosition);
            RecRef.GET(RecRef.RECORDID);
            IF NOT (RecRef.NEXT(1) = 1) THEN BEGIN
              RecRef.SETPOSITION(RecordPosition);
              RecRef.GET(RecRef.RECORDID);
            END;
          END;
        //**4PS.sn.dbeekman
        SetOption::FirstRec:
          BEGIN
            RecRef.FINDFIRST;
          END;
        SetOption::LastRec:
          BEGIN
            RecRef.FINDLAST;
            Steps := RecRef.NEXT(-(MaximumSetLength - 1));
          END;
        //**4PS.en
      END;

      RecordPosition := RecRef.GETPOSITION;

      REPEAT
        CurrSetLength := CurrSetLength + 1;
        Caption := FORMAT(RecRef.FIELD(CaptionFieldNo).VALUE);
        MaxCaptionLength := MAXSTRLEN(CaptionSet[CurrSetLength]);
        IF STRLEN(Caption) <= MaxCaptionLength THEN
          CaptionSet[CurrSetLength] := COPYSTR(Caption,1,MaxCaptionLength)
        ELSE
          CaptionSet[CurrSetLength] := COPYSTR(Caption,1,MaxCaptionLength - 3) + '...';
      UNTIL (CurrSetLength = MaximumSetLength) OR (RecRef.NEXT <> 1);

      IF CurrSetLength = 1 THEN
        CaptionRange := CaptionSet[1]
      ELSE
        CaptionRange := CaptionSet[1] + '..' + CaptionSet[CurrSetLength];
    END;

    [External]
    PROCEDURE GeneratePeriodMatrixData@1(SetWanted@1008 : Option;MaximumSetLength@1001 : Integer;UseNameForCaption@1002 : Boolean;PeriodType@1003 : 'Day,Week,Month,Quarter,Year,Accounting Period';DateFilter@1000 : Text;VAR RecordPosition@1006 : Text;VAR CaptionSet@1005 : ARRAY [32] OF Text[80];VAR CaptionRange@1004 : Text;VAR CurrSetLength@1007 : Integer;VAR PeriodRecords@1011 : ARRAY [32] OF TEMPORARY Record 2000000007);
    VAR
      Calendar@1010 : Record 2000000007;
      PeriodFormMgt@1012 : Codeunit 359;
      Steps@1009 : Integer;
      CrLf@1100528500 : Text[2];
    BEGIN
      CLEAR(CaptionSet);
      CaptionRange := '';
      CurrSetLength := 0;
      CLEAR(PeriodRecords);
      CLEAR(Calendar);
      CLEAR(PeriodFormMgt);

      Calendar.SETFILTER("Period Start",PeriodFormMgt.GetFullPeriodDateFilter(PeriodType,DateFilter));

      IF NOT FindDate('-',Calendar,PeriodType,FALSE) THEN BEGIN
        RecordPosition := '';
        ERROR(Text003);
      END;

      CASE SetWanted OF
        SetOption::Initial:
          BEGIN
            IF (PeriodType = PeriodType::"Accounting Period") OR (DateFilter <> '') THEN BEGIN
              FindDate('-',Calendar,PeriodType,TRUE);
            END ELSE
              Calendar."Period Start" := 0D;
            FindDate('=><',Calendar,PeriodType,TRUE);
          END;
        SetOption::Previous:
          BEGIN
            Calendar.SETPOSITION(RecordPosition);
            FindDate('=',Calendar,PeriodType,TRUE);
            Steps := PeriodFormMgt.NextDate(-MaximumSetLength,Calendar,PeriodType);
            IF NOT (Steps IN [-MaximumSetLength,0]) THEN
              ERROR(Text001);
          END;
        SetOption::PreviousColumn:
          BEGIN
            Calendar.SETPOSITION(RecordPosition);
            FindDate('=',Calendar,PeriodType,TRUE);
            Steps := PeriodFormMgt.NextDate(-1,Calendar,PeriodType);
            IF NOT (Steps IN [-1,0]) THEN
              ERROR(Text001);
          END;
        SetOption::NextColumn:
          BEGIN
            Calendar.SETPOSITION(RecordPosition);
            FindDate('=',Calendar,PeriodType,TRUE);
            IF NOT (PeriodFormMgt.NextDate(1,Calendar,PeriodType) = 1) THEN BEGIN
              Calendar.SETPOSITION(RecordPosition);
              FindDate('=',Calendar,PeriodType,TRUE);
            END;
          END;
        SetOption::Same:
          BEGIN
            Calendar.SETPOSITION(RecordPosition);
            FindDate('=',Calendar,PeriodType,TRUE)
          END;
        SetOption::Next:
          BEGIN
            Calendar.SETPOSITION(RecordPosition);
            FindDate('=',Calendar,PeriodType,TRUE);
            IF NOT (PeriodFormMgt.NextDate(MaximumSetLength,Calendar,PeriodType) = MaximumSetLength) THEN BEGIN
              Calendar.SETPOSITION(RecordPosition);
              FindDate('=',Calendar,PeriodType,TRUE);
            END;
          END;
      END;

      //>>190228, #23127
      //RecordPosition := Calendar.GETPOSITION;
      RecordPosition := Calendar.GETPOSITION(FALSE);
      //<<190228

      REPEAT
        CurrSetLength := CurrSetLength + 1;
        IF UseNameForCaption THEN
          CaptionSet[CurrSetLength] := FORMAT(Calendar."Period Name")
        ELSE
        BEGIN //**4PS.n
          CaptionSet[CurrSetLength] := PeriodFormMgt.CreatePeriodFormat(PeriodType,Calendar."Period Start");
        //**4PS.sn
          CASE PeriodType OF
            PeriodType::Day:
              BEGIN
                CrLf[1] := 13;
                CrLf[2] := 10;
                CaptionSet[CurrSetLength] := CaptionSet[CurrSetLength] + ' ' + CrLf + COPYSTR(LOWERCASE(FORMAT(Calendar."Period Start",0,'<Weekday Text>')),1,2);
              END;
            PeriodType::Week:
              CaptionSet[CurrSetLength] := CaptionSet[CurrSetLength] + ' ' + FORMAT(Calendar."Period Start") + '..';
          END;
        END;
        //**4PS.en
        PeriodRecords[CurrSetLength].COPY(Calendar);
      UNTIL (CurrSetLength = MaximumSetLength) OR (PeriodFormMgt.NextDate(1,Calendar,PeriodType) <> 1);

      IF CurrSetLength = 1 THEN
        CaptionRange := CaptionSet[1]
      ELSE
        CaptionRange := CaptionSet[1] + '..' + CaptionSet[CurrSetLength];

      AdjustPeriodWithDateFilter(DateFilter,PeriodRecords[1]."Period Start",
        PeriodRecords[CurrSetLength]."Period End");
    END;

    LOCAL PROCEDURE FindDate@10(SearchString@1000 : Text[3];VAR Calendar@1001 : Record 2000000007;PeriodType@1002 : Option;ErrorWhenNotFound@1005 : Boolean) : Boolean;
    VAR
      PeriodFormMgt@1004 : Codeunit 359;
      Found@1003 : Boolean;
    BEGIN
      CLEAR(PeriodFormMgt);
      Found := PeriodFormMgt.FindDate(SearchString,Calendar,PeriodType);
      IF ErrorWhenNotFound AND NOT Found THEN
        ERROR(Text002);
      EXIT(Found);
    END;

    [External]
    PROCEDURE SetIndentation@8(VAR TextString@1000 : Text[1024];Indentation@1001 : Integer);
    VAR
      Substr@1002 : Text[1024];
    BEGIN
      Substr := PADSTR(Substr,Indentation * 2,' ');
      TextString := Substr + TextString;
    END;

    [External]
    PROCEDURE GetPKRange@11(VAR RecRef@1001 : RecordRef;KeyFieldNo@1002 : Integer;RecordPosition@1003 : Text;CurrSetLength@1004 : Integer) PKRange : Text[100];
    VAR
      FieldRef@1000 : FieldRef;
      CurFilter@1006 : Text;
      RecCount@1005 : Integer;
    BEGIN
      RecRef.SETPOSITION(RecordPosition);
      RecRef.GET(RecRef.RECORDID);
      PKRange := FORMAT(RecRef.FIELD(KeyFieldNo).VALUE);
      IF CurrSetLength = 1 THEN
        EXIT(PKRange);
      RecRef.NEXT(CurrSetLength);
      PKRange := PKRange + '..' + FORMAT(RecRef.FIELD(KeyFieldNo).VALUE);
      FieldRef := RecRef.FIELD(KeyFieldNo);
      CurFilter := FieldRef.GETFILTER;
      IF CurFilter = '' THEN
        EXIT(PKRange);
      FieldRef.SETFILTER(PKRange);
      RecCount := RecRef.COUNT;
      FieldRef.SETFILTER(CurFilter);
      IF CurrSetLength = RecCount THEN
        EXIT(PKRange);
      EXIT('');
    END;

    [External]
    PROCEDURE GenerateDimColumnCaption@12(DimensionCode@1006 : Code[20];DimFilter@1005 : Text;SetWanted@1004 : Option;VAR RecordPosition@1003 : Text;FirstColumn@1002 : Text;LastColumn@1001 : Text;VAR CaptionSet@1016 : ARRAY [32] OF Text[80];VAR DimensionCodeBuffer@1015 : ARRAY [32] OF Record 367;VAR NumberOfColumns@1011 : Integer;ShowColumnName@1010 : Boolean;VAR CaptionRange@1009 : Text);
    BEGIN
      SetDimColumnSet(
        DimensionCode,DimFilter,SetWanted,RecordPosition,FirstColumn,LastColumn,NumberOfColumns);
      DimToCaptions(
        CaptionSet,DimensionCodeBuffer,DimensionCode,
        FirstColumn,LastColumn,NumberOfColumns,ShowColumnName,CaptionRange,DimFilter);
    END;

    LOCAL PROCEDURE AdjustPeriodWithDateFilter@13(DateFilter@1000 : Text;VAR PeriodStartDate@1001 : Date;VAR PeriodEndDate@1002 : Date);
    VAR
      Period@1003 : Record 2000000007;
    BEGIN
      IF DateFilter <> '' THEN BEGIN
        Period.SETFILTER("Period End",DateFilter);
        IF Period.GETRANGEMAX("Period End") < PeriodEndDate THEN
          PeriodEndDate := Period.GETRANGEMAX("Period End");
        Period.RESET;
        Period.SETFILTER("Period Start",DateFilter);
        IF Period.GETRANGEMIN("Period Start") > PeriodStartDate THEN
          PeriodStartDate := Period.GETRANGEMIN("Period Start");
      END;
    END;

    [External]
    PROCEDURE RoundValue@46(Value@1000 : Decimal;RoundingFactor@1001 : 'None,1,1000,1000000') : Decimal;
    BEGIN
      IF Value <> 0 THEN
        CASE RoundingFactor OF
          RoundingFactor::"1":
            EXIT(ROUND(Value,1));
          RoundingFactor::"1000":
            EXIT(ROUND(Value / 1000,0.1));
          RoundingFactor::"1000000":
            EXIT(ROUND(Value / 1000000,0.1));
        END;

      EXIT(Value);
    END;

    [External]
    PROCEDURE FormatValue@24(Value@1004 : Decimal;RoundingFactor@1002 : 'None,1,1000,1000000';AddCurrency@1000 : Boolean) : Text[30];
    BEGIN
      Value := RoundValue(Value,RoundingFactor);

      IF Value <> 0 THEN
        EXIT(FORMAT(Value,0,GetFormatString(RoundingFactor,AddCurrency)));
    END;

    LOCAL PROCEDURE ReadNormalDecimalFormat@14(AddCurrency@1000 : Boolean) : Text;
    VAR
      Currency@1001 : Record 4;
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GeneralLedgerSetup.GET;
        GLSetupRead := TRUE;
        IF AddCurrency THEN
          GeneralLedgerSetup.TESTFIELD("Additional Reporting Currency");
      END;

      IF AddCurrency AND
         Currency.GET(GeneralLedgerSetup."Additional Reporting Currency")
      THEN
        EXIT(Currency."Amount Decimal Places");

      EXIT(GeneralLedgerSetup."Amount Decimal Places");
    END;

    [External]
    PROCEDURE GetFormatString@15(RoundingFactor@1001 : 'None,1,1000,1000000';AddCurrency@1000 : Boolean) : Text;
    VAR
      AmountDecimal@1002 : Text;
    BEGIN
      CASE RoundingFactor OF
        RoundingFactor::None:
          AmountDecimal := ReadNormalDecimalFormat(AddCurrency);
        RoundingFactor::"1":
          AmountDecimal := FORMAT(0);
        RoundingFactor::"1000",RoundingFactor::"1000000":
          AmountDecimal := FORMAT(1);
      END;
      EXIT(STRSUBSTNO(RoundingFormatTxt,AmountDecimal));
    END;

    BEGIN
    {
      190228 ORANGO.DL #23127 client crash if run on non-enu
    }
    END.
  }
}

