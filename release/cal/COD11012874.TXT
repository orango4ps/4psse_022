OBJECT Codeunit 11012874 S&O Management (Stats)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CreateStatistics;
          END;

  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'DEU=Fortschritt:\Serviceauftr„ge: @1@@@@@@@\Objekte: @2@@@@@@@\Debitoren: @3@@@@@@@\Standorte: @4@@@@@@@\Stunden: @5@@@@@@@\Serviceauftr„ge: @6@@@@@@@\Werte-Eingaben: @7@@@@@@@\Kaufbelege: @8@@@@@@@;ENU=Progress:\Service Orders: @1@@@@@@@\Objects: @2@@@@@@@\Customers: @3@@@@@@@\Locations:  @4@@@@@@@\Hours:  @5@@@@@@@\Service Orders:  @6@@@@@@@\Value Entries:  @7@@@@@@@\Purchase Documents:  @8@@@@@@@;NLD=Voortgang:\Serviceorderobjecten: @1@@@@@@@\Objecten: @2@@@@@@@\Klanten: @3@@@@@@@\Locaties: @4@@@@@@@\Uren: @5@@@@@@@\Serviceorders: @6@@@@@@@\Waardeposten: @7@@@@@@@\Inkoopdocumenten:  @8@@@@@@@';
      ServiceSetupStats@1100528603 : Record 11072206;
      ProgressDialog@1100528601 : Dialog;
      Text001@1100528602 : TextConst 'DEU=Aufbauen der Statistik erfolgreich;ENU=Build of Statistics succeeded;NLD=Statistieken opgebouwd';

    PROCEDURE CreateStatistics@1100528601();
    VAR
      ReportingDate@1100528601 : Date;
      ReportingTime@1100528600 : Time;
    BEGIN
      ServiceSetupStats.GET;
      ServiceSetupStats.TESTFIELD("Repeat Visit Window");

      IF GUIALLOWED THEN
        ProgressDialog.OPEN(Text000);

      ReportingDate := TODAY;
      ReportingTime := TIME;

      RemoveAllOldStats(ReportingDate);
      CreateServiceOrderObjectStats(ReportingDate, ReportingTime);
      DetermineServiceOrderRepeatVisits(ReportingDate, ReportingTime);
      CreateServiceObjectStats(ReportingDate, ReportingTime);
      CreateCustomerStats(ReportingDate, ReportingTime);
      CreateCompanyStats(ReportingDate, ReportingTime);
      CreateLocationStats(ReportingDate, ReportingTime);
      CreateReferencePeriodStats(ReportingDate, ReportingTime);
      CreateHoursStats(ReportingDate, ReportingTime);
      CreateServiceOrderStats(ReportingDate, ReportingTime);
      CreateValueEntryStats(ReportingDate, ReportingTime);
      CreatePurchaseReturnVendorStats(ReportingDate, ReportingTime);

      IF GUIALLOWED THEN BEGIN
        ProgressDialog.CLOSE;
        MESSAGE(Text001);
      END;
    END;

    PROCEDURE RemoveAllOldStats@1100528600(IReportingDate@1100528602 : Date);
    VAR
      ServiceOrderObjectStats@1100528600 : Record 11072200;
      SOReferencePeriodStats@1100528607 : Record 11072208;
      ServiceObjectStats@1100528601 : Record 11072201;
      CustomerStats@1100528603 : Record 11072202;
      CompanyStats@1100528604 : Record 11072203;
      LocationStats@1100528605 : Record 11072204;
      ComplexStats@1100528606 : Record 11072205;
      ReferencePeriodStats@1100528608 : Record 11072209;
      HoursStats@1100528609 : Record 11072215;
      EmployeeStats@1100528610 : Record 11072216;
      ServiceOrderStats@1100528611 : Record 11072217;
      ValueEntryStats@1100528612 : Record 11072220;
      PurchaseReturnVendorStats@1100528613 : Record 11072221;
    BEGIN
      ServiceOrderObjectStats.DELETEALL(TRUE);
      SOReferencePeriodStats.DELETEALL(TRUE);
      ServiceObjectStats.DELETEALL(TRUE);
      CustomerStats.DELETEALL(TRUE);
      CompanyStats.DELETEALL(TRUE);
      LocationStats.DELETEALL(TRUE);
      ComplexStats.DELETEALL(TRUE);
      ReferencePeriodStats.DELETEALL(TRUE);
      HoursStats.DELETEALL(TRUE);
      EmployeeStats.DELETEALL(TRUE);
      ServiceOrderStats.DELETEALL(TRUE);
      ValueEntryStats.DELETEALL(TRUE);
      PurchaseReturnVendorStats.DELETEALL(TRUE);
    END;

    PROCEDURE CreateServiceOrderObjectStats@1100528602(IReportingDate@1100528607 : Date;IReportingTime@1100528608 : Time);
    VAR
      ServiceOrder@1100528600 : Record 11012823;
      ServiceOrderObject@1100528602 : Record 11071724;
      ServiceLocation@1100528604 : Record 11012801;
      ServiceObject@1100528603 : Record 11071691;
      ServiceOrderObjectStats@1100528601 : Record 11072200;
      SOReferencePeriodStats@1100528611 : Record 11072208;
      ServStatsSetupRefPeriod@1100528609 : Record 11072207;
      ReferencePeriod@1100528610 : Record 11020272;
      RecordCounter@1100528605 : Integer;
      RecordCount@1100528606 : Integer;
    BEGIN
      ServiceOrder.SETFILTER("Source Type", '%1|%2', ServiceOrder."Source Type"::Call, ServiceOrder."Source Type"::Direct);
      RecordCount := ServiceOrder.COUNT;
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceOrderObject.SETRANGE("Service Order No.", ServiceOrder."No.");
          IF ServiceOrderObject.FINDSET THEN
            REPEAT
              IF NOT ServiceLocation.GET(ServiceOrder."Service Location No.") THEN
                ServiceLocation.INIT;
              IF NOT ServiceObject.GET(ServiceOrderObject."Object No.") THEN
                ServiceObject.INIT;
              ServiceOrderObjectStats.INIT;
              ServiceOrderObjectStats."Reporting Date" := IReportingDate;
              ServiceOrderObjectStats."Reporting Time" := IReportingTime;
              ServiceOrderObjectStats."Service Order No." := ServiceOrder."No.";
              ServiceOrderObjectStats."Line No." := 0;
              ServiceOrderObjectStats."Customer No." := ServiceOrder."Customer No.";
              ServiceOrderObjectStats."Service Location No." := ServiceOrder."Service Location No.";
              ServiceOrderObjectStats."Complex Code" := ServiceLocation."Complex Code";
              ServiceOrderObjectStats."Object Group" := ServiceObject."Object Group";
              ServiceOrderObjectStats."Object No." := ServiceOrderObject."Object No.";
              ServiceOrderObjectStats."Standard Object No." := ServiceOrderObject."Standard Object No.";
              ServiceOrderObjectStats."Brand Code" := ServiceObject."Brand Code";
              ServiceOrderObjectStats."Model Code" := ServiceObject."Model Code";
              ServiceOrderObjectStats."Type Code" := ServiceObject."Type Code";
              ServiceOrderObjectStats."Object Age" := GetObjectAge(ServiceObject."No.", ServiceOrderObjectStats."Age Unknown");
              ServiceOrderObjectStats.Cause := ServiceOrder.Cause;
              ServiceOrderObjectStats.Solution := ServiceOrder.Solution;
              ServiceOrderObjectStats.Problem := ServiceOrder.Problem;
              ServiceOrderObjectStats."Repeat Visit" := FALSE;
              ServiceOrderObjectStats."Starting Date" := ServiceOrder."Starting Date";
              ServiceOrderObjectStats."Starting Time" := ServiceOrder."Starting Time";
              ServiceOrderObjectStats."Source Type" := ServiceOrder."Source Type";
              ServiceOrderObjectStats.INSERT(TRUE);
            UNTIL ServiceOrderObject.NEXT = 0;

          IF ServStatsSetupRefPeriod.FINDSET THEN
            REPEAT
              IF ReferencePeriod.GET(ReferencePeriod.Type::ServOrder, ServiceOrder."No.", ServStatsSetupRefPeriod."Reference Period Code") THEN BEGIN
                SOReferencePeriodStats.INIT;
                SOReferencePeriodStats."Reporting Date" := IReportingDate;
                SOReferencePeriodStats."Reporting Time" := IReportingTime;
                SOReferencePeriodStats."Service Order No." := ServiceOrder."No.";
                SOReferencePeriodStats."Reference Period" := ReferencePeriod.Code;
                SOReferencePeriodStats."Starting Date" := ServiceOrder."Starting Date";
                SOReferencePeriodStats.VALIDATE("Actual Hours", ReferencePeriod.Result);
                SOReferencePeriodStats.VALIDATE("Norm Hours", ReferencePeriod.Norm);
                SOReferencePeriodStats.INSERT(TRUE);
              END;
            UNTIL ServStatsSetupRefPeriod.NEXT = 0;

            RecordCounter += 1;
            IF GUIALLOWED THEN
              ProgressDialog.UPDATE(1, ROUND((RecordCounter / RecordCount) * 9999, 1));
        UNTIL ServiceOrder.NEXT = 0;
    END;

    PROCEDURE DetermineServiceOrderRepeatVisits@1100528605(IReportingDate@1100528601 : Date;IReportingTime@1100528600 : Time);
    VAR
      ServiceOrderObjectStats@1100528602 : Record 11072200;
      SeekServiceOrderObjectStats@1100528603 : Record 11072200;
    BEGIN
      ServiceOrderObjectStats.SETCURRENTKEY("Reporting Date", "Service Location No.", "Starting Date");
      ServiceOrderObjectStats.SETRANGE("Reporting Date", IReportingDate);
      ServiceOrderObjectStats.SETRANGE("Reporting Time", IReportingTime);
      ServiceOrderObjectStats.SETFILTER("Starting Date", '<>%1', 0D);
      IF ServiceOrderObjectStats.FINDSET THEN
        REPEAT
          SeekServiceOrderObjectStats.SETCURRENTKEY("Reporting Date", "Service Location No.", "Starting Date");
          SeekServiceOrderObjectStats.SETRANGE("Reporting Date", IReportingDate);
          SeekServiceOrderObjectStats.SETRANGE("Reporting Time", IReportingTime);
          SeekServiceOrderObjectStats.SETRANGE("Object No.", ServiceOrderObjectStats."Object No.");
          SeekServiceOrderObjectStats.SETFILTER("Starting Date", '>=%1&<=%2',
            CALCDATE(ServiceSetupStats."Repeat Visit Window", ServiceOrderObjectStats."Starting Date"), ServiceOrderObjectStats."Starting Date");
          SeekServiceOrderObjectStats.SETFILTER("Service Order No.", '<>%1', ServiceOrderObjectStats."Service Order No.");
          IF SeekServiceOrderObjectStats.FINDSET THEN BEGIN
            IF (SeekServiceOrderObjectStats."Starting Date" < SeekServiceOrderObjectStats."Starting Date") OR
               (SeekServiceOrderObjectStats."Starting Time" < SeekServiceOrderObjectStats."Starting Time")
            THEN BEGIN
              ServiceOrderObjectStats."Repeat Visit" := TRUE;
              ServiceOrderObjectStats.MODIFY(TRUE);
            END;
          END;
        UNTIL ServiceOrderObjectStats.NEXT = 0;
    END;

    PROCEDURE CreateServiceObjectStats@1100528603(IReportingDate@1100528606 : Date;IReportingTime@1100528605 : Time);
    VAR
      ServiceSetupStats@1100528607 : Record 11072206;
      ServiceObject@1100528601 : Record 11071691;
      ServiceObjectStats@1100528600 : Record 11072201;
      ServiceLocation@1100528602 : Record 11012801;
      ObjectSpecificationMgt@1100528608 : Codeunit 11012848;
      RecordCounter@1100528604 : Integer;
      RecordCount@1100528603 : Integer;
    BEGIN
      ServiceSetupStats.GET;
      ServiceObject.SETRANGE(Blocked, FALSE);
      RecordCount := ServiceObject.COUNT;
      IF ServiceObject.FINDSET THEN
        REPEAT
          ServiceObject.CALCFIELDS("Object Group");//, Brand, Model, Type);
          ServiceObjectStats.INIT;
          ServiceObjectStats."Reporting Date" := IReportingDate;
          ServiceObjectStats."Reporting Time" := IReportingTime;
          ServiceObjectStats."Object No." := ServiceObject."No.";
          ServiceObjectStats."Standard Object No." := ServiceObject."Standard Object No.";
          ServiceObjectStats."Service Location No." := ServiceObject.GetPrefServiceLocationNo(FALSE);
          IF NOT ServiceLocation.GET(ServiceObjectStats."Service Location No.") THEN
            ServiceLocation.INIT;
          ServiceObjectStats."Complex Code" := ServiceLocation."Complex Code";
          ServiceObjectStats."Customer No." := ServiceLocation."Customer No.";
          ServiceObjectStats."Brand Code" := ServiceObject."Brand Code";
          ServiceObjectStats."Model Code" := ServiceObject."Model Code";
          ServiceObjectStats."Type Code" := ServiceObject."Type Code";
          ServiceObjectStats.Age := GetObjectAge(ServiceObject."No.", ServiceObjectStats."Age Unknown");
          ServiceObjectStats."Object Group" := ServiceObject."Object Group";
          ServiceObjectStats."Vendor No." := ServiceObject."Vendor No.";
          ServiceObjectStats."In use since" := ServiceObject."In use since";
          ServiceObjectStats."Year of Manufacture" := ObjectSpecificationMgt.GetYearOfManufacture(ServiceObject."No.");
          IF (ServiceObjectStats."In use since" = 0D) AND (ServiceObjectStats."Year of Manufacture" > 0) THEN
            ServiceObjectStats."In use since" := DMY2DATE(1, 1, ServiceObjectStats."Year of Manufacture");
          ServiceObjectStats."Ending Date" := ServiceObject."Ending Date";
          ServiceObjectStats."Company Name" := ServiceObject."Company Name";
          ServiceObjectStats."Project No." := ServiceObject."Project No.";
          IF ServiceSetupStats."Object Specification Code 1" <> '' THEN
            ServiceObjectStats."Object Specification Value 1" :=
              ObjectSpecificationMgt.GetValueBySpecificationCode(ServiceObject."No.", ServiceSetupStats."Object Specification Code 1");
          IF ServiceSetupStats."Object Specification Code 2" <> '' THEN
            ServiceObjectStats."Object Specification Value 2" :=
              ObjectSpecificationMgt.GetValueBySpecificationCode(ServiceObject."No.", ServiceSetupStats."Object Specification Code 2");
          IF ServiceSetupStats."Object Specification Code 3" <> '' THEN
            ServiceObjectStats."Object Specification Value 3" :=
              ObjectSpecificationMgt.GetValueBySpecificationCode(ServiceObject."No.", ServiceSetupStats."Object Specification Code 3");
          IF ServiceSetupStats."Object Specification Code 4" <> '' THEN
            ServiceObjectStats."Object Specification Value 4" :=
              ObjectSpecificationMgt.GetValueBySpecificationCode(ServiceObject."No.", ServiceSetupStats."Object Specification Code 4");
          ServiceObjectStats.INSERT(TRUE);
          RecordCounter += 1;
          IF GUIALLOWED THEN
            ProgressDialog.UPDATE(2, ROUND((RecordCounter / RecordCount) * 9999, 1));
        UNTIL ServiceObject.NEXT = 0;
    END;

    PROCEDURE CreateCustomerStats@1100528604(IReportingDate@1100528603 : Date;IReportingTime@1100528602 : Time);
    VAR
      Customer@1100528600 : Record 18;
      CustomerStats@1100528601 : Record 11072202;
      RecordCount@1100528604 : Integer;
      RecordCounter@1100528605 : Integer;
    BEGIN
      IF Customer.FINDSET THEN BEGIN
        RecordCount := Customer.COUNT;
        REPEAT
          CustomerStats.INIT;
          CustomerStats."Reporting Date" := IReportingDate;
          CustomerStats."Reporting Time" := IReportingTime;
          CustomerStats."Customer No." := Customer."No.";
          CustomerStats.INSERT(TRUE);
          RecordCounter += 1;
          IF GUIALLOWED THEN
            ProgressDialog.UPDATE(3, ROUND((RecordCounter / RecordCount) * 9999, 1));
        UNTIL Customer.NEXT = 0;
      END;
    END;

    PROCEDURE CreateCompanyStats@1100528606(IReportingDate@1100528602 : Date;IReportingTime@1100528601 : Time);
    VAR
      CompanyStats@1100528600 : Record 11072203;
    BEGIN
      CompanyStats.INIT;
      CompanyStats."Reporting Date" := IReportingDate;
      CompanyStats."Reporting Time" := IReportingTime;
      CompanyStats.INSERT(TRUE);
    END;

    PROCEDURE CreateLocationStats@1100528607(IReportingDate@1100528601 : Date;IReportingTime@1100528600 : Time);
    VAR
      ServiceLocationStats@1100528602 : Record 11072204;
      ComplexStats@1100528604 : Record 11072205;
      ServiceLocation@1100528603 : Record 11012801;
      RecordCount@1100528606 : Integer;
      RecordCounter@1100528605 : Integer;
    BEGIN
      ServiceLocation.SETFILTER("Customer No.", '<>%1', '');
      IF ServiceLocation.FINDSET THEN BEGIN
        RecordCount := ServiceLocation.COUNT;
        REPEAT
          ServiceLocationStats.INIT;
          ServiceLocationStats."Reporting Date" := IReportingDate;
          ServiceLocationStats."Reporting Time" := IReportingTime;
          ServiceLocationStats."Service Location No." := ServiceLocation."No.";
          ServiceLocationStats."Customer No." := ServiceLocation."Customer No.";
          ServiceLocationStats.INSERT(TRUE);

          RecordCounter += 1;
          IF GUIALLOWED THEN
            ProgressDialog.UPDATE(4, ROUND((RecordCounter / RecordCount) * 9999, 1));

          IF (ServiceLocation."Customer No." <> '') AND (ServiceLocation."Complex Code" <> '') THEN BEGIN
            ComplexStats.INIT;
            ComplexStats."Reporting Date" := IReportingDate;
            ComplexStats."Reporting Time" := IReportingTime;
            ComplexStats."Customer No." := ServiceLocation."Customer No.";
            ComplexStats."Complex Code" := ServiceLocation."Complex Code";
            IF NOT ComplexStats.FIND('=') THEN
              ComplexStats.INSERT(TRUE);
          END;
        UNTIL ServiceLocation.NEXT = 0;
      END;
    END;

    PROCEDURE CreateReferencePeriodStats@1100528610(IReportingDate@1100528601 : Date;IReportingTime@1100528600 : Time);
    VAR
      ReferencePeriodStats@1100528602 : Record 11072209;
      ServStatsSetupRefPeriod@1100528603 : Record 11072207;
    BEGIN
      IF ServStatsSetupRefPeriod.FINDSET THEN
        REPEAT
          ReferencePeriodStats."Reporting Date" := IReportingDate;
          ReferencePeriodStats."Reporting Time" := IReportingTime;
          ReferencePeriodStats."Reference Period Code" := ServStatsSetupRefPeriod."Reference Period Code";
          ReferencePeriodStats.INSERT(TRUE);
        UNTIL ServStatsSetupRefPeriod.NEXT = 0;
    END;

    PROCEDURE CreateHoursStats@1100528609(IReportingDate@1100528601 : Date;IReportingTime@1100528600 : Time);
    VAR
      HoursStats@1100528602 : Record 11072215;
      PostedHourHeader@1100528603 : Record 11012084;
      PostedHourLine@1100528605 : Record 11012085;
      Employee@1100528604 : Record 5200;
      ServiceSetupStats@1100528607 : Record 11072206;
      EmployeeStats@1100528610 : Record 11072216;
      AllDirectHours@1100528608 : Decimal;
      TravelHours@1100528606 : Decimal;
      IndirectHours@1100528609 : Decimal;
      RecordCount@1100528612 : Integer;
      RecordCounter@1100528611 : Integer;
    BEGIN
      ServiceSetupStats.GET;
      PostedHourHeader.SETCURRENTKEY("Employee No.");
      PostedHourHeader.SETFILTER("Employee No.", '<>%1', '');
      IF PostedHourHeader.FINDSET THEN BEGIN
        RecordCount := PostedHourHeader.COUNT;
        REPEAT
          IF NOT Employee.GET(PostedHourHeader."Employee No.") THEN
            Employee.INIT;
          HoursStats.INIT;
          HoursStats."Reporting Date" := IReportingDate;
          HoursStats."Reporting Time" := IReportingTime;
          HoursStats.VALIDATE("Employee No.", PostedHourHeader."Employee No.");
          HoursStats.Year := PostedHourHeader.Year;
          HoursStats.Week := PostedHourHeader.Week;

          PostedHourLine.RESET;
          PostedHourLine.SETRANGE(Year, PostedHourHeader.Year);
          PostedHourLine.SETRANGE(Week, PostedHourHeader.Week);
          PostedHourLine.SETRANGE("Employee No.", PostedHourHeader."Employee No.");
          PostedHourLine.SETFILTER(Type, '<>%1', PostedHourLine.Type::Indirect);
          PostedHourLine.CALCSUMS("Total Line");
          AllDirectHours := PostedHourLine."Total Line";

          PostedHourLine.SETRANGE(Type, PostedHourLine.Type::Indirect);
          PostedHourLine.CALCSUMS("Total Line");
          IndirectHours := PostedHourLine."Total Line";

          PostedHourLine.SETFILTER(Type, '<>%1', PostedHourLine.Type::Indirect);
          PostedHourLine.SETFILTER("Cost Component", ServiceSetupStats."Cost Component Filter (Travel)");
          PostedHourLine.CALCSUMS("Total Line");
          TravelHours := PostedHourLine."Total Line";

          HoursStats."Direct Hours" := AllDirectHours - TravelHours;
          HoursStats."Indirect Hours" := IndirectHours;
          HoursStats."Travel Hours" := TravelHours;
          HoursStats."Posting Date" := PostedHourHeader."Posting Date";
          HoursStats.INSERT(TRUE);

          RecordCounter += 1;
          IF GUIALLOWED THEN
            ProgressDialog.UPDATE(5, ROUND((RecordCounter / RecordCount) * 99999, 1));

          IF NOT EmployeeStats.GET(IReportingDate, PostedHourHeader."Employee No.") THEN BEGIN
            EmployeeStats."Reporting Date" := IReportingDate;
            EmployeeStats."Reporting Time" := IReportingTime;
            EmployeeStats."Employee No." := PostedHourHeader."Employee No.";
            EmployeeStats.INSERT(TRUE);
          END;
        UNTIL PostedHourHeader.NEXT = 0;
      END;
    END;

    PROCEDURE CreateServiceOrderStats@1100528612(IReportingDate@1100528601 : Date;IReportingTime@1100528600 : Time);
    VAR
      ServiceOrder@1100528603 : Record 11012823;
      PostedHourLine@1100528602 : Record 11012085;
      PostedHourLine2@1100528606 : Record 11012085;
      ServiceOrderStats@1100528604 : Record 11072217;
      ServiceSetupStats@1100528605 : Record 11072206;
      ResourceWOP@1100528607 : Record 11229278;
      RecordCount@1100528609 : Integer;
      RecordCounter@1100528608 : Integer;
    BEGIN
      ServiceSetupStats.GET;
      ServiceOrder.SETRANGE("Source Type", ServiceOrder."Source Type"::Contract);
      ServiceOrder.SETFILTER("Employee No.", '<>%1', '');
      IF ServiceOrder.FINDSET THEN BEGIN
        RecordCount := ServiceOrder.COUNT;
        REPEAT
          IF NOT ResourceWOP.GET(ServiceOrder."Employee No.") THEN
            ResourceWOP.INIT;
          PostedHourLine.CHANGECOMPANY(ResourceWOP.Company);
          PostedHourLine.SETCURRENTKEY("Service Order No.");
          PostedHourLine.SETRANGE("Service Order No.", ServiceOrder."No.");
          PostedHourLine.SETRANGE("Employee No.", ResourceWOP."Source No.");
          PostedHourLine.SETRANGE(Type, PostedHourLine.Type::Service);
          IF PostedHourLine.FINDSET THEN
            REPEAT
              IF NOT ServiceOrderStats.GET(
                IReportingDate, ServiceOrder."No.", PostedHourLine."Employee No.", PostedHourLine.Year, PostedHourLine.Week)
              THEN BEGIN
                ServiceOrderStats.INIT;
                ServiceOrderStats."Reporting Date" := IReportingDate;
                ServiceOrderStats."Reporting Time" := IReportingTime;
                ServiceOrderStats.VALIDATE("Service Order No.", ServiceOrder."No.");
                ServiceOrderStats.VALIDATE("Employee No.", PostedHourLine."Employee No.");
                ServiceOrderStats.Year := PostedHourLine.Year;
                ServiceOrderStats.Week := PostedHourLine.Week;
                ServiceOrderStats."Posting Date" := PostedHourLine."Posting Date";
                ServiceOrderStats.INSERT(TRUE)
              END;
              PostedHourLine2.RESET;
              PostedHourLine2 := PostedHourLine;
              PostedHourLine2.SETRECFILTER;
              PostedHourLine2.SETFILTER("Cost Component", ServiceSetupStats."Cost Component Filter (Travel)");
              IF NOT PostedHourLine2.ISEMPTY THEN
                ServiceOrderStats."Travel Hours" += PostedHourLine2."Total Line"
              ELSE
                ServiceOrderStats."Direct Hours" += PostedHourLine2."Total Line";
              ServiceOrderStats.MODIFY(TRUE);
            UNTIL PostedHourLine.NEXT = 0;
          RecordCounter += 1;
          IF GUIALLOWED THEN
            ProgressDialog.UPDATE(6, ROUND((RecordCounter / RecordCount) * 99999, 1));
        UNTIL ServiceOrder.NEXT = 0;
      END;
    END;

    PROCEDURE CreateValueEntryStats@1100528611(IReportingDate@1100528601 : Date;IReportingTime@1100528600 : Time);
    VAR
      ValueEntry@1100528602 : Record 5802;
      ValueEntryStats@1100528603 : Record 11072220;
      PostingYear@1100528604 : Integer;
      PostingMonth@1100528605 : Integer;
      RecordCount@1100528608 : Integer;
      RecordCounter@1100528607 : Integer;
    BEGIN
      IF ValueEntry.FINDSET THEN BEGIN
        RecordCount := ValueEntry.COUNT;
        REPEAT
          PostingMonth := DATE2DMY(ValueEntry."Posting Date", 2);
          PostingYear := DATE2DMY(ValueEntry."Posting Date", 3);
          //Reporting Date,Posting Year,Posting Month,Location Code,Item Ledger Entry Type, Item No.
          IF NOT ValueEntryStats.GET(
            IReportingDate, PostingYear, PostingMonth, ValueEntry."Location Code",
            ValueEntry."Item Ledger Entry Type", ValueEntry."Item No.")
          THEN BEGIN
            ValueEntryStats.INIT;
            ValueEntryStats."Reporting Date" := IReportingDate;
            ValueEntryStats."Reporting Time" := IReportingTime;
            ValueEntryStats."Posting Year" := PostingYear;
            ValueEntryStats."Posting Month" := PostingMonth;
            ValueEntryStats.VALIDATE("Location Code", ValueEntry."Location Code");
            ValueEntryStats."Item Ledger Entry Type" := ValueEntry."Item Ledger Entry Type";
            ValueEntryStats.VALIDATE("Item No.", ValueEntry."Item No.");
            ValueEntryStats.INSERT;
          END;
          ValueEntryStats."Invoiced Quantity" += ValueEntry."Invoiced Quantity";
          ValueEntryStats."Cost Posted to G/L" += ValueEntry."Cost Posted to G/L";
          ValueEntryStats.MODIFY;
          RecordCounter += 1;
          IF GUIALLOWED THEN
            ProgressDialog.UPDATE(7, ROUND((RecordCounter / RecordCount) * 9999, 1));
        UNTIL ValueEntry.NEXT = 0;
      END;
    END;

    PROCEDURE CreatePurchaseReturnVendorStats@1100528613(IReportingDate@1100528601 : Date;IReportingTime@1100528600 : Time);
    VAR
      PurchaseHeader@1100528602 : Record 38;
      PurchaseLine@1100528606 : Record 39;
      PurchaseReturnVendorStats@1100528605 : Record 11072221;
      RecordCount@1100528603 : Integer;
      RecordCounter@1100528604 : Integer;
      OrderMonth@1100528607 : Integer;
      OrderYear@1100528608 : Integer;
    BEGIN
      PurchaseHeader.SETFILTER("Document Type", '%1|%2', PurchaseHeader."Document Type"::Order, PurchaseHeader."Document Type"::"Return Order");
      IF PurchaseHeader.FINDSET THEN BEGIN
        RecordCount := PurchaseHeader.COUNT;
        REPEAT
          OrderMonth := DATE2DMY(PurchaseHeader."Order Date", 2);
          OrderYear := DATE2DMY(PurchaseHeader."Order Date", 3);
      //Reporting Date,Document Type,Buy-from Vendor No.,Order Year,Order Month,Location Code,Shortcut Dimension 1 Code,Purchase Order Type
          IF NOT PurchaseReturnVendorStats.GET(
            IReportingDate, PurchaseHeader."Document Type", PurchaseHeader."Buy-from Vendor No.", OrderYear, OrderMonth,
            PurchaseHeader."Location Code", PurchaseHeader."Shortcut Dimension 1 Code", PurchaseHeader."Purchase Order Type")
          THEN BEGIN
            PurchaseReturnVendorStats."Reporting Date" := IReportingDate;
            PurchaseReturnVendorStats."Reporting Time" := IReportingTime;
            PurchaseReturnVendorStats."Document Type" := PurchaseHeader."Document Type";
            PurchaseReturnVendorStats.VALIDATE("Buy-from Vendor No.", PurchaseHeader."Buy-from Vendor No.");
            PurchaseReturnVendorStats."Order Year" := DATE2DMY(PurchaseHeader."Order Date", 3);
            PurchaseReturnVendorStats."Order Month" := DATE2DMY(PurchaseHeader."Order Date", 2);
            PurchaseReturnVendorStats.VALIDATE("Location Code", PurchaseHeader."Location Code");
            PurchaseReturnVendorStats.VALIDATE("Shortcut Dimension 1 Code", PurchaseHeader."Shortcut Dimension 1 Code");
            PurchaseReturnVendorStats."Purchase Order Type" := PurchaseHeader."Purchase Order Type";
            PurchaseReturnVendorStats.INSERT;
          END;
          PurchaseLine.SETRANGE("Document Type", PurchaseHeader."Document Type");
          PurchaseLine.SETRANGE("Document No.", PurchaseHeader."No.");
          PurchaseLine.CALCSUMS("Amount (LCY)");
          PurchaseReturnVendorStats.Amount += PurchaseLine."Amount (LCY)";
          PurchaseReturnVendorStats.MODIFY;
          RecordCounter += 1;
          IF GUIALLOWED THEN
            ProgressDialog.UPDATE(8, ROUND((RecordCounter / RecordCount) * 9999, 1));
        UNTIL PurchaseHeader.NEXT = 0
      END;
    END;

    PROCEDURE GetObjectAge@1100528608(IObjectNo@1100528605 : Code[20];VAR OAgeUnknown@1100528603 : Boolean) Age : Integer;
    VAR
      ObjectSpecificationMgt@1100528600 : Codeunit 11012848;
      YearOfManufacture@1100528601 : Integer;
      CurrentYear@1100528602 : Integer;
    BEGIN
      OAgeUnknown := TRUE;
      YearOfManufacture := ObjectSpecificationMgt.GetYearOfManufacture(IObjectNo);
      IF YearOfManufacture = 0 THEN
        EXIT;
      CurrentYear := DATE2DMY(TODAY, 3);
      Age := CurrentYear - YearOfManufacture +1;
      IF Age < 0 THEN BEGIN
        Age := 0;
        EXIT;
      END;
      OAgeUnknown := FALSE;
    END;

    BEGIN
    END.
  }
}

