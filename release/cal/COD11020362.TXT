OBJECT Codeunit 11020362 SAF-T Mapping Helper
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVNO14.04 (10672),4PSSE;
  }
  PROPERTIES
  {
    TableNo=11072496;
    OnRun=BEGIN
            SetupGLAccountsForMapping(Rec);
          END;

  }
  CODE
  {
    VAR
      PreparingSourceForMappingLbl@1100285100 : TextConst 'ENU=Preparing the source for mapping...;NOR=Klargjõr kilden for tilordning...';
      ChartOfAccountsDoesNotExistErr@1100285101 : TextConst 'ENU=A chart of accounts does not exist in the current company.;NOR=Det finnes ingen kontoplan i det gjeldende selskapet.';
      StartingDateNotFilledErr@1100285102 : TextConst 'ENU=You must specify a starting date.;NOR=Du mÜ angi en startdato.';
      EndingDateNotFilledErr@1100285103 : TextConst 'ENU=You must specify an ending date.;NOR=Du mÜ angi en sluttdato.';
      StandardAccountsMatchedMsg@1100285104 : TextConst '@@@="%1,%2 = both integer values";ENU=%1 of %2 standard accounts have been automatically matched to the chart of accounts.;NOR=%1 av %2 standardkonti er automatisk samsvart med kontoplanen.';
      DifferentMappingTypeErr@1100285105 : TextConst 'ENU=It is not possible to copy the mapping due to different mapping types.;NOR=Det er ikke mulig Ü kopiere tilordningen pÜ grunn av ulike tilordningstyper.';
      MatchChartOfAccountsQst@1100285106 : TextConst 'ENU=Do you want to match a chart of accounts with SAF-T standard account codes?;NOR=Vil du samsvare en kontoplan med SAF-T-standardkontokoder?';
      CreateChartOfAccountsQst@1100285107 : TextConst 'ENU=Do you want to create a chart of accounts based on SAF-T standard account codes?;NOR=Vil du opprette en kontoplan basert pÜ SAF-T-standardkontokoder?';
      NoGLAccountMappingErr@1100285108 : TextConst '@@@="%1 = any integer number";ENU=No G/L account mapping was created for range ID %1;NOR=Ingen finanskontotilordning ble opprettet for omrÜde-ID %1';
      MappingExistsErr@1100285109 : TextConst '@@@="%1 = category no., %2 = mapping code, %3 = any integer number";ENU=Mapping for category %1 with mapping code %2 already exists for range ID %3.;NOR=Tilordning for kategori %1 med tilordningskode %2 finnes allerede for omrÜde-ID-en %3.';
      MappingNotDoneErr@1100285110 : TextConst 'ENU=One or more G/L accounts do not have a mapping setup. Open the SAF-T Mapping Setup page for the selected mapping range and map each G/L account either to the  standard account or the grouping code.;NOR=ên eller flere finanskonti har ikke et tilordningsoppsett. èpne siden Oppsett av SAF-T-tilordning for det valgte tilordningsomrÜdet, og tilordne hver finanskonto til standardkontoen eller grupperingskoden.';
      MappingDoneErr@1100285111 : TextConst 'ENU=One or more G/L accounts already have a mapping setup. Create a new mapping range with another mapping type.;NOR=ên eller flere finanskonti har allerede et tilordningsoppsett. Opprett et nytt tilordningsomrÜde med en annen tilordningstype.';
      DimensionWithoutAnalysisCodeErr@1100285112 : TextConst 'ENU=One or more dimensions do not have a SAF-T analysis code. Open the Dimensions page and specify a SAF-T analysis code for each dimension.;NOR=ên eller flere dimensjoner har ikke en SAF-T-analysekode. èpne siden Dimensjoner, og angi en SAF-T-analysekode for hver dimensjon.';
      VATPostingSetupWithoutTaxCodeErr@1100285113 : TextConst 'ENU=One or more VAT posting setup do not have a %1. Open the VAT Posting Setup page and specify %1 for each VAT posting setup combination.;NOR=Ett eller flere mva-bokfõringsoppsett har ikke noe %1. èpne siden Mva-bokfõringsoppsett, og angi %1 for hver kombinasjon av mva-bokfõringsoppsett.';
      SourceCodeWithoutSAFTCodeErr@1100285114 : TextConst 'ENU=One or more source codes do not have a SAF-T source code. Open the Source Codes page and specify a SAF-T source code for each source code.;NOR=ên eller flere kildekoder har ikke en SAF-T-kildekode. èpne siden Kildekoder, og angi en SAF-T-kildekode for hver kildekode.';
      ChartOfAccountsAlreadyExistsErr@1100285115 : TextConst 'ENU=A chart of accounts must be empty to be created based on SAF-T standard accounts.;NOR=En kontoplan mÜ vëre tom for Ü opprettes basert pÜ SAF-T-standardkonti.';
      AssortedJournalsSourceCodeDescriptionLbl@1100285116 : TextConst 'ENU=Assorted Journals;NOR=Assorterte journaler';
      GeneralLedgerJournalsSourceCodeDescriptionLbl@1101285004 : TextConst 'ENU=General Ledger Journals;NOR=Finanskladder';
      AccountReceivablesSourceCodeDescriptionLbl@1101285003 : TextConst 'ENU=Account Receivables;NOR=Samlekonto (kunde);SVE=Kundfordringar';
      AccountPayablesSourceCodeDescriptionLbl@1101285002 : TextConst 'ENU=Account Payables;NOR=Samlekonto (leverandõr);SVE=Leverantîrsskulder';
      SAFTSetupGuideTxt@1101285000 : TextConst 'ENU=Set up SAF-T;NOR=Konfigurer SAF-T';
      SAFTDimLbl@1101285001 : TextConst 'ENU=SAF-T Dimension No Series.;NOR=SAF-T-dimensjon Õ nummerserie.';
      DefaultLbl@1100285117 : TextConst 'ENU=DEFAULT;NOR=STANDARD;SVE=STANDARD';

    PROCEDURE GetDefaultSAFTMappingRange@1100285100(VAR SAFTMappingRange@1100285100 : Record 11072496);
    BEGIN
      WITH SAFTMappingRange DO
        IF NOT FINDLAST() THEN BEGIN
          INIT();
          Code := DefaultLbl;
          INSERT(TRUE);
        END;
    END;

    PROCEDURE ValidateMappingRange@1100285101(VAR SAFTMappingRange@1100285100 : Record 11072496);
    BEGIN
      IF SAFTMappingRange."Starting Date" = 0D THEN
        ERROR(StartingDateNotFilledErr);
      IF SAFTMappingRange."Ending Date" = 0D THEN
        ERROR(EndingDateNotFilledErr);
      SAFTMappingRange.MODIFY();
    END;

    PROCEDURE MatchChartOfAccounts@1100285102(SAFTMappingRange@1100285100 : Record 11072496);
    BEGIN
      MatchChartOfAccountsLocal(SAFTMappingRange, FALSE);
    END;

    PROCEDURE CreateChartOfAccounts@1100285103(SAFTMappingRange@1100285100 : Record 11072496);
    VAR
      GLAccount@1100285101 : Record 15;
      SAFTMapping@1100285102 : Record 11072492;
    BEGIN
      IF GUIALLOWED() THEN
        IF NOT CONFIRM(CreateChartOfAccountsQst, FALSE) THEN
            EXIT;
      IF NOT GLAccount.ISEMPTY() THEN
        ERROR(ChartOfAccountsAlreadyExistsErr);
      SAFTMappingRange.CheckMappingIsStandardAccount();

      SAFTMapping.SETRANGE("Mapping Type", SAFTMappingRange."Mapping Type");
      SAFTMapping.FINDSET();
      REPEAT
        GLAccount.INIT();
        GLAccount.VALIDATE("No.", SAFTMapping."No.");
        GLAccount.VALIDATE(Name, COPYSTR(SAFTMapping.Description, 1, MAXSTRLEN(GLAccount.Name)));
        GLAccount.VALIDATE("Account Type", GLAccount."Account Type"::Posting);
        GLAccount.INSERT(TRUE);
      UNTIL SAFTMapping.NEXT() = 0;
      MatchChartOfAccountsLocal(SAFTMappingRange, TRUE);
    END;

    LOCAL PROCEDURE MatchChartOfAccountsLocal@1100285104(SAFTMappingRange@1100285100 : Record 11072496;FromCreateChartOfAccounts@1100285105 : Boolean);
    VAR
      SAFTMapping@1100285101 : Record 11072492;
      SAFTGLAccountMapping@1100285102 : Record 11072494;
      GLAccount@1100285103 : Record 15;
      MatchedCount@1100285104 : Integer;
    BEGIN
      IF GUIALLOWED() AND (NOT FromCreateChartOfAccounts) THEN
        IF NOT CONFIRM(MatchChartOfAccountsQst, FALSE) THEN
          EXIT;
      SAFTMappingRange.CheckMappingIsStandardAccount();
      SAFTMapping.SETRANGE("Mapping Type", SAFTMappingRange."Mapping Type");
      SAFTMapping.FINDSET();
      REPEAT
        IF GLAccount.GET(SAFTMapping."No.") AND (GLAccount."Account Type" = GLAccount."Account Type"::Posting) THEN BEGIN
          SAFTGLAccountMapping.INIT();
          SAFTGLAccountMapping."Mapping Type" := SAFTMapping."Mapping Type";
          SAFTGLAccountMapping."Category No." := SAFTMapping."Category No.";
          SAFTGLAccountMapping."G/L Account No." := GLAccount."No.";
          SAFTGLAccountMapping."Mapping Range Code" := SAFTMappingRange.Code;
          SAFTGLAccountMapping."No." := SAFTMapping."No.";
          IF NOT SAFTGLAccountMapping.INSERT() THEN
            SAFTGLAccountMapping.MODIFY();
          MatchedCount += 1;
        END;
      UNTIL SAFTMapping.NEXT() = 0;
      IF GUIALLOWED() THEN BEGIN
        GLAccount.SETRANGE("Account Type", GLAccount."Account Type"::Posting);
        MESSAGE(StandardAccountsMatchedMsg, MatchedCount, GLAccount.COUNT());
      END;
    END;

    PROCEDURE CopyMapping@1100285105(FromMappingRangeCode@1100285100 : Code[20];ToMappingRangeCode@1100285101 : Code[20];Replace@1100285102 : Boolean);
    VAR
      FromMappingRange@1100285103 : Record 11072496;
      ToMappingRange@1100285104 : Record 11072496;
      FromSAFTGLAccountMapping@1100285105 : Record 11072494;
      ToSAFTGLAccountMapping@1100285106 : Record 11072494;
    BEGIN
      FromMappingRange.GET(FromMappingRangeCode);
      ToMappingRange.GET(ToMappingRangeCode);
      IF FromMappingRange."Mapping Type" <> ToMappingRange."Mapping Type" THEN
        ERROR(DifferentMappingTypeErr);

      FromSAFTGLAccountMapping.SETRANGE("Mapping Range Code", FromMappingRangeCode);
      IF NOT FromSAFTGLAccountMapping.FINDSET() THEN
        ERROR(NoGLAccountMappingErr, FromMappingRangeCode);
      REPEAT
        ToSAFTGLAccountMapping := FromSAFTGLAccountMapping;
        ToSAFTGLAccountMapping."Mapping Range Code" := ToMappingRangeCode;
        IF NOT ToSAFTGLAccountMapping.INSERT() THEN
        IF Replace THEN
          ToSAFTGLAccountMapping.MODIFY()
        ELSE
          ERROR(MappingExistsErr, ToSAFTGLAccountMapping."Category No.", ToSAFTGLAccountMapping."No.", ToSAFTGLAccountMapping."Mapping Range Code");
      UNTIL FromSAFTGLAccountMapping.NEXT() = 0;
    END;

    LOCAL PROCEDURE SetupGLAccountsForMapping@1100285106(SAFTMappingRange@1100285100 : Record 11072496);
    VAR
      GLAccount@1100285101 : Record 15;
      SAFTGLAccountMapping@1100285102 : Record 11072494;
      Window@1100285103 : Dialog;
    BEGIN
      SAFTMappingRange.TESTFIELD("Mapping Type");
      SAFTMappingRange.TESTFIELD("Starting Date");
      SAFTMappingRange.TESTFIELD("Ending Date");
      IF GUIALLOWED() THEN
        Window.OPEN(PreparingSourceForMappingLbl);
      GetGLAccountForMapping(GLAccount);
      REPEAT
        SAFTGLAccountMapping.INIT();
        SAFTGLAccountMapping."Mapping Range Code" := SAFTMappingRange.Code;
        SAFTGLAccountMapping."Mapping Type" := SAFTMappingRange."Mapping Type";
        SAFTGLAccountMapping."G/L Account No." := GLAccount."No.";
        SAFTGLAccountMapping."G/L Entries Exists" :=
                GLAccNetChangeIsNotZero(GLAccount, SAFTMappingRange."Starting Date", SAFTMappingRange."Ending Date",
                SAFTMappingRange."Include Incoming Balance");
        IF NOT SAFTGLAccountMapping.FIND() THEN
            SAFTGLAccountMapping.INSERT();
      UNTIL GLAccount.NEXT() = 0;
      IF GUIALLOWED() THEN
        Window.CLOSE();
    END;

    LOCAL PROCEDURE GetGLAccountForMapping@1100285107(VAR GLAccount@1100285100 : Record 15);
    BEGIN
      GLAccount.SETRANGE("Account Type", GLAccount."Account Type"::Posting);
      IF NOT GLAccount.FINDSET() THEN
        ERROR(ChartOfAccountsDoesNotExistErr);
    END;

    PROCEDURE UpdateGLEntriesExistStateForGLAccMapping@1100285108(MappingRangeCode@1100285100 : Code[20]);
    VAR
      SAFTMappingRange@1100285101 : Record 11072496;
      SAFTGLAccountMapping@1100285102 : Record 11072494;
    BEGIN
      IF MappingRangeCode = '' THEN
        EXIT;
      IF NOT SAFTMappingRange.GET(MappingRangeCode) THEN
        EXIT;
      SAFTGLAccountMapping.SETRANGE("Mapping Range Code", SAFTMappingRange.Code);
      IF SAFTGLAccountMapping.FINDSET() THEN
        REPEAT
          SAFTGLAccountMapping.VALIDATE("G/L Entries Exists",
              GLAccHasEntries(
                  SAFTGLAccountMapping."G/L Account No.", SAFTMappingRange."Starting Date",
                  SAFTMappingRange."Ending Date", SAFTMappingRange."Include Incoming Balance"));
          SAFTGLAccountMapping.MODIFY(TRUE);
        UNTIL SAFTGLAccountMapping.NEXT() = 0;
    END;

    LOCAL PROCEDURE GLAccHasEntries@1100285109(GLAccNo@1100285101 : Code[20];StartingDate@1100285102 : Date;EndingDate@1100285103 : Date;IncludeIncomingBalance@1101285000 : Boolean) : Boolean;
    VAR
      GLAccount@1100285100 : Record 15;
    BEGIN
      GLAccount.GET(GLAccNo);
      EXIT(GLAccNetChangeIsNotZero(GLAccount, StartingDate, EndingDate, IncludeIncomingBalance));
    END;

    LOCAL PROCEDURE GLAccNetChangeIsNotZero@1100285110(GLAccount@1100285100 : Record 15;StartingDate@1100285102 : Date;EndingDate@1100285101 : Date;IncludeIncomingBalance@1101285000 : Boolean) : Boolean;
    BEGIN
      IF (GLAccount."Income/Balance" = GLAccount."Income/Balance"::"Income Statement") OR (NOT IncludeIncomingBalance) THEN
        GLAccount.SETRANGE("Date Filter", StartingDate, EndingDate)
      ELSE
        GLAccount.SETRANGE("Date Filter", 0D, CLOSINGDATE(EndingDate));
      GLAccount.CALCFIELDS("Net Change");
      EXIT(GLAccount."Net Change" <> 0);
    END;

    PROCEDURE UpdateMasterDataWithNoSeries@1100285111();
    VAR
      SAFTSetup@1100285100 : Record 11072490;
      Dimension@1100285101 : Record 348;
      VATPostingSetup@1100285102 : Record 325;
    BEGIN
      SAFTSetup.GET();
      SAFTSetup.TESTFIELD("Dimension No. Series Code");
      Dimension.SETRANGE("SAF-T Analysis Type", '');
      IF Dimension.FINDSET() THEN
        REPEAT
            Dimension.UpdateSAFTAnalysisTypeFromNoSeries();
            Dimension.VALIDATE("Export to SAF-T", TRUE);
            Dimension.MODIFY(TRUE);
        UNTIL Dimension.NEXT() = 0;

      VATPostingSetup.SETRANGE("Purchase SAF-T Tax Code", 0);
      IF VATPostingSetup.FINDSET() THEN
        REPEAT
            VATPostingSetup.AssignSAFTTaxCodes();
            VATPostingSetup.MODIFY(TRUE);
        UNTIL VATPostingSetup.NEXT() = 0;
    END;

    PROCEDURE UpdateSAFTSourceCodesBySetup@1100285112();
    VAR
      TempNameValueBuffer@1100285100 : TEMPORARY Record 823;
      SourceCodeSetup@1100285101 : Record 242;
    BEGIN
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("General Journal"), GetGLSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("IC General Journal"), GetGLSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Close Income Statement"), GetGLSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("VAT Settlement"), GetGLSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Exchange Rate Adjmt."), GetGLSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Deleted Document"), GetGLSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Adjust Add. Reporting Currency"), GetGLSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Compress G/L"), GetGLSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Compress VAT Entries"), GetGLSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Compress Bank Acc. Ledger"), GetGLSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Compress Check Ledger"), GetGLSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Financially Voided Check"), GetGLSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Trans. Bank Rec. to Gen. Jnl."), GetGLSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO(Reversal), GetGLSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Cash Flow Worksheet"), GetGLSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Payment Reconciliation Journal"), GetGLSAFTSourceCode());

      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO(Sales), GetARSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Sales Journal"), GetARSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Cash Receipt Journal"), GetARSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Sales Entry Application"), GetARSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Unapplied Sales Entry Appln."), GetARSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO(Reminder), GetARSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Finance Charge Memo"), GetARSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Compress Cust. Ledger"), GetARSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Service Management"), GetARSAFTSourceCode());

      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO(Purchases), GetAPSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Purchase Journal"), GetAPSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Payment Journal"), GetAPSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Purchase Entry Application"), GetAPSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Unapplied Purch. Entry Appln."), GetAPSAFTSourceCode());
      InsertTempNameValueBuffer(TempNameValueBuffer, SourceCodeSetup.FIELDNO("Compress Vend. Ledger"), GetAPSAFTSourceCode());
      SetRestFieldsOfSourceCodeSetupToAssortedJournals(TempNameValueBuffer);
      OnCollectSourceCodeFieldsForSAFTMapping(TempNameValueBuffer);
      MapSourceCodeToSAFTSourceCodeFromBuffer(TempNameValueBuffer);
      MapRestSourceCodesToAssortedJournals();
    END;

    LOCAL PROCEDURE SetRestFieldsOfSourceCodeSetupToAssortedJournals@1100285113(VAR TempNameValueBuffer@1100285100 : TEMPORARY Record 823);
    VAR
      RecRef@1100285101 : RecordRef;
      PrimaryKeyFieldRef@1100285102 : FieldRef;
      FieldRef@1100285103 : FieldRef;
      KeyRef@1100285104 : KeyRef;
      i@1100285105 : Integer;
    BEGIN
      RecRef.OPEN(DATABASE::"Source Code Setup");
      KeyRef := RecRef.KEYINDEX(1);
      PrimaryKeyFieldRef := KeyRef.FIELDINDEX(1);
      FOR i := 1 TO RecRef.FIELDCOUNT() DO BEGIN
        FieldRef := RecRef.FIELDINDEX(i);
        IF FieldRef.NUMBER() <> PrimaryKeyFieldRef.NUMBER() THEN
          IF NOT TempNameValueBuffer.GET(FieldRef.NUMBER()) THEN
            InsertTempNameValueBuffer(TempNameValueBuffer, FieldRef.NUMBER(), GetASAFTSourceCode());
      END;
    END;

    LOCAL PROCEDURE MapSourceCodeToSAFTSourceCodeFromBuffer@1100285114(VAR TempNameValueBuffer@1100285100 : TEMPORARY Record 823);
    VAR
      SourceCode@1100285101 : Record 230;
      SourceCodeSetup@1100285102 : Record 242;
      RecRef@1100285103 : RecordRef;
      FieldRef@1100285104 : FieldRef;
    BEGIN
      IF NOT TempNameValueBuffer.FINDSET() THEN
        EXIT;

      IF NOT SourceCodeSetup.GET() THEN
        EXIT;

      RecRef.GETTABLE(SourceCodeSetup);
      REPEAT
        FieldRef := RecRef.FIELD(TempNameValueBuffer.ID);
        IF FORMAT(FieldRef.VALUE()) <> '' THEN BEGIN
          SourceCode.GET(FieldRef.VALUE());
          SourceCode.VALIDATE("SAF-T Source Code", TempNameValueBuffer.Name);
          SourceCode.MODIFY(TRUE);
        END;
      UNTIL TempNameValueBuffer.NEXT() = 0;
    END;

    PROCEDURE MapRestSourceCodesToAssortedJournals@1100285116();
    VAR
      SourceCode@1100285100 : Record 230;
    BEGIN
      SourceCode.SETRANGE("SAF-T Source Code", '');
      IF SourceCode.FINDSET() THEN
        REPEAT
            SourceCode.VALIDATE("SAF-T Source Code", GetASAFTSourceCode());
            SourceCode.MODIFY(TRUE);
        UNTIL SourceCode.NEXT() = 0;
    END;

    PROCEDURE GetGLSAFTSourceCode@1100285117() : Code[9];
    BEGIN
      EXIT('GL');
    END;

    PROCEDURE GetARSAFTSourceCode@1100285118() : Code[9];
    BEGIN
      EXIT('AR');
    END;

    PROCEDURE GetAPSAFTSourceCode@1100285119() : Code[9];
    BEGIN
      EXIT('AP');
    END;

    PROCEDURE GetASAFTSourceCode@1100285120() : Code[9];
    BEGIN
      EXIT('A');
    END;

    PROCEDURE GetASAFTSourceCodeDescription@1100285121() : Text[100];
    BEGIN
      EXIT(AssortedJournalsSourceCodeDescriptionLbl);
    END;

    LOCAL PROCEDURE InsertTempNameValueBuffer@1100285122(VAR TempNameValueBuffer@1100285100 : TEMPORARY Record 823;ID@1100285101 : Integer;Name@1100285102 : Text[250]);
    BEGIN
      TempNameValueBuffer.ID := ID;
      TempNameValueBuffer.Name := Name;
      IF NOT TempNameValueBuffer.INSERT() THEN
        TempNameValueBuffer.MODIFY(); // make it possible to overwrite by subscriber
    END;

    PROCEDURE VerifyMappingIsDone@1100285123(MappingRangeCode@1100285100 : Code[20]);
    VAR
      SAFTGLAccountMapping@1100285101 : Record 11072494;
      SAFTMappingRange@1100285102 : Record 11072496;
      SAFTMappingHelper@1100285103 : Codeunit 11020362;
    BEGIN
      SAFTMappingHelper.UpdateGLEntriesExistStateForGLAccMapping(MappingRangeCode);
      SAFTGLAccountMapping.SETRANGE("Mapping Range Code", MappingRangeCode);
      SAFTGLAccountMapping.SETRANGE("No.", '');
      SAFTGLAccountMapping.SETRANGE("G/L Entries Exists", TRUE);
      IF NOT SAFTGLAccountMapping.ISEMPTY() THEN BEGIN
        SAFTMappingRange.GET(MappingRangeCode);
        LogError(SAFTMappingRange, MappingNotDoneErr);
      END;
    END;

    PROCEDURE VerifyNoMappingDone@1100285124(SAFTMappingRange@1100285100 : Record 11072496);
    VAR
      SAFTGLAccountMapping@1100285101 : Record 11072494;
    BEGIN
      SAFTGLAccountMapping.SETRANGE("Mapping Range Code", SAFTMappingRange.Code);
      SAFTGLAccountMapping.SETFILTER("No.", '<>%1', '');
      IF NOT SAFTGLAccountMapping.ISEMPTY() THEN
        ERROR(MappingDoneErr);
    END;

    PROCEDURE VerifyDimensionsHaveAnalysisCode@1100285125();
    VAR
      Dimension@1100285100 : Record 348;
    BEGIN
      IF Dimension.ISEMPTY() THEN
        EXIT;
      Dimension.SETRANGE("SAF-T Analysis Type", '');
      IF NOT Dimension.ISEMPTY() THEN
        LogError(Dimension, DimensionWithoutAnalysisCodeErr);
    END;

    PROCEDURE VerifyVATPostingSetupHasTaxCodes@1100285126();
    VAR
      VATPostingSetup@1100285100 : Record 325;
    BEGIN
      IF NOT VATPostingSetup.FINDSET() THEN
        EXIT;
      VATPostingSetup.SETRANGE("Sales SAF-T Tax Code", 0);
      IF NOT VATPostingSetup.ISEMPTY() THEN
        LogFieldError(
            VATPostingSetup, VATPostingSetup.FIELDNO("Sales SAF-T Tax Code"),
            STRSUBSTNO(VATPostingSetupWithoutTaxCodeErr, VATPostingSetup.FIELDCAPTION("Sales SAF-T Tax Code")));
      VATPostingSetup.SETRANGE("Sales SAF-T Tax Code");

      VATPostingSetup.SETRANGE("Purchase SAF-T Tax Code", 0);
      IF NOT VATPostingSetup.ISEMPTY() THEN
        LogFieldError(
            VATPostingSetup, VATPostingSetup.FIELDNO("Purchase SAF-T Tax Code"),
            STRSUBSTNO(VATPostingSetupWithoutTaxCodeErr, VATPostingSetup.FIELDCAPTION("Purchase SAF-T Tax Code")));
      VATPostingSetup.SETRANGE("Purchase SAF-T Tax Code");
    END;

    PROCEDURE VerifySourceCodesHasSAFTCodes@1100285127();
    VAR
      SourceCode@1100285100 : Record 230;
    BEGIN
      SourceCode.SETRANGE("SAF-T Source Code", '');
      IF NOT SourceCode.ISEMPTY() THEN
        LogError(SourceCode, SourceCodeWithoutSAFTCodeErr);
    END;

    PROCEDURE GetGLAccountsMappedInfo@1100285128(MappingRangeCode@1100285100 : Code[20]) : Text[20];
    VAR
      SAFTGLAccountMapping@1100285101 : Record 11072494;
      TotalCount@1100285102 : Integer;
    BEGIN
      SAFTGLAccountMapping.SETRANGE("Mapping Range Code", MappingRangeCode);
      TotalCount := SAFTGLAccountMapping.COUNT();
      SAFTGLAccountMapping.SETFILTER("No.", '<>%1', '');
      EXIT(STRSUBSTNO('%1/%2', SAFTGLAccountMapping.COUNT(), TotalCount));
    END;

    PROCEDURE GetVATPostingSetupMappedInfo@1100285129() : Text[20];
    VAR
      VATPostingSetup@1100285100 : Record 325;
      TotalCount@1100285101 : Integer;
      Count@1100285102 : Integer;
    BEGIN
      TotalCount := VATPostingSetup.COUNT();
      IF VATPostingSetup.FINDSET() THEN
        REPEAT
            IF (VATPostingSetup."Sales SAF-T Standard Tax Code" <> '') OR (VATPostingSetup."Purch. SAF-T Standard Tax Code" <> '') THEN
                Count += 1;
        UNTIL VATPostingSetup.NEXT() = 0;
      EXIT(STRSUBSTNO('%1/%2', Count, TotalCount));
    END;

    LOCAL PROCEDURE LogError@1100285130(SourceVariant@1100285100 : Variant;ErrorMessage@1100285101 : Text);
    VAR
      ErrorMessageManagement@1100285102 : Codeunit 28;
    BEGIN
      IF NOT GUIALLOWED() THEN
        ERROR(ErrorMessage);
      ErrorMessageManagement.LogError(SourceVariant, ErrorMessage, '');
    END;

    LOCAL PROCEDURE LogFieldError@1100285131(SourceVariant@1100285102 : Variant;SourceFieldNo@1100285103 : Integer;ErrorMessage@1100285101 : Text);
    VAR
      ErrorMessageManagement@1100285100 : Codeunit 28;
    BEGIN
      IF NOT GUIALLOWED() THEN
        ERROR(ErrorMessage);
      ErrorMessageManagement.LogContextFieldError(0, ErrorMessage, SourceVariant, SourceFieldNo, '');
    END;

    PROCEDURE AddSAFTAssistedSetup@1101285000();
    VAR
      AssistedSetup@1100285100 : Record 1803;
      Order@1100285101 : Integer;
    BEGIN
      AssistedSetup.SETCURRENTKEY(Order);
      AssistedSetup.ASCENDING(TRUE);
      IF AssistedSetup.FINDLAST THEN
        Order := AssistedSetup.Order + 1
      ELSE
        Order := 1;
      IF NOT AssistedSetup.GET(PAGE::"SAF-T Setup Wizard") THEN BEGIN
        AssistedSetup.INIT;
        AssistedSetup."Page ID" := PAGE::"SAF-T Setup Wizard";
        AssistedSetup.Name := COPYSTR(SAFTSetupGuideTxt, 1, 250);
        AssistedSetup.Order := Order;
        AssistedSetup.Visible := TRUE;
        AssistedSetup."Assisted Setup Page ID" := PAGE::"SAF-T Setup Wizard";
        AssistedSetup.Status := AssistedSetup.Status::"Not Completed";
        AssistedSetup.Parent := 100000;
        AssistedSetup.INSERT;
      END;
    END;

    PROCEDURE InsertDefaultNoSeriesInSAFTSetup@1101285001();
    VAR
      SAFTSetup@1100285100 : Record 11072490;
    BEGIN
      IF NOT SAFTSetup.GET() THEN BEGIN
        SAFTSetup.INIT();
        SAFTSetup.INSERT();
      END;
      IF SAFTSetup."Dimension No. Series Code" = '' THEN
        SAFTSetup."Dimension No. Series Code" := InsertNoSeries('DIM', SAFTDimLbl);
      SAFTSetup.MODIFY();
    END;

    LOCAL PROCEDURE InsertNoSeries@1101285002(NoSeriesCode@1100285102 : Code[20];Description@1100285103 : Text[100]) : Code[20];
    VAR
      NoSeries@1100285100 : Record 308;
      NoSeriesLine@1100285101 : Record 309;
    BEGIN
      NoSeries.INIT;
      NoSeries.Code := NoSeriesCode;
      NoSeries.Description := Description;
      NoSeries."Default Nos." := TRUE;
      NoSeries."Manual Nos." := TRUE;
      IF NOT NoSeries.INSERT THEN BEGIN
        NoSeries.Code += '-1';
        WHILE (NOT NoSeries.INSERT) DO
          NoSeries.Code := INCSTR(NoSeries.Code);
      END;

      NoSeriesLine.INIT;
      NoSeriesLine."Series Code" := NoSeries.Code;
      NoSeriesLine."Line No." := 10000;
      NoSeriesLine.VALIDATE("Starting No.", NoSeries.Code + '-10000');
      NoSeriesLine.VALIDATE("Ending No.", NoSeries.Code + '-99999');
      NoSeriesLine.VALIDATE("Increment-by No.", 1);
      NoSeriesLine.INSERT(TRUE);

      EXIT(NoSeries.Code)
    END;

    PROCEDURE InsertSAFTSourceCodes@1101285003();
    VAR
      SAFTMappingHelper@1100285100 : Codeunit 11020362;
    BEGIN
      InsertSAFTSourceCode(SAFTMappingHelper.GetGLSAFTSourceCode, GeneralLedgerJournalsSourceCodeDescriptionLbl);
      InsertSAFTSourceCode(SAFTMappingHelper.GetARSAFTSourceCode, AccountReceivablesSourceCodeDescriptionLbl);
      InsertSAFTSourceCode(SAFTMappingHelper.GetAPSAFTSourceCode, AccountPayablesSourceCodeDescriptionLbl);
      InsertSAFTSourceCode(SAFTMappingHelper.GetASAFTSourceCode, SAFTMappingHelper.GetASAFTSourceCodeDescription);
    END;

    LOCAL PROCEDURE InsertSAFTSourceCode@1101285004(Code@1100285101 : Code[9];Description@1100285102 : Text[100]);
    VAR
      SAFTSourceCode@1100285100 : Record 11128517;
    BEGIN
      SAFTSourceCode.INIT;
      SAFTSourceCode.VALIDATE(Code, Code);
      SAFTSourceCode.VALIDATE(Description, Description);
      IF NOT SAFTSourceCode.FIND THEN SAFTSourceCode.INSERT(TRUE) ;
    END;

    [EventSubscriber(Table,348,OnBeforeInsertEvent,"",Skip,Skip)]
    LOCAL PROCEDURE UpdateSAFAnalysisTypeOnBeforeDimensionInsert@1100285133(VAR Rec@1100285100 : Record 348;RunTrigger@1100285101 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY() THEN
        EXIT;
      Rec.UpdateSAFTAnalysisTypeFromNoSeries();
    END;

    [EventSubscriber(Table,325,OnBeforeInsertEvent,"",Skip,Skip)]
    LOCAL PROCEDURE AssignSAFTaxCodesOnBeforeDimensionInsert@1100285135(VAR Rec@1100285100 : Record 325;RunTrigger@1100285101 : Boolean);
    BEGIN
      IF Rec.ISTEMPORARY() THEN
        EXIT;
      Rec.AssignSAFTTaxCodes();
    END;

    [Integration]
    LOCAL PROCEDURE OnCollectSourceCodeFieldsForSAFTMapping@1100285136(VAR TempNameValueBuffer@1100285100 : TEMPORARY Record 823);
    BEGIN
    END;

    BEGIN
    {
      191003 ORANGO.DL RFC194 implement SAF-T from BC14 CU04 (NAVNO14.04) NorwegianSAFT-extension
      191112 ORANGO.DL updates from BC14.CU06
    }
    END.
  }
}

