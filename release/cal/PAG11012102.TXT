OBJECT Page 11012102 Advice Orders by Project
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Project Advice Orders;
               NOR=Bestillingsunderlag etter prosjekt;
               SVE=Best„llningsunderlag efter projekt];
    MultipleNewLines=No;
    SourceTable=Table11012055;
    DelayedInsert=Yes;
    DataCaptionFields=Project No.;
    PageType=List;
    UsageCategory=Lists;
    AutoSplitKey=No;
    PromotedActionCategoriesML=ENU=New,Process,Report,Logistics,Approval;
    OnInit=BEGIN
             TradeItemEnabled := TRUE;
           END;

    OnOpenPage=VAR
                 InstallationMng@1100525000 : Codeunit 11012268;
                 FPSLicenseManagement@1100527400 : Codeunit 11229289;
               BEGIN
                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
                 IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(ItemSetup) THEN
                   TradeItemEnabled := FALSE;

                 FILTERGROUP(4);
                 //when form used in Base Service Order form, the so no. must be visible
                 ServiceOrderNoVisible := ((GETFILTER("Service Order No.") = '') AND (GETFILTER("Project No.") = ''));
                 FILTERGROUP(0);

                 SETRANGE(Processed, FALSE);

                 IF JobsSetup.GET() THEN;
                 IF ServiceSetup.GET() THEN;

                 FilterActive := FALSE;
                 NotFilterActive := TRUE;

                 PurchasesPayablesSetup.GET;
                 TableLinkedTradeItemInLicense := InstallationMng.LicensePermissionForTableData(DATABASE::"Linked Trade Item");
               END;

    OnAfterGetRecord=VAR
                       langetekst@1100528200 : Text;
                       recordidtest@1100528201 : RecordID;
                       AdviceOrderLinkedDocument@1100285100 : Record 11128128;
                     BEGIN
                       InventoryReservation("Item No.");
                       CALCFIELDS("Vendor Name (Trade Item)", "Vendor Name", "Manufacturer Name");
                       RefQuote := RouteRefMgtCU.GetQuoteOfReference("Purchase Route Reference");
                       RefPurchOrder := RouteRefMgtCU.GetPurchOrderOfReference("Purchase Route Reference");
                       GetItemSpecifications;
                       VendorPrice := GetVendorPrice(Vendor, "Price (LCY)", VendorCurrency);
                       StrategicPurchMgt.FindContractForAdviceOrder(Rec);
                       SetControlAppearance;
                       SetEditable;
                       recordidtest := RECORDID;
                       langetekst := FORMAT(recordidtest);

                       //200325 ORANGO.EE >>
                       RefGetDocumentNo := AdviceOrderLinkedDocument.GetDocumentNoOrCount(Rec);
                       IF RefPurchOrder <> '' THEN
                         RefGetDocumentNo := RefPurchOrder;
                       //<<

                       CurrPage.PendingApprovalFactBox.PAGE.SetFilterOnRecordID(RECORDID);
                       CurrPage.ApprovalFactBox.PAGE.SetFilterOnRecordID(RECORDID);
                     END;

    OnNewRecord=BEGIN
                  //**4PS Generated Code. Do Not Change.sn02
                  DPA_SetDefaultDepartment;
                  //**4PS Generated Code.en02
                  InitRecord;
                  RefQuote := '';
                  RefPurchOrder := '';
                  VendorPrice := 0;      //db, 20-11-08
                  VendorCurrency := '';  //db, 20-11-08

                  LocInventoryQuan := 0;
                  InventoryQuan := 0;
                  ReservedQuan := 0;
                  InventoryUnit := '';

                  FILTERGROUP(4);
                  //when form used in Base Service Order form, fill so no.
                  IF (GETFILTER("Service Order No.") = '') AND (GETFILTER("Base Service Order No.") <> '') THEN
                    VALIDATE("Service Order No.", GETRANGEMIN("Base Service Order No."));
                  FILTERGROUP(0);
                END;

    OnInsertRecord=BEGIN
                     "Quantity (Budget)" := 0;
                     "Quantity (Processed)" := 0;
                     "Process Status" := "Process Status"::Open;
                     VALIDATE(Processed, FALSE);  //C036184
                     VALIDATE("Line No.", 0);
                     IF TableLinkedTradeItemInLicense THEN
                       LinkedTradeItem.AddTradeItemsAdviceOrderLine(Rec, 0);  //C039661
                   END;

    OnModifyRecord=BEGIN
                     SetEditable;
                     IF TableLinkedTradeItemInLicense THEN
                       LinkedTradeItem.AddTradeItemsAdviceOrderLine(Rec, 1);  //C039661
                   END;

    OnAfterGetCurrRecord=VAR
                           langetekst@1100528201 : Text;
                           recordidtest@1100528200 : RecordID;
                           RecRef@1100529600 : RecordRef;
                         BEGIN
                           SetControlAppearance;
                           SetEditable;
                           recordidtest := RECORDID;
                           langetekst := FORMAT(recordidtest);

                           CurrPage.PendingApprovalFactBox.PAGE.SetFilterOnRecordID(RECORDID);
                           CurrPage.ApprovalFactBox.PAGE.SetFilterOnRecordID(RECORDID);

                           RecRef.GETTABLE(Rec);
                           CurrPage.RegisterExternalDocumentFB.PAGE.SetRecordReference(RecRef);
                           CurrPage.RegisterExternalDocumentFB.PAGE.SetByCompany(TRUE);
                           CurrPage.RegisterExternalDocumentFB.PAGE.SetDepartmentCode("Global Dimension 1 Code");
                           CurrPage.ItemUnitsOfMeasureFB.PAGE.SetPrice("Price (LCY)");
                         END;

    ActionList=ACTIONS
    {
      { 8       ;0   ;ActionContainer;
                      ActionContainerType=Reports }
      { 1100485001;1 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=&Print;
                                 NOR=Skriv &ut;
                                 SVE=Skriv &ut];
                      Promoted=Yes;
                      Image=Print;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PrintProjectAdviceSelect;
                               END;
                                }
      { 1210190011;1 ;Action    ;
                      CaptionML=[ENU=Print Advice Order by &Company;
                                 NOR=Skriv ut bestillingsunderlag etter &selskap;
                                 SVE=Skriv ut best„llningsunderlag efter &f”retag];
                      Image=Company;
                      OnAction=VAR
                                 AdviceOrderLine@1210190000 : Record 11012055;
                               BEGIN
                                 AdviceOrderLine.COPY(Rec);
                                 AdviceOrderLine.SETRANGE("Item No.", AdviceOrderLine."Item No.");
                                 IF (AdviceOrderLine."Project No." <> '') THEN
                                   AdviceOrderLine.SETRANGE("Project No.", AdviceOrderLine."Project No.");
                                 IF (AdviceOrderLine."Service Order No." <> '') THEN
                                   AdviceOrderLine.SETRANGE("Service Order No.", AdviceOrderLine."Service Order No.");
                                 AdviceOrderLine.SETRANGE(Processed, AdviceOrderLine.Processed);
                                 AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type");

                                 REPORT.RUNMODAL(REPORT::"Advice Order Lines by Company", TRUE, FALSE, AdviceOrderLine);
                               END;
                                }
      { 1100525118;  ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1100525120;1 ;Action    ;
                      CaptionML=[ENU=&Text;
                                 NOR=&Tekst;
                                 SVE=&Text];
                      Promoted=Yes;
                      Image=SNInfo;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 EditText;
                               END;
                                }
      { 1100525130;1 ;ActionGroup;
                      CaptionML=[ENU=Advice &Order;
                                 NOR=Bestillings&underlag;
                                 SVE=Best„llnings&underlag] }
      { 1100525022;2 ;Action    ;
                      CaptionML=[ENU=&Purchase Route References;
                                 NOR=&Referanser for innkj›psrute;
                                 SVE=&Referenser f”r ink”psf”ljd];
                      Image=ContactReference;
                      OnAction=BEGIN
                                 ShowPurchRouteRef;
                               END;
                                }
      { 1100525129;2 ;Action    ;
                      CaptionML=[ENU=Purchase Orders;
                                 NOR=Bestillinger;
                                 SVE=Ink”psorder];
                      Promoted=Yes;
                      Image=Document;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 Job@1100528400 : Record 11072003;
                               BEGIN
                                 IF Job.GET("Project No.") THEN
                                   Job.ShowPurchaseOrdersForProject;
                               END;
                                }
      { 1210190007;2 ;Action    ;
                      CaptionML=[ENU=Purchase &Line details;
                                 NOR=Innkj›ps&raddetaljer;
                                 SVE=Ink”ps&raddetaljer];
                      Image=ViewCheck;
                      OnAction=BEGIN
                                 IF EditLineDetails(FieldEditable AND ("Process Status" < "Process Status"::Processed)) THEN
                                   CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1100525128;2 ;Action    ;
                      CaptionML=[ENU=Quotes;
                                 NOR=Tilbud;
                                 SVE=Offerter];
                      Promoted=Yes;
                      Image=Quote;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 Job@1100528400 : Record 11072003;
                               BEGIN
                                 IF Job.GET("Project No.") THEN
                                   Job.ShowPurchaseQuotesForProject;
                               END;
                                }
      { 1100525127;2 ;Action    ;
                      CaptionML=[ENU=Item &Journal;
                                 NOR=&Varekladd;
                                 SVE=&Artikeljournal];
                      Promoted=Yes;
                      Image=Journals;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ProjSetUp@1210190004 : Record 315;
                                 ItemJnlTemplate@1210190002 : Record 82;
                                 ItemJnlLine@1210190001 : Record 83;
                               BEGIN
                                 ProjSetUp.GET;
                                 IF ItemJnlTemplate.GET(ProjSetUp."Inventory Journal Template") THEN BEGIN
                                   ItemJnlLine.FILTERGROUP := 2;
                                   ItemJnlLine.SETRANGE("Journal Template Name",ItemJnlTemplate.Name);
                                   ItemJnlLine.FILTERGROUP := 0;
                                   ItemJnlLine.SETRANGE("Job No.","Project No.");
                                   PAGE.RUN(ItemJnlTemplate."Page ID",ItemJnlLine);
                                 END ELSE BEGIN
                                   PAGE.RUN(PAGE::"Item Journal", ItemJnlLine);
                                 END;
                               END;
                                }
      { 1100525000;2 ;Action    ;
                      CaptionML=[ENU=Advice Orders by &Item;
                                 NOR=Bestillingsunderlag etter &artikkel;
                                 SVE=Best„llningsunderlag efter &artikel];
                      RunObject=Page 11012122;
                      RunPageView=SORTING(Processed,Item No.,Manufacturer,Basic Item,Vendor (Trade Item),Trade Item,Project No.,Element,Extension Contract);
                      Promoted=Yes;
                      Image=OrderList;
                      PromotedCategory=Process }
      { 1100528905;2 ;Action    ;
                      CaptionML=ENU=Advice Orders by G/L Account;
                      Image=OrderTracking;
                      OnAction=VAR
                                 AdviceOrderLine@1100528900 : Record 11012055;
                               BEGIN
                                 //DP01378
                                 AdviceOrderLine.FILTERGROUP(2);
                                 AdviceOrderLine.SETRANGE("Record Type", "Record Type"::"G/L Account");
                                 AdviceOrderLine.FILTERGROUP(0);
                                 PAGE.RUNMODAL(PAGE::"Advice Order SF2", AdviceOrderLine);
                               END;
                                }
      { 1100525083;2 ;Action    ;
                      CaptionML=[ENU=Item Availability by Period;
                                 NOR=Artikkelens tilgjengelighet etter periode;
                                 SVE=Artikelns tillg„nglighet efter period];
                      Image=Period;
                      OnAction=BEGIN
                                 ShowItemAvailbyPeriod;
                               END;
                                }
      { 1210190005;2 ;Action    ;
                      CaptionML=[ENU=I&tem Inventory by Company;
                                 NOR=Artikkellager etter selskap;
                                 SVE=Artikellager efter f”retag];
                      Image=InventoryJournal;
                      OnAction=BEGIN
                                 ShowItemInventoryByCompany;
                               END;
                                }
      { 1210190009;2 ;Action    ;
                      CaptionML=[ENU=Doc&uments;
                                 NOR=Dok&ument;
                                 SVE=Dok&ument];
                      Image=Documents;
                      OnAction=BEGIN
                                 ShowDocuments;
                               END;
                                }
      { 1210190010;2 ;Action    ;
                      CaptionML=[ENU=&Comment Lines (Advice Order Line);
                                 NOR=&Kommentarrader (bestillingsunderlagsrad);
                                 SVE=&Kommentarsrader (best„llningsunderlagsrad)];
                      Image=Comment;
                      OnAction=BEGIN
                                 EditCommentLines();
                               END;
                                }
      { 1100525007;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100528207;1 ;ActionGroup;
                      CaptionML=[ENU=Approval;
                                 NOR=Godkjenning;
                                 SVE=Godk„nnande] }
      { 1100528206;2 ;Action    ;
                      Name=Approve;
                      CaptionML=[ENU=Approve;
                                 NOR=Godkjenn;
                                 SVE=Godk„nn];
                      Promoted=Yes;
                      Enabled=OpenApprovalEntriesExistForCurrUser;
                      PromotedIsBig=Yes;
                      Image=Approve;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.ApproveRecordApprovalRequest(RECORDID)
                               END;
                                }
      { 1100528205;2 ;Action    ;
                      Name=Reject;
                      CaptionML=[ENU=Reject;
                                 NOR=Avvis;
                                 SVE=Avvisa];
                      Promoted=Yes;
                      Enabled=OpenApprovalEntriesExistForCurrUser;
                      PromotedIsBig=Yes;
                      Image=Reject;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.RejectRecordApprovalRequest(RECORDID)
                               END;
                                }
      { 1100528202;2 ;Action    ;
                      Name=Delegate;
                      CaptionML=[ENU=Delegate;
                                 NOR=Deleger;
                                 SVE=Delegera];
                      Promoted=Yes;
                      Enabled=OpenApprovalEntriesExistForCurrUser;
                      Image=Delegate;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.DelegateRecordApprovalRequest(RECORDID)
                               END;
                                }
      { 1100528204;2 ;Action    ;
                      Name=Comment;
                      CaptionML=[ENU=Comments;
                                 NOR=Merknader;
                                 SVE=Kommentar];
                      Promoted=Yes;
                      Enabled=OpenApprovalEntriesExistForCurrUser;
                      Image=ViewComments;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 ApprovalsMgmt@1100528500 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.GetApprovalComment(Rec);
                               END;
                                }
      { 1100525117;1 ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 NOR=Fu&nksjon;
                                 SVE=Fu&nktion] }
      { 1100525018;2 ;ActionGroup;
                      CaptionML=[ENU=Select;
                                 NOR=Velg;
                                 SVE=V„lj];
                      Image=Alerts }
      { 1100525110;3 ;Action    ;
                      CaptionML=[ENU=Select Contract Type;
                                 NOR=Velg Type Kontrakt;
                                 SVE=V„lj kontrakttyp];
                      Promoted=Yes;
                      Visible=NotFilterActive;
                      Image=UseFilters;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 FilterPage@1100525001 : Page 11130199;
                                 AdviceOrderLine@1100525002 : Record 11012055;
                                 StrategicPurchMgt@1100525000 : Codeunit 11020211;
                               BEGIN
                                 CLEAR(FilterPage);
                                 FilterPage.LOOKUPMODE(TRUE);
                                 IF FilterPage.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   FilterPage.GetType(ContractFilter);
                                   AdviceOrderLine.COPY(Rec);
                                   IF Rec.FINDSET(TRUE) THEN
                                   REPEAT
                                     StrategicPurchMgt.FindContractForAdviceOrder(AdviceOrderLine);
                                     AdviceOrderLine.MODIFY;
                                   UNTIL AdviceOrderLine.NEXT = 0;
                                   SetContractFilter(ContractFilter);
                                   FilterActive := TRUE;
                                   NotFilterActive := FALSE;
                                 END;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1100525116;3 ;Action    ;
                      CaptionML=[ENU=Select Budget Lines;
                                 NOR=Velg Budsjettrader;
                                 SVE=V„lj budgetrader];
                      Promoted=Yes;
                      Image=GetLines;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Budget;
                               END;
                                }
      { 1100525115;3 ;Action    ;
                      CaptionML=[ENU=Select Purchase Actions;
                                 NOR=Velg Innkj›pshandlinger;
                                 SVE=V„lj ink”ps†tg„rder];
                      Promoted=Yes;
                      Image=GetEntries;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PurchaseAction;
                               END;
                                }
      { 1100525114;3 ;Action    ;
                      CaptionML=[ENU=Select Recipes;
                                 NOR=Velg Maler;
                                 SVE=V„lj mallar];
                      Image=ReceiptLines;
                      OnAction=BEGIN
                                 SelectRecipe;
                               END;
                                }
      { 1100525109;2 ;Action    ;
                      CaptionML=[ENU=Show all;
                                 NOR=Vis alle;
                                 SVE=Visa alla];
                      Promoted=Yes;
                      Visible=FilterActive;
                      Image=RemoveFilterLines;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 ContractFilter := ContractFilter::" ";
                                 SetContractFilter(ContractFilter);
                                 FilterActive := FALSE;
                                 NotFilterActive := TRUE;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 1210190000;2 ;Action    ;
                      CaptionML=[ENU=Explode BOM;
                                 NOR=Utfold stykkliste;
                                 SVE=Expandera struktur];
                      Image=ExplodeBOM;
                      OnAction=BEGIN
                                 ExplodeBOM;
                               END;
                                }
      { 1100529602;2 ;Action    ;
                      Name=ProcessItemOperationCodes;
                      CaptionML=ENU=Process Item Operation Codes;
                      Promoted=Yes;
                      Image=Production;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 LocAdviceOrderLine@1100529600 : Record 11012055;
                                 AdviceOrderMgt@1100529601 : Codeunit 11012041;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(LocAdviceOrderLine);
                                 AdviceOrderMgt.ProcessItemOperationCodes(LocAdviceOrderLine);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1100528404;2 ;ActionGroup;
                      CaptionML=[ENU=Price;
                                 NOR=Pris;
                                 SVE=Pris];
                      Image=Price }
      { 1100525139;3 ;Action    ;
                      Name=ExchangeRate;
                      CaptionML=ENU=Update Currency Exchange Rate;
                      Image=CurrencyExchangeRates;
                      OnAction=VAR
                                 ProjRec@1100525000 : Record 11072003;
                               BEGIN
                                 ProjRec.UpdateAdviceOrderCurrencyData("Project No.");  //db, 08-03-16
                               END;
                                }
      { 1100525107;3 ;Action    ;
                      CaptionML=[ENU=Update Price;
                                 NOR=Aktualiser pris;
                                 SVE=F”rverkliga pris];
                      Image=Price;
                      OnAction=BEGIN
                                 UpdatePrice;
                               END;
                                }
      { 1100525106;3 ;Action    ;
                      CaptionML=[ENU=Update From Selected Quote;
                                 NOR=Oppdater fra valgt tilbud;
                                 SVE=Uppdatera fr†n vald offert];
                      Image=UpdateUnitCost;
                      OnAction=BEGIN
                                 UpdateFromSelectedQuote;
                               END;
                                }
      { 1210190001;3 ;Action    ;
                      CaptionML=[ENU=Divide Agreed Amount;
                                 NOR=Del avtalt bel›p;
                                 SVE=Dela avtalat belopp];
                      Image=PriceAdjustment;
                      OnAction=BEGIN
                                 PageDivideAgreedAmount();
                               END;
                                }
      { 1100528401;3 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Find Lowest Price Trade Items;
                      Image=PriceAdjustment;
                      OnAction=VAR
                                 AdviceOrderLine@1100528400 : Record 11012055;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
                                 AdviceOrderLine.FindLowestPriceTradeItems;
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1210190002;2 ;Action    ;
                      CaptionML=[ENU=Calculate availability;
                                 NOR=Beregn tilgjengelighet;
                                 SVE=Ber„kna tillg„nglighet];
                      Image=ItemAvailabilitybyPeriod;
                      OnAction=BEGIN
                                 UpdateLines;
                               END;
                                }
      { 1100528405;2 ;ActionGroup;
                      CaptionML=[ENU=Lines;
                                 NOR=Rader;
                                 SVE=Rader];
                      Image=AllLines }
      { 1100525105;3 ;Action    ;
                      CaptionML=[ENU=Compress Advice Orders;
                                 NOR=Komprimer bestillingsunderlag;
                                 SVE=Komprimera best„llningsunderlag];
                      Image=Compress;
                      OnAction=BEGIN
                                 Compress;
                               END;
                                }
      { 1100525104;3 ;Action    ;
                      CaptionML=[ENU=Split Advice Orders;
                                 NOR=Del bestillingsunderlag;
                                 SVE=Dela best„llningsunderlag];
                      Image=Splitlines;
                      OnAction=BEGIN
                                 Split;
                               END;
                                }
      { 1100525103;3 ;Action    ;
                      CaptionML=[ENU=Divid&e Advice Orders;
                                 NOR=D&el opp bestillingsunderlag;
                                 SVE=D&ela best„llningsunderlag];
                      Image=Allocate;
                      OnAction=BEGIN
                                 Divide;
                               END;
                                }
      { 1100528403;2 ;ActionGroup;
                      CaptionML=[ENU=Status;
                                 NOR=Status;
                                 SVE=Status];
                      Image=Status }
      { 1100525102;3 ;Action    ;
                      CaptionML=[ENU=Release Advice Orders;
                                 NOR=Frigi bestillingsunderlag;
                                 SVE=Sl„pp best„llningsunderlag];
                      Promoted=Yes;
                      Image=ReleaseDoc;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ApproveLines;
                               END;
                                }
      { 1100528500;3 ;Action    ;
                      CaptionML=ENU=Cancel Advice Orders;
                      Promoted=Yes;
                      Image=CancelLine;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CancelLines;
                               END;
                                }
      { 1100525096;2 ;Action    ;
                      CaptionML=[ENU=Process Advice Orders Collectively;
                                 NOR=Behandle bestillingsunderlag kollektivt;
                                 SVE=Behandla best„llningsunderlag kollektivt];
                      Image=TransferToLines;
                      OnAction=BEGIN
                                 ProcessRun;
                               END;
                                }
      { 1100525094;2 ;Action    ;
                      CaptionML=[ENU=Modify Vendor Collectively;
                                 NOR=Endre leverand›r kollektivt;
                                 SVE=Žndra leverant”r kollektivt];
                      Image=Vendor;
                      OnAction=BEGIN
                                 UpdateVendor;
                               END;
                                }
      { 1100409003;2 ;Action    ;
                      CaptionML=ENU=Modi&fy Collectively;
                      Image=ChangeBatch;
                      OnAction=BEGIN
                                 ModifyRun;
                               END;
                                }
      { 1100528402;2 ;ActionGroup;
                      CaptionML=[ENU=Import;
                                 NOR=Importer;
                                 SVE=Importera];
                      Image=Import }
      { 1100529500;3 ;Action    ;
                      CaptionML=ENU=Import E-plan Item;
                      Image=Import;
                      OnAction=VAR
                                 FromFile@1100529500 : Text;
                                 InStream@1100529501 : InStream;
                                 ImpEPlanItemsinAdviceOr@1100529502 : XMLport 11071865;
                               BEGIN
                                 UPLOADINTOSTREAM(Text002, '', '', FromFile, InStream);

                                 ImpEPlanItemsinAdviceOr.SETSOURCE(InStream);
                                 ImpEPlanItemsinAdviceOr.IMPORT;
                               END;
                                }
      { 1100529501;3 ;Action    ;
                      CaptionML=ENU=Import E-plan Item TXT;
                      Image=Import;
                      OnAction=VAR
                                 AdviceOrderLine@1100525000 : Record 11012055;
                                 ImpEPlanItemsAdvOrderTXT@1100525001 : XMLport 11071859;
                                 FromFile@1100529501 : Text;
                                 InStream@1100529500 : InStream;
                               BEGIN
                                 IF "Project No." <> '' THEN
                                   AdviceOrderLine.SETRANGE("Project No.","Project No.")
                                 ELSE
                                   COPYFILTER("Project No.", AdviceOrderLine."Project No.");

                                 UPLOADINTOSTREAM(Text002, '', '', FromFile, InStream);

                                 ImpEPlanItemsAdvOrderTXT.SETSOURCE(InStream);
                                 ImpEPlanItemsAdvOrderTXT.SETTABLEVIEW(AdviceOrderLine);
                                 ImpEPlanItemsAdvOrderTXT.IMPORT;
                               END;
                                }
      { 1100528800;2 ;Action    ;
                      CaptionML=ENU=Update Receipt Date from Project Element;
                      Image=DateRange;
                      OnAction=BEGIN
                                 UpdateReceiptDateByProjectElement;
                               END;
                                }
      { 1100525009;1 ;ActionGroup;
                      CaptionML=[ENU=Generate;
                                 NOR=Generer;
                                 SVE=Generera] }
      { 1100525100;2 ;Action    ;
                      CaptionML=[ENU=Generate Purchase Quote;
                                 NOR=Generer innkj›pstilbud;
                                 SVE=Generera ink”psoffert];
                      Image=Quote;
                      OnAction=BEGIN
                                 ProcessGenQuote;
                               END;
                                }
      { 1100525099;2 ;Action    ;
                      ShortCutKey=Shift+F9;
                      CaptionML=[ENU=Generate Purchase Orders;
                                 NOR=Generer innkj›psordre;
                                 SVE=Generera ink”psorder];
                      Promoted=Yes;
                      Image=MakeOrder;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ProcessPurchase;
                               END;
                                }
      { 1100525098;2 ;Action    ;
                      ShortCutKey=Ctrl+F9;
                      CaptionML=[ENU=Generate Inventory Orders;
                                 NOR=Generer lagerordre;
                                 SVE=Generera lagerorder];
                      Promoted=Yes;
                      Image=InventoryJournal;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ProcessInventory;
                               END;
                                }
      { 1100525097;2 ;Action    ;
                      CaptionML=[ENU=Generate &Shipping Details;
                                 NOR=Generer &Forsendelsedetaljer;
                                 SVE=Generera leverans&detaljer];
                      Image=ShipmentLines;
                      OnAction=BEGIN
                                 ProcessShippingDetails;
                               END;
                                }
      { 1210190003;2 ;Action    ;
                      CaptionML=[ENU=Generate Plant Requests;
                                 NOR=Generer maskinforesp›rsel;
                                 SVE=Generera Maskinsbeg„ran];
                      Image=Components;
                      OnAction=VAR
                                 AdviceOrderLine@1100529000 : Record 11012055;
                                 AdviceOrderMgt@1100529001 : Codeunit 11012041;
                               BEGIN
                                 //mg, 07-07-11: RFC605
                                 AdviceOrderLine.COPY(Rec);
                                 CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
                                 AdviceOrderMgt.ProcessPlantRequest(AdviceOrderLine);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 1210190004;2 ;Action    ;
                      CaptionML=[ENU=Generate Material Requirement;
                                 NOR=Generer Materialebehov;
                                 SVE=Generera materialbehov];
                      Image=Resource;
                      OnAction=VAR
                                 AdviceOrderLine@1210190000 : Record 11012055;
                               BEGIN
                                 AdviceOrderLine.GenerateAdvOrderToMatReqLines("Project No.");
                               END;
                                }
      { 1100525095;2 ;Action    ;
                      CaptionML=[ENU=Create ICK Order Files;
                                 NOR=Opprette ICK-ordrefiler;
                                 SVE=Skapa ICK-orderfiler];
                      Image=CreateLedgerBudget;
                      OnAction=BEGIN
                                 GenerateICKOrder;
                               END;
                                }
      { 1100529603;2 ;Action    ;
                      CaptionML=ENU=Generate Warehouse App Order;
                      Visible=FALSE;
                      Image=Warehouse;
                      OnAction=VAR
                                 AdviceOrderLine@1100529600 : Record 11012055;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
                                 AdviceCu.CreateEmpolyWarehouseOrderFromAdviceOrderLine(AdviceOrderLine);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1000000007;2 ;Action    ;
                      CaptionML=[ENU=Generate Transfer Order;
                                 SVE=Generera ”verf”ringsorder];
                      Promoted=Yes;
                      Image=TransferOrder;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 // ORANGO.LP 4PSSE CER GAP 13
                                 ProcessTransfer;
                               END;
                                }
      { 1000000006;2 ;Action    ;
                      CaptionML=[ENU=Generate Assembly Order;
                                 SVE=Generera monteringsorder];
                      Promoted=Yes;
                      Image=AssemblyOrder;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 // ORANGO.LP 4PSSE CER GAP 13
                                 ProcessAssembly;
                               END;
                                }
      { 1000000005;2 ;Action    ;
                      CaptionML=[ENU=Generate Pick;
                                 SVE=Generera plock];
                      Promoted=Yes;
                      Image=PickLines;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 // ORANGO.LP 4PSSE CER GAP 13
                                 ProcessPick;
                               END;
                                }
      { 1100528203;1 ;ActionGroup;
                      CaptionML=[ENU=Request Approval;
                                 NOR=Be om godkjenning;
                                 SVE=Beg„r godk„nnande];
                      Image=Action }
      { 1100528200;2 ;Action    ;
                      Name=SendApprovalRequest;
                      CaptionML=[ENU=Send A&pproval Request;
                                 NOR=&Send godkjenningsforesp›rsel;
                                 SVE=Skicka godk&„nnandebeg„ran];
                      ToolTipML=[ENU=Send an approval request.;
                                 NOR=Send en godkjenningsforesp›rsel.;
                                 SVE=Beg„r godk„nnande att „ndra posten.];
                      Enabled=NOT OpenApprovalEntriesExist;
                      Image=SendApprovalRequest;
                      OnAction=VAR
                                 ApprovalManagement4PSConstr@1000 : Codeunit 11125349;
                               BEGIN
                                 IF ApprovalManagement4PSConstr.CheckAdviceOrderLineApprovalsWorkflowEnabled(Rec) THEN
                                   ApprovalsBridge4PSConstruct.OnSendAdviceOrderLineForApproval(Rec);
                               END;
                                }
      { 1100528201;2 ;Action    ;
                      Name=CancelApprovalRequest;
                      CaptionML=[ENU=Cancel Approval Re&quest;
                                 NOR=&Annuller godkjenningsforesp›rsel;
                                 SVE=Annullera &godk„nnandebeg„ran];
                      ToolTipML=[ENU=Cancel the approval request.;
                                 NOR=Annuller godkjenningsforesp›rselen.;
                                 SVE=Annullera godk„nnandebeg„ran.];
                      Enabled=CanCancelApprovalForRecord;
                      Image=CancelApprovalRequest;
                      OnAction=BEGIN
                                 ApprovalsBridge4PSConstruct.OnCancelAdviceOrderLineApprovalRequest(Rec);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100525093;1;Group  ;
                GroupType=Repeater }

    { 1100528904;2;Field  ;
                SourceExpr="Record Type";
                Visible=FALSE }

    { 1100525092;2;Field  ;
                SourceExpr="Project No.";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525091;2;Field  ;
                SourceExpr=Element;
                Visible=FALSE;
                Editable=ElementEditable }

    { 1100525090;2;Field  ;
                SourceExpr="Description Element";
                Visible=FALSE }

    { 1100525089;2;Field  ;
                SourceExpr="Extension Contract";
                Visible=FALSE;
                Editable=ExtensionContractEditable }

    { 1100525088;2;Field  ;
                SourceExpr="Description Extension";
                Visible=FALSE }

    { 1100525087;2;Field  ;
                SourceExpr="Plot No.";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525086;2;Field  ;
                SourceExpr="Line No.";
                Visible=FALSE }

    { 1100525085;2;Field  ;
                SourceExpr="Service Order No.";
                Visible=FALSE;
                Enabled=ServiceOrderNoVisible;
                Editable=FALSE }

    { 1100528501;2;Field  ;
                SourceExpr="Service Location No.";
                Visible=FALSE }

    { 1100528503;2;Field  ;
                SourceExpr="Service Location Description";
                Visible=FALSE }

    { 1100528502;2;Field  ;
                SourceExpr="Service Contract No.";
                Visible=FALSE }

    { 1100528504;2;Field  ;
                SourceExpr="Service Contract Description";
                Visible=FALSE }

    { 1100528900;2;Field  ;
                SourceExpr="G/L Account";
                Visible=FALSE;
                Editable=AccountEditable }

    { 1100529400;2;Field  ;
                SourceExpr="Recipe Group";
                Visible=FALSE }

    { 1100529401;2;Field  ;
                SourceExpr=Recipe;
                Visible=FALSE }

    { 1100525082;2;Field  ;
                SourceExpr="Item No.";
                Editable=FieldEditable;
                OnValidate=BEGIN
                             CheckInventory;
                             CurrPage.UPDATE;
                             SetEditable;
                           END;

                OnLookup=BEGIN
                           HandleItemLookup(1);
                           CurrPage.UPDATE;
                           SetEditable;
                         END;
                          }

    { 1100528902;2;Field  ;
                SourceExpr="Item Category Code";
                Visible=FALSE }

    { 1100529601;2;Field  ;
                SourceExpr="Item Operation Code";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100528903;2;Field  ;
                SourceExpr="Variant Code";
                Visible=FALSE }

    { 1100525081;2;Field  ;
                SourceExpr=Manufacturer;
                Enabled=TradeItemEnabled }

    { 1100525131;2;Field  ;
                SourceExpr="Manufacturer Name";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525080;2;Field  ;
                SourceExpr="Basic Item";
                Enabled=TradeItemEnabled;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             InventoryReservation("Item No.");
                             CurrPage.UPDATE;
                             SetEditable;
                           END;

                OnLookup=BEGIN
                           HandleItemLookup(2);
                           SetEditable;
                         END;
                          }

    { 1100525079;2;Field  ;
                SourceExpr="Vendor (Trade Item)";
                Enabled=TradeItemEnabled;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             SetEditable;
                           END;
                            }

    { 1100525119;2;Field  ;
                SourceExpr="Vendor Name (Trade Item)";
                Visible=FALSE;
                Editable=FALSE }

    { 1100525078;2;Field  ;
                SourceExpr="Trade Item";
                Enabled=TradeItemEnabled;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             InventoryReservation("Item No.");
                             CurrPage.UPDATE;
                             SetEditable;
                           END;

                OnLookup=VAR
                           lvTempAdviceOrderLine@1100525002 : TEMPORARY Record 11012055;
                         BEGIN
                           IF "Item No." <> '' THEN BEGIN
                             lvTempAdviceOrderLine.COPY(Rec);
                             lvTempAdviceOrderLine.VALIDATE("Item No.","Item No.");
                             g_ItemCode := lvTempAdviceOrderLine."Trade Item";
                             g_Vendor := lvTempAdviceOrderLine."Vendor (Trade Item)";
                           END;
                           HandleItemLookup(3);
                           SetEditable;
                         END;

                OnAssistEdit=BEGIN
                               HandleItemAssistEdit(3);
                             END;
                              }

    { 1100525077;2;Field  ;
                SourceExpr="Item Brand";
                Visible=FALSE }

    { 1100525076;2;Field  ;
                SourceExpr="Item Type";
                Visible=FALSE }

    { 1100525075;2;Field  ;
                SourceExpr="Item Series";
                Visible=FALSE }

    { 1100525074;2;Field  ;
                SourceExpr="Shelf No. (Item)";
                Visible=FALSE }

    { 1100525073;2;Field  ;
                SourceExpr="Shelf No. (SKU)";
                Visible=FALSE }

    { 1100525122;2;Field  ;
                SourceExpr="Subcontracting Activity";
                Visible=FALSE;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;
                            }

    { 1100525072;2;Field  ;
                SourceExpr=Vendor;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             CurrPage.UPDATE;  //DP00884: refresh VendorPrice
                           END;

                OnAssistEdit=BEGIN
                               LookupItemVendor(FieldEditable);
                             END;
                              }

    { 1100525112;2;Field  ;
                SourceExpr="Vendor Name";
                Visible=FALSe;
                Editable=FALSE }

    { 1100525071;2;Field  ;
                SourceExpr="Order Address Code";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100529001;2;Field  ;
                SourceExpr="Plant Company";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525113;2;Field  ;
                SourceExpr="Plant Location";
                Visible=FALSE;
                Editable=FieldEditable;
                OnAssistEdit=BEGIN
                               LookupPlantLocationWithAssistEdit;
                             END;
                              }

    { 1100525111;2;Field  ;
                SourceExpr="Plant Type";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525070;2;Field  ;
                SourceExpr="Cost Type";
                Editable=CostTypeEditable }

    { 1100525069;2;Field  ;
                SourceExpr="Cost Object";
                Editable=FieldEditable;
                LookupPageID=Cost Object List;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;
                            }

    { 1100525068;2;Field  ;
                SourceExpr="Cost Component";
                Editable=CostComponentEditable }

    { 1100529000;2;Field  ;
                SourceExpr="Project Object No.";
                Editable=FALSE;
                OnAssistEdit=VAR
                               ProjectObject@1100529000 : Record 11229311;
                             BEGIN
                               IF "Project Object No." <> '' THEN BEGIN
                                 ProjectObject.SETRANGE("Project No.", "Project No.");
                                 ProjectObject."No." := "Project Object No.";
                                 PAGE.RUNMODAL(PAGE::"Project Object", ProjectObject);
                               END;
                             END;
                              }

    { 1100525067;2;Field  ;
                SourceExpr=Description;
                Editable=FieldEditable;
                Style=Strong;
                StyleExpr=("Source Type" = "Source Type"::"Bom Header") OR ("Source Type" = "Source Type"::"Recipe Header") }

    { 1100525005;2;Field  ;
                BlankZero=Yes;
                SourceExpr="Attached to Line No.";
                Visible=FALSE;
                Style=Subordinate;
                StyleExpr="Attached to Line No."<>0 }

    { 1100525066;2;Field  ;
                SourceExpr="Description 2";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525065;2;Field  ;
                SourceExpr="External Text Block";
                Visible=FALSE }

    { 1100525064;2;Field  ;
                SourceExpr="Price Agreement";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525063;2;Field  ;
                SourceExpr="Additional Cost (Service)";
                Visible=FALSE;
                Editable=AdditionalCostServiceEditable }

    { 1100525062;2;Field  ;
                SourceExpr="Quantity (Budget)" }

    { 1100525061;2;Field  ;
                SourceExpr="Quantity (Advice)";
                OnValidate=BEGIN
                             CheckInventory;
                             CurrPage.UPDATE;
                           END;
                            }

    { 1100525060;2;Field  ;
                SourceExpr="Quantity (Processed)";
                Editable=FALSE }

    { 1100525059;2;Field  ;
                CaptionML=[ENU=Quantity Received;
                           NOR=Mottatt (antall);
                           SVE=Inlevererat antal];
                SourceExpr=ReceivedPurchaseQuantity('');
                Editable=FALSE }

    { 1100409005;2;Field  ;
                CaptionML=ENU=Reserved Inventory;
                SourceExpr=QtyReservedInventory();
                OnDrillDown=BEGIN
                              DrilDownReservedInventory();
                            END;
                             }

    { 1100409004;2;Field  ;
                CaptionML=ENU=Delivered Inventory;
                SourceExpr=QtyDeliveredInventory();
                OnDrillDown=BEGIN
                              DrillDownDeliveredInventory();
                            END;
                             }

    { 1100525058;2;Field  ;
                CaptionML=[ENU=Deliverable Quantity;
                           NOR=Leverbart antall;
                           SVE=Levererbart antal];
                SourceExpr=GetDeliverableQuantity() }

    { 1000000010;2;Field  ;
                CaptionML=[ENU=Inventory (Transferable);
                           SVE=Lager (”versaldo)];
                DecimalPlaces=0:5;
                SourceExpr=GetTransferableInventory();
                OnDrillDown=VAR
                              StockkeepingUnit@111280000 : Record 5700;
                            BEGIN
                              // ORANGO.LP 4PSSE CER GAP 13
                              StockkeepingUnit.SETRANGE("Item No.", "Item No.");
                              StockkeepingUnit.SETRANGE("Variant Code", "Variant Code");
                              PAGE.RUNMODAL(PAGE::"Transferable Inventory List", StockkeepingUnit);
                            END;
                             }

    { 1100525057;2;Field  ;
                SourceExpr="Unit of Measure";
                Editable=UnitOfMeasureEditable;
                OnValidate=BEGIN
                             UnitofMeasureOnAfterValidate;
                           END;
                            }

    { 1100525049;2;Field  ;
                SourceExpr=Transaction;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             CheckInventory;
                             CurrPage.UPDATE;
                             SetEditable;
                           END;
                            }

    { 1000000000;2;Field  ;
                SourceExpr="Transaction (Secondary)" }

    { 1000000001;2;Field  ;
                SourceExpr="Rapid Order" }

    { 1000000002;2;Field  ;
                SourceExpr="Blocked Item" }

    { 1000000003;2;Field  ;
                SourceExpr="Transfer From Location" }

    { 1000000004;2;Field  ;
                SourceExpr="Home Location" }

    { 1100525056;2;Field  ;
                SourceExpr="Gross Price (LCY)";
                Visible=FALSE;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             UpdatePriceAgreement;  //C047131
                           END;
                            }

    { 1100525125;2;Field  ;
                SourceExpr="Gross Price (FCY)";
                Visible=FALSE;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             UpdatePriceAgreement;  //C047131
                           END;
                            }

    { 1100525055;2;Field  ;
                SourceExpr="Discount %";
                Visible=FALSE;
                Editable=FieldEditable;
                OnValidate=BEGIN
                             UpdatePriceAgreement;  //C047131
                           END;
                            }

    { 1100525054;2;Field  ;
                SourceExpr="Price (LCY)";
                OnValidate=BEGIN
                             UpdatePriceAgreement;  //C047131
                           END;
                            }

    { 1100525132;2;Field  ;
                SourceExpr="Price (FCY)";
                Visible=FALSE;
                OnValidate=BEGIN
                             UpdatePriceAgreement;  //C047131
                           END;
                            }

    { 1100525137;2;Field  ;
                SourceExpr="Currency Code";
                Visible=FALSE }

    { 1100525138;2;Field  ;
                SourceExpr="Currency Agreement";
                Visible=FALSE }

    { 1100525053;2;Field  ;
                Name=VendorPrice;
                CaptionML=ENU=Vendor Price (FCY);
                SourceExpr=VendorPrice;
                Visible=FALSE;
                Editable=VendorPriceEditable;
                OnValidate=BEGIN
                             VALIDATE("Price (LCY)", ConvertVendorPrice(Vendor, VendorPrice));
                           END;
                            }

    { 1100525052;2;Field  ;
                Name=VendorCurrency;
                CaptionML=ENU=Currency (Vendor);
                SourceExpr=VendorCurrency;
                Visible=FALSE;
                Editable=FALSE }

    { 1100525050;2;Field  ;
                SourceExpr="Sales Price (LCY)";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525134;2;Field  ;
                SourceExpr="Sales Price (FCY)";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525051;2;Field  ;
                SourceExpr="Amount (LCY)" }

    { 1100525133;2;Field  ;
                SourceExpr="Amount (FCY)";
                Visible=FALSE }

    { 1100525048;2;Field  ;
                SourceExpr="Process Status";
                Editable=ProcessStatusEditable;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;
                            }

    { 1100525047;2;Field  ;
                SourceExpr=Processed;
                Editable=FALSE }

    { 1100409000;2;Field  ;
                SourceExpr="Supplying Company Inventory";
                Visible=FALSE;
                Editable=SupplyingCompInvEditable;
                OnValidate=BEGIN
                             CheckInventory;
                             CurrPage.UPDATE;
                           END;
                            }

    { 1100525046;2;Field  ;
                CaptionML=[ENU=Inventory;
                           NOR=Lager;
                           SVE=Lager];
                SourceExpr=InventoryQuan;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              DrillDownInventory(ShowLocations::All);
                            END;
                             }

    { 1100525045;2;Field  ;
                CaptionML=[ENU=Inventory pref. locations;
                           NOR=Foretrukket Lagerplassering;
                           SVE=F”rvalda lagerst„llen];
                SourceExpr=InventoryPrefLocations;
                OnDrillDown=BEGIN
                              DrillDownInventory(ShowLocations::PrefLocations);
                            END;
                             }

    { 1100525044;2;Field  ;
                CaptionML=[ENU=Reserved;
                           NOR=Reservert;
                           SVE=Reserverat];
                SourceExpr=ReservedQuan;
                Editable=FALSE;
                OnDrillDown=VAR
                              ItemJnlLineRec@1210190001 : Record 83;
                            BEGIN
                              IF ItemRec.GET("Item No.") THEN BEGIN
                                ItemJnlLineRec.SETRANGE("Item No.", ItemRec."No.");
                                ItemJnlLineRec."Job No." := "Project No.";
                                PAGE.RUN(0,ItemJnlLineRec);
                              END;
                            END;
                             }

    { 1100525043;2;Field  ;
                CaptionML=[ENU=Base Unit of Measure;
                           NOR=Lagerenhet;
                           SVE=Basenhet];
                SourceExpr=InventoryUnit;
                Editable=FALSE }

    { 1100525042;2;Field  ;
                SourceExpr="Order Date";
                Editable=FieldEditable }

    { 1100525041;2;Field  ;
                SourceExpr="Delivery Period";
                Editable=FieldEditable }

    { 1100525040;2;Field  ;
                SourceExpr="Receipt Date";
                Editable=FieldEditable;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;
                            }

    { 1100525108;2;Field  ;
                SourceExpr="Requested Receipt Date";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525121;2;Field  ;
                SourceExpr="Expected return on";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100528300;2;Field  ;
                SourceExpr="Delivery Time";
                Visible=false }

    { 1100525039;2;Field  ;
                SourceExpr="Location Code";
                Editable=LocationCodeEditable;
                OnValidate=BEGIN
                             LocationOnAfterValidate;
                           END;
                            }

    { 1100525084;2;Field  ;
                SourceExpr="Bin Code" }

    { 1100525038;2;Field  ;
                CaptionML=[ENU=Location Inventory;
                           NOR=Lagerplassering;
                           SVE=Lagerst„lle];
                SourceExpr=LocInventoryQuan;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              DrillDownInventory(ShowLocations::Location);
                            END;
                             }

    { 1100525037;2;Field  ;
                SourceExpr=Deliver;
                Editable=FieldEditable }

    { 1100525036;2;Field  ;
                SourceExpr="Ship To Location";
                Editable=FieldEditable }

    { 1100525032;2;Field  ;
                SourceExpr="Purchase Action";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525031;2;Field  ;
                SourceExpr="Purchase Phase";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525030;2;Field  ;
                SourceExpr="Purchaser Code";
                Editable=FieldEditable }

    { 1100525029;2;Field  ;
                SourceExpr="Negotiation recommended";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525028;2;Field  ;
                SourceExpr="Ask for Quote";
                Editable=FieldEditable }

    { 1100525027;2;Field  ;
                CaptionML=[ENU=Quote No.;
                           NOR=Foresp›rselsnr.;
                           SVE=Offertnr];
                SourceExpr=RefQuote;
                Visible=FALSE;
                Editable=FALSE;
                OnLookup=VAR
                           lvPurchHeadRec@1210190000 : Record 38;
                         BEGIN
                           IF (RefQuote = '') THEN
                             EXIT;

                           IF (COPYSTR(RefQuote, 1, 1) = '<') THEN  // IF Quote No. is '<Nr.>', then more than one quote present
                             RouteRefMgtCU.ShowReferenceQuoteList("Purchase Route Reference")
                           ELSE BEGIN
                             lvPurchHeadRec.SETRANGE("Document Type", lvPurchHeadRec."Document Type"::Quote);
                             lvPurchHeadRec.SETRANGE("No.", RefQuote);
                             PAGE.RUNMODAL(PAGE::"Purchase Quote", lvPurchHeadRec);
                           END;
                         END;
                          }

    { 1100525026;2;Field  ;
                CaptionML=[ENU=Purchase Order;
                           NOR=Bestilling;
                           SVE=Ink”psorder];
                SourceExpr=RefPurchOrder;
                Editable=FALSE;
                OnLookup=VAR
                           lvPurchHeadRec@1210190000 : Record 38;
                         BEGIN
                           IF (RefPurchOrder = '') THEN
                             EXIT;

                           IF (COPYSTR(RefPurchOrder, 1, 1) = '<') THEN  // IF Order No. is '<Nr.>', then more than one order present
                             RouteRefMgtCU.ShowReferencePurchOrderList("Purchase Route Reference")
                           ELSE BEGIN
                             lvPurchHeadRec.SETRANGE("Document Type", lvPurchHeadRec."Document Type"::Order);
                             lvPurchHeadRec.SETRANGE("No.", RefPurchOrder);
                             PAGE.RUNMODAL(PAGE::"Purchase Order", lvPurchHeadRec);
                           END;
                         END;
                          }

    { 1100525025;2;Field  ;
                SourceExpr="Purchase Route Reference";
                Visible=FALSE }

    { 1100525024;2;Field  ;
                SourceExpr="ICK Order";
                Visible=FALSE }

    { 1100525023;2;Field  ;
                SourceExpr="Created by";
                Visible=FALSE }

    { 1100525021;2;Field  ;
                SourceExpr="Created by Employee No.";
                Visible=FALSE }

    { 1100525020;2;Field  ;
                SourceExpr="Date Created";
                Visible=FALSE }

    { 1100525019;2;Field  ;
                SourceExpr="Modified by";
                Visible=FALSE }

    { 1100525017;2;Field  ;
                SourceExpr="Last Date Modified";
                Visible=FALSE }

    { 1100525016;2;Field  ;
                SourceExpr="E-Plan Item";
                Visible=FALSE }

    { 1100525015;2;Field  ;
                SourceExpr="Scheme Code";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525014;2;Field  ;
                SourceExpr="Comments for Logistics";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525012;2;Field  ;
                SourceExpr="Main Project No.";
                Visible=FALSE }

    { 1100528901;2;Field  ;
                SourceExpr="Yard No.";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525011;2;Field  ;
                SourceExpr="System No.";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525013;2;Field  ;
                SourceExpr="Entity Type";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525010;2;Field  ;
                SourceExpr="Entity No.";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100409001;2;Field  ;
                SourceExpr="Vendor No. (Item Card)";
                Importance=Additional }

    { 1100409002;2;Field  ;
                SourceExpr="Vendor Item No. (Item Card)";
                Importance=Additional }

    { 1100525008;2;Field  ;
                SourceExpr="Cable Transit Pos.";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100525006;2;Field  ;
                CaptionML=ENU=Approval entries exist;
                SourceExpr=ApprovalEntriesExist();
                Visible=FALSE;
                Editable=FALSE }

    { 1100528400;2;Field  ;
                SourceExpr="Consented Date-Time" }

    { 1100525004;2;Field  ;
                SourceExpr="Contract Type" }

    { 1100525003;2;Field  ;
                CaptionML=[ENU=Blanket Order;
                           NOR=Rammebestilling;
                           SVE=Avropsorder];
                SourceExpr=StrategicPurchMgt.NumberOfBlOrdersAdviceOrder(Rec);
                OnLookup=BEGIN
                           StrategicPurchMgt.LookupBlOrderAdviceOrder(Rec);
                         END;
                          }

    { 1100525002;2;Field  ;
                CaptionML=[ENU=Blanket Order Line;
                           NOR=Rammeordrerad;
                           SVE=Avropsorderrad];
                SourceExpr=StrategicPurchMgt.NumberOfBlOrderLinesAdvOrder(Rec);
                Editable=FALSE;
                OnLookup=BEGIN
                           StrategicPurchMgt.LookupBlOrderLinesAdviceOrder(Rec);
                         END;
                          }

    { 1100525001;2;Field  ;
                CaptionML=[ENU=Quantity in Blanket Orders;
                           NOR=Antall i rammeordre;
                           SVE=Antal i avropsorder];
                SourceExpr=StrategicPurchMgt.QtyInBlanketOrdersAdviceOrder(Rec);
                OnLookup=BEGIN
                           StrategicPurchMgt.LookupBlOrderLinesAdviceOrder(Rec);
                         END;
                          }

    { 1100528000;2;Field  ;
                CaptionML=[ENU=Documents;
                           NOR=Dokumenter;
                           SVE=Dokument];
                SourceExpr=HasDocumentLinks;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ShowDocuments;
                            END;
                             }

    { 1100525101;2;Field  ;
                SourceExpr="Bin Code (Project Inventory)" }

    { 1100528600;2;Field  ;
                SourceExpr="Price History 0 Exists" }

    { 1100527400;2;Field  ;
                CaptionML=[ENU=Purchase Details;
                           NOR=Innkj›psdetaljer;
                           SVE=Ink”psdetaljer];
                SourceExpr=PurchaseDetailDescription }

    { 1100527300;2;Field  ;
                SourceExpr="Project Planning Activity No.";
                Visible=FALSE;
                Editable=FieldEditable }

    { 1100527301;2;Field  ;
                SourceExpr="Project Plan. Act. Description";
                Visible=FALSE }

    { 1100528505;2;Field  ;
                SourceExpr="Original Vendor (Trade Item)";
                Visible=False }

    { 1100528906;2;Field  ;
                SourceExpr="Original Quantity";
                Visible=FALSE;
                Editable=OriginalQuantityEditable }

    { 111280000;2;Field   ;
                SourceExpr="System No. Assembly Order" }

    { 1000000009;2;Field  ;
                CaptionML=[ENU=Inventory (Transferable);
                           SVE=Lager (”versaldo)];
                DecimalPlaces=0:5;
                SourceExpr=GetTransferableInventory;
                OnDrillDown=VAR
                              StockkeepingUnit@111280000 : Record 5700;
                            BEGIN
                              // ORANGO.LP 4PSSE CER GAP 13
                              StockkeepingUnit.SETRANGE("Item No.", "Item No.");
                              StockkeepingUnit.SETRANGE("Variant Code", "Variant Code");
                              PAGE.RUNMODAL(PAGE::"Transferable Inventory List", StockkeepingUnit);
                            END;
                             }

    { 1100285100;2;Field  ;
                CaptionML=[ENU=Document No.;
                           SVE=Dokumentnr];
                SourceExpr=RefGetDocumentNo;
                Editable=false;
                OnLookup=VAR
                           AdviceOrderLinkedDocument@1000000002 : Record 11128128;
                           PickOrder@1000000001 : Page 11128126;
                           PickHeader@1000000000 : Record 11128126;
                           AdviceOrderLinkedDocumentPage@1100285100 : Page 11128131;
                           PurchaseHeader@1100285104 : Record 38;
                           TransferHeader@1100285103 : Record 5740;
                           AssemblyHeader@1100285102 : Record 900;
                         BEGIN
                           CASE "Transaction (Secondary)" OF
                             "Transaction (Secondary)"::Assembly:
                               IF (COPYSTR(RefGetDocumentNo, 1, 1) = '<') THEN BEGIN
                                 AdviceOrderLinkedDocument.SETRANGE("Project No.", Rec."Project No.");
                                 AdviceOrderLinkedDocument.SETRANGE("Project Line No.", Rec."Line No.");
                                 PAGE.RUNMODAL(PAGE::"Advice Order Linked Document", AdviceOrderLinkedDocument);
                               END ELSE BEGIN
                                 IF AssemblyHeader.GET(AssemblyHeader."Document Type"::Order, RefGetDocumentNo) THEN
                                   PAGE.RUNMODAL(PAGE::"Assembly Order", AssemblyHeader);
                               END;
                             "Transaction (Secondary)"::Inventory:
                               IF (COPYSTR(RefGetDocumentNo, 1, 1) = '<') THEN BEGIN
                                 AdviceOrderLinkedDocument.SETRANGE("Project No.", Rec."Project No.");
                                 AdviceOrderLinkedDocument.SETRANGE("Project Line No.", Rec."Line No.");
                                 PAGE.RUNMODAL(PAGE::"Advice Order Linked Document", AdviceOrderLinkedDocument);
                               END ELSE BEGIN
                                 IF PickHeader.GET(RefGetDocumentNo) THEN
                                 PAGE.RUNMODAL(PAGE::"Pick Order", PickHeader);
                               END;
                             "Transaction (Secondary)"::Purchase:
                               IF (COPYSTR(RefGetDocumentNo, 1, 1) = '<') THEN BEGIN
                                  RouteRefMgtCU.ShowReferencePurchOrderList("Purchase Route Reference");
                               END ELSE BEGIN
                                 IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,RefGetDocumentNo) THEN
                                 PAGE.RUNMODAL(PAGE::"Purchase Order", PurchaseHeader);
                               END;
                             "Transaction (Secondary)"::Transfer:
                               IF (COPYSTR(RefGetDocumentNo, 1, 1) = '<') THEN BEGIN
                                 AdviceOrderLinkedDocument.SETRANGE("Project No.", Rec."Project No.");
                                 AdviceOrderLinkedDocument.SETRANGE("Project Line No.", Rec."Line No.");
                                 PAGE.RUNMODAL(PAGE::"Advice Order Linked Document", AdviceOrderLinkedDocument);
                               END ELSE BEGIN
                                 IF TransferHeader.GET(RefGetDocumentNo) THEN
                                 PAGE.RUNMODAL(PAGE::"Transfer Order", TransferHeader);
                               END;
                           END;
                         END;
                          }

    { 1100285101;2;Field  ;
                SourceExpr="Document Sent By" }

    { 1100528802;0;Container;
                ContainerType=FactBoxArea }

    { 1100528506;1;Part   ;
                Name=ItemUnitsOfMeasureFB;
                CaptionML=ENU=Item Units of Measure;
                SubPageLink=Item No.=FIELD(Item No.);
                PagePartID=Page11129723;
                Visible=False;
                PartType=Page }

    { 1100528801;1;Part   ;
                Name=Item Features;
                CaptionML=[ENU=Item Features;
                           NOR=Artikkelfunksjoner;
                           SVE=Artikelfunktioner];
                SubPageLink=Item No.=FIELD(Item No.);
                PagePartID=Page11229268;
                Visible=False;
                PartType=Page }

    { 1100528210;1;Part   ;
                Name=PendingApprovalFactBox;
                ApplicationArea=#Suite;
                SubPageView=WHERE(Table ID=CONST(11012055));
                PagePartID=Page9103;
                Visible=OpenApprovalEntriesExistForCurrUser;
                PartType=Page }

    { 1100529600;1;Part   ;
                Name=RegisterExternalDocumentFB;
                PagePartID=Page11125053;
                PartType=Page }

    { 1100528209;1;Part   ;
                Name=ApprovalFactBox;
                SubPageView=WHERE(Table ID=CONST(11012055));
                PagePartID=Page9092;
                Visible=FALSE;
                PartType=Page }

    { 1100528208;1;Part   ;
                Name=WorkflowStatus;
                ApplicationArea=#Suite;
                PagePartID=Page1528;
                Visible=ShowWorkflowStatus;
                Enabled=FALSE;
                Editable=FALSE;
                PartType=Page;
                ShowFilter=No }

    { 1100527401;1;Part   ;
                Name=PurchaseLineDetails;
                CaptionML=[ENU=Purchase Line Details;
                           NOR=Bestillingslinje - detaljer;
                           SVE=Ink”psradsdetaljer];
                SubPageLink=Record Type=CONST(Project),
                            Project No.=FIELD(Project No.),
                            Yard No.=FIELD(Yard No.),
                            System No.=FIELD(System No.),
                            Entity Type=FIELD(Entity Type),
                            Entity No.=FIELD(Entity No.),
                            Line No.=FIELD(Line No.);
                PagePartID=Page11129878;
                PartType=Page }

    { 1100527302;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1100527303;1;Part   ;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      gAdviceOrderLineRec@1100485000 : Record 11012055;
      ContractFilter@1100525000 : ' ,No Contract,Contract,Contract with Discount Agreement,General Blanket Order,Project Blanket Order,Service Blanket Order';
      DPA_IsHardFilter@1100000999 : Boolean;
      JobsSetup@1100525033 : Record 315;
      ServiceSetup@1100525032 : Record 11012800;
      ItemSetup@1100525026 : Record 11012300;
      ItemRec@1100525025 : Record 27;
      AdviceRec@1100525024 : Record 11012055;
      PrintDoc@1100525022 : Codeunit 229;
      AdviceCu@1100525021 : Codeunit 11012041;
      RouteRefMgtCU@1100525020 : Codeunit 11012045;
      InventoryQuan@1100525019 : Decimal;
      ReservedQuan@1100525018 : Decimal;
      LocInventoryQuan@1100525017 : Decimal;
      InventoryUnit@1100525016 : Code[10];
      RefQuote@1100525015 : Code[20];
      RefPurchOrder@1100525014 : Code[20];
      VendorPrice@1100525012 : Decimal;
      VendorCurrency@1100525011 : Code[20];
      ShowLocations@1100525010 : 'All,PrefLocations,Location';
      g_ItemCode@1100525009 : Code[20];
      g_Vendor@1100525008 : Code[20];
      StrategicPurchMgt@1100525007 : Codeunit 11020211;
      TradeItemEnabled@1100525004 : Boolean INDATASET;
      Text000@1100525028 : TextConst 'ENU=Insufficient Stock present;NOR=Utilstrekkelig lagerbalanse;SVE=Otillr„cklig lagerbalans';
      ServiceOrderNoVisible@1100525001 : Boolean INDATASET;
      FieldEditable@1100528400 : Boolean INDATASET;
      AdditionalCostServiceEditable@1100528401 : Boolean INDATASET;
      ElementEditable@1100528402 : Boolean INDATASET;
      ExtensionContractEditable@1100528403 : Boolean INDATASET;
      QuantityAdviceEditable@1100528406 : Boolean INDATASET;
      PriceEditable@1100528407 : Boolean INDATASET;
      LocationCodeEditable@1100525002 : Boolean INDATASET;
      ProcessStatusEditable@1100525003 : Boolean INDATASET;
      VendorPriceEditable@1100525005 : Boolean INDATASET;
      UnitOfMeasureEditable@1100525030 : Boolean INDATASET;
      CostComponentEditable@1100525031 : Boolean INDATASET;
      CostTypeEditable@1100525027 : Boolean INDATASET;
      FilterActive@1100525035 : Boolean INDATASET;
      NotFilterActive@1100525034 : Boolean INDATASET;
      SupplyingCompInvEditable@1100409000 : Boolean INDATASET;
      Text001@1100409001 : TextConst 'ENU=First select lines.;NOR=Velg rader f›rst.;SVE=V„lj f”rst rader.';
      AccountEditable@1100528900 : Boolean INDATASET;
      PurchasesPayablesSetup@1100528500 : Record 312;
      OpenApprovalEntriesExist@1100528203 : Boolean;
      CanCancelApprovalForRecord@1100528202 : Boolean;
      OpenApprovalEntriesExistForCurrUser@1100528201 : Boolean;
      ApprovalManagement4PSConstr@1100528200 : Codeunit 11125349;
      ApprovalsBridge4PSConstruct@1100528204 : Codeunit 11125348;
      ShowWorkflowStatus@1100528205 : Boolean;
      Text999@1100528901 : TextConst 'ENU=Process available lines (%1) in filter instead of marked line ?';
      LinkedTradeItem@1100525013 : Record 11020466;
      TableLinkedTradeItemInLicense@1100525006 : Boolean;
      OriginalQuantityEditable@1100528902 : Boolean INDATASET;
      Text002@1100529500 : TextConst 'ENU=Select File..';
      GetTransferableInventory@1000000000 : Decimal;
      RefGetDocumentNo@1100285100 : Code[20];

    PROCEDURE SelectAdviceOrderLine@1100485001(JobRec@1100485001 : Record 11072003;VAR AdviceOrderLineRec@1100485000 : Record 11012055);
    BEGIN
      gAdviceOrderLineRec.COPY(AdviceOrderLineRec);
    END;

    PROCEDURE Budget@8();
    BEGIN
      IF "Record Type" = "Record Type"::Project THEN BEGIN
        IF GETFILTER(Element) = '' THEN
          AdviceCu.SelectProjectBudget("Project No.", '','')
        ELSE
          AdviceCu.SelectProjectBudget("Project No.", '', GETFILTER(Element));
      END;
      IF "Record Type" = "Record Type"::ServOrder THEN
        AdviceCu.SelectServiceBudget("Service Order No.");
    END;

    PROCEDURE PurchaseAction@10();
    BEGIN
      AdviceCu.SelectPurchaseAction("Project No.");
    END;

    PROCEDURE ProcessGenQuote@1210190006();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);  //db, 28-11-16: marking mandatory
      AdviceCu.ProcessGenQuote(AdviceOrderLine);
    END;

    PROCEDURE ProcessPurchase@2();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CheckMarkedLines(AdviceOrderLine);  //C034187 (db, 28-11-16)
      AdviceCu.SetPurchaserFromAdviceOrder(TRUE);
      AdviceCu.ProcessPurchase(AdviceOrderLine, FALSE, FALSE);  //PBRun= false, ItemRun=false
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ProcessInventory@3();
    VAR
      Text001@1100525000 : TextConst 'ENU=Do you want to recalculate the lines first?;NOR=Vil du rekalkulere radene f›rst?;SVE=Vill du omber„kna raderna f”rst?';
      AdviceOrderLine@1100525001 : Record 11012055;
      AdviceOrderLine2@1100525002 : Record 11012055;
      Counter@1100525003 : Integer;
      Text002@1100525004 : TextConst 'ENU=There are %1 inventory entries created in Item Journal.';
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CheckMarkedLines(AdviceOrderLine);  //C034187 (db, 28-11-16)
      CLEAR(AdviceCu); //CALL C019988 newline
      JobsSetup.GET;
      IF (JobsSetup."Inventory Calc. Advice Order" = JobsSetup."Inventory Calc. Advice Order"::Availability) OR
         (JobsSetup."Inventory Calc. Advice Order" = JobsSetup."Inventory Calc. Advice Order"::"Planned-Purchase")
      THEN
        IF CONFIRM(Text001) THEN BEGIN
          AdviceCu.SetSkipMessage;
          IF NOT AdviceOrderLine.ISEMPTY THEN                              //CALL C019988 newline
            AdviceCu.PreSetToTypeAndBatch(AdviceOrderLine, FALSE, TRUE);   //CALL C019988 newline

          IF AdviceOrderLine.FINDSET(TRUE,TRUE) THEN BEGIN
            REPEAT
              AdviceOrderLine2 := AdviceOrderLine;
              AdviceOrderLine2.SETRECFILTER;
              AdviceOrderLine2.GetDefaultTransaction;
              AdviceOrderLine2.MODIFY;
              AdviceOrderLine2.MARK(TRUE);
              Counter += AdviceCu.ProcessInventory(AdviceOrderLine2,FALSE,FALSE); //PBRun= false, ItemRun=false
            UNTIL AdviceOrderLine.NEXT = 0;
            MESSAGE(Text002,Counter);
          END;
        END ELSE
          AdviceCu.ProcessInventory(AdviceOrderLine, FALSE, FALSE)
      ELSE
        AdviceCu.ProcessInventory(AdviceOrderLine, FALSE, FALSE);  //PBRun= false, ItemRun=false
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ProcessRun@1210190003();
    BEGIN
      AdviceCu.ProcessRun(FALSE);  //ItemRun=false
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE CheckMarkedLines@1100529401(VAR AdviceOrderLine@1100529400 : Record 11012055);
    VAR
      ProjSetup@1100528902 : Record 315;
      AdviceOrderLine2@1100528900 : Record 11012055;
      NumLines@1100528901 : Integer;
    BEGIN
      //C034187
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      AdviceOrderLine.SETFILTER("Line No.", '<>%1', "Line No.");  //check if more then 1 line marked
      AdviceOrderLine.MARKEDONLY(TRUE);
      IF NOT AdviceOrderLine.FINDFIRST THEN BEGIN
        //db, 28-11-16: use predefined filter on page, may be extended by user with filter on other tablefields
        //C033866.sn
        ProjSetup.GET;
        AdviceOrderLine2.COPY(Rec);
        AdviceOrderLine2.SETRANGE(Transaction, Transaction);
        AdviceOrderLine2.SETRANGE(Processed, FALSE);
        IF ProjSetup."Release Advice Order Mandatory" THEN
          AdviceOrderLine2.SETRANGE("Process Status", AdviceOrderLine2."Process Status"::Released)
        ELSE
          AdviceOrderLine2.SETFILTER("Process Status", '<%1', AdviceOrderLine2."Process Status"::Cancelled);
        NumLines := AdviceOrderLine2.COUNT;
        IF NumLines > 1 THEN
          IF CONFIRM(Text999, TRUE, NumLines) THEN
            AdviceOrderLine.COPY(Rec);
        //C033866.en
      END;
      AdviceOrderLine.SETRANGE("Line No.");
    END;

    PROCEDURE UpdateReceiptDateByProjectElement@1100528800();
    VAR
      AdviceOrderLine@1100528800 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);  //db, 28-11-16: marking mandatory
      AdviceCu.UpdateReceiptDateFromProjectElement(AdviceOrderLine);
    END;

    PROCEDURE Toggle@11(Phase@11012000 : Integer);
    BEGIN
      IF Phase = 0 THEN
        SETRANGE(Processed);
      IF Phase = 1 THEN
        SETRANGE(Processed, FALSE);
      IF Phase = 2 THEN
        SETRANGE(Processed, TRUE);
      IF Phase = 3 THEN BEGIN
        SETRANGE("Process Status", "Process Status"::Released);
        SETRANGE(Processed, FALSE);
      END ELSE BEGIN
        SETRANGE("Process Status");
      END;
    END;

    PROCEDURE Compress@1();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);  //db, 28-11-16: marking mandatory
      AdviceCu.CompressLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE Split@9();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);  //db, 28-11-16: marking mandatory
      AdviceCu.SplitLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE Divide@1100525011();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);  //db, 28-11-16: marking mandatory
      AdviceCu.SplitLinesPrefLoc(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE InventoryReservation@4(lItem@11012000 : Code[20]);
    BEGIN
      LocInventoryQuan := 0;
      InventoryQuan := 0;
      ReservedQuan := 0;
      InventoryUnit := '';

      IF ItemRec.GET(lItem) THEN BEGIN
        IF "Record Type" = "Record Type"::Project THEN
          ItemRec.SETRANGE("Project Filter","Project No.");
        ItemRec.CALCFIELDS(Inventory, "Qty. on Item Journal Project", "Qty. on Item Journal Service");
        LocInventoryQuan := GetInventory("Location Code",ItemRec,FALSE);
        InventoryQuan := GetInventory('',ItemRec,TRUE);
        ReservedQuan := ItemRec."Qty. on Item Journal Project" + ItemRec."Qty. on Item Journal Service";
        InventoryUnit := ItemRec."Base Unit of Measure";
      END;
    END;

    PROCEDURE EditText@1210190000();
    BEGIN
      AdviceCu.EditText(Rec);
    END;

    PROCEDURE HandleItemLookup@1210190001(ZoomType@1210190000 : Integer);
    BEGIN
      LookupItemData(ZoomType,g_ItemCode,g_Vendor);
      IF ZoomType = -1 THEN
        CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE HandleItemAssistEdit@1100528302(ZoomType@1210190000 : Integer);
    BEGIN
      AssistEditItemData(ZoomType);
      IF ZoomType = -1 THEN
        CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ApproveLines@1210190002();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);  //db, 28-11-16: marking mandatory
      AdviceCu.ApproveLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE CancelLines@1100528500();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      //C040285
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);  //db, 28-11-16: marking mandatory
      AdviceCu.CancelLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ShowPurchRouteRef@1210190004();
    BEGIN
      RouteRefMgtCU.ShowReferenceList("Purchase Route Reference");
    END;

    PROCEDURE UpdatePrice@1210190007();
    BEGIN
      IF "Record Type" = "Record Type"::Project THEN
        AdviceCu.UpdateActualPrice(0, "Project No.");
      IF "Record Type" = "Record Type"::ServOrder THEN
        AdviceCu.UpdateActualPrice(1, "Service Order No.");
      IF "Record Type" = "Record Type"::"G/L Account" THEN  //DP01378
        AdviceCu.UpdateActualPrice(2, "G/L Account");
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE PrintProjectAdviceSelect@1100525010();
    BEGIN
      AdviceRec.COPY(Rec);
      AdviceRec.SETRANGE("Record Type","Record Type"::Project);
      PrintDoc.PrintProjAdvice(AdviceRec);
    END;

    PROCEDURE PrintServiceAdviceSelect@1100485002();
    BEGIN
      AdviceRec.COPY(Rec);
      FILTERGROUP(4);
      IF GETFILTER("Service Order No.") <> '' THEN
        Rec.COPYFILTER("Service Order No.", AdviceRec."Service Order No.");
      IF GETFILTER("Base Service Order No.") <> '' THEN
        Rec.COPYFILTER("Base Service Order No.", AdviceRec."Base Service Order No.");
      FILTERGROUP(0);
      AdviceRec.SETRANGE("Record Type","Record Type"::ServOrder);
      PrintDoc.PrintServAdvice(AdviceRec);
    END;

    PROCEDURE ProcessShippingDetails@1100485003();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);  //db, 28-11-16: marking mandatory
      AdviceCu.ProcessShippingDetails(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE UpdateVendor@1100525001();
    VAR
      ModifyItemVendor@1100485000 : Page 11020420;
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);  //db, 28-11-16: marking mandatory
      ModifyItemVendor.SetAdviceOrderRec(AdviceOrderLine);
      ModifyItemVendor.RUNMODAL;
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE UpdateFromSelectedQuote@1100485004();
    VAR
      AdviceOrderLine@1100529400 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);  //db, 28-11-16: marking mandatory
      AdviceCu.UpdateQuotePrice(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE SelectRecipe@1100485005();
    BEGIN
      AdviceCu.SelectBaseRecipe(Rec); //DP00381
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE DrillDownInventory@1100525002(ShowLocations@1100525003 : 'All,PrefLocations,Location');
    BEGIN
      AdviceCu.DrillDownInventory(Rec, ShowLocations);
    END;

    PROCEDURE UpdateLines@1100525003();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);  //db, 28-11-16: marking mandatory
      AdviceCu.UpdateLines(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE SetContractFilter@1100525008(ContractFilter@1100525000 : ' ,No Contract,Contract,Contract with Discount Agreement,General Blanket Order,Project Blanket Order,Service Blanket Order');
    BEGIN
      CASE ContractFilter OF
        ContractFilter::" ":
          SETRANGE("Contract Type");
        ContractFilter::"No Contract":
          SETRANGE("Contract Type","Contract Type"::"No Contract");
        ContractFilter::Contract:
          SETRANGE("Contract Type","Contract Type"::Contract);
        ContractFilter::"Contract with Discount Agreement":
          SETRANGE("Contract Type","Contract Type"::"Contract with Discount Terms");
        ContractFilter::"General Blanket Order":
          SETRANGE("Contract Type","Contract Type"::"General Blanket Order");
        ContractFilter::"Project Blanket Order":
          SETRANGE("Contract Type","Contract Type"::"Project Blanket Order");
        ContractFilter::"Service Blanket Order":
          SETRANGE("Contract Type","Contract Type"::"Service Blanket Order");
      END;
      CurrPage.UPDATE(TRUE);
    END;

    PROCEDURE ShowItemAvailbyPeriod@1100525006();
    VAR
      Item@1100525000 : Record 27;
    BEGIN
      IF "Item No." = '' THEN EXIT;

      Item.GET("Item No.");
      PAGE.RUN(PAGE::"Item Availability by Periods",Item);
    END;

    PROCEDURE GenerateICKOrder@1100525009();
    VAR
      AdviceOrderLine@1100525500 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);  //db, 28-11-16: marking mandatory
      AdviceCu.GenerateICKOrder(AdviceOrderLine);
    END;

    LOCAL PROCEDURE UnitofMeasureOnAfterValidate@19002161();
    BEGIN
      IF "Quantity (Processed)" = 0 THEN
        IF "Quantity (Budget)" <> 0 THEN
          "Quantity (Budget)" := "Quantity (Advice)";
    END;

    LOCAL PROCEDURE TransactionOnAfterValidate@19077289();
    VAR
      InvQuan@1100525001 : Decimal;
    BEGIN
      InventoryReservation("Item No.");
      IF InventoryQuan < LocInventoryQuan THEN
        InvQuan := LocInventoryQuan
      ELSE
        InvQuan := InventoryQuan;

      IF InvQuan < "Quantity (Advice)" THEN
        IF Transaction = Transaction::Inventory THEN
          MESSAGE(Text000);
    END;

    LOCAL PROCEDURE LocationOnAfterValidate@19026812();
    BEGIN
      InventoryReservation("Item No.");
    END;

    LOCAL PROCEDURE GetAddCostServiceEditable@19077114(FieldEditable@1100528400 : Boolean) AddCostServiceEditable : Boolean;
    VAR
      ServiceOrder@1100525000 : Record 11012823;
    BEGIN
      AddCostServiceEditable := FieldEditable;

      IF AddCostServiceEditable THEN
       EXIT;

      IF NOT ServiceOrder.GET("Service Order No.") THEN
        ServiceOrder.INIT;

      IF ServiceOrder."Service Contract No." <> '' THEN
        AddCostServiceEditable :=
          ((ServiceOrder."Source Type" <> ServiceOrder."Source Type"::Direct) OR
          (ServiceOrder."Service Contract No." = ''));
    END;

    PROCEDURE SetEditable@1100525005();
    VAR
      JobsSetup@1100528400 : Record 315;
      ServiceSetup@1100528401 : Record 11012800;
    BEGIN
      IF JobsSetup.GET THEN;
      IF ServiceSetup.GET THEN;
      FieldEditable := AdviceOrderFieldsEditable;
      ProcessStatusEditable := AdviceOrderProcessStatusEditable;
      AccountEditable := FieldEditable AND ("Record Type" = "Record Type"::"G/L Account");  //DP01378
      AdditionalCostServiceEditable := GetAddCostServiceEditable(FieldEditable);
      ElementEditable := FieldEditable AND ("Record Type" = "Record Type"::Project);
      ExtensionContractEditable := FieldEditable AND ("Record Type" = "Record Type"::Project);
      QuantityAdviceEditable := FieldEditable AND ("Process Status" < "Process Status"::Processed);
      CostTypeEditable := FieldEditable AND ("Item No." + "Basic Item" + "Trade Item" = '');
      UnitOfMeasureEditable := FieldEditable AND ("Quantity (Processed)" = 0);
      PriceEditable := FieldEditable AND ("Quantity (Budget)" = 0);
      VendorPriceEditable := FieldEditable AND (VendorCurrency <> '');
      LocationCodeEditable := FieldEditable AND FieldIsEditable(FIELDNO("Location Code"));
      OriginalQuantityEditable := FieldEditable AND (("Part of Line" <> 0) OR ("Attached to Line No." <> 0));  //DP02339
      CostComponentEditable :=
        FieldEditable AND
        ((("Project No." <> '') AND JobsSetup."Cost Component Editable") OR
        (("Service Order No." <> '') AND ServiceSetup."Cost Component Editable") OR
        (("Project No." = '') AND ("Service Order No." = '')));

      SupplyingCompInvEditable :=
        FieldEditable AND
        ("Cost Type" = "Cost Type"::Material) AND
        ("Item No." <> '') AND
        (Transaction = Transaction::Inventory) AND
        ("Process Status" < "Process Status"::Processed);
    END;

    PROCEDURE ExplodeBOM@1210190010();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Advice Order Line-Explode BOM",Rec);
    END;

    PROCEDURE PageDivideAgreedAmount@1100530000();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      Rec.DivideAgreedAmount(AdviceOrderLine);
    END;

    PROCEDURE ShowItemInventoryByCompany@1100528301();
    VAR
      AdviceOrderMgt@1100528300 : Codeunit 11012041;
    BEGIN
      AdviceOrderMgt.RunItemInventoryByCompany("Item No.");
    END;

    PROCEDURE ShowDocuments@1210190005();
    VAR
      RecRef@1210190000 : RecordRef;
      DocumentFilters@1210190001 : Codeunit 11012432;
    BEGIN
      TESTFIELD("Line No.");
      RecRef.GETTABLE(Rec);
      DocumentFilters.CreateTempFilterAndExecute1(RecRef, "Global Dimension 1 Code", FALSE, TRUE);
    END;

    PROCEDURE ModifyRun@1100409000();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      AdviceOrderLine.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(AdviceOrderLine);
      IF AdviceOrderLine.ISEMPTY THEN BEGIN //db, 28-11-16
        ERROR(Text001);
      END;
      AdviceCu.ModifyRun(AdviceOrderLine);
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE CheckInventory@1100528900();
    VAR
      InvQuan@1100528900 : Decimal;
    BEGIN
      //db, 13-02-17: replace several generated functions for OnAfterValidate-section
      InventoryReservation("Item No.");
      IF InventoryQuan < LocInventoryQuan THEN
        InvQuan := LocInventoryQuan
      ELSE
        InvQuan := InventoryQuan;

      IF InvQuan < "Quantity (Advice)" THEN
        IF Transaction = Transaction::Inventory THEN
          MESSAGE(Text000);
    END;

    LOCAL PROCEDURE SetControlAppearance@5();
    VAR
      ApprovalsMgmt@1002 : Codeunit 1535;
    BEGIN
      OpenApprovalEntriesExistForCurrUser := ApprovalsMgmt.HasOpenApprovalEntriesForCurrentUser(RECORDID);
      OpenApprovalEntriesExist := ApprovalsMgmt.HasOpenApprovalEntries(RECORDID);
      CanCancelApprovalForRecord := ApprovalsMgmt.CanCancelApprovalForRecord(RECORDID);
      ShowWorkflowStatus := CurrPage.WorkflowStatus.PAGE.SetFilterOnWorkflowRecord(RECORDID);
    END;

    LOCAL PROCEDURE UpdatePriceAgreement@1100528501();
    BEGIN
      //C047131
      IF PurchasesPayablesSetup."Price Agreement" <> PurchasesPayablesSetup."Price Agreement"::" " THEN
        VALIDATE("Price Agreement", TRUE);

      CurrPage.UPDATE;  //refresh VendorPrice
    END;

    LOCAL PROCEDURE "***4PSSE***"@1000000006();
    BEGIN
    END;

    PROCEDURE ProcessTransfer@111280000();
    VAR
      AdviceOrderLine@1100525000 : Record 11012055;
    BEGIN
      // ORANGO.LP 4PSSE CER.GAP 13
      AdviceOrderLine.COPY(Rec);
      AdviceCu.ProcessTransferOrder(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE ProcessAssembly@111280001();
    VAR
      AdviceOrderLine@111280000 : Record 11012055;
    BEGIN
      // ORANGO.LP 4PSSE CER.GAP 13
      AdviceOrderLine.COPY(Rec);
      AdviceCu.ProcessAssemblyOrder(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE ProcessPick@111280002();
    VAR
      AdviceOrderLine@111280000 : Record 11012055;
    BEGIN
      // ORANGO.LP 4PSSE CER.GAP 13
      AdviceOrderLine.COPY(Rec);
      AdviceCu.ProcessPick(AdviceOrderLine);
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE GetDocumentNo@111280003() : Text;
    VAR
      AdviceOrderLinkedDocument@111280000 : Record 11128128;
    BEGIN
      // ORANGO.LP 4PSSE CER.GAP 13
      EXIT(AdviceOrderLinkedDocument.GetDocumentNoOrCount(Rec));
    END;

    BEGIN
    {
      CC: Form11012102 EN Form11012103
      190827 ORANGO.LP GAP 14 New field "System No. Assembly Order"
    }
    END.
  }
}

