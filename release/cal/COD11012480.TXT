OBJECT Codeunit 11012480 INSBOU Interface
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LocalName@1100528301 : TextConst 'DEU=".//*[local-name()=""%1""]";ENU=".//*[local-name()=""%1""]";NLD=".//*[local-name()=""%1""]"';
      ORDRSP@1100528304 : TextConst 'DEU=ORDRSP;ENU=ORDRSP;NLD=ORDRSP';
      DESADV@1100528305 : TextConst 'DEU=DESADV;ENU=DESADV;NLD=DESADV';
      INVOIC@1100528306 : TextConst 'DEU=INVOIC;ENU=INVOIC;NLD=INVOIC';
      PRICAT@1100528307 : TextConst 'DEU=PRICAT;ENU=PRICAT;NLD=PRICAT';
      Text000@1100525000 : TextConst 'DEU=%1 nicht gefunden fÅr %2 %3.;ENU=%1 not found for %2 %3.;NLD=%1 niet gevonden voor %2 %3.';
      Text001@1100525001 : TextConst 'DEU=Fehler aufgetreten bei Kommunikation mit INSBOU-Backend.\\ Methode: %1\ Fehlercode: %2\ Fehlerbericht:\ %3;ENU=Error occurred in communication with INSBOU Backend.\\ Method: %1\ Error Code: %2\ Error Message:\ %3;NLD=Er is een fout opgetreden bij de communicatie met INSBOU backend.\\ Methode: %1\Foutcode: %2\ Foutboodschap:\ %3';
      ConsumedWebService@1100525016 : Record 11229797;
      ConsumedWebServiceLine@1100525015 : Record 11229798;
      DocumentMgtSetup@1100525004 : Record 11071831;
      FileSystemOnPremiseSetup@1100528400 : Record 11125739;
      PurchaseHeader@1100525021 : Record 38;
      Vendor@1100525022 : Record 23;
      VendorINSBOULogin@1100525020 : Record 11012132;
      CompanyInformation@1100525023 : Record 79;
      XMLDOMManagement4PS@1100525013 : Codeunit 11020220;
      MaintInstrMessageNo@1100528800 : Code[17];
      BuyerGLN@1100528802 : Code[13];
      VendorNo@1100525024 : Code[20];
      OrderResponseNumber@1100525025 : Code[17];
      InvoiceNumber@1100525026 : Code[17];
      DespatchAdviceNumber@1100528308 : Code[17];
      PriceCataloqueNumber@1100528309 : Code[17];
      ApplicationId@1100528803 : Text[50];
      RequestXML@1100525009 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RequestNamespaceManager@1100525008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      ResponseXML@1100525007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ResponseNamespaceManager@1100525006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      RootNode@1100525005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FoundNode@1100525003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Text002@1100525002 : TextConst 'DEU=%1 %2 gesendet an %3 %4.;ENU=%1 %2 sent to %3 %4.;NLD=%1 %2 verzonden naar %3 %4.';
      Text003@1100525017 : TextConst 'DEU=%1 %2 existiert nicht.;ENU=%1 ''%2'' does not exist.;NLD=%1 ''%2'' bestaan niet.;NOR=%1 ''%2'' finnes ikke.;SVE=%1 %2 finns inte.';
      Text004@1100525011 : TextConst 'DEU=Feld %1 ist leer. Mîchten Sie fortfahren?;ENU=Field %1 is empty.Do you want to continue?;NLD=Veld %1 is leeg. Wilt u doorgaan?;NOR=Feltet %1 er tomt. Vil du fortsette?;SVE=FÑltet %1 Ñr tomt. Vill du fortsÑtta?';
      Text005@1100525014 : TextConst 'DEU=Verarbeitung abgebrochen;ENU=Process aborted.;NLD=Proces afgebroken.;NOR=Prosessen er avbrutt;SVE=Processen avbrîts.';
      Text006@1100525018 : TextConst 'DEU=Feld %1 %2 hat keinen gÅltigen Wert nach dem INSBOU-Standard (aktueller Wert: ''%3'').;ENU=Field %1 %2 does not have a valid value conform the INSBOU standard (current value: ''%3'').;NLD=Veld %1 %2 heeft geen correcte waarde volgens de INSBOU standaard (huidige waarde: ''%3'').';
      Text007@1100525019 : TextConst 'DEU=Feld %1 %2 ist zu lang (aktuelle LÑnge: %3, sollte %4 sein mÅssen);ENU=Field %1 %2 is too long (current length: %3 and should be %4).;NLD=Veld %1 %2 is te lang (huidige lengte: %3 en zou %4 moeten zijn).;NOR=Feltet %1 %2 er for langt (aktuell lengde: %3 og skal vëre %4).;SVE=FÑltet %1 %2 Ñr fîr lÜngt (aktuell lÑngd: %3 och ska vara %4).';
      Text008@1100528302 : TextConst 'DEU=%1 %2 wird nicht unterstÅtzt fÅr das Versenden von INSBOU %3.;ENU=%1 %2 is not supported for sending a INSBOU %3.;NLD=%1 %2 wordt niet ondersteund voor het sturen van de INSBOU %3.';
      Text009@1100528303 : TextConst 'DEU=INSBOU-Nachricht %1 %2 %3 wird nicht unterstÅtzt.;ENU=INSBOU Message %1 %2 %3 is not supported.;NLD=INSBOU bericht %1 %2 %3 wordt niet ondersteund.';
      INSBOUVERNOTSUPPORTED@1100528801 : TextConst 'DEU=INSBOU-Wartungsanleitungsnachricht Version %1 wird nicht unterstÅtzt.;ENU=INSBOU Maintenance Instruction Message Version %1 is not support.;NLD=INSBOU onderhoudsopdrachtbericht versie %1 wordt niet ondersteund.';

    PROCEDURE GetAvailableMessages@1100528300(VendorNo@1100528300 : Code[20]);
    VAR
      INSBOUSetup@1100525000 : Record 11012348;
      ConsumedWebServiceMgt@1100528301 : Codeunit 11229310;
    BEGIN
      INSBOUSetup.GET;
      GetVendorINSBOULogin(VendorINSBOULogin, VendorNo, 0, '', '');
      CheckVendorINSBOU(VendorINSBOULogin);
      SetGlobalVars(VendorINSBOULogin."Consumed Web Service Code", 10);

      ConsumedWebServiceMgt.CreateRequest(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, RequestNamespaceManager);
      XMLDOMManagement4PS.FindNode(RequestXML, STRSUBSTNO(LocalName, ConsumedWebServiceLine."Request Root Tag"), RootNode);
      XMLDOMManagement4PS.AddElement(RootNode, STRSUBSTNO('%1:MsgType', ConsumedWebServiceLine."Prefix Method Namespace"),
        'Set MsgType here', ConsumedWebServiceLine."Method Namespace", FoundNode);

      IF (INSBOUSetup."ORDRSP Messages") THEN SendGetAvailableMessages(VendorNo, ORDRSP);
      IF (INSBOUSetup."INVOIC Messages") THEN SendGetAvailableMessages(VendorNo, INVOIC);
      IF (INSBOUSetup."DESADV Messages") THEN SendGetAvailableMessages(VendorNo, DESADV);
      IF (INSBOUSetup."PRICAT Messages") THEN SendGetAvailableMessages(VendorNo, PRICAT);
    END;

    PROCEDURE GetMessage@1100528301(VAR INSBOUAvailableMessage@1100528300 : Record 11020432);
    VAR
      ConsumedWebServiceMgt@1100528301 : Codeunit 11229310;
    BEGIN
      INSBOUAvailableMessage.SETRANGE(Status, INSBOUAvailableMessage.Status::Received);
      IF (NOT INSBOUAvailableMessage.FINDSET(TRUE)) THEN
        EXIT;

      REPEAT
        CASE INSBOUAvailableMessage.Type OF
          ORDRSP: GetVendorINSBOULogin(VendorINSBOULogin, INSBOUAvailableMessage."Vendor No.", 2, '', '');
          DESADV: GetVendorINSBOULogin(VendorINSBOULogin, INSBOUAvailableMessage."Vendor No.", 3, '', '');
          PRICAT: GetVendorINSBOULogin(VendorINSBOULogin, INSBOUAvailableMessage."Vendor No.", 7, '', '');
          INVOIC: GetVendorINSBOULogin(VendorINSBOULogin, INSBOUAvailableMessage."Vendor No.", 13, '', '');
          ELSE
            ERROR(Text009, INSBOUAvailableMessage.Type, INSBOUAvailableMessage.Format, INSBOUAvailableMessage.Version);
        END;
        CheckVendorINSBOU(VendorINSBOULogin);
        SetGlobalVars(VendorINSBOULogin."Consumed Web Service Code", 20);

        ConsumedWebServiceMgt.CreateRequest(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, RequestNamespaceManager);
        XMLDOMManagement4PS.FindNodeNs(RequestXML, STRSUBSTNO('.//%1:%2', ConsumedWebServiceLine."Prefix Method Namespace",
          ConsumedWebServiceLine."Request Root Tag"), RootNode, RequestNamespaceManager);

        XMLDOMManagement4PS.AddElement(RootNode, STRSUBSTNO('%1:MsgId', ConsumedWebServiceLine."Prefix Method Namespace"),
          INSBOUAvailableMessage.ID, ConsumedWebServiceLine."Method Namespace", FoundNode);
        XMLDOMManagement4PS.AddElement(RootNode, STRSUBSTNO('%1:MsgFormat', ConsumedWebServiceLine."Prefix Method Namespace"),
          INSBOUAvailableMessage.Format, ConsumedWebServiceLine."Method Namespace", FoundNode);
        XMLDOMManagement4PS.AddElement(RootNode, STRSUBSTNO('%1:MsgVersion', ConsumedWebServiceLine."Prefix Method Namespace"),
          INSBOUAvailableMessage.Version, ConsumedWebServiceLine."Method Namespace", FoundNode);

        ConsumedWebServiceMgt.SendCWS(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, ResponseXML,
          ResponseNamespaceManager, SetMessageId);
        CheckResponseSoapFault;
        ProcessGetMessage(FALSE, '');

        INSBOUAvailableMessage.Status := INSBOUAvailableMessage.Status::Processed;
        INSBOUAvailableMessage.MODIFY(TRUE);
        COMMIT;
      UNTIL (INSBOUAvailableMessage.NEXT = 0);
    END;

    PROCEDURE DeleteMessage@1100528303(VAR INSBOUAvailableMessage@1100528300 : Record 11020432);
    VAR
      TempINSBOUAvailableMessage@1100528308 : TEMPORARY Record 11020432;
      ToggleCode@1100528301 : Code[20];
    BEGIN
      INSBOUAvailableMessage.SETRANGE(Status, INSBOUAvailableMessage.Status::Processed);
      IF (NOT INSBOUAvailableMessage.FINDSET(TRUE, TRUE)) THEN
        EXIT;

      ToggleCode := GetToggleCodeDeleteMessage(INSBOUAvailableMessage);
      REPEAT
        IF (ToggleCode <> GetToggleCodeDeleteMessage(INSBOUAvailableMessage)) THEN BEGIN
          SendDeleteMessage(TempINSBOUAvailableMessage);
          TempINSBOUAvailableMessage.DELETEALL;
          COMMIT;
        END;
        TempINSBOUAvailableMessage.COPY(INSBOUAvailableMessage);
        TempINSBOUAvailableMessage.INSERT;
        ToggleCode := GetToggleCodeDeleteMessage(INSBOUAvailableMessage);
        INSBOUAvailableMessage.DELETE(TRUE);
      UNTIL (INSBOUAvailableMessage.NEXT = 0);
      SendDeleteMessage(TempINSBOUAvailableMessage);
      COMMIT;
    END;

    PROCEDURE SendPuchaseOder@1100525000(OrderType@1100525009 : Option;OrderNo@1100525000 : Code[20]);
    VAR
      PurchaseHeaderExtension@1100525002 : Record 11020398;
      TempBlob@1100525004 : Record 99008535;
      FileManagement@1100525008 : Codeunit 419;
      ConsumedWebServiceMgt@1100525010 : Codeunit 11229310;
      INSBOUOrderWS@1100528300 : XMLport 11072003;
      CurrDateTimeTxt@1100525001 : Text;
      ClientTempFileName@1100528301 : Text;
      OutputFileName@1100525006 : Text[1024];
      Pos@1100528302 : Integer;
      Ostream@1100525005 : OutStream;
      PurchaseOrderXML@1100525011 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      PurchaseOrderRootNode@1100525013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      PurchaseHeader.GET(OrderType, OrderNo);
      Vendor.GET(PurchaseHeader."Buy-from Vendor No.");
      GetVendorINSBOULogin(VendorINSBOULogin, PurchaseHeader."Buy-from Vendor No.", 1,
        PurchaseHeader."Shortcut Dimension 1 Code", PurchaseHeader."Job No.");
      CheckVendorINSBOU(VendorINSBOULogin);
      SetGlobalVars(VendorINSBOULogin."Consumed Web Service Code", 40);

      //Do all Purchase Order checks
      CheckPurchaseHeader(PurchaseHeader);
      CheckPurchaseLines(OrderType, OrderNo);

      //Create PurchaseOrder XML
      TempBlob.Blob.CREATEOUTSTREAM(Ostream);
      INSBOUOrderWS.SetVars(OrderType, OrderNo);
      INSBOUOrderWS.SETDESTINATION(Ostream);
      INSBOUOrderWS.EXPORT;
      ClientTempFileName := FileManagement.ClientTempFileName('xml');
      FileManagement.BLOBExport4PS(TempBlob, ClientTempFileName, FALSE, TRUE);
      IF (NOT ISNULL(PurchaseOrderXML)) THEN
        CLEAR(PurchaseOrderXML);
      PurchaseOrderXML := PurchaseOrderXML.XmlDocument;
      XMLDOMManagement4PS.LoadXMLFromClientFile(PurchaseOrderXML, ClientTempFileName, TRUE);
      //Add Mandatory Namespaces
      PurchaseOrderXML.DocumentElement.SetAttribute('xmlns:xs', 'http://www.w3.org/2001/XMLSchema');
      PurchaseOrderXML.DocumentElement.SetAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
      //PurchaseOrderXML.DocumentElement.SetAttribute('xsi:noNamespaceSchemaLocation', 'Order_insbou003.xsd');
      Pos := STRPOS(PurchaseOrderXML.InnerXml, '<OrderType>');
      PurchaseOrderXML.LoadXml(COPYSTR(PurchaseOrderXML.OuterXml, 1, Pos-2) + ' xsi:noNamespaceSchemaLocation="Order_insbou003.xsd"' +
        COPYSTR(PurchaseOrderXML.OuterXml, Pos-1));

      //Clean PurchaseOrder XML
      XMLDOMManagement4PS.FindNode(PurchaseOrderXML, STRSUBSTNO(LocalName, 'Order'), PurchaseOrderRootNode);
      XMLDOMManagement4PS.RemoveEmptyTags(PurchaseOrderRootNode);

      //Create SOAP request
      ConsumedWebServiceMgt.CreateRequest(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, RequestNamespaceManager);
      FillSOAPHeaderWithActualData(RequestXML,STRSUBSTNO('%1',VendorINSBOULogin."MessageService Version"));

      CASE VendorINSBOULogin."Message Version" OF
        VendorINSBOULogin."Message Version"::"003":
          CreatePostMessageRequest('ORDERS', '003',VendorINSBOULogin."MessageService Version");
        ELSE
          ERROR(Text008, VendorINSBOULogin.FIELDCAPTION("Message Version"), VendorINSBOULogin."Message Version", PurchaseHeader.TABLECAPTION);
      END;
      //Add CDATA
      XMLDOMManagement4PS.FindNode(RequestXML, STRSUBSTNO(LocalName, 'MsgContent'), FoundNode);
      FoundNode.InnerXml := STRSUBSTNO('<![CDATA[%1]]>', PurchaseOrderXML.OuterXml);
      //ERROR('RequestXML: \%1', RequestXML.OuterXml); //remove kz

      //Send SOAP Request
      ConsumedWebServiceMgt.SendCWS(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, ResponseXML,
        ResponseNamespaceManager, SetMessageId);
      CheckResponseSoapFault;

      //Store PurchaseOrder XML as document to Purchase Order
      CurrDateTimeTxt := FORMAT(CURRENTDATETIME, 0, 9);
      CurrDateTimeTxt := CONVERTSTR(CurrDateTimeTxt, ':', '-');
      CurrDateTimeTxt := DELCHR(CurrDateTimeTxt, '<=>', 'Z');
      OutputFileName := STRSUBSTNO('%1INSBOU-%2-%3-%4-%5.xml', FileSystemOnPremiseSetup."Default Source Dir.Ext.Doc", PurchaseHeader.TABLECAPTION,
        PurchaseHeader."Document Type", PurchaseHeader."No.", CurrDateTimeTxt);
      XMLDOMManagement4PS.SaveXMLToClientFile(PurchaseOrderXML, OutputFileName);
      AddDocumentToPurchaseHeader(PurchaseHeader, OutputFileName);

      IF PurchaseHeaderExtension.GET(OrderType, OrderNo) THEN;
      PurchaseHeaderExtension."GS1 Sent by" := USERID;
      PurchaseHeaderExtension."GS1 Sent on" := TODAY;
      PurchaseHeaderExtension."Processing Type" := PurchaseHeaderExtension."Processing Type"::INSBOU;
      PurchaseHeaderExtension.UpdatePurchHeadExtension(OrderType, OrderNo);

      MESSAGE(Text002, PurchaseHeader."Document Type", PurchaseHeader."No.", PurchaseHeader.FIELDCAPTION("Buy-from Vendor No."),
        PurchaseHeader."Buy-from Vendor No.");
      COMMIT;

      //Process Order Response (ORDRSP)
      ProcessGetMessage(TRUE, PurchaseHeader."Buy-from Vendor No.");
    END;

    PROCEDURE SendSalesInvoice@1100528801(SalesInvoiceHeader@1100528800 : Record 112);
    VAR
      CustomerINSBOULogin@1100528801 : Record 11229341;
      TempBlob@1100525004 : Record 99008535;
      FileManagement@1100525008 : Codeunit 419;
      ConsumedWebServiceMgt@1100525010 : Codeunit 11229310;
      INSBOU003SalesInvoiceWS@1100528300 : XMLport 11072011;
      CurrDateTimeTxt@1100525001 : Text;
      ClientTempFileName@1100528301 : Text;
      OutputFileName@1100525006 : Text[1024];
      Ostream@1100525005 : OutStream;
      SalesInvoiceXML@1100525011 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      SalesInvoiceRootNode@1100525013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlDeclareNode@1100528802 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      INSBOU004SalesInvoiceWS@1100529900 : XMLport 11072014;
      SALES005SalesInvoice@1100529901 : XMLport 11072017;
    BEGIN
      CustomerINSBOULogin.GET(SalesInvoiceHeader."Bill-to Customer No.", 1);
      CustomerINSBOULogin.TESTFIELD(URL);
      CustomerINSBOULogin.TESTFIELD("User Name");
      CustomerINSBOULogin.TESTFIELD(Password);
      SetGlobalVars(CustomerINSBOULogin."Consumed Web Service Code", 40);

      //Create SalesInvoiceHeader XML
      TempBlob.Blob.CREATEOUTSTREAM(Ostream);

      CASE CustomerINSBOULogin."Message Version" OF
        CustomerINSBOULogin."Message Version"::"003":
          BEGIN
            INSBOU003SalesInvoiceWS.SetVars(SalesInvoiceHeader."No.");
            INSBOU003SalesInvoiceWS.SETDESTINATION(Ostream);
            INSBOU003SalesInvoiceWS.EXPORT;
          END;
        CustomerINSBOULogin."Message Version"::"004":
          BEGIN
            INSBOU004SalesInvoiceWS.SetVars(SalesInvoiceHeader."No.");
            INSBOU004SalesInvoiceWS.SETDESTINATION(Ostream);
            INSBOU004SalesInvoiceWS.EXPORT;
          END;
        CustomerINSBOULogin."Message Version"::"005":
          BEGIN
            SALES005SalesInvoice.SetVars(SalesInvoiceHeader."No.");
            SALES005SalesInvoice.SETDESTINATION(Ostream);
            SALES005SalesInvoice.EXPORT;
          END;
        ELSE
          ERROR(Text008, CustomerINSBOULogin.FIELDCAPTION("Message Version"), STRSUBSTNO('%1', CustomerINSBOULogin."Message Version"), PurchaseHeader.TABLECAPTION);
      END;

      ClientTempFileName := FileManagement.ClientTempFileName('xml');
      FileManagement.BLOBExport4PS(TempBlob, ClientTempFileName, FALSE, TRUE);
      IF (NOT ISNULL(SalesInvoiceXML)) THEN
        CLEAR(SalesInvoiceXML);
      SalesInvoiceXML := SalesInvoiceXML.XmlDocument;
      XMLDOMManagement4PS.LoadXMLFromClientFile(SalesInvoiceXML, ClientTempFileName, TRUE);
      //Add Mandatory Namespaces
      SalesInvoiceXML.DocumentElement.SetAttribute('xmlns:xs', 'http://www.w3.org/2001/XMLSchema');
      SalesInvoiceXML.DocumentElement.SetAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
      IF CustomerINSBOULogin."Message Version" = CustomerINSBOULogin."Message Version"::"004" THEN
        SalesInvoiceXML.DocumentElement.SetAttribute('xmlns', 'http://www.gs1.nl/factuur/insbou/004');
      IF CustomerINSBOULogin."Message Version" = CustomerINSBOULogin."Message Version"::"005" THEN
        SalesInvoiceXML.DocumentElement.SetAttribute('xmlns', 'http://www.ketenstandaard.nl/factuur/SALES/005');

      //Clean SalesInvoice XML
      XMLDOMManagement4PS.FindNode(SalesInvoiceXML, STRSUBSTNO(LocalName, 'Invoice'), SalesInvoiceRootNode);
      XMLDOMManagement4PS.RemoveEmptyTags(SalesInvoiceRootNode);

      //remove XML declaration generated by XMLport
      XmlDeclareNode := SalesInvoiceXML.FirstChild;
      SalesInvoiceXML.RemoveChild(XmlDeclareNode);

      //Create SOAP request
      ConsumedWebServiceMgt.CreateRequest(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, RequestNamespaceManager);
      FillSOAPHeaderWithActualData(RequestXML,STRSUBSTNO('%1',CustomerINSBOULogin."MessageService Version"));

      CreatePostMessageRequest('INVOIC', STRSUBSTNO('%1',CustomerINSBOULogin."Message Version"), CustomerINSBOULogin."MessageService Version");

      //Add CDATA
      XMLDOMManagement4PS.FindNode(RequestXML, STRSUBSTNO(LocalName, 'MsgContent'), FoundNode);
      FoundNode.InnerXml := STRSUBSTNO('<![CDATA[%1]]>', SalesInvoiceXML.OuterXml);

      //Send SOAP Request
      ConsumedWebServiceMgt.SendCWS(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, ResponseXML,
        ResponseNamespaceManager, SetMessageId);
      CheckResponseSoapFault;

      //Store SalesInvoice XML as document to Purchase Order
      CurrDateTimeTxt := FORMAT(CURRENTDATETIME, 0, 9);
      CurrDateTimeTxt := CONVERTSTR(CurrDateTimeTxt, ':', '-');
      CurrDateTimeTxt := DELCHR(CurrDateTimeTxt, '<=>', 'Z');
      OutputFileName := STRSUBSTNO('%1INSBOU-%2-%3-%4.xml', FileSystemOnPremiseSetup."Default Source Dir.Ext.Doc", SalesInvoiceHeader.TABLECAPTION,
        SalesInvoiceHeader."No.", CurrDateTimeTxt);
      XMLDOMManagement4PS.SaveXMLToClientFile(SalesInvoiceXML, OutputFileName);
      AddDocumentToSalesInvoiceHeader(SalesInvoiceHeader, OutputFileName);

      MESSAGE(Text002, SalesInvoiceHeader.TABLECAPTION, SalesInvoiceHeader."No.", SalesInvoiceHeader.FIELDCAPTION("Bill-to Customer No."),
        SalesInvoiceHeader."Bill-to Customer No.");
      COMMIT;
    END;

    PROCEDURE SendMaintenanceStatus@1100528800(INSBOUMessageQueueEntryNo@1100528824 : Integer);
    VAR
      ServiceOrder@1100528825 : Record 11012823;
      INSBOUMessageQueue@1100528800 : Record 11072353;
      CompanyInformation@1100528822 : Record 79;
      Customer@1100528821 : Record 18;
      CustomerWebserviceURL@1100528827 : Record 11229341;
      ConsumedWebServiceMgt@1100528818 : Codeunit 11229310;
      INSBOUMaintStatusMgt@1100528826 : Codeunit 11072102;
      MaintStatusXML@1100528814 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      MaintenanceStatusRootNode@1100528813 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      BuyerNode@1100528812 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ContractorNode@1100528811 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FoundNode@1100528810 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      InstructionDataNode@1100528809 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      InstructionLineNode@1100528807 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlDeclareNode@1100528806 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CustWebServiceUrlType@1100528801 : ' ,Invoice (INSBOU),Maintenance Status (INSBOU)';
      MessageType@1100525000 : Text;
      DeliveryTimeFrameNode@1100525004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      INSBOUMessageQueue.GET(INSBOUMessageQueueEntryNo);
      INSBOUMessageQueue.TESTFIELD("Document Type", INSBOUMessageQueue."Document Type"::ServiceOrder);
      ServiceOrder.GET(INSBOUMessageQueue."Document No.");

      CustomerWebserviceURL.GET(ServiceOrder."Customer No.", CustWebServiceUrlType::"Maintenance Status (INSBOU)");
      CustomerWebserviceURL.TESTFIELD(URL);
      ConsumedWebService.GET(CustomerWebserviceURL."Consumed Web Service Code");
      ConsumedWebServiceLine.GET(ConsumedWebService.Code, 40);

      CASE CustomerWebserviceURL."Message Version" OF
        CustomerWebserviceURL."Message Version"::"005Beta": BEGIN
          XMLDOMManagement4PS.LoadXMLFromXMLPort(MaintStatusXML, XMLPORT::"INSBOU Maintenance Status 005");
          MaintStatusXML.DocumentElement.SetAttribute('xmlns', 'http://www.ketenstandaard.nl/onderhoudstatus/SALES/005');
          MaintStatusXML.DocumentElement.SetAttribute('xmlns:xs', 'http://www.w3.org/2001/XMLSchema');
          MaintStatusXML.DocumentElement.SetAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
          MaintStatusXML.DocumentElement.SetAttribute('xsi:schemaLocation', 'http://www.ketenstandaard.nl/onderhoudstatus/SALES/005 Onderhoudstatus_SALES005Beta.xsd');
        END;
        CustomerWebserviceURL."Message Version"::"005": BEGIN
          XMLDOMManagement4PS.LoadXMLFromXMLPort(MaintStatusXML, XMLPORT::"SALES005 Maintenance Status");
          MaintStatusXML.DocumentElement.SetAttribute('xmlns', 'http://www.ketenstandaard.nl/onderhoudsstatus/SALES/005');
          MaintStatusXML.DocumentElement.SetAttribute('xmlns:xs', 'http://www.w3.org/2001/XMLSchema');
          MaintStatusXML.DocumentElement.SetAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
        END;
      END;

      XMLDOMManagement4PS.FindNode(MaintStatusXML, STRSUBSTNO(LocalName, 'MaintenanceStatus'), MaintenanceStatusRootNode);
      XMLDOMManagement4PS.FindNode(MaintStatusXML, STRSUBSTNO(LocalName, 'InstructionData'), InstructionDataNode);
      XMLDOMManagement4PS.FindNode(MaintenanceStatusRootNode, STRSUBSTNO(LocalName, 'InstructionLine'), InstructionLineNode);
      XMLDOMManagement4PS.FindNode(MaintenanceStatusRootNode, STRSUBSTNO(LocalName, 'Buyer'), BuyerNode);
      XMLDOMManagement4PS.FindNode(MaintenanceStatusRootNode, STRSUBSTNO(LocalName, 'Contractor'), ContractorNode);
      XMLDOMManagement4PS.FindNode(InstructionDataNode, STRSUBSTNO(LocalName, 'DeliveryTimeFrame'), DeliveryTimeFrameNode);

      Customer.GET(ServiceOrder."Customer No.");
      XMLDOMManagement4PS.AddValueToNode(BuyerNode, 'GLN', Customer.GLN);

      CompanyInformation.GET;
      XMLDOMManagement4PS.AddValueToNode(ContractorNode, 'GLN', CompanyInformation.GLN);
      XMLDOMManagement4PS.AddValueToNode(MaintenanceStatusRootNode, 'MessageNumber', COPYSTR(CREATEGUID(),1,17));
      XMLDOMManagement4PS.AddValueToNode(MaintenanceStatusRootNode, 'MessageDate', FORMAT(TODAY,0,9));
      XMLDOMManagement4PS.AddValueToNode(MaintenanceStatusRootNode, 'MessageTime', FORMAT(TIME,0,9));

      CASE CustomerWebserviceURL."MessageService Version" OF
        CustomerWebserviceURL."MessageService Version"::" ",
        CustomerWebserviceURL."MessageService Version"::"2.4": BEGIN
          MessageType := 'MaintenanceStatus';
        END;
        CustomerWebserviceURL."MessageService Version"::"3.0",
        CustomerWebserviceURL."MessageService Version"::"3.1": BEGIN
          MessageType := 'MTNSTA';
        END;
      END;

      XMLDOMManagement4PS.AddValueToNode(InstructionDataNode, 'InstructionNumber', ServiceOrder."Order No. Customer");
      XMLDOMManagement4PS.AddValueToNode(InstructionDataNode, 'InstructionSubNumber', ServiceOrder."Your Reference");
      XMLDOMManagement4PS.AddValueToNode(InstructionDataNode, 'Status', FORMAT(INSBOUMessageQueue."Maint. Status Code"));
      XMLDOMManagement4PS.AddValueToNode(InstructionDataNode, 'StatusDescription', INSBOUMaintStatusMgt.GetMaintStatusCodeDescription(INSBOUMessageQueue."Maint. Status Code"));

      IF (INSBOUMessageQueue."Maint. Status Code" = INSBOUMessageQueue."Maint. Status Code"::GER) OR
         (INSBOUMessageQueue."Maint. Status Code" = INSBOUMessageQueue."Maint. Status Code"::TFC)
      THEN
        IF FORMAT(ServiceOrder."Ending Date", 0,9) <> '' THEN
          XMLDOMManagement4PS.AddValueToNode(InstructionDataNode, 'DateReady', FORMAT(ServiceOrder."Ending Date", 0,9))
        ELSE
          XMLDOMManagement4PS.AddValueToNode(InstructionDataNode, 'DateReady', FORMAT(TODAY, 0,9));

      IF INSBOUMessageQueue."Maint. Status Code" = INSBOUMessageQueue."Maint. Status Code"::AFH THEN BEGIN
        XMLDOMManagement4PS.AddValueToNode(DeliveryTimeFrameNode, 'DeliveryDateEarliest', FORMAT(ServiceOrder."Starting Date",0,9));
        XMLDOMManagement4PS.AddValueToNode(DeliveryTimeFrameNode, 'DeliveryTimeEarliest', FORMAT(ServiceOrder."Starting Time",0,9));
        XMLDOMManagement4PS.AddValueToNode(DeliveryTimeFrameNode, 'DeliveryDateLatest', FORMAT(ServiceOrder."Ending Date",0,9));
        XMLDOMManagement4PS.AddValueToNode(DeliveryTimeFrameNode, 'DeliveryTimeLatest', FORMAT(ServiceOrder."Ending Time",0,9));
      END;

      XMLDOMManagement4PS.AddValueToNode(InstructionDataNode, 'FreeText', GetServiceOrderStatusText(ServiceOrder."No.",STRSUBSTNO('%1',INSBOUMessageQueue."Maint. Status Code")));

      XmlDeclareNode := MaintStatusXML.FirstChild;
      MaintStatusXML.RemoveChild(XmlDeclareNode);

      ConsumedWebServiceMgt.CreateRequest(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, RequestNamespaceManager);
      FillSOAPHeaderWithActualData(RequestXML,STRSUBSTNO('%1',CustomerWebserviceURL."MessageService Version"));

      CASE CustomerWebserviceURL."Message Version" OF
        CustomerWebserviceURL."Message Version"::"005",
        CustomerWebserviceURL."Message Version"::"005Beta":
          CreatePostMessageRequest(MessageType, '005',CustomerWebserviceURL."MessageService Version");
      ELSE
        ERROR(Text008, CustomerWebserviceURL.FIELDCAPTION("Message Version"), STRSUBSTNO('%1', CustomerWebserviceURL."Message Version"), FORMAT(INSBOUMessageQueue."INSBOU Message Type"));
      END;

      XMLDOMManagement4PS.FindNode(RequestXML, STRSUBSTNO(LocalName, 'MsgContent'), FoundNode);
      XMLDOMManagement4PS.RemoveEmptyTags(MaintStatusXML);
      FoundNode.InnerXml := STRSUBSTNO('<![CDATA[%1]]>', MaintStatusXML.OuterXml);

      XMLDOMManagement4PS.RemoveEmptyTags(RequestXML);
      ConsumedWebServiceMgt.SendCWS(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, ResponseXML,
      ResponseNamespaceManager, 'Onderhoudsbericht');
      CheckResponseSoapFault;
    END;

    PROCEDURE ProcessOrdrsp003@1100528306(MsgId@1100525000 : Text;MsgContent@1100528308 : Text);
    VAR
      FileManagement@1100528306 : Codeunit 419;
      RegExpManagement@1100525001 : Codeunit 11012262;
      INSBOUOrderResponseWS@1100528304 : XMLport 11072004;
      IStream@1100528303 : InStream;
      XMLDoc@1100528302 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLFile@1100528300 : File;
      ServerFileName@1100528309 : Text;
    BEGIN
      XMLDoc := XMLDoc.XmlDocument;
      ServerFileName := FileManagement.ServerTempFileName('xml');

      MsgContent := RegExpManagement.Replace(MsgContent, 'xsi:noNamespaceSchemaLocation=".*_insbou003.xsd"', '');
      XMLDoc.LoadXml(MsgContent);
      XMLDOMManagement4PS.RemoveNamespaces(XMLDoc, XMLDoc);
      XMLDoc.Save(ServerFileName);

      XMLFile.OPEN(ServerFileName);
      XMLFile.CREATEINSTREAM(IStream);
      INSBOUOrderResponseWS.SetMessageId(MsgId);
      INSBOUOrderResponseWS.SETSOURCE(IStream);
      INSBOUOrderResponseWS.IMPORT;
      XMLFile.CLOSE;

      VendorNo := INSBOUOrderResponseWS.GetOrderResponseVendorNo;
      OrderResponseNumber := INSBOUOrderResponseWS.GetOrderResponseOrderResponseNo;
    END;

    PROCEDURE ProcessINSBOUInvoice@1100528305(MsgId@1100525000 : Text;MsgContent@1100528308 : Text;MsgVersion@1100529900 : Code[20]);
    VAR
      FileManagement@1100528307 : Codeunit 419;
      RegExpManagement@1100528306 : Codeunit 11012262;
      INSBOU003InvoiceWS@1100528304 : XMLport 11072002;
      IStream@1100528303 : InStream;
      XMLDoc@1100528302 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNode@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      AttachmentNode@1100528311 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      AttachedDataNode@1100528310 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ServerFileName@1100528305 : Text;
      XMLFile@1100528300 : File;
      AttachedFileName@1100528312 : Text;
      INSBOU004InvoiceWS@1100529901 : XMLport 11012364;
      AttachedData@1100529902 : Text;
    BEGIN
      XMLDoc := XMLDoc.XmlDocument;
      ServerFileName := FileManagement.ServerTempFileName('xml');

      AttachedFileName := '';
      AttachedData := '';

      MsgContent := RegExpManagement.Replace(MsgContent, 'xsi:noNamespaceSchemaLocation=".*_insbou003.xsd"', '');
      XMLDoc.LoadXml(MsgContent);
      XMLDOMManagement4PS.RemoveNamespaces(XMLDoc, XMLDoc);
      XMLDOMManagement4PS.FindNode(XMLDoc, STRSUBSTNO(LocalName, 'Invoice'), XMLNode);
      IF (XMLDOMManagement4PS.FindNode(XMLDoc, STRSUBSTNO(LocalName, 'Attachment'), AttachmentNode)) THEN BEGIN
        IF (XMLDOMManagement4PS.FindNode(AttachmentNode, STRSUBSTNO(LocalName, 'FileName'), FoundNode)) THEN
          AttachedFileName := FoundNode.InnerText;
        IF (XMLDOMManagement4PS.FindNode(AttachmentNode, STRSUBSTNO(LocalName, 'AttachedData'), AttachedDataNode)) THEN
          AttachedData := AttachedDataNode.InnerText;
        XMLNode.RemoveChild(AttachmentNode);
      END;
      XMLDoc.Save(ServerFileName);

      XMLFile.OPEN(ServerFileName);
      XMLFile.CREATEINSTREAM(IStream);
      CASE MsgVersion OF
        '003':
          BEGIN
            INSBOU003InvoiceWS.SetMessageId(MsgId);
            IF (AttachedFileName <> '') AND (AttachedData <> '') THEN
              INSBOU003InvoiceWS.SetAttachmentContent(AttachedData, AttachedFileName);
            INSBOU003InvoiceWS.SETSOURCE(IStream);
            INSBOU003InvoiceWS.IMPORT;
          END;
        '004':
          BEGIN
            INSBOU004InvoiceWS.SetMessageId(MsgId);
            IF (AttachedFileName <> '') AND (AttachedData <> '') THEN
              INSBOU004InvoiceWS.SetAttachmentContent(AttachedData, AttachedFileName);
            INSBOU004InvoiceWS.SETSOURCE(IStream);
            INSBOU004InvoiceWS.IMPORT;
          END;
      END;
      XMLFile.CLOSE;

      CASE MsgVersion OF
        '003':
          BEGIN
            VendorNo := INSBOU003InvoiceWS.GetInvoiceVendorNo;
            InvoiceNumber := INSBOU003InvoiceWS.GetInvoiceInvoiceNo;
          END;
        '004':
          BEGIN
            VendorNo := INSBOU004InvoiceWS.GetInvoiceVendorNo;
            InvoiceNumber := INSBOU004InvoiceWS.GetInvoiceInvoiceNo;
          END;
      END;
    END;

    PROCEDURE ProcessDesadv003@1100528311(MsgId@1100525000 : Text;MsgContent@1100528308 : Text);
    VAR
      FileManagement@1100528307 : Codeunit 419;
      RegExpManagement@1100528306 : Codeunit 11012262;
      INSBOUDespatchAdviceWS@1100528304 : XMLport 11072006;
      IStream@1100528303 : InStream;
      XMLDoc@1100528302 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLFile@1100528300 : File;
      ServerFileName@1100528309 : Text;
    BEGIN
      XMLDoc := XMLDoc.XmlDocument;
      ServerFileName := FileManagement.ServerTempFileName('xml');

      MsgContent := RegExpManagement.Replace(MsgContent, 'xsi:noNamespaceSchemaLocation=".*_insbou003.xsd"', '');
      XMLDoc.LoadXml(MsgContent);
      XMLDOMManagement4PS.RemoveNamespaces(XMLDoc, XMLDoc);
      XMLDoc.Save(ServerFileName);

      XMLFile.OPEN(ServerFileName);
      XMLFile.CREATEINSTREAM(IStream);
      INSBOUDespatchAdviceWS.SetMessageId(MsgId);
      INSBOUDespatchAdviceWS.SETSOURCE(IStream);
      INSBOUDespatchAdviceWS.IMPORT;
      XMLFile.CLOSE;

      VendorNo := INSBOUDespatchAdviceWS.GetDespatchAdviceVendorNo;
      DespatchAdviceNumber := INSBOUDespatchAdviceWS.GetDespatchAdviceMessageNo;
    END;

    PROCEDURE ProcessPricat003@1100528316(MsgId@1100525000 : Text;MsgContent@1100528308 : Text);
    VAR
      FileManagement@1100528307 : Codeunit 419;
      RegExpManagement@1100528306 : Codeunit 11012262;
      INSBOUPriceCatalogueWS@1100528304 : XMLport 11072007;
      IStream@1100528303 : InStream;
      XMLDoc@1100528302 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLFile@1100528300 : File;
      ServerFileName@1100528309 : Text;
    BEGIN
      XMLDoc := XMLDoc.XmlDocument;
      ServerFileName := FileManagement.ServerTempFileName('xml');

      MsgContent := RegExpManagement.Replace(MsgContent, 'xsi:noNamespaceSchemaLocation=".*_insbou003.xsd"', '');
      XMLDoc.LoadXml(MsgContent);
      XMLDOMManagement4PS.RemoveNamespaces(XMLDoc, XMLDoc);
      XMLDoc.Save(ServerFileName);

      XMLFile.OPEN(ServerFileName);
      XMLFile.CREATEINSTREAM(IStream);
      INSBOUPriceCatalogueWS.SetMessageId(MsgId);
      INSBOUPriceCatalogueWS.SETSOURCE(IStream);
      INSBOUPriceCatalogueWS.IMPORT;
      XMLFile.CLOSE;

      VendorNo := INSBOUPriceCatalogueWS.GetPriceCataloqueVendorNo;
      PriceCataloqueNumber := INSBOUPriceCatalogueWS.GetPriceCataloquePriceCataloqueNo;
    END;

    PROCEDURE ProcessMaintInstr@1100529400(ApplicationId@1100529902 : Text;MsgId@1100528818 : Text;MsgType@1100528817 : Text;MsgFormat@1100528816 : Text;MsgVersion@1100528815 : Text;MsgDateTime@1100528800 : DateTime;Attachments@1100528813 : Text;MsgContent@1100528812 : Text);
    VAR
      INSBOUMaintInstruction@1100528809 : Record 11072350;
      TempBlob@1100529906 : TEMPORARY Record 99008535;
      XMLDOMManagement4PS@1100529955 : Codeunit 11020220;
      RegExpManagement@1100529904 : Codeunit 11012262;
      INSBOUMaintInstrWS001@1100528803 : XMLport 11072010;
      INSBOUMaintInstrWS005@1100528808 : XMLport 11072012;
      INSBOUETIMAttachmentWS@1100528805 : XMLport 11072008;
      XmlDoc@1100528801 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlDoc2@1100528807 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlDoc3@1100529905 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      AttachedDataNode@1100528811 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ReadStream@1100528802 : InStream;
      ReadStream2@1100528810 : InStream;
      ReadStream3@1100529903 : InStream;
      RootNode@1100529909 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      InstructionDataNode@1100529900 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      InstructionLineNode@1100529901 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LEDOInformationNode@1100529907 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      LEDOElementNode@1100529910 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      INSBOUMaintInstr005b@1100529911 : XMLport 11072009;
      InstructionInformationNode@1100529912 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      SALES005MaintInstruction@1100529913 : XMLport 11072015;
    BEGIN
      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(ReadStream);

      MsgContent := RegExpManagement.Replace(MsgContent, 'xsi:schemaLocation=".*_SALES005Beta.xsd"', '');
      MsgContent := RegExpManagement.Replace(MsgContent, 'xmlns:xsi=".*XMLSchema-instance"', '');

      XmlDoc := XmlDoc.XmlDocument;
      XmlDoc.LoadXml(MsgContent);
      XmlDoc.Save(ReadStream);

      XMLDOMManagement4PS.FindNode(XmlDoc, STRSUBSTNO(LocalName, 'MaintenanceInstruction'), RootNode);
      XMLDOMManagement4PS.RemoveEmptyTags(RootNode);

      IF MsgVersion = '005' THEN BEGIN
        MsgVersion := '005B';

        XMLDOMManagement4PS.FindNode(RootNode, STRSUBSTNO(LocalName, 'InstructionData'), InstructionDataNode);
        XMLDOMManagement4PS.FindNode(InstructionDataNode, STRSUBSTNO(LocalName, 'InstructionLine'), InstructionLineNode);
        XMLDOMManagement4PS.FindNode(InstructionLineNode, STRSUBSTNO(LocalName, 'LEDOInformation'), LEDOInformationNode);

        IF XMLDOMManagement4PS.FindNode(LEDOInformationNode, STRSUBSTNO(LocalName, 'Element'), LEDOElementNode) THEN
          MsgVersion := '005Bnw';
        IF XMLDOMManagement4PS.FindNode(LEDOInformationNode, STRSUBSTNO(LocalName, 'Location'), LEDOElementNode) THEN
          MsgVersion := '005Bnw';
        IF XMLDOMManagement4PS.FindNode(LEDOInformationNode, STRSUBSTNO(LocalName, 'Defect'), LEDOElementNode) THEN
          MsgVersion := '005Bnw';
        IF XMLDOMManagement4PS.FindNode(LEDOInformationNode, STRSUBSTNO(LocalName, 'Cause'), LEDOElementNode) THEN
          MsgVersion := '005Bnw';

        IF XMLDOMManagement4PS.FindNode(InstructionDataNode, STRSUBSTNO(LocalName, 'InstructionInformation'), InstructionInformationNode) THEN
          MsgVersion := '005';

      END;

      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(ReadStream2);

      XmlDoc2 := XmlDoc2.XmlDocument;
      XmlDoc2.LoadXml(RootNode.OuterXml);
      IF MsgVersion IN ['005', '005B', '005Bnw'] THEN
        XMLDOMManagement4PS.RemoveNamespaces(XmlDoc2, XmlDoc2);

      XmlDoc2.Save(ReadStream2);

      CASE MsgVersion OF
        '001':
          BEGIN
            INSBOUMaintInstrWS001.SetMessageId(MsgId);
            INSBOUMaintInstrWS001.SETSOURCE(ReadStream2);
            INSBOUMaintInstrWS001.IMPORT;
            INSBOUMaintInstrWS001.GetMaintInstrMessageNo(MaintInstrMessageNo, BuyerGLN);
          END;
        '005B':
          BEGIN
            INSBOUMaintInstrWS005.SetMessageId(MsgId);
            INSBOUMaintInstrWS005.SETSOURCE(ReadStream2);
            INSBOUMaintInstrWS005.IMPORT;
            INSBOUMaintInstrWS005.GetMaintInstrMessageNo(MaintInstrMessageNo, BuyerGLN);
          END;
        '005Bnw':
          BEGIN
            INSBOUMaintInstr005b.SetMessageId(MsgId);
            INSBOUMaintInstr005b.SETSOURCE(ReadStream2);
            INSBOUMaintInstr005b.IMPORT;
            INSBOUMaintInstr005b.GetMaintInstrMessageNo(MaintInstrMessageNo, BuyerGLN);
          END;
        '005':
          BEGIN
            SALES005MaintInstruction.SetMessageId(MsgId);
            SALES005MaintInstruction.SETSOURCE(ReadStream2);
            SALES005MaintInstruction.IMPORT;
            SALES005MaintInstruction.GetMaintInstrMessageNo(MaintInstrMessageNo, BuyerGLN);
          END;
      ELSE
        ERROR(INSBOUVERNOTSUPPORTED, MsgVersion);
      END;

      INSBOUMaintInstruction.GET(MaintInstrMessageNo, BuyerGLN);
      INSBOUMaintInstruction.ApplicationId := ApplicationId;
      INSBOUMaintInstruction.MessageVersion := MsgVersion;
      INSBOUMaintInstruction.MessageFormat := MsgFormat;
      INSBOUMaintInstruction.MessageId := MsgId;
      INSBOUMaintInstruction.MODIFY;

      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(ReadStream3);

      IF Attachments <> '' THEN BEGIN
        XmlDoc3 := XmlDoc3.XmlDocument;
        XmlDoc3.LoadXml(Attachments);
        IF XMLDOMManagement4PS.FindNode(XmlDoc3, STRSUBSTNO(LocalName, 'AttachedData'), AttachedDataNode) THEN BEGIN
          XmlDoc3.Save(ReadStream3);
          INSBOUETIMAttachmentWS.SetRecordID(INSBOUMaintInstruction.RECORDID);
          INSBOUETIMAttachmentWS.SETSOURCE(ReadStream3);
          INSBOUETIMAttachmentWS.IMPORT;
        END;
      END;
    END;

    PROCEDURE GetVendorNo@1100525008() : Code[20];
    BEGIN
      EXIT(VendorNo);
    END;

    PROCEDURE GetOrderResponseNumber@1100525009() : Code[17];
    BEGIN
      EXIT(OrderResponseNumber);
    END;

    PROCEDURE GetInvoiceNumber@1100525010() : Code[17];
    BEGIN
      EXIT(InvoiceNumber);
    END;

    PROCEDURE GetDespatchAdviceNumber@1100528315() : Code[17];
    BEGIN
      EXIT(DespatchAdviceNumber);
    END;

    PROCEDURE GetPriceCataloqueNumber@1100528314() : Code[17];
    BEGIN
      EXIT(PriceCataloqueNumber);
    END;

    LOCAL PROCEDURE "-- Internal --"@1100528312();
    BEGIN
    END;

    LOCAL PROCEDURE SendGetAvailableMessages@1100528302(VendorNo@1100528302 : Code[20];MsgType@1100528300 : Code[20]);
    VAR
      ConsumedWebServiceMgt@1100528301 : Codeunit 11229310;
    BEGIN
      XMLDOMManagement4PS.FindNode(RequestXML, STRSUBSTNO(LocalName, 'MsgType'), FoundNode);
      FoundNode.InnerText := MsgType;

      ConsumedWebServiceMgt.SendCWS(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, ResponseXML,
        ResponseNamespaceManager, SetMessageId);
      CheckResponseSoapFault;

      ProcessGetAvailableMessages(VendorNo);
    END;

    LOCAL PROCEDURE ProcessGetAvailableMessages@1100528304(VendorNo@1100528307 : Code[20]);
    VAR
      FileManagement@1100528305 : Codeunit 419;
      INSBOUAvailableMessageWS@1100528304 : XMLport 11072005;
      ServerFileName@1100525000 : Text;
      XMLFile@1100528302 : File;
      IStream@1100528301 : InStream;
      XMLDoc@1100528300 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF (NOT XMLDOMManagement4PS.FindNode(ResponseXML, STRSUBSTNO(LocalName, ConsumedWebServiceLine."Response Root Tag"), FoundNode)) THEN
        EXIT;

      ServerFileName := FileManagement.ServerTempFileName('xml');
      XMLDoc := XMLDoc.XmlDocument;
      XMLDoc.LoadXml(FoundNode.OuterXml);
      XMLDOMManagement4PS.RemoveNamespaces(XMLDoc, XMLDoc);
      XMLDoc.Save(ServerFileName);

      XMLFile.OPEN(ServerFileName);
      XMLFile.CREATEINSTREAM(IStream);
      INSBOUAvailableMessageWS.SetVendorNo(VendorNo);
      INSBOUAvailableMessageWS.SETSOURCE(IStream);
      INSBOUAvailableMessageWS.IMPORT;
      XMLFile.CLOSE;
    END;

    LOCAL PROCEDURE ProcessGetMessage@1100528313(AddAvailableMessage@1100528302 : Boolean;VendorNo@1100528305 : Code[20]);
    VAR
      INSBOUAvailableMessage@1100528304 : Record 11020432;
      MsgId@1100525000 : Text;
      MsgType@1100528300 : Code[20];
      MsgFormat@1100528307 : Code[20];
      MsgVersion@1100528301 : Code[20];
      MsgContent@1100528303 : Text;
      RootNode@1100528306 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF (NOT XMLDOMManagement4PS.FindNode(ResponseXML, STRSUBSTNO(LocalName, ConsumedWebServiceLine."Response Root Tag"), RootNode)) THEN
        EXIT;

      MsgId := XMLDOMManagement4PS.FindNodeText(RootNode, STRSUBSTNO(LocalName, 'MsgId'));
      MsgType := XMLDOMManagement4PS.FindNodeText(RootNode, STRSUBSTNO(LocalName, 'MsgType'));
      MsgFormat := XMLDOMManagement4PS.FindNodeText(RootNode, STRSUBSTNO(LocalName, 'MsgFormat'));
      MsgVersion := XMLDOMManagement4PS.FindNodeText(RootNode, STRSUBSTNO(LocalName, 'MsgVersion'));
      IF (AddAvailableMessage) AND (MsgId <> '') THEN
        CreateAvailableMessageRec(VendorNo, MsgId, MsgType, MsgVersion,
          XMLDOMManagement4PS.FindNodeText(RootNode, STRSUBSTNO(LocalName, 'MsgDateTime')),
          XMLDOMManagement4PS.FindNodeText(RootNode, STRSUBSTNO(LocalName, 'MsgFormat')));

      //Get CDATA content (MsgContent is without the '<!CDATA[[' and ']]>' enclosure tags)
      MsgContent := XMLDOMManagement4PS.FindNodeText(RootNode, STRSUBSTNO(LocalName, 'MsgContent'));

      CASE TRUE OF
        (MsgType = ORDRSP) AND (MsgFormat = 'INSBOU') AND (MsgVersion = '003'):
          ProcessOrdrsp003(MsgId, MsgContent);
        (MsgType = INVOIC) AND ((MsgFormat = 'INSBOU') AND (MsgVersion = '003')) OR ((MsgFormat = 'INSBOU') AND (MsgVersion = '004')):
          ProcessINSBOUInvoice(MsgId, MsgContent, MsgVersion);
        (MsgType = DESADV) AND (MsgFormat = 'INSBOU') AND (MsgVersion = '003'):
          ProcessDesadv003(MsgId, MsgContent);
        (MsgType = PRICAT) AND (MsgFormat = 'INSBOU') AND (MsgVersion = '003'):
          ProcessPricat003(MsgId, MsgContent);
        ELSE
          ERROR(Text009, MsgType, MsgFormat, MsgVersion);
      END;

      IF (AddAvailableMessage) AND (MsgId <> '') THEN BEGIN
        INSBOUAvailableMessage.GET(VendorNo, MsgId);
        INSBOUAvailableMessage.Status := INSBOUAvailableMessage.Status::Processed;
        INSBOUAvailableMessage.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE SendDeleteMessage@1100528310(VAR TempINSBOUAvailableMessage@1100528301 : TEMPORARY Record 11020432);
    VAR
      INSBOUAvailableMessage@1100528302 : Record 11020432;
      ConsumedWebServiceMgt@1100528300 : Codeunit 11229310;
    BEGIN
      IF (TempINSBOUAvailableMessage.COUNT = 0) THEN
        EXIT;
      TempINSBOUAvailableMessage.FINDSET;
      GetVendorINSBOULogin(VendorINSBOULogin, TempINSBOUAvailableMessage."Vendor No.", 0, '', '');
      CheckVendorINSBOU(VendorINSBOULogin);
      SetGlobalVars(VendorINSBOULogin."Consumed Web Service Code", 30);

      ConsumedWebServiceMgt.CreateRequest(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, RequestNamespaceManager);
      XMLDOMManagement4PS.FindNodeNs(RequestXML, STRSUBSTNO('.//%1:%2', ConsumedWebServiceLine."Prefix Method Namespace",
        ConsumedWebServiceLine."Request Root Tag"), RootNode, RequestNamespaceManager);

      REPEAT
        XMLDOMManagement4PS.AddElement(RootNode, STRSUBSTNO('%1:MsgId', ConsumedWebServiceLine."Prefix Method Namespace"),
          TempINSBOUAvailableMessage.ID, ConsumedWebServiceLine."Method Namespace", FoundNode);
      UNTIL (TempINSBOUAvailableMessage.NEXT = 0);

      ConsumedWebServiceMgt.SendCWS(ConsumedWebService.Code, ConsumedWebServiceLine."Seq. No.", RequestXML, ResponseXML,
        ResponseNamespaceManager, SetMessageId);
      CheckResponseSoapFault;

      TempINSBOUAvailableMessage.FINDSET;
      REPEAT
        INSBOUAvailableMessage.GET(TempINSBOUAvailableMessage."Vendor No.", TempINSBOUAvailableMessage.ID);
        INSBOUAvailableMessage.DELETE(TRUE);
      UNTIL (TempINSBOUAvailableMessage.NEXT = 0);
    END;

    LOCAL PROCEDURE CreatePostMessageRequest@1100528805(IMsgType@1100528800 : Text;IMsgVersion@1100528802 : Text;MessageServiceVersion@1100525000 : Integer);
    VAR
      MessageNode@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FoundNode@1100528801 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      MessageFormat@1100528500 : Text;
      MessageVersion@1100529900 : Text;
    BEGIN
      CASE IMsgVersion OF
        '003', 'INSBOU003':
          BEGIN
            MessageFormat := 'INSBOU';
            MessageVersion := '003';
          END;
        '004', 'INSBOU004':
          BEGIN
            MessageFormat := 'INSBOU';
            MessageVersion := '004';
          END;
        '005', 'SALES005', 'SALES005Beta':
          BEGIN
            MessageFormat := 'SALES';
            MessageVersion := '005';
          END;
      END;

      CASE MessageServiceVersion OF
        VendorINSBOULogin."MessageService Version"::" ",
        VendorINSBOULogin."MessageService Version"::"2.4":
          BEGIN
            XMLDOMManagement4PS.FindNode(RequestXML, STRSUBSTNO(LocalName, ConsumedWebServiceLine."Request Root Tag"),RootNode);
            XMLDOMManagement4PS.AddElement(RootNode, STRSUBSTNO('%1:MessageServiceMessage', ConsumedWebServiceLine."Prefix Method Namespace"),
              '', ConsumedWebServiceLine."Method Namespace", FoundNode);
            XMLDOMManagement4PS.FindNode(RequestXML, STRSUBSTNO(LocalName, 'MessageServiceMessage'), MessageNode);
            XMLDOMManagement4PS.AddElement(MessageNode, STRSUBSTNO('%1:MsgId', ConsumedWebServiceLine."Prefix Method Namespace"),
              DELCHR(CREATEGUID, '<=>', '{}'), ConsumedWebServiceLine."Method Namespace", FoundNode);
            XMLDOMManagement4PS.AddElement(MessageNode, STRSUBSTNO('%1:MsgType', ConsumedWebServiceLine."Prefix Method Namespace"),
              IMsgType, ConsumedWebServiceLine."Method Namespace", FoundNode);
            XMLDOMManagement4PS.AddElement(MessageNode, STRSUBSTNO('%1:MsgFormat', ConsumedWebServiceLine."Prefix Method Namespace"),
              MessageFormat, ConsumedWebServiceLine."Method Namespace", FoundNode);
            XMLDOMManagement4PS.AddElement(MessageNode, STRSUBSTNO('%1:MsgVersion', ConsumedWebServiceLine."Prefix Method Namespace"),
              MessageVersion, ConsumedWebServiceLine."Method Namespace", FoundNode);
            XMLDOMManagement4PS.AddElement(MessageNode, STRSUBSTNO('%1:MsgDateTime', ConsumedWebServiceLine."Prefix Method Namespace"),
              FORMAT(CURRENTDATETIME, 0, 9), ConsumedWebServiceLine."Method Namespace", FoundNode);
            XMLDOMManagement4PS.AddElement(MessageNode, STRSUBSTNO('%1:MsgContent', ConsumedWebServiceLine."Prefix Method Namespace"),
            '', ConsumedWebServiceLine."Method Namespace", FoundNode);
          END;
        VendorINSBOULogin."MessageService Version"::"3.0":
          BEGIN
            XMLDOMManagement4PS.FindNode(RequestXML, STRSUBSTNO(LocalName, ConsumedWebServiceLine."Request Root Tag"),RootNode);
            XMLDOMManagement4PS.AddElement(RootNode, 'MsgProperties', '', '', FoundNode);
            XMLDOMManagement4PS.AddElement(RootNode, 'MsgContent', '', '', FoundNode);
            XMLDOMManagement4PS.FindNode(RequestXML, STRSUBSTNO(LocalName, 'MsgProperties'), MessageNode);
            XMLDOMManagement4PS.AddElement(MessageNode, 'MsgId', DELCHR(CREATEGUID, '<=>', '{}'), '', FoundNode);
            XMLDOMManagement4PS.AddElement(MessageNode, 'MsgDateTime', FORMAT(CURRENTDATETIME, 0, 9), '', FoundNode);
            XMLDOMManagement4PS.AddElement(MessageNode, 'MsgFormat', MessageFormat, '', FoundNode);
            XMLDOMManagement4PS.AddElement(MessageNode, 'MsgVersion', MessageVersion, '', FoundNode);
            XMLDOMManagement4PS.AddElement(MessageNode, 'MsgType', IMsgType, '', FoundNode);
          END;
        VendorINSBOULogin."MessageService Version"::"3.1":
          BEGIN
            XMLDOMManagement4PS.FindNode(RequestXML, STRSUBSTNO(LocalName, ConsumedWebServiceLine."Request Root Tag"),RootNode);
            XMLDOMManagement4PS.AddElement(RootNode, STRSUBSTNO('%1:MsgProperties', ConsumedWebServiceLine."Prefix Method Namespace"),
              '', ConsumedWebServiceLine."Method Namespace", FoundNode);
            XMLDOMManagement4PS.AddElement(RootNode, STRSUBSTNO('%1:MsgContent', ConsumedWebServiceLine."Prefix Method Namespace"),
              '', ConsumedWebServiceLine."Method Namespace", FoundNode);
            XMLDOMManagement4PS.FindNode(RequestXML, STRSUBSTNO(LocalName, 'MsgProperties'), MessageNode);
            XMLDOMManagement4PS.AddElement(MessageNode, STRSUBSTNO('%1:MsgId', ConsumedWebServiceLine."Prefix Method Namespace"),
              DELCHR(CREATEGUID, '<=>', '{}'), ConsumedWebServiceLine."Method Namespace", FoundNode);
            XMLDOMManagement4PS.AddElement(MessageNode, STRSUBSTNO('%1:MsgDateTime', ConsumedWebServiceLine."Prefix Method Namespace"),
              FORMAT(CURRENTDATETIME, 0, 9), ConsumedWebServiceLine."Method Namespace", FoundNode);
            XMLDOMManagement4PS.AddElement(MessageNode, STRSUBSTNO('%1:MsgFormat', ConsumedWebServiceLine."Prefix Method Namespace"),
              MessageFormat, ConsumedWebServiceLine."Method Namespace", FoundNode);
            XMLDOMManagement4PS.AddElement(MessageNode, STRSUBSTNO('%1:MsgVersion', ConsumedWebServiceLine."Prefix Method Namespace"),
              MessageVersion, ConsumedWebServiceLine."Method Namespace", FoundNode);
            XMLDOMManagement4PS.AddElement(MessageNode, STRSUBSTNO('%1:MsgType', ConsumedWebServiceLine."Prefix Method Namespace"),
              IMsgType, ConsumedWebServiceLine."Method Namespace", FoundNode);
          END;
      END;
    END;

    LOCAL PROCEDURE GetVendorINSBOULogin@1100525001(VAR VendorGS1Login@1100525000 : Record 11012132;VendorNo@1100525001 : Code[20];MsgType@1100528301 : Option;DepartmentCode@1100528302 : Code[20];"Job No."@1100525002 : Code[20]);
    BEGIN
      IF (VendorINSBOULogin.GET(VendorNo, MsgType, DepartmentCode, "Job No.")) THEN
        EXIT;
      IF (VendorINSBOULogin.GET(VendorNo, MsgType, '', "Job No.")) THEN
        EXIT;
      IF (VendorINSBOULogin.GET(VendorNo, MsgType, DepartmentCode, '')) THEN
        EXIT;
      IF (VendorINSBOULogin.GET(VendorNo, MsgType, '', '')) THEN
        EXIT;
      IF (VendorINSBOULogin.GET(VendorNo, 0, DepartmentCode, "Job No.")) THEN
        EXIT;
      IF (VendorINSBOULogin.GET(VendorNo, 0, '', "Job No.")) THEN
        EXIT;
      IF (VendorINSBOULogin.GET(VendorNo, 0, DepartmentCode, '')) THEN
        EXIT;
      IF (VendorINSBOULogin.GET(VendorNo, 0, '', '')) THEN
        EXIT;

      ERROR(Text000, VendorINSBOULogin.TABLECAPTION, PurchaseHeader.FIELDCAPTION("Buy-from Vendor No."),
        PurchaseHeader."Buy-from Vendor No.");
    END;

    LOCAL PROCEDURE SetGlobalVars@1100525005(ConsumedWebServiceCode@1100528300 : Code[20];SeqNo@1100528301 : Integer);
    BEGIN
      IF (NOT ISNULL(RequestXML)) THEN
        CLEAR(RequestXML);
      IF (NOT ISNULL(RequestNamespaceManager)) THEN
        CLEAR(RequestNamespaceManager);
      IF (NOT ISNULL(ResponseXML)) THEN
        CLEAR(ResponseXML);
      IF (NOT ISNULL(ResponseNamespaceManager)) THEN
        CLEAR(ResponseNamespaceManager);

      ConsumedWebService.GET(ConsumedWebServiceCode);
      ConsumedWebServiceLine.GET(ConsumedWebServiceCode, SeqNo);
      CompanyInformation.GET;
      FileSystemOnPremiseSetup.GET;
      FileSystemOnPremiseSetup.TESTFIELD("Default Source Dir.Ext.Doc");
      DocumentMgtSetup.GET;
      DocumentMgtSetup.TESTFIELD("Document Group");
    END;

    LOCAL PROCEDURE CheckPurchaseHeader@1100525003(PurchaseHeader@1100525000 : Record 38);
    VAR
      PurchaseHeaderExtension@1100528300 : Record 11020398;
      PurchasePlanPhase@1100525002 : Record 11020417;
      PurchasePlanManagement@1100525001 : Codeunit 11012242;
    BEGIN
      IF (NOT PurchaseHeaderExtension.GET(PurchaseHeader."Document Type", PurchaseHeader."No.")) THEN
        PurchaseHeaderExtension.INIT;
      PurchaseHeaderExtension.TESTFIELD("GS1 Sent on", 0D);
      PurchasePlanManagement.TestPhaseCanBeFinished(PurchaseHeader, 9, 1, PurchasePlanPhase);
      PurchaseHeader.TESTFIELD("Buy-from Vendor No.");
      PurchaseHeader.TESTFIELD("ICM File Sent", FALSE);

      IF (STRLEN(PurchaseHeader."No.") > 17) THEN
        ERROR(Text007, PurchaseHeader.TABLECAPTION, PurchaseHeader.FIELDCAPTION("No."),
          STRLEN(PurchaseHeader."No."), 17);
      IF (PurchaseHeader."Document Type" <> PurchaseHeader."Document Type"::Quote) THEN
        IF (PurchaseHeader."Order Date" = 0D) THEN
          ERROR(Text006, PurchaseHeader.TABLECAPTION, PurchaseHeader.FIELDCAPTION("Order Date"),
            PurchaseHeader."Order Date");
      IF (PurchaseHeader."Due Date" = 0D) THEN
        ERROR(Text006, PurchaseHeader.TABLECAPTION, PurchaseHeader.FIELDCAPTION("Due Date"),
          PurchaseHeader."Due Date");
      //IF (PurchaseHeader."Expected Receipt Date" = 0D) THEN
      //  ERROR(Text006, PurchaseHeader.TABLECAPTION, PurchaseHeader.FIELDCAPTION("Expected Receipt Date"),
      //    PurchaseHeader."Expected Receipt Date");
      IF (STRLEN(PurchaseHeader."Job No.") > 17) THEN
        ERROR(Text007, PurchaseHeader.TABLECAPTION, PurchaseHeader.FIELDCAPTION("Job No."),
          STRLEN(PurchaseHeader."Job No."), 17);
      IF (PurchaseHeader."Ship-to Name" = '') THEN
        ERROR(Text006, PurchaseHeader.TABLECAPTION, PurchaseHeader.FIELDCAPTION("Ship-to Name"),
          PurchaseHeader."Ship-to Name");
      IF (PurchaseHeader."Ship-to Post Code" = '') THEN
        ERROR(Text006, PurchaseHeader.TABLECAPTION, PurchaseHeader.FIELDCAPTION("Ship-to Post Code"),
          PurchaseHeader."Ship-to Post Code");

      IF (Vendor.GLN = '') THEN
        ERROR(Text001, Vendor.TABLECAPTION, Vendor.FIELDCAPTION(GLN),
          Vendor.GLN);
      IF (STRLEN(Vendor.GLN) > 13) THEN
        ERROR(Text007, Vendor.TABLECAPTION, Vendor.FIELDCAPTION(GLN),
          STRLEN(Vendor.GLN), 13);
      IF (STRLEN(DELCHR(Vendor.GLN, '<=>', '0123456789')) <> 0) THEN
        ERROR(Text006, Vendor.TABLECAPTION, Vendor.FIELDCAPTION(GLN),
          Vendor.GLN);

      WHILE (STRLEN(CompanyInformation.GLN) < 13) DO
        CompanyInformation.GLN := '0' + CompanyInformation.GLN;
      IF (STRLEN(CompanyInformation.GLN) > 13) THEN
        ERROR(Text007, CompanyInformation.TABLECAPTION, CompanyInformation.FIELDCAPTION(GLN),
          STRLEN(CompanyInformation.GLN), 13);
      IF (STRLEN(DELCHR(CompanyInformation.GLN, '<=>', '0123456789')) <> 0) THEN
        ERROR(Text006, CompanyInformation.TABLECAPTION, CompanyInformation.FIELDCAPTION(GLN),
          CompanyInformation.GLN);
    END;

    LOCAL PROCEDURE CheckPurchaseLines@1100525004(OrderType@1100525003 : Option;OrderNo@1100525002 : Code[20]);
    VAR
      PurchaseHeader@1100528300 : Record 38;
      PurchaseLine@1100525001 : Record 39;
      TradeItem@1100525004 : Record 11012317;
      ConfirmEmptyTradeItem@1100525000 : Boolean;
    BEGIN
      PurchaseHeader.GET(OrderType, OrderNo);

      PurchaseLine.SETRANGE("Document Type", OrderType);
      PurchaseLine.SETRANGE("Document No.", OrderNo);
      PurchaseLine.SETFILTER("Shortcut Dimension 2 Code", '<>%1', '');
      PurchaseLine.SETRANGE("Removal Contribution", FALSE);
      PurchaseLine.SETRANGE("Vendor Charge", FALSE);
      PurchaseLine.SETRANGE("Exclude From Electronic Order", FALSE);
      PurchaseLine.FINDSET;
      REPEAT
        IF (PurchaseLine."Trade Item" = '') THEN BEGIN
          IF NOT ConfirmEmptyTradeItem THEN BEGIN
            IF NOT CONFIRM(Text004, FALSE, PurchaseLine.FIELDCAPTION("Trade Item")) THEN
              ERROR(Text005);
            ConfirmEmptyTradeItem := TRUE;
          END;
        END;

        IF (PurchaseLine."Vendor (Trade Item)" = '') THEN BEGIN
          IF NOT ConfirmEmptyTradeItem THEN BEGIN
            IF NOT CONFIRM(Text004, FALSE, PurchaseLine.FIELDCAPTION("Vendor (Trade Item)")) THEN
              ERROR(Text005);
            ConfirmEmptyTradeItem := TRUE;
          END;
        END;

        IF (NOT ConfirmEmptyTradeItem) THEN BEGIN
          IF (NOT TradeItem.GET(PurchaseLine."Vendor (Trade Item)", PurchaseLine."Trade Item")) THEN
              ERROR(Text003, TradeItem.TABLECAPTION, PurchaseLine."Trade Item");

          IF (TradeItem."Application ID" = '') THEN
            ERROR(Text006, TradeItem.TABLECAPTION, TradeItem.FIELDCAPTION("Application ID"),
              TradeItem."Application ID");

          CASE TradeItem."Application ID" OF
            'CMT', 'DAY', 'GRM', 'HUR', 'KGM', 'LTR', 'MIN', 'MLT', 'MMT', 'MTK', 'MTQ', 'MTR', 'PCE', 'TNE': ;
            ELSE
              ERROR(Text006, TradeItem.TABLECAPTION, TradeItem.FIELDCAPTION("Application ID"),
                TradeItem."Application ID");
          END;
        END;

        IF (PurchaseLine."Document Type" <> PurchaseLine."Document Type":: Quote) AND
           (PurchaseLine."Order Date" = 0D)
        THEN
          ERROR(Text006, PurchaseLine.TABLECAPTION, PurchaseLine.FIELDCAPTION("Order Date"),
            PurchaseLine."Order Date");
        //IF (PurchaseLine."Expected Receipt Date" = 0D) OR
        //   (PurchaseLine."Expected Receipt Date" <> PurchaseHeader."Expected Receipt Date") //kz (waits for Oosterberg to support this)
        //THEN
        //  ERROR(Text006, PurchaseLine.TABLECAPTION, PurchaseLine.FIELDCAPTION("Expected Receipt Date"),
        //    PurchaseLine."Expected Receipt Date");

        IF (NOT ConfirmEmptyTradeItem) THEN BEGIN
          WHILE (STRLEN(TradeItem."GTIN Code (Item)") < 14) DO
            TradeItem."GTIN Code (Item)" := '0' + TradeItem."GTIN Code (Item)";
          IF (STRLEN(TradeItem."GTIN Code (Item)") > 14) THEN
            ERROR(Text007, TradeItem.TABLECAPTION, PurchaseLine."Trade Item",
              STRLEN(TradeItem."GTIN Code (Item)"), 14);
        END;
      UNTIL (PurchaseLine.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckResponseSoapFault@1100528330();
    VAR
      FaultCode@1100528301 : Text;
      FaultString@1100528302 : Text;
    BEGIN
      IF (XMLDOMManagement4PS.FindNode(ResponseXML, './/*[local-name()="Fault"]', FoundNode)) THEN BEGIN
        IF (XMLDOMManagement4PS.FindNode(ResponseXML, './/*[local-name()="faultcode"]', FoundNode)) THEN
          FaultCode := FoundNode.InnerText;
        IF (XMLDOMManagement4PS.FindNode(ResponseXML, './/*[local-name()="faultstring"]', FoundNode)) THEN
          FaultString := FoundNode.InnerText;
        IF (XMLDOMManagement4PS.FindNode(ResponseXML, './/*[local-name()="description"]', FoundNode)) THEN
          FaultString := FoundNode.InnerText;
        ERROR(Text001, ConsumedWebServiceLine."Method Name", FaultCode, FaultString);
      END;
    END;

    LOCAL PROCEDURE CheckVendorINSBOU@1100525002(VendorGS1Login@1100525000 : Record 11012132);
    BEGIN
      VendorINSBOULogin.TESTFIELD(URL);
      VendorINSBOULogin.TESTFIELD("User Name");
      VendorINSBOULogin.TESTFIELD(Password);
    END;

    LOCAL PROCEDURE AddDocumentToPurchaseHeader@1100525006(PurchaseHeader@1100525005 : Record 38;FullFileName@1100525000 : Text);
    VAR
      DocumentProperties@1100525002 : Record 11012746;
      PurchasesPayablesSetup@1100528600 : Record 312;
      ExternalDocumentManagement@1100525001 : Codeunit 11012403;
      DocumentLinkManagement@1100525004 : Codeunit 11012401;
      RecRef@1100525007 : RecordRef;
      TargetFileURI@1100528702 : Text;
      StorageType@1100525003 : Option;
    BEGIN
      IF (FullFileName = '') THEN
        EXIT;

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.TESTFIELD("INSBOU Document Type");

      DocumentProperties.INIT;
      DocumentProperties."Document Group" := DocumentMgtSetup."Document Group";
      DocumentProperties."Document Type" := PurchasesPayablesSetup."INSBOU Document Type";
      DocumentProperties.Description := FORMAT(PurchaseHeader."Purchase Order Type") + ' ' + PurchaseHeader."No.";
      DocumentProperties."External Document" := TRUE;
      DocumentProperties.INSERT(TRUE);

      ExternalDocumentManagement.RegisterFile(
        FullFileName, DocumentProperties."Document Type", DocumentProperties."Creation Date",
        TargetFileURI, StorageType);
      DocumentProperties.ValidateStorageURI(StorageType,TargetFileURI);
      DocumentProperties.MODIFY(TRUE);

      RecRef.GETTABLE(PurchaseHeader);

      DocumentLinkManagement.CreateOneDocumentLink(DocumentProperties, RecRef.RECORDID);
    END;

    LOCAL PROCEDURE AddDocumentToSalesInvoiceHeader@1100528810(SalesInvoiceHeader@1100525005 : Record 112;FullFileName@1100525000 : Text);
    VAR
      DocumentProperties@1100525002 : Record 11012746;
      SalesReceivablesSetup@1100528800 : Record 311;
      ExternalDocumentManagement@1100525001 : Codeunit 11012403;
      DocumentLinkManagement@1100525004 : Codeunit 11012401;
      RecRef@1100525007 : RecordRef;
      TargetFileURI@1100528701 : Text;
      StorageType@1100528700 : Option;
    BEGIN
      IF (FullFileName = '') THEN
        EXIT;

      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.TESTFIELD("INSBOU XML Invoice Doc. Type");

      DocumentProperties.INIT;
      DocumentProperties."Document Group" := DocumentMgtSetup."Document Group";
      DocumentProperties."Document Type" := SalesReceivablesSetup."INSBOU XML Invoice Doc. Type";
      DocumentProperties.Description := FORMAT(SalesInvoiceHeader.TABLECAPTION) + ' ' + SalesInvoiceHeader."No.";
      DocumentProperties."External Document" := TRUE;
      DocumentProperties.INSERT(TRUE);

      ExternalDocumentManagement.RegisterFile(
        FullFileName, DocumentProperties."Document Type", DocumentProperties."Creation Date",
        TargetFileURI, StorageType);
      DocumentProperties.ValidateStorageURI(StorageType,TargetFileURI);
      DocumentProperties.MODIFY(TRUE);

      RecRef.GETTABLE(SalesInvoiceHeader);

      DocumentLinkManagement.CreateOneDocumentLink(DocumentProperties, RecRef.RECORDID);
    END;

    LOCAL PROCEDURE GetToggleCodeGetMessage@1100528307(INSBOUAvailableMessage@1100528300 : Record 11020432) : Code[100];
    BEGIN
      EXIT(STRSUBSTNO('%1-%2-%3', INSBOUAvailableMessage."Vendor No.", INSBOUAvailableMessage.Format, INSBOUAvailableMessage.Version));
    END;

    LOCAL PROCEDURE GetToggleCodeDeleteMessage@1100528308(INSBOUAvailableMessage@1100528300 : Record 11020432) : Code[100];
    BEGIN
      EXIT(STRSUBSTNO('%1', INSBOUAvailableMessage."Vendor No."));
    END;

    LOCAL PROCEDURE SetMessageId@1100525007() : Text;
    BEGIN
      EXIT(STRSUBSTNO('%1-%2', ConsumedWebService.Code, ConsumedWebServiceLine."Method Name"));
    END;

    LOCAL PROCEDURE CreateAvailableMessageRec@1100528317(VendorNo@1100528308 : Code[20];MsgId@1100528307 : Text;MsgType@1100528306 : Code[20];MsgVersion@1100528305 : Code[20];MsgDateTime@1100528310 : Text;MsgFormat@1100528311 : Code[20]);
    VAR
      FileManagement@1100528309 : Codeunit 419;
      INSBOUAvailableMessageWS@1100528304 : XMLport 11072005;
      ServerFileName@1100528303 : Text;
      XMLFile@1100528302 : File;
      IStream@1100528301 : InStream;
      XMLDoc@1100528300 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      ServerFileName := FileManagement.ServerTempFileName('xml');
      XMLDoc := XMLDoc.XmlDocument;
      XMLDoc.LoadXml(STRSUBSTNO(
      '<GetAvailableMessagesResponse>'+
      '  <MessageServiceAvailableMessage>'+
      '    <MsgId>%1</MsgId>'+
      '    <MsgDateTime>%2</MsgDateTime>' +
      '    <AvailableFormat>'+
      '      <MsgFormat>%3</MsgFormat>'+
      '      <MsgVersion>%4</MsgVersion>'+
      '    </AvailableFormat>'+
      '    <MsgType>%5</MsgType>'+
      '  </MessageServiceAvailableMessage>' +
      '</GetAvailableMessagesResponse>',
        MsgId, MsgDateTime, MsgFormat, MsgVersion, MsgType));
      XMLDoc.Save(ServerFileName);

      XMLFile.OPEN(ServerFileName);
      XMLFile.CREATEINSTREAM(IStream);
      INSBOUAvailableMessageWS.SetVendorNo(VendorNo);
      INSBOUAvailableMessageWS.SETSOURCE(IStream);
      INSBOUAvailableMessageWS.IMPORT;
      XMLFile.CLOSE;
    END;

    LOCAL PROCEDURE GetValueFromXMLDocByElementTagName@1100528802(IXMLDoc@1100528802 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";ITagName@1100528803 : Text) : Text;
    VAR
      XMLNodeList@1100528801 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLNode@1100528800 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLNodeList := IXMLDoc.GetElementsByTagName(ITagName);
      XMLNode := XMLNodeList.Item(0);
      IF NOT ISNULL(XMLNode) THEN
        EXIT(XMLNode.InnerText);
      EXIT('');
    END;

    LOCAL PROCEDURE GetCustomerConsumedWebServiceLine@1100528803(ICustomerNo@1100528800 : Code[20];ICustWebServiceUrlType@1100528801 : ' ,Invoice (INSBOU),Maintenance Status (INSBOU)';IConsumedWebServiceSeqNo@1100528803 : Integer;VAR OConsumedWebServiceLine@1100528804 : Record 11229798) : Boolean;
    VAR
      CustomerWebserviceURL@1100528802 : Record 11229341;
    BEGIN
      CustomerWebserviceURL.GET(ICustomerNo, ICustWebServiceUrlType);
      CustomerWebserviceURL.TESTFIELD(URL);
      ConsumedWebService.GET(CustomerWebserviceURL."Consumed Web Service Code");
      ConsumedWebServiceLine.GET(ConsumedWebService.Code, 40);
    END;

    LOCAL PROCEDURE GetCustomerWebServiceURL@1100528806(ICustomerNo@1100528800 : Code[20];ICustWebServiceUrlType@1100528801 : ' ,Invoice (INSBOU),Maintenance Status (INSBOU)';IConsumedWebServiceSeqNo@1100528803 : Integer;VAR OConsumedWebServiceLine@1100528804 : Record 11229798) : Boolean;
    VAR
      CustomerWebserviceURL@1100528802 : Record 11229341;
    BEGIN
      CustomerWebserviceURL.GET(ICustomerNo, ICustWebServiceUrlType);
      CustomerWebserviceURL.TESTFIELD(URL);
      ConsumedWebService.GET(CustomerWebserviceURL."Consumed Web Service Code");
      ConsumedWebServiceLine.GET(ConsumedWebService.Code, 40);
    END;

    LOCAL PROCEDURE CreateMessageMaintenanceStatus@1100525012(IMsgType@1100525001 : Text;IMsgVersion@1100525000 : Text);
    VAR
      MessageNode@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FoundNode@1100528500 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLDOMManagement4PS.FindNode(RequestXML, STRSUBSTNO(LocalName, ConsumedWebServiceLine."Request Root Tag"),
        RootNode);

      XMLDOMManagement4PS.AddElement(RootNode, STRSUBSTNO('%1:MsgProperties', ConsumedWebServiceLine."Prefix Method Namespace"),
        '', ConsumedWebServiceLine."Method Namespace", FoundNode);
      XMLDOMManagement4PS.FindNode(RequestXML, STRSUBSTNO(LocalName, 'MsgProperties'), MessageNode);

      XMLDOMManagement4PS.AddElement(MessageNode, STRSUBSTNO('%1:MsgId', ConsumedWebServiceLine."Prefix Method Namespace"),
        DELCHR(CREATEGUID, '<=>', '{}'), ConsumedWebServiceLine."Method Namespace", FoundNode);
      XMLDOMManagement4PS.AddElement(MessageNode, STRSUBSTNO('%1:MsgType', ConsumedWebServiceLine."Prefix Method Namespace"),
        IMsgType, ConsumedWebServiceLine."Method Namespace", FoundNode);
      XMLDOMManagement4PS.AddElement(MessageNode, STRSUBSTNO('%1:MsgFormat', ConsumedWebServiceLine."Prefix Method Namespace"),
        'INSBOU', ConsumedWebServiceLine."Method Namespace", FoundNode);
      XMLDOMManagement4PS.AddElement(MessageNode, STRSUBSTNO('%1:MsgVersion', ConsumedWebServiceLine."Prefix Method Namespace"),
        IMsgVersion, ConsumedWebServiceLine."Method Namespace", FoundNode);
      XMLDOMManagement4PS.AddElement(MessageNode, STRSUBSTNO('%1:MsgDateTime', ConsumedWebServiceLine."Prefix Method Namespace"),
        FORMAT(CURRENTDATETIME, 0, 9), ConsumedWebServiceLine."Method Namespace", FoundNode);
      XMLDOMManagement4PS.AddElement(MessageNode, STRSUBSTNO('%1:MsgContent', ConsumedWebServiceLine."Prefix Method Namespace"),
        '', ConsumedWebServiceLine."Method Namespace", FoundNode);
    END;

    LOCAL PROCEDURE FillSOAPHeaderWithActualData@1100525015(VAR XMLRequest@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";MessageServiceVersion@1100525001 : Text[10]);
    VAR
      HeaderNode@1100525004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CustomInfoNode@1100525003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ApplicationIdElement@1100525002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      AuthenticationInfoNode@1100525005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ApplicationSystemConstants@1100525006 : Codeunit 9015;
      UsernameTokenNode@1100528500 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NodeText@1100528502 : Text[1024];
      Convert@1100528504 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Base64String@1100528503 : Text;
      Encoding@1100528501 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      SecurityNode@1100529900 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLDOMManagement4PS.FindNode(XMLRequest, STRSUBSTNO(LocalName, 'Header'), HeaderNode);
      CASE MessageServiceVersion OF
        ' ',
        '2.4': BEGIN
          XMLDOMManagement4PS.FindNode(HeaderNode, STRSUBSTNO(LocalName, 'AuthenticationInfo'), AuthenticationInfoNode);
          XMLDOMManagement4PS.FindNode(AuthenticationInfoNode, STRSUBSTNO(LocalName, 'ApplicationId'), ApplicationIdElement);
          ApplicationIdElement.InnerText(ApplicationSystemConstants.ApplicationVersion);
        END;
        '3.0',
        '3.1': BEGIN
          Base64String := Convert.ToBase64String(Encoding.UTF8.GetBytes(DELCHR(CREATEGUID, '<=>', '{}')));
          XMLDOMManagement4PS.FindNode(XMLRequest, STRSUBSTNO(LocalName, 'Security'), SecurityNode);
          XMLDOMManagement4PS.FindNode(SecurityNode, STRSUBSTNO(LocalName, 'UsernameToken'), UsernameTokenNode);
          XMLDOMManagement4PS.AddAttribute(SecurityNode,'xmlns:wsu','http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd');
          NodeText := UsernameTokenNode.InnerXml;
          NodeText += STRSUBSTNO('<wsse:Nonce>%1</wsse:Nonce>', Base64String);
          NodeText += STRSUBSTNO('<wsu:Created>%1</wsu:Created>',FORMAT(CURRENTDATETIME,0,9));
          UsernameTokenNode.InnerXml(NodeText);

          XMLDOMManagement4PS.FindNode(HeaderNode, STRSUBSTNO(LocalName, 'CustomInfo'), CustomInfoNode);
          XMLDOMManagement4PS.FindNode(CustomInfoNode, STRSUBSTNO(LocalName, 'ApplicationId'), ApplicationIdElement);
          ApplicationIdElement.InnerText(ApplicationSystemConstants.ApplicationVersion);
        END;
      END;
    END;

    LOCAL PROCEDURE GetServiceOrderStatusText@1100529900("ServiceOrderNo."@1100529900 : Code[20];StatusCode@1100529901 : Code[10]) : Text;
    VAR
      ServiceOrderStatusText@1100529902 : Record 11072550;
    BEGIN
      EXIT(ServiceOrderStatusText.GetServiceOrderStatusText("ServiceOrderNo.",StatusCode));
    END;

    EVENT ResponseXML@1100525007::NodeInserting@93(sender@1100525001 : Variant;e@1100525000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseXML@1100525007::NodeInserted@94(sender@1100525001 : Variant;e@1100525000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseXML@1100525007::NodeRemoving@95(sender@1100525001 : Variant;e@1100525000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseXML@1100525007::NodeRemoved@96(sender@1100525001 : Variant;e@1100525000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseXML@1100525007::NodeChanging@97(sender@1100525001 : Variant;e@1100525000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseXML@1100525007::NodeChanged@98(sender@1100525001 : Variant;e@1100525000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    {
       Text: LocalName = .//*[local-name()="%1"]
       STRSUBSTNO(LocalName, ...)

      MsgTypes:
      MsgType   MsgType
      OptionNr
       1  ORDERS Order (Customer -> Vendor)
       2  ORDRSP Order Response (Vendor -> Customer)
       3  DESADV Despatch Advice (Vendor -> Customer)
      13  INVOIC Invoice (Vendor -> Customer)
       7  PRICAT Item Data (Vendor -> Customer)
          PRODAT Product Data (Vendor -> Customer)
          TRMMSG Terms Message (conditiebestand) (Vendor -> Customer)
          REQOTE Quote Request (Vendor -> Customer)
          QUOTES Quote (Vendor -> Customer)
          ORDCHG Order Change (Customer -> Vendor)
          ORSSTA Order Status Request (Customer -> Vendor)
          ORDREP Order Status Report (Vendor -> Customer)
          COLINV Collect Invoice (Vendor -> Customer)
          INVRPT Inventory Report (Customer -> Vendor)
    }
    END.
  }
}

