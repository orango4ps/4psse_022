OBJECT Table 349 Dimension Value
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW113.00,4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    Permissions=TableData 480=m;
    OnInsert=BEGIN
               TESTFIELD("Dimension Code");
               TESTFIELD(Code);
               "Global Dimension No." := GetGlobalDimensionNo;

               IF CostAccSetup.GET THEN BEGIN
                 CostAccMgt.UpdateCostCenterFromDim(Rec,Rec,0);
                 CostAccMgt.UpdateCostObjectFromDim(Rec,Rec,0);
               END;

               SetLastModifiedDateTime;
               //**4PS.sn
               IF "Global Dimension No." = 2 THEN
                 IF Plant <> 0 THEN
                   IF NOT UserSetup.GET(USERID) OR NOT UserSetup."Access Plant Cost Objects" THEN
                     ERROR(
                       Text11012000,
                       FIELDCAPTION(Plant),TABLECAPTION);
               ExchangeFSA('I')
               //**4PS.en
             END;

    OnModify=BEGIN
               IF "Dimension Code" <> xRec."Dimension Code" THEN
                 "Global Dimension No." := GetGlobalDimensionNo;
               IF CostAccSetup.GET THEN BEGIN
                 CostAccMgt.UpdateCostCenterFromDim(Rec,xRec,1);
                 CostAccMgt.UpdateCostObjectFromDim(Rec,xRec,1);
               END;

               SetLastModifiedDateTime;

               ExchangeFSA('M');  //**4PS.n
             END;

    OnDelete=VAR
               BudgetQuantRec@11012000 : Record 11012002;
               ProjCostObjCostControlRec@11012001 : Record 11012047;
               ProgressLineRec@11012002 : Record 11012037;
               lCostObjectCostPriceRec@1100485004 : Record 11020356;
               lDepartmentCostPriceRec@1100485003 : Record 11020357;
               lDepCostObjCostPriceRec@1100485002 : Record 11020358;
               lDepTradeAssCostPriceRec@1100485001 : Record 11020359;
               lDepTradeWageCostPriceRec@1100485000 : Record 11020360;
               DimensionValueLocation@1100525000 : Record 11020352;
             BEGIN
               IF CheckIfDimValueUsed THEN
                 ERROR(Text000,GetCheckDimErr);

               DimValueComb.SETRANGE("Dimension 1 Code","Dimension Code");
               DimValueComb.SETRANGE("Dimension 1 Value Code",Code);
               DimValueComb.DELETEALL(TRUE);

               DimValueComb.RESET;
               DimValueComb.SETRANGE("Dimension 2 Code","Dimension Code");
               DimValueComb.SETRANGE("Dimension 2 Value Code",Code);
               DimValueComb.DELETEALL(TRUE);

               DefaultDim.SETRANGE("Dimension Code","Dimension Code");
               DefaultDim.SETRANGE("Dimension Value Code",Code);
               DefaultDim.DELETEALL(TRUE);

               SelectedDim.SETRANGE("Dimension Code","Dimension Code");
               SelectedDim.SETRANGE("New Dimension Value Code",Code);
               SelectedDim.DELETEALL(TRUE);

               AnalysisSelectedDim.SETRANGE("Dimension Code","Dimension Code");
               AnalysisSelectedDim.SETRANGE("New Dimension Value Code",Code);
               AnalysisSelectedDim.DELETEALL(TRUE);

               //**4PS.sn
               CASE "Global Dimension No." OF
                 1:BEGIN
                     lDepartmentCostPriceRec.SETRANGE("Department Code", Code);
                     lDepartmentCostPriceRec.DELETEALL;

                     lDepCostObjCostPriceRec.SETRANGE("Department Code", Code);
                     lDepCostObjCostPriceRec.DELETEALL;

                     lDepTradeAssCostPriceRec.SETRANGE("Department Code", Code);
                     lDepTradeAssCostPriceRec.DELETEALL;

                     lDepTradeWageCostPriceRec.SETRANGE("Department Code", Code);
                     lDepTradeWageCostPriceRec.DELETEALL;
                   END;
                 2:BEGIN
                     BudgetQuantRec.SETRANGE("Cost Object",Code);
                     BudgetQuantRec.DELETEALL(TRUE);

                     ProjCostObjCostControlRec.SETRANGE("Cost Object",Code);
                     ProjCostObjCostControlRec.DELETEALL;

                     ProgressLineRec.SETRANGE("Cost Object",Code);
                     ProgressLineRec.DELETEALL(TRUE);

                     lCostObjectCostPriceRec.SETRANGE("Cost Object", Code);
                     lCostObjectCostPriceRec.DELETEALL;
                   END;
               END;

               ExchangeFSA('D');
               DimensionValueLocation.SETRANGE("Dimension Code","Dimension Code");
               DimensionValueLocation.SETRANGE("Dimension Value Code",Code);
               DimensionValueLocation.DELETEALL(TRUE);
               //**4PS.en
             END;

    OnRename=VAR
               DimSetEntry2@1100525000 : Record 480;
             BEGIN
               //**4PS.sn  C011722
               DimSetEntry.SETCURRENTKEY("Dimension Value ID");
               DimSetEntry2.SETCURRENTKEY("Dimension Value ID");

               DimSetEntry.SETRANGE("Dimension Value ID", xRec."Dimension Value ID");
               DimSetEntry.SETRANGE("Dimension Code", xRec."Dimension Code");
               DimSetEntry.SETRANGE("Dimension Value Code", xRec.Code);

               IF DimSetEntry.FINDSET THEN
                 REPEAT
                   DimSetEntry2.SETRANGE("Dimension Set ID", DimSetEntry."Dimension Set ID");
                   DimSetEntry2.SETRANGE("Dimension Value ID", DimSetEntry."Dimension Value ID");
                   DimSetEntry2.SETRANGE("Dimension Code", DimSetEntry."Dimension Code");
                   DimSetEntry2.SETRANGE("Dimension Value Code", xRec.Code);
                   IF DimSetEntry2.FINDFIRST THEN BEGIN
                     DimSetEntry2."Dimension Value Code" := Code;
                     DimSetEntry2.MODIFY;
                   END;
                 UNTIL DimSetEntry.NEXT = 0;
               //**4PS.en  C011722

               RenameBudgEntryDim;
               RenameAnalysisViewEntryDim;
               RenameItemBudgEntryDim;
               RenameItemAnalysisViewEntryDim;

               IF CostAccSetup.GET THEN BEGIN
                 CostAccMgt.UpdateCostCenterFromDim(Rec,xRec,3);
                 CostAccMgt.UpdateCostObjectFromDim(Rec,xRec,3);
               END;

               SetLastModifiedDateTime;
               ExchangeFSA('R');  //**4PS.n
             END;

    CaptionML=[ENU=Dimension Value;
               NOR=Dimensjonsverdi;
               SVE=Dimensionsv„rde];
    LookupPageID=Page560;
  }
  FIELDS
  {
    { 1   ;   ;Dimension Code      ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                UpdateMapToICDimensionCode;
                                                              END;

                                                   CaptionML=[ENU=Dimension Code;
                                                              NOR=Dimensjonskode;
                                                              SVE=Dimensionskod];
                                                   NotBlank=Yes }
    { 2   ;   ;Code                ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=FIELD(Global Dimension No.));
                                                   OnValidate=BEGIN
                                                                IF UPPERCASE(Code) = Text002 THEN
                                                                  ERROR(Text003,
                                                                    FIELDCAPTION(Code));
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   NotBlank=Yes }
    { 3   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              NOR=Navn;
                                                              SVE=Namn] }
    { 4   ;   ;Dimension Value Type;Option        ;OnValidate=BEGIN
                                                                IF ("Dimension Value Type" <> "Dimension Value Type"::Standard) AND
                                                                   (xRec."Dimension Value Type" = xRec."Dimension Value Type"::Standard)
                                                                THEN
                                                                  IF CheckIfDimValueUsed THEN
                                                                    ERROR(Text004,GetCheckDimErr);
                                                                Totaling := '';
                                                              END;

                                                   CaptionML=[ENU=Dimension Value Type;
                                                              NOR=Dimensjonsverditype;
                                                              SVE=Dimensionsv„rdetyp];
                                                   OptionCaptionML=[ENU=Standard,Heading,Total,Begin-Total,End-Total;
                                                                    NOR=Standard,Overskrift,Sum,Fra-sum,Til-sum;
                                                                    SVE=Standard,Rubrik,Summa,Fr†n-Summa,Till-Summa];
                                                   OptionString=Standard,Heading,Total,Begin-Total,End-Total }
    { 5   ;   ;Totaling            ;Text250       ;TableRelation=IF (Dimension Value Type=CONST(Total)) "Dimension Value"."Dimension Code" WHERE (Dimension Code=FIELD(Dimension Code));
                                                   OnValidate=BEGIN
                                                                IF NOT ("Dimension Value Type" IN
                                                                        ["Dimension Value Type"::Total,"Dimension Value Type"::"End-Total"]) AND (Totaling <> '')
                                                                THEN
                                                                  FIELDERROR("Dimension Value Type");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Totaling;
                                                              NOR=Sammentelling;
                                                              SVE=Summeringsintervall] }
    { 6   ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              NOR=Sperret;
                                                              SVE=Sp„rrad] }
    { 7   ;   ;Consolidation Code  ;Code20        ;AccessByPermission=TableData 220=R;
                                                   CaptionML=[ENU=Consolidation Code;
                                                              NOR=Konsolideringskode;
                                                              SVE=Konsolideringskod] }
    { 8   ;   ;Indentation         ;Integer       ;CaptionML=[ENU=Indentation;
                                                              NOR=Innrykking;
                                                              SVE=Indrag] }
    { 9   ;   ;Global Dimension No.;Integer       ;CaptionML=[ENU=Global Dimension No.;
                                                              NOR=Nr. p† global dimensjon;
                                                              SVE=Globalt dimensionsnr] }
    { 10  ;   ;Map-to IC Dimension Code;Code20    ;OnValidate=BEGIN
                                                                IF "Map-to IC Dimension Code" <> xRec."Map-to IC Dimension Code" THEN
                                                                  VALIDATE("Map-to IC Dimension Value Code",'');
                                                              END;

                                                   CaptionML=[ENU=Map-to IC Dimension Code;
                                                              NOR=Samkj›r med KI-dimensjonskode;
                                                              SVE=Koppla till konc.int. dim.kod] }
    { 11  ;   ;Map-to IC Dimension Value Code;Code20;
                                                   TableRelation="IC Dimension Value".Code WHERE (Dimension Code=FIELD(Map-to IC Dimension Code));
                                                   CaptionML=[ENU=Map-to IC Dimension Value Code;
                                                              NOR=Samkj›r med KI-dimensjonsverdikode;
                                                              SVE=Koppla t konc.int. dim.v.kod] }
    { 12  ;   ;Dimension Value ID  ;Integer       ;OnValidate=BEGIN
                                                                ERROR(Text006,FIELDCAPTION("Dimension Value ID"));
                                                              END;

                                                   AutoIncrement=Yes;
                                                   CaptionML=[ENU=Dimension Value ID;
                                                              NOR=Dimensjonsverdi-ID;
                                                              SVE=Dimensionsv„rde-ID];
                                                   Editable=No }
    { 8000;   ;Id                  ;GUID          ;CaptionML=[ENU=Id;
                                                              NOR=ID;
                                                              SVE=ID] }
    { 8001;   ;Last Modified Date Time;DateTime   ;CaptionML=[ENU=Last Modified Date Time;
                                                              NOR=Dato/klokkeslett for siste endring;
                                                              SVE=Senast „ndrad, datum och tid] }
    { 11012000;;Cost Type          ;Option        ;OnValidate=BEGIN
                                                                //**4PS
                                                                CASE "Cost Type" OF
                                                                  "Cost Type"::Labor:
                                                                    Price := 0;
                                                                  "Cost Type"::Revenue:
                                                                    BEGIN
                                                                      Price := 0;
                                                                      Norm := 0;
                                                                      "Rate Code" := '';
                                                                    END;
                                                                  ELSE
                                                                    BEGIN
                                                                      Norm := 0;
                                                                      "Rate Code" := '';
                                                                    END;
                                                                END;

                                                                IF ("Cost Type" <> "Cost Type"::Plant) AND (Plant = Plant ::" ") THEN  //*16001.n
                                                                  TESTFIELD("Global Dimension 1 Code", '');                            //*16001.n
                                                              END;

                                                   CaptionML=[ENU=Cost Type;
                                                              NOR=Kostnadstype;
                                                              SVE=Kostnadstyp];
                                                   OptionCaptionML=[ENU=Labor,Material,Subcontracting,Plant,Sundry,Revenue;
                                                                    NOR=Arbeidskraft,Materiale,Underentrepen›r,Maskin,Diverse,Inntekt;
                                                                    SVE=Arbetskraft,Material,Underentreprenad,Maskin,Diverse,Int„kt];
                                                   OptionString=Labor,Material,Subcontracting,Plant,Sundry,Revenue }
    { 11012010;;Rate Code          ;Code10        ;TableRelation="Budget Rate".Code WHERE (Project Filter=FILTER(''));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                CASE "Cost Type" OF
                                                                  "Cost Type"::Material:
                                                                    BEGIN
                                                                      MESSAGE(Text11012001);
                                                                      "Rate Code" := '';
                                                                    END;
                                                                  "Cost Type"::Subcontracting:
                                                                    BEGIN
                                                                      MESSAGE(Text11012002);
                                                                      "Rate Code" := '';
                                                                    END;
                                                                  "Cost Type"::Plant:
                                                                    BEGIN
                                                                      MESSAGE(Text11012003);
                                                                      "Rate Code" := '';
                                                                    END;
                                                                  "Cost Type"::Sundry:
                                                                    BEGIN
                                                                      MESSAGE(Text11012004);
                                                                      "Rate Code" := '';
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Rate Code;
                                                              NOR=Avgiftskode;
                                                              SVE=Avgiftskod];
                                                   Description=Budget/costs }
    { 11012015;;Hour Rate Code (Cost Plus);Code10 ;TableRelation="Hour Rate".Code;
                                                   CaptionML=[ENU=Hour Rate Code (Cost Plus);
                                                              NOR=Timesatskode (Selvkost);
                                                              SVE=Timtaxakod (sj„lvkostnad)];
                                                   Description=Sales }
    { 11012020;;Norm               ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS
                                                                CASE "Cost Type" OF
                                                                  "Cost Type"::Material:
                                                                    BEGIN
                                                                      MESSAGE(Text11012005);
                                                                      Norm := 0;
                                                                    END;
                                                                  "Cost Type"::Subcontracting:
                                                                    BEGIN
                                                                      MESSAGE(Text11012006);
                                                                      Norm := 0;
                                                                    END;
                                                                  "Cost Type"::Plant:
                                                                    BEGIN
                                                                      MESSAGE(Text11012007);
                                                                      Norm := 0;
                                                                    END;
                                                                  "Cost Type"::Sundry:
                                                                    BEGIN
                                                                      MESSAGE(Text11012008);
                                                                      Norm := 0;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Norm;
                                                              NOR=Norm;
                                                              SVE=Norm];
                                                   DecimalPlaces=2: }
    { 11012030;;Price              ;Decimal       ;OnValidate=BEGIN
                                                                //**4PS.sn
                                                                IF NOT PriceInputAllowed THEN BEGIN
                                                                  MESSAGE(Text11012009);
                                                                  Price := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Price;
                                                              NOR=Pris;
                                                              SVE=Pris];
                                                   AutoFormatType=2 }
    { 11012040;;Sales Price        ;Decimal       ;CaptionML=[ENU=Sales Price;
                                                              NOR=Salgspris;
                                                              SVE=F”rs„ljningspris];
                                                   AutoFormatType=2 }
    { 11012050;;Unit of Measure    ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=[ENU=Unit of Measure;
                                                              NOR=M†leenhet;
                                                              SVE=Enhet] }
    { 11012060;;Unit of Time       ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=[ENU=Unit of Time;
                                                              NOR=Tidsenhet;
                                                              SVE=Tidsenhet] }
    { 11012070;;Record Progress    ;Boolean       ;CaptionML=[ENU=Record Progress;
                                                              NOR=Postens fremdrift;
                                                              SVE=Postens f”rlopp] }
    { 11012080;;Purchase Action    ;Code10        ;TableRelation="Purchase Action";
                                                   CaptionML=[ENU=Purchase Action;
                                                              NOR=Innkj›pshandling;
                                                              SVE=Ink”ps†tg„rd] }
    { 11012090;;Wage Component     ;Code10        ;TableRelation=IF (Cost Type=FILTER(Labor..Sundry)) "Wage Component".Code WHERE (Component Type=FILTER(Hours|Expenses));
                                                   CaptionML=[ENU=Wage Component;
                                                              NOR=L›nnsart;
                                                              SVE=L”neart] }
    { 11012100;;Cost Component     ;Code10        ;TableRelation="Cost Component".Code;
                                                   OnValidate=VAR
                                                                CostComponent@1100285500 : Record 11012012;
                                                              BEGIN
                                                                //>>ENH-011
                                                                IF ("Cost Component"<>'') AND CostComponent.GET("Cost Component") THEN
                                                                  IF CostComponent."Cost Type"<>0 THEN
                                                                    TESTFIELD("Cost Type",CostComponent."Cost Type"-1);
                                                                //<<ENH-011
                                                                //**4PS
                                                                CCCostUnitRec.SETRANGE("Cost Object",Code);
                                                                CCCostUnitRec.MODIFYALL("Cost Component","Cost Component");

                                                                CCElemCostUnitRec.SETRANGE("Cost Object",Code);
                                                                CCElemCostUnitRec.MODIFYALL("Cost Component","Cost Component");
                                                              END;

                                                   CaptionML=[ENU=Cost Component;
                                                              NOR=Kostnadskomponent;
                                                              SVE=Kostnadskomponent] }
    { 11012110;;Element            ;Code20        ;TableRelation="Base Element".Code;
                                                   CaptionML=[ENU=Element;
                                                              NOR=Element;
                                                              SVE=Element] }
    { 11012120;;Project Related Name;Text50       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project - Cost Object".Name WHERE (Project No.=FIELD(Project Filter),
                                                                                                          Cost Object=FIELD(Code)));
                                                   CaptionML=[ENU=Project Related Name;
                                                              NOR=Prosjektrelatert navn;
                                                              SVE=Projektrelaterat namn];
                                                   Editable=No }
    { 11012121;;Cost Object Project Related;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("Project - Cost Object" WHERE (Project No.=FIELD(Project Filter),
                                                                                                    Cost Object=FIELD(Code)));
                                                   CaptionML=ENU=Cost Object Project Related;
                                                   Editable=No }
    { 11012122;;Proj. Rel. Cost Object Blocked;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project - Cost Object".Blocked WHERE (Project No.=FIELD(Project Filter),
                                                                                                             Cost Object=FIELD(Code)));
                                                   CaptionML=ENU=Project Related Cost Object Blocked;
                                                   Editable=No }
    { 11012130;;Project Filter     ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Project Filter;
                                                              NOR=Prosjektfilter;
                                                              SVE=Projektfilter] }
    { 11012140;;Wage Coverage Account;Code20      ;TableRelation="G/L Account".No.;
                                                   OnValidate=BEGIN
                                                                //**4PS Rail.n
                                                                IF ("Wage Coverage Account" = '') THEN
                                                                  EXIT;

                                                                IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(UarHrsSetupRec) THEN
                                                                  FIELDERROR("Wage Coverage Account", Text11012011);

                                                                IF NOT UarHrsSetupRec.GET THEN
                                                                  FIELDERROR("Wage Coverage Account", Text11012011);

                                                                IF NOT UarHrsSetupRec."Hour Acc. Rail CLA" THEN
                                                                  FIELDERROR("Wage Coverage Account", Text11012011);
                                                                //**4PS Rail.en
                                                              END;

                                                   CaptionML=[ENU=Wage Coverage Account;
                                                              NOR=Konto for L›nnsdekning;
                                                              SVE=Konto f”r l”net„ckning];
                                                   Description=4PS Rail }
    { 11012150;;Precalc. Surcharge Hours %;Decimal;CaptionML=[ENU=Precalc. Surcharge Hours %;
                                                              NOR=Forh†ndsberegnede tilleggsgebyrtimer %;
                                                              SVE=F”rber. Till„ggsavgiftstimmar %];
                                                   MinValue=0 }
    { 11012160;;Balance Account Plant Hours;Code20;TableRelation="G/L Account";
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Balance Account Plant Hours" <> '' THEN
                                                                  TESTFIELD("Cost Type", "Cost Type"::Plant);
                                                              END;

                                                   CaptionML=[ENU=Balance Account Plant Hours;
                                                              NOR=Motkonto Í maskintimer;
                                                              SVE=Balanskonto] }
    { 11012170;;Company Filter     ;Text30        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Company Name filter;
                                                              NOR=Filter for selskapsnavn;
                                                              SVE=F”retagsnamnsfilter] }
    { 11012180;;Cost Object In Budget;Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Budget Line" WHERE (Project No.=FIELD(Project Filter),
                                                                                          Cost Object=FIELD(Code)));
                                                   CaptionML=[ENU=Cost Object In Budget;
                                                              NOR=Kostnadsobjekt i budsjett;
                                                              SVE=Kostnadsobjekt i budget];
                                                   Editable=No }
    { 11012190;;Global Dimension 1 Code;Code20    ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                //**4PS
                                                                IF "Global Dimension 1 Code" <> '' THEN BEGIN
                                                                  TESTFIELD("Global Dimension No.", 2);
                                                                  //TESTFIELD("Cost Type", "Cost Type"::Plant);  //*16001.o
                                                                  IF ("Cost Type" <> "Cost Type"::Plant) AND ("Cost Type" <> "Cost Type"::Material) AND (Plant = Plant ::" ") THEN  //*16001.n
                                                                    TESTFIELD("Global Dimension 1 Code", '');  //*16001.n
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              NOR=Global dimensjon 1 kode;
                                                              SVE=Global dimension 1 kod];
                                                   CaptionClass='1,1,1' }
    { 11012200;;Contact No. (Company);Code20      ;TableRelation=Contact.No. WHERE (Type=CONST(Company));
                                                   CaptionML=[ENU=Contact No. (Company);
                                                              NOR=Kontaktnr (Selskap);
                                                              SVE=Kontaktnr (f”retag)] }
    { 11012210;;Fixed at Hours Accounting;Boolean ;CaptionML=[ENU=Fixed at Hours Accounting;
                                                              NOR=Fast ved timerapportering;
                                                              SVE=Fast vid tidrapport];
                                                   Description=for use at expenses }
    { 11012220;;FSC Applicable     ;Boolean       ;OnValidate=VAR
                                                                GLSetup@1100525000 : Record 98;
                                                              BEGIN
                                                                //**4PS
                                                                GLSetup.GET;
                                                                TESTFIELD("Dimension Code", GLSetup."Global Dimension 2 Code");  // Only for Cost Objects
                                                              END;

                                                   CaptionML=[ENU=FSS Applicable;
                                                              NOR=FSS-anvendelig;
                                                              SVE=FSS Till„mplig] }
    { 11012230;;Purchaser (Service);Code20        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Purchaser Name");
                                                              END;

                                                   CaptionML=ENU=Purchaser (Service) }
    { 11012231;;Purchaser Name     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD("Purchaser (Service)")));
                                                   CaptionML=[ENU=Purchaser Name;
                                                              NOR=Innkj›perens navn;
                                                              SVE=Ink”parens namn];
                                                   Editable=No }
    { 11012240;;Rental Rate Type Code;Code10      ;TableRelation="Rental Rate Line Type";
                                                   OnValidate=BEGIN
                                                                IF "Rental Rate Type Code" <> '' THEN
                                                                  IF "Cost Type" <> "Cost Type"::Revenue THEN BEGIN
                                                                    IF GUIALLOWED THEN
                                                                      MESSAGE(Text11012012, FIELDCAPTION("Rental Rate Type Code"), FIELDCAPTION("Cost Type"), FORMAT("Cost Type"));
                                                                    "Rental Rate Type Code" := '';
                                                                  END;

                                                                CALCFIELDS("Rental Rate Type", "Rental Rate Type Description")
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Rental Rate Type Code }
    { 11012241;;Rental Rate Type   ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Rental Rate Line Type".Type WHERE (Code=FIELD(Rental Rate Type Code)));
                                                   CaptionML=ENU=Rental Rate Type;
                                                   OptionCaptionML=ENU=Rent,Service Cost,Utilities;
                                                   OptionString=Rent,ServiceCost,Utilities;
                                                   Editable=No }
    { 11012242;;Rental Rate Type Description;Text30;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Rental Rate Line Type".Description WHERE (Code=FIELD(Rental Rate Type Code)));
                                                   CaptionML=ENU=Rental Rate Type Description;
                                                   Editable=No }
    { 11012431;;Proj. Plann. Base Activ. Code;Code10;
                                                   TableRelation="Project Planning Base Activity";
                                                   CaptionML=[ENU=Project Planning Base Activity Code;
                                                              NOR=Prosjektplanlegging Í grunnaktivitetskode;
                                                              SVE=Projektplaneringsbas, aktivitetskod];
                                                   Description=Budget Lines with this Dimension Value as their Cost Object will be linked to a Project Planning Activity with this Activity Code (if any) }
    { 11012450;;VAT Prod. Posting Group;Code20    ;TableRelation="VAT Product Posting Group".Code;
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              NOR=Mva-bokf›ringsgruppe - vare;
                                                              SVE=Moms produktbokf”ringsmall] }
    { 11012550;;Plant              ;Option        ;OnValidate=BEGIN
                                                                //**4PS
                                                                IF Plant <> xRec.Plant THEN
                                                                  IF NOT UserSetup.GET(USERID) OR NOT UserSetup."Access Plant Cost Objects" THEN
                                                                    ERROR(
                                                                      Text11012010,FIELDCAPTION(Plant), UserSetup.FIELDCAPTION("Access Plant Cost Objects"),
                                                                      TRUE, UserSetup.TABLECAPTION, USERID);

                                                                IF ("Cost Type" <> "Cost Type"::Plant) AND ("Cost Type" <> "Cost Type"::Material) AND (Plant = Plant ::" ") THEN  //*16001.n
                                                                  TESTFIELD("Global Dimension 1 Code", '');  //*16001.n
                                                              END;

                                                   CaptionML=[ENU=Plant;
                                                              NOR=Maskin;
                                                              SVE=Maskin];
                                                   OptionCaptionML=[ENU=" ,Hours,Transport,Sundry,Damage,Load/Unload";
                                                                    NOR=" ,Timer,Transport,Diverse,Skade,Laste/Laste av";
                                                                    SVE=" ,Timmar,Transport,Diverse,Skada,Lasta/Lasta av"];
                                                   OptionString=[ ,Hours,Transport,Sundry,Damage,Load/Unload] }
    { 11012560;;Automatic Ext. Texts;Boolean      ;CaptionML=[ENU=Automatic Ext. Texts;
                                                              NOR=Automatisk utv. tekster;
                                                              SVE=Extra textrader] }
    { 11012570;;Allowed in Eng. Estimate;Boolean  ;CaptionML=[ENU=Allowed in Engineering Estimate;
                                                              NOR=Tillatt i teknisk kalkyle;
                                                              SVE=Till†ten i teknisk kalkyl] }
    { 11012580;;Surcharge in Eng. Cost Price;Decimal;
                                                   CaptionML=[ENU=Surcharge % in Eng. Cost Price;
                                                              NOR=Tilleggsgebyr % i tekn. selvkost;
                                                              SVE=Till„ggsavgiftsprocent i tekn. sj„lvkostnadspris];
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 11012590;;Hour Rate Code Engineering;Code10 ;TableRelation="Hour Rate".Code;
                                                   CaptionML=[ENU=Hour Rate Code Engineering;
                                                              NOR=Timesatskode for teknikk;
                                                              SVE=Timtaxakod, teknik] }
    { 11012600;;Serial No.         ;Integer       ;CaptionML=[ENU=Serial No.;
                                                              NOR=Serienr.;
                                                              SVE=Serienr] }
    { 11012620;;Date Filter        ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              NOR=Datofilter;
                                                              SVE=Datumfilter] }
    { 11012630;;Progress Filter    ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Progress Filter;
                                                              NOR=Fremdriftsfilter;
                                                              SVE=F”rloppsfilter] }
    { 11012800;;Base Calendar Code ;Code20        ;TableRelation="Base Calendar";
                                                   CaptionML=[ENU=Base Calendar Code;
                                                              NOR=Hovedkalenderkode;
                                                              SVE=Baskalenderkod] }
    { 11012990;;Export to FSA      ;Boolean       ;CaptionML=[ENU=Export to Field Service;
                                                              NOR=Eksporter til Feltservice;
                                                              SVE=Exportera till f„ltservice];
                                                   Description=Indication new/changed. BDA= Buitendienstadmin. (Field Service Admin.), provisional this is only Field Vision. }
    { 11012991;;Date/Time Export to FSA;DateTime  ;CaptionML=[ENU=Date/Time Export to Field Service;
                                                              NOR=Dato/tid, Eksporter til Feltservice;
                                                              SVE=Datum/tid, export till f„ltservice] }
    { 11012995;;Generic Filter     ;Text50        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Generic Filter;
                                                   Editable=No }
    { 11127974;;CostCenterResponsible;Code20      ;TableRelation=Employee;
                                                   CaptionML=[ENU=Costcenter responsible;
                                                              NOR=Kostsenter - ansvarlig;
                                                              SVE=Kostnadsst„lle ansvarig];
                                                   Description=#SYMB1# }
    { 11127975;;Export to Symbrio  ;Boolean       ;CaptionML=SVE=Exportera till Symbrio }
    { 11128020;;ROT-reduction      ;Boolean       ;CaptionML=[ENU=ROT;
                                                              NOR=ROT;
                                                              SVE=ROT] }
    { 11128270;;Used for surcharge ;Boolean       ;CaptionML=[ENU=Used for surcharge;
                                                              NOR=Brukt til tilleggsavgift;
                                                              SVE=Anv„nds f”r omkostnad];
                                                   Description=IME272 }
    { 11128271;;Exclude Cost Plus  ;Boolean       ;CaptionML=[ENU=Exclude invoicing;
                                                              NOR=Ekskluder fakturering;
                                                              SVE=Exkludera fakturering];
                                                   Description=RFC001 }
  }
  KEYS
  {
    {    ;Dimension Code,Code                     ;Clustered=Yes }
    {    ;Code,Global Dimension No.                }
    {    ;Global Dimension No.                     }
    {    ;Dimension Code,Name                      }
    {    ;Name                                     }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Name,Cost Type                      }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1\You cannot delete it.;NOR=%1\Du kan ikke slette den.;SVE=%1\Du kan inte ta bort den.';
      Text002@1002 : TextConst 'ENU=(CONFLICT);NOR=(KONFLIKT);SVE=(KONFLIKT)';
      Text003@1003 : TextConst 'ENU=%1 can not be (CONFLICT). This name is used internally by the system.;NOR=%1 kan ikke v‘re (KONFLIKT). Dette navnet brukes internt av programmet.;SVE=%1 kan inte vara (KONFLIKT). Detta namn anv„nds internt av systmet.';
      Text004@1004 : TextConst 'ENU=%1\You cannot change the type.;NOR=%1\Du kan ikke endre type.;SVE=%1\Du kan inte „ndra typen.';
      Text005@1005 : TextConst 'ENU=This dimension value has been used in posted or budget entries.;NOR=Denne dimensjonsverdien er brukt i bokf›rte poster eller budsjettposter.;SVE=Dimensionensv„rdet har anv„nts i bokf”rda eller budgeterade transaktioner.';
      Text11012000@11012000 : TextConst 'ENU=You have no permission to add %1 %2s;NOR=Du har ikke tillatelse til † legge til %1 %2;SVE=Du saknar beh”righet att l„gga till %1 %2';
      Text11012001@11012001 : TextConst 'ENU=Rate Code not allowed because Cost Type of this record is Material !;NOR=Satskoden er ikke tillatt fordi kostnadstypen for denne posten er materiale!;SVE=Avgiftskoden „r inte till†ten eftersom kostnadstypen f”r denna post „r material!';
      Text11012002@11012002 : TextConst 'ENU=Rate Code not allowed because Cost Type of this record is Sub Contracting !;NOR=Satskoden er ikke tillatt fordi kostnadstypen for denne posten er underentrepen›r!;SVE=Avgiftskoden „r inte till†ten eftersom kostnadstypen f”r denna post „r legotillverkning!';
      Text11012003@11012003 : TextConst 'ENU=Rate Code not allowed because Cost Type of this record is Plant !;NOR=Satskoden er ikke tillatt fordi kostnadstypen for denne posten er maskin!;SVE=Avgiftskoden „r inte till†ten eftersom kostnadstypen f”r denna post „r Maskin!';
      Text11012004@11012004 : TextConst 'ENU=Rate Code not allowed because Cost Type of this record is Sundry !;NOR=Satskoden er ikke tillatt fordi kostnadstypen for denne post er diverse!;SVE=Avgiftskoden „r inte till†ten eftersom kostnadstypen f”r denna post „r diverse!';
      Text11012005@11012005 : TextConst 'ENU=Norm not allowed because Cost Type of this record is Material !;NOR=Norm ikke tillatt fordi kostnadstypen for denne posten er materiale!;SVE=Normv„rdet „r inte till†tet eftersom kostnadstypen f”r denna post „r material!';
      Text11012006@11012006 : TextConst 'ENU=Norm not allowed because Cost Type of this record is Sub Contracting !;NOR=Norm ikke tillatt fordi kostnadstypen for denne posten er underentrepen›r!;SVE=Normv„rdet „r inte till†tet eftersom kostnadstypen f”r denna post „r legotillverkning!';
      Text11012007@11012007 : TextConst 'ENU=Norm not allowed because Cost Type of this record is Plant !;NOR=Norm ikke tillatt fordi kostnadstypen for denne posten er maskin!;SVE=Normv„rdet „r inte till†tet eftersom kostnadstypen f”r denna post „r Maskin!';
      Text11012008@11012008 : TextConst 'ENU=Norm not allowed because Cost Type of this record is Sundry !;NOR=Norm ikke tillatt fordi kostnadstypen for denne post er diverse!;SVE=Normv„rdet „r inte till†tet eftersom kostnadstypen f”r denna post „r diverse!';
      Text11012009@11012009 : TextConst 'ENU=Unit Price not allowed because Cost Type of this record is Labor !;NOR=Enhetsprisen er ikke tillatt siden Kostnadstypen for denne posten er arbeidskraft!;SVE=Enhetspriset „r inte till†tet eftersom kostnadstypen f”r denna post „r arbetskraft!';
      Text11012010@11012010 : TextConst 'ENU=You have no permission to change %1.\%2 must be %3 in the %4 of %5.;NOR=Du har ikke tillatelse til † endre %1.\%2 m† v‘re %3 i %4 av %5.;SVE=Du saknar beh”righet att „ndra %1.\%2 m†ste vara %3 i %4 av %5.';
      Text11012011@1210190003 : TextConst 'ENU=only allowed for Rail CLA;NOR=kun tillatt for Rail-CLA;SVE=endast till†tet f”r Rail CLA';
      DimSetEntry@1001 : Record 480;
      DimValueComb@1014 : Record 351;
      DefaultDim@1015 : Record 352;
      SelectedDim@1016 : Record 369;
      AnalysisSelectedDim@1021 : Record 7159;
      CostAccSetup@1008 : Record 1108;
      CostAccMgt@1007 : Codeunit 1100;
      Text006@1006 : TextConst 'ENU=You cannot change the value of %1.;NOR=Du kan ikke endre verdien for %1.;SVE=Det g†r inte att „ndra v„rdet p† %1.';
      UarHrsSetupRec@1210190009 : Record 11012600;
      UserSetup@1210190008 : Record 91;
      CCCostUnitRec@1210190007 : Record 11012047;
      CCElemCostUnitRec@1210190006 : Record 11012050;
      CheckDimErr@1017 : Text[250];
      UsedInPostedEntries@1018 : Boolean;
      UsedInBudgetEntries@1019 : Boolean;
      DPA_Management@1100000999 : Codeunit 11012783;
      FPSLicenseManagement@1100528500 : Codeunit 11229289;
      Text11012012@1100528502 : TextConst 'ENU=%1 not allowed because %2 of this record is %3!';

    [External]
    PROCEDURE CheckIfDimValueUsed@1() : Boolean;
    BEGIN
      DimSetEntry.RESET; //**4PS.n
      DimSetEntry.SETCURRENTKEY("Dimension Value ID");
      DimSetEntry.SETRANGE("Dimension Value ID","Dimension Value ID");
      EXIT(NOT DimSetEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE GetCheckDimErr@2() : Text[250];
    BEGIN
      EXIT(Text005);
    END;

    LOCAL PROCEDURE RenameBudgEntryDim@3();
    VAR
      GLBudget@1002 : Record 95;
      GLBudgetEntry@1003 : Record 96;
      GLBudgetEntry2@1001 : Record 96;
      BudgDimNo@1000 : Integer;
    BEGIN
      GLBudget.LOCKTABLE;
      IF GLBudget.FIND('-') THEN
        REPEAT
        UNTIL GLBudget.NEXT = 0;
      FOR BudgDimNo := 1 TO 4 DO BEGIN
        CASE TRUE OF
          BudgDimNo = 1:
            GLBudget.SETRANGE("Budget Dimension 1 Code","Dimension Code");
          BudgDimNo = 2:
            GLBudget.SETRANGE("Budget Dimension 2 Code","Dimension Code");
          BudgDimNo = 3:
            GLBudget.SETRANGE("Budget Dimension 3 Code","Dimension Code");
          BudgDimNo = 4:
            GLBudget.SETRANGE("Budget Dimension 4 Code","Dimension Code");
        END;
        IF GLBudget.FIND('-') THEN BEGIN
          GLBudgetEntry.SETCURRENTKEY("Budget Name","G/L Account No.","Business Unit Code","Global Dimension 1 Code");
          REPEAT
            GLBudgetEntry.SETRANGE("Budget Name",GLBudget.Name);
            CASE TRUE OF
              BudgDimNo = 1:
                GLBudgetEntry.SETRANGE("Budget Dimension 1 Code",xRec.Code);
              BudgDimNo = 2:
                GLBudgetEntry.SETRANGE("Budget Dimension 2 Code",xRec.Code);
              BudgDimNo = 3:
                GLBudgetEntry.SETRANGE("Budget Dimension 3 Code",xRec.Code);
              BudgDimNo = 4:
                GLBudgetEntry.SETRANGE("Budget Dimension 4 Code",xRec.Code);
            END;
            IF GLBudgetEntry.FIND('-') THEN
              REPEAT
                GLBudgetEntry2 := GLBudgetEntry;
                CASE TRUE OF
                  BudgDimNo = 1:
                    GLBudgetEntry2."Budget Dimension 1 Code" := Code;
                  BudgDimNo = 2:
                    GLBudgetEntry2."Budget Dimension 2 Code" := Code;
                  BudgDimNo = 3:
                    GLBudgetEntry2."Budget Dimension 3 Code" := Code;
                  BudgDimNo = 4:
                    GLBudgetEntry2."Budget Dimension 4 Code" := Code;
                END;
                GLBudgetEntry2.MODIFY;
              UNTIL GLBudgetEntry.NEXT = 0;
            GLBudgetEntry.RESET;
          UNTIL GLBudget.NEXT = 0;
        END;
        GLBudget.RESET;
      END;
    END;

    LOCAL PROCEDURE RenameAnalysisViewEntryDim@5();
    VAR
      AnalysisView@1001 : Record 363;
      AnalysisViewEntry@1002 : Record 365;
      AnalysisViewEntry2@1003 : Record 365;
      AnalysisViewBudgEntry@1004 : Record 366;
      AnalysisViewBudgEntry2@1005 : Record 366;
      DimensionNo@1000 : Integer;
    BEGIN
      AnalysisView.LOCKTABLE;
      IF AnalysisView.FIND('-') THEN
        REPEAT
        UNTIL AnalysisView.NEXT = 0;

      FOR DimensionNo := 1 TO 4 DO BEGIN
        CASE TRUE OF
          DimensionNo = 1:
            AnalysisView.SETRANGE("Dimension 1 Code","Dimension Code");
          DimensionNo = 2:
            AnalysisView.SETRANGE("Dimension 2 Code","Dimension Code");
          DimensionNo = 3:
            AnalysisView.SETRANGE("Dimension 3 Code","Dimension Code");
          DimensionNo = 4:
            AnalysisView.SETRANGE("Dimension 4 Code","Dimension Code");
        END;
        IF AnalysisView.FIND('-') THEN
          REPEAT
            AnalysisViewEntry.SETRANGE("Analysis View Code",AnalysisView.Code);
            AnalysisViewBudgEntry.SETRANGE("Analysis View Code",AnalysisView.Code);
            CASE TRUE OF
              DimensionNo = 1:
                BEGIN
                  AnalysisViewEntry.SETRANGE("Dimension 1 Value Code",xRec.Code);
                  AnalysisViewBudgEntry.SETRANGE("Dimension 1 Value Code",xRec.Code);
                END;
              DimensionNo = 2:
                BEGIN
                  AnalysisViewEntry.SETRANGE("Dimension 2 Value Code",xRec.Code);
                  AnalysisViewBudgEntry.SETRANGE("Dimension 2 Value Code",xRec.Code);
                END;
              DimensionNo = 3:
                BEGIN
                  AnalysisViewEntry.SETRANGE("Dimension 3 Value Code",xRec.Code);
                  AnalysisViewBudgEntry.SETRANGE("Dimension 3 Value Code",xRec.Code);
                END;
              DimensionNo = 4:
                BEGIN
                  AnalysisViewEntry.SETRANGE("Dimension 4 Value Code",xRec.Code);
                  AnalysisViewBudgEntry.SETRANGE("Dimension 4 Value Code",xRec.Code);
                END;
            END;
            IF AnalysisViewEntry.FIND('-') THEN
              REPEAT
                AnalysisViewEntry2 := AnalysisViewEntry;
                CASE TRUE OF
                  DimensionNo = 1:
                    AnalysisViewEntry2."Dimension 1 Value Code" := Code;
                  DimensionNo = 2:
                    AnalysisViewEntry2."Dimension 2 Value Code" := Code;
                  DimensionNo = 3:
                    AnalysisViewEntry2."Dimension 3 Value Code" := Code;
                  DimensionNo = 4:
                    AnalysisViewEntry2."Dimension 4 Value Code" := Code;
                END;
                AnalysisViewEntry.DELETE;
                AnalysisViewEntry2.INSERT;
              UNTIL AnalysisViewEntry.NEXT = 0;
            AnalysisViewEntry.RESET;
            IF AnalysisViewBudgEntry.FIND('-') THEN
              REPEAT
                AnalysisViewBudgEntry2 := AnalysisViewBudgEntry;
                CASE TRUE OF
                  DimensionNo = 1:
                    AnalysisViewBudgEntry2."Dimension 1 Value Code" := Code;
                  DimensionNo = 2:
                    AnalysisViewBudgEntry2."Dimension 2 Value Code" := Code;
                  DimensionNo = 3:
                    AnalysisViewBudgEntry2."Dimension 3 Value Code" := Code;
                  DimensionNo = 4:
                    AnalysisViewBudgEntry2."Dimension 4 Value Code" := Code;
                END;
                AnalysisViewBudgEntry.DELETE;
                AnalysisViewBudgEntry2.INSERT;
              UNTIL AnalysisViewBudgEntry.NEXT = 0;
            AnalysisViewBudgEntry.RESET;
          UNTIL AnalysisView.NEXT = 0;
        AnalysisView.RESET;
      END;
    END;

    LOCAL PROCEDURE RenameItemBudgEntryDim@6();
    VAR
      ItemBudget@1003 : Record 7132;
      ItemBudgetEntry@1002 : Record 7134;
      ItemBudgetEntry2@1001 : Record 7134;
      BudgDimNo@1000 : Integer;
    BEGIN
      ItemBudget.LOCKTABLE;
      IF ItemBudget.FIND('-') THEN
        REPEAT
        UNTIL ItemBudget.NEXT = 0;

      FOR BudgDimNo := 1 TO 3 DO BEGIN
        CASE TRUE OF
          BudgDimNo = 1:
            ItemBudget.SETRANGE("Budget Dimension 1 Code","Dimension Code");
          BudgDimNo = 2:
            ItemBudget.SETRANGE("Budget Dimension 2 Code","Dimension Code");
          BudgDimNo = 3:
            ItemBudget.SETRANGE("Budget Dimension 3 Code","Dimension Code");
        END;
        IF ItemBudget.FIND('-') THEN BEGIN
          ItemBudgetEntry.SETCURRENTKEY(
            "Analysis Area","Budget Name","Item No.","Source Type","Source No.",Date,"Location Code","Global Dimension 1 Code");
          REPEAT
            ItemBudgetEntry.SETRANGE("Analysis Area",ItemBudget."Analysis Area");
            ItemBudgetEntry.SETRANGE("Budget Name",ItemBudget.Name);
            CASE TRUE OF
              BudgDimNo = 1:
                ItemBudgetEntry.SETRANGE("Budget Dimension 1 Code",xRec.Code);
              BudgDimNo = 2:
                ItemBudgetEntry.SETRANGE("Budget Dimension 2 Code",xRec.Code);
              BudgDimNo = 3:
                ItemBudgetEntry.SETRANGE("Budget Dimension 3 Code",xRec.Code);
            END;
            IF ItemBudgetEntry.FIND('-') THEN
              REPEAT
                ItemBudgetEntry2 := ItemBudgetEntry;
                CASE TRUE OF
                  BudgDimNo = 1:
                    ItemBudgetEntry2."Budget Dimension 1 Code" := Code;
                  BudgDimNo = 2:
                    ItemBudgetEntry2."Budget Dimension 2 Code" := Code;
                  BudgDimNo = 3:
                    ItemBudgetEntry2."Budget Dimension 3 Code" := Code;
                END;
                ItemBudgetEntry2.MODIFY;
              UNTIL ItemBudgetEntry.NEXT = 0;
            ItemBudgetEntry.RESET;
          UNTIL ItemBudget.NEXT = 0;
        END;
        ItemBudget.RESET;
      END;
    END;

    LOCAL PROCEDURE RenameItemAnalysisViewEntryDim@7();
    VAR
      ItemAnalysisView@1005 : Record 7152;
      ItemAnalysisViewEntry@1004 : Record 7154;
      ItemAnalysisViewEntry2@1003 : Record 7154;
      ItemAnalysisViewBudgEntry@1002 : Record 7156;
      ItemAnalysisViewBudgEntry2@1001 : Record 7156;
      DimensionNo@1000 : Integer;
    BEGIN
      ItemAnalysisView.LOCKTABLE;
      IF ItemAnalysisView.FIND('-') THEN
        REPEAT
        UNTIL ItemAnalysisView.NEXT = 0;

      FOR DimensionNo := 1 TO 3 DO BEGIN
        CASE TRUE OF
          DimensionNo = 1:
            ItemAnalysisView.SETRANGE("Dimension 1 Code","Dimension Code");
          DimensionNo = 2:
            ItemAnalysisView.SETRANGE("Dimension 2 Code","Dimension Code");
          DimensionNo = 3:
            ItemAnalysisView.SETRANGE("Dimension 3 Code","Dimension Code");
        END;
        IF ItemAnalysisView.FIND('-') THEN
          REPEAT
            ItemAnalysisViewEntry.SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area");
            ItemAnalysisViewEntry.SETRANGE("Analysis View Code",ItemAnalysisView.Code);
            ItemAnalysisViewBudgEntry.SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area");
            ItemAnalysisViewBudgEntry.SETRANGE("Analysis View Code",ItemAnalysisView.Code);
            CASE TRUE OF
              DimensionNo = 1:
                BEGIN
                  ItemAnalysisViewEntry.SETRANGE("Dimension 1 Value Code",xRec.Code);
                  ItemAnalysisViewBudgEntry.SETRANGE("Dimension 1 Value Code",xRec.Code);
                END;
              DimensionNo = 2:
                BEGIN
                  ItemAnalysisViewEntry.SETRANGE("Dimension 2 Value Code",xRec.Code);
                  ItemAnalysisViewBudgEntry.SETRANGE("Dimension 2 Value Code",xRec.Code);
                END;
              DimensionNo = 3:
                BEGIN
                  ItemAnalysisViewEntry.SETRANGE("Dimension 3 Value Code",xRec.Code);
                  ItemAnalysisViewBudgEntry.SETRANGE("Dimension 3 Value Code",xRec.Code);
                END;
            END;
            IF ItemAnalysisViewEntry.FIND('-') THEN
              REPEAT
                ItemAnalysisViewEntry2 := ItemAnalysisViewEntry;
                CASE TRUE OF
                  DimensionNo = 1:
                    ItemAnalysisViewEntry2."Dimension 1 Value Code" := Code;
                  DimensionNo = 2:
                    ItemAnalysisViewEntry2."Dimension 2 Value Code" := Code;
                  DimensionNo = 3:
                    ItemAnalysisViewEntry2."Dimension 3 Value Code" := Code;
                END;
                ItemAnalysisViewEntry.DELETE;
                ItemAnalysisViewEntry2.INSERT;
              UNTIL ItemAnalysisViewEntry.NEXT = 0;
            ItemAnalysisViewEntry.RESET;
            IF ItemAnalysisViewBudgEntry.FIND('-') THEN
              REPEAT
                ItemAnalysisViewBudgEntry2 := ItemAnalysisViewBudgEntry;
                CASE TRUE OF
                  DimensionNo = 1:
                    ItemAnalysisViewBudgEntry2."Dimension 1 Value Code" := Code;
                  DimensionNo = 2:
                    ItemAnalysisViewBudgEntry2."Dimension 2 Value Code" := Code;
                  DimensionNo = 3:
                    ItemAnalysisViewBudgEntry2."Dimension 3 Value Code" := Code;
                END;
                ItemAnalysisViewBudgEntry.DELETE;
                ItemAnalysisViewBudgEntry2.INSERT;
              UNTIL ItemAnalysisViewBudgEntry.NEXT = 0;
            ItemAnalysisViewBudgEntry.RESET;
          UNTIL ItemAnalysisView.NEXT = 0;
        ItemAnalysisView.RESET;
      END;
    END;

    [External]
    PROCEDURE LookUpDimFilter@57(Dim@1000 : Code[20];VAR Text@1001 : Text) : Boolean;
    VAR
      DimVal@1002 : Record 349;
      DimValList@1003 : Page 560;
    BEGIN
      IF Dim = '' THEN
        EXIT(FALSE);
      DimValList.LOOKUPMODE(TRUE);
      DimVal.SETRANGE("Dimension Code",Dim);
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        Text := DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END;
      EXIT(FALSE)
    END;

    [External]
    PROCEDURE LookupDimValue@24(DimCode@1000 : Code[20];VAR DimValueCode@1001 : Code[20]);
    VAR
      DimValue@1003 : Record 349;
      DimValuesList@1002 : Page 537;
    BEGIN
      DimValue.SETRANGE("Dimension Code",DimCode);
      DimValuesList.LOOKUPMODE := TRUE;
      DimValuesList.SETTABLEVIEW(DimValue);
      IF DimValue.GET(DimCode,DimValueCode) THEN
        DimValuesList.SETRECORD(DimValue);
      IF DimValuesList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValuesList.GETRECORD(DimValue);
        DimValueCode := DimValue.Code;
      END;
    END;

    LOCAL PROCEDURE GetGlobalDimensionNo@8() : Integer;
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      CASE "Dimension Code" OF
        GeneralLedgerSetup."Global Dimension 1 Code":
          EXIT(1);
        GeneralLedgerSetup."Global Dimension 2 Code":
          EXIT(2);
        GeneralLedgerSetup."Shortcut Dimension 3 Code":
          EXIT(3);
        GeneralLedgerSetup."Shortcut Dimension 4 Code":
          EXIT(4);
        GeneralLedgerSetup."Shortcut Dimension 5 Code":
          EXIT(5);
        GeneralLedgerSetup."Shortcut Dimension 6 Code":
          EXIT(6);
        GeneralLedgerSetup."Shortcut Dimension 7 Code":
          EXIT(7);
        GeneralLedgerSetup."Shortcut Dimension 8 Code":
          EXIT(8);
        ELSE
          EXIT(0);
      END;
    END;

    LOCAL PROCEDURE SetLastModifiedDateTime@39();
    BEGIN
      "Last Modified Date Time" := CURRENTDATETIME;
    END;

    LOCAL PROCEDURE UpdateMapToICDimensionCode@4();
    VAR
      Dimension@1000 : Record 348;
    BEGIN
      Dimension.GET("Dimension Code");
      VALIDATE("Map-to IC Dimension Code",Dimension."Map-to IC Dimension Code");
    END;

    PROCEDURE PriceInputAllowed@1210190000() : Boolean;
    VAR
      WageCompRec@1210190004 : Record 11012014;
    BEGIN
      //**4PS
      IF "Cost Type" = "Cost Type"::Revenue THEN
        EXIT(FALSE);

      IF NOT ("Cost Type" = "Cost Type"::Labor) THEN
        EXIT(TRUE);

      IF "Wage Component" = '' THEN
        EXIT(FALSE);

      WageCompRec.GET("Wage Component");
      EXIT(WageCompRec."Component Type" = WageCompRec."Component Type"::Expenses);
    END;

    PROCEDURE ExchangeFSA@1100485000(IMode@1100485003 : Code[1]);
    VAR
      lvProjSetupRec@1100485001 : Record 315;
      lvFieldVisionExchangeMgtCU@1100485000 : Codeunit 11012091;
    BEGIN
      //**4PS.n
      IF IMode = 'I' THEN BEGIN
        "Export to FSA" := FALSE;
        "Date/Time Export to FSA" := 0DT;
      END;
      lvProjSetupRec.GET;
      IF lvProjSetupRec."Field Service Active" THEN BEGIN
        IF IMode <> 'D' THEN BEGIN
          "Export to FSA" := TRUE;
          IF IMode = 'R' THEN
            lvFieldVisionExchangeMgtCU.StoreDeletedDimensionValue(xRec);
        END ELSE BEGIN
          lvFieldVisionExchangeMgtCU.StoreDeletedDimensionValue(Rec);
        END;
      END;
    END;

    PROCEDURE DPA_GetFieldNoDepartmentFilter@1100000993() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(0);
    END;

    PROCEDURE DPA_GetFiltersFltrGrp@1100000997(FilterGroupNo@1100525000 : Integer) FilterText : Text[250];
    BEGIN
      //**4PS Generated Code - Do Not Change
      FILTERGROUP(FilterGroupNo);
      FilterText := COPYSTR(GETFILTERS, 1, MAXSTRLEN(FilterText));
      FILTERGROUP(0);
    END;

    PROCEDURE DPA_SetFilters@1100000998(Context@1100525000 : Text[30]) : Boolean;
    VAR
      RecRef@1100525003 : RecordRef;
      i@1100525004 : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      DPA_Management.SetDPAFilterFromContext(
        RecRef,
        Context,
        DPA_GetFieldNoDepartmentCode,
        DPA_GetFieldNoDepartmentFilter );

      FOR i := 10 DOWNTO 0 DO BEGIN
        RecRef.FILTERGROUP(i);
        FILTERGROUP(i);
        SETVIEW(RecRef.GETVIEW(FALSE));
      END;

      EXIT(DPA_Management.IsHardFilter);
    END;

    LOCAL PROCEDURE DPA_IsActive@1100000999() : Boolean;
    VAR
      DepartmentAuthorizObject@1100526000 : Record 11012466;
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(DepartmentAuthorizObject) THEN
        EXIT(FALSE);

      IF NOT DPA_Management.AuthorizationActive THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE DPA_FindRecWithDPAFilterAppld@1100000989();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN BEGIN
        FIND;
        EXIT;
      END;

      IF NOT DPA_Management.HasTableHardFilter(349) THEN BEGIN
        FIND;
        EXIT;
      END;

      DPA_SetFilters('Table 349');
      IF NOT FIND THEN
        DPA_Management.RaiseDPAErrorForTable(TABLECAPTION);
    END;

    PROCEDURE DPA_ChkDepartmentCodeAllowed@1100000990(IsHardFilter@1100526000 : Boolean);
    VAR
      DimensionManagement@1100526001 : Codeunit 408;
    BEGIN
      //**4PS Generated Code - Do Not Change
      DimensionManagement.CheckDepartmAuthWithFilterType(
        DATABASE::"Dimension Value", "Global Dimension 1 Code", IsHardFilter);
    END;

    PROCEDURE DPA_GetFieldNoDepartmentCode@1100000994() : Integer;
    BEGIN
      //**4PS Generated Code - Do Not Change
      EXIT(FIELDNO("Global Dimension 1 Code"));
    END;

    PROCEDURE DPA_SetDefaultDepartment@1100000996();
    BEGIN
      //**4PS Generated Code - Do Not Change
      IF NOT DPA_IsActive THEN
        EXIT;

      DPA_Management.SetDepartmentCodeUser(TABLENAME, "Global Dimension 1 Code");
    END;

    PROCEDURE CostObjectInBudget@1100528400() : Boolean;
    BEGIN
      //**4PS
      IF (GETFILTER("Project Filter") = '') OR
         (GETFILTER("Project Filter") = '''''')
      THEN
        EXIT(FALSE);
      CALCFIELDS("Cost Object In Budget");
      EXIT("Cost Object In Budget");
    END;

    PROCEDURE DrillDownOnCostObjectInBudget@1100528401();
    VAR
      BudgetLine@1100528400 : Record 11012001;
    BEGIN
      //**4PS
      BudgetLine.SETRANGE("Project No.", GETFILTER("Project Filter"));
      BudgetLine.SETRANGE("Cost Object", Code);
      PAGE.RUN(0, BudgetLine);
    END;

    BEGIN
    {
      --SE EVRY--
      #SYMB1# 130611 JOSV Added field 11012992 - CostCenterResponsible.

      ITERO.MH 140177 4PSSE.I012 Added new field ROT
      140226 ITERO.DL 4PS-023, call
          After changing a dimension value, this value is not updated  in the table Dimension Set Entry (480)
          Original Call C011722 (4PS support system)
      140926 ITERO.DL IME208 field 'wage component' add the component type "Expense Hours" to the TableRelation
      150127 ITERO.DL IME272 added "Used for surcharge" used prognisis on cost objects
      200114 ORANGO.DL moved Symbrio-calls to Events in cod11127975
    }
    END.
  }
}

