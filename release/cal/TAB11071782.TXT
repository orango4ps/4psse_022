OBJECT Table 11071782 Service Order Obj. Spec. Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               TESTFIELD("Processed Date", 0D);
             END;

    CaptionML=[ENU=Service Order Object Specification Line;
               NOR=Objektspesifikasjonsrad for Serviceordre;
               SVE=Objektspecifikationsrad f”r serviceorder];
    LookupPageID=Page11126088;
    DrillDownPageID=Page11126088;
  }
  FIELDS
  {
    { 5   ;   ;Service Order No.   ;Code20        ;TableRelation="Service Order";
                                                   CaptionML=[ENU=Service Order No.;
                                                              NOR=Serviceordrenr.;
                                                              SVE=Serviceordernr];
                                                   Editable=No }
    { 6   ;   ;Service Object No.  ;Code20        ;TableRelation=Service-Object.No.;
                                                   CaptionML=[ENU=Service Object No.;
                                                              NOR=Serviceobjektnr;
                                                              SVE=Serviceobjektnr];
                                                   Editable=No }
    { 10  ;   ;Specification Type  ;Option        ;CaptionML=[ENU=Specification Type;
                                                              NOR=Spesifikasjonstype;
                                                              SVE=Specifikationstyp];
                                                   OptionCaptionML=[ENU=Standard Object,Object,Object Line;
                                                                    NOR=Standardobjekt,Objekt,Objektrad];
                                                   OptionString=Standard Object,Object,Object Line;
                                                   Editable=No }
    { 20  ;   ;Code                ;Code20        ;TableRelation=IF (Specification Type=CONST(Standard Object)) "Standard Object"
                                                                 ELSE IF (Specification Type=CONST(Object)) Service-Object;
                                                   CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   Editable=No }
    { 25  ;   ;Object Line No.     ;Integer       ;CaptionML=[ENU=Object Line No.;
                                                              NOR=Objektradnr.];
                                                   Editable=No }
    { 30  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr];
                                                   Editable=No }
    { 40  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF (xRec.Type <> Type) AND (Type = Type::Group) THEN BEGIN
                                                                  "Field Type" := "Field Type"::" ";
                                                                  "Unit Of Measure" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              NOR=Radtype;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Group,Line;
                                                                    NOR=Gruppe,Rad;
                                                                    SVE=Grupp,Rad];
                                                   OptionString=Group,Line }
    { 50  ;   ;Specification Code  ;Code10        ;TableRelation=IF (Type=CONST(Group)) "Object Specification Group"
                                                                 ELSE IF (Type=CONST(Line),
                                                                          Specification Type=CONST(Standard Object)) "Base Object Specification Line" WHERE (Level=CONST(Standard Object))
                                                                          ELSE IF (Type=CONST(Line),
                                                                                   Specification Type=CONST(Object)) "Base Object Specification Line" WHERE (Level=CONST(Object));
                                                   OnValidate=VAR
                                                                ObjectSpecificationGroup@1100528601 : Record 11071778;
                                                                BaseObjectSpecificationLine@1100528600 : Record 11071779;
                                                              BEGIN
                                                                IF xRec."Specification Code" <> "Specification Code" THEN BEGIN
                                                                  CASE Type OF
                                                                    Type::Group:
                                                                      BEGIN
                                                                        ObjectSpecificationGroup.GET("Specification Code");
                                                                        VALIDATE(Description, ObjectSpecificationGroup.Description);
                                                                      END;
                                                                    Type::Line:
                                                                      BEGIN
                                                                        BaseObjectSpecificationLine.GET("Specification Code");
                                                                        VALIDATE(Description, BaseObjectSpecificationLine.Description);
                                                                        VALIDATE("Field Type", BaseObjectSpecificationLine."Field Type");
                                                                        VALIDATE("Unit Of Measure", BaseObjectSpecificationLine."Unit Of Measure");
                                                                        "Old Value" := '';
                                                                        "New Value" := '';
                                                                      END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Specification Code;
                                                              NOR=Spesifikasjonskode;
                                                              SVE=Specifikationskod] }
    { 60  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 70  ;   ;Field Type          ;Option        ;OnValidate=BEGIN
                                                                IF "Field Type" = "Field Type"::" " THEN
                                                                  TESTFIELD(Type, Type::Group);
                                                              END;

                                                   CaptionML=[ENU=Field Type;
                                                              NOR=Felttype;
                                                              SVE=Field Type];
                                                   OptionCaptionML=[ENU="Date,Value,Text,Option, ";
                                                                    NOR="Dato,Verdi,Tekst,Alternativ, ";
                                                                    SVE="Datum,V„rde,Text,Alternativ, "];
                                                   OptionString=[Date,Value,Text,Option, ];
                                                   Editable=No }
    { 80  ;   ;Unit Of Measure     ;Code10        ;TableRelation="Unit of Measure";
                                                   CaptionML=[ENU=Unit Of Measure;
                                                              NOR=Enhet;
                                                              SVE=Enhet];
                                                   Editable=No }
    { 90  ;   ;Old Value           ;Text80        ;OnValidate=BEGIN
                                                                IF BORG THEN
                                                                  BORGManagement.TestBORGUser;
                                                                EvaluateValue(FALSE);
                                                                IF BORG THEN
                                                                  "Old Value" := BORGManagement.EncodeValue("Old Value");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF LookupValue("Old Value") THEN
                                                                VALIDATE("Old Value");
                                                            END;

                                                   CaptionML=[ENU=Old Value;
                                                              NOR=Gammel verdi;
                                                              SVE=Gammalt v„rde] }
    { 91  ;   ;Old Value (Date)    ;Date          ;CaptionML=ENU=Old Value (Date);
                                                   Editable=No }
    { 92  ;   ;Old Value (Value)   ;Decimal       ;CaptionML=ENU=Old Value (Value);
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 95  ;   ;New Value           ;Text80        ;OnValidate=BEGIN
                                                                IF BORG THEN
                                                                  BORGManagement.TestBORGUser;
                                                                EvaluateValue(TRUE);
                                                                IF BORG THEN
                                                                  "New Value" := BORGManagement.EncodeValue("New Value");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF LookupValue("New Value") THEN
                                                                VALIDATE("New Value");
                                                            END;

                                                   CaptionML=[ENU=New Value;
                                                              NOR=Ny verdi;
                                                              SVE=Nytt v„rde] }
    { 96  ;   ;New Value (Date)    ;Date          ;OnValidate=BEGIN
                                                                IF NOT BORG THEN
                                                                  "New Value" := FORMAT("New Value (Date)");
                                                              END;

                                                   CaptionML=ENU=New Value (Date) }
    { 97  ;   ;New Value (Value)   ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT BORG THEN
                                                                  "New Value" := FORMAT("New Value (Value)", 0, 1);
                                                              END;

                                                   CaptionML=ENU=New Value (Value);
                                                   BlankZero=Yes }
    { 100 ;   ;Specification Group Code;Code10    ;TableRelation="Object Specification Group";
                                                   CaptionML=[ENU=Specification Group Code;
                                                              NOR=Spesifikasjonsgruppekode;
                                                              SVE=Specifikationsgruppkod];
                                                   Editable=No }
    { 110 ;   ;Specification Line No.;Integer     ;CaptionML=[ENU=Specification Line No.;
                                                              NOR=Spesifikasjonsradnr;
                                                              SVE=Specifikationsradnr];
                                                   Editable=No }
    { 120 ;   ;Editable by Field Service;Boolean  ;CaptionML=[ENU=Editable by Field Service;
                                                              NOR=Redigerbar gjennom feltservice;
                                                              SVE=Redigerbar genom f„ltservice];
                                                   Editable=No }
    { 130 ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=[ENU=" ,Received,Approved,Disapproved";
                                                                    NOR=" ,Mottatt,Godkjent,Ikke godkjent";
                                                                    SVE=" ,Mottaget,Godk„nt,Inte godk„nt"];
                                                   OptionString=[ ,Received,Approved,Disapproved] }
    { 140 ;   ;Processed Date      ;Date          ;CaptionML=[ENU=Processed Date;
                                                              NOR=Behandlingsdato;
                                                              SVE=Bearbetad den];
                                                   Editable=No }
    { 150 ;   ;Service Object Description;Text100 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object.Description WHERE (No.=FIELD(Service Object No.)));
                                                   CaptionML=[ENU=Service Object Description;
                                                              NOR=Serviceobjektbeskrivelse;
                                                              SVE=Serviceobjektbeskrivning];
                                                   Editable=No }
    { 155 ;   ;Service Object Description 2;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service-Object."Description 2" WHERE (No.=FIELD(Service Object No.)));
                                                   CaptionML=ENU=Service Object Description 2;
                                                   Editable=No }
    { 160 ;   ;BORG                ;Boolean       ;CaptionML=[ENU=BORG;
                                                              NOR=BORG];
                                                   Editable=No }
    { 170 ;   ;Publish on Service Portal;Boolean  ;CaptionML=[ENU=Publish on Service Portal;
                                                              NOR=Publiser p† Serviceportal;
                                                              SVE=Publicera p† serviceportalen];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Service Order No.,Service Object No.,Specification Type,Code,Object Line No.,Line No.;
                                                   Clustered=Yes }
    {    ;Service Order No.,Service Object No.,Specification Group Code,Line No. }
    {    ;Status,New Value,Processed Date          }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100528601 : TextConst 'ENU=Option Value %1 not found;NOR=Alternativverdi %1 ikke funnet;SVE=Alternativv„rde %1 hittades inte';
      Text002@1100528600 : TextConst 'ENU=t;NOR=t;SVE=t';
      BORGManagement@1100528602 : Codeunit 11012859;
      Text003@1100528603 : TextConst 'ENU=Processed Specification Lines cannot change Status';
      OriginalFiltersSaved@1100528700 : Boolean;
      OriginalFilterRec@1100528701 : Record 11071782;

    PROCEDURE GetObjSpecificationGroupCode@1100528601() : Code[10];
    VAR
      ObjectSpecificationLine@1100528600 : Record 11071781;
    BEGIN
      ObjectSpecificationLine.SETRANGE("Specification Type", "Specification Type");
      ObjectSpecificationLine.SETRANGE(Code, Code);
      ObjectSpecificationLine.SETFILTER("Line No.", '<%1', "Line No.");
      ObjectSpecificationLine.SETRANGE(Type, Type::Group);
      IF ObjectSpecificationLine.FINDLAST THEN
        EXIT(ObjectSpecificationLine."Specification Code");
    END;

    PROCEDURE EvaluateValue@1100528603(NewValue@1100528602 : Boolean);
    VAR
      DummyDate@1100528600 : Date;
      DummyDecimal@1100528601 : Decimal;
      CheckValue@1100528603 : Text[80];
    BEGIN
      IF NewValue THEN BEGIN
        CheckValue := "New Value";
        "New Value (Date)" := 0D;
        "New Value (Value)" := 0;
      END ELSE BEGIN
        CheckValue := "Old Value";
        "Old Value (Date)" := 0D;
        "Old Value (Value)" := 0;
      END;

      IF CheckValue = '' THEN EXIT;
      CASE "Field Type" OF
        "Field Type"::Date:
          BEGIN
            IF LOWERCASE("New Value") = Text002 THEN BEGIN
              CheckValue := FORMAT(TODAY);
              DummyDate := TODAY;
            END ELSE BEGIN
              EVALUATE(DummyDate, CheckValue);
              CheckValue := FORMAT(DummyDate);
            END;
            IF NOT BORG THEN
              IF NewValue THEN
                "New Value (Date)" := DummyDate
              ELSE
                "Old Value (Date)" := DummyDate;
          END;
        "Field Type"::Value:
          BEGIN
            EVALUATE(DummyDecimal, CheckValue);
            CheckValue := FORMAT(DummyDecimal, 0, 1);
            IF NOT BORG THEN
              IF NewValue THEN
                "New Value (Value)" := DummyDecimal
              ELSE
                "Old Value (Value)" := DummyDecimal;
          END;
        "Field Type"::Text:;
        "Field Type"::Option:
          CheckValue := CheckOptionValue(CheckValue);
      END;

      IF NewValue THEN
        "New Value" := CheckValue
      ELSE
        "Old Value" := CheckValue;
    END;

    PROCEDURE CheckOptionValue@1100528604(ICheckValue@1100528601 : Text[80]) : Text[80];
    VAR
      BaseObjectSpecificationOpt@1100528600 : Record 11071780;
    BEGIN
      BaseObjectSpecificationOpt.SETRANGE("Base Object Spec. Line Code", "Specification Code");
      BaseObjectSpecificationOpt.SETRANGE(Description, ICheckValue);
      IF BaseObjectSpecificationOpt.FINDFIRST THEN
        EXIT(BaseObjectSpecificationOpt.Description);
      BaseObjectSpecificationOpt.SETFILTER(Description, '@' + ICheckValue + '*');
      IF BaseObjectSpecificationOpt.COUNT = 1 THEN BEGIN
        BaseObjectSpecificationOpt.FINDFIRST;
        EXIT(BaseObjectSpecificationOpt.Description);
      END;
      ERROR(Text001, ICheckValue);
    END;

    PROCEDURE GetOptionDescriptionFromCode@1210190000(OptionCode@1100528601 : Code[10]) : Text[80];
    VAR
      BaseObjectSpecificationOpt@1100528600 : Record 11071780;
    BEGIN
      BaseObjectSpecificationOpt.SETRANGE("Base Object Spec. Line Code", "Specification Code");
      BaseObjectSpecificationOpt.SETRANGE(Code, OptionCode);
      IF BaseObjectSpecificationOpt.FINDFIRST THEN
        EXIT(BaseObjectSpecificationOpt.Description)
      ELSE
        EXIT(OptionCode);
    END;

    PROCEDURE HandleSpecificationCodeLookup@1100528600(EditMode@1100528600 : Boolean);
    VAR
      ObjectSpecificationGroup@1100528602 : Record 11071778;
      BaseObjectSpecificationLine@1100528601 : Record 11071779;
    BEGIN
      CASE Type OF
        Type::Group:
          BEGIN
            IF ObjectSpecificationGroup.GET("Specification Code") THEN;
            IF PAGE.RUNMODAL(0, ObjectSpecificationGroup) = ACTION::LookupOK THEN
              IF EditMode THEN
                VALIDATE("Specification Code", ObjectSpecificationGroup.Code);
          END;
        Type::Line:
          BEGIN
            IF "Specification Group Code" <> '' THEN
              BaseObjectSpecificationLine.SETFILTER("Specification Group Code", '%1|%2', '', "Specification Group Code");
            IF "Specification Type" = "Specification Type"::"Standard Object" THEN
              BaseObjectSpecificationLine.SETRANGE(Level, BaseObjectSpecificationLine.Level::"Standard Object")
            ELSE
              BaseObjectSpecificationLine.SETRANGE(Level, BaseObjectSpecificationLine.Level::Object);
            IF BaseObjectSpecificationLine.GET("Specification Code") THEN;
            IF PAGE.RUNMODAL(0, BaseObjectSpecificationLine) = ACTION::LookupOK THEN
              IF EditMode THEN
                VALIDATE("Specification Code", BaseObjectSpecificationLine.Code);
          END;
      END;
    END;

    PROCEDURE GetValue@1100528602(INewValue@1100528600 : Boolean;VAR ODecoded@1100528601 : Boolean) : Text[80];
    VAR
      RetValue@1100528602 : Text[80];
    BEGIN
      ODecoded := TRUE;
      IF NOT BORG THEN BEGIN
        CASE "Field Type" OF
          "Field Type"::Date:
            IF INewValue THEN
              EXIT(FORMAT("New Value (Date)"))
            ELSE
              EXIT(FORMAT("Old Value (Date)"));
          "Field Type"::Value:
            IF INewValue THEN BEGIN
              IF "New Value (Value)" <> 0 THEN
                EXIT(FORMAT("New Value (Value)", 0, 1))
              ELSE
                EXIT('');
            END ELSE BEGIN
              IF "Old Value (Value)" <> 0 THEN
                EXIT(FORMAT("Old Value (Value)", 0, 1))
              ELSE
                EXIT('');
            END;
          ELSE
            IF INewValue THEN
              EXIT("New Value")
            ELSE
              EXIT("Old Value");
        END;
      END;
      IF INewValue THEN
        RetValue := "New Value"
      ELSE
        RetValue := "Old Value";
      EXIT(BORGManagement.DecodeValue(RetValue, FALSE, ODecoded));
    END;

    PROCEDURE SetStatusCollectively@1100528605(VAR IOServiceOrderObjSpecLine@1100528601 : Record 11071782;INewStatus@1100528600 : ' ,Received,Approved,Disapproved');
    VAR
      TotalNoOfSpecLines@1100528602 : Integer;
    BEGIN
      TotalNoOfSpecLines := IOServiceOrderObjSpecLine.COUNT;
      IOServiceOrderObjSpecLine.SETRANGE("Processed Date", 0D);
      IF TotalNoOfSpecLines <> IOServiceOrderObjSpecLine.COUNT THEN
        ERROR(Text003);
      IOServiceOrderObjSpecLine.SETRANGE(Type, IOServiceOrderObjSpecLine.Type::Line);
      IF IOServiceOrderObjSpecLine.FINDSET THEN
        REPEAT
          IF IOServiceOrderObjSpecLine.BORG THEN
            BORGManagement.TestBORGUser;
          IF (IOServiceOrderObjSpecLine."Editable by Field Service") OR (INewStatus = INewStatus::" ") THEN BEGIN
            IOServiceOrderObjSpecLine.VALIDATE(Status, INewStatus);
            IOServiceOrderObjSpecLine.MODIFY(TRUE);
          END;
        UNTIL IOServiceOrderObjSpecLine.NEXT = 0;
    END;

    PROCEDURE SetFilterToBeApproved@1100528703();
    VAR
      OriginalFiltersSaved2@1100528701 : Boolean;
      OriginalFilterRec2@1100528700 : Record 11071782;
    BEGIN
      IF OriginalFiltersSaved THEN BEGIN
        OriginalFilterRec2.COPY(OriginalFilterRec);
        OriginalFiltersSaved2 := OriginalFiltersSaved;
        RESET;
        OriginalFilterRec.COPY(OriginalFilterRec2);
        OriginalFiltersSaved := OriginalFiltersSaved2;
        RestoreOriginalFilters;
      END ELSE
        SaveOriginalFilters;

      SETRANGE(Status, Status::Received);
      SETFILTER("New Value", '<>%1', '');
    END;

    PROCEDURE SetFilterToBeApprovedCollective@1100528702();
    VAR
      OriginalFiltersSaved2@1100528701 : Boolean;
      OriginalFilterRec2@1100528700 : Record 11071782;
    BEGIN
      IF NOT OriginalFiltersSaved THEN
        SaveOriginalFilters;

      OriginalFilterRec2.COPY(OriginalFilterRec);
      OriginalFiltersSaved2 := OriginalFiltersSaved;
      RESET;
      OriginalFilterRec.COPY(OriginalFilterRec2);
      OriginalFiltersSaved := OriginalFiltersSaved2;

      SETCURRENTKEY(Status,"New Value","Processed Date");
      SETRANGE(Status, Status::Received);
      SETFILTER("New Value", '<>%1', '');
    END;

    PROCEDURE SetFilterToBeProcessed@1100528700();
    VAR
      OriginalFiltersSaved2@1100528701 : Boolean;
      OriginalFilterRec2@1100528700 : Record 11071782;
    BEGIN
      IF OriginalFiltersSaved THEN BEGIN
        OriginalFilterRec2.COPY(OriginalFilterRec);
        OriginalFiltersSaved2 := OriginalFiltersSaved;
        RESET;
        OriginalFilterRec.COPY(OriginalFilterRec2);
        OriginalFiltersSaved := OriginalFiltersSaved2;
        RestoreOriginalFilters;
      END ELSE
        SaveOriginalFilters;

      SETRANGE(Status, Status::Approved);
      SETFILTER("New Value", '<>%1', '');
      SETRANGE("Processed Date", 0D)
    END;

    PROCEDURE SetFilterToBeProcessedCollective@1100528701();
    VAR
      OriginalFiltersSaved2@1100528701 : Boolean;
      OriginalFilterRec2@1100528700 : Record 11071782;
    BEGIN
      IF NOT OriginalFiltersSaved THEN
        SaveOriginalFilters;

      OriginalFilterRec2.COPY(OriginalFilterRec);
      OriginalFiltersSaved2 := OriginalFiltersSaved;
      RESET;
      OriginalFilterRec.COPY(OriginalFilterRec2);
      OriginalFiltersSaved := OriginalFiltersSaved2;

      SETCURRENTKEY(Status,"New Value","Processed Date");
      SETRANGE(Status, Status::Approved);
      SETFILTER("New Value", '<>%1', '');
      SETRANGE("Processed Date", 0D)
    END;

    LOCAL PROCEDURE SaveOriginalFilters@1100528705();
    VAR
      CurrentFilterGroup@1100528701 : Integer;
      i@1100528700 : Integer;
    BEGIN
      IF OriginalFiltersSaved THEN
        EXIT;

      CurrentFilterGroup := FILTERGROUP;
      FOR i := 0 TO 10 DO BEGIN
        FILTERGROUP(i);
        OriginalFilterRec.FILTERGROUP(i);
        IF Rec.GETFILTERS <> '' THEN
          OriginalFilterRec.COPYFILTERS(Rec);
      END;
      FILTERGROUP(CurrentFilterGroup);

      OriginalFiltersSaved := TRUE;
    END;

    LOCAL PROCEDURE RestoreOriginalFilters@1100528704();
    VAR
      CurrentFilterGroup@1100528700 : Integer;
      i@1100528701 : Integer;
    BEGIN
      IF NOT OriginalFiltersSaved THEN
        EXIT;

      CurrentFilterGroup := FILTERGROUP;
      FOR i := 0 TO 10 DO BEGIN
        FILTERGROUP(i);
        OriginalFilterRec.FILTERGROUP(i);
        IF OriginalFilterRec.GETFILTERS <> '' THEN
          Rec.COPYFILTERS(OriginalFilterRec);
      END;
      FILTERGROUP(CurrentFilterGroup);
    END;

    PROCEDURE LookupValue@1100525000(VAR Value@1100525000 : Text) : Boolean;
    VAR
      BaseObjectSpecificationOpt@1100525001 : Record 11071780;
    BEGIN
      IF "Field Type" = "Field Type"::Option THEN BEGIN
        BaseObjectSpecificationOpt.SETRANGE("Base Object Spec. Line Code", "Specification Code");
        IF PAGE.RUNMODAL(0, BaseObjectSpecificationOpt) = ACTION::LookupOK THEN BEGIN
          Value := BaseObjectSpecificationOpt.Description;
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    END.
  }
}

