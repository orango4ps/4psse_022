OBJECT Codeunit 11012370 Sales Report Text Cond. Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    TableNo=11071891;
    OnRun=BEGIN
            CASE UPPERCASE("Function Name") OF
              'CONTRACTAMOUNTHASVALUE':
                ContractAmountHasValue(Rec);
              'EXTENSIONCONTRACTAMOUNTHASVALUE':
                ExtensionContractAmountHasValue(Rec);
              'TOTALCONTRACTAMOUNTHASVALUE':
                TotalContractAmountHasValue(Rec);
              'BLOCKEDAMOUNTSUBCONTRACTINGHASVALUE':
                BlockedAmountSubcontractingHasValue(Rec);
              'VATCLAUSEDESCRIPTIONSHAVEVALUE':
                VATClauseDescriptionsHaveValue(Rec);
              'ADVANCEPAYMENTAMOUNTHASVALUE':
                AdvancePaymentAmountHasValue(Rec);

              'ALLVALUESAREFILLED':
                AllValuesAreFilled(Rec);
              'VALUESAREFILLED':
                ValuesAreFilled(Rec);

              'INVOICECONTAINSNOPROJECTS':
                InvoiceContainsNoProjects(Rec);
              'INVOICECONTAINSONEPROJECT':
                InvoiceContainsOneProject(Rec);
              'INVOICECONTAINSSEVERALPROJECTS':
                InvoiceContainsSeveralProjects(Rec);

              'INVOICECONTAINSNOEXTENSIONCONTRACTS':
                InvoiceContainsNoExtensionContracts(Rec);
              'INVOICECONTAINSONEEXTENSIONCONTRACT':
                InvoiceContainsOneExtensionContract(Rec);
              'INVOICECONTAINSSEVERALEXTENSIONCONTRACTS':
                InvoiceContainsSeveralExtensionContracts(Rec);

              'INVOICECONTAINSNOPLOTS':
                InvoiceContainsNoPlots(Rec);
              'INVOICECONTAINSONEPLOT':
                InvoiceContainsOnePlot(Rec);
              'INVOICECONTAINSSEVERALPLOTS':
                InvoiceContainsSeveralPlots(Rec);

              'INVOICECONTAINSNOOPTIONS':
                InvoiceContainsNoOptions(Rec);
              'INVOICECONTAINSONEOPTION':
                InvoiceContainsOneOption(Rec);
              'INVOICECONTAINSSEVERALOPTIONS':
                InvoiceContainsSeveralOptions(Rec);

              'INVOICECONTAINSNOSERVICECONTRACTS':
                InvoiceContainsNoServiceContracts(Rec);
              'INVOICECONTAINSONESERVICECONTRACT':
                InvoiceContainsOneServiceContract(Rec);
              'INVOICECONTAINSSEVERALSERVICECONTRACTS':
                InvoiceContainsSeveralServiceContracts(Rec);

              'INVOICECONTAINSNOSERVICEORDERS':
                InvoiceContainsNoServiceOrders(Rec);
              'INVOICECONTAINSONESERVICEORDER':
                InvoiceContainsOneServiceOrder(Rec);
              'INVOICECONTAINSSEVERALSERVICEORDERS':
                InvoiceContainsSeveralServiceOrders(Rec);

              'INVOICECONTAINSNOPLANTLOCATIONS':
                InvoiceContainsNoPlantLocations(Rec);
              'INVOICECONTAINSONEPLANTLOCATION':
                InvoiceContainsOnePlantLocation(Rec);
              'INVOICECONTAINSSEVERALPLANTLOCATIONS':
                InvoiceContainsSeveralPlantLocations(Rec);

              'FIRSTLINEOFINVOICE':
                FirstLineOfInvoice(Rec);
              'LASTLINEOFINVOICE':
                LastLineOfInvoice(Rec);

              'FIRSTLINEOFPROJECT':
                FirstLineOfProject(Rec);
              'LASTLINEOFPROJECT':
                LastLineOfProject(Rec);

              'FIRSTLINEOFSERVICECONTRACT':
                FirstLineOfServiceContract(Rec);
              'LASTLINEOFSERVICECONTRACT':
                LastLineOfServiceContract(Rec);

              'FIRSTLINEOFPLANTLOCATION':
                FirstLineOfPlantLocation(Rec);
              'LASTLINEOFPLANTLOCATION':
                LastLineOfPlantLocation(Rec);

              'FIRSTLINEOFEXTENSIONCONTRACT':
                FirstLineOfExtensionContract(Rec);
              'LASTLINEOFEXTENSIONCONTRACT':
                LastLineOfExtensionContract(Rec);

              'FIRSTLINEOFPLOT':
                FirstLineOfPlot(Rec);
              'LASTLINEOFPLOT':
                LastLineOfPlot(Rec);

              'FIRSTLINEOFCOMMISSION':
                FirstLineOfCommission(Rec);
              'LASTLINEOFCOMMISSION':
                LastLineOfCommission(Rec);

              'FIRSTLINEOFSERVICEORDER':
                FirstLineOfServiceOrder(Rec);
              'LASTLINEOFSERVICEORDER':
                LastLineOfServiceOrder(Rec);

              'FIRSTLINEOFRENTALUNIT':
                FirstLineOfRentalUnit(Rec);
              'LASTLINEOFRENTALUNIT':
                LastLineOfRentalUnit(Rec);

              'FIRSTLINEOFOPTION':
                FirstLineOfOption(Rec);
              'LASTLINEOFOPTION':
                LastLineOfOption(Rec);

              'FIRSTLINEOFSETTLEMENTSHEET':
                FirstLineOfSettlementSheet(Rec);
              'LASTLINEOFSETTLEMENTSHEET':
                LastLineOfSettlementSheet(Rec);

              'FIRSTLINEOFOBJECT':
                FirstLineOfObject(Rec);
              'LASTLINEOFOBJECT':
                LastLineOfObject(Rec);

              'ISNAV2009INVOICE':
                IsNAV2009Invoice(Rec);
              'ISNOTNAV2009INVOICE':
                IsNotNAV2009Invoice(Rec);
              'INSTALLMENTAMOUNTHASVALUE':
                InstallmentAmountHasValue(Rec);
              'SERVICEORDERTYPEIS':
                ServiceOrderTypeIs(Rec);
              'SERVICEORDERTYPEISNOT':
                ServiceOrderTypeIsNot(Rec);

              'SERVICECONTRACTTYPEIS':
                ServiceContractTypeIs(Rec);
              'SERVICECONTRACTTYPEISNOT':
                ServiceContractTypeIsNot(Rec);

              'PROJECTCONTAINSNOPROJECTINSTALLMENTS':
                ProjectContainsNoProjectInstallments(Rec);
              'PROJECTCONTAINSONEPROJECTINSTALLMENT':
                ProjectContainsOneProjectInstallment(Rec);
              'PROJECTCONTAINSSEVERALPROJECTINSTALLMENTS':
                ProjectContainsSeveralProjectInstallments(Rec);

            //4PSSE
              'FIRSTLINEOFTYPE':
                FirstLineOfType(Rec);
              'FIRSTLINEOFPROJ':
                FirstLineOfProj(Rec);
              'ROTAMOUNTHASVALUE':
                ROTAmountHasValue(Rec);
              'LASTLINEOFPROJ':
                LastLineOfProj(Rec);
              'LASTLINEOFTYPE':
                LastLineOfType(Rec);
              'MULTITYPELINES':
                MultiTypeLines(Rec);
              'ISCONVERTEDPROJECT':
                IsConvertedProject(Rec);
              'EXTENSIONINVOICE':
                FirstLineOfExtension(Rec);
              'LASTLINEOFEXTENSION':
                LastLineOfExtension(Rec);
              'EXTENSIONINVOICE2':
                FirstLineOfExtension2(Rec);

            //>>RFC188
              'RUTAMOUNTHASVALUE':
                RUTAmountHasValue(Rec);
              'ROTORRUTAMOUNTHASVALUE':
                ROTorRUTAmountHasValue(Rec);
            //<<RFC188

            //>>RFC240
              'ONLYROTAMOUNTHASVALUE':
                OnlyROTAmountHasValue(Rec);
              'ONLYRUTAMOUNTHASVALUE':
                OnlyRUTAmountHasValue(Rec);
              'ROTANDRUTAMOUNTHASVALUE':
                ROTandRUTAmountHasValue(Rec);
            //<<RFC240

              'ELEMENTINVOICE':
                FirstLineOfElement(Rec);
              'LASTLINEOFELEMENT':
                LastLineOfElement(Rec);
              'ELEMENTINVOICE2':
                FirstLineOfElement2(Rec);
            END;
          END;

  }
  CODE
  {
    VAR
      Text000@1100528400 : TextConst 'ENU=%1 can only be used for %2 %3, %4 or %5. Please change the %6';

    LOCAL PROCEDURE ContractAmountHasValue@1100525001(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := GenericSalesHeader.GetContractAmount(FALSE) > 0;
    END;

    LOCAL PROCEDURE ExtensionContractAmountHasValue@1100528200(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := GenericSalesHeader.GetExtensionContractAmount(TRUE) > 0;
    END;

    LOCAL PROCEDURE TotalContractAmountHasValue@1100528201(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := (GenericSalesHeader.GetContractAmount(FALSE) + GenericSalesHeader.GetExtensionContractAmount(TRUE))> 0;
    END;

    LOCAL PROCEDURE BlockedAmountSubcontractingHasValue@1100525005(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := GenericSalesHeader.GetBlockedAmountSubcontracting > 0;
    END;

    LOCAL PROCEDURE VATClauseDescriptionsHaveValue@1100409000(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
      StringFunctions@1100528403 : Codeunit 11012273;
      Parameters@1100528402 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      GetAllDescriptions@1100528401 : Boolean;
      Index@1100528400 : Integer;
    BEGIN
      StringFunctions.SplitString2(
        SalesReportTextCondition."Function Parameters",
        SalesReportTextCondition.GetParameterSeparator,
        Parameters);
      IF ISNULL(Parameters) THEN
        GetAllDescriptions := TRUE
      ELSE
        IF Parameters.Count = 0 THEN
          GetAllDescriptions := TRUE
        ELSE
          IF EVALUATE(Index, Parameters.Item(0)) THEN;

      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result :=
        GenericSalesHeader.GetVATClauseDescriptions(GetAllDescriptions, Index) <> '';
    END;

    LOCAL PROCEDURE AdvancePaymentAmountHasValue@1100529600(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := GenericSalesHeader.AdvancePaymentInstallmentExists;
    END;

    LOCAL PROCEDURE AllValuesAreFilled@1100528405(VAR SalesReportTextCondition@1100528400 : Record 11071891);
    VAR
      MandatoryValueNos@1100528403 : ARRAY [10] OF Integer;
      I@1100528404 : Integer;
    BEGIN
      FOR I := 1 TO 10 DO
        MandatoryValueNos[I] := I;

      MandatoryValuesAreFilled(SalesReportTextCondition, MandatoryValueNos);
    END;

    LOCAL PROCEDURE ValuesAreFilled@1100528410(VAR SalesReportTextCondition@1100528400 : Record 11071891);
    VAR
      StringFunctions@1100528402 : Codeunit 11012273;
      Parameters@1100528401 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      MandatoryValueNos@1100528403 : ARRAY [10] OF Integer;
      I@1100528404 : Integer;
      ValueNo@1100528405 : Integer;
    BEGIN
      StringFunctions.SplitString2(
        SalesReportTextCondition."Function Parameters",
        SalesReportTextCondition.GetParameterSeparator,
        Parameters);
      IF ISNULL(Parameters) THEN
        EXIT;

      FOR I := 1 TO Parameters.Count DO
        IF EVALUATE(ValueNo, Parameters.Item(I - 1)) THEN
          IF I <= 10 THEN
            MandatoryValueNos[I] := ValueNo;

      MandatoryValuesAreFilled(SalesReportTextCondition, MandatoryValueNos);
    END;

    LOCAL PROCEDURE MandatoryValuesAreFilled@1100528412(VAR SalesReportTextCondition@1100528400 : Record 11071891;MandatoryValueNos@1100528403 : ARRAY [10] OF Integer);
    VAR
      StdSalesReportTextLine@1100528402 : Record 11071890;
      SalesReportTextManagement@1100528401 : Codeunit 11012369;
    BEGIN
      SalesReportTextCondition.Result := FALSE;

      IF StdSalesReportTextLine.GET(
        SalesReportTextCondition."Document Type",
        SalesReportTextCondition."Text Line Type",
        SalesReportTextCondition."Language Code",
        SalesReportTextCondition."Text Line No.")
      THEN
        IF SalesReportTextManagement.MandatoryValuesAreFilled(
          StdSalesReportTextLine, SalesReportTextCondition."Record ID",
          SalesReportTextCondition."Sequence No.", MandatoryValueNos)
        THEN
          SalesReportTextCondition.Result := TRUE;
    END;

    LOCAL PROCEDURE InvoiceContainsNoProjects@1100528402(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfProjects(SalesReportTextCondition) = 0 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsOneProject@1100528403(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfProjects(SalesReportTextCondition) = 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsSeveralProjects@1100528404(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfProjects(SalesReportTextCondition) > 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE GetNoOfProjects@1100528409(SalesReportTextCondition@1100528400 : Record 11071891) : Integer;
    VAR
      TempGenericSalesHeader@1100528403 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100528402 : TEMPORARY Record 11071889;
      TempJob@1100528401 : TEMPORARY Record 11072003;
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER("Job No.", '<>''''');
      IF TempGenericSalesLine.FINDSET THEN
        REPEAT
          TempJob."No." := TempGenericSalesLine."Job No.";
          IF TempJob.INSERT THEN;
        UNTIL TempGenericSalesLine.NEXT = 0;
      EXIT(TempJob.COUNT);
    END;

    LOCAL PROCEDURE InvoiceContainsNoExtensionContracts@1100528407(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfExtensionContracts(SalesReportTextCondition) = 0 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsOneExtensionContract@1100528406(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfExtensionContracts(SalesReportTextCondition) = 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsSeveralExtensionContracts@1100528408(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfExtensionContracts(SalesReportTextCondition) > 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE GetNoOfExtensionContracts@1100528414(SalesReportTextCondition@1100528400 : Record 11071891) : Integer;
    VAR
      TempGenericSalesHeader@1100528403 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100528402 : TEMPORARY Record 11071889;
      TempExtensionContract@1100528401 : TEMPORARY Record 11012004;
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER("Job No.", '<>''''');
      TempGenericSalesLine.SETFILTER("Extension Contract", '<>''''');
      IF TempGenericSalesLine.FINDSET THEN
        REPEAT
          TempExtensionContract."Project No." := TempGenericSalesLine."Job No.";
          TempExtensionContract."Contract No." := TempGenericSalesLine."Extension Contract";
          IF TempExtensionContract.INSERT THEN;
        UNTIL TempGenericSalesLine.NEXT = 0;
      EXIT(TempExtensionContract.COUNT);
    END;

    LOCAL PROCEDURE InvoiceContainsNoPlots@1100528439(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfPlots(SalesReportTextCondition) = 0 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsOnePlot@1100528438(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfPlots(SalesReportTextCondition) = 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsSeveralPlots@1100528437(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfPlots(SalesReportTextCondition) > 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE GetNoOfPlots@1100528411(SalesReportTextCondition@1100528400 : Record 11071891) : Integer;
    VAR
      TempGenericSalesHeader@1100528403 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100528402 : TEMPORARY Record 11071889;
      TempPlot@1100528401 : TEMPORARY Record 11012500;
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER("Plot No.", '<>''''');
      IF TempGenericSalesLine.FINDSET THEN
        REPEAT
          TempPlot."Project No." := TempGenericSalesLine."Job No.";
          TempPlot."Plot No." := TempGenericSalesLine."Plot No.";
          IF TempPlot.INSERT THEN;
        UNTIL TempGenericSalesLine.NEXT = 0;
      EXIT(TempPlot.COUNT);
    END;

    LOCAL PROCEDURE InvoiceContainsNoOptions@1100528442(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfOptions(SalesReportTextCondition) = 0 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsOneOption@1100528441(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfOptions(SalesReportTextCondition) = 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsSeveralOptions@1100528440(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfOptions(SalesReportTextCondition) > 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE GetNoOfOptions@1100528413(SalesReportTextCondition@1100528400 : Record 11071891) : Integer;
    VAR
      TempGenericSalesHeader@1100528403 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100528402 : TEMPORARY Record 11071889;
      TempOption@1100528401 : TEMPORARY Record 11012502;
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER(Option, '<>''''');
      IF TempGenericSalesLine.FINDSET THEN
        REPEAT
          TempOption."Project No." := TempGenericSalesLine."Job No.";
          TempOption."Plot No." := TempGenericSalesLine."Plot No.";
          TempOption."House Model" := TempGenericSalesLine."House Model";
          TempOption."Main Group" := TempGenericSalesLine."Main Group";
          TempOption.Group := TempGenericSalesLine.Group;
          TempOption."Sub Group" := TempGenericSalesLine."Sub Group";
          TempOption.Option := TempGenericSalesLine.Option;
          IF TempOption.INSERT THEN;
        UNTIL TempGenericSalesLine.NEXT = 0;
      EXIT(TempOption.COUNT);
    END;

    LOCAL PROCEDURE InvoiceContainsNoServiceContracts@1100528425(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfServiceContracts(SalesReportTextCondition) = 0 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsOneServiceContract@1100528424(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfServiceContracts(SalesReportTextCondition) = 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsSeveralServiceContracts@1100528423(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfServiceContracts(SalesReportTextCondition) > 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE GetNoOfServiceContracts@1100528422(SalesReportTextCondition@1100528400 : Record 11071891) : Integer;
    VAR
      TempGenericSalesHeader@1100528403 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100528402 : TEMPORARY Record 11071889;
      TempServiceContract@1100528401 : TEMPORARY Record 11012812;
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER("Service Contract No.", '<>''''');
      IF TempGenericSalesLine.FINDSET THEN
        REPEAT
          TempServiceContract."No." := TempGenericSalesLine."Service Contract No.";
          IF TempServiceContract.INSERT THEN;
        UNTIL TempGenericSalesLine.NEXT = 0;
      EXIT(TempServiceContract.COUNT);
    END;

    LOCAL PROCEDURE InvoiceContainsNoServiceOrders@1100528429(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfServiceOrders(SalesReportTextCondition) = 0 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsOneServiceOrder@1100528428(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfServiceOrders(SalesReportTextCondition) = 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsSeveralServiceOrders@1100528427(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfServiceOrders(SalesReportTextCondition) > 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE GetNoOfServiceOrders@1100528426(SalesReportTextCondition@1100528400 : Record 11071891) : Integer;
    VAR
      TempGenericSalesHeader@1100528403 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100528402 : TEMPORARY Record 11071889;
      TempServiceOrder@1100528401 : TEMPORARY Record 11012823;
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER("Service Order No.", '<>''''');
      IF TempGenericSalesLine.FINDSET THEN
        REPEAT
          TempServiceOrder."No." := TempGenericSalesLine."Service Order No.";
          IF TempServiceOrder.INSERT THEN;
        UNTIL TempGenericSalesLine.NEXT = 0;
      EXIT(TempServiceOrder.COUNT);
    END;

    LOCAL PROCEDURE InvoiceContainsNoPlantLocations@1100528433(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfPlantLocations(SalesReportTextCondition) = 0 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsOnePlantLocation@1100528432(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfPlantLocations(SalesReportTextCondition) = 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE InvoiceContainsSeveralPlantLocations@1100528431(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfPlantLocations(SalesReportTextCondition) > 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE GetNoOfPlantLocations@1100528430(SalesReportTextCondition@1100528400 : Record 11071891) : Integer;
    VAR
      TempGenericSalesHeader@1100528403 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100528402 : TEMPORARY Record 11071889;
      TempPlantLocation@1100528401 : TEMPORARY Record 11012554;
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER("Plant Location", '<>''''');
      IF TempGenericSalesLine.FINDSET THEN
        REPEAT
          TempPlantLocation.Code := TempGenericSalesLine."Plant Location";
          IF TempPlantLocation.INSERT THEN;
        UNTIL TempGenericSalesLine.NEXT = 0;
      EXIT(TempPlantLocation.COUNT);
    END;

    LOCAL PROCEDURE FirstLineOfInvoice@1100528401(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, 0);
    END;

    LOCAL PROCEDURE LastLineOfInvoice@1100528400(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, 0);
    END;

    LOCAL PROCEDURE FirstLineOfProject@1100525002(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::Job);
    END;

    LOCAL PROCEDURE LastLineOfProject@1100525012(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::Job);
    END;

    LOCAL PROCEDURE FirstLineOfServiceContract@1100525020(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::"Service-Contract");
    END;

    LOCAL PROCEDURE LastLineOfServiceContract@1100525019(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::"Service-Contract");
    END;

    LOCAL PROCEDURE FirstLineOfPlantLocation@1100525022(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::"Plant Location");
    END;

    LOCAL PROCEDURE LastLineOfPlantLocation@1100525021(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::"Plant Location");
    END;

    LOCAL PROCEDURE FirstLineOfExtensionContract@1100525013(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::"Extension Contract");
    END;

    LOCAL PROCEDURE LastLineOfExtensionContract@1100525014(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::"Extension Contract");
    END;

    LOCAL PROCEDURE FirstLineOfPlot@1100525016(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::Plot);
    END;

    LOCAL PROCEDURE LastLineOfPlot@1100525015(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::Plot);
    END;

    LOCAL PROCEDURE FirstLineOfCommission@1100525024(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::Commission);
    END;

    LOCAL PROCEDURE LastLineOfCommission@1100525023(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::Commission);
    END;

    LOCAL PROCEDURE FirstLineOfServiceOrder@1100525009(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::"Service Order");
    END;

    LOCAL PROCEDURE LastLineOfServiceOrder@1100525008(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::"Service Order");
    END;

    LOCAL PROCEDURE FirstLineOfRentalUnit@1100525007(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::"Rental Unit");
    END;

    LOCAL PROCEDURE LastLineOfRentalUnit@1100525003(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::"Rental Unit");
    END;

    LOCAL PROCEDURE FirstLineOfOption@1100525018(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::Option);
    END;

    LOCAL PROCEDURE LastLineOfOption@1100525017(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::Option);
    END;

    LOCAL PROCEDURE FirstLineOfSettlementSheet@1100525029(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::"Settlement Sheet");
    END;

    LOCAL PROCEDURE LastLineOfSettlementSheet@1100525028(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::"Settlement Sheet");
    END;

    LOCAL PROCEDURE FirstLineOfObject@1100525031(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      FirstLineOfSource(SalesReportTextCondition, DATABASE::"Service-Object");
    END;

    LOCAL PROCEDURE LastLineOfObject@1100525030(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      LastLineOfSource(SalesReportTextCondition, DATABASE::"Service-Object");
    END;

    LOCAL PROCEDURE FirstLineOfSource@1100525000(VAR SalesReportTextCondition@1100525000 : Record 11071891;TableNo@1100525007 : Integer);
    VAR
      Type@1100528401 : 'First,Last';
    BEGIN
      FirstOrLastLineOfSource(SalesReportTextCondition, TableNo, Type::First);
    END;

    LOCAL PROCEDURE LastLineOfSource@1100525051(VAR SalesReportTextCondition@1100525000 : Record 11071891;TableNo@1100525007 : Integer);
    VAR
      Type@1100528401 : 'First,Last';
    BEGIN
      FirstOrLastLineOfSource(SalesReportTextCondition, TableNo, Type::Last);
    END;

    LOCAL PROCEDURE FirstOrLastLineOfSource@1100528459(VAR SalesReportTextCondition@1100525000 : Record 11071891;TableNo@1100525007 : Integer;Type@1100528401 : 'First,Last');
    VAR
      CurrGenericSalesLine@1100525008 : Record 11071889;
      LineRecRef@1100528402 : RecordRef;
      LineNoFieldRef@1100528400 : FieldRef;
    BEGIN
      CheckIfFunctionIsUsedForLines(SalesReportTextCondition);
      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      InitLineRecRefForCurrentSalesDocument(CurrGenericSalesLine, LineRecRef);
      SetSourceFilterOnLineRecRef(CurrGenericSalesLine, TableNo, LineRecRef);
      LineNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Line No."));
      IF Type = Type::First THEN
        LineNoFieldRef.SETFILTER('<%1', CurrGenericSalesLine."Line No.")
      ELSE
        LineNoFieldRef.SETFILTER('>%1', CurrGenericSalesLine."Line No.");
      SalesReportTextCondition.Result := LineRecRef.ISEMPTY;
    END;

    LOCAL PROCEDURE CheckIfFunctionIsUsedForLines@1100528444(SalesReportTextCondition@1100528400 : Record 11071891);
    BEGIN
      IF (SalesReportTextCondition."Text Line Type" = SalesReportTextCondition."Text Line Type"::Header) OR
         (SalesReportTextCondition."Text Line Type" = SalesReportTextCondition."Text Line Type"::Footer)
      THEN
        SalesReportTextCondition.FIELDERROR(
          "Function Name",
          STRSUBSTNO(
            Text000,
            SalesReportTextCondition."Function Name",
            SalesReportTextCondition.FIELDCAPTION("Text Line Type"),
            SalesReportTextCondition."Text Line Type"::"Before Detail",
            SalesReportTextCondition."Text Line Type"::Detail,
            SalesReportTextCondition."Text Line Type"::"After Detail",
            SalesReportTextCondition.FIELDCAPTION("Function Name")));
    END;

    LOCAL PROCEDURE InitLineRecRefForCurrentSalesDocument@1100528443(CurrGenericSalesLine@1100528400 : Record 11071889;VAR LineRecRef@1100528401 : RecordRef);
    VAR
      SalesLine@1100528402 : Record 37;
      SalesInvoiceLine@1100528403 : Record 113;
      SalesCrMemoLine@1100528404 : Record 115;
      DocumentNoFieldRef@1100528405 : FieldRef;
    BEGIN
      CASE CurrGenericSalesLine."Document Type" OF
        CurrGenericSalesLine."Document Type"::"Pro Forma Invoice",
        CurrGenericSalesLine."Document Type"::"Pro Forma Credit Memo":
          BEGIN
            SalesLine.SETRANGE("Document Type", CurrGenericSalesLine."Document Type");
            LineRecRef.GETTABLE(SalesLine);
          END;
        CurrGenericSalesLine."Document Type"::"Posted Invoice":
          LineRecRef.GETTABLE(SalesInvoiceLine);
        CurrGenericSalesLine."Document Type"::"Posted Credit Memo":
          LineRecRef.GETTABLE(SalesCrMemoLine);
      END;
      DocumentNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Document No."));
      DocumentNoFieldRef.SETRANGE(CurrGenericSalesLine."Document No.");
    END;

    LOCAL PROCEDURE SetSourceFilterOnLineRecRef@1100525010(CurrGenericSalesLine@1100525000 : Record 11071889;TableNo@1100525001 : Integer;VAR LineRecRef@1100525002 : RecordRef);
    VAR
      JobNoFieldRef@1100528400 : FieldRef;
      ServiceContractNoFieldRef@1100528401 : FieldRef;
      PlantLocationFieldRef@1100528402 : FieldRef;
      ExtensionContractFieldRef@1100528403 : FieldRef;
      PlotNoFieldRef@1100528404 : FieldRef;
      CommissionNoFieldRef@1100528405 : FieldRef;
      ServiceOrderNoFieldRef@1100528406 : FieldRef;
      RentalUnitFieldRef@1100528407 : FieldRef;
      HouseModelFieldRef@1100528408 : FieldRef;
      MainGroupFieldRef@1100528409 : FieldRef;
      GroupFieldRef@1100528410 : FieldRef;
      SubGroupFieldRef@1100528411 : FieldRef;
      OptionFieldRef@1100528412 : FieldRef;
      SettlSheetNoFieldRef@1100528413 : FieldRef;
      ObjectNoFieldRef@1100528414 : FieldRef;
    BEGIN
      JobNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Job No."));
      ServiceContractNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Service Contract No."));
      PlantLocationFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Plant Location"));
      ExtensionContractFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Extension Contract"));
      PlotNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Plot No."));
      CommissionNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Commission No."));
      ServiceOrderNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Service Order No."));
      RentalUnitFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Rental Unit"));
      PlotNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Plot No."));
      HouseModelFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("House Model"));
      MainGroupFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Main Group"));
      GroupFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO(Group));
      SubGroupFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Sub Group"));
      OptionFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO(Option));
      SettlSheetNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Settl.Sheet No."));
      ObjectNoFieldRef := LineRecRef.FIELD(CurrGenericSalesLine.FIELDNO("Object No."));

      CASE TableNo OF
        DATABASE::Job:
          JobNoFieldRef.SETRANGE(CurrGenericSalesLine."Job No.");
        DATABASE::"Service-Contract":
          ServiceContractNoFieldRef.SETRANGE(CurrGenericSalesLine."Service Contract No.");
        DATABASE::"Plant Location":
          PlantLocationFieldRef.SETRANGE(CurrGenericSalesLine."Plant Location");
        DATABASE::"Extension Contract":
          BEGIN
            JobNoFieldRef.SETRANGE(CurrGenericSalesLine."Job No.");
            ExtensionContractFieldRef.SETRANGE(CurrGenericSalesLine."Extension Contract");
          END;
        DATABASE::Plot:
          BEGIN
            JobNoFieldRef.SETRANGE(CurrGenericSalesLine."Job No.");
            PlotNoFieldRef.SETRANGE(CurrGenericSalesLine."Plot No.");
          END;
        DATABASE::Commission:
          BEGIN
            JobNoFieldRef.SETRANGE(CurrGenericSalesLine."Job No.");
            CommissionNoFieldRef.SETRANGE(CurrGenericSalesLine."Commission No.");
          END;
        DATABASE::"Service Order":
          ServiceOrderNoFieldRef.SETRANGE(CurrGenericSalesLine."Service Order No.");
        DATABASE::"Rental Unit":
          BEGIN
            JobNoFieldRef.SETRANGE(CurrGenericSalesLine."Job No.");
            RentalUnitFieldRef.SETRANGE(CurrGenericSalesLine."Rental Unit");
          END;
        DATABASE::Option:
          BEGIN
            JobNoFieldRef.SETRANGE(CurrGenericSalesLine."Job No.");
            PlotNoFieldRef.SETRANGE(CurrGenericSalesLine."Plot No.");
            HouseModelFieldRef.SETRANGE(CurrGenericSalesLine."House Model");
            MainGroupFieldRef.SETRANGE(CurrGenericSalesLine."Main Group");
            GroupFieldRef.SETRANGE(CurrGenericSalesLine.Group);
            SubGroupFieldRef.SETRANGE(CurrGenericSalesLine."Sub Group");
            OptionFieldRef.SETRANGE(CurrGenericSalesLine.Option);
          END;
        DATABASE::"Settlement Sheet":
          BEGIN
            JobNoFieldRef.SETRANGE(CurrGenericSalesLine."Job No.");
            CommissionNoFieldRef.SETRANGE(CurrGenericSalesLine."Commission No.");
            SettlSheetNoFieldRef.SETRANGE(CurrGenericSalesLine."Settl.Sheet No.");
          END;
        DATABASE::"Service-Object":
          ObjectNoFieldRef.SETRANGE(CurrGenericSalesLine."Object No.");
      END;
    END;

    LOCAL PROCEDURE IsNAV2009Invoice@1100528416(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100528400 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := GenericSalesHeader."NAV 2009 Invoice";
    END;

    LOCAL PROCEDURE IsNotNAV2009Invoice@1100528415(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100528400 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := NOT GenericSalesHeader."NAV 2009 Invoice";
    END;

    LOCAL PROCEDURE ServiceOrderTypeIs@1100525035(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      ServiceOrder@1100525002 : Record 11012823;
      CurrGenericSalesLine@1100525001 : Record 11071889;
    BEGIN
      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      IF ServiceOrder.GET(CurrGenericSalesLine."Service Order No.") THEN;

      SalesReportTextCondition.Result := ValueIsPresentInParameters(
        SalesReportTextCondition, ServiceOrder."Order Type");
    END;

    LOCAL PROCEDURE ServiceOrderTypeIsNot@1100525036(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      ServiceOrder@1100525002 : Record 11012823;
      CurrGenericSalesLine@1100525001 : Record 11071889;
    BEGIN
      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      IF ServiceOrder.GET(CurrGenericSalesLine."Service Order No.") THEN;

      SalesReportTextCondition.Result := NOT ValueIsPresentInParameters(
        SalesReportTextCondition, ServiceOrder."Order Type");
    END;

    LOCAL PROCEDURE ServiceContractTypeIs@1100525025(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      ServiceContract@1100525002 : Record 11012812;
      CurrGenericSalesLine@1100525001 : Record 11071889;
    BEGIN
      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      IF ServiceContract.GET(CurrGenericSalesLine."Service Contract No.") THEN;

      SalesReportTextCondition.Result := ValueIsPresentInParameters(
        SalesReportTextCondition, ServiceContract."Contract Type");
    END;

    LOCAL PROCEDURE ServiceContractTypeIsNot@1100525006(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      ServiceContract@1100525002 : Record 11012812;
      CurrGenericSalesLine@1100525001 : Record 11071889;
    BEGIN
      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      IF ServiceContract.GET(CurrGenericSalesLine."Service Contract No.") THEN;

      SalesReportTextCondition.Result := NOT ValueIsPresentInParameters(
        SalesReportTextCondition, ServiceContract."Contract Type");
    END;

    LOCAL PROCEDURE ValueIsPresentInParameters@1100529200(SalesReportTextCondition@1100525001 : Record 11071891;Value@1100525000 : Text) : Boolean;
    VAR
      StringFunctions@1100525004 : Codeunit 11012273;
      Parameters@1100525003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      I@1100525002 : Integer;
    BEGIN
      StringFunctions.SplitString2(
        SalesReportTextCondition."Function Parameters",
        SalesReportTextCondition.GetParameterSeparator,
        Parameters);
      IF ISNULL(Parameters) THEN
        EXIT;

      FOR I := 1 TO Parameters.Count DO
        IF UPPERCASE(Value) = UPPERCASE(Parameters.Item(I - 1)) THEN
          EXIT(TRUE);
    END;

    LOCAL PROCEDURE ProjectContainsNoProjectInstallments@1100529208(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfProjectInstallments(SalesReportTextCondition) = 0 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE ProjectContainsOneProjectInstallment@1100529207(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfProjectInstallments(SalesReportTextCondition) = 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE ProjectContainsSeveralProjectInstallments@1100529206(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    BEGIN
      IF GetNoOfProjectInstallments(SalesReportTextCondition) > 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE GetNoOfProjectInstallments@1100529202(SalesReportTextCondition@1100528400 : Record 11071891) : Integer;
    VAR
      TempGenericSalesHeader@1100528403 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100528402 : TEMPORARY Record 11071889;
      ProjectInstallment@1100529200 : Record 11012018;
      TempProjectInstallment@1100528401 : TEMPORARY Record 11012018;
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER("Job No.", '<>''''');
      IF TempGenericSalesLine.FINDFIRST THEN BEGIN
        ProjectInstallment.SETRANGE("Project No.",TempGenericSalesLine."Job No.");
        IF ProjectInstallment.FINDSET THEN
          REPEAT
            TempProjectInstallment."Project No." := TempGenericSalesLine."Job No.";
            TempProjectInstallment.Principal := TempGenericSalesLine."Sell-to Customer No.";
            TempProjectInstallment."Plot No." := TempGenericSalesLine."Plot No.";
            TempProjectInstallment."Installment No." := ProjectInstallment."Installment No.";
            IF TempProjectInstallment.INSERT THEN;
          UNTIL ProjectInstallment.NEXT = 0;
      END;
      EXIT(TempProjectInstallment.COUNT);
    END;

    LOCAL PROCEDURE FillTempGenericTables@1100525032(SalesReportTextCondition@1100525000 : Record 11071891;VAR GenericSalesHeader@1100525007 : Record 11071888;VAR GenericSalesLine@1100525008 : Record 11071889);
    VAR
      SalesReportTextManagement@1100525009 : Codeunit 11012369;
    BEGIN
      SalesReportTextManagement.FillTempGenericTables(
        SalesReportTextCondition."Record ID", GenericSalesHeader, GenericSalesLine);
    END;

    LOCAL PROCEDURE GetCurrGenericSalesHeader@1100525004(SalesReportTextCondition@1100525000 : Record 11071891;VAR GenericSalesHeader@1100525007 : Record 11071888);
    VAR
      SalesReportTextManagement@1100525008 : Codeunit 11012369;
    BEGIN
      SalesReportTextManagement.GetCurrGenericSalesHeader(SalesReportTextCondition."Record ID", GenericSalesHeader);
    END;

    LOCAL PROCEDURE GetCurrGenericSalesLine@1100525026(SalesReportTextCondition@1100525000 : Record 11071891;VAR GenericSalesLine@1100525007 : Record 11071889);
    VAR
      SalesReportTextManagement@1100525008 : Codeunit 11012369;
    BEGIN
      SalesReportTextManagement.GetCurrGenericSalesLine(SalesReportTextCondition."Record ID", GenericSalesLine);
    END;

    LOCAL PROCEDURE "**ITERO**"@1100409002();
    BEGIN
    END;

    LOCAL PROCEDURE SetSourceFilterOnGenericSalesLines@1100525110(CurrGenericSalesLine@1100525000 : Record 11071889;Level@1100525001 : Integer;VAR GenericSalesLine@1100525002 : Record 11071889);
    BEGIN
      IF Level >= 1 THEN BEGIN
        GenericSalesLine.SETRANGE("Job No.", CurrGenericSalesLine."Job No.");
        GenericSalesLine.SETRANGE("Service Contract No.", CurrGenericSalesLine."Service Contract No.");
        GenericSalesLine.SETRANGE("Plant Location", CurrGenericSalesLine."Plant Location");
        //>> 160602 ITERO.SB Moved filter on serviceorder from level 2 to level 1
        GenericSalesLine.SETRANGE("Service Order No.", CurrGenericSalesLine."Service Order No.");
        //<<

      END;
      IF Level >= 2 THEN BEGIN
        GenericSalesLine.SETRANGE("Extension Contract", CurrGenericSalesLine."Extension Contract");
        GenericSalesLine.SETRANGE("Plot No.", CurrGenericSalesLine."Plot No.");
        GenericSalesLine.SETRANGE("Commission No.", CurrGenericSalesLine."Commission No.");
        //>> 160602 ITERO.SB Moved filter on serviceorder from level 2 to level 1
        //GenericSalesLine.SETRANGE("Service Order No.", CurrGenericSalesLine."Service Order No.");
        //<<
        GenericSalesLine.SETRANGE("Rental Unit", CurrGenericSalesLine."Rental Unit");
        //GenericSalesLine.SETRANGE("Rental Period", CurrSalesCrMemoLine."Rental Period");
      END;
      IF Level >= 3 THEN BEGIN
        GenericSalesLine.SETRANGE(Option, CurrGenericSalesLine.Option);
        GenericSalesLine.SETRANGE("Settl.Sheet No.", CurrGenericSalesLine."Settl.Sheet No.");
        GenericSalesLine.SETRANGE("Object No.", CurrGenericSalesLine."Object No.");
      END;
    END;

    LOCAL PROCEDURE InstallmentAmountHasValue@1100285500(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
    BEGIN
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := GenericSalesHeader.GetInstallmentAmount > 0;
    END;

    LOCAL PROCEDURE FirstLineOfType@1100285501(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      SalesInvoiceHeader@1100525005 : Record 112;
      SalesInvoiceLine@1100525002 : Record 113;
      SalesCrMemoHeader@1100525001 : Record 114;
      SalesCrMemoLine@1100525003 : Record 115;
      SalesHeader@1100525006 : Record 36;
      SalesLine@1100525004 : Record 37;
      TempGenericSalesHeader@1100525010 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100525009 : TEMPORARY Record 11071889;
      CurrGenericSalesLine@1100525008 : Record 11071889;
      Currtype@1100285500 : Integer;
      PrevType@1100285501 : Integer;
      lvFoundCurrentSalesLine@1100409000 : Boolean;
      lvType@1100409001 : 'First,Last';
    BEGIN
      //>> 160205 ITERO.AC IME444 Check if this function has found the first line of type in an earlier loop
      //                          and if not, make a more efficient calculation (but only once).

      // IF SalesReportTextCondition."Invoice Layout Code"='2' THEN BEGIN
      //  SalesReportTextCondition.Result := FALSE;
      //  EXIT;
      // END;
      //
      // IF SalesReportTextCondition."Invoice Layout Code"='3' THEN BEGIN
      //  SalesReportTextCondition.Result := FALSE;
      //  EXIT;
      // END;
      // //>> 190516
      // IF SalesReportTextCondition."Invoice Layout Code"='4' THEN BEGIN
      //  SalesReportTextCondition.Result := FALSE;
      //  EXIT;
      // END;
      IF SalesReportTextCondition."Invoice Layout Code" IN ['2','3','4'] THEN BEGIN
        SalesReportTextCondition.Result := FALSE;
        EXIT;
      END;

      //<<

      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      CheckCurrentFilterScope(SalesReportTextCondition, CurrGenericSalesLine);

      IF GetPreviousResultValue(SalesReportTextCondition, 'FirstLineOfType', TRUE) = '' THEN BEGIN
        FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
        CalculateFirstOrLastLineOfTypes(SalesReportTextCondition, TempGenericSalesLine, CurrGenericSalesLine, lvType::First );
      END;

      IF NOT CheckForPreviousDetailedResult(SalesReportTextCondition, lvFoundCurrentSalesLine, 'FirstLineOfType', CurrGenericSalesLine."Line No.", CurrGenericSalesLine."Cost Type Cost Plus Line") THEN BEGIN
        SalesReportTextCondition.Result := lvFoundCurrentSalesLine;
        EXIT;
      END;

      // The code below should never be reached

      TempGenericSalesHeader.DELETEALL(FALSE);
      TempGenericSalesLine.DELETEALL(FALSE);
      CLEAR(TempGenericSalesHeader);
      CLEAR(TempGenericSalesLine);

      //GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);

      //<< 160205 ITERO.AC IME444

      Currtype := CurrGenericSalesLine."Cost Type Cost Plus Line";//CurrGenericSalesLine.GetSortingType;

      TempGenericSalesLine.SETRANGE("Document Type", CurrGenericSalesLine."Document Type");
      TempGenericSalesLine.SETRANGE("Document No.", CurrGenericSalesLine."Document No.");
      SetSourceFilterOnGenericSalesLines(CurrGenericSalesLine, 1 , TempGenericSalesLine);

      TempGenericSalesLine.SETFILTER("Line No.", '<%1', CurrGenericSalesLine."Line No.");

      SalesReportTextCondition.Result := TRUE;

      IF TempGenericSalesLine.FINDSET THEN REPEAT
        IF TempGenericSalesLine."Cost Object Cost Plus Line" <> '' THEN
          PrevType:=TempGenericSalesLine."Cost Type Cost Plus Line"//TempGenericSalesLine.GetSortingType;
        ELSE
          PrevType:=-1;
        IF PrevType=Currtype THEN
          SalesReportTextCondition.Result := FALSE;
      UNTIL TempGenericSalesLine.NEXT=0;

      // IF TempGenericSalesHeader."Invoice Layout Code"='2' THEN
      //  SalesReportTextCondition.Result := FALSE;
      //
      // IF TempGenericSalesHeader."Invoice Layout Code"='3' THEN
      //  SalesReportTextCondition.Result := FALSE;
      // //>> 190516
      // IF TempGenericSalesHeader."Invoice Layout Code"='4' THEN
      //  SalesReportTextCondition.Result := FALSE;
      IF TempGenericSalesHeader."Invoice Layout Code" IN ['2','3','4'] THEN
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE FirstLineOfProj@1100285502(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      SalesInvoiceHeader@1100525005 : Record 112;
      SalesInvoiceLine@1100525002 : Record 113;
      SalesCrMemoHeader@1100525001 : Record 114;
      SalesCrMemoLine@1100525003 : Record 115;
      SalesHeader@1100525006 : Record 36;
      SalesLine@1100525004 : Record 37;
      TempGenericSalesHeader@1100525010 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100525009 : TEMPORARY Record 11071889;
      TempCategorizedLine@1100285502 : TEMPORARY Record 11071889;
      CurrGenericSalesLine@1100525008 : Record 11071889;
      CurrType@1100285500 : Integer;
      SortingType@1100285503 : Integer;
      CurrLineNo@1100285501 : Integer;
      CurrType2@1100409000 : Code[10];
      SortingType2@1100409001 : Code[10];
      lvFoundCurrentSalesLine@1100409004 : Boolean;
      lvType@1100409002 : 'First,Last';
    BEGIN
      //>> 160205 ITERO.AC IME444 Check if this function has found First line of project in an earlier loop
      //                          and if not, make a more efficient calculation (but only once).

      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      CheckCurrentFilterScope(SalesReportTextCondition, CurrGenericSalesLine);

      IF GetPreviousResultValue(SalesReportTextCondition, 'FirstLineOfProj', FALSE) = '' THEN BEGIN
        FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
        //GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
        CalculateFirstOrLastLineOfProj(SalesReportTextCondition, TempGenericSalesLine, CurrGenericSalesLine, lvType::First );
      END;

      IF NOT CheckForPreviousResult(SalesReportTextCondition, lvFoundCurrentSalesLine, 'FirstLineOfProj', CurrGenericSalesLine."Line No.") THEN BEGIN
        SalesReportTextCondition.Result := lvFoundCurrentSalesLine;
        EXIT;
      END;

      // The code below should never be reached

      TempGenericSalesHeader.DELETEALL(FALSE);
      TempGenericSalesLine.DELETEALL(FALSE);
      CLEAR(TempGenericSalesHeader);
      CLEAR(TempGenericSalesLine);

      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);

      //<< 160205 ITERO.AC IME444

      CurrType := CurrGenericSalesLine."Cost Type Cost Plus Line"+1;//CurrGenericSalesLine.GetSortingType;
      CurrLineNo := CurrGenericSalesLine."Line No.";
      IF CurrGenericSalesLine."Cost Object Cost Plus Line" = '' THEN
        CurrType:=0;

      // IF TempGenericSalesHeader."Invoice Layout Code"='2' THEN
      //  CurrType:=1;
      // IF TempGenericSalesHeader."Invoice Layout Code"='3' THEN
      //  CurrType2:=CurrGenericSalesLine."Extension Contract";
      // //>> 190516
      // IF TempGenericSalesHeader."Invoice Layout Code"='4' THEN
      //  CurrType2:=CurrGenericSalesLine.Element;
      CASE TempGenericSalesHeader."Invoice Layout Code" OF
        '2': CurrType:=1;
        '3': CurrType2:=CurrGenericSalesLine."Extension Contract";
        '4': CurrType2:=CurrGenericSalesLine.Element;
      END;

      // A temporary table is used below to save the SortingType and the LineNo for all sales lines sorted.
      // The function checks then if the current line is the same as the first line in the sorted table.
      TempGenericSalesLine.SETRANGE("Document Type", CurrGenericSalesLine."Document Type");
      TempGenericSalesLine.SETRANGE("Document No.", CurrGenericSalesLine."Document No.");
      SetSourceFilterOnGenericSalesLines(CurrGenericSalesLine, 1 , TempGenericSalesLine);
      IF TempGenericSalesLine.FINDSET THEN REPEAT
        SortingType := TempGenericSalesLine."Cost Type Cost Plus Line"+1;//TempGenericSalesLine.GetSortingType;
        IF TempGenericSalesLine."Cost Object Cost Plus Line" = '' THEN
          SortingType:=0;
      //  IF (TempGenericSalesHeader."Invoice Layout Code"='2') OR (TempGenericSalesHeader."Invoice Layout Code"='3') THEN
        IF TempGenericSalesHeader."Invoice Layout Code" IN ['2','3','4'] THEN //>>190516
          SortingType:=1;
        IF TempGenericSalesHeader."Invoice Layout Code"='3' THEN
          SortingType2:=TempGenericSalesLine."Extension Contract";
        //>> 190516
        IF TempGenericSalesHeader."Invoice Layout Code"='4' THEN
          SortingType2:=TempGenericSalesLine.Element;
        //<<
        IF NOT TempCategorizedLine.GET(TempCategorizedLine."Document Type"::"Invoice Proposal",
                                       SortingType,
                                       TempGenericSalesLine."Line No.") THEN
        BEGIN
          TempCategorizedLine.INIT;
          TempCategorizedLine."Document Type" := TempCategorizedLine."Document Type"::"Invoice Proposal";
          TempCategorizedLine."Document No." := FORMAT(SortingType);
          IF TempGenericSalesHeader."Invoice Layout Code"='3' THEN
            TempCategorizedLine."Document No." := TempGenericSalesLine."Extension Contract";
          //>> 190516
          IF TempGenericSalesHeader."Invoice Layout Code"='4' THEN
            TempCategorizedLine."Document No." := TempGenericSalesLine.Element;
          //<<
          TempCategorizedLine."Line No." := TempGenericSalesLine."Line No.";
          TempCategorizedLine.INSERT;
        END;

      UNTIL TempGenericSalesLine.NEXT=0;

      SalesReportTextCondition.Result := FALSE;

      IF TempCategorizedLine.FINDFIRST THEN BEGIN
        IF (FORMAT(CurrType) = TempCategorizedLine."Document No.") AND
           (CurrLineNo = TempCategorizedLine."Line No.") THEN
          SalesReportTextCondition.Result := TRUE;

        IF TempGenericSalesHeader."Invoice Layout Code"='3' THEN BEGIN
          IF (CurrType2 = TempCategorizedLine."Document No.") AND
             (CurrLineNo = TempCategorizedLine."Line No.") THEN
            SalesReportTextCondition.Result := TRUE;
        END;
        //>> 190516
        IF TempGenericSalesHeader."Invoice Layout Code"='4' THEN BEGIN
          IF (CurrType2 = TempCategorizedLine."Document No.") AND
             (CurrLineNo = TempCategorizedLine."Line No.") THEN
            SalesReportTextCondition.Result := TRUE;
        END;
        //<<
      END;
    END;

    LOCAL PROCEDURE ROTAmountHasValue@1100285503(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
    BEGIN
      //>> 140317 ITERO.SB
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := GenericSalesHeader.GetROT(1) > 0;
      //<<
    END;

    LOCAL PROCEDURE LastLineOfProj@1100285504(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      SalesInvoiceHeader@1100525005 : Record 112;
      SalesInvoiceLine@1100525002 : Record 113;
      SalesCrMemoHeader@1100525001 : Record 114;
      SalesCrMemoLine@1100525003 : Record 115;
      SalesHeader@1100525006 : Record 36;
      SalesLine@1100525004 : Record 37;
      TempGenericSalesHeader@1100525010 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100525009 : TEMPORARY Record 11071889;
      TempCategorizedLine@1100285502 : TEMPORARY Record 11071889;
      CurrGenericSalesLine@1100525008 : Record 11071889;
      CurrType@1100285500 : Integer;
      SortingType@1100285503 : Integer;
      CurrLineNo@1100285501 : Integer;
      CurrType2@1100409000 : Code[10];
      lvType@1100409001 : 'First,Last';
      lvFoundCurrentSalesLine@1100409002 : Boolean;
    BEGIN
      //>> 160205 ITERO.AC IME444 Check if this function has found the last line of project in an earlier loop
      //                          and if not, make a more efficient calculation (but only once).

      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      CheckCurrentFilterScope(SalesReportTextCondition, CurrGenericSalesLine);

      IF GetPreviousResultValue(SalesReportTextCondition, 'LastLineOfProj', FALSE) = '' THEN BEGIN
        FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
        //GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
        CalculateFirstOrLastLineOfProj(SalesReportTextCondition, TempGenericSalesLine, CurrGenericSalesLine, lvType::Last );
      END;

      IF NOT CheckForPreviousResult(SalesReportTextCondition, lvFoundCurrentSalesLine, 'LastLineOfProj', CurrGenericSalesLine."Line No.") THEN BEGIN
        SalesReportTextCondition.Result := lvFoundCurrentSalesLine;
        EXIT;
      END;

      // The code below should never be reached

      TempGenericSalesHeader.DELETEALL(FALSE);
      TempGenericSalesLine.DELETEALL(FALSE);
      CLEAR(TempGenericSalesHeader);
      CLEAR(TempGenericSalesLine);

      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);

      //<< 160205 ITERO.AC IME444

      CurrType := CurrGenericSalesLine."Cost Type Cost Plus Line";//CurrGenericSalesLine.GetSortingType;
      CurrLineNo := CurrGenericSalesLine."Line No.";
      IF CurrGenericSalesLine."Cost Object Cost Plus Line" = '' THEN
        CurrType:=0;

      // IF (TempGenericSalesHeader."Invoice Layout Code"='2') THEN
      //  CurrType:=1;
      // IF TempGenericSalesHeader."Invoice Layout Code"='3' THEN
      //  CurrType2:=CurrGenericSalesLine."Extension Contract";
      // //>> 190516
      // IF TempGenericSalesHeader."Invoice Layout Code"='4' THEN
      //  CurrType2:=CurrGenericSalesLine.Element;
      CASE TempGenericSalesHeader."Invoice Layout Code" OF
        '2': CurrType:=1;
        '3': CurrType2:=CurrGenericSalesLine."Extension Contract";
        '4': CurrType2:=CurrGenericSalesLine.Element;
      END;

      // A temporary table is used below to save the SortingType and the LineNo for all sales lines sorted.
      // The function checks then if the current line is the same as the last line in the sorted table.
      TempGenericSalesLine.SETRANGE("Document Type", CurrGenericSalesLine."Document Type");
      TempGenericSalesLine.SETRANGE("Document No.", CurrGenericSalesLine."Document No.");
      SetSourceFilterOnGenericSalesLines(CurrGenericSalesLine, 1 , TempGenericSalesLine);
      IF TempGenericSalesLine.FINDSET THEN REPEAT
        SortingType := TempGenericSalesLine."Cost Type Cost Plus Line"+1;//TempGenericSalesLine.GetSortingType;
        IF TempGenericSalesLine."Cost Object Cost Plus Line" = '' THEN
          SortingType:=0;
      //  IF (TempGenericSalesHeader."Invoice Layout Code"='2') OR (TempGenericSalesHeader."Invoice Layout Code"='3') THEN
        IF TempGenericSalesHeader."Invoice Layout Code" IN ['2','3','4'] THEN //190516
          SortingType:=1;

        IF NOT TempCategorizedLine.GET(TempCategorizedLine."Document Type"::"Invoice Proposal",
                                       SortingType,
                                       TempGenericSalesLine."Line No.") THEN
        BEGIN
          TempCategorizedLine.INIT;
          TempCategorizedLine."Document Type" := TempCategorizedLine."Document Type"::"Invoice Proposal";
          TempCategorizedLine."Document No." := FORMAT(SortingType);
          IF TempGenericSalesHeader."Invoice Layout Code"='3' THEN
            TempCategorizedLine."Document No." := TempGenericSalesLine."Extension Contract";
          //>> 190516
          IF TempGenericSalesHeader."Invoice Layout Code"='4' THEN
            TempCategorizedLine."Document No." := TempGenericSalesLine.Element;
          TempCategorizedLine."Line No." := TempGenericSalesLine."Line No.";
          TempCategorizedLine.INSERT;
        END;

      UNTIL TempGenericSalesLine.NEXT=0;

      SalesReportTextCondition.Result := FALSE;

      IF TempCategorizedLine.FINDLAST THEN BEGIN
        IF (FORMAT(CurrType) = TempCategorizedLine."Document No.") AND
           (CurrLineNo = TempCategorizedLine."Line No.") THEN
          SalesReportTextCondition.Result := TRUE;

        IF TempGenericSalesHeader."Invoice Layout Code"='3' THEN BEGIN
          IF (CurrType2 = TempCategorizedLine."Document No.") AND
             (CurrLineNo = TempCategorizedLine."Line No.") THEN
            SalesReportTextCondition.Result := TRUE;
        END;
        //>> 190516
        IF TempGenericSalesHeader."Invoice Layout Code"='4' THEN BEGIN
          IF (CurrType2 = TempCategorizedLine."Document No.") AND
             (CurrLineNo = TempCategorizedLine."Line No.") THEN
            SalesReportTextCondition.Result := TRUE;
        END;
      END;
    END;

    LOCAL PROCEDURE LastLineOfType@1100285505(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      SalesInvoiceHeader@1100525005 : Record 112;
      SalesInvoiceLine@1100525002 : Record 113;
      SalesCrMemoHeader@1100525001 : Record 114;
      SalesCrMemoLine@1100525003 : Record 115;
      SalesHeader@1100525006 : Record 36;
      SalesLine@1100525004 : Record 37;
      TempGenericSalesHeader@1100525010 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100525009 : TEMPORARY Record 11071889;
      CurrGenericSalesLine@1100525008 : Record 11071889;
      Currtype@1100285500 : Integer;
      PrevType@1100285501 : Integer;
      lvTest@1100409000 : Text[128];
      lvFoundCurrentSalesLine@1100409001 : Boolean;
      lvType@1100409002 : 'First,Last';
    BEGIN
      //>> 160205 ITERO.AC IME444 Check if this function has found the last line of type in an earlier loop
      //                          and if not, make a more efficient calculation (but only once).

      // IF SalesReportTextCondition."Invoice Layout Code"='2' THEN BEGIN
      //  SalesReportTextCondition.Result := FALSE;
      //  EXIT;
      // END;
      //
      // IF SalesReportTextCondition."Invoice Layout Code"='3' THEN BEGIN
      //  SalesReportTextCondition.Result := FALSE;
      //  EXIT;
      // END;
      // //>> 190516
      // IF SalesReportTextCondition."Invoice Layout Code"='4' THEN BEGIN
      //  SalesReportTextCondition.Result := FALSE;
      //  EXIT;
      // END;
      IF SalesReportTextCondition."Invoice Layout Code" IN ['2','3','4'] THEN BEGIN
        SalesReportTextCondition.Result := FALSE;
        EXIT;
      END;

      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      CheckCurrentFilterScope(SalesReportTextCondition, CurrGenericSalesLine);

      IF CurrGenericSalesLine."Cost Object Cost Plus Line" = '' THEN BEGIN
        SalesReportTextCondition.Result := FALSE;
        EXIT;
      END;

      IF GetPreviousResultValue(SalesReportTextCondition, 'LastLineOfType', TRUE) = '' THEN BEGIN
        FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
        CalculateFirstOrLastLineOfTypes(SalesReportTextCondition, TempGenericSalesLine, CurrGenericSalesLine, lvType::Last);
      END;

      IF NOT CheckForPreviousDetailedResult(SalesReportTextCondition, lvFoundCurrentSalesLine, 'LastLineOfType', CurrGenericSalesLine."Line No.", CurrGenericSalesLine."Cost Type Cost Plus Line") THEN BEGIN
        SalesReportTextCondition.Result := lvFoundCurrentSalesLine;
        EXIT;
      END;

      // The code below should never be reached

      TempGenericSalesHeader.DELETEALL(FALSE);
      TempGenericSalesLine.DELETEALL(FALSE);
      CLEAR(TempGenericSalesHeader);
      CLEAR(TempGenericSalesLine);

      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      //<< 160205 ITERO.AC IME444

      Currtype := CurrGenericSalesLine."Cost Type Cost Plus Line";//CurrGenericSalesLine.GetSortingType;

      TempGenericSalesLine.SETRANGE("Document Type", CurrGenericSalesLine."Document Type");
      TempGenericSalesLine.SETRANGE("Document No.", CurrGenericSalesLine."Document No.");
      SetSourceFilterOnGenericSalesLines(CurrGenericSalesLine, 1 , TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER("Line No.", '>%1', CurrGenericSalesLine."Line No.");

      SalesReportTextCondition.Result := TRUE;

      IF TempGenericSalesLine.FINDSET THEN REPEAT
          IF TempGenericSalesLine."Cost Object Cost Plus Line" = '' THEN
            PrevType:=-1
          ELSE
            PrevType:=TempGenericSalesLine."Cost Type Cost Plus Line";//TempGenericSalesLine.GetSortingType;
        IF PrevType=Currtype THEN
          SalesReportTextCondition.Result := FALSE;
      UNTIL TempGenericSalesLine.NEXT=0;

      IF CurrGenericSalesLine."Cost Object Cost Plus Line" = '' THEN
        SalesReportTextCondition.Result := FALSE;

      // IF TempGenericSalesHeader."Invoice Layout Code"='2' THEN
      //  SalesReportTextCondition.Result := FALSE;
      //
      // IF TempGenericSalesHeader."Invoice Layout Code"='3' THEN
      //  SalesReportTextCondition.Result := FALSE;
      // //>> 190516
      // IF TempGenericSalesHeader."Invoice Layout Code"='4' THEN
      //  SalesReportTextCondition.Result := FALSE;
      IF TempGenericSalesHeader."Invoice Layout Code" IN ['2','3','4'] THEN
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE MultiTypeLines@1100285506(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      SalesInvoiceHeader@1100525005 : Record 112;
      SalesInvoiceLine@1100525002 : Record 113;
      SalesCrMemoHeader@1100525001 : Record 114;
      SalesCrMemoLine@1100525003 : Record 115;
      SalesHeader@1100525006 : Record 36;
      SalesLine@1100525004 : Record 37;
      TempGenericSalesHeader@1100525010 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100525009 : TEMPORARY Record 11071889;
      CurrGenericSalesLine@1100525008 : Record 11071889;
      Currtype@1100285500 : Integer;
      PrevType@1100285501 : Integer;
      lvFoundCurrentSalesLine@1100409001 : Boolean;
      lvType@1100409000 : 'First,Last';
    BEGIN
      //>> 160205 ITERO.AC IME444 Check if this function has calculated if each gruop has more than one line an earlier loop
      //                          and if not, make a more efficient calculation (but only once).

      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      CheckCurrentFilterScope(SalesReportTextCondition, CurrGenericSalesLine);

      IF GetPreviousResultValue(SalesReportTextCondition, 'MultiTypeLines', TRUE) = '' THEN BEGIN
        FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
        CalculateCountPerType(SalesReportTextCondition, TempGenericSalesLine, 'MultiTypeLines', CurrGenericSalesLine."Cost Type Cost Plus Line", FORMAT(CurrGenericSalesLine."Line No."));
      END;

      IF NOT CheckIfMultiLineType(SalesReportTextCondition, lvFoundCurrentSalesLine, 'MultiTypeLines', CurrGenericSalesLine."Cost Type Cost Plus Line") THEN BEGIN
        SalesReportTextCondition.Result := lvFoundCurrentSalesLine;
        EXIT;
      END;

      // The code below should never be reached

      TempGenericSalesHeader.DELETEALL(FALSE);
      TempGenericSalesLine.DELETEALL(FALSE);
      CLEAR(TempGenericSalesLine);

      //GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);

      //<< 160205 ITERO.AC IME444

      //Currtype := CurrGenericSalesLine."Cost Type Cost Plus Line";//CurrGenericSalesLine.GetSortingType;

      TempGenericSalesLine.SETRANGE("Document Type", CurrGenericSalesLine."Document Type");
      TempGenericSalesLine.SETRANGE("Document No.", CurrGenericSalesLine."Document No.");
      SetSourceFilterOnGenericSalesLines(CurrGenericSalesLine, 1 , TempGenericSalesLine);
      //TempGenericSalesLine.SETFILTER("Line No.", '>%1', CurrGenericSalesLine."Line No.");
      TempGenericSalesLine.SETRANGE("Cost Type Cost Plus Line",CurrGenericSalesLine."Cost Type Cost Plus Line");
      TempGenericSalesLine.SETFILTER("Cost Object Cost Plus Line",'<>%1','');

      IF TempGenericSalesLine.COUNT > 1 THEN
        SalesReportTextCondition.Result := TRUE
      ELSE
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE IsConvertedProject@1100285508(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
      Job@1100285500 : Record 11072003;
    BEGIN
      //>> 140317 ITERO.SB
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := TRUE;
      IF Job.GET(GenericSalesHeader."Job No.") THEN
        IF Job."Area Team"='C' THEN
          SalesReportTextCondition.Result := FALSE;
      //<<
    END;

    LOCAL PROCEDURE FirstLineOfExtension@1100285300(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      SalesInvoiceHeader@1100525005 : Record 112;
      SalesInvoiceLine@1100525002 : Record 113;
      SalesCrMemoHeader@1100525001 : Record 114;
      SalesCrMemoLine@1100525003 : Record 115;
      SalesHeader@1100525006 : Record 36;
      SalesLine@1100525004 : Record 37;
      TempGenericSalesHeader@1100525010 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100525009 : TEMPORARY Record 11071889;
      CurrGenericSalesLine@1100525008 : Record 11071889;
      Currtype@1100285500 : Code[10];
      PrevType@1100285501 : Code[10];
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);

      Currtype := CurrGenericSalesLine."Extension Contract";

      TempGenericSalesLine.SETRANGE("Document Type", CurrGenericSalesLine."Document Type");
      TempGenericSalesLine.SETRANGE("Document No.", CurrGenericSalesLine."Document No.");
      SetSourceFilterOnGenericSalesLines(CurrGenericSalesLine, 1 , TempGenericSalesLine);

      TempGenericSalesLine.SETFILTER("Line No.", '<%1', CurrGenericSalesLine."Line No.");

      SalesReportTextCondition.Result := TRUE;

      IF TempGenericSalesLine.FINDSET THEN REPEAT
        //IF TempGenericSalesLine."Cost Object Cost Plus Line" <> '' THEN
        //  PrevType:=TempGenericSalesLine."Cost Type Cost Plus Line"//TempGenericSalesLine.GetSortingType;
        //ELSE
        //  PrevType:=-1;
          PrevType:= TempGenericSalesLine."Extension Contract";
        IF PrevType=Currtype THEN
          SalesReportTextCondition.Result := FALSE;
      UNTIL TempGenericSalesLine.NEXT=0;

      IF TempGenericSalesHeader."Invoice Layout Code"<>'3' THEN
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE LastLineOfExtension@1100409001(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      SalesInvoiceHeader@1100525005 : Record 112;
      SalesInvoiceLine@1100525002 : Record 113;
      SalesCrMemoHeader@1100525001 : Record 114;
      SalesCrMemoLine@1100525003 : Record 115;
      SalesHeader@1100525006 : Record 36;
      SalesLine@1100525004 : Record 37;
      TempGenericSalesHeader@1100525010 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100525009 : TEMPORARY Record 11071889;
      CurrGenericSalesLine@1100525008 : Record 11071889;
      Currtype@1100285500 : Code[10];
      PrevType@1100285501 : Code[10];
    BEGIN
      CLEAR(TempGenericSalesLine);
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);

      Currtype := CurrGenericSalesLine."Extension Contract";
      TempGenericSalesLine.SETRANGE("Document Type", CurrGenericSalesLine."Document Type");
      TempGenericSalesLine.SETRANGE("Document No.", CurrGenericSalesLine."Document No.");
      SetSourceFilterOnGenericSalesLines(CurrGenericSalesLine, 1 , TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER("Line No.", '>%1', CurrGenericSalesLine."Line No.");

      SalesReportTextCondition.Result := TRUE;

      IF TempGenericSalesLine.FINDSET THEN REPEAT
          //IF TempGenericSalesLine."Cost Object Cost Plus Line" = '' THEN
          //  PrevType:=-1
          //ELSE
          PrevType:=TempGenericSalesLine."Extension Contract";
        IF PrevType=Currtype THEN
          SalesReportTextCondition.Result := FALSE;
      UNTIL TempGenericSalesLine.NEXT=0;


      IF TempGenericSalesHeader."Invoice Layout Code"<>'3' THEN
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE FirstLineOfExtension2@1100409003(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      SalesInvoiceHeader@1100525005 : Record 112;
      SalesInvoiceLine@1100525002 : Record 113;
      SalesCrMemoHeader@1100525001 : Record 114;
      SalesCrMemoLine@1100525003 : Record 115;
      SalesHeader@1100525006 : Record 36;
      SalesLine@1100525004 : Record 37;
      TempGenericSalesHeader@1100525010 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100525009 : TEMPORARY Record 11071889;
      CurrGenericSalesLine@1100525008 : Record 11071889;
      Currtype@1100285500 : Code[10];
      PrevType@1100285501 : Code[10];
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);

      Currtype := CurrGenericSalesLine."Extension Contract";

      TempGenericSalesLine.SETRANGE("Document Type", CurrGenericSalesLine."Document Type");
      TempGenericSalesLine.SETRANGE("Document No.", CurrGenericSalesLine."Document No.");
      SetSourceFilterOnGenericSalesLines(CurrGenericSalesLine, 1 , TempGenericSalesLine);

      TempGenericSalesLine.SETFILTER("Line No.", '<%1', CurrGenericSalesLine."Line No.");

      SalesReportTextCondition.Result := FALSE;

      IF TempGenericSalesLine.FINDSET THEN REPEAT
        //IF TempGenericSalesLine."Cost Object Cost Plus Line" <> '' THEN
        //  PrevType:=TempGenericSalesLine."Cost Type Cost Plus Line"//TempGenericSalesLine.GetSortingType;
        //ELSE
        //  PrevType:=-1;
          PrevType:= TempGenericSalesLine."Extension Contract";
        IF PrevType=Currtype THEN
          SalesReportTextCondition.Result := TRUE;
      UNTIL TempGenericSalesLine.NEXT=0;

      IF TempGenericSalesHeader."Invoice Layout Code"<>'3' THEN
        SalesReportTextCondition.Result := TRUE;
    END;

    LOCAL PROCEDURE CheckForPreviousResult@1100409010(VAR pSalesReportTextCondition@1100409000 : Record 11071891;VAR pWasFound@1100409001 : Boolean;pFunctionName@1100409003 : Text[128];pLineNo@1100409004 : Integer) : Boolean;
    VAR
      lvTempSalesReportTextCondition@1100409002 : Record 11071891;
      lvSalesReportTextCondLineNo@1100409005 : Integer;
      lvExistingString@1100409008 : Text[128];
      lvReportConditionFound@1100409006 : Boolean;
      lvOK@1100409007 : Boolean;
    BEGIN
      // 160205 ITERO.AC IME444  Added this function in order to check
      // if a certain function has been executed before and then found a Sales or Invoice line
      // The function returns (FALSE) if there is no need for the calling function to proceed
      // and also sets the parameter pWasFound to True or False depending on current Generic Sales Line No
      // in the calling function is equal to the previously stored value.
      // The main purpose is to speed up Invoice printing

      lvReportConditionFound := FALSE;
      pWasFound := FALSE;

      // First check current line of Sales Report Text Condition
      lvExistingString := pSalesReportTextCondition.ResultKey;
      IF lvExistingString <> '' THEN BEGIN
        lvReportConditionFound := TRUE;
        IF lvExistingString = FORMAT(pLineNo) THEN BEGIN
          pWasFound := TRUE;
          EXIT(FALSE);  // Calling function should exit
        END;
          EXIT(FALSE);  // Calling function should exit
      END;

      lvSalesReportTextCondLineNo := pSalesReportTextCondition."Line No.";
      // Save to temporary Record parameter becuse some fields as Record ID could have been changed
      pSalesReportTextCondition.MODIFY(FALSE);
      lvTempSalesReportTextCondition.COPYFILTERS(pSalesReportTextCondition);

      pSalesReportTextCondition.SETRANGE("Text Line Type");
      pSalesReportTextCondition.SETRANGE("Text Line No.");
      pSalesReportTextCondition.SETRANGE("Codeunit No.", 11012370);
      pSalesReportTextCondition.SETRANGE("Function Name", pFunctionName);
      pSalesReportTextCondition.SETFILTER(ResultKey, '<>%1', '');
      IF pSalesReportTextCondition.FIND('-') THEN BEGIN
        lvReportConditionFound := TRUE;
        IF pSalesReportTextCondition.ResultKey = FORMAT(pLineNo) THEN BEGIN
          pWasFound := TRUE;
        END ELSE BEGIN
          pWasFound := FALSE;
        END;
      END;

      // Reset to original location
      pSalesReportTextCondition.COPYFILTERS(lvTempSalesReportTextCondition);
      IF pSalesReportTextCondition.FINDSET THEN BEGIN
        lvOK := TRUE;
        WHILE (pSalesReportTextCondition."Line No." <> lvSalesReportTextCondLineNo) AND (lvOK) DO BEGIN
          IF pSalesReportTextCondition.NEXT = 0 THEN
            lvOK := FALSE;
        END;
      END;


      IF lvReportConditionFound THEN
        EXIT(FALSE)  // Calling function should exit
      ELSE
        EXIT(TRUE);   // Calling function must proceed
    END;

    LOCAL PROCEDURE CalculateCountPerType@1100409006(VAR pSalesReportTextCondition@1100409000 : Record 11071891;VAR pGenericSalesLine@1100409001 : TEMPORARY Record 11071889;pFunctionName@1100409007 : Text[128];pCostType@1100409008 : Integer;pKeyValue@1100409009 : Text[128]);
    VAR
      lvCounter@1100409002 : Integer;
      lvResultString@1100409003 : Text[128];
      lvExistingString@1100409010 : Text[128];
      lvTempSalesReportTextCondition@1100409004 : Record 11071891;
      lvFound@1100409005 : Boolean;
      lvSalesReportTextCondLineNo@1100409006 : Integer;
      lvOK@1100409011 : Boolean;
    BEGIN
      // 160205 ITERO.AC IME444  Added this function in order to
      // Calculate number of Generic Sales Lines per Cost Type
      // in order to make it possible to determine speed up calls to MultiTypeLines
      // The main purpose is to speed up Invoice printing

      // Replace Cost Type for "Free Text Lines" Set -1 To ensure that these lines not will be included below
      // Similar to Earlier logic in FirstLineOfProj
      pGenericSalesLine.SETRANGE("Cost Object Cost Plus Line", '');
      IF pGenericSalesLine.FINDSET THEN BEGIN;
        REPEAT
          pGenericSalesLine."Cost Type Cost Plus Line" := -1;
          pGenericSalesLine.MODIFY(FALSE);
        UNTIL pGenericSalesLine.NEXT = 0;
      END;

      pGenericSalesLine.SETRANGE("Cost Object Cost Plus Line");

      lvSalesReportTextCondLineNo := pSalesReportTextCondition."Line No.";
      // Save to temporary Record parameter becuse some fields as Record ID could have been changed
      pSalesReportTextCondition.MODIFY(FALSE);
      lvTempSalesReportTextCondition.COPYFILTERS(pSalesReportTextCondition);
      lvFound := FALSE;

      pSalesReportTextCondition.SETRANGE("Text Line Type");
      pSalesReportTextCondition.SETRANGE("Text Line No.");
      pSalesReportTextCondition.SETRANGE("Codeunit No.", 11012370);
      pSalesReportTextCondition.SETRANGE("Function Name", pFunctionName);
      pSalesReportTextCondition.SETFILTER(DetailedResultKeys, '<>%1', '');
      IF pSalesReportTextCondition.FIND('-') THEN BEGIN
        lvExistingString := pSalesReportTextCondition.DetailedResultKeys;
        lvFound := TRUE;
      END;

      // Reset record position
      pSalesReportTextCondition.COPYFILTERS(lvTempSalesReportTextCondition);
      IF pSalesReportTextCondition.FINDSET THEN BEGIN
        lvOK := TRUE;
        WHILE (pSalesReportTextCondition."Line No." <> lvSalesReportTextCondLineNo) AND (lvOK) DO BEGIN
          IF pSalesReportTextCondition.NEXT = 0 THEN
            lvOK := FALSE;
        END;
      END;

      IF lvFound THEN
        EXIT;

      lvResultString := '';
      FOR lvCounter := 0 TO 5 DO BEGIN
        pGenericSalesLine.SETRANGE("Cost Type Cost Plus Line", lvCounter);
        IF lvCounter > 0 THEN
          lvResultString := lvResultString + ',';
        IF pGenericSalesLine.FINDSET(FALSE) THEN
          lvResultString := lvResultString + FORMAT(pGenericSalesLine.COUNT)
        ELSE
          lvResultString := lvResultString + '0';
      END;

      pGenericSalesLine.SETRANGE("Cost Type Cost Plus Line");

      pSalesReportTextCondition.DetailedResultKeys := lvResultString;
      pSalesReportTextCondition.MODIFY(FALSE);
    END;

    LOCAL PROCEDURE CheckIfMultiLineType@1100409030(VAR pSalesReportTextCondition@1100409003 : Record 11071891;VAR pWasFound@1100409002 : Boolean;pFunctionName@1100409001 : Text[128];pCostType@1100409004 : Integer) : Boolean;
    VAR
      lvTempSalesReportTextCondition@1100409006 : Record 11071891;
      lvSalesReportTextCondLineNo@1100409005 : Integer;
      lvExistingString@1100409007 : Text[128];
      lvReportConditionFound@1100409008 : Boolean;
      lvOK@1100409009 : Boolean;
    BEGIN
      // 160205 ITERO.AC IME444  Added this function in order to
      // Check if Counts per Cost Type has been calculated before
      // And compare with the Cost Type (pCostType)
      // The main purpose is to speed up Invoice printing

      // Save Filter and Current Position for Sales Report Text Condition Record
      lvSalesReportTextCondLineNo := pSalesReportTextCondition."Line No.";
      // Save changes to temporary Record becuse some fields as i.e. Record ID could have been changed
      pSalesReportTextCondition.MODIFY(FALSE);
      lvTempSalesReportTextCondition.COPYFILTERS(pSalesReportTextCondition);

      lvReportConditionFound := FALSE;
      pWasFound := FALSE;

      pSalesReportTextCondition.SETRANGE("Text Line Type");
      pSalesReportTextCondition.SETRANGE("Text Line No.");
      pSalesReportTextCondition.SETRANGE("Codeunit No.", 11012370);
      pSalesReportTextCondition.SETRANGE("Function Name", pFunctionName);
      pSalesReportTextCondition.SETFILTER(DetailedResultKeys, '<>%1', '');

      IF pSalesReportTextCondition.FIND('-') THEN BEGIN
        lvExistingString := pSalesReportTextCondition.DetailedResultKeys;
        IF STRPOS(lvExistingString, ',') <> 0 THEN BEGIN
           lvReportConditionFound := TRUE;
          IF SELECTSTR(pCostType + 1, lvExistingString) > '1' THEN
            pWasFound := TRUE;
        END;
      END;

      // Reset to current position
      pSalesReportTextCondition.COPYFILTERS(lvTempSalesReportTextCondition);
      IF pSalesReportTextCondition.FINDSET THEN BEGIN
        lvOK := TRUE;
        WHILE (pSalesReportTextCondition."Line No." <> lvSalesReportTextCondLineNo) AND (lvOK) DO BEGIN
          IF pSalesReportTextCondition.NEXT = 0 THEN
            lvOK := FALSE;
        END;
      END;

      IF lvReportConditionFound THEN
        EXIT(FALSE)  // Calling function should exit
      ELSE
        EXIT(TRUE);   // Calling function must proceed
    END;

    LOCAL PROCEDURE CheckForPreviousDetailedResult@1100409031(VAR pSalesReportTextCondition@1100409003 : Record 11071891;VAR pWasFound@1100409002 : Boolean;pFunctionName@1100409001 : Text[128];pLineNo@1100409000 : Integer;pCostType@1100409004 : Integer) : Boolean;
    VAR
      lvTempSalesReportTextCondition@1100409006 : Record 11071891;
      lvSalesReportTextCondLineNo@1100409005 : Integer;
      lvExistingString@1100409007 : Text[128];
      lvReportConditionFound@1100409008 : Boolean;
      lvOK@1100409009 : Boolean;
    BEGIN
      // 160205 ITERO.AC IME444  Added this function in order to
      // Check if a certain function (pFunctionName) has been executed before and found a Sales or Invoice line for a specific Cost Type
      // The function returns (FALSE) if there is no need for the calling function to proceed executing
      // The main purpose is to speed up Invoice printing

      lvReportConditionFound := FALSE;
      pWasFound := FALSE;

      // First check current line of Sales Report Text Condition
      lvExistingString := pSalesReportTextCondition.DetailedResultKeys;
      IF lvExistingString <> '' THEN BEGIN
        IF STRPOS(lvExistingString, ',') <> 0 THEN BEGIN
          lvReportConditionFound := TRUE;
          IF SELECTSTR(pCostType + 1, lvExistingString) = FORMAT(pLineNo) THEN BEGIN
            pWasFound := TRUE;
            EXIT(FALSE);  // Calling function should exit
          END;
            EXIT(FALSE);  // Calling function should exit
        END;
      END;

      // Save Filter and Current Position for Sales Report Text Condition Record
      lvSalesReportTextCondLineNo := pSalesReportTextCondition."Line No.";
      // Save changes to temporary Record becuse some fields as i.e. Record ID could have been changed
      pSalesReportTextCondition.MODIFY(FALSE);
      lvTempSalesReportTextCondition.COPYFILTERS(pSalesReportTextCondition);

      pSalesReportTextCondition.SETRANGE("Text Line Type");
      pSalesReportTextCondition.SETRANGE("Text Line No.");
      pSalesReportTextCondition.SETRANGE("Codeunit No.", 11012370);
      pSalesReportTextCondition.SETRANGE("Function Name", pFunctionName);
      pSalesReportTextCondition.SETFILTER(DetailedResultKeys, '<>%1', '');

      IF pSalesReportTextCondition.FIND('-') THEN BEGIN
        lvExistingString := pSalesReportTextCondition.DetailedResultKeys;
        IF STRPOS(lvExistingString, ',') <> 0 THEN BEGIN
          IF SELECTSTR(pCostType + 1, lvExistingString) <> '0' THEN
            lvReportConditionFound := TRUE;
          IF SELECTSTR(pCostType + 1, lvExistingString) = FORMAT(pLineNo) THEN
            pWasFound := TRUE;
        END;
      END;

      // Reset to current position
      pSalesReportTextCondition.COPYFILTERS(lvTempSalesReportTextCondition);
      IF pSalesReportTextCondition.FINDSET THEN BEGIN
        lvOK := TRUE;
        WHILE (pSalesReportTextCondition."Line No." <> lvSalesReportTextCondLineNo) AND (lvOK) DO BEGIN
          IF pSalesReportTextCondition.NEXT = 0 THEN
            lvOK := FALSE;
        END;
      END;

      IF lvReportConditionFound THEN
        EXIT(FALSE)  // Calling function should exit
      ELSE
        EXIT(TRUE);   // Calling function must proceed
    END;

    LOCAL PROCEDURE GetPreviousResultValue@1100409060(VAR pSalesReportTextCondition@1100409002 : Record 11071891;pFunctionName@1100409000 : Text[128];pDetailResult@1100409005 : Boolean) PreviousResult : Text[128];
    VAR
      lvTempSalesReportTextCondition@1100409003 : Record 11071891;
      lvSalesReportTextCondLineNo@1100409001 : Integer;
      lvOK@1100409006 : Boolean;
    BEGIN
      // 160205 ITERO.AC IME444  Added this function in order to
      // search if there is a previously calculated result for a specific function
      // Either in the "DetailedResultKeys" field or in the ResultKey field
      // The main purpose is to speed up Invoice printing

      PreviousResult := '';

      // First try, look in curent record of "Sales Report Text Condition" temporary record
      IF pDetailResult THEN
        PreviousResult := pSalesReportTextCondition.DetailedResultKeys
      ELSE
        PreviousResult := pSalesReportTextCondition.ResultKey;

      // Second try, search for another record with the same Function Name and the result from that call
      IF PreviousResult = '' THEN BEGIN
        // Save current location in the temporary pSalesReportTextCondition Record
        lvSalesReportTextCondLineNo := pSalesReportTextCondition."Line No.";
        // Save to temporary Record becuse some fields as "Record ID" could have been changed
        pSalesReportTextCondition.MODIFY(FALSE);
        lvTempSalesReportTextCondition.COPYFILTERS(pSalesReportTextCondition);

        pSalesReportTextCondition.SETRANGE("Text Line Type");
        pSalesReportTextCondition.SETRANGE("Text Line No.");
        pSalesReportTextCondition.SETRANGE("Codeunit No.", 11012370);
        pSalesReportTextCondition.SETRANGE("Function Name", pFunctionName);
        IF pDetailResult THEN
          pSalesReportTextCondition.SETFILTER(DetailedResultKeys, '<>%1', '')
        ELSE
          pSalesReportTextCondition.SETFILTER(ResultKey, '<>%1', '');

        IF pSalesReportTextCondition.FIND('-') THEN BEGIN
          IF pDetailResult THEN
            PreviousResult := pSalesReportTextCondition.DetailedResultKeys
          ELSE
            PreviousResult := pSalesReportTextCondition.ResultKey;
        END;

        // Reset to original location
        pSalesReportTextCondition.COPYFILTERS(lvTempSalesReportTextCondition);
        IF pSalesReportTextCondition.FINDSET THEN BEGIN
          lvOK := TRUE;
          WHILE (pSalesReportTextCondition."Line No." <> lvSalesReportTextCondLineNo) AND (lvOK) DO BEGIN
            IF pSalesReportTextCondition.NEXT = 0 THEN
              lvOK := FALSE;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CalculateFirstOrLastLineOfProj@1100409005(VAR pSalesReportTextCondition@1100409001 : Record 11071891;VAR pTempGenericSalesLine@1100409002 : Record 11071889;VAR pCurrGenericSalesLine@1100409000 : Record 11071889;pType@1100409004 : 'First,Last');
    VAR
      lvResultString@1100409003 : Text[128];
      lvResult@1100409009 : Boolean;
    BEGIN
      // 160205 ITERO.AC IME444
      // This function is used to determine first row of an invoice depending on selected Layout Code
      // The result is stored in the temporary record pSalesReportTextCondition, new field ResultKey
      // After this calculation has been executed, the main printing loop has no longer needs for search through all sales lines
      // The main purpose is to speed up Invoice printing

      lvResultString := '';

      pTempGenericSalesLine.SETRANGE("Document Type", pCurrGenericSalesLine."Document Type");
      pTempGenericSalesLine.SETRANGE("Document No.", pCurrGenericSalesLine."Document No.");
      SetSourceFilterOnGenericSalesLines(pCurrGenericSalesLine, 1 , pTempGenericSalesLine);

      // Replace Cost Type for "Free Text Lines" Set -1 To ensure that these lines will come first
      // Similar to Earlier logic in FirstLineOfProj, Free text lines normally has Cost Type 0 but '' in Cost Object
      pTempGenericSalesLine.SETRANGE("Cost Object Cost Plus Line", '');
      IF pTempGenericSalesLine.FINDSET THEN BEGIN;
        REPEAT
          pTempGenericSalesLine."Cost Type Cost Plus Line" := -1;
          pTempGenericSalesLine.MODIFY(FALSE);
        UNTIL pTempGenericSalesLine.NEXT = 0;
      END;

      pTempGenericSalesLine.SETRANGE("Cost Object Cost Plus Line");

      CASE pSalesReportTextCondition."Invoice Layout Code" OF
        '0',
        '1': pTempGenericSalesLine.SETCURRENTKEY("Document Type","Document No.","Cost Type Cost Plus Line", "Line No.");
        '2': pTempGenericSalesLine.SETCURRENTKEY("Document Type","Document No.","Line No.");
        '3': pTempGenericSalesLine.SETCURRENTKEY("Document Type","Document No.", "Extension Contract", "Line No.");
        '4': pTempGenericSalesLine.SETCURRENTKEY("Document Type","Document No.", Element, "Line No."); //190516
      END;

      IF pType = pType::First THEN
        lvResult := pTempGenericSalesLine.FIND('-')
      ELSE
        lvResult := pTempGenericSalesLine.FIND('+');

      IF lvResult THEN BEGIN
        lvResultString := FORMAT(pTempGenericSalesLine."Line No.");
        IF lvResultString <> '' THEN BEGIN
          pSalesReportTextCondition.ResultKey := lvResultString;
          pSalesReportTextCondition.MODIFY(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE CalculateFirstOrLastLineOfTypes@1100409023(VAR pSalesReportTextCondition@1100409001 : Record 11071891;VAR pTempGenericSalesLine@1100409002 : Record 11071889;VAR pCurrGenericSalesLine@1100409000 : Record 11071889;pType@1100409004 : 'First,Last');
    VAR
      lvResultString@1100409003 : Text[128];
      lvCurrType@1100409010 : Integer;
      lvResult@1100409009 : Boolean;
    BEGIN
      // 160205 ITERO.AC IME444
      // This function loops through all Generic Sales Line rows and calculates first row of each Cost Type
      // The result is stored in the temporary record pSalesReportTextCondition, new field DetailedResultKeys
      // First row of each Cost type will be stored as a comma-separated string
      // After this calculation has been executed the main printing loop no longer needs to search for sales lines
      // The main purpose is to speed up Invoice printing

      lvResultString := '0,0,0,0,0,0';

      // Replace Cost Type for "Free Text Lines" Set -1 To ensure that these lines not will be included below
      // Similar to Earlier logic in FirstLineOfProj
      pTempGenericSalesLine.SETRANGE("Cost Object Cost Plus Line", '');
      IF pTempGenericSalesLine.FINDSET THEN BEGIN;
        REPEAT
          pTempGenericSalesLine."Cost Type Cost Plus Line" := -1;
          pTempGenericSalesLine.MODIFY(FALSE);
        UNTIL pTempGenericSalesLine.NEXT = 0;
      END;

      pTempGenericSalesLine.SETRANGE("Cost Object Cost Plus Line");

      pTempGenericSalesLine.SETRANGE("Document Type", pCurrGenericSalesLine."Document Type");
      pTempGenericSalesLine.SETRANGE("Document No.", pCurrGenericSalesLine."Document No.");
      SetSourceFilterOnGenericSalesLines(pCurrGenericSalesLine, 1 , pTempGenericSalesLine);
      pTempGenericSalesLine.SETCURRENTKEY("Document Type","Document No.","Cost Type Cost Plus Line","Line No.");

      FOR lvCurrType := 0 TO 5 DO BEGIN
        pTempGenericSalesLine.SETRANGE("Cost Type Cost Plus Line", lvCurrType);

        IF pType = pType::First THEN
          lvResult := pTempGenericSalesLine.FIND('-')
        ELSE
          lvResult := pTempGenericSalesLine.FIND('+');

        IF lvResult THEN BEGIN
          lvResultString := BuildDetailResultValue(lvResultString, lvCurrType, FORMAT(pTempGenericSalesLine."Line No."));
        END;
      END;

      pSalesReportTextCondition.DetailedResultKeys := lvResultString;
      pSalesReportTextCondition.MODIFY(FALSE);
    END;

    LOCAL PROCEDURE BuildDetailResultValue@1100409015(pExistingString@1100409000 : Text[128];pType@1100409001 : Integer;pValue@1100409002 : Text[128]) : Text[128];
    VAR
      lvCounter@1100409003 : Integer;
      lvBuildString@1100409004 : Text[128];
    BEGIN
      // 160205 ITERO.AC IME444  Added this help function for settings values
      // into a string that will be stored in "Sales Report Text Condition".DetailedResultKey
      // (used as a Temporary Record Variable)
      // Example: I this function is called with pExistingString = '0,0,0,0,0,0' and pType = 2 and pValue = '3000'
      //          the result will be '0,0,3000,0,0,0'

      IF (pType < 0) OR (pType > 5) THEN
        EXIT (pExistingString);

      FOR lvCounter := 0 TO 5 DO BEGIN
        IF lvCounter > 0 THEN
          lvBuildString := lvBuildString + ',';
        IF lvCounter = pType THEN
          lvBuildString := lvBuildString + pValue
        ELSE
          lvBuildString := lvBuildString + SELECTSTR(lvCounter + 1, pExistingString);
      END;
      EXIT(lvBuildString);
    END;

    LOCAL PROCEDURE CheckCurrentFilterScope@1100409035(VAR pSalesReportTextCondition@1100409000 : Record 11071891;VAR pGenericSalesLine@1100409001 : TEMPORARY Record 11071889);
    VAR
      lvTempSalesReportTextCondition@1100409004 : Record 11071891;
      lvSalesReportTextCondLineNo@1100409003 : Integer;
      lvCurrentFilterScope@1100409002 : Text[128];
      lvLastStoredMainFilter@1100409005 : Text[128];
      lvOK@1100409006 : Boolean;
    BEGIN
      // 160205 ITERO.AC IME444  Added this function in order to
      // check if the main scope of the current invoice has changed (Project, Service Contract, Plant Location )
      // All check functions like CheckForPreviousResult, CheckIfMultiLineType (and so on) assumes
      // a single main scope. But if the invoice contains more than one project,
      // this function will reset all prevoiusly stored values in the temporary record ("Sales Report Text Condition")
      // for every new project.

      IF pSalesReportTextCondition.MainFilterScope = GetCurrentFilterScope(pGenericSalesLine) THEN
        EXIT;

      // Save Filter and Current Position for Sales Report Text Condition Record
      lvSalesReportTextCondLineNo := pSalesReportTextCondition."Line No.";
      // Save changes to temporary Record becuse some fields as i.e. Record ID could have been changed
      pSalesReportTextCondition.MODIFY(FALSE);
      lvTempSalesReportTextCondition.COPYFILTERS(pSalesReportTextCondition);

      pSalesReportTextCondition.SETRANGE("Text Line Type");
      pSalesReportTextCondition.SETRANGE("Text Line No.");
      pSalesReportTextCondition.SETRANGE("Codeunit No.");
      pSalesReportTextCondition.SETRANGE("Function Name");

      IF pSalesReportTextCondition.FINDSET THEN BEGIN
        REPEAT
          pSalesReportTextCondition.ResultKey := '';
          pSalesReportTextCondition.DetailedResultKeys := '';
          pSalesReportTextCondition.MainFilterScope := GetCurrentFilterScope(pGenericSalesLine);
          pSalesReportTextCondition.MODIFY(FALSE);
        UNTIL pSalesReportTextCondition.NEXT = 0;
      END;

      // Reset to original location
      pSalesReportTextCondition.COPYFILTERS(lvTempSalesReportTextCondition);
      IF pSalesReportTextCondition.FINDSET THEN BEGIN
        lvOK := TRUE;
        WHILE (pSalesReportTextCondition."Line No." <> lvSalesReportTextCondLineNo) AND (lvOK) DO BEGIN
          IF pSalesReportTextCondition.NEXT = 0 THEN
            lvOK := FALSE;
        END;
      END;
    END;

    LOCAL PROCEDURE GetCurrentFilterScope@1100409007(VAR pGenericSalesLine@1100409000 : TEMPORARY Record 11071889) ResultValue : Text[128];
    BEGIN
      // 160205 ITERO.AC IME444  Help function called by CheckCurrentFilterScope

      ResultValue := pGenericSalesLine."Job No." + ',' + pGenericSalesLine."Service Contract No." + ',' + pGenericSalesLine."Plant Location";
    END;

    LOCAL PROCEDURE RUTAmountHasValue@1100285103(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
    BEGIN
      //>> RFC188
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := GenericSalesHeader.GetRUT(1) > 0;
      //<<
    END;

    LOCAL PROCEDURE ROTorRUTAmountHasValue@1100285102(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
    BEGIN
      //>> RFC188
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := (GenericSalesHeader.GetROT(1) > 0) OR (GenericSalesHeader.GetRUT(1) > 0);
      //<<
    END;

    LOCAL PROCEDURE OnlyRUTAmountHasValue@1100285100(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
    BEGIN
      // RFC240
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := (GenericSalesHeader.GetRUT(1) > 0) AND (GenericSalesHeader.GetROT(1) = 0);
    END;

    LOCAL PROCEDURE OnlyROTAmountHasValue@1100285101(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
    BEGIN
      // RFC240
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := (GenericSalesHeader.GetROT(1) > 0) AND (GenericSalesHeader.GetROT(1) = 0);
    END;

    LOCAL PROCEDURE ROTandRUTAmountHasValue@1100285105(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      GenericSalesHeader@1100525005 : Record 11071888;
    BEGIN
      // RFC240
      GetCurrGenericSalesHeader(SalesReportTextCondition, GenericSalesHeader);
      SalesReportTextCondition.Result := (GenericSalesHeader.GetROT(1) > 0) AND (GenericSalesHeader.GetRUT(1) > 0);
    END;

    LOCAL PROCEDURE FirstLineOfElement@1100583002(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      SalesInvoiceHeader@1100525005 : Record 112;
      SalesInvoiceLine@1100525002 : Record 113;
      SalesCrMemoHeader@1100525001 : Record 114;
      SalesCrMemoLine@1100525003 : Record 115;
      SalesHeader@1100525006 : Record 36;
      SalesLine@1100525004 : Record 37;
      TempGenericSalesHeader@1100525010 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100525009 : TEMPORARY Record 11071889;
      CurrGenericSalesLine@1100525008 : Record 11071889;
      Currtype@1100285500 : Code[10];
      PrevType@1100285501 : Code[10];
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);

      Currtype := CurrGenericSalesLine.Element;

      TempGenericSalesLine.SETRANGE("Document Type", CurrGenericSalesLine."Document Type");
      TempGenericSalesLine.SETRANGE("Document No.", CurrGenericSalesLine."Document No.");
      SetSourceFilterOnGenericSalesLines(CurrGenericSalesLine, 1 , TempGenericSalesLine);

      TempGenericSalesLine.SETFILTER("Line No.", '<%1', CurrGenericSalesLine."Line No.");

      SalesReportTextCondition.Result := TRUE;

      IF TempGenericSalesLine.FINDSET THEN REPEAT
        //IF TempGenericSalesLine."Cost Object Cost Plus Line" <> '' THEN
        //  PrevType:=TempGenericSalesLine."Cost Type Cost Plus Line"//TempGenericSalesLine.GetSortingType;
        //ELSE
        //  PrevType:=-1;
          PrevType:= TempGenericSalesLine.Element;
        IF PrevType=Currtype THEN
          SalesReportTextCondition.Result := FALSE;
      UNTIL TempGenericSalesLine.NEXT=0;

      IF TempGenericSalesHeader."Invoice Layout Code"<>'4' THEN
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE LastLineOfElement@1100583001(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      SalesInvoiceHeader@1100525005 : Record 112;
      SalesInvoiceLine@1100525002 : Record 113;
      SalesCrMemoHeader@1100525001 : Record 114;
      SalesCrMemoLine@1100525003 : Record 115;
      SalesHeader@1100525006 : Record 36;
      SalesLine@1100525004 : Record 37;
      TempGenericSalesHeader@1100525010 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100525009 : TEMPORARY Record 11071889;
      CurrGenericSalesLine@1100525008 : Record 11071889;
      Currtype@1100285500 : Code[10];
      PrevType@1100285501 : Code[10];
    BEGIN
      CLEAR(TempGenericSalesLine);
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);

      Currtype := CurrGenericSalesLine.Element;
      TempGenericSalesLine.SETRANGE("Document Type", CurrGenericSalesLine."Document Type");
      TempGenericSalesLine.SETRANGE("Document No.", CurrGenericSalesLine."Document No.");
      SetSourceFilterOnGenericSalesLines(CurrGenericSalesLine, 1 , TempGenericSalesLine);
      TempGenericSalesLine.SETFILTER("Line No.", '>%1', CurrGenericSalesLine."Line No.");

      SalesReportTextCondition.Result := TRUE;

      IF TempGenericSalesLine.FINDSET THEN REPEAT
          //IF TempGenericSalesLine."Cost Object Cost Plus Line" = '' THEN
          //  PrevType:=-1
          //ELSE
          PrevType:=TempGenericSalesLine.Element;
        IF PrevType=Currtype THEN
          SalesReportTextCondition.Result := FALSE;
      UNTIL TempGenericSalesLine.NEXT=0;


      IF TempGenericSalesHeader."Invoice Layout Code"<>'4' THEN
        SalesReportTextCondition.Result := FALSE;
    END;

    LOCAL PROCEDURE FirstLineOfElement2@1100583000(VAR SalesReportTextCondition@1100525000 : Record 11071891);
    VAR
      SalesInvoiceHeader@1100525005 : Record 112;
      SalesInvoiceLine@1100525002 : Record 113;
      SalesCrMemoHeader@1100525001 : Record 114;
      SalesCrMemoLine@1100525003 : Record 115;
      SalesHeader@1100525006 : Record 36;
      SalesLine@1100525004 : Record 37;
      TempGenericSalesHeader@1100525010 : TEMPORARY Record 11071888;
      TempGenericSalesLine@1100525009 : TEMPORARY Record 11071889;
      CurrGenericSalesLine@1100525008 : Record 11071889;
      Currtype@1100285500 : Code[10];
      PrevType@1100285501 : Code[10];
    BEGIN
      FillTempGenericTables(SalesReportTextCondition, TempGenericSalesHeader, TempGenericSalesLine);
      GetCurrGenericSalesLine(SalesReportTextCondition, CurrGenericSalesLine);

      Currtype := CurrGenericSalesLine.Element;

      TempGenericSalesLine.SETRANGE("Document Type", CurrGenericSalesLine."Document Type");
      TempGenericSalesLine.SETRANGE("Document No.", CurrGenericSalesLine."Document No.");
      SetSourceFilterOnGenericSalesLines(CurrGenericSalesLine, 1 , TempGenericSalesLine);

      TempGenericSalesLine.SETFILTER("Line No.", '<%1', CurrGenericSalesLine."Line No.");

      SalesReportTextCondition.Result := FALSE;

      IF TempGenericSalesLine.FINDSET THEN REPEAT
        //IF TempGenericSalesLine."Cost Object Cost Plus Line" <> '' THEN
        //  PrevType:=TempGenericSalesLine."Cost Type Cost Plus Line"//TempGenericSalesLine.GetSortingType;
        //ELSE
        //  PrevType:=-1;
          PrevType:= TempGenericSalesLine.Element;
        IF PrevType=Currtype THEN
          SalesReportTextCondition.Result := TRUE;
      UNTIL TempGenericSalesLine.NEXT=0;

      IF TempGenericSalesHeader."Invoice Layout Code"<>'4' THEN
        SalesReportTextCondition.Result := TRUE;
    END;

    BEGIN
    {
      140317 ITERO.SB Changed ROTAmounthasvalue func.
      160205 ITERO.AC IME444 Rewrite of FirstLineOfProj, LastLineOfProj, FirstLineOfType, LastLineOfType and MultiTypeLines
                              ,added some help functions in order to speed up Invoice Printing and merged some code updates from 4PS version 210
      160602 ITERO.SB Moved filter on serviceorder from level 2 to level 1
      170602 ITERO.DL RFC188 added functions for RUT
      190615 ORANGO.SB RFC-1153 Added FirstLineOfElement,LastLineOfElement,FirstLineOfElement2
    }
    END.
  }
}

