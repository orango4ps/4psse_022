OBJECT Table 11129005 Dataset Calculated Field
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Dataset Calculated Field;
  }
  FIELDS
  {
    { 10  ;   ;Table ID            ;Integer       ;CaptionML=[ENU=Table ID;
                                                              NOR=Tabell-ID;
                                                              SVE=Tabell-ID] }
    { 20  ;   ;Key Code 1          ;Code50        ;CaptionML=ENU=Key Code 1 }
    { 30  ;   ;Key Code 2          ;Code50        ;CaptionML=ENU=Key Code 2 }
    { 40  ;   ;Key Code 3          ;Code50        ;CaptionML=ENU=Key Code 3 }
    { 50  ;   ;Key Code 4          ;Code50        ;CaptionML=ENU=Key Code 4 }
    { 60  ;   ;Key Date 1          ;Date          ;CaptionML=ENU=Key Date 1 }
    { 70  ;   ;Key Integer 1       ;Integer       ;CaptionML=ENU=Key Integer 1 }
    { 80  ;   ;Key Variant 1       ;Code10        ;CaptionML=ENU=Key Variant 1;
                                                   SQL Data Type=Variant;
                                                   Numeric=Yes;
                                                   Description=Special Key for Project Installment }
    { 100 ;   ;Project Amount Incl. Extension;Decimal;
                                                   CaptionML=ENU=Project Amount Incl. Extension;
                                                   Description=Job }
    { 110 ;   ;Try-out Quote Margin;Decimal       ;CaptionML=ENU=Try-out Quote Margin;
                                                   Description=Try-Out Quote }
    { 120 ;   ;Invoiced Price (LCY);Decimal       ;CaptionML=[ENU=Invoiced Price (LCY);
                                                              NOR=Fakturert  pris (NOK);
                                                              SVE=Fakturerat pris (BVA)];
                                                   Description=Project Installment }
    { 130 ;   ;Invoiced Price      ;Decimal       ;CaptionML=[ENU=Invoiced Price;
                                                              NOR=Fakturert pris;
                                                              SVE=Fakturerat pris];
                                                   Description=Project Installment }
    { 131 ;   ;Invoice in Process (LCY) Proj;Decimal;
                                                   CaptionML=ENU=Invoice  in Process (LCY) Proj;
                                                   Description=Project Installment }
    { 132 ;   ;Invoice in Process Proj;Decimal    ;CaptionML=ENU=Invoice  in Process Proj;
                                                   Description=Project Installment }
    { 140 ;   ;WIP Position        ;Decimal       ;CaptionML=[ENU=WIP Position;
                                                              NOR=Arbeidskapital, posisjon;
                                                              SVE=P†g†ende arbeten, position];
                                                   Description=Job }
    { 150 ;   ;Prognosis Financial Result;Decimal ;CaptionML=[ENU=Prognosis Financial Result;
                                                              NOR=Resultatprognose, finans;
                                                              SVE=Prognos finansiellt resultat];
                                                   Description=Prognosis }
    { 160 ;   ;Actual Reference Point;Integer     ;CaptionML=[ENU=Actual Reference Point;
                                                              SVE=Verklig referenspunkt];
                                                   Description=Service Order }
    { 170 ;   ;Actual Reference Point Desc;Text50 ;CaptionML=[ENU=Actual Reference Point Description;
                                                              SVE=Verklig referenspunktsbeskrivning];
                                                   Description=Service Order }
    { 180 ;   ;Total Revenues      ;Decimal       ;CaptionML=[ENU=Total Revenues;
                                                              NOR=Totale inntekter;
                                                              SVE=Totala int„kter];
                                                   Description=Service Order }
    { 190 ;   ;Total Cost          ;Decimal       ;CaptionML=[ENU=Total Cost;
                                                              NOR=Kostbel›p;
                                                              SVE=Total kostnad];
                                                   Description=Service Order }
    { 200 ;   ;Result              ;Decimal       ;CaptionML=[ENU=Result;
                                                              NOR=Resultat;
                                                              SVE=Resultat];
                                                   Description=Service Order }
    { 210 ;   ;Result %            ;Decimal       ;CaptionML=[ENU=Result %;
                                                              NOR=Resultat (%);
                                                              SVE=Resultat (%)];
                                                   Description=Service Order }
    { 220 ;   ;Invoice in Process (LCY);Decimal   ;CaptionML=[ENU=Invoice in Process (LCY);
                                                              NOR=P†g†ende fakturering (NOK);
                                                              SVE=P†g†ende fakturering (BVA)];
                                                   Description=Service Order }
    { 230 ;   ;Total Costs Job     ;Decimal       ;CaptionML=[ENU=Total Costs;
                                                              NOR=Totale kost;
                                                              SVE=Totala kostnader];
                                                   Description=Job }
    { 240 ;   ;Total Hours Job     ;Decimal       ;CaptionML=[ENU=Total Hours;
                                                              NOR=Timer totalt;
                                                              SVE=Timmar totalt];
                                                   Description=Job }
    { 250 ;   ;Total Costs Element ;Decimal       ;CaptionML=[ENU=Total Costs;
                                                              NOR=Totale kost;
                                                              SVE=Totala kostnader];
                                                   Description=Control Project Element }
    { 260 ;   ;Total Hours Element ;Decimal       ;CaptionML=[ENU=Total Hours;
                                                              NOR=Timer totalt;
                                                              SVE=Timmar totalt];
                                                   Description=Control Project Element }
    { 270 ;   ;Total Costs Cost Type;Decimal      ;CaptionML=[ENU=Total Costs;
                                                              NOR=Totale kost;
                                                              SVE=Totala kostnader];
                                                   Description=Control Project Cost Type }
    { 280 ;   ;Total Hours Cost Type;Decimal      ;CaptionML=[ENU=Total Hours;
                                                              NOR=Timer totalt;
                                                              SVE=Timmar totalt];
                                                   Description=Control Project Cost Type }
    { 290 ;   ;Result Cost Type    ;Decimal       ;CaptionML=[ENU=Result;
                                                              NOR=Resultat;
                                                              SVE=Resultat];
                                                   Description=Control Project Cost Type }
    { 300 ;   ;Result Hours Cost Type;Decimal     ;CaptionML=[ENU=Hours Result;
                                                              NOR=Timer (resultat);
                                                              SVE=Timmar (resultat)];
                                                   Description=Control Project Cost Type }
    { 310 ;   ;Allowed Cost Type   ;Decimal       ;CaptionML=[ENU=Allowed;
                                                              NOR=Tillatt;
                                                              SVE=Till†ten];
                                                   Description=Control Project Cost Type }
    { 320 ;   ;Allowed Hours Cost Type;Decimal    ;CaptionML=[ENU=Allowed Hours;
                                                              NOR=Tillatte timer;
                                                              SVE=Till†tna timmar];
                                                   Description=Control Project Cost Type }
    { 330 ;   ;Total Costs Cost Object;Decimal    ;CaptionML=[ENU=Total Costs;
                                                              NOR=Totale kost;
                                                              SVE=Totala kostnader];
                                                   Description=Control Project Cost Object }
    { 340 ;   ;Total Hours Cost Object;Decimal    ;CaptionML=[ENU=Total Hours;
                                                              NOR=Timer totalt;
                                                              SVE=Timmar totalt];
                                                   Description=Control Project Cost Object }
    { 350 ;   ;Result Cost Object  ;Decimal       ;CaptionML=[ENU=Result;
                                                              NOR=Resultat;
                                                              SVE=Resultat];
                                                   Description=Control Project Cost Object }
    { 360 ;   ;Result Hours Cost Object;Decimal   ;CaptionML=[ENU=Hours Result;
                                                              NOR=Timer (resultat);
                                                              SVE=Timmar (resultat)];
                                                   Description=Control Project Cost Object }
    { 370 ;   ;Allowed Cost Object ;Decimal       ;CaptionML=[ENU=Allowed;
                                                              NOR=Tillatt;
                                                              SVE=Till†ten];
                                                   Description=Control Project Cost Object }
    { 380 ;   ;Allowed Hours Cost Object;Decimal  ;CaptionML=[ENU=Allowed Hours;
                                                              NOR=Tillatte timer;
                                                              SVE=Till†tna timmar];
                                                   Description=Control Project Cost Object }
    { 390 ;   ;Purchase Cost Object;Decimal       ;CaptionML=[ENU=Purchase (Purchase Action);
                                                              NOR=Innkj›p (Innkj›pshandling);
                                                              SVE=Ink”p (ink”ps†tg„rd)];
                                                   Description=Control Project Cost Object }
    { 400 ;   ;Purchase Result Cost Object;Decimal;CaptionML=[ENU=Purchase Result;
                                                              NOR=Innkj›psresultat;
                                                              SVE=Ink”psresultat];
                                                   Description=Control Project Cost Object }
    { 410 ;   ;Total Costs Cost Component;Decimal ;CaptionML=[ENU=Total Costs;
                                                              NOR=Totale kost;
                                                              SVE=Totala kostnader];
                                                   Description=Control Project Cost Component }
    { 420 ;   ;Total Hours Cost Component;Decimal ;CaptionML=[ENU=Total Hours;
                                                              NOR=Timer totalt;
                                                              SVE=Timmar totalt];
                                                   Description=Control Project Cost Component }
    { 430 ;   ;Result Cost Cost Component;Decimal ;CaptionML=[ENU=Result;
                                                              NOR=Resultat;
                                                              SVE=Resultat];
                                                   Description=Control Project Cost Component }
    { 440 ;   ;Result Hours Cost Component;Decimal;CaptionML=[ENU=Hours Result;
                                                              NOR=Timer (resultat);
                                                              SVE=Timmar (resultat)];
                                                   Description=Control Project Cost Component }
    { 450 ;   ;Allowed Cost Component;Decimal     ;CaptionML=[ENU=Allowed;
                                                              NOR=Tillatt;
                                                              SVE=Till†ten];
                                                   Description=Control Project Cost Component }
    { 460 ;   ;Allowed Hours Cost Component;Decimal;
                                                   CaptionML=[ENU=Allowed Hours;
                                                              NOR=Tillatte timer;
                                                              SVE=Till†tna timmar];
                                                   Description=Control Project Cost Component }
    { 470 ;   ;Actual Costs Cost Component;Decimal;CaptionML=[ENU=Actual;
                                                              NOR=Faktisk;
                                                              SVE=Faktisk];
                                                   Description=Control Project Cost Component }
    { 480 ;   ;Actual Hours Cost Component;Decimal;CaptionML=[ENU=Actual Hours;
                                                              NOR=Reelle timer;
                                                              SVE=Verkliga timmar];
                                                   Description=Control Project Cost Component }
    { 490 ;   ;Total Budget Cost Component;Decimal;CaptionML=[ENU=Total Budget;
                                                              NOR=Budsjett Total;
                                                              SVE=Total budget];
                                                   Description=Control Project Cost Component }
    { 500 ;   ;Budget Hours Cost Component;Decimal;CaptionML=[ENU=Buget Hours;
                                                              NOR=Budsjettimer;
                                                              SVE=Budgettimmar];
                                                   Description=Control Project Cost Component }
    { 510 ;   ;Adjustments Cost Component;Decimal ;CaptionML=[ENU=Adjustments;
                                                              NOR=Justeringer;
                                                              SVE=Justeringar];
                                                   Description=Control Project Cost Component }
    { 520 ;   ;Adjustments Hours Cost Comp.;Decimal;
                                                   CaptionML=[ENU=Adjustments Hours;
                                                              NOR=Justerte timer;
                                                              SVE=Justerade timmar];
                                                   Description=Control Project Cost Component }
    { 530 ;   ;Extensions Cost Component;Decimal  ;CaptionML=[ENU=Extensions;
                                                              NOR=ETA;
                                                              SVE=ŽTA];
                                                   Description=Control Project Cost Component }
    { 540 ;   ;Extensions Hours Cost Comp.;Decimal;CaptionML=[ENU=Extensions Hours;
                                                              NOR=ETA-timer;
                                                              SVE=ŽTA-timmar];
                                                   Description=Control Project Cost Component }
    { 550 ;   ;Options Cost Component;Decimal     ;CaptionML=[ENU=Options;
                                                              NOR=Alternativer;
                                                              SVE=Alternativ];
                                                   Description=Control Project Cost Component }
    { 560 ;   ;Original Budget Cost Component;Decimal;
                                                   CaptionML=[ENU=Original Budget;
                                                              NOR=Opprinnelig budsjett;
                                                              SVE=Ursprunglig budget];
                                                   Description=Control Project Cost Component }
    { 590 ;   ;Quantity External Rented;Decimal   ;CaptionML=[ENU=Quantity External Rented;
                                                              NOR=Antall Eksternt Utleid;
                                                              SVE=Antal externt uthyrt];
                                                   Description=Plant Number }
    { 640 ;   ;Revenues            ;Decimal       ;CaptionML=[ENU=Revenues;
                                                              NOR=Inntekter;
                                                              SVE=Int„kter];
                                                   Description=Plant Number }
    { 650 ;   ;Costs               ;Decimal       ;CaptionML=[ENU=Costs;
                                                              NOR=Kostnader;
                                                              SVE=Kostnader];
                                                   Description=Plant Number }
    { 660 ;   ;Present Location    ;Code20        ;CaptionML=[ENU=Present Location;
                                                              NOR=Aktuell lokasjon;
                                                              SVE=Aktuellt lagerst„lle];
                                                   Description=Inspections }
    { 670 ;   ;Responsible Employee (Current);Code20;
                                                   CaptionML=[ENU=Responsible Employee (Current);
                                                              NOR=Ansvarlig Ansatt (aktuell);
                                                              SVE=Ansvarig anst„lld (aktuell)];
                                                   Description=Inspections }
  }
  KEYS
  {
    {    ;Table ID,Key Code 1,Key Code 2,Key Code 3,Key Code 4,Key Date 1,Key Integer 1,Key Variant 1;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      TotCostDec@1100525040 : Decimal;
      TotHoursDec@1100525039 : Decimal;
      OriginalBudgetAmountDec@1100525035 : Decimal;
      AdjustmentsDec@1100525034 : Decimal;
      AdjustmentsHoursDec@1100525033 : Decimal;
      ExtensionDec@1100525032 : Decimal;
      ExtensionHoursDec@1100525031 : Decimal;
      OptionsDec@1100525030 : Decimal;
      BudgetHoursDec@1100525029 : Decimal;
      ActualCostsDec@1100525028 : Decimal;
      ActualHoursDec@1100525027 : Decimal;
      AllowedHoursDec@1100525026 : Decimal;
      AllowedDec@1100525014 : Decimal;
      ResultDec@1100525004 : Decimal;

    LOCAL PROCEDURE DeleteExistingRecords@1100525003(RecRef@1100525000 : RecordRef);
    VAR
      RecordID@1100525001 : RecordID;
    BEGIN
      RecordID := RecRef.RECORDID;

      SETRANGE("Table ID", RecordID.TABLENO);
      DELETEALL;
    END;

    PROCEDURE CalcJobFields@1100525029(FromDate@1100529401 : Date;ToDate@1100529400 : Date);
    VAR
      RecRef@1100525001 : RecordRef;
      RecordID@1100525003 : RecordID;
      Job@1100525004 : Record 11072003;
      CostControlManagement@1100525005 : Codeunit 11012006;
    BEGIN
      RecRef.GETTABLE(Job);
      DeleteExistingRecords(RecRef);

      Job.SETRANGE("Starting Date", FromDate, ToDate);
      IF Job.FINDSET THEN
        REPEAT
          RecRef.GETTABLE(Job);
          RecordID := RecRef.RECORDID;
          IF NOT GET(RecordID.TABLENO, Job."No.") THEN BEGIN
            INIT;
            "Table ID" := RecordID.TABLENO;
            "Key Code 1" := Job."No.";
            Job.CALCFIELDS(Job."Contract Amount", Job."Extension Contract Amount",
              Job."Options Contract Amount", Job."Actual Costs", Job.Revenues,
              Job."Closed Costs", Job."Closed Revenues");
            "Project Amount Incl. Extension" := (Job."Contract Amount" + Job."Extension Contract Amount" + Job."Options Contract Amount");
            "WIP Position" := ((Job."Actual Costs" + Job."Closed Costs") - (Job.Revenues - Job."Closed Revenues"));
            "Total Costs Job" := CostControlManagement.TotCostProject(Job,TRUE);
            "Total Hours Job" := CostControlManagement.TotHoursProject(Job,TRUE);
            INSERT;
          END;
        UNTIL Job.NEXT = 0;
    END;

    PROCEDURE CalcProjectInstallmentFields@1100525002();
    VAR
      RecRef@1100525001 : RecordRef;
      RecordID@1100525003 : RecordID;
      ProjectInstallment@1100525004 : Record 11012018;
    BEGIN
      RecRef.GETTABLE(ProjectInstallment);
      DeleteExistingRecords(RecRef);

      IF ProjectInstallment.FINDSET THEN
        REPEAT
          RecRef.GETTABLE(ProjectInstallment);
          RecordID := RecRef.RECORDID;
          IF NOT GET(RecordID.TABLENO,
                     ProjectInstallment."Project No.",
                     ProjectInstallment.Principal,
                     ProjectInstallment."Plot No.",
                     '',
                     0D,
                     0,
                     ProjectInstallment."Installment No.")
          THEN BEGIN
            INIT;
            "Table ID" := RecordID.TABLENO;
            "Key Code 1" := ProjectInstallment."Project No.";
            "Key Code 2" := ProjectInstallment.Principal;
            "Key Code 3" := ProjectInstallment."Plot No.";
            "Key Variant 1" := ProjectInstallment."Installment No.";
            ProjectInstallment.CALCFIELDS("Invoiced Price (LCY)", "Invoiced Price", "Invoice in Process (LCY)", "Invoice in Process");
            "Invoiced Price (LCY)" := ProjectInstallment."Invoiced Price (LCY)";
            "Invoiced Price" := ProjectInstallment."Invoiced Price";
            "Invoice in Process (LCY) Proj" := ProjectInstallment."Invoice in Process (LCY)";
            "Invoice in Process Proj" := ProjectInstallment."Invoice in Process";
            INSERT;
          END;
        UNTIL ProjectInstallment.NEXT = 0;
    END;

    PROCEDURE CalcTryoutQuoteFields@1100525001(FromDate@1100525001 : Date;ToDate@1100525000 : Date);
    VAR
      RecRef@1100525002 : RecordRef;
      RecordID@1100525004 : RecordID;
      TryoutQuote@1100525003 : Record 11012758;
    BEGIN
      RecRef.GETTABLE(TryoutQuote);
      DeleteExistingRecords(RecRef);

      TryoutQuote.SETRANGE("Expected Starting Date", FromDate, ToDate);
      IF TryoutQuote.FINDSET THEN
        REPEAT
          INIT;
          RecRef.GETTABLE(TryoutQuote);
          RecordID := RecRef.RECORDID;
          IF NOT GET(RecordID.TABLENO, TryoutQuote.Code) THEN BEGIN
            "Table ID" := RecordID.TABLENO;
            "Key Code 1" := TryoutQuote.Code;
            "Try-out Quote Margin" := TryoutQuote.TryOutQuoteMargin;
            INSERT;
          END;
        UNTIL TryoutQuote.NEXT = 0;
    END;

    PROCEDURE CalcServiceOrderFields@1100528800(FromDate@1100525000 : Date;ToDate@1100525002 : Date);
    VAR
      RecRef@1100525001 : RecordRef;
      RecordID@1100525003 : RecordID;
      ServiceOrder@1100528800 : Record 11012823;
      CostControlManagement@1100528801 : Codeunit 11012006;
    BEGIN
      RecRef.GETTABLE(ServiceOrder);
      DeleteExistingRecords(RecRef);

      ServiceOrder.SETRANGE("Order Date", FromDate, ToDate);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          RecRef.GETTABLE(ServiceOrder);
          RecordID := RecRef.RECORDID;
          IF NOT GET(RecordID.TABLENO, ServiceOrder."No.") THEN BEGIN
            INIT;
            "Table ID" := RecordID.TABLENO;
            "Key Code 1" := ServiceOrder."No.";
            ServiceOrder.CALCFIELDS("Actual Reference Point", "Actual Reference Point Desc");
            "Actual Reference Point" := ServiceOrder."Actual Reference Point";
            "Actual Reference Point Desc" := ServiceOrder."Actual Reference Point Desc";
            CostControlManagement.CalcFieldsServOrder(ServiceOrder);
            "Total Cost" := CostControlManagement.TotCostServOrder(ServiceOrder,TRUE);
            ServiceOrder.CALCFIELDS("Invoice Price", "Invoiced Price", "Invoice in Process", "Credit Memo in Process");
            "Total Revenues" := ServiceOrder."Invoice Price" + ServiceOrder."Invoiced Price" + ServiceOrder."Invoice in Process" + ServiceOrder."Credit Memo in Process";
            Result := "Total Revenues" - "Total Cost";
            IF "Total Revenues" <> 0 THEN
              "Result %" := 100 * ("Total Revenues" - "Total Cost") / "Total Revenues"
            ELSE
              "Result %" := 0;
            "Invoice in Process (LCY)" := ServiceOrder.GetInvoiceInProcessLCY;
            INSERT;
          END;
        UNTIL ServiceOrder.NEXT = 0;
    END;

    PROCEDURE CalcPrognosisFields@1100525000(FromDate@1100525003 : Date;ToDate@1100525004 : Date);
    VAR
      RecRef@1100525000 : RecordRef;
      RecordID@1100525001 : RecordID;
      Prognosis@1100525002 : Record 11012034;
    BEGIN
      RecRef.GETTABLE(Prognosis);
      DeleteExistingRecords(RecRef);

      Prognosis.SETRANGE("Prognosis Date", FromDate, ToDate);
      IF Prognosis.FINDSET THEN
        REPEAT
          RecRef.GETTABLE(Prognosis);
          RecordID := RecRef.RECORDID;
          IF NOT GET(RecordID.TABLENO, Prognosis."Project No.", '', '', '', Prognosis."Prognosis Date") THEN BEGIN
            INIT;
            "Table ID" := RecordID.TABLENO;
            "Key Code 1" := Prognosis."Project No.";
            "Key Date 1" := Prognosis."Prognosis Date";
            "Project Amount Incl. Extension" := (Prognosis."Rough Prognosis Total Revenues" - Prognosis."Rough Prognosis Total Cost");
            INSERT;
          END;
        UNTIL Prognosis.NEXT = 0;
    END;

    PROCEDURE CalcControlProjectElementFields@1100525005(FromDate@1100525001 : Date;ToDate@1100525000 : Date);
    VAR
      RecRef@1100525005 : RecordRef;
      RecordID@1100525004 : RecordID;
      Job@1100525006 : Record 11072003;
      ControlProjectElement@1100525003 : Record 11012048;
      CostControlManagement@1100525002 : Codeunit 11012006;
    BEGIN
      RecRef.GETTABLE(ControlProjectElement);
      DeleteExistingRecords(RecRef);

      Job.SETRANGE("Starting Date", FromDate, ToDate);
      IF Job.FINDSET THEN
        REPEAT
          ControlProjectElement.SETRANGE("Project No.",Job."No.");
          IF ControlProjectElement.FINDSET THEN
            REPEAT
              RecRef.GETTABLE(ControlProjectElement);
              RecordID := RecRef.RECORDID;
              IF NOT GET(RecordID.TABLENO, ControlProjectElement."Project No.", ControlProjectElement.Element) THEN BEGIN
                INIT;
                "Table ID" := RecordID.TABLENO;
                "Key Code 1" := ControlProjectElement."Project No.";
                "Key Code 2" := ControlProjectElement.Element;
                "Total Costs Element" := CostControlManagement.TotCostElem(ControlProjectElement,TRUE);
                "Total Hours Element" := CostControlManagement.TotHoursElem(ControlProjectElement,TRUE);
                INSERT;
              END;
            UNTIL ControlProjectElement.NEXT = 0;
        UNTIL Job.NEXT = 0;
    END;

    PROCEDURE CalcControlProjectCostTypeFields@1100525006(FromDate@1100525001 : Date;ToDate@1100525000 : Date);
    VAR
      RecRef@1100525005 : RecordRef;
      RecordID@1100525004 : RecordID;
      Job@1100525006 : Record 11072003;
      ControlProjectCostType@1100525003 : Record 11012046;
      CostControlManagement@1100525002 : Codeunit 11012006;
      AllowedDec@1100525007 : Decimal;
      AllowedHoursDec@1100525008 : Decimal;
      PrevAllowedDec@1100525009 : Decimal;
      PrevAllowedHoursDec@1100525010 : Decimal;
      PurchaseDec@1100525011 : Decimal;
      EstimPurchResultDec@1100525012 : Decimal;
      PurchCostDec@1100525013 : Decimal;
      ActualPurchResultDec@1100525014 : Decimal;
      TotPurchResultDec@1100525015 : Decimal;
    BEGIN
      RecRef.GETTABLE(ControlProjectCostType);
      DeleteExistingRecords(RecRef);

      Job.SETRANGE("Starting Date", FromDate, ToDate);
      IF Job.FINDSET THEN
        REPEAT
          ControlProjectCostType.SETRANGE("Project No.",Job."No.");
          IF ControlProjectCostType.FINDSET THEN
            REPEAT
              RecRef.GETTABLE(ControlProjectCostType);
              RecordID := RecRef.RECORDID;
              IF NOT GET(RecordID.TABLENO,
                         ControlProjectCostType."Project No.",
                         '', '', '',0D,
                         ControlProjectCostType."Cost Type")
              THEN BEGIN
                INIT;
                "Table ID" := RecordID.TABLENO;
                "Key Code 1" := ControlProjectCostType."Project No.";
                "Key Integer 1" := ControlProjectCostType."Cost Type";
                "Total Costs Cost Type" := CostControlManagement.TotCostCostType(ControlProjectCostType,TRUE);
                "Total Hours Cost Type" := CostControlManagement.TotHoursCostType(ControlProjectCostType,TRUE);
                "Result Cost Type" := CostControlManagement.ResultCostType(ControlProjectCostType,TRUE);
                "Result Hours Cost Type" := CostControlManagement.ResultHoursCostType(ControlProjectCostType,TRUE);
                CostControlManagement.AllowedAndPurchCostType(
                  ControlProjectCostType,
                  AllowedDec, AllowedHoursDec, PrevAllowedDec, PrevAllowedHoursDec,
                  PurchaseDec, EstimPurchResultDec, PurchCostDec, ActualPurchResultDec, TotPurchResultDec,TRUE);
                "Allowed Cost Type" := AllowedDec;
                "Allowed Hours Cost Type" := AllowedHoursDec;
                INSERT;
              END;
            UNTIL ControlProjectCostType.NEXT = 0;
        UNTIL Job.NEXT = 0;
    END;

    PROCEDURE CalcControlProjectCostObjectFields@1100525007(FromDate@1100525001 : Date;ToDate@1100525000 : Date);
    VAR
      RecRef@1100525005 : RecordRef;
      RecordID@1100525004 : RecordID;
      Job@1100525006 : Record 11072003;
      ControlProjectCostObject@1100525003 : Record 11012047;
      CostControlManagement@1100525002 : Codeunit 11012006;
      AllowedDec@1100525015 : Decimal;
      AllowedHoursDec@1100525014 : Decimal;
      PrevAllowedDec@1100525013 : Decimal;
      PrevAllowedHoursDec@1100525012 : Decimal;
      PurchaseDec@1100525011 : Decimal;
      EstimPurchResultDec@1100525010 : Decimal;
      PurchCostDec@1100525009 : Decimal;
      ActualPurchResultDec@1100525008 : Decimal;
      TotPurchResultDec@1100525007 : Decimal;
    BEGIN
      RecRef.GETTABLE(ControlProjectCostObject);
      DeleteExistingRecords(RecRef);

      Job.SETRANGE("Starting Date", FromDate, ToDate);
      IF Job.FINDSET THEN
        REPEAT
          ControlProjectCostObject.SETRANGE("Project No.",Job."No.");
          IF ControlProjectCostObject.FINDSET THEN
            REPEAT
              RecRef.GETTABLE(ControlProjectCostObject);
              RecordID := RecRef.RECORDID;
              IF NOT GET(RecordID.TABLENO,
                         ControlProjectCostObject."Project No.",
                         ControlProjectCostObject."Cost Object",
                         '', '',0D,
                         ControlProjectCostObject."Cost Type")
              THEN BEGIN
                INIT;
                "Table ID" := RecordID.TABLENO;
                "Key Code 1" := ControlProjectCostObject."Project No.";
                "Key Integer 1" := ControlProjectCostObject."Cost Type";
                "Key Code 2" := ControlProjectCostObject."Cost Object";
                "Total Costs Cost Object" := CostControlManagement.TotCostCostObj(ControlProjectCostObject,TRUE);
                "Total Hours Cost Object" := CostControlManagement.TotHoursCostObj(ControlProjectCostObject,TRUE);
                "Result Cost Object" := CostControlManagement.ResultCostObj(ControlProjectCostObject,TRUE);
                "Result Hours Cost Object" := CostControlManagement.ResultHoursCostObj(ControlProjectCostObject,TRUE);
                CostControlManagement.AllowedAndPurchCostObj(
                  ControlProjectCostObject,
                  AllowedDec, AllowedHoursDec, PrevAllowedDec, PrevAllowedHoursDec,
                  PurchaseDec, EstimPurchResultDec, PurchCostDec, ActualPurchResultDec, TotPurchResultDec,TRUE);
                "Allowed Cost Object" := AllowedDec;
                "Allowed Hours Cost Object" := AllowedHoursDec;
                "Purchase Cost Object" := PurchaseDec;
                "Purchase Result Cost Object":= CostControlManagement.PurchResultCostObj(ControlProjectCostObject,TRUE);
                INSERT;
              END;
            UNTIL ControlProjectCostObject.NEXT = 0;
        UNTIL Job.NEXT = 0;
    END;

    PROCEDURE CalcControlProjectCostComponentFields@1100525004(FromDate@1100525001 : Date;ToDate@1100525000 : Date);
    VAR
      RecRef@1100525006 : RecordRef;
      RecordID@1100525005 : RecordID;
      Job@1100525004 : Record 11072003;
      ControlProjectCostComponent@1100525003 : Record 11020297;
    BEGIN
      RecRef.GETTABLE(ControlProjectCostComponent);
      DeleteExistingRecords(RecRef);

      Job.SETRANGE("Starting Date", FromDate, ToDate);
      IF Job.FINDSET THEN
        REPEAT
          ControlProjectCostComponent.SETRANGE("Project No.",Job."No.");
          IF ControlProjectCostComponent.FINDSET THEN
            REPEAT
              RecRef.GETTABLE(ControlProjectCostComponent);
              RecordID := RecRef.RECORDID;
              IF NOT GET(RecordID.TABLENO,
                         ControlProjectCostComponent."Project No.",
                         ControlProjectCostComponent."Cost Component")
              THEN BEGIN
                INIT;
                "Table ID" := RecordID.TABLENO;
                "Key Code 1" := ControlProjectCostComponent."Project No.";
                "Key Code 2" := ControlProjectCostComponent."Cost Component";
                CalcAmountsCostComponents(ControlProjectCostComponent);

                "Total Costs Cost Component" := TotCostDec;
                "Total Hours Cost Component" := TotHoursDec;
                "Result Cost Cost Component" := ResultDec;
                "Result Hours Cost Component" := AllowedHoursDec-ActualHoursDec;
                "Allowed Cost Component" := AllowedDec;
                "Allowed Hours Cost Component" := AllowedHoursDec;
                "Actual Costs Cost Component" := ActualCostsDec;
                "Actual Hours Cost Component" := ActualHoursDec;
                "Total Budget Cost Component" := OriginalBudgetAmountDec + AdjustmentsDec + ExtensionDec + OptionsDec;
                "Budget Hours Cost Component" := BudgetHoursDec;
                "Adjustments Cost Component" := AdjustmentsDec;
                "Adjustments Hours Cost Comp." := AdjustmentsHoursDec;
                "Extensions Cost Component" := ExtensionDec;
                "Extensions Hours Cost Comp." := ExtensionHoursDec;
                "Options Cost Component" := OptionsDec;
                "Original Budget Cost Component" := OriginalBudgetAmountDec;

                INSERT;
              END;
            UNTIL ControlProjectCostComponent.NEXT = 0;
        UNTIL Job.NEXT = 0;
    END;

    PROCEDURE CalcPlantNumbersFields@1100529101();
    VAR
      RecRef@1100529101 : RecordRef;
      RecordID@1100529100 : RecordID;
      PlantNumber@1100529102 : Record 11012552;
    BEGIN
      RecRef.GETTABLE(PlantNumber);
      DeleteExistingRecords(RecRef);

      IF PlantNumber.FINDSET THEN
        REPEAT
          RecRef.GETTABLE(PlantNumber);
          RecordID := RecRef.RECORDID;
          IF NOT GET(RecordID.TABLENO,
                     PlantNumber."Plant Type",
                     PlantNumber."No.")
          THEN BEGIN
            INIT;
            "Table ID" := RecordID.TABLENO;
            "Key Code 1" := PlantNumber."Plant Type";
            "Key Code 2" := PlantNumber."No.";
            PlantNumber.CALCFIELDS("Quantity External Rented",
                                   Revenues,
                                   Costs);
            "Quantity External Rented" := PlantNumber."Quantity External Rented";
            Revenues := PlantNumber.Revenues;
            Costs := PlantNumber.Costs;
            INSERT;
          END;
        UNTIL PlantNumber.NEXT = 0;
    END;

    PROCEDURE CalcInspectionFields@1100529103();
    VAR
      RecRef@1100529102 : RecordRef;
      RecordID@1100529101 : RecordID;
      Inspection@1100529100 : Record 11012564;
    BEGIN
      RecRef.GETTABLE(Inspection);
      DeleteExistingRecords(RecRef);

      IF Inspection.FINDSET THEN
        REPEAT
          RecRef.GETTABLE(Inspection);
          RecordID := RecRef.RECORDID;
          IF NOT GET(RecordID.TABLENO,
                     Inspection."Plant Type",
                     Inspection."Plant No.",
                     '',
                     '',
                     0D,
                     Inspection."Line No.")
          THEN BEGIN
            INIT;
            "Table ID" := RecordID.TABLENO;
            "Key Code 1" := Inspection."Plant Type";
            "Key Code 2" := Inspection."Plant No.";
            "Key Integer 1" := Inspection."Line No.";
            Inspection.CALCFIELDS("Present Location",
                                  "Responsible Employee (Current)");
            "Present Location" := Inspection."Present Location";
            "Responsible Employee (Current)" := Inspection."Responsible Employee (Current)";
            INSERT;
          END;
        UNTIL Inspection.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcAmountsCostComponents@1100525008(ControlProjectCostComponent@1100525010 : Record 11020297);
    VAR
      CostObjectControl@1100525009 : Record 11012047;
      CostControlManagement@1100525011 : Codeunit 11012006;
      lAllowedDec@1100525008 : Decimal;
      lAllowedHoursDec@1100525007 : Decimal;
      lPrevAllowedDec@1100525006 : Decimal;
      lPrevAllowedHoursDec@1100525005 : Decimal;
      lPurchaseDec@1100525004 : Decimal;
      lEstimPurchResultDec@1100525003 : Decimal;
      lPurchCostDec@1100525002 : Decimal;
      lActualPurchResultDec@1100525001 : Decimal;
      lTotPurchResultDec@1100525000 : Decimal;
    BEGIN
      ClearVariables;
      WITH CostObjectControl DO BEGIN
        SETCURRENTKEY("Project No.","Cost Component","Cost Object");
        SETRANGE("Project No.", ControlProjectCostComponent."Project No.");
        SETRANGE("Cost Component", ControlProjectCostComponent."Cost Component");
        IF FINDSET(FALSE, FALSE) THEN BEGIN
          REPEAT
            CostControlManagement.CalcFieldsCostObj(CostObjectControl);

            OriginalBudgetAmountDec := OriginalBudgetAmountDec + "Original Budget Amount";
            AdjustmentsDec := AdjustmentsDec + Adjustments;
            AdjustmentsHoursDec := AdjustmentsHoursDec + "Adjustments Hours";
            ExtensionDec := ExtensionDec + Extension;
            ExtensionHoursDec := ExtensionHoursDec + "Extension Hours";
            OptionsDec := OptionsDec + Options;
            BudgetHoursDec := BudgetHoursDec + "Budget Hours";

            ActualCostsDec := ActualCostsDec + "Actual Costs";
            ActualHoursDec := ActualHoursDec + "Actual Hours";

            CostControlManagement.AllowedAndPurchCostObj(
              CostObjectControl,
              lAllowedDec, lAllowedHoursDec, lPrevAllowedDec, lPrevAllowedHoursDec,
              lPurchaseDec, lEstimPurchResultDec, lPurchCostDec, lActualPurchResultDec, lTotPurchResultDec,TRUE);
            AllowedDec  := AllowedDec + lAllowedDec;
            AllowedHoursDec  := AllowedHoursDec +  lAllowedHoursDec;

            TotCostDec := TotCostDec + CostControlManagement.TotCostCostObj(CostObjectControl,FALSE);
            TotHoursDec := TotHoursDec + CostControlManagement.TotHoursCostObj(CostObjectControl,FALSE);
            ResultDec := ResultDec + CostControlManagement.PurchResultCostObj(CostObjectControl,FALSE);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE ClearVariables@1100525009();
    BEGIN
      CLEAR(TotCostDec);
      CLEAR(TotHoursDec);
      CLEAR(ResultDec);
      CLEAR(OriginalBudgetAmountDec);
      CLEAR(AdjustmentsDec);
      CLEAR(AdjustmentsHoursDec);
      CLEAR(ExtensionDec);
      CLEAR(ExtensionHoursDec);
      CLEAR(OptionsDec);
      CLEAR(BudgetHoursDec);
      CLEAR(ActualCostsDec);
      CLEAR(ActualHoursDec);
      CLEAR(AllowedDec);
      CLEAR(AllowedHoursDec);
    END;

    BEGIN
    END.
  }
}

