OBJECT Codeunit 458 Azure AD Licenses
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GraphClient@1000 : DotNet "'Microsoft.Dynamics.Nav.AzureADGraphClient, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.AzureADGraphClient.GraphQuery";
      SubscribedSkuEnumerator@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      SubscribedSku@1002 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.SkuInfo";
      ServicePlanEnumerator@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      ServicePlan@1003 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.ServicePlanInfo";
      DoIncludeUnknownPlans@1005 : Boolean;

    LOCAL PROCEDURE Initialize@2();
    BEGIN
      IF ISNULL(GraphClient) THEN
        GraphClient := GraphClient.GraphQuery();
    END;

    [External]
    PROCEDURE Reset@3();
    BEGIN
      IF ISNULL(GraphClient) THEN
        Initialize;

      IF ISNULL(SubscribedSkuEnumerator) THEN
        SubscribedSkuEnumerator := GraphClient.GetDirectorySubscribedSkus().GetEnumerator()
      ELSE
        SubscribedSkuEnumerator.Reset;
    END;

    [External]
    PROCEDURE Next@6() : Boolean;
    VAR
      MembershipEntitlement@1000 : Record 2000000195;
      TempSubscribedSku@1001 : DotNet "'Microsoft.Dynamics.Nav.LicensingService.Model, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.LicensingService.Model.SkuInfo";
      TempServicePlanEnumerator@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      FoundKnownPlan@1003 : Boolean;
    BEGIN
      IF ISNULL(GraphClient) THEN
        Reset;

      MembershipEntitlement.SETRANGE(Type,MembershipEntitlement.Type::"Azure AD Plan");

      TempSubscribedSku := SubscribedSku;
      TempServicePlanEnumerator := ServicePlanEnumerator;

      IF SubscribedSkuEnumerator.MoveNext THEN BEGIN
        SubscribedSku := SubscribedSkuEnumerator.Current;
        ServicePlanEnumerator := SubscribedSku.ServicePlans.GetEnumerator();

        IF NOT DoIncludeUnknownPlans THEN BEGIN
          FoundKnownPlan := FALSE;
          WHILE NextServicePlan DO BEGIN
            MembershipEntitlement.SETFILTER(ID,LOWERCASE(ServicePlanId));
            IF MembershipEntitlement.COUNT > 0 THEN
              FoundKnownPlan := TRUE
            ELSE BEGIN
              MembershipEntitlement.SETFILTER(ID,UPPERCASE(ServicePlanId));
              IF MembershipEntitlement.COUNT > 0 THEN
                FoundKnownPlan := TRUE;
            END;
          END;

          IF NOT FoundKnownPlan THEN BEGIN
            SubscribedSku := TempSubscribedSku;
            ServicePlanEnumerator := TempServicePlanEnumerator;
            EXIT(Next);
          END;

          ServicePlanEnumerator.Reset;
        END;

        EXIT(TRUE);
      END;

      EXIT(FALSE)
    END;

    [External]
    PROCEDURE CapabilityStatus@18() : Text;
    BEGIN
      IF ISNULL(SubscribedSku) THEN
        EXIT('');

      EXIT(SubscribedSku.CapabilityStatus);
    END;

    [External]
    PROCEDURE ConsumedUnits@19() : Integer;
    BEGIN
      IF ISNULL(SubscribedSku) THEN
        EXIT(0);

      EXIT(SubscribedSku.ConsumedUnits);
    END;

    [External]
    PROCEDURE ObjectId@20() : Text;
    BEGIN
      IF ISNULL(SubscribedSku) THEN
        EXIT('');

      EXIT(SubscribedSku.ObjectId);
    END;

    [External]
    PROCEDURE PrepaidUnitsInEnabledState@21() : Integer;
    BEGIN
      IF ISNULL(SubscribedSku) THEN
        EXIT(0);

      EXIT(SubscribedSku.PrepaidUnits.Enabled);
    END;

    [External]
    PROCEDURE PrepaidUnitsInSuspendedState@28() : Integer;
    BEGIN
      IF ISNULL(SubscribedSku) THEN
        EXIT(0);

      EXIT(SubscribedSku.PrepaidUnits.Suspended);
    END;

    [External]
    PROCEDURE PrepaidUnitsInWarningState@29() : Integer;
    BEGIN
      IF ISNULL(SubscribedSku) THEN
        EXIT(0);

      EXIT(SubscribedSku.PrepaidUnits.Warning);
    END;

    [External]
    PROCEDURE SkuId@22() : Text;
    BEGIN
      IF ISNULL(SubscribedSku) THEN
        EXIT('');

      EXIT(SubscribedSku.SkuId);
    END;

    [External]
    PROCEDURE SkuPartNumber@23() : Text;
    BEGIN
      IF ISNULL(SubscribedSku) THEN
        EXIT('');

      EXIT(SubscribedSku.SkuPartNumber);
    END;

    [External]
    PROCEDURE ResetServicePlans@31();
    BEGIN
      IF NOT ISNULL(ServicePlanEnumerator) THEN
        ServicePlanEnumerator.Reset;
    END;

    [External]
    PROCEDURE NextServicePlan@32() : Boolean;
    BEGIN
      IF ISNULL(ServicePlanEnumerator) THEN
        EXIT(FALSE);

      IF ServicePlanEnumerator.MoveNext() THEN BEGIN
        ServicePlan := ServicePlanEnumerator.Current;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE ServicePlanCapabilityStatus@33() : Text;
    BEGIN
      IF ISNULL(ServicePlan) THEN
        EXIT('');

      EXIT(ServicePlan.CapabilityStatus);
    END;

    [External]
    PROCEDURE ServicePlanId@34() FoundServicePlanId : Text;
    BEGIN
      IF ISNULL(ServicePlan) THEN
        EXIT('');

      FoundServicePlanId := ServicePlan.ServicePlanId;
      IF STRLEN(FoundServicePlanId) > 2 THEN
        FoundServicePlanId := COPYSTR(FoundServicePlanId,2,STRLEN(FoundServicePlanId) - 2);
    END;

    [External]
    PROCEDURE ServicePlanName@35() : Text;
    BEGIN
      IF ISNULL(ServicePlan) THEN
        EXIT('');

      EXIT(ServicePlan.ServicePlanName);
    END;

    PROCEDURE IncludeUnknownPlans@4() : Boolean;
    BEGIN
      EXIT(DoIncludeUnknownPlans);
    END;

    PROCEDURE SetIncludeUnknownPlans@7(IncludeUnknownPlans@1000 : Boolean);
    BEGIN
      DoIncludeUnknownPlans := IncludeUnknownPlans;
    END;

    BEGIN
    END.
  }
}

