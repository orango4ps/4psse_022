OBJECT Codeunit 11012368 Impl. Company Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Window@1100525003 : Dialog;
      Progress@1100525008 : Integer;
      NoOfRecords@1100525002 : Integer;
      Counter@1100525001 : Integer;
      Text001@1100525004 : TextConst 'ENU=Creating Check Setup Lines @1@@@@@@@@';
      KeyTxt@1100525007 : Text[250];
      NewRecBln@1100525006 : Boolean;
      Text002@1100529200 : TextConst 'ENU=%1 will be refreshed, do you want to continue?;NOR=%1 vil bli oppdatert. Vil du fortsette?;SVE=%1 kommer att uppdateras. Vill du forts„tta?';
      Text006@1100529204 : TextConst 'ENU=Specific Permission Set Groups will be deleted, continue?';
      Text008@1100529201 : TextConst 'ENU=Data in Table %1 will be deleted, continue?';
      Text009@1100529207 : TextConst 'ENU=Users and Access Control Lines will be deleted, continue?';
      Text011@1100529209 : TextConst 'ENU=Data in table %1 will be deleted in selected companies before copying data from present company to selected companies, continue?';
      Text012@1100529202 : TextConst 'ENU=Users and Access Control Lines will be deleted, continue?';
      Text015@1100525005 : TextConst 'ENU=Setting XML Migration Option for all Setup Tables @1@@@@@@@@';
      Text016@1100525009 : TextConst 'ENU=Insert Tables into XML Migration Table @1@@@@@@@@';

    PROCEDURE FillCheckData@1100525000(ImplCompany@1100525000 : Record 11020394);
    VAR
      ImplCheckSetup@1100485000 : Record 11020397;
      ImplCompanyTable@1100525002 : Record 11020395;
    BEGIN
      ImplCheckSetup.SETRANGE("Database Abbreviation",ImplCompany."Database Abbreviation");
      ImplCheckSetup.SETRANGE("Company Abbreviation",ImplCompany."Company Abbreviation");
      ImplCheckSetup.SETRANGE("Check Date",TODAY);
      IF NOT ImplCheckSetup.FINDFIRST THEN
        InsertCheckSetup(
          ImplCompany."Database Abbreviation",
          ImplCompany."Company Abbreviation",
          ImplCompany."Database Company")
      ELSE
        DeleteCheckSetupLines(
          ImplCompany."Database Abbreviation",
          ImplCompany."Company Abbreviation");

      ImplCompanyTable.SETCURRENTKEY("Database Abbreviation","Company Abbreviation","Defined Table Type");
      ImplCompanyTable.SETRANGE("Database Abbreviation",ImplCompany."Database Abbreviation");
      ImplCompanyTable.SETRANGE("Company Abbreviation",ImplCompany."Company Abbreviation");
      ImplCompanyTable.SETRANGE("Check Data",ImplCompanyTable."Check Data"::Yes);
      ImplCompanyTable.SETRANGE("License permission",ImplCompanyTable."License permission"::Yes);
      IF ImplCompanyTable.FINDSET(FALSE,FALSE) THEN BEGIN
        NoOfRecords := ImplCompanyTable.COUNT;
        Counter := 0;
        Window.OPEN(STRSUBSTNO(Text001,ImplCompanyTable."Table ID"));
        REPEAT
          Counter := Counter + 1;
          UpdateProgressWindow(Counter);
          IF ImplCompanyTable.GetNoOfDatabaseRecords <> 0 THEN
            CreateCheckSetupLines(
              ImplCompanyTable."Table ID",
              ImplCompanyTable."Defined Table Type",
              ImplCompanyTable.Granule,
              ImplCompany."Database Abbreviation",
              ImplCompany."Company Abbreviation",
              ImplCompany."Database Company");
        UNTIL ImplCompanyTable.NEXT = 0;
        Window.CLOSE;
      END;
    END;

    PROCEDURE InsertCheckSetup@1100525015(DatabaseAbbreviation@1100525001 : Text[30];CompanyAbbreviation@1100525002 : Text[30];DatabaseCompany@1100525004 : Text[30]);
    VAR
      ImplCheckSetup@1100525000 : Record 11020397;
      ApplicationSystemConstants@1100525003 : Codeunit 9015;
    BEGIN
      ImplCheckSetup."Database Abbreviation" := DatabaseAbbreviation;
      ImplCheckSetup."Company Abbreviation" := CompanyAbbreviation;
      ImplCheckSetup."Check Date" := TODAY;
      ImplCheckSetup.Version := COPYSTR(ApplicationSystemConstants.ApplicationVersion,1,MAXSTRLEN(ImplCheckSetup.Version));
      ImplCheckSetup."Database Company" := DatabaseCompany;
      ImplCheckSetup.INSERT(TRUE);
    END;

    PROCEDURE DeleteCheckSetupLines@1100525016(DatabaseAbbreviation@1100525002 : Text[30];CompanyAbbreviation@1100525001 : Text[30]);
    VAR
      ImplCheckSetupLine@1100525003 : Record 11020369;
    BEGIN
      ImplCheckSetupLine.SETCURRENTKEY("Check Date","Database Abbreviation","Company Abbreviation");
      ImplCheckSetupLine.SETRANGE("Check Date",TODAY);
      ImplCheckSetupLine.SETRANGE("Database Abbreviation",DatabaseAbbreviation);
      ImplCheckSetupLine.SETRANGE("Company Abbreviation",CompanyAbbreviation);
      IF ImplCheckSetupLine.FINDSET THEN
        ImplCheckSetupLine.DELETEALL;
    END;

    PROCEDURE CreateCheckSetupLines@1100485005(TableID@1100525006 : Integer;TableType@1100525005 : ',Setup,Common Data,Basic Data,Financial Setup,Basic Cards,Input,Transaction,Not Applicable,Tools';Gran@1100525008 : Text[30];DbAbb@1100525000 : Text[30];CompAbb@1100525007 : Text[30];DataBaseComp@1100525004 : Text[30]);
    VAR
      lvRecordRef@1100485005 : RecordRef;
    BEGIN
      lvRecordRef.OPEN(TableID,FALSE,DataBaseComp);
      IF lvRecordRef.FINDSET(TRUE, FALSE) THEN
        REPEAT
          DefineKeyCheckSetup(lvRecordRef);
          NewRecBln := TRUE;
          FillCheckFieldData(lvRecordRef,TableType,Gran,DbAbb,CompAbb,DataBaseComp);
        UNTIL lvRecordRef.NEXT =0;
    END;

    PROCEDURE DefineKeyCheckSetup@1100525008(RecRef2@1100485000 : RecordRef);
    VAR
      lvKeyRef@1100525003 : KeyRef;
      i@1100525011 : Integer;
    BEGIN
      KeyTxt := '';
      i := 1;

      lvKeyRef := RecRef2.KEYINDEX(1);
      WHILE i <= lvKeyRef.FIELDCOUNT DO BEGIN
        IF i = 1 THEN
          KeyTxt := STRSUBSTNO('%1',lvKeyRef.FIELDINDEX(i))
        ELSE
          KeyTxt := KeyTxt + ' ' + STRSUBSTNO('%1',lvKeyRef.FIELDINDEX(i));
        i := i + 1;
      END;
    END;

    PROCEDURE FillCheckFieldData@1100485002(RecRef2@1100485000 : RecordRef;Type@1100485007 : ' ,Setup,Common Data,Basic Data,Financial Setup,Basic Cards,Input,Transaction,Not Applicable,Tools';Gran@1100525000 : Text[200];DbAbb@1100525001 : Text[30];CompAbb@1100525002 : Text[30];DatabaseComp@1100525003 : Text[30]);
    VAR
      lvFieldRef@1100485004 : FieldRef;
      FieldRec@1100485003 : Record 2000000041;
      LastImplCheckSetupLine@1100485002 : Record 11020369;
      ImplCheckSetupLine@1100485005 : Record 11020369;
    BEGIN
      WITH ImplCheckSetupLine DO BEGIN
        FieldRec.SETRANGE(TableNo,RecRef2.NUMBER);
        FieldRec.SETRANGE(Class, FieldRec.Class::Normal);
        FieldRec.SETRANGE(Enabled, TRUE);
        FieldRec.SETFILTER(Type,'<>%1', FieldRec.Type::BLOB);
        IF FieldRec.FIND('-') THEN
          REPEAT
            lvFieldRef := RecRef2.FIELD(FieldRec."No.");
            LastImplCheckSetupLine.SETRANGE("Database Abbreviation",DbAbb);
            LastImplCheckSetupLine.SETRANGE("Company Abbreviation",CompAbb);
            LastImplCheckSetupLine.SETRANGE("Check Date",TODAY);
            IF LastImplCheckSetupLine.FINDLAST THEN;

            "Entry No." := LastImplCheckSetupLine."Entry No." + 1;
            "Check Date" := TODAY;
            "Database Abbreviation" := DbAbb;
            "Company Abbreviation" := CompAbb;
            "Line Type" := "Line Type"::"Check Setup";
            "Table Type" := Type;
            Granule := Gran;
            "Object ID" := RecRef2.NUMBER;
            "Field ID" := FieldRec."No.";
            "Field Caption" := lvFieldRef.CAPTION;
            Value := STRSUBSTNO('%1',lvFieldRef.VALUE);
            "New Record" := NewRecBln;
            "Primary Key" := KeyTxt;
            NewRecBln := FALSE;
            INSERT;
          UNTIL FieldRec.NEXT=0;
      END;
    END;

    PROCEDURE WindowOpen@1100525002(Text@1100525000 : Text[1024]);
    BEGIN
      IF GUIALLOWED THEN
        Window.OPEN(Text)
      ELSE
        MESSAGE(Text);
    END;

    PROCEDURE WindowClose@1100525009();
    BEGIN
      IF GUIALLOWED THEN
        Window.CLOSE;
    END;

    PROCEDURE SetTableAsXMLMigrationTable@1100529228(ImplCompany@1100529203 : Record 11020394);
    VAR
      ImplCompanyTable@1100529202 : Record 11020395;
      ExtendedTableProperty@1100529204 : Record 11020573;
    BEGIN
      ImplCompanyTable.SETRANGE("Database Abbreviation",ImplCompany."Database Abbreviation");
      ImplCompanyTable.SETRANGE("Company Abbreviation",ImplCompany."Company Abbreviation");
      IF ImplCompanyTable.FINDFIRST THEN BEGIN
        NoOfRecords := ImplCompanyTable.COUNT;
        Counter := 0;
        Window.OPEN(STRSUBSTNO(Text015));
        REPEAT
          ImplCompanyTable."No. Of Records" := 0;
          ImplCompanyTable."Global Table" := ImplCompanyTable.TableIsGlobalTable;
          ImplCompanyTable.CALCFIELDS("License permission");
          IF (ImplCompanyTable."License permission" = ImplCompanyTable."License permission"::Yes) THEN BEGIN
            Counter := Counter + 1;
            UpdateProgressWindow(Counter);
            ImplCompanyTable."No. Of Records" := ImplCompanyTable.GetNoOfDatabaseRecords;
            IF ExtendedTableProperty.IsXMLImportExportAllowed(ImplCompanyTable."Table ID") AND
               NOT ImplCompanyTable."Global Table" THEN
              ImplCompanyTable."Create XML Migration Table" := ImplCompanyTable."Create XML Migration Table"::Yes
            ELSE
              ImplCompanyTable."Create XML Migration Table" := ImplCompanyTable."Create XML Migration Table"::No;
            ImplCompanyTable.MODIFY;
          END;
          UNTIL ImplCompanyTable.NEXT = 0;
        Window.CLOSE;
      END;
    END;

    PROCEDURE ImplementationCompanyTablesToXMLMigrationTable@1100529202(ImplCompany@1100529203 : Record 11020394);
    VAR
      XMLMigrationTable@1100529201 : Record 11020619;
      XMLMigrationTables@1100529200 : Page 11124924;
      ImplCompanyTable@1100529202 : Record 11020395;
    BEGIN
      IF CONFIRM(Text002, TRUE, XMLMigrationTable.TABLECAPTION) THEN BEGIN
        XMLMigrationTable.DELETEALL(TRUE);

        NoOfRecords := ImplCompanyTable.COUNT;
        Counter := 0;
        Window.OPEN(STRSUBSTNO(Text016));

        ImplCompanyTable.SETRANGE("Database Abbreviation",ImplCompany."Database Abbreviation");
        ImplCompanyTable.SETRANGE("Company Abbreviation",ImplCompany."Company Abbreviation");
        ImplCompanyTable.SETRANGE("Create XML Migration Table",ImplCompanyTable."Create XML Migration Table"::Yes);
        IF ImplCompanyTable.FINDFIRST THEN BEGIN
          Counter := Counter + 1;
          UpdateProgressWindow(Counter);
          REPEAT
            ImplCompanyTable.CALCFIELDS("License permission");
            IF ((ImplCompanyTable."License permission" = ImplCompanyTable."License permission"::Yes) AND
                (ImplCompanyTable.GetNoOfDatabaseRecords <> 0)) THEN
              ImplCompanyTable.CreateXMLMigrationTable(ImplCompanyTable."Table ID");
            UNTIL ImplCompanyTable.NEXT = 0;
          Window.CLOSE;
        END;
      END;

      COMMIT;
      XMLMigrationTables.EDITABLE(FALSE);
      XMLMigrationTables.RUNMODAL;
    END;

    PROCEDURE SalesReportTextSetupToXMLMigrationTable@1100529200();
    VAR
      XMLMigrationTable@1100529200 : Record 11020619;
      XMLMigrationTables@1100529201 : Page 11124924;
      ImplCompanyTable@1100529202 : Record 11020395;
    BEGIN
      IF CONFIRM(Text002, TRUE, XMLMigrationTable.TABLECAPTION) THEN BEGIN
        XMLMigrationTable.DELETEALL(TRUE);

        ImplCompanyTable.CreateXMLMigrationTable(11071890);
        ImplCompanyTable.CreateXMLMigrationTable(11071891);
        ImplCompanyTable.CreateXMLMigrationTable(11071911);
        ImplCompanyTable.CreateXMLMigrationTable(11071913);

        COMMIT;
        XMLMigrationTables.EDITABLE(FALSE);
        XMLMigrationTables.RUNMODAL;
      END;
    END;

    PROCEDURE FunctionProfileToXMLMigrationTable@1100529201();
    VAR
      XMLMigrationTable@1100529200 : Record 11020619;
      XMLMigrationTables@1100529201 : Page 11124924;
      ImplCompanyTable@1100529202 : Record 11020395;
    BEGIN
      IF CONFIRM(Text002, TRUE, XMLMigrationTable.TABLECAPTION) THEN BEGIN
        XMLMigrationTable.DELETEALL(TRUE);

        ImplCompanyTable.CreateXMLMigrationTable(11020569);
        ImplCompanyTable.CreateXMLMigrationTable(11020572);
        ImplCompanyTable.CreateXMLMigrationTable(11229293);

        COMMIT;
        XMLMigrationTables.EDITABLE(FALSE);
        XMLMigrationTables.RUNMODAL;
      END;
    END;

    PROCEDURE RoleGroupRolesToXMLMigrationTable@1100529211();
    VAR
      XMLMigrationTable@1100529200 : Record 11020619;
      XMLMigrationTables@1100529201 : Page 11124924;
      ImplCompanyTable@1100529202 : Record 11020395;
    BEGIN
      IF CONFIRM(Text002, TRUE, XMLMigrationTable.TABLECAPTION) THEN BEGIN
        XMLMigrationTable.DELETEALL(TRUE);

        ImplCompanyTable.CreateXMLMigrationTable(11020570);
        ImplCompanyTable.CreateXMLMigrationTable(11020571);
        AddXMLMigrationFilter(11020570,40 ,'0');

        COMMIT;
        XMLMigrationTables.EDITABLE(FALSE);
        XMLMigrationTables.RUNMODAL;
      END;
    END;

    PROCEDURE RoleCenterReportsToXMLMigrationTable@1100529210();
    VAR
      XMLMigrationTable@1100529200 : Record 11020619;
      XMLMigrationTables@1100529201 : Page 11124924;
      ImplCompanyTable@1100529202 : Record 11020395;
    BEGIN
      IF CONFIRM(Text002, TRUE, XMLMigrationTable.TABLECAPTION) THEN BEGIN
        XMLMigrationTable.DELETEALL(TRUE);

        ImplCompanyTable.CreateXMLMigrationTable(11020681);
        ImplCompanyTable.CreateXMLMigrationTable(11020682);

        COMMIT;
        XMLMigrationTables.EDITABLE(FALSE);
        XMLMigrationTables.RUNMODAL;
      END;
    END;

    PROCEDURE ReportSelectionsToXMLMigrationTable@1100529222();
    VAR
      XMLMigrationTable@1100529200 : Record 11020619;
      XMLMigrationTables@1100529201 : Page 11124924;
      ImplCompanyTable@1100529202 : Record 11020395;
    BEGIN
      IF CONFIRM(Text002, TRUE, XMLMigrationTable.TABLECAPTION) THEN BEGIN
        XMLMigrationTable.DELETEALL(TRUE);

        ImplCompanyTable.CreateXMLMigrationTable(77);

        COMMIT;
        XMLMigrationTables.EDITABLE(FALSE);
        XMLMigrationTables.RUNMODAL;
      END;
    END;

    PROCEDURE AddXMLMigrationFilter@1100529203(TableID@1100529201 : Integer;FieldNo@1100529202 : Integer;FilterExpression@1100529203 : Text[30]);
    VAR
      XMLMigrationTableFilters@1100529200 : Record 11020621;
    BEGIN
      XMLMigrationTableFilters."Table ID" := TableID;
      XMLMigrationTableFilters."Field No." := FieldNo;
      XMLMigrationTableFilters."Filter Expression" := FilterExpression;
      XMLMigrationTableFilters.INSERT;
    END;

    PROCEDURE DeleteUserData@1100529212();
    VAR
      AccessControl@1100529200 : Record 2000000053;
      UserGroupAccessControl@1100529203 : Record 9002;
    BEGIN
      IF CONFIRM(Text009) THEN BEGIN
        DeleteUserPersonalizationNotSUPERUsers;

        AccessControl.SETFILTER("Role ID",'<>%1','SUPER');
        AccessControl.DELETEALL;

        CheckAccessControlAndDeleteUser;

        UserGroupAccessControl.SETFILTER("Role ID",'<>%1','SUPER');
        UserGroupAccessControl.DELETEALL;

        CheckUserGroupAccessControlAndDeleteUserGroupMember;
      END;
    END;

    PROCEDURE CheckAccessControlAndDeleteUser@1100529401();
    VAR
      AccessControl@1100529200 : Record 2000000053;
      User@1100529202 : Record 2000000120;
    BEGIN
      IF User.FINDSET THEN
        REPEAT
          AccessControl.SETRANGE("User Security ID",User."User Security ID");
          IF AccessControl.ISEMPTY THEN
            User.DELETE;
        UNTIL User.NEXT = 0;
    END;

    PROCEDURE CheckUserGroupAccessControlAndDeleteUserGroupMember@1100529408();
    VAR
      UserGroupMember@1100529201 : Record 9001;
      UserGroupAccessControl@1100529203 : Record 9002;
    BEGIN
      IF UserGroupMember.FINDSET THEN
        REPEAT
          UserGroupAccessControl.SETRANGE("User Group Code",UserGroupMember."User Group Code");
          UserGroupAccessControl.SETRANGE("User Security ID",UserGroupMember."User Security ID");
          IF UserGroupAccessControl.ISEMPTY THEN
            UserGroupMember.DELETE;
        UNTIL UserGroupMember.NEXT = 0;
    END;

    LOCAL PROCEDURE DeleteUserPersonalizationNotSUPERUsers@1100409000();
    VAR
      UserPersonalization@1100409000 : Record 2000000073;
      AccessControl@1100409002 : Record 2000000053;
    BEGIN
      IF UserPersonalization.FINDSET THEN
        REPEAT
          AccessControl.SETRANGE("User Security ID",UserPersonalization."User SID");
          AccessControl.SETRANGE("Role ID",'SUPER');
          IF AccessControl.ISEMPTY THEN
            UserPersonalization.DELETE;
        UNTIL UserPersonalization.NEXT = 0;
    END;

    PROCEDURE DeleteUserGroups@1100529249();
    VAR
      UserGroupPermissionSet@1100529200 : Record 9003;
      UserGroup@1100529201 : Record 9000;
    BEGIN
      UserGroupPermissionSet.SETFILTER("Role ID",'<>%1','SUPER');
      UserGroupPermissionSet.DELETEALL;

      UserGroupPermissionSet.SETRANGE("Role ID");
      IF UserGroup.FINDSET THEN
      REPEAT
        UserGroupPermissionSet.SETRANGE("User Group Code",UserGroup.Code);
        IF UserGroupPermissionSet.ISEMPTY THEN
          UserGroup.DELETE;
      UNTIL UserGroup.NEXT = 0;
    END;

    PROCEDURE DeleteStdSalesReportTextLines@1100529209();
    VAR
      StdSalesReportTextLine@1100529200 : Record 11071890;
    BEGIN
      IF CONFIRM(STRSUBSTNO(Text008,StdSalesReportTextLine.TABLECAPTION)) THEN BEGIN
        DeleteStdSalesReportTextLinesInCompany('');
      END;
    END;

    PROCEDURE DeleteRoleCenterReports@1100529214();
    VAR
      RoleCenterReport@1100529200 : Record 11020682;
    BEGIN
      IF CONFIRM(STRSUBSTNO(Text008,RoleCenterReport.TABLECAPTION)) THEN BEGIN
        DeleteRoleCenterReportsInCompany('');
      END;
    END;

    PROCEDURE DeleteReportSelections@1100529218();
    VAR
      ReportSelections@1100529200 : Record 77;
    BEGIN
      IF CONFIRM(STRSUBSTNO(Text008,ReportSelections.TABLECAPTION)) THEN BEGIN
        DeleteReportSelectionsInCompany('');
      END;
    END;

    PROCEDURE SetNewGenericReportToCompanies@1100529225(ImplementationPortal@1100529200 : Record 11229839);
    VAR
      ImplementationPortalCompany@1100529201 : Record 11229894;
    BEGIN
      IF CONFIRM(Text012) THEN BEGIN
        ImplementationPortalCompany.SETRANGE(Select,TRUE);
        IF ImplementationPortalCompany.FINDSET THEN
          REPEAT
            DeleteGenericReportsInCompany(ImplementationPortalCompany."Company Name");
            CopyNewGenericReportsToCompany(ImplementationPortalCompany."Company Name",ImplementationPortal."New Generic Sales Document");
          UNTIL ImplementationPortalCompany.NEXT = 0;
      END;
    END;

    PROCEDURE DeleteGenericReportsInCompany@1100529224(CompanyName@1100529204 : Text[30]);
    VAR
      GenericReport@1100529200 : Record 11071914;
    BEGIN
      GenericReport.CHANGECOMPANY(CompanyName);
      GenericReport.DELETEALL;
    END;

    PROCEDURE CopyNewGenericReportsToCompany@1100529223(CompanyName@1100529208 : Text[30];ReportID@1100529201 : Integer);
    VAR
      GenericReport@1100529200 : Record 11071914;
    BEGIN
      GenericReport.CHANGECOMPANY(CompanyName);
      GenericReport.ID := ReportID;
      GenericReport."Called by Report ID" := 11020281;
      GenericReport.INSERT;

      GenericReport."Called by Report ID" := 11020282;
      GenericReport.INSERT;

      GenericReport."Called by Report ID" := 11020283;
      GenericReport.INSERT;

      GenericReport."Called by Report ID" := 11020284;
      GenericReport.INSERT;
    END;

    PROCEDURE CopyStdSalesReportTextLinesToOtherCompanies@1100529213();
    VAR
      ImplementationPortalCompany@1100529201 : Record 11229894;
      StdSalesReportTextLine@1100529200 : Record 11071890;
    BEGIN
      IF CONFIRM(STRSUBSTNO(Text011,StdSalesReportTextLine.TABLECAPTION)) THEN BEGIN
        ImplementationPortalCompany.SETFILTER("Company Name",'<>%1',COMPANYNAME);
        ImplementationPortalCompany.SETRANGE(Select,TRUE);
        IF ImplementationPortalCompany.FINDSET THEN
          REPEAT
            DeleteStdSalesReportTextLinesInCompany(ImplementationPortalCompany."Company Name");
            CopyStdSalesReportTextLinesToCompany(ImplementationPortalCompany."Company Name");
          UNTIL ImplementationPortalCompany.NEXT = 0;
      END;
    END;

    PROCEDURE DeleteStdSalesReportTextLinesInCompany@1100529226(CompanyName@1100529204 : Text[30]);
    VAR
      StdSalesReportTextLine@1100529200 : Record 11071890;
      SalesReportTextCondition@1100529201 : Record 11071891;
      SalesReportTextValue@1100529202 : Record 11071911;
      SalesReportTextTableLink@1100529203 : Record 11071913;
    BEGIN
      StdSalesReportTextLine.CHANGECOMPANY(CompanyName);
      StdSalesReportTextLine.DELETEALL;

      SalesReportTextCondition.CHANGECOMPANY(CompanyName);
      SalesReportTextCondition.DELETEALL;

      SalesReportTextValue.CHANGECOMPANY(CompanyName);
      SalesReportTextValue.DELETEALL;

      SalesReportTextTableLink.CHANGECOMPANY(CompanyName);
      SalesReportTextTableLink.DELETEALL;
    END;

    PROCEDURE CopyStdSalesReportTextLinesToCompany@1100529227(CompanyName@1100529208 : Text[30]);
    VAR
      StdSalesReportTextLine@1100529203 : Record 11071890;
      SalesReportTextCondition@1100529202 : Record 11071891;
      SalesReportTextValue@1100529201 : Record 11071911;
      SalesReportTextTableLink@1100529200 : Record 11071913;
      NewStdSalesReportTextLine@1100529204 : Record 11071890;
      NewSalesReportTextCondition@1100529205 : Record 11071891;
      NewSalesReportTextValue@1100529206 : Record 11071911;
      NewSalesReportTextTableLink@1100529207 : Record 11071913;
    BEGIN
      IF StdSalesReportTextLine.FINDSET THEN
        REPEAT
          NewStdSalesReportTextLine.TRANSFERFIELDS(StdSalesReportTextLine);
          NewStdSalesReportTextLine.CHANGECOMPANY(CompanyName);
          NewStdSalesReportTextLine.INSERT;
        UNTIL StdSalesReportTextLine.NEXT = 0;

      IF SalesReportTextCondition.FINDSET THEN
        REPEAT
          NewSalesReportTextCondition.TRANSFERFIELDS(SalesReportTextCondition);
          NewSalesReportTextCondition.CHANGECOMPANY(CompanyName);
          NewSalesReportTextCondition.INSERT;
        UNTIL SalesReportTextCondition.NEXT = 0;

      IF SalesReportTextValue.FINDSET THEN
        REPEAT
          NewSalesReportTextValue.TRANSFERFIELDS(SalesReportTextValue);
          NewSalesReportTextValue.CHANGECOMPANY(CompanyName);
          NewSalesReportTextValue.INSERT;
        UNTIL SalesReportTextValue.NEXT = 0;

      IF SalesReportTextTableLink.FINDSET THEN
        REPEAT
          NewSalesReportTextTableLink.TRANSFERFIELDS(SalesReportTextTableLink);
          NewSalesReportTextTableLink.CHANGECOMPANY(CompanyName);
          NewSalesReportTextTableLink.INSERT;
        UNTIL SalesReportTextTableLink.NEXT = 0;
    END;

    PROCEDURE CopyRoleCenterReportsToOtherCompanies@1100529215();
    VAR
      ImplementationPortalCompany@1100529201 : Record 11229894;
      RoleCenterReport@1100529200 : Record 11020682;
    BEGIN
      IF CONFIRM(STRSUBSTNO(Text011,RoleCenterReport.TABLECAPTION)) THEN BEGIN
        ImplementationPortalCompany.SETFILTER("Company Name",'<>%1',COMPANYNAME);
        ImplementationPortalCompany.SETRANGE(Select,TRUE);
        IF ImplementationPortalCompany.FINDSET THEN
          REPEAT
            DeleteRoleCenterReportsInCompany(ImplementationPortalCompany."Company Name");
            CopyRoleCenterReportsToCompany(ImplementationPortalCompany."Company Name");
          UNTIL ImplementationPortalCompany.NEXT = 0;
      END;
    END;

    PROCEDURE DeleteRoleCenterReportsInCompany@1100529216(CompanyName@1100529204 : Text[30]);
    VAR
      RoleCenterReport@1100529201 : Record 11020682;
      RoleCenterReportTranslation@1100529202 : Record 11020681;
    BEGIN
      RoleCenterReport.CHANGECOMPANY(CompanyName);
      RoleCenterReport.DELETEALL;

      RoleCenterReportTranslation.CHANGECOMPANY(CompanyName);
      RoleCenterReportTranslation.DELETEALL;
    END;

    PROCEDURE CopyRoleCenterReportsToCompany@1100529217(CompanyName@1100529208 : Text[30]);
    VAR
      RoleCenterReport@1100529201 : Record 11020682;
      RoleCenterReportTranslation@1100529200 : Record 11020681;
      NewRoleCenterReport@1100529203 : Record 11020682;
      NewRoleCenterReportTranslation@1100529202 : Record 11020681;
    BEGIN
      IF RoleCenterReport.FINDSET THEN
        REPEAT
          NewRoleCenterReport.TRANSFERFIELDS(RoleCenterReport);
          NewRoleCenterReport.CHANGECOMPANY(CompanyName);
          NewRoleCenterReport.INSERT;
        UNTIL RoleCenterReport.NEXT = 0;

      IF RoleCenterReportTranslation.FINDSET THEN
        REPEAT
          NewRoleCenterReportTranslation.TRANSFERFIELDS(RoleCenterReportTranslation);
          NewRoleCenterReportTranslation.CHANGECOMPANY(CompanyName);
          NewRoleCenterReportTranslation.INSERT;
        UNTIL RoleCenterReportTranslation.NEXT = 0;
    END;

    PROCEDURE CopyReportSelectionsToOtherCompanies@1100529221();
    VAR
      ImplementationPortalCompany@1100529201 : Record 11229894;
      ReportSelections@1100529200 : Record 77;
    BEGIN
      IF CONFIRM(STRSUBSTNO(Text011,ReportSelections.TABLECAPTION)) THEN BEGIN
        ImplementationPortalCompany.SETFILTER("Company Name",'<>%1',COMPANYNAME);
        ImplementationPortalCompany.SETRANGE(Select,TRUE);
        IF ImplementationPortalCompany.FINDSET THEN
          REPEAT
            DeleteReportSelectionsInCompany(ImplementationPortalCompany."Company Name");
            CopyReportSelectionsToCompany(ImplementationPortalCompany."Company Name");
          UNTIL ImplementationPortalCompany.NEXT = 0;
      END;
    END;

    PROCEDURE DeleteReportSelectionsInCompany@1100529220(CompanyName@1100529204 : Text[30]);
    VAR
      ReportSelections@1100529201 : Record 77;
    BEGIN
      ReportSelections.CHANGECOMPANY(CompanyName);
      ReportSelections.DELETEALL;
    END;

    PROCEDURE CopyReportSelectionsToCompany@1100529219(CompanyName@1100529208 : Text[30]);
    VAR
      ReportSelections@1100529201 : Record 77;
      NewReportSelections@1100529200 : Record 77;
    BEGIN
      IF ReportSelections.FINDSET THEN
        REPEAT
          NewReportSelections.TRANSFERFIELDS(ReportSelections);
          NewReportSelections.CHANGECOMPANY(CompanyName);
          NewReportSelections.INSERT;
        UNTIL ReportSelections.NEXT = 0;
    END;

    PROCEDURE UpdateProgressWindow@1100525005(NewProgress@11012000 : Integer);
    BEGIN
      IF NoOfRecords > 0 THEN BEGIN
        NewProgress := ROUND(NewProgress / NoOfRecords * 100,1);
        IF (NewProgress <> Progress) THEN
          Window.UPDATE(1,100 * NewProgress);
        Progress := NewProgress;
      END;
    END;

    BEGIN
    END.
  }
}

