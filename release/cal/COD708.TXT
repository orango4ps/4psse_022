OBJECT Codeunit 708 Dictionary Wrapper
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Dictionary@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
      KeysArray@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      DictionaryInitialized@1001 : Boolean;
      KeysArrayInitialized@1003 : Boolean;

    [External]
    PROCEDURE TryGetValue@1(Key@1000 : Variant;VAR Value@1001 : Variant) : Boolean;
    VAR
      Found@1003 : Boolean;
    BEGIN
      InitializeDictionary;
      SYSTEM.CLEAR(Value);

      IF NOT Dictionary.ContainsKey(Key) THEN
        EXIT(FALSE);

      Found := Dictionary.TryGetValue(Key,Value);
      EXIT(Found);
    END;

    [External]
    PROCEDURE TryGetKey@2(Index@1000 : Integer;VAR Key@1001 : Variant) : Boolean;
    VAR
      Count@1003 : Integer;
    BEGIN
      InitializeDictionary;
      InitializeKeysArray;
      SYSTEM.CLEAR(Key);

      Count := Dictionary.Count;
      IF (Index >= Count) OR (Index < 0) THEN
        EXIT(FALSE);

      Key := KeysArray.GetValue(Index);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE TryGetKeyValue@8(Index@1000 : Integer;VAR Key@1001 : Variant;VAR Value@1002 : Variant) : Boolean;
    BEGIN
      IF TryGetKey(Index,Key) THEN
        IF TryGetValue(Key,Value) THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE ContainsKey@3(Key@1000 : Variant) : Boolean;
    BEGIN
      InitializeDictionary;

      EXIT(Dictionary.ContainsKey(Key));
    END;

    [External]
    PROCEDURE Count@4() : Integer;
    BEGIN
      InitializeDictionary;

      EXIT(Dictionary.Count);
    END;

    [External]
    PROCEDURE Set@5(Key@1000 : Variant;Value@1001 : Variant);
    BEGIN
      InitializeDictionary;

      IF NOT Dictionary.ContainsKey(Key) THEN BEGIN
        KeysArrayInitialized := FALSE;
        Dictionary.Add(Key,Value);
        EXIT;
      END;

      Dictionary.Remove(Key);
      Dictionary.Add(Key,Value);
    END;

    [External]
    PROCEDURE Remove@6(Key@1000 : Variant);
    BEGIN
      InitializeDictionary;

      IF Dictionary.ContainsKey(Key) THEN BEGIN
        KeysArrayInitialized := FALSE;
        Dictionary.Remove(Key);
      END;
    END;

    [External]
    PROCEDURE Clear@11();
    BEGIN
      InitializeDictionary;

      KeysArrayInitialized := FALSE;
      Dictionary.Clear();
    END;

    LOCAL PROCEDURE InitializeDictionary@7();
    BEGIN
      IF DictionaryInitialized THEN
        EXIT;

      Dictionary := Dictionary.Dictionary;
      DictionaryInitialized := TRUE;
      KeysArrayInitialized := FALSE;
    END;

    LOCAL PROCEDURE InitializeKeysArray@9();
    VAR
      KeyCollection@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2+KeyCollection";
      Object@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";
      Count@1000 : Integer;
    BEGIN
      IF KeysArrayInitialized THEN
        EXIT;

      Count := Dictionary.Count;
      KeysArray := KeysArray.CreateInstance(GETDOTNETTYPE(Object),Count);
      KeyCollection := Dictionary.Keys();
      KeyCollection.CopyTo(KeysArray,0);

      KeysArrayInitialized := TRUE;
    END;

    BEGIN
    END.
  }
}

