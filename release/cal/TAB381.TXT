OBJECT Table 381 VAT Registration No. Format
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=VAT Registration No. Format;
               NOR=Format for organisasjonsnr.;
               SVE=Momsregistreringsnr format];
  }
  FIELDS
  {
    { 1   ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              NOR=Lands-/omrÜdekode;
                                                              SVE=Lands-/regionkod];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 3   ;   ;Format              ;Text20        ;CaptionML=[ENU=Format;
                                                              NOR=Format;
                                                              SVE=Format] }
    { 11012000;;Validation Type    ;Option        ;CaptionML=[ENU=Validation Type;
                                                              SVE=Valideringstyp];
                                                   OptionCaptionML=[ENU=Format,EU Web Service Validation;
                                                                    SVE=Format,Validering av EU-webbtjÑnst];
                                                   OptionString=Format,EU Web Service Validation }
  }
  KEYS
  {
    {    ;Country/Region Code,Line No.            ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The entered VAT Registration number is not in agreement with the format specified for Country/Region Code %1.\;NOR=Det angitte organisasjonsnummeret stemmer ikke med formatet for lands-/omrÜdekoden %1.\;SVE=Det registrerade momsreg.numret stÑmmer inte med det angivna formatet fîr lands-/regionkoden %1.\';
      Text001@1001 : TextConst '@@@=1 - format list;ENU=The following formats are acceptable: %1;NOR=Fõlgende formater er godkjent: %1;SVE=Fîljande format accepteras: %1';
      Text002@1002 : TextConst 'ENU=This VAT registration number has already been entered for the following customers:\ %1;NOR=Dette organisasjonsnummeret er allerede brukt for fõlgende kunder:\ %1;SVE=Momsreg.numret har redan registrerats pÜ fîljande kunder:\ %1';
      Text003@1003 : TextConst 'ENU=This VAT registration number has already been entered for the following vendors:\ %1;NOR=Dette organisasjonsnummeret er allerede brukt for fõlgende leverandõrer:\ %1;SVE=Momsreg.numret har redan registrerats pÜ fîljande leverantîrer:\ %1';
      Text004@1004 : TextConst 'ENU=This VAT registration number has already been entered for the following contacts:\ %1;NOR=Dette organisasjonsnummeret er allerede brukt for fõlgende kontakter:\ %1;SVE=Momsreg.numret har redan registrerats pÜ fîljande kontakter:\ %1';
      Text005@1005 : TextConst 'ENU=ABCDEFGHIJKLMNOPQRSTUVWXYZ;NOR=ABCDEFGHIJKLMNOPQRSTUVWXYZè;SVE=ABCDEFGHIJKLMNOPQRSTUVWXYZèéô';
      InvalidVatNumberErr@1010 : TextConst 'ENU=Enter a valid VAT number, for example ''GB123456789''.;NOR=Angi gyldig organisasjonsnummer, for eksempel GB123456789.;SVE=Ange ett giltigt momsregistreringsnummer, till exempel GB123456789.';
      IdentityManagement@1011 : Codeunit 9801;
      Text11012000@1100485001 : TextConst 'ENU=This VAT registration number has already been entered for the following locations:\ %1;SVE=Det hÑr momsregistreringsnumret har redan angetts fîr fîljande lagerstÑllen:\ %1';
      Text11012001@1100528700 : TextConst 'ENU=%1 is not registered.;SVE=%1 har inte registrerats.';

    [External]
    PROCEDURE Test@1(VATRegNo@1000 : Text[20];CountryCode@1001 : Code[10];Number@1002 : Code[20];TableID@1003 : Option) : Boolean;
    VAR
      CompanyInfo@1005 : Record 79;
      Check@1004 : Boolean;
      Finish@1007 : Boolean;
      TextString@1006 : Text;
      IsHandled@1008 : Boolean;
      EUVATRegNoValidation@1100528700 : Codeunit 11012272;
      Customer@1100528701 : Record 18;
      CountryRegion@1210190000 : Record 9;
    BEGIN
      VATRegNo := UPPERCASE(VATRegNo);
      IF VATRegNo = '' THEN
        EXIT;

      Check := TRUE;
      IsHandled := FALSE;
      OnBeforeTest(VATRegNo,CountryCode,Number,TableID,Check,IsHandled);
      IF IsHandled THEN
        EXIT(TRUE);

      IF CountryCode = '' THEN BEGIN
        IF NOT CompanyInfo.GET THEN
          EXIT;
        SETRANGE("Country/Region Code",CompanyInfo."Country/Region Code");
      END ELSE
        SETRANGE("Country/Region Code",CountryCode);
      //**4PS.sn
      SETRANGE("Validation Type", "Validation Type"::"EU Web Service Validation");
      IF FINDFIRST THEN BEGIN
        CountryRegion.GET("Country/Region Code");
        CountryRegion.TESTFIELD("EU Country/Region Code");
        Check := EUVATRegNoValidation.ValidateEUVATRegNo(CountryRegion."EU Country/Region Code", VATRegNo, Format);
        IF NOT Check THEN
          ERROR(Text11012001, Customer.FIELDCAPTION("VAT Registration No."))
      END ELSE BEGIN
        SETRANGE("Validation Type");
      //**4PS.en
        SETFILTER(Format,'<> %1','');
        IF FINDSET THEN
          REPEAT
            AppendString(TextString,Finish,Format);
            Check := Compare(VATRegNo,Format);
          UNTIL Check OR (NEXT = 0);

        IF NOT Check THEN BEGIN
          IF IdentityManagement.IsInvAppId THEN
            ERROR(InvalidVatNumberErr);
          ERROR(STRSUBSTNO('%1%2',STRSUBSTNO(Text000,"Country/Region Code"),STRSUBSTNO(Text001,TextString)));
        END;
      END;
      //**4PS.en

      CASE TableID OF
        DATABASE::Customer:
          CheckCust(VATRegNo,Number);
        DATABASE::Vendor:
          CheckVendor(VATRegNo,Number);
        DATABASE::Contact:
          CheckContact(VATRegNo,Number);
        //**4PS.sn
        DATABASE::Location:
          CheckLocation(VATRegNo,Number);
        //**4PS.en
        ELSE
          OnTestTable(VATRegNo,CountryCode,Number,TableID);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckCust@3(VATRegNo@1000 : Text[20];Number@1002 : Code[20]);
    VAR
      Cust@1003 : Record 18;
      Check@1004 : Boolean;
      Finish@1001 : Boolean;
      TextString@1005 : Text;
      CustomerIdentification@1006 : Text[100];
      IsHandled@1007 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckCust(VATRegNo,Number,IsHandled);
      IF IsHandled THEN
        EXIT;

      Check := TRUE;
      TextString := '';
      Cust.SETCURRENTKEY("VAT Registration No.");
      Cust.SETRANGE("VAT Registration No.",VATRegNo);
      Cust.SETFILTER("No.",'<>%1',Number);
      IF Cust.FINDSET THEN BEGIN
        Check := FALSE;
        Finish := FALSE;
        REPEAT
          IF IdentityManagement.IsInvAppId THEN
            CustomerIdentification := Cust.Name
          ELSE
            CustomerIdentification := Cust."No.";

          AppendString(TextString,Finish,CustomerIdentification);
        UNTIL (Cust.NEXT = 0) OR Finish;
      END;
      IF NOT Check THEN
        MESSAGE(STRSUBSTNO(Text002,TextString));
    END;

    LOCAL PROCEDURE CheckVendor@4(VATRegNo@1000 : Text[20];Number@1002 : Code[20]);
    VAR
      Vend@1003 : Record 23;
      Check@1004 : Boolean;
      Finish@1001 : Boolean;
      TextString@1005 : Text;
      IsHandled@1006 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckVend(VATRegNo,Number,IsHandled);
      IF IsHandled THEN
        EXIT;

      Check := TRUE;
      TextString := '';
      Vend.SETCURRENTKEY("VAT Registration No.");
      Vend.SETRANGE("VAT Registration No.",VATRegNo);
      Vend.SETFILTER("No.",'<>%1',Number);
      IF Vend.FINDSET THEN BEGIN
        Check := FALSE;
        Finish := FALSE;
        REPEAT
          AppendString(TextString,Finish,Vend."No.");
        UNTIL (Vend.NEXT = 0) OR Finish;
      END;
      IF NOT Check THEN
        MESSAGE(STRSUBSTNO(Text003,TextString));
    END;

    LOCAL PROCEDURE CheckContact@5(VATRegNo@1000 : Text[20];Number@1002 : Code[20]);
    VAR
      Cont@1003 : Record 5050;
      Check@1004 : Boolean;
      Finish@1001 : Boolean;
      TextString@1005 : Text;
      IsHandled@1006 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeCheckContact(VATRegNo,Number,IsHandled);
      IF IsHandled THEN
        EXIT;

      Check := TRUE;
      TextString := '';
      Cont.SETCURRENTKEY("VAT Registration No.");
      Cont.SETRANGE("VAT Registration No.",VATRegNo);
      Cont.SETFILTER("No.",'<>%1',Number);
      IF Cont.FINDSET THEN BEGIN
        Check := FALSE;
        Finish := FALSE;
        REPEAT
          AppendString(TextString,Finish,Cont."No.");
        UNTIL (Cont.NEXT = 0) OR Finish;
      END;
      IF NOT Check THEN
        MESSAGE(STRSUBSTNO(Text004,TextString));
    END;

    PROCEDURE CheckLocation@1100485001(VATRegNo@1000 : Text[20];Number@1002 : Code[20]);
    VAR
      Location@1003 : Record 14;
      Check@1004 : Boolean;
      Finish@1001 : Boolean;
      t@1005 : Text[250];
    BEGIN
      //**4PS
      Check := TRUE;
      t := '';
      Location.SETCURRENTKEY("VAT Registration No.");
      Location.SETRANGE("VAT Registration No.",VATRegNo);
      Location.SETFILTER(Code,'<>%1',Number);
      IF Location.FIND('-') THEN BEGIN
        Check := FALSE;
        Finish := FALSE;
        REPEAT
          IF Location.Code <> Number THEN BEGIN
            IF t = '' THEN
              t := Location.Code
            ELSE
              IF STRLEN(t) + STRLEN(Location.Code) + 5 <= MAXSTRLEN(t) THEN
                t := t + ', ' + Location.Code
              ELSE BEGIN
                t := t + '...';
                Finish := TRUE;
              END;
          END;
        UNTIL (Location.NEXT = 0) OR Finish;
      END;
      IF Check = FALSE THEN
        MESSAGE(Text11012000, t);
    END;

    [External]
    PROCEDURE Compare@2(VATRegNo@1000 : Text[20];Format@1001 : Text[20]) : Boolean;
    VAR
      i@1002 : Integer;
      Cf@1003 : Text[1];
      Ce@1004 : Text[1];
      Check@1005 : Boolean;
    BEGIN
      Check := TRUE;
      IF STRLEN(VATRegNo) = STRLEN(Format) THEN
        FOR i := 1 TO STRLEN(VATRegNo) DO BEGIN
          Cf := COPYSTR(Format,i,1);
          Ce := COPYSTR(VATRegNo,i,1);
          CASE Cf OF
            '#':
              IF NOT ((Ce >= '0') AND (Ce <= '9')) THEN
                Check := FALSE;
            '@':
              IF STRPOS(Text005,UPPERCASE(Ce)) = 0 THEN
                Check := FALSE;
            ELSE
              IF NOT ((Cf = Ce) OR (Cf = '?')) THEN
                Check := FALSE
          END;
        END
      ELSE
        Check := FALSE;
      EXIT(Check);
    END;

    LOCAL PROCEDURE AppendString@6(VAR String@1000 : Text;VAR Finish@1001 : Boolean;AppendText@1002 : Text);
    BEGIN
      CASE TRUE OF
        Finish:
          EXIT;
        String = '':
          String := AppendText;
        STRLEN(String) + STRLEN(AppendText) + 5 <= 250:
          String += ', ' + AppendText;
        ELSE BEGIN
          String += '...';
          Finish := TRUE;
        END;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckCust@7(VATRegNo@1001 : Text[20];Number@1000 : Code[20];VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckVend@8(VATRegNo@1001 : Text[20];Number@1000 : Code[20];VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckContact@9(VATRegNo@1001 : Text[20];Number@1000 : Code[20];VAR IsHandled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTest@10(VATRegNo@1003 : Text[20];CountryCode@1002 : Code[10];Number@1001 : Code[20];TableID@1000 : Option;Check@1005 : Boolean;VAR IsHandled@1004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnTestTable@11(VATRegNo@1003 : Text[20];CountryCode@1002 : Code[10];Number@1001 : Code[20];TableID@1000 : Option);
    BEGIN
    END;

    PROCEDURE CheckFormat@1100528500(VATRegNo@1000 : Text[20];CountryCode@1001 : Code[10]) : Boolean;
    VAR
      CompanyInfo@1002 : Record 79;
      VATRegNoFormat@1003 : Record 381;
    BEGIN
      //**4PS
      IF CountryCode = '' THEN BEGIN
        CompanyInfo.GET;
        VATRegNoFormat.SETRANGE("Country/Region Code",CompanyInfo."Country/Region Code");
      END ELSE
        VATRegNoFormat.SETRANGE("Country/Region Code",CountryCode);
      VATRegNoFormat.SETFILTER(Format,'<>%1','');
      IF VATRegNoFormat.FIND('-') THEN BEGIN
        REPEAT
          IF VATRegNoFormat.Compare(VATRegNo,VATRegNoFormat.Format) THEN
            EXIT(TRUE);
        UNTIL VATRegNoFormat.NEXT = 0;
      END ELSE
        EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

