OBJECT Table 915 ATO Sales Buffer
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    ReplicateData=No;
    CaptionML=[ENU=ATO Sales Buffer;
               NOR=ATO-salgsbuffer;
               SVE=ATO-f”rs„ljningsbuffert];
  }
  FIELDS
  {
    { 1   ;   ;Type                ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Type;
                                                              NOR=Type;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=,Sale,Total Sale,Assembly,Total Assembly;
                                                                    NOR=,Salg,Totalt salg,Montering,Total montering;
                                                                    SVE=,F”rs„ljning,Total f”rs„ljning,Montering,Total montering];
                                                   OptionString=,Sale,Total Sale,Assembly,Total Assembly }
    { 2   ;   ;Order No.           ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Order No.;
                                                              NOR=Ordrenr.;
                                                              SVE=Ordernr] }
    { 3   ;   ;Item No.            ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Item No.;
                                                              NOR=Varenr.;
                                                              SVE=Artikelnr] }
    { 4   ;   ;Parent Item No.     ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Parent Item No.;
                                                              NOR=Overordnet varenr.;
                                                              SVE=Strukturnr] }
    { 5   ;   ;Quantity            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal] }
    { 6   ;   ;Sales Cost          ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Sales Cost;
                                                              NOR=Salgskostnad;
                                                              SVE=F”rs„ljningskostnader] }
    { 7   ;   ;Sales Amount        ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Sales Amount;
                                                              NOR=Salgsbel›p;
                                                              SVE=F”rs„ljningsbelopp] }
    { 8   ;   ;Profit %            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Profit %;
                                                              NOR=Bruttofortjeneste-%;
                                                              SVE=Vinst %] }
    { 9   ;   ;Parent Description  ;Text100       ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Parent Description;
                                                              NOR=Overordnet beskrivelse;
                                                              SVE=™verordnad beskrivning] }
  }
  KEYS
  {
    {    ;Type,Order No.,Item No.,Parent Item No. ;Clustered=Yes }
    {    ;Item No.,Type,Parent Item No.            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE UpdateBufferWithComp@1(CompATOSalesBuffer@1000 : Record 915;ProfitPct@1001 : Decimal;IsTotal@1002 : Boolean);
    BEGIN
      INIT;
      IF IsTotal THEN
        Type := Type::"Total Assembly"
      ELSE
        Type := Type::Assembly;
      "Order No." := '';
      "Item No." := CompATOSalesBuffer."Item No.";
      IF NOT IsTotal THEN
        "Parent Item No." := CompATOSalesBuffer."Parent Item No."
      ELSE
        "Parent Item No." := '';
      IF FIND THEN BEGIN
        Quantity += CompATOSalesBuffer.Quantity;
        "Sales Cost" += CompATOSalesBuffer."Sales Cost";
        "Sales Amount" += CalcSalesAmt(CompATOSalesBuffer."Sales Cost",ProfitPct);
        "Profit %" := CalcSalesProfitPct("Sales Cost","Sales Amount");
        MODIFY;
        EXIT;
      END;

      Quantity := CompATOSalesBuffer.Quantity;
      "Sales Cost" := CompATOSalesBuffer."Sales Cost";
      "Sales Amount" := CalcSalesAmt(CompATOSalesBuffer."Sales Cost",ProfitPct);
      "Profit %" := ProfitPct;
      INSERT;
    END;

    [External]
    PROCEDURE UpdateBufferWithItemLedgEntry@2(ItemLedgEntry@1000 : Record 32;IsTotal@1001 : Boolean);
    BEGIN
      ItemLedgEntry.CALCFIELDS("Cost Amount (Expected)","Cost Amount (Actual)","Sales Amount (Actual)","Sales Amount (Expected)");

      INIT;
      "Item No." := ItemLedgEntry."Item No.";
      "Order No." := '';
      "Parent Item No." := '';
      CASE ItemLedgEntry."Entry Type" OF
        ItemLedgEntry."Entry Type"::Sale:
          IF IsTotal THEN
            Type := Type::"Total Sale"
          ELSE BEGIN
            Type := Type::Sale;
            "Order No." := FindATO(ItemLedgEntry);
          END;
        ItemLedgEntry."Entry Type"::"Assembly Consumption":
          BEGIN
            IF IsTotal THEN
              Type := Type::"Total Assembly"
            ELSE
              Type := Type::Assembly;
            "Parent Item No." := ItemLedgEntry."Source No.";
          END;
      END;
      IF FIND THEN BEGIN
        Quantity += -ItemLedgEntry.Quantity;
        "Sales Cost" += -(ItemLedgEntry."Cost Amount (Expected)" + ItemLedgEntry."Cost Amount (Actual)");
        "Sales Amount" += ItemLedgEntry."Sales Amount (Actual)" + ItemLedgEntry."Sales Amount (Expected)";
        "Profit %" := CalcSalesProfitPct("Sales Cost","Sales Amount");
        MODIFY;
        EXIT;
      END;

      Quantity := -ItemLedgEntry.Quantity;
      "Sales Cost" := -(ItemLedgEntry."Cost Amount (Expected)" + ItemLedgEntry."Cost Amount (Actual)");
      "Sales Amount" := ItemLedgEntry."Sales Amount (Actual)" + ItemLedgEntry."Sales Amount (Expected)";
      "Profit %" := CalcSalesProfitPct("Sales Cost","Sales Amount");
      INSERT;
    END;

    LOCAL PROCEDURE FindATO@3(ItemLedgEntry@1003 : Record 32) : Code[20];
    VAR
      PostedATOLink@1000 : Record 914;
      ItemApplnEntry@1001 : Record 339;
    BEGIN
      IF NOT ItemLedgEntry."Assemble to Order" THEN
        EXIT('');

      IF ItemLedgEntry."Document Type" <> ItemLedgEntry."Document Type"::"Sales Shipment" THEN
        EXIT('');

      PostedATOLink.SETCURRENTKEY("Document Type","Document No.","Document Line No.");
      PostedATOLink.SETRANGE("Document Type",PostedATOLink."Document Type"::"Sales Shipment");
      PostedATOLink.SETRANGE("Document No.",ItemLedgEntry."Document No.");
      PostedATOLink.SETRANGE("Document Line No.",ItemLedgEntry."Document Line No.");
      IF PostedATOLink.FINDFIRST THEN
        EXIT(PostedATOLink."Assembly Order No.");

      IF ItemLedgEntry.Correction THEN
        IF ItemApplnEntry.AppliedFromEntryExists(ItemLedgEntry."Entry No.") THEN BEGIN
          ItemLedgEntry.GET(ItemApplnEntry."Outbound Item Entry No.");
          EXIT(FindATO(ItemLedgEntry));
        END;
    END;

    LOCAL PROCEDURE CalcSalesAmt@5(SalesCost@1001 : Decimal;ProfitPct@1000 : Decimal) : Decimal;
    BEGIN
      IF ProfitPct = 100 THEN
        EXIT(0);
      EXIT(ROUND(100 * SalesCost / (100 - ProfitPct)))
    END;

    LOCAL PROCEDURE CalcSalesProfitPct@6(CostAmt@1000 : Decimal;SalesAmt@1001 : Decimal) : Decimal;
    BEGIN
      IF SalesAmt = 0 THEN
        EXIT(0);
      EXIT(ROUND(100 * (SalesAmt - CostAmt) / SalesAmt));
    END;

    BEGIN
    END.
  }
}

