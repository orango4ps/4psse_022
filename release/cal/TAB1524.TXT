OBJECT Table 1524 Workflow Rule
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW113.00;
  }
  PROPERTIES
  {
    ReplicateData=No;
    CaptionML=[ENU=Workflow Rule;
               NOR=Arbeidsflytregel;
               SVE=Arbetsflîdesregel];
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=ID;
                                                              NOR=ID;
                                                              SVE=ID] }
    { 2   ;   ;Table ID            ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=FILTER(Table));
                                                   CaptionML=[ENU=Table ID;
                                                              NOR=Tabell-ID;
                                                              SVE=Tabell-ID] }
    { 3   ;   ;Field No.           ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Table ID));
                                                   CaptionML=[ENU=Field No.;
                                                              NOR=Feltnr.;
                                                              SVE=FÑltnr] }
    { 4   ;   ;Operator            ;Option        ;InitValue=Changed;
                                                   CaptionML=[ENU=Operator;
                                                              NOR=Operator;
                                                              SVE=Operator];
                                                   OptionCaptionML=[ENU=Increased,Decreased,Changed;
                                                                    NOR=ùkt,Redusert,Endret;
                                                                    SVE=ôkad,Minskad,éndrad];
                                                   OptionString=Increased,Decreased,Changed }
    { 8   ;   ;Workflow Code       ;Code20        ;TableRelation=Workflow.Code;
                                                   CaptionML=[ENU=Workflow Code;
                                                              NOR=Arbeidsflytkode;
                                                              SVE=Arbetsflîdeskod] }
    { 9   ;   ;Workflow Step ID    ;Integer       ;TableRelation="Workflow Step".ID WHERE (Workflow Code=FIELD(Workflow Code));
                                                   CaptionML=[ENU=Workflow Step ID;
                                                              NOR=ID for arbeidsflyttrinn;
                                                              SVE=ID fîr arbetsflîdessteg] }
    { 10  ;   ;Field Caption       ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field."Field Caption" WHERE (TableNo=FIELD(Table ID),
                                                                                                   No.=FIELD(Field No.)));
                                                   CaptionML=[ENU=Field Caption;
                                                              NOR=Felttekst;
                                                              SVE=FÑltrubrik] }
    { 11  ;   ;Workflow Step Instance ID;GUID     ;TableRelation="Workflow Step Instance".ID;
                                                   CaptionML=[ENU=Workflow Step Instance ID;
                                                              NOR=ID for forekomst for arbeidsflyttrinn;
                                                              SVE=Instans-ID fîr arbetsflîdessteg] }
  }
  KEYS
  {
    {    ;Workflow Code,Workflow Step ID,ID       ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RuleDisplayTxt@1000 : TextConst '@@@="%1 = The field; %2 = type of operation; (Amount is Increased)";ENU=%1 is %2;NOR=%1 er %2;SVE=%1 Ñr %2';

    [External]
    PROCEDURE EvaluateRule@3(RecRef@1000 : RecordRef;xRecRef@1004 : RecordRef) : Boolean;
    VAR
      FieldRef@1001 : FieldRef;
      xFieldRef@1005 : FieldRef;
      Value@1002 : Variant;
      xValue@1003 : Variant;
    BEGIN
      IF NOT RecRef.FIELDEXIST("Field No.") THEN
        EXIT(FALSE);

      FieldRef := RecRef.FIELD("Field No.");
      xFieldRef := xRecRef.FIELD("Field No.");

      Value := FieldRef.VALUE;
      xValue := xFieldRef.VALUE;

      EXIT(CompareValues(xValue,Value));
    END;

    [External]
    PROCEDURE CompareValues@7(xValue@1000 : Variant;Value@1001 : Variant) : Boolean;
    BEGIN
      IF Value.ISINTEGER OR Value.ISBIGINTEGER OR Value.ISDECIMAL OR Value.ISDURATION THEN
        EXIT(CompareNumbers(xValue,Value));

      IF Value.ISDATE THEN
        EXIT(CompareDates(xValue,Value));

      IF Value.ISTIME THEN
        EXIT(CompareTimes(xValue,Value));

      IF Value.ISDATETIME THEN
        EXIT(CompareDateTimes(xValue,Value));

      EXIT(CompareText(FORMAT(xValue,0,2),FORMAT(Value,0,2)));
    END;

    LOCAL PROCEDURE CompareNumbers@1(xValue@1000 : Decimal;Value@1002 : Decimal) : Boolean;
    BEGIN
      CASE Operator OF
        Operator::Increased:
          EXIT(xValue < Value);
        Operator::Decreased:
          EXIT(xValue > Value);
        Operator::Changed:
          EXIT(xValue <> Value);
        ELSE
          EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE CompareDates@5(xValue@1000 : Date;Value@1002 : Date) : Boolean;
    BEGIN
      EXIT(CompareDateTimes(CREATEDATETIME(xValue,0T),CREATEDATETIME(Value,0T)));
    END;

    LOCAL PROCEDURE CompareTimes@6(xValue@1000 : Time;Value@1002 : Time) : Boolean;
    VAR
      ReferenceDate@1001 : Date;
    BEGIN
      ReferenceDate := TODAY;
      EXIT(CompareDateTimes(CREATEDATETIME(ReferenceDate,xValue),CREATEDATETIME(ReferenceDate,Value)));
    END;

    LOCAL PROCEDURE CompareDateTimes@11(xValue@1000 : DateTime;Value@1002 : DateTime) : Boolean;
    BEGIN
      CASE Operator OF
        Operator::Increased:
          EXIT(xValue - Value < 0);
        Operator::Decreased:
          EXIT(xValue - Value > 0);
        Operator::Changed:
          EXIT(xValue <> Value);
        ELSE
          EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE CompareText@4(xValue@1000 : Text;Value@1002 : Text) : Boolean;
    BEGIN
      CASE Operator OF
        Operator::Increased:
          EXIT(xValue < Value);
        Operator::Decreased:
          EXIT(xValue > Value);
        Operator::Changed:
          EXIT(xValue <> Value);
        ELSE
          EXIT(FALSE);
      END;
    END;

    [External]
    PROCEDURE GetDisplayText@2() : Text;
    BEGIN
      CALCFIELDS("Field Caption");
      EXIT(STRSUBSTNO(RuleDisplayTxt,"Field Caption",Operator));
    END;

    BEGIN
    END.
  }
}

