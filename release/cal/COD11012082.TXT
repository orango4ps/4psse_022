OBJECT Codeunit 11012082 LIP XML Encode 11012082
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            lFilename@1100485004 : Text[80];
            RetVal@1100485000 : Boolean;
          BEGIN
            DocumentMgtSetup.GET;

            DocumentMgtSetup.TESTFIELD("Documentation System", DocumentMgtSetup."Documentation System"::LIP);
            DocumentMgtSetup.TESTFIELD("Dir. Sharepoint XML Out");
            DocumentMgtSetup.TESTFIELD("Sharepoint XMLNS");
            DocumentMgtSetup.TESTFIELD("Extension Filename Sharepoint");

            XMLencode := XMLencode.XmlDocument;

            RetVal := GenerateXML(XMLencode);

            lFilename := FORMAT(CURRENTDATETIME,0,'<Year>_<Month Text>_<Day,2>_<Hours24>_<Minutes,2>_<Seconds,2>') +
                         '.' +  DocumentMgtSetup."Extension Filename Sharepoint";

            IF RetVal THEN
              XMLencode.Save(DocumentMgtSetup."Dir. Sharepoint XML Out" + lFilename);

            CLEAR(XMLencode);
          END;

  }
  CODE
  {
    VAR
      DocumentMgtSetup@1100485001 : Record 11071831;
      XMLencode@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";

    [External]
    PROCEDURE GenerateXML@1100485000(VAR XMLDocOut@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") RetVal : Boolean;
    VAR
      DocRec@1100525000 : Record 11012746;
      DocFieldsRec@1100485006 : Record 11012233;
      XMLPI@1100485002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlProcessingInstruction";
      XMLCurrNode@1100485003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1100485005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDocumentNode@1100485014 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDocumentsNode@1100485018 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMManagement@1100485004 : Codeunit 11020220;
      XMLNS@1100485001 : Text[100];
      RecFound@1100485016 : Boolean;
      lRecordRef@1100485007 : RecordRef;
      lFieldRef@1100485010 : FieldRef;
      ValueTxt@1100485011 : Text[250];
      HulpString@1100485012 : Text[1024];
      HulpString2@1100485020 : Text[1024];
      HulpString3@1100485021 : Text[1024];
      HulpString4@1100485022 : Text[1024];
      HulpStrLen@1100485025 : Integer;
      IntValue@1100485026 : Integer;
      lTeller@1100485027 : Integer;
      lvExtension@1100485008 : Text[30];
    BEGIN
      RetVal := FALSE;
      RecFound := FALSE;

      XMLPI := XMLDocOut.CreateProcessingInstruction('xml','version="1.0" encoding="UTF-8"');
      XMLCurrNode := XMLDocOut.AppendChild(XMLPI);

      XMLNS := DocumentMgtSetup."Sharepoint XMLNS";
      XMLCurrNode := XMLDocOut.CreateElement('document', XMLNS);
      XMLCurrNode := XMLDocOut.AppendChild(XMLCurrNode);

      WITH XMLDOMManagement DO BEGIN
        AddAttribute(XMLCurrNode,'xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
        AddAttribute(XMLCurrNode,'xsi:SchemaLocation', 'urn:lip-nl 4psConstructDM.xsd');

        XMLDocumentsNode := XMLCurrNode;

        DocRec.SETFILTER("SharePoint Status", '<>%1', DocRec."SharePoint Status"::Updated);
        DocRec.SETFILTER(File,'<>%1', '');

        DocRec.SETRANGE("External Document",FALSE);
        DocRec.SETRANGE("Final Printed", TRUE);
        IF DocRec.FINDSET(TRUE, FALSE) THEN BEGIN
          REPEAT
              IF NOT RecFound THEN RecFound := TRUE;
              lvExtension := GetDocumentExtension(DocRec.File);

              IF AddElement(XMLDocumentsNode,'header', '', XMLNS, XMLDocumentNode) > 0 THEN
                EXIT;

              IF AddElement(XMLDocumentNode,'property', '', XMLNS, XMLNewChild) > 0 THEN EXIT;
              AddAttribute(XMLNewChild, 'name', 'docfilepath');
              AddAttribute(XMLNewChild, 'value', DocumentMgtSetup."Dir. Sharepoint XML Out" + DocRec."No."  + lvExtension);

              IF AddElement(XMLDocumentNode,'property', '', XMLNS, XMLNewChild) > 0 THEN EXIT;
              AddAttribute(XMLNewChild,'name','action');
              IF DocRec."SharePoint Status" =  DocRec."SharePoint Status"::New THEN
                AddAttribute(XMLNewChild, 'value', 'add')
              ELSE
                AddAttribute(XMLNewChild, 'value', 'edit');

              IF AddElement(XMLDocumentNode,'property', '', XMLNS, XMLNewChild) > 0 THEN EXIT;
              AddAttribute(XMLNewChild, 'name', 'library');
              AddAttribute(XMLNewChild, 'value', DocumentMgtSetup."LIP Library");

              IF AddElement(XMLDocumentsNode,'profile', '', XMLNS, XMLDocumentNode) > 0 THEN
                EXIT;

              lRecordRef.OPEN(11012746);
              lRecordRef.GETTABLE(DocRec);
              IF DocFieldsRec.FIND('-') THEN
                REPEAT
                  lFieldRef := lRecordRef.FIELD(DocFieldsRec.FieldNr);

                  //FlowField
                  IF FORMAT(lFieldRef.CLASS) = 'Flowfield' THEN
                    lFieldRef.CALCFIELD;

                  IF FORMAT(lFieldRef.TYPE) = 'Option' THEN BEGIN
                    IF EVALUATE(IntValue,FORMAT(lFieldRef.VALUE)) THEN BEGIN
                      HulpString  := FORMAT(lFieldRef.OPTIONCAPTION);
                      HulpStrLen  := STRLEN(HulpString);
                      IF HulpStrLen > 250 THEN BEGIN
                        HulpString2 := COPYSTR(HulpString,1,250);
                        HulpString3 := COPYSTR(HulpString,251);
                        HulpStrLen  := STRPOS(HulpString3,',');
                        IF HulpStrLen > 0 THEN BEGIN
                          HulpString2 := HulpString2 + COPYSTR(HulpString3,1,HulpStrLen);
                          HulpString3 := COPYSTR(HulpString3,(HulpStrLen+1));
                          HulpString4 := HulpString2;
                          lTeller := 0;
                          REPEAT
                            lTeller := lTeller + 1;
                            HulpString4 := COPYSTR(HulpString4,(STRPOS(HulpString4,',')+1));
                          UNTIL STRPOS(HulpString4,',') = 0 ;
                          IF lTeller >= IntValue THEN
                            ValueTxt := SELECTSTR(IntValue + 1, HulpString2)
                          ELSE
                            ValueTxt := SELECTSTR(lTeller - IntValue, HulpString3);
                        END ELSE BEGIN;
                          ValueTxt := SELECTSTR(IntValue + 1,HulpString);
                        END;
                      END ELSE BEGIN
                        ValueTxt := SELECTSTR(IntValue + 1,FORMAT(lFieldRef.OPTIONCAPTION));
                      END;
                    END;
                  END ELSE BEGIN
                    ValueTxt := FORMAT(lFieldRef.VALUE);
                  END;

                  IF (ValueTxt = 'Diversen') AND (lFieldRef.NAME = 'Type') THEN
                    ValueTxt := 'Correspondentie';

                  IF AddElement(XMLDocumentNode, 'property', '', XMLNS, XMLNewChild) > 0 THEN EXIT;
                  AddAttribute(XMLNewChild, 'name', DocFieldsRec."XML Property");
                  AddAttribute(XMLNewChild, 'value', ValueTxt);
                UNTIL DocFieldsRec.NEXT = 0 ;

              DocRec."SharePoint Status" := DocRec."SharePoint Status"::Updated;
              DocRec.MODIFY;

              IF DocRec.File <> '' THEN BEGIN
                IF EXISTS(DocRec.File + lvExtension)  THEN BEGIN
                  IF EXISTS(DocumentMgtSetup."Dir. Sharepoint XML Out" + DocRec."No."  + lvExtension) THEN
                    ERASE(DocumentMgtSetup."Dir. Sharepoint XML Out" + DocRec."No."  + lvExtension);
                  COPY(DocRec.File + lvExtension, DocumentMgtSetup."Dir. Sharepoint XML Out" + DocRec."No."  + lvExtension);
                  ERASE(DocRec.File + lvExtension);
                  DocRec.VALIDATE(File, '');
                  DocRec.MODIFY;
                END;
              END;

          UNTIL DocRec.NEXT = 0 ;
        END;
      END;

      IF RecFound THEN RetVal := TRUE;
    END;

    LOCAL PROCEDURE GetDocumentExtension@1100525002(FileNameWithoutExtension@1100525000 : Text) Extension : Text[30];
    BEGIN
      Extension := '.docx';
      IF EXISTS(FileNameWithoutExtension + '.doc') THEN BEGIN
        Extension := '.doc';
      END;
      IF EXISTS(FileNameWithoutExtension + '.docm') THEN BEGIN
        Extension := '.docm';
      END;
    END;

    BEGIN
    END.
  }
}

