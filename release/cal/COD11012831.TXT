OBJECT Codeunit 11012831 Create Service Orders
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ServiceSetup@1100528800 : Record 11012800;
      gvTempSOHeaderRec@1100525000 : TEMPORARY Record 11012823;
      gvTempSOExtRec@1100528600 : TEMPORARY Record 11071727;
      gvTempSOLineMaintRec@1100525001 : TEMPORARY Record 11071696;
      gvTempSOLineModRec@1100526201 : TEMPORARY Record 11071701;
      gvTempSOLineReplRec@1100526202 : TEMPORARY Record 11071710;
      JobSetup@1100525004 : Record 315;
      MaintenanceManagement@1100528801 : Codeunit 11012829;
      Window@1100526203 : Dialog;
      Text000a@1100525002 : TextConst 'DEU=Zuerst Zeilen w„hlen;ENU=Select lines first;NLD=Selecteer eerst regels;NOR=Velg rader f›rst;SVE=V„lj rader f”rst';
      Text001@1100526204 : TextConst 'DEU=Prozess         #1#####################\;ENU=Process         #1#####################\;NLD=Proces          #1#####################\;NOR=Prosess #1#####################\;SVE=Process         #1#####################\';
      Text002@1100526205 : TextConst 'DEU=Fortschritt @2@@@@@@@@@@@@@@@@@@@@@;ENU=Progress        @2@@@@@@@@@@@@@@@@@@@@@;NLD=Voortgang       @2@@@@@@@@@@@@@@@@@@@@@;NOR=Fremdrift @2@@@@@@@@@@@@@@@@@@@@@';
      Text003@1100526206 : TextConst 'DEU=Verarbeiten Objekte;ENU=Process Objects;NLD=Verwerk Objecten';
      Text004@1100526207 : TextConst 'DEU=Erstellen Serviceauftr„ge;ENU=Create Service Orders;NLD=Aanmaken Serviceorders;NOR=Opprette serviceordre;SVE=Skapa serviceorder';
      Text005@1100526208 : TextConst 'DEU=Vorhandene Serviceauftr„ge;ENU=Existing Service Orders;NLD=Bestaande Serviceorders;NOR=Eksisterende serviceordre;SVE=Befintliga serviceorder';
      Text006@1100525003 : TextConst 'DEU=Zeilen ohne Cluster-Folgenr. gefunden, fortfahren?;ENU=Lines found without Cluster Seqn., continue?;NLD=Regels gevonden zonder clustervolgnr., wilt u doorgaan?;NOR=Rader funnet uten klyngesekvens, fortsette?';

    PROCEDURE CreateServiceOrdersMaintProp@1100525001(VAR IOMaintenanceProposalLine@1100525000 : Record 11071696;IFixedDate@1100525002 : Date;IPlanMargin@1100525003 : Integer;IPreferredEmployeeResNo@1100525004 : Code[20];ISplitSOonDiscTradeSpec@1100528600 : Boolean;ISplitSOonServicePackage@1210190000 : Boolean;IOnlyNewServiceOrders@1100528603 : Boolean;INoSeries@1100525001 : Code[10];IMaxHoursPerServiceOrder@1100528602 : Decimal;IUseWorkDateWithOldPlanDate@1100528604 : Boolean);
    VAR
      ServiceContract@1100526201 : Record 11012812;
      Customer@1100526202 : Record 18;
      ServiceOrder@1100528601 : Record 11012823;
      ContractObjectMaintenance@1100528800 : Record 11071692;
      Linecounter@1100526203 : Integer;
      NoOfRecords@1100526204 : Integer;
      Source@1100526205 : 'Calls,Maintenance,Modifications,Replacements,Other';
      UsePreferredEmployeeAsEmployee@1100528801 : Boolean;
    BEGIN
      IF ServiceSetup.GET THEN
        UsePreferredEmployeeAsEmployee := ServiceSetup."Use Pref. Employee as Employee";

      WITH IOMaintenanceProposalLine DO BEGIN
        IF ISEMPTY THEN BEGIN
          MESSAGE(Text000a);
          EXIT;
        END;
        SETRANGE(Expired, FALSE);
        IF FINDSET THEN BEGIN
          Window.OPEN(Text001+
                      Text002);
          Window.UPDATE(1,Text003);
          NoOfRecords := COUNT;

          CheckUseOfClusterSeqn(IOMaintenanceProposalLine);
          TestLastPossibleChangeDate(IOMaintenanceProposalLine);

          REPEAT
            ServiceContract.GET("Service Contract No.");
            IF NOT Customer.GET(ServiceContract."Customer No.") THEN
              Customer.INIT;

            ServiceContract.TESTFIELD(Blocked, FALSE);
            IF Customer.Blocked <> Customer.Blocked::" " THEN
              Customer.FIELDERROR(Blocked);
            TESTFIELD("Starting Date Maintenance");
            IF "Service Order No." = '' THEN BEGIN

              IF IFixedDate <> 0D THEN BEGIN
                "Starting Date Maintenance" := IFixedDate;
                "Ending Date Maintenance" := IFixedDate;
                "Starting Time Maintenance" := 0T;
                "Ending Time Maintenance" := 0T;
              END;
              IF ("Starting Date Maintenance" < WORKDATE) AND IUseWorkDateWithOldPlanDate THEN BEGIN
                "Starting Date Maintenance" := WORKDATE;
                "Ending Date Maintenance" := WORKDATE;
                "Starting Time Maintenance" := 0T;
                "Ending Time Maintenance" := 0T;
              END;
              IF IPreferredEmployeeResNo <> '' THEN
                "Preferred Employee" := IPreferredEmployeeResNo;

              //mve.sn, 12-12-14: DP00685
              IF ("Employee No." = '') AND UsePreferredEmployeeAsEmployee THEN BEGIN
                IF ContractObjectMaintenance.GET(
                  IOMaintenanceProposalLine."Service Contract No.", IOMaintenanceProposalLine."Object No.", IOMaintenanceProposalLine."Maintenance Scheme")
                THEN
                  IF MaintenanceManagement.MaintLinesLaborExist(
                    ContractObjectMaintenance, IOMaintenanceProposalLine."Theoretical Maintenance Date")
                  THEN
                    "Employee No." := "Preferred Employee";
              END;

              CALCFIELDS("Standard Object No.");
              TESTFIELD("Service Location No.");

              IF "Starting Date Maintenance" <> 0D THEN BEGIN
                IF IsNewServiceOrderNeeded(
                     "Service Contract No.", "Service Location No.", "Starting Date Maintenance",
                     "Ending Date Maintenance", "Resource No.",
                     Discipline, "Trade Speciality", "Service Package", IPlanMargin,
                     ServiceOrder, 0, ISplitSOonDiscTradeSpec, ISplitSOonServicePackage, Cluster, "Cluster Seqn.", "Firm Planned",
                     IMaxHoursPerServiceOrder, IOMaintenanceProposalLine."Budget Working Hours",
                     IOMaintenanceProposalLine."Order Kind", IOMaintenanceProposalLine."Order Type") OR
                   (("Starting Time Maintenance" <> 0T) AND ("Ending Time Maintenance" <> 0T)) OR IOnlyNewServiceOrders
                THEN BEGIN
                  IF IsNewTempServiceOrderNeeded(
                      Source::Maintenance, "Service Contract No.", "Service Location No.", "Starting Date Maintenance",
                      "Ending Date Maintenance", "Resource No.",
                      Discipline, "Trade Speciality", "Service Package", IPlanMargin, 0, ISplitSOonDiscTradeSpec,
                      ISplitSOonServicePackage, Cluster, "Cluster Seqn.", "Firm Planned",
                      IMaxHoursPerServiceOrder, IOMaintenanceProposalLine."Budget Working Hours", Subcontractor,
                      IOMaintenanceProposalLine."Order Kind", IOMaintenanceProposalLine."Order Type")
                  THEN
                    CreateTempSOHeader(
                      "Service Contract No.", "Service Location No.", "Starting Date Maintenance",
                      "Starting Time Maintenance", "Ending Date Maintenance", "Ending Time Maintenance",
                      "Theoretical Maintenance Date", "Resource No.", "Preferred Employee", Discipline, "Trade Speciality",
                      "Service Package", 0, ISplitSOonDiscTradeSpec, ISplitSOonServicePackage, Cluster, "Cluster Seqn.",
                      IOMaintenanceProposalLine."Order Kind", IOMaintenanceProposalLine."Order Type", "Firm Planned", Subcontractor)
                  ELSE BEGIN
                    IF ("Starting Time Maintenance" <> 0T) AND (gvTempSOHeaderRec."Starting Time" <> 0T) THEN
                      IF gvTempSOHeaderRec."Starting Time" > "Starting Time Maintenance" THEN
                        gvTempSOHeaderRec."Starting Time" := "Starting Time Maintenance";
                    IF ("Ending Time Maintenance" <> 0T) AND (gvTempSOHeaderRec."Ending Time" <> 0T) THEN
                      IF gvTempSOHeaderRec."Ending Time" < "Ending Time Maintenance" THEN
                        gvTempSOHeaderRec."Ending Time" := "Ending Time Maintenance";
                    IF NOT ISplitSOonDiscTradeSpec THEN
                      IF gvTempSOHeaderRec.Discipline <> Discipline THEN
                        gvTempSOHeaderRec.Discipline := '';
                    gvTempSOHeaderRec.MODIFY;
                  END;
                  CreateTempSOLineMaint(gvTempSOHeaderRec."No.", IOMaintenanceProposalLine);
                END ELSE BEGIN
                  IF ("Starting Time Maintenance" <> 0T) AND (ServiceOrder."Starting Time" <> 0T) THEN
                    IF ServiceOrder."Starting Time" > "Starting Time Maintenance" THEN
                      ServiceOrder."Starting Time" := "Starting Time Maintenance";
                  IF ("Ending Time Maintenance" <> 0T) AND (ServiceOrder."Ending Time" <> 0T) THEN
                    IF ServiceOrder."Ending Time" < "Ending Time Maintenance" THEN
                      ServiceOrder."Ending Time" := "Ending Time Maintenance";
                  IF NOT ISplitSOonDiscTradeSpec THEN
                    IF ServiceOrder.Discipline <> Discipline THEN
                      ServiceOrder.Discipline := '';
                  ServiceOrder.MODIFY;
                  CreateTempSOLineMaint(ServiceOrder."No.", IOMaintenanceProposalLine);
                END;
              END;
              Linecounter += 1;
              Window.UPDATE(2, ROUND(Linecounter / NoOfRecords * 10000, 1));
            END;
          UNTIL NEXT = 0;
          HandleTempSoHeader(Source::Maintenance, INoSeries);
          HandleExistingSoHeader(Source::Maintenance);
          Window.CLOSE;
        END;
      END;
    END;

    PROCEDURE CreateServiceOrdersModifi@1100526200(VAR IOObjectModificationLine@1100525000 : Record 11071701;IFixedDate@1100525002 : Date;IPlanMargin@1100525003 : Integer;IPreferredEmployeeResNo@1100525004 : Code[20];ISplitSOonDiscTradeSpec@1100528600 : Boolean;INoSeries@1100525001 : Code[10]);
    VAR
      ObjectModification@1100528601 : Record 11071700;
      ServiceContract@1100526202 : Record 11012812;
      Customer@1100526201 : Record 18;
      lvLinecounterInt@1100526205 : Integer;
      lvNoOfRecordsInt@1100526204 : Integer;
      lvSourceOpt@1100526200 : 'Calls,Maintenance,Modifications,Replacements,Other';
      ModificationDiscipline@1100525005 : Code[10];
      ModificationTradeSpeciality@1100525006 : Code[10];
    BEGIN
      WITH IOObjectModificationLine DO BEGIN
        IF FINDSET THEN BEGIN
          Window.OPEN(Text001 + Text002);
          Window.UPDATE(1, Text003);
          lvNoOfRecordsInt := COUNT;
          REPEAT
            ObjectModification.GET(IOObjectModificationLine."Modification No.");
            CALCFIELDS("Standard Object No.", "Standard Object No.", Discipline, "Trade Speciality");
            TESTFIELD("Standard Object No.");
            TESTFIELD("Service Location No.");

          //C024836.sn
            IF ObjectModification.Discipline <> '' THEN
              ModificationDiscipline := ObjectModification.Discipline
            ELSE
              ModificationDiscipline := Discipline;

            IF ObjectModification."Trade Speciality" <> '' THEN
              ModificationTradeSpeciality := ObjectModification."Trade Speciality"
            ELSE
              ModificationTradeSpeciality := "Trade Speciality";
          //C024836.en

            IF NOT Customer.GET("Customer No.") THEN
              Customer.INIT;

            IF (NOT ServiceContract.Blocked) AND (Customer.Blocked = Customer.Blocked::" ") AND
              ("Service Order No." = '')
            THEN BEGIN
              IF IFixedDate <> 0D THEN
                "Execution Date" := IFixedDate;
              IF IPreferredEmployeeResNo <> '' THEN
                "Preferred Employee" := IPreferredEmployeeResNo;
              IF "Execution Date" <> 0D THEN BEGIN
                  IF IsNewTempServiceOrderNeeded(
                    lvSourceOpt::Modifications, "Customer No.", "Service Location No.", "Execution Date", "Execution Date", "Preferred Employee",
                    ModificationDiscipline, ModificationTradeSpeciality, '', IPlanMargin, 1, ISplitSOonDiscTradeSpec, FALSE, "Service Cluster", "Service Cluster Seqn.",
                    FALSE, 0, 0, '', ObjectModification."Order Kind", '') //C024836.c
                  THEN BEGIN
                    CreateTempSOHeader(
                      "Customer No.", "Service Location No.", "Execution Date", 0T, "Execution Date", 0T, 0D, "Preferred Employee",
                      '', ModificationDiscipline, ModificationTradeSpeciality, '', 1, ISplitSOonDiscTradeSpec, FALSE, "Service Cluster", "Service Cluster Seqn.",
                      '', '', FALSE,''); //C024836.c
                    IF NOT gvTempSOExtRec.GET(gvTempSOHeaderRec."No.") THEN BEGIN
                      gvTempSOExtRec."Service Order No." := gvTempSOHeaderRec."No.";
                      gvTempSOExtRec.INSERT;
                    END;
                    gvTempSOExtRec."Master Company" := ObjectModification."Master Company";
                    gvTempSOExtRec."Master Project" := ObjectModification."Master Project";
                    gvTempSOExtRec."Master Element" := ObjectModification."Master Element";
                    gvTempSOExtRec."Price Book Code" := ObjectModification."Price Book Code";
                    gvTempSOExtRec."Unit Price Set" := ObjectModification."Unit Price Set";
                    gvTempSOExtRec."Price Book Index Date" := ObjectModification."Price Book Index Date";
                    gvTempSOExtRec.MODIFY;
                    gvTempSOHeaderRec."Price Book Type" := ObjectModification."Price Book Type";
                    gvTempSOHeaderRec."Unit Price Status" := ObjectModification."Unit Price Status";
                    gvTempSOHeaderRec."Settlement Method" := ObjectModification."Settlement Method";
                    gvTempSOHeaderRec."Order Kind" := ObjectModification."Order Kind";
                    gvTempSOHeaderRec."On Hold" := ObjectModification."On Hold";
                    gvTempSOHeaderRec.MODIFY;
                  END;
                  CreateTempSOLineMod(gvTempSOHeaderRec."No.", IOObjectModificationLine);
              END;
            END;
            lvLinecounterInt := lvLinecounterInt + 1;
            Window.UPDATE(2, ROUND(lvLinecounterInt/lvNoOfRecordsInt*10000,1));
          UNTIL NEXT = 0;
          HandleTempSoHeader(lvSourceOpt::Modifications, INoSeries);
          Window.CLOSE;
        END ELSE
          MESSAGE(Text000a);
      END;
    END;

    PROCEDURE CreateServiceOrdersReplace@1100526201(VAR IReplacementLineRec@1100525000 : Record 11071710;IFixedDate@1100525002 : Date;IPlanMargin@1100525003 : Integer;IPreferredEmployeeResNo@1100525004 : Code[20];SplitSOonDiscTradeSpec@1100528600 : Boolean;INoSeries@1100525001 : Code[10]);
    VAR
      ServiceContract@1100526202 : Record 11012812;
      Customer@1100526201 : Record 18;
      Linecounter@1100526205 : Integer;
      NoOfRecords@1100526204 : Integer;
      Source@1100526206 : 'Calls,Maintenance,Modifications,Replacements,Other';
    BEGIN
      WITH IReplacementLineRec DO BEGIN
        IF FINDSET THEN BEGIN
          Window.OPEN(Text001+
                      Text002);
          Window.UPDATE(1,Text003);
          NoOfRecords := COUNT;
          REPEAT
            CALCFIELDS("Standard Object No.", "Standard Object No.", Discipline, "Trade Speciality");
            TESTFIELD("Standard Object No.");
            TESTFIELD("Service Location No.");
            TESTFIELD("Replace with Std. Object No.");

            IF NOT Customer.GET("Customer No.") THEN
              Customer.INIT;

            IF (NOT ServiceContract.Blocked) AND (Customer.Blocked = Customer.Blocked::" ") AND
              ("Service Order No." = '') THEN BEGIN
              IF IFixedDate <> 0D THEN
                "Replacement Date" := IFixedDate;
              IF IPreferredEmployeeResNo <> '' THEN
                "Preferred Employee" := IPreferredEmployeeResNo;
              IF "Replacement Date" <> 0D THEN BEGIN
                IF IsNewTempServiceOrderNeeded(Source::Replacements, "Customer No.", "Service Location No.", "Replacement Date", "Replacement Date",
                  "Preferred Employee", Discipline, "Trade Speciality", '', IPlanMargin, 2, SplitSOonDiscTradeSpec, FALSE,'',0,FALSE,0,0,'','','')
                THEN
                  CreateTempSOHeader("Customer No.", "Service Location No.", "Replacement Date", 0T, "Replacement Date", 0T, 0D,
                    "Preferred Employee", '', Discipline, "Trade Speciality", '', 2, SplitSOonDiscTradeSpec, FALSE,'',0, '', '', FALSE,'');
                CreateTempSOLineRepl(gvTempSOHeaderRec."No.", IReplacementLineRec);
              END;
            END;
            Linecounter += 1;
            Window.UPDATE(2, ROUND(Linecounter / NoOfRecords * 10000, 1));
          UNTIL NEXT = 0;
          HandleTempSoHeader(Source::Replacements, INoSeries);
          HandleExistingSoHeader(Source::Replacements);
          Window.CLOSE;
        END ELSE
          MESSAGE(Text000a);
      END;
    END;

    PROCEDURE HandleTempSoHeader@1100525000(ISource@1100526204 : 'Calls,Maintenance,Modifications,Replacements,Other';INoSeries@1100525001 : Code[10]);
    VAR
      ServiceOrder@1100525002 : Record 11012823;
      ObjectModification@1100528600 : Record 11071700;
      ObjectReplacement@1100528602 : Record 11071697;
      WorkOrder@1100528603 : Record 11229279;
      ServiceText@1100529600 : Record 11012882;
      DisciplineRec@1100527300 : Record 11020204;
      WorkOrderNo@1100528604 : Code[20];
      Linecounter@1100526202 : Integer;
      NoOfRecords@1100526201 : Integer;
      CreateHeader@1100528601 : Boolean;
    BEGIN
      JobSetup.GET;
      WITH gvTempSOHeaderRec DO BEGIN
        IF FINDFIRST THEN BEGIN
          Window.UPDATE(1,Text004);
          NoOfRecords := COUNT;
          REPEAT
            CASE ISource OF
              ISource::Maintenance:
                BEGIN
                  gvTempSOLineMaintRec.SETRANGE("Service Order No.","No.");
                  IF gvTempSOLineMaintRec.FINDFIRST THEN BEGIN
                    CreateSoHeader(gvTempSOLineMaintRec."Service Order Description", ServiceOrder, 0, INoSeries, '');
                    REPEAT
                      HandleSoLines(
                        ServiceOrder, ISource, gvTempSOLineMaintRec."Starting Date Maintenance", gvTempSOLineMaintRec."Resource No.",
                        Signer);
                    UNTIL gvTempSOLineMaintRec.NEXT = 0;
                    IF gvTempSOHeaderRec."Preferred Employee No." <> '' THEN BEGIN
                      ServiceOrder.VALIDATE("Preferred Employee No.", gvTempSOHeaderRec."Preferred Employee No.");
                      ServiceOrder.MODIFY;
                    END;
                    IF DisciplineRec.GET(ServiceOrder.Discipline) THEN BEGIN
                      WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
                      WorkOrder.SETRANGE("Source No.", ServiceOrder."No.");
                      IF WorkOrder.FINDSET THEN
                        WorkOrder.MODIFYALL("Resource Group No.", DisciplineRec.GetResourceGroupNo)
                    END;
                    COMMIT;
                  END;
                  DELETE;
                END;
              ISource::Modifications:
                BEGIN
                  CreateHeader := TRUE;
                  gvTempSOLineModRec.SETRANGE("Service Order No.","No.");
                  IF gvTempSOLineModRec.FINDFIRST THEN BEGIN
                    REPEAT
                      IF CreateHeader THEN BEGIN
                        ObjectModification.GET(gvTempSOLineModRec."Modification No.");
                        CreateSoHeader(ObjectModification.Description, ServiceOrder, 1, INoSeries, ObjectModification."Global Dimension 1 Code");
                        ServiceText.CopyServiceTexts(ServiceText."Table Name"::"Object Modification", ObjectModification."No.", 0,
                                                     ServiceText."Table Name"::"Service Order", ServiceOrder."No.", 90);
                        CreateHeader := FALSE;
                      END;
                      HandleSoLines(ServiceOrder, ISource, gvTempSOLineModRec."Execution Date", '', '');
                      ServiceOrder.VALIDATE("Service Cluster", gvTempSOHeaderRec."Service Cluster");
                      ServiceOrder.VALIDATE("Service Cluster Seqn.", gvTempSOHeaderRec."Service Cluster Seqn.");
                      ServiceOrder.UpdateConfirmationLetter;
                      ServiceOrder.MODIFY(TRUE);
                      COMMIT;
                    UNTIL gvTempSOLineModRec.NEXT = 0;
                  END;
                END;
              ISource::Replacements:
                BEGIN
                  CreateHeader := TRUE;
                  gvTempSOLineReplRec.SETRANGE("Service Order No.","No.");
                  IF gvTempSOLineReplRec.FINDFIRST THEN BEGIN
                    REPEAT
                      IF CreateHeader THEN BEGIN
                        ObjectReplacement.GET(gvTempSOLineReplRec."Replacement No.");
                        CreateSoHeader(ObjectReplacement.Description, ServiceOrder, 2, INoSeries, '');
                        CreateHeader := FALSE;
                      END;
                      HandleSoLines(ServiceOrder, ISource, gvTempSOLineReplRec."Replacement Date", '', '');
                      COMMIT;
                    UNTIL gvTempSOLineReplRec.NEXT = 0;
                  END;
                END;
            END;
            IF ServiceOrder."No." <> '' THEN BEGIN
              ServiceOrder.FIND('=');
              ServiceOrder.UpdateSOHours;

              ServiceOrder.UpdateWorkOrder(FALSE);
              IF ISource = ISource::Maintenance THEN BEGIN
                //Link WO Subcontractor to WO Employee
                IF (ServiceOrder."Employee No." <> '') AND (ServiceOrder.Subcontractor <> '') THEN BEGIN
                  WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
                  WorkOrder.SETRANGE("Source Company", COMPANYNAME);
                  WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
                  WorkOrder.SETRANGE("Source No.", ServiceOrder."No.");
                  WorkOrder.SETRANGE("Resource Type", WorkOrder."Resource Type"::Employee);
                  WorkOrder.SETRANGE("Resource No.", ServiceOrder."Employee No.");
                  IF WorkOrder.FINDFIRST THEN BEGIN
                    WorkOrderNo := WorkOrder."No.";
                    WorkOrder.SETRANGE("Resource Type", WorkOrder."Resource Type"::Subcontractor);
                    WorkOrder.SETRANGE("Resource No.", ServiceOrder.Subcontractor);
                    IF WorkOrder.FINDFIRST THEN BEGIN
                      WorkOrder.VALIDATE("Schedule Relation", WorkOrder."Schedule Relation"::"Start-Start");
                      WorkOrder.VALIDATE("Related Work Order No.", WorkOrderNo);
                      WorkOrder.MODIFY(TRUE);
                    END;
                  END;
                END;
              END;

              SetServiceOrderPlanned(ServiceOrder);
            END;

            Linecounter += 1;
            Window.UPDATE(2, ROUND(Linecounter / NoOfRecords * 10000, 1));
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE HandleExistingSoHeader@1100525008(ISource@1100526203 : 'Calls,Maintenance,Modifications,Replacements,Other');
    VAR
      ServiceOrder@1100525000 : Record 11012823;
      Linecounter@1100526202 : Integer;
      NoOfRecords@1100526201 : Integer;
    BEGIN
      CASE ISource OF
        ISource::Maintenance:
          BEGIN
            gvTempSOLineMaintRec.RESET;
            IF gvTempSOLineMaintRec.FINDFIRST THEN BEGIN
              Window.UPDATE(1,Text005);
              NoOfRecords := gvTempSOLineMaintRec.COUNT;
              REPEAT
                IF ServiceOrder.GET(gvTempSOLineMaintRec."Service Order No.") THEN BEGIN
                  HandleSoLines(ServiceOrder, ISource, gvTempSOLineMaintRec."Theoretical Maintenance Date",
                    gvTempSOLineMaintRec."Resource No.", '');
                  ServiceOrder.FIND('=');
                  ServiceOrder.UpdateSOHours;
                  ServiceOrder.UpdateWorkOrderInfo(1);
                  ServiceOrder.UpdateFromWorkOrder;
                  COMMIT;
                END;
                Linecounter += 1;
                Window.UPDATE(2, ROUND(Linecounter / NoOfRecords * 10000, 1));
              UNTIL gvTempSOLineMaintRec.NEXT = 0;
            END;
          END;
        ISource::Modifications:
          BEGIN
            gvTempSOLineModRec.RESET;
            IF gvTempSOLineModRec.FINDFIRST THEN BEGIN
              Window.UPDATE(1,Text005);
              NoOfRecords := gvTempSOLineModRec.COUNT;
              REPEAT
                IF ServiceOrder.GET(gvTempSOLineModRec."Service Order No.") THEN BEGIN
                  HandleSoLines(ServiceOrder, ISource, gvTempSOLineModRec."Execution Date", '', '');
                  ServiceOrder.FIND('=');
                  ServiceOrder.UpdateSOHours;
                  ServiceOrder.UpdateWorkOrderInfo(1);
                  ServiceOrder.UpdateFromWorkOrder;
                  COMMIT;
                END;
                Linecounter += 1;
                Window.UPDATE(2, ROUND(Linecounter / NoOfRecords * 10000, 1));
              UNTIL gvTempSOLineModRec.NEXT = 0;
            END;
          END;
        ISource::Replacements:
          BEGIN
            gvTempSOLineReplRec.RESET;
            IF gvTempSOLineReplRec.FINDFIRST THEN BEGIN
              Window.UPDATE(1,Text005);
              NoOfRecords := gvTempSOLineReplRec.COUNT;
              REPEAT
                IF ServiceOrder.GET(gvTempSOLineReplRec."Service Order No.") THEN BEGIN
                  HandleSoLines(ServiceOrder, ISource, gvTempSOLineReplRec."Replacement Date", '', '');
                  ServiceOrder.FIND('=');
                  ServiceOrder.UpdateSOHours;
                  ServiceOrder.UpdateWorkOrderInfo(1);
                  ServiceOrder.UpdateFromWorkOrder;
                  COMMIT;
                END;
                Linecounter += 1;
                Window.UPDATE(2, ROUND(Linecounter / NoOfRecords * 10000, 1));
              UNTIL gvTempSOLineReplRec.NEXT = 0;
            END;
          END;
      END;
    END;

    PROCEDURE HandleSoLines@1100525010(VAR OServiceOrder@1100525002 : Record 11012823;ISource@1100526203 : 'Calls,Maintenance,Modifications,Replacements,Other';IInitialDate@1100526200 : Date;IResourceNo@1100528600 : Code[20];IVendorNo@1100525000 : Code[20]);
    VAR
      lvMaintPropLinesRec@1100525001 : Record 11071696;
      lvObjModLineRec@1100526201 : Record 11071701;
      lvReplacementLineRec@1100526202 : Record 11071710;
      ResourceWOP@1100528602 : Record 11229278;
      VendorNo@1100528601 : Code[20];
    BEGIN
      IF IResourceNo <> '' THEN
        IF ResourceWOP.GET(IResourceNo) THEN
          IF (ResourceWOP.Type = ResourceWOP.Type::Subcontractor) AND (ResourceWOP.Company = COMPANYNAME) THEN
            VendorNo := ResourceWOP."Source No.";
      IF VendorNo = '' THEN
        VendorNo := IVendorNo;

      CreateSoLines(OServiceOrder, ISource, IInitialDate, VendorNo);
      CASE ISource OF
        ISource::Maintenance:
          BEGIN
            IF lvMaintPropLinesRec.GET(gvTempSOLineMaintRec."Maintenance Proposal",gvTempSOLineMaintRec."Line No.") THEN BEGIN
              lvMaintPropLinesRec.TESTFIELD("Service Order No.",''); //C020514.n
              lvMaintPropLinesRec."Service Order No." := OServiceOrder."No.";
              lvMaintPropLinesRec.MODIFY;
            END;
            gvTempSOLineMaintRec.DELETE;
          END;
        ISource::Modifications:
          BEGIN
            lvObjModLineRec.GET(gvTempSOLineModRec."Modification No.",gvTempSOLineModRec."Object No.");
            lvObjModLineRec.TESTFIELD("Service Order No.",''); //C020514.n
            lvObjModLineRec."Service Order No." := OServiceOrder."No.";
            lvObjModLineRec.MODIFY;
            gvTempSOLineModRec.DELETE;
          END;
        ISource::Replacements:
          BEGIN
            lvReplacementLineRec.GET(gvTempSOLineReplRec."Replacement No.",gvTempSOLineReplRec."Object No.");
            lvReplacementLineRec.TESTFIELD("Service Order No.",''); //C020514.n
            lvReplacementLineRec."Service Order No." := OServiceOrder."No.";
            lvReplacementLineRec.MODIFY;
            gvTempSOLineReplRec.DELETE;
          END;
      END;
    END;

    PROCEDURE IsNewServiceOrderNeeded@1100525009(ICustomerContractCode@1100526200 : Code[20];IServiceLocationNo@1100526201 : Code[20];IExecutionDate@1100526202 : Date;IExecutionEndingDate@1100525000 : Date;IResourceNo@1100526203 : Code[20];IDiscipline@1100528602 : Code[10];ITradeSpeciality@1100528603 : Code[10];IServicePackage@1210190001 : Code[10];IPlanMargin@1100525001 : Integer;VAR OServiceOrder@1100525005 : Record 11012823;IServiceOrderSource@1100526204 : 'Maintenance,Modification,Replacement';ISplitSOonDiscTradeSpec@1100528600 : Boolean;ISplitSOonServicePackage@1210190000 : Boolean;ICluster@1100528604 : Code[20];IClusterSeqn@1100528605 : Integer;IFirmPlanned@1100528608 : Boolean;IMaxHoursPerServiceOrder@1100528609 : Decimal;IBudgetHoursToBeAdded@1100528610 : Decimal;ILineOrderKind@1100528612 : Code[10];ILineOrderType@1100528611 : Code[10]) CreateBln : Boolean;
    VAR
      ResourceWOP@1100528601 : Record 11229278;
      FirstDate@1100525002 : Date;
      LastDate@1100525003 : Date;
      OrderKind@1100528606 : Code[10];
      OrderType@1100528607 : Code[10];
    BEGIN
      IF IExecutionDate <> IExecutionEndingDate THEN
        EXIT(TRUE);
      WITH OServiceOrder DO BEGIN
        SETCURRENTKEY("Service Location No.",Status,"Starting Date");

        IF IServiceOrderSource = IServiceOrderSource::Maintenance THEN BEGIN
          SETRANGE("Service Contract No.", ICustomerContractCode);
          GetOrderKindType(ICustomerContractCode, ICluster, OrderKind, OrderType);
          IF ILineOrderKind = '' THEN
            ILineOrderKind := OrderKind;
          IF ILineOrderType = '' THEN
            ILineOrderType := OrderType;
        END ELSE
          SETRANGE("Customer No.", ICustomerContractCode);

        SETRANGE("Service Location No.", IServiceLocationNo);
        SETRANGE(Status, Status::Open);
        SETRANGE("Source Type", "Source Type"::Contract);

        IF ILineOrderKind <> '' THEN
          SETRANGE("Order Kind", ILineOrderKind);
        IF ILineOrderType <> '' THEN
          SETRANGE("Order Type", ILineOrderType);

        IF (IPlanMargin = 0) OR IFirmPlanned THEN
          SETRANGE("Starting Date", IExecutionDate)
        ELSE BEGIN
          FirstDate := IExecutionDate - IPlanMargin;
          LastDate := IExecutionDate + IPlanMargin;
          SETRANGE("Starting Date", FirstDate, LastDate);
        END;

        IF IFirmPlanned THEN
          SETRANGE("Firm Planned", IFirmPlanned);

        IF IResourceNo <> '' THEN BEGIN
          ResourceWOP.GET(IResourceNo);
          CASE ResourceWOP.Type OF
            ResourceWOP.Type::Employee:
              BEGIN
                SETRANGE("Employee No.", IResourceNo);
                SETRANGE(Subcontractor, '');
              END;
            ResourceWOP.Type::Subcontractor:
              BEGIN
                SETRANGE("Employee No.", '');
                SETRANGE(Subcontractor, IResourceNo);
              END;
          END;
        END ELSE BEGIN
          SETRANGE("Employee No.", '');
          SETRANGE(Subcontractor, '');
        END;

        IF ISplitSOonDiscTradeSpec THEN BEGIN
          IF IDiscipline <> '' THEN
            SETRANGE(Discipline, IDiscipline);
          IF ITradeSpeciality <> '' THEN
            SETRANGE("Trade Speciality", ITradeSpeciality);
        END;

        IF ISplitSOonServicePackage THEN BEGIN
          IF IServicePackage <> '' THEN
            SETRANGE("Service Package", IServicePackage);
        END;
        SETRANGE("Service Cluster", ICluster);
        SETRANGE("Service Cluster Seqn.", IClusterSeqn);
        SETRANGE("Date/Time Export to FSA", 0DT);
        IF IMaxHoursPerServiceOrder > 0 THEN
          SETFILTER("Budget Hours", '<%1', IMaxHoursPerServiceOrder - IBudgetHoursToBeAdded);

        IF FINDSET THEN BEGIN
          REPEAT
            IF "Starting Date" = "Ending Date" THEN BEGIN
              RESET;
              EXIT(FALSE);
            END;
          UNTIL NEXT = 0;
        END;
        RESET;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE IsNewTempServiceOrderNeeded@1100525004(ISource@1100528612 : 'Calls,Maintenance,Modifications,Replacements,Other';ICustomerContractCode@1100526203 : Code[20];IServiceLocationNo@1100526202 : Code[20];IExecutionDate@1100526201 : Date;IExecutionEndingDate@1100525000 : Date;IResourceNo@1100526200 : Code[20];IDiscipline@1100528601 : Code[10];ITradeSpeciality@1100528600 : Code[10];IServicePackage@1210190000 : Code[10];IPlanMargin@1100525001 : Integer;IServiceOrderSource@1100526204 : 'Maintenance,Modification,Replacement';ISplitSOonDiscTradeSpec@1100528602 : Boolean;ISplitSOonServicePackage@1210190001 : Boolean;ICluster@1100528603 : Code[20];IClusterSeqn@1100528604 : Integer;IFirmPlanned@1100528608 : Boolean;IMaxHoursPerServiceOrder@1100528610 : Decimal;IBudgetHours@1100528609 : Decimal;ISubcontractor@1100525004 : Code[20];ILineOrderKind@1100528614 : Code[10];ILineOrderType@1100528613 : Code[10]) CreateBln : Boolean;
    VAR
      ResourceWOP@1100528607 : Record 11229278;
      FirstDate@1100525002 : Date;
      LastDate@1100525003 : Date;
      NewBudgetFits@1100528611 : Boolean;
      OrderKind@1100528605 : Code[10];
      OrderType@1100528606 : Code[10];
    BEGIN
      IF IExecutionDate <> IExecutionEndingDate THEN
        EXIT(TRUE);
      WITH gvTempSOHeaderRec DO BEGIN
        IF IServiceOrderSource = IServiceOrderSource::Maintenance THEN BEGIN
          SETRANGE("Service Contract No.", ICustomerContractCode);
          GetOrderKindType(ICustomerContractCode, ICluster, OrderKind, OrderType);
          IF ILineOrderKind = '' THEN
            ILineOrderKind := OrderKind;
          IF ILineOrderType = '' THEN
            ILineOrderType := OrderType;
        END ELSE
          SETRANGE("Customer No.", ICustomerContractCode);

        SETRANGE("Service Location No.", IServiceLocationNo);

        IF ILineOrderKind <> '' THEN
          SETRANGE("Order Kind", ILineOrderKind);
        IF ILineOrderType <> '' THEN
          SETRANGE("Order Type", ILineOrderType);

        IF (IPlanMargin = 0) OR IFirmPlanned THEN
          SETRANGE("Starting Date", IExecutionDate)
        ELSE BEGIN
          FirstDate := IExecutionDate - IPlanMargin;
          LastDate := IExecutionDate + IPlanMargin;
          SETRANGE("Starting Date", FirstDate, LastDate);
        END;

        IF IFirmPlanned THEN
          SETRANGE("Firm Planned", IFirmPlanned);

        IF IResourceNo <> '' THEN BEGIN
          ResourceWOP.GET(IResourceNo);
          CASE ResourceWOP.Type OF
            ResourceWOP.Type::Employee:
              BEGIN
                SETRANGE("Employee No.", IResourceNo);
                SETRANGE(Subcontractor, '');
              END;
            ResourceWOP.Type::Subcontractor:
              BEGIN
                SETRANGE("Employee No.", '');
                SETRANGE(Subcontractor, IResourceNo);
              END;
          END;
        END ELSE BEGIN
          SETRANGE("Employee No.", '');
          SETRANGE(Subcontractor, '');
        END;
        SETRANGE(Signer, ISubcontractor);

        IF ISplitSOonDiscTradeSpec THEN BEGIN
          IF IDiscipline <> '' THEN
            SETRANGE(Discipline, IDiscipline);
          IF ITradeSpeciality <> '' THEN
            SETRANGE("Trade Speciality", ITradeSpeciality);
        END;

        IF ISplitSOonServicePackage THEN BEGIN
          IF IServicePackage <> '' THEN
            SETRANGE("Service Package", IServicePackage);
        END;
        SETRANGE("Service Cluster", ICluster);
        SETRANGE("Service Cluster Seqn.", IClusterSeqn);

        IF FINDSET THEN BEGIN
          REPEAT
            NewBudgetFits := TRUE;
            IF (ISource = ISource::Maintenance) AND (IMaxHoursPerServiceOrder > 0) THEN BEGIN
              gvTempSOLineMaintRec.SETRANGE("Service Order No.", "No.");
              gvTempSOLineMaintRec.CALCSUMS("Budget Working Hours", "Budget Travel Hours");
              NewBudgetFits :=
                gvTempSOLineMaintRec."Budget Working Hours" +
                gvTempSOLineMaintRec."Budget Travel Hours" + IBudgetHours < IMaxHoursPerServiceOrder;
              gvTempSOLineMaintRec.RESET;
            END;
            IF NewBudgetFits AND ("Starting Date" = "Ending Date") THEN BEGIN
              RESET;
              EXIT(FALSE);
            END;
          UNTIL NEXT = 0;
        END;
        RESET;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE CreateTempSOHeader@1100525035(ICustomerContractCode@1100526204 : Code[20];IServiceLocationNo@1100526203 : Code[20];IStartingDate@1100526202 : Date;IStartingTime@1100528604 : Time;IEndingDate@1100528605 : Date;IEndingTime@1100528606 : Time;ITheoreticalMaintDate@1100525000 : Date;IResourceNo@1100526201 : Code[20];IPreferredEmployeeResNo@1100528613 : Code[20];IDiscipline@1100528602 : Code[10];ITradeSpeciality@1100528601 : Code[10];IServicePackage@1210190000 : Code[10];IServiceOrderSource@1100526200 : 'Maintenance,Modification,Replacement';ISplitSOonDiscTradeSpec@1100528600 : Boolean;ISplitSOonServicePackage@1210190001 : Boolean;ICluster@1100528607 : Code[20];IClusterSeqn@1100528608 : Integer;ILineOrderKind@1100409000 : Code[10];ILineOrderType@1100409001 : Code[10];IFirmPlanned@1100528611 : Boolean;ISubcontractor@1100525001 : Code[20]);
    VAR
      ResourceWOP@1100528612 : Record 11229278;
      Vendor@1100528614 : Record 23;
      TmpServiceOrderNo@1100528603 : Code[20];
      OrderKind@1100528609 : Code[10];
      OrderType@1100528610 : Code[10];
    BEGIN
      WITH gvTempSOHeaderRec DO BEGIN
        IF FINDLAST THEN
          TmpServiceOrderNo := INCSTR("No.")
        ELSE
          TmpServiceOrderNo := 'TEMP00001';

        INIT;
        "No." := TmpServiceOrderNo;
        "Service Location No." := IServiceLocationNo;
        IF IServiceOrderSource = IServiceOrderSource::Maintenance THEN BEGIN
          "Service Contract No." := ICustomerContractCode;
          GetOrderKindType(ICustomerContractCode, ICluster, OrderKind, OrderType);
          IF ILineOrderKind = '' THEN
            ILineOrderKind := OrderKind;
          IF ILineOrderType = '' THEN
            ILineOrderType := OrderType;
        END ELSE
          "Customer No." := ICustomerContractCode;

        "Starting Date" := IStartingDate;
        "Starting Time" := IStartingTime;
        "Ending Date" := IEndingDate;
        "Ending Time" := IEndingTime;
        IF ITheoreticalMaintDate <> 0D THEN
          "Service Control Period Date" := ITheoreticalMaintDate;

        IF IResourceNo <> '' THEN BEGIN
          ResourceWOP.GET(IResourceNo);
          CASE ResourceWOP.Type OF
            ResourceWOP.Type::Employee:
              "Employee No." := IResourceNo;
            ResourceWOP.Type::Subcontractor:
              Subcontractor := IResourceNo;
          END;
        END;
        IF IPreferredEmployeeResNo <> '' THEN
          "Preferred Employee No." := IPreferredEmployeeResNo;
        Signer := ISubcontractor;

        IF ISubcontractor <> '' THEN BEGIN
          Vendor.GET(ISubcontractor);
          IF Subcontractor = '' THEN
            Subcontractor := Vendor.GetResourceNo();
        END;

        Discipline := IDiscipline;
        IF ISplitSOonDiscTradeSpec THEN
          "Trade Speciality" := ITradeSpeciality;

        IF ISplitSOonServicePackage THEN
          "Service Package" := IServicePackage;
        "Service Cluster" := ICluster;
        "Service Cluster Seqn." := IClusterSeqn;
        "Order Kind" := ILineOrderKind;
        "Order Type" := ILineOrderType;
        "Firm Planned" := IFirmPlanned;
        INSERT;
      END;
    END;

    PROCEDURE CreateTempSOLineMaint@1100525046(IServiceOrderNo@1100525001 : Code[20];IMaintenanceProposalLine@1100525000 : Record 11071696);
    VAR
      ServiceSetup@1100528600 : Record 11012800;
    BEGIN
      ServiceSetup.GET;
      WITH gvTempSOLineMaintRec DO BEGIN
        INIT;
        "Maintenance Proposal" := IMaintenanceProposalLine."Maintenance Proposal";
        "Line No." := IMaintenanceProposalLine."Line No.";
        "Object No." := IMaintenanceProposalLine."Object No.";
        "Maintenance Scheme" := IMaintenanceProposalLine."Maintenance Scheme";
        "Theoretical Maintenance Date" := IMaintenanceProposalLine."Theoretical Maintenance Date";
        "Starting Date Maintenance" := IMaintenanceProposalLine."Starting Date Maintenance";
        "Service Order No." := IServiceOrderNo;
        "Service Contract Arr. Line No." := IMaintenanceProposalLine."Service Contract Arr. Line No.";
        "Service Order Description" := IMaintenanceProposalLine."Service Order Description";
        "Resource No." := IMaintenanceProposalLine."Resource No.";
        IF "Service Order Description" = '' THEN
          "Service Order Description" := ServiceSetup."Description Maintenance Orders";
        "Firm Planned" := IMaintenanceProposalLine."Firm Planned";
        "Execution Day" := IMaintenanceProposalLine."Execution Day";
        "Starting Time Maint. Window" := IMaintenanceProposalLine."Starting Time Maint. Window";
        "Ending Time Maint. Window" := IMaintenanceProposalLine."Ending Time Maint. Window";
        "Service Category" := IMaintenanceProposalLine."Service Category";
        "Budget Working Hours" := IMaintenanceProposalLine."Budget Working Hours";
        "Budget Travel Hours" := IMaintenanceProposalLine."Budget Travel Hours";
        "Last Possible Maint. Date" := IMaintenanceProposalLine."Last Possible Maint. Date"; //C031138
        INSERT;
      END;
    END;

    PROCEDURE CreateTempSOLineMod@1100526215(IServiceOrderNo@1100525001 : Code[20];IObjectModificationLine@1100526200 : Record 11071701);
    BEGIN
      WITH gvTempSOLineModRec DO BEGIN
        INIT;
        "Modification No."  := IObjectModificationLine."Modification No.";
        "Object No." := IObjectModificationLine."Object No.";
        "Service Order No." := IServiceOrderNo;
        "Execution Date" := IObjectModificationLine."Execution Date";
        INSERT;
      END;
    END;

    PROCEDURE CreateTempSOLineRepl@1100526207(IServiceOrderNo@1100525001 : Code[20];IReplacementLine@1100526200 : Record 11071710);
    BEGIN
      WITH gvTempSOLineReplRec DO BEGIN
        INIT;
        "Replacement No."  := IReplacementLine."Replacement No.";
        "Object No." := IReplacementLine."Object No.";
        "Service Order No." := IServiceOrderNo;
        "Replacement Date" := IReplacementLine."Replacement Date";
        "Replace with Std. Object No." := IReplacementLine."Replace with Std. Object No.";
        INSERT;
      END;
    END;

    PROCEDURE CreateSoHeader@1100525006(IDescription@1100525004 : Text[50];VAR OServiceOrder@1100525005 : Record 11012823;ServiceOrderSource@1100526200 : 'Maintenance,Modification,Replacement';INoSeries@1100525000 : Code[10];GlobalDim1Code@1100529600 : Code[20]);
    VAR
      ServiceContract@1100525003 : Record 11012812;
      ServicePackage@1210190000 : Record 11012806;
      ServiceSetup@1100528600 : Record 11012800;
      ServiceOrderExtension@1100528602 : Record 11071727;
      ServiceSurchargeManagement@1100528601 : Codeunit 11012834;
      NoSeriesMgt@1100525001 : Codeunit 396;
      Week@1100528603 : Integer;
      Year@1100528604 : Integer;
    BEGIN
      CLEAR(OServiceOrder);
      WITH OServiceOrder DO BEGIN
        CASE ServiceOrderSource OF
          ServiceOrderSource::Maintenance:
            "Source Type" := "Source Type"::Contract;
          ServiceOrderSource::Modification:
            "Source Type" := "Source Type"::Modification;
          ServiceOrderSource::Replacement:
            "Source Type" := "Source Type"::Replacement;
        END;
        IF INoSeries <> '' THEN BEGIN
          "No. Series" := INoSeries;
          NoSeriesMgt.TestSeries("No. Series", "No. Series");
          NoSeriesMgt.SetSeries("No.");
        END;
        INSERT(TRUE);

        IF ServiceOrderSource = ServiceOrderSource::Maintenance THEN BEGIN
          ServiceContract.GET(gvTempSOHeaderRec."Service Contract No.");
          VALIDATE("Customer No.", ServiceContract."Customer No.");
          VALIDATE("Bill-to Customer No.", ServiceContract."Bill-to Customer No. (CP)");
          VALIDATE("Service Contract No.", ServiceContract."No.");
          VALIDATE("Contact Person No.", ServiceContract."Contact Person");
          VALIDATE("Bill-to Contact Person", ServiceContract."Bill-to Contact Person (CP)");
        END ELSE BEGIN
          VALIDATE("Customer No.",gvTempSOHeaderRec."Customer No.");
          VALIDATE("Bill-to Customer No.", gvTempSOHeaderRec."Customer No.");
          VALIDATE("Contact Person No.", gvTempSOHeaderRec."Contact Person No.");
          VALIDATE("Bill-to Contact Person", gvTempSOHeaderRec."Bill-to Contact Person");
        END;
        VALIDATE("Employee No.", gvTempSOHeaderRec."Employee No.");
        VALIDATE(Subcontractor, gvTempSOHeaderRec.Subcontractor);

        VALIDATE("Service Location No.",gvTempSOHeaderRec."Service Location No.");
        VALIDATE("Starting Date", gvTempSOHeaderRec."Starting Date");
        VALIDATE("Ending Date", gvTempSOHeaderRec."Ending Date");
        VALIDATE("Starting Time", gvTempSOHeaderRec."Starting Time");
        VALIDATE("Ending Time", gvTempSOHeaderRec."Ending Time");
        CASE "Source Type" OF
          "Source Type"::Contract:
            BEGIN
              VALIDATE("Firm Planned", gvTempSOHeaderRec."Firm Planned");
              IF "Firm Planned" THEN BEGIN
                CASE gvTempSOLineMaintRec."Maintenance Day" OF
                  gvTempSOLineMaintRec."Maintenance Day"::" "..gvTempSOLineMaintRec."Maintenance Day"::Sunday:
                    BEGIN
                      "First Possible Starting Date" := "Starting Date";
                      "Last Possible Ending Date" := "Starting Date";
                      "First Possible Starting Time" := gvTempSOLineMaintRec."Starting Time Maint. Window";
                      "Last Possible Ending Time" := gvTempSOLineMaintRec."Ending Time Maint. Window";
                    END;
                  gvTempSOLineMaintRec."Maintenance Day"::Weekday:
                    BEGIN
                      Week := DATE2DWY("Starting Date", 2);
                      Year := DATE2DWY("Starting Date", 3);
                      "First Possible Starting Date" := DWY2DATE(1, Week, Year);
                      "Last Possible Ending Date" := DWY2DATE(5, Week, Year);
                    END;
                  gvTempSOLineMaintRec."Maintenance Day"::Weekend:
                    BEGIN
                      Week := DATE2DWY("Starting Date", 2);
                      Year := DATE2DWY("Starting Date", 3);
                      "First Possible Starting Date" := DWY2DATE(6, Week, Year);
                      "Last Possible Ending Date" := DWY2DATE(7, Week, Year);
                    END;
                END;
              END ELSE IF "Last Possible Ending Date" = 0D THEN
                "Last Possible Ending Date" := gvTempSOLineMaintRec."Last Possible Maint. Date";
            END;
        END;
        IF gvTempSOHeaderRec."Service Control Period Date" <> 0D THEN
          "Service Control Period Date" := gvTempSOHeaderRec."Service Control Period Date";
        IF gvTempSOHeaderRec.Discipline <> '' THEN
          Discipline := gvTempSOHeaderRec.Discipline
        ELSE
          Discipline := gvTempSOLineMaintRec.Discipline;
        IF gvTempSOHeaderRec."Trade Speciality" <> '' THEN
          "Trade Speciality" := gvTempSOHeaderRec."Trade Speciality"
        ELSE
          "Trade Speciality" := gvTempSOLineMaintRec."Trade Speciality";
        "Service Cluster" := gvTempSOHeaderRec."Service Cluster";
        "Service Cluster Seqn." := gvTempSOHeaderRec."Service Cluster Seqn.";
        IF gvTempSOHeaderRec."Order Kind" <> '' THEN
          VALIDATE("Order Kind", gvTempSOHeaderRec."Order Kind");
        IF gvTempSOHeaderRec."Order Type" <> '' THEN
          VALIDATE("Order Type", gvTempSOHeaderRec."Order Type");
        IF gvTempSOHeaderRec."On Hold" <> '' THEN
          VALIDATE("On Hold", gvTempSOHeaderRec."On Hold");

        IF ServiceOrderSource = ServiceOrderSource::Maintenance THEN BEGIN
          IF gvTempSOHeaderRec."Service Package" <> '' THEN BEGIN
            ServicePackage.GET(gvTempSOHeaderRec."Service Package");
            IF ServicePackage."Service Package Contract" <> '' THEN
              "Service Package" := ServicePackage."Service Package Contract"
            ELSE
              "Service Package" := ServicePackage.Code;
          END;
          ServiceSetup.GET;
          Priority := ServiceSetup."Priority Maintenance Orders";
        END;

        Description := IDescription;
        CheckDurationOnInitServOrder;  //db, 08-08-13: C007836
        IF ServiceOrderSource = ServiceOrderSource::Modification THEN BEGIN
          VALIDATE("Price Book Type", gvTempSOHeaderRec."Price Book Type");
          VALIDATE("Unit Price Status", gvTempSOHeaderRec."Unit Price Status"::"Pre-Recording"); //Must be Pre-Recording before validate fields on SO Extension
          VALIDATE("Order Kind", gvTempSOHeaderRec."Order Kind");
        END;
        VALIDATE("Settlement Method", gvTempSOHeaderRec."Settlement Method");
        VALIDATE("Preferred Employee No.", gvTempSOHeaderRec."Preferred Employee No.");
        MODIFY;

        ServiceSurchargeManagement.CopySurchargeLinesToSO(OServiceOrder);

        IF gvTempSOExtRec.GET(gvTempSOHeaderRec."No.") THEN BEGIN
          ServiceOrderExtension.GetServOrderExtension("No.");
          IF ServiceOrderSource = ServiceOrderSource::Modification THEN BEGIN
            IF gvTempSOExtRec."Master Company" <> '' THEN
              ServiceOrderExtension.VALIDATE("Master Company", gvTempSOExtRec."Master Company");
            IF gvTempSOExtRec."Master Project" <> '' THEN
              ServiceOrderExtension.VALIDATE("Master Project", gvTempSOExtRec."Master Project");
            IF gvTempSOExtRec."Master Element" <> '' THEN
              ServiceOrderExtension.VALIDATE("Master Element", gvTempSOExtRec."Master Element");
            IF gvTempSOExtRec."Master Extension Contract" <> '' THEN
              ServiceOrderExtension.VALIDATE("Master Extension Contract", gvTempSOExtRec."Master Extension Contract");
            IF gvTempSOExtRec."Price Book Code" <> '' THEN
              ServiceOrderExtension.VALIDATE("Price Book Code", gvTempSOExtRec."Price Book Code");
            IF gvTempSOExtRec."Price Book Index Date" <> 0D THEN
              ServiceOrderExtension.VALIDATE("Price Book Index Date", gvTempSOExtRec."Price Book Index Date");
            IF gvTempSOExtRec."Unit Price Set" <> '' THEN
              ServiceOrderExtension.VALIDATE("Unit Price Set", gvTempSOExtRec."Unit Price Set");
          END;
          ServiceOrderExtension.UpdateServOrderExtension("No.");
        END;

        IF ServiceOrderSource = ServiceOrderSource::Modification THEN BEGIN
          VALIDATE("Unit Price Status", gvTempSOHeaderRec."Unit Price Status");
          IF (GlobalDim1Code <> '') AND (GlobalDim1Code <> "Global Dimension 1 Code") THEN
            VALIDATE("Global Dimension 1 Code", GlobalDim1Code);
          MODIFY;
        END;

        UpdateFromWorkOrder;
      END;
    END;

    PROCEDURE CreateSoLines@1100525011(VAR OServiceOrder@1100525003 : Record 11012823;ISource@1100526200 : 'Calls,Maintenance,Modifications,Replacements,Other';IInitialDate@1100526203 : Date;IVendorNo@1100528600 : Code[20]);
    VAR
      ServiceObject@1100525002 : Record 11071691;
      MaintenanceSchemeObjects@1100525001 : Record 11071745;
      ObjectModification@1100526201 : Record 11071700;
      ObjectReplacement@1100526202 : Record 11071697;
      ServiceExtraCost@1100528300 : Record 11020344;
    BEGIN
      CASE ISource OF
        ISource::Maintenance:
          BEGIN

            IF NOT MaintenanceSchemeObjects.GET(gvTempSOLineMaintRec."Maintenance Scheme") THEN MaintenanceSchemeObjects.INIT;
            IF NOT ServiceObject.GET(gvTempSOLineMaintRec."Object No.") THEN
              ServiceObject.INIT;
            CreateServiceOrderObjectLines(OServiceOrder, ServiceObject, MaintenanceSchemeObjects.Code,
              ISource, IInitialDate);
            CreateBudgetAndAdviceLines(OServiceOrder, ServiceObject, MaintenanceSchemeObjects."Trade Speciality",
              MaintenanceSchemeObjects."Trade Expertise", MaintenanceSchemeObjects.Discipline, IVendorNo, ISource, IInitialDate);
          END;
        ISource::Modifications:
          BEGIN
            IF NOT ObjectModification.GET(gvTempSOLineModRec."Modification No.") THEN
              ObjectModification.INIT;
            IF NOT ServiceObject.GET(gvTempSOLineModRec."Object No.") THEN
              ServiceObject.INIT;
            CreateServiceOrderObjectLines(OServiceOrder, ServiceObject, ObjectModification."No.", ISource, IInitialDate);
            CreateBudgetAndAdviceLines(OServiceOrder, ServiceObject, ObjectModification."Trade Speciality",
              ObjectModification."Trade Expertise", ObjectModification.Discipline, IVendorNo, ISource, IInitialDate);
          END;
        ISource::Replacements:
          BEGIN
            IF NOT ObjectReplacement.GET(gvTempSOLineReplRec."Contract No. Replacement") THEN ObjectReplacement.INIT;
            IF NOT ServiceObject.GET(gvTempSOLineReplRec."Object No.") THEN
              ServiceObject.INIT;
            CreateServiceOrderObjectLines(OServiceOrder, ServiceObject, ObjectReplacement."No.", ISource, IInitialDate);
            CreateBudgetAndAdviceLines(OServiceOrder, ServiceObject, ObjectReplacement."Trade Speciality",
              ObjectReplacement."Trade Expertise", ObjectReplacement.Discipline, IVendorNo, ISource, IInitialDate);
          END;
      END;

      ServiceExtraCost."Entity Type" := ServiceExtraCost."Entity Type"::"Service Order";
      ServiceExtraCost."Entity Code" := OServiceOrder."No.";
      ServiceExtraCost.CheckTravelData;
    END;

    PROCEDURE CreateServiceOrderObjectLines@1100526202(IServiceOrder@1100526206 : Record 11012823;IServiceObject@1100526205 : Record 11071691;ICode@1100526204 : Code[20];ISource@1100526200 : 'Calls,Maintenance,Modifications,Replacements,Other';IIndexDate@1100528600 : Date);
    VAR
      ServiceOrderObject@1100526208 : Record 11071724;
      MaintenanceHeader@1100528601 : Record 11071743;
    BEGIN
      ServiceOrderObject.INIT;
      ServiceOrderObject."Service Order No." := IServiceOrder."No.";
      ServiceOrderObject.VALIDATE("Object No.", IServiceObject."No.");
      ServiceOrderObject."Standard Object No." := IServiceObject."Standard Object No.";
      ServiceOrderObject.Source := ISource;
      ServiceOrderObject.Code := ICode;
      ServiceOrderObject."Source Line No." := gvTempSOLineMaintRec."Service Contract Arr. Line No.";
      ServiceOrderObject."Service Contract No." := IServiceOrder."Service Contract No.";
      ServiceOrderObject."Maintenance Scheme" := gvTempSOLineMaintRec."Maintenance Scheme";
      ServiceOrderObject."Service Category" := gvTempSOLineMaintRec."Service Category";

      MaintenanceHeader.SETRANGE("Line Type", MaintenanceHeader."Line Type"::"Maintenance Scheme");
      MaintenanceHeader.SETRANGE(Code, gvTempSOLineMaintRec."Maintenance Scheme");
      MaintenanceHeader.SETFILTER("Index Date",'..%1', IIndexDate);
      IF MaintenanceHeader.FINDLAST THEN
        ServiceOrderObject."Maintenance Scheme Index Date" := MaintenanceHeader."Index Date";

      ServiceOrderObject."Firm Planned" := gvTempSOLineMaintRec."Firm Planned";
      ServiceOrderObject."Maintenance Day" := gvTempSOLineMaintRec."Execution Day";
      ServiceOrderObject."Starting Time Maint. Window" := gvTempSOLineMaintRec."Starting Time Maint. Window";
      ServiceOrderObject."Ending Time Maint. Window" := gvTempSOLineMaintRec."Ending Time Maint. Window";
      ServiceOrderObject.INSERT(TRUE);
    END;

    PROCEDURE CreateBudgetAndAdviceLines@1100525024(IServiceOrder@1100525006 : Record 11012823;IServiceObject@1100525005 : Record 11071691;ITradeSpeciality@1100526203 : Code[20];ITradeExpertise@1100526202 : Code[20];IDiscipline@1100526201 : Code[20];IVendorNo@1100528601 : Code[20];ISource@1100526205 : 'Calls,Maintenance,Modifications,Replacements,Other';IIndexDate@1100526204 : Date);
    VAR
      ServiceOrderBudgetLine@1100525001 : Record 11012875;
      LineNo@1100525002 : Integer;
      MaintSchemeVersionLine@1100525003 : Record 11071744;
      TmpMaintSchemeVersionLine@1100525004 : TEMPORARY Record 11071744;
      MaintenanceSchemeVersion@1100528600 : Record 11071743;
      MaintenanceManagement@1100525000 : Codeunit 11012829;
    BEGIN
      WITH ServiceOrderBudgetLine DO BEGIN
        SETRANGE("Budget Type","Budget Type"::Order);
        SETRANGE("Service Order No.", IServiceOrder."No.");
        IF FINDLAST THEN
          LineNo := "Line No." + 10000
        ELSE
          LineNo := 10000;
      END;

      CASE ISource OF
        ISource::Maintenance:
          BEGIN
            MaintenanceManagement.GetTempWorklist(TmpMaintSchemeVersionLine, MaintenanceSchemeVersion."Line Type"::Object,
              IServiceObject."No.", gvTempSOLineMaintRec."Maintenance Scheme", IServiceObject."No.",
              IIndexDate, gvTempSOLineMaintRec."Service Contract No.",
              MaintenanceSchemeVersion."Line Type"::Object, IServiceObject."No.", gvTempSOLineMaintRec."Maintenance Scheme",
              IIndexDate, FALSE, TRUE);
            LoopMaintLines(TmpMaintSchemeVersionLine, IServiceOrder, IServiceObject, ITradeSpeciality, ITradeExpertise,
              IDiscipline, IVendorNo, LineNo);
          END;
        ISource::Modifications:
          BEGIN
            WITH MaintSchemeVersionLine DO BEGIN
              MaintenanceSchemeVersion.SETRANGE("Line Type", "Line Type"::Modification);
              MaintenanceSchemeVersion.SETRANGE(Code, gvTempSOLineModRec."Modification No.");
              MaintenanceSchemeVersion.SETFILTER("Index Date",'..%1', IIndexDate);
              MaintenanceSchemeVersion.SETRANGE(Expired, FALSE);
              IF MaintenanceSchemeVersion.FINDLAST THEN BEGIN
                SETRANGE("Index Date", MaintenanceSchemeVersion."Index Date");
                SETRANGE("Line Type","Line Type"::Modification);
                SETRANGE("Type Code",gvTempSOLineModRec."Modification No.");
                LoopMaintLines(MaintSchemeVersionLine, IServiceOrder, IServiceObject, ITradeSpeciality, ITradeExpertise,
                               IDiscipline, IVendorNo, LineNo);
              END;
            END;
          END;
        ISource::Replacements:
          BEGIN
            MaintenanceManagement.GetTempWorklist(TmpMaintSchemeVersionLine,
              MaintenanceSchemeVersion."Line Type"::"Standard Object Deinstallation",
              IServiceObject."Standard Object No.", '', '',
              IIndexDate, '',
              MaintenanceSchemeVersion."Line Type"::"Standard Object Deinstallation",
              IServiceObject."Standard Object No.", '',
              IIndexDate, FALSE, TRUE);

            MaintenanceManagement.GetTempWorklist(TmpMaintSchemeVersionLine,
              MaintenanceSchemeVersion."Line Type"::"Standard Object Installation",
              gvTempSOLineReplRec."Replace with Std. Object No.", '', '',
              IIndexDate, '',
              MaintenanceSchemeVersion."Line Type"::"Standard Object Installation",
              gvTempSOLineReplRec."Replace with Std. Object No.", '',
              IIndexDate, FALSE, TRUE);

            LoopMaintLines(TmpMaintSchemeVersionLine, IServiceOrder, IServiceObject, ITradeSpeciality, ITradeExpertise,
              IDiscipline, IVendorNo, LineNo);
          END;
      END;
    END;

    PROCEDURE LoopMaintLines@1100526240(VAR OMaintSchemeVersionLine@1100526200 : Record 11071744;IServiceOrder@1100526201 : Record 11012823;IServiceObject@1100526202 : Record 11071691;ITradeSpeciality@1100526205 : Code[20];ITradeExpertise@1100526204 : Code[20];IDiscipline@1100526203 : Code[20];IVendorNo@1100528600 : Code[20];VAR OLineNo@1100526206 : Integer);
    BEGIN
      WITH OMaintSchemeVersionLine DO BEGIN
        OMaintSchemeVersionLine.SETFILTER(Quantity, '<>%1', 0);
        IF FINDSET THEN BEGIN
          REPEAT
            InsertBudgetLine(IServiceOrder, IServiceObject, ITradeSpeciality, ITradeExpertise,
                             IDiscipline, IVendorNo, OLineNo, OMaintSchemeVersionLine);
            IF NOT ("Cost Type" IN ["Cost Type"::Labor, "Cost Type"::Sundry]) THEN
              InsertAdviceOrderLine(IServiceOrder, IServiceObject, OMaintSchemeVersionLine, IVendorNo);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE InsertBudgetLine@1100525027(IServiceOrder@1100525006 : Record 11012823;IServiceObject@1100525002 : Record 11071691;ITradeSpeciality@1100526202 : Code[20];ITradeExpertise@1100526201 : Code[20];IDiscipline@1100526200 : Code[20];IVendorNo@1100528601 : Code[20];VAR OLineNo@1100525004 : Integer;IMaintSchemeVersionLine@1100525005 : Record 11071744);
    VAR
      ServiceOrderBudgetLine@1100525000 : Record 11012875;
    BEGIN
      WITH ServiceOrderBudgetLine DO BEGIN
        INIT;
        "Budget Type" := "Budget Type"::Order;
        "Service Order No." := IServiceOrder."No.";
        "Service Contract No." := IServiceOrder."Service Contract No.";
        VALIDATE("Object No.", IServiceObject."No.");
        IF IMaintSchemeVersionLine."Line Type" = IMaintSchemeVersionLine."Line Type"::"Maintenance Scheme" THEN
          "Maintenance Scheme" := IMaintSchemeVersionLine."Type Code"
        ELSE
          "Maintenance Scheme" := IMaintSchemeVersionLine."Belongs to Scheme";
        "Line No." := OLineNo;
        OLineNo += 10000;
        INSERT(TRUE);
        "Index Date" := IServiceOrder."Starting Date";
        Description := IMaintSchemeVersionLine.Description;
        Quantity := IMaintSchemeVersionLine.Quantity * IServiceObject.Quantity;
        "Unit of Measure" := IMaintSchemeVersionLine."Unit of Measure";
        "Time Quantity" := 1;
        "Cost Type" := IMaintSchemeVersionLine."Cost Type";
        "Cost Object" := IMaintSchemeVersionLine."Cost Object";
        Norm := IMaintSchemeVersionLine.Norm;
        IF IMaintSchemeVersionLine."Rate Code" <> '' THEN
          VALIDATE("Rate Code", IMaintSchemeVersionLine."Rate Code")
        ELSE
          Rate := IMaintSchemeVersionLine.Rate;
        Hours := IMaintSchemeVersionLine.Hours;
        Price := IMaintSchemeVersionLine."Cost Price";
        "Gross Price" := IMaintSchemeVersionLine."Gross Price";
        "Discount %" := IMaintSchemeVersionLine."Purchase Discount %";
        Amount := IMaintSchemeVersionLine."Cost Amount";
        "Item No." := IMaintSchemeVersionLine."Item No.";
        "Basic Item" := IMaintSchemeVersionLine."Basic Item";
        "Trade Item" := IMaintSchemeVersionLine."Trade Item";
        "Vendor (Trade Item)" := IMaintSchemeVersionLine."Vendor (Trade Item)";
        Manufacturer := IMaintSchemeVersionLine.Manufacturer;
        "Cost Component" := IMaintSchemeVersionLine."Cost Component";
        IF ("Cost Type" = "Cost Type"::Subcontracting) AND (IVendorNo <> '') THEN BEGIN
          Vendor := IVendorNo
        END ELSE
          Vendor := IMaintSchemeVersionLine.Vendor;
        "Service Location No." := IServiceOrder."Service Location No.";
        Building := IServiceObject.Building;
        Floor := IServiceObject.Floor;
        Room := IServiceObject.Room;
        Discipline := IDiscipline;
        "Trade Speciality" := ITradeSpeciality;
        "Trade Expertise" := ITradeExpertise;
        "Additional Cost" := IMaintSchemeVersionLine."Additional Cost";
        "Source Type" := "Source Type"::Direct;
        VALIDATE("External Text", IMaintSchemeVersionLine.Text);
        "Work Line Type" := IMaintSchemeVersionLine."Line Type";
        "Work Code" := IMaintSchemeVersionLine."Type Code";
        "Work Index Date" := IMaintSchemeVersionLine."Index Date";
        CalcTotals;
        IF "Cost Type" <> "Cost Type"::Labor THEN //db, 01-06-15: C023525
          Advised := TRUE;
        MODIFY;
      END;
    END;

    PROCEDURE InsertAdviceOrderLine@1100525057(IServiceOrder@1100525003 : Record 11012823;IServiceObject@1100528600 : Record 11071691;IMaintSchemeVersionLine@1100525002 : Record 11071744;IVendorNo@1100528601 : Code[20]);
    VAR
      AdviceOrderLine@1100525001 : Record 11012055;
      ServiceLocation@1100525000 : Record 11012801;
    BEGIN
      WITH AdviceOrderLine DO BEGIN
        INIT;
        "Record Type":= "Record Type"::ServOrder;
        "Service Order No." := IServiceOrder."No.";
        VALIDATE("Line No.", 0);
        INSERT(TRUE);

        "Service Contract No." := gvTempSOHeaderRec."Service Contract No.";
        "Cost Object" := IMaintSchemeVersionLine."Cost Object";
        "Cost Component" := IMaintSchemeVersionLine."Cost Component";
        "Order Date" := IServiceOrder."Starting Date";
        CASE IMaintSchemeVersionLine."Cost Type" OF
          IMaintSchemeVersionLine."Cost Type"::Material:
            BEGIN
              VALIDATE("Cost Type", "Cost Type"::Material);
              //db.sn, 10-07-15: C023889
              IF IMaintSchemeVersionLine."Trade Item" <> '' THEN BEGIN
                "Vendor (Trade Item)":= IMaintSchemeVersionLine."Vendor (Trade Item)";
                VALIDATE("Trade Item", IMaintSchemeVersionLine."Trade Item");
              END ELSE BEGIN
                IF IMaintSchemeVersionLine."Basic Item" <> '' THEN BEGIN
                  Manufacturer := IMaintSchemeVersionLine.Manufacturer;
                  VALIDATE("Basic Item", IMaintSchemeVersionLine."Basic Item");
                END ELSE BEGIN
                  IF IMaintSchemeVersionLine."Item No." <> '' THEN BEGIN
                    VALIDATE("Item No.", IMaintSchemeVersionLine."Item No.");
                  END;
                END;
              END;
              //db.en, 10-07-15: C023889
              IF IMaintSchemeVersionLine.Vendor <> '' THEN
                VALIDATE(Vendor, IMaintSchemeVersionLine.Vendor);
              IF Vendor = '' THEN
                VALIDATE(Vendor, PreferredVendor);
            END;
          IMaintSchemeVersionLine."Cost Type"::Subcontracting:
            BEGIN
              VALIDATE("Cost Type", "Cost Type"::Subcontracting);
              IF IVendorNo <> '' THEN
                VALIDATE(Vendor, IVendorNo)
              ELSE
                VALIDATE(Vendor, IMaintSchemeVersionLine.Vendor);
            END;
          IMaintSchemeVersionLine."Cost Type"::Plant:
             VALIDATE("Cost Type", "Cost Type"::Plant);
          IMaintSchemeVersionLine."Cost Type"::Sundry:
             VALIDATE("Cost Type", "Cost Type"::Sundry);
        END;
        "Quantity (Budget)" := IMaintSchemeVersionLine.Quantity * IServiceObject.Quantity;
        VALIDATE("Quantity (Advice)", "Quantity (Budget)");
        "Unit of Measure" := IMaintSchemeVersionLine."Unit of Measure";
        VALIDATE("Price (LCY)", IMaintSchemeVersionLine."Cost Price");
        "Price Agreement" := IMaintSchemeVersionLine."Price Agreement";
        VALIDATE(Transaction, JobSetup."Advice Order Purch.Transaction"); //C030233.c
        IF ("Item No." <> '') AND ("Cost Type" = "Cost Type"::Material) THEN
          IF JobSetup."Advice Order Transaction" = JobSetup."Advice Order Transaction"::Inventory THEN
            VALIDATE(Transaction, Transaction::Inventory); //C030233.c
        IF NOT ServiceLocation.GET(IServiceObject.GetPrefServiceLocationNo(FALSE)) THEN
          ServiceLocation.INIT;
        IF ServiceLocation.Deliver = ServiceLocation.Deliver::Location THEN
          VALIDATE(Deliver, Deliver::Location)
        ELSE
          VALIDATE(Deliver, Deliver::"Service Location");
        Description := IMaintSchemeVersionLine.Description;
        VALIDATE("Receipt Date", IServiceOrder."Starting Date");
        VALIDATE("External Text", IMaintSchemeVersionLine.Text);
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE CheckUseOfClusterSeqn@1100525003(VAR IMaintenanceProposalLine@1100525000 : Record 11071696);
    VAR
      ServiceClusterSeq@1100525001 : Record 11071966;
      MaintenanceProposalLine@1100525003 : Record 11071696;
      NonClusterSeqnLinesFound@1100525002 : Boolean;
    BEGIN
      MaintenanceProposalLine.COPY(IMaintenanceProposalLine);
      IF NOT MaintenanceProposalLine.FINDSET THEN
        EXIT;
      REPEAT
        IF (MaintenanceProposalLine.Cluster <> '') AND (MaintenanceProposalLine."Cluster Seqn." = 0) THEN BEGIN
          MaintenanceProposalLine.CALCFIELDS("Contract Cluster");
          IF MaintenanceProposalLine."Contract Cluster" THEN BEGIN
            ServiceClusterSeq.SETRANGE(Type, ServiceClusterSeq.Type::Contract);
            ServiceClusterSeq.SETRANGE("Type Code", MaintenanceProposalLine."Service Contract No.");
          END ELSE BEGIN
            ServiceClusterSeq.SETRANGE(Type, ServiceClusterSeq.Type::" ");
            ServiceClusterSeq.SETRANGE("Type Code", '');
          END;
          ServiceClusterSeq.SETRANGE("Source Type", ServiceClusterSeq."Source Type"::" ");
          ServiceClusterSeq.SETRANGE("Cluster Code", MaintenanceProposalLine.Cluster);
          ServiceClusterSeq.SETFILTER("Execution Period Ending Date", '>%1', TODAY);
          IF NOT ServiceClusterSeq.ISEMPTY THEN
            NonClusterSeqnLinesFound := TRUE;
        END;
      UNTIL (MaintenanceProposalLine.NEXT = 0) OR NonClusterSeqnLinesFound;

      IF NonClusterSeqnLinesFound THEN
        IF NOT CONFIRM(Text006) THEN
          ERROR('');
    END;

    PROCEDURE TestLastPossibleChangeDate@1100525002(VAR IMaintenanceProposalLine@1100525000 : Record 11071696);
    VAR
      ServiceClusterSeq@1100525002 : Record 11071966;
      MaintenanceProposalLine@1100525001 : Record 11071696;
    BEGIN
      MaintenanceProposalLine.COPY(IMaintenanceProposalLine);
      IF NOT MaintenanceProposalLine.FINDSET THEN
        EXIT;
      REPEAT
        IF (MaintenanceProposalLine.Cluster <> '') AND (MaintenanceProposalLine."Cluster Seqn." <> 0) THEN BEGIN
          MaintenanceProposalLine.CALCFIELDS("Contract Cluster");
          IF MaintenanceProposalLine."Contract Cluster" THEN BEGIN
            IF ServiceClusterSeq.GET(ServiceClusterSeq.Type::Contract, MaintenanceProposalLine."Service Contract No.", ServiceClusterSeq."Source Type"::" ",
              MaintenanceProposalLine.Cluster, MaintenanceProposalLine."Cluster Seqn.")
            THEN BEGIN
              IF FORMAT(ServiceClusterSeq."Last Possible Change Bandwidth") = '' THEN
                ServiceClusterSeq.TESTFIELD("Last Possible Change Date")
              ELSE
                ServiceClusterSeq.TESTFIELD("Last Possible Change Bandwidth");
            END;
          END ELSE BEGIN
            IF ServiceClusterSeq.GET(ServiceClusterSeq.Type::" ", '', ServiceClusterSeq."Source Type"::" ", MaintenanceProposalLine.Cluster,
              MaintenanceProposalLine."Cluster Seqn.")
            THEN BEGIN
              IF FORMAT(ServiceClusterSeq."Last Possible Change Bandwidth") = '' THEN
                ServiceClusterSeq.TESTFIELD("Last Possible Change Date")
              ELSE
                ServiceClusterSeq.TESTFIELD("Last Possible Change Bandwidth");
            END;
          END;
        END;
      UNTIL MaintenanceProposalLine.NEXT = 0;
    END;

    PROCEDURE GetOrderKindType@1100409000(IServiceContractNo@1100409004 : Code[20];ICluster@1100409000 : Code[20];VAR OOrderKind@1100409001 : Code[10];VAR OOrderType@1100409002 : Code[10]);
    VAR
      ServiceCluster@1100409003 : Record 11071742;
      MaintenanceManagement@1100528600 : Codeunit 11012829;
    BEGIN
      MaintenanceManagement.GetServiceClusterDS(IServiceContractNo, ICluster, ServiceCluster);

      OOrderKind := MaintenanceManagement.GetOrderKindForMaintProposal(ServiceCluster."Order Kind");
      OOrderType := MaintenanceManagement.GetOrderTypeForMaintProposal(ServiceCluster."Order Type");
    END;

    LOCAL PROCEDURE SetServiceOrderPlanned@1100528600(VAR IServiceOrder@1100528600 : Record 11012823);
    BEGIN
      IF (IServiceOrder."Starting Date" <> 0D) AND (IServiceOrder."Starting Time" <> 0T) AND
         (IServiceOrder."Ending Date" <> 0D) AND (IServiceOrder."Ending Time" <> 0T) AND
         ((IServiceOrder."Employee No." <> '') OR (IServiceOrder.Subcontractor <> ''))
      THEN
        IServiceOrder.UpdateToNextRefPoint(0);
    END;

    BEGIN
    {
      4PS, C020514, 28-01-2015, Changes to release db for batch processing
      4PS, C029173, gvTempSOHeaderRec.Signer is now misused for Subcontractor No. until better solution is worked out.
    }
    END.
  }
}

