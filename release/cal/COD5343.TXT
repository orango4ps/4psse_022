OBJECT Codeunit 5343 CRM Sales Order to Sales Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    TableNo=5353;
    OnRun=VAR
            SalesHeader@1000 : Record 36;
          BEGIN
            CreateInNAV(Rec,SalesHeader);
          END;

  }
  CODE
  {
    VAR
      CannotCreateSalesOrderInNAVTxt@1003 : TextConst 'ENU=The sales order cannot be created.;NOR=Ordren kan ikke opprettes.;SVE=F”rs„ljningsordern kan inte skapas.';
      NoCRMAccountForOrderErr@1014 : TextConst '@@@="%1=Dynamics CRM Sales Order Name, %2 - customer id type, %3 customer id, %4 - Microsoft Dynamics CRM";ENU=Sales order %1 is created for %2 %3, which doesn''t correspond to an account in %4.;NOR=Ordre %1 er opprettet for %2 %3, som ikke samsvarer med en konto i %4.;SVE=%2-kontot f”r %2-f”rs„ljningsordern %1 finns inte.';
      ItemDoesNotExistErr@1002 : TextConst '@@@="%1= the text: ""The sales order cannot be created."", %2=product name";ENU=%1 The item %2 does not exist.;NOR=%1 Varen %2 finnes ikke.;SVE=%1 Artikeln %2 finns inte.';
      NoCustomerErr@1005 : TextConst '@@@="%1= the text: ""The Dynamics CRM Sales Order cannot be created."", %2=sales order title, %3 - Microsoft Dynamics CRM";ENU=%1 There is no potential customer defined on the %3 sales order %2.;NOR=%1 Ingen potensiell kunde er definert p† %3-ordren %2.;SVE=%1 Det finns ingen potentiell kund definierad p† %3-f”rs„ljningsordern %2.';
      CRMSynchHelper@1017 : Codeunit 5342;
      CRMProductName@1001 : Codeunit 5344;
      LastSalesLineNo@1004 : Integer;
      NotCoupledCustomerErr@1012 : TextConst '@@@="%1= the text: ""The Dynamics CRM Sales Order cannot be created."", %2=account name, %3 - Microsoft Dynamics CRM";ENU=%1 There is no customer coupled to %3 account %2.;NOR=%1 Ingen kunde er koblet til %3-kontoen %2.;SVE=%1 Det finns ingen kund kopplad till %3-kontot %2.';
      NotCoupledCRMProductErr@1006 : TextConst '@@@="%1= the text: ""The Dynamics CRM Sales Order cannot be created."", %2=product name, %3 - Microsoft Dynamics CRM";ENU=%1 The %3 product %2 is not coupled to an item.;NOR=%1 %3-produktet %2 er ikke koblet til en vare.;SVE=%1 %3-produkten %2 „r inte kopplad till n†gon artikel.';
      NotCoupledCRMResourceErr@1007 : TextConst '@@@="%1= the text: ""The Dynamics CRM Sales Order cannot be created."", %2=resource name, %3 - Microsoft Dynamics CRM";ENU=%1 The %3 resource %2 is not coupled to a resource.;NOR=%1 %3-ressursen %2 er ikke koblet til en ressurs.;SVE=%1 %3-resursen %2 „r inte kopplad till n†gon resurs.';
      NotCoupledCRMSalesOrderErr@1000 : TextConst '@@@="%1=sales order number, %2 - Microsoft Dynamics CRM";ENU=The %2 sales order %1 is not coupled.;NOR=%2-ordren %1 er ikke koblet.;SVE=%2-f”rs„ljningsordern %1 „r inte kopplad.';
      NotCoupledSalesHeaderErr@1015 : TextConst '@@@="%1=sales order number, %2 - Microsoft Dynamics CRM";ENU=The sales order %1 is not coupled to %2.;NOR=Ordren %1 er ikke koblet til %2.;SVE=F”rs„ljningsordern %1 „r inte kopplad till %2.';
      OverwriteCRMDiscountQst@1016 : TextConst '@@@=%1 - product name, %2 - Microsoft Dynamics CRM;ENU=There is a discount on the %2 sales order, which will be overwritten by %1 settings. You will have the possibility to update the discounts directly on the sales order, after it is created. Do you want to continue?;NOR=Det er en rabatt p† %2-ordren, som blir overskrevet av %1-innstillinger. Du har anledning til † oppdatere rabattene direkte i ordren etter at den er opprettet. Vil du fortsette?;SVE=Det finns en rabatt p† %2-f”rs„ljningsordern som skrivs ”ver av %1-inst„llningarna. Det g†r att uppdatera rabatterna direkt p† f”rs„ljningsordern efter att den har skapats. Vill du forts„tta?';
      ResourceDoesNotExistErr@1009 : TextConst '@@@="%1= the text: ""The Dynamics CRM Sales Order cannot be created."", %2=product name";ENU=%1 The resource %2 does not exist.;NOR=%1 Ressursen %2 finnes ikke.;SVE=%1 Resursen %2 finns inte.';
      UnexpectedProductTypeErr@1011 : TextConst '@@@="%1= the text: ""The Dynamics CRM Sales Order cannot be created."", %2=product name";ENU=%1 Unexpected value of product type code for product %2. The supported values are: sales inventory, services.;NOR=%1 Uventet verdi for produkttypekoden for produktet %2. De st›ttede verdiene er Salgsbeholdning og Tjenester.;SVE=%1 Ov„ntat v„rde p† produkttypkoden f”r produkten %2. F”ljande v„rden st”ds: f”rs„ljning, lager, tj„nster.';
      ZombieCouplingErr@1013 : TextConst '@@@=%1 - product name, %2 - Microsoft Dynamics CRM;ENU=Although the coupling from %2 exists, the sales order had been manually deleted. If needed, please use the menu to create it again in %1.;NOR=Selv om koblingen fra %2 finnes, har ordren blitt slettet manuelt. Bruk om n›dvendig menyen til † opprette ordren p† nytt i %1.;SVE=Žven om det finns en koppling fr†n %2 har f”rs„ljningsordern tagits bort manuellt. Om det beh”vs skapar du den igen med hj„lp av menyn i %1.';
      MissingWriteInProductNoErr@1008 : TextConst '@@@=%1 - CRM product name,%2 - document type (order or quote), %3 - document number;ENU=%1 %2 %3 contains a write-in product. You must choose the default write-in product in Sales & Receivables Setup window.;NOR=%1 %2 %3 inneholder et produkt som ikke er i produktkatalogen. Du m† velge standard "ikke i produktkatalog" i vinduet for salgsoppsett.;SVE=%1 Produkt ej i register %2 finns inte.';
      MisingWriteInProductTelemetryMsg@1010 : TextConst '@@@={Locked};ENU=The user is missing a default write-in product when creating a sales order from a %1 order.;NOR=The user is missing a default write-in product when creating a sales order from a %1 order.';
      CrmTelemetryCategoryTok@1018 : TextConst '@@@={Locked};ENU=AL CRM Integration;NOR=AL CRM Integration';
      SuccessfullyCoupledSalesOrderTelemetryMsg@1019 : TextConst '@@@={Locked};ENU=The user successfully coupled a sales order to a %1 order.;NOR=The user successfully coupled a sales order to a %1 order.';

    LOCAL PROCEDURE ApplySalesOrderDiscounts@22(CRMSalesorder@1001 : Record 5353;VAR SalesHeader@1000 : Record 36);
    VAR
      SalesCalcDiscountByType@1002 : Codeunit 56;
      CRMDiscountAmount@1003 : Decimal;
    BEGIN
      // No discounts to apply
      IF (CRMSalesorder.DiscountAmount = 0 ) AND (CRMSalesorder.DiscountPercentage = 0) THEN
        EXIT;

      // Attempt to set the discount, if NAV general and customer settings allow it
      // Using CRM discounts
      CRMDiscountAmount := CRMSalesorder.TotalLineItemAmount - CRMSalesorder.TotalAmountLessFreight;
      SalesCalcDiscountByType.ApplyInvDiscBasedOnAmt(CRMDiscountAmount,SalesHeader);

      // NAV settings (in G/L Setup as well as per-customer discounts) did not allow using the CRM discounts
      // Using NAV discounts
      // But the user will be able to manually update the discounts after the order is created in NAV
      IF NOT CONFIRM(STRSUBSTNO(OverwriteCRMDiscountQst,PRODUCTNAME.SHORT,CRMProductName.SHORT),TRUE) THEN
        ERROR('');
    END;

    LOCAL PROCEDURE CopyCRMOptionFields@3(CRMSalesorder@1001 : Record 5353;VAR SalesHeader@1000 : Record 36);
    VAR
      CRMAccount@1003 : Record 5341;
      CRMOptionMapping@1002 : Record 5334;
    BEGIN
      IF CRMOptionMapping.FindRecordID(
           DATABASE::"CRM Account",CRMAccount.FIELDNO(Address1_ShippingMethodCode),CRMSalesorder.ShippingMethodCode)
      THEN
        SalesHeader.VALIDATE(
          "Shipping Agent Code",
          COPYSTR(CRMOptionMapping.GetRecordKeyValue,1,MAXSTRLEN(SalesHeader."Shipping Agent Code")));

      IF CRMOptionMapping.FindRecordID(
           DATABASE::"CRM Account",CRMAccount.FIELDNO(PaymentTermsCode),CRMSalesorder.PaymentTermsCode)
      THEN
        SalesHeader.VALIDATE(
          "Payment Terms Code",
          COPYSTR(CRMOptionMapping.GetRecordKeyValue,1,MAXSTRLEN(SalesHeader."Payment Terms Code")));

      IF CRMOptionMapping.FindRecordID(
           DATABASE::"CRM Account",CRMAccount.FIELDNO(Address1_FreightTermsCode),CRMSalesorder.FreightTermsCode)
      THEN
        SalesHeader.VALIDATE(
          "Shipment Method Code",
          COPYSTR(CRMOptionMapping.GetRecordKeyValue,1,MAXSTRLEN(SalesHeader."Shipment Method Code")));
    END;

    LOCAL PROCEDURE CopyBillToInformationIfNotEmpty@7(CRMSalesorder@1001 : Record 5353;VAR SalesHeader@1000 : Record 36);
    BEGIN
      // If the Bill-To fields in CRM are all empty, then let NAV keep its standard behavior (takes Bill-To from the Customer information)
      IF ((CRMSalesorder.BillTo_Line1 = '') AND
          (CRMSalesorder.BillTo_Line2 = '') AND
          (CRMSalesorder.BillTo_City = '') AND
          (CRMSalesorder.BillTo_PostalCode = '') AND
          (CRMSalesorder.BillTo_Country = '') AND
          (CRMSalesorder.BillTo_StateOrProvince = ''))
      THEN
        EXIT;

      SalesHeader.VALIDATE("Bill-to Address",COPYSTR(CRMSalesorder.BillTo_Line1,1,MAXSTRLEN(SalesHeader."Bill-to Address")));
      SalesHeader.VALIDATE("Bill-to Address 2",COPYSTR(CRMSalesorder.BillTo_Line2,1,MAXSTRLEN(SalesHeader."Bill-to Address 2")));
      SalesHeader.VALIDATE("Bill-to City",COPYSTR(CRMSalesorder.BillTo_City,1,MAXSTRLEN(SalesHeader."Bill-to City")));
      SalesHeader.VALIDATE("Bill-to Post Code",COPYSTR(CRMSalesorder.BillTo_PostalCode,1,MAXSTRLEN(SalesHeader."Bill-to Post Code")));
      SalesHeader.VALIDATE(
        "Bill-to Country/Region Code",COPYSTR(CRMSalesorder.BillTo_Country,1,MAXSTRLEN(SalesHeader."Bill-to Country/Region Code")));
      SalesHeader.VALIDATE("Bill-to County",COPYSTR(CRMSalesorder.BillTo_StateOrProvince,1,MAXSTRLEN(SalesHeader."Bill-to County")));
    END;

    LOCAL PROCEDURE CopyShipToInformationIfNotEmpty@31(CRMSalesorder@1001 : Record 5353;VAR SalesHeader@1000 : Record 36);
    BEGIN
      // If the Ship-To fields in CRM are all empty, then let NAV keep its standard behavior (takes Bill-To from the Customer information)
      IF ((CRMSalesorder.ShipTo_Line1 = '') AND
          (CRMSalesorder.ShipTo_Line2 = '') AND
          (CRMSalesorder.ShipTo_City = '') AND
          (CRMSalesorder.ShipTo_PostalCode = '') AND
          (CRMSalesorder.ShipTo_Country = '') AND
          (CRMSalesorder.ShipTo_StateOrProvince = ''))
      THEN
        EXIT;

      SalesHeader.VALIDATE("Ship-to Address",COPYSTR(CRMSalesorder.ShipTo_Line1,1,MAXSTRLEN(SalesHeader."Ship-to Address")));
      SalesHeader.VALIDATE("Ship-to Address 2",COPYSTR(CRMSalesorder.ShipTo_Line2,1,MAXSTRLEN(SalesHeader."Ship-to Address 2")));
      SalesHeader.VALIDATE("Ship-to City",COPYSTR(CRMSalesorder.ShipTo_City,1,MAXSTRLEN(SalesHeader."Ship-to City")));
      SalesHeader.VALIDATE("Ship-to Post Code",COPYSTR(CRMSalesorder.ShipTo_PostalCode,1,MAXSTRLEN(SalesHeader."Ship-to Post Code")));
      SalesHeader.VALIDATE(
        "Ship-to Country/Region Code",COPYSTR(CRMSalesorder.ShipTo_Country,1,MAXSTRLEN(SalesHeader."Ship-to Country/Region Code")));
      SalesHeader.VALIDATE("Ship-to County",COPYSTR(CRMSalesorder.ShipTo_StateOrProvince,1,MAXSTRLEN(SalesHeader."Ship-to County")));
    END;

    LOCAL PROCEDURE SetLineDescription@27(SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;LineDescription@1002 : Text);
    VAR
      SalesReceivablesSetup@1003 : Record 311;
    BEGIN
      IF STRLEN(LineDescription) > MAXSTRLEN(SalesLine.Description) THEN BEGIN
        SalesLine.Description := COPYSTR(LineDescription,1,MAXSTRLEN(SalesLine.Description));
        CreateExtendedDescriptionOrderLines(
          SalesHeader,
          COPYSTR(
            LineDescription,
            MAXSTRLEN(SalesLine.Description) + 1));
      END ELSE BEGIN
        SalesReceivablesSetup.GET;
        IF SalesLine."No." = SalesReceivablesSetup."Write-in Product No." THEN
          SalesLine.Description := COPYSTR(LineDescription,1,MAXSTRLEN(SalesLine.Description));
      END;
    END;

    LOCAL PROCEDURE CoupledSalesHeaderExists@16(CRMSalesorder@1001 : Record 5353) : Boolean;
    VAR
      SalesHeader@1002 : Record 36;
      CRMIntegrationRecord@1003 : Record 5331;
      NAVSalesHeaderRecordId@1000 : RecordID;
    BEGIN
      IF NOT ISNULLGUID(CRMSalesorder.SalesOrderId) THEN
        IF CRMIntegrationRecord.FindRecordIDFromID(CRMSalesorder.SalesOrderId,DATABASE::"Sales Header",NAVSalesHeaderRecordId) THEN
          EXIT(SalesHeader.GET(NAVSalesHeaderRecordId));
    END;

    [External]
    PROCEDURE CreateInNAV@1(CRMSalesorder@1012 : Record 5353;VAR SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      CRMSalesorder.TESTFIELD(StateCode,CRMSalesorder.StateCode::Submitted);
      EXIT(CreateNAVSalesOrder(CRMSalesorder,SalesHeader));
    END;

    LOCAL PROCEDURE CreateNAVSalesOrder@15(CRMSalesorder@1001 : Record 5353;VAR SalesHeader@1000 : Record 36) : Boolean;
    VAR
      CRMIntegrationRecord@1003 : Record 5331;
    BEGIN
      IF ISNULLGUID(CRMSalesorder.SalesOrderId) THEN
        EXIT;

      CreateSalesOrderHeader(CRMSalesorder,SalesHeader);
      CreateSalesOrderNotes(CRMSalesorder,SalesHeader);
      CreateSalesOrderLines(CRMSalesorder,SalesHeader);
      ApplySalesOrderDiscounts(CRMSalesorder,SalesHeader);
      CRMIntegrationRecord.CoupleRecordIdToCRMID(SalesHeader.RECORDID,CRMSalesorder.SalesOrderId);
      // Flag sales order has been submitted to NAV.
      SetLastBackOfficeSubmit(CRMSalesorder,TODAY);
      SENDTRACETAG('000083B',CrmTelemetryCategoryTok,VERBOSITY::Normal,
        STRSUBSTNO(SuccessfullyCoupledSalesOrderTelemetryMsg,CRMProductName.SHORT),DATACLASSIFICATION::SystemMetadata);

      EXIT(TRUE);
    END;

    [EventSubscriber(Table,36,OnBeforeDeleteEvent)]
    PROCEDURE ClearLastBackOfficeSubmitOnSalesHeaderDelete@14(VAR Rec@1000 : Record 36;RunTrigger@1004 : Boolean);
    VAR
      CRMSalesorder@1002 : Record 5353;
      CRMIntegrationRecord@1003 : Record 5331;
      CRMIntegrationManagement@1001 : Codeunit 5330;
    BEGIN
      IF CRMIntegrationManagement.IsCRMIntegrationEnabled THEN
        IF CRMIntegrationRecord.FindIDFromRecordID(Rec.RECORDID,CRMSalesorder.SalesOrderId) THEN BEGIN
          IF NOT CRMIntegrationManagement.IsWorkingConnection THEN
            EXIT;
          IF CRMSalesorder.FIND THEN
            SetLastBackOfficeSubmit(CRMSalesorder,0D);
        END;
    END;

    [EventSubscriber(Table,36,OnBeforeDeleteEvent)]
    PROCEDURE RemoveCouplingToCRMSalesOrderOnSalesHeaderDelete@23(VAR Rec@1001 : Record 36;RunTrigger@1000 : Boolean);
    VAR
      CRMSalesorder@1004 : Record 5353;
      CRMIntegrationRecord@1003 : Record 5331;
      CRMIntegrationManagement@1002 : Codeunit 5330;
    BEGIN
      // RunTrigger is expected to be false when deleting Sales Header after posting.
      // In this case, we should not change CRM Salesorder state here.
      IF NOT RunTrigger THEN
        EXIT;

      IF NOT (Rec."Document Type" = Rec."Document Type"::Order) THEN
        EXIT;

      IF NOT CRMIntegrationManagement.IsCRMIntegrationEnabled THEN
        EXIT;

      IF NOT CRMIntegrationRecord.FindIDFromRecordID(Rec.RECORDID,CRMSalesorder.SalesOrderId) THEN
        EXIT;

      IF NOT CRMSalesorder.FIND THEN
        EXIT;

      IF CRMIntegrationRecord.RemoveCouplingToRecord(Rec.RECORDID) THEN;
    END;

    LOCAL PROCEDURE CreateSalesOrderHeader@10(CRMSalesorder@1001 : Record 5353;VAR SalesHeader@1000 : Record 36);
    VAR
      Customer@1010 : Record 18;
    BEGIN
      SalesHeader.INIT;
      SalesHeader.VALIDATE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.VALIDATE(Status,SalesHeader.Status::Open);
      SalesHeader.InitInsert;
      GetCoupledCustomer(CRMSalesorder,Customer);
      SalesHeader.VALIDATE("Sell-to Customer No.",Customer."No.");
      SalesHeader.VALIDATE("Your Reference",COPYSTR(CRMSalesorder.OrderNumber,1,MAXSTRLEN(SalesHeader."Your Reference")));
      SalesHeader.VALIDATE("Currency Code",CRMSynchHelper.GetNavCurrencyCode(CRMSalesorder.TransactionCurrencyId));
      SalesHeader.VALIDATE("Requested Delivery Date",CRMSalesorder.RequestDeliveryBy);
      CopyBillToInformationIfNotEmpty(CRMSalesorder,SalesHeader);
      CopyShipToInformationIfNotEmpty(CRMSalesorder,SalesHeader);
      CopyCRMOptionFields(CRMSalesorder,SalesHeader);
      SalesHeader.VALIDATE("Payment Discount %",CRMSalesorder.DiscountPercentage);
      SalesHeader.VALIDATE("External Document No.",COPYSTR(CRMSalesorder.Name,1,MAXSTRLEN(SalesHeader."External Document No.")));
      SalesHeader.INSERT;
    END;

    LOCAL PROCEDURE CreateSalesOrderNotes@24(CRMSalesorder@1001 : Record 5353;VAR SalesHeader@1000 : Record 36);
    VAR
      CRMAnnotation@1002 : Record 5385;
      RecordLink@1003 : Record 2000000068;
      CRMAnnotationCoupling@1004 : Record 5392;
    BEGIN
      CRMAnnotation.SETRANGE(ObjectId,CRMSalesorder.SalesOrderId);
      CRMAnnotation.SETRANGE(IsDocument,FALSE);
      IF CRMAnnotation.FINDSET THEN
        REPEAT
          CreateNote(SalesHeader,CRMAnnotation,RecordLink);
          CRMAnnotationCoupling.CoupleRecordLinkToCRMAnnotation(RecordLink,CRMAnnotation);
        UNTIL CRMAnnotation.NEXT = 0;
    END;

    PROCEDURE CreateNote@25(SalesHeader@1000 : Record 36;CRMAnnotation@1001 : Record 5385;VAR RecordLink@1003 : Record 2000000068);
    VAR
      TypeHelper@1004 : Codeunit 10;
      RecordRef@1005 : RecordRef;
      FieldRef@1006 : FieldRef;
      AnnotationText@1002 : Text;
    BEGIN
      CLEAR(RecordLink);
      RecordLink."Record ID" := SalesHeader.RECORDID;
      RecordLink.Type := RecordLink.Type::Note;
      RecordLink.Description := CRMAnnotation.Subject;
      CRMAnnotation.CALCFIELDS(NoteText);
      RecordRef.GETTABLE(CRMAnnotation);
      FieldRef := RecordRef.FIELD(CRMAnnotation.FIELDNO(NoteText));
      AnnotationText := TypeHelper.ReadTextBlobWithTextEncoding(FieldRef,TEXTENCODING::UTF16);
      TypeHelper.WriteRecordLinkNote(RecordLink,AnnotationText);
      RecordLink.Created := CRMAnnotation.CreatedOn;
      RecordLink.Company := COMPANYNAME;
      RecordLink.INSERT;
    END;

    LOCAL PROCEDURE CreateSalesOrderLines@13(CRMSalesorder@1001 : Record 5353;SalesHeader@1000 : Record 36);
    VAR
      CRMSalesorderdetail@1007 : Record 5354;
      SalesLine@1004 : Record 37;
    BEGIN
      // If any of the products on the lines are not found in NAV, err
      CRMSalesorderdetail.SETRANGE(SalesOrderId,CRMSalesorder.SalesOrderId); // Get all sales order lines

      IF CRMSalesorderdetail.FINDSET THEN BEGIN
        REPEAT
          InitializeSalesOrderLine(CRMSalesorderdetail,SalesHeader,SalesLine);
          SalesLine.INSERT;
          IF SalesLine."Qty. to Assemble to Order" <> 0 THEN
            SalesLine.VALIDATE("Qty. to Assemble to Order");
        UNTIL CRMSalesorderdetail.NEXT = 0;
      END ELSE BEGIN
        SalesLine.VALIDATE("Document Type",SalesHeader."Document Type");
        SalesLine.VALIDATE("Document No.",SalesHeader."No.");
      END;

      SalesLine.InsertFreightLine(CRMSalesorder.FreightAmount);
    END;

    [External]
    PROCEDURE CreateExtendedDescriptionOrderLines@5(SalesHeader@1000 : Record 36;FullDescription@1001 : Text);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      WHILE STRLEN(FullDescription) > 0 DO BEGIN
        InitNewSalesLine(SalesHeader,SalesLine);

        SalesLine.VALIDATE(Description,COPYSTR(FullDescription,1,MAXSTRLEN(SalesLine.Description)));
        SalesLine.INSERT;
        FullDescription := COPYSTR(FullDescription,MAXSTRLEN(SalesLine.Description) + 1);
      END;
    END;

    PROCEDURE CRMIsCoupledToValidRecord@9(CRMSalesorder@1002 : Record 5353;NAVTableID@1001 : Integer) : Boolean;
    VAR
      CRMIntegrationManagement@1000 : Codeunit 5330;
      CRMCouplingManagement@1003 : Codeunit 5331;
    BEGIN
      EXIT(CRMIntegrationManagement.IsCRMIntegrationEnabled AND
        CRMCouplingManagement.IsRecordCoupledToNAV(CRMSalesorder.SalesOrderId,NAVTableID) AND
        CoupledSalesHeaderExists(CRMSalesorder));
    END;

    [External]
    PROCEDURE GetCRMSalesOrder@19(VAR CRMSalesorder@1001 : Record 5353;YourReference@1000 : Text[35]) : Boolean;
    BEGIN
      CRMSalesorder.SETRANGE(OrderNumber,YourReference);
      EXIT(CRMSalesorder.FINDFIRST)
    END;

    [External]
    PROCEDURE GetCoupledCRMSalesorder@21(SalesHeader@1000 : Record 36;VAR CRMSalesorder@1001 : Record 5353);
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
      CoupledCRMId@1004 : GUID;
    BEGIN
      IF SalesHeader.ISEMPTY THEN
        ERROR(NotCoupledSalesHeaderErr,SalesHeader."No.",CRMProductName.SHORT);

      IF NOT CRMIntegrationRecord.FindIDFromRecordID(SalesHeader.RECORDID,CoupledCRMId) THEN
        ERROR(NotCoupledSalesHeaderErr,SalesHeader."No.",CRMProductName.SHORT);

      IF CRMSalesorder.GET(CoupledCRMId) THEN
        EXIT;

      // If we reached this point, a zombie coupling exists but the sales order most probably was deleted manually by the user.
      CRMIntegrationRecord.RemoveCouplingToCRMID(CoupledCRMId,DATABASE::"Sales Header");
      ERROR(ZombieCouplingErr,PRODUCTNAME.SHORT,CRMProductName.SHORT);
    END;

    [External]
    PROCEDURE GetCoupledCustomer@4(CRMSalesorder@1001 : Record 5353;VAR Customer@1000 : Record 18) : Boolean;
    VAR
      CRMAccount@1004 : Record 5341;
      CRMIntegrationRecord@1002 : Record 5331;
      NAVCustomerRecordId@1003 : RecordID;
      CRMAccountId@1005 : GUID;
    BEGIN
      IF ISNULLGUID(CRMSalesorder.CustomerId) THEN
        ERROR(NoCustomerErr,CannotCreateSalesOrderInNAVTxt,CRMSalesorder.Description,CRMProductName.SHORT);

      // Get the ID of the CRM Account associated to the sales order. Works for both CustomerType(s): account, contact
      IF NOT GetCRMAccountOfCRMSalesOrder(CRMSalesorder,CRMAccount) THEN
        ERROR(NoCRMAccountForOrderErr,CRMSalesorder.Name,CRMSalesorder.CustomerIdType,CRMSalesorder.CustomerId,CRMProductName.SHORT);
      CRMAccountId := CRMAccount.AccountId;

      IF NOT CRMIntegrationRecord.FindRecordIDFromID(CRMAccountId,DATABASE::Customer,NAVCustomerRecordId) THEN
        ERROR(NotCoupledCustomerErr,CannotCreateSalesOrderInNAVTxt,CRMAccount.Name,CRMProductName.SHORT);

      EXIT(Customer.GET(NAVCustomerRecordId));
    END;

    [External]
    PROCEDURE GetCoupledSalesHeader@2(CRMSalesorder@1001 : Record 5353;VAR SalesHeader@1000 : Record 36) : Boolean;
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
      NAVSalesHeaderRecordId@1003 : RecordID;
    BEGIN
      IF ISNULLGUID(CRMSalesorder.SalesOrderId) THEN
        ERROR(NotCoupledCRMSalesOrderErr,CRMSalesorder.OrderNumber,CRMProductName.SHORT);

      // Attempt to find the coupled sales header
      IF NOT CRMIntegrationRecord.FindRecordIDFromID(CRMSalesorder.SalesOrderId,DATABASE::"Sales Header",NAVSalesHeaderRecordId) THEN
        ERROR(NotCoupledCRMSalesOrderErr,CRMSalesorder.OrderNumber,CRMProductName.SHORT);

      IF SalesHeader.GET(NAVSalesHeaderRecordId) THEN
        EXIT(TRUE);

      // If we reached this point, a zombie coupling exists but the sales order most probably was deleted manually by the user.
      CRMIntegrationRecord.RemoveCouplingToCRMID(CRMSalesorder.SalesOrderId,DATABASE::"Sales Header");
      ERROR(ZombieCouplingErr,PRODUCTNAME.SHORT,CRMProductName.SHORT);
    END;

    [External]
    PROCEDURE GetCRMAccountOfCRMSalesOrder@11(CRMSalesorder@1002 : Record 5353;VAR CRMAccount@1000 : Record 5341) : Boolean;
    VAR
      CRMContact@1001 : Record 5342;
    BEGIN
      IF CRMSalesorder.CustomerIdType = CRMSalesorder.CustomerIdType::account THEN
        EXIT(CRMAccount.GET(CRMSalesorder.CustomerId));

      IF CRMSalesorder.CustomerIdType = CRMSalesorder.CustomerIdType::contact THEN
        IF CRMContact.GET(CRMSalesorder.CustomerId) THEN
          EXIT(CRMAccount.GET(CRMContact.ParentCustomerId));
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE GetCRMContactOfCRMSalesOrder@17(CRMSalesorder@1002 : Record 5353;VAR CRMContact@1000 : Record 5342) : Boolean;
    BEGIN
      IF CRMSalesorder.CustomerIdType = CRMSalesorder.CustomerIdType::contact THEN
        EXIT(CRMContact.GET(CRMSalesorder.CustomerId));
    END;

    LOCAL PROCEDURE InitNewSalesLine@32(SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    BEGIN
      SalesLine.INIT;
      SalesLine.VALIDATE("Document Type",SalesHeader."Document Type");
      SalesLine.VALIDATE("Document No.",SalesHeader."No.");
      LastSalesLineNo := LastSalesLineNo + 10000;
      SalesLine.VALIDATE("Line No.",LastSalesLineNo);
    END;

    LOCAL PROCEDURE InitializeSalesOrderLine@18(CRMSalesorderdetail@1003 : Record 5354;SalesHeader@1000 : Record 36;VAR SalesLine@1002 : Record 37);
    VAR
      CRMProduct@1004 : Record 5348;
      TypeHelper@1005 : Codeunit 10;
      CRMSalesOrderLineDescription@1001 : Text;
    BEGIN
      InitNewSalesLine(SalesHeader,SalesLine);

      IF ISNULLGUID(CRMSalesorderdetail.ProductId) THEN
        InitializeWriteInOrderLine(SalesLine)
      ELSE BEGIN
        CRMProduct.GET(CRMSalesorderdetail.ProductId);
        CRMProduct.TESTFIELD(StateCode,CRMProduct.StateCode::Active);
        CASE CRMProduct.ProductTypeCode OF
          CRMProduct.ProductTypeCode::SalesInventory:
            InitializeSalesOrderLineFromItem(CRMProduct,SalesLine);
          CRMProduct.ProductTypeCode::Services:
            InitializeSalesOrderLineFromResource(CRMProduct,SalesLine);
          ELSE
            ERROR(UnexpectedProductTypeErr,CannotCreateSalesOrderInNAVTxt,CRMProduct.ProductNumber);
        END;
      END;
      CRMSalesOrderLineDescription := TypeHelper.GetBlobString(CRMSalesorderdetail,CRMSalesorderdetail.FIELDNO(Description));
      IF CRMSalesOrderLineDescription = '' THEN
        CRMSalesOrderLineDescription := CRMSalesorderdetail.ProductDescription;
      SetLineDescription(SalesHeader,SalesLine,CRMSalesOrderLineDescription);

      SalesLine.VALIDATE(Quantity,CRMSalesorderdetail.Quantity);
      SalesLine.VALIDATE("Unit Price",CRMSalesorderdetail.PricePerUnit);
      SalesLine.VALIDATE(Amount,CRMSalesorderdetail.BaseAmount);
      SalesLine.VALIDATE(
        "Line Discount Amount",
        CRMSalesorderdetail.Quantity * CRMSalesorderdetail.VolumeDiscountAmount +
        CRMSalesorderdetail.ManualDiscountAmount);
    END;

    LOCAL PROCEDURE InitializeSalesOrderLineFromItem@8(CRMProduct@1001 : Record 5348;VAR SalesLine@1002 : Record 37);
    VAR
      CRMIntegrationRecord@1003 : Record 5331;
      Item@1005 : Record 27;
      NAVItemRecordID@1000 : RecordID;
    BEGIN
      // Attempt to find the coupled item
      IF NOT CRMIntegrationRecord.FindRecordIDFromID(CRMProduct.ProductId,DATABASE::Item,NAVItemRecordID) THEN
        ERROR(NotCoupledCRMProductErr,CannotCreateSalesOrderInNAVTxt,CRMProduct.Name,CRMProductName.SHORT);

      IF NOT Item.GET(NAVItemRecordID) THEN
        ERROR(ItemDoesNotExistErr,CannotCreateSalesOrderInNAVTxt,CRMProduct.ProductNumber);
      SalesLine.VALIDATE(Type,SalesLine.Type::Item);
      SalesLine.VALIDATE("No.",Item."No.");
    END;

    LOCAL PROCEDURE InitializeSalesOrderLineFromResource@6(CRMProduct@1001 : Record 5348;VAR SalesLine@1002 : Record 37);
    VAR
      CRMIntegrationRecord@1003 : Record 5331;
      Resource@1005 : Record 156;
      NAVResourceRecordID@1000 : RecordID;
    BEGIN
      // Attempt to find the coupled resource
      IF NOT CRMIntegrationRecord.FindRecordIDFromID(CRMProduct.ProductId,DATABASE::Resource,NAVResourceRecordID) THEN
        ERROR(NotCoupledCRMResourceErr,CannotCreateSalesOrderInNAVTxt,CRMProduct.Name,CRMProductName.SHORT);

      IF NOT Resource.GET(NAVResourceRecordID) THEN
        ERROR(ResourceDoesNotExistErr,CannotCreateSalesOrderInNAVTxt,CRMProduct.ProductNumber);
      SalesLine.VALIDATE(Type,SalesLine.Type::Resource);
      SalesLine.VALIDATE("No.",Resource."No.");
    END;

    LOCAL PROCEDURE InitializeWriteInOrderLine@12(VAR SalesLine@1001 : Record 37);
    VAR
      SalesSetup@1000 : Record 311;
      SalesHeader@1002 : Record 36;
    BEGIN
      SalesSetup.GET;
      IF SalesSetup."Write-in Product No." = '' THEN BEGIN
        SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
        SENDTRACETAG('000083C',CrmTelemetryCategoryTok,VERBOSITY::Normal,
          STRSUBSTNO(MisingWriteInProductTelemetryMsg,CRMProductName.SHORT),DATACLASSIFICATION::SystemMetadata);
        ERROR(MissingWriteInProductNoErr,CRMProductName.SHORT,SalesLine."Document Type",SalesHeader."Your Reference");
      END;
      SalesSetup.VALIDATE("Write-in Product No.");
      CASE SalesSetup."Write-in Product Type" OF
        SalesSetup."Write-in Product Type"::Item:
          SalesLine.VALIDATE(Type,SalesLine.Type::Item);
        SalesSetup."Write-in Product Type"::Resource:
          SalesLine.VALIDATE(Type,SalesLine.Type::Resource);
      END;
      SalesLine.VALIDATE("No.",SalesSetup."Write-in Product No.");
    END;

    LOCAL PROCEDURE SetLastBackOfficeSubmit@20(VAR CRMSalesorder@1001 : Record 5353;NewDate@1000 : Date);
    BEGIN
      IF CRMSalesorder.LastBackofficeSubmit <> NewDate THEN BEGIN
        CRMSalesorder.StateCode := CRMSalesorder.StateCode::Active;
        CRMSalesorder.MODIFY(TRUE);
        CRMSalesorder.LastBackofficeSubmit := NewDate;
        CRMSalesorder.MODIFY(TRUE);
        CRMSalesorder.StateCode := CRMSalesorder.StateCode::Submitted;
        CRMSalesorder.MODIFY(TRUE);
      END;
    END;

    BEGIN
    END.
  }
}

