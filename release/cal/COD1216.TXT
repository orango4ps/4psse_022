OBJECT Codeunit 1216 Incoming Doc. with Data. Exch.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    TableNo=130;
    Permissions=TableData 1220=im;
    OnRun=BEGIN
            ProcessWithDataExch(Rec);
            RollbackIfErrors(Rec);

            FIND;
          END;

  }
  CODE
  {
    VAR
      AttachmentErr@1004 : TextConst 'ENU=You must select a file.;NOR=Du m† velge en fil.;SVE=Du m†ste v„lja en fil.';
      AttachmentEmptyErr@1003 : TextConst 'ENU=The file is empty.;NOR=Filen er tom.;SVE=Filen „r tom.';
      SourceErr@1002 : TextConst 'ENU=Failed to prepare the file for data exchange.;NOR=Kan ikke klargj›re filen for datautveksling.;SVE=Det gick inte att f”rbereda filen f”r dataintegration.';
      ProcessFailedErr@1001 : TextConst 'ENU=Failed to process the file with data exchange.;NOR=Kan ikke behandle filen med datautveksling.;SVE=Det gick inte att bearbeta filen med dataintegration.';

    LOCAL PROCEDURE ProcessWithDataExch@31(IncomingDocument@1005 : Record 130);
    VAR
      DataExch@1001 : Record 1220;
      DataExchDef@1000 : Record 1222;
      DataExchangeType@1002 : Record 1213;
    BEGIN
      DataExch.INIT;
      DataExchangeType.GET(IncomingDocument."Data Exchange Type");
      DataExchDef.GET(DataExchangeType."Data Exch. Def. Code");

      IF NOT SetSourceForDataExch(IncomingDocument,DataExch,DataExchDef) THEN
        ERROR(SourceErr);

      DataExch."Related Record" := IncomingDocument.RECORDID;
      IF NOT DataExch.ImportToDataExch(DataExchDef) THEN
        ERROR(ProcessFailedErr);

      DataExchDef.ProcessDataExchange(DataExch);
    END;

    LOCAL PROCEDURE SetSourceForDataExch@127(IncomingDocument@1003 : Record 130;VAR DataExch@1001 : Record 1220;DataExchDef@1000 : Record 1222) : Boolean;
    VAR
      IncomingDocumentAttachment@1002 : Record 133;
      Stream@1004 : InStream;
    BEGIN
      IF DataExchDef."Ext. Data Handling Codeunit" <> 0 THEN BEGIN
        DataExch."Related Record" := IncomingDocument.RECORDID;
        EXIT(DataExch.ImportFileContent(DataExchDef))
      END;

      // if no external data handling, use the attachments
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      IncomingDocumentAttachment.SETRANGE(Default,TRUE);
      IF NOT IncomingDocumentAttachment.FINDFIRST THEN
        ERROR(AttachmentErr);

      IncomingDocumentAttachment.CALCFIELDS(Content);
      IF NOT IncomingDocumentAttachment.Content.HASVALUE THEN
        ERROR(AttachmentEmptyErr);

      IncomingDocumentAttachment.Content.CREATEINSTREAM(Stream);
      DataExch.InsertRec(IncomingDocumentAttachment.Name,Stream,DataExchDef.Code);
      DataExch.VALIDATE("Incoming Entry No.",IncomingDocument."Entry No.");
      DataExch.MODIFY(TRUE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE RollbackIfErrors@1(VAR IncomingDocument@1001 : Record 130);
    VAR
      ErrorMessage@1000 : Record 700;
      TempErrorMessage@1002 : TEMPORARY Record 700;
    BEGIN
      ErrorMessage.SetContext(IncomingDocument);
      IF NOT ErrorMessage.HasErrors(FALSE) THEN
        EXIT;

      // rollback if processing errors - preserve the errors
      ErrorMessage.SETRANGE("Context Record ID",IncomingDocument.RECORDID);
      ErrorMessage.CopyToTemp(TempErrorMessage);
      IncomingDocument.SaveErrorMessages(TempErrorMessage);

      // force rollback (errors will be restored in IncomingDocument)
      ERROR('');
    END;

    BEGIN
    END.
  }
}

