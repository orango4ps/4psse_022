OBJECT Codeunit 11012872 Plant Maintenance Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100529000 : TextConst 'DEU=Enddatum bis einschl. unbekannt aktualisieren. Erstellen/aktualisieren Wartungsvertr„ge nicht m”glich.;ENU=End Date update to unknown, create/update maintenace arrangements not possible;NLD=Einddatum bijwerken t/m onbekend, aanmaken/bijwerken onderhoudafspraken niet mogelijk';
      Text002@1100529001 : TextConst 'DEU=von %1 ''%2'' darf nicht leer sein;ENU=of %1 ''%2'' may no be empty;NLD=van %1 ''%2'' mag niet leeg zijn';
      Text003@1100529002 : TextConst 'DEU=Fehler festgestellt, anzeigen?;ENU=Errors detected, view these?;NLD=Er zijn foutmeldingen geconstateerd, tonen?';
      Text004@1100529004 : TextConst 'DEU=Erstellte Wartungsvorschlagsnr.: %1;ENU=Created Maintenance Proposal No.: %1;NLD=Aangemaakt onderhoudsvoorstelnr.: %1';
      Text005@1100529003 : TextConst 'DEU=Kein Wartungsvorschlag erstellt;ENU=No Maintenance Proposal created;NLD=Geen onderhoudsvoorstel aangemaakt;SVE=Inget underh†llsf”rslag har skapats';

    PROCEDURE GetPlantNumberMaintenanceSchemes@1100528801(IPlantType@1100528800 : Code[20];IPlantNo@1100528801 : Code[10];VAR OPlantMaintenanceScheme@1100528802 : Record 11072677) : Boolean;
    VAR
      PlantMaintenanceScheme@1100528803 : Record 11072677;
    BEGIN
      PlantMaintenanceScheme.SETRANGE("Plant Type", IPlantType);
      PlantMaintenanceScheme.SETRANGE("Plant No.", IPlantNo);
      IF PlantMaintenanceScheme.FINDSET THEN BEGIN
        REPEAT
          OPlantMaintenanceScheme.GET(PlantMaintenanceScheme."Plant Type", PlantMaintenanceScheme."Plant No.", PlantMaintenanceScheme."Maintenance Scheme");
          OPlantMaintenanceScheme.MARK(TRUE)
        UNTIL PlantMaintenanceScheme.NEXT = 0;
        OPlantMaintenanceScheme.MARKEDONLY(TRUE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetApplicableActivities@1100528810(VAR OPlantMaintenanceSchemeVersionLine@1100528804 : TEMPORARY Record 11072675;ILevel@1100528803 : 'Maintenance Scheme,Plant Type,Plant Number';IPlantType@1100528805 : Code[20];IPlantNo@1100528802 : Code[20];IMaintenanceScheme@1100528801 : Code[20];IReferenceDate@1100528800 : Date;IncludeCancelled@1100528811 : Boolean;PlantCompany@1100529000 : Text);
    BEGIN
      GetPlantMaintenanceSchemeLines(OPlantMaintenanceSchemeVersionLine, IMaintenanceScheme, IReferenceDate, PlantCompany);
      GetAdditionalPlantMaintenanceSchemeLines(  OPlantMaintenanceSchemeVersionLine, ILevel, IPlantType, IPlantNo, IMaintenanceScheme, IReferenceDate, PlantCompany);
      IF NOT IncludeCancelled THEN
        DeleteCancelledPlantMaintSchemeVersionLines(OPlantMaintenanceSchemeVersionLine, ILevel, IPlantType, IPlantNo, IMaintenanceScheme, IReferenceDate, PlantCompany);
    END;

    PROCEDURE GetApplicableInspectionLines@1100528809(VAR OPlantInspectionLine@1100528804 : TEMPORARY Record 11072684;ILevel@1100528803 : 'Base Inspection List,Plant Type,Plant Number';IPlantType@1100528810 : Code[20];IPlantNo@1100528802 : Code[20];IMaintenanceScheme@1100528801 : Code[20];IReferenceDate@1100528800 : Date;IBaseInspectionList@1100528812 : Code[20];IncludeCancelled@1100528811 : Boolean;PlantCompany@1100529000 : Text);
    BEGIN
      GetBasePlantInspectionListLines(OPlantInspectionLine, IBaseInspectionList, IReferenceDate, PlantCompany);
      GetAdditionalBaseInspectionListLines(OPlantInspectionLine, ILevel, IPlantType, IPlantNo, IMaintenanceScheme, IBaseInspectionList, IReferenceDate, PlantCompany);
      IF NOT IncludeCancelled THEN
        DeleteCancelledPlantInspectionListLines(OPlantInspectionLine, ILevel, IPlantType, IPlantNo, IMaintenanceScheme, IBaseInspectionList, IReferenceDate, PlantCompany);
    END;

    LOCAL PROCEDURE GetPlantMaintenanceSchemeLines@1100528811(VAR OPlantMaintenanceSchemeVersionLine@1100528804 : TEMPORARY Record 11072675;IMaintenanceScheme@1100528801 : Code[20];IReferenceDate@1100528800 : Date;PlantCompany@1100529000 : Text);
    VAR
      PlantMaintenanceSchemeVersionLine@1100528802 : Record 11072675;
      ApplicableIndexDate@1100528803 : Date;
    BEGIN
      IF GetApplicableMaintenanceSchemeIndexDate('', IMaintenanceScheme, IReferenceDate, ApplicableIndexDate, 0, PlantCompany) THEN BEGIN
        IF PlantCompany <> '' THEN
          PlantMaintenanceSchemeVersionLine.CHANGECOMPANY(PlantCompany);
        PlantMaintenanceSchemeVersionLine.SETRANGE(Level, 0);
        PlantMaintenanceSchemeVersionLine.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
        PlantMaintenanceSchemeVersionLine.SETRANGE("Index Date", ApplicableIndexDate);
        IF PlantMaintenanceSchemeVersionLine.FINDSET THEN BEGIN
          REPEAT
            OPlantMaintenanceSchemeVersionLine.INIT;
            OPlantMaintenanceSchemeVersionLine.TRANSFERFIELDS(PlantMaintenanceSchemeVersionLine);
            OPlantMaintenanceSchemeVersionLine.INSERT;
          UNTIL PlantMaintenanceSchemeVersionLine.NEXT = 0;
        END;
      END
    END;

    PROCEDURE GetBaseInspectionListByPlantNumber@1100528816(IPlantType@1100528800 : Code[20];IPlantNo@1100528801 : Code[10];IMaintenanceScheme@1100528802 : Code[20];PlantCompany@1100529000 : Text) : Code[20];
    VAR
      PlantMaintenanceScheme@1100528803 : Record 11072677;
    BEGIN
      IF PlantCompany <> '' THEN
        PlantMaintenanceScheme.CHANGECOMPANY(PlantCompany);
      IF PlantMaintenanceScheme.GET(IPlantType, IPlantNo, IMaintenanceScheme) THEN
        EXIT(PlantMaintenanceScheme."Base Inspection List");
      EXIT('');
    END;

    LOCAL PROCEDURE GetBasePlantInspectionListLines@1100528812(VAR OPlantInspectionLine@1100528804 : TEMPORARY Record 11072684;IBaseInspectionList@1100528801 : Code[20];IReferenceDate@1100528800 : Date;PlantCompany@1100529000 : Text);
    VAR
      PlantInspectionLine@1100528802 : Record 11072684;
      ApplicableIndexDate@1100528803 : Date;
    BEGIN
      IF GetApplicableBaseInspectionListIndexDate('', IBaseInspectionList, IReferenceDate, ApplicableIndexDate, 0, '', PlantCompany) THEN BEGIN
        IF PlantCompany <> '' THEN
          PlantInspectionLine.CHANGECOMPANY(PlantCompany);
        PlantInspectionLine.SETRANGE(Level, 0);
        PlantInspectionLine.SETRANGE("Base Inspection List", IBaseInspectionList);
        PlantInspectionLine.SETRANGE("Index Date", ApplicableIndexDate);
        IF PlantInspectionLine.FINDSET THEN BEGIN
          REPEAT
            OPlantInspectionLine.INIT;
            OPlantInspectionLine.TRANSFERFIELDS(PlantInspectionLine);
            OPlantInspectionLine.INSERT;
          UNTIL PlantInspectionLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE GetApplicableMaintenanceSchemeIndexDate@1100528813(IPlantType@1100528806 : Code[20];IMaintenanceScheme@1100528800 : Code[20];IReferenceDate@1100528801 : Date;VAR IndexDate@1100528803 : Date;IndexDateLevel@1100528805 : 'Maintenance Scheme,Plant Type,Plant Number';PlantCompany@1100529000 : Text) : Boolean;
    VAR
      PlantMaintenanceSchemeVersion@1100528802 : Record 11072674;
      Level@1100528804 : 'Maintenance Scheme,Plant Type,Plant Number';
    BEGIN
      IF PlantCompany <> '' THEN
        PlantMaintenanceSchemeVersion.CHANGECOMPANY(PlantCompany);
      PlantMaintenanceSchemeVersion.SETRANGE(Level, IndexDateLevel);
      PlantMaintenanceSchemeVersion.SETRANGE(Cancelled, FALSE);
      PlantMaintenanceSchemeVersion.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
      IF IndexDateLevel = 2 THEN
       PlantMaintenanceSchemeVersion.SETRANGE("Plant Type", IPlantType);
      PlantMaintenanceSchemeVersion.SETFILTER("Index Date", '<=%1', IReferenceDate);
      IF PlantMaintenanceSchemeVersion.FINDLAST THEN BEGIN
        IndexDate := PlantMaintenanceSchemeVersion."Index Date";
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetApplicableBaseInspectionListIndexDate@1100528814(IPlantType@1100528806 : Code[20];IBaseInspectionList@1100528800 : Code[20];IReferenceDate@1100528801 : Date;VAR IndexDate@1100528803 : Date;IndexDateLevel@1100528805 : 'Base Inspection List,Plant Type,Plant Number';IMaintenanceScheme@1100528808 : Code[20];PlantCompany@1100529000 : Text) : Boolean;
    VAR
      PlantInspectionVersion@1100528802 : Record 11072682;
      Level@1100528804 : 'Base Inspection List,Plant Type,Plant Number';
    BEGIN
      IF PlantCompany <> '' THEN
        PlantInspectionVersion.CHANGECOMPANY(PlantCompany);
      PlantInspectionVersion.SETRANGE(Level, IndexDateLevel);
      PlantInspectionVersion.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
      PlantInspectionVersion.SETRANGE("Base Inspection List", IBaseInspectionList);
      IF IndexDateLevel = 2 THEN
       PlantInspectionVersion.SETRANGE("Plant Type", IPlantType);
      PlantInspectionVersion.SETFILTER("Index Date", '<=%1', IReferenceDate);
      IF PlantInspectionVersion.FINDLAST THEN BEGIN
        IndexDate := PlantInspectionVersion."Index Date";
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetAdditionalPlantMaintenanceSchemeLines@1100528806(VAR OPlantMaintenanceSchemeVersionLine@1100528800 : Record 11072675;ILevel@1100528801 : 'Maintenance Scheme,Plant Type,Plant Number';IPlantType@1100528806 : Code[20];IPlantNo@1100528802 : Code[20];IMaintenanceScheme@1100528803 : Code[20];IReferenceDate@1100528804 : Date;PlantCompany@1100529000 : Text);
    VAR
      PlantMaintenanceSchemeVersionLine@1100528805 : Record 11072675;
      Level@1100528807 : 'Maintenance Scheme,Plant Type,Plant Number';
      ApplicableIndexDate@1100528809 : Date;
    BEGIN
      IF PlantCompany <> '' THEN
        PlantMaintenanceSchemeVersionLine.CHANGECOMPANY(PlantCompany);
      IF ILevel = ILevel::"Plant Number" THEN BEGIN
        ApplicableIndexDate := 0D;
        IF GetApplicableMaintenanceSchemeIndexDate(IPlantType, IMaintenanceScheme, IReferenceDate, ApplicableIndexDate, ILevel, PlantCompany) THEN BEGIN
          PlantMaintenanceSchemeVersionLine.SETRANGE(Level, ILevel);
          PlantMaintenanceSchemeVersionLine.SETRANGE("Plant Type", IPlantType);
          PlantMaintenanceSchemeVersionLine.SETRANGE("Plant No.", IPlantNo);
          PlantMaintenanceSchemeVersionLine.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
          PlantMaintenanceSchemeVersionLine.SETRANGE("Index Date", ApplicableIndexDate);
          IF PlantMaintenanceSchemeVersionLine.FINDSET THEN BEGIN
            REPEAT
              OPlantMaintenanceSchemeVersionLine.INIT;
              OPlantMaintenanceSchemeVersionLine.TRANSFERFIELDS(PlantMaintenanceSchemeVersionLine);
              OPlantMaintenanceSchemeVersionLine.INSERT;
            UNTIL PlantMaintenanceSchemeVersionLine.NEXT = 0;
          END;
        END;
      END;
      IF (ILevel = ILevel::"Plant Number") OR (ILevel = ILevel::"Plant Type") THEN BEGIN
        ApplicableIndexDate := 0D;
        IF GetApplicableMaintenanceSchemeIndexDate(IPlantType, IMaintenanceScheme, IReferenceDate, ApplicableIndexDate, 1, PlantCompany) THEN BEGIN
          PlantMaintenanceSchemeVersionLine.RESET;
          PlantMaintenanceSchemeVersionLine.SETRANGE(Level, 1);
          PlantMaintenanceSchemeVersionLine.SETRANGE("Plant Type", IPlantType);
          PlantMaintenanceSchemeVersionLine.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
          PlantMaintenanceSchemeVersionLine.SETRANGE("Index Date", ApplicableIndexDate);
          IF PlantMaintenanceSchemeVersionLine.FINDSET THEN BEGIN
            REPEAT
              OPlantMaintenanceSchemeVersionLine.INIT;
              OPlantMaintenanceSchemeVersionLine.TRANSFERFIELDS(PlantMaintenanceSchemeVersionLine);
              OPlantMaintenanceSchemeVersionLine.INSERT;
            UNTIL PlantMaintenanceSchemeVersionLine.NEXT = 0;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetAdditionalBaseInspectionListLines@1100528815(VAR OPlantInspectionLine@1100528800 : Record 11072684;ILevel@1100528801 : 'Base Inspection List,Plant Type,Plant Number';IPlantType@1100528808 : Code[20];IPlantNo@1100528802 : Code[20];IMaintenanceScheme@1100528803 : Code[20];IBaseInspectionList@1100528806 : Code[20];IReferenceDate@1100528804 : Date;PlantCompany@1100529000 : Text);
    VAR
      PlantInspectionLine@1100528805 : Record 11072684;
      Level@1100528807 : 'Base Inpection List,Plant Type,Plant Number';
      ApplicableIndexDate@1100528809 : Date;
    BEGIN
      IF PlantCompany <> '' THEN
        PlantInspectionLine.CHANGECOMPANY(PlantCompany);
      IF ILevel = ILevel::"Plant Number" THEN BEGIN
        ApplicableIndexDate := 0D;
        IF GetApplicableBaseInspectionListIndexDate(
          IPlantType, IBaseInspectionList, IReferenceDate, ApplicableIndexDate, ILevel, IMaintenanceScheme, PlantCompany)
        THEN BEGIN
          PlantInspectionLine.SETRANGE(Level, ILevel);
          PlantInspectionLine.SETRANGE("Plant Type", IPlantType);
          PlantInspectionLine.SETRANGE("Plant No.", IPlantNo);
          PlantInspectionLine.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
          PlantInspectionLine.SETRANGE("Index Date", ApplicableIndexDate);
          IF PlantInspectionLine.FINDSET THEN BEGIN
            REPEAT
              OPlantInspectionLine.INIT;
              OPlantInspectionLine.TRANSFERFIELDS(PlantInspectionLine);
              OPlantInspectionLine.INSERT;
            UNTIL PlantInspectionLine.NEXT = 0;
          END;
        END;
      END;
      IF (ILevel = ILevel::"Plant Number") OR (ILevel = ILevel::"Plant Type") THEN BEGIN
        ApplicableIndexDate := 0D;
        IF GetApplicableBaseInspectionListIndexDate(
          IPlantType, IBaseInspectionList, IReferenceDate, ApplicableIndexDate, 1, IMaintenanceScheme, PlantCompany)
        THEN BEGIN
          PlantInspectionLine.RESET;
          PlantInspectionLine.SETRANGE(Level, 1);
          PlantInspectionLine.SETRANGE("Plant Type", IPlantType);
          PlantInspectionLine.SETRANGE("Maintenance Scheme", IMaintenanceScheme);
          PlantInspectionLine.SETRANGE("Index Date", ApplicableIndexDate);
          IF PlantInspectionLine.FINDSET THEN BEGIN
            REPEAT
              OPlantInspectionLine.INIT;
              OPlantInspectionLine.TRANSFERFIELDS(PlantInspectionLine);
              OPlantInspectionLine.INSERT;
            UNTIL PlantInspectionLine.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE CopyBaseInspectionList@1100528624(FromBaseInspectionList@1100528600 : Code[20];FromIndexDate@1100528601 : Date;ToBaseInspectionList@1100528602 : Code[20];ToBaseInspectionListDescr@1100528611 : Text[50];ToIndexDate@1100528609 : Date) : Boolean;
    VAR
      BasePlantInspectionList@1100528603 : Record 11072680;
      BasePlantInspectionList2@1100528604 : Record 11072680;
      PlantInspectionVersion@1100528605 : Record 11072682;
      PlantInspectionVersion2@1100528606 : Record 11072682;
      PlantInspectionLine@1100528607 : Record 11072684;
      PlantInspectionLine2@1100528608 : Record 11072684;
    BEGIN
      IF (FromBaseInspectionList = '') OR (ToBaseInspectionList = '') OR (FromIndexDate = 0D) OR (ToIndexDate = 0D) THEN
        EXIT(FALSE);
      IF (FromBaseInspectionList = ToBaseInspectionList) AND (FromIndexDate = ToIndexDate) THEN
        EXIT(FALSE);
      BasePlantInspectionList.GET(FromBaseInspectionList);
      IF FromBaseInspectionList <> ToBaseInspectionList THEN BEGIN
        BasePlantInspectionList2 := BasePlantInspectionList;
        BasePlantInspectionList2.Code := ToBaseInspectionList;
        IF ToBaseInspectionListDescr <> '' THEN
          BasePlantInspectionList2.Description := ToBaseInspectionListDescr;
        BasePlantInspectionList2.INSERT(TRUE);
      END;
      PlantInspectionVersion.SETRANGE(Level, PlantInspectionVersion.Level::"Base Inspection List");
      PlantInspectionVersion.SETRANGE("Base Inspection List", FromBaseInspectionList);
      PlantInspectionVersion.SETRANGE("Index Date", FromIndexDate);
      IF PlantInspectionVersion.FINDLAST THEN BEGIN
        PlantInspectionVersion2 := PlantInspectionVersion;
        PlantInspectionVersion2."Base Inspection List" := ToBaseInspectionList;
        PlantInspectionVersion2."Index Date" := ToIndexDate;
        PlantInspectionVersion2.INSERT(TRUE);

        PlantInspectionLine.SETRANGE(Level, PlantInspectionVersion.Level);
        PlantInspectionLine.SETRANGE("Base Inspection List", PlantInspectionVersion."Base Inspection List");
        PlantInspectionLine.SETRANGE("Index Date", PlantInspectionVersion."Index Date");
        IF PlantInspectionLine.FINDSET THEN BEGIN
          REPEAT
            PlantInspectionLine2 := PlantInspectionLine;
            PlantInspectionLine2."Base Inspection List" := ToBaseInspectionList;
            PlantInspectionLine2."Index Date" := ToIndexDate;
            PlantInspectionLine2.INSERT(TRUE);
          UNTIL PlantInspectionLine.NEXT = 0;
        END;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CopyStandardMaintenanceScheme@1100528625(FromMaintenanceScheme@1100528600 : Code[20];FromIndexDate@1100528601 : Date;ToMaintenanceScheme@1100528602 : Code[20];ToMaintenanceSchemeDescr@1100529000 : Text[50];ToIndexDate@1100528609 : Date) : Boolean;
    VAR
      PlantStndMaintenanceScheme@1100528603 : Record 11072673;
      PlantStndMaintenanceScheme2@1100528604 : Record 11072673;
      PlantMaintSchemeVersion@1100528605 : Record 11072674;
      PlantMaintSchemeVersion2@1100528606 : Record 11072674;
      PlantMaintSchemeVerLine@1100528607 : Record 11072675;
      PlantMaintSchemeVerLine2@1100528608 : Record 11072675;
    BEGIN
      IF (FromMaintenanceScheme = '') OR (ToMaintenanceScheme = '') OR (FromIndexDate = 0D) OR (ToIndexDate = 0D) THEN
        EXIT(FALSE);
      IF (FromMaintenanceScheme = ToMaintenanceScheme) AND (FromIndexDate = ToIndexDate) THEN
        EXIT(FALSE);
      PlantStndMaintenanceScheme.GET(FromMaintenanceScheme);
      IF FromMaintenanceScheme <> ToMaintenanceScheme THEN BEGIN
        PlantStndMaintenanceScheme2 := PlantStndMaintenanceScheme;
        PlantStndMaintenanceScheme2.Code := ToMaintenanceScheme;
        IF ToMaintenanceSchemeDescr <> '' THEN
          PlantStndMaintenanceScheme2.Description := ToMaintenanceSchemeDescr;
        PlantStndMaintenanceScheme2.INSERT(TRUE);
      END;
      PlantMaintSchemeVersion.SETRANGE(Level, PlantMaintSchemeVersion.Level::"Maintenance Scheme");
      PlantMaintSchemeVersion.SETRANGE("Maintenance Scheme", FromMaintenanceScheme);
      PlantMaintSchemeVersion.SETRANGE("Index Date", FromIndexDate);
      IF PlantMaintSchemeVersion.FINDLAST THEN BEGIN
        PlantMaintSchemeVersion2 := PlantMaintSchemeVersion;
        PlantMaintSchemeVersion2."Maintenance Scheme" := ToMaintenanceScheme;
        PlantMaintSchemeVersion2."Index Date" := ToIndexDate;
        PlantMaintSchemeVersion2.INSERT(TRUE);

        PlantMaintSchemeVerLine.SETRANGE(Level, PlantMaintSchemeVersion.Level);
        PlantMaintSchemeVerLine.SETRANGE("Maintenance Scheme", PlantMaintSchemeVersion."Maintenance Scheme");
        PlantMaintSchemeVerLine.SETRANGE("Index Date", PlantMaintSchemeVersion."Index Date");
        IF PlantMaintSchemeVerLine.FINDSET THEN BEGIN
          REPEAT
            PlantMaintSchemeVerLine2 := PlantMaintSchemeVerLine;
            PlantMaintSchemeVerLine2."Maintenance Scheme" := ToMaintenanceScheme;
            PlantMaintSchemeVerLine2.VALIDATE("Index Date", ToIndexDate);
            PlantMaintSchemeVerLine2.INSERT(TRUE);
          UNTIL PlantMaintSchemeVerLine.NEXT = 0;
        END;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE DeleteCancelledPlantMaintSchemeVersionLines@1100528800(VAR OPlantMaintenanceSchemeVersionLine@1100528800 : TEMPORARY Record 11072675;ILevel@1100528805 : 'Maintenance Scheme,Plant Type,Plant Number';IPlantType@1100528804 : Code[20];IPlantNo@1100528803 : Code[20];IMaintenanceScheme@1100528802 : Code[20];IReferenceDate@1100528801 : Date;PlantCompany@1100529000 : Text);
    VAR
      ApplicableIndexDate@1100528807 : Date;
      DummyCancellationLevel@1100528808 : Option;
    BEGIN
      IF OPlantMaintenanceSchemeVersionLine.FINDSET THEN BEGIN
        REPEAT
          IF GetApplicableMaintenanceSchemeIndexDate(IPlantType, IMaintenanceScheme, IReferenceDate, ApplicableIndexDate, ILevel, PlantCompany) THEN BEGIN
            IF OPlantMaintenanceSchemeVersionLine.IsCancelled(
              ILevel, IPlantType, IPlantNo, IMaintenanceScheme, ApplicableIndexDate, DummyCancellationLevel, PlantCompany)
            THEN
              OPlantMaintenanceSchemeVersionLine.DELETE;
          END;
        UNTIL OPlantMaintenanceSchemeVersionLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE DeleteCancelledPlantInspectionListLines@1100528808(VAR OPlantInspectionLine@1100528800 : TEMPORARY Record 11072684;ILevel@1100528805 : 'Maintenance Scheme,Plant Type,Plant Number';IPlantType@1100528804 : Code[20];IPlantNo@1100528803 : Code[20];IMaintenanceScheme@1100528802 : Code[20];IBaseInspectionList@1100528807 : Code[20];IReferenceDate@1100528801 : Date;PlantCompany@1100529000 : Text);
    VAR
      ApplicableIndexDate@1100528808 : Date;
      DummyCancellationLevel@1100528809 : Option;
    BEGIN
      IF OPlantInspectionLine.FINDSET THEN BEGIN
        REPEAT
          IF GetApplicableBaseInspectionListIndexDate(
            IPlantType, IBaseInspectionList, IReferenceDate, ApplicableIndexDate, ILevel, IMaintenanceScheme, PlantCompany)
          THEN BEGIN
            IF OPlantInspectionLine.IsCancelled(
              ILevel, IPlantType, IPlantNo, IMaintenanceScheme, IBaseInspectionList, ApplicableIndexDate, DummyCancellationLevel, PlantCompany)
            THEN
              OPlantInspectionLine.DELETE;
          END;
        UNTIL OPlantInspectionLine.NEXT = 0;
      END;
    END;

    PROCEDURE GetNoOfServiceOrders@1100528802(PlantType@1100528802 : Code[20];PlantNo@1100528803 : Code[10];Status@1100528800 : Integer;PlantCompany@1100529600 : Text;ServiceCompany@1100529000 : Text) : Integer;
    VAR
      ServiceOrder@1100528801 : Record 11012823;
    BEGIN
      IF (PlantType = '') OR (PlantNo = '') THEN
        EXIT;
      SetFiltersNoOfServiceOrders(PlantType, PlantNo, Status, PlantCompany, ServiceCompany, ServiceOrder);
      EXIT(ServiceOrder.COUNT);
    END;

    PROCEDURE ShowNoOfServiceOrders@1100528803(PlantType@1100528802 : Code[20];PlantNo@1100528801 : Code[10];Status@1100528800 : Integer;PlantCompany@1100529600 : Text;ServiceCompany@1100529000 : Text);
    VAR
      ServiceOrder@1100528804 : Record 11012823;
    BEGIN
      IF (PlantType = '') OR (PlantNo = '') THEN
        EXIT;
      SetFiltersNoOfServiceOrders(PlantType, PlantNo, Status, PlantCompany, ServiceCompany, ServiceOrder);
      PAGE.RUNMODAL(PAGE::"Service-Order List", ServiceOrder);
    END;

    LOCAL PROCEDURE SetFiltersNoOfServiceOrders@1100529012(PlantType@1100529003 : Code[20];PlantNo@1100529002 : Code[10];Status@1100529001 : Integer;PlantCompany@1100529000 : Text;ServiceCompany@1100529004 : Text;VAR ServiceOrder@1100529005 : Record 11012823);
    BEGIN
      IF PlantCompany = '' THEN
        PlantCompany := COMPANYNAME;
      IF ServiceCompany = '' THEN
        ServiceCompany := COMPANYNAME;
      IF (ServiceCompany <> COMPANYNAME) THEN
        ServiceOrder.CHANGECOMPANY(ServiceCompany);
      ServiceOrder.SETRANGE("Plant Type", PlantType);
      ServiceOrder.SETRANGE("Plant Number", PlantNo);
      IF PlantCompany = ServiceCompany THEN
        ServiceOrder.SETRANGE("Plant Company", '')
      ELSE
        ServiceOrder.SETRANGE("Plant Company", PlantCompany);
      IF Status >= 0 THEN
        ServiceOrder.SETRANGE(Status, Status);
    END;

    PROCEDURE CopyMaintHeaderAndLines@1100528602(PlantMaintSchemeVersion@1100528600 : Record 11072674;NewIndexDate@1100528601 : Date;VAR OPlantMaintSchemeVersion@1100528605 : Record 11072674);
    VAR
      PlantMaintSchemeVerLine@1100528603 : Record 11072675;
      PlantMaintSchemeVerLine2@1100528604 : Record 11072675;
      CancelledPlantMaintSchemeLine@1100525000 : Record 11072676;
      CancelledPlantMaintSchemeLine2@1100525001 : Record 11072676;
    BEGIN
      OPlantMaintSchemeVersion := PlantMaintSchemeVersion;
      OPlantMaintSchemeVersion.VALIDATE("Index Date", NewIndexDate);
      OPlantMaintSchemeVersion.INSERT(TRUE);

      PlantMaintSchemeVerLine.SETRANGE(Level, PlantMaintSchemeVersion.Level);
      PlantMaintSchemeVerLine.SETRANGE("Plant Type", PlantMaintSchemeVersion."Plant Type");
      PlantMaintSchemeVerLine.SETRANGE("Plant No.", PlantMaintSchemeVersion."Plant No.");
      PlantMaintSchemeVerLine.SETRANGE("Maintenance Scheme", PlantMaintSchemeVersion."Maintenance Scheme");
      PlantMaintSchemeVerLine.SETRANGE("Index Date", PlantMaintSchemeVersion."Index Date");
      IF PlantMaintSchemeVerLine.FINDSET(TRUE) THEN BEGIN
        REPEAT
          PlantMaintSchemeVerLine2 := PlantMaintSchemeVerLine;
          PlantMaintSchemeVerLine2.VALIDATE("Index Date", OPlantMaintSchemeVersion."Index Date");
          PlantMaintSchemeVerLine2.INSERT(TRUE);
        UNTIL PlantMaintSchemeVerLine.NEXT = 0;
      END;
      IF PlantMaintSchemeVersion.Level IN [PlantMaintSchemeVersion.Level::"Plant Type", PlantMaintSchemeVersion.Level::"Plant Number"] THEN BEGIN
        CancelledPlantMaintSchemeLine.SETRANGE(Level, PlantMaintSchemeVersion.Level);
        CancelledPlantMaintSchemeLine.SETRANGE("Plant Type", PlantMaintSchemeVersion."Plant Type");
        CancelledPlantMaintSchemeLine.SETRANGE("Plant No.", PlantMaintSchemeVersion."Plant No.");
        CancelledPlantMaintSchemeLine.SETRANGE("Maintenance Scheme", PlantMaintSchemeVersion."Maintenance Scheme");
        CancelledPlantMaintSchemeLine.SETRANGE("Index Date", PlantMaintSchemeVersion."Index Date");
        IF CancelledPlantMaintSchemeLine.FINDSET THEN BEGIN
          REPEAT
            CancelledPlantMaintSchemeLine2 := CancelledPlantMaintSchemeLine;
            CancelledPlantMaintSchemeLine2."Index Date" := OPlantMaintSchemeVersion."Index Date";
            CancelledPlantMaintSchemeLine2.INSERT;
          UNTIL CancelledPlantMaintSchemeLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE IndexMaintLinesViaHeader@1100528622(PlantMaintSchemeVersion@1100528600 : Record 11072674;IMaterialPerc@1100528601 : Decimal;ILaborPerc@1100528603 : Decimal;ISubcontrPerc@1100528605 : Decimal;IPlantPerc@1100528604 : Decimal;ISundryPerc@1100528606 : Decimal;IRoundAmounts@1100528607 : Decimal);
    VAR
      PlantMaintSchemeVersionLine@1100528602 : Record 11072675;
    BEGIN
      IF IRoundAmounts = 0 THEN
        IRoundAmounts := 0.01;
      WITH PlantMaintSchemeVersionLine DO BEGIN
        SETRANGE(Level, PlantMaintSchemeVersion.Level);
        SETRANGE("Plant Type", PlantMaintSchemeVersion."Plant Type");
        SETRANGE("Plant No.", PlantMaintSchemeVersion."Plant No.");
        SETRANGE("Maintenance Scheme", PlantMaintSchemeVersion."Maintenance Scheme");
        SETRANGE("Index Date", PlantMaintSchemeVersion."Index Date");
        IF FINDSET(TRUE) THEN BEGIN
          REPEAT
            VALIDATE("Index Date");
            CASE "Cost Type" OF
              "Cost Type"::Labor:
                IF "Rate Code" = '' THEN
                  VALIDATE(Rate, ROUND(Rate * ((100 + ILaborPerc) / 100), IRoundAmounts));
            ELSE
              BEGIN
                CASE "Cost Type" OF
                  "Cost Type"::Material:
                    IF ("Item No." + "Basic Item" + "Trade Item" = '') THEN
                      "Gross Price" := "Gross Price" * ((100 + IMaterialPerc) / 100);
                  "Cost Type"::Subcontracting:
                    "Gross Price" := "Gross Price" * ((100 + ISubcontrPerc) / 100);
                  "Cost Type"::Plant:
                    "Gross Price" := "Gross Price" * ((100 + IPlantPerc) / 100);
                  "Cost Type"::Sundry:
                    "Gross Price" := "Gross Price" * ((100 + ISundryPerc) / 100);
                END;
                VALIDATE("Gross Price", ROUND("Gross Price", IRoundAmounts));
              END;
            END;
            MODIFY(TRUE);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE UpdatePlantNoMaintSchemeArrangements@1100526200(PlantMaintenanceScheme@1100529000 : Record 11072677;EndingDate@1100526203 : Date;ErrorModeInterval@1100528601 : Boolean;UpdateAll@1100528602 : Boolean);
    VAR
      UsedIntervals@1100529004 : Record 11072677;
      TheoreticalMaintenanceDate@1100526202 : Date;
      NewMaintenanceDate@1100529003 : Date;
      IntervalOK@1100528804 : Boolean;
      InclTheoreticalMR@1100529006 : Boolean;
      FirstInFutureDone@1100529001 : Boolean;
      TotalMeterReading@1100529005 : Decimal;
      TotalQuantityMR@1100529002 : Decimal;
    BEGIN
      // Main parts of this process copied from service (T11071692)
      WITH PlantMaintenanceScheme DO BEGIN
        IntervalOK := DetermineAndCheckInterval(PlantMaintenanceScheme, ErrorModeInterval,
          UsedIntervals."Interval Maintenance", UsedIntervals."Interval Meter Reading", UsedIntervals."Specific Meter Reading");
        IF (NOT ErrorModeInterval) AND (NOT IntervalOK) THEN
          EXIT;
        IF EndingDate = 0D THEN
          ERROR(Text001);
        CheckEndingDateAfterExitDate("Plant Type", "Plant No.", EndingDate);
        IF UpdateAll THEN
          DeletePlantNoMaintSchemeArrangements("Plant Type", "Plant No.", "Maintenance Scheme");
        CALCFIELDS("Blocked (Plant Type)", "Blocked (Plant No.)");
        IF "Blocked (Plant Type)" OR "Blocked (Plant No.)" THEN
          EXIT;

        IF (FORMAT(UsedIntervals."Interval Maintenance") <> '') OR (UsedIntervals."Interval Meter Reading" <> 0) THEN BEGIN
          InclTheoreticalMR := (UsedIntervals."Interval Meter Reading" <> 0);
          TheoreticalMaintenanceDate := GetLastTheoreticalMaintenanceDate(PlantMaintenanceScheme, InclTheoreticalMR, TotalMeterReading);
          TotalQuantityMR := TotalMeterReading;
          IF (TheoreticalMaintenanceDate <= EndingDate) AND (TheoreticalMaintenanceDate <> 0D) THEN BEGIN
            REPEAT
              IF (FORMAT(UsedIntervals."Interval Maintenance") <> '')  THEN
                NewMaintenanceDate := GetMaintenanceIntervalNextDate(UsedIntervals."Interval Maintenance", TheoreticalMaintenanceDate)
              ELSE BEGIN
                IF (UsedIntervals."Interval Meter Reading" <> 0) THEN BEGIN
                  NewMaintenanceDate := GetMeterReadingIntervalNextDate(PlantMaintenanceScheme, UsedIntervals."Interval Meter Reading",
                    TheoreticalMaintenanceDate, EndingDate, TotalMeterReading, TotalQuantityMR, FirstInFutureDone);
                END;
              END;
              IF NewMaintenanceDate <= TheoreticalMaintenanceDate THEN
                EXIT;
              IF NewMaintenanceDate <= EndingDate THEN
                InsertPlantNoMaintSchemeArrangement(PlantMaintenanceScheme, NewMaintenanceDate, TotalMeterReading, UsedIntervals);
              TheoreticalMaintenanceDate := NewMaintenanceDate;
            UNTIL TheoreticalMaintenanceDate > EndingDate;
          END;
        END ELSE BEGIN
          IF UsedIntervals."Specific Meter Reading" <> 0 THEN BEGIN
            NewMaintenanceDate := GetSpecialMeterReadingDate(
              PlantMaintenanceScheme, UsedIntervals."Specific Meter Reading", EndingDate);
            IF (NewMaintenanceDate <> 0D) AND (NewMaintenanceDate <= EndingDate) THEN
              InsertPlantNoMaintSchemeArrangement(PlantMaintenanceScheme, NewMaintenanceDate, UsedIntervals."Specific Meter Reading", UsedIntervals);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE DeletePlantNoMaintSchemeArrangements@1100529002(PlantType@1100529000 : Code[20];PlantNo@1100529001 : Code[10];MaintScheme@1100529002 : Code[20]);
    VAR
      PlantMaintenanceArrangement@1100529003 : Record 11126146;
    BEGIN
      WITH PlantMaintenanceArrangement DO BEGIN
        SETCURRENTKEY("Plant Type", "Plant No.", "Maintenance Scheme", "Theoretical Maintenance Date");
        SETRANGE("Plant Type", PlantType);
        SETRANGE("Plant No.", PlantNo);
        SETRANGE("Maintenance Scheme", MaintScheme);
        IF NOT FINDLAST THEN
          EXIT;
        REPEAT
          CALCFIELDS("Maintenance Proposal No.", "Service Order No.");
          IF ("Maintenance Proposal No." <> '') OR ("Service Order No." <> '') OR "Firm Planned" THEN
            EXIT;
          IF NOT Cancelled THEN
            DELETE;
        UNTIL NEXT(-1) = 0;
      END;
    END;

    LOCAL PROCEDURE GetLastTheoreticalMaintenanceDate@1100529005(PlantMaintenanceScheme@1100529000 : Record 11072677;InclTheoreticalMR@1100529005 : Boolean;VAR TotalMeterReadingMaint@1100529004 : Decimal) : Date;
    VAR
      PlantMaintenanceArrangement@1100529001 : Record 11126146;
      ServiceOrder@1100529003 : Record 11012823;
      TheoreticalMaintenanceDate@1100529002 : Date;
    BEGIN
      TheoreticalMaintenanceDate := 0D;
      TotalMeterReadingMaint := 0;
      PlantMaintenanceArrangement.SETCURRENTKEY("Plant Type", "Plant No.", "Maintenance Scheme", "Theoretical Maintenance Date");
      PlantMaintenanceArrangement.SETRANGE("Plant Type", PlantMaintenanceScheme."Plant Type");
      PlantMaintenanceArrangement.SETRANGE("Plant No.", PlantMaintenanceScheme."Plant No.");
      PlantMaintenanceArrangement.SETRANGE("Maintenance Scheme", PlantMaintenanceScheme."Maintenance Scheme");
      IF PlantMaintenanceArrangement.FINDLAST THEN BEGIN
        PlantMaintenanceArrangement.TESTFIELD("Maintenance Week");
        PlantMaintenanceArrangement.CALCFIELDS("Service Order No.", "Service Company");
        IF PlantMaintenanceArrangement."Service Company" <> '' THEN
          ServiceOrder.CHANGECOMPANY(PlantMaintenanceArrangement."Service Company");
        IF NOT ServiceOrder.GET(PlantMaintenanceArrangement."Service Order No.") THEN
          ServiceOrder.INIT;
        IF (PlantMaintenanceScheme."Plan Method" = PlantMaintenanceScheme."Plan Method"::"Theoretical Maintenance Date") OR
           ((ServiceOrder."Starting Date" = 0D) OR (ServiceOrder.Status <= ServiceOrder.Status::"In Process"))
        THEN BEGIN
          TheoreticalMaintenanceDate := PlantMaintenanceArrangement."Theoretical Maintenance Date";
          IF InclTheoreticalMR THEN
            TotalMeterReadingMaint := PlantMaintenanceArrangement."Total Meter Reading Maint.";
        END ELSE BEGIN
          TheoreticalMaintenanceDate := ServiceOrder."Starting Date";
          IF InclTheoreticalMR THEN
            TotalMeterReadingMaint := TotalMeterReadingMaintenance(PlantMaintenanceArrangement, ServiceOrder."Starting Date", ServiceOrder."Ending Date");
        END;
        IF TheoreticalMaintenanceDate = 0D THEN
          TheoreticalMaintenanceDate := DMY2DATE(5, PlantMaintenanceArrangement."Maintenance Week", PlantMaintenanceArrangement."Maintenance Year");
        IF TheoreticalMaintenanceDate < PlantMaintenanceScheme."Starting Date Maintenance" THEN BEGIN
          TheoreticalMaintenanceDate := PlantMaintenanceScheme."Starting Date Maintenance";
          IF InclTheoreticalMR THEN
            TheoreticalMaintenanceDate := TheoreticalMaintenanceDate - 1;
        END;
        IF InclTheoreticalMR AND (TotalMeterReadingMaint < PlantMaintenanceScheme."Starting Total Meter Reading") THEN
          TotalMeterReadingMaint := PlantMaintenanceScheme."Starting Total Meter Reading";
      END ELSE BEGIN
        TheoreticalMaintenanceDate := PlantMaintenanceScheme."Starting Date Maintenance";
        IF InclTheoreticalMR THEN BEGIN
          TheoreticalMaintenanceDate := TheoreticalMaintenanceDate - 1;
          TotalMeterReadingMaint := PlantMaintenanceScheme."Starting Total Meter Reading";
        END;
      END;
      EXIT(TheoreticalMaintenanceDate);
    END;

    LOCAL PROCEDURE TotalMeterReadingMaintenance@1100529014(PlantMaintenanceArrangement@1100529000 : Record 11126146;StartingDateSO@1100529001 : Date;EndingDateSO@1100529002 : Date) TotalMR : Decimal;
    VAR
      PlantMeterType@1100529005 : Record 11229921;
      RefDate@1100529003 : Date;
    BEGIN
      IF (EndingDateSO <> 0D) AND (EndingDateSO > StartingDateSO) THEN
        RefDate := EndingDateSO
      ELSE
        RefDate := StartingDateSO;
      TotalMR := PlantMeterType.TotalMeterReading(
        PlantMaintenanceArrangement."Plant Type", PlantMaintenanceArrangement."Plant No.",
        PlantMaintenanceArrangement.Meter, PlantMaintenanceArrangement."Meter Reading Type", 0D, RefDate);
    END;

    LOCAL PROCEDURE GetMaintenanceIntervalNextDate@1100526201(MaintenanceInterval@1100526201 : DateFormula;TheoreticalPlannedMaintDate@1100526206 : Date) : Date;
    BEGIN
      EXIT(CALCDATE(MaintenanceInterval, TheoreticalPlannedMaintDate));
    END;

    LOCAL PROCEDURE GetMeterReadingIntervalNextDate@1100529010(PlantMaintenanceScheme@1100529001 : Record 11072677;MeterReadingInterval@1100526201 : Decimal;LastTheoreticalPlannedMaintDate@1100526206 : Date;MaxEndingDate@1100529002 : Date;VAR TotalMeterReading@1100529003 : Decimal;VAR TotalQuantityMR@1100529008 : Decimal;VAR FirstInFutureDone@1100529007 : Boolean) : Date;
    VAR
      PlantMeterType@1100529000 : Record 11229921;
      NextDate@1100529004 : Date;
      StartDate@1100529005 : Date;
      FirstInFuture@1100529006 : Boolean;
    BEGIN
      StartDate := LastTheoreticalPlannedMaintDate + 1;
      IF (StartDate > TODAY) AND (NOT FirstInFutureDone) THEN BEGIN
        FirstInFuture := TRUE;
        FirstInFutureDone := TRUE;
      END;
      NextDate :=
        PlantMeterType.GetExpectedEndingDateMeterReadingInterval(
          PlantMaintenanceScheme."Plant Type", PlantMaintenanceScheme."Plant No.",
          PlantMaintenanceScheme.Meter, PlantMaintenanceScheme."Meter Reading Type",
          StartDate, TotalMeterReading, MeterReadingInterval, MaxEndingDate, FirstInFuture, TotalQuantityMR);
      IF NextDate <> 0D THEN
        TotalMeterReading := TotalMeterReading + MeterReadingInterval;
      EXIT(NextDate);
    END;

    LOCAL PROCEDURE GetSpecialMeterReadingDate@1100529011(PlantMaintenanceScheme@1100529001 : Record 11072677;SpecificMeterReading@1100526201 : Decimal;MaxEndingDate@1100529002 : Date) : Date;
    VAR
      PlantMaintenanceArrangement@1100529003 : Record 11126146;
      PlantMeterType@1100529000 : Record 11229921;
      TotalMR@1100529004 : Decimal;
      TotalQuantityMR@1100529005 : Decimal;
    BEGIN
      PlantMaintenanceArrangement.SETCURRENTKEY("Plant Type", "Plant No.", "Maintenance Scheme", "Theoretical Maintenance Date");
      PlantMaintenanceArrangement.SETRANGE("Plant Type", PlantMaintenanceScheme."Plant Type");
      PlantMaintenanceArrangement.SETRANGE("Plant No.", PlantMaintenanceScheme."Plant No.");
      PlantMaintenanceArrangement.SETRANGE("Maintenance Scheme", PlantMaintenanceScheme."Maintenance Scheme");
      PlantMaintenanceArrangement.SETFILTER("Theoretical Maintenance Date", '>=%1', PlantMaintenanceScheme."Starting Date Maintenance");
      IF NOT PlantMaintenanceArrangement.ISEMPTY THEN
        EXIT(0D);

      TotalMR := PlantMeterType.TotalMeterReading(
        PlantMaintenanceScheme."Plant Type", PlantMaintenanceScheme."Plant No.",
        PlantMaintenanceScheme.Meter, PlantMaintenanceScheme."Meter Reading Type",
        0D, PlantMaintenanceScheme."Starting Date Maintenance");
      IF TotalMR >= SpecificMeterReading THEN
        EXIT(0D);
      TotalQuantityMR := 0;
      EXIT(
        PlantMeterType.GetExpectedEndingDateMeterReadingInterval(
          PlantMaintenanceScheme."Plant Type", PlantMaintenanceScheme."Plant No.",
          PlantMaintenanceScheme.Meter, PlantMaintenanceScheme."Meter Reading Type",
          PlantMaintenanceScheme."Starting Date Maintenance", 0, SpecificMeterReading, MaxEndingDate, TRUE, TotalQuantityMR));
    END;

    LOCAL PROCEDURE InsertPlantNoMaintSchemeArrangement@1100529003(PlantMaintenanceScheme@1100529000 : Record 11072677;TheoreticalMaintenanceDate@1100529001 : Date;TheoreticalMeterReading@1100529005 : Decimal;UsedIntervals@1100529003 : Record 11072677);
    VAR
      PlantMaintenanceArrangement@1100529004 : Record 11126146;
      MaintenanceDate@1100529002 : Date;
    BEGIN
      PlantMaintenanceArrangement.INIT;
      PlantMaintenanceArrangement."Plant Type" := PlantMaintenanceScheme."Plant Type";
      PlantMaintenanceArrangement."Plant No." := PlantMaintenanceScheme."Plant No.";
      PlantMaintenanceArrangement."Maintenance Scheme" := PlantMaintenanceScheme."Maintenance Scheme";
      PlantMaintenanceArrangement."Line No." := 0;
      MaintenanceDate := DetermineMaintenanceDate(PlantMaintenanceScheme, TheoreticalMaintenanceDate);
      PlantMaintenanceArrangement."Maintenance Year" := DATE2DWY(MaintenanceDate, 3);
      PlantMaintenanceArrangement."Maintenance Week" := DATE2DWY(MaintenanceDate, 2);
      PlantMaintenanceArrangement."Maintenance Day" := PlantMaintenanceScheme."Maintenance Day";
      PlantMaintenanceArrangement."Theoretical Maintenance Date" := TheoreticalMaintenanceDate;
      PlantMaintenanceArrangement."Inspection Type" := PlantMaintenanceScheme."Inspection Type";
      PlantMaintenanceArrangement."Interval Maintenance" := UsedIntervals."Interval Maintenance";
      PlantMaintenanceArrangement."Total Meter Reading Maint." := TheoreticalMeterReading;
      PlantMaintenanceArrangement.Meter := PlantMaintenanceScheme.Meter;
      PlantMaintenanceArrangement."Meter Reading Type" := PlantMaintenanceScheme."Meter Reading Type";
      PlantMaintenanceArrangement."Interval Meter Reading" := UsedIntervals."Interval Meter Reading";
      PlantMaintenanceArrangement."Specific Meter Reading" := UsedIntervals."Specific Meter Reading";
      IF PlantMaintenanceArrangement.CheckUniqueDate(FALSE) THEN
        PlantMaintenanceArrangement.INSERT(TRUE);
    END;

    LOCAL PROCEDURE DetermineMaintenanceDate@1100529004(PlantMaintenanceScheme@1100529001 : Record 11072677;TheoreticalMaintenanceDate@1100529000 : Date) MaintenanceDate : Date;
    VAR
      DayNo@1100529002 : Integer;
    BEGIN
      MaintenanceDate := TheoreticalMaintenanceDate;
      IF PlantMaintenanceScheme."Maintenance Day" = PlantMaintenanceScheme."Maintenance Day"::" " THEN
        EXIT;

      DayNo := DATE2DWY(MaintenanceDate, 1);
      CASE PlantMaintenanceScheme."Maintenance Day" OF
        PlantMaintenanceScheme."Maintenance Day"::Monday..PlantMaintenanceScheme."Maintenance Day"::Sunday:
          BEGIN
            IF PlantMaintenanceScheme."Maintenance Day" - DayNo > 3 THEN
              MaintenanceDate := CALCDATE('<-1W>', MaintenanceDate);
            IF PlantMaintenanceScheme."Maintenance Day" - DayNo < -3 THEN
              MaintenanceDate := CALCDATE('<+1W>', MaintenanceDate);
            DayNo := PlantMaintenanceScheme."Maintenance Day";
          END;
        PlantMaintenanceScheme."Maintenance Day"::Weekday:
          BEGIN
            IF DayNo = 6 THEN
              DayNo := 5;
            IF DayNo = 7 THEN BEGIN
              MaintenanceDate := CALCDATE('<+1W>', MaintenanceDate);
              DayNo := 1;
            END;
          END;
        PlantMaintenanceScheme."Maintenance Day"::Weekend:
          BEGIN
            IF DayNo IN [1..3] THEN BEGIN
              MaintenanceDate := CALCDATE('<-1W>', MaintenanceDate);
              DayNo := 7;
            END;
            IF DayNo IN [4..5] THEN
              DayNo := 6;
          END;
      END;
      IF MaintenanceDate < PlantMaintenanceScheme."Starting Date Maintenance" THEN
        MaintenanceDate := CALCDATE('<+1W>', MaintenanceDate);
      MaintenanceDate := DWY2DATE(DayNo, DATE2DWY(MaintenanceDate, 2), DATE2DWY(MaintenanceDate, 3));
    END;

    LOCAL PROCEDURE DetermineAndCheckInterval@1100529001(VAR PlantMaintenanceScheme@1100529000 : Record 11072677;ErrorModeInterval@1100528800 : Boolean;VAR IntervalMaintenance@1100529003 : DateFormula;VAR IntervalMeterReading@1100529002 : Decimal;VAR SpecificMeterReading@1100529001 : Decimal) : Boolean;
    VAR
      Inspection@1100529004 : Record 11012564;
    BEGIN
      CLEAR(IntervalMaintenance);
      IntervalMeterReading := 0;
      SpecificMeterReading := 0;
      WITH PlantMaintenanceScheme DO BEGIN
        IF "Inspection Type" = '' THEN BEGIN
          IF (FORMAT("Interval Maintenance") = '') AND ("Interval Meter Reading" = 0) AND ("Specific Meter Reading" = 0) THEN BEGIN
            IF NOT ErrorModeInterval THEN
              EXIT(FALSE);
            TESTFIELD("Interval Maintenance");
          END;
          IF (FORMAT("Interval Maintenance") <> '') THEN
            IntervalMaintenance := "Interval Maintenance"
          ELSE BEGIN
            IF "Interval Meter Reading" <> 0 THEN
              IntervalMeterReading := "Interval Meter Reading"
            ELSE
              SpecificMeterReading := "Specific Meter Reading";
          END;
        END ELSE BEGIN
          PlantMaintenanceScheme.GetInspectionTypeInterval(IntervalMaintenance, IntervalMeterReading, '');
          IF (FORMAT(IntervalMaintenance) = '') AND (IntervalMeterReading = 0) THEN BEGIN
            IF NOT ErrorModeInterval THEN
              EXIT(FALSE);
            FIELDERROR("Interval Maintenance", STRSUBSTNO(Text002, FIELDCAPTION("Inspection Type"), "Inspection Type"));
          END;
          IF IntervalMeterReading <> 0 THEN BEGIN
            Inspection.SETRANGE("Plant Type", "Plant Type");
            Inspection.SETRANGE("Plant No.", "Plant No.");
            Inspection.SETRANGE("Inspection Type", "Inspection Type");
            Inspection.SETRANGE("Maintenance Scheme", "Maintenance Scheme");
            IF Inspection.FINDLAST THEN BEGIN
              Meter := Inspection."Plant Meter";
              "Meter Reading Type" := Inspection."Meter Reading Type";
            END;
          END;
        END;
        IF (NOT ErrorModeInterval) AND ("Starting Date Maintenance" = 0D) THEN
          EXIT(FALSE);
        TESTFIELD("Starting Date Maintenance");
        IF (IntervalMeterReading <> 0) OR (SpecificMeterReading <> 0) THEN BEGIN
          IF (NOT ErrorModeInterval) AND ((Meter = '') OR ("Meter Reading Type" = '')) THEN
            EXIT(FALSE);
          IF ("Inspection Type" = '') THEN BEGIN
            TESTFIELD(Meter);
            TESTFIELD("Meter Reading Type");
          END ELSE BEGIN
            IF (Meter = '') OR ("Meter Reading Type" = '') THEN
              EXIT(FALSE);
          END;
        END;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckEndingDateAfterExitDate@1100529008(PlantType@1100529000 : Code[20];PlantNo@1100529001 : Code[10];VAR EndingDate@1100529002 : Date);
    VAR
      PlantNumber@1100529003 : Record 11012552;
      PlantInventory@1100529004 : Record 11012555;
      ExitOrderLine@1100529005 : Record 11012560;
    BEGIN
      IF PlantNumber.GET(PlantType, PlantNo) THEN BEGIN
        PlantInventory.SETCURRENTKEY(Removed,"Plant Type","Plant No.","Rate Code",Location);
        PlantInventory.SETRANGE(Removed, FALSE);
        PlantInventory.SETRANGE("Plant Type", PlantType);
        PlantInventory.SETRANGE("Plant No.", PlantNo);
        IF PlantInventory.ISEMPTY THEN BEGIN
          ExitOrderLine.SETCURRENTKEY("Plant Type","No.","Exit-date");
          ExitOrderLine.SETRANGE("Plant Type", PlantType);
          ExitOrderLine.SETRANGE("No.", PlantNo);
          ExitOrderLine.SETFILTER("Exit-date", '<>%1', 0D);
          IF ExitOrderLine.FINDLAST THEN BEGIN
            IF ExitOrderLine."Exit-date" < EndingDate THEN
              EndingDate := ExitOrderLine."Exit-date";
          END;
        END;
      END;
    END;

    PROCEDURE SetPlantMaintArrangementCancelled@1100528636(VAR PlantMaintenanceArrangement2@1100528600 : Record 11126146;NewCancelled@1100528602 : Boolean);
    VAR
      PlantMaintenanceArrangement@1100528601 : Record 11126146;
    BEGIN
      PlantMaintenanceArrangement.COPY(PlantMaintenanceArrangement);
      PlantMaintenanceArrangement.FILTERGROUP(11);
      PlantMaintenanceArrangement.SETRANGE("Maintenance Proposal No.", '');
      PlantMaintenanceArrangement.SETRANGE("Service Order No.", '');
      PlantMaintenanceArrangement.SETRANGE(Cancelled, NOT NewCancelled);
      PlantMaintenanceArrangement.FILTERGROUP(0);
      IF PlantMaintenanceArrangement.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          PlantMaintenanceArrangement.VALIDATE(Cancelled, NewCancelled);
          PlantMaintenanceArrangement.MODIFY(TRUE);
        UNTIL PlantMaintenanceArrangement.NEXT = 0;
      END;
    END;

    PROCEDURE CreatePlantMaintProposalFromArrangements@1100528666(VAR PlantMaintenanceArrangement@1100528604 : Record 11126146;DateUntil@1100529001 : Date) : Code[20];
    VAR
      TmpErrorMessage@1100528607 : TEMPORARY Record 700;
      CreatePlantMaintProposal@1100529000 : Codeunit 11012596;
      ProposalCode@1100528609 : Code[20];
    BEGIN
      IF PlantMaintenanceArrangement.FINDSET THEN BEGIN
        CreatePlantMaintProposal.InitProcess;
        REPEAT
          CreatePlantMaintProposal.SetProcessInfoGlobalVars(PlantMaintenanceArrangement, DateUntil, PlantMaintenanceArrangement.GETFILTERS, ProposalCode);
          CLEARLASTERROR;
          IF NOT CreatePlantMaintProposal.RUN THEN
            TmpErrorMessage.LogMessage(PlantMaintenanceArrangement.RECORDID, 0, TmpErrorMessage."Message Type"::Error, GETLASTERRORTEXT)
          ELSE BEGIN
            IF ProposalCode = '' THEN
              CreatePlantMaintProposal.GetCreatedProposalCode(ProposalCode);
          END;
          COMMIT;
        UNTIL PlantMaintenanceArrangement.NEXT = 0;
      END;
      ShowCreatePlantMaintProposalErrors(TmpErrorMessage);
      ShowMessageCreatedProposal(ProposalCode);
      EXIT(ProposalCode);
    END;

    PROCEDURE CreatePlantMaintProposalFromPlantNumbers@1100529009(VAR PlantNumber@1100528604 : Record 11012552;DateUntil@1100529001 : Date) : Code[20];
    VAR
      TmpErrorMessage@1100528607 : TEMPORARY Record 700;
      CreatePlantMaintProposal@1100529000 : Codeunit 11012596;
      ProposalCode@1100528609 : Code[20];
    BEGIN
      IF PlantNumber.FINDSET THEN BEGIN
        CreatePlantMaintProposal.InitProcess;
        REPEAT
          CreatePlantMaintProposal.SetProcessInfoGlobalVars(PlantNumber, DateUntil, PlantNumber.GETFILTERS, ProposalCode);
          CLEARLASTERROR;
          IF NOT CreatePlantMaintProposal.RUN THEN
            TmpErrorMessage.LogMessage(PlantNumber.RECORDID, 0, TmpErrorMessage."Message Type"::Error, GETLASTERRORTEXT)
          ELSE BEGIN
            IF ProposalCode = '' THEN
              CreatePlantMaintProposal.GetCreatedProposalCode(ProposalCode);
          END;
          COMMIT;
        UNTIL PlantNumber.NEXT = 0;
      END;
      ShowCreatePlantMaintProposalErrors(TmpErrorMessage);
      ShowMessageCreatedProposal(ProposalCode);
      EXIT(ProposalCode);
    END;

    PROCEDURE CreatePlantMaintProposalFromPlantTypes@1100529013(VAR PlantType@1100528604 : Record 11012551;DateUntil@1100529001 : Date) : Code[20];
    VAR
      TmpErrorMessage@1100528607 : TEMPORARY Record 700;
      CreatePlantMaintProposal@1100529000 : Codeunit 11012596;
      ProposalCode@1100528609 : Code[20];
    BEGIN
      IF PlantType.FINDSET THEN BEGIN
        CreatePlantMaintProposal.InitProcess;
        REPEAT
          CreatePlantMaintProposal.SetProcessInfoGlobalVars(PlantType, DateUntil, PlantType.GETFILTERS, ProposalCode);
          CLEARLASTERROR;
          IF NOT CreatePlantMaintProposal.RUN THEN
            TmpErrorMessage.LogMessage(PlantType.RECORDID, 0, TmpErrorMessage."Message Type"::Error, GETLASTERRORTEXT)
          ELSE BEGIN
            IF ProposalCode = '' THEN
              CreatePlantMaintProposal.GetCreatedProposalCode(ProposalCode);
          END;
          COMMIT;
        UNTIL PlantType.NEXT = 0;
      END;
      ShowCreatePlantMaintProposalErrors(TmpErrorMessage);
      ShowMessageCreatedProposal(ProposalCode);
      EXIT(ProposalCode);
    END;

    PROCEDURE CreatePlantMaintProposalFromPlantLocations@1100529016(VAR PlantLocation@1100528604 : Record 11012554;DateUntil@1100529001 : Date) : Code[20];
    VAR
      TmpErrorMessage@1100528607 : TEMPORARY Record 700;
      CreatePlantMaintProposal@1100529000 : Codeunit 11012596;
      ProposalCode@1100528609 : Code[20];
    BEGIN
      IF PlantLocation.FINDSET THEN BEGIN
        CreatePlantMaintProposal.InitProcess;
        REPEAT
          CreatePlantMaintProposal.SetProcessInfoGlobalVars(PlantLocation, DateUntil, PlantLocation.GETFILTERS, ProposalCode);
          CLEARLASTERROR;
          IF NOT CreatePlantMaintProposal.RUN THEN
            TmpErrorMessage.LogMessage(PlantLocation.RECORDID, 0, TmpErrorMessage."Message Type"::Error, GETLASTERRORTEXT)
          ELSE BEGIN
            IF ProposalCode = '' THEN
              CreatePlantMaintProposal.GetCreatedProposalCode(ProposalCode);
          END;
          COMMIT;
        UNTIL PlantLocation.NEXT = 0;
      END;
      ShowCreatePlantMaintProposalErrors(TmpErrorMessage);
      ShowMessageCreatedProposal(ProposalCode);
      EXIT(ProposalCode);
    END;

    PROCEDURE CreatePlantMaintProposalFromPlantInspections@1100529017(VAR PlantInspection@1100528604 : Record 11012564;DateUntil@1100529001 : Date) : Code[20];
    VAR
      TmpProcessedInspection@1100529002 : TEMPORARY Record 11126145;
      TmpErrorMessage@1100528607 : TEMPORARY Record 700;
      CreatePlantMaintProposal@1100529000 : Codeunit 11012596;
      ProposalCode@1100528609 : Code[20];
    BEGIN
      IF PlantInspection.FINDSET THEN BEGIN
        CreatePlantMaintProposal.InitProcess;
        REPEAT
          IF NOT TmpProcessedInspection.GET(
            PlantInspection."Plant Type", PlantInspection."Plant No.", PlantInspection."Maintenance Scheme", PlantInspection."Inspection Type")
          THEN BEGIN
            TmpProcessedInspection."Plant Type" := PlantInspection."Plant Type";
            TmpProcessedInspection."Plant No." := PlantInspection."Plant No.";
            TmpProcessedInspection."Maintenance Scheme" := PlantInspection."Maintenance Scheme";
            TmpProcessedInspection."Plant Part" := PlantInspection."Inspection Type";
            TmpProcessedInspection.INSERT;
            CreatePlantMaintProposal.SetProcessInfoGlobalVars(PlantInspection, DateUntil, PlantInspection.GETFILTERS, ProposalCode);
            CLEARLASTERROR;
            IF NOT CreatePlantMaintProposal.RUN THEN
              TmpErrorMessage.LogMessage(PlantInspection.RECORDID, 0, TmpErrorMessage."Message Type"::Error, GETLASTERRORTEXT)
            ELSE BEGIN
              IF ProposalCode = '' THEN
                CreatePlantMaintProposal.GetCreatedProposalCode(ProposalCode);
            END;
            COMMIT;
          END;
        UNTIL PlantInspection.NEXT = 0;
      END;
      ShowCreatePlantMaintProposalErrors(TmpErrorMessage);
      ShowMessageCreatedProposal(ProposalCode);
      EXIT(ProposalCode);
    END;

    LOCAL PROCEDURE ShowCreatePlantMaintProposalErrors@1100529000(VAR TmpErrorMessage@1100529000 : TEMPORARY Record 700);
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;
      IF TmpErrorMessage.HasErrors(FALSE) THEN BEGIN
        IF CONFIRM(Text003) THEN
          TmpErrorMessage.ShowErrorMessages(FALSE);
      END;
    END;

    LOCAL PROCEDURE ShowMessageCreatedProposal@1100529006(ProposalCode@1100529000 : Code[20]);
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;
      IF ProposalCode <> '' THEN
        MESSAGE(Text004, ProposalCode)
      ELSE
        MESSAGE(Text005);
    END;

    PROCEDURE GetCurrentPlantLocationInfo@1100529007(PlantType@1100529003 : Code[20];PlantNo@1100529004 : Code[10];VAR PlantLocation@1100529000 : Record 11012554;VAR PresentFrom@1100529001 : Date;VAR ExpectedReturnOn@1100529005 : Date);
    VAR
      PlantInventory@1100529002 : Record 11012555;
    BEGIN
      CLEAR(PlantLocation);
      PresentFrom := 0D;
      ExpectedReturnOn := 0D;
      PlantInventory.SETCURRENTKEY(Removed,"Plant Type","Plant No.","Rate Code",Location);
      PlantInventory.SETRANGE(Removed, FALSE);
      PlantInventory.SETRANGE("Plant Type", PlantType);
      PlantInventory.SETRANGE("Plant No.", PlantNo);
      IF PlantInventory.FINDFIRST THEN BEGIN
        IF PlantLocation.GET(PlantInventory.Location) THEN BEGIN
          PresentFrom := PlantInventory."Present from";
          IF NOT PlantInventory.Depot THEN
            ExpectedReturnOn := PlantInventory."Expected return on";
        END;
      END;
    END;

    BEGIN
    END.
  }
}

