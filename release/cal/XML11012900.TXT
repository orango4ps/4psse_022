OBJECT XMLport 11012900 Import Investment Proposal
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Import Investment Proposal;
               SVE=Importera investeringsf”rslag];
    Direction=Import;
    DefaultFieldsValidation=No;
    PreserveWhiteSpace=Yes;
    TextEncoding=WINDOWS;
    OnPreXMLport=VAR
                   lvInvPropRubricRec@1100525500 : Record 11012913;
                 BEGIN
                   ValidateFileName();
                   ValidateProject();
                   ValidateVersion();

                   lvInvPropRubricRec.SETRANGE("Project No.", InputProjectNo);
                   lvInvPropRubricRec.SETRANGE(Version, InputVersion);
                   IF lvInvPropRubricRec.FINDFIRST THEN BEGIN
                     IF NOT CONFIRM(Text001, TRUE, InputProjectNo, InputVersion) THEN
                       ERROR('');
                   END;

                   ProcessedLines := 0;
                 END;

    OnPostXMLport=BEGIN
                    IF ProcessedLines > 0 THEN BEGIN
                      InvPropRubricRec.INIT;
                      InvPropRubricRec."Project No." := InputProjectNo;
                      InvPropRubricRec.Version := InputVersion;
                      InvPropRubricRec.UpdateSurcharges(InvPropRubricRec, FALSE);
                    END;
                  END;

    Format=Variable Text;
    FieldDelimiter=<None>;
    FieldSeparator=[;];
  }
  ELEMENTS
  {
    { [{11FE09FB-F31A-470F-BAE4-6CA7C084311A}];  ;Root                ;Element ;Text     }

    { [{A3650D55-3F5E-4C02-A4BD-ED7A5A03B29A}];1 ;Integer             ;Element ;Table   ;
                                                  SourceTable=Table2000000026;
                                                  SourceTableView=SORTING(Field1);
                                                  Import::OnAfterInitRecord=BEGIN
                                                                              ImportType := '';
                                                                              ImportRubric := '';
                                                                              ImportDescription := '';
                                                                              ImportHouseModel := '';
                                                                              ImportBudgetTxt := '0';
                                                                            END;

                                                  Import::OnBeforeInsertRecord=BEGIN
                                                                                 IF (ImportRubric = '') AND
                                                                                    (ImportDescription = '') AND
                                                                                    (ImportType = '') AND
                                                                                    (ImportBudgetTxt = '') AND
                                                                                    (ImportHouseModel = '')
                                                                                 THEN
                                                                                   currXMLport.SKIP;

                                                                                 ProcessImportLine();
                                                                                 currXMLport.SKIP;
                                                                               END;
                                                                                }

    { [{5C44FABF-6686-40A9-9E80-710472ECD04A}];2 ;ImportRubric        ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{C1EFD964-F767-488F-979C-A03BFEFBFF83}];2 ;ImportDescription   ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{3A494896-CED9-4201-9875-6CBECA8102E3}];2 ;ImportType          ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{D4F891A0-44EB-4DF2-A040-DCABD96272AD}];2 ;ImportBudgetTxt     ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{08406F40-E1A4-4738-8612-8A005606DA60}];2 ;ImportHouseModel    ;Element ;Text    ;
                                                  MinOccurs=Zero }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=VAR
               lvInvPropTemplLineRec@1100525500 : Record 11012917;
             BEGIN
               IF lvInvPropTemplLineRec.FIND('-') THEN
                 InputTemplate := lvInvPropTemplLineRec.Template;
             END;

      OnOpenPage=BEGIN
                   IF gProjNo <> '' THEN BEGIN
                     InputProjectNo := gProjNo;
                     InputVersion := gVersion;
                   END;
                 END;

    }
    CONTROLS
    {
      { 1100525500;;Container;
                  ContainerType=ContentArea }

      { 1100525501;1;Group  ;
                  CaptionML=[ENU=Options;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100525502;2;Field  ;
                  Name=<ProjectNo>;
                  CaptionML=[ENU=Project No.;
                             SVE=Projektnr];
                  SourceExpr=InputProjectNo;
                  TableRelation="Project Development";
                  OnValidate=BEGIN
                               ValidateProject();
                             END;
                              }

      { 1100525503;2;Field  ;
                  Name=<Version>;
                  CaptionML=[ENU=Version;
                             SVE=Version];
                  SourceExpr=InputVersion;
                  OnValidate=BEGIN
                               ValidateVersion();
                             END;

                  OnLookup=BEGIN
                             InvPropRec.RESET;
                             InvPropRec.SETRANGE("Project No.", InputProjectNo);
                             InvPropRec."Project No." := InputProjectNo;
                             InvPropRec.Version := InputVersion;

                             IF PAGE.RUNMODAL(0, InvPropRec) = ACTION::LookupOK THEN
                               InputVersion := InvPropRec.Version;
                           END;
                            }

      { 1100525504;2;Field  ;
                  Name=<TemplateForDefaults>;
                  CaptionML=[ENU=Template for Defaults;
                             SVE=Mall f”r standarder];
                  SourceExpr=InputTemplate;
                  TableRelation="Investment Proposal Template" }

    }
  }
  CODE
  {
    VAR
      ProjDevRec@1100525518 : Record 11012915;
      InvPropRec@1100525517 : Record 11012912;
      InvPropRubricRec@1100525516 : Record 11012913;
      BudgetToDistrRec@1100525515 : Record 11012909;
      RecRef@1100525509 : RecordRef;
      XMLportStatusDialogMgt@1100525519 : Codeunit 11130006;
      RubricType@1100525514 : Option;
      ProcessedLines@1100525513 : Integer;
      NextBudgetLineNo@1100525512 : Integer;
      ImportBudget@1100525504 : Decimal;
      gProjNo@1100525511 : Code[20];
      gVersion@1100525510 : Code[10];
      InputProjectNo@1100525508 : Code[20];
      InputVersion@1100525507 : Code[10];
      InputTemplate@1100525506 : Code[10];
      BudgetRubric@1100525505 : Code[10];
      Text000@1100525503 : TextConst 'ENU=File Type must be ''.csv''.;SVE=Filtypen m†ste vara ''.csv''.';
      Text001@1100525502 : TextConst 'ENU=Already data present on project  ''%1'' version ''%2'', existing rubrics will be rewriten.\ \Are you sure?;SVE=Data finns redan f”r projekt ''%1'', version ''%2''. Befintliga rubriker kommer att skrivas om.\ \Žr du s„ker?';
      Text002@1100525500 : TextConst 'ENU=Rubric Type ''%1'' unknown.;SVE=Rubriktypen ''%1'' „r ok„nd.';

    PROCEDURE InitSelections@1100485004(IProjNo@1100485000 : Code[20];IVersion@1100485001 : Code[10]);
    BEGIN
      gProjNo := IProjNo;
      gVersion := IVersion;
    END;

    PROCEDURE ValidateFileName@1210190000();
    BEGIN
      IF (STRLEN(currXMLport.FILENAME) < 4) THEN
        ERROR(Text000);

      IF (COPYSTR(currXMLport.FILENAME, (STRLEN(currXMLport.FILENAME) - 3)) <> '.csv') THEN
        ERROR(Text000);
    END;

    PROCEDURE ValidateProject@1100485027();
    BEGIN
      ProjDevRec.GET(InputProjectNo);
      ProjDevRec.CALCFIELDS(Description);
    END;

    PROCEDURE ValidateVersion@1100485028();
    BEGIN
      InvPropRec.GET(InputProjectNo, InputVersion);
      InvPropRec.TESTFIELD(Fixed, FALSE);
    END;

    PROCEDURE ProcessImportLine@1100485003();
    BEGIN
      ConvertTypeTextToOption();
      IF RubricType <> -99 THEN BEGIN  //* '-99' is indicator voor Budget Line
        BudgetRubric := '';
        IF (ImportRubric = '') THEN
          EXIT;
        WITH InvPropRubricRec DO BEGIN
          IF NOT GET(InputProjectNo, InputVersion, ImportRubric) THEN
            InsertRubricLine()
          ELSE BEGIN
            IF (Type <> RubricType) THEN BEGIN
              DELETE(TRUE);
              InsertRubricLine();
            END ELSE BEGIN
              VALIDATE(Description, COPYSTR(ImportDescription, 1, MAXSTRLEN(Description)));
              RecRef.GETTABLE(InvPropRubricRec);
              XMLportStatusDialogMgt.ShowExportStatus(RecRef);
              MODIFY(TRUE);
              InvPropRubricRec.DeleteBudgetToDistribute(InvPropRubricRec);
            END;
          END;
        END;
        BudgetRubric := ImportRubric;
        NextBudgetLineNo := 10000;
      END ELSE BEGIN
        EVALUATE(ImportBudget, ImportBudgetTxt);
        IF (BudgetRubric = '') OR (ImportBudget = 0) THEN
          EXIT;
        IF NOT (InvPropRubricRec.Type IN [InvPropRubricRec.Type::Costs, InvPropRubricRec.Type::Revenues]) THEN
          EXIT;
        WITH BudgetToDistrRec DO BEGIN
          INIT;
          "Line No." := NextBudgetLineNo;  //* Eerst 'Line No' vullen ivm testen in 'OnValidate';
          VALIDATE("Project No.", InputProjectNo);
          VALIDATE(Version, InputVersion);
          VALIDATE("Rubric Code", BudgetRubric);
          VALIDATE("House Model", ImportHouseModel);
          IF ImportDescription <> '' THEN
            Description := COPYSTR(ImportDescription, 1, MAXSTRLEN(Description));
          Amount := ImportBudget;
          RecRef.GETTABLE(BudgetToDistrRec);
          XMLportStatusDialogMgt.ShowExportStatus(RecRef);
          INSERT(TRUE);
          NextBudgetLineNo := NextBudgetLineNo + 10000;
        END;
      END;

      ProcessedLines := ProcessedLines + 1;
    END;

    PROCEDURE ConvertTypeTextToOption@1100485002();
    VAR
      lvText001@1100485000 : TextConst 'ENU=Text;SVE=Ben„mning';
      lvText002@1100485001 : TextConst 'ENU=Title;SVE=Titel';
      lvText003@1100485002 : TextConst 'ENU=Costs;SVE=Kostnader';
      lvText004@1100485003 : TextConst 'ENU=Revenues;SVE=Int„kter';
      lvText005@1100485004 : TextConst 'ENU=Perc. Costs;SVE=Proc. Kostnader';
      lvText006@1100485005 : TextConst 'ENU=Perc. Revenues;SVE=Proc. Int„kter';
      lvText007@1100485006 : TextConst 'ENU=Subtotal;SVE=Subtotal';
      lvText008@1100485007 : TextConst 'ENU=Balance;SVE=Saldo';
      lvText009@1100485008 : TextConst 'ENU=ROS;SVE=Avkastning p† f”rs„ljning (ROS)';
      lvText010@1100485009 : TextConst 'ENU=EPV;SVE=EPV';
      lvText011@1100485010 : TextConst 'ENU=PRI;SVE=PRI';
      lvText012@1100485011 : TextConst 'ENU=Line;SVE=Rad';
      lvText013@1100485012 : TextConst 'ENU=Costs as Perc. Revenues;SVE=Kostnader i proc. Int„kter';
      lvText014@1100485013 : TextConst 'ENU=Revenues as Perc. Cost;SVE=Int„kter i proc. Kostnad';
      lvText015@1100485014 : TextConst 'ENU="Costs to Distr. as Perc. Rev. ";SVE="Kostnad f”r distr. som proc. Omv. "';
      lvText016@1100525000 : TextConst 'ENU=Perc. (Sub)Totals;SVE=Proc. (Sub)totalt';
      lvText099@1100485015 : TextConst 'ENU=Budget;SVE=Budget';
    BEGIN
      //* Type in de file kan 'Tekst' zijn (vaste voorgedefinieerde tekst/optiewaarden), maar er kan ook met een nummer gewerkt worden.

      CASE UPPERCASE(ImportType) OF
        '1', UPPERCASE(lvText001):
          RubricType := InvPropRubricRec.Type::Text;
        '2', UPPERCASE(lvText002):
          RubricType := InvPropRubricRec.Type::Title;
        '3', UPPERCASE(lvText003):
          RubricType := InvPropRubricRec.Type::Costs;
        '4', UPPERCASE(lvText004):
          RubricType := InvPropRubricRec.Type::Revenues;
        '5', UPPERCASE(lvText005):
          RubricType := InvPropRubricRec.Type::"Percentage Costs";
        '6', UPPERCASE(lvText006):
          RubricType := InvPropRubricRec.Type::"Percentage Revenues";
        '7', UPPERCASE(lvText007):
          RubricType := InvPropRubricRec.Type::Subtotal;
        '8', UPPERCASE(lvText008):
          RubricType := InvPropRubricRec.Type::Balance;
        '9', UPPERCASE(lvText009):
          RubricType := InvPropRubricRec.Type::ROS;
        '10', UPPERCASE(lvText010):
          RubricType := InvPropRubricRec.Type::EPV;
        '11', UPPERCASE(lvText011):
          RubricType := InvPropRubricRec.Type::PRI;
        '12', UPPERCASE(lvText012):
          RubricType := InvPropRubricRec.Type::Line;
        '13', UPPERCASE(lvText013):
          RubricType := InvPropRubricRec.Type::"Costs as Perc. Revenues";
        '14', UPPERCASE(lvText014):
          RubricType := InvPropRubricRec.Type::"Revenues as Perc. Costs";
        '15', UPPERCASE(lvText015):
          RubricType := InvPropRubricRec.Type::"Costs to Distr. as Perc. Rev.";
        '16', UPPERCASE(lvText016):
          RubricType := InvPropRubricRec.Type::"Perc. (Sub)Totals";
        '99', UPPERCASE(lvText099):
          RubricType := -99;  //* Indicator 'Budget Line'
        ELSE
          ERROR(Text002, ImportType);
      END;
    END;

    PROCEDURE InsertRubricLine@1100485000();
    BEGIN
      WITH InvPropRubricRec DO BEGIN
        INIT;
        VALIDATE("Project No.", InputProjectNo);
        VALIDATE(Version, InputVersion);
        "Rubric Code" := ImportRubric;
        Type := RubricType;
        VALIDATE(Description, COPYSTR(ImportDescription, 1, MAXSTRLEN(Description)));
        FillRubricLineDefaults();
        RecRef.GETTABLE(InvPropRubricRec);
        XMLportStatusDialogMgt.ShowExportStatus(RecRef);
        INSERT(TRUE);
      END;
    END;

    PROCEDURE FillRubricLineDefaults@1100485001();
    VAR
      lvInvPropRubricRec@1100485000 : Record 11012913;
      lvInvPropTemplLineRec@1100485001 : Record 11012917;
    BEGIN
      //* Default waarden zoeken: 1. rubriek met zelfde type in vorige versie van proj  2. idem maar dan in (input)sjabloon
      WITH lvInvPropRubricRec DO BEGIN
        SETRANGE("Project No.", InputProjectNo);
        SETRANGE(Version, '', InputVersion);  //* 'InputVersion' bestaat nog niet, dus wordt kleiner dan 'InputVersion' gelezen
        SETRANGE("Rubric Code", ImportRubric);
        SETRANGE(Type, RubricType);
        IF FINDLAST THEN BEGIN  //* Zoek of de rubriek voorkomt in een voorgaande versie v/h project (met zelfde type)
          InvPropRubricRec."Budget Distribution" := "Budget Distribution";
          InvPropRubricRec.Totaling := Totaling;
          InvPropRubricRec."Cost Object Filter" := "Cost Object Filter";
          InvPropRubricRec.Percentage := Percentage;
          InvPropRubricRec."Percentage Filter" := "Percentage Filter";
          InvPropRubricRec.Indentation := Indentation;
          InvPropRubricRec.Bold := Bold;
          //
          EXIT;  //* Als gevonden dan niet verder zoeken
        END;
      END;

      WITH lvInvPropTemplLineRec DO BEGIN
        IF GET(InputTemplate, ImportRubric) THEN BEGIN
          IF (Type = RubricType) THEN BEGIN   //* Zoek of de rubriek voorkomt in geselecteerd sjabloon (met zelfde type)
            InvPropRubricRec."Budget Distribution" := "Budget Distribution";
            InvPropRubricRec.Totaling := Totaling;
            InvPropRubricRec."Cost Object Filter" := "Cost Object Filter";
            InvPropRubricRec.Percentage := Percentage;
            InvPropRubricRec."Percentage Filter" := "Percentage Filter";
            InvPropRubricRec.Indentation := Indentation;
            InvPropRubricRec.Bold := Bold;
          END;
        END;
      END;
    END;

    PROCEDURE InitXMLport@1100529500(iInputProjectNo@1100529502 : Code[20];iInputVersion@1100529501 : Code[10];iInputTemplate@1100529500 : Code[10]);
    BEGIN
      InputProjectNo := iInputProjectNo;
      InputTemplate := iInputTemplate;
      InputVersion := iInputVersion;
    END;

    BEGIN
    END.
  }
}

