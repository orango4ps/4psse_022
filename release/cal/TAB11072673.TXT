OBJECT Table 11072673 Plant Stnd. Maintenance Scheme
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnDelete=VAR
               PlantMaintenanceSchemeVersion@1100528800 : Record 11072674;
               PlantMaintenanceScheme@1100528801 : Record 11072677;
             BEGIN
               PlantMaintenanceScheme.SETRANGE("Maintenance Scheme", Code);
               IF NOT PlantMaintenanceScheme.ISEMPTY THEN
                 ERROR(Text001, PlantMaintenanceScheme.FIELDCAPTION("Maintenance Scheme"), PlantMaintenanceScheme.COUNT);

               PlantMaintenanceSchemeVersion.SETRANGE(Level, PlantMaintenanceSchemeVersion.Level::"Maintenance Scheme");
               PlantMaintenanceSchemeVersion.SETRANGE("Maintenance Scheme", Code);
               PlantMaintenanceSchemeVersion.DELETEALL(TRUE);
             END;

    CaptionML=ENU=Plant Standard Maintenance Scheme;
    LookupPageID=Page11125950;
    DrillDownPageID=Page11125950;
  }
  FIELDS
  {
    { 10  ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   NotBlank=Yes }
    { 20  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 30  ;   ;Cost Component      ;Code10        ;TableRelation="Cost Component Plant".Code;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Cost Component Description");
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Cost Component;
                                                              SVE=Kostnadskomponent] }
    { 31  ;   ;Cost Component Description;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Cost Component Plant".Description WHERE (Code=FIELD(Cost Component)));
                                                   CaptionML=[ENU=Cost Component Description;
                                                              SVE=Kostnadsdel, beskrivning];
                                                   Editable=Yes }
    { 100 ;   ;Base Inspection List;Code20        ;TableRelation="Base Plant Inspection List".Code;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Inspection List Description");
                                                              END;

                                                   CaptionML=[ENU=Base Inspection List;
                                                              SVE=Basinspektionslista] }
    { 101 ;   ;Inspection List Description;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Base Plant Inspection List".Description WHERE (Code=FIELD(Base Inspection List)));
                                                   CaptionML=[ENU=Inspection List;
                                                              SVE=Inspektionslista];
                                                   Editable=No }
    { 110 ;   ;Interval Meter Reading;Decimal     ;OnValidate=BEGIN
                                                                IF "Interval Meter Reading" <> 0 THEN BEGIN
                                                                  TESTFIELD("Inspection Type", '');
                                                                  TESTFIELD("Specific Meter Reading", 0);
                                                                  IF FORMAT("Interval Maintenance") <> '' THEN
                                                                    FIELDERROR("Interval Maintenance");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Interval Meter Reading;
                                                   DecimalPlaces=0:0;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 120 ;   ;Specific Meter Reading;Decimal     ;OnValidate=BEGIN
                                                                IF "Specific Meter Reading" <> 0 THEN BEGIN
                                                                  TESTFIELD("Inspection Type", '');
                                                                  TESTFIELD("Interval Meter Reading", 0);
                                                                  IF FORMAT("Interval Maintenance") <> '' THEN
                                                                    FIELDERROR("Interval Maintenance");
                                                                END;
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Specific Meter Reading;
                                                   DecimalPlaces=0:0;
                                                   MinValue=0;
                                                   BlankZero=Yes;
                                                   Description=Total }
    { 130 ;   ;Interval Maintenance;DateFormula   ;OnValidate=BEGIN
                                                                IF FORMAT("Interval Maintenance") <> '' THEN BEGIN
                                                                  TESTFIELD("Inspection Type", '');
                                                                  TESTFIELD("Interval Meter Reading", 0);
                                                                  TESTFIELD("Specific Meter Reading", 0);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Interval Maintenance }
    { 140 ;   ;Inspection Type     ;Code20        ;TableRelation="Inspection Type" WHERE (Inspection Based on=FILTER(Time|Quantity));
                                                   OnValidate=BEGIN
                                                                IF "Inspection Type" <> '' THEN BEGIN
                                                                  TESTFIELD("Interval Meter Reading", 0);
                                                                  TESTFIELD("Specific Meter Reading", 0);
                                                                  IF FORMAT("Interval Maintenance") <> '' THEN
                                                                    FIELDERROR("Interval Maintenance");
                                                                END;
                                                                CALCFIELDS("Inspection Type Description");
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Inspection Type;
                                                              SVE=Inspektionstyp] }
    { 141 ;   ;Inspection Type Description;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Inspection Type".Description WHERE (Code=FIELD(Inspection Type)));
                                                   CaptionML=ENU=Inspection Type Description;
                                                   Editable=No }
    { 150 ;   ;Plan Method         ;Option        ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Plan Method;
                                                              SVE=Planmetod];
                                                   OptionCaptionML=ENU=Theoretical Maintenance Date,Last Execution Date;
                                                   OptionString=Theoretical Maintenance Date,Last Execution Date }
    { 160 ;   ;Maintenance Day     ;Option        ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Maintenance Day;
                                                              SVE=Underhållsdag];
                                                   OptionCaptionML=[ENU=" ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday,Weekday,Weekend";
                                                                    SVE=" ,Måndag,Tisdag,Onsdag,Torsdag,Fredag,Lördag,Söndag,Veckodag,Helg"];
                                                   OptionString=[ ,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday,Weekday,Weekend] }
    { 170 ;   ;Order Kind          ;Code10        ;TableRelation="Service Order Indication".Code WHERE (Indication=CONST(Kind));
                                                   OnValidate=VAR
                                                                ServiceOrderIndication@1100529000 : Record 11012837;
                                                                CostComponentPlant@1100529001 : Record 11012575;
                                                              BEGIN
                                                                IF "Order Kind" <> '' THEN BEGIN
                                                                  PlantSetup.GET;
                                                                  PlantSetup.TESTFIELD("Service Company");
                                                                  ServiceOrderIndication.CHANGECOMPANY(PlantSetup."Service Company");
                                                                  ServiceOrderIndication.GET(ServiceOrderIndication.Indication::Kind, "Order Kind");
                                                                  IF ("Order Kind" <> xRec."Order Kind") AND (ServiceOrderIndication."Cost Component Plant" <> '') THEN BEGIN
                                                                    IF CostComponentPlant.GET(ServiceOrderIndication."Cost Component Plant") THEN
                                                                      VALIDATE("Cost Component", ServiceOrderIndication."Cost Component Plant");
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceOrderIndication@1100529000 : Record 11012837;
                                                            BEGIN
                                                              PlantSetup.GET;
                                                              PlantSetup.TESTFIELD("Service Company");
                                                              ServiceOrderIndication.CHANGECOMPANY(PlantSetup."Service Company");
                                                              ServiceOrderIndication.SETRANGE(Indication, ServiceOrderIndication.Indication::Kind);
                                                              ServiceOrderIndication.FILTERGROUP(0);
                                                              ServiceOrderIndication.Indication := ServiceOrderIndication.Indication::Kind;
                                                              ServiceOrderIndication.Code := "Order Kind";
                                                              IF PAGE.RUNMODAL(0, ServiceOrderIndication) = ACTION::LookupOK THEN
                                                                VALIDATE("Order Kind", ServiceOrderIndication.Code);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Order Kind;
                                                              SVE=Typ av order] }
    { 180 ;   ;Order Type          ;Code10        ;TableRelation="Service Order Indication".Code WHERE (Indication=CONST(Type));
                                                   OnValidate=VAR
                                                                ServiceOrderIndication@1100529000 : Record 11012837;
                                                              BEGIN
                                                                IF "Order Type" <> '' THEN BEGIN
                                                                  PlantSetup.GET;
                                                                  PlantSetup.TESTFIELD("Service Company");
                                                                  ServiceOrderIndication.CHANGECOMPANY(PlantSetup."Service Company");
                                                                  ServiceOrderIndication.GET(ServiceOrderIndication.Indication::Type, "Order Type");
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceOrderIndication@1100529000 : Record 11012837;
                                                            BEGIN
                                                              PlantSetup.GET;
                                                              PlantSetup.TESTFIELD("Service Company");
                                                              ServiceOrderIndication.CHANGECOMPANY(PlantSetup."Service Company");
                                                              ServiceOrderIndication.SETRANGE(Indication, ServiceOrderIndication.Indication::Type);
                                                              ServiceOrderIndication.FILTERGROUP(0);
                                                              ServiceOrderIndication.Indication := ServiceOrderIndication.Indication::Type;
                                                              ServiceOrderIndication.Code := "Order Type";
                                                              IF PAGE.RUNMODAL(0, ServiceOrderIndication) = ACTION::LookupOK THEN
                                                                VALIDATE("Order Type", ServiceOrderIndication.Code);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Order Type;
                                                              SVE=Ordertyp] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100529000 : TextConst 'ENU=%1 still used on %2 plant types and/or plant numbers';
      PlantSetup@1100529001 : Record 11012550;

    BEGIN
    END.
  }
}

