OBJECT Codeunit 11128078 VP XML Reader
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=PE6.03.02 (12048904);
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      gXMLDom@12045178 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      gXMLNodeList@12045179 : ARRAY [100] OF DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      gNsMgr@12045190 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      gRecNo@12045180 : ARRAY [100] OF Integer;
      gtFreeRecNo@12045182 : TEMPORARY Record 2000000026;
      PEB001@12045181 : TextConst 'ENU=Record Set No %1 is not in use;SVE=Record Set nr %1 anv„nds inte';
      gNameSpaceCode@12045183 : ARRAY [20] OF Text;
      gNameSpaceValue@12045184 : ARRAY [20] OF Text;
      gNameSpaceNo@12045185 : Integer;
      PEB002@12045186 : TextConst 'ENU=Record Set No.%1 has no value, may be due to "WHILE Xml.GetNextNode ()" is missing;SVE=Record Set nr %1 har inget v„rde, kan bero p† att "WHILE Xml.GetNextNode()" saknas';
      PEB003@12045188 : TextConst 'ENU=%1 is not a valid value of type %2;SVE=%1 „r inte ett giltigt v„rde av typen %2';
      PEB004@12045189 : TextConst 'ENU=XPath can not be blank;SVE=XPath f†r inte vara blankt';

    PROCEDURE LoadFromFile@12045186(pFilename@12045178 : Text;pXPath@12045180 : Text) : Integer;
    BEGIN
      CreateDom();

      gXMLDom.Load(pFilename);

      EXIT(InitDom(pXPath));
    END;

    PROCEDURE LoadFromBlob@12045196(VAR pvtXmlTempBlob@12045178 : TEMPORARY Record 11128071;pXPath@12045183 : Text) rLevel : Integer;
    VAR
      IS@12045179 : InStream;
    BEGIN
      pvtXmlTempBlob.Blob.CREATEINSTREAM(IS);
      EXIT(LoadFromInStream(IS,pXPath));
    END;

    PROCEDURE LoadFromInStream@12044958(VAR pvInStream@12044958 : InStream;pXPath@12045183 : Text) rLevel : Integer;
    BEGIN
      CreateDom();

      gXMLDom.Load(pvInStream);

      EXIT(InitDom(pXPath));
    END;

    PROCEDURE LoadFromXmlDocument@12044960(VAR pvXmlDocument@12044959 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";pXPath@12045180 : Text) : Integer;
    BEGIN
      CreateDom();

      gXMLDom := pvXmlDocument;

      EXIT(InitDom(pXPath));
    END;

    PROCEDURE LoadFromXml@12045200(pXml@12045178 : Text;pXPath@12045181 : Text) : Integer;
    BEGIN
      CreateDom();

      gXMLDom.LoadXml(pXml);

      EXIT(InitDom(pXPath));
    END;

    LOCAL PROCEDURE CreateDom@12045201();
    BEGIN
      IF NOT ISNULL(gXMLDom) THEN
        EXIT;
      gXMLDom := gXMLDom.XmlDocument();
    END;

    LOCAL PROCEDURE InitDom@12045199(pXPath@12045178 : Text) : Integer;
    VAR
      i@12045180 : Integer;
    BEGIN
      gNsMgr := gNsMgr.XmlNamespaceManager(gXMLDom.NameTable);
      // Name Space
      IF gNameSpaceNo <> 0 THEN BEGIN
        FOR i := 1 TO gNameSpaceNo DO
          gNsMgr.AddNamespace(gNameSpaceCode[i],gNameSpaceValue[i]);
      END;

      FOR i := 1 TO 100 DO BEGIN
        gtFreeRecNo.Number := i;
        gtFreeRecNo.INSERT;
      END;

      EXIT(SelectNodes(0,pXPath));
    END;

    PROCEDURE UseNS@12045209() : Boolean;
    BEGIN
      EXIT(gNameSpaceNo <> 0);
    END;

    PROCEDURE SetNameSpace@12045192(pCode@12045178 : Text;pValue@12045179 : Text);
    BEGIN
      IF NOT gtFreeRecNo.ISEMPTY THEN
        gNsMgr.AddNamespace(pCode, pValue);

      gNameSpaceNo += 1;
      gNameSpaceCode[gNameSpaceNo] := pCode;
      gNameSpaceValue[gNameSpaceNo] := pValue;
    END;

    PROCEDURE GetNextNode@12045180(pRecSetNo@12045178 : Integer) : Boolean;
    BEGIN
      IF pRecSetNo = 0 THEN
        EXIT(FALSE);

      IF gXMLNodeList[pRecSetNo].Count <= 0 THEN BEGIN
        InsertFreeRecNo(pRecSetNo);
        EXIT(FALSE);
      END ELSE
        IF gXMLNodeList[pRecSetNo].Count = (gRecNo[pRecSetNo] + 1) THEN BEGIN
          InsertFreeRecNo(pRecSetNo);
          EXIT(FALSE);
        END ELSE BEGIN
          gRecNo[pRecSetNo] += 1;
          EXIT(TRUE);
        END;
    END;

    PROCEDURE SelectNodes@12045191(pParentRecSetNo@12045180 : Integer;pXPath@12045178 : Text) : Integer;
    VAR
      Level@12045179 : Integer;
    BEGIN
      RecSetIsInUse(pParentRecSetNo);

      Level := GetFirstFreeRecNo;

      IF pParentRecSetNo = 0 THEN BEGIN
        IF UseNS THEN
          gXMLNodeList[Level] := gXMLDom.SelectNodes(pXPath, gNsMgr)
        ELSE
          gXMLNodeList[Level] := gXMLDom.SelectNodes(pXPath);
      END ELSE BEGIN
        IF UseNS THEN
          gXMLNodeList[Level] := gXMLNodeList[pParentRecSetNo].Item(gRecNo[pParentRecSetNo]).SelectNodes(pXPath, gNsMgr)
        ELSE
          gXMLNodeList[Level] := gXMLNodeList[pParentRecSetNo].Item(gRecNo[pParentRecSetNo]).SelectNodes(pXPath);
      END;

      IF ISNULL(gXMLNodeList[Level]) THEN
        EXIT(0);

      IF gXMLNodeList[Level].Count = 0 THEN BEGIN
        InsertFreeRecNo(Level);
        EXIT(0);

      END ELSE BEGIN
        gRecNo[Level] := -1;
        EXIT(Level);
      END;
    END;

    PROCEDURE NodeExists@12045188(pRecSetNo@12045179 : Integer;pXPath@12045178 : Text) : Boolean;
    VAR
      XMLNode@12045180 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF pXPath = '' THEN
        ERROR(PEB004);
      RecSetIsInUse(pRecSetNo);

      XMLNode := gXMLNodeList[pRecSetNo].Item(gRecNo[pRecSetNo]).SelectSingleNode(pXPath);

      EXIT(NOT ISNULL(XMLNode));
    END;

    PROCEDURE CloseNode@12045182(pRecSetNo@12045178 : Integer) : Integer;
    BEGIN
      InsertFreeRecNo(pRecSetNo);
    END;

    PROCEDURE GetLength@12045198(pRecSetNo@12045178 : Integer) : Integer;
    BEGIN
      EXIT(gXMLNodeList[pRecSetNo].Count);
    END;

    PROCEDURE GetValue@12045190(pRecSetNo@12045179 : Integer;pXPath@12045178 : Text) : Text;
    VAR
      XMLNode@12045181 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      RecSetIsInUse(pRecSetNo);

      IF pXPath = '' THEN
        XMLNode := gXMLNodeList[pRecSetNo].Item(gRecNo[pRecSetNo])
      ELSE BEGIN
        IF UseNS THEN
          XMLNode := gXMLNodeList[pRecSetNo].Item(gRecNo[pRecSetNo]).SelectSingleNode(pXPath, gNsMgr)
        ELSE
          XMLNode := gXMLNodeList[pRecSetNo].Item(gRecNo[pRecSetNo]).SelectSingleNode(pXPath);
      END;

      IF ISNULL(XMLNode) THEN
        EXIT('')
      ELSE
        EXIT(FORMAT(XMLNode.InnerText));
    END;

    PROCEDURE GetValueInt@12045178(pRecSetNo@12045179 : Integer;pXPath@12045178 : Text) rValue : Integer;
    BEGIN
      IF GetValue(pRecSetNo,pXPath) = '' THEN
        EXIT(0)
      ELSE
        IF NOT EVALUATE(rValue,GetValue(pRecSetNo,pXPath),9) THEN
          ERROR(PEB003,GetValue(pRecSetNo,pXPath),'Integer');
    END;

    PROCEDURE GetValueDec@12045179(pRecSetNo@12045179 : Integer;pXPath@12045178 : Text) rValue : Decimal;
    BEGIN
      IF GetValue(pRecSetNo,pXPath) = '' THEN
        EXIT(0)
      ELSE
        IF NOT EVALUATE(rValue,GetValue(pRecSetNo,pXPath),9) THEN
          ERROR(PEB003,GetValue(pRecSetNo,pXPath),'Decimal');
    END;

    PROCEDURE GetValueDate@12045183(pRecSetNo@12045179 : Integer;pXPath@12045178 : Text) rValue : Date;
    VAR
      TextValue@12045180 : Text;
    BEGIN
      TextValue := GetValue(pRecSetNo,pXPath);
      IF STRPOS(TextValue, 'T') <> 0 THEN
        TextValue := COPYSTR(TextValue,1, STRPOS(TextValue, 'T') - 1);
      IF (TextValue = '') OR (TextValue = '0001-01-01') THEN
        EXIT(0D)
      ELSE
        IF NOT EVALUATE(rValue,TextValue,9) THEN
          ERROR(PEB003,GetValue(pRecSetNo,pXPath),'Date');
    END;

    PROCEDURE GetValueTime@12045194(pRecSetNo@12045179 : Integer;pXPath@12045178 : Text) rValue : Time;
    BEGIN
      IF GetValue(pRecSetNo,pXPath) = '' THEN
        EXIT(0T)
      ELSE
        IF NOT EVALUATE(rValue,GetValue(pRecSetNo,pXPath),9) THEN
          ERROR(PEB003,GetValue(pRecSetNo,pXPath),'Time');
    END;

    PROCEDURE GetValueDateTime@12045185(pRecSetNo@12045179 : Integer;pXPath@12045178 : Text) rValue : DateTime;
    BEGIN
      IF GetValue(pRecSetNo,pXPath) = '' THEN
        EXIT(0DT)
      ELSE
        IF NOT EVALUATE(rValue,GetValue(pRecSetNo,pXPath),9) THEN
          ERROR(PEB003,GetValue(pRecSetNo,pXPath),'DateTime');
    END;

    PROCEDURE GetValueBool@12045187(pRecSetNo@12045179 : Integer;pXPath@12045178 : Text) rValue : Boolean;
    BEGIN
      IF GetValue(pRecSetNo,pXPath) = '' THEN
        EXIT(FALSE)
      ELSE
        IF NOT EVALUATE(rValue,GetValue(pRecSetNo,pXPath),9) THEN
          ERROR(PEB003,GetValue(pRecSetNo,pXPath),'Boolean');
    END;

    PROCEDURE SaveBase64ToFile@12045181(pRecSetNo@12045184 : Integer;pXPath@12045183 : Text;pFileName@12045178 : Text);
    VAR
      OS@12045179 : OutStream;
      TextFile@12045182 : File;
      XMLNode@12045185 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      RecSetIsInUse(pRecSetNo);
      XMLNode := gXMLNodeList[pRecSetNo].Item(gRecNo[pRecSetNo]).SelectSingleNode(pXPath);
      IF ISNULL(XMLNode) THEN
        EXIT;

      TextFile.CREATE(pFileName);
      TextFile.CREATEOUTSTREAM(OS);
      Base64SaveNode(XMLNode,OS);
      TextFile.CLOSE;
    END;

    PROCEDURE SaveBase64ToBlob@12045193(pRecSetNo@12045185 : Integer;pXPath@12045184 : Text;VAR pvtXmlTempBlob@12045178 : TEMPORARY Record 11128071);
    VAR
      OS@12045180 : OutStream;
      XMLNode@12045182 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      RecSetIsInUse(pRecSetNo);
      XMLNode := gXMLNodeList[pRecSetNo].Item(gRecNo[pRecSetNo]).SelectSingleNode(pXPath);
      IF ISNULL(XMLNode) THEN
        EXIT;

      pvtXmlTempBlob.Blob.CREATEOUTSTREAM(OS);
      Base64SaveNode(XMLNode,OS);
    END;

    LOCAL PROCEDURE GetFirstFreeRecNo@12045184() : Integer;
    BEGIN
      gtFreeRecNo.RESET;
      gtFreeRecNo.FINDFIRST;
      gtFreeRecNo.DELETE;

      EXIT(gtFreeRecNo.Number);
    END;

    LOCAL PROCEDURE InsertFreeRecNo@12045189(pRecNo@12045178 : Integer);
    BEGIN
      IF pRecNo = 0 THEN
        EXIT;
      gtFreeRecNo.Number := pRecNo;
      IF gtFreeRecNo.INSERT THEN;
      CLEAR(gXMLNodeList[pRecNo]);
    END;

    LOCAL PROCEDURE Base64SaveNode@1(VAR pvXMLNode@12045178 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR pvBase64OutStream@1001 : OutStream);
    VAR
      XMLText@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlText";
      Convert@1100570000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Bytes@1100570001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      MemStream@1100570002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
    BEGIN
      XMLText := pvXMLNode.FirstChild;
      Bytes := Convert.FromBase64String(XMLText.InnerText);
      MemStream := MemStream.MemoryStream(Bytes);
      COPYSTREAM(pvBase64OutStream,MemStream);
    END;

    LOCAL PROCEDURE RecSetIsInUse@12045195(pRecSetNo@12045178 : Integer);
    VAR
      XMLNode@12045179 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF pRecSetNo = 0 THEN
        EXIT;
      IF gtFreeRecNo.GET(pRecSetNo) THEN
        ERROR(PEB001,pRecSetNo);

      XMLNode := gXMLNodeList[pRecSetNo].Item(gRecNo[pRecSetNo]);
      IF ISNULL(XMLNode) THEN
        ERROR(PEB002,pRecSetNo);
    END;

    PROCEDURE GetXML@12044959() rXML : Text;
    BEGIN
      EXIT(gXMLDom.OuterXml);
    END;

    PROCEDURE SaveToFile@12044963(pFileName@12045178 : Text);
    VAR
      tXmlTempBlob@12045180 : TEMPORARY Record 11128071;
    BEGIN
      SaveToBlob(tXmlTempBlob);

      tXmlTempBlob.ExportToFile(pFileName); // Server Side
    END;

    PROCEDURE SaveToClientFile@12044962(pFileName@12045178 : Text);
    VAR
      tXmlTempBlob@12045180 : TEMPORARY Record 11128071;
    BEGIN
      SaveToBlob(tXmlTempBlob);

      tXmlTempBlob.ExportToClientFile(pFileName);
    END;

    PROCEDURE SaveToBlob@12044961(VAR pvtXmlTempBlob@12045178 : TEMPORARY Record 11128071);
    VAR
      OS@12045180 : OutStream;
    BEGIN
      pvtXmlTempBlob.Blob.CREATEOUTSTREAM(OS);

      gXMLDom.Save(OS);
    END;

    BEGIN
    {
      PEB *** Begin ***
      PEB0103 Wrappers and Tools
      PEB
      PEB *** End ***
    }
    END.
  }
}

