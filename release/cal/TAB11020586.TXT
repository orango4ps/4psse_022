OBJECT Table 11020586 Plant Management Company
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRename=BEGIN
               ERROR(Text000);  //* Not allowed because else in other tables with a relation to this table the field 'Plant Company'
                                //* will be modified.
             END;

    CaptionML=[ENU=Plant Management Company;
               NOR=Maskinh†ndteringselskap;
               SVE=Maskinf”rvaltningsf”retag];
    LookupPageID=Page11124918;
    DrillDownPageID=Page11124918;
  }
  FIELDS
  {
    { 10  ;   ;Plant Company       ;Text30        ;TableRelation=Company;
                                                   CaptionML=[ENU=Plant Company;
                                                              NOR=Maskinselskap;
                                                              SVE=Maskinf”retag];
                                                   NotBlank=Yes }
    { 20  ;   ;Default             ;Boolean       ;OnValidate=VAR
                                                                PlantMgtCompRec@1100525000 : Record 11020586;
                                                              BEGIN
                                                                IF Default THEN BEGIN
                                                                  TESTFIELD("Plant Company");
                                                                  PlantMgtCompRec.SETFILTER("Plant Company", '<>%1', "Plant Company");
                                                                  PlantMgtCompRec.SETRANGE(Default, TRUE);
                                                                  PlantMgtCompRec.MODIFYALL(Default, FALSE);  //* Only one with 'Default' allowed
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Default;
                                                              NOR=Standard;
                                                              SVE=Standard] }
    { 110 ;   ;Job Filter          ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Code Filter;
                                                              NOR=Kodefilter;
                                                              SVE=Kodfilter] }
    { 120 ;   ;Plant Loc. in Current Company;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Exist("Site Mngmnt. Hours Objects" WHERE (Company=FIELD(Plant Company),
                                                                                                         Type=CONST(Project),
                                                                                                         Code=FIELD(Job Filter)));
                                                   CaptionML=ENU=Plant Location in Current Company;
                                                   Description=Field required to get Flowfilter on OData;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Plant Company                           ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100525003 : TextConst 'ENU=Rename not allowed (delete and insert a new).;NOR=Gi nytt navn er ikke tillatt (fjern og sett inn et nytt).;SVE=Att ge nytt namn „r inte till†tet (ta bort och infoga ett nytt).';
      Text001@1100525000 : TextConst 'ENU=%1 not present in %2 of company ''%3''.;NOR=%1 finnes ikke i %2 av selskap ''%3''.;SVE=%1 finns inte i %2 av f”retag ''%3''.';
      Text002@1100525001 : TextConst 'ENU=Integration with only one %1 allowed in %2.;NOR=Integrasjon med kun en %1 er tillatt i %2.;SVE=Integration med endast en %1 „r till†tet i %2.';
      ProjSetup@1100525002 : Record 315;

    PROCEDURE GetPlantCompany@1100525001(ErrorMode@1100525001 : Boolean;VAR NoOfPlantComps@1100525002 : Integer;Company@1100525003 : Text[30]) : Text[30];
    VAR
      PlantMgtCompRec@1100525000 : Record 11020586;
    BEGIN
      //* Return Value: Plant Company - Only filled when there is a relation with 1 plant company, else empty.
      //* Return Var  : Number of related plant companies
      NoOfPlantComps := 0;
      IF Company = '' THEN
        Company := COMPANYNAME;
      IF Company <> COMPANYNAME THEN
        PlantMgtCompRec.CHANGECOMPANY(Company);
      IF NOT PlantMgtCompRec.FINDFIRST THEN BEGIN
        IF ErrorMode THEN
          ERROR(Text001, PlantMgtCompRec.TABLECAPTION, ProjSetup.TABLECAPTION, Company);
        EXIT('');
      END ELSE BEGIN
        IF PlantMgtCompRec.NEXT <> 0 THEN BEGIN
          NoOfPlantComps := PlantMgtCompRec.COUNT;
          EXIT('');
        END;
      END;
      NoOfPlantComps := 1;
      EXIT(PlantMgtCompRec."Plant Company");
    END;

    PROCEDURE GetPlantCompaniesForProject@1100525002(ProjectNo@1100525001 : Code[20];VAR TmpPlantMgtCompRec@1100525003 : TEMPORARY Record 11020586;Company@1100525005 : Text[30];CheckCompanyPermissionPlantLocationTable@1100528500 : Boolean) : Integer;
    VAR
      PlantMgtCompRec@1100525000 : Record 11020586;
      PlantLocRec@1100525004 : Record 11012554;
      CompPermissionLocTable@1100528501 : Boolean;
      NoOfPlantCompsProj@1100525002 : Integer;
    BEGIN
      //* Return Value: Number of related plant companies where a plant location of the project is present.
      //* Return Var  : Tempory tabel with the related plant companies of the project.
      NoOfPlantCompsProj := 0;
      TmpPlantMgtCompRec.RESET;
      TmpPlantMgtCompRec.DELETEALL;
      IF ProjectNo = '' THEN
        EXIT(0);
      IF Company = '' THEN
        Company := COMPANYNAME;
      IF Company <> COMPANYNAME THEN
        PlantMgtCompRec.CHANGECOMPANY(Company);
      IF PlantMgtCompRec.FINDFIRST THEN BEGIN
        REPEAT
          PlantLocRec.RESET;
          IF CheckCompanyPermissionPlantLocationTable THEN
            CompPermissionLocTable := PlantLocRec.CHANGECOMPANY(PlantMgtCompRec."Plant Company")
          ELSE BEGIN
            PlantLocRec.CHANGECOMPANY(PlantMgtCompRec."Plant Company");
            CompPermissionLocTable := TRUE;
          END;
          IF CompPermissionLocTable THEN BEGIN
            PlantLocRec.SETCURRENTKEY("Company Name", "Project No.", "Service Order No.", "Employee No.");
            IF PlantMgtCompRec."Plant Company" = Company THEN
              PlantLocRec.SETRANGE("Company Name", '')
            ELSE
              PlantLocRec.SETRANGE("Company Name", Company);
            PlantLocRec.SETRANGE("Project No.", ProjectNo);
            IF NOT PlantLocRec.ISEMPTY THEN BEGIN
              TmpPlantMgtCompRec := PlantMgtCompRec;
              TmpPlantMgtCompRec.INSERT;
              NoOfPlantCompsProj := NoOfPlantCompsProj + 1;
            END;
          END;
        UNTIL PlantMgtCompRec.NEXT = 0;
      END;
      EXIT(NoOfPlantCompsProj);
    END;

    PROCEDURE GetPlantCompaniesForService@1100529000(ServiceOrderNo@1100525001 : Code[20];VAR TmpPlantMgtCompany@1100525003 : TEMPORARY Record 11020586;Company@1100525005 : Text[30];CheckCompanyPermissionPlantLocationTable@1100528500 : Boolean) : Integer;
    VAR
      PlantMgtCompany@1100525000 : Record 11020586;
      PlantLocation@1100525004 : Record 11012554;
      CompPermissionLocTable@1100528501 : Boolean;
      NoOfPlantCompanies@1100525002 : Integer;
    BEGIN
      //* Return Value: Number of related plant companies where a plant location of the service order is present.
      //* Return Var  : Tempory tabel with the related plant companies of the service order.
      NoOfPlantCompanies := 0;
      TmpPlantMgtCompany.RESET;
      TmpPlantMgtCompany.DELETEALL;
      IF ServiceOrderNo = '' THEN
        EXIT(0);
      IF Company = '' THEN
        Company := COMPANYNAME;
      IF Company <> COMPANYNAME THEN
        PlantMgtCompany.CHANGECOMPANY(Company);
      IF PlantMgtCompany.FINDFIRST THEN BEGIN
        REPEAT
          PlantLocation.RESET;
          IF CheckCompanyPermissionPlantLocationTable THEN
            CompPermissionLocTable := PlantLocation.CHANGECOMPANY(PlantMgtCompany."Plant Company")
          ELSE BEGIN
            PlantLocation.CHANGECOMPANY(PlantMgtCompany."Plant Company");
            CompPermissionLocTable := TRUE;
          END;
          IF CompPermissionLocTable THEN BEGIN
            PlantLocation.SETCURRENTKEY("Company Name", "Project No.", "Service Order No.", "Employee No.");
            IF PlantMgtCompany."Plant Company" = Company THEN
              PlantLocation.SETRANGE("Company Name", '')
            ELSE
              PlantLocation.SETRANGE("Company Name", Company);
            PlantLocation.SETRANGE("Project No.", '');
            PlantLocation.SETRANGE("Service Order No.", ServiceOrderNo);
            IF NOT PlantLocation.ISEMPTY THEN BEGIN
              TmpPlantMgtCompany := PlantMgtCompany;
              TmpPlantMgtCompany.INSERT;
              NoOfPlantCompanies := NoOfPlantCompanies + 1;
            END;
          END;
        UNTIL PlantMgtCompany.NEXT = 0;
      END;
      EXIT(NoOfPlantCompanies);
    END;

    PROCEDURE GetPlantCompanySalesRental@1100525000(ErrorMode@1100525001 : Boolean) : Text[30];
    VAR
      PlantMgtCompRec@1100525000 : Record 11020586;
    BEGIN
      //* For Sales Rental Order/Contract only one plant company allowed. (granules for Heras and Mansveld)
      IF NOT PlantMgtCompRec.FINDFIRST THEN BEGIN
        IF ErrorMode THEN
          ERROR(Text001, PlantMgtCompRec.TABLECAPTION, ProjSetup.TABLECAPTION);
        EXIT('');
      END ELSE BEGIN
        IF PlantMgtCompRec.NEXT <> 0 THEN BEGIN
          IF ErrorMode THEN
            ERROR(Text002, PlantMgtCompRec.TABLECAPTION, ProjSetup.TABLECAPTION);
          EXIT('');
        END;
      END;
      EXIT(PlantMgtCompRec."Plant Company");
    END;

    PROCEDURE PlantLocationFilterOfProject@1100525012(ProjectNo@1100525004 : Code[20];VAR OPlantLocationFilter@1100525000 : Text[250];VAR OPlantCompany@1100525001 : Text[30]) : Boolean;
    VAR
      PlantLoc@1100525003 : Record 11012554;
      PlantMgtComp@1100525002 : Record 11020586;
      TmpPlantMgtComp@1100525008 : TEMPORARY Record 11020586;
      NoOfPlantComps@1100525007 : Integer;
      NoOfPlantCompsProj@1100525009 : Integer;
      ProjCompany@1100525006 : Text[30];
    BEGIN
      PlantMgtComp."Plant Company" := GetPlantCompany(TRUE, NoOfPlantComps, '');  //* TRUE: min. 1 present
      IF NoOfPlantComps > 1 THEN BEGIN
        NoOfPlantCompsProj := GetPlantCompaniesForProject(ProjectNo, TmpPlantMgtComp, '', FALSE);
        IF NoOfPlantCompsProj <= 0 THEN
          EXIT(FALSE);
        IF NoOfPlantCompsProj = 1 THEN
          PlantMgtComp."Plant Company" := TmpPlantMgtComp."Plant Company"
        ELSE BEGIN
          TmpPlantMgtComp.SETRANGE(Default, TRUE);
          IF NOT TmpPlantMgtComp.FINDFIRST THEN
            TmpPlantMgtComp."Plant Company" := '';
          TmpPlantMgtComp.SETRANGE(Default);  //Reset filter
          IF PAGE.RUNMODAL(PAGE::"Plant Management Company List", TmpPlantMgtComp) = ACTION::LookupOK THEN
            PlantMgtComp."Plant Company" := TmpPlantMgtComp."Plant Company";
        END;
      END;
      IF PlantMgtComp."Plant Company" = '' THEN
        EXIT(FALSE);
      IF PlantMgtComp."Plant Company" = COMPANYNAME THEN BEGIN
        OPlantCompany := '';
        ProjCompany := '';
      END ELSE BEGIN
        OPlantCompany := PlantMgtComp."Plant Company";
        ProjCompany := COMPANYNAME;
      END;

      IF OPlantCompany <> '' THEN
        PlantLoc.CHANGECOMPANY(OPlantCompany);
      PlantLoc.SETCURRENTKEY("Company Name", "Project No.", "Service Order No.", "Employee No.");
      PlantLoc.SETRANGE("Company Name", ProjCompany);
      PlantLoc.SETRANGE("Project No.", ProjectNo);
      PlantLoc.FINDSET(FALSE,FALSE);  //* Not 'IF ...', should be at least one plant location
      REPEAT
        //* Most times only one location, will not be more than 10 locations (HK)
        IF STRLEN(OPlantLocationFilter) + STRLEN(PlantLoc.Code) < MAXSTRLEN(OPlantLocationFilter) THEN BEGIN
          IF OPlantLocationFilter <> '' THEN
            OPlantLocationFilter := OPlantLocationFilter + '|';
          OPlantLocationFilter := OPlantLocationFilter + PlantLoc.Code;
        END;
      UNTIL PlantLoc.NEXT = 0;

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

