OBJECT Table 11124975 App User GAP
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=VAR
               GAPAppUserSetup@1100528550 : Record 11124976;
             BEGIN
               IF Username <> '' THEN BEGIN
                 GAPAppUserSetup.Username := Username;
                 IF GAPAppUserSetup.INSERT(TRUE) THEN;
               END;
             END;

    OnModify=VAR
               GAPAppUserSetup@1100528000 : Record 11124976;
             BEGIN
               IF Username <> '' THEN BEGIN
                 GAPAppUserSetup.Username := Username;
                 IF GAPAppUserSetup.INSERT(TRUE) THEN;
               END;
             END;

    OnDelete=VAR
               GAPUserByAppSetupGroup@1100528550 : Record 11124980;
               GAPAppUserSetup@1100528551 : Record 11124976;
             BEGIN
               IF CONFIRM(STRSUBSTNO(TEXT004,Username)) THEN BEGIN
                 GAPUserByAppSetupGroup.SETRANGE(Username, Username);
                 IF GAPUserByAppSetupGroup.FINDSET THEN
                   GAPUserByAppSetupGroup.DELETEALL(TRUE);

                 IF GAPAppUserSetup.GET(Username) THEN
                   GAPAppUserSetup.DELETE(TRUE);
               END ELSE
                 ERROR('');
             END;

    CaptionML=ENU=Users Apps and Portals;
  }
  FIELDS
  {
    { 10  ;   ;Username            ;Code100       ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Username;
                                                              SVE=Anv„ndarnamn] }
    { 20  ;   ;Name                ;Text100       ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Name;
                                                              SVE=Namn] }
    { 30  ;   ;Email               ;Text250       ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Email;
                                                              SVE=E-post] }
    { 40  ;   ;Password            ;Text64        ;OnValidate=VAR
                                                                EncryptionMgt@1100528550 : Codeunit 11012367;
                                                                i@1100528000 : Integer;
                                                                ContainsSpecialCharacter@1100528001 : Boolean;
                                                                ContainsNumericCharacter@1100528002 : Boolean;
                                                              BEGIN
                                                                TESTFIELD(Username);
                                                                IF (Password = '') THEN
                                                                  EXIT;

                                                                GAPSetup.GET();

                                                                IF STRLEN(Password) < GAPSetup."Minimum Password Length" THEN
                                                                  ERROR(TEXT000, GAPSetup."Minimum Password Length");

                                                                IF ((GAPSetup."Use Special Characters") AND (GAPSetup."Allowed Special Characters" <> '')) THEN BEGIN
                                                                  ContainsSpecialCharacter := FALSE;
                                                                  FOR i := 1 TO STRLEN(GAPSetup."Allowed Special Characters") DO BEGIN
                                                                    IF STRPOS(Password, STRSUBSTNO('%1', GAPSetup."Allowed Special Characters"[i])) > 0 THEN
                                                                      ContainsSpecialCharacter := TRUE;
                                                                  END;

                                                                  IF NOT ContainsSpecialCharacter THEN ERROR(TEXT001,GAPSetup."Allowed Special Characters");
                                                                END;

                                                                IF GAPSetup."Use Numeric Characters" THEN BEGIN
                                                                  ContainsNumericCharacter := FALSE;
                                                                  FOR i := 0 TO 9 DO BEGIN
                                                                    IF STRPOS(Password, STRSUBSTNO('%1',i)) > 0 THEN
                                                                      ContainsNumericCharacter := TRUE;
                                                                  END;

                                                                  IF NOT ContainsNumericCharacter THEN ERROR(TEXT002);
                                                                END;

                                                                Password := EncryptionMgt.GenerateKeyedHash(STRSUBSTNO('%1%2',Username, Password), GAPSetup."Password Hash Key",2);
                                                              END;

                                                   ExtendedDatatype=Masked;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Password;
                                                              SVE=L”senord] }
    { 50  ;   ;Active              ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=[ENU=Active;
                                                              SVE=Att attestera] }
  }
  KEYS
  {
    {    ;Username                                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ActiveOption@1100528551 : ' ,Yes,No';
      GAPSetup@1100528550 : Record 11124982;
      TEXT000@1100528000 : TextConst 'ENU=The minimum length of a password should be %1.';
      TEXT001@1100528001 : TextConst 'ENU=The password must contain at least one special character (%1).';
      TEXT002@1100528002 : TextConst 'ENU=The password must contain at least one numeric character.';
      TEXT003@1100528003 : TextConst 'ENU=Login details for the %1';
      ProductsGAP@1100528700 : Record 11124990;
      MailTemplateManagement@1100528300 : Codeunit 11012622;
      TEXT004@1100528701 : TextConst 'ENU=Are you sure that you want to delete user %1 and his app settings?';

    LOCAL PROCEDURE GetEmailAdress@1100528103() : Text[80];
    VAR
      ResourceWOP@1100528101 : Record 11229278;
      Employee@1100528100 : Record 5200;
      AppUserSetupGAP@1100528000 : Record 11124976;
    BEGIN
      IF Email <> '' THEN EXIT(Email);

      AppUserSetupGAP.GET(Username);

      IF AppUserSetupGAP."Resource No." <> '' THEN BEGIN
        IF ResourceWOP.GET(AppUserSetupGAP."Resource No.") THEN BEGIN
          IF ResourceWOP.Company <> COMPANYNAME THEN
            Employee.CHANGECOMPANY(ResourceWOP.Company);
          IF Employee.GET(ResourceWOP."Source No.") THEN BEGIN
            EXIT(Employee."Company E-Mail");
          END;
        END;
      END;
    END;

    PROCEDURE GetPLAProxyUrlAndroid@1100528104() : Text;
    BEGIN
      EXIT(CreatePLAProxyUrl('https://pla.4ps.nl/login?username=%1&proxy=%2'));
    END;

    PROCEDURE GetPLAProxyUrl@1100528105() : Text;
    BEGIN
      EXIT(CreatePLAProxyUrl('fps.pla://login?username=%1&proxy=%2'));
    END;

    LOCAL PROCEDURE CreatePLAProxyUrl@1100528102(UrlPlaceholder@1100528102 : Text) : Text;
    VAR
      HttpUtility@1100528101 : DotNet "'System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
      PlantAppSetup@1100528100 : Record 11124924;
      Url@1100528103 : Text;
    BEGIN
      PlantAppSetup.GET;
      PlantAppSetup.TESTFIELD("Proxy URL");

      Url := STRSUBSTNO(UrlPlaceholder, Username, HttpUtility.UrlEncode(PlantAppSetup."Proxy URL"));
      EXIT(Url);
    END;

    PROCEDURE GetCCAProxyUrlAndroid@1100528002() : Text;
    BEGIN
      EXIT(CreateCCAProxyUrl('https://cca.4ps.nl/login?username=%1&proxy=%2'));
    END;

    PROCEDURE GetCCAProxyUrl@1100527201() : Text;
    BEGIN
      EXIT(CreateCCAProxyUrl('fps.cca://login?username=%1&proxy=%2'));
    END;

    LOCAL PROCEDURE CreateCCAProxyUrl@1100527203(UrlPlaceholder@1100528102 : Text) : Text;
    VAR
      HttpUtility@1100528101 : DotNet "'System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
      CCAAppSetup@1100528100 : Record 11128520;
      Url@1100528103 : Text;
    BEGIN
      CCAAppSetup.GET;
      CCAAppSetup.TESTFIELD("Proxy URL");

      Url := STRSUBSTNO(UrlPlaceholder, Username, HttpUtility.UrlEncode(CCAAppSetup."Proxy URL"));
      EXIT(Url);
    END;

    PROCEDURE GetWHAProxyUrlAndroid@1100528007() : Text;
    BEGIN
      EXIT(CreateWHAProxyUrl('https://wha.4ps.nl/login?username=%1&proxy=%2'));
    END;

    PROCEDURE GetWHAProxyUrl@1100528006() : Text;
    BEGIN
      EXIT(CreateWHAProxyUrl('fps.wha://login?username=%1&proxy=%2'));
    END;

    LOCAL PROCEDURE CreateWHAProxyUrl@1100528005(UrlPlaceholder@1100528102 : Text) : Text;
    VAR
      HttpUtility@1100528101 : DotNet "'System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
      EmpolySetup@1100528100 : Record 11126692;
      Url@1100528103 : Text;
    BEGIN
      EmpolySetup.GET;
      EmpolySetup.TESTFIELD("Proxy URL");

      Url := STRSUBSTNO(UrlPlaceholder, Username, HttpUtility.UrlEncode(EmpolySetup."Proxy URL"));
      EXIT(Url);
    END;

    PROCEDURE GetOSAProxyUrlAndroid@1100528703() : Text;
    BEGIN
      EXIT(CreateOSAProxyUrl('https://osa.4ps.nl/login?username=%1&proxy=%2'));
    END;

    PROCEDURE GetOSAProxyUrl@1100528702() : Text;
    BEGIN
      EXIT(CreateOSAProxyUrl('fps.osa://login?username=%1&proxy=%2'));
    END;

    LOCAL PROCEDURE CreateOSAProxyUrl@1100528701(UrlPlaceholder@1100528102 : Text) : Text;
    VAR
      HttpUtility@1100528101 : DotNet "'System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
      OnSiteAppSetup@1100528100 : Record 11229950;
      Url@1100528103 : Text;
    BEGIN
      OnSiteAppSetup.GET;
      OnSiteAppSetup.TESTFIELD("Proxy URL");

      Url := STRSUBSTNO(UrlPlaceholder, Username, HttpUtility.UrlEncode(OnSiteAppSetup."Proxy URL"));
      EXIT(Url);
    END;

    PROCEDURE GetFSAProxyUrlAndroid@1100529302() : Text;
    BEGIN
      EXIT(CreateFSAProxyUrl('https://fsa.4ps.nl/login?username=%1&proxy=%2'));
    END;

    PROCEDURE GetFSAProxyUrl@1100529301() : Text;
    BEGIN
      EXIT(CreateFSAProxyUrl('fps.fsa://login?username=%1&proxy=%2'));
    END;

    LOCAL PROCEDURE CreateFSAProxyUrl@1100529300(UrlPlaceholder@1100528102 : Text) : Text;
    VAR
      HttpUtility@1100528101 : DotNet "'System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
      FieldServiceAppSetup@1100528100 : Record 11126700;
      Url@1100528103 : Text;
    BEGIN
      FieldServiceAppSetup.GET;
      FieldServiceAppSetup.TESTFIELD("Proxy URL");

      Url := STRSUBSTNO(UrlPlaceholder, Username, HttpUtility.UrlEncode(FieldServiceAppSetup."Proxy URL"));
      EXIT(Url);
    END;

    LOCAL PROCEDURE LineBreak@1100525000() : Text;
    VAR
      CRLF@1100525000 : Text[2];
    BEGIN
      CRLF[1] := 13;
      CRLF[2] := 10;
      EXIT(CRLF);
    END;

    PROCEDURE SendEmail@1100528101(App@1100528000 : Option);
    VAR
      MailTemplate@1100528300 : Record 11229450;
      Language@1100528303 : Record 8;
      AppUser@1100528304 : Record 11130031;
      TableVariant@1100528306 : Variant;
      AppName@1100528001 : Text;
      BodyText@1100528100 : Text;
      EmailAdressReceiver@1100528101 : Text[80];
      SMTPMail@1100528102 : Codeunit 400;
      Application@1100528002 : 'FSA,PLA,CCA,WHA,OSA';
      GAPProducts@1100528003 : Record 11124990;
      Subject@1100528301 : Text;
      MailTemplateNo@1100528302 : Integer;
    BEGIN
      Language.SETRANGE("Windows Language ID", GLOBALLANGUAGE);
      Language.FINDFIRST;

      CASE App OF
        Application::FSA:
          BEGIN
            AppName := GAPProducts.GetProductNameFSA;
            MailTemplateNo := 68;
            TableVariant := Rec;
          END;
        Application::PLA:
          BEGIN
            AppName := GAPProducts.GetProductNamePLA;
            MailTemplateNo := 67;
            AppUser.GET(Username);
            TableVariant := AppUser;
          END;
        Application::CCA:
          BEGIN
            AppName := GAPProducts.GetProductNameCCA;
            MailTemplateNo := 72;
            AppUser.GET(Username);
            TableVariant := AppUser;
          END;
        Application::WHA:
          BEGIN
            AppName := GAPProducts.GetProductNameWHA;
            MailTemplateNo := 73;
            TableVariant := Rec;
          END;
        Application::OSA:
          BEGIN
            AppName := GAPProducts.GetProductNameOSA;
            MailTemplateNo := 74;
            TableVariant := Rec;
          END;
      END;
      MailTemplateManagement.GetMailTemplate(MailTemplate, MailTemplateNo, '');

      BodyText := MailTemplateManagement.GetLayoutTextSubstitutedTotalBodyOnly(MailTemplateNo, Language.Code, TableVariant);
      Subject := STRSUBSTNO(TEXT003, AppName);
      IF (MailTemplate."Use Mail Template Subject Text") THEN
        Subject := MailTemplateManagement.GetLayoutTextSubstitutedSubjectOnly(MailTemplateNo, Language.Code, TableVariant);

      EmailAdressReceiver := GetEmailAdress;
       SMTPMail.CreateMessage(
        MailTemplate."From Name",
        MailTemplate.From,
        EmailAdressReceiver,
        Subject,
        BodyText,
        TRUE);

      SMTPMail.Send;
    END;

    BEGIN
    END.
  }
}

