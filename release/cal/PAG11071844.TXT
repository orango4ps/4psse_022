OBJECT Page 11071844 Activities/Occ. Bar Chart
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=AktivitÑten/Belegung Balkendiagramm;
               ENU=Activities/Occupation Bar Chart;
               NLD=Staafdiagram werkzaamheden vs bezetting];
    SaveValues=Yes;
    UsageCategory=Tasks;
    OnInit=BEGIN
             PeriodType := PeriodType::Month;
             NoOfColumns := 24;

             MaintActivitiesVisible := TRUE;
             CallActivitiesVisible := TRUE;
             AddActivitiesVisible := TRUE;
             TryoutActivitiesVisible := TRUE;
             ProjectRequestedVisible := TRUE;

             OccupationVisible := TRUE;
             DeltaOccupationVisible := TRUE;

             DetermineMeasurementIndexes;
             BuildOptionValueTable;
           END;

    OnOpenPage=BEGIN
                 Date."Period Start" := WORKDATE;
                 PeriodFormManagement.FindDate('=<',Date,PeriodType);
                 BaseDate := Date."Period Start";
               END;

    ActionList=ACTIONS
    {
      { 1100528605;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100528607;1 ;Action    ;
                      CaptionML=[DEU=ZurÅck;
                                 ENU=Previous;
                                 NLD=Vorige;
                                 NOR=Forrige;
                                 SVE=FîregÜende];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PeriodFormManagement.FindDate('<', Date, PeriodType);
                                 BaseDate := Date."Period Start";
                                 UpdateChart;
                               END;
                                }
      { 1100528606;1 ;Action    ;
                      CaptionML=[DEU=Weiter;
                                 ENU=Next;
                                 NLD=Volgende;
                                 NOR=Neste;
                                 SVE=NÑsta];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextRecord;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PeriodFormManagement.FindDate('>', Date, PeriodType);
                                 BaseDate := Date."Period Start";
                                 UpdateChart;
                               END;
                                }
      { 1100528622;1 ;Action    ;
                      CaptionML=[DEU=Erstellen ServiceÅberwachung;
                                 ENU=Create Service Control;
                                 NLD=Servicebewaking aanmaken;
                                 NOR=Opprett servicekontroll;
                                 SVE=Skapa servicekontroll];
                      Promoted=Yes;
                      Image=AddAction;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 REPORT.RUNMODAL(REPORT::"Create Service Control");
                                 BufferedFromDate := 0D;
                                 UpdateChart;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100528600;;Container;
                ContainerType=ContentArea }

    { 1100528609;1;Group  ;
                CaptionML=[DEU=Allgemein;
                           ENU=General;
                           NLD=Algemeen;
                           NOR=Generell;
                           SVE=AllmÑnt];
                GroupType=Group }

    { 1100528610;2;Field  ;
                CaptionML=[NOR=Avdelingsfilter;
                           SVE=Avdelningsfilter];
                SourceExpr=DepartmentFilter;
                CaptionClass='1,3,1';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528611;2;Field  ;
                CaptionML=[DEU=Gebietsfilter;
                           ENU=Territory Filter;
                           NLD=Regiofilter;
                           NOR=Distriktsfilter;
                           SVE=Distriktsfilter];
                SourceExpr=TerritoryFilter;
                TableRelation=Territory.Code;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528612;2;Field  ;
                CaptionML=[DEU=Angebotsgenerierungsstatusfilter;
                           ENU=Try-out Quote Status Filter;
                           NLD=Trajectoffertestatusfilter;
                           NOR=Statusfilter for tilbudsforespõrsel;
                           SVE=Statusfilter fîr anbudsfîrfrÜgan];
                SourceExpr=TryoutQuoteStatusFilter;
                TableRelation="Try-out Status".Code WHERE (Type=CONST(Try-out Quote));
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528500;2;Field  ;
                CaptionML=[DEU=Erfolgschancenfilter;
                           ENU=Scoring Percentage Filter;
                           NLD=Scoringskansfilter];
                SourceExpr=ScoringPercentageFilter;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528613;2;Field  ;
                CaptionML=[DEU=Disziplinfilter;
                           ENU=Discipline Filter;
                           NLD=Disciplinefilter;
                           NOR=Disiplinfilter;
                           SVE=Disciplinfilter];
                SourceExpr=DisciplineFilter;
                OnValidate=BEGIN
                             UpdateChart;
                           END;

                OnLookup=VAR
                           Discipline@1100527300 : Record 11020204;
                         BEGIN
                           IF PAGE.RUNMODAL(0,Discipline) = ACTION::LookupOK THEN BEGIN
                             Text := Discipline.Code;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 1100528614;2;Field  ;
                CaptionML=[DEU=Fachgebietfilter;
                           ENU=Trade Speciality Filter;
                           NLD=Vakgebiedfilter;
                           NOR=SNI-nummerfilter;
                           SVE=SNI-nummerfilter];
                SourceExpr=TradeSpecFilter;
                OnValidate=BEGIN
                             UpdateChart;
                           END;

                OnLookup=VAR
                           TradeSpeciality@1100528600 : Record 11020285;
                         BEGIN
                           TradeSpeciality.SETFILTER(Discipline,DisciplineFilter);
                           IF PAGE.RUNMODAL(0,TradeSpeciality) = ACTION::LookupOK THEN BEGIN
                             Text := TradeSpeciality.Code;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 1100528505;2;Field  ;
                CaptionML=[DEU=Projektfilter;
                           ENU=Project Filter;
                           NLD=Projectfilter;
                           NOR=Prosjektfilter;
                           SVE=Projektfilter];
                SourceExpr=ProjectFilter;
                TableRelation=Job;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528502;2;Field  ;
                CaptionML=[DEU=Projektstatusfilter;
                           ENU=Project Status Filter;
                           NLD=Projectstatusfilter];
                SourceExpr=ProjectStatusFilter;
                TableRelation="Option Value"."Option Value" WHERE (Option Type=CONST(Project Status));
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528503;2;Field  ;
                CaptionML=[DEU=Servicevertragsstatusfilter;
                           ENU=ServiceContract Status Filter;
                           NLD=Servicecontractstatusfilter];
                SourceExpr=ServiceContractStatusFilter;
                TableRelation="Option Value"."Option Value" WHERE (Option Type=CONST(Service Contract Status)) }

    { 1100528615;2;Field  ;
                CaptionML=[DEU=WartungsaktivitÑten;
                           ENU=Maintenance Activities;
                           NLD=Onderhoud];
                SourceExpr=MaintActivitiesVisible;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528620;2;Field  ;
                CaptionML=[DEU=Meldungen;
                           ENU=Call Activities;
                           NLD=Meldingen];
                SourceExpr=CallActivitiesVisible;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528616;2;Field  ;
                CaptionML=[DEU=ZusÑtzliche AktivitÑten (Prognose);
                           ENU=Additional Activities (Prognosis);
                           NLD=Meerwerk (prognose)];
                SourceExpr=AddActivitiesVisible;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528617;2;Field  ;
                CaptionML=[DEU=Angebotsgenerierungen KapazitÑtsbedarf;
                           ENU=Try-out Quote Capacity Need;
                           NLD=Trajectoffertes capaciteitsbehoefte];
                SourceExpr=TryoutActivitiesVisible;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528501;2;Field  ;
                CaptionML=[DEU=Projekt-KapazitÑtsbedarf;
                           ENU=Project Capacity Need;
                           NLD=Project capaciteitsbehoefte];
                SourceExpr=ProjectRequestedVisible;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528618;2;Field  ;
                CaptionML=[DEU=Besetzung;
                           ENU=Occupation;
                           NLD=Bezetting;
                           NOR=Yrke;
                           SVE=Yrke];
                SourceExpr=OccupationVisible;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528621;2;Field  ;
                CaptionML=[DEU=Herkunft Belegungsprognose;
                           ENU=Source Occupation Prognosis;
                           NLD=Bron bezettingsprognose];
                OptionCaptionML=[DEU=Mitarbeiter, Abteilung, Territorium;
                                 ENU=Employee,Department,Territory;
                                 NLD=Werknemer,Kostenplaats,Regio];
                SourceExpr=SourceOccupationPrognosis;
                Editable=OccupationVisible;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528619;2;Field  ;
                CaptionML=[DEU=öber-/UnterkapazitÑt;
                           ENU=Over/Under Capacity;
                           NLD=Over-/ondercapaciteit];
                SourceExpr=DeltaOccupationVisible;
                Editable=OccupationVisible;
                OnValidate=BEGIN
                             UpdateChart;
                           END;
                            }

    { 1100528604;1;Group  ;
                CaptionML=[DEU=Diagramm;
                           ENU=Chart;
                           NLD=Diagram;
                           NOR=Diagram;
                           SVE=Diagram];
                GroupType=Group }

    { 1100528601;2;Field  ;
                Name=Chart;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.BusinessChart;PublicKeyToken=31bf3856ad364e35] }

    { 1100528603;1;Group  ;
                CaptionML=[DEU=Optionen;
                           ENU=Options;
                           NLD=Opties;
                           NOR=Alternativer;
                           SVE=Alternativ];
                GroupType=Group }

    { 1100528608;2;Field  ;
                CaptionML=[DEU=Anzeigen nach;
                           ENU=View by;
                           NLD=Weergeven per;
                           NOR=Vis per;
                           SVE=Visa per];
                OptionCaptionML=[DEU=Tag,Woche,Monat,Quartal,Jahr,Periode;
                                 ENU=Day,Week,Month,Quarter,Year,Period;
                                 NLD=Dag,Week,Maand,Kwartaal,Jaar,Periode;
                                 NOR=Dag,Uke,MÜned,Kvartal,èr,Periode;
                                 SVE=Dag,Vecka,MÜnad,Kvartal,èr,Period];
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             PeriodFormManagement.FindDate('=<>',Date,PeriodType);
                             UpdateChart;
                           END;
                            }

    { 1100528602;2;Field  ;
                CaptionML=[DEU=Anz. der Perioden;
                           ENU=No. Of Periods;
                           NLD=Aantal perioden];
                SourceExpr=NoOfColumns;
                OnValidate=BEGIN
                             IF NoOfColumns <= 0 THEN
                               ERROR(Text001);
                             UpdateChart;
                           END;
                            }

  }
  CODE
  {
    VAR
      BusinessChartBuffer@1100528600 : Record 485;
      Date@1100528611 : Record 2000000007;
      Project@1100528503 : Record 11072003;
      TmpCapacityNeedDetail@1100528637 : TEMPORARY Record 11012884;
      TmpServiceContractCtrlBudget@1100528638 : TEMPORARY Record 11071759;
      TmpProjectCapacityNeedDetail@1100528519 : TEMPORARY Record 11229349;
      PeriodFormManagement@1100528610 : Codeunit 359;
      MaintActivitiesIndex@1100528601 : Integer;
      CallActivitiesIndex@1100528633 : Integer;
      AddActivitiesIndex@1100528602 : Integer;
      TryoutActivitiesIndex@1100528603 : Integer;
      ProjectRequestedIndex@1100528507 : Integer;
      OccupationIndex@1100528605 : Integer;
      DeltaOccupationIndex@1100528606 : Integer;
      PeriodType@1100528608 : 'Day,Week,Month,Quarter,Year';
      BaseDate@1100528607 : Date;
      NoOfColumns@1100528609 : Integer;
      DisciplineFilter@1100528622 : Code[250];
      TradeSpecFilter@1100528621 : Code[250];
      DepartmentFilter@1100528620 : Code[250];
      TerritoryFilter@1100528619 : Code[250];
      TryoutQuoteStatusFilter@1100528618 : Code[250];
      Text000@1100528604 : TextConst 'DEU=Tag,Woche,Monat,Quartal,Jahr,Periode;ENU=Day,Week,Month,Quarter,Year,Period;NLD=Dag,Week,Maand,Kwartaal,Jaar,Periode;NOR=Dag,Uke,MÜned,Kvartal,èr,Periode;SVE=Dag,Vecka,MÜnad,Kvartal,èr,Period';
      Text001@1100528623 : TextConst 'DEU=Die Anz. der Perioden muss mindestens 1 sein;ENU=No. of Periods must be at least 1;NLD=Aantal perioden dient minimaal 1 te zijn';
      ScoringPercentageFilter@1100528501 : Code[250];
      ProjectFilter@1100528500 : Code[250];
      ProjectStatusFilter@1100528502 : Text[250];
      ServiceContractStatusFilter@1100528504 : Text[250];
      MaintActivitiesVisible@1100528624 : Boolean;
      CallActivitiesVisible@1100528635 : Boolean;
      AddActivitiesVisible@1100528625 : Boolean;
      TryoutActivitiesVisible@1100528626 : Boolean;
      ProjectRequestedVisible@1100528515 : Boolean;
      OccupationVisible@1100528627 : Boolean;
      DeltaOccupationVisible@1100528628 : Boolean;
      Text002@1100528639 : TextConst 'DEU=Fortsetzung: @1@@@@@@@@@@@;ENU=Progress: @1@@@@@@@@@@@;NLD=Voortgang: @1@@@@@@@@@@@;NOR=Fremdrift: @1@@@@@@@@@@@;SVE=Fîrlopp: @1@@@@@@@@@@@';
      TextMaintActivities@1100528615 : TextConst 'DEU=Wartung;ENU=Maintenance;NLD=Onderhoud;NOR=Vedlikehold;SVE=UnderhÜll';
      TextCallActivities@1100528636 : TextConst 'DEU=Meldungen;ENU=Calls;NLD=Meldingen;NOR=Samtaler;SVE=samtal';
      TextAddActivities@1100528629 : TextConst 'DEU=ZusÑtzliche AktivitÑten (Prognose);ENU=Additional Activities (Prognosis);NLD=Meerwerk (prognose)';
      TextTryoutActivities@1100528630 : TextConst 'DEU=Angebotsgenerierung KapazitÑtsbedarf;ENU=Try-out Quote Capacity Need;NLD=Trajectofferte cap. behoefte';
      TextProjectRequested@1100528509 : TextConst 'DEU=Projekt-KapazitÑtsbedarf;ENU=Project Capacity Need;NLD=Project cap. behoefte';
      TextOccupation@1100528631 : TextConst 'DEU=Besetzung;ENU=Occupation;NLD=Bezetting;NOR=Yrke;SVE=Yrke';
      TextDeltaOccupation@1100528632 : TextConst 'DEU=öber-/UnterkapazitÑt;ENU=Over/Under Capacity;NLD=Over-/onderbezetting';
      BufferedFromDate@1100528640 : Date;
      SourceOccupationPrognosis@1100528612 : 'Employee,Department,Territory';

    LOCAL PROCEDURE SetMaintActivitiesFilter@1100528613(Date@1100528500 : Record 2000000007);
    BEGIN
      TmpServiceContractCtrlBudget.RESET;
      TmpServiceContractCtrlBudget.SETRANGE("Reference Date",Date."Period Start",Date."Period End");
      TmpServiceContractCtrlBudget.SETRANGE("Budget Type",TmpServiceContractCtrlBudget."Budget Type"::Budget);
      TmpServiceContractCtrlBudget.SETFILTER("Global Dimension 1 Code",DepartmentFilter);
      TmpServiceContractCtrlBudget.SETFILTER(Discipline,DisciplineFilter);
      TmpServiceContractCtrlBudget.SETFILTER("Trade Speciality",TradeSpecFilter);
      TmpServiceContractCtrlBudget.SETFILTER("Territory Code",TerritoryFilter);
      TmpServiceContractCtrlBudget.SETFILTER("Service Contract Status",ServiceContractStatusFilter);
    END;

    LOCAL PROCEDURE SetCallActivitiesFilter@1100528616(Date@1100528500 : Record 2000000007);
    BEGIN
      TmpServiceContractCtrlBudget.RESET;
      TmpServiceContractCtrlBudget.SETRANGE("Reference Date",Date."Period Start",Date."Period End");
      TmpServiceContractCtrlBudget.SETRANGE("Budget Type",TmpServiceContractCtrlBudget."Budget Type"::"Budget Calls");
      TmpServiceContractCtrlBudget.SETFILTER("Global Dimension 1 Code",DepartmentFilter);
      TmpServiceContractCtrlBudget.SETFILTER(Discipline,DisciplineFilter);
      TmpServiceContractCtrlBudget.SETFILTER("Trade Speciality",TradeSpecFilter);
      TmpServiceContractCtrlBudget.SETFILTER("Territory Code",TerritoryFilter);
      TmpServiceContractCtrlBudget.SETFILTER("Service Contract Status",ServiceContractStatusFilter);
    END;

    LOCAL PROCEDURE SetAddActivitiesFilter@1100528617(Date@1100528500 : Record 2000000007);
    BEGIN
      TmpCapacityNeedDetail.RESET;
      TmpCapacityNeedDetail.SETRANGE(Type,TmpCapacityNeedDetail.Type::Workload);
      TmpCapacityNeedDetail.SETRANGE("Workload Type",TmpCapacityNeedDetail."Workload Type"::ServiceContract);
      TmpCapacityNeedDetail.SETRANGE(Date,Date."Period Start",Date."Period End");
      TmpCapacityNeedDetail.SETFILTER("Global Dimension 1 Code",DepartmentFilter);
      TmpCapacityNeedDetail.SETFILTER("Discipline Code",DisciplineFilter);
      TmpCapacityNeedDetail.SETFILTER("Trade Speciality Code",TradeSpecFilter);
      TmpCapacityNeedDetail.SETFILTER("Territory Code",TerritoryFilter);
      TmpCapacityNeedDetail.SETFILTER("Service Contract Status",ServiceContractStatusFilter);
    END;

    LOCAL PROCEDURE SetTryoutActivitiesFilter@1100528618(Date@1100528500 : Record 2000000007);
    BEGIN
      TmpCapacityNeedDetail.RESET;
      TmpCapacityNeedDetail.SETRANGE(Type,TmpCapacityNeedDetail.Type::Workload);
      TmpCapacityNeedDetail.SETRANGE("Workload Type",TmpCapacityNeedDetail."Workload Type"::TryoutQuote);
      TmpCapacityNeedDetail.SETRANGE(Date,Date."Period Start",Date."Period End");
      TmpCapacityNeedDetail.SETFILTER("Global Dimension 1 Code",DepartmentFilter);
      TmpCapacityNeedDetail.SETFILTER("Discipline Code",DisciplineFilter);
      TmpCapacityNeedDetail.SETFILTER("Trade Speciality Code",TradeSpecFilter);
      TmpCapacityNeedDetail.SETFILTER("Territory Code",TerritoryFilter);
      TmpCapacityNeedDetail.SETFILTER("Try-out Quote Status",TryoutQuoteStatusFilter);
      TmpCapacityNeedDetail.SETFILTER("Scoring Percentage",ScoringPercentageFilter);
    END;

    LOCAL PROCEDURE SetProjectRequestedFilter@1100528501(Date@1100528500 : Record 2000000007);
    BEGIN
      TmpProjectCapacityNeedDetail.RESET;
      TmpProjectCapacityNeedDetail.SETRANGE("Need Date",Date."Period Start",Date."Period End");
      TmpProjectCapacityNeedDetail.SETFILTER("Project No.",ProjectFilter);
      TmpProjectCapacityNeedDetail.SETFILTER(Discipline,DisciplineFilter);
      TmpProjectCapacityNeedDetail.SETFILTER("Project Status",ProjectStatusFilter);
    END;

    LOCAL PROCEDURE SetOccupationFilter@1100528619(Date@1100528500 : Record 2000000007);
    BEGIN
      TmpCapacityNeedDetail.RESET;
      TmpCapacityNeedDetail.SETRANGE(Type,TmpCapacityNeedDetail.Type::Occupation);
      TmpCapacityNeedDetail.SETRANGE(Date,Date."Period Start",Date."Period End");
      TmpCapacityNeedDetail.SETFILTER("Global Dimension 1 Code",DepartmentFilter);
      TmpCapacityNeedDetail.SETFILTER("Discipline Code",DisciplineFilter);
      TmpCapacityNeedDetail.SETFILTER("Trade Speciality Code",TradeSpecFilter);
      TmpCapacityNeedDetail.SETFILTER("Territory Code",TerritoryFilter);
      CASE SourceOccupationPrognosis OF
        SourceOccupationPrognosis::Employee:
          TmpCapacityNeedDetail.SETFILTER("Source Code",'<>%1','');
        SourceOccupationPrognosis::Department:
          BEGIN
            TmpCapacityNeedDetail.SETRANGE("Source Code",'');
            TmpCapacityNeedDetail.SETRANGE("Territory Code",'');
          END;
        SourceOccupationPrognosis::Territory:
          BEGIN
            TmpCapacityNeedDetail.SETRANGE("Source Code",'');
            TmpCapacityNeedDetail.SETRANGE("Global Dimension 1 Code",'');
          END;
      END;
    END;

    LOCAL PROCEDURE GetMaintActivities@1100528603(Date@1100528500 : Record 2000000007) Hours : Decimal;
    BEGIN
      SetMaintActivitiesFilter(Date);
      TmpServiceContractCtrlBudget.CALCSUMS(Hours);
      Hours := TmpServiceContractCtrlBudget.Hours;
    END;

    LOCAL PROCEDURE GetCallActivities@1100528615(Date@1100528500 : Record 2000000007) Hours : Decimal;
    BEGIN
      SetCallActivitiesFilter(Date);
      TmpServiceContractCtrlBudget.CALCSUMS(Hours);
      Hours := TmpServiceContractCtrlBudget.Hours;
    END;

    LOCAL PROCEDURE GetAddActivities@1100528605(Date@1100528500 : Record 2000000007) : Decimal;
    BEGIN
      SetAddActivitiesFilter(Date);
      TmpCapacityNeedDetail.CALCSUMS(Hours);
      EXIT(TmpCapacityNeedDetail.Hours);
    END;

    LOCAL PROCEDURE GetTryoutActivities@1100528606(Date@1100528500 : Record 2000000007) : Decimal;
    BEGIN
      SetTryoutActivitiesFilter(Date);
      TmpCapacityNeedDetail.CALCSUMS(Hours);
      EXIT(TmpCapacityNeedDetail.Hours);
    END;

    LOCAL PROCEDURE GetProjectRequested@1100528502(Date@1100528600 : Record 2000000007) : Decimal;
    BEGIN
      SetProjectRequestedFilter(Date);
      TmpProjectCapacityNeedDetail.CALCSUMS("Requested Hours");
      EXIT(TmpProjectCapacityNeedDetail."Requested Hours");
    END;

    LOCAL PROCEDURE GetOccupationHours@1100528600(Date@1100528500 : Record 2000000007) : Decimal;
    BEGIN
      SetOccupationFilter(Date);
      TmpCapacityNeedDetail.CALCSUMS(Hours);
      EXIT(TmpCapacityNeedDetail.Hours);
    END;

    LOCAL PROCEDURE ShowMaintActivities@1100528608(IOffset@1100528600 : Integer);
    VAR
      PassDatabetweenPages@1100529600 : Codeunit 11012634;
      Date@1100528601 : Record 2000000007;
    BEGIN
      GetPeriod(IOffset,Date);
      SetMaintActivitiesFilter(Date);
      PassDatabetweenPages.SetUserPeriodType(PeriodType, PAGE::"Activities/Occ. Bar Chart");
      PAGE.RUNMODAL(0,TmpServiceContractCtrlBudget);
      IF PassDatabetweenPages.GetServiceContractCtrlBudgetWasUpdated THEN BEGIN
        PassDatabetweenPages.UpdateServiceContractCtrlBudget(TmpServiceContractCtrlBudget);
        UpdateChart;
      END;
    END;

    LOCAL PROCEDURE ShowCallActivities@1100528614(IOffset@1100528600 : Integer);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      GetPeriod(IOffset,Date);
      SetCallActivitiesFilter(Date);
      PAGE.RUNMODAL(0,TmpServiceContractCtrlBudget);
    END;

    LOCAL PROCEDURE ShowAddActivities@1100528607(IOffset@1100528600 : Integer);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      GetPeriod(IOffset,Date);
      SetAddActivitiesFilter(Date);
      PAGE.RUNMODAL(0,TmpCapacityNeedDetail);
    END;

    LOCAL PROCEDURE ShowTryoutActivities@1100528609(IOffset@1100528600 : Integer);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      GetPeriod(IOffset,Date);
      SetTryoutActivitiesFilter(Date);
      PAGE.RUNMODAL(0,TmpCapacityNeedDetail);
    END;

    LOCAL PROCEDURE ShowProjectRequested@1100528529(IOffset@1100528600 : Integer);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      GetPeriod(IOffset,Date);
      SetProjectRequestedFilter(Date);
      PAGE.RUNMODAL(0,TmpProjectCapacityNeedDetail);
    END;

    LOCAL PROCEDURE ShowOccupationHours@1100528602(IOffset@1100528600 : Integer);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      GetPeriod(IOffset,Date);
      SetOccupationFilter(Date);
      PAGE.RUNMODAL(0,TmpCapacityNeedDetail);
    END;

    LOCAL PROCEDURE UpdateChart@1100528601();
    VAR
      Date@1100528604 : Record 2000000007;
      Year@1100528603 : Integer;
      Offset@1100528602 : Integer;
      ColumnName@1100528601 : Text[30];
      PeriodDate@1100528600 : Date;
      WorkloadTotal@1100528605 : Decimal;
      MaintActivitiesHours@1100528611 : Decimal;
      CallActivitiesHours@1100528610 : Decimal;
      AddActivitiesHours@1100528609 : Decimal;
      TryoutActivitiesHours@1100528608 : Decimal;
      ProjectRequestedHours@1100528503 : Decimal;
      Occupation@1100528607 : Decimal;
      DeltaOccupation@1100528606 : Decimal;
    BEGIN
      BuildTmpTables;

      WITH BusinessChartBuffer DO BEGIN
        Initialize;
        AddMeasure(TextMaintActivities,MaintActivitiesIndex,"Data Type"::Decimal,"Chart Type"::StackedColumn);
        AddMeasure(TextCallActivities,CallActivitiesIndex,"Data Type"::Decimal,"Chart Type"::StackedColumn);
        AddMeasure(TextAddActivities,AddActivitiesIndex,"Data Type"::Decimal,"Chart Type"::StackedColumn);
        AddMeasure(TextTryoutActivities,TryoutActivitiesIndex,"Data Type"::Decimal,"Chart Type"::StackedColumn);
        AddMeasure(TextProjectRequested,ProjectRequestedIndex,"Data Type"::Decimal,"Chart Type"::StackedColumn);

        IF OccupationVisible THEN
          AddMeasure(TextOccupation,OccupationIndex,"Data Type"::Decimal,"Chart Type"::Line)
        ELSE
          AddMeasure(TextOccupation,OccupationIndex,"Data Type"::Decimal,"Chart Type"::Column);
        IF DeltaOccupationVisible THEN
          AddMeasure(TextDeltaOccupation,DeltaOccupationIndex,"Data Type"::Decimal,"Chart Type"::Line)
        ELSE
          AddMeasure(TextDeltaOccupation,DeltaOccupationIndex,"Data Type"::Decimal,"Chart Type"::Column);
        SetXAxis(GetPeriodTypeText(PeriodType),"Data Type"::String);

        Date."Period Start" := BaseDate;
        PeriodFormManagement.FindDate('=<>',Date,PeriodType);

        FOR Offset := 0 TO NoOfColumns -1 DO BEGIN
          IF Offset > 0 THEN
            PeriodFormManagement.NextDate(1,Date,PeriodType);
          PeriodDate := Date."Period Start";
          Year := DATE2DMY(PeriodDate,3);
          ColumnName := PeriodFormManagement.CreatePeriodFormat(PeriodType,PeriodDate);

          AddColumn(ColumnName);

          IF MaintActivitiesVisible THEN
            MaintActivitiesHours := GetMaintActivities(Date);
          IF CallActivitiesVisible THEN
            CallActivitiesHours := GetCallActivities(Date);
          IF AddActivitiesVisible THEN
            AddActivitiesHours := GetAddActivities(Date);
          IF TryoutActivitiesVisible THEN
            TryoutActivitiesHours := GetTryoutActivities(Date);
          IF ProjectRequestedVisible THEN
            ProjectRequestedHours := GetProjectRequested(Date);

          WorkloadTotal := 0;
          IF MaintActivitiesVisible THEN
            WorkloadTotal += MaintActivitiesHours;
          IF CallActivitiesVisible THEN
            WorkloadTotal += CallActivitiesHours;
          IF AddActivitiesVisible THEN
            WorkloadTotal += AddActivitiesHours;
          IF TryoutActivitiesVisible THEN
            WorkloadTotal += TryoutActivitiesHours;
          IF ProjectRequestedVisible THEN
            WorkloadTotal += ProjectRequestedHours;

          Occupation := GetOccupationHours(Date);
          DeltaOccupation := Occupation - WorkloadTotal;

          IF MaintActivitiesVisible THEN
            BusinessChartBuffer.SetValueByIndex(MaintActivitiesIndex -1,Offset,MaintActivitiesHours);
          IF CallActivitiesVisible THEN
            BusinessChartBuffer.SetValueByIndex(CallActivitiesIndex -1,Offset,CallActivitiesHours);
          IF AddActivitiesVisible THEN
            BusinessChartBuffer.SetValueByIndex(AddActivitiesIndex -1,Offset,AddActivitiesHours);
          IF TryoutActivitiesVisible THEN
            BusinessChartBuffer.SetValueByIndex(TryoutActivitiesIndex -1,Offset,TryoutActivitiesHours);
          IF ProjectRequestedVisible THEN
            BusinessChartBuffer.SetValueByIndex(ProjectRequestedIndex -1,Offset,ProjectRequestedHours);

          IF OccupationVisible THEN
            BusinessChartBuffer.SetValueByIndex(OccupationIndex -1,Offset,Occupation);
          IF DeltaOccupationVisible THEN
            BusinessChartBuffer.SetValueByIndex(DeltaOccupationIndex -1,Offset,DeltaOccupation);
        END;
        Update(CurrPage.Chart);
      END;
    END;

    LOCAL PROCEDURE GetPeriod@1100528604(IOffset@1100528600 : Integer;VAR ODate@1100528601 : Record 2000000007);
    BEGIN
      ODate."Period Start" := BaseDate;
      PeriodFormManagement.FindDate('=<>',ODate,PeriodType);
      IF IOffset <> 0 THEN
        PeriodFormManagement.NextDate(IOffset,ODate,PeriodType);
    END;

    LOCAL PROCEDURE GetPeriodTypeText@1100528610(IPeriodType@1100528600 : Option) PeriodTypeText : Text;
    VAR
      OptionFieldTools@1100528601 : Codeunit 11012271;
    BEGIN
      OptionFieldTools.OptionValueToReadableOption(Text000,IPeriodType,PeriodTypeText);
    END;

    LOCAL PROCEDURE DetermineMeasurementIndexes@1100528611();
    BEGIN
      MaintActivitiesIndex := 1;
      CallActivitiesIndex := 2;
      AddActivitiesIndex := 3;
      TryoutActivitiesIndex := 4;
      ProjectRequestedIndex := 5;

      OccupationIndex := 6;
      DeltaOccupationIndex := 7;
    END;

    LOCAL PROCEDURE BuildTmpTables@1100528612();
    VAR
      ServiceSetup@1100528608 : Record 11012800;
      CapacityNeedDetail@1100528600 : Record 11012884;
      ServiceContract@1100528602 : Record 11012812;
      ServiceContractCtrlBudget@1100528603 : Record 11071759;
      ProjectCapacityNeedDetail@1100528500 : Record 11229349;
      Dialog@1100528604 : Dialog;
      FromDate@1100528607 : Date;
      ToDate@1100528601 : Date;
      RecordCount@1100528605 : Integer;
      RecordCounter@1100528606 : Integer;
    BEGIN
      Dialog.OPEN(Text002);
      FromDate := DMY2DATE(1,1,DATE2DMY(BaseDate,3));
      IF (BufferedFromDate <> 0D) AND (FromDate >= BufferedFromDate) THEN
        EXIT;
      BufferedFromDate := FromDate;

      ServiceSetup.GET;

      TmpCapacityNeedDetail.RESET;
      TmpCapacityNeedDetail.DELETEALL;


      TmpServiceContractCtrlBudget.RESET;
      TmpServiceContractCtrlBudget.DELETEALL;

      TmpProjectCapacityNeedDetail.RESET;
      TmpProjectCapacityNeedDetail.DELETEALL;

      ToDate := 99991231D;
      CapacityNeedDetail.SETRANGE(Date,BufferedFromDate,ToDate);
      IF CapacityNeedDetail.FINDSET THEN
        REPEAT
          TmpCapacityNeedDetail := CapacityNeedDetail;
          TmpCapacityNeedDetail.INSERT;
        UNTIL CapacityNeedDetail.NEXT = 0;

      ServiceContract.SETRANGE("No. of Control Messages",0);
      IF ServiceContract.FINDSET THEN BEGIN
        RecordCount := ServiceContract.COUNT;
        REPEAT
          IF ServiceSetup."Service Control Method" = ServiceSetup."Service Control Method"::Snapshot THEN
            ServiceContractCtrlBudget.SETRANGE("Reporting Date", ServiceContract."Control Build Date")
          ELSE
            ServiceContractCtrlBudget.SETCURRENTKEY("Service Control Method");
          ServiceContractCtrlBudget.SETRANGE("Service Control Method", ServiceSetup."Service Control Method");
          ServiceContractCtrlBudget.SETRANGE("Service Contract No.",ServiceContract."No.");
          ServiceContractCtrlBudget.SETRANGE("Reference Date",BufferedFromDate,ToDate);
          ServiceContractCtrlBudget.SETFILTER("Budget Type",'%1|%2',
            ServiceContractCtrlBudget."Budget Type"::Budget,
            ServiceContractCtrlBudget."Budget Type"::"Budget Calls");
          ServiceContractCtrlBudget.SETRANGE("Service Control Method", ServiceSetup."Service Control Method");
          IF ServiceContractCtrlBudget.FINDSET THEN
            REPEAT
              TmpServiceContractCtrlBudget := ServiceContractCtrlBudget;
              TmpServiceContractCtrlBudget.INSERT;
            UNTIL ServiceContractCtrlBudget.NEXT = 0;
          RecordCounter += 1;
          Dialog.UPDATE(1,ROUND(RecordCounter/RecordCount * 10000,1));
        UNTIL ServiceContract.NEXT = 0;
      END;

      ProjectCapacityNeedDetail.SETRANGE("Need Date",BufferedFromDate,ToDate);
      IF ProjectCapacityNeedDetail.FINDSET THEN
        REPEAT
          TmpProjectCapacityNeedDetail := ProjectCapacityNeedDetail;
          TmpProjectCapacityNeedDetail.INSERT;
        UNTIL ProjectCapacityNeedDetail.NEXT = 0;

      Dialog.CLOSE;
    END;

    LOCAL PROCEDURE BuildOptionValueTable@1100528500();
    VAR
      OptionValue@1100528500 : Record 11229411;
    BEGIN
      OptionValue.BuildProjectStatuses;
      OptionValue.BuildServiceContractStatuses;
    END;

    EVENT Chart@-1100528601::DataPointClicked@1(point@1100525000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    VAR
      DrillDownIndex@1100525001 : Integer;
    BEGIN
      BusinessChartBuffer.SetDrillDownIndexes(point);
      DrillDownIndex := BusinessChartBuffer."Drill-Down X Index";
      CASE BusinessChartBuffer."Drill-Down Measure Index" + 1 OF
        MaintActivitiesIndex:
          ShowMaintActivities(DrillDownIndex);
        CallActivitiesIndex:
          ShowCallActivities(DrillDownIndex);
        AddActivitiesIndex:
          ShowAddActivities(DrillDownIndex);
        TryoutActivitiesIndex:
          ShowTryoutActivities(DrillDownIndex);
        ProjectRequestedIndex:
          ShowProjectRequested(DrillDownIndex);
        OccupationIndex:
          ShowOccupationHours(DrillDownIndex);
        DeltaOccupationIndex:;
      END;
    END;

    EVENT Chart@-1100528601::DataPointDoubleClicked@2(point@1100525000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
    END;

    EVENT Chart@-1100528601::AddInReady@3();
    BEGIN
      UpdateChart;
    END;

    EVENT Chart@-1100528601::Refresh@4();
    BEGIN
    END;

    BEGIN
    END.
  }
}

