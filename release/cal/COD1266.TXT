OBJECT Codeunit 1266 Encryption Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    Permissions=TableData 1261=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExportEncryptionKeyFileDialogTxt@1000 : TextConst 'ENU=Choose the location where you want to save the encryption key.;NOR=Velg plasseringen der du vil lagre krypteringsn›kkelen.;SVE=Bl„ddra till den plats d„r du vill spara krypteringsnyckeln.';
      ExportEncryptionKeyConfirmQst@1006 : TextConst 'ENU=The encryption key file must be protected by a password and stored in a safe location.\\Do you want to save the encryption key?;NOR=Krypteringsn›kkelfilen m† v‘re passordbeskyttet og lagres p† et trygt sted.\\Vil du lagre krypteringsn›kkelen?;SVE=Krypteringsnyckeln m†ste skyddas med ett l”senord och sparas p† en s„ker plats.\\Vill du spara krypteringsnyckeln?';
      FileImportCaptionMsg@1008 : TextConst 'ENU=Select a key file to import.;NOR=Velg en n›kkelfil for import.;SVE=V„lj en nyckelfil att importera.';
      DefaultEncryptionKeyFileNameTxt@1009 : TextConst 'ENU=EncryptionKey.key;NOR=EncryptionKey.key;SVE=EncryptionKey.key';
      EncryptionKeyFilExtnTxt@1010 : TextConst 'ENU=.key;NOR=.key;SVE=.key';
      KeyFileFilterTxt@1012 : TextConst 'ENU=Key File(*.key)|*.key;NOR=N›kkelfil (*.key)|*.key;SVE=Nyckelfil(*.key)|*.key';
      ReencryptConfirmQst@1013 : TextConst 'ENU=The encryption is already enabled. Continuing will decrypt the encrypted data and encrypt it again with the new key.\\Do you want to continue?;NOR=Kryptering er allerede aktivert. Hvis du fortsetter, blir de krypterte dataene dekrypert og kryptert p† nytt med den nye n›kkelen.\\Vil du fortsette?;SVE=Krypteringen „r redan aktiverad. Om du forts„tter kommer krypterade data avkrypteras och krypteras igen med den nya nyckeln.\\Vill du forts„tta?';
      EncryptionKeyImportedMsg@1014 : TextConst 'ENU=The key was imported successfully.;NOR=N›kkelen er importert.;SVE=Nyckeln har importerats.';
      EnableEncryptionConfirmTxt@1015 : TextConst 'ENU=Enabling encryption will generate an encryption key on the server.\It is recommended that you save a copy of the encryption key in a safe location.\\Do you want to continue?;NOR=Hvis du aktiverer kryptering, genereres en krypteringsn›kkel p† serveren.\Det anbefales at du lagrer en kopi av krypteringsn›kkelen p† et trygt sted.\\Vil du fortsette?;SVE=Om du aktiverar krypteringen kommer en krypteringsnyckel att genereras p† servern.\Vi rekommenderar att du sparar en kopia av krypteringsnyckeln p† en s„ker plats.\\Vill du forts„tta?';
      DisableEncryptionConfirmQst@1016 : TextConst 'ENU=Disabling encryption will decrypt the encrypted data and store it in the database in an unsecure way.\\Do you want to continue?;NOR=Hvis du deaktiverer kryptering, blir de krypterte dataene dekryptert og lagret i databasen p† en usikker m†te.\\Vil du fortsette?;SVE=Om du inaktiverar kryptering kommer krypterade data avkrypteras och lagras i databasen p† ett os„kert s„tt.\\Vill du forts„tta?';
      EncryptionCheckFailErr@1017 : TextConst 'ENU=Encryption is either not enabled or the encryption key cannot be found.;NOR=Kryptering er ikke aktivert, eller krypteringsn›kkelen finnes ikke.;SVE=Antingen „r kryptering inte aktiverad eller s† g†r det inte att hitta krypteringsnyckeln.';
      GlblSilentFileUploadDownload@1011 : Boolean;
      GlblTempClientFileName@1018 : Text;
      FileNameNotSetForSilentUploadErr@1019 : TextConst 'ENU=A file name was not specified for silent upload.;NOR=Et filnavn er ikke angitt for stille opplasting.;SVE=Ett filnamn har inte angetts f”r tyst uppladdning.';
      DeleteEncryptedDataConfirmQst@1002 : TextConst 'ENU=If you continue with this action all data that is encrypted will be deleted and lost.\Are you sure you want to delete all encrypted data?;NOR=Hvis du fortsetter med denne handlingen, blir alle krypterte data slettet og g†r tapt.\Er du sikker p† at du vil slette alle krypterte data?;SVE=Om du forts„tter med den h„r †tg„rden kommer alla data som „r krypterade att tas bort och g† f”rlorade.\Žr du s„ker p† att du vill ta bort alla krypterade data?';
      EncryptionIsNotActivatedQst@1001 : TextConst 'ENU=Data encryption is not activated. It is recommended that you encrypt data. \Do you want to open the Data Encryption Management window?;NOR=Datakryptering er ikke aktivert. Det anbefales at du krypterer data. \Vil du †pne vinduet Administrasjon av datakryptering?;SVE=Datakryptering har inte aktiverats. Vi rekommenderar att du krypterar data. \Vill du ”ppna f”nstret Datakrypteringshantering?';

    [External]
    PROCEDURE Encrypt@1(Text@1000 : Text) : Text;
    BEGIN
      AssertEncryptionPossible;
      IF Text = '' THEN
        EXIT('');
      EXIT(SYSTEM.ENCRYPT(Text));
    END;

    [External]
    PROCEDURE Decrypt@5(Text@1000 : Text) : Text;
    BEGIN
      AssertEncryptionPossible;
      IF Text = '' THEN
        EXIT('');
      EXIT(SYSTEM.DECRYPT(Text))
    END;

    [Internal]
    PROCEDURE ExportKey@4();
    VAR
      StdPasswordDialog@1000 : Page 9815;
      ServerFilename@1001 : Text;
    BEGIN
      AssertEncryptionPossible;
      IF CONFIRM(ExportEncryptionKeyConfirmQst,TRUE) THEN BEGIN
        StdPasswordDialog.EnableBlankPassword(FALSE);
        IF StdPasswordDialog.RUNMODAL <> ACTION::OK THEN
          EXIT;
        ServerFilename := EXPORTENCRYPTIONKEY(StdPasswordDialog.GetPasswordValue);
        DownloadFile(ServerFilename);
      END;
    END;

    [Internal]
    PROCEDURE ImportKey@3();
    VAR
      FileManagement@1003 : Codeunit 419;
      StdPasswordDialog@1002 : Page 9815;
      TempKeyFilePath@1000 : Text;
    BEGIN
      TempKeyFilePath := UploadFile;

      // TempKeyFilePath is '' if the used cancelled the Upload file dialog.
      IF TempKeyFilePath = '' THEN
        EXIT;

      StdPasswordDialog.EnableGetPasswordMode(FALSE);
      StdPasswordDialog.DisablePasswordConfirmation;
      IF StdPasswordDialog.RUNMODAL = ACTION::OK THEN BEGIN
        IF ENCRYPTIONENABLED THEN
          // Encryption is already enabled so we're just importing the key. If the imported
          // key does not match the already enabled encryption key the process will fail.
          ImportKeyWithoutEncryptingData(TempKeyFilePath,StdPasswordDialog.GetPasswordValue)
        ELSE
          ImportKeyAndEncryptData(TempKeyFilePath,StdPasswordDialog.GetPasswordValue);
      END;

      FileManagement.DeleteServerFile(TempKeyFilePath);
    END;

    [Internal]
    PROCEDURE ChangeKey@15();
    VAR
      FileManagement@1000 : Codeunit 419;
      StdPasswordDialog@1001 : Page 9815;
      TempKeyFilePath@1002 : Text;
    BEGIN
      TempKeyFilePath := UploadFile;

      // TempKeyFilePath is '' if the used cancelled the Upload file dialog.
      IF TempKeyFilePath = '' THEN
        EXIT;

      StdPasswordDialog.EnableGetPasswordMode(FALSE);
      StdPasswordDialog.DisablePasswordConfirmation;
      IF StdPasswordDialog.RUNMODAL = ACTION::OK THEN BEGIN
        IF IsEncryptionEnabled THEN BEGIN
          IF NOT CONFIRM(ReencryptConfirmQst,TRUE) THEN
            EXIT;
          DisableEncryption(TRUE);
        END;

        ImportKeyAndEncryptData(TempKeyFilePath,StdPasswordDialog.GetPasswordValue);
      END;

      FileManagement.DeleteServerFile(TempKeyFilePath);
    END;

    [Internal]
    PROCEDURE EnableEncryption@2();
    VAR
      StdPasswordDialog@1002 : Page 9815;
      ExportKey@1001 : Boolean;
      ServerFilename@1000 : Text;
    BEGIN
      IF CONFIRM(EnableEncryptionConfirmTxt,TRUE) THEN BEGIN
        IF CONFIRM(ExportEncryptionKeyConfirmQst,TRUE) THEN BEGIN
          StdPasswordDialog.EnableBlankPassword(FALSE);
          IF StdPasswordDialog.RUNMODAL <> ACTION::OK THEN
            ExportKey := TRUE;
        END;

        EnableEncryptionSilently;
        IF ExportKey THEN BEGIN
          ServerFilename := EXPORTENCRYPTIONKEY(StdPasswordDialog.GetPasswordValue);
          DownloadFile(ServerFilename);
        END;
      END;
    END;

    [Internal]
    PROCEDURE EnableEncryptionSilently@28();
    BEGIN
      // no user interaction on webservices
      CREATEENCRYPTIONKEY;
      EncryptDataInAllCompanies;
    END;

    PROCEDURE DisableEncryption@7(Silent@1000 : Boolean);
    BEGIN
      // Silent is FALSE when we want the user to take action on if the encryption should be disabled or not. In cases like import key
      // Silent should be TRUE as disabling encryption is a must before importing a new key, else data will be lost.
      IF NOT Silent THEN
        IF NOT CONFIRM(DisableEncryptionConfirmQst,TRUE) THEN
          EXIT;

      DecryptDataInAllCompanies;
      DELETEENCRYPTIONKEY;
    END;

    [External]
    PROCEDURE DeleteEncryptedDataInAllCompanies@14();
    VAR
      Company@1000 : Record 2000000006;
    BEGIN
      IF CONFIRM(DeleteEncryptedDataConfirmQst) THEN BEGIN
        Company.FINDSET;
        REPEAT
          DeleteServicePasswordData(Company.Name);
          DeleteKeyValueData(Company.Name);
        UNTIL Company.NEXT = 0;
        DELETEENCRYPTIONKEY;
      END;
    END;

    [External]
    PROCEDURE IsEncryptionEnabled@20() : Boolean;
    BEGIN
      EXIT(ENCRYPTIONENABLED);
    END;

    [External]
    PROCEDURE IsEncryptionPossible@27() : Boolean;
    BEGIN
      // ENCRYPTIONKEYEXISTS checks if the correct key is present, which only works if encryption is enabled
      EXIT(ENCRYPTIONKEYEXISTS);
    END;

    LOCAL PROCEDURE AssertEncryptionPossible@6();
    BEGIN
      IF IsEncryptionEnabled THEN
        IF IsEncryptionPossible THEN
          EXIT;

      ERROR(EncryptionCheckFailErr);
    END;

    PROCEDURE EncryptDataInAllCompanies@11();
    VAR
      Company@1000 : Record 2000000006;
      PermissionManager@1001 : Codeunit 9002;
    BEGIN
      IF NOT PermissionManager.SoftwareAsAService THEN
        OnBeforeEncryptDataInAllCompaniesOnPrem;

      Company.FINDSET;
      REPEAT
        EncryptServicePasswordData(Company.Name);
        EncryptKeyValueData(Company.Name);
      UNTIL Company.NEXT = 0;
    END;

    LOCAL PROCEDURE DecryptDataInAllCompanies@12();
    VAR
      Company@1000 : Record 2000000006;
      PermissionManager@1001 : Codeunit 9002;
    BEGIN
      IF NOT PermissionManager.SoftwareAsAService THEN
        OnBeforeDecryptDataInAllCompaniesOnPrem;

      Company.FINDSET;
      REPEAT
        DecryptServicePasswordData(Company.Name);
        DecryptKeyValueData(Company.Name);
      UNTIL Company.NEXT = 0;
    END;

    LOCAL PROCEDURE EncryptServicePasswordData@8(CompanyName@1001 : Text[30]);
    VAR
      ServicePassword@1000 : Record 1261;
      InStream@1004 : InStream;
      UnencryptedText@1006 : Text;
    BEGIN
      ServicePassword.CHANGECOMPANY(CompanyName);
      IF ServicePassword.FINDSET THEN
        REPEAT
          ServicePassword.CALCFIELDS(Value);
          ServicePassword.Value.CREATEINSTREAM(InStream);
          InStream.READTEXT(UnencryptedText);

          CLEAR(ServicePassword.Value);
          ServicePassword.SavePassword(UnencryptedText);
          ServicePassword.MODIFY;
        UNTIL ServicePassword.NEXT = 0;
    END;

    LOCAL PROCEDURE DecryptServicePasswordData@9(CompanyName@1001 : Text[30]);
    VAR
      ServicePassword@1000 : Record 1261;
      OutStream@1005 : OutStream;
      EncryptedText@1006 : Text;
    BEGIN
      ServicePassword.CHANGECOMPANY(CompanyName);
      IF ServicePassword.FINDSET THEN
        REPEAT
          EncryptedText := ServicePassword.GetPassword;

          CLEAR(ServicePassword.Value);
          ServicePassword.Value.CREATEOUTSTREAM(OutStream);
          OutStream.WRITETEXT(EncryptedText);
          ServicePassword.MODIFY;
        UNTIL ServicePassword.NEXT = 0;
    END;

    [External]
    PROCEDURE DeleteServicePasswordData@16(CompanyName@1001 : Text[30]);
    VAR
      ServicePassword@1000 : Record 1261;
    BEGIN
      ServicePassword.CHANGECOMPANY(CompanyName);
      IF ServicePassword.FINDSET THEN
        REPEAT
          CLEAR(ServicePassword.Value);
          ServicePassword.MODIFY;
        UNTIL ServicePassword.NEXT = 0;
    END;

    LOCAL PROCEDURE EncryptKeyValueData@23(CompanyName@1001 : Text[30]);
    VAR
      EncryptedKeyValue@1000 : Record 1805;
      InStream@1004 : InStream;
      UnencryptedText@1006 : Text;
    BEGIN
      EncryptedKeyValue.CHANGECOMPANY(CompanyName);
      IF EncryptedKeyValue.FINDSET THEN
        REPEAT
          EncryptedKeyValue.CALCFIELDS(Value);
          EncryptedKeyValue.Value.CREATEINSTREAM(InStream);
          InStream.READTEXT(UnencryptedText);

          CLEAR(EncryptedKeyValue.Value);
          EncryptedKeyValue.InsertValue(UnencryptedText);
          EncryptedKeyValue.MODIFY;
        UNTIL EncryptedKeyValue.NEXT = 0;
    END;

    LOCAL PROCEDURE DecryptKeyValueData@22(CompanyName@1001 : Text[30]);
    VAR
      EncryptedKeyValue@1000 : Record 1805;
      OutStream@1005 : OutStream;
      EncryptedText@1006 : Text;
    BEGIN
      EncryptedKeyValue.CHANGECOMPANY(CompanyName);
      IF EncryptedKeyValue.FINDSET THEN
        REPEAT
          EncryptedText := EncryptedKeyValue.GetValue;

          CLEAR(EncryptedKeyValue.Value);
          EncryptedKeyValue.Value.CREATEOUTSTREAM(OutStream);
          OutStream.WRITETEXT(EncryptedText);
          EncryptedKeyValue.MODIFY;
        UNTIL EncryptedKeyValue.NEXT = 0;
    END;

    LOCAL PROCEDURE DeleteKeyValueData@19(CompanyName@1001 : Text[30]);
    VAR
      EncryptedKeyValue@1000 : Record 1805;
    BEGIN
      EncryptedKeyValue.CHANGECOMPANY(CompanyName);
      IF EncryptedKeyValue.FINDSET THEN
        REPEAT
          CLEAR(EncryptedKeyValue.Value);
          EncryptedKeyValue.MODIFY;
        UNTIL EncryptedKeyValue.NEXT = 0;
    END;

    LOCAL PROCEDURE UploadFile@17() : Text;
    VAR
      FileManagement@1000 : Codeunit 419;
    BEGIN
      IF GlblSilentFileUploadDownload THEN BEGIN
        IF GlblTempClientFileName = '' THEN
          ERROR(FileNameNotSetForSilentUploadErr);
        EXIT(FileManagement.UploadFileToServer(GlblTempClientFileName));
      END;

      EXIT(FileManagement.UploadFileWithFilter(FileImportCaptionMsg,
          DefaultEncryptionKeyFileNameTxt,KeyFileFilterTxt,EncryptionKeyFilExtnTxt));
    END;

    LOCAL PROCEDURE DownloadFile@18(ServerFileName@1001 : Text);
    VAR
      FileManagement@1000 : Codeunit 419;
    BEGIN
      IF GlblSilentFileUploadDownload THEN
        GlblTempClientFileName := FileManagement.DownloadTempFile(ServerFileName)
      ELSE
        FileManagement.DownloadHandler(ServerFileName,ExportEncryptionKeyFileDialogTxt,
          '',KeyFileFilterTxt,DefaultEncryptionKeyFileNameTxt);
    END;

    [External]
    PROCEDURE SetSilentFileUploadDownload@10(IsSilent@1000 : Boolean;SilentFileUploadName@1001 : Text);
    BEGIN
      GlblSilentFileUploadDownload := IsSilent;
      GlblTempClientFileName := SilentFileUploadName;
    END;

    [External]
    PROCEDURE GetGlblTempClientFileName@13() : Text;
    BEGIN
      EXIT(GlblTempClientFileName);
    END;

    LOCAL PROCEDURE ImportKeyAndEncryptData@21(KeyFilePath@1000 : Text;Password@1002 : Text);
    BEGIN
      IMPORTENCRYPTIONKEY(KeyFilePath,Password);
      EncryptDataInAllCompanies;
      MESSAGE(EncryptionKeyImportedMsg);
    END;

    LOCAL PROCEDURE ImportKeyWithoutEncryptingData@25(KeyFilePath@1001 : Text;Password@1000 : Text);
    BEGIN
      IMPORTENCRYPTIONKEY(KeyFilePath,Password);
      MESSAGE(EncryptionKeyImportedMsg);
    END;

    [External]
    PROCEDURE GetEncryptionIsNotActivatedQst@24() : Text;
    BEGIN
      EXIT(EncryptionIsNotActivatedQst);
    END;

    [External]
    PROCEDURE GenerateHash@39(InputString@1000 : Text;HashAlgorithmType@1001 : 'MD5,SHA1,SHA256,SHA384,SHA512') : Text;
    VAR
      HashBytes@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
    BEGIN
      IF NOT GenerateHashBytes(HashBytes,InputString,HashAlgorithmType) THEN
        EXIT('');
      EXIT(ConvertByteHashToString(HashBytes));
    END;

    [External]
    PROCEDURE GenerateHashAsBase64String@32(InputString@1000 : Text;HashAlgorithmType@1001 : 'MD5,SHA1,SHA256,SHA384,SHA512') : Text;
    VAR
      HashBytes@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
    BEGIN
      IF NOT GenerateHashBytes(HashBytes,InputString,HashAlgorithmType) THEN
        EXIT('');
      EXIT(ConvertByteHashToBase64String(HashBytes));
    END;

    LOCAL PROCEDURE GenerateHashBytes@34(VAR HashBytes@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";InputString@1000 : Text;HashAlgorithmType@1001 : 'MD5,SHA1,SHA256,SHA384,SHA512') : Boolean;
    VAR
      Encoding@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      IF InputString = '' THEN
        EXIT(FALSE);
      IF NOT TryGenerateHash(HashBytes,Encoding.UTF8.GetBytes(InputString),FORMAT(HashAlgorithmType)) THEN
        ERROR(GETLASTERRORTEXT);
      EXIT(TRUE);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGenerateHash@26(VAR HashBytes@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";Bytes@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";Algorithm@1002 : Text);
    VAR
      HashAlgorithm@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.HashAlgorithm";
    BEGIN
      HashAlgorithm := HashAlgorithm.Create(Algorithm);
      HashBytes := HashAlgorithm.ComputeHash(Bytes);
      HashAlgorithm.Dispose;
    END;

    [External]
    PROCEDURE GenerateKeyedHash@30(InputString@1000 : Text;Key@1005 : Text;HashAlgorithmType@1001 : 'HMACMD5,HMACSHA1,HMACSHA256,HMACSHA384,HMACSHA512') : Text;
    VAR
      HashBytes@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Encoding@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      IF NOT GenerateKeyedHashBytes(HashBytes,InputString,Encoding.UTF8.GetBytes(Key),HashAlgorithmType) THEN
        EXIT('');
      EXIT(ConvertByteHashToString(HashBytes));
    END;

    [External]
    PROCEDURE GenerateKeyedHashAsBase64String@43(InputString@1000 : Text;Key@1005 : Text;HashAlgorithmType@1001 : 'HMACMD5,HMACSHA1,HMACSHA256,HMACSHA384,HMACSHA512') : Text;
    VAR
      HashBytes@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Encoding@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      IF NOT GenerateKeyedHashBytes(HashBytes,InputString,Encoding.UTF8.GetBytes(Key),HashAlgorithmType) THEN
        EXIT('');
      EXIT(ConvertByteHashToBase64String(HashBytes));
    END;

    [External]
    PROCEDURE GenerateBase64KeyedHashAsBase64String@36(InputString@1000 : Text;Key@1005 : Text;HashAlgorithmType@1001 : 'HMACMD5,HMACSHA1,HMACSHA256,HMACSHA384,HMACSHA512') : Text;
    VAR
      HashBytes@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Convert@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
    BEGIN
      IF NOT GenerateKeyedHashBytes(HashBytes,InputString,Convert.FromBase64String(Key),HashAlgorithmType) THEN
        EXIT('');
      EXIT(ConvertByteHashToBase64String(HashBytes));
    END;

    LOCAL PROCEDURE GenerateKeyedHashBytes@44(VAR HashBytes@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";InputString@1000 : Text;Key@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";HashAlgorithmType@1001 : 'HMACMD5,HMACSHA1,HMACSHA256,HMACSHA384,HMACSHA512') : Boolean;
    BEGIN
      IF (InputString = '') OR (Key.Length = 0) THEN
        EXIT(FALSE);
      IF NOT TryGenerateKeyedHash(HashBytes,InputString,Key,FORMAT(HashAlgorithmType)) THEN
        ERROR(GETLASTERRORTEXT);
      EXIT(TRUE);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGenerateKeyedHash@35(VAR HashBytes@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";InputString@1001 : Text;Key@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";Algorithm@1002 : Text);
    VAR
      KeyedHashAlgorithm@1006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.Cryptography.KeyedHashAlgorithm";
      Encoding@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      KeyedHashAlgorithm := KeyedHashAlgorithm.Create(Algorithm);
      KeyedHashAlgorithm.Key(Key);
      HashBytes := KeyedHashAlgorithm.ComputeHash(Encoding.UTF8.GetBytes(InputString));
      KeyedHashAlgorithm.Dispose;
    END;

    LOCAL PROCEDURE ConvertByteHashToString@29(HashBytes@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array") : Text;
    VAR
      Byte@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Byte";
      StringBuilder@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      I@1003 : Integer;
    BEGIN
      StringBuilder := StringBuilder.StringBuilder;
      FOR I := 0 TO HashBytes.Length - 1 DO BEGIN
        Byte := HashBytes.GetValue(I);
        StringBuilder.Append(Byte.ToString('X2'));
      END;
      EXIT(StringBuilder.ToString);
    END;

    LOCAL PROCEDURE ConvertByteHashToBase64String@31(HashBytes@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array") : Text;
    VAR
      Convert@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
    BEGIN
      EXIT(Convert.ToBase64String(HashBytes));
    END;

    [External]
    PROCEDURE GenerateHashFromStream@33(InStr@1000 : InStream;HashAlgorithmType@1002 : 'MD5,SHA1,SHA256,SHA384,SHA512') : Text;
    VAR
      MemoryStream@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      HashBytes@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
    BEGIN
      IF InStr.EOS THEN
        EXIT('');
      MemoryStream := MemoryStream.MemoryStream;
      COPYSTREAM(MemoryStream,InStr);
      IF NOT TryGenerateHash(HashBytes,MemoryStream.ToArray,FORMAT(HashAlgorithmType)) THEN
        ERROR(GETLASTERRORTEXT);
      EXIT(ConvertByteHashToString(HashBytes));
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeEncryptDataInAllCompaniesOnPrem@37();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDecryptDataInAllCompaniesOnPrem@38();
    BEGIN
    END;

    BEGIN
    END.
  }
}

