OBJECT Page 11128278 Prognosis Detailed CC
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS6.00,4PSSE,SEEV.CC.I005,FIXME REPORT;
  }
  PROPERTIES
  {
    Permissions=TableData 11012035=rimd;
    CaptionML=[ENU=Prognosis Detailed (Cost Component);
               NOR=Detaljert prognose (kostkomponent);
               SVE=Prognosdetaljer (kostnadskomponent)];
    SourceTable=Table11012034;
    DataCaptionFields=Project No.,Prognosis Date;
    PageType=Document;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Prognosis;
                                NOR=Ny,Behandle,Rapport,Prognose;
                                SVE=Ny,Behandla,Rapport,Prognos];
    OnInit=BEGIN
             SubformRevenueEditable := TRUE;
             SubFormSundryEditable := TRUE;
             SubFormPlantEditable := TRUE;
             SubFormSubcontractingEditable := TRUE;
             SubFormMaterialEditable := TRUE;
             SubFormLaborEditable := TRUE;
             "Fix Prognosis LineEditable" := TRUE;
             TextEditable := TRUE;
             ExpectedFinishingDateEditable := TRUE;
             CommentEditable := TRUE;
             "Prognosis LevelEditable" := FALSE;
             "Prognosis DateEditable" := TRUE;
             "Project No.Editable" := TRUE;
           END;

    OnOpenPage=BEGIN
                 //>>IME-064
                 //IF (GETFILTER("Project No.") <> '') AND
                 //   (GETFILTER("Prognosis Date") = '') THEN
                 //  IF FINDLAST THEN;
                 //<<IME-064
               END;

    OnNextRecord=VAR
                   CurrentSteps@1210190002 : Integer;
                   Step@1210190001 : Integer;
                   NumberOfSteps@1210190000 : Integer;
                   eof@1210190003 : Boolean;
                 BEGIN
                   Rec2.COPY(Rec);

                   IF NOT ShowNewestOnly THEN BEGIN
                     CurrentSteps := Rec2.NEXT(Steps);
                     IF CurrentSteps <> 0 THEN
                       Rec := Rec2;
                     EXIT(CurrentSteps);
                   END;

                   IF Steps < 0 THEN
                     Step := -1
                   ELSE
                     Step := 1;

                   CurrentSteps := 0;
                   eof := Rec2.NEXT(Step) = 0;
                   IF NOT eof THEN
                     FOR NumberOfSteps := 1 TO ABS(Steps) DO BEGIN
                       WHILE SameRec AND NOT eof DO
                         eof := Rec2.NEXT(Step) = 0;
                       IF NOT eof THEN BEGIN
                         Rec := Rec2;
                         CurrentSteps := CurrentSteps + Step;
                       END;
                     END;

                   EXIT(CurrentSteps);
                 END;

    OnAfterGetRecord=BEGIN
                       OnAfterGetCurrRecord;
                     END;

    OnNewRecord=BEGIN
                  IF xRec."Project No." <> '' THEN
                    "Project No." := xRec."Project No.";
                  IF gProjCde <> '' THEN
                    "Project No." := gProjCde;

                  ProjSetup.GET;
                  "Fix Prognosis Line" := ProjSetup."Fix Prognosis Line";  //db, 13-01-11
                  OnAfterGetCurrRecord;
                END;

    OnModifyRecord=BEGIN
                     //>>IME-110A
                     //TESTFIELD(Fixed, FALSE);  //IME-064
                     //<<IME-110A
                   END;

    OnDeleteRecord=BEGIN
                     TESTFIELD(Fixed, FALSE);  //*31928
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 8       ;1   ;ActionGroup;
                      CaptionML=[ENU=&Prognosis;
                                 NOR=&Prognose;
                                 SVE=&Prognos] }
      { 1210190024;2 ;Action    ;
                      CaptionML=[ENU=Project Budget;
                                 NOR=Prosjektbudsjett;
                                 SVE=Projektbudget];
                      RunObject=Page 11012003;
                      RunPageView=SORTING(No.);
                      RunPageLink=No.=FIELD(Project No.) }
      { 1100485000;2 ;Action    ;
                      CaptionML=[ENU=Purchase Orders;
                                 NOR=Innkj›psordre;
                                 SVE=Ink”psordrar];
                      RunObject=Page 11012071;
                      RunPageLink=No.=FIELD(Project No.) }
      { 1210190016;2 ;Separator  }
      { 1210190017;2 ;Action    ;
                      CaptionML=[ENU=&Documents;
                                 NOR=&Dokumenter;
                                 SVE=&Dokument];
                      OnAction=VAR
                                 RecRef@1210190001 : RecordRef;
                                 DocumentFilters@1210190000 : Codeunit 11012432;
                               BEGIN
                                 RecRef.GETTABLE(Rec);
                                 DocumentFilters.CreateTempFilterAndExecute1(RecRef, "Department Code", FALSE, TRUE);
                               END;
                                }
      { 1210190019;1 ;ActionGroup;
                      CaptionML=[ENU=&Line;
                                 NOR=&Linje;
                                 SVE=Ra&d] }
      { 1210190023;2 ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Specifications;
                                 NOR=Spesifikasjoner;
                                 SVE=Specifikationer];
                      OnAction=BEGIN
                                 //DP00042
                                 //CASE ActiveTab OF
                                 //  ActiveTab::Labor: CurrPage.SubFormLabor.FORM.ShowDetailLines;
                                 //  ActiveTab::Material: CurrPage.SubFormMaterial.FORM.ShowDetailLines;
                                 //  ActiveTab::Subcontracting: CurrPage.SubFormSubcontracting.FORM.ShowDetailLines;
                                 //  ActiveTab::Plant: CurrPage.SubFormPlant.FORM.ShowDetailLines;
                                 //  ActiveTab::Sundry: CurrPage.SubFormSundry.FORM.ShowDetailLines;
                                 //END;
                               END;
                                }
      { 1100525016;1 ;ActionGroup;
                      Name=<Action1210190013>;
                      CaptionML=[ENU=Cost Type;
                                 NOR=Kosttype;
                                 SVE=Kostnadstyp];
                      ActionContainerType=RelatedInformation }
      { 1100525004;2 ;Action    ;
                      Name=<Action66>;
                      ShortCutKey=F7;
                      CaptionML=[ENU=Totals;
                                 NOR=Totaler;
                                 SVE=Totaler];
                      RunObject=Page 11130134;
                      RunPageOnRec=Yes;
                      RunPageView=SORTING(Project No.,Prognosis Date);
                      RunPageLink=Project No.=FIELD(Project No.);
                      Promoted=Yes;
                      Visible=FALSE;
                      Image=Statistics;
                      PromotedCategory=Category4 }
      { 1100285505;1 ;ActionGroup;
                      CaptionML=[ENU=&Print;
                                 NOR=Skriv &ut;
                                 SVE=Skriv &ut] }
      { 1100285502;2 ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Print Prognosis;
                                 NOR=Skriv ut Prognose;
                                 SVE=Skriv ut prognos];
                      Image=Print;
                      OnAction=VAR
                                 ProgRec@11012001 : Record 11012034;
                               BEGIN
                                 ProgRec := Rec;
                                 ProgRec.SETRANGE("Project No.","Project No.");
                                 ProgRec.SETRANGE("Prognosis Date","Prognosis Date");
                                 //FIXME REPORT.RUN(REPORT::Prognosis,TRUE,FALSE,ProgRec);
                               END;
                                }
      { 1100285503;2 ;Action    ;
                      CaptionML=[ENU=Prognosis Reports;
                                 NOR=Prognoserapporter;
                                 SVE=Prognosrapporter];
                      Image=Report;
                      OnAction=BEGIN
                                 PrintDoc.PrintPrognosis(Rec);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 23      ;1   ;Action    ;
                      CaptionML=[ENU=&Create;
                                 NOR=&Opprett;
                                 SVE=&Skapa];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Start;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CurrPage.UPDATE(TRUE); //M C-027630

                                 CheckFixed;  //db, 04-01-11: M24105
                                 //>> LAHE 121211
                                 //ProcessPrognosis(Rec);
                                 PrognosisMgt.ProcessPrognosisCC(Rec);
                                 //<< LAHE 121211
                                 //CreatePrognosis(Rec, CostTypes::Both);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 10  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           NOR=Generell;
                           SVE=Allm„nt] }

    { 11  ;2   ;Field     ;
                SourceExpr="Project No.";
                Editable="Project No.Editable" }

    { 13  ;2   ;Field     ;
                SourceExpr="Project Description";
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                SourceExpr="Prognosis Date";
                Editable="Prognosis DateEditable" }

    { 14  ;2   ;Field     ;
                SourceExpr=Comment;
                Importance=Promoted;
                Editable=CommentEditable }

    { 1210190001;2;Field  ;
                CaptionML=[ENU=Display newest only;
                           NOR=Vis kun Nyeste;
                           SVE=Visa endast det senaste];
                SourceExpr=ShowNewestOnly }

    { 1100525022;2;Field  ;
                SourceExpr=Fixed;
                OnValidate=BEGIN
                             FixedOnAfterValidate;
                           END;
                            }

    { 1100285000;2;Field  ;
                SourceExpr="Used in Closing Project" }

    { 1100409000;1;Part   ;
                Name=Lines;
                SubPageLink=Project No.=FIELD(Project No.),
                            Prognosis Date=FIELD(Prognosis Date);
                PagePartID=Page11128279;
                PartType=Page }

    { 1905289801;1;Group  ;
                CaptionML=[ENU=Data;
                           NOR=Data;
                           SVE=Data] }

    { 1100525106;2;Field  ;
                SourceExpr="Modified by";
                Importance=Promoted }

    { 1100525102;2;Field  ;
                SourceExpr="Last Date Modified";
                Importance=Promoted }

    { 1902859001;1;Group  ;
                CaptionML=[ENU=Text;
                           NOR=Tekst;
                           SVE=Ben„mning] }

    { 18  ;2   ;Field     ;
                SourceExpr=Text;
                Editable=TextEditable;
                MultiLine=Yes }

    { 1000000000;0;Container;
                ContainerType=FactBoxArea }

    { 1000000001;1;Part   ;
                SubPageLink=Project No.=FIELD(Project No.),
                            Prognosis Date=FIELD(Prognosis Date);
                PagePartID=Page11128286;
                ProviderID=1100409000;
                PartType=Page }

    { 1100285500;1;Part   ;
                SubPageLink=Project No.=FIELD(Project No.),
                            Prognosis Date=FIELD(Prognosis Date);
                PagePartID=Page11128287;
                ProviderID=1100409000;
                PartType=Page }

    { 1100285501;1;Part   ;
                SubPageLink=Project No.=FIELD(Project No.),
                            Prognosis Date=FIELD(Prognosis Date);
                PagePartID=Page11128288;
                ProviderID=1100409000;
                PartType=Page }

  }
  CODE
  {
    VAR
      Text000@11012005 : TextConst 'ENU=Do you want to copy the previous prognosis Costs?;NOR=Vil du kopiere forrige Kostprognose?;SVE=Vill du kopiera f”reg†ende kostnadsprognos?';
      Text001@11012006 : TextConst 'ENU=Do you want to fill prognosis with Available ?;NOR=Vil du fylle ut prognose med Tilgjengelig?;SVE=Vill du fylla i prognos med tillg„ngligt?';
      ProjSetup@1210190001 : Record 315;
      ProjRec@11012001 : Record 11072003;
      CostControlRec@11012002 : Record 11012050;
      ProgLineRec@11012003 : Record 11012035;
      Rec2@1210190005 : Record 11012034;
      Rec3@1210190004 : Record 11012034;
      DimValRec@1210190006 : Record 349;
      ProjPrincRec@1100485001 : Record 11012005;
      ProjInstallmRec@1100485002 : Record 11012018;
      CostControlProjElemRec@1100485003 : Record 11012048;
      JobLedgEntry@1100525002 : Record 11072005;
      ProjectRecordingLine@1100528819 : Record 11072021;
      CreateCostObjContrElem@1210190000 : Codeunit 11012032;
      CreateCostObjContr@1210190009 : Codeunit 11012011;
      PrintDoc@11012004 : Codeunit 229;
      DimMgt@1210190007 : Codeunit 408;
      PrognosisMgt@1100525014 : Codeunit 11020217;
      ShowNewestOnly@1210190002 : Boolean;
      Text002@1210190003 : TextConst 'ENU=Do you want to fill prognosis with extrapolated costs?;NOR=Vil du fylle ut prognose med ekstrapolerte koster?;SVE=Vill du fylla i prognos med extrapolerade kostnader?';
      Text003@1210190008 : TextConst 'ENU=Do you want to copy the previous Prognosis End Result?;NOR=Vil du kopiere forrige prognose for Sluttresultat?;SVE=Vill du kopiera f”reg†ende prognos f”r slutresultat?';
      gProjCde@1100485000 : Code[20];
      BudgetCostType@1100525044 : ARRAY [6] OF Decimal;
      TotCostCostType@1100525034 : ARRAY [6] OF Decimal;
      Text004@1100525003 : TextConst 'ENU=Do you want to Fill Prognosis Revenues?;NOR=Vil du fylle ut Inntektsprognose?;SVE=Vill du fylla i int„ktsprognos?';
      CostTypes@1100525004 : 'Cost,Revenue,Both';
      Text005@1100525005 : TextConst 'ENU=Do you want to copy the previous prognosis Revenues?;NOR=Vil du kopiere forrige Inntektsprognose?;SVE=Vill du kopiera f”reg†ende int„ktsprognos?';
      PrognTotRev@1100525008 : Decimal;
      PrognTotCost@1100525007 : Decimal;
      PrognFinResult@1100525006 : Decimal;
      Text006@1100525011 : TextConst 'ENU=Do you want to copy the previous Prognosis Total Revenues?;NOR=Vil du kopiere forrige Prognose for Totale Inntekter?;SVE=Vill du kopiera f”reg†ende prognos f”r totala int„kter?';
      Text007@1100525000 : TextConst 'ENU=Do you want to fill Prognosis Surcharges?;NOR=Vil du fylle ut tilleggsgebyrer for prognose?;SVE=Vill du fylla i till„ggsavgifter f”r prognos?';
      Text008@1100525001 : TextConst 'ENU=This option is only available at a detailled prognosis;NOR=Dette alternativet er kun tilgjengelig i detaljerte Prognoser;SVE=Det h„r alternativet „r endast tillg„ngligt f”r detaljerade prognoser';
      Text009@1100525010 : TextConst 'ENU=Do you want to remove Prognosis Surcharges?;NOR=Vil du fjerne tilleggsgebyrer for Prognose?;SVE=Vill du ta bort till„ggsavgifter f”r prognos?';
      DPA_IsHardFilter@1100000999 : Boolean;
      "Project No.Editable"@19028701 : Boolean INDATASET;
      "Prognosis DateEditable"@19046408 : Boolean INDATASET;
      "Prognosis LevelEditable"@19062576 : Boolean INDATASET;
      CommentEditable@19054571 : Boolean INDATASET;
      ExpectedFinishingDateEditable@19013399 : Boolean INDATASET;
      TextEditable@19008086 : Boolean INDATASET;
      "Fix Prognosis LineEditable"@19068858 : Boolean INDATASET;
      SubFormLaborEditable@19077659 : Boolean INDATASET;
      SubFormMaterialEditable@19063602 : Boolean INDATASET;
      SubFormSubcontractingEditable@19065274 : Boolean INDATASET;
      SubFormPlantEditable@19035115 : Boolean INDATASET;
      SubFormSundryEditable@19015937 : Boolean INDATASET;
      SubformRevenueEditable@19018596 : Boolean INDATASET;
      Text19072204@19007142 : TextConst 'ENU=Contract Amount;NOR=Kontraktsbel›p;SVE=Arbetskraft';
      Text19040299@19042983 : TextConst 'ENU=Cost Plus;NOR=Selvkost;SVE=Sj„lvkostnad';
      Text19028226@19014562 : TextConst 'ENU=Total;NOR=I alt;SVE=Totalt';
      Text19040412@19055231 : TextConst 'ENU=Invoiced;NOR=Fakturert;SVE=Fakturerat';
      Text19050990@19067239 : TextConst 'ENU=To Invoice;NOR=Til fakturering;SVE=Till fakturering';
      Text19042818@19027969 : TextConst 'ENU=Labor;NOR=Arbeidskraft;SVE=Arbete';
      Text19053065@19053039 : TextConst 'ENU=Subcontracting;NOR=Underentrepen›r;SVE=Underentreprenad';
      Text19040239@19072757 : TextConst 'ENU=Plant;NOR=Maskin;SVE=Maskin';
      Text19013737@19067190 : TextConst 'ENU=Sundry;NOR=Diverse;SVE=Diverse';
      Text19080001@19069732 : TextConst 'ENU=Total;NOR=I alt;SVE=Totalt';
      "Rough Prognosis Total CostEDIT"@1100525009 : Boolean INDATASET;
      "Rough Prognosis Total Rev.EDIT"@1100525012 : Boolean INDATASET;
      "Rough Prognosis End Resu.EDIT"@1100525013 : Boolean INDATASET;
      AutomaticGeneratePrognosis@1100528802 : Report 11012668;
      StartProcess@1100528801 : Boolean;
      PrognosisDate@1100528800 : Date;
      CopyPrevCostPrognosis@1100528814 : Boolean;
      CopyPrevPrognosisEndResult@1100528813 : Boolean;
      CopyPrevRevenuePrognosis@1100528812 : Boolean;
      CopyPrevPrognosisTotalRev@1100528811 : Boolean;
      CopyCommentsPrevPrognosis@1100528810 : Boolean;
      FillProgWithAvailableCost@1100528809 : Boolean;
      FillProgWithExtrapolatedCosts@1100528808 : Boolean;
      FillProgFromProjPlanningAct@1100528807 : Boolean;
      FillProgFromRequestedActCap@1100528806 : Boolean;
      FillProgFromAssignedActCap@1100528805 : Boolean;
      FillProgRevenues@1100528804 : Boolean;
      CalcSurcharges@1100528803 : Boolean;
      test@1100285500 : Integer;

    PROCEDURE CreatePrognosis@1(VAR Prognosis@1210190001 : Record 11012034;ICostTypes@1100525000 : 'Cost,Revenue,Both');
    VAR
      PrevPrognosisRec@1100525001 : Record 11012034;
      RateRec@1100525003 : Record 11012000;
      SubProjRec@1100525002 : Record 11072003;
      PrognMgt@1100525007 : Codeunit 11020217;
      ElementCode@1210190000 : Code[20];
      lvRate@1100525004 : Decimal;
    BEGIN
      WITH Prognosis DO BEGIN
        ProjSetup.GET;
        ProjRec.GET("Project No.");

        //Build Cost Control
        ProjRec.BuildCostControl; //call 29432
        CreateCostObjContrElem.RUN(ProjRec);
        COMMIT; //Necessary cause error report might popup in calccostplus report.

        //Prognosis Header
        IF ICostTypes = ICostTypes::Both THEN
          IF "Expected Finishing Date" = 0D THEN BEGIN
            PrevPrognosisRec := Prognosis;
            PrevPrognosisRec.SETRANGE("Project No.", "Project No.");
            IF PrevPrognosisRec.NEXT(-1) <> 0 THEN
              "Expected Finishing Date" := PrevPrognosisRec."Expected Finishing Date";
          END;
        IF ICostTypes <> ICostTypes::Cost THEN
          PrognMgt.PrognRevenues(ProjRec, Prognosis);
        IF ICostTypes <> ICostTypes::Revenue THEN
          PrognMgt.RoughPrognTotCost(ProjRec, Prognosis);
        MODIFY;

        //Prognosis Cost Lines
        IF ICostTypes <> ICostTypes::Revenue THEN BEGIN
          CostControlRec.SETRANGE("Project No.","Project No.");
          IF CostControlRec.FINDSET(FALSE, FALSE) THEN
            REPEAT
              IF ProjRec."Prognosis per Element" THEN
                ElementCode := CostControlRec.Element
              ELSE
                ElementCode := '';
              IF NOT ProgLineRec.GET(
                CostControlRec."Project No.", "Prognosis Date", CostControlRec."Cost Type",
                ElementCode, CostControlRec."Cost Object") THEN
              BEGIN
                ProgLineRec.INIT;
                ProgLineRec."Project No." := "Project No.";
                ProgLineRec.VALIDATE("Prognosis Date","Prognosis Date");
                ProgLineRec.VALIDATE(Element, ElementCode);
                ProgLineRec."Cost Type" := CostControlRec."Cost Type";
                ProgLineRec."Cost Object" := CostControlRec."Cost Object";
                DimMgt.GetDimValueRec(2, CostControlRec."Cost Object",DimValRec,FALSE,'');
                ProgLineRec."Unit Cost Object" := DimValRec."Unit of Measure";
                ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
                ProgLineRec."Rate Code" := DimValRec."Rate Code"; //19153 No validation
                //wordt weer overschreven door oplossing voor M20040, dus bovenstaande regel moet weg als M20040 is goedgekeurd
                ProgLineRec.INSERT(TRUE);
              END;

              ProgLineRec."Fix Prognosis Line" := "Fix Prognosis Line";  //db, 13-01-11
              PrognMgt.CalculateValues(ProgLineRec,TRUE);
              ProgLineRec."Cost Component" := CostControlRec."Cost Component";

              //M20040 sn
              IF ProgLineRec."Cost Type" = ProgLineRec."Cost Type"::Labor THEN BEGIN
                lvRate := 0;
                //Tarief uit Tariefcode
                IF NOT RateRec.ProjectRate(ProgLineRec."Project No.", ProgLineRec."Rate Code",
                                           ProgLineRec."Prognosis Date", lvRate) THEN
                BEGIN
                  IF RateRec.StandardRate(ProgLineRec."Rate Code", ProgLineRec."Prognosis Date", lvRate) THEN;
                END;
                ProgLineRec.Rate := lvRate;
                //Tarief respectievelijk uit actuele (totale) kosten of uit de begroting
                IF (ProgLineRec."Total Hours" <> 0) AND (ProgLineRec."Total Cost" <> 0) THEN BEGIN
                   lvRate := ROUND(ProgLineRec."Total Cost"/ ProgLineRec."Total Hours", 0.01);
                END ELSE BEGIN
                   IF (ProgLineRec."Budget Amount" <> 0) AND (ProgLineRec."Budget Hours" <> 0) THEN
                     lvRate := ROUND(ProgLineRec."Budget Amount"/ ProgLineRec."Budget Hours", 0.01);
                END;
                IF ProgLineRec.Rate <> lvRate THEN BEGIN
                  ProgLineRec.Rate := lvRate;
                  ProgLineRec."Rate Code" := '';
                END;
              END;
              //M20040 en

              ProgLineRec.MODIFY(TRUE);
            UNTIL CostControlRec.NEXT = 0;
        END;

        //Prognosis Revenue Lines
        IF ICostTypes <> ICostTypes::Cost THEN BEGIN
          ProjPrincRec.RESET;
          ProjPrincRec.SETCURRENTKEY("Main Project No.");
          ProjPrincRec.SETRANGE("Main Project No.", ProjRec."Main Project");
          IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
            ProjPrincRec.SETRANGE("Project No.", "Project No.");
          ProjPrincRec.SETFILTER("Cost Object", '<>%1', '');
          IF ProjPrincRec.FINDSET THEN
            REPEAT
              ProgLineRec.INIT;
              ProgLineRec."Project No." := "Project No.";
              ProgLineRec.VALIDATE("Prognosis Date","Prognosis Date");
              ProgLineRec."Cost Type" := ProgLineRec."Cost Type"::Revenue;
              ProgLineRec."Cost Object" := ProjPrincRec."Cost Object";
              DimMgt.GetDimValueRec(2, ProjPrincRec."Cost Object",DimValRec,FALSE,'');
              ProgLineRec."Unit Cost Object" := DimValRec."Unit of Measure";
              ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
              IF NOT ProjRec."Prognosis per Element" THEN BEGIN
                IF ProgLineRec.INSERT(TRUE) THEN;
              END ELSE BEGIN
                CostControlProjElemRec.SETRANGE("Project No.", "Project No.");
                IF CostControlProjElemRec.FINDSET THEN
                  REPEAT
                    ProgLineRec.VALIDATE(Element, CostControlProjElemRec.Element);
                 UNTIL CostControlProjElemRec.NEXT = 0;
              END;
            UNTIL ProjPrincRec.NEXT = 0;

          SubProjRec.SETCURRENTKEY("Main Project");
          SubProjRec.SETRANGE("Main Project", ProjRec."Main Project");
          IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
            SubProjRec.SETRANGE("No.", "Project No.");
          IF SubProjRec.FINDSET THEN
            REPEAT
              ProjInstallmRec.RESET;
              ProjInstallmRec.SETRANGE("Project No.", SubProjRec."No.");
              ProjInstallmRec.SETFILTER("Cost Object", '<>%1', '');
              IF ProjInstallmRec.FINDSET THEN
                REPEAT
                  ProgLineRec.INIT;
                  ProgLineRec."Project No." := "Project No.";
                  ProgLineRec.VALIDATE("Prognosis Date","Prognosis Date");
                  IF ProjRec."Prognosis per Element" THEN
                    ProgLineRec.VALIDATE(Element, ProjInstallmRec.Element)
                  ELSE
                    ProgLineRec.Element := '';
                  ProgLineRec."Cost Type" := ProgLineRec."Cost Type"::Revenue;
                  ProgLineRec."Cost Object" := ProjInstallmRec."Cost Object";
                  DimMgt.GetDimValueRec(2, ProjInstallmRec."Cost Object",DimValRec,FALSE,'');
                  ProgLineRec."Unit Cost Object" := DimValRec."Unit of Measure";
                  ProgLineRec."Unit of Measure" := DimValRec."Unit of Measure";
                  IF ProgLineRec.INSERT(TRUE) THEN;
                UNTIL ProjInstallmRec.NEXT = 0;
            UNTIL SubProjRec.NEXT = 0;

          //Revenues Invoiced
          ProgLineRec.RESET;
          ProgLineRec.SETRANGE("Project No.", "Project No.");
          ProgLineRec.SETRANGE("Prognosis Date", "Prognosis Date");
          ProgLineRec.SETRANGE("Cost Type", ProgLineRec."Cost Type"::Revenue);
          IF ProgLineRec.FINDSET(TRUE, FALSE) THEN
            REPEAT
              JobLedgEntry.RESET;
              JobLedgEntry.SETCURRENTKEY("Main Project No.","Job No.","Entry Type",Element);
              JobLedgEntry.SETRANGE("Main Project No.", ProjRec."Main Project");
              IF ProjRec."Single/Main/Sub Project" <> ProjRec."Single/Main/Sub Project"::"Main Project" THEN
                JobLedgEntry.SETRANGE("Job No.", "Project No.");
              JobLedgEntry.SETRANGE("Entry Type", JobLedgEntry."Entry Type"::Sale);
              IF ProjRec."Prognosis per Element" THEN
                JobLedgEntry.SETRANGE(Element, ProgLineRec.Element);
              JobLedgEntry.SETRANGE("Global Dimension 2 Code", ProgLineRec."Cost Object");
              JobLedgEntry.SETRANGE("Posting Date", 0D, "Prognosis Date");
              JobLedgEntry.CALCSUMS("Total Price (LCY)");
              ProgLineRec.Invoiced := -JobLedgEntry."Total Price (LCY)";
              ProgLineRec.MODIFY;
            UNTIL ProgLineRec.NEXT = 0;
        END;
      END;

      CheckPrognosisSpecification("Project No.", "Prognosis Date");  //DP00042
    END;

    PROCEDURE SameRec@1210190000() : Boolean;
    BEGIN
      IF (Rec2."Project No." <> Rec."Project No.") THEN BEGIN
        Rec3.SETRANGE("Project No.",Rec2."Project No.");
        IF Rec3.FINDLAST THEN
          Rec2 := Rec3;
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE Setfilter@1100485000(lProjCde@1210190000 : Code[20]);
    BEGIN
      FILTERGROUP(2);
      SETRANGE("Project No.",lProjCde);
      "Project No.Editable" := (FALSE);
      gProjCde := lProjCde;
      FILTERGROUP(0);
    END;

    PROCEDURE UpdateEditable@1100525001();
    BEGIN
      //db, 21-09-10
      "Project No.Editable" := (NOT Fixed AND (gProjCde = ''));
      "Prognosis DateEditable" := (NOT Fixed);
      //"Prognosis LevelEditable" := (NOT Fixed);
      CommentEditable := (NOT Fixed);
      ExpectedFinishingDateEditable := (NOT Fixed);
      TextEditable := (NOT Fixed);
      "Fix Prognosis LineEditable" := (NOT Fixed);  //db, 13-01-11

      SubFormLaborEditable := (NOT Fixed);
      SubFormMaterialEditable := (NOT Fixed);
      SubFormSubcontractingEditable := (NOT Fixed);
      SubFormPlantEditable := (NOT Fixed);
      SubFormSundryEditable := (NOT Fixed);
      SubformRevenueEditable := (NOT Fixed);

      "Rough Prognosis Total CostEDIT" := (("Prognosis Level" = "Prognosis Level"::Rough) AND
                                                     (NOT Fixed));
      "Rough Prognosis Total Rev.EDIT" := (("Prognosis Level" = "Prognosis Level"::Rough) AND
                                                     (NOT Fixed));
      "Rough Prognosis End Resu.EDIT" := (("Prognosis Level" = "Prognosis Level"::Rough) AND
                                                     (NOT Fixed));

      //4PS-001
      CurrPage.Lines.PAGE.SetEditable(Fixed);
    END;

    PROCEDURE CheckFixed@1100525000();
    BEGIN
      TESTFIELD(Fixed,FALSE);
    END;

    PROCEDURE CheckPrognosisSpecification@11136550(iProject@11136551 : Code[20];iPrognosisDate@11136554 : Date);
    VAR
      Job@11136553 : Record 11072003;
      BudgetLine@11136550 : Record 11012001;
      PrognosisLine@11136552 : Record 11012035;
      PrognosisLineSpec@11136556 : Record 11020687;
    BEGIN
      //DP00042
      Job.GET(iProject);

      PrognosisLine.SETRANGE("Project No.", iProject);
      PrognosisLine.SETRANGE("Prognosis Date", iPrognosisDate);
      IF PrognosisLine.FINDSET THEN BEGIN
        REPEAT
          BudgetLine.SETCURRENTKEY("Project No.", Element, "Cost Type", "Cost Object");
          BudgetLine.SETRANGE("Project No.", PrognosisLine."Project No.");
          IF Job."Prognosis per Element" THEN
            BudgetLine.SETRANGE(Element, PrognosisLine.Element);
          BudgetLine.SETRANGE("Cost Type", PrognosisLine."Cost Type");
          BudgetLine.SETRANGE("Cost Object", PrognosisLine."Cost Object");
          IF BudgetLine.FINDSET THEN BEGIN
            REPEAT
              IF ISNULLGUID(BudgetLine."Reference No.") THEN BEGIN
                BudgetLine."Reference No." := CREATEGUID;
                BudgetLine.MODIFY;
              END;

              PrognosisLineSpec.SETCURRENTKEY("Reference No.", "Project No.", "Prognosis Date");
              PrognosisLineSpec.SETRANGE("Reference No.", BudgetLine."Reference No.");
              PrognosisLineSpec.SETRANGE("Project No.", iProject);
              PrognosisLineSpec.SETRANGE("Prognosis Date", iPrognosisDate);
              IF PrognosisLineSpec.ISEMPTY THEN BEGIN
                CreatePrognosisSpecification(
                  iProject,
                  iPrognosisDate,
                  PrognosisLine.Element,
                  PrognosisLine."Cost Type",
                  PrognosisLine."Cost Object",
                  BudgetLine."Reference No.",
                  BudgetLine.Description,
                  BudgetLine."Extension Contract",
                  BudgetLine."Cost Component",
                  BudgetLine."Amount (LCY)");   //db, 31-01-12: M32801
              END;
            UNTIL BudgetLine.NEXT = 0;
          END;
        UNTIL PrognosisLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreatePrognosisSpecification@11136551(iProject@11136555 : Code[20];iPrognosisDate@11136554 : Date;iElement@11136553 : Code[20];iCostType@11136552 : Integer;iCostObject@11136551 : Code[20];iReference@11136556 : GUID;iDescription@11136558 : Text[50];iExtensionContract@11136559 : Code[10];iCostComponent@11136560 : Code[20];iBudgetAmount@1210190000 : Decimal);
    VAR
      PrognosisLineSpec@11136550 : Record 11020687;
    BEGIN
      //DP00042
      PrognosisLineSpec.VALIDATE("Project No.", iProject);
      PrognosisLineSpec.VALIDATE("Prognosis Date", iPrognosisDate);
      PrognosisLineSpec.VALIDATE("Cost Type", iCostType);
      PrognosisLineSpec.VALIDATE(Element, iElement);
      PrognosisLineSpec.VALIDATE("Cost Object", iCostObject);
      PrognosisLineSpec.VALIDATE("Reference No.", iReference);
      PrognosisLineSpec.VALIDATE(Description, iDescription);
      PrognosisLineSpec.VALIDATE("Extension Contract", iExtensionContract);
      PrognosisLineSpec.VALIDATE("Cost Component", iCostComponent);
      PrognosisLineSpec.INSERT(TRUE);
      //db, 31-01-12: M32801
      PrognosisLineSpec."Budget Amount" := iBudgetAmount;
      PrognosisLineSpec.MODIFY;
    END;

    LOCAL PROCEDURE PrognosisLevelOnAfterValidate@19041183();
    BEGIN
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE FixedOnAfterValidate@19003862();
    BEGIN
      //4PS-001
      CurrPage.Lines.PAGE.SetEditable(Fixed);

      CurrPage.UPDATE(TRUE); //call 25647
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    VAR
      lCostType@1100525000 : Integer;
    BEGIN
      xRec := Rec;
      CLEAR(BudgetCostType);
      CLEAR(TotCostCostType);

      ProgLineRec.RESET;
      ProgLineRec.SETRANGE("Project No.", "Project No.");
      ProgLineRec.SETRANGE("Prognosis Date", "Prognosis Date");
      IF NOT ProgLineRec.FINDFIRST THEN
        CLEAR(ProgLineRec)
      ELSE BEGIN
        ProgLineRec.CALCFIELDS(
          "Total Prognosis Labor", "Total Prognosis Material",
          "Total Prognosis Subcontracting", "Total Prognosis Plant",
          "Total Prognosis Sundry", "Total Prognosis", "Prognosis Revenue");
        ProgLineRec.CALCSUMS("Budget Amount","Total Cost");
        BudgetCostType[6] := ProgLineRec."Budget Amount";
        TotCostCostType[6] := ProgLineRec."Total Cost";
        FOR lCostType := 0 TO 4 DO BEGIN
          ProgLineRec.SETRANGE("Cost Type", lCostType);
          ProgLineRec.CALCSUMS("Budget Amount", "Total Cost");
          BudgetCostType[lCostType+1] := ProgLineRec."Budget Amount";
          TotCostCostType[lCostType+1] := ProgLineRec."Total Cost";
        END;
      END;
      IF "Prognosis Level" = "Prognosis Level"::Rough THEN BEGIN
        PrognTotRev := "Rough Prognosis Total Revenues";
        PrognTotCost := "Rough Prognosis Total Cost";
      END ELSE BEGIN
        PrognTotRev := "Project Invoiced" + ProgLineRec."Prognosis Revenue";
        PrognTotCost := "Prognosis Total Cost";
      END;
      PrognFinResult := PrognTotRev - PrognTotCost;

      // dp00029.n
      // BestCase en WorstCase determined in page 11130134

      UpdateEditable;
    END;

    PROCEDURE CopyPreviousPrognosis@8(ICostTypes@1100525000 : 'Cost,Revenue,Both');
    BEGIN
      PrognosisMgt.CopyPrevPrognosis(Rec, 0, ICostTypes);
    END;

    PROCEDURE CopyPreviousPrognosisEndResult@1210190001(ICostTypes@1100525000 : 'Cost,Revenue,Both');
    BEGIN
      PrognosisMgt.CopyPrevPrognosis(Rec, 1, ICostTypes);
    END;

    PROCEDURE FillPrognosisWithAvailable@1100525005();
    VAR
      lPrognLineRec@11012000 : Record 11012035;
      RateRec@1100525000 : Record 11012000;
      lvRate@1100525001 : Decimal;
    BEGIN
      PrognosisMgt.FillPrognosisWithAvailable(Rec);
    END;

    PROCEDURE FillPrognosisWithXtraPolCost@1100525003();
    BEGIN
      PrognosisMgt.FillPrognosisWithXtraPolCost(Rec);
    END;

    PROCEDURE FillPrognRevenues@1100525004();
    BEGIN
      PrognosisMgt.FillPrognRevenues(Rec);
    END;

    PROCEDURE RemoveSurcharges@1100525002();
    BEGIN
      PrognosisMgt.RemoveSurcharges(Rec);
    END;

    PROCEDURE CalculateSurcharges@1100525006();
    BEGIN
      PrognosisMgt.CalculateSurcharges(Rec);
    END;

    BEGIN
    {
      -SE EVRY-
      LAHE 121211 Moved functions to PrognosisMgt to avoid duplicate code
      LAHE 130605 Removed FactBoxArea
      <Prognosis Totals FB>PrognosisPartPage
      <Prognosis End Result Totals FB>Prognosis End ResultPartPage
      4PSSE, 140128, ENH-011#2, additional factboxes
      4PSSE, 140128, ENH-011#4, new action, print

      IME-110A  GHE 140212  Put out Testfield from IME-064
    }
    END.
  }
}

