OBJECT Table 172 Standard Customer Sales Code
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Standard Customer Sales Code;
               NOR=Standard kundesalgskode;
               SVE=Standard kundf”rs.kod];
  }
  FIELDS
  {
    { 1   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Customer No.;
                                                              NOR=Kundenr.;
                                                              SVE=Kundnr];
                                                   NotBlank=Yes }
    { 2   ;   ;Code                ;Code10        ;TableRelation="Standard Sales Code";
                                                   OnValidate=VAR
                                                                StdSalesCode@1000 : Record 170;
                                                              BEGIN
                                                                IF Code = '' THEN
                                                                  EXIT;
                                                                StdSalesCode.GET(Code);
                                                                Description := StdSalesCode.Description;
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   NotBlank=Yes }
    { 3   ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 4   ;   ;Valid From Date     ;Date          ;CaptionML=[ENU=Valid From Date;
                                                              NOR=Gyldig fra-dato;
                                                              SVE=Giltigt fr†n den] }
    { 5   ;   ;Valid To date       ;Date          ;CaptionML=[ENU=Valid To date;
                                                              NOR=Gyldig til-dato;
                                                              SVE=Giltigt till den] }
    { 6   ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=[ENU=Payment Method Code;
                                                              NOR=Betalingsm†te - kode;
                                                              SVE=Betalningss„tt] }
    { 7   ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=[ENU=Payment Terms Code;
                                                              NOR=Betalingsbet.kode;
                                                              SVE=Betalningsvillkorskod] }
    { 8   ;   ;Direct Debit Mandate ID;Code35     ;TableRelation="SEPA Direct Debit Mandate" WHERE (Customer No.=FIELD(Customer No.),
                                                                                                    Blocked=CONST(No),
                                                                                                    Closed=CONST(No));
                                                   CaptionML=[ENU=Direct Debit Mandate ID;
                                                              NOR=ID for Direct Debit-belastningsfullmakt;
                                                              SVE=Medgivande-ID f”r autogiro] }
    { 9   ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              NOR=Sperret;
                                                              SVE=Sp„rrad] }
    { 15  ;   ;Insert Rec. Lines On Quotes;Option ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Insert Rec. Lines On Quotes;
                                                              NOR=Sett inn gjentakende linjer i tilbud];
                                                   OptionCaptionML=[ENU=Manual,Automatic,Always Ask;
                                                                    NOR=Manuell,Automatisk,Be alltid om bekreftelse];
                                                   OptionString=Manual,Automatic,Always Ask }
    { 16  ;   ;Insert Rec. Lines On Orders;Option ;DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Insert Rec. Lines On Orders;
                                                              NOR=Sett inn gjentakende linjer i ordrer];
                                                   OptionCaptionML=[ENU=Manual,Automatic,Always Ask;
                                                                    NOR=Manuell,Automatisk,Be alltid om bekreftelse];
                                                   OptionString=Manual,Automatic,Always Ask }
    { 17  ;   ;Insert Rec. Lines On Invoices;Option;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Insert Rec. Lines On Invoices;
                                                              NOR=Sett inn gjentakende linjer i fakturaer];
                                                   OptionCaptionML=[ENU=Manual,Automatic,Always Ask;
                                                                    NOR=Manuell,Automatisk,Be alltid om bekreftelse];
                                                   OptionString=Manual,Automatic,Always Ask }
    { 18  ;   ;Insert Rec. Lines On Cr. Memos;Option;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[ENU=Insert Rec. Lines On Cr. Memos;
                                                              NOR=Sett inn gjentakende linjer i kreditnotaer];
                                                   OptionCaptionML=[ENU=Manual,Automatic,Always Ask;
                                                                    NOR=Manuell,Automatisk,Be alltid om bekreftelse];
                                                   OptionString=Manual,Automatic,Always Ask }
  }
  KEYS
  {
    {    ;Customer No.,Code                       ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE CreateSalesInvoice@6(OrderDate@1000 : Date;PostingDate@1002 : Date);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      TESTFIELD(Blocked,FALSE);
      SalesHeader.INIT;
      SalesHeader."No." := '';
      SalesHeader."Document Type" := SalesHeader."Document Type"::Invoice;
      SalesHeader.INSERT(TRUE);
      SalesHeader.VALIDATE("Sell-to Customer No.","Customer No.");
      SalesHeader.VALIDATE("Order Date",OrderDate);
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.VALIDATE("Document Date",OrderDate);
      IF "Payment Method Code" <> '' THEN
        SalesHeader.VALIDATE("Payment Method Code","Payment Method Code");
      IF "Payment Terms Code" <> '' THEN
        SalesHeader.VALIDATE("Payment Terms Code","Payment Terms Code");
      IF "Direct Debit Mandate ID" <> '' THEN
        SalesHeader.VALIDATE("Direct Debit Mandate ID","Direct Debit Mandate ID");
      SalesHeader.MODIFY;
      ApplyStdCodesToSalesLines(SalesHeader,Rec);

      OnAfterCreateSalesInvoice(SalesHeader,Rec);
    END;

    [External]
    PROCEDURE InsertSalesLines@1(VAR SalesHeader@1000 : Record 36);
    VAR
      StdCustSalesCode@1001 : Record 172;
      StdCustSalesCodes@1002 : Page 173;
    BEGIN
      SalesHeader.TESTFIELD("No.");
      SalesHeader.TESTFIELD("Sell-to Customer No.");

      StdCustSalesCode.FILTERGROUP := 2;
      StdCustSalesCode.SETRANGE("Customer No.",SalesHeader."Sell-to Customer No.");
      StdCustSalesCode.FILTERGROUP := 0;

      OnBeforeStdCustSalesCodesSetTableView(StdCustSalesCode,SalesHeader);
      StdCustSalesCodes.SETTABLEVIEW(StdCustSalesCode);
      StdCustSalesCodes.LOOKUPMODE(TRUE);
      IF StdCustSalesCodes.RUNMODAL = ACTION::LookupOK THEN BEGIN
        StdCustSalesCodes.GetSelected(StdCustSalesCode);
        IF StdCustSalesCode.FINDSET THEN
          REPEAT
            ApplyStdCodesToSalesLines(SalesHeader,StdCustSalesCode);
          UNTIL StdCustSalesCode.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE ApplyStdCodesToSalesLines@2(VAR SalesHeader@1000 : Record 36;StdCustSalesCode@1004 : Record 172);
    VAR
      Currency@1006 : Record 4;
      StdSalesLine@1003 : Record 171;
      StdSalesCode@1002 : Record 170;
      SalesLine@1005 : Record 37;
      Factor@1001 : Integer;
    BEGIN
      Currency.Initialize(SalesHeader."Currency Code");

      StdCustSalesCode.TESTFIELD(Code);
      StdCustSalesCode.TESTFIELD("Customer No.",SalesHeader."Sell-to Customer No.");
      StdSalesCode.GET(StdCustSalesCode.Code);
      StdSalesCode.TESTFIELD("Currency Code",SalesHeader."Currency Code");
      StdSalesLine.SETRANGE("Standard Sales Code",StdCustSalesCode.Code);
      SalesLine."Document Type" := SalesHeader."Document Type";
      SalesLine."Document No." := SalesHeader."No.";
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      IF SalesHeader."Prices Including VAT" THEN
        Factor := 1
      ELSE
        Factor := 0;

      OnBeforeApplyStdCodesToSalesLinesLoop(StdSalesLine,SalesLine,SalesHeader,StdSalesCode);

      SalesLine.LOCKTABLE;
      StdSalesLine.LOCKTABLE;
      IF StdSalesLine.FIND('-') THEN
        REPEAT
          SalesLine.INIT;
          SalesLine."Line No." := 0;
          SalesLine.VALIDATE(Type,StdSalesLine.Type);
          IF StdSalesLine.Type = StdSalesLine.Type::" " THEN BEGIN
            SalesLine.VALIDATE("No.",StdSalesLine."No.");
            SalesLine.Description := StdSalesLine.Description
          END ELSE
            IF NOT StdSalesLine.EmptyLine THEN BEGIN
              StdSalesLine.TESTFIELD("No.");
              SalesLine.VALIDATE("No.",StdSalesLine."No.");
              IF StdSalesLine."Variant Code" <> '' THEN
                SalesLine.VALIDATE("Variant Code",StdSalesLine."Variant Code");
              SalesLine.VALIDATE(Quantity,StdSalesLine.Quantity);
              IF StdSalesLine."Unit of Measure Code" <> '' THEN
                SalesLine.VALIDATE("Unit of Measure Code",StdSalesLine."Unit of Measure Code");
              SalesLine.Description := StdSalesLine.Description;
              IF (StdSalesLine.Type = StdSalesLine.Type::"G/L Account") OR
                 (StdSalesLine.Type = StdSalesLine.Type::"Charge (Item)")
              THEN
                SalesLine.VALIDATE(
                  "Unit Price",
                  ROUND(StdSalesLine."Amount Excl. VAT" *
                    (SalesLine."VAT %" / 100 * Factor + 1),Currency."Unit-Amount Rounding Precision"));
            END;

          SalesLine."Shortcut Dimension 1 Code" := StdSalesLine."Shortcut Dimension 1 Code";
          SalesLine."Shortcut Dimension 2 Code" := StdSalesLine."Shortcut Dimension 2 Code";

          CombineDimensions(SalesLine,StdSalesLine);
          OnBeforeApplyStdCodesToSalesLines(SalesLine,StdSalesLine);
          IF StdSalesLine.InsertLine THEN BEGIN
            SalesLine."Line No." := GetNextLineNo(SalesLine);
            SalesLine.INSERT(TRUE);
            SalesLine.AutoAsmToOrder;
            InsertExtendedText(SalesLine);
          END;
        UNTIL StdSalesLine.NEXT = 0;

      OnAfterApplyStdCodesToSalesLinesLoop(StdSalesLine,SalesLine,SalesHeader,StdSalesCode);
    END;

    LOCAL PROCEDURE CombineDimensions@5(VAR SalesLine@1001 : Record 37;StdSalesLine@1002 : Record 171);
    VAR
      DimensionManagement@1000 : Codeunit 408;
      DimensionSetIDArr@1005 : ARRAY [10] OF Integer;
    BEGIN
      DimensionSetIDArr[1] := SalesLine."Dimension Set ID";
      DimensionSetIDArr[2] := StdSalesLine."Dimension Set ID";

      SalesLine."Dimension Set ID" :=
        DimensionManagement.GetCombinedDimensionSetID(
          DimensionSetIDArr,SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE InsertExtendedText@3(SalesLine@1000 : Record 37);
    VAR
      TransferExtendedText@1001 : Codeunit 378;
    BEGIN
      IF TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,FALSE) THEN
        TransferExtendedText.InsertSalesExtText(SalesLine);
    END;

    LOCAL PROCEDURE GetNextLineNo@4(SalesLine@1001 : Record 37) : Integer;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine.SETRANGE("Document No.",SalesLine."Document No.");
      IF SalesLine.FINDLAST THEN
        EXIT(SalesLine."Line No." + 10000);

      EXIT(10000);
    END;

    [External]
    PROCEDURE SetFilterByAutomaticAndAlwaysAskCodes@8(SalesHeader@1000 : Record 36);
    BEGIN
      CASE SalesHeader."Document Type" OF
        SalesHeader."Document Type"::Quote:
          SETFILTER("Insert Rec. Lines On Quotes",'<>%1',"Insert Rec. Lines On Quotes"::Manual);
        SalesHeader."Document Type"::Order:
          SETFILTER("Insert Rec. Lines On Orders",'<>%1',"Insert Rec. Lines On Orders"::Manual);
        SalesHeader."Document Type"::Invoice:
          SETFILTER("Insert Rec. Lines On Invoices",'<>%1',"Insert Rec. Lines On Invoices"::Manual);
        SalesHeader."Document Type"::"Credit Memo":
          SETFILTER("Insert Rec. Lines On Cr. Memos",'<>%1',"Insert Rec. Lines On Cr. Memos"::Manual);
      END;
    END;

    [External]
    PROCEDURE IsInsertRecurringLinesOnDocumentAutomatic@9(SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      CASE SalesHeader."Document Type" OF
        SalesHeader."Document Type"::Quote:
          EXIT("Insert Rec. Lines On Quotes" = "Insert Rec. Lines On Quotes"::Automatic);
        SalesHeader."Document Type"::Order:
          EXIT("Insert Rec. Lines On Orders" = "Insert Rec. Lines On Orders"::Automatic);
        SalesHeader."Document Type"::Invoice:
          EXIT("Insert Rec. Lines On Invoices" = "Insert Rec. Lines On Invoices"::Automatic);
        SalesHeader."Document Type"::"Credit Memo":
          EXIT("Insert Rec. Lines On Cr. Memos" = "Insert Rec. Lines On Cr. Memos"::Automatic);
        ELSE
          EXIT(FALSE);
      END;
    END;

    [External]
    PROCEDURE ShouldAutoInsertRecurringLinesOnDocument@12(SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      CASE SalesHeader."Document Type" OF
        SalesHeader."Document Type"::Quote:
          EXIT("Insert Rec. Lines On Quotes" <> "Insert Rec. Lines On Quotes"::Manual);
        SalesHeader."Document Type"::Order:
          EXIT("Insert Rec. Lines On Orders" <> "Insert Rec. Lines On Orders"::Manual);
        SalesHeader."Document Type"::Invoice:
          EXIT("Insert Rec. Lines On Invoices" <> "Insert Rec. Lines On Invoices"::Manual);
        SalesHeader."Document Type"::"Credit Memo":
          EXIT("Insert Rec. Lines On Cr. Memos" <> "Insert Rec. Lines On Cr. Memos"::Manual);
        ELSE
          EXIT(FALSE);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateSalesInvoice@10(VAR SalesHeader@1001 : Record 36;StandardCustomerSalesCode@1000 : Record 172);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterApplyStdCodesToSalesLinesLoop@13(VAR StdSalesLine@1000 : Record 171;VAR SalesLine@1001 : Record 37;SalesHeader@1002 : Record 36;StdSalesCode@1003 : Record 170);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeApplyStdCodesToSalesLines@7(VAR SalesLine@1000 : Record 37;StdSalesLine@1001 : Record 171);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeApplyStdCodesToSalesLinesLoop@11(VAR StdSalesLine@1000 : Record 171;VAR SalesLine@1001 : Record 37;SalesHeader@1002 : Record 36;StdSalesCode@1003 : Record 170);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeStdCustSalesCodesSetTableView@14(VAR StandardCustomerSalesCode@1000 : Record 172;VAR SalesHeader@1001 : Record 36);
    BEGIN
    END;

    BEGIN
    END.
  }
}

