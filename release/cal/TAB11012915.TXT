OBJECT Table 11012915 Project Development
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnModify=VAR
               Job@1100527700 : Record 11072003;
             BEGIN
               Job.GET("Project No.");
               UpdateProjectCashflowDates(Job);
             END;

    OnDelete=VAR
               lvInvPropRec@1210190000 : Record 11012912;
               lvInvPropRubricRec@1210190001 : Record 11012913;
               lvInvPropBudgetRec@1210190002 : Record 11012914;
               lvProductTextRec@1210190003 : Record 11012918;
               lvProjDevPhaseRec@1100485001 : Record 11012911;
               lvProjDevHouseModelRec@1100485000 : Record 11012919;
               lvBudgetToDistrRec@1100485002 : Record 11012909;
               ProjectCF@1100527705 : Record 11012635;
               ProjectCFRubric@1100527704 : Record 11012637;
               ProjectCFDate@1100527703 : Record 11012630;
               ProjectCFParameter@1100527701 : Record 11012631;
               ProjectCFProduct@1100527700 : Record 11012633;
             BEGIN
               lvBudgetToDistrRec.SETRANGE("Project No.","Project No.");
               lvBudgetToDistrRec.DELETEALL;

               lvInvPropBudgetRec.SETRANGE("Project No.","Project No.");
               lvInvPropBudgetRec.DELETEALL;

               lvInvPropRubricRec.SETRANGE("Project No.","Project No.");
               lvInvPropRubricRec.DELETEALL;

               lvInvPropRec.SETRANGE("Project No.","Project No.");
               lvInvPropRec.DELETEALL;

               lvProductTextRec.SETRANGE("Project No.","Project No.");
               lvProductTextRec.DELETEALL;

               lvProjDevPhaseRec.SETRANGE("Project No.","Project No.");
               lvProjDevPhaseRec.DELETEALL;

               lvProjDevHouseModelRec.SETRANGE("Project No.","Project No.");
               lvProjDevHouseModelRec.DELETEALL;

               ProjectCF.SETRANGE("Project No.","Project No.");
               IF ProjectCF.FINDSET(TRUE, FALSE) THEN BEGIN
                 REPEAT
                   ProjectCF.SetDeleteCompleteProject;
                   ProjectCF.DELETE(TRUE);
                 UNTIL ProjectCF.NEXT = 0;
               END;

               ProjectCFRubric.SETRANGE("Project No.","Project No.");
               ProjectCFRubric.DELETEALL(TRUE);

               ProjectCFDate.SETRANGE("Project No.","Project No.");
               ProjectCFDate.DELETEALL(TRUE);

               ProjectCFParameter.SETRANGE("Project No.","Project No.");
               ProjectCFParameter.DELETEALL(TRUE);

               ProjectCFProduct.SETRANGE("Project No.","Project No.");
               ProjectCFProduct.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Project Development;
               NOR=Prosjektutvikling;
               SVE=Projektutveckling];
    LookupPageID=Page11012662;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS(Description, "Starting Date", "Ending Date", City);
                                                                CheckUpdateBudgetDistrDates(FIELDNO("Project No."));
                                                              END;

                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr];
                                                   NotBlank=Yes }
    { 20  ;   ;Description         ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.Description WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning];
                                                   Editable=No }
    { 21  ;   ;Starting Date       ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job."Starting Date" WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=[ENU=Starting Date;
                                                              NOR=Startdato;
                                                              SVE=Startdatum];
                                                   Editable=No }
    { 22  ;   ;Ending Date         ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job."Ending Date" WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=[ENU=Ending Date;
                                                              NOR=Sluttdato;
                                                              SVE=Slutdatum];
                                                   Editable=No }
    { 25  ;   ;City                ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Job.City WHERE (No.=FIELD(Project No.)));
                                                   CaptionML=[ENU=City;
                                                              NOR=Poststed;
                                                              SVE=Ort];
                                                   Editable=No }
    { 30  ;   ;Location            ;Text50        ;CaptionML=[ENU=Location;
                                                              NOR=Lokasjon;
                                                              SVE=LagerstÑlle] }
    { 50  ;   ;Year                ;Integer       ;CaptionML=[ENU=Year;
                                                              NOR=èr;
                                                              SVE=èr] }
    { 60  ;   ;Date                ;Date          ;CaptionML=[ENU=Date;
                                                              NOR=Dato;
                                                              SVE=Datum] }
    { 65  ;   ;Principal           ;Code20        ;TableRelation=Contact.No.;
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Principal Name");
                                                              END;

                                                   CaptionML=[ENU=Principal;
                                                              NOR=Oppdragsgiver;
                                                              SVE=Uppdragsgivare] }
    { 66  ;   ;Principal Name      ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Principal)));
                                                   CaptionML=[ENU=Principal Name;
                                                              NOR=Oppdragsgivers navn;
                                                              SVE=Uppdragsgivarens namn];
                                                   Editable=No }
    { 70  ;   ;Average Capital Cost Perc.;Decimal ;CaptionML=[ENU=Wacc percentage;
                                                              NOR=Vekted kapitalkostnad, prosent;
                                                              SVE=Viktad kapitalkostnad, procent];
                                                   MinValue=0;
                                                   Description=Percentage: Weight Average Capital Costs (gewogen gemiddelde vermogenskosten) }
    { 90  ;   ;Gross Surface Area  ;Decimal       ;OnValidate=BEGIN
                                                                CalculateSurfaceArea(1);
                                                              END;

                                                   CaptionML=[ENU=Gross Surface Area;
                                                              NOR=Bruttoflate, omrÜde;
                                                              SVE=BruttoytomrÜde];
                                                   MinValue=0 }
    { 100 ;   ;Public Surface Area ;Decimal       ;OnValidate=BEGIN
                                                                CalculateSurfaceArea(2);
                                                              END;

                                                   CaptionML=[ENU=Public Surface Area;
                                                              NOR=Offentlig flate, omrÜde;
                                                              SVE=Offentligt ytomrÜde];
                                                   MinValue=0 }
    { 110 ;   ;Net Surface Area    ;Decimal       ;OnValidate=BEGIN
                                                                CalculateSurfaceArea(3);
                                                              END;

                                                   CaptionML=ENU=Net Surface Area;
                                                   MinValue=0 }
    { 120 ;   ;Issue Percentage    ;Decimal       ;OnValidate=BEGIN
                                                                CalculateSurfaceArea(4);
                                                              END;

                                                   CaptionML=[ENU=Issue Percentage;
                                                              NOR=Publiser prosent;
                                                              SVE=érendeprocent];
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 130 ;   ;Risc Profile        ;Option        ;CaptionML=[ENU=Risc Profile;
                                                              NOR=Risc-profil;
                                                              SVE=Riskprofil];
                                                   OptionCaptionML=[ENU=Low,Average,High;
                                                                    NOR=Lav,Gjennomsnittlig,Hõy;
                                                                    SVE=LÜg,Medel,Hîg];
                                                   OptionString=Low,Average,High }
    { 140 ;   ;Investment Proposal ;Code20        ;TableRelation="Investment Proposal".Version WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Investment Proposal;
                                                              NOR=Investeringsforslag;
                                                              SVE=Investeringsfîrslag] }
    { 150 ;   ;Definite Exploitation;Code20       ;TableRelation="Investment Proposal".Version WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Definite Exploitation;
                                                              NOR=Bestemt utnyttelse;
                                                              SVE=Definitivt utnyttjande] }
    { 160 ;   ;Actual Exploitation ;Code20        ;TableRelation="Investment Proposal".Version WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Actual Exploitation;
                                                              NOR=Faktisk utnyttelse;
                                                              SVE=Verkligt utnyttjande] }
    { 170 ;   ;Starting Date Sales ;Date          ;OnValidate=BEGIN
                                                                CheckUpdateBudgetDistrDates(FIELDNO("Starting Date Sales"));
                                                              END;

                                                   CaptionML=[ENU=Starting Date Sales;
                                                              NOR=Startdato salg;
                                                              SVE=Startdatum, fîrsÑljning] }
    { 175 ;   ;Starting Date Construction;Date    ;OnValidate=BEGIN
                                                                CheckUpdateBudgetDistrDates(FIELDNO("Starting Date Construction"));
                                                                CalcDeliveryDate;
                                                              END;

                                                   CaptionML=[ENU=Starting Date Construction;
                                                              NOR=Startdato bygging;
                                                              SVE=Startdatum, konstruktion] }
    { 177 ;   ;Delivery Date       ;Date          ;OnValidate=BEGIN
                                                                CheckUpdateBudgetDistrDates(FIELDNO("Delivery Date"));
                                                                CalcConstructionPeriod;
                                                              END;

                                                   CaptionML=[ENU=Delivery Date;
                                                              NOR=Leveringsdato;
                                                              SVE=Leveransdatum] }
    { 180 ;   ;Scheme Cost Budget Distr.;Code10   ;TableRelation="Budget Distribution Scheme";
                                                   CaptionML=[ENU=Scheme Cost Distribution;
                                                              NOR=Skjema, kostnadsdistribusjon;
                                                              SVE=Plan, kostnadsfîrdelning] }
    { 185 ;   ;Scheme Rev. Budget Distr.;Code10   ;TableRelation="Budget Distribution Scheme";
                                                   CaptionML=[ENU=Scheme Revenue Distribution;
                                                              NOR=Skjema, inntektsdistribusjon;
                                                              SVE=Plan, intÑktsfîrdelning] }
    { 190 ;   ;Frequency Cost Budget Distr.;DateFormula;
                                                   InitValue=1M;
                                                   OnValidate=BEGIN
                                                                IF (CALCDATE("Frequency Cost Budget Distr.", TODAY) < TODAY) THEN
                                                                  FIELDERROR("Frequency Cost Budget Distr.");
                                                              END;

                                                   CaptionML=[ENU=Frequency Cost Distribution;
                                                              NOR=Frekvens, kostnadsdistribusjon;
                                                              SVE=Frekvens, kostnadsfîrdelning] }
    { 195 ;   ;Frequency Rev. Budget Distr.;DateFormula;
                                                   InitValue=1M;
                                                   OnValidate=BEGIN
                                                                IF (CALCDATE("Frequency Rev. Budget Distr.", TODAY) < TODAY) THEN
                                                                  FIELDERROR("Frequency Rev. Budget Distr.");
                                                              END;

                                                   CaptionML=[ENU=Frequency Revenue Distribution;
                                                              NOR=Frekvens, inntektsdistribusjon;
                                                              SVE=Frekvens, intÑktsfîrdelning] }
    { 230 ;   ;Budget Level        ;Option        ;OnValidate=BEGIN
                                                                IF ("Budget Level" <> xRec."Budget Level") THEN
                                                                  CheckBudgetLinesUpdate((FIELDNO("Budget Level") = CurrFieldNo));
                                                              END;

                                                   CaptionML=[ENU=Budget Level;
                                                              NOR=BusjettnivÜ;
                                                              SVE=BudgetnivÜ];
                                                   OptionCaptionML=[ENU=Project,House Model;
                                                                    NOR=Prosjekt,Husmodell;
                                                                    SVE=Projekt,Husmodell];
                                                   OptionString=Project,Model }
    { 244 ;   ;Start Date Cost Budget Distr.;Date ;CaptionML=[ENU=Starting Date Cost Distribution;
                                                              NOR=Startdato, kostnadsdistribusjon;
                                                              SVE=Startdatum, kostnadsfîrdelning] }
    { 245 ;   ;End Date Cost Budget Distr.;Date   ;CaptionML=[ENU=Ending Date Cost Distribution;
                                                              NOR=Sluttdato, kostnadsdistribusjon;
                                                              SVE=Slutdatum, kostnadsfîrdelning] }
    { 246 ;   ;Start Date Rev. Budget Distr.;Date ;CaptionML=[ENU=Starting Date Revenue Distribution;
                                                              NOR=Startdato, inntektsdistribusjon;
                                                              SVE=Startdatum, intÑktsfîrdelning] }
    { 247 ;   ;End Date Rev. Budget Distr.;Date   ;CaptionML=[ENU=Ending Date Revenue Distribution;
                                                              NOR=Sluttdato, inntektsdistribusjon;
                                                              SVE=Slutdatum, intÑktsfîrdelning] }
    { 250 ;   ;Total Gross Floor Surface;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Proj. Development House Model"."Total Gross Floor Surface" WHERE (Project No.=FIELD(Project No.)));
                                                   CaptionML=[ENU=Total Gross Floor Surface;
                                                              NOR=Total brutto gulvflate;
                                                              SVE=Total bruttogolvyta];
                                                   MinValue=0;
                                                   Editable=No }
    { 251 ;   ;Total Net Floor Surface;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Proj. Development House Model"."Total Net Floor Surface" WHERE (Project No.=FIELD(Project No.)));
                                                   CaptionML=ENU=Total Net Floor Surface;
                                                   MinValue=0;
                                                   Editable=No }
    { 252 ;   ;Total Content       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Proj. Development House Model"."Total Content" WHERE (Project No.=FIELD(Project No.)));
                                                   CaptionML=[ENU=Total Content;
                                                              NOR=Totalt Innhold;
                                                              SVE=Totalt innehÜll];
                                                   MinValue=0;
                                                   Editable=No }
    { 270 ;   ;No. of Houses       ;Integer       ;CaptionML=ENU=No. of Houses }
    { 280 ;   ;Presale Rate        ;Decimal       ;CaptionML=ENU=Presale Rate }
    { 290 ;   ;Starting Date Demolition;Date      ;CaptionML=ENU=Starting Date Demolition }
    { 300 ;   ;Construction Period in Months;Decimal;
                                                   OnValidate=BEGIN
                                                                CalcDeliveryDate;
                                                              END;

                                                   CaptionML=ENU=Construction Period in Months }
    { 310 ;   ;Starting Date Transport;Date       ;CaptionML=ENU=Starting Date Transport }
    { 320 ;   ;Starting Date Delivery;Date        ;CaptionML=ENU=Starting Date Delivery }
    { 330 ;   ;Ending Date Delivery;Date          ;CaptionML=ENU=Ending Date Delivery }
    { 340 ;   ;Financial Closure Date;Date        ;CaptionML=ENU=Financial Closure Date }
    { 350 ;   ;Last Imported STIKO ;Code10        ;TableRelation="Investment Proposal".Version WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Last Imported STIKO;
                                                   Editable=No }
    { 351 ;   ;Last Imported Cashflow;Code10      ;TableRelation="Investment Proposal".Version WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=ENU=Last Imported Cashflow;
                                                   Editable=No }
    { 360 ;   ;Actual Phase        ;Code10        ;TableRelation="Project Development Phase".Phase WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=VAR
                                                                ProjectDevelopmentPhase@1100525000 : Record 11012911;
                                                              BEGIN
                                                                ProjectDevelopmentPhase.UpdateActualPhase("Project No.", "Actual Phase");
                                                                CALCFIELDS("Actual Phase Description");
                                                              END;

                                                   CaptionML=ENU=Actual Phase }
    { 370 ;   ;Template Code       ;Code10        ;TableRelation="Project CF Template";
                                                   CaptionML=[ENU=Template Code;
                                                              SVE=Mallkod] }
    { 380 ;   ;Actual Phase Description;Text30    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Standard Development Phase".Description WHERE (Phase=FIELD(Actual Phase)));
                                                   CaptionML=ENU=Actual Phase Description;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Project No.                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ProjDevSetupRec@1100485000 : Record 11012900;
      Text000@1100485004 : TextConst 'ENU=This will be modified in ''Project'' level. Continue?;NOR=Dette vil bli endret pÜ ''Prosjekt''-nivÜ. Fortsette?;SVE=Detta kommer att Ñndras pÜ ''Projekt''-nivÜn. FortsÑtta?';
      Text001@1100485003 : TextConst 'ENU=There is already budget present on ''%1'' level.;NOR=Det er allerede et budsjett pÜ ''%1''-nivÜ.;SVE=Det finns redan en budget pÜ nivÜn ''%1''.';
      Text002@1100485002 : TextConst 'ENU=There is already budget to distribute present on ''%1'' level.;NOR=Det er allerede et budsjett som skal distribueres pÜ ''%1''-nivÜ.;SVE=Det finns redan en budget som ska fîrdelas pÜ nivÜn ''%1''.';
      Text003@1100485001 : TextConst 'ENU=There is already budget and budget to distribute present on ''%1'' level.;NOR=Det er allerede et budsjett og et budsjett som skal distribueres pÜ ''%1''-nivÜ.;SVE=Det finns redan en budget och budget som ska fîrdelas pÜ nivÜn ''%1''.';
      MainProjectErrorTxt@1100527700 : TextConst 'ENU=Cash Flows and Cash Flow related data can not be created on Main Projects';

    PROCEDURE CalculateSurfaceArea@1210190000(IFromField@1210190000 : Integer);
    BEGIN
      CASE IFromField OF
        1:  //* Gross
          BEGIN
            IF "Public Surface Area" <> 0 THEN BEGIN
              IF "Public Surface Area" > "Gross Surface Area" THEN
                "Public Surface Area" := 0;
              "Net Surface Area" := "Gross Surface Area" - "Public Surface Area";
              CalculateIssuePerc();
            END ELSE BEGIN
              IF "Net Surface Area" <> 0 THEN BEGIN
                IF "Net Surface Area" > "Gross Surface Area" THEN
                  "Net Surface Area" := "Gross Surface Area";
                "Public Surface Area" := "Gross Surface Area" - "Net Surface Area";
                CalculateIssuePerc();
              END ELSE BEGIN
                IF "Issue Percentage" <> 0 THEN BEGIN
                  "Net Surface Area" := ROUND("Gross Surface Area" * ("Issue Percentage" / 100), 0.01);
                  "Public Surface Area" := "Gross Surface Area" - "Net Surface Area";
                END;
              END;
            END;
          END;
        2:  //* Public
          BEGIN
            IF "Gross Surface Area" <> 0 THEN BEGIN
              IF "Public Surface Area" > "Gross Surface Area" THEN
                "Gross Surface Area" := "Public Surface Area";
              "Net Surface Area" := "Gross Surface Area" - "Public Surface Area";
              CalculateIssuePerc();
            END ELSE BEGIN
              IF "Net Surface Area" <> 0 THEN BEGIN
                "Gross Surface Area" := "Net Surface Area" + "Public Surface Area";
                CalculateIssuePerc();
              END ELSE BEGIN
                IF "Issue Percentage" <> 0 THEN BEGIN
                  "Gross Surface Area" := ROUND("Public Surface Area" / (1 - ("Issue Percentage"/100)), 0.01);
                  "Net Surface Area" := "Gross Surface Area" - "Public Surface Area";
                END;
              END;
            END;
          END;
        3:  //* Net
          BEGIN
            IF "Gross Surface Area" <> 0 THEN BEGIN
              IF "Net Surface Area" > "Gross Surface Area" THEN
                "Gross Surface Area" := "Net Surface Area";
              "Public Surface Area" := "Gross Surface Area" - "Net Surface Area";
              CalculateIssuePerc();
            END ELSE BEGIN
              IF "Public Surface Area" <> 0 THEN BEGIN
                "Gross Surface Area" := "Net Surface Area" + "Public Surface Area";
                CalculateIssuePerc();
              END ELSE BEGIN
                IF "Issue Percentage" <> 0 THEN BEGIN
                  "Gross Surface Area" := ROUND("Net Surface Area" / "Issue Percentage" * 100, 0.01);
                  "Public Surface Area" := "Gross Surface Area" - "Net Surface Area";
                END;
              END;
            END;
          END;
        4:  //* Issue Perc.
          BEGIN
            IF "Gross Surface Area" <> 0 THEN BEGIN
              "Net Surface Area" := ROUND("Gross Surface Area" * ("Issue Percentage" / 100), 0.01);
              "Public Surface Area" := "Gross Surface Area" - "Net Surface Area";
            END ELSE BEGIN
              IF "Public Surface Area" <> 0 THEN BEGIN
                "Gross Surface Area" := ROUND("Public Surface Area" / (1 - ("Issue Percentage"/100)), 0.01);
                "Net Surface Area" := "Gross Surface Area" - "Public Surface Area";
              END ELSE BEGIN
                IF "Net Surface Area" <> 0 THEN BEGIN
                  "Gross Surface Area" := ROUND("Net Surface Area" / "Issue Percentage" * 100, 0.01);
                  "Public Surface Area" := "Gross Surface Area" - "Net Surface Area";
                END;
              END;
            END;
          END;
      END;
    END;

    PROCEDURE CalculateIssuePerc@1210190001();
    BEGIN
      IF "Gross Surface Area" = 0 THEN
        "Issue Percentage" := 0
      ELSE
        "Issue Percentage" := ROUND(("Net Surface Area" / "Gross Surface Area") * 100, 0.01);
    END;

    PROCEDURE CheckUpdateBudgetDistrDates@1100485009(ICurrFieldNo@1100485000 : Integer);
    BEGIN
      ProjDevSetupRec.GET;
      CASE ICurrFieldNo OF
        FIELDNO("Project No."):
          BEGIN
            CALCFIELDS("Starting Date", "Ending Date");
            IF ProjDevSetupRec."Type Start Cost Budget Distr." =
               ProjDevSetupRec."Type Start Cost Budget Distr."::"Starting Date Project"
            THEN
              "Start Date Cost Budget Distr." := "Starting Date";
            IF ProjDevSetupRec."Type Start Rev. Budget Distr." =
               ProjDevSetupRec."Type Start Rev. Budget Distr."::"Starting Date Project"
            THEN
              "Start Date Rev. Budget Distr." := "Starting Date";
            IF ProjDevSetupRec."Type End Cost Budget Distr." =
               ProjDevSetupRec."Type End Cost Budget Distr."::"Ending Date Project"
            THEN
              "End Date Cost Budget Distr." := "Ending Date";
            IF ProjDevSetupRec."Type End Rev. Budget Distr." =
               ProjDevSetupRec."Type End Rev. Budget Distr."::"Ending Date Project"
            THEN
              "End Date Rev. Budget Distr." := "Ending Date";
          END;
        FIELDNO("Starting Date Sales"):
          BEGIN
            IF ProjDevSetupRec."Type Start Cost Budget Distr." =
               ProjDevSetupRec."Type Start Cost Budget Distr."::"Starting Date Sales"
            THEN
              "Start Date Cost Budget Distr." := "Starting Date Sales";
            IF ProjDevSetupRec."Type Start Rev. Budget Distr." =
               ProjDevSetupRec."Type Start Rev. Budget Distr."::"Starting Date Sales"
            THEN
              "Start Date Rev. Budget Distr." := "Starting Date Sales";
          END;
        FIELDNO("Starting Date Construction"):
          BEGIN
            IF ProjDevSetupRec."Type Start Cost Budget Distr." =
               ProjDevSetupRec."Type Start Cost Budget Distr."::"Starting Date Construction"
            THEN
              "Start Date Cost Budget Distr." := "Starting Date Construction";
            IF ProjDevSetupRec."Type Start Rev. Budget Distr." =
               ProjDevSetupRec."Type Start Rev. Budget Distr.":: "Starting Date Construction"
            THEN
              "Start Date Rev. Budget Distr." := "Starting Date Construction";
          END;
        FIELDNO("Delivery Date"):
          BEGIN
            IF ProjDevSetupRec."Type End Cost Budget Distr." = ProjDevSetupRec."Type End Cost Budget Distr."::"Delivery Date" THEN
              "End Date Cost Budget Distr." := "Delivery Date";
            IF ProjDevSetupRec."Type End Rev. Budget Distr." = ProjDevSetupRec."Type End Rev. Budget Distr."::"Delivery Date" THEN
              "End Date Rev. Budget Distr." := "Delivery Date";
          END;
      END;
    END;

    PROCEDURE CheckBudgetLinesUpdate@1100485000(IMessMode@1100485002 : Boolean);
    VAR
      lvInvPropBudgetRec@1210190000 : Record 11012914;
      lvBudgetToDistrRec@1100485000 : Record 11012909;
      lvBudgetToDistrRec2@1100485003 : Record 11012909;
      lvBudgetToDistrRec3@1100485004 : Record 11012909;
      lvTypeNo@1100485001 : Integer;
    BEGIN
      lvTypeNo := 0;  //* 0:None, 1: Only Budget, 2: Only Budget to Distribute, 3: Both

      lvInvPropBudgetRec.SETRANGE("Project No.", "Project No.");
      lvInvPropBudgetRec.SETRANGE(Fixed, FALSE);
      IF "Budget Level" = "Budget Level"::Model THEN
        lvInvPropBudgetRec.SETRANGE("House Model", '')
      ELSE
        lvInvPropBudgetRec.SETFILTER("House Model", '<>%1', '');
      IF lvInvPropBudgetRec.FIND('-') THEN
        lvTypeNo := lvTypeNo + 1;

      lvBudgetToDistrRec.SETRANGE("Project No.", "Project No.");
      lvBudgetToDistrRec.SETRANGE(Fixed, FALSE);
      IF "Budget Level" = "Budget Level"::Model THEN
        lvBudgetToDistrRec.SETRANGE("House Model", '')
      ELSE
        lvBudgetToDistrRec.SETFILTER("House Model", '<>%1', '');
      IF lvBudgetToDistrRec.FIND('-') THEN
        lvTypeNo := lvTypeNo + 2;

      IF "Budget Level" = "Budget Level"::Model THEN BEGIN
        IF IMessMode THEN BEGIN
          CASE lvTypeNo OF
            1: MESSAGE(Text001, xRec."Budget Level");
            2: MESSAGE(Text002, xRec."Budget Level");
            3: MESSAGE(Text003, xRec."Budget Level");
          END;
        END;
      END ELSE BEGIN
        IF IMessMode THEN BEGIN
          CASE lvTypeNo OF
            1: IF NOT CONFIRM(STRSUBSTNO(Text001, xRec."Budget Level") + '\ \' + Text000) THEN ERROR('');
            2: IF NOT CONFIRM(STRSUBSTNO(Text002, xRec."Budget Level") + '\ \' + Text000) THEN ERROR('');
            3: IF NOT CONFIRM(STRSUBSTNO(Text003, xRec."Budget Level") + '\ \' + Text000) THEN ERROR('');
          END;
        END;
        IF lvTypeNo IN [1, 2] THEN BEGIN
          REPEAT
            lvInvPropBudgetRec."House Model" := '';
            lvInvPropBudgetRec.MODIFY;
          UNTIL lvInvPropBudgetRec.NEXT = 0;
        END;
        IF lvTypeNo IN [2, 3] THEN BEGIN
          REPEAT
            lvBudgetToDistrRec2 := lvBudgetToDistrRec;
            lvBudgetToDistrRec2."House Model" := '';
            lvBudgetToDistrRec3.SETRANGE("Project No.", lvBudgetToDistrRec2."Project No.");
            lvBudgetToDistrRec3.SETRANGE(Version, lvBudgetToDistrRec2.Version);
            lvBudgetToDistrRec3.SETRANGE("Rubric Code", lvBudgetToDistrRec2."Rubric Code");
            lvBudgetToDistrRec3.SETRANGE("House Model", '');
            IF lvBudgetToDistrRec3.FIND('+') THEN
              lvBudgetToDistrRec2."Line No." := lvBudgetToDistrRec3."Line No." + 10000
            ELSE
              lvBudgetToDistrRec2."Line No." := 10000;
            lvBudgetToDistrRec2.INSERT;

            lvBudgetToDistrRec.DELETE;
          UNTIL lvBudgetToDistrRec.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcDeliveryDate@1100527700();
    BEGIN
      IF ("Starting Date Construction" <> 0D) AND ("Construction Period in Months" <> 0) THEN
        "Delivery Date" := CALCDATE('<' + FORMAT(ROUND("Construction Period in Months",1)) + 'M>',"Starting Date Construction");
    END;

    PROCEDURE UpdateProjectCashflowDates@1100527708(Job@1100527702 : Record 11072003);
    VAR
      ProjectCFDate@1100527700 : Record 11012630;
      OldDate@1100527703 : Date;
    BEGIN
      ProjectCFDate.SETRANGE("Record Type",ProjectCFDate."Record Type"::Project);
      ProjectCFDate.SETRANGE("Project No.","Project No.");
      IF ProjectCFDate.FINDSET(TRUE,FALSE) THEN
        REPEAT
          OldDate := ProjectCFDate.Date;
          ProjectCFDate.GetDate("Project No.",Job,Rec);
          IF ProjectCFDate.Date <> OldDate THEN
            ProjectCFDate.MODIFY;
        UNTIL ProjectCFDate.NEXT = 0;
    END;

    PROCEDURE CashFlowDataAlreadyExist@1100527705() : Boolean;
    VAR
      ProjectCFDate@1100527703 : Record 11012630;
      ProjectCFRubric@1100527702 : Record 11012637;
      ProjectCFParameter@1100527701 : Record 11012631;
    BEGIN
      ProjectCFDate.SETRANGE("Project No.","Project No.");
      ProjectCFDate.SETRANGE("Record Type",ProjectCFDate."Record Type"::Project);

      ProjectCFParameter.SETRANGE("Project No.","Project No.");
      ProjectCFParameter.SETRANGE("Record Type",ProjectCFParameter."Record Type"::Project);

      ProjectCFRubric.SETRANGE("Project No.","Project No.");
      ProjectCFRubric.SETRANGE("Record Type",ProjectCFRubric."Record Type"::Project);

      IF ProjectCFDate.ISEMPTY AND ProjectCFParameter.ISEMPTY AND ProjectCFRubric.ISEMPTY THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE GetCashFlowDataFromCompanyTemplate@1100527701();
    VAR
      ProjectCFTemplate@1100527703 : Record 11012640;
      ProjectCFParameters@1100525003 : Record 11012631;
      ProjectCFDate@1100525002 : Record 11012630;
      ProjectCFProducts@1100525000 : Record 11012633;
      NewProjectCFParameters@1100525007 : Record 11012631;
      NewProjectCFDate@1100525006 : Record 11012630;
      NewProjectCFProducts@1100525004 : Record 11012633;
      ProjectCFRubric@1100527700 : Record 11012637;
      NewProjectCFRubric@1100527701 : Record 11012637;
      Job@1100527704 : Record 11072003;
      ProjectCFRubricPhase@1100527702 : Record 11012636;
      NewProjectCFRubricPhase@1100527705 : Record 11012636;
    BEGIN
      CheckMainProject("Project No.");

      Job.GET("Project No.");

      IF ProjectCFTemplate.COUNT = 1 THEN
        ProjectCFTemplate.FINDFIRST
      ELSE
        IF NOT (PAGE.RUNMODAL(0,ProjectCFTemplate) = ACTION::LookupOK) THEN
          EXIT
        ELSE
          ProjectCFTemplate.FIND;

      DeleteExistingCashFlowRecords;

      ProjectCFDate.SETRANGE("Template Code",ProjectCFTemplate.Code);
      ProjectCFDate.SETRANGE("Record Type",ProjectCFDate."Record Type"::Company);
      ProjectCFDate.SETRANGE("Project No.",'');
      ProjectCFDate.SETRANGE("Cash Flow",0DT);
      IF ProjectCFDate.FINDSET THEN
        REPEAT
          NewProjectCFDate := ProjectCFDate;
          NewProjectCFDate."Project No." := "Project No.";
          NewProjectCFDate."Record Type" := ProjectCFDate."Record Type"::Project;
          NewProjectCFDate.GetDate(NewProjectCFDate."Project No.",Job,Rec);
          NewProjectCFDate.INSERT;
        UNTIL ProjectCFDate.NEXT = 0;

      ProjectCFParameters.SETRANGE("Template Code",ProjectCFTemplate.Code);
      ProjectCFParameters.SETRANGE("Record Type",ProjectCFParameters."Record Type"::Company);
      ProjectCFParameters.SETRANGE("Project No.",'');
      ProjectCFParameters.SETRANGE("Cash Flow",0DT);
      IF ProjectCFParameters.FINDSET THEN
        REPEAT
          NewProjectCFParameters := ProjectCFParameters;
          NewProjectCFParameters."Project No." := "Project No.";
          NewProjectCFParameters."Record Type" := ProjectCFParameters."Record Type"::Project;
          NewProjectCFParameters.CALCFIELDS("From Date","Until Date");
          NewProjectCFParameters.INSERT;
        UNTIL ProjectCFParameters.NEXT = 0;

      ProjectCFRubric.SETRANGE("Template Code",ProjectCFTemplate.Code);
      ProjectCFRubric.SETRANGE("Record Type",ProjectCFRubric."Record Type"::Company);
      ProjectCFRubric.SETRANGE("Project No.",'');
      ProjectCFRubric.SETRANGE("Cash Flow",0DT);
      IF ProjectCFRubric.FINDSET THEN
        REPEAT
          NewProjectCFRubric := ProjectCFRubric;
          NewProjectCFRubric."Project No." := "Project No.";
          NewProjectCFRubric."Record Type" := ProjectCFRubric."Record Type"::Project;
          NewProjectCFRubric.INSERT;
        UNTIL ProjectCFRubric.NEXT = 0;

      ProjectCFRubricPhase.SETRANGE("Template Code",ProjectCFTemplate.Code);
      ProjectCFRubricPhase.SETRANGE("Record Type",ProjectCFRubricPhase."Record Type"::Company);
      ProjectCFRubricPhase.SETRANGE("Project No.",'');
      ProjectCFRubricPhase.SETRANGE("Cash Flow",0DT);
      IF ProjectCFRubricPhase.FINDSET THEN
        REPEAT
          NewProjectCFRubricPhase := ProjectCFRubricPhase;
          NewProjectCFRubricPhase."Project No." := "Project No.";
          NewProjectCFRubricPhase."Record Type" := ProjectCFRubricPhase."Record Type"::Project;
          NewProjectCFRubricPhase.INSERT;
        UNTIL ProjectCFRubricPhase.NEXT = 0;

      ProjectCFProducts.SETRANGE("Template Code",ProjectCFTemplate.Code);
      ProjectCFProducts.SETRANGE("Record Type",ProjectCFProducts."Record Type"::Company);
      ProjectCFProducts.SETRANGE("Project No.",'');
      ProjectCFProducts.SETRANGE("Cash Flow",0DT);
      IF ProjectCFProducts.FINDSET THEN
        REPEAT
          NewProjectCFProducts := ProjectCFProducts;
          NewProjectCFProducts."Project No." := "Project No.";
          NewProjectCFProducts."Record Type" := ProjectCFProducts."Record Type"::Project;
          NewProjectCFProducts.INSERT;
        UNTIL ProjectCFProducts.NEXT = 0;

      "Template Code" := ProjectCFTemplate.Code;
      MODIFY;
    END;

    LOCAL PROCEDURE DeleteExistingCashFlowRecords@1100527702();
    VAR
      ProjectCFParameters@1100527709 : Record 11012631;
      ProjectCFDate@1100527708 : Record 11012630;
      ProjectCFProducts@1100527706 : Record 11012633;
      ProjectCFRubric@1100527701 : Record 11012637;
      ProjectCFRubricPhase@1100527700 : Record 11012636;
    BEGIN
      ProjectCFProducts.SETRANGE("Project No.","Project No.");
      ProjectCFProducts.SETRANGE("Record Type",ProjectCFProducts."Record Type"::Project);
      ProjectCFProducts.DELETEALL;

      ProjectCFDate.SETRANGE("Project No.","Project No.");
      ProjectCFDate.SETRANGE("Record Type",ProjectCFDate."Record Type"::Project);
      ProjectCFDate.DELETEALL;

      ProjectCFParameters.SETRANGE("Project No.","Project No.");
      ProjectCFParameters.SETRANGE("Record Type",ProjectCFParameters."Record Type"::Project);
      ProjectCFParameters.DELETEALL;

      ProjectCFRubric.SETRANGE("Project No.","Project No.");
      ProjectCFRubric.SETRANGE("Record Type",ProjectCFRubric."Record Type"::Project);
      ProjectCFRubric.DELETEALL;

      ProjectCFRubricPhase.SETRANGE("Project No.","Project No.");
      ProjectCFRubricPhase.SETRANGE("Record Type",ProjectCFRubricPhase."Record Type"::Project);
      ProjectCFRubricPhase.DELETEALL;
    END;

    PROCEDURE CheckMainProject@1100527703(ProjectCde@1100527700 : Code[20]);
    VAR
      Job@1100527701 : Record 11072003;
    BEGIN
      IF ProjectCde <> '' THEN BEGIN
        Job.GET(ProjectCde);
        IF Job."Single/Main/Sub Project" = Job."Single/Main/Sub Project"::"Main Project" THEN
          ERROR(MainProjectErrorTxt);
      END;
    END;

    LOCAL PROCEDURE CalcConstructionPeriod@1100527704();
    BEGIN
      IF ("Starting Date Construction" <> 0D) AND ("Delivery Date" <> 0D) AND
         ("Starting Date Construction" <= "Delivery Date") THEN
        "Construction Period in Months" := CalcNoOfMonths("Starting Date Construction",CALCDATE('<15D>',"Delivery Date")) - 1;
    END;

    LOCAL PROCEDURE CalcNoOfMonths@1100527709(StartDate@1100527701 : Date;UntilDate@1100527700 : Date) CalculatedMonths : Decimal;
    VAR
      DateRec@1100527704 : Record 2000000007;
    BEGIN
      WITH DateRec DO BEGIN
        SETRANGE("Period Type", "Period Type"::Month);
        SETRANGE("Period Start",StartDate,UntilDate);
        EXIT(COUNT);
      END;
    END;

    BEGIN
    END.
  }
}

