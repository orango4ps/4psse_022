OBJECT Codeunit 11126222 DSP Request Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11126715;
    OnRun=BEGIN
            GetGlobalVars;
            GenericWebServiceQueue := Rec;

            CASE "Method Name" OF
              DSPManagement.GetTcRequest                         : ProcessInboundRequest;
              DSPManagement.GetTcProcessRequestServiceOrder      : ProcessServiceOrder;
              DSPManagement.GetTcProcessRequestServiceOrderObject: ProcessServiceOrderObject;
            ELSE
              ERROR(NotImplementedTxt, FIELDCAPTION("Method Name"), "Method Name");
            END;
          END;

  }
  CODE
  {
    VAR
      DSPSetup@1100528327 : Record 11126726;
      GenericWebServiceQueue@1100528323 : Record 11126715;
      ServiceSetup@1100528333 : Record 11012800;
      ConsumedWebServiceMgt@1100528303 : Codeunit 11229310;
      DSPInterfaceWS@1100528320 : Codeunit 11126713;
      DSPManagement@1100528319 : Codeunit 11126714;
      DSPRequestManagement@1100528332 : Codeunit 11126222;
      DotnetFunctions@1100528318 : Codeunit 11126712;
      FileManagement@1100528317 : Codeunit 419;
      GenericWebserviceFunctions@1100528321 : Codeunit 11126711;
      StringFunctions@1100528316 : Codeunit 11012273;
      XMLDOMManagement@1100528315 : Codeunit 6224;
      PrefEntity@1100528314 : Text;
      PrefPull@1100528335 : Text;
      PrefRequest@1100528313 : Text;
      RootElement@1100528312 : Text;
      RootElementNamespace@1100528311 : Text;
      RecId@1100528310 : RecordID;
      EmptyRecId@1100528331 : RecordID;
      RecRef@1100528309 : RecordRef;
      DnXmlDocument@1100528308 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DnXmlNamespaceManager@1100528307 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      DnXmlNamespaceManagerLIP@1100528334 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      AnswerTxt@1100528305 : TextConst 'ENU=Answer: %1';
      DisciplineCodeTxt@1100528343 : TextConst 'ENU=DisciplineCode';
      NoFileContentFound@1100528340 : TextConst 'ENU=No File Content found.';
      NotFoundInTableTxt@1100528337 : TextConst 'ENU=%1 %2 not found in Table %3.';
      NotImplementedTxt@1100528300 : TextConst 'ENU=%1 %2 is not implemented.';
      NOTTXT@1100528302 : TextConst 'ENU=not';
      NOTXT@1100528301 : TextConst 'ENU=No;SVE=Nej';
      OperatorTxt@1100528344 : TextConst 'ENU=OperatorCode';
      QuestionCodeTxt@1100528306 : TextConst 'ENU=Question Code: %1';
      QuestionTxt@1100528304 : TextConst 'ENU=Question: %1';
      RequestTxt@1100528328 : TextConst 'ENU=Request ID: %1';
      DnXmlRequest@1100528330 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DnXmlResponse@1100528329 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      UnknownTxt@1100528338 : TextConst 'ENU=%1 %2 unknown.';

    PROCEDURE AddAdditionalQuestions@1100528304(ServiceOrder@1100528300 : Record 11012823;BaseXpath@1100528305 : Text);
    VAR
      GenericTempTable@1100528301 : TEMPORARY Record 11020579;
      QuestionCode@1100528302 : Code[50];
      Operator@1100528303 : Text;
      Counter@1100528304 : Integer;
      DnXmlNodeList@1100528306 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      GenericTempTable.DELETEALL;
      IF (XMLDOMManagement.FindNodes(DnXmlDocument,
        BaseXpath + '/*[local-name()="Produkten"]/*[local-name()="Product"]/*[local-name()="AdditioneleVragen"]/*[local-name()="AdditioneleVraag"]', DnXmlNodeList))
      THEN BEGIN
        DSPManagement.AddServiceTextToServiceOrder(ServiceOrder."No.", 90, STRSUBSTNO(RequestTxt,
          XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="AanvraagID"]')));
        FOR Counter := 0 TO DnXmlNodeList.Count - 1 DO BEGIN
          QuestionCode := XMLDOMManagement.FindNodeText(DnXmlNodeList.Item(Counter), './/*[local-name()="VraagCode"]');
          Operator := XMLDOMManagement.FindNodeText(DnXmlDocument,
            STRSUBSTNO(BaseXpath + '/*[local-name()="Produkten"]/*[local-name()="Product"][%1]/*[local-name()="NetbeheerderCode"]',
              Counter + 1));

          IF (NOT GenericTempTable.GET(DSPManagement.GetTcLip, QuestionCode)) THEN BEGIN
            GenericTempTable.INIT;
            GenericTempTable."Key Code1" := DSPManagement.GetTcLip;
            GenericTempTable."Key Code2" := QuestionCode;
            GenericTempTable.INSERT;

            DSPManagement.AddServiceTextToServiceOrder(ServiceOrder."No.", 90, STRSUBSTNO('%1: %2',
              DSPManagement.GetTcLip, QuestionCode));
            DSPManagement.AddServiceTextToServiceOrder(ServiceOrder."No.", 90, STRSUBSTNO(QuestionTxt,
              XMLDOMManagement.FindNodeText(DnXmlNodeList.Item(Counter), './/*[local-name()="Vraag"]')));
            DSPManagement.AddServiceTextToServiceOrder(ServiceOrder."No.", 90, STRSUBSTNO(AnswerTxt,
              XMLDOMManagement.FindNodeText(DnXmlNodeList.Item(Counter), './/*[local-name()="Antwoord"]')));
          END;
        END;
      END;
    END;

    PROCEDURE CreateDisciplineObject@1100528327(DisciplineCode@1100528302 : Code[20];OperatorCode@1100528301 : Text) : Boolean;
    VAR
      DSPLIPDisciplineOperator@1100528300 : Record 11126729;
    BEGIN
      DSPLIPDisciplineOperator.SETFILTER(Code, '%1', '@'+DisciplineCode);
      DSPLIPDisciplineOperator.SETFILTER(Operator, '%1', '@'+OperatorCode);
      IF (DSPLIPDisciplineOperator.FINDFIRST) THEN BEGIN
        IF (DSPLIPDisciplineOperator.Discipline = 0) THEN
          ERROR(NotFoundInTableTxt, DSPLIPDisciplineOperator.FIELDCAPTION(Discipline), DisciplineCode,
            DSPLIPDisciplineOperator.TABLECAPTION);
        EXIT(NOT DSPLIPDisciplineOperator."Do not create Object");
      END;
      ERROR(UnknownTxt, STRSUBSTNO('%1 %2 %3 %4', DSPLIPDisciplineOperator.FIELDCAPTION(Discipline), DisciplineCode,
        DSPLIPDisciplineOperator.FIELDCAPTION(Operator), OperatorCode), DSPLIPDisciplineOperator.TABLECAPTION);
    END;

    PROCEDURE CreateTaskServiceObjects2@1100528318(DSPLIPRequest@1100528302 : Record 11126755;DSPLIPRequestLine@1100528301 : Record 11126756);
    BEGIN
      CreateTaskServiceObjects(DSPLIPRequest, DSPLIPRequestLine);
    END;

    PROCEDURE DetermineDspRequestProcessType@1100528829(DSPLIPRequest@1100528301 : Record 11126755;DSPLIPRequestLine@1100528300 : Record 11126756) : Text;
    BEGIN
      IF (DSPManagement.ExistServiceOrder(DSPLIPRequestLine."Connection Object Id", DSPLIPRequest."Request Id")) THEN
        EXIT(DSPManagement.GetTcProcessRequestServiceOrderObject);
      EXIT(DSPManagement.GetTcProcessRequestServiceOrder);
    END;

    PROCEDURE DspObjectSpecificationSettingExist@1100528823(DSPLIPRequestLine@1100528301 : Record 11126756;SpecCode@1100528804 : Code[20];VAR XpathExpression@1100528300 : Text) : Boolean;
    VAR
      DSPLIPRequest@1100528302 : Record 11126755;
      DSPObjSpecsSettings@1100528803 : Record 11126721;
    BEGIN
      DSPLIPRequest.GET(DSPLIPRequestLine."Entry No.");
      DSPObjSpecsSettings.SETRANGE(Type, DSPObjSpecsSettings.Type::LIP);
      DSPObjSpecsSettings.SETRANGE(Version, DSPLIPRequest."Message Version");
      DSPObjSpecsSettings.SETRANGE("Specification Code", SpecCode);
      DSPObjSpecsSettings.SETRANGE(Discipline, DSPLIPRequestLine.Discipline);
      DSPObjSpecsSettings.SETRANGE(Enabled, TRUE);
      IF DSPObjSpecsSettings.FINDFIRST THEN BEGIN
        XpathExpression := DSPObjSpecsSettings.Xpath;
        EXIT(TRUE);
      END;
      DSPObjSpecsSettings.SETRANGE(Discipline, 0);
      IF DSPObjSpecsSettings.FINDFIRST THEN BEGIN
        XpathExpression := DSPObjSpecsSettings.Xpath;
        EXIT(TRUE);
      END;
      DSPObjSpecsSettings.SETRANGE(Version, '');
      DSPObjSpecsSettings.SETRANGE(Discipline, DSPLIPRequestLine.Discipline);
      IF DSPObjSpecsSettings.FINDFIRST THEN BEGIN
        XpathExpression := DSPObjSpecsSettings.Xpath;
        EXIT(TRUE);
      END;
      DSPObjSpecsSettings.SETRANGE(Discipline, 0);
      IF DSPObjSpecsSettings.FINDFIRST THEN BEGIN
        XpathExpression := DSPObjSpecsSettings.Xpath;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE FillOrderTypeDsp@1100528317(VAR OrderType@1100528300 : Text;ProcessType@1100528301 : Code[2]);
    BEGIN
      IF (OrderType <> '') THEN OrderType += '-';
        OrderType += ProcessType;
    END;

    PROCEDURE GetFirstPossibleStartingDate@1100528311(BaseXpath@1100528302 : Text) : Date;
    VAR
      WishWeek@1100528300 : Integer;
      WishYear@1100528301 : Integer;
    BEGIN
      EVALUATE(WishWeek, XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="WensWeek"]'), 9);
      EVALUATE(WishYear, XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="WensJaar"]'), 9);
      IF (WishWeek <> 0) AND (WishYear <> 0) THEN BEGIN
        IF (WishWeek = 53) AND (WishYear = 2019) THEN
          EXIT(DWY2DATE(1, 1, WishYear+1))
        ELSE
          EXIT(DWY2DATE(1, WishWeek, WishYear));
      END;
      EXIT(0D);
    END;

    PROCEDURE SetDnXmlDocument@1100528306(DnXmlDocumentIn@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    BEGIN
        DnXmlDocument := DnXmlDocumentIn;
    END;

    PROCEDURE UpdateObjectSpecificationsValues@1100525078(DSPLIPRequestLine@1100525001 : Record 11126756;ServiceOrderObject@1100528800 : Record 11071724;Counter@1100528300 : Integer;Counter2@1100528301 : Integer) : Boolean;
    VAR
      ServiceOrderObjSpecLine@1100525000 : Record 11071782;
      Xpath@1100528806 : Text;
    BEGIN
      ServiceOrderObjSpecLine.SETRANGE("Service Order No.", ServiceOrderObject."Service Order No.");
      ServiceOrderObjSpecLine.SETRANGE("Service Object No.", ServiceOrderObject."Object No.");
      ServiceOrderObjSpecLine.SETRANGE(Type,ServiceOrderObjSpecLine.Type::Line);
      IF (NOT ServiceOrderObjSpecLine.FINDSET(TRUE)) THEN
        EXIT;

      REPEAT
        IF (DspObjectSpecificationSettingExist(DSPLIPRequestLine, ServiceOrderObjSpecLine."Specification Code",
            Xpath))
        THEN BEGIN
          ServiceOrderObjSpecLine."Old Value" := COPYSTR(XMLDOMManagement.FindNodeText(DnXmlDocument,
            STRSUBSTNO(Xpath, Counter, Counter2)), 1, MAXSTRLEN(ServiceOrderObjSpecLine."Old Value"));
          ServiceOrderObjSpecLine.MODIFY(TRUE);
        END;
      UNTIL ServiceOrderObjSpecLine.NEXT = 0;
    END;

    PROCEDURE UpdateOrderTypeDsp@1100528314(OrderType@1100528301 : Text;Discipline@1100528300 : Option) : Text;
    VAR
      ServiceOrder@1100528302 : Record 11012823;
    BEGIN
      CASE Discipline OF
        1: FillOrderTypeDsp(OrderType, 'G');
        2: FillOrderTypeDsp(OrderType, 'E');
        3: FillOrderTypeDsp(OrderType, 'W');
        4: FillOrderTypeDsp(OrderType, 'MC');
        5: FillOrderTypeDsp(OrderType, 'MK');
        6: FillOrderTypeDsp(OrderType, 'MG');
      END;
      EXIT(COPYSTR(OrderType, 1, MAXSTRLEN(ServiceOrder."Dsp Order Type")));
    END;

    LOCAL PROCEDURE "---Locals---"@1100528302();
    BEGIN
    END;

    LOCAL PROCEDURE CheckResponse@1100528336(DnXmlRequest@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";DnXmlResponse@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      ResponseCode@1100528300 : Text;
      Text001@1100528302 : TextConst 'ENU=Error in Object:%1';
    BEGIN
      ResponseCode := DSPManagement.FindNodeResponseCode(DnXmlResponse);
      IF (ResponseCode <> 'OK') THEN
        ERROR(Text001, DnXmlResponse.OuterXml);
    END;

    LOCAL PROCEDURE CreateRequestDocument@1100528310(RecId@1100528304 : RecordID;BaseXpath@1100528303 : Text) : Code[20];
    VAR
      DocumentProperties@1100528311 : Record 11012746;
      ExternalDocumentManagement@1100528301 : Codeunit 11012403;
      DocNo@1100528300 : Code[20];
    BEGIN
      IF (XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Bijlage"]') = '') THEN
        EXIT;

      DocNo := ExternalDocumentManagement.AddExternalDocumentWithContent(RecId.GETRECORD,
        XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Bestandsnaam"]'),
        XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Bijlage"]'),
          '', '', DSPSetup."Default Lip Document Type", '',
        XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Omschrijving"]'),
        '', '', TODAY, TODAY, TODAY, 0, '');

      DocumentProperties.GET(DocNo);
      DocumentProperties."Document No." := XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="BijlageID"]');
      DocumentProperties.Subject := XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="VraagCode"]');
      DocumentProperties."File Extension" := FileManagement.GetExtension(DocumentProperties.File);
      DocumentProperties.MODIFY;
      EXIT(DocNo);
    END;

    LOCAL PROCEDURE CreateRequestDocuments@1100528300(DSPLIPRequest@1100528300 : Record 11126755);
    VAR
      DocumentProperties@1100528305 : Record 11012746;
      Counter@1100528301 : Integer;
      DocNo@1100528303 : Code[20];
      NodeCount@1100528304 : Integer;
      Xpath@1100528302 : Text;
    BEGIN
      Xpath := '//*[local-name()="Bijlagen"]/*[local-name()="Bijlage"]';
      NodeCount := XMLDOMManagement.FindNodeCount(DnXmlDocument, Xpath);
      IF (NodeCount = 0) THEN
        EXIT;

      FOR Counter := 1 TO NodeCount  DO BEGIN
        DocNo := CreateRequestDocument(DSPLIPRequest.RECORDID, STRSUBSTNO('%1[%2]', Xpath, Counter));
        IF (DocumentProperties.GET(DocNo)) THEN BEGIN
          DocumentProperties.Reference := DSPLIPRequest."Request Id";
          DocumentProperties.MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateNewTask@1100525003(MethodName@1100525001 : Text;RelatedRecordId@1100529900 : RecordID;DirectionIn@1100529901 : Option;CompanyNameIn@1100528300 : Text) : BigInteger;
    VAR
      EntryNo@1100528301 : BigInteger;
    BEGIN
      EXIT(DSPManagement.CreateNewTask(MethodName, RelatedRecordId, DirectionIn, CompanyNameIn));
    END;

    LOCAL PROCEDURE CreateRequest@1100525041(VAR DSPLIPRequest@1100528301 : Record 11126755);
    BEGIN
      DSPLIPRequest.INIT;
      DSPLIPRequest."Message Version" := LOWERCASE(XMLDOMManagement.FindNodeText(DnXmlResponse, '//*[local-name()="MessageVersion"]'));

      DSPLIPRequest."Entry No." := 0;
      DSPLIPRequest."Message Version" := LOWERCASE(DSPManagement.FindNodeMessageVersion(DnXmlDocument));
      DSPLIPRequest."Sender Id" := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="SenderID"]');
      DSPLIPRequest."Receipient Id" := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="RecipientID"]');
      DSPLIPRequest."Receipient Id" := XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="RecipientID"]');
      DSPLIPRequest."Service Area Contract Code" :=
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="VerzorgingsgebiedContractCode"]');
      //fixme
      DSPLIPRequest."Company Name" := DSPManagement.GetCompanyNameByAgreementNo(DSPLIPRequest."Service Area Contract Code");
      DSPLIPRequest."Request Id" := DSPManagement.FindNodeAanvraagID(DnXmlDocument);
      DSPLIPRequest."E-Mail" := XMLDOMManagement.FindNodeText(DnXmlDocument,
        '//*[local-name()="RelatieGegevens"]//*[local-name()="Emailadres"]');
      DSPLIPRequest.Phone := XMLDOMManagement.FindNodeText(DnXmlDocument,
        '//*[local-name()="RelatieGegevens"]//*[local-name()="Telefoonnummer"]');
      DSPLIPRequest."Mobile Phone" := XMLDOMManagement.FindNodeText(DnXmlDocument,
        '//*[local-name()="RelatieGegevens"]//*[local-name()="TelefoonnummerMobiel"]');
      DSPLIPRequest.Principal := XMLDOMManagement.FindNodeText(DnXmlDocument,
        '//*[local-name()="RelatieGegevens"]//*[local-name()="Bedrijfsnaam"]');
      EVALUATE(DSPLIPRequest."Request Version", XMLDOMManagement.FindNodeText(DnXmlDocument,
        '//*[local-name()="AanvraagVersie"]'), 9);
      DSPLIPRequest."Service Area Contract Code" :=
        XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="VerzorgingsgebiedContractCode"]');

      GenericWebServiceQueue.CALCFIELDS("Xml Message");
      DSPLIPRequest."Xml Message" := GenericWebServiceQueue."Xml Message";

      DSPLIPRequest.INSERT(TRUE);

      CreateRequestLines(DSPLIPRequest);
      CreateRequestDocuments(DSPLIPRequest);
    END;

    LOCAL PROCEDURE CreateRequestLines@1100528312(VAR DSPLIPRequest@1100528301 : Record 11126755);
    VAR
      DSPLIPRequestLine@1100528306 : Record 11126756;
      BaseXpath@1100528305 : Text;
      BaseXpath2@1100528302 : Text;
      Counter@1100528300 : Integer;
      Counter2@1100528307 : Integer;
      DisciplineCode@1100528309 : Text;
      OperatorCode@1100528303 : Text;
      DnXmlNodeList@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      DnXmlNodeList2@1100528308 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      BaseXpath := '//*[local-name()="AansluitObjecten"]/*[local-name()="AansluitObject"]';
      IF (XMLDOMManagement.FindNodes(DnXmlDocument, BaseXpath, DnXmlNodeList)) THEN BEGIN
        FOR Counter := 0 TO DnXmlNodeList.Count - 1 DO BEGIN
          BaseXpath := STRSUBSTNO('//*[local-name()="AansluitObjecten"]/*[local-name()="AansluitObject"][%1]', Counter + 1);
          IF (XMLDOMManagement.FindNodes(DnXmlDocument,
            BaseXpath + '/*[local-name()="Produkten"]/*[local-name()="Product"]', DnXmlNodeList2))
          THEN BEGIN
            FOR Counter2 := 0 TO DnXmlNodeList2.Count - 1 DO BEGIN
              BaseXpath2 := BaseXpath + STRSUBSTNO('/*[local-name()="Produkten"]/*[local-name()="Product"][%1]', Counter2 + 1);

              DisciplineCode := XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath2 + '/*[local-name()="DisciplineCode"]');
              OperatorCode := XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath2 + '/*[local-name()="NetbeheerderCode"]');
              IF (CreateDisciplineObject(DisciplineCode, OperatorCode)) THEN BEGIN
                IF (NOT DSPLIPRequestLine.GET(DSPLIPRequest."Entry No.", Counter + 1, Counter2 + 1)) THEN BEGIN
                  DSPLIPRequestLine.INIT;
                  DSPLIPRequestLine."Entry No." := DSPLIPRequest."Entry No.";
                  DSPLIPRequestLine."Connection Object Seq No." := Counter + 1;
                  DSPLIPRequestLine."Product Seq No." := Counter2 + 1;
                  DSPLIPRequestLine."Company Name" := DSPLIPRequest."Company Name";
                  DSPLIPRequestLine.INSERT(TRUE);
                END;

                DSPLIPRequestLine."Connection Object Id" := DSPManagement.GetConnectionObjectId(
                  XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Postcode"]'),
                  XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Huisnummer"]'),
                  XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="HuisnummerToevoeging"]'));

                DSPLIPRequestLine.Discipline := DSPManagement.GetDiscipline(DisciplineCode, OperatorCode);
                DSPLIPRequestLine.Operator := DSPManagement.GetOperator(OperatorCode);

                IF (DSPManagement.ExistServiceOrder(DSPLIPRequestLine."Connection Object Id", DSPLIPRequest."Request Id")) THEN  BEGIN
                  DSPLIPRequestLine."Service Order No." := DSPManagement.GetServiceOrderNo(DSPLIPRequestLine."Connection Object Id", DSPLIPRequest."Request Id");
                  IF (DSPManagement.ExistLipServiceOrderObject(DSPLIPRequestLine, DSPLIPRequestLine.Operator)) THEN
                    DSPLIPRequestLine."Object No." := DSPManagement.GetLipServiceOrderObjectNo(DSPLIPRequestLine);
                END;
                DSPLIPRequestLine.MODIFY(TRUE);
              END;
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateTaskServiceObjects@1100528315(DSPLIPRequest@1100528300 : Record 11126755;DSPLIPRequestLine@1100528307 : Record 11126756);
    VAR
      GenericWebServiceQueueNew@1100528302 : Record 11126715;
      BaseXpath@1100528304 : Text;
      BaseXpath2@1100528306 : Text;
      EntryNo@1100528301 : BigInteger;
    BEGIN
      BaseXpath := STRSUBSTNO('//*[local-name()="AansluitObjecten"]/*[local-name()="AansluitObject"][%1]',
        DSPLIPRequestLine."Connection Object Seq No.");
      BaseXpath2 := STRSUBSTNO('//*[local-name()="AansluitObjecten"]/*[local-name()="AansluitObject"][%1]/*[local-name()="Produkten"]/*[local-name()="Product"][%2]',
        DSPLIPRequestLine."Connection Object Seq No.", DSPLIPRequestLine."Product Seq No.");

      EntryNo := CreateNewTask(DSPManagement.GetTcProcessRequestServiceOrderObject, DSPLIPRequest.RECORDID, 1, DSPLIPRequest."Company Name");
      GenericWebServiceQueueNew.GET(EntryNo);
      GenericWebServiceQueueNew.AddParameter(0, 1, BaseXpath, 'AansluitObject Xpath');
      GenericWebServiceQueueNew.AddParameter(0, 2, BaseXpath2, 'Product Xpath');
      GenericWebServiceQueueNew.AddParameter(0, 11, FORMAT(DSPLIPRequestLine."Connection Object Seq No."), 'AansluitObject SeqNo');
      GenericWebServiceQueueNew.AddParameter(0, 21, FORMAT(DSPLIPRequestLine."Product Seq No."), 'Product SeqNo');
    END;

    LOCAL PROCEDURE GetGlobalVars@1100528301();
    BEGIN
      DSPSetup.GET;
      DSPSetup.TESTFIELD("Dsp Active", TRUE);
      DSPSetup.TESTFIELD("Default Company");

      DSPSetup.TESTFIELD("Default Lip Document Type");
      DSPSetup.TESTFIELD("Status Request Created");

      DSPManagement.CreateXmlNamespaceManager(DnXmlNamespaceManager);
    END;

    LOCAL PROCEDURE ProcessServiceOrder@1100528303();
    VAR
      DSPCodeAlphaNum@1100528312 : Record 11126731;
      DSPCodeAlphaNum2@1100528311 : Record 11126731;
      DSPLIPRequest@1100528300 : Record 11126755;
      DSPLIPRequestLine@1100528303 : Record 11126756;
      DSPAgreementSettings@1100528301 : Record 11126725;
      ServiceOrder@1100528302 : Record 11012823;
      ServiceLocation@1100528313 : Record 11012801;
      DocumentLinkManagement@1100528309 : Codeunit 11012401;
      Counter@1100528304 : Integer;
      BaseXpath@1100528305 : Text;
      ConnectionObjectId@1100528307 : Text;
      SourceRecRef@1100528306 : RecordRef;
      TargetRecRef@1100528308 : RecordRef;
    BEGIN
      DSPSetup.GET;
      DSPLIPRequest.GET(GenericWebServiceQueue."Related Record ID");
      DSPLIPRequest.GetXmlMessage(DnXmlDocument);
      SetLipNamespaces(DSPLIPRequest."Message Version");
      //fixme
      DSPAgreementSettings.GET(DSPLIPRequest."Service Area Contract Code");
      //DSPManagement.GetDspAgreementSettings(XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="AanvragerID"]'),
      //  DSPAgreementSettings);
      BaseXpath := GenericWebServiceQueue.GetParameter(0, 1);

      ConnectionObjectId := DSPManagement.GetConnectionObjectId(
        XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Postcode"]'),
        XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Huisnummer"]'),
        XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="HuisnummerToevoeging"]'));

      ServiceLocation.SETRANGE("Post Code", XMLDOMManagement.FindNodeText(DnXmlDocument,
        BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Postcode"]'));
      ServiceLocation.SETRANGE("House No.", XMLDOMManagement.FindNodeText(DnXmlDocument,
        BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Huisnummer"]'));
      IF (NOT ServiceLocation.FINDFIRST) THEN
        ServiceLocation.INIT;

      DSPLIPRequestLine.SETRANGE("Entry No.", DSPLIPRequest."Entry No.");
      DSPLIPRequestLine.SETRANGE("Connection Object Id", ConnectionObjectId);
      IF (DSPLIPRequestLine.FINDSET(TRUE)) THEN BEGIN
        REPEAT
          IF (NOT ServiceOrder.GET(DSPManagement.GetServiceOrderNo(DSPLIPRequestLine."Connection Object Id", DSPLIPRequest."Request Id"))) THEN BEGIN
            IF (NOT DSPCodeAlphaNum.GET(2,
                XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '//*[local-name()="DienstCode"]'),
                XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '//*[local-name()="SubdienstCode"]')))
            THEN
              DSPCodeAlphaNum.INIT;
            DSPCodeAlphaNum.CALCFIELDS("Sub Code Description");
            IF (NOT DSPCodeAlphaNum2.GET(1,
                XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="ObjectType"]'), ''))
            THEN
              DSPCodeAlphaNum2.INIT;

            ServiceOrder.INIT;
            ServiceOrder.VALIDATE("No.", '');
            ServiceOrder.INSERT(TRUE);

            ServiceOrder.VALIDATE("Service Contract No.", DSPAgreementSettings."Service Contract No.");
            IF (ServiceLocation."No." <> '') THEN
              ServiceOrder.VALIDATE("Service Location No.", ServiceLocation."No.");

            ServiceOrder.Description := COPYSTR(STRSUBSTNO('%1 %2', DSPCodeAlphaNum.Description,
              DSPCodeAlphaNum."Sub Code Description"), 1, MAXSTRLEN(ServiceOrder.Description));
            ServiceOrder."Description 2" := COPYSTR(DSPCodeAlphaNum2.Description, 1, MAXSTRLEN(ServiceOrder."Description 2"));
            ServiceOrder."Dsp Connection Object Id" := DSPLIPRequestLine."Connection Object Id";
            ServiceOrder."Dsp Cluster Id" := DSPLIPRequest."Request Id";
            ServiceOrder."Dsp Production Cluster Id" := DSPLIPRequest."Request Id";
            IF (DSPSetup."Default Order Type LIP" <> '') THEN
              ServiceOrder.VALIDATE("Order Type", DSPSetup."Default Order Type LIP");

            ServiceOrder."Post Code" := XMLDOMManagement.FindNodeText(DnXmlDocument,
              BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Postcode"]');
            ServiceOrder.Address := DSPManagement.GetServiceOrderAddress(
              XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Straat"]'),
              XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Huisnummer"]'),
              XMLDOMManagement.FindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Adres"]/*[local-name()="HuisnummerToevoeging"]'));
            ServiceOrder.City := XMLDOMManagement.FindNodeText(DnXmlDocument,
              BaseXpath + '/*[local-name()="Adres"]/*[local-name()="Plaats"]');

            ServiceOrder."Contact Name" := DSPManagement.ConstructContactName(
              XMLDOMManagement.FindNodeText(DnXmlDocument,
                '//*[local-name()="Bedrijfsgegevens"]/*[local-name()="ContactPersoon"]/*[local-name()="Aanhef"]'),
              XMLDOMManagement.FindNodeText(DnXmlDocument,
                '//*[local-name()="Bedrijfsgegevens"]/*[local-name()="ContactPersoon"]/*[local-name()="Voorletters"]'),
                '',
              XMLDOMManagement.FindNodeText(DnXmlDocument,
                '//*[local-name()="Bedrijfsgegevens"]/*[local-name()="ContactPersoon"]/*[local-name()="Achternaam"]'));

            ServiceOrder."E-Mail" := XMLDOMManagement.FindNodeText(DnXmlDocument,
              '//*[local-name()="ContactPersoon"]/*[local-name()="Emailadres"]');
            ServiceOrder."Phone No." := XMLDOMManagement.FindNodeText(DnXmlDocument,
              '//*[local-name()="ContactPersoon"]/*[local-name()="TelefoonnummerMobiel"]');
            ServiceOrder."Mobile Phone No." :=  XMLDOMManagement.FindNodeText(DnXmlDocument,
              '//*[local-name()="ContactPersoon"]/*[local-name()="TelefoonnummerMobiel"]');

            ServiceOrder."First Possible Starting Date":= GetFirstPossibleStartingDate(BaseXpath);
            ServiceOrder."Starting Date" :=  ServiceOrder."First Possible Starting Date";

            ServiceOrder."Territory Code" := DSPAgreementSettings."Region Code";
            ServiceOrder."VAT Prod. Posting Group" := DSPSetup."Default VAT Prod. Post. Group";
            ServiceOrder."Global Dimension 1 Code" := DSPAgreementSettings."Global Dimension 1 Code";
            ServiceOrder."Department Code (Other)" := DSPAgreementSettings."Global Dimension 1 Code";
            ServiceOrder.Origin := ServiceOrder.Origin::DSP;

            ServiceOrder.MODIFY(TRUE);
            AddAdditionalQuestions(ServiceOrder, BaseXpath);

            SourceRecRef.GETTABLE(DSPLIPRequest);
            TargetRecRef.GETTABLE(ServiceOrder);
            DocumentLinkManagement.CopyDocLinks(SourceRecRef, TargetRecRef);
          END;

          DSPLIPRequestLine."Service Order No." := ServiceOrder."No.";
          DSPLIPRequestLine."Processed On" := CURRENTDATETIME;
          DSPLIPRequestLine.MODIFY(TRUE);

          DSPManagement.UpdateReferencePoint(ServiceOrder."No.", DSPSetup."Reference Point New Lip Order");
        UNTIL (DSPLIPRequestLine.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE ProcessServiceOrderObject@1100528313();
    VAR
      DSPAssignment@1100528309 : Record 11126740;
      DSPLIPRequest@1100528300 : Record 11126755;
      DSPLIPRequestLine@1100528308 : Record 11126756;
      DSPAgreementSettings@1100528302 : Record 11126725;
      ContractObject@1100528304 : Record 11071702;
      ServiceContract@1100528307 : Record 11012812;
      ServiceObject@1100528305 : Record 11071691;
      ServiceOrder@1100528313 : Record 11012823;
      ServiceOrderObject@1100528303 : Record 11071724;
      BaseXpath@1100528301 : Text;
      BaseXpath2@1100528310 : Text;
      Counter@1100528312 : Integer;
      Counter2@1100528311 : Integer;
      ObjectNo@1100528306 : Code[20];
    BEGIN
      DSPLIPRequest.GET(GenericWebServiceQueue."Related Record ID");
      DSPLIPRequest.GetXmlMessage(DnXmlDocument);
      SetLipNamespaces(DSPLIPRequest."Message Version");
      //fixme
      DSPAgreementSettings.GET(DSPLIPRequest."Service Area Contract Code");
      //DSPManagement.GetDspAgreementSettings(XMLDOMManagement.FindNodeText(DnXmlDocument, '//*[local-name()="AanvragerID"]'),
      //  DSPAgreementSettings);
      ServiceContract.GET(DSPAgreementSettings."Service Contract No.");

      BaseXpath := GenericWebServiceQueue.GetParameter(0, 1);
      BaseXpath2 := GenericWebServiceQueue.GetParameter(0, 2);
      EVALUATE(Counter, GenericWebServiceQueue.GetParameter(0, 11));
      EVALUATE(Counter2, GenericWebServiceQueue.GetParameter(0, 21));

      DSPLIPRequestLine.GET(DSPLIPRequest."Entry No.", Counter, Counter2);
      DSPLIPRequestLine.TESTFIELD("Service Order No.");
      ObjectNo := DSPLIPRequestLine."Object No.";

      IF (ObjectNo <> '') THEN BEGIN
        ServiceOrderObject.GET(DSPLIPRequestLine."Service Order No.", ObjectNo);
        ServiceObject.GET(DSPLIPRequestLine."Object No.");
      END ELSE BEGIN
        ObjectNo := DSPManagement.GetLipServiceOrderObjectNo(DSPLIPRequestLine);
        IF (ObjectNo <> '') THEN BEGIN
          ServiceOrderObject.GET(DSPLIPRequestLine."Service Order No.", ObjectNo, '');
          ServiceObject.GET(ObjectNo);
        END ELSE BEGIN
          ServiceObject.INIT;
          ServiceObject."No." := '';
          ServiceObject.INSERT(TRUE);
          ObjectNo := ServiceObject."No.";

          ServiceObject.Status := DSPSetup."Status Request Created";
          ServiceObject.VALIDATE("Standard Object No.", DSPManagement.GetDspServiceObjectStandardObjectCode(DSPLIPRequestLine.Discipline));
          ServiceObject."Dsp Cluster Id" := DSPLIPRequest."Request Id";
          ServiceObject."Dsp Connection Object Id" := DSPLIPRequestLine."Connection Object Id";
          ServiceObject."Dsp Origin" := ServiceObject."Dsp Origin"::LIP;
          ServiceObject."Dsp Discipline" := DSPLIPRequestLine.Discipline;
          ServiceObject."Dsp Operator" := DSPLIPRequestLine.Operator;
          ServiceObject."Dsp Version No." := DSPLIPRequest."Message Version";
          ServiceObject.MODIFY(TRUE);

          ContractObject.VALIDATE("Service Contract No.", DSPAgreementSettings."Service Contract No.");
          ContractObject."Service Object No." := ObjectNo;
          ContractObject.INSERT(TRUE);

          ServiceOrderObject.INIT;
          ServiceOrderObject.VALIDATE("Service Order No.", DSPLIPRequestLine."Service Order No.");
          ServiceOrderObject."Object No." := ObjectNo;
          ServiceOrderObject."Maintenance Scheme" := '';
          ServiceOrderObject.INSERT(TRUE);

          ServiceOrderObject.VALIDATE("Service Contract No.", DSPAgreementSettings."Service Contract No.");
          ServiceOrderObject.VALIDATE("Standard Object No.", ServiceObject."Standard Object No.");
          ServiceOrderObject.MODIFY(TRUE);

          ServiceOrder.GET(ServiceOrderObject."Service Order No.");
          ServiceOrder."Dsp Order Type" := UpdateOrderTypeDsp(ServiceOrder."Dsp Order Type", DSPLIPRequestLine.Discipline);
          ServiceOrder.MODIFY(TRUE);
        END;
      END;

      DSPManagement.GetDspAssignmentByServiceOrderNoObjectNo(DSPLIPRequestLine."Service Order No.", ObjectNo, DSPAssignment);

      DSPLIPRequestLine."Assignment Id" := DSPAssignment."Assignment Id";
      DSPLIPRequestLine."Object No." := ObjectNo;
      DSPLIPRequestLine.MODIFY(TRUE);

      UpdateObjectSpecificationsValues(DSPLIPRequestLine, ServiceOrderObject, Counter, Counter2);
    END;

    LOCAL PROCEDURE SetLipNamespaces@1100528309(MessageVersion@1100528300 : Text);
    BEGIN
      PrefRequest := DnXmlNamespaceManager.LookupPrefix(DSPManagement.GetNsAanvraagService(MessageVersion));
      PrefEntity := DnXmlNamespaceManager.LookupPrefix(DSPManagement.GetNsEntiteiten(MessageVersion));
      PrefPull := DnXmlNamespaceManager.LookupPrefix(DSPManagement.GetNsPullService(MessageVersion));
    END;

    LOCAL PROCEDURE ProcessInboundRequest@1100528316();
    VAR
      MessageVersion@1100528302 : Text;
      DnXmlInbound@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      MessageVersion := GenericWebServiceQueue.GetParameter(0, 1);
      SetLipNamespaces(MessageVersion);
      GenericWebServiceQueue.GetXmlMessage(DnXmlDocument);

      ProcessRequest(MessageVersion);
    END;

    LOCAL PROCEDURE ProcessRequest@1100528324(MessageVersion@1100528309 : Text);
    VAR
      DSPLIPRequest@1100528302 : Record 11126755;
      DSPLIPRequestLine@1100528303 : Record 11126756;
      GenericWebServiceQueueNew@1100528306 : Record 11126715;
      ProcessType@1100528307 : Text;
      ConnectionObjectId@1100528304 : Text;
      ClusterId@1100528305 : Text;
      EntryNo@1100528301 : BigInteger;
    BEGIN
      CreateRequest(DSPLIPRequest);

      GenericWebServiceQueue."Related Record ID" := DSPLIPRequest.RECORDID;
      GenericWebServiceQueue.MODIFY(TRUE);

      DSPLIPRequestLine.SETRANGE("Entry No.", DSPLIPRequest."Entry No.");
      IF (DSPLIPRequestLine.FINDSET) THEN BEGIN
        ConnectionObjectId := '';
        ClusterId := '';
        REPEAT
          ProcessType := DetermineDspRequestProcessType(DSPLIPRequest, DSPLIPRequestLine);
          CASE ProcessType OF
            DSPManagement.GetTcProcessRequestServiceOrder: BEGIN
              IF (ConnectionObjectId <> DSPLIPRequestLine."Connection Object Id") OR
                (ClusterId <> DSPLIPRequest."Request Id")
              THEN BEGIN
                ConnectionObjectId := DSPLIPRequestLine."Connection Object Id";
                ClusterId :=  DSPLIPRequest."Request Id";
                EntryNo := CreateNewTask(DSPManagement.GetTcProcessRequestServiceOrder, DSPLIPRequest.RECORDID, 1, DSPLIPRequest."Company Name");
                GenericWebServiceQueueNew.GET(EntryNo);
                GenericWebServiceQueueNew.AddParameter(0, 1,
                  STRSUBSTNO('//*[local-name()="AansluitObjecten"]/*[local-name()="AansluitObject"][%1]',
                    DSPLIPRequestLine."Connection Object Seq No."), 'AansluitObject Xpath');
              END;
              CreateTaskServiceObjects(DSPLIPRequest, DSPLIPRequestLine);
            END;
            DSPManagement.GetTcProcessRequestServiceOrderObject: BEGIN
              IF (DSPManagement.ExistServiceOrder(DSPLIPRequestLine."Connection Object Id", DSPLIPRequest."Request Id")) THEN
                CreateTaskServiceObjects(DSPLIPRequest, DSPLIPRequestLine);
            END;
            ELSE
                ERROR(NotImplementedTxt, 'ProcesType', ProcessType);
          END;
        UNTIL (DSPLIPRequestLine.NEXT = 0);
      END;

      DSPLIPRequest."Processed On" := CURRENTDATETIME;
      DSPLIPRequest.MODIFY(TRUE);
    END;

    EVENT DnXmlDocument@1100528308::NodeInserting@94(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlDocument@1100528308::NodeInserted@95(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlDocument@1100528308::NodeRemoving@96(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlDocument@1100528308::NodeRemoved@97(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlDocument@1100528308::NodeChanging@98(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT DnXmlDocument@1100528308::NodeChanged@99(sender@1100528301 : Variant;e@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

