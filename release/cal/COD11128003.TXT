OBJECT Codeunit 11128003 RC Diagram Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100525000 : TextConst 'ENU=Date;NOR=Dato;SVE=Datum';
      Text002@1100525001 : TextConst 'ENU=Amount;NOR=Bel›p;SVE=Belopp';
      Text003@1100525002 : TextConst 'ENU=Amount;NOR=Bel›p;SVE=Ej f”rfallet belopp';
      Text004@1100525003 : TextConst 'ENU=Due Amount;SVE=F”rfallet belopp';
      Text005@1100525004 : TextConst 'ENU=Goal for Liquidity;SVE=Likviditetsm†l';

    LOCAL PROCEDURE "*** FUNCTIONS **"@1100525006();
    BEGIN
    END;

    PROCEDURE SalesYesterdayDiagram@1100285300(VAR BusinessChartBuffer@1100285300 : Record 485;YesterdayDate@1100525001 : Date);
    VAR
      RCDiagramBuffer@1100525007 : Record 11128003;
      GLSetup@1100525000 : Record 98;
      ChartType@1100285315 : 'Point,,Bubble,Line,,StepLine,,,,,Column,StackedColumn,StackedColumn100,Area,,StackedArea,StackedArea100,Pie,Doughnut,,,Range,,,,Radar,,,,,,,,Funnel';
      Counter@1100285311 : Integer;
      Amount@1100285307 : Decimal;
      DeptName@1100285316 : Text;
    BEGIN
      GLSetup.GET;
      UpdateDepartmentsAndFilters(YesterdayDate);
      CalculateSalesYesterday(YesterdayDate);

      WITH BusinessChartBuffer DO BEGIN
        Initialize;
        ChartType := "Chart Type" :: Column;
        SetXAxis(GLSetup."Shortcut Dimension 3 Code","Data Type" :: String);
        Counter := 0;
        AddMeasure(Text002,1 ,"Data Type" :: Integer,ChartType);

        RCDiagramBuffer.SETRANGE(IsDepartment, TRUE);
        IF RCDiagramBuffer.FINDFIRST THEN REPEAT
          Amount      := RCDiagramBuffer.Amount;
          DeptName    := RCDiagramBuffer."Department Name";
          AddColumn(DeptName);
          SetValue(Text002, Counter, Amount);
          Counter += 1;
        UNTIL RCDiagramBuffer.NEXT = 0;
      END;
    END;

    PROCEDURE SalesYesterdayDiagramDrillDown@1100285321(BusinessChartBuffer@1100285303 : Record 485);
    VAR
      TableCustLedgerEntry@1100285300 : Record 21;
      PageCustomerLedgerEntries@1100285301 : Page 25;
      RCDiagramBuffer@1100525000 : Record 11128003;
    BEGIN
      RCDiagramBuffer.SETFILTER("No.", FORMAT(BusinessChartBuffer."Drill-Down X Index" + 1));

      IF RCDiagramBuffer.FINDFIRST THEN BEGIN
        TableCustLedgerEntry.SETFILTER("Global Dimension 1 Code", RCDiagramBuffer."Department Filter");
        TableCustLedgerEntry.SETFILTER("Posting Date" ,           FORMAT(RCDiagramBuffer."Posting Date"));
        TableCustLedgerEntry.SETFILTER("Document Type", 'Invoice|Credit Memo' );
        TableCustLedgerEntry.SETFILTER(Open, 'True');

        PageCustomerLedgerEntries.SETTABLEVIEW(TableCustLedgerEntry);
        PageCustomerLedgerEntries.RUN;
      END;
    END;

    PROCEDURE AmountDueTodayDiagram@1100285302(VAR BusinessChartBuffer@1100285300 : Record 485;ActiveDate@1100525001 : Date;DimensionCodeFilter@1100525002 : Text;DepartmentName@1100525003 : Text);
    VAR
      CompanyInformation@1100525008 : Record 79;
      UserSetup@1100525000 : Record 91;
      RCDiagram@1100525004 : Query 11128003;
      ChartType@1100285313 : 'Point,,Bubble,Line,,StepLine,,,,,Column,StackedColumn,StackedColumn100,Area,,StackedArea,StackedArea100,Pie,Doughnut,,,Range,,,,Radar,,,,,,,,Funnel';
      OverDueAmount@1100285306 : Decimal;
      Amount@1100285305 : Decimal;
    BEGIN
      IF DepartmentName = '' THEN BEGIN
        CompanyInformation.GET;
        DepartmentName := CompanyInformation.Name;
      END;


      WITH BusinessChartBuffer DO BEGIN
        Initialize;
        ChartType := "Chart Type" :: Doughnut;
        SetXAxis(DepartmentName, "Data Type" :: String);

        IF DimensionCodeFilter <> '' THEN
          RCDiagram.SETFILTER(Global_Dimension_1_Code, DimensionCodeFilter);
        RCDiagram.SETFILTER(Due_Date, '..%1', CALCDATE('<-1D>', ActiveDate));

        RCDiagram.SETFILTER(Document_Type, 'Invoice|Credit Memo');
        RCDiagram.SETFILTER(IsOpen, 'True');
        RCDiagram.OPEN;
        RCDiagram.READ;
        OverDueAmount := RCDiagram.Sum_Remaining_Amount;
        RCDiagram.CLOSE;

        RCDiagram.SETFILTER(Due_Date, '%1..', ActiveDate);
        RCDiagram.OPEN;
        RCDiagram.READ;
        Amount := RCDiagram.Sum_Remaining_Amount;
        RCDiagram.CLOSE;

        AddMeasure(Text002,1 ,"Data Type" :: Integer,ChartType);
        AddColumn(Text003);
        AddColumn(Text004);
        SetValue(Text002, 0,Amount);
        SetValue(Text002, 1,OverDueAmount);
      END;
    END;

    PROCEDURE AmountDueTodayDiagramDrillDown@1100285336(BusinessChartBuffer@1100285303 : Record 485;ActiveDate@1100525002 : Date;DepartmentFilter@1100525003 : Text);
    VAR
      TableCustLedgerEntry@1100285300 : Record 21;
      PageCustomerLedgerEntries@1100285301 : Page 25;
    BEGIN
      IF BusinessChartBuffer."Drill-Down X Index" = 0 THEN
        TableCustLedgerEntry.SETFILTER("Due Date",'%1..', ActiveDate)
      ELSE IF BusinessChartBuffer."Drill-Down X Index" = 1 THEN
        TableCustLedgerEntry.SETFILTER("Due Date", '..%1', CALCDATE('<-1D>', ActiveDate));

      IF DepartmentFilter <> '' THEN
        TableCustLedgerEntry.SETFILTER("Global Dimension 1 Code", DepartmentFilter);

      TableCustLedgerEntry.SETFILTER("Document Type", 'Invoice|Credit Memo');
      TableCustLedgerEntry.SETFILTER(Open, 'True');
      PageCustomerLedgerEntries.SETTABLEVIEW(TableCustLedgerEntry);
      PageCustomerLedgerEntries.RUN;
    END;

    PROCEDURE LiquidityDiagram@1100285303(VAR BusinessChartBuffer@1100285300 : Record 485;DepartmentFilter@1100525008 : Text);
    VAR
      lvDate@1100525001 : Record 2000000007;
      GLSetup@1100525000 : Record 98;
      ChartType@1100285314 : 'Point,,Bubble,Line,,StepLine,,,,,Column,StackedColumn,StackedColumn100,Area,,StackedArea,StackedArea100,Pie,Doughnut,,,Range,,,,Radar,,,,,,,,Funnel';
      Counter@1100285310 : Integer;
      Amount@1100285306 : Decimal;
      SESetup@1100525002 : Record 11128004;
      DimensionValueCode@1100525003 : Code[10];
      DepartmentName@1100525004 : Text[100];
      LiquidityGoal@1100525005 : Integer;
      HasLiquidityGoal@1100525006 : Boolean;
      RCDiagramBuffer@1100525007 : Record 11128003;
      StartDate@1101285000 : Date;
      EndDate@1101285001 : Date;
    BEGIN
      LiquidityGoal    := 0;
      HasLiquidityGoal := FALSE;
      GLSetup.RESET;

      IF DepartmentFilter <> '' THEN
        GLSetup.SETFILTER("Global Dimension 1 Filter",  DepartmentFilter);

      RCDiagramBuffer.SETRANGE("Department Filter", DepartmentFilter);
      IF RCDiagramBuffer.FINDFIRST THEN BEGIN
        DimensionValueCode := RCDiagramBuffer."Department Code";
        DepartmentName     := RCDiagramBuffer."Department Name";
      END;

      SESetup.SETRANGE("Line type", SESetup."Line type"::Setup);
      SESetup.SETFILTER(Code, 'DIAGRAM');
      SESetup.SETFILTER("Code 2", DimensionValueCode);
      SESetup.SETFILTER("Value (txt)", DepartmentName);
      IF SESetup.FINDFIRST THEN BEGIN
        LiquidityGoal := SESetup."Value (int)";
        HasLiquidityGoal := TRUE;
      END;

      WITH BusinessChartBuffer DO BEGIN
        Initialize;
        ChartType := "Chart Type" :: Line;
        SetXAxis(Text001,"Data Type" :: String);
        AddMeasure(Text002,1 ,"Data Type" :: Integer,ChartType);
        IF HasLiquidityGoal THEN
          AddMeasure(Text005,2 ,"Data Type" :: Integer,ChartType);


        CalcPeriods(BusinessChartBuffer);
        StartDate := BusinessChartBuffer."Period Filter Start Date";
        EndDate   := BusinessChartBuffer."Period Filter End Date";

        lvDate.SETFILTER("Period Start"  ,'%1..%2', StartDate, EndDate);
        lvDate.SETRANGE("Period Type", BusinessChartBuffer."Period Length");
        Counter := 0;
        IF lvDate.FINDSET THEN REPEAT
          GLSetup.SETRANGE("Date Filter", 0D, lvDate."Period End");
          GLSetup.CALCFIELDS("Cust. Balances Due");
          GLSetup.CALCFIELDS("Vendor Balances Due");
          Amount := GLSetup."Cust. Balances Due" - GLSetup."Vendor Balances Due";
          AddColumn(FormatColumnText(lvDate));
          SetValue(Text002, Counter, Amount);
          IF HasLiquidityGoal THEN
            SetValue(Text005, Counter,  LiquidityGoal);
          Counter += 1;
        UNTIL lvDate.NEXT = 0 ;
      END;
    END;

    PROCEDURE LiquidityDiagramDrillDown@1100285334(BusinessChartBuffer@1100285303 : Record 485;DimensionValueFilter@1100525000 : Text);
    VAR
      ReceivablesPayables@1100285301 : Page 159;
      GLSetup@1100525007 : Record 98;
    BEGIN
      GLSetup.SETFILTER("Global Dimension 1 Filter", DimensionValueFilter);
      ReceivablesPayables.SETTABLEVIEW(GLSetup);
      ReceivablesPayables.RUN;
    END;

    PROCEDURE GetDept_Name_No_Filter@1100525001(VAR DimensionValueCode@1100525002 : Code[25];VAR DepartmentFilter@1100525001 : Text;VAR DepartmentName@1100525000 : Text);
    VAR
      "*** LOCALS ***"@1100525011 : Integer;
      UserSetup@1100525005 : Record 91;
      GLSetup@1100525010 : Record 98;
      RCDiagramBuffer@1100525004 : Record 11128003;
      DimensionValueChains@1100525009 : Record 11128020;
      TargetDimCode@1100525008 : Code[20];
      TargetDimValue@1100525007 : Code[20];
    BEGIN
      GLSetup.GET;
      CASE DimensionValueCode OF
        '':
          BEGIN
          IF UserSetup.GET(USERID) THEN
            DimensionValueCode := UserSetup."Department Code";
            DimensionValueChains.GetDimNextInChain(GLSetup."Global Dimension 1 Code", DimensionValueCode, TargetDimCode, TargetDimValue);
            DimensionValueChains.SETFILTER("Next Dimension Code", TargetDimCode);
            DimensionValueChains.SETFILTER("Next Dimension Value Code", TargetDimValue);
            DimensionValueCode := TargetDimValue;

            RCDiagramBuffer.SETFILTER("Department Code", DimensionValueCode);
            IF RCDiagramBuffer.FINDFIRST THEN BEGIN
              DepartmentFilter := RCDiagramBuffer."Department Filter";
              DepartmentName   := RCDiagramBuffer."Department Name";
            END;
          END;

        GLSetup."Shortcut Dimension 4 Code":
          BEGIN
          DimensionValueCode := '';
          DepartmentFilter   := '';

          END;

      ELSE BEGIN
          RCDiagramBuffer.SETFILTER("Department Code", DimensionValueCode);
          IF RCDiagramBuffer.FINDFIRST THEN BEGIN
            DepartmentFilter := RCDiagramBuffer."Department Filter";
            DepartmentName   := RCDiagramBuffer."Department Name"
          END;
        END;
      END;
    END;

    PROCEDURE OpenDepartmentPagelist@1100525011(VAR DimensionValueCode@1100525002 : Code[25];VAR DepartmentName@1100525000 : Text);
    VAR
      DimensionValue@1100525004 : Record 349;
      GLSetup@1100525003 : Record 98;
    BEGIN
      GLSetup.GET;
      DimensionValue.SETFILTER("Dimension Code",'%1|%2', GLSetup."Shortcut Dimension 3 Code", GLSetup."Shortcut Dimension 4 Code");

      IF PAGE.RUNMODAL(0, DimensionValue) = ACTION::LookupOK THEN
        DimensionValueCode := DimensionValue.Code;
        DepartmentName     := DimensionValue.Name;

      DimensionValue.RESET;
      DimensionValue.SETFILTER("Dimension Code", GLSetup."Shortcut Dimension 4 Code");
      IF DimensionValue.FINDFIRST THEN
        IF DimensionValue.Name = DepartmentName THEN
          DimensionValueCode := GLSetup."Shortcut Dimension 4 Code";
    END;

    LOCAL PROCEDURE UpdateDepartmentsAndFilters@1100525047(YesterdayDate@1100525000 : Date);
    VAR
      DimensionValue@1100525013 : Record 349;
      TempDimensionValueChains@1100525012 : TEMPORARY Record 11128020;
      CustLedgerEntry@1100525011 : Record 21;
      RCDiagramBuffer@1100525014 : Record 11128003;
      GLSetup@1100525001 : Record 98;
      DimValueFilter@1100525007 : Code[250];
      Counter@1100525006 : Integer;
      DeptName@1100525003 : Text;
      DeptCode@1100525002 : Text;
      LastEntryNo@1100525016 : Integer;
    BEGIN
      GLSetup.GET;

      RCDiagramBuffer.SETRANGE("Posting Date", YesterdayDate);
      IF RCDiagramBuffer.ISEMPTY THEN BEGIN
        CustLedgerEntry.SETRANGE("Posting Date", YesterdayDate);
        CustLedgerEntry.SETRANGE(Open, TRUE);
        IF CustLedgerEntry.FINDLAST THEN BEGIN
          LastEntryNo     := CustLedgerEntry."Entry No.";
        END;

        RCDiagramBuffer.RESET;
        RCDiagramBuffer.DELETEALL;
        DimensionValue.SETFILTER("Dimension Code", GLSetup."Shortcut Dimension 3 Code");
        IF DimensionValue.FINDSET THEN REPEAT
          Counter += 1;
          DimValueFilter  := '';
          DeptName        := DimensionValue.Name;
          DeptCode        := DimensionValue.Code;
          TempDimensionValueChains.DELETEALL;
          TempDimensionValueChains.getSourceDimensions(GLSetup."Shortcut Dimension 3 Code", DeptCode, FORMAT(GLSetup."Global Dimension 1 Code"), TempDimensionValueChains);
          DimValueFilter := GetDimValueFilter(TempDimensionValueChains);

          RCDiagramBuffer.INIT;
          RCDiagramBuffer."No."               := Counter;
          RCDiagramBuffer."Entry No."         := LastEntryNo;
          RCDiagramBuffer."Posting Date"      := YesterdayDate;
          RCDiagramBuffer."Department Code"   := DeptCode;
          RCDiagramBuffer."Department Name"   := DeptName;
          RCDiagramBuffer."Department Filter" := DimValueFilter;
          RCDiagramBuffer.IsDepartment        := TRUE;
          RCDiagramBuffer.INSERT;
        UNTIL DimensionValue.NEXT = 0 ;

        RCDiagramBuffer.RESET;
        DimensionValue.SETFILTER("Dimension Code", GLSetup."Shortcut Dimension 4 Code");
        IF DimensionValue.FINDSET THEN REPEAT
          Counter += 1;
          DimValueFilter  := '';
          DeptName        := DimensionValue.Name;
          DeptCode        := DimensionValue.Code;

          RCDiagramBuffer.INIT;
          RCDiagramBuffer."No."               := Counter;
          RCDiagramBuffer."Entry No."         := LastEntryNo;
          RCDiagramBuffer."Posting Date"      := YesterdayDate;
          RCDiagramBuffer."Department Code"   := '';
          RCDiagramBuffer."Department Name"   := DeptName;
          RCDiagramBuffer.HasAmount           := TRUE;
          RCDiagramBuffer.IsDepartment        := FALSE;
          RCDiagramBuffer.INSERT;
        UNTIL DimensionValue.NEXT = 0 ;

      END;
    END;

    LOCAL PROCEDURE CalculateSalesYesterday@1100525005(YesterdayDate@1100525000 : Date);
    VAR
      RCDiagramBuffer@1100525014 : Record 11128003;
      RCDiagram@1100525009 : Query 11128003;
    BEGIN
      RCDiagramBuffer.SETRANGE(HasAmount, FALSE);
      RCDiagramBuffer.SETRANGE(IsDepartment, TRUE);

      IF RCDiagramBuffer.FINDFIRST THEN REPEAT
        RCDiagram.SETFILTER(Global_Dimension_1_Code, RCDiagramBuffer."Department Filter");
        RCDiagram.SETFILTER(Document_Type, 'Invoice|Credit Memo');
        RCDiagram.SETFILTER(Posting_Date, FORMAT(RCDiagramBuffer."Posting Date"));
        RCDiagram.SETFILTER(IsOpen, 'True');
        RCDiagram.OPEN;
        RCDiagram.READ;

        RCDiagramBuffer.Amount := RCDiagram.Sum_Sales_LCY;
        RCDiagramBuffer.HasAmount := TRUE;
        RCDiagramBuffer.MODIFY;
        RCDiagram.CLOSE;
      UNTIL RCDiagramBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE GetDeptCodeFilter@1100525015() DeptCode : Code[20];
    VAR
      UserSetup@1100525004 : Record 91;
      GLSetup@1100525000 : Record 98;
      DimensionValueChains@1100525003 : Record 11128020;
      TargetDimCode@1100525002 : Code[20];
      TargetDimValue@1100525001 : Code[20];
      DimValueFilter@1100525006 : Code[250];
    BEGIN
      GLSetup.GET;

      IF UserSetup.GET(USERID) THEN
        DeptCode := UserSetup."Department Code";

      DimensionValueChains.GetDimNextInChain(GLSetup."Global Dimension 1 Code", DeptCode, TargetDimCode, TargetDimValue);
      DimensionValueChains.SETFILTER("Next Dimension Code", TargetDimCode);
      DimensionValueChains.SETFILTER("Next Dimension Value Code", TargetDimValue);
      DimValueFilter := GetDimValueFilter(DimensionValueChains);

      EXIT(DimValueFilter);
    END;

    LOCAL PROCEDURE GetDeptName@1100525017() DeptName : Text[250];
    VAR
      DimensionValue@1100525004 : Record 349;
      DimensionValueChains@1100525003 : Record 11128020;
      UserSetup@1100525000 : Record 91;
      GLSetup@1100525006 : Record 98;
      TargetDimCode@1100525002 : Code[20];
      TargetDimValue@1100525001 : Code[20];
      UserDeptFilter@1100525005 : Code[250];
    BEGIN
      GLSetup.GET;

      IF UserSetup.GET(USERID) THEN BEGIN
        UserDeptFilter := UserSetup."Department Code Filter";
      END;

      IF (UserDeptFilter<> '') THEN BEGIN
        DimensionValueChains.SETFILTER("Start Dimension Value Code", UserDeptFilter);
        DimensionValueChains.GetDimNextInChain(GLSetup."Global Dimension 1 Code", DimensionValueChains.GETRANGEMIN("Start Dimension Value Code"),TargetDimCode,TargetDimValue);
        IF DimensionValue.GET(TargetDimCode, TargetDimValue) THEN
          DeptName := DimensionValue.Name;
      END ELSE
        DeptName := 'Default';

      EXIT(DeptName);
    END;

    LOCAL PROCEDURE GetDimValueFilter@1100525035(VAR DimensionValueChains@1100525002 : Record 11128020) DimValueFilter : Code[250];
    VAR
      IsFirst@1100525000 : Boolean;
    BEGIN
      IsFirst := TRUE;
      IF DimensionValueChains.FINDFIRST THEN REPEAT
        IF NOT IsFirst THEN
          DimValueFilter := DimValueFilter + '|' + DimensionValueChains."Start Dimension Value Code"
        ELSE BEGIN
          DimValueFilter := DimensionValueChains."Start Dimension Value Code";
          IsFirst := FALSE;
        END;
      UNTIL DimensionValueChains.NEXT = 0;

      EXIT(DimValueFilter);
    END;

    LOCAL PROCEDURE CalcPeriods@1100525003(VAR BusinessChartBuffer@1100525001 : Record 485);
    VAR
      StartDate@1100525000 : Date;
      EndDate@1100525002 : Date;
    BEGIN
      CASE BusinessChartBuffer."Period Length"  OF
        BusinessChartBuffer."Period Length":: Day:
        BEGIN
          StartDate := WORKDATE;
          EndDate   := CALCDATE('<+1M>', StartDate);
          BusinessChartBuffer."Period Filter Start Date"  := StartDate;
          BusinessChartBuffer."Period Filter End Date"    := EndDate ;
         END;

        BusinessChartBuffer."Period Length":: Week:
        BEGIN
          StartDate := CALCDATE('<-CW>', WORKDATE);
          EndDate   := CALCDATE('<+2M>', StartDate);
          BusinessChartBuffer."Period Filter Start Date"  := StartDate;
          BusinessChartBuffer."Period Filter End Date"    := EndDate ;
        END;

        BusinessChartBuffer."Period Length":: Month:
        BEGIN
          StartDate := CALCDATE('<-CM>', WORKDATE);
          EndDate   := CALCDATE('<+6M>', WORKDATE);
          BusinessChartBuffer."Period Filter Start Date"  := StartDate;
          BusinessChartBuffer."Period Filter End Date"    := EndDate;
        END;
      END;
    END;

    LOCAL PROCEDURE FormatColumnText@1100525019(Date@1100525000 : Record 2000000007) ColumnName : Text;
    BEGIN
      CASE Date."Period Type" OF

        Date."Period Type" :: Date:
        BEGIN
          ColumnName := FORMAT(DATE2DMY(Date."Period Start",1)) + '/'+ FORMAT(DATE2DMY(Date."Period Start",2));
          EXIT(ColumnName);
        END;

        Date."Period Type" :: Week:
        BEGIN
          ColumnName := ('V.'  + Date."Period Name");
          EXIT(ColumnName);
        END;

        Date."Period Type" :: Month:
        BEGIN
          ColumnName := Date."Period Name";
          ColumnName := UPPERCASE(COPYSTR(ColumnName, 1, 1)) + LOWERCASE(COPYSTR(ColumnName,2));
          EXIT(ColumnName);
        END;
      END;
    END;

    BEGIN
    {
      170217 ITERO.FH
      171013 ITERO.FH Added Liquidity Goal to the Liquidity Diagram
    }
    END.
  }
}

