OBJECT Table 12013663 Ex Coding Rule Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF513000,4PS;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               RecRef.GETTABLE(Rec);
               WebSetting.TableChange(RecRef);
             END;

    OnModify=BEGIN
               RecRef.GETTABLE(Rec);
               WebSetting.TableChange(RecRef);
             END;

    OnDelete=VAR
               ExCodingRuleExpLine@1100285000 : Record 12057162;
             BEGIN
               RecRef.GETTABLE(Rec);
               WebSetting.TableChange(RecRef);

               //4PS20200221
               ExCodingRuleExpLine.SETRANGE("Coding Rule ID",ID);
               ExCodingRuleExpLine.SETRANGE("Coding Rule Line No.","Line No.");
               ExCodingRuleExpLine.DELETEALL();
               //4PS20200221
             END;

    CaptionML=[ENU=Coding Rule Line;
               SVE=Konteringsregelrader];
  }
  FIELDS
  {
    { 2   ;   ;ID                  ;Integer       ;CaptionML=[ENU=ID;
                                                              SVE=ID] }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              SVE=Radnr] }
    { 10  ;   ;Column Code         ;Text50        ;CaptionML=[ENU=Column Code;
                                                              SVE=Kolumnkod] }
    { 11  ;   ;Column ID           ;BigInteger    ;CaptionML=[ENU=Column ID;
                                                              SVE=Kolumn-id] }
    { 12  ;   ;All                 ;Boolean       ;OnValidate=BEGIN
                                                                UpdateExpression;
                                                              END;

                                                   CaptionML=[ENU=All;
                                                              SVE=Alla] }
    { 13  ;   ;Empty               ;Boolean       ;OnValidate=BEGIN
                                                                UpdateExpression;
                                                              END;

                                                   CaptionML=[ENU=Empty;
                                                              SVE=Tom] }
    { 15  ;   ;Text Range          ;Text250       ;OnValidate=BEGIN
                                                                IF ISTEMPORARY THEN  //1339
                                                                  EXIT;              //1339

                                                                UpdateExpression;
                                                              END;

                                                   CaptionML=[ENU=Text Range;
                                                              SVE=Filtertext] }
    { 16  ;   ;Column Source       ;Text50        ;CaptionML=[ENU=Source;
                                                              SVE=K„lla] }
  }
  KEYS
  {
    {    ;ID,Line No.                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EXF01@1100285002 : TextConst 'ENU=Expression too long in rule %1!;SVE=Formeln „r f”r l†ng i regel %1!';
      WebSetting@1100285000 : Record 12057071;
      RecRef@1100285001 : RecordRef;
      EXF02@1100285003 : TextConst 'ENU=Cannot find a EX Column record for %1 %2;SVE=Kan ej hitta n†got i EX Kolumn med %1 %2';

    PROCEDURE UpdateExpression@1100285000();
    VAR
      CodingRule@1100285000 : Record 12013660;
    BEGIN
      MODIFY;

      CodingRule.LOCKTABLE;
      CodingRule.GET(ID);
      CalculateExpression(0,CodingRule,COMPANYNAME);
      CodingRule.MODIFY(TRUE);
    END;

    PROCEDURE CalculateExpression@1100285003(AddToID@1100285007 : BigInteger;VAR CodingRule@1100285008 : Record 12013660;CompName@1100285003 : Text[30]);
    VAR
      CodingRuleLine@1100285002 : Record 12013663;
      txtExpression@1100285001 : Text[1024];
      Last@1100285000 : Integer;
    BEGIN
      CodingRule.Expression := '';
      CodingRule.Expression2 := '';
      CodingRule.Expression3 := '';
      CodingRule.Expression4 := '';

      CodingRuleLine.RESET;
      CodingRuleLine.SETRANGE(ID, ID);
      IF CompName <> COMPANYNAME THEN
        CodingRuleLine.CHANGECOMPANY(CompName);
      IF CodingRuleLine.FINDSET THEN BEGIN
        REPEAT
          IF CodingRuleLine.All OR CodingRuleLine.Empty OR (CodingRuleLine."Text Range" <> '') THEN
            BEGIN
              IF STRLEN(txtExpression) <> 0 THEN
                txtExpression := txtExpression + ';' + FORMAT(CodingRuleLine."Column ID"+AddToID) + '='
              ELSE
                txtExpression := txtExpression + FORMAT(CodingRuleLine."Column ID"+AddToID) + '=';

              IF CodingRuleLine.All THEN
                BEGIN
                  Last := STRLEN(txtExpression);
                  IF txtExpression[Last] = '=' THEN
                    txtExpression := txtExpression + '<ALL>'
                  ELSE
                    txtExpression := txtExpression + '|<ALL>';
                END;

              IF CodingRuleLine.Empty THEN
                BEGIN
                  Last := STRLEN(txtExpression);

                  IF txtExpression[Last] = '=' THEN
                    txtExpression := txtExpression + '<EMPTY>'
                  ELSE
                    txtExpression := txtExpression + '|<EMPTY>';
                END;

              IF CodingRuleLine."Text Range" <> '' THEN
                BEGIN
                  Last := STRLEN(txtExpression);

                  IF txtExpression[Last] = '=' THEN
                    txtExpression := txtExpression + CodingRuleLine."Text Range"
                  ELSE
                    txtExpression := txtExpression + '|' + CodingRuleLine."Text Range";
                END;
            END;
        UNTIL CodingRuleLine.NEXT = 0;

        IF STRLEN(txtExpression) > (MAXSTRLEN(CodingRule.Expression)+MAXSTRLEN(CodingRule.Expression2)+MAXSTRLEN(CodingRule.Expression3)+MAXSTRLEN(CodingRule.Expression4)) THEN
          ERROR(STRSUBSTNO(EXF01,CodingRule.ID));

        CodingRule.Expression := COPYSTR(txtExpression,1,MAXSTRLEN(CodingRule.Expression));
        CodingRule.Expression2 := COPYSTR(txtExpression,MAXSTRLEN(CodingRule.Expression)+1,MAXSTRLEN(CodingRule.Expression2));
        CodingRule.Expression3 := COPYSTR(txtExpression,MAXSTRLEN(CodingRule.Expression)+MAXSTRLEN(CodingRule.Expression2)+1,MAXSTRLEN(CodingRule.Expression3));
        CodingRule.Expression4 := COPYSTR(txtExpression,MAXSTRLEN(CodingRule.Expression)+MAXSTRLEN(CodingRule.Expression2)+MAXSTRLEN(CodingRule.Expression3)+1,MAXSTRLEN(CodingRule.Expression4));
      END;
    END;

    PROCEDURE LookUpCodingValues@1100285001(VAR Text@1100285000 : Text[1024]) : Boolean;
    VAR
      Account@1100285003 : Record 15;
      Item@1100285004 : Record 27;
      DimValue@1100285010 : Record 349;
      FixedAsset@1100285011 : Record 5600;
      Charge@1100285012 : Record 5800;
      Job@1100285013 : Record 11072003;
      VATProdPostGrp@1100285016 : Record 324;
      EXColumn@1100285009 : Record 12013661;
      GeneralLedgerSetup@1100285015 : Record 98;
      DimList@1100285002 : Page 560;
      AccountList@1100285001 : Page 18;
      ItemList@1100285008 : Page 31;
      FixedList@1100285007 : Page 5601;
      ChargeList@1100285006 : Page 5800;
      JobList@1100285005 : Page 11072004;
      VATProdPostGrpsList@1100285017 : Page 471;
      ExPeriodicMgt@1100285014 : Codeunit 12013599;
    BEGIN
      GeneralLedgerSetup.GET;

      // Check if Dim
      IF STRPOS("Column Source", 'DIM') <> 0 THEN BEGIN
        EXColumn.RESET;
        EXColumn.SETRANGE(Code, "Column Code");
        IF NOT EXColumn.FINDFIRST THEN
          ERROR(EXF02, FIELDCAPTION("Column Code"), "Column Code");

        CLEAR(DimList);
        DimList.LOOKUPMODE(TRUE);
        DimValue.RESET;
        DimValue.SETRANGE("Dimension Code", EXColumn."Dimension Code");
        DimList.SETTABLEVIEW(DimValue);
        IF DimList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          DimList.GETRECORD(DimValue);
          Text := Text + DimValue.Code;
          "Text Range" := "Text Range"  + DimValue.Code;
          EXIT(TRUE);
        END ELSE
          EXIT(FALSE);
      END;

      CASE "Column Source" OF
        'G_LACCOUNT' :
          BEGIN
            CLEAR(AccountList);
            AccountList.LOOKUPMODE(TRUE);
            AccountList.SETTABLEVIEW(Account);
            IF AccountList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              AccountList.GETRECORD(Account);
              Text := Text + AccountList.GetSelectionFilter;
              "Text Range" := "Text Range" + AccountList.GetSelectionFilter;
              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;

        'ITEM':
          BEGIN
            CLEAR(ItemList);
            ItemList.LOOKUPMODE(TRUE);
            Item.RESET;
            ItemList.SETTABLEVIEW(Item);
            IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              ItemList.GETRECORD(Item);
              Text := Text + Item."No.";
              "Text Range" := "Text Range"  + Item."No.";
              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;

        'FIXEDASSET':
          BEGIN
            CLEAR(FixedList);
            FixedList.LOOKUPMODE(TRUE);
            FixedAsset.RESET;
            FixedList.SETTABLEVIEW(FixedAsset);
            IF FixedList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              FixedList.GETRECORD(FixedAsset);
              Text := Text + FixedAsset."No.";
              "Text Range" := "Text Range"  + FixedAsset."No.";
              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;

        'CHARGE':
          BEGIN
            CLEAR(ChargeList);
            ChargeList.LOOKUPMODE(TRUE);
            Charge.RESET;
            ChargeList.SETTABLEVIEW(Charge);
            IF ChargeList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              ChargeList.GETRECORD(Charge);
              Text := Text + Charge."No.";
              "Text Range" := "Text Range"  + Charge."No.";
              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;

        'JOB':
          BEGIN
            CLEAR(JobList);
            JobList.LOOKUPMODE(TRUE);
            Job.RESET;
            JobList.SETTABLEVIEW(Job);
            IF JobList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              JobList.GETRECORD(Job);
              Text := Text + Job."No.";
              "Text Range" := "Text Range"  + Job."No.";
              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;

        'PERCODE' :
          BEGIN
            IF ExPeriodicMgt.PerCodeLookup(Rec,Text) THEN BEGIN
              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;

        'VATPRODPOSTGRP':
          BEGIN
            CLEAR(VATProdPostGrpsList);
            VATProdPostGrpsList.LOOKUPMODE(TRUE);
            VATProdPostGrp.RESET;
            VATProdPostGrpsList.SETTABLEVIEW(VATProdPostGrp);
            IF VATProdPostGrpsList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              VATProdPostGrpsList.GETRECORD(VATProdPostGrp);
              Text := Text + VATProdPostGrp.Code;
              "Text Range" := "Text Range" + VATProdPostGrp.Code;
              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;
      END;

      EXIT(FALSE);
    END;

    BEGIN
    {
      4PS Job Variables
      4PS20200221 SICH Delte ExoressionLines on delete
    }
    END.
  }
}

