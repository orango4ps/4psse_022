OBJECT Codeunit 6085746 Advanced Appvl. Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW17.00.00.5.00.07,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 6085744=rimd,
                TableData 6085750=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PurchHeader@1000000000 : Record 38;
      AppvlGroup@1000000002 : Record 6085743;
      Text004@161024012 : TextConst 'DEU=Es besteht kein %1, das die Kriterien erfÅllt. Bitte konfigurieren Sie %1 neu.;ENU=No %1 exists which fullfil the criterias. Please setup a new %1.;NLD=Er bestaat geen %1 welke aan de criteria voldoet. Stel alstublieft een nieuwe %1 in.';
      Text006@161024017 : TextConst 'DEU=Zeile %1 wurde nicht genehmigt. Bitte sorgen Sie dafÅr, dass einer oder mehrere Benutzer die Kombination Betrag und Dimension dieser Zeile genehmigen kînnen.;ENU=Line %1 has not been approved. Please make sure that one or more users can approve amount and dimension combination of this line.;NLD=Regel %1 is niet goedgekeurd. Zorg dat 1 of meerdere gebruikers de combinatie bedrag/dimensie van deze regel mogen goedkeuren.';
      Text007@1000000003 : TextConst 'DEU=Dimension %1 muss in allen Einkaufszeilen angegeben werden.;ENU=Dimension %1 must be specified on all purchase lines.;NLD=Dimensie %1 moet worden opgegeven in alle inkoopregels.';
      Text008@161024018 : TextConst 'DEU=%1 muss in %2: %3 angegeben werden.;ENU=%1 must be specified on %2: %3.;NLD=%1 moet worden opgegeven in %2: %3.';
      DimMgt@6085573 : Codeunit 408;
      No4EyesApproverFoundErr@6085574 : TextConst 'ENU=No qualified 4-eyes approver was found.';
      NoLineApproverFoundErr@6085576 : TextConst 'ENU=No qualified line-level approver was found.';

    PROCEDURE SubmitForApproval@161024013(PurchHeader@1002 : Record 38;WorkflowStepInstanceID@6085573 : GUID) : Boolean;
    VAR
      ApprovalEntry@1003 : Record 454;
      DtldAppvlEntry@161024021 : Record 6085744;
      UserSetup@161024013 : Record 91;
      RecRef@1001 : RecordRef;
      ApprovalsBridge@1000 : Codeunit 6085790;
      DCApprovalsMgmt@1004 : Codeunit 6085722;
      ActionToPerform@161024017 : 'ApproveLines,FindNextApprover';
      NextApproverID@161024016 : Code[50];
      ApprovalAmount@161024015 : Decimal;
      ApprovalAmountLCY@161024014 : Decimal;
    BEGIN
      SetPurchHeader(PurchHeader);

      DeleteDtldAppvlEntries(DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.");
      DeleteDtldAppvlEntries(DATABASE::"Purchase Line",PurchHeader."Document Type",PurchHeader."No.");

      FindAndSetAppvlGroup;
      SyncDtldAppvlEntries;

      IF AppvlGroup."First Entry Created by" = AppvlGroup."First Entry Created by"::"Approver ID" THEN
        UpdateDtldAppvlEntries(ActionToPerform::FindNextApprover,NextApproverID)
      ELSE BEGIN
        PurchHeader.TESTFIELD("Purchaser Code");
        UserSetup.SETRANGE("Salespers./Purch. Code",PurchHeader."Purchaser Code");
        UserSetup.FINDFIRST;
        NextApproverID := UserSetup."User ID";
      END;

      IF NextApproverID <> '' THEN BEGIN
        UserSetup.GET(NextApproverID);
        RecRef.GETTABLE(PurchHeader);
        ApprovalsBridge.InitializeApprovalEntry(RecRef,ApprovalEntry,WorkflowStepInstanceID);
        DCApprovalsMgmt.MakeApprovalEntry(ApprovalEntry,0,NextApproverID);
      END ELSE
        ERROR(NoLineApproverFoundErr);

      EXIT(TRUE);
    END;

    PROCEDURE ApproveApprovalRequest@161024012(ApprovalEntry@1003 : Record 454;CurrentUser@1000 : Code[50]);
    VAR
      ApprovalEntry2@161024014 : Record 454;
      UserSetup@161024019 : Record 91;
      ApprovalSharing@161024023 : Record 6085749;
      DCApprovalMgmt@1006 : Codeunit 6085722;
      ApprovalsBridge@161024022 : Codeunit 6085790;
      WebSearchMgnt@161024021 : Codeunit 6085748;
      PurchRecRef@1005 : RecordRef;
      NextApproverID@1000000000 : Code[50];
      ActionToPerform@161024013 : 'Approve,FindNextApprover';
      ApprovalAmount@161024017 : Decimal;
      ApprovalAmountLCY@161024016 : Decimal;
      ApprovalGroupUserID@6085573 : Code[50];
      NextApproverCreated@6085574 : Boolean;
    BEGIN
      // *********************************************************************************************************************************
      // This function is called when an approver approves an approval request
      // *********************************************************************************************************************************
      PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.");
      SetPurchHeader(PurchHeader);

      FindAndSetAppvlGroup;
      SyncDtldAppvlEntries;

      IF CurrentUser = '' THEN
        CurrentUser := DCApprovalMgmt.GetCurrUserID;
      ApprovalGroupUserID := CurrentUser;

      // Approval Sharing
      // When approving using Approval Sharing the Approval Entry is changed. Approved ID is moved to Original Approver ID and user
      // approving is overwriting (original user) Approver ID.
      IF (ApprovalEntry."Original Approver ID" <> CurrentUser) AND (ApprovalEntry."Approver ID" = CurrentUser) THEN BEGIN
        DCApprovalMgmt.FilterApprovalSharingToUser(ApprovalSharing,CurrentUser);
        ApprovalSharing.SETRANGE("Owner User ID",ApprovalEntry."Original Approver ID");
        ApprovalSharing.SETRANGE("Use Owners Limts & Permissions",TRUE);
        IF NOT ApprovalSharing.ISEMPTY THEN
          ApprovalGroupUserID := ApprovalEntry."Original Approver ID";
      END;

      UpdateDtldAppvlEntries(ActionToPerform::Approve,ApprovalGroupUserID);

      // If the next approver have already been created in the Approval Entry table, then keep this person as the next approver
      // (happens when using "Forward and send back to me" and "Approve and Forward")
      ApprovalEntry2.SETRANGE("Table ID",ApprovalEntry."Table ID");
      ApprovalEntry2.SETRANGE("Document Type",ApprovalEntry."Document Type");
      ApprovalEntry2.SETRANGE("Document No.",ApprovalEntry."Document No.");
      ApprovalEntry2.SETRANGE(Status,ApprovalEntry2.Status::Created,ApprovalEntry2.Status::Open);
      IF NOT ApprovalEntry2.ISEMPTY THEN
        NextApproverCreated := TRUE;

      UpdateDtldAppvlEntries(ActionToPerform::FindNextApprover,NextApproverID);

      IF NextApproverID <> '' THEN BEGIN
        UserSetup.GET(NextApproverID);

        IF NOT NextApproverCreated THEN BEGIN
          PurchRecRef.GETTABLE(PurchHeader);
          ApprovalsBridge.InitializeApprovalEntry(PurchRecRef,ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
          DCApprovalMgmt.MakeApprovalEntry(ApprovalEntry,0,NextApproverID);
        END;

        IF AppvlGroup."Four Eyes Approval" = AppvlGroup."Four Eyes Approval"::Invoice THEN
          Update4EyesDtldAppvlEntries(ActionToPerform::Approve,CurrentUser);

        WebSearchMgnt.UpdateWebSearchFromPurchHeader(PurchHeader,FALSE);
      END ELSE BEGIN
        // We are only checking mandatory dimensions when all lines have been approved, as users can add and update lines
        // as they go.
        CheckMandatoryDim;

        // All lines have been approved. Now the whole document must be approved.
        Update4EyesDtldAppvlEntries(ActionToPerform::Approve,CurrentUser);

        IF NOT Update4EyesDtldAppvlEntries(ActionToPerform::FindNextApprover,NextApproverID) THEN
          IF NextApproverID = '' THEN
            ERROR(No4EyesApproverFoundErr);

        IF NOT NextApproverCreated THEN
          IF NextApproverID <> '' THEN BEGIN
            UserSetup.GET(NextApproverID);
            PurchRecRef.GETTABLE(PurchHeader);
            ApprovalsBridge.InitializeApprovalEntry(PurchRecRef,ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
            DCApprovalMgmt.MakeApprovalEntry(ApprovalEntry,0,NextApproverID);
          END;
      END;

      ApprovalsBridge.OnAfterApproveAdvancedApproval(ApprovalEntry);
    END;

    PROCEDURE DelegateApprovalRequest@161024016(ApprovalEntry@161024012 : Record 454;DelegateToUserID@161024013 : Code[50]);
    VAR
      ActionToPerform@6085573 : 'Approve,FindNextApprover';
    BEGIN
      PurchHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.");
      SetPurchHeader(PurchHeader);

      FindAndSetAppvlGroup;
      SyncDtldAppvlEntries;

      // UpdateDtldAppvlEntries called with DelegateToUserID. This will ensure we find the entries the "Delegated to User" can approve and
      // that we don't set another approver on the detailed approval entries
      UpdateDtldAppvlEntries(ActionToPerform::FindNextApprover,DelegateToUserID);
    END;

    LOCAL PROCEDURE SyncDtldAppvlEntries@1000000000();
    VAR
      PurchLine@1000000000 : Record 39;
      DtldAppvlEntry@1000000001 : Record 6085744;
      UpdateDocumentApproval@6085573 : Boolean;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETFILTER(Quantity,'<>%1',0);
      IF NOT PurchLine.FINDSET THEN BEGIN
        // When no purchase lines exist, delete all detailed approval entries
        DeleteDtldAppvlEntries(DATABASE::"Purchase Line",PurchHeader."Document Type",PurchHeader."No.");
        UpdateDocumentApproval := TRUE;
      END ELSE BEGIN
        REPEAT
          IF NOT DtldAppvlEntry.GET(DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",
            PurchLine."Line No.")
          THEN BEGIN
            CreateDtldAppvlEntry(PurchLine);
            UpdateDocumentApproval := TRUE;
          END ELSE BEGIN
            // This function check to see if information that controls who needs to approve the line on the Purchase Line has changed.
            // If so, we will recreate the line which needs to be reapproved.
            IF HasPurchLineChanged(PurchLine,DtldAppvlEntry) THEN BEGIN
              DtldAppvlEntry.DELETE(TRUE);
              CreateDtldAppvlEntry(PurchLine);
              UpdateDocumentApproval := TRUE;
            END;
          END;
        UNTIL PurchLine.NEXT = 0;

        // When purchase lines exist, delete detailed approval entries which dosent have an corresponding purchase line
        DtldAppvlEntry.SETRANGE("Table ID",DATABASE::"Purchase Line");
        DtldAppvlEntry.SETRANGE("Document Type",PurchHeader."Document Type");
        DtldAppvlEntry.SETRANGE("Document No.",PurchHeader."No.");
        IF DtldAppvlEntry.FINDSET(TRUE,FALSE) THEN
          REPEAT
            IF NOT PurchLine.GET(DtldAppvlEntry."Document Type",DtldAppvlEntry."Document No.",DtldAppvlEntry."Line No.") THEN BEGIN
              DtldAppvlEntry.DELETE(TRUE);
              UpdateDocumentApproval := TRUE;
            END;
          UNTIL DtldAppvlEntry.NEXT = 0;
      END;

      IF UpdateDocumentApproval THEN
        Recreate4EyesApproval;
    END;

    LOCAL PROCEDURE UpdateDtldAppvlEntries@1000000004(ActionToPerform@161024018 : 'Approve,FindNextApprover';VAR ApprovalGroupUserID@161024013 : Code[50]);
    VAR
      AppvlUser@1000000003 : Record 6085746;
      AppvlUserDim@1000000005 : Record 6085748;
      DtldAppvlEntry@161024015 : Record 6085744;
      TempSumDtldAppvlEntry@1000000001 : TEMPORARY Record 6085744;
      TempSumDtldAppvlEntryDim@1000000000 : TEMPORARY Record 6085750;
      EntryRelationship@161024014 : TEMPORARY Record 6085747;
      PurchaseHeader@1000 : Record 38;
      Approved@1001 : Boolean;
      CompleteDimMatch@161024012 : Boolean;
    BEGIN
      // This will sum all the approval lines based on the the information that controls who needs to approve the line
      SumApprovalLines(TempSumDtldAppvlEntry,TempSumDtldAppvlEntryDim,EntryRelationship);

      DtldAppvlEntry.SETRANGE("Table ID",DATABASE::"Purchase Line");
      DtldAppvlEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      DtldAppvlEntry.SETRANGE("Document No.",PurchHeader."No.");
      DtldAppvlEntry.SETRANGE("Approval Group Code",AppvlGroup.Code);
      DtldAppvlEntry.SETRANGE(Approved,FALSE);
      DtldAppvlEntry.MODIFYALL("User ID",'');
      DtldAppvlEntry.SETRANGE(Approved);

      // Loop through each of the sum lines
      IF TempSumDtldAppvlEntry.FINDSET THEN
        REPEAT
          // Filter the Approval User to find all user records (of the current user) that has the right limit
          AppvlUser.SETRANGE("Approval Group Code",AppvlGroup.Code);

          IF ApprovalGroupUserID <> '' THEN BEGIN
            AppvlUser.SETCURRENTKEY("Approval Group Code","User ID","Approval Amount Limit");
            AppvlUser.SETRANGE("User ID",ApprovalGroupUserID);
          END ELSE
            AppvlUser.SETCURRENTKEY("Approval Group Code","Approval Amount Limit");

          AppvlUser.SETFILTER("Approval Amount Limit",'>=%1',TempSumDtldAppvlEntry."Amount (LCY)");
          IF AppvlUser.FINDSET THEN
            REPEAT
              CompleteDimMatch := TRUE;

              // The user may be able to approve different dimension combination and we check that the users limit is higher for all
              // the lines (dimension combinations).
              DtldAppvlEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Approval Group Code","User ID");
              DtldAppvlEntry.SETRANGE("User ID",AppvlUser."User ID");
              DtldAppvlEntry.CALCSUMS("Amount (LCY)");

              // TempSumDtldAppvlEntry."Amount (LCY)" : Amount to be approved
              // DtldAppvlEntry."Amount (LCY)"        : Amount already assigned to user (some could be approved)
              IF TempSumDtldAppvlEntry."Amount (LCY)" + DtldAppvlEntry."Amount (LCY)" > AppvlUser."Approval Amount Limit" THEN
                CompleteDimMatch := FALSE;

              IF CompleteDimMatch THEN BEGIN
                // Filter the dimensions associated to the current sum line. Then make sure that the current Approval User
                // record has the same dimensions.
                TempSumDtldAppvlEntryDim.SETRANGE("Table ID",TempSumDtldAppvlEntry."Table ID");
                IF TempSumDtldAppvlEntryDim.FINDSET THEN BEGIN
                  REPEAT
                    IF NOT AppvlUserDim.GET(AppvlUser."Approval Group Code",AppvlUser."User ID",AppvlUser."Entry No.",
                      TempSumDtldAppvlEntryDim."Dimension Code",TempSumDtldAppvlEntryDim."Dimension Value Code")
                    THEN
                      CompleteDimMatch := FALSE;
                  UNTIL (TempSumDtldAppvlEntryDim.NEXT = 0) OR (NOT CompleteDimMatch);
                END;

                // CompleteDimMatch is TRUE if the current Approval User record have all the dimensions used on the sum line
                IF CompleteDimMatch THEN BEGIN
                  ApprovalGroupUserID := AppvlUser."User ID";

                  // The EntryRelationship variable holds the relationship between the sum line and the Detailed Approval Entries
                  // So now we need to flag the Detailed Approval Entries that are associated to this sum line.
                  EntryRelationship.SETRANGE("Sum Line Id",TempSumDtldAppvlEntry."Table ID");     // Table ID used a ID / Line No.
                  IF EntryRelationship.FINDSET THEN
                    REPEAT
                      DtldAppvlEntry.GET(DATABASE::"Purchase Line",PurchHeader."Document Type",PurchHeader."No.",
                        EntryRelationship."Approval Entry Line No.");

                      // We are only including non-approved lines in TempSumDtldAppvlEntry so the DtldAppvlEntry
                      // should never be Approved
                      DtldAppvlEntry.TESTFIELD(Approved,FALSE);

                      IF ActionToPerform = ActionToPerform::Approve THEN BEGIN
                        IF NOT DtldAppvlEntry.Approved THEN BEGIN
                          DtldAppvlEntry."User ID" := ApprovalGroupUserID;
                          DtldAppvlEntry.Approved := TRUE;
                          DtldAppvlEntry.MODIFY;
                          Approved := TRUE;
                        END;
                      END ELSE BEGIN
                        DtldAppvlEntry."User ID" := ApprovalGroupUserID;
                        DtldAppvlEntry.MODIFY;
                      END;
                    UNTIL EntryRelationship.NEXT = 0;
                END;
              END;
            UNTIL (AppvlUser.NEXT = 0) OR CompleteDimMatch;
        UNTIL TempSumDtldAppvlEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SumApprovalLines@1000000007(VAR TempSumDtldAppvlEntry@1000000000 : TEMPORARY Record 6085744;VAR TempSumDtldAppvlEntryDim@1000000002 : TEMPORARY Record 6085750;VAR EntryRelationship@161024013 : TEMPORARY Record 6085747);
    VAR
      DtldAppvlEntry@1000000004 : Record 6085744;
      DtldAppvlEntryDim@1000000003 : Record 6085750;
      AppvlGroupDim@161024014 : Record 6085751;
      CompleteDimMatch@1000000005 : Boolean;
      BreakLoop@1160040000 : Boolean;
      NextLineNo@6085574 : Integer;
    BEGIN
      // *********************************************************************************************************************************
      // This function will sum all the approval lines based on the the information that controls who needs to approve the line
      // *********************************************************************************************************************************

      DtldAppvlEntry.SETRANGE("Table ID",DATABASE::"Purchase Line");
      DtldAppvlEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      DtldAppvlEntry.SETRANGE("Document No.",PurchHeader."No.");
      DtldAppvlEntry.SETRANGE(Approved,FALSE);
      IF DtldAppvlEntry.FINDSET THEN
        REPEAT
          // Loop through all the summed Detailed Approval Entry and try to find a line which have the same dimensions as the current
          // Detailed Approval Entry line. If a sum line already exists then we will update this line with the amount. Otherwise we will
          // create a new sum line.
          BreakLoop := FALSE;
          IF TempSumDtldAppvlEntry.FINDSET THEN
            REPEAT
              CompleteDimMatch := TRUE;

              TempSumDtldAppvlEntryDim.SETRANGE("Table ID",TempSumDtldAppvlEntry."Table ID");
              IF TempSumDtldAppvlEntryDim.FINDSET THEN
                REPEAT
                  IF NOT DtldAppvlEntryDim.GET(DtldAppvlEntry."Table ID",DtldAppvlEntry."Document Type",
                    DtldAppvlEntry."Document No.",DtldAppvlEntry."Line No.",TempSumDtldAppvlEntryDim."Dimension Code")
                  THEN
                    CompleteDimMatch := FALSE;

                  IF TempSumDtldAppvlEntryDim."Dimension Value Code" <> DtldAppvlEntryDim."Dimension Value Code" THEN
                    CompleteDimMatch := FALSE;
                UNTIL (TempSumDtldAppvlEntryDim.NEXT = 0) OR (NOT CompleteDimMatch);

              // If all the dimensions that are on the sum line also are on the current Detailed Approval Entry line, then check
              // that there are not any dimensions on the current Detailed Approval Entry line which are not on the sum line.
              IF CompleteDimMatch THEN BEGIN
                DtldAppvlEntryDim.SETRANGE("Table ID",DtldAppvlEntry."Table ID");
                DtldAppvlEntryDim.SETRANGE("Document Type",DtldAppvlEntry."Document Type");
                DtldAppvlEntryDim.SETRANGE("Document No.",DtldAppvlEntry."Document No.");
                DtldAppvlEntryDim.SETRANGE("Document Line No.",DtldAppvlEntry."Line No.");
                IF DtldAppvlEntryDim.FINDSET THEN
                  REPEAT
                    IF NOT TempSumDtldAppvlEntryDim.GET(TempSumDtldAppvlEntry."Table ID",0,'',0,DtldAppvlEntryDim."Dimension Code") THEN
                      CompleteDimMatch := FALSE;

                    IF TempSumDtldAppvlEntryDim."Dimension Value Code" <> DtldAppvlEntryDim."Dimension Value Code" THEN
                      CompleteDimMatch := FALSE;
                  UNTIL (DtldAppvlEntryDim.NEXT = 0) OR (NOT CompleteDimMatch);
              END;
              BreakLoop := CompleteDimMatch;
              IF NOT BreakLoop THEN
                BreakLoop := TempSumDtldAppvlEntry.NEXT = 0;
            UNTIL BreakLoop;

          IF CompleteDimMatch THEN BEGIN
            // A sum line with the correct active dimensions were found so we will update the amount on that line
            TempSumDtldAppvlEntry."Amount (LCY)" := TempSumDtldAppvlEntry."Amount (LCY)" + DtldAppvlEntry."Amount (LCY)";
            TempSumDtldAppvlEntry.MODIFY;

            EntryRelationship."Sum Line Id" := TempSumDtldAppvlEntry."Table ID";
            EntryRelationship."Approval Entry Line No." := DtldAppvlEntry."Line No.";
            EntryRelationship.INSERT;
          END ELSE BEGIN
            // No sum line with the correct active dimensions were found we need to create it.
            NextLineNo := NextLineNo + 1;

            TempSumDtldAppvlEntry.INIT;
            TempSumDtldAppvlEntry."Table ID" := NextLineNo;    // Table ID used a ID / Line No.
            TempSumDtldAppvlEntry."Amount (LCY)" := DtldAppvlEntry."Amount (LCY)";
            TempSumDtldAppvlEntry.INSERT;

            AppvlGroupDim.SETRANGE("Approval Group Code",AppvlGroup.Code);
            IF AppvlGroupDim.FINDSET THEN
              REPEAT
                // If the dimension use on the purchase line isn't active, then do not include it in TempSumDtldAppvlEntryDim
                // (as dimensions stored in TempSumDtldAppvlEntryDim is used to check if a user can approve the invoice)
                IF DtldAppvlEntryDim.GET(DtldAppvlEntry."Table ID", DtldAppvlEntry."Document Type",
                  DtldAppvlEntry."Document No.", DtldAppvlEntry."Line No.",AppvlGroupDim."Dimension Code")
                THEN BEGIN
                  TempSumDtldAppvlEntryDim."Table ID" := TempSumDtldAppvlEntry."Table ID";
                  TempSumDtldAppvlEntryDim."Dimension Code" := AppvlGroupDim."Dimension Code";
                  TempSumDtldAppvlEntryDim."Dimension Value Code" := DtldAppvlEntryDim."Dimension Value Code";
                  TempSumDtldAppvlEntryDim.INSERT;
                END;
              UNTIL AppvlGroupDim.NEXT = 0;

            EntryRelationship."Sum Line Id" := TempSumDtldAppvlEntry."Table ID";
            EntryRelationship."Approval Entry Line No." := DtldAppvlEntry."Line No.";
            EntryRelationship.INSERT;
          END;
        UNTIL DtldAppvlEntry.NEXT = 0;

      IF TempSumDtldAppvlEntry.FINDSET THEN
        REPEAT
          TempSumDtldAppvlEntry."Amount (LCY)" := ABS(TempSumDtldAppvlEntry."Amount (LCY)");
          TempSumDtldAppvlEntry.MODIFY;
        UNTIL TempSumDtldAppvlEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateDtldAppvlEntry@1000000002(PurchLine@1000000000 : Record 39);
    VAR
      NewDtldAppvlEntry@1000000001 : Record 6085744;
      NewDtldAppvlEntryDim@1000000002 : Record 6085750;
      CurrExchRate@161024012 : Record 330;
      DimSetEntry@6085573 : TEMPORARY Record 480;
    BEGIN
      // *********************************************************************************************************************************
      // This function will create a new Detailed Approval Entry based on the Purchase Line
      // *********************************************************************************************************************************

      WITH NewDtldAppvlEntry DO BEGIN
        INIT;
        "Table ID" := DATABASE::"Purchase Line";
        "Document Type" := PurchLine."Document Type";
        "Document No." := PurchLine."Document No.";
        "Line No." := PurchLine."Line No.";
        Amount := GetAmountExclVAT(PurchLine);
        //**4PS.so
        //"Amount (LCY)" := CurrExchRate.ExchangeAmtFCYToLCY(PurchHeader."Posting Date",PurchHeader."Currency Code",
        //  Amount,PurchHeader."Currency Factor");
        //**4PS.eo
        //**4PS.sn
        "Amount (LCY)" := CurrExchRate.ExchangeAmtFCYToLCY(1,PurchHeader."Job No.",PurchHeader."Posting Date",
          PurchHeader."Currency Code",
          Amount,PurchHeader."Currency Factor",FALSE);
        //**4PS.en
        "Approval Group Code" := AppvlGroup.Code;
        INSERT;

        // Create the Detailed Approval Entry Dimensions
        DimMgt.GetDimensionSet(DimSetEntry,PurchLine."Dimension Set ID");
        IF DimSetEntry.FINDSET THEN
          REPEAT
            IF IsActiveDimension(DimSetEntry."Dimension Code") THEN BEGIN
              NewDtldAppvlEntryDim."Table ID" := "Table ID";
              NewDtldAppvlEntryDim."Document Type" := "Document Type";
              NewDtldAppvlEntryDim."Document No." := "Document No.";
              NewDtldAppvlEntryDim."Document Line No." := "Line No.";
              NewDtldAppvlEntryDim."Dimension Code" := DimSetEntry."Dimension Code";
              NewDtldAppvlEntryDim."Dimension Value Code" := DimSetEntry."Dimension Value Code";
              NewDtldAppvlEntryDim.INSERT;
            END;
          UNTIL DimSetEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE HasPurchLineChanged@1000000001(PurchLine@1000000000 : Record 39;DtldAppvlEntry@1000000001 : Record 6085744) : Boolean;
    VAR
      DimSetEntry@1000000002 : TEMPORARY Record 480;
      DtldAppvlEntryDim@1000000003 : Record 6085750;
    BEGIN
      // *********************************************************************************************************************************
      // This function check to see if information that controls who needs to approve the line on the Purchase Line has changed.
      // If so, it will return TRUE.
      // *********************************************************************************************************************************

      // We check to see if the amount has changed. We do not consider the LCY value as a small currency variance should not result
      // in a new approval. The original LCY amount remains on the Detailed Approval Entry
      IF GetAmountExclVAT(PurchLine) <> DtldAppvlEntry.Amount THEN
        EXIT(TRUE);

      // This function will check if any dimensions have been changed on the Purchase Line compared to the
      // Dtld. Approval Entry Dimension
      DimMgt.GetDimensionSet(DimSetEntry,PurchLine."Dimension Set ID");

      DtldAppvlEntryDim.SETRANGE("Table ID",DtldAppvlEntry."Table ID");
      DtldAppvlEntryDim.SETRANGE("Document Type",DtldAppvlEntry."Document Type");
      DtldAppvlEntryDim.SETRANGE("Document No.",DtldAppvlEntry."Document No.");
      DtldAppvlEntryDim.SETRANGE("Document Line No.",DtldAppvlEntry."Line No.");

      IF DimSetEntry.FINDSET THEN
        REPEAT
          IF IsActiveDimension(DimSetEntry."Dimension Code") THEN BEGIN
            IF NOT DtldAppvlEntryDim.GET(DtldAppvlEntry."Table ID",DtldAppvlEntry."Document Type",DtldAppvlEntry."Document No.",
              DtldAppvlEntry."Line No.",DimSetEntry."Dimension Code")
            THEN
              EXIT(TRUE);

            IF DtldAppvlEntryDim."Dimension Value Code" <> DimSetEntry."Dimension Value Code" THEN
              EXIT(TRUE);
          END;
        UNTIL DimSetEntry.NEXT = 0;

      IF DtldAppvlEntryDim.FINDSET THEN
        REPEAT
          IF IsActiveDimension(DtldAppvlEntryDim."Dimension Code") THEN BEGIN
            IF NOT DimSetEntry.GET(PurchLine."Dimension Set ID",DtldAppvlEntryDim."Dimension Code") THEN
              EXIT(TRUE);

            IF DtldAppvlEntryDim."Dimension Value Code" <> DimSetEntry."Dimension Value Code" THEN
              EXIT(TRUE);
          END;
        UNTIL DtldAppvlEntryDim.NEXT = 0;
    END;

    LOCAL PROCEDURE Update4EyesDtldAppvlEntries@161024021(ActionToPerform@161024018 : 'Approve,FindNextApprover';VAR ApprovalGroupUserID@161024013 : Code[50]) : Boolean;
    VAR
      AppvlUser@1000000003 : Record 6085746;
      AppvlUserDim@1000000005 : Record 6085748;
      DtldAppvlEntry@161024015 : Record 6085744;
      DtldAppvlEntryDim@1000000000 : Record 6085750;
      ExcludeApprovalGroupUserID@161024014 : Code[50];
      AmountLCY@161024016 : Decimal;
      CompleteDimMatch@161024012 : Boolean;
    BEGIN
      // *********************************************************************************************************************************
      // This function are used in two ways:
      // 1) Called with ActionToPerform = Approve:
      //    The function will sum/group the 'Line Amount (LCY)' of all unapproved Detailed Approval Entries with the same dimensions and
      //    see if the CurrApproverId has the nesseary Approval Limit. If so, it will approve these Detailed Approval Entries.
      // 2) Called with ActionToPerform = FindNextApprover and CurrApproverId = '':
      //    The function will sum/group the 'Line Amount (LCY)' of all unapproved Detailed Approval Entries with the same dimensions.
      //    Next, it will find the first approver who can approve the sum/group of the first uapproved dimension combination.
      //    The User Id of this approver is updated on the Detailed Approval Entries for this dimension combination.
      //    Next, it will see if it can find other sum/groups that this user can approve, and if so, it will update the user id on these
      //    entries as well.
      // *********************************************************************************************************************************

      // See if this document have already been approved on a total level. This can be the cause if two persons needs
      // to approve the full amount. If so, find the first approver and save it in a variable to check when we find the
      // next approver (which must be different than the first).
      DtldAppvlEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      DtldAppvlEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      DtldAppvlEntry.SETRANGE("Document No.",PurchHeader."No.");
      DtldAppvlEntry.SETRANGE(Approved,TRUE);
      IF DtldAppvlEntry.FINDFIRST THEN
        ExcludeApprovalGroupUserID := DtldAppvlEntry."User ID";

      DtldAppvlEntry.SETRANGE(Approved,FALSE);
      IF NOT DtldAppvlEntry.FINDFIRST THEN BEGIN
        DtldAppvlEntry.SETRANGE("Table ID",DATABASE::"Purchase Line");
        DtldAppvlEntry.SETRANGE("Document Type",PurchHeader."Document Type");
        DtldAppvlEntry.SETRANGE("Document No.",PurchHeader."No.");
        DtldAppvlEntry.SETRANGE(Approved,FALSE);
        // All lines approved and no unapproved header (4-eyes) entries (all 4-eyes entries approved no header entries exists)
        // so the document is fully approved and therefore exit true
        IF NOT DtldAppvlEntry.FINDFIRST THEN
          EXIT(TRUE);
      END;

      // When using "Four Eyes Approval" = Invoice, we do not check dimensions
      IF (ActionToPerform = ActionToPerform::Approve) AND
        (AppvlGroup."Four Eyes Approval" = AppvlGroup."Four Eyes Approval"::Invoice) AND
        (ExcludeApprovalGroupUserID <> ApprovalGroupUserID)
      THEN BEGIN
        DtldAppvlEntry."User ID" := ApprovalGroupUserID;
        DtldAppvlEntry.Approved := TRUE;
        DtldAppvlEntry.MODIFY;
        EXIT(TRUE);
      END;

      DtldAppvlEntry.SETRANGE("Table ID",DATABASE::"Purchase Line");

      // No Approver ID have been excluded so far. If it is the same approver on all lines, then this user can not approve the
      // full amount and therefore we need to exclude this user.
      IF AppvlGroup."Four Eyes Approval" = AppvlGroup."Four Eyes Approval"::Invoice THEN
        IF ExcludeApprovalGroupUserID = '' THEN BEGIN
          DtldAppvlEntry.FINDFIRST;
          DtldAppvlEntry.SETFILTER("User ID",'<>%1',DtldAppvlEntry."User ID");
          IF DtldAppvlEntry.ISEMPTY THEN
            ExcludeApprovalGroupUserID := DtldAppvlEntry."User ID";

          DtldAppvlEntry.SETRANGE("User ID");
        END;

      AppvlUser.SETRANGE("Approval Group Code",AppvlGroup.Code);

      IF AppvlGroup."Four Eyes Approval" = AppvlGroup."Four Eyes Approval"::"Invoice Full Amount" THEN BEGIN
        DtldAppvlEntry.GET(DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.",0);
        AmountLCY := DtldAppvlEntry."Amount (LCY)";
      END;

      IF ApprovalGroupUserID <> '' THEN BEGIN
        AppvlUser.SETCURRENTKEY("Approval Group Code","User ID","Approval Amount Limit");
        AppvlUser.SETRANGE("User ID",ApprovalGroupUserID);
      END ELSE
        AppvlUser.SETCURRENTKEY("Approval Group Code","Approval Amount Limit");

      AppvlUser.SETFILTER("Approval Amount Limit",'>=%1',AmountLCY);
      IF AppvlUser.FINDSET THEN
        REPEAT
          IF ExcludeApprovalGroupUserID <> AppvlUser."User ID" THEN BEGIN
            CompleteDimMatch := TRUE;
            // When using "Four Eyes Approval" = Invoice Full Amount, we do check dimensions
            IF AppvlGroup."Four Eyes Approval" = AppvlGroup."Four Eyes Approval"::"Invoice Full Amount" THEN BEGIN
              DtldAppvlEntryDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
              DtldAppvlEntryDim.SETRANGE("Document Type",PurchHeader."Document Type");
              DtldAppvlEntryDim.SETRANGE("Document No.",PurchHeader."No.");
              IF DtldAppvlEntryDim.FINDSET THEN
                REPEAT
                  IF NOT AppvlUserDim.GET(AppvlUser."Approval Group Code",AppvlUser."User ID",AppvlUser."Entry No.",
                    DtldAppvlEntryDim."Dimension Code",DtldAppvlEntryDim."Dimension Value Code")
                  THEN
                    CompleteDimMatch := FALSE;
                UNTIL (DtldAppvlEntryDim.NEXT = 0) OR (NOT CompleteDimMatch);
            END;

            IF CompleteDimMatch THEN
              ApprovalGroupUserID := AppvlUser."User ID";
          END;
        UNTIL (AppvlUser.NEXT = 0) OR CompleteDimMatch;

      IF CompleteDimMatch THEN BEGIN
        DtldAppvlEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
        DtldAppvlEntry.SETRANGE("Document Type",PurchHeader."Document Type");
        DtldAppvlEntry.SETRANGE("Document No.",PurchHeader."No.");
        DtldAppvlEntry.SETRANGE(Approved,FALSE);
        DtldAppvlEntry.FINDFIRST;

        IF (ExcludeApprovalGroupUserID <> ApprovalGroupUserID) THEN BEGIN
          IF ActionToPerform = ActionToPerform::Approve THEN BEGIN
            DtldAppvlEntry."User ID" := ApprovalGroupUserID;
            DtldAppvlEntry.Approved := TRUE;
            DtldAppvlEntry.MODIFY;
            EXIT(TRUE);
          END ELSE BEGIN
            DtldAppvlEntry."User ID" := ApprovalGroupUserID;
            DtldAppvlEntry.MODIFY;
            EXIT(TRUE);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE Recreate4EyesApproval@161024015();
    VAR
      DtldAppvlEntry@161024012 : Record 6085744;
      Amount@161024013 : Decimal;
      AmountLCY@161024014 : Decimal;
    BEGIN
      IF AppvlGroup."Four Eyes Approval" = AppvlGroup."Four Eyes Approval"::" " THEN
        EXIT;

      DtldAppvlEntry.SETRANGE("Table ID",DATABASE::"Purchase Line");
      DtldAppvlEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      DtldAppvlEntry.SETRANGE("Document No.",PurchHeader."No.");
      IF DtldAppvlEntry.FINDSET THEN
        REPEAT
          Amount := Amount + DtldAppvlEntry.Amount;
          AmountLCY := AmountLCY + DtldAppvlEntry."Amount (LCY)";
        UNTIL DtldAppvlEntry.NEXT = 0;

      DeleteDtldAppvlEntries(DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.");

      DtldAppvlEntry.INIT;
      DtldAppvlEntry."Table ID" := DATABASE::"Purchase Header";
      DtldAppvlEntry."Document Type" := PurchHeader."Document Type";
      DtldAppvlEntry."Document No." := PurchHeader."No.";
      DtldAppvlEntry."Line No." := 0;
      DtldAppvlEntry."Approval Group Code" := AppvlGroup.Code;
      DtldAppvlEntry.Amount := Amount;
      DtldAppvlEntry."Amount (LCY)" := AmountLCY;
      DtldAppvlEntry.INSERT;

      DtldAppvlEntry."Line No." := 1;
      DtldAppvlEntry.INSERT;
    END;

    LOCAL PROCEDURE FindAndSetAppvlGroup@1103308000();
    VAR
      TempPurchHeader@1103308000 : TEMPORARY Record 38;
      Vend@1103308004 : Record 23;
      TempVend@1103308007 : TEMPORARY Record 23;
      Purchaser@1103308005 : Record 13;
      TempPurchaser@1103308006 : TEMPORARY Record 13;
      DtldAppvlEntry@1000000001 : Record 6085744;
      AppvlGroup2@1000000002 : Record 6085743;
      CriterionsFulfilled@1103308003 : Boolean;
      BreakLoop@1160040000 : Boolean;
    BEGIN
      IF GetLastDtldAppvlEntry(DtldAppvlEntry) THEN BEGIN
        IF AppvlGroup2.GET(DtldAppvlEntry."Approval Group Code") THEN BEGIN
          SetAppvlGroup(AppvlGroup2);
          EXIT;
        END;
      END;

      TempPurchHeader := PurchHeader;
      TempPurchHeader.INSERT;

      IF Vend.GET(PurchHeader."Buy-from Vendor No.") THEN BEGIN
        TempVend := Vend;
        TempVend.INSERT;
      END;

      IF Purchaser.GET(PurchHeader."Purchaser Code") THEN BEGIN
        TempPurchaser := Purchaser;
        TempPurchaser.INSERT;
      END;

      AppvlGroup2.SETCURRENTKEY(Priority);
      IF AppvlGroup2.FINDSET THEN
        REPEAT
          CriterionsFulfilled := TRUE;

          IF FORMAT(AppvlGroup2."Purchase Header Filter") <> '' THEN BEGIN
            TempPurchHeader.SETVIEW(TableFilter2View(DATABASE::"Purchase Header",
              FORMAT(AppvlGroup2."Purchase Header Filter"),TempPurchHeader.GETVIEW));
            IF TempPurchHeader.ISEMPTY THEN
              CriterionsFulfilled := FALSE;
          END;

          IF FORMAT(AppvlGroup2."Vendor Filter") <> '' THEN BEGIN
            TempVend.SETVIEW(TableFilter2View(DATABASE::Vendor,FORMAT(AppvlGroup2."Vendor Filter"),TempVend.GETVIEW));
            IF TempVend.ISEMPTY THEN
              CriterionsFulfilled := FALSE;
          END;

          IF FORMAT(AppvlGroup2."Purchaser Filter") <> '' THEN BEGIN
            TempPurchaser.SETVIEW(TableFilter2View(DATABASE::"Salesperson/Purchaser",
              FORMAT(AppvlGroup2."Purchaser Filter"),TempPurchaser.GETVIEW));
            IF TempPurchaser.ISEMPTY THEN
              CriterionsFulfilled := FALSE;
          END;
          BreakLoop := CriterionsFulfilled;
          IF NOT BreakLoop THEN
            BreakLoop := AppvlGroup2.NEXT = 0;
        UNTIL BreakLoop;

      IF CriterionsFulfilled THEN
        SetAppvlGroup(AppvlGroup2)
      ELSE
        ERROR(Text004,AppvlGroup.TABLECAPTION);
    END;

    LOCAL PROCEDURE GetLastDtldAppvlEntry@1000000014(VAR DtldAppvlEntry@1000000000 : Record 6085744) : Boolean;
    BEGIN
      WITH DtldAppvlEntry DO BEGIN
        SETRANGE("Table ID",DATABASE::"Purchase Header",DATABASE::"Purchase Line");
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        EXIT(DtldAppvlEntry.FINDLAST);
      END;
    END;

    LOCAL PROCEDURE SetPurchHeader@1000000022(NewPurchHeader@1000000000 : Record 38);
    BEGIN
      PurchHeader := NewPurchHeader;
    END;

    LOCAL PROCEDURE SetAppvlGroup@1000000023(NewAppvlGroup@1000000000 : Record 6085743);
    BEGIN
      AppvlGroup := NewAppvlGroup;
    END;

    PROCEDURE MoveEntriesToPosted@1000000005(TableId@1000000004 : Integer;DocumentType@1000000003 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocumentNo@1000000002 : Code[20];ToTableId@1000000001 : Integer;ToNo@1000000005 : Code[20]);
    VAR
      DtldAppvlEntry@1000000000 : Record 6085744;
      DtldAppvlEntryDim@161024014 : Record 6085750;
      PostedDtldAppvlEntry@161024012 : Record 6085752;
      PostedDtldAppvlEntryDim@161024013 : Record 6085753;
    BEGIN
      IF (TableId <> DATABASE::"Purchase Header") OR (ToTableId <> DATABASE::"Purch. Inv. Header") THEN
        EXIT;

      DtldAppvlEntry.SETRANGE("Table ID",DATABASE::"Purchase Header",DATABASE::"Purchase Line");
      DtldAppvlEntry.SETRANGE("Document Type",DocumentType);
      DtldAppvlEntry.SETRANGE("Document No.",DocumentNo);
      IF DtldAppvlEntry.FINDSET THEN
        REPEAT
          PostedDtldAppvlEntry.TRANSFERFIELDS(DtldAppvlEntry);
          PostedDtldAppvlEntry."Table ID" := ToTableId;
          PostedDtldAppvlEntry."Document No." := ToNo;
          PostedDtldAppvlEntry.INSERT;
        UNTIL DtldAppvlEntry.NEXT = 0;

      DtldAppvlEntryDim.SETRANGE("Table ID",TableId);
      DtldAppvlEntryDim.SETRANGE("Document Type",DocumentType);
      DtldAppvlEntryDim.SETRANGE("Document No.",DocumentNo);
      IF DtldAppvlEntryDim.FINDSET THEN
        REPEAT
          PostedDtldAppvlEntryDim.TRANSFERFIELDS(DtldAppvlEntryDim);
          PostedDtldAppvlEntryDim."Table ID" := ToTableId;
          PostedDtldAppvlEntryDim."Document No." := ToNo;
          PostedDtldAppvlEntryDim.INSERT;
        UNTIL DtldAppvlEntryDim.NEXT = 0;
    END;

    PROCEDURE DeleteDtldAppvlEntries@1000000006(TableId@1000000002 : Integer;DocumentType@1000000001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocumentNo@1000000000 : Code[20]);
    VAR
      DtldAppvlEntry@1000000003 : Record 6085744;
    BEGIN
      DtldAppvlEntry.SETRANGE("Table ID",TableId);
      DtldAppvlEntry.SETRANGE("Document Type",DocumentType);
      DtldAppvlEntry.SETRANGE("Document No.",DocumentNo);
      DtldAppvlEntry.DELETEALL(TRUE);
    END;

    PROCEDURE GetAmountExclVAT@1000000009(PurchLine@1000000001 : Record 39) : Decimal;
    VAR
      TempVATAmountLine@1000000002 : TEMPORARY Record 290;
    BEGIN
      IF NOT PurchHeader."Prices Including VAT" THEN
        EXIT(PurchLine."Line Amount")
      ELSE BEGIN
        PurchLine.SETRANGE("Line No.",PurchLine."Line No.");
        PurchLine.CalcVATAmountLines(0,PurchHeader,PurchLine,TempVATAmountLine);
        EXIT(TempVATAmountLine."Line Amount" - TempVATAmountLine."VAT Amount");
      END;
    END;

    LOCAL PROCEDURE TableFilterToFilters@1103308006(TableFilter@1103308000 : Text[1024]) FilterString : Text[1024];
    VAR
      Position@1103308001 : Integer;
      RecRef@1103308002 : RecordRef;
      FieldRef@1103308003 : FieldRef;
    BEGIN
      TableFilter := COPYSTR(TableFilter,STRPOS(TableFilter,': '));
      Position := STRPOS(TableFilter,'=');
      WHILE Position > 0 DO BEGIN
        TableFilter := DELSTR(TableFilter,Position,1);
        TableFilter := INSSTR(TableFilter,': ',Position);
        Position := STRPOS(TableFilter,'=');
      END;
    END;

    LOCAL PROCEDURE TableFilter2View@1103308005(TableNo@1160830001 : Integer;TableFilter@1160830000 : Text[1024];CurrTableView@1160830005 : Text[1024]) : Text[1024];
    VAR
      AllObj@1160830004 : Record 2000000038;
      TableView@1160830003 : Text[1024];
      Pos@1160830002 : Integer;
    BEGIN
      TableView := '';
      Pos := STRPOS(CurrTableView,'WHERE(');
      IF Pos > 0 THEN
        TableView := COPYSTR(CurrTableView,1,Pos-1)
      ELSE
        TableView := CurrTableView + ' ';

      Pos := STRPOS(TableFilter,': ');
      IF Pos = 0 THEN
        EXIT(TableView);

      AllObj.GET(AllObj."Object Type"::Table,TableNo);

      IF COPYSTR(TableFilter,1,Pos-1) <> AllObj."Object Name" THEN
        EXIT(TableView);

      TableFilter := COPYSTR(TableFilter,Pos+2);

      Pos := STRPOS(TableFilter,'=');
      IF Pos = 0 THEN
        EXIT(TableView);

      TableView := TableView + 'WHERE(';

      WHILE Pos > 0 DO BEGIN
        TableView := TableView + COPYSTR(TableFilter,1,Pos) + 'FILTER(';
        TableFilter := COPYSTR(TableFilter,Pos+1);

        IF TableFilter[1] = '"' THEN BEGIN
          TableFilter := COPYSTR(TableFilter,2);
          Pos := STRPOS(TableFilter,'"');
          WHILE Pos > 0 DO BEGIN
            TableView := TableView + COPYSTR(TableFilter,1,Pos-1);
            IF COPYSTR(TableFilter,Pos,2) = '""' THEN BEGIN
              TableView := TableView + '"';
              TableFilter := COPYSTR(TableFilter,Pos+2);
              Pos := STRPOS(TableFilter,'"');
            END ELSE BEGIN
              TableFilter := COPYSTR(TableFilter,Pos+1);
              Pos := 0;
            END;
          END;
        END;

        Pos := STRPOS(TableFilter,',');
        IF Pos = 0 THEN
          Pos := STRLEN(TableFilter) + 1;

        TableView := TableView + COPYSTR(TableFilter,1,Pos-1) + ')' + COPYSTR(TableFilter,Pos,1);
        TableFilter := COPYSTR(TableFilter,Pos+1);
        Pos := STRPOS(TableFilter,'=');
      END;

      TableView := TableView + ')';

      EXIT(TableView);
    END;

    LOCAL PROCEDURE IsActiveDimension@1000000003(DimCode@1000000000 : Code[20]) : Boolean;
    VAR
      AppvlGroupDim@1000000001 : Record 6085751;
    BEGIN
      EXIT(AppvlGroupDim.GET(AppvlGroup.Code,DimCode));
    END;

    PROCEDURE CheckMandatoryDim@1000000008();
    VAR
      PurchLine@1000000000 : Record 39;
      DimSetEntry@1000000001 : TEMPORARY Record 480;
      AppvlGroupDim@1000000002 : Record 6085751;
    BEGIN
      AppvlGroupDim.SETRANGE("Approval Group Code",AppvlGroup.Code);
      AppvlGroupDim.SETRANGE(Mandatory,TRUE);
      IF AppvlGroupDim.ISEMPTY THEN
        EXIT;

      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETFILTER(Quantity,'<>%1',0);
      IF PurchLine.FINDSET THEN
        REPEAT
          IF AppvlGroupDim.FINDSET THEN
            REPEAT
              DimSetEntry.RESET;
              DimMgt.GetDimensionSet(DimSetEntry,PurchLine."Dimension Set ID");
              DimSetEntry.SETRANGE("Dimension Code",AppvlGroupDim."Dimension Code");
              IF DimSetEntry.ISEMPTY THEN
                ERROR(Text007,AppvlGroupDim."Dimension Code");
            UNTIL AppvlGroupDim.NEXT = 0;
        UNTIL PurchLine.NEXT = 0;
    END;

    PROCEDURE MarkOnWeb@1000000010(PurchLine@1000000001 : Record 39;CurrUserId@1000000000 : Code[50]) : Boolean;
    VAR
      DtldAppvlEntry@1000000002 : Record 6085744;
    BEGIN
      DtldAppvlEntry.SETRANGE("Table ID",DATABASE::"Purchase Line");
      DtldAppvlEntry.SETRANGE("Document Type",PurchLine."Document Type");
      DtldAppvlEntry.SETRANGE("Document No.",PurchLine."Document No.");
      DtldAppvlEntry.SETRANGE("Line No.",PurchLine."Line No.");
      DtldAppvlEntry.SETRANGE("User ID",CurrUserId);
      DtldAppvlEntry.SETRANGE(Approved,FALSE);
      EXIT(NOT DtldAppvlEntry.ISEMPTY);
    END;

    PROCEDURE GetDimList@6085573(AppvlGroupCode@6085574 : Code[10];ContiniaUserID@6085577 : Code[50];EntryNo@6085580 : Integer;DimCode@6085578 : Code[20]) : Text[250];
    VAR
      ApprovalUserDim@6085573 : Record 6085748;
      DimList@6085576 : Text[250];
      DimCounter@6085575 : Integer;
      StopLoop@6085579 : Boolean;
    BEGIN
      ApprovalUserDim.SETRANGE("Approval Group Code",AppvlGroupCode);
      ApprovalUserDim.SETRANGE("User ID",ContiniaUserID);
      ApprovalUserDim.SETRANGE("Entry No.",EntryNo);
      ApprovalUserDim.SETRANGE("Dimension Code",DimCode);

      IF ApprovalUserDim.FINDSET THEN BEGIN
        REPEAT
          DimCounter += 1;

          IF DimList = '' THEN
            DimList += ApprovalUserDim."Dimension Value Code"
          ELSE
            IF STRLEN(DimList + ', ' + ApprovalUserDim."Dimension Value Code") > 240 THEN BEGIN
              DimList += '...';
              StopLoop := TRUE
            END ELSE
              DimList += ', ' + ApprovalUserDim."Dimension Value Code";

        UNTIL (ApprovalUserDim.NEXT = 0) OR StopLoop;

        IF DimList <> '' THEN
          DimList := '(' + FORMAT(DimCounter) + ') - ' + DimList;
      END;

      EXIT(DimList);
    END;

    BEGIN
    {
      *  There is a one-to-one relationship between a 'Detailed Approval Line' and a 'Purchase Line'. The Purchase Line dimensions
         are also stored in a table called 'Dtld. Approval Entry Dimension'.

         The engine always start by making sure that the values that are used to deside who needs to approve an a document,
         are the same on the Detailed Approval Line and Purchase Line and the. This is information like the Line Amount
         and the activated Dimension and Dimension Values for the paticualar Approval Group. IF any of these have changed
         when the process is started then the engine will recreate the changed lines in the 'Detailed Approval Line' table and
         'Dtld. Approval Entry Dimension' table, based on the Purchase Lines. These new 'Detailed Approval Line' will be flagged
         as not Approved.

         When a user approve a document the engine will start by executing the logic described above. After that it will try to
         approve as many lines as possible, based on the Amount and Dimension allowance specified on the Approval User.

         Next, the engine will find the next person to approve the document and create the Approval Entry to this person. At the same
         time it will stamp the user id to the approver to the 'Detailed Approval Line'.
    }
    END.
  }
}

