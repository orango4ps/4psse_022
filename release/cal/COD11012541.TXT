OBJECT Codeunit 11012541 Insert Plant Location Rates
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE RentalDiscount@1100528500(VAR Rec@1100528506 : Record 11012554);
    VAR
      TmpPlantInventRec@1100528505 : TEMPORARY Record 11012555;
      PlantOrderLine2@1100528504 : Record 11012557;
      AddLinkedPlantTypeStndItemMgt@1100528503 : Codeunit 11012583;
      PlantInventPage@1100528502 : Page 11012559;
      SoldAllowed@1100528501 : Boolean;
      DetailLevel@1100528500 : Integer;
      InventoryRec@1100528507 : Record 11012555;
      RentalDiscount@1100528508 : Record 11012544;
    BEGIN
        InventoryRec.RESET;
        InventoryRec.FILTERGROUP(9);
        InventoryRec.SETRANGE(Removed, FALSE);
        InventoryRec.SETRANGE(Location, Rec.Code);

        PlantInventPage.SetMultiSelection();
        PlantInventPage.SETTABLEVIEW(InventoryRec);
        PlantInventPage.LOOKUPMODE(TRUE);
        IF PlantInventPage.RUNMODAL <> ACTION::LookupOK THEN
          EXIT;
        IF NOT PlantInventPage.GetMarkedRecords(TmpPlantInventRec) THEN
          EXIT;

        TmpPlantInventRec.RESET;
        IF TmpPlantInventRec.FINDSET THEN BEGIN
          REPEAT
            RentalDiscount.RESET;
            RentalDiscount.Location := Rec.Code;
            RentalDiscount.VALIDATE("Plant Type",TmpPlantInventRec."Plant Type");
            RentalDiscount.VALIDATE("Plant No.",TmpPlantInventRec."Plant No.");
            RentalDiscount.INSERT;
          UNTIL TmpPlantInventRec.NEXT = 0;
        END;
    END;

    PROCEDURE RentalQuantityDiscount@1100528501(VAR Rec@1100528506 : Record 11012554);
    VAR
      TmpPlantInventRec@1100528505 : TEMPORARY Record 11012555;
      PlantInventPage@1100528502 : Page 11012559;
      InventoryRec@1100528507 : Record 11012555;
      RentalQuantityDiscount@1100528508 : Record 11072669;
    BEGIN
        InventoryRec.RESET;
        InventoryRec.FILTERGROUP(9);
        InventoryRec.SETRANGE(Removed, FALSE);
        InventoryRec.SETRANGE(Location, Rec.Code);

        PlantInventPage.SetMultiSelection();
        PlantInventPage.SETTABLEVIEW(InventoryRec);
        PlantInventPage.LOOKUPMODE(TRUE);
        IF PlantInventPage.RUNMODAL <> ACTION::LookupOK THEN
          EXIT;
        IF NOT PlantInventPage.GetMarkedRecords(TmpPlantInventRec) THEN
          EXIT;

        TmpPlantInventRec.RESET;
        IF TmpPlantInventRec.FINDSET THEN BEGIN
          REPEAT
            RentalQuantityDiscount.RESET;
            RentalQuantityDiscount.Location := Rec.Code;
            RentalQuantityDiscount.VALIDATE("Plant Type",TmpPlantInventRec."Plant Type");
            RentalQuantityDiscount.VALIDATE("Plant No.",TmpPlantInventRec."Plant No.");
            RentalQuantityDiscount.INSERT;
          UNTIL TmpPlantInventRec.NEXT = 0;
        END;
    END;

    PROCEDURE RentalRates@1100528503(VAR Rec@1100528506 : Record 11012554);
    VAR
      TmpPlantInventRec@1100528505 : TEMPORARY Record 11012555;
      PlantInventPage@1100528502 : Page 11012559;
      InventoryRec@1100528507 : Record 11012555;
      RentalRate@1100528508 : Record 11012583;
    BEGIN
        InventoryRec.RESET;
        InventoryRec.FILTERGROUP(9);
        InventoryRec.SETRANGE(Removed, FALSE);
        InventoryRec.SETRANGE(Location, Rec.Code);

        PlantInventPage.SetMultiSelection();
        PlantInventPage.SETTABLEVIEW(InventoryRec);
        PlantInventPage.LOOKUPMODE(TRUE);
        IF PlantInventPage.RUNMODAL <> ACTION::LookupOK THEN
          EXIT;
        IF NOT PlantInventPage.GetMarkedRecords(TmpPlantInventRec) THEN
          EXIT;

        TmpPlantInventRec.RESET;
        IF TmpPlantInventRec.FINDSET THEN BEGIN
          REPEAT
            RentalRate.RESET;
            RentalRate.Location := Rec.Code;
            RentalRate.VALIDATE("Plant Type",TmpPlantInventRec."Plant Type");
            RentalRate.VALIDATE("Plant No.",TmpPlantInventRec."Plant No.");
             RentalRate."Rental Type" := RentalRate."Rental Type"::Rental;
            RentalRate.INSERT;
          UNTIL TmpPlantInventRec.NEXT = 0;
        END;
    END;

    PROCEDURE HourRatesByLocation@1100528502(VAR Rec@1100528506 : Record 11012554);
    VAR
      TmpPlantInventRec@1100528505 : TEMPORARY Record 11012555;
      PlantInventPage@1100528502 : Page 11012559;
      InventoryRec@1100528507 : Record 11012555;
      RentalRate@1100528500 : Record 11012583;
    BEGIN
        InventoryRec.RESET;
        InventoryRec.FILTERGROUP(9);
        InventoryRec.SETRANGE(Removed, FALSE);
        InventoryRec.SETRANGE(Location, Rec.Code);

        PlantInventPage.SetMultiSelection();
        PlantInventPage.SETTABLEVIEW(InventoryRec);
        PlantInventPage.LOOKUPMODE(TRUE);
        IF PlantInventPage.RUNMODAL <> ACTION::LookupOK THEN
          EXIT;
        IF NOT PlantInventPage.GetMarkedRecords(TmpPlantInventRec) THEN
          EXIT;

        TmpPlantInventRec.RESET;
        IF TmpPlantInventRec.FINDSET THEN BEGIN
          REPEAT
            RentalRate.RESET;
            RentalRate.Location := Rec.Code;
            RentalRate.VALIDATE("Plant Type",TmpPlantInventRec."Plant Type");
            RentalRate.VALIDATE("Plant No.",TmpPlantInventRec."Plant No.");
            RentalRate."Rental Type" := RentalRate."Rental Type"::"Plant Hours";
            RentalRate.INSERT;
          UNTIL TmpPlantInventRec.NEXT = 0;
        END;
    END;

    PROCEDURE SalesBuyBackRates@1100528504(VAR Rec@1100528506 : Record 11012554);
    VAR
      TmpPlantInventRec@1100528505 : TEMPORARY Record 11012555;
      PlantInventPage@1100528502 : Page 11012559;
      InventoryRec@1100528507 : Record 11012555;
      RentalRate@1100528500 : Record 11012583;
    BEGIN
        InventoryRec.RESET;
        InventoryRec.FILTERGROUP(9);
        InventoryRec.SETRANGE(Removed, FALSE);
        InventoryRec.SETRANGE(Location, Rec.Code);

        PlantInventPage.SetMultiSelection();
        PlantInventPage.SETTABLEVIEW(InventoryRec);
        PlantInventPage.LOOKUPMODE(TRUE);
        IF PlantInventPage.RUNMODAL <> ACTION::LookupOK THEN
          EXIT;
        IF NOT PlantInventPage.GetMarkedRecords(TmpPlantInventRec) THEN
          EXIT;

        TmpPlantInventRec.RESET;
        IF TmpPlantInventRec.FINDSET THEN BEGIN
          REPEAT
            RentalRate.RESET;
            RentalRate.Location := Rec.Code;
            RentalRate.VALIDATE("Plant Type",TmpPlantInventRec."Plant Type");
            RentalRate.VALIDATE("Plant No.",TmpPlantInventRec."Plant No.");
            RentalRate."Rental Type" := RentalRate."Rental Type"::"Sales / Buy Back";
            RentalRate.INSERT;
          UNTIL TmpPlantInventRec.NEXT = 0;
        END;
    END;

    BEGIN
    END.
  }
}

