OBJECT Table 7347 Internal Movement Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Item No.");
               "Sorting Sequence No." := GetSortSeqNo;
             END;

    OnModify=BEGIN
               TESTFIELD("Item No.");
               "Sorting Sequence No." := GetSortSeqNo;
             END;

    OnDelete=VAR
               ItemTrackingMgt@1001 : Codeunit 6500;
             BEGIN
               ItemTrackingMgt.DeleteWhseItemTrkgLines(
                 DATABASE::"Internal Movement Line",0,"No.",'',0,"Line No.","Location Code",TRUE);
             END;

    OnRename=BEGIN
               ERROR(Text002,TABLECAPTION);
             END;

    CaptionML=[ENU=Internal Movement Line;
               NOR=Linje for intern flytting];
    LookupPageID=Page7361;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              NOR=Nr.;
                                                              SVE=Nr];
                                                   Editable=No }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr];
                                                   Editable=No }
    { 10  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                GetLocation("Location Code");
                                                                IF "Location Code" <> '' THEN
                                                                  InternalMovementHeader.CheckLocationSettings("Location Code");
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              NOR=Lokasjonskode;
                                                              SVE=Lagerst„llekod];
                                                   Editable=No }
    { 11  ;   ;Shelf No.           ;Code10        ;CaptionML=[ENU=Shelf No.;
                                                              NOR=Hyllenr.;
                                                              SVE=Hyllnr] }
    { 12  ;   ;From Bin Code       ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                IF xRec."From Bin Code" <> "From Bin Code" THEN
                                                                  IF "From Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    IF "From Bin Code" = Location."Adjustment Bin Code" THEN
                                                                      FIELDERROR(
                                                                        "From Bin Code",
                                                                        STRSUBSTNO(
                                                                          Text000,Location.FIELDCAPTION("Adjustment Bin Code"),
                                                                          Location.TABLECAPTION));
                                                                    VALIDATE(Quantity,0);
                                                                  END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("From Bin Code"));
                                                            END;

                                                   CaptionML=[ENU=From Bin Code;
                                                              NOR=Fra hylle-kode] }
    { 13  ;   ;To Bin Code         ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   CaptionML=[ENU=To Bin Code;
                                                              NOR=Til hylle-kode;
                                                              SVE=Till lagerplatskod] }
    { 14  ;   ;Item No.            ;Code20        ;OnValidate=BEGIN
                                                                IF "Item No." <> xRec."Item No." THEN
                                                                  "Variant Code" := '';

                                                                IF "Item No." <> '' THEN BEGIN
                                                                  GetItemUnitOfMeasure;
                                                                  Description := Item.Description;
                                                                  "Description 2" := Item."Description 2";
                                                                  "Shelf No." := Item."Shelf No.";
                                                                  VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
                                                                END ELSE BEGIN
                                                                  Description := '';
                                                                  "Description 2" := '';
                                                                  "Variant Code" := '';
                                                                  "Shelf No." := '';
                                                                  VALIDATE("Unit of Measure Code",'');
                                                                END;

                                                                IF InternalMovementHeader.GET("No.") THEN BEGIN
                                                                  IF "Location Code" = '' THEN
                                                                    VALIDATE("Location Code",InternalMovementHeader."Location Code");
                                                                  IF "To Bin Code" = '' THEN
                                                                    VALIDATE("To Bin Code",InternalMovementHeader."To Bin Code");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("Item No."));
                                                            END;

                                                   CaptionML=[ENU=Item No.;
                                                              NOR=Varenr.;
                                                              SVE=Artikelnr] }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. (Base)" := CalcBaseQty(Quantity);

                                                                IF CurrFieldNo = FIELDNO(Quantity) THEN
                                                                  CheckBinContentQty;

                                                                IF NOT xRec.ISEMPTY THEN
                                                                  IF NOT CheckQtyItemTrackingLines THEN
                                                                    ERROR(ItemTrackingErr,"Item No.",TABLECAPTION);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 16  ;   ;Qty. (Base)         ;Decimal       ;CaptionML=[ENU=Qty. (Base);
                                                              NOR=Ant. (l.enh.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 29  ;   ;Unit of Measure Code;Code10        ;OnValidate=BEGIN
                                                                IF "Item No." <> '' THEN BEGIN
                                                                  GetItemUnitOfMeasure;
                                                                  "Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure";
                                                                END ELSE
                                                                  "Qty. per Unit of Measure" := 1;

                                                                VALIDATE(Quantity);
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("Unit of Measure Code"));
                                                            END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              NOR=Enhetskode;
                                                              SVE=Enhetskod] }
    { 30  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              NOR=Antall per enhet;
                                                              SVE=Antal per enhet];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 31  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record 5401;
                                                              BEGIN
                                                                IF "Variant Code" = '' THEN
                                                                  VALIDATE("Item No.")
                                                                ELSE BEGIN
                                                                  ItemVariant.GET("Item No.","Variant Code");
                                                                  Description := ItemVariant.Description;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("Variant Code"));
                                                            END;

                                                   CaptionML=[ENU=Variant Code;
                                                              NOR=Variantkode;
                                                              SVE=Variantkod] }
    { 32  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 33  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              NOR=Beskrivelse 2;
                                                              SVE=Beskrivning 2] }
    { 35  ;   ;Sorting Sequence No.;Integer       ;CaptionML=[ENU=Sorting Sequence No.;
                                                              NOR=Sorteringsrekkef›lgenr.];
                                                   Editable=No }
    { 36  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              NOR=Forfallsdato;
                                                              SVE=F”rfallodatum] }
    { 37  ;   ;Cubage              ;Decimal       ;CaptionML=[ENU=Cubage;
                                                              NOR=Kubikkinnhold];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Weight              ;Decimal       ;CaptionML=[ENU=Weight;
                                                              NOR=Vekt;
                                                              SVE=Vikt];
                                                   DecimalPlaces=0:5 }
  }
  KEYS
  {
    {    ;No.,Line No.                            ;Clustered=Yes }
    {    ;No.,Item No.                            ;MaintainSQLIndex=No }
    {    ;No.,From Bin Code                       ;MaintainSQLIndex=No }
    {    ;No.,Shelf No.                           ;MaintainSQLIndex=No }
    {    ;No.,Sorting Sequence No.                 }
    {    ;No.,Due Date                            ;MaintainSQLIndex=No }
    {    ;Item No.,From Bin Code,Location Code,Unit of Measure Code,Variant Code;
                                                   SumIndexFields=Qty. (Base);
                                                   MaintainSIFTIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      InternalMovementHeader@1002 : Record 7346;
      Location@1004 : Record 14;
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      Text000@1003 : TextConst 'ENU=must not be the %1 of the %2;NOR=kan ikke v‘re %1 til %2en';
      Text001@1006 : TextConst 'ENU=must not be greater than %1 units;NOR=kan ikke v‘re st›rre enn %1 enheter';
      Text002@1007 : TextConst 'ENU=You cannot rename a %1.;NOR=Du kan ikke gi nytt navn til en %1.;SVE=Du kan inte byta namn p† %1.';
      UOMMgt@1008 : Codeunit 5402;
      LastLineNo@1012 : Integer;
      ItemTrackingErr@1005 : TextConst '@@@=Item tracking numbers should not be higher than the item quantity.;ENU=Item tracking numbers defined for item %1 in the %2 are higher than the item quantity.\\Adjust the item tracking numbers and then increase the item quantity, if relevant.;NOR=Varesporingsnumre som er definert for varen %1 i %2, er h›yere enn vareantallet.\\Juster varesporingsnumrene, og ›k deretter vareantallet hvis det er relevant.';

    [External]
    PROCEDURE SetUpNewLine@3(LastInternalMovementLine@1000 : Record 7347);
    VAR
      InternalMovementLine@1001 : Record 7347;
    BEGIN
      GetInternalMovementHeader("No.");
      InternalMovementLine.SETRANGE("No.",InternalMovementHeader."No.");
      IF InternalMovementLine.COUNT > 0 THEN
        LastLineNo := LastInternalMovementLine."Line No."
      ELSE
        LastLineNo := 0;
      "Line No." := GetNextLineNo;
      VALIDATE("Location Code",InternalMovementHeader."Location Code");
      "To Bin Code" := InternalMovementHeader."To Bin Code";
      "Due Date" := InternalMovementHeader."Due Date";
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision));
    END;

    LOCAL PROCEDURE CheckBinContentQty@9();
    VAR
      BinContent@1000 : Record 7302;
      InternalMovementLine@1002 : Record 7347;
      AvailQtyBase@1001 : Decimal;
    BEGIN
      GetLocation("Location Code");

      IF Location."Bin Mandatory" AND
         ("Location Code" <> '') AND ("From Bin Code" <> '') AND
         ("Item No." <> '') AND ("Unit of Measure Code" <> '')
      THEN BEGIN
        BinContent."Location Code" := "Location Code";
        BinContent."Bin Code" := "From Bin Code";
        BinContent."Item No." := "Item No.";
        BinContent."Variant Code" := "Variant Code";
        BinContent."Unit of Measure Code" := "Unit of Measure Code";

        AvailQtyBase := BinContent.CalcQtyAvailToTake(0);
        InternalMovementLine.SETCURRENTKEY(
          "Item No.","From Bin Code","Location Code","Unit of Measure Code","Variant Code");
        InternalMovementLine.SETRANGE("Item No.","Item No.");
        InternalMovementLine.SETRANGE("From Bin Code","From Bin Code");
        InternalMovementLine.SETRANGE("Location Code","Location Code");
        InternalMovementLine.SETRANGE("Unit of Measure Code","Unit of Measure Code");
        InternalMovementLine.SETRANGE("Variant Code","Variant Code");
        InternalMovementLine.SETFILTER("Line No.",'<>%1',"Line No.");
        InternalMovementLine.CALCSUMS("Qty. (Base)");
        IF AvailQtyBase - InternalMovementLine."Qty. (Base)" < "Qty. (Base)" THEN
          FIELDERROR(
            "Qty. (Base)",
            STRSUBSTNO(
              Text001,AvailQtyBase - InternalMovementLine."Qty. (Base)"));
      END;
    END;

    LOCAL PROCEDURE GetItemUnitOfMeasure@18();
    BEGIN
      GetItem;
      Item.TESTFIELD("No.");
      IF (Item."No." <> ItemUnitOfMeasure."Item No.") OR
         ("Unit of Measure Code" <> ItemUnitOfMeasure.Code)
      THEN
        IF NOT ItemUnitOfMeasure.GET(Item."No.","Unit of Measure Code") THEN
          ItemUnitOfMeasure.GET(Item."No.",Item."Base Unit of Measure");
    END;

    LOCAL PROCEDURE GetItem@15();
    BEGIN
      IF Item."No." <> "Item No." THEN
        Item.GET("Item No.");
    END;

    LOCAL PROCEDURE GetLocation@1(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetInternalMovementHeader@7(InternalMovementNo@1000 : Code[20]);
    BEGIN
      IF InternalMovementNo <> '' THEN
        InternalMovementHeader.GET(InternalMovementNo);
    END;

    LOCAL PROCEDURE LookUpBinContent@6();
    VAR
      BinContent@1000 : Record 7302;
    BEGIN
      BinContent.FILTERGROUP(2);
      BinContent.SETRANGE("Location Code","Location Code");
      BinContent.FILTERGROUP(0);
      BinContent."Location Code" := "Location Code";
      BinContent."Bin Code" := "From Bin Code";
      BinContent."Item No." := "Item No.";
      IF "Variant Code" <> '' THEN BEGIN
        TESTFIELD("Item No.");
        BinContent."Variant Code" := "Variant Code";
      END;
      IF "Unit of Measure Code" <> '' THEN BEGIN
        TESTFIELD("Item No.");
        BinContent."Unit of Measure Code" := "Unit of Measure Code";
      END;
      IF PAGE.RUNMODAL(0,BinContent) = ACTION::LookupOK THEN BEGIN
        IF BinContent."Block Movement" IN [BinContent."Block Movement"::Outbound,BinContent."Block Movement"::All]
        THEN
          BinContent.FIELDERROR("Block Movement");
        VALIDATE("Location Code",BinContent."Location Code");
        VALIDATE(Quantity,0);
        VALIDATE("From Bin Code",BinContent."Bin Code");
        VALIDATE("Item No.",BinContent."Item No.");
        VALIDATE("Variant Code",BinContent."Variant Code");
        VALIDATE("Unit of Measure Code",BinContent."Unit of Measure Code");
      END;
    END;

    LOCAL PROCEDURE SelectLookUp@10(CurrentFieldNo@1000 : Integer);
    VAR
      ItemVariant@1001 : Record 5401;
    BEGIN
      GetLocation("Location Code");
      IF Location."Bin Mandatory" THEN
        LookUpBinContent
      ELSE BEGIN
        IF CurrentFieldNo = FIELDNO("From Bin Code") THEN
          Location.TESTFIELD("Bin Mandatory");

        IF CurrentFieldNo = FIELDNO("Item No.") THEN BEGIN
          Item."No." := "Item No.";
          IF PAGE.RUNMODAL(0,Item) = ACTION::LookupOK THEN
            VALIDATE("Item No.",Item."No.");
        END;

        IF CurrentFieldNo = FIELDNO("Variant Code") THEN BEGIN
          TESTFIELD("Item No.");
          ItemVariant.FILTERGROUP(2);
          ItemVariant.SETRANGE("Item No.","Item No.");
          ItemVariant.FILTERGROUP(0);
          ItemVariant."Item No." := "Item No.";
          ItemVariant.Code := "Variant Code";
          IF PAGE.RUNMODAL(0,ItemVariant) = ACTION::LookupOK THEN
            VALIDATE("Variant Code",ItemVariant.Code);
        END;

        IF CurrentFieldNo = FIELDNO("Unit of Measure Code") THEN BEGIN
          TESTFIELD("Item No.");
          ItemUnitOfMeasure.FILTERGROUP(2);
          ItemUnitOfMeasure.SETRANGE("Item No.","Item No.");
          ItemUnitOfMeasure.FILTERGROUP(0);
          ItemUnitOfMeasure."Item No." := "Item No.";
          ItemUnitOfMeasure.Code := "Unit of Measure Code";
          IF PAGE.RUNMODAL(0,ItemUnitOfMeasure) = ACTION::LookupOK THEN
            VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
        END;
      END;
    END;

    [External]
    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      WhseWorksheetLine@1001 : Record 7326;
      WhseItemTrackingLinesForm@1000 : Page 6550;
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Qty. (Base)");
      WhseWorksheetLine.InitLineWithItem(
        WhseWorksheetLine."Whse. Document Type"::"Internal Movement","No.","Line No.",
        "Location Code","Item No.","Variant Code",
        "Qty. (Base)","Qty. (Base)","Qty. per Unit of Measure");

      WhseItemTrackingLinesForm.SetSource(WhseWorksheetLine,DATABASE::"Internal Movement Line");
      WhseItemTrackingLinesForm.RUNMODAL;
    END;

    LOCAL PROCEDURE CheckQtyItemTrackingLines@2() : Boolean;
    VAR
      WhseWorksheetLine@1001 : Record 7326;
      TotalWhseItemTrackingLine@1025 : Record 6550;
      ItemTrackingMgt@1000 : Codeunit 6500;
      SourceQuantityArray@1028 : ARRAY [2] OF Decimal;
      UndefinedQtyArray@1027 : ARRAY [2] OF Decimal;
      WhseSNRequired@1004 : Boolean;
      WhseLNRequired@1003 : Boolean;
    BEGIN
      ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",WhseSNRequired,WhseLNRequired,FALSE);
      IF WhseSNRequired OR WhseLNRequired THEN BEGIN
        WhseWorksheetLine.InitLineWithItem(
          WhseWorksheetLine."Whse. Document Type"::"Internal Movement","No.","Line No.",
          "Location Code","Item No.","Variant Code",
          "Qty. (Base)","Qty. (Base)","Qty. per Unit of Measure");
        EXIT(
          ItemTrackingMgt.UpdateQuantities(
            WhseWorksheetLine,TotalWhseItemTrackingLine,SourceQuantityArray,UndefinedQtyArray,DATABASE::"Internal Movement Line"));
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetNextLineNo@16() : Integer;
    VAR
      InternalMovementLine@1000 : Record 7347;
      HigherLineNo@1002 : Integer;
      LowerLineNo@1001 : Integer;
    BEGIN
      InternalMovementLine.SETRANGE("No.",InternalMovementHeader."No.");
      IF InternalMovementHeader."Sorting Method" <> InternalMovementHeader."Sorting Method"::" " THEN
        EXIT(GetLastLineNo + 10000);

      InternalMovementLine."No." := InternalMovementHeader."No.";
      InternalMovementLine."Line No." := LastLineNo;
      IF InternalMovementLine.FIND('<') THEN
        LowerLineNo := InternalMovementLine."Line No."
      ELSE BEGIN
        IF InternalMovementLine.FIND('>') THEN
          EXIT(LastLineNo DIV 2);

        EXIT(LastLineNo + 10000);
      END;

      InternalMovementLine."No." := InternalMovementHeader."No.";
      InternalMovementLine."Line No." := LastLineNo;
      IF InternalMovementLine.FIND('>') THEN
        HigherLineNo := LastLineNo
      ELSE
        EXIT(LastLineNo + 10000);

      EXIT(LowerLineNo + (HigherLineNo - LowerLineNo) DIV 2);
    END;

    LOCAL PROCEDURE GetLastLineNo@20() : Integer;
    VAR
      InternalMovementLine@1000 : Record 7347;
    BEGIN
      InternalMovementLine.SETRANGE("No.",InternalMovementHeader."No.");
      IF InternalMovementLine.FINDLAST THEN
        EXIT(InternalMovementLine."Line No.");

      EXIT(0);
    END;

    LOCAL PROCEDURE GetSortSeqNo@12() : Integer;
    VAR
      InternalMovementLine@1000 : Record 7347;
      HigherSeqNo@1002 : Integer;
      LowerSeqNo@1003 : Integer;
      LastSeqNo@1001 : Integer;
    BEGIN
      GetInternalMovementHeader("No.");

      InternalMovementLine.SETRANGE("No.","No.");
      CASE InternalMovementHeader."Sorting Method" OF
        InternalMovementHeader."Sorting Method"::" ":
          InternalMovementLine.SETCURRENTKEY("No.","Line No.");
        InternalMovementHeader."Sorting Method"::Item:
          InternalMovementLine.SETCURRENTKEY("No.","Item No.");
        InternalMovementHeader."Sorting Method"::"Shelf or Bin":
          BEGIN
            GetLocation("Location Code");
            IF Location."Bin Mandatory" THEN
              InternalMovementLine.SETCURRENTKEY("No.","From Bin Code")
            ELSE
              InternalMovementLine.SETCURRENTKEY("No.","Shelf No.");
          END;
        InternalMovementHeader."Sorting Method"::"Due Date":
          InternalMovementLine.SETCURRENTKEY("No.","Due Date");
        ELSE
          EXIT("Line No.");
      END;

      InternalMovementLine := Rec;
      LastSeqNo := GetLastSeqNo(InternalMovementLine);
      IF InternalMovementLine.FIND('<') THEN
        LowerSeqNo := InternalMovementLine."Sorting Sequence No."
      ELSE
        IF InternalMovementLine.FIND('>') THEN
          EXIT(InternalMovementLine."Sorting Sequence No." DIV 2);

      LowerSeqNo := 10000;

      InternalMovementLine := Rec;
      IF InternalMovementLine.FIND('>') THEN
        HigherSeqNo := InternalMovementLine."Sorting Sequence No."
      ELSE
        IF InternalMovementLine.FIND('<') THEN
          EXIT(LastSeqNo + 10000);

      HigherSeqNo := LastSeqNo;
      EXIT(LowerSeqNo + (HigherSeqNo - LowerSeqNo) DIV 2);
    END;

    LOCAL PROCEDURE GetLastSeqNo@17(InternalMovementLine@1001 : Record 7347) : Integer;
    BEGIN
      InternalMovementLine.SETRECFILTER;
      InternalMovementLine.SETRANGE("Line No.");
      InternalMovementLine.SETCURRENTKEY("No.","Sorting Sequence No.");
      IF InternalMovementLine.FINDLAST THEN
        EXIT(InternalMovementLine."Sorting Sequence No.");

      EXIT(0);
    END;

    [External]
    PROCEDURE SetItemTrackingLines@19(SerialNo@1000 : Code[50];LotNo@1001 : Code[50];ExpirationDate@1005 : Date;QtyToEmpty@1002 : Decimal);
    VAR
      WhseWorksheetLine@1004 : Record 7326;
      WhseItemTrackingLinesForm@1003 : Page 6550;
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Qty. (Base)");
      WhseWorksheetLine.InitLineWithItem(
        WhseWorksheetLine."Whse. Document Type"::"Internal Movement","No.","Line No.",
        "Location Code","Item No.","Variant Code",
        "Qty. (Base)","Qty. (Base)","Qty. per Unit of Measure");
      WhseItemTrackingLinesForm.SetSource(WhseWorksheetLine,DATABASE::"Internal Movement Line");
      WhseItemTrackingLinesForm.InsertItemTrackingLine(WhseWorksheetLine,SerialNo,LotNo,ExpirationDate,QtyToEmpty);
    END;

    BEGIN
    END.
  }
}

