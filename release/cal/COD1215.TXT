OBJECT Codeunit 1215 Data Exch. Type Selector
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    TableNo=133;
    Permissions=TableData 1220=imd;
    OnRun=VAR
            BestDataExchCode@1000 : Code[20];
          BEGIN
            IF Type <> Type::XML THEN
              ERROR(InvalidTypeErr);

            CheckContentHasValue(Rec);

            BestDataExchCode := FindDataExchType(Rec);

            SetResult("Incoming Document Entry No.",BestDataExchCode);
          END;

  }
  CODE
  {
    VAR
      InvalidTypeErr@1000 : TextConst 'ENU=The attachment is not an XML document.;NOR=Vedlegget er ikke et XML-dokument.;SVE=Bilagan „r inte ett XML-dokument.';
      AttachmentEmptyErr@1001 : TextConst 'ENU=The attachment does not contain any data.;NOR=Vedlegget inneholder ikke data.;SVE=Bilagan inneh†ller inte n†gra data.';

    LOCAL PROCEDURE FindDataExchType@7(IncomingDocumentAttachment@1000 : Record 133) : Code[20];
    VAR
      DataExch@1005 : Record 1220;
      DataExchangeType@1004 : Record 1213;
      DataExchDef@1003 : Record 1222;
      IntermediateDataImport@1002 : Record 1214;
      BestDataExchCode@1007 : Code[20];
      BestDataExchValue@1006 : Integer;
    BEGIN
      IF DataExchangeType.FINDSET THEN
        REPEAT
          IF DataExchDefUsesIntermediate(DataExchangeType."Data Exch. Def. Code") THEN BEGIN
            DataExchDef.GET(DataExchangeType."Data Exch. Def. Code");
            CreateDataExch(DataExch,DataExchDef,IncomingDocumentAttachment);
            // Create Intermediate table records for each Data Exchange Type
            IF TryCreateIntermediate(DataExch,DataExchDef) THEN BEGIN
              IntermediateDataImport.SETRANGE("Data Exch. No.",DataExch."Entry No.");

              // Update best result if this one is better
              IF IntermediateDataImport.COUNT > BestDataExchValue THEN BEGIN
                BestDataExchCode := DataExchDef.Code;
                BestDataExchValue := IntermediateDataImport.COUNT;
              END;

              IntermediateDataImport.DELETEALL(TRUE); // cleanup
            END;
            DataExch.DELETE(TRUE); // cleanup
          END;
        UNTIL DataExchangeType.NEXT = 0;

      EXIT(BestDataExchCode);
    END;

    LOCAL PROCEDURE CreateDataExch@2(VAR DataExch@1000 : Record 1220;DataExchDef@1002 : Record 1222;IncomingDocumentAttachment@1001 : Record 133);
    VAR
      Stream@1003 : InStream;
    BEGIN
      IncomingDocumentAttachment.Content.CREATEINSTREAM(Stream);

      DataExch.INIT;
      DataExch.InsertRec(IncomingDocumentAttachment.Name,Stream,DataExchDef.Code);
      DataExch.VALIDATE("Incoming Entry No.",IncomingDocumentAttachment."Incoming Document Entry No.");
      DataExch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE TryCreateIntermediate@3(DataExch@1000 : Record 1220;DataExchDef@1001 : Record 1222) : Boolean;
    BEGIN
      COMMIT;
      IF DataExchDef."Reading/Writing Codeunit" <> 0 THEN BEGIN
        IF NOT CODEUNIT.RUN(DataExchDef."Reading/Writing Codeunit",DataExch) THEN
          EXIT(FALSE);

        IF DataExchDef."Data Handling Codeunit" <> 0 THEN
          IF NOT CODEUNIT.RUN(DataExchDef."Data Handling Codeunit",DataExch) THEN
            EXIT(FALSE);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE SetResult@6(IncomingDocCode@1000 : Integer;DataExchTypeCode@1001 : Code[20]);
    VAR
      DataExchangeType@1002 : Record 1213;
      IncomingDocument@1003 : Record 130;
    BEGIN
      IF DataExchTypeCode = '' THEN
        EXIT;

      DataExchangeType.SETRANGE("Data Exch. Def. Code",DataExchTypeCode);
      DataExchangeType.FINDFIRST;

      IncomingDocument.GET(IncomingDocCode);
      IncomingDocument.VALIDATE("Data Exchange Type",DataExchangeType.Code);
      IncomingDocument.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CheckContentHasValue@4(VAR IncomingDocumentAttachment@1000 : Record 133);
    VAR
      LiveIncomingDocumentAttachment@1001 : Record 133;
    BEGIN
      // Is the data already loaded or is it in the db?
      LiveIncomingDocumentAttachment := IncomingDocumentAttachment;
      LiveIncomingDocumentAttachment.CALCFIELDS(Content);
      IF LiveIncomingDocumentAttachment.Content.HASVALUE THEN
        IncomingDocumentAttachment.CALCFIELDS(Content);

      IF NOT IncomingDocumentAttachment.Content.HASVALUE THEN
        ERROR(AttachmentEmptyErr);
    END;

    LOCAL PROCEDURE DataExchDefUsesIntermediate@1(DataExchDefCode@1000 : Code[20]) : Boolean;
    VAR
      DataExchMapping@1001 : Record 1224;
    BEGIN
      // Ensure that the data exch def uses the intermediate table so we don't just start inserting data into the db.
      DataExchMapping.SETRANGE("Data Exch. Def Code",DataExchDefCode);
      DataExchMapping.SETRANGE("Use as Intermediate Table",FALSE);
      EXIT(NOT DataExchMapping.FINDFIRST);
    END;

    BEGIN
    END.
  }
}

