OBJECT Codeunit 705 Stream Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      MemoryStream@1000 : DotNet "'mscorlib'.System.IO.MemoryStream";

    [External]
    PROCEDURE MtomStreamToXmlStream@1(MtomStream@1000 : InStream;VAR XmlStream@1001 : InStream;ContentType@1002 : Text);
    VAR
      TextEncoding@1003 : DotNet "'mscorlib'.System.Text.Encoding";
      DotNetArray@1004 : DotNet "'mscorlib'.System.Array";
      XmlDocument@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlDictionaryReader@1007 : DotNet "'System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDictionaryReader";
      XmlDictionaryReaderQuotas@1008 : DotNet "'System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDictionaryReaderQuotas";
    BEGIN
      DotNetArray := DotNetArray.CreateInstance(GETDOTNETTYPE(TextEncoding),1);
      DotNetArray.SetValue(TextEncoding.UTF8,0);
      XmlDictionaryReader := XmlDictionaryReader.CreateMtomReader(MtomStream,DotNetArray,ContentType,XmlDictionaryReaderQuotas.Max);
      XmlDictionaryReader.MoveToContent;

      XmlDocument := XmlDocument.XmlDocument;
      XmlDocument.PreserveWhitespace := TRUE;
      XmlDocument.Load(XmlDictionaryReader);
      MemoryStream := MemoryStream.MemoryStream;
      XmlDocument.Save(MemoryStream);
      MemoryStream.Position := 0;
      XmlStream := MemoryStream;
    END;

    [TryFunction]
    [External]
    PROCEDURE CreateNameValueBufferFromZipFileStream@2(Stream@1001 : InStream;VAR NameValueBufferOut@1011 : Record 823);
    VAR
      ZipArchive@1000 : DotNet "'System.IO.Compression, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Compression.ZipArchive";
      FileList@1006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.IReadOnlyList`1";
      ZipArchiveEntry@1007 : DotNet "'System.IO.Compression, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Compression.ZipArchiveEntry";
      FileStream@1005 : InStream;
      out@1004 : OutStream;
      NrFiles@1003 : Integer;
      I@1002 : Integer;
      LastId@1012 : Integer;
    BEGIN
      ZipArchive := ZipArchive.ZipArchive(Stream);
      NrFiles := ZipArchive.Entries.Count;
      FileList := ZipArchive.Entries;
      FOR I := 0 TO NrFiles - 1 DO BEGIN
        IF NameValueBufferOut.FINDLAST THEN
          LastId := NameValueBufferOut.ID;
        ZipArchiveEntry := FileList.Item(I);
        FileStream := ZipArchiveEntry.Open;
        NameValueBufferOut.ID := LastId + 1;
        NameValueBufferOut.Name := COPYSTR(ZipArchiveEntry.Name,1,250);
        NameValueBufferOut."Value BLOB".CREATEOUTSTREAM(out);
        COPYSTREAM(out,FileStream);
        NameValueBufferOut.INSERT;
      END;
    END;

    [External]
    PROCEDURE InitGzipStreamFromTempBlob@89(VAR TempBlob@1000 : Record 99008535;VAR DotNet_CompressionMode@1001 : Codeunit 3037;VAR DotNet_GzipStream@1002 : Codeunit 3036);
    VAR
      DotNet_Stream@1005 : Codeunit 3034;
      DotNetCompressionMode@1006 : DotNet "'System,Version=4.0.0.0,Culture=neutral,PublicKeyToken=b77a5c561934e089'.System.IO.Compression.CompressionMode";
      BaseInStream@1003 : InStream;
      BaseOutStream@1004 : OutStream;
    BEGIN
      DotNet_CompressionMode.GetCompressionMode(DotNetCompressionMode);

      IF DotNetCompressionMode.Equals(DotNetCompressionMode.Compress) THEN BEGIN
        CLEAR(TempBlob.Blob);
        TempBlob.Blob.CREATEOUTSTREAM(BaseOutStream);
        DotNet_Stream.FromOutStream(BaseOutStream);
      END ELSE BEGIN
        TempBlob.Blob.CREATEINSTREAM(BaseInStream);
        DotNet_Stream.FromInStream(BaseInStream);
      END;

      DotNet_GzipStream.GZipStream(DotNet_Stream,DotNet_CompressionMode);
    END;

    [External]
    PROCEDURE WriteGzipStreamToTempBlob@90(VAR DotNet_GzipStream@1000 : Codeunit 3036;VAR TempBlob@1001 : Record 99008535);
    VAR
      ResultStream@1002 : OutStream;
    BEGIN
      CLEAR(TempBlob.Blob);
      TempBlob.Blob.CREATEOUTSTREAM(ResultStream);
      DotNet_GzipStream.CopyTo(ResultStream);
    END;

    [External]
    PROCEDURE ReadGzipStreamFromTempBlob@91(VAR DotNet_GzipStream@1000 : Codeunit 3036;VAR TempBlob@1001 : Record 99008535);
    VAR
      DataStream@1002 : InStream;
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(DataStream);
      DotNet_GzipStream.CopyFrom(DataStream);
    END;

    BEGIN
    END.
  }
}

