OBJECT Codeunit 12013604 ExFlow Import Manager
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF513000,EXFFI1.02;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempExFlowSetup@1100285000 : TEMPORARY Record 12013601;
      EXF001@1100285007 : TextConst 'ENU=Check action messages and reverify;SVE=Kontrollera †tg„rdsmeddelanden och verifiera';
      EXF002@1100285019 : TextConst 'ENU=ExFlow Import Type can not be empty!;SVE=ExFlow importtyp ej definierad!';
      EXF003@1100285018 : TextConst 'ENU=File Name missing.;SVE=Filnamn saknas.';
      EXF004@1100285017 : TextConst 'ENU=File is corrupt;SVE=Filen „r korrupt';
      EXF005@1100285016 : TextConst 'ENU=File can not be found in database.;SVE=Filen finns inte i databasen.';
      EXF006@1100285015 : TextConst 'ENU=Preparation #1###################################\ReadSoft Online #2###################################\@3@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\Web Service @4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\Importing Documents @5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\Creating Documents #6###################################\Total #7###################################\Created #8###################################;SVE=F”rberedelse #1###################################\ReadSoft Online #2###################################\@3@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\Webbtj„nst @4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\Importerar dokument @5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\Skapar dokument #6###################################\Totalt #7###################################\Skapat #8###################################';
      EXF007@1100285012 : TextConst 'ENU=The invoice will be transferred, including unmodified import data. Continue?;SVE=Fakturan kommer att ”verf”ras, inklusive omodifierad import data. Forts„tta?';
      EXF008@1100285026 : TextConst 'ENU=Do you want to send the document(s) back to Readsoft Online?;SVE=Vill du skicka tillbaka dokumentet/dokumenten till Readsoft Online?';
      EXF009@1100285014 : TextConst 'ENU=No Companies to move to. Assign Company ID:s i ExFlow Setup.;SVE=Inga bolag att skicka till. Ange F”retags-IDn i ExFlowinst„llningar.';
      EXF010@1100285011 : TextConst 'ENU=Invoice transfered.;SVE=Fakturan ”verf”rd.';
      EXF011@1100285027 : TextConst 'ENU=Started...;SVE=Startad..';
      EXF012@1100285028 : TextConst 'ENU=Completed.;SVE=Slutf”rt.';
      EXF013@1100285029 : TextConst 'ENU=Completed With Errors.;SVE=Slutf”rt med fel.';
      EXF014@1100285034 : TextConst 'ENU=Sent back By ''%1'';SVE=Skickat tillbaka av ''%1''';
      EXF015@1100285035 : TextConst 'ENU=Please select a document!;SVE=V„nligen v„lj ett dokument!';
      EXF016@1100285023 : TextConst 'ENU=Selected document was not imported from Readsoft Online and can therefore not be sent back;SVE=Det markerade dokumentet „r inte importerat ifr†n Readsoft Online och kan d„rf”r inte skickas tillbaka.';
      EXF051@1100285001 : TextConst 'ENU=Please select a valid OCR Import source. (Batch/Approval setup);SVE=Ange en giltig k„lla f”r OCR import. (Journal/Attestinst„llningar)';
      EXF056@1100285003 : TextConst 'ENU=Imported in Company "%1": %2, Waiting in other companies: %3.;SVE=Importerade i f”retaget "%1": %2, V„ntande i andra f”retag: %3.';
      EXF057@1100285002 : TextConst 'ENU=Select a valid batch before importing OCR;SVE=Ange en giltig batch innan import av OCR';
      EXF115@1100285009 : TextConst 'ENU=Imported in Batch: %1, Waiting in other batches/companies: %2.;SVE=Importerade i journalen: %1, V„ntande i andra journaler/f”retag: %2.';
      EXF117@1100285005 : TextConst 'ENU=Imported in Company: %1.;SVE=Importerade i f”retaget: %1.';
      EXF150@1100285020 : TextConst 'ENU=Journal Batch %1 is not setup for importing image files.;SVE=Journal %1 „r inte inst„lld f”r att importera bildfiler';
      EXF151@1100285021 : TextConst 'ENU=Do you want to import documents for all batches?;SVE=Vill du importera dokument f”r alla journaler?';
      EXF152@1100285022 : TextConst 'ENU=Purchase Documents: \%1 out of %2 Purchase Invoices have been created automatically.;SVE=Ink”psdokument: \\ %1 av %2 fakturor har skapats automatiskt.';
      EXF155@1100285025 : TextConst 'ENU=Dataports cannot be run under the Servicetier!;SVE=Dataportar kan inte k”ras under Servicetier!';
      LastImportErrorText@1100285004 : Text;
      EXF166@1100285006 : TextConst 'ENU=Warning! One ore more import errors were found during import. Find faulty documents in journal batch view. Last error message is: %1;SVE=Varning! Ett eller flera importfel intr„ffade under dokumentimporten. Du kan hitta felaktiga dokument i importjournalvyn. Det sista felmeddelandet lyder: %1';
      LastDownloadErrorText@1100285008 : Text;
      EXF167@1100285013 : TextConst 'ENU=Warning! An error occured while downloading documents from ReadSoft Online. The last error says: %1;SVE=Varning! Ett fel intr„ffade vid nedladdning av dokument fr†n ReadSoft Online. Felmeddelandet s„ger: %1';
      Window@1100285033 : Dialog;
      UpdateControlId@1100285030 : Integer;
      CurrRec@1100285032 : Integer;
      TotalRec@1100285031 : Integer;
      EXF168@1100285010 : TextConst 'ENU=Import Status: \Documents imported into "%1": %2;SVE=Dokument importerade till %1 : %2';
      EXF169@1100285024 : TextConst 'ENU=Documents to be imported in other Journals: %1;SVE="Dokument att importera i andra journaler: %1 "';
      EXF170@1100285036 : TextConst 'ENU=Documents to be imported in other Companies: %1;SVE=Dokument att importera i andra bolag: %1';

    PROCEDURE ImportXML@1100285007(pcurrTemplate@1100285013 : Code[10];pcurrBatch@1100285014 : Code[10];HideValidationDialog@1100285005 : Boolean);
    VAR
      ExFlowSetup@1100285004 : Record 12013601;
      lrecExfJnlBatch@1100285003 : Record 12013590;
      ltxtImportPath@1100285002 : Text[250];
      XMLPortNo@1100285000 : Integer;
      DataPortImport@1100285001 : Boolean;
    BEGIN
      lrecExfJnlBatch.GET(pcurrTemplate,pcurrBatch);

      IF (lrecExfJnlBatch."Import Type" <> lrecExfJnlBatch."Import Type"::RSO) AND (lrecExfJnlBatch."Import Type" <> lrecExfJnlBatch."Import Type"::WEBService) THEN BEGIN
        GetDefaultImpDir(pcurrTemplate,pcurrBatch,ltxtImportPath);
        IF ltxtImportPath = '' THEN
          ERROR(EXF051);

        ExFlowSetup.GET;

        IF ExFlowSetup."OCR XML Port No." <> 0 THEN
          XMLPortNo := ExFlowSetup."OCR XML Port No."
        ELSE
          XMLPortNo := XMLPORT::"OCR Import (RS Online)";

        DataPortImport := FALSE;
        IF lrecExfJnlBatch."OCR Import Port No." <> 0 THEN BEGIN
          XMLPortNo := lrecExfJnlBatch."OCR Import Port No.";
          DataPortImport := lrecExfJnlBatch."OCR Import Type" = lrecExfJnlBatch."OCR Import Type"::Dataport;
        END;

        RunXMLPort(ltxtImportPath,XMLPortNo,lrecExfJnlBatch."OCR Import File Suffix",DataPortImport);
      END;

      COMMIT;
      ProcessImportHeader(ltxtImportPath);
      COMMIT;

      ImportExFlowData(pcurrTemplate,pcurrBatch,HideValidationDialog);
    END;

    PROCEDURE SetupNewImportHeader@1100285022(VAR pvarrecExfDocHead@1100285002 : Record 12013587;precExfImpHeader@1100285005 : Record 12013648;pcurrTemplate@1100285000 : Code[20];pcurrBatch@1100285001 : Code[20]);
    VAR
      ExFlowSetup@1100285003 : Record 12013601;
      lrecExfJnlBatch@1100285004 : Record 12013590;
      ExfValidatePurchDoc@1100285007 : Codeunit 12013594;
      CustomizedImportManager@1100285006 : Codeunit 12013611;
      GLSetup@1100583000 : Record 98;
      EXFContract@1100583001 : Record 12013633;
    BEGIN
      lrecExfJnlBatch.GET(pcurrTemplate,pcurrBatch);

      pvarrecExfDocHead."Bal. Account No." := lrecExfJnlBatch."Predefined Account";

      pvarrecExfDocHead."Vendor ID" := precExfImpHeader."Vendor ID";
      pvarrecExfDocHead."Currency Code (Import)" := precExfImpHeader."Currency Code";

      IF STRLEN(precExfImpHeader."Import VendorNo") <= MAXSTRLEN(pvarrecExfDocHead."Vendor No. (Import)") THEN
        pvarrecExfDocHead."Vendor No. (Import)" := precExfImpHeader."Import VendorNo";

      ExFlowSetup.GET;

      // Amounts
      pvarrecExfDocHead."Document Amount Including VAT" := ABS(precExfImpHeader."Document Amount Including VAT");

      IF NOT ExFlowSetup."Set VAT to Zero at OCR Import" THEN
        pvarrecExfDocHead."Document Amount VAT" := ABS(precExfImpHeader."Document Amount VAT")
      ELSE
        pvarrecExfDocHead."Document Amount VAT" := 0;

      pvarrecExfDocHead."Document Amount" := pvarrecExfDocHead."Document Amount Including VAT" -
                                             pvarrecExfDocHead."Document Amount VAT";

      // Dates
      pvarrecExfDocHead."Posting Date" := precExfImpHeader."Posting Date";
      pvarrecExfDocHead."Document Date" := precExfImpHeader."Posting Date";
      pvarrecExfDocHead."Due Date" := precExfImpHeader."Due Date";

      IF (pvarrecExfDocHead."Due Date" = 0D) AND (precExfImpHeader.DueDays <> 0) THEN
        pvarrecExfDocHead."Due Date" := ExfValidatePurchDoc.CalcIntDate(pvarrecExfDocHead."Document Date",precExfImpHeader.DueDays);
      pvarrecExfDocHead."Admin Comment" := precExfImpHeader.Message;
      pvarrecExfDocHead."Due Days (Import)" := precExfImpHeader.DueDays;
      pvarrecExfDocHead."Posting Date (Import)" := precExfImpHeader."Posting Date";
      pvarrecExfDocHead."Due Date (Import)" := precExfImpHeader."Due Date";

      IF ExFlowSetup."Automatic Pre. Reg. of Inwards" THEN
         pvarrecExfDocHead."Pre Posting" := pvarrecExfDocHead."Pre Posting"::"Pre Post";

      IF ExFlowSetup."Set Posting Date To (OCR)" = ExFlowSetup."Set Posting Date To (OCR)"::"Work Date" THEN
        pvarrecExfDocHead."Posting Date" := WORKDATE;

      IF (ExFlowSetup."Set Posting Date To (OCR)" = ExFlowSetup."Set Posting Date To (OCR)"::"Work Date when blank") AND
         (pvarrecExfDocHead."Posting Date" = 0D) THEN
        pvarrecExfDocHead."Posting Date" := WORKDATE;

      IF ExFlowSetup."Set Document Date To" = ExFlowSetup."Set Document Date To"::"Posting Date" THEN
        pvarrecExfDocHead."Document Date" := pvarrecExfDocHead."Posting Date";

      IF (ExFlowSetup."Set Posting Date To (OCR)" = ExFlowSetup."Set Posting Date To (OCR)"::"Work Date when blank") AND
         (pvarrecExfDocHead."Document Date" = 0D) THEN
        pvarrecExfDocHead."Document Date" := WORKDATE;

      //4PSFI_EXFFI1.01+
      GLSetup.GET;
      IF GLSetup."Finnish localization active" THEN BEGIN

      // EXFFI - ExFlow FI Fields
      pvarrecExfDocHead."Invoice Message" := precExfImpHeader."Invoice Message";
      pvarrecExfDocHead."Invoice Message 2" := precExfImpHeader."Invoice Message 2";
      pvarrecExfDocHead."Vendor Contract No" := precExfImpHeader."Agreement No.";
      // EXFFI - ExFlow FI Fiels

        //-EXFFI1.02 Check Contracts based on Imported Vendors contract No
        IF pvarrecExfDocHead."Vendor Contract No" <> '' THEN
          BEGIN
            EXFContract.SETFILTER(EXFContract."Vendor No.",pvarrecExfDocHead."Buy-from Vendor No.");
            EXFContract.SETFILTER(EXFContract."External Contract No.",pvarrecExfDocHead."Vendor Contract No");
            IF EXFContract.FINDFIRST THEN
              pvarrecExfDocHead.VALIDATE(pvarrecExfDocHead."Contract No.",EXFContract."Contract No.");
          END;
        //-EXFFI1.02

      END;
      //4PSFI_EXFFI1.01-

      pvarrecExfDocHead."First Approver" := precExfImpHeader."First Approver";
      pvarrecExfDocHead."PO Matched Document" := precExfImpHeader."PO Matched Document";
      pvarrecExfDocHead."Vendor Document No. 2" := precExfImpHeader."Vendor Document No. 2";
      pvarrecExfDocHead."Dimension 1 (Import)" := COPYSTR(precExfImpHeader."Dimension 1",1,
                                                          MAXSTRLEN(pvarrecExfDocHead."Dimension 1 (Import)"));
      pvarrecExfDocHead."Dimension 2 (Import)" := COPYSTR(precExfImpHeader."Dimension 2",1,
                                                          MAXSTRLEN(pvarrecExfDocHead."Dimension 2 (Import)"));
      pvarrecExfDocHead."Misc Amount 1" := precExfImpHeader."Misc Amount 1";
      pvarrecExfDocHead."Misc Amount 2" := precExfImpHeader."Misc Amount 2";
      pvarrecExfDocHead."Order No. (Import)" := COPYSTR(precExfImpHeader."Order No.",1,MAXSTRLEN(pvarrecExfDocHead."Order No. (Import)"));
      pvarrecExfDocHead.Reference := COPYSTR(precExfImpHeader.Reference,1,MAXSTRLEN(pvarrecExfDocHead.Reference));
      pvarrecExfDocHead."Image File Name" := precExfImpHeader."Image File Name";
      pvarrecExfDocHead."Image Buffer ID" := precExfImpHeader."Image Buffer ID";
      pvarrecExfDocHead."Buy-from Vendor Name" := COPYSTR(EXF001,1,MAXSTRLEN(pvarrecExfDocHead."Buy-from Vendor Name"));
      pvarrecExfDocHead."VAT calculated from" := pvarrecExfDocHead."VAT calculated from"::"Gross Amount";
      pvarrecExfDocHead."PO Matched Document" := precExfImpHeader."PO Matched Document";
      pvarrecExfDocHead."Job No. (Import)" := COPYSTR(precExfImpHeader."Job No.",1,MAXSTRLEN(pvarrecExfDocHead."Job No. (Import)"));
      pvarrecExfDocHead."Posting Description" := precExfImpHeader."Posting Description";
      pvarrecExfDocHead."Pay to Account (Import)" := COPYSTR(precExfImpHeader.PaytoAccount,1,MAXSTRLEN(pvarrecExfDocHead."Pay to Account (Import)"));

      pvarrecExfDocHead."RO Entry No." := precExfImpHeader."RO Entry No.";

      CustomizedImportManager.SetupNewImportHeader(pvarrecExfDocHead,precExfImpHeader);
    END;

    PROCEDURE SetupNewImportLine@1100285004(precExfDocHead@1100285002 : Record 12013587;VAR pvarrecExfDocLine@1100285005 : Record 12013588;VAR TempLineNo@1100285000 : Integer;precExfImpLine@1100285001 : Record 12013649);
    VAR
      ExFlowSetup@1100285003 : Record 12013601;
      CustomizedImportManager@1100285004 : Codeunit 12013611;
    BEGIN
      pvarrecExfDocLine."Inbound Document No." := precExfDocHead."Inbound Document No.";
      pvarrecExfDocLine."Line No." := TempLineNo;
      TempLineNo := TempLineNo + 10000;

      pvarrecExfDocLine."Document Type" := precExfDocHead."Document Type";

      pvarrecExfDocLine."OCR Imported Line" := TRUE;
      pvarrecExfDocLine."OCR Line No." := precExfImpLine."Line No.";
      pvarrecExfDocLine."Vendor Item No." := COPYSTR(precExfImpLine."Vendor Item No.",1,MAXSTRLEN(pvarrecExfDocLine."Vendor Item No."));

      pvarrecExfDocLine."Original No. (Matching)" := GetNo(precExfImpLine,MAXSTRLEN(pvarrecExfDocLine."Original No. (Matching)"));
      pvarrecExfDocLine."Original No. (Import)" := COPYSTR(pvarrecExfDocLine."Original No. (Matching)",1,
                                                          MAXSTRLEN(pvarrecExfDocLine."Original No. (Import)"));

      pvarrecExfDocLine."Order No. (Import)" := COPYSTR(precExfImpLine."Order No.",1,MAXSTRLEN(pvarrecExfDocLine."Order No. (Import)"));
      pvarrecExfDocLine."Check Order Line (OCR)" := pvarrecExfDocLine."Order No. (Import)" <> '';
      pvarrecExfDocLine."Line Amount (Import)" := precExfImpLine."Line Amount";
      pvarrecExfDocLine."Direct Unit Cost (Import)" := CalcDirectUnitCost(precExfImpLine);
      pvarrecExfDocLine."Description (Import)" := COPYSTR(precExfImpLine.Description,1,
                                                         MAXSTRLEN(pvarrecExfDocLine."Description (Import)"));
      pvarrecExfDocLine."Quantity (Import)" := precExfImpLine.Quantity;
      pvarrecExfDocLine."Line Discount % (Import)" := CalcLineDisc(precExfImpLine);
      pvarrecExfDocLine."Unit of Measure (Import)" := COPYSTR(precExfImpLine."Unit of Measure",1,
                                                              MAXSTRLEN(pvarrecExfDocLine."Unit of Measure (Import)"));
      pvarrecExfDocLine."Job No. (Import)" := COPYSTR(precExfImpLine."Job No.",1,MAXSTRLEN(pvarrecExfDocLine."Job No. (Import)"));
      pvarrecExfDocLine.Description := EXF001;

      // Outstanding Quantity (Order) represents the imported quantity which can not be assigned to a ReciptLine.
      ExFlowSetup.GET;
      IF (ExFlowSetup."Order Applies-to" <> ExFlowSetup."Order Applies-to"::"Order not used") AND
         (pvarrecExfDocLine."Order No. (Import)" <> '')THEN
        pvarrecExfDocLine."Outstanding Quantity (Order)" := pvarrecExfDocLine."Quantity (Import)";

      pvarrecExfDocLine."OCR Line is Text Only" := LineIsText(precExfImpLine);
      pvarrecExfDocLine."Dimension 1 (Import)" := COPYSTR(precExfImpLine."Dimension 1",1,
                                                          MAXSTRLEN(pvarrecExfDocLine."Dimension 1 (Import)"));
      pvarrecExfDocLine."Dimension 2 (Import)" := COPYSTR(precExfImpLine."Dimension 2",1,
                                                          MAXSTRLEN(pvarrecExfDocLine."Dimension 2 (Import)"));

      CustomizedImportManager.SetupNewImportLine(precExfDocHead,pvarrecExfDocLine,precExfImpLine);
    END;

    PROCEDURE Verify@1100285021(pcurrTemplate@1100285004 : Code[10];pcurrBatch@1100285005 : Code[10];InbndDocNo@1100285001 : Integer;HideWindow@1100285002 : Boolean);
    VAR
      lrecExvPurchHead@1100285003 : Record 12013587;
      VerifyImportJournal@1100285000 : Report 12013589;
    BEGIN
      lrecExvPurchHead.RESET;
      IF InbndDocNo <> 0 THEN
        lrecExvPurchHead.SETRANGE("Inbound Document No.",InbndDocNo);
      lrecExvPurchHead.SETRANGE("Journal Template Name",pcurrTemplate);
      lrecExvPurchHead.SETRANGE("Journal Batch Name",pcurrBatch);
      CLEAR(VerifyImportJournal);
      VerifyImportJournal.SetHideWindow(HideWindow);
      VerifyImportJournal.SETTABLEVIEW(lrecExvPurchHead);
      VerifyImportJournal.RUNMODAL();
    END;

    PROCEDURE GetDefaultImpDir@1100285003(pcurrTemplate@1100285000 : Code[10];pcurrBatch@1100285001 : Code[10];VAR pvarTxtPath@1100285002 : Text[250]);
    VAR
      ExFlowSetup@1100285004 : Record 12013601;
      lrecExfJnlBatch@1100285003 : Record 12013590;
    BEGIN
      ExFlowSetup.GET;

      IF NOT lrecExfJnlBatch.GET(pcurrTemplate,pcurrBatch) THEN
        ERROR(EXF057);

      IF lrecExfJnlBatch."OCR Import Folder" <> '' THEN
        pvarTxtPath := lrecExfJnlBatch."OCR Import Folder"
      ELSE IF ExFlowSetup."Path to New OCR-files" <> '' THEN
        pvarTxtPath := ExFlowSetup."Path to New OCR-files"
      ELSE IF NOT ExFlowSetup."Readsoft Online integration" THEN
        ERROR(EXF051);
    END;

    PROCEDURE GetNo@1100285002(precExfImpLine@1100285000 : Record 12013649;MaxStrLen@1100285001 : Integer) : Code[20];
    BEGIN
      IF precExfImpLine."Vendor Item No." <> '' THEN
        EXIT(COPYSTR(precExfImpLine."Vendor Item No.",1,MaxStrLen))
      ELSE
        EXIT(COPYSTR(precExfImpLine."Original No.",1,MaxStrLen));
    END;

    PROCEDURE LineIsBlank@1100285000(lrecExfImpLine@1100285000 : Record 12013649) : Boolean;
    BEGIN
      WITH lrecExfImpLine DO BEGIN
        IF lrecExfImpLine."Vendor Item No." <> '' THEN
          EXIT(FALSE);

        IF lrecExfImpLine."Original No." <> '' THEN
          EXIT(FALSE);

        IF lrecExfImpLine."Order No." <> '' THEN
          EXIT(FALSE);

        IF Quantity <> 0 THEN
          EXIT(FALSE);

        IF "Direct Unit Cost" <> 0 THEN
          EXIT(FALSE);

        IF Description <> '' THEN
          EXIT(FALSE);

        IF "Line Amount" <> 0 THEN
          EXIT(FALSE);

        IF lrecExfImpLine."Job No." <> '' THEN
          EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE LineIsText@1100285001(lrecExfImpLine@1100285000 : Record 12013649) : Boolean;
    BEGIN
      WITH lrecExfImpLine DO BEGIN
        IF Quantity <> 0 THEN
          EXIT(FALSE);

        IF "Direct Unit Cost" <> 0 THEN
          EXIT(FALSE);

        IF "Line Amount" <> 0 THEN
          EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ImportExFlowData@1100285005(pcurrTemplate@1100285013 : Code[10];pcurrBatch@1100285014 : Code[10];HideValidationDialog@1100285016 : Boolean);
    VAR
      ExFlowSetup@1100285005 : Record 12013601;
      lrecExfImpHeader@1100285000 : Record 12013648;
      lrecExfImpLine@1100285001 : Record 12013649;
      lrecExfImpHeader2@1100285002 : Record 12013648;
      lrecExfDocLine@1100285003 : Record 12013588;
      lrecExFImpAtt@1100285017 : Record 12013652;
      lrecExFImportAttachment@1100285004 : Record 12013592;
      lrecExfPurchDocHead@1100285006 : Record 12013587;
      lrecExfJnlBatch@1100285011 : Record 12013590;
      NoSeriesMgt@1100285007 : Codeunit 396;
      SeriesBatchNo@1100285012 : Code[20];
      TempLineNo@1100285015 : Integer;
      NoOfCompImport@1100285009 : Integer;
      Filter@1100285010 : Text;
    BEGIN
      IF NOT GUIALLOWED THEN
        HideValidationDialog := TRUE;

      lrecExfJnlBatch.GET(pcurrTemplate,pcurrBatch);
      ExFlowSetup.GET;
      lrecExfImpHeader.RESET;
      lrecExfImpHeader.LOCKTABLE;
      lrecExfImpHeader.SETRANGE(Processed,TRUE);
      lrecExfImpHeader.SETRANGE(Errors,FALSE);

      IF ExFlowSetup."Company-ID" <> '' THEN BEGIN
        Filter := UPPERCASE(ExFlowSetup."Company-ID");
        lrecExfImpHeader.SETFILTER("Company-ID",'%1',Filter);
      END;

      Filter := UPPERCASE(GetUserFilter(lrecExfJnlBatch));
      IF Filter <> '' THEN
        lrecExfImpHeader.SETFILTER("Scan User ID",Filter);

      Filter := UPPERCASE(GetFolderFilter(lrecExfJnlBatch));
      IF Filter <> '' THEN
        lrecExfImpHeader.SETFILTER("Source Import Folder",Filter);

      IF lrecExfJnlBatch."Only PO Matched Documents" THEN
        lrecExfImpHeader.SETRANGE("PO Matched Document", TRUE)
      ELSE IF POBatchExist THEN
        lrecExfImpHeader.SETRANGE("PO Matched Document", FALSE);

      IF lrecExfImpHeader.FINDSET(TRUE) THEN BEGIN
        IF ExFlowSetup."Batch No. is Import Date" THEN
          SeriesBatchNo := FORMAT(TODAY)
        ELSE IF (ExFlowSetup."Batch Import Nos." <> '') THEN
          SeriesBatchNo := NoSeriesMgt.GetNextNo(ExFlowSetup."Batch Import Nos.",TODAY,TRUE);

        REPEAT
          lrecExfPurchDocHead.INIT;
          lrecExfPurchDocHead."Inbound Document No." := 0;
          lrecExfPurchDocHead."Journal Template Name" := pcurrTemplate;
          lrecExfPurchDocHead."Journal Batch Name" := pcurrBatch;
          lrecExfPurchDocHead."ExFlow Document Type" := lrecExfImpHeader."Exflow Document Type";
          lrecExfPurchDocHead."Vendor Document No." := lrecExfImpHeader."Vendor Invoice No.";

          CASE lrecExfImpHeader."Exflow Document Type" OF
            lrecExfImpHeader."Exflow Document Type"::Invoice:
              lrecExfPurchDocHead."Document Type" := lrecExfPurchDocHead."Document Type"::Invoice;
            lrecExfImpHeader."Exflow Document Type"::"Credit Memo":
              lrecExfPurchDocHead."Document Type" := lrecExfPurchDocHead."Document Type"::"Credit Memo"
            ELSE
              lrecExfPurchDocHead."Document Type" := lrecExfPurchDocHead."Document Type"::Invoice;
          END;

          lrecExfPurchDocHead."ExFlow Entry Type" := lrecExfPurchDocHead."ExFlow Entry Type"::"OCR Import";
          IF lrecExfImpHeader."Transfer ExFlow Entry Type" <> 0 THEN BEGIN
            lrecExfPurchDocHead."ExFlow Entry Type" := lrecExfImpHeader."Transfer ExFlow Entry Type";
            lrecExfPurchDocHead."Image Buffer ID" := lrecExfImpHeader."Image Buffer ID";
          END;

          lrecExfPurchDocHead.INSERT(TRUE);

          SetupNewImportHeader(lrecExfPurchDocHead,lrecExfImpHeader,pcurrTemplate,pcurrBatch);
          lrecExfPurchDocHead.MODIFY(TRUE);

          IF ExFlowSetup."Ignore OCR Lines" <> ExFlowSetup."Ignore OCR Lines"::Always THEN BEGIN
            TempLineNo := 10000;
            lrecExfImpLine.RESET;
            lrecExfImpLine.SETRANGE("Import Document No.", lrecExfImpHeader."Import Document No.");
            IF lrecExfImpLine.FINDSET THEN
              REPEAT
                IF NOT LineIsBlank(lrecExfImpLine) THEN BEGIN
                  lrecExfDocLine.INIT;
                  SetupNewImportLine(lrecExfPurchDocHead,lrecExfDocLine,TempLineNo,lrecExfImpLine);
                  lrecExfDocLine.INSERT(TRUE);
                END;
              UNTIL lrecExfImpLine.NEXT = 0;
          END;

          lrecExFImpAtt.RESET;
          lrecExFImpAtt.SETRANGE("Import Document No.", lrecExfImpHeader."Import Document No.");
          IF lrecExFImpAtt.FINDSET THEN BEGIN
            lrecExFImportAttachment.RESET;
            lrecExFImportAttachment.SETRANGE("Inbound Document No.", lrecExfPurchDocHead."Inbound Document No.");
            IF lrecExFImportAttachment.FINDFIRST THEN
              TempLineNo := lrecExFImportAttachment."Line No." + 10000
            ELSE
              TempLineNo := 10000;

            REPEAT
              IF lrecExFImpAtt."Attached File" <> '' THEN BEGIN
                lrecExFImportAttachment.INIT;
                lrecExFImportAttachment.TRANSFERFIELDS(lrecExFImpAtt);
                lrecExFImportAttachment."Inbound Document No." := lrecExfPurchDocHead."Inbound Document No.";
                lrecExFImportAttachment."Line No." := TempLineNo;
                lrecExFImportAttachment.INSERT;
                TempLineNo := TempLineNo + 10000;
              END;
            UNTIL lrecExFImpAtt.NEXT = 0;
          END;

          lrecExfImpHeader2 := lrecExfImpHeader;
          lrecExfPurchDocHead."Import Document No." := CopyImportedHeader(lrecExfImpHeader2,SeriesBatchNo);
          lrecExfPurchDocHead.MODIFY;
          lrecExfImpHeader2.DELETE(FALSE);

          lrecExfImpLine.RESET;
          lrecExfImpLine.SETRANGE("Import Document No.", lrecExfImpHeader."Import Document No.");
          lrecExfImpLine.DELETEALL(FALSE);

          lrecExFImpAtt.RESET;
          lrecExFImpAtt.SETRANGE("Import Document No.", lrecExfImpHeader."Import Document No.");
          lrecExFImpAtt.DELETEALL(FALSE);

          NoOfCompImport := NoOfCompImport + 1;
          COMMIT;
          IF lrecExfJnlBatch."Verify at import" = lrecExfJnlBatch."Verify at import"::NewDocs THEN
            Verify(pcurrTemplate,pcurrBatch,lrecExfPurchDocHead."Inbound Document No.",TRUE);
          lrecExfImpHeader.LOCKTABLE;
        UNTIL lrecExfImpHeader.NEXT = 0;
      END;

      COMMIT;

      IF lrecExfJnlBatch."Verify at import" = lrecExfJnlBatch."Verify at import"::Always THEN
        Verify(pcurrTemplate,pcurrBatch,0,FALSE);

      lrecExfImpHeader.RESET;
      IF NOT HideValidationDialog THEN BEGIN
        IF lrecExfJnlBatch."User ID" <> '' THEN
          MESSAGE(EXF115, NoOfCompImport, lrecExfImpHeader.COUNT)
        ELSE
          MESSAGE(EXF056, NoOfCompImport, lrecExfImpHeader.COUNT);
      END;
    END;

    PROCEDURE TransferInvoice@1100285006(VAR pvarrecExfDocHead@1100285002 : Record 12013587);
    VAR
      lrecExfPurchImpHeader@1100285007 : Record 12013648;
      FromExBlob@1100285000 : Record 12013591;
      ExImpAttachment@1100285006 : Record 12013652;
      ExImportAttachment@1100285005 : Record 12013592;
      ToExBlob@1100285003 : Record 12013591;
      ExfImpPurchImpHead@1100285008 : Record 12013650;
      ExCompanyTransForm@1100285004 : Page 12013629;
      OcrNumber@1100285001 : Integer;
    BEGIN
      IF NOT CONFIRM(EXF007) THEN
        EXIT;

      CreateTempExFlowSetup;
      TempExFlowSetup.SETFILTER("Company-ID",'<>%1','');
      IF NOT TempExFlowSetup.FINDFIRST THEN
        ERROR(EXF009);

      CLEAR(ExCompanyTransForm);
      ExCompanyTransForm.SetData(TempExFlowSetup);
      ExCompanyTransForm.LOOKUPMODE(TRUE);
      IF NOT (ExCompanyTransForm.RUNMODAL = ACTION::LookupOK) THEN
        EXIT;
      ExCompanyTransForm.GETRECORD(TempExFlowSetup);

      pvarrecExfDocHead.LOCKTABLE;
      IF pvarrecExfDocHead.FIND('-') THEN
        REPEAT
          IF pvarrecExfDocHead."ExFlow Entry Type" = 0 THEN
            ERROR(EXF002);

          IF pvarrecExfDocHead."Image File Name" = '' THEN
            ERROR(EXF003);

          IF pvarrecExfDocHead."Image Buffer ID" = 0 THEN
            ERROR(EXF004);

          IF NOT FromExBlob.GET(pvarrecExfDocHead."Image Buffer ID") THEN
            ERROR(EXF005);

          lrecExfPurchImpHeader.RESET;
          lrecExfPurchImpHeader.LOCKTABLE;
          IF lrecExfPurchImpHeader.FINDLAST THEN
            OcrNumber := lrecExfPurchImpHeader."Import Document No." + 1
          ELSE
            OcrNumber := 1;

          lrecExfPurchImpHeader.INIT;
          IF ExfImpPurchImpHead.GET(pvarrecExfDocHead."Import Document No.") THEN BEGIN
            ExfImpPurchImpHead.CALCFIELDS("XML File");
            lrecExfPurchImpHeader.TRANSFERFIELDS(ExfImpPurchImpHead);
            TransferImportLine(pvarrecExfDocHead, OcrNumber);
          END;

          lrecExfPurchImpHeader."Import Document No." := OcrNumber;
          lrecExfPurchImpHeader.Processed := TRUE;
          lrecExfPurchImpHeader."Transfer ExFlow Entry Type" := pvarrecExfDocHead."ExFlow Entry Type";
          lrecExfPurchImpHeader."Company-ID" := TempExFlowSetup."Company-ID";

          // MoveBlob
          FromExBlob.CALCFIELDS(BLOB);
          ToExBlob.INIT;
          ToExBlob.BLOB := FromExBlob.BLOB;
          ToExBlob."File Extension" := FromExBlob."File Extension";
          ToExBlob.INSERT(TRUE);
          lrecExfPurchImpHeader."Image Buffer ID" := ToExBlob."No.";
          lrecExfPurchImpHeader."Image File Name" := pvarrecExfDocHead."Image File Name";
          lrecExfPurchImpHeader.INSERT;

          ExImportAttachment.RESET;
          ExImportAttachment.SETRANGE("Inbound Document No.", pvarrecExfDocHead."Inbound Document No.");
          IF ExImportAttachment.FINDSET THEN BEGIN
            REPEAT
              ExImpAttachment.INIT;
              ExImpAttachment.TRANSFERFIELDS(ExImportAttachment);
              ExImpAttachment."Import Document No." := lrecExfPurchImpHeader."Import Document No.";
              ExImpAttachment.INSERT;
            UNTIL ExImportAttachment.NEXT = 0;

            ExImportAttachment.DELETEALL(TRUE);
          END;

          pvarrecExfDocHead.DELETE(TRUE);
        UNTIL pvarrecExfDocHead.NEXT = 0;

      MESSAGE(EXF010);
    END;

    PROCEDURE TransferToOtherJnl@1100285025(VAR pvarrecExfDocHead@1100285000 : Record 12013587);
    VAR
      ExFlowJnlBatches@1100285001 : Page 12013596;
      ExFlowJnlBatch@1100285002 : Record 12013590;
      pvarrecExfDocHead2@1100285004 : Record 12013587;
    BEGIN
      CLEAR(ExFlowJnlBatches);
      ExFlowJnlBatches.LOOKUPMODE := TRUE;
      IF ACTION::LookupOK = ExFlowJnlBatches.RUNMODAL THEN BEGIN
        ExFlowJnlBatches.GETRECORD(ExFlowJnlBatch);

        IF pvarrecExfDocHead.FIND('-') THEN
          REPEAT
            pvarrecExfDocHead2 := pvarrecExfDocHead;
            pvarrecExfDocHead2."Journal Batch Name" := ExFlowJnlBatch.Name;
            pvarrecExfDocHead2.MODIFY;
          UNTIL pvarrecExfDocHead.NEXT = 0;
      END;
    END;

    PROCEDURE TransferImportLine@1100285008(precExfDocHead@1100285000 : Record 12013587;OcrNumber@1100285002 : Integer);
    VAR
      recExfImpLine@1100285001 : Record 12013649;
      recExfImpPurchImpLine@1100285003 : Record 12013651;
    BEGIN
      recExfImpPurchImpLine.SETRANGE("Import Document No.", precExfDocHead."Import Document No.");
      IF recExfImpPurchImpLine.FINDSET THEN
        REPEAT
          recExfImpLine.INIT;
          recExfImpLine.TRANSFERFIELDS(recExfImpPurchImpLine);
          recExfImpLine."Import Document No." := OcrNumber;
          recExfImpLine.INSERT;
        UNTIL recExfImpPurchImpLine.NEXT = 0;
    END;

    PROCEDURE CopyImportedHeader@1100285009(VAR precExfImpHeader@1100285000 : Record 12013648;SeriesBatchNo@1100285004 : Code[20]) : Integer;
    VAR
      ExfImpPurchImpArchivedHead@1100285001 : Record 12013650;
      ExfImpPurchImpArchivedHead2@1100285002 : Record 12013650;
      OcrNumber@1100285003 : Integer;
    BEGIN
      ExfImpPurchImpArchivedHead2.RESET;
      ExfImpPurchImpArchivedHead2.LOCKTABLE;
      IF ExfImpPurchImpArchivedHead2.FINDLAST THEN
        OcrNumber := ExfImpPurchImpArchivedHead2."Import Document No." + 1
      ELSE
        OcrNumber := 1;

      ExfImpPurchImpArchivedHead.INIT;
      precExfImpHeader.CALCFIELDS("XML File");
      ExfImpPurchImpArchivedHead.TRANSFERFIELDS(precExfImpHeader);
      ExfImpPurchImpArchivedHead."Import Document No." := OcrNumber;
      IF ExfImpPurchImpArchivedHead."Batch No." = '' THEN
        ExfImpPurchImpArchivedHead."Batch No." := SeriesBatchNo;

      ExfImpPurchImpArchivedHead.INSERT;
      CopyImportedLine(precExfImpHeader,OcrNumber);
      EXIT(OcrNumber);
    END;

    PROCEDURE CopyImportedLine@1100285011(precExfImpHeader@1100285000 : Record 12013648;OcrNumber@1100285002 : Integer);
    VAR
      recExfImpLine@1100285001 : Record 12013649;
      recExfImpPurchImpArchivedLine@1100285003 : Record 12013651;
    BEGIN
      recExfImpLine.SETRANGE("Import Document No.", precExfImpHeader."Import Document No.");
      IF recExfImpLine.FINDSET THEN
        REPEAT
          recExfImpPurchImpArchivedLine.INIT;
          recExfImpPurchImpArchivedLine.TRANSFERFIELDS(recExfImpLine);
          recExfImpPurchImpArchivedLine."Import Document No." := OcrNumber;
          recExfImpPurchImpArchivedLine.INSERT;
        UNTIL recExfImpLine.NEXT = 0;
    END;

    PROCEDURE CalcLineDisc@1100285010(precExfImpLine@1100285000 : Record 12013649) : Decimal;
    BEGIN
      IF precExfImpLine."Line Discount %" <> 0 THEN
        EXIT(precExfImpLine."Line Discount %");

      IF precExfImpLine.LineDiscountAmt = 0 THEN
        EXIT(0);

      // Line Disc% cannot be calculated
      IF (precExfImpLine."Line Amount" = 0) AND (precExfImpLine."Direct Unit Cost" = 0) THEN
        EXIT(0);

      IF precExfImpLine."Line Amount" = 0 THEN
        EXIT(100 * precExfImpLine.LineDiscountAmt / precExfImpLine."Direct Unit Cost");

      IF precExfImpLine.Quantity = 0 THEN
        precExfImpLine.Quantity := 1;

      IF (precExfImpLine."Direct Unit Cost" = 0) THEN BEGIN
        precExfImpLine."Direct Unit Cost" := (precExfImpLine."Line Amount"/precExfImpLine.Quantity) - precExfImpLine.LineDiscountAmt;
        EXIT(100 * precExfImpLine.LineDiscountAmt / precExfImpLine."Direct Unit Cost");
      END;

      EXIT(100 * precExfImpLine.LineDiscountAmt / precExfImpLine."Direct Unit Cost");
    END;

    PROCEDURE ImportImage@1000000000(pcurrTemplate@1100285006 : Code[10];pcurrBatch@1100285005 : Code[10];HideValidationDialog@1100285002 : Boolean);
    VAR
      TempFileMgtBuffer@1100285008 : TEMPORARY Record 12013593;
      ExFPurchDocHeader@1100285004 : Record 12013587;
      lcduVerifyDoc@1100285000 : Codeunit 12013594;
      ExflowFileMgt@1100285003 : Codeunit 12013602;
      FilePath@1100285009 : Text[1024];
      FileName@1100285010 : Text[1024];
      TempImportNo@1100285001 : Integer;
      ImageImpFolder@1100285007 : Text[250];
    BEGIN
      ImageImpFolder := ImageImportFolder(pcurrTemplate,pcurrBatch);
      IF ImageImpFolder = '' THEN
        EXIT;

      ExflowFileMgt.CreateImportFileTable(ImageImpFolder,TempFileMgtBuffer);

      IF TempFileMgtBuffer.FINDSET THEN BEGIN
        REPEAT
          IF TempFileMgtBuffer."Is a File" AND (STRLEN(TempFileMgtBuffer.Path) > 3) AND (TempFileMgtBuffer."Size (Kb)" > 0) THEN
            IF (COPYSTR(UPPERCASE(TempFileMgtBuffer.Path),STRLEN(TempFileMgtBuffer.Path)-2,3) = 'TIF') OR
               (COPYSTR(UPPERCASE(TempFileMgtBuffer.Path),STRLEN(TempFileMgtBuffer.Path)-2,3) = 'HTM') OR
               (COPYSTR(UPPERCASE(TempFileMgtBuffer.Path),STRLEN(TempFileMgtBuffer.Path)-2,3) = 'PDF') THEN
              BEGIN
                ExFPurchDocHeader.INIT;
                ExFPurchDocHeader."Journal Template Name" := pcurrTemplate;
                ExFPurchDocHeader."Journal Batch Name" := pcurrBatch;
                ExFPurchDocHeader.SetupNewLine(ExFPurchDocHeader);
                FilePath := ExflowFileMgt.Path(TempFileMgtBuffer.Path);
                FileName := COPYSTR(TempFileMgtBuffer.Path,STRLEN(FilePath)+1);
                lcduVerifyDoc.UploadImage(ExFPurchDocHeader,FilePath, FileName);

                ExFPurchDocHeader.INSERT(TRUE);

                TempImportNo += 1;
              END;
        UNTIL TempFileMgtBuffer.NEXT = 0;
      END;

      IF NOT HideValidationDialog THEN
        MESSAGE(EXF117, TempImportNo)
    END;

    PROCEDURE ImageImportFolder@1100285013(pcurrTemplate@1100285002 : Code[10];pcurrBatch@1100285001 : Code[10]) : Text[250];
    VAR
      ExFlowSetup@1100285003 : Record 12013601;
      lrecExfJnlBatch@1100285000 : Record 12013590;
    BEGIN
      ExFlowSetup.GET;
      lrecExfJnlBatch.GET(pcurrTemplate,pcurrBatch);

      IF lrecExfJnlBatch."Image Import Folder" <> '' THEN
        EXIT(lrecExfJnlBatch."Image Import Folder")
      ELSE
        EXIT(ExFlowSetup."Path to New Invoices");
    END;

    PROCEDURE ImportDocuments@1100285012(TemplateLoc@1100285002 : Code[10];BatchLoc@1100285001 : Code[10];SilentMode@1100285012 : Boolean);
    VAR
      ExfJnlBatchLoc@1100285000 : Record 12013590;
      ExFPurchDocHeaderLoc@1100285005 : Record 12013587;
      ExFImpHeaderLoc@1100285011 : Record 12013648;
      BatchCreateInvLoc@1100285004 : Report 12013587;
      ROMgt@1100285013 : Codeunit 12057140;
      CounterOK@1100285007 : Integer;
      CounterTotal@1100285006 : Integer;
      TempCounterOK@1100285009 : Integer;
      TempCounterTotal@1100285008 : Integer;
      TotNoOfCompImport@1100285010 : Integer;
      BatchMode@1100285003 : Boolean;
      Info@1100285016 : Text;
      ExFlowSetup@1100285014 : Record 12013601;
    BEGIN
      CLEAR(LastDownloadErrorText);
      CLEAR(LastImportErrorText);

      BatchMode := (TemplateLoc = '') AND (BatchLoc = '');

      ExfJnlBatchLoc.RESET;
      IF NOT BatchMode THEN BEGIN
        ExfJnlBatchLoc.SETRANGE("Journal Template Name",TemplateLoc);
        ExfJnlBatchLoc.SETRANGE(Name,BatchLoc);
        ExfJnlBatchLoc.SETRANGE("Import Type", ExfJnlBatchLoc."Import Type"::None);
        IF ExfJnlBatchLoc.FINDFIRST THEN
          ERROR(EXF150,BatchLoc);
      END ELSE
        IF NOT SilentMode AND GUIALLOWED THEN
          IF NOT CONFIRM(EXF151,FALSE) THEN
            EXIT;

      Window.OPEN(EXF006);
      UpdateControlId := 1;
      //Preparation
      UpdateDialog(EXF011,0);
      PreImportFunctions; // contains commit
      UpdateDialog(EXF012,0);

      // RSO download
      UpdateControlId += 1;
      UpdateDialog(EXF011,0);
      ExfJnlBatchLoc.SETRANGE("Import Type",ExfJnlBatchLoc."Import Type"::RSO);
      IF ExfJnlBatchLoc.FINDFIRST THEN BEGIN
        CLEARLASTERROR;
        IF NOT ROMgt.RUN THEN BEGIN
          LastDownloadErrorText := GETLASTERRORTEXT;
          ExfJnlBatchLoc."RSO download error" := TRUE;
          ExfJnlBatchLoc.MODIFY;
        END ELSE IF ExfJnlBatchLoc."RSO download error" THEN BEGIN
          ExfJnlBatchLoc."RSO download error" := FALSE;
          ExfJnlBatchLoc.MODIFY;
        END;
        UpdateControlId += 1;
        ImportDocsFromROTable;
        UpdateControlId -= 1;
      END;
      IF ExfJnlBatchLoc."RSO download error" THEN
        UpdateDialog(EXF013,0)
      ELSE
        UpdateDialog(EXF012,0);

      // Web Service
      UpdateControlId += 2;
      ExfJnlBatchLoc.SETRANGE("Import Type",ExfJnlBatchLoc."Import Type"::WEBService);
      IF ExfJnlBatchLoc.FINDFIRST THEN
        ImportDocsFromROTable;

      TotNoOfCompImport := ExFPurchDocHeaderLoc.COUNT;

      //Import
      UpdateControlId += 1;
      CurrRec := 0;
      ExfJnlBatchLoc.SETRANGE("Import Type");
      TotalRec := ExfJnlBatchLoc.COUNT;
      IF ExfJnlBatchLoc.FINDSET THEN
        REPEAT
          CurrRec += 1;
          ImportforBatch(ExfJnlBatchLoc,TRUE);
          UpdateDialog('',ROUND(CurrRec / TotalRec * 10000,1));
        UNTIL ExfJnlBatchLoc.NEXT = 0;

      TotNoOfCompImport := ExFPurchDocHeaderLoc.COUNT - TotNoOfCompImport;

      //Create Documents
      UpdateControlId += 1;
      UpdateDialog(EXF011,0);
      ExfJnlBatchLoc.RESET;
      ExfJnlBatchLoc.SETRANGE("Automatically Create Documents",TRUE);
      IF ExfJnlBatchLoc.FINDSET THEN
        REPEAT
          COMMIT;
          ExFPurchDocHeaderLoc.RESET;
          ExFPurchDocHeaderLoc.SETRANGE("Journal Template Name", ExfJnlBatchLoc."Journal Template Name");
          ExFPurchDocHeaderLoc.SETRANGE("Journal Batch Name", ExfJnlBatchLoc.Name);

          CLEAR(BatchCreateInvLoc);
          BatchCreateInvLoc.USEREQUESTPAGE := FALSE;
          BatchCreateInvLoc.SETTABLEVIEW(ExFPurchDocHeaderLoc);
          BatchCreateInvLoc.SetAutomaticMode(TRUE);
          BatchCreateInvLoc.SilentMode;
          BatchCreateInvLoc.RUNMODAL;

          BatchCreateInvLoc.GetCounters(TempCounterTotal,TempCounterOK);

          CounterOK := CounterOK + TempCounterOK;
          CounterTotal := CounterTotal + TempCounterTotal;
          UpdateControlId += 1;
          UpdateDialog(FORMAT(CounterTotal),0);
          UpdateControlId += 1;
          UpdateDialog(FORMAT(CounterOK),0);
          UpdateControlId -= 2;
        UNTIL ExfJnlBatchLoc.NEXT = 0;

      UpdateDialog(EXF012,0);

      IF GUIALLOWED THEN
        Window.CLOSE;

      GetImportMessage(Info, CounterOK, CounterTotal, TotNoOfCompImport, BatchMode);

      IF Info <> '' THEN BEGIN
        Info := COPYSTR(Info,1,STRLEN(Info));
        MESSAGE(Info);
      END;
    END;

    PROCEDURE ImportforBatch@1100285014(lrecExfJnlBatch@1100285000 : Record 12013590;HideValidationDialog@1100285002 : Boolean);
    BEGIN
      CASE lrecExfJnlBatch."Import Type" OF
        lrecExfJnlBatch."Import Type"::"Image File":
          BEGIN
            // ImportImage inserts directly into purch doc header without going to import header first
            ImportImage(lrecExfJnlBatch."Journal Template Name",lrecExfJnlBatch.Name,HideValidationDialog);
          END;
        lrecExfJnlBatch."Import Type"::"XML File":
          ImportXML(lrecExfJnlBatch."Journal Template Name",lrecExfJnlBatch.Name,HideValidationDialog);
        lrecExfJnlBatch."Import Type"::RSO:
          ImportXML(lrecExfJnlBatch."Journal Template Name",lrecExfJnlBatch.Name,HideValidationDialog);
        lrecExfJnlBatch."Import Type"::WEBService:
          ImportXML(lrecExfJnlBatch."Journal Template Name",lrecExfJnlBatch.Name,HideValidationDialog);
      END;
    END;

    PROCEDURE GetExFlowDocType@1100285015(CredText@1100285000 : Text[30]) : Integer;
    BEGIN
      CredText := UPPERCASE(DELCHR(CredText));
      IF CredText IN ['1','YES','TRUE'] THEN
        EXIT(2);

      EXIT(1); // Invoice is default option
    END;

    PROCEDURE ProcessImportHeader@1100285019(ImportPath@1100285002 : Text[250]);
    VAR
      ExPurchImpHeader@1100285000 : Record 12013648;
      cuProcessImpHeader@1100285001 : Codeunit 12057143;
    BEGIN
      ExPurchImpHeader.RESET;
      ExPurchImpHeader.SETRANGE(Processed, FALSE);
      ExPurchImpHeader.SETRANGE(Errors,FALSE);
      IF ExPurchImpHeader.FINDSET(TRUE,TRUE) THEN
        REPEAT
          CLEARLASTERROR;
          CLEAR(cuProcessImpHeader);
          cuProcessImpHeader.SetImpPath(ImportPath);
          ExPurchImpHeader.LOCKTABLE;
          COMMIT;
          IF NOT cuProcessImpHeader.RUN(ExPurchImpHeader) THEN BEGIN
            ExPurchImpHeader.Errors := TRUE;
            LastImportErrorText := GETLASTERRORTEXT;
          END ELSE BEGIN
            ExPurchImpHeader.Processed := TRUE;
            ExPurchImpHeader.Errors := FALSE;
          END;
          ExPurchImpHeader.MODIFY;
        UNTIL ExPurchImpHeader.NEXT = 0;
    END;

    PROCEDURE RunXMLPort@1100285024(OCRpath@1100285000 : Text[250];XMLPortNo@1100285001 : Integer;ImportSuffix@1100285011 : Text[10];DataportImport@1100285008 : Boolean);
    VAR
      TempFileMgtBuffer@1100285012 : TEMPORARY Record 12013593;
      ExflowFileMgt@1100285010 : Codeunit 12013602;
      ExFlow@1100285009 : Codeunit 12013601;
      ImportDataMgt@1100285013 : Codeunit 12013622;
      ToFolder@1100285006 : Text[1024];
      TempFileName@1100285005 : Text[1024];
      TempFilePath@1100285004 : Text[1024];
      UploadFolder@1100285014 : Text[1024];
      UploadFileName@1100285015 : Text[1024];
    BEGIN
      ToFolder := ExFlow.DayMap(WORKDATE);

      ExflowFileMgt.CreateImportFileTable(OCRpath,TempFileMgtBuffer);

      IF (ImportSuffix = '') AND NOT DataportImport THEN
        ImportSuffix := 'XML';

      ImportSuffix := DELCHR(ImportSuffix,'=','.');

      TempFileMgtBuffer.RESET;
      IF NOT TempFileMgtBuffer.FINDSET THEN
        EXIT;

      REPEAT
        IF TempFileMgtBuffer."Is a File" AND (STRLEN(TempFileMgtBuffer.Path) > 3) AND (TempFileMgtBuffer."Size (Kb)" > 0) THEN
          IF (ImportSuffix = '') OR
              (UPPERCASE(COPYSTR(TempFileMgtBuffer.Path,STRLEN(TempFileMgtBuffer.Path)-2,3)) = UPPERCASE(ImportSuffix))
          THEN BEGIN
            // Copy to UPLOAD Folder
            TempFilePath := ExflowFileMgt.Path(TempFileMgtBuffer.Path);
            TempFileName := COPYSTR(TempFileMgtBuffer.Path,STRLEN(TempFilePath)+1);
            UploadFolder := TempFilePath+'UPLOAD\';
            UploadFileName := TempFileName+'UPLOAD';
            ExflowFileMgt.Copy(TempFileName,UploadFileName,TempFilePath,UploadFolder,TempFilePath);

            // Set file information
            ImportDataMgt.SetImpFileName(TempFileName);
            ImportDataMgt.SetImpFilePath(TempFilePath);
            ImportDataMgt.SetUploadFilePathAndName(UploadFolder+UploadFileName);
            ImportDataMgt.SetToFolder(ToFolder);

            IF NOT DataportImport THEN
              ExflowFileMgt.ImportXML(XMLPortNo,TempFilePath,TempFileName,ToFolder)
            ELSE
              // Dataports can only be executed from classic client
              ERROR(EXF155);

            ImportDataMgt.SetImpFileName('');
            ImportDataMgt.SetImpFilePath('');
            ImportDataMgt.SetUploadFilePathAndName('');
            ImportDataMgt.SetToFolder('');

            ExflowFileMgt.Delete(OCRpath,TempFileName);
            ExflowFileMgt.Delete(UploadFolder,UploadFileName);
            COMMIT;
          END;
      UNTIL TempFileMgtBuffer.NEXT = 0;
    END;

    PROCEDURE TransformDate@1100285018(InDate@1100285000 : Text[30]) OutDate : Date;
    VAR
      ExFlowSetup@1100285006 : Record 12013601;
      Year@1100285001 : Integer;
      Month@1100285002 : Integer;
      Day@1100285003 : Integer;
      DateOK@1100285004 : Boolean;
      LeapYear@1100285005 : Boolean;
    BEGIN
      ExFlowSetup.GET;

      OutDate := 0D;

      InDate := DELCHR(InDate,'=',',.-\/');

      CASE ExFlowSetup."Date Format (OCR Import)" OF
        ExFlowSetup."Date Format (OCR Import)"::YYYYMMDD:
          BEGIN
            IF STRLEN(InDate) = 6 THEN BEGIN // YYMMDD
              DateOK := TRUE;
              IF NOT EVALUATE(Year, '20' + COPYSTR(InDate,1,2)) THEN
                DateOK := FALSE;
              IF NOT EVALUATE(Month, COPYSTR(InDate,3,2)) THEN
                DateOK := FALSE;
              IF NOT EVALUATE(Day, COPYSTR(InDate,5,2)) THEN
                DateOK := FALSE;
            END ELSE IF STRLEN(InDate) = 8 THEN BEGIN // YYYYMMDD
              DateOK := TRUE;
              IF NOT EVALUATE(Year, COPYSTR(InDate,1,4)) THEN
                DateOK := FALSE;
              IF NOT EVALUATE(Month, COPYSTR(InDate,5,2)) THEN
                DateOK := FALSE;
              IF NOT EVALUATE(Day, COPYSTR(InDate,7,2)) THEN
                DateOK := FALSE;
            END;
          END;
        ExFlowSetup."Date Format (OCR Import)"::DDMMYYYY:
          BEGIN
            IF STRLEN(InDate) = 6 THEN BEGIN // DDMMYY
              DateOK := TRUE;
              IF NOT EVALUATE(Day, COPYSTR(InDate,1,2)) THEN
                DateOK := FALSE;
              IF NOT EVALUATE(Month, COPYSTR(InDate,3,2)) THEN
                DateOK := FALSE;
              IF NOT EVALUATE(Year, '20' + COPYSTR(InDate,5,2)) THEN
                DateOK := FALSE;
            END ELSE IF STRLEN(InDate) = 8 THEN BEGIN // DDMMYYYY
              DateOK := TRUE;
              IF NOT EVALUATE(Day, COPYSTR(InDate,1,2)) THEN
                DateOK := FALSE;
              IF NOT EVALUATE(Month, COPYSTR(InDate,3,2)) THEN
                DateOK := FALSE;
              IF NOT EVALUATE(Year, COPYSTR(InDate,5,4)) THEN
                DateOK := FALSE;
            END;
          END;
        ExFlowSetup."Date Format (OCR Import)"::MMDDYYYY:
          BEGIN
            IF STRLEN(InDate) = 6 THEN BEGIN // MMDDYY
              DateOK := TRUE;
              IF NOT EVALUATE(Month, COPYSTR(InDate,1,2)) THEN
                DateOK := FALSE;
              IF NOT EVALUATE(Day, COPYSTR(InDate,3,2)) THEN
                DateOK := FALSE;
              IF NOT EVALUATE(Year, '20' + COPYSTR(InDate,5,2)) THEN
                DateOK := FALSE;
            END ELSE IF STRLEN(InDate) = 8 THEN BEGIN // MMDDYYYY
              DateOK := TRUE;
              IF NOT EVALUATE(Month, COPYSTR(InDate,1,2)) THEN
                DateOK := FALSE;
              IF NOT EVALUATE(Day, COPYSTR(InDate,3,2)) THEN
                DateOK := FALSE;
              IF NOT EVALUATE(Year, COPYSTR(InDate,5,4)) THEN
                DateOK := FALSE;
            END;
          END;
      END;

      IF DateOK THEN
        IF NOT (Year IN [1950..9999]) THEN
          DateOK := FALSE;
      IF DateOK THEN
        IF NOT (Month IN [1..12]) THEN
          DateOK := FALSE;
      IF DateOK THEN
        CASE Month OF
          1,3,5,7,8,10,12: DateOK := Day IN [1..31];
          4,6,9,11: DateOK := Day IN [1..30];
          2:
            BEGIN
              LeapYear := FALSE;
              IF (Year MOD 4) = 0 THEN
                IF (Year MOD 100) <> 0 THEN
                  LeapYear := TRUE
                ELSE IF (Year MOD 400) = 0 THEN
                  LeapYear := TRUE;

              IF LeapYear THEN
                DateOK := Day IN [1..29]
              ELSE
                DateOK := Day IN [1..28];
            END;
        END;

      IF DateOK THEN
        OutDate := DMY2DATE(Day,Month,Year);
    END;

    PROCEDURE TransformNumber@1100285017(InAmount@1100285000 : Text[100];VAR OutAmount@1100285001 : Decimal);
    VAR
      TempPos@1100285003 : Integer;
      NumberofDec@1100285002 : Integer;
      i@1100285004 : Integer;
    BEGIN
      InAmount := DELCHR(InAmount); // remove blank spaces

      IF InAmount = '' THEN BEGIN
        OutAmount := 0;
        EXIT;
      END;

      TempPos := STRPOS(InAmount,','); // Try to find the decimal character
      IF TempPos = 0 THEN
        TempPos := STRPOS(InAmount,'.');

      IF TempPos = 0 THEN
        EVALUATE(OutAmount, InAmount)
      ELSE BEGIN
        NumberofDec := STRLEN(InAmount) - TempPos;
        InAmount := DELCHR(InAmount,'=',',.');

        IF NumberofDec = 0 THEN
          EVALUATE(OutAmount,InAmount) //delib err
        ELSE
          WHILE (NOT EVALUATE(OutAmount,InAmount)) AND (NumberofDec > 0) DO BEGIN
            InAmount := DELSTR(InAmount,STRLEN(InAmount));
            NumberofDec := NumberofDec -1;
            IF NumberofDec = 0 THEN
              EVALUATE(OutAmount,InAmount); //delib err
          END;

        FOR i:=1 TO NumberofDec DO
          OutAmount := OutAmount / 10;
      END;
    END;

    PROCEDURE TransformInteger@1100285016(Text@1100285000 : Text[100];VAR OutInt@1100285001 : Integer);
    VAR
      TempPos@1100285002 : Integer;
    BEGIN
      TempPos := STRPOS(Text,','); // Try to strip decimals
      IF TempPos = 0 THEN
        TempPos := STRPOS(Text,'.');

      IF TempPos > 0 THEN
        Text := COPYSTR(Text,1,TempPos);

      Text := DELCHR(Text,'=',DELCHR(Text,'=','0123456789'));
      IF STRLEN(Text) > 0 THEN
        IF EVALUATE(OutInt,Text) THEN;
    END;

    PROCEDURE PreImportFunctions@1100285026();
    VAR
      ROMgt@1100285000 : Codeunit 12057140;
      ExWatchMgt@1100285001 : Codeunit 12013685;
      ExFlowSetup@1100285002 : Record 12013601;
    BEGIN
      ROMgt.SilentMode;
      ROMgt.UpdateMasterData(FALSE);
      COMMIT;
      ExFlowSetup.GET;
      ExWatchMgt.ImportList(ExFlowSetup,TRUE);
      COMMIT;
    END;

    PROCEDURE CalcDirectUnitCost@1100285027(precExfImpLine@1100285000 : Record 12013649) : Decimal;
    BEGIN
      IF (precExfImpLine."Line Amount" <> 0) AND (precExfImpLine."Direct Unit Cost" = 0) THEN BEGIN
        IF precExfImpLine.Quantity <> 0 THEN
          EXIT(precExfImpLine."Line Amount"/precExfImpLine.Quantity)
        ELSE
          EXIT(precExfImpLine."Line Amount");
      END;

      EXIT(precExfImpLine."Direct Unit Cost");
    END;

    PROCEDURE FormatConversionHeader@1100285028(VAR ExPurchImpHeader@1100285000 : Record 12013648);
    VAR
      OCRFormatConv@1100285001 : Record 12013614;
      RecRef@1100285002 : RecordRef;
      FldRef@1100285003 : FieldRef;
      TempValue@1100285004 : Text[1024];
      i@1100285005 : Integer;
      ValueStrLen@1100285007 : Integer;
      NoMatch@1100285006 : Boolean;
      ConvDone@1100285008 : Boolean;
    BEGIN
      OCRFormatConv.RESET;
      OCRFormatConv.SETRANGE(Table, OCRFormatConv.Table::Header);
      OCRFormatConv.SETFILTER("Field No.", '<>%1', 0);

      CreateTempExFlowSetup;
      IF ExPurchImpHeader."Company-ID" <> '' THEN BEGIN
        TempExFlowSetup.SETRANGE("Company-ID", ExPurchImpHeader."Company-ID");
        IF TempExFlowSetup.FINDFIRST THEN BEGIN
          OCRFormatConv.RESET;
          OCRFormatConv.CHANGECOMPANY(TempExFlowSetup."Temp Company Name");
          OCRFormatConv.SETRANGE(Table, OCRFormatConv.Table::Header);
          OCRFormatConv.SETFILTER("Field No.", '<>%1', 0);

          IF NOT OCRFormatConv.FINDSET THEN
            EXIT;
        END;
      END;

      IF NOT OCRFormatConv.FINDSET THEN
        EXIT;

      ConvDone := FALSE;

      REPEAT
        RecRef.GETTABLE(ExPurchImpHeader);
        FldRef := RecRef.FIELD(OCRFormatConv."Field No.");
        TempValue := FldRef.VALUE;
        ValueStrLen := STRLEN(TempValue);
        IF STRLEN(OCRFormatConv."In Format") = ValueStrLen THEN BEGIN
          NoMatch := FALSE;
          i := 1;

          REPEAT
            NoMatch := TestMatch(OCRFormatConv."In Format",TempValue,i);
            i := i + 1;
          UNTIL NoMatch OR (i > ValueStrLen);

          IF NOT NoMatch THEN BEGIN
            FormatConvertValue(OCRFormatConv,TempValue);

            IF FORMAT(FldRef.VALUE) <> TempValue THEN BEGIN
              FldRef.VALUE := TempValue;
              RecRef.MODIFY;

              ConvDone := TRUE;
            END;
          END;
        END;
      UNTIL OCRFormatConv.NEXT = 0;

      IF ConvDone THEN BEGIN
        ExPurchImpHeader.GET(ExPurchImpHeader."Import Document No.");
        ExPurchImpHeader."Format Converted" := TRUE;
        ExPurchImpHeader.MODIFY;
      END;
    END;

    PROCEDURE FormatConversionLine@1100285031(VAR ExPurchImpHeader@1100285009 : Record 12013648;VAR ExPurchImpLine@1100285000 : Record 12013649);
    VAR
      OCRFormatConv@1100285001 : Record 12013614;
      RecRef@1100285002 : RecordRef;
      FldRef@1100285003 : FieldRef;
      TempValue@1100285004 : Text[1024];
      i@1100285005 : Integer;
      ValueStrLen@1100285007 : Integer;
      NoMatch@1100285006 : Boolean;
      ConvDone@1100285008 : Boolean;
    BEGIN
      OCRFormatConv.RESET;
      OCRFormatConv.SETRANGE(Table, OCRFormatConv.Table::Line);
      OCRFormatConv.SETFILTER("Field No.", '<>%1', 0);

      CreateTempExFlowSetup;
      IF ExPurchImpHeader."Company-ID" <> '' THEN BEGIN
        TempExFlowSetup.SETRANGE("Company-ID", ExPurchImpHeader."Company-ID");
        IF TempExFlowSetup.FINDFIRST THEN BEGIN
          OCRFormatConv.RESET;
          OCRFormatConv.CHANGECOMPANY(TempExFlowSetup."Temp Company Name");
          OCRFormatConv.SETRANGE(Table, OCRFormatConv.Table::Line);
          OCRFormatConv.SETFILTER("Field No.", '<>%1', 0);

          IF NOT OCRFormatConv.FINDSET THEN
            EXIT;
        END;
      END;

      IF NOT OCRFormatConv.FINDSET THEN
        EXIT;

      ConvDone := FALSE;

      REPEAT
        RecRef.GETTABLE(ExPurchImpLine);
        FldRef := RecRef.FIELD(OCRFormatConv."Field No.");
        TempValue := FldRef.VALUE;
        ValueStrLen := STRLEN(TempValue);
        IF STRLEN(OCRFormatConv."In Format") = ValueStrLen THEN BEGIN
          NoMatch := FALSE;
          i := 1;

          REPEAT
            NoMatch := TestMatch(OCRFormatConv."In Format",TempValue,i);
            i := i + 1;
          UNTIL NoMatch OR (i > ValueStrLen);

          IF NOT NoMatch THEN BEGIN
            FormatConvertValue(OCRFormatConv,TempValue);

            IF FORMAT(FldRef.VALUE) <> TempValue THEN BEGIN
              FldRef.VALUE := TempValue;
              RecRef.MODIFY;

              ConvDone := TRUE;
            END;
          END;
        END;
      UNTIL OCRFormatConv.NEXT = 0;

      IF ConvDone THEN BEGIN
        ExPurchImpHeader.GET(ExPurchImpHeader."Import Document No.");
        ExPurchImpHeader."Format Converted" := TRUE;
        ExPurchImpHeader.MODIFY;

        ExPurchImpLine.GET(ExPurchImpLine."Import Document No.",ExPurchImpLine."Line No.");
        ExPurchImpLine."Format Converted" := TRUE;
        ExPurchImpLine.MODIFY;
      END;
    END;

    PROCEDURE FormatConvertValue@1100285033(OCRFormatConv@1100285001 : Record 12013614;VAR TempValue@1100285000 : Text[1024]);
    BEGIN
      IF OCRFormatConv."Out Format" = '' THEN BEGIN
        TempValue := '';
        EXIT;
      END;

      IF (OCRFormatConv."Copy from position" <> 0) AND (OCRFormatConv.Length <> 0) THEN
        TempValue := COPYSTR(TempValue,OCRFormatConv."Copy from position",OCRFormatConv.Length);
      IF OCRFormatConv."Delete Chars" <> '' THEN
        TempValue := DELCHR(TempValue,'=',OCRFormatConv."Delete Chars");
      IF OCRFormatConv."Add Prefix" <> '' THEN
        TempValue := OCRFormatConv."Add Prefix" + TempValue;
    END;

    PROCEDURE TestMatch@1100285029(InFormat@1100285000 : Text[250];TempValue@1100285001 : Text[250];i@1100285002 : Integer) NoMatch : Boolean;
    BEGIN
      CASE InFormat[i] OF
        '[':
          BEGIN
            IF NOT (TempValue[i] IN ['A'..'Z']) THEN
              NoMatch := TRUE;
          END;
        ']':
          BEGIN
            IF NOT (TempValue[i] IN ['0'..'9']) THEN
              NoMatch := TRUE;
          END;
        ELSE IF InFormat[i] <> TempValue[i] THEN
          NoMatch := TRUE;
      END;
    END;

    LOCAL PROCEDURE CreateTempExFlowSetup@1100285032();
    VAR
      Company@1100285000 : Record 2000000006;
      ExFlowSetup@1100285001 : Record 12013601;
      TempNo@1100285002 : Code[10];
    BEGIN
      TempExFlowSetup.RESET;
      IF TempExFlowSetup.FINDFIRST THEN
        EXIT;

      Company.RESET;
      Company.FINDSET;
      TempNo := '1';
      REPEAT
        ExFlowSetup.CHANGECOMPANY(Company.Name);
        IF ExFlowSetup.FINDFIRST THEN BEGIN
          TempExFlowSetup.INIT;
          TempExFlowSetup.TRANSFERFIELDS(ExFlowSetup);
          TempExFlowSetup."Primary Key" := TempNo;
          TempExFlowSetup."Temp Company Name" := Company.Name;
          TempExFlowSetup.INSERT;
          TempNo := INCSTR(TempNo);
        END;
      UNTIL Company.NEXT = 0;
    END;

    LOCAL PROCEDURE ApplyImportFolderFilter@1100285020(ExfImpHeader@1100285002 : Record 12013648;ExfJnlBatch@1100285001 : Record 12013590) SkipImport : Boolean;
    BEGIN
      IF NOT ExfJnlBatch."Use Import folder filter" THEN
        EXIT(FALSE);

      IF ExfJnlBatch."OCR Import Folder" = '' THEN
        EXIT(FALSE);

      //Transfered docs can have any source
      IF ExfImpHeader."Transfer ExFlow Entry Type" <> ExfImpHeader."Transfer ExFlow Entry Type"::" " THEN
        EXIT(FALSE);

      IF STRPOS(UPPERCASE(ExfImpHeader."Source Import Folder"),UPPERCASE(ExfJnlBatch."OCR Import Folder")) <> 0 THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE POBatchExist@1100285034() : Boolean;
    VAR
      ExfJnlBatch@1100285000 : Record 12013590;
    BEGIN
      ExfJnlBatch.RESET;
      ExfJnlBatch.SETRANGE("Only PO Matched Documents",TRUE);
      IF NOT ExfJnlBatch.ISEMPTY THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetFolderFilter@1100285030(ExfJnlBatch@1100285000 : Record 12013590) FolderFilter : Text;
    BEGIN
      IF ExfJnlBatch."Use Import folder filter" THEN BEGIN
        FolderFilter := '@' + FORMAT(ExfJnlBatch."OCR Import Folder");
        EXIT(FolderFilter);
      END;

      CLEAR(ExfJnlBatch);
      ExfJnlBatch.RESET;
      ExfJnlBatch.SETRANGE("Use Import folder filter",TRUE);
      ExfJnlBatch.SETFILTER("OCR Import Folder",'<>%1','');
      IF ExfJnlBatch.FINDSET THEN
        REPEAT
          IF FolderFilter = '' THEN
            FolderFilter := '<>@' + ExfJnlBatch."OCR Import Folder"
          ELSE
            FolderFilter := FolderFilter + '&<>@' + ExfJnlBatch."OCR Import Folder";
        UNTIL ExfJnlBatch.NEXT = 0;
    END;

    LOCAL PROCEDURE GetUserFilter@1100285039(ExfJnlBatch@1100285000 : Record 12013590) UserFilter : Text;
    BEGIN
      IF ExfJnlBatch."User ID" <> '' THEN BEGIN
        UserFilter := '@' + FORMAT(ExfJnlBatch."User ID");
        EXIT(UserFilter);
      END;

      CLEAR(ExfJnlBatch);
      ExfJnlBatch.RESET;
      ExfJnlBatch.SETFILTER("User ID",'<>%1','');
      IF ExfJnlBatch.FINDSET THEN
        REPEAT
          IF UserFilter = '' THEN
            UserFilter := '<>@' + ExfJnlBatch."User ID"
          ELSE
            UserFilter := UserFilter + '&<>@' + ExfJnlBatch."User ID";
        UNTIL ExfJnlBatch.NEXT = 0;
    END;

    LOCAL PROCEDURE ImportDocsFromROTable@1100285023();
    VAR
      RoDocument@1100285000 : Record 12057083;
      ROImportDocument@1100285001 : Codeunit 12057142;
    BEGIN
      RoDocument.RESET;
      RoDocument.SETRANGE(Status,RoDocument.Status::" ");
      RoDocument.SETRANGE(Errors,FALSE);
      TotalRec := RoDocument.COUNT;
      CurrRec := 0;
      IF RoDocument.FINDSET(TRUE,TRUE) THEN BEGIN
        REPEAT
          CurrRec += 1;
          CLEARLASTERROR;
          COMMIT;
          IF NOT ROImportDocument.RUN(RoDocument) THEN BEGIN
            RoDocument.Errors := TRUE;
            RoDocument."Error Message" := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN(RoDocument."Error Message"));
            LastImportErrorText := GETLASTERRORTEXT;
          END ELSE
            RoDocument.Status := RoDocument.Status::Imported;
          RoDocument.MODIFY;
          UpdateDialog('',ROUND(CurrRec / TotalRec * 10000,1));
        UNTIL RoDocument.NEXT = 0;
        COMMIT;
      END;
    END;

    PROCEDURE ReturnToROFromExfPurchDocHeader@1100285035(VAR lExfPurchDocHeader@1100285000 : Record 12013587;lSilentMode@1100285001 : Boolean);
    VAR
      lRODocument@1100285004 : Record 12057083;
      ROAPIMgt@1100285002 : Codeunit 12057140;
      lSessionCookie@1100285003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.Cookie";
    BEGIN
      WITH lExfPurchDocHeader DO BEGIN
        IF GETFILTERS = '' THEN BEGIN
          FILTERGROUP(2);
            IF GETFILTERS = '' THEN
              ERROR(EXF015);
          FILTERGROUP(0);
        END;
        SETFILTER("RO Entry No.", '<>0');

        IF NOT FINDSET(TRUE) THEN
          ERROR(EXF016);

        IF NOT lSilentMode THEN
          IF NOT CONFIRM(EXF008,FALSE) THEN
            EXIT;

        CLEAR(ROAPIMgt);
        ROAPIMgt.InitROApi(lSessionCookie);

        REPEAT
          IF lRODocument.GET("RO Entry No.") THEN
            IF ROAPIMgt.MarkDocumentAsRejected(lRODocument.DocumentId,lSessionCookie,STRSUBSTNO(EXF014,USERID)) THEN BEGIN
              lRODocument.DELETE;
              DELETE(TRUE);
              COMMIT;
            END;
        UNTIL NEXT = 0;

        ROAPIMgt.DisposeROApi(lSessionCookie);
      END;
    END;

    PROCEDURE ReturnToROFromRoDoc@1100285036(VAR lRODocument@1100285000 : Record 12057083;lSilentMode@1100285001 : Boolean);
    VAR
      ROAPIMgt@1100285002 : Codeunit 12057140;
      lSessionCookie@1100285003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.Cookie";
    BEGIN
      WITH lRODocument DO BEGIN
        IF GETFILTERS = '' THEN BEGIN
          FILTERGROUP(2);
          IF GETFILTERS = '' THEN
            ERROR(EXF015);
          FILTERGROUP(0);
        END;

        SETFILTER(DocumentId, '<>%1','');

        IF NOT FINDSET(TRUE) THEN
          ERROR(EXF016);

        IF NOT lSilentMode THEN
          IF NOT CONFIRM(EXF008,FALSE) THEN
            EXIT;

        CLEAR(ROAPIMgt);
        ROAPIMgt.InitROApi(lSessionCookie);

        REPEAT
          IF ROAPIMgt.MarkDocumentAsRejected(DocumentId,lSessionCookie,STRSUBSTNO(EXF014,USERID)) THEN BEGIN
            DELETE(TRUE);
            COMMIT;
          END;
        UNTIL NEXT = 0;

        ROAPIMgt.DisposeROApi(lSessionCookie);
      END;
    END;

    PROCEDURE ReturnToROFromExfPurchImpHeader@1100285037(VAR lExflowPurchImportHeader@1100285000 : Record 12013648;lSilentMode@1100285001 : Boolean);
    VAR
      lRODocument@1100285004 : Record 12057083;
      ROAPIMgt@1100285002 : Codeunit 12057140;
      lSessionCookie@1100285003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.Cookie";
    BEGIN
      WITH lExflowPurchImportHeader DO BEGIN
        SETFILTER("RO Entry No.", '<>0');

        IF NOT FINDSET(TRUE) THEN
          ERROR(EXF016);

        IF NOT lSilentMode THEN
          IF NOT CONFIRM(EXF008,FALSE) THEN
            EXIT;

        CLEAR(ROAPIMgt);
        ROAPIMgt.InitROApi(lSessionCookie);

        REPEAT
          IF lRODocument.GET("RO Entry No.") THEN
            IF ROAPIMgt.MarkDocumentAsRejected(lRODocument.DocumentId,lSessionCookie,STRSUBSTNO(EXF014,USERID)) THEN BEGIN
              DELETE(TRUE);
              COMMIT;
            END;
        UNTIL NEXT = 0;

        ROAPIMgt.DisposeROApi(lSessionCookie);
      END;
    END;

    LOCAL PROCEDURE UpdateDialog@1100285038(TextMessage@1100285001 : Text;Progress@1100285002 : Decimal);
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;

      IF TextMessage = '' THEN
        Window.UPDATE(UpdateControlId,Progress)
      ELSE
        Window.UPDATE(UpdateControlId,TextMessage);
    END;

    LOCAL PROCEDURE GetImportMessage@1100285041(VAR Info@1100285003 : Text;CounterOK@1100285006 : Integer;CounterTotal@1100285005 : Integer;TotNoOfCompImport@1100285004 : Integer;BatchMode@1100285001 : Boolean);
    VAR
      ExFlowSetup@1100285000 : Record 12013601;
      ExFImpHeaderLoc@1100285002 : Record 12013648;
    BEGIN
      ExFlowSetup.GET;

      ExFImpHeaderLoc.RESET;
      IF BatchMode THEN BEGIN
        Info += STRSUBSTNO(EXF168,COMPANYNAME,TotNoOfCompImport);

        IF  ExFImpHeaderLoc.COUNT > 0 THEN
          Info += STRSUBSTNO('\' + EXF170, ExFImpHeaderLoc.COUNT);

        IF (CounterOK <> 0) THEN
          Info += STRSUBSTNO('\\' + EXF152,CounterOK,CounterTotal);

        IF LastDownloadErrorText <> '' THEN
          Info += STRSUBSTNO('\\' + EXF167,LastDownloadErrorText);

        IF LastImportErrorText <> '' THEN
          Info += STRSUBSTNO('\\' + EXF166,LastImportErrorText);
      END ELSE BEGIN
        Info += STRSUBSTNO(EXF168, COMPANYNAME,TotNoOfCompImport);

        ExFImpHeaderLoc.SETRANGE("Company-ID", ExFlowSetup."Company-ID");
        IF ExFImpHeaderLoc.COUNT > 0 THEN
          Info += STRSUBSTNO('\' + EXF169, ExFImpHeaderLoc.COUNT);

        ExFImpHeaderLoc.RESET;
        ExFImpHeaderLoc.SETFILTER("Company-ID",'<>%1', ExFlowSetup."Company-ID");
        IF ExFImpHeaderLoc.COUNT > 0 THEN
          Info += STRSUBSTNO('\' + EXF170, ExFImpHeaderLoc.COUNT);

        IF (CounterOK <> 0) THEN
          Info += STRSUBSTNO('\\' + EXF152,CounterOK,CounterTotal);

      END;
    END;

    BEGIN
    END.
  }
}

