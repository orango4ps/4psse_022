OBJECT Report 77787 Translate from Other Project
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=TTool;
  }
  PROPERTIES
  {
    CaptionML=ENU=Translate from Other NAV Project;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF NOT OtherProject.GET(OtherProjectCode) THEN
                    ERROR(Text004);

                  IF OtherProject."Source Language ID" <> TTProject."Source Language ID" THEN
                    ERROR(Text002,OtherProject.Code, TTProject.Code);

                  IF OtherProject."Target Language ID" <> TTProject."Target Language ID" THEN
                    ERROR(Text003,OtherProject.Code, TTProject.Code);
                END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table77786;
               DataItemTableView=SORTING(Project Code,Language ID,Object ID);
               OnPreDataItem=BEGIN
                               MaxCounter := "TT NAV Caption".COUNT;
                               OpenWindow(Text000, MaxCounter);
                             END;

               OnAfterGetRecord=VAR
                                  TranslationManagement@1000 : Codeunit 77781;
                                  Translateed@1101285000 : Boolean;
                                BEGIN
                                  Counter := Counter + 1;
                                  UpdateWindow;


                                  Translateed := FALSE;

                                  CASE TranslateOn OF
                                    TranslateOn::all: BEGIN
                                      Translateed := TranslationManagement.FindMatchOtherProject("TT NAV Caption", TTProject, OtherProject, TRUE); //same object
                                      IF NOT Translateed THEN
                                        Translateed := TranslationManagement.FindMatchOtherProject("TT NAV Caption", TTProject, OtherProject, FALSE); //all objects
                                      END;
                                    TranslateOn::caption:
                                      Translateed := TranslationManagement.FindMatchOtherProject("TT NAV Caption", TTProject, OtherProject, FALSE); //all objects
                                    TranslateOn::id:
                                      Translateed := TranslationManagement.FindMatchOtherProject("TT NAV Caption", TTProject, OtherProject, TRUE); //same object
                                  END;



                                  // IF TranslateOn IN [TranslateOn::all,TranslateOn::id] THEN
                                  //  Translateed := TranslationManagement.FindMatchOtherProject("TT NAV Caption", TTProject, OtherProject, TRUE); //same object
                                  // IF (TranslateOn IN [TranslateOn::all,TranslateOn::caption]) AND (NOT Translateed) THEN
                                  //  Translateed := TranslationManagement.FindMatchOtherProject("TT NAV Caption", TTProject, OtherProject, FALSE); //all objects


                                  CASE TRUE OF
                                    //TranslationManagement.FindMatchOtherProject("TT NAV Caption", TTProject, OtherProject, TRUE), //same object
                                    //TranslationManagement.FindMatchOtherProject("TT NAV Caption", TTProject, OtherProject, FALSE): //all objects
                                    Translateed:
                                      BEGIN
                                        "TT NAV Caption".UpdateProperties;
                                        "TT NAV Caption".MODIFY(TRUE);
                                      END;
                                    ELSE BEGIN
                                      "TT NAV Caption"."Probability%" := 0;
                                      "TT NAV Caption".MODIFY;
                                    END;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1   ;    ;Container ;
                  ContainerType=ContentArea }

      { 2   ;1   ;Field     ;
                  CaptionML=ENU=Translate from Project Code;
                  SourceExpr=OtherProjectCode;
                  TableRelation="TT NAV Project" }

      { 1000000000;1;Field  ;
                  SourceExpr=TranslateOn }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      TTProject@1000 : Record 77782;
      OtherProject@1001 : Record 77782;
      Window@1007 : Dialog;
      WindowLastUpdated@1006 : Time;
      Counter@1003 : Integer;
      MaxCounter@1002 : Integer;
      Text000@1004 : TextConst 'ENU=Processing lines @3@@@@@@@@@@@@@';
      Text001@1005 : TextConst 'ENU=Line             #1###### of #2######\';
      Text002@1008 : TextConst 'ENU=Source language of project %1 must be equal to source language of project %2.';
      Text003@1009 : TextConst 'ENU=Target language of project %1 must be equal to target language of project %2.';
      OtherProjectCode@1010 : Code[20];
      Text004@1011 : TextConst 'ENU=Project Code must be filled in.';
      TranslateOn@1101285000 : 'all,id,caption';

    PROCEDURE SetTTProject@1100525004(locProject@1100525000 : Record 77782);
    BEGIN
      TTProject.GET(locProject.Code);
    END;

    PROCEDURE OpenWindow@1100525002(Txt@1100525000 : Text[80];MaxCounter2@1100525001 : Integer);
    BEGIN
      Window.OPEN(Text001 + Txt);
      Counter := 0;
      Window.UPDATE(2,MaxCounter2);
      WindowLastUpdated := TIME;
    END;

    PROCEDURE UpdateWindow@1100525003();
    BEGIN
      IF TIME - WindowLastUpdated > 300 THEN BEGIN
        Window.UPDATE(1,Counter);
        Window.UPDATE(3,ROUND(Counter / MaxCounter * 10000,1));
        WindowLastUpdated := TIME;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

