OBJECT Page 11229929 Bing Maps Location Objects
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Bing Maps Service Location and Objects;
    OnInit=BEGIN
             ServiceObjectTableIDText := FORMAT(DATABASE::"Service-Object");
             ServiceObjectTableIDInt := DATABASE::"Service-Object";
             ServiceLocationTableIDText := FORMAT(DATABASE::"Service Location");
             ServiceLocationTableIDInt := DATABASE::"Service Location";
           END;

  }
  CONTROLS
  {
    { 1100525000;;Container;
                Name=Container;
                CaptionML=[ENU=Container;
                           NOR=Container;
                           SVE=Beh†llare];
                ContainerType=ContentArea }

    { 1100525001;1;Field  ;
                Name=Map;
                CaptionML=ENU=Map;
                ControlAddIn=[Fps.Nav.Addin.BingMaps;PublicKeyToken=024bd013665211e9] }

  }
  CODE
  {
    VAR
      BingMapsHandler@1100525000 : Codeunit 11012485;
      ServiceObjectTableIDInt@1100525001 : Integer;
      Text001@1100525002 : TextConst 'ENU=Please configure Bing Maps.';
      ServiceLocationTableIDInt@1100525003 : Integer;
      ServiceObject@1100525004 : Record 11071691;
      ServiceLocation@1100525005 : Record 11012801;
      CallAddress@1100525006 : Text[255];
      CallCity@1100525007 : Text[255];
      CallPostCode@1100525008 : Text[255];
      Text002@1100525009 : TextConst 'ENU=Call Location';
      ServiceObjectTableIDText@1100525010 : Text[30];
      ServiceLocationTableIDText@1100525011 : Text[30];
      LocationCockpitCallback@1100525012 : Boolean;
      Text003@1100525013 : TextConst 'ENU=Choose';

    PROCEDURE SetServiceLocation@1100525001(record@1100525000 : Record 11012801);
    BEGIN
      ServiceLocation := record
    END;

    LOCAL PROCEDURE AddLocationPin@1100525017();
    VAR
      titleValue@1100525002 : Text;
      descriptionValue@1100525003 : Text;
      ReturnType@1100525000 : 'NAV,FSA';
    BEGIN
      titleValue := BingMapsHandler.GetValueFromField(ServiceLocation.RECORDID, ServiceLocationTableIDInt,
                      BingMapsHandler.GetFieldIDForTitle(ServiceLocationTableIDInt, ReturnType::NAV));
      descriptionValue := BingMapsHandler.BuildDescription(ServiceLocation.RECORDID, ServiceLocationTableIDInt, ReturnType::NAV);
      IF (ServiceLocation.Latitude <> '') AND (ServiceLocation.Longitude <> '') THEN
        CurrPage.Map.addPinToMapLatLng(ServiceLocation."No.", titleValue, ServiceLocationTableIDText, descriptionValue,
          '', ServiceLocation.Latitude, ServiceLocation.Longitude)
      ELSE
        CurrPage.Map.addPinToMapCode(ServiceLocation."No.", titleValue, ServiceLocationTableIDText, descriptionValue,
          '', ServiceLocation.City + ' ' + ServiceLocation.Address + ' ' + ServiceLocation."Post Code");
    END;

    LOCAL PROCEDURE AddObjectPins@1100525002();
    VAR
      titleValue@1100525001 : Text;
      descriptionValue@1100525002 : Text;
      ReturnType@1100525000 : 'NAV,FSA';
    BEGIN
      IF ServiceObject."No." <> '' THEN
        REPEAT
          titleValue := BingMapsHandler.GetValueFromField(ServiceObject.RECORDID, ServiceObjectTableIDInt,
                          BingMapsHandler.GetFieldIDForTitle(ServiceObjectTableIDInt, ReturnType::NAV));
          descriptionValue := BingMapsHandler.BuildDescription(ServiceObject.RECORDID, ServiceObjectTableIDInt, ReturnType::NAV);
          IF (ServiceObject.Latitude <> '') AND (ServiceObject.Longitude <> '') THEN
            CurrPage.Map.addPinToMapLatLng(ServiceObject."No.", titleValue, ServiceObjectTableIDText, descriptionValue,
              '', ServiceObject.Latitude, ServiceObject.Longitude);
        UNTIL ServiceObject.NEXT = 0;
    END;

    PROCEDURE SetSingleServiceObject@1100525000(ServiceObjectNo@1100525000 : Code[20]);
    BEGIN
      IF ServiceObject.GET(ServiceObjectNo) THEN;
    END;

    PROCEDURE UseRelatedServiceObjects@1100525003();
    BEGIN
      ServiceLocation.GetRelatedObjects(ServiceObject);
      IF ServiceObject.FINDSET THEN;
    END;

    LOCAL PROCEDURE AddCallLocationPin@1100525004();
    BEGIN
      CurrPage.Map.addPinToMapCode(Text002, Text002, Text002, Text002, '', CallAddress + ' ' + CallCity + ' ' + CallPostCode);
    END;

    PROCEDURE SetCallLocation@1100525005(Address@1100525000 : Text;City@1100525001 : Text;"Post Code"@1100525002 : Text);
    BEGIN
      CallAddress := Address;
      CallCity := City;
      CallPostCode := "Post Code";
    END;

    PROCEDURE SetLocationCockPitOnAction@1100525006();
    BEGIN
      LocationCockpitCallback := TRUE;
    END;

    EVENT Map@-1100525001::ControlAddInReady@20();
    VAR
      BingMapsSetup@1100525000 : Page 11127140;
    BEGIN
      IF BingMapsHandler.SetupIsDoneAndEnabled THEN
        CurrPage.Map.setApiKey(BingMapsHandler.GetApiKey(CurrPage.OBJECTID(FALSE)))
      ELSE
        BEGIN
          MESSAGE(Text001);
          BingMapsSetup.RUN;
          CurrPage.CLOSE;
        END;
    END;

    EVENT Map@-1100525001::MapLoaded@21();
    BEGIN
      CurrPage.Map.setExtraAction('Open');
      CurrPage.Map.allowActionForType('Open', ServiceObjectTableIDText);
      CurrPage.Map.allowActionForType('Open', ServiceLocationTableIDText);
      IF BingMapsHandler.DisplayAsPin(ServiceObjectTableIDInt) THEN
        CurrPage.Map.displayAsPin(ServiceObjectTableIDText);
      IF BingMapsHandler.DisplayAsPin(ServiceLocationTableIDInt) THEN
        CurrPage.Map.displayAsPin(ServiceLocationTableIDText);
      IF LocationCockpitCallback = TRUE THEN BEGIN
        CurrPage.Map.setExtraAction(Text003);
        CurrPage.Map.allowActionForType(Text003, ServiceObjectTableIDText);
      END;

      IF (CallAddress <> '') AND (CallCity <> '') AND (CallPostCode <> '') THEN
        AddCallLocationPin;

      IF ServiceLocation."No." <> '' THEN
        AddLocationPin;

      AddObjectPins;
    END;

    EVENT Map@-1100525001::PinAdded@22(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
      CurrPage.Map.setBestView;
    END;

    EVENT Map@-1100525001::AddLocationToSelection@23(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::RemoveLocationFromSelection@24(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::DirectionsReady@25(distance@1100525001 : Text;time@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::DirectionsError@26();
    BEGIN
    END;

    EVENT Map@-1100525001::LocationUpdated@27(no@1100525003 : Text;type@1100525002 : Text;lat@1100525001 : Text;lng@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::LocationAdded@28(no@1100525003 : Text;type@1100525002 : Text;lat@1100525001 : Text;lng@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::LocationRemoved@29(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::ExtraAction@30(action@1100525002 : Text;no@1100525001 : Text;type@1100525000 : Text);
    VAR
      TableIDInteger@1100525003 : Integer;
      ServiceLocationCockpit@1100525004 : Page 11126459;
    BEGIN
      IF action = 'Open' THEN BEGIN
        EVALUATE(TableIDInteger, type);
        BingMapsHandler.OpenCard(no, TableIDInteger);
      END;

      IF action = Text003 THEN BEGIN
        ServiceLocationCockpit.SETRECORD(ServiceLocation);
        ServiceLocationCockpit.SetServiceObjectNo(no);
        CurrPage.CLOSE;
        ServiceLocationCockpit.RUN;
      END;
    END;

    EVENT Map@-1100525001::ZoomLevel@31(level@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::RegisterEvent@32(no@1100528102 : Text;type@1100528101 : Text;eventname@1100528100 : Text);
    BEGIN
      BingMapsHandler.WriteToBingMapsLogUsingQuery(no, CurrPage.OBJECTID(FALSE), eventname, type);
    END;

    BEGIN
    END.
  }
}

