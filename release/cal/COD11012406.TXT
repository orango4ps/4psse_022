OBJECT Codeunit 11012406 Document Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000000003 : TextConst 'ENU=This dataitem is maximum indented.;NOR=Denne Dataartikkelen er maksimalt innrykket.;SVE=Denna dataartikel „r maximalt indragen.';
      Text002@1000000001 : TextConst 'ENU=DEFAULT;NOR=STANDARD;SVE=STANDARD';
      CRMSetup@1100485018 : Record 5079;
      gRecDocGroup@1100485020 : Record 11012400;
      gRecProspect@1199198000 : Record 5050;
      gCduWord@1100485023 : Codeunit 11012400;
      FileMgt@1100525003 : Codeunit 419;
      OperatingSystemMgt@1100409000 : Codeunit 11012364;
      Window@1000000008 : Dialog;
      Text004@1000000009 : TextConst 'ENU=#1############################;NOR=#1############################;SVE=#1############################';
      Text005@1000000010 : TextConst 'ENU=The field is a %1 field. Values can be : %2.;NOR=Feltet er av typen %1. Verdier kan v‘re: %2.;SVE=F„ltet „r av typen %1. V„rden kan vara: %2.';
      Text006@1000000017 : TextConst 'ENU=Yes, No;NOR=Ja,Nei;SVE=Ja,Nej';
      Text007@1000000019 : TextConst 'ENU=Table: %1.;NOR=Table: %1.;SVE=Tabell: %1.';
      Text008@1100525002 : TextConst 'ENU=Copy Word document?;NOR=Kopier Word-dokument?;SVE=Kopiera Word-dokument?';
      Text010@1100525000 : TextConst 'ENU=Document %1 copied to Document %2;NOR=Dokument %1 er kopiert til dokument %2;SVE=Dokument %1 har kopierats till dokument %2';
      Text013@1000000022 : TextConst 'ENU=Template;NOR=Mal;SVE=Mall';
      Text014@1000000023 : TextConst 'ENU=DataItem;NOR=Dataartikkel;SVE=Dataartikel';
      Text019@1000000029 : TextConst 'ENU=FlowField;NOR=FlowField;SVE=FlowField';
      Text020@1000000030 : TextConst 'ENU=Option;NOR=Alternativ;SVE=Alternativ';
      Text021@1210190009 : TextConst 'ENU=BLOB;NOR=Blob;SVE=BLOB';
      FieldIsPicture@1210190010 : Boolean;
      Text022@1210190017 : TextConst 'ENU=Decimal;NOR=Desimal;SVE=Decimal';
      Text023@1210190005 : TextConst 'ENU=Date;NOR=Dato;SVE=Datum';
      Text024@1210190007 : TextConst 'ENU=Integer;NOR=Heltall;SVE=Heltal';
      Text026@1210190019 : TextConst 'ENU=Boolean;NOR=Boolsk;SVE=Boolesk';
      Text025@1210190018 : TextConst 'ENU=Time;NOR=Tidspunkt;SVE=Tid';
      Text027@1100485006 : TextConst 'ENU=Text;NOR=Tekst;SVE=Ben„mning';
      Text028@1210190000 : TextConst 'ENU=DateTime;NOR=DatoTid;SVE=DatumTid';
      Text029@1100528400 : TextConst 'ENU=Media;NOR=Medium;SVE=Media';
      Text100@1210190016 : TextConst 'ENU=R;NOR=R;SVE=R';
      Text101@1210190015 : TextConst 'ENU=v;NOR=v;SVE=v';
      gPlantType@1100485004 : Code[20];
      gPlantBookDocNo@1100485005 : Code[20];
      gPlantRateRefDate@1100485003 : Date;
      gPlantBookTmpDirectory@1100485002 : Text[200];
      gPlantBookStorageURI@1100485001 : Text;
      PathTmpFiles@1100485000 : Text[200];
      Text105@1100485010 : TextConst 'ENU=No permission for document template %1;NOR=Ikke adgang til dokumentmal %1;SVE=Ingen beh”righet f”r dokumentmallen %1';
      FileName@1100485015 : Text;
      SourceDirectory@1100485016 : Text[250];
      TemporaryTemplateDirectory@1100528701 : Text;
      Text108@1199198002 : TextConst 'ENU=Can not update Word Document when document is "%1"!;NOR=Kan ikke oppdatere Word-dokument n†r dokumentet er "%1"!;SVE=Det g†r inte att uppdatera Word-dokument n„r dokumentet „r "%1"!';
      Text109@1199198003 : TextConst 'ENU=The Word Document does not exist!;NOR=Word-dokumentet finnes ikke!;SVE=Word-dokumentet finns inte!';
      IsDPTDoc@1100529402 : Boolean;
      IsPPTDoc@1100529401 : Boolean;
      IsCTBDoc@1100529400 : Boolean;
      Text131@1100528700 : TextConst 'ENU=%1 or %2 of %3 %4 should be filled.';
      Text132@1100528702 : TextConst 'ENU=Directory for Word documents can not be determined.';
      DocumentStorageTypes@1100527801 : ' ,File System on Premise,SharePoint Online,Azure File Storage,,,,,,,,PPT,DPTDUAL';
      DPTTypes@1100527800 : 'Unknown,Project,ServiceLocation';
      Text133@1100527805 : TextConst 'ENU=The main document storage is not properly configured.';
      Text134@1100527804 : TextConst 'ENU=File %1 can''t be saved.';
      Text135@1100527803 : TextConst 'ENU=File could not not be stored into the main storage.';
      Text136@1100527802 : TextConst 'ENU=File could not not be retrieved from storage.';
      Text137@1100525005 : TextConst 'ENU=Azure File Storage files cannot be edited.';
      Text138@1100525001 : TextConst 'ENU=Files on the file system on premise can only be edited in a windows client.';
      Text139@1100529600 : TextConst 'ENU=Download document %1 failed.';
      gPlantBookStorageType@1100528401 : Option;

    PROCEDURE OpenDataItemLinkForm@1000000002(DataItem@1000000002 : Record 11012140);
    VAR
      DataItemLink@1000000000 : Record 11012141;
    BEGIN
      DataItemLink.RESET;

      DataItemLink.INIT;
      DataItemLink.SETRANGE("Document Group",DataItem."Document Group");
      DataItemLink.SETRANGE(Document,DataItem.Document);
      DataItemLink.SETRANGE("Data Item Line No.",DataItem."Line No.");
      DataItemLink.SETRANGE("From Table No.",DataItem."Table No.");
      DataItemLink.SETRANGE("To Table No.",DataItem."Parent Table No.");

      DataItemLink."Document Group" := DataItem."Document Group";
      DataItemLink.Document := DataItem.Document;
      DataItemLink."Data Item Line No." := DataItem."Line No.";
      DataItemLink."From Table No." := DataItem."Table No.";

      PAGE.RUNMODAL(0,DataItemLink);
    END;

    PROCEDURE OpenDataItemFilterForm@1000000009(DataItem@1210190000 : Record 11012140);
    VAR
      DataItemFilter@1000000000 : Record 11012143;
    BEGIN
      DataItemFilter.RESET;
      DataItemFilter.SETRANGE("Document Group",DataItem."Document Group");
      DataItemFilter.SETRANGE(Document,DataItem.Document);
      DataItemFilter.SETRANGE("Data Item Line No.",DataItem."Line No.");
      DataItemFilter.SETRANGE("Table No.",DataItem."Table No.");

      DataItemFilter."Document Group" := DataItem."Document Group";
      DataItemFilter.Document := DataItem.Document;
      DataItemFilter."Data Item Line No." := DataItem."Line No.";
      DataItemFilter."Table No." := DataItem."Table No.";
      DataItemFilter.CALCFIELDS("Table Caption");

      PAGE.RUNMODAL(0,DataItemFilter);
    END;

    PROCEDURE TestFilter@1000000006(TableNo@1000000000 : Integer;FieldNo@1000000001 : Integer;VAR Text@1000000005 : Text[1024]);
    VAR
      Field@1000000004 : Record 2000000041;
      TableRef@1000000002 : RecordRef;
      FieldRef@1000000003 : FieldRef;
      Boolean@1000000006 : Boolean;
    BEGIN
      Field.GET(TableNo,FieldNo);

      CASE Field.Type OF
        Field.Type::Boolean :
          IF NOT EVALUATE(Boolean,Text) THEN
            ERROR(Text005,'Boolean',Text006);
        Field.Type::Option :
          BEGIN
            TableRef.OPEN(TableNo);
            FieldRef := TableRef.FIELD(FieldNo);
            FieldRef.SETFILTER(Text);
            TableRef.CLOSE;
          END;
      END;
    END;

    PROCEDURE OpenDocFieldsForm@1000000004(DataItem@1210190000 : Record 11012140);
    VAR
      DataItemFields@1000000001 : Record 11012142;
    BEGIN
      DataItemFields.RESET;
      DataItemFields.SETRANGE("Document Group",DataItem."Document Group");
      DataItemFields.SETRANGE(Document,DataItem.Document);
      DataItemFields.SETRANGE("Data Item Line No.",DataItem."Line No.");
      DataItemFields.SETRANGE("Table No.",DataItem."Table No.");

      DataItemFields."Document Group" := DataItem."Document Group";
      DataItemFields.Document := DataItem.Document;
      DataItemFields."Data Item Line No." := DataItem."Line No.";
      DataItemFields."Table No." := DataItem."Table No.";

      PAGE.RUNMODAL(0,DataItemFields);
    END;

    PROCEDURE FillKeyTable@1210190001(DataItem@1210190000 : Record 11012140);
    VAR
      lKeyTable@1210190001 : Record 11012144;
      lDataItemRef@1210190002 : RecordRef;
      lKeyRef@1210190005 : KeyRef;
      lFieldRef@1210190009 : FieldRef;
      lCount@1210190003 : Integer;
      lLoopCount@1210190004 : Integer;
      lLoopCount2@1210190007 : Integer;
      lFieldCount@1210190006 : Integer;
      lInsertRec@1210190008 : Boolean;
    BEGIN
      //this an ugly solution but it works:
      //each time the table is needed it is updated with captions in the correct language
      lDataItemRef.OPEN(DataItem."Table No.");

      lCount := lDataItemRef.KEYCOUNT;
      FOR lLoopCount := 1 TO lCount DO
        BEGIN
          lKeyRef := lDataItemRef.KEYINDEX(lLoopCount);
          lKeyTable.INIT;
          IF lKeyTable.GET(DataItem."Table No.",lLoopCount) THEN
            lInsertRec := FALSE
          ELSE
            lInsertRec := TRUE;

          lKeyTable."Index Fields" := '';

          lFieldCount := lKeyRef.FIELDCOUNT;
          FOR lLoopCount2 := 1 TO lFieldCount DO
            BEGIN
              lFieldRef := lKeyRef.FIELDINDEX(lLoopCount2);
              IF lLoopCount2 = 1 THEN BEGIN
                lKeyTable."Index Fields" := lFieldRef.NAME;
                lKeyTable."Index Caption" := lFieldRef.CAPTION;
              END ELSE BEGIN
                lKeyTable."Index Fields" := lKeyTable."Index Fields" + ',' + lFieldRef.NAME;
                lKeyTable."Index Caption" := lKeyTable."Index Caption"  + ',' + lFieldRef.CAPTION;
              END;
            END;

          IF lInsertRec THEN BEGIN
            lKeyTable."Table No." := DataItem."Table No.";
            lKeyTable."Index No." := lLoopCount;
            lKeyTable.INSERT
          END ELSE
            lKeyTable.MODIFY;

        END;

      lDataItemRef.CLOSE;
    END;

    PROCEDURE IncreaseIndentDataItem@1000000000(DataItem@1000000000 : Record 11012140);
    VAR
      DataItem2@1000000001 : Record 11012140;
      lDataItemLink@1210190001 : Record 11012141;
    BEGIN
      //Zoek naar dataitem op zelfde nivo, met een lager regelnummer.
      DataItem2 := DataItem;
      DataItem2.SETRANGE("Document Group",DataItem."Document Group");
      DataItem2.SETRANGE(Document,        DataItem.Document);
      DataItem2.SETFILTER(Indent, '..%1', DataItem.Indent);
      IF NOT DataItem2.FIND('<') THEN
        ERROR(Text001)
      ELSE BEGIN
        IF DataItem2.Indent <> DataItem.Indent THEN
          ERROR(Text001);
      END;

      //Pas de Parent Line aan
      DataItem."Parent Line No." := DataItem2."Line No.";
      DataItem."Parent Table No." := DataItem2."Table No.";
      DataItem.MODIFY;

      //De dataitem-links opschonen.
      lDataItemLink.SETRANGE("Document Group",DataItem."Document Group");
      lDataItemLink.SETRANGE(Document,DataItem.Document);
      lDataItemLink.SETRANGE("Data Item Line No.",DataItem."Line No.");
      lDataItemLink.DELETEALL;

      //Schuif dataitem 1 positie op
      DataItemsIndentChange(DataItem,1);
    END;

    PROCEDURE DecreaseIndentDataItem@1000000001(DataItem@1000000000 : Record 11012140);
    VAR
      DataItem2@1000000001 : Record 11012140;
      lDataItemLink@1210190001 : Record 11012141;
      lPositions@1210190000 : Integer;
    BEGIN
      //Dataitem indent mag minimaal 0 worden.
      IF DataItem.Indent < 1 THEN
        EXIT;

      //Zoek naar een dataitem waarop 'aangesloten'  kan worden.
      DataItem2 := DataItem;
      DataItem2.SETRANGE("Document Group",DataItem."Document Group");
      DataItem2.SETRANGE(Document,DataItem.Document);
      DataItem2.SETRANGE(Indent,DataItem.Indent - 2);
      IF DataItem2.FIND('<') THEN BEGIN
        lPositions := -1;
        DataItem."Parent Line No." := DataItem2."Line No.";
        DataItem."Parent Table No." := DataItem2."Table No.";
      END ELSE BEGIN
        lPositions := -1 * DataItem.Indent;
        DataItem."Parent Line No." := 0;
        DataItem."Parent Table No." := 0;
      END;
      DataItem.MODIFY;

      //DataItem Links opschonen.
      lDataItemLink.SETRANGE("Document Group",DataItem."Document Group");
      lDataItemLink.SETRANGE(Document,DataItem.Document);
      lDataItemLink.SETRANGE("Data Item Line No.",DataItem."Line No.");
      lDataItemLink.DELETEALL;

      //Schuif dataitem lPositions op
      DataItemsIndentChange(DataItem,lPositions);

      //Controle op achterliggende linkings
      DataItemsIndentCheck(DataItem);
    END;

    PROCEDURE DataItemsIndentChange@1210190002(VAR ioDataItem@1210190000 : Record 11012140;MovePos@1210190001 : Integer);
    VAR
      DataItem2@1210190002 : Record 11012140;
    BEGIN
      //Schuif dataitem MovePos posities op
      ioDataItem.Indent := ioDataItem.Indent + MovePos;
      ioDataItem.MODIFY;

      //Achterliggende gerelateerde DataItems opschuiven.
      DataItem2.SETRANGE("Document Group",ioDataItem."Document Group");
      DataItem2.SETRANGE(Document,ioDataItem.Document);
      DataItem2.SETRANGE("Parent Line No.",ioDataItem."Line No.");
      IF DataItem2.FINDSET THEN BEGIN
        REPEAT
          DataItemsIndentChange(DataItem2,MovePos);
        UNTIL DataItem2.NEXT = 0;
      END;
    END;

    PROCEDURE DataItemsIndentCheck@1210190000(iDataItem@1210190000 : Record 11012140);
    VAR
      DataItem2@1210190002 : Record 11012140;
      DataItem3@1210190003 : Record 11012140;
      lDataItemLink@1210190001 : Record 11012141;
    BEGIN
      //Achterliggende DataItems checken
      DataItem2.SETRANGE("Document Group",iDataItem."Document Group");
      DataItem2.SETRANGE(Document,iDataItem.Document);
      DataItem2.SETFILTER("Line No.", '%1..', iDataItem."Line No.");
      IF DataItem2.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          //Zoek het dataitem waarop 'aangesloten' moet worden.
          DataItem3 := DataItem2;
          DataItem3.SETRANGE("Document Group",DataItem2."Document Group");
          DataItem3.SETRANGE(Document, DataItem2.Document);
          DataItem3.SETRANGE(Indent, DataItem2.Indent - 1);
          IF DataItem3.FIND('<') THEN BEGIN
            IF DataItem2."Parent Line No."  <> DataItem3."Line No." THEN BEGIN
              DataItem2."Parent Line No."  := DataItem3."Line No.";
              DataItem2."Parent Table No." := DataItem3."Table No.";
              DataItem2.MODIFY;
              //DataItem Links opschonen.
              lDataItemLink.SETRANGE("Document Group",    DataItem2."Document Group");
              lDataItemLink.SETRANGE(Document,            DataItem2.Document);
              lDataItemLink.SETRANGE("Data Item Line No.",DataItem2."Line No.");
              lDataItemLink.DELETEALL;
            END;
          END ELSE BEGIN
            IF DataItem2."Parent Line No." <> 0 THEN BEGIN
              DataItem2."Parent Line No." := 0;
              DataItem2."Parent Table No." := 0;
              DataItem2.MODIFY;
              //DataItem Links opschonen.
              lDataItemLink.SETRANGE("Document Group",    DataItem2."Document Group");
              lDataItemLink.SETRANGE(Document,            DataItem2.Document);
              lDataItemLink.SETRANGE("Data Item Line No.",DataItem2."Line No.");
              lDataItemLink.DELETEALL;
            END;
          END;
        UNTIL DataItem2.NEXT = 0;
      END;
    END;

    PROCEDURE GetFieldNo@1000000007(TableNo@1000000001 : Integer;String@1000000002 : Text[30]) : Integer;
    VAR
      Field@1000000000 : Record 2000000041;
      Integer@1000000003 : Integer;
    BEGIN
      IF EVALUATE(Integer,String) THEN
        EXIT(Integer);

      Field.SETRANGE(TableNo,TableNo);
      Field.SETFILTER(FieldName,STRSUBSTNO('@%1*',String));
      IF Field.FINDFIRST THEN
        EXIT(Field."No.");
    END;

    PROCEDURE GenerateDocFromTemplate@1199198003(iRecDocTemplate@1100485000 : Record 11012401;iDocLinkRID@1199198000 : ARRAY [5] OF RecordID;DepartmentCode@1100528700 : Code[20];iContactNo@1199198001 : Code[20];iPerson@1199198002 : Code[20];iAction@1199198003 : Code[20];iUpdateDocument@1199198005 : Boolean);
    VAR
      DocumentLinkMgt@1199198004 : Codeunit 11012401;
    BEGIN
      GenerateDoc(iRecDocTemplate,
                  iDocLinkRID,
                  DepartmentCode,
                  DocumentLinkMgt.GetSourceLinkRID(iDocLinkRID[1]),
                  iContactNo,
                  iPerson,
                  iAction,
                  iUpdateDocument,
                  FALSE);  // From Document Properties
    END;

    PROCEDURE GenerateDocFromTemplate2@1100528709(DocumentTemplate@1100485000 : Record 11012401;DocLinkRID@1199198000 : ARRAY [5] OF RecordID;SelectedDocumentPropertiesNo@1100528400 : Code[20];DepartmentCode@1100528700 : Code[20];ContactNo@1199198001 : Code[20];Person@1199198002 : Code[20];Action@1199198003 : Code[20];UpdateDocument@1199198005 : Boolean;CopyAndUpdateDocument@1100528701 : Boolean;SaveAsWordDoc@1100527300 : Boolean);
    VAR
      DocumentLinkMgt@1199198004 : Codeunit 11012401;
    BEGIN
      GenerateDoc2(DocumentTemplate,
                   DocLinkRID,
                   DepartmentCode,
                   DocumentLinkMgt.GetSourceLinkRID(DocLinkRID[1]),
                   SelectedDocumentPropertiesNo,
                   ContactNo,
                   Person,
                   Action,
                   UpdateDocument,
                   CopyAndUpdateDocument,
                   SaveAsWordDoc);
    END;

    PROCEDURE GenerateDocFromDocProperties@1199198000(iRecDocTemplate@1199198004 : Record 11012401;iDocumentNo@1199198003 : Code[20];DocLinkRID@1100527800 : ARRAY [5] OF RecordID;iContactNo@1199198002 : Code[20];iPerson@1199198001 : Code[20];iUpdateDocument@1100525000 : Boolean;lvEdit@1100525001 : Boolean);
    BEGIN
      GenerateDoc2(iRecDocTemplate,
                   DocLinkRID,
                   '',
                   iDocumentNo,
                   '',
                   iContactNo,
                   iPerson,
                   '',
                   iUpdateDocument,
                   FALSE,
                   FALSE);
    END;

    PROCEDURE GenerateDoc@2(lRecDocTemplate@1210190001 : Record 11012401;DocLinkRID@1199198003 : ARRAY [5] OF RecordID;DepartmentCode@1100528700 : Code[20];iDocumentNo@1199198006 : Code[20];iContactNo@1199198000 : Code[20];iPersonNo@1199198004 : Code[20];iAction@1199198005 : Code[20];iUpdateDocument@1199198007 : Boolean;iFromDocProperties@1100525000 : Boolean);
    BEGIN
      GenerateDoc2(lRecDocTemplate,
                   DocLinkRID,
                   DepartmentCode,
                   iDocumentNo,
                   '',
                   iContactNo,
                   iPersonNo,
                   iAction,
                   iUpdateDocument,
                   FALSE,
                   FALSE);
    END;

    PROCEDURE ProcessDoc@15(lRecDocTemplate@1210190002 : Record 11012401;DocumentProperties@1199198000 : Record 11012746;VAR WordAutomation@1100527800 : Codeunit 11012400);
    VAR
      lDocDataItem@1210190001 : Record 11012140;
      foo@1210190000 : RecordRef;
    BEGIN
      lDocDataItem.SETRANGE("Document Group", DocumentProperties."Document Group");
      lDocDataItem.SETRANGE(Document, DocumentProperties."Document Template");

      Window.OPEN(Text004);

      LoopDocDataItems(DocumentProperties."Document Group",
                       DocumentProperties."Document Template",
                       DocumentProperties."No.",
                       0,
                       foo,
                       Text013,
                       0,
                       WordAutomation);

      Window.CLOSE;
    END;

    PROCEDURE GenerateDoc2@1100528700(lRecDocTemplate@1100528707 : Record 11012401;DocLinkRID@1100528706 : ARRAY [5] OF RecordID;DepartmentCode@1100528714 : Code[20];iDocumentNo@1100528705 : Code[20];SelectedDocumentPropertiesNo@1100528400 : Code[20];iContactNo@1100528704 : Code[20];iPersonNo@1100528703 : Code[20];iAction@1100528702 : Code[20];iUpdateDocument@1100528701 : Boolean;CopyAndUpdateDocument@1100528715 : Boolean;SaveAsWordDoc@1100527300 : Boolean);
    VAR
      DocumentProperties@1100528712 : Record 11012746;
      Job@1100528305 : Record 11072003;
      SharePointIntegration@1100528300 : Codeunit 11020210;
      DocumentPortalProject@1100525001 : Codeunit 11012948;
      WordAutomation@1100528722 : Codeunit 11012400;
      ProjectSiteMgt@1100525003 : Codeunit 11012282;
      FolderURI@1100528713 : Text;
      FileName@1100528710 : Text;
      NewVersion@1100528716 : Integer;
      WebLink@1100528302 : Text;
      IsChoice3AndSomeDocPortalDoc@1100528301 : Boolean;
      StorageType@1100527800 : Option;
      FirstRecId@1100527805 : RecordID;
      TargetFileURI@1100527806 : Text;
      MemoryStream@1100527808 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      OStream@1100527809 : OutStream;
      ServiceLocation@1100527810 : Record 11012801;
      FillPlantBookStorageURI@1100528401 : Boolean;
      UsePlantBookStorageURI@1100528402 : Boolean;
    BEGIN
      IF CopyAndUpdateDocument THEN
        iUpdateDocument := TRUE; // UpdateDocument should always be TRUE when CopyAndUpdateDocument is TRUE

      // Check if user has permission to create or update a word document.
      CheckUserPermission(lRecDocTemplate."Document Group", lRecDocTemplate."Template Code");    //**4PS01.n
      CRMSetup.GET;

      FirstRecId := DocLinkRID[1];

      IF NOT gRecProspect.GET(iContactNo) THEN
        gRecProspect.INIT;

      NewVersion := GetNewVersionNumber(lRecDocTemplate,FirstRecId,iAction);

      IF (SelectedDocumentPropertiesNo = '') AND
         (FirstRecId.TABLENO = DATABASE::"Document Properties")
      THEN
        DocumentProperties.GET(iDocumentNo)
      ELSE
        GetLastOrSelectedDocument(DocumentProperties, lRecDocTemplate, FirstRecId, iAction, SelectedDocumentPropertiesNo);

      IF (DocumentProperties."No." <> '') THEN BEGIN
        IF (DocumentProperties."Final Printed") AND (NOT CopyAndUpdateDocument) THEN
            ERROR(Text108, DocumentProperties.FIELDCAPTION("Final Printed"));
        IF iUpdateDocument THEN
          UpdateDocumentBasedOnTemplate(lRecDocTemplate, DocumentProperties,DocumentProperties."No.", DocLinkRID);
      END;


      StorageType := GetMainStorageType;
      GetStorageLocationForGeneratedDocuments(lRecDocTemplate."Document Group", lRecDocTemplate, iContactNo,StorageType,FolderURI);
      CreateStorageLocationIfNotExists(StorageType,FolderURI);

      IsChoice3AndSomeDocPortalDoc := FALSE;
      SetDPTDocPPTDocCTBDoc(DocLinkRID);
      MemoryStream:= MemoryStream.MemoryStream;
      IF (IsCTBDoc OR IsDPTDoc OR IsPPTDoc) THEN BEGIN
        IF (DocumentProperties.HasStorageURI) THEN BEGIN
          IF (NOT iUpdateDocument) THEN
            IsChoice3AndSomeDocPortalDoc := TRUE;
          CASE TRUE OF
            iUpdateDocument AND IsDPTDoc: DoDPTDoc(DocumentProperties, WebLink, FolderURI);
            iUpdateDocument AND IsPPTDoc: DoPPTDoc(TRUE, DocumentProperties, WebLink, FolderURI);
            iUpdateDocument AND IsCTBDoc: DoCTBDoc(NOT CopyAndUpdateDocument, DocumentProperties, WebLink, FolderURI);
          END;
        END;
      END;

      IF iUpdateDocument THEN BEGIN
        IF DocumentProperties."Storage Type" = DocumentProperties."Storage Type"::DPTDUAL THEN BEGIN
          CASE DocumentProperties."Document Portal Source Type"  OF
            DocumentProperties."Document Portal Source Type"::Project:
              BEGIN
                IF Job.GET(DocumentProperties."Document Portal Source No.") THEN
                  GetContentFromStorageByStreamForDPTDUAL(DPTTypes::Project, DocumentProperties."Document Portal Source No.", DocumentProperties."Document Portal Subsite",DocumentProperties.GetStorageURI,MemoryStream)
              END;
            DocumentProperties."Document Portal Source Type"::ServiceLoc:
              BEGIN
                IF ServiceLocation.GET(DocumentProperties."Document Portal Source No.") THEN
                  GetContentFromStorageByStreamForDPTDUAL(DPTTypes::ServiceLocation, DocumentProperties."Document Portal Source No.", DocumentProperties."Document Portal Subsite",DocumentProperties.GetStorageURI,MemoryStream);
              END;
          END;
        END ELSE
          IF NOT GetPrevWordDocumentVersion(lRecDocTemplate, DocumentProperties, FolderURI, StorageType, iAction, MemoryStream) THEN
            DocumentProperties.GetContentInMemoryStream(MemoryStream);
      END ELSE
        IF NOT lRecDocTemplate.GetContentInMemoryStream(MemoryStream) THEN
          ERROR(Text139, lRecDocTemplate.GetTemplateFilePath);

      // If not updating a document create the document
      FillPlantBookStorageURI := FALSE;
      UsePlantBookStorageURI := FALSE;
      IF NOT iUpdateDocument THEN BEGIN
        CASE lRecDocTemplate.Type OF
          lRecDocTemplate.Type::Miscellaneous:
            BEGIN
              NewVersion := DocumentProperties.Version;
              UpdateDocumentBasedOnTemplate(lRecDocTemplate, DocumentProperties, iDocumentNo, DocLinkRID);
            END;
          lRecDocTemplate.Type::Plant:
            BEGIN
              IF (gPlantBookStorageURI <> '') THEN BEGIN
                UsePlantBookStorageURI := TRUE;
                DocumentProperties.GET(gPlantBookDocNo);
              END ELSE BEGIN
                CreateDocumentBasedOnTemplate(
                  lRecDocTemplate, DocumentProperties, DocLinkRID, iContactNo, iPersonNo, iAction, iDocumentNo, NewVersion);
                FillPlantBookStorageURI := TRUE;
                gPlantBookDocNo := DocumentProperties."No."
              END;
              DocumentProperties.MODIFY;
            END;
          ELSE BEGIN
            IF (IsChoice3AndSomeDocPortalDoc) THEN BEGIN
              NewVersion := DocumentProperties.Version;
              UpdateDocumentBasedOnTemplate( lRecDocTemplate, DocumentProperties,iDocumentNo, DocLinkRID);
            END ELSE
              CreateDocumentBasedOnTemplate(lRecDocTemplate, DocumentProperties, DocLinkRID, iContactNo, iPersonNo, iAction, iDocumentNo, NewVersion);
          END;
        END;
      END;

      IF CopyAndUpdateDocument AND ((NOT IsPPTDoc) AND (NOT IsDPTDoc)) THEN BEGIN
        CopyInternalDocumentToNewVersion(
          DocumentProperties."No.", lRecDocTemplate.Description, NewVersion, iContactNo, iPersonNo, iDocumentNo, DocumentProperties);
      END;

      IF DepartmentCode <> '' THEN
        DocumentProperties."Department Code" := DepartmentCode;

      IF DocumentProperties."Document No." = '' THEN
        DocumentProperties."Document No." := iDocumentNo;

       DocumentProperties.MODIFY;

      WordAutomation.Initialise();
      WordAutomation.OpenStream(NOT iUpdateDocument, MemoryStream, FALSE);
      ProcessDoc(lRecDocTemplate, DocumentProperties,WordAutomation);
      IF iUpdateDocument AND DocumentProperties.HasStorageURI THEN
        TargetFileURI := FolderURI + FileMgt.GetFileName(DocumentProperties.GetStorageURI)
      ELSE BEGIN
        IF iDocumentNo = '' THEN
          GetNewDocumentFileName(iAction, lRecDocTemplate, DocumentProperties."No.", FileName)
        ELSE
          GetNewDocumentFileName(iAction, lRecDocTemplate, iDocumentNo, FileName);
        GetNewVersionFileName(NewVersion,FileName);
        FileName += WordAutomation.GetExtension;
        TargetFileURI += FolderURI + FileName;
      END;
      WordAutomation.Close;

      IF UsePlantBookStorageURI THEN BEGIN
        StorageType := DocumentStorageTypes::"File System on Premise";
        TargetFileURI := gPlantBookStorageURI;
      END;
      IF URIExists(StorageType,TargetFileURI) THEN
        DeleteStorageURI(StorageType,TargetFileURI);

      OStream := MemoryStream;
      IF (PutContentToStorageByStream(OStream,StorageType,TargetFileURI)) THEN
      BEGIN
        DocumentProperties.ValidateStorageURI(StorageType, TargetFileURI);
        DocumentProperties.MODIFY(TRUE);
        IF FillPlantBookStorageURI THEN BEGIN
          gPlantBookStorageType := StorageType;
          gPlantBookStorageURI := TargetFileURI;
        END;
      END;

      CheckSharepointUse(DocumentProperties);

      IF (lRecDocTemplate."Attach to E-Mail as" = lRecDocTemplate."Attach to E-Mail as"::"Attachment as PDF") AND (NOT SaveAsWordDoc) THEN
        SaveAsPdf(DocumentProperties,FolderURI,FALSE);

      LogProjectSiteDocumentLinks(DocumentProperties."No."); //kzwerver, #DP00177

      IF (NOT SharePointIntegration.IsProjectPortalActive) THEN
        EXIT;

      IF (Job.IsJobInProjectPortal) THEN
        DocumentPortalProject.AddInternalDocument(DocumentProperties."No.");
    END;

    LOCAL PROCEDURE LoopDocDataItems@1210190003(iDocGroup@1000000000 : Code[10];iDocument@1210190000 : Code[20];iDocumentNo@1210190013 : Code[20];ParentLineNo@1000000004 : Integer;ParentDataItemRef@1000000007 : RecordRef;CurrNode@1000000010 : Text[50];CurrTable@1210190001 : Integer;VAR WordAutomation@1100527800 : Codeunit 11012400);
    VAR
      DataItem@1000000001 : Record 11012140;
      DataItemLink@1000000006 : Record 11012141;
      DataItemKey@1210190012 : Record 11012144;
      DocumentLink@1199198000 : Record 11012747;
      DataItemRef@1000000002 : RecordRef;
      DataItemFieldRef@1000000005 : FieldRef;
      ParentDataItemFieldRef@1000000008 : FieldRef;
      lKeyText@1210190011 : Text[512];
      RID@1199198001 : RecordID;
    BEGIN
      //** Argument 1: Document Group
      //** Argument 2: Document Template
      //** Argument 3: Parent Line No. --> Recursie binnen de parent line.
      //** Argument 4: Parent Data Item Ref
      //** Argument 5: Node (Text: Text013 of Text014)
      //** Argument 6: Table No. --> Tabel binnen Word docu

      DataItem.SETRANGE("Document Group", iDocGroup);
      DataItem.SETRANGE(Document, iDocument);
      DataItem.SETRANGE("Parent Line No.",ParentLineNo);
      DataItem.SETAUTOCALCFIELDS("Table Name"); //C024324.n

      //IF NOT DataItem.FINDFIRST THEN //C024324.o
      IF NOT DataItem.FINDSET THEN //C024324.n
        EXIT;

      //Loopt voor ieder dataitem met zelfde parent-line/nivo
      //Voor onderliggende nivo's wordt functie recursief aangeroepen
      REPEAT

        //Window verversen
      //DataItem.CALCFIELDS("Table Name");  //C024324.o
        Window.UPDATE(1,STRSUBSTNO(Text007,DataItem."Table Name"));

        //De dataitem-tabel wordt geopend
        DataItemRef.OPEN(DataItem."Table No.");

        //Set Dataitem Key.
        lKeyText := '';
        IF DataItem.Key > 0  THEN BEGIN
          FillKeyTable(DataItem); //update keytable with captions in the correct language
          DataItemKey.SETRANGE("Table No.", DataItem."Table No.");
          DataItemKey.SETRANGE("Index No.", DataItem.Key);
          IF DataItemKey.FINDFIRST THEN BEGIN
            IF DataItemKey."Index Caption" <> '' THEN
              lKeyText := 'SORTING(' + DataItemKey."Index Caption" + ')';
          END;
        END;
        IF DataItem."Sort Order" = DataItem."Sort Order"::Down THEN
          lKeyText := lKeyText  + ' ORDER(Descending)';
        IF lKeyText <> '' THEN
          DataItemRef.SETVIEW(lKeyText);


        //Filters voor 'Document' zetten, alleen op hoogste niveau
        IF (DataItem."Table No." = 11012746) AND                      // Table Document Properties
           (DataItem.Indent = 0) THEN
        BEGIN
          DataItemFieldRef := DataItemRef.FIELD(2);                   //Field: Document Group
          DataItemFieldRef.SETRANGE(iDocGroup);
          DataItemFieldRef := DataItemRef.FIELD(3);                   //Field: Document
          DataItemFieldRef.SETRANGE(iDocument);
          DataItemFieldRef := DataItemRef.FIELD(1);                   //Field: No.
          DataItemFieldRef.SETRANGE(iDocumentNo);
        END;

        //Set Dataitem Link.
        IF DataItem.Indent <> 0 THEN BEGIN
          //Set Filters op basis van de ingegeven link
          DataItemLink.SETRANGE("Document Group", iDocGroup);
          DataItemLink.SETRANGE(Document, iDocument);
          DataItemLink.SETRANGE("Data Item Line No.",DataItem."Line No.");
          DataItemLink.SETFILTER("Field No.", '>%1', 0);
          DataItemLink.SETFILTER("Reference Field No.", '>%1', 0);
          IF DataItemLink.FINDSET THEN BEGIN
            REPEAT
              ParentDataItemFieldRef := ParentDataItemRef.FIELD(DataItemLink."Reference Field No.");
              DataItemFieldRef := DataItemRef.FIELD(DataItemLink."Field No.");
              DataItemFieldRef.SETRANGE(ParentDataItemFieldRef.VALUE);
            UNTIL DataItemLink.NEXT = 0;

            SetDataItemFilters(iDocGroup, iDocument, DataItem, DataItemRef, DataItemFieldRef, WordAutomation);
            LoopDataItemRef(iDocGroup, iDocument, iDocumentNo, CurrTable, DataItemRef, DataItem, WordAutomation);
          END ELSE BEGIN
            // No Dataitem link found, check Document Links
            IF DataItem."Parent Table No." = 11012747 THEN BEGIN
              DocumentLink.SETRANGE("Document No.", FORMAT(ParentDataItemRef.FIELD(10)));
              DocumentLink.SETRANGE("Table No.", DataItem."Table No.");
              DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
              IF DocumentLink.FINDSET THEN BEGIN
                REPEAT
                  IF FORMAT(DocumentLink."Record ID") <> '' THEN BEGIN
                    RID := DocumentLink."Record ID";
                    DataItemRef := RID.GETRECORD();
                    DataItemRef.SETRECFILTER;

                    SetDataItemFilters(iDocGroup, iDocument, DataItem, DataItemRef, DataItemFieldRef, WordAutomation);
                    LoopDataItemRef(iDocGroup, iDocument, iDocumentNo, CurrTable, DataItemRef, DataItem, WordAutomation);
                  END;
                UNTIL DocumentLink.NEXT = 0;
              END;
            END;
          END;
        END ELSE BEGIN
          SetDataItemFilters(iDocGroup, iDocument, DataItem, DataItemRef, DataItemFieldRef, WordAutomation);
          LoopDataItemRef(iDocGroup, iDocument, iDocumentNo, CurrTable, DataItemRef,  DataItem, WordAutomation);
        END;

        DataItemRef.CLOSE;
      UNTIL DataItem.NEXT = 0;
    END;

    PROCEDURE ProcessDocumentField@3(VAR iRecDocField@11012000 : Record 11012142;lTxtContent@1210190001 : Text[1024];iColumnNo@1210190002 : Integer;VAR WordAutomation@1100527800 : Codeunit 11012400);
    BEGIN
      WITH iRecDocField DO BEGIN
        IF FieldIsPicture THEN BEGIN
          "Field contains File Name" := TRUE;
          "File Type" := "File Type"::Picture;
          "File Storage" := "File Storage"::"File System on Premise";
        END;
        IF NOT "Field contains File Name" THEN BEGIN
          IF iColumnNo <> 0 THEN
            WordAutomation.FillTableElement(lTxtContent,iColumnNo)
          ELSE BEGIN
            IF Bookmark THEN BEGIN
              IF "Element Name" <> '' THEN
                WordAutomation.FillBookmark("Element Name",lTxtContent,Bold,Underline,Italic,TRUE);
            END ELSE BEGIN
              IF "Element Name" <> '' THEN
                WordAutomation.ReplaceField("Element Name",lTxtContent);
            END;
          END;
        END ELSE BEGIN
          IF FieldIsPicture THEN BEGIN
            IF Bookmark AND ("Element Name" <> '') THEN BEGIN
              IF Type = Type::Header THEN
                WordAutomation.FillBookmarkPicture("Element Name", GetFileStorageType, lTxtContent);
            END;
          END ELSE BEGIN
            IF "File Type" = "File Type"::Picture THEN BEGIN
              WordAutomation.FillBookmarkPicture("Element Name", GetFileStorageType, lTxtContent);
            END;
            IF "File Type" = "File Type"::"Word File" THEN BEGIN
              WordAutomation.FillBookmarkFile("Element Name", GetFileStorageType, lTxtContent);
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateDocumentBasedOnTemplate@6(iRecDocTemplate@1210190000 : Record 11012401;VAR vDocumentProperties@1199198009 : Record 11012746;iDocLinkRID@1199198000 : ARRAY [5] OF RecordID;iContactNo@1199198002 : Code[20];iPersonNo@1199198003 : Code[20];iAction@1199198004 : Code[20];iDocumentNo@1100525000 : Code[20];NewVersion@1100527800 : Integer);
    VAR
      UserSetup@1199198008 : Record 91;
      DocumentLinkMgt@1199198005 : Codeunit 11012401;
      AdditionalDocLinkRID@1100528500 : ARRAY [10] OF RecordID;
    BEGIN
      // Find last document. If exist, update version
      WITH vDocumentProperties DO BEGIN
        INIT;
        "No." := '';
        "No. Series" := iRecDocTemplate."No. Series";
        "Document No." := iDocumentNo;
        "Doc. Action" := iAction;
        Description := iRecDocTemplate.Description;
        "Publish on Service Portal" := iRecDocTemplate."Publish on Service Portal";
        "Publish on Subcont.Portal" := iRecDocTemplate."Publish on Subcont.Portal";
        "Available for Field Service" := iRecDocTemplate."Available in Field Service";
        "D3 Document Type" := iRecDocTemplate."D3 Document Type";
        "Project Portal Subsite" := iRecDocTemplate."Project Portal Subsite";
        "Private Company Document" := iRecDocTemplate."Private Company Document";
        "Document Portal Subsite" := iRecDocTemplate."Document Portal Subsite";
        "Document Portal Private Doc" := iRecDocTemplate."Document Portal Private Doc";

        VALIDATE("Contact No.", iContactNo);
        IF iPersonNo <> '' THEN
          VALIDATE("Contact Person No.", iPersonNo);

        "Document Group" := iRecDocTemplate."Document Group";
        "Document Template" := iRecDocTemplate."Template Code";
        "Document Type" := iRecDocTemplate."Document Type";

        IF iRecDocTemplate.Subject <> '' THEN
          VALIDATE(Subject, iRecDocTemplate.Subject);

        Version := NewVersion;
        "Creation Date" := TODAY;
        "Creation Time" := TIME;
        "User ID" := USERID;
        IF UserSetup.GET(USERID) THEN
          IF UserSetup."Employee No." <> '' THEN
            VALIDATE(Sender, UserSetup."Employee No.");

        IF iRecDocTemplate."Secured Document" = iRecDocTemplate."Secured Document"::Always THEN
          Secure := TRUE;

        "Internal Company" := COMPANYNAME;

        INSERT(TRUE);

        // Create document links
        DocumentLinkMgt.GetAdditionalDocumentLinksFromMultipleRecordIDs(iDocLinkRID, AdditionalDocLinkRID);
        DocumentLinkMgt.CreateDocumentLink(vDocumentProperties, AdditionalDocLinkRID);

        // Create default document links
        VALIDATE("Document Template", iRecDocTemplate."Template Code");

        FillReference();
        FillDPTFieldsDocumentProperties(iDocLinkRID, vDocumentProperties);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateDocumentBasedOnTemplate@36(iRecDocTemplate@1210190001 : Record 11012401;VAR vDocumentProperties@1199198001 : Record 11012746;iDocumentNo@1199198000 : Code[20];DocLinkRID@1100529400 : ARRAY [5] OF RecordID);
    BEGIN
      WITH vDocumentProperties DO BEGIN
        IF GET(iDocumentNo) THEN BEGIN
          IF (NOT HasStorageURI) THEN BEGIN
            "Creation Date" := TODAY;
            "Creation Time" := TIME;
            "User ID" := USERID;
            IF NOT "Publish on Service Portal" THEN
              "Publish on Service Portal" := iRecDocTemplate."Publish on Service Portal";
            IF NOT "Publish on Subcont.Portal" THEN
              "Publish on Subcont.Portal" := iRecDocTemplate."Publish on Subcont.Portal";
            IF NOT "Available for Field Service" THEN
              "Available for Field Service" := iRecDocTemplate."Available in Field Service";
            IF "D3 Document Type" = '' THEN
              "D3 Document Type" := iRecDocTemplate."D3 Document Type";
            IF "Document Type" = '' THEN
              "Document Type" := iRecDocTemplate."Document Type";
            IF "Project Portal Subsite" = '' THEN
              "Project Portal Subsite" := iRecDocTemplate."Project Portal Subsite";
            IF NOT "Private Company Document" THEN
              "Private Company Document" := iRecDocTemplate."Private Company Document";
            IF "Document Portal Subsite" = '' THEN
              "Document Portal Subsite" := iRecDocTemplate."Document Portal Subsite";
            IF NOT "Document Portal Private Doc" THEN
              "Document Portal Private Doc" := iRecDocTemplate."Document Portal Private Doc";
            IF "Document No." = '' THEN
              "Document No." := iDocumentNo;
            FillDPTFieldsDocumentProperties(DocLinkRID, vDocumentProperties);
            MODIFY(TRUE); //kzwerver, #DP00177
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CopyDocumentFile@1100525000(SourceDocumentProperties@1210190000 : Record 11012746;VAR TargetDocumentProperties@1210190001 : Record 11012746);
    VAR
      DocumentTemplate@1100528701 : Record 11012401;
      WordAutomation@1100528702 : Codeunit 11012400;
      TargetFolderURI@1210190002 : Text;
      TargetFileName@1210190006 : Text;
      TargetFileNameWithExtension@1100528707 : Text;
      TargetStorageType@1100527800 : Integer;
      TargetFileURI@1100527801 : Text;
      ErrorMessage@1100527802 : Text;
    BEGIN
      IF NOT SourceDocumentProperties.HasStorageURI THEN
        EXIT;
      IF NOT WordAutomation.FileExists(SourceDocumentProperties) THEN
        EXIT;
      TargetStorageType := GetMainStorageType();

      //DocumentGroup.GET(TargetDocumentProperties."Document Group");
      DocumentTemplate.GET(TargetDocumentProperties."Document Group", TargetDocumentProperties."Document Template");

      TargetFileName := DocumentTemplate."Prefix File Name" + TargetDocumentProperties."No." + Text101 + FORMAT(TargetDocumentProperties.Version);
      TargetFileNameWithExtension := TargetFileName + '.' + SourceDocumentProperties."File Extension";
      GetStorageLocationForGeneratedDocuments(TargetDocumentProperties."Document Group", DocumentTemplate, TargetDocumentProperties."Contact No.", TargetStorageType, TargetFolderURI);

      TargetFileURI :=  TargetFolderURI + TargetFileNameWithExtension;
      IF CopyStorageContent(SourceDocumentProperties."Storage Type",TargetStorageType,SourceDocumentProperties.GetStorageURI,TargetFileURI,ErrorMessage) THEN BEGIN
        TargetDocumentProperties.ValidateStorageURI(TargetStorageType,TargetFileURI);
        TargetDocumentProperties.MODIFY;
      END ELSE BEGIN
        ERROR(ErrorMessage);
      END;
    END;

    LOCAL PROCEDURE GetNewVersionFileName@1100527821(Version@1100527800 : Integer;VAR FileName@1100527801 : Text);
    BEGIN
      FileName += STRSUBSTNO('%1%2',Text101,Version);
    END;

    PROCEDURE InitPlantBook@1210190021(IFirstPlantType@1210190003 : Boolean;IPlantType@1210190000 : Code[20];IPlantRateRefDate@1210190001 : Date;IPlantBookTmpDirectory@1210190002 : Text[200];IPlantBookDocNo@1100485000 : Code[20]);
    BEGIN
      gPlantType := IPlantType;
      gPlantRateRefDate := IPlantRateRefDate;
      gPlantBookTmpDirectory := IPlantBookTmpDirectory;
      gPlantBookDocNo := IPlantBookDocNo;

      IF IFirstPlantType THEN BEGIN
        gPlantBookStorageType := 0;
        gPlantBookStorageURI := ''  //* Must be empty for the first Plant Type of a Plant Book
      END ELSE BEGIN
        gPlantBookStorageType := DocumentStorageTypes::"File System on Premise";
        gPlantBookStorageURI := gPlantBookTmpDirectory + 'Tmp' + '-PlantBook';
      END;
    END;

    PROCEDURE GetPlantBookFile@1210190027(VAR OPlantBookStorageType@1210190002 : Option;VAR OPlantBookStorageURI@1100528700 : Text;VAR OPlantBookDocNo@1100485000 : Code[20]);
    BEGIN
      OPlantBookStorageType := gPlantBookStorageType;
      OPlantBookStorageURI := gPlantBookStorageURI;
      OPlantBookDocNo := gPlantBookDocNo;
    END;

    PROCEDURE MergePlantBookFiles@1210190029(DocumentNo@1100528701 : Code[20];IPlantBookStorageType@1210190000 : Option;IPlantBookStorageURI@1100528700 : Text;IPlantBookFile2@1210190001 : Text[250]);
    VAR
      DocumentProperties@1100528704 : Record 11012746;
      StorageURIForSaving@1100528401 : Text;
    BEGIN
      gCduWord.Open(FALSE, IPlantBookStorageType, IPlantBookStorageURI, FALSE);
      gCduWord.AddPageBreak();
      gCduWord.AddFile(IPlantBookFile2);
      DocumentProperties.GET(DocumentNo);
      GetStorageURIForSaving(DocumentProperties, IPlantBookStorageURI, StorageURIForSaving);
      DeleteStorageURI(IPlantBookStorageType, IPlantBookStorageURI);
      gCduWord.SaveAsWithExtension(IPlantBookStorageType, StorageURIForSaving, gCduWord.DtDocumentExtension);
      DocumentProperties.ValidateStorageURI(IPlantBookStorageType, IPlantBookStorageURI);
      DocumentProperties.MODIFY;
    END;

    PROCEDURE CheckUserPermission@1100485001(lDocGroup@1100485000 : Code[10];lTemplate@1100485002 : Code[20]);
    VAR
      lPermissionRec@1100485001 : Record 11012404;
    BEGIN
      //**4PS01.sn
      lPermissionRec.SETRANGE("Document Group",lDocGroup);
      lPermissionRec.SETRANGE("Template Code",lTemplate);
      //IF NOT lPermissionRec.FINDFIRST THEN BEGIN //C024324.o
      IF lPermissionRec.ISEMPTY THEN //C024324.n
        //no permissions defined for any user, this means all have permissions
        EXIT;

      //there are permissions defined, check whether they are defined for the current user
      lPermissionRec.SETRANGE("User ID",USERID);
      //IF NOT lPermissionRec.FINDFIRST THEN //C024324.o
      IF lPermissionRec.ISEMPTY THEN //C024324.n
        ERROR(Text105, lTemplate);
      //**4PS01.en
    END;

    PROCEDURE FillPlantRateUnit@1100485004(ITableNo@1100485000 : Integer;IRentalType@1100485001 : Option;IPlantType@1100485002 : Code[20]) : Code[10];
    VAR
      lvRateRec@1100485003 : Record 11012567;
      lvLocRateRec@1100485004 : Record 11012583;
      lvRateComp@1100485005 : Record 11012585;
    BEGIN
      CASE ITableNo OF
        11012567:
          BEGIN
            lvRateRec."Rental Type" := IRentalType;
            lvRateRec."Plant Type" := IPlantType;
            lvRateRec.CalcfieldRateUnit();
            EXIT(lvRateRec."Rate Unit of Measure");
          END;
        11012583:
          BEGIN
            lvLocRateRec."Rental Type" := IRentalType;
            lvLocRateRec."Plant Type" := IPlantType;
            lvLocRateRec.CalcfieldRateUnit();
            EXIT(lvLocRateRec."Rate Unit of Measure");
          END;
        11012585:
          BEGIN
            lvRateComp."Rental Type" := IRentalType;
            lvRateComp."Plant Type" := IPlantType;
            lvRateComp.CalcfieldRateUnit();
            EXIT(lvRateComp."Rate Unit of Measure");
          END;
      END;
      EXIT('');
    END;

    PROCEDURE CheckSharepointUse@1100485003(DocumentProperties@1199198001 : Record 11012746);
    VAR
      LvJobRec@1100485000 : Record 11072003;
      LvDocumentTemplate@1100485002 : Record 11012401;
      LvSharepointLibraries@1100485003 : Record 11012209;
      DocumentLinkMgt@1199198000 : Codeunit 11012401;
      Extension@1100409000 : Text[10];
      TargetStorageType@1100527801 : Option;
      Target@1100527802 : Text[250];
      Sitepath@1100527803 : Text[250];
      Librarypath@1100527804 : Text[50];
      ErrorMessage@1100527805 : Text;
    BEGIN
      IF LvJobRec.GET(DocumentLinkMgt.GetProjectNo(DocumentProperties."No.")) THEN
        IF LvJobRec."Save Int. Doc In SharePoint" THEN
          IF LvJobRec."SharePoint Site Generated" THEN BEGIN
            Sitepath := LvJobRec."SharePoint Site URL";
            Sitepath := DELSTR(Sitepath,1,7);
            Sitepath := CONVERTSTR(Sitepath,'/','\');
            Sitepath := STRSUBSTNO('%1' + Sitepath,'\\');
            IF LvDocumentTemplate.GET(DocumentProperties."Document Group", DocumentProperties."Document Template") THEN
              IF LvSharepointLibraries.GET(LvDocumentTemplate."Library Code") THEN
                Librarypath := LvSharepointLibraries.Name
              ELSE
                EXIT;
            FileName := STRSUBSTNO('%1' + '%2v' + '%3' + Extension,
                                   DocumentProperties."Document Template",
                                   DocumentProperties."No.",
                                   DocumentProperties.Version);
            Target := STRSUBSTNO('%1' + '\' + '%2' + '\',Sitepath,Librarypath);
            GetStorageLocation('','','','',DocumentProperties."Creation Date",Sitepath,TargetStorageType);
            CreateStorageLocationIfNotExists(TargetStorageType,Sitepath);
            Sitepath += FileName;
            IF CopyStorageContent(DocumentProperties."Storage Type",TargetStorageType,DocumentProperties.GetStorageURI,Sitepath,ErrorMessage)
            THEN BEGIN
              DocumentProperties.ValidateStorageURI(TargetStorageType,Sitepath);
              DocumentProperties.MODIFY;
            END ELSE
              ERROR(ErrorMessage);
          END;
    END;

    PROCEDURE SetDataItemFilters@1199198002(iDocGroup@1199198001 : Code[20];iDocumentTemplate@1199198002 : Code[20];iDataItem@1199198003 : Record 11012140;VAR vDataItemRef@1199198005 : RecordRef;VAR vDataItemFieldRef@1199198004 : FieldRef;VAR WordAutomation@1100527800 : Codeunit 11012400);
    VAR
      DataItemFilter@1199198000 : Record 11012143;
      DataItem@1199198007 : Record 11012140;
      DeleteRows@1199198008 : Boolean;
    BEGIN
      // Set Dataitem Filter.
      // Set Filters op basis van ingegeven filters
      DataItemFilter.SETRANGE("Document Group", iDocGroup);
      DataItemFilter.SETRANGE(Document, iDocumentTemplate);
      DataItemFilter.SETRANGE("Data Item Line No.", iDataItem."Line No.");
      // Onderstaande filter moet foutief ingegeven records uitfilteren
      DataItemFilter.SETFILTER("Field No.", '>%1', 0);
      IF DataItemFilter.FINDSET THEN BEGIN
        REPEAT
          vDataItemFieldRef := vDataItemRef.FIELD(DataItemFilter."Field No.");
          vDataItemFieldRef.SETFILTER(DataItemFilter.Filter);
        UNTIL DataItemFilter.NEXT = 0;
      END;

      // Word tabel initialiseren
      IF iDataItem."Word Document Table No." <> 0 THEN BEGIN
        DataItem.SETRANGE("Document Group", iDataItem."Document Group");
        DataItem.SETRANGE(Document, iDataItem.Document);
        DataItem.SETFILTER("Line No.", '<%1', iDataItem."Line No.");
        DataItem.SETRANGE("Word Document Table No.", iDataItem."Word Document Table No.");
        DeleteRows := DataItem.COUNT = 0;
        WordAutomation.InitTableFields(iDataItem."Word Document Table No.", DeleteRows);
      END;
    END;

    PROCEDURE LoopDataItemRef@1199198004(iDocGroup@1199198004 : Code[20];iDocumentTemplate@1199198005 : Code[20];iDocumentNo@1199198029 : Code[20];iCurrTable@1199198003 : Integer;VAR vDataItemRef@1199198000 : RecordRef;iDataItem@1199198002 : Record 11012140;VAR WordAutomation@1100527801 : Codeunit 11012400);
    VAR
      DataItemFields@1199198001 : Record 11012142;
      FieldRec@1199198006 : Record 2000000041;
      TempTenantMediaSet@1100528400 : TEMPORARY Record 2000000183;
      DataItemFieldRef@1199198008 : FieldRef;
      lvVariant@1199198011 : Variant;
      OutPutValue@1199198007 : Text[1024];
      OutPutValue2@1199198027 : Text[1024];
      lFormatStr@1199198013 : Text[512];
      lFormatNo@1199198012 : Integer;
      IntValue@1199198010 : Integer;
      HulpString@1199198015 : Text[1024];
      HulpString2@1199198018 : Text[1024];
      HulpString3@1199198017 : Text[1024];
      HulpString4@1199198016 : Text[1024];
      HulpStrLen@1199198014 : Integer;
      i@1199198019 : Integer;
      lOK@1199198021 : Boolean;
      lDecVar@1199198022 : Decimal;
      lIntVar@1199198023 : Integer;
      lDateVar@1199198024 : Date;
      lTimeVar@1199198025 : Time;
      DateTimeVar@1210190000 : DateTime;
      lBoolVar@1199198026 : Boolean;
      ReplaceCharPlace@1199198028 : Integer;
      TempBlob@1100529701 : Record 99008535;
      FileMgt@1100529700 : Codeunit 419;
      ServerTempFileName@1100528401 : Text;
      StringFunctions@1100527800 : Codeunit 11012273;
    BEGIN
      // Met ingestelde filters beginnen te lezen
      // Use FINDFIRST, FINDSET only allowed for ascending, FINDFIRST can also be desending
      //IF vDataItemRef.FINDFIRST THEN BEGIN //C024324.o
      IF vDataItemRef.FINDSET THEN BEGIN //C024324.n
        REPEAT
          //Van het gevonden record de velden selectie zetten
          DataItemFields.RESET;
          DataItemFields.SETRANGE("Document Group", iDocGroup);
          DataItemFields.SETRANGE(Document, iDocumentTemplate);
          DataItemFields.SETRANGE("Data Item Line No.", iDataItem."Line No.");
          DataItemFields.SETFILTER("Field No.", '>%1', 0);
          //De velden lezen
          IF DataItemFields.FINDSET THEN BEGIN
            //Wordtabel nieuwe regel toevoegen
            IF (iDataItem."Word Document Table No." <> 0) THEN
              WordAutomation.TableNewRow;

            REPEAT
              FieldIsPicture := FALSE;
              IF iDataItem."Word Document Table No." = 0 THEN
                DataItemFields."Word Doc Table Column No." := 0;

              IF NOT FieldRec.GET(iDataItem."Table No.",DataItemFields."Field No.") THEN BEGIN
                OutPutValue := Text002;
              END ELSE BEGIN
                //Veld in FieldRef zetten
                DataItemFieldRef := vDataItemRef.FIELD(DataItemFields."Field No.");

                //FlowField
                IF FORMAT(DataItemFieldRef.CLASS) = Text019 THEN
                  DataItemFieldRef.CALCFIELD;

                //* Bepalen 'Rate Unit of Measure' is een uitzondering, is voor elk 'Rental Type' anders (overruled CALCFIELD)
                IF ((DataItemFields."Table No." = 11012567) AND (DataItemFields."Field No." = 42)) OR
                   ((DataItemFields."Table No." = 11012583) AND (DataItemFields."Field No." = 42)) OR
                   ((DataItemFields."Table No." = 11012585) AND (DataItemFields."Field No." = 121))
                THEN BEGIN
                  //* Opm: Voor al deze 3 tabellen is "Rental Type" veldnr. '5', en "Plant Type" veldnr. '10'.
                  DataItemFieldRef := vDataItemRef.FIELD(5);
                  IntValue := DataItemFieldRef.VALUE;
                  DataItemFieldRef := vDataItemRef.FIELD(DataItemFields."Field No.");  //* Terug zetten op huidige veld
                  lvVariant := FillPlantRateUnit(DataItemFields."Table No.", IntValue, FORMAT(vDataItemRef.FIELD(10)));
                  DataItemFieldRef.VALUE(lvVariant);
                END;
                IF (DataItemFields."Table No." = 11012551) AND (DataItemFields."Field No." = 55) AND
                    (FORMAT(DataItemFieldRef.VALUE) = '')
                THEN
                  DataItemFieldRef := vDataItemRef.FIELD(50);  //* Als leeg dan vullen met "Unit of Measure"

                //Ophalen van de veldwaarde
                OutPutValue := '';

                IF DataItemFields."Format Str." <> '' THEN
                  DataItemFields."Format No." := 0
                ELSE
                  DataItemFields."Format Str." := STRSUBSTNO('<Standard Format,%1>', DataItemFields."Format No.");

                lFormatStr := DataItemFields."Format Str.";
                lFormatNo  := DataItemFields."Format No.";

                CASE FORMAT(DataItemFieldRef.TYPE) OF
                  Text020:  // Option
                    BEGIN
                      IF EVALUATE(IntValue,FORMAT(DataItemFieldRef.VALUE)) THEN BEGIN
                        HulpString  := FORMAT(DataItemFieldRef.OPTIONCAPTION);
                        HulpStrLen  := STRLEN(HulpString);
                        IF HulpStrLen > 250 THEN BEGIN
                          HulpString2 := COPYSTR(HulpString,1,250);
                          HulpString3 := COPYSTR(HulpString,251);
                          HulpStrLen  := STRPOS(HulpString3,',');
                          IF HulpStrLen > 0 THEN BEGIN
                            HulpString2 := HulpString2 + COPYSTR(HulpString3,1,HulpStrLen);
                            HulpString3 := COPYSTR(HulpString3,(HulpStrLen+1));

                            HulpString4 := HulpString2;
                            i := 0;
                            REPEAT
                              i += 1;
                              HulpString4 := COPYSTR(HulpString4, (STRPOS(HulpString4, ',') + 1));
                            UNTIL STRPOS(HulpString4,',') = 0 ;
                            IF i >= IntValue THEN
                              OutPutValue := SELECTSTR(IntValue + 1, HulpString2)
                            ELSE
                              OutPutValue := SELECTSTR(IntValue + 1 - i, HulpString3);

                          END ELSE BEGIN;
                            OutPutValue := SELECTSTR(IntValue + 1,HulpString);
                          END;
                        END ELSE BEGIN
                          OutPutValue := SELECTSTR(IntValue + 1,FORMAT(DataItemFieldRef.OPTIONCAPTION));
                        END;
                      END ELSE
                        OutPutValue := FORMAT(DataItemFieldRef.VALUE);
                    END;
                  Text021:  // BLOB
                    BEGIN
                      OutPutValue := '';
                      PathTmpFiles := OperatingSystemMgt.ClientEnviron('TEMP');
                      FileMgt.AddBackSlashToDirectoryName(PathTmpFiles);
                      PathTmpFiles := PathTmpFiles + 'Tmp_' + FORMAT(iDataItem."Table No.")+'-Picture.bmp';
                      DataItemFieldRef.CALCFIELD;
                      TempBlob.Blob := DataItemFieldRef.VALUE;
                      IF NOT TempBlob.Blob.HASVALUE THEN
                        OutPutValue := ''
                      ELSE BEGIN
                        IF FileMgt.ClientFileExists(PathTmpFiles) THEN
                          FileMgt.DeleteClientFile(PathTmpFiles);
                        OutPutValue := FileMgt.BLOBExport4PS(TempBlob, PathTmpFiles, FALSE, FALSE);
                        IF OutPutValue <> '' THEN
                          FieldIsPicture := TRUE;
                      END;
                    END;
                  Text022:  // Decimal
                    BEGIN
                      lOK := EVALUATE(lDecVar, FORMAT(DataItemFieldRef.VALUE));
                      IF lDecVar <> 0 THEN
                        OutPutValue := FORMAT(lDecVar, 0, lFormatStr)
                      ELSE
                        OutPutValue := '';
                    END;
                  Text024:  // Integer
                    BEGIN
                      lOK := EVALUATE(lIntVar, FORMAT(DataItemFieldRef.VALUE));
                      IF lIntVar <> 0 THEN
                        OutPutValue := FORMAT(lIntVar, 0, lFormatStr)
                      ELSE
                        OutPutValue := '';
                    END;
                  Text023:  // Date
                    BEGIN
                      lOK := EVALUATE(lDateVar, FORMAT(DataItemFieldRef.VALUE));
                      OutPutValue := FORMAT(lDateVar, 0, lFormatStr);
                    END;
                  Text025:  // Time
                    BEGIN
                      lOK := EVALUATE(lTimeVar, FORMAT(DataItemFieldRef.VALUE));
                      OutPutValue := FORMAT(lTimeVar,0,lFormatStr);
                    END;
                  Text028:  // DateTime
                    BEGIN
                      lOK := EVALUATE(DateTimeVar, FORMAT(DataItemFieldRef.VALUE));
                      OutPutValue := FORMAT(DateTimeVar,0,lFormatStr);
                    END;
                  Text026:  // Boolean
                    BEGIN
                      lOK := EVALUATE(lBoolVar, FORMAT(DataItemFieldRef.VALUE));
                      OutPutValue := FORMAT(lBoolVar, 0, lFormatStr);
                    END;
                  Text027:  // Text
                    BEGIN
                      OutPutValue := FORMAT(DataItemFieldRef.VALUE);
                      IF (STRPOS(OutPutValue, '\') > 0) AND NOT (DataItemFields."Field contains File Name") THEN BEGIN
                        OutPutValue2 := '';
                        REPEAT
                          ReplaceCharPlace := STRPOS(OutPutValue, '\');
                          IF COPYSTR(OutPutValue, ReplaceCharPlace + 1, 1) = '\' THEN BEGIN
                            // dubbele backslash, eentje weghalen
                            OutPutValue2 := OutPutValue2 + COPYSTR(OutPutValue, 1, ReplaceCharPlace);
                            OutPutValue  :=                COPYSTR(OutPutValue, ReplaceCharPlace + 2);
                          END ELSE BEGIN
                             OutPutValue2 := OutPutValue2 + COPYSTR(OutPutValue, 1, ReplaceCharPlace - 1) + FORMAT(StringFunctions.CarriageReturn) + FORMAT(StringFunctions.LineFeed);
                            OutPutValue  :=                COPYSTR(OutPutValue, ReplaceCharPlace + 1);
                          END;
                        UNTIL STRPOS(OutPutValue, '\') = 0;
                        OutPutValue := OutPutValue2 + OutPutValue;
                      END;
                    END;
                  Text029:  // Media
                    BEGIN
                      OutPutValue := '';
                      TempTenantMediaSet."Media ID" := DataItemFieldRef.VALUE;
                      IF TempTenantMediaSet."Media ID".HASVALUE THEN BEGIN
                        ServerTempFileName := FileMgt.ServerTempFileName('');
                        TempTenantMediaSet."Media ID".EXPORTFILE(ServerTempFileName);
                        OutPutValue := FileMgt.DownloadTempFile(ServerTempFileName);
                        ERASE(ServerTempFileName);
                        FieldIsPicture := TRUE;
                      END;
                    END;
                  ELSE     // Overige
                    BEGIN
                      OutPutValue := FORMAT(DataItemFieldRef.VALUE);
                    END;
                END;
              END;

              ProcessDocumentField(DataItemFields,
                                   OutPutValue,
                                   DataItemFields."Word Doc Table Column No.",
                                   WordAutomation);
            UNTIL DataItemFields.NEXT = 0;
          END;
          //zoeken naar onderliggende dataitems
          LoopDocDataItems(iDocGroup,
                           iDocumentTemplate,
                           iDocumentNo,
                           iDataItem."Line No.",
                           vDataItemRef,
                           Text014,
                           iDataItem."Word Document Table No.",
                           WordAutomation);
        UNTIL (vDataItemRef.NEXT = 0) OR (iDataItem."Word Document Table No." = 0);

      END ELSE BEGIN
        //Bladwijzers opschonen
        IF iDataItem."Word Document Table No." = 0 THEN BEGIN
          FieldIsPicture := FALSE;
          //Van het gevonden record de velden selectie zetten
          DataItemFields.RESET;
          DataItemFields.SETRANGE("Document Group", iDocGroup);
          DataItemFields.SETRANGE(Document, iDocumentTemplate);
          DataItemFields.SETRANGE("Data Item Line No.", iDataItem."Line No.");
          DataItemFields.SETFILTER("Field No.", '>%1', 0);
          //De velden lezen
          IF DataItemFields.FINDSET THEN BEGIN
            REPEAT
              OutPutValue := '';
              ProcessDocumentField(DataItemFields,
                                   OutPutValue,
                                   0,
                                   WordAutomation);
            UNTIL DataItemFields.NEXT = 0;
          END;
          LoopDocDataItems(iDocGroup,
                           iDocumentTemplate,
                           iDocumentNo,
                           iDataItem."Line No.",
                           vDataItemRef,
                           Text014,
                           iDataItem."Word Document Table No.",
                           WordAutomation);
        END;
      END;
    END;

    LOCAL PROCEDURE GetLastOrSelectedDocument@1100528402(VAR DocumentProperties@1100528403 : Record 11012746;DocumentTemplate@1100528402 : Record 11012401;DocLinkRID@1100528401 : RecordID;DocAction@1100528400 : Code[20];SelectedDocumentPropertiesNo@1100528404 : Code[20]) : Boolean;
    BEGIN
      IF SelectedDocumentPropertiesNo = '' THEN
        EXIT(GetLastDocument(DocumentProperties, DocumentTemplate, DocLinkRID, DocAction))
      ELSE
        IF DocumentProperties.GET(SelectedDocumentPropertiesNo) THEN
          EXIT(TRUE);
    END;

    PROCEDURE GetLastDocument@1199198008(VAR vDocumentProperties@1199198002 : Record 11012746;iRecDocTemplate@1199198003 : Record 11012401;iDocLinkRID@1199198000 : RecordID;iAction@1199198005 : Code[20]) : Boolean;
    VAR
      DocumentLink@1199198001 : Record 11012747;
      RecRef@1199198004 : RecordRef;
    BEGIN
      RecRef := iDocLinkRID.GETRECORD();
      DocumentLink.SETCURRENTKEY("Record ID"); //mg, 05-07-11: M27801
      DocumentLink.SETRANGE("Table No.", RecRef.NUMBER);
      DocumentLink.SETFILTER("Record ID",  STRSUBSTNO('''%1''',RecRef.RECORDID));
      DocumentLink.SETRANGE(Source, TRUE);
      DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
      IF DocumentLink.FINDSET THEN BEGIN
        REPEAT
          IF vDocumentProperties.GET(DocumentLink."Document No.") THEN
            vDocumentProperties.MARK(TRUE);
        UNTIL DocumentLink.NEXT = 0;
      END;

      vDocumentProperties.MARKEDONLY(TRUE);

      //vDocumentProperties.SETCURRENTKEY("Document Group", "Document Template", "Contact No.", "Doc. Action", Version); //DP01564.o
      vDocumentProperties.SETCURRENTKEY("Document Group", "Document Template","Internal Company","Contact No.", "Doc. Action", Version); //DP01564.n
      vDocumentProperties.SETRANGE("Document Group", iRecDocTemplate."Document Group");
      vDocumentProperties.SETRANGE("Document Template", iRecDocTemplate."Template Code");
      vDocumentProperties.SETRANGE("Internal Company",COMPANYNAME); //DP01564.n
      vDocumentProperties.SETRANGE("Contact No.", gRecProspect."No.");
      IF (iAction <> '') THEN BEGIN
        vDocumentProperties.SETRANGE("Doc. Action", iAction);
      END ELSE BEGIN
        vDocumentProperties.SETRANGE("Doc. Action");
      END;

      IF vDocumentProperties.FINDLAST THEN BEGIN
        vDocumentProperties.CLEARMARKS();
        EXIT(TRUE);
      END;

      vDocumentProperties.CLEARMARKS();
      EXIT(FALSE);
    END;

    PROCEDURE CopyDocument@1100525001(VAR vDocumentProperties@1100525000 : Record 11012746;lAskCopyFile@1100485000 : Boolean;lNewVersion@1100485001 : Boolean);
    VAR
      DocumentProperties@1100485012 : Record 11012746;
      DocumentLinkMgt@1199198000 : Codeunit 11012401;
      lCopyFile@1100485003 : Boolean;
      WordAutomation@1100527800 : Codeunit 11012400;
    BEGIN
      WITH vDocumentProperties DO BEGIN
        lCopyFile := FALSE;
        IF (File <> '') AND lAskCopyFile THEN BEGIN
          IF WordAutomation.FileExists(vDocumentProperties) THEN
            lCopyFile := CONFIRM(Text008);
        END ELSE BEGIN
          lCopyFile := TRUE
        END;

        CopyDocumentCard(vDocumentProperties, DocumentProperties);
        DocumentProperties."Internal Company" := "Internal Company";

        IF lNewVersion THEN
          DocumentProperties.Version := GetLastVersion + 1;
        DocumentProperties.MODIFY;

        // Copy Document Links
        DocumentLinkMgt.CopyDocumentLink("No.", DocumentProperties."No.", FALSE);

        CopyDocumentRelation("No.", DocumentProperties."No.");

        IF lCopyFile THEN
          CopyDocumentFile(vDocumentProperties, DocumentProperties);

        MESSAGE(STRSUBSTNO(Text010, "No.", DocumentProperties."No."));

        GET(DocumentProperties."No.");
        IF MARKEDONLY THEN
          MARK := TRUE;

      END;
    END;

    PROCEDURE CopyDocumentCard@1100528703(DocumentProperties@1100528700 : Record 11012746;VAR DocumentProperties2@1100528701 : Record 11012746);
    BEGIN
      DocumentProperties2.COPY(DocumentProperties);
      DocumentProperties2."No." := '';
      DocumentProperties2."Final Printed" := FALSE;
      DocumentProperties2."Final Printed Date" := 0D;
      DocumentProperties2.VALIDATE(File, '');
      DocumentProperties2.VALIDATE("Document Service URL", '');
      DocumentProperties2."Web link" := '';
      DocumentProperties2.INSERT(TRUE);
    END;

    PROCEDURE CopyDocumentRelation@1100528701(FromNo@1100528704 : Code[20];ToNo@1100528705 : Code[20]);
    VAR
      DocumentRelation@1100528703 : Record 11012407;
      DocumentRelation2@1100528702 : Record 11012407;
      TenderParagraph@1100528701 : Record 11012072;
      TenderParagraph2@1100528700 : Record 11012072;
    BEGIN
      DocumentRelation.SETRANGE("Document Type", DocumentRelation."Document Type"::Document);
      DocumentRelation.SETRANGE("No.", FromNo);
      IF DocumentRelation.FINDSET THEN
        REPEAT
          DocumentRelation2.COPY(DocumentRelation);
          DocumentRelation2."No." := ToNo;
          DocumentRelation2.INSERT;

          TenderParagraph.SETRANGE(Type, TenderParagraph.Type::Document);
          TenderParagraph.SETRANGE("No.", DocumentRelation."No.");
          TenderParagraph.SETRANGE("Document No.", DocumentRelation."Related Document No.");
          IF TenderParagraph.FINDSET THEN
            REPEAT
              TenderParagraph2.COPY(TenderParagraph);
              TenderParagraph2."No." := DocumentRelation2."No.";
              TenderParagraph2."Document No." := DocumentRelation2."Related Document No.";
              TenderParagraph2.INSERT;
            UNTIL TenderParagraph.NEXT = 0;
        UNTIL DocumentRelation.NEXT = 0;
    END;

    PROCEDURE LogProjectSiteDocumentLinks@1100409000(DocumentNo@1100409000 : Code[20]);
    VAR
      DocumentLink@1100409001 : Record 11012747;
      ProjectSiteMgt@1100409002 : Codeunit 11012282;
    BEGIN
      //kzwerver, #DP00177
      DocumentLink.SETRANGE("Document No.", DocumentNo);
      //IF (NOT DocumentLink.FINDFIRST) THEN //C024324.o
      IF NOT DocumentLink.FINDSET THEN //C024324.n
        EXIT;

      REPEAT
        ProjectSiteMgt.LogDocumentLink(2, DocumentLink);
      UNTIL (DocumentLink.NEXT = 0);
    END;

    LOCAL PROCEDURE SetDPTDocPPTDocCTBDoc@1100525003(DocLinkRID@1100528302 : ARRAY [5] OF RecordID);
    VAR
      Job@1100528303 : Record 11072003;
      ServiceLocation@1100528304 : Record 11012801;
      ProjectSiteMgt@1100528305 : Codeunit 11012282;
      Counter@1100528300 : Integer;
      RecId@1100528301 : RecordID;
    BEGIN
      IsCTBDoc := FALSE;
      IsPPTDoc := FALSE;
      IsDPTDoc := FALSE;

      FOR Counter := 1 TO ARRAYLEN(DocLinkRID) DO BEGIN
        IF (NOT IsDPTDoc) AND (NOT IsPPTDoc) AND (NOT IsCTBDoc) THEN BEGIN
          RecId := DocLinkRID[Counter];
          CASE RecId.TABLENO OF
            DATABASE::Job: BEGIN
              IF (Job.GET(RecId)) THEN BEGIN
                IsDPTDoc := Job.IsDocumentPortalDualProject;
                IF (NOT IsDPTDoc) THEN
                  IsPPTDoc := Job.IsJobInProjectPortal;
                IF (NOT IsDPTDoc) AND (NOT IsPPTDoc) THEN
                  IsCTBDoc := (ProjectSiteMgt.IsInLicense(FALSE)) AND
                    (ProjectSiteMgt.ProjectSiteIsCreated(1, Job."No.")); //1=Project
              END;
            END;
            DATABASE::"Service Location": BEGIN
              IF (ServiceLocation.GET(RecId)) THEN
                IsDPTDoc := ServiceLocation.IsDocumentPortalServiceLocation;
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE DoDPTDoc@1100528300(VAR DocumentProperties@1100525003 : Record 11012746;VAR WebLink@1100525002 : Text;StorageDirectory@1100525001 : Text);
    VAR
      DPTInterfaceProject@1100525006 : Codeunit 11012956;
      DPTInterfaceServLoc@1100529900 : Codeunit 11012949;
    BEGIN
      CASE DocumentProperties."Document Portal Source Type" OF
        DocumentProperties."Document Portal Source Type"::Project:
          WebLink := DPTInterfaceProject.GetWordDocumentFromPortal(DocumentProperties."Document Portal Source No.",
            DocumentProperties, StorageDirectory);
        DocumentProperties."Document Portal Source Type"::ServiceLoc:
          WebLink := DPTInterfaceServLoc.GetWordDocumentFromPortal(DocumentProperties."Document Portal Source No.",
            DocumentProperties, StorageDirectory);
      END;
      IF (WebLink = '') THEN
        ERROR(Text109);
      DocumentProperties.MODIFY;
    END;

    LOCAL PROCEDURE DoPPTDoc@1100525004(CheckOut@1100525004 : Boolean;VAR DocumentProperties@1100525003 : Record 11012746;VAR WebLink@1100525002 : Text;StorageDirectory@1100525001 : Text);
    VAR
      DocumentPortalProject@1100525006 : Codeunit 11012948;
      DocumentLinkManagement@1100525005 : Codeunit 11012401;
    BEGIN
      WebLink := DocumentPortalProject.GetInternalDocumentToUpdate(DocumentLinkManagement.GetProjectNo(DocumentProperties."No."),
        DocumentProperties, StorageDirectory, CheckOut);
      IF (CheckOut) AND (WebLink = '') THEN
        ERROR(Text109);
      IF (CheckOut) THEN
        DocumentProperties.MODIFY;
    END;

    LOCAL PROCEDURE DoCTBDoc@1100525005(CheckOut@1100525004 : Boolean;VAR DocumentProperties@1100525003 : Record 11012746;VAR WebLink@1100525002 : Text;StorageDirectory@1100525005 : Text);
    VAR
      ProjectSiteMgt@1100525000 : Codeunit 11012282;
    BEGIN
      WebLink := ProjectSiteMgt.GetInternalDocumentToUpdate(DocumentProperties, StorageDirectory, CheckOut);
      IF (CheckOut) AND (WebLink = '') THEN
        ERROR(Text109);
      IF (CheckOut) THEN
        DocumentProperties.MODIFY;
    END;

    LOCAL PROCEDURE GetNewVersionNumber@1100527820(DocumentTemplate@1100527803 : Record 11012401;DocLinkRID@1100527802 : RecordID;Action@1100527801 : Code[20]) : Integer;
    VAR
      DocumentProperties@1100527800 : Record 11012746;
      NewVersion@1100527804 : Integer;
    BEGIN
       NewVersion := 1;
       IF GetLastDocument(DocumentProperties, DocumentTemplate, DocLinkRID, Action) THEN
          NewVersion += DocumentProperties.Version;

      EXIT(NewVersion);
    END;

    LOCAL PROCEDURE FillDPTFieldsDocumentProperties@1100528301(DocLinkRID@1100528300 : ARRAY [5] OF RecordID;VAR DocumentProperties@1100528301 : Record 11012746);
    VAR
      RecID@1100528304 : RecordID;
      I@1100528305 : Integer;
    BEGIN
      FOR I := 1 TO 5 DO BEGIN
        RecID := DocLinkRID[I];
        DocumentProperties.SetDPTFields(RecID);
      END;
    END;

    LOCAL PROCEDURE GetNewDocumentFileName@1100528713(DocumentAction@1100527803 : Code[20];DocumentTemplate@1100527802 : Record 11012401;DocumentNo@1100527801 : Code[20];VAR ShortFileName@1100527800 : Text) : Text;
    BEGIN
      ShortFileName := STRSUBSTNO('%1%2',DocumentTemplate."Prefix File Name", DocumentNo);
      IF DocumentAction <> '' THEN
        ShortFileName := STRSUBSTNO('%1_%2',ShortFileName, FORMAT(DocumentAction));
    END;

    PROCEDURE GetStorageURIForSaving@1100528705(DocumentProperties@1100528701 : Record 11012746;StorageURI@1100528406 : Text;VAR StorageURIForSaving@1100528703 : Text);
    VAR
      DocumentStorageType@1100528404 : Option;
      ShortFileName@1100528401 : Text;
      DocumentFolderURI@1100528405 : Text;
    BEGIN
      ShortFileName := FileMgt.GetFileName(StorageURI);
      GetStorageLocation(
        DocumentProperties."Document Group", DocumentProperties."Document Template", DocumentProperties."Contact No.", '', 0D, DocumentFolderURI, DocumentStorageType);
      CreateStorageLocationIfNotExists(DocumentStorageType, DocumentFolderURI);
      StorageURIForSaving := DocumentFolderURI + ShortFileName;
    END;

    PROCEDURE SetTemporaryTemplateDirectory@1100528704(TemporaryTemplateDirectory2@1100528700 : Text);
    BEGIN
      TemporaryTemplateDirectory := TemporaryTemplateDirectory2;
    END;

    PROCEDURE DeleteDocumentsByDocLink@1100525002(RecId@1100525000 : RecordID);
    VAR
      DocumentLink@1100525001 : Record 11012747;
      DocumentProperties@1100525002 : Record 11012746;
      DocumentLinkManagement@1100525003 : Codeunit 11012401;
    BEGIN
      DocumentLink.SETRANGE("Record ID", RecId);
      IF (NOT DocumentLink.FINDSET) THEN
        EXIT;

      REPEAT
        IF (DocumentProperties.GET(DocumentLink."Document No.")) THEN
          DocumentLinkManagement.DeleteDocumentLink(DocumentProperties);
      UNTIL (DocumentLink.NEXT = 0);
    END;

    PROCEDURE SaveAsPdf@1100529601(VAR DocumentPropertiesLoc@1100529603 : Record 11012746;FolderURI@1100527803 : Text;ValidateStorageURI@1100527550 : Boolean) : Text;
    VAR
      WordHelper@1100529601 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHelper" RUNONCLIENT;
      WordDocument@1100529600 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      WordApplication@1100529602 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      ParamBln@1100529604 : Boolean;
      FileNameWord@1100529605 : Text;
      FileManagement@1100527800 : Codeunit 419;
      Base64@1100527801 : BigText;
      TargetSourceURI@1100527802 : Text;
      PDFFileManagement@1100529607 : Codeunit 11020228;
      TmpClientFileName@1100529609 : Text;
      TmpServerFileName@1100529608 : Text;
    BEGIN
      IF FileMgt.ClientAvailable THEN BEGIN
        TmpClientFileName := FileMgt.ClientTempFileName('pdf');
        DocumentPropertiesLoc.WriteContentToClient(FileNameWord);

        WordApplication := WordApplication.ApplicationClass;
        WordDocument := WordHelper.CallOpen(WordApplication,FileNameWord,FALSE,FALSE);

        WordHelper.CallSaveAsPdf(WordDocument,TmpClientFileName);
        ParamBln := FALSE;
        WordHelper.CallClose(WordDocument,ParamBln);
        CLEAR(WordDocument);
        CLEAR(WordApplication);
        TmpServerFileName := FileManagement.UploadFileSilent(TmpClientFileName);
        FileManagement.DeleteClientFile(TmpClientFileName);
      END ELSE BEGIN
        DocumentPropertiesLoc.WriteContentToServerTempFile(FileNameWord);
        TmpServerFileName := PDFFileManagement.UploadFileSilentAsPDF(FileNameWord);
      END;

      FileManagement.ReadFileContentToBase64BigText(TmpServerFileName, Base64);
      FileManagement.DeleteServerFile(TmpServerFileName);

      TargetSourceURI := FolderURI + FileMgt.GetFileNameWithoutExtension(DocumentPropertiesLoc.GetStorageURI) + '.pdf';
      IF URIExists(DocumentPropertiesLoc."Storage Type", TargetSourceURI) THEN
        DeleteStorageURI(DocumentPropertiesLoc."Storage Type", TargetSourceURI);

      IF PutContentToStorageByBase64(Base64, DocumentPropertiesLoc."Storage Type", TargetSourceURI) AND ValidateStorageURI THEN BEGIN
        DocumentPropertiesLoc.ValidateStorageURI(DocumentPropertiesLoc."Storage Type", TargetSourceURI);
        DocumentPropertiesLoc.MODIFY;
      END;
      EXIT(TargetSourceURI);
    END;

    LOCAL PROCEDURE UpdateFileNameVersion@1100528501(FileName@1100528501 : Text;Version@1100528500 : Integer) NewFileName : Text;
    VAR
      FileManagement@1100528502 : Codeunit 419;
      WordAutomation@1100528506 : Codeunit 11012400;
      Extension@1100528503 : Text;
      FileNameWithoutExtension@1100528504 : Text;
    BEGIN
      Extension := FileManagement.GetExtension(FileName);
      IF (LOWERCASE(Extension) = WordAutomation.DocumentExtension) OR
         (LOWERCASE(Extension) = WordAutomation.TemplateExtension) OR
         (LOWERCASE(Extension) = WordAutomation.OldDocumentExtension) OR
         (LOWERCASE(Extension) = WordAutomation.OldTemplateExtension) OR
         (LOWERCASE(Extension) = WordAutomation.DocumentMacroExtension) OR
         (LOWERCASE(Extension) = WordAutomation.TemplateMacroExtension)
      THEN BEGIN
        Extension := '.' + Extension;
        FileNameWithoutExtension := COPYSTR(FileName, 1, STRLEN(FileName) - STRLEN(Extension));
        NewFileName := UpdateVersionOfFileNameWithoutExtension(FileNameWithoutExtension, Version) + Extension;
      END ELSE
        NewFileName := UpdateVersionOfFileNameWithoutExtension(FileName, Version);
    END;

    LOCAL PROCEDURE UpdateVersionOfFileNameWithoutExtension@1100528500(FileName@1100528500 : Text;Version@1100528501 : Integer) NewFileName : Text;
    VAR
      VersionPart@1100528502 : Text;
      LastPartOfFileName@1100528505 : Text;
      FileNameWithoutVersionPart@1100528503 : Text;
      LengthOfFirstPartOfFileName@1100528507 : Integer;
      I@1100528504 : Integer;
      VersionPartMatched@1100528506 : Boolean;
    BEGIN
      FileNameWithoutVersionPart := FileName;
      IF Version > 1 THEN BEGIN
        FOR I := Version - 1 DOWNTO 1 DO BEGIN
          IF NOT VersionPartMatched THEN BEGIN
            VersionPart := Text101 + FORMAT(I);
            LengthOfFirstPartOfFileName := STRLEN(FileName) - STRLEN(VersionPart);
            IF LengthOfFirstPartOfFileName > 0 THEN BEGIN
              LastPartOfFileName := COPYSTR(FileName, LengthOfFirstPartOfFileName + 1);
              IF LastPartOfFileName = VersionPart THEN BEGIN
                FileNameWithoutVersionPart := COPYSTR(FileName, 1, LengthOfFirstPartOfFileName);
                VersionPartMatched := TRUE;
              END;
            END;
          END;
        END;
      END;
      NewFileName := FileNameWithoutVersionPart + Text101 + FORMAT(Version);
    END;

    PROCEDURE PutContentToStorageByBase64@1100527809(Base64Content@1100527800 : BigText;TargetStorageType@1100527801 : Option;VAR TargetFileURI@1100527802 : Text) : Boolean;
    VAR
      MemStream@1100527803 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      OutStream@1100527804 : OutStream;
      Result@1100527806 : Boolean;
    BEGIN
      MemStream := MemStream.MemoryStream;
      ConvertBase64ToInstream(Base64Content,MemStream);
      OutStream := MemStream;
      Result:= PutContentToStorageByStream(OutStream,TargetStorageType,TargetFileURI);
      MemStream.Dispose;
      CLEAR(MemStream);

      EXIT(Result);
    END;

    PROCEDURE PutContentToStorageByStream@1100527810(OStream@1100527800 : OutStream;TargetStorageType@1100527801 : Option;VAR TargetFileURI@1100527802 : Text) : Boolean;
    VAR
      DocumentServiceManagement@1100527805 : Codeunit 9510;
      AzureFileStorageManagement@1100527804 : Codeunit 11012350;
      TimeOut@1100528400 : Integer;
    BEGIN
      CASE TargetStorageType OF
        DocumentStorageTypes::"Azure File Storage":
          BEGIN
            AzureFileStorageManagement.UploadFileViaMemoryStreamByResource(TargetFileURI, '', OStream);
            EXIT(TRUE);
          END;
        DocumentStorageTypes::"File System on Premise":
          BEGIN
            IF NOT (WriteStreamContentToClientFile(TargetFileURI,OStream)) THEN
              ERROR(Text134,TargetFileURI);
            TimeOut := 30000;
            WHILE NOT FileMgt.ClientFileExists(TargetFileURI) AND (TimeOut > 0) DO BEGIN
              SLEEP(100);      // Workaround to prevent that URIExists returns False
              TimeOut -= 100;  // because system thinks that file does not exist.
            END;
            EXIT(TRUE);
          END;
        DocumentStorageTypes::"SharePoint Online":
          BEGIN
            DocumentServiceManagement.SetUseDocumentService4PS(TRUE);
            TargetFileURI :=  DocumentServiceManagement.SaveStreamByOutputStream(OStream, TargetFileURI, TRUE);
            EXIT(TRUE);
          END;
      END;
      EXIT;
    END;

    PROCEDURE WriteBase64ContentInStream@1100527801(VAR Base64@1100527800 : BigText;VAR OutStream@1100527801 : OutStream);
    VAR
      Convert@1100527804 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Bytes@1100527803 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      MemoryStream@1100527802 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
    BEGIN
      Bytes := Convert.FromBase64String(Base64);
      MemoryStream := MemoryStream.MemoryStream(Bytes);
      MemoryStream.WriteTo(OutStream);
    END;

    PROCEDURE GetStorageType@1100528602() : Integer;
    VAR
      FileStorageTypeSetup@1100528600 : Record 11128545;
    BEGIN
      FileStorageTypeSetup.SETRANGE("Main Storage", TRUE);
      FileStorageTypeSetup.FINDFIRST;
      EXIT(FileStorageTypeSetup."File Storage Type");
    END;

    PROCEDURE GetEditStorageType@1100528601() : Integer;
    VAR
      FileStorageTypeSetup@1100528600 : Record 11128545;
    BEGIN
      FileStorageTypeSetup.SETRANGE("Edit Storage", TRUE);
      FileStorageTypeSetup.FINDFIRST;
      EXIT(FileStorageTypeSetup."File Storage Type");
    END;

    PROCEDURE GetMainStorageType@1100527805() : Integer;
    VAR
      Result@1100527801 : Integer;
      DocumentServiceManagement@1100527802 : Codeunit 9510;
      AzureFileStorageManagement@1100527803 : Codeunit 11012350;
    BEGIN
      //0: 'none'
      //1   File System on Premise
      //2:  SharePoint Online (Office 365)
      //3:  Azure File Storage

      Result := GetStorageType;

      CASE Result OF
        DocumentStorageTypes::"File System on Premise":
          ;
        DocumentStorageTypes::"Azure File Storage":
          IF NOT (AzureFileStorageManagement.IsConfigured) THEN
            ERROR(Text133);
        DocumentStorageTypes::"SharePoint Online":
          BEGIN
            DocumentServiceManagement.SetUseDocumentService4PS(TRUE);
            IF NOT (DocumentServiceManagement.IsConfigured) THEN
              ERROR(Text133);
          END;
      END;

      EXIT (Result);
    END;

    PROCEDURE CreateStorageLocationIfNotExists@1100528708(StorageType@1100527802 : Option;FolderURI@1100528704 : Text);
    VAR
      FileManagement@1100528702 : Codeunit 419;
      AzureFileStorageManagement@1100527801 : Codeunit 11012350;
    BEGIN
      CASE StorageType OF
        DocumentStorageTypes::"File System on Premise":
          BEGIN
            IF NOT FileManagement.ClientDirectoryExists(FolderURI) THEN
              FileManagement.CreateClientFolderRecursively(FolderURI);
          END;
        DocumentStorageTypes::"Azure File Storage":
          BEGIN
            IF NOT AzureFileStorageManagement.DirectoryExists(FolderURI, '') THEN
              AzureFileStorageManagement.CreateDirectoryByResourceRecursively(AzureFileStorageManagement.ConvertToFilePath(FolderURI, ''));
          END;
      END;
    END;

    PROCEDURE GetStorageLocationForGeneratedDocuments@1100527817(DocumentGroupCode@1100528703 : Code[10];DocumentTemplate@1100528702 : Record 11012401;ContactNo@1100528701 : Code[20];StorageType@1100527800 : Option;VAR FolderURI@1100528704 : Text);
    VAR
      DocumentGroup@1100527801 : Record 11012400;
      AzureFileStorageManagement@1100527802 : Codeunit 11012350;
    BEGIN
      FolderURI := '';
      DocumentGroup.GET(DocumentGroupCode);
      DocumentGroup.TESTFIELD(Code);
      IF (DocumentGroup."Document Directory" = '') AND  (DocumentGroup."Doc. Service Document Subdir." = '')
      THEN
        ERROR(
          Text131, gRecDocGroup.FIELDCAPTION("Document Directory"),
          DocumentGroup.FIELDCAPTION("Doc. Service Document Subdir."),
          DocumentGroup.TABLECAPTION, gRecDocGroup.Code);

      WITH DocumentTemplate DO BEGIN
        CASE StorageType OF
          DocumentStorageTypes::"File System on Premise":
            BEGIN
              IF ("Secured Document" = "Secured Document"::Always) AND ("Secured Document Directory" <> '') THEN
                FolderURI := STRSUBSTNO(
                  '%1\%2%3\',RemoveEndSlashOrBackSlash("Secured Document Directory"),Text100,ContactNo);

              IF (NOT ("Secured Document" = "Secured Document"::Always)) AND (DocumentGroup."Document Directory" <> '') THEN
                FolderURI := STRSUBSTNO(
                  '%1\%2%3\',RemoveEndSlashOrBackSlash(DocumentGroup."Document Directory"),Text100,ContactNo);
            END;
          DocumentStorageTypes::"SharePoint Online":
            BEGIN
              IF ("Secured Document" = "Secured Document"::Always) AND ("Doc. Srv. Secured Doc. Subdir." <> '') THEN
                FolderURI := STRSUBSTNO(
                  '%1/%2%3/',RemoveEndSlashOrBackSlash("Doc. Srv. Secured Doc. Subdir."),Text100,ContactNo);

              IF (NOT ("Secured Document" = "Secured Document"::Always)) AND (DocumentGroup."Doc. Service Document Subdir." <> '') THEN
                FolderURI := STRSUBSTNO(
                  '%1/%2%3/',RemoveEndSlashOrBackSlash(DocumentGroup."Doc. Service Document Subdir."),Text100,ContactNo);
            END;
           DocumentStorageTypes::"Azure File Storage":
            BEGIN
              AzureFileStorageManagement.GetMainStorageLocation(FolderURI);
              IF ("Secured Document" = "Secured Document"::Always) AND ("Doc. Srv. Secured Doc. Subdir." <> '') THEN
                FolderURI += STRSUBSTNO(
                  '%1/%2%3/',RemoveEndSlashOrBackSlash("Doc. Srv. Secured Doc. Subdir."),Text100,ContactNo);

              IF (NOT ("Secured Document" = "Secured Document"::Always)) AND (DocumentGroup."Doc. Service Document Subdir." <> '') THEN
                FolderURI += STRSUBSTNO(
                  '%1/%2%3/',RemoveEndSlashOrBackSlash(DocumentGroup."Doc. Service Document Subdir."),Text100,ContactNo);
            END;
        END;

      END;
      IF (FolderURI = '') THEN
        ERROR(Text132);
    END;

    PROCEDURE GetStorageLocationForTemplates@1100527823(DocumentGroupCode@1100527804 : Code[10];VAR StorageFolderURI@1100527801 : Text;VAR DocumentStorageType@1100527800 : Option);
    VAR
      AzureFileStorageManagement@1100527803 : Codeunit 11012350;
      DocumentGroup@1100527805 : Record 11012400;
    BEGIN
      DocumentGroup.GET(DocumentGroupCode);

      DocumentStorageType := GetMainStorageType();
      CASE DocumentStorageType OF
        DocumentStorageTypes::"File System on Premise":
          BEGIN
            DocumentGroup.TESTFIELD("Template Directory");
            StorageFolderURI := RemoveEndSlashOrBackSlash(DocumentGroup."Template Directory") + '\';
          END;
        DocumentStorageTypes::"Azure File Storage":
          BEGIN
            DocumentGroup.TESTFIELD("Doc. Service Template Subdir.");
            AzureFileStorageManagement.GetTemplateLocation(DocumentGroup."Doc. Service Template Subdir.",StorageFolderURI);
            StorageFolderURI := RemoveEndSlashOrBackSlash(StorageFolderURI) + '/';
          END;
        DocumentStorageTypes::"SharePoint Online":
          BEGIN
            DocumentGroup.TESTFIELD("Doc. Service Template Subdir.");
            StorageFolderURI := RemoveEndSlashOrBackSlash(DocumentGroup."Doc. Service Template Subdir.") + '/';
          END;
      END;
    END;

    PROCEDURE GetStorageLocation@1100527802(DocumentGroupCode@1100527801 : Code[10];DocumentTemplateCode@1100528401 : Code[20];ContactNo@1100528400 : Code[20];DocumentTypeCode@1100528700 : Code[10];CreationDate@1100528402 : Date;VAR DocumentFolderURI@1100528703 : Text;VAR DocumentStorageType@1100527800 : Option);
    BEGIN
      DocumentStorageType := GetMainStorageType();
      GetStorageLocationForStorageType(
        DocumentStorageType,DocumentGroupCode,DocumentTemplateCode,ContactNo,DocumentTypeCode,CreationDate,DocumentFolderURI);
    END;

    PROCEDURE GetStorageLocationForSource@1100527813(VAR DocumentFolderURI@1100528703 : Text;VAR DocumentStorageType@1100527800 : Option;Company@1100528706 : Text);
    VAR
      FileSystemOnPremiseSetup@1100528705 : Record 11125739;
    BEGIN

      DocumentStorageType := GetMainStorageType();
      CASE DocumentStorageType OF
        DocumentStorageTypes::"File System on Premise":
          BEGIN
            FileSystemOnPremiseSetup.GET;
            FileSystemOnPremiseSetup.TESTFIELD("Default Source Dir.Ext.Doc");
            DocumentFolderURI := RemoveEndSlashOrBackSlash(FileSystemOnPremiseSetup."Default Source Dir.Ext.Doc") + '\';
          END;
        DocumentStorageTypes::"Azure File Storage":
          ERROR(Text133);

         DocumentStorageTypes::"SharePoint Online":
          ERROR(Text133);
       END;
    END;

    PROCEDURE GetStorageLocationForStorageType@1100527803(StorageType@1100527800 : Option;DocumentGroupCode@1100527809 : Code[10];DocumentTemplateCode@1100528400 : Code[20];ContactNo@1100528402 : Code[20];DocumentTypeCode@1100527801 : Code[10];CreationDate@1100528403 : Date;VAR TargetFolderURI@1100527803 : Text);
    VAR
      DocumentType@1100527804 : Record 11012405;
      DocumentTemplate@1100528401 : Record 11012401;
      DocumentMgtSetup@1100527805 : Record 11071831;
      AzureFileStorageSetup@1100527806 : Record 11128547;
      FileSystemOnPremiseSetup@1100525000 : Record 11125739;
      DocumentServiceSetup4PS@1100525002 : Record 11071832;
      StringFunctions@1100527807 : Codeunit 11012273;
      AzureFileStorageManagement@1100527811 : Codeunit 11012350;
    BEGIN
      TargetFolderURI := '';

      IF (DocumentGroupCode <> '') AND
         (DocumentTemplateCode <> '')
      THEN BEGIN
        IF DocumentTemplate.GET(DocumentGroupCode, DocumentTemplateCode) THEN;
        GetStorageLocationForGeneratedDocuments(DocumentGroupCode, DocumentTemplate, ContactNo, StorageType, TargetFolderURI);
        IF TargetFolderURI <> '' THEN
          EXIT;
      END;

      IF (DocumentType.GET(DocumentTypeCode)) THEN BEGIN
        CASE StorageType OF
          DocumentStorageTypes::"File System on Premise":
            IF DocumentType."Storage Directory Attachment" <> '' THEN
              TargetFolderURI := RemoveEndSlashOrBackSlash(DocumentType."Storage Directory Attachment") + '\';
          DocumentStorageTypes::"SharePoint Online":
            IF (DocumentType."Doc. Service Ext. Doc. Subdir." <> '') THEN
              TargetFolderURI := RemoveEndSlashOrBackSlash(DocumentType."Doc. Service Ext. Doc. Subdir.") + '/';
          DocumentStorageTypes::"Azure File Storage":
            IF (DocumentType."Doc. Service Ext. Doc. Subdir." <> '') THEN BEGIN
              AzureFileStorageManagement.GetMainStorageLocation(TargetFolderURI);
              TargetFolderURI += RemoveEndSlashOrBackSlash(DocumentType."Doc. Service Ext. Doc. Subdir.") + '/';
            END;
         END;
      END;

      IF (TargetFolderURI = '') THEN BEGIN
        IF (DocumentMgtSetup.GET) THEN BEGIN
          CASE StorageType OF
            DocumentStorageTypes::"File System on Premise":
              BEGIN
                FileSystemOnPremiseSetup.GET;
                FileSystemOnPremiseSetup.TESTFIELD("Default Ext. Doc. Directory");
                TargetFolderURI := RemoveEndSlashOrBackSlash(FileSystemOnPremiseSetup."Default Ext. Doc. Directory") + '\';
              END;
            DocumentStorageTypes::"SharePoint Online":
              BEGIN
                DocumentServiceSetup4PS.GET;
                DocumentServiceSetup4PS.TESTFIELD("Default Ext. Doc. Subdir.");
                TargetFolderURI := RemoveEndSlashOrBackSlash(DocumentServiceSetup4PS."Default Ext. Doc. Subdir.") + '/';
              END;
            DocumentStorageTypes::"Azure File Storage":
              BEGIN
                AzureFileStorageSetup.GET;
                AzureFileStorageSetup.TESTFIELD("Default Ext. Doc. Subdir.");
                AzureFileStorageManagement.GetMainStorageLocation(TargetFolderURI);
                TargetFolderURI += RemoveEndSlashOrBackSlash(AzureFileStorageSetup."Default Ext. Doc. Subdir.") + '/';
              END;
           END;
        END;
      END;

      DocumentMgtSetup.GET;
      IF DocumentMgtSetup."Use Date Subfolders" AND
         (CreationDate >= DocumentMgtSetup."Starting Date Subfolders")
      THEN
        CASE StorageType OF
          DocumentStorageTypes::"File System on Premise":
            BEGIN
              StringFunctions.CheckEndingBackSlash(TargetFolderURI);
              TargetFolderURI += STRSUBSTNO('%1\%2\',DATE2DMY(CreationDate,3),DATE2DMY(CreationDate,2));
            END;
          DocumentStorageTypes::"SharePoint Online", DocumentStorageTypes::"Azure File Storage":
            BEGIN
              StringFunctions.CheckEndingSlash(TargetFolderURI);
              TargetFolderURI += STRSUBSTNO('%1/%2/',DATE2DMY(CreationDate,3),DATE2DMY(CreationDate,2));
            END;
        END;
    END;

    PROCEDURE RemoveEndSlashOrBackSlash@1100528405(DirectoryName@1100528400 : Text) DirectoryNameWithoutSlashOrBackslash : Text;
    BEGIN
      DirectoryNameWithoutSlashOrBackslash := DELCHR(DirectoryName, '>', '/\');
    END;

    PROCEDURE GetContentFromStorageByStream@1100527825(StorageType@1100527803 : Option;URI@1100527801 : Text;VAR MemoryStream@1100527802 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream") : Boolean;
    VAR
      DocumentServiceManagement@1100527805 : Codeunit 9510;
      AzureFileStorageManagement@1100527806 : Codeunit 11012350;
      FileManagement@1100527800 : Codeunit 419;
    BEGIN
      CASE StorageType OF
        DocumentStorageTypes::"File System on Premise":
          BEGIN
            EXIT(FileManagement.ReadFileContentToMemoryStreamFromClient(URI,MemoryStream));
          END;
        DocumentStorageTypes::"Azure File Storage":
          BEGIN
            AzureFileStorageManagement.GetFileContentsViaMemoryStreamByResource(URI, MemoryStream);
            EXIT(TRUE);
          END;
         DocumentStorageTypes::"SharePoint Online":
          BEGIN
            DocumentServiceManagement.SetUseDocumentService4PS(TRUE);
            DocumentServiceManagement.DownloadFileFromCloudToMemoryStream(URI, MemoryStream);
            EXIT(TRUE);
          END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetContentFromStorageByStreamForDPTDUAL@1100527815(CurrentDPTType@1100527804 : 'Unknown,Project,ServiceLocation';SourceNo@1100527803 : Code[20];Subsite@1100527802 : Code[20];WebLink@1100527801 : Text;VAR MemoryStream@1100527800 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream") : Boolean;
    VAR
      DPTInterface@1100527805 : Codeunit 11012451;
      Job@1100527807 : Record 11072003;
      ServiceLocation@1100527806 : Record 11012801;
    BEGIN
      IF (CurrentDPTType = CurrentDPTType::Project) THEN BEGIN
         IF (Job.GET(SourceNo)) THEN
           EXIT(DPTInterface.GetDocumentContentByMemoryStream(CurrentDPTType,Job,Subsite,WebLink,MemoryStream));
      END;

      IF (CurrentDPTType = CurrentDPTType::ServiceLocation) THEN BEGIN
        IF (ServiceLocation.GET(SourceNo)) THEN
          EXIT(DPTInterface.GetDocumentContentByMemoryStream(CurrentDPTType,ServiceLocation,Subsite,WebLink,MemoryStream));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetContentFromStorageByBase64@1100527800(StorageType@1100527803 : Option;URI@1100527801 : Text;VAR Base64@1100527804 : BigText) : Boolean;
    VAR
      MemoryStream@1100527802 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Convert@1100527808 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Bytes@1100527807 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
    BEGIN
      MemoryStream := MemoryStream.MemoryStream;
      IF GetContentFromStorageByStream(StorageType,URI,MemoryStream) THEN BEGIN
        Bytes := MemoryStream.ToArray;
        Base64.ADDTEXT(Convert.ToBase64String(Bytes));
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CopyContentFromStorageToServerFile@1100528404(StorageType@1100528402 : Option;StorageURI@1100528401 : Text;VAR ServerFileName@1100528400 : Text) : Boolean;
    VAR
      MemoryStream@1100528408 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      FileManagement@1100528405 : Codeunit 419;
      OStream@1100528404 : OutStream;
    BEGIN
      MemoryStream := MemoryStream.MemoryStream;
      IF GetContentFromStorageByStream(StorageType, StorageURI, MemoryStream) THEN BEGIN
        ServerFileName := FileManagement.ServerTempFileName('');
        OStream := MemoryStream;
        WriteStreamContentToServerFile(ServerFileName, OStream);
        MemoryStream.Dispose;
        CLEAR(MemoryStream);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE CheckIfDocumentCanBeMovedToEditStorage@1100525007(CurrentStorageType@1100525000 : Option;EditStorageType@1100525001 : Option) : Boolean;
    VAR
      FileManagement@1100525002 : Codeunit 419;
    BEGIN
      IF CurrentStorageType = EditStorageType THEN
        EXIT;

      CASE EditStorageType OF
        DocumentStorageTypes::"File System on Premise":
          IF NOT FileManagement.IsWindowsClient THEN
            ERROR(Text138);
        DocumentStorageTypes::"Azure File Storage":
          ERROR(Text137);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ConvertBase64ToInstream@1100527804(Base64@1100527800 : BigText;VAR Stream@1100527801 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream");
    VAR
      Convert@1100527804 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Bytes@1100527802 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
    BEGIN
      Bytes := Convert.FromBase64String(Base64);
      Stream.Write(Bytes, 0, Bytes.Length);
      Stream.Flush;
    END;

    PROCEDURE ConvertOutstreamToBase64@1100527816(OStream@1100527801 : OutStream;VAR Base64@1100527805 : BigText);
    VAR
      Convert@1100527804 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@1100527803 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Bytes@1100527802 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Stream@1100527800 : DotNet "'mscorlib'.System.IO.Stream";
    BEGIN

      MemoryStream := MemoryStream.MemoryStream;
      Stream :=OStream;
      Stream.CopyTo(MemoryStream);
      Bytes := MemoryStream.ToArray;
      Base64.ADDTEXT(Convert.ToBase64String(Bytes));
    END;

    PROCEDURE ConvertInstreamToBase64@1100527807(IStream@1100527801 : InStream;VAR Base64@1100527805 : BigText);
    VAR
      Convert@1100527804 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@1100527803 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Bytes@1100527802 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Stream@1100527800 : DotNet "'mscorlib'.System.IO.Stream";
    BEGIN

      MemoryStream := MemoryStream.MemoryStream;
      Stream :=IStream;
      Stream.CopyTo(MemoryStream);
      Bytes := MemoryStream.ToArray;
      Base64.ADDTEXT(Convert.ToBase64String(Bytes));
    END;

    PROCEDURE ConvertMemoryStreamToBase64@1100527826(VAR MemoryStream@1100527801 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";VAR Base64@1100527805 : BigText);
    VAR
      Convert@1100527804 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Bytes@1100527802 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
    BEGIN
      Bytes := MemoryStream.ToArray;
      Base64.ADDTEXT(Convert.ToBase64String(Bytes));
    END;

    PROCEDURE WriteStreamContentToServerFile@1100527811(FileName@1100527800 : Text;VAR Stream@1100527801 : OutStream) : Boolean;
    VAR
      FileManagement@1100528400 : Codeunit 419;
    BEGIN
      IF EXISTS(FileName) THEN
        EXIT(FALSE);
      FileManagement.WriteFileContentFromOutStream(FileName, Stream);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE WriteStreamContentToClientFile@1100528409(FileName@1100527800 : Text;VAR Stream@1100527801 : OutStream) : Boolean;
    VAR
      FileManagement@1100528400 : Codeunit 419;
      ServerTempFileName@1100528401 : Text;
    BEGIN
      IF FileManagement.ClientFileExists(FileName) THEN
        EXIT(FALSE);
      ServerTempFileName := FileManagement.ServerTempFileName('');
      FileManagement.WriteFileContentFromOutStream(ServerTempFileName, Stream);
      FileManagement.DownloadToFile(ServerTempFileName, FileName);
      ERASE(ServerTempFileName);
      EXIT(TRUE);
    END;

    PROCEDURE GetUniqueFileName@1100525011(VAR FileName@1100527801 : Text);
    BEGIN
      GetUniqueFileNameForStorageType(DocumentStorageTypes::"File System on Premise",FileName);
    END;

    PROCEDURE GetUniqueFileNameForStorageType@1100527812(TargetStorageType@1100527800 : Option;VAR FileName@1100527801 : Text);
    BEGIN
      AddTimeStampToOrRemoveTimeStampFromFileName(FileName, TRUE);
    END;

    PROCEDURE RemoveTimeStampFromFileName@1100528401(VAR FileName@1100527801 : Text);
    BEGIN
      AddTimeStampToOrRemoveTimeStampFromFileName(FileName, FALSE);
    END;

    LOCAL PROCEDURE AddTimeStampToOrRemoveTimeStampFromFileName@1100528407(VAR FileName@1100528400 : Text;Add@1100528401 : Boolean);
    VAR
      DtExtension@1100528404 : Text;
      StringFunctions@1100528403 : Codeunit 11012273;
      P@1100528402 : Integer;
    BEGIN
      P := StringFunctions.RSTRPOS(FileName, '.');
      IF (P > 0) AND (STRLEN(FileName) - P <= 5) THEN BEGIN
        DtExtension := COPYSTR(FileName, P);
        FileName := COPYSTR(FileName, 1, P - 1);
        IF Add THEN
          FileName := FileName + GetTimeStamp
        ELSE
          RemoveTimeStampFromEndOfString(FileName);
        FileName := FileName + DtExtension;
      END ELSE
        IF Add THEN
          FileName := FileName + GetTimeStamp
        ELSE
          RemoveTimeStampFromEndOfString(FileName);
    END;

    LOCAL PROCEDURE RemoveTimeStampFromEndOfString@1100528403(VAR String@1100527801 : Text);
    VAR
      StringFunctions@1100528700 : Codeunit 11012273;
      TimeStamp@1100528406 : Text;
      TimeStamp2@1100528404 : Text;
      Nrs@1100528405 : Text;
      P@1100528401 : Integer;
    BEGIN
      TimeStamp := GetTimeStamp;
      P := StringFunctions.RSTRPOS(String, COPYSTR(TimeStamp, 1, 2));
      IF P > 0 THEN BEGIN
        TimeStamp2 := COPYSTR(String, P);
        Nrs := '0123456789';
        IF DELCHR(TimeStamp2, '=', Nrs) = DELCHR(TimeStamp, '=', Nrs) THEN
          String := COPYSTR(String, 1, P - 1)
      END;
    END;

    LOCAL PROCEDURE GetTimeStamp@1100528400() : Text;
    BEGIN
      // TimeStamp must begin with 2 characters that are no numbers.
      // This combination of characters must occur only once in the TimeStamp
      // to make it possible to remove the TimeStamp again.
      EXIT(STRSUBSTNO(
        '__%1_%2',
        FORMAT(TODAY, 0, '<Closing><Day,2>-<Month,2>-<Year4>'),
        FORMAT(TIME, 0, '<Hours24>-<Minutes,2>-<Seconds,2>')));
    END;

    PROCEDURE PrepareDocumentRegistration@1100527814(SourceFileURI@1100527803 : Text;DocumentTypeCode@1100527802 : Code[20];CreationDate@1100528400 : Date;VAR TargetFileURI@1100527801 : Text;VAR TargetStorageType@1100527800 : Option);
    VAR
      TargetFolderURI@1100527804 : Text;
    BEGIN
      TargetStorageType := GetMainStorageType;
      GetStorageLocationForStorageType(TargetStorageType,'','','',DocumentTypeCode,CreationDate,TargetFolderURI);
      CreateStorageLocationIfNotExists(TargetStorageType,TargetFolderURI);
      TargetFileURI := SourceFileURI;
      GetUniqueFileNameForStorageType(TargetStorageType,TargetFileURI);
      TargetFileURI := TargetFolderURI + TargetFileURI;
    END;

    LOCAL PROCEDURE CopyInternalDocumentToNewVersion@1100527824(DocumentPropertiesNo@1100527800 : Code[20];Description@1100527801 : Text;Version@1100527802 : Integer;ContactNo@1100527803 : Code[20];ContactPersonNo@1100527804 : Code[20];DocumentNo@1100528400 : Code[20];VAR DocumentPropertiesCopy@1100528600 : Record 11012746);
    VAR
      DocumentProperties@1100527805 : Record 11012746;
      DocumentLinkManagement@1100527807 : Codeunit 11012401;
    BEGIN

      IF DocumentProperties.GET(DocumentPropertiesNo) THEN BEGIN
          CopyDocumentCard(DocumentProperties, DocumentPropertiesCopy);
          IF DocumentPropertiesCopy.Description = '' THEN
            DocumentPropertiesCopy.Description := Description;
          DocumentPropertiesCopy.Version := Version;
          DocumentPropertiesCopy.VALIDATE("Contact No.", ContactNo);
          DocumentPropertiesCopy.VALIDATE("Contact Person No.", ContactPersonNo);
          IF DocumentNo <> '' THEN
            DocumentPropertiesCopy."Document No." := DocumentNo;
          DocumentPropertiesCopy.MODIFY;
          DocumentLinkManagement.CopyDocumentLink(DocumentProperties."No.", DocumentPropertiesCopy."No.", FALSE);
          CopyDocumentRelation(DocumentProperties."No.", DocumentPropertiesCopy."No.");
      END;
    END;

    PROCEDURE CopyStorageContent@1210190019(SourceStorageType@1100527800 : Option;TargetStorageType@1100527801 : Option;SourceFileURI@1210190001 : Text;VAR TargetFileURI@1100528700 : Text;VAR ErrorMessage@1100527804 : Text) : Boolean;
    VAR
      MemoryStream@1100527805 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
    BEGIN
      IF (LOWERCASE(SourceFileURI) = LOWERCASE(TargetFileURI)) THEN BEGIN
        ErrorMessage :=Text135;
        EXIT;
      END;

      IF (TargetStorageType = DocumentStorageTypes::"File System on Premise") THEN BEGIN
        IF FileMgt.StorageFileExists(TargetFileURI, TargetStorageType) THEN BEGIN
            IF (SourceFileURI = TargetFileURI) THEN BEGIN
              ErrorMessage :=Text135;
              EXIT;
            END;
        END;
      END;

      MemoryStream := MemoryStream.MemoryStream;

      IF (NOT GetContentFromStorageByStream(SourceStorageType,SourceFileURI,MemoryStream)) THEN BEGIN
        ErrorMessage :=Text136;
        EXIT;
      END;

      IF (NOT PutContentToStorageByStream(MemoryStream,TargetStorageType,TargetFileURI)) THEN BEGIN
         ErrorMessage :=Text135;
        EXIT;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE RenameStorageURI@1100525041(StorageType@1100527800 : Option;SourceFileURI@1100525002 : Text[1024];VAR DestinationFileURI@1100525001 : Text[1024];VAR ErrorMessage@1100525000 : Text) : Boolean;
    BEGIN
      IF (CopyStorageContent(StorageType,StorageType,SourceFileURI,DestinationFileURI,ErrorMessage)) THEN
        EXIT(DeleteStorageURI(StorageType,SourceFileURI));
    END;

    PROCEDURE DeleteStorageURI@1100527822(StorageType@1100527801 : Option;URI@1100527800 : Text) StorageURIDeleted : Boolean;
    VAR
      FileManagement@1100527804 : Codeunit 419;
      AzureFileStorageManagement@1100527803 : Codeunit 11012350;
      DocumentServiceManagement@1100527802 : Codeunit 9510;
      TimeOut@1100528400 : Integer;
    BEGIN
      CASE StorageType OF
        DocumentStorageTypes::"Azure File Storage":
          BEGIN
            AzureFileStorageManagement.DeleteFileByResource(URI);
            StorageURIDeleted := TRUE;
          END;
        DocumentStorageTypes::"File System on Premise":
          BEGIN
            StorageURIDeleted := FileManagement.DeleteClientFile(URI);
            TimeOut := 30000;
            WHILE FileManagement.ClientFileExists(URI) AND (TimeOut > 0) DO BEGIN
              SLEEP(100);      // Workaround to make sure that WriteStreamContentToFile will not fail
              TimeOut -= 100;  // because system thinks that file still exists.
            END;
          END;
        DocumentStorageTypes::"SharePoint Online":
        BEGIN
          DocumentServiceManagement.SetUseDocumentService4PS(TRUE);
          StorageURIDeleted := DocumentServiceManagement.DeleteFile(URI);
        END;
      END;
    END;

    PROCEDURE URIExists@1100527818(StorageType@1100527801 : Option;URI@1100527800 : Text) : Boolean;
    VAR
      FileManagement@1100527802 : Codeunit 419;
      AzureFileStorageManagement@1100527803 : Codeunit 11012350;
    BEGIN
      CASE StorageType OF
        DocumentStorageTypes::"Azure File Storage":
          EXIT(AzureFileStorageManagement.FileExistsByResource(URI));
        DocumentStorageTypes::"File System on Premise":
          EXIT(FileManagement.ClientFileExists(URI));
        DocumentStorageTypes::"SharePoint Online":
          EXIT(TRUE);
        ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE CopyDocumentsByRecordRef@1100527701(VAR FromRecordRef@1100527800 : RecordRef;VAR ToRecordRef@1100527801 : RecordRef);
    VAR
      DocumentLinkManagement@1100527803 : Codeunit 11012401;
      DocumentProperties@1100527804 : Record 11012746;
      DocumentPropertiesTo@1100527806 : Record 11012746;
      DocLinkRIDArray@1100527807 : ARRAY [20] OF RecordID;
      TargetFileName@1100527810 : Text;
      TargetDocumentServiceUrl@1100527809 : Text;
      SourceDirectory@1100527812 : Text;
      ShortFileName@1100527811 : Text;
      FullFileName@1100527815 : Text;
    BEGIN
      DocumentLinkManagement.GetDocuments(DocumentProperties, FromRecordRef);
      DocumentProperties.MARKEDONLY(TRUE);
      IF (DocumentProperties.FINDSET) THEN BEGIN
        REPEAT
          CLEAR(DocLinkRIDArray);
          CLEAR(DocumentPropertiesTo);
          CopyDocumentCard(DocumentProperties, DocumentPropertiesTo);

          IF (DocumentProperties."External Document") THEN BEGIN

      //      IF (DocumentProperties.File <> '') THEN
      //        FullFileName := ExternalDocumentManagement.GetClientFile(DocumentProperties, COMPANYNAME, IsTemporary)
      //      ELSE
      //        FullFileName := DocumentProperties.FileName;

            IF FullFileName <> '' THEN BEGIN
              FileMgt.SplitFileAbsPathName(FullFileName, SourceDirectory, ShortFileName);
              //ExternalDocumentManagement.GetStorageLocation(DocumentProperties."Document Type", TargetDirectory, TargetDocumentServiceDocumentSubdir, COMPANYNAME);
              //ExternalDocumentManagement.MoveCopyUniqueFile(TargetDirectory,TargetDocumentServiceDocumentSubdir, SourceDirectory, ShortFileName, DocumentProperties."Document Service URL", TRUE, TargetFileName,TargetDocumentServiceUrl);

              IF (TargetDocumentServiceUrl <> '') THEN BEGIN
                 DocumentPropertiesTo.VALIDATE("Document Service URL",TargetDocumentServiceUrl);
              END;

              IF (TargetFileName <> '') THEN BEGIN
                 DocumentPropertiesTo.VALIDATE(File,TargetFileName);
              END;
              DocumentPropertiesTo.MODIFY;
            END;
          END ELSE
            CopyDocumentFile(DocumentProperties, DocumentPropertiesTo);


          DocumentLinkManagement.GetAdditionalDocumentLinksFromRecordID(ToRecordRef.RECORDID,DocLinkRIDArray);
          DocumentLinkManagement.CreateDocumentLink(DocumentPropertiesTo,DocLinkRIDArray);
        UNTIL DocumentProperties.NEXT = 0;
      END;
    END;

    PROCEDURE CopyDocumentLinksByRecordRef@1100527700(VAR FromRecordRef@1100527800 : RecordRef;VAR ToRecordRef@1100527801 : RecordRef);
    VAR
      DocumentLinkManagement@1100527803 : Codeunit 11012401;
      DocumentProperties@1100527804 : Record 11012746;
      DocLinkRIDArray@1100527807 : ARRAY [20] OF RecordID;
    BEGIN
      DocumentLinkManagement.GetDocuments(DocumentProperties, FromRecordRef);
      DocumentProperties.MARKEDONLY(TRUE);
      IF (DocumentProperties.FINDSET) THEN BEGIN
        REPEAT
          CLEAR(DocLinkRIDArray);
          DocumentLinkManagement.GetAdditionalDocumentLinksFromRecordID(ToRecordRef.RECORDID,DocLinkRIDArray);
          DocumentLinkManagement.CreateDocumentLink(DocumentProperties,DocLinkRIDArray);
        UNTIL DocumentProperties.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetPrevWordDocumentVersion@1100529600(LocDocumentTemplate@1100529600 : Record 11012401;LocDocumentProperties@1100529611 : Record 11012746;FolderURI@1100529606 : Text;StorageType@1100529605 : Option;DocumentAction@1100529608 : Code[20];VAR MemoryStream@1100529602 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream") : Boolean;
    VAR
      OldFileName@1100529604 : Text;
      OldFileURI@1100529603 : Text;
      i@1100529610 : Integer;
    BEGIN
      IF (UPPERCASE(LocDocumentProperties."File Extension") <> 'PDF') OR (LocDocumentTemplate."Word Template" = '') THEN
        EXIT(FALSE);

      FOR i := 1 TO 2 DO BEGIN
        IF i = 1 THEN
          GetNewDocumentFileName(DocumentAction, LocDocumentTemplate, LocDocumentProperties."Document No.", OldFileName)
        ELSE
          GetNewDocumentFileName(DocumentAction, LocDocumentTemplate, COPYSTR(LocDocumentProperties.Reference, 1, MAXSTRLEN(LocDocumentProperties."Document No.")), OldFileName);
        GetNewVersionFileName(LocDocumentProperties.Version, OldFileName);
        OldFileURI := FolderURI + OldFileName;
        CASE UPPERCASE(FileMgt.GetExtension(LocDocumentTemplate."Word Template")) OF
          'DOCX', 'DOTX':
            OldFileURI += '.docx';
          'DOCM', 'DOTM':
            OldFileURI += '.docm';
          ELSE
            OldFileURI += '.docx';
        END;
        IF URIExists(StorageType, OldFileURI) THEN
          IF GetContentFromStorageByStream(StorageType, OldFileURI, MemoryStream) THEN
            EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    BEGIN
    {
      field4PS01 JD Call 6007 03-11-2006 Permissions checking build in. Now only when Creating documents the permissions are checked (not when
      updating the document). If for a template no permissions are defined, everyone has permission. If permissions are defined for a
      template, then these are taken into account.

      4PS, MVos, 20-05-2010:
       - new function CopyDocument. (Replaced function CopyWordDocument)
       - DocLinkRID : first array is always the source record
                      other arrays are the doc link record
       - ContactRID : first array is contact
                      secoond array is person
       - New functions SetDataItemFilters and LoopDataItemRef

      4PS MVOS 20101005 23172 : - Renamed function CopyDocument to CopyDocumentFile and changed version in filename
                                - Add function CopyDocument (from Word Document form)
                                - Changed parameter in function in function CreateDoc

      --
    }
    END.
  }
}

