OBJECT Codeunit 11126064 Service Portal Rental Mgt. WS
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE GetServiceLocationNo@1100528607(IPostCode@1100528600 : Code[20];IHouseNo@1100528601 : Code[20];IHouseNoExt@1100528602 : Code[10];ITenantID@1100528603 : Code[20]) : Code[20];
    VAR
      ServiceLocation@1100528604 : Record 11012801;
      ObjectImpWorkSheetMgt@1100528605 : Codeunit 11012839;
      PostCode@1100528606 : Code[20];
    BEGIN
      IF NOT ObjectImpWorkSheetMgt.NormalizePostCode(IPostCode, '', PostCode) THEN
        PostCode := IPostCode;
      IF (PostCode = '') OR (IHouseNo = '') OR (ITenantID = '') THEN
        EXIT;
      ServiceLocation.SETRANGE("Post Code", PostCode);
      ServiceLocation.SETRANGE("House No.", IHouseNo);
      ServiceLocation.SETRANGE("House No. Ext.", IHouseNoExt);
      ServiceLocation.SETRANGE("Tenant No.", ITenantID);
      IF ServiceLocation.FINDSET THEN
        IF ServiceLocation.NEXT = 0 THEN
          EXIT(ServiceLocation."No.");
    END;

    [External]
    PROCEDURE GetRooms@1100528600(IServiceLocationNo@1100528600 : Code[20];VAR Rooms@1100528601 : XMLport 11126062) : Boolean;
    BEGIN
      Rooms.SetParams(IServiceLocationNo);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetRoomParts@1100528601(IServiceLocationNo@1100528600 : Code[20];IRoomCode@1100528601 : Code[20];VAR Parts@1100528602 : XMLport 11126063) : Boolean;
    BEGIN
      Parts.SetParams(IServiceLocationNo, IRoomCode);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetProblems@1100528602(IServiceLocationNo@1100528600 : Code[20];IRoomCode@1100528603 : Code[20];IPartCode@1100528604 : Code[20];VAR Problems@1100528601 : XMLport 11126064) : Boolean;
    BEGIN
      Problems.SetParams(IServiceLocationNo, IRoomCode, IPartCode);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetDisciplines@1100528603(IServiceLocationNo@1100528601 : Code[20];IProblemCode@1100529400 : Code[10];VAR Disciplines@1100528600 : XMLport 11126061) : Boolean;
    BEGIN
      Disciplines.SetParams(IServiceLocationNo, IProblemCode);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetAvailableDays@1100528604(IServiceLocationNo@1100528601 : Code[20];IDiscipline@1100528605 : Code[10];IProblem@1100528606 : Code[20];VAR AvailableDays@1100528600 : XMLport 11126065) : Boolean;
    VAR
      ServPortSetup@1100529400 : Record 11126065;
    BEGIN
      ServPortSetup.GET('1');
      AvailableDays.SetParams(IServiceLocationNo, IDiscipline, IProblem, TODAY, TODAY + ServPortSetup."Rental Plan Horizon");
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetAvailableBlocks@1100528605(IServiceLocationNo@1100528604 : Code[20];IDiscipline@1100528602 : Code[10];IProblem@1100528605 : Code[20];ISeekDate@1100528603 : Date;VAR AvailableBlocks@1100528600 : XMLport 11126066) : Boolean;
    BEGIN
      AvailableBlocks.SetParams(IServiceLocationNo, IDiscipline, IProblem, ISeekDate);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE CreateAndPlanServiceOrderFromCall@1100528606(IServiceCallNo@1100528600 : Code[20];VAR OServiceOrderNo@1100528602 : Code[20]) : Boolean;
    VAR
      ServiceCall@1100528601 : Record 11012822;
    BEGIN
      IF NOT CreateServiceOrderFromCall(IServiceCallNo, OServiceOrderNo) THEN
        EXIT(FALSE);
      COMMIT;
      ServiceCall.GET(IServiceCallNo);
      EXIT(ReplanServiceOrder(OServiceOrderNo, ServiceCall."Expected Date", ServiceCall."Planning Agreement Code"));
    END;

    [External]
    PROCEDURE CreateServiceOrderFromCall@1100528619(IServiceCallNo@1100528607 : Code[20];VAR OServiceOrderNo@1100528606 : Code[20]) : Boolean;
    VAR
      ServiceCall@1100528605 : Record 11012822;
    BEGIN
      ServiceCall.GET(IServiceCallNo);
      IF ServiceCall."Service Order No." = '' THEN
        ServiceCall.GenerateServiceOrder(
          ServiceCall."Order Kind", ServiceCall."Order Type", ServiceCall.Discipline, ServiceCall."Trade Speciality", 0DT);
      OServiceOrderNo := ServiceCall."Service Order No.";
      EXIT(OServiceOrderNo <> '');
    END;

    [External]
    PROCEDURE ReplanServiceOrder@1100528611(IServiceOrderNo@1100528600 : Code[20];IStartingDate@1100528602 : Date;IPlanningAgreementCode@1100528601 : Code[10]) : Boolean;
    VAR
      ServiceOrder@1100528603 : Record 11012823;
      PlanningAgreement@1100528604 : Record 11071729;
      TmpResourceAvailPlanTimeBuff@1100528606 : TEMPORARY Record 11071976;
      ServiceOrderPlanManagement@1100528605 : Codeunit 11012868;
    BEGIN
      ServiceOrder.GET(IServiceOrderNo);
      IF PlanningAgreement.GET(IPlanningAgreementCode) THEN BEGIN
        IF ServiceOrder."Starting Date" <> IStartingDate THEN BEGIN
          ServiceOrder."First Possible Starting Date" := IStartingDate;
          ServiceOrder."Last Possible Ending Date" := IStartingDate;
          ServiceOrder."Starting Date" := IStartingDate;
          ServiceOrder."Ending Date" := IStartingDate;
        END;
        IF (ServiceOrder."First Possible Starting Time" <> PlanningAgreement."Starting Time") OR
           (ServiceOrder."Last Possible Ending Time" <> PlanningAgreement."Ending Time") OR
           (ServiceOrder."Starting Time" <> PlanningAgreement."Starting Time")
        THEN BEGIN
          ServiceOrder."First Possible Starting Time" := PlanningAgreement."Starting Time";
          ServiceOrder."Last Possible Ending Time" := PlanningAgreement."Ending Time";
          ServiceOrder."Starting Time" := PlanningAgreement."Starting Time";
          ServiceOrder."Ending Time" := 0T;
        END;
        ServiceOrder.UpdateWorkOrderInfo(-1);
      END;
      ServiceOrder.MODIFY;
      COMMIT;
      ServiceOrder.SETRECFILTER;
      ServiceOrderPlanManagement.GetAvailablePlanTimeBuffer(
        ServiceOrder, ServiceOrder."Starting Date", ServiceOrder."First Possible Starting Date", ServiceOrder."First Possible Starting Time",
        ServiceOrder."Last Possible Ending Date", ServiceOrder."Last Possible Ending Time", 1,
        '', '', 0, 0, FALSE, 1, 0, FALSE, TmpResourceAvailPlanTimeBuff);
      IF TmpResourceAvailPlanTimeBuff.FINDFIRST THEN
        IF NOT ServiceOrderPlanManagement.ReplanServiceOrders(
          ServiceOrder, TmpResourceAvailPlanTimeBuff."Resource No.", ServiceOrder."Starting Date",
          TmpResourceAvailPlanTimeBuff."Plan Starting Time", TmpResourceAvailPlanTimeBuff."Plan Ending Time",
          ServiceOrder."First Possible Starting Time", ServiceOrder."Last Possible Ending Time", 0, 0T,
          0, FALSE, FALSE, 1, FALSE)
        THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetOpenServiceOrders@1100528608(IServiceLocationNo@1100528600 : Code[20];ITenantNo@1100528601 : Code[20];VAR ServiceOrders@1100528602 : XMLport 11126067);
    VAR
      ServiceOrder@1100528603 : Record 11012823;
    BEGIN
      ServiceOrder.SETRANGE("Service Location No.", IServiceLocationNo);
      ServiceOrder.SETRANGE("Tenant No.", ITenantNo);
      ServiceOrders.SETTABLEVIEW(ServiceOrder);
    END;

    [External]
    PROCEDURE CancelServiceOrder@1100528609(IServiceOrderNo@1100528600 : Code[20]) : Boolean;
    VAR
      ServiceOrder@1100528601 : Record 11012823;
    BEGIN
      ServiceOrder.GET(IServiceOrderNo);
      ServiceOrder.TESTFIELD(Status, ServiceOrder.Status::Open);
      ServiceOrder.VALIDATE(Status, ServiceOrder.Status::Cancelled);
      ServiceOrder.HandleStatusChange;
      ServiceOrder.MODIFY(TRUE);
      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

