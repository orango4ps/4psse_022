OBJECT Codeunit 6086318 EM Dimension Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EMW17.00.00.3.00.01,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GLSetupShortcutDimCode@1001 : ARRAY [8] OF Code[20];
      HasGotGLSetup@1000 : Boolean;
      Text001@1006 : TextConst 'DEU=%1 Standarddimensionskontrolle:;ENU="%1 default dimension check: ";NLD="%1 standaarddimensiecontrole: "';
      Text004@1005 : TextConst 'DEU=WÑhlen Sie einen %1 fÅr den %2 %3 fÅr %4 %5 aus.;ENU=Select a %1 for the %2 %3 for %4 %5.;NLD=Selecteer een %1 voor de %2 %3 voor %4 %5.;SVE=VÑlj %1 fîr %2 %3 till %4 %5.';
      Text005@1004 : TextConst 'DEU=WÑhlen Sie einen %1 %2 fÅr den %3 %4 fÅr %5 %6 aus.;ENU=Select %1 %2 for the %3 %4 for %5 %6.;NLD=Selecteer %1 %2 voor de %3 %4 voor %5 %6.;SVE=VÑlj %1 %2 fîr %3 %4 till %5 %6.';
      Text006@1003 : TextConst 'DEU=Der %1 %2 muss fÅr %3 %4 leer sein.;ENU=%1 %2 must be blank for %3 %4.;NLD=%1 %2 moet leeg zijn voor %3 %4.;SVE=%1 %2 mÜste vara blank fîr %3 %4.';
      Text007@1002 : TextConst 'DEU=Der %1 %2 darf fÅr %3 %4 nicht angegeben werden.;ENU=%1 %2 must not be mentioned for %3 %4.;NLD=%1 %2 mag niet worden genoemd voor %3 %4.;SVE=%1 %2 fÜr inte nÑmnas fîr %3 %4.';
      AllocationEntryTxt@6086300 : TextConst 'DEU=Verteilung mit %1 %2:;ENU="Allocation with %1 %2 - ";NLD=Allocatie met %1 %2:';

    PROCEDURE UpdateDimension@6085573(DimSetID@6085574 : Integer;DimCode@6085575 : Code[20];DimValueCode@6085576 : Code[20]) : Integer;
    VAR
      TempDimSetEntry@6085573 : TEMPORARY Record 480;
      DimMgt@6085577 : Codeunit 408;
    BEGIN
      DimMgt.GetDimensionSet(TempDimSetEntry,DimSetID);

      IF TempDimSetEntry.GET(DimSetID,DimCode) THEN BEGIN
        IF TempDimSetEntry."Dimension Value Code" <> DimValueCode THEN BEGIN
          TempDimSetEntry.VALIDATE("Dimension Value Code",DimValueCode);
          TempDimSetEntry.MODIFY(TRUE);
        END;
      END ELSE BEGIN
        TempDimSetEntry.INIT;
        TempDimSetEntry."Dimension Set ID" := DimSetID;
        TempDimSetEntry.VALIDATE("Dimension Code",DimCode);
        TempDimSetEntry.VALIDATE("Dimension Value Code",DimValueCode);
        TempDimSetEntry.INSERT(TRUE);
      END;

      EXIT(DimMgt.GetDimensionSetID(TempDimSetEntry));
    END;

    PROCEDURE InsertGenJnlLineDim@6(VAR GenJnlLine@1002 : Record 81;DimCode@1001 : Code[20];DimValueCode@1000 : Code[20]);
    VAR
      GLSetup@1160040006 : Record 98;
    BEGIN
      GLSetup.GET;

      CASE DimCode OF
        GLSetup."Global Dimension 1 Code":
          GenJnlLine.VALIDATE("Shortcut Dimension 1 Code",DimValueCode);
        GLSetup."Global Dimension 2 Code":
          GenJnlLine.VALIDATE("Shortcut Dimension 2 Code",DimValueCode);
        ELSE BEGIN
          GenJnlLine."Dimension Set ID" := UpdateDimension(GenJnlLine."Dimension Set ID",DimCode,DimValueCode);
          GenJnlLine.MODIFY;
        END;
      END;
    END;

    PROCEDURE CopyExpDimToJnlLine@5(VAR Expense@1160040001 : Record 6086320;VAR GenJnlLine@1160040002 : Record 81);
    VAR
      EMDim@1160040000 : Record 6086360;
    BEGIN
      EMDim.SETCURRENTKEY("Table ID","Document Type","Document No.","Doc. Ref. No.");
      EMDim.SETRANGE("Table ID",DATABASE::Expense);
      EMDim.SETRANGE("Document Type",0);
      EMDim.SETRANGE("Document No.",'');
      EMDim.SETRANGE("Doc. Ref. No.",Expense."Entry No.");
      EMDim.SETFILTER("Dimension Code",'<>%1','');
      IF EMDim.FINDFIRST THEN
        REPEAT
          InsertGenJnlLineDim(GenJnlLine,EMDim."Dimension Code",EMDim."Dimension Value Code");
        UNTIL EMDim.NEXT = 0;
    END;

    PROCEDURE CopyExpAllocDimToJnlLine@4(VAR ExpenseAllocation@1160040001 : Record 6086321;VAR GenJnlLine@1160040002 : Record 81);
    VAR
      ExpAllocationDim@1000 : Record 6086357;
    BEGIN
      ExpAllocationDim.SETRANGE("Expense Allocation Entry No.",ExpenseAllocation."Entry No.");
      IF ExpAllocationDim.FINDFIRST THEN
        REPEAT
          InsertGenJnlLineDim(GenJnlLine,ExpAllocationDim."Dimension Code",ExpAllocationDim."Dimension Value Code");
        UNTIL ExpAllocationDim.NEXT = 0;
    END;

    PROCEDURE InsertPurchLineDim@3(VAR PurchLine@1160040004 : Record 39;DimCode@1160040002 : Code[20];DimValueCode@1160040001 : Code[20]);
    VAR
      GLSetup@1160040006 : Record 98;
    BEGIN
      GLSetup.GET;

      CASE DimCode OF
        GLSetup."Global Dimension 1 Code":
          PurchLine.VALIDATE("Shortcut Dimension 1 Code",DimValueCode);
        GLSetup."Global Dimension 2 Code":
          PurchLine.VALIDATE("Shortcut Dimension 2 Code",DimValueCode);
        ELSE BEGIN
          PurchLine."Dimension Set ID" := UpdateDimension(PurchLine."Dimension Set ID",DimCode,DimValueCode);
          PurchLine.MODIFY;
        END;
      END;
    END;

    PROCEDURE CopyExpDimToPurchLine@1160040007(VAR Expense@1160040001 : Record 6086320;VAR PurchLine@1160040002 : Record 39);
    VAR
      EMDim@1160040000 : Record 6086360;
    BEGIN
      EMDim.SETCURRENTKEY("Table ID","Document Type","Document No.","Doc. Ref. No.");
      EMDim.SETRANGE("Table ID",DATABASE::Expense);
      EMDim.SETRANGE("Document Type",0);
      EMDim.SETRANGE("Document No.",'');
      EMDim.SETRANGE("Doc. Ref. No.",Expense."Entry No.");
      EMDim.SETFILTER("Dimension Code",'<>%1','');
      IF EMDim.FINDFIRST THEN
        REPEAT
          InsertPurchLineDim(PurchLine,EMDim."Dimension Code",EMDim."Dimension Value Code");
        UNTIL EMDim.NEXT = 0;
    END;

    PROCEDURE CopyExpAllocDimToPurchLine@2(VAR ExpenseAllocation@1160040001 : Record 6086321;VAR PurchLine@1160040002 : Record 39);
    VAR
      ExpAllocationDim@1000 : Record 6086357;
    BEGIN
      ExpAllocationDim.SETRANGE("Expense Allocation Entry No.",ExpenseAllocation."Entry No.");
      IF ExpAllocationDim.FINDFIRST THEN
        REPEAT
          InsertPurchLineDim(PurchLine,ExpAllocationDim."Dimension Code",ExpAllocationDim."Dimension Value Code");
        UNTIL ExpAllocationDim.NEXT = 0;
    END;

    PROCEDURE InsertDimOnExpense@10(VAR Expense@1160040000 : Record 6086320;DimCode@1160040004 : Code[20];DimValueCode@1160040005 : Code[20]);
    VAR
      GLSetup@1160040006 : Record 98;
      EMDim@1160040001 : Record 6086360;
    BEGIN
      GLSetup.GET;

      CASE DimCode OF
        GLSetup."Global Dimension 1 Code":
          Expense.VALIDATE("Global Dimension 1 Code",DimValueCode);
        GLSetup."Global Dimension 2 Code":
          Expense.VALIDATE("Global Dimension 2 Code",DimValueCode);
        ELSE
          IF EMDim.GET(DATABASE::Expense,0,'',Expense."Entry No.",DimCode,'') THEN BEGIN
            EMDim."Dimension Value Code" := DimValueCode;
            EMDim.MODIFY;
          END ELSE BEGIN
            EMDim."Table ID" := DATABASE::Expense;
            EMDim."Document Type" := 0;
            EMDim."Document No." := '';
            EMDim."Doc. Ref. No." := Expense."Entry No.";
            EMDim."Dimension Code" := DimCode;
            EMDim."Dimension Value Code" := DimValueCode;
            EMDim.INSERT;
          END;
      END;
    END;

    PROCEDURE DeleteDimOnExpense@11(VAR Expense@1160040000 : Record 6086320;DimCode@1160040004 : Code[20];DimValueCode@1160040005 : Code[20]);
    VAR
      GLSetup@1160040006 : Record 98;
      EMDim@1160040001 : Record 6086360;
    BEGIN
      GLSetup.GET;

      CASE DimCode OF
        GLSetup."Global Dimension 1 Code":
          Expense.VALIDATE("Global Dimension 1 Code",DimValueCode);
        GLSetup."Global Dimension 2 Code":
          Expense.VALIDATE("Global Dimension 2 Code",DimValueCode);
        ELSE
          IF EMDim.GET(DATABASE::Expense,0,'',Expense."Entry No.",DimCode,'') THEN
            EMDim.DELETE;
      END;
    END;

    PROCEDURE InsertDimOnMileage@14(VAR Mileage@1160040002 : Record 6086338;DimCode@1160040001 : Code[20];DimValueCode@1160040000 : Code[20]);
    VAR
      GLSetup@1160040004 : Record 98;
      EMDim@1160040003 : Record 6086360;
    BEGIN
      GLSetup.GET;

      CASE DimCode OF
        GLSetup."Global Dimension 1 Code":
          Mileage.VALIDATE("Global Dimension 1 Code",DimValueCode);
        GLSetup."Global Dimension 2 Code":
          Mileage.VALIDATE("Global Dimension 2 Code",DimValueCode);
        ELSE
          IF EMDim.GET(DATABASE::Mileage,0,'',Mileage."Entry No.",DimCode,'') THEN BEGIN
            EMDim."Dimension Value Code" := DimValueCode;
            EMDim.MODIFY;
          END ELSE BEGIN
            EMDim."Table ID" := DATABASE::Mileage;
            EMDim."Document Type" := 0;
            EMDim."Document No." := '';
            EMDim."Doc. Ref. No." := Mileage."Entry No.";
            EMDim."Dimension Code" := DimCode;
            EMDim."Dimension Value Code" := DimValueCode;
            EMDim.INSERT;
          END;
      END;
    END;

    PROCEDURE DeleteDimOnMileage@15(VAR Mileage@1160040002 : Record 6086338;DimCode@1160040001 : Code[20];DimValueCode@1160040000 : Code[20]);
    VAR
      GLSetup@1160040004 : Record 98;
      EMDim@1160040003 : Record 6086360;
    BEGIN
      GLSetup.GET;

      CASE DimCode OF
        GLSetup."Global Dimension 1 Code":
          Mileage.VALIDATE("Global Dimension 1 Code",DimValueCode);
        GLSetup."Global Dimension 2 Code":
          Mileage.VALIDATE("Global Dimension 2 Code",DimValueCode);
        ELSE
          IF EMDim.GET(DATABASE::Mileage,0,'',Mileage."Entry No.",DimCode,'') THEN
            EMDim.DELETE;
      END;
    END;

    PROCEDURE LookupGlobalDim@1160040014(VAR Text@1160040001 : Text[1024];DimNo@1160040000 : Integer) : Boolean;
    VAR
      GLSetup@1160040004 : Record 98;
      DimValue@1160040003 : Record 349;
      DimCode@1160040002 : Code[20];
    BEGIN
      GLSetup.GET;
      IF DimNo = 1 THEN
        DimCode := GLSetup."Global Dimension 1 Code"
      ELSE
        IF DimNo = 2 THEN
          DimCode := GLSetup."Global Dimension 2 Code";

      IF DimCode = '' THEN
        EXIT;

      DimValue.SETRANGE("Dimension Code",DimCode);
      IF DimValue.GET(DimCode,Text) THEN;

      IF PAGE.RUNMODAL(0,DimValue) = ACTION::LookupOK THEN BEGIN
        Text := DimValue.Code;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE CopyMilDimToJnlLine@1160040022(VAR Mileage@1160040001 : Record 6086338;VAR GenJnlLine@1160040002 : Record 81);
    VAR
      EMDim@1160040000 : Record 6086360;
    BEGIN
      EMDim.SETCURRENTKEY("Table ID","Document Type","Document No.","Doc. Ref. No.");
      EMDim.SETRANGE("Table ID",DATABASE::Mileage);
      EMDim.SETRANGE("Document Type",0);
      EMDim.SETRANGE("Document No.",'');
      EMDim.SETRANGE("Doc. Ref. No.",Mileage."Entry No.");
      EMDim.SETFILTER("Dimension Code",'<>%1','');
      IF EMDim.FINDFIRST THEN
        REPEAT
          InsertGenJnlLineDim(GenJnlLine,EMDim."Dimension Code",EMDim."Dimension Value Code");
        UNTIL EMDim.NEXT = 0;
    END;

    PROCEDURE CopyMilDimToPurchLine@1160040019(VAR Mileage@1160040001 : Record 6086338;VAR PurchLine@1160040002 : Record 39);
    VAR
      EMDim@1160040000 : Record 6086360;
    BEGIN
      EMDim.SETCURRENTKEY("Table ID","Document Type","Document No.","Doc. Ref. No.");
      EMDim.SETRANGE("Table ID",DATABASE::Mileage);
      EMDim.SETRANGE("Document Type",0);
      EMDim.SETRANGE("Document No.",'');
      EMDim.SETRANGE("Doc. Ref. No.",Mileage."Entry No.");
      EMDim.SETFILTER("Dimension Code",'<>%1','');
      IF EMDim.FINDFIRST THEN
        REPEAT
          InsertPurchLineDim(PurchLine,EMDim."Dimension Code",EMDim."Dimension Value Code");
        UNTIL EMDim.NEXT = 0;
    END;

    PROCEDURE UpdateEMDimForGlobalDim@1160040016(TableID@1160040002 : Integer;DocumentType@1001 : Integer;DocumentNo@1160040003 : Code[20];DocRefNo@1000 : Integer;GlobalDimensionNo@1160040000 : Integer;DimValue@1160040005 : Code[20]);
    VAR
      GLSetup@1160040006 : Record 98;
      EMDim@1160040001 : Record 6086360;
      DimCode@1160040004 : Code[20];
    BEGIN
      GLSetup.GET;
      IF GlobalDimensionNo = 1 THEN
        DimCode := GLSetup."Global Dimension 1 Code"
      ELSE
        DimCode := GLSetup."Global Dimension 2 Code";

      IF DimValue = '' THEN BEGIN
        IF EMDim.GET(TableID,DocumentType,DocumentNo,DocRefNo,DimCode,'') THEN
          EMDim.DELETE;
      END ELSE
        IF EMDim.GET(TableID,DocumentType,DocumentNo,DocRefNo,DimCode,'') THEN BEGIN
          EMDim."Dimension Value Code" := DimValue;
          EMDim.MODIFY;
        END ELSE BEGIN
          EMDim.INIT;
          EMDim."Table ID" := TableID;
          EMDim."Document Type" := DocumentType;
          EMDim."Document No." := DocumentNo;
          EMDim."Doc. Ref. No." := DocRefNo;
          EMDim."Dimension Code" := DimCode;
          EMDim."Dimension Value Code" := DimValue;
          EMDim.INSERT;
        END;
    END;

    PROCEDURE DimensionExistsAsFieldType@1160040017(DimCode@1160040000 : Code[20]) : Boolean;
    VAR
      TableFilterField@1160040002 : Record 6086348;
    BEGIN
      TableFilterField.SETRANGE("Table No.",DATABASE::"Dimension Value");
      TableFilterField.SETRANGE("Value (Text)",DimCode);
      EXIT(TableFilterField.FINDFIRST);
    END;

    PROCEDURE UpdateEMDimInboxForGlobalDim@6086300(TableID@1160040002 : Integer;DocumentType@1001 : Integer;DocumentNo@1160040003 : Code[20];DocRefNo@1000 : Integer;GlobalDimensionNo@1160040000 : Integer;DimValue@1160040005 : Code[20]);
    VAR
      GLSetup@1160040006 : Record 98;
      EMDimInbox@1160040001 : Record 6086362;
      DimCode@1160040004 : Code[20];
    BEGIN
      GLSetup.GET;
      IF GlobalDimensionNo = 1 THEN
        DimCode := GLSetup."Global Dimension 1 Code"
      ELSE
        DimCode := GLSetup."Global Dimension 2 Code";

      IF DimensionExistsAsFieldType(DimCode) THEN
        IF DimValue = '' THEN BEGIN
          IF EMDimInbox.GET(TableID,DocumentType,DocumentNo,DocRefNo,DimCode,'') THEN
            EMDimInbox.DELETE;
        END ELSE
          IF EMDimInbox.GET(TableID,DocumentType,DocumentNo,DocRefNo,DimCode,'') THEN BEGIN
            EMDimInbox."Dimension Value Code" := DimValue;
            EMDimInbox.MODIFY;
          END ELSE BEGIN
            EMDimInbox.INIT;
            EMDimInbox."Table ID" := TableID;
            EMDimInbox."Document Type" := DocumentType;
            EMDimInbox."Document No." := DocumentNo;
            EMDimInbox."Doc. Ref. No." := DocRefNo;
            EMDimInbox."Dimension Code" := DimCode;
            EMDimInbox."Dimension Value Code" := DimValue;
            EMDimInbox.INSERT;
          END;
    END;

    PROCEDURE "-- Default Dimension --"@1160040025();
    BEGIN
    END;

    PROCEDURE ValidateDimValueCode@22(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimMgt@1160040000 : Codeunit 408;
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE SaveDefaultDim@53(TableID@1000 : Integer;No@1001 : Code[20];FieldNumber@1002 : Integer;VAR ShortcutDimCode@1003 : Code[20]);
    VAR
      DefaultDim@1004 : Record 6086368;
    BEGIN
      GetGLSetup;
      IF ShortcutDimCode <> '' THEN BEGIN
        IF DefaultDim.GET(TableID,No,GLSetupShortcutDimCode[FieldNumber]) THEN BEGIN
          DefaultDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          DefaultDim.MODIFY;
        END ELSE BEGIN
          DefaultDim.INIT;
          DefaultDim.VALIDATE("Table ID",TableID);
          DefaultDim.VALIDATE("No.",No);
          DefaultDim.VALIDATE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
          DefaultDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          DefaultDim.INSERT;
        END;
      END ELSE
        IF DefaultDim.GET(TableID,No,GLSetupShortcutDimCode[FieldNumber]) THEN
          DefaultDim.DELETE;
    END;

    LOCAL PROCEDURE GetGLSetup@52();
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      IF NOT HasGotGLSetup THEN BEGIN
        GLSetup.GET;
        GLSetupShortcutDimCode[1] := GLSetup."Shortcut Dimension 1 Code";
        GLSetupShortcutDimCode[2] := GLSetup."Shortcut Dimension 2 Code";
        GLSetupShortcutDimCode[3] := GLSetup."Shortcut Dimension 3 Code";
        GLSetupShortcutDimCode[4] := GLSetup."Shortcut Dimension 4 Code";
        GLSetupShortcutDimCode[5] := GLSetup."Shortcut Dimension 5 Code";
        GLSetupShortcutDimCode[6] := GLSetup."Shortcut Dimension 6 Code";
        GLSetupShortcutDimCode[7] := GLSetup."Shortcut Dimension 7 Code";
        GLSetupShortcutDimCode[8] := GLSetup."Shortcut Dimension 8 Code";
        HasGotGLSetup := TRUE;
      END;
    END;

    PROCEDURE SetupObjectNoList@40(VAR TempObject@1000 : TEMPORARY Record 2000000001);
    VAR
      Object@1001 : Record 2000000001;
      TableIDArray@1003 : ARRAY [23] OF Integer;
      Index@1004 : Integer;
    BEGIN
      TableIDArray[1] := DATABASE::"Expense Type";

      Object.SETRANGE(Type,Object.Type::Table);

      FOR Index := 1 TO ARRAYLEN(TableIDArray) DO BEGIN
        Object.SETRANGE(ID,TableIDArray[Index]);
        IF Object.FINDFIRST THEN BEGIN
          TempObject := Object;
          TempObject.INSERT;
        END;
      END;
    END;

    PROCEDURE InsertDefaultDimExpense@1160040024(TableID@1160040003 : Integer;AccountNo@1160040000 : Code[20];VAR Expense@1160040001 : Record 6086320);
    VAR
      EMDefaultDimTemp@1160040002 : TEMPORARY Record 6086368;
    BEGIN
      GetDefaultDimsForAccount(TableID,AccountNo,EMDefaultDimTemp);
      EMDefaultDimTemp.SETFILTER("Dimension Value Code",'<>%1','');
      IF EMDefaultDimTemp.FINDSET THEN
        REPEAT
          InsertDimOnExpense(Expense,EMDefaultDimTemp."Dimension Code",EMDefaultDimTemp."Dimension Value Code");
        UNTIL EMDefaultDimTemp.NEXT = 0;
    END;

    PROCEDURE DeleteDefaultDimExpense@1160040023(TableID@1160040004 : Integer;AccountNo@1160040003 : Code[20];VAR Expense@1160040001 : Record 6086320);
    VAR
      EMDefaultDimTemp@1000 : TEMPORARY Record 6086368;
    BEGIN
      GetDefaultDimsForAccount(TableID,AccountNo,EMDefaultDimTemp);
      EMDefaultDimTemp.SETFILTER("Dimension Value Code",'<>%1','');
      IF EMDefaultDimTemp.FINDSET THEN
        REPEAT
          DeleteDimOnExpense(Expense,EMDefaultDimTemp."Dimension Code",'');
        UNTIL EMDefaultDimTemp.NEXT = 0;
    END;

    PROCEDURE InsertDefaultDimMileage@1160040031(TableID@1160040003 : Integer;AccountNo@1160040000 : Code[20];VAR Mileage@1160040001 : Record 6086338);
    VAR
      EMDefaultDimTemp@1000 : TEMPORARY Record 6086368;
    BEGIN
      GetDefaultDimsForAccount(TableID,AccountNo,EMDefaultDimTemp);
      EMDefaultDimTemp.SETFILTER("Dimension Value Code",'<>%1','');
      IF EMDefaultDimTemp.FINDSET THEN
        REPEAT
          InsertDimOnMileage(Mileage,EMDefaultDimTemp."Dimension Code",EMDefaultDimTemp."Dimension Value Code");
        UNTIL EMDefaultDimTemp.NEXT = 0;
    END;

    PROCEDURE DeleteDefaultDimMileage@1160040030(TableID@1160040004 : Integer;AccountNo@1160040003 : Code[20];VAR Mileage@1160040000 : Record 6086338);
    VAR
      EMDefaultDimTemp@1000 : TEMPORARY Record 6086368;
    BEGIN
      GetDefaultDimsForAccount(TableID,AccountNo,EMDefaultDimTemp);
      EMDefaultDimTemp.SETFILTER("Dimension Value Code",'<>%1','');
      IF EMDefaultDimTemp.FINDSET THEN
        REPEAT
          DeleteDimOnMileage(Mileage,EMDefaultDimTemp."Dimension Code",'');
        UNTIL EMDefaultDimTemp.NEXT = 0;
    END;

    PROCEDURE InsertDefaultDimExpHeader@1160040029(TableID@1160040003 : Integer;AccountNo@1160040000 : Code[20];VAR ExpHeader@1160040001 : Record 6086339);
    VAR
      EMDefaultDimTemp@1000 : TEMPORARY Record 6086368;
    BEGIN
      GetDefaultDimsForAccount(TableID,AccountNo,EMDefaultDimTemp);
      EMDefaultDimTemp.SETFILTER("Dimension Value Code",'<>%1','');
      IF EMDefaultDimTemp.FINDSET THEN
        REPEAT
          InsertDimOnExpHeader(ExpHeader,EMDefaultDimTemp."Dimension Code",EMDefaultDimTemp."Dimension Value Code");
        UNTIL EMDefaultDimTemp.NEXT = 0;
    END;

    PROCEDURE DeleteDefaultDimExpHeader@1160040012(TableID@1160040004 : Integer;AccountNo@1160040003 : Code[20];VAR ExpHeader@1160040000 : Record 6086339);
    VAR
      EMDefaultDimTemp@1000 : TEMPORARY Record 6086368;
    BEGIN
      GetDefaultDimsForAccount(TableID,AccountNo,EMDefaultDimTemp);
      EMDefaultDimTemp.SETFILTER("Dimension Value Code",'<>%1','');
      IF EMDefaultDimTemp.FINDSET THEN
        REPEAT
          DeleteDimOnExpHeader(ExpHeader,EMDefaultDimTemp."Dimension Code",'');
        UNTIL EMDefaultDimTemp.NEXT = 0;
    END;

    PROCEDURE InsertDimOnExpHeader@1160040033(VAR ExpHeader@1160040002 : Record 6086339;DimCode@1160040004 : Code[20];DimValueCode@1160040005 : Code[20]);
    VAR
      GLSetup@1160040006 : Record 98;
      EMDim@1160040001 : Record 6086360;
    BEGIN
      GLSetup.GET;

      CASE DimCode OF
        GLSetup."Global Dimension 1 Code":
          ExpHeader.VALIDATE("Global Dimension 1 Code",DimValueCode);
        GLSetup."Global Dimension 2 Code":
          ExpHeader.VALIDATE("Global Dimension 2 Code",DimValueCode);
        ELSE
          IF EMDim.GET(DATABASE::"Expense Header",ExpHeader."Document Type",ExpHeader."No.",0,DimCode,'') THEN BEGIN
            EMDim."Dimension Value Code" := DimValueCode;
            EMDim.MODIFY;
          END ELSE BEGIN
            EMDim."Table ID" := DATABASE::"Expense Header";
            EMDim."Document Type" := ExpHeader."Document Type";
            EMDim."Document No." := ExpHeader."No.";
            EMDim."Doc. Ref. No." := 0;
            EMDim."Dimension Code" := DimCode;
            EMDim."Dimension Value Code" := DimValueCode;
            EMDim.INSERT;
          END;
      END;
    END;

    PROCEDURE DeleteDimOnExpHeader@1160040032(VAR ExpHeader@1160040000 : Record 6086339;DimCode@1160040004 : Code[20];DimValueCode@1160040005 : Code[20]);
    VAR
      GLSetup@1160040006 : Record 98;
      EMDim@1160040001 : Record 6086360;
    BEGIN
      GLSetup.GET;

      CASE DimCode OF
        GLSetup."Global Dimension 1 Code":
          ExpHeader.VALIDATE("Global Dimension 1 Code",DimValueCode);
        GLSetup."Global Dimension 2 Code":
          ExpHeader.VALIDATE("Global Dimension 2 Code",DimValueCode);
        ELSE
          IF EMDim.GET(DATABASE::"Expense Header",ExpHeader."Document Type",ExpHeader."No.",0,DimCode,'') THEN
            EMDim.DELETE;
      END;
    END;

    PROCEDURE CheckDefaultDim@13(VAR ValidationText@1160040004 : Text[250];TableID@1160040009 : Integer;DocType@1000 : Integer;DocNo@1001 : Code[20];DocRefNo@1160040008 : Integer;DimTableID@1160040007 : Integer;DimNo@1160040006 : Code[20]) : Boolean;
    VAR
      EMDefaultDimTemp@6086301 : TEMPORARY Record 6086368;
      ExpenseAlloc@1160040003 : Record 6086321;
      ExpenseAllocDim@1160040000 : Record 6086357;
      EMDim@1160040001 : Record 6086360;
      ObjTransl@1160040005 : Record 377;
    BEGIN
      GetDefaultDimsForAccount(TableID,DimNo,EMDefaultDimTemp);

      EMDefaultDimTemp.SETCURRENTKEY("Table ID");
      EMDefaultDimTemp.SETRANGE("Table ID",DimTableID);
      EMDefaultDimTemp.SETRANGE("No.",DimNo);
      IF EMDefaultDimTemp.FINDSET THEN
        REPEAT
          CASE EMDefaultDimTemp."Value Posting" OF
            EMDefaultDimTemp."Value Posting"::"No Code":
              IF EMDim.GET(TableID,DocType,DocNo,DocRefNo,EMDefaultDimTemp."Dimension Code",'') THEN BEGIN
                ValidationText :=
                  STRSUBSTNO(
                    Text001,
                    ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                    EMDefaultDimTemp."No.")
                    +
                  STRSUBSTNO(
                    Text007,
                    EMDefaultDimTemp.FIELDCAPTION("Dimension Code"),
                    EMDefaultDimTemp."Dimension Code",
                    ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                    EMDefaultDimTemp."No.");
                EXIT(FALSE);
              END;

            EMDefaultDimTemp."Value Posting"::"Same Code":
              IF NOT EMDim.GET(TableID,DocType,DocNo,DocRefNo,EMDefaultDimTemp."Dimension Code",'') THEN BEGIN
                ValidationText :=
                  STRSUBSTNO(
                    Text001,
                    ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                    EMDefaultDimTemp."No.")
                  +
                  STRSUBSTNO(
                    Text004,
                    EMDefaultDimTemp.FIELDCAPTION("Dimension Value Code"),
                    EMDefaultDimTemp.FIELDCAPTION("Dimension Code"),
                    EMDefaultDimTemp."Dimension Code",
                    ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                    EMDefaultDimTemp."No.");
                EXIT(FALSE);
              END ELSE
                IF EMDefaultDimTemp."Dimension Value Code" <> '' THEN BEGIN
                  IF EMDim."Dimension Value Code" <> EMDefaultDimTemp."Dimension Value Code" THEN BEGIN
                    ValidationText :=
                      STRSUBSTNO(
                        Text001,
                        ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                        EMDefaultDimTemp."No.")
                      +
                      STRSUBSTNO(
                        Text005,
                        EMDefaultDimTemp.FIELDCAPTION("Dimension Value Code"),
                        EMDefaultDimTemp."Dimension Value Code",
                        EMDefaultDimTemp.FIELDCAPTION("Dimension Code"),
                        EMDefaultDimTemp."Dimension Code",
                        ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                        EMDefaultDimTemp."No.");
                    EXIT(FALSE);
                  END;
                END ELSE BEGIN
                  ValidationText :=
                    STRSUBSTNO(
                      Text001,
                      ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                      EMDefaultDimTemp."No.")
                    +
                    STRSUBSTNO(
                      Text006,
                      EMDefaultDimTemp.FIELDCAPTION("Dimension Code"),
                      EMDefaultDimTemp."Dimension Code",
                      ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                      EMDefaultDimTemp."No.");
                  EXIT(FALSE);
                END;

            EMDefaultDimTemp."Value Posting"::"Code Mandatory":
              IF NOT EMDim.GET(TableID,DocType,DocNo,DocRefNo,EMDefaultDimTemp."Dimension Code",'') THEN BEGIN
                ValidationText :=
                  STRSUBSTNO(
                    Text001,
                    ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                    EMDefaultDimTemp."No.")
                  +
                  STRSUBSTNO(
                    Text004,
                    EMDefaultDimTemp.FIELDCAPTION("Dimension Value Code"),
                    EMDefaultDimTemp.FIELDCAPTION("Dimension Code"),
                    EMDefaultDimTemp."Dimension Code",
                    ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                    EMDefaultDimTemp."No.");
                EXIT(FALSE);
              END;
          END;

        UNTIL EMDefaultDimTemp.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE CheckDefaultDimForAllocation@12(VAR ValidationText@6086303 : Text[250];ExpAllocationEntryNo@6086302 : Integer;DimTableID@6086301 : Integer;DimNo@6086300 : Code[20]) : Boolean;
    VAR
      EMDefaultDimTemp@6086305 : TEMPORARY Record 6086368;
      ExpenseAlloc@1160040003 : Record 6086321;
      ExpenseAllocDim@1160040000 : Record 6086357;
      EMDim@1160040001 : Record 6086360;
      ObjTransl@1160040005 : Record 377;
    BEGIN
      GetDefaultDimsForAccount(DimTableID,DimNo,EMDefaultDimTemp);

      EMDefaultDimTemp.SETCURRENTKEY("Table ID");
      EMDefaultDimTemp.SETRANGE("Table ID",DimTableID);
      EMDefaultDimTemp.SETRANGE("No.",DimNo);
      IF EMDefaultDimTemp.FINDSET THEN
        REPEAT
          CASE EMDefaultDimTemp."Value Posting" OF
            EMDefaultDimTemp."Value Posting"::"No Code":
              IF ExpenseAllocDim.GET(ExpAllocationEntryNo,EMDefaultDimTemp."Dimension Code") THEN BEGIN
                ValidationText :=
                  STRSUBSTNO(
                    Text001,
                    ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                    EMDefaultDimTemp."No.")
                  +
                  STRSUBSTNO(AllocationEntryTxt,ExpenseAlloc.FIELDCAPTION("Entry No."),ExpAllocationEntryNo) +
                  STRSUBSTNO(
                    Text007,
                    EMDefaultDimTemp.FIELDCAPTION("Dimension Code"),
                    EMDefaultDimTemp."Dimension Code",
                    ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                    EMDefaultDimTemp."No.");
                EXIT(FALSE);
              END;

            EMDefaultDimTemp."Value Posting"::"Same Code":
              IF NOT ExpenseAllocDim.GET(ExpAllocationEntryNo,EMDefaultDimTemp."Dimension Code") THEN BEGIN
                ValidationText :=
                  STRSUBSTNO(
                    Text001,
                    ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                    EMDefaultDimTemp."No.")
                  +
                  STRSUBSTNO(AllocationEntryTxt,ExpenseAlloc.FIELDCAPTION("Entry No."),ExpAllocationEntryNo) +
                  STRSUBSTNO(
                    Text004,
                    EMDefaultDimTemp.FIELDCAPTION("Dimension Value Code"),
                    EMDefaultDimTemp.FIELDCAPTION("Dimension Code"),
                    EMDefaultDimTemp."Dimension Code",
                    ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                    EMDefaultDimTemp."No.");
                EXIT(FALSE);
              END ELSE
                IF EMDefaultDimTemp."Dimension Value Code" <> '' THEN BEGIN
                  IF ExpenseAllocDim."Dimension Value Code" <> EMDefaultDimTemp."Dimension Value Code" THEN BEGIN
                    ValidationText :=
                      STRSUBSTNO(
                        Text001,
                        ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                        EMDefaultDimTemp."No.")
                      +
                      STRSUBSTNO(AllocationEntryTxt,ExpenseAlloc.FIELDCAPTION("Entry No."),ExpAllocationEntryNo) +
                      STRSUBSTNO(
                        Text005,
                        EMDefaultDimTemp.FIELDCAPTION("Dimension Value Code"),
                        EMDefaultDimTemp."Dimension Value Code",
                        EMDefaultDimTemp.FIELDCAPTION("Dimension Code"),
                        EMDefaultDimTemp."Dimension Code",
                        ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                        EMDefaultDimTemp."No.");
                    EXIT(FALSE);
                  END;
                END ELSE BEGIN
                  ValidationText :=
                    STRSUBSTNO(
                      Text001,
                      ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                      EMDefaultDimTemp."No.")
                    +
                    STRSUBSTNO(AllocationEntryTxt,ExpenseAlloc.FIELDCAPTION("Entry No."),ExpAllocationEntryNo) +
                    STRSUBSTNO(
                      Text006,
                      EMDefaultDimTemp.FIELDCAPTION("Dimension Code"),
                      EMDefaultDimTemp."Dimension Code",
                      ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                      EMDefaultDimTemp."No.");
                  EXIT(FALSE);
                END;

            EMDefaultDimTemp."Value Posting"::"Code Mandatory":
              IF NOT ExpenseAllocDim.GET(ExpAllocationEntryNo,EMDefaultDimTemp."Dimension Code") THEN BEGIN
                ValidationText :=
                  STRSUBSTNO(
                    Text001,
                    ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                    EMDefaultDimTemp."No.")
                  +
                  STRSUBSTNO(AllocationEntryTxt,ExpenseAlloc.FIELDCAPTION("Entry No."),ExpAllocationEntryNo) +
                  STRSUBSTNO(
                    Text004,
                    EMDefaultDimTemp.FIELDCAPTION("Dimension Value Code"),
                    EMDefaultDimTemp.FIELDCAPTION("Dimension Code"),
                    EMDefaultDimTemp."Dimension Code",
                    ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,EMDefaultDimTemp."Table ID"),
                    EMDefaultDimTemp."No.");
                EXIT(FALSE);
              END;
          END;

        UNTIL EMDefaultDimTemp.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE GetAllDefaultDimensions@1160040013(VAR DefaultDimTemp@1160040000 : TEMPORARY Record 6086368);
    VAR
      EMDefaultDim@1160040001 : Record 6086368;
      DefaultDim@1160040002 : Record 352;
    BEGIN
      DefaultDimTemp.RESET;
      DefaultDimTemp.DELETEALL;

      GetAllDefaultDimsForTable(DATABASE::"Salesperson/Purchaser",DefaultDimTemp);
      GetAllDefaultDimsForTable(DATABASE::Vendor,DefaultDimTemp);
      GetAllDefaultDimsForTable(DATABASE::"G/L Account",DefaultDimTemp);
      GetAllDefaultDimsForTable(DATABASE::"Expense Type",DefaultDimTemp);
      GetAllDefaultDimsForTable(DATABASE::Job,DefaultDimTemp);
    END;

    LOCAL PROCEDURE GetAllDefaultDimsForTable@19(DimTableID@1160040003 : Integer;VAR DefaultDimTemp@1160040000 : TEMPORARY Record 6086368);
    VAR
      EMDefaultDim@1160040001 : Record 6086368;
      DefaultDim@1160040002 : Record 352;
    BEGIN
      DefaultDim.SETCURRENTKEY("Table ID");
      DefaultDim.SETRANGE("Table ID",DimTableID);
      IF DefaultDim.FINDSET THEN
        REPEAT
          DefaultDimTemp.RESET;
          DefaultDimTemp.TRANSFERFIELDS(DefaultDim);
          DefaultDimTemp.INSERT;
        UNTIL DefaultDim.NEXT = 0;

      EMDefaultDim.SETCURRENTKEY("Table ID");
      EMDefaultDim.SETRANGE("Table ID",DimTableID);
      IF EMDefaultDim.FINDSET THEN
        REPEAT
          DefaultDimTemp.RESET;
          DefaultDimTemp.TRANSFERFIELDS(EMDefaultDim);
          DefaultDimTemp.INSERT;
        UNTIL EMDefaultDim.NEXT = 0;
    END;

    PROCEDURE CreateJnlLineDefaultDim@1160040034(VAR GenJnlLine@1160040002 : Record 81);
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      CreateDim(
        GenJnlLine,
        DimMgt.TypeToTableID1(GenJnlLine."Account Type"),GenJnlLine."Account No.",
        DimMgt.TypeToTableID1(GenJnlLine."Bal. Account Type"),GenJnlLine."Bal. Account No.",
        DATABASE::Job,GenJnlLine."Job No.",
        DATABASE::"Salesperson/Purchaser",GenJnlLine."Salespers./Purch. Code",
        DATABASE::Campaign,GenJnlLine."Campaign No.");
    END;

    PROCEDURE CopyGenJnlDimToEMDim@1160040035(DimSetID@1000 : Integer;TableID@1160040003 : Integer;DocumentType@1002 : Integer;DocumentNo@1003 : Code[20];DocRefNo@1160040002 : Integer);
    VAR
      EmDim@1160040000 : Record 6086360;
      DimSetEntry@1001 : Record 480;
    BEGIN
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      IF DimSetEntry.FINDSET THEN
        REPEAT
          IF (DimSetEntry."Dimension Code" <> '') AND (DimSetEntry."Dimension Value Code" <> '') THEN BEGIN
            CLEAR(EmDim);
            EmDim.IgnoreTestPosted(TRUE); //Balancing line updates a posted expense.
            IF NOT EmDim.GET(TableID,DocumentType,DocumentNo,DocRefNo,DimSetEntry."Dimension Code",'') THEN  BEGIN
              EmDim."Table ID" := TableID;
              EmDim."Document Type" := DocumentType;
              EmDim."Document No." := DocumentNo;
              EmDim."Doc. Ref. No." := DocRefNo;
              EmDim."Dimension Code" := DimSetEntry."Dimension Code";
              EmDim."Dimension Value Code" := DimSetEntry."Dimension Value Code";
              EmDim.INSERT(TRUE);
            END ELSE
              IF EmDim."Dimension Value Code" <> DimSetEntry."Dimension Value Code" THEN BEGIN
                EmDim."Dimension Value Code" := DimSetEntry."Dimension Value Code";
                EmDim.MODIFY(TRUE);
              END;
          END;
        UNTIL DimSetEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateDim@16(VAR GenJnlLine@1160040000 : Record 81;Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1007 : Integer;No4@1006 : Code[20];Type5@1009 : Integer;No5@1008 : Code[20]);
    VAR
      DimMgt@1012 : Codeunit 408;
      TableID@1010 : ARRAY [10] OF Integer;
      No@1011 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;

      GenJnlLine."Shortcut Dimension 1 Code" := '';
      GenJnlLine."Shortcut Dimension 2 Code" := '';
      GenJnlLine."Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,GenJnlLine."Source Code",GenJnlLine."Shortcut Dimension 1 Code",GenJnlLine."Shortcut Dimension 2 Code",0,0);
    END;

    LOCAL PROCEDURE CreateDimJob@1160040038(VAR JobJnlLine@1160040000 : Record 11072008;Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20]);
    VAR
      DimMgt@1012 : Codeunit 408;
      TableID@1010 : ARRAY [10] OF Integer;
      No@1011 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      JobJnlLine."Shortcut Dimension 1 Code" := '';
      JobJnlLine."Shortcut Dimension 2 Code" := '';
      JobJnlLine."Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,JobJnlLine."Source Code",JobJnlLine."Shortcut Dimension 1 Code",JobJnlLine."Shortcut Dimension 2 Code",0,0);
    END;

    PROCEDURE CopyExpHeadDimToJnlLine@17(VAR ExpenseHeader@1001 : Record 6086339;VAR GenJnlLine@1000 : Record 81);
    VAR
      EMDim@1002 : Record 6086360;
    BEGIN
      EMDim.SETCURRENTKEY("Table ID","Document Type","Document No.","Doc. Ref. No.");
      EMDim.SETRANGE("Table ID",DATABASE::"Expense Header");
      EMDim.SETRANGE("Document Type",EMDim."Document Type"::Settlement);
      EMDim.SETRANGE("Document No.",ExpenseHeader."No.");
      EMDim.SETFILTER("Dimension Code",'<>%1','');
      IF EMDim.FINDFIRST THEN
        REPEAT
          InsertGenJnlLineDim(GenJnlLine,EMDim."Dimension Code",EMDim."Dimension Value Code");
        UNTIL EMDim.NEXT = 0;
    END;

    PROCEDURE CreateJoblLineDefaultDim@1160040037(VAR JobJnlLine@1160040002 : Record 11072008);
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      CreateDimJob(
        JobJnlLine,
        DATABASE::Job,JobJnlLine."Job No.",
        DimMgt.TypeToTableID2(JobJnlLine.Type),JobJnlLine."No.",
        DATABASE::"Resource Group",JobJnlLine."Resource Group No.");
    END;

    PROCEDURE InsertDefaultDimAllocation@1(TableID@1160040003 : Integer;AccountNo@1160040000 : Code[20];VAR ExpenseAllocation@1160040001 : Record 6086321);
    VAR
      EMDefaultDimTemp@1000 : TEMPORARY Record 6086368;
    BEGIN
      GetDefaultDimsForAccount(TableID,AccountNo,EMDefaultDimTemp);

      EMDefaultDimTemp.SETFILTER("Dimension Value Code",'<>%1','');
      IF EMDefaultDimTemp.FINDSET THEN
        REPEAT
          InsertDimOnAllocation(ExpenseAllocation,EMDefaultDimTemp."Dimension Code",EMDefaultDimTemp."Dimension Value Code");
        UNTIL EMDefaultDimTemp.NEXT = 0;
    END;

    PROCEDURE DeleteDefaultDimAllocation@7(TableID@1160040004 : Integer;AccountNo@1160040003 : Code[20];VAR ExpenseAllocation@1000 : Record 6086321);
    VAR
      EMDefaultDimTemp@1160040002 : TEMPORARY Record 6086368;
    BEGIN
      GetDefaultDimsForAccount(TableID,AccountNo,EMDefaultDimTemp);

      EMDefaultDimTemp.SETFILTER("Dimension Value Code",'<>%1','');
      IF EMDefaultDimTemp.FINDSET THEN
        REPEAT
          DeleteDimOnAllocation(ExpenseAllocation,EMDefaultDimTemp."Dimension Code",'');
        UNTIL EMDefaultDimTemp.NEXT = 0;
    END;

    PROCEDURE InsertDimOnAllocation@18(VAR ExpenseAllocation@1160040002 : Record 6086321;DimCode@1160040001 : Code[20];DimValueCode@1160040000 : Code[20]);
    VAR
      GLSetup@1160040004 : Record 98;
      EMDimAlloc@1000 : Record 6086357;
    BEGIN
      GLSetup.GET;

      CASE DimCode OF
        GLSetup."Global Dimension 1 Code":
          ExpenseAllocation.VALIDATE("Global Dimension 1 Code",DimValueCode);
        GLSetup."Global Dimension 2 Code":
          ExpenseAllocation.VALIDATE("Global Dimension 2 Code",DimValueCode);
        ELSE
          IF EMDimAlloc.GET(ExpenseAllocation."Entry No.",DimCode,'') THEN BEGIN
            EMDimAlloc."Dimension Value Code" := DimValueCode;
            EMDimAlloc.MODIFY;
          END ELSE BEGIN
            EMDimAlloc."Expense Allocation Entry No." := ExpenseAllocation."Entry No.";
            EMDimAlloc."Dimension Code" := DimCode;
            EMDimAlloc."Dimension Value Code" := DimValueCode;
            EMDimAlloc.INSERT;
          END;
      END;
    END;

    PROCEDURE DeleteDimOnAllocation@9(VAR ExpenseAllocation@1160040002 : Record 6086321;DimCode@1160040001 : Code[20];DimValueCode@1160040000 : Code[20]);
    VAR
      GLSetup@1160040004 : Record 98;
      EMDim@1160040003 : Record 6086360;
      EMDimAlloc@1000 : Record 6086357;
    BEGIN
      GLSetup.GET;

      CASE DimCode OF
        GLSetup."Global Dimension 1 Code":
          ExpenseAllocation.VALIDATE("Global Dimension 1 Code",DimValueCode);
        GLSetup."Global Dimension 2 Code":
          ExpenseAllocation.VALIDATE("Global Dimension 2 Code",DimValueCode);
        ELSE
          IF EMDimAlloc.GET(ExpenseAllocation."Entry No.",DimCode,'') THEN
            EMDimAlloc.DELETE;
      END;
    END;

    LOCAL PROCEDURE GetDefaultDimsForAccount@8(TableID@1004 : Integer;AccountNo@1003 : Code[20];VAR EMDefaultDimTemp@1000 : TEMPORARY Record 6086368);
    VAR
      DefaultDim@1002 : Record 352;
      EMDefaultDim@1001 : Record 6086368;
    BEGIN
      EMDefaultDimTemp.RESET;
      EMDefaultDimTemp.DELETEALL;

      EMDefaultDim.SETRANGE("Table ID",TableID);
      EMDefaultDim.SETRANGE("No.",AccountNo);
      IF EMDefaultDim.FINDSET THEN
        REPEAT
          EMDefaultDimTemp.TRANSFERFIELDS(EMDefaultDim);
          EMDefaultDimTemp.INSERT;
        UNTIL EMDefaultDim.NEXT = 0;

      DefaultDim.SETRANGE("Table ID",TableID);
      DefaultDim.SETRANGE("No.",AccountNo);
      IF DefaultDim.FINDSET THEN
        REPEAT
          EMDefaultDimTemp.TRANSFERFIELDS(DefaultDim);
          EMDefaultDimTemp.INSERT;
        UNTIL DefaultDim.NEXT = 0;
    END;

    BEGIN
    {
      4PS, Objects renumbered
    }
    END.
  }
}

