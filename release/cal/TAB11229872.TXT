OBJECT Table 11229872 Mobile Item Usage
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Last Modified Date" := CURRENTDATETIME;
             END;

    OnModify=BEGIN
               "Last Modified Date" := CURRENTDATETIME;
             END;

    CaptionML=ENU=Mobile Item Usage;
  }
  FIELDS
  {
    { 5   ;   ;Source Type         ;Option        ;CaptionML=[ENU=Source Type;
                                                              NOR=Kildetype;
                                                              SVE=Ursprungstyp];
                                                   OptionCaptionML=ENU=Service Order,Project;
                                                   OptionString=ServiceOrder,Project }
    { 10  ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(ServiceOrder)) "Service Order".No.
                                                                 ELSE IF (Source Type=CONST(Project)) Job.No.;
                                                   CaptionML=[ENU=Source No.;
                                                              NOR=Kildenr.;
                                                              SVE=Ursprungsnr] }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 30  ;   ;Source              ;Option        ;CaptionML=[ENU=Source;
                                                              NOR=Kilde;
                                                              SVE=K„lla];
                                                   OptionCaptionML=ENU=Advice Order Line,Item Journal,Purchase Order;
                                                   OptionString=Advice Order Line,Item Journal,Purchase Order }
    { 35  ;   ;Advice Order Line No.;Integer      ;CaptionML=[ENU=Advice Order Line No.;
                                                              NOR=Radnr. for bestillingsunderlag;
                                                              SVE=Radnr f”r best„llningsunderlag] }
    { 40  ;   ;Purchase Order No.  ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=[ENU=Purchase Order No.;
                                                              NOR=Innkj›psordrenr.;
                                                              SVE=Ink”psordernr] }
    { 45  ;   ;Purchase Order Line No.;Integer    ;CaptionML=[ENU=Purchase Order Line No.;
                                                              SVE=Ink”psorderradnr] }
    { 50  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              NOR=Artikkelnr;
                                                              SVE=Artikelnr] }
    { 60  ;   ;Trade Item          ;Code20        ;TableRelation="Trade Item"."Item Code" WHERE (Vendor=FIELD("Vendor (Trade Item)"));
                                                   CaptionML=[ENU=Trade Item;
                                                              NOR=Katalogartikkel;
                                                              SVE=Anskaffningsartikel] }
    { 70  ;   ;Vendor (Trade Item) ;Code15        ;TableRelation="ETIM Vendor - Central Mgt";
                                                   CaptionML=[ENU=Vendor (Trade Item);
                                                              NOR=Leverand›r (katalogartikkel);
                                                              SVE=Leverant”r (skaffningsartikel)] }
    { 80  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 85  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              NOR=Beskrivelse 2;
                                                              SVE=Beskrivning 2] }
    { 90  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   DecimalPlaces=0:5 }
    { 100 ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=[ENU=Unit of Measure;
                                                              NOR=M†leenhet;
                                                              SVE=Enhet] }
    { 110 ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Vendor No.;
                                                              NOR=Leverand›rnr.;
                                                              SVE=Leverant”rsnr] }
    { 1000;   ;Source Deleted      ;Boolean       ;CaptionML=ENU=Source Deleted }
    { 1020;   ;Created by Employee No.;Code20     ;TableRelation=IF (Created by Employee Company=FILTER('')) Employee;
                                                   CaptionML=[ENU=Created by Employee No.;
                                                              NOR=Opprettet av ansatt nr.;
                                                              SVE=Skapat av anst„lld nr];
                                                   Editable=No }
    { 1021;   ;Created by Employee Company;Text30 ;TableRelation=Company;
                                                   CaptionML=[ENU=Created by Employee Company;
                                                              SVE=Skapat av anst„lld f”retag];
                                                   Editable=No }
    { 1022;   ;Created by Work Order No.;Code20   ;TableRelation="Work Order";
                                                   CaptionML=ENU=Created by Work Order No.;
                                                   Editable=No }
    { 1030;   ;Decentral Created   ;Boolean       ;CaptionML=[ENU=Decentral Created;
                                                              NOR=Perifer er opprettet;
                                                              SVE=Perifer „r skapad];
                                                   Editable=No }
    { 1035;   ;Decentral Created Guid;Text32      ;CaptionML=ENU=Decentral Created Guid }
    { 1040;   ;Last Modified Date  ;DateTime      ;CaptionML=[ENU=Last Modified Date;
                                                              NOR=Sist endret dato;
                                                              SVE=Žndrades senast];
                                                   Editable=No }
    { 1050;   ;Deliver             ;Option        ;CaptionML=[ENU=Deliver;
                                                              SVE=Leverera];
                                                   OptionCaptionML=ENU=" ,Location,Project Location,Service Location,Order Address,Contact Address,Plant Location";
                                                   OptionString=[ ,Location,Project Location,Service Location,Order Address,Contact Address,Plant Location] }
    { 1060;   ;Ship To Location    ;Code20        ;OnValidate=VAR
                                                                Location@1100526002 : Record 14;
                                                                ProjectLocation@1100526000 : Record 11012011;
                                                                ServiceOrderLocation@1100526001 : Record 11071688;
                                                                OrderAddress@1100526003 : Record 224;
                                                                ServiceOrder@1100526004 : Record 11012823;
                                                                ServiceLocation@1100526007 : Record 11012801;
                                                                Job@1100526006 : Record 11072003;
                                                                PurchaseHeader@1100526005 : Record 38;
                                                              BEGIN
                                                                "Ship To Location Name" := '';
                                                                "Ship To Location Address" := '';
                                                                "Ship To Location Post Code" := '';
                                                                "Ship To Location City" := '';
                                                                IF "Ship To Location" <> '' THEN
                                                                  CASE Deliver OF
                                                                    Deliver::Location:
                                                                      BEGIN
                                                                        Location.CHANGECOMPANY(Rec.CURRENTCOMPANY);
                                                                        IF Location.GET("Ship To Location") THEN BEGIN
                                                                          "Ship To Location Name" := Location.Name;
                                                                          "Ship To Location Address" := Location.Address;
                                                                          "Ship To Location Post Code" := Location."Post Code";
                                                                          "Ship To Location City" := Location.City;
                                                                        END;
                                                                      END;
                                                                    Deliver::"Project Location":
                                                                      BEGIN
                                                                        ProjectLocation.CHANGECOMPANY(Rec.CURRENTCOMPANY);
                                                                        IF ProjectLocation.GET("Source No.", "Ship To Location") THEN BEGIN
                                                                          "Ship To Location Name" := ProjectLocation.Name;
                                                                          "Ship To Location Address" := ProjectLocation.Address;
                                                                          "Ship To Location Post Code" := ProjectLocation."Post Code";
                                                                          "Ship To Location City" := ProjectLocation.City;
                                                                        END;
                                                                      END;
                                                                    Deliver::"Service Location":
                                                                      BEGIN
                                                                        ServiceOrderLocation.CHANGECOMPANY(Rec.CURRENTCOMPANY);
                                                                        IF ServiceOrderLocation.GET("Source No.", "Ship To Location") THEN BEGIN
                                                                          "Ship To Location Name" := ServiceOrderLocation.Name;
                                                                          "Ship To Location Address" := ServiceOrderLocation.Address;
                                                                          "Ship To Location Post Code" := ServiceOrderLocation."Post Code";
                                                                          "Ship To Location City" := ServiceOrderLocation.City;
                                                                        END;
                                                                      END;
                                                                    Deliver::"Order Address":
                                                                      BEGIN
                                                                        OrderAddress.CHANGECOMPANY(Rec.CURRENTCOMPANY);
                                                                        IF OrderAddress.GET("Vendor No.", "Ship To Location") THEN BEGIN
                                                                          "Ship To Location Name" := OrderAddress.Name;
                                                                          "Ship To Location Address" := OrderAddress.Address;
                                                                          "Ship To Location Post Code" := OrderAddress."Post Code";
                                                                          "Ship To Location City" := OrderAddress.City;
                                                                        END;
                                                                      END;
                                                                    Deliver::"Contact Address", Deliver::"Plant Location":
                                                                      BEGIN
                                                                        IF (Source = Source::"Purchase Order") THEN
                                                                          PurchaseHeader.CHANGECOMPANY(Rec.CURRENTCOMPANY);
                                                                          IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Order, "Purchase Order No.") THEN BEGIN
                                                                            "Ship To Location Name" := PurchaseHeader."Ship-to Name";
                                                                            "Ship To Location Address" := PurchaseHeader."Ship-to Address";
                                                                            "Ship To Location Post Code" := PurchaseHeader."Ship-to Post Code";
                                                                            "Ship To Location City" := PurchaseHeader."Ship-to City";
                                                                          END;
                                                                      END;
                                                                  END;

                                                                IF ((Deliver = Deliver::" ") OR ("Ship To Location" = '')) AND ("Item No." <> '') THEN BEGIN
                                                                  IF ("Source Type" = "Source Type"::ServiceOrder) THEN BEGIN
                                                                    ServiceOrder.CHANGECOMPANY(Rec.CURRENTCOMPANY);
                                                                    ServiceLocation.CHANGECOMPANY(Rec.CURRENTCOMPANY);
                                                                    IF ServiceOrder.GET("Source No.") THEN BEGIN
                                                                      IF ServiceLocation.GET(ServiceOrder."Service Location No.") THEN BEGIN
                                                                        "Ship To Location Name" := ServiceLocation.Name;
                                                                        "Ship To Location Address" := ServiceLocation.Address;
                                                                        "Ship To Location Post Code" := ServiceLocation."Post Code";
                                                                        "Ship To Location City" := ServiceLocation.City;
                                                                      END;
                                                                    END;
                                                                  END;
                                                                  IF ("Source Type" = "Source Type"::Project) THEN BEGIN
                                                                    Job.CHANGECOMPANY(Rec.CURRENTCOMPANY);
                                                                    IF Job.GET("Source No.") THEN BEGIN
                                                                      "Ship To Location Name" := Job.Description;
                                                                      "Ship To Location Address" := Job.Address;
                                                                      "Ship To Location Post Code" := Job."Post Code";
                                                                      "Ship To Location City" := Job.City;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Ship To Location;
                                                              SVE=Leverera till lagerst„lle] }
    { 1070;   ;Ship To Location Name;Text100      ;CaptionML=ENU=Ship To Location Name }
    { 1080;   ;Ship To Location Address;Text100   ;CaptionML=ENU=Ship To Location Address }
    { 1090;   ;Ship To Location Post Code;Code20  ;CaptionML=ENU=Ship To Location Post Code }
    { 2000;   ;Ship To Location City;Text30       ;CaptionML=ENU=Ship To Location City }
  }
  KEYS
  {
    {    ;Source Type,Source No.,Line No.         ;Clustered=Yes }
    {    ;Source,Purchase Order No.,Purchase Order Line No. }
    {    ;Source,Source Type,Source No.,Advice Order Line No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE CreateModifyFromAdvOrdLine@1100528109(AdviceOrderLine@1100528100 : Record 11012055);
    VAR
      RouteRefMgtCU@1100528102 : Codeunit 11012045;
      UpdateExistingLine@1100528101 : Boolean;
      RefTxt@1100409001 : Text[30];
      PosInt@1100409000 : Integer;
    BEGIN
      UpdateExistingLine := FindAdvOrdLineCopy(AdviceOrderLine);
      IF (UpdateExistingLine) AND (NOT AdvOrdLineMustBeSentToMobile(AdviceOrderLine)) THEN BEGIN
        DeleteFromAdvOrdLine(AdviceOrderLine);
        SetExpToFSA;
        EXIT;
      END;

      IF NOT IsMobileOrder(COMPANYNAME, AdviceOrderLine."Service Order No.", AdviceOrderLine."Project No.") THEN
        EXIT;

      IF NOT AdvOrdLineMustBeSentToMobile(AdviceOrderLine) THEN
        EXIT;

      VALIDATE(Source, Source::"Advice Order Line");
      IF (AdviceOrderLine."Service Order No." <> '') THEN BEGIN
        VALIDATE("Source Type", "Source Type"::ServiceOrder);
        VALIDATE("Source No.", AdviceOrderLine."Service Order No.");
      END ELSE BEGIN
        VALIDATE("Source Type", "Source Type"::Project);
        VALIDATE("Source No.", AdviceOrderLine."Project No.");
      END;
      VALIDATE("Advice Order Line No.", AdviceOrderLine."Line No.");
      //db.sn, 10-11-14: C018813
      RefTxt := RouteRefMgtCU.GetPurchOrderOfReference(AdviceOrderLine."Purchase Route Reference");
      PosInt := STRPOS(RefTxt, '<');
      IF PosInt = 0 THEN
        VALIDATE("Purchase Order No.", RefTxt);
      //db.en, 10-11-14: C018813
      VALIDATE("Item No.", AdviceOrderLine."Item No.");
      VALIDATE("Vendor (Trade Item)", AdviceOrderLine."Vendor (Trade Item)");  //db, 27-03-14: assign before validate TradeItem
      VALIDATE("Trade Item", AdviceOrderLine."Trade Item");  //db, 27-03-14: table relation changed (equal to Advice Order)
      //VALIDATE("Vendor (Trade Item)", AdviceOrderLine."Vendor (Trade Item)");
      VALIDATE(Description, AdviceOrderLine.Description);
      VALIDATE("Description 2", AdviceOrderLine."Description 2");
      VALIDATE(Quantity, AdviceOrderLine."Quantity (Advice)" + AdviceOrderLine."Quantity (Processed)");
      VALIDATE("Unit of Measure", AdviceOrderLine."Unit of Measure");
      VALIDATE("Vendor No.", AdviceOrderLine.Vendor);
      VALIDATE("Created by Employee Company", AdviceOrderLine."Created by Employee Company");
      VALIDATE("Created by Employee No.", AdviceOrderLine."Created by Employee No.");
      VALIDATE("Created by Work Order No.", AdviceOrderLine."Created by Work Order No.");
      VALIDATE("Decentral Created", AdviceOrderLine."Decentral Created");
      VALIDATE("Decentral Created Guid", AdviceOrderLine."Decentral Created Guid");

      ValidateDeliverFromAdviceOrderLine(AdviceOrderLine);

      IF UpdateExistingLine THEN BEGIN
        VALIDATE("Source Deleted", FALSE);
        MODIFY(TRUE);
      END ELSE BEGIN
        SetLineNo();
        INSERT(TRUE);
      END;

      SetExpToFSA;
    END;

    PROCEDURE DeleteFromAdvOrdLine@1100528111(AdviceOrderLine@1100528100 : Record 11012055);
    BEGIN
      IF NOT FindAdvOrdLineCopy(AdviceOrderLine) THEN
        EXIT;

      VALIDATE(Source, Source::"Advice Order Line");
      IF (AdviceOrderLine."Service Order No." <> '') THEN BEGIN
        VALIDATE("Source Type", "Source Type"::ServiceOrder);
        VALIDATE("Source No.", AdviceOrderLine."Service Order No.");
      END ELSE BEGIN
        VALIDATE("Source Type", "Source Type"::Project);
        VALIDATE("Source No.", AdviceOrderLine."Project No.");
      END;
      VALIDATE("Advice Order Line No.", AdviceOrderLine."Line No.");
      VALIDATE("Item No.", '');
      VALIDATE("Trade Item", '');
      VALIDATE("Vendor (Trade Item)", '');
      VALIDATE(Description, '');
      VALIDATE("Description 2", '');
      VALIDATE(Quantity, 0);
      VALIDATE("Unit of Measure", '');
      VALIDATE("Vendor No.", '');
      VALIDATE("Created by Employee No.", '');
      VALIDATE("Created by Employee Company", '');
      VALIDATE("Decentral Created", FALSE);
      VALIDATE("Decentral Created Guid", '');
      VALIDATE("Source Deleted", TRUE);
      VALIDATE(Deliver, Deliver::" ");
      VALIDATE("Ship To Location", '');

      MODIFY(TRUE);

      SetExpToFSA;
    END;

    LOCAL PROCEDURE FindAdvOrdLineCopy@1100528110(AdviceOrderLine@1100528100 : Record 11012055) : Boolean;
    BEGIN
      RESET;
      SETRANGE(Source, Source::"Advice Order Line");
      IF (AdviceOrderLine."Service Order No." <> '') THEN BEGIN
        SETRANGE("Source Type", "Source Type"::ServiceOrder);
        SETRANGE("Source No.", AdviceOrderLine."Service Order No.");
      END ELSE BEGIN
        SETRANGE("Source Type", "Source Type"::Project);
        SETRANGE("Source No.", AdviceOrderLine."Project No.");
      END;
      SETRANGE("Advice Order Line No.", AdviceOrderLine."Line No.");
      SETCURRENTKEY(Source, "Source Type", "Source No.", "Advice Order Line No.");
      EXIT(FINDFIRST);
    END;

    PROCEDURE CreateFromItemJournal@1100528100(ItemJournalLine@1100528100 : Record 83);
    VAR
      Company@1100526000 : Text;
    BEGIN
      IF ItemJournalLine."Receiving Company" <> '' THEN
        Company := ItemJournalLine."Receiving Company"
      ELSE
        Company := COMPANYNAME;
      IF NOT IsMobileOrder(Company, ItemJournalLine."Service Order No.", ItemJournalLine."Job No.") THEN
        EXIT;
      IF NOT ItmJrnLnMustBeSentToMobile(ItemJournalLine) THEN
        EXIT;
      CHANGECOMPANY(Company);
      VALIDATE(Source, Source::"Item Journal");
      IF (ItemJournalLine."Service Order No." <> '') THEN BEGIN
        VALIDATE("Source Type", "Source Type"::ServiceOrder);
        VALIDATE("Source No.", ItemJournalLine."Service Order No.");
      END ELSE BEGIN
        VALIDATE("Source Type", "Source Type"::Project);
        VALIDATE("Source No.", ItemJournalLine."Job No.");
      END;
      VALIDATE("Item No.", ItemJournalLine."Item No.");
      VALIDATE(Description, ItemJournalLine.Description);
      VALIDATE("Description 2", ItemJournalLine."Description 2");
      VALIDATE(Quantity, ItemJournalLine."Quantity to Post");
      VALIDATE("Unit of Measure", ItemJournalLine."Unit of Measure Code");

      ValidateDeliverFromItemJournal(ItemJournalLine);

      SetLineNo();
      INSERT(TRUE);
      SetExpToFSA;
    END;

    PROCEDURE CreateModifyFromPurchaseLine@1100528101(PurchaseLine@1100528100 : Record 39);
    VAR
      PrevPurchaseLine@1100525000 : Record 39;
      UpdateExistingLine@1100528102 : Boolean;
    BEGIN
      UpdateExistingLine := FindActualPurchLineCopy(PurchaseLine);
      IF (UpdateExistingLine) THEN BEGIN
        IF (("Source Type" = "Source Type"::ServiceOrder) AND (PurchaseLine."Service Order No." <> "Source No.")) OR
           (("Source Type" = "Source Type"::Project) AND (PurchaseLine."Job No." <> "Source No.")) THEN BEGIN
          // The service order no/project no has been changed on the purchase line
          // now mark for delete the old Item Usage record and insert a new one below.
          PrevPurchaseLine := PurchaseLine;
          CASE "Source Type" OF
            "Source Type"::ServiceOrder : PrevPurchaseLine."Service Order No." := "Source No.";
            "Source Type"::Project : PrevPurchaseLine."Job No." := "Source No.";
          END;
          DeleteFromPurchaseLine(PrevPurchaseLine);
          UpdateExistingLine := FindPurchLineCopy(PurchaseLine);
        END ELSE IF (PurchaseLine.Quantity = 0) THEN BEGIN
          DeleteFromPurchaseLine(PurchaseLine);
          SetExpToFSA;
          EXIT;
        END;
      END;

      IF NOT IsMobileOrder(COMPANYNAME, PurchaseLine."Service Order No.", PurchaseLine."Job No.") THEN
        EXIT;

      IF NOT PurchLnMustBeSentToMobile(PurchaseLine) THEN
        EXIT;

      VALIDATE(Source, Source::"Purchase Order");
      IF (PurchaseLine."Service Order No." <> '') THEN BEGIN
        VALIDATE("Source Type", "Source Type"::ServiceOrder);
        VALIDATE("Source No.", PurchaseLine."Service Order No.");
      END ELSE BEGIN
        VALIDATE("Source Type", "Source Type"::Project);
        VALIDATE("Source No.", PurchaseLine."Job No.");
      END;
      VALIDATE("Purchase Order No.", PurchaseLine."Document No.");
      VALIDATE("Purchase Order Line No.", PurchaseLine."Line No.");
      VALIDATE("Item No.", PurchaseLine."Item No.");
      VALIDATE("Vendor (Trade Item)", PurchaseLine."Vendor (Trade Item)");  //db, 27-03-14
      VALIDATE("Trade Item", PurchaseLine."Trade Item");
      //VALIDATE("Vendor (Trade Item)", PurchaseLine."Vendor (Trade Item)");
      VALIDATE(Description, PurchaseLine.Description);
      VALIDATE("Description 2", PurchaseLine."Description 2");
      VALIDATE(Quantity, PurchaseLine.Quantity);
      VALIDATE("Unit of Measure", PurchaseLine."Unit of Measure Code");
      VALIDATE("Vendor No.", PurchaseLine."Buy-from Vendor No.");
      VALIDATE("Source Deleted", FALSE); // Because it is possible that "Purchase Order Line No." is reused, or that flag is set to
                                         // in  DeleteFromPurchaseLine(PrevPurchaseLine) above

      ValidateDeliverFromPurchaseOrderLine(PurchaseLine);

      IF UpdateExistingLine THEN BEGIN
        MODIFY(TRUE);
      END ELSE BEGIN
        SetLineNo();
        INSERT(TRUE);
      END;

      SetExpToFSA;
    END;

    PROCEDURE DeleteFromPurchaseLine@1100528107(PurchaseLine@1100528100 : Record 39);
    BEGIN
      IF NOT FindPurchLineCopy(PurchaseLine) THEN
        EXIT;

      VALIDATE(Source, Source::"Purchase Order");
      IF (PurchaseLine."Service Order No." <> '') THEN BEGIN
        VALIDATE("Source Type", "Source Type"::ServiceOrder);
        VALIDATE("Source No.", PurchaseLine."Service Order No.");
      END ELSE BEGIN
        VALIDATE("Source Type", "Source Type"::Project);
        VALIDATE("Source No.", PurchaseLine."Job No.");
      END;
      VALIDATE("Purchase Order No.", PurchaseLine."Document No.");
      VALIDATE("Purchase Order Line No.", PurchaseLine."Line No.");
      VALIDATE("Item No.", '');
      VALIDATE("Trade Item", '');
      VALIDATE("Vendor (Trade Item)", '');
      VALIDATE(Description, '');
      VALIDATE("Description 2", '');
      VALIDATE(Quantity, 0);
      VALIDATE("Unit of Measure", '');
      VALIDATE("Vendor No.", '');
      VALIDATE("Source Deleted", TRUE);
      VALIDATE(Deliver, Deliver::" ");
      VALIDATE("Ship To Location", '');

      MODIFY(TRUE);

      SetExpToFSA;
    END;

    LOCAL PROCEDURE FindActualPurchLineCopy@1100528700(PurchaseLine@1100528100 : Record 39) : Boolean;
    BEGIN
      RESET;
      SETRANGE(Source, Source::"Purchase Order");
      SETRANGE("Purchase Order No.", PurchaseLine."Document No.");
      SETRANGE("Purchase Order Line No.", PurchaseLine."Line No.");
      SETRANGE("Source Deleted", FALSE);
      SETCURRENTKEY(Source, "Purchase Order No.", "Purchase Order Line No.");
      IF FINDFIRST THEN
        EXIT(TRUE);
      SETRANGE("Source Deleted");
      EXIT(FINDFIRST);
    END;

    LOCAL PROCEDURE FindPurchLineCopy@1100528108(PurchaseLine@1100528100 : Record 39) : Boolean;
    BEGIN
      RESET;
      SETRANGE(Source, Source::"Purchase Order");
      SETRANGE("Purchase Order No.", PurchaseLine."Document No.");
      SETRANGE("Purchase Order Line No.", PurchaseLine."Line No.");
      IF (PurchaseLine."Service Order No." <> '') THEN BEGIN
        SETRANGE("Source Type", "Source Type"::ServiceOrder);
        SETRANGE("Source No.", PurchaseLine."Service Order No.");
      END ELSE BEGIN
        SETRANGE("Source Type", "Source Type"::Project);
        SETRANGE("Source No.", PurchaseLine."Job No.");
      END;
      SETCURRENTKEY(Source, "Purchase Order No.", "Purchase Order Line No.");
      EXIT(FINDFIRST);
    END;

    LOCAL PROCEDURE SetLineNo@1100528103();
    VAR
      MobileItemUsage@1100528100 : Record 11229872;
    BEGIN
      TESTFIELD("Source No.");
      MobileItemUsage.CHANGECOMPANY(Rec.CURRENTCOMPANY);
      MobileItemUsage.SETRANGE("Source Type", "Source Type");
      MobileItemUsage.SETRANGE("Source No.", "Source No.");
      IF MobileItemUsage.FINDLAST THEN
        "Line No." := MobileItemUsage."Line No." + 10000
      ELSE
        "Line No." := 10000;
    END;

    LOCAL PROCEDURE IsMobileOrder@1100528104(Company@1100526000 : Text;ServiceOrderNo@1100528100 : Code[20];ProjectNo@1100525000 : Code[20]) : Boolean;
    VAR
      JobSetup@1100528103 : Record 315;
      ServiceOrder@1100528101 : Record 11012823;
      Job@1100525001 : Record 11072003;
      MobileSetup@1100525002 : Record 11012676;
    BEGIN
      IF NOT JobSetup.IsFSAActiveInCompany(Company) THEN
        EXIT(FALSE);
      IF (ServiceOrderNo <> '') THEN BEGIN
        IF (Company <> COMPANYNAME) THEN
          ServiceOrder.CHANGECOMPANY(Company);
        IF NOT ServiceOrder.GET(ServiceOrderNo) THEN
          EXIT(FALSE);
      END ELSE IF (ProjectNo <> '') THEN BEGIN
        IF (Company <> COMPANYNAME) THEN
          Job.CHANGECOMPANY(Company);
        IF NOT Job.GET(ProjectNo) THEN
          EXIT(FALSE)
        ELSE BEGIN
          IF (Company <> COMPANYNAME) THEN
            MobileSetup.CHANGECOMPANY(Company);
          MobileSetup.GET;
          EXIT(MobileSetup."Show Project Advice Orders");
        END;
      END ELSE
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ItmJrnLnMustBeSentToMobile@1100528106(ItemJournalLine@1100528100 : Record 83) : Boolean;
    BEGIN
      EXIT (NOT (ItemJournalLine."Quantity to Post" = 0) AND
            NOT (ItemJournalLine."Origin Type Line" IN [ItemJournalLine."Origin Type Line"::AdviceOrderLine, ItemJournalLine."Origin Type Line"::FieldService]));
    END;

    LOCAL PROCEDURE AdvOrdLineMustBeSentToMobile@1100528112(AdviceOrderLine@1100528102 : Record 11012055) : Boolean;
    BEGIN
      EXIT (NOT (AdviceOrderLine."Quantity (Advice)" + AdviceOrderLine."Quantity (Processed)" = 0) AND
           (AdviceOrderLine."Record Type" IN [AdviceOrderLine."Record Type"::ServOrder, AdviceOrderLine."Record Type"::Project]) AND
           (NOT (AdviceOrderLine."Cost Type" = AdviceOrderLine."Cost Type"::Subcontracting)));
    END;

    LOCAL PROCEDURE PurchLnMustBeSentToMobile@1100528102(PurchaseLine@1100528100 : Record 39) : Boolean;
    VAR
      PurchaseLineExtension@1100528101 : Record 11020644;
    BEGIN
      IF (PurchaseLine.Quantity = 0) OR
          NOT (PurchaseLine."Document Type" = PurchaseLine."Document Type"::Order) THEN
        EXIT(FALSE);
      IF PurchaseLineExtension.GET(PurchaseLine."Document Type", PurchaseLine."Document No.", PurchaseLine."Line No.") THEN
        IF PurchaseLineExtension."Source Advice Order" THEN
          EXIT(FALSE); //Because Advice Order Line are sent to mobile seperatly
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SetExpToFSA@1100528105();
    VAR
      WorkOrder@1100528100 : Record 11229279;
    BEGIN
      TESTFIELD("Source No.");
      WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
      WorkOrder.SETRANGE("Source Company", COMPANYNAME);
      CASE "Source Type" OF
        "Source Type"::ServiceOrder:
          BEGIN
            WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
            WorkOrder.SETRANGE("Source No.", "Source No.");
          END;
        "Source Type"::Project:
          BEGIN
            WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::Project);
            WorkOrder.SETRANGE("Source No.", "Source No.");
          END;
      END;
      WorkOrder.SETRANGE("Active in FSA", TRUE);
      WorkOrder.SETRANGE("Export Item Usage to FSA", FALSE);
      WorkOrder.MODIFYALL("Export Item Usage to FSA", TRUE);
    END;

    PROCEDURE ValidateDeliverFromAdviceOrderLine@1100526000(AdviceOrderLine@1100526000 : Record 11012055);
    VAR
      Job@1100526001 : Record 11072003;
    BEGIN
      CASE AdviceOrderLine.Deliver OF
        AdviceOrderLine.Deliver::Location : VALIDATE(Deliver, Deliver::Location);
        AdviceOrderLine.Deliver::"Project Location" : VALIDATE(Deliver, Deliver::"Project Location");
        AdviceOrderLine.Deliver::"Service Location" : VALIDATE(Deliver, Deliver::"Service Location");
        AdviceOrderLine.Deliver::"Order Address" : VALIDATE(Deliver, Deliver::"Order Address");
      ELSE
        VALIDATE(Deliver, Deliver::" ");
      END;
      IF (Deliver = Deliver::" ") THEN BEGIN
        IF ("Source Type" = "Source Type"::Project) THEN BEGIN
          IF Job.GET("Source No.") THEN BEGIN
            CASE Job.Deliver OF
              Job.Deliver::Location : VALIDATE(Deliver, Deliver::Location);
              Job.Deliver::"Project Location" : VALIDATE(Deliver, Deliver::"Project Location");
            END;
            IF (Deliver <> Deliver::" ") THEN
              VALIDATE("Ship To Location", Job."Ship To Location");
          END;
        END;
        IF (Deliver = Deliver::" ") THEN
          VALIDATE("Ship To Location", '');
      END ELSE
        VALIDATE("Ship To Location", AdviceOrderLine."Ship To Location");
    END;

    PROCEDURE ValidateDeliverFromPurchaseOrderLine@1100526001(PurchaseLine@1100526000 : Record 39);
    VAR
      PurchaseHeader@1100526001 : Record 38;
    BEGIN
      PurchaseHeader.GET(PurchaseLine."Document Type", PurchaseLine."Document No.");
      CASE PurchaseHeader.Deliver OF
        PurchaseHeader.Deliver::Location : VALIDATE(Deliver, Deliver::Location);
        PurchaseHeader.Deliver::"Project Location" : VALIDATE(Deliver, Deliver::"Project Location");
        PurchaseHeader.Deliver::"Service Location" : VALIDATE(Deliver, Deliver::"Service Location");
        PurchaseHeader.Deliver::"Contact Address" : VALIDATE(Deliver, Deliver::"Contact Address");
        PurchaseHeader.Deliver::"Plant Location" : VALIDATE(Deliver, Deliver::"Plant Location");
      ELSE
        VALIDATE(Deliver, Deliver::" ");
      END;
      IF Deliver = Deliver::Location THEN
        VALIDATE("Ship To Location", PurchaseLine."Location Code")
      ELSE IF (Deliver <> Deliver::" ") THEN
        VALIDATE("Ship To Location", PurchaseHeader."Ship-to Location")
      ELSE
        VALIDATE("Ship To Location", '');
    END;

    PROCEDURE ValidateDeliverFromItemJournal@1100526002(ItemJournalLine@1100526000 : Record 83);
    BEGIN
      CASE ItemJournalLine.Deliver OF
        ItemJournalLine.Deliver::Location : VALIDATE(Deliver, Deliver::Location);
        ItemJournalLine.Deliver::"Project Location" : VALIDATE(Deliver, Deliver::"Project Location");
        ItemJournalLine.Deliver::"Service Location" : VALIDATE(Deliver, Deliver::"Service Location");
      ELSE
        VALIDATE(Deliver, Deliver::" ");
      END;
      IF (Deliver <> Deliver::" ") THEN
        VALIDATE("Ship To Location", ItemJournalLine."Ship To Location")
      ELSE
        VALIDATE("Ship To Location", '');
    END;

    PROCEDURE ConvertFromAdviseOrderToPurchaseOrder@1100528701(AdviceOrderLine@1100528701 : Record 11012055;PurchaseLine@1100528702 : Record 39);
    VAR
      PurchaseLineExtension@1100528700 : Record 11020644;
    BEGIN
      DeleteFromAdvOrdLine(AdviceOrderLine);

      IF PurchaseLineExtension.GET(PurchaseLine."Document Type", PurchaseLine."Document No.", PurchaseLine."Line No.") THEN
        IF PurchaseLineExtension."Source Advice Order" THEN BEGIN
          PurchaseLineExtension.VALIDATE("Source Advice Order", FALSE);
          PurchaseLineExtension.MODIFY(TRUE);
        END;

      CreateModifyFromPurchaseLine(PurchaseLine);
    END;

    BEGIN
    END.
  }
}

