OBJECT Table 11020514 Linked Plant Transport Orders
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Transport Order No.");
               TESTFIELD("Linked Transport Order No.");
             END;

    OnDelete=BEGIN
               CheckLinkedTOCost("Transport Order No.", "Linked Transport Order No.");
             END;

    OnRename=BEGIN
               CheckLinkedTOCost(xRec."Transport Order No.", xRec."Linked Transport Order No.");
             END;

    CaptionML=[ENU=Linked Transport Orders;
               NOR=Koblede transportordre;
               SVE=LÑnkade transportorder];
  }
  FIELDS
  {
    { 10  ;   ;Transport Order No. ;Code20        ;TableRelation="Plant Transport Order";
                                                   CaptionML=[ENU=Transport Order No.;
                                                              NOR=Transportordrenr.;
                                                              SVE=Transportordernr] }
    { 20  ;   ;Linked Transport Order No.;Code20  ;TableRelation="Plant Transport Order";
                                                   OnValidate=BEGIN
                                                                IF "Linked Transport Order No." <> '' THEN BEGIN
                                                                  TESTFIELD("Transport Order No.");
                                                                  GetTransOrderHeader();
                                                                  TransOrderRec.TESTFIELD("Transport Date");
                                                                  TransOrderRec.TESTFIELD("Shipping Agent");
                                                                  TransOrderRec.TESTFIELD("Means of Transport");
                                                                  IF TransOrderRec.Type <> Type::Arrival THEN
                                                                    TransOrderRec.TESTFIELD("From Location");
                                                                  IF TransOrderRec.Type <> Type::Removal THEN
                                                                    TransOrderRec.TESTFIELD("To Location");
                                                                END;
                                                                ValidateLinkedTransOrder(CurrFieldNo = FIELDNO("Linked Transport Order No."));
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupLinkedTransOrder();
                                                            END;

                                                   CaptionML=[ENU=Linked Transport Order;
                                                              NOR=Linket Transportordre;
                                                              SVE=LÑnkad transportorder];
                                                   NotBlank=Yes }
    { 21  ;   ;Transport Date      ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Transport Order"."Transport Date" WHERE (No.=FIELD(Linked Transport Order No.)));
                                                   CaptionML=[ENU=Transport Date;
                                                              NOR=Transportdato;
                                                              SVE=Transportdatum];
                                                   Editable=No }
    { 22  ;   ;Type                ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Transport Order".Type WHERE (No.=FIELD(Linked Transport Order No.)));
                                                   CaptionML=[ENU=Type;
                                                              NOR=Radtype;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Arrival,Removal,Other Transfers;
                                                                    NOR=Ankomst,Fjerning,Andre Overfõringer;
                                                                    SVE=Ankomst,Borttagning,Andra îverfîringar];
                                                   OptionString=Arrival,Removal,Other Transfers;
                                                   Editable=No }
    { 23  ;   ;Shipping Agent      ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Transport Order"."Shipping Agent" WHERE (No.=FIELD(Linked Transport Order No.)));
                                                   TableRelation="Shipping Agent";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Shipping Agent;
                                                              NOR=Transportõr;
                                                              SVE=Speditîr];
                                                   Editable=No }
    { 24  ;   ;Means of Transport  ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Transport Order"."Means of Transport" WHERE (No.=FIELD(Linked Transport Order No.)));
                                                   TableRelation="Means of Transport".Code WHERE (Shipping Agent=FIELD(Shipping Agent));
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Means of Transport;
                                                              NOR=Transportmidler;
                                                              SVE=TransportsÑtt];
                                                   Editable=No }
    { 25  ;   ;Status              ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Transport Order".Status WHERE (No.=FIELD(Linked Transport Order No.)));
                                                   CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=[ENU=Open,Printed,Released,PO Posted,Posted;
                                                                    NOR=èpne,Skrevet ut,Frigitt,PO Bokfõrt,Bokfõrt;
                                                                    SVE=ôppna,Utskrivet,SlÑppt,PO bokfîrt,Bokfîrt];
                                                   OptionString=Open,Printed,Released,PO Posted,TO Posted;
                                                   Editable=No }
    { 26  ;   ;From Location       ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Transport Order"."From Location" WHERE (No.=FIELD(Linked Transport Order No.)));
                                                   TableRelation="Plant Location";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=From Location;
                                                              NOR=Fra lokasjon;
                                                              SVE=FrÜn lagerstÑlle];
                                                   Editable=No }
    { 27  ;   ;To Location         ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Transport Order"."To Location" WHERE (No.=FIELD(Linked Transport Order No.)));
                                                   TableRelation="Plant Location";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=To Location;
                                                              NOR=Til lokasjon;
                                                              SVE=Till lagerstÑlle];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Transport Order No.,Linked Transport Order No.;
                                                   Clustered=Yes }
    {    ;Linked Transport Order No.               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100485000 : TextConst 'ENU=''%1'' not allowed, order has linked transport order(s);NOR=%1'' er ikke tillatt, ordren har koblede transportordre;SVE=''%1'' Ñr inte tillÜtet, ordern har lÑnkade transportorder';
      Text001@1100485001 : TextConst 'ENU=''%1'' is already linked to transport order ''%2'';NOR=%1'' er allerede koblet til transportordre ''%2'';SVE=''%1'' Ñr redan lÑnkad till transportorder ''%2''';
      PlantSetupRec@1100485008 : Record 11012550;
      TransOrderRec@1100485002 : Record 11020505;
      LinkTransOrderRec@1100485003 : Record 11020505;
      Text002@1100485004 : TextConst 'ENU=Location not equal to the location of the Main Transport Order.;NOR=Lokasjonen er ikke lik med Hovedtransportordrens Lokasjon.;SVE=Platsen Ñr inte lika med huvudtransportorderns plats.';
      Text003@1100485005 : TextConst 'ENU=''%1'' not allowed, order has transport cost;NOR=%1'' er ikke tillatt, ordren har Transportkoster;SVE=''%1'' Ñr inte tillÜtet, ordern har transportkostnader';
      Text004@1100485006 : TextConst 'ENU=Linked Transport Order ''%1'' has already load/unload Costs. Copy these Costs to Main Transportorder ''%2''?;NOR=Koblet transportordre ''%1'' har allerede lasting-/avlastingskoster. kopiere disse kostene til hovedtransportordre ''%2''?;SVE=LÑnkad transportorder ''%1'' har redan lastnings-/avlastningskostnader. Kopiera dessa kostnader till huvudtranpsortorder ''%2''?';
      Text005@1100485009 : TextConst 'ENU=Load/unload Cost of the linked Transport Order can not be copied, locations not the same.;NOR=Lastings-/avlastingskoster for den koblede transportordren kan ikke kopieres, lokasjonene er ikke de samme.;SVE=Lastnings-/avlastningskostnader fîr den lÑnkade transportorderna kan inte kopieras, platserna Ñr inte de samma.';
      Text006@1100485007 : TextConst 'ENU=Not allowed, there are still load/unload Cost of the linked Transport Order.;NOR=Ikke tillatt, det finnes fortsatt lastings-/avlastningskoster for den koblede transportordren.;SVE=ér inte tillÜtet, det finns fortfarande lastnings-/avlastningskostnader fîr den lÑnkade transportordern.';

    PROCEDURE GetTransOrderHeader@5();
    BEGIN
      IF ("Transport Order No." <> '') THEN BEGIN
        TransOrderRec.GET("Transport Order No.");
        TransOrderRec.CALCFIELDS("From Depot", "To Depot");
      END;
    END;

    PROCEDURE GetLinkTransOrderHeader@1100485001();
    BEGIN
      IF ("Linked Transport Order No." <> '') THEN BEGIN
        LinkTransOrderRec.GET("Linked Transport Order No.");
        LinkTransOrderRec.CALCFIELDS("From Depot", "To Depot");
      END;
    END;

    PROCEDURE LookupLinkedTransOrder@1100485002();
    VAR
      lvTransOrderRec@1100485000 : Record 11020505;
    BEGIN
      GetTransOrderHeader();
      TransOrderRec.CALCFIELDS("Invoice with Transport Order");

      lvTransOrderRec.SETCURRENTKEY("Shipping Agent", "Means of Transport", "Transport Date");
      lvTransOrderRec.SETRANGE("Shipping Agent", TransOrderRec."Shipping Agent");
      lvTransOrderRec.SETRANGE("Means of Transport", TransOrderRec."Means of Transport");
      lvTransOrderRec.SETRANGE("Transport Date", TransOrderRec."Transport Date");
      lvTransOrderRec.SETFILTER("No.", '<>%1', "Transport Order No.");
      lvTransOrderRec.SETRANGE("No. Linked Transport Orders", 0);
      lvTransOrderRec.SETFILTER("Invoice with Transport Order", '%1|%2', '', "Transport Order No.");
      IF lvTransOrderRec.FIND('-') THEN BEGIN
        REPEAT
          CASE TransOrderRec.Type OF
            Type::Arrival:
              IF (lvTransOrderRec."From Location" = TransOrderRec."To Location") OR
                 (lvTransOrderRec."To Location" = TransOrderRec."To Location")
              THEN
                lvTransOrderRec.MARK(TRUE);
            Type::Removal:
              IF (lvTransOrderRec."From Location" = TransOrderRec."From Location") OR
                 (lvTransOrderRec."To Location" = TransOrderRec."From Location")
              THEN
                lvTransOrderRec.MARK(TRUE);
            Type::"Other Transfers":
              IF ((NOT TransOrderRec."From Depot") AND
                  ((lvTransOrderRec."From Location" = TransOrderRec."From Location") OR
                   (lvTransOrderRec."To Location" = TransOrderRec."From Location"))) OR
                 ((NOT TransOrderRec."To Depot") AND
                  ((lvTransOrderRec."From Location" = TransOrderRec."To Location") OR
                   (lvTransOrderRec."To Location" = TransOrderRec."To Location")))
              THEN
                lvTransOrderRec.MARK(TRUE);
          END;
        UNTIL lvTransOrderRec.NEXT = 0;
      END;

      IF lvTransOrderRec.MARKEDONLY THEN;
      IF TransOrderRec."Invoice with Transport Order" <> '' THEN
        PAGE.RUNMODAL(0, lvTransOrderRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, lvTransOrderRec) = ACTION::LookupOK THEN
          VALIDATE("Linked Transport Order No.", lvTransOrderRec."No.");
      END;
    END;

    PROCEDURE ValidateLinkedTransOrder@1100485000(IModeInput@1100485002 : Boolean);
    VAR
      lvLinkedTransOrdersRec@1100485000 : Record 11020514;
      lvTransCostLineRec@1100485001 : Record 11020506;
      lvNoTransCostLines@1100485003 : Integer;
    BEGIN
      //* Note: also called from i.a. posting of transport costs.

      CALCFIELDS("Transport Date", Type, "Shipping Agent", "Means of Transport", Status, "From Location", "To Location");

      IF ("Linked Transport Order No." = '') THEN
        EXIT;

      TESTFIELD("Transport Order No.");

      IF ("Linked Transport Order No." = "Transport Order No.") THEN
        FIELDERROR("Linked Transport Order No.");

      lvLinkedTransOrdersRec.SETRANGE("Transport Order No.", "Linked Transport Order No.");
      IF lvLinkedTransOrdersRec.FIND('-') THEN
        FIELDERROR("Linked Transport Order No.", STRSUBSTNO(Text000, "Linked Transport Order No."));

      lvLinkedTransOrdersRec.RESET;
      lvLinkedTransOrdersRec.SETCURRENTKEY("Linked Transport Order No.");
      lvLinkedTransOrdersRec.SETRANGE("Linked Transport Order No.", "Linked Transport Order No.");
      lvLinkedTransOrdersRec.SETFILTER("Transport Order No.", '<>%1', "Transport Order No.");
      IF lvLinkedTransOrdersRec.FIND('-') THEN
        FIELDERROR("Linked Transport Order No.",
          STRSUBSTNO(Text001, "Linked Transport Order No.", lvLinkedTransOrdersRec."Transport Order No."));

      GetTransOrderHeader();
      GetLinkTransOrderHeader();

      LinkTransOrderRec.TESTFIELD("Transport Date");
      LinkTransOrderRec.TESTFIELD("Transport Date", TransOrderRec."Transport Date");
      LinkTransOrderRec.TESTFIELD("Shipping Agent");
      LinkTransOrderRec.TESTFIELD("Shipping Agent", TransOrderRec."Shipping Agent");
      LinkTransOrderRec.TESTFIELD("Means of Transport");
      LinkTransOrderRec.TESTFIELD("Means of Transport", TransOrderRec."Means of Transport");
      CASE LinkTransOrderRec.Type OF
        LinkTransOrderRec.Type::Arrival:
          BEGIN
            TESTFIELD("To Location");
            CASE TransOrderRec.Type OF
              Type::Arrival:
                LinkTransOrderRec.TESTFIELD("To Location", TransOrderRec."To Location");
              Type::Removal:
                LinkTransOrderRec.TESTFIELD("To Location", TransOrderRec."From Location");
              Type::"Other Transfers":
                IF ("To Location" <> TransOrderRec."From Location") AND ("To Location" <> TransOrderRec."To Location") THEN
                  ERROR(Text002);
            END;
          END;
        LinkTransOrderRec.Type::Removal:
          BEGIN
            TESTFIELD("From Location");
            CASE TransOrderRec.Type OF
              Type::Arrival:
                LinkTransOrderRec.TESTFIELD("From Location", TransOrderRec."To Location");
              Type::Removal:
                LinkTransOrderRec.TESTFIELD("From Location", TransOrderRec."From Location");
              Type::"Other Transfers":
                IF ("From Location" <> TransOrderRec."From Location") AND ("From Location" <> TransOrderRec."To Location") THEN
                  ERROR(Text002);
            END;
          END;
        LinkTransOrderRec.Type::"Other Transfers":
          BEGIN
            TESTFIELD("From Location");
            TESTFIELD("To Location");
            CASE TransOrderRec.Type OF
              Type::Arrival:
                IF ("From Location" <> TransOrderRec."To Location") AND ("To Location" <> TransOrderRec."To Location") THEN
                  ERROR(Text002);
              Type::Removal:
                IF ("From Location" <> TransOrderRec."From Location") AND ("To Location" <> TransOrderRec."From Location") THEN
                  ERROR(Text002);
              Type::"Other Transfers":
                IF ("From Location" <> TransOrderRec."From Location") AND ("From Location" <> TransOrderRec."To Location") AND
                   ("To Location" <> TransOrderRec."From Location") AND ("To Location" <> TransOrderRec."To Location") THEN
                  ERROR(Text002);
            END;
          END;
      END;

      lvTransCostLineRec.SETRANGE("Transport Order No.", "Linked Transport Order No.");
      lvTransCostLineRec.SETFILTER(Type, '<>%1', lvTransCostLineRec.Type::Text);
      lvTransCostLineRec.SETFILTER(Quantity, '<>%1', 0);
      IF lvTransCostLineRec.FIND('-') THEN BEGIN
        PlantSetupRec.GET;
        IF IModeInput AND PlantSetupRec."Lnk TO Cost on Main TO allowed" THEN BEGIN  //* See remark at field in table 'Plant Setup'
          lvNoTransCostLines := lvTransCostLineRec.COUNT;
          lvTransCostLineRec.SETRANGE(Type, lvTransCostLineRec.Type::"Load/Unload");
          lvTransCostLineRec.SETRANGE("Invoice-to",
            lvTransCostLineRec."Invoice-to"::Location, lvTransCostLineRec."Invoice-to"::"To Location");
          IF lvTransCostLineRec.COUNT = lvNoTransCostLines THEN BEGIN  //* All (filled) lines are Load/Unload-costs with invoic. to location
            IF CONFIRM(Text004, TRUE, "Linked Transport Order No.", "Transport Order No.") THEN BEGIN
              CopyTransOrderCosts();
              EXIT;
            END;
          END;
        END;
        FIELDERROR("Linked Transport Order No.", STRSUBSTNO(Text003, "Linked Transport Order No."));
      END;
    END;

    PROCEDURE CopyTransOrderCosts@1100485003();
    VAR
      lvTransCostLineRec@1100485000 : Record 11020506;
      lvTransCostLineRec2@1100485001 : Record 11020506;
      lvNextLineNo@1100485002 : Integer;
    BEGIN
      lvTransCostLineRec.SETRANGE("Transport Order No.", "Linked Transport Order No.");
      lvTransCostLineRec.SETRANGE(Type, lvTransCostLineRec.Type::"Load/Unload");
      lvTransCostLineRec.SETRANGE("Invoice-to",
        lvTransCostLineRec."Invoice-to"::Location, lvTransCostLineRec."Invoice-to"::"To Location");
      lvTransCostLineRec.SETFILTER(Quantity, '<>%1', 0);
      IF lvTransCostLineRec.FIND('-') THEN BEGIN
        GetTransOrderHeader();
        GetLinkTransOrderHeader();
        lvNextLineNo := 10000;
        lvTransCostLineRec2.SETRANGE("Transport Order No.", "Transport Order No.");
        IF lvTransCostLineRec2.FIND('+') THEN
          lvNextLineNo := lvNextLineNo + lvTransCostLineRec2."Line No.";

        REPEAT
          lvTransCostLineRec2 := lvTransCostLineRec;
          lvTransCostLineRec2."Transport Order No." := "Transport Order No.";
          lvTransCostLineRec2."Line No." := lvNextLineNo;
          lvTransCostLineRec2."Plant Order No." := '';
          CASE LinkTransOrderRec.Type OF
            LinkTransOrderRec.Type::Arrival:
              BEGIN
                CASE TransOrderRec.Type OF
                  TransOrderRec.Type::Arrival:
                    IF (LinkTransOrderRec."To Location" <> TransOrderRec."To Location") THEN
                      ERROR(Text005);
                  TransOrderRec.Type::Removal:
                    IF (LinkTransOrderRec."To Location" <> TransOrderRec."From Location") THEN
                      ERROR(Text005);
                  TransOrderRec.Type::"Other Transfers":
                    BEGIN
                      IF (LinkTransOrderRec."To Location" = TransOrderRec."From Location") THEN
                        lvTransCostLineRec2."Invoice-to" := lvTransCostLineRec2."Invoice-to"::"From Location"
                      ELSE BEGIN
                        IF (LinkTransOrderRec."To Location" = TransOrderRec."To Location") THEN
                          lvTransCostLineRec2."Invoice-to" := lvTransCostLineRec2."Invoice-to"::"To Location"
                        ELSE
                          ERROR(Text005);
                      END;
                    END;
                END;
              END;
            LinkTransOrderRec.Type::Removal:
              BEGIN
                CASE TransOrderRec.Type OF
                  TransOrderRec.Type::Arrival:
                    IF (LinkTransOrderRec."From Location" <> TransOrderRec."To Location") THEN
                      ERROR(Text005);
                  TransOrderRec.Type::Removal:
                    IF (LinkTransOrderRec."From Location" <> TransOrderRec."From Location") THEN
                      ERROR(Text005);
                  TransOrderRec.Type::"Other Transfers":
                    BEGIN
                      IF (LinkTransOrderRec."From Location" = TransOrderRec."From Location") THEN
                        lvTransCostLineRec2."Invoice-to" := lvTransCostLineRec2."Invoice-to"::"From Location"
                      ELSE BEGIN
                        IF (LinkTransOrderRec."From Location" = TransOrderRec."To Location") THEN
                          lvTransCostLineRec2."Invoice-to" := lvTransCostLineRec2."Invoice-to"::"To Location"
                        ELSE
                          ERROR(Text005);
                      END;
                    END;
                END;
              END;
            LinkTransOrderRec.Type::"Other Transfers":
              BEGIN
                IF (lvTransCostLineRec."Invoice-to" = lvTransCostLineRec."Invoice-to"::Location) THEN BEGIN
                  IF (LinkTransOrderRec."From Depot" AND (NOT LinkTransOrderRec."To Depot")) OR
                      ((NOT LinkTransOrderRec."From Depot") AND LinkTransOrderRec."To Depot")
                  THEN BEGIN  //* If one of two (not both or none) is a location
                    IF LinkTransOrderRec."To Depot" THEN
                      lvTransCostLineRec."Invoice-to" := lvTransCostLineRec."Invoice-to"::"From Location"
                    ELSE
                      lvTransCostLineRec."Invoice-to" := lvTransCostLineRec."Invoice-to"::"To Location";
                    lvTransCostLineRec2."Invoice-to" := lvTransCostLineRec."Invoice-to";
                  END;
                END;
                CASE lvTransCostLineRec."Invoice-to" OF
                  lvTransCostLineRec."Invoice-to"::"From Location":
                    BEGIN
                      CASE TransOrderRec.Type OF
                        TransOrderRec.Type::Arrival:
                          IF (LinkTransOrderRec."From Location" = TransOrderRec."To Location") THEN
                            lvTransCostLineRec2."Invoice-to" := lvTransCostLineRec2."Invoice-to"::Location
                          ELSE
                            ERROR(Text005);
                        TransOrderRec.Type::Removal:
                          IF (LinkTransOrderRec."From Location" = TransOrderRec."From Location") THEN
                            lvTransCostLineRec2."Invoice-to" := lvTransCostLineRec2."Invoice-to"::Location
                          ELSE
                            ERROR(Text005);
                        TransOrderRec.Type::"Other Transfers":
                          BEGIN
                            LinkTransOrderRec.TESTFIELD("From Depot", FALSE);
                            IF (LinkTransOrderRec."From Location" <> TransOrderRec."From Location") THEN BEGIN
                              IF (LinkTransOrderRec."From Location" = TransOrderRec."To Location") THEN
                                lvTransCostLineRec2."Invoice-to" := lvTransCostLineRec2."Invoice-to"::"To Location"
                              ELSE
                                ERROR(Text005);
                            END;
                          END;
                      END;
                    END;
                  lvTransCostLineRec."Invoice-to"::"To Location":
                    BEGIN
                      CASE TransOrderRec.Type OF
                        TransOrderRec.Type::Arrival:
                          IF (LinkTransOrderRec."To Location" = TransOrderRec."To Location") THEN
                            lvTransCostLineRec2."Invoice-to" := lvTransCostLineRec2."Invoice-to"::Location
                          ELSE
                            ERROR(Text005);
                        TransOrderRec.Type::Removal:
                          IF (LinkTransOrderRec."To Location" = TransOrderRec."From Location") THEN
                            lvTransCostLineRec2."Invoice-to" := lvTransCostLineRec2."Invoice-to"::Location
                          ELSE
                            ERROR(Text005);
                        TransOrderRec.Type::"Other Transfers":
                          BEGIN
                            LinkTransOrderRec.TESTFIELD("To Depot", FALSE);
                            IF (LinkTransOrderRec."To Location" <> TransOrderRec."To Location") THEN BEGIN
                              IF (LinkTransOrderRec."To Location" = TransOrderRec."From Location") THEN
                                lvTransCostLineRec2."Invoice-to" := lvTransCostLineRec2."Invoice-to"::"From Location"
                              ELSE
                                ERROR(Text005);
                            END;
                          END;
                      END;
                    END;
                  lvTransCostLineRec."Invoice-to"::Location:
                    BEGIN
                      IF NOT (
                         (TransOrderRec.Type = TransOrderRec.Type::"Other Transfers") AND
                         ((NOT LinkTransOrderRec."From Depot") AND (NOT LinkTransOrderRec."To Depot")) AND
                         (((LinkTransOrderRec."From Location" = TransOrderRec."From Location") AND
                           (LinkTransOrderRec."To Location" = TransOrderRec."To Location")) OR
                          ((LinkTransOrderRec."From Location" = TransOrderRec."To Location") AND
                           (LinkTransOrderRec."To Location" = TransOrderRec."From Location"))) )
                      THEN
                        ERROR(Text005);
                    END;
                ELSE
                  ERROR(Text005);
                END;
              END;
          END;
          lvTransCostLineRec2."Linked Transport Order (Cost)" := lvTransCostLineRec."Transport Order No.";
          lvTransCostLineRec2."Linked Plant Order No. (Cost)" := lvTransCostLineRec."Plant Order No.";
          lvTransCostLineRec2.INSERT;
          lvNextLineNo := lvNextLineNo + 10000;

          lvTransCostLineRec.DELETE;
        UNTIL lvTransCostLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE CheckLinkedTOCost@1100485004(ITransOrderNo@1100485001 : Code[20];ILinkedTO@1100485000 : Code[20]);
    VAR
      lvTransCostLineRec@1100485002 : Record 11020506;
    BEGIN
      PlantSetupRec.GET;
      IF (NOT PlantSetupRec."Lnk TO Cost on Main TO allowed") OR (ILinkedTO = '') THEN
        EXIT;

      lvTransCostLineRec.SETRANGE("Transport Order No.", ITransOrderNo);
      lvTransCostLineRec.SETRANGE("Linked Transport Order (Cost)", ILinkedTO);
      lvTransCostLineRec.SETRANGE(Type, lvTransCostLineRec.Type::"Load/Unload");
      IF lvTransCostLineRec.FIND('-') THEN
        ERROR(Text006);
    END;

    BEGIN
    END.
  }
}

