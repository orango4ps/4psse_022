OBJECT Codeunit 11125764 Glazing Svc. Call - Create SO
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11125777;
    Permissions=TableData 11012823=rim;
    OnRun=VAR
            WorkOrder@1100527402 : Record 11229279;
          BEGIN
            OnBeforeRun(Rec);
            IF NOT (Status IN [Status::Released, Status::"Plan during Clock Time"]) THEN
              FIELDERROR(Status);
            TESTFIELD(Date);

            IF CreateServiceOrder(Rec) THEN BEGIN
              WorkOrder.SETCURRENTKEY("Source Company", "Source Type", "Source No.");
              WorkOrder.SETRANGE("Source Company", COMPANYNAME);
              WorkOrder.SETRANGE("Source Type", WorkOrder."Source Type"::ServiceOrder);
              WorkOrder.SETRANGE("Source No.", "Service Order No.");
              IF WorkOrder.COUNT = 1 THEN
                WorkOrder.DELETEALL(TRUE);
            END;
            OnAfterRun(Rec);
          END;

  }
  CODE
  {

    PROCEDURE CreateServiceOrder@1210190002(VAR IGlazingServiceCall@1210190001 : Record 11125777) : Boolean;
    VAR
      ServiceText@1210190022 : Record 11012882;
      ServiceOrder@1210190021 : Record 11012823;
      GlazingServiceCommentLine@1210190011 : Record 11125782;
      CommentLine@1210190010 : Record 97;
      NewServiceOrderCreated@1100528600 : Boolean;
    BEGIN
      IF IGlazingServiceCall."Service Order No." <> '' THEN
        EXIT;

      IGlazingServiceCall.CALCFIELDS("Planned Hours (Calculated)");

      ServiceOrder."Source Type" := ServiceOrder."Source Type"::Call;
      ServiceOrder.INSERT(TRUE);

      ServiceOrder."Glazing Service Call No." := IGlazingServiceCall."No.";
      ServiceOrder.VALIDATE("Service Location No.", IGlazingServiceCall."Service Location No.");
      ServiceOrder.VALIDATE("Service Contract No.", IGlazingServiceCall."Service Contract No.");
      ServiceOrder.VALIDATE("Customer No.", IGlazingServiceCall."Customer No.");
      ServiceOrder.Description := IGlazingServiceCall.Description;
      ServiceOrder.Name := IGlazingServiceCall.Name;
      ServiceOrder.Address := IGlazingServiceCall.Address;
      ServiceOrder."Address 2" := IGlazingServiceCall."Address 2";
      ServiceOrder.City := IGlazingServiceCall.City;
      ServiceOrder."Post Code" := IGlazingServiceCall."Post Code";
      ServiceOrder."Phone No." := IGlazingServiceCall."Calling Phone No.";
      ServiceOrder."Contact Name" := IGlazingServiceCall."Calling Contact";
      ServiceOrder.County := IGlazingServiceCall.County;
      ServiceOrder."Territory Code" := IGlazingServiceCall."Territory Code";
      ServiceOrder."Country/Region Code" := IGlazingServiceCall."Country/Region Code";
      ServiceOrder.VALIDATE("Bill-to Customer No.", IGlazingServiceCall."Customer No.");
      ServiceOrder.VALIDATE(Priority, IGlazingServiceCall."Priority Code");
      ServiceText.CopyServiceTexts(
        ServiceText."Table Name"::"Glazing Service Call",
        IGlazingServiceCall."No.",
        2010,
        ServiceText."Table Name"::"Service Order",
        ServiceOrder."No.",
        91);
      ServiceOrder."Order No. Customer" := IGlazingServiceCall."Order No. Customer";
      ServiceOrder."E-Mail" := IGlazingServiceCall."E-Mail";
      ServiceOrder."Your Reference" := IGlazingServiceCall."Your Reference";
      ServiceOrder."Contact Person No." := IGlazingServiceCall."Service Contact Person No.";
      IF IGlazingServiceCall."Contract Amount" <> 0 THEN
        ServiceOrder."Settlement Method" := ServiceOrder."Settlement Method"::"Fixed Price"
      ELSE
        ServiceOrder."Settlement Method" := ServiceOrder."Settlement Method"::"Cost Plus";
      ServiceOrder."Schedule Method" := IGlazingServiceCall."Schedule Method";
      IF IGlazingServiceCall."Order Manager" <> '' THEN
        ServiceOrder."Order Manager" := IGlazingServiceCall."Order Manager";
      ServiceOrder.MODIFY(TRUE);
      NewServiceOrderCreated := TRUE;

      IGlazingServiceCall.FIND('=');
      IGlazingServiceCall."Service Order No." := ServiceOrder."No.";
      IGlazingServiceCall.MODIFY(TRUE);

      GlazingServiceCommentLine.SETRANGE("Table Name", GlazingServiceCommentLine."Table Name"::"Glazing Service Call");
      GlazingServiceCommentLine.SETRANGE("No.", IGlazingServiceCall."No.");
      IF GlazingServiceCommentLine.FINDSET THEN
        REPEAT
          CommentLine."Table Name" := CommentLine."Table Name"::"Service Order";
          CommentLine."No." := ServiceOrder."No.";
          CommentLine."Line No." := GlazingServiceCommentLine."Line No.";
          CommentLine.Date := GlazingServiceCommentLine.Date;
          CommentLine.Code := GlazingServiceCommentLine.Code;
          CommentLine.Comment := GlazingServiceCommentLine.Comment;
          CommentLine.INSERT;
        UNTIL GlazingServiceCommentLine.NEXT = 0;

      IF IGlazingServiceCall."Contract Amount" = 0 THEN
        ServiceOrder.VALIDATE("Order Amount (LCY)", IGlazingServiceCall.TotalSalesAmount)
      ELSE
        ServiceOrder.VALIDATE("Order Amount (LCY)", IGlazingServiceCall."Contract Amount");

      ServiceOrder.VALIDATE("Order Kind",  IGlazingServiceCall."Order Kind Code");
      ServiceOrder.VALIDATE("Order Type", IGlazingServiceCall."Order Type Code");
      ServiceOrder.MODIFY(TRUE);

      ServiceOrder.VALIDATE(Status, ServiceOrder.Status::"In Process");
      ServiceOrder.HandleStatusChange;
      ServiceOrder.MODIFY(TRUE);
      EXIT(TRUE);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRun@1100528600(VAR GlazingServiceCall@1100528600 : Record 11125777);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterRun@1100528601(VAR GlazingServiceCall@1100528600 : Record 11125777);
    BEGIN
    END;

    BEGIN
    END.
  }
}

