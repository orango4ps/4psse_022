OBJECT Table 11012148 Queued External Document
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    OnInsert=VAR
               QueuedExternalDocument@1100525000 : Record 11012148;
               HigherFileNameFound@1210190000 : Boolean;
             BEGIN
               TESTFIELD(User);
               IF "Line No." = 0 THEN BEGIN
                 QueuedExternalDocument.SETRANGE(User, User);
                 IF QueuedExternalDocument.FINDLAST THEN
                   "Line No." := QueuedExternalDocument."Line No." + 1
                 ELSE
                   "Line No." := 1;
               END;
               QueuedExternalDocument.SETCURRENTKEY("Seq. No.");
               //find where in the alphabetical order this record should be inserted
               //increase Seq. No. records that are higher in the order
               IF QueuedExternalDocument.FINDSET(TRUE, FALSE) THEN BEGIN
                 REPEAT
                   IF NOT HigherFileNameFound AND ("File Name" < QueuedExternalDocument."File Name") THEN BEGIN
                     "Seq. No." := QueuedExternalDocument."Seq. No.";
                     HigherFileNameFound := TRUE;
                   END;
                   IF HigherFileNameFound THEN BEGIN
                     QueuedExternalDocument."Seq. No." += 10;
                     QueuedExternalDocument.MODIFY;
                   END;
                 UNTIL QueuedExternalDocument.NEXT = 0;
                 IF NOT HigherFileNameFound THEN BEGIN
                   "Seq. No." := QueuedExternalDocument."Seq. No." + 10;
                 END;
               END ELSE BEGIN
                 "Seq. No." := 10;
               END;
             END;

    CaptionML=[ENU=Queued External Document;
               NOR=Eksternt Dokument i k›;
               SVE=Externa dokument i k”];
  }
  FIELDS
  {
    { 10  ;   ;User                ;Code50        ;CaptionML=[ENU=User;
                                                              NOR=Bruker;
                                                              SVE=Anv„ndare] }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 30  ;   ;Folder              ;Text250       ;CaptionML=[ENU=Folder;
                                                              NOR=Mappe;
                                                              SVE=Mapp];
                                                   Editable=No }
    { 40  ;   ;File Name           ;Text250       ;OnValidate=BEGIN
                                                                IF ("File Name" <> '') AND (Folder <> '') THEN
                                                                  IF NOT FileMgt.ClientFileExists(Folder + "File Name") THEN
                                                                    ERROR(Text001, Folder + "File Name");
                                                              END;

                                                   CaptionML=[ENU=File Name;
                                                              NOR=Filnavn;
                                                              SVE=Filnamn];
                                                   Editable=No }
    { 50  ;   ;Seq. No.            ;Integer       ;CaptionML=[ENU=Seq. No.;
                                                              NOR=Sekv. nr;
                                                              SVE=Sekv. nr] }
    { 100 ;   ;Source              ;Option        ;CaptionML=[ENU=Source;
                                                              NOR=Source;
                                                              SVE=K„lla];
                                                   OptionString=User,System;
                                                   Editable=No }
    { 200 ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 210 ;   ;Reference           ;Text80        ;CaptionML=[ENU=Reference;
                                                              NOR=Referanse;
                                                              SVE=Referens] }
    { 220 ;   ;Subject             ;Text100       ;CaptionML=[ENU=Subject;
                                                              NOR=Emne;
                                                              SVE=Ang†ende] }
    { 230 ;   ;Contact No.         ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Contact No.;
                                                              NOR=Kontaktnr;
                                                              SVE=Kontaktnr] }
    { 240 ;   ;Contact Person No.  ;Code20        ;TableRelation=Contact.No. WHERE (Type=CONST(Person),
                                                                                    Company No.=FIELD(Contact No.));
                                                   CaptionML=[ENU=Contact Person No.;
                                                              NOR=Kontaktperson;
                                                              SVE=Kontaktperson] }
    { 250 ;   ;Addressed to        ;Code20        ;TableRelation=Employee;
                                                   CaptionML=[ENU=Addressed to;
                                                              NOR=Adressert til;
                                                              SVE=Adresserat till] }
    { 260 ;   ;Original to         ;Code20        ;TableRelation=Employee.No.;
                                                   CaptionML=[ENU=Original to;
                                                              NOR=Opprinnelig til;
                                                              SVE=Ursprungligen till] }
    { 270 ;   ;Document Type       ;Code10        ;TableRelation="Document Type".Type;
                                                   CaptionML=[ENU=Document Type;
                                                              NOR=Dokumenttype;
                                                              SVE=Dokumenttyp] }
    { 280 ;   ;Document Category   ;Code5         ;TableRelation="Document Category";
                                                   CaptionML=[ENU=Document Category;
                                                              NOR=Dokumentkategori;
                                                              SVE=Dokumentkategori] }
    { 290 ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              NOR=Dokumentdato;
                                                              SVE=Dokumentdatum] }
    { 300 ;   ;Version External Doc.;Text10       ;CaptionML=[ENU=Document Version;
                                                              NOR=Dokumentversjon;
                                                              SVE=Dokumentversion] }
    { 310 ;   ;Modification Date   ;Date          ;CaptionML=[ENU=Modification Date;
                                                              NOR=Endringsdato;
                                                              SVE=Žndringsdatum] }
    { 320 ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              NOR=Dokumentnr.;
                                                              SVE=Dokumentnr] }
    { 330 ;   ;Scale               ;Text20        ;CaptionML=[ENU=Scale;
                                                              NOR=Skala;
                                                              SVE=Skala] }
    { 340 ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=[ENU=" ,Concept,Provisional,Definite,Expired";
                                                                    NOR=" ,Konsept,Provisorisk,Definitiv,Utg†tt";
                                                                    SVE=" ,Koncept,Prelimin„r,Definitiv,Utg†ngen"];
                                                   OptionString=[ ,Concept,Provisional,Definite,Expired] }
    { 350 ;   ;Content             ;BLOB          ;CaptionML=[ENU=Content;
                                                              NOR=Innhold;
                                                              SVE=Inneh†ll] }
  }
  KEYS
  {
    {    ;User,Line No.                           ;Clustered=Yes }
    {    ;Seq. No.                                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1199197400 : TextConst 'ENU=File ''%1'' does not exist.;NOR=Filen ''%1'' finnes ikke.;SVE=Filen ''%1'' finns inte.';
      FileMgt@1100525500 : Codeunit 419;

    PROCEDURE RegisterDocument@1199197400(InitialDocumentProperties@1199197400 : Record 11012746;Relate@1100525006 : Boolean;RelateToType@1100525005 : 'Document,Purchase Quote,Purchase Order,Try-out Quote,Blanket Order,,Plant Transport Order,Plant Exit Order,Service Order,Sales Invoice,Sales Cr.Memo,Posted Sales Invoice,Posted Sales Cr.Memo';RelateToCode@1100525004 : Code[20];VAR oErrorMessage@1100525002 : Text[250];VAR oDocumentProperties@1100525003 : Record 11012746) : Boolean;
    VAR
      QueuedDocumentLink@1199197401 : Record 11125736;
      DocumentLink@1199197402 : Record 11012747;
      DocumentRelation@1100525007 : Record 11012407;
      DocumentProperties@1100409000 : Record 11012746;
      ExternalDocumentManagement@1199197404 : Codeunit 11012403;
      SourceFileName@1210190000 : Text[250];
      TargetURI@1100528702 : Text;
      TargetStorageType@1100527800 : Option;
      RecordRef@1100525000 : RecordRef;
      Job@1100525001 : Record 11072003;
      ProjectSiteMgt@1100525009 : Codeunit 11012282;
      RegistrationSuccesfull@1100527803 : Boolean;
      Instream@1100527805 : InStream;
      Base64@1100527806 : BigText;
      MemoryStream@1100527801 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      FileManagement@1100527802 : Codeunit 419;
    BEGIN
      IF "File Name" = '' THEN
        EXIT;

      //insert the document properties
      oDocumentProperties.TRANSFERFIELDS(InitialDocumentProperties);
      oDocumentProperties."No." := '';
      FillDocPropsFromQueuedExtDoc(oDocumentProperties);
      oDocumentProperties.INSERT(TRUE);
      FillModDateFromQueuedExtDoc(oDocumentProperties);

      //copy the file and modify the file location to the target location
      CALCFIELDS(Content);
      IF Content.HASVALUE THEN
      BEGIN
        Content.CREATEINSTREAM(Instream);
        Base64.READ(Instream);
        SourceFileName := "File Name";
        RegistrationSuccesfull := ExternalDocumentManagement.RegisterFileByContent(
          Base64, SourceFileName,oDocumentProperties."Document Type", oDocumentProperties."Creation Date", TargetURI, TargetStorageType);
      END;

      IF NOT Content.HASVALUE THEN
      BEGIN
        MemoryStream := MemoryStream.MemoryStream;
        SourceFileName := STRSUBSTNO('%1%2', Folder,"File Name" );
        FileManagement.ReadFileContentToMemoryStreamFromClient(SourceFileName,MemoryStream);
        RegistrationSuccesfull := ExternalDocumentManagement.RegisterFileByOutStream(
          MemoryStream, "File Name", oDocumentProperties."Document Type", oDocumentProperties."Creation Date", TargetURI, TargetStorageType);
      END;

      IF RegistrationSuccesfull THEN
      BEGIN
        oDocumentProperties.ValidateStorageURI(TargetStorageType,TargetURI);
        oDocumentProperties.MODIFY(TRUE);
      END;

      //create the document links
      QueuedDocumentLink.SETRANGE(User, USERID);
      IF QueuedDocumentLink.FINDFIRST THEN
        REPEAT
          DocumentLink.TRANSFERFIELDS(QueuedDocumentLink);
          ErrorifDocLinkNotOK("File Name", DocumentLink."Table No.");     // 161004 ITERO.AC RFC067-2 moved this call to after TRANSFERFIELDS
          DocumentLink."Document No." := oDocumentProperties."No.";
          DocumentLink."Internal Company" := oDocumentProperties."Internal Company";
          DocumentLink.SetDefaultCompany;
          DocumentLink.INSERT(FALSE);
        UNTIL QueuedDocumentLink.NEXT = 0;

      //Fill default values based on Document Type. This must be done after File or Document Service URL
      //has been filled and Document Links have been created.
      IF oDocumentProperties."Document Type" <> '' THEN BEGIN
        oDocumentProperties.VALIDATE("Document Type");
        oDocumentProperties.MODIFY(TRUE);
      END;

      //create document relations if needed
      IF Relate THEN BEGIN
        IF NOT DocumentRelation.GET(RelateToType, RelateToCode, oDocumentProperties."No.") THEN BEGIN
          DocumentRelation."Document Type" := RelateToType;
          DocumentRelation."No." := RelateToCode;
          DocumentRelation.VALIDATE("Related Document No.", oDocumentProperties."No.");  //this validates also determines the field Photo
          DocumentRelation."Print Photo" := DocumentRelation.Photo; //this is for Kimmenade that wants to print photos
          DocumentRelation."Seq. No." := "Seq. No.";
          DocumentRelation.Description := oDocumentProperties.Description;
          DocumentRelation."Send by E-Mail" := TRUE;
          IF oDocumentProperties.FileCanBeConvertedToPDF THEN
            DocumentRelation.Print := TRUE;
          DocumentRelation.INSERT(TRUE);
        END;

        IF RelateToType = RelateToType::Document THEN BEGIN
          IF DocumentProperties.GET(RelateToCode) THEN BEGIN
            DocumentRelation."Document Type" := RelateToType;
            DocumentRelation."No." := oDocumentProperties."No.";
            DocumentRelation.VALIDATE("Related Document No.", RelateToCode);
            DocumentRelation."Print Photo" := DocumentRelation.Photo;
            DocumentRelation.Description := DocumentProperties.Description;
            DocumentRelation."Send by E-Mail" := TRUE;
            IF DocumentProperties.FileCanBeConvertedToPDF THEN
              DocumentRelation.Print := TRUE;
            DocumentRelation.INSERT(TRUE);
          END;
        END;
      END;

      //add documents to ppt/dpt old if applicable (moved from the documentLink insert trigger)
      DocumentLink.RESET;
      DocumentLink.SETRANGE("Document No.", oDocumentProperties."No.");
      DocumentLink.SETRANGE("Internal Company", oDocumentProperties."Internal Company");
      DocumentLink.SETRANGE("Table No.", DATABASE::Job);

      IF DocumentLink.FINDFIRST THEN BEGIN
          RecordRef.GET(DocumentLink."Record ID");
          IF (RecordRef.NUMBER = DATABASE::Job) THEN BEGIN
            DocumentLink.SetDPTFields;
            DocumentLink.UpdateProjectPortal(1);
            ProjectSiteMgt.LogDocumentLink(1, DocumentLink);
          END;
      END;


      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FillDocPropsFromQueuedExtDoc@1100528402(VAR DocumentProperties@1100528400 : Record 11012746);
    BEGIN
      IF Description <> '' THEN
        DocumentProperties.Description := Description;
      IF Reference <> '' THEN
        DocumentProperties.Reference := Reference;
      IF Subject <> '' THEN
        DocumentProperties.Subject := Subject;
      IF "Contact No." <> '' THEN
        DocumentProperties.VALIDATE("Contact No.", "Contact No.");
      IF "Contact Person No." <> '' THEN
        DocumentProperties.VALIDATE("Contact Person No.", "Contact Person No.");
      IF "Addressed to" <> '' THEN
        DocumentProperties."Addressed To" := "Addressed to";
      IF "Original to" <> '' THEN
        DocumentProperties."Original To" := "Original to";
      IF "Document Type" <> '' THEN
        DocumentProperties."Document Type" := "Document Type";
      IF "Document Category" <> '' THEN
        DocumentProperties."Document Category" := "Document Category";
      IF "Document Date" <> 0D THEN
        DocumentProperties."Document Date" := "Document Date";
      IF "Version External Doc." <> '' THEN
        DocumentProperties."Version External Doc." := "Version External Doc.";
      IF "Document No." <> '' THEN
        DocumentProperties."Document No." := "Document No.";
      IF Scale <> '' THEN
        DocumentProperties.Scale := Scale;
      IF Status <> Status::" " THEN
        DocumentProperties.Status := Status;
    END;

    PROCEDURE FillModDateFromQueuedExtDoc@1100528700(DocumentProperties@1100528700 : Record 11012746);
    VAR
      DocumentModificationDate@1100528701 : Record 11012406;
    BEGIN
      IF "Modification Date" <> 0D THEN BEGIN
        DocumentModificationDate."Document No." := DocumentProperties."No.";
        DocumentModificationDate."Line No." := DocumentModificationDate.GetNextFreeLineNo(DocumentModificationDate."Document No.");
        DocumentModificationDate.Date := "Modification Date";
        DocumentModificationDate.INSERT;
      END;
    END;

    LOCAL PROCEDURE "*** 4PSSE ***"@1100285100();
    BEGIN
    END;

    PROCEDURE ErrorifDocLinkNotOK@1100285306(FileName@1100285303 : Text;TableNo@1100285100 : Integer);
    VAR
      LText01@1100285301 : TextConst 'ENU=Filename must not be exceed 25 characters.;NOR=Filnavnet m† ikke overstige 25 tegn.;SVE=Filnamnet f†r inte vara l„ngre „n 25 tecken.';
      LText02@1100285300 : TextConst 'ENU=Only PDF documents can be linked to this table.;NOR=Bare PDF-dokumenter kan knyttes til denne tabellen.;SVE=Enbart PDF-dokument kan l„nkas till den h„r tabellen.';
      SalesSetup@1100285302 : Record 311;
      FileManagement@1100285304 : Codeunit 419;
      Regex@1100285305 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      LText03@1100285306 : TextConst 'ENU=The file name can only contain the following characters: A-Z, 0-9, hyphens, underscores and spaces.;NOR=Filnavnet kan bare inneholde f›lgende tegn: A-Z, 0-9, bindestrek, understreker og mellomrom.;SVE=Filnamnet f†r enbart inneh†lla f”ljande tecken: A-Z, 0-9, bindestreck, understrykning och mellanslag.';
      PathHelper@1100285101 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path";
      ShortFileName@1100285102 : Text;
    BEGIN
      //>> ITERO.LP 4PSSE: RFC067-2
      SalesSetup.GET;

      IF NOT SalesSetup."Svefaktura Background Export" THEN
        EXIT;
      // IF SalesSetup."Svefaktura Background Export" THEN BEGIN
      //>>170210
        ShortFileName := PathHelper.GetFileNameWithoutExtension(FileName);
        //IF STRLEN(FileManagement.GetFileName(FileName)) > 25 THEN
      //>>190321, moved to cu81694 as subscriber
      //<<170210
      //  IF STRLEN(ShortFileName) > 25 THEN
      //    ERROR(LText01);
      //<<190321

        IF (TableNo IN [36,112,114,302,304,295,297]) AND (UPPERCASE(FileManagement.GetExtension(FileName)) <> 'PDF') THEN
          ERROR(LText02);

      //>>170210
        //IF NOT Regex.IsMatch(PathHelper.GetFileNameWithoutExtension(FileName), '^[a-zA-Z0-9]+$') THEN
        IF NOT Regex.IsMatch(ShortFileName, '^[a-zA-Z0-9 -_]+$') THEN
      //<<170210
          ERROR(LText03);
      // END;
      //<< ITERO.LP

      OnAfterErrorifDocLinkNotOK(FileName,TableNo);
    END;

    [Integration]
    PROCEDURE OnAfterErrorifDocLinkNotOK@1100285102(FileName@1100285101 : Text;TableNo@1100285100 : Integer);
    BEGIN
    END;

    BEGIN
    {
      160926 ITERO.LP RFC067-2 New function ErrorifDocLinkNotOK
      161004 ITERO.AC RFC067-2 Bugfix in the RegisterDocument function
      170210 ITERO.DL RFC067-2 allow length excl extension, hyphens, underscores and spaces.
      190321 ORANGO.DL #22969 filelenghts to InExchange attachments, added OnAfterErrorifDocLinkNotOK
    }
    END.
  }
}

