OBJECT Page 785 Customer Picture
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Customer Picture;
               NOR=Kundebilde;
               SVE=Kundens bild];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table18;
    PageType=CardPart;
    OnOpenPage=BEGIN
                 CameraAvailable := CameraProvider.IsAvailable;
                 IF CameraAvailable THEN
                   CameraProvider := CameraProvider.Create;
               END;

    OnAfterGetCurrRecord=BEGIN
                           SetEditableOnPictureActions;
                         END;

    ActionList=ACTIONS
    {
      { 2       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 3       ;1   ;Action    ;
                      Name=TakePicture;
                      CaptionML=[ENU=Take;
                                 NOR=Ta;
                                 SVE=Ta bild];
                      ToolTipML=[ENU=Activate the camera on the device.;
                                 NOR=Aktiver kameraet p† enheten.;
                                 SVE=Aktivera enhetens kamera.];
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=CameraAvailable;
                      PromotedIsBig=Yes;
                      Image=Camera;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 TakeNewPicture;
                               END;
                                }
      { 4       ;1   ;Action    ;
                      Name=ImportPicture;
                      CaptionML=[ENU=Import;
                                 NOR=Importer;
                                 SVE=Importera];
                      ToolTipML=[ENU=Import a picture file.;
                                 NOR=Importer en bildefil.;
                                 SVE=Importera en bildfil.];
                      ApplicationArea=#All;
                      Image=Import;
                      OnAction=VAR
                                 FileManagement@1001 : Codeunit 419;
                                 FileName@1000 : Text;
                                 ClientFileName@1002 : Text;
                               BEGIN
                                 TESTFIELD("No.");
                                 IF Name = '' THEN
                                   ERROR(MustSpecifyNameErr);

                                 IF Image.HASVALUE THEN
                                   IF NOT CONFIRM(OverrideImageQst) THEN
                                     EXIT;

                                 FileName := FileManagement.UploadFile(SelectPictureTxt,ClientFileName);
                                 IF FileName = '' THEN
                                   EXIT;

                                 CLEAR(Image);
                                 Image.IMPORTFILE(FileName,ClientFileName);
                                 IF NOT MODIFY(TRUE) THEN
                                   INSERT(TRUE);

                                 IF FileManagement.DeleteServerFile(FileName) THEN;
                               END;
                                }
      { 6       ;1   ;Action    ;
                      Name=ExportFile;
                      CaptionML=[ENU=Export;
                                 NOR=Eksporter;
                                 SVE=Exportera];
                      ToolTipML=[ENU=Export the picture to a file.;
                                 NOR=Eksporter bildet til en fil.;
                                 SVE=Exportera bilden till en fil.];
                      ApplicationArea=#All;
                      Enabled=DeleteExportEnabled;
                      Image=Export;
                      OnAction=VAR
                                 DummyPictureEntity@1000 : Record 5468;
                                 FileManagement@1001 : Codeunit 419;
                                 ToFile@1003 : Text;
                                 ExportPath@1005 : Text;
                               BEGIN
                                 TESTFIELD("No.");
                                 TESTFIELD(Name);

                                 ToFile := DummyPictureEntity.GetDefaultMediaDescription(Rec);
                                 ExportPath := TEMPORARYPATH + "No." + FORMAT(Image.MEDIAID);
                                 Image.EXPORTFILE(ExportPath);

                                 FileManagement.ExportImage(ExportPath,ToFile);
                               END;
                                }
      { 7       ;1   ;Action    ;
                      Name=DeletePicture;
                      CaptionML=[ENU=Delete;
                                 NOR=Slett;
                                 SVE=Ta bort];
                      ToolTipML=[ENU=Delete the record.;
                                 NOR=Slett posten.;
                                 SVE=Ta bort transaktionen.];
                      ApplicationArea=#All;
                      Enabled=DeleteExportEnabled;
                      Image=Delete;
                      OnAction=BEGIN
                                 TESTFIELD("No.");

                                 IF NOT CONFIRM(DeleteImageQst) THEN
                                   EXIT;

                                 CLEAR(Image);
                                 MODIFY(TRUE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Field     ;
                ToolTipML=[ENU=Specifies the picture of the customer, for example, a logo.;
                           NOR=Angir bildet av kunden, for eksempel en logo.;
                           SVE=Anger bilden f”r kunden, t.ex. en logotyp.];
                ApplicationArea=#All;
                SourceExpr=Image;
                ShowCaption=No }

  }
  CODE
  {
    VAR
      CameraProvider@1000 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Capabilities.CameraProvider" WITHEVENTS RUNONCLIENT;
      CameraAvailable@1002 : Boolean;
      OverrideImageQst@1007 : TextConst 'ENU=The existing picture will be replaced. Do you want to continue?;NOR=Det eksisterende bildet vil bli erstattet. Vil du fortsette?;SVE=Den befintliga bilden ers„tts. Vill du forts„tta?';
      DeleteImageQst@1003 : TextConst 'ENU=Are you sure you want to delete the picture?;NOR=Er du sikker p† at du vil slette bildet?;SVE=Vill du ta bort bilden?';
      SelectPictureTxt@1001 : TextConst 'ENU=Select a picture to upload;NOR=Velg et bilde for opplasting;SVE=V„lj en bild att ladda upp';
      DeleteExportEnabled@1005 : Boolean;
      MustSpecifyNameErr@1004 : TextConst 'ENU=You must specify a customer name before you can import a picture.;NOR=Du m† angi et kundenavn f›r du kan importere et bilde.;SVE=Du m†ste ange ett kundnamn innan du kan importera en bild.';

    [External]
    PROCEDURE TakeNewPicture@2();
    VAR
      CameraOptions@1000 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Capabilities.CameraOptions";
    BEGIN
      FIND;
      TESTFIELD("No.");
      TESTFIELD(Name);

      IF NOT CameraAvailable THEN
        EXIT;

      CameraOptions := CameraOptions.CameraOptions;
      CameraOptions.Quality := 50;
      CameraProvider.RequestPictureAsync(CameraOptions);
    END;

    LOCAL PROCEDURE SetEditableOnPictureActions@1();
    BEGIN
      DeleteExportEnabled := Image.HASVALUE;
    END;

    [External]
    PROCEDURE IsCameraAvailable@3() : Boolean;
    BEGIN
      EXIT(CameraProvider.IsAvailable);
    END;

    EVENT CameraProvider@1000::PictureAvailable@10(PictureName@1001 : Text;PictureFilePath@1000 : Text);
    VAR
      File@1003 : File;
      Instream@1004 : InStream;
    BEGIN
      IF (PictureName = '') OR (PictureFilePath = '') THEN
        EXIT;

      IF Image.HASVALUE THEN
        IF NOT CONFIRM(OverrideImageQst) THEN BEGIN
          IF ERASE(PictureFilePath) THEN;
          EXIT;
        END;

      File.OPEN(PictureFilePath);
      File.CREATEINSTREAM(Instream);

      CLEAR(Image);
      Image.IMPORTSTREAM(Instream,PictureName);
      IF NOT MODIFY(TRUE) THEN
        INSERT(TRUE);

      File.CLOSE;
      IF ERASE(PictureFilePath) THEN;
    END;

    BEGIN
    END.
  }
}

