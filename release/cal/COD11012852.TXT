OBJECT Codeunit 11012852 Service Survey Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 11071743=imd,
                TableData 11071744=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100528600 : TextConst 'ENU=All Objects already created;SVE=Markera f”rst poster med Ctrl+F1';
      Text002@1210190000 : TextConst 'ENU=First select lines;NOR=Velg rad(er) f›rst;SVE=V„lj rad(er) f”rst';
      Text004@1100409000 : TextConst 'ENU=No Starting Date given;NOR=Ingen startdato angitt';
      Text005@1100528601 : TextConst 'ENU=Divided %1;SVE=Markerade objekt som redan har skapats';
      Text006@1100525000 : TextConst 'ENU=Object(s) added to %1 Service Contract %2';
      Text007@1100525001 : TextConst 'ENU=new;SVE=new';
      Text008@1100525002 : TextConst 'ENU=existing';
      TmpServSurvObjectAddAct@1100528602 : TEMPORARY Record 11071814;
      Text009@1100528603 : TextConst 'ENU=Service Order(s) %1 created;SVE=Serviceorder(s) %1 skapad(e)';
      ServiceSurveyLocation@1100528604 : Record 11071804;
      Text010@1100528605 : TextConst 'ENU=No Service Orders created';

    PROCEDURE GetServiceRate@1100528600(IServSurvLocationObject@1100528601 : Record 11071813) : Decimal;
    VAR
      ServiceSurvey@1100528602 : Record 11071803;
      GetMaintenanceSalesAndCost@1100528600 : Codeunit 11012827;
    BEGIN
      IF NOT ServiceSurvey.GET(IServSurvLocationObject."Survey No.") THEN
        ServiceSurvey.INIT;
      IServSurvLocationObject.CALCFIELDS("Object Group");
      EXIT(GetMaintenanceSalesAndCost.GetRate(
        ServiceSurvey."Customer No.", GetReferenceDate(IServSurvLocationObject."Survey No."),
        IServSurvLocationObject."Object Group", IServSurvLocationObject."Customer Object Group",
        IServSurvLocationObject."Service Package"));
    END;

    PROCEDURE GetCostObjectDetail@1100528601(IServSurvLocObjDetail@1100528609 : Record 11071807;VAR OLabor@1100528602 : Decimal;VAR OHours@1100528603 : Decimal;VAR OMaterial@1100528604 : Decimal;VAR OSubcontracting@1100528605 : Decimal;VAR OPlant@1100528606 : Decimal;VAR OSundry@1100528607 : Decimal;VAR OTotalCost@1100528608 : Decimal);
    BEGIN
      GetCostObjectDetByCostObject(
        IServSurvLocObjDetail, '', '', TRUE, OLabor, OHours, OMaterial, OSubcontracting, OPlant, OSundry, OTotalCost);
    END;

    PROCEDURE GetCostObjectDetByCostObject@1100528609(IServSurvLocObjDetail@1100528607 : Record 11071807;ICostObjectFilter@1100528608 : Code[250];IRateCodeFilter@1100528614 : Code[250];IInclAdditionalActivities@1100528612 : Boolean;VAR OLabor@1100528606 : Decimal;VAR OHours@1100528605 : Decimal;VAR OMaterial@1100528604 : Decimal;VAR OSubcontracting@1100528603 : Decimal;VAR OPlant@1100528602 : Decimal;VAR OSundry@1100528601 : Decimal;VAR OTotalCost@1100528600 : Decimal);
    VAR
      ServiceSurvey@1100528613 : Record 11071803;
    BEGIN
      ServiceSurvey.GET(IServSurvLocObjDetail."Survey No.");

      GetTempSurveyWorkList(IServSurvLocObjDetail, IInclAdditionalActivities, TRUE, TmpServSurvObjectAddAct);
      CalcBudgetLines2(TmpServSurvObjectAddAct, IServSurvLocObjDetail, GetReferenceDate(IServSurvLocObjDetail."Survey No."),
        1, ICostObjectFilter, IRateCodeFilter, ServiceSurvey."Global Dimension 1 Code",
        OLabor, OHours, OMaterial, OSubcontracting, OPlant, OSundry, OTotalCost);
    END;

    PROCEDURE GetReferenceDate@1100528602(ISurveyNo@1100528600 : Code[20]) : Date;
    VAR
      ServiceSurvey@1100528601 : Record 11071803;
    BEGIN
      ServiceSurvey.GET(ISurveyNo);
      ServiceSurvey.TESTFIELD("Reference Date");
      EXIT(ServiceSurvey."Reference Date");
    END;

    PROCEDURE CreateContractFromObjects@1100528614(VAR IServSurvLocationObject@1100528619 : Record 11071813;IContractNo@1100528600 : Code[20];IServiceContractTemplateCode@1100409005 : Code[20];IServiceContractStatus@1100409003 : Option;IServicePackageCode@1100409004 : Code[20];IServiceContractStartingDate@1100409000 : Date);
    VAR
      ServiceSurvey@1100528602 : Record 11071803;
      ServSurvLocationObject@1100528606 : Record 11071813;
      ServiceContract@1100528601 : Record 11012812;
      ContractInstallment@1100528629 : Record 11071707;
      TryoutSuccessor@1100528616 : Record 11012761;
      ServiceLocation@1100528608 : Record 11012801;
      ServiceObject@1100528609 : Record 11071691;
      Customer@1100528603 : Record 18;
      ServiceContractTemplate@1100528604 : Record 11071754;
      ContractObject@1100528605 : Record 11071702;
      ContractObjectMaintenance@1100528611 : Record 11071692;
      ServSurvLocObjDetail@1100528610 : Record 11071807;
      ServSurvObjectAddAct@1100528612 : Record 11071814;
      MaintenanceSchemeVersion@1100528613 : Record 11071743;
      MaintSchemeVersionLine@1100528614 : Record 11071744;
      ContractAmountsbyDate@1100528615 : Record 11071708;
      PrevContractAmountsbyDate@1100528634 : Record 11071708;
      ServiceSurveySurcharge@1100528607 : Record 11071808;
      ServiceSurchargeVersion@1100528618 : Record 11071783;
      ServiceSurchargeLine@1100528621 : Record 11071784;
      ServiceSurveyStructureLine@1100528623 : Record 11071806;
      ServiceLocStructureLine@1100528624 : Record 11071720;
      ServiceSetup@1100528626 : Record 11012800;
      SurvObjAddActProperty@1100525000 : Record 11071955;
      MaintSchemeLineProperty@1100525001 : Record 11071954;
      ServiceSurveyObjectSpec@1100528625 : Record 11071972;
      DummyObjectSpecificationLine@1100528628 : Record 11071781;
      SubcontractorService@1100528631 : Record 11071789;
      PercentageShareCallsbyDate@1100528633 : Record 11071815;
      ObjectSpecificationMgt@1100528627 : Codeunit 11012848;
      MaintenanceManagement@1100528630 : Codeunit 11012829;
      NoOfObjects@1100528617 : Integer;
      ServiceLocationNo@1100528620 : Code[20];
      LineNo@1100528622 : Integer;
      PeriodToUse@1100528632 : DateFormula;
      AddActLineNo@1100527300 : Integer;
    BEGIN
      ServSurvLocationObject.COPY(IServSurvLocationObject);
      IF ServSurvLocationObject.ISEMPTY THEN
        ERROR(Text002);

      ServSurvLocationObject.SETFILTER(Quantity, '>%1', 0);
      ServSurvLocationObject.SETFILTER("Include in Contract", '%1|%2',
        ServSurvLocationObject."Include in Contract"::"With Maintenance", ServSurvLocationObject."Include in Contract"::"Without Maintenance");

      ServiceSurvey.GET(IServSurvLocationObject."Survey No.");
      ServiceSurvey.TESTFIELD("Customer No.");
      IF (IContractNo = '') AND (IServiceContractStartingDate = 0D) THEN
        ERROR(Text004);
      Customer.GET(ServiceSurvey."Customer No.");

      IF IContractNo = '' THEN BEGIN
        ServiceContract.INIT;
        IF ServiceContractTemplate.GET(IServiceContractTemplateCode) THEN
          ServiceContract.VALIDATE("Contract Template Code", ServiceContractTemplate.Code);
        ServiceContract.INSERT(TRUE);
      END ELSE
        ServiceContract.GET(IContractNo);

      IF (IContractNo = '') OR (ServiceContract.Description = '') THEN
        ServiceContract.VALIDATE(Description, ServiceSurvey.Description);
      IF (IContractNo = '') OR (ServiceContract."Description 2" = '') THEN
        ServiceContract.VALIDATE("Description 2", ServiceSurvey."Description 2");
      IF IContractNo = '' THEN
        ServiceContract.VALIDATE("Customer No.", ServiceSurvey."Customer No.");
      ServiceContract.VALIDATE("Phone No.", Customer."Phone No.");
      ServiceContract.VALIDATE("Fax No.", Customer."Fax No.");
      ServiceContract.VALIDATE("E-Mail", Customer."E-Mail");
      IF IContractNo = '' THEN BEGIN
        ServiceContract.VALIDATE("Invoice Type", ServiceSurvey."Invoice Type");
        ServiceContract.VALIDATE("Starting Date", IServiceContractStartingDate);
      END;
      IF IServicePackageCode <> '' THEN
        IF ServiceContract."Service Package" <> IServicePackageCode THEN
          ServiceContract.VALIDATE("Service Package", IServicePackageCode);
      IF IContractNo = '' THEN BEGIN
        ServiceContract.VALIDATE(Status, IServiceContractStatus);
        ServiceContract.VALIDATE("Service Type", ServiceSurvey."Service Type");
        ServiceContract.VALIDATE("Global Dimension 1 Code", ServiceSurvey."Global Dimension 1 Code");
      END;
      ServiceContract.MODIFY(TRUE);

      IF ServiceSurvey."Percentage Share Calls" <> 0 THEN BEGIN
        PercentageShareCallsbyDate.INIT;
        PercentageShareCallsbyDate."Service Contract No." := ServiceContract."No.";
        PercentageShareCallsbyDate."Index Date" := ServiceContract."Starting Date";
        PercentageShareCallsbyDate."Percentage Share" := ServiceSurvey."Percentage Share Calls";
        PercentageShareCallsbyDate.INSERT(TRUE);
      END;

      IF IContractNo = '' THEN
        TryoutSuccessor.CopyRelation(5, 3, ServiceSurvey."No.", ServiceContract."No.");

      IF ServiceSurvey."Offered Amount" <> 0 THEN BEGIN
        ContractAmountsbyDate.INIT;
        ContractAmountsbyDate.VALIDATE(Type, ContractAmountsbyDate.Type::"Service Contract");
        ContractAmountsbyDate.VALIDATE("Service Contract No.", ServiceContract."No.");
        ContractAmountsbyDate.VALIDATE("Index Date", ServiceSurvey."Reference Date");
        ContractAmountsbyDate.VALIDATE("Amount (LCY)", ServiceSurvey."Offered Amount");
        IF ContractAmountsbyDate.INSERT(TRUE) THEN;
      END;

      IF (ServiceSurvey."Invoice Type" = ServiceSurvey."Invoice Type"::Installments) AND
         (FORMAT(ServiceSurvey."Installment Invoice Interval") <> '') AND
         (IContractNo = '')
      THEN BEGIN
        ContractInstallment.INIT;
        ContractInstallment."Service Contract No." := ServiceContract."No.";
        ContractInstallment."Line No." := 10000;
        ContractInstallment."Invoice Interval" := ServiceSurvey."Installment Invoice Interval";
        ContractInstallment.Description := ServiceSurvey."Installment Description";
        ContractInstallment."Invoice From" := IServiceContractStartingDate;
        ContractInstallment.INSERT(TRUE);

        ContractAmountsbyDate.INIT;
        ContractAmountsbyDate.VALIDATE(Type, ContractAmountsbyDate.Type::Installment);
        ContractAmountsbyDate.VALIDATE("Service Contract No.", ServiceContract."No.");
        ContractAmountsbyDate."Installment Line No." := ContractInstallment."Line No.";
        ContractAmountsbyDate.VALIDATE("Index Date", ServiceContract."Starting Date");
        ContractAmountsbyDate.VALIDATE("Amount (LCY)",
          ROUND(ServiceSurvey."Offered Amount" / MaintenanceManagement.ConvPeriodToTimesPerYear(ServiceSurvey."Installment Invoice Interval")));
        ContractAmountsbyDate.INSERT(TRUE);
      END;

      //Remove the default surcharges
      ServiceSurchargeVersion.SETRANGE(Type, ServiceSurchargeVersion.Type::Contract);
      ServiceSurchargeVersion.SETRANGE(Code, ServiceContract."No.");
      ServiceSurchargeVersion.SETRANGE("Source Type", ServiceSurchargeVersion."Source Type"::Contract);
      ServiceSurchargeVersion.DELETEALL(TRUE);

      ServiceSurveySurcharge.SETRANGE("Survey No.", ServiceSurvey."No.");
      ServiceSurveySurcharge.SETRANGE("Surcharge Type", ServiceSurveySurcharge."Surcharge Type"::Cost);
      IF ServiceSurveySurcharge.FINDSET THEN BEGIN
        ServiceSurchargeVersion.INIT;
        ServiceSurchargeVersion.Type := ServiceSurchargeVersion.Type::Contract;
        ServiceSurchargeVersion.Code := ServiceContract."No.";
        ServiceSurchargeVersion."Source Type" := ServiceSurchargeVersion."Source Type"::Contract;
        ServiceSurchargeVersion."Index Date" := ServiceContract."Starting Date";
        ServiceSurchargeVersion.INSERT(TRUE);
        LineNo := 0;
        REPEAT
          ServiceSurveySurcharge.TESTFIELD("Cost Object");
          LineNo += 10000;
          ServiceSurchargeLine.Type := ServiceSurchargeVersion.Type;
          ServiceSurchargeLine.Code := ServiceSurchargeVersion.Code;
          ServiceSurchargeLine."Source Type" := ServiceSurchargeVersion."Source Type";
          ServiceSurchargeLine."Service Type" := ServiceSurchargeVersion."Service Type";
          ServiceSurchargeLine."Index Date" := ServiceSurchargeVersion."Index Date";
          ServiceSurchargeLine."Line No." := LineNo;
          ServiceSurchargeLine.VALIDATE("Cost Type Filter", ServiceSurveySurcharge."Cost Type Filter");
          ServiceSurchargeLine.VALIDATE("Cost Object Filter", ServiceSurveySurcharge."Cost Object Filter");
          ServiceSurchargeLine.VALIDATE("Cost Object", ServiceSurveySurcharge."Cost Object");
          ServiceSurchargeLine.VALIDATE(Description, ServiceSurveySurcharge.Description);
          ServiceSurchargeLine.VALIDATE("Surcharge %", ServiceSurveySurcharge."Surcharge Percentage");
          ServiceSurchargeLine.INSERT(TRUE);
        UNTIL ServiceSurveySurcharge.NEXT = 0;
      END;

      IF ServSurvLocationObject.FINDSET(TRUE) THEN BEGIN
        REPEAT
          IF (ServSurvLocationObject."Existing Service Object No." <> '') OR NOT ServSurvLocationObject."Objects Created" THEN BEGIN
            ServSurvLocationObject.CALCFIELDS("Existing Service Contract No.");
            ServiceLocationNo := GetOrCreateServiceLocation(ServSurvLocationObject);
            ServiceLocation.GET(ServiceLocationNo);

            // Create Service Object
            FOR NoOfObjects := 1 TO ServSurvLocationObject.Quantity DO BEGIN
              IF ServSurvLocationObject."Existing Service Object No." = '' THEN BEGIN
                ServiceObject.INIT;
                ServiceObject."No." := '';
                ServiceObject.INSERT(TRUE);
                IF (ServSurvLocationObject."Existing Service Contract No." <> '') AND (ServSurvLocationObject.Quantity = NoOfObjects) THEN
                  ServSurvLocationObject."Existing Service Object No." := ServiceObject."No.";
              END ELSE
                ServiceObject.GET(ServSurvLocationObject."Existing Service Object No.");

              IF ServiceObject."Standard Object No." <> ServSurvLocationObject."Standard Object No." THEN
                ServiceObject.VALIDATE("Standard Object No.", ServSurvLocationObject."Standard Object No.");
              ServiceObject.VALIDATE(Description, ServSurvLocationObject.Description);
              ServiceObject.VALIDATE("Description 2", ServSurvLocationObject."Description 2");
              IF ServiceObject."Service Location No." <> ServiceLocation."No." THEN
                ServiceObject.VALIDATE("Service Location No.", ServiceLocation."No.");
              CASE ServSurvLocationObject."Quantity to" OF
                ServSurvLocationObject."Quantity to"::"Service Object":
                  BEGIN
                    ServiceObject.VALIDATE("Quantity Based on", ServiceObject."Quantity Based on"::"Service Object");
                    ServiceObject.VALIDATE(Quantity, ServSurvLocationObject."Quantity per Object");
                  END;
                ServSurvLocationObject."Quantity to"::"Price Agreement":
                  ServiceObject.VALIDATE("Quantity Based on", ServiceObject."Quantity Based on"::"Contract Object");
              END;
              ServiceObject.VALIDATE("Object Customer", ServSurvLocationObject."Object Customer");
              ServiceObject.VALIDATE("In use since", ServSurvLocationObject."In use since");
              ServiceObject.VALIDATE("Warranty Code Customer", ServSurvLocationObject."Warranty Code");
              ServiceObject.VALIDATE("Warranty Starting Date Cust.", ServSurvLocationObject."Warranty Starting Date");
              ServiceObject.VALIDATE(Building, ServSurvLocationObject.Building);
              ServiceObject.VALIDATE(Floor, ServSurvLocationObject.Floor);
              ServiceObject.VALIDATE(Room, ServSurvLocationObject.Room);
              ServiceObject.VALIDATE("Customer Feature", ServSurvLocationObject."Customer Feature");
              ServiceObject.VALIDATE(Subcontracting, ServSurvLocationObject.Subcontracting);
              ServiceObject.VALIDATE(Latitude, ServSurvLocationObject.Latitude);
              ServiceObject.VALIDATE(Longitude, ServSurvLocationObject.Longitude);
              ServiceObject.MODIFY(TRUE);

              ServiceSurveyObjectSpec.SETRANGE("Survey No.", ServSurvLocationObject."Survey No.");
              ServiceSurveyObjectSpec.SETRANGE("Location Code", ServSurvLocationObject."Location Code");
              ServiceSurveyObjectSpec.SETRANGE("Seq. No.", ServSurvLocationObject."Seq. No.");
              ServiceSurveyObjectSpec.SETRANGE("Object Level", TRUE);
              IF ServiceSurveyObjectSpec.FINDSET THEN
                REPEAT
                  IF ServiceSurveyObjectSpec.Type = ServiceSurveyObjectSpec.Type::Group THEN
                    ObjectSpecificationMgt.FindOrCreateObjectSpecGroup(
                      ServiceObject."No.", ServiceSurveyObjectSpec."Specification Code", DummyObjectSpecificationLine)
                  ELSE
                    ObjectSpecificationMgt.SetObjectSpecValue(
                      ServiceObject."No.", ServiceSurveyObjectSpec."Specification Code", ServiceSurveyObjectSpec.Value);
                UNTIL ServiceSurveyObjectSpec.NEXT = 0;

              ServiceSetup.GET;
              IF ServSurvLocationObject."Serial No." <> '' THEN BEGIN
                ServiceSetup.TESTFIELD("Spec. Code Serial No.");
                ObjectSpecificationMgt.SetObjectSpecValue(
                  ServiceObject."No.", ServiceSetup."Spec. Code Serial No.", ServSurvLocationObject."Serial No.");
              END;
              IF ServSurvLocationObject."Year of Manufacture" <> 0 THEN BEGIN
                ServiceSetup.TESTFIELD("Spec. Code Year of Manufact.");
                ObjectSpecificationMgt.SetObjectSpecValue(
                  ServiceObject."No.", ServiceSetup."Spec. Code Year of Manufact.", FORMAT(ServSurvLocationObject."Year of Manufacture"));
              END;


              ServiceSurveyStructureLine.SETRANGE("Survey No.", ServSurvLocationObject."Survey No.");
              ServiceSurveyStructureLine.SETRANGE("Location Code", ServSurvLocationObject."Location Code");
              ServiceSurveyStructureLine.SETRANGE("Object Line", TRUE);
              ServiceSurveyStructureLine.SETRANGE("Seq. No.", ServSurvLocationObject."Seq. No.");
              IF ServiceSurveyStructureLine.FINDSET THEN
                REPEAT
                  IF NOT ServiceLocStructureLine.GET(
                    ServiceLocationNo, ServiceSurveyStructureLine."Structure No.", ServiceSurveyStructureLine.Code, ServiceObject."No.")
                  THEN BEGIN
                    ServiceLocStructureLine.INIT;
                    ServiceLocStructureLine."Service Location No." := ServiceLocationNo;
                    ServiceLocStructureLine."Structure No." := ServiceSurveyStructureLine."Structure No.";
                    ServiceLocStructureLine."No." := ServiceSurveyStructureLine.Code;
                    ServiceLocStructureLine."Service Object No." := ServiceObject."No.";
                    ServiceLocStructureLine.Description := ServiceSurveyStructureLine.Description;
                    ServiceLocStructureLine."Element Level 1" := ServiceSurveyStructureLine."Element Level 1";
                    ServiceLocStructureLine."Element Level 2" := ServiceSurveyStructureLine."Element Level 2";
                    ServiceLocStructureLine.Level := ServiceSurveyStructureLine.Level;
                    ServiceLocStructureLine."Object Line" := ServiceSurveyStructureLine."Object Line";
                    ServiceLocStructureLine.INSERT(TRUE);
                  END;
                UNTIL ServiceSurveyStructureLine.NEXT = 0;


              // Create Contract Object
              CLEAR(ContractObject);
              ContractObject.SetDoNotCreateMaintenanceLines(TRUE);
              ContractObject.SetDoNotUpdateServicePackageOnServiceContract(TRUE);
              IF NOT ContractObject.GET(ServiceContract."No.", ServiceObject."No.") THEN BEGIN
                ContractObject.VALIDATE("Service Contract No.", ServiceContract."No.");
                ContractObject.VALIDATE("Service Object No.", ServiceObject."No.");
                ContractObject.INSERT(TRUE);
                ContractObject.CALCFIELDS("Customer No.");
                ContractObject.VALIDATE("Service Package", ServSurvLocationObject."Service Package");
                ContractObject.VALIDATE("Starting Date", ServiceSurvey."Reference Date");
                ContractObject.VALIDATE("Invoice From", ServiceSurvey."Reference Date");
                ContractObject.VALIDATE("Customer Object Group", ServSurvLocationObject."Customer Object Group");
                ContractObject.VALIDATE("Ending Date", ServSurvLocationObject."End Date");
              END ELSE BEGIN
                IF ContractObject."Service Package" <> ServSurvLocationObject."Service Package" THEN
                  ContractObject.VALIDATE("Service Package", ServSurvLocationObject."Service Package");
                IF ContractObject."Ending Date" <> ServSurvLocationObject."End Date" THEN
                  ContractObject.VALIDATE("Ending Date", ServSurvLocationObject."End Date");
              END;
              ContractObject.MODIFY(TRUE);

              IF ServSurvLocationObject."Sales Price" = 0 THEN
                ServSurvLocationObject."Sales Price" := ServSurvLocationObject."Calculated Sales Price";
              IF (ServSurvLocationObject."Sales Price" <> IServSurvLocationObject."Service Amount") OR
                 (ServiceObject."Quantity Based on" = ServiceObject."Quantity Based on"::"Contract Object")
              THEN BEGIN
                IF ServiceObject."Quantity Based on" = ServiceObject."Quantity Based on"::"Contract Object" THEN BEGIN
                  PrevContractAmountsbyDate.SETRANGE(Type, PrevContractAmountsbyDate.Type::"Price Agreement");
                  PrevContractAmountsbyDate.SETRANGE("Service Contract No.", ServiceContract."No.");
                  PrevContractAmountsbyDate.SETRANGE("Service Object No.", ContractObject."Service Object No.");
                  PrevContractAmountsbyDate.SETFILTER("Index Date", '<%1', ServiceSurvey."Reference Date");
                  IF PrevContractAmountsbyDate.FINDLAST THEN
                    PeriodToUse := PrevContractAmountsbyDate.Period;
                  IF FORMAT(PeriodToUse) = '' THEN
                    EVALUATE(PeriodToUse, '<1Y>');
                END;
                ContractAmountsbyDate.INIT;
                ContractAmountsbyDate.VALIDATE(Type, ContractAmountsbyDate.Type::"Price Agreement");
                ContractAmountsbyDate.VALIDATE("Service Contract No.", ServiceContract."No.");
                ContractAmountsbyDate.VALIDATE("Service Object No.", ContractObject."Service Object No.");
                ContractAmountsbyDate.VALIDATE("Index Date", ServiceSurvey."Reference Date");
                CASE ServiceObject."Quantity Based on" OF
                  ServiceObject."Quantity Based on"::"Service Object":
                    ContractAmountsbyDate.VALIDATE("Amount (LCY)", ServSurvLocationObject."Sales Price");
                  ServiceObject."Quantity Based on"::"Contract Object":
                    BEGIN
                      ContractAmountsbyDate.VALIDATE(Period, PeriodToUse);
                      ContractAmountsbyDate.VALIDATE(Quantity, ServSurvLocationObject."Quantity per Object");
                      ContractAmountsbyDate.VALIDATE("Amount (LCY)", ServSurvLocationObject."Sales Price");
                      ContractAmountsbyDate.UpdatePrice;
                    END;
                END;
                IF ContractAmountsbyDate.INSERT(TRUE) THEN;
              END;

              IF ServSurvLocationObject."Include in Contract" = ServSurvLocationObject."Include in Contract"::"Without Maintenance" THEN BEGIN
                 ContractObjectMaintenance.SETRANGE("Service Contract No.", ContractObject."Service Contract No.");
                 ContractObjectMaintenance.SETRANGE("Object No.", ContractObject."Service Object No.");
                 ContractObjectMaintenance.SetSuppressMsgNonDeletedSCArr(TRUE);
                 IF ContractObjectMaintenance.FINDSET THEN
                   ContractObjectMaintenance.DELETEALL;
              END;

              ContractObjectMaintenance.RESET;
              ServSurvLocObjDetail.SETRANGE("Survey No.", ServSurvLocationObject."Survey No.");
              ServSurvLocObjDetail.SETRANGE("Location Code", ServSurvLocationObject."Location Code");
              ServSurvLocObjDetail.SETRANGE("Seq. No.", ServSurvLocationObject."Seq. No.");
              // Delete Old Contract Object Maintenance
              IF (ServSurvLocationObject."Existing Service Contract No." <> '') AND
                  (ServSurvLocationObject."Existing Service Object No." <> '')
              THEN BEGIN
                IF ServSurvLocObjDetail.FINDSET THEN
                  REPEAT
                    ContractObjectMaintenance.SETRANGE("Service Contract No.", ContractObject."Service Contract No.");
                    ContractObjectMaintenance.SETRANGE("Object No.", ContractObject."Service Object No.");
                    ContractObjectMaintenance.SetSuppressMsgNonDeletedSCArr(TRUE);
                    IF ContractObjectMaintenance.FINDSET THEN
                      REPEAT
                        IF ServSurvLocObjDetail."Include in Contract" THEN BEGIN
                          ServSurvLocObjDetail.SETRANGE("Maintenance Scheme Code", ContractObjectMaintenance."Maintenance Scheme");
                          IF ServSurvLocObjDetail.ISEMPTY THEN
                            ContractObjectMaintenance.DELETE(TRUE);
                        END ELSE BEGIN
                          ServSurvLocObjDetail.SETRANGE("Maintenance Scheme Code", ContractObjectMaintenance."Maintenance Scheme");
                          IF NOT ServSurvLocObjDetail.ISEMPTY THEN
                            ContractObjectMaintenance.DELETE(TRUE);
                        END;
                      UNTIL ContractObjectMaintenance.NEXT = 0;
                    ServSurvLocObjDetail.SETRANGE("Maintenance Scheme Code");
                  UNTIL ServSurvLocObjDetail.NEXT = 0;
              END;

              IF ServSurvLocationObject."Include in Contract" = ServSurvLocationObject."Include in Contract"::"With Maintenance" THEN BEGIN
                // Create Contract Object Maintenance
                LineNo := 0;
                ServSurvLocObjDetail.SETRANGE("Include in Contract", TRUE);
                IF ServSurvLocObjDetail.FINDSET THEN
                  REPEAT
                    ContractObject.InsertContractObjectsMaintRec(
                      ServSurvLocObjDetail."Maintenance Scheme Code", ServSurvLocObjDetail."Service Package", LineNo);

                    IF MaintenanceSchemeVersion.GET(MaintenanceSchemeVersion."Line Type"::Object,
                      ContractObject."Service Object No.", ServSurvLocObjDetail."Maintenance Scheme Code", ServiceSurvey."Reference Date")
                    THEN
                      MaintenanceSchemeVersion.DELETE(TRUE);

                    SurvObjAddActProperty.SETRANGE("Survey No.", ServSurvLocObjDetail."Survey No.");
                    SurvObjAddActProperty.SETRANGE("Location Code", ServSurvLocObjDetail."Location Code");
                    SurvObjAddActProperty.SETRANGE("Seq. No.", ServSurvLocObjDetail."Seq. No.");
                    SurvObjAddActProperty.SETRANGE("Maintenance Scheme Code", ServSurvLocObjDetail."Maintenance Scheme Code");
                    SurvObjAddActProperty.SETFILTER("Line Type (Base)", '<%1', SurvObjAddActProperty."Line Type (Base)"::"Survey Object");
                    IF SurvObjAddActProperty.FINDSET THEN BEGIN
                      MaintenanceSchemeVersion.INIT;
                      MaintenanceSchemeVersion.VALIDATE("Line Type", MaintenanceSchemeVersion."Line Type"::Object);
                      MaintenanceSchemeVersion.VALIDATE(Code, ContractObject."Service Object No.");
                      MaintenanceSchemeVersion.VALIDATE("Belongs to Scheme", ServSurvLocObjDetail."Maintenance Scheme Code");
                      MaintenanceSchemeVersion.VALIDATE("Index Date", ServiceSurvey."Reference Date");
                      MaintenanceSchemeVersion.INSERT(TRUE);
                      REPEAT
                        MaintSchemeLineProperty."Line Type" := MaintSchemeLineProperty."Line Type"::Object;
                        MaintSchemeLineProperty."Type Code" := ContractObject."Service Object No.";
                        MaintSchemeLineProperty."Belongs to Scheme" := ServSurvLocObjDetail."Maintenance Scheme Code";
                        MaintSchemeLineProperty."Index Date" := MaintenanceSchemeVersion."Index Date";
                        MaintSchemeLineProperty."Line Type (Base)" := SurvObjAddActProperty."Line Type (Base)";
                        MaintSchemeLineProperty."Type Code (Base)" := SurvObjAddActProperty."Type Code (Base)";
                        MaintSchemeLineProperty."Line No. (Base)" := SurvObjAddActProperty."Line No. (Base)";
                        MaintSchemeLineProperty."Belongs to Scheme (Base)" := SurvObjAddActProperty."Belongs to Scheme (Base)";
                        MaintSchemeLineProperty.Cancelled := SurvObjAddActProperty.Cancelled;
                        MaintSchemeLineProperty."Adjustment Factor Norm" := SurvObjAddActProperty."Adjustment Factor Norm";
                        MaintSchemeLineProperty.INSERT(TRUE);
                      UNTIL SurvObjAddActProperty.NEXT = 0;
                    END;

                    IF ContractObjectMaintenance.GET(
                         ContractObject."Service Contract No.", ContractObject."Service Object No.", ServSurvLocObjDetail."Maintenance Scheme Code")
                    THEN BEGIN
                      IF ContractObjectMaintenance."Maintenance Interval" <> ServSurvLocObjDetail."Maintenance Interval" THEN
                        ContractObjectMaintenance.VALIDATE("Maintenance Interval", ServSurvLocObjDetail."Maintenance Interval");
                      IF ContractObjectMaintenance.Subcontracting <> ServSurvLocObjDetail.Subcontracting THEN
                        ContractObjectMaintenance.VALIDATE(Subcontracting, ServSurvLocObjDetail.Subcontracting);
                      ContractObjectMaintenance.MODIFY(TRUE);
                    END;

                    // Create Additional Activities
                    ServSurvObjectAddAct.SETRANGE("Survey No.", ServSurvLocObjDetail."Survey No.");
                    ServSurvObjectAddAct.SETRANGE("Location Code", ServSurvLocObjDetail."Location Code");
                    ServSurvObjectAddAct.SETRANGE("Seq. No.", ServSurvLocObjDetail."Seq. No.");
                    ServSurvObjectAddAct.SETRANGE("Maintenance Scheme Code", ServSurvLocObjDetail."Maintenance Scheme Code");
                    IF ServSurvObjectAddAct.FINDSET THEN BEGIN
                      IF NOT MaintenanceSchemeVersion.GET(
                        MaintenanceSchemeVersion."Line Type"::Object, ContractObject."Service Object No.",
                        ServSurvLocObjDetail."Maintenance Scheme Code", ServiceSurvey."Reference Date")
                      THEN BEGIN
                        MaintenanceSchemeVersion.INIT;
                        MaintenanceSchemeVersion.VALIDATE("Line Type", MaintenanceSchemeVersion."Line Type"::Object);
                        MaintenanceSchemeVersion.VALIDATE(Code, ContractObject."Service Object No.");
                        MaintenanceSchemeVersion.VALIDATE("Belongs to Scheme", ServSurvLocObjDetail."Maintenance Scheme Code");
                        MaintenanceSchemeVersion.VALIDATE("Index Date", ServiceSurvey."Reference Date");
                        MaintenanceSchemeVersion.INSERT(TRUE);
                      END;
                      REPEAT
                        MaintSchemeVersionLine.INIT;
                        MaintSchemeVersionLine.VALIDATE("Line Type", MaintSchemeVersionLine."Line Type"::Object);
                        MaintSchemeVersionLine.VALIDATE("Type Code", MaintenanceSchemeVersion.Code);
                        MaintSchemeVersionLine.VALIDATE("Belongs to Scheme", MaintenanceSchemeVersion."Belongs to Scheme");
                        MaintSchemeVersionLine.VALIDATE("Index Date", MaintenanceSchemeVersion."Index Date");
                        MaintSchemeVersionLine."Line No." := ServSurvObjectAddAct."Line No.";
                        MaintSchemeVersionLine.VALIDATE("Cost Type", ServSurvObjectAddAct."Cost Type");
                        MaintSchemeVersionLine.VALIDATE("Cost Object", ServSurvObjectAddAct."Cost Object");
                        MaintSchemeVersionLine.VALIDATE("Cost Component", ServSurvObjectAddAct."Cost Component");
                        MaintSchemeVersionLine.VALIDATE(Description, ServSurvObjectAddAct.Description);
                        MaintSchemeVersionLine.VALIDATE(Quantity, ServSurvObjectAddAct.Quantity);
                        MaintSchemeVersionLine.VALIDATE("Unit of Measure", ServSurvObjectAddAct."Unit of Measure");
                        MaintSchemeVersionLine.VALIDATE("Frequency per Year", ServSurvObjectAddAct."Frequency per Year");
                        IF ServSurvObjectAddAct."Cost Type" = ServSurvObjectAddAct."Cost Type"::Labor THEN BEGIN
                          MaintSchemeVersionLine.VALIDATE(Norm, ServSurvObjectAddAct.Norm);
                          MaintSchemeVersionLine.VALIDATE("Rate Code", ServSurvObjectAddAct."Rate Code");
                          MaintSchemeVersionLine.VALIDATE(Rate, ServSurvObjectAddAct.Rate);
                        END ELSE BEGIN
                          MaintSchemeVersionLine.VALIDATE("Item No.", ServSurvObjectAddAct."Item No.");
                          MaintSchemeVersionLine.VALIDATE(Manufacturer, ServSurvObjectAddAct.Manufacturer);
                          MaintSchemeVersionLine.VALIDATE("Basic Item", ServSurvObjectAddAct."Basic Item");
                          MaintSchemeVersionLine.VALIDATE("Vendor (Trade Item)", ServSurvObjectAddAct."Vendor (Trade Item)");
                          MaintSchemeVersionLine.VALIDATE("Trade Item", ServSurvObjectAddAct."Trade Item");
                          MaintSchemeVersionLine.VALIDATE("Cost Price", ServSurvObjectAddAct."Cost Price");
                          MaintSchemeVersionLine.VALIDATE("Gross Price", ServSurvObjectAddAct."Gross Price");
                          MaintSchemeVersionLine.VALIDATE("Purchase Discount %", ServSurvObjectAddAct."Purchase Discount %");
                        END;
                        MaintSchemeVersionLine.VALIDATE("Maintenance Interval", ServSurvObjectAddAct."Maintenance Interval");
                        MaintSchemeVersionLine.VALIDATE(Vendor, ServSurvObjectAddAct.Vendor);
                        MaintSchemeVersionLine.VALIDATE("Line Status", ServSurvObjectAddAct."Line Status");
                        MaintSchemeVersionLine.VALIDATE("Text Block", ServSurvObjectAddAct."Text Block");
                        MaintSchemeVersionLine.INSERT(TRUE);

                        IF ServSurvObjectAddAct."Original Line No." <> 0 THEN
                            AddActLineNo := ServSurvObjectAddAct."Original Line No."
                        ELSE
                            AddActLineNo := ServSurvObjectAddAct."Line No.";

                        IF SurvObjAddActProperty.GET(
                          ServSurvObjectAddAct."Survey No.",
                          ServSurvObjectAddAct."Location Code",
                          ServSurvObjectAddAct."Seq. No.",
                          ServSurvObjectAddAct."Maintenance Scheme Code",
                          ServSurvObjectAddAct."Line Type"::"Survey Object",
                          '',
                          AddActLineNo,
                          '')
                        THEN BEGIN
                          MaintSchemeLineProperty."Line Type" := MaintSchemeLineProperty."Line Type"::Object;
                          MaintSchemeLineProperty."Type Code" := ContractObject."Service Object No.";
                          MaintSchemeLineProperty."Belongs to Scheme" := ServSurvLocObjDetail."Maintenance Scheme Code";
                          MaintSchemeLineProperty."Index Date" := MaintenanceSchemeVersion."Index Date";
                          MaintSchemeLineProperty."Line Type (Base)" := MaintSchemeLineProperty."Line Type (Base)"::Object;
                          MaintSchemeLineProperty."Type Code (Base)" := ContractObject."Service Object No.";
                          MaintSchemeLineProperty."Line No. (Base)" := MaintSchemeVersionLine."Line No.";
                          MaintSchemeLineProperty."Belongs to Scheme (Base)" := ContractObjectMaintenance."Maintenance Scheme";
                          MaintSchemeLineProperty.Cancelled := SurvObjAddActProperty.Cancelled;
                          MaintSchemeLineProperty."Adjustment Factor Norm" := SurvObjAddActProperty."Adjustment Factor Norm";
                          MaintSchemeLineProperty.INSERT(TRUE);
                        END;
                      UNTIL ServSurvObjectAddAct.NEXT = 0;
                    END;

                    IF NOT SubcontractorService.GET(
                      ServiceContract."No.", '', '', ServiceObject."No.", ContractObjectMaintenance."Maintenance Scheme", '', '',
                      SubcontractorService."Apply To"::Maintenance, 0)
                    THEN BEGIN
                      SubcontractorService."Service Contract No." := ServiceContract."No.";
                      SubcontractorService."Object No." := ServiceObject."No.";
                      SubcontractorService."Maintenance Scheme Code" := ContractObjectMaintenance."Maintenance Scheme";
                      SubcontractorService.Subcontractor := ServSurvLocObjDetail."Subcontractor No.";
                      SubcontractorService."Apply To" := SubcontractorService."Apply To"::Maintenance;
                      IF SubcontractorService.INSERT(TRUE) THEN;
                    END;
                  UNTIL ServSurvLocObjDetail.NEXT = 0;
              END;
            END;
            ServSurvLocationObject."Service Contract No." := ServiceContract."No.";
            ServSurvLocationObject."Objects Created" := TRUE;
            ServSurvLocationObject.MODIFY;
          END;
        UNTIL ServSurvLocationObject.NEXT = 0;
      END;

      IF GUIALLOWED THEN
        IF IContractNo = '' THEN
          MESSAGE(Text006, Text007, ServiceContract."No.")
        ELSE
          MESSAGE(Text006, Text008, ServiceContract."No.");
    END;

    PROCEDURE GetOrCreateServiceLocation@1100528615(IServSurvLocationObject@1100528600 : Record 11071813) : Code[20];
    VAR
      ServiceSurvey@1100528608 : Record 11071803;
      ServiceSurveyLocation@1100528601 : Record 11071804;
      ServiceLocation@1100528602 : Record 11012801;
      TryoutSuccessor@1100528603 : Record 11012761;
      ServSurveyLocStructure@1100528604 : Record 11071805;
      ServiceSurveyStructureLine@1100528605 : Record 11071806;
      ServiceLocationStructure@1100528606 : Record 11071719;
      ServiceLocStructureLine@1100528607 : Record 11071720;
      ServSurvLocationObject@1100527300 : Record 11071813;
    BEGIN
      ServiceSurvey.GET(IServSurvLocationObject."Survey No.");
      ServiceSurveyLocation.GET(IServSurvLocationObject."Survey No.", IServSurvLocationObject."Location Code");
      IF ServiceSurveyLocation."Service Location No." = '' THEN BEGIN
        ServiceLocation.INIT;
        ServiceLocation."No." := '';
        ServiceLocation.INSERT(TRUE);
        ServiceLocation.VALIDATE("Customer No.", ServiceSurvey."Customer No.");
        ServiceLocation.VALIDATE(Description, ServiceSurveyLocation.Description);
        ServiceLocation.VALIDATE("Description 2", ServiceSurveyLocation."Description 2");
        ServiceLocation.VALIDATE(Address, ServiceSurveyLocation.Address);
        ServiceLocation.VALIDATE("Address 2", ServiceSurveyLocation."Address 2");
        ServiceLocation."Post Code" := ServiceSurveyLocation."Post Code";
        ServiceLocation.VALIDATE("Country/Region Code", ServiceSurveyLocation."Country/Region Code");
        ServiceLocation.City := ServiceSurveyLocation.City;
        ServiceLocation.EvaluatePostCodeGroup;
        ServiceLocation.VALIDATE("Phone No.", ServiceSurveyLocation."Phone No.");
        ServiceLocation.VALIDATE("Fax No.", ServiceSurveyLocation."Fax No.");
        ServiceLocation.VALIDATE("E-Mail", ServiceSurveyLocation."E-Mail");
        ServiceLocation.VALIDATE("Mobile Phone No.", ServiceSurveyLocation."Mobile Phone No.");
        ServiceLocation.VALIDATE("Customer Feature", ServiceSurveyLocation."Customer Feature");
        ServiceLocation.VALIDATE("Complex Code", ServiceSurveyLocation."Complex Code");
        ServiceLocation.VALIDATE("Global Dimension 1 Code", ServiceSurvey."Global Dimension 1 Code");
        ServiceLocation."Location Structure Format" := ServiceSurveyLocation."Location Structure Format";
        ServiceLocation.VALIDATE(Latitude, ServiceSurveyLocation.Latitude);
        ServiceLocation.VALIDATE(Longitude, ServiceSurveyLocation.Longitude);
        ServiceLocation.MODIFY(TRUE);

        ServiceSurveyLocation."Service Location No." := ServiceLocation."No.";
        ServiceSurveyLocation."Service Location Created" := TRUE;
        ServiceSurveyLocation.MODIFY(TRUE);
      END ELSE
        ServiceLocation.GET(ServiceSurveyLocation."Service Location No.");

      ServSurveyLocStructure.SETRANGE("Survey No.", ServiceSurveyLocation."Survey No.");
      ServSurveyLocStructure.SETRANGE("Location Code", ServiceSurveyLocation."Location Code");
      IF ServSurveyLocStructure.FINDSET THEN
        REPEAT
          IF NOT ServiceLocationStructure.GET(ServiceLocation."No.", ServSurveyLocStructure."Structure No.") THEN BEGIN
            ServiceLocationStructure.INIT;
            ServiceLocationStructure."Service Location No." := ServiceLocation."No.";
            ServiceLocationStructure."No." := ServSurveyLocStructure."Structure No.";
            ServiceLocationStructure.Description := ServSurveyLocStructure.Description;
            ServiceLocationStructure."Available for Field Service" := ServSurveyLocStructure."Available for 4PS Mobile";
            ServiceLocationStructure.INSERT(TRUE);
          END;

          ServiceSurveyStructureLine.SETRANGE("Survey No.", ServSurveyLocStructure."Survey No.");
          ServiceSurveyStructureLine.SETRANGE("Location Code", ServSurveyLocStructure."Location Code");
          ServiceSurveyStructureLine.SETRANGE("Structure No.", ServSurveyLocStructure."Structure No.");
          ServiceSurveyStructureLine.SETRANGE("Object Line", FALSE);
          IF ServiceSurveyStructureLine.FINDSET THEN BEGIN
            REPEAT
              IF NOT ServiceLocStructureLine.GET(
                ServiceLocationStructure."Service Location No.", ServiceLocationStructure."No.", ServiceSurveyStructureLine.Code, '')
              THEN BEGIN
                ServiceLocStructureLine.INIT;
                ServiceLocStructureLine."Service Location No." := ServiceLocation."No.";
                ServiceLocStructureLine."Structure No." := ServiceSurveyStructureLine."Structure No.";
                ServiceLocStructureLine."No." := ServiceSurveyStructureLine.Code;
                ServiceLocStructureLine.Description := ServiceSurveyStructureLine."Code Description";
                ServiceLocStructureLine."Element Level 1" := ServiceSurveyStructureLine."Element Level 1";
                ServiceLocStructureLine."Element Level 2" := ServiceSurveyStructureLine."Element Level 2";
                ServiceLocStructureLine.Level := ServiceSurveyStructureLine.Level;
                ServiceLocStructureLine."Object Line" := ServiceSurveyStructureLine."Object Line";
                ServiceLocStructureLine.INSERT(TRUE);
              END;
            UNTIL ServiceSurveyStructureLine.NEXT = 0;
          END;
        UNTIL ServSurveyLocStructure.NEXT = 0;

      ServSurvLocationObject.SETRANGE("Survey No.", IServSurvLocationObject."Survey No.");
      ServSurvLocationObject.SETFILTER("Location Code", '<> %1', IServSurvLocationObject."Location Code");
      IF ServSurvLocationObject.ISEMPTY THEN
        TryoutSuccessor.CopyRelation(5, 2, IServSurvLocationObject."Survey No.", ServiceLocation."No.");

      EXIT(ServiceSurveyLocation."Service Location No.");
    END;

    PROCEDURE CalcBudgetLines@1100528605(IServSurvLocObjDetail@1100528600 : Record 11071807;IIndexDate@1100525002 : Date;IQuantity@1100528601 : Decimal;ICostObject@1100528610 : Code[20];IDepartmentCode@1100525001 : Code[20];VAR OLabor@1100528602 : Decimal;VAR OHours@1100528603 : Decimal;VAR OMaterial@1100528604 : Decimal;VAR OSubcontracting@1100528605 : Decimal;VAR OPlant@1100528606 : Decimal;VAR OSundry@1100528607 : Decimal;VAR OTotalCost@1100528608 : Decimal);
    VAR
      ServSurvObjectAddAct@1100528609 : Record 11071814;
      ServiceSurvey@1100525004 : Record 11071803;
      BudgetHourRateManagement@1100528612 : Codeunit 11012358;
      BudgetRateFoundAt@1100528614 : Text[250];
      LaborAmount@1100525000 : Decimal;
      CancellationLevel@1100525003 : Option;
    BEGIN
      ServiceSurvey.GET(IServSurvLocObjDetail."Survey No.");
      ServSurvObjectAddAct.SETRANGE("Survey No.", IServSurvLocObjDetail."Survey No.");
      ServSurvObjectAddAct.SETRANGE("Location Code", IServSurvLocObjDetail."Location Code");
      ServSurvObjectAddAct.SETRANGE("Seq. No.", IServSurvLocObjDetail."Seq. No.");
      ServSurvObjectAddAct.SETRANGE("Maintenance Scheme Code", IServSurvLocObjDetail."Maintenance Scheme Code");
      IF ICostObject <> '' THEN
        ServSurvObjectAddAct.SETRANGE("Cost Object", ICostObject);
      IF ServSurvObjectAddAct.FINDSET THEN
        REPEAT
          IF NOT ServSurvObjectAddAct.IsCancelled(
            IServSurvLocObjDetail."Survey No.", IServSurvLocObjDetail."Location Code",
            IServSurvLocObjDetail."Seq. No.", IServSurvLocObjDetail."Maintenance Scheme Code",
            ServiceSurvey."Reference Date", CancellationLevel)
          THEN BEGIN
            LaborAmount := 0;
            CASE ServSurvObjectAddAct."Cost Type" OF
              ServSurvObjectAddAct."Cost Type"::Labor:
                BEGIN
                  OHours += ServSurvObjectAddAct."Hours per Service" * IQuantity;
                  LaborAmount += ServSurvObjectAddAct."Hours per Service" * IQuantity *
                    BudgetHourRateManagement.GetBudgetRate(1, '', '', '', IDepartmentCode,
                      ServSurvObjectAddAct."Rate Code", IIndexDate, BudgetRateFoundAt);
                  OLabor += LaborAmount;
                  OTotalCost += LaborAmount;
                END;
              ServSurvObjectAddAct."Cost Type"::Material:
                BEGIN
                  OMaterial += ServSurvObjectAddAct."Cost per Service" * IQuantity;
                  OTotalCost += ServSurvObjectAddAct."Cost per Service" * IQuantity;
                END;
              ServSurvObjectAddAct."Cost Type"::Subcontracting:
                BEGIN
                  OSubcontracting += ServSurvObjectAddAct."Cost per Service" * IQuantity;
                  OTotalCost += ServSurvObjectAddAct."Cost per Service" * IQuantity;
                END;
              ServSurvObjectAddAct."Cost Type"::Plant:
                BEGIN
                  OPlant += ServSurvObjectAddAct."Cost per Service" * IQuantity;
                  OTotalCost += ServSurvObjectAddAct."Cost per Service" * IQuantity;
                END;
              ServSurvObjectAddAct."Cost Type"::Sundry:
                BEGIN
                  OSundry += ServSurvObjectAddAct."Cost per Service" * IQuantity;
                  OTotalCost += ServSurvObjectAddAct."Cost per Service" * IQuantity;
                END;
            END;
          END;
        UNTIL ServSurvObjectAddAct.NEXT = 0;
    END;

    PROCEDURE CalcBudgetLines2@1100525003(VAR IServSurvObjectAddAct@1100525005 : TEMPORARY Record 11071814;IServSurvLocObjDetail@1100528600 : Record 11071807;IIndexDate@1100525002 : Date;IQuantity@1100528601 : Decimal;ICostObjectFilter@1100525004 : Code[250];IRateCodeFilter@1100528609 : Code[250];IDepartmentCode@1100525001 : Code[20];VAR OLabor@1100528602 : Decimal;VAR OHours@1100528603 : Decimal;VAR OMaterial@1100528604 : Decimal;VAR OSubcontracting@1100528605 : Decimal;VAR OPlant@1100528606 : Decimal;VAR OSundry@1100528607 : Decimal;VAR OTotalCost@1100528608 : Decimal);
    VAR
      ServiceSurvey@1100528613 : Record 11071803;
      BudgetHourRateManagement@1100528612 : Codeunit 11012358;
      BudgetRateFoundAt@1100528614 : Text[250];
      LaborAmount@1100525000 : Decimal;
      CancellationLevel@1100525003 : Option;
      Rate@1100528610 : Decimal;
    BEGIN
      ServiceSurvey.GET(IServSurvLocObjDetail."Survey No.");
      IF ICostObjectFilter <> '' THEN
        IServSurvObjectAddAct.SETFILTER("Cost Object", ICostObjectFilter);
      IF IRateCodeFilter <> '' THEN
        IServSurvObjectAddAct.SETFILTER(IServSurvObjectAddAct."Rate Code", IRateCodeFilter);
      IF IServSurvObjectAddAct.FINDSET THEN
        REPEAT
          IF NOT IServSurvObjectAddAct.IsCancelled(
            IServSurvLocObjDetail."Survey No.", IServSurvLocObjDetail."Location Code",
            IServSurvLocObjDetail."Seq. No.", IServSurvLocObjDetail."Maintenance Scheme Code",
            ServiceSurvey."Reference Date", CancellationLevel)
          THEN BEGIN
            LaborAmount := 0;
            CASE IServSurvObjectAddAct."Cost Type" OF
              IServSurvObjectAddAct."Cost Type"::Labor:
                BEGIN
                  OHours += IServSurvObjectAddAct."Hours per Service" * IQuantity;
                  IF IServSurvObjectAddAct."Rate Code" <> '' THEN
                    LaborAmount += IServSurvObjectAddAct."Hours per Service" * IQuantity *
                      BudgetHourRateManagement.GetBudgetRate(1, '', '', '', IDepartmentCode,
                        IServSurvObjectAddAct."Rate Code", IIndexDate, BudgetRateFoundAt)
                  ELSE
                    LaborAmount += IServSurvObjectAddAct."Hours per Service" * IQuantity * IServSurvObjectAddAct.Rate;
                  OLabor += LaborAmount;
                  OTotalCost += LaborAmount;
                END;
              IServSurvObjectAddAct."Cost Type"::Material:
                BEGIN
                  OMaterial += IServSurvObjectAddAct."Cost per Service" * IQuantity;
                  OTotalCost += IServSurvObjectAddAct."Cost per Service" * IQuantity;
                END;
              IServSurvObjectAddAct."Cost Type"::Subcontracting:
                BEGIN
                  OSubcontracting += IServSurvObjectAddAct."Cost per Service" * IQuantity;
                  OTotalCost += IServSurvObjectAddAct."Cost per Service" * IQuantity;
                END;
              IServSurvObjectAddAct."Cost Type"::Plant:
                BEGIN
                  OPlant += IServSurvObjectAddAct."Cost per Service" * IQuantity;
                  OTotalCost += IServSurvObjectAddAct."Cost per Service" * IQuantity;
                END;
              IServSurvObjectAddAct."Cost Type"::Sundry:
                BEGIN
                  OSundry += IServSurvObjectAddAct."Cost per Service" * IQuantity;
                  OTotalCost += IServSurvObjectAddAct."Cost per Service" * IQuantity;
                END;
            END;
          END;
        UNTIL IServSurvObjectAddAct.NEXT = 0;
    END;

    PROCEDURE CopySurvey@1100528604(ISurvey@1100528600 : Record 11071803;IToSurveyNo@1100528601 : Code[20];IToSurveyDescription@1100528606 : Text[50]);
    VAR
      ServiceSurvey@1100528603 : Record 11071803;
      ServiceSurveyLocation@1100528602 : Record 11071804;
      FromServiceSurveySurcharge@1100528604 : Record 11071808;
      ToServiceSurveySurcharge@1100528605 : Record 11071808;
      FromCommentLine@1100528607 : Record 97;
      ToCommentLine@1100528608 : Record 97;
    BEGIN
      ServiceSurvey := ISurvey;
      ServiceSurvey."No." := IToSurveyNo;
      ServiceSurvey.Description := IToSurveyDescription;
      ServiceSurvey.INSERT;

      ServiceSurveyLocation.SETRANGE("Survey No.", ISurvey."No.");
      IF ServiceSurveyLocation.FINDSET THEN
        REPEAT
          CopySurveyLocation(ServiceSurveyLocation, IToSurveyNo, ServiceSurveyLocation."Location Code");
        UNTIL ServiceSurveyLocation.NEXT = 0;

      FromServiceSurveySurcharge.SETRANGE("Survey No.", ISurvey."No.");
      IF FromServiceSurveySurcharge.FINDSET THEN
        REPEAT
          ToServiceSurveySurcharge := FromServiceSurveySurcharge;
          ToServiceSurveySurcharge."Survey No." := IToSurveyNo;
          ToServiceSurveySurcharge.INSERT;
        UNTIL FromServiceSurveySurcharge.NEXT = 0;

      FromCommentLine.SETRANGE("Table Name", FromCommentLine."Table Name"::"Service Survey");
      FromCommentLine.SETRANGE("No.", ISurvey."No.");
      IF FromCommentLine.FINDSET THEN
        REPEAT
          ToCommentLine := FromCommentLine;
          ToCommentLine."No." := IToSurveyNo;
          ToCommentLine.INSERT;
        UNTIL FromCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CopySurveyLocation@1100528606(ISurveyLocation@1100528600 : Record 11071804;IToSurveyNo@1100528601 : Code[20];IToSurveyLocationCode@1100528602 : Code[10]);
    VAR
      ServiceSurveyLocation@1100528603 : Record 11071804;
      ServSurvLocationObject@1100528604 : Record 11071813;
      ServSurveyLocStructure@1100528605 : Record 11071805;
    BEGIN
      ServiceSurveyLocation := ISurveyLocation;
      ServiceSurveyLocation."Survey No." := IToSurveyNo;
      ServiceSurveyLocation."Location Code" := IToSurveyLocationCode;
      ServiceSurveyLocation."Service Location Created" := FALSE;
      ServiceSurveyLocation.INSERT;

      ServSurvLocationObject.SETRANGE("Survey No.", ISurveyLocation."Survey No.");
      ServSurvLocationObject.SETRANGE("Location Code", ISurveyLocation."Location Code");
      IF ServSurvLocationObject.FINDSET THEN
        REPEAT
          CopySurveyObject(ServSurvLocationObject, IToSurveyNo, IToSurveyLocationCode, ServSurvLocationObject."Seq. No.");
        UNTIL ServSurvLocationObject.NEXT = 0;

      ServSurveyLocStructure.SETRANGE("Survey No.", IToSurveyNo);
      ServSurveyLocStructure.SETRANGE("Location Code", IToSurveyLocationCode);
      IF ServSurveyLocStructure.FINDSET THEN
        REPEAT
          CopySurveyLocStructure(ServSurveyLocStructure, IToSurveyNo, IToSurveyLocationCode);
        UNTIL ServSurveyLocStructure.NEXT = 0;
    END;

    LOCAL PROCEDURE CopySurveyObject@1100528607(IServSurvLocationObject@1100528600 : Record 11071813;IToSurveyNo@1100528602 : Code[20];IToSurveyLocationCode@1100528601 : Code[10];IToSurveyObjectSeqNo@1100528603 : Integer);
    VAR
      ServSurvLocationObject@1100528604 : Record 11071813;
      ServSurvLocObjDetail@1100528605 : Record 11071807;
      ServiceSurveyObjectSpec@1100529600 : Record 11071972;
      NewServiceSurveyObjectSpec@1100529601 : Record 11071972;
    BEGIN
      ServSurvLocationObject := IServSurvLocationObject;
      ServSurvLocationObject."Survey No." := IToSurveyNo;
      ServSurvLocationObject."Location Code" := IToSurveyLocationCode;
      ServSurvLocationObject."Seq. No." := IToSurveyObjectSeqNo;
      ServSurvLocationObject."Objects Created" := FALSE;
      ServSurvLocationObject."Service Contract No." := '';
      ServSurvLocationObject."Service Order No." := '';
      ServSurvLocationObject.INSERT;

      ServSurvLocObjDetail.SETRANGE("Survey No.", IServSurvLocationObject."Survey No.");
      ServSurvLocObjDetail.SETRANGE("Location Code", IServSurvLocationObject."Location Code");
      ServSurvLocObjDetail.SETRANGE("Seq. No.", IServSurvLocationObject."Seq. No.");
      IF ServSurvLocObjDetail.FINDSET THEN
        REPEAT
          CopySurveyObjectDetail(ServSurvLocObjDetail, IToSurveyNo, IToSurveyLocationCode, IToSurveyObjectSeqNo)
        UNTIL ServSurvLocObjDetail.NEXT = 0;

      ServiceSurveyObjectSpec.SETRANGE("Survey No.", IServSurvLocationObject."Survey No.");
      ServiceSurveyObjectSpec.SETRANGE("Location Code", IServSurvLocationObject."Location Code");
      ServiceSurveyObjectSpec.SETRANGE("Seq. No.", IServSurvLocationObject."Seq. No.");
      IF ServiceSurveyObjectSpec.FINDSET THEN
        REPEAT
          NewServiceSurveyObjectSpec := ServiceSurveyObjectSpec;
          NewServiceSurveyObjectSpec."Survey No." := IToSurveyNo;
          NewServiceSurveyObjectSpec."Location Code" := IToSurveyLocationCode;
          NewServiceSurveyObjectSpec."Seq. No." := IToSurveyObjectSeqNo;
          NewServiceSurveyObjectSpec.INSERT;
        UNTIL ServiceSurveyObjectSpec.NEXT = 0;
    END;

    LOCAL PROCEDURE CopySurveyObjectDetail@1100528608(IServSurvLocObjDetail@1100528600 : Record 11071807;IToSurveyNo@1100528604 : Code[20];IToSurveyLocationCode@1100528603 : Code[10];IToSurveyObjectSeqNo@1100528602 : Integer);
    VAR
      ServSurvLocObjDetail@1100528601 : Record 11071807;
      FromServSurvObjectAddAct@1100528605 : Record 11071814;
      ToServSurvObjectAddAct@1100528606 : Record 11071814;
      FromSurvObjAddActProperty@1100527300 : Record 11071955;
      ToSurvObjAddActProperty@1100527301 : Record 11071955;
    BEGIN
      ServSurvLocObjDetail := IServSurvLocObjDetail;
      ServSurvLocObjDetail."Survey No." := IToSurveyNo;
      ServSurvLocObjDetail."Location Code" := IToSurveyLocationCode;
      ServSurvLocObjDetail."Seq. No." := IToSurveyObjectSeqNo;
      ServSurvLocObjDetail.INSERT;

      FromServSurvObjectAddAct.SETRANGE("Survey No.", IServSurvLocObjDetail."Survey No.");
      FromServSurvObjectAddAct.SETRANGE("Location Code", IServSurvLocObjDetail."Location Code");
      FromServSurvObjectAddAct.SETRANGE("Seq. No.", IServSurvLocObjDetail."Seq. No.");
      FromServSurvObjectAddAct.SETRANGE("Maintenance Scheme Code", IServSurvLocObjDetail."Maintenance Scheme Code");
      IF FromServSurvObjectAddAct.FINDSET THEN
        REPEAT
          ToServSurvObjectAddAct := FromServSurvObjectAddAct;
          ToServSurvObjectAddAct."Survey No." := IToSurveyNo;
          ToServSurvObjectAddAct."Location Code" := IToSurveyLocationCode;
          ToServSurvObjectAddAct."Seq. No." := IToSurveyObjectSeqNo;
          ToServSurvObjectAddAct.INSERT;
        UNTIL FromServSurvObjectAddAct.NEXT = 0;

      FromSurvObjAddActProperty.SETRANGE("Survey No.", IServSurvLocObjDetail."Survey No.");
      FromSurvObjAddActProperty.SETRANGE("Location Code", IServSurvLocObjDetail."Location Code");
      FromSurvObjAddActProperty.SETRANGE("Seq. No.", IServSurvLocObjDetail."Seq. No.");
      FromSurvObjAddActProperty.SETRANGE("Maintenance Scheme Code", IServSurvLocObjDetail."Maintenance Scheme Code");
      IF FromSurvObjAddActProperty.FINDSET THEN
          REPEAT
              ToSurvObjAddActProperty := FromSurvObjAddActProperty;
              ToSurvObjAddActProperty."Survey No." := IToSurveyNo;
              ToSurvObjAddActProperty."Location Code" := IToSurveyLocationCode;
              ToSurvObjAddActProperty."Seq. No." := IToSurveyObjectSeqNo;
              ToSurvObjAddActProperty.INSERT;
          UNTIL FromSurvObjAddActProperty.NEXT = 0;
    END;

    LOCAL PROCEDURE CopySurveyLocStructure@1100528617(IServSurveyLocStructure@1100528602 : Record 11071805;IToSurveyNo@1100528601 : Code[20];IToSurveyLocationCode@1100528600 : Code[10]);
    VAR
      ServSurveyLocStructure@1100528603 : Record 11071805;
      FromServiceSurveyStructureLine@1100528604 : Record 11071806;
      ToServiceSurveyStructureLine@1100528605 : Record 11071806;
    BEGIN
      ServSurveyLocStructure := IServSurveyLocStructure;
      ServSurveyLocStructure."Survey No." := IToSurveyNo;
      ServSurveyLocStructure."Location Code" := IToSurveyLocationCode;
      ServSurveyLocStructure.INSERT;

      FromServiceSurveyStructureLine.SETRANGE("Survey No.", IServSurveyLocStructure."Survey No.");
      FromServiceSurveyStructureLine.SETRANGE("Location Code", IServSurveyLocStructure."Location Code");
      FromServiceSurveyStructureLine.SETRANGE("Structure No.", IServSurveyLocStructure."Structure No.");
      IF FromServiceSurveyStructureLine.FINDSET THEN
        REPEAT
          ToServiceSurveyStructureLine := FromServiceSurveyStructureLine;
          ToServiceSurveyStructureLine."Survey No." := IToSurveyNo;
          ToServiceSurveyStructureLine."Location Code" := IToSurveyLocationCode;
          ToServiceSurveyStructureLine.INSERT;
        UNTIL FromServiceSurveyStructureLine.NEXT = 0;
    END;

    PROCEDURE CreateSurveyLocFromRelation@1100409000(ISurveyNo@1100409000 : Code[20]);
    VAR
      ServiceSurveyLocation@1100409001 : Record 11071804;
      ServiceSurvey@1100409003 : Record 11071803;
      Contact@1100409002 : Record 5050;
      ContactNo@1100409004 : Code[20];
    BEGIN
      IF NOT ServiceSurvey.GET(ISurveyNo) THEN
        EXIT;
      IF ServiceSurvey."Contact No. (Person)" <> '' THEN
        ContactNo := ServiceSurvey."Contact No. (Person)"
      ELSE
        ContactNo := ServiceSurvey."Contact No. (Company)";
      IF ContactNo = '' THEN
        EXIT;
      IF NOT Contact.GET(ContactNo) THEN
        EXIT;
      ServiceSurveyLocation."Survey No." := ISurveyNo;
      ServiceSurveyLocation."Location Code" := ServiceSurveyLocation.GetNextLocationCode;
      ServiceSurveyLocation.Description := '';
      ServiceSurveyLocation.VALIDATE(Address, Contact.Address);
      ServiceSurveyLocation.VALIDATE("Address 2", Contact."Address 2");
      ServiceSurveyLocation.VALIDATE("Post Code", Contact."Post Code");
      ServiceSurveyLocation.VALIDATE("Country/Region Code", Contact."Country/Region Code");
      ServiceSurveyLocation.VALIDATE(City, Contact.City);
      ServiceSurveyLocation.VALIDATE("Phone No.", Contact."Phone No.");
      ServiceSurveyLocation.VALIDATE("Fax No.", Contact."Fax No.");
      ServiceSurveyLocation.VALIDATE("E-Mail", Contact."E-Mail");
      ServiceSurveyLocation.VALIDATE("Mobile Phone No.", Contact."Mobile Phone No.");
      ServiceSurveyLocation.INSERT(TRUE);
    END;

    PROCEDURE GetTempSurveyWorkList@1100525000(IServSurvLocObjDetail@1100525002 : Record 11071807;IInclAdditionalActivities@1100525010 : Boolean;INormInclAdjustmentFactor@1100528601 : Boolean;VAR OTmpServSurvObjectAddAct@1100525000 : TEMPORARY Record 11071814);
    VAR
      TmpMaintSchemeVersionLine@1100525001 : TEMPORARY Record 11071744;
      TmpServSurvObjectAddAct@1100525007 : TEMPORARY Record 11071814;
      ServSurvObjectAddAct@1100525009 : Record 11071814;
      ServiceSurvey@1100525003 : Record 11071803;
      MaintenanceManagement@1100525004 : Codeunit 11012829;
      BudgetRateManagement@1100525008 : Codeunit 11012358;
      LineCounter@1100528600 : Integer;
      LineType@1100525006 : 'Maintenance Scheme,Modification,Standard Object,Standard Object Deinstallation,Standard Object Installation,Object Installation,Object';
      BudgetRateFoundAt@1100525005 : Text[250];
      AdjustmentFactorNormLevel@1100528602 : Option;
    BEGIN
      TmpServSurvObjectAddAct.COPY(OTmpServSurvObjectAddAct, TRUE);
      IServSurvLocObjDetail.CALCFIELDS("Standard Object No.");
      ServiceSurvey.GET(IServSurvLocObjDetail."Survey No.");

      OTmpServSurvObjectAddAct.RESET;
      OTmpServSurvObjectAddAct.SETRANGE("Survey No.", IServSurvLocObjDetail."Survey No.");
      OTmpServSurvObjectAddAct.SETRANGE("Location Code", IServSurvLocObjDetail."Location Code");
      OTmpServSurvObjectAddAct.SETRANGE("Seq. No.", IServSurvLocObjDetail."Seq. No.");
      OTmpServSurvObjectAddAct.SETRANGE("Maintenance Scheme Code", IServSurvLocObjDetail."Maintenance Scheme Code");
      IF OTmpServSurvObjectAddAct.ISEMPTY THEN BEGIN
        MaintenanceManagement.GetTempWorklist(TmpMaintSchemeVersionLine, LineType::"Standard Object",
        IServSurvLocObjDetail."Standard Object No.", IServSurvLocObjDetail."Maintenance Scheme Code",
        '', ServiceSurvey."Reference Date", '',
        LineType::"Standard Object", IServSurvLocObjDetail."Standard Object No.", IServSurvLocObjDetail."Maintenance Scheme Code",
        ServiceSurvey."Reference Date", TRUE, FALSE);

        LineCounter := 10000;
        IF TmpMaintSchemeVersionLine.FINDSET THEN
          REPEAT
            OTmpServSurvObjectAddAct."Survey No." := IServSurvLocObjDetail."Survey No.";
            OTmpServSurvObjectAddAct."Location Code" := IServSurvLocObjDetail."Location Code";
            OTmpServSurvObjectAddAct."Seq. No." := IServSurvLocObjDetail."Seq. No.";
            OTmpServSurvObjectAddAct."Maintenance Scheme Code" := IServSurvLocObjDetail."Maintenance Scheme Code";
            OTmpServSurvObjectAddAct."Line No." := LineCounter;
            OTmpServSurvObjectAddAct."Line Type" := TmpMaintSchemeVersionLine."Line Type";
            OTmpServSurvObjectAddAct."Type Code" := TmpMaintSchemeVersionLine."Type Code";
            OTmpServSurvObjectAddAct."Belongs to Scheme" := TmpMaintSchemeVersionLine."Belongs to Scheme";
            OTmpServSurvObjectAddAct."Original Line No." := TmpMaintSchemeVersionLine."Line No.";
            OTmpServSurvObjectAddAct."Original Index Date" := TmpMaintSchemeVersionLine."Index Date";
            OTmpServSurvObjectAddAct.Description := TmpMaintSchemeVersionLine.Description;
            OTmpServSurvObjectAddAct.Quantity := TmpMaintSchemeVersionLine.Quantity;
            OTmpServSurvObjectAddAct."Unit of Measure" := TmpMaintSchemeVersionLine."Unit of Measure";
            OTmpServSurvObjectAddAct."Cost Type" := TmpMaintSchemeVersionLine."Cost Type";
            OTmpServSurvObjectAddAct."Cost Object" := TmpMaintSchemeVersionLine."Cost Object";
            IF OTmpServSurvObjectAddAct."Cost Type" = OTmpServSurvObjectAddAct."Cost Type"::Labor THEN
              OTmpServSurvObjectAddAct.Norm :=
                TmpMaintSchemeVersionLine.Norm *
                  OTmpServSurvObjectAddAct.GetAdjustmentFactorNorm(
                    IServSurvLocObjDetail."Survey No.",
                    IServSurvLocObjDetail."Location Code",
                    IServSurvLocObjDetail."Seq. No.",
                    IServSurvLocObjDetail."Maintenance Scheme Code",
                    TmpMaintSchemeVersionLine."Index Date",
                    AdjustmentFactorNormLevel);
            OTmpServSurvObjectAddAct."Rate Code" := TmpMaintSchemeVersionLine."Rate Code";
            IF (OTmpServSurvObjectAddAct."Rate Code" <> '') AND
               (TmpMaintSchemeVersionLine."Cost Type" = TmpMaintSchemeVersionLine."Cost Type"::Labor)
            THEN
              OTmpServSurvObjectAddAct.Rate :=
                BudgetRateManagement.GetBudgetRate(1, '', '', '', ServiceSurvey."Global Dimension 1 Code",
                  OTmpServSurvObjectAddAct."Rate Code", ServiceSurvey."Reference Date", BudgetRateFoundAt);
            OTmpServSurvObjectAddAct."Cost Price" := TmpMaintSchemeVersionLine."Cost Price";
            OTmpServSurvObjectAddAct."Gross Price" := TmpMaintSchemeVersionLine."Gross Price";
            OTmpServSurvObjectAddAct."Purchase Discount %" := TmpMaintSchemeVersionLine."Purchase Discount %";
            IF TmpMaintSchemeVersionLine."Cost Type" <> TmpMaintSchemeVersionLine."Cost Type"::Labor THEN
              OTmpServSurvObjectAddAct."Cost Amount" := TmpMaintSchemeVersionLine."Cost Amount"
            ELSE
              OTmpServSurvObjectAddAct."Cost Amount" := OTmpServSurvObjectAddAct.Rate * OTmpServSurvObjectAddAct.Quantity;
            OTmpServSurvObjectAddAct.Hours := TmpMaintSchemeVersionLine.Hours;
            OTmpServSurvObjectAddAct."Cost Component" := TmpMaintSchemeVersionLine."Cost Component";
            OTmpServSurvObjectAddAct."Item No." := TmpMaintSchemeVersionLine."Item No.";
            OTmpServSurvObjectAddAct."Basic Item" := TmpMaintSchemeVersionLine."Basic Item";
            OTmpServSurvObjectAddAct.Manufacturer := TmpMaintSchemeVersionLine.Manufacturer;
            OTmpServSurvObjectAddAct."Trade Item" := TmpMaintSchemeVersionLine."Trade Item";
            OTmpServSurvObjectAddAct."Vendor (Trade Item)" := TmpMaintSchemeVersionLine."Vendor (Trade Item)";
            OTmpServSurvObjectAddAct.Vendor := TmpMaintSchemeVersionLine.Vendor;
            OTmpServSurvObjectAddAct."Line Status" := TmpMaintSchemeVersionLine."Line Status";
            OTmpServSurvObjectAddAct.CalcTotals;
            IF NOT INormInclAdjustmentFactor THEN
              OTmpServSurvObjectAddAct.Norm := TmpMaintSchemeVersionLine.Norm;
            OTmpServSurvObjectAddAct.INSERT;
            LineCounter += 10000;
          UNTIL TmpMaintSchemeVersionLine.NEXT = 0;

        IF IInclAdditionalActivities THEN BEGIN
          ServSurvObjectAddAct.SETRANGE("Survey No.", IServSurvLocObjDetail."Survey No.");
          ServSurvObjectAddAct.SETRANGE("Location Code", IServSurvLocObjDetail."Location Code");
          ServSurvObjectAddAct.SETRANGE("Seq. No.", IServSurvLocObjDetail."Seq. No.");
          ServSurvObjectAddAct.SETRANGE("Maintenance Scheme Code", IServSurvLocObjDetail."Maintenance Scheme Code");
          IF ServSurvObjectAddAct.FINDSET THEN
            REPEAT
              OTmpServSurvObjectAddAct := ServSurvObjectAddAct;
              OTmpServSurvObjectAddAct."Line Type" := OTmpServSurvObjectAddAct."Line Type"::"Survey Object";
              OTmpServSurvObjectAddAct."Type Code" := '';
              OTmpServSurvObjectAddAct."Line No." := LineCounter;
              IF ServSurvObjectAddAct."Original Line No." <> 0 THEN
                  OTmpServSurvObjectAddAct."Original Line No." := ServSurvObjectAddAct."Original Line No."
              ELSE
                OTmpServSurvObjectAddAct."Original Line No." := ServSurvObjectAddAct."Line No.";
              OTmpServSurvObjectAddAct.Norm *=
                OTmpServSurvObjectAddAct.GetAdjustmentFactorNorm(
                  IServSurvLocObjDetail."Survey No.",
                  IServSurvLocObjDetail."Location Code",
                  IServSurvLocObjDetail."Seq. No.",
                  IServSurvLocObjDetail."Maintenance Scheme Code",
                  0D,
                  AdjustmentFactorNormLevel);
              OTmpServSurvObjectAddAct.CalcTotals;
              IF NOT INormInclAdjustmentFactor THEN
                OTmpServSurvObjectAddAct.Norm := ServSurvObjectAddAct.Norm;
              OTmpServSurvObjectAddAct.INSERT;
              LineCounter += 10000;
            UNTIL ServSurvObjectAddAct.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE UpdateCorrectionFactorByOfferedAmount@1100528616(ISurveyNo@1100528600 : Code[20]);
    VAR
      ServiceSurvey@1100528603 : Record 11071803;
      ServSurvLocationObject@1100528601 : Record 11071813;
      FixedAmount@1100528602 : Decimal;
      AmountToDivide@1100528604 : Decimal;
      AddedCorrectionFactor@1100528605 : Decimal;
    BEGIN
      ServiceSurvey.GET(ISurveyNo);
      ServiceSurvey.TESTFIELD("Offered Amount");

      ServSurvLocationObject.SETRANGE("Survey No.", ISurveyNo);
      ServSurvLocationObject.SETFILTER("Include in Contract", '<>%1', ServSurvLocationObject."Include in Contract"::" ");
      ServSurvLocationObject.SETRANGE("Objects Created", TRUE);
      ServSurvLocationObject.CALCSUMS("Calculated Sales Amount");
      FixedAmount := ServSurvLocationObject."Calculated Sales Amount";

      AmountToDivide := ServiceSurvey."Offered Amount" - FixedAmount;
      ServSurvLocationObject.SETRANGE("Objects Created", FALSE);
      ServSurvLocationObject.CALCSUMS("Calculated Sales Amount");

      IF ServSurvLocationObject."Calculated Sales Amount" <> 0 THEN
        AddedCorrectionFactor := AmountToDivide / ServSurvLocationObject."Calculated Sales Amount"
      ELSE
        AddedCorrectionFactor := 1;

      IF ServSurvLocationObject.FINDSET(TRUE) THEN BEGIN
        REPEAT
          ServSurvLocationObject.VALIDATE("Correction Factor", ServSurvLocationObject."Correction Factor" * AddedCorrectionFactor);
          ServSurvLocationObject.MODIFY(TRUE);
        UNTIL ServSurvLocationObject.NEXT = 0;
        MESSAGE(Text005, ServiceSurvey.FIELDCAPTION("Offered Amount"));
      END ELSE
        ERROR(Text001);
    END;

    PROCEDURE GetSurveySurchargeAmounts@1100528619(VAR IServSurvLocObjDetail@1100528609 : Record 11071807;IKindOfSurcharge@1100528618 : 'Cost,Sales';VAR OLaborSurcharge@1100528613 : Decimal;VAR OMaterialSurcharge@1100528614 : Decimal;VAR OSubcontractingSurcharge@1100528615 : Decimal;VAR OPlantSurcharge@1100528616 : Decimal;VAR OSundrySurcharge@1100528617 : Decimal) TotalSurchargeAmount : Decimal;
    VAR
      ServiceSurvey@1100528607 : Record 11071803;
      LaborSurcharge@1100528602 : Decimal;
      MaterialSurcharge@1100528603 : Decimal;
      SubcontractingSurcharge@1100528604 : Decimal;
      PlantSurcharge@1100528605 : Decimal;
      SundrySurcharge@1100528606 : Decimal;
      CancellationLevel@1100528608 : Option;
    BEGIN
      OLaborSurcharge := 0;
      OMaterialSurcharge := 0;
      OSubcontractingSurcharge := 0;
      OPlantSurcharge := 0;
      OSundrySurcharge := 0;
      ServiceSurvey.GET(IServSurvLocObjDetail."Survey No.");

      GetTempSurveyWorkList(IServSurvLocObjDetail, TRUE, TRUE, TmpServSurvObjectAddAct);
      IF TmpServSurvObjectAddAct.FINDSET THEN
        REPEAT
          IF NOT TmpServSurvObjectAddAct.IsCancelled(
            IServSurvLocObjDetail."Survey No.", IServSurvLocObjDetail."Location Code", IServSurvLocObjDetail."Seq. No.",
            IServSurvLocObjDetail."Maintenance Scheme Code", ServiceSurvey."Reference Date", CancellationLevel)
          THEN BEGIN
            TotalSurchargeAmount +=
              TmpServSurvObjectAddAct.GetSurveySurchargeAmounts(
                IKindOfSurcharge, LaborSurcharge, MaterialSurcharge, SubcontractingSurcharge, PlantSurcharge, SundrySurcharge);
            OLaborSurcharge += LaborSurcharge;
            OMaterialSurcharge += MaterialSurcharge;
            OSubcontractingSurcharge += SubcontractingSurcharge;
            OPlantSurcharge += PlantSurcharge;
            OSundrySurcharge += SundrySurcharge;
          END;
        UNTIL TmpServSurvObjectAddAct.NEXT = 0;
    END;

    PROCEDURE CreateServiceOrder@1100528621(VAR IServSurvLocationObject@1100528600 : Record 11071813);
    VAR
      ServSurvLocationObject@1100528601 : Record 11071813;
      FirstCreatedServiceOrderNo@1100528605 : Code[20];
      LastCreatedServiceOrderNo@1100528603 : Code[20];
      LastLocationCode@1100528602 : Code[20];
    BEGIN
      ServSurvLocationObject.COPY(IServSurvLocationObject);
      ServSurvLocationObject.SETRANGE("Include in Contract", ServSurvLocationObject."Include in Contract"::"Only Service Order");
      ServSurvLocationObject.SETRANGE("Service Order No.", '');
      IF ServSurvLocationObject.FINDSET THEN
        REPEAT
          IF (LastLocationCode = '') OR (LastLocationCode <> ServSurvLocationObject."Location Code") THEN BEGIN
            LastCreatedServiceOrderNo := CreateServiceOrderHeader(ServSurvLocationObject);
            IF FirstCreatedServiceOrderNo = '' THEN
              FirstCreatedServiceOrderNo := LastCreatedServiceOrderNo;
          END;
          AddServiceOrderObject(LastCreatedServiceOrderNo, ServSurvLocationObject."Existing Service Object No.");
          AddServiceOrderBudgetLines(LastCreatedServiceOrderNo, ServSurvLocationObject."Existing Service Object No.", ServSurvLocationObject);
          AddAdviceOrderLines(LastCreatedServiceOrderNo, ServSurvLocationObject."Existing Service Object No.", ServSurvLocationObject);
          LastLocationCode := ServSurvLocationObject."Location Code";
          ServSurvLocationObject."Service Order No." := LastCreatedServiceOrderNo;
          ServSurvLocationObject.MODIFY;
        UNTIL ServSurvLocationObject.NEXT = 0;
      IF GUIALLOWED THEN
        CASE TRUE OF
          FirstCreatedServiceOrderNo = '':
            MESSAGE(Text010);
          FirstCreatedServiceOrderNo = LastCreatedServiceOrderNo:
            MESSAGE(Text009, FirstCreatedServiceOrderNo)
        ELSE
          MESSAGE(Text009, STRSUBSTNO('%1..%2', FirstCreatedServiceOrderNo, LastCreatedServiceOrderNo));
        END;
    END;

    LOCAL PROCEDURE CreateServiceOrderHeader@1100528623(IServSurvLocationObject@1100528600 : Record 11071813) : Code[20];
    VAR
      ServiceOrder@1100528601 : Record 11012823;
      ServiceSurvey@1100528602 : Record 11071803;
    BEGIN
      ServiceSurvey.GET(IServSurvLocationObject."Survey No.");
      ServiceSurveyLocation.GET(IServSurvLocationObject."Survey No.", IServSurvLocationObject."Location Code");
      ServiceOrder.INIT;
      ServiceOrder."Source Type" := ServiceOrder."Source Type"::Direct;
      ServiceOrder.Origin := ServiceOrder.Origin::Survey;
      ServiceOrder.Description := ServiceSurvey.Description;
      ServiceOrder.INSERT(TRUE);

      IF ServiceSurveyLocation."Service Location No." <> '' THEN
        ServiceOrder.VALIDATE("Service Location No.", ServiceSurveyLocation."Service Location No.")
      ELSE BEGIN
        ServiceOrder.VALIDATE(Address, ServiceSurveyLocation.Address);
        ServiceOrder.VALIDATE("Address 2", ServiceSurveyLocation."Address 2");
        ServiceOrder.VALIDATE("Post Code", ServiceSurveyLocation."Post Code");
        ServiceOrder.VALIDATE(City, ServiceSurveyLocation.City);
        ServiceOrder.VALIDATE(County, ServiceSurveyLocation.County);
        ServiceOrder.VALIDATE("Country/Region Code", ServiceSurveyLocation."Country/Region Code");
        EVALUATE(ServiceOrder."House No.", ServiceSurveyLocation."House No.");
        ServiceOrder."House No. Ext." := ServiceSurveyLocation."House No. Ext.";
      END;
      ServiceOrder.VALIDATE("Customer No.", ServiceSurvey."Customer No.");
      IF ServiceSurvey."Existing Contract No." <> '' THEN
        ServiceOrder.VALIDATE("Service Contract No.", ServiceSurvey."Existing Contract No.");

      ServiceOrder.MODIFY(TRUE);
      EXIT(ServiceOrder."No.");
    END;

    LOCAL PROCEDURE AddServiceOrderObject@1100528625(IServiceOrderNo@1100528600 : Code[20];IServiceObjectNo@1100528601 : Code[20]);
    VAR
      ServiceOrderObject@1100528602 : Record 11071724;
    BEGIN
      IF IServiceObjectNo = '' THEN
        EXIT;
      IF NOT ServiceOrderObject.GET(IServiceOrderNo, IServiceObjectNo) THEN BEGIN
        ServiceOrderObject."Service Order No." := IServiceOrderNo;
        ServiceOrderObject."Object No." := IServiceObjectNo;
        ServiceOrderObject.Source := ServiceOrderObject.Source::Other;
        ServiceOrderObject.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE AddServiceOrderBudgetLines@1100528624(IServiceOrderNo@1100528600 : Code[20];IServiceObjectNo@1100528601 : Code[20];IServSurvLocationObject@1100528602 : Record 11071813);
    VAR
      ServiceOrderBudgetLine@1100528603 : Record 11012875;
      ServSurvObjectAddAct@1100528604 : Record 11071814;
      ServiceOrder@1100528606 : Record 11012823;
      LineNo@1100528605 : Integer;
    BEGIN
      ServiceOrder.GET(IServiceOrderNo);

      ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", IServiceOrderNo);
      ServiceOrderBudgetLine.SETRANGE("Object No.", IServiceObjectNo);
      IF ServiceOrderBudgetLine.FINDLAST THEN
        LineNo := ServiceOrderBudgetLine."Line No.";
      LineNo += 10000;

      ServSurvObjectAddAct.SETRANGE("Survey No.", IServSurvLocationObject."Survey No.");
      ServSurvObjectAddAct.SETRANGE("Location Code", IServSurvLocationObject."Location Code");
      ServSurvObjectAddAct.SETRANGE("Seq. No.", IServSurvLocationObject."Seq. No.");
      ServSurvObjectAddAct.SETRANGE("Maintenance Scheme Code", '');
      IF ServSurvObjectAddAct.FINDSET THEN
        REPEAT
          ServiceOrderBudgetLine.INIT;
          ServiceOrderBudgetLine."Budget Type" := ServiceOrderBudgetLine."Budget Type"::Order;
          ServiceOrderBudgetLine."Service Order No." := IServiceOrderNo;
          ServiceOrderBudgetLine.VALIDATE("Object No.", IServiceObjectNo);
          ServiceOrderBudgetLine."Line No." := LineNo;
          ServiceOrderBudgetLine.INSERT(TRUE);
          ServiceOrderBudgetLine."Cost Type" := ServSurvObjectAddAct."Cost Type";
          ServiceOrderBudgetLine.VALIDATE("Cost Object", ServSurvObjectAddAct."Cost Object");
          ServiceOrderBudgetLine."Time Quantity" := 1;
          IF ServSurvObjectAddAct."Cost Type" = ServSurvObjectAddAct."Cost Type"::Material THEN BEGIN
            ServiceOrderBudgetLine.VALIDATE("Vendor (Trade Item)", ServSurvObjectAddAct."Vendor (Trade Item)");
            ServiceOrderBudgetLine.VALIDATE("Trade Item", ServSurvObjectAddAct."Trade Item");
            ServiceOrderBudgetLine.VALIDATE(Manufacturer, ServSurvObjectAddAct.Manufacturer);
            ServiceOrderBudgetLine.VALIDATE("Basic Item", ServSurvObjectAddAct."Basic Item");
            ServiceOrderBudgetLine.VALIDATE("Item No.", ServSurvObjectAddAct."Item No.");
          END;
          IF ServSurvObjectAddAct."Cost Type" = ServSurvObjectAddAct."Cost Type"::Labor THEN BEGIN
            ServiceOrderBudgetLine.VALIDATE(Norm, ServSurvObjectAddAct.Norm);
            ServiceOrderBudgetLine.VALIDATE("Rate Code", ServSurvObjectAddAct."Rate Code");
            ServiceOrderBudgetLine.VALIDATE(Rate, ServSurvObjectAddAct.Rate);
          END;
          ServiceOrderBudgetLine.VALIDATE("Cost Component", ServSurvObjectAddAct."Cost Component");
          ServiceOrderBudgetLine.Building := IServSurvLocationObject.Building;
          ServiceOrderBudgetLine.Floor := IServSurvLocationObject.Floor;
          ServiceOrderBudgetLine.Room := IServSurvLocationObject.Room;
          ServiceOrderBudgetLine.VALIDATE("Unit of Measure", ServSurvObjectAddAct."Unit of Measure");
          IF ServSurvObjectAddAct."Gross Price" <> 0 THEN
            ServiceOrderBudgetLine.VALIDATE("Gross Price", ServSurvObjectAddAct."Gross Price");
          IF ServSurvObjectAddAct."Cost Price" <> 0 THEN
            ServiceOrderBudgetLine.VALIDATE(Price, ServSurvObjectAddAct."Cost Price");
          ServiceOrderBudgetLine.VALIDATE(Quantity, ServSurvObjectAddAct.Quantity);
          ServiceOrderBudgetLine."Service Location No." := ServiceOrder."Service Location No.";
          ServiceOrderBudgetLine.MODIFY(TRUE);
          LineNo += 10000;
        UNTIL ServSurvObjectAddAct.NEXT = 0;
    END;

    LOCAL PROCEDURE AddAdviceOrderLines@1100528622(IServiceOrderNo@1100528602 : Code[20];IServiceObjectNo@1100528601 : Code[20];IServSurvLocationObject@1100528600 : Record 11071813);
    VAR
      AdviceOrderLine@1100528603 : Record 11012055;
      ServSurvObjectAddAct@1100528604 : Record 11071814;
      ServiceOrder@1100528606 : Record 11012823;
      JobsSetup@1100528607 : Record 315;
    BEGIN
      ServiceOrder.GET(IServiceOrderNo);
      JobsSetup.GET;

      ServSurvObjectAddAct.SETRANGE("Survey No.", IServSurvLocationObject."Survey No.");
      ServSurvObjectAddAct.SETRANGE("Location Code", IServSurvLocationObject."Location Code");
      ServSurvObjectAddAct.SETRANGE("Seq. No.", IServSurvLocationObject."Seq. No.");
      ServSurvObjectAddAct.SETRANGE("Maintenance Scheme Code", '');
      ServSurvObjectAddAct.SETFILTER("Cost Type", '%1|%2', ServSurvObjectAddAct."Cost Type"::Material, ServSurvObjectAddAct."Cost Type"::Subcontracting);
      IF ServSurvObjectAddAct.FINDSET THEN
        REPEAT
          AdviceOrderLine.INIT;
          AdviceOrderLine."Record Type":= AdviceOrderLine."Record Type"::ServOrder;
          AdviceOrderLine."Service Order No." := IServiceOrderNo;
          AdviceOrderLine.VALIDATE("Line No.", 0);
          AdviceOrderLine.INSERT(TRUE);

          AdviceOrderLine."Service Contract No." := ServiceOrder."Service Contract No.";
          AdviceOrderLine."Cost Object" := ServSurvObjectAddAct."Cost Object";
          AdviceOrderLine."Cost Component" := ServSurvObjectAddAct."Cost Component";
          AdviceOrderLine."Order Date" := ServiceOrder."Starting Date";
          CASE ServSurvObjectAddAct."Cost Type" OF
            ServSurvObjectAddAct."Cost Type"::Material:
              BEGIN
                AdviceOrderLine.VALIDATE("Cost Type", AdviceOrderLine."Cost Type"::Material);
                AdviceOrderLine.VALIDATE(Vendor, ServSurvObjectAddAct.Vendor);
                IF ServSurvObjectAddAct."Trade Item" <> '' THEN BEGIN
                  AdviceOrderLine."Vendor (Trade Item)":= ServSurvObjectAddAct."Vendor (Trade Item)";
                  AdviceOrderLine.VALIDATE("Trade Item", ServSurvObjectAddAct."Trade Item");
                END ELSE BEGIN
                  IF ServSurvObjectAddAct."Basic Item" <> '' THEN BEGIN
                    AdviceOrderLine.Manufacturer := ServSurvObjectAddAct.Manufacturer;
                    AdviceOrderLine.VALIDATE("Basic Item", ServSurvObjectAddAct."Basic Item");
                  END ELSE BEGIN
                    IF ServSurvObjectAddAct."Item No." <> '' THEN BEGIN
                      AdviceOrderLine.VALIDATE("Item No.", ServSurvObjectAddAct."Item No.");
                    END;
                  END;
                END;
                IF AdviceOrderLine.Vendor = '' THEN
                  AdviceOrderLine.VALIDATE(Vendor, AdviceOrderLine.PreferredVendor);
              END;
            ServSurvObjectAddAct."Cost Type"::Subcontracting:
              BEGIN
                AdviceOrderLine.VALIDATE("Cost Type", AdviceOrderLine."Cost Type"::Subcontracting);
                AdviceOrderLine.VALIDATE(Vendor, ServSurvObjectAddAct.Vendor);
              END;
          END;
          AdviceOrderLine."Quantity (Budget)" := ServSurvObjectAddAct.Quantity * IServSurvLocationObject.Quantity;
          AdviceOrderLine."Quantity (Advice)" := AdviceOrderLine."Quantity (Budget)";
          AdviceOrderLine."Unit of Measure" := ServSurvObjectAddAct."Unit of Measure";
          AdviceOrderLine.VALIDATE("Price (LCY)", ServSurvObjectAddAct."Cost Price");
          AdviceOrderLine.VALIDATE(Transaction, JobsSetup."Advice Order Purch.Transaction");
          IF (AdviceOrderLine."Item No." <> '') AND (AdviceOrderLine."Cost Type" = AdviceOrderLine."Cost Type"::Material) THEN
            IF JobsSetup."Advice Order Transaction" = JobsSetup."Advice Order Transaction"::Inventory THEN
              AdviceOrderLine.VALIDATE(Transaction, AdviceOrderLine.Transaction::Inventory);
          AdviceOrderLine.Deliver := AdviceOrderLine.Deliver::"Service Location";
          AdviceOrderLine.Description := ServSurvObjectAddAct.Description;
          AdviceOrderLine.VALIDATE("Receipt Date", ServiceOrder."Starting Date");
          AdviceOrderLine.VALIDATE("External Text", ServSurvObjectAddAct.Text);
          AdviceOrderLine.MODIFY(TRUE);
        UNTIL ServSurvObjectAddAct.NEXT = 0;
    END;

    PROCEDURE "---"@1100528610();
    BEGIN
    END;

    LOCAL PROCEDURE CopyTmpSpecificationLines@1100528612(ISurveyNo@1100528603 : Code[20];ILocationCode@1100528607 : Code[10];ISeqNo@1100528605 : Integer;ISpecificationType@1100528604 : 'Standard Object,Survey Object';VAR OTmpServiceSurveyObjectSpec@1100528600 : TEMPORARY Record 11071972);
    VAR
      ObjectSpecificationLine@1100528606 : Record 11071781;
      ServiceSurveyObjectSpec@1100528601 : Record 11071972;
      ServSurvLocationObject@1100528608 : Record 11071813;
      LineNo@1100528609 : Integer;
    BEGIN
      ServSurvLocationObject.GET(ISurveyNo, ILocationCode, ISeqNo);
      IF OTmpServiceSurveyObjectSpec.FINDLAST THEN
        LineNo := OTmpServiceSurveyObjectSpec."Line No.";
      CASE ISpecificationType OF
        ISpecificationType::"Standard Object":
          BEGIN
            ObjectSpecificationLine.SETRANGE("Specification Type", ObjectSpecificationLine."Specification Type"::"Standard Object");
            ObjectSpecificationLine.SETRANGE(Code, ServSurvLocationObject."Standard Object No.");
            ObjectSpecificationLine.SETRANGE("Object Level", FALSE);

            IF ObjectSpecificationLine.FINDSET THEN
              REPEAT
                ObjectSpecificationLine.CALCFIELDS("Visible for Field Service", "Editable by Field Service", "Publish on Service Portal");
                IF NOT TmpSpecificationLineExists(ObjectSpecificationLine, OTmpServiceSurveyObjectSpec) THEN BEGIN
                  OTmpServiceSurveyObjectSpec.INIT;
                  OTmpServiceSurveyObjectSpec."Survey No." := ISurveyNo;
                  OTmpServiceSurveyObjectSpec."Location Code" := ILocationCode;
                  OTmpServiceSurveyObjectSpec."Seq. No." := ISeqNo;
                  LineNo += 10000;
                  OTmpServiceSurveyObjectSpec."Line No." := LineNo;
                  OTmpServiceSurveyObjectSpec.Type := ObjectSpecificationLine.Type;
                  OTmpServiceSurveyObjectSpec."Specification Code" := ObjectSpecificationLine."Specification Code";
                  OTmpServiceSurveyObjectSpec.Description := ObjectSpecificationLine.Description;
                  OTmpServiceSurveyObjectSpec."Field Type" := ObjectSpecificationLine."Field Type";
                  OTmpServiceSurveyObjectSpec."Unit Of Measure" := ObjectSpecificationLine."Unit Of Measure";
                  OTmpServiceSurveyObjectSpec.Value := ObjectSpecificationLine.Value;
                  OTmpServiceSurveyObjectSpec."Editable by Field Service" := ObjectSpecificationLine."Editable by Field Service";
                  OTmpServiceSurveyObjectSpec."Publish on Service Portal" := ObjectSpecificationLine."Publish on Service Portal";
                  OTmpServiceSurveyObjectSpec.BORG := ObjectSpecificationLine.BORG;
                  IF OTmpServiceSurveyObjectSpec.Type = OTmpServiceSurveyObjectSpec.Type::Line THEN
                    OTmpServiceSurveyObjectSpec."Specification Group Code" := ObjectSpecificationLine.GetObjSpecificationGroupCode()
                  ELSE
                    OTmpServiceSurveyObjectSpec."Specification Group Code" := ObjectSpecificationLine."Specification Code";
                  OTmpServiceSurveyObjectSpec.INSERT;
                END;
              UNTIL ObjectSpecificationLine.NEXT = 0;
          END;
        ISpecificationType::"Survey Object":
          BEGIN
            ServiceSurveyObjectSpec.SETRANGE("Survey No.", ISurveyNo);
            ServiceSurveyObjectSpec.SETRANGE("Location Code", ILocationCode);
            ServiceSurveyObjectSpec.SETRANGE("Seq. No.", ISeqNo);
            IF ServiceSurveyObjectSpec.FINDSET THEN
              REPEAT
                IF NOT TmpSurveySpecificationLineExists(ServiceSurveyObjectSpec, OTmpServiceSurveyObjectSpec) THEN BEGIN
                  OTmpServiceSurveyObjectSpec := ServiceSurveyObjectSpec;
                  LineNo += 10000;
                  OTmpServiceSurveyObjectSpec."Line No." := LineNo;
                  IF OTmpServiceSurveyObjectSpec.Type = OTmpServiceSurveyObjectSpec.Type::Line THEN
                    OTmpServiceSurveyObjectSpec."Specification Group Code" := ServiceSurveyObjectSpec.GetObjSpecificationGroupCode()
                  ELSE
                    OTmpServiceSurveyObjectSpec."Specification Group Code" := ServiceSurveyObjectSpec."Specification Code";
                  OTmpServiceSurveyObjectSpec.INSERT;
                END;
              UNTIL ServiceSurveyObjectSpec.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE CollectTmpSpecLines@1100528611(ISurveyNo@1100528600 : Code[20];ILocationCode@1100528605 : Code[10];ISeqNo@1100528603 : Integer;VAR OTmpServiceSurveyObjectSpec@1100528604 : TEMPORARY Record 11071972);
    VAR
      TmpServiceSurveyObjectSpec@1100528602 : TEMPORARY Record 11071972;
      ServSurvLocationObject@1100528601 : Record 11071813;
    BEGIN
      TmpServiceSurveyObjectSpec.COPY(OTmpServiceSurveyObjectSpec, TRUE);
      OTmpServiceSurveyObjectSpec.RESET;
      OTmpServiceSurveyObjectSpec.DELETEALL;

      ServSurvLocationObject.GET(ISurveyNo, ILocationCode, ISeqNo);

      CopyTmpSpecificationLines(ISurveyNo, ILocationCode, ISeqNo, 0, OTmpServiceSurveyObjectSpec);
      CopyTmpSpecificationLines(ISurveyNo, ILocationCode, ISeqNo, 1, OTmpServiceSurveyObjectSpec);

      OTmpServiceSurveyObjectSpec.RESET;
      OTmpServiceSurveyObjectSpec.SETCURRENTKEY("Survey No.", "Location Code", "Seq. No.", "Specification Group Code");
    END;

    LOCAL PROCEDURE TmpSpecificationLineExists@1100528618(IObjectSpecificationLine@1100528600 : Record 11071781;VAR ITmpServiceSurveyObjectSpec@1100528601 : TEMPORARY Record 11071972) : Boolean;
    BEGIN
      ITmpServiceSurveyObjectSpec.RESET;
      ITmpServiceSurveyObjectSpec.SETRANGE(Type, IObjectSpecificationLine.Type);
      ITmpServiceSurveyObjectSpec.SETRANGE("Specification Code", IObjectSpecificationLine."Specification Code");
      EXIT(NOT ITmpServiceSurveyObjectSpec.ISEMPTY);
    END;

    LOCAL PROCEDURE TmpSurveySpecificationLineExists@1100528613(IServiceSurveyObjectSpec@1100528600 : Record 11071972;VAR ITmpServiceSurveyObjectSpec@1100528601 : TEMPORARY Record 11071972) : Boolean;
    BEGIN
      ITmpServiceSurveyObjectSpec.RESET;
      ITmpServiceSurveyObjectSpec.SETRANGE(Type, IServiceSurveyObjectSpec.Type);
      ITmpServiceSurveyObjectSpec.SETRANGE("Specification Code", IServiceSurveyObjectSpec."Specification Code");
      EXIT(NOT ITmpServiceSurveyObjectSpec.ISEMPTY);
    END;

    LOCAL PROCEDURE "----"@1100528603();
    BEGIN
    END;

    PROCEDURE SetSurveyObjectSpecValue@1100528628(ISurveyNo@1100528609 : Code[20];ILocationCode@1100528608 : Code[10];ISeqNo@1100528607 : Integer;IObjectSpecCode@1100528600 : Code[10];IValue@1100528604 : Text[80]);
    VAR
      ServiceSurveyObjectSpec@1100528602 : Record 11071972;
    BEGIN
      IF FindOrCreateSurveyObjectSpec(ISurveyNo, ILocationCode, ISeqNo, IObjectSpecCode, ServiceSurveyObjectSpec) THEN BEGIN
        ServiceSurveyObjectSpec.VALIDATE(Value, IValue);
        ServiceSurveyObjectSpec.MODIFY(TRUE);
      END;
    END;

    PROCEDURE FindOrCreateSurveyObjectSpec@1100528627(ISurveyNo@1100528607 : Code[20];ILocationCode@1100528606 : Code[10];ISeqNo@1100528603 : Integer;IObjectSpecCode@1100528600 : Code[10];VAR OServiceSurveyObjectSpec@1100528605 : Record 11071972) : Boolean;
    VAR
      BaseObjectSpecificationLine@1100528604 : Record 11071779;
      LineNo@1100528602 : Integer;
    BEGIN
      BaseObjectSpecificationLine.SETRANGE(Code, IObjectSpecCode);
      BaseObjectSpecificationLine.SETRANGE(Level, BaseObjectSpecificationLine.Level::Object);
      IF NOT BaseObjectSpecificationLine.FINDFIRST THEN
        EXIT;

      OServiceSurveyObjectSpec.SETRANGE("Survey No.", ISurveyNo);
      OServiceSurveyObjectSpec.SETRANGE("Location Code", ILocationCode);
      OServiceSurveyObjectSpec.SETRANGE("Seq. No.", ISeqNo);
      OServiceSurveyObjectSpec.SETRANGE("Specification Code", BaseObjectSpecificationLine.Code);
      IF NOT OServiceSurveyObjectSpec.FINDFIRST THEN BEGIN
        OServiceSurveyObjectSpec.SETRANGE("Specification Code");
        IF OServiceSurveyObjectSpec.FINDLAST THEN
          LineNo := OServiceSurveyObjectSpec."Line No.";
        LineNo += 10000;
        OServiceSurveyObjectSpec."Survey No." := ISurveyNo;
        OServiceSurveyObjectSpec."Location Code" := ILocationCode;
        OServiceSurveyObjectSpec."Seq. No." := ISeqNo;
        OServiceSurveyObjectSpec.VALIDATE(Type, OServiceSurveyObjectSpec.Type::Line);
        OServiceSurveyObjectSpec.VALIDATE("Specification Code", BaseObjectSpecificationLine.Code);
        OServiceSurveyObjectSpec."Line No." := LineNo;
        OServiceSurveyObjectSpec.INSERT(TRUE);
      END;
      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

