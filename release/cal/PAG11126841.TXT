OBJECT Page 11126841 Import External Budget To SO
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Import externes Budget  in Serviceauftrag;
               ENU=Import External Budget To Service Order;
               NLD=Import externe begroting naar serviceorder];
    SaveValues=No;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    PageType=NavigatePage;
    OnOpenPage=BEGIN
                 IF OriginCode = '' THEN
                   ERROR('');

                 FillCostObjectVisible := (OriginCode = 'KPDGWW-XML');
                 DeriveCostTypeVisible := (OriginCode = 'KPDGWW-XML');
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100525000;1 ;ActionGroup;
                      CaptionML=[DEU=F&unktion;
                                 ENU=F&unctions;
                                 NLD=F&uncties;
                                 NOR=Fu&nksjon;
                                 SVE=Fu&nktion] }
      { 3       ;2   ;Action    ;
                      CaptionML=[DEU=Im&portieren;
                                 ENU=&Import;
                                 NLD=&Importeren;
                                 NOR=&Import;
                                 SVE=&Import];
                      InFooterBar=Yes;
                      Image=Report;
                      OnAction=BEGIN
                                 CurrPage.EDITABLE(FALSE);
                                 FinishWizard;
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210190002;1;Field  ;
                CaptionML=[DEU=Importieren externes Budget;
                           ENU=Import External Budget;
                           NLD=Import externe begroting;
                           NOR=Importer eksternt budsjett;
                           SVE=Importera extern budget];
                Style=Strong;
                StyleExpr=TRUE }

    { 1   ;1   ;Field     ;
                Name=ServiceOrderNo;
                CaptionML=[DEU=Serviceauftragsnr.;
                           ENU=Service Order No.;
                           NLD=Serviceordernr.;
                           NOR=Serviceordrenr.;
                           SVE=Serviceordernr];
                SourceExpr=ServiceOrderNo;
                Editable=FALSE }

    { 1100525002;1;Field  ;
                Name=FillCostObjectWith;
                CaptionML=[DEU=KostentrÑger angeben mit;
                           ENU=Fill Cost Object with;
                           NLD=Kostendrager vullen met;
                           NOR=Fyll ut kostnadsobjekt med;
                           SVE=Fyll i kostnadsobjekt med];
                OptionCaptionML=[DEU=Sortierungscode,FreierCode1,FreierCode2;
                                 ENU=Sort Code,Free Code 1,Free Code 2;
                                 NLD=Sorteercode,VrijeCode1,VrijeCode2;
                                 SVE=Sorteringskod,Fri kod 1,Fri kod 2];
                SourceExpr=FillCostObjectWith;
                Visible=FillCostObjectVisible }

    { 1100525003;1;Field  ;
                Name=DeriveCostTypeFrom;
                CaptionML=[DEU=Kostenart ableiten von;
                           ENU=Derive Cost Type From;
                           NLD=Kostensoort afleiden van;
                           NOR=Utled kosttype fra];
                OptionCaptionML=[DEU=Kostentyp KPD,KostentrÑger Navision;
                                 ENU=Cost Type KPD,Cost Object Navision;
                                 NLD=Kostensoort KPD,Kostendrager Navision;
                                 NOR=Kosttype KPD, kostobjekt Navision];
                SourceExpr=DeriveCostTypeFrom;
                Visible=DeriveCostTypeVisible }

    { 1100528900;1;Field  ;
                Name=CodingSystemCostObject;
                CaptionML=[DEU=VerschlÅsselungssystem Kostenobjekt;
                           ENU=Coding System Cost Object;
                           NLD=Coderingssysteem kostendrager];
                SourceExpr=CodingSystemCostObject;
                Enabled=CodingSystemCostObjectEnable;
                OnValidate=BEGIN
                             IF CodingSystemCostObject <> '' THEN
                               CodingSystem.GET(CodingSystemCostObject);
                           END;

                OnLookup=BEGIN
                           IF PAGE.RUNMODAL(0,CodingSystem) = ACTION::LookupOK THEN
                             CodingSystemCostObject := CodingSystem."Coding System";
                         END;
                          }

  }
  CODE
  {
    VAR
      CodingSystem@1100529406 : Record 11012088;
      FileMgt@1100525006 : Codeunit 419;
      ServiceOrderNo@11012004 : Code[20];
      OriginCode@11012008 : Code[20];
      CodingSystemCostObject@1100528900 : Code[20];
      Text001@1100528601 : TextConst 'DEU=Serviceauftrag %1 nicht vorhanden;ENU=Service Order %1 doesn''t exists;NLD=Serviceorder %1 bestaat niet';
      Text002@1100485006 : TextConst 'DEU=Es sind bereits Budgetzeilen vorhanden. Trotzdem mit dem Importieren fortfahren?;ENU=Budget Lines are already present. Continue import?;NLD=Er zijn reeds begrotingsregels aanwezig, toch doorgaan met importeren?;NOR=Budsjettrader finnes allerede. Fortsett importering?;SVE=Det finns redan budgetrader. FortsÑtta importera?';
      FillCostObjectWith@1100525000 : Option;
      FillCostObjectVisible@1100525003 : Boolean INDATASET;
      DeriveCostTypeFrom@1100525004 : 'CostTypeKPD,CostObjectNav';
      DeriveCostTypeVisible@1100525005 : Boolean INDATASET;
      CodingSystemCostObjectEnable@1100528901 : Boolean INDATASET;
      Text003@1100528600 : TextConst 'DEU=AuswÑhlen Datei...;ENU=Select File...;NLD=Selecteer bestand...';

    PROCEDURE DetermineDefaults@1(lServiceOrderNo@11012000 : Code[20];lOriginCode@11012004 : Code[20]);
    BEGIN
      ServiceOrderNo := lServiceOrderNo;
      OriginCode := lOriginCode;
    END;

    PROCEDURE FinishWizard@1100525000();
    BEGIN
      StartImport;
    END;

    PROCEDURE StartImport@1210190002();
    VAR
      ErrorList@1100529900 : Record 11012051;
    BEGIN
      CheckServiceOrder(ServiceOrderNo);

      IF ServiceOrderBudgetLinesPresent(ServiceOrderNo) THEN
        IF NOT CONFIRM(Text002) THEN
          EXIT;

      ErrorList.DeleteOwnErrorListByErrorType(ErrorList."Source Type"::"Import Budget");
      COMMIT;

      CASE OriginCode OF
        'KPDGWW-XML':
          ImportFromKPDGWWXML;
      END;
      COMMIT;

      ErrorList.DisplayOwnErrorListByErrorType(ErrorList."Source Type"::"Import Budget");
    END;

    PROCEDURE CheckServiceOrder@1100485001(ServiceOrderNo@1100485000 : Code[20]);
    VAR
      ServiceOrder@1100529900 : Record 11012823;
    BEGIN
      IF ServiceOrderNo <> '' THEN BEGIN
        ServiceOrder.SETRANGE("No.",ServiceOrderNo);
        IF ServiceOrder.ISEMPTY THEN
          ERROR(Text001,ServiceOrderNo);
      END;
    END;

    LOCAL PROCEDURE ImportFromKPDGWWXML@1100409001();
    VAR
      JobSetup@1006 : Record 315;
      TempBlob@1100528600 : TEMPORARY Record 99008535;
      FileName@1004 : Text[250];
      StartFileName@1003 : Text[250];
      ImportKPDXMLIntoSOBudget@1100525000 : Codeunit 11012888;
      FileMgt@1100525001 : Codeunit 419;
      ClientTypeManagement@1100528601 : Codeunit 4;
      FilterString@1100525002 : Text;
      InStream@1100528602 : InStream;
      OutStream@1100528603 : OutStream;
      FromFile@1100528604 : Text;
    BEGIN
      IF NOT ClientTypeManagement.IsCommonWebClientType THEN BEGIN
        JobSetup.GET;

        StartFileName := JobSetup."Pathname External Estimates";
        IF StartFileName <> '' THEN BEGIN
          IF StartFileName[STRLEN(StartFileName)] <> '\' THEN
            StartFileName := StartFileName + '\';
          StartFileName := StartFileName + '*.xml';
        END;
        FilterString := FileMgt.GetToFilterText('', '.xml');

        FileName := FileMgt.OpenFileDialog('' ,'' , FilterString);
        IF FileName = '' THEN
          EXIT;
        FileMgt.BLOBImport4PS(TempBlob, FileName, FALSE);
      END ELSE BEGIN
        CLEARLASTERROR;
        IF NOT UPLOADINTOSTREAM(Text003, '', '', FromFile, InStream) THEN
          ERROR(GETLASTERRORTEXT);
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        COPYSTREAM(OutStream, InStream);
      END;

      ImportKPDXMLIntoSOBudget.InitCodeunit(ServiceOrderNo,FillCostObjectWith,DeriveCostTypeFrom);
      ImportKPDXMLIntoSOBudget.ProcessFile(TempBlob);
    END;

    LOCAL PROCEDURE ServiceOrderBudgetLinesPresent@1100529906(ServiceOrderNo@1100529900 : Code[20]) : Boolean;
    VAR
      ServiceOrderBudgetLine@1100529901 : Record 11012875;
    BEGIN
      ServiceOrderBudgetLine.SETRANGE("Service Order No.",ServiceOrderNo);
      IF ServiceOrderBudgetLine.ISEMPTY THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

