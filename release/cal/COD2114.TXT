OBJECT Codeunit 2114 O365 HTML Templ. Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    Permissions=TableData 1062=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      InvoiceNoTxt@1000 : TextConst 'ENU=Invoice No.;NOR=Fakturanr.;SVE=Fakturanr';
      EstimateNoTxt@1014 : TextConst 'ENU=Estimate No.;NOR=Estimat nr.;SVE=Kalkylnr';
      ValidUntilTxt@1001 : TextConst 'ENU=Valid until;NOR=Gyldig til;SVE=Giltigt till';
      TotalTxt@1003 : TextConst '@@@="%1 = Currency Code";ENU=Total %1;NOR=I alt %1;SVE=Total %1';
      YourInvoiceTxt@1002 : TextConst 'ENU=Your Invoice;NOR=Din faktura';
      YourEstimateTxt@1004 : TextConst 'ENU=Your Estimate;NOR=Ditt estimat';
      WantToPayOnlineQst@1005 : TextConst 'ENU=Want to pay online?;NOR=Vil du betale elektronisk?';
      PaymentInvitationTxt@1006 : TextConst 'ENU=You can pay this invoice online. It''s quick and easy.;NOR=Du kan betale fakturaen elektronisk. Det er raskt og enkelt.';
      CompanyInformation@1008 : Record 79;
      CompanyInfoRead@1007 : Boolean;
      EmailSentToTxt@1009 : TextConst 'ENU=This email was sent to;NOR=Denne e-posten ble sendt til';
      FollowOnSocialTxt@1012 : TextConst '@@@=%1 - company name;ENU=Follow %1 on Social;NOR=F›lg %1 p† sosiale medier';
      ThankYouForYourBusinessTxt@1015 : TextConst 'ENU=Thank you for your business.;NOR=Takk for handelen!';
      InvoiceFromTitleTxt@1016 : TextConst '@@@=This is a mail title. %1 - company name;ENU=Invoice from %1;NOR=Faktura fra %1';
      EstimateFromTitleTxt@1017 : TextConst '@@@=This is a mail title. %1 - company name;ENU=Estimate from %1;NOR=Estimat fra %1';

    [External]
    PROCEDURE CreateEmailBodyFromReportSelections@10(ReportSelections@1000 : Record 77;RecordVariant@1001 : Variant;MailTo@1002 : Text;MailText@1005 : Text) OutputFileName : Text[250];
    VAR
      FileMgt@1003 : Codeunit 419;
      HTMLText@1004 : Text;
    BEGIN
      OutputFileName := COPYSTR(FileMgt.ServerTempFileName('html'),1,250);

      HTMLText := CreateHTMLTextFromReportSelections(ReportSelections,RecordVariant,MailTo,MailText);

      SaveHTML(OutputFileName,HTMLText);
    END;

    LOCAL PROCEDURE CreateHTMLTextFromReportSelections@15(ReportSelections@1002 : Record 77;RecordVariant@1000 : Variant;MailTo@1001 : Text;MailText@1003 : Text) HTMLText : Text;
    BEGIN
      WITH ReportSelections DO BEGIN
        HTMLText := GetTemplateContent("Email Body Layout Code");

        CASE Usage OF
          Usage::"S.Invoice":
            FillSalesInvoiceHTML(RecordVariant,HTMLText,MailTo,MailText);
          Usage::"S.Invoice Draft":
            FillSalesDraftInvoiceHTML(RecordVariant,HTMLText,MailTo,MailText);
          Usage::"S.Quote":
            FillSalesEstimateHTML(RecordVariant,HTMLText,MailTo,MailText);
        END;
      END;
    END;

    LOCAL PROCEDURE FillSalesDraftInvoiceHTML@8(SalesHeader@1000 : Record 36;VAR HTMLText@1001 : Text;MailTo@1003 : Text;MailText@1004 : Text);
    VAR
      PaymentServicesSectionHTMLText@1007 : Text;
      PaymentServiceRowHTMLText@1006 : Text;
      SocialNetworksSectionHTMLText@1005 : Text;
      SocialNetworkRowSectionHTMLText@1002 : Text;
    BEGIN
      SliceSalesCoverLetterTemplate(HTMLText,PaymentServicesSectionHTMLText,PaymentServiceRowHTMLText,
        SocialNetworksSectionHTMLText,SocialNetworkRowSectionHTMLText);

      FillCommonParameters(HTMLText,SocialNetworksSectionHTMLText,SocialNetworkRowSectionHTMLText,MailTo,MailText);
      FillParameterValueEncoded(HTMLText,'MailTitle',STRSUBSTNO(InvoiceFromTitleTxt,CompanyInformation.Name));
      FillParameterValueEncoded(HTMLText,'YourDocument',YourInvoiceTxt);

      FillParameterValueEncoded(HTMLText,'DocumentNoLbl',InvoiceNoTxt);
      FillParameterValueEncoded(HTMLText,'DocumentNo',SalesHeader."No.");
      FillParameterValueEncoded(HTMLText,'DateLbl',SalesHeader.FIELDCAPTION("Due Date"));
      FillParameterValueEncoded(HTMLText,'Date',FORMAT(SalesHeader."Due Date"));
      FillParameterValueEncoded(HTMLText,'TotalAmountLbl',STRSUBSTNO(TotalTxt,SalesHeader.GetCurrencySymbol));
      SalesHeader.CALCFIELDS("Amount Including VAT");
      FillParameterValueEncoded(HTMLText,'TotalAmount',FORMAT(SalesHeader."Amount Including VAT"));

      FillSalesDraftInvoicePaymentServices(HTMLText,PaymentServicesSectionHTMLText,PaymentServiceRowHTMLText,SalesHeader);
    END;

    LOCAL PROCEDURE FillSalesInvoiceHTML@22(SalesInvoiceHeader@1000 : Record 112;VAR HTMLText@1001 : Text;MailTo@1003 : Text;MailText@1004 : Text);
    VAR
      PaymentServicesSectionHTMLText@1007 : Text;
      PaymentServiceRowHTMLText@1006 : Text;
      SocialNetworksSectionHTMLText@1005 : Text;
      SocialNetworkRowSectionHTMLText@1002 : Text;
    BEGIN
      SliceSalesCoverLetterTemplate(HTMLText,PaymentServicesSectionHTMLText,PaymentServiceRowHTMLText,
        SocialNetworksSectionHTMLText,SocialNetworkRowSectionHTMLText);

      FillCommonParameters(HTMLText,SocialNetworksSectionHTMLText,SocialNetworkRowSectionHTMLText,MailTo,MailText);
      FillParameterValueEncoded(HTMLText,'MailTitle',STRSUBSTNO(InvoiceFromTitleTxt,CompanyInformation.Name));
      FillParameterValueEncoded(HTMLText,'YourDocument',YourInvoiceTxt);
      FillParameterValueEncoded(HTMLText,'DocumentNoLbl',InvoiceNoTxt);
      FillParameterValueEncoded(HTMLText,'DocumentNo',SalesInvoiceHeader."No.");
      FillParameterValueEncoded(HTMLText,'DateLbl',SalesInvoiceHeader.FIELDCAPTION("Due Date"));
      FillParameterValueEncoded(HTMLText,'Date',FORMAT(SalesInvoiceHeader."Due Date"));
      FillParameterValueEncoded(HTMLText,'TotalAmountLbl',STRSUBSTNO(TotalTxt,SalesInvoiceHeader.GetCurrencySymbol));
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
      FillParameterValueEncoded(HTMLText,'TotalAmount',FORMAT(SalesInvoiceHeader."Amount Including VAT"));

      SalesInvoiceHeader.CALCFIELDS(Cancelled);
      IF NOT SalesInvoiceHeader.Cancelled THEN
        FillSalesInvoicePaymentServices(HTMLText,PaymentServicesSectionHTMLText,PaymentServiceRowHTMLText,SalesInvoiceHeader);
    END;

    LOCAL PROCEDURE FillSalesEstimateHTML@25(SalesHeader@1000 : Record 36;VAR HTMLText@1001 : Text;MailTo@1003 : Text;MailText@1004 : Text);
    VAR
      PaymentServicesSectionHTMLText@1007 : Text;
      PaymentServiceRowHTMLText@1006 : Text;
      SocialNetworksSectionHTMLText@1005 : Text;
      SocialNetworkRowSectionHTMLText@1002 : Text;
    BEGIN
      SliceSalesCoverLetterTemplate(HTMLText,PaymentServicesSectionHTMLText,PaymentServiceRowHTMLText,
        SocialNetworksSectionHTMLText,SocialNetworkRowSectionHTMLText);

      FillCommonParameters(HTMLText,SocialNetworksSectionHTMLText,SocialNetworkRowSectionHTMLText,MailTo,MailText);
      FillParameterValueEncoded(HTMLText,'MailTitle',STRSUBSTNO(EstimateFromTitleTxt,CompanyInformation.Name));
      FillParameterValueEncoded(HTMLText,'YourDocument',YourEstimateTxt);

      FillParameterValueEncoded(HTMLText,'DocumentNoLbl',EstimateNoTxt);
      FillParameterValueEncoded(HTMLText,'DocumentNo',SalesHeader."No.");
      FillParameterValueEncoded(HTMLText,'DateLbl',ValidUntilTxt);
      FillParameterValueEncoded(HTMLText,'Date',FORMAT(SalesHeader."Quote Valid Until Date"));
      FillParameterValueEncoded(HTMLText,'TotalAmountLbl',STRSUBSTNO(TotalTxt,SalesHeader.GetCurrencySymbol));
      SalesHeader.CALCFIELDS("Amount Including VAT");
      FillParameterValueEncoded(HTMLText,'TotalAmount',FORMAT(SalesHeader."Amount Including VAT"));
    END;

    LOCAL PROCEDURE GetCompanyInfo@14();
    BEGIN
      IF CompanyInfoRead THEN
        EXIT;

      CompanyInformation.GET;
      CompanyInfoRead := TRUE;
    END;

    LOCAL PROCEDURE GetCompanyLogoScaledDimensions@19(VAR TempBlob@1001 : Record 99008535;VAR ScaledWidth@1002 : Integer;VAR ScaledHeight@1003 : Integer;ScaleToWidth@1007 : Integer;ScaleToHeight@1008 : Integer);
    VAR
      Image@1004 : DotNet "'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Image";
      InStream@1000 : InStream;
      HorizontalFactor@1009 : Decimal;
      VerticalFactor@1010 : Decimal;
    BEGIN
      IF NOT TempBlob.Blob.HASVALUE THEN
        EXIT;
      TempBlob.Blob.CREATEINSTREAM(InStream);
      Image := Image.FromStream(InStream);

      IF Image.Height <> 0 THEN
        HorizontalFactor := ScaleToHeight / Image.Height;
      IF Image.Width <> 0 THEN
        VerticalFactor := ScaleToWidth / Image.Width;

      IF HorizontalFactor < VerticalFactor THEN
        VerticalFactor := HorizontalFactor
      ELSE
        HorizontalFactor := VerticalFactor;

      ScaledHeight := ROUND(Image.Height * HorizontalFactor,1);
      ScaledWidth := ROUND(Image.Width * VerticalFactor,1);
    END;

    LOCAL PROCEDURE GetCompanyLogoAsTempBlob@23(VAR TempBlob@1001 : Record 99008535) : Text;
    VAR
      CompanyInformation@1000 : Record 79;
    BEGIN
      CompanyInformation.CALCFIELDS(Picture);
      TempBlob.INIT;
      TempBlob.Blob := CompanyInformation.Picture;
      EXIT(TempBlob.GetHTMLImgSrc);
    END;

    [External]
    PROCEDURE GetTemplateContent@2(TemplateCode@1001 : Code[20]) TemplateContent : Text;
    VAR
      O365HTMLTemplate@1003 : Record 2114;
      MediaResources@1004 : Record 2000000182;
      InStream@1000 : InStream;
      Buffer@1002 : Text;
    BEGIN
      O365HTMLTemplate.GET(TemplateCode);
      O365HTMLTemplate.TESTFIELD("Media Resources Ref");
      MediaResources.GET(O365HTMLTemplate."Media Resources Ref");
      MediaResources.CALCFIELDS(Blob);
      MediaResources.Blob.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
      WHILE NOT InStream.EOS DO BEGIN
        InStream.READ(Buffer);
        TemplateContent += Buffer;
      END;
    END;

    LOCAL PROCEDURE GetPaymentServiceLogoAsText@35(PaymentReportingArgument@1000 : Record 1062) : Text;
    VAR
      TempBlob@1001 : Record 99008535;
      O365PaymentServiceLogo@1002 : Record 2119;
      MediaResources@1003 : Record 2000000182;
    BEGIN
      TempBlob.INIT;

      IF O365PaymentServiceLogo.FindO365Logo(PaymentReportingArgument) THEN BEGIN
        MediaResources.GET(O365PaymentServiceLogo."Media Resources Ref");
        MediaResources.CALCFIELDS(Blob);
        TempBlob.Blob := MediaResources.Blob;
      END ELSE BEGIN
        PaymentReportingArgument.CALCFIELDS(Logo);
        TempBlob.Blob := PaymentReportingArgument.Logo;
      END;

      ResizePaymentServiceLogoIfNeeded(TempBlob);

      EXIT(TempBlob.GetHTMLImgSrc);
    END;

    LOCAL PROCEDURE GetPrimaryColorValue@7() : Code[10];
    VAR
      O365BrandColor@1000 : Record 2121;
    BEGIN
      GetCompanyInfo;

      IF CompanyInformation."Brand Color Value" = '' THEN
        IF O365BrandColor.FINDFIRST THEN
          EXIT(O365BrandColor."Color Value");

      EXIT(CompanyInformation."Brand Color Value");
    END;

    LOCAL PROCEDURE GetSocialNetworksHTMLPart@4(SocialNetworksSectionHTMLText@1001 : Text;SocialNetworkRowSectionHTMLText@1002 : Text) SocialNetworksHTMLPart : Text;
    VAR
      O365SocialNetwork@1000 : Record 2122;
    BEGIN
      O365SocialNetwork.SETFILTER(URL,'<>%1','');
      O365SocialNetwork.SETFILTER("Media Resources Ref",'<>%1','');
      IF O365SocialNetwork.FINDFIRST THEN BEGIN
        SocialNetworksHTMLPart := SocialNetworksSectionHTMLText;
        GetCompanyInfo;
        FillParameterValueEncoded(
          SocialNetworksHTMLPart,
          'FollowOnSocial',
          STRSUBSTNO(FollowOnSocialTxt,CompanyInformation.Name));
        FillParameterValue(
          SocialNetworksHTMLPart,
          'CoverLetterSocialRow',
          GetSocialsRowsHTMLPart(O365SocialNetwork,SocialNetworkRowSectionHTMLText));
      END;
    END;

    LOCAL PROCEDURE GetSocialsRowsHTMLPart@44(VAR O365SocialNetwork@1000 : Record 2122;SocialNetworkRowSectionHTMLText@1001 : Text) HTMLText : Text;
    VAR
      MediaResources@1002 : Record 2000000182;
    BEGIN
      REPEAT
        IF MediaResources.GET(O365SocialNetwork."Media Resources Ref") THEN
          HTMLText += GetSocialsRowHTMLPart(O365SocialNetwork,SocialNetworkRowSectionHTMLText);
      UNTIL O365SocialNetwork.NEXT = 0;
    END;

    LOCAL PROCEDURE GetSocialsRowHTMLPart@46(O365SocialNetwork@1001 : Record 2122;SocialNetworkRowSectionHTMLText@1000 : Text) RowHTMLText : Text;
    BEGIN
      RowHTMLText := SocialNetworkRowSectionHTMLText;
      FillParameterValueEncoded(RowHTMLText,'SocialURL',O365SocialNetwork.URL);
      FillParameterValueEncoded(RowHTMLText,'SocialAlt',O365SocialNetwork.Name);
      FillParameterValue(RowHTMLText,'SocialLogo',GetSocialNetworkLogoAsTxt(O365SocialNetwork));
    END;

    LOCAL PROCEDURE GetSocialNetworkLogoAsTxt@9(O365SocialNetwork@1005 : Record 2122) : Text;
    VAR
      TempBlob@1001 : Record 99008535;
      MediaResources@1000 : Record 2000000182;
    BEGIN
      IF NOT MediaResources.GET(O365SocialNetwork."Media Resources Ref") THEN
        EXIT('');

      MediaResources.CALCFIELDS(Blob);
      TempBlob.INIT;
      TempBlob.Blob := MediaResources.Blob;
      EXIT(TempBlob.GetHTMLImgSrc);
    END;

    LOCAL PROCEDURE FillCompanyInfoSection@11(VAR HTMLText@1003 : Text);
    VAR
      FormatAddr@1002 : Codeunit 365;
      CompanyAddr@1001 : ARRAY [8] OF Text[100];
    BEGIN
      GetCompanyInfo;
      FormatAddr.Company(CompanyAddr,CompanyInformation);
      FillParameterValueEncoded(HTMLText,'CompanyName',CompanyInformation.Name);
      FillParameterValueEncoded(HTMLText,'CompanyAddress',MakeFullCompanyAddress(CompanyAddr));
      FillParameterValueEncoded(HTMLText,'CompanyPhoneNo',CompanyInformation."Phone No.");
    END;

    LOCAL PROCEDURE FillCompanyLogo@17(VAR HTMLText@1000 : Text);
    VAR
      TempBlob@1001 : TEMPORARY Record 99008535;
      TempBlobResized@1007 : TEMPORARY Record 99008535;
      ImageHandlerManagement@1004 : Codeunit 5080;
      Width@1003 : Integer;
      Height@1002 : Integer;
      MaxWidth@1005 : Integer;
      MaxHeight@1006 : Integer;
    BEGIN
      GetCompanyLogoAsTempBlob(TempBlob);

      MaxWidth := 246;
      MaxHeight := 80;

      TempBlobResized.COPY(TempBlob);

      IF ImageHandlerManagement.ScaleDownFromBlob(TempBlobResized,MaxWidth,MaxHeight) THEN
        TempBlob.COPY(TempBlobResized);

      OnResizeCompanyLogo(TempBlob);

      GetCompanyLogoScaledDimensions(TempBlob,Width,Height,MaxWidth,MaxHeight);

      FillParameterValue(HTMLText,'CompanyLogo',TempBlob.GetHTMLImgSrc);
      FillParameterValueEncoded(HTMLText,'CompanyLogoWidth',FORMAT(Width,0,9));
      FillParameterValueEncoded(HTMLText,'CompanyLogoHeight',FORMAT(Height,0,9));
    END;

    [External]
    PROCEDURE FillCommonParameters@12(VAR HTMLText@1000 : Text;SocialNetworksSectionHTMLText@1003 : Text;SocialNetworkRowSectionHTMLText@1002 : Text;MailTo@1001 : Text;MailText@1004 : Text);
    BEGIN
      FillCompanyLogo(HTMLText);

      FillParameterValueEncoded(HTMLText,'ThankYouForYourBusiness',ThankYouForYourBusinessTxt);
      FillParameterValue(HTMLText,'SocialNetworks',
        GetSocialNetworksHTMLPart(SocialNetworksSectionHTMLText,SocialNetworkRowSectionHTMLText));

      FillCompanyInfoSection(HTMLText);

      FillParameterValueEncoded(HTMLText,'EmailSentToLbl',EmailSentToTxt);
      FillParameterValueEncoded(HTMLText,'MailTo',MailTo);
      FillParameterValueEncoded(HTMLText,'PrimaryColor',GetPrimaryColorValue);

      FillParameterValue(HTMLText,'MailText',EncodeMessage(MailText,FALSE));
    END;

    [External]
    PROCEDURE FillParameterValueEncoded@6(VAR HTMLText@1000 : Text;ParamenterName@1001 : Text;ParameterValue@1002 : Text);
    VAR
      TypeHelper@1003 : Codeunit 10;
    BEGIN
      FillParameterValue(HTMLText,ParamenterName,TypeHelper.HtmlEncode(ParameterValue));
    END;

    [External]
    PROCEDURE FillParameterValue@33(VAR HTMLText@1000 : Text;ParamenterName@1001 : Text;ParameterValue@1002 : Text);
    BEGIN
      ReplaceHTMLText(HTMLText,MakeParameterNameString(ParamenterName),ParameterValue);
    END;

    LOCAL PROCEDURE FillSalesDraftInvoicePaymentServices@13(VAR HTMLText@1003 : Text;PaymentServicesSectionHTMLText@1005 : Text;PaymentServiceRowHTMLText@1004 : Text;SalesHeader@1000 : Record 36);
    VAR
      PaymentServiceSetup@1001 : Record 1060;
      TempPaymentReportingArgument@1002 : TEMPORARY Record 1062;
    BEGIN
      PaymentServiceSetup.CreateReportingArgs(TempPaymentReportingArgument,SalesHeader);
      FillPaymentServicesPart(HTMLText,TempPaymentReportingArgument,PaymentServicesSectionHTMLText,PaymentServiceRowHTMLText);
    END;

    LOCAL PROCEDURE FillSalesInvoicePaymentServices@5(VAR HTMLText@1003 : Text;PaymentServicesSectionHTMLText@1005 : Text;PaymentServiceRowHTMLText@1004 : Text;SalesInvoiceHeader@1000 : Record 112);
    VAR
      PaymentServiceSetup@1001 : Record 1060;
      TempPaymentReportingArgument@1002 : TEMPORARY Record 1062;
    BEGIN
      PaymentServiceSetup.CreateReportingArgs(TempPaymentReportingArgument,SalesInvoiceHeader);
      FillPaymentServicesPart(HTMLText,TempPaymentReportingArgument,PaymentServicesSectionHTMLText,PaymentServiceRowHTMLText);
    END;

    LOCAL PROCEDURE FillPaymentServicesPart@16(VAR HTMLText@1002 : Text;VAR TempPaymentReportingArgument@1004 : TEMPORARY Record 1062;PaymentServicesSectionHTMLText@1000 : Text;PaymentServiceRowHTMLText@1005 : Text);
    VAR
      PaymentServicesHTMLText@1001 : Text;
      PaymentServicesRowsHTMLText@1003 : Text;
    BEGIN
      IF TempPaymentReportingArgument.FINDSET THEN BEGIN
        PaymentServicesHTMLText := PaymentServicesSectionHTMLText;

        FillParameterValueEncoded(PaymentServicesHTMLText,'WantToPayOnline',WantToPayOnlineQst);
        FillParameterValueEncoded(PaymentServicesHTMLText,'PaymentInvitation',PaymentInvitationTxt);

        REPEAT
          PaymentServicesRowsHTMLText += FillPaymentServiceRowPart(TempPaymentReportingArgument,PaymentServiceRowHTMLText);
        UNTIL TempPaymentReportingArgument.NEXT = 0;

        FillParameterValue(PaymentServicesHTMLText,'PaymentServicesRows',PaymentServicesRowsHTMLText);
        FillParameterValue(HTMLText,'PaymentSevices',PaymentServicesHTMLText);
      END;
    END;

    LOCAL PROCEDURE FillPaymentServiceRowPart@18(VAR TempPaymentReportingArgument@1000 : TEMPORARY Record 1062;PaymentServiceRowHTMLText@1001 : Text) PaymentServiceHTMLText : Text;
    VAR
      PaymentServiceUrl@1003 : Text;
    BEGIN
      PaymentServiceHTMLText := PaymentServiceRowHTMLText;
      PaymentServiceUrl := TempPaymentReportingArgument.GetTargetURL;
      FillParameterValueEncoded(PaymentServiceHTMLText,'PaymentServiceUrl',PaymentServiceUrl);
      FillParameterValueEncoded(PaymentServiceHTMLText,'PaymentServiceAlt',TempPaymentReportingArgument."URL Caption");
      FillParameterValue(PaymentServiceHTMLText,'PaymentServiceLogo',
        GetPaymentServiceLogoAsText(TempPaymentReportingArgument));
      FillParameterValueEncoded(PaymentServiceHTMLText,'PrimaryColor',GetPrimaryColorValue);
    END;

    LOCAL PROCEDURE MakeFullCompanyAddress@21(CompanyAddr@1000 : ARRAY [8] OF Text[100]) FullCompanyAddress : Text;
    VAR
      i@1001 : Integer;
    BEGIN
      FullCompanyAddress := CompanyAddr[2];
      FOR i := 3 TO 8 DO BEGIN
        IF CompanyAddr[i] <> '' THEN
          FullCompanyAddress += ', ' + CompanyAddr[i];
      END;
    END;

    LOCAL PROCEDURE MakeParameterNameString@24(ParameterName@1000 : Text) : Text;
    BEGIN
      EXIT(STRSUBSTNO('<!--%1-->',ParameterName));
    END;

    LOCAL PROCEDURE ReplaceHTMLText@31(VAR HTMLText@1000 : Text;OldValue@1001 : Text;NewValue@1002 : Text);
    VAR
      Regex@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
    BEGIN
      Regex := Regex.Regex(OldValue);
      IF Regex.IsMatch(HTMLText) THEN
        HTMLText := Regex.Replace(HTMLText,NewValue);
    END;

    [Internal]
    PROCEDURE ReplaceBodyFileSendTo@1(BodyFileName@1000 : Text;OldSendTo@1001 : Text;NewSendTo@1002 : Text);
    VAR
      InStream@1005 : InStream;
      BodyFile@1003 : File;
      HTMLText@1006 : Text;
      Buffer@1004 : Text;
    BEGIN
      BodyFile.OPEN(BodyFileName,TEXTENCODING::UTF8);
      BodyFile.CREATEINSTREAM(InStream);
      WHILE NOT InStream.EOS DO BEGIN
        InStream.READ(Buffer);
        HTMLText += Buffer;
      END;
      BodyFile.CLOSE;

      ReplaceHTMLText(HTMLText,OldSendTo,NewSendTo);
      SaveHTML(BodyFileName,HTMLText);
    END;

    [External]
    PROCEDURE SaveHTML@3(OutputFileName@1004 : Text;HTMLText@1000 : Text);
    VAR
      OutStream@1001 : OutStream;
      OutputFile@1002 : File;
    BEGIN
      OutputFile.WRITEMODE(TRUE);
      OutputFile.CREATE(OutputFileName,TEXTENCODING::UTF8);
      OutputFile.CREATEOUTSTREAM(OutStream);
      OutStream.WRITE(HTMLText,STRLEN(HTMLText));
      OutputFile.CLOSE;
    END;

    LOCAL PROCEDURE SliceSalesCoverLetterTemplate@20(VAR HTMLText@1000 : Text;VAR PaymentServicesSectionHTMLText@1005 : Text;VAR PaymentServiceRowHTMLText@1004 : Text;VAR SocialNetworksSectionHTMLText@1003 : Text;VAR SocialNetworkRowSectionHTMLText@1001 : Text);
    BEGIN
      SliceSection(HTMLText,PaymentServicesSectionHTMLText,'PaymentSevicesSection','PaymentSevices');
      SliceSection(PaymentServicesSectionHTMLText,PaymentServiceRowHTMLText,'PaymentServiceRowSection','PaymentServicesRows');
      SliceSection(HTMLText,SocialNetworksSectionHTMLText,'SocialNetworksSection','SocialNetworks');
      SliceSection(SocialNetworksSectionHTMLText,SocialNetworkRowSectionHTMLText,'SocialNetworkRowSection','CoverLetterSocialRow');
    END;

    LOCAL PROCEDURE SliceSection@28(VAR HTMLText@1000 : Text;VAR SectionHTMLText@1001 : Text;SectionName@1002 : Text;SectionHolderName@1003 : Text);
    VAR
      StartPosition@1004 : Integer;
      EndPosition@1005 : Integer;
      StartSectionParameter@1006 : Text;
      EndSectionParameter@1007 : Text;
      SectionHolderParameter@1008 : Text;
    BEGIN
      StartSectionParameter := MakeParameterNameString(STRSUBSTNO('%1.Start',SectionName));
      EndSectionParameter := MakeParameterNameString(STRSUBSTNO('%1.End',SectionName));
      SectionHolderParameter := MakeParameterNameString(SectionHolderName);

      StartPosition := STRPOS(HTMLText,StartSectionParameter);
      EndPosition := STRPOS(HTMLText,EndSectionParameter);

      SectionHTMLText :=
        COPYSTR(
          HTMLText,
          StartPosition + STRLEN(StartSectionParameter) + 1,
          EndPosition - StartPosition - STRLEN(StartSectionParameter) - 1);

      HTMLText :=
        COPYSTR(HTMLText,1,StartPosition - 1) +
        SectionHolderParameter +
        COPYSTR(HTMLText,EndPosition + STRLEN(EndSectionParameter));
    END;

    LOCAL PROCEDURE EncodeMessage@40(Message@1000 : Text;CarriageReturn@1001 : Boolean) : Text;
    VAR
      TypeHelper@1004 : Codeunit 10;
      String@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      NewLineChar@1005 : Char;
      CarriageReturnChar@1006 : Char;
    BEGIN
      IF Message = '' THEN
        EXIT('');

      String := TypeHelper.HtmlEncode(Message);

      NewLineChar := 10;
      CarriageReturnChar := 13;
      IF CarriageReturn THEN
        EXIT(String.Replace(FORMAT(CarriageReturnChar) + FORMAT(NewLineChar),'<br />'));
      EXIT(String.Replace(FORMAT(NewLineChar),'<br />'));
    END;

    [Integration]
    LOCAL PROCEDURE OnResizeCompanyLogo@26(VAR TempBlob@1000 : TEMPORARY Record 99008535);
    BEGIN
    END;

    LOCAL PROCEDURE ResizePaymentServiceLogoIfNeeded@100(VAR TempBlob@1000 : TEMPORARY Record 99008535);
    VAR
      TempLocalTempBlob@1002 : TEMPORARY Record 99008535;
      ImageHandlerManagement@1001 : Codeunit 5080;
      ImageWidth@1003 : Integer;
      ImageHeight@1004 : Integer;
      AdvisedImageHeightPixels@1005 : Integer;
    BEGIN
      AdvisedImageHeightPixels := 35;

      TempLocalTempBlob.COPY(TempBlob);

      IF ImageHandlerManagement.GetImageSizeBlob(TempLocalTempBlob,ImageWidth,ImageHeight) THEN
        IF ImageHeight > AdvisedImageHeightPixels THEN
          IF ImageHandlerManagement.ScaleDownFromBlob(TempLocalTempBlob,ImageWidth,AdvisedImageHeightPixels) THEN
            TempBlob.COPY(TempLocalTempBlob);
    END;

    BEGIN
    END.
  }
}

