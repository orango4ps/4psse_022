OBJECT Codeunit 6085616 Export Doc. Cat. Config. - DC
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW13.70.00.5.00.05;
  }
  PROPERTIES
  {
    OnRun=VAR
            Window@1160040005 : Dialog;
            CODC@1160040002 : Codeunit 6085617;
            CategoriesExported@6085573 : Integer;
          BEGIN
            Window.OPEN(Text001);

            CODC.IsCompanyActive(TRUE);
            ContiniaCompanySetup.GET;
            ContiniaCompanySetup.TESTFIELD("Company Code");

            CategoriesExported := ExportAllCategories;

            IF CategoriesExported > 0 THEN
              MESSAGE(Text002,CategoriesExported)
            ELSE
              MESSAGE(Text003);

            Window.CLOSE;
          END;

  }
  CODE
  {
    VAR
      Text001@1160040002 : TextConst 'DEU=Konfigurationsdateien werden exportiert ...;ENU=Exporting Configuration Files...;NLD=Configuratiebestanden exporteren..';
      Text002@1160040001 : TextConst 'DEU=%1 Konfigurationsdateien wurden exportiert.;ENU=%1 configuration files were exported.;NLD=%1 configuratiebestanden zijn geexporteerd';
      Text003@1160040000 : TextConst 'DEU=Es wurden keine Konfigurationsdateien exportiert.;ENU=No configuration files were exported.;NLD=Er zijn geen configuratiebestanden geexporteerd';
      Text004@6085573 : TextConst 'DEU=In Konflikt stehende Verbindungsendpunkt-Konfiguration mit demselben Benutzernamen (%1) in Datei %2 gefunden.;ENU=Conflicting Connection Endpoint Configuration found with same username (%1) in file %2.;NLD=Conflicterende Connection Endpoint configuratie gevonden met dezelfde gebruikersnaam (%1) in bestand %2.';
      ContiniaCompanySetup@6085574 : Record 6192773;

    PROCEDURE ExportAllCategories@6085574() : Integer;
    VAR
      DCSetup@6085574 : Record 6085573;
      DocCat@6085573 : Record 6085575;
      CODC@6085577 : Codeunit 6085617;
      FilesExported@6085576 : Boolean;
      CategoriesExported@6085575 : Integer;
    BEGIN
      DCSetup.GET;
      DocCat.SETRANGE("Drag and Drop Category",FALSE);
      IF DocCat.FINDSET(TRUE) THEN
        REPEAT
          IF DCSetup."Use Cloud OCR" THEN BEGIN
            FilesExported := CODC.ExportConfigurationToCloud(DocCat);
            IF FilesExported THEN BEGIN
              DocCat."Exported to Cloud OCR" := TRUE;
              DocCat.MODIFY;
            END;
            DeleteConfigFiles(DocCat);
          END ELSE
            FilesExported := ExportOnPrem(DocCat);

          IF FilesExported THEN
            CategoriesExported += 1;
        UNTIL DocCat.NEXT = 0;

      EXIT(CategoriesExported);
    END;

    PROCEDURE ExportOnPrem@1000000000(DocCat@1160040000 : Record 6085575) : Boolean;
    VAR
      DCSetup@1000000005 : Record 6085573;
      Language@1000000002 : Record 6085576;
      ConnEndpoint@161024013 : Record 6085620;
      CryptMgt@1160040002 : Codeunit 6085599;
      XmlLib@1000000000 : Codeunit 6085573;
      XmlDoc@6085573 : Codeunit 6192800;
      DocumentElement@1000 : Codeunit 6192801;
      ProcessingNode@6085574 : Codeunit 6192801;
      PDFNode@1000000009 : Codeunit 6192801;
      TiffNode@1160040001 : Codeunit 6192801;
      EmailNode@161024012 : Codeunit 6192801;
      WordNode@6085575 : Codeunit 6192801;
      Node@1000000008 : Codeunit 6192801;
      LanguagesNode@1000000003 : Codeunit 6192801;
      LanguageNode@1000000004 : Codeunit 6192801;
      DocSeparatorsNode@1000000011 : Codeunit 6192801;
      DocSeparatorNode@1000000010 : Codeunit 6192801;
    BEGIN
      DCSetup.GET;

      XmlLib.CreateXmlDOM(XmlDoc,'Config');

      XmlDoc.GetDocumentElement(DocumentElement);

      XmlLib.CreateXmlNode(DocumentElement,'Description',COMPANYNAME + ' - ' + DocCat.Description,Node);
      XmlLib.CreateXmlNode(DocumentElement,'Processing','',ProcessingNode);
      XmlLib.CreateXmlNode(ProcessingNode,'MaxNoOfPagesToOCR',FORMAT(DocCat."Max no. of Pages to Process"),Node);
      XmlLib.CreateXmlNode(DocumentElement,'PDFExport','',PDFNode);
      XmlLib.CreateXmlNode(PDFNode,'Action','KeepOrCreate',Node);
      XmlLib.CreateXmlNode(PDFNode,'Format','PDFA',Node);

      XmlLib.CreateXmlNode(DocumentElement,'TiffExport','',TiffNode);
      CASE DocCat."TIFF Image Colour Mode" OF
        DocCat."TIFF Image Colour Mode"::"Black & White":
          XmlLib.CreateXmlNode(TiffNode,'ColorMode','BlackWhite',Node);
        DocCat."TIFF Image Colour Mode"::Gray:
          XmlLib.CreateXmlNode(TiffNode,'ColorMode','Gray',Node);
        DocCat."TIFF Image Colour Mode"::Colour:
          XmlLib.CreateXmlNode(TiffNode,'ColorMode','Color',Node);
      END;
      XmlLib.CreateXmlNode(TiffNode,'Resolution',FORMAT(DocCat."TIFF Image Resolution"),Node);

      XmlLib.CreateXmlNode(DocumentElement,'WordExport','',WordNode);
      XmlLib.CreateXmlNode(WordNode,'ExportCodepage',FORMAT(DocCat."OCR Export Codepage"),Node);
      XmlLib.CreateXmlNode(DocumentElement,'Languages','',LanguagesNode);

      Language.SETRANGE("Document Category Code",DocCat.Code);
      IF Language.FINDSET THEN
        REPEAT
          XmlLib.CreateXmlNode(LanguagesNode,'Language',Language."Language Code",LanguageNode);
        UNTIL Language.NEXT = 0;

      IF ConnEndpoint.GET(DocCat."E-Mail Connection Endpoint") THEN BEGIN
        ValidateEndpointConfig(ConnEndpoint,DocCat);

        IF ConnEndpoint.Protocol = ConnEndpoint.Protocol::IMAP THEN BEGIN
          ConnEndpoint.TESTFIELD("Protocol Port");
          ConnEndpoint.TESTFIELD("Server Address");
          ConnEndpoint.TESTFIELD(Username);
          ConnEndpoint.TESTFIELD(Password);
        END;

        XmlLib.CreateXmlNode(DocumentElement,'Email','',EmailNode);
        XmlLib.CreateXmlNode(EmailNode,'Protocol',FORMAT(ConnEndpoint.Protocol),Node);
        XmlLib.CreateXmlNode(EmailNode,'ProtocolPort',FORMAT(ConnEndpoint."Protocol Port"),Node);
        XmlLib.CreateXmlNode(EmailNode,'ServerAddress',ConnEndpoint."Server Address",Node);
        XmlLib.CreateXmlNode(EmailNode,'Username',ConnEndpoint.Username,Node);
        IF CryptMgt.UseSecurityCert THEN BEGIN
          XmlLib.CreateXmlNode(EmailNode,'Password',CryptMgt.EncryptText(ConnEndpoint.Password),Node);
          XmlLib.CreateXmlNode(EmailNode,'PasswordEncrypted',XmlLib.Bool2Text(TRUE),Node);
        END ELSE BEGIN
          XmlLib.CreateXmlNode(EmailNode,'Password',CryptMgt.EncryptTextBasic(ConnEndpoint.Password),Node);
          XmlLib.CreateXmlNode(EmailNode,'PasswordEncryption','Basic',Node);
        END;
        XmlLib.CreateXmlNode(EmailNode,'DeleteAfterDownload',XmlLib.Bool2Text(ConnEndpoint."Delete After Download"),Node);
        XmlLib.CreateXmlNode(EmailNode,'Archive',XmlLib.Bool2Text(DocCat."Archive E-mails on Document"),Node);
      END;

      XmlDoc.Save(GetConfigFilePath(DocCat,TRUE));
      CLEAR(XmlDoc);
      EXIT(TRUE);
    END;

    PROCEDURE DeleteConfigFiles@1160040001(DocCat@1160040000 : Record 6085575);
    VAR
      FileSysMgt@1160040002 : Codeunit 6085584;
      Path@1160040001 : Text[1024];
    BEGIN
      IF DocCat."Process PDF Files" OR DocCat."Process Scanned Files" THEN BEGIN
        Path := DocCat.GetCategoryPath(1);

        IF Path <> '' THEN
          FileSysMgt.DeleteFile(Path + '\config.xml',TRUE);
      END;
    END;

    PROCEDURE GetConfigFilePath@1160040000(DocCat@1160040002 : Record 6085575;ToExport@1160040003 : Boolean) : Text[1024];
    VAR
      FileSysMgt@1160040001 : Codeunit 6085584;
      Path@1160040004 : Text[1024];
    BEGIN
      Path := DocCat.GetCategoryPath(1);

      IF NOT FileSysMgt.DirectoryExists(Path) THEN
        IF ToExport THEN
          FileSysMgt.CreateDirectory(Path)
        ELSE
          EXIT;

      EXIT(Path + '\config.xml');
    END;

    PROCEDURE ValidateEndpointConfig@1160040002(ConnEndpoint@1160040013 : Record 6085620;DocCat@1160040000 : Record 6085575);
    VAR
      DCSetup@1160040001 : Record 6085573;
      FileSysMgt@1160040004 : Codeunit 6085584;
      XmlLib@1160040010 : Codeunit 6085573;
      XmlDoc@6085573 : Codeunit 6192800;
      XmlNodeList@1000 : Codeunit 6192802;
      XmlNode@1001 : Codeunit 6192801;
      Path@1160040014 : Text[250];
      ConfigFilePath@1160040008 : Text[250];
      ConfigFilePathLocal@1160040016 : Text[250];
      Directories@1160040005 : ARRAY [10000] OF Text[250];
      Username@1160040012 : Text[80];
      DirectoryCount@1160040006 : Integer;
      i@1160040007 : Integer;
    BEGIN
      IF ConnEndpoint.Protocol <> ConnEndpoint.Protocol::IMAP THEN
        EXIT;

      DCSetup.GET;

      DirectoryCount := FileSysMgt.GetDirectories(DCSetup."PDF File Path for OCR",'',Directories);
      FOR i := 1 TO DirectoryCount DO BEGIN
        ConfigFilePath := STRSUBSTNO('%1\%2',Directories[i],'config.xml');
        ConfigFilePathLocal := GetConfigFilePath(DocCat,FALSE);
        IF (FileSysMgt.FileExists(ConfigFilePath)) AND
           (ConfigFilePath <> ConfigFilePathLocal)
        THEN BEGIN
          XmlDoc.Load(ConfigFilePath);
          IF XmlDoc.SelectNodes(XmlNodeList,'Config/Email') THEN
            IF XmlNodeList.GetItem(XmlNode,0) THEN
              Username := XmlLib.GetNodeText(XmlNode,'Username');
          IF Username <> '' THEN
            IF Username = ConnEndpoint.Username THEN
              ERROR(Text004,Username,ConfigFilePath);
        END;
      END;
      CLEAR(XmlDoc);
    END;

    BEGIN
    END.
  }
}

