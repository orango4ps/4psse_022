OBJECT Report 11012592 Archive Plant Locations
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Archivieren Werkzeuglagerorte;
               ENU=Archive Plant Locations;
               NLD=Archiveren materieellocaties;
               NOR=Arkiver maskinplasseringer;
               SVE=Arkivera Maskinplatser];
    ProcessingOnly=Yes;
    UsageCategory=Tasks;
  }
  DATASET
  {
    { 9306;    ;DataItem;                    ;
               DataItemTable=Table11012554;
               OnPreDataItem=BEGIN
                               ArchiveBln := ProcessType IN [ProcessType::"Archive Only", ProcessType::"Archive and Delete"];
                               DeleteBln := ProcessType IN [ProcessType::"Delete only", ProcessType::"Archive and Delete"];
                               IF ProcessType = ProcessType::"Archive Only" THEN
                                 SETRANGE(Status, Status::Archive)
                               ELSE
                                 SETFILTER(Status, '%1..', Status::Archive);

                               PlantLocRec.COPYFILTERS("Plant Location");
                               IF NOT PlantLocRec.FINDFIRST THEN
                                 MESSAGE(Text000)
                               ELSE
                                 IF DeleteBln THEN BEGIN
                                   //* Verwijderen laatste materieelpost niet toegestaan (ivm bepalen eerste vrije postnummer), want dan worden
                                   //* volgnummers opnieuw gebruikt bij andere materieellocaties.
                                   //* Als die projecten dan later gearchiveerd worden krijg je melding 'Volgnummer bestaat al'.
                                   IF PlantLedgerRec.FINDLAST THEN BEGIN
                                     PlantLocLastLedgerEntry := PlantLedgerRec."Plant Location";

                                     PlantLocRec.FILTERGROUP(10);
                                     PlantLocRec.SETRANGE(Code, PlantLocLastLedgerEntry);
                                     PlantLocRec.FILTERGROUP(0);
                                     IF NOT PlantLocRec.ISEMPTY THEN
                                       ERROR(Text004, PlantLocRec.Code);
                                   END;
                                 END;

                               PlantSetup.GET;
                               PlantSetup.TESTFIELD("Archive Company");

                               Window.OPEN(Text001 +
                                           Text002);

                               IF ArchiveBln THEN
                                 ArchiveCommonData;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF ArchiveBln AND (Status = Status::Archive) THEN
                                    ArchivePlantLocation;

                                  IF DeleteBln THEN
                                    DeletePlantLocation;
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE;
                              END;

               ReqFilterFields=Code }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1100485000;2;Field  ;
                  CaptionML=[DEU=Verarbeitungstyp;
                             ENU=Process Type;
                             NLD=Soort actie;
                             NOR=Prosesstype;
                             SVE=Processtyp];
                  OptionCaptionML=[DEU=Nur archivieren,Archivieren und l”schen,Nur l”schen;
                                   ENU=Archive Only,Archive and Delete,Delete only;
                                   NLD=Alleen archiveren,Archiveren en verwijderen,Alleen verwijderen;
                                   NOR=Kun arkiver,Arkiver og ta bort,Kun ta bort;
                                   SVE=Endast arkivera,Arkivera och ta bort,Endast ta bort];
                  SourceExpr=ProcessType }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@11012064 : TextConst 'DEU=Es sind keine Werkzeuglagerorte mit Status ''Archivieren'' vorhanden.;ENU=There are no Plant Locations with Status Archive;NLD=Er zijn geen materieellocaties met status archiveren;NOR=Det finnes ingen maskinplasseringer med status Arkiv;SVE=Det finns inga Maskinsplatser med status Arkiv';
      Text001@11012065 : TextConst 'DEU=Werkzeuglagerort      #1##########\\;ENU=Plant Location        #1##########\\;NLD=Materieellocatie      #1##########\\;NOR=Maskinutplassering        #1##########\\;SVE=Maskinutplacering        #1##########\\';
      Text002@11012066 : TextConst 'DEU=Besch„ftigt mit Tabelle       #2#################### @3@@@@@@@@@@@@@;ENU=Busy With Table       #2#################### @3@@@@@@@@@@@@@;NLD=Bezig met tabel       #2#################### @3@@@@@@@@@@@@@;NOR=Opptatt med tabell       #2#################### @3@@@@@@@@@@@@@;SVE=Upptagen med tabell   #2#################### @3@@@@@@@@@@@@@';
      PlantSetup@1100485005 : Record 11012550;
      PlantLocRec@1100485012 : Record 11012554;
      PlantLocRec2@11012002 : Record 11012554;
      PlantTypeRec@1100485000 : Record 11012551;
      PlantTypeRec2@1100485002 : Record 11012551;
      PlantNumberRec@1100485001 : Record 11012552;
      PlantNumberRec2@1100485003 : Record 11012552;
      PlantLedgerRec@1100485006 : Record 11012572;
      PlantLedgerRec2@1100485007 : Record 11012572;
      PlantLocAddressRec@1100485009 : Record 11012590;
      PlantLocAddressRec2@1100485010 : Record 11012590;
      Window@11012061 : Dialog;
      LineCount@11012062 : Integer;
      NoOfRecords@11012063 : Integer;
      Text003@1100485008 : TextConst 'DEU=Werkzeuglagerort %1 bereits in Archivbetrieb vorhanden;ENU=Plant Location %1 already exists in Archive Company;NLD=Materieellocatie %1 bestaat al in archiefbedrijf;NOR=Maskinlokasjonen %1 finnes allerede i arkivert selskap;SVE=Maskinutplaceringen %1 finns redan i arkiverat f”retag';
      Text004@1100485004 : TextConst
        'DEU="Der letzte Werkzeugposten ist ein Posten des Projekts ''%1''; das L”schen des letzten Werkzeugposten ist nicht zul„ssig.\Warten Sie bis ein Projektposten auf ein anderes Projekt gebucht worden ist."',
        'ENU=The last PLant Ledger Entry is an Entry of Plant Location ''%1'', delete of the last Plant Ledger Entry is not allowed.\Wait until there is posted a Project Entry on another project.',
        'NLD=De laatste materieelpost is een post van project ''%1'', het verwijderen van de laatste materieelpost is niet toegestaan.\Wacht tot er een projectpost op een ander project is geboekt.',
        'NOR=Den forrige maskintransaksjonen er en transaksjon for maskinlokasjonen ''%1''. Det er ikke tillatt † fjerne den siste maskintransaksjonen.\\Vent til en prosjekttransaksjon bokf›res i et annet prosjekt.',
        'SVE=Den senaste reskontratransaktionen f”r Maskinen „r en transaktion f”r Maskinsplatsen ''%1''. Det „r inte till†tet att ta bort den senaste reskontratransaktionen f”r Maskinen.\\V„nta tills en projekttransaktion bokf”rs i ett annat projekt.';
      Text005@1100485011 : TextConst 'DEU=L”schen;ENU=Delete;NLD=Verwijderen;NOR=Fjern;SVE=Ta bort';
      PlantLocLastLedgerEntry@1100485013 : Code[20];
      ProcessType@1100485014 : 'Archive Only,Archive and Delete,Delete only';
      ArchiveBln@1100485015 : Boolean;
      DeleteBln@1100485016 : Boolean;
      DocumentLinkManagement@1100528700 : Codeunit 11012401;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;

    PROCEDURE ArchiveCommonData@1();
    VAR
      DocumentLink@1100528700 : Record 11012747;
      RecRef@1100528701 : RecordRef;
    BEGIN
      LineCount := 0;
      PlantTypeRec2.CHANGECOMPANY(PlantSetup."Archive Company");
      IF PlantTypeRec.FINDSET THEN BEGIN
        Window.UPDATE(2, PlantTypeRec.TABLECAPTION);
        NoOfRecords := PlantTypeRec.COUNT;
        REPEAT
          Window.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
          PlantTypeRec2 := PlantTypeRec;
          IF NOT PlantTypeRec2.FIND('=') THEN
            PlantTypeRec2.INSERT;

          IF FPSLicenseManagement.LicenseAndReadPermissionForTable(DocumentLink) THEN BEGIN
            RecRef.GETTABLE(PlantTypeRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, PlantSetup."Archive Company", DeleteBln);
          END;
        UNTIL PlantTypeRec.NEXT = 0;
        Window.UPDATE(3,0);
      END;

      LineCount := 0;
      PlantNumberRec2.CHANGECOMPANY(PlantSetup."Archive Company");
      IF PlantNumberRec.FINDSET THEN BEGIN
        Window.UPDATE(2, PlantNumberRec.TABLECAPTION);
        NoOfRecords := PlantNumberRec.COUNT;
        REPEAT
          Window.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
          PlantNumberRec2 := PlantNumberRec;
          IF NOT PlantNumberRec2.FIND('=') THEN
            PlantNumberRec2.INSERT;

          IF FPSLicenseManagement.LicenseAndReadPermissionForTable(DocumentLink) THEN BEGIN
            RecRef.GETTABLE(PlantNumberRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, PlantSetup."Archive Company", DeleteBln);
          END;
        UNTIL PlantNumberRec.NEXT = 0;
        Window.UPDATE(3,0);
      END;
    END;

    PROCEDURE ArchivePlantLocation@2();
    VAR
      DocumentLink@1100528701 : Record 11012747;
      RecRef@1100528700 : RecordRef;
    BEGIN
      Window.UPDATE(1,"Plant Location".Code);

      "Plant Location".Status := "Plant Location".Status::Archived;
      "Plant Location".MODIFY;

      PlantLocRec2.CHANGECOMPANY(PlantSetup."Archive Company");
      PlantLocRec2 := "Plant Location";
      IF PlantLocRec2.FIND('=') THEN
        ERROR(Text003,"Plant Location".Code)
      ELSE
        PlantLocRec2.INSERT;

      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(DocumentLink) THEN BEGIN
        RecRef.GETTABLE("Plant Location");
        DocumentLinkManagement.ArchiveDocumentLinks(RecRef, PlantSetup."Archive Company", DeleteBln);
      END;

      LineCount := 0;
      PlantLocAddressRec2.CHANGECOMPANY(PlantSetup."Archive Company");
      PlantLocAddressRec.SETRANGE(Location,"Plant Location".Code);
      IF PlantLocAddressRec.FINDSET THEN BEGIN
        Window.UPDATE(2, PlantLocAddressRec.TABLECAPTION);
        NoOfRecords := PlantLocAddressRec.COUNT;
        REPEAT
          Window.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
          PlantLocAddressRec2 := PlantLocAddressRec;
          PlantLocAddressRec2.INSERT;

          IF FPSLicenseManagement.LicenseAndReadPermissionForTable(DocumentLink) THEN BEGIN
            RecRef.GETTABLE(PlantLocAddressRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, PlantSetup."Archive Company", DeleteBln);
          END;
        UNTIL PlantLocAddressRec.NEXT = 0;
        Window.UPDATE(3,0);
      END;

      LineCount := 0;
      PlantLedgerRec2.CHANGECOMPANY(PlantSetup."Archive Company");
      PlantLedgerRec.SETCURRENTKEY("Plant Location");
      PlantLedgerRec.SETRANGE("Plant Location","Plant Location".Code);
      IF PlantLedgerRec.FINDSET THEN BEGIN
        Window.UPDATE(2, PlantLedgerRec.TABLECAPTION);
        NoOfRecords := PlantLedgerRec.COUNT;
        REPEAT
          Window.UPDATE(3,ROUND(LineCount / NoOfRecords * 10000,1));
          LineCount := LineCount + 1;
          PlantLedgerRec2 := PlantLedgerRec;
          PlantLedgerRec2.INSERT;

          IF FPSLicenseManagement.LicenseAndReadPermissionForTable(DocumentLink) THEN BEGIN
            RecRef.GETTABLE(PlantLedgerRec);
            DocumentLinkManagement.ArchiveDocumentLinks(RecRef, PlantSetup."Archive Company", DeleteBln);
          END;
        UNTIL PlantLedgerRec.NEXT = 0;
        Window.UPDATE(3,0);
      END;

      //DP01202
      ArchiveLocationPlantInventoryCourse;
      ArchiveLocationRentalRates;
      ArchiveLocationRentalDiscounts;
      ArchiveLocationRentalQuantityDiscounts;
      ArchiveLocationRateCodes;
      ArchiveLocationStandardCostLines;
      ArchiveLocationRentalFreeOrders;
      ArchiveLocationExitOrders;
      ArchiveLocationComplaints;
    END;

    LOCAL PROCEDURE ArchiveLocationPlantInventoryCourse@1100529000();
    VAR
      PlantInventory@1100529000 : Record 11012555;
      PlantInventoryArch@1100529001 : Record 11012555;
      Counter@1100529002 : Integer;
    BEGIN
      PlantInventoryArch.CHANGECOMPANY(PlantSetup."Archive Company");
      PlantInventory.SETCURRENTKEY(Location);
      PlantInventory.SETRANGE(Location, "Plant Location".Code);
      IF PlantInventory.FINDSET THEN BEGIN
        Window.UPDATE(2, PlantInventory.TABLECAPTION);
        NoOfRecords := PlantInventory.COUNT;
        REPEAT
          Counter := Counter + 1;
          Window.UPDATE(3,ROUND(Counter / NoOfRecords * 10000,1));
          PlantInventoryArch := PlantInventory;
          PlantInventoryArch.INSERT;
        UNTIL PlantInventory.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ArchiveLocationRentalRates@1100529004();
    VAR
      LocationRate@1100529000 : Record 11012583;
      LocationRateArch@1100529001 : Record 11012583;
      Counter@1100529002 : Integer;
    BEGIN
      //All Rate Types (Rental, Sales/BuyBack and Hour Rates)
      LocationRateArch.CHANGECOMPANY(PlantSetup."Archive Company");
      LocationRate.SETRANGE(Location, "Plant Location".Code);
      IF LocationRate.FINDSET THEN BEGIN
        Window.UPDATE(2, LocationRate.TABLECAPTION);
        NoOfRecords := LocationRate.COUNT;
        REPEAT
          Counter := Counter + 1;
          Window.UPDATE(3,ROUND(Counter / NoOfRecords * 10000,1));
          LocationRateArch := LocationRate;
          LocationRateArch.INSERT;
        UNTIL LocationRate.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ArchiveLocationRentalDiscounts@1100529006();
    VAR
      RentalDiscount@1100529000 : Record 11012544;
      RentalDiscountArch@1100529001 : Record 11012544;
      Counter@1100529002 : Integer;
    BEGIN
      RentalDiscountArch.CHANGECOMPANY(PlantSetup."Archive Company");
      RentalDiscount.SETRANGE("Customer Discount Group", '');
      RentalDiscount.SETRANGE(Location,"Plant Location".Code);
      RentalDiscount.SETRANGE(Level, RentalDiscount.Level::Location, RentalDiscount.Level::LocationPlantNo);
      IF RentalDiscount.FINDSET THEN BEGIN
        Window.UPDATE(2, RentalDiscount.TABLECAPTION);
        NoOfRecords := RentalDiscount.COUNT;
        REPEAT
          Counter := Counter + 1;
          Window.UPDATE(3,ROUND(Counter / NoOfRecords * 10000,1));
          RentalDiscountArch := RentalDiscount;
          RentalDiscountArch.INSERT;
        UNTIL RentalDiscount.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ArchiveLocationRentalQuantityDiscounts@1100529001();
    VAR
      RentalQuantityDiscount@1100529000 : Record 11072669;
      RentalQuantityDiscountArch@1100529001 : Record 11072669;
      Counter@1100529002 : Integer;
    BEGIN
      RentalQuantityDiscountArch.CHANGECOMPANY(PlantSetup."Archive Company");
      RentalQuantityDiscount.SETRANGE("Customer Discount Group", '');
      RentalQuantityDiscount.SETRANGE(Location,"Plant Location".Code);
      RentalQuantityDiscount.SETRANGE(Level, RentalQuantityDiscount.Level::Location, RentalQuantityDiscount.Level::LocationPlantNo);
      IF RentalQuantityDiscount.FINDSET THEN BEGIN
        Window.UPDATE(2, RentalQuantityDiscount.TABLECAPTION);
        NoOfRecords := RentalQuantityDiscount.COUNT;
        REPEAT
          Counter := Counter + 1;
          Window.UPDATE(3,ROUND(Counter / NoOfRecords * 10000,1));
          RentalQuantityDiscountArch := RentalQuantityDiscount;
          RentalQuantityDiscountArch.INSERT;
        UNTIL RentalQuantityDiscount.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ArchiveLocationRateCodes@1100529009();
    VAR
      PlantLocationRateCode@1100529000 : Record 11020551;
      PlantLocationRateCodeArch@1100529001 : Record 11020551;
      Counter@1100529002 : Integer;
    BEGIN
      PlantLocationRateCodeArch.CHANGECOMPANY(PlantSetup."Archive Company");
      PlantLocationRateCode.SETRANGE(Location, "Plant Location".Code);
      IF PlantLocationRateCode.FINDSET THEN BEGIN
        Window.UPDATE(2, PlantLocationRateCode.TABLECAPTION);
        NoOfRecords := PlantLocationRateCode.COUNT;
        REPEAT
          Counter := Counter + 1;
          Window.UPDATE(3,ROUND(Counter / NoOfRecords * 10000,1));
          PlantLocationRateCodeArch := PlantLocationRateCode;
          PlantLocationRateCodeArch.INSERT;
        UNTIL PlantLocationRateCode.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ArchiveLocationStandardCostLines@1100529012();
    VAR
      PlantCostLine@1100529000 : Record 11012591;
      PlantCostLineArch@1100529001 : Record 11012591;
      Counter@1100529002 : Integer;
    BEGIN
      PlantCostLineArch.CHANGECOMPANY(PlantSetup."Archive Company");
      PlantCostLine.SETRANGE("Cost Level", PlantCostLine."Cost Level"::Location);
      PlantCostLine.SETRANGE(Code, "Plant Location".Code);
      IF PlantCostLine.FINDSET THEN BEGIN
        Window.UPDATE(2, PlantCostLine.TABLECAPTION);
        NoOfRecords := PlantCostLine.COUNT;
        REPEAT
          Counter := Counter + 1;
          Window.UPDATE(3,ROUND(Counter / NoOfRecords * 10000,1));
          PlantCostLineArch := PlantCostLine;
          PlantCostLineArch.INSERT;
        UNTIL PlantCostLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ArchiveLocationRentalFreeOrders@1100529018();
    VAR
      PlantRentalFreeOrder@1100529000 : Record 11020552;
      PlantRentalFreeOrderArch@1100529001 : Record 11020552;
      PlantRentalFreeOrderLine@1100529003 : Record 11020553;
      PlantRentalFreeOrderLineArch@1100529004 : Record 11020553;
      Counter@1100529002 : Integer;
    BEGIN
      PlantRentalFreeOrderArch.CHANGECOMPANY(PlantSetup."Archive Company");
      PlantRentalFreeOrderLineArch.CHANGECOMPANY(PlantSetup."Archive Company");
      PlantRentalFreeOrder.SETCURRENTKEY("Plant Location");
      PlantRentalFreeOrder.SETRANGE("Plant Location", "Plant Location".Code);
      IF PlantRentalFreeOrder.FINDSET THEN BEGIN
        Window.UPDATE(2, PlantRentalFreeOrder.TABLECAPTION);
        NoOfRecords := PlantRentalFreeOrder.COUNT;
        REPEAT
          Counter := Counter + 1;
          Window.UPDATE(3,ROUND(Counter / NoOfRecords * 10000,1));
          PlantRentalFreeOrderArch := PlantRentalFreeOrder;
          PlantRentalFreeOrderArch.INSERT;
          PlantRentalFreeOrderLine.SETRANGE("Rental Free Order No.", PlantRentalFreeOrder."No.");
          IF PlantRentalFreeOrderLine.FINDSET THEN BEGIN
            REPEAT
              PlantRentalFreeOrderLineArch := PlantRentalFreeOrderLine;
              PlantRentalFreeOrderLineArch.INSERT;
            UNTIL PlantRentalFreeOrderLine.NEXT = 0;
          END;
        UNTIL PlantRentalFreeOrder.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ArchiveLocationExitOrders@1100529008();
    VAR
      ExitOrder@1100529000 : Record 11012559;
      ExitOrderArch@1100529001 : Record 11012559;
      ExitOrderLine@1100529003 : Record 11012560;
      ExitOrderLineArch@1100529004 : Record 11012560;
      ExitOrderCostLine@1100529005 : Record 11012561;
      ExitOrderCostLineArch@1100529006 : Record 11012561;
      Counter@1100529002 : Integer;
    BEGIN
      ExitOrderArch.CHANGECOMPANY(PlantSetup."Archive Company");
      ExitOrderLineArch.CHANGECOMPANY(PlantSetup."Archive Company");
      ExitOrderCostLineArch.CHANGECOMPANY(PlantSetup."Archive Company");
      ExitOrder.SETCURRENTKEY(Location);
      ExitOrder.SETRANGE(Location, "Plant Location".Code);
      IF ExitOrder.FINDSET THEN BEGIN
        Window.UPDATE(2, ExitOrder.TABLECAPTION);
        NoOfRecords := ExitOrder.COUNT;
        REPEAT
          Counter := Counter + 1;
          Window.UPDATE(3,ROUND(Counter / NoOfRecords * 10000,1));
          ExitOrderArch := ExitOrder;
          ExitOrderArch.INSERT;
          ExitOrderLine.SETRANGE("Exit-order No.", ExitOrder."No.");
          IF ExitOrderLine.FINDSET THEN BEGIN
            REPEAT
              ExitOrderLineArch := ExitOrderLine;
              ExitOrderLineArch.INSERT;
            UNTIL ExitOrderLine.NEXT = 0;
          END;
          ExitOrderCostLine.SETRANGE("Exit-order No.", ExitOrder."No.");
          IF ExitOrderCostLine.FINDSET THEN BEGIN
            REPEAT
              ExitOrderCostLineArch := ExitOrderCostLine;
              ExitOrderCostLineArch.INSERT;
            UNTIL ExitOrderCostLine.NEXT = 0;
          END;
        UNTIL ExitOrder.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ArchiveLocationComplaints@1100529016();
    VAR
      Complaint@1100529000 : Record 11012450;
      ComplaintArch@1100529001 : Record 11012450;
      ComplaintNote@1100529003 : Record 11012454;
      ComplaintNoteArch@1100529004 : Record 11012454;
      Counter@1100529002 : Integer;
    BEGIN
      ComplaintArch.CHANGECOMPANY(PlantSetup."Archive Company");
      ComplaintNoteArch.CHANGECOMPANY(PlantSetup."Archive Company");
      Complaint.SETCURRENTKEY("Source Type", "Source No.", "Source No. 2");
      Complaint.SETRANGE("Source Type", Complaint."Source Type"::PlantLoc);
      Complaint.SETRANGE("Source No.", "Plant Location".Code);
      IF Complaint.FINDSET THEN BEGIN
        Window.UPDATE(2, Complaint.TABLECAPTION);
        NoOfRecords := Complaint.COUNT;
        REPEAT
          Counter := Counter + 1;
          Window.UPDATE(3,ROUND(Counter / NoOfRecords * 10000,1));
          IF ComplaintArch.GET(Complaint."No.") THEN BEGIN
            ComplaintArch.DELETE;
            ComplaintNoteArch.SETRANGE("Complaint No.", Complaint."No.");
            ComplaintNoteArch.DELETEALL;
          END;
          ComplaintArch := Complaint;
          ComplaintArch.INSERT;
          ComplaintNote.SETRANGE("Complaint No.", Complaint."No.");
          IF ComplaintNote.FINDSET THEN BEGIN
            REPEAT
              ComplaintNoteArch := ComplaintNote;
              ComplaintNoteArch.INSERT;
            UNTIL ComplaintNote.NEXT = 0;
          END;
        UNTIL Complaint.NEXT = 0;
      END;
    END;

    PROCEDURE DeletePlantLocation@1100485002();
    BEGIN
      Window.UPDATE(2,Text005);
      Window.UPDATE(3,0);
      "Plant Location".DELETE(TRUE);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

