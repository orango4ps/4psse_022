OBJECT Codeunit 11012384 Generated Project Element Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text003@1100528803 : TextConst 'DEU=Unterteilung der Menge fÅr Phasen entspricht nicht der Menge fÅr Projektelement %1 (%2).;ENU="Partition of Quantity for Phases does not match Quantity for Project Element %1 (%2). ";NLD=Verdeling hoeveelheid over fases komt niet overeen met hoeveelheid voor projectelement %1 (%2).';
      Text004@1100528804 : TextConst 'DEU=énderungen nicht zulÑssig. Budget fÅr Project %1 ist festgelegt.;ENU=Changes not allowed. Budget for Project %1 is Fixed.;NLD=Wijzigingen niet toegestaan. Begroting voor project %1 is bevroren.';

    PROCEDURE CopySelectedProjectElements@1100409000(iProjectElement@1100528800 : Record 11012010);
    VAR
      GeneratedProjectElement@1100409002 : Record 11072162;
    BEGIN
      IF NOT GeneratedProjectElement.GET(iProjectElement."Project No.", iProjectElement.Element, '') THEN BEGIN
        GeneratedProjectElement.INIT;
        GeneratedProjectElement."Project No." := iProjectElement."Project No.";
        GeneratedProjectElement.Element := iProjectElement.Element;
        GeneratedProjectElement."Element Description" := iProjectElement.Description;
        GeneratedProjectElement.Quantity := iProjectElement.Quantity;
        GeneratedProjectElement."Starting Date" := iProjectElement."Starting Date";
        GeneratedProjectElement."Ending Date" := iProjectElement."Ending Date";
        GeneratedProjectElement."Line Type" := GeneratedProjectElement."Line Type"::Element;
        GeneratedProjectElement.Activity := '';
        GeneratedProjectElement."Origin Element" := iProjectElement.Element;
        GeneratedProjectElement.INSERT;
      END;
    END;

    PROCEDURE GetActivitiesByElement@1100528800(VAR iGeneratedProjectElement@1100528800 : Record 11072162);
    VAR
      GeneratedProjectElement@1100528801 : Record 11072162;
    BEGIN
      IF iGeneratedProjectElement.FINDSET THEN
        REPEAT
          GeneratedProjectElement := iGeneratedProjectElement;
          IF GeneratedProjectElement."Line Type" = GeneratedProjectElement."Line Type"::Element THEN BEGIN
            CopyActivitiesForElement(GeneratedProjectElement."Project No.", GeneratedProjectElement.Element);
            GeneratedProjectElement.Processed := TRUE;
            GeneratedProjectElement.MODIFY;
          END;
        UNTIL iGeneratedProjectElement.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyActivitiesForElement@1100528801(iProjectNo@1100528800 : Code[20];iProjectElement@1100528801 : Code[20]);
    VAR
      BudgetLine@1100528802 : Record 11012001;
      GeneratedProjectElement@1100528803 : Record 11072162;
      ProjectElementQuantity@1100528805 : Decimal;
    BEGIN
      BudgetLine.SETRANGE("Project No.", iProjectNo);
      BudgetLine.SETRANGE(Element, iProjectElement);
      BudgetLine.SETFILTER("Project Planning Activity No.", '<>%1', '');
      IF BudgetLine.FINDSET THEN BEGIN
        REPEAT
          GeneratedProjectElement.SETRANGE("Project No.", iProjectNo);
          GeneratedProjectElement.SETRANGE("Origin Element", iProjectElement);
          GeneratedProjectElement.SETRANGE(Activity, BudgetLine."Project Planning Activity No.");
          IF GeneratedProjectElement.ISEMPTY THEN BEGIN
            ProjectElementQuantity := GetProjectElementQuantity(iProjectNo, iProjectElement);
            GeneratedProjectElement.INIT;
            GeneratedProjectElement."Project No." := iProjectNo;
            GeneratedProjectElement.Element := iProjectElement;
            GeneratedProjectElement.Activity := BudgetLine."Project Planning Activity No.";
            GeneratedProjectElement."Origin Element" := iProjectElement;
            GeneratedProjectElement.Quantity := ProjectElementQuantity;
            GeneratedProjectElement."Line Type" := GeneratedProjectElement."Line Type"::Activity;
            GeneratedProjectElement.INSERT;
          END;
        UNTIL BudgetLine.NEXT = 0;
      END;
    END;

    PROCEDURE GenerateProjectElements@1100528802(VAR iGeneratedProjectElement@1100528800 : Record 11072162);
    VAR
      GeneratedProjectElement@1100528802 : Record 11072162;
    BEGIN
      IF iGeneratedProjectElement.FINDSET THEN
        REPEAT
          GeneratedProjectElement := iGeneratedProjectElement;
          ProcessLineToCreateProjectElement(GeneratedProjectElement);
        UNTIL iGeneratedProjectElement.NEXT = 0;
    END;

    PROCEDURE ProcessLineToCreateProjectElement@1100528816(iGeneratedProjectElement@1100528800 : Record 11072162);
    BEGIN
      CASE iGeneratedProjectElement."Line Type" OF
        iGeneratedProjectElement."Line Type"::Phase: EXIT;
        iGeneratedProjectElement."Line Type"::Element: EXIT;

        iGeneratedProjectElement."Line Type"::Activity:
          BEGIN
            IF NOT iGeneratedProjectElement.Processed THEN BEGIN
              GenerateElementByActivity(iGeneratedProjectElement);
              iGeneratedProjectElement.Processed := TRUE;
              iGeneratedProjectElement.MODIFY;
            END;
            IF iGeneratedProjectElement.Processed THEN
              GenerateElementByPhase(iGeneratedProjectElement);
          END;
      END;
    END;

    PROCEDURE GenerateElementByActivity@1100528819(VAR iGeneratedProjectElement@1100528800 : Record 11072162);
    VAR
      LastSubElement@1100528801 : Code[20];
      Level1Code@1100528802 : Code[20];
      Level2Code@1100528803 : Code[20];
      Level3Code@1100528804 : Code[20];
      ONewSubElement@1100528805 : Code[20];
      OElementDescription@1100528806 : Text[50];
      ElementLevel@1100528807 : Integer;
    BEGIN
      ElementLevel := GetProjectElementLevel(
        iGeneratedProjectElement."Project No.",
        iGeneratedProjectElement.Element);

      GetLastSubElement(
        iGeneratedProjectElement."Project No.",
        iGeneratedProjectElement.Element,
        LastSubElement, ElementLevel);

      GetLevelCodes(LastSubElement, Level1Code, Level2Code, Level3Code);

      CASE ElementLevel+1 OF
        2: GenerateNewSubLevelCode(Level2Code);
        3: GenerateNewSubLevelCode(Level3Code);
      END;

      GenerateNewElementCode(ONewSubElement, Level1Code, Level2Code, Level3Code);

      CreateNewSubProjectElement(
        iGeneratedProjectElement."Project No.",
        iGeneratedProjectElement.Element,
        iGeneratedProjectElement.Activity,
        iGeneratedProjectElement.Quantity,
        ONewSubElement,
        OElementDescription,
        iGeneratedProjectElement."Element Type"::Installation);

      iGeneratedProjectElement."Generated Element" := ONewSubElement;
      iGeneratedProjectElement."Element Description" := OElementDescription;
      iGeneratedProjectElement."Line Type" := iGeneratedProjectElement."Line Type"::Activity;
      iGeneratedProjectElement.MODIFY;

      iGeneratedProjectElement.RENAME(
        iGeneratedProjectElement."Project No.",
        ONewSubElement,
        iGeneratedProjectElement.Activity);
    END;

    PROCEDURE GenerateElementByPhase@1100528820(VAR iGeneratedProjectElement@1100528800 : Record 11072162);
    VAR
      GeneratedProjectElement@1100528808 : Record 11072162;
      LastSubElement@1100528805 : Code[20];
      Level1Code@1100528804 : Code[20];
      Level2Code@1100528803 : Code[20];
      Level3Code@1100528802 : Code[20];
      ONewSubElement@1100528801 : Code[20];
      OElementDescription@1100528806 : Text[50];
      Counter@1100528807 : Integer;
      ElementLevel@1100528809 : Integer;
      NoOfExistingLines@1100528810 : Integer;
    BEGIN
      Counter := iGeneratedProjectElement."No. of Phases";

      GeneratedProjectElement.SETRANGE("Project No.", iGeneratedProjectElement."Project No.");
      GeneratedProjectElement.SETRANGE("Origin Element", iGeneratedProjectElement.Element);
      GeneratedProjectElement.SETRANGE(Activity, iGeneratedProjectElement.Activity);
      GeneratedProjectElement.SETRANGE("Line Type", GeneratedProjectElement."Line Type"::Phase);
      NoOfExistingLines := GeneratedProjectElement.COUNT;

      IF Counter <= NoOfExistingLines THEN
        EXIT;

      IF Counter > NoOfExistingLines THEN
        Counter := Counter - NoOfExistingLines;

      ElementLevel := GetProjectElementLevel(
        iGeneratedProjectElement."Project No.",
        iGeneratedProjectElement.Element);

      REPEAT
        ONewSubElement := '';
        OElementDescription := '';
        GetLastSubElement(
          iGeneratedProjectElement."Project No.",
          iGeneratedProjectElement."Generated Element",
          LastSubElement, ElementLevel);

        GetLevelCodes(LastSubElement, Level1Code, Level2Code, Level3Code);

        GenerateNewSubLevelCode(Level3Code);

        GenerateNewElementCode(ONewSubElement, Level1Code, Level2Code, Level3Code);

        CreateNewSubProjectElement(
          iGeneratedProjectElement."Project No.",
          iGeneratedProjectElement."Generated Element",
          iGeneratedProjectElement.Activity,
          iGeneratedProjectElement.Quantity,
          ONewSubElement,
          OElementDescription,
          iGeneratedProjectElement."Element Type"::Production);

        CreatePhaseLine(
          iGeneratedProjectElement."Project No.",
          iGeneratedProjectElement."Generated Element",
          iGeneratedProjectElement.Activity,
          ONewSubElement,
          OElementDescription);

        Counter -= 1;
      UNTIL Counter = 0;
    END;

    PROCEDURE CreatePhaseLine@1100528823(iProjectNo@1100528801 : Code[20];iElement@1100528802 : Code[20];iActivity@1100528805 : Code[20];iNewSubElement@1100528803 : Code[20];iElementDescription@1100528804 : Text[50]);
    VAR
      GeneratedProjectElement@1100528800 : Record 11072162;
    BEGIN
      GeneratedProjectElement.INIT;
      GeneratedProjectElement."Project No." := iProjectNo;
      GeneratedProjectElement.Element := iNewSubElement;
      GeneratedProjectElement."Generated Element" := iNewSubElement;
      GeneratedProjectElement."Origin Element" := iElement;
      GeneratedProjectElement.Activity := iActivity;
      GeneratedProjectElement."Element Description" := iElementDescription;
      GeneratedProjectElement."Line Type" := GeneratedProjectElement."Line Type"::Phase;
      GeneratedProjectElement.INSERT;
    END;

    PROCEDURE GetSubLevel@1100528803(iProjectNo@1100528801 : Code[20];iElement@1100528803 : Code[20];VAR SubLevel@1100528800 : Integer);
    VAR
      ProjectElement@1100528802 : Record 11012010;
    BEGIN
      ProjectElement.GET(iProjectNo, iElement);
      SubLevel := ProjectElement.Level+1;
    END;

    PROCEDURE GetLastSubElement@1100528808(iProjectNo@1100528800 : Code[20];iElement@1100528802 : Code[20];VAR OLastSubElement@1100528803 : Code[20];ElementLevel@1100528805 : Integer);
    VAR
      ProjectElement@1100528801 : Record 11012010;
    BEGIN
      ProjectElement.SETRANGE("Project No.", iProjectNo);
      ProjectElement.SETRANGE(Level, ElementLevel+1);
      CASE ElementLevel+1 OF
        2: ProjectElement.SETRANGE(Chapter, iElement);
        3: ProjectElement.SETRANGE(Paragraph, iElement);
      END;

      IF ProjectElement.FINDLAST THEN
        OLastSubElement := ProjectElement.Element
      ELSE
        OLastSubElement := iElement;
    END;

    PROCEDURE GenerateNewSubLevelCode@1100528812(VAR iOLevelCode@1100528800 : Code[20]) : Boolean;
    VAR
      Integer@1100528801 : Integer;
      LevelCode@1100528803 : Code[20];
    BEGIN
      IF iOLevelCode = '' THEN
        iOLevelCode := '0';

      IF NOT EVALUATE(Integer, iOLevelCode) THEN //alleen cijfers
        EXIT(FALSE);

      LevelCode := FORMAT(Integer+1);

      IF STRLEN(LevelCode) > STRLEN(iOLevelCode) THEN
        EXIT;

      IF STRLEN(LevelCode) < STRLEN(iOLevelCode) THEN
        FillLevelCode(LevelCode, STRLEN(iOLevelCode));

      iOLevelCode := LevelCode;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FillLevelCode@1100528809(VAR LevelCode@1100528800 : Code[20];LevelCodeLenght@1100528801 : Integer);
    BEGIN
      REPEAT
        LevelCode := '0' + LevelCode;
      UNTIL STRLEN(LevelCode) = LevelCodeLenght;
    END;

    PROCEDURE GenerateNewElementCode@1100528815(VAR ONewSubElement@1100528803 : Code[20];Level1Code@1100528800 : Code[20];Level2Code@1100528801 : Code[20];Level3Code@1100528802 : Code[20]);
    BEGIN
      ONewSubElement := Level1Code;
      IF Level2Code <> '' THEN
        ONewSubElement := ONewSubElement + '.' + Level2Code;
      IF Level3Code <> '' THEN
        ONewSubElement := ONewSubElement + '.' + Level3Code;
    END;

    PROCEDURE GetLevelCodes@1100528805(iElement@1100528801 : Code[20];VAR OLevel1Code@1100528818 : Code[20];VAR OLevel2Code@1100528814 : Code[20];VAR OLevel3Code@1100528812 : Code[20]);
    VAR
      ProjSetUpRec@1100528817 : Record 315;
      Frmt@1100528809 : Code[20];
      lp@1100528806 : Integer;
      sp1@1100528805 : Integer;
      sp2@1100528804 : Integer;
      x@1100528802 : Integer;
    BEGIN
      x := 0;
      sp1 := 0;
      sp2 := 0;

      ProjSetUpRec.GET();
      ProjSetUpRec.TESTFIELD("Project Element Format");
      Frmt := ProjSetUpRec."Project Element Format";

      IF Frmt = '' THEN BEGIN
        ProjSetUpRec.GET();
        Frmt := ProjSetUpRec."Project Element Format";
      END;
      IF Frmt = '' THEN
        Frmt := 'XX.XX.XX';
      lp := STRLEN(Frmt);

      REPEAT
        x := x + 1;
        IF COPYSTR(Frmt,x,1) = '.' THEN BEGIN
          IF sp1 = 0 THEN
            sp1 := x
          ELSE
            IF sp2 = 0 THEN
              sp2 :=x
        END;
      UNTIL x = lp;

      IF iElement = '' THEN
        EXIT;

      OLevel1Code := COPYSTR(iElement, 1, sp1-1);
      OLevel2Code := COPYSTR(iElement, sp1+1, sp2-sp1-1);
      OLevel3Code := COPYSTR(iElement, sp2+1, lp-sp2);
    END;

    PROCEDURE CreateNewSubProjectElement@1100528813(iProjectNo@1100528800 : Code[20];iElement@1100528806 : Code[20];iActivity@1100528804 : Code[20];iQuantity@1100409000 : Decimal;VAR iNewSubElement@1100528801 : Code[20];VAR OElementDescription@1100528807 : Text[50];iElementType@1100528805 : 'General,Production,Installation');
    VAR
      ProjectElement@1100528802 : Record 11012010;
      ProjectPlanningActivity@1100528803 : Record 11012431;
    BEGIN
      IF NOT ProjectElement.GET(iProjectNo, iNewSubElement) THEN BEGIN
        ProjectElement.INIT;
        ProjectElement."Project No." := iProjectNo;
        ProjectElement."Element Type" := iElementType;
        ProjectElement.Quantity := iQuantity;
        ProjectElement.VALIDATE(Element, iNewSubElement);

        IF ProjectPlanningActivity.GET(iActivity) THEN
          ProjectElement.Description := ProjectPlanningActivity.Description;

        ProjectElement.INSERT;

        iNewSubElement := ProjectElement.Element;
        OElementDescription := ProjectElement.Description;
      END;
    END;

    PROCEDURE GetBudgetLinesDSByiGeneratedProjectElement@1100528806(iGeneratedProjectElement@1100528801 : Record 11072162;VAR OBudgetLineDS@1100528802 : Record 11012001);
    BEGIN
      OBudgetLineDS.SETRANGE("Project No.", iGeneratedProjectElement."Project No.");
      OBudgetLineDS.SETRANGE(Adjustment, '');
      OBudgetLineDS.SETRANGE("Adjustment Filter", '');
      OBudgetLineDS.SETRANGE("Extension Contract", '');
      OBudgetLineDS.SETRANGE("Extension Filter", '');
      OBudgetLineDS.SETRANGE(Option, '');
      OBudgetLineDS.SETRANGE("Option Filter", '');
      IF OBudgetLineDS.FINDSET THEN
        REPEAT
          IF OBudgetLineDS.Element <> '' THEN
            OBudgetLineDS.MARK(TRUE)
          ELSE
            OBudgetLineDS.MARK(FALSE);

          UNTIL OBudgetLineDS.NEXT = 0;

      OBudgetLineDS.MARKEDONLY(TRUE);

      IF (iGeneratedProjectElement.Activity <> '') THEN
        OBudgetLineDS.SETRANGE(Element, iGeneratedProjectElement."Generated Element");

      IF (iGeneratedProjectElement.Activity = '') THEN
        OBudgetLineDS.SETRANGE(Element, iGeneratedProjectElement.Element);
    END;

    PROCEDURE GetNumberOfBudgetLines@1100528824(iGeneratedProjectElement@1100528801 : Record 11072162) : Integer;
    VAR
      OBudgetLineDS@1100528800 : Record 11012001;
    BEGIN
      GetBudgetLinesDSByiGeneratedProjectElement(iGeneratedProjectElement, OBudgetLineDS);
      EXIT(OBudgetLineDS.COUNT);
    END;

    PROCEDURE ShowBudgetLines@1100528807(iGeneratedProjectElement@1100528802 : Record 11072162);
    VAR
      OBudgetLineDS@1100528800 : Record 11012001;
    BEGIN
      GetBudgetLinesDSByiGeneratedProjectElement(iGeneratedProjectElement, OBudgetLineDS);
      PAGE.RUNMODAL(PAGE::"Budget List", OBudgetLineDS);
    END;

    PROCEDURE TransferBudgetLines@1100528818(iProjectNo@1100528801 : Code[20];iOriginElement@1100528802 : Code[20];iActivity@1100528804 : Code[20];iElement@1100528803 : Code[20];TransferDirection@1100528805 : 'FromOrigin,ToOrigin';LastPhaseLine@1100528808 : Boolean);
    VAR
      BudgetLine@1100528800 : Record 11012001;
      BudgetLine2@1100528806 : Record 11012001;
      I@1100528807 : Integer;
    BEGIN
      BudgetLine.SETRANGE("Project No.", iProjectNo);

      IF TransferDirection = TransferDirection::FromOrigin THEN
        BudgetLine.SETRANGE(Element, iOriginElement)
      ELSE
        BudgetLine.SETRANGE(Element, iElement);

      BudgetLine.SETRANGE("Project Planning Activity No.", iActivity);
      BudgetLine.SETRANGE(Adjustment, '');
      BudgetLine.SETRANGE("Extension Contract", '');
      BudgetLine.SETRANGE(Option, '');
      IF BudgetLine.FINDSET THEN BEGIN
        I := 1;
        REPEAT
          BudgetLine2 := BudgetLine;
          IF (I = 1) OR LastPhaseLine THEN BEGIN
            IF TransferDirection = TransferDirection::FromOrigin THEN
              BudgetLine2.VALIDATE(Element, iElement)
            ELSE BEGIN
              BudgetLine2.VALIDATE(Element, iOriginElement);
              IF BudgetLine2."Quantity Orig. Proj. Element" <> 0 THEN BEGIN
                BudgetLine2.VALIDATE(Quantity, BudgetLine2."Quantity Orig. Proj. Element");
                BudgetLine2."Quantity Orig. Proj. Element" := 0;
              END;
            END;
            BudgetLine2.MODIFY(TRUE);
          END;
          IF TransferDirection = TransferDirection::ToOrigin THEN BEGIN
            IF (I > 1) AND NOT LastPhaseLine THEN
              BudgetLine2.DELETE;
            I += 1;
          END;
        UNTIL BudgetLine.NEXT = 0;
      END;
    END;

    PROCEDURE DeleteGeneratedElement@1100528827(iGeneratedProjectElement@1100528802 : Record 11072162);
    VAR
      TransferDirection@1100528800 : 'FromOrigin,ToOrigin';
    BEGIN
      CASE iGeneratedProjectElement."Line Type" OF

        iGeneratedProjectElement."Line Type"::Element:
          BEGIN
            IF iGeneratedProjectElement.Processed THEN
              DeleteLineTypeActivity(iGeneratedProjectElement."Project No.", iGeneratedProjectElement.Element, iGeneratedProjectElement.Activity)
            ELSE
              EXIT;
          END;

        iGeneratedProjectElement."Line Type"::Activity:
          BEGIN
            IF iGeneratedProjectElement.Processed  THEN BEGIN
              IF (NoOfSubElements(iGeneratedProjectElement."Project No.", iGeneratedProjectElement.Element) >0) THEN
                DeleteLineTypePhase(iGeneratedProjectElement."Project No.", iGeneratedProjectElement.Element, iGeneratedProjectElement.Activity);
              TransferBudgetLines(
                iGeneratedProjectElement."Project No.",
                iGeneratedProjectElement."Origin Element",
                iGeneratedProjectElement.Activity,
                iGeneratedProjectElement.Element,
                TransferDirection::ToOrigin,
                TRUE);
              DeleteProjectElement(iGeneratedProjectElement."Project No.", iGeneratedProjectElement.Element);
            END;
          END;

        iGeneratedProjectElement."Line Type"::Phase:
          BEGIN
            IF NoOfSubElements(
              iGeneratedProjectElement."Project No.",
              iGeneratedProjectElement."Origin Element") = 1 THEN
              TransferBudgetLines(
                iGeneratedProjectElement."Project No.",
                iGeneratedProjectElement."Origin Element",
                iGeneratedProjectElement.Activity,
                iGeneratedProjectElement.Element,
                TransferDirection::ToOrigin,
                TRUE)
            ELSE
              DeleteBudgetLines(
                iGeneratedProjectElement."Project No.",
                iGeneratedProjectElement.Element,
                iGeneratedProjectElement.Activity);

            DeleteProjectElement(iGeneratedProjectElement."Project No.", iGeneratedProjectElement.Element);
          END;
      END;
    END;

    PROCEDURE DeleteLineTypeActivity@1100528832(iProjectNo@1100528800 : Code[20];iOriginElement@1100528801 : Code[20];iActivity@1100528805 : Code[20]);
    VAR
      GeneratedProjectElement@1100528802 : Record 11072162;
      GeneratedProjectElement2@1100528803 : Record 11072162;
      TransferDirection@1100528806 : 'FromOrigin,ToOrigin';
    BEGIN
      GeneratedProjectElement.SETRANGE("Line Type", GeneratedProjectElement."Line Type"::Activity);
      GeneratedProjectElement.SETRANGE("Project No.", iProjectNo);
      GeneratedProjectElement.SETRANGE("Origin Element", iOriginElement);
      IF GeneratedProjectElement.FINDSET THEN
        REPEAT
          GeneratedProjectElement2 := GeneratedProjectElement;
          IF (NoOfSubElements(iProjectNo, GeneratedProjectElement2.Element) >0) THEN
            DeleteLineTypePhase(iProjectNo, GeneratedProjectElement2.Element, GeneratedProjectElement2.Activity);
          IF GetNumberOfBudgetLines(GeneratedProjectElement2) > 0 THEN
            TransferBudgetLines(iProjectNo, GeneratedProjectElement2."Origin Element", GeneratedProjectElement2.Activity, GeneratedProjectElement2.Element, TransferDirection::ToOrigin, TRUE);
          IF GeneratedProjectElement2."Generated Element" <> '' THEN
            DeleteProjectElement(GeneratedProjectElement2."Project No.", GeneratedProjectElement2.Element);
          GeneratedProjectElement2.DELETE;
        UNTIL GeneratedProjectElement.NEXT = 0;
    END;

    PROCEDURE DeleteLineTypePhase@1100528833(iProjectNo@1100528800 : Code[20];iOriginElement@1100528801 : Code[20];iActivity@1100528806 : Code[20]);
    VAR
      GeneratedProjectElement@1100528802 : Record 11072162;
      GeneratedProjectElement2@1100528804 : Record 11072162;
      TransferDirection@1100528803 : 'FromOrigin,ToOrigin';
      I@1100528807 : Integer;
    BEGIN
      I := 1;

      GeneratedProjectElement.SETRANGE("Line Type", GeneratedProjectElement."Line Type"::Phase);
      GeneratedProjectElement.SETRANGE("Project No.", iProjectNo);
      GeneratedProjectElement.SETRANGE("Origin Element", iOriginElement);
      GeneratedProjectElement.SETRANGE(Activity, iActivity);

      IF GeneratedProjectElement.FINDSET THEN
        REPEAT
          GeneratedProjectElement2 := GeneratedProjectElement;
          IF (GeneratedProjectElement2.Processed) AND (I = 1) THEN
            TransferBudgetLines(iProjectNo, GeneratedProjectElement2."Origin Element", GeneratedProjectElement2.Activity, GeneratedProjectElement2.Element, TransferDirection::ToOrigin, I = 1)
          ELSE
            DeleteBudgetLines(iProjectNo, GeneratedProjectElement2.Element, GeneratedProjectElement2.Activity);

          DeleteProjectElement(GeneratedProjectElement2."Project No.", GeneratedProjectElement2.Element);
          GeneratedProjectElement2.DELETE;
          I += 1;
        UNTIL GeneratedProjectElement.NEXT = 0;
    END;

    PROCEDURE DeleteBudgetLines@1100528814(iProjectNo@1100528800 : Code[20];iElement@1100528801 : Code[20];iActivity@1100528802 : Code[20]);
    VAR
      BudgetLine@1100528803 : Record 11012001;
    BEGIN
      BudgetLine.SETRANGE("Project No.", iProjectNo);
      BudgetLine.SETRANGE(Element, iElement);
      BudgetLine.SETRANGE("Project Planning Activity No.", iActivity);
      IF BudgetLine.FINDSET THEN
        BudgetLine.DELETEALL;
    END;

    PROCEDURE DeleteProjectElement@1100528840(iProjectNo@1100528800 : Code[20];iElement@1100528801 : Code[20]);
    VAR
      ProjectElement@1100528802 : Record 11012010;
    BEGIN
      IF ProjectElement.GET(iProjectNo, iElement) THEN
        ProjectElement.DELETE(TRUE);
    END;

    PROCEDURE SetElementType@1100528811(VAR iGeneratedProjectElement@1100528800 : Record 11072162;iElementType@1100528801 : 'General,Production,Installation');
    VAR
      ProjectElement@1100528802 : Record 11012010;
    BEGIN
      IF iGeneratedProjectElement.FINDSET THEN
        REPEAT
          IF (iGeneratedProjectElement."Generated Element" = '') THEN
            iGeneratedProjectElement.MARK(FALSE)
          ELSE
            iGeneratedProjectElement.MARK(TRUE);
        UNTIL iGeneratedProjectElement.NEXT = 0;

      iGeneratedProjectElement.MARKEDONLY(TRUE);

      IF iGeneratedProjectElement.FINDSET THEN
        REPEAT
          IF ProjectElement.GET(iGeneratedProjectElement."Project No.", iGeneratedProjectElement."Generated Element") THEN
            ProjectElement."Element Type" := iElementType;
            ProjectElement.MODIFY;
        UNTIL iGeneratedProjectElement.NEXT = 0;
    END;

    PROCEDURE UpdateBudgetLines@1100528810(VAR iGeneratedProjectElement@1100528800 : Record 11072162);
    VAR
      GeneratedProjectElement@1100528801 : Record 11072162;
    BEGIN
      IF iGeneratedProjectElement.FINDSET THEN
        TestProjectBudgetFixed(iGeneratedProjectElement."Project No.");
      REPEAT
        GeneratedProjectElement := iGeneratedProjectElement;
        ProcessGeneratedProjectElementLineToUpdateBudgetLine(GeneratedProjectElement);
      UNTIL iGeneratedProjectElement.NEXT = 0;
    END;

    PROCEDURE ProcessGeneratedProjectElementLineToUpdateBudgetLine@1100528817(iGeneratedProjectElement@1100528801 : Record 11072162);
    VAR
      TransferDirection@1100528802 : 'FromOrigin,ToOrigin';
      ProcessedQuantity@1100528803 : Decimal;
    BEGIN
      ProcessedQuantity := 0;

      CASE iGeneratedProjectElement."Line Type" OF

        iGeneratedProjectElement."Line Type"::Element: EXIT;

        iGeneratedProjectElement."Line Type"::Activity:
          BEGIN
            iGeneratedProjectElement.CALCFIELDS("Phase Quantity");
            IF (iGeneratedProjectElement."Generated Element" <> '') THEN
              TransferBudgetLines(
                iGeneratedProjectElement."Project No.",
                iGeneratedProjectElement."Origin Element",
                iGeneratedProjectElement.Activity,
                iGeneratedProjectElement.Element,
                TransferDirection::FromOrigin,
                FALSE);
            IF iGeneratedProjectElement.Processed THEN BEGIN
              IF iGeneratedProjectElement."Phase Quantity" = 0 THEN
                EXIT;
            IF PhaseRatioChanged(
                iGeneratedProjectElement."Project No.",
                iGeneratedProjectElement.Element,
                iGeneratedProjectElement.Activity) THEN BEGIN
                  IF iGeneratedProjectElement."Processed Quantity" <> 0 THEN
                    TransferBudgetLinesBeforeUpdate(iGeneratedProjectElement);
                  PhaseBudgetLines(iGeneratedProjectElement, ProcessedQuantity);
                  iGeneratedProjectElement."Processed Quantity" := ProcessedQuantity;
                  iGeneratedProjectElement.MODIFY;
              END;
            END;
          END;

        iGeneratedProjectElement."Line Type"::Phase: EXIT;
      END;
    END;

    PROCEDURE PhaseBudgetLines@1100528821(iGeneratedProjectElement@1100528800 : Record 11072162;VAR OProcessedQuantity@1100528802 : Decimal);
    VAR
      BudgetLine@1100528803 : Record 11012001;
      GeneratedProjectElement@1100528801 : Record 11072162;
      GeneratedProjectElement2@1100528804 : Record 11072162;
    BEGIN
      OProcessedQuantity := 0;

      TestPhaseQuantity(
        iGeneratedProjectElement."Project No.",
        iGeneratedProjectElement.Element,
        iGeneratedProjectElement.Quantity);

      BudgetLine.SETRANGE("Project No.", iGeneratedProjectElement."Project No.");
      BudgetLine.SETRANGE(Element, iGeneratedProjectElement.Element);
      BudgetLine.SETRANGE(Adjustment, '');
      BudgetLine.SETRANGE("Extension Contract", '');
      BudgetLine.SETRANGE(Option, '');
      IF BudgetLine.FINDSET THEN
        REPEAT
          SplitBudgetLinesByPhase(BudgetLine, iGeneratedProjectElement, OProcessedQuantity);
        UNTIL BudgetLine.NEXT = 0;

      GeneratedProjectElement.SETRANGE("Project No.", iGeneratedProjectElement."Project No.");
      GeneratedProjectElement.SETRANGE("Origin Element", iGeneratedProjectElement.Element);
      GeneratedProjectElement.SETRANGE("Line Type", GeneratedProjectElement."Line Type"::Phase);
      IF GeneratedProjectElement.FINDSET THEN
        REPEAT
          GeneratedProjectElement2 := GeneratedProjectElement;
          GeneratedProjectElement2.Processed := TRUE;
          GeneratedProjectElement2.MODIFY;
        UNTIL GeneratedProjectElement.NEXT = 0;
    END;

    PROCEDURE SplitBudgetLinesByPhase@1100528825(iBudgetLine@1100528800 : Record 11012001;iGeneratedProjectElement@1100528802 : Record 11072162;VAR OProcessedQuantity@1100528809 : Decimal);
    VAR
      GeneratedProjectElement@1100528801 : Record 11072162;
      OriginalBudgetLine@1100528804 : Record 11012001;
      BudgetLine@1100528807 : Record 11012001;
      LineNoStepSize@1100528805 : Integer;
      I@1100528803 : Integer;
      NewQuantity@1100528806 : Decimal;
      PreviousLineNo@1100528808 : Integer;
    BEGIN
      I := 1;
      OriginalBudgetLine.COPY(iBudgetLine);
      LineNoStepSize := OriginalBudgetLine.GetLineNoStepSize(iBudgetLine, iGeneratedProjectElement."No. of Phases");
      PreviousLineNo := OriginalBudgetLine."Line No.";
      OProcessedQuantity := 0;

      GeneratedProjectElement.SETRANGE("Project No.", iGeneratedProjectElement."Project No.");
      GeneratedProjectElement.SETRANGE("Origin Element", iGeneratedProjectElement.Element);
      GeneratedProjectElement.SETRANGE("Line Type", GeneratedProjectElement."Line Type"::Phase);
      IF GeneratedProjectElement.FINDSET THEN
        REPEAT
          NewQuantity := CalcNewQuantityByPhase(
            OriginalBudgetLine.Quantity,
            iGeneratedProjectElement.Quantity,
            GeneratedProjectElement.Quantity);
          IF I = 1 THEN BEGIN
            iBudgetLine.VALIDATE(Element, GeneratedProjectElement.Element);
            iBudgetLine."Quantity Orig. Proj. Element" := OriginalBudgetLine.Quantity;
            iBudgetLine.VALIDATE(Quantity, NewQuantity);
            iBudgetLine.MODIFY;
          END ELSE BEGIN
            BudgetLine.INIT;
            BudgetLine.COPY(OriginalBudgetLine);
            BudgetLine.VALIDATE(Element, GeneratedProjectElement.Element);
            BudgetLine."Quantity Orig. Proj. Element" := OriginalBudgetLine.Quantity;
            BudgetLine."Line No." := PreviousLineNo + LineNoStepSize;
            BudgetLine.INSERT;
            BudgetLine.VALIDATE(Quantity, NewQuantity);
            BudgetLine.MODIFY(TRUE);
            PreviousLineNo := BudgetLine."Line No.";
          END;
          I += 1;
          NewQuantity := 0;
          GeneratedProjectElement."Processed Quantity" := GeneratedProjectElement.Quantity;
          GeneratedProjectElement.MODIFY;
          OProcessedQuantity += GeneratedProjectElement.Quantity;
        UNTIL GeneratedProjectElement.NEXT = 0;
    END;

    PROCEDURE CalcNewQuantityByPhase@1100528843(iOriginalBudgetLineQuantity@1100528800 : Decimal;iElementQuantity@1100528801 : Decimal;iPhaseQuantity@1100528802 : Decimal) : Decimal;
    BEGIN
      EXIT(ROUND(iOriginalBudgetLineQuantity * (iPhaseQuantity/iElementQuantity), 0.01, '='));
    END;

    PROCEDURE GetProjectElementLevel@1100528826(iProjectNo@1100528800 : Code[20];iProjectElement@1100528801 : Code[20]) : Integer;
    VAR
      ProjectElement@1100528802 : Record 11012010;
    BEGIN
      ProjectElement.GET(iProjectNo, iProjectElement);
      EXIT(ProjectElement.Level);
    END;

    PROCEDURE GetProjectElementQuantity@1100528804(iProjectNo@1100528800 : Code[20];iElement@1100528801 : Code[20]) : Decimal;
    VAR
      ProjectElement@1100528802 : Record 11012010;
    BEGIN
      IF ProjectElement.GET(iProjectNo, iElement) THEN
        EXIT(ProjectElement.Quantity);
    END;

    PROCEDURE TestPhaseQuantity@1100528830(iProjectNo@1100528802 : Code[20];iElement@1100528800 : Code[20];iActivityQuantity@1100528804 : Decimal);
    VAR
      GeneratedProjectElement@1100528801 : Record 11072162;
      PhaseQuantity@1100528803 : Decimal;
    BEGIN
      GeneratedProjectElement.SETRANGE("Project No.", iProjectNo);
      GeneratedProjectElement.SETRANGE("Origin Element", iElement);
      GeneratedProjectElement.SETRANGE("Line Type", GeneratedProjectElement."Line Type"::Phase);
      IF GeneratedProjectElement.FINDSET THEN
        REPEAT
         PhaseQuantity += GeneratedProjectElement.Quantity;
        UNTIL GeneratedProjectElement.NEXT = 0;

      IF PhaseQuantity - iActivityQuantity <> 0 THEN
        ERROR(Text003, iElement, PhaseQuantity - iActivityQuantity);
    END;

    PROCEDURE TransferBudgetLinesBeforeUpdate@1100528828(iGeneratedProjectElement@1100528802 : Record 11072162);
    VAR
      GeneratedProjectElement@1100528803 : Record 11072162;
      TransferDirection@1100528800 : 'FromOrigin,ToOrigin';
      I@1100528804 : Integer;
    BEGIN
      I := 1;
      GeneratedProjectElement.SETRANGE("Line Type", iGeneratedProjectElement."Line Type"::Phase);
      GeneratedProjectElement.SETRANGE("Project No.", iGeneratedProjectElement."Project No.");
      GeneratedProjectElement.SETRANGE("Origin Element", iGeneratedProjectElement.Element);
      GeneratedProjectElement.SETRANGE(Activity, iGeneratedProjectElement.Activity);
      IF GeneratedProjectElement.FINDSET THEN
        REPEAT
          IF (GeneratedProjectElement.Processed) AND (I = 1) THEN
            TransferBudgetLines(
              GeneratedProjectElement."Project No.",
              GeneratedProjectElement."Origin Element",
              GeneratedProjectElement.Activity,
              GeneratedProjectElement.Element,
              TransferDirection::ToOrigin, I = 1)
          ELSE
            DeleteBudgetLines(
              GeneratedProjectElement."Project No.",
              GeneratedProjectElement.Element,
              GeneratedProjectElement.Activity);
          I += 1;
        UNTIL GeneratedProjectElement.NEXT = 0;
    END;

    PROCEDURE PhaseRatioChanged@1100528829(iProjectNo@1100528802 : Code[20];iElement@1100528800 : Code[20];iActivity@1100528803 : Code[20]) : Boolean;
    VAR
      GeneratedProjectElement@1100528801 : Record 11072162;
    BEGIN
      GeneratedProjectElement.SETRANGE("Project No.", iProjectNo);
      GeneratedProjectElement.SETRANGE("Origin Element", iElement);
      GeneratedProjectElement.SETRANGE(Activity, iActivity);
      GeneratedProjectElement.SETRANGE("Line Type", GeneratedProjectElement."Line Type"::Phase);
      IF GeneratedProjectElement.FINDSET THEN
        REPEAT
          IF GeneratedProjectElement.Quantity <> GeneratedProjectElement."Processed Quantity" THEN
            EXIT(TRUE);
        UNTIL GeneratedProjectElement.NEXT = 0;

      GeneratedProjectElement.RESET;
      GeneratedProjectElement.GET(iProjectNo, iElement, iActivity);
      GeneratedProjectElement.CALCFIELDS(GeneratedProjectElement."Phase Quantity");
      IF GeneratedProjectElement."Processed Quantity" <> GeneratedProjectElement."Phase Quantity" THEN
        EXIT(TRUE);
    END;

    PROCEDURE TestProjectBudgetFixed@1100528831(iProjectNo@1100528800 : Code[20]);
    VAR
      Project@1100528801 : Record 11072003;
    BEGIN
      Project.GET(iProjectNo);
        IF Project."Budget Fixed" THEN
          ERROR(Text004, iProjectNo);
    END;

    PROCEDURE NoOfSubElements@1100528841(iProjectNo@1100528800 : Code[20];iElement@1100528801 : Code[20]) : Integer;
    VAR
      GeneratedProjectElement@1100528802 : Record 11072162;
    BEGIN
      GeneratedProjectElement.SETRANGE("Project No.", iProjectNo);
      GeneratedProjectElement.SETRANGE("Origin Element", iElement);
      EXIT(GeneratedProjectElement.COUNT);
    END;

    BEGIN
    END.
  }
}

