OBJECT Report 11072165 Create Service Precl. Lines
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Create Service Preclosure Result Lines;
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 1100528601;;DataItem;                  ;
               DataItemTable=Table11072312;
               DataItemTableView=SORTING(Posting Date,Seq. No.) }

    { 1100528600;;DataItem;                  ;
               DataItemTable=Table11012812;
               DataItemTableView=WHERE(Status=CONST(Invoicing Allowed));
               OnPreDataItem=VAR
                               TmpServiceContract@1100529601 : TEMPORARY Record 11012812;
                               DimensionValue@1100529600 : Record 349;
                               OtherPreclosureResultSeqNo@1100528600 : Integer;
                             BEGIN
                               TotalNoOfContracts := COUNT;
                               ProgressDialog.OPEN(Text000);

                               LineNo := GetLastUsedLineNoPreclosureResultLine("Service Preclosure Result");
                               IF ("Service-Contract".GETFILTERS = '') OR OnlyServiceOrdersWithoutContract THEN BEGIN
                                 CLEAR(TmpServiceContract);
                                 TmpServiceContract.INSERT;

                                 DimensionValue.SETRANGE("Global Dimension No.", 1);
                                 IF DimensionValue.FINDSET THEN
                                   REPEAT
                                     TmpServiceContract."No." := DimensionValue.Code;
                                     TmpServiceContract."Global Dimension 1 Code" := DimensionValue.Code;
                                     TmpServiceContract.INSERT;
                                   UNTIL DimensionValue.NEXT = 0;

                                 IF TmpServiceContract.FINDSET THEN
                                   REPEAT
                                     IF NOT "Service Preclosure Result".IsContractOnOtherPreclosureResultSeqNo('', TmpServiceContract."Global Dimension 1 Code", OtherPreclosureResultSeqNo) THEN
                                       CreatePreclosureResultLinesByContract("Service Preclosure Result", '', TmpServiceContract."Global Dimension 1 Code", LineNo);
                                   UNTIL TmpServiceContract.NEXT = 0;
                               END;
                             END;

               OnAfterGetRecord=VAR
                                  OtherPreclosureResultSeqNo@1100528602 : Integer;
                                BEGIN
                                  IF NOT OnlyServiceOrdersWithoutContract THEN BEGIN
                                    NoOfContracts += 1;
                                    ProgressDialog.UPDATE(1, ROUND(NoOfContracts / TotalNoOfContracts * 9999, 1));
                                    ProgressDialog.UPDATE(2, 0);
                                    ProgressDialog.UPDATE(5, '');
                                    ProgressDialog.UPDATE(6, 0);
                                    IF NOT "Service Preclosure Result".IsContractOnOtherPreclosureResultSeqNo("No.", "Global Dimension 1 Code", OtherPreclosureResultSeqNo) THEN
                                      CreatePreclosureResultLinesByContract("Service Preclosure Result", "No.", "Global Dimension 1 Code", LineNo);
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                ProgressDialog.CLOSE;
                              END;

               ReqFilterFields=No.,Customer No.,Contract Manager,Contract Type }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100528600;;Container;
                  ContainerType=ContentArea }

      { 1100528602;1;Group  ;
                  CaptionML=[ENU=Options;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100528601;2;Field  ;
                  CaptionML=ENU=Only Service Orders Without Contract;
                  SourceExpr=OnlyServiceOrdersWithoutContract }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ServiceContract@1100529660 : Record 11012812;
      ProgressDialog@1100528600 : Dialog;
      TotalNoOfContracts@1100528602 : Integer;
      NoOfContracts@1100528604 : Integer;
      LineNo@1100528603 : Integer;
      OnlyServiceOrdersWithoutContract@1100528605 : Boolean;
      Text000@1100528606 : TextConst 'ENU=Progress:\Contract: @1@@@@@\Period: @2@@@@@\Rounding up:\Type: #5#####\Period: @6@@@@@';

    LOCAL PROCEDURE CreatePreclosureResultLinesByContract@1100528601(IServicePreclosureResult@1100528604 : Record 11072312;IServiceContractNo@1100528600 : Code[20];IGlobalDim1Code@1100529600 : Code[20];VAR IOLineNo@1100528603 : Integer);
    VAR
      ServicePreclosureResultLine@1100528602 : Record 11072313;
      TmpServiceControlPeriod@1100528601 : TEMPORARY Record 11071755;
      TmpServiceCategory@1100528611 : TEMPORARY Record 11071985;
      ServiceOrder@1100528606 : Record 11012823;
      SourceType@1100528607 : Option;
      LineType@1100528605 : Option;
      SourceTypeLineAdded@1100528610 : Boolean;
      TotalNoOfPeriods@1100528608 : Integer;
      NoOfPeriods@1100528609 : Integer;
      TotalNoOfPreclosureLines@1100528612 : Integer;
      NoOfPreclosureLines@1100528613 : Integer;
    BEGIN
      IF NOT ServiceContract.GET(IServiceContractNo) THEN
        ServiceContract.INIT;

      IF FillTmpServiceControlPeriod(IServiceContractNo, TmpServiceControlPeriod) THEN BEGIN
        TotalNoOfPeriods := TmpServiceControlPeriod.COUNT;
        NoOfPeriods := 0;
        REPEAT
          NoOfPeriods += 1;
          IF GUIALLOWED THEN
            ProgressDialog.UPDATE(2, ROUND(NoOfPeriods / TotalNoOfPeriods * 10000, 1));
          IF ServiceContract."Result Calc. on Total Contract" THEN
            IServicePreclosureResult.SetSummaryLevelValues(TRUE, TmpServiceControlPeriod."Starting Date", TmpServiceControlPeriod."Ending Date")
          ELSE
            IServicePreclosureResult.SetSummaryLevelValues(FALSE, 0D, 0D);
          IServicePreclosureResult.AddPreclosureResultLine(
            IServiceContractNo, TmpServiceControlPeriod.Code, ServicePreclosureResultLine."Line Type"::Period, '', 0, '', IGlobalDim1Code, IOLineNo);

          FillTmpServiceCategory(IServiceContractNo, TmpServiceCategory);
          REPEAT
            IF (IServiceContractNo <> '') AND
               ((TmpServiceCategory.Code <> '') OR
                (ServiceContract."Budget Based on" IN [ServiceContract."Budget Based on"::Category, ServiceContract."Budget Based on"::"Category + Maintenance Scheme"]) OR
                ServiceContract."Result Calc. on Total Contract")
            THEN
              IServicePreclosureResult.AddPreclosureResultLine(
                IServiceContractNo, TmpServiceControlPeriod.Code, ServicePreclosureResultLine."Line Type"::"Service Category", TmpServiceCategory.Code, 0, '', IGlobalDim1Code, IOLineNo);
            ServiceOrder.RESET;
            ServiceOrder.SETCURRENTKEY("Service Contract No.");
            ServiceOrder.SETRANGE("Service Contract No.", IServiceContractNo);
            IF IServiceContractNo = '' THEN
              ServiceOrder.SETRANGE("Global Dimension 1 Code", IGlobalDim1Code);
            IF (TmpServiceControlPeriod.Code <> '') OR ServiceContract."Result Calc. on Total Contract" THEN
              ServiceOrder.SETRANGE("Service Control Period Date", TmpServiceControlPeriod."Starting Date", TmpServiceControlPeriod."Ending Date");
            ServiceOrder.SETRANGE("Service Category", TmpServiceCategory.Code);
            ServiceOrder.SETFILTER(Status, '<>%1', ServiceOrder.Status::Cancelled);
            ServiceOrder.SETRANGE("Base Service Order", TRUE);

            FOR SourceType := ServicePreclosureResultLine."Source Type"::Call TO ServicePreclosureResultLine."Source Type"::Direct DO BEGIN
              SourceTypeLineAdded := FALSE;
              IF (IServiceContractNo <> '') AND
                  (((SourceType IN [ServicePreclosureResultLine."Source Type"::Call, ServicePreclosureResultLine."Source Type"::Contract]) AND
                    (ServiceContract."Budget Based on" IN [ServiceContract."Budget Based on"::"Maintenance Scheme"])) OR
                    ((ServiceContract."Budget Based on" IN [ServiceContract."Budget Based on"::Category, ServiceContract."Budget Based on"::"Category + Maintenance Scheme"])) {AND (TmpServiceCategory.Code <> '')})
              THEN BEGIN
                IServicePreclosureResult.AddPreclosureResultLine(
                  IServiceContractNo, TmpServiceControlPeriod.Code, ServicePreclosureResultLine."Line Type"::"Source Type",
                  TmpServiceCategory.Code, SourceType, '', IGlobalDim1Code, IOLineNo);
                IF TmpServiceCategory."Calc. Interim Results by Order" AND
                   ((ServiceContract."Budget Based on" IN [ServiceContract."Budget Based on"::Category, ServiceContract."Budget Based on"::"Category + Maintenance Scheme"]) OR
                    (SourceType IN [ServicePreclosureResultLine."Source Type"::Call, ServicePreclosureResultLine."Source Type"::Contract]))
                THEN
                  IServicePreclosureResult.AddPreclosureResultLine(
                    IServiceContractNo, TmpServiceControlPeriod.Code, ServicePreclosureResultLine."Line Type"::"Service Order",
                    TmpServiceCategory.Code, SourceType, '', IGlobalDim1Code, IOLineNo);
                SourceTypeLineAdded := TRUE;
              END;
              ServiceOrder.SETRANGE("Source Type", SourceType);
              IF NOT ServiceOrder.ISEMPTY THEN BEGIN
                IF NOT SourceTypeLineAdded THEN
                  IServicePreclosureResult.AddPreclosureResultLine(
                    IServiceContractNo, TmpServiceControlPeriod.Code, ServicePreclosureResultLine."Line Type"::"Source Type",
                    TmpServiceCategory.Code, SourceType, '', IGlobalDim1Code, IOLineNo);
                IF TmpServiceCategory."Calc. Interim Results by Order" THEN BEGIN
                  ServiceOrder.FINDSET;
                  REPEAT
                    IServicePreclosureResult.AddPreclosureResultLine(
                      IServiceContractNo, TmpServiceControlPeriod.Code, ServicePreclosureResultLine."Line Type"::"Service Order",
                      ServiceOrder."Service Category", ServiceOrder."Source Type", ServiceOrder."No.", IGlobalDim1Code, IOLineNo);
                  UNTIL ServiceOrder.NEXT = 0;
                END;
              END;
            END;
            RenumberLossLines(IServicePreclosureResult, IOLineNo);
          UNTIL TmpServiceCategory.NEXT = 0;
        UNTIL TmpServiceControlPeriod.NEXT = 0;
      END;

      ServicePreclosureResultLine.RESET;
      ServicePreclosureResultLine.SETRANGE("Posting Date", IServicePreclosureResult."Posting Date");
      ServicePreclosureResultLine.SETRANGE("Seq. No.", IServicePreclosureResult."Seq. No.");
      ServicePreclosureResultLine.SETRANGE("Service Contract No.", IServiceContractNo);
      IF IServiceContractNo = '' THEN
        ServicePreclosureResultLine.SETRANGE("Global Dimension 1 Code", IGlobalDim1Code);
      FOR LineType := ServicePreclosureResultLine."Line Type"::"Source Type" DOWNTO ServicePreclosureResultLine."Line Type"::Period DO BEGIN
        IF GUIALLOWED THEN BEGIN
          ServicePreclosureResultLine."Line Type" := LineType;
          ProgressDialog.UPDATE(5, ServicePreclosureResultLine."Line Type");
        END;
        ServicePreclosureResultLine.SETRANGE("Line Type", LineType);
        TotalNoOfPreclosureLines := ServicePreclosureResultLine.COUNT;
        NoOfPreclosureLines := 0;
        IF ServicePreclosureResultLine.FINDSET(TRUE) THEN
          REPEAT
            IF (ServicePreclosureResultLine."Line Type" < ServicePreclosureResultLine."Line Type"::"Source Type") OR
               (ServicePreclosureResultLine."Calc. Interim Results by Order")
            THEN BEGIN
              NoOfPreclosureLines += 1;
              IF GUIALLOWED THEN
                ProgressDialog.UPDATE(6, ROUND(NoOfPreclosureLines / TotalNoOfPreclosureLines * 10000, 1));
              ServicePreclosureResultLine.DetermineTotals;
              ServicePreclosureResultLine.MODIFY(TRUE);
            END;
          UNTIL ServicePreclosureResultLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FillTmpServiceControlPeriod@1100528625(IServiceContractNo@1100528600 : Code[20];VAR OTmpServiceControlPeriod@1100528601 : Record 11071755) : Boolean;
    VAR
      ServiceControlPeriod@1100528602 : Record 11071755;
      ServiceContractCtrlPeriod@1100528603 : Record 11071746;
      ServiceLedgerEntry@1100528200 : Record 11012819;
      ServiceOrder@1100528201 : Record 11012823;
      ServicePreclosureResultLine@1100529600 : Record 11072313;
      LastUsedDate@1100528202 : Date;
      StartDate@1100529781 : Date;
      EndDate@1100529782 : Date;
    BEGIN
      IF NOT OTmpServiceControlPeriod.ISTEMPORARY THEN
        EXIT;
      OTmpServiceControlPeriod.RESET;
      OTmpServiceControlPeriod.DELETEALL;

      IF IServiceContractNo = '' THEN BEGIN
        ServiceControlPeriod.SETRANGE("Date Finished", 0D);
        ServiceControlPeriod.SETFILTER("Starting Date", '<=%1', WORKDATE);
        IF ServiceControlPeriod.FINDSET THEN
          REPEAT
            OTmpServiceControlPeriod := ServiceControlPeriod;
            OTmpServiceControlPeriod.INSERT;
          UNTIL ServiceControlPeriod.NEXT = 0;
      END ELSE BEGIN
        ServiceContractCtrlPeriod.UpdateControlPeriodsUntil(IServiceContractNo, WORKDATE, TRUE);
        ServiceContractCtrlPeriod.SETRANGE("Service Contract No.", IServiceContractNo);
        IF ServiceContract."Result Calc. on Total Contract" THEN BEGIN
          IF ServiceContractCtrlPeriod.ISEMPTY THEN
            EXIT(FALSE);
          ServiceContractCtrlPeriod.FINDFIRST;
          StartDate := ServiceContractCtrlPeriod."Starting Date";
          ServiceContractCtrlPeriod.FINDLAST;
          EndDate := ServiceContractCtrlPeriod."Ending Date";
          IF ServiceContract."Ending Date" > EndDate THEN
            EndDate := ServiceContract."Ending Date";
          OTmpServiceControlPeriod.Code := '';
          OTmpServiceControlPeriod."Starting Date" := StartDate;
          OTmpServiceControlPeriod."Ending Date" := EndDate;
          OTmpServiceControlPeriod.INSERT;
          EXIT(TRUE);
        END;

        ServiceContractCtrlPeriod.SETRANGE("Date Finished", 0D);
        ServiceContractCtrlPeriod.SETFILTER("Starting Date", '<=%1', WORKDATE);
        IF ServiceContractCtrlPeriod.FINDSET THEN
          REPEAT
            OTmpServiceControlPeriod.Code := ServiceContractCtrlPeriod.Code;
            OTmpServiceControlPeriod."Starting Date" := ServiceContractCtrlPeriod."Starting Date";
            OTmpServiceControlPeriod."Ending Date" := ServiceContractCtrlPeriod."Ending Date";
            OTmpServiceControlPeriod.INSERT;
          UNTIL ServiceContractCtrlPeriod.NEXT = 0;

        //Find Service-orders with control periode after the Workdate,
        //only when costs are booked before workdate.
        //only if a contract is selected. (Which i'm not sure of)
        ServiceOrder.SETRANGE("Service Contract No.",IServiceContractNo);
        ServiceOrder.SETCURRENTKEY("Service Contract No.");
        ServiceOrder.SETFILTER(Status, '<>%1', ServiceOrder.Status::Cancelled);
        ServiceOrder.SETRANGE("Base Service Order", TRUE);
        ServiceOrder.SETFILTER("Service Control Period Date",  '%1..', WORKDATE);
        LastUsedDate := WORKDATE;
        IF ServiceOrder.FINDSET THEN
          REPEAT
            IF ServiceOrder."Service Control Period Date" > LastUsedDate THEN BEGIN
              ServiceLedgerEntry.SETRANGE("Service Contract No.",IServiceContractNo);
              ServiceLedgerEntry.SETRANGE("Service Order No.", ServiceOrder."No.");
              ServiceLedgerEntry.SETFILTER("Posting Date", '..%1', WORKDATE);
              ServiceLedgerEntry.SETCURRENTKEY("Service Contract No.","Posting Date");
              IF ServiceLedgerEntry.FINDLAST THEN BEGIN
                IF "Service-Contract"."Ending Date" <> 0D THEN
                  IF "Service-Contract"."Ending Date" < ServiceOrder."Service Control Period Date" THEN
                    ServiceOrder."Service Control Period Date" := "Service-Contract"."Ending Date";
                ServiceContractCtrlPeriod.UpdateControlPeriodsUntil(IServiceContractNo, ServiceOrder."Service Control Period Date", FALSE);
                ServiceContractCtrlPeriod.SETRANGE("Service Contract No.", IServiceContractNo);
                ServiceContractCtrlPeriod.SETRANGE("Date Finished", 0D);
                ServiceContractCtrlPeriod.SETFILTER("Starting Date", '<=%1', ServiceOrder."Service Control Period Date");
                IF ServiceContractCtrlPeriod.FINDSET THEN
                  REPEAT
                    OTmpServiceControlPeriod.Code := ServiceContractCtrlPeriod.Code;
                    OTmpServiceControlPeriod."Starting Date" := ServiceContractCtrlPeriod."Starting Date";
                    OTmpServiceControlPeriod."Ending Date" := ServiceContractCtrlPeriod."Ending Date";
                    IF OTmpServiceControlPeriod.INSERT THEN;
                  UNTIL ServiceContractCtrlPeriod.NEXT = 0;
                LastUsedDate := ServiceOrder."Service Control Period Date";
              END;
            END;
          UNTIL ServiceOrder.NEXT = 0;

          //find previous Service Preclosure Result Lines to be corrected
          ServicePreclosureResultLine.SETRANGE("Service Contract No.", IServiceContractNo);
          ServicePreclosureResultLine.SETRANGE(Posted, TRUE);
          ServicePreclosureResultLine.SETRANGE("Correction Posted", FALSE);
          ServicePreclosureResultLine.SETRANGE("Line Type", ServicePreclosureResultLine."Line Type"::Period);
          ServicePreclosureResultLine.SETFILTER("Starting Date", '>=%1', LastUsedDate);
          IF ServicePreclosureResultLine.FINDSET THEN
            REPEAT
              IF ServicePreclosureResultLine."Ending Date" > LastUsedDate THEN BEGIN
                IF "Service-Contract"."Ending Date" <> 0D THEN
                  IF "Service-Contract"."Ending Date" < ServicePreclosureResultLine."Ending Date" THEN
                    ServicePreclosureResultLine."Ending Date" := "Service-Contract"."Ending Date";
                ServiceContractCtrlPeriod.UpdateControlPeriodsUntil(IServiceContractNo, ServicePreclosureResultLine."Ending Date", FALSE);
                ServiceContractCtrlPeriod.SETRANGE("Service Contract No.", IServiceContractNo);
                ServiceContractCtrlPeriod.SETRANGE("Date Finished", 0D);
                ServiceContractCtrlPeriod.SETFILTER("Starting Date", '<=%1', ServicePreclosureResultLine."Ending Date");
                IF ServiceContractCtrlPeriod.FINDSET THEN
                  REPEAT
                    OTmpServiceControlPeriod.Code := ServiceContractCtrlPeriod.Code;
                    OTmpServiceControlPeriod."Starting Date" := ServiceContractCtrlPeriod."Starting Date";
                    OTmpServiceControlPeriod."Ending Date" := ServiceContractCtrlPeriod."Ending Date";
                    IF OTmpServiceControlPeriod.INSERT THEN;
                  UNTIL ServiceContractCtrlPeriod.NEXT = 0;
                LastUsedDate := ServicePreclosureResultLine."Ending Date";
              END;
            UNTIL ServicePreclosureResultLine.NEXT = 0;
      END;

      EXIT(OTmpServiceControlPeriod.FINDFIRST);
    END;

    LOCAL PROCEDURE FillTmpServiceCategory@1100528632(IServiceContractNo@1100528601 : Code[20];VAR OTmpServiceCategory@1100528600 : TEMPORARY Record 11071985);
    VAR
      ServiceCategory@1100528602 : Record 11071985;
    BEGIN
      IF NOT OTmpServiceCategory.ISTEMPORARY THEN
        EXIT;
      CLEAR(OTmpServiceCategory);
      OTmpServiceCategory.DELETEALL;
      OTmpServiceCategory.INSERT;
      ServiceCategory.SETFILTER("Service Contract No.", '<>%1&%2', '', IServiceContractNo);
      IF ServiceCategory.FINDSET THEN
        REPEAT
          OTmpServiceCategory := ServiceCategory;
          OTmpServiceCategory.INSERT;
        UNTIL ServiceCategory.NEXT = 0;
      OTmpServiceCategory.FINDFIRST;
    END;

    LOCAL PROCEDURE GetLastUsedLineNoPreclosureResultLine@1100528600(IServicePreclosureResult@1100528600 : Record 11072312) : Integer;
    VAR
      ServicePreclosureResultLine@1100528601 : Record 11072313;
    BEGIN
      ServicePreclosureResultLine.SETRANGE("Posting Date", IServicePreclosureResult."Posting Date");
      ServicePreclosureResultLine.SETRANGE("Seq. No.", IServicePreclosureResult."Seq. No.");
      IF ServicePreclosureResultLine.FINDLAST THEN
        EXIT(ServicePreclosureResultLine."Line No.");
    END;

    LOCAL PROCEDURE RenumberLossLines@1100529660(ServicePreclosureResult@1100529662 : Record 11072312;VAR LocLineNo@1100529660 : Integer);
    VAR
      ServicePreclosureResultLine@1100529661 : Record 11072313;
      NewServicePreclosureResultLine@1100529663 : Record 11072313;
    BEGIN
      ServicePreclosureResultLine.SETRANGE("Posting Date", ServicePreclosureResult."Posting Date");
      ServicePreclosureResultLine.SETRANGE("Seq. No.", ServicePreclosureResult."Seq. No.");
      ServicePreclosureResultLine.SETRANGE("Totaling Type", ServicePreclosureResultLine."Totaling Type"::Loss);
      ServicePreclosureResultLine.SETFILTER("Line No.", '<0');
      IF ServicePreclosureResultLine.ISEMPTY THEN
        EXIT;

      ServicePreclosureResultLine.FINDLAST;
      REPEAT
        LocLineNo += 10000;
        NewServicePreclosureResultLine := ServicePreclosureResultLine;
        NewServicePreclosureResultLine."Line No." := LocLineNo;
        NewServicePreclosureResultLine.INSERT;
      UNTIL ServicePreclosureResultLine.NEXT(-1) = 0;

      ServicePreclosureResultLine.DELETEALL;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

