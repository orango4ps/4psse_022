OBJECT Codeunit 11125987 SH Copy Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528300 : TextConst 'ENU=Copy Process finished.';
      DF@1100528301 : DateFormula;

    PROCEDURE CopyEstimateWorkplanToStandard@1100528311(InterfaceEstimateBudget@1100528300 : TEMPORARY Record 11012174);
    VAR
      SHWorkplan@1100528301 : Record 11126011;
    BEGIN
      SHWorkplan.SETRANGE("Source Type", SHWorkplan."Source Type"::Estimate);
      SHWorkplan.SETRANGE("Source Code", InterfaceEstimateBudget."Estimate No.");
      IF (NOT SHWorkplan.ISEMPTY) THEN
        CreateStandardWorkplanFromEstimate(SHWorkplan, InterfaceEstimateBudget)
      ELSE BEGIN
        CreateStandardWorkplanFromBaseRecipe(InterfaceEstimateBudget);
      END;
      CopyPeriodicalProcessesToStandardWorkplan(SHWorkplan."Source Type", SHWorkplan."Source Code", 0);
    END;

    PROCEDURE CopyPartcipantsFromPreviousWorkplan@1100528316(SHWorkplanParticipant@1100528300 : Record 11126012);
    VAR
      SHWorkplanPrev@1100528302 : Record 11126011;
      SHWorkplan@1100528303 : Record 11126011;
      SHWorkplanParticipantPrev@1100528301 : Record 11126012;
    BEGIN
      SHWorkplanPrev.SETRANGE("Source Type", SHWorkplanParticipant."Source Type");
      SHWorkplanPrev.SETRANGE("Source Code", SHWorkplanParticipant."Source Code");
      SHWorkplanPrev.SETFILTER("Workplan Date", '<%1', SHWorkplanParticipant."Workplan Date");
      SHWorkplanPrev.SETRANGE("Main Process Code", SHWorkplanParticipant."Main Process Code");
      SHWorkplanPrev.SETRANGE("Sub Process Code", SHWorkplanParticipant."Sub Process Code");
      SHWorkplanPrev.SETRANGE("Location Code", SHWorkplanParticipant."Location Code");
      IF (NOT SHWorkplanPrev.FINDLAST) THEN
        EXIT;
      SHWorkplanParticipantPrev.SETRANGE("Source Type", SHWorkplanPrev."Source Type");
      SHWorkplanParticipantPrev.SETRANGE("Source Code", SHWorkplanPrev."Source Code");
      SHWorkplanParticipantPrev.SETRANGE("Workplan Date", SHWorkplanPrev."Workplan Date");
      SHWorkplanParticipantPrev.SETRANGE("Main Process Code", SHWorkplanPrev."Main Process Code");
      SHWorkplanParticipantPrev.SETRANGE("Sub Process Code", SHWorkplanPrev."Sub Process Code");
      SHWorkplanParticipantPrev.SETRANGE("Location Code", SHWorkplanPrev."Location Code");
      IF (NOT SHWorkplanParticipantPrev.FINDSET) THEN
        EXIT;

      SHWorkplan.GET(SHWorkplanParticipant."Source Type", SHWorkplanParticipant."Source Code",
        SHWorkplanParticipant."Workplan Date", SHWorkplanParticipant."Main Process Code",
        SHWorkplanParticipant."Sub Process Code", SHWorkplanParticipant."Location Code");
      IF (SHWorkplan."Max Participants" <> 0) AND (SHWorkplanParticipantPrev.COUNT > SHWorkplan."Max Participants") THEN BEGIN
        SHWorkplan."Max Participants" := SHWorkplanParticipantPrev.COUNT;
        SHWorkplan.MODIFY;
      END;

      REPEAT
        SHWorkplanParticipant.COPY(SHWorkplanParticipantPrev);
        SHWorkplanParticipant."Workplan Date" := SHWorkplan."Workplan Date";
        SHWorkplanParticipant."Invitation Created" := FALSE;
        SHWorkplanParticipant."Invitation Sent By" := 0;
        SHWorkplanParticipant."Invited for Meeting on" := 0DT;
        IF (SHWorkplanParticipant.INSERT) THEN;
      UNTIL (SHWorkplanParticipantPrev.NEXT = 0);
      MESSAGE(Text000);
    END;

    PROCEDURE CopyPeriodicalProcessesToStandardWorkplan@1100528317(SourceType@1100528303 : Option;SourceNo@1100528302 : Code[20];ProcessType@1100528304 : Option);
    VAR
      SHProcess@1100528301 : Record 11126000;
      SHWorkplan@1100528300 : Record 11126011;
    BEGIN
      SHProcess.SETRANGE("Process Type", ProcessType);
      SHProcess.SETRANGE(Periodical, TRUE);
      IF (NOT SHProcess.FINDSET) THEN
        EXIT;

      REPEAT
        IF (NOT SHWorkplan.GET(SourceType, SourceNo, 0D, SHProcess."Main Process Code",
            SHProcess."Sub Process Code", ''))
        THEN BEGIN
          SHWorkplan.INIT;
          SHWorkplan."Source Type" := SourceType;
          SHWorkplan."Source Code" := SourceNo;
          SHWorkplan."Main Process Code" := SHProcess."Main Process Code";
          SHWorkplan."Sub Process Code" := SHProcess."Sub Process Code";
          SHWorkplan.INSERT(TRUE);
        END;
      UNTIL (SHProcess.NEXT = 0);
    END;

    PROCEDURE CopyProjectResponsibilities@1100528318(ProjectNo@1100528301 : Code[20]);
    VAR
      SHCode@1100528302 : Record 11125999;
      SHProjectCodeTo@1100528303 : Record 11126033;
    BEGIN
      SHCode.SETRANGE(Type, SHCode.Type::Responsibility);
      IF (NOT SHCode.FINDSET) THEN
        EXIT;
      SHProjectCodeTo.SETRANGE(Type, SHProjectCodeTo.Type::Responsibility);
      SHProjectCodeTo.SETRANGE("Project No.", ProjectNo);
      SHProjectCodeTo.Responsibility := SHCode.Responsibility;
      IF (SHProjectCodeTo.FINDFIRST) THEN
        EXIT;

      REPEAT
        SHProjectCodeTo.INIT;
        SHProjectCodeTo.Type := SHProjectCodeTo.Type::Responsibility;
        SHProjectCodeTo."Project No." := ProjectNo;
        SHProjectCodeTo.Code := SHCode.Code;
        SHProjectCodeTo.Description := SHCode.Description;
        SHProjectCodeTo.Responsibility := SHCode.Responsibility;
        SHProjectCodeTo.INSERT;
      UNTIL (SHCode.NEXT = 0);
    END;

    PROCEDURE CopyRiskSetToProcess@1100525004(SHRiskText@1100525001 : Record 11126016);
    VAR
      SHRiskSet@1100525002 : Record 11126071;
      SHRiskMeasureText@1100525003 : Record 11126018;
    BEGIN
      SHRiskMeasureText.SETRANGE("Main Process Code", SHRiskText."Main Process Code");
      SHRiskMeasureText.SETRANGE("Sub Process Code", SHRiskText."Sub Process Code");
      SHRiskMeasureText.SETRANGE("Risk Text Line No.", SHRiskText."Line No.");
      IF (SHRiskMeasureText.FINDFIRST) THEN
        EXIT;
      IF (NOT SHRiskSet.GET(SHRiskText."Std Risk Text Line No.")) THEN
        EXIT;

      CopyRiskSetMeasureToProcess(SHRiskSet, SHRiskText);
    END;

    PROCEDURE CopyRiskSetToWorkplan@1100525000(SHWorkplanRiskText@1100525001 : Record 11126020);
    VAR
      SHRiskSet@1100525002 : Record 11126071;
      SHWorkplanRiskMeasureText@1100525003 : Record 11126021;
    BEGIN
      SHWorkplanRiskMeasureText.SETRANGE("Source Type", SHWorkplanRiskText."Source Type");
      SHWorkplanRiskMeasureText.SETRANGE("Source Code", SHWorkplanRiskText."Source Code");
      SHWorkplanRiskMeasureText.SETRANGE("Workplan Date", SHWorkplanRiskText."Workplan Date");
      SHWorkplanRiskMeasureText.SETRANGE("Main Process Code", SHWorkplanRiskText."Main Process Code");
      SHWorkplanRiskMeasureText.SETRANGE("Sub Process Code", SHWorkplanRiskText."Sub Process Code");
      SHWorkplanRiskMeasureText.SETRANGE("Location Code", SHWorkplanRiskText."Location Code");
      SHWorkplanRiskMeasureText.SETRANGE("Risk Text Line No.", SHWorkplanRiskText."Line No.");
      IF (SHWorkplanRiskMeasureText.FINDFIRST) THEN
        EXIT;
      IF (NOT SHRiskSet.GET(SHWorkplanRiskText."Std Risk Text Line No.")) THEN
        EXIT;

      CopyRiskSetMeasureToWorkplan(SHRiskSet, SHWorkplanRiskText);
    END;

    PROCEDURE CopySelectedCompanyWorkplansToWorkplan@1100528314(VAR SHWorkplan@1100529500 : Record 11126011);
    BEGIN
      IF (NOT SHWorkplan.FINDSET) THEN
        EXIT;

      REPEAT
        CopySingleWorkplanToWorkplan(SHWorkplan, '', '');
      UNTIL (SHWorkplan.NEXT = 0);
      MESSAGE(Text000);
    END;

    PROCEDURE CopySelectedStandardWorkplansToWorkplan@1100529501(VAR SHWorkplan@1100529500 : Record 11126011);
    VAR
      SHCopyToLocations@1100529501 : Page 11130689;
    BEGIN
      SHCopyToLocations.SetSelectedSet(SHWorkplan);
      SHCopyToLocations.RUNMODAL;
    END;

    PROCEDURE CopySingleWorkplanToWorkplan@1100528326(SHWorkplan@1100528301 : Record 11126011;LocationCodeIn@1100528300 : Code[20];LocationDescriptionIn@1100528306 : Text[80]);
    VAR
      SHWorkplanTo@1100528305 : Record 11126011;
      StartingDate@1100528307 : Date;
      EndingDate@1100528308 : Date;
      CurrDate@1100528304 : Date;
      FirstTime@1100528302 : Boolean;
    BEGIN
      IF (SHWorkplan."Workplan Interval" <> DF) THEN BEGIN
        SHWorkplan.TESTFIELD("Starting Date");
        SHWorkplan.TESTFIELD("Ending Date");
      END;
      StartingDate := GetWorkplanStartingDate(SHWorkplan, LocationCodeIn);
      IF (SHWorkplan."Workplan Interval" = DF) THEN  BEGIN
        EndingDate := StartingDate;
      END ELSE
        EndingDate := SHWorkplan."Ending Date";
      IF (StartingDate > EndingDate) THEN
        EXIT;

      FirstTime := TRUE;
      CurrDate := GetFirstWorkDayDate(StartingDate);
      REPEAT
        SHWorkplanTo.INIT;
        IF (CopyWorkplan(SHWorkplan, SHWorkplanTo, CurrDate, LocationCodeIn, LocationDescriptionIn)) THEN BEGIN
          CopyParticipants(SHWorkplan, SHWorkplanTo);
          CopyTexts(0, SHWorkplan, SHWorkplanTo);
          CopyProcessTexts(SHWorkplan, SHWorkplanTo);
          CopyProcessTextOptions(SHWorkplan, SHWorkplanTo);
          CopyRiskTexts(SHWorkplan, SHWorkplanTo);
          CopyRiskMeasureTexts(SHWorkplan, SHWorkplanTo);
          CopyRiskMeasurePPMTexts(SHWorkplan, SHWorkplanTo);
          CopyProcessReports(SHWorkplan, SHWorkplanTo);
          CopyWasteTypes(SHWorkplan, SHWorkplanTo);
          CopyPlants(SHWorkplan, SHWorkplanTo);
          IF (FirstTime) THEN BEGIN
            IF (SHWorkplan."Source Type" = SHWorkplan."Source Type"::Project) THEN BEGIN
              CopyProjectResponsibilities(SHWorkplanTo."Source Code");
            END;
            FirstTime := FALSE;
          END;
        END;
        IF (SHWorkplan."Workplan Interval" = DF) THEN
          CurrDate := CurrDate + 10
        ELSE
          CurrDate := GetFirstWorkDayDate(CALCDATE(SHWorkplan."Workplan Interval", CurrDate));
      UNTIL (CurrDate > EndingDate);
    END;

    PROCEDURE CreateStandardWorkplan@1100528312(SHWorkplan@1100528300 : Record 11126011);
    BEGIN
      CopyTextsToStandard(0, SHWorkplan);
      CopyProcessTextsToStandard(SHWorkplan);
      CopyRiskTextsToStandard(SHWorkplan);
      CopyRiskMeasureTextsToStandard(SHWorkplan);
      CopyRiskMeasurePPMTextsToStandard(SHWorkplan);
      CopyProcessReportsToStandard(SHWorkplan);
      CopyWasteTypesToStandard(SHWorkplan);
      CopyPlantsToStandard(SHWorkplan);
    END;

    PROCEDURE FilterPartisipantsOnContactFeature@1100525007(SHWorkplanParticipantIn@1100525000 : Record 11126012);
    VAR
      MarketingSetup@1100525001 : Record 5079;
      ContactBusinessRelation@1100525002 : Record 5054;
      ContactMgtHelpTable@1100525003 : Record 11012754;
      SHWorkplanParticipant@1100525004 : Record 11126012;
      FilteronContactFeature@1100525005 : Page 11012757;
    BEGIN
      FilteronContactFeature.SetShowCopy(TRUE);
      FilteronContactFeature.RUNMODAL;
      IF (NOT FilteronContactFeature.GetUseCopyBtn) THEN
        EXIT;
      FilteronContactFeature.GetSelectedData(ContactMgtHelpTable);
      ContactMgtHelpTable.SETRANGE(Type, ContactMgtHelpTable.Type::Person);
      IF (NOT ContactMgtHelpTable.FINDSET) THEN
        EXIT;
      MarketingSetup.GET;
      MarketingSetup.TESTFIELD("Bus. Rel. Code for Employees");

      REPEAT
      IF (ContactBusinessRelation.GET(ContactMgtHelpTable.Code, MarketingSetup."Bus. Rel. Code for Employees")) THEN BEGIN
        IF (ContactBusinessRelation."Link to Table" = ContactBusinessRelation."Link to Table"::Employee) THEN BEGIN
          SHWorkplanParticipant.INIT;
          SHWorkplanParticipant."Source Type" := SHWorkplanParticipantIn."Source Type";
          SHWorkplanParticipant."Source Code" := SHWorkplanParticipantIn."Source Code";
          SHWorkplanParticipant."Workplan Date" := SHWorkplanParticipantIn."Workplan Date";
          SHWorkplanParticipant."Main Process Code" := SHWorkplanParticipantIn."Main Process Code";
          SHWorkplanParticipant."Sub Process Code" := SHWorkplanParticipantIn."Sub Process Code";
          SHWorkplanParticipant."Location Code" := SHWorkplanParticipantIn."Location Code";
          SHWorkplanParticipant."Employee No." := ContactBusinessRelation."No.";
          IF (SHWorkplanParticipant.INSERT) THEN;
        END;
      END;
      UNTIL (ContactMgtHelpTable.NEXT = 0);
      MESSAGE(Text000);
    END;

    PROCEDURE GenerateStandardWorkplanFromEstimate@1100528300(Estimate@1100528300 : Record 11012151);
    BEGIN
      IF (Estimate."RAW Estimate") THEN
        GenerateStandardWorkplanFromEstimateRAW(Estimate)
      ELSE
        GenerateStandardWorkplanFromEstimateNotRAW(Estimate);
    END;

    PROCEDURE GenerateWorkplanWasteFlow@1100529503(SHWorkplanWasteType@1100529500 : Record 11126028);
    VAR
      WasteFlow@1100529501 : Record 11126030;
      QASetup@1100529503 : Record 11126001;
      Job@1100529504 : Record 11072003;
    BEGIN
      IF (SHWorkplanWasteType."Source Type" <> SHWorkplanWasteType."Source Type"::Project) THEN
        EXIT;

      WasteFlow.SETRANGE("Project No.", SHWorkplanWasteType."Source Code");
      WasteFlow.SETRANGE("Workplan Date", SHWorkplanWasteType."Workplan Date");
      WasteFlow.SETRANGE("Main Process Code", SHWorkplanWasteType."Main Process Code");
      WasteFlow.SETRANGE("Sub Process Code", SHWorkplanWasteType."Sub Process Code");
      WasteFlow.SETRANGE("Location Code", SHWorkplanWasteType."Location Code");
      WasteFlow.SETRANGE("Waste Type Code", SHWorkplanWasteType."Std Waste Type Code");
      IF (WasteFlow.FINDFIRST) THEN
        EXIT;
      QASetup.GET;
      QASetup.TESTFIELD("Waste Flow Nos.");
      SHWorkplanWasteType.CALCFIELDS("Std Waste Type Description");
      Job.GET(SHWorkplanWasteType."Source Code");

      WasteFlow.INIT;
      WasteFlow.Description := COPYSTR(STRSUBSTNO('%1 - %2', SHWorkplanWasteType."Std Waste Type Description", Job.Description),
        1, MAXSTRLEN(WasteFlow.Description));
      WasteFlow."Project No." := SHWorkplanWasteType."Source Code";
      WasteFlow."Waste Type Code" := SHWorkplanWasteType."Std Waste Type Code";
      WasteFlow."No. Series" := QASetup."Waste Flow Nos.";
      WasteFlow."Workplan Date" := SHWorkplanWasteType."Workplan Date";
      WasteFlow."Main Process Code" := SHWorkplanWasteType."Main Process Code";
      WasteFlow."Sub Process Code" := SHWorkplanWasteType."Sub Process Code";
      WasteFlow."Location Code" := SHWorkplanWasteType."Location Code";
      WasteFlow.INSERT(TRUE);
    END;

    PROCEDURE GetFirstWorkDayDate@1100528313(CheckDate@1100528300 : Date) : Date;
    VAR
      CompanyInformation@1100528302 : Record 79;
      BaseCalendar@1100528303 : Record 11072014;
      CalendarMgt@1100528312 : Codeunit 7600;
      Description@1100528311 : Text[50];
      NonWorkingDay@1100528310 : Boolean;
      DayOfWeek@1100528309 : Integer;
      WorkingHours@1100528308 : Decimal;
      WorkFrom@1100528307 : Time;
      WorkUntil@1100528306 : Time;
      PauseFrom@1100528305 : Time;
      PauseUntil@1100528304 : Time;
      NewDate@1100528301 : Date;
    BEGIN
      NewDate := CheckDate;
      CompanyInformation.GET;
      CompanyInformation.TESTFIELD("Base Calendar Code");
      BaseCalendar.GET(CompanyInformation."Base Calendar Code");
      DayOfWeek := DATE2DWY(NewDate, 1);

      BaseCalendar.GetWorkingTimeForWeekDay(DayOfWeek,WorkingHours,WorkFrom,WorkUntil,PauseFrom,PauseUntil);
      NonWorkingDay := CalendarMgt.CheckDateStatus(CompanyInformation."Base Calendar Code",NewDate,Description);
      WHILE (WorkingHours = 0) OR NonWorkingDay DO BEGIN
        NewDate := CALCDATE('1D',NewDate);
        DayOfWeek := DATE2DWY(NewDate, 1);
        BaseCalendar.GetWorkingTimeForWeekDay(DayOfWeek,WorkingHours,WorkFrom,WorkUntil,PauseFrom,PauseUntil);
        NonWorkingDay := CalendarMgt.CheckDateStatus(CompanyInformation."Base Calendar Code",NewDate,Description);
      END;
      EXIT(NewDate);
    END;

    LOCAL PROCEDURE "---Locals---"@1100528310();
    BEGIN
    END;

    LOCAL PROCEDURE CopyParticipants@1100525001(SHWorkplanFrom@1100528305 : Record 11126011;SHWorkplanTo@1100528304 : Record 11126011);
    VAR
      SHWorkplanParticipantFrom@1100528302 : Record 11126012;
      SHWorkplanParticipantTo@1100528301 : Record 11126012;
    BEGIN
      SHWorkplanParticipantFrom.SETRANGE("Source Type", SHWorkplanFrom."Source Type");
      SHWorkplanParticipantFrom.SETRANGE("Source Code", SHWorkplanFrom."Source Code");
      SHWorkplanParticipantFrom.SETRANGE("Workplan Date", SHWorkplanFrom."Workplan Date");
      SHWorkplanParticipantFrom.SETRANGE("Main Process Code", SHWorkplanFrom."Main Process Code");
      SHWorkplanParticipantFrom.SETRANGE("Sub Process Code", SHWorkplanFrom."Sub Process Code");
      SHWorkplanParticipantFrom.SETRANGE("Location Code", SHWorkplanFrom."Location Code");
      IF (NOT SHWorkplanParticipantFrom.FINDSET) THEN
        EXIT;

      REPEAT
        SHWorkplanParticipantTo.COPY(SHWorkplanParticipantFrom);
        SHWorkplanParticipantTo."Source Type" := SHWorkplanTo."Source Type";
        SHWorkplanParticipantTo."Source Code" := SHWorkplanTo."Source Code";
        SHWorkplanParticipantTo."Workplan Date" := SHWorkplanTo."Workplan Date";
        SHWorkplanParticipantTo."Location Code" := SHWorkplanTo."Location Code";
        SHWorkplanParticipantTo.INSERT;
      UNTIL (SHWorkplanParticipantFrom.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyTexts@1100528333(TextType@1100528300 : Option;SHWorkplanFrom@1100528305 : Record 11126011;SHWorkplanTo@1100528304 : Record 11126011);
    VAR
      SHWorkplanTextFrom@1100528302 : Record 11126013;
      SHWorkplanTextTo@1100528301 : Record 11126013;
    BEGIN
      SHWorkplanTextFrom.SETRANGE("Text Type", TextType);
      SHWorkplanTextFrom.SETRANGE("Source Type", SHWorkplanFrom."Source Type");
      SHWorkplanTextFrom.SETRANGE("Source Code", SHWorkplanFrom."Source Code");
      SHWorkplanTextFrom.SETRANGE("Workplan Date", SHWorkplanFrom."Workplan Date");
      SHWorkplanTextFrom.SETRANGE("Main Process Code", SHWorkplanFrom."Main Process Code");
      SHWorkplanTextFrom.SETRANGE("Sub Process Code", SHWorkplanFrom."Sub Process Code");
      SHWorkplanTextFrom.SETRANGE("Location Code", SHWorkplanFrom."Location Code");
      IF (NOT SHWorkplanTextFrom.FINDSET) THEN
        EXIT;

      REPEAT
        SHWorkplanTextTo.COPY(SHWorkplanTextFrom);
        SHWorkplanTextTo."Source Type" := SHWorkplanTo."Source Type";
        SHWorkplanTextTo."Source Code" := SHWorkplanTo."Source Code";
        SHWorkplanTextTo."Workplan Date" := SHWorkplanTo."Workplan Date";
        SHWorkplanTextTo."Location Code" := SHWorkplanTo."Location Code";
        SHWorkplanTextTo.INSERT;
      UNTIL (SHWorkplanTextFrom.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyTextsToStandard@1100528307(TextType@1100528300 : Option;SHWorkplan@1100528301 : Record 11126011);
    VAR
      SHText@1100528305 : Record 11126002;
      SHWorkplanText@1100528302 : Record 11126013;
    BEGIN
      SHText.SETRANGE("Text Type", TextType);
      SHText.SETRANGE("Main Process Code", SHWorkplan."Main Process Code");
      SHText.SETRANGE("Sub Process Code", SHWorkplan."Sub Process Code");
      IF (NOT SHText.FINDSET) THEN
        EXIT;

      REPEAT
        SHWorkplanText.INIT;
        SHWorkplanText."Text Type" := SHText."Text Type";
        SHWorkplanText."Source Type" := SHWorkplan."Source Type";
        SHWorkplanText."Source Code" := SHWorkplan."Source Code";
        SHWorkplanText."Workplan Date" :=  SHWorkplan."Workplan Date";
        SHWorkplanText."Main Process Code" := SHText."Main Process Code";
        SHWorkplanText."Sub Process Code" := SHText."Sub Process Code";
        SHWorkplanText."Line No." := SHText."Line No.";
        SHWorkplanText.Text := SHText.Text;
        SHWorkplanText."Line Break" := SHText."Line Break";
        SHWorkplanText."Standard Text" := TRUE;
        SHWorkplanText.INSERT;
      UNTIL (SHText.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyPlants@1100528337(SHWorkplanFrom@1100528305 : Record 11126011;SHWorkplanTo@1100528304 : Record 11126011);
    VAR
      SHWorkplanPlantFrom@1100528301 : Record 11126029;
      SHWorkplanPlantTo@1100528302 : Record 11126029;
    BEGIN
      SHWorkplanPlantFrom.SETRANGE("Source Type", SHWorkplanFrom."Source Type");
      SHWorkplanPlantFrom.SETRANGE("Source Code", SHWorkplanFrom."Source Code");
      SHWorkplanPlantFrom.SETRANGE("Workplan Date", SHWorkplanFrom."Workplan Date");
      SHWorkplanPlantFrom.SETRANGE("Main Process Code", SHWorkplanFrom."Main Process Code");
      SHWorkplanPlantFrom.SETRANGE("Sub Process Code", SHWorkplanFrom."Sub Process Code");
      SHWorkplanPlantFrom.SETRANGE("Location Code", SHWorkplanFrom."Location Code");
      IF (NOT SHWorkplanPlantFrom.FINDSET) THEN
        EXIT;

      REPEAT
        SHWorkplanPlantTo.COPY(SHWorkplanPlantFrom);
        SHWorkplanPlantTo."Source Type" := SHWorkplanTo."Source Type";
        SHWorkplanPlantTo."Source Code" := SHWorkplanTo."Source Code";
        SHWorkplanPlantTo."Workplan Date" := SHWorkplanTo."Workplan Date";
        SHWorkplanPlantTo."Location Code" := SHWorkplanTo."Location Code";
        SHWorkplanPlantTo.INSERT;
      UNTIL (SHWorkplanPlantFrom.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyPlantsToStandard@1100528339(SHWorkplan@1100528300 : Record 11126011);
    VAR
      SHPlant@1100528304 : Record 11126027;
      SHCode@1100528302 : Record 11125999;
      SHWorkplanPlant@1100528301 : Record 11126029;
    BEGIN
      SHPlant.SETRANGE("Main Process Code", SHWorkplan."Main Process Code");
      SHPlant.SETRANGE("Sub Process Code", SHWorkplan."Sub Process Code");
      IF (NOT SHPlant.FINDSET) THEN
        EXIT;

      REPEAT
        IF (SHCode.GET(SHCode.Type::Plant, SHPlant."Plant Code")) THEN BEGIN
          SHWorkplanPlant.INIT;
          SHWorkplanPlant."Source Type" := SHWorkplan."Source Type";
          SHWorkplanPlant."Source Code" := SHWorkplan."Source Code";
          SHWorkplanPlant."Workplan Date" :=  SHWorkplan."Workplan Date";
          SHWorkplanPlant."Main Process Code" := SHPlant."Main Process Code";
          SHWorkplanPlant."Sub Process Code" := SHPlant."Sub Process Code";
          SHWorkplanPlant."Line No." := SHPlant."Line No.";
          SHWorkplanPlant."Std Plant Code" := SHCode.Code;
          SHWorkplanPlant."Delete Allowed" := SHCode."Delete Allowed";
          SHWorkplanPlant."Standard Text" := TRUE;
          SHWorkplanPlant.INSERT;
        END;
      UNTIL (SHPlant.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyProcessReports@1100528332(SHWorkplanFrom@1100528304 : Record 11126011;SHWorkplanTo@1100528303 : Record 11126011);
    VAR
      SHWorkplanProcessReportFrom@1100528301 : Record 11126024;
      SHWorkplanProcessReportTo@1100529501 : Record 11126024;
    BEGIN
      SHWorkplanProcessReportFrom.SETRANGE("Source Type", SHWorkplanFrom."Source Type");
      SHWorkplanProcessReportFrom.SETRANGE("Source Code", SHWorkplanFrom."Source Code");
      SHWorkplanProcessReportFrom.SETRANGE("Workplan Date", SHWorkplanFrom."Workplan Date");
      SHWorkplanProcessReportFrom.SETRANGE("Main Process Code", SHWorkplanFrom."Main Process Code");
      SHWorkplanProcessReportFrom.SETRANGE("Sub Process Code", SHWorkplanFrom."Sub Process Code");
      SHWorkplanProcessReportFrom.SETRANGE("Location Code", SHWorkplanFrom."Location Code");
      IF (NOT SHWorkplanProcessReportFrom.FINDSET) THEN
        EXIT;

      REPEAT
        IF (SHWorkplanProcessReportFrom."Print Interval" <> DF) THEN BEGIN
          SHWorkplanProcessReportFrom.TESTFIELD("First Print Date");
          SHWorkplanProcessReportFrom.TESTFIELD("Last Print Date");
        END;
        SHWorkplanProcessReportTo.COPY(SHWorkplanProcessReportFrom);
        SHWorkplanProcessReportTo."Source Type" := SHWorkplanTo."Source Type";
        SHWorkplanProcessReportTo."Source Code" := SHWorkplanTo."Source Code";
        SHWorkplanProcessReportTo."Workplan Date" := SHWorkplanTo."Workplan Date";
        SHWorkplanProcessReportTo."Location Code" := SHWorkplanTo."Location Code";
        SHWorkplanProcessReportTo.INSERT;
      UNTIL (SHWorkplanProcessReportFrom.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyProcessReportsToStandard@1100528308(SHWorkplan@1100528303 : Record 11126011);
    VAR
      Job@1100528300 : Record 11072003;
      Estimate@1100528304 : Record 11012151;
      SHProcessReport@1100528302 : Record 11126023;
      SHWorkplanProcessReport@1100528301 : Record 11126024;
      SHWorkplanProcessReport2@1100529501 : Record 11126024;
      StartingDate@1100528305 : Date;
      EndingDate@1100528306 : Date;
    BEGIN
      SHProcessReport.SETRANGE("Main Process Code", SHWorkplan."Main Process Code");
      SHProcessReport.SETRANGE("Sub Process Code", SHWorkplan."Sub Process Code");
      IF (NOT SHProcessReport.FINDSET) THEN
        EXIT;

      REPEAT
        StartingDate := 0D;
        EndingDate := 0D;

        CASE SHWorkplan."Source Type" OF
          SHWorkplan."Source Type"::Project: BEGIN
            Job.GET(SHWorkplan."Source Code");
            StartingDate := Job."Starting Date";
            EndingDate := Job."Ending Date";
          END;
          SHWorkplan."Source Type"::Estimate: BEGIN
            Estimate.GET(SHWorkplan."Source Code");
            StartingDate := Estimate."Starting Date";
            EndingDate := Estimate."Ending Date";
          END;
        END;
        IF (NOT SHWorkplanProcessReport2.GET(SHWorkplan."Source Type", SHWorkplan."Source Code",
            SHWorkplan."Workplan Date", SHProcessReport."Main Process Code", SHProcessReport."Sub Process Code",
            '', SHProcessReport."Line No."))
        THEN
          SHWorkplanProcessReport2.INIT;

        SHWorkplanProcessReport.INIT;
        SHWorkplanProcessReport."Source Type" := SHWorkplan."Source Type";
        SHWorkplanProcessReport."Source Code" := SHWorkplan."Source Code";
        SHWorkplanProcessReport."Workplan Date" :=  SHWorkplan."Workplan Date";
        SHWorkplanProcessReport."Main Process Code" := SHProcessReport."Main Process Code";
        SHWorkplanProcessReport."Sub Process Code" := SHProcessReport."Sub Process Code";
        SHWorkplanProcessReport."Line No." := SHProcessReport."Line No.";
        SHWorkplanProcessReport."Document Source Type" := SHProcessReport."Source Type";
        SHWorkplanProcessReport."Document Group Code" := SHProcessReport."Document Group Code";
        SHWorkplanProcessReport."Document Template Code" := SHProcessReport."Document Template Code";
        SHWorkplanProcessReport."Report ID" := SHProcessReport."Report ID";
        SHWorkplanProcessReport."Print Interval" := SHProcessReport."Print Interval";
        IF (SHProcessReport."Print Interval" <> DF) THEN BEGIN
          IF (SHWorkplanProcessReport."Location Code" = '') THEN BEGIN
            SHWorkplanProcessReport."First Print Date" := StartingDate;
            SHWorkplanProcessReport."Last Print Date" := EndingDate;
          END ELSE BEGIN
            SHWorkplanProcessReport."First Print Date" := SHWorkplanProcessReport2."First Print Date";
            SHWorkplanProcessReport."Last Print Date" := SHWorkplanProcessReport2."Last Print Date";
          END;
        END;
        SHWorkplanProcessReport."Delete Allowed" := SHProcessReport."Delete Allowed";
        SHWorkplanProcessReport."Standard Report" := TRUE;

        SHWorkplanProcessReport.INSERT;
      UNTIL (SHProcessReport.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyProcessTexts@1100528331(SHWorkplanFrom@1100528305 : Record 11126011;SHWorkplanTo@1100528304 : Record 11126011);
    VAR
      SHWorkplanProcessTextFrom@1100528301 : Record 11126014;
      SHWorkplanProcessTextTo@1100528302 : Record 11126014;
    BEGIN
      SHWorkplanProcessTextFrom.SETRANGE("Source Type", SHWorkplanFrom."Source Type");
      SHWorkplanProcessTextFrom.SETRANGE("Source Code", SHWorkplanFrom."Source Code");
      SHWorkplanProcessTextFrom.SETRANGE("Workplan Date", SHWorkplanFrom."Workplan Date");
      SHWorkplanProcessTextFrom.SETRANGE("Main Process Code", SHWorkplanFrom."Main Process Code");
      SHWorkplanProcessTextFrom.SETRANGE("Sub Process Code", SHWorkplanFrom."Sub Process Code");
      SHWorkplanProcessTextFrom.SETRANGE("Location Code", SHWorkplanFrom."Location Code");
      IF (NOT SHWorkplanProcessTextFrom.FINDSET) THEN
        EXIT;

      REPEAT
        SHWorkplanProcessTextTo.COPY(SHWorkplanProcessTextFrom);
        SHWorkplanProcessTextTo."Source Type" := SHWorkplanTo."Source Type";
        SHWorkplanProcessTextTo."Source Code" := SHWorkplanTo."Source Code";
        SHWorkplanProcessTextTo."Workplan Date" := SHWorkplanTo."Workplan Date";
        SHWorkplanProcessTextTo."Location Code" := SHWorkplanTo."Location Code";
        SHWorkplanProcessTextTo.INSERT;
      UNTIL (SHWorkplanProcessTextFrom.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyProcessTextsToStandard@1100528305(SHWorkplan@1100528300 : Record 11126011);
    VAR
      SHProcessText@1100528304 : Record 11126010;
      SHStandardProcessText@1100528302 : Record 11126003;
      SHWorkplanProcessText@1100528301 : Record 11126014;
    BEGIN
      SHProcessText.SETRANGE("Main Process Code", SHWorkplan."Main Process Code");
      SHProcessText.SETRANGE("Sub Process Code", SHWorkplan."Sub Process Code");
      IF (NOT SHProcessText.FINDSET) THEN
        EXIT;

      REPEAT
        IF (SHStandardProcessText.GET(SHProcessText."Std Process Line No.")) THEN BEGIN
          SHWorkplanProcessText.INIT;
          SHWorkplanProcessText."Source Type" := SHWorkplan."Source Type";
          SHWorkplanProcessText."Source Code" := SHWorkplan."Source Code";
          SHWorkplanProcessText."Workplan Date" :=  SHWorkplan."Workplan Date";
          SHWorkplanProcessText."Main Process Code" := SHProcessText."Main Process Code";
          SHWorkplanProcessText."Sub Process Code" := SHProcessText."Sub Process Code";
          SHWorkplanProcessText."Line No." := SHProcessText."Line No.";
          SHWorkplanProcessText."Std Process Text Line No." := SHProcessText."Std Process Line No.";
          SHWorkplanProcessText.Text := SHStandardProcessText.Text;
          SHWorkplanProcessText.Type := SHStandardProcessText.Type;
          SHWorkplanProcessText."Unit Of Measure" := SHStandardProcessText."Unit Of Measure";
          SHWorkplanProcessText."Delete Allowed" := SHStandardProcessText."Delete Allowed";
          SHWorkplanProcessText."Standard Text" := TRUE;
          SHWorkplanProcessText.INSERT;
          IF (SHStandardProcessText.Type = SHStandardProcessText.Type::Option) THEN
            CopyProcessTextOptionsToStandard(SHWorkplanProcessText);
        END;
      UNTIL (SHProcessText.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyProcessTextOptions@1100528330(SHWorkplanFrom@1100528305 : Record 11126011;SHWorkplanTo@1100528304 : Record 11126011);
    VAR
      SHWorkplanProcessTxtOptionFrom@1100528300 : Record 11126015;
      SHWorkplanProcessTxtOptionTo@1100528301 : Record 11126015;
    BEGIN
      SHWorkplanProcessTxtOptionFrom.SETRANGE("Source Type", SHWorkplanFrom."Source Type");
      SHWorkplanProcessTxtOptionFrom.SETRANGE("Source Code", SHWorkplanFrom."Source Code");
      SHWorkplanProcessTxtOptionFrom.SETRANGE("Workplan Date", SHWorkplanFrom."Workplan Date");
      SHWorkplanProcessTxtOptionFrom.SETRANGE("Main Process Code", SHWorkplanFrom."Main Process Code");
      SHWorkplanProcessTxtOptionFrom.SETRANGE("Sub Process Code", SHWorkplanFrom."Sub Process Code");
      SHWorkplanProcessTxtOptionFrom.SETRANGE("Location Code", SHWorkplanFrom."Location Code");
      IF (NOT SHWorkplanProcessTxtOptionFrom.FINDSET) THEN
        EXIT;

      REPEAT
        SHWorkplanProcessTxtOptionTo.COPY(SHWorkplanProcessTxtOptionFrom);
        SHWorkplanProcessTxtOptionTo."Source Type" := SHWorkplanTo."Source Type";
        SHWorkplanProcessTxtOptionTo."Source Code" := SHWorkplanTo."Source Code";
        SHWorkplanProcessTxtOptionTo."Workplan Date" := SHWorkplanTo."Workplan Date";
        SHWorkplanProcessTxtOptionTo."Location Code" := SHWorkplanTo."Location Code";
        SHWorkplanProcessTxtOptionTo.INSERT;
      UNTIL (SHWorkplanProcessTxtOptionFrom.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyProcessTextOptionsToStandard@1100528309(SHWorkplanProcessText@1100528305 : Record 11126014);
    VAR
      SHStdProcessTextOption@1100528303 : Record 11126004;
      SHWorkplanProcessTxtOption@1100528300 : Record 11126015;
    BEGIN
      SHStdProcessTextOption.SETRANGE("Std Process Text Line No.", SHWorkplanProcessText."Std Process Text Line No.");
      IF (NOT SHStdProcessTextOption.FINDSET) THEN
        EXIT;

      REPEAT
        SHWorkplanProcessTxtOption.INIT;
        SHWorkplanProcessTxtOption."Source Type" := SHWorkplanProcessText."Source Type";
        SHWorkplanProcessTxtOption."Source Code" := SHWorkplanProcessText."Source Code";
        SHWorkplanProcessTxtOption."Workplan Date" := SHWorkplanProcessText."Workplan Date";
        SHWorkplanProcessTxtOption."Main Process Code" := SHWorkplanProcessText."Main Process Code";
        SHWorkplanProcessTxtOption."Sub Process Code" := SHWorkplanProcessText."Sub Process Code";
        SHWorkplanProcessTxtOption."Workplan Process Text Line No." := SHWorkplanProcessText."Line No.";
        SHWorkplanProcessTxtOption.Code := SHStdProcessTextOption.Code;
        SHWorkplanProcessTxtOption.Description := SHStdProcessTextOption.Description;
        SHWorkplanProcessTxtOption."Delete Allowed" := SHStdProcessTextOption."Delete Allowed";
        SHWorkplanProcessTxtOption."Standard Option" := TRUE;
        SHWorkplanProcessTxtOption.INSERT;
      UNTIL (SHStdProcessTextOption.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyRiskSetMeasureToProcess@1100525005(SHRiskSet@1100525000 : Record 11126071;SHRiskText@1100525001 : Record 11126016);
    VAR
      SHRiskSetMeasure@1100525002 : Record 11126072;
      SHRiskMeasureText@1100525003 : Record 11126018;
    BEGIN
      SHRiskSetMeasure.SETRANGE("Risk Set Line No.", SHRiskSet."Std Risk Text Line No.");
      IF (NOT SHRiskSetMeasure.FINDSET) THEN
        EXIT;

      REPEAT
        SHRiskSetMeasure.CALCFIELDS("Std Risk Measure Text");
        SHRiskMeasureText.INIT;
        SHRiskMeasureText."Main Process Code" := SHRiskText."Main Process Code";
        SHRiskMeasureText."Sub Process Code" := SHRiskText."Sub Process Code";
        SHRiskMeasureText."Risk Text Line No." := SHRiskText."Line No.";
        SHRiskMeasureText."Line No." := SHRiskSetMeasure."Line No.";
        SHRiskMeasureText."Std Risk Measure Text Line No." := SHRiskSetMeasure."Std Risk Measure Text Line No.";
        SHRiskMeasureText.INSERT;
        CopyRiskSetMeasurePPMToProcess(SHRiskSetMeasure, SHRiskMeasureText);
      UNTIL (SHRiskSetMeasure.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyRiskSetMeasureToWorkplan@1100525002(SHRiskSet@1100525000 : Record 11126071;SHWorkplanRiskText@1100525001 : Record 11126020);
    VAR
      SHRiskSetMeasure@1100525002 : Record 11126072;
      SHWorkplanRiskMeasureText@1100525003 : Record 11126021;
    BEGIN
      SHRiskSetMeasure.SETRANGE("Risk Set Line No.", SHRiskSet."Std Risk Text Line No.");
      IF (NOT SHRiskSetMeasure.FINDSET) THEN
        EXIT;

      REPEAT
        SHRiskSetMeasure.CALCFIELDS("Std Risk Measure Text");
        SHWorkplanRiskMeasureText.INIT;
        SHWorkplanRiskMeasureText."Source Type" := SHWorkplanRiskText."Source Type";
        SHWorkplanRiskMeasureText."Source Code" := SHWorkplanRiskText."Source Code";
        SHWorkplanRiskMeasureText."Workplan Date" := SHWorkplanRiskText."Workplan Date";
        SHWorkplanRiskMeasureText."Main Process Code" := SHWorkplanRiskText."Main Process Code";
        SHWorkplanRiskMeasureText."Sub Process Code" := SHWorkplanRiskText."Sub Process Code";
        SHWorkplanRiskMeasureText."Location Code" := SHWorkplanRiskText."Location Code";
        SHWorkplanRiskMeasureText."Risk Text Line No." := SHWorkplanRiskText."Line No.";
        SHWorkplanRiskMeasureText."Line No." := SHRiskSetMeasure."Line No.";
        SHWorkplanRiskMeasureText."Std Risk Measure Text Line No." := SHRiskSetMeasure."Std Risk Measure Text Line No.";
        SHWorkplanRiskMeasureText.Text := SHRiskSetMeasure."Std Risk Measure Text";
        SHWorkplanRiskMeasureText.INSERT;
        CopyRiskSetMeasurePPMToWorkplan(SHRiskSetMeasure, SHWorkplanRiskMeasureText);
      UNTIL (SHRiskSetMeasure.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyRiskSetMeasurePPMToProcess@1100525006(SHRiskSetMeasure@1100525001 : Record 11126072;SHRiskMeasureText@1100525000 : Record 11126018);
    VAR
      SHRiskSetMeasurePPM@1100525002 : Record 11126073;
      SHRiskMeasurePPMText@1100525003 : Record 11126019;
    BEGIN
      SHRiskSetMeasurePPM.SETRANGE("Risk Set Line No.", SHRiskSetMeasure."Risk Set Line No.");
      SHRiskSetMeasurePPM.SETRANGE("Risk Measure Set Line No.", SHRiskSetMeasure."Line No.");
      IF (NOT SHRiskSetMeasurePPM.FINDSET) THEN
        EXIT;

      REPEAT
        SHRiskSetMeasurePPM.CALCFIELDS("Std Risk Measure PPM Text");
        SHRiskMeasurePPMText.INIT;
        SHRiskMeasurePPMText."Main Process Code" := SHRiskMeasureText."Main Process Code";
        SHRiskMeasurePPMText."Sub Process Code" := SHRiskMeasureText."Sub Process Code";
        SHRiskMeasurePPMText."Risk Text Line No." := SHRiskMeasureText."Risk Text Line No.";
        SHRiskMeasurePPMText."Risk Measure Text Line No." := SHRiskMeasureText."Line No.";
        SHRiskMeasurePPMText."Line No." := SHRiskSetMeasurePPM."Line No.";
        SHRiskMeasurePPMText."Std Risk Measure PPM Line No." := SHRiskSetMeasurePPM."Std Risk Measure PPM Line No.";
        SHRiskMeasurePPMText.INSERT;
      UNTIL (SHRiskSetMeasurePPM.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyRiskSetMeasurePPMToWorkplan@1100525003(SHRiskSetMeasure@1100525001 : Record 11126072;SHWorkplanRiskMeasureText@1100525000 : Record 11126021);
    VAR
      SHRiskSetMeasurePPM@1100525002 : Record 11126073;
      SHWorkpRiskMeasurePPMText@1100525003 : Record 11126022;
    BEGIN
      SHRiskSetMeasurePPM.SETRANGE("Risk Set Line No.", SHRiskSetMeasure."Risk Set Line No.");
      SHRiskSetMeasurePPM.SETRANGE("Risk Measure Set Line No.", SHRiskSetMeasure."Line No.");
      IF (NOT SHRiskSetMeasurePPM.FINDSET) THEN
        EXIT;

      REPEAT
        SHRiskSetMeasurePPM.CALCFIELDS("Std Risk Measure PPM Text");
        SHWorkpRiskMeasurePPMText.INIT;
        SHWorkpRiskMeasurePPMText."Source Type" := SHWorkplanRiskMeasureText."Source Type";
        SHWorkpRiskMeasurePPMText."Source Code" := SHWorkplanRiskMeasureText."Source Code";
        SHWorkpRiskMeasurePPMText."Workplan Date" := SHWorkplanRiskMeasureText."Workplan Date";
        SHWorkpRiskMeasurePPMText."Main Process Code" := SHWorkplanRiskMeasureText."Main Process Code";
        SHWorkpRiskMeasurePPMText."Sub Process Code" := SHWorkplanRiskMeasureText."Sub Process Code";
        SHWorkpRiskMeasurePPMText."Location Code" := SHWorkplanRiskMeasureText."Location Code";
        SHWorkpRiskMeasurePPMText."Risk Text Line No." := SHWorkplanRiskMeasureText."Risk Text Line No.";
        SHWorkpRiskMeasurePPMText."Risk Measure Text Line No." := SHWorkplanRiskMeasureText."Line No.";
        SHWorkpRiskMeasurePPMText."Line No." := SHRiskSetMeasurePPM."Line No.";
        SHWorkpRiskMeasurePPMText."Std Risk Measure PPM Line No." := SHRiskSetMeasurePPM."Std Risk Measure PPM Line No.";
        SHWorkpRiskMeasurePPMText.Text := SHRiskSetMeasurePPM."Std Risk Measure PPM Text";
        SHWorkpRiskMeasurePPMText.INSERT;
      UNTIL (SHRiskSetMeasurePPM.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyRiskTexts@1100528329(SHWorkplanFrom@1100528305 : Record 11126011;SHWorkplanTo@1100528304 : Record 11126011);
    VAR
      SHWorkplanRiskTextFrom@1100528301 : Record 11126020;
      SHWorkplanRiskTextTo@1100528300 : Record 11126020;
    BEGIN
      SHWorkplanRiskTextFrom.SETRANGE("Source Type", SHWorkplanFrom."Source Type");
      SHWorkplanRiskTextFrom.SETRANGE("Source Code", SHWorkplanFrom."Source Code");
      SHWorkplanRiskTextFrom.SETRANGE("Workplan Date", SHWorkplanFrom."Workplan Date");
      SHWorkplanRiskTextFrom.SETRANGE("Main Process Code", SHWorkplanFrom."Main Process Code");
      SHWorkplanRiskTextFrom.SETRANGE("Sub Process Code", SHWorkplanFrom."Sub Process Code");
      SHWorkplanRiskTextFrom.SETRANGE("Location Code", SHWorkplanFrom."Location Code");
      IF (NOT SHWorkplanRiskTextFrom.FINDSET) THEN
        EXIT;

      REPEAT
        SHWorkplanRiskTextTo.COPY(SHWorkplanRiskTextFrom);
        SHWorkplanRiskTextTo."Source Type" := SHWorkplanTo."Source Type";
        SHWorkplanRiskTextTo."Source Code" := SHWorkplanTo."Source Code";
        SHWorkplanRiskTextTo."Workplan Date" := SHWorkplanTo."Workplan Date";
        SHWorkplanRiskTextTo."Location Code" := SHWorkplanTo."Location Code";
        SHWorkplanRiskTextTo.INSERT;
      UNTIL (SHWorkplanRiskTextFrom.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyRiskTextsToStandard@1100528304(SHWorkplan@1100528303 : Record 11126011);
    VAR
      SHStandardText@1100528302 : Record 11126017;
      SHRiskText@1100528300 : Record 11126016;
      SHWorkplanRiskText@1100528301 : Record 11126020;
    BEGIN
      SHRiskText.SETRANGE("Main Process Code", SHWorkplan."Main Process Code");
      SHRiskText.SETRANGE("Sub Process Code", SHWorkplan."Sub Process Code");
      IF (NOT SHRiskText.FINDSET) THEN
        EXIT;

      REPEAT
        IF (SHStandardText.GET(1, SHRiskText."Std Risk Text Line No.")) THEN BEGIN
          SHWorkplanRiskText.INIT;
          SHWorkplanRiskText."Source Type" := SHWorkplan."Source Type";
          SHWorkplanRiskText."Source Code" := SHWorkplan."Source Code";
          SHWorkplanRiskText."Workplan Date" :=  SHWorkplan."Workplan Date";
          SHWorkplanRiskText."Main Process Code" := SHRiskText."Main Process Code";
          SHWorkplanRiskText."Sub Process Code" := SHRiskText."Sub Process Code";
          SHWorkplanRiskText."Line No." := SHRiskText."Line No.";
          SHWorkplanRiskText."Std Risk Text Line No." := SHRiskText."Std Risk Text Line No.";
          SHWorkplanRiskText.Text := SHStandardText.Text;
          SHWorkplanRiskText."Delete Allowed" := SHStandardText."Delete Allowed";
          SHWorkplanRiskText."Standard Text" := TRUE;
          SHWorkplanRiskText.INSERT;
        END;
      UNTIL (SHRiskText.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyRiskMeasureTexts@1100528328(SHWorkplanFrom@1100528305 : Record 11126011;SHWorkplanTo@1100528304 : Record 11126011);
    VAR
      SHWorkplanRiskMeasureTextFrom@1100528301 : Record 11126021;
      SHWorkplanRiskMeasureTextTo@1100528300 : Record 11126021;
    BEGIN
      SHWorkplanRiskMeasureTextFrom.SETRANGE("Source Type", SHWorkplanFrom."Source Type");
      SHWorkplanRiskMeasureTextFrom.SETRANGE("Source Code", SHWorkplanFrom."Source Code");
      SHWorkplanRiskMeasureTextFrom.SETRANGE("Workplan Date", SHWorkplanFrom."Workplan Date");
      SHWorkplanRiskMeasureTextFrom.SETRANGE("Main Process Code", SHWorkplanFrom."Main Process Code");
      SHWorkplanRiskMeasureTextFrom.SETRANGE("Sub Process Code", SHWorkplanFrom."Sub Process Code");
      SHWorkplanRiskMeasureTextFrom.SETRANGE("Location Code", SHWorkplanFrom."Location Code");
      IF (NOT SHWorkplanRiskMeasureTextFrom.FINDSET) THEN
        EXIT;

      REPEAT
        SHWorkplanRiskMeasureTextTo.COPY(SHWorkplanRiskMeasureTextFrom);
        SHWorkplanRiskMeasureTextTo."Source Type" := SHWorkplanTo."Source Type";
        SHWorkplanRiskMeasureTextTo."Source Code" := SHWorkplanTo."Source Code";
        SHWorkplanRiskMeasureTextTo."Workplan Date" := SHWorkplanTo."Workplan Date";
        SHWorkplanRiskMeasureTextTo."Location Code" := SHWorkplanTo."Location Code";
        SHWorkplanRiskMeasureTextTo.INSERT;
      UNTIL (SHWorkplanRiskMeasureTextFrom.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyRiskMeasureTextsToStandard@1100528303(SHWorkplan@1100528303 : Record 11126011);
    VAR
      SHStandardText@1100528302 : Record 11126017;
      SHRiskMeasureText@1100528300 : Record 11126018;
      SHWorkplanRiskMeasureText@1100528301 : Record 11126021;
    BEGIN
      SHRiskMeasureText.SETRANGE("Main Process Code", SHWorkplan."Main Process Code");
      SHRiskMeasureText.SETRANGE("Sub Process Code", SHWorkplan."Sub Process Code");
      IF (NOT SHRiskMeasureText.FINDSET) THEN
        EXIT;

      REPEAT
        IF (SHStandardText.GET(2, SHRiskMeasureText."Std Risk Measure Text Line No.")) THEN BEGIN
          SHWorkplanRiskMeasureText.INIT;
          SHWorkplanRiskMeasureText."Source Type" := SHWorkplan."Source Type";
          SHWorkplanRiskMeasureText."Source Code" := SHWorkplan."Source Code";
          SHWorkplanRiskMeasureText."Workplan Date" :=  SHWorkplan."Workplan Date";
          SHWorkplanRiskMeasureText."Main Process Code" := SHRiskMeasureText."Main Process Code";
          SHWorkplanRiskMeasureText."Sub Process Code" := SHRiskMeasureText."Sub Process Code";
          SHWorkplanRiskMeasureText."Risk Text Line No." := SHRiskMeasureText."Risk Text Line No.";
          SHWorkplanRiskMeasureText."Line No." := SHRiskMeasureText."Line No.";
          SHWorkplanRiskMeasureText."Std Risk Measure Text Line No." := SHRiskMeasureText."Std Risk Measure Text Line No.";
          SHWorkplanRiskMeasureText.Text := SHStandardText.Text;
          SHWorkplanRiskMeasureText."Delete Allowed" := SHStandardText."Delete Allowed";
          SHWorkplanRiskMeasureText."Standard Text" := TRUE;
          SHWorkplanRiskMeasureText.INSERT;
        END;
      UNTIL (SHRiskMeasureText.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyRiskMeasurePPMTexts@1100528327(SHWorkplanFrom@1100528305 : Record 11126011;SHWorkplanTo@1100528304 : Record 11126011);
    VAR
      SHWorkpRiskMeasurePPMTextFrom@1100528301 : Record 11126022;
      SHWorkpRiskMeasurePPMTextTo@1100528300 : Record 11126022;
    BEGIN
      SHWorkpRiskMeasurePPMTextFrom.SETRANGE("Source Type", SHWorkplanFrom."Source Type");
      SHWorkpRiskMeasurePPMTextFrom.SETRANGE("Source Code", SHWorkplanFrom."Source Code");
      SHWorkpRiskMeasurePPMTextFrom.SETRANGE("Workplan Date", SHWorkplanFrom."Workplan Date");
      SHWorkpRiskMeasurePPMTextFrom.SETRANGE("Main Process Code", SHWorkplanFrom."Main Process Code");
      SHWorkpRiskMeasurePPMTextFrom.SETRANGE("Sub Process Code", SHWorkplanFrom."Sub Process Code");
      SHWorkpRiskMeasurePPMTextFrom.SETRANGE("Location Code", SHWorkplanFrom."Location Code");
      IF (NOT SHWorkpRiskMeasurePPMTextFrom.FINDSET) THEN
        EXIT;

      REPEAT
        SHWorkpRiskMeasurePPMTextTo.COPY(SHWorkpRiskMeasurePPMTextFrom);
        SHWorkpRiskMeasurePPMTextTo."Source Type" := SHWorkplanTo."Source Type";
        SHWorkpRiskMeasurePPMTextTo."Source Code" := SHWorkplanTo."Source Code";
        SHWorkpRiskMeasurePPMTextTo."Workplan Date" := SHWorkplanTo."Workplan Date";
        SHWorkpRiskMeasurePPMTextTo."Location Code" := SHWorkplanTo."Location Code";
        SHWorkpRiskMeasurePPMTextTo.INSERT;
      UNTIL (SHWorkpRiskMeasurePPMTextFrom.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyRiskMeasurePPMTextsToStandard@1100528306(SHWorkplan@1100528302 : Record 11126011);
    VAR
      SHStandardText@1100528303 : Record 11126017;
      SHRiskMeasurePPMText@1100528300 : Record 11126019;
      SHWorkpRiskMeasurePPMText@1100528301 : Record 11126022;
    BEGIN
      SHRiskMeasurePPMText.SETRANGE("Main Process Code", SHWorkplan."Main Process Code");
      SHRiskMeasurePPMText.SETRANGE("Sub Process Code", SHWorkplan."Sub Process Code");
      IF (NOT SHRiskMeasurePPMText.FINDSET) THEN
        EXIT;

      REPEAT
        IF (SHStandardText.GET(3, SHRiskMeasurePPMText."Std Risk Measure PPM Line No.")) THEN BEGIN
          SHWorkpRiskMeasurePPMText.INIT;
          SHWorkpRiskMeasurePPMText."Source Type" := SHWorkplan."Source Type";
          SHWorkpRiskMeasurePPMText."Source Code" := SHWorkplan."Source Code";
          SHWorkpRiskMeasurePPMText."Workplan Date" :=  SHWorkplan."Workplan Date";
          SHWorkpRiskMeasurePPMText."Main Process Code" := SHRiskMeasurePPMText."Main Process Code";
          SHWorkpRiskMeasurePPMText."Sub Process Code" := SHRiskMeasurePPMText."Sub Process Code";
          SHWorkpRiskMeasurePPMText."Risk Text Line No." := SHRiskMeasurePPMText."Risk Text Line No.";
          SHWorkpRiskMeasurePPMText."Risk Measure Text Line No." := SHRiskMeasurePPMText."Risk Measure Text Line No.";
          SHWorkpRiskMeasurePPMText."Line No." := SHRiskMeasurePPMText."Line No.";
          SHWorkpRiskMeasurePPMText."Std Risk Measure PPM Line No." := SHRiskMeasurePPMText."Std Risk Measure PPM Line No.";
          SHWorkpRiskMeasurePPMText.Text := SHStandardText.Text;
          SHWorkpRiskMeasurePPMText."Delete Allowed" := SHStandardText."Delete Allowed";
          SHWorkpRiskMeasurePPMText."Standard Text" := TRUE;
          SHWorkpRiskMeasurePPMText.INSERT;
        END;
      UNTIL (SHRiskMeasurePPMText.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyWasteTypes@1100528336(SHWorkplanFrom@1100528305 : Record 11126011;SHWorkplanTo@1100528304 : Record 11126011);
    VAR
      SHWorkplanWasteTypeFrom@1100528301 : Record 11126028;
      SHWorkplanWasteTypeTo@1100528302 : Record 11126028;
    BEGIN
      SHWorkplanWasteTypeFrom.SETRANGE("Source Type", SHWorkplanFrom."Source Type");
      SHWorkplanWasteTypeFrom.SETRANGE("Source Code", SHWorkplanFrom."Source Code");
      SHWorkplanWasteTypeFrom.SETRANGE("Workplan Date", SHWorkplanFrom."Workplan Date");
      SHWorkplanWasteTypeFrom.SETRANGE("Main Process Code", SHWorkplanFrom."Main Process Code");
      SHWorkplanWasteTypeFrom.SETRANGE("Sub Process Code", SHWorkplanFrom."Sub Process Code");
      SHWorkplanWasteTypeFrom.SETRANGE("Location Code", SHWorkplanFrom."Location Code");
      IF (NOT SHWorkplanWasteTypeFrom.FINDSET) THEN
        EXIT;

      REPEAT
        SHWorkplanWasteTypeTo.COPY(SHWorkplanWasteTypeFrom);
        SHWorkplanWasteTypeTo."Source Type" := SHWorkplanTo."Source Type";
        SHWorkplanWasteTypeTo."Source Code" := SHWorkplanTo."Source Code";
        SHWorkplanWasteTypeTo."Workplan Date" := SHWorkplanTo."Workplan Date";
        SHWorkplanWasteTypeTo."Location Code" := SHWorkplanTo."Location Code";
        SHWorkplanWasteTypeTo.INSERT;
      UNTIL (SHWorkplanWasteTypeFrom.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyWasteTypesToStandard@1100528338(SHWorkplan@1100528300 : Record 11126011);
    VAR
      SHWasteType@1100528304 : Record 11126026;
      SHCode@1100528302 : Record 11125999;
      SHWorkplanWasteType@1100528301 : Record 11126028;
    BEGIN
      SHWasteType.SETRANGE("Main Process Code", SHWorkplan."Main Process Code");
      SHWasteType.SETRANGE("Sub Process Code", SHWorkplan."Sub Process Code");
      IF (NOT SHWasteType.FINDSET) THEN
        EXIT;

      REPEAT
        IF (SHCode.GET(SHCode.Type::"Waste Type", SHWasteType."Waste Type Code")) THEN BEGIN
          SHWorkplanWasteType.INIT;
          SHWorkplanWasteType."Source Type" := SHWorkplan."Source Type";
          SHWorkplanWasteType."Source Code" := SHWorkplan."Source Code";
          SHWorkplanWasteType."Workplan Date" :=  SHWorkplan."Workplan Date";
          SHWorkplanWasteType."Main Process Code" := SHWasteType."Main Process Code";
          SHWorkplanWasteType."Sub Process Code" := SHWasteType."Sub Process Code";
          SHWorkplanWasteType."Line No." := SHWasteType."Line No.";
          SHWorkplanWasteType."Std Waste Type Code" := SHCode.Code;
          SHWorkplanWasteType."Delete Allowed" := SHCode  ."Delete Allowed";
          SHWorkplanWasteType."Standard Text" := TRUE;
          SHWorkplanWasteType.INSERT;
        END;
      UNTIL (SHWasteType.NEXT = 0);
    END;

    LOCAL PROCEDURE CopyWorkplan@1100529509(SHWorkplan@1100528301 : Record 11126011;VAR SHWorkplanTo@1100528302 : Record 11126011;WorkDateTo@1100528303 : Date;LocationCodeTo@1100529500 : Code[20];LocationDescriptionTo@1100528304 : Text[80]) : Boolean;
    BEGIN
      IF (SHWorkplanTo.GET(SHWorkplan."Source Type", SHWorkplan."Source Code", WorkDateTo,
          SHWorkplan."Main Process Code", SHWorkplan."Sub Process Code", LocationCodeTo))
      THEN
        EXIT(FALSE);

      SHWorkplanTo.COPY(SHWorkplan);
      SHWorkplanTo."Workplan Date" := WorkDateTo;
      SHWorkplanTo."Workplan Interval" := DF;
      SHWorkplanTo."Starting Date" := 0D;
      SHWorkplanTo."Ending Date" := 0D;
      SHWorkplanTo."Location Code" := LocationCodeTo;
      SHWorkplanTo."Location Description" := LocationDescriptionTo;
      EXIT(SHWorkplanTo.INSERT);
    END;

    LOCAL PROCEDURE CreateStandardWorkplanFromEstimate@1100528301(VAR SHWorkplan@1100528300 : Record 11126011;InterfaceEstimateBudget@1100528302 : Record 11012174);
    VAR
      SHWorkplanTo@1100528301 : Record 11126011;
    BEGIN
      IF (InterfaceEstimateBudget."Project No." = '') THEN
        EXIT;
      IF (NOT SHWorkplan.FINDSET) THEN
        EXIT;

      REPEAT
        IF (NOT SHWorkplanTo.GET(SHWorkplan."Source Type"::Project, InterfaceEstimateBudget."Project No.", 0D,
            SHWorkplan."Main Process Code", SHWorkplan."Sub Process Code", ''))
        THEN BEGIN
          SHWorkplanTo.COPY(SHWorkplan);
          SHWorkplanTo."Source Type" := SHWorkplanTo."Source Type"::Project;
          SHWorkplanTo."Source Code" := InterfaceEstimateBudget."Project No.";
          SHWorkplanTo.INSERT;

          CopyTexts(0, SHWorkplan, SHWorkplanTo);
          CopyProcessTexts(SHWorkplan, SHWorkplanTo);
          CopyRiskTexts(SHWorkplan, SHWorkplanTo);
          CopyRiskMeasureTexts(SHWorkplan, SHWorkplanTo);
          CopyRiskMeasurePPMTexts(SHWorkplan, SHWorkplanTo);
          CopyProcessReports(SHWorkplan, SHWorkplanTo);
          CopyWasteTypes(SHWorkplan, SHWorkplanTo);
          CopyPlants(SHWorkplan, SHWorkplanTo);
        END;
      UNTIL (SHWorkplan.NEXT = 0);
    END;

    LOCAL PROCEDURE CreateStandardWorkplanFromBaseRecipe@1100528302(InterfaceEstimateBudget@1100528300 : Record 11012174);
    VAR
      BaseRecipe@1100528301 : Record 11020581;
      SHWorkplan@1100528302 : Record 11126011;
      Estimate@1100528303 : Record 11012151;
    BEGIN
      IF (InterfaceEstimateBudget."Recipe Group" = '') OR (InterfaceEstimateBudget.Recipe = '') OR
         (InterfaceEstimateBudget."Project No." = '')
      THEN
        EXIT;
      IF (NOT Estimate.GET(InterfaceEstimateBudget."Estimate No.")) THEN
        EXIT;
      IF (NOT BaseRecipe.GET(InterfaceEstimateBudget."Recipe Group", InterfaceEstimateBudget.Recipe)) THEN
        EXIT;
      IF (SHWorkplan.GET(SHWorkplan."Source Type"::Project, InterfaceEstimateBudget."Project No.", 0D,
          BaseRecipe."Main Process Code", BaseRecipe."Sub Process Code", ''))
      THEN
        EXIT;

      SHWorkplan.INIT;
      SHWorkplan."Source Type" := SHWorkplan."Source Type"::Project;
      SHWorkplan."Source Code" := InterfaceEstimateBudget."Project No.";
      SHWorkplan."Main Process Code" := BaseRecipe."Main Process Code";
      SHWorkplan."Sub Process Code" := BaseRecipe."Sub Process Code";
      SHWorkplan.INSERT(TRUE);
    END;

    LOCAL PROCEDURE GenerateStandardWorkplanFromEstimateNotRAW@1100529500(Estimate@1100528300 : Record 11012151);
    VAR
      SHWorkplan@1100528301 : Record 11126011;
      EstimateLine@1100528303 : Record 11072072;
      BaseRecipe@1100528304 : Record 11020581;
    BEGIN
      EstimateLine.SETRANGE("Estimate No.", Estimate."No.");
      EstimateLine.SETFILTER("Recipe Group", '<>%1', '');
      EstimateLine.SETFILTER(Recipe, '<>%1', '');
      IF (NOT EstimateLine.FINDSET) THEN
        EXIT;

      REPEAT
        BaseRecipe.GET(EstimateLine."Recipe Group", EstimateLine.Recipe);
        IF ((BaseRecipe."Main Process Code" <> '') AND (BaseRecipe."Sub Process Code" <> '')) THEN BEGIN
          IF (NOT SHWorkplan.GET(SHWorkplan."Source Type"::Estimate, Estimate."No.", 0D,
              BaseRecipe."Main Process Code", BaseRecipe."Sub Process Code", ''))
          THEN BEGIN
            SHWorkplan.INIT;
            SHWorkplan."Source Type" := SHWorkplan."Source Type"::Estimate;
            SHWorkplan."Source Code" := Estimate."No.";
            SHWorkplan."Main Process Code" := BaseRecipe."Main Process Code";
            SHWorkplan."Sub Process Code" := BaseRecipe."Sub Process Code";
            SHWorkplan.Description := EstimateLine.Description;
            SHWorkplan.INSERT(TRUE);
          END;
        END;
      UNTIL (EstimateLine.NEXT = 0);
    END;

    LOCAL PROCEDURE GenerateStandardWorkplanFromEstimateRAW@1100529502(Estimate@1100528300 : Record 11012151);
    VAR
      SHWorkplan@1100528301 : Record 11126011;
      EstimateLineRAW@1100528303 : Record 11125698;
      BaseRecipe@1100528304 : Record 11020581;
    BEGIN
      EstimateLineRAW.SETRANGE("Estimate No.", Estimate."No.");
      EstimateLineRAW.SETFILTER("Recipe Group", '<>%1', '');
      EstimateLineRAW.SETFILTER("Recipe No.", '<>%1', '');
      IF (NOT EstimateLineRAW.FINDSET) THEN
        EXIT;

      REPEAT
        BaseRecipe.GET(EstimateLineRAW."Recipe Group", EstimateLineRAW."Recipe No.");
        IF ((BaseRecipe."Main Process Code" <> '') AND (BaseRecipe."Sub Process Code" <> '')) THEN BEGIN
          IF (NOT SHWorkplan.GET(SHWorkplan."Source Type"::Estimate, Estimate."No.", 0D,
              BaseRecipe."Main Process Code", BaseRecipe."Sub Process Code", ''))
          THEN BEGIN
            SHWorkplan.INIT;
            SHWorkplan."Source Type" := SHWorkplan."Source Type"::Estimate;
            SHWorkplan."Source Code" := Estimate."No.";
            SHWorkplan."Main Process Code" := BaseRecipe."Main Process Code";
            SHWorkplan."Sub Process Code" := BaseRecipe."Sub Process Code";
            SHWorkplan.Description := EstimateLineRAW.Description;
            SHWorkplan.INSERT(TRUE);
          END;
        END;
      UNTIL (EstimateLineRAW.NEXT = 0);
    END;

    LOCAL PROCEDURE GetWorkplanStartingDate@1100528315(SHWorkplanIn@1100528300 : Record 11126011;LocationCodeIn@1100528302 : Code[20]) : Date;
    VAR
      SHWorkplan@1100528301 : Record 11126011;
    BEGIN
      SHWorkplan.SETCURRENTKEY("Source Type","Source Code","Main Process Code","Sub Process Code","Location Code","Workplan Date");
      SHWorkplan.SETRANGE("Source Type", SHWorkplanIn."Source Type");
      SHWorkplan.SETRANGE("Source Code", SHWorkplanIn."Source Code");
      SHWorkplan.SETRANGE("Main Process Code", SHWorkplanIn."Main Process Code");
      SHWorkplan.SETRANGE("Sub Process Code", SHWorkplanIn."Sub Process Code");
      SHWorkplan.SETRANGE("Location Code", LocationCodeIn);
      SHWorkplan.SETFILTER("Workplan Date", '<>%1', 0D);
      IF (SHWorkplan.FINDLAST) THEN
        EXIT(CALCDATE(SHWorkplanIn."Workplan Interval", SHWorkplan."Workplan Date"));
      IF (SHWorkplanIn."Starting Date" <> 0D) THEN
        EXIT(SHWorkplanIn."Starting Date");
      EXIT(TODAY);
    END;

    BEGIN
    END.
  }
}

