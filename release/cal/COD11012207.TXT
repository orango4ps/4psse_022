OBJECT Codeunit 11012207 Request Handler (Donau)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=VAR
            ScanApplicationsSetup@1100525000 : Record 11012134;
          BEGIN
            ScanApplicationsSetup.GET;

            ReceiveMessageQueue := ReceiveMessageQueue.MessageQueue(ScanApplicationsSetup."Donau Receive Queue");
            ReceiveMessageQueue.Formatter := XMLMessageFormatter.XmlMessageFormatter;
            IF ScanApplicationsSetup."Clear Jnl. Queue after Parsing" THEN
              ReceiveMessageQueue.UseJournalQueue(FALSE);
            ReceiveMessageQueue.BeginReceive;

            ReplyMessageQueue := ReplyMessageQueue.MessageQueue(ScanApplicationsSetup."Donau Reply Queue");
            IF ScanApplicationsSetup."Clear Jnl. Queue after Parsing" THEN
              ReplyMessageQueue.UseJournalQueue(FALSE);
          END;

  }
  CODE
  {
    VAR
      ScanApplicationsSetup@1100526000 : Record 11012134;
      XMLDOMMgt@1100485001 : Codeunit 11020220;
      Text002@1100485000 : TextConst 'DEU=Fehlendes Identifizierungskennzeichen  ''%1'' in ''%2'' Meldung;ENU=Missing tag ''%1'' in ''%2'' message;NLD=Ontbrekende tag ''%1'' in ''%2'' bericht;NOR=Taggen ''%1'' mangler i melding ''%2'';SVE=Taggen ''%1'' saknas i meddelandet ''%2''';
      Text003@1100485002 : TextConst 'DEU=Unbekannte Meldungsart ''%1'' in ''%2'' Meldung;ENU=Unknown message type ''%1'' in ''%2'' message;NLD=Onbekende berichtsoort ''%1'' in ''%2'' bericht;NOR=Ukjent meldingstype ''%1'' i melding ''%2'';SVE=Ok„nd meddelandetyp ''%1'' i ''%2'' meddelande';
      ReceiveMessageQueue@1100525003 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.MessageQueue" WITHEVENTS;
      ReplyMessageQueue@1100525002 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.MessageQueue";
      XMLMessageFormatter@1100525000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.XmlMessageFormatter";
      StatusOpt@1100525001 : Text[30];

    PROCEDURE ParsMessage@1100485000(XMLDocIn@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message") ResultBln : Boolean;
    VAR
      lvExchangetMgtCU@1100485004 : Codeunit 11012208;
      lvXMLNodeReturn@1100485008 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvXMLCurrNode@1100485007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      lvMessTypeTag@1100485010 : Text[30];
      lvRequestType@1100485002 : Text[100];
      lvReplyType@1100485003 : Text[100];
      lvPostType@1100525000 : Text[100];
      lvStatusType@1100525001 : Text[100];
    BEGIN
      XMLDOMMgt.RemoveNamespaces(XMLDocIn,XMLDocIn);
      ResultBln := FALSE;
      lvMessTypeTag := '';

      lvXMLCurrNode := XMLDocIn.DocumentElement;
      IF XMLDOMMgt.FindNode(lvXMLCurrNode,'RequestType',lvXMLNodeReturn) THEN BEGIN
        lvRequestType := lvXMLNodeReturn.InnerText;
        lvMessTypeTag := 'REQUEST';
      END;
      IF XMLDOMMgt.FindNode(lvXMLCurrNode,'ReplyType',lvXMLNodeReturn) THEN BEGIN
        lvReplyType := lvXMLNodeReturn.InnerText;
        lvMessTypeTag := 'REPLY';
      END;
      IF XMLDOMMgt.FindNode(lvXMLCurrNode,'PostType',lvXMLNodeReturn) THEN BEGIN
        lvPostType := lvXMLNodeReturn.InnerText;
        lvMessTypeTag := 'POST';
      END;
      IF XMLDOMMgt.FindNode(lvXMLCurrNode,'StatusType',lvXMLNodeReturn) THEN BEGIN
        lvStatusType := lvXMLNodeReturn.InnerText;
        lvMessTypeTag := 'STATUS';
      END;

      IF lvMessTypeTag = '' THEN
        EXIT  //* Ignore unknown message types (no error)
      ELSE BEGIN
        IF XMLDOMMgt.FindNode(lvXMLCurrNode,'ParameterList',lvXMLNodeReturn) THEN
          lvXMLCurrNode := lvXMLNodeReturn
        ELSE
          ERROR(Text002, 'ParameterList', lvMessTypeTag);  //* All messages should start with this tag (after the message type tag)
      END;

      CASE lvMessTypeTag OF
        'REQUEST':
          BEGIN
            CASE lvRequestType OF
              'GetVendor':
                ResultBln := lvExchangetMgtCU.DonauSendVendor(InMsg);         //Donau
              'GetGLAccount':
                ResultBln := lvExchangetMgtCU.DonauSendGLAccount(InMsg);      //Donau
              'GetCostCenter':
                ResultBln := lvExchangetMgtCU.DonauSendCostCenter(InMsg);     //Donau
              'GetCostObject':
                ResultBln := lvExchangetMgtCU.DonauSendCostObject(InMsg);     //Donau
              'GetVehicle':                                                    //dbeekman, 16-11-09: Donau Phase 2, not used yet
                ResultBln := lvExchangetMgtCU.DonauSendVehicle(InMsg);        //Donau
              'GetProject':
                ResultBln := lvExchangetMgtCU.DonauSendProject(InMsg);        //Donau
              'GetCompany':
                ResultBln := lvExchangetMgtCU.DonauSendCompany(InMsg);        //Donau
              'GetServiceOrder':
                ResultBln := lvExchangetMgtCU.DonauSendServiceOrder(InMsg);   //Donau
              'GetServiceContract':
                ResultBln := lvExchangetMgtCU.DonauSendServiceContract(InMsg);//Donau
              'GetPlant':
                ResultBln := lvExchangetMgtCU.DonauSendPlant(InMsg);          //Donau
              'GetFixedAsset':
                ResultBln := lvExchangetMgtCU.DonauSendFixedAsset(InMsg);     //Donau
              'GetPurchaseOrder':
                ResultBln := lvExchangetMgtCU.DonauSendPurchaseOrder(InMsg);  //Donau
              ELSE
                ERROR(Text003, lvRequestType, lvMessTypeTag);
            END;
          END;
        'POST':
          BEGIN
            CASE lvPostType OF
              'PostInvoiceHeader':
                ResultBln := lvExchangetMgtCU.ProcessInvoiceHeader(lvXMLCurrNode,InMsg);
              'PostInvoiceLine':
                ResultBln := lvExchangetMgtCU.ProcessInvoiceLine(lvXMLCurrNode,InMsg);
              'PostApprovedInvoice':
                ResultBln := lvExchangetMgtCU.ProcessApprovedInvoice(lvXMLCurrNode,InMsg);
              ELSE
                ERROR(Text003, lvPostType, lvMessTypeTag);
            END;
          END;
        'Status':
          BEGIN
            CASE lvStatusType OF
              'StatusInvoice':
                 ResultBln := lvExchangetMgtCU.ProcessStatusInvoice(InMsg,lvXMLCurrNode,StatusOpt);
              ELSE
                ERROR(Text003, lvStatusType, lvMessTypeTag);
             END;
          END;
      END;
    END;

    PROCEDURE WriteToQueue@1240002(InMsg@1100525002 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";XMLDoc@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      OutMsg@1100525000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";
    BEGIN
      OutMsg := OutMsg.Message;
      OutMsg.CorrelationId(InMsg.Id);
      OutMsg.Label(InMsg.Label + '-Reply');
      OutMsg.Body(XMLDoc);
      ReplyMessageQueue.Send(OutMsg);
      CLEAR(OutMsg);
    END;

    PROCEDURE EndTransaction@1100485002(InMsg@1100485000 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message");
    VAR
      XMLDocOut@1100485001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XMLDocOut := XMLDocOut.XmlDocument;
      XMLDocOut.LoadXml('<EndOfTransaction/>');
      WriteToQueue(InMsg, XMLDocOut);
    END;

    PROCEDURE ProcessFileForTesting@1100485001(IFileName@1100485002 : Text[100]);
    VAR
      InMsg@1100525005 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message";
      XMLDoc@1100485000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      //* This function is only used for testing debrief messages
      ScanApplicationsSetup.GET;

      IF ISNULL(ReplyMessageQueue) THEN
        ReplyMessageQueue := ReplyMessageQueue.MessageQueue(ScanApplicationsSetup."Donau Reply Queue");

      XMLDoc := XMLDoc.XmlDocument;
      XMLDOMMgt.LoadXMLFromClientFile(XMLDoc, IFileName, TRUE);

      InMsg := InMsg.Message;
      InMsg.Label('Test 4PS Donau');
      IF ParsMessage(XMLDoc,InMsg) THEN;
    END;

    EVENT ReplyMessageQueue@1100525002::PeekCompleted@125(sender@1100525001 : Variant;e@1100525000 : DotNet "'System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.PeekCompletedEventArgs");
    BEGIN
    END;

    EVENT ReplyMessageQueue@1100525002::ReceiveCompleted@126(sender@1100525001 : Variant;e@1100525000 : DotNet "'System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.ReceiveCompletedEventArgs");
    BEGIN
    END;

    EVENT ReplyMessageQueue@1100525002::Disposed@127(sender@1100525001 : Variant;e@1100525000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.EventArgs");
    BEGIN
    END;

    EVENT ReceiveMessageQueue@1100525003::PeekCompleted@125(sender@1100525001 : Variant;e@1100525000 : DotNet "'System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.PeekCompletedEventArgs");
    BEGIN
    END;

    EVENT ReceiveMessageQueue@1100525003::ReceiveCompleted@126(sender@1100525001 : Variant;e@1100525000 : DotNet "'System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.ReceiveCompletedEventArgs");
    VAR
      InMsg@1100525005 : DotNet "'System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Messaging.Message" WITHEVENTS;
      XMLDoc@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      StreamReader@1100525003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      MsgBody@1100525002 : Text;
    BEGIN
      InMsg := ReceiveMessageQueue.EndReceive(e.AsyncResult);
      ReceiveMessageQueue.BeginReceive;

      XMLDoc := XMLDoc.XmlDocument;
      StreamReader := StreamReader.StreamReader(InMsg.BodyStream);
      MsgBody := StreamReader.ReadToEnd;
      XMLDoc.LoadXml(MsgBody);
      ParsMessage(XMLDoc, InMsg);
    END;

    EVENT ReceiveMessageQueue@1100525003::Disposed@127(sender@1100525001 : Variant;e@1100525000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.EventArgs");
    BEGIN
    END;

    BEGIN
    {
      //* This (SingleInstance) codeunit is started by codeunit 1 (NAS Handler).
    }
    END.
  }
}

