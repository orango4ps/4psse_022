OBJECT Codeunit 6085709 Purch. Doc. - Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=DCW13.70.00.5.00.07,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 6085700=rimd,
                TableData 6085702=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CaptureMgt@1000000000 : Codeunit 6085576;
      Text001@1160040001 : TextConst 'DEU="Dieser %1 wurde auf einen anderen %1abgestimmt: %2=%3, %4=%5, %6=%7.\\Bitte entfernen Sie Den abgestimmten %1, bevor Sie diesen %2 entfernen.";ENU="This %1 is matched to another %1: %2=%3, %4=%5, %6=%7.\\Please delete the matched %1 before you delete this %2.";NLD="Deze %1 is gematched aan een andere %2: %2=%3, %4=%5, %6=%7.\\Verwijder a.u.b. de gematchte %1 voordat u deze %2 verwijdert."';
      Text002@1160040000 : TextConst 'DEU=%1 wurde bereits umgerechnet in %2 %3\\Mîchten Sie die Umrechnung aktualisieren?;ENU=%1 has already been translated to %2 %3\\Do you want to update the translation?;NLD=%1 werd al vertaald naar %2 %3\\Wilt u de vertaling aanpassen?';
      Text003@1160040002 : TextConst 'DEU=Betragsverteilung %1:;ENU=Amount Distribution %1:;NLD=Bedragverdeling %1:';
      Text004@1160040003 : TextConst 'DEU=Standardbetragsverteilungscode %1 ist nur fÅr ausgewÑhlte Kreditoren eingerichtet.\\Kreditor %2 gehîrt nicht zu den ausgewÑhlten Kreditoren.;ENU=Standard Amount Distribution Code %1 has been set to be enabled for selected vendors only.\\However vendor %2 has not been been configured as one of the selected vendors.;NLD=Standaardbedragverdelingscode %1 is alleen ingesteld voor geselecteerde leveranciers.\\Leverancier %2 is niet een van de geselecteerde leveranciers.';
      Text014@1160040008 : TextConst 'DEU=Betrag exkl. MwSt. stimmt nicht mit\ Åberein;ENU=Amount Excl. VAT does not match\;NLD=Bedrag excl. btw komt niet overeen.\';
      Text015@1160040007 : TextConst 'DEU=Betrag inkl. MwSt. stimmt nicht mit\ Åberein;ENU=Amount Incl. VAT does not match\;NLD=Bedrag incl. btw komt niet overeen.\';
      Text016@1160040006 : TextConst 'DEU=- Importiert: %1\;ENU=" - Imported: %1\";NLD=" - Geimporteerd: %1\"';
      Text017@1160040005 : TextConst 'DEU=- Zugeordnet: %1\;ENU=" - Assigned: %1\";NLD=" - Toegewezen: %1\"';
      ImpAmtNotEqAsgnAmtMsg@1160040009 : TextConst 'DEU=Importierter Betrag stimmt nicht Åberein mit dem zugewiesenen Betrag.\\;ENU=Imported amount is not the same as the assigned amount.\\;NLD=Geimporteerd bedrag is ongelijk aan het toegekende bedrag.\\';
      Text022@1000000023 : TextConst 'DEU=Der Beleg wurde nicht gefunden.;ENU=The document was not found.;NLD=Het document is niet gevonden.';
      Text024@161024020 : TextConst 'DEU=VollstÑndige öbereinstimmung;ENU=Completely Match;NLD=Volledig match';
      Text025@161024021 : TextConst 'DEU=Teilweise öbereinstimmung;ENU=WARNING: Partial Match;NLD=WAARSCHUWING: Gedeeltelijk match';
      Text026@161024022 : TextConst 'DEU=Keine öbereinstimmung;ENU=WARNING: No Match;NLD=WAARSCHUWING: Geen match';
      Text027@1160040004 : TextConst 'DEU=Dieser %1 ist nicht von Continia Document Capture erstellt worden.;ENU=This %1 has not been created from Continia Document Capture.;NLD=Deze %1 is niet aangemaakt vanuit Continia Document Capture.';
      GLSetup@1160040010 : Record 98;
      DCSetup@1160040011 : Record 6085573;
      MatchInMsg@1160040012 : TextConst 'DEU=WARNUNG: %1 von %2 %3 abgestimmt mit %4.;ENU=WARNING: %1 out of %2 %3 matched with %4.;NLD=WAARSCHUWING: %1 van %2 %3 gematched met %4.';
      CombineMsg@1160040014 : TextConst 'DEU=%1 %2 und %3 %4;ENU=%1 %2 and %3 %4;NLD=%1 %2 en %3 %4';
      PurchaseOrderNosMsg@1160040015 : TextConst 'DEU=Einkaufsbestellung;ENU=Purchase Order;NLD=Inkooporder;SVE=Inkîpsorder';
      PurchaseReceiptNosMsg@1160040016 : TextConst 'DEU=Einkaufslieferung;ENU=Purchase Receipt;NLD=Inkoopontvangst;SVE=Inleverans';
      ReturnOrderNosMsg@1160040017 : TextConst 'DEU=Reklamation;ENU=Return Order;NLD=Retourorder;SVE=Returorder';
      ReturnShipmentNosMsg@1160040018 : TextConst 'DEU=RÅcklieferung;ENU=Return Shipment;NLD=Retourverzending';
      FullyMatchedWithMsg@1160040019 : TextConst 'DEU=VollsÑndig mit %1 Åbereingstimmt.;ENU=Fully matched with %1.;NLD=Volledig gematched met %1.';
      NoOrderNoFoundMsg@1160040020 : TextConst 'DEU="WARNUNG: Keine Belege gefunden bei %1 = ""%2"".";ENU="WARNING: No documents were found for %1 = ''%2''.";NLD="WAARSCHUWING: Geen documenten gevonden bij %1 = ""%2""."';
      PrevCharacter@6085573 : Char;
      Character@6085574 : Char;
      GLSetupRead@1160040021 : Boolean;
      DCSetupRead@1160040013 : Boolean;
      NoOrderWithVendFoundMsg@1160040022 : TextConst 'DEU="WARNUNG: %1 = ""%2"" ist vorhanden, aber gehîrt zu einem anderen Kreditor.";ENU="WARNING: %1 = ''%2'' exists but belongs to another vendor.";NLD="WAARSCHUWING: %1 = ""%2"" bestaat maar behoort bij een andere leverancier."';
      NoOrderWithCurrFoundMsg@1160040023 : TextConst 'DEU="WARNUNG: %1 = ""%2"" ist vorhanden, aber miet einer anderen WÑhrung.";ENU="WARNING: %1 = ''%2'' exists but with a different currency.";NLD="WAARSCHUWING: %1 = ""%2"" bestaat maar met een andere valuta."';
      OutsideTolerenceMsg@1160040024 : TextConst 'DEU="WARNUNG: %1 = ""%2"" ist vorhanden, aber ausserhalb der Toleranzeinrichtung.";ENU="WARNING: %1 = ''%2'' exists but outside the tolerance settings.";NLD="WAARSCHUWING: %1 = ""%2"" bestaat maar buiten de tolerantie-instellingen."';
      LocationRequireReceiveMsg@1000 : TextConst 'DEU="WARNUNG: %1 = ""%2"" ist vorhanden, aber der Lagereingang ist obligatorisch.";ENU="WARNING: %1 = ''%2'' exists but Warehouse Receive is required.";NLD="WAARSCHUWING: %1 = ""%2"" bestaat maar magazijnontvangst is verplicht."';
      POFullyReceivedMsg@1160040025 : TextConst 'DEU="WARNUNG: %1 = ""%2"" ist vorhanden, aber ist vîllig eingegangen.";ENU="WARNING: %1 = ''%2'' exists but is fully received.";NLD="WAARSCHUWING: %1 = ""%2"" bestaat maar is volledig ontvangen."';
      POFullyReceivedAndInvoicedMsg@1160040026 : TextConst 'DEU="WARNUNG: %1 = ""%2"" ist vorhanden, aber ist vîllig eingegangen und fakturiert.";ENU="WARNING: %1 = ''%2'' exists but is fully received and invoiced.";NLD="WAARSCHUWING: %1 = ""%2"" bestaat maar is volledig ontvangen en gefactureerd."';
      NoOpenReceiptExistMsg@6085575 : TextConst 'DEU="WARNUNG: %1 = ""%2"" ist vorhanden, aber es gibt keine EingÑnge.";ENU="WARNING: %1 = ''%2'' exists but no open receipts exists.";NLD="WAARSCHUWING: %1 = ""%2"" bestaat maar er zijn geen ontvangsten."';
      NoOpenReceiptwLRRExistMsg@6085604 : TextConst 'DEU="WARNUNG: %1 = ''%2'' ist vorhanden, aber es gibt keine offenen EingÑnge (Lagereingang ist obligatorisch).";ENU="WARNING: %1 = ''%2'' exists but no open receipts exists (Warehouse Receive is required).";NLD="WAARSCHUWING: %1 = ''%2'' bestaat maar er bestaan geen open ontvangsten (magazijnontvangst is verplicht)."';
      ReturnShptExistMsg@6085578 : TextConst 'DEU="WARNUNG: %1 = ""%2"" ist vorhanden, aber es gibt keine RÅcklieferungen.";ENU="WARNING: %1 = ''%2'' exists but no open return shipments exists.";NLD="WAARSCHUWING: %1 = ""%2"" bestaat maar er zijn geen retourzendingen."';
      MatchedToOtherDocErr@6085579 : TextConst 'DEU=Sie kînnen %1 %2, Zeilennr. %3 nicht lîschen, weil es mit %4 %5, Zeilennr. %6 abgeglichen wurde .\\Sie mÅssen zuerst die abgeglichene Zeile (%4 %5, Zeilennr. %6) lîschen.;ENU=You cannot delete %1 %2, Line No. %3, as it is matched to %4 %5, Line No. %6.\\You must delete the matched line (%4 %5, Line No. %6.) first.;NLD=U kunt %1 %2, regelnr. %3 niet verwijderen, omdat het gematched is met %4 %5, regelnr. %6.\\U dient de gematchte regel (%4 %5, regelnr. %6) eerst te verwijderen.';
      NegativeErr@6085576 : TextConst 'DEU=%1 muss positiv sein.;ENU=%1 must be positive.;NLD=%1 moet positief zijn.;SVE=%1 mÜste vara positiv.';
      DirectUnitCostInvCap@6085577 : TextConst 'DEU=Zeilenrabatt % (Rechnung);ENU=Direct Unit Cost (Invoice);NLD=Directe kostprijs (factuur);SVE=Inkîpspris (Faktura)';
      DirectUnitCostCMCap@6085580 : TextConst 'DEU=Direkte Einheitskosten (Gutschrift);ENU=Direct Unit Cost (Cr. Memo);NLD=Directe kostprijs (Creditnota)';
      MultipleLinesMatchErr@6085581 : TextConst 'DEU=%1 kann nicht aktualisiert werden, wenn %2 mit mehreren Zeilen verknÅpft ist.;ENU=%1 cannot be updated when the %2 is matched multiple lines.;NLD=%1 kan niet worden bijgewerkt als de %2 is gematched aan meerdere regels.';
      OrderLineCap@6085582 : TextConst 'DEU=Auftragszeile;ENU=Order Line;NLD=Orderregel';
      ReturnOrderLineCap@6085583 : TextConst 'DEU=Reklamationszeile;ENU=Return Order Line;NLD=Retourorderregel';
      LineDiscountPctInvCap@6085584 : TextConst 'DEU=Abgeglichene Menge;ENU=Line Discount % (Invoice);NLD=Regelkorting % (Factuur)';
      LineDiscountPctCMCap@6085585 : TextConst 'DEU=Zeilenrabatt % (Rechnung);ENU=Line Discount % (Cr. Memo);NLD=Regelkorting % (Creditnota)';
      MustBePositiveErr@6085586 : TextConst 'DEU=%1 muss positiv sein, wenn %2 positiv ist.;ENU=%1 must be positive when %2 is positive.;NLD=%1 moet positief zijn als %2 positief is.';
      MustBeNegativeErr@6085587 : TextConst 'DEU=%1 muss negativ sein, wenn %2 negativ ist.;ENU=%1 must be negative when %2 is negative.;NLD=%1 moet negatief zijn wanneer %2 negatief is.';
      MatchedQuantityCap@6085588 : TextConst 'DEU=Abgeglichene Menge;ENU=Matched Quantity;NLD=Gematcht aantal;SVE=Antal';
      NothingToMatchErr@6085589 : TextConst 'DEU=Auf dieser Zeile gibt es nichts mehr zum Abgleichen.;ENU=There is nothing left to match on the line.;NLD=Er is niets over op de regel om te matchen.';
      LeftToMatchErr@6085590 : TextConst 'DEU=Es ist nicht mîglich um %1 abzugleichen, weil nur %2 auf der Zeile zum Abgleichen Åbrig ist;ENU=It is not possible to match %1 as there is only %2 left to match on the line.;NLD=Het is niet mogelijk om %1 te matchen omdat er slechts %2 over is om te matchen op de regel.';
      WarehouseReceiveErr@6085591 : TextConst 'DEU="Lagerdurchlauf ist notwendig fÅr %1 = %2, %3 = %4, %5 = %6.";ENU="Warehouse Receive is required for %1 = %2, %3 = %4, %5 = %6.";NLD="Magazijnverwerking is vereist voor %1 = %2, %3 = %4, %5 = %6."';
      ManualMatchTxt@6085592 : TextConst 'DEU=Manuell abgleichen;ENU=Manual Match;NLD=Handmatig matchen';
      PurchDocMatchAginst@6085593 : 'No Match,Document,Document line,Multiple lines';
      DocumentLineMatchQst@6085594 : TextConst 'DEU=Der %1 ist mit einer einzelnen Belegzeile abgeglichen und der %2 in Belegzeile ist %3. Mîchten Sie tatsÑchlich den %4 auf %5 aktualisieren?;ENU=The %1 is matched to a single Document Line and the %2 on the Document Line is %3. Are you sure you want to update %4 to %5?;NLD=De %1 is gematched aan een enkele documentregel en de %2 op de documentregel is %3. Weet u zeker dat u de %4 wilt bijwerken naar %5?';
      NoMatchErr@6085595 : TextConst 'DEU=Die %1 darf nicht 0 sein.;ENU=%1 must not be 0.;NLD=%1 mag niet 0 zijn.;SVE=%1 fÜr inte vara 0.';
      InvoiceQtyRelToOrderErr@6085599 : TextConst 'DEU=Die Anzahl (%3), die Sie fakturieren mîchten, ist grîsser als die ausstehende Anzahl im Auftrag %1. Sie kînnen nicht mehr als %2 Einheiten fakturieren.;ENU=The quantity (%3) that you are trying to invoice is greater than the outstanding quantity in order %1. You cannnot invoice more than %2 units.;NLD=De hoeveelheid (%3) die u probeert te factureren is groter dan de uitstaande hoeveelheid in order %1. U kunt niet meer dan %2 eenheden factureren.';
      CreditQtyRelToReturnOrderErr@6085598 : TextConst 'DEU=Die Anzahl (%3), die Sie gutschreiben mîchten, ist grîsser als die ausstehende Anzahl im Auftrag %1. Sie kînnen nicht mehr als %2 Einheiten fakturieren.;ENU=The quantity (%3) that you are trying to credit is greater than the outstanding quantity in return order %1. You cannnot credit more than %2 units.;NLD=De hoeveelheid (%3) die u probeert te crediteren is groter dan de uitstaande hoeveelheid in order %1. U kunt niet meer dan %2 eenheden factureren.';
      QtyToOrderErr@6085597 : TextConst 'DEU=Die Anzahl (%2), die Sie versuchen zu bestellen, ist niedriger als die Anzahl, die mit diesem Auftrag abgeglichen ist. Sie mÅssen mindestens %1 Einheiten bestellen.;ENU=The quantity (%2) that you are trying to order is lower than the quantity matched against this order. You must order at least %1 units.;NLD=De hoeveelheid (%2) die u probeert te bestellen is lager dan het aantal gematched aan deze order. U dient op zijn minst %1 eenheden te bestellen.';
      QtyToReturnErr@6085596 : TextConst 'DEU=Die Anzahl (%2), die Sie versuchen zu senden, ist niedriger als die Anzahl, die mit diesem Auftrag abgeglichen ist. Sie mÅssen mindestens %1 Einheiten zurÅcksenden.;ENU=The quantity (%2) that you are trying to return is lower than the quantity matched against this return order. You must return at least %1 units.;NLD=De hoeveelheid (%2) die u probeert terug te sturen is lager dan het aantal gematched aan deze order. U dient op zijn minst %1 eenheden terug te sturen.';
      PartialMatchToReceiptWithTrackingErr@6085603 : TextConst 'DEU=Es ist nicht mîglich, eine teilweise öbereinstimmung zwischen Beleg %1 und Eingangszeile (%2 %3) zu erstellen, weil mehrere Verfolgungszeilen fÅr die Eingangszeile vorhanden sind.;ENU=It is not possible to make a partial match between Document %1 and Receipt Line (%2 %3) as multiple tracking lines exists for the receipt line.;NLD=Het is niet mogelijk om een gedeeltelijke match te maken tussen document %1 en ontvangstregel (%2 %3) omdat meerdere traceringsregels bestaan voor de ontvangstregel.';
      PartialMatchToReturnsWithTrackingErr@6085602 : TextConst 'DEU=Es ist nicht mîglich, eine teilweise öbereinstimmung zwischen Beleg %1 und RÅcksendungszeile (%2 %3) zu erstellen, weil mehrere Verfolgungszeilen fÅr die RÅcksendungszeile vorhanden sind.;ENU=It is not possible to make a partial match between Document %1 and Return Shipment Line (%2 %3) as multiple tracking lines exists for the return shipment line.;NLD=Het is niet mogelijk om een gedeeltelijke match te maken tussen document %1 en retourverzendregel (%2 %3) omdat meerdere traceringsregels bestaan voor de retourverzendregel.';
      MatchToOrderWithTrackingErr@6085601 : TextConst 'DEU=Mit Auftrag abgleichen wird nicht unterstÅtzt fÅr Artikel, wofÅr eingehende Einkaufsverfolgung aktiviert ist oder fÅr Auftragszeilen, wofÅr Verfolgungszeilen vorhanden sind.;ENU=Match to Order is not supported for items with purchase inbound tracking enabled or for order lines where tracking lines exists.;NLD=Matchen aan order wordt niet ondersteund voor artikelen waarvoor inkomende inkooptracering is geactiveerd of voor orderregels waar traceringsregels voor bestaan.';
      MatchToReturnWithTrackingErr@6085600 : TextConst 'DEU=Mit Reklamation abgleichen wird nicht unterstÅtzt fÅr Artikel, wofÅr eingehende Einkaufsverfolgung aktiviert ist oder fÅr Auftragszeilen, wofÅr Verfolgungszeilen vorhanden sind.;ENU=Match to Return Order is not supported for items with purchase outbound tracking enabled or for order lines where tracking lines exists.;NLD=Matchen aan retourorder wordt niet ondersteund voor artikelen waarvoor uiutgaande inkooptracering is geactiveerd of voor orderregels waar traceringsregels voor bestaan.';

    PROCEDURE GetIsInvoice@1000000000(VAR Document@1000000000 : Record 6085590) : Boolean;
    VAR
      Field@1000000001 : Record 6085580;
      FieldRule@1000000002 : Record 6085583;
    BEGIN
      //**4PS.so --> Nog evalueren
      //Field.GET(Document."Template No.",Field.Type::Header,'DOCTYPE');
      //CaptureMgt.FilterRule(Field,FieldRule);
      //FieldRule.FINDFIRST;
      //EXIT(UPPERCASE(FieldRule.Rule) <> UPPERCASE(CaptureMgt.GetText(Document,Field.Type::Header,'DOCTYPE',0)));
      //**4PS.eo
      //**4PS.sn evalueren waarde "F" ??  taalafhankelijk?
      EXIT(UPPERCASE(CaptureMgt.GetText(Document, Field.Type::Header, 'DOCTYPE', 0)) = 'F') // Call C017454
      //**4PS.en
    END;

    PROCEDURE GetDocumentNo@1000000001(VAR Document@1000000000 : Record 6085590) : Code[50];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'DOCNO',0),1,50));
    END;

    PROCEDURE GetPostingDate@1160040003(VAR Document@1000000000 : Record 6085590) : Date;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDate(Document,Field.Type::Header,'POSTINGDATE',0));
    END;

    PROCEDURE GetDocumentDate@1000000003(VAR Document@1000000000 : Record 6085590) : Date;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDate(Document,Field.Type::Header,'DOCDATE',0));
    END;

    PROCEDURE GetDueDate@1000000002(VAR Document@1000000000 : Record 6085590) : Date;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDate(Document,Field.Type::Header,'DUEDATE',0));
    END;

    PROCEDURE GetOurContact@1000000004(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'OURCONTACT',0),1,250));
    END;

    PROCEDURE GetOurDocumentNo@1000000005(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'OURDOCNO',0),1,250));
    END;

    PROCEDURE GetCurrencyCode@1000000006(VAR Document@1000000000 : Record 6085590) : Code[10];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'CURRCODE',0),1,10));
    END;

    PROCEDURE GetAmountExclVAT@1000000007(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Header,'AMOUNTEXCLVAT',0));
    END;

    PROCEDURE GetSubtractedAmountExclVAT@1160140009(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF NOT Field.GET(Document."Template No.",Field.Type::Header,'AMOUNTEXCLVAT') THEN
        EXIT;

      EXIT(GetAmountExclVAT(Document) - CaptureMgt.GetAmountToSubtract(Document,Field));
    END;

    PROCEDURE GetAllAmountsExclVAT@161024023(VAR Document@1000000000 : Record 6085590) TotalAmount : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      Field.SETRANGE("Template No.",Document."Template No.");
      Field.SETRANGE(Type,Field.Type::Header);
      Field.SETFILTER("Transfer Amount to Document",'<>%1',Field."Transfer Amount to Document"::" ");
      Field.SETRANGE("Subtract from Amount Field",'');
      Field.SETRANGE("Data Type",Field."Data Type"::Number);
      IF Field.FINDSET THEN
        REPEAT
          TotalAmount := TotalAmount + CaptureMgt.GetDecimal(Document,Field.Type::Header,Field.Code,0);
        UNTIL Field.NEXT = 0;
    END;

    PROCEDURE GetAmountInclVAT@1000000008(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Header,'AMOUNTINCLVAT',0));
    END;

    PROCEDURE GetVATAmount@1000000009(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Header,'VATAMOUNT',0));
    END;

    PROCEDURE GetAmountToMatch@161024031(VAR Document@161024012 : Record 6085590) Amount : Decimal;
    VAR
      Field@161024013 : Record 6085580;
    BEGIN
      Field.SETRANGE("Template No.",Document."Template No.");
      Field.SETRANGE(Type,Field.Type::Header);
      Field.SETRANGE("Data Type",Field."Data Type"::Number);
      Field.SETRANGE("Transfer Amount to Document",Field."Transfer Amount to Document"::"If lines are not recognised");
      Field.SETRANGE("Subtract from Amount Field",'');
      IF Field.FINDSET THEN
        REPEAT
          Amount += CaptureMgt.GetDecimal(Document,Field.Type,Field.Code,0);
          Amount -= CaptureMgt.GetAmountToSubtract(Document,Field);
        UNTIL Field.NEXT = 0;
    END;

    PROCEDURE GetPaymentId@1000000011(VAR Document@1000000000 : Record 6085590) : Text[50];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'PAYMENT-ID',0),1,50));
    END;

    PROCEDURE GetPostingDescription@1000000012(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'POSTINGDESC',0),1,250));
    END;

    PROCEDURE GetGLAccountNo@161024022(VAR Document@1000000000 : Record 6085590;Suffex@161024012 : Code[10]) : Text[250];
    VAR
      Field@161024013 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'GLACCOUNTNO' + Suffex,0),1,250));
    END;

    PROCEDURE GetLineAccountNo@1000000013(VAR Document@1000000000 : Record 6085590;LineNo@1000000001 : Integer) : Code[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Line,'NO',LineNo),1,250));
    END;

    PROCEDURE GetLineDescription@1000000014(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Line,'DESC',LineNo),1,250));
    END;

    PROCEDURE GetLineQuantity@1000000015(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'QUANTITY',LineNo));
    END;

    PROCEDURE GetLineUnitCost@1000000016(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'UNITCOST',LineNo));
    END;

    PROCEDURE GetLineDiscAmount@1000000017(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'DISCAMOUNT',LineNo));
    END;

    PROCEDURE GetLineDiscPct@1000000018(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'DISCPCT',LineNo));
    END;

    PROCEDURE GetLineAmount@1000000019(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
      Qty@1100528203 : Decimal;
      UnitCost@1100528202 : Decimal;
      LineDiscPerc@1100528201 : Decimal;
    BEGIN
      //EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'LINEAMOUNT',LineNo));
      //**4PS.sn
      IF CaptureMgt.GetDecimal(Document,Field.Type::Line,'LINEAMOUNT',LineNo) <> 0 THEN
        EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'LINEAMOUNT',LineNo))
      ELSE BEGIN
        Qty := GetLineQuantity(Document, LineNo);
        UnitCost := GetLineUnitCost(Document, LineNo);
        LineDiscPerc := GetLineDiscPct(Document, LineNo);
        IF Qty = 0 THEN
          EXIT(UnitCost * (100 - LineDiscPerc) / 100)
        ELSE
          EXIT(Qty * UnitCost * (100 - LineDiscPerc) / 100);
      END;
      //**4PS.en
    END;

    PROCEDURE GetOurDocNoDesc@1000000025(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF Field.GET(Document."Template No.",Field.Type::Header,'OURDOCNO') THEN
        EXIT(Field."Field Name");
    END;

    PROCEDURE GetAmountExclVATDesc@1000000027(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF Field.GET(Document."Template No.",Field.Type::Header,'AMOUNTEXCLVAT') THEN
        EXIT(Field."Field Name");
    END;

    PROCEDURE GetDocDateDesc@1000000026(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF Field.GET(Document."Template No.",Field.Type::Header,'DOCDATE') THEN
        EXIT(Field."Field Name");
    END;

    PROCEDURE GetDueDateDesc@1000000029(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF Field.GET(Document."Template No.",Field.Type::Header,'DUEDATE') THEN
        EXIT(Field."Field Name");
    END;

    PROCEDURE GetPurchPostingDate@1160040027(Document@1160040001 : Record 6085590;Template@1160040002 : Record 6085579) : Date;
    VAR
      PostingDate@1160040000 : Date;
    BEGIN
      PostingDate := GetPostingDate(Document);

      CASE TRUE OF
        PostingDate <> 0D:
          EXIT(PostingDate);
        Template."Posting Date" = Template."Posting Date"::"Use Document Date (recognized on document)":
          EXIT(GetDocumentDate(Document));
        Template."Posting Date" = Template."Posting Date"::"Use Today":
          EXIT(TODAY);
        Template."Posting Date" = Template."Posting Date"::"Use Work Date":
          EXIT(WORKDATE);
      END;
    END;

    PROCEDURE AutoMatchEnabled@1160040011(VAR Document@1160040000 : Record 6085590) : Boolean;
    VAR
      Template@1160040001 : Record 6085579;
    BEGIN
      Template.GET(Document."Template No.");
      IF Template."Purch. Auto Match" THEN BEGIN
        IF GetIsInvoice(Document) THEN
          EXIT(Template."Purch. Match Invoice" <> Template."Purch. Match Invoice"::No)
        ELSE
          EXIT(Template."Purch. Match Credit Memo" <> Template."Purch. Match Credit Memo"::No);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE AutoMatch@161024048(VAR Document@1000000000 : Record 6085590);
    VAR
      Template@1160040003 : Record 6085579;
      Field@161024014 : Record 6085580;
      Field2@6085577 : Record 6085580;
      Comment@1000000001 : Record 6085594;
      PurchDocMatch@1160040008 : Record 6085700;
      PurchHeader@1160040010 : Record 38;
      PurchLine@1160040005 : Record 39;
      PurchRcptLine@1160040014 : Record 121;
      ReturnShptLine@1160040019 : Record 6651;
      DocumentLine@1160040011 : TEMPORARY Record 6085596;
      Location@6085576 : Record 14;
      CaptureMgnt@1160040018 : Codeunit 6085576;
      PurchDocType@1160040015 : 'Receipt,Return Shipment,Order,Return Order';
      Matched@161024012 : Boolean;
      MatchReceipt@1160040001 : Boolean;
      MatchOrder@1160040000 : Boolean;
      MatchReturnShipment@1160040007 : Boolean;
      MatchReturnOrder@1160040004 : Boolean;
      InvalidOrderNoFilter@6085574 : Boolean;
      OrderNoNotFound@1160040013 : Boolean;
      ExistWithDiffVendor@1160040024 : Boolean;
      ExistWithDiffCurrency@1160040023 : Boolean;
      ShowTolerenceMsg@1160040027 : Boolean;
      ShowRequireReceiveMsg@1160040026 : Boolean;
      ShowPOFullyReceivedMsg@1160040025 : Boolean;
      ShowNoReceiptExistMsg@1160040022 : Boolean;
      ShowReturnShptExistMsg@1160040021 : Boolean;
      ShowPOFullyReceivedAndInvoiMsg@1160040020 : Boolean;
      InvalidOrderNo@6085578 : Boolean;
      RequireReceive@6085579 : Boolean;
      OrderNoHasIllegalFilterChars@6085580 : Boolean;
      MatchedAmount@1160040002 : Decimal;
      OrderNo@1160040009 : Code[20];
      OrderNoFilter@1160040012 : Code[1024];
      PayToVendorNo@1160040017 : Code[20];
      CurrencyCode@1160040016 : Code[10];
      OurDocumentNo@6085573 : Code[250];
      i@6085575 : Integer;
    BEGIN
      GetGLSetup;
      GetDCSetup;
      Template.GET(Document."Template No.");

      OurDocumentNo := GetOurDocumentNo(Document);
      OrderNo := COPYSTR(OurDocumentNo,1,MAXSTRLEN(OrderNo));
      OrderNoHasIllegalFilterChars := CaptureMgt.HasIllegalFilterCharacters(OrderNo);

      InvalidOrderNoFilter := CheckOurOrderNoFilter(OurDocumentNo);

      IF InvalidOrderNoFilter THEN
        OrderNoFilter := OrderNo
      ELSE
        OrderNoFilter := CONVERTSTR(OurDocumentNo,',','|');

      PurchDocMatch.SETRANGE("Document No.",Document."No.");
      PurchDocMatch.DELETEALL(TRUE);

      Document."Match Status" := Document."Match Status"::Unmatched;
      Document.MODIFY(TRUE);

      Document.DeleteComments(Comment.Area::Match);

      Field.GET(Document."Template No.",Field.Type::Header,'DOCTYPE');
      IF NOT CaptureMgnt.IsValidValue(Field,Document."No.",0) THEN BEGIN
        Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Warning,Text026);
        EXIT;
      END;

      IF GetIsInvoice(Document) THEN
        PurchDocType := PurchDocType::Order
      ELSE
        PurchDocType := PurchDocType::"Return Order";

      PayToVendorNo := Document.GetSourceID;

      IF (GetCurrencyCode(Document) = GLSetup."LCY Code") AND (NOT DCSetup."Fill-out LCY") THEN
        CurrencyCode := ''
      ELSE
        CurrencyCode := GetCurrencyCode(Document);

      MatchReceipt := (PurchDocType = PurchDocType::Order) AND
        ((Template."Purch. Match Invoice" = Template."Purch. Match Invoice"::"Receipt Only") OR
        (Template."Purch. Match Invoice" = Template."Purch. Match Invoice"::"Receipt or Order"));

      MatchOrder := (PurchDocType = PurchDocType::Order) AND
        ((Template."Purch. Match Invoice" = Template."Purch. Match Invoice"::"Order Only") OR
        (Template."Purch. Match Invoice" = Template."Purch. Match Invoice"::"Receipt or Order"));

      MatchReturnShipment := (PurchDocType = PurchDocType::"Return Order") AND
        ((Template."Purch. Match Credit Memo" = Template."Purch. Match Credit Memo"::"Return Shipment Only") OR
        (Template."Purch. Match Credit Memo" = Template."Purch. Match Credit Memo"::"Return Shipment or Return Order"));

      MatchReturnOrder := (PurchDocType = PurchDocType::"Return Order") AND
        ((Template."Purch. Match Credit Memo" = Template."Purch. Match Credit Memo"::"Return Order Only") OR
        (Template."Purch. Match Credit Memo" = Template."Purch. Match Credit Memo"::"Return Shipment or Return Order"));

      SetPurchHeaderFilters(PurchHeader,PurchDocType,PayToVendorNo,CurrencyCode,TRUE,TRUE);
      SetPurchLineFilters(PurchLine,PurchDocType,PayToVendorNo,CurrencyCode,TRUE,TRUE);
      SetPurchRcptLineFilters(PurchRcptLine,PayToVendorNo,CurrencyCode,TRUE,TRUE);
      SetReturnShptLineFilters(ReturnShptLine,PayToVendorNo,CurrencyCode,TRUE,TRUE);

      Document.BuildTempLinesTable(DocumentLine);
      IF DocumentLine.ISEMPTY THEN BEGIN
      // *******************************************************************************************************************************
      // MATCH WHEN NO LINES HAVE BEEN RECOGNIZED
      // *******************************************************************************************************************************
        IF TryToMatchTotalAmount(OrderNoFilter,PurchHeader,PurchLine,PurchRcptLine,ReturnShptLine,Template,Document,PurchDocType,
          PayToVendorNo,CurrencyCode,MatchReceipt,MatchOrder,MatchReturnShipment,MatchReturnOrder,OrderNoNotFound,
          OrderNoHasIllegalFilterChars)
        THEN
          EXIT;

        IF NOT Field.GET(Document."Template No.",Field.Type::Header,'OURDOCNO') THEN
          CLEAR(Field);

        IF OrderNoNotFound THEN BEGIN
          PurchHeader.RESET;
          SetPurchHeaderFilters(PurchHeader,PurchDocType,'','',FALSE,FALSE);
          IF NOT OrderNoHasIllegalFilterChars THEN
            PurchHeader.SETFILTER("No.",OrderNoFilter)
          ELSE
            IF STRLEN(OrderNoFilter) <= MAXSTRLEN(PurchHeader."No.") THEN
              PurchHeader.SETRANGE("No.",OrderNoFilter)
            ELSE BEGIN
              InvalidOrderNo := TRUE;
              ExistWithDiffVendor := FALSE;
              ExistWithDiffCurrency := FALSE;
            END;

          IF NOT InvalidOrderNo THEN BEGIN
            PurchHeader.SETFILTER("Pay-to Vendor No.",'<>%1',PayToVendorNo);
            ExistWithDiffVendor := NOT PurchHeader.ISEMPTY;

            PurchHeader.SETRANGE("Pay-to Vendor No.");
            PurchHeader.SETFILTER("Currency Code",'<>%1',CurrencyCode);
            ExistWithDiffCurrency := NOT PurchHeader.ISEMPTY;
          END;

          IF ExistWithDiffVendor THEN
            Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,STRSUBSTNO(NoOrderWithVendFoundMsg,
              Field."Field Name",OurDocumentNo));

          IF ExistWithDiffCurrency THEN
            Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,STRSUBSTNO(NoOrderWithCurrFoundMsg,
              Field."Field Name",OurDocumentNo));

          IF NOT ExistWithDiffVendor AND NOT ExistWithDiffCurrency THEN
            Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,STRSUBSTNO(NoOrderNoFoundMsg,
              Field."Field Name",OurDocumentNo));
        END ELSE BEGIN
          IF OurDocumentNo <> '' THEN BEGIN
            PurchLine.RESET;
            SetPurchLineFilters(PurchLine,PurchDocType,PayToVendorNo,CurrencyCode,TRUE,TRUE);
            PurchLine.SETRANGE("Outstanding Quantity");
            PurchLine.SETFILTER("Document No.",OrderNoFilter);
            PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
            PurchLine.SETFILTER("No.",'<>''''');
            PurchLine.SETFILTER(Quantity,'<>0');

            IF MatchReceipt THEN BEGIN
              // Tolerence msg if document has quantity recieved not invoiced
              PurchLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>0');
              IF NOT PurchLine.ISEMPTY THEN
                ShowTolerenceMsg := TRUE;
              PurchLine.SETRANGE("Qty. Rcd. Not Invoiced");
            END;

            IF NOT ShowTolerenceMsg THEN
              IF MatchReturnShipment THEN BEGIN
                // Tolerence msg if document has quantity shipped not invoiced
                PurchLine.SETFILTER("Return Qty. Shipped Not Invd.",'<>0');
                IF NOT PurchLine.ISEMPTY THEN
                  ShowTolerenceMsg := TRUE;
                PurchLine.SETRANGE("Return Qty. Shipped Not Invd.");
              END;

            IF NOT ShowTolerenceMsg THEN
              IF MatchOrder OR MatchReturnOrder THEN BEGIN
                // Tolerence msg if document has outstanding quantity for type GL, FA or Item Charge
                PurchLine.SETFILTER("Outstanding Quantity",'<>0');
                PurchLine.SETFILTER(Type,'<>%1&<>%2',PurchLine.Type::" ",PurchLine.Type::Item);
                IF NOT PurchLine.ISEMPTY THEN
                  ShowTolerenceMsg := TRUE
                ELSE BEGIN
                  // Tolerence msg if document has outstanding quantity for type Item where location doesn't require receive
                  PurchLine.SETRANGE(Type,PurchLine.Type::Item);
                  IF PurchLine.FINDSET THEN
                    REPEAT
                      IF NOT Location.RequireReceive(PurchLine."Location Code") THEN
                        ShowTolerenceMsg := TRUE;
                    UNTIL (PurchLine.NEXT = 0) OR ShowTolerenceMsg;
                  PurchLine.SETRANGE("Outstanding Quantity");
                  PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
                END;
              END;

            IF NOT ShowTolerenceMsg THEN
              IF MatchOrder OR MatchReturnOrder THEN BEGIN
                // Require receive if all lines type Item with location that require receive
                PurchLine.SETFILTER("Outstanding Quantity",'<>0');
                RequireReceive := TRUE;
                IF PurchLine.FINDSET THEN BEGIN
                  REPEAT
                    IF ((PurchLine.Type = PurchLine.Type::Item) AND (NOT Location.RequireReceive(PurchLine."Location Code"))) OR
                      (PurchLine.Type <> PurchLine.Type::Item)
                    THEN
                      RequireReceive := FALSE;
                  UNTIL PurchLine.NEXT = 0;
                END ELSE
                  RequireReceive := FALSE;
                PurchLine.SETRANGE("Outstanding Quantity");

                IF NOT (MatchReceipt OR MatchReturnShipment) THEN
                  ShowRequireReceiveMsg := RequireReceive;
              END;

            IF NOT ShowTolerenceMsg AND NOT ShowRequireReceiveMsg THEN BEGIN
              IF MatchOrder OR MatchReturnOrder THEN BEGIN
                PurchLine.SETFILTER("Outstanding Quantity",'<>0');
                IF PurchLine.ISEMPTY THEN
                  ShowPOFullyReceivedMsg := TRUE;
                PurchLine.SETRANGE("Outstanding Quantity",0);
              END;

              IF MatchReceipt THEN BEGIN
                PurchRcptLine.RESET;
                SetPurchRcptLineFilters(PurchRcptLine,PayToVendorNo,CurrencyCode,TRUE,TRUE);
                PurchRcptLine.SETFILTER("Order No.",OrderNoFilter);
                IF PurchRcptLine.ISEMPTY THEN
                  ShowNoReceiptExistMsg := TRUE;
              END;

              IF MatchReturnShipment THEN BEGIN
                ReturnShptLine.RESET;
                SetReturnShptLineFilters(ReturnShptLine,PayToVendorNo,CurrencyCode,TRUE,TRUE);
                ReturnShptLine.SETFILTER("Return Order No.",OrderNoFilter);
                IF ReturnShptLine.ISEMPTY THEN
                  ShowReturnShptExistMsg := TRUE;
              END;

              IF ShowPOFullyReceivedMsg AND (ShowNoReceiptExistMsg OR ShowReturnShptExistMsg) THEN BEGIN
                ShowPOFullyReceivedAndInvoiMsg := TRUE;
                ShowPOFullyReceivedMsg := FALSE;
                ShowNoReceiptExistMsg := FALSE;
                ShowReturnShptExistMsg := FALSE;
              END;
            END;

            CASE TRUE OF
              ShowTolerenceMsg:
                Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,STRSUBSTNO(OutsideTolerenceMsg,
                  Field."Field Name",OurDocumentNo));
              ShowRequireReceiveMsg:
                Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,STRSUBSTNO(LocationRequireReceiveMsg,
                  Field."Field Name",OurDocumentNo));
              ShowPOFullyReceivedAndInvoiMsg:
                Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,
                  STRSUBSTNO(POFullyReceivedAndInvoicedMsg,Field."Field Name",OurDocumentNo));
              ShowPOFullyReceivedMsg:
                Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,STRSUBSTNO(POFullyReceivedMsg,
                  Field."Field Name",OurDocumentNo));
              ShowNoReceiptExistMsg:
                IF RequireReceive THEN
                  Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,
                    STRSUBSTNO(NoOpenReceiptwLRRExistMsg,Field."Field Name",OurDocumentNo))
                ELSE
                  Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,STRSUBSTNO(NoOpenReceiptExistMsg,
                    Field."Field Name",OurDocumentNo));
              ShowReturnShptExistMsg:
                Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,STRSUBSTNO(ReturnShptExistMsg,
                  Field."Field Name",OurDocumentNo));
            END;
          END;
        END;

        Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,Text026);
      END ELSE BEGIN
        IF GetIsInvoice(Document) THEN BEGIN
          IF MatchReceipt THEN
            Matched := AutoMatchReceipt(Document,OrderNo);

          IF MatchOrder AND NOT Matched THEN
            Matched := AutoMatchOpenPurchDoc(Document,0,OrderNo);
        END ELSE BEGIN
          IF MatchReturnShipment THEN
            Matched := AutoMatchReturnShpt(Document,OrderNo);

          IF MatchReturnOrder AND NOT Matched THEN
            Matched := AutoMatchOpenPurchDoc(Document,1,OrderNo);
        END;

        IF Matched THEN BEGIN
          Document."Match Status" := Document."Match Status"::"Automatically Matched";
          Document.MODIFY(TRUE);

          MatchedAmount := GetDocMatchedAmount(Document);

          IF MatchWithinTolerance(Template,GetPurchPostingDate(Document,Template),CurrencyCode,0,GetAmountToMatch(Document),
            MatchedAmount)
          THEN
            Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Information,Text024)
          ELSE
            Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Warning,Text025)
        END ELSE
          Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Warning,Text026);
      END;
    END;

    PROCEDURE TryToMatchTotalAmount@1160040096(OrderNoFilter@1160040006 : Code[1024];VAR PurchHeader@1160040005 : Record 38;VAR PurchLine@1160040004 : Record 39;VAR PurchRcptLine@1160040003 : Record 121;VAR ReturnShptLine@1160040001 : Record 6651;Template@1160040014 : Record 6085579;VAR Document@1160040013 : Record 6085590;PurchDocType@1160040012 : 'Receipt,Return Shipment,Order,Return Order';PayToVendorNo@1160040002 : Code[20];CurrencyCode@1160040000 : Code[10];MatchReceipt@1160040008 : Boolean;MatchOrder@1160040009 : Boolean;MatchReturnShipment@1160040010 : Boolean;MatchReturnOrder@1160040011 : Boolean;VAR OrderNoNotFound@1160040019 : Boolean;OrderNoHasIllegalFilterChars@6085573 : Boolean) : Boolean;
    VAR
      PurchDocMatchTmp@1160040007 : TEMPORARY Record 6085700;
      BestPurchDocMatchTmp@1160040018 : TEMPORARY Record 6085700;
      PurchRcptLine2@1160040016 : Record 121;
      ReturnShptLine2@1160040015 : Record 6651;
    BEGIN
      IF OrderNoFilter <> '' THEN BEGIN
        IF NOT OrderNoHasIllegalFilterChars THEN BEGIN
          PurchHeader.SETFILTER("No.",OrderNoFilter);
          PurchLine.SETFILTER("Document No.",OrderNoFilter);
          PurchRcptLine.SETFILTER("Order No.",OrderNoFilter);
          ReturnShptLine.SETFILTER("Return Order No.",OrderNoFilter);
        END ELSE BEGIN
          IF STRLEN(OrderNoFilter) <= MAXSTRLEN(PurchHeader."No.") THEN BEGIN
            PurchHeader.SETRANGE("No.",OrderNoFilter);
            PurchLine.SETRANGE("Document No.",OrderNoFilter);
            PurchRcptLine.SETRANGE("Order No.",OrderNoFilter);
            ReturnShptLine.SETRANGE("Return Order No.",OrderNoFilter);
          END ELSE BEGIN
            OrderNoNotFound := TRUE;
            EXIT(FALSE);
          END;
        END;

        IF PurchHeader.ISEMPTY AND PurchRcptLine.ISEMPTY AND ReturnShptLine.ISEMPTY THEN BEGIN
          OrderNoNotFound := TRUE;
          EXIT(FALSE);
        END;
      END ELSE BEGIN
        PurchHeader.SETRANGE("No.");
        PurchLine.SETRANGE("Document No.");
        PurchRcptLine.SETRANGE("Order No.");
        ReturnShptLine.SETRANGE("Return Order No.");
      END;

      // 1. Try to match against all Purch. Receipts and all Purch. Orders (or all Shipments and Returns) in NAV
      PurchDocMatchTmp.RESET;
      PurchDocMatchTmp.DELETEALL;

      IF MatchOrder OR MatchReturnOrder THEN
        FindOpenPurchLines(PurchDocMatchTmp,PurchLine,Document."No.",PurchDocType);

      IF MatchReceipt THEN
        FindOpenPurchRcptLines(PurchDocMatchTmp,PurchRcptLine,Document."No.");

      IF MatchReturnShipment THEN
        FindOpenReturnShptLines(PurchDocMatchTmp,ReturnShptLine,Document."No.");

      CalcBestMatch(PurchDocMatchTmp,BestPurchDocMatchTmp,Template,Document);

      // 2. Try to match against all Purchase Receipts or (Shipments) in NAV
      PurchDocMatchTmp.RESET;
      PurchDocMatchTmp.DELETEALL;

      IF MatchReceipt THEN
        FindOpenPurchRcptLines(PurchDocMatchTmp,PurchRcptLine,Document."No.");

      IF MatchReturnShipment THEN
        FindOpenReturnShptLines(PurchDocMatchTmp,ReturnShptLine,Document."No.");

      CalcBestMatch(PurchDocMatchTmp,BestPurchDocMatchTmp,Template,Document);

      // 3. Try to match against one Purchase Receipt (or Shipment) in NAV (search Receipts (or Shipments) one by one)
      IF MatchReceipt THEN BEGIN
        PurchRcptLine2.COPY(PurchRcptLine);
        IF PurchRcptLine2.FINDSET THEN
          REPEAT
            PurchDocMatchTmp.RESET;
            PurchDocMatchTmp.DELETEALL;

            PurchRcptLine.SETRANGE("Document No.",PurchRcptLine2."Document No.");
            FindOpenPurchRcptLines(PurchDocMatchTmp,PurchRcptLine,Document."No.");
            PurchRcptLine.SETRANGE("Document No.");

            CalcBestMatch(PurchDocMatchTmp,BestPurchDocMatchTmp,Template,Document);

            PurchRcptLine2 := PurchRcptLine;
          UNTIL PurchRcptLine2.NEXT = 0;
      END;

      IF MatchReturnShipment THEN BEGIN
        ReturnShptLine2.COPY(ReturnShptLine);
        IF ReturnShptLine2.FINDSET THEN
          REPEAT
            PurchDocMatchTmp.RESET;
            PurchDocMatchTmp.DELETEALL;

            ReturnShptLine.SETRANGE("Document No.",ReturnShptLine2."Document No.");
            FindOpenReturnShptLines(PurchDocMatchTmp,ReturnShptLine,Document."No.");
            ReturnShptLine.SETRANGE("Document No.");

            CalcBestMatch(PurchDocMatchTmp,BestPurchDocMatchTmp,Template,Document);

            ReturnShptLine2 := ReturnShptLine;
          UNTIL ReturnShptLine2.NEXT = 0;
      END;

      // 4. Try to match aginst one Purchase Order (or Return Order)
      IF MatchOrder OR MatchReturnOrder THEN
        IF PurchHeader.FINDSET THEN
          REPEAT
            PurchDocMatchTmp.RESET;
            PurchDocMatchTmp.DELETEALL;

            PurchLine.SETRANGE("Document No.",PurchHeader."No.");
            FindOpenPurchLines(PurchDocMatchTmp,PurchLine,Document."No.",PurchDocType);
            PurchLine.SETRANGE("Document No.");

            CalcBestMatch(PurchDocMatchTmp,BestPurchDocMatchTmp,Template,Document);
          UNTIL PurchHeader.NEXT = 0;

      // 5. Try to match aginst one Purchase Order and all related Receipts (or Return Order and all related Shipments)
      IF MatchOrder OR MatchReturnOrder THEN
        IF PurchHeader.FINDSET THEN
          REPEAT
            PurchDocMatchTmp.RESET;
            PurchDocMatchTmp.DELETEALL;

            PurchLine.SETRANGE("Document No.",PurchHeader."No.");
            FindOpenPurchLines(PurchDocMatchTmp,PurchLine,Document."No.",PurchDocType);
            PurchLine.SETRANGE("Document No.");

            IF MatchReceipt THEN BEGIN
              PurchRcptLine.SETRANGE("Order No.",PurchHeader."No.");
              FindOpenPurchRcptLines(PurchDocMatchTmp,PurchRcptLine,Document."No.");
              PurchRcptLine.SETRANGE("Order No.");
            END;

            IF MatchReturnShipment THEN BEGIN
              ReturnShptLine.SETRANGE("Return Order No.",PurchHeader."No.");
              FindOpenReturnShptLines(PurchDocMatchTmp,ReturnShptLine,Document."No.");
              ReturnShptLine.SETRANGE("Return Order No.");
            END;

            CalcBestMatch(PurchDocMatchTmp,BestPurchDocMatchTmp,Template,Document);
          UNTIL PurchHeader.NEXT = 0;

      IF SaveMatch(BestPurchDocMatchTmp,Template,Document,PurchDocType,CurrencyCode) THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE SetPurchHeaderFilters@1160040075(VAR PurchHeader@1160040003 : Record 38;PurchDocType@1160040002 : 'Receipt,Return Shipment,Order,Return Order';PayToVendorNo@1160040001 : Code[20];CurrencyCode@1160040000 : Code[10];SetPayToVendFilter@1160040004 : Boolean;SetCurrencyFilter@1160040005 : Boolean);
    BEGIN
      // Used IF THEN as key does not exist in NAV 3.70
      IF PurchHeader.SETCURRENTKEY("Document Type","Pay-to Vendor No.") THEN;

      IF PurchDocType = PurchDocType::Order THEN
        PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Order)
      ELSE
        PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::"Return Order");

      IF SetPayToVendFilter THEN
        PurchHeader.SETRANGE("Pay-to Vendor No.",PayToVendorNo);
      IF SetCurrencyFilter THEN
        PurchHeader.SETRANGE("Currency Code",CurrencyCode);
    END;

    PROCEDURE SetPurchLineFilters@1160040054(VAR PurchLine@1160040001 : Record 39;PurchDocType@1160040003 : 'Receipt,Return Shipment,Order,Return Order';PayToVendorNo@1160040000 : Code[20];CurrencyCode@1160040002 : Code[10];SetPayToVendFilter@1160040005 : Boolean;SetCurrencyFilter@1160040004 : Boolean);
    BEGIN
      PurchLine.SETCURRENTKEY("Document Type","Pay-to Vendor No.","Currency Code");

      IF PurchDocType = PurchDocType::Order THEN
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order)
      ELSE
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::"Return Order");

      IF SetPayToVendFilter THEN
        PurchLine.SETRANGE("Pay-to Vendor No.",PayToVendorNo);
      PurchLine.SETFILTER("Outstanding Quantity",'<>0');
      IF SetCurrencyFilter THEN
        PurchLine.SETRANGE("Currency Code",CurrencyCode);
    END;

    PROCEDURE SetPurchRcptLineFilters@1160040055(VAR PurchRcptLine@1160040000 : Record 121;PayToVendorNo@1160040002 : Code[20];CurrencyCode@1160040001 : Code[10];SetPayToVendFilter@1160040004 : Boolean;SetCurrencyFilter@1160040003 : Boolean);
    BEGIN
      PurchRcptLine.SETCURRENTKEY("Pay-to Vendor No.");
      IF SetPayToVendFilter THEN
        PurchRcptLine.SETRANGE("Pay-to Vendor No.",PayToVendorNo);
      PurchRcptLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>0');
      IF SetCurrencyFilter THEN
        PurchRcptLine.SETRANGE("Currency Code",CurrencyCode);
    END;

    PROCEDURE SetReturnShptLineFilters@1160040064(VAR ReturnShptLine@1160040003 : Record 6651;PayToVendorNo@1160040002 : Code[20];CurrencyCode@1160040001 : Code[10];SetPayToVendFilter@1160040004 : Boolean;SetCurrencyFilter@1160040000 : Boolean);
    BEGIN
      ReturnShptLine.SETCURRENTKEY("Pay-to Vendor No.");
      IF SetPayToVendFilter THEN
        ReturnShptLine.SETRANGE("Pay-to Vendor No.",PayToVendorNo);
      ReturnShptLine.SETFILTER("Return Qty. Shipped Not Invd.",'<>0');
      IF SetCurrencyFilter THEN
        ReturnShptLine.SETRANGE("Currency Code",CurrencyCode);
    END;

    PROCEDURE FindOpenPurchLines@1160040028(VAR PurchDocMatchTmp@1160040008 : TEMPORARY Record 6085700;VAR PurchLine@1160040000 : Record 39;DocumentNo@1160040004 : Code[20];PurchDocType@1160040005 : 'Receipt,Return Shipment,Order,Return Order');
    VAR
      Location@1160040001 : Record 14;
      AvailMatchQty@1160040002 : Decimal;
    BEGIN
      IF PurchLine.FINDSET THEN
        REPEAT
          IF (PurchLine.Type <> PurchLine.Type::Item) OR
            ((PurchLine.Type = PurchLine.Type::Item) AND (NOT Location.RequireReceive(PurchLine."Location Code")))
          THEN BEGIN
            AvailMatchQty := PurchLine."Outstanding Quantity" - GetPurchLineMatchedQty(PurchLine);
            IF ((PurchLine.Quantity > 0) AND (AvailMatchQty > 0)) OR ((PurchLine.Quantity < 0) AND (AvailMatchQty < 0)) THEN BEGIN
              InsertPurchDocMatch(PurchDocMatchTmp,DocumentNo,0,PurchDocType,PurchLine."Document No.",PurchLine."Line No.",
                AvailMatchQty,PurchLine."Direct Unit Cost",PurchLine."Line Discount %");
            END;
          END;
        UNTIL PurchLine.NEXT = 0;
    END;

    PROCEDURE FindOpenPurchRcptLines@1160040046(VAR PurchDocMatchTmp@1160040008 : TEMPORARY Record 6085700;VAR PurchRcptLine@1160040000 : Record 121;DocumentNo@1160040004 : Code[20]);
    VAR
      PurchLine@1160040001 : Record 39;
      PurchDocMatch@1160040003 : Record 6085700;
      AvailMatchQty@1160040002 : Decimal;
    BEGIN
      IF PurchRcptLine.FINDSET THEN
        REPEAT
          AvailMatchQty := PurchRcptLine."Qty. Rcd. Not Invoiced" - GetRcptLineMatchedQty(PurchRcptLine);
          IF ((PurchRcptLine.Quantity > 0) AND (AvailMatchQty > 0)) OR
            ((PurchRcptLine.Quantity < 0) AND (AvailMatchQty < 0))
          THEN BEGIN
            IF (PurchLine."Document No." <> PurchRcptLine."Order No.") OR
              (PurchLine."Line No." <> PurchRcptLine."Order Line No.")
            THEN
              PurchLine.GET(PurchLine."Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");

            InsertPurchDocMatch(PurchDocMatchTmp,DocumentNo,0,PurchDocMatch."Purch. Doc. Type"::Receipt,
              PurchRcptLine."Document No.",PurchRcptLine."Line No.",AvailMatchQty,PurchLine."Direct Unit Cost",
              PurchLine."Line Discount %");
          END;
        UNTIL PurchRcptLine.NEXT = 0;
    END;

    PROCEDURE FindOpenReturnShptLines@1160040067(VAR PurchDocMatchTmp@1160040008 : TEMPORARY Record 6085700;VAR ReturnShptLine@1160040005 : Record 6651;DocumentNo@1160040004 : Code[20]);
    VAR
      PurchLine@1160040000 : Record 39;
      PurchDocMatch@1160040003 : Record 6085700;
      AvailMatchQty@1160040002 : Decimal;
    BEGIN
      IF ReturnShptLine.FINDSET THEN
        REPEAT
          AvailMatchQty := ReturnShptLine."Return Qty. Shipped Not Invd." - GetReturnShptLineMatchedQty(ReturnShptLine);
          IF ((ReturnShptLine.Quantity > 0) AND (AvailMatchQty > 0)) OR
            ((ReturnShptLine.Quantity < 0) AND (AvailMatchQty < 0))
          THEN BEGIN
            IF (PurchLine."Document No." <> ReturnShptLine."Return Order No.") OR
              (PurchLine."Line No." <> ReturnShptLine."Return Order Line No.")
            THEN
              PurchLine.GET(PurchLine."Document Type"::"Return Order",ReturnShptLine."Return Order No.",
                ReturnShptLine."Return Order Line No.");

            InsertPurchDocMatch(PurchDocMatchTmp,DocumentNo,0,PurchDocMatch."Purch. Doc. Type"::"Return Shipment",
              ReturnShptLine."Document No.",ReturnShptLine."Line No.",AvailMatchQty,PurchLine."Direct Unit Cost",
              PurchLine."Line Discount %");
          END;
        UNTIL ReturnShptLine.NEXT = 0;
    END;

    PROCEDURE CalcBestMatch@1160040025(VAR PurchDocMatchTmp@1160040002 : TEMPORARY Record 6085700;VAR BestPurchDocMatchTmp@1160040003 : TEMPORARY Record 6085700;Template@1160040001 : Record 6085579;VAR Document@1160040000 : Record 6085590);
    VAR
      MatchedAmount@1160040005 : Decimal;
      DocumentAmount@1160040004 : Decimal;
      MatchedAmount2@1160040007 : Decimal;
    BEGIN
      IF PurchDocMatchTmp.ISEMPTY THEN
        EXIT;

      MatchedAmount := CalcPurchDocMatchAmt(Document,PurchDocMatchTmp);
      DocumentAmount := GetAmountToMatch(Document);

      IF (MatchWithinTolerance(Template,GetPurchPostingDate(Document,Template),GetCurrencyCode(Document),0,DocumentAmount,
        MatchedAmount))
      THEN BEGIN
        MatchedAmount2 := CalcPurchDocMatchAmt(Document,BestPurchDocMatchTmp);
        IF BestPurchDocMatchTmp.ISEMPTY OR (ABS(DocumentAmount - MatchedAmount) < ABS(DocumentAmount - MatchedAmount2)) THEN BEGIN
          BestPurchDocMatchTmp.DELETEALL;
          PurchDocMatchTmp.FINDSET;
          REPEAT
            BestPurchDocMatchTmp := PurchDocMatchTmp;
            BestPurchDocMatchTmp.INSERT;
          UNTIL PurchDocMatchTmp.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE SaveMatch@1160040070(VAR PurchDocMatchTmp@1160040000 : TEMPORARY Record 6085700;Template@1160040001 : Record 6085579;VAR Document@1160040002 : Record 6085590;PurchDocType@1160040011 : 'Receipt,Return Shipment,Order,Return Order';CurrencyCode@1160040013 : Code[10]) : Boolean;
    VAR
      Field@1160040006 : Record 6085580;
      Comment@1160040005 : Record 6085594;
      DCAppMgt@1160040016 : Codeunit 6085722;
      Temptext@1160040012 : Text[1024];
      MatchedAmount@1160040004 : Decimal;
      DocumentAmount@1160040003 : Decimal;
      MatchedPurchOrders@1160040007 : Code[1024];
      MatchedReturnOrders@1160040010 : Code[1024];
      MatchedPurchRcpts@1160040008 : Code[1024];
      MatchedReturnShipment@1160040009 : Code[1024];
      Temptext1@1160040014 : Text[1024];
      Temptext2@1160040015 : Text[1024];
    BEGIN
      IF PurchDocMatchTmp.ISEMPTY THEN
        EXIT(FALSE);

      MatchedAmount := CalcPurchDocMatchAmt(Document,PurchDocMatchTmp);
      DocumentAmount := GetAmountToMatch(Document);

      InsertPurchDocMatchFromTmp(PurchDocMatchTmp,MatchedPurchOrders,MatchedReturnOrders,MatchedPurchRcpts,MatchedReturnShipment);

      Document."Match Status" := Document."Match Status"::"Automatically Matched";
      Document.MODIFY(TRUE);

      // Create document comments
      IF PurchDocType = PurchDocType::Order THEN BEGIN
        CASE TRUE OF
          (MatchedPurchOrders <> '') AND (MatchedPurchRcpts <> ''):
            Temptext1 := COPYSTR(STRSUBSTNO(CombineMsg,PurchaseOrderNosMsg,MatchedPurchOrders,PurchaseReceiptNosMsg,MatchedPurchRcpts),
              1,MAXSTRLEN(Temptext1));
          (MatchedPurchOrders <> ''):
            Temptext1 := COPYSTR(STRSUBSTNO('%1 %2',PurchaseOrderNosMsg,MatchedPurchOrders),1,MAXSTRLEN(Temptext1));
          (MatchedPurchRcpts <> ''):
            Temptext1 := COPYSTR(STRSUBSTNO('%1 %2',PurchaseReceiptNosMsg,MatchedPurchRcpts),1,MAXSTRLEN(Temptext1));
        END;
      END ELSE BEGIN
        CASE TRUE OF
          (MatchedReturnOrders <> '') AND (MatchedReturnShipment <> ''):
            Temptext1 := COPYSTR(STRSUBSTNO(CombineMsg,ReturnOrderNosMsg,MatchedReturnOrders,ReturnShipmentNosMsg,
              MatchedReturnShipment),1,MAXSTRLEN(Temptext1));
          (MatchedReturnOrders <> ''):
            Temptext1 := COPYSTR(STRSUBSTNO('%1 %2',ReturnOrderNosMsg,MatchedReturnOrders),1,MAXSTRLEN(Temptext1));
          (MatchedReturnShipment <> ''):
            Temptext1 := COPYSTR(STRSUBSTNO('%1 %2',ReturnShipmentNosMsg,MatchedReturnShipment),1,MAXSTRLEN(Temptext1));
        END;
      END;

      IF DocumentAmount = MatchedAmount THEN BEGIN
        Temptext2 := COPYSTR(STRSUBSTNO(FullyMatchedWithMsg,Temptext1),1,MAXSTRLEN(Comment.Comment));
        Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Information,Temptext2);
      END ELSE BEGIN
        IF CurrencyCode <> '' THEN
          Temptext2 := COPYSTR(STRSUBSTNO(MatchInMsg,DCAppMgt.FormatAmount(MatchedAmount,CurrencyCode),
            DCAppMgt.FormatAmount(DocumentAmount,CurrencyCode),CurrencyCode,Temptext1),1,MAXSTRLEN(Comment.Comment))
        ELSE BEGIN
          GetGLSetup;

          Temptext2 := COPYSTR(STRSUBSTNO(MatchInMsg,DCAppMgt.FormatAmount(MatchedAmount,CurrencyCode),
            DCAppMgt.FormatAmount(DocumentAmount,CurrencyCode),GLSetup."LCY Code",Temptext1),1,MAXSTRLEN(Comment.Comment));
        END;

        Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Warning,Temptext2);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE AutoMatchOpenPurchDoc@1160040002(VAR Document@1000000000 : Record 6085590;MatchTo@1160040001 : 'Order,ReturnOrder';OrderNo@161024014 : Code[20]) : Boolean;
    VAR
      Template@1000000001 : Record 6085579;
      TemplField@1000000006 : Record 6085580;
      PurchLine@1160040000 : Record 39;
      DocumentLine@1000000005 : TEMPORARY Record 6085596;
      PurchDocMatch@1000000016 : Record 6085700;
      Location@1160040003 : Record 14;
      PurchDocType@1160040005 : 'Receipt,Return Shipment,Order,Return Order';
      AccountNo@6085579 : Code[20];
      Description@1000000007 : Text[50];
      Stop@1000000012 : Boolean;
      Matched@1160040006 : Boolean;
      MatchQty@1000000013 : Decimal;
      AvailMatchQty@1000000014 : Decimal;
      RemMatchQty@1000000015 : Decimal;
      MatchedAmount@161024012 : Decimal;
      UnitCost@1160040002 : Decimal;
      LineDiscAmount@6085575 : Decimal;
      LineAmount@6085574 : Decimal;
      LineDiscPct@6085573 : Decimal;
      DataTranslation@6085576 : Record 6085584;
    BEGIN
      GetGLSetup;
      GetDCSetup;
      Template.GET(Document."Template No.");

      PurchLine.SETCURRENTKEY("Document Type","Pay-to Vendor No.","Currency Code");
      IF MatchTo = MatchTo::Order THEN
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order)
      ELSE
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::"Return Order");
      PurchLine.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      PurchLine.SETFILTER("Outstanding Quantity",'<>0');

      IF (GetCurrencyCode(Document) = GLSetup."LCY Code") AND (NOT DCSetup."Fill-out LCY") THEN
        PurchLine.SETRANGE("Currency Code",'')
      ELSE
        PurchLine.SETRANGE("Currency Code",GetCurrencyCode(Document));

      Document.BuildTempLinesTable(DocumentLine);
      IF DocumentLine.FINDSET THEN BEGIN
      // *******************************************************************************************************************************
      // MATCH WHEN LINES HAVE BEEN RECOGNIZED
      // *******************************************************************************************************************************
        IF NOT TemplField.GET(Template."No.",TemplField.Type::Line,'ORDERNO') THEN BEGIN
          CASE Template."Purch. Match Order No." OF
            Template."Purch. Match Order No."::No:
              PurchLine.SETRANGE("Document No.");
            Template."Purch. Match Order No."::"Yes - always":
              PurchLine.SETRANGE("Document No.",OrderNo);
            Template."Purch. Match Order No."::"Yes - if present":
              IF OrderNo <> '' THEN
                PurchLine.SETRANGE("Document No.",OrderNo);
          END;
        END;

        REPEAT
          Stop := FALSE;
          PurchLine.SETRANGE(Type);
          PurchLine.SETRANGE("No.");
          PurchLine.SETRANGE("Variant Code");
          PurchLine.SETRANGE("Unit of Measure Code");
          PurchLine.SETRANGE("Direct Unit Cost");
          PurchLine.SETRANGE("Line Discount Amount");
          PurchLine.SETRANGE("Line Discount %");
          PurchLine.SETRANGE(Quantity);

          AccountNo := COPYSTR(GetLineAccountNo(Document,DocumentLine."Line No."),1,MAXSTRLEN(AccountNo));
          CASE Template."Purch. Match Item No." OF
            Template."Purch. Match Item No."::"Yes - always":
              BEGIN
                IF AccountNo = '' THEN
                  Stop := TRUE
                ELSE
                  IF GetLineTranslation(Template,Document,AccountNo,DataTranslation) THEN BEGIN
                    PurchLine.SETRANGE(Type,DataTranslation."Translate to Type");
                    PurchLine.SETRANGE("No.",DataTranslation."Translate to No.");
                    IF DataTranslation."Translate to Variant Code" <> '' THEN
                      PurchLine.SETRANGE("Variant Code",DataTranslation."Translate to Variant Code");
                    IF DataTranslation."Translate to UOM Code" <> '' THEN
                      PurchLine.SETRANGE("Unit of Measure Code",DataTranslation."Translate to UOM Code");
                  END ELSE
                    Stop := TRUE;
              END;

            Template."Purch. Match Item No."::"Yes - if present":
              BEGIN
                IF AccountNo <> '' THEN BEGIN
                  IF GetLineTranslation(Template,Document,AccountNo,DataTranslation) THEN BEGIN
                    PurchLine.SETRANGE(Type,DataTranslation."Translate to Type");
                    PurchLine.SETRANGE("No.",DataTranslation."Translate to No.");
                    IF DataTranslation."Translate to Variant Code" <> '' THEN
                      PurchLine.SETRANGE("Variant Code",DataTranslation."Translate to Variant Code");
                    IF DataTranslation."Translate to UOM Code" <> '' THEN
                      PurchLine.SETRANGE("Unit of Measure Code",DataTranslation."Translate to UOM Code");
                  END ELSE
                    Stop := TRUE;
                END;
              END;
          END;

          CASE Template."Purch. Match Quantity" OF
            Template."Purch. Match Quantity"::"Yes - always":
              PurchLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
            Template."Purch. Match Quantity"::"Yes - if present":
              IF GetLineQuantity(Document,DocumentLine."Line No.") <> 0 THEN
                PurchLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
          END;

          CASE Template."Purch. Match Unit Cost" OF
            Template."Purch. Match Unit Cost"::"Yes - always":
              BEGIN
                PurchLine.SETRANGE("Direct Unit Cost",GetLineUnitCost(Document,DocumentLine."Line No."));
                IF GetLineDiscPct(Document,DocumentLine."Line No.") <> 0 THEN
                  PurchLine.SETRANGE("Line Discount %",GetLineDiscPct(Document,DocumentLine."Line No."))
                ELSE
                  IF GetLineDiscAmount(Document,DocumentLine."Line No.") <> 0 THEN
                    PurchLine.SETRANGE("Line Discount Amount",GetLineDiscAmount(Document,DocumentLine."Line No."))
                  ELSE
                    PurchLine.SETRANGE("Line Discount Amount",0);
              END;
            Template."Purch. Match Unit Cost"::"Yes - if present":
              IF GetLineQuantity(Document,DocumentLine."Line No.") <> 0 THEN BEGIN
                PurchLine.SETRANGE("Direct Unit Cost",GetLineUnitCost(Document,DocumentLine."Line No."));
                IF GetLineDiscPct(Document,DocumentLine."Line No.") <> 0 THEN
                  PurchLine.SETRANGE("Line Discount %",GetLineDiscPct(Document,DocumentLine."Line No."))
                ELSE
                  IF GetLineDiscAmount(Document,DocumentLine."Line No.") <> 0 THEN
                    PurchLine.SETRANGE("Line Discount Amount",GetLineDiscAmount(Document,DocumentLine."Line No."))
                  ELSE
                    PurchLine.SETRANGE("Line Discount Amount",0);
              END;
          END;

          IF TemplField.Code <> '' THEN BEGIN
            OrderNo := COPYSTR(CaptureMgt.GetText(Document,TemplField.Type::Line,'ORDERNO',DocumentLine."Line No."),1,
              MAXSTRLEN(OrderNo));

            CASE Template."Purch. Match Order No." OF
              Template."Purch. Match Order No."::"Yes - always":
                PurchLine.SETRANGE("Document No.",OrderNo);
              Template."Purch. Match Order No."::"Yes - if present":
                IF OrderNo <> '' THEN
                  PurchLine.SETRANGE("Document No.",OrderNo);
            END;
          END;

          RemMatchQty := GetLineQuantity(Document,DocumentLine."Line No.") - GetDocLineMatchedQty(DocumentLine);
          IF (NOT Stop) AND PurchLine.FINDSET THEN
            REPEAT
              IF ((PurchLine.Type = PurchLine.Type::Item) AND (NOT Location.RequireReceive(PurchLine."Location Code"))) OR
                (PurchLine.Type <> PurchLine.Type::Item)
              THEN BEGIN
                AvailMatchQty := PurchLine."Outstanding Quantity" - GetPurchLineMatchedQty(PurchLine);
                IF AvailMatchQty > 0 THEN BEGIN
                  IF AvailMatchQty > RemMatchQty THEN
                    MatchQty := RemMatchQty
                  ELSE
                    MatchQty := AvailMatchQty;

                  UnitCost := GetLineUnitCost(Document,DocumentLine."Line No.");

                  IF MatchTo = MatchTo::Order THEN
                    PurchDocType := PurchDocType::Order
                  ELSE
                    PurchDocType := PurchDocType::"Return Order";

                  LineDiscAmount := GetLineDiscAmount(Document,DocumentLine."Line No.");

                  IF LineDiscAmount <> 0 THEN BEGIN
                    LineAmount := GetLineAmount(Document,DocumentLine."Line No.");

                    IF (LineDiscAmount + LineAmount) <> 0 THEN
                      LineDiscPct := ROUND(LineDiscAmount / (LineDiscAmount + LineAmount) * 100,0.00001)
                  END ELSE
                    LineDiscPct := GetLineDiscPct(Document,DocumentLine."Line No.");

                  InsertPurchDocMatch(PurchDocMatch,DocumentLine."Document No.",DocumentLine."Line No.",PurchDocType,
                    PurchLine."Document No.",PurchLine."Line No.",MatchQty,UnitCost,LineDiscPct);

                  RemMatchQty := RemMatchQty - MatchQty;
                  Matched := TRUE;
                END;
              END;
            UNTIL (PurchLine.NEXT = 0) OR (RemMatchQty <= 0);
        UNTIL DocumentLine.NEXT = 0;

        EXIT(Matched);
      END;
    END;

    PROCEDURE AutoMatchReceipt@1000000024(VAR Document@1000000000 : Record 6085590;OrderNo@161024014 : Code[20]) : Boolean;
    VAR
      Template@1000000001 : Record 6085579;
      TemplField@1000000006 : Record 6085580;
      PurchRcptLine@1000000002 : Record 121;
      PurchRcptLine2@161024013 : Record 121;
      PurchLine@1160040000 : Record 39;
      DocumentLine@1000000005 : TEMPORARY Record 6085596;
      PurchDocMatch@1000000016 : Record 6085700;
      PurchDocMatchTmp@1160040003 : TEMPORARY Record 6085700;
      AccountNo@1000000010 : Code[20];
      Description@1000000007 : Text[50];
      Stop@1000000012 : Boolean;
      Matched@1160040004 : Boolean;
      MatchQty@1000000013 : Decimal;
      AvailMatchQty@1000000014 : Decimal;
      RemMatchQty@1000000015 : Decimal;
      TotalMatchAmount@161024012 : Decimal;
      UnitCost@1160040002 : Decimal;
      Include@1160040001 : Boolean;
      LineDiscAmount@6085573 : Decimal;
      LineAmount@6085574 : Decimal;
      LineDiscPct@6085575 : Decimal;
      DataTranslation@6085576 : Record 6085584;
    BEGIN
      GetGLSetup;
      GetDCSetup;
      Template.GET(Document."Template No.");

      PurchRcptLine.SETCURRENTKEY("Pay-to Vendor No.");
      PurchRcptLine.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      PurchRcptLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>0');

      IF (GetCurrencyCode(Document) = GLSetup."LCY Code") AND (NOT DCSetup."Fill-out LCY") THEN
        PurchRcptLine.SETRANGE("Currency Code",'')
      ELSE
        PurchRcptLine.SETRANGE("Currency Code",GetCurrencyCode(Document));

      Document.BuildTempLinesTable(DocumentLine);
      IF DocumentLine.FINDSET THEN BEGIN
      // *******************************************************************************************************************************
      // MATCH WHEN LINES HAVE BEEN RECOGNIZED
      // *******************************************************************************************************************************
        IF NOT TemplField.GET(Template."No.",TemplField.Type::Line,'ORDERNO') THEN BEGIN
          CASE Template."Purch. Match Order No." OF
            Template."Purch. Match Order No."::No:
              PurchRcptLine.SETRANGE("Order No.");
            Template."Purch. Match Order No."::"Yes - always":
              PurchRcptLine.SETRANGE("Order No.",OrderNo);
            Template."Purch. Match Order No."::"Yes - if present":
              IF OrderNo <> '' THEN
                PurchRcptLine.SETRANGE("Order No.",OrderNo);
          END;
        END;

        REPEAT
          Stop := FALSE;
          PurchRcptLine.SETRANGE(Type);
          PurchRcptLine.SETRANGE("No.");
          PurchRcptLine.SETRANGE("Variant Code");
          PurchRcptLine.SETRANGE("Unit of Measure Code");
          PurchRcptLine.SETRANGE("Direct Unit Cost");
          PurchRcptLine.SETRANGE(Quantity);

          AccountNo := COPYSTR(GetLineAccountNo(Document,DocumentLine."Line No."),1,MAXSTRLEN(AccountNo));
          CASE Template."Purch. Match Item No." OF
            Template."Purch. Match Item No."::"Yes - always":
              BEGIN
                IF AccountNo = '' THEN
                  Stop := TRUE
                ELSE
                  IF GetLineTranslation(Template,Document,AccountNo,DataTranslation) THEN BEGIN
                    PurchRcptLine.SETRANGE(Type,DataTranslation."Translate to Type");
                    PurchRcptLine.SETRANGE("No.",DataTranslation."Translate to No.");
                    IF DataTranslation."Translate to Variant Code" <> '' THEN
                      PurchRcptLine.SETRANGE("Variant Code",DataTranslation."Translate to Variant Code");
                    IF DataTranslation."Translate to UOM Code" <> '' THEN
                      PurchRcptLine.SETRANGE("Unit of Measure Code",DataTranslation."Translate to UOM Code");
                  END ELSE
                    Stop := TRUE;
              END;

            Template."Purch. Match Item No."::"Yes - if present":
              BEGIN
                IF AccountNo <> '' THEN BEGIN
                  IF GetLineTranslation(Template,Document,AccountNo,DataTranslation) THEN BEGIN
                    PurchRcptLine.SETRANGE(Type,DataTranslation."Translate to Type");
                    PurchRcptLine.SETRANGE("No.",DataTranslation."Translate to No.");
                    IF DataTranslation."Translate to Variant Code" <> '' THEN
                      PurchRcptLine.SETRANGE("Variant Code",DataTranslation."Translate to Variant Code");
                    IF DataTranslation."Translate to UOM Code" <> '' THEN
                      PurchRcptLine.SETRANGE("Unit of Measure Code",DataTranslation."Translate to UOM Code");
                  END ELSE
                    Stop := TRUE;
                END;
              END;
          END;

          CASE Template."Purch. Match Quantity" OF
            Template."Purch. Match Quantity"::"Yes - always":
              PurchRcptLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
            Template."Purch. Match Quantity"::"Yes - if present":
              IF GetLineQuantity(Document,DocumentLine."Line No.") <> 0 THEN
                PurchRcptLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
          END;

          RemMatchQty := GetLineQuantity(Document,DocumentLine."Line No.") - GetDocLineMatchedQty(DocumentLine);
          IF (NOT Stop) AND PurchRcptLine.FINDSET THEN
            REPEAT
              Include := TRUE;

              PurchLine.GET(PurchLine."Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
              CASE Template."Purch. Match Unit Cost" OF
                Template."Purch. Match Unit Cost"::"Yes - always":
                  BEGIN
                    Include := PurchLine."Direct Unit Cost" = GetLineUnitCost(Document,DocumentLine."Line No.");
                    IF PurchLine."Line Discount %" <> 0 THEN
                      Include := Include AND
                        ((PurchLine."Line Discount %" = GetLineDiscPct(Document,DocumentLine."Line No.")) OR
                        (PurchLine."Line Discount Amount" = GetLineDiscAmount(Document,DocumentLine."Line No.")));
                  END;

                Template."Purch. Match Unit Cost"::"Yes - if present":
                  IF GetLineUnitCost(Document,DocumentLine."Line No.") <> 0 THEN BEGIN
                    Include := PurchLine."Direct Unit Cost" = GetLineUnitCost(Document,DocumentLine."Line No.");
                    IF PurchLine."Line Discount %" <> 0 THEN
                      Include := Include AND
                        ((PurchLine."Line Discount %" = GetLineDiscPct(Document,DocumentLine."Line No.")) OR
                        (PurchLine."Line Discount Amount" = GetLineDiscAmount(Document,DocumentLine."Line No.")));
                  END;
              END;

              IF Include THEN BEGIN
                IF TemplField.Code <> '' THEN BEGIN
                  OrderNo := COPYSTR(CaptureMgt.GetText(Document,TemplField.Type::Line,'ORDERNO',DocumentLine."Line No."),1,
                    MAXSTRLEN(OrderNo));

                  CASE Template."Purch. Match Order No." OF
                    Template."Purch. Match Order No."::"Yes - always":
                      Include := PurchRcptLine."Order No." = OrderNo;
                    Template."Purch. Match Order No."::"Yes - if present":
                      IF OrderNo <> '' THEN
                        Include := PurchRcptLine."Order No." = OrderNo;
                  END;
                END;
              END;

              IF Include THEN BEGIN
                AvailMatchQty := PurchRcptLine."Qty. Rcd. Not Invoiced" - GetRcptLineMatchedQty(PurchRcptLine);
                IF AvailMatchQty > 0 THEN BEGIN
                  IF AvailMatchQty > RemMatchQty THEN
                    MatchQty := RemMatchQty
                  ELSE
                    MatchQty := AvailMatchQty;

                  UnitCost := GetLineUnitCost(Document,DocumentLine."Line No.");
                  LineDiscAmount := GetLineDiscAmount(Document,DocumentLine."Line No.");

                  IF LineDiscAmount <> 0 THEN BEGIN
                    LineAmount := GetLineAmount(Document,DocumentLine."Line No.");

                    IF (LineDiscAmount + LineAmount) <> 0 THEN
                      LineDiscPct := ROUND(LineDiscAmount / (LineDiscAmount + LineAmount) * 100,0.00001)
                  END ELSE
                    LineDiscPct := GetLineDiscPct(Document,DocumentLine."Line No.");

                  InsertPurchDocMatch(PurchDocMatch,DocumentLine."Document No.",DocumentLine."Line No.",
                    PurchDocMatch."Purch. Doc. Type"::Receipt,PurchRcptLine."Document No.",PurchRcptLine."Line No.",
                    MatchQty,UnitCost,LineDiscPct);

                  RemMatchQty := RemMatchQty - MatchQty;
                  Matched := TRUE;
                END;
              END;
            UNTIL (PurchRcptLine.NEXT = 0) OR (RemMatchQty <= 0);
        UNTIL DocumentLine.NEXT = 0;

        EXIT(Matched);
      END;
    END;

    PROCEDURE AutoMatchReturnShpt@1000000038(VAR Document@1000000000 : Record 6085590;OrderNo@161024013 : Code[20]) : Boolean;
    VAR
      Template@1000000001 : Record 6085579;
      TemplField@1000000006 : Record 6085580;
      ReturnShptLine@1000000002 : Record 6651;
      ReturnShptLine2@161024012 : Record 6651;
      DocumentLine@1000000005 : TEMPORARY Record 6085596;
      PurchLine@1160040000 : Record 39;
      PurchDocMatch@1000000016 : Record 6085700;
      PurchDocMatchTmp@1160040003 : TEMPORARY Record 6085700;
      AccountNo@1000000010 : Code[20];
      Description@1000000007 : Text[50];
      Stop@1000000012 : Boolean;
      Matched@1160040004 : Boolean;
      MatchQty@1000000013 : Decimal;
      AvailMatchQty@1000000014 : Decimal;
      RemMatchQty@1000000015 : Decimal;
      UnitCost@1160040002 : Decimal;
      Include@1160040001 : Boolean;
      LineDiscAmount@6085575 : Decimal;
      LineAmount@6085574 : Decimal;
      LineDiscPct@6085573 : Decimal;
      DataTranslation@6085576 : Record 6085584;
    BEGIN
      GetGLSetup;
      GetDCSetup;
      Template.GET(Document."Template No.");

      ReturnShptLine.SETCURRENTKEY("Pay-to Vendor No.");
      ReturnShptLine.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      ReturnShptLine.SETFILTER("Return Qty. Shipped Not Invd.",'<>0');

      IF (GetCurrencyCode(Document) = GLSetup."LCY Code") AND (NOT DCSetup."Fill-out LCY") THEN
        ReturnShptLine.SETRANGE("Currency Code",'')
      ELSE
        ReturnShptLine.SETRANGE("Currency Code",GetCurrencyCode(Document));

      Document.BuildTempLinesTable(DocumentLine);
      IF DocumentLine.FINDSET THEN BEGIN
      // *******************************************************************************************************************************
      // MATCH WHEN LINES HAVE BEEN RECOGNIZED
      // *******************************************************************************************************************************
        IF NOT TemplField.GET(Template."No.",TemplField.Type::Line,'ORDERNO') THEN BEGIN
          CASE Template."Purch. Match Order No." OF
            Template."Purch. Match Order No."::No:
              ReturnShptLine.SETRANGE("Return Order No.");
            Template."Purch. Match Order No."::"Yes - always":
              ReturnShptLine.SETRANGE("Return Order No.",OrderNo);
            Template."Purch. Match Order No."::"Yes - if present":
              IF OrderNo <> '' THEN
                ReturnShptLine.SETRANGE("Return Order No.",OrderNo);
          END;
        END;

        REPEAT
          Stop := FALSE;
          ReturnShptLine.SETRANGE(Type);
          ReturnShptLine.SETRANGE("No.");
          ReturnShptLine.SETRANGE("Variant Code");
          ReturnShptLine.SETRANGE("Unit of Measure Code");
          ReturnShptLine.SETRANGE("Direct Unit Cost");
          ReturnShptLine.SETRANGE(Quantity);

          AccountNo := COPYSTR(GetLineAccountNo(Document,DocumentLine."Line No."),1,MAXSTRLEN(AccountNo));
          CASE Template."Purch. Match Item No." OF
            Template."Purch. Match Item No."::"Yes - always":
              BEGIN
                IF AccountNo = '' THEN
                  Stop := TRUE
                ELSE
                  IF GetLineTranslation(Template,Document,AccountNo,DataTranslation) THEN BEGIN
                    ReturnShptLine.SETRANGE(Type,DataTranslation."Translate to Type");
                    ReturnShptLine.SETRANGE("No.",DataTranslation."Translate to No.");
                    IF DataTranslation."Translate to Variant Code" <> '' THEN
                      ReturnShptLine.SETRANGE("Variant Code",DataTranslation."Translate to Variant Code");
                    IF DataTranslation."Translate to UOM Code" <> '' THEN
                      ReturnShptLine.SETRANGE("Unit of Measure Code",DataTranslation."Translate to UOM Code");
                  END ELSE
                    Stop := TRUE;
              END;
            Template."Purch. Match Item No."::"Yes - if present":
              BEGIN
                IF AccountNo <> '' THEN BEGIN
                  IF GetLineTranslation(Template,Document,AccountNo,DataTranslation) THEN BEGIN
                    ReturnShptLine.SETRANGE(Type,DataTranslation."Translate to Type");
                    ReturnShptLine.SETRANGE("No.",DataTranslation."Translate to No.");
                    IF DataTranslation."Translate to Variant Code" <> '' THEN
                      ReturnShptLine.SETRANGE("Variant Code",DataTranslation."Translate to Variant Code");
                    IF DataTranslation."Translate to UOM Code" <> '' THEN
                      ReturnShptLine.SETRANGE("Unit of Measure Code",DataTranslation."Translate to UOM Code");
                  END ELSE
                    Stop := TRUE;
                END;
              END;
          END;

          CASE Template."Purch. Match Quantity" OF
            Template."Purch. Match Quantity"::"Yes - always":
              ReturnShptLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
            Template."Purch. Match Quantity"::"Yes - if present":
              IF GetLineQuantity(Document,DocumentLine."Line No.") <> 0 THEN
                ReturnShptLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
          END;

          RemMatchQty := GetLineQuantity(Document,DocumentLine."Line No.") - GetDocLineMatchedQty(DocumentLine);
          IF (NOT Stop) AND ReturnShptLine.FINDSET THEN
            REPEAT
              Include := TRUE;

              PurchLine.GET(PurchLine."Document Type"::"Return Order",ReturnShptLine."Return Order No.",
                ReturnShptLine."Return Order Line No.");
              CASE Template."Purch. Match Unit Cost" OF
                Template."Purch. Match Unit Cost"::"Yes - always":
                  BEGIN
                    Include := PurchLine."Direct Unit Cost" = GetLineUnitCost(Document,DocumentLine."Line No.");
                    IF PurchLine."Line Discount %" <> 0 THEN
                      Include := Include AND
                        ((PurchLine."Line Discount %" = GetLineDiscPct(Document,DocumentLine."Line No.")) OR
                        (PurchLine."Line Discount Amount" = GetLineDiscAmount(Document,DocumentLine."Line No.")));
                  END;
                Template."Purch. Match Unit Cost"::"Yes - if present":
                  IF GetLineUnitCost(Document,DocumentLine."Line No.") <> 0 THEN BEGIN
                    Include := PurchLine."Direct Unit Cost" = GetLineUnitCost(Document,DocumentLine."Line No.");
                    IF PurchLine."Line Discount %" <> 0 THEN
                      Include := Include AND
                        ((PurchLine."Line Discount %" = GetLineDiscPct(Document,DocumentLine."Line No.")) OR
                        (PurchLine."Line Discount Amount" = GetLineDiscAmount(Document,DocumentLine."Line No.")));
                  END;
              END;

              IF Include THEN BEGIN
                IF TemplField.Code <> '' THEN BEGIN
                  OrderNo := COPYSTR(CaptureMgt.GetText(Document,TemplField.Type::Line,'ORDERNO',DocumentLine."Line No."),1,
                    MAXSTRLEN(OrderNo));

                  CASE Template."Purch. Match Order No." OF
                    Template."Purch. Match Order No."::"Yes - always":
                      Include := ReturnShptLine."Return Order No." = OrderNo;
                    Template."Purch. Match Order No."::"Yes - if present":
                      IF OrderNo <> '' THEN
                        Include := ReturnShptLine."Return Order No." = OrderNo;
                  END;
                END;
              END;

              IF Include THEN BEGIN
                AvailMatchQty := ReturnShptLine."Return Qty. Shipped Not Invd." - GetReturnShptLineMatchedQty(ReturnShptLine);
                IF AvailMatchQty > 0 THEN BEGIN
                  IF AvailMatchQty > RemMatchQty THEN
                    MatchQty := RemMatchQty
                  ELSE
                    MatchQty := AvailMatchQty;

                  UnitCost := GetLineUnitCost(Document,DocumentLine."Line No.");
                  LineDiscAmount := GetLineDiscAmount(Document,DocumentLine."Line No.");

                  IF LineDiscAmount <> 0 THEN BEGIN
                    LineAmount := GetLineAmount(Document,DocumentLine."Line No.");

                    IF (LineDiscAmount + LineAmount) <> 0 THEN
                      LineDiscPct := ROUND(LineDiscAmount / (LineDiscAmount + LineAmount) * 100,0.00001)
                  END ELSE
                    LineDiscPct := GetLineDiscPct(Document,DocumentLine."Line No.");

                  InsertPurchDocMatch(PurchDocMatch,DocumentLine."Document No.",DocumentLine."Line No.",
                    PurchDocMatch."Purch. Doc. Type"::"Return Shipment",ReturnShptLine."Document No.",ReturnShptLine."Line No.",
                    MatchQty,UnitCost,LineDiscPct);

                  RemMatchQty := RemMatchQty - MatchQty;
                  Matched := TRUE;
                END;
              END;
            UNTIL (ReturnShptLine.NEXT = 0) OR (RemMatchQty <= 0);
        UNTIL DocumentLine.NEXT = 0;

        EXIT(Matched);
      END;
    END;

    PROCEDURE InsertPurchDocMatch@1160040029(VAR PurchDocMatch@1160040001 : Record 6085700;DocNo@1160040000 : Code[20];DocLineNo@1160040002 : Integer;PurchDocType@1160040003 : 'Receipt,Return Shipment,Order,Return Order';PurchDocNo@1160040004 : Code[20];PurchLineNo@1160040005 : Integer;AvailMatchQty@1160040006 : Decimal;DirectUnitCost@1160040007 : Decimal;LineDiscountPct@1160040008 : Decimal);
    BEGIN
      PurchDocMatch.INIT;
      PurchDocMatch."Document No." := DocNo;
      PurchDocMatch."Document Line No." := DocLineNo;
      PurchDocMatch."Purch. Doc. Type" := PurchDocType;
      PurchDocMatch."Purch. Doc. No." := PurchDocNo;
      PurchDocMatch."Purch. Line No." := PurchLineNo;
      PurchDocMatch.Quantity := AvailMatchQty;
      PurchDocMatch."Direct Unit Cost" := DirectUnitCost;
      PurchDocMatch."Line Discount %" := LineDiscountPct;
      PurchDocMatch.INSERT;
    END;

    PROCEDURE InsertPurchDocMatchFromTmp@1160040041(VAR PurchDocMatch@1160040000 : Record 6085700;VAR MatchedPurchOrders@1160040002 : Code[1024];VAR MatchedReturnOrders@1160040005 : Code[1024];VAR MatchedPurchRcpts@1160040003 : Code[1024];VAR MatchedReturnShipment@1160040004 : Code[1024]);
    VAR
      PurchDocMatch2@1160040001 : Record 6085700;
      PurchaseOrderTmp@1160040006 : TEMPORARY Record 38;
      ReturnOrderTmp@1160040009 : TEMPORARY Record 38;
      PurchRcptTmp@1160040007 : TEMPORARY Record 120;
      ReturnShipmentTmp@1160040008 : TEMPORARY Record 6650;
    BEGIN
      MatchedPurchOrders := '';
      MatchedReturnOrders := '';
      MatchedPurchRcpts := '';
      MatchedReturnShipment := '';

      IF PurchDocMatch.FINDSET THEN
        REPEAT
          PurchDocMatch2 := PurchDocMatch;
          PurchDocMatch2.INSERT;

          CASE PurchDocMatch."Purch. Doc. Type" OF
            PurchDocMatch."Purch. Doc. Type"::Receipt:
              BEGIN
                IF NOT PurchRcptTmp.GET(PurchDocMatch2."Purch. Doc. No.") THEN BEGIN
                  IF MatchedPurchRcpts = '' THEN
                    MatchedPurchRcpts := PurchDocMatch2."Purch. Doc. No."
                  ELSE
                    IF STRLEN(MatchedPurchRcpts) + STRLEN(PurchDocMatch2."Purch. Doc. No.") + 2 <= MAXSTRLEN(MatchedPurchRcpts) THEN
                      MatchedPurchRcpts := MatchedPurchRcpts + ', ' + PurchDocMatch2."Purch. Doc. No.";

                  PurchRcptTmp.INIT;
                  PurchRcptTmp."No." := PurchDocMatch2."Purch. Doc. No.";
                  PurchRcptTmp.INSERT;
                END;
              END;
            PurchDocMatch."Purch. Doc. Type"::"Return Shipment":
              BEGIN
                IF NOT ReturnShipmentTmp.GET(PurchDocMatch2."Purch. Doc. No.") THEN BEGIN
                  IF MatchedReturnShipment = '' THEN
                    MatchedReturnShipment := PurchDocMatch2."Purch. Doc. No."
                  ELSE
                    IF STRLEN(MatchedReturnShipment) + STRLEN(PurchDocMatch2."Purch. Doc. No.") + 2 <=
                      MAXSTRLEN(MatchedReturnShipment)
                    THEN
                      MatchedReturnShipment := MatchedReturnShipment + ', ' + PurchDocMatch2."Purch. Doc. No.";

                  ReturnShipmentTmp.INIT;
                  ReturnShipmentTmp."No." := PurchDocMatch2."Purch. Doc. No.";
                  ReturnShipmentTmp.INSERT;
                END;
              END;
            PurchDocMatch."Purch. Doc. Type"::Order:
              BEGIN
                IF NOT PurchaseOrderTmp.GET(PurchaseOrderTmp."Document Type"::Order,PurchDocMatch2."Purch. Doc. No.") THEN BEGIN
                  IF MatchedPurchOrders = '' THEN
                    MatchedPurchOrders := PurchDocMatch2."Purch. Doc. No."
                  ELSE
                    IF STRLEN(MatchedPurchOrders) + STRLEN(PurchDocMatch2."Purch. Doc. No.") + 2 <= MAXSTRLEN(MatchedPurchOrders) THEN
                      MatchedPurchOrders := MatchedPurchOrders + ', ' + PurchDocMatch2."Purch. Doc. No.";

                  PurchaseOrderTmp.INIT;
                  PurchaseOrderTmp."Document Type" := PurchaseOrderTmp."Document Type"::Order;
                  PurchaseOrderTmp."No." := PurchDocMatch2."Purch. Doc. No.";
                  PurchaseOrderTmp.INSERT;
                END;
              END;
            PurchDocMatch."Purch. Doc. Type"::"Return Order":
              BEGIN
                IF NOT ReturnOrderTmp.GET(ReturnOrderTmp."Document Type"::"Return Order",PurchDocMatch2."Purch. Doc. No.") THEN BEGIN
                  IF MatchedReturnOrders = '' THEN
                    MatchedReturnOrders := PurchDocMatch2."Purch. Doc. No."
                  ELSE
                    IF STRLEN(MatchedReturnOrders) + STRLEN(PurchDocMatch2."Purch. Doc. No.") + 2 <= MAXSTRLEN(MatchedReturnOrders) THEN
                      MatchedReturnOrders := MatchedReturnOrders + ', ' + PurchDocMatch2."Purch. Doc. No.";

                  ReturnOrderTmp.INIT;
                  ReturnOrderTmp."Document Type" := ReturnOrderTmp."Document Type"::"Return Order";
                  ReturnOrderTmp."No." := PurchDocMatch2."Purch. Doc. No.";
                  ReturnOrderTmp.INSERT;
                END;
              END;
          END;
        UNTIL PurchDocMatch.NEXT = 0;
    END;

    PROCEDURE GetPurchLineMatchedQty@1160040008(VAR PurchLine@1000000002 : Record 39) : Decimal;
    VAR
      PurchDocType@6085573 : 'Receipt,Return Shipment,Order,Return Order';
    BEGIN
      IF PurchLine."Document Type" = PurchLine."Document Type"::Order THEN
        PurchDocType := PurchDocType::Order
      ELSE
        PurchDocType := PurchDocType::"Return Order";

      EXIT(CalculateMatchedQty('',PurchDocType,PurchLine."Document No.",PurchLine."Line No.",FALSE));
    END;

    PROCEDURE GetRcptLineMatchedQty@1000000021(VAR PurchRcptLine@1000000002 : Record 121) : Decimal;
    VAR
      PurchDocType@6085573 : 'Receipt,Return Shipment,Order,Return Order';
    BEGIN
      EXIT(CalculateMatchedQty('',PurchDocType::Receipt,PurchRcptLine."Document No.",PurchRcptLine."Line No.",FALSE));
    END;

    PROCEDURE GetReturnShptLineMatchedQty@1000000036(VAR ReturnShptLine@1000000002 : Record 6651) : Decimal;
    VAR
      PurchDocType@6085573 : 'Receipt,Return Shipment,Order,Return Order';
    BEGIN
      EXIT(CalculateMatchedQty('',PurchDocType::"Return Shipment",ReturnShptLine."Document No.",ReturnShptLine."Line No.",FALSE));
    END;

    PROCEDURE GetDocLineMatchedQty@1000000020(VAR DocumentLine@1000000002 : Record 6085596) : Decimal;
    VAR
      PurchDocMatch@1000000000 : Record 6085700;
    BEGIN
      PurchDocMatch.SETRANGE("Document No.",DocumentLine."Document No.");
      PurchDocMatch.SETRANGE("Document Line No.",DocumentLine."Line No.");
      PurchDocMatch.CALCSUMS(Quantity);
      EXIT(PurchDocMatch.Quantity);
    END;

    PROCEDURE IsDocMatched@1160040004(VAR Document@1000000002 : Record 6085590) : Boolean;
    VAR
      PurchDocMatch@1000000000 : Record 6085700;
    BEGIN
      PurchDocMatch.SETRANGE("Document No.",Document."No.");
      IF GetIsInvoice(Document) THEN
        PurchDocMatch.SETFILTER("Purch. Doc. Type",'%1|%2',
          PurchDocMatch."Purch. Doc. Type"::Receipt,PurchDocMatch."Purch. Doc. Type"::Order)
      ELSE
        PurchDocMatch.SETFILTER("Purch. Doc. Type",'%1|%2',
          PurchDocMatch."Purch. Doc. Type"::"Return Shipment",PurchDocMatch."Purch. Doc. Type"::"Return Order");
      EXIT(NOT PurchDocMatch.ISEMPTY);
    END;

    PROCEDURE GetDocMatchedAmount@1000000028(VAR Document@1000000002 : Record 6085590) Amount : Decimal;
    VAR
      PurchDocMatch@1000000000 : Record 6085700;
      Vendor@161024013 : Record 23;
      Currency@161024012 : Record 4;
      DiscAmount@161024014 : Decimal;
      DocLineLineAmount@6085573 : Decimal;
      DocLineQuantity@6085574 : Decimal;
      DocLineUnitCost@6085575 : Decimal;
    BEGIN
      Vendor.GET(Document.GetSourceID);
      IF Vendor."Currency Code" <> '' THEN
        Currency.GET(Vendor."Currency Code");
      Currency.InitRoundingPrecision;

      PurchDocMatch.SETRANGE("Document No.",Document."No.");

      IF GetIsInvoice(Document) THEN
        PurchDocMatch.SETFILTER("Purch. Doc. Type",'%1|%2',
          PurchDocMatch."Purch. Doc. Type"::Receipt,PurchDocMatch."Purch. Doc. Type"::Order)
      ELSE
        PurchDocMatch.SETFILTER("Purch. Doc. Type",'%1|%2',
          PurchDocMatch."Purch. Doc. Type"::"Return Shipment",PurchDocMatch."Purch. Doc. Type"::"Return Order");

      IF PurchDocMatch.FINDSET THEN
        REPEAT
          //**4PS.sn
          IF PurchDocMatch.Quantity = 0 THEN BEGIN
            DiscAmount :=
              ROUND(
                ROUND(PurchDocMatch."Direct Unit Cost",Currency."Amount Rounding Precision") *
                PurchDocMatch."Line Discount %" / 100,
                Currency."Amount Rounding Precision");

            Amount += ROUND(PurchDocMatch."Direct Unit Cost") - DiscAmount;
          END ELSE BEGIN
          //**4PS.en
            DiscAmount :=
              ROUND(
                ROUND(PurchDocMatch.Quantity * PurchDocMatch."Direct Unit Cost",Currency."Amount Rounding Precision") *
                PurchDocMatch."Line Discount %" / 100,
                Currency."Amount Rounding Precision");

            Amount += ROUND(PurchDocMatch."Direct Unit Cost" * PurchDocMatch.Quantity) - DiscAmount;
          END; //**4PS.n
        UNTIL PurchDocMatch.NEXT = 0;
    END;

    PROCEDURE CalcPurchDocMatchAmt@1160040036(VAR Document@1000000002 : Record 6085590;VAR PurchDocMatchTmp@1160040000 : TEMPORARY Record 6085700) Amount : Decimal;
    VAR
      Vendor@161024013 : Record 23;
      Currency@161024012 : Record 4;
      DiscAmount@161024014 : Decimal;
    BEGIN
      Vendor.GET(Document.GetSourceID);
      IF Vendor."Currency Code" <> '' THEN
        Currency.GET(Vendor."Currency Code");
      Currency.InitRoundingPrecision;

      IF PurchDocMatchTmp.FINDSET THEN
        REPEAT
          DiscAmount :=
            ROUND(
              ROUND(PurchDocMatchTmp.Quantity * PurchDocMatchTmp."Direct Unit Cost",Currency."Amount Rounding Precision") *
              PurchDocMatchTmp."Line Discount %" / 100,
              Currency."Amount Rounding Precision");

          Amount += ROUND(PurchDocMatchTmp."Direct Unit Cost" * PurchDocMatchTmp.Quantity) - DiscAmount;
        UNTIL PurchDocMatchTmp.NEXT = 0;
    END;

    PROCEDURE IsPurchDocMatched@1160040009(PurchHeader@1160040000 : Record 38) : Boolean;
    VAR
      PurchLine@1160040001 : Record 39;
      PurchLineRel@6085573 : Record 6085702;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
        PurchLine.SETFILTER("Receipt No.",'<>%1','')
      ELSE
        PurchLine.SETFILTER("Return Shipment No.",'<>%1','');

      IF NOT PurchLine.ISEMPTY THEN
        EXIT(TRUE);

      IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
        PurchLine.SETRANGE("Receipt No.")
      ELSE
        PurchLine.SETRANGE("Return Shipment No.");

      IF PurchLine.FIND('-') THEN
        REPEAT
          IF PurchLineRel.GET(PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN
            EXIT(TRUE);
        UNTIL PurchLine.NEXT = 0;

      EXIT(FALSE);
    END;

    PROCEDURE GetPurchDocMatchedAmount@1160040010(PurchHeader@1160040000 : Record 38;VAR DocumentAmount@1160040002 : Decimal;VAR MatchedAmount@1160040003 : Decimal) : Decimal;
    VAR
      PurchLine@1160040001 : Record 39;
      PurchLine2@1160040008 : Record 39;
      PurchRcptHeader@1160040004 : Record 120;
      RetShptHeader@1160040005 : Record 6650;
      PurchLineRel@1160040009 : Record 6085702;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");

      IF PurchLine.FINDSET THEN
        REPEAT
          IF PurchLineRel.GET(PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN BEGIN
            PurchLine2.GET(PurchLineRel."Related Document Type",PurchLineRel."Related Document No.",PurchLineRel."Related Line No.");
            IF PurchLine2.Quantity <> 0 THEN
              MatchedAmount += PurchLine2."Line Amount" / PurchLine2.Quantity * PurchLine.Quantity;
          END ELSE
            IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN BEGIN
              IF PurchLine."Receipt No." <> '' THEN BEGIN
                PurchRcptHeader.GET(PurchLine."Receipt No.");
                PurchLine2.GET(PurchLine2."Document Type"::Order,PurchRcptHeader."Order No.",PurchLine."Receipt Line No.");
                IF PurchLine2.Quantity <> 0 THEN
                  MatchedAmount += PurchLine2."Line Amount" / PurchLine2.Quantity * PurchLine.Quantity;
              END;
            END ELSE BEGIN
              IF PurchLine."Return Shipment No." <> '' THEN BEGIN
                RetShptHeader.GET(PurchLine."Return Shipment No.");
                PurchLine2.GET(PurchLine2."Document Type"::"Return Order",RetShptHeader."Return Order No.",
                  PurchLine."Return Shipment Line No.");
                IF PurchLine2.Quantity <> 0 THEN
                  MatchedAmount += PurchLine2."Line Amount" / PurchLine2.Quantity * PurchLine.Quantity;
              END;
            END;

          DocumentAmount += PurchLine."Line Amount";
        UNTIL PurchLine.NEXT = 0;
    END;

    PROCEDURE ShowDocPDFFromPurchDoc@161024029(PurchHeader@1000000002 : Record 38);
    VAR
      Document@1000000000 : Record 6085590;
    BEGIN
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.");
      Document.OpenPdfFile;
    END;

    PROCEDURE ShowDocPDFFromPostedInv@1000000030(PurchInvHeader@1000000002 : Record 122);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type"::Invoice,PurchInvHeader."Pre-Assigned No.");
      Document.OpenPdfFile;
    END;

    PROCEDURE ShowDocPDFFromPostedCrMemo@1000000032(PurchCrMemoHeader@1000000002 : Record 124);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type"::"Credit Memo",
        PurchCrMemoHeader."Pre-Assigned No.");
      Document.OpenPdfFile;
    END;

    PROCEDURE ShowDocPDFFromApprovalEntry@1160040024(ApprovalEntry@1000000002 : Record 454);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      FindDocument(Document,DATABASE::"Purchase Header",ApprovalEntry."Document Type",ApprovalEntry."Document No.");
      Document.OpenPdfFile;
    END;

    PROCEDURE ShowDocPDFFromVendLedgEntry@1000000034(VendLedgEntry@1000000002 : Record 25);
    VAR
      Document@1000000000 : Record 6085590;
      PurchCrMemoHeader@1000000003 : Record 124;
      PurchInvHeader@1000000004 : Record 122;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("File Type",Document."File Type"::OCR);

      IF VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::Invoice THEN BEGIN
        PurchInvHeader.GET(VendLedgEntry."Document No.");
        Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type"::Invoice);
        Document.SETRANGE("Created Doc. ID",PurchInvHeader."Pre-Assigned No.");
      END ELSE
        IF VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::"Credit Memo" THEN BEGIN
          PurchCrMemoHeader.GET(VendLedgEntry."Document No.");
          Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type"::"Credit Memo");
          Document.SETRANGE("Created Doc. ID",PurchCrMemoHeader."Pre-Assigned No.");
        END ELSE
          ERROR(Text022);

      IF NOT Document.FINDFIRST THEN
        ERROR(Text022);
      Document.OpenPdfFile;
    END;

    PROCEDURE ShowDocFromDocFromNoAndDate@161024032(DocNo@161024012 : Code[20];PostingDate@161024013 : Date;ShowError@161024020 : Boolean);
    VAR
      Document@161024019 : Record 6085590;
      PurchInvHeader@161024014 : Record 122;
      PurchCrMemoHeader@161024018 : Record 124;
      PurchHeader@161024017 : Record 38;
      DocSubType@161024015 : Integer;
      DocId@161024016 : Code[20];
    BEGIN
      IF PurchInvHeader.GET(DocNo) AND (PurchInvHeader."Posting Date" = PostingDate) THEN BEGIN
        DocSubType := PurchHeader."Document Type"::Invoice;
        DocId := PurchInvHeader."Pre-Assigned No.";
      END ELSE
        IF PurchCrMemoHeader.GET(DocNo) AND (PurchCrMemoHeader."Posting Date" = PostingDate) THEN BEGIN
          DocSubType := PurchHeader."Document Type"::"Credit Memo";
          DocId := PurchCrMemoHeader."Pre-Assigned No.";
        END;

      IF DocId = '' THEN BEGIN
        IF ShowError THEN
          ERROR(Text022)
        ELSE
          EXIT;
      END;

      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",DocSubType);
      Document.SETRANGE("Created Doc. ID",DocId);
      Document.SETRANGE("File Type",Document."File Type"::OCR);

      IF NOT Document.FINDFIRST THEN BEGIN
        IF ShowError THEN
          ERROR(Text022)
        ELSE
          EXIT;
      END;
      Document.OpenPdfFile;
    END;

    PROCEDURE GetNoOfPurchOrders@161024014(Document@161024012 : Record 6085590) : Integer;
    VAR
      PurchHeader@161024013 : Record 38;
    BEGIN
      IF Document.GetSourceID = '' THEN
        EXIT;

      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Order);
      PurchHeader.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      EXIT(PurchHeader.COUNT);
    END;

    PROCEDURE GetNoOfPurchReturnOrders@161024018(Document@161024012 : Record 6085590) : Integer;
    VAR
      PurchHeader@161024013 : Record 38;
    BEGIN
      IF Document.GetSourceID = '' THEN
        EXIT;

      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::"Return Order");
      PurchHeader.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      EXIT(PurchHeader.COUNT);
    END;

    PROCEDURE LookupNoOfPurchOrders@161024021(Document@161024012 : Record 6085590) : Integer;
    VAR
      PurchHeader@161024013 : Record 38;
    BEGIN
      IF Document.GetSourceID = '' THEN
        EXIT;

      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Order);
      PurchHeader.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      PAGE.RUN(0,PurchHeader);
    END;

    PROCEDURE LookupNoOfPurchReturnOrders@161024020(Document@161024012 : Record 6085590) : Integer;
    VAR
      PurchHeader@161024013 : Record 38;
    BEGIN
      IF Document.GetSourceID = '' THEN
        EXIT;

      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::"Return Order");
      PurchHeader.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      PAGE.RUN(0,PurchHeader);
    END;

    PROCEDURE GetDocumentHeaderAmounts@161024033(PurchHeader@161024014 : Record 38;VAR ImportedAmountExclVAT@161024013 : Decimal;VAR ImportedAmountInclVAT@161024012 : Decimal;VAR ImportedAmountExclVATLCY@161024017 : Decimal;VAR ImportedAmountInclVATLCY@161024015 : Decimal) : Boolean;
    VAR
      Document@161024016 : Record 6085590;
      CEDO@1160040001 : Codeunit 6085800;
    BEGIN
      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::Order,
        PurchHeader."Document Type"::"Credit Memo",PurchHeader."Document Type"::"Return Order"])
      THEN
        EXIT;

      IF NOT DCSetup.GET THEN
        EXIT;

      ImportedAmountExclVAT := 0;
      ImportedAmountInclVAT := 0;
      ImportedAmountExclVATLCY := 0;
      ImportedAmountInclVATLCY := 0;

      IF GetPurchaseDocument(PurchHeader,Document) THEN BEGIN
        ImportedAmountExclVAT := Document."Amount Excl. VAT";
        ImportedAmountInclVAT := Document."Amount Incl. VAT";
      END ELSE
        CEDO.GetDocHeaderAmounts(PurchHeader,ImportedAmountExclVAT,ImportedAmountInclVAT);

      IF PurchHeader."Currency Factor" = 0 THEN
        PurchHeader."Currency Factor" := 1;

      ImportedAmountExclVATLCY := ROUND(ImportedAmountExclVAT / PurchHeader."Currency Factor");
      ImportedAmountInclVATLCY := ROUND(ImportedAmountInclVAT / PurchHeader."Currency Factor");

      EXIT(TRUE);
    END;

    PROCEDURE GetPurchStatusAmounts@161024034(VAR PurchHeader@6085578 : Record 38;VAR ImportedAmountExclVAT@6085577 : Decimal;VAR ImportedAmountInclVAT@6085576 : Decimal;VAR AssignedAmountExclVAT@6085575 : Decimal;VAR AssignedAmountInclVAT@6085574 : Decimal);
    VAR
      TempAmount1@6085579 : Decimal;
      TempAmount2@6085573 : Decimal;
    BEGIN
      GetPurchStatusAmounts3(PurchHeader,ImportedAmountExclVAT,ImportedAmountInclVAT,AssignedAmountExclVAT,AssignedAmountInclVAT,
        TempAmount1,TempAmount2,FALSE);
    END;

    PROCEDURE GetPurchStatusAmounts2@6085585(VAR PurchHeader@6085593 : Record 38;VAR ImportedAmountExclVAT@6085576 : Decimal;VAR ImportedAmountInclVAT@6085575 : Decimal;VAR AssignedAmountExclVAT@6085574 : Decimal;VAR AssignedAmountInclVAT@6085573 : Decimal;VAR AssignedAmountExclVATLCY@6085588 : Decimal;VAR AssignedAmountInclVATLCY@6085586 : Decimal);
    BEGIN
      GetPurchStatusAmounts3(PurchHeader,ImportedAmountExclVAT,ImportedAmountInclVAT,AssignedAmountExclVAT,AssignedAmountInclVAT,
        AssignedAmountExclVATLCY,AssignedAmountInclVATLCY,FALSE);
    END;

    PROCEDURE GetPurchStatusAmounts3@6085588(VAR PurchHeader@6085596 : Record 38;VAR ImportedAmountExclVAT@6085595 : Decimal;VAR ImportedAmountInclVAT@6085594 : Decimal;VAR AssignedAmountExclVAT@6085592 : Decimal;VAR AssignedAmountInclVAT@6085591 : Decimal;VAR AssignedAmountExclVATLCY@6085590 : Decimal;VAR AssignedAmountInclVATLCY@6085589 : Decimal;CalcFullOrderAmt@6085588 : Boolean);
    VAR
      PurchHeader2@6085601 : Record 38;
      TempPurchLine@6085600 : TEMPORARY Record 39;
      TotalPurchLine@6085599 : Record 39;
      TotalPurchLineLCY@6085598 : Record 39;
      PurchasePost@6085597 : Codeunit 90;
      ContiniaLocalizationMgt@6085593 : Codeunit 6192776;
      PurchaseAmountCalculations@6085586 : Codeunit 6085792;
      TempAmount1@6085576 : Decimal;
      TempAmount2@6085575 : Decimal;
      VATText@6085574 : Text[30];
      QtyType@6085573 : 'General,Invoicing,Shipping';
    BEGIN
      ImportedAmountExclVAT := 0;
      ImportedAmountInclVAT := 0;
      AssignedAmountExclVAT := 0;
      AssignedAmountInclVAT := 0;
      AssignedAmountExclVATLCY := 0;
      AssignedAmountInclVATLCY := 0;

      IF (PurchHeader."No." = '') OR (PurchHeader."Pay-to Vendor No." = '') THEN
        EXIT;

      PurchHeader2.GET(PurchHeader."Document Type",PurchHeader."No.");

      IF (ContiniaLocalizationMgt.NAVLocalization = 'NA') AND (PurchHeader."Tax Area Code" <> '') THEN
        PurchaseAmountCalculations.CalculatePurchAmountsNA(PurchHeader,AssignedAmountExclVAT,AssignedAmountInclVAT,
          AssignedAmountExclVATLCY,AssignedAmountInclVATLCY)
      ELSE BEGIN
        IF (PurchHeader2."Document Type" IN [PurchHeader2."Document Type"::Invoice,PurchHeader2."Document Type"::"Credit Memo"]) OR
          ((PurchHeader2."Document Type" IN [PurchHeader2."Document Type"::Order,PurchHeader2."Document Type"::"Return Order"]) AND
          CalcFullOrderAmt)
        THEN
          QtyType := QtyType::General
        ELSE
          QtyType := QtyType::Invoicing;

        PurchasePost.GetPurchLines(PurchHeader2,TempPurchLine,QtyType);
        CLEAR(PurchasePost);
        PurchasePost.SumPurchLinesTemp(PurchHeader2,TempPurchLine,QtyType,TotalPurchLine,TotalPurchLineLCY,TempAmount1,VATText);
        AssignedAmountExclVAT := TotalPurchLine.Amount;
        AssignedAmountInclVAT := TotalPurchLine."Amount Including VAT";

        AssignedAmountExclVATLCY := TotalPurchLineLCY.Amount;
        AssignedAmountInclVATLCY := TotalPurchLineLCY."Amount Including VAT";
      END;

      GetDocumentHeaderAmounts(PurchHeader,ImportedAmountExclVAT,ImportedAmountInclVAT,TempAmount1,TempAmount2);
    END;

    PROCEDURE ChangeDocAmounts@161024035(PurchHeader@161024013 : Record 38);
    VAR
      Document@161024014 : Record 6085590;
      DCAppMgt@1160040000 : Codeunit 6085722;
      DocAmount@161024012 : Page 6085721;
    BEGIN
      DCAppMgt.IsApprovalAdminUser(TRUE);

      PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);

      IF NOT GetPurchaseDocument(PurchHeader,Document) THEN
        EXIT;

      PurchHeader.FILTERGROUP(2);
      PurchHeader.SETRECFILTER;
      PurchHeader.FILTERGROUP(0);
      DocAmount.SETRECORD(PurchHeader);
      DocAmount.SETTABLEVIEW(PurchHeader);
      DocAmount.LOOKUPMODE(TRUE);
      DocAmount.SetAmounts(Document."Amount Excl. VAT",Document."Amount Incl. VAT");
      IF DocAmount.RUNMODAL <> ACTION::LookupOK THEN
        EXIT;

      DocAmount.GetAmounts(Document."Amount Excl. VAT",Document."Amount Incl. VAT");
      Document.MODIFY;
    END;

    PROCEDURE GetVendOutstaAllocAmt@161024039(VAR Vendor@161024013 : Record 23) : Decimal;
    VAR
      PurchAllocEntry@161024012 : Record 6085732;
    BEGIN
      PurchAllocEntry.SETCURRENTKEY("Vendor No.",Open);
      PurchAllocEntry.SETRANGE("Vendor No.",Vendor."No.");
      PurchAllocEntry.SETRANGE(Open,TRUE);
      Vendor.COPYFILTER("Global Dimension 1 Filter",PurchAllocEntry."Shortcut Dimension 1 Code");
      Vendor.COPYFILTER("Global Dimension 2 Filter",PurchAllocEntry."Shortcut Dimension 2 Code");
      Vendor.COPYFILTER("Currency Filter",PurchAllocEntry."Currency Code");
      PurchAllocEntry.CALCSUMS("Amount Including VAT (LCY)");
      EXIT(PurchAllocEntry."Amount Including VAT (LCY)");
    END;

    PROCEDURE DrillDownVendOutstaAllocAmt@161024040(VAR Vendor@161024013 : Record 23);
    VAR
      PurchAllocEntry@161024012 : Record 6085732;
    BEGIN
      PurchAllocEntry.SETCURRENTKEY("Vendor No.");
      PurchAllocEntry.SETRANGE("Vendor No.",Vendor."No.");
      PurchAllocEntry.SETRANGE(Open,TRUE);
      Vendor.COPYFILTER("Global Dimension 1 Filter",PurchAllocEntry."Shortcut Dimension 1 Code");
      Vendor.COPYFILTER("Global Dimension 2 Filter",PurchAllocEntry."Shortcut Dimension 2 Code");
      Vendor.COPYFILTER("Currency Filter",PurchAllocEntry."Currency Code");
      PAGE.RUN(0,PurchAllocEntry);
    END;

    PROCEDURE GetPurchAllocAmount@161024041(VAR PurchHeader@161024012 : Record 38;VAR AmountExclVAT@161024013 : Decimal;VAR AmountInclVAT@161024014 : Decimal);
    VAR
      PurchAllocEntry@161024015 : Record 6085732;
    BEGIN
      PurchAllocEntry.SETCURRENTKEY("Source Type","Source No.");
      PurchAllocEntry.SETRANGE("Source Type",PurchHeader."Document Type");
      PurchAllocEntry.SETRANGE("Source No.",PurchHeader."No.");
      PurchAllocEntry.CALCSUMS(Amount,"Amount Including VAT");
      AmountExclVAT := PurchAllocEntry.Amount;
      AmountInclVAT := PurchAllocEntry."Amount Including VAT";
    END;

    PROCEDURE DrillDownPurchAllocAmount@161024042(VAR PurchHeader@161024012 : Record 38);
    VAR
      PurchAllocEntry@161024015 : Record 6085732;
    BEGIN
      PurchAllocEntry.SETCURRENTKEY("Source Type","Source No.");
      PurchAllocEntry.SETRANGE("Source Type",PurchHeader."Document Type");
      PurchAllocEntry.SETRANGE("Source No.",PurchHeader."No.");
      PAGE.RUN(0,PurchAllocEntry);
    END;

    PROCEDURE CheckAmountsOnPost@30(PurchHeader@1160040006 : Record 38) MessageText : Text[1024];
    VAR
      PurchSetup@1160040000 : Record 312;
      PurchLine@1160040001 : Record 39;
      Document@1000 : Record 6085590;
      DCAppMgt@1160040009 : Codeunit 6085722;
      CEDO@1160040008 : Codeunit 6085800;
      ImportedAmountExclVAT@1160040005 : Decimal;
      ImportedAmountInclVAT@1160040004 : Decimal;
      AssignedAmountExclVAT@1160040003 : Decimal;
      AssignedAmountInclVAT@1160040002 : Decimal;
      AmtExclVATTest@1003 : Boolean;
      AmtInclVATTest@1002 : Boolean;
      Dummy@1160040007 : Integer;
    BEGIN
      IF NOT DCSetup.GET THEN
        EXIT;

      IF NOT GetPurchaseDocument(PurchHeader,Document) THEN
        IF NOT CEDO.GetApprovalAmtVal(PurchHeader,Dummy) THEN
          EXIT;

      IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order"] THEN BEGIN
        IF NOT PurchHeader.Invoice THEN
          EXIT;
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        PurchLine.SETFILTER("Qty. to Invoice",'<>%1',0);
        IF PurchLine.ISEMPTY THEN
          EXIT;
      END;

      GetPurchStatusAmounts(PurchHeader,ImportedAmountExclVAT,ImportedAmountInclVAT,AssignedAmountExclVAT,AssignedAmountInclVAT);

      PurchSetup.GET;
      AmtExclVATTest := DCAppMgt.TestAmtExclVAT(DCSetup."Purch: Amount Valid. on Post.",ImportedAmountExclVAT,AssignedAmountExclVAT,
        PurchHeader."Currency Code",PurchSetup."Invoice Rounding");
      AmtInclVATTest := DCAppMgt.TestAmtInclVAT(DCSetup."Purch: Amount Valid. on Post.",ImportedAmountInclVAT,AssignedAmountInclVAT,
        PurchHeader."Currency Code");

      IF AmtExclVATTest THEN
        MessageText := Text014 + STRSUBSTNO(Text016,DCAppMgt.FormatAmount(ImportedAmountExclVAT,PurchHeader."Currency Code")) +
          STRSUBSTNO(Text017,DCAppMgt.FormatAmount(AssignedAmountExclVAT,PurchHeader."Currency Code"));

      IF AmtInclVATTest THEN BEGIN
        IF MessageText <> '' THEN
          MessageText := MessageText + '\';

        MessageText := MessageText + Text015 +
          STRSUBSTNO(Text016,DCAppMgt.FormatAmount(ImportedAmountInclVAT,PurchHeader."Currency Code")) +
          STRSUBSTNO(Text017,DCAppMgt.FormatAmount(AssignedAmountInclVAT,PurchHeader."Currency Code"));
      END;

      IF MessageText <> '' THEN
        ERROR(ImpAmtNotEqAsgnAmtMsg + MessageText);
    END;

    PROCEDURE PurchDocOnPost@1160040026(VAR PurchHeader@1160040000 : Record 38);
    VAR
      AmountExclVAT@1160040001 : Decimal;
      AmountInclVAT@1160040002 : Decimal;
      LineAmountExclVAT@1160040003 : Decimal;
      LineAmountInclVAT@1160040004 : Decimal;
    BEGIN
      CheckAmountsOnPost(PurchHeader);
    END;

    PROCEDURE PurchHeaderOnDelete@161024050(PurchHeader@161024012 : Record 38);
    VAR
      PurchAllocHeader@161024013 : Record 6085730;
      PurchDocMatch@1160040000 : Record 6085700;
      WebSearchMgt@161024014 : Codeunit 6085748;
    BEGIN
      PurchAllocHeader.ReverseAll(PurchHeader);

      IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order"] THEN BEGIN
        IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN
          PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::Order)
        ELSE
          PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::"Return Shipment");
        PurchDocMatch.SETRANGE("Purch. Doc. No.",PurchHeader."No.");
        PurchDocMatch.DELETEALL;
      END;

      WebSearchMgt.UpdateWebSearchFromPurchHeader(PurchHeader,TRUE);
    END;

    PROCEDURE PurchHeaderOnModify@161024055(PurchHeader@161024012 : Record 38;xPurchHeader@161024013 : Record 38;Force@161024014 : Boolean);
    VAR
      WebSearchMgt@161024015 : Codeunit 6085748;
    BEGIN
      IF (PurchHeader."Posting Date" <> xPurchHeader."Posting Date") OR
        (PurchHeader."Document Date" <> xPurchHeader."Document Date") OR
        (PurchHeader."Vendor Invoice No." <> xPurchHeader."Vendor Invoice No.") OR
        (PurchHeader."Vendor Cr. Memo No." <> xPurchHeader."Vendor Cr. Memo No.") OR
        (PurchHeader."Purchaser Code" <> xPurchHeader."Purchaser Code") OR
        (Force)
      THEN
        WebSearchMgt.UpdateWebSearchFromPurchHeader(PurchHeader,FALSE);
    END;

    PROCEDURE PurchLineOnDelete@1160040000(PurchLine@1160040000 : Record 39);
    VAR
      PurchLineRel@1160040002 : Record 6085702;
    BEGIN
      IF NOT (PurchLine."Document Type" IN
        [PurchLine."Document Type"::Order,
        PurchLine."Document Type"::Invoice,
        PurchLine."Document Type"::"Credit Memo",
        PurchLine."Document Type"::"Return Order"])
      THEN
        EXIT;

      PurchLineRel.RESET;
      PurchLineRel.SETRANGE("Related Document Type",PurchLine."Document Type");
      PurchLineRel.SETRANGE("Related Document No.",PurchLine."Document No.");
      PurchLineRel.SETRANGE("Related Line No.",PurchLine."Line No.");
      IF PurchLineRel.FINDFIRST THEN
        ERROR(MatchedToOtherDocErr,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",
          PurchLineRel."Document Type",PurchLineRel."Document No.",PurchLineRel."Document Line No.");

      PurchLineRel.RESET;
      PurchLineRel.SETRANGE("Document Type",PurchLine."Document Type");
      PurchLineRel.SETRANGE("Document No.",PurchLine."Document No.");
      PurchLineRel.SETRANGE("Document Line No.",PurchLine."Line No.");
      PurchLineRel.DELETEALL;
    END;

    PROCEDURE GetResponsibillityCenter@1160760000(VAR Document@161024012 : Record 6085590) : Code[20];
    VAR
      Field@161024013 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Header,'RESPCENTER',0));
    END;

    PROCEDURE MatchWithinTolerance@161024012(Template@1160040004 : Record 6085579;DocumentPostinDate@1160040005 : Date;DocumentCurrCode@1160040002 : Code[10];DocumentCurrFactor@1160040006 : Decimal;DocumentAmount@1160040003 : Decimal;MatchedAmount@1160040000 : Decimal) : Boolean;
    VAR
      Currency@1160040008 : Record 4;
      CurrExchRate@1160040009 : Record 330;
      TolerenceAmount@1160040001 : Decimal;
      AllowedVarianceAmount@1160040007 : Decimal;
      AllowedVarianceAmountPct@1160040010 : Decimal;
    BEGIN
      GetGLSetup;
      GetDCSetup;

      IF (DocumentCurrCode = GLSetup."LCY Code") AND (NOT DCSetup."Fill-out LCY") THEN
        DocumentCurrCode := '';

      IF (DocumentCurrCode <> '') AND (Template."Max. Variance Amt Allowed LCY" <> 0) THEN BEGIN
        IF DocumentCurrFactor = 0 THEN
          //**4PS.so
          //DocumentCurrFactor := CurrExchRate.ExchangeRate(DocumentPostinDate,DocumentCurrCode);
          //AllowedVarianceAmount := CurrExchRate.ExchangeAmtLCYToFCY(DocumentPostinDate,DocumentCurrCode,
          //                         Template."Max. Variance Amt Allowed LCY",DocumentCurrFactor);
          //**4PS.eo

          //**4PS.sn
            DocumentCurrFactor := CurrExchRate.ExchangeRate(0,'',DocumentPostinDate,DocumentCurrCode,FALSE);

          AllowedVarianceAmount := CurrExchRate.ExchangeAmtLCYToFCY(0,'',DocumentPostinDate,DocumentCurrCode,
                                   Template."Max. Variance Amt Allowed LCY",DocumentCurrFactor,FALSE);
          //**4PS.en
      END ELSE
        AllowedVarianceAmount := Template."Max. Variance Amt Allowed LCY";

      AllowedVarianceAmountPct := Template."Allowed Variance %" / 100 * DocumentAmount;

      CASE TRUE OF
        (AllowedVarianceAmount <> 0) AND (AllowedVarianceAmountPct <> 0):
          IF AllowedVarianceAmountPct < AllowedVarianceAmount THEN
            TolerenceAmount := AllowedVarianceAmountPct
          ELSE
            TolerenceAmount := AllowedVarianceAmount;

        Template."Max. Variance Amt Allowed LCY" <> 0:
          TolerenceAmount := AllowedVarianceAmount;

        Template."Allowed Variance %" <> 0:
          TolerenceAmount := AllowedVarianceAmountPct
      END;

      IF ABS(DocumentAmount - MatchedAmount) <= TolerenceAmount THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE GetTranslLineInfo2@1160040007(Document@1160040000 : Record 6085590;LineNo@1160040001 : Integer;VAR LineTransl@1160040003 : Record 6085584) : Boolean;
    VAR
      Template@1160040002 : Record 6085579;
    BEGIN
      IF Template.GET(Document."Template No.") THEN
        EXIT(GetLineTranslation(Template,Document,GetLineAccountNo(Document,LineNo),LineTransl));
    END;

    PROCEDURE UpdateLineNoTrans@1160040005(VAR Document@1160040000 : Record 6085590;LineNo@1160040002 : Integer;ToType@1160040001 : Integer;ToNo@1000 : Code[20]);
    VAR
      Template@1160040003 : Record 6085579;
      Item@1160040005 : Record 27;
      ItemCrossRef@1160040006 : Record 5717;
      ItemVendor@1160040007 : Record 99;
      LineTransl@1160040008 : Record 6085584;
      VendItemNo@1160040004 : Code[250];
    BEGIN
      Template.GET(Document."Template No.");
      Template.TESTFIELD("Translate Item Nos. to");

      VendItemNo := GetLineAccountNo(Document,LineNo);

      IF VendItemNo = '' THEN
        EXIT;

      ItemCrossRef.SETCURRENTKEY("Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.");
      ItemCrossRef.SETRANGE("Cross-Reference No.",COPYSTR(VendItemNo,1,MAXSTRLEN(ItemCrossRef."Cross-Reference No.")));
      ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::Vendor);
      ItemCrossRef.SETRANGE("Cross-Reference Type No.",Document.GetSourceID);

      ItemVendor.SETCURRENTKEY("Vendor No.","Vendor Item No.");
      ItemVendor.SETRANGE("Vendor No.",Document.GetSourceID);
      ItemVendor.SETRANGE("Vendor Item No.",COPYSTR(VendItemNo,1,MAXSTRLEN(ItemVendor."Vendor Item No.")));

      LineTransl.SETRANGE("Template No.",Template."No.");
      LineTransl.SETRANGE(Type,LineTransl.Type::"Line Field");
      LineTransl.SETRANGE("Field Code",'NO');
      LineTransl.SETRANGE("Translate From",COPYSTR(VendItemNo,1,MAXSTRLEN(LineTransl."Translate From")));

      IF (ToType = LineTransl."Translate to Type"::" ") OR (ToNo = '') THEN BEGIN
        ItemCrossRef.DELETEALL(TRUE);
        ItemVendor.DELETEALL(TRUE);
        LineTransl.DELETEALL(TRUE);
        EXIT;
      END;

      CASE TRUE OF
        (ToType = LineTransl."Translate to Type"::Item) AND
        ((Template."Translate Item Nos. to" = Template."Translate Item Nos. to"::"Item Cross Reference") OR
         (Template."Translate Item Nos. to" = Template."Translate Item Nos. to"::"Vendor Item")):
          BEGIN
            IF ItemCrossRef.FINDFIRST THEN BEGIN
              IF ItemCrossRef."Item No." <> ToNo THEN BEGIN
                IF NOT CONFIRM(Text002,FALSE,VendItemNo,ItemCrossRef.FIELDCAPTION("Item No."),ItemCrossRef."Item No.") THEN
                  ERROR('');

                ItemCrossRef.DELETE(TRUE);
                ItemCrossRef."Item No." := '';
                ItemCrossRef."Variant Code" := '';
                ItemCrossRef."Unit of Measure" := '';
                ItemCrossRef.VALIDATE("Item No.",ToNo);
                ItemCrossRef.VALIDATE("Unit of Measure",Item."Purch. Unit of Measure");
                ItemCrossRef.INSERT(TRUE);
              END;
            END ELSE BEGIN
              IF (ToNo <> '') AND (ToType <> LineTransl."Translate to Type"::" ") THEN BEGIN
                ItemCrossRef.INIT;
                ItemCrossRef.VALIDATE("Item No.",ToNo);
                ItemCrossRef.VALIDATE("Unit of Measure",Item."Purch. Unit of Measure");
                ItemCrossRef.VALIDATE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::Vendor);
                ItemCrossRef.VALIDATE("Cross-Reference Type No.",Document.GetSourceID);
                ItemCrossRef.VALIDATE("Cross-Reference No.",COPYSTR(VendItemNo,1,MAXSTRLEN(ItemCrossRef."Cross-Reference No.")));
                ItemCrossRef.INSERT(TRUE);
              END;
            END;
          END;
        ELSE
          BEGIN
            IF LineTransl.FINDFIRST THEN BEGIN
              IF NOT (LineTransl."Translate to No." IN ['',ToNo]) THEN BEGIN
                IF NOT CONFIRM(Text002,FALSE,VendItemNo,LineTransl."Translate to Type",LineTransl."Translate to No.") THEN
                  ERROR('');

                LineTransl.VALIDATE("Translate to Type",ToType);
                LineTransl.VALIDATE("Translate to No.",ToNo);
                IF ToType = LineTransl."Translate to Type"::Item THEN BEGIN
                  Item.GET(ToNo);
                  LineTransl.VALIDATE("Translate to UOM Code",Item."Purch. Unit of Measure");
                END;
                LineTransl.MODIFY(TRUE);
              END;
            END ELSE BEGIN
              LineTransl.INIT;
              LineTransl.VALIDATE("Template No.",Template."No.");
              LineTransl.VALIDATE(Type,LineTransl.Type::"Line Field");
              LineTransl.VALIDATE("Field Code",'NO');
              LineTransl.VALIDATE("Translate From",COPYSTR(VendItemNo,1,MAXSTRLEN(LineTransl."Translate From")));
              LineTransl.VALIDATE("Translate to Type",ToType);
              LineTransl.VALIDATE("Translate to No.",ToNo);
              IF ToType = LineTransl."Translate to Type"::Item THEN BEGIN
                Item.GET(ToNo);
                LineTransl.VALIDATE("Translate to UOM Code",Item."Purch. Unit of Measure");
              END;
              LineTransl.INSERT(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE CheckOrderRelation@6085573(PurchLine@6085573 : Record 39) : Boolean;
    BEGIN
      IF (PurchLine."Document Type" = PurchLine."Document Type"::Invoice) AND (PurchLine."Receipt No." = 'ORDER') THEN
        EXIT(TRUE);
    END;

    PROCEDURE GetCostObject@1000000031(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Code[20];
    VAR
      Field@1000000002 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Line, 'KOSTENDRAGER') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Line, 'KOSTENDRAGER', LineNo), 1, 20));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Line, 'COSTOBJECT', LineNo),1,20));
    END;

    PROCEDURE GetDepartmentLine@1000000040(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Code[20];
    VAR
      Field@1000000002 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Line, 'KOSTENPLAATS') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Line, 'KOSTENPLAATS', LineNo),1,20));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Line, 'DEPARTMENT', LineNo),1,20));
    END;

    PROCEDURE GetJobNoHeader@1000000035(VAR Document@1000000000 : Record 6085590) : Code[20];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'PROJECT', 0),1,20));
    END;

    PROCEDURE GetJobNoLine@1000000033(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Code[20];
    VAR
      Field@1000000002 : Record 6085580;
    BEGIN
      //**4PS
      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Line, 'PROJECT', LineNo),1,20));
    END;

    PROCEDURE GetVATProdPostGroupHeader@1000000041(VAR Document@1000000000 : Record 6085590) : Code[20];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Header, 'BTWCODE') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'BTWCODE', 0),1,20));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'VATCODE', 0),1,20));
    END;

    PROCEDURE GetVATProdPostGroupLine@1000000042(VAR Document@1000000000 : Record 6085590;LineNo@1000000001 : Integer) : Code[20];
    VAR
      Field@1000000002 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Line, 'BTWCODE') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Line, 'BTWCODE', LineNo),1,20));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Line, 'VATCODE', LineNo),1,20));
    END;

    PROCEDURE GetAmountBlockedAcc@1000000043(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Header, 'BEDRAGGREK') THEN
        EXIT(CaptureMgt.GetDecimal(Document, Field.Type::Header, 'BEDRAGGREK', 0));

      EXIT(CaptureMgt.GetDecimal(Document, Field.Type::Header, 'BLOCKEDAMOUNT', 0));
    END;

    PROCEDURE GetOurVATNo@1000000045(VAR Document@1000000000 : Record 6085590) : Code[30];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Header, 'ONSBTWNR') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'ONSBTWNR', 0), 1, 30));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'OURVATNO', 0), 1, 30));
    END;

    PROCEDURE GetBankAccountNo@1000000047(VAR Document@1000000000 : Record 6085590) : Code[50];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Header, 'BANKREKNR') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'BANKREKNR', 0),1,50));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'BANKACCOUNTNO', 0),1,50));
    END;

    PROCEDURE GetCompany@1000000044(VAR Document@1000000000 : Record 6085590) : Text[80];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Header, 'BEDRIJF') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'BEDRIJF', 0),1,80));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'COMPANY', 0),1,80));
    END;

    PROCEDURE GetUnitOfMeasure@1000000046(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Code[20];
    VAR
      Field@1000000002 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Line, 'EENHEID') THEN
        EXIT(CaptureMgt.GetText(Document, Field.Type::Line, 'EENHEID', LineNo));

      EXIT(CaptureMgt.GetText(Document, Field.Type::Line, 'UNITOM', LineNo));
    END;

    PROCEDURE GetDepartmentHeader@1000000048(VAR Document@1000000000 : Record 6085590) : Code[50];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Header, 'KOSTENPLAATS') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'KOSTENPLAATS', 0),1,50));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'DEPARTMENT', 0),1,50));
    END;

    PROCEDURE GetHeaderDescription@1000000049(VAR Document@1000000000 : Record 6085590) : Code[20];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Header, 'OMSCHRIJVING') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'OMSCHRIJVING', 0),1,20));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'DESCRIPTION', 0),1,20));
    END;

    PROCEDURE GetInvoiceNo@1000000052(VAR Document@1000000000 : Record 6085590) : Text[50];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.",Field.Type::Header, 'FACTUURNR') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'FACTUURNR', 0),1,50));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'INVOICENO', 0),1,50));
    END;

    PROCEDURE DocumentExists@1100528200(PurchHeader@1100528200 : Record 38) : Boolean;
    VAR
      Document@1100528201 : Record 6085590;
    BEGIN
      //**4PS
      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",PurchHeader."No.");
      EXIT(Document.FINDFIRST);
    END;

    PROCEDURE GetServOrderHeader@1100525001(VAR Document@1000000000 : Record 6085590) : Code[20];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      //**4PS CALL C020511
      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'SERVICEORDER', 0),1,20));
    END;

    PROCEDURE GetServOrderLine@1100525000(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Code[20];
    VAR
      Field@1000000002 : Record 6085580;
    BEGIN
      //**4PS CALL C020511
      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Line, 'SERVICEORDER', LineNo),1,20));
    END;

    PROCEDURE TemplateStep2Approve@1100409000(PurchHeader@1100528200 : Record 38) : Boolean;
    VAR
      Document@1100528201 : Record 6085590;
      Template@1100409000 : Record 6085579;
    BEGIN
      //**4PS CALL C020358
      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type");
      Document.SETRANGE("Created Doc. ID",PurchHeader."No.");
      IF Document.FINDFIRST THEN
       IF Template.GET(Document."Template No.") THEN BEGIN
         IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
           EXIT(Template."Purch. Inv. Reg. Step 2" = Template."Purch. Inv. Reg. Step 2"::"Submit for Approval");
         IF PurchHeader."Document Type" = PurchHeader."Document Type"::"Credit Memo" THEN
           EXIT(Template."Purch. Cr.Memo Reg. Step 2" = Template."Purch. Cr.Memo Reg. Step 2"::"Submit for Approval");
       END;

      EXIT(FALSE);
    END;

    PROCEDURE GetDocumentNoHeaderAmounts@1100525002(ExtDocID@161024014 : Code[20];VAR AmountExclVAT@161024013 : Decimal;VAR AmountInclVAT@161024012 : Decimal) : Boolean;
    VAR
      Document@161024016 : Record 6085590;
    BEGIN
      //**4PS
      AmountExclVAT := 0;
      AmountInclVAT := 0;

      Document.SETRANGE("No.", ExtDocID);
      IF NOT Document.FINDFIRST THEN
        EXIT;

      AmountExclVAT := Document."Amount Excl. VAT";
      AmountInclVAT := Document."Amount Incl. VAT";

      EXIT(TRUE);
    END;

    PROCEDURE OpenEmailFile@1100525003(Variant@1100525001 : Variant);
    VAR
      RecRef@1100525004 : RecordRef;
      PurchaseHeader@1100525003 : Record 38;
      PurchInvHeader@1100525002 : Record 122;
      PurchCrMHeader@1100525000 : Record 124;
      DCDocument@1100525005 : Record 6085590;
    BEGIN
      //**4PS
      RecRef.GETTABLE(Variant);
      CASE RecRef.NUMBER OF
        DATABASE::"Purch. Inv. Header":
          BEGIN
            RecRef.SETTABLE(PurchInvHeader);
            IF DCDocument.GET(COPYSTR(PurchInvHeader."Ext. Document ID",1,MAXSTRLEN(DCDocument."No."))) THEN
              DCDocument.OpenEMailFile;
          END;
        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            RecRef.SETTABLE(PurchCrMHeader);
            IF DCDocument.GET(COPYSTR(PurchCrMHeader."Ext. Document ID",1,MAXSTRLEN(DCDocument."No."))) THEN
              DCDocument.OpenEMailFile;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchaseHeader);
            IF DCDocument.GET(COPYSTR(PurchaseHeader."Ext. Document ID",1,MAXSTRLEN(DCDocument."No."))) THEN
              DCDocument.OpenEMailFile;
          END;

      END;
    END;

    PROCEDURE GetBAccountNo@1100527000(VAR Document@1100527000 : Record 6085590) : Code[50];
    VAR
      Field@1100527001 : Record 6085580;
    BEGIN
      //**4PS
      IF Field.GET(Document."Template No.", Field.Type::Header, 'G-REKENING') THEN
        EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'G-REKENING', 0), 1, 50));

      EXIT(COPYSTR(CaptureMgt.GetText(Document, Field.Type::Header, 'B-ACCOUNTNO', 0), 1, 50));
    END;

    PROCEDURE CheckRetOrderRelation@1160040012(PurchLine@6085573 : Record 39) : Boolean;
    BEGIN
      IF (PurchLine."Document Type" = PurchLine."Document Type"::"Credit Memo") AND (PurchLine."Return Shipment No."  = 'RETURNORDER')
      THEN
        EXIT(TRUE);
    END;

    PROCEDURE GetAmountDistribution@1160040013(PurchHeader@1160040000 : Record 38);
    VAR
      UsePurchAmountDistrib@1160040001 : Page 6085783;
      AmtDistribCode@1160040004 : Code[10];
      LineAction@1160040003 : 'ReplaceLines,KeepLines';
      AmountToDistribute@1160040002 : Decimal;
    BEGIN
      PurchHeader.FILTERGROUP(4);
      PurchHeader.SETRECFILTER;
      PurchHeader.FILTERGROUP(0);
      UsePurchAmountDistrib.SETTABLEVIEW(PurchHeader);
      UsePurchAmountDistrib.LOOKUPMODE := TRUE;
      IF UsePurchAmountDistrib.RUNMODAL = ACTION::LookupOK THEN BEGIN
        UsePurchAmountDistrib.GetValues(AmtDistribCode,LineAction,AmountToDistribute);
        ApplyAmountDistribution(PurchHeader,AmtDistribCode,LineAction,AmountToDistribute);
      END;
    END;

    PROCEDURE ApplyAmountDistribution@1160040015(VAR PurchHeader@1160040006 : Record 38;StdAmtDistribCode@1160040002 : Code[10];LineAction@1160040001 : 'ReplaceLines,KeepLines';AmtToDistribute@1160040000 : Decimal);
    VAR
      StdAmountDistrib@1160040003 : Record 6085774;
      StdAmountDistribLine@1160040004 : Record 6085775;
      StdAmountDistribDim@1160040013 : Record 6085776;
      StdVendAmtDistribCode@1160040015 : Record 6085777;
      PurchLine@1160040005 : Record 39;
      Currency@1160040008 : Record 4;
      DCDimMgt@1160040012 : Codeunit 6085615;
      TransferExtendedText@1160040014 : Codeunit 378;
      PctAmtToDistribute@1160040011 : Decimal;
      TotalAmtDistributed@1160040009 : Decimal;
      PctToDistribute@6085574 : Decimal;
      NextLineNo@1160040007 : Integer;
      LineNoToAdjust@1160040010 : Integer;
    BEGIN
      PurchHeader.TESTFIELD("Buy-from Vendor No.");
      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchHeader."Currency Code");

      StdAmountDistrib.GET(StdAmtDistribCode);
      StdAmountDistrib.TESTFIELD("Enabled for Purchase");

      IF StdAmountDistrib."Enabled for Purchase" = StdAmountDistrib."Enabled for Purchase"::"Yes - selected vendors only" THEN
        IF NOT StdVendAmtDistribCode.GET(PurchHeader."Buy-from Vendor No.",StdAmountDistrib.Code) THEN
          ERROR(STRSUBSTNO(Text004,StdAmountDistrib.Code,PurchHeader."Buy-from Vendor No."));

      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      IF LineAction = LineAction::ReplaceLines THEN
        IF PurchLine.FINDSET(TRUE,FALSE) THEN
          REPEAT
            PurchLine.SuspendStatusCheck(TRUE);
            PurchLine.DELETE(TRUE);
          UNTIL PurchLine.NEXT = 0;

      IF PurchLine.FINDLAST THEN
        NextLineNo := PurchLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      // Create section title
      PurchLine.INIT;
      PurchLine."Document Type" := PurchHeader."Document Type";
      PurchLine."Document No." := PurchHeader."No.";
      PurchLine."Line No." := NextLineNo;
      PurchLine.Description := STRSUBSTNO(Text003,StdAmountDistrib.Code);
      PurchLine.INSERT;

      PctAmtToDistribute := AmtToDistribute;
      StdAmountDistribLine.SETRANGE("Amount Distribution Code",StdAmountDistrib.Code);
      IF StdAmountDistribLine.FINDSET THEN
        REPEAT
          IF (StdAmountDistribLine.Type = StdAmountDistribLine.Type::" ") OR
            ((StdAmountDistribLine.Type <> StdAmountDistribLine.Type::" ") AND (StdAmountDistribLine."No." = ''))
          THEN BEGIN
            StdAmountDistribLine.TESTFIELD("Unit Cost",0);
            StdAmountDistribLine.TESTFIELD("Distribution %",0);
          END ELSE
            IF StdAmountDistribLine."Distribution %" <> 0 THEN BEGIN
              StdAmountDistribLine.TESTFIELD(Quantity,1);
              StdAmountDistribLine.TESTFIELD("Unit Cost",0);
              PctToDistribute := PctToDistribute + StdAmountDistribLine."Distribution %";
            END ELSE BEGIN
              StdAmountDistribLine.TESTFIELD("Unit Cost");
              StdAmountDistribLine.TESTFIELD(Quantity);
              PctAmtToDistribute := PctAmtToDistribute - (StdAmountDistribLine."Unit Cost" * StdAmountDistribLine.Quantity);
            END;
        UNTIL StdAmountDistribLine.NEXT = 0;

      StdAmountDistribLine.RESET;
      StdAmountDistribLine.SETRANGE("Amount Distribution Code",StdAmountDistrib.Code);
      // Only distribute fixed cost lines if sum of these lines are higher than amount to distribute
      IF PctAmtToDistribute <= 0 THEN
        StdAmountDistribLine.SETFILTER("Unit Cost",'<>%1',0);

      StdAmountDistribLine.FINDSET;
      REPEAT
        NextLineNo := NextLineNo + 10000;

        PurchLine.SuspendStatusCheck(TRUE);
        PurchLine.INIT;
        PurchLine."Line No." := NextLineNo;
        IF (StdAmountDistribLine.Type = StdAmountDistribLine.Type::" ") OR
          ((StdAmountDistribLine.Type <> StdAmountDistribLine.Type::" ") AND (StdAmountDistribLine."No." = ''))
        THEN BEGIN
          PurchLine.VALIDATE(Type,PurchLine.Type::" ");
          PurchLine.VALIDATE("No.",StdAmountDistribLine."No.");
          PurchLine.Description := StdAmountDistribLine.Description;
          PurchLine.INSERT(TRUE);
        END ELSE BEGIN
          StdAmountDistribLine.TESTFIELD("No.");

          PurchLine.VALIDATE(Type,StdAmountDistribLine.Type);
          PurchLine.VALIDATE("No.",StdAmountDistribLine."No.");
          IF StdAmountDistribLine."Variant Code" <> '' THEN
            PurchLine.VALIDATE("Variant Code",StdAmountDistribLine."Variant Code");

          IF StdAmountDistribLine."Unit Cost" <> 0 THEN BEGIN
            StdAmountDistribLine.TESTFIELD(Quantity);
            PurchLine.VALIDATE(Quantity,StdAmountDistribLine.Quantity)
          END ELSE
            PurchLine.VALIDATE(Quantity,1);

          IF StdAmountDistribLine."Unit of Measure Code" <> '' THEN
            PurchLine.VALIDATE("Unit of Measure Code",StdAmountDistribLine."Unit of Measure Code");
          IF StdAmountDistribLine."Gen. Bus. Posting Group" <> '' THEN
            PurchLine.VALIDATE("Gen. Bus. Posting Group",StdAmountDistribLine."Gen. Bus. Posting Group");
          IF StdAmountDistribLine."VAT Prod. Posting Group" <> '' THEN
            PurchLine.VALIDATE("VAT Prod. Posting Group",StdAmountDistribLine."VAT Prod. Posting Group");
          IF StdAmountDistribLine."Gen. Prod. Posting Group" <> '' THEN
            PurchLine.VALIDATE("Gen. Prod. Posting Group",StdAmountDistribLine."Gen. Prod. Posting Group");
          IF StdAmountDistribLine."VAT Bus. Posting Group" <> '' THEN
            PurchLine.VALIDATE("VAT Bus. Posting Group",StdAmountDistribLine."VAT Bus. Posting Group");

          PurchLine.Description := StdAmountDistribLine.Description;
          IF StdAmountDistribLine."Unit Cost" <> 0 THEN
            PurchLine.VALIDATE("Direct Unit Cost",StdAmountDistribLine."Unit Cost")
          ELSE BEGIN
            PurchLine.VALIDATE("Direct Unit Cost",
              ROUND(PctAmtToDistribute / 100 * StdAmountDistribLine."Distribution %",Currency."Unit-Amount Rounding Precision"));

             LineNoToAdjust := PurchLine."Line No.";
          END;

          PurchLine.INSERT(TRUE);

      // Update Dimensions
          StdAmountDistribDim.SETRANGE("Amount Distribution Code",StdAmountDistribLine."Amount Distribution Code");
          StdAmountDistribDim.SETRANGE("Line No.",StdAmountDistribLine."Line No.");
          IF StdAmountDistribDim.FINDSET THEN
            REPEAT
              DCDimMgt.UpdatePurchLineDim(PurchLine,StdAmountDistribDim."Dimension Code",StdAmountDistribDim."Dimension Value Code");
            UNTIL StdAmountDistribDim.NEXT = 0;

          TotalAmtDistributed := TotalAmtDistributed + PurchLine."Line Amount";

          IF TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,FALSE) THEN BEGIN
            TransferExtendedText.InsertPurchExtText(PurchLine);
            PurchLine.FINDLAST;
            NextLineNo := PurchLine."Line No.";
          END;
        END;
      UNTIL StdAmountDistribLine.NEXT = 0;

      IF (AmtToDistribute <> TotalAmtDistributed) AND (PctToDistribute = 100) THEN BEGIN
      // Handle rounding. We adjust the last line that was created from a Amount Distribution line where Distribution % <> 0
      // Note, this last line can become negative in rare situations
        PurchLine.GET(PurchHeader."Document Type",PurchHeader."No.",LineNoToAdjust);
        PurchLine.VALIDATE("Direct Unit Cost",PurchLine."Direct Unit Cost" + AmtToDistribute - TotalAmtDistributed);
        PurchLine.MODIFY(TRUE);
      END;
    END;

    PROCEDURE GetIsUsingPurchOrders@1160040014() : Boolean;
    VAR
      PurchHeader@1160040000 : Record 38;
    BEGIN
      PurchHeader.SETFILTER("Document Type",'%1|%2',PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order");
      EXIT(NOT PurchHeader.ISEMPTY);
    END;

    PROCEDURE FindDocument@1160040023(VAR Document@1160040002 : Record 6085590;CreatedDocType@1160040001 : Integer;CreatedDocSubType@1160040000 : Integer;CreatedDocID@1160040003 : Code[20]);
    VAR
      PurchaseHeader@1160040004 : Record 38;
    BEGIN
      IF NOT GetDocument(Document,CreatedDocType,CreatedDocSubType,CreatedDocID) THEN BEGIN
        PurchaseHeader."Document Type" := CreatedDocSubType;
        ERROR(Text027,PurchaseHeader."Document Type");
      END;
    END;

    PROCEDURE GetDocument@2(VAR Document@1160040002 : Record 6085590;CreatedDocType@1160040001 : Integer;CreatedDocSubType@1160040000 : Integer;CreatedDocID@1160040003 : Code[20]) : Boolean;
    VAR
      PurchHeader@1160040004 : Record 38;
      ExtDocNo@1160040005 : Code[80];
    BEGIN
      Document.SETCURRENTKEY("Created Doc. Type","Created Doc. Subtype","Created Doc. ID","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Type",CreatedDocType);
      Document.SETRANGE("Created Doc. Subtype",CreatedDocSubType);
      Document.SETRANGE("Created Doc. ID",CreatedDocID);
      Document.SETRANGE("File Type",Document."File Type"::OCR);

      IF (CreatedDocType = DATABASE::"Purchase Header") AND
        (CreatedDocSubType IN [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order"])
      THEN BEGIN
        PurchHeader.GET(CreatedDocSubType,CreatedDocID);
        IF Document.FINDFIRST THEN
          REPEAT
            ExtDocNo := GetDocumentNo(Document);
            IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN BEGIN
              IF PurchHeader."Vendor Invoice No." = ExtDocNo THEN
                EXIT(TRUE);
            END ELSE
              IF PurchHeader."Vendor Cr. Memo No." = ExtDocNo THEN
                EXIT(TRUE);
          UNTIL Document.NEXT = 0;
      END ELSE
        EXIT(Document.FINDFIRST);
    END;

    PROCEDURE GetPurchaseDocument@1(PurchHeader@1160040000 : Record 38;VAR Document@1000 : Record 6085590) : Boolean;
    BEGIN
      EXIT(GetDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No."));
    END;

    PROCEDURE ShowDocumentFromPurchDoc@1160040018(PurchHeader@1000000002 : Record 38);
    VAR
      Document@1000000000 : Record 6085590;
    BEGIN
      Document.FILTERGROUP := 2;
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.");
      Document.RESET;
      Document.SETRANGE("No.",Document."No.");
      Document.FILTERGROUP := 0;
      PAGE.RUN(PAGE::"Document Card",Document);
    END;

    PROCEDURE ShowDocumentFromPostedInv@1160040017(PurchInvHeader@1000000002 : Record 122);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      Document.FILTERGROUP := 2;
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type"::Invoice,PurchInvHeader."Pre-Assigned No.");
      Document.FILTERGROUP := 0;
      PAGE.RUN(PAGE::"Document Card",Document);
    END;

    PROCEDURE ShowDocumentFromPostedCrMemo@1160040016(PurchCrMemoHeader@1000000002 : Record 124);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      Document.FILTERGROUP := 2;
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type"::"Credit Memo",
        PurchCrMemoHeader."Pre-Assigned No.");
      Document.FILTERGROUP := 0;
      PAGE.RUN(PAGE::"Document Card",Document);
    END;

    PROCEDURE ShowEmailFromPurchDoc@1160040021(PurchHeader@1000000002 : Record 38);
    VAR
      Document@1000000000 : Record 6085590;
    BEGIN
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.");
      Document.OpenEMailFile;
    END;

    PROCEDURE ShowEmailFromPostedInv@1160040020(PurchInvHeader@1000000002 : Record 122);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type"::Invoice,PurchInvHeader."Pre-Assigned No.");
      Document.OpenEMailFile;
    END;

    PROCEDURE ShowEmailFromPostedCrMemo@1160040019(PurchCrMemoHeader@1000000002 : Record 124);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type"::"Credit Memo",
        PurchCrMemoHeader."Pre-Assigned No.");
      Document.OpenEMailFile;
    END;

    PROCEDURE ShowEmailFromApprovalEntry@1160040022(ApprovalEntry@1160040000 : Record 454);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      FindDocument(Document,DATABASE::"Purchase Header",ApprovalEntry."Document Type",ApprovalEntry."Document No.");
      Document.OpenEMailFile;
    END;

    LOCAL PROCEDURE GetGLSetup@20();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetDCSetup@1160040030();
    BEGIN
      IF NOT DCSetupRead THEN
        DCSetup.GET;
      DCSetupRead := TRUE;
    END;

    PROCEDURE GetMatchStyle@6085576(MatchedQuantity@6085573 : Decimal;Value@6085574 : Decimal;MatchedValue@6085575 : Decimal) : Text[30];
    BEGIN
      CASE TRUE OF
        MatchedQuantity = 0: EXIT('None');
        Value = MatchedValue: EXIT('Strong');
        ELSE
          EXIT('Attention');
      END;
    END;

    PROCEDURE UpdateMatchedQuantity@6085581(VAR Document@6085582 : Record 6085590;PurchLine@6085590 : Record 39;Currency@6085589 : Record 4;MatchedToDocType@6085585 : 'Receipt,Return Shipment,Order,Return Order';MatchedToDocNo@6085587 : Code[20];MatchedToLineNo@6085586 : Integer;MatchedToQuantity@6085577 : Decimal;QtyAvailableOnMatchedToLine@6085588 : Decimal;VAR MatchedQuantity@6085576 : Decimal;AutoCalcQtyCostsDiscount@6085583 : Boolean);
    VAR
      PurchDocMatch@1000000001 : Record 6085700;
      DocumentLine@1000000006 : Record 6085596;
      Comment@1000000004 : Record 6085594;
      Field@1000000005 : Record 6085580;
      Location@6085580 : Record 14;
      ReservEntry@6085575 : Record 337;
      TempItemLedgEntry@6085591 : TEMPORARY Record 32;
      ItemTrackingMgt@6085581 : Codeunit 6500;
      CreateNewMatch@1000000003 : Boolean;
      PrevMatchedQty@1000000007 : Decimal;
      TotalMatchedQty@6085573 : Decimal;
      PrevQty@6085574 : Decimal;
    BEGIN
      IF (MatchedToDocType IN [MatchedToDocType::Order,MatchedToDocType::"Return Order"]) THEN
        IF PurchLine.Type = PurchLine.Type::Item THEN
          IF Location.RequireReceive(PurchLine."Location Code") THEN
            ERROR(WarehouseReceiveErr,PurchLine.FIELDCAPTION("Document Type"),PurchLine."Document Type",
              PurchLine.FIELDCAPTION("Document No."),PurchLine."Document No.",
              PurchLine.FIELDCAPTION("Line No."),PurchLine."Line No.");

      IF (PurchLine.Type = PurchLine.Type::Item) AND (MatchedQuantity <> 0) THEN BEGIN
        CASE MatchedToDocType OF
          MatchedToDocType::Receipt:
            BEGIN
              IF MatchedQuantity <> QtyAvailableOnMatchedToLine THEN BEGIN
                RetrieveILEFromShptRcpt(TempItemLedgEntry,DATABASE::"Purch. Rcpt. Line",0,MatchedToDocNo,'',0,MatchedToLineNo);
                IF TempItemLedgEntry.COUNT > 1 THEN
                  ERROR(PartialMatchToReceiptWithTrackingErr,Document."No.",MatchedToDocNo,MatchedToLineNo);
              END;
            END;

          MatchedToDocType::"Return Shipment":
            BEGIN
              IF MatchedQuantity <> QtyAvailableOnMatchedToLine THEN BEGIN
                RetrieveILEFromShptRcpt(TempItemLedgEntry,DATABASE::"Return Shipment Line",0,MatchedToDocNo,'',0,MatchedToLineNo);
                IF TempItemLedgEntry.COUNT > 1 THEN
                  ERROR(PartialMatchToReturnsWithTrackingErr,Document."No.",MatchedToDocNo,MatchedToLineNo);
              END;
            END;

          MatchedToDocType::Order,MatchedToDocType::"Return Order": CkeckMatchToWithTracking(PurchLine,MatchedToDocType);
        END;
      END;

      IF NOT AutoCalcQtyCostsDiscount THEN BEGIN
        IF (MatchedQuantity < 0) AND (MatchedToQuantity > 0) THEN
          ERROR(MustBePositiveErr,MatchedQuantityCap,PurchLine.FIELDCAPTION(Quantity));

        IF (MatchedQuantity > 0) AND (MatchedToQuantity < 0) THEN
          ERROR(MustBeNegativeErr,MatchedQuantityCap,PurchLine.FIELDCAPTION(Quantity));
      END;

      // TotalMatchedQty = the total quantity already matched to the purchase order / return order / receipt or return shipment line
      TotalMatchedQty :=  CalculateMatchedQty(Document."No.",MatchedToDocType,MatchedToDocNo,MatchedToLineNo,FALSE);

      // PrevMatchedQty = the total quantity already matched to the purchase order / return order / receipt or return shipment line
      //                  from the current DC document
      PrevMatchedQty := CalculateMatchedQty(Document."No.",MatchedToDocType,MatchedToDocNo,MatchedToLineNo,TRUE);

      IF AutoCalcQtyCostsDiscount THEN BEGIN
        IF MatchedQuantity <> 0 THEN
          // set to zero when line has a quantity,
          MatchedQuantity := 0
        ELSE BEGIN
          // calculate quantity when line has zero in quantity
          MatchedQuantity := QtyAvailableOnMatchedToLine - (TotalMatchedQty - PrevMatchedQty);
          IF MatchedQuantity = 0 THEN
            ERROR(NothingToMatchErr);
        END;
      END;

      IF ABS(MatchedQuantity) > ABS(QtyAvailableOnMatchedToLine - (TotalMatchedQty - PrevMatchedQty)) THEN
        ERROR(LeftToMatchErr,MatchedQuantity,QtyAvailableOnMatchedToLine - (TotalMatchedQty - PrevMatchedQty));

      IF MatchedQuantity = 0 THEN BEGIN
        PurchDocMatch.SETRANGE("Document No.",Document."No.");
        PurchDocMatch.SETRANGE("Purch. Doc. Type",MatchedToDocType);
        PurchDocMatch.SETRANGE("Purch. Doc. No.",MatchedToDocNo);
        PurchDocMatch.SETRANGE("Purch. Line No.",MatchedToLineNo);
        PurchDocMatch.DELETEALL;
      END ELSE BEGIN
        PurchDocMatch.SETRANGE("Document No.",Document."No.");
        PurchDocMatch.SETRANGE("Purch. Doc. Type",MatchedToDocType);
        PurchDocMatch.SETRANGE("Purch. Doc. No.",MatchedToDocNo);
        PurchDocMatch.SETRANGE("Purch. Line No.",MatchedToLineNo);
        IF PurchDocMatch.FINDFIRST THEN BEGIN
          IF PurchDocMatch.COUNT = 1 THEN BEGIN
            PurchDocMatch.Quantity := MatchedQuantity;
            PurchDocMatch.MODIFY;
          END ELSE BEGIN
            PurchDocMatch.DELETEALL;

            InsertPurchDocMatch(PurchDocMatch,Document."No.",0,MatchedToDocType,MatchedToDocNo,MatchedToLineNo,
              MatchedQuantity,PurchLine."Direct Unit Cost",PurchLine."Line Discount %");
          END;
        END ELSE
          InsertPurchDocMatch(PurchDocMatch,Document."No.",0,MatchedToDocType,MatchedToDocNo,MatchedToLineNo,
            MatchedQuantity,PurchLine."Direct Unit Cost",PurchLine."Line Discount %");
      END;

      Document.FIND('=');

      PurchDocMatch.RESET;
      PurchDocMatch.SETRANGE("Document No.",Document."No.");
      IF PurchDocMatch.ISEMPTY THEN BEGIN
        // To get comment created with error: One or more lines are unmatched.
        Document."Match Status" := Document."Match Status"::"Automatically Matched";
        Document.MODIFY;
        Document.DeleteComments(Comment.Area::Match);
      END ELSE
        IF Document."Match Status" <> Document."Match Status"::"Manually Matched" THEN BEGIN
          Document."Match Status" := Document."Match Status"::"Manually Matched";
          Document.MODIFY;
          Document.DeleteComments(Comment.Area::Match);
          Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Information,ManualMatchTxt);
        END;
    END;

    PROCEDURE UpdateMatchedDirectUnitCost@6085580(Document@6085579 : Record 6085590;CurrencyCode@6085587 : Code[10];PurchDocType@6085583 : 'Receipt,Return Shipment,Order,Return Order';PurchDocNo@6085582 : Code[20];PurchLineNo@6085574 : Integer;DirectUnitCost@6085578 : Decimal;VAR MatchedUnitCost@6085577 : Decimal;AutoCalcDirectUnitCost@6085573 : Boolean);
    VAR
      Field@6085585 : Record 6085580;
      PurchDocMatch@6085575 : Record 6085700;
      PurchRcptLine@6085576 : Record 121;
      ReturnShipmentLine@6085580 : Record 6651;
      Comment@6085586 : Record 6085594;
      DCAppMgt@6085581 : Codeunit 6085722;
      UnitCost@6085584 : Decimal;
    BEGIN
      IF MatchedUnitCost < 0 THEN
        CASE PurchDocType OF
          PurchDocType::Receipt,PurchDocType::Order:
            ERROR(NegativeErr,DirectUnitCostInvCap);
          PurchDocType::"Return Shipment",PurchDocType::"Return Order":
            ERROR(NegativeErr,DirectUnitCostCMCap);
        END;

      IF AutoCalcDirectUnitCost THEN
        MatchedUnitCost := DirectUnitCost;

      CASE PurchDocMatchAginstDocExist(PurchDocMatch,Document."No.",PurchDocType,PurchDocNo,PurchLineNo) OF
        PurchDocMatchAginst::"No Match":
          ERROR(NoMatchErr,MatchedQuantityCap);

        PurchDocMatchAginst::Document:
          BEGIN
            PurchDocMatch."Direct Unit Cost" := MatchedUnitCost;
            PurchDocMatch.MODIFY;
          END;

        PurchDocMatchAginst::"Document line":
          BEGIN
            Field.GET(Document."Template No.",Field.Type::Line,'UNITCOST');
            UnitCost := GetLineUnitCost(Document,PurchDocMatch."Document Line No.");

            IF UnitCost <> MatchedUnitCost THEN BEGIN
              CASE PurchDocType OF
                PurchDocType::Receipt:
                  IF NOT CONFIRM(DocumentLineMatchQst,TRUE,PurchRcptLine.TABLECAPTION,Field."Field Name",DCAppMgt.FormatUnitAmount(
                    UnitCost,CurrencyCode),DirectUnitCostInvCap,DCAppMgt.FormatUnitAmount(MatchedUnitCost,CurrencyCode))
                  THEN
                    ERROR('');
                PurchDocType::"Return Shipment":
                  IF NOT CONFIRM(DocumentLineMatchQst,TRUE,ReturnShipmentLine.TABLECAPTION,Field."Field Name",DCAppMgt.FormatUnitAmount(
                    UnitCost,CurrencyCode),DirectUnitCostCMCap,DCAppMgt.FormatUnitAmount(MatchedUnitCost,CurrencyCode))
                  THEN
                    ERROR('');
                PurchDocType::Order:
                  IF NOT CONFIRM(DocumentLineMatchQst,TRUE,OrderLineCap,Field."Field Name",DCAppMgt.FormatUnitAmount(UnitCost,
                    CurrencyCode),DirectUnitCostInvCap,DCAppMgt.FormatUnitAmount(MatchedUnitCost,CurrencyCode))
                  THEN
                    ERROR('');
                PurchDocType::"Return Order":
                  IF NOT CONFIRM(DocumentLineMatchQst,TRUE,ReturnOrderLineCap,Field."Field Name",DCAppMgt.FormatUnitAmount(UnitCost,
                    CurrencyCode),DirectUnitCostCMCap,DCAppMgt.FormatUnitAmount(MatchedUnitCost,CurrencyCode))
                  THEN
                    ERROR('');
              END;

              PurchDocMatch.DELETE;

              PurchDocMatch."Document Line No." := 0;
              PurchDocMatch."Direct Unit Cost" := MatchedUnitCost;
              PurchDocMatch.INSERT;
            END;
          END;

        PurchDocMatchAginst::"Multiple lines":
          BEGIN
            CASE PurchDocType OF
              PurchDocType::Receipt:
                ERROR(MultipleLinesMatchErr,DirectUnitCostInvCap,PurchRcptLine.TABLECAPTION);
              PurchDocType::"Return Shipment":
                ERROR(MultipleLinesMatchErr,DirectUnitCostCMCap,ReturnShipmentLine.TABLECAPTION);
              PurchDocType::Order:
                ERROR(MultipleLinesMatchErr,DirectUnitCostInvCap,OrderLineCap);
              PurchDocType::"Return Order":
                ERROR(MultipleLinesMatchErr,DirectUnitCostCMCap,ReturnOrderLineCap);
            END;
        END;
      END;

      Document.FIND('=');
      IF Document."Match Status" <> Document."Match Status"::"Manually Matched" THEN BEGIN
        Document."Match Status" := Document."Match Status"::"Manually Matched";
        Document.MODIFY;
        Document.DeleteComments(Comment.Area::Match);
        Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Information,ManualMatchTxt);
      END;
    END;

    PROCEDURE UpdateMatchedLineDiscPct@6085579(Document@6085587 : Record 6085590;PurchDocType@6085585 : 'Receipt,Return Shipment,Order,Return Order';PurchDocNo@6085584 : Code[20];PurchLineNo@6085583 : Integer;LineDiscountPct@6085582 : Decimal;VAR MatchedLineDiscPct@6085579 : Decimal;AutoCalcLineDiscPct@6085575 : Boolean);
    VAR
      Field@6085578 : Record 6085580;
      PurchDocMatch@6085577 : Record 6085700;
      PurchRcptLine@6085574 : Record 121;
      ReturnShipmentLine@6085573 : Record 6651;
      Comment@6085576 : Record 6085594;
      LineDiscPct@6085580 : Decimal;
    BEGIN
      IF MatchedLineDiscPct < 0 THEN
        CASE PurchDocType OF
          PurchDocType::Receipt,PurchDocType::Order:
            ERROR(NegativeErr,LineDiscountPctInvCap);
          PurchDocType::"Return Shipment",PurchDocType::"Return Order":
            ERROR(NegativeErr,LineDiscountPctCMCap);
        END;

      IF AutoCalcLineDiscPct THEN
        MatchedLineDiscPct := LineDiscountPct;

      CASE PurchDocMatchAginstDocExist(PurchDocMatch,Document."No.",PurchDocType,PurchDocNo,PurchLineNo) OF
        PurchDocMatchAginst::"No Match":
          ERROR(NoMatchErr,MatchedQuantityCap);

        PurchDocMatchAginst::Document:
          BEGIN
            PurchDocMatch."Line Discount %" := MatchedLineDiscPct;
            PurchDocMatch.MODIFY;
          END;

        PurchDocMatchAginst::"Document line":
          BEGIN
            Field.GET(Document."Template No.",Field.Type::Line,'DISCPCT');
            LineDiscPct := GetLineDiscPct(Document,PurchDocMatch."Document Line No.");

            IF LineDiscPct <> MatchedLineDiscPct THEN BEGIN
              CASE PurchDocType OF
                PurchDocType::Receipt:
                  IF NOT CONFIRM(DocumentLineMatchQst,TRUE,PurchRcptLine.TABLECAPTION,Field."Field Name",LineDiscPct,
                    LineDiscountPctInvCap,MatchedLineDiscPct)
                  THEN
                    ERROR('');
                PurchDocType::"Return Shipment":
                  IF NOT CONFIRM(DocumentLineMatchQst,TRUE,ReturnShipmentLine.TABLECAPTION,Field."Field Name",LineDiscPct,
                    LineDiscountPctCMCap,MatchedLineDiscPct)
                  THEN
                    ERROR('');
                PurchDocType::Order:
                  IF NOT CONFIRM(DocumentLineMatchQst,TRUE,OrderLineCap,Field."Field Name",LineDiscPct,LineDiscountPctInvCap,
                    MatchedLineDiscPct)
                  THEN
                    ERROR('');
                PurchDocType::"Return Order":
                  IF NOT CONFIRM(DocumentLineMatchQst,TRUE,ReturnOrderLineCap,Field."Field Name",LineDiscPct,LineDiscountPctCMCap,
                    MatchedLineDiscPct)
                  THEN
                    ERROR('');
              END;

              PurchDocMatch.DELETE;

              PurchDocMatch."Document Line No." := 0;
              PurchDocMatch."Line Discount %" := MatchedLineDiscPct;
              PurchDocMatch.INSERT;
            END;
          END;

        PurchDocMatchAginst::"Multiple lines":
          BEGIN
            CASE PurchDocType OF
              PurchDocType::Receipt:
                ERROR(MultipleLinesMatchErr,LineDiscountPctInvCap,PurchRcptLine.TABLECAPTION);
              PurchDocType::"Return Shipment":
                ERROR(MultipleLinesMatchErr,LineDiscountPctCMCap,ReturnShipmentLine.TABLECAPTION);
              PurchDocType::Order:
                ERROR(MultipleLinesMatchErr,LineDiscountPctInvCap,OrderLineCap);
              PurchDocType::"Return Order":
                ERROR(MultipleLinesMatchErr,LineDiscountPctCMCap,ReturnOrderLineCap);
            END;
        END;
      END;

      Document.FIND('=');
      IF Document."Match Status" <> Document."Match Status"::"Manually Matched" THEN BEGIN
        Document."Match Status" := Document."Match Status"::"Manually Matched";
        Document.MODIFY;
        Document.DeleteComments(Comment.Area::Match);
        Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Information,ManualMatchTxt);
      END;
    END;

    PROCEDURE CalcMatchedValues@6085578(Currency@6085585 : Record 4;DocumentNo@6085582 : Code[20];PurchDocType@6085588 : 'Receipt,Return Shipment,Order,Return Order';PurchDocNo@6085583 : Code[20];PurchLineNo@6085584 : Integer;DirectUnitCost@6085590 : Decimal;LineDiscountPct@6085591 : Decimal;VAR MatchedQuantity@6085589 : Decimal;VAR MatchedUnitCost@6085580 : Decimal;VAR MatchedLineDiscPct@6085581 : Decimal;VAR MatchedLineAmount@6085579 : Decimal;VAR MatchedDifference@6085573 : Decimal) : Decimal;
    VAR
      Document@6085586 : Record 6085590;
      PurchDocMatch@1000000000 : Record 6085700;
      PurchLine2@6085578 : Record 39;
      PurchDocMgnt@6085587 : Codeunit 6085709;
      MatchedDiscAmount@6085577 : Decimal;
      LineDiscountAmount@6085592 : Decimal;
      NoOfPurchDocMatch@6085574 : Integer;
    BEGIN
      MatchedQuantity := 0;
      MatchedUnitCost := 0;
      MatchedLineDiscPct := 0;
      MatchedLineAmount := 0;
      MatchedDifference := 0;

      PurchDocMatch.SETRANGE("Document No.",DocumentNo);
      PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocType);
      PurchDocMatch.SETRANGE("Purch. Doc. No.",PurchDocNo);
      PurchDocMatch.SETRANGE("Purch. Line No.",PurchLineNo);

      IF PurchDocMatch.FINDSET THEN
        REPEAT
          NoOfPurchDocMatch := NoOfPurchDocMatch + 1;
          MatchedQuantity := MatchedQuantity + PurchDocMatch.Quantity;

          LineDiscountAmount :=
            ROUND(
              ROUND(PurchDocMatch.Quantity * PurchDocMatch."Direct Unit Cost",Currency."Amount Rounding Precision") *
              PurchDocMatch."Line Discount %" / 100,Currency."Amount Rounding Precision");
          MatchedDiscAmount := MatchedDiscAmount + LineDiscountAmount;

          MatchedLineAmount := MatchedLineAmount +
            ROUND(PurchDocMatch.Quantity * PurchDocMatch."Direct Unit Cost",Currency."Amount Rounding Precision") - LineDiscountAmount;
        UNTIL PurchDocMatch.NEXT = 0;

      IF NoOfPurchDocMatch = 1 THEN BEGIN
        MatchedUnitCost := PurchDocMatch."Direct Unit Cost";
        MatchedLineDiscPct := PurchDocMatch."Line Discount %";
      END ELSE BEGIN
        IF MatchedQuantity <> 0 THEN
          MatchedUnitCost := ROUND((MatchedLineAmount + MatchedDiscAmount) / MatchedQuantity,Currency."Unit-Amount Rounding Precision");

        IF (MatchedLineAmount + MatchedDiscAmount) <> 0 THEN
          MatchedLineDiscPct := ROUND(MatchedDiscAmount / (MatchedLineAmount + MatchedDiscAmount) * 100,0.00001);
      END;

      MatchedDifference := CalcMatchDifference(Currency,MatchedLineAmount,MatchedQuantity,DirectUnitCost,LineDiscountPct);
    END;

    PROCEDURE ShowMatchedSpec@6085574(PurchDocType@6085577 : 'Receipt,Return Shipment,Order,Return Order';PurchDocNo@6085576 : Code[20];PurchLineNo@6085575 : Integer);
    VAR
      MatchSpec@161024012 : TEMPORARY Record 6085761;
      PurchDocMatch@1160040001 : Record 6085700;
      PurchLine@1160040000 : Record 39;
      PurchLineRel@6085573 : Record 6085702;
      Document2@6085574 : Record 6085590;
    BEGIN
      PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocType);
      PurchDocMatch.SETRANGE("Purch. Doc. No.",PurchDocNo);
      PurchDocMatch.SETRANGE("Purch. Line No.",PurchLineNo);
      IF PurchDocMatch.FINDSET THEN
        REPEAT
          MatchSpec.INIT;
          MatchSpec.Type := MatchSpec.Type::Document;
          MatchSpec."Document No." := PurchDocMatch."Document No.";
          MatchSpec."Line No." := PurchDocMatch."Document Line No.";

          IF MatchSpec."Line No." <> 0 THEN BEGIN
            Document2.GET(PurchDocMatch."Document No.");
            MatchSpec."No." := GetLineAccountNo(Document2,PurchDocMatch."Document Line No.");
            MatchSpec.Description := GetLineDescription(Document2,PurchDocMatch."Document Line No.");
            MatchSpec.Quantity := GetLineQuantity(Document2,PurchDocMatch."Document Line No.");
            MatchSpec."Direct Unit Cost" := GetLineUnitCost(Document2,PurchDocMatch."Document Line No.");
            MatchSpec."Line Discount %" := GetLineDiscPct(Document2,PurchDocMatch."Document Line No.");
            MatchSpec."Line Discount Amount" := GetLineDiscAmount(Document2,PurchDocMatch."Document Line No.");
          END;

          MatchSpec."Matched Quantity" := PurchDocMatch.Quantity;
          MatchSpec."Matched Direct Unit Cost" := PurchDocMatch."Direct Unit Cost";
          MatchSpec."Matched Line Discount %" := PurchDocMatch."Line Discount %";
          MatchSpec.INSERT;
        UNTIL PurchDocMatch.NEXT = 0;

      IF (PurchDocType IN [PurchDocType::Order,PurchDocType::"Return Order"]) THEN BEGIN
        PurchLineRel.SETCURRENTKEY("Related Document Type","Related Document No.","Related Line No.");

        IF PurchDocType = PurchDocType::Order THEN
          PurchLineRel.SETRANGE("Related Document Type",PurchLineRel."Related Document Type"::Order)
        ELSE
          PurchLineRel.SETRANGE("Related Document Type",PurchLineRel."Related Document Type"::"Return Order");

        PurchLineRel.SETRANGE("Related Document No.",PurchDocNo);
        PurchLineRel.SETRANGE("Related Line No.",PurchLineNo);
        IF PurchLineRel.FINDSET THEN
          REPEAT
            MatchSpec.INIT;
            IF PurchLineRel."Document Type" = PurchLineRel."Document Type"::Invoice THEN
              MatchSpec.Type := MatchSpec.Type::"Purchase Invoice"
            ELSE
              MatchSpec.Type := MatchSpec.Type::"Purchase Credit Memo";

            MatchSpec."Document No." := PurchLineRel."Document No.";
            MatchSpec."Line No." := PurchLineRel."Document Line No.";

            PurchLine.GET(PurchLineRel."Document Type",PurchLineRel."Document No.",PurchLineRel."Document Line No.");
            IF MatchSpec."Line No." <> 0 THEN BEGIN
              MatchSpec."No." := PurchLine."No.";
              MatchSpec.Description := PurchLine.Description;
              MatchSpec.Quantity := PurchLine.Quantity;
              MatchSpec."Direct Unit Cost" := PurchLine."Direct Unit Cost";
              MatchSpec."Line Discount %" := PurchLine."Line Discount %";
              MatchSpec."Line Discount Amount" := PurchLine."Line Discount Amount";
            END;

            MatchSpec."Matched Quantity" := PurchLine.Quantity;
            MatchSpec."Matched Direct Unit Cost" := PurchLine."Direct Unit Cost";
            MatchSpec."Matched Line Discount %" := PurchLine."Line Discount %";
            MatchSpec.INSERT;
          UNTIL PurchLineRel.NEXT = 0;
      END ELSE BEGIN
        CASE PurchDocType OF
          PurchDocType::Receipt:
            BEGIN
              PurchLine.SETCURRENTKEY("Document Type","Receipt No.","Receipt Line No.");
              PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Invoice);
              PurchLine.SETRANGE("Receipt No.",PurchDocNo);
              PurchLine.SETRANGE("Receipt Line No.",PurchLineNo);
            END;
          PurchDocType::"Return Shipment":
            BEGIN
              PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::"Credit Memo");
              PurchLine.SETRANGE("Return Shipment No.",PurchDocNo);
              PurchLine.SETRANGE("Return Shipment Line No.",PurchLineNo);
            END;
        END;

        IF PurchLine.FINDSET THEN
          REPEAT
            MatchSpec.INIT;

            IF PurchLine."Document Type" = PurchLine."Document Type"::Invoice THEN
              MatchSpec.Type := MatchSpec.Type::"Purchase Invoice"
            ELSE
              MatchSpec.Type := MatchSpec.Type::"Purchase Credit Memo";

            MatchSpec."Document No." := PurchLine."Document No.";
            MatchSpec."Line No." := PurchLine."Line No.";
            MatchSpec."No." := PurchLine."No.";
            MatchSpec.Description := PurchLine.Description;
            MatchSpec.Quantity := PurchLine.Quantity;
            MatchSpec."Direct Unit Cost" := PurchLine."Direct Unit Cost";
            MatchSpec."Line Discount %" := PurchLine."Line Discount %";
            MatchSpec."Line Discount Amount" := PurchLine."Line Discount Amount";
            MatchSpec."Matched Quantity" := PurchLine.Quantity;
            MatchSpec."Matched Direct Unit Cost" := PurchLine."Direct Unit Cost";
            MatchSpec."Matched Line Discount %" := PurchLine."Line Discount %";
            MatchSpec.INSERT;
          UNTIL PurchLine.NEXT = 0;
      END;

      PAGE.RUN(0,MatchSpec);
    END;

    PROCEDURE CalculateMatchedQty@6085575(DCDocumentNo@6085576 : Code[20];MatchedToDocType@6085575 : 'Receipt,Return Shipment,Order,Return Order';MatchedToDocNo@6085574 : Code[20];MatchedToLineNo@6085573 : Integer;ForDCDocOnly@1000000001 : Boolean) : Decimal;
    VAR
      PurchDocMatch@1000000000 : Record 6085700;
      PurchLine@1160040000 : Record 39;
      PurchLineRel@6085577 : Record 6085702;
      Qty@1160040001 : Decimal;
    BEGIN
      IF ForDCDocOnly THEN
        PurchDocMatch.SETRANGE("Document No.",DCDocumentNo)
      ELSE
        PurchDocMatch.SETCURRENTKEY("Purch. Doc. Type","Purch. Doc. No.","Purch. Line No.");

      PurchDocMatch.SETRANGE("Purch. Doc. Type",MatchedToDocType);
      PurchDocMatch.SETRANGE("Purch. Doc. No.",MatchedToDocNo);
      PurchDocMatch.SETRANGE("Purch. Line No.",MatchedToLineNo);
      PurchDocMatch.CALCSUMS(Quantity);
      Qty := PurchDocMatch.Quantity;

      IF NOT ForDCDocOnly THEN
        IF (MatchedToDocType IN [MatchedToDocType::Order,MatchedToDocType::"Return Order"]) THEN BEGIN
          PurchLineRel.SETCURRENTKEY("Related Document Type","Related Document No.","Related Line No.");

          IF MatchedToDocType = MatchedToDocType::Order THEN
            PurchLineRel.SETRANGE("Related Document Type",PurchLineRel."Related Document Type"::Order)
          ELSE
            PurchLineRel.SETRANGE("Related Document Type",PurchLineRel."Related Document Type"::"Return Order");

          PurchLineRel.SETRANGE("Related Document No.",MatchedToDocNo);
          PurchLineRel.SETRANGE("Related Line No.",MatchedToLineNo);
          IF PurchLineRel.FINDSET THEN
            REPEAT
              Qty := Qty + PurchLineRel.GetQuantity;
            UNTIL PurchLineRel.NEXT = 0;
        END ELSE BEGIN
          IF MatchedToDocType = MatchedToDocType::Receipt THEN BEGIN
            PurchLine.SETCURRENTKEY("Document Type","Receipt No.","Receipt Line No.");
            PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Invoice);
            PurchLine.SETRANGE("Receipt No.",MatchedToDocNo);
            PurchLine.SETRANGE("Receipt Line No.",MatchedToLineNo);
            PurchLine.CALCSUMS(Quantity);
            Qty := Qty + PurchLine.Quantity;
          END ELSE BEGIN
            PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::"Credit Memo");
            PurchLine.SETRANGE("Return Shipment No.",MatchedToDocNo);
            PurchLine.SETRANGE("Return Shipment Line No.",MatchedToLineNo);
            // Looping as key is needed in 6.00
            IF PurchLine.FINDSET THEN
              REPEAT
                Qty := Qty + PurchLine.Quantity;
              UNTIL PurchLine.NEXT = 0;
          END;
        END;

      EXIT(Qty);
    END;

    PROCEDURE CalcMatchDifference@6085577(Currency@6085577 : Record 4;MatchedLineAmount@6085575 : Decimal;MatchedQuantity@6085574 : Decimal;DirectUnitCost@6085578 : Decimal;LineDiscountPct@6085579 : Decimal) : Decimal;
    VAR
      LineAmount@6085573 : Decimal;
      DiscAmount@6085576 : Decimal;
    BEGIN
      IF MatchedQuantity = 0 THEN
        EXIT(0);

      DiscAmount :=
        ROUND(
          ROUND(MatchedQuantity * DirectUnitCost,Currency."Amount Rounding Precision") *
          LineDiscountPct / 100,
          Currency."Amount Rounding Precision");
      LineAmount :=
        ROUND(MatchedQuantity * DirectUnitCost,Currency."Amount Rounding Precision") - DiscAmount;

      EXIT(LineAmount - MatchedLineAmount);
    END;

    PROCEDURE PurchDocMatchAginstDocExist@6085582(VAR PurchDocMatch@6085573 : Record 6085700;DocumentNo@6085577 : Code[20];PurchDocType@6085576 : 'Receipt,Return Shipment,Order,Return Order';PurchDocNo@6085575 : Code[20];PurchLineNo@6085574 : Integer) : Integer;
    BEGIN
      PurchDocMatch.RESET;
      PurchDocMatch.SETRANGE("Document No.",DocumentNo);
      PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocType);
      PurchDocMatch.SETRANGE("Purch. Doc. No.",PurchDocNo);
      PurchDocMatch.SETRANGE("Purch. Line No.",PurchLineNo);
      IF PurchDocMatch.FINDFIRST THEN
        IF PurchDocMatch.COUNT = 1 THEN BEGIN
          IF PurchDocMatch."Document Line No." = 0 THEN
            EXIT(PurchDocMatchAginst::Document)
          ELSE
            EXIT(PurchDocMatchAginst::"Document line");
        END ELSE
          EXIT(PurchDocMatchAginst::"Multiple lines");

      EXIT(PurchDocMatchAginst::"No Match");
    END;

    PROCEDURE DeletingPurchDocFromC90@6085583(PurchHeader@6085573 : Record 38;VAR LastPostingNo@6085579 : Code[20]) : Boolean;
    VAR
      PurchInvHeader@6085578 : Record 122;
      PurchInvLine@6085577 : Record 123;
      PurchCrMemoHeader@6085576 : Record 124;
      PurchCrMemoLine@6085575 : Record 125;
      _DeletingPurchDocFromC90@6085574 : Boolean;
    BEGIN
      IF PurchHeader."Last Posting No." <> '' THEN BEGIN
        LastPostingNo := PurchHeader."Last Posting No.";
        EXIT(TRUE);
      END ELSE BEGIN
        IF PurchHeader."No. Series" = PurchHeader."Posting No. Series" THEN BEGIN
          CASE PurchHeader."Document Type" OF
            PurchHeader."Document Type"::Order,PurchHeader."Document Type"::Invoice:
              BEGIN
                IF PurchInvHeader.GET(PurchHeader."No.") THEN BEGIN
                  _DeletingPurchDocFromC90 := TRUE;
                  LastPostingNo := PurchHeader."No.";

                  PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
                  IF PurchInvLine.COUNT = 1 THEN BEGIN
                    PurchInvLine.FINDFIRST;
                    // Found Posted Invoice created during delete of un-posted invoice and not from posting from C90
                    IF PurchInvLine.Type = PurchInvLine.Type::" " THEN BEGIN
                      _DeletingPurchDocFromC90 := FALSE;
                      LastPostingNo := '';
                    END;
                  END;
                END
              END;
            PurchHeader."Document Type"::"Return Order",PurchHeader."Document Type"::"Credit Memo":
              BEGIN
                IF PurchCrMemoHeader.GET(PurchHeader."No.") THEN
                  _DeletingPurchDocFromC90 := TRUE;
                  LastPostingNo := PurchHeader."No.";

                  PurchCrMemoLine.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                  IF PurchCrMemoLine.COUNT = 1 THEN BEGIN
                    PurchCrMemoLine.FINDFIRST;
                    // Found Posted Credit Memo created during delete of un-posted Credit Memo and not from posting from C90
                    IF PurchCrMemoLine.Type = PurchCrMemoLine.Type::" " THEN BEGIN
                      _DeletingPurchDocFromC90 := FALSE;
                      LastPostingNo := '';
                    END;
                  END;
              END;
          END;

          EXIT(_DeletingPurchDocFromC90);
        END ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE CheckMatchedToQtyOnValidateQty@6085584(PurchaseLine@6085573 : Record 39);
    VAR
      PurchLineRel@6085581 : Record 6085702;
      RelatedPurchLine@6085580 : Record 39;
      RelatedPurchLine2@6085579 : Record 39;
      PurchDocMatch@6085578 : Record 6085700;
      MatchedQuantity@6085577 : Decimal;
      AvailableQty@6085576 : Decimal;
      QuantityUsed@6085575 : Decimal;
      PurchDocMatched@6085574 : Boolean;
    BEGIN
      CheckMatchedToQty(PurchaseLine,1); // 1 = OnValidateQty
    END;

    PROCEDURE CheckMatchedToQtyOnDelete@6085586(PurchaseLine@6085573 : Record 39);
    BEGIN
      CheckMatchedToQty(PurchaseLine,0); // 0 = OnDelete
    END;

    LOCAL PROCEDURE CheckMatchedToQty@1160040031(PurchaseLine@6085573 : Record 39;OnTrigger@1160040000 : 'OnDelete,OnValidateQty');
    VAR
      PurchLineRel@6085581 : Record 6085702;
      PurchLineRel2@1160040002 : Record 6085702;
      MatchedToPurchOrderLine@6085580 : Record 39;
      RelatedPurchLine@6085579 : Record 39;
      PurchDocMatch@6085578 : Record 6085700;
      OtherMatchedQuantity@6085577 : Decimal;
      MatchedQuantity@1160040003 : Decimal;
      AvailableQty@6085576 : Decimal;
      OutstandingQuantity@1160040001 : Decimal;
      QuantityUsed@6085575 : Decimal;
      PurchDocMatched@6085574 : Boolean;
      PurchaseLineQuantity@6085582 : Decimal;
    BEGIN
      IF PurchaseLine."Document Type" IN [PurchaseLine."Document Type"::Invoice,PurchaseLine."Document Type"::"Credit Memo"] THEN BEGIN
        IF OnTrigger = OnTrigger::OnValidateQty THEN BEGIN
        // Get Purchase Line Relationship to find order / return order line and then loop through all related matches
          IF PurchLineRel.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.") THEN BEGIN
            MatchedToPurchOrderLine.GET(PurchLineRel."Related Document Type",PurchLineRel."Related Document No.",
              PurchLineRel."Related Line No.");

            PurchLineRel2.SETRANGE("Related Document Type",PurchLineRel."Related Document Type");
            PurchLineRel2.SETRANGE("Related Document No.",PurchLineRel."Related Document No.");
            PurchLineRel2.SETRANGE("Related Line No.",PurchLineRel."Related Line No.");
            IF PurchLineRel2.FINDSET THEN
              REPEAT
                IF NOT ((PurchaseLine."Document Type" = PurchLineRel2."Document Type") AND
                  (PurchaseLine."Document No." = PurchLineRel2."Document No.") AND
                  (PurchaseLine."Line No." = PurchLineRel2."Document Line No."))
                THEN BEGIN
                  RelatedPurchLine.GET(PurchLineRel2."Document Type",PurchLineRel2."Document No.",PurchLineRel2."Document Line No.");
                  OtherMatchedQuantity := OtherMatchedQuantity + RelatedPurchLine.Quantity;
                END;
              UNTIL PurchLineRel2.NEXT = 0;

            PurchDocMatch.SETCURRENTKEY("Purch. Doc. Type","Purch. Doc. No.","Purch. Line No.");
            IF PurchLineRel."Related Document Type" = PurchLineRel."Related Document Type"::Order THEN
              PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::Order)
            ELSE
              PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::"Return Order");

            PurchDocMatch.SETRANGE("Purch. Doc. No.",PurchLineRel."Related Document No.");
            PurchDocMatch.SETRANGE("Purch. Line No.",PurchLineRel."Related Line No.");
            IF NOT PurchDocMatch.ISEMPTY THEN BEGIN
              PurchDocMatch.CALCSUMS(Quantity);
              OtherMatchedQuantity := OtherMatchedQuantity + PurchDocMatch.Quantity;
            END;

            AvailableQty := MatchedToPurchOrderLine."Outstanding Quantity" - OtherMatchedQuantity;

            IF (PurchaseLine.Quantity * MatchedToPurchOrderLine.Quantity < 0) OR
              (ABS(MatchedToPurchOrderLine."Outstanding Quantity") < ABS(OtherMatchedQuantity + PurchaseLine.Quantity))
            THEN
              IF PurchLineRel."Related Document Type" = PurchLineRel."Related Document Type"::Order THEN
                ERROR(InvoiceQtyRelToOrderErr,PurchLineRel."Related Document No.",AvailableQty,PurchaseLine.Quantity)
              ELSE
                ERROR(CreditQtyRelToReturnOrderErr,PurchLineRel."Related Document No.",AvailableQty,PurchaseLine.Quantity);
          END;
        END;
      END ELSE BEGIN
        PurchLineRel.SETRANGE("Related Document Type",PurchaseLine."Document Type");
        PurchLineRel.SETRANGE("Related Document No.",PurchaseLine."Document No.");
        PurchLineRel.SETRANGE("Related Line No.",PurchaseLine."Line No.");
        IF PurchLineRel.FINDSET THEN
          REPEAT
            RelatedPurchLine.GET(PurchLineRel."Document Type",PurchLineRel."Document No.",PurchLineRel."Document Line No.");
            MatchedQuantity := MatchedQuantity + RelatedPurchLine.Quantity;
            PurchDocMatched := TRUE;
          UNTIL PurchLineRel.NEXT = 0;

        PurchDocMatch.SETCURRENTKEY("Purch. Doc. Type","Purch. Doc. No.","Purch. Line No.");
        IF PurchaseLine."Document Type" = PurchaseLine."Document Type"::Order THEN
          PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::Order)
        ELSE
          PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::"Return Order");

        PurchDocMatch.SETRANGE("Purch. Doc. No.",PurchaseLine."Document No.");
        PurchDocMatch.SETRANGE("Purch. Line No.",PurchaseLine."Line No.");
        IF NOT PurchDocMatch.ISEMPTY THEN BEGIN
          PurchDocMatch.CALCSUMS(Quantity);
          MatchedQuantity := MatchedQuantity + PurchDocMatch.Quantity;
          PurchDocMatched := TRUE;
        END;

        IF PurchDocMatched THEN BEGIN
          IF PurchaseLine."Document Type" = PurchaseLine."Document Type"::Order THEN
            QuantityUsed := PurchaseLine."Quantity Received"
          ELSE
            QuantityUsed := PurchaseLine."Return Qty. Shipped";

          // Calculate Outstanding Quantity instead of using field on line as Outstanding Quantity on line hasn't been updated when
          // this function is run. When deleting Outstanding Quantity in effect becomes zero
          IF OnTrigger = OnTrigger::OnValidateQty THEN BEGIN
            OutstandingQuantity := PurchaseLine.Quantity - QuantityUsed;
            PurchaseLineQuantity := PurchaseLine.Quantity;
          END ELSE BEGIN
            PurchaseLineQuantity := 0;
            OutstandingQuantity := 0;
          END;

          IF (PurchaseLine.Quantity * MatchedQuantity < 0) OR (ABS(MatchedQuantity) > ABS(OutstandingQuantity)) THEN
            IF PurchaseLine."Document Type" = PurchaseLine."Document Type"::Order THEN
              ERROR(QtyToOrderErr,MatchedQuantity + QuantityUsed,PurchaseLineQuantity)
            ELSE
              ERROR(QtyToReturnErr,MatchedQuantity + QuantityUsed,PurchaseLineQuantity);
        END;
      END;
    END;

    LOCAL PROCEDURE RetrieveILEFromShptRcpt@61(VAR TempItemLedgEntry@1010 : TEMPORARY Record 32;Type@1009 : Integer;Subtype@1008 : Integer;ID@1007 : Code[20];BatchName@1006 : Code[10];ProdOrderLine@1005 : Integer;RefNo@1004 : Integer);
    VAR
      ItemEntryRelation@1003 : Record 6507;
      ItemLedgEntry@1002 : Record 32;
      SignFactor@1000 : Integer;
    BEGIN
      // Copy of function RetrieveILEFromShptRcpt from C6500 - Item Tracking Management in NAV2013, in NAV 2016 function is located in
      // C6503 - Item Tracking Doc. Management (modified slightly - have not copied function calls not needed)
      // Function copied as it is local in C6500
      // retrieves a data set of Item Ledger Entries (Posted Shipments/Receipts)

      ItemEntryRelation.SETCURRENTKEY("Source ID","Source Type");
      ItemEntryRelation.SETRANGE("Source Type",Type);
      ItemEntryRelation.SETRANGE("Source Subtype",Subtype);
      ItemEntryRelation.SETRANGE("Source ID",ID);
      ItemEntryRelation.SETRANGE("Source Batch Name",BatchName);
      ItemEntryRelation.SETRANGE("Source Prod. Order Line",ProdOrderLine);
      ItemEntryRelation.SETRANGE("Source Ref. No.",RefNo);
      IF ItemEntryRelation.FINDSET THEN BEGIN
        REPEAT
          ItemLedgEntry.GET(ItemEntryRelation."Item Entry No.");
          TempItemLedgEntry := ItemLedgEntry;
          AddTempRecordToSet(TempItemLedgEntry,1);
        UNTIL ItemEntryRelation.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AddTempRecordToSet@16(VAR TempItemLedgEntry@1000 : TEMPORARY Record 32;SignFactor@1002 : Integer);
    VAR
      ItemTrackingMgt@6085573 : Codeunit 6500;
      TempItemLedgEntry2@1001 : TEMPORARY Record 32;
    BEGIN
      // Copy of function RetrieveILEFromShptRcpt from C6500 - Item Tracking Management in NAV2013, in NAV 2016 function is located in
      // C6503 - Item Tracking Doc. Management (modified slightly - have not copied code not needed)
      ItemTrackingMgt.RetrieveAppliedExpirationDate(TempItemLedgEntry);
      TempItemLedgEntry2 := TempItemLedgEntry;
      TempItemLedgEntry.RESET;
      TempItemLedgEntry.SETRANGE("Serial No.",TempItemLedgEntry2."Serial No.");
      TempItemLedgEntry.SETRANGE("Lot No.",TempItemLedgEntry2."Lot No.");
      TempItemLedgEntry.SETRANGE("Warranty Date",TempItemLedgEntry2."Warranty Date");
      TempItemLedgEntry.SETRANGE("Expiration Date",TempItemLedgEntry2."Expiration Date");
      IF TempItemLedgEntry.FINDFIRST THEN BEGIN
        TempItemLedgEntry.Quantity += TempItemLedgEntry2.Quantity;
        TempItemLedgEntry."Remaining Quantity" += TempItemLedgEntry2."Remaining Quantity";
        TempItemLedgEntry."Invoiced Quantity" += TempItemLedgEntry2."Invoiced Quantity";
        TempItemLedgEntry.MODIFY;
      END ELSE
        TempItemLedgEntry.INSERT;

      TempItemLedgEntry.RESET;
    END;

    PROCEDURE CkeckMatchToWithTracking@6085590(PurchOrderLine@6085573 : Record 39;MatchedToDocType@6085577 : 'Receipt,Return Shipment,Order,Return Order');
    VAR
      Item@6085576 : Record 27;
      ItemTrackingCode@6085575 : Record 6502;
      ReservEntry@6085574 : Record 337;
    BEGIN
      IF NOT (MatchedToDocType IN [MatchedToDocType::Order,MatchedToDocType::"Return Order"]) THEN
        EXIT;
      IF PurchOrderLine.Type <> PurchOrderLine.Type::Item THEN
        EXIT;

      PurchOrderLine.TESTFIELD("No.");
      Item.GET(PurchOrderLine."No.");
      IF Item."Item Tracking Code" <> '' THEN BEGIN
        ItemTrackingCode.GET(Item."Item Tracking Code");
        IF MatchedToDocType = MatchedToDocType::Order THEN BEGIN
          IF ItemTrackingCode."SN Specific Tracking" OR ItemTrackingCode."SN Purchase Inbound Tracking" OR
            ItemTrackingCode."Lot Specific Tracking" OR ItemTrackingCode."Lot Purchase Inbound Tracking"
          THEN
            ERROR(MatchToOrderWithTrackingErr);
        END ELSE BEGIN
          IF ItemTrackingCode."SN Specific Tracking" OR ItemTrackingCode."SN Purchase Outbound Tracking" OR
            ItemTrackingCode."Lot Specific Tracking" OR ItemTrackingCode."Lot Purchase Outbound Tracking"
          THEN
            ERROR(MatchToReturnWithTrackingErr);
        END;
      END;

      ReservEntry.RESET;
      ReservEntry.SETRANGE("Source Type",DATABASE::"Purchase Line");
      ReservEntry.SETRANGE("Source Subtype",PurchOrderLine."Document Type");
      ReservEntry.SETRANGE("Source ID",PurchOrderLine."Document No.");
      ReservEntry.SETRANGE("Source Ref. No.",PurchOrderLine."Line No.");
      IF NOT ReservEntry.ISEMPTY THEN
        IF MatchedToDocType = MatchedToDocType::Order THEN
          ERROR(MatchToOrderWithTrackingErr)
        ELSE
          ERROR(MatchToReturnWithTrackingErr);
    END;

    PROCEDURE ShowAllocations@6085587(PurchaseHeader@6085573 : Record 38);
    VAR
      PurchAllocationHeader@6085576 : Record 6085730;
      PurchAllocation@6085575 : Page 6085730;
      PurchAllocationList@6085574 : Page 6085732;
      DCSetup@6085577 : Record 6085573;
    BEGIN
      DCSetup.GET;
      DCSetup.TESTFIELD("Enable Purchase Allocation");

      PurchAllocationHeader.SETCURRENTKEY("Document Type","Document No.");
      // New action on page doen't use filters as default values when filter set i filtergroup 0
      PurchAllocationHeader.FILTERGROUP(2);
      PurchAllocationHeader.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchAllocationHeader.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchAllocationHeader.FILTERGROUP(0);
      IF (PurchAllocationHeader.COUNT = 1) OR ((PurchAllocationHeader.COUNT = 0) AND (NOT ISSERVICETIER)) THEN BEGIN
        PurchAllocation.SETTABLEVIEW(PurchAllocationHeader);
        PurchAllocation.RUN;
      END ELSE BEGIN
        PurchAllocationList.SETTABLEVIEW(PurchAllocationHeader);
        PurchAllocationList.RUN;
      END;
    END;

    LOCAL PROCEDURE GetLineTranslation@6085589(VAR Template@6085574 : Record 6085579;VAR Document@6085576 : Record 6085590;TranslateFrom@6085575 : Code[150];VAR DataTrans@6085573 : Record 6085584) : Boolean;
    VAR
      Field@6085580 : Record 6085580;
      ItemCrossRef@6085579 : Record 5717;
      ItemVendor@6085578 : Record 99;
      Item@6085577 : Record 27;
    BEGIN
      DataTrans.SETRANGE("Template No.",Document."Template No.");
      DataTrans.SETRANGE(Type,Field.Type::Line);
      DataTrans.SETRANGE("Field Code",'NO');
      DataTrans.SETRANGE("Translate From",COPYSTR(TranslateFrom,1,MAXSTRLEN(DataTrans."Translate From")));
      IF DataTrans.FINDFIRST THEN
        EXIT(TRUE);

      IF TranslateFrom = '' THEN
        EXIT;

      ItemCrossRef.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
      ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::Vendor);
      ItemCrossRef.SETRANGE("Cross-Reference Type No.",Document.GetSourceID);
      ItemCrossRef.SETRANGE("Cross-Reference No.",COPYSTR(TranslateFrom,1,MAXSTRLEN(ItemCrossRef."Cross-Reference No.")));
      IF ItemCrossRef.FINDFIRST THEN BEGIN
        DataTrans."Translate to Type" := DataTrans."Translate to Type"::Item;
        DataTrans."Translate to No." := ItemCrossRef."Item No.";
        DataTrans."Translate to UOM Code" := ItemCrossRef."Unit of Measure";
        DataTrans."Translate to Variant Code" := ItemCrossRef."Variant Code";
        EXIT(TRUE);
      END;

      ItemVendor.SETCURRENTKEY("Vendor No.","Vendor Item No.");
      ItemVendor.SETRANGE("Vendor No.",Document.GetSourceID);
      ItemVendor.SETRANGE("Vendor Item No.",COPYSTR(TranslateFrom,1,MAXSTRLEN(ItemVendor."Vendor Item No.")));
      IF ItemVendor.FINDFIRST THEN
        IF Item.GET(ItemVendor."Item No.") THEN BEGIN
          DataTrans."Translate to Type" := DataTrans."Translate to Type"::Item;
          DataTrans."Translate to No." := ItemVendor."Item No.";
          DataTrans."Translate to UOM Code" := Item."Purch. Unit of Measure";
          DataTrans."Translate to Variant Code" := ItemVendor."Variant Code";
          EXIT(TRUE);
      END;

      Item.SETCURRENTKEY("Vendor Item No.","Vendor No.");
      Item.SETRANGE("Vendor Item No.",COPYSTR(TranslateFrom,1,MAXSTRLEN(Item."Vendor Item No.")));
      Item.SETRANGE("Vendor No.",Document.GetSourceID);
      IF Item.FINDFIRST THEN BEGIN
        DataTrans."Translate to Type" := DataTrans."Translate to Type"::Item;
        DataTrans."Translate to No." := Item."No.";
        DataTrans."Translate to UOM Code" := Item."Purch. Unit of Measure";
        EXIT(TRUE);
      END;

      IF Template."Use Vendor/Customer Item Nos." THEN
        IF Item.GET(TranslateFrom) THEN BEGIN
          DataTrans."Translate to Type" := DataTrans."Translate to Type"::Item;
          DataTrans."Translate to No." := Item."No.";
          DataTrans."Translate to UOM Code" := Item."Purch. Unit of Measure";
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CheckOurOrderNoFilter@6085591(OurOrderNo@6085573 : Code[250]) : Boolean;
    VAR
      InvalidOrderNoFilter@6085574 : Boolean;
      i@6085575 : Integer;
    BEGIN
      IF (OurOrderNo <> '') THEN BEGIN
        IF COPYSTR(OurOrderNo,STRLEN(OurOrderNo),1) = ',' THEN
          InvalidOrderNoFilter := TRUE
        ELSE BEGIN
          FOR i := 1 TO STRLEN(OurOrderNo) DO BEGIN
            Character := OurOrderNo[i];

            IF i <> 1 THEN
              IF (Character = ',') AND (PrevCharacter = ',') THEN BEGIN
                InvalidOrderNoFilter := TRUE;
                i := STRLEN(OurOrderNo);
              END;

            PrevCharacter := OurOrderNo[i]
          END;
        END;
      END;
      EXIT(InvalidOrderNoFilter);
    END;

    BEGIN
    END.
  }
}

