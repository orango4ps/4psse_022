OBJECT Codeunit 11126714 DSP Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AanvrTxt@1100528357 : TextConst 'ENU=L-AANVRID';
      AdjustmentTxt@1100528313 : TextConst 'ENU=DSP Adjustment';
      AdjustmentWsTxt@1100528307 : TextConst 'ENU=AdjustmentWS';
      AssignmentTxt@1100528322 : TextConst 'ENU=DSP Assignment';
      AssignmentWsTxt@1100528316 : TextConst 'ENU=AssignmentWS';
      AssignmentInfoTxt@1100528377 : TextConst 'ENU=DSP AssignmentInfo';
      AssignmentInfoWsTxt@1100528378 : TextConst 'ENU=AssignmentInfoWS';
      AssignmentReadyTxt@1100528335 : TextConst 'ENU=DSP AssignmentReady';
      AssignmentReadyWsTxt@1100528334 : TextConst 'ENU=AssignmentReadyWS';
      CancellationReadyTxt@1100528309 : TextConst 'ENU=DSP CancellationReady';
      CancellationReadyWsTxt@1100528311 : TextConst 'ENU=CancellationReadyWS';
      CancellationTxt@1100528321 : TextConst 'ENU=DSP Cancellation';
      CancellationWsTxt@1100528302 : TextConst 'ENU=CancellationWS';
      CommonResponseTxt@1100528305 : TextConst 'ENU=MT_CommonResponse';
      CommonResponseNsTxt@1100528306 : TextConst 'ENU=http://dsplatform.nl/dsp/Common';
      DspRequestTxt@1100528396 : TextConst 'ENU=DSP Request';
      DspGetRequestIdTxt@1100528395 : TextConst 'ENU=DSP GetRequestID';
      DspGetRequestIdsTxt@1100528394 : TextConst 'ENU=DSP GetRequestIDs';
      DspGetRequestTxt@1100528391 : TextConst 'ENU=DSP GetRequest';
      DspGetRequestDocumentIdTxt@1100528390 : TextConst 'ENU=DSP GetRequestDocumentID';
      DspGetVersionTxt@1100528381 : TextConst 'ENU=DSP GetVersion';
      DspPartnerM10Txt@1100528315 : TextConst 'ENU=M10';
      DspPartnerOtherTxt@1100528374 : TextConst 'ENU=OTHER';
      DspTxt@1100528348 : TextConst 'ENU=DSP';
      GmfTxt@1100528355 : TextConst 'ENU=GMF';
      InterfaceWsTxt@1100528300 : TextConst 'ENU=DSPInterfaceWS';
      JudgementProductionRecordingTxt@1100528323 : TextConst 'ENU=DSP JudgementProductionRecording';
      JudgementProductionRecordingWsTxt@1100528304 : TextConst 'ENU=JudgementProductionRecordingWS';
      LipGetRequestIdsTxt@1100528385 : TextConst 'ENU=LIP GetRequestIDs';
      LipGetRequestIdTxt@1100528382 : TextConst 'ENU=LIP GetRequestID';
      LipGetRequestDocumentIdTxt@1100528375 : TextConst 'ENU=LIP GetRequestDocumentID';
      LipGetVersionTxt@1100528343 : TextConst 'ENU=LIP GetVersion';
      LIPTxt@1100528314 : TextConst 'ENU=LIP';
      MessageVersionNotSupportedTxt@1100528347 : TextConst 'ENU=Message Version %1 is not supported.';
      MimeTypeTxt@1100529908 : TextConst 'ENU=MIME';
      OK@1100528387 : TextConst 'ENU=OK;SVE=OK';
      OpdrTxt@1100529907 : TextConst 'ENU=OPDRID';
      OpgTxt@1100528337 : TextConst 'ENU=OPG';
      DspPlanningTxt@1100528320 : TextConst 'ENU=DSP Planning';
      PlanningWsTxt@1100528303 : TextConst 'ENU=PlanningWS';
      PrefAanvraagService1Txt@1100528324 : TextConst 'ENU=req1';
      PrefAanvraagService2Txt@1100528319 : TextConst 'ENU=req2';
      PrefAdministratiefGereed1Txt@1100528362 : TextConst 'ENU=adg1';
      PrefAdministratiefGereed2Txt@1100528360 : TextConst 'ENU=adg2';
      PrefAlgemeen1Txt@1100528363 : TextConst 'ENU=alg1';
      PrefAlgemeen2Txt@1100528359 : TextConst 'ENU=alg2';
      PrefAnnulering1Txt@1100528364 : TextConst 'ENU=ann1';
      PrefAnnulering2Txt@1100528358 : TextConst 'ENU=ann2';
      PrefAnnuleringGereed1Txt@1100528365 : TextConst 'ENU=ang1';
      PrefAnnuleringGereed2Txt@1100528356 : TextConst 'ENU=ang2';
      PrefBeoordelingAdministratiefGereed1Txt@1100528366 : TextConst 'ENU=bag1';
      PrefBeoordelingAdministratiefGereed2Txt@1100528353 : TextConst 'ENU=bag2';
      PrefBeoordelingTechnischGereed1Txt@1100528367 : TextConst 'ENU=btg1';
      PrefBeoordelingTechnischGereed2Txt@1100528351 : TextConst 'ENU=btg2';
      PrefBijstelling1Txt@1100528368 : TextConst 'ENU=bij1';
      PrefBijstelling2Txt@1100528350 : TextConst 'ENU=bij2';
      PrefEntiteiten1Txt@1100528349 : TextConst 'ENU=ent1';
      PrefEntiteiten2Txt@1100528346 : TextConst 'ENU=ent2';
      PrefGmfAlgemeenTxt@1100528345 : TextConst 'ENU=gmfalg';
      PrefGmfAansluitingTxt@1100528344 : TextConst 'ENU=gmfaan';
      PrefGmfObjectTxt@1100528336 : TextConst 'ENU=gmfobj';
      PrefGmfWorkorderTxt@1100528333 : TextConst 'ENU=gmfwor';
      PrefOpdracht1Txt@1100528369 : TextConst 'ENU=opd1';
      PrefOpdracht2Txt@1100528332 : TextConst 'ENU=opd2';
      PrefOpdrachtGereed1Txt@1100528370 : TextConst 'ENU=opg1';
      PrefOpdrachtGereed2Txt@1100528331 : TextConst 'ENU=opg2';
      PrefOpdrachtInfoTxt@1100528376 : TextConst 'ENU=info;SVE=Info';
      PrefPlanning1Txt@1100528371 : TextConst 'ENU=pla1';
      PrefPlanning2Txt@1100528330 : TextConst 'ENU=pla2';
      PrefPullservice1Txt@1100528329 : TextConst 'ENU=pul1';
      PrefPullservice2Txt@1100528328 : TextConst 'ENU=pul2';
      PrefStatusUpdateTxt@1100528384 : TextConst 'ENU=stup';
      PrefTechnischGereed1Txt@1100528372 : TextConst 'ENU=teg1';
      PrefTechnischGereed2Txt@1100528327 : TextConst 'ENU=teg2';
      PrefWaardeLijsten1Txt@1100528373 : TextConst 'ENU=waar1';
      PrefWaardeLijsten2Txt@1100528361 : TextConst 'ENU=waar2';
      ProcessCostPlusTxt@1100528386 : TextConst 'ENU=DSP ProcessCostPlus';
      ProcessInvoiceTxt@1100528338 : TextConst 'ENU=DSP ProcessInvoice';
      ProcessLipServiceOrderObjectTxt@1100528352 : TextConst 'ENU=LIP ProcessServiceOrderObject';
      ProcessLipServiceOrderTxt@1100528354 : TextConst 'ENU=LIP ProcessServiceOrder';
      ProcessRequestServiceOrderTxt@1100528393 : TextConst 'ENU=DSP ProcessRequestServiceOrder';
      ProcessRequestServiceOrderObjectTxt@1100528392 : TextConst 'ENU=DSP ProcessRequestServiceOrderObject';
      ProcessServiceOrderObjectTxt@1100528341 : TextConst 'ENU=DSP ProcessServiceOrderObject';
      ProcessServiceOrderTxt@1100528340 : TextConst 'ENU=DSP ProcessServiceOrder';
      ProcessSupRecordingLinesTxt@1100528339 : TextConst 'ENU=DSP ProcessSupRecordingLines';
      ProductionRecordingWsTxt@1100528308 : TextConst 'ENU=ProductionRecordingWS';
      ProductionRecordingTxt@1100528310 : TextConst 'ENU=DSP ProductionRecording';
      ResponseErrorTxt@1100528389 : TextConst 'ENU=Communication Error %1: %2';
      RequestDocumentTxt@1100528388 : TextConst 'ENU=DSP GetRequestDocument';
      StatusUpdateTxt@1100528380 : TextConst 'ENU=DSP StatusUpdate';
      StatusUpdateWsTxt@1100528383 : TextConst 'ENU=StatusUpdateWS';
      WorkOrderTxt@1100528379 : TextConst 'ENU=DSP WorkOrder';
      Text000@1100528312 : TextConst 'ENU=%1 must have a value.';
      DSPSetup@1100528342 : Record 11126726;
      GenericWebServiceNamespace@1100528326 : Record 11229383;
      ExternalDocumentManagement@1100528318 : Codeunit 11012403;
      FileManagement@1100528301 : Codeunit 419;
      Text001@1100528325 : TextConst 'ENU=%1 ''%2'' unknown.';
      ConsumedWebServiceMgt@1100528317 : Codeunit 11229310;

    PROCEDURE AddServiceTextToServiceOrder@1100528836(ServiceOrderNo@1100528801 : Code[20];TableField@1100528300 : Integer;FreeText@1100528800 : Text);
    VAR
      ServiceOrder@1100528802 : Record 11012823;
      ServiceText@1100528803 : Record 11012882;
      Comment@1100528804 : Text;
      p@1100528805 : Integer;
      NewLineNo@1100528806 : Integer;
    BEGIN
      ServiceOrder.GET(ServiceOrderNo);
      ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Order");
      ServiceText.SETRANGE("Table Field", TableField);
      ServiceText.SETRANGE("No.", ServiceOrderNo);
      IF ServiceText.FINDLAST THEN
        NewLineNo := ServiceText."Line No.";

      WHILE STRLEN(FreeText) <> 0  DO BEGIN
        IF STRLEN(FreeText) <= MAXSTRLEN(ServiceText.Comment) THEN
          p := STRLEN(FreeText)
        ELSE BEGIN
          Comment := '';
          p := MAXSTRLEN(ServiceText.Comment)+1; //+1 for first loop
          WHILE NOT(Comment IN [' ', '.', '!', '?', ';', ',', ':'])
             AND (p > 0) AND ((STRLEN(FreeText) > MAXSTRLEN(ServiceText.Comment))) DO BEGIN
            p -= 1;
            Comment := COPYSTR(FreeText, p, 1)
          END
        END;
        Comment := COPYSTR(FreeText, 1, p);
        FreeText := COPYSTR(FreeText, p+1, STRLEN(FreeText));
        NewLineNo += 10000;
        ServiceText.INIT;
        ServiceText."No." := ServiceOrderNo;
        ServiceText."Table Name" := ServiceText."Table Name"::"Service Order";
        ServiceText."Table Field" := TableField;
        ServiceText."Line No."  := NewLineNo;
        ServiceText.Date  := TODAY;
        ServiceText.Comment := Comment;
        ServiceText."Active in FSA" := TRUE;
        ServiceText.INSERT(TRUE);
      END;
    END;

    PROCEDURE AddStatusUpdateAgp@1100528426(SUPProduction@1100528300 : Record 11071773);
    VAR
      DSPAssignment@1100528302 : Record 11126740;
      DSPStatusUpdate@1100528301 : Record 11126763;
    BEGIN
      SUPProduction.CALCFIELDS("Dsp Assignment Id");
      GetDspAssignmentByAssignmentId(SUPProduction."Dsp Assignment Id", DSPAssignment);
      DSPSetup.GET;
      CASE SUPProduction.Status OF
        SUPProduction.Status::Approved: BEGIN
          DSPStatusUpdate.AddRecord(SUPProduction."Service Order No.", SUPProduction."Object No.",
            DSPStatusUpdate."Message Type"::AGP, DSPStatusUpdate.Status::Approved);
          UpdateReferencePoint(SUPProduction."Object No.", DSPSetup."Ref. Point Agp Approved");
        END;
        SUPProduction.Status::Offered: BEGIN
          DSPStatusUpdate.AddRecord(SUPProduction."Service Order No.", SUPProduction."Object No.",
            DSPStatusUpdate."Message Type"::AGP, DSPStatusUpdate.Status::Submitted);
          UpdateReferencePoint(SUPProduction."Object No.", DSPSetup."Ref. Point Agp Submitted");
        END;
        SUPProduction.Status::Rejected: BEGIN
          DSPStatusUpdate.AddRecord(SUPProduction."Service Order No.", SUPProduction."Object No.",
            DSPStatusUpdate."Message Type"::AGP, DSPStatusUpdate.Status::Denied);
          UpdateReferencePoint(SUPProduction."Object No.", DSPSetup."Ref. Point Agp Denied");
        END;
      END;
    END;

    PROCEDURE CheckResponseFault@1100528439(DnXmlDocument@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      ResultCode@1100528300 : Text;
    BEGIN
      //ResultCode is not present in all Responses
      ResultCode := FindNodeResponseCode(DnXmlDocument);
      IF (ResultCode = '999') THEN
        ERROR(ResponseErrorTxt, ResultCode,
          XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="Result"]/*[local-name()="ResultText"]'));
    END;

    PROCEDURE ConstructContactName@1100525057(Salutation@1100528801 : Text;Initials@1100525000 : Text;MiddleName@1100525001 : Text;LastName@1100528800 : Text) : Text;
    VAR
      ContactName@1100528802 : Text;
    BEGIN
      IF Salutation <> '' THEN
        ContactName += Salutation + ' ';
      IF Initials <> '' THEN
        ContactName += Initials + ' ';
      IF MiddleName <> '' THEN
        ContactName += MiddleName + ' ';
      IF LastName <> '' THEN
        ContactName += LastName;
      EXIT(ContactName);
    END;

    PROCEDURE CreateConnection@1100528313(VAR DnBasicHttpBinding@1100528308 : DotNet "'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ServiceModel.BasicHttpBinding";VAR DnClientCredentials@1100528309 : DotNet "'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ServiceModel.Description.ClientCredentials";VAR DnEndPointAddress@1100528306 : DotNet "'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ServiceModel.EndpointAddress";ConsumedWebService@1100528310 : Record 11229797);
    VAR
      DSPSetup@1100528305 : Record 11126726;
      ApplicationSystemConstants@1100528300 : Codeunit 9015;
      DnWSMessageEncoding@1100528303 : DotNet "'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ServiceModel.WSMessageEncoding";
      DnBasicHttpSecurityMode@1100528302 : DotNet "'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ServiceModel.BasicHttpSecurityMode";
      DnHttpClientCredentialType@1100528301 : DotNet "'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.ServiceModel.HttpClientCredentialType";
      DnNetworkCredential@1100528304 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      DnUri@1100528307 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
    BEGIN
      DSPSetup.GET;
      ConsumedWebService.TESTFIELD(Login);
      ConsumedWebService.TESTFIELD(Password);
      ConsumedWebService.TESTFIELD("Web Service URL");

      DnBasicHttpBinding := DnBasicHttpBinding.BasicHttpBinding;
      DnBasicHttpBinding.Name := ApplicationSystemConstants.ApplicationVersion;
      DnBasicHttpBinding.MaxReceivedMessageSize := 2147483647;
      DnBasicHttpBinding.MessageEncoding := DnWSMessageEncoding.Mtom;
      IF (STRPOS(DSPSetup."Web Service Url OLD", 'https://') = 1) THEN
        DnBasicHttpBinding.Security.Mode := DnBasicHttpSecurityMode.Transport
      ELSE
        DnBasicHttpBinding.Security.Mode := DnBasicHttpSecurityMode.TransportCredentialOnly;

      IF (DSPSetup."Web Proxy Url OLD" <> '') THEN BEGIN
        DnUri := DnUri.Uri(DSPSetup."Web Proxy Url OLD");
        DnBasicHttpBinding.UseDefaultWebProxy(FALSE);
        DnBasicHttpBinding.ProxyAddress(DnUri);
      END;

      DnClientCredentials := DnClientCredentials.ClientCredentials;
      CASE DSPSetup."Connection Type" OF
        DSPSetup."Connection Type"::Basic:  BEGIN
          DnBasicHttpBinding.Security.Transport.ClientCredentialType := DnHttpClientCredentialType.Basic;
          DnClientCredentials.UserName.UserName := DSPSetup."User Name OLD";
          DnClientCredentials.UserName.Password := DSPSetup."Password OLD";
        END;
        DSPSetup."Connection Type"::Kerberos: BEGIN
          DnBasicHttpBinding.Security.Transport.ClientCredentialType := DnHttpClientCredentialType.Windows;
          DnNetworkCredential := DnNetworkCredential.NetworkCredential(DSPSetup."User Name OLD", DSPSetup."Password OLD");
          DnClientCredentials.Windows.ClientCredential := DnNetworkCredential;
        END;
        DSPSetup."Connection Type"::NTLM: BEGIN
          DnBasicHttpBinding.Security.Transport.ClientCredentialType := DnHttpClientCredentialType.Ntlm;
          DnNetworkCredential := DnNetworkCredential.NetworkCredential(DSPSetup."User Name OLD", DSPSetup."Password OLD");
          DnClientCredentials.Windows.ClientCredential := DnNetworkCredential;
        END;
        ELSE
          ERROR(Text001, DSPSetup.FIELDCAPTION("Connection Type"), DSPSetup."Connection Type");
      END;
      DnEndPointAddress := DnEndPointAddress.EndpointAddress(DSPSetup."Web Service Url OLD");
    END;

    PROCEDURE CreateDocument@1100528305(DnXmlDocument@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";RecId@1100528303 : RecordID;BaseXpath@1100528300 : Text) : Code[20];
    VAR
      DocumentProperties@1100528308 : Record 11012746;
      FileManagement@1100528307 : Codeunit 419;
      DocumentManagement@1100528317 : Codeunit 11012406;
      StringFunctions@1100528306 : Codeunit 11012273;
      XMLDOMManagement@1100528301 : Codeunit 6224;
      DocNo@1100528305 : Code[20];
      EntityKey@1100528302 : ARRAY [10] OF Code[20];
      FileName@1100528311 : Text;
      FullFilePath@1100528315 : Text;
      DnConvert@1100528310 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      DnFile@1100528309 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
    BEGIN
      IF (XmlDocFindNodeText(DnXmlDocument, BaseXpath + '//*[local-name()="Bijlage"]') = '') THEN
        EXIT;

      FileName := STRSUBSTNO('%1.%2',XmlDocFindNodeText(DnXmlDocument, BaseXpath + '//*[local-name()="Bestandsnaam"]'),
        XmlDocFindNodeText(DnXmlDocument, BaseXpath + '//*[local-name()="Extensie"]'));
      DocNo := ExternalDocumentManagement.AddExternalDocumentWithContent(RecId.GETRECORD,
        FileName,
        XmlDocFindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Bijlage"]'),
          '', '',
        GetDocumentType(XmlDocFindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Documentsoort"]')),
        '',
        XmlDocFindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Omschrijving"]'),
        '', '', TODAY, TODAY, TODAY, 0, '');

      DocumentProperties.GET(DocNo);
      DocumentProperties."Document No." := COPYSTR(XmlDocFindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="BijlageID"]'),
        1, STRLEN(DocumentProperties."Document No."));
      DocumentProperties.Subject := XmlDocFindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Documentsoort"]');
      IF (XmlDocFindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Extensie"]') <> '') THEN
        DocumentProperties."File Extension" := STRSUBSTNO('.%1',
        XmlDocFindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Extensie"]'));
      DocumentProperties."Version External Doc." := XmlDocFindNodeText(DnXmlDocument, BaseXpath + '/*[local-name()="Versienummer"]');
      DocumentProperties."Document Type" := GetDocumentType(DocumentProperties.Subject);
      DocumentProperties.MODIFY;

      EXIT(DocNo);
    END;

    PROCEDURE CreateNewTask@1100525003(MethodName@1100525001 : Text;RelatedRecordId@1100529900 : RecordID;DirectionIn@1100529901 : Option;CompanyNameIn@1100528300 : Text) : BigInteger;
    VAR
      GenericWebServiceQueue@1100528301 : Record 11126715;
    BEGIN
      GenericWebServiceQueue.CreateNewQueueEntry(MethodName, RelatedRecordId, DirectionIn, CompanyNameIn);
      EXIT(GenericWebServiceQueue."Entry No.");
    END;

    PROCEDURE CreateXmlNamespaceManager@1100528327(VAR DnXmlNamespaceManager@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager");
    VAR
      GenericWebServiceNamespace@1100528302 : Record 11229383;
      DnXmlDocument@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      DnXmlNamespaceManager := DnXmlNamespaceManager.XmlNamespaceManager(DnXmlDocument.XmlDocument.NameTable);
      GenericWebServiceNamespace.SETRANGE("Connector Type", '');
      IF (GenericWebServiceNamespace.FINDSET) THEN
        REPEAT
          DnXmlNamespaceManager.AddNamespace(GenericWebServiceNamespace.Prefix, GenericWebServiceNamespace.Namespace);
        UNTIL (GenericWebServiceNamespace.NEXT = 0);
      GenericWebServiceNamespace.SETRANGE("Connector Type", GetTcDsp);
      IF (GenericWebServiceNamespace.FINDSET) THEN
        REPEAT
          DnXmlNamespaceManager.AddNamespace(GenericWebServiceNamespace.Prefix, GenericWebServiceNamespace.Namespace);
        UNTIL (GenericWebServiceNamespace.NEXT = 0);
    END;

    PROCEDURE CreateDnBijlageXopType@1100528301(DocumentProperties@1100528300 : Record 11012746;VAR DnXmlRootNode@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NamespacePrefix@1100528302 : Text);
    VAR
      XMLDOMManagement@1100528304 : Codeunit 6224;
      DnXmlChildNode@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DnXmlNode@1100528305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF (DocumentProperties.File = '') THEN
        EXIT;

      XMLDOMManagement.AddElement(DnXmlRootNode, 'Bijlagen', '', NamespacePrefix, DnXmlChildNode);
      XMLDOMManagement.AddElement(DnXmlChildNode, 'BijlageID', DocumentProperties."No.", NamespacePrefix, DnXmlNode);
      XMLDOMManagement.AddElement(DnXmlChildNode, 'Bestandsnaam', FileManagement.GetFileNameWithoutExtension(DocumentProperties.File), NamespacePrefix, DnXmlNode);
      XMLDOMManagement.AddElement(DnXmlChildNode, 'Extensie', FileManagement.GetExtension(DocumentProperties.File), NamespacePrefix, DnXmlNode);
      XMLDOMManagement.AddElement(DnXmlChildNode, 'Omschrijving', DocumentProperties.Description, NamespacePrefix, DnXmlNode);
      XMLDOMManagement.AddElement(DnXmlChildNode, 'Documentsoort', GetDocumentSoort(DocumentProperties."Document Type"), NamespacePrefix, DnXmlNode);
      //XMLDOMManagement.AddElement(DnXmlChildNode, 'MIMEType', GetMimeTypeTxt, NamespacePrefix, DnXmlNode);
      XMLDOMManagement.AddElement(DnXmlChildNode, 'Versienummer', FORMAT(DocumentProperties.Version, 0, 9), NamespacePrefix, DnXmlNode);
      XMLDOMManagement.AddElement(DnXmlChildNode, 'Bijlage', GetDocumetContent(DocumentProperties."No."), NamespacePrefix, DnXmlNode);
    END;

    PROCEDURE CreateTEMPServiceObject@1100528393(DspAssignmentEntryNo@1100528800 : BigInteger;VAR TEMPServiceOrderObject@1100528801 : TEMPORARY Record 11071724);
    VAR
      DSPAssignment@1100528803 : Record 11126740;
      DnXmlDocument@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      DSPAssignment.GET(DspAssignmentEntryNo);
      DSPAssignment.GetXmlMessage(DnXmlDocument);

      TEMPServiceOrderObject.INIT;
      TEMPServiceOrderObject."Service Order No." := DSPAssignment."Service Order No.";
      TEMPServiceOrderObject."Object No." := DSPAssignment."Object No.";

      TEMPServiceOrderObject.INSERT;
    END;

    PROCEDURE CreateTEMPServiceOrder@1100528828(DspAssignmentEntryNo@1100528800 : BigInteger;VAR TEMPServiceOrder@1100528801 : TEMPORARY Record 11012823);
    VAR
      DSPAssignment@1100528803 : Record 11126740;
      DnXmlDocument@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      DSPAssignment.GET(DspAssignmentEntryNo);
      DSPAssignment.GetXmlMessage(DnXmlDocument);

      TEMPServiceOrder.INIT;
      TEMPServiceOrder."No." := DSPAssignment."Service Order No.";
      TEMPServiceOrder."Dsp Cluster Id" := XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="ClusterID"]');
      TEMPServiceOrder."Dsp Connection Object Id" := GetConnectionObjectId(
        XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Postcode"]'),
        XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Huisnummer"]'),
        XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Toevoeging"]'));
      TEMPServiceOrder."Post Code" := XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Postcode"]');
      TEMPServiceOrder.Address := STRSUBSTNO('%1 %2 %3', XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Straat"]'),
        XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Huisnummer"]'),
        XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Toevoeging"]'));
      TEMPServiceOrder.City := XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Adres"]/*[local-name()="Plaats"]');
      TEMPServiceOrder."Contact Name" := ConstructContactName(
        XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Aanhef"]'),
        XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Voorletters"]'),
        XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Tussenvoegsel"]'),
        XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Achternaam"]'));
      TEMPServiceOrder."E-Mail" := XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Emailadres"]');
      TEMPServiceOrder."Phone No." := XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Telefoonnummer"]');
      TEMPServiceOrder."Mobile Phone No." :=  XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Mobielnummer"]');
      TEMPServiceOrder.Description := COPYSTR(DSPAssignment."Work Connection", 1, MAXSTRLEN(TEMPServiceOrder.Description));
      TEMPServiceOrder."Description 2" := COPYSTR(XmlDocFindNodeText(DnXmlDocument, '//*[local-name()="Leveradres"]/*[local-name()="Aansluiting"]/*[local-name()="TypeAansluiting"]'),
        1, MAXSTRLEN(TEMPServiceOrder."Description 2"));

      TEMPServiceOrder.INSERT;
    END;

    PROCEDURE CreateTEMPServiceText@1100528822(DSPAssignmentEntryNo@1100528800 : BigInteger;VAR TEMPServiceText@1100528801 : TEMPORARY Record 11012882);
    VAR
      DSPAssignment@1100528802 : Record 11126740;
      ServiceOrder@1100528803 : Record 11012823;
      Comment@1100528807 : Text;
      p@1100528806 : Integer;
      NewLineNo@1100528805 : Integer;
      FreeText@1100528804 : Text;
      DnXmlDocument@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DnXmlNamespaceManager@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
    BEGIN
      DSPAssignment.GET(DSPAssignmentEntryNo);
      DSPAssignment.GetXmlMessage(DnXmlDocument);
      ServiceOrder.GET(DSPAssignment."Service Order No.");

      FreeText := STRSUBSTNO('%1  %2', FindNodeOpmerkingOpmerkingReden(DnXmlDocument), FindNodeOpmerkingToelichting(DnXmlDocument));

      WHILE STRLEN(FreeText) <> 0  DO BEGIN
        IF STRLEN(FreeText) <= 80 THEN
          p := STRLEN(FreeText)
        ELSE BEGIN
          Comment := '';
          p := MAXSTRLEN(TEMPServiceText.Comment)+1; //+1 for first loop
          WHILE NOT(Comment IN [' ','.','!','?',';',',',':'])
             AND (p > 0) AND ((STRLEN(FreeText) > 80)) DO BEGIN
            p -= 1;
            Comment := COPYSTR(FreeText,p,1)
          END
        END;
        Comment := COPYSTR(FreeText, 1, p);
        FreeText := COPYSTR(FreeText,p+1,STRLEN(FreeText));
        NewLineNo += 10000;
        TEMPServiceText.INIT;
        TEMPServiceText."No." := ServiceOrder."No.";
        TEMPServiceText."Table Name" := TEMPServiceText."Table Name"::"Service Order";
        TEMPServiceText."Table Field" := 90;
        TEMPServiceText."Line No."  := NewLineNo;
        TEMPServiceText.Comment := Comment;
        TEMPServiceText."Active in FSA" := TRUE;
        TEMPServiceText.INSERT;
      END;
    END;

    PROCEDURE CreateTEMPSUPRecordingLines@1100528826(DSPAssignmentEntryNo@1100525003 : BigInteger;VAR TEMPSUPRecordingLine@1100528806 : TEMPORARY Record 11071772);
    VAR
      DSPAssignment@1100528801 : Record 11126740;
      ServiceOrder@1100528804 : Record 11012823;
      ServiceOrderExtension@1100528803 : Record 11071727;
      SUPRecordingLine@1100528307 : Record 11071772;
      XMLDOMManagement@1100528308 : Codeunit 6224;
      Counter@1100528304 : Integer;
      LineNo@1100528800 : Integer;
      NodeCount@1100528303 : Integer;
      Quantity@1100528306 : Decimal;
      Xpath@1100528302 : Text;
      XpathForLoop@1100528305 : Text;
      DnXmlDocument@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DnXmlNamespaceManager@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
    BEGIN
      DSPAssignment.GET(DSPAssignmentEntryNo);
      DSPAssignment.GetXmlMessage(DnXmlDocument);
      ServiceOrder.GET(DSPAssignment."Service Order No.");
      IF (NOT ServiceOrderExtension.GET(ServiceOrder."No.")) THEN
        EXIT;
      IF (ServiceOrderExtension."Price Book Code" = '') THEN
        EXIT;

      Xpath := '//*[local-name()="Opdrachtbericht"]/*[local-name()="Opdrachtregel"]';
      NodeCount := XMLDOMManagement.FindNodeCount(DnXmlDocument, Xpath);
      IF (NodeCount = 0) THEN EXIT;

      SUPRecordingLine.SETRANGE("Service Order No.", ServiceOrder."No.");
      SUPRecordingLine.SETRANGE("Object No.", DSPAssignment."Object No.");
      IF (NOT SUPRecordingLine.FINDSET) THEN
        SUPRecordingLine.INIT;

      LineNo := 10000;
      FOR Counter := 1 TO NodeCount DO BEGIN
        XpathForLoop := STRSUBSTNO('%1[%2]', Xpath, Counter);
        TEMPSUPRecordingLine.INIT;
        TEMPSUPRecordingLine."Service Order No." := ServiceOrder."No.";
        TEMPSUPRecordingLine."Line No." := LineNo;
        TEMPSUPRecordingLine.Description := COPYSTR(XmlDocFindNodeText(DnXmlDocument, XpathForLoop + '/*[local-name()="Omschrijving"]'),
          1, MAXSTRLEN(TEMPSUPRecordingLine.Description));
        TEMPSUPRecordingLine."Price Book Type" := ServiceOrder."Price Book Type";
        TEMPSUPRecordingLine."Price Book Code" := ServiceOrderExtension."Price Book Code";
        TEMPSUPRecordingLine."Index Date" := ServiceOrderExtension."Price Book Index Date";
        CASE TRUE OF
          (GetDspVersionFirst(TRUE)  = DSPAssignment."Version No."):
            TEMPSUPRecordingLine."Unit Price Code" := XmlDocFindNodeText(DnXmlDocument, XpathForLoop + '/*[local-name()="Opdrachtregel"]');
          (GetDspVersionSecond(TRUE)  = DSPAssignment."Version No."):
            TEMPSUPRecordingLine."Unit Price Code" := XmlDocFindNodeText(DnXmlDocument, XpathForLoop + '/*[local-name()="Bestekcode"]');
          ELSE ERROR(Text000, DSPAssignment.FIELDCAPTION("Version No."), DSPAssignment."Version No.");
        END;
        EVALUATE(Quantity, XmlDocFindNodeText(DnXmlDocument, XpathForLoop + '/*[local-name()="Aantal"]'), 9);
        TEMPSUPRecordingLine."Recording Quantity" := Quantity;
        TEMPSUPRecordingLine."Object No." := DSPAssignment."Object No.";
        TEMPSUPRecordingLine."Unit Price" := SUPRecordingLine."Unit Price";
        TEMPSUPRecordingLine."Unit of Measure" := SUPRecordingLine."Unit of Measure";
        TEMPSUPRecordingLine.INSERT;
        LineNo += 10000;
        IF (SUPRecordingLine.NEXT = 0) THEN
          SUPRecordingLine.INIT;
      END;
    END;

    PROCEDURE DebugLoadXML@1100528474(DSPSetup@1100528301 : Record 11126726;VAR Object@1100528302 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";FileName@1100528303 : Text);
    VAR
      DotnetFunctions@1100528300 : Codeunit 11126712;
    BEGIN
      IF (DSPSetup.Debug) THEN BEGIN
        FileName := 'C:\Users\Public\Documents\' + FileName;
        DotnetFunctions.DeSerializeFromFile(Object, FileName);
      END;
    END;

    PROCEDURE DebugSaveXml@1100528475(DSPSetup@1100528303 : Record 11126726;VAR Object@1100528302 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";FileName@1100528301 : Text);
    VAR
      DotnetFunctions@1100528300 : Codeunit 11126712;
    BEGIN
      IF (DSPSetup.Debug) THEN BEGIN
        FileName := 'C:\Users\Public\Documents\' + FileName;
        DotnetFunctions.SerializeToFile(Object, FileName);
      END;
    END;

    PROCEDURE ExistLipServiceOrderObject@1100528377(DSPLIPRequestLine@1100528300 : Record 11126756;OperatorText@1100528302 : Text) : Boolean;
    BEGIN
      EXIT(GetLipServiceOrderObjectNo(DSPLIPRequestLine) <> '');
    END;

    PROCEDURE ExistServiceOrder@1100528328(ConnectionObjectId@1100528300 : Text;ClusterId@1100528301 : Text) : Boolean;
    BEGIN
      EXIT(GetServiceOrderNo(ConnectionObjectId, ClusterId) <> '');
    END;

    PROCEDURE ExistServiceOrderObject@1100528303(DSPAssignment@1100528300 : Record 11126740) : Boolean;
    BEGIN
      EXIT(DSPAssignment."Object No." <> '');
    END;

    PROCEDURE FindNodeContactpersoonKlantMobielnummer@1100528507(XmlDocument@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") Telefoonnummer : Text;
    BEGIN
      Telefoonnummer := XmlDocFindNodeText(XmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Mobielnummer"]');
    END;

    PROCEDURE FindNodeContactpersoonKlantTelefoonnummer@1100528519(XmlDocument@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") Telefoonnummer : Text;
    BEGIN
      Telefoonnummer := XmlDocFindNodeText(XmlDocument, '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Telefoonnummer"]');
    END;

    PROCEDURE FindNodeOpmerkingOpmerkingReden@1100528518(XmlDocument@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") OpmerkingReden : Text;
    BEGIN
      OpmerkingReden := XmlDocFindNodeText(XmlDocument, '//*[local-name()="Opmerking"]/*[local-name()="OpmerkingReden"]');
    END;

    PROCEDURE FindNodeOpmerkingToelichting@1100528517(XmlDocument@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") Toelichting : Text;
    BEGIN
      Toelichting := XmlDocFindNodeText(XmlDocument, '//*[local-name()="Opmerking"]/*[local-name()="Toelichting"]');
    END;

    PROCEDURE FindNodeMessageVersion@1100528516(XmlDocument@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") MessageVersion : Text;
    BEGIN
      MessageVersion := XmlDocFindNodeText(XmlDocument, '//*[local-name()="MessageVersion"]');
    END;

    PROCEDURE FindNodeAanvraagID@1100528515(XmlDocument@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") AanvraagID : Text;
    BEGIN
      AanvraagID := XmlDocFindNodeText(XmlDocument, '//*[local-name()="AanvraagID"]');
    END;

    PROCEDURE FindNodeResponseCode@1100528514(XmlDocument@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") ResponseCode : Text;
    BEGIN
      ResponseCode := XmlDocFindNodeText(XmlDocument, '//*[local-name()="Result"]/*[local-name()="ResultCode"]');
      IF ResponseCode = '' THEN
        ResponseCode := XmlDocFindNodeText(XmlDocument, '//*[local-name()="ResponseCode"]');
    END;

    PROCEDURE GetCommonResponse@1100528476(GenericWebServiceQueue@1100528301 : Record 11126715;DspAssignmentId@1100528302 : Text) CommonResponse : Text;
    BEGIN
      CommonResponse := '<MT_CommonResponse xmlns:xsd="http://www.w3.org/2001/XMLSchema" ' +
        'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://dsplatform.nl/dsp/Common">' +
        '<OpdrachtID xmlns="">%1</OpdrachtID><ResponseCode xmlns="">%2</ResponseCode><MessageID xmlns="">%3</MessageID>' +
        '</MT_CommonResponse>';
      CommonResponse := STRSUBSTNO(CommonResponse, DspAssignmentId, OK, FORMAT(GenericWebServiceQueue."Entry No."));
    END;

    PROCEDURE GetAdjustmentWs@1100528315(VAR RootElement@1100528301 : Text;VAR RootElementNamespace@1100528300 : Text;VersionTxt@1100528303 : Text);
    VAR
      GenericWebServRouterLine@1100528302 : Record 11229382;
    BEGIN
      IF (NOT GenericWebServRouterLine.GET(GetTcDspInterfaceWs, GetTcAdjustmentWs + VersionTxt, VersionTxt)) THEN
        GenericWebServRouterLine.INIT;
      RootElement := GenericWebServRouterLine."Root Element";
      RootElementNamespace := GenericWebServRouterLine."Root Element Namespace";
    END;

    PROCEDURE GetAssignmentWs@1100528311(VAR RootElement@1100528301 : Text;VAR RootElementNamespace@1100528300 : Text;VersionTxt@1100528303 : Text);
    VAR
      GenericWebServRouterLine@1100528302 : Record 11229382;
    BEGIN
      IF (NOT GenericWebServRouterLine.GET(GetTcDspInterfaceWs, GetTcAssignmentWs + VersionTxt, VersionTxt)) THEN
        GenericWebServRouterLine.INIT;
      RootElement := GenericWebServRouterLine."Root Element";
      RootElementNamespace := GenericWebServRouterLine."Root Element Namespace";
    END;

    PROCEDURE GetAssignmentInfoWs@1100528422(VAR RootElement@1100528301 : Text;VAR RootElementNamespace@1100528300 : Text;VersionTxt@1100528303 : Text);
    VAR
      GenericWebServRouterLine@1100528302 : Record 11229382;
    BEGIN
      IF (NOT GenericWebServRouterLine.GET(GetTcDspInterfaceWs, GetTcAssignmentInfoWs + VersionTxt, VersionTxt)) THEN
        GenericWebServRouterLine.INIT;
      RootElement := GenericWebServRouterLine."Root Element";
      RootElementNamespace := GenericWebServRouterLine."Root Element Namespace";
    END;

    PROCEDURE GetAssignmentReadyWs@1100528354(VAR RootElement@1100528301 : Text;VAR RootElementNamespace@1100528300 : Text;VersionTxt@1100528303 : Text);
    VAR
      GenericWebServRouterLine@1100528302 : Record 11229382;
    BEGIN
      IF (NOT GenericWebServRouterLine.GET(GetTcDspInterfaceWs, GetTcAssignmentReadyWs + VersionTxt, VersionTxt)) THEN
        GenericWebServRouterLine.INIT;
      RootElement := GenericWebServRouterLine."Root Element";
      RootElementNamespace := GenericWebServRouterLine."Root Element Namespace";
    END;

    PROCEDURE GetCancellationReadyWs@1100528320(VAR RootElement@1100528301 : Text;VAR RootElementNamespace@1100528300 : Text;VersionTxt@1100528303 : Text);
    VAR
      GenericWebServRouterLine@1100528302 : Record 11229382;
    BEGIN
      IF (NOT GenericWebServRouterLine.GET(GetTcDspInterfaceWs, GetTcCancellationReadyWs + VersionTxt, VersionTxt)) THEN
        GenericWebServRouterLine.INIT;
      RootElement := GenericWebServRouterLine."Root Element";
      RootElementNamespace := GenericWebServRouterLine."Root Element Namespace";
    END;

    PROCEDURE GetCancellationWs@1100528322(VAR RootElement@1100528301 : Text;VAR RootElementNamespace@1100528300 : Text;VersionTxt@1100528303 : Text);
    VAR
      GenericWebServRouterLine@1100528302 : Record 11229382;
    BEGIN
      IF (NOT GenericWebServRouterLine.GET(GetTcDspInterfaceWs, GetTcCancellationWs + VersionTxt, VersionTxt)) THEN
        GenericWebServRouterLine.INIT;
      RootElement := GenericWebServRouterLine."Root Element";
      RootElementNamespace := GenericWebServRouterLine."Root Element Namespace";
    END;

    PROCEDURE GetCompanyNameByAgreementNo@1100525024(AgreementNo@1100525001 : Text) : Text[30];
    VAR
      DSPAgreementSettings@1100525000 : Record 11126725;
    BEGIN
      DSPAgreementSettings.GET(AgreementNo);
      EXIT(DSPAgreementSettings."Company Name");
    END;

    PROCEDURE GetCompanyNameByServiceCode@1100528375(ConsumedWebServiceCode@1100525001 : Code[20]) : Text;
    VAR
      DSPAgreementSettings@1100525000 : Record 11126725;
    BEGIN
      DSPAgreementSettings.SETRANGE("Consumed Web Service Code", ConsumedWebServiceCode);
      DSPAgreementSettings.FINDFIRST;
      EXIT(DSPAgreementSettings."Company Name");
    END;

    PROCEDURE GetCompanyNameByServiceAreaContractCode@1100528450(ServiceAreaContractCode@1100525001 : Text) : Text;
    VAR
      DSPAgreementSettings@1100525000 : Record 11126725;
    BEGIN
      GetDspAgreementSettingByServiceAreaContractCode(ServiceAreaContractCode, DSPAgreementSettings);
      EXIT(DSPAgreementSettings."Company Name");
    END;

    PROCEDURE GetConnectionObjectId@1100528325(PostalCode@1100528300 : Text;HouseNo@1100528301 : Text;HouseNoExtension@1100528302 : Text) : Text;
    VAR
      DSPAssignment@1100528303 : Record 11126740;
    BEGIN
      IF (HouseNoExtension <> '') THEN
        EXIT(UPPERCASE(COPYSTR(DELCHR(STRSUBSTNO('%1%2-%3',PostalCode, HouseNo, HouseNoExtension), '<=>'),
          1, MAXSTRLEN(DSPAssignment."Connection Object Id"))))
      ELSE
        EXIT(UPPERCASE(COPYSTR(DELCHR(STRSUBSTNO('%1%2',PostalCode, HouseNo), '<=>'),
          1, MAXSTRLEN(DSPAssignment."Connection Object Id"))));
    END;

    PROCEDURE GetConsumedWebServiceLineByVersion@1100528376(DspAssingnmentVersionNo@1100528302 : Text;SeqNo@1100528303 : Integer;VAR ConsumedWebServiceLine@1100528304 : Record 11229798);
    VAR
      ServiceName@1100528300 : Text;
      VersionTxt@1100528301 : Text;
    BEGIN
      VersionTxt := GetDspVersionAsText(DspAssingnmentVersionNo);
      ServiceName := GetDspPartnerServiceName(VersionTxt);
      ConsumedWebServiceLine.GET(ServiceName, SeqNo);
    END;

    PROCEDURE GetConsumedWebServiceRootTag@1100528332(WebServiceCode@1100528301 : Code[20];SeqNo@1100528302 : Integer) : Text;
    VAR
      ConsumedWebServiceLine@1100528300 : Record 11229798;
    BEGIN
      IF (NOT ConsumedWebServiceLine.GET(WebServiceCode, SeqNo)) THEN
        ConsumedWebServiceLine.INIT;
      EXIT(ConsumedWebServiceLine."Request Root Tag");
    END;

    PROCEDURE GetCustomerNo@1100528815(OperatorText@1100528800 : Text[30]) : Code[20];
    VAR
      DSPOperator@1100528801 : Record 11126732;
    BEGIN
      DSPOperator.GET(OperatorText);
      EXIT(DSPOperator."Customer No.");
    END;

    PROCEDURE GetServiceOrderDspOrderType@1100528802(ServiceOrderNo@1100528800 : Code[20]) : Code[20];
    VAR
      ServiceOrder@1100528302 : Record 11012823;
      ServiceOrderObject@1100528303 : Record 11071724;
      DSPServiceObject@1100528301 : Record 11126722;
      OrderType@1100528300 : Code[20];
    BEGIN
      OrderType := '';
      ServiceOrderObject.SETRANGE("Service Order No.", ServiceOrderNo);
      IF (NOT ServiceOrderObject.FINDSET) THEN
        EXIT(OrderType);

      REPEAT
        DSPServiceObject.SETRANGE("Standard Object No.", ServiceOrderObject."Standard Object No.");
        IF (DSPServiceObject.FINDFIRST) THEN BEGIN
          CASE DSPServiceObject.Discipline OF
            DSPServiceObject.Discipline::Electra: FillDspOrderType(OrderType, 'E');
            DSPServiceObject.Discipline::Gas: FillDspOrderType(OrderType, 'G');
            DSPServiceObject.Discipline::Water: FillDspOrderType(OrderType, 'W');
            DSPServiceObject.Discipline::Glass: FillDspOrderType(OrderType, 'MG');
            DSPServiceObject.Discipline::CAI: FillDspOrderType(OrderType, 'MC');
            DSPServiceObject.Discipline::Copper: FillDspOrderType(OrderType, 'MK');
          END;
        END;
      UNTIL (ServiceOrderObject.NEXT = 0);
      EXIT(COPYSTR(OrderType, 1, MAXSTRLEN(ServiceOrder."Dsp Order Type")));
    END;

    PROCEDURE GetSeqNoAddWorkOrder@1100528465() : Integer;
    BEGIN
      EXIT(20);
    END;

    PROCEDURE GetSeqNoAgProductieStaat@1100528464() : Integer;
    BEGIN
      EXIT(130);
    END;

    PROCEDURE GetSeqNoAnnuleringGereed@1100528462() : Integer;
    BEGIN
      EXIT(120);
    END;

    PROCEDURE GetSeqNoAssignmentInfo@1100528461() : Integer;
    BEGIN
      EXIT(10);
    END;

    PROCEDURE GetSeqNoBijstelling@1100528460() : Integer;
    BEGIN
      EXIT(110);
    END;

    PROCEDURE GetSeqNoOphalenAanvraag@1100528472() : Integer;
    BEGIN
      EXIT(20);
    END;

    PROCEDURE GetSeqNoOphalenAanvraagIds@1100528459() : Integer;
    BEGIN
      EXIT(10);
    END;

    PROCEDURE GetSeqNoOphalenBijlage@1100528471() : Integer;
    BEGIN
      EXIT(30);
    END;

    PROCEDURE GetSeqNoPlanning@1100528463() : Integer;
    BEGIN
      EXIT(140);
    END;

    PROCEDURE GetSeqNoServiceVersion@1100528473() : Integer;
    BEGIN
      EXIT(40);
    END;

    PROCEDURE GetDiscipline@1100528449(DisciplineCode@1100528302 : Code[20];OperatorCode@1100528301 : Text) : Integer;
    VAR
      DSPLIPDisciplineOperator@1100528300 : Record 11126729;
    BEGIN
      DSPLIPDisciplineOperator.SETFILTER(Code, '%1', '@'+DisciplineCode);
      DSPLIPDisciplineOperator.SETFILTER(Operator, '%1', '@'+OperatorCode);
      IF (DSPLIPDisciplineOperator.FINDFIRST) THEN BEGIN
        IF (DSPLIPDisciplineOperator.Discipline = 0) THEN
          ERROR(Text001, DSPLIPDisciplineOperator.FIELDCAPTION(Discipline), DisciplineCode, DSPLIPDisciplineOperator.TABLECAPTION);
        EXIT(DSPLIPDisciplineOperator.Discipline);
      END;
      ERROR(Text001, DSPLIPDisciplineOperator.FIELDCAPTION(Discipline), DisciplineCode, DSPLIPDisciplineOperator.TABLECAPTION);
    END;

    PROCEDURE GetDocumetContent@1100528339(DocumentNo@1100528300 : Code[20]) : Text;
    VAR
      DocumentManagementWebservice@1100528301 : Codeunit 11012405;
      Base64Content@1100528302 : BigText;
      DocumentTxt@1100528303 : Text;
      ErrorTxt@1100528304 : Text;
    BEGIN
      IF (NOT DocumentManagementWebservice.GetDocumentBase64Encoded(DocumentNo, Base64Content, ErrorTxt)) THEN
        ERROR(ErrorTxt);

      Base64Content.GETSUBTEXT(DocumentTxt, 1);
      EXIT(DocumentTxt);
    END;

    PROCEDURE GetDocumentSoort@1100528335(DocumentTypeNav@1100525000 : Code[10]) : Text;
    VAR
      DSPCode@1100528301 : Record 11126753;
    BEGIN
      DSPCode.SETRANGE(Type, DSPCode.Type::DocType);
      DSPCode.SETRANGE("Document Type", DocumentTypeNav);
      IF (DSPCode.FINDFIRST) THEN
        EXIT(DSPCode.Description);
      DSPCode.GET(DSPCode.Type::DocType, 15);
      EXIT(DSPCode.Description);
    END;

    PROCEDURE GetDocumentType@1100528389(DocumentTypeDsp@1100528300 : Text) : Text;
    VAR
      DSPCode@1100528301 : Record 11126753;
    BEGIN
      DSPCode.SETRANGE(Type, DSPCode.Type::DocType);
      DSPCode.SETRANGE(DSPCode.Description, DocumentTypeDsp);
      IF (DSPCode.FINDFIRST) THEN
        EXIT(DSPCode."Document Type");
      DSPCode.GET(DSPCode.Type::DocType, 15);
      EXIT(DSPCode."Document Type");
    END;

    PROCEDURE GetDspAgreementSettingByServiceAreaContractCode@1100528451(ServiceAreaContractNo@1100525001 : Code[50];VAR DSPAgreementSettings@1100528301 : Record 11126725);
    BEGIN
      DSPAgreementSettings.SETFILTER("Service Area Contract No. OLD", ServiceAreaContractNo);
      DSPAgreementSettings.FINDFIRST;
      DSPAgreementSettings.TESTFIELD("Service Area Contract No. OLD");
    END;

    PROCEDURE GetDspAgreementSettings@1100528448(WebServiceCode@1100528300 : Code[20];VAR DSPAgreementSettings@1100528301 : Record 11126725);
    BEGIN
      DSPAgreementSettings.SETRANGE("Consumed Web Service Code", WebServiceCode);
      DSPAgreementSettings.FINDFIRST;
      DSPAgreementSettings.TESTFIELD("Service Contract No.");
    END;

    PROCEDURE GetDspCode@1100528338(TypeIn@1100528300 : Option;NoIn@1100528301 : Integer) : Text;
    VAR
      DSPCode@1100528302 : Record 11126753;
    BEGIN
      IF (DSPCode.GET(TypeIn, NoIn)) THEN
        EXIT(DSPCode.Description);
      EXIT('');
    END;

    PROCEDURE GetDspCompanyByDspAssignment@1100529916(DSPAssignment@1100529900 : Record 11126740) : Text;
    VAR
      GenericWebServiceQueue@1100529903 : Record 11126715;
      RecId@1100529904 : RecordID;
    BEGIN
      RecId := DSPAssignment.RECORDID;

      GenericWebServiceQueue.SETRANGE(Direction, GenericWebServiceQueue.Direction::Inbound);
      GenericWebServiceQueue.SETRANGE("Related Record ID",  RecId);
      GenericWebServiceQueue.SETRANGE("Method Name", GetTcAssignment);
      IF (GenericWebServiceQueue.FINDLAST) THEN
        EXIT(GenericWebServiceQueue."Company Name");
      EXIT('');
    END;

    PROCEDURE GetDspAssignmentByAssignmentId@1100528302(AssignmentId@1100529901 : Text;VAR DSPAssignment@1100529903 : Record 11126740) : Boolean;
    BEGIN
      DSPAssignment.SETRANGE("Assignment Id", AssignmentId);
      DSPAssignment.SETFILTER("Processed On", '<>%1', 0DT);
      EXIT(DSPAssignment.FINDLAST);
    END;

    PROCEDURE GetDspAssignmentByServiceOrderNoObjectNo@1100528334(ServiceOrderNo@1100529901 : Code[20];ObjectNo@1100528300 : Code[20];VAR DSPAssignment@1100529903 : Record 11126740) : Boolean;
    VAR
      ServiceOrder@1100528301 : Record 11012823;
      ServiceObject@1100528302 : Record 11071691;
    BEGIN
      IF (NOT ServiceOrder.GET(ServiceOrderNo)) THEN
        ServiceOrder.INIT;
      IF (NOT ServiceObject.GET(ObjectNo)) THEN
        ServiceObject.INIT;
      DSPAssignment.SETRANGE("Service Order No.", ServiceOrderNo);
      DSPAssignment.SETRANGE("Object No.", ObjectNo);
      DSPAssignment.SETRANGE("Assignment Id", ServiceObject."Dsp Assignment Id");
      DSPAssignment.SETFILTER("Processed On", '<>%1', 0DT);
      EXIT(DSPAssignment.FINDLAST);
    END;

    PROCEDURE GetDspAssignmentIdByServiceOrderNoObjectNo@1100528437(ServiceOrderNo@1100529901 : Code[20];ObjectNo@1100528300 : Code[20]) : Text;
    VAR
      DSPAssignment@1100528302 : Record 11126740;
      ServiceOrder@1100528301 : Record 11012823;
    BEGIN
      GetDspAssignmentByServiceOrderNoObjectNo(ServiceOrderNo, ObjectNo, DSPAssignment);
      EXIT(DSPAssignment."Assignment Id");
    END;

    PROCEDURE GetDspLipRequestLineByServiceOrderNoObjectNo@1100528457(ServiceOrderNo@1100528300 : Code[20];ObjectNo@1100528301 : Code[20];VAR DSPLIPRequestLine@1100528302 : Record 11126756) : Boolean;
    VAR
      DSPLIPRequest@1100528304 : Record 11126755;
      ServiceOrder@1100528303 : Record 11012823;
    BEGIN
      IF (NOT ServiceOrder.GET(ServiceOrderNo)) THEN
        ServiceOrder.INIT;
      DSPLIPRequest.SETRANGE("Request Id", ServiceOrder."Dsp Cluster Id");
      DSPLIPRequest.FINDLAST;

      DSPLIPRequestLine.SETRANGE("Service Order No.", ServiceOrderNo);
      DSPLIPRequestLine.SETRANGE("Object No.", ObjectNo);
      DSPLIPRequestLine.SETRANGE("Connection Object Id", ServiceOrder."Dsp Connection Object Id");
      DSPLIPRequestLine.SETRANGE("Entry No.", DSPLIPRequest."Entry No.");
      DSPLIPRequestLine.SETFILTER("Processed On", '<>%1', 0DT);
      EXIT(DSPLIPRequestLine.FINDLAST);
    END;

    PROCEDURE GetDspLipServiceName@1100528454(VersionTxt@1100528300 : Text) : Code[50];
    BEGIN
      EXIT(STRSUBSTNO('%1_%2_%3_%4', GetTcDsp, DSPSetup."Dsp Partner", GetTcLip, VersionTxt));
    END;

    PROCEDURE GetDspProcessServiceOrderTxt@1100528445() : Text;
    BEGIN
      EXIT(ProcessRequestServiceOrderTxt);
    END;

    PROCEDURE GetDspProcessServiceOrderObjectTxt@1100528444() : Text;
    BEGIN
      EXIT(ProcessRequestServiceOrderObjectTxt);
    END;

    PROCEDURE GetDspServiceName@1100528421(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      EXIT(STRSUBSTNO('%1_%2', GetTcDsp, VersionTxt));
    END;

    PROCEDURE GetDspServiceObjectStandardObjectCode@1100528838(Discipline@1100528800 : Option) : Code[20];
    VAR
      DSPServiceObject@1100528802 : Record 11126722;
    BEGIN
      DSPServiceObject.SETRANGE(Discipline, Discipline);
      DSPServiceObject.FINDFIRST;
      EXIT(DSPServiceObject."Standard Object No.");
    END;

    PROCEDURE GetDspVersionAsText@1100528427(VersionNo@1100528300 : Text) : Text;
    BEGIN
      CASE VersionNo OF
        GetDspVersionFirst(TRUE): EXIT(GetDspVersionFirst(FALSE));
        GetDspVersionSecond(TRUE): EXIT(GetDspVersionSecond(FALSE));
      END;
      ERROR(MessageVersionNotSupportedTxt, VersionNo);
    END;

    PROCEDURE GetDspVersionFirst@1100528428(RealVersion@1100528300 : Boolean) : Text;
    BEGIN
      DSPSetup.GET;
      IF (RealVersion) THEN
        EXIT(DSPSetup."First DSP version");
      EXIT('v'+DELCHR(DSPSetup."First DSP version", '<=>', '.'));
    END;

    PROCEDURE GetDspVersionSecond@1100528410(RealVersion@1100528300 : Boolean) : Text;
    BEGIN
      DSPSetup.GET;
      IF (RealVersion) THEN
        EXIT(DSPSetup."Second DSP Version");
      EXIT('v'+DELCHR(DSPSetup."Second DSP Version", '<=>', '.'));
    END;

    PROCEDURE GetDspPartnerServiceName@1100528370(VersionTxt@1100528300 : Text) : Text;
    VAR
      DSPSetup@1100528301 : Record 11126726;
    BEGIN
      DSPSetup.GET;
      EXIT(STRSUBSTNO('%1_%2_%3', GetTcDsp, DSPSetup."Dsp Partner", VersionTxt));
    END;

    PROCEDURE GetGmfPlatformUser@1100528477() : Text;
    VAR
      DSPSetup@1100528300 : Record 11126726;
    BEGIN
      DSPSetup.GET;
      EXIT(DSPSetup."Gmf Platform User");
    END;

    PROCEDURE GetFinalPlanningTimeNo@1100528441() : Integer;
    BEGIN
      EXIT(2);
    END;

    PROCEDURE GetJudgementProductionRecordingWs@1100528312(VAR RootElement@1100528301 : Text;VAR RootElementNamespace@1100528302 : Text;VersionTxt@1100528303 : Text);
    VAR
      GenericWebServRouterLine@1100528300 : Record 11229382;
    BEGIN
      IF (NOT GenericWebServRouterLine.GET(GetTcDspInterfaceWs, GetTcJudgementProductionRecordingWS + VersionTxt, VersionTxt)) THEN
        GenericWebServRouterLine.INIT;
      RootElement := GenericWebServRouterLine."Root Element";
      RootElementNamespace := GenericWebServRouterLine."Root Element Namespace";
    END;

    PROCEDURE GetLastAdjustmentReason@1100528455(ServiceOrderNo@1100528301 : Code[20];ObjectNo@1100528302 : Code[20];VAR LastReason@1100528303 : Integer;VAR LastText@1100528304 : Text);
    VAR
      DSPAdjustmentMessage@1100528300 : Record 11126727;
      DSPAssignment@1100528306 : Record 11126740;
      IStream@1100528305 : InStream;
    BEGIN
      LastReason := 0;
      LastText := '';
      IF (ServiceOrderNo = '') OR (ObjectNo = '') THEN
        EXIT;

      DSPAdjustmentMessage.SETRANGE("Service Order No.", ServiceOrderNo);
      DSPAdjustmentMessage.SETRANGE("Object No.", ObjectNo);
      IF (DSPAdjustmentMessage.FINDLAST) THEN BEGIN
        LastReason := DSPAdjustmentMessage."Adjustment Reason No.";
        IF (DSPAdjustmentMessage.Explanation.HASVALUE) THEN BEGIN
          DSPAdjustmentMessage.CALCFIELDS(Explanation);
          DSPAdjustmentMessage.Explanation.CREATEINSTREAM(IStream);
          IStream.READ(LastText, MAXSTRLEN(DSPAssignment."Last Cancellation Explanation"));
        END;
      END;
    END;

    PROCEDURE GetLipServiceName@1100528417(VersionTxt@1100528300 : Text) : Text;
    VAR
      DSPAgreementSettings@1100525000 : Record 11126725;
    BEGIN
      DSPAgreementSettings.SETFILTER("Consumed Web Service Code", '<>%1', '');
      IF (DSPAgreementSettings.FINDFIRST) THEN
        EXIT(DSPAgreementSettings."Consumed Web Service Code");
      EXIT(STRSUBSTNO('%1_%2_%3', GetTcDsp, GetTcLip, VersionTxt));
    END;

    PROCEDURE GetLipServiceOrderObjectNo@1100528385(DSPLIPRequestLine@1100528305 : Record 11126756) : Code[20];
    VAR
      DSPAssignment@1100528302 : Record 11126740;
      DSPLIPRequest@1100528301 : Record 11126755;
      ServiceOrder@1100528300 : Record 11012823;
    BEGIN
      IF (DSPLIPRequestLine."Object No." <> '') THEN
        EXIT(DSPLIPRequestLine."Object No.");

      DSPLIPRequest.GET(DSPLIPRequestLine."Entry No.");
      IF (DSPLIPRequestLine."Service Order No." <> '') THEN
        ServiceOrder.GET(DSPLIPRequestLine."Service Order No.")
      ELSE
        ServiceOrder.GET(GetServiceOrderNo(DSPLIPRequestLine."Connection Object Id", DSPLIPRequest."Request Id"));

      DSPAssignment.SETRANGE("Cluster Id", DSPLIPRequest."Request Id");
      DSPAssignment.SETRANGE("Connection Object Id", DSPLIPRequestLine."Connection Object Id");
      DSPAssignment.SETRANGE(Discipline, DSPLIPRequestLine.Discipline);
      DSPAssignment.SETRANGE("Service Order No.", DSPLIPRequestLine."Service Order No.");
      DSPAssignment.SETFILTER("Object No.", '<>%1', '');
      IF (DSPAssignment.FINDFIRST) THEN
        EXIT(DSPAssignment."Object No.");
      EXIT('');
    END;

    PROCEDURE GetLipVersion@1100528411(MessageVersion@1100528300 : Text) : Text;
    BEGIN
      CASE MessageVersion OF
        GetLipVersionFirst: EXIT(GetLipVersionFirst);
        GetLipVersionSecond: EXIT(GetLipVersionSecond);
      END;
      ERROR(MessageVersionNotSupportedTxt, MessageVersion);
    END;

    PROCEDURE GetLipVersionFirst@1100528429() : Text;
    BEGIN
      DSPSetup.GET;
      EXIT(DSPSetup."First LIP Version");
    END;

    PROCEDURE GetLipVersionSecond@1100528408() : Text;
    BEGIN
      DSPSetup.GET;
      EXIT(DSPSetup."Second LIP Version");
    END;

    PROCEDURE GetNsAanvraagService@1100528352(VersionTxt@1100528301 : Text) : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixAanvraagService(VersionTxt));
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsAdministratiefGereed@1100528368(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixAdministratiefGereed(VersionTxt));
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsAlgemeen@1100528367(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixAlgemeen(VersionTxt));
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsAnnulering@1100528366(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixAnnulering(VersionTxt));
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsAnnuleringGereed@1100528365(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixAnnuleringGereed(VersionTxt));
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsBeoordelingAdministratiefGereed@1100528364(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixBeoordelingAdministratiefGereed(VersionTxt));
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsBeoordelingTechnischGereed@1100528363(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixBeoordelingTechnischGereed(VersionTxt));
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsBijstelling@1100528362(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixBijstelling(VersionTxt));
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsEntiteiten@1100528371(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixEntiteiten(VersionTxt));
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsGmfAlgemeen@1100528396() : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixGmfAlgemeen);
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsGmfAansluiting@1100528395() : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixGmfAansluiting);
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsGmfObject@1100528392() : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixGmfObject);
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsGmfWorkOrder@1100528386(ConnectorType@1100528300 : Code[20]) : Text;
    BEGIN
      GenericWebServiceNamespace.GET(ConnectorType, GetTcPrefixGmfWorkOrder);
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsPlanning@1100528361(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixPlanning(VersionTxt));
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsOpdracht@1100528360(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixOpdracht(VersionTxt));
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsOpdrachtInfo@1100528412() : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixOpdrachtInfo);
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsOpdrachtGereed@1100528356(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixOpdrachtGereed(VersionTxt));
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsPullService@1100528383(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixPullService(VersionTxt));
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsStatusUpdate@1100528434() : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixStatusUpdate);
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetNsTechnischGereed@1100528359(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      GenericWebServiceNamespace.GET(GetTcDsp, GetTcPrefixTechnischGereed(VersionTxt));
      EXIT(GenericWebServiceNamespace.Namespace);
    END;

    PROCEDURE GetOperator@1100528446(OperatorText@1100528301 : Text) : Text;
    VAR
      DSPLIPDisciplineOperator@1100528300 : Record 11126729;
    BEGIN
      DSPLIPDisciplineOperator.SETFILTER(Operator, '%1', '@'+OperatorText);
      IF (DSPLIPDisciplineOperator.FINDFIRST) THEN BEGIN
        IF (DSPLIPDisciplineOperator."Dsp Operator" = '') THEN
          ERROR(Text001, DSPLIPDisciplineOperator.FIELDCAPTION(Operator), OperatorText, DSPLIPDisciplineOperator.TABLECAPTION);
        EXIT(DSPLIPDisciplineOperator."Dsp Operator");
      END;
      ERROR(Text001, DSPLIPDisciplineOperator.FIELDCAPTION(Operator), OperatorText, DSPLIPDisciplineOperator.TABLECAPTION);
    END;

    PROCEDURE GetOperatorByServiceOrderNoServiceObjectNo@1100528456(ServiceOrderNo@1100528302 : Code[20];ObjectNo@1100528300 : Code[20]) : Text;
    VAR
      DSPAssignment@1100528304 : Record 11126740;
      DSPLIPRequestLine@1100528305 : Record 11126756;
    BEGIN
      IF (GetDspAssignmentByServiceOrderNoObjectNo(ServiceOrderNo, ObjectNo, DSPAssignment)) THEN
        EXIT(DSPAssignment.Operator);
      IF (GetDspLipRequestLineByServiceOrderNoObjectNo(ServiceOrderNo, ObjectNo, DSPLIPRequestLine)) THEN
        EXIT(DSPLIPRequestLine.Operator);
      EXIT('');
    END;

    PROCEDURE GetPlanningWs@1100528337(VAR RootElement@1100528301 : Text;VAR RootElementNamespace@1100528300 : Text;VersionTxt@1100528303 : Text);
    VAR
      GenericWebServRouterLine@1100528302 : Record 11229382;
    BEGIN
      IF (NOT GenericWebServRouterLine.GET(GetTcDspInterfaceWs, GetTcPlanningWs + VersionTxt, VersionTxt)) THEN
        GenericWebServRouterLine.INIT;
      RootElement := GenericWebServRouterLine."Root Element";
      RootElementNamespace := GenericWebServRouterLine."Root Element Namespace";
    END;

    PROCEDURE GetPreviousProcessedDspAssignment@1100529922(DspAssignmentEntryNo@1100528800 : BigInteger;VAR OPreviousProcessedDSPAssignment@1100528802 : Record 11126740) : Boolean;
    VAR
      DSPAssignment@1100528801 : Record 11126740;
      NoOfAdjustments@1100528803 : Integer;
    BEGIN
      IF (NOT DSPAssignment.GET(DspAssignmentEntryNo)) THEN
        DSPAssignment.INIT;
      OPreviousProcessedDSPAssignment.SETRANGE("Company Name", DSPAssignment."Company Name");
      OPreviousProcessedDSPAssignment.SETFILTER("Processed On", '<>%1', 0DT);
      OPreviousProcessedDSPAssignment.SETFILTER("Assignment Id", DSPAssignment."Assignment Id");
      OPreviousProcessedDSPAssignment.SETRANGE("Cluster Id", DSPAssignment."Cluster Id");
      OPreviousProcessedDSPAssignment.SETRANGE("Connection Object Id", DSPAssignment."Connection Object Id");
      OPreviousProcessedDSPAssignment.SETFILTER("Entry No.", '<>%1', DSPAssignment."Entry No.");

      CASE OPreviousProcessedDSPAssignment.COUNT OF
        0: EXIT(FALSE);
        1: BEGIN
          OPreviousProcessedDSPAssignment.FINDFIRST;
          EXIT(TRUE);
        END;
        ELSE BEGIN
          OPreviousProcessedDSPAssignment.FINDFIRST;
          OPreviousProcessedDSPAssignment.SETFILTER("No. Of Adjustments", '<%1', OPreviousProcessedDSPAssignment."No. Of Adjustments");
          NoOfAdjustments := OPreviousProcessedDSPAssignment."No. Of Adjustments";
          REPEAT
            IF (OPreviousProcessedDSPAssignment."No. Of Adjustments" > NoOfAdjustments) THEN
              NoOfAdjustments := OPreviousProcessedDSPAssignment."No. Of Adjustments";
          UNTIL OPreviousProcessedDSPAssignment.NEXT = 0;
          OPreviousProcessedDSPAssignment.SETRANGE("No. Of Adjustments", NoOfAdjustments);
          OPreviousProcessedDSPAssignment.FINDFIRST;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE GetPriceBookCodeFromServiceOrder@1100529919(ServiceOrderNo@1100525000 : Code[20]) : Code[30];
    VAR
      ServiceOrderExtension@1100525001 : Record 11071727;
    BEGIN
      IF ServiceOrderExtension.GET(ServiceOrderNo) THEN
        EXIT(ServiceOrderExtension."Price Book Code")
    END;

    PROCEDURE GetProductionRecordingWs@1100528318(VAR RootElement@1100528301 : Text;VAR RootElementNamespace@1100528300 : Text;VersionTxt@1100528303 : Text);
    VAR
      GenericWebServRouterLine@1100528302 : Record 11229382;
    BEGIN
      IF (NOT GenericWebServRouterLine.GET(GetTcDspInterfaceWs, GetTcProductionRecordingWs + VersionTxt, VersionTxt)) THEN
        GenericWebServRouterLine.INIT;
      RootElement := GenericWebServRouterLine."Root Element";
      RootElementNamespace := GenericWebServRouterLine."Root Element Namespace";
    END;

    PROCEDURE GetRegionCode@1100525039(AgreementNo@1100525002 : Code[30]) : Code[30];
    VAR
      DSPAgreementSettings@1100525001 : Record 11126725;
    BEGIN
      IF AgreementNo = '' THEN
        EXIT;
      DSPAgreementSettings.GET(AgreementNo);
      EXIT(DSPAgreementSettings."Region Code");
    END;

    PROCEDURE GetServiceOrderAddress@1100528442(Street@1100528300 : Text;HouseNo@1100528301 : Text;Addition@1100528302 : Text) : Text;
    BEGIN
      IF (Addition <> '') THEN
        EXIT(STRSUBSTNO('%1 %2 %3', Street, HouseNo, DELCHR(Addition, '<=>')));
      EXIT(STRSUBSTNO('%1 %2', Street, HouseNo));
    END;

    PROCEDURE GetServiceOrderNo@1100528330(ConnectionObjectId@1100528301 : Text;ClusterId@1100528302 : Text) : Code[20];
    VAR
      ServiceOrder@1100528300 : Record 11012823;
    BEGIN
      ServiceOrder.SETRANGE("Dsp Cluster Id", ClusterId);
      ServiceOrder.SETRANGE("Dsp Connection Object Id", ConnectionObjectId);
      ServiceOrder.SETRANGE(Origin, ServiceOrder.Origin::DSP);
      ServiceOrder.SETFILTER(Status, '<%1', ServiceOrder.Status::"Administrative Finished");
      IF (ServiceOrder.FINDFIRST) THEN
        EXIT(ServiceOrder."No.");
      EXIT('');
    END;

    PROCEDURE GetServiceOrderNo2@1100528329(AssignmentId@1100528301 : Text) : Code[20];
    VAR
      DSPAssignment@1100528302 : Record 11126740;
    BEGIN
      DSPAssignment.SETRANGE("Company Name", COMPANYNAME);
      DSPAssignment.SETRANGE("Assignment Id", AssignmentId);
      IF (DSPAssignment.FINDLAST) THEN
        EXIT(GetServiceOrderNo(DSPAssignment."Connection Object Id", DSPAssignment."Cluster Id"));
      EXIT('');
    END;

    PROCEDURE GetServiceOrderObjectNoLip@1100528394(DSPAssignmentIn@1100528304 : Record 11126740) : Code[20];
    VAR
      DSPAssignment@1100528303 : Record 11126740;
      DSPLIPRequestLine@1100528302 : Record 11126756;
      ServiceOrder@1100528301 : Record 11012823;
    BEGIN
      DSPSetup.GET;

      DSPLIPRequestLine.SETRANGE("Company Name", DSPAssignmentIn."Company Name");
      DSPLIPRequestLine.SETRANGE("Connection Object Id", DSPAssignmentIn."Connection Object Id");
      DSPLIPRequestLine.SETRANGE(Discipline, DSPAssignmentIn.Discipline);
      DSPLIPRequestLine.SETRANGE("Service Order No.", DSPAssignmentIn."Service Order No.");
      DSPLIPRequestLine.SETRANGE("Assignment Id", '');
      DSPLIPRequestLine.SETFILTER("Object No.", '<>%1', '');
      IF (DSPLIPRequestLine.FINDFIRST) THEN BEGIN
        DSPAssignment.SETRANGE("Company Name", COMPANYNAME);
        DSPAssignment.SETRANGE("Cluster Id", DSPAssignmentIn."Cluster Id");
        DSPAssignment.SETRANGE("Connection Object Id", DSPAssignmentIn."Connection Object Id");
        DSPAssignment.SETRANGE(Discipline, DSPAssignmentIn.Discipline);
        DSPAssignment.SETRANGE("Service Order No.", DSPAssignmentIn."Service Order No.");
        DSPAssignment.SETRANGE("Object No.", DSPLIPRequestLine."Object No.");
        IF (DSPAssignment.FINDFIRST) THEN
          EXIT('');
        EXIT(DSPLIPRequestLine."Object No.");
      END;
      EXIT('');
    END;

    PROCEDURE GetServiceOrderSpecLineValue@1100529913(ServiceOrderNo@1100529901 : Code[20];ObjectNo@1100529902 : Code[20];SpecificationCode@1100528300 : Code[10]) : Text;
    VAR
      ServiceOrderObjSpecLine@1100529900 : Record 11071782;
    BEGIN
      ServiceOrderObjSpecLine.SETRANGE("Service Order No.", ServiceOrderNo);
      ServiceOrderObjSpecLine.SETRANGE("Specification Code", SpecificationCode);
      ServiceOrderObjSpecLine.SETRANGE("Specification Group Code", GetTcDsp);
      ServiceOrderObjSpecLine.SETRANGE("Service Object No.", ObjectNo);
      IF (NOT ServiceOrderObjSpecLine.FINDFIRST) THEN
        EXIT('');
      IF (ServiceOrderObjSpecLine."New Value" <> '') THEN
        EXIT(ServiceOrderObjSpecLine."New Value");
      EXIT(ServiceOrderObjSpecLine."Old Value");
    END;

    PROCEDURE GetSUPLineNo@1100525082("Service Order No"@1100525001 : Code[20]) : Integer;
    VAR
      SUPRecordingLine@1100525000 : Record 11071772;
    BEGIN
      SUPRecordingLine.SETRANGE("Service Order No.","Service Order No");
      IF SUPRecordingLine.FINDLAST THEN
        EXIT(SUPRecordingLine."Line No." + 10000)
      ELSE
        EXIT(10000);
    END;

    PROCEDURE GetTcAdjustment@1100528373() : Text;
    BEGIN
      EXIT(AdjustmentTxt);
    END;

    PROCEDURE GetTcAdjustmentWs@1100528317() : Text;
    BEGIN
      EXIT(AdjustmentWsTxt);
    END;

    PROCEDURE GetTcAssignment@1100528341() : Text;
    BEGIN
      EXIT(AssignmentTxt);
    END;

    PROCEDURE GetTcAssignmentWs@1100528307() : Text;
    BEGIN
      EXIT(AssignmentWsTxt);
    END;

    PROCEDURE GetTcAssignmentInfo@1100528319() : Text;
    BEGIN
      EXIT(AssignmentInfoTxt);
    END;

    PROCEDURE GetTcAssignmentInfoWs@1100528409() : Text;
    BEGIN
      EXIT(AssignmentInfoWsTxt);
    END;

    PROCEDURE GetTcAssignmentReady@1100528355() : Text;
    BEGIN
      EXIT(AssignmentReadyTxt);
    END;

    PROCEDURE GetTcAssignmentReadyWs@1100528333() : Text;
    BEGIN
      EXIT(AssignmentReadyWsTxt);
    END;

    PROCEDURE GetTcCancellationReady@1100528378() : Text;
    BEGIN
      EXIT(CancellationReadyTxt);
    END;

    PROCEDURE GetTcCancellationReadyWs@1100528321() : Text;
    BEGIN
      EXIT(CancellationReadyWsTxt);
    END;

    PROCEDURE GetTcCancellation@1100528300() : Text;
    BEGIN
      EXIT(CancellationTxt);
    END;

    PROCEDURE GetTcCancellationWs@1100528323() : Text;
    BEGIN
      EXIT(CancellationWsTxt);
    END;

    PROCEDURE GetTcCommonResponse@1100528309() : Text;
    BEGIN
      EXIT(CommonResponseTxt);
    END;

    PROCEDURE GetTcCommonResponseNamespace@1100528310() : Text;
    BEGIN
      EXIT(CommonResponseNsTxt);
    END;

    PROCEDURE GetTcDsp@1100528380() : Text;
    BEGIN
      EXIT(DspTxt);
    END;

    PROCEDURE GetTcDspInterfaceWs@1100528306() : Text;
    BEGIN
      EXIT(InterfaceWsTxt);
    END;

    PROCEDURE GetTcDspPartnerM10@1100528404() : Text;
    BEGIN
      EXIT(DspPartnerM10Txt);
    END;

    PROCEDURE GetTcDspPartnerOther@1100528405() : Text;
    BEGIN
      EXIT(DspPartnerOtherTxt);
    END;

    PROCEDURE GetTcDspGetRequestId@1100528407() : Text;
    BEGIN
      EXIT(DspGetRequestIdTxt);
    END;

    PROCEDURE GetTcDspGetRequestIds@1100528453() : Text;
    BEGIN
      EXIT(DspGetRequestIdsTxt);
    END;

    PROCEDURE GetTcDspGetRequestDocumentId@1100528443() : Text;
    BEGIN
      EXIT(DspGetRequestDocumentIdTxt);
    END;

    PROCEDURE GetTcDspGetVersion@1100528414() : Text;
    BEGIN
      EXIT(DspGetVersionTxt);
    END;

    PROCEDURE GetTcGmf@1100528314() : Text;
    BEGIN
      EXIT(GmfTxt);
    END;

    PROCEDURE GetTcGmfWorkOrder@1100528431() : Text;
    BEGIN
      EXIT(WorkOrderTxt);
    END;

    PROCEDURE GetTcJudgementProductionRecording@1100528342() : Text;
    BEGIN
      EXIT(JudgementProductionRecordingTxt);
    END;

    PROCEDURE GetTcJudgementProductionRecordingWS@1100528308() : Text;
    BEGIN
      EXIT(JudgementProductionRecordingWsTxt);
    END;

    PROCEDURE GetTcL_AanvrID@1100528388() : Text;
    BEGIN
      EXIT(AanvrTxt);
    END;

    PROCEDURE GetTcLip@1100528387() : Text;
    BEGIN
      EXIT(LIPTxt);
    END;

    PROCEDURE GetTcLipGetRequestIds@1100528372() : Text;
    BEGIN
      EXIT(LipGetRequestIdsTxt);
    END;

    PROCEDURE GetTcLipGetRequestId@1100528415() : Text;
    BEGIN
      EXIT(LipGetRequestIdTxt);
    END;

    PROCEDURE GetTcLipGetRequestDocumentId@1100528413() : Text;
    BEGIN
      EXIT(LipGetRequestDocumentIdTxt);
    END;

    PROCEDURE GetTcLipGetVersion@1100528331() : Text;
    BEGIN
      EXIT(LipGetVersionTxt);
    END;

    PROCEDURE GetTcMimeType@1100528304() : Text;
    BEGIN
      EXIT(MimeTypeTxt);
    END;

    PROCEDURE GetTcOpdr@1100529914() : Text;
    BEGIN
      EXIT(OpdrTxt);
    END;

    PROCEDURE GetTcOpg@1100528357() : Text;
    BEGIN
      EXIT(OpgTxt);
    END;

    PROCEDURE GetTcPlanning@1100528340() : Text;
    BEGIN
      EXIT(DspPlanningTxt);
    END;

    PROCEDURE GetTcPlanningWs@1100528336() : Text;
    BEGIN
      EXIT(PlanningWsTxt);
    END;

    PROCEDURE GetTcPrefixAanvraagService@1100528400(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      CASE VersionTxt OF
        GetLipVersionFirst: EXIT(PrefAanvraagService1Txt);
      END;
      EXIT(PrefAanvraagService2Txt);
    END;

    PROCEDURE GetTcPrefixAdministratiefGereed@1100528347(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      CASE VersionTxt OF
        GetDspVersionFirst(FALSE): EXIT(PrefAdministratiefGereed1Txt);
      END;
      EXIT(PrefAdministratiefGereed2Txt);
    END;

    PROCEDURE GetTcPrefixAlgemeen@1100528349(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      CASE VersionTxt OF
        GetDspVersionFirst(FALSE): EXIT(PrefAlgemeen1Txt);
      END;
      EXIT(PrefAlgemeen2Txt);
    END;

    PROCEDURE GetTcPrefixAnnulering@1100528348(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      CASE VersionTxt OF
        GetDspVersionFirst(FALSE): EXIT(PrefAnnulering1Txt);
      END;
      EXIT(PrefAnnulering2Txt);
    END;

    PROCEDURE GetTcPrefixAnnuleringGereed@1100528345(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      CASE VersionTxt OF
        GetDspVersionFirst(FALSE): EXIT(PrefAnnuleringGereed1Txt);
      END;
      EXIT(PrefAnnuleringGereed2Txt);
    END;

    PROCEDURE GetTcPrefixBeoordelingAdministratiefGereed@1100528346(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      CASE VersionTxt OF
        GetDspVersionFirst(FALSE): EXIT(PrefBeoordelingAdministratiefGereed1Txt);
      END;
      EXIT(PrefBeoordelingAdministratiefGereed2Txt);
    END;

    PROCEDURE GetTcPrefixBeoordelingTechnischGereed@1100528351(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      CASE VersionTxt OF
        GetDspVersionFirst(FALSE): EXIT(PrefBeoordelingTechnischGereed1Txt);
      END;
      EXIT(PrefBeoordelingTechnischGereed2Txt);
    END;

    PROCEDURE GetTcPrefixBijstelling@1100528350(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      CASE VersionTxt OF
        GetDspVersionFirst(FALSE): EXIT(PrefBijstelling1Txt);
      END;
      EXIT(PrefBijstelling2Txt);
    END;

    PROCEDURE GetTcPrefixEntiteiten@1100528401(VersionTxt@1100528301 : Text) : Text;
    BEGIN
      CASE VersionTxt OF
        GetLipVersionFirst: EXIT(PrefEntiteiten1Txt);
      END;
      EXIT(PrefEntiteiten2Txt);
    END;

    PROCEDURE GetTcPrefixGmfAlgemeen@1100528399() : Text;
    BEGIN
      EXIT(PrefGmfAlgemeenTxt);
    END;

    PROCEDURE GetTcPrefixGmfAansluiting@1100528398() : Text;
    BEGIN
      EXIT(PrefGmfAansluitingTxt);
    END;

    PROCEDURE GetTcPrefixGmfObject@1100528397() : Text;
    BEGIN
      EXIT(PrefGmfObjectTxt);
    END;

    PROCEDURE GetTcPrefixGmfWorkOrder@1100528379() : Text;
    BEGIN
      EXIT(PrefGmfWorkorderTxt);
    END;

    PROCEDURE GetTcPrefixOpdracht@1100528344(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      CASE VersionTxt OF
        GetDspVersionFirst(FALSE): EXIT(PrefOpdracht1Txt);
      END;
      EXIT(PrefOpdracht2Txt);
    END;

    PROCEDURE GetTcPrefixOpdrachtGereed@1100528403(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      CASE VersionTxt OF
        GetDspVersionFirst(FALSE): EXIT(PrefOpdrachtGereed1Txt);
      END;
      EXIT(PrefOpdrachtGereed2Txt);
    END;

    PROCEDURE GetTcPrefixOpdrachtInfo@1100528406() : Text;
    BEGIN
      EXIT(PrefOpdrachtInfoTxt);
    END;

    PROCEDURE GetTcPrefixPlanning@1100528381(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      CASE VersionTxt OF
        GetDspVersionFirst(FALSE): EXIT(PrefPlanning1Txt);
      END;
      EXIT(PrefPlanning2Txt);
    END;

    PROCEDURE GetTcPrefixPullService@1100528402(VersionTxt@1100528301 : Text) : Text;
    BEGIN
      CASE VersionTxt OF
        GetLipVersionFirst: EXIT(PrefPullservice1Txt);
      END;
      EXIT(PrefPullservice2Txt);
    END;

    PROCEDURE GetTcPrefixStatusUpdate@1100528435() : Text;
    BEGIN
      EXIT(PrefStatusUpdateTxt);
    END;

    PROCEDURE GetTcPrefixTechnischGereed@1100528353(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      CASE VersionTxt OF
        GetDspVersionFirst(FALSE): EXIT(PrefTechnischGereed1Txt);
      END;
      EXIT(PrefTechnischGereed2Txt);
    END;

    PROCEDURE GetTcPrefixWaardelijsten@1100528384(VersionTxt@1100528300 : Text) : Text;
    BEGIN
      CASE VersionTxt OF
        GetDspVersionFirst(FALSE): EXIT(PrefWaardeLijsten1Txt);
      END;
      EXIT(PrefWaardeLijsten2Txt);
    END;

    PROCEDURE GetTcProcessCostPlus@1100528369() : Text;
    BEGIN
      EXIT(ProcessCostPlusTxt);
    END;

    PROCEDURE GetTcProcessInvoice@1100528436() : Text;
    BEGIN
      EXIT(ProcessInvoiceTxt);
    END;

    PROCEDURE GetTcProcessLipServiceOrder@1100528374() : Text;
    BEGIN
      EXIT(ProcessLipServiceOrderTxt);
    END;

    PROCEDURE GetTcProcessLipServiceOrderObject@1100528382() : Text;
    BEGIN
      EXIT(ProcessLipServiceOrderObjectTxt);
    END;

    PROCEDURE GetTcProcessRequestServiceOrder@1100528423() : Text;
    BEGIN
      EXIT(ProcessRequestServiceOrderTxt);
    END;

    PROCEDURE GetTcProcessRequestServiceOrderObject@1100528424() : Text;
    BEGIN
      EXIT(ProcessRequestServiceOrderObjectTxt);
    END;

    PROCEDURE GetTcProcessServiceOrder@1100529903() : Text;
    BEGIN
      EXIT(ProcessServiceOrderTxt);
    END;

    PROCEDURE GetTcProcessServiceOrderObject@1100529904() : Text;
    BEGIN
      EXIT(ProcessServiceOrderObjectTxt);
    END;

    PROCEDURE GetTcProcessSupRecordingLines@1100529905() : Text;
    BEGIN
      EXIT(ProcessSupRecordingLinesTxt);
    END;

    PROCEDURE GetTcProductionRecording@1100528343() : Text;
    BEGIN
      EXIT(ProductionRecordingTxt);
    END;

    PROCEDURE GetTcProductionRecordingWs@1100528316() : Text;
    BEGIN
      EXIT(ProductionRecordingWsTxt);
    END;

    PROCEDURE GetTcRequest@1100528416() : Text;
    BEGIN
      EXIT(DspRequestTxt);
    END;

    PROCEDURE GetTcStatusUpdate@1100528432() : Text;
    BEGIN
      EXIT(StatusUpdateTxt);
    END;

    PROCEDURE GetTcStatusUpdateWs@1100528433() : Text;
    BEGIN
      EXIT(StatusUpdateWsTxt);
    END;

    PROCEDURE GetXmlDocument@1100528326(TempBlob@1100528301 : Record 99008535;VAR DnXmlDocument@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      GenericWebServiceQueue@1100528302 : Record 11126715;
      OStream@1100528300 : OutStream;
    BEGIN
      IF (NOT TempBlob.Blob.HASVALUE) THEN
        ERROR(Text000, GenericWebServiceQueue.FIELDCAPTION("Xml Message"));

      TempBlob.Blob.CREATEOUTSTREAM(OStream);
      DnXmlDocument := DnXmlDocument.XmlDocument();
      DnXmlDocument.Load(OStream);
    END;

    PROCEDURE ProcessStatusCancelled@1100528390(RecId@1100528300 : RecordID);
    VAR
      DSPAdjustmentMessage@1100528304 : Record 11126727;
      DSPCancellation@1100528303 : Record 11126733;
      DSPPlanMessage@1100528305 : Record 11126752;
      SUPProduction@1100528302 : Record 11071773;
    BEGIN
      CASE RecId.TABLENO OF
        DATABASE::"DSP Adjustment Message":
          IF (DSPAdjustmentMessage.GET(RecId)) THEN
            DSPAdjustmentMessage.ResetSentToDsp;
        DATABASE::"DSP Cancellation":
          IF (DSPCancellation.GET(RecId)) THEN
            DSPCancellation.ResetSentToDsp;
        DATABASE::"DSP Plan Message":
          IF (DSPPlanMessage.GET(RecId)) THEN
            DSPPlanMessage.ResetSentToDsp;
        DATABASE::"SUP Production":
          IF (SUPProduction.GET(RecId)) THEN
            SUPProduction.ResetSentToDsp;
      END;
    END;

    PROCEDURE SendCws@1100528479(ConsumedWebServiceLine@1100528300 : Record 11229798;RequestXml@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";ResponseXml@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";MessageId@1100528303 : Text) : Boolean;
    VAR
      ConsumedWebServiceMgt@1100528311 : Codeunit 11229310;
      ConsumedWebService@1100528313 : Record 11229797;
      ConsumedWebServiceRuntime@1100528305 : Codeunit 11229309;
      XMLDOMManagement@1100528304 : Codeunit 6224;
      HTTPWebResponse@1100528306 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      FoundNode@1100528307 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      PostAction@1100528308 : ARRAY [10] OF Text;
      SOAPFaultString@1100528309 : Text;
      SOAPInfoString@1100528312 : Text;
      LogEntryNo@1100528310 : Integer;
    BEGIN
      //Consumed Web Service Line Log
      //PostAction[1]: Status String
      //PostAction[2]: Status Code
      //PostAction[3]: Status Details
      //PostAction[4]:
      //PostAction[5]:
      DSPSetup.GET;

      IF ISNULL(HTTPWebResponse) THEN
        HTTPWebResponse := HTTPWebResponse.HttpWebResponse();
      IF ISNULL(ResponseXml) THEN
        ResponseXml := ResponseXml.XmlDocument();
      SOAPFaultString := '<Body><Fault><faultcode>%1</faultcode><faultstring>%2</faultstring><detail>%3</detail></Fault></Body>';

      LogEntryNo := 0;
      PostAction[1] := 'Init';
      ConsumedWebServiceMgt.LogCWS(LogEntryNo, PostAction, RequestXml, ResponseXml, TRUE, MessageId);
      CLEARLASTERROR();
      COMMIT;

      DebugSaveXml(DSPSetup,RequestXml,ConsumedWebServiceLine."Method Name"+'Outbound.xml');
      ConsumedWebServiceRuntime.SetDspRuntime(TRUE,ConsumedWebServiceLine, RequestXml);
      //override general DSP url behaviour for GMf
      IF ConsumedWebServiceLine."Web Service Code" = GetTcGmf THEN BEGIN
        ConsumedWebService.GET(ConsumedWebServiceLine."Web Service Code");
        ConsumedWebServiceRuntime.SetUrl(ConsumedWebService."Web Service URL");
      END;
      IF (NOT ConsumedWebServiceRuntime.RUN) THEN BEGIN
        ConsumedWebServiceRuntime.GetRuntime(ResponseXml, HTTPWebResponse);
        ConsumedWebServiceMgt.ProcessRuntimeFault(PostAction);
        IF ISNULL(ResponseXml) THEN BEGIN
          PostAction[1] := 'InternalError';
          PostAction[2] := HTTPWebResponse.ToString;
          PostAction[3] := GETLASTERRORTEXT;
          ConsumedWebServiceMgt.LogCWS(LogEntryNo, PostAction, RequestXml, ResponseXml, FALSE, MessageId);
          COMMIT;
        END ELSE BEGIN
          PostAction[1] := 'CommunicationError';
          PostAction[2] := HTTPWebResponse.ToString;
          PostAction[3] := STRSUBSTNO('%1: %2', GETLASTERRORTEXT, PostAction[3]);
          ResponseXml.LoadXml(STRSUBSTNO(SOAPFaultString, PostAction[2], PostAction[1], PostAction[3]));
          ConsumedWebServiceMgt.LogCWS(LogEntryNo, PostAction, RequestXml, ResponseXml, TRUE, MessageId);
          COMMIT;
        END;
      //  ProcessRuntimeFault(Postaction);
        EXIT(FALSE);
      END;
      ConsumedWebServiceRuntime.GetRuntime(ResponseXml, HTTPWebResponse);
      DebugSaveXml(DSPSetup,ResponseXml,ConsumedWebServiceLine."Method Name"+'Inbound.xml');
      EXIT(TRUE);
    END;

    PROCEDURE SerializeToBlob@1100528418(VAR TempBlob@1100528300 : TEMPORARY Record 99008535;DnObjectIn@1100528301 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object");
    VAR
      DotnetFunctions@1100528302 : Codeunit 11126712;
    BEGIN
      DotnetFunctions.SerializeToBlob(TempBlob, DnObjectIn);
    END;

    PROCEDURE ServiceObjectChanged@1100528391(DspAssignmentEntryNo@1100525001 : BigInteger) : Boolean;
    VAR
      DSPAssignment@1100528800 : Record 11126740;
      DSPAssignmentPrev@1100528801 : Record 11126740;
      Xpath@1100528304 : Text;
      DnXmlDocument@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DnXmlDocumentPrev@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF NOT GetPreviousProcessedDspAssignment(DspAssignmentEntryNo, DSPAssignmentPrev) THEN
        EXIT(FALSE);

      DSPAssignmentPrev.GetXmlMessage(DnXmlDocumentPrev);

      DSPAssignment.GET(DspAssignmentEntryNo);
      DSPAssignment.GetXmlMessage(DnXmlDocument);

      Xpath := '//*[local-name()="Versienummer"]';
      IF (XmlDocFindNodeText(DnXmlDocumentPrev, Xpath) <> XmlDocFindNodeText(DnXmlDocument, Xpath)) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE ServiceOrderChanged@1100525056(DspAssignmentEntryNo@1100525001 : BigInteger) : Boolean;
    VAR
      DSPAssignment@1100528800 : Record 11126740;
      DSPAssignmentPrev@1100528801 : Record 11126740;
      Xpath@1100528304 : Text;
      DnXmlDocument@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DnXmlDocumentPrev@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF NOT GetPreviousProcessedDspAssignment(DspAssignmentEntryNo, DSPAssignmentPrev) THEN
        EXIT(FALSE);

      DSPAssignmentPrev.GetXmlMessage(DnXmlDocumentPrev);

      DSPAssignment.GET(DspAssignmentEntryNo);
      DSPAssignment.GetXmlMessage(DnXmlDocument);

      Xpath := '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Emailadres"]';
      IF (XmlDocFindNodeText(DnXmlDocumentPrev, Xpath) <> XmlDocFindNodeText(DnXmlDocument, Xpath)) THEN
        EXIT(TRUE);
      Xpath := '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Aanhef"]';
      IF (XmlDocFindNodeText(DnXmlDocumentPrev, Xpath) <> XmlDocFindNodeText(DnXmlDocument, Xpath)) THEN
        EXIT(TRUE);
      Xpath := '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Achternaam"]';
      IF (XmlDocFindNodeText(DnXmlDocumentPrev, Xpath) <> XmlDocFindNodeText(DnXmlDocument, Xpath)) THEN
        EXIT(TRUE);
      Xpath := '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Voorletters"]';
      IF (XmlDocFindNodeText(DnXmlDocumentPrev, Xpath) <> XmlDocFindNodeText(DnXmlDocument, Xpath)) THEN
        EXIT(TRUE);
      Xpath := '//*[local-name()="ContactpersoonKlant"]/*[local-name()="Tussenvoegsel"]';
      IF (XmlDocFindNodeText(DnXmlDocumentPrev, Xpath) <> XmlDocFindNodeText(DnXmlDocument, Xpath)) THEN
        EXIT(TRUE);
      IF (FindNodeContactpersoonKlantTelefoonnummer(DnXmlDocumentPrev) <> FindNodeContactpersoonKlantTelefoonnummer(DnXmlDocument)) THEN
        EXIT(TRUE);
      IF (FindNodeContactpersoonKlantMobielnummer(DnXmlDocumentPrev) <> FindNodeContactpersoonKlantMobielnummer(DnXmlDocument)) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE ServiceTextChanged@1100525063(DspAssignmentEntryNo@1100525001 : BigInteger) : Boolean;
    VAR
      DSPAssignment@1100528306 : Record 11126740;
      DSPAssignmentPrev@1100528305 : Record 11126740;
      TempBlob@1100528304 : TEMPORARY Record 99008535;
      Xpath@1100528303 : Text;
      DnXmlDocument@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DnXmlDocumentPrev@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF NOT GetPreviousProcessedDspAssignment(DspAssignmentEntryNo, DSPAssignmentPrev) THEN
        EXIT(FALSE);

      DSPAssignmentPrev.CALCFIELDS("Xml Message");
      TempBlob.Blob := DSPAssignmentPrev."Xml Message";
      GetXmlDocument(TempBlob, DnXmlDocumentPrev);

      DSPAssignment.GET(DspAssignmentEntryNo);
      DSPAssignment.CALCFIELDS("Xml Message");
      TempBlob.Blob := DSPAssignment."Xml Message";
      GetXmlDocument(TempBlob, DnXmlDocument);

      IF (FindNodeOpmerkingOpmerkingReden(DnXmlDocumentPrev) <> FindNodeOpmerkingOpmerkingReden(DnXmlDocument)) THEN
        EXIT(TRUE);
      IF (FindNodeOpmerkingToelichting(DnXmlDocumentPrev) <> FindNodeOpmerkingToelichting(DnXmlDocument)) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE SetServiceOrderDspOrderType@1100528420(ServiceOrderNo@1100528301 : Code[20]);
    VAR
      ServiceOrder@1100528300 : Record 11012823;
    BEGIN
      ServiceOrder.GET(ServiceOrderNo);
      ServiceOrder."Dsp Order Type" := GetServiceOrderDspOrderType(ServiceOrderNo);
      ServiceOrder.MODIFY;
    END;

    PROCEDURE SetServiceOrderSpecLineNewValue@1100528440(ServiceOrderNo@1100529901 : Code[20];ObjectNo@1100529902 : Code[20];LineCode@1100528300 : Code[10];NewValue@1100528301 : Text) : Boolean;
    VAR
      ServiceOrderObjSpecLine@1100529900 : Record 11071782;
    BEGIN
      ServiceOrderObjSpecLine.SETRANGE("Service Order No.", ServiceOrderNo);
      ServiceOrderObjSpecLine.SETRANGE("Specification Code",LineCode);
      ServiceOrderObjSpecLine.SETRANGE("Specification Group Code", GetTcDsp);
      ServiceOrderObjSpecLine.SETRANGE("Service Object No.", ObjectNo);
      IF (ServiceOrderObjSpecLine.FINDFIRST) THEN BEGIN
        ServiceOrderObjSpecLine.VALIDATE("New Value", COPYSTR(NewValue, 1, MAXSTRLEN(ServiceOrderObjSpecLine."New Value")));
        ServiceOrderObjSpecLine.MODIFY(TRUE);
      END;
    END;

    PROCEDURE SetServiceOrderSpecLineOldValue@1100528358(ServiceOrderNo@1100529901 : Code[20];ObjectNo@1100529902 : Code[20];LineCode@1100528300 : Code[10];OldValue@1100528301 : Text) : Boolean;
    VAR
      ServiceOrderObjSpecLine@1100529900 : Record 11071782;
    BEGIN
      ServiceOrderObjSpecLine.SETRANGE("Service Order No.", ServiceOrderNo);
      ServiceOrderObjSpecLine.SETRANGE("Specification Code",LineCode);
      ServiceOrderObjSpecLine.SETRANGE("Specification Group Code", GetTcDsp);
      ServiceOrderObjSpecLine.SETRANGE("Service Object No.", ObjectNo);
      IF (ServiceOrderObjSpecLine.FINDFIRST) THEN BEGIN
        ServiceOrderObjSpecLine.VALIDATE("Old Value", COPYSTR(OldValue, 1, MAXSTRLEN(ServiceOrderObjSpecLine."Old Value")));
        ServiceOrderObjSpecLine.MODIFY(TRUE);
      END;
    END;

    PROCEDURE SUPRecordingChanged@1100528324(DSPAssignmentEntryNo@1100528300 : BigInteger) : Boolean;
    VAR
      DSPAssignment@1100528306 : Record 11126740;
      DSPAssignmentPrev@1100528305 : Record 11126740;
      XMLDOMManagement@1100528304 : Codeunit 6224;
      Counter@1100528308 : Integer;
      NodeCount@1100528307 : Integer;
      Xpath@1100528303 : Text;
      XpathForLoop@1100528309 : Text;
      UnitPriceCode@1100528310 : Text;
      DnXmlDocument@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DnXmlDocumentPrev@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF NOT GetPreviousProcessedDspAssignment(DSPAssignmentEntryNo, DSPAssignmentPrev) THEN
        EXIT(FALSE);

      DSPAssignmentPrev.GetXmlMessage(DnXmlDocumentPrev);

      DSPAssignment.GET(DSPAssignmentEntryNo);
      DSPAssignment.GetXmlMessage(DnXmlDocument);

      Xpath := '//*[local-name()="Opdrachtbericht"]/*[local-name()="Opdrachtregel"]';
      NodeCount := XMLDOMManagement.FindNodeCount(DnXmlDocument, Xpath);
      IF (NodeCount = 0) THEN EXIT;

      FOR Counter := 1 TO NodeCount DO BEGIN
        XpathForLoop := STRSUBSTNO('%1[%2]', Xpath, Counter);

        CASE TRUE OF
          (GetDspVersionFirst(TRUE)  = DSPAssignmentPrev."Version No."):
            UnitPriceCode := XmlDocFindNodeText(DnXmlDocumentPrev, XpathForLoop + '/*[local-name()="Opdrachtregel"]');
          (GetDspVersionSecond(TRUE)  = DSPAssignmentPrev."Version No."):
            UnitPriceCode := XmlDocFindNodeText(DnXmlDocumentPrev, XpathForLoop + '/*[local-name()="Bestekcode"]');
        END;
        CASE TRUE OF
          (GetDspVersionFirst(TRUE)  = DSPAssignment."Version No."):
            IF (UnitPriceCode <> XmlDocFindNodeText(DnXmlDocument, XpathForLoop + '/*[local-name()="Opdrachtregel"]')) THEN
              EXIT(TRUE);
          (GetDspVersionSecond(TRUE)  = DSPAssignment."Version No."):
            IF (UnitPriceCode <> XmlDocFindNodeText(DnXmlDocument, XpathForLoop + '/*[local-name()="Bestekcode"]')) THEN
              EXIT(TRUE);
        END;
        IF (XmlDocFindNodeText(DnXmlDocumentPrev, XpathForLoop + '/*[local-name()="Aantal"]') <>
            XmlDocFindNodeText(DnXmlDocument, XpathForLoop + '/*[local-name()="Aantal"]'))
        THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE TransformM10AddWorkOrder@1100528481(ConsumedWebServiceLine@1100528300 : Record 11229798;RequestXml@1100528301 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLdocSoapEnvelope@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";RequestNamespaceManager@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager");
    VAR
      XMLDOMManagement@1100528317 : Codeunit 6224;
      Counter@1100528312 : Integer;
      Counter2@1100528311 : Integer;
      Xpath@1100528308 : Text;
      MessageNode@1100528307 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DnXmlChildNode@1100528306 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DnXmlNode@1100528305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ModelNode@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      AdressNode@1100528309 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DisciplineList@1100528310 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      DisciplinesNode@1100528313 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DisciplineNode@1100528314 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FieldsList@1100528319 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      FieldsNode@1100528315 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FieldNode@1100528318 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FieldWorkScheduleNode@1100528316 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      //copy all data from M10 to SoapEnvelope GMX standard
      Xpath := STRSUBSTNO('//%1:%2',ConsumedWebServiceLine."Prefix Method Namespace",ConsumedWebServiceLine."Request Root Tag");
      MessageNode := XMLdocSoapEnvelope.SelectSingleNode(Xpath,RequestNamespaceManager);
      XMLDOMManagement.AddElement(MessageNode, 'regionCode', XmlDocFindNodeText(RequestXml,'//*[local-name()="RegionCode"]'), '', DnXmlNode);
      XMLDOMManagement.AddElement(MessageNode, 'model', '', '', ModelNode);
      XMLDOMManagement.AddElement(ModelNode, 'ProjectNo', XmlDocFindNodeText(RequestXml,'//*[local-name()="ProjectNummer"]'), '', DnXmlNode);
      XMLDOMManagement.AddElement(ModelNode, 'KlicReference', XmlDocFindNodeText(RequestXml,'//*[local-name()="KlicReferentie"]'), '', DnXmlNode);
      IF XmlDocFindNodeText(RequestXml,'//*[local-name()="KlicReferentie"]') <> '' THEN
        XMLDOMManagement.AddElement(ModelNode, 'WorkOrderType', '2', '', DnXmlNode);//2=klic, 1 = bag, 0 = none, optional field
      //XMLDOMManagement.AddElement(ModelNode, 'IntegrationId', XmlDocFindNodeText(RequestXml,'//*[local-name()="IntegrationId"]'), '', DnXmlNode);
      XMLDOMManagement.AddElement(ModelNode, 'IntegrationId',CREATEGUID, '', DnXmlNode);//in AL decide what to do with IntegrationID on this level
      XMLDOMManagement.AddElement(ModelNode, 'Address', '', '', AdressNode);
      XMLDOMManagement.AddElement(AdressNode, 'City', XmlDocFindNodeText(RequestXml,'//*[local-name()="Plaats"]'), '', DnXmlNode);
      XMLDOMManagement.AddElement(AdressNode, 'Street', XmlDocFindNodeText(RequestXml,'//*[local-name()="Straat"]'), '', DnXmlNode);
      XMLDOMManagement.AddElement(AdressNode, 'PostalCode', XmlDocFindNodeText(RequestXml,'//*[local-name()="PostCode"]'), '', DnXmlNode);
      XMLDOMManagement.AddElement(AdressNode, 'BuildingNo', XmlDocFindNodeText(RequestXml,'//*[local-name()="HuisNummer"]'), '', DnXmlNode);
      XMLDOMManagement.AddElement(AdressNode, 'Addition', XmlDocFindNodeText(RequestXml,'//*[local-name()="Toevoeging"]'), '', DnXmlNode);
      IF XMLDOMManagement.FindNodes(RequestXml,'//*[local-name()="Discipline"]', DisciplineList) THEN
        FOR Counter := 0 TO DisciplineList.Count - 1 DO BEGIN
          DisciplineNode := DisciplineList.Item(Counter);
          XMLDOMManagement.AddElement(ModelNode, 'Disciplines', '', '', DisciplinesNode);
          XMLDOMManagement.AddElement(DisciplinesNode, 'FormCode', XmlDocFindNodeText(DisciplineNode,'./*[local-name()="FormulierCode"]'), '', DnXmlNode);
          IF XMLDOMManagement.FindNodes(DisciplineNode,'.//*[local-name()="Veld"]', FieldsList) THEN
            FOR Counter2 := 0 TO FieldsList.Count - 1 DO BEGIN
              FieldNode := FieldsList.Item(Counter2);
              XMLDOMManagement.AddElement(DisciplinesNode, 'Fields', '', '', FieldsNode);
              XMLDOMManagement.AddElement(FieldsNode, 'Code', XmlDocFindNodeText(FieldNode,'./*[local-name()="Naam"]'), '', DnXmlNode);
              XMLDOMManagement.AddElement(FieldsNode, 'Data', XmlDocFindNodeText(FieldNode,'./*[local-name()="Waarde"]'), '', DnXmlNode);
            END;
        END;
      XMLDOMManagement.AddElement(ModelNode, 'FieldWorkSchedule', '', '', FieldWorkScheduleNode);
      //for now, leave empty XMLDOMManagement.AddElement(FieldWorkScheduleNode, 'UserName', XmlDocFindNodeText(RequestXml,'//*[local-name()="Medewerker"]'), '', DnXmlNode);
      XMLDOMManagement.AddElement(FieldWorkScheduleNode, 'ScheduledOn', XmlDocFindNodeText(RequestXml,'//*[local-name()="PlanDatum"]'), '', DnXmlNode);
      XMLDOMManagement.AddElement(MessageNode, 'PlatformUser', GetGmfPlatformUser, '', DnXmlNode);
    END;

    PROCEDURE TransformM10toSoap@1100528480(ConsumedWebServiceLine@1100528300 : Record 11229798;SourceNode@1100528301 : Text;TargetNode@1100528302 : Text;RequestXml@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XmlDocSoapEnvelope@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      RequestNamespaceManager@1100528305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      XmlSourceNode@1100528306 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlCopyNode@1100528307 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlTargetNode@1100528308 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      DebugSaveXml(DSPSetup,RequestXml,ConsumedWebServiceLine."Method Name"+'OutboundM10.xml');
      ConsumedWebServiceMgt.CreateRequest(ConsumedWebServiceLine."Web Service Code",ConsumedWebServiceLine."Seq. No.",XmlDocSoapEnvelope,RequestNamespaceManager);
      DebugSaveXml(DSPSetup,XmlDocSoapEnvelope,ConsumedWebServiceLine."Method Name"+'Outbound_CU1297SoapEnv.xml');
      CASE TRUE OF
        (ConsumedWebServiceLine."Web Service Code" = GetTcGmf) AND
        (ConsumedWebServiceLine."Seq. No."= GetSeqNoAddWorkOrder) :
          TransformM10AddWorkOrder(ConsumedWebServiceLine, RequestXml, XmlDocSoapEnvelope, RequestNamespaceManager);
      //  NOT ((ConsumedWebServiceLine."Web Service Code" = GetTcGmf) AND
      //        (ConsumedWebServiceLine."Seq. No."= GetSeqNoAddWorkOrder)): BEGIN
      //    XmlSourceNode := XmlDocSoapEnvelope.ImportNode(RequestXml.SelectSingleNode(SourceNode),TRUE);
      //    XmlTargetNode := XmlDocSoapEnvelope.SelectSingleNode(TargetNode,RequestNamespaceManager);
      //    XmlTargetNode.InnerXml :=  XmlSourceNode.InnerXml;
      //  END;
        ELSE
          ERROR(Text001, 'TransformM10toSoap', SourceNode);
      END;
      DebugSaveXml(DSPSetup,XmlDocSoapEnvelope,ConsumedWebServiceLine."Method Name"+'Outbound_CU1297SoapEnvContent.xml');
    END;

    PROCEDURE UpdateReferencePoint@1100529923(ObjectNo@1100525000 : Code[20];ReferencePoint@1100525003 : Integer);
    BEGIN
      UpdateReferencePoint2(ObjectNo, ReferencePoint, CURRENTDATETIME);
    END;

    PROCEDURE UpdateReferencePoint2@1100528438(ObjectNo@1100525000 : Code[20];ReferencePoint@1100525003 : Integer;DateTime@1100528300 : DateTime);
    VAR
      DocumentReferencePoint@1100525001 : Record 11020296;
    BEGIN
      IF (ReferencePoint = 0) THEN
        EXIT;
      DocumentReferencePoint.InsertDocRefPointWithNo(2, ObjectNo, ReferencePoint, DT2DATE(DateTime), DT2TIME(DateTime));
    END;

    LOCAL PROCEDURE "---Locals---"@1100529901();
    BEGIN
    END;

    LOCAL PROCEDURE FillDspOrderType@1100528419(VAR OrderTypeDsp@1100528300 : Code[30];ProcessType@1100528301 : Code[10]);
    BEGIN
      IF (OrderTypeDsp <> '') THEN OrderTypeDsp += '-';
        OrderTypeDsp += ProcessType;
    END;

    LOCAL PROCEDURE XmlDocFindNodeText@1100528494(XmlDocument@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Xpath@1100528302 : Text) NodeText : Text;
    VAR
      XMLDOMManagement@1100528301 : Codeunit 6224;
    BEGIN
      NodeText := XMLDOMManagement.FindNodeText(XmlDocument, Xpath);
    END;

    BEGIN
    END.
  }
}

