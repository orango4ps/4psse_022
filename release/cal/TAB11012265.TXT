OBJECT Table 11012265 Installment Overview
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnDelete=VAR
               lvInstallmOvLinesRec@1100485000 : Record 11012266;
             BEGIN
               lvInstallmOvLinesRec.SETRANGE("Project No.","Project No.");
               lvInstallmOvLinesRec.SETRANGE(Principal,Principal);
               lvInstallmOvLinesRec.SETRANGE("Installment Overview","No.");
               lvInstallmOvLinesRec.DELETEALL;
             END;

    CaptionML=[ENU=Installment Overview;
               NOR=Oversikt over avdrag;
               SVE=Betalplans”versikt];
    LookupPageID=Page11020557;
    DrillDownPageID=Page11020557;
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr];
                                                   NotBlank=Yes }
    { 20  ;   ;Principal           ;Code20        ;TableRelation="Project Principal".Principal WHERE (Project No.=FIELD(Project No.));
                                                   CaptionML=[ENU=Principal;
                                                              NOR=Oppdragsgiver;
                                                              SVE=Uppdragsgivare];
                                                   NotBlank=Yes }
    { 30  ;   ;No.                 ;Integer       ;CaptionML=[ENU=No.;
                                                              NOR=Nr;
                                                              SVE=Nr] }
    { 40  ;   ;First Motivation Date;Date         ;TableRelation="Installment Motivation"."Production Date" WHERE (Project No.=FIELD(Project No.),
                                                                                                                   Principal=FIELD(Principal));
                                                   OnValidate=BEGIN
                                                                CheckLinesPresent;  //DP01485
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=From Installment Motivation;
                                                              NOR=Fra avdragsmotivasjon;
                                                              SVE=Fr†n avbetalningsmotivation] }
    { 50  ;   ;Last Motivation Date;Date          ;TableRelation="Installment Motivation"."Production Date" WHERE (Project No.=FIELD(Project No.),
                                                                                                                   Principal=FIELD(Principal));
                                                   OnValidate=BEGIN
                                                                CheckLinesPresent;  //DP01485
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=To Installment Motivation;
                                                              NOR=Til avdragsmotivasjon;
                                                              SVE=Till avbetalningsmotivation] }
    { 60  ;   ;First Motivation Description;Text30;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Installment Motivation".Comment WHERE (Project No.=FIELD(Project No.),
                                                                                                              Principal=FIELD(Principal),
                                                                                                              Production Date=FIELD(First Motivation Date)));
                                                   CaptionML=[ENU=From Installment Motivation Description;
                                                              NOR=Fra Beskrivelse av Avdragsmotivasjon;
                                                              SVE=Fr†n beskrivning av avbetalningsmotivation];
                                                   Editable=No }
    { 61  ;   ;First Motivation Period;Code10     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Installment Motivation"."Installment Motivation Period" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                      Principal=FIELD(Principal),
                                                                                                                                      Production Date=FIELD(First Motivation Date)));
                                                   CaptionML=ENU=Installment Motivation Period (First Production Date);
                                                   Description=DP01490;
                                                   Editable=No }
    { 70  ;   ;Last Motivation Description;Text30 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Installment Motivation".Comment WHERE (Project No.=FIELD(Project No.),
                                                                                                              Principal=FIELD(Principal),
                                                                                                              Production Date=FIELD(Last Motivation Date)));
                                                   CaptionML=[ENU=To Installment Motivation Description;
                                                              NOR=Til Beskrivelse av Avdragsmotivasjon;
                                                              SVE=Till avbetalningsmotivationsbeskrivning];
                                                   Editable=No }
    { 71  ;   ;Last Motivation Period;Code10      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Installment Motivation"."Installment Motivation Period" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                      Principal=FIELD(Principal),
                                                                                                                                      Production Date=FIELD(Last Motivation Date)));
                                                   CaptionML=ENU=Installment Motivation Period (Last Production Date);
                                                   Description=DP01490;
                                                   Editable=No }
    { 80  ;   ;Installments Created;Boolean       ;CaptionML=[ENU=Installments Created;
                                                              NOR=Opprettede avdrag;
                                                              SVE=Skapade avbetalningar];
                                                   Editable=No }
    { 90  ;   ;Installments Created on;Date       ;CaptionML=[ENU=Installments Created on;
                                                              NOR=Avdrag ble opprettet den;
                                                              SVE=Betalplaner skapades den];
                                                   Editable=No }
    { 100 ;   ;Production Value Cum. (LCY);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Installment Overview Line"."Production Value Cum. (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                    Principal=FIELD(Principal),
                                                                                                                                    Installment Overview=FIELD(No.),
                                                                                                                                    Entry Type=CONST(Normal)));
                                                   CaptionML=ENU=Production Value Cumulative (LCY);
                                                   Editable=No }
    { 101 ;   ;Production Value Cum. (FCY);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Installment Overview Line"."Production Value Cum. (FCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                    Principal=FIELD(Principal),
                                                                                                                                    Installment Overview=FIELD(No.),
                                                                                                                                    Entry Type=CONST(Normal)));
                                                   CaptionML=[ENU=Production Value Cumulative;
                                                              NOR=Akkumulert produksjonsverdi;
                                                              SVE=Ackumulerat produktionsv„rde];
                                                   Editable=No }
    { 110 ;   ;Excess Prod. Value Cum. (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Installment Overview Line"."Production Value Cum. (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                    Principal=FIELD(Principal),
                                                                                                                                    Installment Overview=FIELD(No.),
                                                                                                                                    Entry Type=CONST(Excess)));
                                                   CaptionML=ENU=Excess Prod. Value Cumulative (LCY);
                                                   Editable=No }
    { 111 ;   ;Excess Prod. Value Cum. (FCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Installment Overview Line"."Production Value Cum. (FCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                    Principal=FIELD(Principal),
                                                                                                                                    Installment Overview=FIELD(No.),
                                                                                                                                    Entry Type=CONST(Excess)));
                                                   CaptionML=[ENU=Excess Prod. Value Cumulative;
                                                              NOR=Akkumulert overfl›dig produksjonsverdi;
                                                              SVE=™verskjutande prod. Ackumulerat v„rde];
                                                   Editable=No }
    { 120 ;   ;Extra Prod. Value Cum. (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Installment Overview Line"."Production Value Cum. (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                    Principal=FIELD(Principal),
                                                                                                                                    Installment Overview=FIELD(No.),
                                                                                                                                    Entry Type=CONST(Extra)));
                                                   CaptionML=ENU=Extra Production Value Cumulative (LCY);
                                                   Editable=No }
    { 121 ;   ;Extra Prod. Value Cum. (FCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Installment Overview Line"."Production Value Cum. (FCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                                                    Principal=FIELD(Principal),
                                                                                                                                    Installment Overview=FIELD(No.),
                                                                                                                                    Entry Type=CONST(Extra)));
                                                   CaptionML=[ENU=Extra Production Value Cumulative;
                                                              NOR=Akkumulert ekstra produksjonsverdi;
                                                              SVE=Ackumulerat extra produktionsv„rde];
                                                   Editable=No }
    { 130 ;   ;Final Installment Created;Boolean  ;CaptionML=[ENU=Final Installment Created;
                                                              NOR=Siste avdrag opprettet;
                                                              SVE=Slutlig avbetalning skapad];
                                                   Editable=No }
    { 140 ;   ;Final Installment Created on;Date  ;CaptionML=[ENU=Final Installment Created on;
                                                              NOR=Siste avdrag opprettet den;
                                                              SVE=Slutlig avbetalning skapad den];
                                                   Editable=No }
    { 170 ;   ;Installment Overview Period;Code10 ;OnValidate=BEGIN
                                                                CheckLinesPresent;  //DP01485
                                                              END;

                                                   CaptionML=ENU=Installment Overview Period;
                                                   Description=DP01485;
                                                   Editable=No }
    { 200 ;   ;Currency Code       ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Principal"."Currency Code" WHERE (Project No.=FIELD(Project No.),
                                                                                                                 Principal=FIELD(Principal)));
                                                   TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              NOR=Valutakode;
                                                              SVE=Valutakod];
                                                   Description=DP00886;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Project No.,Principal,No.               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text002@1100525000 : TextConst 'ENU=Invoice Period: %1 (%2)';
      Text003@1100485002 : TextConst 'ENU=Final Installment;NOR=Innest†ende bel›p;SVE=Slutfaktura';
      Text004@1100485003 : TextConst 'ENU=Installment OVerviews must be numbered sequential. The next free number is %1.;NOR=Betalingsplansoversikter m† nummereres sekvensielt. Det neste ledige nummeret er %1.;SVE=Betalplans”versikter m†ste numreras sekventiellt. N„sta lediga nummer „r %1.';
      Text007@1100529001 : TextConst 'ENU="Not allowed, already %1 present ";NOR=Ikke tillatt, %1 finnes allerede.;SVE="Žr inte till†tet, %1 finns redan. "';
      Text008@1100528800 : TextConst 'ENU=Invoicing with Fixed Installment Amounts is not possible when using different VAT-percentages;NOR=Fakturering med faste avdragsbel›p er ikke mulig n†r man bruker ulike mva.-satser;SVE=Fakturering med fasta avbetalningsbelopp „r inte m”jligt n„r man anv„nder olika moms-andelar';
      Text009@1210190000 : TextConst 'ENU=Fixed Installment Amount may not be equal to 0;NOR=Fast Avdragsbel›p kan ikke v‘re lik 0;SVE=Fast avbetalningsbelopp f†r inte vara lika med 0';
      VATCalcOnly@1210190001 : Boolean;
      VATAmountToInvoice@1210190002 : Decimal;

    PROCEDURE RunCreateInstallOverviewLines@1100529000();
    VAR
      InstallmOvLine@1100529000 : Record 11012266;
      InstallmMot@1100529003 : Record 11012471;
      ProdDateSelection@1100529001 : Report 11012181;
      ProdDateTo@1100529002 : Date;
    BEGIN
      //*DP00089.n
      TESTFIELD("Project No.");
      TESTFIELD(Principal);
      TESTFIELD("No.");
      //C060000.sn
      IF NOT FIND('=') THEN BEGIN
        INSERT;
        COMMIT;
      END;
      //C060000.en

      InstallmOvLine.SETRANGE("Project No.","Project No.");
      InstallmOvLine.SETRANGE(Principal,Principal);
      InstallmOvLine.SETRANGE("Installment Overview","No.");
      IF NOT InstallmOvLine.ISEMPTY THEN
        ERROR(Text007, InstallmOvLine.TABLECAPTION);

      GetRangeProductionDate;  //DP01485

      ProdDateSelection.SetSelections(Rec);
      ProdDateSelection.RUNMODAL;
      ProdDateTo := ProdDateSelection.GetProdDateTo();
      IF ProdDateTo = 0D THEN
        ERROR('');
      IF ProdDateTo < "Last Motivation Date" THEN BEGIN
        InstallmMot.SETRANGE("Project No.", "Project No.");
        InstallmMot.SETRANGE(Principal, Principal);
        InstallmMot.SETRANGE("Production Date", "First Motivation Date", "Last Motivation Date");
        InstallmMot.FILTERGROUP(9);  //C063058: however InstallmMot is a local variable, usage of filtergroup 1 will suppress records on list page !
        InstallmMot.SETFILTER("Production Date", '<=%1', ProdDateTo);
        InstallmMot.FILTERGROUP(0);
        InstallmMot.SETRANGE(Status, InstallmMot.Status::Approved);
        IF NOT InstallmMot.FINDLAST THEN
          ERROR('');
        "Last Motivation Date" := InstallmMot."Production Date";
        MODIFY;
      END;
      CreateInstallOverviewLines;
    END;

    PROCEDURE CreateInstallOverviewLines@1100485000();
    VAR
      InstallmentMotivationLine@1100485000 : Record 11012472;
      InstallmentOverviewLine@1100485001 : Record 11012266;
      PrevInstallmentOverviewLine@1100485010 : Record 11012266;
      PrevInstallmentMotivationLine@1100485002 : Record 11012472;
      ProjectPrincipal@1100485005 : Record 11012005;
      TenderParagraphbyPrincipal@1100485014 : Record 11012470;
      RAWCU@1100485008 : Codeunit 11012164;
      NormalProd@1100485004 : Decimal;
      SettledExcessProd@1100485003 : Decimal;
      PrevNormalProd@1100485007 : Decimal;
      PrevSettledExcessProd@1100485006 : Decimal;
      ProdValThisPeriod@1100485009 : Decimal;
      ContractAmount@1100485015 : Decimal;
      TotalAmount@1100529400 : Decimal;
      TotalExcessProd@1210190000 : Decimal;
      PrevTotalExcessProd@1210190001 : Decimal;
      AmountExceedingMaximum@1210190002 : Decimal;
      InstallmentOverview@1100528900 : Record 11012265;
      PrevOverview@1100528901 : Integer;
    BEGIN
      ProdValThisPeriod := 0;

      ProjectPrincipal.GET("Project No.", Principal);

      InstallmentMotivationLine.SETRANGE("Project No.", "Project No.");
      InstallmentMotivationLine.SETRANGE(Principal, Principal);
      InstallmentMotivationLine.SETRANGE("Production Date", "Last Motivation Date");  //DP01490
      InstallmentMotivationLine.SETFILTER(Type, '<>%1&<>%2',
        //InstallmentMotivationLine.Type::Discount,  //C040262
        InstallmentMotivationLine.Type::Surcharge,
        InstallmentMotivationLine.Type::Execution);  //DP01488
      IF InstallmentMotivationLine.FINDFIRST THEN BEGIN
        WITH InstallmentOverviewLine DO BEGIN
          INIT; //C041137.n
          //search last installment motivation line of the previous installment overview
          PrevInstallmentMotivationLine.SETRANGE("Project No.", Rec."Project No.");
          PrevInstallmentMotivationLine.SETRANGE(Principal, Rec.Principal);
          PrevInstallmentMotivationLine.SETFILTER("Production Date", '<%1', "First Motivation Date");
          REPEAT
            //first insert line for normal consumption
            PrevInstallmentMotivationLine.SETRANGE("Extension Contract", InstallmentMotivationLine."Extension Contract");
            PrevInstallmentMotivationLine.SETRANGE("Tender Paragraph No.", InstallmentMotivationLine."Tender Paragraph No.");
            IF NOT PrevInstallmentMotivationLine.FINDLAST THEN BEGIN
              PrevInstallmentMotivationLine."Production Cumulative" := 0;
              PrevInstallmentMotivationLine."Production Value Cum. (LCY)" := 0;
              PrevInstallmentMotivationLine."Production Value Cum. (FCY)" := 0;  //DP00886
            END;
            "Project No." := Rec."Project No.";
            Principal := Rec.Principal;
            "Installment Overview" := Rec."No.";
            "Tender Paragraph No." := InstallmentMotivationLine."Tender Paragraph No.";
            //DP01485.sn
            "Extension Contract" := InstallmentMotivationLine."Extension Contract";
            IF "Extension Contract" <> '' THEN
              "Entry Type" := "Entry Type"::Extra
            ELSE
              "Entry Type" := "Entry Type"::Normal;
            //DP01485.en
            //cumulatives of last motivation are the ones we want here
            SetCurrencyCode;  //DP00886
            "Production Value Cum. (LCY)" := InstallmentMotivationLine."Production Value Cum. (LCY)";
            "Production Value Cum. (FCY)" := InstallmentMotivationLine."Production Value Cum. (FCY)";  //DP00886
            "Production Cumulative" := InstallmentMotivationLine."Production Cumulative";
            "Production (Adjustment)" := InstallmentMotivationLine."Production (Adjustment)";  //DP01489
            RAWCU.DetermineExcessProd(
              InstallmentMotivationLine, NormalProd ,SettledExcessProd, TotalExcessProd);
            RAWCU.DetermineExcessProd(
              PrevInstallmentMotivationLine, PrevNormalProd, PrevSettledExcessProd, PrevTotalExcessProd);
            Production := NormalProd - PrevNormalProd + TotalExcessProd - PrevTotalExcessProd - "Production (Adjustment)";  //DP01489
            //determine total amount for determination profit & risk
            InstallmentMotivationLine.CALCFIELDS(Type);
            IF InstallmentMotivationLine.Type = InstallmentMotivationLine.Type::Normal THEN BEGIN
              //determine total amount of installment overview for determination of profit & risk entry.
              //profit * risk not over contributions
              //C041137.sn
              IF InstallmentMotivationLine."Extension Contract" = '' THEN
              //C041137.en
                IF InstallmentMotivationLine."Currency Code" <> '' THEN  //DP00886
                  ProdValThisPeriod += InstallmentMotivationLine."Production Value Cum. (FCY)" - PrevInstallmentMotivationLine."Production Value Cum. (FCY)"
                ELSE
                  ProdValThisPeriod += InstallmentMotivationLine."Production Value Cum. (LCY)" - PrevInstallmentMotivationLine."Production Value Cum. (LCY)";
            END;
            INSERT;
            CALCFIELDS("Settlement Type"); //DP01916
            IF (InstallmentMotivationLine."Excess Prod. Value Cum. (LCY)" <> 0) OR
               (InstallmentMotivationLine."Excess Prod. Value Cum. (FCY)" <> 0) THEN BEGIN  //DP00886
              CASE "Settlement Type" OF
                "Settlement Type"::Settling:
                  BEGIN
                    "Entry Type" := "Entry Type"::Excess;
                    "Production Value Cum. (LCY)" := InstallmentMotivationLine."Excess Prod. Value Cum. (LCY)";
                    "Production Value Cum. (FCY)" := InstallmentMotivationLine."Excess Prod. Value Cum. (FCY)";  //DP00886
                    "Production Cumulative" := SettledExcessProd;
                    Production := SettledExcessProd - PrevSettledExcessProd;
                    "Production (Adjustment)" := 0;  //DP01489
                    INSERT;
                  END;
                "Settlement Type"::"Non Settling":
                  BEGIN
                    //insert line for extra declarations
                    "Entry Type" := "Entry Type"::Extra;
                    "Production Value Cum. (LCY)" := InstallmentMotivationLine."Excess Prod. Value Cum. (LCY)";
                    "Production Value Cum. (FCY)" := InstallmentMotivationLine."Excess Prod. Value Cum. (FCY)";  //DP00886
                    //C041137.sn
                    IF ProjectPrincipal."Contractor Fee" <> 0 THEN
                      VALIDATE("Production Value Cum. (LCY)",ROUND("Production Value Cum. (LCY)" * (ProjectPrincipal."Contractor Fee"/100 + 1)));
                    //
                    "Production Cumulative" := SettledExcessProd;
                    Production := SettledExcessProd - PrevSettledExcessProd;
                    "Production (Adjustment)" := 0;  //DP01489
                    INSERT;
                    IF TotalExcessProd <> 0 THEN BEGIN
                      "Entry Type" := "Entry Type"::Excess;
                      "Production Value Cum. (LCY)" := 0;
                      "Production Value Cum. (FCY)" := 0;  //DP00886
                      "Production Cumulative" := TotalExcessProd;
                      Production := TotalExcessProd - PrevTotalExcessProd;
                      "Production (Adjustment)" := 0;  //DP01489
                      INSERT;
                    END;
                  END;
              END;
            END ELSE BEGIN
              //DP01916.sn
              IF (TotalExcessProd > 0) AND (Production <> 0) AND ("Settlement Type" = "Settlement Type"::"Non Settling") THEN BEGIN
                //excess lower then 10% without settlement price
                "Entry Type" := "Entry Type"::Excess;
                "Production Value Cum. (LCY)" := 0;
                "Production Value Cum. (FCY)" := 0;
                "Production Cumulative" := TotalExcessProd;
                Production := TotalExcessProd - PrevTotalExcessProd;
                "Production (Adjustment)" := 0;
                INSERT;
              END;
              //DP01916.en
            END;
          UNTIL InstallmentMotivationLine.NEXT = 0;
        END;
      END;

      //now add execution costs, profit * risk entries
      //production will not be filled or calculated on the installment motivation, but on the installment overview (so here)
      //add profit/risc and execution costs like it is meant in RAW regulations 01.02.03 part 3a
      RAWCU.CalculateSubTotal(Rec, ContractAmount);  //returns amount (FCY/LCY) based on currency
      InstallmentMotivationLine.SETFILTER("Extension Contract", '%1', '');  //DP01491a
      InstallmentMotivationLine.SETFILTER(Type, '%1|%2',
        //InstallmentMotivationLine.Type::Discount,  //C040262
        InstallmentMotivationLine.Type::Surcharge,
        InstallmentMotivationLine.Type::Execution);  //DP01488
      IF InstallmentMotivationLine.FINDFIRST THEN BEGIN
        WITH InstallmentOverviewLine DO BEGIN
          REPEAT
            INIT; //C041137.n
            GetTenderParagraph(InstallmentMotivationLine,TenderParagraphbyPrincipal);
            //Charge these entries in the same ratio, as they are part of the whole
            //Not able to use ProjectPrincipal."Surcharge %" because there can be more then one entry of type Surcharge
            IF ProjectPrincipal."Currency Code" <> '' THEN
              TotalAmount := TenderParagraphbyPrincipal."Total Amount (FCY)"
            ELSE
              TotalAmount := TenderParagraphbyPrincipal."Total Amount (LCY)";
            IF ProjectPrincipal.GetSummaryEntriesAmount <> 0 THEN  //DP01842
              Production := ProdValThisPeriod * (TotalAmount / ProjectPrincipal.GetSummaryEntriesAmount) * ( ProjectPrincipal.GetSummaryEntriesPercentage / 100 );
            Production := ROUND(Production); //C000367.n
            "Project No." := Rec."Project No.";
            Principal := Rec.Principal;
            "Installment Overview" := Rec."No.";
            "Tender Paragraph No." := InstallmentMotivationLine."Tender Paragraph No.";
            "Extension Contract" := InstallmentMotivationLine."Extension Contract";  //DP01485
            IF "Extension Contract" <> '' THEN  //DP01485
              "Entry Type" := "Entry Type"::Extra
            ELSE
              "Entry Type" := "Entry Type"::Normal;
            SetCurrencyCode;  //DP00886
            "Production Value Cum. (LCY)" := Production;  //calculate Production is based on (contract)amount in LCY/FCY
            VALIDATE("Production Value Cum. (LCY)");  //DP00886
            "Production Cumulative" := Production;  //db: had hier (en bij veld Production) niet een uitsplitsing naar LCY/FCY moeten zijn ?
            //DP01485.sn
            InstallmentOverview.SETRANGE("Project No.", "Project No.");
            InstallmentOverview.SETRANGE(Principal, Principal);
            InstallmentOverview.SETFILTER("No.", '<%1', "Installment Overview");
            IF InstallmentOverview.FINDLAST THEN
              PrevOverview := InstallmentOverview."No."
            ELSE
              PrevOverview := 0;
            //DP01485.en
            IF PrevInstallmentOverviewLine.GET("Project No.",Principal,PrevOverview,"Tender Paragraph No.","Entry Type") THEN BEGIN  //DP01485
              "Production Value Cum. (LCY)" += PrevInstallmentOverviewLine."Production Value Cum. (LCY)";
              VALIDATE("Production Value Cum. (LCY)");  //DP00886
              "Production Cumulative" += PrevInstallmentOverviewLine."Production Cumulative";
            END;
            IF ProjectPrincipal."Installm.Motivation Method" =
              ProjectPrincipal."Installm.Motivation Method"::"Element Quantity" THEN
            BEGIN
              CALCFIELDS("Element Quantity");
              IF "Production Cumulative" > "Element Quantity" THEN BEGIN
                AmountExceedingMaximum := "Production Cumulative" - "Element Quantity";
                Production -= AmountExceedingMaximum;
                "Production Value Cum. (LCY)" -= AmountExceedingMaximum;
                VALIDATE("Production Value Cum. (LCY)");  //DP00886
                "Production Cumulative" -= AmountExceedingMaximum;
              END;
            END;
            //
            INSERT;
          UNTIL InstallmentMotivationLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE ReCreateInstallOverviewLines@1100485008();
    VAR
      InstallmentOverviewLine@1100485000 : Record 11012266;
    BEGIN
      InstallmentOverviewLine.SETRANGE("Project No.","Project No.");
      InstallmentOverviewLine.SETRANGE(Principal,Principal);
      InstallmentOverviewLine.SETRANGE("Installment Overview","No.");
      InstallmentOverviewLine.DELETEALL;
      CreateInstallOverviewLines;
    END;

    PROCEDURE Invoiced@1100485002(OverviewNo@1100528900 : Integer;VATCode@1100525000 : Code[10];ContractNo@1100525001 : Code[20];IgnoreContractFilter@1100525002 : Boolean) Result : Decimal;
    VAR
      ProjectInstallment@1100485000 : Record 11012018;
    BEGIN
      CALCFIELDS("Currency Code");  //DP00886
      ProjectInstallment.SETRANGE("Project No." , "Project No.");
      ProjectInstallment.SETRANGE(Principal, Principal);
      IF OverviewNo <> 0 THEN
        ProjectInstallment.SETFILTER("Installment Overview", '..%1', OverviewNo);  //C063218
      IF NOT IgnoreContractFilter THEN
        ProjectInstallment.SETRANGE("Extension Contract", ContractNo);  //DP01491a
      IF VATCode <> '' THEN
        ProjectInstallment.SETRANGE("VAT Prod. Posting Group", VATCode);
      IF ProjectInstallment.FINDSET THEN BEGIN
        REPEAT
          //C063218.sn
          IF "Currency Code" <> '' THEN BEGIN  //DP00886
            ProjectInstallment.CALCFIELDS("Invoiced Price");
            Result := Result + ProjectInstallment."Invoiced Price";
          END ELSE BEGIN
            ProjectInstallment.CALCFIELDS("Invoiced Price (LCY)");
            Result := Result + ProjectInstallment."Invoiced Price (LCY)";
          END;
          //C063218.en
        UNTIL ProjectInstallment.NEXT = 0;
      END;
      EXIT(Result);
    END;

    PROCEDURE ToInvoice@1100485003() : Decimal;
    BEGIN
      CALCFIELDS("Currency Code");  //DP00886
      IF "Currency Code" <> '' THEN BEGIN  //DP00886
        CALCFIELDS("Excess Prod. Value Cum. (FCY)", "Extra Prod. Value Cum. (FCY)", "Production Value Cum. (FCY)");
        EXIT("Excess Prod. Value Cum. (FCY)" + "Extra Prod. Value Cum. (FCY)" + "Production Value Cum. (FCY)" - Invoiced("No.",'','',TRUE));
      END ELSE BEGIN
        CALCFIELDS("Excess Prod. Value Cum. (LCY)", "Extra Prod. Value Cum. (LCY)", "Production Value Cum. (LCY)");
        EXIT("Excess Prod. Value Cum. (LCY)" + "Extra Prod. Value Cum. (LCY)" + "Production Value Cum. (LCY)" - Invoiced("No.",'','',TRUE));
      END;
    END;

    PROCEDURE VATToInvoice@1210190001() : Decimal;
    BEGIN
      VATAmountToInvoice := 0;
      VATCalcOnly := TRUE;
      CreateInstallments; //Virtual
      EXIT(VATAmountToInvoice);
    END;

    PROCEDURE GetProductionValue@1100485004(TotalType@1100525000 : Integer) Result : Decimal;
    VAR
      InstallmentOverview@1100485000 : Record 11012265;
    BEGIN
      //DP01485: find last Installment Overview before current with same Extension Contract
      CALCFIELDS("Currency Code");  //DP00886
      IF "Currency Code" <> '' THEN BEGIN  //DP00886
        CALCFIELDS("Production Value Cum. (FCY)");
        Result := "Production Value Cum. (FCY)";
        IF (TotalType <> 0) THEN BEGIN
          InstallmentOverview.SETRANGE("Project No.", "Project No.");
          InstallmentOverview.SETRANGE(Principal, Principal);
          InstallmentOverview.SETFILTER("No.", '<%1', "No.");
          IF InstallmentOverview.FINDLAST THEN BEGIN
            InstallmentOverview.CALCFIELDS("Production Value Cum. (FCY)");
            Result := Result - InstallmentOverview."Production Value Cum. (FCY)";
          END;
        END;
      END ELSE BEGIN
        CALCFIELDS("Production Value Cum. (LCY)");
        Result := "Production Value Cum. (LCY)";
        IF (TotalType <> 0) THEN BEGIN
          InstallmentOverview.SETRANGE("Project No.", "Project No.");
          InstallmentOverview.SETRANGE(Principal, Principal);
          InstallmentOverview.SETFILTER("No.", '<%1', "No.");
          IF InstallmentOverview.FINDLAST THEN BEGIN
            InstallmentOverview.CALCFIELDS("Production Value Cum. (LCY)");
            Result := Result - InstallmentOverview."Production Value Cum. (LCY)";
          END;
        END;
      END;
      EXIT(Result);
    END;

    PROCEDURE GetExcessProductionValue@1100485007(TotalType@1100525000 : Integer) Result : Decimal;
    VAR
      InstallmentOverview@1100485000 : Record 11012265;
    BEGIN
      //DP01485: find last Installment Overview before current with same Extension Contract
      CALCFIELDS("Currency Code");  //DP00886
      IF "Currency Code" <> '' THEN BEGIN  //DP00886
        CALCFIELDS("Excess Prod. Value Cum. (FCY)");
        Result := "Excess Prod. Value Cum. (FCY)";
        IF (TotalType <> 0) THEN BEGIN
          InstallmentOverview.SETRANGE("Project No.", "Project No.");
          InstallmentOverview.SETRANGE(Principal, Principal);
          InstallmentOverview.SETFILTER("No.", '<%1', "No.");
          IF InstallmentOverview.FINDLAST THEN BEGIN
            InstallmentOverview.CALCFIELDS("Excess Prod. Value Cum. (FCY)");
            Result := Result - InstallmentOverview."Excess Prod. Value Cum. (FCY)";
          END;
        END;
      END ELSE BEGIN
        CALCFIELDS("Excess Prod. Value Cum. (LCY)");
        Result := "Excess Prod. Value Cum. (LCY)";
        IF (TotalType <> 0) THEN BEGIN
          InstallmentOverview.SETRANGE("Project No.", "Project No.");
          InstallmentOverview.SETRANGE(Principal, Principal);
          InstallmentOverview.SETFILTER("No.", '<%1', "No.");
          IF InstallmentOverview.FINDLAST THEN BEGIN
            InstallmentOverview.CALCFIELDS("Excess Prod. Value Cum. (LCY)");
            Result := Result - InstallmentOverview."Excess Prod. Value Cum. (LCY)";
          END;
        END;
      END;
      EXIT(Result);
    END;

    PROCEDURE GetExtraProductionValue@1100485005(TotalType@1100525000 : Integer) Result : Decimal;
    VAR
      InstallmentOverview@1100485000 : Record 11012265;
    BEGIN
      //DP01485: find last Installment Overview before current with same Extension Contract
      CALCFIELDS("Currency Code");  //DP00886
      IF "Currency Code" <> '' THEN BEGIN  //DP00886
        CALCFIELDS("Extra Prod. Value Cum. (FCY)");
        Result := "Extra Prod. Value Cum. (FCY)";
        IF (TotalType <> 0) THEN BEGIN
          InstallmentOverview.SETRANGE("Project No.", "Project No.");
          InstallmentOverview.SETRANGE(Principal, Principal);
          InstallmentOverview.SETFILTER("No.", '<%1', "No.");
          IF InstallmentOverview.FINDLAST THEN BEGIN
            InstallmentOverview.CALCFIELDS("Extra Prod. Value Cum. (FCY)");
            Result := Result - InstallmentOverview."Extra Prod. Value Cum. (FCY)";
          END;
        END;
      END ELSE BEGIN
        CALCFIELDS("Extra Prod. Value Cum. (LCY)");
        Result := "Extra Prod. Value Cum. (LCY)";
        IF (TotalType <> 0) THEN BEGIN
          InstallmentOverview.SETRANGE("Project No.", "Project No.");
          InstallmentOverview.SETRANGE(Principal, Principal);
          InstallmentOverview.SETFILTER("No.", '<%1', "No.");
          IF InstallmentOverview.FINDLAST THEN BEGIN
            InstallmentOverview.CALCFIELDS("Extra Prod. Value Cum. (LCY)");
            Result := Result - InstallmentOverview."Extra Prod. Value Cum. (LCY)";
          END;
        END;
      END;
      EXIT(Result);
    END;

    PROCEDURE CreateInstallments@1210190012();
    VAR
      ProjectPrincipal@1100485004 : Record 11012005;
      InstallmentOverview@1100485000 : Record 11012265;
      InstallmentOverviewLine@1100525002 : Record 11012266;
      InstallmentMotivation@1100485002 : Record 11012471;
      InstallmentMotivationLine@1100525001 : Record 11012472;
      TenderElementVATSpec@1100525003 : Record 11012476;
      TempInstallmentLines@1100525004 : TEMPORARY Record 11012018;
      VatPostingSetup@1210190000 : Record 325;
      ratio@1100525005 : Decimal;
      TotProdValueRemaining@1100528801 : Decimal;
      FirstVATProdPostingGroup@1100528802 : Code[10];
      VATBaseAmount@1210190001 : Decimal;
      InstallmentAmount@1100525000 : Decimal;
      FixedInstallmentAmount@1100525006 : Decimal;
      InvoicedAmount@1100525009 : Decimal;
      ExtensionContract@1100525008 : Record 11012004;
      TmpExtensionContract@1100525007 : TEMPORARY Record 11012004;
      TenderParagraphbyPrincipal@1100529700 : Record 11012470;
      VatProdPostGrp@1100529701 : Code[10];
    BEGIN
      //create installments for project principal, for installment overviews for which this is not done yet
      ProjectPrincipal.GET("Project No.",Principal);
      //DP01491a.sn
      ExtensionContract.SETRANGE("Project No.","Project No.");
      ExtensionContract.SETRANGE(Principal,Principal);
      IF ExtensionContract.FINDSET THEN BEGIN
        REPEAT
          TmpExtensionContract := ExtensionContract;
          TmpExtensionContract.INSERT;
        UNTIL ExtensionContract.NEXT = 0;
      END;
      //create dummy record to process overview lines for project without extension
      TmpExtensionContract.INIT;
      TmpExtensionContract."Project No." := "Project No.";
      TmpExtensionContract.Principal := Principal;
      TmpExtensionContract."Contract No." := '';
      TmpExtensionContract.INSERT;
      //DP01491a.en

      InstallmentOverview.SETRANGE("Project No.","Project No.");
      InstallmentOverview.SETRANGE(Principal,Principal);
      InstallmentOverview.SETRANGE("No.",0, "No."); //all installment overviews before and this one
      InstallmentOverview.SETRANGE("Installments Created", FALSE);
      IF (ProjectPrincipal."Installm.Motivation Method" <> ProjectPrincipal."Installm.Motivation Method"::" ") THEN BEGIN
        IF InstallmentOverview.FINDFIRST THEN BEGIN
          REPEAT
            //DP01491a.sn
            IF TmpExtensionContract.FINDFIRST THEN BEGIN
               REPEAT
            //DP01491a.en
            //Put amounts to be invoiced for this motivation in a temp buffer
            TempInstallmentLines.RESET;
            TempInstallmentLines.DELETEALL;
            //DP01485.sn
            InstallmentOverviewLine.SETRANGE("Project No.", InstallmentOverview."Project No.");
            InstallmentOverviewLine.SETRANGE(Principal, InstallmentOverview.Principal);
            InstallmentOverviewLine.SETRANGE("Extension Contract", TmpExtensionContract."Contract No.");  //DP01491a
            InstallmentOverviewLine.SETRANGE("Installment Overview", InstallmentOverview."No.");
            InstallmentOverviewLine.SETFILTER("Production Value Cum. (FCY)", '<>%1', 0);  //C061802: badfix C052201
            //DP01485.en
            IF InstallmentOverviewLine.FINDSET THEN BEGIN
              REPEAT
                TenderElementVATSpec.SETRANGE("Project No.", InstallmentOverviewLine."Project No.");
                TenderElementVATSpec.SETRANGE(Principal, InstallmentOverviewLine.Principal);
                TenderElementVATSpec.SETRANGE("Contract No.", InstallmentOverviewLine."Extension Contract");  //DP01485
                TenderElementVATSpec.SETRANGE("Tender Paragraph", InstallmentOverviewLine."Tender Paragraph No.");
                TenderElementVATSpec.SETFILTER(Amount, '<>%1', 0);  //C055570
                IF TenderElementVATSpec.FINDSET THEN BEGIN
                  REPEAT
                    TenderElementVATSpec.CALCFIELDS("Total Amount");
                    ratio := 0;
                    IF TenderElementVATSpec."Total Amount" <> 0 THEN  //C040946
                      ratio := TenderElementVATSpec.Amount/TenderElementVATSpec."Total Amount";
                    InstallmentMotivationLine.BufferAmountVAT(TempInstallmentLines,
                      InstallmentOverviewLine."Project No.",
                      InstallmentOverviewLine.Principal,
                      InstallmentOverviewLine."Extension Contract",  //DP01485
                      TenderElementVATSpec."VAT Prod. Posting Group",
                      ratio * InstallmentOverviewLine."Production Value Cum. (LCY)",
                      ratio * InstallmentOverviewLine."Production Value Cum. (FCY)");  //DP00886
                  UNTIL TenderElementVATSpec.NEXT = 0;
                END ELSE BEGIN
                  IF NOT TenderParagraphbyPrincipal.GET(InstallmentOverviewLine."Project No.", InstallmentOverviewLine.Principal, InstallmentOverviewLine."Extension Contract", InstallmentOverviewLine."Tender Paragraph No.") THEN
                    TenderParagraphbyPrincipal."VAT Prod. Posting Group" := '';
                  IF TenderParagraphbyPrincipal."VAT Prod. Posting Group" <> '' THEN
                    VatProdPostGrp :=  TenderParagraphbyPrincipal."VAT Prod. Posting Group"
                  ELSE
                    VatProdPostGrp :=  ProjectPrincipal."VAT Prod. Posting Group";
                  InstallmentMotivationLine.BufferAmountVAT(TempInstallmentLines,
                    InstallmentOverviewLine."Project No.",
                    InstallmentOverviewLine.Principal,
                    InstallmentOverviewLine."Extension Contract",  //DP01485
                    VatProdPostGrp,
                    InstallmentOverviewLine."Production Value Cum. (LCY)",
                    InstallmentOverviewLine."Production Value Cum. (FCY)");  //DP00886
                END;
              UNTIL InstallmentOverviewLine.NEXT = 0;
            END;

            IF VATCalcOnly THEN BEGIN
              IF TempInstallmentLines.FINDSET THEN
                REPEAT
                  //DP00886.sn
                  IF TempInstallmentLines."Currency Code" <> '' THEN
                    InstallmentAmount := TempInstallmentLines."Installment Amount"
                  ELSE
                    InstallmentAmount := TempInstallmentLines."Installment Amount (LCY)";
                  InvoicedAmount := Invoiced(TempInstallmentLines."Installment Overview", TempInstallmentLines."VAT Prod. Posting Group", TmpExtensionContract."Contract No.", FALSE);
                  VATBaseAmount := InstallmentAmount - InvoicedAmount;  //DP01491a
                  //DP00886.en
                  IF VatPostingSetup.GET(
                       ProjectPrincipal."VAT Bus. Posting Group",TempInstallmentLines."VAT Prod. Posting Group") THEN
                    VATAmountToInvoice += ROUND(VATBaseAmount * VatPostingSetup."VAT %" / 100);
                UNTIL TempInstallmentLines.NEXT = 0;
              EXIT;
            END;

            //Create installments for the amounts that are found above
            IF ProjectPrincipal."Invoice Installm.Motivation as" =
               ProjectPrincipal."Invoice Installm.Motivation as"::"Installment per Motivation" THEN BEGIN
              IF TempInstallmentLines.FINDSET THEN BEGIN
                REPEAT
                  //DP00886.sn
                  IF TempInstallmentLines."Currency Code" <> '' THEN
                    InstallmentAmount := TempInstallmentLines."Installment Amount"
                  ELSE
                    InstallmentAmount := TempInstallmentLines."Installment Amount (LCY)";
                  InvoicedAmount := Invoiced(TempInstallmentLines."Installment Overview", TempInstallmentLines."VAT Prod. Posting Group", TmpExtensionContract."Contract No.", FALSE);
                  InstallmentOverview.CreateInstallmentLine(
                    InstallmentAmount - InvoicedAmount,
                    TempInstallmentLines."VAT Prod. Posting Group", '', FALSE,
                    TmpExtensionContract."Contract No.");  //DP01491a
                  //DP00886.en
                UNTIL TempInstallmentLines.NEXT = 0;
              END;
            END ELSE BEGIN
              // For RAW we don't support Fixed Amounts
              // dp00109, now also create installments for based on 'Fixed Amounts'
              // dp00109.so
              //ProjectPrincipal.TESTFIELD("Invoice Installm.Motivation as",
              //  ProjectPrincipal."Invoice Installm.Motivation as"::"Installment per Motivation");
              // dp00109.eo
              // dp00109.sn
              FirstVATProdPostingGroup := '';
              TenderElementVATSpec.SETRANGE("Project No.", InstallmentOverviewLine."Project No.");
              TenderElementVATSpec.SETRANGE(Principal, InstallmentOverviewLine.Principal);
              TenderElementVATSpec.SETRANGE("Contract No.", InstallmentOverviewLine."Extension Contract");  //DP01485
              TenderElementVATSpec.SETRANGE("Tender Paragraph", InstallmentOverviewLine."Tender Paragraph No.");
              TenderElementVATSpec.SETFILTER(Amount, '<>%1', 0);  //C055570
              IF TenderElementVATSpec.FINDSET THEN
                REPEAT
                  IF FirstVATProdPostingGroup = '' THEN
                    FirstVATProdPostingGroup := TenderElementVATSpec."VAT Prod. Posting Group";
                  IF FirstVATProdPostingGroup <> TenderElementVATSpec."VAT Prod. Posting Group" THEN
                    ERROR(Text008);
                UNTIL TenderElementVATSpec.NEXT = 0;

              //DP00886.sn
              IF ProjectPrincipal."Currency Code" <> '' THEN
                FixedInstallmentAmount := ProjectPrincipal."Fixed Installment Amount (FCY)"
              ELSE
                FixedInstallmentAmount := ProjectPrincipal."Fixed Installment Amount (LCY)";
              IF FixedInstallmentAmount = 0 THEN
                ERROR(Text009);

              IF TempInstallmentLines."Currency Code" <> '' THEN
                InstallmentAmount := TempInstallmentLines."Installment Amount"
              ELSE
                InstallmentAmount := TempInstallmentLines."Installment Amount (LCY)";
              InvoicedAmount := Invoiced(TempInstallmentLines."Installment Overview", TempInstallmentLines."VAT Prod. Posting Group", TmpExtensionContract."Contract No.", FALSE);
              TotProdValueRemaining := InstallmentAmount - InvoicedAmount;  //DP01491a
              //DP00886.en

              WHILE TotProdValueRemaining >= FixedInstallmentAmount DO BEGIN  //DP00886
                TotProdValueRemaining := TotProdValueRemaining - FixedInstallmentAmount;  //DP00886
                IF TempInstallmentLines.FINDSET THEN BEGIN
                  REPEAT
                    InstallmentOverview.CreateInstallmentLine(FixedInstallmentAmount,  //DP00886
                      TempInstallmentLines."VAT Prod. Posting Group", '', FALSE,
                      TmpExtensionContract."Contract No.");  //DP01491a
                  UNTIL TempInstallmentLines.NEXT = 0;
                END;
              END;
              // dp00109.en
            END;

            //set installment motivations on "Installments Created"
            InstallmentMotivation.SETRANGE("Project No.","Project No.");
            InstallmentMotivation.SETRANGE(Principal,Principal);
            InstallmentMotivation.SETRANGE("Production Date", "First Motivation Date", "Last Motivation Date");
            IF InstallmentMotivation.FINDFIRST THEN BEGIN
              REPEAT
                InstallmentMotivation."Installments Created" := TRUE;
                InstallmentMotivation."Installments Created on" := TODAY;
                InstallmentMotivation.MODIFY;
              UNTIL InstallmentMotivation.NEXT = 0;
            END;
            //set installment overview on "Installments Created"
            InstallmentOverview."Installments Created" := TRUE;
            InstallmentOverview."Installments Created on" := TODAY;
            InstallmentOverview.MODIFY;

            //DP01491a.sn
              UNTIL TmpExtensionContract.NEXT = 0;
            END;
            //DP01491a.en
          UNTIL InstallmentOverview.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CreateFinalInstallment@1100485006(iAmount@1100485001 : Decimal);
    VAR
      ProjectPrincipal@1100485000 : Record 11012005;
      InstallmentOverview@1100485002 : Record 11012265;
      TempProjectInstallment@1100409001 : TEMPORARY Record 11012018;
      TotalInstallmentAmount@1100409000 : Decimal;
    BEGIN
      //report RAW Final Installment contains the calculation
      ProjectPrincipal.GET("Project No.",Principal);

      GetFinalInstallmentsPerVATProd(iAmount,TempProjectInstallment,TotalInstallmentAmount);
      IF TempProjectInstallment.FINDSET THEN
        REPEAT
          CreateInstallmentLine(
            ROUND(iAmount * TempProjectInstallment."Installment Amount (LCY)"/TotalInstallmentAmount),
            TempProjectInstallment."VAT Prod. Posting Group", Text003, TRUE, '');  //DP01491a
        UNTIL TempProjectInstallment.NEXT = 0;

      InstallmentOverview.SETRANGE("Project No.","Project No.");
      InstallmentOverview.SETRANGE(Principal,Principal);
      IF InstallmentOverview.FINDFIRST THEN BEGIN
        REPEAT
          InstallmentOverview."Final Installment Created" := TRUE;
          InstallmentOverview."Final Installment Created on" := TODAY;
          InstallmentOverview.MODIFY;
        UNTIL InstallmentOverview.NEXT = 0;
      END;
    END;

    PROCEDURE CreateInstallmentLine@1210190000(iAmnt@1210190000 : Decimal;iVATPostingGrp@1100485000 : Code[10];iDesc@1100485003 : Text[50];iFinalInstallment@1100525000 : Boolean;iExtensionContract@1100525002 : Code[20]);
    VAR
      ProjectPrincipal@1100485001 : Record 11012005;
      ProjectInstallment@1100485002 : Record 11012018;
      GenerateProjectInstallments@1100485004 : Codeunit 11012007;
      WeekTxt@1100525003 : Text;
    BEGIN
      //create the regular installment based on the Installment Overview
      IF iAmnt = 0 THEN EXIT;  //C055570

      ProjectInstallment.INIT;
      ProjectInstallment."Project No." := "Project No.";
      ProjectInstallment.Principal := Principal;
      ProjectInstallment."Plot No." := '';
      ProjectInstallment."Installment No." := GenerateProjectInstallments.GetFreeInstallmentNo("Project No.", Principal, '');

      ProjectPrincipal.GET("Project No.",Principal);  //*29882.n
      ProjectInstallment.VALIDATE("Cost Object", ProjectPrincipal."Cost Object");  //*29882.n
      ProjectInstallment."Currency Code" := ProjectPrincipal."Currency Code";  //DP00886
      ProjectInstallment."Extension Contract" := iExtensionContract;  //DP01491a
      IF iDesc = '' THEN BEGIN
        CALCFIELDS("First Motivation Period", "Last Motivation Period");
        IF "First Motivation Period" = "Last Motivation Period" THEN
          WeekTxt := "First Motivation Period"
        ELSE
          WeekTxt := "First Motivation Period" + '..' + "Last Motivation Period";
        ProjectInstallment.Description := STRSUBSTNO(Text002, "No.", WeekTxt);
      END ELSE BEGIN
        ProjectInstallment.Description := iDesc;
      END;
      //ProjectPrincipal.GET("Project No.",Principal);  //*29882.o
      //ProjectInstallment.VALIDATE("Cost Object", ProjectPrincipal."Cost Object");  //*29882.o Description can be modified by Validate
      ProjectInstallment."VAT Prod. Posting Group" := iVATPostingGrp;
      ProjectInstallment.VALIDATE("Installment Amount",ROUND(iAmnt)); //DP00886
      ProjectInstallment."Installment Motivation Date" := "Last Motivation Date";
      ProjectInstallment."Installment Overview" := "No.";  //DP01485
      ProjectInstallment."RAW Final Installment" := iFinalInstallment;
      ProjectInstallment.CheckProjStatus();
      ProjectInstallment.INSERT;
    END;

    PROCEDURE ToInvoicePrevPeriods@1100528801() Result : Decimal;
    VAR
      InstallmentOverview@1100528800 : Record 11012265;
    BEGIN
      IF GetPrevInstallmentOverview(InstallmentOverview) THEN
        Result := InstallmentOverview.GetExcessProductionValue(0) +
         InstallmentOverview.GetExtraProductionValue(0) +
         InstallmentOverview.GetProductionValue(0) - InstallmentOverview.Invoiced(InstallmentOverview."No.",'','',TRUE);
      EXIT(Result);
    END;

    PROCEDURE GetPrevInstallmentOverview@1100528805(VAR InstallmentOverview@1100528800 : Record 11012265) : Boolean;
    BEGIN
      InstallmentOverview := Rec;
      InstallmentOverview.SETCURRENTKEY("Project No.",Principal,"No.");
      InstallmentOverview.SETFILTER("Project No.","Project No.");
      InstallmentOverview.SETFILTER(Principal,Principal);
      EXIT(InstallmentOverview.NEXT(-1) <> 0);
    END;

    PROCEDURE InvoiceAccordingFixedAmount@1100528806() Result : Decimal;
    VAR
      ProjectPrincipal@1100528800 : Record 11012005;
    BEGIN
      IF ProjectPrincipal.GET("Project No.", Principal) THEN BEGIN
        IF ProjectPrincipal."Currency Code" <> '' THEN BEGIN  //DP00886
          IF ProjectPrincipal."Fixed Installment Amount (FCY)" <> 0 THEN
            Result := ROUND(( ToInvoice() / ProjectPrincipal."Fixed Installment Amount (FCY)"), 1, '<') * ProjectPrincipal."Fixed Installment Amount (FCY)";
        END ELSE BEGIN
          IF ProjectPrincipal."Fixed Installment Amount (LCY)" <> 0 THEN
            Result := ROUND(( ToInvoice() / ProjectPrincipal."Fixed Installment Amount (LCY)"), 1, '<') * ProjectPrincipal."Fixed Installment Amount (LCY)";
        END;
      END;
      EXIT(Result);
    END;

    PROCEDURE VATFinalInstallment@1210190002(VATBaseAmount@1210190000 : Decimal) : Decimal;
    VAR
      ProjectPrincipal@1210190001 : Record 11012005;
      VATPostingSetup@1210190002 : Record 325;
      TempProjectInstallment@1100409001 : TEMPORARY Record 11012018;
      VATAmount@1100409004 : Decimal;
      TotalInstallmentAmount@1100409000 : Decimal;
    BEGIN
      ProjectPrincipal.GET("Project No.",Principal);
      GetFinalInstallmentsPerVATProd(VATBaseAmount,TempProjectInstallment,TotalInstallmentAmount);

      IF TempProjectInstallment.FINDSET THEN
        REPEAT
          IF VATPostingSetup.GET(
               ProjectPrincipal."VAT Bus. Posting Group",
               TempProjectInstallment."VAT Prod. Posting Group")
          THEN
            VATAmount += ROUND(VATBaseAmount *
                TempProjectInstallment."Installment Amount (LCY)"/TotalInstallmentAmount *
                VATPostingSetup."VAT %" / 100)

        UNTIL TempProjectInstallment.NEXT = 0;

      EXIT(VATAmount);
    END;

    LOCAL PROCEDURE GetFinalInstallmentsPerVATProd@1100409000(VATBaseAmount@1100409004 : Decimal;VAR TempProjectInstallment@1100409000 : TEMPORARY Record 11012018;VAR TotalInstallmentAmount@1100409007 : Decimal);
    VAR
      ProjectPrincipal@1100409003 : Record 11012005;
      ProjectInstallment@1100409001 : Record 11012018;
      InstallmentNo@1100409006 : Integer;
    BEGIN
      IF VATBaseAmount = 0 THEN
        EXIT;

      ProjectPrincipal.GET("Project No.",Principal);

      ProjectInstallment.SETRANGE("Project No.","Project No.");
      ProjectInstallment.SETRANGE(Principal,Principal);
      ProjectInstallment.SETFILTER("Extension Contract", '%1', '');  //DP01485
      ProjectInstallment.SETRANGE("RAW Final Installment", FALSE);
      IF NOT ProjectInstallment.FINDSET THEN BEGIN
        TempProjectInstallment."Installment No." := '1';
        TempProjectInstallment."VAT Prod. Posting Group" := ProjectPrincipal."VAT Prod. Posting Group";
        TempProjectInstallment."Installment Amount (LCY)" := VATBaseAmount;
        TempProjectInstallment.INSERT;
        EXIT;
      END;

      REPEAT
        TotalInstallmentAmount += ProjectInstallment."Installment Amount (LCY)";
        //Cumulate per VAT Prod.
        TempProjectInstallment.SETRANGE("VAT Prod. Posting Group", ProjectInstallment."VAT Prod. Posting Group");
        IF TempProjectInstallment.FINDFIRST THEN BEGIN
          TempProjectInstallment."Installment Amount (LCY)" += ProjectInstallment."Installment Amount (LCY)";
          TempProjectInstallment.MODIFY;
        END ELSE BEGIN
          InstallmentNo += 1;
          TempProjectInstallment."Installment No." := STRSUBSTNO('%1',InstallmentNo);
          TempProjectInstallment."VAT Prod. Posting Group" := ProjectInstallment."VAT Prod. Posting Group";
          TempProjectInstallment."Installment Amount (LCY)" := ProjectInstallment."Installment Amount (LCY)";
          TempProjectInstallment.INSERT;
        END;
      UNTIL ProjectInstallment.NEXT = 0;

      TempProjectInstallment.RESET;
    END;

    LOCAL PROCEDURE CheckLinesPresent@1100528900();
    VAR
      InstallmentOverviewLine@1100528900 : Record 11012266;
    BEGIN
      //DP01485
      InstallmentOverviewLine.SETRANGE("Project No.", "Project No.");
      InstallmentOverviewLine.SETRANGE(Principal, Principal);
      InstallmentOverviewLine.SETRANGE("Installment Overview", "No.");
      IF InstallmentOverviewLine.FINDFIRST THEN
        ERROR(Text007, InstallmentOverviewLine.TABLECAPTION)
    END;

    LOCAL PROCEDURE GetRelatedInstallmentMotivation@1100528901();
    VAR
      InstallmentMotivation@1100528900 : Record 11012471;
    BEGIN
      //DP01485
      InstallmentMotivation.SETRANGE("Project No.", "Project No.");
      InstallmentMotivation.SETRANGE(Principal, Principal);
      InstallmentMotivation.SETRANGE(Status, InstallmentMotivation.Status::Approved);
      IF InstallmentMotivation.FINDLAST THEN BEGIN
         "Installment Overview Period" := InstallmentMotivation."Installment Overview Period";
         "Last Motivation Date" := InstallmentMotivation."Production Date";
         InstallmentMotivation.SETRANGE("Installment Overview Period", "Installment Overview Period");
         IF InstallmentMotivation.FINDFIRST THEN
           "First Motivation Date" := InstallmentMotivation."Production Date";
      END;
    END;

    LOCAL PROCEDURE GetRangeProductionDate@1100528902();
    VAR
      InstallmentMotivation@1100528901 : Record 11012471;
      InstallmentOverview@1100528900 : Record 11012265;
    BEGIN
      //DP01485
      IF (InstallmentOverview."First Motivation Date" <> 0D) AND
         (InstallmentOverview."Last Motivation Date" <> 0D) THEN
        EXIT;
      //
      InstallmentOverview.SETRANGE("Project No.", "Project No.");
      InstallmentOverview.SETRANGE(Principal, Principal);
      InstallmentOverview.SETFILTER("No.", '<%1', "No.");
      IF NOT InstallmentOverview.FINDLAST THEN
        InstallmentOverview."Last Motivation Date" := 0D;
      //
      InstallmentMotivation.SETRANGE("Project No.", "Project No.");
      InstallmentMotivation.SETRANGE(Principal, Principal);
      InstallmentMotivation.SETFILTER("Production Date", '>%1', InstallmentOverview."Last Motivation Date");
      InstallmentMotivation.SETRANGE(Status, InstallmentMotivation.Status::Approved);
      IF InstallmentMotivation.FINDFIRST THEN BEGIN
        "First Motivation Date" := InstallmentMotivation."Production Date";
        "Installment Overview Period" := InstallmentMotivation."Installment Overview Period";
        //C060000.sn
        "First Motivation Period" := InstallmentMotivation."Installment Motivation Period";
        "First Motivation Description" := InstallmentMotivation.Comment;
        //C060000.en
      END;
      IF InstallmentMotivation.FINDLAST THEN BEGIN
        "Last Motivation Date" := InstallmentMotivation."Production Date";
        "Installment Overview Period" := InstallmentMotivation."Installment Overview Period";
        //C060000.sn
        "Last Motivation Period" := InstallmentMotivation."Installment Motivation Period";
        "Last Motivation Description" := InstallmentMotivation.Comment;
        //C060000.en
      END;
    END;

    PROCEDURE OnInsertInstallmentOverview@1100525000();
    VAR
      InstallmentOverview@1100525001 : Record 11012265;
      NextNo@1100525000 : Integer;
    BEGIN
      InstallmentOverview.SETRANGE("Project No.", "Project No.");
      InstallmentOverview.SETRANGE(Principal, Principal);
      IF NOT InstallmentOverview.FINDLAST THEN BEGIN
        InstallmentOverview."Last Motivation Date" := 0D;
        NextNo := 1;
      END ELSE BEGIN
        NextNo := InstallmentOverview."No." + 1;
      END;
      IF "No." = 0 THEN
        "No." := NextNo;
      IF NextNo <> "No." THEN
        ERROR(Text004, NextNo);

      GetRangeProductionDate;
    END;

    LOCAL PROCEDURE GetTenderParagraph@1100528500(InstallmentMotivationLine@1100528500 : Record 11012472;VAR TenderParagraphbyPrincipal@1100528501 : Record 11012470);
    BEGIN
      //C041137.n
      CLEAR(TenderParagraphbyPrincipal);
      TenderParagraphbyPrincipal.SETRANGE("Project No.",InstallmentMotivationLine."Project No.");
      TenderParagraphbyPrincipal.SETRANGE(Principal,InstallmentMotivationLine.Principal);
      TenderParagraphbyPrincipal.SETRANGE("Contract No.", InstallmentMotivationLine."Extension Contract");
      TenderParagraphbyPrincipal.SETRANGE("No.", InstallmentMotivationLine."Tender Paragraph No.");
      IF TenderParagraphbyPrincipal.FINDFIRST THEN;
    END;

    BEGIN
    {
      DP01485: new field (Extension Contract) added to flowfields (based on Installment Overview Line); field Contract Filter expired
    }
    END.
  }
}

