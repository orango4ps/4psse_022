OBJECT Table 11126143 Plant Absence
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               PlantAbsence@1100529100 : Record 11126143;
             BEGIN
               PlantAbsence.SETCURRENTKEY("Entry No.");
               IF PlantAbsence.FINDLAST THEN
               "Entry No." := PlantAbsence."Entry No." + 1
               ELSE
               "Entry No." := 1;
               TestForPlannedWorkOrders;
             END;

    OnModify=BEGIN
               TestForPlannedWorkOrders;
             END;

    CaptionML=ENU=Plant Absence;
  }
  FIELDS
  {
    { 1   ;   ;Plant Type          ;Code20        ;TableRelation="Plant Number";
                                                   CaptionML=[ENU=Plant Type;
                                                              SVE=Maskintyp];
                                                   NotBlank=Yes }
    { 2   ;   ;Plant No.           ;Code10        ;TableRelation="Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   CaptionML=[ENU=Plant No.;
                                                              SVE=Maskinnr];
                                                   NotBlank=Yes }
    { 5   ;   ;Plant Description   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Number".Description WHERE (Plant Type=FIELD(Plant Type),
                                                                                                        No.=FIELD(Plant No.)));
                                                   CaptionML=[ENU=Plant Description;
                                                              SVE=Maskinbeskrivning];
                                                   Editable=No }
    { 10  ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              SVE=L”pnr] }
    { 20  ;   ;From Date           ;Date          ;OnValidate=BEGIN
                                                                IF xRec."From Date" = "To Date" THEN
                                                                  "To Date" := "From Date";
                                                                CheckToDateExceedsFromDate;
                                                              END;

                                                   CaptionML=[ENU=From Date;
                                                              SVE=Fr†n datum] }
    { 30  ;   ;From Time           ;Time          ;OnValidate=BEGIN
                                                                CheckUntilTimeExceedsFromTime();
                                                              END;

                                                   CaptionML=[ENU=From Time;
                                                              SVE=Fr†n tid] }
    { 40  ;   ;To Date             ;Date          ;OnValidate=BEGIN
                                                                CheckToDateExceedsFromDate;
                                                              END;

                                                   CaptionML=[ENU=To Date;
                                                              SVE=Till datum] }
    { 50  ;   ;Until Time          ;Time          ;OnValidate=BEGIN
                                                                CheckUntilTimeExceedsFromTime();
                                                              END;

                                                   CaptionML=ENU=Until Time }
    { 60  ;   ;Cause of Absence Code;Code20       ;TableRelation="Cause of Absence Plant";
                                                   OnValidate=VAR
                                                                CauseofAbsencePlant@1100529100 : Record 11126144;
                                                              BEGIN
                                                                CauseofAbsencePlant.GET("Cause of Absence Code");
                                                                Description := CauseofAbsencePlant.Description;
                                                              END;

                                                   CaptionML=[ENU=Cause of Absence Code;
                                                              SVE=Kod f”r Orsak till fr†nvaro] }
    { 70  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              SVE=Beskrivning] }
    { 80  ;   ;Plannable           ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Cause of Absence Plant".Plannable WHERE (Code=FIELD(Cause of Absence Code)));
                                                   CaptionML=ENU=Plannable;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Plant Type,Plant No.,From Date           }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100529100 : TextConst 'ENU=%1 exceeds %2';
      Text002@1100529101 : TextConst 'ENU=%1 must exceed %2;SVE=%1 m†ste ”verskrida %2';
      Text003@1100529102 : TextConst 'ENU=Notice: Plant %1 already planned for Work Order %2 between %3 %4 and %5 %6';

    PROCEDURE CheckToDateExceedsFromDate@1100525001();
    BEGIN
      CASE TRUE OF
        "From Date" = 0D: EXIT;
        "To Date" = 0D: EXIT;
        "From Date" <= "To Date": EXIT;
      END;
      ERROR(STRSUBSTNO(Text001, FIELDCAPTION("From Date"), FIELDCAPTION("To Date")));
    END;

    LOCAL PROCEDURE CheckUntilTimeExceedsFromTime@1100525000();
    BEGIN
      CASE TRUE OF
        "From Date" = 0D: EXIT;
        "To Date" = 0D: EXIT;
        "From Time" = 0T: EXIT;
        "Until Time" = 0T: EXIT;
        "From Time" < "Until Time": EXIT;
        "From Date" < "To Date": EXIT;
      END;
      ERROR(STRSUBSTNO(Text002, FIELDCAPTION("Until Time"), FIELDCAPTION("From Time")));
    END;

    PROCEDURE TestForPlannedWorkOrders@1100528601();
    VAR
      WorkOrder@1100528602 : Record 11229279;
      PlantNumber@1100528601 : Record 11012552;
      ResourceNo@1100528600 : Code[20];
      FromDateTime@1100528603 : DateTime;
      UntilTime@1100528606 : Time;
      UntilDateTime@1100528604 : DateTime;
    BEGIN
      CALCFIELDS(Plannable);
      IF Plannable THEN
        EXIT;
      IF NOT PlantNumber.GET("Plant Type", "Plant No.") THEN
        EXIT;
      ResourceNo := PlantNumber.GetResourceNo;
      IF ResourceNo = '' THEN
        EXIT;
      WorkOrder.SETCURRENTKEY("Resource No.");
      WorkOrder.SETRANGE("Resource No.", ResourceNo);
      FromDateTime := CREATEDATETIME("From Date", "From Time");
      UntilTime := "Until Time";
      IF UntilTime = 0T THEN
        UntilTime := 235959.999T;
      UntilDateTime := CREATEDATETIME("To Date", UntilTime);
      WorkOrder.SETFILTER("Starting Date/Time", '<>%1&<%2', 0DT, UntilDateTime);
      WorkOrder.SETFILTER("Ending Date/Time", '>=%1', FromDateTime);
      IF WorkOrder.FINDFIRST THEN
        MESSAGE(Text003, "Plant Type", WorkOrder."No.", DT2DATE(WorkOrder."Starting Date/Time"), DT2TIME(WorkOrder."Starting Date/Time"), DT2DATE(WorkOrder."Ending Date/Time"), DT2TIME(WorkOrder."Ending Date/Time"));
    END;

    BEGIN
    END.
  }
}

