OBJECT Page 11072121 Import Project Option Data
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Import Project Option Data from Other Company;
    PageType=Card;
    UsageCategory=Tasks;
    OnInit=BEGIN
             txtbxProjToFilterEditable := TRUE;
           END;

    OnOpenPage=BEGIN
                 ProjectSetup.GET;
                 CRMSetup.GET;

                 IF CRMSetup."Central Management" AND CRMSetup.Companies THEN
                   CentralManagement := TRUE
                 ELSE
                   CentralManagement := FALSE;

                 CompanyOrigin := '';
                 CompanyDestiny := COMPANYNAME;

                 ProjectModel := TRUE;
                 ProjectOption := TRUE;
                 OnValidateProjectOption;  //C058878

                 NewProject := TRUE;
                 txtbxProjToFilterEditable := FALSE;
                 PrintActivityDetails := TRUE;
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 9       ;1   ;Action    ;
                      CaptionML=[ENU=&Run;
                                 NOR=&Kj›r;
                                 SVE=&K”r];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Start;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lvDummyOptionSurchRec@1100485002 : Record 11012512;
                                 lvBuyerMgtCU@1100485001 : Codeunit 11012500;
                               BEGIN
                                 ProjectModel := TRUE;
                                 ProjectOption := TRUE;
                                 ProjPlotOption := ProjPlot;

                                 IF (ProjFromFilter = '') THEN BEGIN
                                   MESSAGE(Text009);
                                   EXIT;
                                 END;

                                 ProjectDataNewBool := FALSE;
                                 ProjectDataUpdBool := FALSE;
                                 ProjectDataDelBool := FALSE;

                                 CopyProject;

                                 IF (ProjectDataUpdBool = FALSE) AND (ProjectDataNewBool = FALSE) THEN
                                   MESSAGE(Text011);
                                 IF (ProjectDataUpdBool = TRUE) AND (ProjectDataNewBool = FALSE) THEN
                                   MESSAGE(Text010);

                                 COMMIT;

                                 //Doorrekenen toeslagen bij opties.
                                 OptDest.RESET;
                                 OptDest.SETRANGE("Budget Changed by Integration", TRUE);
                                 IF OptDest.FINDSET(TRUE, FALSE) THEN BEGIN
                                   REPEAT
                                     OptDest."Budget Changed by Integration" := FALSE;
                                     OptDest."Transaction Date In" := CURRENTDATETIME;
                                     OptDest.MODIFY;
                                     lvBuyerMgtCU.BmCalcSurchargesUpdateOption(OptDest."Project No.",
                                                                               OptDest."Plot No.",
                                                                               OptDest."House Model",
                                                                               OptDest."Main Group",
                                                                               OptDest.Group,
                                                                               OptDest."Sub Group",
                                                                               OptDest.Option,
                                                                               FALSE,
                                                                               lvDummyOptionSurchRec);
                                   UNTIL OptDest.NEXT = 0;
                                 END;

                                 COMMIT;

                                 IF LinesPrinted AND PrintActivityDetails THEN
                                   ActivityReport.RUNMODAL;

                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1210190000;1;Group  ;
                CaptionML=[ENU=Company;
                           NOR=Selskap;
                           SVE=F”retag];
                GroupType=Group }

    { 1210190003;2;Field  ;
                CaptionML=[ENU=From Company;
                           NOR=Fra selskap;
                           SVE=Fr†n f”retag];
                SourceExpr=CompanyOrigin;
                Importance=Promoted;
                OnValidate=BEGIN
                             ValidateCompanyOrigin;
                           END;

                OnLookup=VAR
                           Company@1100528600 : Record 2000000006;
                         BEGIN
                           IF PAGE.RUNMODAL(PAGE::"Company List (NEW)", Company) = ACTION::LookupOK THEN BEGIN
                             CompanyOrigin := Company.Name;
                             ValidateCompanyOrigin;
                           END;
                         END;
                          }

    { 1210190021;1;Group  ;
                CaptionML=[ENU=Project;
                           NOR=Prosjekt;
                           SVE=Projekt] }

    { 1210190014;2;Field  ;
                Lookup=Yes;
                CaptionML=[ENU=From Project;
                           NOR=Fra prosjekt;
                           SVE=Fr†n projekt];
                SourceExpr=ProjFromFilter;
                Importance=Promoted;
                OnLookup=VAR
                           lProjRec@1100525000 : Record 11072003;
                         BEGIN
                           lProjRec.CHANGECOMPANY(CompanyOrigin);
                           IF PAGE.RUNMODAL(0, lProjRec) = ACTION::LookupOK THEN
                             ProjFromFilter := lProjRec."No.";
                         END;
                          }

    { 1100525001;2;Field  ;
                Lookup=Yes;
                CaptionML=[ENU=House Model Filter;
                           NOR=Husmodellfilter;
                           SVE=Husmodellfilter];
                SourceExpr=HouseModelFilter;
                TableRelation="House Model".Model;
                Importance=Promoted;
                OnLookup=VAR
                           lHouseModelRec@1100525001 : Record 11012501;
                         BEGIN
                           lHouseModelRec.CHANGECOMPANY(CompanyOrigin);
                           lHouseModelRec.SETRANGE("Project No.");

                           IF (STRLEN(ProjFromFilter) <= 20) AND (STRLEN(ProjFromFilter) > 0) THEN BEGIN
                             lHouseModelRec.SETRANGE("Project No.", ProjFromFilter);
                           END;

                           IF PAGE.RUNMODAL(0, lHouseModelRec) = ACTION::LookupOK THEN
                             HouseModelFilter := HouseModelFilter + lHouseModelRec.Model;
                         END;
                          }

    { 1100525005;2;Field  ;
                CaptionML=[ENU=New Project;
                           NOR=Nytt prosjekt;
                           SVE=Nytt projekt];
                SourceExpr=NewProject;
                OnValidate=BEGIN
                             NewProjectOnAfterValidate;
                           END;
                            }

    { 1100525002;2;Field  ;
                Name=txtbxProjToFilter;
                Lookup=Yes;
                CaptionML=[ENU=To Project;
                           NOR=Til prosjekt;
                           SVE=Till projekt];
                SourceExpr=ProjToFilter;
                Editable=txtbxProjToFilterEditable;
                OnValidate=BEGIN
                             ProjRecTo.SETFILTER("No.", ProjToFilter);
                             IF NOT ProjRecTo.FINDSET THEN
                               ERROR('Project %1 niet gevonden', ProjToFilter);
                           END;

                OnLookup=VAR
                           lProjRec@1100525000 : Record 11072003;
                         BEGIN
                           IF NOT NewProject THEN
                             IF PAGE.RUNMODAL(0, lProjRec) = ACTION::LookupOK THEN
                               ProjToFilter := lProjRec."No.";
                         END;
                          }

    { 1210190025;2;Field  ;
                CaptionML=[ENU=Copy;
                           NOR=KOPIER;
                           SVE=Kopiera];
                Style=Strong;
                StyleExpr=TRUE }

    { 1100525004;2;Field  ;
                CaptionML=[ENU=Options;
                           NOR=Alternativer;
                           SVE=Alternativ];
                SourceExpr=ProjectOption;
                Editable=FALSE;
                OnValidate=BEGIN
                             OnValidateProjectOption;  //C058878
                           END;
                            }

    { 1210190020;2;Field  ;
                CaptionML=[ENU=Plot;
                           NOR=Tegning;
                           SVE=Ritning];
                SourceExpr=ProjPlot }

    { 1100529406;2;Field  ;
                CaptionML=[ENU=Technical Text;
                           NOR=Teknisk tekst;
                           SVE=Teknisk text];
                SourceExpr=CopyTechnicalText;
                Enabled=CopyTechnicalTextEnable }

    { 1100529405;2;Field  ;
                CaptionML=[ENU=Surcharges;
                           NOR=Tilleggsgebyrer;
                           SVE=Till„ggsavgifter];
                SourceExpr=CopySurcharges;
                Enabled=CopySurchargesEnable }

    { 1100529403;2;Field  ;
                CaptionML=[ENU=VAT Bus. Posting Group;
                           NOR=Moms Bevegelsebokf›ringsmal;
                           SVE=Moms r”relsebokf”ringsmall];
                SourceExpr=CopyVATBusinessPostingGroup;
                Enabled=CopyVATBusinessPostingGroupEnable }

    { 1100529404;2;Field  ;
                CaptionML=[ENU=VAT Prod. Posting Group;
                           NOR=Mva-bokf›ringsgruppe - vare;
                           SVE=Moms produktbokf”ringsmall];
                SourceExpr=CopyVATProductPostingGroup;
                Enabled=CopyVATProductPostingGroupEnable }

    { 1100529402;2;Field  ;
                CaptionML=[ENU=Installment Scheme;
                           NOR=Betalingsplan;
                           SVE=Betalplan];
                SourceExpr=CopyInstallmentScheme;
                Enabled=CopyInstallmentSchemeEnable }

    { 1100529401;2;Field  ;
                CaptionML=[ENU=Fixed Sales Price;
                           NOR=Fast salgspris;
                           SVE=Fast f”rs„ljningspris];
                SourceExpr=CopyFixedSalesPrice;
                Enabled=CopyFixedSalesPriceEnable }

    { 1100529400;2;Field  ;
                CaptionML=[ENU=Developers Discount (%);
                           NOR=Utviklers Rabatt (%);
                           SVE=Utvecklarrabatt (%)];
                SourceExpr=CopyDevelopersDiscountPercentage;
                Enabled=CopyDevelopersDiscountPercentageEnable }

    { 1100528400;2;Field  ;
                CaptionML=ENU=Contractor Surcharge %;
                SourceExpr=CopyContractorSurchargePercentage;
                Enabled=CopyContractorSurchargePercentageEnable }

    { 1100529600;2;Field  ;
                CaptionML=[ENU=Unit of Measure Code;
                           NOR=M†leenhetskode;
                           SVE=Enhetskod];
                SourceExpr=CopyUnitOfMeasure;
                Enabled=CopyUnitOfMeasureEnable }

  }
  CODE
  {
    VAR
      NoSeriesMngmntCU@1100525001 : Codeunit 396;
      CRMSetup@1100485023 : Record 5079;
      ProjRecFrom@11012005 : Record 11072003;
      ProjRecTo@11012006 : Record 11072003;
      ProjectSetup@1210190039 : Record 315;
      ProjectSetupDest@1210190040 : Record 315;
      ProjectSetupOrig@1100525005 : Record 315;
      ProjElemOrig@11012009 : Record 11012010;
      ProjElemDest@11012010 : Record 11012010;
      ProjLocOrig@11012011 : Record 11012011;
      ProjLocDest@11012012 : Record 11012011;
      ProjModelOrig@11012013 : Record 11012501;
      ProjModelDest@11012014 : Record 11012501;
      ProjUnitOrig@1210190017 : Record 11012508;
      ProjUnitDest@1210190018 : Record 11012508;
      ProjPrinDest@11012016 : Record 11012005;
      OptOrig@11012017 : Record 11012502;
      OptDest@11012018 : Record 11012502;
      ProjMainGrpOrig@1210190054 : Record 11012509;
      ProjMainGrpDest@1210190055 : Record 11012509;
      ProjGrpOrig@11012019 : Record 11012504;
      ProjGrpDest@11012020 : Record 11012504;
      ProjSubGrpOrig@1210190020 : Record 11012505;
      ProjSubGrpDest@1210190019 : Record 11012505;
      OptBudgetOrig@11012025 : Record 11012503;
      OptBudgetDest@11012026 : Record 11012503;
      OptBudgSumOrig@1100525009 : Record 11012064;
      OptBudgSumDest@1100525008 : Record 11012064;
      PlotOrig@1210190023 : Record 11012500;
      PlotDest@1210190024 : Record 11012500;
      ContBusRel@1210190042 : Record 5054;
      ContactOrigRec@1210190001 : Record 5050;
      ContactDestRec@1210190000 : Record 5050;
      CustomerOrigRec@1100485005 : Record 18;
      CustomerDestRec@1210190013 : Record 18;
      OptionTextOrigRec@1100485001 : Record 11012511;
      OptionTextDestRec@1100485002 : Record 11012511;
      FromDefDim@1100485004 : Record 352;
      ToDefDim@1100485003 : Record 352;
      ActivityReport@1100528600 : Report 11012530;
      UnitofMeasure@1100529600 : Record 204;
      CompanyDestiny@1210190008 : Text[50];
      CompanyOrigin@1100525002 : Text[50];
      ProjFromFilter@1210190007 : Text[250];
      ProjToFilter@1100525006 : Text[250];
      HouseModelFilter@1100525000 : Text[250];
      NewProject@1100525004 : Boolean;
      ProjectModel@1210190009 : Boolean;
      ProjectOption@1210190010 : Boolean;
      ProjPlot@1210190014 : Boolean;
      ProjPlotOption@1210190015 : Boolean;
      ProjectDataNewBool@1210190046 : Boolean;
      ProjectDataUpdBool@1210190047 : Boolean;
      ProjectDataDelBool@1210190048 : Boolean;
      PrintActivityDetails@1100485022 : Boolean;
      CentralManagement@1100485024 : Boolean;
      LinesPrinted@1100525003 : Boolean;
      CustomerContactNo@1210190041 : Code[20];
      Text009@1210190043 : TextConst 'ENU=Select a Job;NOR=Velg en jobb.;SVE=V„lj ett jobb.';
      Text010@1210190044 : TextConst 'ENU="No new project data added to construction\Only rewrite on existing data ";NOR=Ingen nye prosjektdata er lagt til i konstruksjon\Kun overskriving av eksisterende data;SVE="Inga nya projektdata har lagts till konstruktion\Endast ”verskrivning av befintliga data "';
      Text011@1210190045 : TextConst 'ENU=No Project data exported to Construction;NOR=Ikke noe prosjektdata ble eksportert til konstruksjon;SVE=Inga projektdata har exporterats till konstruktion';
      Text015@1210190052 : TextConst 'ENU=No import allowed from current company;NOR=Ingen import tillates fra det aktuelle selskapet;SVE=Ingen import till†ts fr†n aktuellt f”retag';
      Text120@1100485014 : TextConst 'ENU=Project: %1  generated.;NOR=Prosjekt: %1 er generert.;SVE=Projekt: %1 har genererats.';
      Text140@1100485016 : TextConst 'ENU=House Models are transferred for Project %.;NOR=Husmodeller er overf›rt for prosjekt %.;SVE=Husmodeller har ”verf”rts f”r projekt %.';
      Text150@1100485017 : TextConst 'ENU=Options are transferred for Project %.;NOR=Alternativer er overf›rt for prosjekt %.;SVE=Alternativ har ”verf”rts f”r projekt %.';
      Text160@1100485018 : TextConst 'ENU=Project %1 Plot %2 transferred.;NOR=Prosjektet %1 tegning %2 er overf›rt.;SVE=Projektet %1 Ritningen %2 har ”verf”rts.';
      Text170@1100485019 : TextConst 'ENU=Project %1 Plot %2 Options are transferred.;NOR=Alternativer for prosjekt %1 tegning %2 er overf›rt.;SVE=Alternativ f”r projektet %1 Ritningen %2 har ”verf”rts.';
      txtbxProjToFilterEditable@19063686 : Boolean INDATASET;
      OptionSurchargeOrig@1100529418 : Record 11012512;
      OptionSurchargeDest@1100529417 : Record 11012512;
      InstallmentSchemeDest@1100529416 : Record 11012016;
      VATProductPostingGroupDest@1100529415 : Record 324;
      VATBusinessPostingGroupDest@1100529414 : Record 323;
      CopyTechnicalText@1100529413 : Boolean;
      CopySurcharges@1100529412 : Boolean;
      CopyVATBusinessPostingGroup@1100529411 : Boolean;
      CopyVATProductPostingGroup@1100529410 : Boolean;
      CopyInstallmentScheme@1100529409 : Boolean;
      CopyFixedSalesPrice@1100529408 : Boolean;
      CopyDevelopersDiscountPercentage@1100529407 : Boolean;
      CopyContractorSurchargePercentage@1100528400 : Boolean;
      CopyUnitOfMeasure@1100529602 : Boolean;
      CopyTechnicalTextEnable@1100529406 : Boolean INDATASET;
      CopySurchargesEnable@1100529405 : Boolean INDATASET;
      CopyVATBusinessPostingGroupEnable@1100529404 : Boolean;
      CopyVATProductPostingGroupEnable@1100529403 : Boolean;
      CopyInstallmentSchemeEnable@1100529402 : Boolean;
      CopyFixedSalesPriceEnable@1100529401 : Boolean;
      CopyDevelopersDiscountPercentageEnable@1100529400 : Boolean;
      CopyContractorSurchargePercentageEnable@1100528401 : Boolean;
      CopyUnitOfMeasureEnable@1100529601 : Boolean INDATASET;

    PROCEDURE CopyProject@2();
    BEGIN
      ProjRecFrom.CHANGECOMPANY(CompanyOrigin);
      ProjRecFrom.SETFILTER("No.",ProjFromFilter );

      IF ProjRecFrom.FINDSET(TRUE, FALSE) THEN BEGIN

        ProjRecFrom.CHANGECOMPANY(CompanyOrigin);
        ProjectSetupOrig.CHANGECOMPANY(CompanyOrigin);
        FromDefDim.CHANGECOMPANY(CompanyOrigin);

        ProjectSetupDest.FINDFIRST;

        IF NewProject THEN BEGIN

          //**general project data
          ProjRecTo.TRANSFERFIELDS(ProjRecFrom);

          ProjRecTo."No." := ProjRecFrom."No.";  //generate new number here

          ProjRecTo."No. Series" := ProjectSetupDest."Job Nos.";
          CLEAR(NoSeriesMngmntCU);
          ProjRecTo."No." := NoSeriesMngmntCU.GetNextNo(ProjRecTo."No. Series",WORKDATE,TRUE);

          ProjRecTo."Project Type" := '';
          ProjRecTo."Bill-to Customer No." := '';
          ProjRecTo."Site Manager" := '';
          ProjRecTo."Project Manager" := '';
          ProjRecTo."Project Engineer" := '';
          ProjRecTo.Supervisor := '';
          ProjRecTo.Buyercontact := '';

          ProjRecTo.INSERT;

          AddMessage(COMPANYNAME,
                     CompanyOrigin,
                     ProjRecFrom."No.",
                     '',
                     STRSUBSTNO(Text120,ProjRecTo."No."));

          //**dimensions
          WITH FromDefDim DO BEGIN
            SETRANGE("Table ID",DATABASE::Job);
            SETRANGE("No.",ProjRecFrom."No.");
            IF FINDSET THEN BEGIN
              REPEAT
                ToDefDim := FromDefDim;
                ToDefDim."No." := ProjRecTo."No.";
                ToDefDim.INSERT;
              UNTIL NEXT = 0;
            END;
          END;
          ProjectDataNewBool := TRUE;

          ////**Project principal.
          //IF ProjectSetupDest."Project Principal Related" <> '' THEN BEGIN
          //  ProjPrinDest.INIT;
          //  ProjPrinDest."Project No." := ProjRecTo."No.";
          //  ProjPrinDest."Main Project No." := ProjRecTo."Main Project";
          //  ProjPrinDest.Principal := ProjectSetupDest."Project Principal Related";
          // ProjPrinDest."Collect Installment Invoice By" := ProjectSetupDest."Default Collect Inst. Inv. By";
          //  ProjPrinDest."One Plot per Installm. Invoice" := ProjectSetupDest."Default One Plot p. Inst. Inv.";
          //  ProjPrinDest.INSERT;
          //  ProjRecTo."Bill-to Customer No." := ProjPrinDest.Principal;
          //  ProjRecTo.MODIFY;
          //END;

          //**project-locations
          ProjLocOrig.CHANGECOMPANY(CompanyOrigin);
          ProjLocOrig.SETRANGE("Project No.", ProjRecFrom."No.");
          IF ProjLocOrig.FINDSET THEN BEGIN
            REPEAT
              IF ProjLocDest.GET(ProjRecTo."No.", ProjLocOrig.Code) THEN BEGIN
                ProjLocDest.TRANSFERFIELDS(ProjLocOrig, FALSE);
                ProjLocDest.MODIFY(TRUE);
                ProjectDataUpdBool := TRUE;
              END ELSE BEGIN
                ProjLocDest.TRANSFERFIELDS(ProjLocOrig);
                ProjLocDest."Project No." := ProjRecTo."No.";
                ProjLocDest.INSERT(TRUE);
                ProjectDataNewBool := TRUE;
              END;
            UNTIL ProjLocOrig.NEXT = 0;
          END;

          //**project-elements
          ProjElemOrig.CHANGECOMPANY(CompanyOrigin);
          ProjElemOrig.SETRANGE("Project No.", ProjRecFrom."No.");
          IF ProjElemOrig.FINDSET THEN BEGIN
            REPEAT
              IF ProjElemDest.GET(ProjRecTo."No.", ProjElemOrig.Element) THEN BEGIN
                ProjElemDest.TRANSFERFIELDS(ProjElemOrig, FALSE);
                ProjElemDest.MODIFY(TRUE);
                ProjectDataUpdBool := TRUE;
              END ELSE BEGIN
                ProjElemDest.TRANSFERFIELDS(ProjElemOrig);
                ProjElemDest."Project No." := ProjRecTo."No.";
                ProjElemDest.INSERT(TRUE);
                ProjectDataNewBool := TRUE;
              END;
            UNTIL ProjElemOrig.NEXT = 0;
          END;

        END ELSE BEGIN

          ProjRecTo.SETFILTER("No.", ProjToFilter);
          IF NOT ProjRecTo.FINDSET THEN
            ERROR('Project %1 niet gevonden', ProjToFilter);

          //**project-locations
          ProjLocOrig.CHANGECOMPANY(CompanyOrigin);
          ProjLocOrig.SETRANGE("Project No.", ProjRecFrom."No.");
          IF ProjLocOrig.FINDSET THEN BEGIN
            REPEAT
              IF NOT ProjLocDest.GET( ProjRecTo."No.", ProjLocOrig.Code) THEN BEGIN
                ProjLocDest.TRANSFERFIELDS(ProjLocOrig);
                ProjLocDest."Project No." := ProjRecTo."No.";
                ProjLocDest.INSERT(TRUE);
                ProjectDataNewBool := TRUE;
              END;
            UNTIL ProjLocOrig.NEXT = 0;
          END;

          //**project-elements
          ProjElemOrig.CHANGECOMPANY(CompanyOrigin);
          ProjElemOrig.SETRANGE("Project No.", ProjRecFrom."No.");
          IF ProjElemOrig.FINDSET THEN BEGIN
            REPEAT
              IF NOT ProjElemDest.GET(ProjRecTo."No.", ProjElemOrig.Element) THEN BEGIN
                ProjElemDest.TRANSFERFIELDS(ProjElemOrig);
                ProjElemDest."Project No." := ProjRecTo."No.";
                ProjElemDest.INSERT(TRUE);
                ProjectDataNewBool := TRUE;
              END;
            UNTIL ProjElemOrig.NEXT = 0;
          END;

        END;

        //**Project-house models + units
        IF ProjectModel = TRUE THEN
          IF CopyHouseModels(ProjRecFrom."No.", ProjRecTo."No.") THEN
            AddMessage(COMPANYNAME,
                       CompanyOrigin,
                       ProjRecFrom."No.",
                       '',
                       STRSUBSTNO(Text140,ProjRecFrom."No."));

        //**project-options and option groups
        IF ProjectOption = TRUE THEN
          IF CopyOptions(ProjRecFrom."No.", ProjRecTo."No.",'') THEN
            AddMessage(COMPANYNAME,
                       CompanyOrigin,
                       ProjRecFrom."No.",
                       '',
                       STRSUBSTNO(Text150,ProjRecFrom."No."));

        //**project-plot numbers and options per plot no.
        IF ProjPlot = TRUE THEN BEGIN
          PlotOrig.CHANGECOMPANY(CompanyOrigin);
          PlotOrig.SETRANGE("Project No.", ProjRecFrom."No.");
          PlotOrig.SETFILTER("House Model", HouseModelFilter);

          IF PlotOrig.FINDSET THEN BEGIN

            REPEAT
              IF PlotDest.GET(ProjRecTo."No.", PlotOrig."Plot No.") THEN BEGIN

                PlotDest.Principal := '';
                PlotDest."Principal Options" := '';

                IF CentralManagement THEN BEGIN

                  CustomerContactNo := '';
                  IF CustomerOrigRec.GET(PlotOrig.Principal) THEN BEGIN
                    ContBusRel.SETCURRENTKEY("Link to Table","No.");
                    ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
                    ContBusRel.SETRANGE("No.",CustomerOrigRec."No.");
                    IF ContBusRel.FINDFIRST THEN
                      CustomerContactNo := ContBusRel."Contact No.";
                  END;
                  PlotDest.Buyer := CustomerContactNo;
                  InsertBuyer();

                  PlotDest."Principal Options" := PlotOrig."Principal Options";
                  IF NOT ProjPrinDest.GET(ProjRecTo."No.",PlotDest."Principal Options") THEN BEGIN
                    InsertPlotPrincipalOptions();
                  END;

                  PlotDest.Principal := PlotOrig.Principal;
                  IF NOT ProjPrinDest.GET(ProjRecTo."No.",PlotDest.Principal) THEN BEGIN
                    InsertPlotPrincipalOptions();
                  END;

                END;

                PlotDest."Building Seq." := PlotOrig."Building Seq.";
                PlotDest."Block No." := PlotOrig."Block No.";
                PlotDest."Seq. No. in Block" := PlotOrig."Seq. No. in Block";
                PlotDest."Floor No." := PlotOrig."Floor No.";
                PlotDest.Address := PlotOrig.Address;
                PlotDest."Post Code" := PlotOrig."Post Code";
                PlotDest.City := PlotOrig.City;
                PlotDest."Plot Surface" := PlotOrig."Plot Surface";
                PlotDest."Land Registry No." := PlotOrig."Land Registry No.";
                PlotDest."Request EAN Code El. Before" := PlotOrig."Request EAN Code El. Before";
                PlotDest."Request EAN Code Gas Before" := PlotOrig."Request EAN Code Gas Before";
                PlotDest."EAN Code Electricity" := PlotOrig."EAN Code Electricity";
                PlotDest."EAN Code Gas" := PlotOrig."EAN Code Gas";
                PlotDest."Warrenty Certificate No." :=  PlotOrig."Warrenty Certificate No.";

                PlotDest.MODIFY(TRUE);
                ProjectDataUpdBool := TRUE;

                IF ProjPlotOption THEN BEGIN
                  IF CopyOptions(ProjRecFrom."No.", ProjRecTo."No.",PlotOrig."Plot No.") THEN
                    AddMessage(COMPANYNAME, CompanyOrigin,
                               ProjRecFrom."No.", PlotOrig."Plot No.",
                               STRSUBSTNO(Text170,ProjRecFrom."No.",PlotOrig."Plot No."));
                END;

              END ELSE BEGIN

                PlotDest.TRANSFERFIELDS(PlotOrig);
                PlotDest."Project No." := ProjRecTo."No.";
                PlotDest.Principal := '';
                PlotDest."Principal Options" := '';

                IF CentralManagement THEN BEGIN
                  CustomerContactNo := '';
                  IF CustomerOrigRec.GET(PlotOrig.Principal) THEN BEGIN
                    ContBusRel.SETCURRENTKEY("Link to Table","No.");
                    ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
                    ContBusRel.SETRANGE("No.",CustomerOrigRec."No.");
                    IF ContBusRel.FINDFIRST THEN
                      CustomerContactNo := ContBusRel."Contact No.";
                  END;
                  PlotDest.Buyer := CustomerContactNo;
                  InsertBuyer();

                  PlotDest."Principal Options" := PlotOrig."Principal Options";
                  IF NOT ProjPrinDest.GET(ProjRecTo."No.",PlotDest."Principal Options") THEN BEGIN
                    InsertPlotPrincipalOptions();
                  END;

                  PlotDest.Principal := PlotOrig.Principal;
                  IF NOT ProjPrinDest.GET(ProjRecTo."No.",PlotDest.Principal) THEN BEGIN
                    InsertPlotPrincipalOptions();
                  END;

                END;


                PlotDest."Installment Scheme" := '';

                PlotDest.INSERT(TRUE);
                AddMessage(COMPANYNAME, CompanyOrigin,
                           ProjRecFrom."No.",PlotOrig."Plot No.",
                           STRSUBSTNO(Text160,ProjRecFrom."No.",PlotOrig."Plot No."));

                ProjectDataNewBool := TRUE;
                IF ProjPlotOption THEN BEGIN
                  IF CopyOptions(ProjRecFrom."No.",ProjRecTo."No.", PlotOrig."Plot No.") THEN
                    AddMessage(COMPANYNAME, CompanyOrigin,
                               ProjRecFrom."No.", PlotOrig."Plot No.",
                               STRSUBSTNO(Text170,ProjRecFrom."No.",PlotOrig."Plot No."));
                  END;

              END;
            UNTIL PlotOrig.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE CopyOptions@1210190006(iProjectOrig@1210190003 : Code[20];iProjectDest@1210190000 : Code[20];iPlotDest@1210190002 : Code[10]) NewOptionsBool : Boolean;
    BEGIN
      NewOptionsBool := FALSE;

      OptOrig.RESET;

      //** Set Destiny Company
      ProjModelOrig.CHANGECOMPANY(CompanyOrigin);
      ProjMainGrpOrig.CHANGECOMPANY(CompanyOrigin);
      ProjGrpOrig.CHANGECOMPANY(CompanyOrigin);
      ProjSubGrpOrig.CHANGECOMPANY(CompanyOrigin);
      OptOrig.CHANGECOMPANY(CompanyOrigin);
      OptBudgetOrig.CHANGECOMPANY(CompanyOrigin);
      OptBudgSumOrig.CHANGECOMPANY(CompanyOrigin);
      ContactOrigRec.CHANGECOMPANY(CompanyOrigin);
      OptionTextOrigRec.CHANGECOMPANY(CompanyOrigin);
      OptionSurchargeOrig.CHANGECOMPANY(CompanyOrigin);  //C060156

      //**add/overwrite option groups (also head- and subgroups)
      ProjMainGrpOrig.SETRANGE("Project No.", iProjectOrig);
      ProjMainGrpOrig.SETRANGE("Plot No.", iPlotDest);
      IF ProjMainGrpOrig.FINDSET THEN BEGIN
        REPEAT
          IF NOT ProjMainGrpDest.GET(iProjectDest,iPlotDest,ProjMainGrpOrig.Code) THEN BEGIN
            ProjMainGrpDest.TRANSFERFIELDS(ProjMainGrpOrig);
            ProjMainGrpDest."Project No." := iProjectDest;
            ProjMainGrpDest.INSERT;
          END ELSE BEGIN
            ProjMainGrpDest.TRANSFERFIELDS(ProjMainGrpOrig, FALSE);
            ProjMainGrpDest.MODIFY;
          END;
        UNTIL ProjMainGrpOrig.NEXT = 0;
      END;

      ProjGrpOrig.SETRANGE("Project No.", iProjectOrig);
      ProjGrpOrig.SETRANGE("Plot No.", iPlotDest);
      IF ProjGrpOrig.FINDSET THEN BEGIN
        REPEAT
          IF NOT ProjGrpDest.GET(iProjectDest,iPlotDest,ProjGrpOrig.Code) THEN BEGIN
            ProjGrpDest.TRANSFERFIELDS(ProjGrpOrig);
            ProjGrpDest."Project No." := iProjectDest;
            ProjGrpDest.INSERT;
          END ELSE BEGIN
            ProjGrpDest.TRANSFERFIELDS(ProjGrpOrig, FALSE);
            ProjGrpDest.MODIFY;
          END;
        UNTIL ProjGrpOrig.NEXT = 0;
      END;

      ProjSubGrpOrig.SETRANGE("Project No.", iProjectOrig);
      ProjMainGrpOrig.SETRANGE("Plot No.", iPlotDest);
      IF ProjSubGrpOrig.FINDSET THEN BEGIN
        REPEAT
          IF NOT ProjSubGrpDest.GET(iProjectDest,iPlotDest, ProjSubGrpOrig.Code) THEN BEGIN
            ProjSubGrpDest.TRANSFERFIELDS(ProjSubGrpOrig);
            ProjSubGrpDest."Project No." := iProjectDest;
            ProjSubGrpDest.INSERT;
          END ELSE BEGIN
            ProjSubGrpDest.TRANSFERFIELDS(ProjSubGrpOrig, FALSE);
            ProjSubGrpDest.MODIFY;
          END;
        UNTIL ProjSubGrpOrig.NEXT = 0;
      END;

      OptOrig.SETRANGE("Project No.", iProjectOrig);
      OptOrig.SETRANGE("Plot No.", iPlotDest);          //Can also be '' at project options

      IF iPlotDest <> '' THEN BEGIN
        OptOrig.SETFILTER("House Model", '');
      END ELSE BEGIN
        OptOrig.SETFILTER("House Model", HouseModelFilter);
      END;

      IF OptOrig.FINDSET(TRUE, FALSE) THEN BEGIN
        REPEAT
          IF NOT OptDest.GET(iProjectDest,OptOrig."Plot No.",OptOrig."House Model",
                             OptOrig."Main Group",OptOrig.Group,
                             OptOrig."Sub Group",OptOrig.Option) THEN
          BEGIN

            ProjModelDest.GET(iProjectDest,OptOrig."House Model");
            ProjMainGrpDest.GET(iProjectDest,iPlotDest,OptOrig."Main Group");
            ProjGrpDest.GET(iProjectDest,iPlotDest,OptOrig.Group);
            ProjSubGrpDest.GET(iProjectDest,iPlotDest,OptOrig."Sub Group");

            OptDest.TRANSFERFIELDS(OptOrig);

            IF (iPlotDest <> '') THEN
              OptDest.Status := OptDest.Status::Offered;

            OptDest."Project No." := iProjectDest;
            OptDest."Main Project No." := ProjRecTo."Main Project";
            OptDest."Installments Generated" := FALSE;
            //DP01247.sn
            IF CopyInstallmentScheme THEN BEGIN
              IF OptOrig."Installment Scheme" <> '' THEN
                InstallmentSchemeDest.GET(OptOrig."Installment Scheme");
            END ELSE BEGIN
              OptDest."Installment Scheme" := '';
            END;
            IF CopyVATProductPostingGroup THEN BEGIN
              IF (OptOrig."VAT Prod. Posting Group" <> '') THEN
                VATProductPostingGroupDest.GET(OptOrig."VAT Prod. Posting Group");
            END ELSE BEGIN
              OptDest."VAT Prod. Posting Group" := '';
            END;
            IF CopyVATBusinessPostingGroup THEN BEGIN
              IF (OptOrig."VAT Bus. Posting Group" <> '') THEN
                VATBusinessPostingGroupDest.GET(OptOrig."VAT Bus. Posting Group");
            END ELSE BEGIN
              OptDest."VAT Bus. Posting Group" := '';
            END;
            IF CopyUnitOfMeasure THEN BEGIN
              IF OptOrig."Unit of Measure Code" <> '' THEN
                UnitofMeasure.GET(OptOrig."Unit of Measure Code");
            END ELSE
              OptDest."Unit of Measure Code" := '';
            IF NOT CopyFixedSalesPrice THEN
              OptDest."Fixed Sales Price" := FALSE;
            IF NOT CopyDevelopersDiscountPercentage THEN
              OptDest."Developers Discount Percentage" := 0;
            IF NOT CopyContractorSurchargePercentage THEN
              OptDest."Contractor Surcharge %" := 0;
            //OptDest."Net Price" := 0;
            //OptDest."Contract Amount" := 0;
            //OptDest."Offered Amount" := 0;
            //OptDest."Computed VAT Amount" := 0;
            //OptDest."VAT Amount" := 0;
            //OptDest."Computed Sales Price Incl. VAT" := 0;
            //OptDest."Sales Amount incl. VAT" := 0;
            //OptDest."Sales Price incl. VAT" := 0;
            //OptDest."Sales Price excl. VAT" := 0;
            //DP01247.en
            OptDest."Generation Date" := 0D;
            OptDest."Last Date Printed on Opt.List" := 0D;
            OptDest."Last Time Printed on Opt.List" := 0T;
            OptDest."Transaction Date Out" := 0DT;

            IF OptDest."Plot No." <> '' THEN BEGIN
              OptDest.Principal := PlotDest."Principal Options";
            END;

            OptDest."Budget Changed by Integration" := TRUE;
            OptDest."Transaction Date In" := CURRENTDATETIME;
            OptDest.DetermineTotal(FALSE);  //DP01247

            OptDest.INSERT;
            NewOptionsBool := TRUE;

            //Copy texts.
            OptionTextOrigRec.RESET;
            OptionTextOrigRec.SETRANGE(Table, OptionTextOrigRec.Table::Option);
            OptionTextOrigRec.SETRANGE("Project No.", OptOrig."Project No.");
            OptionTextOrigRec.SETRANGE("House Model", OptOrig."House Model");
            OptionTextOrigRec.SETRANGE("Option Main Group", OptOrig."Main Group");
            OptionTextOrigRec.SETRANGE("Option Sub Group", OptOrig."Sub Group");
            OptionTextOrigRec.SETRANGE("Option Group",OptOrig.Group);
            OptionTextOrigRec.SETRANGE("Plot No.", OptOrig."Plot No.");
            OptionTextOrigRec.SETRANGE(Option, OptOrig.Option);
            IF OptionTextOrigRec.FINDSET THEN BEGIN
              REPEAT
                OptionTextDestRec.TRANSFERFIELDS(OptionTextOrigRec);
                OptionTextDestRec."Project No." := iProjectDest;
                IF OptionTextDestRec.INSERT THEN;
              UNTIL OptionTextOrigRec.NEXT = 0;
            END;

            //DP01247.sn
            IF CopyTechnicalText THEN BEGIN
              OptionTextOrigRec.SETRANGE("Text Type", OptionTextOrigRec."Text Type"::Technical);
              IF OptionTextOrigRec.FINDSET THEN BEGIN
                REPEAT
                  OptionTextDestRec.TRANSFERFIELDS(OptionTextOrigRec);
                  OptionTextDestRec."Project No." := iProjectDest;  //C060156
                  IF OptionTextDestRec.INSERT THEN;
                UNTIL OptionTextOrigRec.NEXT = 0;
              END;
            END;
            //
            IF CopySurcharges THEN BEGIN  //C060156
              OptionSurchargeOrig.SETRANGE("Project No.", OptOrig."Project No.");
              OptionSurchargeOrig.SETRANGE("House Model", OptOrig."House Model");
              OptionSurchargeOrig.SETRANGE("Main Group", OptOrig."Main Group");
              OptionSurchargeOrig.SETRANGE("Sub Group", OptOrig."Sub Group");
              OptionSurchargeOrig.SETRANGE(Group, OptOrig.Group);
              OptionSurchargeOrig.SETRANGE("Plot No.", OptOrig."Plot No.");
              OptionSurchargeOrig.SETRANGE(Option, OptOrig.Option);
              IF OptionSurchargeOrig.FINDSET THEN BEGIN
                REPEAT
                  OptionSurchargeDest.TRANSFERFIELDS(OptionSurchargeOrig);
                  OptionSurchargeDest."Project No." := iProjectDest;  //C060156
                  IF OptionSurchargeDest.INSERT THEN;
                UNTIL OptionSurchargeOrig.NEXT = 0;
              END;
            END;
            //DP01247.en

            ProjectDataNewBool := TRUE;

            OptOrig."Transaction Date Out" := CURRENTDATETIME;
            OptOrig.MODIFY;

          END ELSE BEGIN

            IF (iPlotDest <> '') THEN
                OptDest.Status := OptDest.Status::Offered;

            OptDest.MODIFY;

            //(Sales) delete texts.
            OptionTextDestRec.RESET;
            OptionTextDestRec.SETRANGE(Table, OptionTextOrigRec.Table::Option);
            OptionTextDestRec.SETFILTER("Project No.", '%1', iProjectDest);
            OptionTextDestRec.SETFILTER("House Model", '%1', OptOrig."House Model");
            OptionTextDestRec.SETFILTER("Option Main Group", '%1', OptOrig."Main Group");
            OptionTextDestRec.SETFILTER("Option Sub Group", '%1', OptOrig."Sub Group");
            OptionTextDestRec.SETFILTER("Option Group", '%1', OptOrig.Group);
            OptionTextDestRec.SETFILTER("Plot No.", '%1', OptOrig."Plot No.");
            OptionTextDestRec.SETFILTER(Option, '%1', OptOrig.Option);
            OptionTextDestRec.DELETEALL;

            //Copy texts.
            OptionTextOrigRec.RESET;
            OptionTextOrigRec.SETRANGE(Table, OptionTextOrigRec.Table::Option);
            OptionTextOrigRec.SETRANGE("Project No.", OptOrig."Project No.");
            OptionTextOrigRec.SETRANGE("House Model", OptOrig."House Model");
            OptionTextOrigRec.SETRANGE("Option Main Group", OptOrig."Main Group");
            OptionTextOrigRec.SETRANGE("Option Sub Group", OptOrig."Sub Group");
            OptionTextOrigRec.SETRANGE("Option Group",OptOrig.Group);
            OptionTextOrigRec.SETRANGE("Plot No.", OptOrig."Plot No.");
            OptionTextOrigRec.SETRANGE(Option, OptOrig.Option);
            IF OptionTextOrigRec.FINDSET THEN BEGIN
              REPEAT
                OptionTextDestRec.TRANSFERFIELDS(OptionTextOrigRec);
                OptionTextDestRec."Project No." := iProjectDest;
                IF OptionTextDestRec.INSERT THEN;
              UNTIL OptionTextOrigRec.NEXT = 0;
            END;
          END;
          CopyOptionBudget;

          IF (iPlotDest <> '') THEN BEGIN
            OptDest.Status := OptOrig.Status;
            OptDest.MODIFY;
          END;

        UNTIL OptOrig.NEXT = 0;
      END;
    END;

    PROCEDURE InsertBuyer@4();
    BEGIN
      ContactOrigRec.CHANGECOMPANY(CompanyOrigin);
      IF ContactOrigRec.GET(PlotDest.Buyer) THEN BEGIN
        IF NOT ContactDestRec.GET(PlotDest.Buyer) THEN BEGIN
          ContactDestRec.TRANSFERFIELDS(ContactOrigRec);
          ContactDestRec.INSERT;
          ProjectDataNewBool := TRUE;
        END;
      END;
    END;

    PROCEDURE InsertPlotPrincipalOptions@1100485003();
    BEGIN
      CustomerOrigRec.CHANGECOMPANY(CompanyOrigin);
      IF CustomerOrigRec.GET(PlotDest."Principal Options") THEN BEGIN
        IF NOT CustomerDestRec.GET(PlotDest."Principal Options") THEN BEGIN
          CustomerDestRec.TRANSFERFIELDS(CustomerOrigRec);
          CustomerDestRec.INSERT;
          ProjectDataNewBool := TRUE;
        END;
      END;
      ProjPrinDest.INIT;
      ProjPrinDest."Project No." := ProjRecTo."No.";
      ProjPrinDest.Principal := PlotDest."Principal Options";
      ProjPrinDest."Main Project No." := ProjRecTo."Main Project";
      ProjPrinDest."Collect Installment Invoice By" := ProjectSetupDest."Default Collect Inst. Inv. By";
      //ProjPrinDest."One Plot per Installm. Invoice" := ProjectSetupDest."Default One Plot p. Inst. Inv.";
      //ProjPrinDest."OLDOne Plot per Installm. Inv." := ProjectSetupDest."OLDDef. One Plot p. Inst. Inv."; //mg.o, 27-07-11: C-019332
      //ProjPrinDest."OLDOne Plot per Installm. Invoice" := ProjectSetupDest."Default One Plot p. Inst. Inv.";
      ProjPrinDest.INSERT;
    END;

    PROCEDURE CopyHouseModels@1210190000(iProjectOrig@1210190002 : Code[20];iProjectDest@1210190001 : Code[20]) NewHouseModelsBool : Boolean;
    BEGIN
      NewHouseModelsBool := FALSE;
      ProjModelOrig.CHANGECOMPANY(CompanyOrigin);
      ProjUnitOrig.CHANGECOMPANY(CompanyOrigin);
      OptOrig.CHANGECOMPANY(CompanyOrigin);
      ProjModelOrig.SETFILTER("Project No.", '%1', iProjectOrig);

      ProjModelOrig.SETFILTER(Model, HouseModelFilter);

      IF ProjModelOrig.FINDSET THEN BEGIN
        REPEAT
          IF ProjModelDest.GET(iProjectDest, ProjModelOrig.Model) THEN BEGIN
            ProjModelDest.TRANSFERFIELDS(ProjModelOrig, FALSE);
            ProjModelDest.MODIFY;
            ProjectDataUpdBool := TRUE;
          END ELSE BEGIN
            ProjModelDest.TRANSFERFIELDS(ProjModelOrig);
            ProjModelDest."Project No." := iProjectDest;
            ProjModelDest.INSERT;
            ProjectDataNewBool := TRUE;
            NewHouseModelsBool := TRUE;
          END;
          ProjUnitOrig.SETFILTER("Project No.", '%1', ProjModelOrig."Project No.");
          ProjUnitOrig.SETFILTER(Model, '%1', ProjModelOrig.Model);
          IF ProjUnitOrig.FINDSET THEN BEGIN
            REPEAT
              IF ProjUnitDest.GET(iProjectDest, ProjUnitOrig.Model,ProjUnitOrig.Unit) THEN BEGIN
                ProjUnitDest.TRANSFERFIELDS(ProjUnitOrig, FALSE);
                ProjUnitDest.MODIFY;
                ProjectDataUpdBool := TRUE;
              END ELSE BEGIN
                ProjUnitDest.TRANSFERFIELDS(ProjUnitOrig);
                ProjUnitDest."Project No." := iProjectDest;
                ProjUnitDest.INSERT;
                ProjectDataNewBool := TRUE;
              END;
            UNTIL ProjUnitOrig.NEXT = 0;
          END;
        UNTIL ProjModelOrig.NEXT = 0;
      END;
    END;

    PROCEDURE CopyOptionBudget@1100525007() lDestUpdated : Boolean;
    BEGIN
      lDestUpdated := FALSE;

      OptBudgetOrig.RESET;
      OptBudgSumOrig.RESET;
      OptBudgetOrig.CHANGECOMPANY(CompanyOrigin);
      OptBudgSumOrig.CHANGECOMPANY(CompanyOrigin);

      //** Remove existing summary sheet and option budget
      OptBudgSumDest.SETFILTER("Project No.", '%1', ProjRecTo."No.");
      OptBudgSumDest.SETFILTER("Contract No.", '%1', '');
      OptBudgSumDest.SETFILTER("Plot No.", '%1', OptOrig."Plot No.");
      OptBudgSumDest.SETRANGE("House Model", OptOrig."House Model");
      OptBudgSumDest.SETRANGE("Main Group", OptOrig."Main Group");
      OptBudgSumDest.SETRANGE(Group, OptOrig.Group);
      OptBudgSumDest.SETRANGE("Sub Group", OptOrig."Sub Group");
      OptBudgSumDest.SETRANGE(Option, OptOrig.Option);
      OptBudgSumDest.DELETEALL;
      OptBudgSumDest.RESET;

      OptBudgetDest.SETFILTER("Project No.", '%1',  ProjRecTo."No.");
      OptBudgetDest.SETFILTER("Plot No.", '%1', OptOrig."Plot No.");
      OptBudgetDest.SETRANGE("House Model", OptOrig."House Model");
      OptBudgetDest.SETRANGE("Main Group", OptOrig."Main Group");
      OptBudgetDest.SETRANGE(Group, OptOrig.Group);
      OptBudgetDest.SETRANGE("Sub Group", OptOrig."Sub Group");
      OptBudgetDest.SETRANGE(Option, OptOrig.Option);
      OptBudgetDest.DELETEALL;
      OptBudgetDest.RESET;

      //**Option Budget
      OptBudgetOrig.SETFILTER("Project No.", '%1',  ProjRecFrom."No.");
      OptBudgetOrig.SETFILTER("Plot No.", '%1', OptOrig."Plot No.");
      OptBudgetOrig.SETRANGE("House Model", OptOrig."House Model");
      OptBudgetOrig.SETRANGE("Main Group", OptOrig."Main Group");
      OptBudgetOrig.SETRANGE(Group, OptOrig.Group);
      OptBudgetOrig.SETRANGE("Sub Group", OptOrig."Sub Group");
      OptBudgetOrig.SETRANGE(Option, OptOrig.Option);
      IF OptBudgetOrig.FINDSET THEN BEGIN
        REPEAT
          OptBudgetDest.COPY(OptBudgetOrig);
          OptBudgetDest."Project No." :=  ProjRecTo."No.";

          IF OptBudgetDest."Cost Object" <> '' THEN
            OptBudgetDest.VALIDATE("Cost Object");
          IF OptBudgetDest."Unit of Measure" <> '' THEN
            OptBudgetDest.VALIDATE("Unit of Measure");
          IF OptBudgetDest."Rate Code" <> '' THEN
            OptBudgetDest.VALIDATE("Rate Code");
          IF OptBudgetDest."Unit of Time" <> '' THEN
            OptBudgetDest.VALIDATE("Unit of Time");
          IF OptBudgetDest."Cost Component" <> '' THEN
            OptBudgetDest.VALIDATE("Cost Component");

          OptBudgetDest.INSERT(TRUE);
          lDestUpdated := TRUE;
        UNTIL OptBudgetOrig.NEXT = 0;
      END;

      //** Summary Sheet Option Budget
      OptBudgSumOrig.SETFILTER("Project No.", '%1', ProjRecFrom."No.");
      OptBudgSumOrig.SETFILTER("Contract No.", '%1', '');
      OptBudgSumOrig.SETFILTER("Plot No.", '%1', OptOrig."Plot No.");
      OptBudgSumOrig.SETRANGE("House Model", OptOrig."House Model");
      OptBudgSumOrig.SETRANGE("Main Group", OptOrig."Main Group");
      OptBudgSumOrig.SETRANGE(Group, OptOrig.Group);
      OptBudgSumOrig.SETRANGE("Sub Group", OptOrig."Sub Group");
      OptBudgSumOrig.SETRANGE(Option, OptOrig.Option);
      IF OptBudgSumOrig.FINDSET THEN BEGIN
        REPEAT
          OptBudgSumDest.COPY(OptBudgSumOrig);

          OptBudgSumDest."Project No." :=  ProjRecTo."No.";

          IF OptBudgSumDest."Cost Object" <> '' THEN
            OptBudgSumDest.VALIDATE("Cost Object");
          IF OptBudgSumDest."Unit of Measure" <> '' THEN
            OptBudgSumDest.VALIDATE("Unit of Measure");
          IF OptBudgSumDest."Rate Code" <> '' THEN
            OptBudgSumDest.VALIDATE("Rate Code");
          IF OptBudgSumDest."Cost Component" <> '' THEN
            OptBudgSumDest.VALIDATE("Cost Component");

          OptBudgSumDest.INSERT(TRUE);
          lDestUpdated := TRUE;
        UNTIL OptBudgSumOrig.NEXT = 0;
      END;

      OptDest."Budget Changed by Integration" := TRUE;
      OptDest.MODIFY;
    END;

    PROCEDURE AddMessage@1100485000(ToCompany@1100485000 : Text[50];FromCompany@1100485004 : Text[50];FromProject@1100485001 : Code[20];FromPlot@1100485002 : Code[20];lText@1100485003 : Text[250]);
    BEGIN
      ActivityReport.AddMessage(ToCompany,FromCompany,FromProject,FromPlot,COPYSTR(lText, 1, 110));
      LinesPrinted := TRUE;
    END;

    LOCAL PROCEDURE NewProjectOnAfterValidate@19059284();
    BEGIN
      IF NewProject THEN BEGIN
        txtbxProjToFilterEditable := FALSE;
        ProjToFilter := '';
      END ELSE
        txtbxProjToFilterEditable := TRUE;
    END;

    LOCAL PROCEDURE ValidateCompanyOrigin@1100528600();
    VAR
      Company@1100525000 : Record 2000000006;
    BEGIN
      IF CompanyOrigin = COMPANYNAME THEN
        ERROR(Text015,CompanyOrigin);
      Company.GET(CompanyOrigin);

      ProjectSetupOrig.CHANGECOMPANY(CompanyDestiny);
      ProjectSetupOrig.FIND('-');
    END;

    LOCAL PROCEDURE OnValidateProjectOption@1100528900();
    BEGIN
      //C058878
      CopyTechnicalText := ProjectOption;
      CopySurcharges := ProjectOption;
      CopyVATBusinessPostingGroup := ProjectOption;
      CopyVATProductPostingGroup := ProjectOption;
      CopyInstallmentScheme := ProjectOption;
      CopyFixedSalesPrice := ProjectOption;
      CopyDevelopersDiscountPercentage := ProjectOption;
      CopyContractorSurchargePercentage := ProjectOption;
      CopyUnitOfMeasure := ProjectOption;
      //
      CopyTechnicalTextEnable := ProjectOption;
      CopySurchargesEnable := ProjectOption;
      CopyVATBusinessPostingGroupEnable := ProjectOption;
      CopyVATProductPostingGroupEnable := ProjectOption;
      CopyInstallmentSchemeEnable := ProjectOption;
      CopyFixedSalesPriceEnable := ProjectOption;
      CopyDevelopersDiscountPercentageEnable := ProjectOption;
      CopyContractorSurchargePercentageEnable := ProjectOption;
      CopyUnitOfMeasureEnable := ProjectOption;
    END;

    BEGIN
    END.
  }
}

