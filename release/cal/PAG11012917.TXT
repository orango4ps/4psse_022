OBJECT Page 11012917 _Investment Proposal MB
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Investment Proposal Matrix;
    LinksAllowed=No;
    SourceTable=Table11012913;
    PageType=ListPart;
    OnInit=BEGIN
             FieldEditable1 := TRUE;
             FieldEditable2 := TRUE;
             FieldEditable3 := TRUE;
             FieldEditable4 := TRUE;
             FieldEditable5 := TRUE;
             FieldEditable6 := TRUE;
             FieldEditable7 := TRUE;
             FieldEditable8 := TRUE;
             FieldEditable9 := TRUE;
             FieldEditable10 := TRUE;
             FieldEditable11 := TRUE;
             FieldEditable12 := TRUE;
             FieldVisible1 := TRUE;
             FieldVisible2 := TRUE;
             FieldVisible3 := TRUE;
             FieldVisible4 := TRUE;
             FieldVisible5 := TRUE;
             FieldVisible6 := TRUE;
             FieldVisible7 := TRUE;
             FieldVisible8 := TRUE;
             FieldVisible9 := TRUE;
             FieldVisible10 := TRUE;
             FieldVisible11 := TRUE;
             FieldVisible12 := TRUE;

             IncreaseLevelEnable := TRUE;
             DecreaseLevelEnable := TRUE;

             DescriptionEditable := TRUE;
             BudgetDistributionEditable := TRUE;
             ReleasedBudgetManualEditable := TRUE;
             TotalingEditable := TRUE;
             CostObjectFilterEditable := TRUE;
             PercentageEditable := TRUE;
             PercentageFilterEditable := TRUE;
             TotTypeForPercSubTotalsEditabl := TRUE;
           END;

    OnAfterGetRecord=VAR
                       I@1100528700 : Integer;
                     BEGIN
                       CALCFIELDS("Reference Date", Fixed);
                       GetProjectDevelopment;

                       FOR I := 1 TO MATRIX_CurrSetLength DO
                         MATRIX_OnAfterGetRecord(I);

                       FOR I := 1 TO ARRAYLEN(MATRIX_MatrixRecords) DO
                         MATRIX_SetFieldEditable(I);

                       SetFieldEditable;

                       CalculateBudgetToDistribute;

                       ReleasedBudgetManual := ProjectDevelopmentFunctions.ToRoundedValue(
                         CalculateReleasedBudgetManual, RoundFactor);

                       RubricBudget := CalculateRubricBudget;
                       IF NOT (Type IN [Type::PRI, Type::ROS, Type::"Perc. (Sub)Totals"]) THEN // Not percentage
                         RubricBudget := ProjectDevelopmentFunctions.ToRoundedValue(RubricBudget, RoundFactor);

                       RubricReleasedBudget := CalculateRubricReleasedBudget;
                       IF NOT (Type IN [Type::"Perc. (Sub)Totals"]) THEN // Not percentage
                         RubricReleasedBudget := ProjectDevelopmentFunctions.ToRoundedValue(RubricReleasedBudget, RoundFactor);

                       BudgetFromRefDate := ProjectDevelopmentFunctions.CalculateBudgetByRubric(Rec, 0D, 0D, "Reference Date");
                       IF NOT (Type IN [Type::"Perc. (Sub)Totals"]) THEN // Not percentage
                         BudgetFromRefDate := ProjectDevelopmentFunctions.ToRoundedValue(BudgetFromRefDate, RoundFactor);
                     END;

    OnNewRecord=BEGIN
                  RubricBudget := 0;
                  BudgetFromRefDate := 0;
                  CLEAR(MATRIX_CellData);
                END;

    OnInsertRecord=BEGIN
                     SetRecalculateEPV;
                   END;

    OnModifyRecord=BEGIN
                     SetRecalculateEPV;
                   END;

    OnDeleteRecord=BEGIN
                     CALCFIELDS(Fixed);
                     IF Fixed THEN
                       EXIT(FALSE);  //* Als 'Fixed' dan is scherm niet editable, toch was verwijderen nog mogelijk

                     SetRecalculateEPV;
                   END;

    ActionList=ACTIONS
    {
      { 1100528737;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100528725;1 ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 NOR=Fu&nksjon;
                                 SVE=Fu&nktioner] }
      { 1100528727;2 ;Action    ;
                      CaptionML=[ENU=Outdent;
                                 NOR=Reduser innrykk;
                                 SVE=Minska indrag];
                      Enabled=DecreaseLevelEnable;
                      Image=Indent;
                      OnAction=BEGIN
                                 AdjustIndentation(-1);
                               END;
                                }
      { 1100528726;2 ;Action    ;
                      CaptionML=[ENU=Indent;
                                 NOR=Rykk inn;
                                 SVE=Indrag];
                      Enabled=IncreaseLevelEnable;
                      Image=Indent;
                      OnAction=BEGIN
                                 AdjustIndentation(1);
                               END;
                                }
      { 1100528733;2 ;Action    ;
                      CaptionML=[ENU=EPV/PRI Calculation (On/Off);
                                 SVE=EPV/PRI-ber„kning (p†/av)];
                      Image=Calculate;
                      OnAction=BEGIN
                                 SetEPVCalculation(NOT EPVCalculationOn);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100528731;0;Container;
                ContainerType=ContentArea }

    { 1100528730;1;Group  ;
                IndentationColumnName=Indentation;
                IndentationControls=Description;
                GroupType=Repeater }

    { 1100528712;2;Field  ;
                SourceExpr="Rubric Code" }

    { 1100528713;2;Field  ;
                SourceExpr=Description;
                Editable=DescriptionEditable }

    { 1100528714;2;Field  ;
                SourceExpr=Type;
                OnValidate=VAR
                             InvestmProposalRubricLine@1100528701 : Record 11012913;
                           BEGIN
                             IF (Totaling = '') AND ("Rubric Code" <> '') THEN BEGIN
                               CASE Type OF
                                 Type::Subtotal:
                                   BEGIN
                                     InvestmProposalRubricLine.SETRANGE("Project No.", "Project No.");
                                     InvestmProposalRubricLine.SETRANGE(Version, Version);
                                     InvestmProposalRubricLine.SETFILTER("Rubric Code", '<%1', "Rubric Code");
                                     InvestmProposalRubricLine.SETRANGE(Type, Type::Title);
                                     IF InvestmProposalRubricLine.FIND('+') THEN
                                       Totaling := InvestmProposalRubricLine."Rubric Code" + '..' + "Rubric Code";
                                   END;
                                 Type::Balance:
                                   Totaling := '..' + "Rubric Code";
                               END;
                             END;
                             CurrPage.UPDATE; // Set also editable of fields
                           END;
                            }

    { 1100528716;2;Field  ;
                Name=BudgetDistribution;
                BlankZero=Yes;
                SourceExpr="Budget Distribution";
                Editable=BudgetDistributionEditable }

    { 1100528715;2;Field  ;
                Name=BudgetToDistribute;
                CaptionML=[ENU=Budget to Distribute;
                           SVE=Budget att distribuera];
                BlankZero=Yes;
                SourceExpr=BudgetToDistribute;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              BudgetToDistributeDrillDown;
                            END;
                             }

    { 1100528717;2;Field  ;
                Name=ReleasedBudgetManual;
                CaptionML=[ENU=Released Budget (Manual);
                           NOR=Frigitt budsjett (manuell);
                           SVE=Sl„ppt budget (manuell)];
                BlankZero=Yes;
                SourceExpr=ReleasedBudgetManual;
                Visible=FALSE;
                Editable=ReleasedBudgetManualEditable;
                OnValidate=BEGIN
                             "Released Budget Manual" := ProjectDevelopmentFunctions.FromRoundedValue(ReleasedBudgetManual, RoundFactor);
                           END;
                            }

    { 1100528719;2;Field  ;
                Name=RubricReleasedBudget;
                CaptionML=[ENU=Released Budget;
                           SVE=Sl„ppt budget];
                BlankZero=Yes;
                SourceExpr=RubricReleasedBudget;
                Visible=FALSE;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ReleasedBudgetDrillDown;
                            END;
                             }

    { 1100528720;2;Field  ;
                Name=RubricBudget;
                CaptionML=[ENU=Budget;
                           NOR=Budsjett;
                           SVE=Budget];
                BlankZero=Yes;
                SourceExpr=RubricBudget;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              BudgetDrillDown(0);
                            END;
                             }

    { 1100528722;2;Field  ;
                Name=BudgetFromRefDate;
                CaptionML=[ENU=Budget from Ref. Date;
                           SVE=Budget fr†n ref.datum];
                BlankZero=Yes;
                SourceExpr=BudgetFromRefDate;
                Visible=FALSE;
                Editable=FALSE }

    { 1100528723;2;Field  ;
                SourceExpr=Totaling;
                Editable=TotalingEditable;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;
                            }

    { 1100528724;2;Field  ;
                SourceExpr="Cost Object Filter";
                Editable=CostObjectFilterEditable }

    { 1100528718;2;Field  ;
                BlankZero=Yes;
                SourceExpr=Percentage;
                Editable=PercentageEditable;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;
                            }

    { 1100528728;2;Field  ;
                SourceExpr="Percentage Filter";
                Editable=PercentageFilterEditable;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;
                            }

    { 1100528729;2;Field  ;
                SourceExpr="Tot.Type for Perc. (Sub)Totals";
                Visible=FALSE;
                Editable=TotTypeForPercSubTotalsEditabl }

    { 1100528711;2;Field  ;
                Name=Field1;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[1];
                CaptionClass='3,' + MATRIX_CaptionSet[1];
                Visible=FieldVisible1;
                Editable=FieldEditable1;
                OnValidate=BEGIN
                             MATRIX_OnValidate(1);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(1);
                            END;
                             }

    { 1100528710;2;Field  ;
                Name=Field2;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[2];
                CaptionClass='3,' + MATRIX_CaptionSet[2];
                Visible=FieldVisible2;
                Editable=FieldEditable2;
                OnValidate=BEGIN
                             MATRIX_OnValidate(2);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(2);
                            END;
                             }

    { 1100528709;2;Field  ;
                Name=Field3;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[3];
                CaptionClass='3,' + MATRIX_CaptionSet[3];
                Visible=FieldVisible3;
                Editable=FieldEditable3;
                OnValidate=BEGIN
                             MATRIX_OnValidate(3);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(3);
                            END;
                             }

    { 1100528708;2;Field  ;
                Name=Field4;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[4];
                CaptionClass='3,' + MATRIX_CaptionSet[4];
                Visible=FieldVisible4;
                Editable=FieldEditable4;
                OnValidate=BEGIN
                             MATRIX_OnValidate(4);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(4);
                            END;
                             }

    { 1100528707;2;Field  ;
                Name=Field5;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[5];
                CaptionClass='3,' + MATRIX_CaptionSet[5];
                Visible=FieldVisible5;
                Editable=FieldEditable5;
                OnValidate=BEGIN
                             MATRIX_OnValidate(5);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(5);
                            END;
                             }

    { 1100528706;2;Field  ;
                Name=Field6;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[6];
                CaptionClass='3,' + MATRIX_CaptionSet[6];
                Visible=FieldVisible6;
                Editable=FieldEditable6;
                OnValidate=BEGIN
                             MATRIX_OnValidate(6);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(6);
                            END;
                             }

    { 1100528705;2;Field  ;
                Name=Field7;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[7];
                CaptionClass='3,' + MATRIX_CaptionSet[7];
                Visible=FieldVisible7;
                Editable=FieldEditable7;
                OnValidate=BEGIN
                             MATRIX_OnValidate(7);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(7);
                            END;
                             }

    { 1100528704;2;Field  ;
                Name=Field8;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[8];
                CaptionClass='3,' + MATRIX_CaptionSet[8];
                Visible=FieldVisible8;
                Editable=FieldEditable8;
                OnValidate=BEGIN
                             MATRIX_OnValidate(8);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(8);
                            END;
                             }

    { 1100528703;2;Field  ;
                Name=Field9;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[9];
                CaptionClass='3,' + MATRIX_CaptionSet[9];
                Visible=FieldVisible9;
                Editable=FieldEditable9;
                OnValidate=BEGIN
                             MATRIX_OnValidate(9);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(9);
                            END;
                             }

    { 1100528702;2;Field  ;
                Name=Field10;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[10];
                CaptionClass='3,' + MATRIX_CaptionSet[10];
                Visible=FieldVisible10;
                Editable=FieldEditable10;
                OnValidate=BEGIN
                             MATRIX_OnValidate(10);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(10);
                            END;
                             }

    { 1100528701;2;Field  ;
                Name=Field11;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[11];
                CaptionClass='3,' + MATRIX_CaptionSet[11];
                Visible=FieldVisible11;
                Editable=FieldEditable11;
                OnValidate=BEGIN
                             MATRIX_OnValidate(11);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(11);
                            END;
                             }

    { 1100528700;2;Field  ;
                Name=Field12;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[12];
                CaptionClass='3,' + MATRIX_CaptionSet[12];
                Visible=FieldVisible12;
                Editable=FieldEditable12;
                OnValidate=BEGIN
                             MATRIX_OnValidate(12);
                           END;

                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(12);
                            END;
                             }

  }
  CODE
  {
    VAR
      MATRIX_MatrixRecord@1100528723 : Record 2000000007;
      MATRIX_MatrixRecords@1100528722 : ARRAY [32] OF Record 2000000007;
      MATRIX_CaptionSet@1100528718 : ARRAY [32] OF Text[80];
      MATRIX_CurrSetLength@1100528716 : Integer;
      MATRIX_CellData@1100528715 : ARRAY [32] OF Decimal;
      MATRIX_PeriodType@1100528712 : 'Day,Week,Month,Quarter,Year';
      FieldEditable1@1100528711 : Boolean INDATASET;
      FieldEditable2@1100528710 : Boolean INDATASET;
      FieldEditable3@1100528709 : Boolean INDATASET;
      FieldEditable4@1100528708 : Boolean INDATASET;
      FieldEditable5@1100528707 : Boolean INDATASET;
      FieldEditable6@1100528706 : Boolean INDATASET;
      FieldEditable7@1100528705 : Boolean INDATASET;
      FieldEditable8@1100528704 : Boolean INDATASET;
      FieldEditable9@1100528703 : Boolean INDATASET;
      FieldEditable10@1100528702 : Boolean INDATASET;
      FieldEditable11@1100528701 : Boolean INDATASET;
      FieldEditable12@1100528700 : Boolean INDATASET;
      FieldVisible1@1100409007 : Boolean INDATASET;
      FieldVisible2@1100409006 : Boolean INDATASET;
      FieldVisible3@1100409005 : Boolean INDATASET;
      FieldVisible4@1100409004 : Boolean INDATASET;
      FieldVisible5@1100409003 : Boolean INDATASET;
      FieldVisible6@1100409002 : Boolean INDATASET;
      FieldVisible7@1100409001 : Boolean INDATASET;
      FieldVisible8@1100409000 : Boolean INDATASET;
      FieldVisible9@1100409008 : Boolean INDATASET;
      FieldVisible10@1100409009 : Boolean INDATASET;
      FieldVisible11@1100409010 : Boolean INDATASET;
      FieldVisible12@1100409011 : Boolean INDATASET;
      DecreaseLevelEnable@1100528719 : Boolean INDATASET;
      IncreaseLevelEnable@1100528713 : Boolean INDATASET;
      ProjectDevelopment@1100528731 : Record 11012915;
      ProjectDevelopmentFunctions@1100528728 : Codeunit 11012903;
      RoundFactor@1100528725 : 'Geen,1,1000,1000000';
      EPVCalculationOn@1100528724 : Boolean;
      BudgetToDistribute@1100528721 : Decimal;
      ReleasedBudgetManual@1100528736 : Decimal;
      RubricReleasedBudget@1100528717 : Decimal;
      RubricBudget@1100528720 : Decimal;
      BudgetFromRefDate@1100528714 : Decimal;
      DescriptionEditable@1100528729 : Boolean INDATASET;
      BudgetDistributionEditable@1100528730 : Boolean INDATASET;
      ReleasedBudgetManualEditable@1100528732 : Boolean INDATASET;
      TotalingEditable@1100528726 : Boolean INDATASET;
      CostObjectFilterEditable@1100528733 : Boolean INDATASET;
      PercentageEditable@1100528734 : Boolean INDATASET;
      PercentageFilterEditable@1100528735 : Boolean INDATASET;
      TotTypeForPercSubTotalsEditabl@1100528727 : Boolean INDATASET;

    PROCEDURE Load@1132(VAR CaptionSet@1005 : ARRAY [32] OF Text[80];VAR MatrixRecords@1006 : ARRAY [32] OF Record 2000000007;CurrSetLength@1007 : Integer;PeriodType@1100528700 : 'Day,Week,Month,Quarter,Year';NewRoundFactor@1100528702 : 'None,1,1000,1000000');
    BEGIN
      CLEAR(MATRIX_CellData);
      COPYARRAY(MATRIX_CaptionSet, CaptionSet, 1);
      COPYARRAY(MATRIX_MatrixRecords, MatrixRecords, 1);

      MATRIX_CurrSetLength := CurrSetLength;

      MATRIX_SetFieldVisible;

      MATRIX_PeriodType := PeriodType;
      RoundFactor := NewRoundFactor;
    END;

    LOCAL PROCEDURE MATRIX_OnAfterGetRecord@1135(ColumnNo@1010 : Integer);
    BEGIN
      MATRIX_CellData[ColumnNo] := ProjectDevelopmentFunctions.ToRoundedValue(CalculateMatrixAmount(ColumnNo), RoundFactor);

      IF (NOT EPVCalculationOn) AND (Type = Type::EPV) THEN
        MATRIX_CellData[ColumnNo] := 0;
    END;

    LOCAL PROCEDURE MATRIX_OnValidate@1100525001(ColumnNo@1008 : Integer);
    BEGIN
      CALCFIELDS("Reference Date");

      IF UpdateBudget(ColumnNo, Rec) THEN BEGIN
        SetRecalculateEPV;
        CASE Type OF
          Type::Costs,
          Type::Revenues:
            UpdateSurcharges(Rec, FALSE);
        END;
        CurrPage.UPDATE;
      END;
    END;

    LOCAL PROCEDURE MATRIX_OnLookup@1100528701(ColumnNo@1100409000 : Integer);
    BEGIN
    END;

    LOCAL PROCEDURE MATRIX_OnDrillDown@1100409000(ColumnNo@1100409000 : Integer);
    BEGIN
      BudgetDrillDown(ColumnNo);
    END;

    LOCAL PROCEDURE MATRIX_OnAssistEdit@1100409001(ColumnNo@1100409000 : Integer);
    BEGIN
    END;

    LOCAL PROCEDURE MATRIX_UpdateCell@1100485007(CellValue@1100528700 : Decimal;ColumnNo@1100528701 : Integer);
    BEGIN
    END;

    LOCAL PROCEDURE MATRIX_SetFieldEditable@1100528700(ColumnNo@1100528700 : Integer);
    VAR
      FieldIsEditable@1100528701 : Boolean;
    BEGIN
      MATRIX_MatrixRecord := MATRIX_MatrixRecords[ColumnNo];

      FieldIsEditable :=
        ((NOT Fixed) AND
        (Type IN [Type::Costs, Type::Revenues]) AND
        (ProjectDevelopment."Budget Level" = ProjectDevelopment."Budget Level"::Project) AND
        ("Reference Date" <= MATRIX_MatrixRecord."Period End"));

      CASE ColumnNo OF
        1: FieldEditable1 := (ColumnNo <= MATRIX_CurrSetLength) AND FieldIsEditable;
        2: FieldEditable2 := (ColumnNo <= MATRIX_CurrSetLength) AND FieldIsEditable;
        3: FieldEditable3 := (ColumnNo <= MATRIX_CurrSetLength) AND FieldIsEditable;
        4: FieldEditable4 := (ColumnNo <= MATRIX_CurrSetLength) AND FieldIsEditable;
        5: FieldEditable5 := (ColumnNo <= MATRIX_CurrSetLength) AND FieldIsEditable;
        6: FieldEditable6 := (ColumnNo <= MATRIX_CurrSetLength) AND FieldIsEditable;
        7: FieldEditable7 := (ColumnNo <= MATRIX_CurrSetLength) AND FieldIsEditable;
        8: FieldEditable8 := (ColumnNo <= MATRIX_CurrSetLength) AND FieldIsEditable;
        9: FieldEditable9 := (ColumnNo <= MATRIX_CurrSetLength) AND FieldIsEditable;
        10: FieldEditable10 := (ColumnNo <= MATRIX_CurrSetLength) AND FieldIsEditable;
        11: FieldEditable11 := (ColumnNo <= MATRIX_CurrSetLength) AND FieldIsEditable;
        12: FieldEditable12 := (ColumnNo <= MATRIX_CurrSetLength) AND FieldIsEditable;
      END;
    END;

    LOCAL PROCEDURE MATRIX_SetFieldVisible@1100409002();
    BEGIN
      // Use only when the matrix contains checkboxes
    END;

    PROCEDURE SetEPVCalculation@1100485009(NewEPVCalculationOn@1100485000 : Boolean);
    BEGIN
      //* EPV, dus ook PRI
      EPVCalculationOn := NewEPVCalculationOn;
      IF EPVCalculationOn THEN
        SetRecalculateEPV;
    END;

    PROCEDURE AdjustIndentation@1210190005(IndentStep@1100529000 : Integer);
    VAR
      InvestmProposalRubricLine@1210190000 : Record 11012913;
    BEGIN
      CurrPage.SETSELECTIONFILTER(InvestmProposalRubricLine);
      CollAdjustIndentation(InvestmProposalRubricLine, IndentStep);
    END;

    PROCEDURE SwitchBold@1210190006();
    BEGIN
      //CurrPage.SETSELECTIONFILTER(InvestmProposalRubricLine);
      //InvestmProposalRubricLine.MARKEDONLY(TRUE);
      //CollSwitchBold(InvestmProposalRubricLine);
    END;

    PROCEDURE GetProjectDevelopment@1100485003();
    BEGIN
      IF ("Project No." <> ProjectDevelopment."Project No.") AND ("Project No." <> '') THEN
        ProjectDevelopment.GET("Project No.");
    END;

    PROCEDURE CalculateBudgetToDistribute@1100485005();
    VAR
      RubricBudgetToDistribute@1100485000 : Record 11012909;
    BEGIN
      BudgetToDistribute := 0;
      IF NOT (Type IN [Type::Costs, Type::Revenues, Type::"Costs to Distr. as Perc. Rev.", Type::Subtotal]) THEN
        EXIT;
      //* Voor type 'Balance' kan dit (nog) niet want daar zou het opbrengsten minus kosten moeten zijn. Dit kan alleen
      //* als er een budgetsoort toegevoegd wordt (zoals bij budgetregels). Maar dit kan op dit moment niet meer
      //* meegenomen worden in Update 4.0-002 (nu vlak voor uitlevering), mogelijk later als er vraag na is.

      RubricBudgetToDistribute.SETRANGE("Project No.", "Project No.");
      RubricBudgetToDistribute.SETRANGE(Version, Version);
      IF (Type <> Type::Subtotal) THEN
        RubricBudgetToDistribute.SETRANGE("Rubric Code", "Rubric Code")
      ELSE BEGIN
        IF (Totaling = '') THEN
          EXIT;
        RubricBudgetToDistribute.SETFILTER("Rubric Code", Totaling);
      END;
      RubricBudgetToDistribute.CALCSUMS(Amount);
      BudgetToDistribute := ProjectDevelopmentFunctions.ToRoundedValue(RubricBudgetToDistribute.Amount, RoundFactor);
    END;

    PROCEDURE BudgetToDistributeDrillDown@1100485006();
    VAR
      RubricBudgetToDistribute@1210190000 : Record 11012909;
      RubricBudgetToDistributePage@1210190002 : Page 11012912;
    BEGIN
      IF NOT (Type IN [Type::Costs, Type::Revenues, Type::"Costs to Distr. as Perc. Rev.", Type::Subtotal, Type::Balance]) THEN
        EXIT;

      CALCFIELDS(Fixed);
      IF (NOT Fixed) THEN BEGIN
        CurrPage.SAVERECORD;
        COMMIT;
      END;

      RubricBudgetToDistribute.FILTERGROUP(4);
      RubricBudgetToDistribute.SETRANGE("Project No.", "Project No.");
      RubricBudgetToDistribute.SETRANGE(Version, Version);
      RubricBudgetToDistribute.FILTERGROUP(0);
      IF (Type IN [Type::Costs, Type::Revenues, Type::"Costs to Distr. as Perc. Rev."]) THEN BEGIN
        RubricBudgetToDistribute.SETRANGE("Rubric Code", "Rubric Code");
      END ELSE BEGIN
        RubricBudgetToDistribute.SETFILTER("Rubric Code", Totaling);
      END;
      RubricBudgetToDistributePage.SETTABLEVIEW(RubricBudgetToDistribute);
      RubricBudgetToDistributePage.EDITABLE(NOT Fixed);
      RubricBudgetToDistributePage.RUNMODAL;

      IF (NOT Fixed) THEN BEGIN
        IF RubricBudgetToDistributePage.GetModified THEN
          CurrPage.UPDATE(FALSE);
      END;
    END;

    PROCEDURE BudgetDrillDown@1210190002(ColumnNo@1210190001 : Integer);
    VAR
      InvestmentProposalBudget@1210190000 : Record 11012914;
      InvestmentProposalBudgList@1210190002 : Page 11012918;
    BEGIN
      IF NOT (Type IN [Type::Costs, Type::Revenues,
                       Type::"Percentage Revenues", Type::"Percentage Costs",
                       Type::"Costs as Perc. Revenues", Type::"Revenues as Perc. Costs",
                       Type::"Costs to Distr. as Perc. Rev.",
                       Type::Subtotal, Type::Balance])
      THEN
        EXIT;

      CALCFIELDS(Fixed);
      IF (NOT Fixed) THEN BEGIN
        CurrPage.SAVERECORD;
        COMMIT;
      END;

      InvestmentProposalBudget.SETCURRENTKEY("Project No.", Version, "Rubric Code", Date);
      InvestmentProposalBudget.FILTERGROUP(4);
      InvestmentProposalBudget.SETRANGE("Project No.", "Project No.");
      InvestmentProposalBudget.SETRANGE(Version, Version);
      InvestmentProposalBudget.FILTERGROUP(0);
      IF (Type IN [Type::Subtotal, Type::Balance]) THEN
        InvestmentProposalBudget.SETFILTER("Rubric Code", Totaling)
      ELSE
        InvestmentProposalBudget.SETRANGE("Rubric Code", "Rubric Code");

      IF ColumnNo <> 0 THEN BEGIN  //* Use Period Filter
        MATRIX_MatrixRecord := MATRIX_MatrixRecords[ColumnNo];
        ProjectDevelopmentFunctions.SetDateFilterBudget(
          Rec, MATRIX_MatrixRecord."Period Start", MATRIX_MatrixRecord."Period End", 0D);
        InvestmentProposalBudget.SETFILTER(Date, GETFILTER("Date Filter"));
      END;

      InvestmentProposalBudgList.SETTABLEVIEW(InvestmentProposalBudget);
      InvestmentProposalBudgList.SetSelections(Rec, ((Type IN [Type::Costs, Type::Revenues]) AND (NOT Fixed)));
      InvestmentProposalBudgList.RUNMODAL;
      IF InvestmentProposalBudgList.GetModified THEN BEGIN
        SetRecalculateEPV;
        UpdateInvestmentProposal; //mg, 16-11-10: M19522
        CurrPage.UPDATE(FALSE);
      END;
    END;

    PROCEDURE ReleasedBudgetDrillDown@1100485002();
    VAR
      InvestmentProposalBudget@1210190000 : Record 11012914;
      InvestmentProposalBudgList@1210190002 : Page 11012918;
    BEGIN
      IF NOT (Type IN [Type::Costs, Type::Revenues,
                       Type::"Percentage Revenues", Type::"Percentage Costs",
                       Type::"Costs as Perc. Revenues", Type::"Revenues as Perc. Costs",
                       Type::"Costs to Distr. as Perc. Rev.",
                       Type::Subtotal, Type::Balance])
      THEN
        EXIT;

      CALCFIELDS("Reference Date");

      InvestmentProposalBudget.SETCURRENTKEY("Project No.", Version, "Rubric Code", Date);
      InvestmentProposalBudget.FILTERGROUP(4);
      InvestmentProposalBudget.SETRANGE("Project No.", "Project No.");
      InvestmentProposalBudget.SETRANGE(Version, Version);
      InvestmentProposalBudget.FILTERGROUP(0);
      IF (Type IN [Type::Subtotal, Type::Balance]) THEN
        InvestmentProposalBudget.SETFILTER("Rubric Code", Totaling)
      ELSE
        InvestmentProposalBudget.SETRANGE("Rubric Code", "Rubric Code");

      ProjectDevelopmentFunctions.SetDateFilterBudget(Rec, 0D, (WORKDATE - 1), 0D);
      InvestmentProposalBudget.SETFILTER(Date, GETFILTER("Date Filter"));

      InvestmentProposalBudgList.SETTABLEVIEW(InvestmentProposalBudget);
      InvestmentProposalBudgList.SetSelections(Rec, FALSE);
      InvestmentProposalBudgList.RUNMODAL;
    END;

    PROCEDURE UpdateBudget@1210190001(ColumnNo@1100528700 : Integer;InvestmProposalRubricLine@1210190002 : Record 11012913) : Boolean;
    VAR
      InvestmentProposalBudget@1210190001 : Record 11012914;
      NextLineNo@1210190003 : Integer;
      OldCellValue@1210190000 : Decimal;
      CellValue@1100528701 : Decimal;
    BEGIN
      IF NOT (InvestmProposalRubricLine.Type IN [InvestmProposalRubricLine.Type::Costs, InvestmProposalRubricLine.Type::Revenues]) THEN
        EXIT(FALSE);

      GetProjectDevelopment;
      IF (ProjectDevelopment."Budget Level" <> ProjectDevelopment."Budget Level"::Project) THEN
        EXIT;

      CALCFIELDS(Fixed);
      TESTFIELD(Fixed, FALSE);

      MATRIX_MatrixRecord := MATRIX_MatrixRecords[ColumnNo];
      CellValue := ProjectDevelopmentFunctions.FromRoundedValue(MATRIX_CellData[ColumnNo], RoundFactor);

      WITH InvestmentProposalBudget DO BEGIN
        SETCURRENTKEY("Project No.", Version, "Rubric Code", Date);
        SETRANGE("Project No.", InvestmProposalRubricLine."Project No.");
        SETRANGE(Version, InvestmProposalRubricLine.Version);
        SETRANGE("Rubric Code", InvestmProposalRubricLine."Rubric Code");
        SETRANGE(Date, MATRIX_MatrixRecord."Period Start", MATRIX_MatrixRecord."Period End");

        IF (CellValue = 0) THEN BEGIN
          DELETEALL;
          EXIT(TRUE);
        END;

        OldCellValue := CalculateMatrixAmount(ColumnNo);
        IF (OldCellValue = CellValue) THEN
          EXIT(FALSE);

        IF (COUNT = 1) THEN BEGIN
          FIND('-');
          IF (Frequency = 0) THEN
            Frequency := 1;
          IF (Quantity = 0) THEN
            Quantity := 1;
          VALIDATE("Unit Price", CellValue / (Quantity * Frequency));
          MODIFY;
          EXIT(TRUE);
        END;

        SETRANGE(Date, MATRIX_MatrixRecord."Period Start");
        IF FIND('+') THEN BEGIN
          IF (Frequency = 1) AND (Quantity = 1) THEN BEGIN
            VALIDATE("Unit Price", (Amount + CellValue - OldCellValue));
            IF (Amount = 0) THEN
              DELETE
            ELSE
              MODIFY;
            EXIT(TRUE);
          END;
        END;

        SETCURRENTKEY("Project No.", Version, "Rubric Code", "Line No.");
        SETRANGE(Date);
        IF FIND('+') THEN
          NextLineNo := "Line No." + 10000
        ELSE
          NextLineNo := 10000;

        INIT;
        "Project No." := InvestmProposalRubricLine."Project No.";
        Version := InvestmProposalRubricLine.Version;
        "Rubric Code" := InvestmProposalRubricLine."Rubric Code";
        "Line No." := NextLineNo;
        IF ("Reference Date" <= MATRIX_MatrixRecord."Period Start") THEN
          Date := MATRIX_MatrixRecord."Period Start"
        ELSE BEGIN
          IF ("Reference Date" <= MATRIX_MatrixRecord."Period End") THEN
            Date := "Reference Date"
          ELSE
            EXIT(FALSE);  //Geen error klapt dan uit prog. bovendien in deze situatie is matrixamount toch niet editable
        END;
        Description := InvestmProposalRubricLine.Description;
        Frequency := 1;
        Quantity := 1;
        "Unit of Measure" := '';
        VALIDATE("Unit Price", (CellValue - OldCellValue));
        IF (InvestmProposalRubricLine.Type = InvestmProposalRubricLine.Type::Costs) THEN
          "Budget Type" := "Budget Type"::Cost
        ELSE
          "Budget Type" := "Budget Type"::Revenue;
        INSERT;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CalculateReleasedBudgetManual@1100528703() : Decimal;
    VAR
      InvestmProposalRubricLine@1100528700 : Record 11012913;
    BEGIN
      IF (Type IN [Type::Subtotal, Type::Balance]) AND (Totaling <> '') THEN BEGIN
        InvestmProposalRubricLine."Project No." := "Project No.";
        InvestmProposalRubricLine.Version := Version;
        InvestmProposalRubricLine.SETFILTER("Rubric Filter", Totaling);
        InvestmProposalRubricLine.CALCFIELDS("Released Cost Budget Manual", "Released Revenue Budget Manual");
        IF (InvestmProposalRubricLine."Released Revenue Budget Manual" <> 0) OR
           (InvestmProposalRubricLine."Released Cost Budget Manual" <> 0)
        THEN BEGIN
          IF Type = Type::Subtotal THEN
            EXIT(InvestmProposalRubricLine."Released Revenue Budget Manual" +
                 InvestmProposalRubricLine."Released Cost Budget Manual")
          ELSE
            EXIT(InvestmProposalRubricLine."Released Revenue Budget Manual" -
                 InvestmProposalRubricLine."Released Cost Budget Manual");
        END;
      END;
      EXIT("Released Budget Manual");
    END;

    PROCEDURE CalculateRubricBudget@1210190011() : Decimal;
    BEGIN
      CASE Type OF
        Type::Costs,
        Type::Revenues,
        Type::"Percentage Costs",
        Type::"Percentage Revenues",
        Type::"Costs as Perc. Revenues",
        Type::"Revenues as Perc. Costs",
        Type::"Costs to Distr. as Perc. Rev.",
        Type::"Perc. (Sub)Totals",  //*15625.n
        Type::Subtotal,
        Type::Balance:
          EXIT(ProjectDevelopmentFunctions.CalculateBudgetByRubric(Rec, 0D, 0D, 0D));
        Type::ROS:
          EXIT(ProjectDevelopmentFunctions.CalculateTotalRos("Project No.", Version, "Reference Date", TRUE));
        Type::EPV:
          IF EPVCalculationOn THEN
            EXIT(
              ProjectDevelopmentFunctions.CalculateTotalEPV("Project No.", Version, "Reference Date", MATRIX_PeriodType, TRUE));
        Type::PRI:
          IF EPVCalculationOn THEN
            EXIT(
              ProjectDevelopmentFunctions.CalculateTotalPRI("Project No.", Version, "Reference Date", MATRIX_PeriodType, TRUE));
      END;
      EXIT(0);
    END;

    PROCEDURE CalculateRubricReleasedBudget@1100485001() : Decimal;
    BEGIN
      CASE Type OF
        Type::Costs,
        Type::Revenues,
        Type::"Percentage Costs",
        Type::"Percentage Revenues",
        Type::"Costs as Perc. Revenues",
        Type::"Revenues as Perc. Costs",
        Type::"Costs to Distr. as Perc. Rev.",
        Type::"Perc. (Sub)Totals",  //*15625.n
        Type::Subtotal,
        Type::Balance:
          EXIT(ProjectDevelopmentFunctions.CalculateBudgetByRubric(Rec, 0D, (WORKDATE - 1), 0D));
          //* Dit was tot de refentiedatum, nu tot de werkdatum want referentiedatum ligt nu altijd aan begin.
          //* Als je vrijgegeven tot referentiedatum wilt zien moet je maar bij scherm 'Projectkasstroom' kijken.
      END;
      EXIT(0);
    END;

    PROCEDURE CalculateMatrixAmount@1210190003(ColumnNo@1100528700 : Integer) : Decimal;
    VAR
      SplitType@1100528701 : 'Actual,Budget,Both';
    BEGIN
      MATRIX_MatrixRecord := MATRIX_MatrixRecords[ColumnNo];

      CASE Type OF
        Type::Costs,
        Type::Revenues,
        Type::"Percentage Costs",
        Type::"Percentage Revenues",
        Type::"Costs as Perc. Revenues",
        Type::"Revenues as Perc. Costs",
        Type::"Costs to Distr. as Perc. Rev.",
        Type::Subtotal,
        Type::Balance:
          EXIT(ProjectDevelopmentFunctions.CalculateBudgetByRubric(
                 Rec, MATRIX_MatrixRecord."Period Start", MATRIX_MatrixRecord."Period End", 0D));
        Type::EPV:
          IF EPVCalculationOn THEN
            EXIT(ProjectDevelopmentFunctions.CalculatePeriodEPV(
              "Project No.", Version, "Reference Date", MATRIX_PeriodType,
              MATRIX_MatrixRecord."Period Start", MATRIX_MatrixRecord."Period End",
              SplitType::Budget, TRUE));
      END;
      EXIT(0);
    END;

    PROCEDURE SetRecalculateEPV@1100485000();
    BEGIN
      ProjectDevelopmentFunctions.ResetEPVCalcSaveField('VERSION');  //* Forceer opnieuw opbouwen tmp table voor EPV en PRI
    END;

    PROCEDURE UpdateInvestmentProposal@1100525000();
    VAR
      InvestmentProposal@1100528700 : Record 11012912;
    BEGIN
      //mg, 16-11-10: M19522
      IF (InvestmentProposal."Project No." <> "Project No.") OR (InvestmentProposal.Version <> Version) THEN
        InvestmentProposal.GET("Project No.", Version);

      InvestmentProposal.UpdateROS_EPV_PRI(MATRIX_PeriodType, InvestmentProposal."Reference Date", EPVCalculationOn, TRUE);
      InvestmentProposal.UpdateROS_EPV_PRI(MATRIX_PeriodType, TODAY, EPVCalculationOn, FALSE);
    END;

    PROCEDURE SetFieldEditable@1100528711();
    BEGIN
      DescriptionEditable := (NOT Fixed) AND (Type <> Type::Line);
      BudgetDistributionEditable :=
        (NOT Fixed) AND (Type IN [Type::Costs, Type::Revenues, Type::"Costs to Distr. as Perc. Rev."]);
      ReleasedBudgetManualEditable := (NOT Fixed) AND (Type IN [Type::Costs, Type::Revenues]);
      TotalingEditable := (NOT Fixed) AND (Type IN [Type::Subtotal, Type::Balance, Type::"Perc. (Sub)Totals"]);
      CostObjectFilterEditable :=
        (NOT Fixed) AND
        (Type IN [Type::Costs, Type::Revenues,
                  Type::"Percentage Costs", Type::"Percentage Revenues",
                  Type::"Costs as Perc. Revenues", Type::"Revenues as Perc. Costs",
                  Type::"Costs to Distr. as Perc. Rev."]);
      PercentageEditable :=
        (NOT Fixed) AND
        (Type IN [Type::"Percentage Costs", Type::"Percentage Revenues",
                  Type::"Costs as Perc. Revenues", Type::"Revenues as Perc. Costs",
                  Type::"Costs to Distr. as Perc. Rev."]);
      PercentageFilterEditable :=
        (NOT Fixed) AND
        (Type IN [Type::"Percentage Costs", Type::"Percentage Revenues",
                  Type::"Costs as Perc. Revenues", Type::"Revenues as Perc. Costs",
                  Type::"Costs to Distr. as Perc. Rev.",
                  Type::"Perc. (Sub)Totals"]);  //*15625.n
      TotTypeForPercSubTotalsEditabl := (NOT Fixed) AND (Type = Type::"Perc. (Sub)Totals");
    END;

    BEGIN
    END.
  }
}

