OBJECT Table 11229295 Bookkeper KPI Cue
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Bookkeper KPI Cue;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=[ENU=Primary Key;
                                                              NOR=Prim‘rn›kkel;
                                                              SVE=Prim„rnyckel] }
    { 20  ;   ;Due Date Filter     ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Due Date Filter;
                                                              NOR=Filter for forfallsdato;
                                                              SVE=F”rfallodatumfilter];
                                                   Editable=No }
    { 21  ;   ;Overdue Date Filter ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Overdue Date Filter;
                                                              NOR=Filter for forfalt dato;
                                                              SVE=F”rfallet datum - filter] }
    { 100 ;   ;Sales Invoices Due Amnt. Today;Decimal;
                                                   CaptionML=ENU=Customer Entries Due Amount;
                                                   DecimalPlaces=0:0 }
    { 110 ;   ;Sales Invoices Due Today;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Count("Cust. Ledger Entry" WHERE (Document Type=FILTER(Invoice|Credit Memo),
                                                                                                 Due Date=FIELD(Overdue Date Filter),
                                                                                                 Open=CONST(Yes)));
                                                   CaptionML=ENU=Customer Entries Due }
    { 120 ;   ;Sales Invoices Open Amount;Decimal ;CaptionML=ENU=Customer Entries Open;
                                                   DecimalPlaces=0:0 }
    { 130 ;   ;Sales Invoices Open ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Cust. Ledger Entry" WHERE (Document Type=FILTER(Invoice|Credit Memo),
                                                                                                 Open=CONST(Yes)));
                                                   CaptionML=ENU=Customer Entries Open }
    { 140 ;   ;Sales Invoices Open On Hold;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Cust. Ledger Entry" WHERE (Document Type=FILTER(Invoice|Credit Memo),
                                                                                                 Open=CONST(Yes),
                                                                                                 On Hold=FILTER(<>'')));
                                                   CaptionML=ENU=Customer Entries On Hold }
    { 150 ;   ;Sales Invoices Av. Days Open;Integer;
                                                   CaptionML=ENU=Average open days;
                                                   Editable=No }
    { 160 ;   ;Sales Inv. Av. Days Open Due;Integer;
                                                   CaptionML=ENU=Average open days due }
    { 200 ;   ;Purch. Invoices Due Amnt Today;Decimal;
                                                   CaptionML=ENU=Vendor Entries Due;
                                                   DecimalPlaces=0:0 }
    { 210 ;   ;Purch. Invoices Due Today;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Vendor Ledger Entry" WHERE (Document Type=FILTER(Invoice|Credit Memo),
                                                                                                  Due Date=FIELD(Due Date Filter),
                                                                                                  Open=CONST(Yes)));
                                                   CaptionML=ENU=Vendor Entries Due }
    { 220 ;   ;Purch. Invoices Open Amount;Decimal;CaptionML=ENU=Vendor Entries Open;
                                                   DecimalPlaces=0:0 }
    { 230 ;   ;Purch. Invoices Open;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Vendor Ledger Entry" WHERE (Document Type=FILTER(Invoice|Credit Memo),
                                                                                                  Open=CONST(Yes)));
                                                   CaptionML=ENU=Vendor Entries Open }
    { 240 ;   ;Purch. Invoices Open On Hold;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Vendor Ledger Entry" WHERE (Document Type=FILTER(Invoice|Credit Memo),
                                                                                                  Open=CONST(Yes),
                                                                                                  On Hold=FILTER(<>'')));
                                                   CaptionML=ENU=Vendor Entries On Hold }
    { 250 ;   ;Purch. Invoices Av. Days Open;Integer;
                                                   CaptionML=ENU=Average open days }
    { 260 ;   ;Purch. Inv. Av. Days Open Due;Integer;
                                                   CaptionML=ENU=Average open days due }
    { 11012000;;Sales This Month   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cust. Ledger Entry"."Sales (LCY)" WHERE (Posting Date=FIELD(Month Date Filter),
                                                                                                             Document Type=FILTER(Invoice|Credit Memo|Finance Charge Memo)));
                                                   CaptionML=[ENU=Sales This Month;
                                                              NOR=Salg denne m†neden;
                                                              SVE=F”rs„ljning denna m†nad];
                                                   DecimalPlaces=0:0;
                                                   Editable=No }
    { 11012010;;Sales This Year    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cust. Ledger Entry"."Sales (LCY)" WHERE (Posting Date=FIELD(Year Date Filter),
                                                                                                             Document Type=FILTER(Invoice|Credit Memo|Finance Charge Memo)));
                                                   CaptionML=[ENU=Sales This Year;
                                                              NOR=Salg i †r;
                                                              SVE=F”rs„ljning detta †r];
                                                   DecimalPlaces=0:0;
                                                   Editable=No }
    { 11012020;;Month Date Filter  ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Month Date Filter;
                                                   Editable=No }
    { 11012030;;Year Date Filter   ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Year Date Filter;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CueTableManagement@1100529201 : Codeunit 11125346;

    PROCEDURE CalculateFinanceSalesCues@1100529203();
    VAR
      NoOfDaysOpen@1100529200 : Integer;
      NoOfDaysOpenDue@1100529201 : Integer;
    BEGIN
      SalesInvoiceAmountSum(
        "Sales Invoices Due Amnt. Today",
        "Sales Invoices Due Today",
        "Sales Invoices Open Amount",
        "Sales Invoices Open",
        "Sales Invoices Open On Hold");

      SalesInvoiceDueSum(NoOfDaysOpen,NoOfDaysOpenDue);

      IF "Sales Invoices Open" <> 0 THEN
        "Sales Invoices Av. Days Open" := ROUND((NoOfDaysOpen / "Sales Invoices Open"),1);
      IF "Sales Invoices Due Today" <> 0 THEN
        "Sales Inv. Av. Days Open Due" := ROUND((NoOfDaysOpenDue / "Sales Invoices Due Today"),1);
    END;

    PROCEDURE CalculateFinancePurchaseCues@1100529201();
    VAR
      NoOfDaysOpen@1100525001 : Integer;
      NoOfDaysOpenDue@1100525000 : Integer;
    BEGIN
      PurchaseInvoiceAmountSum(
        "Purch. Invoices Due Amnt Today",
        "Purch. Invoices Due Today",
        "Purch. Invoices Open Amount",
        "Purch. Invoices Open",
        "Purch. Invoices Open On Hold");

      PurchaseInvoiceDueSum(NoOfDaysOpen,NoOfDaysOpenDue);

      IF "Purch. Invoices Open" <> 0 THEN
        "Purch. Invoices Av. Days Open" := ROUND((NoOfDaysOpen / "Purch. Invoices Open"),1);
      IF "Purch. Invoices Due Today" <> 0 THEN
        "Purch. Inv. Av. Days Open Due" := ROUND((NoOfDaysOpenDue / "Purch. Invoices Due Today"),1);
    END;

    PROCEDURE SalesInvoiceAmountSum@1100529210(VAR OverDueBalance@1100525000 : Decimal;VAR NoOfOverDueInvoices@1100529201 : Integer;VAR Balance@1100529202 : Decimal;VAR NoOfInvoices@1100529203 : Integer;VAR OnHold@1100529204 : Integer) : Decimal;
    VAR
      CustLedgEntryRemainAmt@1100529200 : Query 21 SECURITYFILTERING(Filtered);
    BEGIN
      IF CueTableManagement.ReadPermissionForTableData(112) THEN BEGIN

        CustLedgEntryRemainAmt.SETFILTER(Global_Dimension_1_Code,CueTableManagement.GetCustomerLedgerEntryDPAFilter);
        CustLedgEntryRemainAmt.SETRANGE(IsOpen,TRUE);
        CustLedgEntryRemainAmt.SETFILTER(Due_Date,'<%1',WORKDATE);

        CustLedgEntryRemainAmt.OPEN;
        IF CustLedgEntryRemainAmt.READ THEN BEGIN
          OverDueBalance := CustLedgEntryRemainAmt.Sum_Remaining_Amt_LCY;
          NoOfOverDueInvoices := CustLedgEntryRemainAmt.Count_;
        END;

        CustLedgEntryRemainAmt.SETRANGE(Due_Date);
        CustLedgEntryRemainAmt.OPEN;
        IF CustLedgEntryRemainAmt.READ THEN BEGIN
          Balance := CustLedgEntryRemainAmt.Sum_Remaining_Amt_LCY;
          NoOfInvoices := CustLedgEntryRemainAmt.Count_;

          CustLedgEntryRemainAmt.SETFILTER(On_Hold,'<>%1','');
          CustLedgEntryRemainAmt.OPEN;
          IF CustLedgEntryRemainAmt.READ THEN
            OnHold := CustLedgEntryRemainAmt.Count_
        END;
      END;
    END;

    PROCEDURE SalesInvoiceDueSum@1100529208(VAR NoOfDaysOpen@1100529202 : Integer;VAR NoOfDaysOpenDue@1100529203 : Integer);
    VAR
      CustLedgerEntry@1100529201 : Record 21;
    BEGIN
      CustLedgerEntry.RESET;
      CustLedgerEntry.SETCURRENTKEY(Open,"Due Date");
      CustLedgerEntry.SETRANGE(Open, TRUE);
      CustLedgerEntry.SETFILTER("Posting Date", '..%1',WORKDATE);
      CustLedgerEntry.SETFILTER(
        "Document Type",
        '%1|%2|%3|%4|%5',
        CustLedgerEntry."Document Type"::" ",
        CustLedgerEntry."Document Type"::Invoice,
        CustLedgerEntry."Document Type"::"Credit Memo",
        CustLedgerEntry."Document Type"::"Finance Charge Memo",
        CustLedgerEntry."Document Type"::Reminder);

      CustLedgerEntry.DPA_SetFilters('Page 25');
      IF CustLedgerEntry.FINDSET THEN
        REPEAT
          NoOfDaysOpen := NoOfDaysOpen + (WORKDATE - CustLedgerEntry."Document Date");
          IF WORKDATE >= CustLedgerEntry."Due Date" THEN
            NoOfDaysOpenDue := NoOfDaysOpenDue + (WORKDATE - CustLedgerEntry."Document Date");
        UNTIL CustLedgerEntry.NEXT = 0;
    END;

    PROCEDURE PurchaseInvoiceAmountSum@1100529211(VAR OverDueBalance@1100525000 : Decimal;VAR NoOfOverDueInvoices@1100529201 : Integer;VAR Balance@1100529202 : Decimal;VAR NoOfInvoices@1100529203 : Integer;VAR OnHold@1100529204 : Integer) : Decimal;
    VAR
      VendLedgEntryRemainAmt@1100529200 : Query 25 SECURITYFILTERING(Filtered);
    BEGIN
      IF CueTableManagement.ReadPermissionForTableData(122) THEN BEGIN

        VendLedgEntryRemainAmt.SETFILTER(Global_Dimension_1_Code,CueTableManagement.GetVendorLedgerEntryDPAFilter);
        VendLedgEntryRemainAmt.SETRANGE(IsOpen,TRUE);
        VendLedgEntryRemainAmt.SETFILTER(Due_Date,'<%1',WORKDATE);

        VendLedgEntryRemainAmt.OPEN;
        IF VendLedgEntryRemainAmt.READ THEN BEGIN
          OverDueBalance := VendLedgEntryRemainAmt.Sum_Remaining_Amt_LCY;
          NoOfOverDueInvoices := VendLedgEntryRemainAmt.Count_;
        END;

        VendLedgEntryRemainAmt.SETRANGE(Due_Date);
        VendLedgEntryRemainAmt.OPEN;
        IF VendLedgEntryRemainAmt.READ THEN
          Balance := VendLedgEntryRemainAmt.Sum_Remaining_Amt_LCY;
          NoOfInvoices := VendLedgEntryRemainAmt.Count_;

          VendLedgEntryRemainAmt.SETFILTER(On_Hold,'<>%1','');
          VendLedgEntryRemainAmt.OPEN;
          IF VendLedgEntryRemainAmt.READ THEN
            OnHold := VendLedgEntryRemainAmt.Count_
      END;
    END;

    PROCEDURE PurchaseInvoiceDueSum@1100525002(VAR NoOfDaysOpen@1100525001 : Integer;VAR NoOfDaysOpenDue@1100525000 : Integer);
    VAR
      VendLedgerEntry@1100525002 : Record 25;
    BEGIN
      VendLedgerEntry.RESET;
      VendLedgerEntry.SETCURRENTKEY(Open,"Due Date");
      VendLedgerEntry.SETRANGE(Open, TRUE);
      VendLedgerEntry.SETFILTER("Posting Date", '..%1',WORKDATE);
      VendLedgerEntry.SETFILTER(
        "Document Type",
        '%1|%2|%3|%4|%5',
        VendLedgerEntry."Document Type"::" ",
        VendLedgerEntry."Document Type"::Invoice,
        VendLedgerEntry."Document Type"::"Credit Memo",
        VendLedgerEntry."Document Type"::"Finance Charge Memo",
        VendLedgerEntry."Document Type"::Reminder);

      VendLedgerEntry.DPA_SetFilters('Page 29');
      IF VendLedgerEntry.FINDSET THEN
        REPEAT
          NoOfDaysOpen := NoOfDaysOpen + (WORKDATE - VendLedgerEntry."Document Date");
          IF WORKDATE >= VendLedgerEntry."Due Date" THEN
            NoOfDaysOpenDue := NoOfDaysOpenDue + (WORKDATE - VendLedgerEntry."Document Date");
        UNTIL VendLedgerEntry.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

