OBJECT Codeunit 11012835 Object Modification Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100526200 : TextConst 'DEU=%1 Objektmodifikationszeilen sind erstellt worden;ENU=%1 Object Modification Lines created;NLD=%1 Object modificatieregels aangemaakt;NOR=%1 objektendringsrader er opprettet;SVE=%1 objekt„ndringsrader har skapats';
      Text001@1100526201 : TextConst 'DEU=Keine Objektmodifikationszeilen sind erstellt worden;ENU=No Object Modification Lines were created;NLD=Geen object modificatieregels aangemaakt;NOR=Ingen opjektendringsrader ble opprettet;SVE=Inga objekt„ndringsrader har skapats';
      Text002@1100528600 : TextConst 'DEU=Serviceauftrag/Serviceauftr„ge %1 aktualisiert;ENU=Updated %1 Service Order(s);NLD=%1 Serviceorder(s) bijgewerkt';

    PROCEDURE GetObjectsForModification@1100525000(VAR IObjectModRec@1100525000 : Record 11071700);
    VAR
      ServiceObject@1100525001 : Record 11071691;
      ServiceContract@1100525002 : Record 11012812;
      MaintenanceManagementCU@1100526200 : Codeunit 11012829;
      lvContrCde@1100526201 : Code[20];
      NoOfCreatedModLines@1100526202 : Integer;
    BEGIN
      IObjectModRec.TESTFIELD("Standard Object No.");
      NoOfCreatedModLines := 0;
      WITH ServiceObject DO BEGIN
        SETRANGE("Standard Object No.", IObjectModRec."Standard Object No.");
        SETRANGE(Blocked, FALSE);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lvContrCde := MaintenanceManagementCU.GetActualContractForObject("No.",TODAY);
            IF lvContrCde <> '' THEN BEGIN
              IF ServiceContract.GET(lvContrCde) THEN BEGIN
                IF ((ServiceContract.Status = ServiceContract.Status::Order) OR
                   (ServiceContract.Status = ServiceContract.Status::"Invoicing Allowed")) AND
                   (ServiceContract.Blocked = FALSE) THEN
                  IF CreateModificationLines(IObjectModRec, ServiceObject) THEN
                    NoOfCreatedModLines += 1;
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      IF NoOfCreatedModLines > 0 THEN
        MESSAGE(Text000, NoOfCreatedModLines)
      ELSE
        MESSAGE(Text001);
    END;

    PROCEDURE CreateModificationLines@1100525007(IObjectModification@1100525002 : Record 11071700;IServiceObject@1100525001 : Record 11071691) : Boolean;
    VAR
      ObjectModificationLine@1100525000 : Record 11071701;
      ContractCode@1100526200 : Code[20];
      MaintenanceManagement@1100526201 : Codeunit 11012829;
      NoOfActualContracts@1100526202 : Integer;
    BEGIN
      IObjectModification.TESTFIELD("Resolve before");
      NoOfActualContracts := MaintenanceManagement.GetNoOfActualContractsForObj(IServiceObject."No.", TODAY, ContractCode);
      WITH ObjectModificationLine DO BEGIN
        IF NOT GET(IObjectModification."No.", IServiceObject."No.") THEN BEGIN
          VALIDATE("Modification No.", IObjectModification."No.");
          VALIDATE("Object No.", IServiceObject."No.");
          IF NoOfActualContracts = 1 THEN
            VALIDATE("Service Contract No.", ContractCode);
          ObjectModificationLine."Execution Date" := IObjectModification."Resolve before";
          INSERT(TRUE);
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE UpdateServiceOrders@1100528600(IObjectModificationNo@1100528600 : Code[10]);
    VAR
      ObjectModification@1100528603 : Record 11071700;
      ObjectModificationLine@1100528601 : Record 11071701;
      ServiceOrderBudgetLine@1100528604 : Record 11012875;
      MaintenanceSchemeVersion@1100528605 : Record 11071743;
      MaintSchemeVersionLine@1100528606 : Record 11071744;
      ServiceOrder@1100528608 : Record 11012823;
      ServiceObject@1100528609 : Record 11071691;
      AdviceOrderLine@1100528611 : Record 11012055;
      CreateServiceOrders@1100528602 : Codeunit 11012831;
      LineNo@1100528607 : Integer;
      NoOfUpdatedSOs@1100528610 : Integer;
    BEGIN
      IF NOT ObjectModification.GET(IObjectModificationNo) THEN
        EXIT;
      LineNo := 10000;
      ObjectModificationLine.SETRANGE("Modification No.", IObjectModificationNo);
      ObjectModificationLine.SETFILTER("Service Order No.", '<>%1', '');
      ObjectModificationLine.SETRANGE("Service Order Status", ObjectModificationLine."Service Order Status"::Open);
      IF ObjectModificationLine.FINDSET THEN
        REPEAT
          IF ServiceOrder.GET(ObjectModificationLine."Service Order No.") AND
             ServiceObject.GET(ObjectModificationLine."Object No.")
          THEN BEGIN
            ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
            ServiceOrderBudgetLine.SETRANGE("Service Order No.", ObjectModificationLine."Service Order No.");
            ServiceOrderBudgetLine.SETRANGE("Object No.", ObjectModificationLine."Object No.");
            ServiceOrderBudgetLine.DELETEALL(TRUE);

            AdviceOrderLine.SETRANGE("Record Type", AdviceOrderLine."Record Type"::ServOrder);
            AdviceOrderLine.SETRANGE("Service Order No.", ObjectModificationLine."Service Order No.");
            AdviceOrderLine.DELETEALL(TRUE);

            MaintenanceSchemeVersion.SETRANGE("Line Type", MaintenanceSchemeVersion."Line Type"::Modification);
            MaintenanceSchemeVersion.SETRANGE(Code, ObjectModification."No.");
            MaintenanceSchemeVersion.SETFILTER("Index Date",'..%1', ObjectModificationLine."Execution Date");
            MaintenanceSchemeVersion.SETRANGE(Expired, FALSE);
            IF MaintenanceSchemeVersion.FINDLAST THEN BEGIN
              MaintSchemeVersionLine.SETRANGE("Index Date", MaintenanceSchemeVersion."Index Date");
              MaintSchemeVersionLine.SETRANGE("Line Type", MaintenanceSchemeVersion."Line Type");
              MaintSchemeVersionLine.SETRANGE("Type Code", ObjectModification."No.");
              CreateServiceOrders.LoopMaintLines(
                MaintSchemeVersionLine, ServiceOrder, ServiceObject, ObjectModification."Trade Speciality",
                ObjectModification."Trade Expertise", ObjectModification.Discipline, '', LineNo);
              NoOfUpdatedSOs += 1;
            END;
          END;
        UNTIL ObjectModificationLine.NEXT = 0;
      MESSAGE(Text002, NoOfUpdatedSOs);
    END;

    PROCEDURE GetModificationNoByServiceOrderNo@1100528601(IServiceOrderNo@1100528600 : Code[20]) : Code[20];
    VAR
      ObjectModificationLine@1100528601 : Record 11071701;
    BEGIN
      ObjectModificationLine.SETCURRENTKEY("Service Order No.");
      ObjectModificationLine.SETRANGE("Service Order No.", IServiceOrderNo);
      IF ObjectModificationLine.FINDFIRST THEN
        EXIT(ObjectModificationLine."Modification No.");
    END;

    BEGIN
    END.
  }
}

