OBJECT Codeunit 11229287 Purchase Requisition Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GLSetup@1100529600 : Record 98;
      GenericTempTable@1100528906 : TEMPORARY Record 11020579;
      PurchaseHeader@1100528905 : Record 38;
      TempPurchaseHeader@1100528904 : TEMPORARY Record 38;
      PurchaseLine@1100528925 : Record 39;
      TmpPurchaseRequisitionLine@1100528910 : TEMPORARY Record 11229331;
      Window@1100528903 : Dialog;
      CompQuote@1100528902 : Code[20];
      CheckCurrency@1100528901 : Boolean;
      VendorCount@1100528900 : Integer;
      Text000@1100528929 : TextConst 'ENU=No Vendors selected for Purchase Requisition';
      Text001@1100528924 : TextConst 'ENU=Status of Project Requisition must be Approve or Definitive.';
      Text002@1100528923 : TextConst 'ENU=Purchase Order %1 is created.;NOR=Innkj›psordre %1 kunne er opprettet;SVE=Ink”psorder %1 har skapats.';
      Text003@1100528922 : TextConst 'ENU=There is no Purchase Order created.;NOR=Ingen innkj›psordre er opprettet;SVE=Ingen ink”psorder har skapats.';
      Text004@1100528921 : TextConst 'ENU=Creating Order Lines         @1@@@@@@@@@@@@@';
      Text007@1100528909 : TextConst 'ENU=Busy with #1####################################################################;NOR=Opptatt med #1####################################################################;SVE=Upptagen med #1####################################################################';
      Text008@1100528908 : TextConst 'ENU=Creating Quotes;NOR=Oppretter tilbud;SVE=Skapar offerter';
      Text008a@1100528926 : TextConst 'ENU=Creating Orders';
      Text009@1100528907 : TextConst 'ENU=Creating Quote lines;NOR=Oppretter tilbudsrader;SVE=Skapar offertrader';
      Text009a@1100528927 : TextConst 'ENU=Creating Order lines';
      Text010@1100528919 : TextConst 'ENU=Creating text lines;NOR=Oppretter tekstrader;SVE=Skapar textrader';
      Text011@1100528918 : TextConst 'ENU=Copying documents;NOR=Kopierer dokumenter;SVE=Kopierar dokument';
      Text012@1100528917 : TextConst 'ENU=Creating Word Document;NOR=Oppretter Word-dokument;SVE=Skapar Word-dokument';
      Text013@1100528916 : TextConst 'ENU=Printing Word Document;NOR=Skriver ut Word-dokument;SVE=Skriver ut Word-dokument';
      Text015@1100528915 : TextConst 'ENU=Status should be definitive;NOR=Status skal v‘re definitiv;SVE=Status ska vara definitiv';
      Text016@1100528914 : TextConst 'ENU=No Quotes present;NOR=Det finnes ingen tilbud;SVE=Det finns inga offerter';
      Text017@1100528913 : TextConst 'ENU=No Purchase Order present, continue ?;NOR=Det finnes ingen kj›psordre. Vil du fortsette?;SVE=Det finns inga ink”psorder. Vill du forts„tta?';
      Text018@1100528912 : TextConst 'ENU="Printing Word document. Note: Possible the printer selection form is in the background. Then enter ''Alt+Tab. ";NOR=Skriver ut Word-dokument. Obs! Skjema for valg av Skriver er muligens i bakgrunnen. Trykk deretter p† ''Alt+Tab.;SVE="Skriver ut Word-dokument. Obs! Formul„ret f”r val av skrivare „r m”jligen i bakgrunden. Tryck d„refter p† ''Alt+Tab. "';
      Text021@1100528928 : TextConst 'ENU=No Quotes present for Mail;NOR=Ingen tilbud finnes for post;SVE=Inga offerter finns f”r post';
      Text022@1100527000 : TextConst 'ENU=There is no Purchase Quote created.';
      Text023@1100527001 : TextConst 'ENU=Requisition number %1 has been converted into quote number(s) %2.';
      Text024@1100529800 : TextConst 'ENU=Use vendor from the lines,Use vendor from the Vendor by Purchase Requisition';
      Text025@1100529801 : TextConst 'ENU=%1 or %2 should be filled for line %3.';
      Text026@1100529803 : TextConst 'ENU=Journal Template/Batch not present for Item Journal;SVE=Journalmall/-batch finns inte f”r artikeljournal';
      Text027@1100529806 : TextConst 'ENU=There are %1 inventory entries created in Item Journal.;SVE=%1 lagertransaktioner har skapats i artikeljournalen.';
      Text028@1100529808 : TextConst 'ENU=Blanket Order %1 is created.';
      Text029@1100529809 : TextConst 'ENU=No new Plant Orders created.';
      Text030@1100529810 : TextConst 'ENU=No new Plant Requests created.';
      Text031@1100529814 : TextConst 'ENU=No new Inventory Orders created.';
      Text032@1100529811 : TextConst 'ENU=Selected Purchase Requisitions are processed successfully.';
      Text033@1100529815 : TextConst 'ENU=%1 %2 is less than earliest delivery date %3. Do you want to continue?';
      Text034@1100529603 : TextConst 'ENU=There are no lines with %1 filled.';
      Text035@1100529604 : TextConst 'ENU=There is no order created.';
      Text036@1100529605 : TextConst 'ENU=There is no %1 selected on header or lines.';
      Text037@1100529606 : TextConst 'ENU=Quotes already exist. Do you want to remove existing quotes?';
      Text038@1100529607 : TextConst 'ENU=%1 %2 is created.;SVE=%1 %2 har skapats.';
      Text11012000@1100528920 : TextConst 'ENU=First Associate a Prospect to Customer %1.;NOR=Tilknytt f›rst et prospekt til kunde %1.;SVE=Associera f”rst en tillt„nkt kund till kund %1.';
      Text11012002@1100528911 : TextConst 'ENU=No purchase quote document present;NOR=Det finnes ikke noe Innkj›pstilbudsdokument;SVE=Det finns inget ink”psoffertdokument';
      HasGotGLSetup@1100529601 : Boolean;
      SumAmountLCY@1100527353 : Integer;
      BudgetLineElement@1100527352 : Code[20];
      BudgetLineCostObject@1100527351 : Code[20];
      BudgetLineCostType@1100527350 : 'Material,Subcontracting,Plant,Sundry';
      PurchSetup@1100529802 : Record 312;
      ProjectSetup@1100529804 : Record 315;
      DimMgt@1100529805 : Codeunit 408;
      LeadTimeMgt@1100529602 : Codeunit 5404;
      SkipMessage@1100529807 : Boolean;
      SkipDialog@1100529812 : Boolean;
      UseVendorByPurchReq@1100529813 : Boolean;
      Text0039@1100527650 : TextConst 'ENU=Quote request sent by email.';

    PROCEDURE CreateQuote@1210190006(VAR PurchaseRequisition@1100528901 : Record 11229330;VAR OptionNo@1210190005 : Integer);
    VAR
      AskForPrinter@1210190000 : Boolean;
      VendorbyPurchaseRequisition@1100528900 : Record 11229332;
      VendorbyPurchaseRequisition2@1100529500 : Record 11229332;
      Vendor@1100529601 : Record 23;
      DocType@1100528902 : 'Quote,Order';
      FirstQuote@1100527001 : Code[20];
      LastQuote@1100527000 : Code[20];
      Counter@1100527002 : Integer;
      UseVendorFromHeader@1100529600 : Boolean;
      UseVendorFromLines@1100529602 : Boolean;
      NoLinesToProcess@1100529603 : Boolean;
    BEGIN
      WITH PurchaseRequisition DO BEGIN
        Window.OPEN(Text007);
        TempPurchaseHeader.DELETEALL;
        //
        //PurchaseRequisition.TESTFIELD(Status, PurchaseRequisition.Status::Approved);  //C057080+C060128

        CheckVendorSource(PurchaseRequisition, VendorbyPurchaseRequisition, DocType::Quote, UseVendorFromHeader, UseVendorFromLines,NoLinesToProcess);
        IF NOT UseVendorFromHeader AND NOT UseVendorFromLines AND NOT NoLinesToProcess THEN
          ERROR(Text036, Vendor.TABLECAPTION);

        IF UseVendorFromHeader AND UseVendorFromLines THEN BEGIN
          IF STRMENU(Text024, 1) = 2 THEN
            UseVendorByPurchReq := TRUE;
        END ELSE
          UseVendorByPurchReq := UseVendorFromHeader;
        VendorCount := VendorbyPurchaseRequisition.COUNT;

        CheckDeleteExistingQuotes(PurchaseRequisition);

        CompQuote := '';
        IF VendorCount > 1 THEN BEGIN
          PurchaseHeader.RESET;
          PurchaseHeader.SETRANGE("Document Type", PurchaseHeader."Document Type"::Quote);
          PurchaseHeader.SETRANGE("Purchase Requisition No.", "No.");
          PurchaseHeader.SETFILTER("Comparison Quote", '<>%1', '');
          IF PurchaseHeader.FINDFIRST THEN
            CompQuote := PurchaseHeader."Comparison Quote";
          IF CompQuote = '' THEN BEGIN
            PurchaseHeader.RESET;
            PurchaseHeader.SETRANGE("Document Type", PurchaseHeader."Document Type"::Quote);
            PurchaseHeader.SETRANGE("Purchase Requisition No.", "No.");
            PurchaseHeader.SETFILTER("Comparison Quote", '=%1', '');
            IF PurchaseHeader.FINDSET(TRUE, FALSE) THEN BEGIN
              CompQuote := PurchaseHeader."No.";
              REPEAT
                PurchaseHeader."Comparison Quote" := CompQuote;
                PurchaseHeader.UpdateComparisonQuoteLinks('INSERT');
                PurchaseHeader.MODIFY(TRUE);
              UNTIL PurchaseHeader.NEXT = 0;
            END;
          END;
        END;
        //
        FillGenericTempTable(PurchaseRequisition, NOT UseVendorByPurchReq, FALSE);
        VendorbyPurchaseRequisition.SETRANGE("Activate for", VendorbyPurchaseRequisition."Activate for"::" ");  //DP01314
        IF UseVendorByPurchReq THEN
          IF VendorbyPurchaseRequisition.FINDSET THEN;

          REPEAT
            GenericTempTable.SETRANGE("Key Code2", PurchaseRequisition."No.");
            IF GenericTempTable.FINDSET THEN BEGIN
              REPEAT
                IF NOT UseVendorByPurchReq THEN
                  InitTempVendorByPurchRequisition(VendorbyPurchaseRequisition, PurchaseRequisition."No.",
                    GenericTempTable."Key Code5", GenericTempTable."Key Code6");

                //- while Navision accepts only 1 currency per document, budget lines are sorted to generate order with budget currency (may be deviating from vendor)
                //  update budgetlines (adviced, purchaseorder) will be skipped in CopyBudgetLines and executed afterwards in CloseBudgetLines.
                PurchaseHeader.RESET;
                PurchaseHeader.SETRANGE("Document Type", PurchaseHeader."Document Type"::Quote);
                IF (VendorbyPurchaseRequisition.Type <> VendorbyPurchaseRequisition.Type::Contact) THEN
                  PurchaseHeader.SETRANGE("Buy-from Vendor No.", VendorbyPurchaseRequisition."Vendor No.")
                ELSE
                  PurchaseHeader.SETRANGE("Buy-from Contact No.", VendorbyPurchaseRequisition."Vendor No.");
                PurchaseHeader.SETRANGE("Purchase Requisition No.", GenericTempTable."Key Code2");
                IF GenericTempTable."Key Code4" <> '' THEN
                  PurchaseHeader.SETRANGE("Currency Code", GenericTempTable."Key Code4");
                PurchaseHeader.SETRANGE("Order Address Code", GenericTempTable."Key Code6");
                IF NOT PurchaseHeader.FINDFIRST THEN BEGIN
                  IF (OptionNo >= 2) THEN BEGIN  //* Check here already. If Word document can't be created
                    CheckCreateWordDoc(VendorbyPurchaseRequisition);  //* also create no quote.
                  END;
                  InsertPurchaseHeader(PurchaseRequisition, VendorbyPurchaseRequisition, GenericTempTable."Key Code4", DocType::Quote);
                  CopyTextLines(PurchaseRequisition);
                  CopyRequisitionLines(PurchaseRequisition, GenericTempTable."Key Code4", GenericTempTable."Key Code5", GenericTempTable."Key Code6", DocType::Quote);
                  CopyDocuments(PurchaseRequisition);
                  CopyExternalDocuments(PurchaseRequisition); //C037002.n
                  Counter := Counter + 1;
                  IF FirstQuote = '' THEN
                    FirstQuote := PurchaseHeader."No.";
                  LastQuote := PurchaseHeader."No.";
                END ELSE BEGIN
                  CheckCurrency := TRUE;  //also used for filter on budget lines
                  CopyRequisitionLines(PurchaseRequisition, PurchaseHeader."Currency Code", GenericTempTable."Key Code5", GenericTempTable."Key Code6", DocType::Quote);
                END;
              UNTIL GenericTempTable.NEXT = 0;
            END;
            //DP01314.sn
            IF UseVendorByPurchReq THEN BEGIN
              VendorbyPurchaseRequisition2 := VendorbyPurchaseRequisition;
              VendorbyPurchaseRequisition2."Activate for" := VendorbyPurchaseRequisition."Activate for"::Quote;
              VendorbyPurchaseRequisition2.MODIFY;
            END;
            //DP01314.en
          UNTIL NOT UseVendorByPurchReq OR (UseVendorByPurchReq AND (VendorbyPurchaseRequisition.NEXT = 0));
          CloseBudgetLines(PurchaseRequisition);
        //
        IF (Counter > 0) AND (OptionNo >= 2) THEN BEGIN
          COMMIT;
          IF TempPurchaseHeader.FIND('-') THEN BEGIN
            REPEAT
              IF TempPurchaseHeader."Buy-from Vendor No." <> '' THEN BEGIN
                VendorbyPurchaseRequisition."Vendor No." := TempPurchaseHeader."Buy-from Vendor No.";
                VendorbyPurchaseRequisition.Type := VendorbyPurchaseRequisition.Type::Vendor;
              END ELSE BEGIN
                VendorbyPurchaseRequisition.Type := VendorbyPurchaseRequisition.Type::Contact;
                VendorbyPurchaseRequisition."Vendor No." := TempPurchaseHeader."Buy-from Contact No.";
              END;
              VendorbyPurchaseRequisition.GET(TempPurchaseHeader."Purchase Requisition No.",
                VendorbyPurchaseRequisition.Type, VendorbyPurchaseRequisition."Vendor No.");
              IF PurchaseHeader.GET(PurchaseHeader."Document Type"::Quote, TempPurchaseHeader."No.") THEN BEGIN
                IF NOT CreateWordDoc(PurchaseRequisition, VendorbyPurchaseRequisition) THEN
                  TempPurchaseHeader.DELETE;
              END;
              COMMIT;
            UNTIL TempPurchaseHeader.NEXT = 0;
          END;
          IF (OptionNo >= 3) THEN BEGIN
            IF (OptionNo = 4) THEN
              AskForPrinter := TRUE;
            IF TempPurchaseHeader.FIND('-') THEN BEGIN
              REPEAT
                PrintWordDoc((OptionNo = 4), AskForPrinter);
                AskForPrinter := FALSE;
              UNTIL TempPurchaseHeader.NEXT = 0;
            END;
          END;
        END;
        Window.CLOSE;
      END;

      CheckAllLinesProcessed(PurchaseRequisition);

      IF Counter = 0 THEN BEGIN
        ERROR(Text022);
      END ELSE BEGIN
        IF FirstQuote <> LastQuote THEN
          MESSAGE(Text023, PurchaseRequisition."No.", FirstQuote + '..' + LastQuote)
        ELSE
          MESSAGE(Text023, PurchaseRequisition."No.", FirstQuote)
      END;
    END;

    PROCEDURE CreateOrder@1100485000(VAR PurchaseRequisition@1100528900 : Record 11229330);
    VAR
      FirstOrder@1100525004 : Code[20];
      LastOrder@1100525005 : Code[20];
      DocType@1100528902 : 'Quote,Order,Blanket Order';
      VendorbyPurchaseRequisition@1100528903 : Record 11229332;
      ReqLine@1100529800 : Record 11229331;
      Vendor@1100529602 : Record 23;
      FirstBlanketOrder@1100529802 : Code[20];
      LastBlanketOrder@1100529803 : Code[20];
      UseVendorFromHeader@1100529600 : Boolean;
      UseVendorFromLines@1100529601 : Boolean;
      NoLinesToProcess@1100529603 : Boolean;
      PrintOrders@1100529607 : Boolean;
      ProcBasedOnElectronicOrderType@1100529606 : Boolean;
      TransferExternalDocuments@1100529605 : Boolean;
      AddDocumentsToDocumentRelations@1100529604 : Boolean;
    BEGIN
      IF NOT SkipDialog THEN
        CLEAR(UseVendorByPurchReq);

      IF NOT SkipMessage THEN
        Window.OPEN(Text007);
      TempPurchaseHeader.DELETEALL;
      //
      PurchaseRequisition.TESTFIELD("Quote only", FALSE);  //DP01314
      IF (PurchaseRequisition.Status < PurchaseRequisition.Status::Approved) OR (PurchaseRequisition.Status >= PurchaseRequisition.Status::Closed) THEN
        ERROR(Text001);
      //

      CheckVendorSource(PurchaseRequisition, VendorbyPurchaseRequisition, DocType::Order, UseVendorFromHeader, UseVendorFromLines, NoLinesToProcess);
      IF NOT UseVendorFromHeader AND NOT UseVendorFromLines AND NOT NoLinesToProcess THEN
        ERROR(Text036, Vendor.TABLECAPTION);

      IF UseVendorFromHeader AND UseVendorFromLines THEN BEGIN
        IF NOT SkipDialog THEN BEGIN
          IF STRMENU(Text024, 1) = 2 THEN
            UseVendorByPurchReq := TRUE;
          SkipDialog := TRUE;
        END
      END ELSE
        UseVendorByPurchReq := UseVendorFromHeader;

      SelectPurchaseOrderActions(PrintOrders, ProcBasedOnElectronicOrderType, TransferExternalDocuments, AddDocumentsToDocumentRelations);

      //
      FillGenericTempTable(PurchaseRequisition, NOT UseVendorByPurchReq, TRUE);
      IF NOT UseVendorByPurchReq THEN
        GenericTempTable.SETFILTER("Key Code5", '<>%1', '');
      IF GenericTempTable.FINDSET THEN BEGIN
        REPEAT
          IF NOT UseVendorByPurchReq THEN
            InitTempVendorByPurchRequisition(VendorbyPurchaseRequisition, PurchaseRequisition."No.",
              GenericTempTable."Key Code5", GenericTempTable."Key Code6");

          IF GenericTempTable."Key Code1" = UPPERCASE(FORMAT(ReqLine.Transaction::"Blanket Order")) THEN
            DocType := DocType::"Blanket Order";
          IF GenericTempTable."Key Code1" = UPPERCASE(FORMAT(ReqLine.Transaction::"Purchase Order")) THEN
            DocType := DocType::Order;

          InsertPurchaseHeader(PurchaseRequisition, VendorbyPurchaseRequisition, GenericTempTable."Key Code4", DocType);
          CopyTextLines(PurchaseRequisition);
          CopyRequisitionLines(PurchaseRequisition, GenericTempTable."Key Code4", GenericTempTable."Key Code5", GenericTempTable."Key Code6", DocType);
          IF AddDocumentsToDocumentRelations THEN
            CopyDocuments(PurchaseRequisition);
          IF TransferExternalDocuments THEN
            CopyExternalDocuments(PurchaseRequisition); //C037002.n
          COMMIT;
          IF DocType = DocType::Order THEN BEGIN
            IF FirstOrder = '' THEN
              FirstOrder := PurchaseHeader."No.";
            LastOrder := PurchaseHeader."No.";
          END;
          IF DocType = DocType::"Blanket Order" THEN BEGIN
            IF FirstBlanketOrder = '' THEN
              FirstBlanketOrder := PurchaseHeader."No.";
            LastBlanketOrder := PurchaseHeader."No.";
          END;
        UNTIL GenericTempTable.NEXT = 0;
        CloseBudgetLines(PurchaseRequisition);
      END;

      IF UseVendorByPurchReq THEN BEGIN
        VendorbyPurchaseRequisition."Activate for" := VendorbyPurchaseRequisition."Activate for"::Order;
        VendorbyPurchaseRequisition.MODIFY;
      END;

      CheckAllLinesProcessed(PurchaseRequisition);

      //
      IF NOT SkipMessage THEN BEGIN
        IF FirstOrder + LastOrder + FirstBlanketOrder + LastBlanketOrder = '' THEN
            MESSAGE(Text035);

        IF FirstOrder <> '' THEN BEGIN
          IF LastOrder <> FirstOrder THEN
            MESSAGE(Text002, FirstOrder + '..' + LastOrder)
          ELSE
            MESSAGE(Text002, PurchaseHeader."No.")
        END;
        IF FirstBlanketOrder <> '' THEN BEGIN
          IF LastBlanketOrder <> FirstBlanketOrder THEN
            MESSAGE(Text028, FirstBlanketOrder + '..' + LastBlanketOrder)
          ELSE
            MESSAGE(Text028, PurchaseHeader."No.")
        END;
        Window.CLOSE;
      END;

      COMMIT;
      CarryOutPurchOrdersActions(PrintOrders, ProcBasedOnElectronicOrderType);
    END;

    LOCAL PROCEDURE InsertPurchaseHeader@1210190004(PurchaseRequisition@1100528902 : Record 11229330;VendorbyPurchaseRequisition@1100528901 : Record 11229332;CurrencyCode@1100528900 : Code[10];DocType@1100528903 : 'Quote,Order,Blanket Order');
    VAR
      NoSeriesMngmntCU@1210190001 : Codeunit 396;
      PurchSetup@1210190002 : Record 312;
      ContactRec@1100485001 : Record 5050;
      PurchHeaderExtension@1100529400 : Record 11020398;
      NoSeries@1100528904 : Code[10];
    BEGIN
      PurchSetup.GET;
      WITH PurchaseHeader DO BEGIN
        INIT;
        IF DocType = DocType::Quote THEN BEGIN
          IF NOT SkipMessage THEN
            Window.UPDATE(1, Text008);
          "Document Type" := "Document Type"::Quote;
          PurchSetup.TESTFIELD("Quote Nos.");
          "No." := NoSeriesMngmntCU.GetNextNo(PurchSetup."Quote Nos.", WORKDATE, TRUE);
          "No. Series" := PurchSetup."Quote Nos.";
        END;
        IF DocType = DocType::Order THEN BEGIN
          IF NOT SkipMessage THEN
            Window.UPDATE(1, Text008a);
          "Document Type" := "Document Type"::Order;
          //PurchSetup.TESTFIELD("Order Nos.");
          //"No." := NoSeriesMngmntCU.GetNextNo(PurchSetup."Order Nos.",WORKDATE,TRUE);
          //"No. Series" := PurchSetup."Order Nos.";
          CheckAskForNoSeries("Document Type", NoSeries);
          "No. Series" := NoSeries;
          "No." := '';
          GetNoForSelectedNoSeries(PurchaseHeader);
        END;
        IF DocType = DocType::"Blanket Order" THEN BEGIN
          IF NOT SkipMessage THEN
            Window.UPDATE(1, Text008a);
          "Document Type" := "Document Type"::"Blanket Order";
          PurchSetup.TESTFIELD("Blanket Order Nos.");
          "No." := NoSeriesMngmntCU.GetNextNo(PurchSetup."Blanket Order Nos.", WORKDATE, TRUE);
          "No. Series" := PurchSetup."Blanket Order Nos.";
        END;
        INSERT(TRUE);
        //
        IF (VendorbyPurchaseRequisition.Type <> VendorbyPurchaseRequisition.Type::Contact) THEN
          VALIDATE("Buy-from Vendor No.", VendorbyPurchaseRequisition."Vendor No.")
        ELSE
          VALIDATE("Buy-from Contact No.", VendorbyPurchaseRequisition."Vendor No.");
        VALIDATE("Order Address Code", VendorbyPurchaseRequisition."Order Address Code");
        VALIDATE("Document Date", TODAY);
        IF PurchaseRequisition."Project No." <> '' THEN
          VALIDATE("Job No.", PurchaseRequisition."Project No.");
        IF PurchaseRequisition."Service Order No." <> '' THEN
          VALIDATE("Service Order No.", PurchaseRequisition."Service Order No.");  //DP01314
        IF PurchaseRequisition."Global Dimension 1 Code" <> '' THEN
          VALIDATE("Shortcut Dimension 1 Code", PurchaseRequisition."Global Dimension 1 Code");  //C060832
        "Purchase Requisition No." := PurchaseRequisition."No.";
        "Purchase Action" := PurchaseRequisition."Purchase Action";
        IF PurchaseRequisition.Deliver <> PurchaseRequisition.Deliver::" " THEN
          Deliver := PurchaseRequisition.Deliver;
        IF PurchaseRequisition."Ship To Location" <> '' THEN
          VALIDATE("Ship-to Location", PurchaseRequisition."Ship To Location");
        CheckCurrency := (CurrencyCode <> PurchaseHeader."Currency Code");
        IF CheckCurrency THEN BEGIN
          //IF (CurrencyCode <> '') THEN //C037146.o
            PurchaseHeader.VALIDATE("Currency Code", CurrencyCode);
        END ELSE BEGIN
          CheckCurrency := (CurrencyCode = '') AND (PurchaseHeader."Currency Code" = '');  //also used for filter on budget lines
        END;
        PurchaseHeader."Amounts only" := PurchaseRequisition."Amounts only";
        IF VendorbyPurchaseRequisition.Contact <> '' THEN BEGIN
          "Buy-from Contact" := VendorbyPurchaseRequisition.Contact;
          IF VendorbyPurchaseRequisition."Contact Person No." <> '' THEN BEGIN
            IF ContactRec.GET(VendorbyPurchaseRequisition."Contact Person No.") THEN BEGIN
              IF (ContactRec.Name = VendorbyPurchaseRequisition.Contact) THEN
                "Buy-from Contact Person No." := VendorbyPurchaseRequisition."Contact Person No.";
            END;
          END;
        END;
        "Vendors react before" := PurchaseRequisition."Vendors react before";
        "Requested Quote Receipt Date" := PurchaseRequisition."Requested Quote Receipt Date";
        VALIDATE("Requested Receipt Date", PurchaseRequisition."Requested Receipt Date");
        "Purchaser Code" := PurchaseRequisition."Purchaser Code";
        //**4PS.sn BI006 KD 07-11-16
        "Shipment Method Code" := PurchaseRequisition."Shipment Method Code";
        "Transport Method" := PurchaseRequisition."Transport Method";
        IF PurchaseRequisition.Destination <> '' THEN BEGIN
          PurchHeaderExtension.GetPurchHeadExtension("Document Type", "No.");
          PurchHeaderExtension.Destination := PurchaseRequisition.Destination;
          PurchHeaderExtension.UpdatePurchHeadExtension("Document Type", "No.");
        END;
        //**4PS.en BI006 KD 07-11-16
        "Back-to-back" := PurchaseRequisition."Back-to-back"; // 4PS.n 25-10-16 UKR-C27159
        IF (CompQuote = '') AND (VendorCount > 1) THEN
          CompQuote := PurchaseHeader."No.";
        IF (CompQuote <> '') THEN BEGIN
          "Comparison Quote" := CompQuote;
          PurchaseHeader.UpdateComparisonQuoteLinks('INSERT');
        END;
        MODIFY(TRUE);
        CopyCommentHeader(PurchaseRequisition);  //db, 06-02-17
        //
        TempPurchaseHeader.INIT;
        TempPurchaseHeader."Document Type" := PurchaseHeader."Document Type";
        TempPurchaseHeader."No." := PurchaseHeader."No.";
        IF (VendorbyPurchaseRequisition.Type <> VendorbyPurchaseRequisition.Type::Contact) THEN
          TempPurchaseHeader."Buy-from Vendor No." := VendorbyPurchaseRequisition."Vendor No."
        ELSE
          TempPurchaseHeader."Buy-from Contact No." := VendorbyPurchaseRequisition."Vendor No.";
        TempPurchaseHeader."Purchase Requisition No." := PurchaseRequisition."No.";
        TempPurchaseHeader."Job No." := PurchaseRequisition."Project No.";
        TempPurchaseHeader."Service Order No." := PurchaseRequisition."Service Order No.";  //DP01314
        TempPurchaseHeader."Purchase Action" := PurchaseRequisition."Purchase Action";
        TempPurchaseHeader.INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertPurchaseLines@1100528902(VAR PurchaseRequisitionLine@1100528903 : Record 11229331;IPurchaseLine@1210190000 : Record 39);
    VAR
      LineWithSameProperty@1100528400 : Record 11229331;
      RouteRefMgt@1100525003 : Codeunit 11012045;
      CompressedTotal@1210190002 : Decimal;
      NoOfRecords@1100525002 : Integer;
      BudgetLineCounter@1100525001 : Integer;
      Window@1100525000 : Dialog;
      LastRefNo@1100525004 : Code[20];
      UnitPrice@1100525005 : Decimal;
      BudgetLine@1100528909 : Record 11012001;
      ProjRec@1100529500 : Record 11072003;
      ProjElemRec@1100528908 : Record 11012010;
      ItemRec@1100528907 : Record 27;
      DimValRec@1100528906 : Record 349;
      DimMgt@1100528905 : Codeunit 408;
      UOMMgt@1100528904 : Codeunit 5402;
      NextLineNo@1100528901 : Integer;
      LineIsText@1100528900 : Boolean;
      TransferZeroLine@1100527000 : Boolean;
      LineIsItem@1100529600 : Boolean;
      VendorPrice@1100528500 : Decimal;
      LineIsGLAcc@1100529800 : Boolean;
      LineIsFA@1100529801 : Boolean;
      LineIsEmpty@1100529602 : Boolean;
      CalendarMgt@1100529802 : Codeunit 7600;
      CalChange@1100529804 : Record 11072016;
      DeliveryDate@1100529806 : Date;
      LeadDays@1100529601 : Text;
    BEGIN
      PurchaseHeader.GET(IPurchaseLine."Document Type", IPurchaseLine."Document No.");

      PurchaseLine.LOCKTABLE;
      PurchaseLine.SETRANGE("Document Type", IPurchaseLine."Document Type");
      PurchaseLine.SETRANGE("Document No.", IPurchaseLine."Document No.");
      IF PurchaseLine.FINDLAST THEN
        NextLineNo := PurchaseLine."Line No."
      ELSE
        NextLineNo := 0;

      IF PurchaseRequisitionLine.FINDSET(TRUE, FALSE) THEN BEGIN
        NoOfRecords := PurchaseRequisitionLine.COUNT;
        IF GUIALLOWED AND NOT SkipMessage THEN
          Window.OPEN(Text004);
        //
        REPEAT
          BudgetLineCounter := BudgetLineCounter + 1;
          IF GUIALLOWED AND NOT SkipMessage THEN
            Window.UPDATE(1, 100 * ROUND(BudgetLineCounter/NoOfRecords * 100));
          //
          TmpPurchaseRequisitionLine := PurchaseRequisitionLine;
          IF NOT TmpPurchaseRequisitionLine.FIND('=') THEN BEGIN
            CompressedTotal := CheckSameProperty(LineWithSameProperty, PurchaseRequisitionLine);
            LineIsText := CheckTextLine(PurchaseRequisitionLine);
            LineIsItem := CheckItemLine(PurchaseRequisitionLine);
            LineIsGLAcc := CheckGLAccountLine(PurchaseRequisitionLine);
            LineIsFA := PurchaseRequisitionLine.Transaction = PurchaseRequisitionLine.Transaction::"Fixed Asset";
            LineIsEmpty := NOT (LineIsText OR LineIsItem OR LineIsGLAcc OR LineIsFA);

            IF (CompressedTotal = 0) AND (NOT LineIsText) THEN
              IF PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Quote THEN
                TransferZeroLine := CheckAmountRequisitionLine(PurchaseRequisitionLine);
            IF (CompressedTotal <> 0) OR LineIsText OR TransferZeroLine THEN BEGIN
              PurchaseLine.INIT;
              NextLineNo := NextLineNo + 10000;
              PurchaseLine."Document Type"  := IPurchaseLine."Document Type";
              PurchaseLine."Document No." := IPurchaseLine."Document No.";
              PurchaseLine."Line No." := NextLineNo;
              PurchaseLine."Input by" := USERID;
              PurchaseLine."Input Date" := TODAY;
              PurchaseLine.INSERT;

              PurchaseLine.SuspendUpdateAmounts(TRUE);
              PurchaseLine.VALIDATE("Currency Code", IPurchaseLine."Currency Code");
              //DP01314.sn
              IF (PurchaseRequisitionLine."Project No." <> '') THEN BEGIN
                PurchaseLine.VALIDATE("Job No.", PurchaseRequisitionLine."Project No.");
                IF (PurchaseRequisitionLine.Element = '') THEN BEGIN
                  ProjRec.GET(PurchaseRequisitionLine."Project No.");
                  IF ProjRec."Posting Element Mandatory" THEN
                    PurchaseRequisitionLine.TESTFIELD(Element);
                END ELSE BEGIN
                  PurchaseLine.VALIDATE(Element, PurchaseRequisitionLine.Element);
                END;
                PurchaseLine."Extension Contract" := PurchaseRequisitionLine."Extension Contract";
                PurchaseLine.VALIDATE("Purchase Action", PurchaseRequisitionLine."Purchase Action");
              END;
              IF PurchaseRequisitionLine."Tender Paragraph" <> '' THEN
                PurchaseLine."Tender Paragraph" := PurchaseRequisitionLine."Tender Paragraph";
              IF (PurchaseRequisitionLine."Service Order No." <> '') THEN
                PurchaseLine.VALIDATE("Service Order No.", PurchaseRequisitionLine."Service Order No.");
              //db.sn, 23-01-17
              IF (PurchaseRequisitionLine."Plant Type" <> '') THEN
                PurchaseLine.VALIDATE("Plant Type", PurchaseRequisitionLine."Plant Type");
              IF (PurchaseRequisitionLine."Plant No." <> '') THEN
                PurchaseLine.VALIDATE("Plant No.", PurchaseRequisitionLine."Plant No.");
              IF (PurchaseRequisitionLine."Cost Component Plant" <> '') THEN
                PurchaseLine.VALIDATE("Cost Component Plant", PurchaseRequisitionLine."Cost Component Plant");
              //db.en, 23-01-17
              //DP01314.en
              IF (LineIsText = TRUE) THEN BEGIN
                PurchaseLine.Type := PurchaseLine.Type::" ";
                PurchaseLine."No." := '';
              END ELSE BEGIN
                PurchaseLine."Cost Type" := PurchaseRequisitionLine."Cost Type" + 2;
                PurchaseLine."Shortcut Dimension 2 Code" := PurchaseRequisitionLine."Cost Object";
                IF (PurchaseRequisitionLine."Project No." <> '') OR (PurchaseRequisitionLine."Service Order No." <> '') THEN BEGIN //C037010.n
                  PurchaseRequisitionLine.TESTFIELD("Cost Object");
                  DimMgt.GetDimValueRec(2, PurchaseRequisitionLine."Cost Object", DimValRec, TRUE, PurchaseRequisitionLine."Project No.");
                END;
                //C047131.sn
                IF PurchaseRequisitionLine."Cost Type" = PurchaseRequisitionLine."Cost Type"::Material THEN BEGIN
                  IF PurchaseRequisitionLine."Trade Item" <> '' THEN BEGIN
                    PurchaseLine."Vendor (Trade Item)" := PurchaseRequisitionLine."Vendor (Trade Item)";
                    PurchaseLine."Trade Item" := '';
                    PurchaseLine.VALIDATE("Trade Item", PurchaseRequisitionLine."Trade Item");
                  END ELSE BEGIN
                    IF PurchaseRequisitionLine."Basic Item" <> '' THEN BEGIN
                      PurchaseLine.Manufacturer := PurchaseRequisitionLine.Manufacturer;
                      PurchaseLine."Basic Item" := '';
                      PurchaseLine.VALIDATE("Basic Item", PurchaseRequisitionLine."Basic Item");
                    END ELSE BEGIN
                      IF PurchaseRequisitionLine."Item No." <> '' THEN BEGIN
                        PurchaseLine."Item No." := '';  //check on xRec in validate itemdata
                        PurchaseLine.VALIDATE("Item No.", PurchaseRequisitionLine."Item No.");
                      END;
                    END;
                  END;
                END;
                IF LineIsGLAcc THEN BEGIN
                  PurchaseLine.Type := PurchaseLine.Type::"G/L Account";
                  IF (PurchaseRequisitionLine."G/L Account" <> '') THEN BEGIN
                    PurchaseRequisitionLine.TESTFIELD("Project No.", '');
                    PurchaseRequisitionLine.TESTFIELD("Service Order No.", '');
                    PurchaseLine.VALIDATE("No.", PurchaseRequisitionLine."G/L Account");
                  END;
                END;
                IF LineIsItem THEN BEGIN
                  PurchaseLine.Type := PurchaseLine.Type::Item;
                  PurchaseLine.VALIDATE("No.", PurchaseRequisitionLine."Item No.");
                END;
                IF LineIsFA THEN BEGIN
                  PurchaseLine.Type := PurchaseLine.Type::"Fixed Asset";
                  PurchaseLine.VALIDATE("No.", PurchaseRequisitionLine."FA No.");
                END;
                PurchaseLine.VALIDATE("Shortcut Dimension 2 Code", PurchaseRequisitionLine."Cost Object");
                IF (PurchaseRequisitionLine."Global Dimension 1 Code" <> '') AND
                   (PurchaseRequisitionLine."Global Dimension 1 Code" <> PurchaseLine."Shortcut Dimension 1 Code")
                THEN
                  PurchaseLine.VALIDATE("Shortcut Dimension 1 Code", PurchaseRequisitionLine."Global Dimension 1 Code");  //DP01314
                IF PurchaseLine."Shortcut Dimension 1 Code" = PurchaseRequisitionLine."Global Dimension 1 Code" THEN
                  PurchaseLine."Dimension Set ID" := PurchaseRequisitionLine."Dimension Set ID"
                ELSE BEGIN
                  GetGLSetup;
                  PurchaseLine."Dimension Set ID" := DimMgt.GetDimSetAddedDimVal(
                    PurchaseRequisitionLine."Dimension Set ID", GLSetup."Global Dimension 1 Code", PurchaseLine."Shortcut Dimension 1 Code");
                END;
                //C047131.en
                IF NOT LineIsEmpty AND NOT LineIsText THEN BEGIN
                  PurchaseLine.VALIDATE("Unit of Measure Code", PurchaseRequisitionLine."Unit of Measure");
                  IF ItemRec.GET(PurchaseRequisitionLine."Item No.") THEN
                    PurchaseLine."Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(ItemRec, PurchaseLine."Unit of Measure Code");
                  PurchaseLine."Price Agreement" := PurchaseRequisitionLine."Price Agreement";

                  //C049675.sn
                  IF PurchaseRequisitionLine."Price Agreement" THEN BEGIN
                    IF PurchaseRequisitionLine."Currency Code" <> '' THEN BEGIN
                      VendorPrice :=  PurchaseRequisitionLine."Price (FCY)" *  PurchaseLine."Qty. per Unit of Measure";
                    END ELSE BEGIN
                      PurchaseRequisitionLine."Price (LCY)" :=  PurchaseRequisitionLine."Price (LCY)" *  PurchaseLine."Qty. per Unit of Measure";
                      VendorPrice := PurchaseRequisitionLine.GetVendorPrice(
                        PurchaseLine."Buy-from Vendor No.", PurchaseRequisitionLine."Price (LCY)", PurchaseRequisitionLine."Currency Code");
                    END;
                    IF PurchaseHeader."Prices Including VAT" THEN
                      PurchaseLine.VALIDATE("Direct Unit Cost", VendorPrice * (1 + PurchaseLine."VAT %" / 100))
                    ELSE
                      PurchaseLine.VALIDATE("Direct Unit Cost", VendorPrice);
                    PurchaseLine."Discount % (Item)" := PurchaseRequisitionLine."Discount %";
                    IF (1 - PurchaseRequisitionLine."Discount %" / 100) <> 0 THEN
                      PurchaseLine."Unit Price (LCY)" := PurchaseLine."Unit Cost (LCY)" / (1 - PurchaseRequisitionLine."Discount %" / 100);
                    IF PurchaseLine."Unit Price (LCY)" = 0 THEN
                      PurchaseLine."Unit Price (LCY)" := PurchaseLine."Unit Cost (LCY)";
                  END;
                  //C049675.en

                  IF PurchaseHeader."Amounts only" THEN BEGIN
                    UnitPrice := CompressedTotal;
                    PurchaseLine.VALIDATE("Direct Unit Cost", UnitPrice);
                  END ELSE BEGIN
                    IF PurchaseRequisitionLine."Currency Code" <> '' THEN
                      UnitPrice := PurchaseRequisitionLine."Price (FCY)"
                    ELSE
                      UnitPrice := PurchaseRequisitionLine."Price (LCY)";
                    IF ((CompressedTotal > 0) AND (UnitPrice < 0)) OR
                       ((CompressedTotal < 0) AND (UnitPrice < 0))
                    THEN BEGIN
                      PurchaseLine."Direct Unit Cost" := -UnitPrice;
                      PurchaseLine.VALIDATE(Quantity, -CompressedTotal);
                    END ELSE BEGIN
                      PurchaseLine."Direct Unit Cost" := UnitPrice;
                      PurchaseLine.VALIDATE(Quantity, CompressedTotal);
                    END;
                  END;
                END;
              END;

              IF PurchaseRequisitionLine."Trade Item" + PurchaseRequisitionLine."Basic Item" + PurchaseRequisitionLine."Item No." = '' THEN
                PurchaseLine."Unit of Measure Code" := PurchaseRequisitionLine."Unit of Measure";
              PurchaseLine."Posting Date" := PurchaseHeader."Posting Date";

              IF NOT ProjElemRec.GET(PurchaseLine."Job No.", PurchaseLine.Element) THEN ProjElemRec.INIT;

              IF PurchaseLine."Expected Receipt Date" = 0D THEN BEGIN
                IF ProjElemRec."Starting Date" <= TODAY THEN
                  IF PurchaseRequisitionLine."Requested Receipt Date" <> 0D THEN BEGIN
                    PurchaseLine.VALIDATE("Expected Receipt Date", PurchaseRequisitionLine."Requested Receipt Date");
                    PurchaseLine.VALIDATE("Requested Receipt Date", PurchaseRequisitionLine."Requested Receipt Date")
                  END ELSE
                    PurchaseLine.VALIDATE("Expected Receipt Date", TODAY)
                ELSE
                  PurchaseLine.VALIDATE("Expected Receipt Date", ProjElemRec."Starting Date"-1);
              END;

              IF ProjElemRec."Starting Date" > PurchaseLine."Expected Receipt Date" THEN
                PurchaseLine.VALIDATE("Expected Receipt Date", ProjElemRec."Starting Date"-1);

              IF PurchaseRequisitionLine."Requested Receipt Date" > PurchaseLine."Expected Receipt Date" THEN BEGIN
                PurchaseLine.VALIDATE("Expected Receipt Date", PurchaseRequisitionLine."Requested Receipt Date");
                PurchaseLine.VALIDATE("Requested Receipt Date", PurchaseRequisitionLine."Requested Receipt Date");
              END;

              IF (PurchaseRequisitionLine."Item No." <> '') AND (PurchaseRequisitionLine."Requested Receipt Date" <> 0D) THEN BEGIN
                LeadDays := LeadTimeMgt.ManufacturingLeadTime(PurchaseRequisitionLine."Item No.",PurchaseLine."Location Code",PurchaseLine."Variant Code");
                DeliveryDate := CalendarMgt.CalcDateBOC(LeadDays, PurchaseLine."Order Date",
                  CalChange."Source Type"::Location, PurchaseLine."Location Code", '',
                  CalChange."Source Type"::Vendor, PurchaseLine."Buy-from Vendor No.", '', TRUE);

                IF PurchaseLine."Requested Receipt Date" < DeliveryDate THEN
                  IF NOT CONFIRM(Text033, FALSE, PurchaseLine.FIELDCAPTION("Requested Receipt Date"),
                    PurchaseLine."Requested Receipt Date", DeliveryDate)
                  THEN
                    ERROR('');
              END;

              PurchaseLine."Cost Component" := PurchaseRequisitionLine."Cost Component";
              PurchaseLine.Description := PurchaseRequisitionLine.Description;
              PurchaseLine."Description 2" := PurchaseRequisitionLine."Description 2";
              PurchaseLine.VALIDATE(Text, PurchaseRequisitionLine."External Text");
              PurchaseLine.SuspendUpdateAmounts(FALSE);
              IF NOT LineIsText AND NOT LineIsEmpty THEN
                PurchaseLine.UpdateAmounts;
              //
              IF PurchaseHeader."Amounts only" THEN
                PurchaseLine.InitAmntToReceive;
              //
              IF PurchaseRequisitionLine."Purchase Route Reference" = '' THEN BEGIN
                IF LastRefNo = '' THEN
                  LastRefNo := RouteRefMgt.GetLastRefNo();
                LastRefNo := INCSTR(LastRefNo);
                PurchaseRequisitionLine."Purchase Route Reference" := LastRefNo;
                PurchaseRequisitionLine.MODIFY;
              END;
              PurchaseLine."Purchase Route Reference" := PurchaseRequisitionLine."Purchase Route Reference";
              PurchaseLine."Subcontracting Activity" := PurchaseRequisitionLine."Subcontracting Activity";  //DP01958a
              UpdateTmpRequisitionLines(LineWithSameProperty, PurchaseLine);
              //
              PurchaseLine."Modified by" := USERID;
              PurchaseLine."Last Date Modified" := TODAY;
              PurchaseLine."Comments for Logistics" := PurchaseRequisitionLine."Comments for Logistics";
              IF BudgetLine.GET(PurchaseRequisitionLine."Project No.", PurchaseRequisitionLine."Budget Line") THEN BEGIN
                //missing fields Requisition available on Budget for old interface purchase action -> purchase order
                PurchaseLine."Purchase Phase" := BudgetLine."Purchase Phase";
                PurchaseLine."Plot No." := BudgetLine."Plot No.";
                PurchaseLine."Budget Adjustment" := BudgetLine.Adjustment;
                IF PurchaseLine."Tender Paragraph" = '' THEN BEGIN
                  PurchaseLine."Tender Paragraph" := BudgetLine."Tender Paragraph";
                  PurchaseLine."Tender Paragraph Part" := BudgetLine."Tender Paragraph Part";
                END;
                PurchaseLine."Variant Code" := BudgetLine."Variant Code";
                PurchaseLine."FSC Type Code" := BudgetLine."FSC Type Code";
              END;
              PurchaseLine.MODIFY;
              PurchaseLine.CreatePurchOrderControl(FALSE);
              CopyPurchInspectionLines(PurchaseRequisitionLine, PurchaseLine); //**4PS.n BI006 KD 07-11-16
            END;
          END ELSE BEGIN
            PurchaseRequisitionLine."Purchase Route Reference" := TmpPurchaseRequisitionLine."Purchase Route Reference";
            PurchaseRequisitionLine.MODIFY;
          END;
          CopyCommentLines(PurchaseRequisitionLine);
          PurchaseRequisitionLine."Document Type" := PurchaseLine."Document Type";
          PurchaseRequisitionLine."Document No." := PurchaseLine."Document No.";
          PurchaseRequisitionLine."Document Line No." := PurchaseLine."Line No.";
          PurchaseRequisitionLine.MODIFY;
        UNTIL PurchaseRequisitionLine.NEXT = 0;
        IF (LastRefNo <> '') THEN
          RouteRefMgt.WriteLastRefNo(LastRefNo);
      END;
    END;

    LOCAL PROCEDURE CopyRequisitionLines@1210190008(VAR PurchaseRequisition@1210190001 : Record 11229330;OrigCurrency@1100528900 : Code[10];VendorNoFilter@1100529800 : Code[20];OrderAddressCodeFilter@1100529600 : Code[10];DocType@1100528901 : 'Quote,Order,Blanket Order');
    VAR
      PurchaseRequisitionLine@1100528902 : Record 11229331;
      DestCurrency@1100528903 : Code[10];
    BEGIN
      DestCurrency := PurchaseHeader."Currency Code";
      IF DocType = DocType::Quote THEN BEGIN
        IF NOT SkipMessage THEN
          Window.UPDATE(1, Text009);
        PurchaseLine.INIT;
        PurchaseLine."Document Type" := PurchaseHeader."Document Type"::Quote;
        PurchaseLine."Document No." := PurchaseHeader."No.";
      END;
      IF DocType IN [DocType::Order, DocType::"Blanket Order"] THEN BEGIN
        IF NOT SkipMessage THEN
          Window.UPDATE(1, Text009a);
        PurchaseLine.INIT;
        PurchaseLine."Document Type" := PurchaseHeader."Document Type";
        PurchaseLine."Document No." := PurchaseHeader."No.";
      END;
      //
      PurchaseRequisitionLine.SETRANGE("Purchase Requisition No.", PurchaseRequisition."No.");
      IF CheckCurrency THEN BEGIN
        IF OrigCurrency <> DestCurrency THEN
          PurchaseRequisitionLine.SETFILTER("Currency Code", '%1', OrigCurrency)
        ELSE
          PurchaseRequisitionLine.SETRANGE("Currency Code", DestCurrency);
      END;
      IF VendorNoFilter <> '' THEN
        PurchaseRequisitionLine.SETRANGE(Vendor, VendorNoFilter);
      PurchaseRequisitionLine.SETRANGE("Order Address Code", OrderAddressCodeFilter);

      IF DocType = DocType::Order THEN
        PurchaseRequisitionLine.SETFILTER(Transaction, '<>%1', PurchaseRequisitionLine.Transaction::"Blanket Order");
      IF DocType = DocType::"Blanket Order" THEN
        PurchaseRequisitionLine.SETRANGE(Transaction, PurchaseRequisitionLine.Transaction::"Blanket Order");

      CopyReqLineToPurchHeader(PurchaseRequisitionLine, PurchaseHeader);
      PurchaseHeader.MODIFY(TRUE);

      InsertPurchaseLines(PurchaseRequisitionLine, PurchaseLine);
    END;

    LOCAL PROCEDURE CopyReqLineToPurchHeader@1100529804(VAR PurchReqLine@1100529800 : Record 11229331;VAR PurchaseHeader@1100529801 : Record 38);
    VAR
      PurchHeaderExtension@1100529802 : Record 11020398;
    BEGIN
      IF PurchReqLine.FINDFIRST THEN BEGIN
        PurchaseHeader.VALIDATE("Purchaser Code", PurchReqLine."Purchaser Code");
        PurchaseHeader."Shipment Method Code" := PurchReqLine."Shipment Method Code";
        PurchaseHeader.VALIDATE("Transport Method", PurchReqLine."Transport Method");
        PurchaseHeader."Back-to-back" := PurchReqLine."Back-to-back";
        IF PurchReqLine."Ship To Location" <> '' THEN
          PurchaseHeader.VALIDATE("Ship-to Location", PurchReqLine."Ship To Location");
        IF PurchReqLine.Destination <> '' THEN BEGIN
          PurchHeaderExtension.GetPurchHeadExtension(PurchaseHeader."Document Type", PurchaseHeader."No.");
          PurchHeaderExtension.Destination := PurchReqLine.Destination;
          PurchHeaderExtension.UpdatePurchHeadExtension(PurchaseHeader."Document Type", PurchaseHeader."No.");
        END;
      END;
    END;

    LOCAL PROCEDURE SelectPurchaseOrderActions@1100529607(VAR PrintOrders@1100529604 : Boolean;VAR ProcBasedOnElectronicOrderType@1100529603 : Boolean;VAR TransferExternalDocuments@1100529602 : Boolean;VAR AddDocumentsToDocumentRelations@1100529601 : Boolean);
    VAR
      StartProcess@1100529600 : Boolean;
      MakePurchOrder@1100529605 : Report 493;
    BEGIN
      IF GUIALLOWED AND NOT SkipMessage THEN BEGIN
        MakePurchOrder.SetActivateFromPurchRequistion;
        MakePurchOrder.RUNMODAL;
        MakePurchOrder.GetOptionsForPurchRequisition(
          StartProcess, PrintOrders, ProcBasedOnElectronicOrderType, TransferExternalDocuments,
          AddDocumentsToDocumentRelations);
        IF NOT StartProcess THEN
          ERROR('');
      END ELSE BEGIN
        StartProcess := TRUE;
        PrintOrders := FALSE;
        ProcBasedOnElectronicOrderType := FALSE;
        TransferExternalDocuments := TRUE;
        AddDocumentsToDocumentRelations := TRUE;
      END;
    END;

    LOCAL PROCEDURE CarryOutPurchOrdersActions@1100529606(VAR PrintOrders@1100529603 : Boolean;VAR ProcElectronicOrderType@1100529602 : Boolean);
    VAR
      CarryOutAction@1100529605 : Codeunit 99000813;
      DocumentPrint@1100529608 : Codeunit 229;
      PurchOrderHeader@1100529604 : Record 38;
      PurchOrderHeader2@1100529607 : Record 38;
      Vendor@1100529606 : Record 23;
      Error@1100529611 : Record 11012051;
      ChangeStatus@1100529609 : 'None,Released,Closed';
      DirectPostOrder@1100529610 : 'According to Vendor,Not';
    BEGIN
      IF NOT PrintOrders AND NOT ProcElectronicOrderType THEN
        EXIT;

      IF TempPurchaseHeader.FINDSET THEN BEGIN
        REPEAT
          PurchOrderHeader.GET(TempPurchaseHeader."Document Type",TempPurchaseHeader."No.");
          IF PurchOrderHeader."Buy-from Vendor No." <> '' THEN BEGIN
            Vendor.GET(PurchOrderHeader."Buy-from Vendor No.");
            IF PrintOrders THEN BEGIN
              CarryOutAction.SetPrintOrder(PrintOrders);
              CarryOutAction.PrintPurchaseOrder(PurchOrderHeader);
            END;
            IF ProcElectronicOrderType THEN BEGIN
              IF NOT PrintOrders AND
                 (Vendor."Electronic Order Type" = Vendor."Electronic Order Type"::Standard)
              THEN BEGIN
                CarryOutAction.SetPrintOrder(TRUE);
                CarryOutAction.PrintPurchaseOrder(PurchOrderHeader);
              END;
              IF (Vendor."Electronic Order Type" = Vendor."Electronic Order Type"::"ICM/ICF") AND
                 (Vendor."ICM Login Code" <> '')
              THEN BEGIN
                PurchOrderHeader2.RESET;
                PurchOrderHeader2 := PurchOrderHeader;
                PurchOrderHeader2.SETRECFILTER;
                REPORT.RUNMODAL(REPORT::"Create ICM Files",FALSE,FALSE,PurchOrderHeader2);
              END;
              IF Vendor.PurchaseOrdersAreSentByEMail AND
                 (PurchOrderHeader.GetEMailOrder <> '')
              THEN BEGIN
                PurchOrderHeader2.RESET;
                PurchOrderHeader2 := PurchOrderHeader;
                PurchOrderHeader2.SETRECFILTER;
                DocumentPrint.EmailPurchHeader(
                  PurchOrderHeader2, FALSE, ChangeStatus::None,
                  DirectPostOrder::"According to Vendor", FALSE, TRUE);
              END;
              IF ((Vendor."Electronic Order Type" = Vendor."Electronic Order Type"::"GS1 (SOAP)") OR
                  (Vendor."Electronic Order Type" = Vendor."Electronic Order Type"::"GS1 (XML-RPC)")) AND
                 (Vendor.GLN <> '') AND
                 (Vendor."URL GS1 Purchase Order" <> '')
              THEN BEGIN
                PurchOrderHeader2.RESET;
                PurchOrderHeader2 := PurchOrderHeader;
                PurchOrderHeader2.SETRECFILTER;
                REPORT.RUNMODAL(REPORT::"Send Purchase Order GS1", FALSE, FALSE, PurchOrderHeader2);
              END;
            END;
          END;
        UNTIL TempPurchaseHeader.NEXT = 0;

        Error.SETRANGE("User ID", USERID);
        Error.SETRANGE("Source Type", Error."Source Type"::"ICM Export");
        IF Error.FIND('-') THEN BEGIN
          COMMIT;
          PAGE.RUNMODAL(PAGE::Errors, Error);
        END;
      END;
    END;

    LOCAL PROCEDURE CopyCommentLines@1100528909(PurchaseRequisitionLine@1100528900 : Record 11229331);
    VAR
      CommentLineFrom@1100529803 : Record 11020634;
      PurchCommentLine@1100529804 : Record 43;
      RecRef@1100529806 : RecordRef;
      LineNo@1100529805 : Integer;
    BEGIN
      RecRef.GETTABLE(PurchaseRequisitionLine);

      CommentLineFrom.SETRANGE("Table Name", CommentLineFrom."Table Name"::"Purchase Requisition Line");
      CommentLineFrom.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
      IF CommentLineFrom.FINDSET THEN BEGIN
        PurchCommentLine.RESET;
        PurchCommentLine.SETRANGE("Document Type", PurchaseLine."Document Type");
        PurchCommentLine.SETRANGE("No.", PurchaseLine."Document No.");
        PurchCommentLine.SETRANGE("Document Line No.", PurchaseLine."Line No.");
        IF PurchCommentLine.FINDLAST THEN
          LineNo := PurchCommentLine."Line No." + 10000
        ELSE
          LineNo := 10000;

        REPEAT
          PurchCommentLine.INIT;
          PurchCommentLine."Document Type" := PurchaseLine."Document Type";
          PurchCommentLine."No." := PurchaseLine."Document No.";
          PurchCommentLine."Document Line No." := PurchaseLine."Line No.";
          PurchCommentLine."Line No." := LineNo;
          PurchCommentLine.Date := CommentLineFrom.Date;
          PurchCommentLine.Code := CommentLineFrom.Code;
          PurchCommentLine.Comment := CommentLineFrom.Comment;
          PurchCommentLine."Line Break" := CommentLineFrom."Line Break";
          PurchCommentLine."Created by" := CommentLineFrom."Created by";
          PurchCommentLine.INSERT(TRUE);
          LineNo += 10000
        UNTIL CommentLineFrom.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyCommentHeader@1100525003(PurchaseRequisition@1100528900 : Record 11229330);
    VAR
      CommentLineFrom@1100529803 : Record 11020634;
      PurchCommentLine@1100529804 : Record 43;
      RecRef@1100529806 : RecordRef;
      LineNo@1100529805 : Integer;
    BEGIN
      //db, 06-02-17
      RecRef.GETTABLE(PurchaseRequisition);

      CommentLineFrom.SETRANGE("Table Name", CommentLineFrom."Table Name"::"Purchase Requisition");
      CommentLineFrom.SETFILTER("Record ID", FORMAT(RecRef.RECORDID()));
      IF CommentLineFrom.FINDSET THEN BEGIN
        PurchCommentLine.RESET;
        PurchCommentLine.SETRANGE("Document Type", PurchaseHeader."Document Type");
        PurchCommentLine.SETRANGE("No.", PurchaseHeader."No.");
        PurchCommentLine.SETRANGE("Document Line No.", 0);
        IF PurchCommentLine.FINDLAST THEN
          LineNo := PurchCommentLine."Line No." + 10000
        ELSE
          LineNo := 10000;

        REPEAT
          PurchCommentLine.INIT;
          PurchCommentLine."Document Type" := PurchaseHeader."Document Type";
          PurchCommentLine."No." := PurchaseHeader."No.";
          PurchCommentLine."Document Line No." := 0;
          PurchCommentLine."Line No." := LineNo;
          PurchCommentLine.Date := CommentLineFrom.Date;
          PurchCommentLine.Code := CommentLineFrom.Code;
          PurchCommentLine.Comment := CommentLineFrom.Comment;
          PurchCommentLine."Line Break" := CommentLineFrom."Line Break";
          PurchCommentLine."Created by" := CommentLineFrom."Created by";
          PurchCommentLine.INSERT(TRUE);
          LineNo += 10000
        UNTIL CommentLineFrom.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyTextLines@1210190003(PurchaseRequisition@1210190000 : Record 11229330);
    VAR
      PurchaseText@1210190001 : Record 11012067;
      PurchaseText1@1210190002 : Record 11012067;
    BEGIN
      IF NOT SkipMessage THEN
        Window.UPDATE(1, Text010);
      PurchaseText.SETRANGE("Line Type", PurchaseText."Line Type"::Requisition);
      PurchaseText.SETRANGE("No.", PurchaseRequisition."No.");
      IF PurchaseText.FINDSET THEN BEGIN
        REPEAT
          PurchaseText1.COPY(PurchaseText);
          IF PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Quote THEN
            PurchaseText1."Line Type" := PurchaseText."Line Type"::"Purchase Quote";
          IF PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Order THEN
            PurchaseText1."Line Type" := PurchaseText."Line Type"::"Purchase Order";
          PurchaseText1."Purchase Action" := '';
          PurchaseText1."No." := PurchaseHeader."No.";
          PurchaseText1.INSERT;
        UNTIL PurchaseText.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyDocuments@1210190005(PurchaseRequisition@1210190002 : Record 11229330);
    VAR
      ProjectPurchaseAction@1100528900 : Record 11012026;
      PurchActionDocumentRelation@1210190000 : Record 11012071;
      DocumentRelation@1210190001 : Record 11012407;
      DocumentProperties@1100528400 : Record 11012746;
      TenderParagraph@1100528901 : Record 11012072;
      TenderParagraph2@1100528902 : Record 11012072;
    BEGIN
      IF NOT ProjectPurchaseAction.GET(PurchaseRequisition."Project No.", PurchaseRequisition."Purchase Action") THEN
        EXIT;  //diekus: voorlopige oplossing
      //
      Window.UPDATE(1, Text011);
      PurchActionDocumentRelation.SETRANGE(Source, PurchActionDocumentRelation.Source::Project);
      PurchActionDocumentRelation.SETRANGE("Project No.", ProjectPurchaseAction."Project No.");
      PurchActionDocumentRelation.SETRANGE("Purchase Action", ProjectPurchaseAction.Code);
      IF PurchActionDocumentRelation.FINDSET THEN BEGIN
        REPEAT
          DocumentRelation.INIT;
          IF PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Quote THEN
            DocumentRelation."Document Type" := DocumentRelation."Document Type"::"Purchase Quote";
          IF PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Order THEN
            DocumentRelation."Document Type" := DocumentRelation."Document Type"::"Purchase Order";
          DocumentRelation."No." := PurchaseHeader."No.";
          DocumentRelation.Description := PurchActionDocumentRelation.Description;
          DocumentRelation."Description 2" := PurchActionDocumentRelation."Description 2";
          DocumentRelation.Quantity := PurchActionDocumentRelation.Quantity;
          DocumentRelation."Related Document No." := PurchActionDocumentRelation."Related Document No.";
          PurchActionDocumentRelation.CALCFIELDS("Document No.");
          DocumentRelation."Document No." := PurchActionDocumentRelation."Document No.";
          DocumentRelation."Send by E-Mail" := TRUE;
          IF DocumentProperties.GET(DocumentRelation."Related Document No.") THEN
            IF DocumentProperties.FileCanBeConvertedToPDF THEN
              DocumentRelation.Print := TRUE;
          DocumentRelation.INSERT(TRUE);
          //
          TenderParagraph.SETRANGE(Type, TenderParagraph.Type::PurchAction);
          TenderParagraph.SETRANGE("No.", ProjectPurchaseAction."Project No.");
          TenderParagraph.SETRANGE("Purchase Action", ProjectPurchaseAction.Code);
          TenderParagraph.SETRANGE("Document No.", PurchActionDocumentRelation."Related Document No.");
          IF TenderParagraph.FINDSET THEN BEGIN
            REPEAT
              TenderParagraph2.COPY(TenderParagraph);
              IF PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Quote THEN
                TenderParagraph2.Type := TenderParagraph2.Type::Quote;
              IF PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Order THEN
                TenderParagraph2.Type := TenderParagraph2.Type::Order;
              TenderParagraph2."No." := PurchaseHeader."No.";
              TenderParagraph2."Document No." := PurchActionDocumentRelation."Related Document No.";
              TenderParagraph2."Purchase Action" := '';
              TenderParagraph2.INSERT;
            UNTIL TenderParagraph.NEXT = 0;
          END;
        UNTIL PurchActionDocumentRelation.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckCreateWordDoc@1100485003(VendorbyPurchaseRequisition@1100528900 : Record 11229332);
    VAR
      Contact@1210190006 : Record 5050;
      ContactBusinessRelation@1210190005 : Record 5054;
      DocumentTemplate@1210190008 : Record 11012401;
    BEGIN
      IF (VendorbyPurchaseRequisition.Type <> VendorbyPurchaseRequisition.Type::Contact) THEN BEGIN
        ContactBusinessRelation.SETCURRENTKEY("Link to Table", "No.");
        ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Vendor);
        ContactBusinessRelation.SETRANGE("No.", VendorbyPurchaseRequisition."Vendor No.");
        IF NOT ContactBusinessRelation.FINDFIRST THEN
          ERROR(Text11012000, VendorbyPurchaseRequisition."Vendor No.");
        //
        Contact.GET(ContactBusinessRelation."Contact No.");
      END ELSE BEGIN
        Contact.GET(VendorbyPurchaseRequisition."Vendor No.");
      END;
      Contact.TESTFIELD("Document Group");

      DocumentTemplate.INIT;
      DocumentTemplate.SETRANGE("Document Group", Contact."Document Group");
      DocumentTemplate.SETRANGE(Type, DocumentTemplate.Type::"Purchase Quote");
      IF VendorbyPurchaseRequisition."Document Template" <> '' THEN BEGIN
        DocumentTemplate.SETRANGE("Template Code", VendorbyPurchaseRequisition."Document Template");
      END ELSE
        DocumentTemplate.SETRANGE("Template Code");

      IF NOT DocumentTemplate.FINDFIRST THEN
        ERROR(Text11012002);
    END;

    LOCAL PROCEDURE CreateWordDoc@1100525000(PurchaseRequisition@1100528901 : Record 11229330;VendorbyPurchaseRequisition@1100528900 : Record 11229332) : Boolean;
    VAR
      Contact@1210190006 : Record 5050;
      ContactBusinessRelation@1210190005 : Record 5054;
      DocumentTemplate@1210190008 : Record 11012401;
      Job@1210190000 : Record 11072003;
      DocumentMgt@1210190007 : Codeunit 11012406;
      DocLinkRID@1199198000 : ARRAY [5] OF RecordID;
      RecRef@1199198001 : RecordRef;
    BEGIN
      IF NOT SkipMessage THEN
        Window.UPDATE(1, Text012);
      CLEAR(DocumentMgt);

      IF (VendorbyPurchaseRequisition.Type <> VendorbyPurchaseRequisition.Type::Contact) THEN BEGIN
        ContactBusinessRelation.SETCURRENTKEY("Link to Table", "No.");
        ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Vendor);
        ContactBusinessRelation.SETRANGE("No.", VendorbyPurchaseRequisition."Vendor No.");
        IF NOT ContactBusinessRelation.FINDFIRST THEN
          EXIT(FALSE);
        //
        IF NOT Contact.GET(ContactBusinessRelation."Contact No.") THEN
          EXIT(FALSE);
      END ELSE BEGIN
        IF NOT Contact.GET(VendorbyPurchaseRequisition."Vendor No.") THEN
          EXIT(FALSE);
      END;
      IF Contact."Document Group" = '' THEN
        EXIT(FALSE);

      DocumentTemplate.INIT;
      DocumentTemplate.SETRANGE("Document Group", Contact."Document Group");
      DocumentTemplate.SETRANGE(Type, DocumentTemplate.Type::"Purchase Quote");
      IF VendorbyPurchaseRequisition."Document Template" <> '' THEN BEGIN
        DocumentTemplate.SETRANGE("Template Code", VendorbyPurchaseRequisition."Document Template");
      END ELSE
        DocumentTemplate.SETRANGE("Template Code");

      IF DocumentTemplate.FINDSET THEN BEGIN
        RecRef.GETTABLE(PurchaseHeader);
        DocLinkRID[1] := RecRef.RECORDID;
        //
        RecRef.GETTABLE(PurchaseRequisition);
        DocLinkRID[2] := RecRef.RECORDID;
        //
        IF Job.GET(PurchaseRequisition."Project No.") THEN BEGIN
          RecRef.GETTABLE(Job);
          DocLinkRID[3] := RecRef.RECORDID;
        END;
        //
        REPEAT
          DocumentMgt.GenerateDocFromTemplate(
            DocumentTemplate, DocLinkRID, PurchaseHeader."Shortcut Dimension 1 Code",
            Contact."No.", VendorbyPurchaseRequisition."Contact Person No." , '', FALSE);
        UNTIL DocumentTemplate.NEXT = 0;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE PrintWordDoc@1210190009(IWithPrinterSelection@1210190002 : Boolean;IAskForPrinter@1210190003 : Boolean);
    VAR
      DocumentProperties@1210190000 : Record 11012746;
      DocumentProperties2@1100525002 : Record 11012746;
      DocumentLink@1100525000 : Record 11012747;
      RecRef@1100525001 : RecordRef;
      lCduWord@1210190001 : Codeunit 11012400;
      FileManagement@1100528400 : Codeunit 419;
      ClientFile@1100527800 : Text;
    BEGIN
      IF NOT SkipMessage THEN
        IF NOT IAskForPrinter THEN
          Window.UPDATE(1, Text013)
        ELSE
          Window.UPDATE(1, Text018);
      COMMIT;

      RecRef.GETTABLE(TempPurchaseHeader);

      DocumentLink.SETCURRENTKEY("Record ID");
      DocumentLink.SETRANGE("Table No.", DATABASE::"Purchase Header");
      DocumentLink.SETFILTER("Record ID", STRSUBSTNO('''%1''', RecRef.RECORDID()));
      DocumentLink.SETRANGE(Source, TRUE);
      DocumentLink.SETRANGE("Internal Company", COMPANYNAME);
      IF DocumentLink.FINDFIRST THEN BEGIN
        DocumentProperties.GET(DocumentLink."Document No.");

        DocumentProperties2.SETCURRENTKEY("Document Group", "Document Template", "Internal Company", "Contact No.", "Doc. Action", Version);
        DocumentProperties2.SETRANGE("Document Group", DocumentProperties."Document Group");
        DocumentProperties2.SETRANGE("Document Template", DocumentProperties."Document Template");
        DocumentProperties2.SETRANGE("Contact No.", DocumentProperties."Contact No.");
        DocumentProperties2.SETRANGE("Internal Company", COMPANYNAME);
        DocumentProperties2.SETRANGE("Doc. Action", DocumentProperties."Doc. Action");
        IF DocumentProperties2.FINDLAST THEN BEGIN
          IF (DocumentProperties2.HasStorageURI)
          THEN BEGIN
            lCduWord.InitialiseForPrinting;
            DocumentProperties2.WriteContentToClient(ClientFile);
            IF NOT IAskForPrinter THEN BEGIN
              lCduWord.Print(ClientFile);
            END ELSE BEGIN
              lCduWord.PrintWithPrinterSelection(ClientFile);
            END;
            lCduWord.TerminateAfterPrinting;
            FileManagement.DeleteClientFile(ClientFile);
          END;
        END;
      END;
    END;

    PROCEDURE PrintWriteOff@1210190000(PurchaseRequisition@1100528902 : Record 11229330);
    VAR
      DocPrint@1100485002 : Codeunit 229;
      TempReportSelection@1100485003 : TEMPORARY Record 77;
      QuoteHeader@1100528900 : Record 38;
      OrderHeader@1100528901 : Record 38;
    BEGIN
      DocPrint.GetReportSelectionForPrintUsageVendor(
        TempReportSelection.Usage::"P.Quote", '', TRUE, TempReportSelection);
      TempReportSelection.FIND('-');
      REPEAT
        IF PurchaseRequisition.Status <> PurchaseRequisition.Status::Definitive THEN
          ERROR(Text015);
        QuoteHeader.SETRANGE("Document Type", QuoteHeader."Document Type"::Quote);
        QuoteHeader.SETRANGE("Purchase Requisition No.", PurchaseRequisition."No.");
        IF NOT QuoteHeader.FINDFIRST THEN
          ERROR(Text016)
        ELSE BEGIN
          OrderHeader.SETRANGE("Document Type", OrderHeader."Document Type"::Order);
          OrderHeader.SETRANGE("Purchase Requisition No.", PurchaseRequisition."No.");
          IF OrderHeader.FINDSET THEN
            WriteOff(TempReportSelection."Report ID", QuoteHeader, OrderHeader)
          ELSE
            IF CONFIRM(Text017, TRUE) THEN
              WriteOff(TempReportSelection."Report ID", QuoteHeader, OrderHeader);
        END;
      UNTIL TempReportSelection.NEXT = 0;
    END;

    PROCEDURE WriteOff@1210190001(ReportID@1100485000 : Integer;VAR QuoteHeader@1100528900 : Record 38;VAR OrderHeader@1100528901 : Record 38);
    VAR
      PurchaseQuote@1210190001 : Record 38;
    BEGIN
      REPEAT
        OrderHeader.SETRANGE("Copied from Purchase Quote No.", QuoteHeader."No.");
        IF NOT OrderHeader.FINDFIRST THEN BEGIN
          PurchaseQuote.COPYFILTERS(QuoteHeader);
          PurchaseQuote.SETRANGE("No.", QuoteHeader."No.");
          REPORT.RUNMODAL(ReportID, FALSE, FALSE, PurchaseQuote);
        END;
      UNTIL QuoteHeader.NEXT = 0;
    END;

    PROCEDURE PrintQuoteDocs@1100485001(PurchaseRequisition@1100528900 : Record 11229330);
    VAR
      AskForPrinter@1100485000 : Boolean;
    BEGIN
      Window.OPEN(Text007);
      WITH PurchaseHeader DO BEGIN
        AskForPrinter := TRUE;
        RESET;
        SETCURRENTKEY("Document Type", "Job No.");
        SETRANGE("Document Type", "Document Type"::Quote);
        SETRANGE("Purchase Requisition No.", PurchaseRequisition."No.");
        IF FINDSET THEN
          REPEAT
            TempPurchaseHeader := PurchaseHeader;
            PrintWordDoc(TRUE, AskForPrinter);
            AskForPrinter := FALSE;
          UNTIL NEXT = 0;
        RESET;
      END;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE FillGenericTempTable@1100525002(PurchaseRequisition@1100525000 : Record 11229330;GroupByVendor@1100529800 : Boolean;GroupByTransaction@1100529801 : Boolean);
    VAR
      PurchaseRequisitionLine@1100525001 : Record 11229331;
    BEGIN
      GenericTempTable.DELETEALL;
      PurchaseRequisitionLine.SETRANGE("Purchase Requisition No.", PurchaseRequisition."No.");
      PurchaseRequisitionLine.SETRANGE("Document Type", 0);
      PurchaseRequisitionLine.SETFILTER(Transaction, '%1|%2|%3', PurchaseRequisitionLine.Transaction::"Purchase Order",
        PurchaseRequisitionLine.Transaction::"Fixed Asset", PurchaseRequisitionLine.Transaction::"Blanket Order");
      IF GroupByVendor THEN
        PurchaseRequisitionLine.SETFILTER(Vendor, '<>%1', '');

      IF PurchaseRequisitionLine.FINDSET THEN BEGIN
        REPEAT
          GenericTempTable.INIT;
          IF GroupByTransaction THEN BEGIN
            IF PurchaseRequisitionLine.Transaction = PurchaseRequisitionLine.Transaction::"Blanket Order" THEN
              GenericTempTable."Key Code1" := FORMAT(PurchaseRequisitionLine.Transaction::"Blanket Order")
            ELSE
              GenericTempTable."Key Code1" := FORMAT(PurchaseRequisitionLine.Transaction::"Purchase Order");
          END;

          GenericTempTable."Key Code2" := PurchaseRequisitionLine."Purchase Requisition No.";
          IF PurchaseRequisition."Service Order No." <> '' THEN  //DP01314
            GenericTempTable."Key Code3" := PurchaseRequisition."Service Order No."
          ELSE
            GenericTempTable."Key Code3" := PurchaseRequisition."Project No.";
          GenericTempTable."Key Code4" := PurchaseRequisitionLine."Currency Code";
          IF GroupByVendor THEN BEGIN
            GenericTempTable."Key Code5" := PurchaseRequisitionLine.Vendor;
            GenericTempTable."Key Code6" := PurchaseRequisitionLine."Order Address Code";
          END;

          IF GenericTempTable.INSERT THEN;
        UNTIL PurchaseRequisitionLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CloseBudgetLines@1100528900(VAR PurchaseRequisition@1100528903 : Record 11229330);
    VAR
      PurchaseRequisitionLine@1100528901 : Record 11229331;
      ProjectPurchaseAction@1100528902 : Record 11012026;
      BudgetLine@1100528900 : Record 11012001;
    BEGIN
      IF ProjectPurchaseAction.GET(PurchaseRequisition."Project No.", PurchaseRequisition."Purchase Action") THEN BEGIN
        IF PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Quote THEN
          IF ProjectPurchaseAction."Activate for" < ProjectPurchaseAction."Activate for"::Quote THEN
            ProjectPurchaseAction."Activate for" := ProjectPurchaseAction."Activate for"::Quote;
        IF PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Order THEN
          IF ProjectPurchaseAction."Activate for" < ProjectPurchaseAction."Activate for"::Purchase THEN
            ProjectPurchaseAction."Activate for" := ProjectPurchaseAction."Activate for"::Purchase;
        ProjectPurchaseAction.MODIFY;
      END;
      //
      PurchaseRequisitionLine.SETRANGE("Purchase Requisition No.", PurchaseRequisition."No.");
      IF PurchaseRequisitionLine.FINDSET THEN BEGIN
        REPEAT
          IF BudgetLine.GET(PurchaseRequisitionLine."Project No.", PurchaseRequisitionLine."Budget Line") THEN BEGIN
            BudgetLine.Advised := TRUE;
            BudgetLine."Purchase Route Reference" := PurchaseRequisitionLine."Purchase Route Reference";
            BudgetLine.MODIFY;
          END;
        UNTIL PurchaseRequisitionLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckSameProperty@1100485002(VAR LineWithSameProperty@1100528400 : Record 11229331;PurchaseRequisitionLine@1100528900 : Record 11229331) SubTotal : Decimal;
    BEGIN
      IF PurchaseHeader."Amounts only" THEN BEGIN
        IF PurchaseRequisitionLine."Currency Code" <> '' THEN
          SubTotal := PurchaseRequisitionLine."Amount (FCY)"
        ELSE
          SubTotal := PurchaseRequisitionLine."Amount (LCY)";
      END ELSE BEGIN
        SubTotal := PurchaseRequisitionLine.Quantity;  // * PurchaseRequisitionLine."Time Quantity";
      END;

      LineWithSameProperty.RESET;
      LineWithSameProperty.COPY(PurchaseRequisitionLine);

      LineWithSameProperty.SETRANGE("Project No.", PurchaseRequisitionLine."Project No.");
      LineWithSameProperty.SETRANGE(Element, PurchaseRequisitionLine.Element);
      LineWithSameProperty.SETRANGE("Extension Contract", PurchaseRequisitionLine."Extension Contract");
      LineWithSameProperty.SETRANGE("Item No.", PurchaseRequisitionLine."Item No.");
      LineWithSameProperty.SETRANGE("Basic Item", PurchaseRequisitionLine."Basic Item");
      LineWithSameProperty.SETRANGE(Manufacturer, PurchaseRequisitionLine.Manufacturer);
      LineWithSameProperty.SETRANGE("Trade Item", PurchaseRequisitionLine."Trade Item");
      LineWithSameProperty.SETRANGE("Vendor (Trade Item)", PurchaseRequisitionLine."Vendor (Trade Item)");
      LineWithSameProperty.SETRANGE("Cost Object", PurchaseRequisitionLine."Cost Object");
      LineWithSameProperty.SETRANGE("Cost Component", PurchaseRequisitionLine."Cost Component");
      LineWithSameProperty.SETRANGE("Service Order No.", PurchaseRequisitionLine."Service Order No.");  //DP01314
      LineWithSameProperty.SETRANGE("Global Dimension 1 Code", PurchaseRequisitionLine."Global Dimension 1 Code");  //DP01314

      LineWithSameProperty.SETRANGE(Description, PurchaseRequisitionLine.Description);
      LineWithSameProperty.SETRANGE("Description 2", PurchaseRequisitionLine."Description 2");
      LineWithSameProperty.SETRANGE("Unit of Measure", PurchaseRequisitionLine."Unit of Measure");
      LineWithSameProperty.SETRANGE("Purchase Action", PurchaseRequisitionLine."Purchase Action");
      LineWithSameProperty.SETRANGE("Purchase Route Reference", PurchaseRequisitionLine."Purchase Route Reference");
      LineWithSameProperty.SETRANGE("Price Agreement", PurchaseRequisitionLine."Price Agreement");
      IF PurchaseRequisitionLine.Vendor <> '' THEN
        LineWithSameProperty.SETRANGE(Vendor, PurchaseRequisitionLine.Vendor);
      LineWithSameProperty.SETRANGE("External Text", PurchaseRequisitionLine."External Text");
      LineWithSameProperty.SETRANGE("Price (LCY)", PurchaseRequisitionLine."Price (LCY)");
      LineWithSameProperty.SETRANGE("Currency Code", PurchaseRequisitionLine."Currency Code");

      IF LineWithSameProperty.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF (LineWithSameProperty."Line No." <> PurchaseRequisitionLine."Line No.")
          THEN BEGIN
            TmpPurchaseRequisitionLine := LineWithSameProperty;
            IF TmpPurchaseRequisitionLine.INSERT THEN;

            IF PurchaseHeader."Amounts only" THEN BEGIN
              IF PurchaseRequisitionLine."Currency Code" <> '' THEN
                SubTotal := SubTotal + LineWithSameProperty."Amount (FCY)"
              ELSE
                SubTotal := SubTotal + LineWithSameProperty."Amount (LCY)";
            END ELSE BEGIN
              SubTotal := SubTotal + LineWithSameProperty.Quantity;  // * LineWithSameProperty."Time Quantity";
            END;
          END;
        UNTIL LineWithSameProperty.NEXT = 0;
      END;

      EXIT(SubTotal);
    END;

    LOCAL PROCEDURE UpdateTmpRequisitionLines@1100528402(VAR LineWithSameProperty@1100528400 : Record 11229331;PurchaseLine@1100528402 : Record 39);
    BEGIN
      IF LineWithSameProperty.FINDSET THEN
        REPEAT
          IF TmpPurchaseRequisitionLine.GET(
            LineWithSameProperty."Purchase Requisition No.",
            LineWithSameProperty."Line No.")
          THEN BEGIN
            IF PurchaseLine."Purchase Route Reference" <> '' THEN BEGIN
              TmpPurchaseRequisitionLine."Purchase Route Reference" := PurchaseLine."Purchase Route Reference";
              TmpPurchaseRequisitionLine.MODIFY;
            END;
          END;
        UNTIL LineWithSameProperty.NEXT = 0;
    END;

    PROCEDURE SendMailQuote@1100528903(PurchaseRequisition@1100528900 : Record 11229330);
    VAR
      PurchaseHeader@1100528907 : Record 38;
      DocumentPrint@1100528905 : Codeunit 229;
      ChangeStatus@1100528904 : 'None,Released,Closed';
      DirectPostOrder@1100528903 : 'According to Vendor,Not';
      QuoteTxt@1100528902 : Text[1024];
      FirstQuote@1100528901 : Boolean;
    BEGIN
      WITH PurchaseRequisition DO BEGIN
        PurchaseHeader.SETRANGE("Document Type", PurchaseHeader."Document Type"::Quote);
        PurchaseHeader.SETRANGE("Purchase Requisition No.", "No.");
        FirstQuote := TRUE;
        IF PurchaseHeader.FINDSET THEN BEGIN
          REPEAT
            IF PurchaseHeader.GetEMailOrder <> '' THEN BEGIN
              IF FirstQuote THEN
                QuoteTxt := PurchaseHeader."No."
              ELSE
                QuoteTxt := QuoteTxt + '|' + PurchaseHeader."No.";
              FirstQuote := FALSE;
            END;
          UNTIL PurchaseHeader.NEXT = 0;
        END;
        //
        IF FirstQuote THEN BEGIN
          MESSAGE(Text021);
        END ELSE BEGIN
          PurchaseHeader.SETRECFILTER;
          PurchaseHeader.SETFILTER("No.", QuoteTxt);
          IF PurchaseHeader.FINDSET THEN BEGIN
            REPEAT
              DocumentPrint.EmailPurchHeader(
                PurchaseHeader, FALSE, ChangeStatus::None, DirectPostOrder::"Not", FALSE, TRUE);
            UNTIL PurchaseHeader.NEXT = 0;
          MESSAGE(Text0039);
          END;
        END;
      END;
    END;

    PROCEDURE SendMailQuoteLetter@1100528904(PurchaseRequisition@1100528900 : Record 11229330);
    VAR
      PurchaseHeader@1100528904 : Record 38;
      DocumentPrint@1100528903 : Codeunit 229;
      ChangeStatus@1100528902 : 'None,Released,Closed';
      DirectPostOrder@1100528901 : 'According to Vendor,Not';
    BEGIN
      WITH PurchaseRequisition DO BEGIN
        PurchaseHeader.SETRANGE("Document Type", PurchaseHeader."Document Type"::Quote);
        PurchaseHeader.SETRANGE("Purchase Requisition No.", "No.");
        PurchaseHeader.SETFILTER("Quote Status", '%1|%2|%3',
          PurchaseHeader."Quote Status"::Sent,
          PurchaseHeader."Quote Status"::Received,
          PurchaseHeader."Quote Status"::Rejected);
        IF PurchaseHeader.FINDSET THEN BEGIN
          REPEAT
            IF PurchaseHeader.GetEMailOrder <> '' THEN
              PurchaseHeader.MARK(TRUE);
          UNTIL PurchaseHeader.NEXT = 0;
        END;
        PurchaseHeader.MARKEDONLY(TRUE);
        IF PurchaseHeader.FINDSET THEN BEGIN
          REPEAT
            DocumentPrint.EmailPurchHeader(
              PurchaseHeader, FALSE, ChangeStatus::None, DirectPostOrder::"Not", TRUE, TRUE);
          UNTIL PurchaseHeader.NEXT = 0;
        END ELSE BEGIN
          MESSAGE(Text021);
        END;
      END;
    END;

    LOCAL PROCEDURE CheckTextLine@1100528901(PurchaseRequisitionLine@1100528900 : Record 11229331) : Boolean;
    BEGIN
      WITH PurchaseRequisitionLine DO BEGIN
        IF (Quantity <> 0) OR ("Amount (LCY)" <> 0) OR ("Amount (FCY)" <> 0) THEN
          EXIT(FALSE);
        IF ("Item No." <> '') OR ("Basic Item" <> '') OR ("Trade Item" <> '') THEN
          EXIT(FALSE);
        IF ("Plant Type" <> '') OR ("Plant No." <> '') THEN
          EXIT(FALSE);
        IF ("G/L Account" <> '') THEN
          EXIT(FALSE);
        IF ("FA No." <> '') THEN
          EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckItemLine@1100529602(PurchaseRequisitionLine@1100528900 : Record 11229331) : Boolean;
    BEGIN
      IF PurchaseRequisitionLine."Item No." = '' THEN
        EXIT(FALSE);
      IF (PurchaseRequisitionLine."Project No." <> '') OR (PurchaseRequisitionLine."Service Order No." <> '') THEN
        EXIT(FALSE);
      IF (PurchaseHeader.Deliver <> PurchaseHeader.Deliver::Location) OR (PurchaseHeader."Ship-to Location" = '') THEN
        EXIT(FALSE);
      IF PurchaseRequisitionLine."G/L Account" <> '' THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckGLAccountLine@1100529831(PurchaseRequisitionLine@1100529800 : Record 11229331) : Boolean;
    BEGIN
      IF (PurchaseRequisitionLine."Project No." <> '') OR (PurchaseRequisitionLine."Service Order No." <> '') THEN
        EXIT(TRUE);

      IF PurchaseRequisitionLine."G/L Account" <> '' THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE ReleaseRequisitionManually@1100529400(VAR PurchaseRequisition@1100529400 : Record 11229330);
    BEGIN
      WITH PurchaseRequisition DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            CheckIfReleasingIsAllowed(PurchaseRequisition.Status);
            CheckReleaseRequisition(PurchaseRequisition);
            VALIDATE(Status, Status::Released);
            MODIFY(TRUE);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE ReopenRequisitionManually@1100529401(VAR PurchaseRequisition@1100529400 : Record 11229330);
    BEGIN
      WITH PurchaseRequisition DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            CheckIfReopenIsAllowed(PurchaseRequisition.Status);
            VALIDATE(Status, Status::Open);
            MODIFY(TRUE);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE ReopenRequisition@1100528500(VAR PurchaseRequisition@1100529400 : Record 11229330);
    BEGIN
      WITH PurchaseRequisition DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            VALIDATE(Status, Status::Open);
            MODIFY(TRUE);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE SendRequisitionForApproval@1100529810(VAR PurchaseRequisition@1100529800 : Record 11229330);
    VAR
      ApprovalManagement4PSConstr@1100529802 : Codeunit 11125349;
      ApprovalsBridge4PSConstruct@1100529801 : Codeunit 11125348;
    BEGIN
      CheckReleaseRequisition(PurchaseRequisition);
      IF ApprovalManagement4PSConstr.IsPurchaseRequisitionApprovalsWorkflowEnabled(PurchaseRequisition) THEN
        ApprovalsBridge4PSConstruct.OnSendPurchaseRequisitionForApproval(PurchaseRequisition);
    END;

    LOCAL PROCEDURE CopyPurchInspectionLines@1100529402(PurchaseRequisitionLine@1100529402 : Record 11229331;PurchaseLine@1100529401 : Record 39);
    VAR
      PurchInspectionLine@1100529400 : Record 11229328;
      PurchInspectionLineLoc@1100529405 : Record 11229328;
      PurchInspectionLineNew@1100529404 : Record 11229328;
      LastLineNo@1100529403 : Integer;
    BEGIN
      //**4PS.sn BI006 KD 07-11-16
      PurchInspectionLine.SETRANGE("Document Type", PurchInspectionLine."Document Type"::"Purchase Requisition");
      PurchInspectionLine.SETRANGE("Document No.", PurchaseRequisitionLine."Purchase Requisition No.");
      PurchInspectionLine.SETRANGE("Document Line No.", PurchaseRequisitionLine."Line No.");
      IF PurchInspectionLine.ISEMPTY THEN
        EXIT;

      LastLineNo := 0;
      PurchInspectionLineLoc.SETRANGE("Document Type", PurchaseLine."Document Type" + 1);
      PurchInspectionLineLoc.SETRANGE("Document No.", PurchaseLine."Document No.");
      PurchInspectionLineLoc.SETRANGE("Document Line No.", PurchaseLine."Line No.");
      IF PurchInspectionLineLoc.FINDLAST THEN
        LastLineNo := PurchInspectionLineLoc."Line No.";

      PurchInspectionLine.FINDSET;
      REPEAT
        LastLineNo += 10000;
        PurchInspectionLineNew := PurchInspectionLine;
        PurchInspectionLineNew."Document Type" := PurchaseLine."Document Type" + 1;
        PurchInspectionLineNew."Document No." := PurchaseLine."Document No.";
        PurchInspectionLineNew."Document Line No." := PurchaseLine."Line No.";
        PurchInspectionLineNew."Line No." := LastLineNo;
        PurchInspectionLineNew.INSERT(TRUE);
      UNTIL PurchInspectionLine.NEXT = 0;
      //**4PS.en BI006 KD 07-11-16
    END;

    PROCEDURE ApproveRequisition@1100529500(VAR PurchaseRequisition@1100529400 : Record 11229330);
    BEGIN
      //DP01314
      WITH PurchaseRequisition DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            CheckReleaseRequisition(PurchaseRequisition);
            VALIDATE(Status, Status::Approved);
            MODIFY(TRUE);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CloseRequisition@1100529502(VAR PurchaseRequisition@1100529400 : Record 11229330);
    BEGIN
      //DP01314
      WITH PurchaseRequisition DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            VALIDATE(Status, Status::Definitive);
            MODIFY(TRUE);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CloseRequisitionFinal@1100528200(VAR PurchaseRequisition@1100529400 : Record 11229330);
    BEGIN
      //C042609
      WITH PurchaseRequisition DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            VALIDATE(Status, Status::Closed);
            MODIFY(TRUE);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CancelRequisition@1100529603(VAR PurchaseRequisition@1100529400 : Record 11229330);
    BEGIN
      WITH PurchaseRequisition DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            VALIDATE(Status, Status::Cancelled);
            MODIFY(TRUE);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CheckStatusAndMandatoryFields@1100525001(PurchaseRequisition@1100525001 : Record 11229330);
    VAR
      ProjRec@1100525000 : Record 11072003;
      PurchaseRequisitionLine@1100525002 : Record 11229331;
    BEGIN
      //db, 06-02-17
      IF (PurchaseRequisition.Status = PurchaseRequisition.Status::Open) THEN EXIT;

      PurchaseRequisitionLine.SETRANGE("Purchase Requisition No.", PurchaseRequisition."No.");
      IF PurchaseRequisitionLine.FINDSET THEN BEGIN
        REPEAT
          IF ProjRec.GET(PurchaseRequisitionLine."Project No.") THEN
            IF ProjRec."Posting Element Mandatory" THEN
             PurchaseRequisitionLine.TESTFIELD(Element);
        UNTIL PurchaseRequisitionLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyExternalDocuments@1100529600(PurchaseRequisition@1100529600 : Record 11229330);
    VAR
      DocumentLinkMgt@1100529601 : Codeunit 11012401;
      FromRecRef@1100529602 : RecordRef;
      ToRecRef@1100529603 : RecordRef;
    BEGIN
      //C037002
      FromRecRef.GETTABLE(PurchaseRequisition);
      ToRecRef.GETTABLE(PurchaseHeader);
      DocumentLinkMgt.CopyDocLinks(FromRecRef, ToRecRef);
      DocumentLinkMgt.CreatePurchDocumentRelation(PurchaseHeader."No.", PurchaseHeader."Document Type", ToRecRef.RECORDID);
      CLEAR(FromRecRef);
      CLEAR(ToRecRef);
    END;

    LOCAL PROCEDURE CheckAmountRequisitionLine@1100527000(PurchaseRequisitionLine@1100527000 : Record 11229331) : Boolean;
    BEGIN
      WITH PurchaseRequisitionLine DO
        EXIT((Quantity <> 0) AND ("Amount (LCY)" = 0) AND ("Amount (FCY)" = 0));
    END;

    LOCAL PROCEDURE GetGLSetup@1100529601();
    BEGIN
      IF NOT HasGotGLSetup THEN BEGIN
        GLSetup.GET;
        HasGotGLSetup := TRUE;
      END;
    END;

    PROCEDURE SelectProjectTenderParagraphs@1100528501(VAR ProjectTenderParagraph@1100528500 : Record 11012263;RequisitionNo@1100528504 : Code[20];ProjectNo@1100527352 : Code[20]);
    VAR
      BudgetLine@1100528506 : Record 11012001;
    BEGIN
      IF ProjectTenderParagraph.FINDSET THEN BEGIN
        REPEAT
          BudgetLine.RESET;
          BudgetLine.SETRANGE("Project No.", ProjectTenderParagraph."Project No.");
          BudgetLine.SETRANGE("Tender Paragraph", ProjectTenderParagraph."Tender Paragraph");

          BudgetLine.SETRANGE("Cost Type", BudgetLine."Cost Type"::Material);
          IF BudgetLine.FINDSET THEN BEGIN
            CheckBudgetLineElementCostObject(BudgetLine);
            InsertPurchReqLineFromTenderParagraphs(ProjectTenderParagraph, RequisitionNo, ProjectNo);
          END;
          BudgetLine.SETRANGE("Cost Type", BudgetLine."Cost Type"::Plant);
          IF BudgetLine.FINDSET THEN BEGIN
            CheckBudgetLineElementCostObject(BudgetLine);
            InsertPurchReqLineFromTenderParagraphs(ProjectTenderParagraph, RequisitionNo, ProjectNo);
          END;
          BudgetLine.SETRANGE("Cost Type", BudgetLine."Cost Type"::Subcontracting);
          IF BudgetLine.FINDSET THEN BEGIN
            CheckBudgetLineElementCostObject(BudgetLine);
            InsertPurchReqLineFromTenderParagraphs(ProjectTenderParagraph, RequisitionNo, ProjectNo);
          END;
          BudgetLine.SETRANGE("Cost Type", BudgetLine."Cost Type"::Sundry);
          IF BudgetLine.FINDSET THEN BEGIN
            CheckBudgetLineElementCostObject(BudgetLine);
            InsertPurchReqLineFromTenderParagraphs(ProjectTenderParagraph, RequisitionNo, ProjectNo);
          END;

        UNTIL ProjectTenderParagraph.NEXT = 0;
      END;
    END;

    PROCEDURE InsertPurchReqLineFromTenderParagraphs@1100527401(VAR ProjectTenderParagraph@1100528500 : Record 11012263;RequisitionNo@1100528504 : Code[20];ProjectNo@1100527352 : Code[20]);
    VAR
      PurchaseRequisitionLine@1100528503 : Record 11229331;
      LastLine@1100528502 : Integer;
    BEGIN
      PurchaseRequisitionLine.SETRANGE("Project No.", ProjectNo);
      PurchaseRequisitionLine.SETRANGE("Purchase Requisition No.", RequisitionNo);
      IF PurchaseRequisitionLine.FINDLAST THEN
        LastLine := PurchaseRequisitionLine."Line No.";

      PurchaseRequisitionLine.INIT;
      PurchaseRequisitionLine."Purchase Requisition No." := RequisitionNo;
      PurchaseRequisitionLine."Line No." := LastLine + 10000;
      LastLine := PurchaseRequisitionLine."Line No.";
      PurchaseRequisitionLine.INSERT(TRUE);
      PurchaseRequisitionLine.InitRecord;

      PurchaseRequisitionLine.Quantity := ProjectTenderParagraph.Quantity;
      PurchaseRequisitionLine.Description := ProjectTenderParagraph.Description;
      PurchaseRequisitionLine."Description 2" := ProjectTenderParagraph."Description 2";
      PurchaseRequisitionLine."Unit of Measure" := ProjectTenderParagraph."Unit of Measure Code";
      PurchaseRequisitionLine."Project No." := ProjectTenderParagraph."Project No.";
      PurchaseRequisitionLine."Tender Paragraph" := ProjectTenderParagraph."Tender Paragraph";
      PurchaseRequisitionLine."Amount (LCY)" := SumAmountLCY;
      IF PurchaseRequisitionLine.Quantity <> 0 THEN
        PurchaseRequisitionLine."Price (LCY)" := PurchaseRequisitionLine."Amount (LCY)" / PurchaseRequisitionLine.Quantity
      ELSE
        PurchaseRequisitionLine."Price (LCY)" := 0;
      PurchaseRequisitionLine."Gross Price (LCY)" := PurchaseRequisitionLine."Price (LCY)";
      PurchaseRequisitionLine.Element := BudgetLineElement;
      PurchaseRequisitionLine."Cost Type" := BudgetLineCostType - 1;
      PurchaseRequisitionLine."Cost Object" := BudgetLineCostObject;
      PurchaseRequisitionLine.MODIFY;

      ProjectTenderParagraph.CALCFIELDS("Tender Paragraph Text");
      IF ProjectTenderParagraph."Tender Paragraph Text" <> '' THEN BEGIN
        InsertPurchaseRequisitionCommentLine(ProjectTenderParagraph."Tender Paragraph Text", PurchaseRequisitionLine);
      END;
    END;

    LOCAL PROCEDURE CheckBudgetLineElementCostObject@1100527421(VAR BudgetLine@1100527350 : Record 11012001);
    VAR
      BudgetLine2@1100527351 : Record 11012001;
    BEGIN
      SumAmountLCY := 0;
      BudgetLineElement := '';
      BudgetLineCostObject := '';

      BudgetLine2.RESET;
      BudgetLine2.COPY(BudgetLine);
      BudgetLineElement := BudgetLine2.Element;
      BudgetLineCostType := BudgetLine2."Cost Type";
      BudgetLineCostObject := BudgetLine2."Cost Object";
      REPEAT
        SumAmountLCY += BudgetLine2."Amount (LCY)";
        IF BudgetLine2.Element <> BudgetLineElement THEN
          BudgetLineElement := '';
        IF (BudgetLine2."Cost Object" <> BudgetLineCostObject) THEN
          BudgetLineCostObject := '';
      UNTIL BudgetLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertPurchaseRequisitionCommentLine@1100527434(CommentLineText@1100527350 : Text[80];PurchaseRequisitionLine@1100527355 : Record 11229331);
    VAR
      CommentLine@1100527352 : Record 11020634;
      NextLineNo@1100527353 : Integer;
      PurchReqLineRecordID@1100527356 : RecordID;
    BEGIN
      PurchReqLineRecordID := PurchaseRequisitionLine.RECORDID;
      CommentLine.SETRANGE("Table Name", CommentLine."Table Name"::"Purchase Requisition Line");
      CommentLine.SETFILTER("Record ID", FORMAT(PurchReqLineRecordID));
       NextLineNo := 10000;
      IF CommentLine.FINDLAST THEN
        NextLineNo := NextLineNo + CommentLine."Line No.";
      CommentLine.INIT;
      CommentLine."Table Name" := CommentLine."Table Name"::"Purchase Requisition Line";
      CommentLine."Record ID" :=  PurchReqLineRecordID;
      CommentLine."Line No." := NextLineNo;
      CommentLine.Date := WORKDATE;
      CommentLine.Comment := CommentLineText;
      CommentLine."Time Created" := TIME;
      CommentLine.INSERT;
    END;

    LOCAL PROCEDURE InitTempVendorByPurchRequisition@1100529800(VAR VendorbyPurchaseRequisition@1100529800 : Record 11229332;PurchRequisitionNo@1100529802 : Code[20];VendorNo@1100529801 : Code[20];OrderAddressCode@1100529803 : Code[10]);
    BEGIN
      VendorbyPurchaseRequisition.INIT;
      VendorbyPurchaseRequisition."Purchase Requisition No." := PurchRequisitionNo;
      VendorbyPurchaseRequisition.Type := VendorbyPurchaseRequisition.Type::Vendor;
      VendorbyPurchaseRequisition.VALIDATE("Vendor No.", VendorNo);
      VendorbyPurchaseRequisition."Order Address Code" := OrderAddressCode;
    END;

    PROCEDURE ProcessPlantRequest@1100529801(VAR pPurchReqLine@1100529800 : Record 11229331);
    VAR
      PlantType@1100529804 : Record 11012551;
      Item@1100529803 : Record 27;
      PlantLocation@1100529802 : Record 11012554;
      PurchaseRequisition@1100529813 : Record 11229330;
      PurchReqLine@1100529801 : Record 11229331;
      PlantCompany@1100529805 : Text;
      CheckElementMandatory@1100529806 : Boolean;
      PlantSetup@1100529807 : Record 11012550;
      ProjRec@1100529808 : Record 11072003;
      GenericTempTable@1100529811 : TEMPORARY Record 11020579;
      DestType@1100529809 : 'Request,Order';
      NewDocNo@1100529810 : Code[20];
      NewDocLineNo@1100529812 : Integer;
      FirstDocNo@1100529600 : Code[20];
      LastDocNo@1100529601 : Code[20];
      TabCaption@1100529602 : Text;
      PlantOrder@1100529603 : Record 11012556;
      PlantRequest@1100529604 : Record 11020520;
    BEGIN
      PurchaseRequisition.GET(pPurchReqLine."Purchase Requisition No.");
      IF (PurchaseRequisition.Status < PurchaseRequisition.Status::Approved) OR (PurchaseRequisition.Status >= PurchaseRequisition.Status::Closed) THEN
        ERROR(Text001);

      PurchSetup.GET;
      CASE PurchSetup."Plant Doc. Type from Purch Req" OF
        PurchSetup."Plant Doc. Type from Purch Req"::"Plant Request":
          DestType := DestType::Request;
        PurchSetup."Plant Doc. Type from Purch Req"::"Plant Order":
          DestType := DestType::Order;
      END;

      PurchReqLine.COPY(pPurchReqLine);
      PurchReqLine.FILTERGROUP(8);
      PurchReqLine.SETRANGE(Transaction, PurchReqLine.Transaction::Plant);
      PurchReqLine.SETFILTER(Quantity, '<>0');
      PurchReqLine.SETRANGE("Document No.", '');
      PurchReqLine.SETRANGE("Document Line No.",0);
      PurchReqLine.FILTERGROUP(0);

      IF NOT PurchReqLine.FINDSET THEN BEGIN
        IF NOT SkipMessage THEN BEGIN
          IF DestType = DestType::Order THEN
            MESSAGE(Text029);
          IF DestType = DestType::Request THEN
            MESSAGE(Text030);
        END;
        EXIT;
      END;

      REPEAT
        IF (PurchReqLine."Project No." = '') AND (PurchReqLine."Service Order No." = '') THEN
          ERROR(Text025, PurchReqLine.FIELDCAPTION("Project No."), PurchReqLine.FIELDCAPTION("Service Order No."), PurchReqLine."Line No.");
        PurchReqLine.TESTFIELD("Plant Location");
        PurchReqLine.TESTFIELD("Hire From");
        PurchReqLine.CheckItemInPlantCompany;
        IF PlantCompany = '' THEN
          PlantCompany := COMPANYNAME;
        PlantLocation.CHANGECOMPANY(PlantCompany);
        PlantLocation.GET(PurchReqLine."Plant Location");
        PlantLocation.TESTFIELD(Depot, FALSE);
        IF PurchReqLine."Plant Type" <> '' THEN BEGIN
          PlantType.CHANGECOMPANY(PlantCompany);
          PlantType.GET(PurchReqLine."Plant Type");
          PlantType.TESTFIELD("Order via Plant Request", TRUE);
        END ELSE
          IF PurchReqLine."Item No." <> '' THEN BEGIN
            Item.CHANGECOMPANY(PlantCompany);
            Item.GET(PurchReqLine."Item No.");
            Item.TESTFIELD("Order via Plant Request", TRUE);
          END;

        IF PurchReqLine."Project No." <> '' THEN BEGIN
          CheckElementMandatory := FALSE;
          PlantSetup.CHANGECOMPANY(PlantCompany);
          PlantSetup.GET;
          IF PlantSetup."Plant - Element Mandatory" THEN BEGIN
            IF PlantLocation."Project No." = PurchReqLine."Project No." THEN
              CheckElementMandatory := TRUE;
          END;
          IF CheckElementMandatory THEN BEGIN
            ProjRec.GET(PurchReqLine."Project No.");
            IF ProjRec."Posting Element Mandatory" THEN
              PurchReqLine.TESTFIELD(Element);
          END;
        END;
      UNTIL PurchReqLine.NEXT = 0;

      PurchReqLine.FINDSET(TRUE);
      REPEAT
        PlantCompany := PurchReqLine."Plant Company";
        IF PlantCompany = '' THEN
          PlantCompany := COMPANYNAME;
        CheckCreateNewPlantRequestOrder(PurchReqLine, PlantCompany, GenericTempTable, DestType, NewDocNo, NewDocLineNo);
        IF DestType = DestType::Request THEN
          CreatePlantRequestLine(PurchReqLine, PlantCompany, NewDocNo, NewDocLineNo);
        IF DestType = DestType::Order THEN
          CreatePlantOrderLine(PurchReqLine, PlantCompany, NewDocNo, NewDocLineNo);
        IF DestType = DestType::Request THEN
          PurchReqLine."Document Type" := PurchReqLine."Document Type"::"Plant Request";
        IF DestType = DestType::Order THEN
          PurchReqLine."Document Type" := PurchReqLine."Document Type"::"Plant Order";
        PurchReqLine."Document No." := NewDocNo;
        PurchReqLine."Document Line No." := NewDocLineNo;
        PurchReqLine.MODIFY(TRUE);

        IF FirstDocNo = '' THEN
          FirstDocNo := NewDocNo;
        LastDocNo := NewDocNo;

      UNTIL PurchReqLine.NEXT = 0;

      CheckAllLinesProcessed(PurchaseRequisition);

      IF NOT SkipMessage THEN BEGIN
        IF FirstDocNo + LastDocNo = '' THEN BEGIN
          IF DestType = DestType::Order THEN
            MESSAGE(Text029);
          IF DestType = DestType::Request THEN
            MESSAGE(Text030);
        END;

        IF DestType = DestType::Order THEN
          TabCaption := PlantOrder.TABLECAPTION;
        IF DestType = DestType::Request THEN
          TabCaption := PlantRequest.TABLECAPTION;

        IF FirstDocNo = LastDocNo THEN
          MESSAGE(Text038, TabCaption, FirstDocNo)
        ELSE
          MESSAGE(Text038, TabCaption, FirstDocNo + '..' + LastDocNo);
      END;
    END;

    LOCAL PROCEDURE CheckCreateNewPlantRequestOrder@1100529000(PurchReqLine@1100529000 : Record 11229331;PlantCompany@1100529001 : Text;VAR GenericTempTable@1100529003 : TEMPORARY Record 11020579;DestType@1100529800 : 'Request,Order';VAR NewDocNo@1100529803 : Code[20];VAR NewDocLineNo@1100529804 : Integer);
    VAR
      LevelCode@1100529004 : Code[50];
      PlantRequest@1100529801 : Record 11020520;
      PlantOrder@1100529802 : Record 11012556;
    BEGIN
      LevelCode := 'NEW REQUEST';
      GenericTempTable.RESET;
      GenericTempTable.SETRANGE("Key Code1", LevelCode);
      GenericTempTable.SETRANGE("Key Code2", PlantCompany);
      GenericTempTable.SETRANGE("Key Code3", PurchReqLine."Plant Location");
      GenericTempTable.SETRANGE("Key Code4", FORMAT(PurchReqLine."Hire From"));
      IF GenericTempTable.FINDFIRST THEN BEGIN
        CASE DestType OF
          DestType::Request: BEGIN
            PlantRequest.CHANGECOMPANY(PlantCompany);
            PlantRequest.GET(GenericTempTable.Code1);
          END;
          DestType::Order: BEGIN
            PlantOrder.CHANGECOMPANY(PlantCompany);
            PlantOrder.GET(GenericTempTable.Code1);
          END;
        END;
      END ELSE BEGIN
        CASE DestType OF
          DestType::Request:
            BEGIN
              CreateNewPlantRequest(PurchReqLine, PlantCompany, PlantRequest);
              NewDocNo := PlantRequest."No.";
            END;
          DestType::Order:
            BEGIN
              CreateNewPlantOrder(PurchReqLine, PlantCompany, PlantOrder);
              NewDocNo := PlantOrder."No.";
            END;
        END;
        CLEAR(GenericTempTable);
        GenericTempTable."Key Code1" := LevelCode;
        GenericTempTable."Key Code2" := PlantCompany;
        GenericTempTable."Key Code3" := PurchReqLine."Plant Location";
        GenericTempTable."Key Code4" := FORMAT(PurchReqLine."Hire From");
        GenericTempTable.Code1 := NewDocNo;
        GenericTempTable.INSERT;

        LevelCode := 'CREATED REQUESTS';
        GenericTempTable.RESET;
        GenericTempTable.SETRANGE("Key Code1", LevelCode);
        GenericTempTable.SETRANGE("Key Code2", PlantCompany);
        IF NOT GenericTempTable.FINDFIRST THEN BEGIN
          CLEAR(GenericTempTable);
          GenericTempTable."Key Code1" := LevelCode;
          GenericTempTable."Key Code2" := PlantCompany;
          GenericTempTable.Text1 := PlantCompany;
          GenericTempTable.INSERT;
        END;
        IF GenericTempTable.Code1 = '' THEN
          GenericTempTable.Code1 := NewDocNo;  // First Request No.
        GenericTempTable.Code2 := NewDocNo;    // Last Request No.
        GenericTempTable.MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateNewPlantRequest@1210190510(PurchReqLine@1210190001 : Record 11229331;PlantCompany@1100529000 : Text;VAR PlantRequest@1210190000 : Record 11020520);
    VAR
      PlantSetup@1100529001 : Record 11012550;
      PlantLocation@1100529003 : Record 11012554;
      NoSeriesMgt@1100529002 : Codeunit 396;
    BEGIN
      PlantRequest.INIT;
      PlantRequest."No." := '';
      IF PlantCompany = COMPANYNAME THEN BEGIN
        PlantSetup.GET;
        PlantRequest.INSERT(TRUE);
        PlantRequest.TESTFIELD("No.");
        PlantRequest.VALIDATE(Type, PlantRequest.Type::Arrival);
        PlantRequest.VALIDATE("Transfer Date", PurchReqLine."Hire From");
        PlantRequest.VALIDATE("To Location", PurchReqLine."Plant Location");
      END ELSE BEGIN
        PlantSetup.CHANGECOMPANY(PlantCompany);
        PlantLocation.CHANGECOMPANY(PlantCompany);
        PlantSetup.GET;
        PlantSetup.TESTFIELD("Plant Request Nos.");
        PlantRequest."No. Series" := PlantSetup."Plant Request Nos.";
        NoSeriesMgt.SetFromOtherCompany(PlantCompany);
        PlantRequest."No." := NoSeriesMgt.GetNextNo(PlantRequest."No. Series", 0D, TRUE);
        PlantRequest.TESTFIELD("No.");
        PlantRequest.INSERT(TRUE);
        PlantRequest."Created by" := USERID;
        PlantRequest."Created on" := CURRENTDATETIME;
        PlantRequest."Requested by" := USERID;
        PlantRequest."Requested on" := CURRENTDATETIME;
        IF PlantSetup."Transport Orders" THEN
          PlantRequest."Transport Cost for (Advice)" := PlantRequest."Transport Cost for (Advice)"::Location;
        PlantRequest.Type := PlantRequest.Type::Arrival;
        PlantRequest."Transfer Date" := PurchReqLine."Hire From";
        PlantSetup.SetPlantCompany(PlantCompany);
        PlantRequest."From Location" := PlantSetup.GetRentalDepot;
        IF (PlantRequest."From Location" <> '') AND PlantLocation.GET(PlantRequest."From Location") THEN BEGIN
          PlantRequest."From Location Name" := PlantLocation.Description;
          PlantRequest."From Location Name 2" := PlantLocation."Description 2";
          PlantRequest."From Location Address" := PlantLocation.Address;
          PlantRequest."From Location Address 2" := PlantLocation."Address 2";
          PlantRequest."From Location Post Code" := PlantLocation."Post Code";
          PlantRequest."From Location City" := PlantLocation.City;
          PlantRequest."From Location Contact" := PlantLocation.Contact;
          PlantRequest."From Location Contact Phone No" := PlantLocation."Contact Phone No.";
          PlantRequest."From Location Phone No(Mobile)" := PlantLocation."Mobile Phone No.";
          PlantRequest."From Location E-Mail" := PlantLocation."E-Mail";
          PlantRequest.FillInLocationContactInfo(0, FALSE);
        END;
        PlantRequest."To Location" := PurchReqLine."Plant Location";
        IF (PlantRequest."To Location" <> '') AND PlantLocation.GET(PlantRequest."To Location") THEN BEGIN
          PlantRequest."To Location Name" := PlantLocation.Description;
          PlantRequest."To Location Name 2" := PlantLocation."Description 2";
          PlantRequest."To Location Address" := PlantLocation.Address;
          PlantRequest."To Location Address 2" := PlantLocation."Address 2";
          PlantRequest."To Location Post Code" := PlantLocation."Post Code";
          PlantRequest."To Location City" := PlantLocation.City;
          PlantRequest."To Location Contact" := PlantLocation.Contact;
          PlantRequest."To Location Contact Phone No" := PlantLocation."Contact Phone No.";
          PlantRequest."To Location Phone No(Mobile)" := PlantLocation."Mobile Phone No.";
          PlantRequest."To Location E-Mail" := PlantLocation."E-Mail";
          PlantRequest.FillInLocationContactInfo(1, FALSE);
        END;
      END;
      IF PlantSetup."Def. Req. Status fr. Adv. Ord." = PlantSetup."Def. Req. Status fr. Adv. Ord."::Open THEN
        PlantRequest.Status := PlantRequest.Status::Open
      ELSE
        PlantRequest.Status := PlantRequest.Status::Requested;
      PlantRequest."Purchase Requisition No." := PurchReqLine."Purchase Requisition No.";
      PlantRequest.MODIFY;
    END;

    LOCAL PROCEDURE CreatePlantRequestLine@1100529001(PurchReqLine@1100529003 : Record 11229331;PlantCompany@1100529002 : Text;PlantRequestNo@1100529001 : Code[20];VAR PlantRequestLineNo@1100529800 : Integer);
    VAR
      PlantRequestLine2@1100529004 : Record 11020521;
      PlantRequestLine@1100529801 : Record 11020521;
    BEGIN
      IF PlantCompany <> '' THEN
        PlantRequestLine2.CHANGECOMPANY(PlantCompany);
      PlantRequestLine2.SETRANGE("Plant Request No.", PlantRequestNo);
      IF NOT PlantRequestLine2.FINDLAST THEN
        PlantRequestLine2."Line No." := 0;

      PlantRequestLine.INIT;
      PlantRequestLine."Plant Request No." := PlantRequestNo;
      PlantRequestLine."Line No." := PlantRequestLine2."Line No." + 10000;
      PlantRequestLine.INSERT;
      CASE TRUE OF
        PurchReqLine."Plant Type" <> '':
          BEGIN
            PlantRequestLine.Type := PlantRequestLine.Type::Plant;
            PlantRequestLine."Plant Type" := PurchReqLine."Plant Type";
          END;
        PurchReqLine."Item No." <> '':
          BEGIN
            PlantRequestLine.Type := PlantRequestLine.Type::Item;
            PlantRequestLine."Item No." := PurchReqLine."Item No.";
          END;
      ELSE
        PlantRequestLine.Type := PlantRequestLine.Type::Text;
      END;
      PlantRequestLine.Description := PurchReqLine.Description;
      IF PlantRequestLine.Type <> PlantRequestLine.Type::Text THEN BEGIN
        PlantRequestLine."Description 2" := PurchReqLine."Description 2";
        PlantRequestLine."Expected return on" := PurchReqLine."Hire To";
        IF PurchReqLine."Project No." <> '' THEN
          PlantRequestLine.Element := PurchReqLine.Element;
        PlantRequestLine.Quantity :=  PurchReqLine.Quantity;
      END;
      PlantRequestLine.MODIFY;
      PlantRequestLineNo := PlantRequestLine."Line No.";
    END;

    LOCAL PROCEDURE CreateNewPlantOrder@1100529802(PurchReqLine@1100529802 : Record 11229331;PlantCompany@1100529801 : Text;VAR PlantOrder@1100529800 : Record 11012556);
    VAR
      PlantSetup@1100529805 : Record 11012550;
      PlantLocation@1100529804 : Record 11012554;
      NoSeriesMgt@1100529803 : Codeunit 396;
    BEGIN
      PlantOrder.INIT;
      PlantOrder."No." := '';
      IF PlantCompany = COMPANYNAME THEN BEGIN
        PlantSetup.GET;
        PlantOrder.INSERT(TRUE);
        PlantOrder.TESTFIELD("No.");
        PlantOrder.VALIDATE(Type, PlantOrder.Type::Arrival);
        PlantOrder.VALIDATE("Transfer Date", PurchReqLine."Hire From");
        PlantOrder.VALIDATE("To Location", PurchReqLine."Plant Location");
      END ELSE BEGIN
        PlantSetup.CHANGECOMPANY(PlantCompany);
        PlantLocation.CHANGECOMPANY(PlantCompany);
        PlantSetup.GET;
        PlantSetup.TESTFIELD("Plant Order Nos.");
        PlantOrder."No. Series" := PlantSetup."Plant Order Nos.";
        NoSeriesMgt.SetFromOtherCompany(PlantCompany);
        PlantOrder."No." := NoSeriesMgt.GetNextNo(PlantOrder."No. Series", 0D, TRUE);
        PlantOrder.TESTFIELD("No.");
        PlantOrder.INSERT;
        PlantOrder."Created by" := USERID;
        PlantOrder."Created on" := CURRENTDATETIME;
        PlantOrder."Requested by" := USERID;
        PlantOrder."Requested on" := TODAY;
        IF PlantSetup."Transport Orders" THEN
          PlantOrder."Transport Cost for (Advice)" := PlantOrder."Transport Cost for (Advice)"::Location;
        PlantOrder.Type := PlantOrder.Type::Arrival;
        PlantOrder."Transfer Date" := PurchReqLine."Hire From";
        PlantSetup.SetPlantCompany(PlantCompany);
        PlantOrder."From Location" := PlantSetup.GetRentalDepot;
        IF (PlantOrder."From Location" <> '') AND PlantLocation.GET(PlantOrder."From Location") THEN BEGIN
          PlantOrder."From Location Address" := PlantLocation.Address;
          PlantOrder."From Location Address 2" := PlantLocation."Address 2";
          PlantOrder."From Location Post Code" := PlantLocation."Post Code";
          PlantOrder."From Location City" := PlantLocation.City;
          PlantOrder."From Location Contact" := PlantLocation.Contact;
          PlantOrder."From Location Contact Phone No" := PlantLocation."Contact Phone No.";
          PlantOrder."From Location Mobile Phone No." := PlantLocation."Mobile Phone No.";
          PlantOrder."From Location E-Mail" := PlantLocation."E-Mail";
          PlantOrder."From Location Country/Region" := PlantLocation."Country/Region Code";
          PlantOrder.FillInLocationContactInfo(0, FALSE);
        END;
        PlantOrder."To Location" := PurchReqLine."Plant Location";
        IF (PlantOrder."To Location" <> '') AND PlantLocation.GET(PlantOrder."To Location") THEN BEGIN
          PlantOrder."To Location Address" := PlantLocation.Address;
          PlantOrder."To Location Address 2" := PlantLocation."Address 2";
          PlantOrder."To Location Post Code" := PlantLocation."Post Code";
          PlantOrder."To Location City" := PlantLocation.City;
          PlantOrder."To Location Contact" := PlantLocation.Contact;
          PlantOrder."To Location Contact Phone No" := PlantLocation."Contact Phone No.";
          PlantOrder."To Location Mobile Phone No." := PlantLocation."Mobile Phone No.";
          PlantOrder."To Location E-Mail" := PlantLocation."E-Mail";
          PlantOrder."From Location Country/Region" := PlantLocation."Country/Region Code";
          PlantOrder.FillInLocationContactInfo(1, FALSE);
        END;
      END;
      PlantOrder."Purchase Requisition No." := PurchReqLine."Purchase Requisition No.";
      PlantOrder.MODIFY;
    END;

    LOCAL PROCEDURE CreatePlantOrderLine@1100529803(PurchReqLine@1100529003 : Record 11229331;PlantCompany@1100529002 : Text;PlantOrderNo@1100529001 : Code[20];VAR PlantOrderLineNo@1100529800 : Integer);
    VAR
      PlantOrderLine2@1100529004 : Record 11012557;
      PlantOrderLine@1100529801 : Record 11012557;
    BEGIN
      IF PlantCompany <> '' THEN
        PlantOrderLine2.CHANGECOMPANY(PlantCompany);
      PlantOrderLine2.SETRANGE("Plant Order No.", PlantOrderNo);
      IF NOT PlantOrderLine2.FINDLAST THEN
        PlantOrderLine2."Line No." := 0;

      PlantOrderLine.INIT;
      PlantOrderLine."Plant Order No." := PlantOrderNo;
      PlantOrderLine."Line No." := PlantOrderLine2."Line No." + 10000;
      PlantOrderLine.INSERT;
      CASE TRUE OF
        PurchReqLine."Plant Type" <> '':
          BEGIN
            PlantOrderLine.Type := PlantOrderLine.Type::Plant;
            PlantOrderLine."Plant Type" := PurchReqLine."Plant Type";
          END;
        PurchReqLine."Item No." <> '':
          BEGIN
            PlantOrderLine.Type := PlantOrderLine.Type::Item;
            PlantOrderLine."Item No." := PurchReqLine."Item No.";
          END;
        ELSE
          PlantOrderLine.Type := PlantOrderLine.Type::Text;
      END;
      PlantOrderLine.Description := PurchReqLine.Description;
      IF PlantOrderLine.Type <> PlantOrderLine.Type::Text THEN BEGIN
        PlantOrderLine."Description 2" := PurchReqLine."Description 2";
        PlantOrderLine."Expected return on" := PurchReqLine."Hire To";
        IF PurchReqLine."Project No." <> '' THEN
          PlantOrderLine.Element := PurchReqLine.Element;
        PlantOrderLine.Quantity :=  PurchReqLine.Quantity;
      END;
      PlantOrderLine.MODIFY;
      PlantOrderLineNo := PlantOrderLine."Line No.";
    END;

    PROCEDURE ProcessInventory@1100529805(VAR PurchReqLine2@1100529802 : Record 11229331);
    VAR
      PurchReqLine@1100529800 : Record 11229331;
      PurchaseRequisition@1100529801 : Record 11229330;
      ItemJnlLineRec@1100529803 : Record 83;
      ProjRec@1100529804 : Record 11072003;
      InvtSetup@1100529806 : Record 313;
      InventoryBatchRec@1100529805 : Record 233;
      NoSeriesMgt@1100529807 : Codeunit 396;
      InventoryTemplateRec@1100529808 : Record 82;
      Item@1100529809 : Record 27;
      DimValRec@1100529810 : Record 349;
      LastRefNo@1100529811 : Code[20];
      RouteRefMgtCU@1100529812 : Codeunit 11012045;
      Counter@1100529813 : Integer;
    BEGIN
      InvtSetup.GET;
      ProjectSetup.GET;
      PurchaseRequisition.GET(PurchReqLine2."Purchase Requisition No.");
      IF (PurchaseRequisition.Status < PurchaseRequisition.Status::Approved) OR (PurchaseRequisition.Status >= PurchaseRequisition.Status::Closed) THEN
        ERROR(Text001);

      PurchReqLine.COPY(PurchReqLine2);

      PurchReqLine.FILTERGROUP(8);
      PurchReqLine.SETRANGE(Transaction, PurchReqLine.Transaction::Inventory);
      PurchReqLine.SETFILTER("Item No.", '<>%1', '');
      PurchReqLine.SETFILTER(Quantity, '<>0');
      PurchReqLine.SETRANGE("Document No.", '');
      PurchReqLine.SETRANGE("Document Line No.", 0);
      PurchReqLine.FILTERGROUP(0);

      IF NOT PurchReqLine.FINDSET THEN BEGIN
        IF NOT SkipMessage THEN
          MESSAGE(Text031);
        EXIT;
      END;

      REPEAT
        IF (PurchReqLine."Project No." <> '') OR (PurchReqLine."Service Order No." <> '') THEN BEGIN
          PurchReqLine.TESTFIELD("Location Code");
          IF PurchReqLine."Project No." <> '' THEN BEGIN
            ProjRec.GET(PurchReqLine."Project No.");
            IF ProjRec."Posting Element Mandatory" THEN
              PurchReqLine.TESTFIELD(Element);
          END;

          ItemJnlLineRec.LOCKTABLE;
          ItemJnlLineRec.INIT;
          ItemJnlLineRec."Line No." := GetBatchAndLastLineNo(PurchReqLine."Location Code", InventoryBatchRec, InventoryTemplateRec) + 1;
          ItemJnlLineRec."Journal Template Name" := InventoryBatchRec."Journal Template Name";
          ItemJnlLineRec."Journal Batch Name" := InventoryBatchRec.Name;
          ItemJnlLineRec.INSERT(TRUE);

          IF InventoryBatchRec."No. Series" <> '' THEN BEGIN
            CLEAR(NoSeriesMgt);
            ItemJnlLineRec."Document No." := NoSeriesMgt.GetNextNo(InventoryBatchRec."No. Series", 0D, FALSE);
          END;
          ItemJnlLineRec."Salespers./Purch. Code" := PurchReqLine."Purchaser Code";
          IF PurchReqLine."Project No." <> '' THEN
            ItemJnlLineRec.VALIDATE("Job No.", PurchReqLine."Project No.");
          IF PurchReqLine."Service Order No." <> '' THEN
            ItemJnlLineRec.VALIDATE("Service Order No.", PurchReqLine."Service Order No.");
          ItemJnlLineRec.Element := PurchReqLine.Element;
          ItemJnlLineRec."Extension Contract" := PurchReqLine."Extension Contract";
          ItemJnlLineRec."Location Code" := PurchReqLine."Location Code";
          ItemJnlLineRec.Quantity := PurchReqLine.Quantity;
          ItemJnlLineRec."Entry Type" := ItemJnlLineRec."Entry Type"::Sale;
          ItemJnlLineRec."Posting Date" := TODAY;
          ItemJnlLineRec."Document Date" := TODAY;
          ItemJnlLineRec."Source Code" := InventoryTemplateRec."Source Code";
          ItemJnlLineRec."Reason Code" := InventoryBatchRec."Reason Code";

          Item.GET(PurchReqLine."Item No.");
          ItemJnlLineRec.VALIDATE("Item No.", Item."No.");
          ItemJnlLineRec.VALIDATE("Unit of Measure Code", PurchReqLine."Unit of Measure");
          PurchReqLine.TESTFIELD("Cost Object");
          DimMgt.GetDimValueRec(2, PurchReqLine."Cost Object", DimValRec, TRUE,'');
          ItemJnlLineRec.VALIDATE("Shortcut Dimension 2 Code", PurchReqLine."Cost Object");
          ItemJnlLineRec."Cost Component" := PurchReqLine."Cost Component";
          ItemJnlLineRec.Description := PurchReqLine.Description;
          ItemJnlLineRec."Description 2" := PurchReqLine."Description 2";
          IF PurchReqLine.Deliver = PurchReqLine.Deliver::"Service Location" THEN
            ItemJnlLineRec.Deliver := ItemJnlLineRec.Deliver::"Service Location"
          ELSE
            IF PurchReqLine.Deliver = PurchReqLine.Deliver::"Project Location" THEN
              ItemJnlLineRec.Deliver := ItemJnlLineRec.Deliver::"Project Location"
            ELSE
              ItemJnlLineRec.Deliver := ItemJnlLineRec.Deliver::Location;
          ItemJnlLineRec."Ship To Location" := PurchReqLine."Ship To Location";
          ItemJnlLineRec.VALIDATE(Text, PurchReqLine."External Text");
          ItemJnlLineRec.Blocked := InvtSetup."Default Blocked";
          ItemJnlLineRec."Comments for Logistics" := PurchReqLine."Comments for Logistics";
          IF PurchReqLine."Purchase Route Reference" = '' THEN BEGIN
            LastRefNo := RouteRefMgtCU.GetLastRefNo();
            LastRefNo := INCSTR(LastRefNo);
            PurchReqLine."Purchase Route Reference" := LastRefNo;
            RouteRefMgtCU.WriteLastRefNo(LastRefNo);
          END;
          ItemJnlLineRec."Purchase Route Reference" := PurchReqLine."Purchase Route Reference";
          ItemJnlLineRec."Purchase Requisition No." := PurchReqLine."Purchase Requisition No.";
          ItemJnlLineRec.MODIFY(TRUE);
          Counter += 1;

          PurchReqLine."Document Type" := PurchReqLine."Document Type"::"Inventory Order";
          PurchReqLine."Document Line No." := ItemJnlLineRec."Line No.";
          PurchReqLine.MODIFY(TRUE);
        END;
      UNTIL PurchReqLine.NEXT = 0;

      CheckAllLinesProcessed(PurchaseRequisition);

      IF NOT SkipMessage THEN
        MESSAGE(Text027, Counter);
    END;

    PROCEDURE GetBatchAndLastLineNo@1100529806(Location@1100525000 : Code[10];VAR ItemJournalBatch@1100525001 : Record 233;VAR ItemJournalTemplate@1100529801 : Record 82) LastLineNo : Integer;
    VAR
      Location2@1100525002 : Record 14;
      ItemJournalLine@1100525003 : Record 83;
    BEGIN
      IF Location2.GET(Location) THEN BEGIN
        IF (Location2."Inventory Journal Template" <> '') AND (Location2."Inventory Journal Batch" <> '') THEN BEGIN
          IF NOT ItemJournalTemplate.GET(Location2."Inventory Journal Template") THEN
            ItemJournalTemplate.INIT;
          IF NOT ItemJournalBatch.GET(Location2."Inventory Journal Template", Location2."Inventory Journal Batch") THEN
            ERROR(Text026);
        END ELSE BEGIN
          IF NOT ItemJournalTemplate.GET(ProjectSetup."Inventory Journal Template") THEN
            ItemJournalTemplate.INIT;
          IF NOT ItemJournalBatch.GET(ProjectSetup."Inventory Journal Template", ProjectSetup."Inventory Journal Batch") THEN
            ERROR(Text026);
        END;
      END ELSE BEGIN
        IF NOT ItemJournalTemplate.GET(ProjectSetup."Inventory Journal Template") THEN
          ItemJournalTemplate.INIT;
        IF NOT ItemJournalBatch.GET(ProjectSetup."Inventory Journal Template", ProjectSetup."Inventory Journal Batch") THEN
          ERROR(Text026);
      END;

      ItemJournalLine.SETRANGE("Journal Template Name", ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name", ItemJournalBatch.Name);
      IF ItemJournalLine.FINDLAST THEN
        LastLineNo := ItemJournalLine."Line No."
      ELSE
        LastLineNo := 0;
    END;

    LOCAL PROCEDURE CheckAllLinesProcessed@1100529808(PurchaseRequisition@1100529802 : Record 11229330);
    VAR
      PurchReqLine@1100529801 : Record 11229331;
    BEGIN
      PurchaseRequisition.SETRECFILTER;
      PurchReqLine.SETRANGE("Document Type", 0);
      PurchReqLine.SETRANGE("Document No.", '');
      PurchReqLine.SETRANGE("Document Line No.", 0);
      IF PurchReqLine.ISEMPTY THEN
        CloseRequisitionFinal(PurchaseRequisition);
    END;

    PROCEDURE SplitLine@1100529807(PurchaseRequisitionLine@1100529800 : Record 11229331);
    VAR
      PurchReqLine2@1100529801 : Record 11229331;
      LineNo@1100529802 : Integer;
      PurchaseRequisition@1100529803 : Record 11229330;
    BEGIN
      PurchaseRequisition.GET(PurchaseRequisitionLine."Purchase Requisition No.");
      PurchaseRequisition.TESTFIELD(Status, PurchaseRequisition.Status::Open);

      PurchReqLine2.SETRANGE("Purchase Requisition No.", PurchaseRequisitionLine."Purchase Requisition No.");
      PurchReqLine2.SETFILTER("Line No.", '>%1', PurchaseRequisitionLine."Line No.");
      IF PurchReqLine2.FINDFIRST THEN
        LineNo := PurchaseRequisitionLine."Line No." + ((PurchReqLine2."Line No." - PurchaseRequisitionLine."Line No.") DIV 2)
      ELSE
        LineNo := PurchaseRequisitionLine."Line No." + 10000;

      CLEAR(PurchReqLine2);
      PurchReqLine2 := PurchaseRequisitionLine;
      WITH PurchReqLine2 DO BEGIN
        Quantity := 0;
        "Line No." := LineNo;
        "Document Type" := 0;
        "Document No." := '';
        "Document Line No." := 0;
        "Budget Line" := 0;
        "Date Ordered" := WORKDATE;
        "Ordered by" := USERID;

        INSERT;

        CheckLocationInventory;
        MODIFY;
      END;
    END;

    PROCEDURE BatchProcessPurchRequisitions@1100529815(VAR PurchaseRequisition@1100529800 : Record 11229330);
    VAR
      PurchReqLine@1100529801 : Record 11229331;
    BEGIN
      SkipMessage := TRUE;
      SkipDialog := FALSE;
      Window.OPEN(Text007);

      IF PurchaseRequisition.FINDSET THEN
        REPEAT
          Window.UPDATE(1, PurchaseRequisition."No.");
          PurchReqLine.SETRANGE("Purchase Requisition No.", PurchaseRequisition."No.");
          PurchReqLine.SETFILTER(Transaction, '%1|%2|%3', PurchReqLine.Transaction::"Purchase Order",
            PurchReqLine.Transaction::"Blanket Order", PurchReqLine.Transaction::"Fixed Asset");
          IF PurchReqLine.FINDFIRST THEN
            CreateOrder(PurchaseRequisition);

          PurchReqLine.SETRANGE(Transaction, PurchReqLine.Transaction::Plant);
          IF PurchReqLine.FINDFIRST THEN
            ProcessPlantRequest(PurchReqLine);

          PurchReqLine.SETRANGE(Transaction, PurchReqLine.Transaction::Inventory);
          IF PurchReqLine.FINDFIRST THEN
            ProcessInventory(PurchReqLine);
        UNTIL PurchaseRequisition.NEXT = 0;

      Window.CLOSE;
      MESSAGE(Text032);
    END;

    PROCEDURE CheckReleaseRequisition@1100529809(PurchaseRequisition@1100529800 : Record 11229330);
    VAR
      PurchReqLine@1100529801 : Record 11229331;
    BEGIN
      PurchReqLine.SETRANGE("Purchase Requisition No.", PurchaseRequisition."No.");
      PurchReqLine.FINDSET;
      REPEAT
        IF (PurchReqLine."Project No." <> '') OR (PurchReqLine."Service Order No." <> '') THEN
          IF NOT CheckTextLine(PurchReqLine) THEN
            PurchReqLine.TESTFIELD("Cost Object");

        CASE PurchReqLine.Transaction OF
          PurchReqLine.Transaction::"Purchase Order",
          PurchReqLine.Transaction::"Blanket Order":
            BEGIN
              IF PurchReqLine."Plant No." <> '' THEN
                PurchReqLine.TESTFIELD("Cost Component Plant");
            END;
          PurchReqLine.Transaction::Plant:
            PurchReqLine.TESTFIELD("Plant Type");
          PurchReqLine.Transaction::Inventory:
            BEGIN
              PurchReqLine.TESTFIELD("Item No.");
              PurchReqLine.TESTFIELD("Location Code")
            END;
        END;
      UNTIL PurchReqLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckVendorSource@1100529605(PurchaseRequisition@1100529600 : Record 11229330;VAR VendorbyPurchaseRequisition@1100529605 : Record 11229332;DocType@1100529603 : 'Quote,Order';VAR UseVendorFromHeader@1100529601 : Boolean;VAR UseVendorFromLines@1100529602 : Boolean;VAR NoLinesToProcess@1100529606 : Boolean);
    VAR
      PurchReqLine@1100529604 : Record 11229331;
    BEGIN
      PurchReqLine.SETRANGE("Purchase Requisition No.", PurchaseRequisition."No.");
      PurchReqLine.SETRANGE("Document Type", 0);
      PurchReqLine.SETFILTER(Transaction, '%1|%2|%3', PurchReqLine.Transaction::"Purchase Order",
        PurchReqLine.Transaction::"Fixed Asset", PurchReqLine.Transaction::"Blanket Order");
      PurchReqLine.SETFILTER(Vendor,'<>%1','');
      IF NOT PurchReqLine.ISEMPTY THEN
        UseVendorFromLines := TRUE
      ELSE BEGIN
        PurchReqLine.SETRANGE(Vendor);
        IF PurchReqLine.ISEMPTY THEN BEGIN
          NoLinesToProcess := TRUE;
          EXIT;
        END;
      END;


      VendorbyPurchaseRequisition.SETRANGE("Purchase Requisition No.", PurchaseRequisition."No.");
      IF DocType = DocType::Order THEN BEGIN
        VendorbyPurchaseRequisition.SETRANGE("Activate for", VendorbyPurchaseRequisition."Activate for"::" ");
        VendorbyPurchaseRequisition.SETRANGE("Preferred Vendor", TRUE);
      END;
      IF VendorbyPurchaseRequisition.FINDFIRST THEN
        UseVendorFromHeader := TRUE;
    END;

    LOCAL PROCEDURE CheckDeleteExistingQuotes@1100529604(PurchaseRequisition@1100529601 : Record 11229330);
    VAR
      PurchReqLine@1100529600 : Record 11229331;
      PurchQuoteHeader@1100529602 : Record 38;
    BEGIN
      PurchReqLine.SETRANGE("Purchase Requisition No.", PurchaseRequisition."No.");
      PurchReqLine.SETRANGE("Document Type", 0);
      PurchReqLine.SETFILTER("Document No.",'<>%1','');
      PurchReqLine.SETFILTER(Transaction, '%1|%2|%3', PurchReqLine.Transaction::"Purchase Order",
        PurchReqLine.Transaction::"Fixed Asset", PurchReqLine.Transaction::"Blanket Order");
      IF NOT UseVendorByPurchReq THEN
        PurchReqLine.SETFILTER(Vendor, '<>%1','');

      IF PurchReqLine.FINDSET(TRUE) THEN BEGIN
        IF NOT CONFIRM(Text037) THEN
          ERROR('');

        REPEAT
          PurchQuoteHeader.SETRANGE("Document Type", PurchQuoteHeader."Document Type"::Quote);
          PurchQuoteHeader.SETRANGE("Purchase Requisition No.", PurchaseRequisition."No.");
          PurchQuoteHeader.ASCENDING(FALSE);
          PurchQuoteHeader.DELETEALL(TRUE);

          PurchReqLine."Document Type" := 0;
          PurchReqLine."Document No." := '';
          PurchReqLine."Document Line No." := 0;
          PurchReqLine.MODIFY;
        UNTIL PurchReqLine.NEXT = 0;
      END;
    END;

    BEGIN
    {
      DP01137: db, 25-10-16
      - functions moved from page 11126653 to codeunit 11229287,
      - conform Purchase Action Mgt: 11012032 to codeunit 11229288.

      DP01314: db, 23-01-17
      - additional work requisition: Service Order, Plant Type, G/L-Account, Dimension1

      4PS 25-10-16 UKR-C27159 VAKAT: BI032 Back-to-back: Triger InsertPurchaseHeader changed
      4PS 07-11-16 UKR-C21173 KD: New project inventory screen (BI006) - Added trigger CopyPurchInspectionLines; changed triggers InsertPurchaseLines, InsertPurchaseHeader
    }
    END.
  }
}

