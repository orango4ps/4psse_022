OBJECT Codeunit 1605 PEPPOL Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00,NAVNO,4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SalespersonTxt@1000 : TextConst 'ENU=Salesperson;NOR=Selger;SVE=S„ljare';
      InvoiceDisAmtTxt@1001 : TextConst 'ENU=Invoice Discount Amount;NOR=Fakturarabattbel›p;SVE=Fakturarabatt';
      LineDisAmtTxt@1011 : TextConst 'ENU=Line Discount Amount;NOR=Linjerabattbel›p;SVE=Radrabatt';
      GLNTxt@1008 : TextConst '@@@={locked};ENU=GLN';
      VATTxt@1007 : TextConst '@@@={locked};ENU=VAT';
      MultiplyTxt@1006 : TextConst '@@@={locked};ENU=Multiply';
      IBANPaymentSchemeIDTxt@1005 : TextConst '@@@={locked};ENU=IBAN';
      LocalPaymentSchemeIDTxt@1004 : TextConst '@@@={locked};ENU=LOCAL';
      BICTxt@1003 : TextConst '@@@={locked};ENU=BIC';
      AllowanceChargeReasonCodeTxt@1002 : TextConst '@@@={locked};ENU=78';
      PaymentMeansFundsTransferCodeTxt@1009 : TextConst '@@@={locked};ENU=30';
      GTINTxt@1010 : TextConst '@@@={locked};ENU=GTIN';
      UoMforPieceINUNECERec20ListIDTxt@1013 : TextConst '@@@={Locked};ENU=EA';
      NoUnitOfMeasureErr@1014 : TextConst '@@@=1: document type, 2: document no 3 Unit of Measure Code;ENU=The %1 %2 contains lines on which the %3 field is empty.;NOR=%1 %2 inneholder linjer der %3-feltet er tomt.;SVE=%1 %2 inneh†ller rader d„r f„ltet %3 „r tomt.';
      ExportPathGreaterThan250Err@1012 : TextConst 'ENU=The export path is longer than 250 characters.;NOR=Eksportbanen er lengre enn 250 tegn.;SVE=Exports”kv„gen „r l„ngre „n 250 tecken.';
      TAXTxt@1080001 : TextConst 'ENU=TAX;NOR=AVGIFT;SVE=Skatt';
      BusinessEnterprisesTxt@1080000 : TextConst '@@@={Locked};ENU=Foretaksregisteret;NOR=Foretaksregisteret';
      SalesReportTextLine@111280000 : Record 11071912;
      CompanyInformation@111280012 : Record 79;
      GenLedgSetup@111280014 : Record 98;
      Customer@111280011 : Record 18;
      gCredit@111280006 : Boolean;
      gNoRounding@111280001 : Boolean;
      txtReverseChargeVAT@111280003 : TextConst 'ENU=Reversed charge;SVE=Omv„nd betalningsskyldighet';
      txtNoVAT@111280002 : TextConst 'ENU=Amount without VAT;NOR=Bel›p uten moms;SVE=Belopp utan moms';
      preAssNotxt@111280005 : TextConst 'ENU=Pre-Assigned No.;NOR=Forh†ndstilordnet nr.;SVE=F”rhandstilldelat nr';
      SEUtils@111280007 : Codeunit 11128000;

    [External]
    PROCEDURE GetGeneralInfo@11(SalesHeader@1014 : Record 36;VAR ID@1010 : Text;VAR IssueDate@1009 : Text;VAR InvoiceTypeCode@1008 : Text;VAR InvoiceTypeCodeListID@1007 : Text;VAR Note@1006 : Text;VAR TaxPointDate@1005 : Text;VAR DocumentCurrencyCode@1004 : Text;VAR DocumentCurrencyCodeListID@1003 : Text;VAR TaxCurrencyCode@1002 : Text;VAR TaxCurrencyCodeListID@1001 : Text;VAR AccountingCost@1000 : Text;VAR StrippedView@1100285101 : Boolean;VAR NoRounding@1100285105 : Boolean;VAR custBuyersID@1100285104 : Boolean;VAR custAvtalID@1100285103 : Text);
    VAR
      GLSetup@1015 : Record 98;
      ServiceOrder@1100285100 : Record 11012823;
      SESetup@1100285102 : Record 11128004;
      emptyText@1100285106 : Text;
    BEGIN
      ID := SalesHeader."No.";

      // IssueDate := FORMAT(SalesHeader."Document Date",0,9);
      InvoiceTypeCode := GetInvoiceTypeCode;
      InvoiceTypeCodeListID := GetUNCL1001ListID;
      Note := '';

      GLSetup.GET;
      TaxPointDate := '';
      DocumentCurrencyCode := GetSalesDocCurrencyCode(SalesHeader);
      DocumentCurrencyCodeListID := GetISO4217ListID;
      TaxCurrencyCode := DocumentCurrencyCode;
      TaxCurrencyCodeListID := GetISO4217ListID;
      AccountingCost := '';

      //>>4PSSE

      gCredit := SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo";
      IF gCredit THEN
        InvoiceTypeCode := '381'
      ELSE
        InvoiceTypeCode := '380';

      GenLedgSetup.GET;
      Customer.GET(SalesHeader."Sell-to Customer No.");

      StrippedView := FALSE;
      IF Customer."Stripped E-Invoice" AND NOT GenLedgSetup."Norwegian Localization Active" THEN
        StrippedView := TRUE;
      NoRounding := FALSE;
      IF Customer."Stripped E-Invoice" AND GenLedgSetup."Norwegian Localization Active" THEN
        NoRounding := TRUE;
      gNoRounding := NoRounding;
      emptyText:='';
      custAvtalID := getCustAvtalID(SalesHeader,emptyText);
      custBuyersID := getCustBuyersID(SalesHeader);

      Note := GetInvoiceNote(SalesHeader);
      IssueDate := FORMAT(SalesHeader."Posting Date", 0, 9);

      CASE TRUE OF
        SalesHeader."Job No." <> '': AccountingCost := SalesHeader."Principal Reference";
        ServiceOrder.GET(SalesHeader."Service Order No."): AccountingCost := ServiceOrder."Your Reference";
        ELSE
          AccountingCost := SalesHeader."Your Reference";
      END;

      IF StrippedView AND (SalesHeader."Principal Reference" <> '') THEN
        AccountingCost := SalesHeader."Bill-to Contact";

      IF NOT SESetup.GET(SESetup."Line type"::Setup,'SVFDOCREF2', SalesHeader."Bill-to Customer No.") THEN
        SESetup."Value (bool)":=FALSE;
      IF SESetup."Value (bool)" THEN
        AccountingCost := COPYSTR(SalesHeader."Principal Reference",STRPOS(SalesHeader."Principal Reference",' ')+1);
      //<<4PSSE
    END;

    [External]
    PROCEDURE GetInvoicePeriodInfo@12(VAR StartDate@1000 : Text;VAR EndDate@1001 : Text);
    BEGIN
      StartDate := '';
      EndDate := '';
    END;

    [External]
    PROCEDURE GetOrderReferenceInfo@13(SalesHeader@1001 : Record 36;VAR OrderReferenceID@1000 : Text);
    BEGIN
      IF SalesHeader."Order No. Customer" <> '' THEN
        OrderReferenceID := SalesHeader."Order No. Customer"
      ELSE
        OrderReferenceID := SalesHeader."External Document No.";
    END;

    [External]
    PROCEDURE GetOrderReferenceInfoBIS@45(SalesHeader@1001 : Record 36;VAR OrderReferenceID@1000 : Text);
    BEGIN
      OrderReferenceID := SalesHeader."External Document No.";
      IF OrderReferenceID = '' THEN
        OrderReferenceID := SalesHeader."No.";
    END;

    [External]
    PROCEDURE GetContractDocRefInfo@14(SalesHeader@1004 : Record 36;VAR ContractDocumentReferenceID@1000 : Text;VAR DocumentTypeCode@1001 : Text;VAR ContractRefDocTypeCodeListID@1002 : Text;VAR DocumentType@1003 : Text);
    BEGIN
      ContractDocumentReferenceID := SalesHeader."No.";
      DocumentTypeCode := '';
      ContractRefDocTypeCodeListID := GetUNCL1001ListID;
      DocumentType := '';
    END;

    [External]
    PROCEDURE GetAdditionalDocRefInfo@15(VAR AdditionalDocumentReferenceID@1000 : Text;VAR AdditionalDocRefDocumentType@1001 : Text;VAR URI@1002 : Text;VAR MimeCode@1003 : Text;VAR EmbeddedDocumentBinaryObject@1004 : Text);
    BEGIN
      AdditionalDocumentReferenceID := '';
      AdditionalDocRefDocumentType := '';
      URI := '';
      MimeCode := '';
      EmbeddedDocumentBinaryObject := '';
    END;

    [External]
    PROCEDURE GetAccountingSupplierPartyInfo@16(VAR SupplierEndpointID@1005 : Text;VAR SupplierSchemeID@1006 : Text;VAR SupplierName@1007 : Text);
    BEGIN
      GetAccountingSupplierPartyInfoByFormat(SupplierEndpointID,SupplierSchemeID,SupplierName,FALSE);
    END;

    [External]
    PROCEDURE GetAccountingSupplierPartyInfoBIS@49(VAR SupplierEndpointID@1005 : Text;VAR SupplierSchemeID@1006 : Text;VAR SupplierName@1007 : Text);
    BEGIN
      GetAccountingSupplierPartyInfoByFormat(SupplierEndpointID,SupplierSchemeID,SupplierName,TRUE);
    END;

    LOCAL PROCEDURE GetAccountingSupplierPartyInfoByFormat@77(VAR SupplierEndpointID@1005 : Text;VAR SupplierSchemeID@1006 : Text;VAR SupplierName@1007 : Text;IsBISBilling@1000 : Boolean);
    VAR
      CompanyInfo@1002 : Record 79;
    BEGIN
      CompanyInfo.GET;
      IF CompanyInfo.GLN <> '' THEN BEGIN
        SupplierEndpointID := CompanyInfo.GLN;
        SupplierSchemeID := GetGLNSchemeIDByFormat(IsBISBilling);
      //>>4PSSE
      // END ELSE
      //   IF CompanyInfo."VAT Registration No." <> '' THEN BEGIN
      //     SupplierEndpointID := FormatVATRegitrationNo(CompanyInfo."VAT Registration No.",IsBISBilling);
      //     SupplierSchemeID := GetVATScheme(CompanyInfo."Country/Region Code");
      //   END;
      END;

      IF (SupplierEndpointID = '') AND (CompanyInfo."COC Registration No." <> '') THEN BEGIN
        SupplierEndpointID := DELCHR(CompanyInfo."COC Registration No.",'=',DELCHR(CompanyInfo."COC Registration No.",'=','0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'));
        IF CompanyInfo."Country/Region Code" IN ['','SE'] THEN
          SupplierSchemeID := '0007';
      END;
      IF (SupplierEndpointID = '') AND (CompanyInfo."VAT Registration No." <> '') THEN BEGIN
        SupplierEndpointID := FormatVATRegitrationNo(CompanyInfo."VAT Registration No.",IsBISBilling);
        SupplierSchemeID := GetVATScheme(CompanyInfo."Country/Region Code");
      END;
      //<<4PSSE

      SupplierName := CompanyInfo.Name;
    END;

    [External]
    PROCEDURE GetAccountingSupplierPartyPostalAddr@1(SalesHeader@1003 : Record 36;VAR StreetName@1008 : Text;VAR SupplierAdditionalStreetName@1009 : Text;VAR CityName@1010 : Text;VAR PostalZone@1011 : Text;VAR CountrySubentity@1012 : Text;VAR IdentificationCode@1013 : Text;VAR ListID@1014 : Text);
    VAR
      CompanyInfo@1002 : Record 79;
      RespCenter@1000 : Record 5714;
    BEGIN
      CompanyInfo.GET;
      IF RespCenter.GET(SalesHeader."Responsibility Center") THEN BEGIN
        CompanyInfo.Address := RespCenter.Address;
        CompanyInfo."Address 2" := RespCenter."Address 2";
        CompanyInfo.City := RespCenter.City;
        CompanyInfo."Post Code" := RespCenter."Post Code";
        CompanyInfo.County := RespCenter.County;
        CompanyInfo."Country/Region Code" := RespCenter."Country/Region Code";
        CompanyInfo."Phone No." := RespCenter."Phone No.";
        CompanyInfo."Fax No." := RespCenter."Fax No.";
      END;

      StreetName := CompanyInfo.Address;
      SupplierAdditionalStreetName := CompanyInfo."Address 2";
      CityName := CompanyInfo.City;
      PostalZone := CompanyInfo."Post Code";
      CountrySubentity := CompanyInfo.County;
      IdentificationCode := CompanyInfo."Country/Region Code";
      ListID := GetISO3166_1Alpha2;
    END;

    [External]
    PROCEDURE GetAccountingSupplierPartyTaxScheme@4(VAR CompanyID@1015 : Text;VAR CompanyIDSchemeID@1016 : Text;VAR TaxSchemeID@1017 : Text);
    VAR
      CompanyInfo@1000 : Record 79;
      IsHandled@1001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeGetAccountingSupplierPartyTaxScheme(CompanyID,CompanyIDSchemeID,TaxSchemeID,IsHandled);
      IF IsHandled THEN
        EXIT;

      CompanyInfo.GET;
      IF CompanyInfo."VAT Registration No." <> '' THEN BEGIN
        CompanyID := CompanyInfo."VAT Registration No.";
        CompanyIDSchemeID := GetVATScheme(CompanyInfo."Country/Region Code");
        TaxSchemeID := VATTxt;
      END;
    END;

    [External]
    PROCEDURE GetAccountingSupplierPartyTaxSchemeBIS@54(VAR VATAmtLine@1001 : Record 290;VAR CompanyID@1015 : Text;VAR CompanyIDSchemeID@1016 : Text;VAR TaxSchemeID@1017 : Text);
    BEGIN
      VATAmtLine.SETFILTER("Tax Category",'<>%1',GetTaxCategoryO);
      IF NOT VATAmtLine.ISEMPTY THEN
        GetAccountingSupplierPartyTaxScheme(CompanyID,CompanyIDSchemeID,TaxSchemeID);
      VATAmtLine.SETRANGE("Tax Category");
      CompanyID := DELCHR(CompanyID);
      CompanyIDSchemeID := '';
    END;

    [External]
    PROCEDURE GetAccountingSupplierPartyTaxSchemeNO@1080000(VAR CompanyID@1015 : Text;VAR CompanyIDSchemeID@1016 : Text;VAR TaxSchemeID@1017 : Text);
    BEGIN
      GenLedgSetup.GET;
      IF NOT GenLedgSetup."Norwegian Localization Active" THEN BEGIN
        CompanyID:='';
        CompanyIDSchemeID := '';
        TaxSchemeID :='';
        EXIT;
      END;

      //NAVNO
      CompanyID := BusinessEnterprisesTxt;
      CompanyIDSchemeID := '';
      TaxSchemeID := TAXTxt;
    END;

    [External]
    PROCEDURE GetAccountingSupplierPartyLegalEntity@6(VAR PartyLegalEntityRegName@1018 : Text;VAR PartyLegalEntityCompanyID@1019 : Text;VAR PartyLegalEntitySchemeID@1020 : Text;VAR SupplierRegAddrCityName@1021 : Text;VAR SupplierRegAddrCountryIdCode@1022 : Text;VAR SupplRegAddrCountryIdListId@1023 : Text);
    BEGIN
      GetAccountingSupplierPartyLegalEntityByFormat(
        PartyLegalEntityRegName,PartyLegalEntityCompanyID,PartyLegalEntitySchemeID,
        SupplierRegAddrCityName,SupplierRegAddrCountryIdCode,SupplRegAddrCountryIdListId,FALSE);
    END;

    [External]
    PROCEDURE GetAccountingSupplierPartyLegalEntityBIS@50(VAR PartyLegalEntityRegName@1018 : Text;VAR PartyLegalEntityCompanyID@1019 : Text;VAR PartyLegalEntitySchemeID@1020 : Text;VAR SupplierRegAddrCityName@1021 : Text;VAR SupplierRegAddrCountryIdCode@1022 : Text;VAR SupplRegAddrCountryIdListId@1023 : Text);
    BEGIN
      GetAccountingSupplierPartyLegalEntityByFormat(
        PartyLegalEntityRegName,PartyLegalEntityCompanyID,PartyLegalEntitySchemeID,
        SupplierRegAddrCityName,SupplierRegAddrCountryIdCode,SupplRegAddrCountryIdListId,TRUE);
    END;

    LOCAL PROCEDURE GetAccountingSupplierPartyLegalEntityByFormat@86(VAR PartyLegalEntityRegName@1018 : Text;VAR PartyLegalEntityCompanyID@1019 : Text;VAR PartyLegalEntitySchemeID@1020 : Text;VAR SupplierRegAddrCityName@1021 : Text;VAR SupplierRegAddrCountryIdCode@1022 : Text;VAR SupplRegAddrCountryIdListId@1023 : Text;IsBISBilling@1001 : Boolean);
    VAR
      CompanyInfo@1000 : Record 79;
    BEGIN
      CompanyInfo.GET;

      PartyLegalEntityCompanyID :=''; //4PSSE
      PartyLegalEntityRegName := CompanyInfo.Name;
      //**4PS.sn
      IF CompanyInfo."COC Registration No." <> '' THEN BEGIN
        PartyLegalEntityCompanyID := CompanyInfo."COC Registration No.";
        PartyLegalEntitySchemeID := '0106';
      END ELSE BEGIN
      //**4PS.en
        IF CompanyInfo.GLN <> '' THEN BEGIN
          PartyLegalEntityCompanyID := CompanyInfo.GLN;
          PartyLegalEntitySchemeID := GetGLNSchemeIDByFormat(IsBISBilling);
      //>>4PSSE
      // END ELSE
      //  IF CompanyInfo."VAT Registration No." <> '' THEN BEGIN
      //    PartyLegalEntityCompanyID := FormatVATRegitrationNo(CompanyInfo."VAT Registration No.",IsBISBilling);
      //    PartyLegalEntitySchemeID := GetVATSchemeByFormat(CompanyInfo."Country/Region Code",IsBISBilling);
      //  END;
        END;
        IF (PartyLegalEntityCompanyID = '') AND (CompanyInfo."COC Registration No." <> '') THEN BEGIN
          PartyLegalEntityCompanyID := DELCHR(CompanyInfo."COC Registration No.",'=',DELCHR(CompanyInfo."COC Registration No.",'=','0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'));
          IF CompanyInfo."Country/Region Code" IN ['','SE'] THEN
            PartyLegalEntitySchemeID := '0007';
        END;
        IF (PartyLegalEntityCompanyID = '') AND (CompanyInfo."VAT Registration No." <> '') THEN BEGIN
          PartyLegalEntityCompanyID := FormatVATRegitrationNo(CompanyInfo."VAT Registration No.",IsBISBilling);
          PartyLegalEntitySchemeID := GetVATSchemeByFormat(CompanyInfo."Country/Region Code",IsBISBilling);
        END;
      //<<4PSSE
      END; //**4PS.n

      SupplierRegAddrCityName := CompanyInfo.City;
      SupplierRegAddrCountryIdCode := CompanyInfo."Country/Region Code";
      SupplRegAddrCountryIdListId := GetISO3166_1Alpha2;
    END;

    [External]
    PROCEDURE GetAccountingSupplierPartyContact@7(SalesHeader@1003 : Record 36;VAR ContactID@1024 : Text;VAR ContactName@1025 : Text;VAR Telephone@1026 : Text;VAR Telefax@1027 : Text;VAR ElectronicMail@1028 : Text);
    VAR
      CompanyInfo@1000 : Record 79;
      Salesperson@1001 : Record 13;
      Job@111280000 : Record 11072003;
      Employee@111280001 : Record 5200;
      ServiceOrder@111280002 : Record 11012823;
      SalespersonPurchaser@111280003 : Record 13;
      SendOnBehalf@111280004 : Record 11012768;
    BEGIN
      CompanyInfo.GET;
      GetSalesperson(SalesHeader,Salesperson);
      ContactID := SalespersonTxt;
      ContactName := Salesperson.Name;
      Telephone := Salesperson."Phone No.";
      Telefax := CompanyInfo."Telex No.";
      ElectronicMail := Salesperson."E-Mail";

      //>>4PSSE
      IF Job.GET(SalesHeader."Job No.") THEN
        IF Employee.GET(Job."Project Manager") THEN
          ContactName := Employee."Full Name" + ' ' + Employee."Phone No.";
      IF ServiceOrder.GET(SalesHeader."Service Order No.") THEN
        IF SalespersonPurchaser.GET(ServiceOrder."Order Manager") THEN
          ContactName := SalespersonPurchaser.Name;

      Telephone := CompanyInfo."Phone No.";
      ElectronicMail := CompanyInfo."E-Mail";

      SendOnBehalf.SETRANGE(Usage,SendOnBehalf.Usage::"Sales Invoice");
      IF SalesHeader."Document Type"=SalesHeader."Document Type"::"Credit Memo" THEN
        SendOnBehalf.SETRANGE(Usage,SendOnBehalf.Usage::"Sales Credit Memo");
      IF SendOnBehalf.FINDFIRST THEN
        ElectronicMail := SendOnBehalf."Send On Behalf Of E-mail";

      //<<4PSSE
    END;

    [External]
    PROCEDURE GetAccountingCustomerPartyInfo@17(SalesHeader@1003 : Record 36;VAR CustomerEndpointID@1004 : Text;VAR CustomerSchemeID@1005 : Text;VAR CustomerPartyIdentificationID@1006 : Text;VAR CustomerPartyIDSchemeID@1007 : Text;VAR CustomerName@1008 : Text);
    BEGIN
      GetAccountingCustomerPartyInfoByFormat(
        SalesHeader,CustomerEndpointID,CustomerSchemeID,
        CustomerPartyIdentificationID,CustomerPartyIDSchemeID,CustomerName,FALSE);
    END;

    [External]
    PROCEDURE GetAccountingCustomerPartyInfoBIS@46(SalesHeader@1003 : Record 36;VAR CustomerEndpointID@1004 : Text;VAR CustomerSchemeID@1005 : Text;VAR CustomerPartyIdentificationID@1006 : Text;VAR CustomerPartyIDSchemeID@1007 : Text;VAR CustomerName@1008 : Text);
    BEGIN
      GetAccountingCustomerPartyInfoByFormat(
        SalesHeader,CustomerEndpointID,CustomerSchemeID,
        CustomerPartyIdentificationID,CustomerPartyIDSchemeID,CustomerName,TRUE);
    END;

    LOCAL PROCEDURE GetAccountingCustomerPartyInfoByFormat@102(SalesHeader@1003 : Record 36;VAR CustomerEndpointID@1004 : Text;VAR CustomerSchemeID@1005 : Text;VAR CustomerPartyIdentificationID@1006 : Text;VAR CustomerPartyIDSchemeID@1007 : Text;VAR CustomerName@1008 : Text;IsBISBilling@1000 : Boolean);
    VAR
      Cust@1001 : Record 18;
    BEGIN
      Cust.GET(SalesHeader."Bill-to Customer No.");
      //**4PS.sn
      IF Cust."Government ID" <> '' THEN BEGIN
        CustomerEndpointID := Cust."Government ID";
        WHILE STRLEN(CustomerEndpointID) < MAXSTRLEN(Cust."Government ID") DO
          CustomerEndpointID := '0' + CustomerEndpointID;
        CustomerSchemeID := 'NL:OIN';
      END ELSE
        IF Cust."COC Registration No." <> '' THEN BEGIN
          CustomerEndpointID := Cust."COC Registration No.";
          CustomerSchemeID := '0106';
        END ELSE BEGIN
        //**4PS.en
        IF Cust.GLN <> '' THEN BEGIN
          CustomerEndpointID := Cust.GLN;
          CustomerSchemeID := GetGLNSchemeIDByFormat(IsBISBilling);

      //>>4PPSE
      // END ELSE
      //  IF SalesHeader."VAT Registration No." <> '' THEN BEGIN
      //    CustomerEndpointID := FormatVATRegitrationNo(SalesHeader."VAT Registration No.",IsBISBilling);
      //    CustomerSchemeID := GetVATScheme(SalesHeader."Bill-to Country/Region Code");
      //  END;
      END;

      IF (CustomerEndpointID = '') AND (Cust."COC Registration No."<> '') THEN BEGIN
        CustomerEndpointID := DELCHR(Cust."COC Registration No.",'=',DELCHR(Cust."COC Registration No.",'=','0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'));
        IF Cust."Country/Region Code" IN ['','SE'] THEN
          CustomerSchemeID := '0007';
      END;
      IF (CustomerEndpointID = '') AND (Cust."VAT Registration No." <> '') THEN BEGIN
        CustomerEndpointID := FormatVATRegitrationNo(Cust."VAT Registration No.",IsBISBilling);
        CustomerSchemeID := GetVATScheme(SalesHeader."Bill-to Country/Region Code");
      END;
      IF (CustomerEndpointID = '') AND (SalesHeader."VAT Registration No." <> '') THEN BEGIN
            CustomerEndpointID := FormatVATRegitrationNo(SalesHeader."VAT Registration No.",IsBISBilling);
            CustomerSchemeID := GetVATScheme(SalesHeader."Bill-to Country/Region Code");
          END;
      //<<4PSSE
        END; //**4PS.n
      //CustomerPartyIdentificationID := Cust.GLN; //**4PS.o
      //CustomerPartyIDSchemeID := GetGLNSchemeIDByFormat(IsBISBilling); //**4PS.o
      CustomerName := SalesHeader."Bill-to Name";
    END;

    [External]
    PROCEDURE GetAccountingCustomerPartyPostalAddr@8(SalesHeader@1003 : Record 36;VAR CustomerStreetName@1009 : Text;VAR CustomerAdditionalStreetName@1010 : Text;VAR CustomerCityName@1011 : Text;VAR CustomerPostalZone@1012 : Text;VAR CustomerCountrySubentity@1013 : Text;VAR CustomerIdentificationCode@1014 : Text;VAR CustomerListID@1015 : Text);
    BEGIN
      CustomerStreetName := SalesHeader."Bill-to Address";
      CustomerAdditionalStreetName := SalesHeader."Bill-to Address 2";
      CustomerCityName := SalesHeader."Bill-to City";
      CustomerPostalZone := SalesHeader."Bill-to Post Code";
      CustomerCountrySubentity := SalesHeader."Bill-to County";
      CustomerIdentificationCode := SalesHeader."Bill-to Country/Region Code";
      CustomerListID := GetISO3166_1Alpha2;

      //>>4PPSE
      IF CustomerIdentificationCode = '' THEN BEGIN
        CompanyInformation.GET;
        CustomerIdentificationCode := CompanyInformation."Country/Region Code";
      END;
      //<<4PPSE
    END;

    [External]
    PROCEDURE GetAccountingCustomerPartyTaxScheme@20(SalesHeader@1003 : Record 36;VAR CustPartyTaxSchemeCompanyID@1017 : Text;VAR CustPartyTaxSchemeCompIDSchID@1018 : Text;VAR CustTaxSchemeID@1019 : Text);
    BEGIN
      GetAccountingCustomerPartyTaxSchemeByFormat(
        SalesHeader,CustPartyTaxSchemeCompanyID,CustPartyTaxSchemeCompIDSchID,CustTaxSchemeID,FALSE);
    END;

    [External]
    PROCEDURE GetAccountingCustomerPartyTaxSchemeBIS@63(SalesHeader@1003 : Record 36;VAR CustPartyTaxSchemeCompanyID@1017 : Text;VAR CustPartyTaxSchemeCompIDSchID@1018 : Text;VAR CustTaxSchemeID@1019 : Text);
    BEGIN
      GetAccountingCustomerPartyTaxSchemeByFormat(
        SalesHeader,CustPartyTaxSchemeCompanyID,CustPartyTaxSchemeCompIDSchID,CustTaxSchemeID,TRUE);
    END;

    LOCAL PROCEDURE GetAccountingCustomerPartyTaxSchemeByFormat@108(SalesHeader@1003 : Record 36;VAR CustPartyTaxSchemeCompanyID@1017 : Text;VAR CustPartyTaxSchemeCompIDSchID@1018 : Text;VAR CustTaxSchemeID@1019 : Text;IsBISBilling@1000 : Boolean);
    VAR
      IsHandled@1001 : Boolean;
      Customer@111280000 : Record 18;
      COCregno@111280001 : Text;
    BEGIN
      IsHandled := FALSE;
      OnBeforeGetAccountingCustomerPartyTaxSchemeByFormat(
        SalesHeader,CustPartyTaxSchemeCompanyID,CustPartyTaxSchemeCompIDSchID,CustTaxSchemeID,IsBISBilling,IsHandled);
      IF IsHandled THEN
        EXIT;

      IF SalesHeader."VAT Registration No." <> '' THEN BEGIN
        CustPartyTaxSchemeCompanyID := FormatVATRegitrationNo(SalesHeader."VAT Registration No.",IsBISBilling);
        CustPartyTaxSchemeCompIDSchID := GetVATSchemeByFormat(SalesHeader."Bill-to Country/Region Code",IsBISBilling);
        CustTaxSchemeID := VATTxt;
      END;

      //>>4PSSE
      IF CustPartyTaxSchemeCompanyID = '' THEN BEGIN
        COCregno := DELCHR(Customer."COC Registration No.",'=',DELCHR(Customer."COC Registration No.",'=','0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'));
        IF COCregno <> '' THEN BEGIN
          CustPartyTaxSchemeCompanyID := FormatVATRegitrationNo(COCregno,IsBISBilling);
          CustPartyTaxSchemeCompIDSchID := GetVATSchemeByFormat(Customer."Country/Region Code",IsBISBilling);
          IF Customer."Country/Region Code" IN ['','SE'] THEN
            CustPartyTaxSchemeCompIDSchID := '0007';
        END;
      END;
      IF CustPartyTaxSchemeCompanyID = '' THEN BEGIN
        Customer.GET(SalesHeader."Sell-to Customer No.");
        IF Customer."VAT Registration No." <> '' THEN BEGIN
          CustPartyTaxSchemeCompanyID := FormatVATRegitrationNo(Customer."VAT Registration No.",IsBISBilling);
          CustPartyTaxSchemeCompIDSchID := GetVATSchemeByFormat(Customer."Country/Region Code",IsBISBilling);
          CustTaxSchemeID := VATTxt;
        END;
      END;

      //<<4PSSE
    END;

    [External]
    PROCEDURE GetAccountingCustomerPartyLegalEntity@24(SalesHeader@1000 : Record 36;VAR CustPartyLegalEntityRegName@1020 : Text;VAR CustPartyLegalEntityCompanyID@1021 : Text;VAR CustPartyLegalEntityIDSchemeID@1022 : Text);
    BEGIN
      GetAccountingCustomerPartyLegalEntityByFormat(
        SalesHeader,CustPartyLegalEntityRegName,CustPartyLegalEntityCompanyID,CustPartyLegalEntityIDSchemeID,FALSE);
    END;

    [External]
    PROCEDURE GetAccountingCustomerPartyLegalEntityBIS@67(SalesHeader@1000 : Record 36;VAR CustPartyLegalEntityRegName@1020 : Text;VAR CustPartyLegalEntityCompanyID@1021 : Text;VAR CustPartyLegalEntityIDSchemeID@1022 : Text);
    BEGIN
      GetAccountingCustomerPartyLegalEntityByFormat(
        SalesHeader,CustPartyLegalEntityRegName,CustPartyLegalEntityCompanyID,CustPartyLegalEntityIDSchemeID,TRUE);
    END;

    LOCAL PROCEDURE GetAccountingCustomerPartyLegalEntityByFormat@115(SalesHeader@1000 : Record 36;VAR CustPartyLegalEntityRegName@1020 : Text;VAR CustPartyLegalEntityCompanyID@1021 : Text;VAR CustPartyLegalEntityIDSchemeID@1022 : Text;IsBISBilling@1001 : Boolean);
    VAR
      Customer@1002 : Record 18;
    BEGIN
      IF Customer.GET(SalesHeader."Bill-to Customer No.") THEN BEGIN
        CustPartyLegalEntityRegName := Customer.Name;
        //**4PS.sn
        IF (Customer."Government ID" <> '')  THEN BEGIN
          CustPartyLegalEntityCompanyID := Customer."Government ID";
          WHILE STRLEN(CustPartyLegalEntityCompanyID) < MAXSTRLEN(Customer."Government ID") DO
            CustPartyLegalEntityCompanyID := '0' + CustPartyLegalEntityCompanyID;
          CustPartyLegalEntityIDSchemeID := 'NL:OIN';
        END ELSE
          IF Customer."COC Registration No." <> '' THEN BEGIN
            CustPartyLegalEntityCompanyID := Customer."COC Registration No.";
            CustPartyLegalEntityIDSchemeID := '0106';
          END ELSE BEGIN
            //**4PS.en
            IF Customer.GLN <> '' THEN BEGIN
              CustPartyLegalEntityCompanyID := Customer.GLN;
              CustPartyLegalEntityIDSchemeID := GetGLNSchemeIDByFormat(IsBISBilling);
            END ELSE
              IF SalesHeader."VAT Registration No." <> '' THEN BEGIN
                CustPartyLegalEntityCompanyID := FormatVATRegitrationNo(SalesHeader."VAT Registration No.",IsBISBilling);
                CustPartyLegalEntityIDSchemeID := GetVATSchemeByFormat(SalesHeader."Bill-to Country/Region Code",IsBISBilling);
              END;
          END; //**4PS.n
      END;
    END;

    [External]
    PROCEDURE GetAccountingCustomerPartyContact@25(SalesHeader@1003 : Record 36;SalesHeaderExtension@111280002 : Record 11071868;VAR CustContactID@1023 : Text;VAR CustContactName@1024 : Text;VAR CustContactTelephone@1025 : Text;VAR CustContactTelefax@1026 : Text;VAR CustContactElectronicMail@1027 : Text);
    VAR
      Customer@1000 : Record 18;
      ShiptoAddress@111280000 : Record 222;
      ServiceOrder@111280001 : Record 11012823;
    BEGIN
      CustContactID := SalesHeader."Your Reference";
      CustContactName := SalesHeader."Bill-to Name";

      IF Customer.GET(SalesHeader."Bill-to Customer No.") THEN BEGIN
        CustContactTelephone := Customer."Phone No.";
      //>>4PPSE
      //  CustContactTelefax := Customer."Telex No.";
        CustContactTelefax := Customer."Fax No.";
      //<<4PPSE
        CustContactElectronicMail := Customer."E-Mail";
      END;

      //>>4PSSE
      CustContactName := SalesHeader."Sell-to Contact";
      CustContactTelephone := SalesHeader."Sell-to Contact Phone No.";

      CustContactElectronicMail := '';
      IF ShiptoAddress.GET(SalesHeader."Bill-to Customer No.",
                          SalesHeader."Alternative Bill-to Address") THEN
        CustContactElectronicMail := ShiptoAddress."E-Mail (Invoices)";
      IF CustContactElectronicMail = '' THEN
        CustContactElectronicMail := Customer."E-Mail (Invoices)";
      IF CustContactElectronicMail = '' THEN
        CustContactElectronicMail := SalesHeaderExtension."E-Mail (Invoices)";

      IF ServiceOrder.GET(SalesHeader."Service Order No.") THEN
        CustContactName := ServiceOrder."Contact Name";

      //<<4PSSE
    END;

    [External]
    PROCEDURE GetPayeePartyInfo@18(VAR PayeePartyID@1000 : Text;VAR PayeePartyIDSchemeID@1001 : Text;VAR PayeePartyNameName@1002 : Text;VAR PayeePartyLegalEntityCompanyID@1003 : Text;VAR PayeePartyLegalCompIDSchemeID@1004 : Text);
    VAR
      CompanyInfo@1005 : Record 79;
    BEGIN
      CompanyInfo.GET;

      PayeePartyID := CompanyInfo.GLN;
      PayeePartyIDSchemeID := GLNTxt;
      PayeePartyNameName := CompanyInfo.Name;
      PayeePartyLegalEntityCompanyID := CompanyInfo."VAT Registration No.";
      PayeePartyLegalCompIDSchemeID := GetVATScheme(CompanyInfo."Country/Region Code");
    END;

    [External]
    PROCEDURE GetTaxRepresentativePartyInfo@19(VAR TaxRepPartyNameName@1000 : Text;VAR PayeePartyTaxSchemeCompanyID@1001 : Text;VAR PayeePartyTaxSchCompIDSchemeID@1002 : Text;VAR PayeePartyTaxSchemeTaxSchemeID@1003 : Text);
    BEGIN
      TaxRepPartyNameName := '';
      PayeePartyTaxSchemeCompanyID := '';
      PayeePartyTaxSchCompIDSchemeID := '';
      PayeePartyTaxSchemeTaxSchemeID := '';
    END;

    [External]
    PROCEDURE GetDeliveryInfo@53(VAR ActualDeliveryDate@1000 : Text;VAR DeliveryID@1001 : Text;VAR DeliveryIDSchemeID@1002 : Text);
    BEGIN
      ActualDeliveryDate := '';
      DeliveryID := '';
      DeliveryIDSchemeID := '';
    END;

    [External]
    PROCEDURE GetGLNDeliveryInfo@43(SalesHeader@1000 : Record 36;VAR ActualDeliveryDate@1003 : Text;VAR DeliveryID@1001 : Text;VAR DeliveryIDSchemeID@1002 : Text);
    BEGIN
      //>>4PSSE
      // ActualDeliveryDate := FORMAT(SalesHeader."Shipment Date",0,9);

      IF SalesHeader."Shipment Date"<>0D THEN
        ActualDeliveryDate := FORMAT(SalesHeader."Shipment Date",0,9)
      ELSE
        ActualDeliveryDate := FORMAT(SalesHeader."Document Date",0,9);
      //<<4PSSE

      DeliveryID := GetGLNForHeader(SalesHeader);

      IF DeliveryID <> '' THEN
        DeliveryIDSchemeID := '0088'
      ELSE
        DeliveryIDSchemeID := '';
    END;

    [External]
    PROCEDURE GetGLNForHeader@47(SalesHeader@1000 : Record 36) : Code[13];
    VAR
      Customer@1003 : Record 18;
      ShipToAddress@1002 : Record 222;
    BEGIN
      //>>4PSSE
      IF ShipToAddress.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Alternative Bill-to Address") THEN
        IF ShipToAddress.GLN <> '' THEN
          EXIT(ShipToAddress.GLN);
      //<<4PSSE

      IF ShipToAddress.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code") THEN
        IF ShipToAddress.GLN <> '' THEN
          EXIT(ShipToAddress.GLN);
      IF Customer.GET(SalesHeader."Sell-to Customer No.") THEN
        EXIT(Customer.GLN);
      EXIT('');
    END;

    [External]
    PROCEDURE GetDeliveryAddress@33(SalesHeader@1010 : Record 36;VAR DeliveryStreetName@1003 : Text;VAR DeliveryAdditionalStreetName@1004 : Text;VAR DeliveryCityName@1005 : Text;VAR DeliveryPostalZone@1006 : Text;VAR DeliveryCountrySubentity@1007 : Text;VAR DeliveryCountryIdCode@1008 : Text;VAR DeliveryCountryListID@1009 : Text);
    VAR
      Job@111280000 : Record 11072003;
      CompanyInformation@111280001 : Record 79;
    BEGIN
      DeliveryStreetName := SalesHeader."Ship-to Address";
      DeliveryAdditionalStreetName := SalesHeader."Ship-to Address 2";
      DeliveryCityName := SalesHeader."Ship-to City";
      DeliveryPostalZone := SalesHeader."Ship-to Post Code";
      DeliveryCountrySubentity := SalesHeader."Ship-to County";
      DeliveryCountryIdCode := SalesHeader."Ship-to Country/Region Code";
      DeliveryCountryListID := GetISO3166_1Alpha2;

      //>>4PSSE
      IF SalesHeader."Job No." <> '' THEN
        IF Job.GET(SalesHeader."Job No.") THEN BEGIN
          CompanyInformation.GET;
          DeliveryStreetName := Job."Address 2";
          DeliveryAdditionalStreetName := Job.Address;
          DeliveryCityName := Job.City;
          DeliveryPostalZone := CheckValidChrs(Job."Post Code");
          DeliveryCountryIdCode := Job."Country/Region Code";
          IF DeliveryCountryIdCode = '' THEN
            DeliveryCountryIdCode:= CompanyInformation."Country/Region Code";
        END;
      //<<4PSSE
    END;

    [External]
    PROCEDURE GetPaymentMeansInfo@21(SalesHeader@1015 : Record 36;VAR PaymentMeansCode@1000 : Text;VAR PaymentMeansListID@1001 : Text;VAR PaymentDueDate@1002 : Text;VAR PaymentChannelCode@1003 : Text;VAR PaymentID@1004 : Text;VAR PrimaryAccountNumberID@1005 : Text;VAR NetworkID@1006 : Text;PaymentMeansLine@1100285100 : Integer);
    VAR
      SalesReceivablesSetup@1100285101 : Record 311;
    BEGIN
      PaymentMeansCode := PaymentMeansFundsTransferCodeTxt;
      PaymentMeansListID := GetUNCL4461ListID;
      PaymentDueDate := FORMAT(SalesHeader."Due Date",0,9);
      PaymentChannelCode := '';
      PaymentID := '';
      PrimaryAccountNumberID := '';
      NetworkID := '';

      //>>4PPSE
      CASE PaymentMeansLine OF
        1,2,4: PaymentMeansCode := '30';
        3: PaymentMeansCode := '58';
      END;

      SalesReceivablesSetup.GET;
      IF SalesReceivablesSetup."External Doc. No. as Pmt. Ref" THEN
        PaymentID := SalesHeader."External Document No."
      ELSE
        PaymentID := SalesHeader."No.";
      //<<4PPSE
    END;

    [External]
    PROCEDURE GetPaymentMeansPayeeFinancialAcc@37(VAR PayeeFinancialAccountID@1007 : Text;VAR PaymentMeansSchemeID@1008 : Text;VAR FinancialInstitutionBranchID@1009 : Text;VAR FinancialInstitutionID@1010 : Text;VAR FinancialInstitutionSchemeID@1011 : Text;VAR FinancialInstitutionName@1012 : Text;PaymentMeansLine@1100285100 : Integer);
    VAR
      CompanyInfo@1016 : Record 79;
    BEGIN
      CompanyInfo.GET;

      //>>4PPSE
      // IF CompanyInfo.IBAN <> '' THEN BEGIN
      //  PayeeFinancialAccountID := DELCHR(CompanyInfo.IBAN,'=',' ');
      //  PaymentMeansSchemeID := IBANPaymentSchemeIDTxt;
      // END ELSE
      //  IF CompanyInfo."Bank Account No." <> '' THEN BEGIN
      //    PayeeFinancialAccountID := CompanyInfo."Bank Account No.";
      //    PaymentMeansSchemeID := LocalPaymentSchemeIDTxt;
      //  END;
      //
      // FinancialInstitutionBranchID := CompanyInfo."Bank Branch No.";
      // FinancialInstitutionID := DELCHR(CompanyInfo."SWIFT Code",'=',' ');
      // FinancialInstitutionSchemeID := BICTxt;
      // FinancialInstitutionName := CompanyInfo."Bank Name";

      PayeeFinancialAccountID := '';
      PaymentMeansSchemeID := '';
      FinancialInstitutionBranchID := '';
      FinancialInstitutionID := '';
      FinancialInstitutionSchemeID := '';
      FinancialInstitutionName := '';

      CASE PaymentMeansLine OF
        1: BEGIN
              PayeeFinancialAccountID := DELCHR(CompanyInfo."Giro No.",'=',' ');
              PaymentMeansSchemeID := 'BGABSESS';
              FinancialInstitutionBranchID := 'SE:BANKGIRO';
          END;
        2: BEGIN
              PayeeFinancialAccountID := DELCHR(CompanyInfo."Plus Giro No.",'=',' ');
              PaymentMeansSchemeID := 'PGSISESS';
              FinancialInstitutionBranchID := 'SE:PLUSGIRO';
          END;
        3: BEGIN
              PayeeFinancialAccountID := DELCHR(CompanyInfo.IBAN,'=',' ');
              PaymentMeansSchemeID := IBANPaymentSchemeIDTxt;
              FinancialInstitutionID := DELCHR(CompanyInfo."SWIFT Code",'=',' ');
              FinancialInstitutionSchemeID := BICTxt;
              FinancialInstitutionBranchID := CompanyInfo."Bank Branch No.";
              FinancialInstitutionName := CompanyInfo."Bank Name";
          END;
        4: BEGIN
              PayeeFinancialAccountID := DELCHR(CompanyInfo."Bank Account No.",'=',' ');
              PaymentMeansSchemeID := LocalPaymentSchemeIDTxt;
              FinancialInstitutionID := DELCHR(CompanyInfo."SWIFT Code",'=',' ');
              FinancialInstitutionSchemeID := BICTxt;
              FinancialInstitutionBranchID := CompanyInfo."Bank Branch No.";
              FinancialInstitutionName := CompanyInfo."Bank Name";
          END;
      END;
      //>>4PPSE
    END;

    [External]
    PROCEDURE GetPaymentMeansFinancialInstitutionAddr@34(VAR FinancialInstitutionStreetName@1013 : Text;VAR AdditionalStreetName@1014 : Text;VAR FinancialInstitutionCityName@1017 : Text;VAR FinancialInstitutionPostalZone@1018 : Text;VAR FinancialInstCountrySubentity@1019 : Text;VAR FinancialInstCountryIdCode@1020 : Text;VAR FinancialInstCountryListID@1021 : Text;PaymentMeansLine@1100285100 : Integer);
    BEGIN
      FinancialInstitutionStreetName := '';
      AdditionalStreetName := '';
      FinancialInstitutionCityName := '';
      FinancialInstitutionPostalZone := '';
      FinancialInstCountrySubentity := '';
      FinancialInstCountryIdCode := '';
      FinancialInstCountryListID := '';
    END;

    [External]
    PROCEDURE GetPaymentTermsInfo@35(SalesHeader@1001 : Record 36;VAR PaymentTermsNote@1002 : Text);
    VAR
      PmtTerms@1000 : Record 3;
      FinanceChargeTerms@1100285100 : Record 5;
      Customer@1100285101 : Record 18;
    BEGIN
      IF SalesHeader."Payment Terms Code" = '' THEN
        PmtTerms.INIT
      ELSE BEGIN
        PmtTerms.GET(SalesHeader."Payment Terms Code");
        PmtTerms.TranslateDescription(PmtTerms,SalesHeader."Language Code");
      END;

      PaymentTermsNote := PmtTerms.Description;

      //>>4PPSE
      IF Customer.GET(SalesHeader."Bill-to Customer No.") THEN
        IF FinanceChargeTerms.GET(Customer."Fin. Charge Terms Code") THEN
          PaymentTermsNote += ', '+ FinanceChargeTerms.FIELDCAPTION("Interest Rate")+' '+FORMAT(FinanceChargeTerms."Interest Rate", 0, 9)+'%';
      //<<4PPSE
    END;

    [External]
    PROCEDURE GetAllowanceChargeInfo@22(VATAmtLine@1000 : Record 290;SalesHeader@1011 : Record 36;VAR ChargeIndicator@1001 : Text;VAR AllowanceChargeReasonCode@1002 : Text;VAR AllowanceChargeListID@1003 : Text;VAR AllowanceChargeReason@1004 : Text;VAR Amount@1005 : Text;VAR AllowanceChargeCurrencyID@1006 : Text;VAR TaxCategoryID@1007 : Text;VAR TaxCategorySchemeID@1008 : Text;VAR Percent@1009 : Text;VAR AllowanceChargeTaxSchemeID@1010 : Text);
    BEGIN
      IF VATAmtLine."Invoice Discount Amount" = 0 THEN BEGIN
        ChargeIndicator := '';
        EXIT;
      END;

      ChargeIndicator := 'false';
      AllowanceChargeReasonCode := AllowanceChargeReasonCodeTxt;
      AllowanceChargeListID := GetUNCL4465ListID;
      AllowanceChargeReason := InvoiceDisAmtTxt;
      Amount := FORMAT(VATAmtLine."Invoice Discount Amount",0,9);
      AllowanceChargeCurrencyID := GetSalesDocCurrencyCode(SalesHeader);
      TaxCategoryID := VATAmtLine."Tax Category";
      TaxCategorySchemeID := GetUNCL5305ListID;
      Percent := FORMAT(VATAmtLine."VAT %",0,9);
      AllowanceChargeTaxSchemeID := VATTxt;
    END;

    [External]
    PROCEDURE GetAllowanceChargeInfoBIS@51(VATAmtLine@1000 : Record 290;SalesHeader@1011 : Record 36;VAR ChargeIndicator@1001 : Text;VAR AllowanceChargeReasonCode@1002 : Text;VAR AllowanceChargeListID@1003 : Text;VAR AllowanceChargeReason@1004 : Text;VAR Amount@1005 : Text;VAR AllowanceChargeCurrencyID@1006 : Text;VAR TaxCategoryID@1007 : Text;VAR TaxCategorySchemeID@1008 : Text;VAR Percent@1009 : Text;VAR AllowanceChargeTaxSchemeID@1010 : Text);
    BEGIN
      GetAllowanceChargeInfo(
        VATAmtLine,SalesHeader,ChargeIndicator,AllowanceChargeReasonCode,AllowanceChargeListID,AllowanceChargeReason,
        Amount,AllowanceChargeCurrencyID,TaxCategoryID,TaxCategorySchemeID,Percent,AllowanceChargeTaxSchemeID);
      IF TaxCategoryID = GetTaxCategoryO THEN
        Percent := '';
    END;

    [External]
    PROCEDURE GetTaxExchangeRateInfo@32(SalesHeader@1008 : Record 36;VAR SourceCurrencyCode@1001 : Text;VAR SourceCurrencyCodeListID@1002 : Text;VAR TargetCurrencyCode@1003 : Text;VAR TargetCurrencyCodeListID@1004 : Text;VAR CalculationRate@1005 : Text;VAR MathematicOperatorCode@1006 : Text;VAR Date@1007 : Text);
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      GLSetup.GET;
      IF GLSetup."LCY Code" = GetSalesDocCurrencyCode(SalesHeader) THEN
        EXIT;

      SourceCurrencyCode := GetSalesDocCurrencyCode(SalesHeader);
      SourceCurrencyCodeListID := GetISO4217ListID;
      TargetCurrencyCode := GLSetup."LCY Code";
      TargetCurrencyCodeListID := GetISO4217ListID;
      CalculationRate := FORMAT(SalesHeader."Currency Factor",0,9);
      MathematicOperatorCode := MultiplyTxt;
      Date := FORMAT(SalesHeader."Posting Date",0,9);
    END;

    [External]
    PROCEDURE GetTaxTotalInfo@23(SalesHeader@1003 : Record 36;VAR VATAmtLine@1004 : Record 290;VAR TaxAmount@1000 : Text;VAR TaxTotalCurrencyID@1001 : Text);
    BEGIN
      VATAmtLine.CALCSUMS(VATAmtLine."VAT Amount");
      TaxAmount := FORMAT(VATAmtLine."VAT Amount",0,9);
      TaxTotalCurrencyID := GetSalesDocCurrencyCode(SalesHeader);
    END;

    [External]
    PROCEDURE GetTaxSubtotalInfo@89(VATAmtLine@1010 : Record 290;SalesHeader@1012 : Record 36;VAR TaxableAmount@1000 : Text;VAR TaxAmountCurrencyID@1001 : Text;VAR SubtotalTaxAmount@1002 : Text;VAR TaxSubtotalCurrencyID@1003 : Text;VAR TransactionCurrencyTaxAmount@1004 : Text;VAR TransCurrTaxAmtCurrencyID@1005 : Text;VAR TaxTotalTaxCategoryID@1006 : Text;VAR schemeID@1007 : Text;VAR TaxCategoryPercent@1008 : Text;VAR TaxTotalTaxSchemeID@1009 : Text);
    VAR
      GLSetup@1011 : Record 98;
    BEGIN
      TaxableAmount := FORMAT(VATAmtLine."VAT Base",0,9);
      TaxAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);
      SubtotalTaxAmount := FORMAT(VATAmtLine."VAT Amount",0,9);
      TaxSubtotalCurrencyID := GetSalesDocCurrencyCode(SalesHeader);
      GLSetup.GET;
      IF GLSetup."LCY Code" <> GetSalesDocCurrencyCode(SalesHeader) THEN BEGIN
        TransactionCurrencyTaxAmount :=
          FORMAT(
            VATAmtLine.GetAmountLCY(
              SalesHeader."Posting Date",
              GetSalesDocCurrencyCode(SalesHeader),
              SalesHeader."Currency Factor",TRUE),0,9);
        TransCurrTaxAmtCurrencyID := GLSetup."LCY Code";
      END;
      TaxTotalTaxCategoryID := VATAmtLine."Tax Category";
      schemeID := GetUNCL5305ListID;
      TaxCategoryPercent := FORMAT(VATAmtLine."VAT %",0,9);
      TaxTotalTaxSchemeID := VATTxt;
    END;

    [External]
    PROCEDURE GetLegalMonetaryInfo@64(SalesHeader@1019 : Record 36;VAR VATAmtLine@1020 : Record 290;VAR LineExtensionAmount@1000 : Text;VAR LegalMonetaryTotalCurrencyID@1001 : Text;VAR TaxExclusiveAmount@1002 : Text;VAR TaxExclusiveAmountCurrencyID@1003 : Text;VAR TaxInclusiveAmount@1004 : Text;VAR TaxInclusiveAmountCurrencyID@1005 : Text;VAR AllowanceTotalAmount@1006 : Text;VAR AllowanceTotalAmountCurrencyID@1007 : Text;VAR ChargeTotalAmount@1008 : Text;VAR ChargeTotalAmountCurrencyID@1009 : Text;VAR PrepaidAmount@1010 : Text;VAR PrepaidCurrencyID@1011 : Text;VAR PayableRoundingAmount@1012 : Text;VAR PayableRndingAmountCurrencyID@1013 : Text;VAR PayableAmount@1014 : Text;VAR PayableAmountCurrencyID@1015 : Text);
    BEGIN
      VATAmtLine.RESET;
      VATAmtLine.CALCSUMS("Line Amount","VAT Base","Amount Including VAT","Invoice Discount Amount");

      LineExtensionAmount := FORMAT(ROUND(VATAmtLine."VAT Base",0.01) + ROUND(VATAmtLine."Invoice Discount Amount",0.01),0,9);
      LegalMonetaryTotalCurrencyID := GetSalesDocCurrencyCode(SalesHeader);

      TaxExclusiveAmount := FORMAT(ROUND(VATAmtLine."VAT Base",0.01),0,9);
      TaxExclusiveAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);

      TaxInclusiveAmount := FORMAT(ROUND(VATAmtLine."Amount Including VAT",0.01,'>'),0,9); // Should be two decimal places
      TaxInclusiveAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);

      AllowanceTotalAmount := FORMAT(ROUND(VATAmtLine."Invoice Discount Amount",0.01),0,9);
      AllowanceTotalAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);
      TaxInclusiveAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);

      ChargeTotalAmount := '';
      ChargeTotalAmountCurrencyID := '';

      PrepaidAmount := '0.00';
      PrepaidCurrencyID := GetSalesDocCurrencyCode(SalesHeader);

      PayableRoundingAmount :=
        FORMAT(VATAmtLine."Amount Including VAT" - ROUND(VATAmtLine."Amount Including VAT",0.01),0,9);
      PayableRndingAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);

      PayableAmount := FORMAT(ROUND(VATAmtLine."Amount Including VAT",0.01),0,9);
      PayableAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);
    END;

    [External]
    PROCEDURE GetLineGeneralInfo@65(SalesLine@1009 : Record 37;SalesHeader@1010 : Record 36;VAR InvoiceLineID@1001 : Text;VAR InvoiceLineNote@1002 : Text;VAR InvoicedQuantity@1003 : Text;VAR InvoiceLineExtensionAmount@1006 : Text;VAR LineExtensionAmountCurrencyID@1007 : Text;VAR InvoiceLineAccountingCost@1008 : Text;SalesLines@111280000 : Boolean;ReportLinesBefore@111280001 : Boolean;ReportLinesAfter@111280002 : Boolean;ShowDiscount@111280003 : Boolean);
    VAR
      Job@111280004 : Record 11072003;
      ServiceOrder@111280005 : Record 11012823;
      Svefakturasettings@1100285100 : Record 11128035;
    BEGIN
      // InvoiceLineID := FORMAT(SalesLine."Line No.",0,9);
      InvoiceLineNote := FORMAT(SalesLine.Type);
      // InvoicedQuantity := FORMAT(SalesLine.Quantity,0,9);
      // InvoiceLineExtensionAmount := FORMAT(SalesLine."Line Amount",0,9);
      LineExtensionAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);
      InvoiceLineAccountingCost := '';

      //>>4PPSE
      IF NOT Svefakturasettings.GET THEN
        Svefakturasettings.INIT;

      //InvoicedQuantity
      IF SalesLines THEN
        InvoiceLineID := FORMAT(SalesLine."Line No.", 0, 9);
      IF ReportLinesBefore OR ReportLinesAfter THEN
        InvoiceLineID := FORMAT(SalesReportTextLine."Line No.", 0, 9);
      IF SalesLines THEN BEGIN
        InvoicedQuantity := FORMAT(SalesLine.Quantity, 0, 9);
        IF (SalesLine.Quantity > 0) AND (SalesLine."Line Amount" < 0) THEN
          InvoicedQuantity := FORMAT(-SalesLine.Quantity, 0, 9);
      END;
      IF ReportLinesBefore OR ReportLinesAfter THEN
        InvoicedQuantity := '0';

      //InvoiceLineExtensionAmount
      InvoiceLineExtensionAmount := '0';
      IF SalesLines THEN BEGIN
        IF gNoRounding THEN BEGIN
          //>> 161014 ITERO.AC IME484 Just write a plain "0" for header lines in Norwegian EFH invoices
          IF SalesLine.MARK THEN
            InvoiceLineExtensionAmount := '0'
          ELSE
            InvoiceLineExtensionAmount := FORMAT(SalesLine."Line Amount", 0, 9);
          //<< 161014 ITERO.AC IME484 Bugfix
        END ELSE
          InvoiceLineExtensionAmount := FORMAT(ROUND(SalesLine."Line Amount", 0.01, '='), 0, 9);
      END;

      //InvoiceLineNote

      //<< 160919 ITERO.AC IME484
      // IF SalesLine.MARK AND (NOT gNoRounding) THEN
      //  currXMLport.SKIP;
      //<< 161014 ITERO.AC IME484

      InvoiceLineNote := '';
      IF (NOT SalesLine.MARK) OR gNoRounding THEN BEGIN
        IF SalesLines AND ShowDiscount THEN BEGIN
          CASE TRUE OF
            SalesLine."Line Discount %" <> 0:
              InvoiceLineNote := '[percent:-' + FORMAT(ABS(ROUND(SalesLine."Line Discount %", 0.01, '='))) + ']';
            SalesLine."Surcharge %" <> 0:
              InvoiceLineNote := '[percent:' + FORMAT(ABS(ROUND(SalesLine."Surcharge %", 0.01, '='))) + ']';
          END;
        END;
      END;

      IF Svefakturasettings."LineNote ShipmentDate" AND (SalesHeader."Shipment Date" <> 0D) THEN
        InvoiceLineNote := addCRLF2Text(InvoiceLineNote,STRSUBSTNO('%1 %2',SalesHeader.FIELDCAPTION("Shipment Date"),SalesHeader."Shipment Date"),TRUE);

      IF Svefakturasettings."LineNote Job" AND (SalesLine."Job No." <> '') THEN BEGIN
        IF Job.GET(SalesLine."Job No.") THEN
          InvoiceLineNote := addCRLF2Text(InvoiceLineNote,STRSUBSTNO('%1 %2',SalesLine.FIELDCAPTION("Job No."),SalesLine."Job No.") +' '+ Job.Description,TRUE);
      END;
      IF Svefakturasettings."LineNote ServiceOrder" AND (SalesLine."Service Order No." <> '') AND (SalesLine."Execution Date"<>0D) THEN BEGIN
        IF ServiceOrder.GET(SalesLine."Service Order No.") THEN
          InvoiceLineNote := addCRLF2Text(InvoiceLineNote,SalesLine."Service Order No." +', '+ ServiceOrder.Description +', '+ SalesLine."Object No." +', '+ FORMAT(SalesLine."Execution Date"),TRUE);
      END;

      //<<4PSSE
    END;

    [External]
    PROCEDURE GetLineUnitCodeInfo@39(SalesLine@1009 : Record 37;VAR unitCode@1004 : Text;VAR unitCodeListID@1005 : Text;SalesLines@111280000 : Boolean);
    VAR
      UOM@1000 : Record 204;
    BEGIN
      unitCode := '';
      unitCodeListID := GetUNECERec20ListID;

      //>>4PSSE
      IF NOT SalesLines THEN
        EXIT;
      //<<4PSSE

      IF SalesLine.Quantity = 0 THEN BEGIN
        unitCode := UoMforPieceINUNECERec20ListIDTxt; // unitCode is required
        EXIT;
      END;

      WITH SalesLine DO
        CASE Type OF
          Type::Item,Type::Resource:
            BEGIN
              IF UOM.GET("Unit of Measure Code") THEN
                unitCode := UOM."International Standard Code"
              ELSE
                ERROR(NoUnitOfMeasureErr,"Document Type","Document No.",FIELDCAPTION("Unit of Measure Code"));
            END;
          Type::"G/L Account",Type::"Fixed Asset",Type::"Charge (Item)":
            BEGIN
              IF UOM.GET("Unit of Measure Code") THEN
                unitCode := UOM."International Standard Code"
              ELSE
                unitCode := UoMforPieceINUNECERec20ListIDTxt;
            END;
        END;
    END;

    [External]
    PROCEDURE GetLineInvoicePeriodInfo@26(VAR InvLineInvoicePeriodStartDate@1000 : Text;VAR InvLineInvoicePeriodEndDate@1001 : Text);
    BEGIN
      InvLineInvoicePeriodStartDate := '';
      InvLineInvoicePeriodEndDate := '';
    END;

    [External]
    PROCEDURE GetLineOrderLineRefInfo@27();
    BEGIN
    END;

    [External]
    PROCEDURE GetLineDeliveryInfo@28(VAR InvoiceLineActualDeliveryDate@1000 : Text;VAR InvoiceLineDeliveryID@1001 : Text;VAR InvoiceLineDeliveryIDSchemeID@1002 : Text);
    BEGIN
      InvoiceLineActualDeliveryDate := '';
      InvoiceLineDeliveryID := '';
      InvoiceLineDeliveryIDSchemeID := '';
    END;

    [External]
    PROCEDURE GetLineDeliveryPostalAddr@36(VAR InvoiceLineDeliveryStreetName@1003 : Text;VAR InvLineDeliveryAddStreetName@1004 : Text;VAR InvoiceLineDeliveryCityName@1005 : Text;VAR InvoiceLineDeliveryPostalZone@1006 : Text;VAR InvLnDeliveryCountrySubentity@1007 : Text;VAR InvLnDeliveryCountryIdCode@1008 : Text;VAR InvLineDeliveryCountryListID@1009 : Text);
    BEGIN
      InvoiceLineDeliveryStreetName := '';
      InvLineDeliveryAddStreetName := '';
      InvoiceLineDeliveryCityName := '';
      InvoiceLineDeliveryPostalZone := '';
      InvLnDeliveryCountrySubentity := '';
      InvLnDeliveryCountryIdCode := '';
      InvLineDeliveryCountryListID := GetISO3166_1Alpha2;
    END;

    [External]
    PROCEDURE GetLineAllowanceChargeInfo@29(SalesLine@1004 : Record 37;SalesHeader@1005 : Record 36;VAR InvLnAllowanceChargeIndicator@1000 : Text;VAR InvLnAllowanceChargeReason@1001 : Text;VAR InvLnAllowanceChargeAmount@1002 : Text;VAR InvLnAllowanceChargeAmtCurrID@1003 : Text;SalesLines@111280000 : Boolean;ShowDiscount@111280001 : Boolean;VAR AllowanceChargeOnLine@111280004 : Decimal);
    VAR
      varDec@111280003 : Decimal;
    BEGIN
      InvLnAllowanceChargeIndicator := '';
      InvLnAllowanceChargeReason := '';
      InvLnAllowanceChargeAmount := '';
      InvLnAllowanceChargeAmtCurrID := '';
      IF SalesLine."Line Discount Amount" = 0 THEN
        EXIT;

      //>>4PSSE
      IF SalesLine.MARK THEN
        EXIT;

      // InvLnAllowanceChargeIndicator := 'false';
      // InvLnAllowanceChargeReason := LineDisAmtTxt;
      // InvLnAllowanceChargeAmount := FORMAT(SalesLine."Line Discount Amount",0,9);
      //<<4PSSE
      InvLnAllowanceChargeAmtCurrID := GetSalesDocCurrencyCode(SalesHeader);


      //>>4PSSE
      InvLnAllowanceChargeIndicator := 'false';
      IF SalesLine."Line Discount %" <> 0 THEN BEGIN
        InvLnAllowanceChargeIndicator := 'false';
        IF SalesLine.Amount < 0 THEN
          InvLnAllowanceChargeIndicator := 'true'
      END
      ELSE
        IF SalesLine."Surcharge %" <> 0 THEN BEGIN
          InvLnAllowanceChargeIndicator := 'true';
          IF SalesLine.Amount < 0 THEN
            InvLnAllowanceChargeIndicator := 'false'
        END;
      //Villkor h„r

      InvLnAllowanceChargeAmount := '0';
      AllowanceChargeOnLine := 0;
      IF SalesLine."Line Discount %" <> 0 THEN
        AllowanceChargeOnLine := ABS(SalesLine."Line Discount %" / 100 * SalesLine."Unit Price" * SalesLine.Quantity)
      ELSE IF SalesLine."Surcharge %" <> 0 THEN
        //IF SalesLine."Surcharge Amount" > 0 THEN //190521
        IF SalesLine."Surcharge Amount (FCY)" <> 0 THEN //190521
          AllowanceChargeOnLine := ABS(SalesLine.Amount - ((SalesLine."Unit Price" - SalesLine."Surcharge Amount (FCY)") * SalesLine.Quantity))
        ELSE
          AllowanceChargeOnLine := ABS(SalesLine.Amount - (SalesLine."Unit Price" * SalesLine.Quantity));

      IF NOT gNoRounding THEN
        AllowanceChargeOnLine := ROUND(AllowanceChargeOnLine, 0.01, '=');
      InvLnAllowanceChargeAmount := FORMAT(AllowanceChargeOnLine, 0, 9);
      IF InvLnAllowanceChargeIndicator = 'false' THEN
        AllowanceChargeOnLine := -AllowanceChargeOnLine;

      IF AllowanceChargeOnLine = 0 THEN BEGIN
        InvLnAllowanceChargeIndicator := '';
        InvLnAllowanceChargeReason := '';
        InvLnAllowanceChargeAmount := '';
        InvLnAllowanceChargeAmtCurrID := '';
        EXIT;
      END;

      IF SalesLine."Line Discount %" <> 0 THEN
        varDec := SalesLine.Amount - AllowanceChargeOnLine
      ELSE
        varDec:= (SalesLine."Unit Price" - SalesLine."Surcharge Amount (FCY)") * SalesLine.Quantity;

      IF gNoRounding THEN
        InvLnAllowanceChargeAmount := FORMAT(varDec, 0, 9)
      ELSE
        InvLnAllowanceChargeAmount := FORMAT(ROUND(varDec , 0.01, '='), 0, 9);

      IF (NOT SalesLine.MARK) OR gNoRounding THEN BEGIN
        IF SalesLines AND ShowDiscount THEN BEGIN
          CASE TRUE OF
            SalesLine."Line Discount %" <> 0:
              InvLnAllowanceChargeReason := '[percent:-' + FORMAT(ABS(ROUND(SalesLine."Line Discount %", 0.01, '='))) + ']';
            SalesLine."Surcharge %" <> 0:
              InvLnAllowanceChargeReason := '[percent:' + FORMAT(ABS(ROUND(SalesLine."Surcharge %", 0.01, '='))) + ']';
          END;
        END;
      END;
      //<<4PSSE
    END;

    [External]
    PROCEDURE GetLineTaxTotal@81(SalesLine@1002 : Record 37;SalesHeader@1003 : Record 36;VAR InvoiceLineTaxAmount@1000 : Text;VAR currencyID@1001 : Text);
    BEGIN
      InvoiceLineTaxAmount := FORMAT(SalesLine."Amount Including VAT" - SalesLine.Amount,0,9);
      currencyID := GetSalesDocCurrencyCode(SalesHeader);
    END;

    [External]
    PROCEDURE GetLineItemInfo@30(SalesHeader@1100285101 : Record 36;SalesLine@1011 : Record 37;VAR Description@1000 : Text;VAR Name@1001 : Text;VAR SellersItemIdentificationID@1002 : Text;VAR StandardItemIdentificationID@1003 : Text;VAR StdItemIdIDSchemeID@1004 : Text;VAR OriginCountryIdCode@1005 : Text;VAR OriginCountryIdCodeListID@1006 : Text;SalesLines@111280000 : Boolean;ReportLinesBefore@111280003 : Boolean;ReportLinesAfter@111280004 : Boolean;HideItemNo@1100285100 : Boolean);
    VAR
      Item@1007 : Record 27;
      TradeItem@1100528500 : Record 11012317;
      WageDesc@111280002 : Text;
      ProjectCostPlusEntry@111280001 : Record 11012019;
    BEGIN
      Name := SalesLine.Description;
      Description := SalesLine."Description 2";

      //**4PS.so
      //IF (SalesLine.Type = SalesLine.Type::Item) AND Item.GET(SalesLine."No.") THEN BEGIN
      //  SellersItemIdentificationID := SalesLine."No.";
      //**4PS.en
      //**4PS.sn
      IF (SalesLine."Trade Item" <> '') AND TradeItem.GET(SalesLine."Vendor (Trade Item)",SalesLine."Trade Item") THEN BEGIN
        SellersItemIdentificationID := SalesLine."Trade Item";
        StandardItemIdentificationID := TradeItem."GTIN Code (Item)";
        StdItemIdIDSchemeID := GTINTxt;
      END ELSE
        IF (SalesLine."Item No." <> '') AND Item.GET(SalesLine."Item No.") THEN BEGIN
          SellersItemIdentificationID := SalesLine."Item No.";
      //**4PS.en
          StandardItemIdentificationID := Item.GTIN;
          StdItemIdIDSchemeID := GTINTxt;
        END ELSE BEGIN
          SellersItemIdentificationID := '';
          StandardItemIdentificationID := '';
          StdItemIdIDSchemeID := '';
        END;

      OriginCountryIdCode := '';
      OriginCountryIdCodeListID := '';
      IF SalesLine.Type <> SalesLine.Type::" " THEN
        OriginCountryIdCodeListID := GetISO3166_1Alpha2;

      //>>4PSSE
      IF SalesLines THEN BEGIN
        Description := SalesLine.Description + SalesLine."Description 2";    // 161014 ITERO.AC IME484 Bugfix if text exceeds 50 chars
        WageDesc := '';
        IF ProjectCostPlusEntry.GET(SalesLine."Job No.", SalesLine."Sell-to Customer No.", SalesLine."Commission No.", SalesLine."Settl.Sheet No.", SalesLine."Cost Plus Line No.") THEN BEGIN
          ProjectCostPlusEntry.CALCFIELDS("Cost Type");
          IF ProjectCostPlusEntry."Cost Type"=ProjectCostPlusEntry."Cost Type"::Labor THEN BEGIN
            IF ProjectCostPlusEntry."Wage Component"<>'' THEN BEGIN
              ProjectCostPlusEntry.CALCFIELDS("Description Wage Component");
              WageDesc := '-' + ProjectCostPlusEntry."Description Wage Component";
            END;
          END;
        END;
        Description += WageDesc;
      END ELSE BEGIN
        IF ReportLinesBefore THEN
          Description := '* ' + DeleteHTML(SalesReportTextLine.Text);
        IF ReportLinesAfter THEN
          Description := '** ' + DeleteHTML(SalesReportTextLine.Text);
      END;

      AdjSalesInvoiceLineDescPublisher(SalesHeader,SalesLine,Description);
      //<<4PSSE
    END;

    [External]
    PROCEDURE GetLineItemCommodityClassficationInfo@61(VAR CommodityCode@1007 : Text;VAR CommodityCodeListID@1006 : Text;VAR ItemClassificationCode@1005 : Text;VAR ItemClassificationCodeListID@1004 : Text);
    BEGIN
      CommodityCode := '';
      CommodityCodeListID := '';

      ItemClassificationCode := '';
      ItemClassificationCodeListID := '';
    END;

    [External]
    PROCEDURE GetLineItemClassfiedTaxCategory@40(SalesLine@1004 : Record 37;VAR ClassifiedTaxCategoryID@1003 : Text;VAR ItemSchemeID@1002 : Text;VAR InvoiceLineTaxPercent@1001 : Text;VAR ClassifiedTaxCategorySchemeID@1000 : Text);
    VAR
      VATPostingSetup@1005 : Record 325;
    BEGIN
      IF VATPostingSetup.GET(SalesLine."VAT Bus. Posting Group",SalesLine."VAT Prod. Posting Group") THEN
        ClassifiedTaxCategoryID := VATPostingSetup."Tax Category";
      ItemSchemeID := GetUNCL5305ListID;
      InvoiceLineTaxPercent := FORMAT(SalesLine."VAT %",0,9);
      ClassifiedTaxCategorySchemeID := VATTxt;

      //TODO
      // IF VATPostingSetup."Print as Construct VAT" THEN BEGIN
      //  VATCalcType -=10;
      //  VATCalcTypeText := FakturaTextConstrVAT;
      // END;
    END;

    [External]
    PROCEDURE GetLineItemClassfiedTaxCategoryBIS@55(SalesLine@1004 : Record 37;VAR ClassifiedTaxCategoryID@1003 : Text;VAR ItemSchemeID@1002 : Text;VAR InvoiceLineTaxPercent@1001 : Text;VAR ClassifiedTaxCategorySchemeID@1000 : Text;SalesLines@111280000 : Boolean);
    BEGIN
      GetLineItemClassfiedTaxCategory(
        SalesLine,ClassifiedTaxCategoryID,ItemSchemeID,InvoiceLineTaxPercent,ClassifiedTaxCategorySchemeID);
      IF ClassifiedTaxCategoryID = GetTaxCategoryO THEN
        InvoiceLineTaxPercent := '';

      //>>4PSSE
      IF SalesLine.Type = SalesLine.Type::" " THEN
        ClassifiedTaxCategoryID := 'Z';

      // //TODO
      // // //>>190805
      // // VATCalcType := SalesLine."VAT Calculation Type";
      // // VATCalcTypeText := FORMAT(SalesLine."VAT Calculation Type");
      // //  IF VATPostingSetup.GET(SalesLine."VAT Bus. Posting Group",SalesLine."VAT Prod. Posting Group") THEN
      // //   IF VATPostingSetup."Print as Construct VAT" THEN BEGIN
      // //     VATCalcType -=10;
      // //     VATCalcTypeText := FakturaTextConstrVAT;
      // //   END;
      // // //<<190805
      //<<4PSSE
    END;

    [External]
    PROCEDURE GetLineAdditionalItemPropertyInfo@97(SalesLine@1003 : Record 37;VAR AdditionalItemPropertyName@1001 : Text;VAR AdditionalItemPropertyValue@1002 : Text);
    VAR
      ItemVariant@1000 : Record 5401;
    BEGIN
      AdditionalItemPropertyName := '';
      AdditionalItemPropertyValue := '';

      IF SalesLine.Type <> SalesLine.Type::Item THEN
        EXIT;
      IF SalesLine."No." = '' THEN
        EXIT;
      IF NOT ItemVariant.GET(SalesLine."No.",SalesLine."Variant Code") THEN
        EXIT;

      AdditionalItemPropertyName := ItemVariant.Code;
      AdditionalItemPropertyValue := ItemVariant.Description;
    END;

    [External]
    PROCEDURE GetLinePriceInfo@31(SalesLine@1003 : Record 37;SalesHeader@1004 : Record 36;VAR InvoiceLinePriceAmount@1000 : Text;VAR InvLinePriceAmountCurrencyID@1001 : Text;VAR BaseQuantity@1002 : Text;VAR UnitCode@1005 : Text;SalesLines@111280000 : Boolean;ShowDiscount@111280005 : Boolean;AllowanceChargeOnLine@111280003 : Decimal);
    VAR
      unitCodeListID@1006 : Text;
      DivQuantity@111280001 : Decimal;
      PriceDec@111280004 : Decimal;
      lvPrecision@111280002 : Decimal;
    BEGIN
      //IF SalesHeader."Prices Including VAT" THEN BEGIN
      //  VATBaseIdx := 1 + SalesLine."VAT %" / 100;
      //  InvoiceLinePriceAmount := FORMAT(ROUND(SalesLine."Unit Price" / VATBaseIdx),0,9)
      //END ELSE
      // InvoiceLinePriceAmount := FORMAT(SalesLine."Unit Price",0,9);
      InvLinePriceAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);
      BaseQuantity := '1';
      GetLineUnitCodeInfo(SalesLine,UnitCode,unitCodeListID,TRUE);

      //>>4PSSE
      IF SalesLines THEN BEGIN
        DivQuantity := SalesLine.Quantity;
        IF DivQuantity = 0 THEN
          DivQuantity := 1;
        //Krav 8 i ML. Enhetspris skall kunna hanteras med upp till 4 decimaler
        lvPrecision := GetPrecisionForEFHInvoice(DivQuantity, SalesLine.Amount, AllowanceChargeOnLine,4);

        PriceDec := ABS((SalesLine.Amount - AllowanceChargeOnLine) / DivQuantity);
        IF PriceDec = 0 THEN BEGIN // There was no Total amount
          IF NOT ShowDiscount THEN
            PriceDec := ROUND(SalesLine."Unit Price" - SalesLine."Line Discount %" / 100 * SalesLine."Unit Price", lvPrecision, '=');
          IF ShowDiscount THEN BEGIN
            IF (SalesLine."Surcharge Amount (LCY)" > 0) THEN
              PriceDec := ROUND(SalesLine."Unit Price" - SalesLine."Surcharge Amount (LCY)", lvPrecision, '=')
            ELSE
              PriceDec := ROUND(SalesLine."Unit Price", lvPrecision, '=');
          END;
        END;
        IF gNoRounding THEN BEGIN
          lvPrecision := GetPrecisionForEFHInvoice(DivQuantity, SalesLine.Amount, AllowanceChargeOnLine,20);
          PriceDec := ROUND(PriceDec, lvPrecision, '=');
        END ELSE BEGIN
          PriceDec := ROUND(PriceDec, lvPrecision, '=');
        END;
        InvoiceLinePriceAmount := FORMAT(ABS(PriceDec), 0, 9);
      END ELSE BEGIN
        InvoiceLinePriceAmount := '0';
      END;
      //<<4PSSE
    END;

    [External]
    PROCEDURE GetLinePriceAllowanceChargeInfo@90(VAR PriceChargeIndicator@1000 : Text;VAR PriceAllowanceChargeAmount@1001 : Text;VAR PriceAllowanceAmountCurrencyID@1002 : Text;VAR PriceAllowanceChargeBaseAmount@1003 : Text;VAR PriceAllowChargeBaseAmtCurrID@1004 : Text);
    BEGIN
      PriceChargeIndicator := '';
      PriceAllowanceChargeAmount := '';
      PriceAllowanceAmountCurrencyID := '';
      PriceAllowanceChargeBaseAmount := '';
      PriceAllowChargeBaseAmtCurrID := '';
    END;

    LOCAL PROCEDURE GetSalesDocCurrencyCode@3(SalesHeader@1000 : Record 36) : Code[10];
    VAR
      GLSetup@1001 : Record 98;
    BEGIN
      IF SalesHeader."Currency Code" = '' THEN BEGIN
        GLSetup.GET;
        GLSetup.TESTFIELD("LCY Code");
        EXIT(GLSetup."LCY Code");
      END;
      EXIT(SalesHeader."Currency Code");
    END;

    LOCAL PROCEDURE GetSalesperson@1170000002(SalesHeader@1001 : Record 36;VAR Salesperson@1000 : Record 13);
    BEGIN
      IF SalesHeader."Salesperson Code" = '' THEN
        Salesperson.INIT
      ELSE
        Salesperson.GET(SalesHeader."Salesperson Code");
    END;

    [External]
    PROCEDURE GetCrMemoBillingReferenceInfo@5(SalesCrMemoHeader@1005 : Record 114;VAR InvoiceDocRefID@1003 : Text;VAR InvoiceDocRefIssueDate@1004 : Text);
    VAR
      SalesInvoiceHeader@1000 : Record 112;
    BEGIN
      IF (SalesCrMemoHeader."Applies-to Doc. Type" = SalesCrMemoHeader."Applies-to Doc. Type"::Invoice) AND
         SalesInvoiceHeader.GET(SalesCrMemoHeader."Applies-to Doc. No.")
      THEN BEGIN
        InvoiceDocRefID := SalesInvoiceHeader."No.";
        InvoiceDocRefIssueDate := FORMAT(SalesInvoiceHeader."Posting Date",0,9);
      END;
    END;

    [External]
    PROCEDURE GetTotals@1170000009(SalesLine@1000 : Record 37;VAR VATAmtLine@1007 : Record 290);
    VAR
      VATPostingSetup@1001 : Record 325;
    BEGIN
      IF NOT VATPostingSetup.GET(SalesLine."VAT Bus. Posting Group",SalesLine."VAT Prod. Posting Group") THEN
        VATPostingSetup.INIT;
      WITH VATAmtLine DO BEGIN
        INIT;
        "VAT Identifier" := VATPostingSetup."VAT Identifier";
        "VAT Calculation Type" := SalesLine."VAT Calculation Type";
        "Tax Group Code" := SalesLine."Tax Group Code";
        "Tax Category" := VATPostingSetup."Tax Category";
        "VAT %" := SalesLine."VAT %";
        "VAT Base" := SalesLine.Amount;
        "Amount Including VAT" := SalesLine."Amount Including VAT";
        "Line Amount" := SalesLine."Line Amount";
        IF SalesLine."Allow Invoice Disc." THEN
          "Inv. Disc. Base Amount" := SalesLine."Line Amount";
        "Invoice Discount Amount" := SalesLine."Inv. Discount Amount";
        InsertLine;
      END;
    END;

    PROCEDURE GetTaxCategories@56(SalesLine@1000 : Record 37;VAR VATProductPostingGroupCategory@1007 : Record 324);
    VAR
      VATPostingSetup@1001 : Record 325;
      VATProductPostingGroup@1002 : Record 324;
    BEGIN
      IF NOT VATPostingSetup.GET(SalesLine."VAT Bus. Posting Group",SalesLine."VAT Prod. Posting Group") THEN
        VATPostingSetup.INIT;
      IF NOT VATProductPostingGroup.GET(SalesLine."VAT Prod. Posting Group") THEN
        VATProductPostingGroup.INIT;

      VATProductPostingGroupCategory.INIT;
      VATProductPostingGroupCategory.Code := VATPostingSetup."Tax Category";
      VATProductPostingGroupCategory.Description := VATProductPostingGroup.Description;
      IF VATProductPostingGroupCategory.INSERT THEN;
    END;

    PROCEDURE GetTaxExemptionReason@59(VAR VATProductPostingGroupCategory@1000 : Record 324;VAR TaxExemptionReasonTxt@1002 : Text;TaxCategoryID@1001 : Text);
    BEGIN
      TaxExemptionReasonTxt := '';      //4PSSE
      IF NOT (TaxCategoryID IN [GetTaxCategoryE,GetTaxCategoryG,GetTaxCategoryK,GetTaxCategoryO,GetTaxCategoryAE]) THEN
        EXIT;
      IF VATProductPostingGroupCategory.GET(TaxCategoryID) THEN
        TaxExemptionReasonTxt := VATProductPostingGroupCategory.Description;
    END;

    LOCAL PROCEDURE GetInvoiceTypeCode@2() : Text;
    BEGIN
      EXIT('380');
    END;

    LOCAL PROCEDURE GetUNCL1001ListID@95() : Text;
    BEGIN
      EXIT('UNCL1001');
    END;

    LOCAL PROCEDURE GetISO4217ListID@101() : Text;
    BEGIN
      EXIT('ISO4217');
    END;

    LOCAL PROCEDURE GetISO3166_1Alpha2@109() : Text;
    BEGIN
      EXIT('ISO3166-1:Alpha2');
    END;

    LOCAL PROCEDURE GetUNCL4461ListID@111() : Text;
    BEGIN
      EXIT('UNCL4461');
    END;

    LOCAL PROCEDURE GetUNCL4465ListID@94() : Text;
    BEGIN
      EXIT('UNCL4465');
    END;

    LOCAL PROCEDURE GetUNCL5305ListID@103() : Text;
    BEGIN
      EXIT('UNCL5305');
    END;

    LOCAL PROCEDURE GetUNECERec20ListID@104() : Text;
    BEGIN
      EXIT('UNECERec20');
    END;

    PROCEDURE GetUoMforPieceINUNECERec20ListID@71() : Code[10];
    BEGIN
      EXIT(UoMforPieceINUNECERec20ListIDTxt);
    END;

    LOCAL PROCEDURE GetGLNSchemeIDByFormat@70(IsBISBillling@1000 : Boolean) : Text;
    BEGIN
      IF IsBISBillling THEN
        EXIT(GetGLNSchemeID);
      EXIT(GLNTxt);
    END;

    LOCAL PROCEDURE GetGLNSchemeID@48() : Text;
    BEGIN
      EXIT('0088');
    END;

    LOCAL PROCEDURE GetVATSchemeByFormat@88(CountryRegionCode@1000 : Code[10];IsBISBilling@1003 : Boolean) : Text;
    BEGIN
      IF IsBISBilling THEN
        EXIT('');
      EXIT(GetVATScheme(CountryRegionCode));
    END;

    LOCAL PROCEDURE GetVATScheme@41(CountryRegionCode@1000 : Code[10]) : Text;
    VAR
      CountryRegion@1001 : Record 9;
      CompanyInfo@1002 : Record 79;
    BEGIN
      IF CountryRegionCode = '' THEN BEGIN
        CompanyInfo.GET;
        CompanyInfo.TESTFIELD("Country/Region Code");
        CountryRegion.GET(CompanyInfo."Country/Region Code");
      END ELSE
        CountryRegion.GET(CountryRegionCode);
      EXIT(CountryRegion."VAT Scheme");
    END;

    LOCAL PROCEDURE GetTaxCategoryAE@52() : Text;
    BEGIN
      EXIT('AE');
    END;

    LOCAL PROCEDURE GetTaxCategoryE@58() : Text;
    BEGIN
      EXIT('E');
    END;

    LOCAL PROCEDURE GetTaxCategoryG@60() : Text;
    BEGIN
      EXIT('G');
    END;

    LOCAL PROCEDURE GetTaxCategoryK@62() : Text;
    BEGIN
      EXIT('K');
    END;

    LOCAL PROCEDURE GetTaxCategoryO@57() : Text;
    BEGIN
      EXIT('O');
    END;

    LOCAL PROCEDURE FormatVATRegitrationNo@74(VATRegistrartionNo@1000 : Text;IsBISBilling@1001 : Boolean) : Text;
    BEGIN
      IF IsBISBilling THEN
        EXIT(DELCHR(VATRegistrartionNo));

      EXIT(VATRegistrartionNo);
    END;

    PROCEDURE InitializeXMLExport@69(VAR OutFile@1003 : File;VAR XmlServerPath@1000 : Text);
    VAR
      FileManagement@1002 : Codeunit 419;
    BEGIN
      XmlServerPath := FileManagement.ServerTempFileName('xml');

      IF STRLEN(XmlServerPath) > 250 THEN
        ERROR(ExportPathGreaterThan250Err);

      IF NOT EXISTS(XmlServerPath) THEN
        OutFile.CREATE(XmlServerPath)
      ELSE
        OutFile.OPEN(XmlServerPath);
    END;

    [External]
    PROCEDURE MapServiceLineTypeToSalesLineType@9(ServiceLineType@1000 : Option) : Integer;
    VAR
      SalesLine@1001 : Record 37;
      ServiceInvoiceLine@1002 : Record 5993;
    BEGIN
      CASE ServiceLineType OF
        ServiceInvoiceLine.Type::" ":
          EXIT(SalesLine.Type::" ");
        ServiceInvoiceLine.Type::Item:
          EXIT(SalesLine.Type::Item);
        ServiceInvoiceLine.Type::Resource:
          EXIT(SalesLine.Type::Resource);
        ELSE
          EXIT(SalesLine.Type::"G/L Account");
      END;
    END;

    [External]
    PROCEDURE TransferHeaderToSalesHeader@42(FromRecord@1000 : Variant;VAR ToSalesHeader@1001 : Record 36);
    VAR
      ToRecord@1003 : Variant;
    BEGIN
      ToRecord := ToSalesHeader;
      RecRefTransferFields(FromRecord,ToRecord);
      ToSalesHeader := ToRecord;
    END;

    [External]
    PROCEDURE TransferLineToSalesLine@44(FromRecord@1000 : Variant;VAR ToSalesLine@1001 : Record 37);
    VAR
      ToRecord@1003 : Variant;
    BEGIN
      ToRecord := ToSalesLine;
      RecRefTransferFields(FromRecord,ToRecord);
      ToSalesLine := ToRecord;
    END;

    [External]
    PROCEDURE RecRefTransferFields@10(FromRecord@1004 : Variant;VAR ToRecord@1005 : Variant);
    VAR
      FromRecRef@1000 : RecordRef;
      ToRecRef@1001 : RecordRef;
      FromFieldRef@1002 : FieldRef;
      ToFieldRef@1003 : FieldRef;
      i@1006 : Integer;
    BEGIN
      FromRecRef.GETTABLE(FromRecord);
      ToRecRef.GETTABLE(ToRecord);
      FOR i := 1 TO FromRecRef.FIELDCOUNT DO BEGIN
        FromFieldRef := FromRecRef.FIELDINDEX(i);
        IF ToRecRef.FIELDEXIST(FromFieldRef.NUMBER) THEN BEGIN
          ToFieldRef := ToRecRef.FIELD(FromFieldRef.NUMBER);
          CopyField(FromFieldRef,ToFieldRef);
        END;
      END;
      ToRecRef.SETTABLE(ToRecord);
    END;

    LOCAL PROCEDURE CopyField@38(FromFieldRef@1000 : FieldRef;VAR ToFieldRef@1001 : FieldRef);
    BEGIN
      IF FromFieldRef.CLASS <> ToFieldRef.CLASS THEN
        EXIT;

      IF FromFieldRef.TYPE <> ToFieldRef.TYPE THEN
        EXIT;

      IF FromFieldRef.LENGTH > ToFieldRef.LENGTH THEN
        EXIT;

      ToFieldRef.VALUE := FromFieldRef.VALUE;
    END;

    PROCEDURE FindNextInvoiceRec@80(VAR SalesInvoiceHeader@1004 : Record 112;VAR ServiceInvoiceHeader@1005 : Record 5992;VAR SalesHeader@1006 : Record 36;ProcessedDocType@1003 : 'Sale,Service';Position@1000 : Integer;VAR SalesHeaderExtension@111280000 : Record 11071868;IsCreditMemo@1100285100 : Boolean) : Boolean;
    VAR
      PEPPOLValidation@1002 : Codeunit 1620;
      Found@1001 : Boolean;
      SalesCrMemoHeader@1100285101 : Record 114;
    BEGIN
      CASE ProcessedDocType OF
        ProcessedDocType::Sale:
          BEGIN
            IF Position = 1 THEN
              Found := SalesInvoiceHeader.FIND('-')
            ELSE
              Found := SalesInvoiceHeader.NEXT <> 0;
            IF Found THEN BEGIN
              SalesHeader.TRANSFERFIELDS(SalesInvoiceHeader);
      //>>4PSSE
              // PEPPOLValidation.CheckSalesInvoice(SalesInvoiceHeader);
              IF IsCreditMemo THEN BEGIN
                SalesCrMemoHeader.TRANSFERFIELDS(SalesInvoiceHeader);
                PEPPOLValidation.CheckSalesCreditMemo(SalesCrMemoHeader);
              END
              ELSE PEPPOLValidation.CheckSalesInvoice(SalesInvoiceHeader);

              SalesHeaderExtension."Document Type" := SalesHeaderExtension."Document Type"::Invoice;
              SalesHeaderExtension."Document No."  := SalesHeader."No.";
              SalesHeaderExtension."E-Mail (Invoices)" := SalesInvoiceHeader."E-Mail (Invoices)";
              SalesHeaderExtension."Electronic Invoicing" := SalesInvoiceHeader."Electronic Invoicing";
              SalesHeaderExtension."Combine E-Mail Attachments" := SalesInvoiceHeader."Combine E-Mail Attachments";
              SalesHeaderExtension."Pre-Assigned No." := SalesInvoiceHeader."Pre-Assigned No.";
              SalesHeaderExtension."Order No." := SalesInvoiceHeader."Order No.";
      //<<4PSSE
            END;
          END;
        ProcessedDocType::Service:
          BEGIN
            IF Position = 1 THEN
              Found := ServiceInvoiceHeader.FIND('-')
            ELSE
              Found := ServiceInvoiceHeader.NEXT <> 0;
            IF Found THEN BEGIN
              TransferHeaderToSalesHeader(ServiceInvoiceHeader,SalesHeader);
              PEPPOLValidation.CheckServiceInvoice(ServiceInvoiceHeader);
            END;
          END;
      END;
      SalesHeader."Document Type" := SalesHeader."Document Type"::Invoice;

      EXIT(Found);
    END;

    PROCEDURE FindNextInvoiceLineRec@84(VAR SalesInvoiceLine@1003 : Record 113;VAR ServiceInvoiceLine@1004 : Record 5993;VAR SalesLine@1005 : Record 37;ProcessedDocType@1002 : 'Sale,Service';Position@1000 : Integer) : Boolean;
    VAR
      Found@1001 : Boolean;
    BEGIN
      CASE ProcessedDocType OF
        ProcessedDocType::Sale:
          BEGIN
            IF Position = 1 THEN
              Found := SalesInvoiceLine.FIND('-')
            ELSE
              Found := SalesInvoiceLine.NEXT <> 0;
            IF Found THEN
              SalesLine.TRANSFERFIELDS(SalesInvoiceLine);
          END;
        ProcessedDocType::Service:
          BEGIN
            IF Position = 1 THEN
              Found := ServiceInvoiceLine.FIND('-')
            ELSE
              Found := ServiceInvoiceLine.NEXT <> 0;
            IF Found THEN BEGIN
              TransferLineToSalesLine(ServiceInvoiceLine,SalesLine);
              SalesLine.Type := MapServiceLineTypeToSalesLineType(ServiceInvoiceLine.Type);
            END;
          END;
      END;

      EXIT(Found);
    END;

    PROCEDURE FindNextCreditMemoRec@68(VAR SalesCrMemoHeader@1004 : Record 114;VAR ServiceCrMemoHeader@1005 : Record 5994;VAR SalesHeader@1006 : Record 36;ProcessedDocType@1003 : 'Sale,Service';Position@1000 : Integer) : Boolean;
    VAR
      PEPPOLValidation@1002 : Codeunit 1620;
      Found@1001 : Boolean;
    BEGIN
      CASE ProcessedDocType OF
        ProcessedDocType::Sale:
          BEGIN
            IF Position = 1 THEN
              Found := SalesCrMemoHeader.FIND('-')
            ELSE
              Found := SalesCrMemoHeader.NEXT <> 0;
            IF Found THEN BEGIN
              SalesHeader.TRANSFERFIELDS(SalesCrMemoHeader);
              PEPPOLValidation.CheckSalesCreditMemo(SalesCrMemoHeader);
            END;
          END;
        ProcessedDocType::Service:
          BEGIN
            IF Position = 1 THEN
              Found := ServiceCrMemoHeader.FIND('-')
            ELSE
              Found := ServiceCrMemoHeader.NEXT <> 0;
            IF Found THEN BEGIN
              TransferHeaderToSalesHeader(ServiceCrMemoHeader,SalesHeader);
              PEPPOLValidation.CheckServiceCreditMemo(ServiceCrMemoHeader);
            END;
          END;
      END;

      SalesHeader."Document Type" := SalesHeader."Document Type"::"Credit Memo";

      EXIT(Found);
    END;

    PROCEDURE FindNextCreditMemoLineRec@66(VAR SalesCrMemoLine@1003 : Record 115;VAR ServiceCrMemoLine@1004 : Record 5995;VAR SalesLine@1005 : Record 37;ProcessedDocType@1002 : 'Sale,Service';Position@1000 : Integer) : Boolean;
    VAR
      Found@1001 : Boolean;
    BEGIN
      CASE ProcessedDocType OF
        ProcessedDocType::Sale:
          BEGIN
            IF Position = 1 THEN
              Found := SalesCrMemoLine.FIND('-')
            ELSE
              Found := SalesCrMemoLine.NEXT <> 0;
            IF Found THEN
              SalesLine.TRANSFERFIELDS(SalesCrMemoLine);
          END;
        ProcessedDocType::Service:
          BEGIN
            IF Position = 1 THEN
              Found := ServiceCrMemoLine.FIND('-')
            ELSE
              Found := ServiceCrMemoLine.NEXT <> 0;
            IF Found THEN BEGIN
              TransferLineToSalesLine(ServiceCrMemoLine,SalesLine);
              SalesLine.Type := MapServiceLineTypeToSalesLineType(ServiceCrMemoLine.Type);
            END;
          END;
      END;

      EXIT(Found);
    END;

    LOCAL PROCEDURE "//4PSSE"@111280001();
    BEGIN
    END;

    PROCEDURE CheckValidChrs@1100285024(textIn@1100285000 : Text[250]) textout : Text[250];
    VAR
      chk001@1100285500 : TextConst 'SVE="-/\ "';
    BEGIN
      //4PSSE
      textout := DELCHR(textIn,'=' ,chk001 + ' ');
    END;

    PROCEDURE GetInvoiceNote@111280003(VAR SalesHeader@111280005 : Record 36) Note : Text;
    VAR
      TextField@111280003 : Text;
      ExtraTextField@111280001 : Text;
      TransportMethod@111280004 : Record 259;
      ServiceOrder@111280006 : Record 11012823;
      SESetup@111280007 : Record 11128004;
      SalesHeaderExtension@111280008 : Record 11071868;
      Svefakturasettings@1100285100 : Record 11128035;
      FirstLineNo@1100285101 : Integer;
    BEGIN
      //4PSSE
      SetFirstLineNo(SalesHeader,FirstLineNo);
      IF NOT Svefakturasettings.GET THEN
        Svefakturasettings.INIT;

      IF gCredit THEN
        SalesReportTextLine.SETRANGE("Document Type", SalesReportTextLine."Document Type"::"Posted Credit Memo")
      ELSE
        SalesReportTextLine.SETRANGE("Document Type", SalesReportTextLine."Document Type"::"Posted Invoice");
      SalesReportTextLine.SETRANGE("Document No.", SalesHeader."No.");
      SalesReportTextLine.SETRANGE("Text Line Type", SalesReportTextLine."Text Line Type"::"Before Detail");
      SalesReportTextLine.SETFILTER(Text, '<>%1', '');
      SalesReportTextLine.SETRANGE("Document Line No.", FirstLineNo);
      ExtraTextField := '';
      IF SalesReportTextLine.FINDSET(FALSE) THEN REPEAT
        TextField := SalesReportTextLine.Text;
        IF CheckFirstLineOfProj(SalesReportTextLine) THEN
          Note := addCRLF2Text(Note, DeleteHTML(TextField),FALSE);
      UNTIL SalesReportTextLine.NEXT = 0;

      IF Svefakturasettings."HeadNote TransportMethod" AND TransportMethod.GET(SalesHeader."Transport Method") THEN
        Note := addCRLF2Text(Note, STRSUBSTNO('%1 %2',SalesHeader.FIELDCAPTION("Transport Method"),TransportMethod.Description),TRUE);

      IF Svefakturasettings."HeadNote ServiceOrder" AND ServiceOrder.GET(SalesHeader."Service Order No.") THEN
        Note := addCRLF2Text(Note,DeleteHTML(ServiceOrder.Description),TRUE);

      IF SESetup.GET(SESetup."Line type"::Setup,'SVFF™RHAND', SalesHeader."Bill-to Customer No.") THEN
        IF SESetup."Value (bool)" AND SalesHeaderExtension.GET(SalesHeader."Document Type",SalesHeader."No.") THEN
          Note := addCRLF2Text(Note,preAssNotxt + ' ' + SalesHeaderExtension."Pre-Assigned No." + ' ' + SalesHeader."Invoice Text",TRUE);
    END;

    PROCEDURE SetAdditionalDocRefATS@111280002(VAR SalesHeader@1100285100 : Record 36;VAR DocumentLink@111280003 : Record 11012747;isCredit@1100285101 : Boolean) : Integer;
    VAR
      lvSalesInvoiceHeader@111280002 : Record 112;
      lvSalesCrMemoHeader@111280001 : Record 114;
      lvCount@111280000 : Integer;
      RecRef@111280004 : RecordRef;
      DocumentProperties@111280005 : Record 11012746;
    BEGIN
      //4PSSE
      DocumentLink.RESET;
      IF isCredit THEN
        BEGIN
          DocumentLink.SETRANGE("Table No.", DATABASE::"Sales Cr.Memo Header");
          IF NOT lvSalesCrMemoHeader.GET(SalesHeader."No.") THEN
            EXIT;
          lvSalesCrMemoHeader.SETRECFILTER;
          RecRef.GETTABLE(lvSalesCrMemoHeader);
        END
      ELSE
        BEGIN
          DocumentLink.SETRANGE("Table No.", DATABASE::"Sales Invoice Header");
          IF NOT (lvSalesInvoiceHeader.GET(SalesHeader."No.")) THEN
            EXIT;
          lvSalesInvoiceHeader.SETRECFILTER;
          RecRef.GETTABLE(lvSalesInvoiceHeader);
        END;
      DocumentLink.SETRANGE("Record ID", RecRef.RECORDID);
      lvCount := 0;
      IF DocumentLink.FINDSET(FALSE) THEN REPEAT
        IF DocumentProperties.GET(DocumentLink."Document No.") THEN
          IF DocumentProperties.File <> '' THEN
            lvCount += 1;
      UNTIL DocumentLink.NEXT = 0;

      EXIT(lvCount);
    END;

    PROCEDURE GetAdditionalDocRefATS@111280009(VAR DocumentLink@111280003 : Record 11012747;VAR CorrectedFilename@111280004 : Text;VAR mimeCode@111280011 : Text;VAR AdditionalDocumentReferenceID@111280009 : Text[10];VAR AdditionalDocRefDocumentType@111280010 : Text[10];DontMoveFiles@111280006 : Boolean) : Boolean;
    VAR
      lvSalesInvoiceHeader@111280002 : Record 112;
      lvSalesCrMemoHeader@111280001 : Record 114;
      lvCount@111280000 : Integer;
      MimeMapping@111280012 : DotNet "'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.MimeMapping";
      DocumentProperties@111280005 : Record 11012746;
      cuExternalDocumentMgmt@111280007 : Codeunit 11012403;
    BEGIN
      //4PSSE

      DocumentProperties.GET(DocumentLink."Document No.");
      CorrectedFilename := '';
      IF DocumentProperties.File = '' THEN
        EXIT(FALSE);

      AdditionalDocumentReferenceID := DocumentProperties."No.";
      AdditionalDocRefDocumentType := '';
      // Move file to outgoing folder
      CorrectedFilename := DELCHR(DocumentProperties.File, '=', DELCHR(DocumentProperties.File, '=', '01234567890.-_ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));
      mimeCode := MimeMapping.GetMimeMapping(DocumentProperties.File);

      IF NOT DontMoveFiles THEN
        MoveAdditionalDoc(DocumentProperties,CorrectedFilename,cuExternalDocumentMgmt.FolderName(DocumentProperties."Document Type",''));

      AdditionalDocumentReferenceID := 'urn:sfti:documents:object:'+AdditionalDocumentReferenceID;
    END;

    PROCEDURE GetAdditionalDocRefPDF@111280000(SalesHeader@111280007 : Record 36;VAR CorrectedFilename@111280004 : Text;VAR mimeCode@111280003 : Text;VAR AdditionalDocumentReferenceID@111280002 : Text[10];VAR AdditionalDocRefDocumentType@111280001 : Text[10];DontMoveFiles@111280000 : Boolean) : Code[20];
    VAR
      MimeMapping@111280005 : DotNet "'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.MimeMapping";
      SEBasicsetup@111280006 : Record 11128009;
      DocumentProperties@1100285100 : Record 11012746;
    BEGIN
      //4PSSE
      CorrectedFilename := '';
      AdditionalDocumentReferenceID := '';
      AdditionalDocRefDocumentType := '';

      IF NOT SEBasicsetup.GET THEN
        EXIT;
      IF SEBasicsetup."Export path Svefaktura PDF" = '' THEN
        EXIT;

      AdditionalDocumentReferenceID := SalesHeader."No." +'.pdf';

      // Move file to outgoing folder
      CorrectedFilename := DELCHR(AdditionalDocumentReferenceID, '=', DELCHR(AdditionalDocumentReferenceID, '=', '01234567890.-_ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));
      mimeCode := MimeMapping.GetMimeMapping(AdditionalDocumentReferenceID);

      IF NOT DontMoveFiles THEN BEGIN
        DocumentProperties.INIT;
        DocumentProperties.File := AdditionalDocumentReferenceID;
        DocumentProperties."Creation Date":=WORKDATE;
        DocumentProperties."Storage Type"  := DocumentProperties."Storage Type"::"File System on Premise";
        MoveAdditionalDoc(DocumentProperties,CorrectedFilename,SEBasicsetup."Export path Svefaktura PDF");
      END;

      AdditionalDocumentReferenceID := 'urn:sfti:documents:object:'+AdditionalDocumentReferenceID;

      EXIT(SalesHeader."No.");
    END;

    LOCAL PROCEDURE MoveAdditionalDoc@111280008(VAR DocumentProperties@1100285109 : Record 11012746;CorrectedFilename@111280002 : Text;SourceDirectory@111280005 : Text);
    VAR
      cuExternalDocumentMgmt@111280000 : Codeunit 11012403;
      SalesReceivablesSetup@111280001 : Record 311;
      DocumentManagement@1100285108 : Codeunit 11012406;
      FileMgt@1100285107 : Codeunit 419;
      FileStorageType@1100285106 : ' ,File System on Premise,SharePoint Online,Azure File Storage,,,,,,,,PPT,DPTDUAL';
      StorageURI@1100285105 : Text;
      Dummy@1100285104 : Text;
      ShortFileName@1100285103 : Text;
      TargetStorageType@1100285102 : Option;
      TargetStorageURI@1100285101 : Text;
      ErrorMessage@1100285100 : Text;
      SourceFilename@1100285110 : Text;
    BEGIN
      //4PSSE
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.TESTFIELD("Export Path Svefaktura Attach.");
      SourceFilename := DocumentProperties.File;
      IF GUIALLOWED THEN
      //  cuExternalDocumentMgmt.MoveCopyFile(
      //    SalesReceivablesSetup."Export Path Svefaktura Attach." + '\', //TargetDirectory
      //    '',
      //    SourceDirectory,
      //    SourceFilename,
      //    '',
      //    TRUE,  //CopyBln
      //    CorrectedFilename, //TargetFilename
      //    TargetDocumentServiceURL
      //    )
        BEGIN
          StorageURI := DocumentProperties.GetStorageURI;
          FileMgt.SplitFileAbsPathName(StorageURI,Dummy,ShortFileName);

          TargetStorageType := FileStorageType::"File System on Premise";
          TargetStorageURI := SalesReceivablesSetup."Export Path Svefaktura Attach." + '\' + CorrectedFilename;

          DocumentManagement.PrepareDocumentRegistration(
            ShortFileName,DocumentProperties."Document Type",DocumentProperties."Creation Date",TargetStorageURI,TargetStorageType);
          IF DocumentManagement.CopyStorageContent(DocumentProperties."Storage Type",TargetStorageType, StorageURI, TargetStorageURI,ErrorMessage) THEN
            DocumentProperties.ValidateStorageURI(DocumentProperties."Storage Type",TargetStorageURI);
        END
      ELSE BEGIN
        FILE.COPY(SourceDirectory +'\'+ SourceFilename, SalesReceivablesSetup."Export Path Svefaktura Attach." + '\' + CorrectedFilename);
      END;
    END;

    PROCEDURE GetAdditionalDocRefACD@111280014(VAR SalesHeader@1100285100 : TEMPORARY Record 36;VAR AdditionalDocRefDocumentType@111280010 : Text[10]) AdditionalDocRefDocumentID : Text;
    BEGIN
      //4PSSE

      // AdditionalDocRefDocumentID := 'ACD';
      AdditionalDocRefDocumentType := '130';

      AdditionalDocRefDocumentID := SalesHeader."Job No.";
      IF SalesHeader."Service Order No."<>'' THEN
        AdditionalDocRefDocumentID := SalesHeader."Service Order No.";
    END;

    LOCAL PROCEDURE SetFirstLineNo@1100285006(SalesHeader@1100285100 : Record 36;VAR FirstLineNo@1100285101 : Integer);
    VAR
      ExitLoop@1100285000 : Boolean;
      SalesInvoiceLineTEMP@111280000 : TEMPORARY Record 113;
    BEGIN
      //4PSSE
      CASE SalesHeader."Invoice Layout Code" OF
        '0', '1': SalesInvoiceLineTEMP.SETCURRENTKEY("Document No.","Cost Type Cost Plus Line");
        '2': SalesInvoiceLineTEMP.SETCURRENTKEY("Document No.","Line No.");
        '3': SalesInvoiceLineTEMP.SETCURRENTKEY("Job No.","Extension Contract");
        '4': SalesInvoiceLineTEMP.SETCURRENTKEY("Job No.", Element);//RFC1153
        ELSE SalesInvoiceLineTEMP.SETCURRENTKEY("Document No.","Line No.");
      END;

      IF gCredit THEN
       SalesReportTextLine.SETRANGE("Document Type", SalesReportTextLine."Document Type"::"Posted Credit Memo")
      ELSE
        SalesReportTextLine.SETRANGE("Document Type", SalesReportTextLine."Document Type"::"Posted Invoice");
      SalesReportTextLine.SETRANGE("Document No.", SalesHeader."No.");
      SalesReportTextLine.SETRANGE("Text Line Type", SalesReportTextLine."Text Line Type"::"Before Detail");
      SalesReportTextLine.SETFILTER(Text, '<>%1', '');

      SalesReportTextLine.SETRANGE(Text, SalesHeader."Invoice Text");
      IF SalesReportTextLine.FINDFIRST THEN BEGIN
        FirstLineNo := SalesReportTextLine."Document Line No.";
        EXIT;
      END;

      ExitLoop := FALSE;
      IF SalesInvoiceLineTEMP.FINDSET(FALSE) THEN REPEAT
        SalesReportTextLine.SETRANGE("Document Line No.", SalesInvoiceLineTEMP."Line No.");
        IF NOT SalesReportTextLine.ISEMPTY THEN BEGIN
          FirstLineNo := SalesInvoiceLineTEMP."Line No.";
          ExitLoop := TRUE;
        END;
      UNTIL (SalesInvoiceLineTEMP.NEXT = 0) OR ExitLoop;
    END;

    LOCAL PROCEDURE CheckFirstLineOfProj@1000000018(VAR pSalesReportTextLineRec@1000000000 : Record 11071912) : Boolean;
    VAR
      lvSalesReportTextCondRec@1000000001 : Record 11071891;
    BEGIN
      //4PSSE
      // 160919 ITERO.AC IME484 New help function
      // Used to determine if a Sales Report Text Line Should be a part of the Invoice Header Text or not
      // Group Headers as FirstLineOfType or FirstLineOfExtensionContract will result in FALSE
      //Document Type,Text Line Type,Text Line No.,Line No.
      lvSalesReportTextCondRec.SETRANGE("Document Type", pSalesReportTextLineRec."Document Type");
      lvSalesReportTextCondRec.SETRANGE("Text Line Type", pSalesReportTextLineRec."Text Line Type");
      lvSalesReportTextCondRec.SETRANGE("Text Line No.", pSalesReportTextLineRec."Line No.");
      lvSalesReportTextCondRec.SETFILTER("Function Name", 'FirstLineOfProj|FirstLineOfServiceContract|FirstLineOfServiceOrder|FirstLineOfRentalUnit');
      IF lvSalesReportTextCondRec.FINDSET(FALSE) THEN BEGIN
        lvSalesReportTextCondRec.SETFILTER("Function Name", 'ELEMENTINVOICE|EXTENSIONINVOICE|EXTENSIONINVOICE2');  // 161024 ITERO.AC IME484-2 Adjustment. Extension contract texts is handled as invoice lines //RFC1153
        IF lvSalesReportTextCondRec.FINDSET(FALSE) THEN
          EXIT(FALSE)
        ELSE
          EXIT(TRUE);
      END ELSE BEGIN
        // For backwards compability Older invoices could refer to non-existing Text Line Numbers, use "old logic"
        IF (COPYSTR(DELCHR(pSalesReportTextLineRec.Text, '<', ' '), 1, 4) <> '<div') THEN BEGIN
          //>> 161024 ITERO.AC IME484-2 Adjustment. Extension contract texts is handled as invoice lines
          lvSalesReportTextCondRec.SETFILTER("Function Name", 'ELEMENTINVOICE|EXTENSIONINVOICE|EXTENSIONINVOICE2'); //RFC1153
          IF lvSalesReportTextCondRec.FINDSET(FALSE) THEN
            EXIT(FALSE)
          ELSE
            EXIT(TRUE);
          //<< 161024 ITERO.AC IME484-2
        END ELSE BEGIN
          EXIT(FALSE);
        END;
      END;
    END;

    PROCEDURE DeleteHTML@1100285018(IncomingHTML@1100285000 : Text) : Text;
    VAR
      StartPos@1100285001 : Integer;
      EndPos@1100285002 : Integer;
      Maxtry@1100285100 : Integer;
    BEGIN
      //4PSSE
      Maxtry := 0;
      IF STRPOS(IncomingHTML, '<') <> 0 THEN
        REPEAT
          Maxtry += 1;
          StartPos := STRPOS(IncomingHTML, '<');
          EndPos := STRPOS(IncomingHTML, '>');
          IF (StartPos > 1) THEN
            IncomingHTML := COPYSTR(IncomingHTML, 1, StartPos - 1) + COPYSTR(IncomingHTML, EndPos + 1)
          ELSE IF (StartPos = 1) THEN
            IncomingHTML := COPYSTR(IncomingHTML, EndPos + 1);
        UNTIL (STRPOS(IncomingHTML, '<') = 0) OR (EndPos = 0) OR (Maxtry > 250);

      IncomingHTML := CONVERTSTR(IncomingHTML, ';', ' ');

      EXIT(IncomingHTML);
    END;

    PROCEDURE getCustBuyersID@111280006(SalesHeader@1100285100 : Record 36) : Boolean;
    VAR
      SESetup@111280000 : Record 11128004;
    BEGIN
      //4PSSE
      IF SESetup.GET(SESetup."Line type"::Setup,'SFBYERSID',SalesHeader."Sell-to Customer No.") THEN
        EXIT(SESetup."Value (bool)");
      EXIT(FALSE);
    END;

    PROCEDURE getCustAvtalID@111280007(SalesHeader@1100285100 : Record 36;oldValue@111280000 : Text) : Text;
    VAR
      SESetup@111280001 : Record 11128004;
    BEGIN
      //4PSSE
      IF SESetup.GET(SESetup."Line type"::Mapping,'SFAVTID',SalesHeader."Sell-to Customer No.") THEN BEGIN
        IF SESetup."Value (bool)" AND (SalesHeader."Principal Reference"<>'') THEN
          EXIT(SalesHeader."Principal Reference");

        IF SESetup."Value (txt)" <> '' THEN
          EXIT(SESetup."Value (txt)");
      END;
      IF SalesHeader."Order No. Customer" <> '' THEN
        EXIT(SalesHeader."Order No. Customer");

      EXIT(oldValue);
    END;

    PROCEDURE GetPrecisionForEFHInvoice@1000000001(pQuantity@1000000000 : Decimal;pAmount@1000000001 : Decimal;pAllowanceCharge@1000000002 : Decimal;pMaxDecimals@1100285100 : Integer) : Decimal;
    VAR
      lvRetPrecision@1000000003 : Decimal;
      lvNetAmount@1000000006 : Decimal;
      lvTheoreticalAmount@1000000008 : Decimal;
      lvCheckAmount@1000000004 : Decimal;
      lvCheckUnitPrice@1000000005 : Decimal;
      lvIterationCount@1000000007 : Integer;
    BEGIN
      //4PSSE
      // New function used to calculate precision needed for Norwegian EFH Invoices
      // Based on current Quantity and current Amount a sufficient number of decimals (used in Unit Price) has to be calculated
      // InExchange validates Quantity * Unit price and compares with line amount, no differences seems to be allowed
      // Depending of current parameters, a value between 0.01 and 0.00000000000000000001 will be be returned

      lvIterationCount := 2;   // Start value
      lvRetPrecision := 0.01;  // Standard precision with 2 decimals
      IF lvIterationCount <= 0 THEN lvIterationCount := 20;

      // Amount calculated by InExchange for validation
      lvNetAmount := pAmount - pAllowanceCharge;

      // Amount calculated by InExchange in their validation to compare with Quantity * Unit price
      lvTheoreticalAmount := pQuantity * (lvNetAmount / pQuantity);

      WHILE lvIterationCount < pMaxDecimals DO BEGIN   // We must set limit somewhere this will result in 20 decimals as a maximum
        lvIterationCount += 1;
        // Rounded Unit Price
        lvCheckUnitPrice := ROUND(lvNetAmount / pQuantity, lvRetPrecision, '=');
        // Amount calculated with Rounded Unit price
        lvCheckAmount := pQuantity * lvCheckUnitPrice;
        IF lvCheckAmount = lvTheoreticalAmount THEN
          lvIterationCount := 100
        ELSE
          lvRetPrecision := lvRetPrecision / 10;
      END;

      EXIT(lvRetPrecision);
    END;

    PROCEDURE addCRLF2Text@1100285101(oldLine@1100285100 : Text;addLine@1100285101 : Text;comma@1100285102 : Boolean) : Text;
    BEGIN
      //4PSSE
      IF oldLine <> '' THEN BEGIN
        IF comma THEN
          EXIT(oldLine + ',' + SEUtils.LineBreak + addLine);
        EXIT(oldLine + SEUtils.LineBreak + addLine);
      END;
      EXIT(addLine);
    END;

    LOCAL PROCEDURE "--publishers"@111280005();
    BEGIN
      //4PSSE
    END;

    [Integration]
    LOCAL PROCEDURE AdjSalesInvoiceLineDescPublisher@1101285001(SalesHeader@1101285000 : Record 36;SalesLine@1101285002 : Record 37;VAR SalesDescription@1101285001 : Text);
    BEGIN
      //4PSSE
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetAccountingSupplierPartyTaxScheme@72(VAR CompanyID@1002 : Text;VAR CompanyIDSchemeID@1001 : Text;VAR TaxSchemeID@1000 : Text;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetAccountingCustomerPartyTaxSchemeByFormat@73(SalesHeader@1004 : Record 36;VAR CustPartyTaxSchemeCompanyID@1003 : Text;VAR CustPartyTaxSchemeCompIDSchID@1002 : Text;VAR CustTaxSchemeID@1001 : Text;IsBISBilling@1000 : Boolean;VAR IsHandled@1005 : Boolean);
    BEGIN
    END;

    BEGIN
    {
      190904 ORANGO.DL support for Svefatura 3 (PEPPOL Biz 3.0) with code from NAV2018
    }
    END.
  }
}

