OBJECT Codeunit 5923 Service-Quote to Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03;
  }
  PROPERTIES
  {
    TableNo=5900;
    Permissions=TableData 5914=m,
                TableData 5950=rimd;
    OnRun=VAR
            ServQuoteLine@1001 : Record 5902;
            Customer@1005 : Record 18;
            CustCheckCreditLimit@1000 : Codeunit 312;
            DocType@1003 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';
            SkipDelete@1004 : Boolean;
          BEGIN
            OnBeforeRun(Rec);

            ServOrderHeader := Rec;

            ServMgtSetup.GET;

            ServOrderHeader."Document Type" := "Document Type"::Order;
            Customer.GET("Customer No.");
            Customer.CheckBlockedCustOnDocs(Customer,DocType::Quote,FALSE,FALSE);
            IF "Customer No." <> "Bill-to Customer No." THEN BEGIN
              Customer.GET("Bill-to Customer No.");
              Customer.CheckBlockedCustOnDocs(Customer,DocType::Quote,FALSE,FALSE);
            END;

            ValidateSalesPersonOnServiceHeader(Rec,TRUE,FALSE);

            CustCheckCreditLimit.ServiceHeaderCheck(ServOrderHeader);

            TransferQuoteToOrderLines(ServQuoteLine,Rec,ServOrderLine,ServOrderHeader);

            MakeOrder(Rec);

            SkipDelete := FALSE;
            OnBeforeServHeaderDelete(Rec,SkipDelete);
            IF NOT SkipDelete THEN
              DELETE(TRUE);
          END;

  }
  CODE
  {
    VAR
      ServMgtSetup@1006 : Record 5911;
      RepairStatus@1004 : Record 5927;
      ServItemLine@1001 : Record 5901;
      ServItemLine2@1008 : Record 5901;
      ServOrderLine@1000 : Record 5902;
      ServOrderLine2@1009 : Record 5902;
      ServOrderAlloc@1005 : Record 5950;
      ServOrderHeader@1010 : Record 5900;
      LoanerEntry@1019 : Record 5914;
      ServCommentLine@1020 : Record 5906;
      ServCommentLine2@1021 : Record 5906;
      NoSeriesMgt@1007 : Codeunit 396;
      ServLogMgt@1011 : Codeunit 5906;
      ReserveServiceLine@1012 : Codeunit 99000842;

    LOCAL PROCEDURE TestNoSeries@21();
    BEGIN
      ServMgtSetup.TESTFIELD("Service Order Nos.");
    END;

    LOCAL PROCEDURE GetNoSeriesCode@20() : Code[20];
    BEGIN
      EXIT(ServMgtSetup."Service Order Nos.");
    END;

    [External]
    PROCEDURE ReturnOrderNo@1() : Code[20];
    BEGIN
      EXIT(ServOrderHeader."No.");
    END;

    LOCAL PROCEDURE InsertServHeader@4(VAR ServiceHeaderOrder@1001 : Record 5900;ServiceHeaderQuote@1000 : Record 5900);
    BEGIN
      ServiceHeaderOrder.INSERT(TRUE);
      ServiceHeaderOrder."Document Date" := ServiceHeaderQuote."Document Date";
      ServiceHeaderOrder."Location Code" := ServiceHeaderQuote."Location Code";
      OnBeforeServiceHeaderOrderModify(ServiceHeaderOrder,ServiceHeaderQuote);
      ServiceHeaderOrder.MODIFY;

      OnAfterInsertServHeader(ServiceHeaderOrder,ServiceHeaderQuote);
    END;

    LOCAL PROCEDURE MakeOrder@3(ServiceHeader@1000 : Record 5900);
    VAR
      ApprovalsMgmt@1002 : Codeunit 1535;
      RecordLinkManagement@1001 : Codeunit 447;
      SkipDelete@1003 : Boolean;
    BEGIN
      WITH ServOrderHeader DO BEGIN
        "No." := '';
        "No. Printed" := 0;
        VALIDATE(Status,Status::Pending);
        "Order Date" := WORKDATE;
        "Order Time" := TIME;
        "Actual Response Time (Hours)" := 0;
        "Service Time (Hours)" := 0;
        "Starting Date" := 0D;
        "Starting Time" := 0T;
        "Finishing Date" := 0D;
        "Finishing Time" := 0T;

        TestNoSeries;
        NoSeriesMgt.InitSeries(GetNoSeriesCode,'',0D,"No.","No. Series");

        "Quote No." := ServiceHeader."No.";
        RecordLinkManagement.CopyLinks(ServiceHeader,ServOrderHeader);
        InsertServHeader(ServOrderHeader,ServiceHeader);

        ServCommentLine.RESET;
        ServCommentLine.SETRANGE("Table Name",ServCommentLine."Table Name"::"Service Header");
        ServCommentLine.SETRANGE("Table Subtype",ServiceHeader."Document Type");
        ServCommentLine.SETRANGE("No.",ServiceHeader."No.");
        ServCommentLine.SETRANGE("Table Line No.",0);
        IF ServCommentLine.FIND('-') THEN
          REPEAT
            ServCommentLine2 := ServCommentLine;
            ServCommentLine2."Table Subtype" := "Document Type";
            ServCommentLine2."No." := "No.";
            OnBeforeServCommentLineInsert(ServCommentLine2,ServiceHeader,ServOrderHeader);
            ServCommentLine2.INSERT;
          UNTIL ServCommentLine.NEXT = 0;

        ServOrderAlloc.RESET;
        ServOrderAlloc.SETCURRENTKEY("Document Type","Document No.",Status);
        ServOrderAlloc.SETRANGE("Document Type",ServiceHeader."Document Type");
        ServOrderAlloc.SETRANGE("Document No.",ServiceHeader."No.");
        ServOrderAlloc.SETRANGE(Status,ServOrderAlloc.Status::Active);
        WHILE ServOrderAlloc.FINDFIRST DO BEGIN
          ServOrderAlloc."Document Type" := "Document Type";
          ServOrderAlloc."Document No." := "No.";
          ServOrderAlloc."Service Started" := TRUE;
          ServOrderAlloc.Status := ServOrderAlloc.Status::"Reallocation Needed";
          ServOrderAlloc.MODIFY;
        END;

        ServItemLine.RESET;
        ServItemLine.SETRANGE("Document Type",ServiceHeader."Document Type");
        ServItemLine.SETRANGE("Document No.",ServiceHeader."No.");
        IF ServItemLine.FIND('-') THEN
          REPEAT
            ServItemLine2 := ServItemLine;
            ServItemLine2."Document Type" := "Document Type";
            ServItemLine2."Document No." := "No.";
            ServItemLine2."Starting Date" := 0D;
            ServItemLine2."Starting Time" := 0T;
            ServItemLine2."Actual Response Time (Hours)" := 0;
            ServItemLine2."Finishing Date" := 0D;
            ServItemLine2."Finishing Time" := 0T;
            RepairStatus.RESET;
            RepairStatus.SETRANGE(Initial,TRUE);
            IF RepairStatus.FINDFIRST THEN
              ServItemLine2."Repair Status Code" := RepairStatus.Code;
            OnBeforeServiceItemLineInsert(ServItemLine2,ServItemLine);
            ServItemLine2.INSERT(TRUE);
            OnAfterInsertServiceLine(ServItemLine2,ServItemLine);
          UNTIL ServItemLine.NEXT = 0;

        UpdateResponseDateTime;

        LoanerEntry.RESET;
        LoanerEntry.SETCURRENTKEY("Document Type","Document No.");
        LoanerEntry.SETRANGE("Document Type",ServiceHeader."Document Type" + 1);
        LoanerEntry.SETRANGE("Document No.",ServiceHeader."No.");
        WHILE LoanerEntry.FINDFIRST DO BEGIN
          LoanerEntry."Document Type" := "Document Type" + 1;
          LoanerEntry."Document No." := "No.";
          LoanerEntry.MODIFY;
        END;

        ServCommentLine.RESET;
        ServCommentLine.SETRANGE("Table Name",ServCommentLine."Table Name"::"Service Header");
        ServCommentLine.SETRANGE("Table Subtype",ServiceHeader."Document Type");
        ServCommentLine.SETRANGE("No.",ServiceHeader."No.");
        ServCommentLine.SETFILTER("Table Line No.",'>%1',0);
        IF ServCommentLine.FIND('-') THEN
          REPEAT
            ServCommentLine2 := ServCommentLine;
            ServCommentLine2."Table Subtype" := "Document Type";
            ServCommentLine2."No." := "No.";
            ServCommentLine2.INSERT;
          UNTIL ServCommentLine.NEXT = 0;

        ServOrderLine.RESET;
        ServOrderLine.SETRANGE("Document Type",ServiceHeader."Document Type");
        ServOrderLine.SETRANGE("Document No.",ServiceHeader."No.");
        IF ServOrderLine.FIND('-') THEN
          REPEAT
            ServOrderLine2 := ServOrderLine;
            ServOrderLine2."Document Type" := "Document Type";
            ServOrderLine2."Document No." := "No.";
            ServOrderLine2."Posting Date" := "Posting Date";
            OnBeforeServOrderLineInsert(ServOrderLine2,ServOrderLine);
            ServOrderLine2.INSERT;
            ReserveServiceLine.TransServLineToServLine(ServOrderLine,ServOrderLine2,ServOrderLine.Quantity);
          UNTIL ServOrderLine.NEXT = 0;

        ServLogMgt.ServOrderQuoteChanged(ServOrderHeader,ServiceHeader);
        ApprovalsMgmt.CopyApprovalEntryQuoteToOrder(ServiceHeader.RECORDID,"No.",RECORDID);

        SkipDelete := FALSE;
        OnBeforeServLineDeleteAll(ServiceHeader,ServOrderHeader,SkipDelete);
        IF NOT SkipDelete THEN BEGIN
          ApprovalsMgmt.DeleteApprovalEntries(ServiceHeader.RECORDID);
          ServOrderLine.DELETEALL(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE TransferQuoteToOrderLines@9(VAR ServiceQuoteLine@1000 : Record 5902;VAR ServiceQuoteHeader@1001 : Record 5900;VAR ServiceOrderLine@1004 : Record 5902;VAR ServiceOrderHeader@1005 : Record 5900);
    VAR
      ItemCheckAvail@1009 : Codeunit 311;
      IsHandled@1008 : Boolean;
    BEGIN
      ServiceQuoteLine.RESET;
      ServiceQuoteLine.SETRANGE("Document Type",ServiceQuoteHeader."Document Type");
      ServiceQuoteLine.SETRANGE("Document No.",ServiceQuoteHeader."No.");
      ServiceQuoteLine.SETRANGE(Type,ServiceQuoteLine.Type::Item);
      ServiceQuoteLine.SETFILTER("No.",'<>%1','');
      IF ServiceQuoteLine.FINDSET THEN
        REPEAT
          IsHandled := FALSE;
          OnBeforeTransferQuoteLineToOrderLineLoop(ServiceQuoteLine,ServiceQuoteHeader,ServiceOrderHeader,IsHandled);
          IF NOT IsHandled THEN BEGIN
            ServiceOrderLine := ServiceQuoteLine;
            ServiceOrderLine.VALIDATE("Reserved Qty. (Base)",0);
            ServiceOrderLine."Line No." := 0;
            IF GUIALLOWED THEN
              IF ItemCheckAvail.ServiceInvLineCheck(ServiceOrderLine) THEN
                ItemCheckAvail.RaiseUpdateInterruptedError;
          END;
        UNTIL ServiceQuoteLine.NEXT = 0;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRun@2(VAR ServiceHeader@1000 : Record 5900);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertServHeader@5(VAR ServiceHeaderOrder@1000 : Record 5900;ServiceHeaderQuote@1001 : Record 5900);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertServiceLine@7(VAR ServiceItemLine2@1000 : Record 5901;ServiceItemLine@1001 : Record 5901);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeServCommentLineInsert@11(VAR ServiceCommentLine@1000 : Record 5906;ServiceQuoteHeader@1001 : Record 5900;ServiceOrderHeader@1002 : Record 5900);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeServHeaderDelete@10(VAR ServiceHeader@1000 : Record 5900;VAR SkipDelete@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeServLineDeleteAll@6(VAR ServiceHeader@1000 : Record 5900;VAR NewServiceHeader@1002 : Record 5900;VAR SkipDelete@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeServOrderLineInsert@12(VAR ServiceOrderLine2@1000 : Record 5902;ServiceOrderLine@1001 : Record 5902);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeServiceHeaderOrderModify@8(VAR ServiceOrderHeader@1000 : Record 5900;ServiceQuoteHeader@1001 : Record 5900);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeServiceItemLineInsert@14(VAR ServiceItemLine2@1000 : Record 5901;ServiceItemLine@1001 : Record 5901);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTransferQuoteLineToOrderLineLoop@16(VAR ServiceQuoteLine@1007 : Record 5902;VAR ServiceQuoteHeader@1006 : Record 5900;VAR ServiceOrderHeader@1004 : Record 5900;VAR IsHandled@1003 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

