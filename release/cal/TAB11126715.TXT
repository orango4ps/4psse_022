OBJECT Table 11126715 Generic Web Service Queue
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               "Created By" := USERID;
               "Created on" := CURRENTDATETIME
             END;

    OnModify=BEGIN
               "Modified By" := USERID;
               "Modified On" := CURRENTDATETIME;
             END;

    OnDelete=VAR
               GenericWebServiceLog@1100529900 : Record 11126717;
             BEGIN
               IF (Status <> Status::Cancelled) AND (Status <> Status::Processed) THEN
                 FIELDERROR(Status);

               GenericWebServiceLog.SETRANGE("Queue Entry No.", "Entry No.");
               GenericWebServiceLog.DELETEALL(TRUE);
             END;

    CaptionML=ENU=Generic Web Service Queue;
    LookupPageID=Page11126906;
    DrillDownPageID=Page11126906;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;BigInteger    ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Entry No.;
                                                              NOR=L›penummer;
                                                              SVE=L”pnr];
                                                   Editable=No }
    { 20  ;   ;Company Name        ;Text30        ;TableRelation=Company.Name;
                                                   CaptionML=[ENU=Company Name;
                                                              NOR=Navn p† selskap;
                                                              SVE=F”retagsnamn];
                                                   Editable=No }
    { 30  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                IF (xRec.Status = Status::Processed) THEN
                                                                  FIELDERROR(Status);
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              NOR=Status;
                                                              SVE=Status];
                                                   OptionCaptionML=ENU=Open,Processed,Failed,Cancelled;
                                                   OptionString=Open,Processed,Failed,Cancelled }
    { 31  ;   ;Method Name         ;Text50        ;TableRelation="Generic Web Service Method"."Method Name";
                                                   CaptionML=ENU=Method Name;
                                                   Editable=No }
    { 32  ;   ;Priority            ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Generic Web Service Method".Priority WHERE (Method Name=FIELD(Method Name)));
                                                   CaptionML=[ENU=Priority;
                                                              NOR=Prioritet;
                                                              SVE=Prioritet];
                                                   Editable=No }
    { 35  ;   ;Created on          ;DateTime      ;CaptionML=[ENU=Created on;
                                                              NOR=Opprettet den;
                                                              SVE=Skapades];
                                                   Editable=No }
    { 40  ;   ;Modified On         ;DateTime      ;CaptionML=[ENU=Modified on;
                                                              NOR=Endret den;
                                                              SVE=Žndrad den];
                                                   Editable=No }
    { 50  ;   ;Direction           ;Option        ;CaptionML=[ENU=Direction;
                                                              NOR=Retning;
                                                              SVE=Riktning];
                                                   OptionCaptionML=ENU=" ,Inbound,Outbound";
                                                   OptionString=[ ,Inbound,Outbound];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 60  ;   ;Related Record ID   ;RecordID      ;CaptionML=[ENU=Related Record Id;
                                                              SVE=Relaterat post-ID];
                                                   Editable=No }
    { 70  ;   ;Try No.             ;Integer       ;CaptionML=ENU=Try No.;
                                                   Editable=No }
    { 80  ;   ;Xml Message         ;BLOB          ;CaptionML=ENU=XML Message }
    { 90  ;   ;Created By          ;Text50        ;CaptionML=[ENU=Created By;
                                                              NOR=Created By;
                                                              SVE=Skapad av];
                                                   Editable=No }
    { 100 ;   ;Modified By         ;Text50        ;CaptionML=[ENU=Modified By;
                                                              NOR=Modified By;
                                                              SVE=Modified By];
                                                   Editable=No }
    { 103 ;   ;Parameters          ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Gen Web Service Queue Param" WHERE (Entry No.=FIELD(Entry No.)));
                                                   CaptionML=[ENU=Parameters;
                                                              SVE=Parameters];
                                                   Editable=No }
    { 110 ;   ;Method Type         ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Generic Web Service Method"."Connector Type" WHERE (Method Name=FIELD(Method Name)));
                                                   CaptionML=ENU=Method Type;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Company Name,Status,Method Name,Related Record ID }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      MustHaveValueErr@1100528300 : TextConst 'ENU=" must have a value."';
      QueueExistsTxt@1100528500 : TextConst 'ENU=A %1 for %2 already exists.';

    PROCEDURE AddParameter@1100528314(TableNo@1100528301 : Integer;FieldNo@1100528302 : Integer;TextValue@1100528306 : Text;DescriptionTxt@1100528300 : Text);
    VAR
      GenWebServiceQueueParam@1100528303 : Record 11229440;
    BEGIN
      IF (NOT GenWebServiceQueueParam.GET("Entry No.", TableNo, FieldNo)) THEN BEGIN
        GenWebServiceQueueParam .INIT;
        GenWebServiceQueueParam."Entry No." := "Entry No.";
        GenWebServiceQueueParam."Table No" := TableNo;
        GenWebServiceQueueParam."Field No" :=FieldNo;
        GenWebServiceQueueParam.Description := COPYSTR(DescriptionTxt, 1, MAXSTRLEN(GenWebServiceQueueParam.Description));
        GenWebServiceQueueParam.INSERT(TRUE);
      END;
      GenWebServiceQueueParam."Field Value" := COPYSTR(TextValue, 1, MAXSTRLEN(GenWebServiceQueueParam."Field Value"));
      GenWebServiceQueueParam.MODIFY;
    END;

    PROCEDURE CancelQueueEntry@1100529900();
    BEGIN
      IF Status <> Status::Processed THEN BEGIN
        VALIDATE(Status, Status::Cancelled);
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE CheckQueueExists@1100528307(CompName@1100528301 : Text;RelatedRecordId@1100528302 : RecordID;ShowError@1100528303 : Boolean) : Boolean;
    BEGIN
      SETFILTER(Status, '<>%1&<>%2', Status::Cancelled, Status::Processed);
      SETRANGE("Company Name", CompName);
      SETRANGE("Related Record ID", RelatedRecordId);
      IF (FINDFIRST) THEN BEGIN
        IF (ShowError) THEN
          ERROR(QueueExistsTxt, TABLECAPTION, RelatedRecordId);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CheckQueueExistsInclMethodName@1100528308(MethodName@1100528308 : Text;CompName@1100528301 : Text;RelatedRecordId@1100528302 : RecordID;ShowError@1100528303 : Boolean) : Boolean;
    BEGIN
      SETFILTER(Status, '<>%1&<>%2', Status::Cancelled, Status::Processed);
      SETRANGE("Method Name", MethodName);
      SETRANGE("Company Name", CompName);
      SETRANGE("Related Record ID", RelatedRecordId);
      IF (FINDFIRST) THEN BEGIN
        IF (ShowError) THEN
          ERROR(QueueExistsTxt, TABLECAPTION, RelatedRecordId);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CheckQueueExistsInclMethodNameAndParameter@1100528306(MethodName@1100528308 : Text;CompName@1100528301 : Text;RelatedRecordId@1100528302 : RecordID;TableNo@1100528304 : Integer;FieldNo@1100528305 : Integer;FieldValue@1100528307 : Text;ShowError@1100528303 : Boolean) : Boolean;
    VAR
      GenWebServiceQueueParam@1100528306 : Record 11229440;
    BEGIN
      SETFILTER(Status, '<>%1&<>%2', Status::Cancelled, Status::Processed);
      SETRANGE("Method Name", MethodName);
      SETRANGE("Company Name", CompName);
      SETRANGE("Related Record ID", RelatedRecordId);
      IF (NOT FINDSET) THEN
        EXIT(FALSE);

      REPEAT
        GenWebServiceQueueParam.SETRANGE("Entry No.", "Entry No.");
        GenWebServiceQueueParam.SETRANGE("Table No", TableNo);
        GenWebServiceQueueParam.SETRANGE("Field No", FieldNo);
        GenWebServiceQueueParam.SETRANGE("Field Value", FieldValue);
        IF (NOT GenWebServiceQueueParam.ISEMPTY) THEN BEGIN
          IF (ShowError) THEN
            ERROR(QueueExistsTxt, TABLECAPTION, RelatedRecordId);
          EXIT(TRUE);
        END;
      UNTIL (NEXT = 0);
      EXIT(FALSE);
    END;

    PROCEDURE CreateNewQueueEntry@1100525003(MethodName@1100525001 : Text;RelatedRecordId@1100529902 : RecordID;DirectionIn@1100529900 : Option;CompanyIn@1100529901 : Text);
    VAR
      RecId@1100529904 : RecordID;
    BEGIN
      INIT;
      "Entry No." := 0;
      "Method Name" := MethodName;
      Direction := DirectionIn;
      "Company Name" := CompanyIn;
      IF (RelatedRecordId <> RecId) THEN
        "Related Record ID" := RelatedRecordId;
      INSERT(TRUE);
    END;

    PROCEDURE GetParameter@1100528500(TableNo@1100528301 : Integer;FieldNo@1100528302 : Integer) : Text;
    VAR
      GenWebServiceQueueParam@1100528303 : Record 11229440;
    BEGIN
      IF (GenWebServiceQueueParam.GET("Entry No.", TableNo, FieldNo)) THEN
        EXIT(GenWebServiceQueueParam."Field Value");
      EXIT('');
    END;

    PROCEDURE GetXmlMessage@1100528301(VAR DnXmlDocument@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      OStream@1100528300 : OutStream;
    BEGIN
      IF (NOT "Xml Message".HASVALUE) THEN
        FIELDERROR("Xml Message", MustHaveValueErr);

      CALCFIELDS("Xml Message");
      "Xml Message".CREATEOUTSTREAM(OStream);
      DnXmlDocument := DnXmlDocument.XmlDocument();
      DnXmlDocument.Load(OStream);
    END;

    [External]
    PROCEDURE ReopenProcessQueueEntry@1100528309();
    BEGIN
      IF (Status = Status::Cancelled) OR (Status = Status::Processed) THEN BEGIN
        VALIDATE(Status, Status::Open);
        "Try No." := 0;
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE ShowXMLMessage@1100528801();
    VAR
      TempXMLBuffer@1100528301 : TEMPORARY Record 1235;
      XMLViewer4PS@1100528300 : Page 11129908;
      IStream@1100528302 : InStream;
    BEGIN
      IF (NOT "Xml Message".HASVALUE) THEN
        FIELDERROR("Xml Message", MustHaveValueErr);

      CALCFIELDS("Xml Message");
      "Xml Message".CREATEINSTREAM(IStream);
      TempXMLBuffer.Load(IStream);
      XMLViewer4PS.SetTempTable(TempXMLBuffer);
      XMLViewer4PS.SetShowAttributes(FALSE);
      XMLViewer4PS.RUN;
    END;

    LOCAL PROCEDURE "---Locals---"@1100528300();
    BEGIN
    END;

    BEGIN
    END.
  }
}

