OBJECT Codeunit 11125674 Estimate Buffer Mgt RAW
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Gap@1100485015 : Integer;
      MarkNo@1100485014 : Integer;
      CurrLino@1100485013 : Integer;
      PrevLino@1100485012 : Integer;
      gvEstimate@1100485011 : Code[20];
      gvParagraph@1100485008 : Code[20];
      gvEstimateLine@1100485007 : Integer;
      SkipMark@1100485003 : Boolean;
      Text001@1100485016 : TextConst 'DEU=%1 Zeilen kopiert;ENU=%1 Lines copied;NLD=%1 regels gekopieerd;SVE=%1 rader har kopierats';
      SelectDest@1100485000 : Boolean;
      gvDest@1100485001 : Integer;
      Text002@1100525000 : TextConst 'DEU=Markieren Sie zuerst die Datens„tze mit Ctrl+F1;ENU=First select line(s).;NLD=Selecteer eerst regel(s).;SVE=V„lj f”rst rad(er).';
      Text003@1100528900 : TextConst 'DEU=Nur Austausch zwischen Standardteilen zul„ssig.;ENU=Only exchange between standard parts allowed.;NLD=Alleen uitwisseling tussen standaard onderdelen toegestaan.';
      ApplySort@1100528901 : Boolean;

    PROCEDURE CopyToBuffer@1210190005(VAR EstimateLineRAW@1100485000 : Record 11125698);
    VAR
      EstimateLineRAW2@1100485001 : Record 11125698;
      EstimateBufferLineRAW@1100485006 : Record 11125699;
    BEGIN
      EstimateLineRAW2.COPY(EstimateLineRAW);
      WITH EstimateLineRAW2 DO BEGIN
        IF NOT FINDSET THEN BEGIN
          MESSAGE(Text002);
        END ELSE BEGIN
          REPEAT
            EstimateBufferLineRAW.INIT;
            EstimateBufferLineRAW."User ID" := USERID;
            EstimateBufferLineRAW."Estimate No." := "Estimate No.";
            EstimateBufferLineRAW."Tender Paragraph No." := "Tender Paragraph No.";
            EstimateBufferLineRAW."Estimate Line" := "Line No.";
            EstimateBufferLineRAW.Description := Description;
            EstimateBufferLineRAW.FillDateTimeCreated;
            IF EstimateBufferLineRAW.INSERT THEN BEGIN
              EstimateBufferLineRAW.Description := Description;
              EstimateBufferLineRAW.MODIFY;
            END;
          UNTIL NEXT = 0;
        END;
      END;
      EstimateLineRAW.CLEARMARKS;
    END;

    PROCEDURE CopyFromBuffer@1210190006(EstimateLineRAW@1100485000 : Record 11125698);
    VAR
      EstimateBufferLineRAW@1100485004 : Record 11125699;
    BEGIN
      WITH EstimateLineRAW DO
        SetSelection("Estimate No.", "Tender Paragraph No.", "Line No.", TRUE, FALSE);

      CopyLines(EstimateBufferLineRAW);
    END;

    PROCEDURE ShowBuffer@1210190007(EstimateLineRAW@1100485000 : Record 11125698);
    VAR
      EstimateBufferLineRAW@1100485004 : Record 11125699;
      EstimateBufferListRAW@1100525000 : Page 11126879;
    BEGIN
      EstimateBufferLineRAW.FILTERGROUP(2);
      EstimateBufferLineRAW.SETRANGE("User ID", USERID);
      EstimateBufferLineRAW.FILTERGROUP(0);

      WITH EstimateLineRAW DO
        EstimateBufferListRAW.SetSelection("Estimate No.", "Tender Paragraph No.", "Line No.", FALSE);

      EstimateBufferListRAW.SETTABLEVIEW(EstimateBufferLineRAW);
      EstimateBufferListRAW.RUNMODAL;
      CLEAR(EstimateBufferListRAW);
    END;

    PROCEDURE SetSelection@1210190004(iEstimate@1210190000 : Code[20];iParagraph@1210190003 : Code[20];iEstimateLine@1210190004 : Integer;iSkipMark@1100485003 : Boolean;iSelectDest@1100485004 : Boolean);
    BEGIN
      gvEstimate := iEstimate;
      gvParagraph := iParagraph;
      gvEstimateLine := iEstimateLine;
      SkipMark := iSkipMark;
      SelectDest := iSelectDest;

      IF gvEstimate = '' THEN BEGIN
        gvDest := 20;
      END ELSE BEGIN
        gvDest := 0;
      END;
    END;

    PROCEDURE SetApplySort@1100528900(iApplySort@1100528900 : Boolean);
    BEGIN
      ApplySort := iApplySort;
    END;

    PROCEDURE SortBufferLines@1100528902();
    VAR
      EstimateBufferLineRAW@1100528901 : Record 11125699;
      EstimateBufferLineRAW2@1100528900 : Record 11125699;
      LastNo@1100528903 : Integer;
    BEGIN
      EstimateBufferLineRAW.SETCURRENTKEY("User ID", "Estimate No.");
      EstimateBufferLineRAW.SETRANGE("User ID", USERID);
      EstimateBufferLineRAW.MODIFYALL("Seq. No.", 0);
      //
      EstimateBufferLineRAW.SETCURRENTKEY("User ID", "Seq. No.", "Date-Time Created");
      EstimateBufferLineRAW.SETRANGE("Seq. No.", 0);
      IF EstimateBufferLineRAW.FINDSET THEN BEGIN
        REPEAT
          EstimateBufferLineRAW2 := EstimateBufferLineRAW;
          EstimateBufferLineRAW2."Seq. No." := LastNo + 1;
          LastNo := EstimateBufferLineRAW2."Seq. No.";
          EstimateBufferLineRAW2.MODIFY;
        UNTIL EstimateBufferLineRAW.NEXT = 0;
      END;
    END;

    PROCEDURE CopyLines@1210190000(VAR EstimateBufferLineRAW@1100485004 : Record 11125699);
    VAR
      Estimate@1210190002 : Record 11012151;
      EstimateParagraphRAW@1210190000 : Record 11125679;
      OrigEstimateLineRAW@1210190001 : Record 11125698;
      DestEstimateLineRAW@1210190003 : Record 11125698;
      EstimateBufferLineRAW2@1100528500 : Record 11125699;
    BEGIN
      EstimateBufferLineRAW2.COPY(EstimateBufferLineRAW);
      WITH EstimateBufferLineRAW2 DO BEGIN
        IF ApplySort THEN
          SETCURRENTKEY("User ID", "Seq. No.", "Date-Time Created");
        IF SkipMark = TRUE THEN BEGIN
          SETRANGE("User ID", USERID);
          SETRANGE(Store, FALSE);
          IF NOT FINDSET THEN
            EXIT;
        END ELSE BEGIN
          IF NOT FINDSET THEN BEGIN
            MESSAGE(Text002);
            EXIT;
          END;
        END;

        MarkNo := COUNT;
        CurrLino := 0;
        PrevLino := 0;
        Gap := 0;

        CASE gvDest OF
          0:  //estimate line
            BEGIN
              EstimateParagraphRAW."Estimate No." := gvEstimate;
              EstimateParagraphRAW."Tender Paragraph No." := gvParagraph;
              IF SelectDest THEN BEGIN
                EstimateParagraphRAW.SETRANGE("Estimate No.", gvEstimate);
                IF PAGE.RUNMODAL(0, EstimateParagraphRAW) <> ACTION::LookupOK THEN EXIT;
              END ELSE BEGIN
                CurrLino := gvEstimateLine;
              END;
              DetermineLino(
                EstimateParagraphRAW."Estimate No.", EstimateParagraphRAW."Tender Paragraph No.", CurrLino);
              Estimate.GET(EstimateParagraphRAW."Estimate No.");
              Estimate.TESTFIELD(Fixed, FALSE);
            END;
        END;

        REPEAT
          IF gvEstimate <> '' THEN BEGIN
            //bestemming: calculatieregel
            //oorsprong: calculatieregel
            IF OrigEstimateLineRAW.GET("Estimate No.", "Tender Paragraph No.", "Estimate Line") THEN
            BEGIN
              DestEstimateLineRAW := OrigEstimateLineRAW;
              DestEstimateLineRAW."Estimate No." := EstimateParagraphRAW."Estimate No.";
              DestEstimateLineRAW."Tender Paragraph No." := EstimateParagraphRAW."Tender Paragraph No.";
              DestEstimateLineRAW."Line No." := CurrLino + Gap;
              CurrLino := DestEstimateLineRAW."Line No.";
              DestEstimateLineRAW.INSERT(TRUE);
              DestEstimateLineRAW.Description := OrigEstimateLineRAW.Description;
              DestEstimateLineRAW."Unit of Measure" := OrigEstimateLineRAW."Unit of Measure";
              DestEstimateLineRAW."Price Agreement" := OrigEstimateLineRAW."Price Agreement";
              DestEstimateLineRAW.Norm := OrigEstimateLineRAW.Norm;
              DestEstimateLineRAW."Production Rate" := OrigEstimateLineRAW."Production Rate";
              DestEstimateLineRAW.CalculateTotals;
              DestEstimateLineRAW.MODIFY;
              CopyDetails(
                OrigEstimateLineRAW."Estimate No.", OrigEstimateLineRAW."Tender Paragraph No.", OrigEstimateLineRAW."Line No.",
                DestEstimateLineRAW."Estimate No.", DestEstimateLineRAW."Tender Paragraph No.", DestEstimateLineRAW."Line No.");
            END;
          END;
        UNTIL NEXT = 0;

        IF SkipMark = TRUE THEN BEGIN
          DELETEALL;
        END ELSE BEGIN
          MARKEDONLY(FALSE);
          MESSAGE(Text001, MarkNo);
        END;
      END;
      EstimateBufferLineRAW.CLEARMARKS;
    END;

    PROCEDURE DetermineLino@1100485003(iEstimate@1100485008 : Code[20];iParagraph@1100485005 : Code[20];iEstimateLine@1100485004 : Integer);
    VAR
      EstimateLineRAW@1100485000 : Record 11125698;
    BEGIN
      WITH EstimateLineRAW DO BEGIN
        LOCKTABLE;
        SETRANGE("Estimate No.", iEstimate);
        SETRANGE("Tender Paragraph No.", iParagraph);
        IF GET(iEstimate, iParagraph, CurrLino) THEN BEGIN
          SETFILTER("Line No.", '<%1', CurrLino);
          IF FINDLAST THEN PrevLino := "Line No.";
          SETRANGE("Line No.");
          CheckGap;
        END;
        IF Gap = 0 THEN BEGIN
          Gap := 10000;
          IF FINDLAST THEN
            CurrLino := "Line No.";
        END;
      END;
    END;

    PROCEDURE CheckGap@1100485002();
    BEGIN
      Gap := ROUND((CurrLino - PrevLino) / (MarkNo + 1), 1);
      IF (Gap * MarkNo) >= (CurrLino - PrevLino) THEN Gap := 0;
      CurrLino := PrevLino;
    END;

    PROCEDURE CopyDetails@1100528901(EstFrom@1210190013 : Code[20];EstParagraphFrom@1210190007 : Code[20];EstLineFrom@1210190005 : Integer;EstTo@1210190012 : Code[20];EstParagraphTo@1210190006 : Code[20];EstLineTo@1210190004 : Integer);
    VAR
      EstimateCode@1100528913 : Record 11229772;
      EstimateCode2@1100528912 : Record 11229772;
      EstimateApplianceCodeRAW@1100528900 : Record 11125697;
      EstimateApplianceCodeRAW1@1100528901 : Record 11125697;
      EstimateApplianceCodeRAW2@1100528902 : Record 11125697;
    BEGIN
      EstimateCode.SETRANGE("Estimate No.",EstFrom);
      EstimateCode.SETRANGE("Tender Paragraph No.",EstParagraphFrom);
      EstimateCode.SETRANGE("Estimate Line",EstLineFrom);
      IF EstimateCode.FINDSET THEN BEGIN
        REPEAT
          EstimateCode2.COPY(EstimateCode);
          EstimateCode2."Estimate No." := EstTo;
          EstimateCode2."Tender Paragraph No." := EstParagraphTo;
          EstimateCode2."Estimate Line" := EstLineTo;
          EstimateCode2.INSERT;
        UNTIL EstimateCode.NEXT = 0;
      END;

      EstimateApplianceCodeRAW.SETRANGE("Estimate No.",EstFrom);
      EstimateApplianceCodeRAW.SETRANGE("Tender Paragraph No.",EstParagraphFrom);
      EstimateApplianceCodeRAW.SETRANGE("Line No.",EstLineFrom);
      IF EstimateApplianceCodeRAW.FINDSET THEN BEGIN
        REPEAT
          EstimateApplianceCodeRAW1.SETCURRENTKEY("Estimate No.", "Appliance Code");
          EstimateApplianceCodeRAW1.SETRANGE("Estimate No.", EstTo);
          EstimateApplianceCodeRAW1.SETRANGE("Appliance Code", EstimateApplianceCodeRAW."Appliance Code");
          IF EstimateApplianceCodeRAW1.ISEMPTY THEN BEGIN
            EstimateApplianceCodeRAW2.COPY(EstimateApplianceCodeRAW);
            EstimateApplianceCodeRAW2."Estimate No." := EstTo;
            EstimateApplianceCodeRAW2."Tender Paragraph No." := EstParagraphTo;
            EstimateApplianceCodeRAW2."Line No." := EstLineTo;
            EstimateApplianceCodeRAW2.INSERT;
          END;
        UNTIL EstimateApplianceCodeRAW.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

