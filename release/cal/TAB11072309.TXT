OBJECT Table 11072309 Service Prognosis
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               ServicePrognosisManagement@1100528600 : Codeunit 11012884;
             BEGIN
               ServicePrognosisManagement.TestRealTimeControlMethod;
               TESTFIELD("Prognosis Date");
               TESTFIELD("Seq. No.");
               "Created on" := TODAY;
               "Created by" := USERID;
             END;

    OnDelete=VAR
               ServicePrognosisLine@1100528600 : Record 11072310;
             BEGIN
               ServicePrognosisLine.SETRANGE("Prognosis Date", "Prognosis Date");
               ServicePrognosisLine.SETRANGE("Prognosis Seq. No.", "Seq. No.");
               ServicePrognosisLine.DELETEALL(TRUE);
             END;

    OnRename=BEGIN
               ERROR(Text001, TABLECAPTION);
             END;

    CaptionML=ENU=Service Prognosis;
    LookupPageID=Page11126798;
    DrillDownPageID=Page11126798;
  }
  FIELDS
  {
    { 10  ;   ;Prognosis Date      ;Date          ;OnValidate=VAR
                                                                ServicePrognosis@1100528600 : Record 11072309;
                                                              BEGIN
                                                                IF "Prognosis Date" <> 0D THEN BEGIN
                                                                  ServicePrognosis.SETRANGE("Prognosis Date", "Prognosis Date");
                                                                  IF ServicePrognosis.FINDLAST THEN
                                                                    "Seq. No." := ServicePrognosis."Seq. No.";
                                                                  "Seq. No." += 1;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prognosis Date;
                                                              NOR=Prognosedato;
                                                              SVE=Prognosdatum];
                                                   NotBlank=Yes }
    { 15  ;   ;Seq. No.            ;Integer       ;CaptionML=[ENU=Seq. No.;
                                                              NOR=Sekv. nr;
                                                              SVE=Sekv. nr];
                                                   NotBlank=Yes }
    { 20  ;   ;Description         ;Text30        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 30  ;   ;Created on          ;Date          ;CaptionML=[ENU=Created on;
                                                              NOR=Opprettet den;
                                                              SVE=Skapades];
                                                   Editable=No }
    { 40  ;   ;Created by          ;Text50        ;TableRelation=User."User Name";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Created by;
                                                              NOR=Opprettet av;
                                                              SVE=Skapades av];
                                                   Editable=No }
    { 50  ;   ;Fixed               ;Boolean       ;OnValidate=VAR
                                                                UserSetup@1100529600 : Record 91;
                                                              BEGIN
                                                                IF (NOT Fixed) AND xRec.Fixed THEN BEGIN
                                                                  UserSetup.GET(USERID);
                                                                  UserSetup.TESTFIELD("No Access S&O Frozen Prognosis", FALSE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Fixed;
                                                              SVE=Fast] }
    { 100 ;   ;Service Contract Filter;Text250    ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Service Contract Filter;
                                                              NOR=Servicekontraktsfilter;
                                                              SVE=Servicekontraktsfilter] }
  }
  KEYS
  {
    {    ;Prognosis Date,Seq. No.                 ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100528602 : TextConst 'ENU=You cannot rename a %1.;NOR=Du kan ikke gi nytt navn til en %1.;SVE=Du kan inte byta namn p† %1.';
      RestOfContract@1100529622 : Boolean;
      RestOfContractEditable@1100529623 : Boolean;
      RestOfContractStartingDate@1100529620 : Date;
      RestOfContractEndingDate@1100529621 : Date;

    PROCEDURE AddPrognosisLine@1100528600(IServiceContractNo@1100528604 : Code[20];IControlPeriodCode@1100528603 : Code[20];ILineType@1100528602 : Option;IServiceCategory@1100528607 : Code[10];ISourceType@1100528605 : Option;IServiceOrderNo@1100528606 : Code[20];VAR IOLastLineNo@1100528601 : Integer;ITotalBudgetRevenueContract@1100528608 : Decimal;IGlobalDim1Code@1100529600 : Code[20]);
    VAR
      ServicePrognosisLine@1100528600 : Record 11072310;
    BEGIN
      ServicePrognosisLine.SetTotalBudgetRevenueContract(ITotalBudgetRevenueContract);
      ServicePrognosisLine."Prognosis Date" := "Prognosis Date";
      ServicePrognosisLine."Prognosis Seq. No." := "Seq. No.";
      ServicePrognosisLine.VALIDATE("Service Contract No.", IServiceContractNo);
      IF RestOfContract THEN BEGIN
        ServicePrognosisLine."Control Period Code" := '';
        ServicePrognosisLine."Rest of Contract" := TRUE;
        ServicePrognosisLine."Rest of Contract Editable" := RestOfContractEditable;
        ServicePrognosisLine."Starting Date" := RestOfContractStartingDate;
        ServicePrognosisLine."Ending Date" := RestOfContractEndingDate;
      END ELSE
        ServicePrognosisLine.VALIDATE("Control Period Code", IControlPeriodCode);
      ServicePrognosisLine."Line Type" := ILineType;
      ServicePrognosisLine.VALIDATE("Service Category", IServiceCategory);
      ServicePrognosisLine."Source Type" := ISourceType;
      ServicePrognosisLine.VALIDATE("Service Order No.", IServiceOrderNo);
      IOLastLineNo += 10000;
      ServicePrognosisLine."Line No." := IOLastLineNo;
      ServicePrognosisLine."Global Dimension 1 Code" := IGlobalDim1Code;
      ServicePrognosisLine.INSERT(TRUE);
    END;

    PROCEDURE IsContractOnOtherPrognosisSeqNo@1100528601(IServiceContractNo@1100528600 : Code[20];GlobalDim1Code@1100529600 : Code[20];VAR OOtherPrognosisSeqNo@1100528602 : Integer) : Boolean;
    VAR
      ServicePrognosisLine@1100528601 : Record 11072310;
    BEGIN
      ServicePrognosisLine.SETRANGE("Prognosis Date", "Prognosis Date");
      ServicePrognosisLine.SETRANGE("Service Contract No.", IServiceContractNo);
      IF IServiceContractNo = '' THEN
        ServicePrognosisLine.SETRANGE("Global Dimension 1 Code", GlobalDim1Code);
      IF ServicePrognosisLine.FINDFIRST THEN BEGIN
        OOtherPrognosisSeqNo := ServicePrognosisLine."Prognosis Seq. No.";
        EXIT(TRUE);
      END;
    END;

    PROCEDURE AddTotalSOPrognosisLine@1100529621(IServiceContractNo@1100528604 : Code[20];IControlPeriodCode@1100528603 : Code[20];ILineType@1100528602 : Option;IServiceCategory@1100528607 : Code[10];ISourceType@1100528605 : Option;IServiceOrderNo@1100528606 : Code[20];VAR IOLastLineNo@1100528601 : Integer);
    VAR
      ServicePrognosisLine@1100528600 : Record 11072310;
    BEGIN
      ServicePrognosisLine."Prognosis Date" := "Prognosis Date";
      ServicePrognosisLine."Prognosis Seq. No." := "Seq. No.";
      ServicePrognosisLine.VALIDATE("Service Contract No.", IServiceContractNo);
      IF RestOfContract THEN BEGIN
        ServicePrognosisLine."Control Period Code" := '';
        ServicePrognosisLine."Rest of Contract" := TRUE;
        ServicePrognosisLine."Rest of Contract Editable" := RestOfContractEditable;
        ServicePrognosisLine."Starting Date" := RestOfContractStartingDate;
        ServicePrognosisLine."Ending Date" := RestOfContractEndingDate;
      END ELSE
        ServicePrognosisLine.VALIDATE("Control Period Code", IControlPeriodCode);
      ServicePrognosisLine."Line Type" := ILineType;
      ServicePrognosisLine."Service Category" := IServiceCategory;
      ServicePrognosisLine."Source Type" := ISourceType;
      ServicePrognosisLine.VALIDATE("Service Order No.", IServiceOrderNo);
      ServicePrognosisLine."Total Service Order Level" := TRUE;
      IOLastLineNo += 10000;
      ServicePrognosisLine."Line No." := IOLastLineNo;
      ServicePrognosisLine.INSERT(TRUE);
    END;

    PROCEDURE SetRestOfContract@1100529620(NewRestOfContract@1100529622 : Boolean;NewRestOfContractStartingDate@1100529621 : Date;NewRestOfContractEndingDate@1100529620 : Date);
    BEGIN
      RestOfContract := NewRestOfContract;
      RestOfContractStartingDate := NewRestOfContractStartingDate;
      RestOfContractEndingDate := NewRestOfContractEndingDate;
      RestOfContractEditable := FALSE;
    END;

    PROCEDURE SetRestOfContractEditable@1100529622(NewRestOfContractEditable@1100529620 : Boolean);
    BEGIN
      RestOfContractEditable := NewRestOfContractEditable;
    END;

    BEGIN
    END.
  }
}

