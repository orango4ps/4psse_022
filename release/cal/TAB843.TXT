OBJECT Table 843 Cash Flow Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.01,4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 1261=rimd;
    CaptionML=[ENU=Cash Flow Setup;
               NOR=Kontantstrõmoppsett;
               SVE=KassaflîdesinstÑllningar];
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=[ENU=Primary Key;
                                                              NOR=Primërnõkkel;
                                                              SVE=PrimÑrnyckel] }
    { 2   ;   ;Cash Flow Forecast No. Series;Code20;
                                                   TableRelation="No. Series";
                                                   CaptionML=[ENU=Cash Flow Forecast No. Series;
                                                              NOR=Nummerserie for kontantstrõm;
                                                              SVE=Nummerserie fîr kassaflîdesprognos] }
    { 3   ;   ;Receivables CF Account No.;Code20  ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("Receivables CF Account No.");
                                                              END;

                                                   CaptionML=[ENU=Receivables CF Account No.;
                                                              NOR=KS-kontonummer for kundekonto;
                                                              SVE=BK-kontonummer fîr kundreskontra] }
    { 4   ;   ;Payables CF Account No.;Code20     ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("Payables CF Account No.");
                                                              END;

                                                   CaptionML=[ENU=Payables CF Account No.;
                                                              NOR=KS-kontonummer for leverandõrkonto;
                                                              SVE=BK-kontonummer fîr leverantîrsreskontra] }
    { 5   ;   ;Sales Order CF Account No.;Code20  ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("Sales Order CF Account No.");
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Sales Order CF Account No.;
                                                              NOR=KS-kontonummer for salgsordre;
                                                              SVE=BK-kontonummer fîr fîrsÑljningsorder] }
    { 6   ;   ;Purch. Order CF Account No.;Code20 ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("Purch. Order CF Account No.");
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Purch. Order CF Account No.;
                                                              NOR=KS-kontonummer for bestilling;
                                                              SVE=BK-kontonummer fîr inkîpsorder] }
    { 8   ;   ;FA Budget CF Account No.;Code20    ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("FA Budget CF Account No.");
                                                              END;

                                                   AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=FA Budget CF Account No.;
                                                              NOR=KS-kontonummer for aktivabudsjett;
                                                              SVE=BK-kontonummer fîr FA-budget] }
    { 9   ;   ;FA Disposal CF Account No.;Code20  ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("FA Disposal CF Account No.");
                                                              END;

                                                   AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=FA Disposal CF Account No.;
                                                              NOR=KS-kontonummer for aktivasalg;
                                                              SVE=BK-kontonummer fîr FA-avyttring] }
    { 10  ;   ;Service CF Account No.;Code20      ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("Service CF Account No.");
                                                              END;

                                                   AccessByPermission=TableData 5900=R;
                                                   CaptionML=[ENU=Service CF Account No.;
                                                              NOR=KS-kontonummer for service;
                                                              SVE=BK-kontonummer fîr service] }
    { 11  ;   ;CF No. on Chart in Role Center;Code20;
                                                   OnValidate=BEGIN
                                                                IF NOT ConfirmedChartRoleCenterCFNo("CF No. on Chart in Role Center") THEN
                                                                  "CF No. on Chart in Role Center" := xRec."CF No. on Chart in Role Center";
                                                              END;

                                                   CaptionML=[ENU=CF No. on Chart in Role Center;
                                                              NOR=KS-nummer pÜ diagram i rollesenter;
                                                              SVE=BK-nummer i diagram i rollcenter] }
    { 12  ;   ;Job CF Account No.  ;Code20        ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("Job CF Account No.");
                                                              END;

                                                   AccessByPermission=TableData 11020401=R;
                                                   CaptionML=[ENU=Job CF Account No.;
                                                              NOR=KS-kontonummer for prosjekt;
                                                              SVE=Kassaflîdeskontonummer fîr projekt] }
    { 13  ;   ;Automatic Update Frequency;Option  ;OnValidate=VAR
                                                                CashFlowManagement@1000 : Codeunit 841;
                                                              BEGIN
                                                                IF "Automatic Update Frequency" = xRec."Automatic Update Frequency" THEN
                                                                  EXIT;

                                                                CashFlowManagement.DeleteJobQueueEntries;
                                                                CashFlowManagement.CreateAndStartJobQueueEntry("Automatic Update Frequency");
                                                              END;

                                                   CaptionML=[ENU=Automatic Update Frequency;
                                                              NOR=Hyppighet for automatisk oppdatering;
                                                              SVE=Automatisk uppdateringsfrekvens];
                                                   OptionCaptionML=[ENU=Never,Daily,Weekly;
                                                                    NOR=Aldri,Daglig,Ukentlig;
                                                                    SVE=Aldrig,Dagligen,Veckovis];
                                                   OptionString=Never,Daily,Weekly }
    { 14  ;   ;Tax CF Account No.  ;Code20        ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("Tax CF Account No.");
                                                              END;

                                                   AccessByPermission=TableData 254=R;
                                                   CaptionML=[ENU=Tax CF Account No.;
                                                              NOR=KS-kontonummer for mva;
                                                              SVE=Kassaflîdeskontonummer fîr skatt] }
    { 19  ;   ;Taxable Period      ;Option        ;InitValue=Quarterly;
                                                   CaptionML=[ENU=Taxable Period;
                                                              NOR=Mva-pliktig periode;
                                                              SVE=Beskattningsbar period];
                                                   OptionCaptionML=[ENU=Monthly,Quarterly,Accounting Period,Yearly;
                                                                    NOR=MÜnedlig,Kvartalsmessig,Regnskapsperiode,èrlig;
                                                                    SVE=MÜnadsvis,Kvartalsvis,Bokfîringsperiod,èrsvis];
                                                   OptionString=Monthly,Quarterly,Accounting Period,Yearly }
    { 20  ;   ;Tax Payment Window  ;DateFormula   ;CaptionML=[ENU=Tax Payment Window;
                                                              NOR=Avgiftsbetalingsvindu;
                                                              SVE=Skattebetalningsfînster] }
    { 21  ;   ;Tax Bal. Account Type;Option       ;OnValidate=BEGIN
                                                                EmptyTaxBalAccountIfTypeChanged(xRec."Tax Bal. Account Type");
                                                              END;

                                                   CaptionML=[ENU=Tax Bal. Account Type;
                                                              NOR=Motkontotype for avgifter;
                                                              SVE=Kontotyp fîr momssaldo];
                                                   OptionCaptionML=[ENU=" ,Vendor,G/L Account";
                                                                    NOR=" ,Leverandõr,Finanskonto";
                                                                    SVE=" ,Leverantîr,redovisningskonto"];
                                                   OptionString=[ ,Vendor,G/L Account] }
    { 22  ;   ;Tax Bal. Account No.;Code20        ;TableRelation=IF (Tax Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Tax Bal. Account Type=CONST(Vendor)) Vendor;
                                                   CaptionML=[ENU=Tax Bal. Account No.;
                                                              NOR=Motkontonr. for avgifter;
                                                              SVE="Kontonr fîr skattesaldo "] }
    { 23  ;   ;API Key             ;Text250       ;OnValidate=BEGIN
                                                                IF NOT ISNULLGUID("Service Pass API Key ID") THEN
                                                                  EnableEncryption;
                                                                SaveUserDefinedAPIKey("API Key");
                                                              END;

                                                   CaptionML=[ENU=API Key;
                                                              NOR=API-nõkkel;
                                                              SVE=API-nyckel] }
    { 24  ;   ;API URL             ;Text250       ;CaptionML=[ENU=API URL;
                                                              NOR=URL-adresse for API;
                                                              SVE=API-URL] }
    { 25  ;   ;Variance %          ;Integer       ;InitValue=35;
                                                   CaptionML=[ENU=Variance %;
                                                              NOR=Avviks-%;
                                                              SVE=Varians %];
                                                   MinValue=1;
                                                   MaxValue=100 }
    { 26  ;   ;Historical Periods  ;Integer       ;InitValue=24;
                                                   CaptionML=[ENU=Historical Periods;
                                                              NOR=Historiske perioder;
                                                              SVE=Historiska perioder];
                                                   MinValue=5;
                                                   MaxValue=24 }
    { 27  ;   ;Horizon             ;Integer       ;InitValue=4;
                                                   CaptionML=[ENU=Horizon;
                                                              NOR=Horisont;
                                                              SVE=Horisont];
                                                   MinValue=3;
                                                   MaxValue=24 }
    { 28  ;   ;Period Type         ;Option        ;InitValue=Month;
                                                   CaptionML=[ENU=Period Type;
                                                              NOR=Periodetype;
                                                              SVE=Periodtyp];
                                                   OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year;
                                                                    NOR=Dag,Uke,MÜned,Kvartal,èr;
                                                                    SVE=Dag,Vecka,MÜnad,Kvartal,èr];
                                                   OptionString=Day,Week,Month,Quarter,Year }
    { 29  ;   ;TimeOut             ;Integer       ;InitValue=120;
                                                   CaptionML=[ENU=TimeOut;
                                                              NOR=Tidsavbrudd;
                                                              SVE=TimeOut];
                                                   MinValue=1 }
    { 30  ;   ;Service Pass API Key ID;GUID       ;TableRelation="Service Password".Key;
                                                   CaptionML=[ENU=Service Pass API Key ID;
                                                              NOR=ID for API-nõkkel for tjenestepassord;
                                                              SVE=API-nyckel-ID fîr tjÑnstens lîsenord];
                                                   Description=The Key for retrieving the API Key from the Service Password table. }
    { 31  ;   ;Cortana Intelligence Enabled;Boolean;
                                                   InitValue=No;
                                                   CaptionML=[ENU=Cortana Intelligence Enabled;
                                                              NOR=Cortana Intelligence aktivert;
                                                              SVE=Cortana Intelligence aktiverat] }
    { 32  ;   ;Show Cortana Notification;Boolean  ;InitValue=Yes;
                                                   CaptionML=[ENU=Show Cortana Notification;
                                                              NOR=Vis Cortana-varsling;
                                                              SVE=Visa Cortana-meddelande] }
    { 33  ;   ;Time Series Model   ;Option        ;CaptionML=[ENU=Time Series Model;
                                                              NOR=Tidsseriemodell];
                                                   OptionCaptionML=[@@@={Locked};
                                                                    ENU=ARIMA,ETS,STL,ETS+ARIMA,ETS+STL,ALL,TBATS;
                                                                    NOR=ARIMA,ETS,STL,ETS+ARIMA,ETS+STL,ALL,TBATS];
                                                   OptionString=ARIMA,ETS,STL,ETS+ARIMA,ETS+STL,ALL,TBATS }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1000 : TextConst '@@@=Cash Flow <No.> <Description> is shown in the chart on the Role Center.;ENU=Cash Flow Forecast %1 %2 is shown in the chart on the Role Center. Do you want to show this Cash Flow Forecast instead?;NOR=Kontantstrõmprognosen %1 %2 vises i diagrammet i rollesenteret. Vil du vise denne kontantstrõmprognosen i stedet?;SVE=Kassaflîdesprognos %1 %2 visas i diagrammet i rollcentret. Vill du visa kassaflîdesprognosen i stÑllet?';

    LOCAL PROCEDURE CheckAccType@1(Code@1000 : Code[20]);
    VAR
      CFAccount@1001 : Record 841;
    BEGIN
      IF Code <> '' THEN BEGIN
        CFAccount.GET(Code);
        CFAccount.TESTFIELD("Account Type",CFAccount."Account Type"::Entry);
      END;
    END;

    [External]
    PROCEDURE SetChartRoleCenterCFNo@11(CashFlowNo@1000 : Code[20]);
    BEGIN
      GET;
      "CF No. on Chart in Role Center" := CashFlowNo;
      MODIFY;
    END;

    [External]
    PROCEDURE GetChartRoleCenterCFNo@2() : Code[20];
    BEGIN
      GET;
      EXIT("CF No. on Chart in Role Center");
    END;

    LOCAL PROCEDURE ConfirmedChartRoleCenterCFNo@3(NewCashFlowNo@1000 : Code[20]) : Boolean;
    VAR
      CashFlowForecast@1001 : Record 840;
    BEGIN
      IF NewCashFlowNo = '' THEN
        EXIT(TRUE);

      IF NOT (xRec."CF No. on Chart in Role Center" IN ['',NewCashFlowNo]) THEN BEGIN
        CashFlowForecast.GET(xRec."CF No. on Chart in Role Center");
        EXIT(CONFIRM(STRSUBSTNO(Text001,CashFlowForecast."No.",CashFlowForecast.Description),TRUE));
      END;
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetTaxPaymentDueDate@4(ReferenceDate@1000 : Date) : Date;
    VAR
      EndOfTaxPeriod@1002 : Date;
    BEGIN
      GET;
      EndOfTaxPeriod := CalculateTaxableDate(ReferenceDate,TRUE);
      EXIT(CALCDATE("Tax Payment Window",EndOfTaxPeriod));
    END;

    [External]
    PROCEDURE GetTaxPeriodStartEndDates@8(TaxDueDate@1000 : Date;VAR StartDate@1001 : Date;VAR EndDate@1002 : Date);
    BEGIN
      GET;
      EndDate := GetTaxPeriodEndDate(TaxDueDate);
      StartDate := CalculateTaxableDate(EndDate,FALSE);
    END;

    [External]
    PROCEDURE GetTaxPaymentStartDate@5(TaxDueDate@1000 : Date) : Date;
    BEGIN
      GET;
      EXIT(CALCDATE('<1D>',GetTaxPeriodEndDate(TaxDueDate)));
    END;

    [External]
    PROCEDURE GetTaxPeriodEndDate@7(TaxDueDate@1000 : Date) : Date;
    VAR
      ReverseDateFormula@1001 : DateFormula;
    BEGIN
      GET;
      EVALUATE(ReverseDateFormula,ReverseDateFormulaAsText);
      EXIT(CALCDATE(ReverseDateFormula,TaxDueDate));
    END;

    [External]
    PROCEDURE GetCurrentPeriodStartDate@12() : Date;
    BEGIN
      GET;
      EXIT(CalculateTaxableDate(WORKDATE,FALSE));
    END;

    [External]
    PROCEDURE GetCurrentPeriodEndDate@17() : Date;
    BEGIN
      GET;
      EXIT(CalculateTaxableDate(WORKDATE,TRUE));
    END;

    [External]
    PROCEDURE UpdateTaxPaymentInfo@29(NewTaxablePeriod@1002 : Option;NewPaymentWindow@1000 : DateFormula;NewTaxBalAccountType@1004 : Option;NewTaxBalAccountNum@1001 : Code[20]);
    VAR
      Modified@1003 : Boolean;
    BEGIN
      GET;
      IF "Taxable Period" <> NewTaxablePeriod THEN BEGIN
        "Taxable Period" := NewTaxablePeriod;
        Modified := TRUE;
      END;

      IF "Tax Payment Window" <> NewPaymentWindow THEN BEGIN
        "Tax Payment Window" := NewPaymentWindow;
        Modified := TRUE;
      END;

      IF "Tax Bal. Account Type" <> NewTaxBalAccountType THEN BEGIN
        "Tax Bal. Account Type" := NewTaxBalAccountType;
        Modified := TRUE;
      END;

      IF "Tax Bal. Account No." <> NewTaxBalAccountNum THEN BEGIN
        "Tax Bal. Account No." := NewTaxBalAccountNum;
        Modified := TRUE;
      END;

      IF Modified THEN
        MODIFY;
    END;

    LOCAL PROCEDURE CalculateTaxableDate@6(ReferenceDate@1000 : Date;FindLast@1001 : Boolean) Result : Date;
    VAR
      AccountingPeriod@1003 : Record 50;
    BEGIN
      CASE "Taxable Period" OF
        "Taxable Period"::Monthly:
          IF FindLast THEN
            Result := CALCDATE('<CM>',ReferenceDate)
          ELSE
            Result := CALCDATE('<-CM>',ReferenceDate);
        "Taxable Period"::Quarterly:
          IF FindLast THEN
            Result := CALCDATE('<CQ>',ReferenceDate)
          ELSE
            Result := CALCDATE('<-CQ>',ReferenceDate);
        "Taxable Period"::"Accounting Period":
          IF FindLast THEN BEGIN
            // The end of the current accounting period is the start of the next acc. period - 1 day
            AccountingPeriod.SETFILTER("Starting Date",'>%1',ReferenceDate);
            AccountingPeriod.FINDFIRST;
            Result := AccountingPeriod."Starting Date" - 1;
          END ELSE BEGIN
            // The end of the current accounting period is the start of the next acc. period - 1 day
            AccountingPeriod.SETFILTER("Starting Date",'<=%1',ReferenceDate);
            AccountingPeriod.FINDFIRST;
            Result := AccountingPeriod."Starting Date";
          END;
        "Taxable Period"::Yearly:
          IF FindLast THEN
            Result := CALCDATE('<CY>',ReferenceDate)
          ELSE
            Result := CALCDATE('<-CY>',ReferenceDate);
      END;
    END;

    LOCAL PROCEDURE ReverseDateFormulaAsText@15() Result : Text;
    VAR
      TempChar@1000 : Char;
    BEGIN
      Result := FORMAT("Tax Payment Window");
      IF Result = '' THEN
        EXIT('');

      IF NOT (COPYSTR(Result,1,1) IN ['+','-']) THEN
        Result := '+' + Result;

      TempChar := '#';
      Result := ReplaceCharInString(Result,'+',TempChar);
      Result := ReplaceCharInString(Result,'-','+');
      Result := ReplaceCharInString(Result,TempChar,'-');
    END;

    LOCAL PROCEDURE ReplaceCharInString@16(StringToReplace@1000 : Text;OldChar@1001 : Char;NewChar@1002 : Char) Result : Text;
    VAR
      Index@1005 : Integer;
      FirstPart@1003 : Text;
      LastPart@1004 : Text;
    BEGIN
      Index := STRPOS(StringToReplace,FORMAT(OldChar));
      Result := StringToReplace;
      WHILE Index > 0 DO BEGIN
        IF Index > 1 THEN
          FirstPart := COPYSTR(Result,1,Index - 1);
        IF Index < STRLEN(Result) THEN
          LastPart := COPYSTR(Result,Index + 1);
        Result := FirstPart + FORMAT(NewChar) + LastPart;
        Index := STRPOS(Result,FORMAT(OldChar));
      END;
    END;

    [External]
    PROCEDURE HasValidTaxAccountInfo@9() : Boolean;
    BEGIN
      EXIT("Tax Bal. Account Type" <> "Tax Bal. Account Type"::" ");
    END;

    [External]
    PROCEDURE EmptyTaxBalAccountIfTypeChanged@10(OldTypeValue@1000 : Option);
    BEGIN
      IF "Tax Bal. Account Type" <> OldTypeValue THEN
        "Tax Bal. Account No." := '';
    END;

    [External]
    PROCEDURE SaveUserDefinedAPIKey@14(APIKeyValue@1000 : Text[250]);
    VAR
      ServicePassword@1002 : Record 1261;
    BEGIN
      IF ISNULLGUID("Service Pass API Key ID") OR NOT ServicePassword.GET("Service Pass API Key ID") THEN BEGIN
        ServicePassword.SavePassword(APIKeyValue);
        ServicePassword.INSERT(TRUE);
        "Service Pass API Key ID" := ServicePassword.Key;
      END ELSE BEGIN
        ServicePassword.SavePassword(APIKeyValue);
        ServicePassword.MODIFY;
      END;
    END;

    [Internal]
    PROCEDURE GetMLCredentials@13(VAR APIURL@1003 : Text[250];VAR APIKey@1002 : Text[200];VAR LimitValue@1001 : Decimal;VAR UsingStandardCredentials@1005 : Boolean) : Boolean;
    VAR
      ServicePassword@1000 : Record 1261;
      PermissionManager@1004 : Codeunit 9002;
    BEGIN
      // user-defined credentials
      IF IsAPIUserDefined THEN BEGIN
        ServicePassword.GET("Service Pass API Key ID");
        APIKey := COPYSTR(ServicePassword.GetPassword,1,200);
        IF (APIKey = '') OR ("API URL" = '') THEN
          EXIT(FALSE);
        APIURL := "API URL";
        UsingStandardCredentials := FALSE;
        EXIT(TRUE);
      END;

      UsingStandardCredentials := TRUE;
      // if credentials not user-defined retrieve it from Azure Key Vault
      IF PermissionManager.SoftwareAsAService THEN
        EXIT(RetrieveSaaSMLCredentials(APIURL,APIKey,LimitValue));
    END;

    LOCAL PROCEDURE RetrieveSaaSMLCredentials@55(VAR APIURL@1003 : Text[250];VAR APIKey@1002 : Text[200];VAR LimitValue@1001 : Decimal) : Boolean;
    VAR
      TimeSeriesManagement@1004 : Codeunit 2000;
      LimitType@1000 : Option;
    BEGIN
      EXIT(TimeSeriesManagement.GetMLForecastCredentials(APIURL,APIKey,LimitType,LimitValue));
    END;

    LOCAL PROCEDURE EnableEncryption@56();
    VAR
      EncryptionManagement@1000 : Codeunit 1266;
    BEGIN
      IF NOT EncryptionManagement.IsEncryptionEnabled THEN
        EncryptionManagement.EnableEncryption;
    END;

    [External]
    PROCEDURE GetUserDefinedAPIKey@18() : Text[200];
    VAR
      ServicePassword@1000 : Record 1261;
    BEGIN
      // user-defined credentials
      IF NOT ISNULLGUID("Service Pass API Key ID") THEN BEGIN
        ServicePassword.GET("Service Pass API Key ID");
        EXIT(COPYSTR(ServicePassword.GetPassword,1,200));
      END;
    END;

    [External]
    PROCEDURE IsAPIUserDefined@99() : Boolean;
    BEGIN
      EXIT(NOT (ISNULLGUID("Service Pass API Key ID") OR ("API URL" = '')));
    END;

    BEGIN
    END.
  }
}

