OBJECT Table 11012070 Filter Features for Purch.Act.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Filter Features for Purch.Act.;
               NOR=Filterfunksjoner for innkj›pshandling.;
               SVE=Filterfunktioner f”r ink”ps†tg.];
  }
  FIELDS
  {
    { 10  ;   ;User                ;Code50        ;CaptionML=[ENU=User;
                                                              NOR=Bruker;
                                                              SVE=Anv„ndare] }
    { 20  ;   ;Contact Feature Group;Text50       ;TableRelation="Contact Feature Group".Description;
                                                   CaptionML=[ENU=Contact Feature Group;
                                                              NOR=Kontaktfunksjonsgruppe;
                                                              SVE=Kontaktfunktionsgrupp] }
    { 30  ;   ;Contact Feature     ;Code20        ;TableRelation="Contact Feature".Code WHERE (Feature Group=FIELD(Contact Feature Group));
                                                   CaptionML=[ENU=Contact Feature;
                                                              NOR=Kontaktfunksjon;
                                                              SVE=Kontaktfunktion] }
    { 40  ;   ;Contact Feature Description;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Contact Feature".Description WHERE (Feature Group=FIELD(Contact Feature Group),
                                                                                                           Code=FIELD(Contact Feature)));
                                                   CaptionML=[ENU=Contact Feature Descriptionon;
                                                              NOR=Kontaktfunksjonsbeskrivelse p†;
                                                              SVE=Kontaktfunktionsbeskrivning];
                                                   Editable=No }
    { 50  ;   ;Filter              ;Boolean       ;CaptionML=[ENU=Filter;
                                                              NOR=Filter;
                                                              SVE=Filtrera] }
    { 60  ;   ;Minimum Score       ;Decimal       ;CaptionML=[ENU=Minimum Score;
                                                              NOR=Minimumspoeng;
                                                              SVE=Minimipo„ng];
                                                   DecimalPlaces=1:1;
                                                   MinValue=0 }
  }
  KEYS
  {
    {    ;User,Contact Feature Group,Contact Feature;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100528700 : TextConst 'ENU=There are %1 Vendors/Contacts added.;NOR=Det ble lagt til %1 leverand›rer/Kontakter.;SVE=Det finns %1 tillagda leverant”rer/kontakter.';
      Text000@1100528701 : TextConst 'ENU=No (new) Vendors/Contacts found.;NOR=Ingen (nye) leverand›rer/Kontakter funnet.;SVE=Inga (nya) leverant”rer/kontakter hittades.';

    PROCEDURE ProcessGetVendors@1100528700(VAR TempFilterCertForPurchAct@1100528704 : TEMPORARY Record 11020593;ProcessType@1100528700 : Option;Source@1100528714 : Option;EstimateNo@1100528713 : Code[20];ProjectNo@1100528712 : Code[20];PurchaseAction@1100528711 : Code[10];DateFilterAssessment@1100528708 : Text[30];DueDateFilterCert@1100528707 : Text[30];ContractTypeFilter@1100528701 : ' ,No Contract,Contract,Contract with Discount Terms';CombFeatures@1100528702 : Boolean;CombCertificates@1100528705 : Boolean);
    VAR
      FilterFeaturesForPurchAct@1100525000 : Record 11012070;
      ContactFeatureType@1100525002 : Record 11012753;
      ContactBusinessRelation@1100525005 : Record 5054;
      VendorsByPurchaseAction@1100525007 : Record 11012068;
      TempContact@1100525004 : TEMPORARY Record 5050;
      TempFilterFeaturesForPurchAct@1100525003 : TEMPORARY Record 11012070;
      VendorCertificate@1100525008 : Record 11020413;
      Select@1100525006 : Boolean;
      FeatureSelectionSet@1100525010 : Boolean;
      CertificateSelectionSet@1100525011 : Boolean;
      Counter@1100528710 : Integer;
    BEGIN
      // Find features that apply to the filters
      FilterFeaturesForPurchAct.COPYFILTERS(Rec);
      FilterFeaturesForPurchAct.SETRANGE(Filter, TRUE);
      IF FilterFeaturesForPurchAct.FINDSET THEN BEGIN
        FeatureSelectionSet := TRUE;
        ContactFeatureType.SETCURRENTKEY("Relation Type","Feature Group",Feature,Code);
        REPEAT
          TempFilterFeaturesForPurchAct := FilterFeaturesForPurchAct;
          TempFilterFeaturesForPurchAct.INSERT;

          ContactFeatureType.SETRANGE("Relation Type", ContactFeatureType."Relation Type"::Company);
          ContactFeatureType.SETRANGE("Feature Group", FilterFeaturesForPurchAct."Contact Feature Group");
          ContactFeatureType.SETRANGE(Feature, FilterFeaturesForPurchAct."Contact Feature");
          IF ContactFeatureType.FINDSET THEN BEGIN
            REPEAT
              Select := FALSE;
              ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Vendor);
              ContactBusinessRelation.SETRANGE("Contact No.", ContactFeatureType.Code);
              IF ContactBusinessRelation.FINDFIRST THEN BEGIN
                // Vendor
                IF ProcessType IN [1, 3] THEN BEGIN // Vendor or both
                  IF NOT TempContact.GET(ContactFeatureType.Code) THEN BEGIN
                    IF NOT VendorsByPurchaseAction.GET(
                      Source, EstimateNo, ProjectNo, PurchaseAction,
                      VendorsByPurchaseAction.Type::Vendor, ContactBusinessRelation."No.")
                    THEN BEGIN
                      IF VendorFeatureDepartmMeetsScore(
                        ContactBusinessRelation."No.",
                        FilterFeaturesForPurchAct."Contact Feature Group",
                        FilterFeaturesForPurchAct."Contact Feature",
                        FilterFeaturesForPurchAct."Minimum Score",
                        DateFilterAssessment)
                      THEN
                        Select := TRUE;
                    END;
                  END;

                  // If select, check the certification filters (Only if Vendor No. is found)
                  IF Select AND (NOT TempFilterCertForPurchAct.ISEMPTY) AND (ContactBusinessRelation."No." <> '') THEN BEGIN
                    Select := VendorHasAnyCertificate(TempFilterCertForPurchAct, ContactBusinessRelation."No.", DueDateFilterCert);
                    IF Select THEN
                      CertificateSelectionSet := TRUE;
                  END;

                  IF Select AND (ContactBusinessRelation."No." <> '') THEN
                    Select := CheckVendorContractType(ContactBusinessRelation."No.", ContractTypeFilter);
                END;
              END ELSE BEGIN
                // Contact
                IF ProcessType IN [2, 3] THEN BEGIN // Contact or both
                  IF NOT TempContact.GET(ContactFeatureType.Code) THEN BEGIN
                    IF NOT VendorsByPurchaseAction.GET(
                      Source, EstimateNo, ProjectNo, PurchaseAction,
                      VendorsByPurchaseAction.Type::Contact, ContactFeatureType.Code)
                    THEN BEGIN
                      // For a contact no check on the score, because scores are only vendor releated.
                      Select := TRUE;
                      ContactBusinessRelation."No." := ''; // Vendor No. must be empty
                    END;
                  END;
                END;
              END;

              IF Select THEN BEGIN
                TempContact.INIT;
                TempContact."No." := ContactFeatureType.Code; // Contact No.
                TempContact."Company No." := ContactBusinessRelation."No."; // Vendor No.
                TempContact.INSERT;
              END;
            UNTIL ContactFeatureType.NEXT = 0;
          END;
        UNTIL FilterFeaturesForPurchAct.NEXT = 0;
      END ELSE BEGIN
        // If no features selection is made, filter only certificates
        FeatureSelectionSet := FALSE;
        IF ProcessType IN [1, 3] THEN BEGIN // Vendor or both
          IF TempFilterCertForPurchAct.FINDSET THEN BEGIN
            CertificateSelectionSet := TRUE;
            REPEAT
              VendorCertificate.RESET;
              VendorCertificate.SETRANGE("Certificate Type", TempFilterCertForPurchAct.Code);
              IF TempFilterCertForPurchAct."Due Date Check" THEN
                VendorCertificate.SETFILTER("Due Date", DueDateFilterCert);
              IF VendorCertificate.FINDSET THEN BEGIN
                REPEAT
                  Select := FALSE;
                  ContactBusinessRelation.RESET;
                  ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Vendor);
                  ContactBusinessRelation.SETRANGE("No.", VendorCertificate."Vendor No.");
                  IF ContactBusinessRelation.FINDFIRST THEN
                    IF NOT TempContact.GET(ContactBusinessRelation."Contact No.") THEN
                      IF NOT VendorsByPurchaseAction.GET(
                        Source, EstimateNo, ProjectNo, PurchaseAction,
                        VendorsByPurchaseAction.Type::Vendor, ContactBusinessRelation."No.")
                      THEN
                        Select := TRUE;

                  IF Select AND (ContactBusinessRelation."No." <> '') THEN
                    Select := CheckVendorContractType(ContactBusinessRelation."No.", ContractTypeFilter);

                  IF Select THEN BEGIN
                    TempContact.INIT;
                    TempContact."No." := ContactBusinessRelation."Contact No."; // Contact No.
                    TempContact."Company No." := ContactBusinessRelation."No."; // Vendor No.
                    TempContact.INSERT;
                  END;
                UNTIL VendorCertificate.NEXT = 0;
              END;
            UNTIL TempFilterCertForPurchAct.NEXT = 0;
          END;
        END;
      END;

      // Check combined features and add filters Vendors to Purch Action Vendors
      TempContact.RESET;
      IF TempContact.FINDSET THEN BEGIN
        REPEAT
          Select := TRUE;

          // Combine features
          IF CombFeatures AND FeatureSelectionSet THEN BEGIN
            TempFilterFeaturesForPurchAct.FINDSET;
            REPEAT
              IF NOT ContactHasFeature(
                TempContact."No.",
                TempFilterFeaturesForPurchAct."Contact Feature Group",
                TempFilterFeaturesForPurchAct."Contact Feature")
              THEN
                Select := FALSE;

              IF (TempContact."Company No." <> '') AND Select THEN
                IF NOT VendorFeatureDepartmMeetsScore(
                  TempContact."Company No.",
                  TempFilterFeaturesForPurchAct."Contact Feature Group",
                  TempFilterFeaturesForPurchAct."Contact Feature",
                  TempFilterFeaturesForPurchAct."Minimum Score",
                  DateFilterAssessment)
                THEN
                  Select := FALSE;
            UNTIL (TempFilterFeaturesForPurchAct.NEXT = 0) OR (NOT Select);
          END;

          // Combine certificates
          IF CombCertificates AND CertificateSelectionSet AND (TempContact."Company No." <> '') AND Select THEN BEGIN
            TempFilterCertForPurchAct.FINDSET;
            REPEAT
              IF NOT VendorHasCertificate(
                TempContact."Company No.",
                TempFilterCertForPurchAct.Code,
                TempFilterCertForPurchAct."Due Date Check",
                DueDateFilterCert)
              THEN
                Select := FALSE;
            UNTIL (TempFilterCertForPurchAct.NEXT = 0) OR (NOT Select);
          END;

          IF Select THEN BEGIN
            IF InsertVendorByPurchaseAction(VendorsByPurchaseAction, TempContact, Source, EstimateNo, ProjectNo, PurchaseAction)
            THEN
              Counter := Counter + 1;
          END;
        UNTIL TempContact.NEXT = 0;
      END;

      IF Counter = 0 THEN
        MESSAGE(Text000)
      ELSE
        MESSAGE(STRSUBSTNO(Text001, Counter));
    END;

    LOCAL PROCEDURE InsertVendorByPurchaseAction@1100525002(VAR VendorsByPurchaseAction@1100525000 : Record 11012068;TempContact@1100525001 : Record 5050;Source@1100528703 : Option;EstimateNo@1100528702 : Code[20];ProjectNo@1100528701 : Code[20];PurchaseAction@1100528700 : Code[10]) : Boolean;
    BEGIN
      VendorsByPurchaseAction.INIT;
      VendorsByPurchaseAction.Source := Source;
      VendorsByPurchaseAction."Estimate No." := EstimateNo;
      VendorsByPurchaseAction."Project No." := ProjectNo;
      VendorsByPurchaseAction."Purchase Action" := PurchaseAction;
      IF TempContact."Company No." <> '' THEN BEGIN
        VendorsByPurchaseAction.Type := VendorsByPurchaseAction.Type::Vendor;
        VendorsByPurchaseAction.VALIDATE("Vendor No.", TempContact."Company No.");
      END ELSE BEGIN
        VendorsByPurchaseAction.Type := VendorsByPurchaseAction.Type::Contact;
        VendorsByPurchaseAction.VALIDATE("Vendor No.", TempContact."No.");
      END;

      IF VendorsByPurchaseAction.INSERT(TRUE) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE ContactHasFeature@1100528703(ContactNo@1100528700 : Code[20];FeatureGroup@1100528701 : Text[50];Feature@1100528702 : Code[20]) : Boolean;
    VAR
      ContactFeatureType@1100528703 : Record 11012753;
    BEGIN
      ContactFeatureType.SETRANGE("Relation Type", ContactFeatureType."Relation Type"::Company);
      ContactFeatureType.SETRANGE(Code, ContactNo);
      ContactFeatureType.SETRANGE("Feature Group", FeatureGroup);
      ContactFeatureType.SETRANGE(Feature, Feature);
      EXIT(ContactFeatureType.FINDFIRST);
    END;

    PROCEDURE VendorFeatureDepartmMeetsScore@1100528702(VendorNo@1100528704 : Code[20];FeatureGroup@1100528703 : Text[50];Feature@1100528702 : Code[20];MinimumScore@1100528701 : Decimal;DateFilterAssessment@1100528700 : Text[30]) : Boolean;
    VAR
      ContactFeature@1100528706 : Record 11012752;
    BEGIN
      IF MinimumScore = 0 THEN
        EXIT(TRUE);

      ContactFeature.GET(FeatureGroup, Feature);
      IF ContactFeature.Department = '' THEN
        EXIT(TRUE);

      IF GetAverageScore(VendorNo, ContactFeature.Department, DateFilterAssessment) >= MinimumScore THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE VendorHasAnyCertificate@1100525001(VAR TempFilterCertForPurchAct@1100525001 : TEMPORARY Record 11020593;VendorNo@1100525003 : Code[20];DueDateFilterCert@1100525002 : Text[30]) : Boolean;
    BEGIN
      IF TempFilterCertForPurchAct.FINDSET THEN
        REPEAT
          IF VendorHasCertificate(
            VendorNo,
            TempFilterCertForPurchAct.Code,
            TempFilterCertForPurchAct."Due Date Check",
            DueDateFilterCert)
          THEN
            EXIT(TRUE);
        UNTIL TempFilterCertForPurchAct.NEXT = 0;
    END;

    LOCAL PROCEDURE VendorHasCertificate@1100528704(VendorNo@1100525003 : Code[20];CertificateType@1100528700 : Code[20];DueDateCheck@1100528701 : Boolean;DueDateFilterCert@1100525002 : Text[30]) : Boolean;
    VAR
      VendorCertificate@1100525000 : Record 11020413;
    BEGIN
      VendorCertificate.SETRANGE("Vendor No.", VendorNo);
      VendorCertificate.SETRANGE("Certificate Type", CertificateType);
      IF DueDateCheck THEN
        VendorCertificate.SETFILTER("Due Date", DueDateFilterCert);
      EXIT(VendorCertificate.FINDFIRST);
    END;

    LOCAL PROCEDURE GetAverageScore@1100485002(VendorNo@1100485000 : Code[20];Department@1100485001 : Code[10];DateFilterAssessment@1100485002 : Text[30]) : Decimal;
    VAR
      PurchasesPayablesSetup@1100528700 : Record 312;
      VendorAssessmentLineNew@1100485003 : Record 11072420;
      TotalScore@1100485004 : Decimal;
      MaxScore@1100485005 : Decimal;
    BEGIN
      PurchasesPayablesSetup.GET;

      VendorAssessmentLineNew.SETRANGE("Vendor No.", VendorNo);
      VendorAssessmentLineNew.SETRANGE(Department, Department);
      VendorAssessmentLineNew.SETFILTER(Date, DateFilterAssessment);
      VendorAssessmentLineNew.SETFILTER(Score, '<>%1', 0);
      IF VendorAssessmentLineNew.FINDSET THEN
        REPEAT
          TotalScore := TotalScore + (VendorAssessmentLineNew."Weight Factor" * VendorAssessmentLineNew.Score);
          MaxScore := MaxScore + (VendorAssessmentLineNew."Weight Factor" * PurchasesPayablesSetup."Max. Score Assessment");
        UNTIL VendorAssessmentLineNew.NEXT = 0;

      IF MaxScore = 0 THEN
        EXIT(0);

      EXIT(ROUND((TotalScore / MaxScore * PurchasesPayablesSetup."Max. Score Assessment"), 0.1));
    END;

    LOCAL PROCEDURE CheckVendorContractType@1210190003(VendorNo@1100525003 : Code[20];ContractTypeFilter@1100528700 : ' ,No Contract,Contract,Contract with Discount Terms') : Boolean;
    VAR
      Vendor@1210190000 : Record 23;
    BEGIN
      IF Vendor.GET(VendorNo) THEN BEGIN
        CASE ContractTypeFilter OF
          ContractTypeFilter::" ":
            EXIT(TRUE);
          ContractTypeFilter::"No Contract":
            EXIT(Vendor."Blanket Contract Type" = Vendor."Blanket Contract Type"::"No Contract");
          ContractTypeFilter::Contract:
            EXIT(Vendor."Blanket Contract Type" = Vendor."Blanket Contract Type"::Contract);
          ContractTypeFilter::"Contract with Discount Terms":
            EXIT(Vendor."Blanket Contract Type" = Vendor."Blanket Contract Type"::"Contract with Discount Terms");
        END;
      END;

      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

