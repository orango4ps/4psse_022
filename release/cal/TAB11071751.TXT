OBJECT Table 11071751 Service Inspection Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Index Date");
               CentralDataManagement.EditServiceInspectionLine(Rec, 1, xRec);
               Id := CREATEGUID;
             END;

    OnModify=BEGIN
               CentralDataManagement.EditServiceInspectionLine(Rec, 2, xRec);
             END;

    OnDelete=VAR
               InspectionLineProperty@1100528600 : Record 11071978;
             BEGIN
               InspectionLineProperty.SETRANGE("Inspection Type (Base)", "Inspection Type");
               InspectionLineProperty.SETRANGE("Serv. Contract No. (Base)", "Service Contract No.");
               InspectionLineProperty.SETRANGE("Code (Base)", Code);
               InspectionLineProperty.SETRANGE("Line No. (Base)", "Line No.");
               InspectionLineProperty.SETRANGE("Belongs to Scheme (Base)", "Belongs to Scheme");
               InspectionLineProperty.SETRANGE("Belongs to Base Insp. List (Ba", "Belongs to Base Insp. List");
               InspectionLineProperty.DELETEALL(TRUE);

               CentralDataManagement.EditServiceInspectionLine(Rec, 4, xRec);
             END;

    CaptionML=[ENU=Service Inspection Line;
               NOR=Serviceinspeksjonsrad;
               SVE=Serviceinspektionsrad];
  }
  FIELDS
  {
    { 10  ;   ;Inspection Type     ;Option        ;CaptionML=[ENU=Inspection Type;
                                                              NOR=Inspeksjonstype;
                                                              SVE=Inspektionstyp];
                                                   OptionCaptionML=[ENU=Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls);
                                                                    NOR=Basisinspeksjonsliste,Standardobjekt,Kontraktobjekt,Standardobjekt (samtaler),Objekt (Samtaler);
                                                                    SVE=Basinspektionslista,Standardobjekt,Kontraktsobjekt,Standardobjekt (samtal),Objekt (samtal)];
                                                   OptionString=Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls);
                                                   Editable=No }
    { 15  ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract;
                                                   OnValidate=BEGIN
                                                                IF "Service Contract No." <> xRec."Service Contract No." THEN BEGIN
                                                                  MainRec := xRec;
                                                                  IF MainRec.FIND THEN
                                                                    CentralDataManagement.EditServiceInspectionLine(Rec, 3, xRec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Service Contract No.;
                                                              NOR=Servicekontraktnr;
                                                              SVE=Servicekontraktnr];
                                                   Editable=No }
    { 20  ;   ;Code                ;Code20        ;TableRelation=IF (Inspection Type=CONST(Base Inspection List)) "Base Service Inspection List"
                                                                 ELSE IF (Inspection Type=CONST(Standard Object)) "Standard Object"
                                                                 ELSE IF (Inspection Type=CONST(Contract Object)) "Contract Object"."Service Object No." WHERE (Service Contract No.=FIELD(Service Contract No.))
                                                                 ELSE IF (Inspection Type=CONST("Standard Object (Calls)")) "Standard Object"
                                                                 ELSE IF (Inspection Type=CONST("Object (Calls)")) Service-Object;
                                                   OnValidate=BEGIN
                                                                IF Code <> xRec.Code THEN BEGIN
                                                                  MainRec := xRec;
                                                                  IF MainRec.FIND THEN
                                                                    CentralDataManagement.EditServiceInspectionLine(Rec, 3, xRec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              NOR=Kode;
                                                              SVE=Kod];
                                                   Editable=No }
    { 25  ;   ;Belongs to Scheme   ;Code20        ;TableRelation="Maintenance Scheme";
                                                   OnValidate=BEGIN
                                                                IF "Belongs to Scheme" <> xRec."Belongs to Scheme" THEN BEGIN
                                                                  MainRec := xRec;
                                                                  IF MainRec.FIND THEN
                                                                    CentralDataManagement.EditServiceInspectionLine(Rec, 3, xRec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Belongs to Scheme;
                                                              NOR=H›rer til skjema;
                                                              SVE=Tillh”r schema];
                                                   Editable=No }
    { 30  ;   ;Index Date          ;Date          ;OnValidate=BEGIN
                                                                IF "Index Date" <> xRec."Index Date" THEN BEGIN
                                                                  MainRec := xRec;
                                                                  IF MainRec.FIND THEN
                                                                    CentralDataManagement.EditServiceInspectionLine(Rec, 3, xRec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Index Date;
                                                              NOR=Indeksdato;
                                                              SVE=Indexdatum];
                                                   Editable=No }
    { 40  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnummer] }
    { 50  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF (xRec.Type <> Type) AND (Type = Type::Group) THEN BEGIN
                                                                  "Field Type" := "Field Type"::" ";
                                                                  "Unit Of Measure" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              NOR=Type;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Group,Line;
                                                                    NOR=Gruppe,Rad;
                                                                    SVE=Grupp,Rad];
                                                   OptionString=Group,Line }
    { 60  ;   ;Inspection Code     ;Code10        ;TableRelation=IF (Type=CONST(Group)) "Service Inspection Group"
                                                                 ELSE IF (Type=CONST(Line)) "Base Service Inspection Line";
                                                   OnValidate=VAR
                                                                ServiceInspectionGroup@1100528601 : Record 11071747;
                                                                BaseServiceInspectionLine@1100528600 : Record 11071748;
                                                              BEGIN
                                                                CASE Type OF
                                                                  Type::Group:
                                                                    BEGIN
                                                                      ServiceInspectionGroup.GET("Inspection Code");
                                                                      VALIDATE(Description, ServiceInspectionGroup.Description);
                                                                    END;
                                                                  Type::Line:
                                                                    BEGIN
                                                                      BaseServiceInspectionLine.GET("Inspection Code");
                                                                      VALIDATE(Description, BaseServiceInspectionLine.Description);
                                                                      VALIDATE("Field Type", BaseServiceInspectionLine."Field Type");
                                                                      VALIDATE("Unit Of Measure", BaseServiceInspectionLine."Unit Of Measure");
                                                                      VALIDATE(Mandatory, BaseServiceInspectionLine.Mandatory);
                                                                    END;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ServiceInspectionGroup@1100528601 : Record 11071747;
                                                              BaseServiceInspectionLine@1100528600 : Record 11071748;
                                                              ServiceInspectionGroupCode@1100528602 : Code[10];
                                                              ServiceInspectionGroupDescription@1100528603 : Text[50];
                                                            BEGIN
                                                              CASE Type OF
                                                                Type::Group:
                                                                  BEGIN
                                                                    IF ServiceInspectionGroup.GET("Inspection Code") THEN;
                                                                    IF PAGE.RUNMODAL(0, ServiceInspectionGroup) = ACTION::LookupOK THEN
                                                                      VALIDATE("Inspection Code", ServiceInspectionGroup.Code);
                                                                  END;
                                                                Type::Line:
                                                                  BEGIN
                                                                    ServiceInspectionGroupCode := GetServiceInspectionGroupInfo(ServiceInspectionGroupDescription);
                                                                    IF ServiceInspectionGroupCode <> '' THEN
                                                                      BaseServiceInspectionLine.SETFILTER("Inspection Group Code", '%1|%2', '', ServiceInspectionGroupCode);
                                                                    IF BaseServiceInspectionLine.GET("Inspection Code") THEN;
                                                                    IF PAGE.RUNMODAL(0, BaseServiceInspectionLine) = ACTION::LookupOK THEN
                                                                      VALIDATE("Inspection Code", BaseServiceInspectionLine.Code);
                                                                  END;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Inspection Code;
                                                              NOR=Inspeksjonskode;
                                                              SVE=Inspektionskod] }
    { 70  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 80  ;   ;Field Type          ;Option        ;OnValidate=BEGIN
                                                                IF "Field Type" = "Field Type"::" " THEN
                                                                  TESTFIELD(Type, Type::Group);
                                                                IF "Field Type" <> "Field Type"::Value THEN BEGIN
                                                                  VALIDATE("Lower Value", 0);
                                                                  VALIDATE("Upper Value", 0);
                                                                END;

                                                                IF (CurrFieldNo = FIELDNO("Field Type")) AND
                                                                   ((("Field Type" IN ["Field Type"::Option, "Field Type"::"Yes/No"]) OR
                                                                     (xRec."Field Type" IN ["Field Type"::Option, "Field Type"::"Yes/No"])) AND
                                                                    ("Field Type" <> xRec."Field Type"))
                                                                THEN
                                                                  ERROR(Text000, FIELDCAPTION("Field Type"));
                                                              END;

                                                   CaptionML=[ENU=Field Type;
                                                              NOR=Felttype;
                                                              SVE=Field Type];
                                                   OptionCaptionML=[ENU="Date,Value,Text,Option,Yes/No,,,,, ";
                                                                    SVE="Datum,V„rde,Text,Alternativ,Ja/Nej,,,,, "];
                                                   OptionString=[Date,Value,Text,Option,Yes/No,,,,, ] }
    { 90  ;   ;Unit Of Measure     ;Code10        ;TableRelation="Unit of Measure";
                                                   CaptionML=[ENU=Unit Of Measure;
                                                              NOR=Enhet;
                                                              SVE=Enhet] }
    { 100 ;   ;Mandatory           ;Boolean       ;CaptionML=[ENU=Mandatory;
                                                              NOR=Obligatorisk;
                                                              SVE=Obligatoriskt] }
    { 110 ;   ;Belongs to Base Insp. List;Code20  ;TableRelation="Base Service Inspection List";
                                                   CaptionML=ENU=Belongs to Base Inspection List }
    { 120 ;   ;Inspection Group Code;Code10       ;TableRelation="Service Inspection Group";
                                                   CaptionML=[ENU=Inspection Group Code;
                                                              NOR=Inspeksjonsguppekode;
                                                              SVE=Inspektionsgruppskod];
                                                   Description=Used as buffer;
                                                   Editable=No }
    { 130 ;   ;Inspection Group Description;Text50;CaptionML=ENU=Inspection Group Description;
                                                   Description=Used as buffer }
    { 140 ;   ;Lower Value         ;Decimal       ;OnValidate=BEGIN
                                                                IF "Lower Value" <> 0 THEN
                                                                  TESTFIELD("Field Type", "Field Type"::Value);
                                                                TestUpperAndLowerValue;
                                                              END;

                                                   CaptionML=ENU=Lower Value;
                                                   BlankZero=Yes }
    { 150 ;   ;Upper Value         ;Decimal       ;OnValidate=BEGIN
                                                                IF "Upper Value" <> 0 THEN
                                                                  TESTFIELD("Field Type", "Field Type"::Value);
                                                                TestUpperAndLowerValue;
                                                              END;

                                                   CaptionML=ENU=Upper Value;
                                                   BlankZero=Yes }
    { 160 ;   ;Depending on Line No.;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Inspection Line"."Line No." WHERE (Id=FIELD(Depending on Id)));
                                                   CaptionML=ENU=Depending on Line No.;
                                                   Editable=No }
    { 170 ;   ;Depending Condition ;Text250       ;OnValidate=VAR
                                                                ServiceInspectionLine@1100528100 : Record 11071751;
                                                                ServiceOrderInspectionLine@1100528101 : Record 11071753;
                                                                DateDecimalFilterParser@1100528700 : Codeunit 11012894;
                                                              BEGIN
                                                                IF "Depending Condition" <> '' THEN BEGIN
                                                                  IF ISNULLGUID("Depending on Id") THEN
                                                                    ERROR(Text007, FIELDCAPTION("Depending on Line No."), FIELDCAPTION("Depending Condition"));

                                                                  ServiceInspectionLine.SETRANGE(Id, "Depending on Id");
                                                                  IF ServiceInspectionLine.FINDFIRST THEN BEGIN
                                                                    IF ServiceInspectionLine."Field Type" IN ["Field Type"::"Yes/No", "Field Type"::Option] THEN BEGIN
                                                                      "Depending Condition" := ServiceOrderInspectionLine.TryGetBaseServiceOptionValue(
                                                                        ServiceInspectionLine."Inspection Code", "Depending Condition");
                                                                    END ELSE IF ServiceInspectionLine."Field Type" = "Field Type"::Date THEN BEGIN
                                                                      DateDecimalFilterParser.ParseDateFilter("Depending Condition", "Dependency Condition Date 1",
                                                                        "Dependency Condition Date 2", "Dependency Condition Operation");
                                                                    END ELSE IF ServiceInspectionLine."Field Type" = "Field Type"::Value THEN BEGIN
                                                                      DateDecimalFilterParser.ParseDecimalFilter("Depending Condition", "Dependency Condition Decimal 1",
                                                                        "Dependency Condition Decimal 2", "Dependency Condition Operation");
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Depending Condition }
    { 180 ;   ;Dependency Effect   ;Option        ;OnValidate=BEGIN
                                                                IF "Dependency Effect" <> "Dependency Effect"::" " THEN BEGIN
                                                                  IF ISNULLGUID("Depending on Id") THEN
                                                                    ERROR(Text007, FIELDCAPTION("Depending on Line No."), FIELDCAPTION("Dependency Effect"));
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Dependency Effect;
                                                   OptionCaptionML=ENU=" ,Enable Line,Disable Line";
                                                   OptionString=[ ,Enable Line,Disable Line] }
    { 190 ;   ;Id                  ;GUID          ;CaptionML=[ENU=Id;
                                                              SVE=ID] }
    { 200 ;   ;Depending on Id     ;GUID          ;TableRelation="Service Inspection Line".Id WHERE (Inspection Type=FIELD(Inspection Type),
                                                                                                     Service Contract No.=FIELD(Service Contract No.),
                                                                                                     Code=FIELD(Code),
                                                                                                     Belongs to Scheme=FIELD(Belongs to Scheme),
                                                                                                     Belongs to Base Insp. List=FIELD(Belongs to Base Insp. List),
                                                                                                     Index Date=FIELD(Index Date));
                                                   OnValidate=VAR
                                                                ServiceInspectionLine@1100528100 : Record 11071751;
                                                              BEGIN
                                                                IF NOT ISNULLGUID("Depending on Id") THEN BEGIN
                                                                  IF "Depending on Id" = Id THEN
                                                                    ERROR(Text004);

                                                                  ServiceInspectionLine.SETRANGE("Depending on Id", Id);
                                                                  IF ServiceInspectionLine.FINDFIRST THEN
                                                                    ERROR(Text006);

                                                                  ServiceInspectionLine.RESET;
                                                                  ServiceInspectionLine.SETRANGE(Id, "Depending on Id");
                                                                  IF ServiceInspectionLine.FINDFIRST THEN BEGIN
                                                                    IF NOT ISNULLGUID(ServiceInspectionLine."Depending on Id") THEN
                                                                      ERROR(Text005);

                                                                    IF NOT (ServiceInspectionLine."Field Type" IN ["Field Type"::Date, "Field Type"::Value, "Field Type"::Option, "Field Type"::"Yes/No"]) THEN
                                                                      ERROR(Text009, FORMAT(ServiceInspectionLine."Field Type"));
                                                                  END;

                                                                  IF "Depending on Id" <> xRec."Depending on Id" THEN
                                                                    ClearDependencyOptions;
                                                                END ELSE
                                                                  ClearDependencyOptions;
                                                              END;

                                                   CaptionML=ENU=Depending on Id }
    { 210 ;   ;Dependency Condition Decimal 1;Decimal;
                                                   CaptionML=ENU=Dependency Condition Decimal 1 }
    { 220 ;   ;Dependency Condition Decimal 2;Decimal;
                                                   CaptionML=ENU=Dependency Condition Decimal 2 }
    { 230 ;   ;Dependency Condition Date 1;Date   ;CaptionML=ENU=Dependency Condition Date 1 }
    { 240 ;   ;Dependency Condition Date 2;Date   ;CaptionML=ENU=Dependency Condition Date 2 }
    { 250 ;   ;Dependency Condition Operation;Text30;
                                                   CaptionML=ENU=Dependency Condition Operation }
  }
  KEYS
  {
    {    ;Inspection Type,Service Contract No.,Code,Belongs to Scheme,Belongs to Base Insp. List,Index Date,Line No.;
                                                   Clustered=Yes }
    {    ;Inspection Group Code,Inspection Group Description,Line No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CentralDataManagement@1100528600 : Codeunit 11012010;
      MainRec@1100528601 : Record 11071751;
      Text000@1100525000 : TextConst 'ENU=%1 of type Option or Yes/No can only be modified on base level.';
      Text001@1100528603 : TextConst 'ENU=Changing %1 on %2 not allowed for Base Inspection List';
      Text002@1100528602 : TextConst 'ENU=Can not modify line on this level';
      Text003@1100528604 : TextConst 'ENU=%1 must exceed %2;NOR=%1 m† overstige %2;SVE=%1 m†ste ”verskrida %2';
      Text004@1100528100 : TextConst 'ENU=The line cannot be dependent on itself.';
      Text005@1100528101 : TextConst 'ENU=The line cannot be dependent on a line that has a dependency.';
      Text006@1100528102 : TextConst 'ENU=This line cannot have a dependency because other lines are dependent on this line.';
      Text007@1100528103 : TextConst 'ENU=%1 is required before %2 can be filled in.';
      Text008@1100528104 : TextConst 'ENU=Option Value %1 not found;SVE=Alternativv„rde %1 hittades inte';
      Text009@1100528700 : TextConst 'ENU=The line cannot be dependent on a value that is of type %1.';

    PROCEDURE GetServiceInspectionGroupInfo@1100528601(VAR OGroupDescription@1100528601 : Text[50]) : Code[10];
    VAR
      ServiceInspectionLine@1100528600 : Record 11071751;
    BEGIN
      OGroupDescription := '';
      ServiceInspectionLine := Rec;
      ServiceInspectionLine.SETRECFILTER;
      ServiceInspectionLine.SETFILTER("Line No.", '<%1', "Line No.");
      ServiceInspectionLine.SETRANGE(Type, ServiceInspectionLine.Type::Group);
      IF ServiceInspectionLine.FINDLAST THEN BEGIN
        OGroupDescription := ServiceInspectionLine.Description;
        EXIT(ServiceInspectionLine."Inspection Code");
      END;
    END;

    PROCEDURE SetAsCancelled@1100528606(ICancelled@1100528600 : Boolean;ILevelInspectionType@1100528602 : 'Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls)';ILevelServiceContractNo@1100528606 : Code[20];ILevelCode@1100528603 : Code[20];ILevelBelongstoScheme@1100528607 : Code[20];ILevelBelongstoInspList@1100528608 : Code[20];ILevelIndexDate@1100528604 : Date);
    VAR
      InspectionLineProperty@1100528601 : Record 11071978;
      ServiceInspectionLine@1100528605 : Record 11071751;
    BEGIN
      IF ICancelled THEN
        IF ILevelInspectionType = ILevelInspectionType::"Base Inspection List" THEN
          ERROR(Text001, InspectionLineProperty.FIELDCAPTION(Cancelled), ServiceInspectionLine.TABLECAPTION);
      IF NOT ICancelled THEN BEGIN
        CASE ILevelInspectionType OF
          ILevelInspectionType::"Contract Object",
          ILevelInspectionType::"Object (Calls)":
            IF "Inspection Type" <> "Inspection Type"::"Standard Object" THEN
              IF NOT InspectionLineProperty.GET(
                ILevelInspectionType, ILevelServiceContractNo, ILevelCode, ILevelBelongstoScheme,
                ILevelBelongstoInspList, ILevelIndexDate,
                "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme",
                "Belongs to Base Insp. List")
              THEN
                ERROR(Text002);
          ILevelInspectionType::"Standard Object",
          ILevelInspectionType::"Standard Object (Calls)":
            IF "Inspection Type" <> "Inspection Type"::"Base Inspection List" THEN
              ERROR(Text002);
        END;
      END;
      IF ICancelled THEN BEGIN
        IF NOT InspectionLineProperty.GET(
          ILevelInspectionType, ILevelServiceContractNo, ILevelCode, ILevelBelongstoScheme, ILevelBelongstoInspList, ILevelIndexDate,
          "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme", "Belongs to Base Insp. List")
        THEN BEGIN
          InspectionLineProperty."Inspection Type" := ILevelInspectionType;
          InspectionLineProperty."Service Contract No." := ILevelServiceContractNo;
          InspectionLineProperty.Code := ILevelCode;
          InspectionLineProperty."Belongs to Scheme" := ILevelBelongstoScheme;
          InspectionLineProperty."Belongs to Base Insp. List" := ILevelBelongstoInspList;
          InspectionLineProperty."Index Date" := ILevelIndexDate;
          InspectionLineProperty."Inspection Type (Base)" := "Inspection Type";
          InspectionLineProperty."Serv. Contract No. (Base)" := "Service Contract No.";
          InspectionLineProperty."Code (Base)" := Code;
          InspectionLineProperty."Line No. (Base)" := "Line No.";
          InspectionLineProperty."Belongs to Scheme (Base)" := "Belongs to Scheme";
          InspectionLineProperty."Belongs to Base Insp. List (Ba" := "Belongs to Base Insp. List";
          InspectionLineProperty.Cancelled := TRUE;
          InspectionLineProperty.INSERT(TRUE);
        END ELSE BEGIN
          InspectionLineProperty.Cancelled := TRUE;
          InspectionLineProperty.MODIFY(TRUE)
        END;
      END ELSE BEGIN
        IF InspectionLineProperty.GET(
          ILevelInspectionType, ILevelServiceContractNo, ILevelCode, ILevelBelongstoScheme, ILevelBelongstoInspList, ILevelIndexDate,
          "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme", "Belongs to Base Insp. List")
        THEN BEGIN
          InspectionLineProperty.Cancelled := FALSE;
          InspectionLineProperty.MODIFY(TRUE);
        END;
      END;
    END;

    PROCEDURE IsCancelled@1100528605(ILevelInspectionType@1100528604 : 'Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls)';ILevelServiceContractNo@1100528602 : Code[20];ILevelCode@1100528603 : Code[20];ILevelBelongstoScheme@1100528609 : Code[20];ILevelBelongstoInspList@1100528610 : Code[20];ILevelIndexDate@1100528608 : Date;ILowerLevelSeekDate@1100528601 : Date;VAR OCancellationLevel@1100528607 : ' ,Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls)') : Boolean;
    VAR
      InspectionLineProperty@1100528600 : Record 11071978;
      ServiceObject@1100528606 : Record 11071691;
      ServiceInspectionVersion@1100528605 : Record 11071750;
    BEGIN
      OCancellationLevel := OCancellationLevel::" ";
      CASE ILevelInspectionType OF
        ILevelInspectionType::"Contract Object":
          BEGIN
            ServiceInspectionVersion.SETRANGE("Inspection Type", ILevelInspectionType);
            ServiceInspectionVersion.SETRANGE("Service Contract No.", ILevelServiceContractNo);
            ServiceInspectionVersion.SETRANGE(Code, ILevelCode);
            ServiceInspectionVersion.SETRANGE("Belongs to Scheme", ILevelBelongstoScheme);
            ServiceInspectionVersion.SETRANGE("Belongs to Base Insp. List", ILevelBelongstoInspList);
            ServiceInspectionVersion.SETFILTER("Index Date", '<=%1', ILevelIndexDate);
            IF ServiceInspectionVersion.FINDLAST THEN BEGIN
              IF InspectionLineProperty.GET(
                ServiceInspectionVersion."Inspection Type", ServiceInspectionVersion."Service Contract No.",
                ServiceInspectionVersion.Code, ServiceInspectionVersion."Belongs to Scheme",
                ServiceInspectionVersion."Belongs to Base Insp. List", ServiceInspectionVersion."Index Date",
                "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme", "Belongs to Base Insp. List") AND
                InspectionLineProperty.Cancelled
              THEN BEGIN
                OCancellationLevel := ILevelInspectionType +1;
                EXIT(TRUE);
              END;
            END;

            IF ServiceObject.GET(ILevelCode) THEN BEGIN
              ServiceInspectionVersion.SETRANGE("Inspection Type", ServiceInspectionVersion."Inspection Type"::"Standard Object");
              ServiceInspectionVersion.SETRANGE("Service Contract No.", '');
              ServiceInspectionVersion.SETRANGE(Code, ServiceObject."Standard Object No.");
              ServiceInspectionVersion.SETRANGE("Belongs to Scheme", ILevelBelongstoScheme);
              ServiceInspectionVersion.SETRANGE("Belongs to Base Insp. List", ILevelBelongstoInspList);
              ServiceInspectionVersion.SETFILTER("Index Date", '<=%1', ILowerLevelSeekDate);
              IF ServiceInspectionVersion.FINDLAST THEN BEGIN
                IF InspectionLineProperty.GET(
                  ServiceInspectionVersion."Inspection Type", ServiceInspectionVersion."Service Contract No.",
                  ServiceInspectionVersion.Code, ServiceInspectionVersion."Belongs to Scheme",
                  ServiceInspectionVersion."Belongs to Base Insp. List", ServiceInspectionVersion."Index Date",
                  "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme", "Belongs to Base Insp. List") AND
                  InspectionLineProperty.Cancelled
                THEN BEGIN
                  OCancellationLevel := ServiceInspectionVersion."Inspection Type" +1;
                  EXIT(TRUE);
                END;
              END;
            END;
          END;
        ILevelInspectionType::"Standard Object":
          BEGIN
            ServiceInspectionVersion.SETRANGE("Inspection Type", ILevelInspectionType);
            ServiceInspectionVersion.SETRANGE("Service Contract No.", '');
            ServiceInspectionVersion.SETRANGE(Code, ILevelCode);
            ServiceInspectionVersion.SETRANGE("Belongs to Scheme", ILevelBelongstoScheme);
            ServiceInspectionVersion.SETRANGE("Belongs to Base Insp. List", ILevelBelongstoInspList);
            ServiceInspectionVersion.SETFILTER("Index Date", '<=%1', ILevelIndexDate);
            IF ServiceInspectionVersion.FINDLAST THEN BEGIN
              IF InspectionLineProperty.GET(
                ServiceInspectionVersion."Inspection Type", ServiceInspectionVersion."Service Contract No.",
                ServiceInspectionVersion.Code, ServiceInspectionVersion."Belongs to Scheme",
                ServiceInspectionVersion."Belongs to Base Insp. List", ServiceInspectionVersion."Index Date",
                "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme", "Belongs to Base Insp. List") AND
                InspectionLineProperty.Cancelled
              THEN BEGIN
                OCancellationLevel := ILevelInspectionType +1;
                EXIT(TRUE);
              END;
            END;
          END;
        ILevelInspectionType::"Object (Calls)":
          BEGIN
            ServiceInspectionVersion.SETRANGE("Inspection Type", ILevelInspectionType);
            ServiceInspectionVersion.SETRANGE("Service Contract No.", '');
            ServiceInspectionVersion.SETRANGE(Code, ILevelCode);
            ServiceInspectionVersion.SETRANGE("Belongs to Scheme", '');
            ServiceInspectionVersion.SETRANGE("Belongs to Base Insp. List", '');
            ServiceInspectionVersion.SETFILTER("Index Date", '<=%1', ILevelIndexDate);
            IF ServiceInspectionVersion.FINDLAST THEN BEGIN
              IF InspectionLineProperty.GET(
                ServiceInspectionVersion."Inspection Type", ServiceInspectionVersion."Service Contract No.",
                ServiceInspectionVersion.Code, '', '', ServiceInspectionVersion."Index Date",
                "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme", '') AND
                InspectionLineProperty.Cancelled
              THEN BEGIN
                OCancellationLevel := ILevelInspectionType +1;
                EXIT(TRUE);
              END;
            END;
          END;
      END;
    END;

    PROCEDURE SetDescription@1100528603(IDescription@1100528600 : Text[50];ILevelInspectionType@1100528602 : 'Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls)';ILevelServiceContractNo@1100528606 : Code[20];ILevelCode@1100528603 : Code[20];ILevelBelongstoScheme@1100528607 : Code[20];ILevelBelongstoInspList@1100528608 : Code[20];ILevelIndexDate@1100528604 : Date);
    VAR
      InspectionLineProperty@1100528601 : Record 11071978;
      ServiceInspectionLine@1100528605 : Record 11071751;
    BEGIN
      IF IDescription <> '' THEN
        IF ILevelInspectionType = ILevelInspectionType::"Base Inspection List" THEN
          ERROR(Text001, InspectionLineProperty.FIELDCAPTION(Description), ServiceInspectionLine.TABLECAPTION);
      IF IDescription = '' THEN BEGIN
        CASE ILevelInspectionType OF
          ILevelInspectionType::"Contract Object",
          ILevelInspectionType::"Object (Calls)":
            IF "Inspection Type" <> "Inspection Type"::"Standard Object" THEN
              IF NOT InspectionLineProperty.GET(
                ILevelInspectionType, ILevelServiceContractNo, ILevelCode, ILevelBelongstoScheme,
                ILevelBelongstoInspList, ILevelIndexDate,
                "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme",
                "Belongs to Base Insp. List")
              THEN
                ERROR(Text002);
          ILevelInspectionType::"Standard Object",
          ILevelInspectionType::"Standard Object (Calls)":
            IF "Inspection Type" <> "Inspection Type"::"Base Inspection List" THEN
              ERROR(Text002);
        END;
      END;
      IF NOT InspectionLineProperty.GET(
        ILevelInspectionType, ILevelServiceContractNo, ILevelCode, ILevelBelongstoScheme, ILevelBelongstoInspList, ILevelIndexDate,
        "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme", "Belongs to Base Insp. List")
      THEN BEGIN
        InspectionLineProperty."Inspection Type" := ILevelInspectionType;
        InspectionLineProperty."Service Contract No." := ILevelServiceContractNo;
        InspectionLineProperty.Code := ILevelCode;
        InspectionLineProperty."Belongs to Scheme" := ILevelBelongstoScheme;
        InspectionLineProperty."Belongs to Base Insp. List" := ILevelBelongstoInspList;
        InspectionLineProperty."Index Date" := ILevelIndexDate;
        InspectionLineProperty."Inspection Type (Base)" := "Inspection Type";
        InspectionLineProperty."Serv. Contract No. (Base)" := "Service Contract No.";
        InspectionLineProperty."Code (Base)" := Code;
        InspectionLineProperty."Line No. (Base)" := "Line No.";
        InspectionLineProperty."Belongs to Scheme (Base)" := "Belongs to Scheme";
        InspectionLineProperty."Belongs to Base Insp. List (Ba" := "Belongs to Base Insp. List";
        InspectionLineProperty.Description := IDescription;
        InspectionLineProperty.INSERT(TRUE);
      END ELSE BEGIN
        InspectionLineProperty.Description := IDescription;
        InspectionLineProperty.MODIFY(TRUE)
      END;
    END;

    PROCEDURE GetDescription@1100528600(ILevelInspectionType@1100528604 : 'Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls)';ILevelServiceContractNo@1100528602 : Code[20];ILevelCode@1100528603 : Code[20];ILevelBelongstoScheme@1100528609 : Code[20];ILevelBelongstoInspList@1100528610 : Code[20];ILevelIndexDate@1100528608 : Date;ILowerLevelSeekDate@1100528601 : Date;VAR ODescriptionLevel@1100528607 : ' ,Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls)') : Text[50];
    VAR
      InspectionLineProperty@1100528600 : Record 11071978;
      ServiceObject@1100528606 : Record 11071691;
      ServiceInspectionVersion@1100528605 : Record 11071750;
    BEGIN
      ODescriptionLevel := ODescriptionLevel::" ";
      CASE ILevelInspectionType OF
        ILevelInspectionType::"Contract Object":
          BEGIN
            ServiceInspectionVersion.SETRANGE("Inspection Type", ILevelInspectionType);
            ServiceInspectionVersion.SETRANGE("Service Contract No.", ILevelServiceContractNo);
            ServiceInspectionVersion.SETRANGE(Code, ILevelCode);
            ServiceInspectionVersion.SETRANGE("Belongs to Scheme", ILevelBelongstoScheme);
            ServiceInspectionVersion.SETRANGE("Belongs to Base Insp. List", ILevelBelongstoInspList);
            ServiceInspectionVersion.SETFILTER("Index Date", '<=%1', ILevelIndexDate);
            IF ServiceInspectionVersion.FINDLAST THEN BEGIN
              IF InspectionLineProperty.GET(
                ServiceInspectionVersion."Inspection Type", ServiceInspectionVersion."Service Contract No.",
                ServiceInspectionVersion.Code, ServiceInspectionVersion."Belongs to Scheme",
                ServiceInspectionVersion."Belongs to Base Insp. List", ServiceInspectionVersion."Index Date",
                "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme", "Belongs to Base Insp. List") AND
                (InspectionLineProperty.Description <> '')
              THEN BEGIN
                ODescriptionLevel := ILevelInspectionType +1;
                EXIT(InspectionLineProperty.Description);
              END;
            END;

            IF ServiceObject.GET(ILevelCode) THEN BEGIN
              ServiceInspectionVersion.SETRANGE("Inspection Type", ServiceInspectionVersion."Inspection Type"::"Standard Object");
              ServiceInspectionVersion.SETRANGE("Service Contract No.", '');
              ServiceInspectionVersion.SETRANGE(Code, ServiceObject."Standard Object No.");
              ServiceInspectionVersion.SETRANGE("Belongs to Scheme", ILevelBelongstoScheme);
              ServiceInspectionVersion.SETRANGE("Belongs to Base Insp. List", ILevelBelongstoInspList);
              ServiceInspectionVersion.SETFILTER("Index Date", '<=%1', ILowerLevelSeekDate);
              IF ServiceInspectionVersion.FINDLAST THEN BEGIN
                IF InspectionLineProperty.GET(
                  ServiceInspectionVersion."Inspection Type", ServiceInspectionVersion."Service Contract No.",
                  ServiceInspectionVersion.Code, ServiceInspectionVersion."Belongs to Scheme",
                  ServiceInspectionVersion."Belongs to Base Insp. List", ServiceInspectionVersion."Index Date",
                  "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme", "Belongs to Base Insp. List") AND
                  (InspectionLineProperty.Description <> '')
                THEN BEGIN
                  ODescriptionLevel := ServiceInspectionVersion."Inspection Type" +1;
                  EXIT(InspectionLineProperty.Description);
                END;
              END;
            END;
          END;
        ILevelInspectionType::"Standard Object":
          BEGIN
            ServiceInspectionVersion.SETRANGE("Inspection Type", ILevelInspectionType);
            ServiceInspectionVersion.SETRANGE("Service Contract No.", '');
            ServiceInspectionVersion.SETRANGE(Code, ILevelCode);
            ServiceInspectionVersion.SETRANGE("Belongs to Scheme", ILevelBelongstoScheme);
            ServiceInspectionVersion.SETRANGE("Belongs to Base Insp. List", ILevelBelongstoInspList);
            ServiceInspectionVersion.SETFILTER("Index Date", '<=%1', ILevelIndexDate);
            IF ServiceInspectionVersion.FINDLAST THEN BEGIN
              IF InspectionLineProperty.GET(
                ServiceInspectionVersion."Inspection Type", ServiceInspectionVersion."Service Contract No.",
                ServiceInspectionVersion.Code, ServiceInspectionVersion."Belongs to Scheme",
                ServiceInspectionVersion."Belongs to Base Insp. List", ServiceInspectionVersion."Index Date",
                "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme", "Belongs to Base Insp. List") AND
                (InspectionLineProperty.Description <> '')
              THEN BEGIN
                ODescriptionLevel := ILevelInspectionType +1;
                EXIT(InspectionLineProperty.Description);
              END;
            END;
          END;
        ILevelInspectionType::"Object (Calls)":
          BEGIN
            ServiceInspectionVersion.SETRANGE("Inspection Type", ILevelInspectionType);
            ServiceInspectionVersion.SETRANGE("Service Contract No.", '');
            ServiceInspectionVersion.SETRANGE(Code, ILevelCode);
            ServiceInspectionVersion.SETRANGE("Belongs to Scheme", '');
            ServiceInspectionVersion.SETRANGE("Belongs to Base Insp. List", '');
            ServiceInspectionVersion.SETFILTER("Index Date", '<=%1', ILevelIndexDate);
            IF ServiceInspectionVersion.FINDLAST THEN BEGIN
              IF InspectionLineProperty.GET(
                ServiceInspectionVersion."Inspection Type", ServiceInspectionVersion."Service Contract No.",
                ServiceInspectionVersion.Code, '', '', ServiceInspectionVersion."Index Date",
                "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme", '') AND
                (InspectionLineProperty.Description <> '')
              THEN BEGIN
                ODescriptionLevel := ILevelInspectionType +1;
                EXIT(InspectionLineProperty.Description);
              END;
            END;
          END;
      END;
      EXIT(Description);
    END;

    PROCEDURE SetLowerUpperValue@1100528604(ILowerUpperValue@1100528607 : 'Lower,Upper';IValue@1100528606 : Decimal;ILevelInspectionType@1100528605 : 'Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls)';ILevelServiceContractNo@1100528604 : Code[20];ILevelCode@1100528603 : Code[20];ILevelBelongstoScheme@1100528602 : Code[20];ILevelBelongstoInspList@1100528601 : Code[20];ILevelIndexDate@1100528600 : Date);
    VAR
      InspectionLineProperty@1100528609 : Record 11071978;
      ServiceInspectionLine@1100528608 : Record 11071751;
    BEGIN
      TESTFIELD("Field Type", "Field Type"::Value);
      IF IValue <> 0 THEN
        IF ILevelInspectionType = ILevelInspectionType::"Base Inspection List" THEN
          IF ILowerUpperValue = ILowerUpperValue::Lower THEN
            ERROR(Text001, InspectionLineProperty.FIELDCAPTION("Lower Value"), ServiceInspectionLine.TABLECAPTION)
          ELSE
            ERROR(Text001, InspectionLineProperty.FIELDCAPTION("Upper Value"), ServiceInspectionLine.TABLECAPTION);
      IF IValue = 0 THEN BEGIN
        CASE ILevelInspectionType OF
          ILevelInspectionType::"Contract Object",
          ILevelInspectionType::"Object (Calls)":
            IF "Inspection Type" <> "Inspection Type"::"Standard Object" THEN
              IF NOT InspectionLineProperty.GET(
                ILevelInspectionType, ILevelServiceContractNo, ILevelCode, ILevelBelongstoScheme,
                ILevelBelongstoInspList, ILevelIndexDate,
                "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme",
                "Belongs to Base Insp. List")
              THEN
                ERROR(Text002);
          ILevelInspectionType::"Standard Object",
          ILevelInspectionType::"Standard Object (Calls)":
            IF "Inspection Type" <> "Inspection Type"::"Base Inspection List" THEN
              ERROR(Text002);
        END;
      END;
      IF NOT InspectionLineProperty.GET(
        ILevelInspectionType, ILevelServiceContractNo, ILevelCode, ILevelBelongstoScheme, ILevelBelongstoInspList, ILevelIndexDate,
        "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme", "Belongs to Base Insp. List")
      THEN BEGIN
        InspectionLineProperty."Inspection Type" := ILevelInspectionType;
        InspectionLineProperty."Service Contract No." := ILevelServiceContractNo;
        InspectionLineProperty.Code := ILevelCode;
        InspectionLineProperty."Belongs to Scheme" := ILevelBelongstoScheme;
        InspectionLineProperty."Belongs to Base Insp. List" := ILevelBelongstoInspList;
        InspectionLineProperty."Index Date" := ILevelIndexDate;
        InspectionLineProperty."Inspection Type (Base)" := "Inspection Type";
        InspectionLineProperty."Serv. Contract No. (Base)" := "Service Contract No.";
        InspectionLineProperty."Code (Base)" := Code;
        InspectionLineProperty."Line No. (Base)" := "Line No.";
        InspectionLineProperty."Belongs to Scheme (Base)" := "Belongs to Scheme";
        InspectionLineProperty."Belongs to Base Insp. List (Ba" := "Belongs to Base Insp. List";
        IF ILowerUpperValue = ILowerUpperValue::Lower THEN
          InspectionLineProperty."Lower Value" := IValue
        ELSE
          InspectionLineProperty."Upper Value" := IValue;
        InspectionLineProperty.INSERT(TRUE);
      END ELSE BEGIN
        IF ILowerUpperValue = ILowerUpperValue::Lower THEN
          InspectionLineProperty."Lower Value" := IValue
        ELSE
          InspectionLineProperty."Upper Value" := IValue;
        InspectionLineProperty.MODIFY(TRUE)
      END;
    END;

    PROCEDURE GetLowerUpperValue@1100528602(ILevelInspectionType@1100528604 : 'Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls)';ILevelServiceContractNo@1100528602 : Code[20];ILevelCode@1100528603 : Code[20];ILevelBelongstoScheme@1100528609 : Code[20];ILevelBelongstoInspList@1100528610 : Code[20];ILevelIndexDate@1100528608 : Date;ILowerLevelSeekDate@1100528601 : Date;ILowerUpperValue@1100528611 : 'Lower,Upper';VAR ODescriptionLevel@1100528607 : ' ,Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls)') : Decimal;
    VAR
      InspectionLineProperty@1100528600 : Record 11071978;
      ServiceObject@1100528606 : Record 11071691;
      ServiceInspectionVersion@1100528605 : Record 11071750;
    BEGIN
      ODescriptionLevel := ODescriptionLevel::" ";
      CASE ILevelInspectionType OF
        ILevelInspectionType::"Contract Object":
          BEGIN
            ServiceInspectionVersion.SETRANGE("Inspection Type", ILevelInspectionType);
            ServiceInspectionVersion.SETRANGE("Service Contract No.", ILevelServiceContractNo);
            ServiceInspectionVersion.SETRANGE(Code, ILevelCode);
            ServiceInspectionVersion.SETRANGE("Belongs to Scheme", ILevelBelongstoScheme);
            ServiceInspectionVersion.SETRANGE("Belongs to Base Insp. List", ILevelBelongstoInspList);
            ServiceInspectionVersion.SETFILTER("Index Date", '<=%1', ILevelIndexDate);
            IF ServiceInspectionVersion.FINDLAST THEN BEGIN
              IF InspectionLineProperty.GET(
                ServiceInspectionVersion."Inspection Type", ServiceInspectionVersion."Service Contract No.",
                ServiceInspectionVersion.Code, ServiceInspectionVersion."Belongs to Scheme",
                ServiceInspectionVersion."Belongs to Base Insp. List", ServiceInspectionVersion."Index Date",
                "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme", "Belongs to Base Insp. List") AND
                (((ILowerUpperValue = ILowerUpperValue::Lower) AND (InspectionLineProperty."Lower Value" <> 0)) OR
                 ((ILowerUpperValue = ILowerUpperValue::Upper) AND (InspectionLineProperty."Upper Value" <> 0)))
              THEN BEGIN
                ODescriptionLevel := ILevelInspectionType +1;
                IF ILowerUpperValue = ILowerUpperValue::Lower THEN
                  EXIT(InspectionLineProperty."Lower Value")
                ELSE
                  EXIT(InspectionLineProperty."Upper Value");
              END;
            END;

            IF ServiceObject.GET(ILevelCode) THEN BEGIN
              ServiceInspectionVersion.SETRANGE("Inspection Type", ServiceInspectionVersion."Inspection Type"::"Standard Object");
              ServiceInspectionVersion.SETRANGE("Service Contract No.", '');
              ServiceInspectionVersion.SETRANGE(Code, ServiceObject."Standard Object No.");
              ServiceInspectionVersion.SETRANGE("Belongs to Scheme", ILevelBelongstoScheme);
              ServiceInspectionVersion.SETRANGE("Belongs to Base Insp. List", ILevelBelongstoInspList);
              ServiceInspectionVersion.SETFILTER("Index Date", '<=%1', ILowerLevelSeekDate);
              IF ServiceInspectionVersion.FINDLAST THEN BEGIN
                IF InspectionLineProperty.GET(
                  ServiceInspectionVersion."Inspection Type", ServiceInspectionVersion."Service Contract No.",
                  ServiceInspectionVersion.Code, ServiceInspectionVersion."Belongs to Scheme",
                  ServiceInspectionVersion."Belongs to Base Insp. List", ServiceInspectionVersion."Index Date",
                  "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme", "Belongs to Base Insp. List") AND
                  (((ILowerUpperValue = ILowerUpperValue::Lower) AND (InspectionLineProperty."Lower Value" <> 0)) OR
                   ((ILowerUpperValue = ILowerUpperValue::Upper) AND (InspectionLineProperty."Upper Value" <> 0)))
                THEN BEGIN
                  ODescriptionLevel := ServiceInspectionVersion."Inspection Type" +1;
                  IF ILowerUpperValue = ILowerUpperValue::Lower THEN
                    EXIT(InspectionLineProperty."Lower Value")
                  ELSE
                    EXIT(InspectionLineProperty."Upper Value");
                END;
              END;
            END;
          END;
        ILevelInspectionType::"Standard Object":
          BEGIN
            ServiceInspectionVersion.SETRANGE("Inspection Type", ILevelInspectionType);
            ServiceInspectionVersion.SETRANGE("Service Contract No.", '');
            ServiceInspectionVersion.SETRANGE(Code, ILevelCode);
            ServiceInspectionVersion.SETRANGE("Belongs to Scheme", ILevelBelongstoScheme);
            ServiceInspectionVersion.SETRANGE("Belongs to Base Insp. List", ILevelBelongstoInspList);
            ServiceInspectionVersion.SETFILTER("Index Date", '<=%1', ILevelIndexDate);
            IF ServiceInspectionVersion.FINDLAST THEN BEGIN
              IF InspectionLineProperty.GET(
                ServiceInspectionVersion."Inspection Type", ServiceInspectionVersion."Service Contract No.",
                ServiceInspectionVersion.Code, ServiceInspectionVersion."Belongs to Scheme",
                ServiceInspectionVersion."Belongs to Base Insp. List", ServiceInspectionVersion."Index Date",
                "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme", "Belongs to Base Insp. List") AND
                (((ILowerUpperValue = ILowerUpperValue::Lower) AND (InspectionLineProperty."Lower Value" <> 0)) OR
                 ((ILowerUpperValue = ILowerUpperValue::Upper) AND (InspectionLineProperty."Upper Value" <> 0)))
              THEN BEGIN
                ODescriptionLevel := ILevelInspectionType +1;
                IF ILowerUpperValue = ILowerUpperValue::Lower THEN
                  EXIT(InspectionLineProperty."Lower Value")
                ELSE
                  EXIT(InspectionLineProperty."Upper Value");
              END;
            END;
          END;
        ILevelInspectionType::"Object (Calls)":
          BEGIN
            ServiceInspectionVersion.SETRANGE("Inspection Type", ILevelInspectionType);
            ServiceInspectionVersion.SETRANGE("Service Contract No.", '');
            ServiceInspectionVersion.SETRANGE(Code, ILevelCode);
            ServiceInspectionVersion.SETRANGE("Belongs to Scheme", '');
            ServiceInspectionVersion.SETRANGE("Belongs to Base Insp. List", '');
            ServiceInspectionVersion.SETFILTER("Index Date", '<=%1', ILevelIndexDate);
            IF ServiceInspectionVersion.FINDLAST THEN BEGIN
              IF InspectionLineProperty.GET(
                ServiceInspectionVersion."Inspection Type", ServiceInspectionVersion."Service Contract No.",
                ServiceInspectionVersion.Code, '', '', ServiceInspectionVersion."Index Date",
                "Inspection Type", "Service Contract No.", Code, "Line No.", "Belongs to Scheme", '') AND
                (((ILowerUpperValue = ILowerUpperValue::Lower) AND (InspectionLineProperty."Lower Value" <> 0)) OR
                 ((ILowerUpperValue = ILowerUpperValue::Upper) AND (InspectionLineProperty."Upper Value" <> 0)))
              THEN BEGIN
                ODescriptionLevel := ILevelInspectionType +1;
                IF ILowerUpperValue = ILowerUpperValue::Lower THEN
                  EXIT(InspectionLineProperty."Lower Value")
                ELSE
                  EXIT(InspectionLineProperty."Upper Value");
              END;
            END;
          END;
      END;
      IF ILowerUpperValue = ILowerUpperValue::Lower THEN
        EXIT("Lower Value")
      ELSE
        EXIT("Upper Value");
    END;

    LOCAL PROCEDURE TestUpperAndLowerValue@1100528607();
    BEGIN
      IF ("Lower Value" = 0) OR ("Upper Value" = 0) THEN
        EXIT;
      IF ("Upper Value" <> 0) AND ("Upper Value" < "Lower Value") THEN
        ERROR(Text003, FIELDCAPTION("Upper Value"), FIELDCAPTION("Lower Value"));
    END;

    PROCEDURE LookupDependencyLine@1100528100(VAR Value@1100528102 : GUID) : Boolean;
    VAR
      ServiceInspectionLine@1100528103 : Record 11071751;
      ServiceInspectionLines@1100528104 : Page 11127083;
      EmptyGuid@1100528105 : GUID;
      OriginalFilterGroup@1100528100 : Integer;
    BEGIN
      OriginalFilterGroup := ServiceInspectionLine.FILTERGROUP;
      ServiceInspectionLine.FILTERGROUP(10);
      ServiceInspectionLine.SETRANGE("Inspection Type", "Inspection Type");
      ServiceInspectionLine.SETRANGE("Service Contract No.", "Service Contract No.");
      ServiceInspectionLine.SETRANGE(Code, Code);
      ServiceInspectionLine.SETRANGE("Belongs to Scheme", "Belongs to Scheme");
      ServiceInspectionLine.SETRANGE("Belongs to Base Insp. List", "Belongs to Base Insp. List");
      ServiceInspectionLine.SETRANGE("Index Date", "Index Date");
      ServiceInspectionLine.SETRANGE(Type, ServiceInspectionLine.Type::Line);
      ServiceInspectionLine.SETFILTER("Line No.", '<>%1', "Line No.");
      ServiceInspectionLine.SETFILTER("Depending on Id", '=%1', EmptyGuid);
      ServiceInspectionLine.SETFILTER("Field Type", '%1|%2|%3|%4', "Field Type"::Value, "Field Type"::Date, "Field Type"::"Yes/No", "Field Type"::Option);
      ServiceInspectionLines.SETTABLEVIEW(ServiceInspectionLine);

      ServiceInspectionLine.SETRANGE(Id, "Depending on Id");
      IF ServiceInspectionLine.FINDFIRST THEN
        ServiceInspectionLines.SETRECORD(ServiceInspectionLine);

      ServiceInspectionLine.FILTERGROUP(OriginalFilterGroup);
      ServiceInspectionLines.EDITABLE := FALSE;
      ServiceInspectionLines.LOOKUPMODE := TRUE;

      IF ServiceInspectionLines.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ServiceInspectionLines.GETRECORD(ServiceInspectionLine);
        Value := ServiceInspectionLine.Id;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE LookupDependingCondition@1100528101(VAR Value@1100528100 : Text) : Boolean;
    VAR
      BaseServiceInspectionOption@1100528102 : Record 11071749;
      BaseServiceInspectionOptionPage@1100528101 : Page 11125256;
    BEGIN
      IF "Field Type" IN ["Field Type"::Option, "Field Type"::"Yes/No"] THEN BEGIN
        BaseServiceInspectionOption.SETRANGE("Base Inspection Line Code", "Inspection Code");
        BaseServiceInspectionOptionPage.SETTABLEVIEW(BaseServiceInspectionOption);

        IF Value <> '' THEN BEGIN
          BaseServiceInspectionOption.SETRANGE(Description, Value);
          IF BaseServiceInspectionOption.FINDFIRST THEN
            BaseServiceInspectionOptionPage.SETRECORD(BaseServiceInspectionOption);
        END;

        BaseServiceInspectionOptionPage.EDITABLE := FALSE;
        BaseServiceInspectionOptionPage.LOOKUPMODE := TRUE;
        IF BaseServiceInspectionOptionPage.RUNMODAL = ACTION::LookupOK THEN BEGIN
          BaseServiceInspectionOptionPage.GETRECORD(BaseServiceInspectionOption);
          Value := BaseServiceInspectionOption.Description;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE ClearDependencyOptions@1100528701();
    BEGIN
      "Depending Condition" := '';
      "Dependency Effect" := "Dependency Effect"::" ";
      "Dependency Condition Date 1" := 0D;
      "Dependency Condition Date 2" := 0D;
      "Dependency Condition Decimal 1" := 0;
      "Dependency Condition Decimal 2" := 0;
      "Dependency Condition Operation" := '';
    END;

    BEGIN
    END.
  }
}

