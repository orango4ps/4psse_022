OBJECT Table 11012864 Consignment Time
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               LicenceCu.CheckLicenceConsignment;
             END;

    OnModify=BEGIN
               LicenceCu.CheckLicenceConsignment;
             END;

    CaptionML=[ENU=Consignment Time;
               NOR=Fullservicepakke, tid;
               SVE=Fullservicepaketstid];
  }
  FIELDS
  {
    { 1   ;   ;Consignment Code    ;Code10        ;TableRelation=Consignment;
                                                   CaptionML=[ENU=Consignment Code;
                                                              NOR=Kode for fullservicepakke;
                                                              SVE=Fullservicepaketskod];
                                                   NotBlank=Yes }
    { 2   ;   ;Start Day of Week   ;Integer       ;CaptionML=[ENU=Start Day of Week;
                                                              NOR=Startdag p† uken;
                                                              SVE=Startdag p† veckan] }
    { 3   ;   ;Start Date          ;Date          ;OnValidate=BEGIN
                                                                LookupDayAndWeek("Start Date", "Start Day", "Start Week");
                                                                CheckDateTimeOverlap;
                                                                CheckDateTimeBaseCalendar("Start Date", "Start Time");
                                                                "Start Day of Week" := DATE2DWY("Start Date", 1);
                                                              END;

                                                   CaptionML=[ENU=Start Date;
                                                              NOR=Startdato;
                                                              SVE=Startdatum] }
    { 4   ;   ;Start Time          ;Time          ;OnValidate=BEGIN
                                                                CheckDateTimeOverlap;
                                                                CheckDateTimeBaseCalendar("Start Date", "Start Time");
                                                              END;

                                                   CaptionML=[ENU=Start Time;
                                                              NOR=Starttid;
                                                              SVE=Starttid] }
    { 5   ;   ;Start Day           ;Text30        ;FieldClass=Normal;
                                                   CaptionML=[ENU=Start Day;
                                                              NOR=Startdag;
                                                              SVE=Startdag];
                                                   Editable=No }
    { 6   ;   ;Start Week          ;Integer       ;FieldClass=Normal;
                                                   CaptionML=[ENU=Start Week;
                                                              NOR=Startuke;
                                                              SVE=Startvecka];
                                                   Editable=No }
    { 7   ;   ;End Date            ;Date          ;OnValidate=BEGIN
                                                                LookupDayAndWeek("End Date", "End Day", "End Week");
                                                                CheckDateTimeOverlap;
                                                                CheckDateTimeBaseCalendar("End Date", "End Time");
                                                              END;

                                                   CaptionML=[ENU=End Date;
                                                              NOR=Sluttdato;
                                                              SVE=Slutdatum] }
    { 8   ;   ;End Time            ;Time          ;OnValidate=BEGIN
                                                                CheckDateTimeOverlap;
                                                                CheckDateTimeBaseCalendar("End Date", "End Time");
                                                              END;

                                                   CaptionML=[ENU=End Time;
                                                              NOR=Sluttid;
                                                              SVE=Sluttid] }
    { 9   ;   ;End Day             ;Text30        ;FieldClass=Normal;
                                                   CaptionML=[ENU=End Day;
                                                              NOR=Avslutningsdag;
                                                              SVE=Slutdag];
                                                   Editable=No }
    { 10  ;   ;End Week            ;Integer       ;CaptionML=[ENU=End Week;
                                                              NOR=Avslutningsuke;
                                                              SVE=Slutvecka];
                                                   Editable=No }
    { 11  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
  }
  KEYS
  {
    {    ;Consignment Code,Start Date,Start Time  ;Clustered=Yes }
    {    ;Consignment Code,Start Date,End Date     }
    {    ;Start Date,Start Time                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'ENU=%1 is during working hours (%2 - %3).';
      Text11012864@1100485000 : TextConst 'ENU=%1 has an overlap with another %2.;NOR=%1 har en overlapping med en annen %2;SVE=%1 har en ”verlappning med en annan %2.';
      LicenceCu@1100485001 : Codeunit 11012131;

    LOCAL PROCEDURE LookupDayAndWeek@1100485000(LookupDate@1100485000 : Date;VAR DayText@1100485001 : Text[30];VAR WeekNo@1100485002 : Integer);
    VAR
      DateRec@1100485003 : Record 2000000007;
    BEGIN
      DateRec.SETRANGE("Period Type", DateRec."Period Type"::Date);
      DateRec.SETRANGE("Period Start", LookupDate);
      IF DateRec.FINDFIRST THEN
        DayText := DateRec."Period Name";

      DateRec.SETRANGE("Period Type", DateRec."Period Type"::Week);
      DateRec.SETFILTER("Period Start", '..%1', LookupDate);
      DateRec.SETFILTER("Period End", '%1..', LookupDate);
      IF DateRec.FINDFIRST THEN
        WeekNo := DateRec."Period No.";
    END;

    LOCAL PROCEDURE CheckDateTimeOverlap@1100485001();
    VAR
      ConsignmentTime@1100485000 : Record 11012864;
      CheckDT@1100485001 : DateTime;
      StartDT@1100485002 : DateTime;
      EndDT@1100485003 : DateTime;
    BEGIN
      IF ("Start Date" <> 0D) AND ("Start Time" <> 0T) THEN BEGIN
        CheckDT := CREATEDATETIME("Start Date", "Start Time");
        ConsignmentTime.SETRANGE("Consignment Code", "Consignment Code");
        ConsignmentTime.SETFILTER("Start Date", '..%1' ,"Start Date");
        ConsignmentTime.SETFILTER("End Date", '%1..' ,"Start Date");
        IF ConsignmentTime.FINDSET(FALSE, FALSE) THEN
          REPEAT
            IF ConsignmentTime.GETPOSITION <> xRec.GETPOSITION THEN BEGIN
              StartDT := CREATEDATETIME(ConsignmentTime."Start Date", ConsignmentTime."Start Time");
              EndDT := CREATEDATETIME(ConsignmentTime."End Date", ConsignmentTime."End Time");
              IF (CheckDT > StartDT) AND (CheckDT < EndDT) THEN
                ERROR(Text11012864, FIELDCAPTION("Start Date"), TABLECAPTION);
            END;
          UNTIL ConsignmentTime.NEXT = 0;
      END;

      IF ("End Date" <> 0D) AND ("End Time" <> 0T) THEN BEGIN
        CheckDT := CREATEDATETIME("End Date", "End Time");
        ConsignmentTime.SETFILTER("Start Date", '..%1' ,"End Date");
        ConsignmentTime.SETFILTER("End Date", '%1..' ,"End Date");
        IF ConsignmentTime.FINDSET(FALSE, FALSE) THEN
          REPEAT
            IF ConsignmentTime.GETPOSITION <> xRec.GETPOSITION THEN BEGIN
              StartDT := CREATEDATETIME(ConsignmentTime."Start Date", ConsignmentTime."Start Time");
              EndDT := CREATEDATETIME(ConsignmentTime."End Date", ConsignmentTime."End Time");
              IF (CheckDT > StartDT) AND (CheckDT < EndDT) THEN
                ERROR(Text11012864, FIELDCAPTION("End Date"), TABLECAPTION);
            END;
          UNTIL ConsignmentTime.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckDateTimeBaseCalendar@1100528600(DateToCheck@1100528600 : Date;TimeToCheck@1100528601 : Time);
    VAR
      CompanyInformation@1100528602 : Record 79;
      BaseCalendar@1100528603 : Record 11072014;
      WorkFrom@1100528604 : Time;
      WorkUntil@1100528605 : Time;
      DateTimeToCheck@1100528606 : DateTime;
      WorkFromDateTime@1100528607 : DateTime;
      WorkUntilDateTime@1100528608 : DateTime;
    BEGIN
      CompanyInformation.GET();
      IF CompanyInformation."Base Calendar Code" = '' THEN
          EXIT;
      IF NOT BaseCalendar.GET(CompanyInformation."Base Calendar Code") THEN
          EXIT;
      CASE DATE2DWY(DateToCheck, 1) OF
          1:
              BEGIN
                  WorkFrom := BaseCalendar."Monday Work From";
                  WorkUntil := BaseCalendar."Monday Work Until";
              END;
          2:
              BEGIN
                  WorkFrom := BaseCalendar."Tuesday Work From";
                  WorkUntil := BaseCalendar."Tuesday Work Until";
              END;
          3:
              BEGIN
                  WorkFrom := BaseCalendar."Wednesday Work From";
                  WorkUntil := BaseCalendar."Wednesday Work Until";
              END;
          4:
              BEGIN
                  WorkFrom := BaseCalendar."Thursday Work From";
                  WorkUntil := BaseCalendar."Thursday Work Until";
              END;
          5:
              BEGIN
                  WorkFrom := BaseCalendar."Friday Work From";
                  WorkUntil := BaseCalendar."Friday Work Until";
              END;
          6:
              BEGIN
                  WorkFrom := BaseCalendar."Saturday Work From";
                  WorkUntil := BaseCalendar."Saturday Work Until";
              END;
          7:
              BEGIN
                  WorkFrom := BaseCalendar."Sunday Work From";
                  WorkUntil := BaseCalendar."Sunday Work Until";
              END;
      END;
      DateTimeToCheck := CREATEDATETIME(DateToCheck, TimeToCheck);
      WorkFromDateTime := CREATEDATETIME(DateToCheck, WorkFrom);
      WorkUntilDateTime := CREATEDATETIME(DateToCheck, WorkUntil);
      IF (WorkFrom <> 0T) AND (WorkUntil <> 0T) AND (DateTimeToCheck > WorkFromDateTime) AND (DateTimeToCheck < WorkUntilDateTime) THEN
          MESSAGE(Text000, DateTimeToCheck, WorkFrom, WorkUntil);
    END;

    BEGIN
    END.
  }
}

