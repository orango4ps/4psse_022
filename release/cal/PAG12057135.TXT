OBJECT Page 12057135 ExFlow Nav Search Dimensions
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF512000,4PS;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Search Dimension;
               SVE=S”k Dimension];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table12013663;
    PageType=List;
    SourceTableTemporary=Yes;
  }
  CONTROLS
  {
    { 1100285000;;Container;
                ContainerType=ContentArea }

    { 1100285001;1;Group  ;
                CaptionML=[ENU=Dimensions:;
                           SVE=Dimensioner:];
                GroupType=Repeater }

    { 1100285002;2;Field  ;
                ApplicationArea=#All;
                SourceExpr="Column Code";
                Editable=FALSE }

    { 1100285004;2;Field  ;
                Name=Text Range FILED;
                CaptionML=[ENU=Value;
                           SVE=V„rde];
                ApplicationArea=#All;
                SourceExpr="Text Range";
                OnLookup=BEGIN
                           EXIT(LookUpExFlow(Text));
                         END;
                          }

  }
  CODE
  {
    VAR
      TxtAccountNo@1100285000 : Text;
      TxtItemNo@1100285001 : Text;
      TxtCRSLineTypeFixedAsset@1100285002 : Text;
      TxtCRSLineTypeCharge@1100285003 : Text;
      TxtDepartment@1100285004 : Text;
      TxtProject@1100285005 : Text;
      TxtAccCode@1100285006 : Text;
      TxtProjectNo@1100285007 : Text;
      TxtProjectTask@1100285008 : Text;
      GeneralLedgerSetup@1100285009 : Record 98;
      EXColumn@1100285010 : Record 12013661;
      LineNo@1100285011 : Integer;
      TextRange@1100285012 : Text;
      EXColumn1@1100285013 : Record 12013661;
      ExCodingRuleLine@1100285014 : TEMPORARY Record 12013663;
      TXT001@1100285015 : TextConst 'ENU=Please enter deferral start date in one of the following formats: "yyyy-mm-dd", "yy-mm-dd", "yyyy/mm/dd", "yy/mm/dd", "yyyy.mm.dd", "yy.mm.dd", "yymmdd", "yyyymmdd";SVE=Skriv Periodiseringsstartdatumet i ett av f”ljande format: "yyyy-mm-dd", "yy-mm-dd", "yyyy/mm/dd", "yy/mm/dd", "yyyy.mm.dd", "yy.mm.dd", "yymmdd", "yyyymmdd"';
      TXT002@1100285016 : TextConst 'ENU="ENU=Cannot find a EX Column record for Source %1;SVE=Kan ej hitta n†got i EX Kolumn med K„lla %1"';
      SaveTextRange@1100285017 : ARRAY [20] OF Text;

    PROCEDURE LookUpExFlow@1100285000(VAR Text@1100285000 : Text[1024]) : Boolean;
    VAR
      Account@1100285003 : Record 15;
      Item@1100285004 : Record 27;
      DimValue@1100285010 : Record 349;
      FixedAsset@1100285011 : Record 5600;
      Charge@1100285012 : Record 5800;
      Job@1100285013 : Record 11072003;
      DatePicker@1100285009 : Record 2000000007;
      ItemList@1100285008 : Page 31;
      FixedList@1100285007 : Page 5601;
      DimList@1100285002 : Page 560;
      AccountList@1100285001 : Page 18;
      ChargeList@1100285006 : Page 5800;
      JobList@1100285005 : Page 11072004;
      ExPeriodicMgt@1100285014 : Codeunit 12013599;
    BEGIN
      GeneralLedgerSetup.GET;

      IF STRPOS("Column Source", 'DIM') <> 0 THEN BEGIN
        EXColumn.RESET;
        EXColumn.SETRANGE(Source, "Column Source");
        IF NOT EXColumn.FINDFIRST THEN
          ERROR(TXT002,"Column Source");

        CLEAR(DimList);
        DimList.LOOKUPMODE(TRUE);
        DimValue.RESET;
        DimValue.SETRANGE("Dimension Code", EXColumn."Dimension Code");
        DimList.SETTABLEVIEW(DimValue);
        IF DimList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          DimList.GETRECORD(DimValue);
          Text := Text + DimValue.Code;
          TextRange := TextRange  + DimValue.Code;
          CurrPage.UPDATE(TRUE);
          EXIT(TRUE);
        END ELSE
          EXIT(FALSE);
      END;

      CASE "Column Source" OF
        'G_LACCOUNT' :
          BEGIN
            CLEAR(AccountList);
            AccountList.LOOKUPMODE(TRUE);
            AccountList.SETTABLEVIEW(Account);
            IF AccountList.RUNMODAL = ACTION::LookupOK THEN
              BEGIN
                AccountList.GETRECORD(Account);
                Text := Text + AccountList.GetSelectionFilter;
                TextRange := TextRange + AccountList.GetSelectionFilter;
                CurrPage.UPDATE(TRUE);
                EXIT(TRUE);
              END ELSE
                EXIT(FALSE);
          END;

        'ITEM':
          BEGIN
            CLEAR(ItemList);
            ItemList.LOOKUPMODE(TRUE);
            Item.RESET;
            ItemList.SETTABLEVIEW(Item);
            IF ItemList.RUNMODAL = ACTION::LookupOK THEN
              BEGIN
                ItemList.GETRECORD(Item);
                Text := Text + Item."No.";
                TextRange := TextRange  + Item."No.";
                CurrPage.UPDATE(TRUE);
                EXIT(TRUE);
              END ELSE
                EXIT(FALSE);
          END;

        'FIXEDASSET':
          BEGIN
            CLEAR(FixedList);
            FixedList.LOOKUPMODE(TRUE);
            FixedAsset.RESET;
            FixedList.SETTABLEVIEW(FixedAsset);
            IF FixedList.RUNMODAL = ACTION::LookupOK THEN
              BEGIN
                FixedList.GETRECORD(FixedAsset);
                Text := Text + FixedAsset."No.";
                TextRange := TextRange  + FixedAsset."No.";
                CurrPage.UPDATE(TRUE);
                EXIT(TRUE);
              END ELSE
                EXIT(FALSE);
          END;

        'CHARGE':
          BEGIN
            CLEAR(ChargeList);
            ChargeList.LOOKUPMODE(TRUE);
            Charge.RESET;
            ChargeList.SETTABLEVIEW(Charge);
            IF ChargeList.RUNMODAL = ACTION::LookupOK THEN
              BEGIN
                ChargeList.GETRECORD(Charge);
                Text := Text + Charge."No.";
                TextRange := TextRange  + Charge."No.";
                CurrPage.UPDATE(TRUE);
                EXIT(TRUE);
              END ELSE
                EXIT(FALSE);
          END;

        'JOB':
          BEGIN
            CLEAR(JobList);
            JobList.LOOKUPMODE(TRUE);
            Job.RESET;
            JobList.SETTABLEVIEW(Job);
            IF JobList.RUNMODAL = ACTION::LookupOK THEN
              BEGIN
                JobList.GETRECORD(Job);
                Text := Text + Job."No.";
                TextRange := TextRange  + Job."No.";
                CurrPage.UPDATE(TRUE);
                EXIT(TRUE);
              END ELSE
                EXIT(FALSE);
          END;

        'PERCODE' :
          BEGIN
            IF ExPeriodicMgt.PerCodeLookup(Rec,Text) THEN BEGIN
              CurrPage.UPDATE(TRUE);
              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;

        'PERDATE':
          BEGIN
            MESSAGE(TXT001);
          END;

      END;

      EXIT(FALSE);
    END;

    PROCEDURE PopulateTable@1100285001(VAR Company@1100285000 : Text[50]);
    BEGIN
      EXColumn.RESET;
      EXColumn.CHANGECOMPANY(Company);
    END;

    PROCEDURE GetTempTable@1100285003(VAR ExCodingRuleLine@1100285000 : TEMPORARY Record 12013663);
    BEGIN
      ExCodingRuleLine.RESET;
      ExCodingRuleLine.DELETEALL;
      RESET;
      IF FINDSET THEN
        REPEAT
          ExCodingRuleLine.INIT;
          ExCodingRuleLine := Rec;
          ExCodingRuleLine.INSERT;
        UNTIL (NEXT = 0);
    END;

    PROCEDURE SetTempTable@1100285004(VAR ExCodingRuleLine@1100285001 : TEMPORARY Record 12013663;Company@1100285000 : Text);
    BEGIN
      EXColumn.CHANGECOMPANY(Company);
      IF ExCodingRuleLine.ISEMPTY THEN BEGIN
        LineNo:=0;
        IF EXColumn.FINDSET THEN
          REPEAT
            INIT;
            LineNo:=LineNo+1;
            ID:= EXColumn.ID;
            "Column Code":=EXColumn.Code;
            "Column Source":=EXColumn.Source;
            "Line No.":= LineNo;
            IF INSERT THEN;
          UNTIL EXColumn.NEXT = 0;
        IF FINDFIRST THEN;
      END ELSE BEGIN
        ExCodingRuleLine.RESET;
        ExCodingRuleLine.FINDSET;
        REPEAT
          INIT;
          Rec := ExCodingRuleLine;
          IF INSERT THEN;
        UNTIL (ExCodingRuleLine.NEXT = 0);
      END;
    END;

    PROCEDURE ResetValues@1100285002(VAR ExCodingRuleLine@1100285001 : TEMPORARY Record 12013663);
    BEGIN
      ExCodingRuleLine.RESET;
      ExCodingRuleLine.DELETEALL;
      RESET;
      IF FINDSET THEN
        REPEAT
          ExCodingRuleLine."Text Range" :='' ;
          IF ExCodingRuleLine.MODIFY THEN;
        UNTIL (NEXT = 0);
    END;

    BEGIN
    {
      4PS Changed Job Variables
    }
    END.
  }
}

