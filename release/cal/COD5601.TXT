OBJECT Codeunit 5601 FA Insert G/L Account
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.04,4PS14.00;
  }
  PROPERTIES
  {
    TableNo=5601;
    OnRun=VAR
            DisposalEntry@1000 : Boolean;
          BEGIN
            CLEAR(FAGLPostBuf);
            DisposalEntry :=
              ("FA Posting Category" = "FA Posting Category"::" ") AND
              ("FA Posting Type" = "FA Posting Type"::"Proceeds on Disposal");
            IF NOT BookValueEntry THEN
              BookValueEntry :=
                ("FA Posting Category" = "FA Posting Category"::Disposal) AND
                ("FA Posting Type" = "FA Posting Type"::"Book Value on Disposal");

            IF NOT DisposalEntry THEN
              FAGLPostBuf."Account No." := FAGetGLAcc.GetAccNo(Rec);
            FAGLPostBuf.Amount := Amount;
            FAGLPostBuf.Correction := Correction;
            FAGLPostBuf."Global Dimension 1 Code" := "Global Dimension 1 Code";
            FAGLPostBuf."Global Dimension 2 Code" := "Global Dimension 2 Code";
            FAGLPostBuf."Dimension Set ID" := "Dimension Set ID";
            FAGLPostBuf."FA Entry No." := "Entry No.";
            OnAfterCopyFAGLPostBufFromFALederEntry(FAGLPostBuf,Rec);

            IF "Entry No." > 0 THEN
              FAGLPostBuf."FA Entry Type" := FAGLPostBuf."FA Entry Type"::"Fixed Asset";
            FAGLPostBuf."Automatic Entry" := "Automatic Entry";
            GLEntryNo := "G/L Entry No.";
            InsertBufferEntry;
            "G/L Entry No." := TempFAGLPostBuf."Entry No.";
            IF DisposalEntry THEN
              CalcDisposalAmount(Rec);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=must not be more than 100;NOR=kan ikke v‘re mer enn 100;SVE=f†r inte vara st”rre „n 100';
      Text001@1001 : TextConst 'ENU=There is not enough space to insert the balance accounts.;NOR=Det finnes ikke nok plass til † sette inn motkonti.;SVE=Det finns inte tillr„ckligt med utrymme f”r att infoga motkonton.';
      TempFAGLPostBuf@1002 : TEMPORARY Record 5637;
      FAGLPostBuf@1003 : Record 5637;
      FAAlloc@1004 : Record 11072080;
      FAPostingGr@1005 : Record 5606;
      FAPostingGr2@1006 : Record 5606;
      FADeprBook@1007 : Record 5612;
      FADimMgt@1011 : Codeunit 5674;
      FAGetGLAcc@1012 : Codeunit 5602;
      DepreciationCalc@1013 : Codeunit 5616;
      NextEntryNo@1014 : Integer;
      GLEntryNo@1015 : Integer;
      TotalAllocAmount@1016 : Decimal;
      NewAmount@1017 : Decimal;
      TotalPercent@1018 : Decimal;
      NumberOfEntries@1019 : Integer;
      NextLineNo@1020 : Integer;
      NoOfEmptyLines@1021 : Integer;
      NoOfEmptyLines2@1027 : Integer;
      OrgGenJnlLine@1022 : Boolean;
      DisposalEntryNo@1023 : Integer;
      GainLossAmount@1024 : Decimal;
      DisposalAmount@1025 : Decimal;
      BookValueEntry@1026 : Boolean;
      NetDisp@1028 : Boolean;
      TemporaryRecordExpectedErr@1008 : TextConst 'ENU=Use a temporary record as a parameter for GetBalAccBuffer.;NOR=Bruk en midlertidig post som parameter for GetBalAccBuffer.';

    [External]
    PROCEDURE InsertMaintenanceAccNo@5(VAR MaintenanceLedgEntry@1000 : Record 11072085);
    BEGIN
      WITH MaintenanceLedgEntry DO BEGIN
        CLEAR(FAGLPostBuf);
        FAGLPostBuf."Account No." := FAGetGLAcc.GetMaintenanceAccNo(MaintenanceLedgEntry);
        FAGLPostBuf.Amount := Amount;
        FAGLPostBuf.Correction := Correction;
        FAGLPostBuf."Global Dimension 1 Code" := "Global Dimension 1 Code";
        FAGLPostBuf."Global Dimension 2 Code" := "Global Dimension 2 Code";
        FAGLPostBuf."Dimension Set ID" := "Dimension Set ID";
        FAGLPostBuf."FA Entry No." := "Entry No.";
        FAGLPostBuf."FA Entry Type" := FAGLPostBuf."FA Entry Type"::Maintenance;
        GLEntryNo := "G/L Entry No.";
        InsertBufferEntry;
        "G/L Entry No." := TempFAGLPostBuf."Entry No.";
      END;
    END;

    LOCAL PROCEDURE InsertBufferBalAcc@2(FAPostingType@1000 : 'Acquisition,Depr,WriteDown,Appr,Custom1,Custom2,Disposal,Maintenance,Gain,Loss,Book Value Gain,Book Value Loss';AllocAmount@1001 : Decimal;DeprBookCode@1002 : Code[10];PostingGrCode@1003 : Code[20];GlobalDim1Code@1004 : Code[20];GlobalDim2Code@1005 : Code[20];DimSetID@1010 : Integer;AutomaticEntry@1006 : Boolean;Correction@1007 : Boolean);
    VAR
      DimMgt@1011 : Codeunit 408;
      GLAccNo@1008 : Code[20];
      DimensionSetIDArr@1012 : ARRAY [10] OF Integer;
      TableID@1013 : ARRAY [10] OF Integer;
      No@1014 : ARRAY [10] OF Code[20];
      IsHandled@1009 : Boolean;
    BEGIN
      NumberOfEntries := 0;
      TotalAllocAmount := 0;
      NewAmount := 0;
      TotalPercent := 0;
      WITH FAPostingGr DO BEGIN
        RESET;
        GET(PostingGrCode);
        GLAccNo := GetGLAccNoFromFAPostingGroup(FAPostingGr,FAPostingType);
      END;

      DimensionSetIDArr[1] := DimSetID;

      OnBeforeFillAllocationBuffer(
        TempFAGLPostBuf,NextEntryNo,GLEntryNo,NumberOfEntries,OrgGenJnlLine,NetDisp,GLAccNo,
        FAPostingType,AllocAmount,DeprBookCode,PostingGrCode,GlobalDim1Code,GlobalDim2Code,
        DimSetID,AutomaticEntry,Correction,IsHandled);
      IF IsHandled THEN
        EXIT;

      WITH FAAlloc DO BEGIN
        RESET;
        SETRANGE(Code,PostingGrCode);
        SETRANGE("Allocation Type",FAPostingType);
        IF FIND('-') THEN
          REPEAT
            IF ("Account No." = '') AND ("Allocation %" > 0) THEN
              TESTFIELD("Account No.");
            TotalPercent := TotalPercent + "Allocation %";
            NewAmount :=
              DepreciationCalc.CalcRounding(DeprBookCode,AllocAmount * TotalPercent / 100) - TotalAllocAmount;
            TotalAllocAmount := TotalAllocAmount + NewAmount;
            IF ABS(TotalAllocAmount) > ABS(AllocAmount) THEN
              NewAmount := AllocAmount - (TotalAllocAmount - NewAmount);
            CLEAR(FAGLPostBuf);
            FAGLPostBuf."Account No." := "Account No.";

            DimensionSetIDArr[2] := "Dimension Set ID";
            FAGLPostBuf."Dimension Set ID" :=
              DimMgt.GetCombinedDimensionSetID(
                DimensionSetIDArr,FAGLPostBuf."Global Dimension 1 Code",FAGLPostBuf."Global Dimension 2 Code");

            FAGLPostBuf.Amount := NewAmount;
            FAGLPostBuf."Automatic Entry" := AutomaticEntry;
            FAGLPostBuf.Correction := Correction;
            FAGLPostBuf."FA Posting Group" := Code;
            FAGLPostBuf."FA Allocation Type" := "Allocation Type";
            FAGLPostBuf."FA Allocation Line No." := "Line No.";
            IF NewAmount <> 0 THEN BEGIN
              FADimMgt.CheckFAAllocDim(FAAlloc,FAGLPostBuf."Dimension Set ID");
              InsertBufferEntry;
            END;
          UNTIL NEXT = 0;
        IF ABS(TotalAllocAmount) < ABS(AllocAmount) THEN BEGIN
          NewAmount := AllocAmount - TotalAllocAmount;
          CLEAR(FAGLPostBuf);
          FAGLPostBuf."Account No." := GLAccNo;
          FAGLPostBuf.Amount := NewAmount;
          FAGLPostBuf."Global Dimension 1 Code" := GlobalDim1Code;
          FAGLPostBuf."Global Dimension 2 Code" := GlobalDim2Code;
          TableID[1] := DATABASE::"G/L Account";
          No[1] := GLAccNo;
          FAGLPostBuf."Dimension Set ID" :=
            DimMgt.GetDefaultDimID(TableID,No,'',FAGLPostBuf."Global Dimension 1 Code",
              FAGLPostBuf."Global Dimension 2 Code",DimSetID,0);
          FAGLPostBuf."Automatic Entry" := AutomaticEntry;
          FAGLPostBuf.Correction := Correction;
          IF NewAmount <> 0 THEN
            InsertBufferEntry;
        END;
      END;
    END;

    [External]
    PROCEDURE InsertBalAcc@9(VAR FALedgEntry@1000 : Record 5601);
    BEGIN
      OnBeforeInsertBalAcc(FALedgEntry);
      // Called from codeunit 5632
      WITH FALedgEntry DO
        InsertBufferBalAcc(
          GetPostingType(FALedgEntry),-Amount,"Depreciation Book Code",
          "FA Posting Group","Global Dimension 1 Code","Global Dimension 2 Code","Dimension Set ID","Automatic Entry",Correction);
    END;

    LOCAL PROCEDURE GetPostingType@16(VAR FALedgEntry@1000 : Record 5601) : Integer;
    VAR
      FAPostingType@1001 : 'Acquisition,Depr,WriteDown,Appr,Custom1,Custom2,Disposal,Maintenance,Gain,Loss,Book Value Gain,Book Value Loss';
    BEGIN
      WITH FALedgEntry DO BEGIN
        IF "FA Posting Type" >= "FA Posting Type"::"Gain/Loss" THEN BEGIN
          IF "FA Posting Type" = "FA Posting Type"::"Gain/Loss" THEN BEGIN
            IF "Result on Disposal" = "Result on Disposal"::Gain THEN
              EXIT(FAPostingType::Gain);

            EXIT(FAPostingType::Loss);
          END;
          IF "FA Posting Type" = "FA Posting Type"::"Book Value on Disposal" THEN BEGIN
            IF "Result on Disposal" = "Result on Disposal"::Gain THEN
              EXIT(FAPostingType::"Book Value Gain");

            EXIT(FAPostingType::"Book Value Loss");
          END;
        END ELSE
          EXIT(ConvertPostingType);
      END;
    END;

    LOCAL PROCEDURE GetBalAccLocal@24(VAR GenJnlLine@1000 : Record 81) : Integer;
    VAR
      TempGenJnlLine@1002 : TEMPORARY Record 81;
      NonBlankFAPostingType@1003 : Option;
      SkipInsert@1001 : Boolean;
      Description2@1100525000 : Text[50];
      FAAddCurrExchRate2@1100525001 : Decimal;
      DimMgt@1100525002 : Codeunit 408;
    BEGIN
      OnBeforeGetBalAccLocal(GenJnlLine);
      TempFAGLPostBuf.DELETEALL;
      TempGenJnlLine.INIT;
      WITH GenJnlLine DO BEGIN
        RESET;
        FIND;
        TESTFIELD("Bal. Account No.",'');
        TESTFIELD("Account Type","Account Type"::"Fixed Asset");
        TESTFIELD("Account No.");
        TESTFIELD("Depreciation Book Code");
        TESTFIELD("Posting Group");
        TESTFIELD("FA Posting Type");
        TempGenJnlLine.Description := Description;
        TempGenJnlLine."FA Add.-Currency Factor" := "FA Add.-Currency Factor";
        SkipInsert := FALSE;
        OnGetBalAccAfterSaveGenJnlLineFields(TempGenJnlLine,GenJnlLine,SkipInsert);
        IF NOT SkipInsert THEN BEGIN
          NonBlankFAPostingType := "FA Posting Type" - 1;
          InsertBufferBalAcc(
            NonBlankFAPostingType,-Amount,"Depreciation Book Code",
            "Posting Group","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code","Dimension Set ID",FALSE,FALSE);
        END;
        CalculateNoOfEmptyLines(GenJnlLine,NumberOfEntries);
        "Account Type" := "Account Type"::"G/L Account";
        "Depreciation Book Code" := '';
        "Posting Group" := '';
        VALIDATE("FA Posting Type","FA Posting Type"::" ");
        IF TempFAGLPostBuf.FINDFIRST THEN
          REPEAT
            "Line No." := 0;
            VALIDATE("Account No.",TempFAGLPostBuf."Account No.");
            VALIDATE(Amount,TempFAGLPostBuf.Amount);
            VALIDATE("Depreciation Book Code",'');
            //**4PS.sn
            IF TempFAGLPostBuf."FA Posting Group" <> '' THEN BEGIN  //* If allocation (see also InsertJnlLineDim)
            //**4PS.en
              "Shortcut Dimension 1 Code" := TempFAGLPostBuf."Global Dimension 1 Code";
              "Shortcut Dimension 2 Code" := TempFAGLPostBuf."Global Dimension 2 Code";
              "Dimension Set ID" := TempFAGLPostBuf."Dimension Set ID";
            //**4PS.sn
            END ELSE BEGIN
              "Dimension Set ID" := TempFAGLPostBuf."Dimension Set ID";
              IF "Shortcut Dimension 1 Code" <> TempFAGLPostBuf."Global Dimension 1 Code" THEN BEGIN
                IF "Shortcut Dimension 1 Code" = '' THEN
                  "Shortcut Dimension 1 Code" := TempFAGLPostBuf."Global Dimension 1 Code";
                DimMgt.ValidateShortcutDimValues(1,"Shortcut Dimension 1 Code","Dimension Set ID");
              END;
              IF "Shortcut Dimension 2 Code" <> TempFAGLPostBuf."Global Dimension 2 Code" THEN BEGIN
                IF "Shortcut Dimension 2 Code" = '' THEN
                  "Shortcut Dimension 2 Code" := TempFAGLPostBuf."Global Dimension 2 Code";
                DimMgt.ValidateShortcutDimValues(2,"Shortcut Dimension 2 Code","Dimension Set ID");
              END;
            END;
            //**4PS.en

            Description := TempGenJnlLine.Description;
            "FA Add.-Currency Factor" := TempGenJnlLine."FA Add.-Currency Factor";
            OnGetBalAccAfterRestoreGenJnlLineFields(GenJnlLine,TempGenJnlLine);
            InsertGenJnlLine(GenJnlLine);
          UNTIL TempFAGLPostBuf.NEXT = 0;
      END;
      TempFAGLPostBuf.DELETEALL;
      EXIT(GenJnlLine."Line No.");
    END;

    [External]
    PROCEDURE GetBalAccBuffer@22(VAR GenJnlLine@1003 : Record 81) : Integer;
    BEGIN
      IF NOT GenJnlLine.ISTEMPORARY THEN
        ERROR(TemporaryRecordExpectedErr);
      EXIT(GetBalAccLocal(GenJnlLine));
    END;

    [External]
    PROCEDURE GetBalAcc@6(GenJnlLine@1000 : Record 81) : Integer;
    BEGIN
      EXIT(GetBalAccLocal(GenJnlLine));
    END;

    [External]
    PROCEDURE GetBalAcc2@19(VAR GenJnlLine@1000 : Record 81;VAR NextLineNo2@1001 : Integer);
    BEGIN
      NoOfEmptyLines2 := 1000;
      GetBalAcc(GenJnlLine);
      NextLineNo2 := NextLineNo;
    END;

    [External]
    PROCEDURE GetBalAccWithBalAccountInfo@14(GenJnlLine@1000 : Record 81;BalAccountType@1003 : Option;BalAccountNo@1004 : Code[20]);
    VAR
      LineNo@1002 : Integer;
    BEGIN
      LineNo := GetBalAcc(GenJnlLine);
      GenJnlLine.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name",LineNo);
      GenJnlLine.VALIDATE("Account Type",BalAccountType);
      GenJnlLine.VALIDATE("Account No.",BalAccountNo);
      GenJnlLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetGLAccNoFromFAPostingGroup@11(FAPostingGr@1000 : Record 5606;FAPostingType@1001 : 'Acquisition,Depr,WriteDown,Appr,Custom1,Custom2,Disposal,Maintenance,Gain,Loss,Book Value Gain,Book Value Loss') GLAccNo : Code[20];
    VAR
      FieldErrorText@1002 : Text[50];
    BEGIN
      FieldErrorText := Text000;
      WITH FAPostingGr DO
        CASE FAPostingType OF
          FAPostingType::Acquisition:
            BEGIN
              GLAccNo := GetAcquisitionCostBalanceAccount;
              CALCFIELDS("Allocated Acquisition Cost %");
              IF "Allocated Acquisition Cost %" > 100 THEN
                FIELDERROR("Allocated Acquisition Cost %",FieldErrorText);
            END;
          FAPostingType::Depr:
            BEGIN
              GLAccNo := GetDepreciationExpenseAccount;
              CALCFIELDS("Allocated Depreciation %");
              IF "Allocated Depreciation %" > 100 THEN
                FIELDERROR("Allocated Depreciation %",FieldErrorText);
            END;
          FAPostingType::WriteDown:
            BEGIN
              GLAccNo := GetWriteDownExpenseAccount;
              CALCFIELDS("Allocated Write-Down %");
              IF "Allocated Write-Down %" > 100 THEN
                FIELDERROR("Allocated Write-Down %",FieldErrorText);
            END;
          FAPostingType::Appr:
            BEGIN
              GLAccNo := GetAppreciationBalanceAccount;
              CALCFIELDS("Allocated Appreciation %");
              IF "Allocated Appreciation %" > 100 THEN
                FIELDERROR("Allocated Appreciation %",FieldErrorText);
            END;
          FAPostingType::Custom1:
            BEGIN
              GLAccNo := GetCustom1ExpenseAccount;
              CALCFIELDS("Allocated Custom 1 %");
              IF "Allocated Custom 1 %" > 100 THEN
                FIELDERROR("Allocated Custom 1 %",FieldErrorText);
            END;
          FAPostingType::Custom2:
            BEGIN
              GLAccNo := GetCustom2ExpenseAccount;
              CALCFIELDS("Allocated Custom 2 %");
              IF "Allocated Custom 2 %" > 100 THEN
                FIELDERROR("Allocated Custom 2 %",FieldErrorText);
            END;
          FAPostingType::Disposal:
            BEGIN
              GLAccNo := GetSalesBalanceAccount;
              CALCFIELDS("Allocated Sales Price %");
              IF "Allocated Sales Price %" > 100 THEN
                FIELDERROR("Allocated Sales Price %",FieldErrorText);
            END;
          FAPostingType::Maintenance:
            BEGIN
              GLAccNo := GetMaintenanceBalanceAccount;
              CALCFIELDS("Allocated Maintenance %");
              IF "Allocated Maintenance %" > 100 THEN
                FIELDERROR("Allocated Maintenance %",FieldErrorText);
            END;
          FAPostingType::Gain:
            BEGIN
              GLAccNo := GetGainsAccountOnDisposal;
              CALCFIELDS("Allocated Gain %");
              IF "Allocated Gain %" > 100 THEN
                FIELDERROR("Allocated Gain %",FieldErrorText);
            END;
          FAPostingType::Loss:
            BEGIN
              GLAccNo := GetLossesAccountOnDisposal;
              CALCFIELDS("Allocated Loss %");
              IF "Allocated Loss %" > 100 THEN
                FIELDERROR("Allocated Loss %",FieldErrorText);
            END;
          FAPostingType::"Book Value Gain":
            BEGIN
              GLAccNo := GetBookValueAccountOnDisposalGain;
              CALCFIELDS("Allocated Book Value % (Gain)");
              IF "Allocated Book Value % (Gain)" > 100 THEN
                FIELDERROR("Allocated Book Value % (Gain)",FieldErrorText);
            END;
          FAPostingType::"Book Value Loss":
            BEGIN
              GLAccNo := GetBookValueAccountOnDisposalLoss;
              CALCFIELDS("Allocated Book Value % (Loss)");
              IF "Allocated Book Value % (Loss)" > 100 THEN
                FIELDERROR("Allocated Book Value % (Loss)",FieldErrorText);
            END;
        END;
      EXIT(GLAccNo);
    END;

    LOCAL PROCEDURE CalculateNoOfEmptyLines@7(VAR GenJnlLine@1000 : Record 81;NumberOfEntries@1001 : Integer);
    VAR
      GenJnlLine2@1002 : Record 81;
    BEGIN
      GenJnlLine2."Journal Template Name" := GenJnlLine."Journal Template Name";
      GenJnlLine2."Journal Batch Name" := GenJnlLine."Journal Batch Name";
      GenJnlLine2."Line No." := GenJnlLine."Line No.";
      GenJnlLine2.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      GenJnlLine2.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      NextLineNo := GenJnlLine."Line No.";
      IF NoOfEmptyLines2 > 0 THEN
        NoOfEmptyLines := NoOfEmptyLines2
      ELSE BEGIN
        IF GenJnlLine2.NEXT = 0 THEN
          NoOfEmptyLines := 1000
        ELSE
          NoOfEmptyLines := (GenJnlLine2."Line No." - NextLineNo) DIV (NumberOfEntries + 1);
        IF NoOfEmptyLines < 1 THEN
          ERROR(Text001);
      END;
    END;

    LOCAL PROCEDURE InsertGenJnlLine@4(VAR GenJnlLine@1000 : Record 81);
    VAR
      FAJnlSetup@1002 : Record 5605;
    BEGIN
      NextLineNo := NextLineNo + NoOfEmptyLines;
      GenJnlLine."Line No." := NextLineNo;
      FAJnlSetup.SetGenJnlTrailCodes(GenJnlLine);
      GenJnlLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE InsertBufferEntry@13();
    BEGIN
      IF TempFAGLPostBuf.FIND('+') THEN
        NextEntryNo := TempFAGLPostBuf."Entry No." + 1
      ELSE
        NextEntryNo := GLEntryNo;
      TempFAGLPostBuf := FAGLPostBuf;
      TempFAGLPostBuf."Entry No." := NextEntryNo;
      TempFAGLPostBuf."Original General Journal Line" := OrgGenJnlLine;
      TempFAGLPostBuf."Net Disposal" := NetDisp;
      OnInsertBufferEntryOnBeforeBufferInsert(TempFAGLPostBuf,FAGLPostBuf);
      TempFAGLPostBuf.INSERT;
      NumberOfEntries := NumberOfEntries + 1;
    END;

    [External]
    PROCEDURE FindFirstGLAcc@8(VAR FAGLPostBuf@1000 : Record 5637) : Boolean;
    VAR
      ReturnValue@1001 : Boolean;
    BEGIN
      ReturnValue := TempFAGLPostBuf.FIND('-');
      FAGLPostBuf := TempFAGLPostBuf;
      EXIT(ReturnValue);
    END;

    [External]
    PROCEDURE GetNextGLAcc@10(VAR FAGLPostBuf@1000 : Record 5637) : Integer;
    VAR
      ReturnValue@1001 : Integer;
    BEGIN
      ReturnValue := TempFAGLPostBuf.NEXT;
      FAGLPostBuf := TempFAGLPostBuf;
      EXIT(ReturnValue);
    END;

    [External]
    PROCEDURE DeleteAllGLAcc@12();
    BEGIN
      TempFAGLPostBuf.DELETEALL;
      DisposalEntryNo := 0;
      BookValueEntry := FALSE;
    END;

    [External]
    PROCEDURE SetOrgGenJnlLine@1(OrgGenJnlLine2@1000 : Boolean);
    BEGIN
      OrgGenJnlLine := OrgGenJnlLine2;
    END;

    LOCAL PROCEDURE CalcDisposalAmount@3(FALedgEntry@1000 : Record 5601);
    BEGIN
      DisposalEntryNo := TempFAGLPostBuf."Entry No.";
      WITH FALedgEntry DO BEGIN
        FADeprBook.GET("FA No.","Depreciation Book Code");
        FADeprBook.CALCFIELDS("Proceeds on Disposal","Gain/Loss");
        DisposalAmount := FADeprBook."Proceeds on Disposal";
        GainLossAmount := FADeprBook."Gain/Loss";
        FAPostingGr2.GET("FA Posting Group");
      END;
    END;

    [External]
    PROCEDURE CorrectEntries@37();
    BEGIN
      IF DisposalEntryNo = 0 THEN
        EXIT;
      CorrectDisposalEntry;
      IF NOT BookValueEntry THEN
        CorrectBookValueEntry;
    END;

    LOCAL PROCEDURE CorrectDisposalEntry@17();
    VAR
      LastDisposal@1000 : Boolean;
      GLAmount@1001 : Decimal;
    BEGIN
      TempFAGLPostBuf.GET(DisposalEntryNo);
      FADeprBook.CALCFIELDS("Gain/Loss");
      LastDisposal := CalcLastDisposal(FADeprBook);
      IF LastDisposal THEN
        GLAmount := GainLossAmount
      ELSE
        GLAmount := FADeprBook."Gain/Loss";
      IF GLAmount <= 0 THEN
        TempFAGLPostBuf."Account No." := FAPostingGr2.GetSalesAccountOnDisposalGain
      ELSE
        TempFAGLPostBuf."Account No." := FAPostingGr2.GetSalesAccountOnDisposalLoss;
      OnBeforeTempFAGLPostBufModify(FAPostingGr2,TempFAGLPostBuf,GLAmount);
      TempFAGLPostBuf.MODIFY;
      FAGLPostBuf := TempFAGLPostBuf;
      IF LastDisposal THEN
        EXIT;
      IF IdenticalSign(FADeprBook."Gain/Loss",GainLossAmount,DisposalAmount) THEN
        EXIT;
      IF FAPostingGr2.GetSalesAccountOnDisposalGain = FAPostingGr2.GetSalesAccountOnDisposalLoss THEN
        EXIT;
      FAGLPostBuf."FA Entry No." := 0;
      FAGLPostBuf."FA Entry Type" := FAGLPostBuf."FA Entry Type"::" ";
      FAGLPostBuf."Automatic Entry" := TRUE;
      OrgGenJnlLine := FALSE;
      IF FADeprBook."Gain/Loss" <= 0 THEN BEGIN
        FAGLPostBuf."Account No." := FAPostingGr2.GetSalesAccountOnDisposalGain;
        FAGLPostBuf.Amount := DisposalAmount;
        InsertBufferEntry;
        FAGLPostBuf."Account No." := FAPostingGr2.GetSalesAccountOnDisposalLoss;
        FAGLPostBuf.Amount := -DisposalAmount;
        FAGLPostBuf.Correction := NOT FAGLPostBuf.Correction;
        InsertBufferEntry;
      END ELSE BEGIN
        FAGLPostBuf."Account No." := FAPostingGr2.GetSalesAccountOnDisposalLoss;
        FAGLPostBuf.Amount := DisposalAmount;
        InsertBufferEntry;
        FAGLPostBuf."Account No." := FAPostingGr2.GetSalesAccountOnDisposalGain;
        FAGLPostBuf.Amount := -DisposalAmount;
        FAGLPostBuf.Correction := NOT FAGLPostBuf.Correction;
        InsertBufferEntry;
      END;
    END;

    LOCAL PROCEDURE CorrectBookValueEntry@18();
    VAR
      FALedgEntry@1000 : Record 5601;
      FAGLPostBuf@1001 : Record 5637;
      DepreciationCalc@1002 : Codeunit 5616;
      BookValueAmount@1003 : Decimal;
    BEGIN
      DepreciationCalc.SetFAFilter(
        FALedgEntry,FADeprBook."FA No.",FADeprBook."Depreciation Book Code",TRUE);
      FALedgEntry.SETRANGE("FA Posting Category",FALedgEntry."FA Posting Category"::Disposal);
      FALedgEntry.SETRANGE("FA Posting Type",FALedgEntry."FA Posting Type"::"Book Value on Disposal");
      FALedgEntry.CALCSUMS(Amount);
      BookValueAmount := FALedgEntry.Amount;
      TempFAGLPostBuf.GET(DisposalEntryNo);
      FAGLPostBuf := TempFAGLPostBuf;
      IF IdenticalSign(FADeprBook."Gain/Loss",GainLossAmount,BookValueAmount) THEN
        EXIT;
      IF FAPostingGr2.GetBookValueAccountOnDisposalGain = FAPostingGr2.GetBookValueAccountOnDisposalLoss THEN
        EXIT;
      OrgGenJnlLine := FALSE;
      IF FADeprBook."Gain/Loss" <= 0 THEN BEGIN
        InsertBufferBalAcc(
          10,
          BookValueAmount,
          FADeprBook."Depreciation Book Code",
          FAPostingGr2.Code,
          FAGLPostBuf."Global Dimension 1 Code",
          FAGLPostBuf."Global Dimension 2 Code",
          FAGLPostBuf."Dimension Set ID",
          TRUE,FAGLPostBuf.Correction);

        InsertBufferBalAcc(
          11,
          -BookValueAmount,
          FADeprBook."Depreciation Book Code",
          FAPostingGr2.Code,
          FAGLPostBuf."Global Dimension 1 Code",
          FAGLPostBuf."Global Dimension 2 Code",
          FAGLPostBuf."Dimension Set ID",
          TRUE,NOT FAGLPostBuf.Correction);
      END ELSE BEGIN
        InsertBufferBalAcc(
          11,
          BookValueAmount,
          FADeprBook."Depreciation Book Code",
          FAPostingGr2.Code,
          FAGLPostBuf."Global Dimension 1 Code",
          FAGLPostBuf."Global Dimension 2 Code",
          FAGLPostBuf."Dimension Set ID",
          TRUE,FAGLPostBuf.Correction);

        InsertBufferBalAcc(
          10,
          -BookValueAmount,
          FADeprBook."Depreciation Book Code",
          FAPostingGr2.Code,
          FAGLPostBuf."Global Dimension 1 Code",
          FAGLPostBuf."Global Dimension 2 Code",
          FAGLPostBuf."Dimension Set ID",
          TRUE,NOT FAGLPostBuf.Correction);
      END;
    END;

    LOCAL PROCEDURE IdenticalSign@15(A@1000 : Decimal;B@1001 : Decimal;C@1002 : Decimal) : Boolean;
    BEGIN
      EXIT(((A <= 0) = (B <= 0)) OR (C = 0));
    END;

    [External]
    PROCEDURE SetNetDisposal@20(NetDisp2@1000 : Boolean);
    BEGIN
      NetDisp := NetDisp2;
    END;

    LOCAL PROCEDURE CalcLastDisposal@21(FADeprBook@1000 : Record 5612) : Boolean;
    VAR
      FALedgEntry@1001 : Record 5601;
      DepreciationCalc@1002 : Codeunit 5616;
    BEGIN
      DepreciationCalc.SetFAFilter(
        FALedgEntry,FADeprBook."FA No.",FADeprBook."Depreciation Book Code",TRUE);
      FALedgEntry.SETRANGE("FA Posting Type",FALedgEntry."FA Posting Type"::"Proceeds on Disposal");
      EXIT(NOT FALedgEntry.FINDFIRST);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyFAGLPostBufFromFALederEntry@26(VAR FAGLPostingBuffer@1000 : Record 5637;FALedgerEntry@1001 : Record 5601);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeFillAllocationBuffer@34(VAR TempFAGLPostingBuffer@1000 : TEMPORARY Record 5637;VAR NextEntryNo@1001 : Integer;VAR GLEntryNo@1002 : Integer;VAR NumberOfEntries@1003 : Integer;VAR OrgGenJnlLine@1004 : Boolean;VAR NetDisp@1005 : Boolean;GLAccNo@1006 : Code[20];FAPostingType@1015 : 'Acquisition,Depr,WriteDown,Appr,Custom1,Custom2,Disposal,Maintenance,Gain,Loss,Book Value Gain,Book Value Loss';AllocAmount@1014 : Decimal;DeprBookCode@1013 : Code[10];PostingGrCode@1012 : Code[20];GlobalDim1Code@1011 : Code[20];GlobalDim2Code@1010 : Code[20];DimSetID@1009 : Integer;AutomaticEntry@1008 : Boolean;Correction@1007 : Boolean;VAR IsHandled@1016 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetBalAccLocal@32(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertBalAcc@30(VAR FALedgerEntry@1000 : Record 5601);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTempFAGLPostBufModify@28(VAR FAPostingGroup@1000 : Record 5606;VAR TempFAGLPostingBuffer@1001 : TEMPORARY Record 5637;GLAmount@1002 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetBalAccAfterSaveGenJnlLineFields@23(VAR ToGenJnlLine@1000 : Record 81;FromGenJnlLine@1001 : Record 81;VAR SkipInsert@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetBalAccAfterRestoreGenJnlLineFields@25(VAR ToGenJnlLine@1000 : Record 81;FromGenJnlLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnInsertBufferEntryOnBeforeBufferInsert@27(VAR TempFAGLPostBuf@1001 : TEMPORARY Record 5637;FAGLPostBuf@1000 : Record 5637);
    BEGIN
    END;

    BEGIN
    END.
  }
}

