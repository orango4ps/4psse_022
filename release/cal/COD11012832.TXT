OBJECT Codeunit 11012832 Transfer Objects Contracts
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000a@1100525000 : TextConst 'DEU=Zuerst Zeilen w„hlen;ENU=Select lines first;NLD=Selecteer eerst regels;NOR=Velg rader f›rst;SVE=V„lj rader f”rst';
      Text001@1100526201 : TextConst 'DEU=Ausw„hlen neuen Vertrag;ENU=Select new Contract;NLD=Selecteer nieuw contract;NOR=Velg ny kontrakt;SVE=V„lj nytt kontrakt';
      Text002@1100526202 : TextConst 'DEU=Ausw„hlen Enddatum vorigen Vertrags;ENU=Select Ending Date Previous Contract;NLD=Selecteer einddatum vorig contract;NOR=Velg sluttdato for tidligere kontrakt;SVE=V„lj slutdatum f”r f”reg†ende kontrakt';
      Text003@1100409009 : TextConst 'DEU=Enddatum (Vorheriger Vertrag) muss am oder nach dem Startdatum von Vertrag (%1) liegen;ENU=Ending Date (Previous Contract) must occur on or after Starting Date Contract (%1);NLD=Einddatum (vorige contract) moet liggen op of na de startdatum contract (%1);NOR=Sluttdato (tidligere kontrakt) m† forekommer p† eller etter startdato for kontrakt (%1)';
      Text004@1100409008 : TextConst 'DEU=Enddatum (Vorheriger Vertrag) muss am oder vor dem Enddatum von Vertrag (%1) liegen;ENU=Ending Date (Previous Contract) must occur on or before Ending Date of Contract (%1);NLD=Einddatum (vorige contract) moet liggen op of voor de einddatum contract (%1);NOR=Sluttdato (tidligere kontrakt) m† forekomme p† eller f›r sluttdato for kontrakt (%1)';
      Text005@1100409007 : TextConst 'DEU=Startdatum (Neuer Vertrag) muss am oder nach dem Startdatum von Vertrag (%1) liegen;ENU=Starting Date (New Contract) must occur on or after Starting Date Contract (%1);NLD=Startdatum (nieuw contract) moet liggen op of na de startdatum contract (%1);NOR=Startdato (ny kontrakt) m† forekomme p† eller etter startdato for kontrakt (%1)';
      Text006@1100409006 : TextConst 'DEU=Enddatum (Neuer Vertrag) muss am oder vor dem Enddatum von Vertrag (%1) liegen;ENU=Ending Date (New Contract) must occur on or before Ending Date of Contract (%1);NLD=Einddatum (nieuw contract) moet liggen op of voor de einddatum contract (%1);NOR=Sluttdato (ny kontrakt) m† forekomme p† eller etter sluttdato for kontrakt (%1)';
      Text007@1100409005 : TextConst 'DEU=Startdatum (Neuer Vertrag) muss am oder vor dem Enddatum von Vertrag (%1) liegen;ENU=Starting Date (New Contract) must occur on or before Ending Date of Contract (%1);NLD=Startdatum (nieuw contract) moet liggen op of voor de einddatum contract (%1);NOR=Startdato (ny kontrakt) m† forekomme p† eller f›r sluttdato for kontrakt (%1)';
      Text008@1100409004 : TextConst 'DEU=Startdatum (Neuer Vertrag) muss vor dem Enddatum der (Neuer Vertrag) liegen;ENU=Starting Date (New Contract) must occur before Ending Date (New Contract);NLD=Startdatum (nieuw contract) moet liggen voor einddatum (nieuw contact);NOR=Startdato (ny kontrakt) m† forekomme f›r sluttdato (ny kontrakt)';
      Text009@1100409003 : TextConst 'DEU=Enddatum (Vorheriger Vertrag) muss nach dem Startdatum der Objekte liegen;ENU=Ending Date (Previous Contract) must occur after Starting Date of Objects;NLD=Einddatum (vorige contract) moet liggen na de begindatum van de objecten;NOR=Sluttdato (tidligere kontrakt) m† forekomme etter objektets startdato';
      Text010@1100409002 : TextConst 'DEU=Enddatum (Neuer Vertrag) muss nach dem Startdatum der Objekte liegen;ENU=Ending Date (New Contract) must occur after Starting Date of Objects;NLD=Einddatum (nieuw contract) moet liggen na de begindatum van de objecten;NOR=Sluttdato (ny kontrakt) m† forekomme etter objektets startdato';
      Text011@1100409001 : TextConst 'DEU=Startdatum (Neuer Vertrag) muss vor dem Enddatum der Objekte liegen;ENU=Starting Date (New Contract) must occur before Ending Date of Objects;NLD=Startdatum (nieuw contract) moet liggen voor de einddatum van de objecten;NOR=Startdato (ny kontrakt) m† forekomme f›r objektets sluttdato';
      Text012@1100409000 : TextConst 'DEU=Objekte k”nnen nicht in denselben Vertrag verschoben werden;ENU=Objects cannot be moves to same Contract;NLD=Objecten kunnen niet naar hetzelfde contract verplaatst worden;NOR=Objekter kan ikke flyttes til samme kontrakt';

    PROCEDURE TransferObjectsContracts@1100525000(lvNewContractCde@1100525005 : Code[20];lvStartDate@1100525004 : Date;lvEndNewDate@1100525003 : Date;lvInvoiceFromDate@1100525002 : Date;lvEndOldDate@1100525001 : Date;lvCreateOption@1100528600 : 'Copy Service Package,Copy Service Package and Schemes,Use Contract Service Package';StartingDateMaintenance@1100529600 : Date;VAR lvContractObjectRec@1100525000 : Record 11071702);
    BEGIN
      WITH lvContractObjectRec DO BEGIN
        IF lvNewContractCde = '' THEN
          ERROR(Text001);
        IF lvEndOldDate = 0D THEN
          ERROR(Text002);

        IF FINDSET THEN BEGIN
          REPEAT
            CopyNewContrLine(lvNewContractCde, lvStartDate, lvEndNewDate, lvInvoiceFromDate, lvCreateOption, StartingDateMaintenance, lvContractObjectRec);
            UpdateOldContrLine(lvEndOldDate, lvContractObjectRec);
          UNTIL NEXT = 0;
        END ELSE
          MESSAGE(Text000a);
      END;
    END;

    PROCEDURE CopyNewContrLine@1100525011(lvNewContractCde@1100525005 : Code[20];lvStartDate@1100525004 : Date;lvEndNewDate@1100525003 : Date;lvInvoiceFromDate@1100525002 : Date;lvCreateOption@1100525006 : 'Copy Service Package,Copy Service Package and Schemes,Use Contract Service Package';StartingDateMaintenance@1100529600 : Date;VAR lvContractObjectRec@1100525000 : Record 11071702);
    VAR
      ServiceContract@1100528601 : Record 11012812;
      lvContractObjectCopyRec@1100525001 : Record 11071702;
      FromContractObjectMaintenance@1100528602 : Record 11071692;
      ToContractObjectMaintenance@1100528603 : Record 11071692;
    BEGIN
      WITH lvContractObjectCopyRec DO BEGIN
        COPY(lvContractObjectRec);
        "Service Contract No." := lvNewContractCde;
        INSERT(TRUE);
        IF (lvEndNewDate <> 0D) AND ((lvEndNewDate < "Ending Date") OR ("Ending Date" = 0D)) THEN
          VALIDATE("Ending Date", lvEndNewDate)
        ELSE
          VALIDATE("Ending Date");
        IF (lvStartDate <> 0D) AND (lvStartDate > "Starting Date") THEN
          VALIDATE("Starting Date", lvStartDate)
        ELSE
          VALIDATE("Starting Date");
        IF (lvInvoiceFromDate <> 0D) AND (lvInvoiceFromDate >= "Starting Date") AND ((lvInvoiceFromDate < "Ending Date") OR ("Ending Date" = 0D)) THEN
          VALIDATE("Invoice From", lvInvoiceFromDate);

        SetStartingDateMaintenance(StartingDateMaintenance);
        CASE lvCreateOption OF
          lvCreateOption::"Copy Service Package":
            VALIDATE("Service Package");
          lvCreateOption::"Use Contract Service Package":
            BEGIN
              IF NOT ServiceContract.GET(lvNewContractCde) THEN
                ServiceContract.INIT;
              VALIDATE("Service Package", ServiceContract."Service Package");
            END;
        END;
        MODIFY(TRUE);

        IF lvCreateOption = lvCreateOption::"Copy Service Package and Schemes" THEN BEGIN
          FromContractObjectMaintenance.SETRANGE("Service Contract No.", lvContractObjectRec."Service Contract No.");
          FromContractObjectMaintenance.SETRANGE("Object No.", lvContractObjectRec."Service Object No.");
          IF FromContractObjectMaintenance.FINDSET THEN BEGIN
            REPEAT
              ToContractObjectMaintenance := FromContractObjectMaintenance;
              ToContractObjectMaintenance."Service Contract No." := lvNewContractCde;
              ToContractObjectMaintenance.VALIDATE("Maintenance Interval");
              IF StartingDateMaintenance <> 0D THEN
                ToContractObjectMaintenance.VALIDATE("Starting Date Maintenance", StartingDateMaintenance)
              ELSE
                IF (lvStartDate <> 0D) AND ((lvStartDate < "Ending Date") OR ("Ending Date" = 0D)) THEN
                  ToContractObjectMaintenance.VALIDATE("Starting Date Maintenance", lvStartDate);
              ToContractObjectMaintenance.INSERT(TRUE);
            UNTIL FromContractObjectMaintenance.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE UpdateOldContrLine@1100525014(lvEndOldDate@1100525002 : Date;VAR lvContractObjectRec@1100525001 : Record 11071702);
    VAR
      lvServContrRec@1100525000 : Record 11012812;
    BEGIN
      WITH lvContractObjectRec DO BEGIN
        lvServContrRec.GET("Service Contract No.");
        IF (lvEndOldDate >= lvServContrRec."Ending Date") AND (lvServContrRec."Ending Date" <> 0D) THEN
          VALIDATE("Ending Date", lvServContrRec."Ending Date")
        ELSE
          VALIDATE("Ending Date", lvEndOldDate);
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE TestDateWithContract@1100409000(VAR IContractObject@1100409002 : Record 11071702;INewContractNo@1100409004 : Code[20];IStartDate@1100409005 : Date;INewEndDate@1100409006 : Date;IOldEndDate@1100409003 : Date);
    VAR
      ServiceContract@1100409001 : Record 11012812;
      ContractObject@1100409000 : Record 11071702;
    BEGIN
      ContractObject.COPY(IContractObject);
      IF NOT ContractObject.FINDFIRST THEN
        EXIT;

      IF ServiceContract.GET(IContractObject."Service Contract No.") THEN BEGIN
        IF (IOldEndDate <> 0D) AND (ServiceContract."Starting Date" > IOldEndDate) THEN
          ERROR(Text003, ServiceContract."Starting Date");
        IF (ServiceContract."Ending Date" <> 0D) AND (IOldEndDate > ServiceContract."Ending Date") THEN
          ERROR(Text004, ServiceContract."Ending Date");
      END;
      IF ServiceContract.GET(INewContractNo) THEN BEGIN
        IF (IStartDate <> 0D) AND (IStartDate < ServiceContract."Starting Date") THEN
          ERROR(Text005, ServiceContract."Starting Date");
        IF (ServiceContract."Ending Date" <> 0D) AND (INewEndDate > ServiceContract."Ending Date") THEN
          ERROR(Text006, ServiceContract."Ending Date");
        IF (ServiceContract."Ending Date" <> 0D) AND (IStartDate > ServiceContract."Ending Date") THEN
          ERROR(Text007, ServiceContract."Ending Date");
        IF (INewEndDate <> 0D) AND (IStartDate > INewEndDate) THEN
          ERROR(Text008);
      END;
      IF IOldEndDate <> 0D THEN BEGIN
        ContractObject.SETFILTER("Starting Date", '>%1', IOldEndDate);
        IF NOT ContractObject.ISEMPTY THEN
          ERROR(Text009);
      END;
      IF (IStartDate = 0D) AND (INewEndDate <> 0D) THEN BEGIN
        ContractObject.SETFILTER("Starting Date", '>%1', INewEndDate);
        IF NOT ContractObject.ISEMPTY THEN
          ERROR(Text010);
      END;
      IF (IStartDate <> 0D) AND (INewEndDate = 0D) THEN BEGIN
        ContractObject.SETRANGE("Starting Date");
        ContractObject.SETFILTER("Ending Date", '<%1&<>%2', IStartDate, 0D);
        IF NOT ContractObject.ISEMPTY THEN
          ERROR(Text011);
      END;

      IF INewContractNo = ContractObject."Service Contract No." THEN
        ERROR(Text012);
    END;

    BEGIN
    END.
  }
}

