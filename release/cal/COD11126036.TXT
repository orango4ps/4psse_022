OBJECT Codeunit 11126036 Recalc. Proj. Result Forecast
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528700 : TextConst 'DEU=[Mehrere Auftr„ge];ENU=[Multiple Orders];NLD=[Meerdere orders];NOR=[Flere ordre];SVE=[Flera order]';
      GLSetup@1210190002 : Record 98;
      TmpProjectResultForecastLine@1210190000 : TEMPORARY Record 11126037;
      Text001@1210190001 : TextConst 'DEU=Es sind Budgetzeilen ohne Kostentr„ger vorhanden.;ENU=There are Budget Lines with no Cost Object;NLD=Er zijn begrotingsregels aanwezig zonder kostendrager.;NOR=Det finnes budsjettrader uten kostobjekt;SVE=Det finns budgetrader utan kostnadsobjekt';
      SaveProjNo@1210190007 : Code[20];
      SaveForecastDate@1210190008 : Date;
      SaveCostObject@1210190009 : Code[20];
      SaveNoOfForcasts@1210190006 : Integer;
      SaveOnlySelectForReport@1210190005 : Boolean;
      SaveForecastDateArray@1210190004 : ARRAY [10] OF Date;
      SaveForecastAmtArray@1210190003 : ARRAY [10] OF Decimal;
      Text002@1100409008 : TextConst 'DEU=#1###################################\@2@@@@@@@@;ENU=#1###################################\@2@@@@@@@@;NLD=#1###################################\@2@@@@@@@@;NOR=#1###################################\@2@@@@@@@@;SVE=#1###################################\@2@@@@@@@@';
      Text003@1100409007 : TextConst 'DEU=Projektkontrolle aktualisieren;ENU=Update Project Control;NLD=Projectbewaking verversen;NOR=Oppdater prosjektkontroll';
      Text004@1100409006 : TextConst 'DEU=Aktuelle Prognose l”schen;ENU=Delete Current Forcast;NLD=Huidige PER verwijderen;NOR=Fjern n†v‘rende prognose';
      Text005@1100409005 : TextConst 'DEU=Einkaufsaktionen aktualisieren;ENU=Update Purchase Actions;NLD=Inkoopacties verversen;NOR=Oppdater Innkj›pshandlinger';
      Text006@1100409004 : TextConst 'DEU=Gehaltskosten aktualisieren;ENU=Update Labor Costs;NLD=Loonkosten verversen;NOR=Oppdater arbeidskraftskoster';
      Text007@1100409003 : TextConst 'DEU=Werkzeugkosten aktualisieren;ENU=Update Plant Costs;NLD=Materieelkosten verversen;NOR=Oppdater maskinkoster';
      Text008@1100409002 : TextConst 'DEU=Versch. Kosten aktualisieren;ENU=Update Misc. Costs;NLD=Overige kosten verversen;NOR=Oppdater Div. Kostnader';
      Text009@1100409001 : TextConst 'DEU=Umsatzzeilen aktualisieren;ENU=Update Revenue Lines;NLD=Opbrengstregels verversen;NOR=Oppdater Inntektsrader';
      Window@1100409009 : Dialog;

    PROCEDURE RecalcProjResultForecast@1100525006(ProjectResultForecast@1100525000 : Record 11126036);
    VAR
      Job@1100528702 : Record 11072003;
      lvTempPurchHeadRec@1100528701 : TEMPORARY Record 38;
      BuildProjectControl@1100528700 : Codeunit 11020224;
    BEGIN
      ProjectResultForecast.TESTFIELD("Project No.");
      ProjectResultForecast.TESTFIELD(Date);
      ProjectResultForecast.TESTFIELD(Fixed, FALSE); //#C021398

      Job.GET(ProjectResultForecast."Project No.");
      Job.SETRECFILTER;

      //*Rev.sn
      GLSetup.GET;
      GLSetup.TESTFIELD("Global Dimension 2 Code");
      //*Rev.en

      Window.OPEN(Text002);  //kzwerver, 130104, n, #C000245
      Window.UPDATE(1, Text003); //kzwerver, 130104, n, #C000245
      BuildProjectControl.BuildProjectControl(Job);

      Window.UPDATE(1, Text004); //kzwaerver, 130104, n, #C000245
      SaveProjectResultForecastLines(ProjectResultForecast."Project No.", ProjectResultForecast.Date); //mg, 07-07-11: M28078
      ProjectResultForecast.DeleteLines;

      Window.UPDATE(1, Text005); //kzwerver, 130104, n, #C000245
      RecalcPurchaseActionLines(ProjectResultForecast,lvTempPurchHeadRec);

      Window.UPDATE(1, Text006); //kzwerver, 130104, n, #C000245
      RecalcLaborCostLines(ProjectResultForecast);

      Window.UPDATE(1, Text007); //kzwerver, 130104, n, #C000245
      RecalcPlantCostLines(ProjectResultForecast);

      Window.UPDATE(1, Text008); //kzwerver, 130104, n, #C000245
      RecalcMiscCostLines(ProjectResultForecast);

      Window.UPDATE(1, Text009); //kzwerver, 130104, n, #C000245
      RecalcRevenueLines(ProjectResultForecast);  //*Rev.n
    END;

    LOCAL PROCEDURE RecalcPurchaseActionLines@1100525000(ProjectResultForecast@1100525000 : Record 11126036;VAR lvTempPurchHeadRec@1100525005 : TEMPORARY Record 38);
    VAR
      ProjectPurchaseAction@1100525001 : Record 11012026;
      lvCostCompRec@1100525013 : Record 11012012;
      ProjectResultForecastLine@1100525003 : TEMPORARY Record 11126037;
      Dummy@1100528700 : Boolean;
      TotalRecords@1100409001 : Integer;
      RecordCount@1100409000 : Integer;
    BEGIN
      WITH ProjectResultForecast DO BEGIN
        ProjectPurchaseAction.SETRANGE("Project No.",ProjectResultForecast."Project No.");
        IF ProjectPurchaseAction.FINDSET THEN BEGIN
          TotalRecords := ProjectPurchaseAction.COUNT; //kzwerver, 130104, n, #C000245
          REPEAT
            RecordCount += 1;  //kzwerver, 130104, n, #C000245
            UpdateWindowCounter(RecordCount, TotalRecords);  //kzwerver, 130104, n, #C000245
            lvTempPurchHeadRec.DELETEALL;
            ProjectResultForecastLine.INIT;
            ProjectPurchaseAction.TESTFIELD("Default Cost Object Purchase");
            GetDefaultValues(lvCostCompRec,ProjectPurchaseAction."Default Cost Object Purchase",
              ProjectResultForecast."Project No.", Dummy);
            ProjectResultForecastLine."Cost Component" := lvCostCompRec.Code;
            InsertPerRecord(ProjectResultForecast,0,lvCostCompRec.Code,TRUE,ProjectResultForecastLine); // summary

            RestoreForecastLineFields(ProjectResultForecast, 0, ProjectPurchaseAction.Code, FALSE,
              ProjectResultForecastLine);  //mg, 07-07-11: M28078

            CalcPurchaseActionBudget(ProjectPurchaseAction, ProjectResultForecast, ProjectResultForecastLine);

            DeterminePurchaseOrders(ProjectResultForecast,ProjectPurchaseAction,lvTempPurchHeadRec);
            DetermineNameAndOrderNo(lvTempPurchHeadRec,ProjectResultForecastLine);
            DetermineOrderAmounts(lvTempPurchHeadRec,ProjectResultForecast,ProjectResultForecastLine,ProjectPurchaseAction);

            IF (TmpProjectResultForecastLine.ISEMPTY) THEN
              GetPreviousPerLine(ProjectResultForecast,0,ProjectPurchaseAction.Code,FALSE,ProjectResultForecastLine);

            InsertPerRecord(ProjectResultForecast,0,ProjectPurchaseAction.Code,FALSE,ProjectResultForecastLine);
          UNTIL ProjectPurchaseAction.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE RecalcLaborCostLines@1100525004(ProjectResultForecast@1100525000 : Record 11126036);
    VAR
      lvCostObjControl@1100525004 : Record 11012047;
      ProjectResultForecastLine@1100525005 : TEMPORARY Record 11126037;
      lvCostCompRec@1100525006 : Record 11012012;
      CostControlManagement@1100528701 : Codeunit 11012006;
      RecordProgress@1100528700 : Boolean;
      TotalRecords@1100409001 : Integer;
      RecordCount@1100409000 : Integer;
    BEGIN
      WITH lvCostObjControl DO BEGIN
        SETRANGE("Cost Type","Cost Type"::Labor);
        SetCostControlFilters(ProjectResultForecast,lvCostObjControl);
        SETFILTER("Purchase Action Filter", '%1', ''); //kzwerver, 130709, n, #C008462
        IF FINDSET THEN BEGIN
          TotalRecords := COUNT; //kzwerver, 130104, n, #C000245
          REPEAT
            RecordCount += 1;  //kzwerver, 130104, n, #C000245
            UpdateWindowCounter(RecordCount, TotalRecords);  //kzwerver, 130104, n, #C000245
            CALCFIELDS(Budget);
            IF ("Cost Object" = '') AND (Budget <> 0) THEN
              ERROR(Text001);

            IF "Cost Object" <> '' THEN BEGIN
              ProjectResultForecastLine.INIT;
              GetDefaultValues(lvCostCompRec,"Cost Object", ProjectResultForecast."Project No.",RecordProgress);
              ProjectResultForecastLine."Cost Component" := lvCostCompRec.Code;
              InsertPerRecord(ProjectResultForecast,1,lvCostCompRec.Code,TRUE,ProjectResultForecastLine);

              RestoreForecastLineFields(ProjectResultForecast, 1, "Cost Object", FALSE,
                ProjectResultForecastLine); //mg, 07-07-11: M28078

              CALCFIELDS("Allowed Hours","Actual Hours","Actual Costs",Description,"Allowed Hours Previous Period",
                         "Allowed Previous Period",Adjustments,Extension,Options,"Allowed Costs");
              ProjectResultForecastLine."Actual Cost" := "Actual Costs";
              ProjectResultForecastLine."Allowed Hours" := "Allowed Hours";
              ProjectResultForecastLine."Actual Hours" := "Actual Hours";
              ProjectResultForecastLine."Allowed Hours Prev. Forecast" := "Allowed Hours Previous Period";
              ProjectResultForecastLine."Allowed Costs" := "Allowed Costs";
              ProjectResultForecastLine."Allowed Costs Prev. Forecast" := "Allowed Previous Period";

              CalcBudget(lvCostObjControl, ProjectResultForecastLine);

              IF GETFILTER("Progress Filter") <> '''''' THEN
                EVALUATE(ProjectResultForecastLine."Progress Date",GETFILTER("Progress Filter"));

              IF GETFILTER(PrevProgressFilter) <> '''''' THEN
                EVALUATE(ProjectResultForecastLine."Previous Progress Date",GETFILTER(PrevProgressFilter));

              // jhoek.140311.begin
              ProjectResultForecastLine."Progress %" := CostControlManagement.AllowedPercCostObj(lvCostObjControl, TRUE);
              // jhoek.140311.end;

              ProjectResultForecastLine."Record Progress" := RecordProgress; // jhoek.140311
              IF (TmpProjectResultForecastLine.ISEMPTY) THEN
                GetPreviousPerLine(ProjectResultForecast,1,"Cost Object",FALSE,ProjectResultForecastLine);

              InsertPerRecord(ProjectResultForecast,1,"Cost Object",FALSE,ProjectResultForecastLine);
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE RecalcPlantCostLines@1100528701(ProjectResultForecast@1100528700 : Record 11126036);
    VAR
      lvCostObjControl@1100528704 : Record 11012047;
      ProjectResultForecastLine@1100528703 : TEMPORARY Record 11126037;
      lvCostCompRec@1100528702 : Record 11012012;
      RecordProgress@1100528705 : Boolean;
      TotalRecords@1100409001 : Integer;
      RecordCount@1100409000 : Integer;
    BEGIN
      WITH lvCostObjControl DO BEGIN
        SetCostControlFilters(ProjectResultForecast,lvCostObjControl);
        SETRANGE("Cost Type","Cost Type"::Plant);
        SETFILTER("Purchase Action Filter", '%1', ''); //kzwerver, 130709, n, #C008462
        IF FINDSET THEN BEGIN
          TotalRecords := COUNT; //kzwerver, 130104, n, #C000245
          REPEAT
            RecordCount += 1;  //kzwerver, 130104, n, #C000245
            UpdateWindowCounter(RecordCount, TotalRecords);  //kzwerver, 130104, n, #C000245
            CALCFIELDS(Budget);
            IF ("Cost Object" = '') AND (Budget <> 0) THEN
              ERROR(Text001);

            IF "Cost Object" <> '' THEN BEGIN
              ProjectResultForecastLine.INIT;
              GetDefaultValues(lvCostCompRec,"Cost Object", ProjectResultForecast."Project No.",RecordProgress);
              ProjectResultForecastLine."Cost Component" := lvCostCompRec.Code;
              InsertPerRecord(ProjectResultForecast,2,lvCostCompRec.Code,TRUE,ProjectResultForecastLine);

              RestoreForecastLineFields(ProjectResultForecast,2,"Cost Object",FALSE,
                ProjectResultForecastLine); //mg, 07-07-11: M28078

              // jhoek.070611.begin
              CALCFIELDS("Allowed Hours", "Allowed Costs");
              ProjectResultForecastLine."Allowed Hours" := "Allowed Hours";
              ProjectResultForecastLine."Allowed Costs" := "Allowed Costs";
              // jhoek.070611.end

              CalcBudget(lvCostObjControl,ProjectResultForecastLine);
              CalcActualOtherCosts(lvCostObjControl,ProjectResultForecastLine,ProjectResultForecast);

              IF GETFILTER("Progress Filter") <> '''''' THEN
                EVALUATE(ProjectResultForecastLine."Progress Date",GETFILTER("Progress Filter"));

              IF GETFILTER(PrevProgressFilter) <> '''''' THEN
                EVALUATE(ProjectResultForecastLine."Previous Progress Date",GETFILTER(PrevProgressFilter));

              ProjectResultForecastLine."Record Progress" := RecordProgress;
              IF (TmpProjectResultForecastLine.ISEMPTY) THEN
                GetPreviousPerLine(ProjectResultForecast,2,"Cost Object",FALSE,ProjectResultForecastLine);
              InsertPerRecord(ProjectResultForecast,2,"Cost Object",FALSE,ProjectResultForecastLine);
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE RecalcMiscCostLines@1100525011(ProjectResultForecast@1100525000 : Record 11126036);
    VAR
      lvCostObjControl@1100525004 : Record 11012047;
      ProjectResultForecastLine@1100525005 : TEMPORARY Record 11126037;
      lvCostCompRec@1100525006 : Record 11012012;
      RecordProgress@1100528700 : Boolean;
      TotalRecords@1100409001 : Integer;
      RecordCount@1100409000 : Integer;
    BEGIN
      WITH lvCostObjControl DO BEGIN
        SetCostControlFilters(ProjectResultForecast,lvCostObjControl);
        SETFILTER("Cost Type", '<>%1&<>%2', "Cost Type"::Labor, "Cost Type"::Plant);
        IF FINDSET THEN BEGIN
          TotalRecords := COUNT; //kzwerver, 130104, n, #C000245
          REPEAT
            RecordCount += 1;  //kzwerver, 130104, n, #C000245
            UpdateWindowCounter(RecordCount, TotalRecords);  //kzwerver, 130104, n, #C000245
            CALCFIELDS(Budget);
            IF ("Cost Object" = '') AND (Budget <> 0) THEN
              ERROR(Text001);

            IF "Cost Object" <> '' THEN BEGIN
              ProjectResultForecastLine.INIT;
              GetDefaultValues(lvCostCompRec,"Cost Object", ProjectResultForecast."Project No.",RecordProgress);
              ProjectResultForecastLine."Cost Component" := lvCostCompRec.Code;
              InsertPerRecord(ProjectResultForecast,3,lvCostCompRec.Code,TRUE,ProjectResultForecastLine);

              RestoreForecastLineFields(ProjectResultForecast, 3, "Cost Object", FALSE,
                ProjectResultForecastLine); //mg, 07-07-11: M28078

              CalcBudget(lvCostObjControl,ProjectResultForecastLine);
              CalcActualOtherCosts(lvCostObjControl,ProjectResultForecastLine,ProjectResultForecast);

              IF GETFILTER("Progress Filter") <> '''''' THEN
                EVALUATE(ProjectResultForecastLine."Progress Date",GETFILTER("Progress Filter"));

              IF GETFILTER(PrevProgressFilter) <> '''''' THEN
                EVALUATE(ProjectResultForecastLine."Previous Progress Date",GETFILTER(PrevProgressFilter));

              ProjectResultForecastLine."Record Progress" := RecordProgress;
              IF (TmpProjectResultForecastLine.ISEMPTY) THEN
                GetPreviousPerLine(ProjectResultForecast,3,"Cost Object",FALSE,ProjectResultForecastLine);
              InsertPerRecord(ProjectResultForecast,3,"Cost Object",FALSE,ProjectResultForecastLine);
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE RecalcRevenueLines@1210190004(ProjectResultForecast@1210190001 : Record 11126036);
    VAR
      DimVal@1210190002 : Record 349;
      ProjLedgEntry@1210190000 : Record 11072005;
      ProjectResultForecastLine@1210190003 : TEMPORARY Record 11126037;
      Prognosis@1210190004 : Record 11012034;
      PrognosisLine@1210190005 : Record 11012035;
      CostObjectFound@1210190007 : Boolean;
      BudgQty@1210190009 : Decimal;
      BudgRevenue@1210190006 : Decimal;
      ActRevenue@1210190008 : Decimal;
      TotalRecords@1100409001 : Integer;
      RecordCount@1100409000 : Integer;
    BEGIN
      //*Rev.n
      Prognosis.SETRANGE("Project No.", ProjectResultForecast."Project No.");
      Prognosis.SETRANGE("Prognosis Date", 0D, ProjectResultForecast.Date);
      IF NOT Prognosis.FINDLAST THEN
        Prognosis."Prognosis Date" := 0D;

      PrognosisLine.SETCURRENTKEY("Project No.", "Prognosis Date", "Cost Type", "Cost Object");
      PrognosisLine.SETRANGE("Project No.", ProjectResultForecast."Project No.");
      PrognosisLine.SETRANGE("Prognosis Date", Prognosis."Prognosis Date");
      PrognosisLine.SETRANGE("Cost Type", PrognosisLine."Cost Type"::Revenue);

      ProjLedgEntry.SETCURRENTKEY("Job No.", "Global Dimension 2 Code", "Entry Type", "Posting Date");
      ProjLedgEntry.SETRANGE("Job No.", ProjectResultForecast."Project No.");
      ProjLedgEntry.SETRANGE("Posting Date", 0D, ProjectResultForecast.Date);

      DimVal.SETRANGE("Dimension Code", GLSetup."Global Dimension 2 Code");
      DimVal.SETRANGE("Cost Type", DimVal."Cost Type"::Revenue);
      IF NOT DimVal.FINDSET THEN
        EXIT;
      TotalRecords := DimVal.COUNT; //kzwerver, 130104, n, #C000245
      REPEAT
        RecordCount += 1;  //kzwerver, 130104, n, #C000245
        UpdateWindowCounter(RecordCount, TotalRecords);  //kzwerver, 130104, n, #C000245
        CostObjectFound := FALSE;
        BudgQty := 0;
        BudgRevenue := 0;
        ActRevenue := 0;
        IF Prognosis."Prognosis Date" <> 0D THEN BEGIN
          PrognosisLine.SETRANGE("Cost Object", DimVal.Code);
          IF PrognosisLine.FINDSET THEN BEGIN
            CostObjectFound := TRUE;
            REPEAT
              //BudgQty := BudgQty + PrognosisLine.Quantity;
              // Table contains quantity, but tab 'Revenues' on form Prognose has no quantity,
              // so for now not count
              BudgRevenue := BudgRevenue + PrognosisLine."Amount Revenue";
            UNTIL PrognosisLine.NEXT = 0;
          END;
        END;
        //
        ProjLedgEntry.SETRANGE("Global Dimension 2 Code", DimVal.Code);
        ProjLedgEntry.SETRANGE("Advance Payment", FALSE);
        IF ProjLedgEntry.FINDFIRST THEN BEGIN
          CostObjectFound := TRUE;
          ProjLedgEntry.CALCSUMS("Total Price (LCY)");
          ActRevenue := -ProjLedgEntry."Total Price (LCY)";
        END;

        IF CostObjectFound THEN BEGIN
          ProjectResultForecastLine.INIT;
          IF TmpProjectResultForecastLine.GET(
            ProjectResultForecast."Project No.", ProjectResultForecast.Date,
            ProjectResultForecastLine."Line Type"::Revenues, FALSE, DimVal.Code)
          THEN BEGIN
            ProjectResultForecastLine."Forecast Revenues" := TmpProjectResultForecastLine."Forecast Revenues";
          END ELSE BEGIN
            GetPreviousPerLine(
              ProjectResultForecast, ProjectResultForecastLine."Line Type"::Revenues,
              DimVal.Code, FALSE, ProjectResultForecastLine);
          END;
          ProjectResultForecastLine."Budget Qty. Revenues" := BudgQty;
          ProjectResultForecastLine."Budget Revenues" := BudgRevenue;
          ProjectResultForecastLine."Actual Revenues" := ActRevenue;
          InsertPerRecord(
            ProjectResultForecast, ProjectResultForecastLine."Line Type"::Revenues,
            DimVal.Code, FALSE, ProjectResultForecastLine);
        END;
      UNTIL DimVal.NEXT = 0;
    END;

    LOCAL PROCEDURE SetCostControlFilters@1100525015(ProjectResultForecast@1100525001 : Record 11126036;VAR lvCostObjControl@1100525002 : Record 11012047);
    VAR
      lvJobRec@1100525000 : Record 11072003;
      lvDetProgressDateCU@1100525003 : Codeunit 11012014;
    BEGIN
      WITH lvCostObjControl DO BEGIN
        SETRANGE("Project No.",ProjectResultForecast."Project No.");
        SETFILTER("Cumulation Filter",'..%1',ProjectResultForecast.Date);
        lvJobRec.GET(ProjectResultForecast."Project No.");
        lvJobRec.SETFILTER("Cumulation Filter",'..%1',ProjectResultForecast.Date);
        ProjectResultForecast.CALCFIELDS("Previous Forecast Date");
        IF ProjectResultForecast."Previous Forecast Date" <> 0D THEN
          lvJobRec.SETFILTER("Period Filter",'%1..%2',ProjectResultForecast."Previous Forecast Date"-1,ProjectResultForecast.Date)
        ELSE
          lvJobRec.SETFILTER("Period Filter",'%1..%2',19000101D,ProjectResultForecast.Date);
        lvDetProgressDateCU.DetermineBothDates(lvJobRec,FALSE);
        lvJobRec.COPYFILTER("Progress Filter","Progress Filter");
        lvJobRec.COPYFILTER(PrevProgressFilter,PrevProgressFilter);
        lvJobRec.COPYFILTER("Period Filter","Period Filter");
        //130315, kzwerver, sn, #C006162
        SETRANGE("Project Filter");
        IF (lvJobRec."Single/Main/Sub Project" = lvJobRec."Single/Main/Sub Project"::"Sub Project") THEN
            SETRANGE("Project Filter", ProjectResultForecast."Project No.");
        //130315, kzwerver, en, #C006162
      END;
    END;

    LOCAL PROCEDURE GetDefaultValues@1100525002(VAR lvCostCompRec@1100525000 : Record 11012012;lvCostObjectCde@1100525002 : Code[20];lvProjectNo@1210190001 : Code[20];VAR RecordProgress@1100528701 : Boolean);
    VAR
      lvDimValRec@1100525001 : Record 349;
      Job@1210190000 : Record 11072003;
    BEGIN
      //*Rev.so
      //GeneralLedgerSetup.GET;
      //GeneralLedgerSetup.TESTFIELD("Global Dimension 2 Code");
      //*Rev.eo

      //lvDimValRec.GET(GeneralLedgerSetup."Global Dimension 2 Code",lvCostObjectCde);  //*Rev.o
      lvDimValRec.GET(GLSetup."Global Dimension 2 Code",lvCostObjectCde);  //*Rev.n
      lvDimValRec.TESTFIELD("Cost Component");
      lvCostCompRec.GET(lvDimValRec."Cost Component");

      Job.GET(lvProjectNo);
      RecordProgress := lvDimValRec."Record Progress" AND (Job."Progress Registry" <> 2); //Job."Progress Registry"::None
    END;

    LOCAL PROCEDURE DeterminePurchaseOrders@1100525013(ProjectResultForecast@1100525001 : Record 11126036;lvPurchActRec@1100525002 : Record 11012026;VAR lvTempPurchHeadRec@1100525003 : TEMPORARY Record 38);
    VAR
      lvPurchLineRec@1100525000 : Record 39;
    BEGIN
      lvPurchLineRec.SETRANGE("Document Type",lvPurchLineRec."Document Type"::Order);
      lvPurchLineRec.SETRANGE("Job No.",ProjectResultForecast."Project No.");
      lvPurchLineRec.SETRANGE("Purchase Action",lvPurchActRec.Code);
      lvPurchLineRec.SETFILTER("Order Date",'..%1',ProjectResultForecast.Date);
      IF lvPurchLineRec.FINDFIRST THEN BEGIN
        REPEAT
          IF NOT lvTempPurchHeadRec.GET(lvTempPurchHeadRec."Document Type"::Order,lvPurchLineRec."Document No.") THEN BEGIN
            lvTempPurchHeadRec.INIT;
            lvTempPurchHeadRec."Document Type" := lvTempPurchHeadRec."Document Type"::Order;
            lvTempPurchHeadRec."No." := lvPurchLineRec."Document No.";
            lvTempPurchHeadRec.INSERT;
          END;
        UNTIL lvPurchLineRec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE DetermineNameAndOrderNo@1100525017(VAR lvTempPurchHeadRec@1100525004 : TEMPORARY Record 38;VAR ProjectResultForecastLine@1100525000 : TEMPORARY Record 11126037);
    VAR
      lvPurchHeadRec@1100525002 : Record 38;
      lvRecCountInt@1100525003 : Integer;
    BEGIN
      lvRecCountInt := lvTempPurchHeadRec.COUNT;
      IF lvRecCountInt = 1 THEN BEGIN
        lvPurchHeadRec.GET(lvPurchHeadRec."Document Type"::Order,lvTempPurchHeadRec."No.");
        ProjectResultForecastLine.Description := lvPurchHeadRec."Pay-to Name";
        ProjectResultForecastLine."Order No." := lvTempPurchHeadRec."No.";
      END ELSE BEGIN
        IF lvRecCountInt = 0 THEN
          ProjectResultForecastLine.Description := ''
        ELSE
          ProjectResultForecastLine.Description := Text000;
        ProjectResultForecastLine."Order No." := '';
      END;
    END;

    LOCAL PROCEDURE InsertPerRecord@1100525010(ProjectResultForecast@1100525001 : Record 11126036;lvLineType@1100525002 : Integer;lvCode@1100525004 : Code[20];lvRecap@1100525003 : Boolean;VAR ProjectResultForecastLine@1100525005 : TEMPORARY Record 11126037);
    VAR
      lvPerLineRec@1100525000 : Record 11126037;
    BEGIN
      IF NOT lvPerLineRec.GET(ProjectResultForecast."Project No.",ProjectResultForecast.Date,lvLineType,lvRecap,lvCode) THEN BEGIN
        lvPerLineRec."Project No." := ProjectResultForecast."Project No.";
        lvPerLineRec.Date :=  ProjectResultForecast.Date;
        lvPerLineRec."Line Type" := lvLineType;
        lvPerLineRec.Code := lvCode;
        lvPerLineRec.Summary := lvRecap;
        FillFields(lvPerLineRec,ProjectResultForecastLine);
        lvPerLineRec.INSERT(TRUE); //130314, kzwerver, c, #C002661
      END ELSE BEGIN
        FillFields(lvPerLineRec,ProjectResultForecastLine);
        lvPerLineRec.MODIFY(TRUE); //130314, kzwerver, c, #C002661
      END;
    END;

    LOCAL PROCEDURE FillFields@1100525005(VAR lvPerLineRec@1100525000 : Record 11126037;VAR ProjectResultForecastLine@1100525001 : TEMPORARY Record 11126037);
    VAR
      lvPerLine2Rec@1100525002 : Record 11126037;
    BEGIN
      lvPerLine2Rec.COPY(lvPerLineRec);
      WITH lvPerLineRec DO BEGIN
        TRANSFERFIELDS(ProjectResultForecastLine);
        "Project No." := lvPerLine2Rec."Project No.";
        Date :=  lvPerLine2Rec.Date;
        "Line Type" :=  lvPerLine2Rec."Line Type";
        Summary :=  lvPerLine2Rec.Summary;
        VALIDATE(Code, lvPerLine2Rec.Code);
        CalcAmounts(FALSE);
      END;
    END;

    LOCAL PROCEDURE DetermineOrderAmounts@1100525001(VAR lvTempPurchHeadRec@1100525000 : TEMPORARY Record 38;ProjectResultForecast@1100525001 : Record 11126036;VAR ProjectResultForecastLine@1100525002 : TEMPORARY Record 11126037;lvPurchActRec@1100525005 : Record 11012026);
    VAR
      lvPurchLineRec@1100525004 : Record 39;
      lvJobLedgRec@1100525006 : Record 11072005;
    BEGIN
      WITH lvPurchLineRec DO BEGIN
        SETCURRENTKEY("Document Type","Job No.","Cost Type","Order Date","Purchase Action");
        SETRANGE("Document Type",lvPurchLineRec."Document Type"::Order);
        SETRANGE("Job No.",ProjectResultForecast."Project No.");
        SETRANGE("Purchase Action",lvPurchActRec.Code);
        SETFILTER("Order Date",'..%1',ProjectResultForecast.Date);
        IF FINDFIRST THEN BEGIN
          CALCSUMS("Amount (LCY)","Risc Coverage Amount (LCY)", "Release Risc Coverage (LCY)");
          ProjectResultForecastLine."Order Amount" := "Amount (LCY)";
          ProjectResultForecastLine."Risc Coverage Amount" := "Risc Coverage Amount (LCY)";
          ProjectResultForecastLine."Released Risk Coverage Amount" := lvPurchLineRec."Release Risc Coverage (LCY)"; // jhoek.230211
        END;
      END;

      WITH lvJobLedgRec DO BEGIN
        SETCURRENTKEY("Job No.","Cost Type","Entry Type","Posting Date","Purchase Action");
        SETRANGE("Job No.",ProjectResultForecast."Project No.");
        SETRANGE("Entry Type","Entry Type"::Usage);
        SETRANGE("Purchase Action",lvPurchActRec.Code);
        SETFILTER("Posting Date",'..%1',ProjectResultForecast.Date);
        IF FINDFIRST THEN BEGIN
          CALCSUMS("Total Cost (LCY)");
          ProjectResultForecastLine."Actual Cost" := "Total Cost (LCY)";
        END;
      END;
    END;

    LOCAL PROCEDURE CalcBudget@1100525007(VAR lvCostObjControl@1100525003 : Record 11012047;VAR ProjectResultForecastLine@1100525000 : TEMPORARY Record 11126037);
    VAR
      lvBudgetLineRec@1100525002 : Record 11012001;
    BEGIN
      WITH lvBudgetLineRec DO BEGIN
        SETCURRENTKEY(
          "Project No.",
          "Cost Type",
          "Cost Object",
          "Extension Contract Status",
          "Version Date",
          Adjustment,
          "Extension Contract",
          Option,
          "Purchase Action",
          "Budget Summary Line");
        SETRANGE("Project No.",lvCostObjControl."Project No.");
        SETRANGE("Cost Type",lvCostObjControl."Cost Type");
        SETRANGE("Cost Object",lvCostObjControl."Cost Object");
        lvCostObjControl.COPYFILTER("Cumulation Filter","Version Date");
        SETFILTER("Purchase Action",'%1','');
        SETFILTER("Extension Contract",'%1','');
        SETFILTER(Option,'%1','');
        SETFILTER(Adjustment,'%1','');

        IF FINDFIRST THEN BEGIN
          CALCSUMS("Amount (LCY)",Hours);
          ProjectResultForecastLine.Budget := "Amount (LCY)";
          ProjectResultForecastLine."Budget Hours" := Hours;
        END;

        SETFILTER("Extension Contract",'<>%1','');
        SETFILTER("Extension Contract Status", '%1|%2',
          lvBudgetLineRec."Extension Contract Status"::Order,
          lvBudgetLineRec."Extension Contract Status"::"Invoicing Allowed");
        IF FINDFIRST THEN BEGIN
          CALCSUMS("Amount (LCY)",Hours);
          ProjectResultForecastLine."Budget Extension" := "Amount (LCY)";
          ProjectResultForecastLine."Budgetted Extension Hours" := Hours;
        END;
        SETRANGE("Extension Contract Status");

        SETFILTER("Extension Contract",'%1','');
        SETFILTER(Option,'<>%1','');
        IF FINDFIRST THEN BEGIN
          CALCSUMS("Amount (LCY)",Hours);
          ProjectResultForecastLine."Budget Options" := "Amount (LCY)";
          ProjectResultForecastLine."Budgetted Option Hours" := Hours;
        END;
        SETFILTER(Option,'%1','');

        //mg.sn, 01-12-11: M30782
        SETRANGE("Extension Contract");
        SETRANGE(Option);
        //mg.en, 01-12-11: M30782

        //kzwerver, sn, #C013323
        SETFILTER("Extension Contract Status", '%1|%2|%3', 0,
          lvBudgetLineRec."Extension Contract Status"::Order,
          lvBudgetLineRec."Extension Contract Status"::"Invoicing Allowed");
        //kzwerver, en, #C013323
        SETFILTER(Adjustment,'<>%1','');
        IF FINDFIRST THEN BEGIN
          CALCSUMS("Amount (LCY)",Hours);
          ProjectResultForecastLine."Budget Adjustments" := "Amount (LCY)";
          ProjectResultForecastLine."Budgetted Adjustment Hours" := Hours;
        END;

        ProjectResultForecastLine."Budget (Total)" :=
          ProjectResultForecastLine.Budget +
          ProjectResultForecastLine."Budget Extension" +
          ProjectResultForecastLine."Budget Adjustments" +
          ProjectResultForecastLine."Budget Options";

        ProjectResultForecastLine."Budget Hours (Total)" :=
          ProjectResultForecastLine."Budget Hours" +
          ProjectResultForecastLine."Budgetted Extension Hours" +
          ProjectResultForecastLine."Budgetted Adjustment Hours" +
          ProjectResultForecastLine."Budgetted Option Hours";
      END;
    END;

    LOCAL PROCEDURE CalcPurchaseActionBudget@1100528302(ProjectPurchaseAction@1100528300 : Record 11012026;ProjectResultForecast@1100528301 : TEMPORARY Record 11126036;VAR ProjectResultForecastLine@1100525000 : TEMPORARY Record 11126037);
    VAR
      lvBudgetLineRec@1100525002 : Record 11012001;
    BEGIN
      WITH lvBudgetLineRec DO BEGIN
      //  SETCURRENTKEY("Project No.", "Purchase Action");
        SETCURRENTKEY(
          "Project No.",
          "Cost Type",
          "Cost Object",
          "Extension Contract Status",
          "Version Date",
          Adjustment,
          "Extension Contract",
          Option,
          "Purchase Action",
          "Budget Summary Line");
        SETRANGE("Project No.", ProjectPurchaseAction."Project No.");
        SETFILTER("Version Date", '..%1', ProjectResultForecast.Date);
        SETRANGE("Purchase Action", ProjectPurchaseAction.Code);
        SETFILTER("Extension Contract",'%1','');
        SETFILTER(Option,'%1','');
        SETFILTER(Adjustment,'%1','');

        IF FINDFIRST THEN BEGIN
          CALCSUMS("Amount (LCY)",Hours);
          ProjectResultForecastLine.Budget := "Amount (LCY)";
          ProjectResultForecastLine."Budget Hours" := Hours;
        END;

        SETFILTER("Extension Contract",'<>%1','');
        SETFILTER("Extension Contract Status", '%1|%2',
          lvBudgetLineRec."Extension Contract Status"::Order,
          lvBudgetLineRec."Extension Contract Status"::"Invoicing Allowed");
        IF FINDFIRST THEN BEGIN
          CALCSUMS("Amount (LCY)",Hours);
          ProjectResultForecastLine."Budget Extension" := "Amount (LCY)";
          ProjectResultForecastLine."Budgetted Extension Hours" := Hours;
        END;
        SETRANGE("Extension Contract Status");

        SETFILTER("Extension Contract", '%1', '');
        SETFILTER(Option,'<>%1','');
        IF FINDFIRST THEN BEGIN
          CALCSUMS("Amount (LCY)",Hours);
          ProjectResultForecastLine."Budget Options" := "Amount (LCY)";
          ProjectResultForecastLine."Budgetted Option Hours" := Hours;
        END;

        SETRANGE("Extension Contract");
        SETRANGE(Option);
        SETFILTER(Adjustment,'<>%1','');
        IF FINDFIRST THEN BEGIN
          CALCSUMS("Amount (LCY)",Hours);
          ProjectResultForecastLine."Budget Adjustments" := "Amount (LCY)";
          ProjectResultForecastLine."Budgetted Adjustment Hours" := Hours;
        END;
        SETFILTER(Adjustment,'%1','');

        ProjectResultForecastLine."Budget (Total)" :=
          ProjectResultForecastLine.Budget +
          ProjectResultForecastLine."Budget Extension" +
          ProjectResultForecastLine."Budget Adjustments" +
          ProjectResultForecastLine."Budget Options";

        ProjectResultForecastLine."Budget Hours (Total)" :=
          ProjectResultForecastLine."Budget Hours" +
          ProjectResultForecastLine."Budgetted Extension Hours" +
          ProjectResultForecastLine."Budgetted Adjustment Hours" +
          ProjectResultForecastLine."Budgetted Option Hours";
      END;
    END;

    LOCAL PROCEDURE CalcPurchaseBudget@1210190001(ProjectPurchaseAction@1210190000 : Record 11012026) : Decimal;
    VAR
      BudgetLine@1210190001 : Record 11012001;
    BEGIN
      BudgetLine.SETCURRENTKEY("Project No.", "Purchase Action");
      BudgetLine.SETRANGE("Project No.", ProjectPurchaseAction."Project No.");
      BudgetLine.SETRANGE("Purchase Action", ProjectPurchaseAction.Code);
      BudgetLine.CALCSUMS("Amount (LCY)");
      EXIT(BudgetLine."Amount (LCY)");
    END;

    LOCAL PROCEDURE CalcPurchaseBudgetConcepts@1210190002(ProjectPurchaseAction@1210190000 : Record 11012026) : Decimal;
    VAR
      BudgetLine@1210190001 : Record 11012001;
    BEGIN
      BudgetLine.SETCURRENTKEY("Project No.", "Purchase Action");
      BudgetLine.SETRANGE("Project No.", ProjectPurchaseAction."Project No.");
      BudgetLine.SETRANGE("Purchase Action", ProjectPurchaseAction.Code);
      BudgetLine.CALCSUMS("Amount (LCY)");
      EXIT(BudgetLine."Amount (LCY)");
    END;

    LOCAL PROCEDURE CalcActualOtherCosts@1100525019(VAR lvCostObjControl@1100525001 : Record 11012047;VAR ProjectResultForecastLine@1100525000 : TEMPORARY Record 11126037;ProjectResultForecast@1100525002 : Record 11126036);
    VAR
      lvJobLedgRec@1100525003 : Record 11072005;
    BEGIN
      WITH lvJobLedgRec DO BEGIN
        SETCURRENTKEY(
          "Main Project No.",
          "Job No.",
          "Cost Type",
          "Global Dimension 2 Code",
          "Entry Type",
          "Posting Date",
          "Purchase Action");
        SETRANGE("Job No.",ProjectResultForecast."Project No.");
        SETRANGE("Entry Type","Entry Type"::Usage);
        SETRANGE("Global Dimension 2 Code",lvCostObjControl."Cost Object");
        SETFILTER("Purchase Action",'%1','');
        SETFILTER("Posting Date",'<=%1',ProjectResultForecast.Date);
        IF FINDFIRST THEN BEGIN
          CALCSUMS("Total Cost (LCY)");
          ProjectResultForecastLine."Actual Cost" := "Total Cost (LCY)";
        END;
      END;
    END;

    LOCAL PROCEDURE GetPreviousPerLine@1100525008(ProjectResultForecast@1100525005 : Record 11126036;lvLineType@1100525004 : Integer;lvCode@1100525003 : Code[20];lvRecap@1100525001 : Boolean;VAR ProjectResultForecastLine@1100525000 : TEMPORARY Record 11126037);
    VAR
      lvPerLineRec@1100525002 : Record 11126037;
    BEGIN
      ProjectResultForecast.CALCFIELDS("Previous Forecast Date");
      WITH lvPerLineRec DO BEGIN
        IF GET(ProjectResultForecast."Project No.",
               ProjectResultForecast."Previous Forecast Date",
               lvLineType,
               lvRecap,
               lvCode)
        THEN BEGIN
          IF "Line Type" <> "Line Type"::Revenues THEN BEGIN  //*Rev.n
            ProjectResultForecastLine.Comment := Comment;
            ProjectResultForecastLine.Action := Action;
            ProjectResultForecastLine."Fix Hour Rate" := "Fix Hour Rate";
            IF (ProjectResultForecastLine."Fix Hour Rate") THEN
              ProjectResultForecastLine."Avg. Hour Rate" := "Avg. Hour Rate";
            ProjectResultForecastLine."Fix Project Result Forecast" := "Fix Project Result Forecast";
            IF ProjectResultForecastLine."Fix Project Result Forecast" THEN
              ProjectResultForecastLine."Project Result Forecast" := "Project Result Forecast";
          //*Rev.sn
          END ELSE BEGIN
            ProjectResultForecastLine."Forecast Revenues" := "Forecast Revenues";
          END;
          //*Rev.en
        END;
      END;
    END;

    LOCAL PROCEDURE SaveProjectResultForecastLines@1210190000(ProjectNo@1210190000 : Code[20];ForecastDate@1210190001 : Date);
    VAR
      ProjectResultForecastLine@1210190002 : Record 11126037;
    BEGIN
      //mg, 07-07-11: M28078
      TmpProjectResultForecastLine.RESET;
      TmpProjectResultForecastLine.DELETEALL;

      ProjectResultForecastLine.SETRANGE("Project No.", ProjectNo);
      ProjectResultForecastLine.SETRANGE(Date, ForecastDate);
      IF NOT ProjectResultForecastLine.FINDSET THEN EXIT;
      REPEAT
        TmpProjectResultForecastLine := ProjectResultForecastLine;
        TmpProjectResultForecastLine.INSERT;
      UNTIL ProjectResultForecastLine.NEXT = 0;
    END;

    LOCAL PROCEDURE RestoreForecastLineFields@1210190003(ProjectResultForecast@1210190000 : Record 11126036;LineType@1210190004 : Option;Code@1210190002 : Code[20];Summary@1210190003 : Boolean;VAR ProjectResultForecastLine@1210190001 : Record 11126037);
    BEGIN
      //mg, 07-07-11: M28078
      TmpProjectResultForecastLine.RESET;
      IF TmpProjectResultForecastLine.GET(ProjectResultForecast."Project No.", ProjectResultForecast.Date,
        LineType, Summary, Code)
      THEN BEGIN
        ProjectResultForecastLine.Comment := TmpProjectResultForecastLine.Comment;
        ProjectResultForecastLine.Action := TmpProjectResultForecastLine.Action;
        ProjectResultForecastLine."Fix Hour Rate" := TmpProjectResultForecastLine."Fix Hour Rate";
        ProjectResultForecastLine."Fix Project Result Forecast" := TmpProjectResultForecastLine."Fix Project Result Forecast";
        IF (ProjectResultForecastLine."Fix Hour Rate") THEN
          ProjectResultForecastLine."Avg. Hour Rate" := TmpProjectResultForecastLine."Avg. Hour Rate";
        IF (NOT ProjectResultForecastLine."Fix Project Result Forecast") THEN BEGIN
          ProjectResultForecastLine."Correction Remaining Amount" := TmpProjectResultForecastLine."Correction Remaining Amount";
          ProjectResultForecastLine."Corr. Project Result Forecast" := TmpProjectResultForecastLine."Corr. Project Result Forecast";
        END ELSE BEGIN
          ProjectResultForecastLine."Correction Remaining Amount" := 0;
          ProjectResultForecastLine."Corr. Project Result Forecast" := 0;
          ProjectResultForecastLine."Project Result Forecast" := TmpProjectResultForecastLine."Project Result Forecast";
        END;
      END;
    END;

    PROCEDURE MarkNonZeroLines@1100528300(VAR ProjectResultForecastLine@1100528302 : Record 11126037);
    VAR
      HoldCode@1100525000 : Code[20];
    BEGIN
      HoldCode := ProjectResultForecastLine.Code;
      IF (ProjectResultForecastLine.FINDSET) THEN BEGIN
        REPEAT
          IF (ProjectResultForecastLine."Budget (Total)" <> 0)  OR
             (ProjectResultForecastLine."Actual Cost" <> 0) OR
             (ProjectResultForecastLine."Project Result Forecast" <> 0) //kzwerver, 120628, c, C000592
          THEN
            ProjectResultForecastLine.MARK(TRUE);
        UNTIL (ProjectResultForecastLine.NEXT = 0);
      END;

      IF (ProjectResultForecastLine.GET(
        ProjectResultForecastLine."Project No.",
        ProjectResultForecastLine.Date,
        ProjectResultForecastLine."Line Type",
        ProjectResultForecastLine.Summary,
        HoldCode)) THEN;
    END;

    PROCEDURE DrillDownBudget@1100528301(ProjectResultForecastLine@1100528300 : Record 11126037;BudgetFieldType@1100528302 : Option);
    VAR
      BudgetLine@1100528301 : Record 11012001;
    BEGIN
      BudgetLine.FILTERGROUP(9);
      BudgetLine.SETRANGE("Project No.", ProjectResultForecastLine."Project No.");
      CASE BudgetFieldType OF
        0: BEGIN //Budget
          BudgetLine.SETRANGE("Cost Object", ProjectResultForecastLine.Code);
          BudgetLine.FILTERGROUP(0);
          BudgetLine.SETFILTER(Adjustment, '= %1', '');
          BudgetLine.SETFILTER("Extension Contract", '= %1', '');
          BudgetLine.SETFILTER(Option, '= %1', '');
          BudgetLine.SETFILTER("Purchase Action", '= %1', '');
        END;
        1: BEGIN //Extension
          BudgetLine.SETRANGE("Cost Object", ProjectResultForecastLine.Code);
          BudgetLine.FILTERGROUP(0);
          BudgetLine.SETFILTER(Adjustment, '= %1', '');
          BudgetLine.SETFILTER("Extension Contract", '<> %1', '');
          BudgetLine.SETFILTER(Option, '= %1', '');
          BudgetLine.SETFILTER("Purchase Action", '= %1', '');

          //kzwerver, sn, #C013323
          BudgetLine.SETFILTER("Extension Contract Status", '%1|%2',
            BudgetLine."Extension Contract Status"::Order,
            BudgetLine."Extension Contract Status"::"Invoicing Allowed");
          //kzwerver, en, #C013323
        END;
        2: BEGIN //Adjustment
          BudgetLine.SETRANGE("Cost Object", ProjectResultForecastLine.Code);
          BudgetLine.FILTERGROUP(0);
          BudgetLine.SETFILTER(Adjustment, '<> %1', '');
          BudgetLine.SETFILTER("Purchase Action", '= %1', '');

          //kzwerver, sn, #C013323
          BudgetLine.SETFILTER("Extension Contract Status", '%1|%2|%3', 0,
            BudgetLine."Extension Contract Status"::Order,
            BudgetLine."Extension Contract Status"::"Invoicing Allowed");
          //kzwerver, en, #C013323
        END;
        3: BEGIN //Option
          BudgetLine.SETRANGE("Cost Object", ProjectResultForecastLine.Code);
          BudgetLine.FILTERGROUP(0);
          BudgetLine.SETFILTER(Adjustment, '= %1', '');
          BudgetLine.SETFILTER(Option, '<> %1', '');
          BudgetLine.SETFILTER("Purchase Action", '= %1', '');
        END;
        4: BEGIN //Total
          BudgetLine.SETRANGE("Cost Object", ProjectResultForecastLine.Code);
          BudgetLine.FILTERGROUP(0);
          BudgetLine.SETFILTER("Purchase Action", '= %1', '');

          //kzwerver, sn, #C013323
          BudgetLine.SETFILTER("Extension Contract Status", '%1|%2|%3', 0,
            BudgetLine."Extension Contract Status"::Order,
            BudgetLine."Extension Contract Status"::"Invoicing Allowed");
          //kzwerver, en, #C013323
        END;
      END;
      PAGE.RUNMODAL(0, BudgetLine);
    END;

    PROCEDURE DrillDownPurchAction@1100528306(ProjectResultForecastLine@1100528300 : Record 11126037;BudgetFieldType@1100528302 : Option);
    VAR
      BudgetLine@1100528301 : Record 11012001;
    BEGIN
      BudgetLine.FILTERGROUP(9);
      BudgetLine.SETRANGE("Project No.", ProjectResultForecastLine."Project No.");
      CASE BudgetFieldType OF
        0: BEGIN //Budget
          BudgetLine.SETRANGE("Purchase Action", ProjectResultForecastLine.Code);
          BudgetLine.FILTERGROUP(0);
          BudgetLine.SETFILTER(Adjustment, '= %1', '');
          BudgetLine.SETFILTER("Extension Contract", '= %1', '');
          BudgetLine.SETFILTER(Option, '= %1', '');
        END;
        1: BEGIN //Extension
          BudgetLine.SETRANGE("Purchase Action", ProjectResultForecastLine.Code);
          BudgetLine.FILTERGROUP(0);
          BudgetLine.SETFILTER(Adjustment, '= %1', '');
          BudgetLine.SETFILTER("Extension Contract", '<> %1', '');
          BudgetLine.SETFILTER(Option, '= %1', '');
        END;
        2: BEGIN //Adjustment
          BudgetLine.SETRANGE("Purchase Action", ProjectResultForecastLine.Code);
          BudgetLine.FILTERGROUP(0);
          BudgetLine.SETFILTER(Adjustment, '<> %1', '');
        END;
        3: BEGIN //Option
          BudgetLine.SETRANGE("Purchase Action", ProjectResultForecastLine.Code);
          BudgetLine.FILTERGROUP(0);
          BudgetLine.SETFILTER(Adjustment, '= %1', '');
          BudgetLine.SETFILTER(Option, '<> %1', '');
        END;
        4: BEGIN //Total
          BudgetLine.SETRANGE("Purchase Action", ProjectResultForecastLine.Code);
          BudgetLine.FILTERGROUP(0);
        END;
      END;
      PAGE.RUNMODAL(0, BudgetLine);
    END;

    PROCEDURE DrillDownPurchOrder@1100528303(ProjectResultForecastLine@1100528300 : Record 11126037);
    VAR
      PurchaseLine@1100528301 : Record 39;
    BEGIN
      PurchaseLine.FILTERGROUP(9);
      PurchaseLine.SETRANGE("Document Type", PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Job No.", ProjectResultForecastLine."Project No.");
      PurchaseLine.SETRANGE("Purchase Action", ProjectResultForecastLine.Code);
      PurchaseLine.FILTERGROUP(0);
      PAGE.RUNMODAL(0, PurchaseLine);
    END;

    PROCEDURE DeterminePrevRevenueForecasts@1210190005(ProjResForecastLine@1210190000 : Record 11126037;NoOfForcasts@1210190002 : Integer;OnlySelectForReport@1210190005 : Boolean;VAR ForecastDateArray@1210190003 : ARRAY [10] OF Date;VAR ForecastAmtArray@1210190004 : ARRAY [10] OF Decimal);
    VAR
      ProjResForecast@1210190006 : Record 11126036;
      ProjResForecastLine2@1210190007 : Record 11126037;
      ArrNo@1210190001 : Integer;
    BEGIN
      //*Rev.n
      CLEAR(ForecastDateArray);
      CLEAR(ForecastAmtArray);
      IF (ProjResForecastLine."Project No." = '') OR (ProjResForecastLine.Date = 0D) OR
         (ProjResForecastLine.Code = '') OR (ProjResForecastLine."Line Type" <> ProjResForecastLine."Line Type"::Revenues)
      THEN
        EXIT;

      IF (ProjResForecastLine."Project No." <> SaveProjNo) OR (ProjResForecastLine.Date <> SaveForecastDate) OR
         (NoOfForcasts <> SaveNoOfForcasts) OR (OnlySelectForReport <> SaveOnlySelectForReport)
      THEN BEGIN
        CLEAR(SaveForecastDateArray);
        SaveCostObject := '';  // So rebuild amount array is done below
        ProjResForecast.SETRANGE("Project No.", ProjResForecastLine."Project No.");
        IF OnlySelectForReport THEN
          ProjResForecast.SETRANGE("Select for Report", TRUE);
        ProjResForecast.Date := ProjResForecastLine.Date;
        FOR ArrNo := 1 TO NoOfForcasts DO BEGIN
          ProjResForecast.SETRANGE(Date, 0D, ProjResForecast.Date-1);
          IF ProjResForecast.FINDLAST THEN
            SaveForecastDateArray[ArrNo] := ProjResForecast.Date
          ELSE
            ArrNo := NoOfForcasts;  // End FOR-loop
        END;
      END;
      COPYARRAY(ForecastDateArray, SaveForecastDateArray, 1);

      IF (ProjResForecastLine.Code <> SaveCostObject) THEN BEGIN
        CLEAR(SaveForecastAmtArray);
        FOR ArrNo := 1 TO NoOfForcasts DO BEGIN
          IF SaveForecastDateArray[ArrNo] <> 0D THEN BEGIN
            IF ProjResForecastLine2.GET(
              ProjResForecastLine."Project No.", SaveForecastDateArray[ArrNo],
              ProjResForecastLine."Line Type", FALSE, ProjResForecastLine.Code)
            THEN
              SaveForecastAmtArray[ArrNo] := ProjResForecastLine2."Forecast Revenues";
          END;
        END;
      END;
      COPYARRAY(ForecastAmtArray, SaveForecastAmtArray, 1);

      SaveProjNo := ProjResForecastLine."Project No.";
      SaveForecastDate := ProjResForecastLine.Date;
      SaveCostObject := ProjResForecastLine.Code;
      SaveNoOfForcasts := NoOfForcasts;
      SaveOnlySelectForReport := OnlySelectForReport;
    END;

    LOCAL PROCEDURE UpdateWindowCounter@1100409000(RecordCount@1100409001 : Integer;TotalRecords@1100409000 : Integer);
    BEGIN
      //kzwerver, 130104, n, #C000245
      Window.UPDATE(2, ROUND((RecordCount / TotalRecords) * 10000, 1));
    END;

    PROCEDURE DrillDownRevenues@1100525003(ProjectResultForecastLine@1100525001 : Record 11126037;RevenuesType@1100525000 : Option);
    VAR
      Prognosis@1100525004 : Record 11012034;
      PrognosisLine@1100525003 : Record 11012035;
      JobLedgerEntry@1100525002 : Record 11072005;
    BEGIN
      CASE RevenuesType OF
        1: BEGIN //Budget Revenue, Budget Quantity Revenue
          Prognosis.SETRANGE("Project No.", ProjectResultForecastLine."Project No.");
          Prognosis.SETRANGE("Prognosis Date", 0D, ProjectResultForecastLine.Date);
          IF (NOT Prognosis.FINDLAST) THEN
            EXIT;

          //PrognosisLine.FILTERGROUP(9);
          PrognosisLine.SETCURRENTKEY("Project No.", "Prognosis Date", "Cost Type", "Cost Object");
          PrognosisLine.SETRANGE("Project No.", ProjectResultForecastLine."Project No.");
          PrognosisLine.SETRANGE("Prognosis Date", Prognosis."Prognosis Date");
          PrognosisLine.FILTERGROUP(0);
          PrognosisLine.SETRANGE("Cost Type", PrognosisLine."Cost Type"::Revenue);
          PrognosisLine.SETRANGE("Cost Object", ProjectResultForecastLine.Code);
          PAGE.RUNMODAL(PAGE::"Prognosis Line List", PrognosisLine);
        END;
        2: BEGIN //Actual Revenue
          JobLedgerEntry.FILTERGROUP(9);
          JobLedgerEntry.SETCURRENTKEY("Job No.", "Global Dimension 2 Code", "Entry Type", "Posting Date");
          JobLedgerEntry.SETRANGE("Job No.", ProjectResultForecastLine."Project No.");
          JobLedgerEntry.SETRANGE("Posting Date", 0D, ProjectResultForecastLine.Date);
          JobLedgerEntry.SETRANGE("Advance Payment", FALSE);
          JobLedgerEntry.FILTERGROUP(0);
          JobLedgerEntry.SETRANGE("Global Dimension 2 Code", ProjectResultForecastLine.Code);
          PAGE.RUNMODAL(0, JobLedgerEntry);
        END;
      END;
    END;

    BEGIN
    END.
  }
}

