OBJECT Codeunit 11128501 DocumentTools
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVNO10.00 (10601+10610);
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AmountKr@1080001 : Integer;
      Amountkre@1080002 : Integer;
      KIDDocumentNo@1080005 : Text[24];
      KIDCustomerNo@1080006 : Text[24];
      KIDDocType@1080007 : Text[1];
      i@1080008 : Integer;
      KIDSetupErr@1080009 : TextConst 'ENU=If KID is used on the Finance Charge Memo/Reminder then KID setup has to be %1 or %2.;NOR=Hvis KID er brukt i rentenota/purring, m† KID-oppsett v‘re %1 eller %2.';
      CompanyInfo@1080101 : Record 79;
      GLSetup@1080103 : Record 98;
      WrongLengthErr@1080106 : TextConst 'ENU=should be %1 characters long;NOR=skal v‘re  %1 tegn lang;SVE=ska vara %1 tecken l†ngt';
      CompanyInfoRead@1080104 : Boolean;
      GLSetupRead@1080105 : Boolean;

    PROCEDURE SetupGiro@1080009(PrintGiro@1080000 : Boolean;DocumentType@1080001 : Integer;DocumentNo@1080002 : Code[20];CustomerNo@1080003 : Code[20];GiroAmount@1080004 : Decimal;GiroCurrencyCode@1080005 : Code[10];VAR GiroAmountKr@1080006 : Text[20];VAR GiroAmountkre@1080007 : Text[2];VAR CheckDigit@1080008 : Text[1];VAR GiroKID@1080009 : Text[25];VAR KIDError@1080010 : Boolean);
    VAR
      AmountControl@1080011 : Text[25];
    BEGIN
      IF NOT PrintGiro THEN BEGIN
        // Format amount on pages before the last
        GiroAmountKr := '***';
        GiroAmountkre := '**';
        CheckDigit := ' ';
        GiroKID := '';
      END ELSE BEGIN
        // Format amount on the last page
        IF GiroCurrencyCode <> '' THEN BEGIN
          // Currency not possible. Blank amounts
          GiroAmountKr := '';
          GiroAmountkre := '';
          CheckDigit := ' ';
        END ELSE BEGIN
          GiroAmount := ABS(GiroAmount);
          AmountKr := ROUND(GiroAmount,1,'<');
          Amountkre := (GiroAmount - AmountKr) * 100;
          GiroAmountKr := STRSUBSTNO('%1',AmountKr);
          IF Amountkre = 0 THEN
            GiroAmountkre := '00';
          IF Amountkre < 10 THEN
            GiroAmountkre := STRSUBSTNO('0%1',Amountkre);
          IF Amountkre >= 10 THEN
            GiroAmountkre := STRSUBSTNO('%1',Amountkre);
          AmountControl := GiroAmountKr + GiroAmountkre;
          CheckDigit := Modulus10(AmountControl);
        END;

        // Test if KID has to be used
        GenerateGiroKID(DocumentType,DocumentNo,CustomerNo,GiroKID,KIDError);
      END;
    END;

    LOCAL PROCEDURE GenerateGiroKID@1080000(DocumentType@1080003 : Integer;DocumentNo@1080002 : Code[20];CustomerNo@1080001 : Code[20];VAR GiroKID@1080005 : Text[25];VAR KIDError@1080004 : Boolean);
    VAR
      SalesSetup@1080000 : Record 311;
    BEGIN
      SalesSetup.GET;
        CASE TRUE OF
          (SalesSetup."KID Setup" = SalesSetup."KID Setup"::"Do not use"):
            GiroKID := '';
          (DocumentType = 2) AND (NOT SalesSetup."Use KID on Fin. Charge Memo"):
            GiroKID := '';
          (DocumentType = 3) AND (NOT SalesSetup."Use KID on Reminder"):
            GiroKID := '';
          NOT KIDTextOK(DocumentNo,SalesSetup."Document No. length",KIDError):
            GiroKID := '';
          ELSE
            // Format KID
            SalesSetup.TESTFIELD("Document No. length");
            KIDDocumentNo :=
              FORMAT(DocumentNo,0,
                STRSUBSTNO('<text,%1><filler character,0>',SalesSetup."Document No. length"));
            KIDDocType := FORMAT(DocumentType);
            IF SalesSetup."Customer No. length" > 0 THEN
              KIDCustomerNo :=
                FORMAT(CustomerNo,0,
                  STRSUBSTNO('<text,%1><filler character,0>',SalesSetup."Customer No. length"));

            CASE SalesSetup."KID Setup" OF
              SalesSetup."KID Setup"::"Document No.":
                GiroKID := KIDDocumentNo;
              SalesSetup."KID Setup"::"Document No.+Customer No.":
                GiroKID := COPYSTR(KIDDocumentNo + KIDCustomerNo,1,MAXSTRLEN(GiroKID) - 1);
              SalesSetup."KID Setup"::"Customer No.+Document No.":
                GiroKID := COPYSTR(KIDCustomerNo + KIDDocumentNo,1,MAXSTRLEN(GiroKID) - 1);
              SalesSetup."KID Setup"::"Document Type+Document No.":
                GiroKID := COPYSTR(KIDDocType + KIDDocumentNo,1,MAXSTRLEN(GiroKID) - 1);
              SalesSetup."KID Setup"::"Document No.+Document Type":
                GiroKID := COPYSTR(KIDDocumentNo + KIDDocType,1,MAXSTRLEN(GiroKID) - 1);
            END;
            GiroKID := GiroKID + Modulus10(GiroKID);
      END;
    END;

    LOCAL PROCEDURE KIDTextOK@1080010(KIDText@1080000 : Text[30];MaxLength@1080001 : Integer;VAR KIDError@1080002 : Boolean) : Boolean;
    VAR
      NoOK@1080003 : Boolean;
      i@1080004 : Integer;
    BEGIN
      NoOK := TRUE;
      IF STRLEN(KIDText) > MaxLength THEN
        NoOK := FALSE;
      // Only digits allowed
      FOR i := 1 TO STRLEN(KIDText) DO
        IF STRPOS('0123456789',COPYSTR(KIDText,i,1)) = 0 THEN
          NoOK := FALSE;

      IF NOT NoOK THEN
        KIDError := TRUE;
      EXIT(NoOK);
    END;

    PROCEDURE Modulus10@1080011(KIDText@1080000 : Text[25]) : Text[1];
    VAR
      TempText@1080001 : Text[60];
      Digit@1080002 : Integer;
      i@1080003 : Integer;
    BEGIN
      TempText := '0000000000000000000000000' + KIDText + '0';
      KIDText := COPYSTR(TempText,STRLEN(TempText) - 24);
      FOR i := 1 TO 12 DO BEGIN
        EVALUATE(Digit,COPYSTR(KIDText,i * 2,1));
        Digit := Digit * 2;
        IF Digit > 10 THEN BEGIN
          TempText := FORMAT(Digit);
          Digit := 99 - STRCHECKSUM(TempText,'11',99);
        END;
        TempText := FORMAT(Digit);
        KIDText[i * 2] := TempText[1];
      END;
      // Calculate control digit
      EXIT(STRSUBSTNO('%1',STRCHECKSUM(KIDText,'1111111111111111111111111',10)));
    END;

    PROCEDURE FindPrintingSetup@1080012(ObjectID@1080001 : Text[30];VAR PrinterSelection@1080000 : Record 78) : Boolean;
    BEGIN
      EXIT(PrinterSelection.GET(USERID,FindObjectNumber(ObjectID)));
    END;

    LOCAL PROCEDURE FindObjectNumber@1080013(ObjectID@1080001 : Text[30]) ObjectNumber@1080002 : Integer;
    BEGIN
      i := STRLEN(ObjectID);
      WHILE (ObjectID[i] <> ' ') AND (i > 0) DO
        i := i - 1;
      IF i = 0 THEN
        ObjectNumber := 0
      ELSE
        EVALUATE(ObjectNumber,COPYSTR(ObjectID,i));
      EXIT;
    END;

    PROCEDURE TestKIDSetup@1080014(SRSetup@1080000 : Record 311);
    VAR
      SRSetup1@1080001 : Record 311;
      SRSetup2@1080002 : Record 311;
    BEGIN
      SRSetup1."KID Setup" := SRSetup1."KID Setup"::"Document Type+Document No.";
      SRSetup2."KID Setup" := SRSetup2."KID Setup"::"Document No.+Document Type";
      IF (SRSetup."Use KID on Fin. Charge Memo" OR SRSetup."Use KID on Reminder") AND
         NOT (SRSetup."KID Setup" IN
              [SRSetup."KID Setup"::"Document Type+Document No.",SRSetup."KID Setup"::"Document No.+Document Type"])
      THEN
        ERROR(KIDSetupErr,SRSetup1."KID Setup",SRSetup2."KID Setup");
    END;

    PROCEDURE GetEInvoiceExportPaymentID@1080001(EInvoiceExportHeader@1080002 : Record 11128514) : Code[30];
    VAR
      GiroKID@1080001 : Text[25];
      KIDError@1080000 : Boolean;
    BEGIN
      GenerateGiroKID(1,EInvoiceExportHeader."No.",EInvoiceExportHeader."Bill-to Customer No.",GiroKID,KIDError);
      IF KIDError OR (GiroKID = '') THEN
        EXIT(EInvoiceExportHeader."No.");
      EXIT(GiroKID);
    END;

    LOCAL PROCEDURE "**COD10610 NAVNO10.00.00.14199"@1000000000();
    BEGIN
    END;

    PROCEDURE DateToText@1080039(VarDate@1000 : Date) : Text[20];
    BEGIN
      IF VarDate = 0D THEN
        EXIT('1753-01-01');
      EXIT(FORMAT(VarDate,0,'<Year4>-<Month,2>-<Day,2>'));
    END;

    PROCEDURE BooleanToText@1080034(VarBoolean@1000 : Boolean) : Text[5];
    BEGIN
      CASE VarBoolean OF
        TRUE:
          EXIT('true');
        FALSE:
          EXIT('false');
      END;
    END;

    PROCEDURE DecimalToText@1080036(VarDecimal@1000 : Decimal) : Text[30];
    BEGIN
      EXIT(FORMAT(VarDecimal,0,'<Precision,2:2><Sign><Integer><Decimals><Comma,.>'));
    END;

    PROCEDURE IntegerToText@1080109(VarInteger@1000 : Integer) : Text[250];
    BEGIN
      EXIT(FORMAT(VarInteger,0,'<Sign><Integer,2><Filler Character,0>'));
    END;

    PROCEDURE IsValidEANNo@1080110(EAN@1000 : Code[13];AllowEmpty@1080000 : Boolean) : Boolean;
    BEGIN
      CASE TRUE OF
        EAN = '':
          EXIT(AllowEmpty);
        STRLEN(EAN) <> 13:
          EXIT(FALSE);
        FORMAT(STRCHECKSUM(COPYSTR(EAN,1,12),'131313131313')) <> FORMAT(EAN[13]):
          EXIT(FALSE);
        ELSE
          EXIT(TRUE);
      END;
    END;

    PROCEDURE CheckCurrencyCode@1080111(CurrencyCode@1000 : Code[10]) : Boolean;
    BEGIN
      EXIT(STRLEN(CurrencyCode) = 3);
    END;

    PROCEDURE DecimalToPromille@1080112(Decimal@1080000 : Decimal) : Text[4];
    BEGIN
      EXIT(FORMAT(ABS(Decimal * 10),0,'<Integer,4><Filler Character,0>'));
    END;

    PROCEDURE GetEInvoiceCountryRegionCode@1080113(CountryRegionCode@1080000 : Code[10]) : Code[10];
    VAR
      CountryRegion@1080001 : Record 9;
    BEGIN
      IF CountryRegionCode = '' THEN BEGIN
        ReadCompanyInfo;
        CompanyInfo.TESTFIELD("Country/Region Code");
        CountryRegionCode := CompanyInfo."Country/Region Code";
      END;

      CountryRegion.GET(CountryRegionCode);
      IF STRLEN(CountryRegion.Code) <> 2 THEN
        CountryRegion.FIELDERROR(Code,STRSUBSTNO(WrongLengthErr,2));
      EXIT(CountryRegion.Code);
    END;

    PROCEDURE GetEInvoiceCurrencyCode@1080114(CurrencyCode@1080000 : Code[10]) : Code[10];
    VAR
      Currency@1080001 : Record 4;
    BEGIN
      IF CurrencyCode = '' THEN BEGIN
        ReadGLSetup;
        GLSetup.TESTFIELD("LCY Code");
        CurrencyCode := GLSetup."LCY Code";
      END;

      IF NOT Currency.GET(CurrencyCode) THEN BEGIN
        IF STRLEN(CurrencyCode) <> 3 THEN
          GLSetup.FIELDERROR("LCY Code",STRSUBSTNO(WrongLengthErr,3));
        EXIT(CurrencyCode);
      END;

      IF STRLEN(Currency.Code) <> 3 THEN
        Currency.FIELDERROR(Code,STRSUBSTNO(WrongLengthErr,3));
      EXIT(Currency.Code);
    END;

    PROCEDURE ReadCompanyInfo@1080115();
    BEGIN
      IF NOT CompanyInfoRead THEN BEGIN
        CompanyInfo.GET;
        CompanyInfoRead := TRUE;
      END;
    END;

    PROCEDURE ReadGLSetup@1080016();
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
    END;

    PROCEDURE GetBBANNo@1080100(BBANNo@1060000 : Text[50]) : Text[50];
    BEGIN
      IF BBANNo = '' THEN
        EXIT('');

      BBANNo := DELCHR(BBANNo,'=',DELCHR(BBANNo,'=','0123456789'));

      EXIT(BBANNo);
    END;

    PROCEDURE GetVATRegNo@1080020(VATRegNo@1060000 : Text[20];PartyTaxScheme@1080000 : Boolean) : Text[30];
    BEGIN
      IF VATRegNo = '' THEN
        EXIT('');

      VATRegNo := DELCHR(VATRegNo,'=',DELCHR(VATRegNo,'=','0123456789'));
      IF PartyTaxScheme THEN
        VATRegNo += 'MVA';

      EXIT(VATRegNo);
    END;

    BEGIN
    END.
  }
}

