OBJECT Page 11126909 DSP Assign Comp Serv Text SP
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[DEU=DSP Zuordnung Servicetext SP;
               ENU=DSP Assignment Service Text SP;
               NLD=DSP Assignment Service Text SP];
    SourceTable=Table11012882;
    PageType=ListPart;
    SourceTableTemporary=Yes;
    OnAfterGetRecord=BEGIN
                       StyleTxt := SetStyle;
                     END;

  }
  CONTROLS
  {
    { 1100525000;;Container;
                ContainerType=ContentArea }

    { 1100525001;1;Group  ;
                GroupType=Repeater }

    { 1100528804;2;Field  ;
                CaptionML=[DEU=Zeilenart;
                           ENU=Line Type;
                           NLD=Regelsoort;
                           NOR=Radtype;
                           SVE=Radtyp];
                SourceExpr=LineType;
                StyleExpr=StyleTxt }

    { 1100528802;2;Field  ;
                SourceExpr=Comment;
                StyleExpr=StyleTxt }

  }
  CODE
  {
    VAR
      DSPManagement@1100528800 : Codeunit 11126714;
      GenericTempTable@1100528801 : TEMPORARY Record 11020579;
      StyleTxt@1100528802 : Text;
      SERVICETEXTTXT@1100528803 : TextConst 'ENU=SERVICETEXT';
      CURRENTTXT@1100528302 : TextConst 'DEU=Aktuell;ENU=Current;NLD=Huidige';
      PREVIOUSTXT@1100528301 : TextConst 'DEU=ZurÅck;ENU=Previous;NLD=Voorgaande';
      REVISEDTXT@1100528300 : TextConst 'DEU=öberarbeitete;ENU=Revised;NLD=Herziene';

    PROCEDURE InitializeRec@1100528803(EntryNo@1100528800 : BigInteger);
    VAR
      DSPAssignment@1100528806 : Record 11126740;
      ServiceOrder@1100528807 : Record 11012823;
      ServiceText@1100528803 : Record 11012882;
      OPreviousDSPAssignment@1100528805 : Record 11126740;
      TEMPServiceText@1100528300 : TEMPORARY Record 11012882;
      TEMPPreviousServiceText@1100528804 : TEMPORARY Record 11012882;
      TEMPRevisedServiceText@1100528802 : TEMPORARY Record 11012882;
      LineNo@1100528801 : Integer;
    BEGIN
      DSPAssignment.GET(EntryNo);
      DSPManagement.GetPreviousProcessedDspAssignment(EntryNo, OPreviousDSPAssignment);
      LineNo := 10000;

      IF ServiceOrder.GET(DSPAssignment."Service Order No.") THEN BEGIN
        ServiceText.SETRANGE("Table Name", ServiceText."Table Name"::"Service Order");
        ServiceText.SETRANGE("No.", DSPAssignment."Service Order No.");
        ServiceText.SETRANGE("Table Field", 90);
        IF ServiceText.FINDSET THEN
          REPEAT
            COPY(ServiceText);
            "Line No." := LineNo;
            INSERT;
            GenericTempTable."Key Code1" := SERVICETEXTTXT;
            GenericTempTable."Key Code2" := CURRENTTXT;
            GenericTempTable."Key Code3" := FORMAT("Line No.");
            GenericTempTable.Int1 := "Line No.";
            GenericTempTable.INSERT;
            LineNo += 10000;
          UNTIL ServiceText.NEXT = 0;
      END;

      IF (OPreviousDSPAssignment."Entry No." <> 0) THEN BEGIN
        DSPManagement.CreateTEMPServiceText(OPreviousDSPAssignment."Entry No.", TEMPPreviousServiceText);

        IF (TEMPPreviousServiceText.FINDSET) THEN BEGIN
          REPEAT
            COPY(TEMPPreviousServiceText);
            "No." += 'P';
            "Line No." := LineNo;
            INSERT;
            GenericTempTable."Key Code1" := SERVICETEXTTXT;
            GenericTempTable."Key Code2" := PREVIOUSTXT;
            GenericTempTable."Key Code3" := FORMAT("Line No.");
            GenericTempTable.Int1 := "Line No.";
            GenericTempTable.INSERT;
            LineNo += 10000;
          UNTIL (TEMPPreviousServiceText.NEXT = 0);
        END;
      END;

      IF (DSPAssignment."No. Of Adjustments" <> 0) THEN BEGIN
        DSPManagement.CreateTEMPServiceText(EntryNo, TEMPRevisedServiceText);

        IF (TEMPRevisedServiceText.FINDSET) THEN BEGIN
          REPEAT
            COPY(TEMPRevisedServiceText);
            "No." += 'R';
            "Line No." := LineNo;
            INSERT;
            GenericTempTable."Key Code1" := SERVICETEXTTXT;
            GenericTempTable."Key Code2" := REVISEDTXT;
            GenericTempTable."Key Code3" := FORMAT(Rec."Line No.");
            GenericTempTable.Int1 := "Line No.";
            GenericTempTable.INSERT;
            LineNo += 10000;
          UNTIL (TEMPRevisedServiceText.NEXT = 0);
        END;
      END;
    END;

    LOCAL PROCEDURE RevisedDSPOrderLine@1100528800() : Boolean;
    BEGIN
      GenericTempTable.SETRANGE("Key Code1", SERVICETEXTTXT);
      GenericTempTable.SETRANGE("Key Code2", REVISEDTXT);
      GenericTempTable.SETRANGE(Int1, "Line No.");
      IF GenericTempTable.FINDFIRST THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE PreviousDSPOrderLine@1100528807() : Boolean;
    BEGIN
      GenericTempTable.SETRANGE("Key Code1", SERVICETEXTTXT);
      GenericTempTable.SETRANGE("Key Code2", PREVIOUSTXT);
      GenericTempTable.SETRANGE(Int1, "Line No.");
      IF GenericTempTable.FINDFIRST THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE ServiceOrderLine@1100528808() : Boolean;
    BEGIN
      GenericTempTable.SETRANGE("Key Code1", SERVICETEXTTXT);
      GenericTempTable.SETRANGE("Key Code2", CURRENTTXT);
      GenericTempTable.SETRANGE(Int1, "Line No.");
      IF GenericTempTable.FINDFIRST THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE LineType@1100528805() : Text;
    BEGIN
      IF RevisedDSPOrderLine THEN EXIT(REVISEDTXT);
      IF PreviousDSPOrderLine THEN EXIT(PREVIOUSTXT);
      EXIT(CURRENTTXT);
    END;

    LOCAL PROCEDURE SetStyle@1100528806() : Text;
    BEGIN
      IF PreviousDSPOrderLine THEN EXIT('Strong');
      IF RevisedDSPOrderLine THEN EXIT('Favorable');
      EXIT('');
    END;

    BEGIN
    END.
  }
}

