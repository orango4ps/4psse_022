OBJECT Page 346 Item Picture
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.03,4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Item Picture;
               NOR=Varebilde;
               SVE=Artikelbild];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table27;
    PageType=CardPart;
    OnOpenPage=BEGIN
                 CameraAvailable := CameraProvider.IsAvailable;
                 IF CameraAvailable THEN
                   CameraProvider := CameraProvider.Create;

                 //**4PS Generated Code. Do Not Change.sn01
                 DPA_IsHardFilter := DPA_SetFilters(CurrPage.OBJECTID(FALSE));
                 //**4PS Generated Code.en01
               END;

    OnAfterGetCurrRecord=BEGIN
                           SetEditableOnPictureActions;
                         END;

    ActionList=ACTIONS
    {
      { 2       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 3       ;1   ;Action    ;
                      Name=TakePicture;
                      CaptionML=[ENU=Take;
                                 NOR=Ta;
                                 SVE=Ta bild];
                      ToolTipML=[ENU=Activate the camera on the device.;
                                 NOR=Aktiver kameraet p† enheten.;
                                 SVE=Aktivera enhetens kamera.];
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=CameraAvailable AND (HideActions = FALSE);
                      Enabled=IsEditable;
                      PromotedIsBig=Yes;
                      Image=Camera;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 TakeNewPicture;
                               END;
                                }
      { 4       ;1   ;Action    ;
                      Name=ImportPicture;
                      CaptionML=[ENU=Import;
                                 NOR=Importer;
                                 SVE=Importera];
                      ToolTipML=[ENU=Import a picture file.;
                                 NOR=Importer en bildefil.;
                                 SVE=Importera en bildfil.];
                      ApplicationArea=#All;
                      Visible=HideActions = FALSE;
                      Enabled=IsEditable;
                      Image=Import;
                      OnAction=BEGIN
                                 ImportFromDevice;
                               END;
                                }
      { 6       ;1   ;Action    ;
                      Name=ExportFile;
                      CaptionML=[ENU=Export;
                                 NOR=Eksporter;
                                 SVE=Exportera];
                      ToolTipML=[ENU=Export the picture to a file.;
                                 NOR=Eksporter bildet til en fil.;
                                 SVE=Exportera bilden till en fil.];
                      ApplicationArea=#All;
                      Visible=HideActions = FALSE;
                      Enabled=DeleteExportEnabled;
                      Image=Export;
                      OnAction=VAR
                                 DummyPictureEntity@1000 : Record 5468;
                                 FileManagement@1001 : Codeunit 419;
                                 ToFile@1003 : Text;
                                 ExportPath@1005 : Text;
                               BEGIN
                                 TESTFIELD("No.");
                                 TESTFIELD(Description);

                                 ToFile := DummyPictureEntity.GetDefaultMediaDescription(Rec);
                                 ExportPath := TEMPORARYPATH + "No." + FORMAT(Picture.MEDIAID);
                                 Picture.EXPORTFILE(ExportPath + '.' + DummyPictureEntity.GetDefaultExtension);

                                 FileManagement.ExportImage(ExportPath,ToFile);
                               END;
                                }
      { 7       ;1   ;Action    ;
                      Name=DeletePicture;
                      CaptionML=[ENU=Delete;
                                 NOR=Slett;
                                 SVE=Ta bort];
                      ToolTipML=[ENU=Delete the record.;
                                 NOR=Slett posten.;
                                 SVE=Ta bort transaktionen.];
                      ApplicationArea=#All;
                      Visible=HideActions = FALSE;
                      Enabled=DeleteExportEnabled AND IsEditable;
                      Image=Delete;
                      OnAction=BEGIN
                                 DeleteItemPicture;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Field     ;
                ToolTipML=[ENU=Specifies the picture that has been inserted for the item.;
                           NOR=Angir bildet som er satt inn for varen.;
                           SVE=Anger bilden som har infogats f”r artikeln.];
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=Picture;
                ShowCaption=No }

  }
  CODE
  {
    VAR
      CameraProvider@1000 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Capabilities.CameraProvider" WITHEVENTS RUNONCLIENT;
      CameraAvailable@1002 : Boolean;
      OverrideImageQst@1007 : TextConst 'ENU=The existing picture will be replaced. Do you want to continue?;NOR=Det eksisterende bildet vil bli erstattet. Vil du fortsette?;SVE=Den befintliga bilden ers„tts. Vill du forts„tta?';
      DeleteImageQst@1003 : TextConst 'ENU=Are you sure you want to delete the picture?;NOR=Er du sikker p† at du vil slette bildet?;SVE=Vill du ta bort bilden?';
      SelectPictureTxt@1001 : TextConst 'ENU=Select a picture to upload;NOR=Velg et bilde for opplasting;SVE=V„lj en bild att ladda upp';
      DeleteExportEnabled@1005 : Boolean;
      HideActions@1008 : Boolean;
      MustSpecifyDescriptionErr@1004 : TextConst 'ENU=You must add a description to the item before you can import a picture.;NOR=Du m† legge til en beskrivelse for varen f›r du kan importere et bilde.;SVE=Du m†ste l„gga till en beskrivning till artikeln innan du kan importera en bild.';
      DPA_IsHardFilter@1100000999 : Boolean;
      CentralDataManagement@1100528201 : Codeunit 11012010;
      IsEditable@1100528200 : Boolean;

    [External]
    PROCEDURE TakeNewPicture@2();
    VAR
      CameraOptions@1000 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Capabilities.CameraOptions";
    BEGIN
      FIND;
      TESTFIELD("No.");
      TESTFIELD(Description);

      IF NOT CameraAvailable THEN
        EXIT;

      CameraOptions := CameraOptions.CameraOptions;
      CameraOptions.Quality := 50;
      CameraProvider.RequestPictureAsync(CameraOptions);
    END;

    [Internal]
    PROCEDURE ImportFromDevice@4();
    VAR
      FileManagement@1002 : Codeunit 419;
      FileName@1001 : Text;
      ClientFileName@1000 : Text;
    BEGIN
      FIND;
      TESTFIELD("No.");
      IF Description = '' THEN
        ERROR(MustSpecifyDescriptionErr);

      IF Picture.COUNT > 0 THEN
        IF NOT CONFIRM(OverrideImageQst) THEN
          ERROR('');

      ClientFileName := '';
      FileName := FileManagement.UploadFile(SelectPictureTxt,ClientFileName);
      IF FileName = '' THEN
        ERROR('');

      CLEAR(Picture);
      Picture.IMPORTFILE(FileName,ClientFileName);
      MODIFY(TRUE);

      IF FileManagement.DeleteServerFile(FileName) THEN;
    END;

    LOCAL PROCEDURE SetEditableOnPictureActions@1();
    BEGIN
      DeleteExportEnabled := Picture.COUNT <> 0;
      //**4PS.n
      IsEditable := CentralDataManagement.NAVItemFormEditable;
      IF NOT IsEditable THEN BEGIN
        IsEditable := CentralDataManagement.FieldInputAllowed(DATABASE::Item, FIELDNO(Picture));
      END;
      //**4PS.en
    END;

    [External]
    PROCEDURE IsCameraAvailable@3() : Boolean;
    BEGIN
      EXIT(CameraProvider.IsAvailable);
    END;

    [External]
    PROCEDURE SetHideActions@1010();
    BEGIN
      HideActions := TRUE;
    END;

    [External]
    PROCEDURE DeleteItemPicture@5();
    BEGIN
      TESTFIELD("No.");

      IF NOT CONFIRM(DeleteImageQst) THEN
        EXIT;

      CLEAR(Picture);
      MODIFY(TRUE);
    END;

    EVENT CameraProvider@1000::PictureAvailable@10(PictureName@1001 : Text;PictureFilePath@1000 : Text);
    VAR
      File@1003 : File;
      Instream@1004 : InStream;
    BEGIN
      IF (PictureName = '') OR (PictureFilePath = '') THEN
        EXIT;

      IF Picture.COUNT > 0 THEN
        IF NOT CONFIRM(OverrideImageQst) THEN BEGIN
          IF ERASE(PictureFilePath) THEN;
          EXIT;
        END;

      File.OPEN(PictureFilePath);
      File.CREATEINSTREAM(Instream);

      CLEAR(Picture);
      Picture.IMPORTSTREAM(Instream,PictureName);
      IF NOT MODIFY(TRUE) THEN
        INSERT(TRUE);

      File.CLOSE;
      IF ERASE(PictureFilePath) THEN;
    END;

    BEGIN
    END.
  }
}

