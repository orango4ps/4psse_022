OBJECT Codeunit 1545 Workflow Webhook Notification
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    EventSubscriberInstance=Manual;
    Permissions=TableData 468=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      RetryCounter@1000 : Integer;
      WaitTime@1001 : Integer;
      IsInitialized@1002 : Boolean;
      NotInitializedErr@1003 : TextConst 'ENU=The code unit is not initialized.;NOR=Kodeenheten er ikke initialisert.';
      ArgumentNullErr@1004 : TextConst '@@@="%1=Argument";ENU=%1 cannot be null.;NOR=%1 kan ikke v‘re null.';
      ArgumentEmptyErr@1005 : TextConst '@@@="%1=Argument";ENU=%1 cannot be empty.;NOR=%1 kan ikke v‘re tom.;SVE=%1 m†ste anges.';
      DataIDTxt@1006 : TextConst 'ENU=DataID;NOR=DataID';
      WorkflowStepInstanceIDTxt@1007 : TextConst 'ENU=WorkflowStepInstanceID;NOR=WorkflowStepInstanceID';
      NotificationUrlTxt@1008 : TextConst 'ENU=NotificationUrl;NOR=NotificationUrl';

    [External]
    PROCEDURE Initialize@39(RetryCount@1000 : Integer;WaitTimeInMs@1001 : Integer);
    BEGIN
      RetryCounter := RetryCount;
      WaitTime := WaitTimeInMs;
      IsInitialized := TRUE;
    END;

    [Internal]
    PROCEDURE SendNotification@1(DataID@1000 : GUID;WorkflowStepInstanceID@1006 : GUID;NotificationUrl@1001 : Text;RequestedByUserEmail@1002 : Text);
    VAR
      WorkflowWebhookNotificationTable@1007 : Record 468;
    BEGIN
      IF IsInitialized = FALSE THEN
        ERROR(NotInitializedErr);

      IF ISNULLGUID(DataID) THEN
        ERROR(ArgumentNullErr,DataIDTxt);

      IF ISNULLGUID(WorkflowStepInstanceID) THEN
        ERROR(ArgumentNullErr,WorkflowStepInstanceIDTxt);

      IF NotificationUrl = '' THEN
        ERROR(ArgumentEmptyErr,NotificationUrlTxt);

      GetNotificationRecord(WorkflowWebhookNotificationTable,WorkflowStepInstanceID);
      Notify(DataID,WorkflowStepInstanceID,NotificationUrl,RequestedByUserEmail,WorkflowWebhookNotificationTable);
    END;

    [External]
    PROCEDURE StartNotification@11(WorkflowStepInstanceID@1000 : GUID);
    VAR
      WorkflowWebhookNotificationTable@1001 : Record 468;
    BEGIN
      GetNotificationRecord(WorkflowWebhookNotificationTable,WorkflowStepInstanceID);
      WorkflowWebhookNotificationTable.Status := WorkflowWebhookNotificationTable.Status::Pending;
      WorkflowWebhookNotificationTable.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE Notify@13(DataID@1002 : GUID;WorkflowStepInstanceID@1001 : GUID;NotificationUrl@1000 : Text;RequestedByUserEmail@1011 : Text;VAR WorkflowWebhookNotification@1007 : Record 468);
    VAR
      DotNetExceptionHandler@1005 : Codeunit 1291;
      Exception@1006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Exception";
      HttpWebResponse@1004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      WebException@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebException";
      Retry@1008 : Boolean;
      ErrorMessage@1009 : Text;
      ErrorDetails@1010 : Text;
    BEGIN
      RetryCounter := RetryCounter - 1;
      IF OnPostNotificationRequest(DataID,WorkflowStepInstanceID,NotificationUrl,RequestedByUserEmail) THEN BEGIN
        WorkflowWebhookNotification.Status := WorkflowWebhookNotification.Status::Sent;
        WorkflowWebhookNotification.SetErrorMessage('');
        WorkflowWebhookNotification.SetErrorDetails('');
        WorkflowWebhookNotification.MODIFY(TRUE);
        COMMIT;
      END ELSE BEGIN
        Exception := GETLASTERROROBJECT;

        ErrorMessage := Exception.Message;
        ErrorDetails := Exception.StackTrace;

        IF RetryCounter > 0 THEN BEGIN
          Retry := TRUE;
          DotNetExceptionHandler.Collect;
          IF DotNetExceptionHandler.CastToType(WebException,GETDOTNETTYPE(WebException)) THEN BEGIN
            HttpWebResponse := WebException.Response;
            IF NOT ISNULL(HttpWebResponse) THEN
              IF NOT ISNULL(HttpWebResponse.StatusCode) THEN BEGIN
                ErrorDetails := STRSUBSTNO('%1 - StatusCode: %2 - StatusDescription: %3',ErrorDetails,
                    FORMAT(HttpWebResponse.StatusCode),HttpWebResponse.StatusDescription);
                Retry := ShouldRetry(HttpWebResponse.StatusCode,HttpWebResponse.StatusDescription);
              END;
          END;
        END;

        IF Retry THEN BEGIN
          SLEEP(WaitTime);
          Notify(DataID,WorkflowStepInstanceID,NotificationUrl,RequestedByUserEmail,WorkflowWebhookNotification);
        END ELSE BEGIN
          WorkflowWebhookNotification.SetErrorMessage(ErrorMessage);
          WorkflowWebhookNotification.SetErrorDetails(ErrorDetails);
          WorkflowWebhookNotification.Status := WorkflowWebhookNotification.Status::Failed;
          WorkflowWebhookNotification.MODIFY(TRUE);
          COMMIT;
        END;
      END;
    END;

    [TryFunction]
    [Integration(TRUE,TRUE)]
    PROCEDURE OnPostNotificationRequest@23(DataID@1002 : GUID;WorkflowStepInstanceID@1001 : GUID;NotificationUrl@1000 : Text;RequestedByUserEmail@1003 : Text);
    BEGIN
    END;

    [EventSubscriber(Codeunit,1545,OnPostNotificationRequest)]
    [TryFunction]
    LOCAL PROCEDURE PostNotificationRequest@2(VAR Sender@1000 : Codeunit 1545;DataID@1001 : GUID;WorkflowStepInstanceID@1002 : GUID;NotificationUrl@1003 : Text;RequestedByUserEmail@1004 : Text);
    BEGIN
      PostHttpRequest(DataID,WorkflowStepInstanceID,NotificationUrl,RequestedByUserEmail);
    END;

    [TryFunction]
    LOCAL PROCEDURE PostHttpRequest@16(DataID@1002 : GUID;WorkflowStepInstanceID@1001 : GUID;NotificationUrl@1000 : Text;RequestedByUserEmail@1009 : Text);
    VAR
      TypeHelper@1003 : Codeunit 10;
      HttpWebRequest@1007 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpWebResponse@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      RequestStr@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      StreamWriter@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter";
      Encoding@1008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      HttpWebRequest := HttpWebRequest.Create(NotificationUrl);
      HttpWebRequest.Method := 'POST';
      HttpWebRequest.ContentType('application/json');

      RequestStr := HttpWebRequest.GetRequestStream;
      StreamWriter := StreamWriter.StreamWriter(RequestStr,Encoding.ASCII);
      StreamWriter.Write('{"Row Id":"' + TypeHelper.GetGuidAsString(DataID) +
        '","Workflow Step Id":"' + TypeHelper.GetGuidAsString(WorkflowStepInstanceID) +
        '","Requested By User Email":"' + RequestedByUserEmail + '"}');
      StreamWriter.Flush;
      StreamWriter.Close;
      StreamWriter.Dispose;

      HttpWebResponse := HttpWebRequest.GetResponse;
      HttpWebResponse.Close; // close connection
      HttpWebResponse.Dispose; // cleanup of IDisposable
    END;

    LOCAL PROCEDURE FindNotificationRecord@3(VAR WorkflowWebhookNotificationTable@1002 : Record 468;WorkflowStepInstanceID@1000 : GUID) : Boolean;
    BEGIN
      // Fetch current notification record
      WorkflowWebhookNotificationTable.SETRANGE("Workflow Step Instance ID",WorkflowStepInstanceID);
      EXIT(WorkflowWebhookNotificationTable.FINDFIRST);
    END;

    LOCAL PROCEDURE GetNotificationRecord@4(VAR WorkflowWebhookNotificationTable@1000 : Record 468;WorkflowStepInstanceID@1001 : GUID);
    BEGIN
      IF NOT FindNotificationRecord(WorkflowWebhookNotificationTable,WorkflowStepInstanceID) THEN BEGIN
        // Create Notification Record
        WorkflowWebhookNotificationTable.INIT;
        WorkflowWebhookNotificationTable."Workflow Step Instance ID" := WorkflowStepInstanceID;
        WorkflowWebhookNotificationTable.Status := WorkflowWebhookNotificationTable.Status::Pending;
        WorkflowWebhookNotificationTable.INSERT(TRUE);
        FindNotificationRecord(WorkflowWebhookNotificationTable,WorkflowStepInstanceID);
      END;
    END;

    [External]
    PROCEDURE GetCurrentRetryCounter@30() : Integer;
    BEGIN
      EXIT(RetryCounter);
    END;

    [External]
    PROCEDURE ShouldRetry@55(StatusCode@1000 : Integer;StatusDescription@1001 : Text) : Boolean;
    BEGIN
      IF StatusCode = 404 THEN
        IF (StatusDescription = 'WorkflowNotFound') OR (StatusDescription = 'WorkflowTriggerVersionNotFound') THEN
          EXIT(FALSE);

      IF (StatusCode = 400) AND (StatusDescription = 'WorkflowTriggerIsNotEnabled') THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    BEGIN
    {
      // Intended to be called from a Task (background session)
    }
    END.
  }
}

