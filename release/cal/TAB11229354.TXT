OBJECT Table 11229354 CFW Connector Mapping
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnDelete=VAR
               CFWConnectorMappingValue@1100528300 : Record 11229355;
               CFWConnectorMappingLink@1100528301 : Record 11229357;
             BEGIN
               CFWConnectorMappingValue.SETRANGE("Service Code", "Service Code");
               CFWConnectorMappingValue.SETRANGE("Connector Code", "Connector Code");
               CFWConnectorMappingValue.SETRANGE("Element Name", "Element Name");
               CFWConnectorMappingValue.DELETEALL(TRUE);

               CFWConnectorMappingLink.SETRANGE("Service Code", "Service Code");
               CFWConnectorMappingLink.SETRANGE("Connector Code", "Connector Code");
               CFWConnectorMappingLink.SETRANGE("Element Name", "Element Name");
               CFWConnectorMappingLink.DELETEALL(TRUE);
             END;

    CaptionML=ENU=CFW Connector Mapping;
    LookupPageID=Page11130252;
    DrillDownPageID=Page11130252;
  }
  FIELDS
  {
    { 5   ;   ;Service Code        ;Code20        ;TableRelation="CFW Connector"."Service Code";
                                                   CaptionML=ENU=Service Code }
    { 10  ;   ;Connector Code      ;Code20        ;TableRelation="CFW Connector".Code WHERE (Service Code=FIELD(Service Code));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Table No.", "Table Name");
                                                              END;

                                                   CaptionML=ENU=Connector Code;
                                                   NotBlank=Yes }
    { 11  ;   ;Table No.           ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("CFW Connector"."Table No." WHERE (Service Code=FIELD(Service Code),
                                                                                                         Code=FIELD(Connector Code)));
                                                   CaptionML=[ENU=Table No.;
                                                              NOR=Tabellnr.;
                                                              SVE=Tabellnr];
                                                   Editable=No }
    { 12  ;   ;Table Name          ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Object.Name WHERE (Type=CONST(Table),
                                                                                         ID=FIELD(Table No.)));
                                                   CaptionML=[ENU=Table Name;
                                                              NOR=Tabellnavn;
                                                              SVE=Tabellnamn];
                                                   Editable=No }
    { 20  ;   ;Element Name        ;Text50        ;CaptionML=[ENU=Element Name;
                                                              NOR=Elementnavn;
                                                              SVE=Elementnamn] }
    { 30  ;   ;Field No.           ;Integer       ;OnValidate=BEGIN
                                                                SetOptionString;
                                                                VALIDATE("Primary Key Index",SetPrimaryKeyFromFieldNo("Field No."));
                                                              END;

                                                   OnLookup=VAR
                                                              FieldTableManagement@1100528300 : Codeunit 11012372;
                                                            BEGIN
                                                              "Field No." := FieldTableManagement.LookupFieldNo("Table No.", "Field No.");
                                                              SetOptionString;
                                                              VALIDATE("Primary Key Index",SetPrimaryKeyFromFieldNo("Field No."));
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Field No.;
                                                              NOR=Feltnr.;
                                                              SVE=FÑltnr] }
    { 31  ;   ;Field Name          ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field.FieldName WHERE (TableNo=FIELD(Table No.),
                                                                                             No.=FIELD(Field No.)));
                                                   CaptionML=[ENU=Field Name;
                                                              NOR=Feltnavn;
                                                              SVE=FÑltnamn];
                                                   Editable=No }
    { 32  ;   ;Extra Info          ;Text250       ;FieldClass=Normal;
                                                   CaptionML=ENU=Extra Info;
                                                   Editable=No }
    { 100 ;   ;Formatting Key Index;Integer       ;CaptionML=ENU=Formatting Key Index }
    { 110 ;   ;Data Type           ;Text50        ;CaptionML=[ENU=Data Type;
                                                              NOR=Datatype;
                                                              SVE=Datatyp] }
    { 120 ;   ;Action OLD          ;Option        ;OptionCaptionML=ENU=" ,Substitute,Transform,Company,Autoline,Fixed Value,No. Series,Extra Fields,Sum,Companies,Subconnector,On Processed,External Key,Run Connector";
                                                   OptionString=None,Substitute,Transform,Company,Autoline,FixedValue,NoSeries,ExtraFields,Sum,Companies,Subconnector,OnProcessed,ExternalKey,RunConnector;
                                                   Editable=No }
    { 130 ;   ;Primary Key Index   ;Integer       ;CaptionML=ENU=Primary Key Index }
    { 140 ;   ;Action Code         ;Code20        ;TableRelation="CFW Actions".Code;
                                                   OnValidate=VAR
                                                                CFWConnectorManagement@1100528300 : Codeunit 11229291;
                                                              BEGIN
                                                                "Target Connector Code" := '';
                                                                IF ("Action Code" <> CFWConnectorManagement.GetCompaniesTxt)  AND
                                                                   ("Action Code" <> CFWConnectorManagement.GetCompanyTxt) AND
                                                                   ("Action Code" <> CFWConnectorManagement.GetTransformTxt)
                                                                THEN
                                                                  "Translation Set Code" := '';
                                                              END;

                                                   CaptionML=[ENU=Action Code;
                                                              SVE=ètgÑrdskod] }
    { 150 ;   ;RegEx Condition     ;Text250       ;CaptionML=ENU=RegEx Condition }
    { 160 ;   ;Validate Field      ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Validate Field;
                                                              NOR=Valider Felt;
                                                              SVE=Verifiera fÑlt] }
    { 170 ;   ;Only Source Company ;Boolean       ;CaptionML=ENU=Only Source Company }
    { 180 ;   ;Translation Set Code;Code20        ;TableRelation=IF (Action Code=FILTER(TRANSFORM|COMPANY|COMPANIES)) "CFW Translation Set".Code;
                                                   CaptionML=ENU=Translation Set Code }
    { 190 ;   ;Target Connector Code;Code20       ;TableRelation=IF (Action Code=CONST(SUBCONNECTOR)) "CFW Connector".Code WHERE (Service Code=FIELD(Service Code),
                                                                                                                                  Type=CONST(SubConnector))
                                                                                                                                  ELSE IF (Action Code=CONST(ONPROCESSED)) "CFW Connector".Code WHERE (Service Code=FIELD(Service Code),
                                                                                                                                                                                                       Type=FILTER(<>SubConnector))
                                                                                                                                                                                                       ELSE IF (Action Code=CONST(RUNCONNECTOR)) "CFW Connector".Code WHERE (Service Code=FIELD(Service Code),
                                                                                                                                                                                                                                                                             Type=FILTER(<>SubConnector));
                                                   OnValidate=BEGIN
                                                                CheckTargetConnector;
                                                                UpdateConnectorMappingLink;
                                                              END;

                                                   CaptionML=ENU=Target Connector Code }
    { 200 ;   ;Culture             ;Text5         ;CaptionML=ENU=Culture;
                                                   Description=en-US,nl-NL }
    { 220 ;   ;Formatting String   ;Text250       ;TableRelation=IF (Action Code=CONST(COMPANY)) Company.Name;
                                                   CaptionML=ENU=Formatting String }
    { 230 ;   ;Mapping Sequence    ;Integer       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Mapping Sequence }
    { 600 ;   ;No. Of Mapping Values;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("CFW Connector Mapping Value" WHERE (Service Code=FIELD(Service Code),
                                                                                                          Connector Code=FIELD(Connector Code),
                                                                                                          Element Name=FIELD(Element Name),
                                                                                                          Field No.=FIELD(Field No.)));
                                                   CaptionML=ENU=No. Of Mapping Values;
                                                   Editable=No }
    { 610 ;   ;No. Of Mapping Links;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("CFW Connector Mapping Link" WHERE (Service Code=FIELD(Service Code),
                                                                                                         Connector Code=FIELD(Connector Code),
                                                                                                         Element Name=FIELD(Element Name)));
                                                   CaptionML=ENU=No. Of Mapping Links;
                                                   Editable=No }
    { 620 ;   ;No Modify Trigger   ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=No Modify Trigger }
  }
  KEYS
  {
    {    ;Service Code,Connector Code,Element Name,Field No.;
                                                   Clustered=Yes }
    {    ;Primary Key Index                        }
    {    ;Mapping Sequence                         }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100528300 : TextConst 'ENU=Cannot find Company Name %1.';
      Text001@1100528301 : TextConst 'ENU=Value Translation for %1 at %2/%3/%4/%5 results in more than 1 Value.';
      Text003@1100528304 : TextConst 'ENU=is not valid. (%1 is wrong)';
      Text004@1100528303 : TextConst 'ENU=Unhandled Connector Action: %1.';
      Text005@1100528305 : TextConst 'ENU=No Field Type found for %1.';
      OptionTextTooLong@1100528306 : TextConst 'ENU=Option String is too long. Lookup values manually';
      Text002@1100528302 : TextConst 'ENU=Cannot find Field %1.';
      Text006@1100528307 : TextConst 'ENU=Cannot find Company Name (%1) for %2/%3.';

    [External]
    PROCEDURE AllowPutField@1100528310(XmlDoc@1100528300 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";TargetCompany@1100528301 : Text) : Boolean;
    BEGIN
      IF (NOT "Only Source Company") THEN
        EXIT(TRUE);
      IF (GetCompanyFromDocument("Service Code", "Connector Code", XmlDoc) = TargetCompany) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE CreateDefaultMapping@1100528306();
    VAR
      CFWConnector@1100528300 : Record 11229353;
      CFWConnectorMapping@1100528301 : Record 11229354;
      Field@1100528302 : Record 2000000041;
      CFWConnectorManagement@1100528303 : Codeunit 11229291;
      ElementIndex@1100528304 : Text;
    BEGIN
      CFWConnector.GET("Service Code", "Connector Code");
      CFWConnector.TESTFIELD("Table No.");
      Field.SETRANGE(TableNo, CFWConnector."Table No.");
      IF (NOT Field.FINDSET) THEN
        EXIT;
      ElementIndex := '%01';
      REPEAT
        CFWConnectorMapping.INIT;
        CFWConnectorMapping."Service Code" := "Service Code";
        CFWConnectorMapping."Connector Code" := "Connector Code";
        CFWConnectorMapping."Element Name" := CFWConnectorManagement.ConvertTextToXmlTagName(Field.FieldName);
        CFWConnectorMapping."Field No." := Field."No.";
        CFWConnectorMapping."Primary Key Index" := SetPrimaryKeyIndex(Field);
        CFWConnectorMapping."Data Type" := ElementIndex;
        IF (CFWConnectorMapping.INSERT(TRUE)) THEN;
        ElementIndex := INCSTR(ElementIndex);
      UNTIL (Field.NEXT = 0);
    END;

    [External]
    PROCEDURE GetAutoLineNo@1100528320(Index@1100528300 : Integer;CompName@1100528301 : Text;PrimKeyValues@1100528302 : ARRAY [20] OF Text) : Text;
    VAR
      CFWConnectorDataLine@1100528303 : Record 11229460;
      StringLength@1100528304 : Integer;
      LineValue@1100528305 : Integer;
      LineValueText@1100528306 : Text;
    BEGIN
      EVALUATE(StringLength, "Formatting String");
      CFWConnectorDataLine.GetRecordSet(Index,"Service Code","Connector Code",CompName,PrimKeyValues);
      IF (CFWConnectorDataLine.ISEMPTY) THEN
        LineValue := 0
      ELSE BEGIN
        CFWConnectorDataLine.SetIndexToPK(Index);
        CFWConnectorDataLine.FINDLAST;
        LineValueText := CFWConnectorDataLine.GetPKValue(Index);
        EVALUATE(LineValue, LineValueText);
      END;
      EXIT(AddZeros(FORMAT(LineValue + 1), StringLength));
    END;

    [External]
    PROCEDURE GetCompanyFromDocument@1100528302(ServiceCode@1100528305 : Code[20];ConnectorCode@1100528303 : Code[20];XmlDoc@1100528302 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") CompNameOut : Text;
    VAR
      CFWConnectorMapping@1100528304 : Record 11229354;
      CFWConnectorManagement@1100528301 : Codeunit 11229291;
      SourceCompany@1100528300 : Text;
      ActionFilter@1100528306 : Text;
    BEGIN
      ActionFilter := STRSUBSTNO('%1|%2', CFWConnectorManagement.GetCompanyTxt, CFWConnectorManagement.GetCompaniesTxt);
      IF NOT CFWConnectorMapping.GetMappingByAction(ServiceCode,ConnectorCode,ActionFilter) THEN
        ERROR(Text006, SourceCompany,ServiceCode,ConnectorCode);

      IF (CFWConnectorMapping.FINDFIRST) THEN BEGIN
        IF (CFWConnectorMapping."Formatting String" <> '') THEN
            CompNameOut := CFWConnectorMapping."Formatting String"
        ELSE BEGIN
          SourceCompany := CFWConnectorManagement.ReturnNodeTextWithError(XmlDoc, '//' +
            CFWConnectorMapping."Element Name", TRUE);
          CompNameOut := CFWConnectorMapping.TransformValue(SourceCompany);
        END;
      END;
      EXIT(CompNameOut);
    END;

    PROCEDURE GetfieldValueOLD191023@1100525027(CFWConnectorMapping@1100525002 : Record 11229354;VAR RecRef@1000000003 : RecordRef;CompName@1100525007 : Text) ReturnValue : Text;
    VAR
      FldRef@1000000004 : FieldRef;
      FieldValue@1100525000 : Text;
      CFWConnectorManagement@1100528300 : Codeunit 11229291;
      PrimKeyValues@1100528301 : ARRAY [20] OF Text;
    BEGIN
      IF (CFWConnectorMapping."Field No." <> 0) THEN BEGIN
        CFWConnectorManagement.GetFieldref(RecRef,CFWConnectorMapping."Field No.",FldRef);
        IF (CFWConnectorMapping."Formatting String" <> '') THEN
          FieldValue:= FORMAT(FldRef,0,CFWConnectorMapping."Formatting String")
        ELSE
          FieldValue:= FORMAT(FldRef,0,9);
        END;
      ReturnValue := ConvertValueOLD191023(FieldValue, '', CompName,0,PrimKeyValues,TRUE);
      EXIT(ReturnValue);
    END;

    PROCEDURE GetfieldValue@1100528333(CFWConnectorMapping@1100525002 : Record 11229354;VAR RecRef@1000000003 : RecordRef;CompName@1100525007 : Text;PrimKeyValues@1100528301 : ARRAY [20] OF Text) ReturnValue : Text;
    VAR
      FldRef@1000000004 : FieldRef;
      FieldValue@1100525000 : Text;
      CFWConnectorManagement@1100528300 : Codeunit 11229291;
    BEGIN
      //4ps mk 2019-10-23 sn ivm convertvalue aanpassing moet ook getfieldvalue aangepast worden voor bijvoorbeeld customaction
      IF (CFWConnectorMapping."Field No." <> 0) THEN BEGIN
        CFWConnectorManagement.GetFieldref(RecRef,CFWConnectorMapping."Field No.",FldRef);
        IF (CFWConnectorMapping."Formatting String" <> '') THEN
          FieldValue:= FORMAT(FldRef,0,CFWConnectorMapping."Formatting String")
        ELSE
          FieldValue:= FORMAT(FldRef,0,9);
        END;
      ReturnValue := ConvertValue(FieldValue,'',CompName,CompName,0,PrimKeyValues,PrimKeyValues,TRUE);
      EXIT(ReturnValue);
    END;

    [External]
    PROCEDURE GetMapping@1100528323(ServiceCode@1100528303 : Code[20];ConnectorCode@1100528302 : Code[20]);
    BEGIN
      SETRANGE("Service Code", ServiceCode);
      SETRANGE("Connector Code", ConnectorCode);
    END;

    [External]
    PROCEDURE GetMappingByAction@1100525015(ServiceCode@1100525001 : Code[20];ConnectorCode@1100525002 : Code[20];ActionFilter@1100525000 : Text) : Boolean;
    BEGIN
      GetMapping(ServiceCode,ConnectorCode);
      SETFILTER("Action Code", ActionFilter);
      IF FINDSET THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE GetMappingByPrimKeyFieldNo@1100528324(ServiceCode@1100528300 : Code[20];ConnectorCode@1100528301 : Code[20];PrimaryKeyIndex@1100528302 : Integer) : Boolean;
    BEGIN
      GetMapping(ServiceCode,ConnectorCode);
      SETRANGE("Primary Key Index",PrimaryKeyIndex);
      IF FINDSET THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE GetPrimKeyFieldsOLD191023@1100528303(ConsumedWebServiceCode@1100528304 : Code[20];ConnectorCode@1100528300 : Code[20];XmlNode@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";CompName@1100528302 : Text;VAR PrimKeyFields@1100528303 : ARRAY [10] OF Text;ExtrafieldsDoc@1100528305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";LastLine@1100528306 : Boolean);
    BEGIN
      IF (NOT GetPrimKeyFieldsFromRecordOLD191023(ConsumedWebServiceCode, ConnectorCode, XmlNode, CompName, PrimKeyFields)) THEN
        GetPrimKeyFieldsFromDocumentOLD191023(ConsumedWebServiceCode, ConnectorCode, XmlNode, CompName, PrimKeyFields,ExtrafieldsDoc,LastLine);
    END;

    PROCEDURE GetPrimKeyFields@1100528331(ConsumedWebServiceCode@1100528304 : Code[20];ConnectorCode@1100528300 : Code[20];XmlNode@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";ParentCompName@1100528307 : Text;ChildCompName@1100528302 : Text;ParentPrimKeyFields@1100528308 : ARRAY [20] OF Text;VAR ChildPrimKeyFields@1100528303 : ARRAY [20] OF Text;ExtrafieldsDoc@1100528305 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";LastLine@1100528306 : Boolean);
    BEGIN
      IF (NOT GetPrimKeyFieldsFromRecord(ConsumedWebServiceCode, ConnectorCode, XmlNode, ChildPrimKeyFields)) THEN
        GetPrimKeyFieldsFromDocument(ConsumedWebServiceCode, ConnectorCode, XmlNode, ParentCompName,ChildCompName, ParentPrimKeyFields,ChildPrimKeyFields,ExtrafieldsDoc,LastLine);
    END;

    PROCEDURE GetPrimKeyFieldsFromDocumentOLD191023@1100528304(ServiceCode@1100528311 : Code[20];ConnectorCode@1100528303 : Code[20];XmlNode@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";CompName@1100528301 : Text;VAR PrimKeyFields@1100528300 : ARRAY [10] OF Text;ExtrafieldsDoc@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";LastLine@1100528305 : Boolean) : Boolean;
    VAR
      CFWConnectorManagement@1100528310 : Codeunit 11229291;
      Counter@1100528306 : Integer;
      FromValue@1100528313 : Text;
    BEGIN
      SETCURRENTKEY("Primary Key Index");
      GetMapping(ServiceCode,ConnectorCode);
      SETFILTER("Primary Key Index", '>%1', 0);
      IF (NOT FINDSET) THEN
        EXIT;

      Counter := 1;
      REPEAT
        IF "Action Code"='EXTRAFIELDS' THEN
          PrimKeyFields[Counter] := CFWConnectorManagement.ReturnNodeText(ExtrafieldsDoc, '//' +"Element Name", TRUE)
        ELSE BEGIN
          FromValue := CFWConnectorManagement.ReturnNodeText(XmlNode, '//' +"Element Name", TRUE);
          PrimKeyFields[Counter] := ConvertValueOLD191023(FromValue,'',CompName,Counter,PrimKeyFields,LastLine);
        END;
        Counter += 1;
      UNTIL NEXT =0;
    END;

    PROCEDURE GetPrimKeyFieldsFromDocument@1100528330(ServiceCode@1100528311 : Code[20];ConnectorCode@1100528303 : Code[20];XmlNode@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";ParentCompName@1100528301 : Text;ChildCompName@1100528307 : Text;ParentPrimKeyFields@1100528308 : ARRAY [10] OF Text;VAR ChildPrimKeyFields@1100528300 : ARRAY [10] OF Text;ExtrafieldsDoc@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";LastLine@1100528305 : Boolean) : Boolean;
    VAR
      CFWConnectorManagement@1100528310 : Codeunit 11229291;
      Counter@1100528306 : Integer;
      FromValue@1100528313 : Text;
      Field@1100528309 : Record 2000000041;
    BEGIN
      SETCURRENTKEY("Primary Key Index");
      GetMapping(ServiceCode,ConnectorCode);
      SETFILTER("Primary Key Index", '>%1', 0);
      IF (NOT FINDSET) THEN
        EXIT;

      Counter := 1;
      REPEAT
        IF "Action Code"='EXTRAFIELDS' THEN
          ChildPrimKeyFields[Counter] := CFWConnectorManagement.ReturnNodeText(ExtrafieldsDoc, '//' +"Element Name", TRUE)
        ELSE BEGIN
          FromValue := CFWConnectorManagement.ReturnNodeText(XmlNode, '//' +"Element Name", TRUE);
          CALCFIELDS("Table No.");
          Field.GET("Table No.","Field No.");
          FromValue := CFWConnectorManagement.ChangeTextToCulture(Field.Type,FromValue,Culture);
          ChildPrimKeyFields[Counter] := ConvertValue(FromValue,'',ParentCompName,ChildCompName,Counter,ParentPrimKeyFields,ChildPrimKeyFields,LastLine);
        END;
        Counter += 1;
      UNTIL NEXT =0;
    END;

    PROCEDURE GetPrimKeyFieldsFromRecordOLD191023@1100528305(ServiceCode@1100528310 : Code[20];ConnectorCode@1100528303 : Code[20];XmlNode@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";CompName@1100528301 : Text;PrimKeyFields@1100528300 : ARRAY [10] OF Text) RecordFound : Boolean;
    VAR
      CFWConnectorMapping@1100528304 : Record 11229354;
      CFWConnectorManagement@1100528306 : Codeunit 11229291;
      Counter@1100528305 : Integer;
      KeyFieldNo@1100528309 : ARRAY [6] OF Integer;
      KeyFieldValue@1100528308 : ARRAY [6] OF Text;
      RecRef@1100528307 : RecordRef;
    BEGIN
      CFWConnectorMapping.GetMappingByAction(ServiceCode,ConnectorCode,CFWConnectorManagement.GetExternalKeyTxt);
      IF (NOT CFWConnectorMapping.FINDSET) THEN
        EXIT(RecordFound);

      REPEAT
        Counter += 1;
        KeyFieldNo[Counter] := CFWConnectorMapping."Field No.";
        KeyFieldValue[Counter] := CFWConnectorManagement.ReturnNodeTextWithError(XmlNode, '//' +
          CFWConnectorMapping."Element Name", TRUE);
      UNTIL (CFWConnectorMapping.NEXT = 0);

      IF (FindRecordRefByExternalKey(KeyFieldNo, KeyFieldValue, RecRef)) THEN BEGIN
        CFWConnectorManagement.FillPrimKeyFromRecRef(RecRef, PrimKeyFields);
        RecordFound := TRUE;
      END;
      EXIT(RecordFound);
    END;

    PROCEDURE GetPrimKeyFieldsFromRecord@1100528332(ServiceCode@1100528310 : Code[20];ConnectorCode@1100528303 : Code[20];XmlNode@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR ChildPrimKeyFields@1100528300 : ARRAY [20] OF Text) RecordFound : Boolean;
    VAR
      CFWConnectorMapping@1100528304 : Record 11229354;
      CFWConnectorManagement@1100528306 : Codeunit 11229291;
      Counter@1100528305 : Integer;
      KeyFieldNo@1100528309 : ARRAY [6] OF Integer;
      KeyFieldValue@1100528308 : ARRAY [6] OF Text;
      RecRef@1100528307 : RecordRef;
    BEGIN
      CFWConnectorMapping.GetMappingByAction(ServiceCode,ConnectorCode,CFWConnectorManagement.GetExternalKeyTxt);
      IF (NOT CFWConnectorMapping.FINDSET) THEN
        EXIT(RecordFound);

      REPEAT
        Counter += 1;
        KeyFieldNo[Counter] := CFWConnectorMapping."Field No.";
        KeyFieldValue[Counter] := CFWConnectorManagement.ReturnNodeTextWithError(XmlNode, '//' +
          CFWConnectorMapping."Element Name", TRUE);
      UNTIL (CFWConnectorMapping.NEXT = 0);

      IF (FindRecordRefByExternalKey(KeyFieldNo, KeyFieldValue, RecRef)) THEN BEGIN
        CFWConnectorManagement.FillPrimKeyFromRecRef(RecRef, ChildPrimKeyFields);
        RecordFound := TRUE;
      END;
      EXIT(RecordFound);
    END;

    PROCEDURE ExtrafieldValue@1100528318(Element@1100525000 : Text;CFWConnectorDataLine@1100525003 : Record 11229460) ConvertedValue : Text;
    VAR
      CFWConnectorManagement@1100525001 : Codeunit 11229291;
      XmlDoc@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      CFWConnectorDataLine.ReadXmlDocFromBlob(CFWConnectorDataLine.FIELDNO("Extra Fields"),XmlDoc);
      ConvertedValue := CFWConnectorManagement.ReturnNodeText(XmlDoc,'//' +Element,TRUE);
      EXIT(ConvertedValue);
    END;

    PROCEDURE PutFieldValueOLD191023@1100528311(FieldValue@1100528300 : Text;RecRef@1100528301 : RecordRef;CallOnValidate@1100528302 : Boolean;CompName@1100528303 : Text;CultureText@1100528304 : Text;LastLine@1100528328 : Boolean;PrimKeyValues@1100528306 : ARRAY [20] OF Text);
    VAR
      Field@1100528326 : Record 2000000041;
      CFWConnectorManagement@1100528324 : Codeunit 11229291;
      Fldref@1100528325 : FieldRef;
      TextVar@1100528323 : Text;
      CodeVar@1100528322 : Code[1024];
      GUIDVar@1100528321 : GUID;
      DateFormulaVar@1100528320 : DateFormula;
      DateVar@1100528319 : Date;
      TimeVar@1100528318 : Time;
      DateTimeVar@1100528317 : DateTime;
      DurationVar@1100528316 : Duration;
      DecimalVar@1100528315 : Decimal;
      BigIntegerVar@1100528314 : BigInteger;
      OptionVar@1100528313 : Option;
      IntegerVar@1100528312 : Integer;
      BooleanVar@1100528311 : Boolean;
      RecordIdVar@1100528310 : RecordID;
      SourceCultureInfo@1100528308 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      TargetCultureInfo@1100528307 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      DateText@1100528305 : Text;
      CFWActions@1100528327 : Record 11229478;
    BEGIN
      IF NOT ValidRegEx(FieldValue) THEN
        EXIT;

      Field.GET(RecRef.NUMBER, "Field No.");
      Fldref := RecRef.FIELD(Field."No.");

      IF (CultureText <> '') AND (NOT CFWActions.IsCustomAction("Action Code")) THEN BEGIN
        SourceCultureInfo := SourceCultureInfo.CultureInfo(CultureText);
        TargetCultureInfo := TargetCultureInfo.CurrentCulture;
        FieldValue := CFWConnectorManagement.ChangeTextToCultureOLD20191101(Field.Type, FieldValue, SourceCultureInfo,TargetCultureInfo);
      END;

      FieldValue := ConvertValueOLD191023(FieldValue, FORMAT(Fldref), CompName,0,PrimKeyValues,LastLine);
      IF (FieldValue = CFWConnectorManagement.GetNodeNotFoundTxt) THEN
        EXIT;

      CASE Field.Type OF
        Field.Type::Integer: BEGIN
          EVALUATE(IntegerVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(IntegerVar);
            FALSE: Fldref.VALUE := IntegerVar;
          END;
        END;
        Field.Type::Text: BEGIN
          EVALUATE(TextVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(TextVar);
            FALSE: Fldref.VALUE := TextVar;
          END;
        END;
        Field.Type::Code: BEGIN
          EVALUATE(CodeVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(CodeVar);
            FALSE: Fldref.VALUE := CodeVar;
          END;
        END;
        Field.Type::Decimal: BEGIN
          EVALUATE(DecimalVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(DecimalVar);
            FALSE: Fldref.VALUE := DecimalVar;
          END;
        END;
        Field.Type::Option: BEGIN
          EVALUATE(OptionVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(OptionVar);
            FALSE: Fldref.VALUE := OptionVar;
          END;
        END;
        Field.Type::Boolean: BEGIN
          EVALUATE(BooleanVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(BooleanVar);
            FALSE: Fldref.VALUE := BooleanVar;
          END;
        END;
        Field.Type::Date: BEGIN
          EVALUATE(DateVar,FieldValue );
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(DateVar);
            FALSE: Fldref.VALUE := DateVar;
          END;
        END;
        Field.Type::Time: BEGIN
          EVALUATE(TimeVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(TimeVar);
            FALSE: Fldref.VALUE := TimeVar;
          END;
        END;
        Field.Type::DateTime: BEGIN
          EVALUATE(DateTimeVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(DateTimeVar);
            FALSE: Fldref.VALUE := DateTimeVar;
          END;
        END;
        Field.Type::DateFormula: BEGIN
          EVALUATE(DateFormulaVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(DateFormulaVar);
            FALSE: Fldref.VALUE := DateFormulaVar;
          END;
        END;
        Field.Type::BigInteger: BEGIN
          EVALUATE(BigIntegerVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(BigIntegerVar);
            FALSE: Fldref.VALUE := BigIntegerVar;
          END;
        END;
        Field.Type::Duration: BEGIN
          EVALUATE(DurationVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(DurationVar);
            FALSE: Fldref.VALUE := DurationVar;
          END;
        END;
        Field.Type::GUID: BEGIN
          EVALUATE(GUIDVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(GUIDVar);
            FALSE: Fldref.VALUE := GUIDVar;
          END;
        END;
        Field.Type::RecordID: BEGIN
        EVALUATE(RecordIdVar, FieldValue);
        CASE CallOnValidate OF
          TRUE: Fldref.VALIDATE(RecordIdVar);
          FALSE: Fldref.VALUE := RecordIdVar;
        END;
      END;
      ELSE
        ERROR(Text005, "Field No.");
      END;
      RecRef.MODIFY(NOT "No Modify Trigger");
    END;

    PROCEDURE PutFieldValue@1100528335(FieldValue@1100528300 : Text;RecRef@1100528301 : RecordRef;CallOnValidate@1100528302 : Boolean;ParentCompName@1100528303 : Text;ChildCompName@1100528305 : Text;CultureText@1100528304 : Text;LastLine@1100528328 : Boolean;ParentPrimKeyValues@1100528306 : ARRAY [20] OF Text;ChildPrimKeyValues@1100528309 : ARRAY [20] OF Text);
    VAR
      Field@1100528326 : Record 2000000041;
      CFWConnectorManagement@1100528324 : Codeunit 11229291;
      Fldref@1100528325 : FieldRef;
      SourceCultureInfo@1100528308 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      TargetCultureInfo@1100528307 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      CFWActions@1100528327 : Record 11229478;
    BEGIN
      IF (FieldValue = CFWConnectorManagement.GetNodeNotFoundTxt) AND (NOT CFWActions.IsCustomAction("Action Code")) AND (NOT ("Action Code"= CFWConnectorManagement.GetExtraFieldsTxt)) THEN
        EXIT;
      IF NOT ValidRegEx(FieldValue) THEN
        EXIT;

      Field.GET(RecRef.NUMBER, "Field No.");
      Fldref := RecRef.FIELD(Field."No.");

      IF (NOT CFWActions.IsCustomAction("Action Code")) THEN
        FieldValue := CFWConnectorManagement.ChangeTextToCulture(Field.Type,FieldValue,CultureText);

      FieldValue := ConvertValue(FieldValue, FORMAT(Fldref), ParentCompName,ChildCompName,0,ParentPrimKeyValues,ChildPrimKeyValues,LastLine);
      PutFieldValueType(Field,FieldValue,CallOnValidate,Fldref);
      RecRef.MODIFY(NOT "No Modify Trigger");
    END;

    LOCAL PROCEDURE PutFieldValueType@1100525004(Field@1100525000 : Record 2000000041;FieldValue@1100525015 : Text;CallOnValidate@1100525016 : Boolean;Fldref@1100525017 : FieldRef);
    VAR
      TextVar@1100525014 : Text;
      CodeVar@1100525013 : Code[1024];
      GUIDVar@1100525012 : GUID;
      DateFormulaVar@1100525011 : DateFormula;
      DateVar@1100525010 : Date;
      TimeVar@1100525009 : Time;
      DateTimeVar@1100525008 : DateTime;
      DurationVar@1100525007 : Duration;
      DecimalVar@1100525006 : Decimal;
      BigIntegerVar@1100525005 : BigInteger;
      OptionVar@1100525004 : Option;
      IntegerVar@1100525003 : Integer;
      BooleanVar@1100525002 : Boolean;
      RecordIdVar@1100525001 : RecordID;
    BEGIN
      CASE Field.Type OF
        Field.Type::Integer: BEGIN
          EVALUATE(IntegerVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(IntegerVar);
            FALSE: Fldref.VALUE := IntegerVar;
          END;
        END;
        Field.Type::Text: BEGIN
          EVALUATE(TextVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(TextVar);
            FALSE: Fldref.VALUE := TextVar;
          END;
        END;
        Field.Type::Code: BEGIN
          EVALUATE(CodeVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(CodeVar);
            FALSE: Fldref.VALUE := CodeVar;
          END;
        END;
        Field.Type::Decimal: BEGIN
          EVALUATE(DecimalVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(DecimalVar);
            FALSE: Fldref.VALUE := DecimalVar;
          END;
        END;
        Field.Type::Option: BEGIN
          EVALUATE(OptionVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(OptionVar);
            FALSE: Fldref.VALUE := OptionVar;
          END;
        END;
        Field.Type::Boolean: BEGIN
          EVALUATE(BooleanVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(BooleanVar);
            FALSE: Fldref.VALUE := BooleanVar;
          END;
        END;
        Field.Type::Date: BEGIN
          EVALUATE(DateVar,FieldValue );
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(DateVar);
            FALSE: Fldref.VALUE := DateVar;
          END;
        END;
        Field.Type::Time: BEGIN
          EVALUATE(TimeVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(TimeVar);
            FALSE: Fldref.VALUE := TimeVar;
          END;
        END;
        Field.Type::DateTime: BEGIN
          EVALUATE(DateTimeVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(DateTimeVar);
            FALSE: Fldref.VALUE := DateTimeVar;
          END;
        END;
        Field.Type::DateFormula: BEGIN
          EVALUATE(DateFormulaVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(DateFormulaVar);
            FALSE: Fldref.VALUE := DateFormulaVar;
          END;
        END;
        Field.Type::BigInteger: BEGIN
          EVALUATE(BigIntegerVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(BigIntegerVar);
            FALSE: Fldref.VALUE := BigIntegerVar;
          END;
        END;
        Field.Type::Duration: BEGIN
          EVALUATE(DurationVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(DurationVar);
            FALSE: Fldref.VALUE := DurationVar;
          END;
        END;
        Field.Type::GUID: BEGIN
          EVALUATE(GUIDVar, FieldValue);
          CASE CallOnValidate OF
            TRUE: Fldref.VALIDATE(GUIDVar);
            FALSE: Fldref.VALUE := GUIDVar;
          END;
        END;
        Field.Type::RecordID: BEGIN
        EVALUATE(RecordIdVar, FieldValue);
        CASE CallOnValidate OF
          TRUE: Fldref.VALIDATE(RecordIdVar);
          FALSE: Fldref.VALUE := RecordIdVar;
        END;
      END;
      ELSE
        ERROR(Text005,Field."No.");
      END;
    END;

    PROCEDURE TransformValue@1100528317(TextIn@1100528300 : Text) : Text;
    VAR
      CFWConnectorMappingValue@1100528301 : Record 11229355;
      CFWTranslationSetValue@1100528302 : Record 11229362;
    BEGIN
      IF ("Translation Set Code" = '') THEN BEGIN
        CFWConnectorMappingValue.SETRANGE("Service Code", "Service Code");
        CFWConnectorMappingValue.SETRANGE("Connector Code", "Connector Code");
        CFWConnectorMappingValue.SETRANGE("Element Name", "Element Name");
        CFWConnectorMappingValue.SETRANGE("Field No.", "Field No.");
        CFWConnectorMappingValue.SETRANGE("From Value", TextIn);
        IF (CFWConnectorMappingValue.COUNT <> 1) THEN
          ERROR(Text001, TextIn, "Service Code", "Connector Code", "Element Name", "Field No.");
        CFWConnectorMappingValue.FINDFIRST;
        EXIT(CFWConnectorMappingValue."To Value");
      END;
      EXIT(CFWTranslationSetValue.GetValue("Translation Set Code", TextIn));
    END;

    [External]
    PROCEDURE AddZeros@1100528309(TextIn@1100528300 : Text;TextLength@1100528301 : Integer) : Text;
    BEGIN
      IF (STRLEN(TextIn) >= TextLength) THEN
        EXIT(TextIn)
      ELSE
        EXIT(AddZeros('0' + TextIn, TextLength));
    END;

    [External]
    PROCEDURE CheckTargetConnector@1100528308();
    VAR
      CFWConnector@1100528300 : Record 11229353;
      CFWTargetConnector@1100528301 : Record 11229353;
    BEGIN
      IF ("Target Connector Code" = "Connector Code") THEN
        FIELDERROR("Target Connector Code");
      CFWConnector.GET("Service Code", "Connector Code");
      CFWTargetConnector.GET("Service Code", "Target Connector Code");
      IF (CFWConnector.Direction <> CFWTargetConnector.Direction) THEN
        FIELDERROR("Target Connector Code", STRSUBSTNO(Text003, CFWConnector.FIELDCAPTION(Direction)));
    END;

    PROCEDURE ConvertValueOLD191023@1100528313(FromValue@1100528300 : Text;CurrentValue@1100528301 : Text;CompName@1100528302 : Text;Counter@1100528307 : Integer;PrimKeyFields@1100528308 : ARRAY [20] OF Text;LastLine@1100528315 : Boolean) ConvertedValue : Text;
    VAR
      CFWConnectorManagement@1100528305 : Codeunit 11229291;
      NoSeriesManagement@1100528304 : Codeunit 396;
      CFWConnectorDataLine@1100528306 : Record 11229460;
      CFWActions@1100528309 : Record 11229478;
      ParameterArray@1100528310 : ARRAY [100] OF Text;
      NoSeriesCode@1100528313 : Code[10];
      NoSeriesDate@1100528311 : Date;
      NoSeriesModify@1100528312 : Boolean;
    BEGIN
      CASE TRUE OF
        CFWActions.IsCustomAction("Action Code"):ConvertedValue := ConvertCustomValue(PrimKeyFields,CompName);
        ("Action Code" = CFWConnectorManagement.GetDoNothingTxt) OR ("Action Code" = ''):
          ConvertedValue := FromValue;
        "Action Code" = CFWConnectorManagement.GetSubstituteTxt:
          ConvertedValue := SubstituteValue(FromValue, CurrentValue);
        "Action Code" = CFWConnectorManagement.GetTransformTxt:
          ConvertedValue := TransformValue(FromValue);
        "Action Code" = CFWConnectorManagement.GetCompanyTxt:
          ConvertedValue := TransformValue(CompName);
        "Action Code" = CFWConnectorManagement.GetNoSeriesTxt:BEGIN
          NoSeriesManagement.SetFromOtherCompany(CompName);
          ConvertedValue := NoSeriesManagement.GetNextNo("Formatting String", 0D, TRUE);
        END;
        "Action Code" = CFWConnectorManagement.GetNoSeriesWithParmTxt:BEGIN
          NoSeriesManagement.SetFromOtherCompany(CompName);
          CFWConnectorManagement.FillArray(ParameterArray,"Formatting String",1);
          NoSeriesCode := ParameterArray[1];
          EVALUATE(NoSeriesDate,ParameterArray[2]);
          EVALUATE(NoSeriesModify,ParameterArray[3]);
          IF LastLine THEN
            ConvertedValue := NoSeriesManagement.GetNextNo(NoSeriesCode,NoSeriesDate,TRUE)
          ELSE
            ConvertedValue := NoSeriesManagement.GetNextNo(NoSeriesCode,NoSeriesDate,NoSeriesModify);
        END;
        "Action Code" = CFWConnectorManagement.GetFixedValueTxt:
          ConvertedValue := "Formatting String";
        "Action Code" = CFWConnectorManagement.GetAutolineTxt:
            ConvertedValue := GetAutoLineNo(Counter, CompName, PrimKeyFields);
        "Action Code" = CFWConnectorManagement.GetSumTxt:
          ConvertedValue := SumValue(FromValue, CurrentValue, "Formatting String");
        "Action Code" = CFWConnectorManagement.GetExternalKeyTxt:
          ConvertedValue := FromValue;
        "Action Code" = CFWConnectorManagement.GetExtraFieldsTxt:BEGIN
          CFWConnectorDataLine.GetRecord("Service Code","Connector Code",CompName,PrimKeyFields);
          ConvertedValue := ExtrafieldValue("Formatting String",CFWConnectorDataLine);
        END;
        "Action Code" = CFWConnectorManagement.GetYearTxt:
          ConvertedValue := GetYear(FromValue);
        "Action Code" = CFWConnectorManagement.GetMonthTxt:
          ConvertedValue := GetMonth(FromValue);
        "Action Code" = CFWConnectorManagement.GetDayTxt:
          ConvertedValue := GetDay(FromValue);
        ELSE
          ERROR(Text004, "Action Code");
        END;
      EXIT(ConvertedValue);
    END;

    PROCEDURE ConvertValue@1100528328(FromValue@1100528300 : Text;CurrentValue@1100528301 : Text;ParentCompName@1100528303 : Text;ChildCompName@1100528302 : Text;Counter@1100528307 : Integer;ParentPrimKeyFields@1100528308 : ARRAY [20] OF Text;ChildPrimKeyFields@1100528314 : ARRAY [20] OF Text;LastLine@1100528315 : Boolean) ConvertedValue : Text;
    VAR
      CFWConnectorManagement@1100528305 : Codeunit 11229291;
      NoSeriesManagement@1100528304 : Codeunit 396;
      CFWConnectorDataLine@1100528306 : Record 11229460;
      CFWActions@1100528309 : Record 11229478;
      ParameterArray@1100528310 : ARRAY [100] OF Text;
      NoSeriesCode@1100528313 : Code[10];
      NoSeriesDate@1100528311 : Date;
      NoSeriesModify@1100528312 : Boolean;
    BEGIN
      //4ps mk 2019-10-23 sn aanroep kan zijn vanaf een 'parent' tbv uitpakken, maar kan ook het verwerken zijn van een veld met putfield of getfield, dan dus 'child'
      CASE TRUE OF
        CFWActions.IsCustomAction("Action Code"):BEGIN
          IF "Primary Key Index"=0 THEN
            ConvertedValue := ConvertCustomValue(ChildPrimKeyFields,ChildCompName)
          ELSE
            ConvertedValue := ConvertCustomValue(ParentPrimKeyFields,ParentCompName);
        END;
        ("Action Code" = CFWConnectorManagement.GetDoNothingTxt) OR ("Action Code" = ''):
          ConvertedValue := FromValue;
        "Action Code" = CFWConnectorManagement.GetSubstituteTxt:
          ConvertedValue := SubstituteValue(FromValue, CurrentValue);
        "Action Code" = CFWConnectorManagement.GetTransformTxt:
          ConvertedValue := TransformValue(FromValue);
        "Action Code" = CFWConnectorManagement.GetCompanyTxt:
          ConvertedValue := TransformValue(ChildCompName);
        "Action Code" = CFWConnectorManagement.GetNoSeriesTxt:BEGIN
          NoSeriesManagement.SetFromOtherCompany(ChildCompName);
          ConvertedValue := NoSeriesManagement.GetNextNo("Formatting String", 0D, TRUE);
        END;
        "Action Code" = CFWConnectorManagement.GetNoSeriesWithParmTxt:BEGIN
          NoSeriesManagement.SetFromOtherCompany(ChildCompName);
          CFWConnectorManagement.FillArray(ParameterArray,"Formatting String",1);
          NoSeriesCode := ParameterArray[1];
          EVALUATE(NoSeriesDate,ParameterArray[2]);
          EVALUATE(NoSeriesModify,ParameterArray[3]);
          IF LastLine THEN
            ConvertedValue := NoSeriesManagement.GetNextNo(NoSeriesCode,NoSeriesDate,TRUE)
          ELSE
            ConvertedValue := NoSeriesManagement.GetNextNo(NoSeriesCode,NoSeriesDate,NoSeriesModify);
        END;
        "Action Code" = CFWConnectorManagement.GetFixedValueTxt:
          ConvertedValue := "Formatting String";
        "Action Code" = CFWConnectorManagement.GetAutolineTxt:
            ConvertedValue := GetAutoLineNo(Counter, ChildCompName, ChildPrimKeyFields);
        "Action Code" = CFWConnectorManagement.GetSumTxt:
          ConvertedValue := SumValue(FromValue, CurrentValue, "Formatting String");
        "Action Code" = CFWConnectorManagement.GetExternalKeyTxt:
          ConvertedValue := FromValue;
        "Action Code" = CFWConnectorManagement.GetExtraFieldsTxt:BEGIN
          TESTFIELD("Formatting String");
          //CFWConnectorDataLine.GetRecord("Service Code","Connector Code",ChildCompName,ChildPrimKeyFields);
          CFWConnectorDataLine.GetRecord("Service Code","Connector Code",ParentCompName,ParentPrimKeyFields);//get from main record.
          ConvertedValue := ExtrafieldValue("Formatting String",CFWConnectorDataLine);
        END;
        "Action Code" = CFWConnectorManagement.GetYearTxt:
          ConvertedValue := GetYear(FromValue);
        "Action Code" = CFWConnectorManagement.GetMonthTxt:
          ConvertedValue := GetMonth(FromValue);
        "Action Code" = CFWConnectorManagement.GetDayTxt:
          ConvertedValue := GetDay(FromValue);
        ELSE
          ERROR(Text004, "Action Code");
        END;
      EXIT(ConvertedValue);
    END;

    PROCEDURE ConvertCustomValue@1100528322(PrimKeyFields@1100528301 : ARRAY [20] OF Text;CompName@1100528302 : Text) ReturnValue : Text;
    VAR
      CFWConnectorDataLine@1100528300 : Record 11229460;
      CFWSetup@1100528303 : Record 11229895;
      OldValue@1100528304 : Text;
    BEGIN
      CFWConnectorDataLine.GetRecord("Service Code","Connector Code",CompName,PrimKeyFields);
      CFWConnectorDataLine.InterfaceDataSetRECORDID(FORMAT(Rec.RECORDID));
      CFWSetup.GET;
      CODEUNIT.RUN(CFWSetup."Custom Action Interface Id",CFWConnectorDataLine);
      CFWConnectorDataLine.InterfaceDataSetRECORDID('');
      ReturnValue := CFWConnectorDataLine.InterfaceDataGetReturnValue;
    END;

    [External]
    PROCEDURE FindRecordRefByExternalKey@1100528307(KeyFieldNo@1100528301 : ARRAY [10] OF Integer;KeyFieldValue@1100528302 : ARRAY [10] OF Text;VAR RecRefInOut@1100528303 : RecordRef) RecordFound : Boolean;
    VAR
      Counter@1100528300 : Integer;
      FieldRef@1100528304 : FieldRef;
    BEGIN
      Counter := 1;
      WHILE (KeyFieldNo[Counter] > 0) DO BEGIN
        FieldRef := RecRefInOut.FIELD(KeyFieldNo[Counter]);
        FieldRef.SETRANGE(KeyFieldValue[Counter]);
        Counter += 1;
      END;
      EXIT(RecRefInOut.FINDFIRST);
    END;

    PROCEDURE SetPrimaryKeyFromFieldNo@1100528327(FieldNo@1100528300 : Integer) : Integer;
    VAR
      Field@1100528301 : Record 2000000041;
    BEGIN
      IF Field.GET("Table No.","Field No.") THEN
        EXIT(SetPrimaryKeyIndex(Field));
    END;

    [External]
    PROCEDURE SetPrimaryKeyIndex@1100528319(Field@1100528300 : Record 2000000041) : Integer;
    VAR
      Key@1100528301 : Record 2000000063;
      StringFunctions@1100528302 : Codeunit 11012273;
      Counter@1100528304 : Integer;
      DnArrayList@1100528303 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
    BEGIN
      IF (NOT Key.GET(Field.TableNo, 1)) THEN
        EXIT(0);

      StringFunctions.SplitString2(Key.Key, ',', DnArrayList);
      FOR Counter := 0 TO DnArrayList.Count - 1 DO BEGIN
        IF (DnArrayList.Equals(DnArrayList.Item(Counter), Field.FieldName)) THEN
          EXIT(Counter+1);
      END;
      EXIT(0);
    END;

    [External]
    PROCEDURE SubstituteValue@1100528316(NewValue@1100528302 : Text;CurrentValue@1100528300 : Text) ConvertedValue : Text;
    VAR
      StringFunctions@1100528301 : Codeunit 11012273;
      OldText@1100528303 : Text;
    BEGIN
      IF (STRPOS(CurrentValue, '%') > 0) THEN
        "Formatting String" := CurrentValue;
      OldText := '%' + FORMAT("Formatting Key Index");
      ConvertedValue := StringFunctions.ReplaceString("Formatting String", OldText, NewValue);
      EXIT(ConvertedValue);
    END;

    [External]
    PROCEDURE SumValue@1100528315(FromValue@1100528300 : Text;CurrentValue@1100528301 : Text;FormattingText@1100528302 : Text) ConvertedValue : Text;
    VAR
      StringFunctions@1100528305 : Codeunit 11012273;
      FromValueDec@1100528303 : Decimal;
      CurrValueDec@1100528304 : Decimal;
    BEGIN
      FromValue := FormattingText + FromValue ;
      FromValue := StringFunctions.ReplaceString(FromValue, '--', '');
      EVALUATE(FromValueDec, FromValue);
      EVALUATE(CurrValueDec, CurrentValue);
      ConvertedValue := FORMAT(FromValueDec + CurrValueDec);
      EXIT(ConvertedValue);
    END;

    [External]
    PROCEDURE ValidRegEx@1100528312(FieldValue@1100528301 : Text) : Boolean;
    VAR
      RegExpManagement@1100528300 : Codeunit 11012262;
    BEGIN
      IF ("RegEx Condition" = '') THEN
        EXIT(TRUE);
      IF RegExpManagement.RegExpFindMatches(FieldValue, "RegEx Condition") THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE UpdateConnectorMappingLink@1100528300();
    VAR
      CFWConnectorMappingLink@1100528300 : Record 11229357;
      CFWConnectorManagement@1100528301 : Codeunit 11229291;
    BEGIN
      IF ("Action Code" = CFWConnectorManagement.GetSubConnectorTxt) THEN BEGIN
        CFWConnectorMappingLink.SETRANGE("Service Code", "Service Code");
        CFWConnectorMappingLink.SETRANGE("Connector Code", "Connector Code");
        CFWConnectorMappingLink.SETRANGE("Element Name", "Element Name");
        IF (NOT CFWConnectorMappingLink.FINDSET) THEN
          EXIT;

        REPEAT
          CFWConnectorMappingLink.VALIDATE("Target Connector Code", "Target Connector Code");
          CFWConnectorMappingLink.MODIFY(TRUE);
        UNTIL (CFWConnectorMappingLink.NEXT = 0);
      END;
    END;

    [External]
    PROCEDURE SetOptionString@1100528321();
    VAR
      Field@1100528300 : Record 2000000041;
    BEGIN

      IF ("Table No."=11012769) AND ("Field No."=1) THEN
        "Extra Info" := OptionTextTooLong
      ELSE BEGIN
        IF Field.GET("Table No.","Field No.") THEN
          "Extra Info" := Field.OptionString;
      END;
    END;

    [External]
    PROCEDURE GetYear@1100528314(FromValue@1100528300 : Text) ReturnValue : Text;
    VAR
      DateVar@1100528301 : Date;
    BEGIN
      EVALUATE(DateVar,FromValue);
      ReturnValue := FORMAT(DATE2DWY(DateVar,3),0,9);
    END;

    [External]
    PROCEDURE GetMonth@1100528325(FromValue@1100528300 : Text) ReturnValue : Text;
    VAR
      DateVar@1100528301 : Date;
    BEGIN
      EVALUATE(DateVar,FromValue);
      ReturnValue := FORMAT(DATE2DWY(DateVar,2),0,9);
    END;

    [External]
    PROCEDURE GetDay@1100528326(FromValue@1100528300 : Text) ReturnValue : Text;
    VAR
      DateVar@1100528301 : Date;
    BEGIN
      EVALUATE(DateVar,FromValue);
      ReturnValue := FORMAT(DATE2DWY(DateVar,1),0,9);
    END;

    [External]
    PROCEDURE GetCurrFieldno@1100528301() : Integer;
    BEGIN
      EXIT(CurrFieldNo);
    END;

    BEGIN
    END.
  }
}

