OBJECT Codeunit 11012495 CTRL Process Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11229430;
    OnRun=VAR
            CTRLManagement@1100527800 : Codeunit 11012498;
          BEGIN
            CTRLSetup.GET;
            CTRLManagement.CheckCtrlSetup;

            CLEAR(TempBlob);
            GenericProcessQueue.COPY(Rec);
            SourceRecId := GenericProcessQueue."Source Record Id";

            CASE GenericProcessQueue."Step Name" OF
              GetSendMailTxt: ProcessSendMail;
              ELSE ProcessQueueRecord;
            END;
            IF (TempBlob.Blob.HASVALUE) THEN BEGIN
              "Queue Message" := TempBlob.Blob;
              MODIFY;
            END;
          END;

  }
  CODE
  {
    VAR
      ChangeTypeTagTxt@1100528320 : TextConst 'ENU=ChangeType';
      CompanyTagTxt@1100528318 : TextConst 'ENU=CompanyName';
      CtrlTxt@1100528315 : TextConst 'ENU=4PS Ctrl';
      DeleteTxt@1100528313 : TextConst 'ENU=Delete;SVE=Ta bort';
      EntityKeyTagTxt@1100528321 : TextConst 'ENU=EntityKey';
      EntityTypeTagTxt@1100528319 : TextConst 'ENU=EntityType';
      HttpErrorTxt@1100528309 : TextConst 'ENU=Http Error %1 occurred.';
      InsertTxt@1100528302 : TextConst 'ENU=Create;SVE=skapa';
      MailAddressMustBeFilledTxt@1100528303 : TextConst 'ENU=%1 %2 must be filled';
      ModifyTxt@1100528310 : TextConst 'ENU=Update;SVE=Uppdatera';
      NOK@1100528300 : TextConst 'ENU=Not Ok';
      NotifyTxt@1100527800 : TextConst 'ENU=Notify';
      NotifyContextTxt@1100527801 : TextConst 'ENU=NotifyContext';
      OK@1100528301 : TextConst 'ENU=Ok;SVE=OK';
      CTRLSetup@1100527802 : Record 11125686;
      GenericProcessQueue@1100528306 : Record 11229430;
      TempBlob@1100528304 : Record 99008535;
      OrTxt@1100528308 : TextConst 'ENU=or;SVE=Eller';
      RenameTxt@1100528312 : TextConst 'ENU=Rename';
      RootTagTxt@1100528317 : TextConst 'ENU=Root';
      SendMailTxt@1100527804 : TextConst 'ENU=SendMail';
      SendTriggerTxt@1100528305 : TextConst 'ENU=SendTrigger';
      StringFunctions@1100527803 : Codeunit 11012273;
      SourceRecId@1100528307 : RecordID;

    PROCEDURE AddEnsureEvent@1100527805(ContactNo@1100527801 : Code[20];Contact@1100527806 : Record 5050;NotifyContext@1100527803 : Text);
    VAR
      ContactLComp@1100527800 : Record 5050;
      GenericProcesQueue@1100527804 : Record 11229430;
      CTRLManagement@1100527802 : Codeunit 11012498;
    BEGIN
      ContactLComp.GET(ContactNo);
      IF (GenericProcesQueue.CheckQueueExistsInclStepNameAndParameter(GetSendTriggerTxt, COMPANYNAME,
        ContactLComp.RECORDID, 0, 0, GetModifyTxt, FALSE))
      THEN
        EXIT;

      GenericProcesQueue.AddProcessQueueEntry(GetSendTriggerTxt, COMPANYNAME, ContactLComp.RECORDID);
      GenericProcesQueue.AddParameter(0, 0, GetModifyTxt);
      GenericProcesQueue.AddParameter(0, 1, Contact.TABLENAME);
      GenericProcesQueue.AddParameter(0, 2, CTRLManagement.GetEnsureUserUrl(GenericProcesQueue));
      GenericProcesQueue.AddParameter(0, 9, NotifyContext);
      GenericProcesQueue.AddParameter(0, 11, Contact.Name);
      GenericProcesQueue.AddParameter(0, 12, Contact."E-Mail 2");
    END;

    PROCEDURE AddEvent@1100528312(SourceRecId@1100527806 : RecordID;EventTxt@1100528300 : Text);
    VAR
      GenericProcesQueue@1100527800 : Record 11229430;
      CTRLManagement@1100528301 : Codeunit 11012498;
      DataTypeManagement@1100528302 : Codeunit 701;
      RecRef@1100528303 : RecordRef;
    BEGIN
      IF (GenericProcesQueue.CheckQueueExistsInclStepName(GetSendTriggerTxt, COMPANYNAME, SourceRecId, FALSE))
      THEN
        EXIT;

      DataTypeManagement.GetRecordRef(SourceRecId, RecRef);
      GenericProcesQueue.AddProcessQueueEntry(GetSendTriggerTxt, COMPANYNAME, SourceRecId);
      GenericProcesQueue.AddParameter(0, 0, EventTxt);
      GenericProcesQueue.AddParameter(0, 1, CTRLManagement.GetEntityType(RecRef.NAME));
      GenericProcesQueue.AddParameter(0, 2, CTRLManagement.GetSyncUrl(GenericProcesQueue));
    END;

    PROCEDURE AddMailEvent@1100527812(SourceRecId@1100527806 : RecordID;MailTemplateNo@1100527808 : Integer);
    VAR
      CTRLManagement@1100527802 : Codeunit 11012498;
      GenericProcesQueue@1100527800 : Record 11229430;
    BEGIN
      IF (GenericProcesQueue.CheckQueueExistsInclStepNameAndParameter(GetSendMailTxt, COMPANYNAME,
        SourceRecId, 0, 10, FORMAT(MailTemplateNo), FALSE))
      THEN
        EXIT;

      GenericProcesQueue.AddProcessQueueEntry(GetSendMailTxt, COMPANYNAME, SourceRecId);
      GenericProcesQueue.AddParameter(0, 10, FORMAT(MailTemplateNo));
    END;

    PROCEDURE GetCtrlTxt@1100528300() : Text;
    BEGIN
      EXIT(CtrlTxt);
    END;

    PROCEDURE GetDeleteTxt@1100528310() : Text;
    BEGIN
      EXIT(DeleteTxt);
    END;

    PROCEDURE GetInsertTxt@1100528303() : Text;
    BEGIN
      EXIT(InsertTxt);
    END;

    PROCEDURE GetModifyTxt@1100528301() : Text;
    BEGIN
      EXIT(ModifyTxt);
    END;

    PROCEDURE GetSendMailTxt@1100527801() : Text;
    BEGIN
      EXIT(STRSUBSTNO('%1 %2', CtrlTxt, SendMailTxt));
    END;

    PROCEDURE GetSendTriggerTxt@1100528306() : Text;
    BEGIN
      EXIT(STRSUBSTNO('%1 %2', CtrlTxt, SendTriggerTxt));
    END;

    PROCEDURE Initialize@1100528304();
    VAR
      GenericProcessManagement@1100527800 : Codeunit 11229305;
    BEGIN
      GenericProcessManagement.InitJobQueue(UPPERCASE(GetCtrlTxt), 10, 0);
      InitializeProcessSteps;
    END;

    [TryFunction]
    PROCEDURE ProcessOneQueueRecord@1100527800(GenericProcesQueueIn@1100527800 : Record 11229430);
    BEGIN
      GenericProcessQueue.COPY(GenericProcesQueueIn);
      SourceRecId := GenericProcessQueue."Source Record Id";
      ProcessQueueRecord;
    END;

    PROCEDURE ShowJsonString@1100528313(GenericProcessQueueIn@1100528300 : Record 11229430);
    BEGIN
      GenericProcessQueue := GenericProcessQueueIn;
      SourceRecId := GenericProcessQueue."Source Record Id";
      MESSAGE(CreateJsonString);
    END;

    LOCAL PROCEDURE "---Locals---"@1100528302();
    BEGIN
    END;

    LOCAL PROCEDURE AddMailAddress@1100528324(VAR MailAddress@1100528300 : Text;AddressToAdd@1100528301 : Text);
    BEGIN
      CASE TRUE OF
        (AddressToAdd = ''): EXIT;
        (MailAddress = ''): MailAddress := AddressToAdd;
        ELSE MailAddress := STRSUBSTNO('%1;%2', MailAddress, AddressToAdd);
      END;
    END;

    LOCAL PROCEDURE CreateJsonString@1100528309() : Text;
    VAR
      ProjectPurchaseAction@1100527800 : Record 11012026;
      CTRLManagement@1100527804 : Codeunit 11012498;
      GetJsonStructure@1100527802 : Codeunit 1237;
      XMLDOMManagement@1100527803 : Codeunit 6224;
      Counter@1100528300 : Integer;
      EmptyRecId@1100528301 : RecordID;
      RecRef@1100528311 : RecordRef;
      KeyRef@1100528310 : KeyRef;
      FldRef@1100528309 : FieldRef;
      XmlDocument@1100528304 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      EntityKeyNode@1100528306 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlNode@1100527801 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF (SourceRecId <> EmptyRecId) THEN BEGIN
        IF (NOT RecRef.GET(SourceRecId)) THEN BEGIN
          RecRef := SourceRecId.GETRECORD;
        END;
      END;
      CreateXmlNodeRoot(XmlDocument, EntityKeyNode, (SourceRecId <> EmptyRecId));

      IF (SourceRecId <> EmptyRecId) THEN BEGIN
        KeyRef := RecRef.KEYINDEX(1);
        FOR Counter := 1 TO KeyRef.FIELDCOUNT DO BEGIN
          FldRef := KeyRef.FIELDINDEX(Counter);
          XMLDOMManagement.AddNode(EntityKeyNode, CreateTagName(FldRef.NAME), FORMAT(FldRef.VALUE, 0, 9));
        END;

        XmlNode := EntityKeyNode.ParentNode;
        IF (GenericProcessQueue.GetParameter(0, 9) <> '') THEN BEGIN
          XMLDOMManagement.AddNode(XmlNode, NotifyTxt, FORMAT(TRUE, 0, 9));
          XMLDOMManagement.AddNode(XmlNode, NotifyContextTxt, GenericProcessQueue.GetParameter(0, 9));
        END;
        IF (GenericProcessQueue.GetParameter(0, 11) <> '') THEN
          XMLDOMManagement.AddNode(XmlNode, 'UserName', GenericProcessQueue.GetParameter(0, 11));
        IF (GenericProcessQueue.GetParameter(0, 12) <> '') THEN
          XMLDOMManagement.AddNode(XmlNode, 'UserEmail', GenericProcessQueue.GetParameter(0, 12));
      END;

      EXIT(GetJsonStructure.XmlToJson(XmlDocument));
    END;

    LOCAL PROCEDURE CreateTagName@1100528314(TagName@1100528300 : Text) : Text;
    BEGIN
      TagName := DELCHR(TagName, '<=>', '().-&/');
      EXIT(CONVERTSTR(TagName, ' ', '_'));
    END;

    LOCAL PROCEDURE CreateXmlNodeRoot@1100528311(VAR XmlDocument@1100528300 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR EntityKeyNode@1100528306 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";HasRecordId@1100528304 : Boolean);
    VAR
      WebServiceAggregate@1100528307 : Record 9900;
      CTRLManagement@1100527800 : Codeunit 11012498;
      XMLDOMManagement@1100527801 : Codeunit 6224;
      XmlNode@1100528303 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlNodeChild@1100528302 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlNodeRoot@1100528301 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XmlDocument := XmlDocument.XmlDocument;
      XMLDOMManagement.AddRootElement(XmlDocument, RootTagTxt, XmlNodeRoot);
      XMLDOMManagement.AddNode(XmlNodeRoot, ChangeTypeTagTxt, CTRLManagement.GetChangeType(GenericProcessQueue));
      XMLDOMManagement.AddNode(XmlNodeRoot, CompanyTagTxt, COMPANYNAME);
      IF (HasRecordId) THEN BEGIN
        XMLDOMManagement.AddNode(XmlNodeRoot, EntityTypeTagTxt, CTRLManagement.GetEntityTypeParam(GenericProcessQueue));
        XMLDOMManagement.AddElement(XmlNodeRoot, EntityKeyTagTxt, '', '', EntityKeyNode);
      END;
    END;

    LOCAL PROCEDURE GetEmailAddressesFromRecordRef@1100528318(VAR RecRef@1100527800 : RecordRef;MailTemplateNo@1100528302 : Integer) : Text;
    VAR
      Employee@1100528311 : Record 5200;
      ServiceCall@1100527803 : Record 11012822;
      ProjectPurchaseAction@1100528310 : Record 11012026;
      VendorsbyPurchaseAction@1100528300 : Record 11012068;
      Contact@1100528301 : Record 5050;
      ServiceLocation@1100528303 : Record 11012801;
      ServiceContract@1100528304 : Record 11012812;
      WorkOrder@1100528305 : Record 11229279;
      ServiceOrder@1100528306 : Record 11012823;
      SalespersonPurchaser@1100528307 : Record 13;
      ResourceWOP@1100528308 : Record 11229278;
      MailAddress@1100528309 : Text;
      Vendor@1100528312 : Record 23;
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::"Service Call": BEGIN
          RecRef.SETTABLE(ServiceCall);
          IF NOT ServiceLocation.GET(ServiceCall."Service Location No.") THEN
            ServiceLocation.INIT;
          IF NOT ServiceContract.GET(ServiceCall."Service Contract No.") THEN
            ServiceContract.INIT;

          IF (MailTemplateNo = 75)  //create service call
          THEN BEGIN
            ServiceCall.TESTFIELD("E-Mail");
            AddMailAddress(MailAddress, ServiceCall."E-Mail");
            EXIT(MailAddress);
          END;
          IF (MailTemplateNo = 201) OR (MailTemplateNo = 204) THEN BEGIN
            ServiceCall.TESTFIELD("Calling Account E-mail");
            AddMailAddress(MailAddress, ServiceCall."Calling Account E-mail");
            EXIT(MailAddress);
          END;
          IF (MailTemplateNo = 205) OR (MailTemplateNo = 206)THEN BEGIN
            AddMailAddress(MailAddress, ServiceLocation."E-Mail");
            AddMailAddress(MailAddress, ServiceContract."E-Mail");
            IF (MailAddress = '') THEN BEGIN
              ERROR('%1 %2 %3.',
                STRSUBSTNO(MailAddressMustBeFilledTxt, ServiceLocation.TABLECAPTION,
                  ServiceLocation.FIELDCAPTION("E-Mail")),
                OrTxt,
                STRSUBSTNO(MailAddressMustBeFilledTxt, ServiceContract.TABLECAPTION,
                  ServiceContract.FIELDCAPTION("E-Mail")));
            END;
            EXIT(MailAddress);
          END;
        END;
        DATABASE::"Vendors by Purchase Action": BEGIN
          RecRef.SETTABLE(VendorsbyPurchaseAction);
          IF (MailTemplateNo = 199) THEN BEGIN //DPT Quote Document Uploaded
            ProjectPurchaseAction.GET(VendorsbyPurchaseAction."Project No.", VendorsbyPurchaseAction."Purchase Action");
            ProjectPurchaseAction.TESTFIELD("Responsible Employee");
            Employee.GET(ProjectPurchaseAction."Responsible Employee");
            Employee.TESTFIELD("Company E-Mail");
            EXIT(Employee."Company E-Mail");
          END ELSE BEGIN
            CASE TRUE OF
              (VendorsbyPurchaseAction."Contact Person No." <> ''):
                Contact.GET(VendorsbyPurchaseAction."Contact Person No.");
              (VendorsbyPurchaseAction.Type = VendorsbyPurchaseAction.Type::Vendor):
                Contact.GetContactByVendor(VendorsbyPurchaseAction."Vendor No.", Contact, FALSE);
              ELSE
                Contact.GET(VendorsbyPurchaseAction."Vendor No.");
            END;
            Contact.TESTFIELD("E-Mail 2");
            EXIT(Contact."E-Mail 2");
          END;
        END;
        DATABASE::"Work Order": BEGIN
          RecRef.SETTABLE(WorkOrder);
          IF (MailTemplateNo = 202) THEN BEGIN //Mail Template 202 Workorder expected datetime changed by subcontractor
            IF (WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder) THEN BEGIN
              ServiceOrder.GET(WorkOrder."Source No.");
              SalespersonPurchaser.GET(ServiceOrder."Order Manager");
              SalespersonPurchaser.TESTFIELD("E-Mail");
              EXIT(SalespersonPurchaser."E-Mail");
            END;
          END;
          IF (MailTemplateNo = 203) THEN BEGIN //Mail Template 203 New work for subcontractor
            ResourceWOP.GET(WorkOrder."Resource No.");
            IF (ResourceWOP.Type = ResourceWOP.Type::Subcontractor) THEN BEGIN
              Vendor.GET(ResourceWOP."Source No.");
              Vendor.TESTFIELD("E-Mail for Purch. Order");
              EXIT (Vendor."E-Mail for Purch. Order");
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetContactFromRecordRef@1100528320(VAR RecRef@1100527800 : RecordRef;VAR Contact@1100528302 : Record 5050) : Boolean;
    VAR
      ServiceCall@1100527803 : Record 11012822;
      VendorsbyPurchaseAction@1100528300 : Record 11012068;
      WorkOrder@1100528301 : Record 11229279;
      ServiceOrder@1100528303 : Record 11012823;
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::"Service Call": BEGIN
          RecRef.SETTABLE(ServiceCall);
          IF (Contact.GetContactByCustomer(ServiceCall."Customer No.", Contact, FALSE)) THEN
            EXIT(TRUE);
        END;
        DATABASE::"Vendors by Purchase Action": BEGIN
          CASE TRUE OF
            (VendorsbyPurchaseAction."Contact Person No." <> ''):
              Contact.GET(VendorsbyPurchaseAction."Contact Person No.");
            (VendorsbyPurchaseAction.Type = VendorsbyPurchaseAction.Type::Vendor):
              Contact.GetContactByVendor(VendorsbyPurchaseAction."Vendor No.", Contact, FALSE);
            ELSE
              Contact.GET(VendorsbyPurchaseAction."Vendor No.");
          END;
          EXIT(TRUE);
        END;
        DATABASE::"Work Order": BEGIN
          RecRef.SETTABLE(WorkOrder);
          IF (WorkOrder."Source Type" = WorkOrder."Source Type"::ServiceOrder) THEN BEGIN
            IF (ServiceOrder.GET(WorkOrder."Source No.")) THEN
              IF (Contact.GetContactByCustomer(ServiceOrder."Customer No.", Contact, FALSE)) THEN
                EXIT(TRUE);
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE InitializeProcessSteps@1100528305();
    VAR
      GenericProcessStep@1100528300 : Record 11229408;
    BEGIN
      GenericProcessStep.AddGenericProcessStep(GetSendMailTxt, GetCtrlTxt, CODEUNIT::"CTRL Process Management", 10);
      GenericProcessStep.AddGenericProcessStep(GetSendTriggerTxt, GetCtrlTxt, CODEUNIT::"CTRL Process Management", 0);
    END;

    LOCAL PROCEDURE ProcessSendMail@1100527802();
    VAR
      Contact@1100527801 : Record 5050;
      SMTPMailSetup@1100528300 : Record 409;
      VendorsbyPurchaseAction@1100527800 : Record 11012068;
      MailTemplateManagement@1100527802 : Codeunit 11012622;
      MailTemplateNo@1100527803 : Integer;
      SourceVariant@1100528302 : Variant;
      DataTypeManagement@1100528304 : Codeunit 701;
      RecRef@1100528301 : RecordRef;
      SendToEmailAddresses@1100528303 : Text;
      Subject@1100528305 : Text;
      DocumentMailing@1100528306 : Codeunit 260;
    BEGIN
      SMTPMailSetup.GET;
      SMTPMailSetup.TESTFIELD("SMTP Server");
      SMTPMailSetup.TESTFIELD("SMTP Server Port");

      IF NOT (DataTypeManagement.GetRecordRef(GenericProcessQueue."Source Record Id", RecRef)) THEN
        EXIT;
      IF NOT EVALUATE(MailTemplateNo, GenericProcessQueue.GetParameter(0, 10)) THEN
        EXIT;
      IF NOT (GetContactFromRecordRef(RecRef, Contact)) THEN
        EXIT;
      SendToEmailAddresses:= GetEmailAddressesFromRecordRef(RecRef, MailTemplateNo);
      IF (SendToEmailAddresses = '') THEN
        EXIT;

      DocumentMailing.EmailMessageWithoutAttachment('', SendToEmailAddresses, MailTemplateNo, '',
        Contact."Language Code", RecRef, '', FALSE);
    END;

    LOCAL PROCEDURE ProcessQueueRecord@1100528307();
    VAR
      EntityType@1100528301 : Text;
      JsonString@1100528300 : Text;
    BEGIN
      JsonString := CreateJsonString;
      SendTrigger(JsonString);
    END;

    LOCAL PROCEDURE SendTrigger@1100528308(JsonString@1100528300 : Text);
    VAR
      Count@1100527800 : Integer;
      IStream@1100527802 : InStream;
      OStream@1100527801 : OutStream;
      DnArray@1100528306 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      DnEncoding@1100528303 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      DnHttpStatusCode@1100528307 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      DnWebRequest@1100528301 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebRequest";
      DnHttpWebResponse@1100528302 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      DnMemoryStream@1100528304 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      DnStream@1100528305 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      TextString@1100527803 : Text;
    BEGIN
      DnArray := DnEncoding.UTF8.GetBytes(JsonString);

      DnWebRequest := DnWebRequest.CreateHttp(GenericProcessQueue.GetParameter(0,2));
      DnWebRequest.ContentLength := DnArray.Length;
      DnWebRequest.ContentType := 'application/json';
      IF (CTRLSetup."Access Token" <> '') THEN
        DnWebRequest.Headers.Add('Authorization', STRSUBSTNO('Bearer %1', CTRLSetup."Access Token"));
      DnWebRequest.Method := 'POST';
      DnWebRequest.Timeout := 30000;

      DnStream := DnWebRequest.GetRequestStream();
      DnStream.Write(DnArray, 0, DnArray.Length);
      DnStream.Close();

      DnHttpWebResponse := DnWebRequest.GetResponse();
      IF (NOT DnHttpStatusCode.Equals(DnHttpWebResponse.StatusCode, DnHttpStatusCode.OK)) THEN BEGIN
        IF (GUIALLOWED) THEN
          MESSAGE(HttpErrorTxt, DnHttpWebResponse.StatusCode);
      END;

      IStream := DnHttpWebResponse.GetResponseStream;
      TempBlob.Blob.CREATEOUTSTREAM(OStream);
      COPYSTREAM(OStream, IStream);
      TextString := TempBlob.ReadAsText(StringFunctions.CarriageReturnLineFeed, TEXTENCODING::UTF8);
      CLEAR(TempBlob.Blob);
      TempBlob.WriteAsText(TextString, TEXTENCODING::UTF8);
    END;

    BEGIN
    END.
  }
}

