OBJECT XMLport 11012347 Import ICF Invoices
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Import ICF Invoices;
               SVE=Importera ICF-fakturor];
    DefaultFieldsValidation=No;
    PreserveWhiteSpace=Yes;
    TextEncoding=WINDOWS;
    OnInitXMLport=BEGIN
                    IcmLicenceCu.CheckICMProcess;
                  END;

    OnPreXMLport=BEGIN
                   VendorCode := '';
                   IF STRLEN("ICF Invoice File".GETFILTER(Vendor)) <= MAXSTRLEN(VendorCode) THEN
                     VendorCode := "ICF Invoice File".GETFILTER(Vendor);
                   IF (VendorCode = '') OR (NOT VendorRec.GET(VendorCode)) THEN
                     ERROR(Text010);

                   IcfFileLineNo := 0;
                   Window.OPEN(Text001);
                 END;

    OnPostXMLport=BEGIN
                    MoveFileToArchive; //C009742
                    PostICF;
                    Window.CLOSE;
                  END;

    Format=Variable Text;
    FieldDelimiter=<None>;
    FieldSeparator=<TAB>;
    RecordSeparator=<LF>;
  }
  ELEMENTS
  {
    { [{0E5266BE-2A5D-407B-9C0A-60D531E14013}];  ;Root                ;Element ;Text     }

    { [{A25F1343-9FEF-4B85-85A7-56A46DBED231}];1 ;ICFInvoiceFile      ;Element ;Table   ;
                                                  ReqFilterFields=Field1;
                                                  SourceTable=Table11012328;
                                                  Import::OnBeforeInsertRecord=VAR
                                                                                 lvICFLineRec@1100525000 : Record 11012327;
                                                                               BEGIN
                                                                                 IcfFileLineNo := IcfFileLineNo + 1;
                                                                                 Window.UPDATE(1, IcfFileLineNo);

                                                                                 IF IcfFileLineNo = 1 THEN BEGIN
                                                                                   IF Text1 <> 'BH10' THEN
                                                                                     ERROR(Text011);
                                                                                   IF ICFFileRec.GET(VendorCode, Text7) THEN BEGIN  //db, 25-11-08
                                                                                     lvICFLineRec.SETRANGE(Vendor, ICFFileRec.Vendor);
                                                                                     lvICFLineRec.SETRANGE("Reference (Vendor)", ICFFileRec."Reference (Vendor)");
                                                                                     lvICFLineRec.SETRANGE(Status, lvICFLineRec.Status::Open);
                                                                                     IF lvICFLineRec.FINDFIRST THEN
                                                                                       ERROR(Text012, Text7, VendorCode);
                                                                                   END;
                                                                                 END;

                                                                                 IF COPYSTR(Text1, 1, 1) = 'B' THEN
                                                                                   RegisterDocument(Text1);

                                                                                 IF COPYSTR(Text1, 1, 1) = 'F' THEN
                                                                                   RegisterDetails(Text1);

                                                                                 ClearText;

                                                                                 currXMLport.SKIP;
                                                                               END;
                                                                                }

    { [{11251D62-D4AC-4BA1-8AD3-92CEA6B89DEC}];2 ;Text1               ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{FB4447E4-4863-4EC7-BE3B-C5EF32E30CC2}];2 ;Text2               ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{1FDD4F6C-991B-49FD-8847-175108345E2A}];2 ;Text3               ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{3208FD0C-BCD1-4ABF-8982-192F92CE9F5B}];2 ;Text4               ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{73260B2A-3D47-428D-A934-2EFF3641A2CC}];2 ;Text5               ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{40C9E6B8-44FB-4789-ABB5-F38CE2B0CC80}];2 ;Text6               ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{A379BDE7-C411-46B4-9D28-F650ED5AE4EC}];2 ;Text7               ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{6B1A656D-0F3C-4761-BFE4-B57A9EF5D664}];2 ;Text8               ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{1345EC08-1FEA-4F73-8C4F-97C1F8998CD2}];2 ;Text9               ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{3EE8C603-FCA3-4FF4-B9E6-166164C4D1FD}];2 ;Text10              ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{5612D09C-B4CC-46D9-B36A-B19281876FB9}];2 ;Text11              ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{FA44054B-CFBE-4BE0-A578-B30F3E75039F}];2 ;Text12              ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{BA98AFED-5BE3-42CB-B367-4BF8D27C997D}];2 ;Text13              ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{8A7026F7-060E-4B9C-9868-9AEBAE26D34F}];2 ;Text14              ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{644FA3F5-ED0E-4EDA-AB54-FDA42635FC90}];2 ;Text15              ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{FF970B79-6BAF-4F1A-B8E3-D1253AF43721}];2 ;Text16              ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{C86A6127-64EC-4C39-9F6A-0B7D4BD634D9}];2 ;Text17              ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{02B9B85D-1C94-4C6E-BF79-8112E6602D7F}];2 ;Text18              ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{FFB1A1FA-E518-4DEE-8404-3ACF4FC4419D}];2 ;Text19              ;Element ;Text    ;
                                                  MinOccurs=Zero }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100525000;;Container;
                  ContainerType=ContentArea }

      { 1100525001;1;Group  ;
                  CaptionML=[ENU=Options;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1100525002;2;Field  ;
                  CaptionML=[ENU=Invoices;
                             SVE=Fakturor];
                  OptionCaptionML=[ENU=No Action,Create Invoice,Get Receipts,Match ICF;
                                   SVE=Ingen †tg„rd,Skapa faktura,H„mta inleveranser,Matcha ICF];
                  SourceExpr=ProcessType }

    }
  }
  CODE
  {
    VAR
      PurchSetupRec@1100525022 : Record 312;
      VendorRec@1100525019 : Record 23;
      ICFFileRec@1100525018 : Record 11012328;
      ICFLineRec@1100525017 : Record 11012327;
      IcmLicenceCu@1100525014 : Codeunit 11012790;
      Window@1100525013 : Dialog;
      IcfFileLineNo@1100525010 : Integer;
      VendorCode@1100525008 : Code[20];
      VendorInvoice@1100525007 : Code[20];
      RelatedPurchOrder@1100525006 : Code[20];
      CheckInsert@1100525004 : Boolean;
      DocumentDate@1100525003 : Date;
      ProcessType@1100525001 : 'NoAction,CreateInvoice,GetReceipts,MatchICF';
      Text001@1100525030 : TextConst 'ENU=Line No. ICF    #1########\;SVE=Radnr ICF    #1########\';
      Text010@1100525026 : TextConst 'ENU=Select the (1) vendor to import invoices for;SVE=V„lj (1) leverant”r att importera fakturor f”r';
      Text011@1100525025 : TextConst 'ENU=ICF file has no File Header;SVE=ICF-filen saknar filhuvud';
      Text012@1100525024 : TextConst 'ENU=File %1 is already imported for Vendor %2;SVE=Filen %1 har redan importerats f”r leverant”ren %2';
      ClientFileName@1100528500 : Text[250];

    PROCEDURE RegisterDocument@1210190000(lvType@1210190000 : Code[10]);
    BEGIN
      IF lvType = 'BH10' THEN BEGIN  //File header
        ICFFileRec.INIT;
        ICFFileRec.Vendor := VendorCode;
        ICFFileRec.Version := Text2;
        ICFFileRec.Address := Text3;
        ICFFileRec.Sender := Text4;
        ICFFileRec."Send date" := ConvertDate(COPYSTR(Text5, 1, 8));
        IF Text6 <> '' THEN
          EVALUATE(ICFFileRec."Number of Invoices", Text6);
        ICFFileRec."Reference (Vendor)" := Text7;
        IF ClientFileName <> '' THEN
          ICFFileRec."File Name" := ClientFileName
        ELSE
          ICFFileRec."File Name" := currXMLport.FILENAME;
        IF ICFFileRec.INSERT THEN;

        ICFFileRec.MARK := TRUE;
      END;

      IF lvType = 'BT10' THEN BEGIN  //File trailer
        IF Text5 <> '' THEN BEGIN
          EVALUATE(ICFFileRec."Total Amount", Text5);
          ICFFileRec."Total Amount" := ICFFileRec."Total Amount" / 100;
        END;
        ICFFileRec.MODIFY;
      END;
    END;

    PROCEDURE RegisterDetails@1210190004(lvType@1210190000 : Code[10]);
    BEGIN
      IF CheckInsert THEN EXIT;

      ICFLineRec.INIT;
      ICFLineRec.Vendor := VendorCode;
      ICFLineRec."Reference (Vendor)" := ICFFileRec."Reference (Vendor)";
      ICFLineRec."Record Type" := Text1;
      ICFLineRec."Line No. (Internal)" := IcfFileLineNo;
      ICFLineRec."Invoice No. (Vendor)" := VendorInvoice;
      ICFLineRec."Invoice Date" := DocumentDate;
      ICFLineRec."Order No. (Customer)" := RelatedPurchOrder;

      IF lvType = 'FH10' THEN BEGIN
        ICFLineRec.Description := 'Factuurkop';
        ICFLineRec."Invoice Type" := Text2;

        ICFLineRec."Invoice No. (Vendor)" := Text3;
        VendorInvoice :=  ICFLineRec."Invoice No. (Vendor)";
        ICFLineRec."Invoice Date" := ConvertDate(COPYSTR(Text4, 1, 8));
        DocumentDate := ICFLineRec."Invoice Date";
        ICFLineRec."Order No. (Customer)" := COPYSTR(Text8, 1, MAXSTRLEN(ICFLineRec."Order No. (Customer)"));
        RelatedPurchOrder := ICFLineRec."Order No. (Customer)";

        ICFLineRec."Delivery Date" := ConvertDate(COPYSTR(Text5, 1, 8));
        ICFLineRec."Currency Code" := Text6;
        ICFLineRec."Dispatch Note (Vendor)" := Text7;
        ICFLineRec."Adjustment Note" := Text9;
        ICFLineRec."VAT Registration (Customer)" := Text11;
        ICFLineRec."VAT Registration (Vendor)" := Text13;
        CASE ICFLineRec."Invoice Type" OF
          'STD': ICFLineRec.Description := ICFLineRec.Description + ' (factuur)';
          'CRE': ICFLineRec.Description := ICFLineRec.Description + ' (creditnota)';
          'COR': ICFLineRec.Description := ICFLineRec.Description + ' (correctie)';
        END;
        ICFLineRec.INSERT;
      END;

      IF lvType = 'FH20' THEN BEGIN
        ICFLineRec.Description := 'Factuuradres';  //4-8=uitvoeringsadres; 10-14=magazijn
        IF Text4 <> '' THEN
          ICFLineRec."Ship-to Name" := Text4
        ELSE
          ICFLineRec."Ship-to Name" := Text10;
        IF Text5 <> '' THEN
          ICFLineRec."Ship-to Address" := Text5
        ELSE
          ICFLineRec."Ship-to Address" := Text11;
        IF Text6 <> '' THEN
          ICFLineRec."Ship-to City" := Text6
        ELSE
          ICFLineRec."Ship-to City" := Text12;
        IF Text7 <> '' THEN
          ICFLineRec."Ship-to Post Code" := Text7
        ELSE
          ICFLineRec."Ship-to Post Code" := Text13;
        IF Text8 <> '' THEN
          ICFLineRec."Ship-to Country Code" := Text8
        ELSE
          ICFLineRec."Ship-to Country Code" := Text14;
        ICFLineRec.INSERT;
      END;

      IF lvType = 'FH30' THEN BEGIN
        ICFLineRec.Description := 'Betalingskorting';
        IF Text2 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Payment Condition (Period)", Text2);
        END;
        IF Text3 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Payment Condition %", Text3);
          ICFLineRec."Payment Condition %" := ICFLineRec."Payment Condition %" / 100;
        END;
        ICFLineRec.INSERT;
      END;

      IF lvType = 'FH40' THEN BEGIN
        ICFLineRec.Description := 'Kredietbeperking';
        IF Text2 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Credit Limit (Period)", Text2);
        END;
        IF Text3 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Credit Limit %", Text3);
          ICFLineRec."Credit Limit %" := ICFLineRec."Credit Limit %" / 100;
        END;
        ICFLineRec.INSERT;
      END;

      IF lvType = 'FH50' THEN BEGIN
        ICFLineRec.Description := 'Factuurtoeslag';
        ICFLineRec."Surcharge Code (Header)" := Text2;
        IF Text3 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Surcharge Amount (Header)", Text3);
          ICFLineRec."Surcharge Amount (Header)" := ICFLineRec."Surcharge Amount (Header)" / 100;
        END;
        ICFLineRec."Surcharge VAT Code (Header)" := Text4;
        IF Text5 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Surcharge VAT % (Header)", Text5);
          ICFLineRec."Surcharge VAT % (Header)" := ICFLineRec."Surcharge VAT % (Header)" / 100;
        END;
        CASE ICFLineRec."Surcharge Code (Header)" OF
          'CLA': ICFLineRec.Description := ICFLineRec.Description + ' (administratiekosten)';
          'DDL': ICFLineRec.Description := ICFLineRec.Description + ' (afwijkend leveradres)';
          'MAC': ICFLineRec.Description := ICFLineRec.Description + ' (kleine orderkosten)';
          'ADR': ICFLineRec.Description := ICFLineRec.Description + ' (overige toeslagen)';
          'EXC': ICFLineRec.Description := ICFLineRec.Description + ' (overschrijdingstoeslag)';
          'AAT': ICFLineRec.Description := ICFLineRec.Description + ' (spoed/expresorder)';
          'FC' : ICFLineRec.Description := ICFLineRec.Description + ' (vrachtkosten)';
        END;
        ICFLineRec.INSERT;
      END;

      IF lvType = 'FH60' THEN BEGIN
        ICFLineRec.Description := 'Factuurkorting';
        ICFLineRec."Discount Code (Header)" := Text2;
        IF Text3 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Discount Amount (Header)", Text3);
          ICFLineRec."Discount Amount (Header)" := ICFLineRec."Discount Amount (Header)" / 100;
        END;
        ICFLineRec."Discount VAT Code (Header)" := Text4;
        IF Text5 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Discount VAT % (Header)", Text5);
          ICFLineRec."Discount VAT % (Header)" := ICFLineRec."Discount VAT % (Header)" / 100;
        END;
        CASE ICFLineRec."Discount Code (Header)" OF
          'ADO': ICFLineRec.Description := ICFLineRec.Description + ' (logistieke korting)';
          'ADR': ICFLineRec.Description := ICFLineRec.Description + ' (overige kortingen)';
        END;
        ICFLineRec.INSERT;
      END;

      IF lvType = 'FH70' THEN BEGIN
        ICFLineRec.Description := 'Factuurtotaal';
        IF Text2 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Invoice Amount", Text2);
          ICFLineRec."Invoice Amount" := ICFLineRec."Invoice Amount" / 100;
        END;
        IF Text3 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Invoice Net Amount", Text3);
          ICFLineRec."Invoice Net Amount" := ICFLineRec."Invoice Net Amount" / 100;
        END;
        IF Text4 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Invoice Base Amount", Text4);
          ICFLineRec."Invoice Base Amount" := ICFLineRec."Invoice Base Amount" / 100;
        END;
        IF Text5 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Invoice Cost Amount", Text5);
          ICFLineRec."Invoice Cost Amount" := ICFLineRec."Invoice Cost Amount" / 100;
        END;
        IF Text6 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Invoice VAT Amount", Text6);
          ICFLineRec."Invoice VAT Amount" := ICFLineRec."Invoice VAT Amount" / 100;
        END;
        ICFLineRec.INSERT;
      END;

      IF lvType = 'FH80' THEN BEGIN
        ICFLineRec.Description := 'Btw-subtotaal';
        ICFLineRec."VAT Code (Header)" := Text2;
        IF Text3 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."VAT % (Header)", Text3);
          ICFLineRec."VAT % (Header)" := ICFLineRec."VAT % (Header)" / 100;
        END;
        IF Text4 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."VAT Base Amount (Header)", Text4);
          ICFLineRec."VAT Base Amount (Header)" := ICFLineRec."VAT Base Amount (Header)" / 100;
        END;
        IF Text5 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."VAT Amount (Header)", Text5);
          ICFLineRec."VAT Amount (Header)" := ICFLineRec."VAT Amount (Header)" / 100;
        END;
        ICFLineRec.INSERT;
      END;

      IF lvType = 'FR10' THEN BEGIN
        ICFLineRec.Description := 'Factuurregel';
        EVALUATE(ICFLineRec."Line No. (External)", Text2);
        ICFLineRec."Reference (Customer)" := Text3;
        IF Text4 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Quantity (Deliver)", Text4);
          ICFLineRec."Quantity (Deliver)" := ICFLineRec."Quantity (Deliver)" / 1000;
        END;
        ICFLineRec."Unit Code" := Text5;
        IF Text6 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Quantity (Invoice)", Text6);
          ICFLineRec."Quantity (Invoice)" := ICFLineRec."Quantity (Invoice)" / 1000;
        END;
        IF Text7 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Line Amount", Text7);
          ICFLineRec."Line Amount" := ICFLineRec."Line Amount" / 100;
        END;
        ICFLineRec."GTIN Code" := Text8;
        ICFLineRec."Item Code" := Text9;
        ICFLineRec."Item Description" := COPYSTR(Text10, 1, MAXSTRLEN(ICFLineRec."Item Description"));  //db, 12-12-08: M13608
        IF Text11 <> '' THEN BEGIN
          EVALUATE(ICFLineRec.Price, Text11);
          ICFLineRec.Price := ICFLineRec.Price / 100;
        END;
        IF Text12 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Quantity (Price)", Text12);
          ICFLineRec."Quantity (Price)" := ICFLineRec."Quantity (Price)" / 1000;
        END;
        ICFLineRec."Price Unit" := Text13;
        ICFLineRec."VAT Code (Detail)" := Text14;
        IF Text15 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."VAT % (Detail)", Text15);
          ICFLineRec."VAT % (Detail)" := ICFLineRec."VAT % (Detail)" / 100;
        END;
        ICFLineRec.INSERT;
      END;

      IF lvType = 'FR20' THEN BEGIN
        ICFLineRec.Description := 'Factuurregelkorting';
        EVALUATE(ICFLineRec."Line No. (External)", Text2);
        ICFLineRec."Discount Code (Detail)" := Text3;
        IF Text4 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Discount Amount (Detail)", Text4);
          ICFLineRec."Discount Amount (Detail)" := ICFLineRec."Discount Amount (Detail)" / 100;
        END;
        ICFLineRec."Discount VAT Code (Detail)" := Text5;
        IF Text6 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Discount VAT % (Detail)", Text6);
          ICFLineRec."Discount VAT % (Detail)" := ICFLineRec."Discount VAT % (Detail)" / 100;
        END;
        CASE ICFLineRec."Discount Code (Detail)" OF
          'PAD': ICFLineRec.Description := ICFLineRec.Description + ' (actiekorting)';
          'DBD': ICFLineRec.Description := ICFLineRec.Description + ' (klantspecifieke korting)';
          'ADR': ICFLineRec.Description := ICFLineRec.Description + ' (overige korting)';
          'TD' : ICFLineRec.Description := ICFLineRec.Description + ' (standaard korting)';
        END;
        ICFLineRec.INSERT;
      END;

      IF lvType = 'FR30' THEN BEGIN
        ICFLineRec.Description := 'Factuurregeltoeslag';
        EVALUATE(ICFLineRec."Line No. (External)", Text2);
        ICFLineRec."Surcharge Code (Detail)" := Text3;
        IF Text4 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Surcharge Amount (Detail)", Text4);
          ICFLineRec."Surcharge Amount (Detail)" := ICFLineRec."Surcharge Amount (Detail)" / 100;
        END;
        ICFLineRec."Surcharge VAT Code (Detail)" := Text5;
        IF Text6 <> '' THEN BEGIN
          EVALUATE(ICFLineRec."Surcharge VAT % (Detail)", Text6);
          ICFLineRec."Surcharge VAT % (Detail)" := ICFLineRec."Surcharge VAT % (Detail)" / 100;
        END;
        CASE ICFLineRec."Surcharge Code (Detail)" OF
          'EMB': ICFLineRec.Description := ICFLineRec.Description + ' (emballage)';
          'ATR': ICFLineRec.Description := ICFLineRec.Description + ' (heffing auteursrechten)';
          'ADR': ICFLineRec.Description := ICFLineRec.Description + ' (overige toeslagen)';
          'CAI': ICFLineRec.Description := ICFLineRec.Description + ' (snijkosten)';
          'BAT': ICFLineRec.Description := ICFLineRec.Description + ' (verwijderingsbijdrage)';
          'RAD': ICFLineRec.Description := ICFLineRec.Description + ' (verpakkingskosten)';
        END;
        //db.sn, 08-05-09: M14373
        ICFLineRec."Quantity (Invoice)" := 1;  //for matching lines in codeunit 74
        ICFLineRec."Line Amount" := ICFLineRec."Surcharge Amount (Detail)";
        //db.en, 08-05-09: M14373
        ICFLineRec.INSERT;
      END;
    END;

    PROCEDURE ConvertDate@1210190003(DateTxt@1210190000 : Text[10]) : Date;
    VAR
      lvYearNo@1210190003 : Integer;
      lvMonthNo@1210190002 : Integer;
      lvDayNo@1210190001 : Integer;
    BEGIN
      IF DateTxt = '' THEN EXIT(0D);
      IF DateTxt = '00000000' THEN EXIT(0D);
      EVALUATE(lvYearNo, COPYSTR(DateTxt,1,4));
      EVALUATE(lvMonthNo, COPYSTR(DateTxt,5,2));
      EVALUATE(lvDayNo, COPYSTR(DateTxt,7,2));
      EXIT(DMY2DATE(lvDayNo, lvMonthNo, lvYearNo));
    END;

    PROCEDURE ClearText@1210190001();
    BEGIN
      CLEAR(Text1);
      CLEAR(Text2);
      CLEAR(Text3);
      CLEAR(Text4);
      CLEAR(Text5);
      CLEAR(Text6);
      CLEAR(Text7);
      CLEAR(Text8);
      CLEAR(Text9);
      CLEAR(Text10);
      CLEAR(Text11);
      CLEAR(Text12);
      CLEAR(Text13);
      CLEAR(Text14);
      CLEAR(Text15);
      CLEAR(Text16);
      CLEAR(Text17);
      CLEAR(Text18);
      CLEAR(Text19);
    END;

    PROCEDURE PostICF@1100525000();
    VAR
      ProcessICFInvoices@1100525000 : Codeunit 11012791;
    BEGIN
      IF ProcessType = ProcessType::NoAction THEN
        EXIT;

      COMMIT;

      ICFFileRec.MARKEDONLY(TRUE);
      IF ICFFileRec.FINDSET THEN BEGIN
        REPEAT
          CASE ProcessType OF
            ProcessType::CreateInvoice:
              ProcessICFInvoices.ProcessICFLines(ICFFileRec,TRUE,FALSE,FALSE);
            ProcessType::GetReceipts:
              ProcessICFInvoices.ProcessICFLines(ICFFileRec,TRUE, TRUE,FALSE);
            ProcessType::MatchICF:
              ProcessICFInvoices.ProcessICFLines(ICFFileRec,TRUE, TRUE, TRUE);
          END;
        UNTIL ICFFileRec.NEXT = 0;
      END;
      ICFFileRec.MARKEDONLY(FALSE);
    END;

    LOCAL PROCEDURE MoveFileToArchive@1100525001();
    VAR
      FileMgt@1100525000 : Codeunit 419;
    BEGIN
      //C009742
      PurchSetupRec.GET;
      IF PurchSetupRec."File Location ICF Files" = '' THEN
        EXIT;

      IF ClientFileName <> '' THEN
        FileMgt.MoveFile(ClientFileName,FileMgt.CombinePath(PurchSetupRec."File Location ICF Files",FileMgt.GetFileName(ClientFileName)))
      ELSE
        FileMgt.MoveFile(currXMLport.FILENAME,FileMgt.CombinePath(PurchSetupRec."File Location ICF Files",FileMgt.GetFileName(currXMLport.FILENAME)));
    END;

    PROCEDURE SetVendor@1100528500(VendorNo@1100528500 : Code[20]);
    BEGIN
      "ICF Invoice File".SETRANGE(Vendor, VendorNo);
    END;

    PROCEDURE SetFileName@1100528502(FileName@1100528500 : Text);
    BEGIN
      ClientFileName := FileName;
    END;

    PROCEDURE SetProcessType@1100529500(iProcessType@1100529500 : 'NoAction,CreateInvoice,GetReceipts,MatchICF');
    BEGIN
      ProcessType := iProcessType;
    END;

    BEGIN
    {
      CC: Dataport 11012327

      db, 26-11-08: call 13054+13278
      - move functions to create purch.order and match receipts after finishing import invoice specifications
      - activate restart of import; skip marked lines which caused errors and already processed lines

      C051022, 17-01-19: RecordSeparator changed from <CR/LF> to <LF>; option NewLine still doesn't work properly
    }
    END.
  }
}

