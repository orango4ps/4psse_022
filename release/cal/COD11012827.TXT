OBJECT Codeunit 11012827 Maintenance Sales And Cost Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'DEU=Summe der Ratenzahlungsbetr„ge %1 entspricht nicht dem Auftragsbetrag %2;ENU=Total Installment Amounts %1 is not equal to Contract Amount %2;NLD=Totaal termijnbedragen %1 is ongelijk aan contractbedrag %2';
      ServiceSetup@1100529676 : Record 11012800;
      CheckOtherServiceCategories@1100529900 : Boolean;
      HasGotServiceSetup@1100529675 : Boolean;
      TmpMaintenanceSalesRate@1100528500 : TEMPORARY Record 11020579;
      SkipContrInstallmAmntsbyDate@1100528501 : Boolean;
      SkipServiceMaintAgreement@1100528502 : Boolean;

    PROCEDURE GetMaintSlsAndCostsContract@1100525000(VAR lvServContractRec@1100525000 : Record 11012812;VAR lvTotalCostDec@1100525002 : Decimal;VAR lvTotalHoursDec@1100525004 : Decimal;VAR lvTotalRevenueDec@1100525003 : Decimal;VAR lvTotalLaborDec@1100525011 : Decimal;VAR lvTotalMaterialDec@1100525012 : Decimal;VAR lvTotalSubcontractingDec@1100525013 : Decimal;VAR lvTotalPlantDec@1100525014 : Decimal;VAR lvTotalSundryDec@1100525015 : Decimal;VAR lvTotalInstallmDec@1100526202 : Decimal;VAR lvTotalContrAmntDec@1100526214 : Decimal);
    VAR
      ContractObjectMaintenance@1100525001 : Record 11071692;
      lvNoDaysInt@1100525005 : Integer;
      lvStartDatePeriod@1100525006 : Date;
      lvEndDatePeriod@1100525007 : Date;
      ContractObject@1100526200 : Record 11071702;
      lvNoOfDaysYearInt@1100526215 : Integer;
      lvMaintenanceManagement@1100528600 : Codeunit 11012829;
      lvTotalSurcharge@1100528602 : Decimal;
      lvTotalInstallmDecFC@1100528800 : Decimal;
    BEGIN
      lvStartDatePeriod := lvServContractRec.GETRANGEMIN("Period Filter");
      lvEndDatePeriod := lvServContractRec.GETRANGEMAX("Period Filter");

      IF lvStartDatePeriod = 0D THEN
        lvStartDatePeriod := lvServContractRec."Starting Date";

      lvNoOfDaysYearInt := NoOfDaysPerYear(lvStartDatePeriod);

      lvTotalCostDec := 0;
      lvTotalRevenueDec := 0;
      lvTotalHoursDec := 0;
      lvTotalLaborDec := 0;
      lvTotalMaterialDec := 0;
      lvTotalSubcontractingDec := 0;
      lvTotalPlantDec := 0;
      lvTotalSundryDec := 0;
      lvTotalSurcharge := 0;

      ContractObject.SETRANGE("Service Contract No.",lvServContractRec."No.");
      IF ContractObject.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          IF CalculateMaintRevenue(
            lvServContractRec, ContractObject, lvTotalRevenueDec, lvNoDaysInt, lvNoOfDaysYearInt, lvStartDatePeriod,lvEndDatePeriod, '')
          THEN BEGIN
            WITH ContractObjectMaintenance DO BEGIN
              SETRANGE("Service Contract No.",lvServContractRec."No.");
              SETRANGE("Object No.",ContractObject."Service Object No.");
              IF FINDSET(FALSE,FALSE) THEN BEGIN
                REPEAT
                  lvMaintenanceManagement.CalculateMaintBudgetVisit(ContractObjectMaintenance,lvServContractRec,lvTotalLaborDec,
                                                                     lvTotalHoursDec,lvTotalMaterialDec,lvTotalSubcontractingDec,
                                                                     lvTotalPlantDec,lvTotalSundryDec,lvTotalCostDec,lvTotalSurcharge,
                                                                     lvStartDatePeriod,
                                                                     lvEndDatePeriod);
                UNTIL NEXT = 0;
              END;
            END;
          END;
        UNTIL ContractObject.NEXT = 0;
      END;
      GetInstallmentAmount(lvServContractRec,lvTotalInstallmDec,lvTotalInstallmDecFC,
        lvTotalContrAmntDec,lvStartDatePeriod,lvEndDatePeriod);

      lvTotalCostDec += lvTotalSurcharge;
    END;

    PROCEDURE CalculateContractRevenue@1100528602(IServiceContractNo@1100528600 : Code[20];IServiceCategory@1100528611 : Code[10];IPeriodStartingDate@1100528601 : Date;IPeriodEndingDate@1100528602 : Date) : Decimal;
    VAR
      ServiceContract@1100528610 : Record 11012812;
      ContractObject@1100528609 : Record 11071702;
      NoOfDaysYear@1100528608 : Integer;
      NoOfDays@1100528607 : Integer;
      TotalRevenue@1100528606 : Decimal;
      TotalInstallmentAmount@1100528605 : Decimal;
      TotalInstallmentAmountFC@1100528604 : Decimal;
      TotalContractAmount@1100528603 : Decimal;
    BEGIN
      ServiceContract.GET(IServiceContractNo);
      IF ServiceContract."Contract Form" = ServiceContract."Contract Form"::"Framework Contract" THEN
        EXIT;
      IF IPeriodStartingDate = 0D THEN
        IPeriodStartingDate := ServiceContract."Starting Date";
      TmpMaintenanceSalesRate.DELETEALL;
      NoOfDaysYear := NoOfDaysPerYear(IPeriodStartingDate);

      IF ServiceContract."Invoice Type" = ServiceContract."Invoice Type"::Dynamic THEN BEGIN
        SetSkipChecks(IServiceContractNo, IPeriodEndingDate);
        ContractObject.SETRANGE("Service Contract No.", IServiceContractNo);
        ContractObject.SETRANGE("Service Category (Contract)", IServiceCategory);
        IF ContractObject.FINDSET THEN BEGIN
          REPEAT
            ContractObject.TESTFIELD("Invoice From");
            CalculateMaintRevenue(ServiceContract, ContractObject, TotalRevenue, NoOfDays, NoOfDaysYear,
              IPeriodStartingDate, IPeriodEndingDate, IServiceCategory);
          UNTIL ContractObject.NEXT = 0;
        END;
        EXIT(TotalRevenue);
      END ELSE BEGIN
        GetInstallmentAmountByCategoryWithUpdate(
          ServiceContract, IServiceCategory, TotalInstallmentAmount, TotalInstallmentAmountFC, TotalContractAmount,
          IPeriodStartingDate, IPeriodEndingDate, TRUE);
        EXIT(TotalInstallmentAmount);
      END;
    END;

    LOCAL PROCEDURE CalculateMaintRevenue@1100526204(IServiceContract@1100526205 : Record 11012812;IContractObject@1100526200 : Record 11071702;VAR OTotalRevenue@1100526202 : Decimal;VAR ONoDays@1100526204 : Integer;INoOfDaysYear@1100526203 : Integer;IStartDatePeriod@1100526207 : Date;IEndDatePeriod@1100526206 : Date;IServiceCategory@1100528603 : Code[10]) InDateFilter : Boolean;
    VAR
      MaintenanceInvoiceMgt@1100528600 : Codeunit 11012828;
      Revenue@1100526201 : Decimal;
      RecordFound@1100409000 : Boolean;
      InvoiceFrom@1100525000 : Date;
      UnitPrice@1100528601 : Decimal;
      TotalDiscount@1100528602 : Decimal;
      PeriodRevenue@1100529900 : Decimal;
      ServiceMaintAgreement@1100525001 : Record 11071973;
    BEGIN
      IContractObject.CALCFIELDS("Standard Object No.");
      IContractObject.CALCFIELDS("Object Group");
      IF IContractObject."Ending Date" = 0D THEN
        IContractObject."Ending Date" := IEndDatePeriod;
      IF IStartDatePeriod <= IContractObject."Ending Date" THEN BEGIN
      //C032225.so
      //  IF IContractObject."Invoiced Until" <> 0D THEN
      //    InvoiceFrom := IContractObject."Invoiced Until" +1
      //  ELSE
      //C032225.eo
        InvoiceFrom := IContractObject."Invoice From";
        IF InvoiceFrom = 0D THEN BEGIN
          IServiceContract.TESTFIELD("Starting Date");
          InvoiceFrom := IServiceContract."Starting Date";
        END;
        ONoDays := DetermineNoOfDays(IServiceContract, IStartDatePeriod, IEndDatePeriod, InvoiceFrom, IContractObject."Ending Date");
        IF NOT SkipContrInstallmAmntsbyDate THEN
          Revenue :=
            MaintenanceInvoiceMgt.GetSCObjectPriceAgreementByDat(
              IContractObject."Service Contract No.", IContractObject."Service Object No.", IEndDatePeriod, RecordFound);
      //** C041764.sn
        IF NOT SkipServiceMaintAgreement THEN
          IF NOT RecordFound THEN
            IF IContractObject.DetermineAgreement(ServiceMaintAgreement) THEN
              Revenue := ServiceMaintAgreement.GetServiceRate(IEndDatePeriod, RecordFound);
      //**C041764.en
        IF NOT RecordFound THEN
          Revenue := GetRate(IServiceContract."Customer No.",
                                  IEndDatePeriod,
                                  IContractObject."Object Group",
                                  IContractObject."Customer Object Group",
                                  IContractObject."Service Package");
        Revenue *= IContractObject.GetQuantity(IEndDatePeriod);
        UnitPrice := Revenue / INoOfDaysYear;
        PeriodRevenue := UnitPrice * ONoDays;
        IF IServiceContract."Dynamic Invoice Type" = IServiceContract."Dynamic Invoice Type"::Days THEN
          TotalDiscount := GetDynamicRevenueTotalDiscount(IContractObject, IStartDatePeriod, IEndDatePeriod, UnitPrice)
        ELSE
          TotalDiscount := GetDynamicFixedRevenueTotalDiscount(IContractObject, IStartDatePeriod, IEndDatePeriod, UnitPrice);
        PeriodRevenue += TotalDiscount;

        OTotalRevenue += PeriodRevenue;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE GetInstallmentAmount@1100526203(IServiceContract@1100526200 : Record 11012812;VAR OTotalInstallmentAmount@1100526202 : Decimal;VAR OTotalInstallmentAmountFC@1100528800 : Decimal;VAR OTotalContractAmount@1100526201 : Decimal;IStartDatePeriod@1100526207 : Date;IEndDatePeriod@1100526206 : Date);
    BEGIN
      GetInstallmentAmountWithUpdate(
        IServiceContract, OTotalInstallmentAmount, OTotalInstallmentAmountFC, OTotalContractAmount,
        IStartDatePeriod, IEndDatePeriod, FALSE);
    END;

    PROCEDURE GetInstallmentAmountWithUpdate@1100528600(IServiceContract@1100526200 : Record 11012812;VAR OTotalInstallmentAmount@1100526202 : Decimal;VAR OTotalInstallmentAmountFC@1100528800 : Decimal;VAR OTotalContractAmount@1100526201 : Decimal;IStartDatePeriod@1100526207 : Date;IEndDatePeriod@1100526206 : Date;IUpdateAmounts@1100528602 : Boolean);
    BEGIN
      GetInstallmentAmountByCategoryWithUpdate(
        IServiceContract, '', OTotalInstallmentAmount, OTotalInstallmentAmountFC, OTotalContractAmount, IStartDatePeriod, IEndDatePeriod, IUpdateAmounts);
    END;

    PROCEDURE GetInstallmentAmountByCategoryWithUpdate@1100528601(IServiceContract@1100526200 : Record 11012812;IServiceCategory@1100528603 : Code[10];VAR OTotalInstallmentAmount@1100526202 : Decimal;VAR OTotalInstallmentAmountFC@1100528800 : Decimal;VAR OTotalContractAmount@1100526201 : Decimal;IStartDatePeriod@1100526207 : Date;IEndDatePeriod@1100526206 : Date;IUpdateAmounts@1100528602 : Boolean);
    VAR
      ContractInstallment@1100526203 : Record 11071707;
      Currency@1100528607 : Record 4;
      CurrencyFCY@1100529600 : Record 4;
      ServiceCategory@1100529601 : Record 11071985;
      StartContractDate@1100526205 : Date;
      EndContractDate@1100526204 : Date;
      NoDaysInt@1100526208 : Integer;
      MaintenanceInvoiceMgt@1100526215 : Codeunit 11012828;
      NoOfDaysYearInt@1100526216 : Integer;
      InstallmStartingDate@1100528601 : Date;
      OriginalInstallmStartingDate@1100528612 : Date;
      InstallmEndingDate@1100528600 : Date;
      InvoiceInterval@1100525000 : DateFormula;
      InstallmentAmount@1100528604 : Decimal;
      InstallmentDiscountAmount@1100528610 : Decimal;
      InstallmentAmountFC@1100528605 : Decimal;
      InstallmentDiscountAmountFC@1100528611 : Decimal;
      DivisionPercentage@1100528606 : Decimal;
      TotalInstallmentAmount@1100529605 : Decimal;
      TotalInstallmentDiscountAmount@1100529604 : Decimal;
      TotalInstallmentAmountFC@1100529603 : Decimal;
      TotalInstallmentDiscountAmountFC@1100529602 : Decimal;
      OrigTotalInstallmentAmount@1100529617 : Decimal;
      OrigTotalInstallmentDiscountAmount@1100529616 : Decimal;
      OrigTotalInstallmentAmountFC@1100529615 : Decimal;
      OrigTotalInstallmentDiscountAmountFC@1100529614 : Decimal;
      RemInstallmentAmount@1100529609 : Decimal;
      RemInstallmentDiscountAmount@1100529608 : Decimal;
      RemInstallmentAmountFC@1100529607 : Decimal;
      RemInstallmentDiscountAmountFC@1100529606 : Decimal;
      RoundInstallmentAmount@1100529613 : Decimal;
      RoundInstallmentDiscountAmount@1100529612 : Decimal;
      RoundInstallmentAmountFC@1100529611 : Decimal;
      RoundInstallmentDiscountAmountFC@1100529610 : Decimal;
      InstallmentNoOfDays@1100529618 : Integer;
      CurrPeriodNoOfDays@1100529619 : Integer;
    BEGIN
      //Calculate Installment Amount
      Currency.InitRoundingPrecision;
      IF NOT CurrencyFCY.GET(IServiceContract."Currency Code") THEN
        CurrencyFCY.InitRoundingPrecision;

      WITH ContractInstallment DO BEGIN
        OTotalInstallmentAmount := 0;
        OTotalInstallmentAmountFC := 0;
        OTotalContractAmount := 0;
        IF IServiceContract."Invoice Type" = IServiceContract."Invoice Type"::Installments THEN BEGIN

          NoOfDaysYearInt := NoOfDaysPerYear(IStartDatePeriod);

          IF (IServiceContract."Starting Date" <> 0D) AND (IServiceContract."Starting Date" > IStartDatePeriod) THEN
            StartContractDate := IServiceContract."Starting Date"
          ELSE
            StartContractDate := IStartDatePeriod;

          IF (IServiceContract."Ending Date" <> 0D) AND (IServiceContract."Ending Date" < IEndDatePeriod) THEN
            EndContractDate := IServiceContract."Ending Date"
          ELSE
            EndContractDate := IEndDatePeriod;

          SETRANGE("Service Contract No.", IServiceContract."No.");
          SETFILTER("Service Category", '%1|%2', '', IServiceCategory);
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            REPEAT
              IF IServiceContract."Installments based on Progress" THEN
                InvoiceInterval := IServiceContract."Control Period Interval"
              ELSE
                InvoiceInterval := "Invoice Interval";
              IF FORMAT(InvoiceInterval) <> '' THEN BEGIN
                InstallmStartingDate := StartContractDate;
                InstallmEndingDate := EndContractDate;

                IF "Invoice From" <> 0D THEN
                  InstallmStartingDate := "Invoice From";
                IF ("Ending Date" <> 0D) AND ("Ending Date" < InstallmEndingDate) THEN
                  InstallmEndingDate := "Ending Date";
                OriginalInstallmStartingDate := InstallmStartingDate;
                IF ContractInstallment."Invoice Period" = ContractInstallment."Invoice Period"::Afterwards THEN
                  InstallmStartingDate := CALCDATE(InvoiceInterval, InstallmStartingDate) -1;
                REPEAT
                  IF InstallmStartingDate <= InstallmEndingDate THEN BEGIN
                    ContractInstallment."Invoiced Until" := InstallmStartingDate;
                    IF IUpdateAmounts AND (IServiceContract."Installment Type" = IServiceContract."Installment Type"::Object) THEN
                      MaintenanceInvoiceMgt.DetermineInstallmentAmount(IServiceContract."No.", InstallmStartingDate);

                    IF ContractInstallment."Invoice Period" = ContractInstallment."Invoice Period"::Forehand THEN BEGIN
                      InstallmentNoOfDays := NoOfDaysInterval(IServiceContract, InstallmStartingDate, CALCDATE(InvoiceInterval, InstallmStartingDate) - 1);
                      CurrPeriodNoOfDays := DetermineNoOfDays(IServiceContract, InstallmStartingDate, CALCDATE(InvoiceInterval, InstallmStartingDate) - 1, IStartDatePeriod, IEndDatePeriod);
                    END ELSE BEGIN
                      InstallmentNoOfDays := NoOfDaysInterval(IServiceContract, OriginalInstallmStartingDate, InstallmStartingDate);
                      CurrPeriodNoOfDays := DetermineNoOfDays(IServiceContract, OriginalInstallmStartingDate, InstallmStartingDate, IStartDatePeriod, IEndDatePeriod);
                    END;

                    IF "Service Category" = '' THEN BEGIN
                      IServiceContract.SetCheckOtherServiceCategories(CheckOtherServiceCategories);
                      DivisionPercentage := IServiceContract.GetCategoryDivisionPercentage(IServiceCategory, InstallmStartingDate);
                    END ELSE
                      DivisionPercentage := 100;

                    IF (DivisionPercentage <> 0) AND (CurrPeriodNoOfDays > 0) THEN BEGIN
                      IF ("Service Category" = '') AND (IServiceCategory <> '') AND CheckOtherServiceCategories AND (DivisionPercentage <> 100) THEN BEGIN
                        OrigTotalInstallmentAmount := ROUND(MaintenanceInvoiceMgt.GetInstallmAmntLCYByDate(ContractInstallment), Currency."Amount Rounding Precision");
                        OrigTotalInstallmentAmountFC := ROUND(MaintenanceInvoiceMgt.GetInstallmAmntByDate(ContractInstallment), CurrencyFCY."Amount Rounding Precision");
                        OrigTotalInstallmentDiscountAmount :=
                          ROUND(-GetInstallmentRevenueTotalDiscount(ContractInstallment, InstallmStartingDate, CALCDATE(InvoiceInterval, InstallmStartingDate) -1, OrigTotalInstallmentAmount, TRUE),
                                Currency."Amount Rounding Precision");
                        OrigTotalInstallmentDiscountAmountFC :=
                          ROUND(-GetInstallmentRevenueTotalDiscount(ContractInstallment, InstallmStartingDate, CALCDATE(InvoiceInterval, InstallmStartingDate) -1, OrigTotalInstallmentAmountFC, FALSE),
                                CurrencyFCY."Amount Rounding Precision");

                        TotalInstallmentAmount := 0;
                        TotalInstallmentDiscountAmount := 0;
                        TotalInstallmentAmountFC := 0;
                        TotalInstallmentDiscountAmountFC := 0;

                        RemInstallmentAmount := 0;
                        RemInstallmentDiscountAmount := 0;
                        RemInstallmentAmountFC := 0;
                        RemInstallmentDiscountAmountFC := 0;

                        ServiceCategory.SETRANGE("Service Contract No.", "Service Contract No.");
                        ServiceCategory.FINDSET;
                        REPEAT
                          DivisionPercentage := IServiceContract.GetCategoryDivisionPercentage(ServiceCategory.Code, InstallmStartingDate);
                          IF DivisionPercentage <> 0 THEN BEGIN
                            InstallmentAmount := MaintenanceInvoiceMgt.GetInstallmAmntLCYByDate(ContractInstallment) * DivisionPercentage / 100 - RemInstallmentAmount;
                            RoundInstallmentAmount := ROUND(InstallmentAmount, Currency."Amount Rounding Precision");
                            RemInstallmentAmount := RoundInstallmentAmount - InstallmentAmount;
                            TotalInstallmentAmount += RoundInstallmentAmount;

                            InstallmentDiscountAmount :=
                              -GetInstallmentRevenueTotalDiscount(ContractInstallment, InstallmStartingDate, CALCDATE(InvoiceInterval, InstallmStartingDate) -1, RoundInstallmentAmount, TRUE)
                                * DivisionPercentage / 100 - RemInstallmentDiscountAmount;
                            RoundInstallmentDiscountAmount := ROUND(InstallmentDiscountAmount, Currency."Amount Rounding Precision");
                            RemInstallmentDiscountAmount := RoundInstallmentDiscountAmount - InstallmentDiscountAmount;
                            TotalInstallmentDiscountAmount += RoundInstallmentDiscountAmount;

                            InstallmentAmountFC := MaintenanceInvoiceMgt.GetInstallmAmntByDate(ContractInstallment) * DivisionPercentage / 100 - RemInstallmentAmountFC;
                            RoundInstallmentAmountFC := ROUND(InstallmentAmountFC, CurrencyFCY."Amount Rounding Precision");
                            RemInstallmentAmountFC := RoundInstallmentAmountFC - InstallmentAmountFC;
                            TotalInstallmentAmountFC += RoundInstallmentAmountFC;

                            InstallmentDiscountAmountFC :=
                              -GetInstallmentRevenueTotalDiscount(ContractInstallment, InstallmStartingDate, CALCDATE(InvoiceInterval, InstallmStartingDate) -1, RoundInstallmentAmountFC, FALSE)
                                * DivisionPercentage / 100 - RemInstallmentDiscountAmountFC;
                            RoundInstallmentDiscountAmountFC := ROUND(InstallmentDiscountAmountFC, CurrencyFCY."Amount Rounding Precision");
                            RemInstallmentDiscountAmountFC := RoundInstallmentDiscountAmountFC - InstallmentDiscountAmountFC;
                            TotalInstallmentDiscountAmountFC += RoundInstallmentDiscountAmountFC;
                          END ELSE
                            RoundInstallmentAmount := 0;
                        UNTIL (ServiceCategory.Code = IServiceCategory) OR (ServiceCategory.NEXT = 0);

                        ServiceCategory.FINDLAST;
                        IF ServiceCategory.Code = IServiceCategory THEN BEGIN
                          IF OrigTotalInstallmentAmount - TotalInstallmentAmount <> 0 THEN
                            RoundInstallmentAmount += OrigTotalInstallmentAmount - TotalInstallmentAmount;
                          IF OrigTotalInstallmentDiscountAmount - TotalInstallmentDiscountAmount <> 0 THEN
                            RoundInstallmentDiscountAmount += OrigTotalInstallmentDiscountAmount - TotalInstallmentDiscountAmount;
                          IF OrigTotalInstallmentAmountFC - TotalInstallmentAmountFC <> 0 THEN
                            RoundInstallmentAmountFC += OrigTotalInstallmentAmountFC - TotalInstallmentAmountFC;
                          IF OrigTotalInstallmentDiscountAmountFC - TotalInstallmentDiscountAmountFC <> 0 THEN
                            RoundInstallmentDiscountAmountFC += OrigTotalInstallmentDiscountAmountFC - TotalInstallmentDiscountAmountFC;
                        END;
                      END ELSE BEGIN
                        RoundInstallmentAmount := ROUND(MaintenanceInvoiceMgt.GetInstallmAmntLCYByDate(ContractInstallment) * DivisionPercentage / 100, Currency."Amount Rounding Precision");
                        RoundInstallmentDiscountAmount :=
                          ROUND(-GetInstallmentRevenueTotalDiscount(ContractInstallment, InstallmStartingDate, CALCDATE(InvoiceInterval, InstallmStartingDate) -1, RoundInstallmentAmount, TRUE)
                                * DivisionPercentage / 100, Currency."Amount Rounding Precision");

                        RoundInstallmentAmountFC := ROUND(MaintenanceInvoiceMgt.GetInstallmAmntByDate(ContractInstallment) * DivisionPercentage / 100, CurrencyFCY."Amount Rounding Precision");
                        RoundInstallmentDiscountAmountFC :=
                          ROUND(-GetInstallmentRevenueTotalDiscount(ContractInstallment, InstallmStartingDate, CALCDATE(InvoiceInterval, InstallmStartingDate) -1, RoundInstallmentAmountFC, FALSE)
                                * DivisionPercentage / 100, Currency."Amount Rounding Precision");
                      END;
                      OTotalInstallmentAmount += ROUND((RoundInstallmentAmount - RoundInstallmentDiscountAmount) * CurrPeriodNoOfDays / InstallmentNoOfDays, Currency."Amount Rounding Precision");
                      OTotalInstallmentAmountFC += ROUND((RoundInstallmentAmountFC - RoundInstallmentDiscountAmountFC) * CurrPeriodNoOfDays / InstallmentNoOfDays, CurrencyFCY."Amount Rounding Precision");
                    END;
                    InstallmStartingDate := CALCDATE(InvoiceInterval, InstallmStartingDate);
                    OriginalInstallmStartingDate := CALCDATE(InvoiceInterval, OriginalInstallmStartingDate);
                  END;
                UNTIL InstallmStartingDate > InstallmEndingDate;
              END;
            UNTIL NEXT = 0;
          END;
          IServiceContract.SetCheckOtherServiceCategories(CheckOtherServiceCategories);
          DivisionPercentage := IServiceContract.GetCategoryDivisionPercentage(IServiceCategory, IEndDatePeriod);
          NoDaysInt := DetermineNoOfDays(IServiceContract, IStartDatePeriod, IEndDatePeriod, IStartDatePeriod, IEndDatePeriod);
          OTotalContractAmount :=
            ROUND(MaintenanceInvoiceMgt.GetContractAmntLCYByDate(IServiceContract, IEndDatePeriod) / NoOfDaysYearInt * NoDaysInt * DivisionPercentage / 100);
        END;
      END;
    END;

    PROCEDURE DetermineNoOfDays@1100526200(ServiceContract@1100529675 : Record 11012812;lvStartDatePeriod@1100526200 : Date;lvEndDatePeriod@1100526201 : Date;lvStartingDate@1100526203 : Date;lvEndingDate@1100526202 : Date) lvNoDaysInt : Integer;
    BEGIN
      IF lvEndingDate = 0D THEN
        lvEndingDate := lvEndDatePeriod;

      IF lvStartingDate < lvStartDatePeriod THEN
        lvStartingDate := lvStartDatePeriod;

      IF lvEndingDate > lvEndDatePeriod THEN
        lvEndingDate := lvEndDatePeriod;

      EXIT(NoOfDaysInterval(ServiceContract, lvStartingDate, lvEndingDate));
    END;

    PROCEDURE GetMaintSlsRateContrObjLCY@1100525002(lvObjectByContractRec@1100525000 : Record 11071702) MaintSalesRate : Decimal;
    VAR
      lvContractRec@1100525001 : Record 11012812;
      lvIndexDate@1100528600 : Date;
    BEGIN
      // dp00116: GetMaintSlsRateContrObj renamed to GetMaintSlsRateContrObjLCY
      IF lvContractRec.GET(lvObjectByContractRec."Service Contract No.") THEN BEGIN
        lvObjectByContractRec.CALCFIELDS("Standard Object No.");
        lvObjectByContractRec.CALCFIELDS("Object Group", "Invoice Interval");

        IF (lvContractRec."Invoiced Until" <> 0D) AND (FORMAT(lvContractRec."Invoice Interval") <> '')THEN
          lvIndexDate := CALCDATE(lvContractRec."Invoice Interval", lvContractRec."Invoiced Until")
        ELSE
          lvIndexDate := lvObjectByContractRec."Invoice From";

        EXIT(GetRate(lvContractRec."Customer No.",
                     lvIndexDate,
                     lvObjectByContractRec."Object Group",
                     lvObjectByContractRec."Customer Object Group",
                     lvObjectByContractRec."Service Package"));
      END ELSE
        EXIT(0);
    END;

    PROCEDURE GetMaintSlsRateContrObj@1100528800(lvObjectByContractRec@1100525000 : Record 11071702) MaintSalesRate : Decimal;
    VAR
      lvContractRec@1100525001 : Record 11012812;
      lvIndexDate@1100528600 : Date;
      ServiceRateLCY@1100528801 : Decimal;
    BEGIN
      // dp00116.n
      IF lvContractRec.GET(lvObjectByContractRec."Service Contract No.") THEN BEGIN
        lvObjectByContractRec.CALCFIELDS("Standard Object No.");
        lvObjectByContractRec.CALCFIELDS("Object Group", "Invoice Interval");

        IF (lvContractRec."Invoiced Until" <> 0D) AND (FORMAT(lvContractRec."Invoice Interval") <> '')THEN
          lvIndexDate := CALCDATE(lvContractRec."Invoice Interval", lvContractRec."Invoiced Until")
        ELSE
          lvIndexDate := lvObjectByContractRec."Invoice From";

        ServiceRateLCY := GetRate(lvContractRec."Customer No.",
                     lvIndexDate,
                     lvObjectByContractRec."Object Group",
                     lvObjectByContractRec."Customer Object Group",
                     lvObjectByContractRec."Service Package");

        EXIT(CalcServiceRateFromLCY(ServiceRateLCY,lvContractRec."Currency Code"));
      END ELSE
        EXIT(0);
    END;

    PROCEDURE GetRate@1100525003(ICustomerCde@1100525000 : Code[20];IIndexDate@1100525001 : Date;IObjectGroupCde@1100525002 : Code[10];ICustomerObjectGroupCde@1100526200 : Code[10];IServicePackageCde@1100525003 : Code[20]) RateDec : Decimal;
    VAR
      MaintenanceSalesRate@1100525004 : Record 11020341;
    BEGIN
      IF IIndexDate = 0D THEN
        IIndexDate := TODAY();
      IF TmpMaintenanceSalesRate.GET(ICustomerCde, FORMAT(IIndexDate, 0, '<Year4><Month,2><Day,2>'), IObjectGroupCde, ICustomerObjectGroupCde, IServicePackageCde, '') THEN
        EXIT(TmpMaintenanceSalesRate.Dec1);
      WITH MaintenanceSalesRate DO BEGIN
        SETRANGE("Service Package", IServicePackageCde);
        SETRANGE("Reference Date", 0D, IIndexDate);
        IF NOT ISEMPTY THEN BEGIN
          IF ICustomerObjectGroupCde = '' THEN BEGIN
            SETRANGE("Object Group", IObjectGroupCde);
            SETRANGE("Object Group Type", "Object Group Type"::Standard);
          END ELSE BEGIN
            SETRANGE("Object Group", ICustomerObjectGroupCde);
            SETRANGE("Object Group Type", "Object Group Type"::Customer);
          END;
          SETRANGE("Customer No.", ICustomerCde);
          IF NOT ISEMPTY THEN BEGIN
            FINDLAST;
            RateDec := "Sales Rate";
          END;

          IF RateDec = 0 THEN
            IF ICustomerObjectGroupCde <> '' THEN BEGIN
              SETRANGE("Object Group", IObjectGroupCde);
              SETRANGE("Object Group Type", "Object Group Type"::Standard);
              IF NOT ISEMPTY THEN BEGIN
                FINDLAST;
                RateDec := "Sales Rate";
              END;
            END;

          IF RateDec = 0 THEN BEGIN
            SETRANGE("Customer No.", '');
            IF NOT ISEMPTY THEN BEGIN
              FINDLAST;
              RateDec := "Sales Rate";
            END;
          END;
        END;
      END;
      RateDec *= 1 - GetDiscountPerc(ICustomerCde, IIndexDate) / 100;
      InsertTmpMaintenanceSalesRate(ICustomerCde, IIndexDate, IObjectGroupCde, ICustomerObjectGroupCde, IServicePackageCde, RateDec);
    END;

    PROCEDURE GetDiscountPerc@1100526201(ICustomerCde@1100526205 : Code[20];IIndexDate@1100526204 : Date) DiscountDec : Decimal;
    VAR
      MaintenanceSalesDiscount@1100526200 : Record 11071709;
      Customer@1100526206 : Record 18;
    BEGIN
      WITH MaintenanceSalesDiscount DO BEGIN
        SETCURRENTKEY("Customer No.");
        SETRANGE("Index Date", 0D, IIndexDate);
        SETRANGE("Customer No.", ICustomerCde);
        IF ISEMPTY THEN BEGIN
          IF NOT Customer.GET(ICustomerCde) THEN
            Customer.INIT;
          SETCURRENTKEY("Customer Disc. Group");
          SETRANGE("Customer No.", '');
          SETRANGE("Customer Disc. Group", Customer."Customer Disc. Group");
        END;
        IF ISEMPTY THEN BEGIN
          SETRANGE("Customer No.", '');
          SETRANGE("Customer Disc. Group", '');
        END;
        IF ISEMPTY THEN
          EXIT(0);
        FINDLAST;
        DiscountDec := "Discount %";
      END;
    END;

    PROCEDURE NoOfDaysPerYear@1100526202(IStartDate@1100525000 : Date) : Integer;
    VAR
      EndDate@1100525004 : Date;
    BEGIN
      GetServiceSetup;
      IF ServiceSetup."Calc. Revenue Based on 360 D." THEN
        EXIT(360);
      EndDate := CALCDATE('<+1Y>', IStartDate);
      EXIT(EndDate - IStartDate);
    END;

    PROCEDURE CalcServiceRateFromLCY@1100528802(ContractRateLCY@1100528803 : Decimal;CurrencyCode@1100528804 : Code[10]) ContractRate : Decimal;
    VAR
      CurrencyDate@1100528802 : Date;
      CurrencyExchangeRate@1100528801 : Record 330;
      Currency2@1100528800 : Record 4;
    BEGIN
      // dp00116.n
      Currency2.InitRoundingPrecision;
      IF CurrencyCode <> '' THEN BEGIN
        CurrencyDate := TODAY;
        ContractRate :=
        ROUND(
          CurrencyExchangeRate.ExchangeAmtLCYToFCY(
            0, '', CurrencyDate, CurrencyCode, ContractRateLCY,
            CurrencyExchangeRate.ExchangeRate(0, '', CurrencyDate, CurrencyCode,TRUE),TRUE),
            Currency2."Amount Rounding Precision");
      END ELSE BEGIN
        ContractRate := ROUND(ContractRateLCY,Currency2."Amount Rounding Precision");
      END;
    END;

    PROCEDURE CheckInstallAmountsWithContractAmount@1100528605(IServiceContractNo@1100528601 : Code[20];IType@1100528600 : 'Service Contract,Installment,Price Agreement');
    VAR
      ServiceContract@1100525001 : Record 11012812;
      GetMaintenanceSalesAndCost@1100525000 : Codeunit 11012827;
      TotalInstallmentAmount@1100525002 : Decimal;
      ContractAmount@1100525004 : Decimal;
    BEGIN
      IF NOT (IType IN [IType::Installment, IType::"Service Contract"]) THEN
        EXIT;
      IF NOT ServiceContract.GET(IServiceContractNo) THEN
        EXIT;
      TotalInstallmentAmount := GetMaintenanceSalesAndCost.GetInstallmentAmountPerYear(ServiceContract, CALCDATE('<CY>'), FALSE, ContractAmount);
      IF TotalInstallmentAmount <> ContractAmount THEN
        MESSAGE(Text000, TotalInstallmentAmount, ContractAmount);
    END;

    LOCAL PROCEDURE GetInstallmentRevenueTotalDiscount@1100528633(IContractInstallment@1100528600 : Record 11071707;IInvoiceFrom@1100528601 : Date;IInvoiceUntil@1100528602 : Date;IUnitPrice@1100528609 : Decimal;ILCY@1100528613 : Boolean) UnitPrice : Decimal;
    VAR
      Date@1100528603 : Record 2000000007;
      ServiceSalesDiscSurch@1100528606 : Record 11072237;
      MaintenanceInvoiceMgt@1100528611 : Codeunit 11012828;
      LastDiscountCalcStartDate@1100528604 : Date;
      DiscountPeriodEnd@1100528607 : Date;
      AmountPerMonth@1100528610 : Decimal;
    BEGIN
      Date.SETRANGE("Period Type", Date."Period Type"::Month);
      Date.SETRANGE("Period Start", IInvoiceFrom, IInvoiceUntil);
      IF NOT Date.FINDSET THEN
        EXIT;
      LastDiscountCalcStartDate := IInvoiceFrom;
      REPEAT
        IF IContractInstallment.GetServiceSalesDiscount(Date."Period Start", ServiceSalesDiscSurch, DiscountPeriodEnd) THEN BEGIN
          IF ServiceSalesDiscSurch.Percentage <> 0 THEN BEGIN
            AmountPerMonth := IUnitPrice / MaintenanceInvoiceMgt.ConvertPeriodToNoOfMonths(IContractInstallment."Invoice Interval");
            UnitPrice += -AmountPerMonth * ServiceSalesDiscSurch.Percentage / 100
          END ELSE
            IF ILCY THEN
              UnitPrice += -ServiceSalesDiscSurch."Amount (LCY)" / MaintenanceInvoiceMgt.ConvertPeriodToNoOfMonths(ServiceSalesDiscSurch.Period)
            ELSE
              UnitPrice += -ServiceSalesDiscSurch.Amount / MaintenanceInvoiceMgt.ConvertPeriodToNoOfMonths(ServiceSalesDiscSurch.Period);
        END;
      UNTIL Date.NEXT = 0;
    END;

    LOCAL PROCEDURE GetDynamicRevenueTotalDiscount@1100528606(IContractObject@1100528603 : Record 11071702;IPeriodStart@1100528602 : Date;IPeriodEnd@1100528600 : Date;IUnitPrice@1100528604 : Decimal) TotalDiscount : Decimal;
    VAR
      Date@1100528601 : Record 2000000007;
      ServiceSalesDiscSurch@1100528606 : Record 11072237;
      LastServiceSalesDiscSurch@1100528608 : Record 11072237;
      LastDiscountCalcStartDate@1100528605 : Date;
      LastDiscountCalcEndDate@1100528611 : Date;
      DiscountPeriodEnd@1100528607 : Date;
      UnitPrice@1100528610 : Decimal;
    BEGIN
      LastDiscountCalcStartDate := IPeriodStart;
      IF LastDiscountCalcStartDate < IContractObject."Invoice From" THEN
        LastDiscountCalcStartDate := IContractObject."Invoice From";
      LastDiscountCalcEndDate := IPeriodEnd;
      Date.SETRANGE("Period Type", Date."Period Type"::Month);
      Date.SETRANGE("Period Start", LastDiscountCalcStartDate, IPeriodEnd);
      IF Date.ISEMPTY THEN
        EXIT;
      Date.FINDSET;
      REPEAT
        IF IContractObject.GetServiceSalesDiscount(Date."Period Start", ServiceSalesDiscSurch, DiscountPeriodEnd) THEN BEGIN
          IF FORMAT(LastServiceSalesDiscSurch) <> FORMAT(ServiceSalesDiscSurch) THEN BEGIN
            IF LastServiceSalesDiscSurch.Code <> '' THEN BEGIN
              UnitPrice := -IUnitPrice * LastServiceSalesDiscSurch.Percentage / 100;
              TotalDiscount += UnitPrice * (LastDiscountCalcEndDate - LastDiscountCalcStartDate +1);
              LastDiscountCalcStartDate := LastDiscountCalcEndDate +1;
              IF LastDiscountCalcStartDate < ServiceSalesDiscSurch."Starting Date" THEN
                LastDiscountCalcStartDate := ServiceSalesDiscSurch."Starting Date";
              UnitPrice := 0;
            END;
            LastServiceSalesDiscSurch := ServiceSalesDiscSurch;
          END;

          LastDiscountCalcEndDate := NORMALDATE(Date."Period End");
          IF LastDiscountCalcEndDate > IContractObject."Ending Date" THEN
            LastDiscountCalcEndDate := IContractObject."Ending Date";
          IF LastDiscountCalcEndDate > IPeriodEnd THEN
            LastDiscountCalcEndDate := IPeriodEnd;
          IF LastDiscountCalcEndDate > DiscountPeriodEnd THEN
            LastDiscountCalcEndDate := DiscountPeriodEnd;
        END;
      UNTIL Date.NEXT = 0;
      UnitPrice := -IUnitPrice * LastServiceSalesDiscSurch.Percentage / 100;
      TotalDiscount += UnitPrice * (LastDiscountCalcEndDate - LastDiscountCalcStartDate +1);
    END;

    LOCAL PROCEDURE GetDynamicFixedRevenueTotalDiscount@1100528603(IContractObject@1100528603 : Record 11071702;IPeriodStart@1100528602 : Date;IPeriodEnd@1100528601 : Date;IUnitPrice@1100528600 : Decimal) TotalDiscount : Decimal;
    VAR
      Date@1100528610 : Record 2000000007;
      ServiceSalesDiscSurch@1100528609 : Record 11072237;
      MaintenanceInvoiceMgt@1100528611 : Codeunit 11012828;
      LastDiscountCalcStartDate@1100528607 : Date;
      DiscountPeriodEnd@1100528605 : Date;
      AmountPerMonth@1100528604 : Decimal;
    BEGIN
      LastDiscountCalcStartDate := IPeriodStart;
      IF LastDiscountCalcStartDate < IContractObject."Invoice From" THEN
        LastDiscountCalcStartDate := IContractObject."Invoice From";
      Date.SETRANGE("Period Type", Date."Period Type"::Month);
      Date.SETRANGE("Period Start", LastDiscountCalcStartDate, IPeriodEnd);
      IF Date.ISEMPTY THEN
        EXIT;
      Date.FINDSET;
      REPEAT
        IF IContractObject.GetServiceSalesDiscount(Date."Period Start", ServiceSalesDiscSurch, DiscountPeriodEnd) THEN BEGIN
          IF ServiceSalesDiscSurch.Percentage <> 0 THEN BEGIN
            AmountPerMonth := IContractObject.GetObjectInvAmountPerYear(Date."Period End") / 12;
            TotalDiscount += -AmountPerMonth * ServiceSalesDiscSurch.Percentage / 100
          END ELSE
            TotalDiscount += -ServiceSalesDiscSurch.Amount / MaintenanceInvoiceMgt.ConvertPeriodToNoOfMonths(ServiceSalesDiscSurch.Period);
        END;
      UNTIL Date.NEXT = 0;
    END;

    PROCEDURE GetInstallmentAmountPerYear@1100528604(IServiceContract@1100526200 : Record 11012812;ISeekDate@1100526207 : Date;IUpdateAmounts@1100528604 : Boolean;VAR OTotalContractAmount@1100528610 : Decimal) : Decimal;
    VAR
      ContractInstallment@1100528600 : Record 11071707;
      MaintenanceManagement@1100528603 : Codeunit 11012829;
      MaintenanceInvoiceMgt@1100528605 : Codeunit 11012828;
      InvoiceInterval@1100528602 : DateFormula;
      Factor@1100528601 : Decimal;
      DivisionPercentage@1100528606 : Decimal;
      InstallmentAmount@1100528607 : Decimal;
      InstallmentDiscountAmount@1100528608 : Decimal;
      TotalInstallmentAmount@1100528609 : Decimal;
    BEGIN
      IF IServiceContract."Invoice Type" <> IServiceContract."Invoice Type"::Installments THEN
        EXIT;

      ContractInstallment.SETRANGE("Service Contract No.", IServiceContract."No.");
      ContractInstallment.SETFILTER("Invoice From", '<=%1', ISeekDate);
      ContractInstallment.SETFILTER("Ending Date", '%1|>=%2', 0D, ISeekDate);
      IF ContractInstallment.FINDSET THEN BEGIN
        REPEAT
          IF IServiceContract."Installments based on Progress" THEN
            InvoiceInterval := IServiceContract."Control Period Interval"
          ELSE
            InvoiceInterval := ContractInstallment."Invoice Interval";
          Factor := MaintenanceManagement.ConvPeriodToTimesPerYear(InvoiceInterval);

          IF IUpdateAmounts AND (IServiceContract."Installment Type" = IServiceContract."Installment Type"::Object) THEN
            MaintenanceInvoiceMgt.DetermineInstallmentAmount(IServiceContract."No.", ISeekDate);

          DivisionPercentage := IServiceContract.GetCategoryDivisionPercentage('', ISeekDate);

          InstallmentAmount := MaintenanceInvoiceMgt.GetInstallmAmntLCYByDate(ContractInstallment) * DivisionPercentage / 100;
          InstallmentDiscountAmount :=
            -GetInstallmentRevenueTotalDiscount(ContractInstallment, ISeekDate, CALCDATE(InvoiceInterval, ISeekDate) -1, InstallmentAmount, TRUE)
               * DivisionPercentage / 100;
          InstallmentAmount -= InstallmentDiscountAmount;
          InstallmentAmount *= Factor;

          TotalInstallmentAmount += InstallmentAmount;
        UNTIL ContractInstallment.NEXT = 0;
      END;
      OTotalContractAmount :=
        MaintenanceInvoiceMgt.GetContractAmntLCYByDate(IServiceContract, ISeekDate);

      EXIT(TotalInstallmentAmount);
    END;

    PROCEDURE SetCheckOtherServiceCategories@1100529900(NewSetCheckOtherServiceCategories@1100529900 : Boolean);
    BEGIN
      CheckOtherServiceCategories := NewSetCheckOtherServiceCategories;
    END;

    LOCAL PROCEDURE GetServiceSetup@1100529676();
    BEGIN
      IF HasGotServiceSetup THEN
        EXIT;
      ServiceSetup.GET;
      HasGotServiceSetup := TRUE;
    END;

    PROCEDURE NoOfDaysInterval@1100529675(ServiceContract@1100529680 : Record 11012812;DateFrom@1100529675 : Date;DateUntil@1100529676 : Date) NoOfDays : Integer;
    VAR
      LocDate@1100529681 : Record 2000000007;
      LocMonth@1100529600 : Record 2000000007;
      NoOfDaysPerInterval@1100529682 : Integer;
      LocPeriodEnd@1100529677 : Date;
      LocPeriodEnd2@1100529601 : Date;
    BEGIN
      GetServiceSetup;

      NoOfDays := 0;
      IF ServiceSetup."Calc. Revenue Based on 360 D." THEN BEGIN
        IF FORMAT(ServiceContract."Control Period Interval") <> '' THEN BEGIN
          LocMonth.SETRANGE("Period Type", LocDate."Period Type"::Month);
          LocMonth.FINDFIRST;
          LocMonth.SETFILTER("Period Start", '<%1', CALCDATE(ServiceContract."Control Period Interval", LocMonth."Period Start"));
          NoOfDaysPerInterval := 30 * LocMonth.COUNT;

          IF NoOfDaysPerInterval > 0 THEN BEGIN
            LocDate.SETRANGE("Period Type", LocDate."Period Type"::Date);
            LocDate.SETRANGE("Period Start", DateFrom);
            LocDate.FINDLAST;
            WHILE LocDate."Period Start" < DateUntil DO BEGIN
              LocPeriodEnd := CALCDATE(ServiceContract."Control Period Interval", LocDate."Period Start");
              IF LocPeriodEnd <= DateUntil + 1 THEN
                NoOfDays += NoOfDaysPerInterval
              ELSE
                IF NoOfDaysPerInterval = 30 THEN
                  NoOfDays += DateUntil - LocDate."Period Start" + 1
                ELSE BEGIN
                  LocMonth.SETRANGE("Period Type", LocMonth."Period Type"::Date);
                  LocMonth.SETFILTER("Period Start", '<=%1', LocDate."Period Start");
                  LocMonth.FINDLAST;
                  WHILE LocMonth."Period Start" < DateUntil DO BEGIN
                    LocPeriodEnd2 := CALCDATE('<1M>', LocMonth."Period Start");
                    IF LocPeriodEnd2 <= DateUntil + 1 THEN
                      NoOfDays += 30
                    ELSE
                      NoOfDays += DateUntil - LocMonth."Period Start" + 1;
                    LocMonth.SETRANGE("Period Start", LocPeriodEnd2);
                    LocMonth.FINDLAST;
                  END;
                END;
              LocDate.SETRANGE("Period Start", LocPeriodEnd);
              LocDate.FINDLAST;
            END;
          END;
        END;
      END;

      IF NoOfDays = 0 THEN
        NoOfDays := DateUntil - DateFrom + 1;

      IF NoOfDays < 0 THEN
        EXIT(0)
      ELSE
        EXIT(NoOfDays);
    END;

    LOCAL PROCEDURE InsertTmpMaintenanceSalesRate@1100528500(ICustomerNo@1100528500 : Code[20];IIndexDate@1100528501 : Date;IObjectGroupCode@1100528502 : Code[10];ICustomerObjectGroupCode@1100528503 : Code[10];IServicePackageCode@1100528504 : Code[20];INewRate@1100528505 : Decimal);
    BEGIN
      TmpMaintenanceSalesRate."Key Code1" := ICustomerNo;
      TmpMaintenanceSalesRate."Key Code2" := FORMAT(IIndexDate, 0, '<Year4><Month,2><Day,2>');
      TmpMaintenanceSalesRate."Key Code3" := IObjectGroupCode;
      TmpMaintenanceSalesRate."Key Code4" := ICustomerObjectGroupCode;
      TmpMaintenanceSalesRate."Key Code5" := IServicePackageCode;
      TmpMaintenanceSalesRate."Key Code6" := '';
      TmpMaintenanceSalesRate.Dec1 := INewRate;
      TmpMaintenanceSalesRate.INSERT;
    END;

    LOCAL PROCEDURE SetSkipChecks@1100528501(IServiceContractNo@1100528502 : Code[20];IIndexDate@1100528503 : Date);
    VAR
      ContractAmountsbyDate@1100528500 : Record 11071708;
      ServiceMaintAgreement@1100528501 : Record 11071973;
    BEGIN
      ContractAmountsbyDate.SETRANGE(Type, ContractAmountsbyDate.Type::"Price Agreement");
      ContractAmountsbyDate.SETRANGE("Service Contract No.", IServiceContractNo);
      ContractAmountsbyDate.SETRANGE("Installment Line No.", 0);
      ContractAmountsbyDate.SETFILTER("Index Date", '<=%1', IIndexDate);
      SkipContrInstallmAmntsbyDate := ContractAmountsbyDate.ISEMPTY;

      SkipServiceMaintAgreement := ServiceMaintAgreement.ISEMPTY;
    END;

    BEGIN
    END.
  }
}

