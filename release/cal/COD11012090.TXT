OBJECT Codeunit 11012090 Import/Export Mgt (FSA)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      FSASetupRec@1100485000 : Record 11012138;
      ErrorRec@1100485004 : Record 11012272;
      LogbookRec@1100485011 : Record 11012271;
      FSASetupReadAndOk@1100485003 : Boolean;
      Text000@1100485005 : TextConst 'DEU=Datei ist erstellt worden, aber Verschiebung nach ''%1'' ist nicht m”glich;ENU=File is created, but move to ''%1'' is not possible;NLD=Bestand is aangemaakt, maar verplaatsen naar ''%1'' is niet mogelijk;NOR=Fil er opprettet, men flytting til ''%1'' er ikke mulig;SVE=Filen „r skapad men „r inte m”jlig att flytta till %1';
      Text001@1100485006 : TextConst 'DEU=Datei ist eingelesen worden, aber L”schung der Datei ist nicht m”glich;ENU=File is imported, but delete file is not possible;NLD=Bestand is ingelezen, maar bestand verwijderen is niet mogelijk;NOR=Fil er importert, men sletting av fil er ikke mulig;SVE=Filen „r inl„st men kan inte ta bort den';
      Text002@1100485007 : TextConst 'DEU=Verschieben Datei nach ''%1'' ist nicht m”glich;ENU=Move File to ''%1'' is not possible;NLD=Bestand verplaatsen naar ''%1'' is niet mogelijk;NOR=Flytte fil til ''%1'' er ikke mulig;SVE=Flytta fil till %1 „r inte m”jligt';
      Text003@1100485008 : TextConst 'DEU=Schwerer Fehler in XML-Port w„hrend des Importierens der Datei;ENU=Fatal error in XML-port during import of the file;NLD=Fatale fout in XML-port tijdens importeren van het bestand;NOR=Alvorlig feil i XML-port under importeringen av filen;SVE=Allvarligt fel i XML-porten vid inl„sning av filen';
      lvDummyBool@1100485009 : Boolean;
      Text004@1100485010 : TextConst 'DEU=Fehler beim Buchen der Importzeile;ENU=Error during posting the import line;NLD=Fout bij het boeken van de importregel;NOR=Feil under bokf›ring av importraden;SVE=Fel vid bokf”ring av den inl„st raden';

    [External]
    PROCEDURE ExportReferenceData@1100485005(VAR IUnitRec@1100485005 : Record 204;VAR IDimValCostObjectRec@1100485009 : Record 349;VAR IDimValCostCentreRec@1100485007 : Record 349;VAR ICostCompRec@1100485011 : Record 11012012;VAR IServOrderKindRec@1100485012 : Record 11012837;VAR IServOrderTypeRec@1100485013 : Record 11012837;VAR IServProblemRec@1100485014 : Record 11012842;VAR IServCauseRec@1100485015 : Record 11012842;VAR IServSolutionRec@1100485016 : Record 11012842;VAR IDisciplineRec@1100485017 : Record 11020204;VAR ITradeSpecRec@1100485018 : Record 11020285;VAR ITradeExpRec@1100485019 : Record 11020286;VAR IWageCompRec@1100485010 : Record 11012014;VAR ICostCodeRec@1100485020 : Record 11012083;VAR IRefPointRec@1100485021 : Record 11020271;VAR IDebriefTextRubricRec@1100485022 : Record 11012885;VAR ITradeAssRec@1100485023 : Record 11012015;VAR ITerritoryRec@1100485024 : Record 286);
    VAR
      lvExportRefDataXml@1100485003 : XMLport 11012022;
      lvFile@1100485002 : File;
      lvExportStream@1100485001 : OutStream;
      lvMessType@1100485006 : Option;
      lvNoOfRecords@1100485004 : Integer;
      lvDirectory@1100485008 : Text[250];
      lvFileName@1100485000 : Text[50];
    BEGIN
      lvMessType := LogbookRec."Message Type"::RefData;
      ProcessOpenExportFile(lvMessType, lvDirectory, lvFileName, lvFile, lvExportStream, LogbookRec);

      lvExportRefDataXml.SetExportData(LogbookRec, GetMessageID('E'));
      lvExportRefDataXml.SETDESTINATION(lvExportStream);
      lvExportRefDataXml.SETTABLEVIEW(IUnitRec);
      lvExportRefDataXml.SETTABLEVIEW(ICostCompRec);
      lvExportRefDataXml.SETTABLEVIEW(IDisciplineRec);
      lvExportRefDataXml.SETTABLEVIEW(ITradeSpecRec);
      lvExportRefDataXml.SETTABLEVIEW(ITradeExpRec);
      lvExportRefDataXml.SETTABLEVIEW(IWageCompRec);
      lvExportRefDataXml.SETTABLEVIEW(ICostCodeRec);
      lvExportRefDataXml.SETTABLEVIEW(IRefPointRec);
      lvExportRefDataXml.SETTABLEVIEW(IDebriefTextRubricRec);
      lvExportRefDataXml.SETTABLEVIEW(ITradeAssRec);
      lvExportRefDataXml.SETTABLEVIEW(ITerritoryRec);
      //* When a table appears multiple times in a XML-port, then you can't use SETTABLEVIEW,
      //* because everytime filter will be filled at first.
      lvExportRefDataXml.SetTableViewOther(
        IDimValCostObjectRec,
        IDimValCostCentreRec,
        IServOrderKindRec,
        IServOrderTypeRec,
        IServProblemRec,
        IServCauseRec,
        IServSolutionRec);
      lvExportRefDataXml.EXPORT;
      lvNoOfRecords := lvExportRefDataXml.GetExportData();
      lvFile.CLOSE;

      ProcessCloseExportFile(lvMessType, lvDirectory, lvFileName, lvNoOfRecords, LogbookRec);
    END;

    [External]
    PROCEDURE ExportEmployees@1100485004(VAR IEmplRec@1100485005 : Record 5200);
    VAR
      lvExportEmplXml@1100485003 : XMLport 11012020;
      lvFile@1100485002 : File;
      lvExportStream@1100485001 : OutStream;
      lvMessType@1100485006 : Option;
      lvNoOfRecords@1100485004 : Integer;
      lvDirectory@1100485008 : Text[250];
      lvFileName@1100485000 : Text[50];
    BEGIN
      lvMessType := LogbookRec."Message Type"::Empl;
      ProcessOpenExportFile(lvMessType, lvDirectory, lvFileName, lvFile, lvExportStream, LogbookRec);

      lvExportEmplXml.SetExportData(LogbookRec, GetMessageID('E'));
      lvExportEmplXml.SETDESTINATION(lvExportStream);
      lvExportEmplXml.SETTABLEVIEW(IEmplRec);
      lvExportEmplXml.EXPORT;
      lvNoOfRecords := lvExportEmplXml.GetExportData();
      lvFile.CLOSE;

      ProcessCloseExportFile(lvMessType, lvDirectory, lvFileName, lvNoOfRecords, LogbookRec);
    END;

    [External]
    PROCEDURE ExportItems@1100485024(VAR IItemRec@1100485005 : Record 27);
    VAR
      lvExportItemXml@1100485003 : XMLport 11012028;
      lvFile@1100485002 : File;
      lvExportStream@1100485001 : OutStream;
      lvMessType@1100485006 : Option;
      lvNoOfRecords@1100485004 : Integer;
      lvDirectory@1100485008 : Text[250];
      lvFileName@1100485000 : Text[50];
    BEGIN
      lvMessType := LogbookRec."Message Type"::Item;
      ProcessOpenExportFile(lvMessType, lvDirectory, lvFileName, lvFile, lvExportStream, LogbookRec);

      lvExportItemXml.SetExportData(LogbookRec, GetMessageID('E'));
      lvExportItemXml.SETDESTINATION(lvExportStream);
      lvExportItemXml.SETTABLEVIEW(IItemRec);
      lvExportItemXml.EXPORT;
      lvNoOfRecords := lvExportItemXml.GetExportData();
      lvFile.CLOSE;

      ProcessCloseExportFile(lvMessType, lvDirectory, lvFileName, lvNoOfRecords, LogbookRec);
    END;

    [External]
    PROCEDURE ExportCustomers@1100485026(VAR ICustRec@1100485005 : Record 18);
    VAR
      lvExportCustXml@1100485003 : XMLport 11012029;
      lvFile@1100485002 : File;
      lvExportStream@1100485001 : OutStream;
      lvMessType@1100485006 : Option;
      lvNoOfRecords@1100485004 : Integer;
      lvDirectory@1100485008 : Text[250];
      lvFileName@1100485000 : Text[50];
    BEGIN
      lvMessType := LogbookRec."Message Type"::Cust;
      ProcessOpenExportFile(lvMessType, lvDirectory, lvFileName, lvFile, lvExportStream, LogbookRec);

      lvExportCustXml.SetExportData(LogbookRec, GetMessageID('E'));
      lvExportCustXml.SETDESTINATION(lvExportStream);
      lvExportCustXml.SETTABLEVIEW(ICustRec);
      lvExportCustXml.EXPORT;
      lvNoOfRecords := lvExportCustXml.GetExportData();
      lvFile.CLOSE;

      ProcessCloseExportFile(lvMessType, lvDirectory, lvFileName, lvNoOfRecords, LogbookRec);
    END;

    [External]
    PROCEDURE ExportServiceLocations@1100485027(VAR IServLocRec@1100485005 : Record 11012801);
    VAR
      lvExportServLocXml@1100485003 : XMLport 11012030;
      lvFile@1100485002 : File;
      lvExportStream@1100485001 : OutStream;
      lvMessType@1100485006 : Option;
      lvNoOfRecords@1100485004 : Integer;
      lvDirectory@1100485008 : Text[250];
      lvFileName@1100485000 : Text[50];
    BEGIN
      lvMessType := LogbookRec."Message Type"::ServLoc;
      ProcessOpenExportFile(lvMessType, lvDirectory, lvFileName, lvFile, lvExportStream, LogbookRec);

      lvExportServLocXml.SetExportData(LogbookRec, GetMessageID('E'));
      lvExportServLocXml.SETDESTINATION(lvExportStream);
      lvExportServLocXml.SETTABLEVIEW(IServLocRec);
      lvExportServLocXml.EXPORT;
      lvNoOfRecords := lvExportServLocXml.GetExportData();
      lvFile.CLOSE;

      ProcessCloseExportFile(lvMessType, lvDirectory, lvFileName, lvNoOfRecords, LogbookRec);
    END;

    [External]
    PROCEDURE ExportServiceOrders@1100485003(VAR IServOrderRec@1100485000 : Record 11012823);
    VAR
      lvServOrderRec@1100485008 : Record 11012823;
      lvServOrderRec2@1100485001 : Record 11012823;
    BEGIN
      //* Because of performance only 1 SO per XML-message, many small messages faster then 1 big message.
      //* Also easier to check when something goes wrong during import at field service.
      lvServOrderRec.COPY(IServOrderRec);
      lvServOrderRec.SETCURRENTKEY("Export to FSA");
      lvServOrderRec.SETRANGE("Export to FSA", TRUE);
      IF lvServOrderRec.FINDFIRST THEN BEGIN
        REPEAT
          lvServOrderRec2.COPY(lvServOrderRec);
          lvServOrderRec2.SETCURRENTKEY("No.");
          lvServOrderRec2.SETRANGE("No.",lvServOrderRec."No.");
          ExportOneServiceOrder(lvServOrderRec2);
          COMMIT;
        UNTIL lvServOrderRec.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE ExportOneServiceOrder@1100485020(VAR IServOrderRec@1100485000 : Record 11012823);
    VAR
      lvExportServOrderXml@1100485007 : XMLport 11012021;
      lvFile@1100485006 : File;
      lvExportStream@1100485005 : OutStream;
      lvMessType@1100485004 : Option;
      lvNoOfRecords@1100485003 : Integer;
      lvDirectory@1100485002 : Text[250];
      lvFileName@1100485001 : Text[50];
    BEGIN
      lvMessType := LogbookRec."Message Type"::ServOrder;
      ProcessOpenExportFile(lvMessType, lvDirectory, lvFileName, lvFile, lvExportStream, LogbookRec);

      lvExportServOrderXml.SetExportData(LogbookRec, GetMessageID('E'));
      lvExportServOrderXml.SETDESTINATION(lvExportStream);
      lvExportServOrderXml.SETTABLEVIEW(IServOrderRec);
      lvExportServOrderXml.EXPORT;
      lvNoOfRecords := lvExportServOrderXml.GetExportData();
      lvFile.CLOSE;

      ProcessCloseExportFile(lvMessType, lvDirectory, lvFileName, lvNoOfRecords, LogbookRec);
    END;

    [External]
    PROCEDURE ProcessOpenExportFile@1100485015(IMessType@1100485000 : Option;VAR ODirectory@1100485005 : Text[250];VAR OFileName@1100485001 : Text[50];VAR OFile@1100485002 : File;VAR OExportStream@1100485003 : OutStream;VAR OLogbookRec@1100485004 : Record 11012271);
    BEGIN
      GetCheckFSASetup();

      ODirectory := FSASetupRec."Export Process Directory";
      OFileName := GetExportFileName(IMessType);
      OFile.CREATE(ODirectory + OFileName);
      OFile.CREATEOUTSTREAM(OExportStream);

      CLEAR(OLogbookRec);
      OLogbookRec.INIT;
      OLogbookRec."Date/Time" := CURRENTDATETIME;
      OLogbookRec."Message Type" := IMessType;
      OLogbookRec.Direction := OLogbookRec.Direction::Export;
      OLogbookRec.Status := OLogbookRec.Status::"In Process";
      OLogbookRec.Directory := ODirectory;
      OLogbookRec."File Name" := OFileName;
      IF NOT OLogbookRec.INSERT THEN BEGIN
        //* Very occasionally 2 messages are created/read in same msec.
        REPEAT
          SLEEP(1);
          OLogbookRec."Date/Time" := CURRENTDATETIME;
        UNTIL OLogbookRec.INSERT;
      END;
    END;

    [External]
    PROCEDURE ProcessCloseExportFile@1100485001(IMessType@1100485004 : Option;IDirectory@1100485006 : Text[250];IFileName@1100485000 : Text[40];INoOfRecords@1100485001 : Integer;VAR IOLogbookRec@1100485002 : Record 11012271);
    VAR
      lvExportDirectory@1100485003 : Text[250];
    BEGIN
      IOLogbookRec.FIND;

      IF INoOfRecords <= 0 THEN BEGIN
        IOLogbookRec.DELETE(TRUE);
        IF EXISTS(IDirectory + IFileName) THEN
          lvDummyBool := ERASE(IDirectory + IFileName);
        EXIT;
      END;

      lvExportDirectory := FSASetupRec."Export Directory";
      IF RENAME(IDirectory + IFileName, lvExportDirectory + IFileName) THEN BEGIN
        IOLogbookRec.Directory := lvExportDirectory;
        IOLogbookRec.Status := IOLogbookRec.Status::Processed;
      END ELSE BEGIN
        IOLogbookRec.WriteExchangeError(STRSUBSTNO(Text000,lvExportDirectory),ErrorRec.Type::Error,0);
        IOLogbookRec.Status := IOLogbookRec.Status::Error;
      END;
      IOLogbookRec.Quantity := INoOfRecords;
      IOLogbookRec.MODIFY;
    END;

    [External]
    PROCEDURE ProcessCloseExportFileRetry@1100485021(ILogbookRec@1100485002 : Record 11012271);
    VAR
      lvExportDirectory@1100485003 : Text[250];
    BEGIN
      ILogbookRec.FIND;
      ILogbookRec.TESTFIELD(Direction, ILogbookRec.Direction::Export);
      IF ILogbookRec.Status = ILogbookRec.Status::Processed THEN
        ILogbookRec.FIELDERROR(Status);

      IF ILogbookRec.Quantity <= 0 THEN BEGIN
        ILogbookRec.DELETE(TRUE);
        IF EXISTS(ILogbookRec.Directory + ILogbookRec."File Name") THEN
          lvDummyBool := ERASE(ILogbookRec.Directory + ILogbookRec."File Name");
        EXIT;
      END ELSE BEGIN
        IF NOT EXISTS(ILogbookRec.Directory + ILogbookRec."File Name") THEN BEGIN
          ILogbookRec.DELETE(TRUE);
          EXIT;
        END;
      END;

      GetCheckFSASetup();
      lvExportDirectory := FSASetupRec."Export Directory";

      ILogbookRec.DeleteErrors();
      IF (ILogbookRec.Directory = lvExportDirectory) THEN
        ILogbookRec.Status := ILogbookRec.Status::Processed
      ELSE BEGIN
        IF RENAME(ILogbookRec.Directory + ILogbookRec."File Name", lvExportDirectory + ILogbookRec."File Name") THEN BEGIN
          ILogbookRec.Directory := lvExportDirectory;
          ILogbookRec.Status := ILogbookRec.Status::Processed;
        END ELSE BEGIN
          MESSAGE(Text002,lvExportDirectory);
          ILogbookRec.WriteExchangeError(STRSUBSTNO(Text000,lvExportDirectory),ErrorRec.Type::Error,0);
          ILogbookRec.Status := ILogbookRec.Status::Error;
        END;
      END;
      ILogbookRec.MODIFY;
    END;

    [External]
    PROCEDURE ProcessImportPresentFiles@1100485010();
    VAR
      lvFileRec@1100485001 : Record 2000000022;
      lvTmpFileRec@1100485003 : TEMPORARY Record 2000000022;
      lvMessType@1100485002 : Option;
      lvFileNameFilter@1100485000 : Text[50];
    BEGIN
      GetCheckFSASetup();

      lvFileNameFilter := GetImportFileNameFilter();

      //* First read into other directory, to make sure that virtuele table 'File' is build again.
      lvFileRec.SETRANGE(Path, FSASetupRec."Import Error Directory");
      lvFileRec.SETRANGE("Is a file", TRUE);
      IF lvFileRec.FINDFIRST THEN;
      lvFileRec.RESET;

      lvFileRec.SETRANGE(Path, FSASetupRec."Import Directory");
      lvFileRec.SETRANGE("Is a file", TRUE);
      lvFileRec.SETFILTER(Name, lvFileNameFilter);
      IF lvFileRec.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          lvMessType := GetMessTypeOption(COPYSTR(lvFileRec.Name,5,3));
          IF lvMessType >= 0 THEN BEGIN
            //* Sort files on date/time. Add to tmp-table and fill 'Path' (first key field) with filename,
            //* in which characters of message type (position 5..7, f.e. 'DBR' or 'STA') are removed.
            lvTmpFileRec.Path := COPYSTR(lvFileRec.Name,1,4) + COPYSTR(lvFileRec.Name,8);
            IF COPYSTR(lvFileRec.Name,1,2) = 'FV' THEN BEGIN
              //* Bug in FV: Msec are not always 3 positions (f.e. 3 resp. 10 msec become '3' and '10' instead of '003' and '010').
              WHILE STRLEN(lvTmpFileRec.Path) IN [23, 24] DO
                lvTmpFileRec.Path := COPYSTR(lvTmpFileRec.Path,1,18) + '0' + COPYSTR(lvTmpFileRec.Path,19);
            END;
            lvTmpFileRec."Is a file" := TRUE;
            lvTmpFileRec.Name := lvFileRec.Name;
            lvTmpFileRec.INSERT;
          END;
        UNTIL lvFileRec.NEXT = 0;
      END;

      IF lvTmpFileRec.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          lvMessType := GetMessTypeOption(COPYSTR(lvTmpFileRec.Name,5,3));  //* Only valid MessTypes are in tmp-table
          IF EXISTS(FSASetupRec."Import Directory" + lvTmpFileRec.Name) THEN BEGIN
            ProcessImportFile(lvMessType, FSASetupRec."Import Directory", lvTmpFileRec.Name, FALSE);
            COMMIT;  //*Commit for each processed file.
          END;
        UNTIL lvTmpFileRec.NEXT = 0;
        lvTmpFileRec.DELETEALL;
      END;
    END;

    [External]
    PROCEDURE ProcessImportFileRetry@1100485017(ILogbookRec@1100485003 : Record 11012271);
    BEGIN
      WITH ILogbookRec DO BEGIN
        TESTFIELD(Direction, Direction::Import);
        IF Status = Status::Processed THEN
          FIELDERROR(Status);
        TESTFIELD(Directory);
        TESTFIELD("File Name");
        EXISTS(Directory + "File Name");
        TESTFIELD(Quantity, 0);
        CALCFIELDS("No. not Processed");
        TESTFIELD("No. not Processed", 0);

        LogbookRec := ILogbookRec;
        LogbookRec.FIND;
        LogbookRec.DeleteErrors();

        ProcessImportFile("Message Type", Directory, "File Name", TRUE);
      END;
    END;

    [External]
    PROCEDURE ProcessImportFile@1100485011(IMessType@1100485002 : Option;IDirectory@1100485001 : Text[250];IFileName@1100485000 : Text[40];IRetryMode@1100485003 : Boolean);
    VAR
      lvImportLineRec@1100485009 : Record 11012273;
      lvErrorRec@1100485015 : Record 11012272;
      lvPostImportDataCU@1100485010 : Codeunit 11012158;
      lvImportStatusMessXml@1100485006 : XMLport 11012023;
      lvImportDebriefMessXml@1100485008 : XMLport 11012024;
      lvImportDebriefTextXml@1100485012 : XMLport 11012025;
      lvImportServHoursXml@1100485013 : XMLport 11012026;
      lvImportIndirectHoursXml@1100485016 : XMLport 11012027;
      lvFile@1100485005 : File;
      lvImportStream@1100485004 : InStream;
      lvPost@1100485011 : Boolean;
      lvNoOfRecords@1100485007 : Integer;
      lvErrorLineNo@1100485014 : Integer;
    BEGIN
      GetCheckFSASetup();

      IF (NOT IRetryMode) THEN BEGIN
        IF (IDirectory <> FSASetupRec."Import Process Directory") THEN BEGIN
          IF EXISTS(FSASetupRec."Import Process Directory" + IFileName) THEN
            ERASE(FSASetupRec."Import Process Directory" + IFileName);
          RENAME(IDirectory + IFileName, FSASetupRec."Import Process Directory" + IFileName);
        END;

        CLEAR(LogbookRec);
        LogbookRec.INIT;
        LogbookRec."Date/Time" := CURRENTDATETIME;
        LogbookRec."Message Type" := IMessType;
        LogbookRec.Direction := LogbookRec.Direction::Import;
        LogbookRec.Status := LogbookRec.Status::"In Process";
        LogbookRec.Directory := FSASetupRec."Import Process Directory";
        LogbookRec."File Name" := IFileName;
        IF NOT LogbookRec.INSERT THEN BEGIN
          //* Very occasionally 2 messages are created/read in same msec.
          REPEAT
            SLEEP(1);
            LogbookRec."Date/Time" := CURRENTDATETIME;
          UNTIL LogbookRec.INSERT;
        END;
      END ELSE BEGIN
        //* Add this error here already, when 'IMPORT' succeeded then delete again.
        lvErrorLineNo := LogbookRec.WriteExchangeError(Text003,ErrorRec.Type::Error,0);
      END;

      COMMIT;
      lvFile.OPEN(LogbookRec.Directory + IFileName);
      lvFile.CREATEINSTREAM(lvImportStream);
      CASE LogbookRec."Message Type" OF
        LogbookRec."Message Type"::Status:
          BEGIN
            lvImportStatusMessXml.SetImportData(LogbookRec, GetMessageID('I'));
            lvImportStatusMessXml.SETSOURCE(lvImportStream);
            IF (NOT IRetryMode) THEN BEGIN
              IF lvImportStatusMessXml.IMPORT THEN
                lvNoOfRecords := lvImportStatusMessXml.GetImportData()
              ELSE
                LogbookRec.WriteExchangeError(Text003,ErrorRec.Type::Error,0);
            END ELSE BEGIN
              lvImportStatusMessXml.IMPORT;
              lvNoOfRecords := lvImportStatusMessXml.GetImportData()
            END;
          END;
        LogbookRec."Message Type"::Debrief:
          BEGIN
            lvImportDebriefMessXml.SetImportData(LogbookRec, GetMessageID('I'));
            lvImportDebriefMessXml.SETSOURCE(lvImportStream);
            IF (NOT IRetryMode) THEN BEGIN
              IF lvImportDebriefMessXml.IMPORT THEN
                lvNoOfRecords := lvImportDebriefMessXml.GetImportData()
              ELSE
                LogbookRec.WriteExchangeError(Text003,ErrorRec.Type::Error,0);
            END ELSE BEGIN
              lvImportDebriefMessXml.IMPORT;
              lvNoOfRecords := lvImportDebriefMessXml.GetImportData();
            END;
          END;
        LogbookRec."Message Type"::Text:
          BEGIN
            lvImportDebriefTextXml.SetImportData(LogbookRec, GetMessageID('I'));
            lvImportDebriefTextXml.SETSOURCE(lvImportStream);
            IF (NOT IRetryMode) THEN BEGIN
              IF lvImportDebriefTextXml.IMPORT THEN
                lvNoOfRecords := lvImportDebriefTextXml.GetImportData()
              ELSE
                LogbookRec.WriteExchangeError(Text003,ErrorRec.Type::Error,0);
            END ELSE BEGIN
              lvImportDebriefTextXml.IMPORT;
              lvNoOfRecords := lvImportDebriefTextXml.GetImportData();
            END;
          END;
        LogbookRec."Message Type"::ServHours:
          BEGIN
            lvImportServHoursXml.SetImportData(LogbookRec, GetMessageID('I'));
            lvImportServHoursXml.SETSOURCE(lvImportStream);
            IF (NOT IRetryMode) THEN BEGIN
              IF lvImportServHoursXml.IMPORT THEN
                lvNoOfRecords := lvImportServHoursXml.GetImportData()
              ELSE
                LogbookRec.WriteExchangeError(Text003,ErrorRec.Type::Error,0);
            END ELSE BEGIN
              lvImportServHoursXml.IMPORT;
              lvNoOfRecords := lvImportServHoursXml.GetImportData()
            END;
          END;
        LogbookRec."Message Type"::IndirectHours:
          BEGIN
            lvImportIndirectHoursXml.SetImportData(LogbookRec, GetMessageID('I'));
            lvImportIndirectHoursXml.SETSOURCE(lvImportStream);
            IF (NOT IRetryMode) THEN BEGIN
              IF lvImportIndirectHoursXml.IMPORT THEN
                lvNoOfRecords := lvImportIndirectHoursXml.GetImportData()
              ELSE
                LogbookRec.WriteExchangeError(Text003,ErrorRec.Type::Error,0);
            END ELSE BEGIN
              lvImportIndirectHoursXml.IMPORT;
              lvNoOfRecords := lvImportIndirectHoursXml.GetImportData()
            END;
          END;
      END;
      lvFile.CLOSE;

      IF IRetryMode THEN BEGIN
        //* Program not stopped because of 'ERROR', for that reason delete specific error here.
        IF lvErrorRec.GET(LogbookRec."Date/Time", LogbookRec."Message Type",lvErrorLineNo) THEN
          lvErrorRec.DELETE;
      END;

      lvPost := FALSE;
      LogbookRec.FIND;
      LogbookRec.CALCFIELDS("No. of Errors");  //* Import-errors of XML-port
      IF (LogbookRec."No. of Errors" = 0) THEN BEGIN
        LogbookRec.Quantity := lvNoOfRecords;
        lvPost := TRUE;
        {
        //* Switched-off, keep the XML-files to be able to look at them (f.e. when problems).
        //* Files are deleted when logbook line is deleted.
        IF NOT ERASE(LogbookRec.Directory + IFileName) THEN
          LogbookRec.WriteExchangeError(Text001, ErrorRec.Type::Note,0)
        ELSE
          LogbookRec.Directory := ''
        }
        //* As file is not deleted, it must be added to the process directory if it doesn't exist there yet.
        IF (LogbookRec.Directory <> FSASetupRec."Import Process Directory") THEN BEGIN
          IF EXISTS(FSASetupRec."Import Process Directory" + IFileName) THEN
            lvDummyBool := ERASE(FSASetupRec."Import Process Directory" + IFileName);
          IF RENAME(LogbookRec.Directory + IFileName, FSASetupRec."Import Process Directory" + IFileName) THEN
            LogbookRec.Directory := FSASetupRec."Import Process Directory";
        END;
      END ELSE BEGIN
        LogbookRec.DeleteImportLines();
        LogbookRec.Quantity := 0;
        IF (LogbookRec.Directory <> FSASetupRec."Import Error Directory") THEN BEGIN
          IF EXISTS(FSASetupRec."Import Error Directory" + IFileName) THEN
            lvDummyBool := ERASE(FSASetupRec."Import Error Directory" + IFileName);
          IF RENAME(LogbookRec.Directory + IFileName, FSASetupRec."Import Error Directory" + IFileName) THEN
            LogbookRec.Directory := FSASetupRec."Import Error Directory"
          ELSE
            LogbookRec.WriteExchangeError(
              STRSUBSTNO(Text002, FSASetupRec.FIELDCAPTION("Import Error Directory")), ErrorRec.Type::Error,0);
        END;
        LogbookRec.Status := LogbookRec.Status::Error;
      END;
      LogbookRec.MODIFY;
      COMMIT;

      IF lvPost THEN BEGIN
        lvImportLineRec.RESET;
        lvImportLineRec.SETRANGE("Date/Time", LogbookRec."Date/Time");
        lvImportLineRec.SETRANGE("Message Type", LogbookRec."Message Type");
        IF lvImportLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            CLEAR(lvPostImportDataCU);
            IF NOT lvPostImportDataCU.RUN(lvImportLineRec) THEN
              LogbookRec.WriteExchangeError(Text004,ErrorRec.Type::Error,lvImportLineRec."Line No.");
            COMMIT;
          UNTIL lvImportLineRec.NEXT = 0;
        END;
        //
        LogbookRec.FIND;
        LogbookRec.CALCFIELDS("No. of Errors");  //* Posting errors
        IF (LogbookRec."No. of Errors" = 0) THEN
          LogbookRec.Status := LogbookRec.Status::Processed
        ELSE
          LogbookRec.Status := LogbookRec.Status::Error;
        LogbookRec.MODIFY;
        COMMIT;
      END;
    END;

    [External]
    PROCEDURE PostImportLineRetry@1100485023(IImportLineRec@1100485000 : Record 11012273);
    VAR
      lvErrorRec@1100485003 : Record 11012272;
      lvPostImportDataCU@1100485001 : Codeunit 11012158;
      lvErrorLineNo@1100485002 : Integer;
    BEGIN
      LogbookRec.GET(IImportLineRec."Date/Time", IImportLineRec."Message Type");
      LogbookRec.TESTFIELD(Direction, LogbookRec.Direction::Import);
      IF LogbookRec.Status = LogbookRec.Status::Processed THEN
        LogbookRec.FIELDERROR(Status);

      IImportLineRec.DeleteErrors();
      //* Add this error here already, when 'Post' succeeded then delete again.
      lvErrorLineNo := LogbookRec.WriteExchangeError(Text004,ErrorRec.Type::Error,IImportLineRec."Line No.");
      COMMIT;

      lvPostImportDataCU.RUN(IImportLineRec);

      //* Program not stopped because of 'ERROR', for that reason delete specific error here.
      IF lvErrorRec.GET(IImportLineRec."Date/Time", IImportLineRec."Message Type",lvErrorLineNo) THEN
        lvErrorRec.DELETE;

      LogbookRec.FIND;
      LogbookRec.CALCFIELDS("No. not Processed");
      IF (LogbookRec."No. not Processed" = 0) THEN
        LogbookRec.Status := LogbookRec.Status::Processed
      ELSE
        LogbookRec.Status := LogbookRec.Status::Error;
      LogbookRec.MODIFY;
      COMMIT;
    END;

    [External]
    PROCEDURE GetExportFileName@1100485000(IMessType@1100485002 : Option) : Text[40];
    VAR
      lvFileName@1100485000 : Text[40];
    BEGIN
      lvFileName := lvFileName + GetBackOfficeInitials() + GetFieldServiceInitials();
      lvFileName := lvFileName + GetMessTypeCode(IMessType);
      lvFileName := lvFileName + GetDateTimeInFileFormat();
      lvFileName := lvFileName + GetXmlExtension();

      EXIT(lvFileName);
    END;

    [External]
    PROCEDURE GetImportFileNameFilter@1100485002() : Text[30];
    VAR
      lvFileNameFilter@1100485000 : Text[30];
    BEGIN
      lvFileNameFilter := lvFileNameFilter + GetFieldServiceInitials() + GetBackOfficeInitials();
      lvFileNameFilter := lvFileNameFilter + '*';
      lvFileNameFilter := lvFileNameFilter + GetXmlExtension();

      EXIT(lvFileNameFilter);
    END;

    [External]
    PROCEDURE GetBackOfficeInitials@1100485006() : Text[2];
    BEGIN
      EXIT('BO');
    END;

    [External]
    PROCEDURE GetFieldServiceInitials@1100485007() : Text[2];
    BEGIN
      CASE FSASetupRec."Field Service Administration" OF
        FSASetupRec."Field Service Administration"::FieldVision:
          EXIT('FV');
        FSASetupRec."Field Service Administration"::Nemo:
          EXIT('NM');
      END;
    END;

    [External]
    PROCEDURE GetMessageID@1100485025(IMode@1100485000 : Code[1]) : Text[30];
    VAR
      lvMessID@1100485001 : Code[30];
    BEGIN
      //* Mode: E=Export, I=Import
      CASE FSASetupRec."Field Service Administration" OF
        FSASetupRec."Field Service Administration"::FieldVision:
          lvMessID := 'FV';
        FSASetupRec."Field Service Administration"::Nemo:
          lvMessID := 'NEMO';
      END;

      IF IMode = 'E' THEN
        EXIT('4PS-' + lvMessID)
      ELSE
        EXIT(lvMessID + '-4PS');
    END;

    [External]
    PROCEDURE GetMessTypeCode@1100485008(IMessType@1100485000 : Option) : Text[3];
    BEGIN
      //* Note:
      //* First 2 characters of export message may not be equal to first 2 characters of import message.

      //* Export
      CASE IMessType OF
        LogbookRec."Message Type"::RefData: EXIT('REF');
        LogbookRec."Message Type"::Empl: EXIT('EMP');
        LogbookRec."Message Type"::Cust: EXIT('CUS');
        LogbookRec."Message Type"::Item: EXIT('ITM');
        LogbookRec."Message Type"::ServLoc: EXIT('SLC');
        LogbookRec."Message Type"::ServOrder: EXIT('SVO');
      END;
    END;

    [External]
    PROCEDURE GetMessTypeOption@1100485030(IMessTypeTxt@1100485000 : Text[3]) : Integer;
    BEGIN
      //* The first two positions are decisive at import, but must be 3 (uppercase)letters.
      //* See also comment in function 'GetMessTypeCode' above.
      IF NOT (COPYSTR(IMessTypeTxt,3,1) IN ['A'..'Z']) THEN
        EXIT(-1);

      //* Import
      CASE COPYSTR(IMessTypeTxt,1,2) OF
        'ST': EXIT(LogbookRec."Message Type"::Status);         //* STA
        'DB': EXIT(LogbookRec."Message Type"::Debrief);        //* DBR
        'TX': EXIT(LogbookRec."Message Type"::Text);           //* TXT/TXM/TXA
        'HR': EXIT(LogbookRec."Message Type"::ServHours);      //* HRS/HRK
        'IH': EXIT(LogbookRec."Message Type"::IndirectHours);  //* IHR/IHK/IHP
      END;

      EXIT(-1);
    END;

    [External]
    PROCEDURE GetDateTimeInFileFormat@1100485013() : Text[17];
    BEGIN
      EXIT(FORMAT(CURRENTDATETIME, 17, '<Year4><Month,2><Day,2><Hours24,2><Minutes,2><Seconds,2><Thousands,3>'));
    END;

    [External]
    PROCEDURE GetXmlExtension@1100485014() : Text[4];
    BEGIN
      EXIT('.xml');
    END;

    [External]
    PROCEDURE GetCheckFSASetup@1100485019();
    BEGIN
      IF NOT FSASetupReadAndOk THEN BEGIN
        FSASetupRec.GET('');
        FSASetupRec.TestFieldsActiveAndDirectories(FSASetupRec);
        FSASetupReadAndOk := TRUE;
      END;
    END;

    BEGIN
    {
      //This CU is used for Tensing and PCA Mobile.
      //This functionality only works via nas.
    }
    END.
  }
}

