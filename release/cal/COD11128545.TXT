OBJECT Codeunit 11128545 GAP User Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            AppUserGAP@1100528550 : Record 11124975;
          BEGIN
            ProductsGAP.InitializeProductsCodes;
          END;

  }
  CODE
  {
    VAR
      Text001@1100528550 : TextConst 'ENU=%1 is empty';
      Text002@1100528000 : TextConst 'ENU=Product %1 is not implemented';
      ProductsGAP@1100526000 : Record 11124990;
      Text003@1100526001 : TextConst 'ENU=The user %1 doesn''t have a linked resource or employee.';
      Text004@1100526002 : TextConst 'ENU=Invalid username or password';
      Text005@1100526003 : TextConst 'ENU=User %1 is not active for %2.';
      Text006@1100526004 : TextConst 'ENU=User %1 has no permission to this product.';

    [External]
    PROCEDURE ValidateUser@1100528550(Username@1100528550 : Text;Password@1100528551 : Text) : Boolean;
    VAR
      AppUserGAP@1100528552 : Record 11124975;
      AppUserSetupGAP@1100526000 : Record 11124976;
    BEGIN
      IF NOT AppUserGAP.GET(UPPERCASE(Username)) THEN
        EXIT(FALSE);

      IF AppUserGAP.Password <> UPPERCASE(Password) THEN
        EXIT(FALSE);

      IF NOT AppUserSetupGAP.GET(Username) THEN
        EXIT(FALSE);

      IF ((AppUserSetupGAP."Resource No." = '') AND (AppUserSetupGAP."Employee No." = '')) THEN
        ERROR(Text003,Username);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE RegisterExternalLogin@1100528553(Email@1100528550 : Text;ProviderId@1100528552 : Text;ProviderKey@1100528553 : Text) : Text;
    VAR
      GAPAppUser@1100528554 : Record 11124975;
      GAPLoginProvider@1100528555 : Record 11124981;
      NewLoginProvider@1100528556 : Record 11124981;
    BEGIN
      GAPLoginProvider.SETFILTER("Provider ID", ProviderId);
      GAPLoginProvider.SETFILTER("Provider Key", ProviderKey);
      IF GAPLoginProvider.FINDFIRST THEN
        EXIT(GAPLoginProvider.Username);

      GAPAppUser.SETFILTER(Email, Email);
      IF GAPAppUser.FINDFIRST() THEN BEGIN
        NewLoginProvider.Username := GAPAppUser.Username;
        NewLoginProvider."Provider ID" := ProviderId;
        NewLoginProvider."Provider Key" := ProviderKey;
        NewLoginProvider.INSERT(TRUE);
        EXIT(NewLoginProvider.Username);
      END;
    END;

    [External]
    PROCEDURE ValidateExternalLogin@1100528551(ProviderID@1100528550 : Text;UserId@1100528551 : Text) : Text;
    VAR
      GAPAppUser@1100528553 : Record 11124975;
      GAPLoginProvider@1100528554 : Record 11124981;
    BEGIN
      GAPLoginProvider.SETFILTER("Provider ID", ProviderID);
      GAPLoginProvider.SETFILTER("Provider Key", UserId);

      IF GAPLoginProvider.FINDFIRST THEN
        IF GAPAppUser.GET(GAPLoginProvider.Username) THEN
          EXIT(GAPAppUser.Username);
    END;

    [External]
    PROCEDURE ForgotPassword@1100528554(Username@1100528550 : Text) : Boolean;
    VAR
      AppUserGAP@1100528551 : Record 11124975;
    BEGIN
      IF NOT AppUserGAP.GET(Username) THEN
        EXIT(FALSE);

      //SendMail
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ModifyPassword@1100528555(Username@1100528550 : Text;OldPassword@1100528551 : Text;NewPassword@1100528552 : Text) : Boolean;
    VAR
      GAPAppUser@1100528553 : Record 11124975;
    BEGIN
      IF NOT GAPAppUser.GET(Username) THEN
        EXIT(FALSE);

      IF GAPAppUser.Password <> UPPERCASE(OldPassword) THEN
        EXIT(FALSE);

      GAPAppUser.Password := NewPassword;
      IF NOT GAPAppUser.MODIFY(FALSE) THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetFieldValueFromUserSetupTable@1100528552(RecordIdGroup@1100528552 : RecordID;RecordIdUser@1100528553 : RecordID;FieldId@1100528551 : Integer) : Text;
    VAR
      FieldTable@1100528554 : Record 2000000041;
      TextValue@1100528555 : Text;
      DecimalValue@1100528562 : Decimal;
      OptionValue@1100528561 : Integer;
      GuidValue@1100528550 : GUID;
      FldRefGroup@1100528558 : FieldRef;
      FldRefUser@1100528557 : FieldRef;
      FldRefResult@1100528556 : FieldRef;
      RecRefGroup@1100528559 : RecordRef;
      RecRefUser@1100528560 : RecordRef;
    BEGIN
      RecRefGroup.OPEN(RecordIdGroup.TABLENO);
      RecRefGroup.GET(RecordIdGroup);

      RecRefUser.OPEN(RecordIdUser.TABLENO);
      RecRefUser.GET(RecordIdUser);

      FieldTable.GET(RecordIdUser.TABLENO, FieldId);
      FldRefGroup := RecRefGroup.FIELD(FieldTable."No.");
      FldRefUser := RecRefUser.FIELD(FieldTable."No.");
      IF FORMAT(FldRefGroup.CLASS) = 'FlowField' THEN BEGIN
        FldRefGroup.CALCFIELD;
        FldRefUser.CALCFIELD;
      END;

      CASE FieldTable.Type OF
        FieldTable.Type::Code, FieldTable.Type::Text :
          BEGIN
            IF EVALUATE(TextValue, FORMAT(FldRefUser.VALUE)) THEN
              IF TextValue <> '' THEN
                EXIT(FORMAT(FldRefUser.VALUE))
              ELSE
                EXIT(FORMAT(FldRefGroup.VALUE));
          END;
        FieldTable.Type::Integer, FieldTable.Type::Decimal :
          BEGIN
            IF EVALUATE(DecimalValue, FORMAT(FldRefUser.VALUE)) THEN
              IF DecimalValue <> 0 THEN
                EXIT(FORMAT(FldRefUser.VALUE))
              ELSE
                EXIT(FORMAT(FldRefGroup.VALUE));
          END;
        FieldTable.Type::Option :
          BEGIN
            OptionValue := FldRefUser.VALUE;
            IF OptionValue > 0 THEN
              EXIT(FORMAT(FldRefUser.VALUE))
            ELSE
              EXIT(FORMAT(FldRefGroup.VALUE));
          END;
        FieldTable.Type::GUID :
          BEGIN
            IF EVALUATE(GuidValue, FORMAT(FldRefUser.VALUE)) THEN
            IF GuidValue <> '00000000-0000-0000-0000-000000000000' THEN
              EXIT(FORMAT(FldRefUser.VALUE))
            ELSE
              EXIT(FORMAT(FldRefGroup.VALUE));
          END;
      END;
    END;

    [External]
    PROCEDURE GetFieldValueFromTable@1100525012(recordID@1100528550 : RecordID;tableID@1100525001 : Integer;fieldID@1100525002 : Integer) : Text;
    VAR
      recRef@1100525004 : RecordRef;
      fldRef@1100525003 : FieldRef;
    BEGIN
      IF (fieldID <> 0) AND (tableID <> 0) THEN BEGIN
        recRef.OPEN(tableID);
        recRef.GET(recordID);
        fldRef := recRef.FIELD(fieldID);
        IF FORMAT(fldRef.CLASS) = 'FlowField' THEN
          fldRef.CALCFIELD;
        IF FORMAT(fldRef.VALUE) <> '' THEN
          EXIT(FORMAT(fldRef.VALUE))
        ELSE
          EXIT(STRSUBSTNO(Text001, fldRef.CAPTION));
      END;
    END;

    [External]
    PROCEDURE GetGapUrl@1100528556(ProductCode@1100528000 : Code[10]) : Text;
    VAR
      GAPSetup@1100528550 : Record 11124982;
    BEGIN
      IF NOT IsGapImplementedForProduct(ProductCode) THEN EXIT('');

      GAPSetup.GET;
      EXIT(GAPSetup."Proxy Url");
    END;

    LOCAL PROCEDURE IsGapImplementedForProduct@1100528000(ProductCode@1100528000 : Code[10]) : Boolean;
    VAR
      CCAAppSetup@1100528002 : Record 11128520;
      PlantAppSetup@1100528003 : Record 11124924;
      FieldServiceAppSetup@1100528700 : Record 11126700;
    BEGIN
      IF ProductCode = ProductsGAP.GetProductCodeWHA THEN
        EXIT(TRUE);

      IF ProductCode = ProductsGAP.GetProductCodeOSA THEN
        EXIT(TRUE);

      IF ProductCode = ProductsGAP.GetProductCodePLA THEN BEGIN
        PlantAppSetup.GET;
        EXIT(PlantAppSetup."Use Generic User Management");
      END;

      IF ProductCode = ProductsGAP.GetProductCodeCCA THEN BEGIN
        CCAAppSetup.GET;
        EXIT(CCAAppSetup."Use Generic User Management");
      END;

      IF ProductCode = ProductsGAP.GetProductCodeFSA THEN
        EXIT(TRUE);
    END;

    [External]
    PROCEDURE IsActiveUser@1100528005(Username@1100528000 : Code[100];ApiResource@1100528001 : Code[20]) : Boolean;
    VAR
      GAPClient@1100528002 : Record 11124983;
      GAPProducts@1100528003 : Record 11124990;
      GAPApiResourcesByClient@1100528004 : Record 11124988;
      GAPApiResources@1100528005 : Record 11124987;
      UserSetupGAP@1100526000 : Record 11124993;
      RecordRef@1100528009 : RecordRef;
      FieldRefUsername@1100528007 : FieldRef;
      FieldRefActive@1100528006 : FieldRef;
    BEGIN
      IF ((Username = '') OR (ApiResource = '')) THEN EXIT(FALSE);

      IF NOT GAPApiResources.GET(ApiResource) THEN
        ERROR(Text006, Username);

      IF NOT GAPProducts.GET(GAPApiResources."Product Code") THEN
        ERROR(Text002, GAPApiResources."Product Code");

      RecordRef.OPEN(GAPProducts."User Setup Table Id");
      FieldRefUsername := RecordRef.FIELD(20);
      FieldRefActive := RecordRef.FIELD(40);
      FieldRefUsername.SETFILTER(Username);
      FieldRefActive.SETRANGE(UserSetupGAP.Active::Yes);
      IF RecordRef.ISEMPTY THEN
        ERROR(Text005, Username, GAPProducts.Name);

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetAppUserSetupCompany@1100526000(ResourceCompany@1100526000 : Text;ProductCode@1100526002 : Code[10]) : Text;
    VAR
      CompanyPlanGroup@1100526001 : Record 11229300;
      SetupCompany@1100526003 : Text;
      EmpolySetup@1100526004 : Record 11126692;
    BEGIN
      IF (ProductCode = ProductsGAP.GetProductCodeCCA) OR (ProductCode = ProductsGAP.GetProductCodePLA) OR (ProductCode = ProductsGAP.GetProductCodeFSA) THEN
        SetupCompany := CompanyPlanGroup.GetSetupCompanyOfPlanGroupOfCompany(ResourceCompany);

      IF ProductCode = ProductsGAP.GetProductCodeWHA THEN BEGIN
        EmpolySetup.GET;
        SetupCompany := EmpolySetup."Setup Company";
      END;

      IF SetupCompany <> '' THEN
        EXIT(SetupCompany)
      ELSE
        EXIT(ResourceCompany);
    END;

    [External]
    PROCEDURE UpdateUsedAppVersion@1100528700(Username@1100528700 : Text;ProductCode@1100528701 : Code[10];AppVersion@1100528704 : Text);
    VAR
      AppUserGAP@1100528702 : Record 11124975;
      ProductsGAP@1100528703 : Record 11124990;
      RecordRef@1100528709 : RecordRef;
      FieldRefFieldServiceAppVersion@1100528708 : FieldRef;
      FieldRefUserName@1100528707 : FieldRef;
      VarRecRef@1100528705 : Variant;
    BEGIN
      IF NOT ProductsGAP.GET(ProductCode) THEN EXIT;
      IF NOT AppUserGAP.GET(Username) THEN EXIT;

      RecordRef.OPEN(ProductsGAP."User Setup Table Id");
      FieldRefUserName := RecordRef.FIELD(20);
      FieldRefUserName.SETFILTER(Username);

      IF RecordRef.FINDFIRST THEN BEGIN
        FieldRefFieldServiceAppVersion := RecordRef.FIELD(50);
        FieldRefFieldServiceAppVersion.VALUE := AppVersion;
        RecordRef.MODIFY;
      END;
    END;

    [External]
    PROCEDURE UpdateDateTimeLoginLastValidated@1100528703(Username@1100528700 : Text;ProductCode@1100528701 : Code[10];LoginLastValidatedOn@1100528702 : DateTime);
    VAR
      AppUserGAP@1100528708 : Record 11124975;
      ProductsGAP@1100528707 : Record 11124990;
      RecordRef@1100528706 : RecordRef;
      FieldRefLoginLastValidatedOn@1100528705 : FieldRef;
      FieldRefUserName@1100528704 : FieldRef;
      VarRecRef@1100528703 : Variant;
    BEGIN
      IF NOT ProductsGAP.GET(ProductCode) THEN EXIT;
      IF NOT AppUserGAP.GET(Username) THEN EXIT;

      RecordRef.OPEN(ProductsGAP."User Setup Table Id");
      FieldRefUserName := RecordRef.FIELD(20);
      FieldRefUserName.SETFILTER(Username);

      IF RecordRef.FINDFIRST THEN BEGIN
        FieldRefLoginLastValidatedOn := RecordRef.FIELD(60);
        FieldRefLoginLastValidatedOn.VALUE := LoginLastValidatedOn;
        RecordRef.MODIFY;
      END;
    END;

    [External]
    PROCEDURE UpdateDateTimeLastCommonDataSync@1100528704(Username@1100528700 : Text;ProductCode@1100528701 : Code[10];CommonDataSyncOn@1100528702 : DateTime);
    VAR
      AppUserGAP@1100528708 : Record 11124975;
      ProductsGAP@1100528707 : Record 11124990;
      RecordRef@1100528706 : RecordRef;
      FieldRefCommonDataSyncOn@1100528705 : FieldRef;
      FieldRefUserName@1100528704 : FieldRef;
      VarRecRef@1100528703 : Variant;
    BEGIN
      IF NOT ProductsGAP.GET(ProductCode) THEN EXIT;
      IF NOT AppUserGAP.GET(Username) THEN EXIT;

      RecordRef.OPEN(ProductsGAP."User Setup Table Id");
      FieldRefUserName := RecordRef.FIELD(20);
      FieldRefUserName.SETFILTER(Username);

      IF RecordRef.FINDFIRST THEN BEGIN
        FieldRefCommonDataSyncOn := RecordRef.FIELD(70);
        FieldRefCommonDataSyncOn.VALUE := CommonDataSyncOn;
        RecordRef.MODIFY;
      END;
    END;

    BEGIN
    END.
  }
}

