OBJECT Codeunit 1180 Data Privacy Mgmt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            ActivityLog@1001 : Record 710;
            ActivityLogPage@1000 : Page 710;
          BEGIN
            CLEAR(ActivityLogPage);
            ActivityLog.FILTERGROUP(2);
            ActivityLog.SETRANGE(Context,ActivityContextTxt);
            ActivityLog.FILTERGROUP(0);
            ActivityLogPage.SETTABLEVIEW(ActivityLog);
            ActivityLogPage.RUN;
          END;

  }
  CODE
  {
    VAR
      DataPrivacyEntities@1000 : Record 1180;
      ConfigProgressBar@1002 : Codeunit 8615;
      ActivityContextTxt@1003 : TextConst 'ENU=Privacy Activity;NOR=Personvernaktivitet;SVE=Sekretessaktivitet';
      CreatingFieldDataTxt@1012 : TextConst 'ENU=Creating field data...;NOR=Oppretter feltdata...';
      RemovingConfigPackageTxt@1013 : TextConst 'ENU=Removing config package...;NOR=Fjerner konfigurasjonspakke...';
      ConfigDeleteStatusTxt@1022 : TextConst 'ENU=records.;NOR=poster.';
      TypeHelper@1001 : Codeunit 10;
      ProgressBarText@1023 : Text;

    [External]
    PROCEDURE InitRecords@16(EntityTypeTableNo@1002 : Integer;EntityNo@1001 : Code[50];VAR PackageCode@1004 : Code[20];ActionType@1005 : 'Export a data subject''s data,Create a data privacy configuration package';GeneratePreview@1003 : Boolean;DataSensitivityOption@1000 : 'Sensitive,Personal,Company Confidential,Normal,Unclassified');
    BEGIN
      CreateData(EntityTypeTableNo,EntityNo,PackageCode,ActionType,GeneratePreview,DataSensitivityOption);
    END;

    [External]
    PROCEDURE CreateData@1(EntityTypeTableNo@1002 : Integer;EntityNo@1001 : Code[50];VAR PackageCode@1019 : Code[20];ActionType@1005 : 'Export a data subject''s data,Create a data privacy configuration package';GeneratePreview@1003 : Boolean;DataSensitivityOption@1000 : 'Sensitive,Personal,Company Confidential,Normal,Unclassified');
    VAR
      Customer@1008 : Record 18;
      Vendor@1007 : Record 23;
      Contact@1006 : Record 5050;
      Resource@1014 : Record 156;
      Employee@1016 : Record 5200;
      SalespersonPurchaser@1017 : Record 13;
      User@1009 : Record 2000000120;
      UserSetup@1010 : Record 91;
      RecRef@1004 : RecordRef;
    BEGIN
      CASE EntityTypeTableNo OF
        DATABASE::Customer:
          IF Customer.GET(FORMAT(EntityNo,20)) THEN BEGIN
            RecRef.GETTABLE(Customer);
            CreateRelatedData(RecRef,EntityTypeTableNo,EntityNo,PackageCode,ActionType,GeneratePreview,DataSensitivityOption);
          END;
        DATABASE::Vendor:
          IF Vendor.GET(FORMAT(EntityNo,20)) THEN BEGIN
            RecRef.GETTABLE(Vendor);
            CreateRelatedData(RecRef,EntityTypeTableNo,EntityNo,PackageCode,ActionType,GeneratePreview,DataSensitivityOption);
          END;
        DATABASE::Contact:
          IF Contact.GET(FORMAT(EntityNo,20)) THEN BEGIN
            RecRef.GETTABLE(Contact);
            CreateRelatedData(RecRef,EntityTypeTableNo,EntityNo,PackageCode,ActionType,GeneratePreview,DataSensitivityOption);
          END;
        DATABASE::Resource:
          IF Resource.GET(FORMAT(EntityNo,20)) THEN BEGIN
            RecRef.GETTABLE(Resource);
            CreateRelatedData(RecRef,EntityTypeTableNo,EntityNo,PackageCode,ActionType,GeneratePreview,DataSensitivityOption);
          END;
        DATABASE::Employee:
          IF Employee.GET(FORMAT(EntityNo,20)) THEN BEGIN
            RecRef.GETTABLE(Employee);
            CreateRelatedData(RecRef,EntityTypeTableNo,EntityNo,PackageCode,ActionType,GeneratePreview,DataSensitivityOption);
          END;
        DATABASE::"Salesperson/Purchaser":
          IF SalespersonPurchaser.GET(FORMAT(EntityNo,20)) THEN BEGIN
            RecRef.GETTABLE(SalespersonPurchaser);
            CreateRelatedData(RecRef,EntityTypeTableNo,EntityNo,PackageCode,ActionType,GeneratePreview,DataSensitivityOption);
          END;
        DATABASE::User:
          BEGIN
            User.SETRANGE("User Name",EntityNo);
            IF User.FINDFIRST THEN
              IF UserSetup.GET(EntityNo) THEN BEGIN
                // Redirect to use the User Setup table
                EntityTypeTableNo := DATABASE::"User Setup";
                RecRef.GETTABLE(UserSetup);
                CreateRelatedData(RecRef,EntityTypeTableNo,EntityNo,PackageCode,ActionType,GeneratePreview,DataSensitivityOption);
              END;
          END;
        ELSE
          OnCreateData(EntityTypeTableNo,EntityNo,PackageCode,ActionType,GeneratePreview,DataSensitivityOption);
      END;
    END;

    [External]
    PROCEDURE CreateRelatedData@5(VAR RecRef@1014 : RecordRef;EntityTypeTableNo@1002 : Integer;EntityNo@1006 : Code[50];VAR PackageCode@1015 : Code[20];ActionType@1016 : 'Export a data subject''s data,Create a data privacy configuration package';GeneratePreview@1019 : Boolean;DataSensitivityOption@1020 : 'Sensitive,Personal,Company Confidential,Normal,Unclassified');
    VAR
      ConfigPackage@1007 : Record 8623;
      TableRelationsMetadata@1017 : Record 2000000141;
      DataSensitivity@1003 : Record 2000000159;
      DataPrivacyListPage@1001 : Page 1181;
      LocalRecRef@1008 : RecordRef;
      FieldRef@1005 : FieldRef;
      LastTableID@1011 : Integer;
      ProcessingOrder@1012 : Integer;
      PackageName@1004 : Text[50];
      EntityKeyField@1000 : Integer;
      FieldIndex@1009 : Integer;
    BEGIN
      PackageCode := GetPackageCode(EntityTypeTableNo,EntityNo,ActionType);
      PackageName :=
        COPYSTR(FORMAT('Privacy Package for ' + FORMAT(RecRef.CAPTION,10) + ' ' + DELCHR(FORMAT(EntityNo,20),'<',' ')),1,50);

      IF ConfigPackage.GET(PackageCode) THEN BEGIN
        IF ActionType = ActionType::"Export a data subject's data" THEN BEGIN
          // Recreate the package if they chose the option to create the config package or are using the "temp" config package,
          // otherwise use the one already created
          IF STRPOS(PackageCode,'*') = 0 THEN
            EXIT;
          DeletePackage(PackageCode);
        END;
        // I could not get PreCAL to like this logic in it's original form, which is why I have this extra IF statement...
        IF ActionType = ActionType::"Create a data privacy configuration package" THEN
          DeletePackage(PackageCode);
      END;

      CreateEntities;
      IF EntityTypeTableNo = DATABASE::"User Setup" THEN
        EntityTypeTableNo := DATABASE::User;

      IF DataPrivacyEntities.GET(EntityTypeTableNo) THEN
        IF EntityTypeTableNo = DATABASE::User THEN BEGIN
          EntityKeyField := 1;
          EntityTypeTableNo := DATABASE::"User Setup";
        END ELSE
          EntityKeyField := DataPrivacyEntities."Key Field No.";

      CreatePackage(ConfigPackage,PackageCode,PackageName);
      CreatePackageTable(PackageCode,EntityTypeTableNo);

      IF OpenRecRef(LocalRecRef,EntityTypeTableNo) THEN BEGIN
        FOR FieldIndex := 1 TO LocalRecRef.FIELDCOUNT DO
          IF GetFieldRef(FieldRef,LocalRecRef,FieldIndex) THEN
            IF IsInPrimaryKey(FieldRef) THEN BEGIN
              ProcessingOrder += 1;
              CreatePackageField(ConfigPackage.Code,EntityTypeTableNo,FieldRef.NUMBER,ProcessingOrder);
              CreatePackageFilter(ConfigPackage.Code,EntityTypeTableNo,EntityKeyField,FORMAT(EntityNo));
            END;
        LocalRecRef.CLOSE;
      END;

      // This will handle the fields on the master table.
      SetRangeDataSensitivity(DataSensitivity,RecRef.NUMBER,DataSensitivityOption);
      IF DataSensitivity.FINDSET THEN BEGIN
        REPEAT
          CreatePackageTable(PackageCode,DataSensitivity."Table No");

          ProcessingOrder += 1;
          CreatePackageField(PackageCode,DataSensitivity."Table No",DataSensitivity."Field No",ProcessingOrder);
        UNTIL DataSensitivity.NEXT = 0;
      END;

      // Now we handle the conditional and unconditional relations.
      SetRangeTableRelationsMetadata(TableRelationsMetadata,RecRef,EntityKeyField);

      ConfigProgressBar.Init(TableRelationsMetadata.COUNT,1,CreatingFieldDataTxt);

      IF TableRelationsMetadata.FINDSET THEN BEGIN
        CreatePackage(ConfigPackage,PackageCode,PackageName);
        CreateRelatedDataFields(TableRelationsMetadata,ConfigPackage,EntityNo,LastTableID,DataSensitivityOption);
      END;

      // Now to handle the change log entries.
      CreateDataForChangeLogEntries(PackageCode,EntityNo,EntityTypeTableNo);

      ConfigProgressBar.Close;

      IF GeneratePreview THEN
        DataPrivacyListPage.GeneratePreviewData(PackageCode);
    END;

    [External]
    PROCEDURE DeletePackage@25(PackageCode@1000 : Code[20]);
    VAR
      ConfigPackage@1004 : Record 8623;
    BEGIN
      ConfigProgressBar.Init(4,1,RemovingConfigPackageTxt);

      ProgressBarText := FORMAT(ConfigPackage.TABLECAPTION) + ' ' + ConfigDeleteStatusTxt;
      ConfigProgressBar.Update(ProgressBarText);
      ConfigPackage.SETRANGE(Code,PackageCode);
      ConfigPackage.DELETEALL(TRUE);

      ConfigProgressBar.Close;
    END;

    [External]
    PROCEDURE CreateEntities@3();
    VAR
      DataClassificationMgt@1004 : Codeunit 1750;
    BEGIN
      DataPrivacyEntities.RESET;
      DataPrivacyEntities.DELETEALL;
      DataClassificationMgt.GetPrivacyMasterTables(DataPrivacyEntities);
    END;

    [External]
    PROCEDURE SetPrivacyBlocked@18(EntityTypeTableNo@1004 : Integer;EntityNo@1000 : Code[50]);
    VAR
      Customer@1011 : Record 18;
      Vendor@1010 : Record 23;
      Contact@1009 : Record 5050;
      Resource@1008 : Record 156;
      Employee@1007 : Record 5200;
      SalespersonPurchaser@1006 : Record 13;
    BEGIN
      CASE EntityTypeTableNo OF
        DATABASE::Customer:
          IF Customer.GET(EntityNo) THEN
            IF NOT Customer."Privacy Blocked" THEN BEGIN
              Customer.VALIDATE("Privacy Blocked",TRUE);
              IF Customer.MODIFY THEN;
            END;
        DATABASE::Vendor:
          IF Vendor.GET(EntityNo) THEN
            IF NOT Vendor."Privacy Blocked" THEN BEGIN
              Vendor.VALIDATE("Privacy Blocked",TRUE);
              IF Vendor.MODIFY THEN;
            END;
        DATABASE::Contact:
          IF Contact.GET(EntityNo) THEN
            IF NOT Contact."Privacy Blocked" THEN BEGIN
              Contact.VALIDATE("Privacy Blocked",TRUE);
              IF Contact.MODIFY THEN;
            END;
        DATABASE::Resource:
          IF Resource.GET(EntityNo) THEN
            IF NOT Resource."Privacy Blocked" THEN BEGIN
              Resource.VALIDATE("Privacy Blocked",TRUE);
              IF Resource.MODIFY THEN;
            END;
        DATABASE::Employee:
          IF Employee.GET(EntityNo) THEN
            IF NOT Employee."Privacy Blocked" THEN BEGIN
              Employee.VALIDATE("Privacy Blocked",TRUE);
              IF Employee.MODIFY THEN;
            END;
        DATABASE::"Salesperson/Purchaser":
          IF SalespersonPurchaser.GET(EntityNo) THEN
            IF NOT SalespersonPurchaser."Privacy Blocked" THEN BEGIN
              SalespersonPurchaser.VALIDATE("Privacy Blocked",TRUE);
              IF SalespersonPurchaser.MODIFY THEN;
            END;
        ELSE
          OnAfterSetPrivacyBlocked(EntityTypeTableNo,EntityNo);
      END;
    END;

    [External]
    PROCEDURE GetPackageCode@17(EntityTypeTableNo@1002 : Integer;EntityNo@1000 : Code[50];ActionType@1004 : 'Export a data subject''s data,Create a data privacy configuration package') : Code[20];
    VAR
      ConfigPackage@1003 : Record 8623;
      TempEntityNumber@1001 : Code[17];
      PackageCodeTemp@1006 : Code[20];
      PackageCodeKeep@1005 : Code[20];
    BEGIN
      IF STRLEN(EntityNo) >= 18 THEN
        TempEntityNumber := COPYSTR(EntityNo,(STRLEN(EntityNo) MOD 17) + 1,(STRLEN(EntityNo) - (STRLEN(EntityNo) MOD 17)))
      ELSE
        TempEntityNumber := COPYSTR(EntityNo,1,STRLEN(EntityNo));

      CASE EntityTypeTableNo OF
        DATABASE::Customer:
          BEGIN
            PackageCodeKeep := 'CUS' + TempEntityNumber;
            PackageCodeTemp := 'CU*' + TempEntityNumber;
          END;
        DATABASE::Vendor:
          BEGIN
            PackageCodeKeep := 'VEN' + TempEntityNumber;
            PackageCodeTemp := 'VE*' + TempEntityNumber;
          END;
        DATABASE::Contact:
          BEGIN
            PackageCodeKeep := 'CON' + TempEntityNumber;
            PackageCodeTemp := 'CO*' + TempEntityNumber;
          END;
        DATABASE::Resource:
          BEGIN
            PackageCodeKeep := 'RES' + TempEntityNumber;
            PackageCodeTemp := 'RE*' + TempEntityNumber;
          END;
        DATABASE::Employee:
          BEGIN
            PackageCodeKeep := 'EMP' + TempEntityNumber;
            PackageCodeTemp := 'EM*' + TempEntityNumber;
          END;
        DATABASE::"Salesperson/Purchaser":
          BEGIN
            PackageCodeKeep := 'SPC' + TempEntityNumber;
            PackageCodeTemp := 'SP*' + TempEntityNumber;
          END;
        DATABASE::"User Setup":
          BEGIN
            PackageCodeKeep := 'USR' + TempEntityNumber;
            PackageCodeTemp := 'US*' + TempEntityNumber;
          END;
        ELSE
          OnAfterGetPackageCode(EntityTypeTableNo,EntityNo,ActionType,PackageCodeTemp,PackageCodeKeep);
      END;

      IF ActionType = ActionType::"Create a data privacy configuration package" THEN
        EXIT(PackageCodeKeep);
      IF ActionType = ActionType::"Export a data subject's data" THEN BEGIN
        IF ConfigPackage.GET(PackageCodeKeep) THEN
          EXIT(PackageCodeKeep);

        EXIT(PackageCodeTemp);
      END;
    END;

    LOCAL PROCEDURE CreatePackage@20(VAR ConfigPackage@1005 : Record 8623;PackageCode@1001 : Code[20];PackageName@1002 : Text[50]);
    VAR
      LanguageManagement@1004 : Codeunit 43;
      ApplicationSystemConstants@1000 : Codeunit 9015;
    BEGIN
      ConfigPackage.INIT;
      ConfigPackage.VALIDATE(Code,PackageCode);
      ConfigPackage.VALIDATE("Package Name",PackageName);
      ConfigPackage."Language ID" := LanguageManagement.ApplicationLanguage;
      ConfigPackage."Product Version" :=
        COPYSTR(ApplicationSystemConstants.ApplicationVersion,1,STRLEN(ConfigPackage."Product Version"));
      IF NOT ConfigPackage.INSERT(TRUE) THEN;
    END;

    LOCAL PROCEDURE CreatePackageTable@21(PackageCode@1000 : Code[20];TableId@1001 : Integer);
    VAR
      ConfigPackageTable@1002 : Record 8613;
    BEGIN
      ConfigPackageTable.INIT;
      ConfigPackageTable.VALIDATE("Package Code",PackageCode);
      ConfigPackageTable.VALIDATE("Table ID",TableId);
      IF NOT ConfigPackageTable.INSERT THEN;  // Do NOT fire the trigger as it will create the ConfigPackageField
    END;

    LOCAL PROCEDURE CreatePackageField@22(ConfigPackageCode@1000 : Code[20];TableId@1002 : Integer;FieldId@1005 : Integer;ProcessingOrder@1004 : Integer) : Boolean;
    VAR
      ConfigPackageField@1001 : Record 8616;
      Field@1003 : Record 2000000041;
    BEGIN
      IF IsValidField(TableId,FieldId,Field) THEN BEGIN
        InitPackageField(ConfigPackageField,Field,ConfigPackageCode,TableId,ProcessingOrder,FieldId);
        EXIT(ConfigPackageField.INSERT(TRUE));
      END;
    END;

    LOCAL PROCEDURE CreatePackageFilter@14(ConfigPackageCode@1001 : Code[20];TableId@1000 : Integer;EntityKeyField@1006 : Integer;FieldValue@1005 : Text[250]) : Boolean;
    VAR
      Field@1003 : Record 2000000041;
      ConfigPackageFilter@1007 : Record 8626;
      ConfigPackage@1002 : Record 8623;
    BEGIN
      IF ConfigPackage.GET(ConfigPackageCode) THEN
        IF TypeHelper.GetField(TableId,EntityKeyField,Field) THEN
          IF (Field.Class = Field.Class::Normal) AND
             ((Field.Type = Field.Type::Integer) OR (Field.Type = Field.Type::Text) OR
              (Field.Type = Field.Type::Code) OR (Field.Type = Field.Type::Option))
          THEN BEGIN
            InitPackageFilter(ConfigPackageFilter,ConfigPackageCode,TableId,EntityKeyField,FieldValue);
            EXIT(ConfigPackageFilter.INSERT(TRUE));
          END;
    END;

    LOCAL PROCEDURE IsValidField@19(TableId@1000 : Integer;FieldId@1002 : Integer;VAR Field@1001 : Record 2000000041) : Boolean;
    BEGIN
      IF TypeHelper.GetField(TableId,FieldId,Field) THEN
        IF (NOT ((Field.Type = Field.Type::Media) OR
                 (Field.Type = Field.Type::MediaSet) OR (Field.Type = Field.Type::BLOB) OR (Field.Type = Field.Type::GUID))) AND
           (Field.Class = Field.Class::Normal)
        THEN
          EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsInPrimaryKey@7(FieldRef@1000 : FieldRef) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
      KeyRef@1001 : KeyRef;
      FieldIndex@1002 : Integer;
    BEGIN
      RecRef := FieldRef.RECORD;

      KeyRef := RecRef.KEYINDEX(1);
      FOR FieldIndex := 1 TO KeyRef.FIELDCOUNT DO
        IF KeyRef.FIELDINDEX(FieldIndex).NUMBER = FieldRef.NUMBER THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE SetRangeTableRelationsMetadata@24(VAR TableRelationsMetadata@1000 : Record 2000000141;RecRef@1001 : RecordRef;EntityKeyField@1002 : Integer);
    BEGIN
      TableRelationsMetadata.RESET;
      TableRelationsMetadata.SETRANGE("Related Table ID",RecRef.NUMBER);
      TableRelationsMetadata.SETRANGE("Related Field No.",EntityKeyField);
      TableRelationsMetadata.SETRANGE("Validate Table Relation",TRUE);
      TableRelationsMetadata.SETRANGE("Condition Field No.",0);
      TableRelationsMetadata.SETFILTER("Table ID",'<>%1',RecRef.NUMBER); // More than one filter causes no records to be returned
    END;

    LOCAL PROCEDURE SetRangeDataSensitivity@26(VAR DataSensitivity@1000 : Record 2000000159;TableID@1001 : Integer;DataSensitivityOption@1002 : 'Sensitive,Personal,Company Confidential,Normal,Unclassified');
    BEGIN
      DataSensitivity.RESET;
      DataSensitivity.SETRANGE("Company Name",COMPANYNAME);
      DataSensitivity.SETRANGE("Table No",TableID);
      CASE DataSensitivityOption OF
        DataSensitivityOption::Sensitive:
          DataSensitivity.SETFILTER("Data Sensitivity",'%1',DataSensitivity."Data Sensitivity"::Sensitive);
        DataSensitivityOption::Personal:
          DataSensitivity.SETFILTER("Data Sensitivity",'%1|%2',
            DataSensitivity."Data Sensitivity"::Sensitive,
            DataSensitivity."Data Sensitivity"::Personal);
        DataSensitivityOption::"Company Confidential":
          DataSensitivity.SETFILTER("Data Sensitivity",'%1|%2|%3',
            DataSensitivity."Data Sensitivity"::Sensitive,
            DataSensitivity."Data Sensitivity"::Personal,
            DataSensitivity."Data Sensitivity"::"Company Confidential");
        DataSensitivityOption::Normal:
          DataSensitivity.SETFILTER("Data Sensitivity",'%1|%2|%3|%4',
            DataSensitivity."Data Sensitivity"::Sensitive,
            DataSensitivity."Data Sensitivity"::Personal,
            DataSensitivity."Data Sensitivity"::"Company Confidential",
            DataSensitivity."Data Sensitivity"::Normal);
        DataSensitivityOption::Unclassified:
          DataSensitivity.SETFILTER("Data Sensitivity",'%1',DataSensitivity."Data Sensitivity"::Unclassified);
      END;
    END;

    LOCAL PROCEDURE CreateRelatedDataFields@27(VAR TableRelationsMetadata@1000 : Record 2000000141;VAR ConfigPackage@1003 : Record 8623;EntityNo@1007 : Code[50];VAR LastTableID@1005 : Integer;DataSensitivityOption@1004 : 'Sensitive,Personal,Company Confidential,Normal,Unclassified');
    VAR
      DataSensitivity@1002 : Record 2000000159;
      RecRef@1008 : RecordRef;
      FieldRef@1009 : FieldRef;
      ProcessingOrder@1006 : Integer;
      FilterCreated@1001 : Boolean;
      FieldIndex@1010 : Integer;
      TableIDProcessed@1012 : Integer;
    BEGIN
      REPEAT
        ConfigProgressBar.Update(TableRelationsMetadata.TABLENAME);

        // Create the fields for the primary key fields first...
        IF (TableIDProcessed <> TableRelationsMetadata."Table ID") AND OpenRecRef(RecRef,TableRelationsMetadata."Table ID") THEN BEGIN
          TableIDProcessed := TableRelationsMetadata."Table ID";
          FOR FieldIndex := 1 TO RecRef.FIELDCOUNT DO
            IF GetFieldRef(FieldRef,RecRef,FieldIndex) THEN
              IF IsInPrimaryKey(FieldRef) THEN BEGIN
                ProcessingOrder += 1;
                CreatePackageField(ConfigPackage.Code,TableRelationsMetadata."Table ID",FieldRef.NUMBER,ProcessingOrder);
              END;
          RecRef.CLOSE;
        END;

        FilterCreated := FALSE;

        FilterCreated :=
          CreatePackageFilter(ConfigPackage.Code,TableRelationsMetadata."Table ID",TableRelationsMetadata."Field No.",EntityNo);

        IF FilterCreated THEN BEGIN
          ProcessingOrder += 1;
          CreatePackageField(
            ConfigPackage.Code,TableRelationsMetadata."Table ID",TableRelationsMetadata."Field No.",ProcessingOrder);
        END;

        IF FilterCreated THEN
          IF LastTableID <> TableRelationsMetadata."Table ID" THEN BEGIN
            CreatePackageTable(ConfigPackage.Code,TableRelationsMetadata."Table ID");
            LastTableID := TableRelationsMetadata."Table ID";

            SetRangeDataSensitivity(DataSensitivity,LastTableID,DataSensitivityOption);
            IF DataSensitivity.FINDSET THEN BEGIN
              REPEAT
                ProcessingOrder += 1;
                CreatePackageField(ConfigPackage.Code,DataSensitivity."Table No",DataSensitivity."Field No",ProcessingOrder);
              UNTIL DataSensitivity.NEXT = 0;
            END;
          END;

      UNTIL TableRelationsMetadata.NEXT = 0;
    END;

    [TryFunction]
    LOCAL PROCEDURE OpenRecRef@6(VAR RecRef@1000 : RecordRef;TableNo@1001 : Integer);
    BEGIN
      RecRef.OPEN(TableNo);
    END;

    [TryFunction]
    LOCAL PROCEDURE GetFieldRef@4(VAR FieldRef@1000 : FieldRef;VAR RecordRef@1001 : RecordRef;FieldIndex@1002 : Integer);
    BEGIN
      FieldRef := RecordRef.FIELDINDEX(FieldIndex);
    END;

    LOCAL PROCEDURE InitPackageField@28(VAR ConfigPackageField@1005 : Record 8616;VAR Field@1000 : Record 2000000041;PackageCode@1002 : Code[20];TableId@1001 : Integer;ProcessingOrder@1004 : Integer;FieldId@1006 : Integer);
    BEGIN
      ConfigPackageField.INIT;
      ConfigPackageField.VALIDATE("Package Code",PackageCode);
      ConfigPackageField.VALIDATE("Table ID",TableId);
      ConfigPackageField.VALIDATE("Field Name",Field.FieldName);
      ConfigPackageField.VALIDATE("Field Caption",Field."Field Caption");
      ConfigPackageField.VALIDATE("Field ID",FieldId);
      ConfigPackageField.VALIDATE("Validate Field",TRUE);
      ConfigPackageField.VALIDATE("Include Field",TRUE);
      ConfigPackageField.VALIDATE("Processing Order",ProcessingOrder);
    END;

    LOCAL PROCEDURE InitPackageFilter@29(VAR ConfigPackageFilter@1000 : Record 8626;ConfigPackageCode@1001 : Code[20];TableNo@1003 : Integer;EntityKeyField@1004 : Integer;FieldValue@1005 : Text[250]);
    VAR
      ContactPerson@1002 : Record 5050;
      ContactCompany@1006 : Record 5050;
    BEGIN
      ConfigPackageFilter.INIT;
      ConfigPackageFilter.VALIDATE("Package Code",ConfigPackageCode);
      ConfigPackageFilter.VALIDATE("Table ID",TableNo);
      ConfigPackageFilter.VALIDATE("Field ID",EntityKeyField);
      CASE TableNo OF
        DATABASE::Contact,
        DATABASE::"Contact Alt. Address",
        DATABASE::"Sales Header",
        DATABASE::"Purchase Header",
        DATABASE::"Sales Shipment Header",
        DATABASE::"Sales Invoice Header",
        DATABASE::"Sales Cr.Memo Header",
        DATABASE::"Purch. Rcpt. Header",
        DATABASE::"Purch. Inv. Header",
        DATABASE::"Purch. Cr. Memo Hdr.",
        DATABASE::"Sales Header Archive",
        DATABASE::"Purchase Header Archive",
        DATABASE::"Sales Invoice Entity Aggregate",
        DATABASE::"Sales Order Entity Buffer",
        DATABASE::"Sales Quote Entity Buffer",
        DATABASE::"Sales Cr. Memo Entity Buffer",
        DATABASE::"Service Header",
        DATABASE::"Service Contract Header",
        DATABASE::"Service Shipment Header",
        DATABASE::"Service Invoice Header",
        DATABASE::"Service Cr.Memo Header",
        DATABASE::"Return Shipment Header",
        DATABASE::"Return Receipt Header",
        DATABASE::"Interaction Log Entry":
          IF ContactPerson.GET(FORMAT(FieldValue,20)) THEN // FieldValue is the EntityNo for this method
            IF ContactCompany.GET(ContactPerson."Company No.") THEN
              FieldValue := FieldValue + ' | ' + ContactCompany."No.";
      END;
      ConfigPackageFilter.VALIDATE("Field Filter",FORMAT(FieldValue));
    END;

    LOCAL PROCEDURE CreateDataForChangeLogEntries@8(PackageCode@1000 : Code[20];EntityNo@1001 : Code[50];EntityTableID@1003 : Integer);
    VAR
      ConfigPackage@1002 : Record 8623;
      ChangeLogEntry@1004 : Record 405;
      ConfigPackageTable@1005 : Record 8613;
      ConfigPackageFilter@1007 : Record 8626;
    BEGIN
      IF ConfigPackage.GET(PackageCode) THEN BEGIN
        // Create package table for Change Log table (405)
        ConfigPackageTable.INIT;
        ConfigPackageTable.VALIDATE("Package Code",PackageCode);
        ConfigPackageTable.VALIDATE("Table ID",DATABASE::"Change Log Entry");
        IF NOT ConfigPackageTable.INSERT(TRUE) THEN;  // Fire the trigger as it will create the ConfigPackageField

        // Create package filter for Table No = Change Log table (405) AND Primary key Field 1 value = Entity No
        ConfigPackageFilter.INIT;
        ConfigPackageFilter.VALIDATE("Package Code",PackageCode);
        ConfigPackageFilter.VALIDATE("Table ID",DATABASE::"Change Log Entry");
        ConfigPackageFilter.VALIDATE("Field ID",ChangeLogEntry.FIELDNO("Table No.")); // Table No. field.
        ConfigPackageFilter.VALIDATE("Field Filter",FORMAT(EntityTableID)); // Need to pass in table number from entity
        IF NOT ConfigPackageFilter.INSERT(TRUE) THEN;

        ConfigPackageFilter.INIT;
        ConfigPackageFilter.VALIDATE("Package Code",PackageCode);
        ConfigPackageFilter.VALIDATE("Table ID",DATABASE::"Change Log Entry");
        ConfigPackageFilter.VALIDATE("Field ID",ChangeLogEntry.FIELDNO("Primary Key Field 1 Value")); // Primary Key Field 1 Value field.
        ConfigPackageFilter.VALIDATE("Field Filter",FORMAT(EntityNo));
        IF NOT ConfigPackageFilter.INSERT(TRUE) THEN;
      END;
    END;

    [Integration]
    PROCEDURE OnCreateData@9(EntityTypeTableNo@1003 : Integer;EntityNo@1002 : Code[50];VAR PackageCode@1000 : Code[20];ActionType@1004 : 'Export a data subject''s data,Create a data privacy configuration package';GeneratePreview@1005 : Boolean;DataSensitivity@1006 : 'Sensitive,Personal,Company Confidential,Normal,Unclassified');
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetPrivacyBlocked@10(EntityTypeTableNo@1001 : Integer;EntityNo@1000 : Code[50]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetPackageCode@2(EntityTypeTableNo@1001 : Integer;EntityNo@1000 : Code[50];ActionType@1003 : 'Export a data subject''s data,Create a data privacy configuration package';VAR PackageCodeTemp@1002 : Code[20];VAR PackageCodeKeep@1004 : Code[20]);
    BEGIN
    END;

    BEGIN
    {
       4PS, Invisible change, however DATABASE::"Interaction Log Entry", DATABASE::"Sales Header Archive" and
       DATABASE::"Purchase Header Archive" are directed to renumbered tables
    }
    END.
  }
}

