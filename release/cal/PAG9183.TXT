OBJECT Page 9183 Generic Chart Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Generic Chart Setup;
               NOR=Generisk diagramoppsett;
               SVE=Konfiguration av allmÑnt diagram];
    SourceTable=Table2000000078;
    PageType=Card;
    OnAfterGetRecord=BEGIN
                       SetFieldValues;
                       EnableControls;
                     END;

    ActionList=ACTIONS
    {
      { 17      ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 38      ;1   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Import Chart;
                                 NOR=Importer diagram;
                                 SVE=Importera diagram];
                      ToolTipML=[ENU=Import a generic chart in XML format.;
                                 NOR=Importer et generisk diagram i XML-format.;
                                 SVE=Importera et allmÑnt diagram i XML-format.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Import;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ImportChartDefinition;
                               END;
                                }
      { 37      ;1   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=E&xport Chart;
                                 NOR=&Eksporter diagram;
                                 SVE=E&xportera diagram];
                      ToolTipML=[ENU=Export a generic chart in XML format. You can rename the file, modify the chart definition using an XML editor, and then import the new chart into another client.;
                                 NOR=Eksporter et generisk diagram i XML-format. Du kan gi nytt navn til filen, endre diagramdefinisjonen ved hjelp av et XML-redigeringsprogram, og deretter importere det nye diagrammet til en annen klient.;
                                 SVE=Exportera et allmÑnt diagram i XML-format. Du kan byta namn pÜ filen, Ñndra diagramdefinitionen med hjÑlp av en XML-redigerare och sedan importera det nya diagrammet till en annan klient.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Export;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ExportChartDefinition;
                               END;
                                }
      { 41      ;1   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Copy Chart;
                                 NOR=Kopier diagram;
                                 SVE=Kopiera diagram];
                      ToolTipML=[ENU=Copy an existing chart to create a new generic chart.;
                                 NOR=Kopier et eksisterende diagram for Ü opprette et nytt generisk diagram.;
                                 SVE=Kopiera ett befintligt diagram och skapa ett nytt, allmÑnt diagram.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Copy;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 CopyGenericChart@1034 : Page 9187;
                               BEGIN
                                 CopyGenericChart.SetSourceChart(Rec);
                                 CopyGenericChart.RUNMODAL;
                               END;
                                }
      { 14      ;    ;ActionContainer;
                      Name=Action;
                      CaptionML=[ENU=Actions;
                                 NOR=Handlinger;
                                 SVE=ètgÑrder];
                      ActionContainerType=RelatedInformation }
      { 15      ;1   ;Action    ;
                      Name=Filters;
                      CaptionML=[ENU=Filters;
                                 NOR=Filtre;
                                 SVE=Filter];
                      ToolTipML=[ENU=Filter on the generic charts.;
                                 NOR=Filtrer pÜ de generiske diagrammene.;
                                 SVE=Filtrera pÜ de allmÑnna diagrammen.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=EditFilter;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowChartFiltersPage;
                                 CurrPage.UPDATE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=General;
                CaptionML=[ENU=General;
                           NOR=Generelt;
                           SVE=AllmÑnt];
                GroupType=Group }

    { 3   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the unique ID of the chart.;
                           NOR=Angir den unike ID-en for diagrammet.;
                           SVE=Anger diagrammets unika id.];
                ApplicationArea=#Basic,#Suite;
                NotBlank=Yes;
                SourceExpr=ID }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the chart.;
                           NOR=Angir navnet pÜ diagrammet.;
                           SVE=Anger diagrammets namn.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Name }

    { 7   ;2   ;Field     ;
                Name=ChartExists;
                CaptionML=[ENU=Chart Exists;
                           NOR=Diagram finnes;
                           SVE=Diagram finns];
                ToolTipML=[ENU="Specifies that one or more charts have been created from the generic chart. ";
                           NOR="Angir at ett eller flere diagrammer har blitt opprettet fra det generiske diagrammet. ";
                           SVE="Anger att ett eller flera diagram har skapats frÜn det allmÑnna diagrammet. "];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=BLOB.HASVALUE;
                Visible=FALSE }

    { 8   ;1   ;Group     ;
                Name=Data Source;
                CaptionML=[ENU=Data Source;
                           NOR=Datakilde;
                           SVE=DatakÑlla];
                GroupType=Group }

    { 11  ;2   ;Field     ;
                Name=Source Type;
                CaptionML=[ENU=Source Type;
                           NOR=Kildetype;
                           SVE=Ursprungstyp];
                ToolTipML=[ENU=Specifies the source type for the chart.;
                           NOR=Angir kildetypen for diagrammet.;
                           SVE=Anger diagrammet kÑlltyp.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."Source Type";
                OnValidate=VAR
                             CalledFrom@1001 : 'Source Type,Source ID';
                           BEGIN
                             ResetFields(CalledFrom::"Source Type");
                             UpdateChartDefinition;
                             StoreTempXRecValues
                           END;

                OnLookup=VAR
                           CalledFrom@1002 : 'Source Type,Source ID';
                         BEGIN
                           ResetFields(CalledFrom::"Source Type");
                           UpdateChartDefinition;
                           StoreTempXRecValues
                         END;
                          }

    { 9   ;2   ;Field     ;
                Name=Source ID;
                CaptionML=[ENU=Source ID;
                           NOR=Kilde-ID;
                           SVE=Ursprungs-ID];
                ToolTipML=[ENU=Specifies the source ID for the chart.;
                           NOR=Angir kilde-ID-en for diagrammet.;
                           SVE=Anger diagrammet kÑll-id.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."Source ID";
                OnValidate=VAR
                             GenericChartMgt@1000 : Codeunit 9180;
                             CalledFrom@1002 : 'Source Type,Source ID';
                           BEGIN
                             ResetFields(CalledFrom::"Source ID");
                             GenericChartMgt.ValidateObjectID(
                               TempGenericChartSetup."Source Type",TempGenericChartSetup."Source ID",TempGenericChartSetup."Object Name");
                             UpdateChartDefinition;
                             StoreTempXRecValues
                           END;

                OnLookup=VAR
                           GenericChartMgt@1000 : Codeunit 9180;
                           CalledFrom@1003 : 'Source Type,Source ID';
                         BEGIN
                           GenericChartMgt.CheckSourceTypeID(TempGenericChartSetup,FALSE);
                           GenericChartMgt.LookUpObjectId(
                             TempGenericChartSetup."Source Type",TempGenericChartSetup."Source ID",TempGenericChartSetup."Object Name");
                           ResetFields(CalledFrom::"Source ID");
                           GenericChartMgt.ValidateObjectID(
                             TempGenericChartSetup."Source Type",TempGenericChartSetup."Source ID",TempGenericChartSetup."Object Name");
                           UpdateChartDefinition;
                           StoreTempXRecValues
                         END;
                          }

    { 10  ;2   ;Field     ;
                Name=Source Name;
                CaptionML=[ENU=Source Name;
                           NOR=Kildenavn;
                           SVE=Ursprungsnamn];
                ToolTipML=[ENU=Specifies the source name for the chart.;
                           NOR=Angir kildenavnet for diagrammet.;
                           SVE=Anger diagrammet kÑllnamn.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."Object Name";
                Editable=FALSE;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                           END;
                            }

    { 43  ;2   ;Field     ;
                CaptionML=[ENU=Filters;
                           NOR=Filtre;
                           SVE=Filter];
                ToolTipML=[ENU=Specifies the field filters which delimit the field values that the chart is based on.;
                           NOR=Angir filterfeltene som avgrenser feltverdier som diagrammet er basert pÜ.;
                           SVE=Anger fÑltfiltren som avgrÑnsar fÑltvÑrdena som diagrammet bygger pÜ.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."Filter Text";
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               ShowChartFiltersPage;
                               CurrPage.UPDATE;
                             END;
                              }

    { 18  ;1   ;Group     ;
                Name=Measures (Y-Axis);
                CaptionML=[ENU=Measures (Y-Axis);
                           NOR=MÜl (Y-akse);
                           SVE=MÑtvÑrden (Y-axel)];
                GroupType=Group;
                Layout=Rows }

    { 25  ;2   ;Group     ;
                GroupType=GridLayout;
                Layout=Rows }

    { 19  ;3   ;Group     ;
                Name=Required Measure;
                CaptionML=[ENU=Required Measure;
                           NOR=Obligatorisk mÜl;
                           SVE=MÑtvÑrde (krÑvs)];
                GroupType=Group }

    { 20  ;4   ;Field     ;
                Name=RequiredMeasureColumn;
                CaptionML=[ENU=Data Column;
                           NOR=Datakolonne;
                           SVE=Datakolumn];
                ToolTipML=[ENU=Specifies the field or query column that the y-axis is based on. The list of values that appears when you choose Data Column field is filtered by the ID of the data source that you select on the Data Source FastTab.;
                           NOR=Angir feltet eller spõrrekolonnen som y-aksen er basert pÜ. Listen over verdier som vises nÜr du velger feltet Datakolonne, filtreres etter ID-en for datakilden du velger i hurtigfanen Datakilde.;
                           SVE=Anger det fÑlt eller den frÜgekolumn som y-axeln bygger pÜ. Listan med vÑrden som visas nÑr du vÑljer fÑltet Datakolumn filtreras efter id-numret fîr datakÑllan som du vÑljer pÜ snabbfliken DatakÑlla.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DataColumn[1];
                Enabled=DataColumn1Enabled;
                Editable=DataColumn1Enabled;
                RowSpan=1;
                ColumnSpan=1;
                OnValidate=BEGIN
                             ValidateDataColumn(1);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[1],DummyCaption,2,FALSE);
                           ValidateDataColumn(1);
                         END;
                          }

    { 21  ;4   ;Field     ;
                Name=RequiredMeasureAggregation;
                CaptionML=[ENU=Aggregation;
                           NOR=Samling;
                           SVE=Aggregering];
                ToolTipML=[ENU=Specifies how data on the y-axis is aggregated, such as by the sum or by the maximum values.;
                           NOR=Angir hvordan data pÜ y-aksen samles, for eksempel etter summen eller maksimumsverdiene.;
                           SVE=Anger hur data pÜ y-axeln aggregeras, t.ex. efter summa eller maximivÑrden.];
                OptionCaptionML=[ENU=None,Count,Sum,Min,Max,Avg;
                                 NOR=Ingen,Antall,Sum,Min.,Maks.,Gj.sn.;
                                 SVE=Inget,Antal,Summa,Min,Max,Genomsnittlig];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Aggregation[1];
                RowSpan=1;
                ColumnSpan=1;
                OnValidate=BEGIN
                             CheckAggregation(1);
                             UpdateChartDefinition;
                           END;
                            }

    { 22  ;4   ;Field     ;
                Name=RequiredMeasureType;
                CaptionML=[ENU=Graph Type;
                           NOR=Graftype;
                           SVE=Diagramtyp];
                ToolTipML=[ENU=Specifies how data is shown graphically in the chart, such as column, line, or pie.;
                           NOR=Angir hvordan data vises grafisk i diagrammet, for eksempel kolonne, linje eller sektor.;
                           SVE=Anger hur data visas grafiskt i diagrammet, till exempel som kolumner, rader eller cirkelsektorer.];
                OptionCaptionML=[ENU=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,Pie,Doughnut,Range,Radar,Funnel;
                                 NOR=Kolonne,Punkt,Linje,ColumnStacked,ColumnStacked100,OmrÜde,AreaStacked,AreaStacked100,StepLine,Sektor,Hjul,Rekkevidde,Radar,Trak;
                                 SVE=Kolumn,Punkt,Rad,ColumnStacked,ColumnStacked100,OmrÜde,AreaStacked,AreaStacked100,StepLine,Cirkeldiagram,Cirkel,Intervall,PolÑrdiagram,Tratt];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ChartType;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;
                            }

    { 54  ;4   ;Field     ;
                Name=RequiredMeasureCaption;
                CaptionML=[ENU=Data Point Label;
                           NOR=Datapunktetikett;
                           SVE=Datapunktsetikett];
                ToolTipML=[ENU=Specifies the text that describes the selected y-axis value in a tooltip when you hover over a data point. The data point label is shown in front of the data value.;
                           NOR=Angir teksten som beskriver den valgte y-akseverdien i et verktõytips nÜr du holder pekeren over et datapunkt. Datapunktetiketten vises foran dataverdien.;
                           SVE=Anger den text som beskriver det markerade vÑrdet pÜ y-axeln i en knappbeskrivning nÑr du hÜller pekaren îver en datapunkt. Datapunktens etikett visas framfîr dess vÑrde.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MeasureCaption[1];
                Enabled=DataColumn1Enabled;
                Editable=DataColumn1Enabled;
                RowSpan=1;
                ColumnSpan=1;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.RequiredMeasureCode,GenericChartMgt.GetUserLanguage,MeasureCaption[1]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[1] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.RequiredMeasureCode);
                               UpdateChartDefinition;
                             END;
                              }

    { 23  ;3   ;Group     ;
                Name=Optional Measure 1;
                CaptionML=[ENU=Optional Measure;
                           NOR=Valgfritt mÜl;
                           SVE=Valfritt mÑtvÑrde];
                GroupType=Group }

    { 24  ;4   ;Field     ;
                Name=OptionalMeasureColumn1;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DataColumn[2];
                Enabled=OptionalMeasuresEnabled AND DataColumn2Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             ValidateDataColumn(2);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[2],DummyCaption,2,FALSE);
                           ValidateDataColumn(2);
                         END;

                ShowCaption=No }

    { 26  ;4   ;Field     ;
                Name=OptionalMeasureAggregation1;
                OptionCaptionML=[ENU=None,Count,Sum,Min,Max,Avg;
                                 NOR=Ingen,Antall,Sum,Min.,Maks.,Gj.sn.;
                                 SVE=Inget,Antal,Summa,Min,Max,Genomsnittlig];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Aggregation[2];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             CheckAggregation(2);
                             UpdateChartDefinition;
                           END;

                ShowCaption=No }

    { 27  ;4   ;Field     ;
                Name=OptionalMeasureType1;
                OptionCaptionML=[ENU=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range;
                                 NOR=Kolonne,Punkt,Linje,KolonneStablet,KolonneStablet100,OmrÜde,OmrÜdeStablet,OmrÜdeStablet100,TrinnLinje,,,Intervall;
                                 SVE=Kolumn,Punkt,Linje,ColumnStacked,ColumnStacked100,Yta,AreaStacked,AreaStacked100,StepLine,,,Intervall];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ChartTypeReduced[2];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;

                ShowCaption=No }

    { 55  ;4   ;Field     ;
                Name=OptionalMeasureCaption1;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MeasureCaption[2];
                Enabled=OptionalMeasuresEnabled AND DataColumn2Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.OptionalMeasure1Code,GenericChartMgt.GetUserLanguage,MeasureCaption[2]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[2] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.OptionalMeasure1Code);
                               UpdateChartDefinition;
                             END;

                ShowCaption=No }

    { 28  ;3   ;Group     ;
                Name=Optional Measure 2;
                CaptionML=[ENU=Optional Measure;
                           NOR=Valgfritt mÜl;
                           SVE=Valfritt mÑtvÑrde];
                GroupType=Group }

    { 29  ;4   ;Field     ;
                Name=OptionalMeasureColumn2;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DataColumn[3];
                Enabled=OptionalMeasuresEnabled AND DataColumn3Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             ValidateDataColumn(3);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[3],DummyCaption,2,FALSE);
                           ValidateDataColumn(3);
                         END;

                ShowCaption=No }

    { 30  ;4   ;Field     ;
                Name=OptionalMeasureAggregation2;
                OptionCaptionML=[ENU=None,Count,Sum,Min,Max,Avg;
                                 NOR=Ingen,Antall,Sum,Min.,Maks.,Gj.sn.;
                                 SVE=Inget,Antal,Summa,Min,Max,Genomsnittlig];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Aggregation[3];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             CheckAggregation(3);
                             UpdateChartDefinition;
                           END;

                ShowCaption=No }

    { 31  ;4   ;Field     ;
                Name=OptionalMeasureType2;
                OptionCaptionML=[ENU=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range;
                                 NOR=Kolonne,Punkt,Linje,KolonneStablet,KolonneStablet100,OmrÜde,OmrÜdeStablet,OmrÜdeStablet100,TrinnLinje,,,Intervall;
                                 SVE=Kolumn,Punkt,Linje,ColumnStacked,ColumnStacked100,Yta,AreaStacked,AreaStacked100,StepLine,,,Intervall];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ChartTypeReduced[3];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;

                ShowCaption=No }

    { 56  ;4   ;Field     ;
                Name=OptionalMeasureCaption2;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MeasureCaption[3];
                Enabled=OptionalMeasuresEnabled AND DataColumn3Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.OptionalMeasure2Code,GenericChartMgt.GetUserLanguage,MeasureCaption[3]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[3] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.OptionalMeasure2Code);
                               UpdateChartDefinition;
                             END;

                ShowCaption=No }

    { 32  ;3   ;Group     ;
                Name=Optional Measure 3;
                CaptionML=[ENU=Optional Measure;
                           NOR=Valgfritt mÜl;
                           SVE=Valfritt mÑtvÑrde];
                GroupType=Group }

    { 33  ;4   ;Field     ;
                Name=OptionalMeasureColumn3;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DataColumn[4];
                Enabled=OptionalMeasuresEnabled AND DataColumn4Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             ValidateDataColumn(4);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[4],DummyCaption,2,FALSE);
                           ValidateDataColumn(4);
                         END;

                ShowCaption=No }

    { 34  ;4   ;Field     ;
                Name=OptionalMeasureAggregation3;
                OptionCaptionML=[ENU=None,Count,Sum,Min,Max,Avg;
                                 NOR=Ingen,Antall,Sum,Min.,Maks.,Gj.sn.;
                                 SVE=Inget,Antal,Summa,Min,Max,Genomsnittlig];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Aggregation[4];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             CheckAggregation(4);
                             UpdateChartDefinition;
                           END;

                ShowCaption=No }

    { 35  ;4   ;Field     ;
                Name=OptionalMeasureType3;
                OptionCaptionML=[ENU=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range;
                                 NOR=Kolonne,Punkt,Linje,KolonneStablet,KolonneStablet100,OmrÜde,OmrÜdeStablet,OmrÜdeStablet100,TrinnLinje,,,Intervall;
                                 SVE=Kolumn,Punkt,Linje,ColumnStacked,ColumnStacked100,Yta,AreaStacked,AreaStacked100,StepLine,,,Intervall];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ChartTypeReduced[4];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;

                ShowCaption=No }

    { 57  ;4   ;Field     ;
                Name=OptionalMeasureCaption3;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MeasureCaption[4];
                Enabled=OptionalMeasuresEnabled AND DataColumn4Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.OptionalMeasure3Code,GenericChartMgt.GetUserLanguage,MeasureCaption[4]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[4] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.OptionalMeasure3Code);
                               UpdateChartDefinition;
                             END;

                ShowCaption=No }

    { 47  ;3   ;Group     ;
                Name=Optional Measure 4;
                CaptionML=[ENU=Optional Measure;
                           NOR=Valgfritt mÜl;
                           SVE=Valfritt mÑtvÑrde];
                GroupType=Group }

    { 46  ;4   ;Field     ;
                Name=OptionalMeasureColumn4;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DataColumn[5];
                Enabled=OptionalMeasuresEnabled AND DataColumn5Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             ValidateDataColumn(5);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[5],DummyCaption,2,FALSE);
                           ValidateDataColumn(5);
                         END;

                ShowCaption=No }

    { 45  ;4   ;Field     ;
                Name=OptionalMeasureAggregation4;
                OptionCaptionML=[ENU=None,Count,Sum,Min,Max,Avg;
                                 NOR=Ingen,Antall,Sum,Min.,Maks.,Gj.sn.;
                                 SVE=Inget,Antal,Summa,Min,Max,Genomsnittlig];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Aggregation[5];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             CheckAggregation(5);
                             UpdateChartDefinition;
                           END;

                ShowCaption=No }

    { 40  ;4   ;Field     ;
                Name=OptionalMeasureType4;
                OptionCaptionML=[ENU=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range;
                                 NOR=Kolonne,Punkt,Linje,KolonneStablet,KolonneStablet100,OmrÜde,OmrÜdeStablet,OmrÜdeStablet100,TrinnLinje,,,Intervall;
                                 SVE=Kolumn,Punkt,Linje,ColumnStacked,ColumnStacked100,Yta,AreaStacked,AreaStacked100,StepLine,,,Intervall];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ChartTypeReduced[5];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;

                ShowCaption=No }

    { 58  ;4   ;Field     ;
                Name=OptionalMeasureCaption4;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MeasureCaption[5];
                Enabled=OptionalMeasuresEnabled AND DataColumn5Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.OptionalMeasure4Code,GenericChartMgt.GetUserLanguage,MeasureCaption[5]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[5] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.OptionalMeasure4Code);
                               UpdateChartDefinition;
                             END;

                ShowCaption=No }

    { 51  ;3   ;Group     ;
                Name=Optional Measure 5;
                CaptionML=[ENU=Optional Measure;
                           NOR=Valgfritt mÜl;
                           SVE=Valfritt mÑtvÑrde];
                GroupType=Group }

    { 50  ;4   ;Field     ;
                Name=OptionalMeasureColumn5;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DataColumn[6];
                Enabled=OptionalMeasuresEnabled AND DataColumn6Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             ValidateDataColumn(6);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[6],DummyCaption,2,FALSE);
                           ValidateDataColumn(6);
                         END;

                ShowCaption=No }

    { 49  ;4   ;Field     ;
                Name=OptionalMeasureAggregation5;
                OptionCaptionML=[ENU=None,Count,Sum,Min,Max,Avg;
                                 NOR=Ingen,Antall,Sum,Min.,Maks.,Gj.sn.;
                                 SVE=Inget,Antal,Summa,Min,Max,Genomsnittlig];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Aggregation[6];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             CheckAggregation(6);
                             UpdateChartDefinition;
                           END;

                ShowCaption=No }

    { 48  ;4   ;Field     ;
                Name=OptionalMeasureType5;
                OptionCaptionML=[ENU=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range;
                                 NOR=Kolonne,Punkt,Linje,KolonneStablet,KolonneStablet100,OmrÜde,OmrÜdeStablet,OmrÜdeStablet100,TrinnLinje,,,Intervall;
                                 SVE=Kolumn,Punkt,Linje,ColumnStacked,ColumnStacked100,Yta,AreaStacked,AreaStacked100,StepLine,,,Intervall];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ChartTypeReduced[6];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;

                ShowCaption=No }

    { 59  ;4   ;Field     ;
                Name=OptionalMeasureCaption5;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MeasureCaption[6];
                Enabled=OptionalMeasuresEnabled AND DataColumn6Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.OptionalMeasure5Code,GenericChartMgt.GetUserLanguage,MeasureCaption[6]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[6] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.OptionalMeasure5Code);
                               UpdateChartDefinition;
                             END;

                ShowCaption=No }

    { 53  ;2   ;Field     ;
                Name=Y-Axis Title;
                CaptionML=[ENU=Y-Axis Title;
                           NOR=X-aksetittel;
                           SVE=Rubrik pÜ Y-axel];
                ToolTipML=[ENU=Specifies the text that is shown next to the y-axis on the generic chart. To specify y-axis titles in different languages, choose the AssistEdit button to open the Generic Chart Text Editor window.;
                           NOR=Angir teksten som vises ved siden av y-aksen i det generiske diagrammet. Hvis du vil angi y-aksetitler pÜ ulike sprÜk, klikker du knappen AssistEdit for Ü Üpne vinduet Generisk diagram - tekstredigeringsprogram.;
                           SVE=Anger texten som visas bredvid y-axeln i det allmÑnna diagrammet. Om du vill ange rubriker fîr y-axeln pÜ olika sprÜk vÑljer du knappen AssistEdit, sÜ îppnas fînstret Textredigerare fîr allmÑnt diagram.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."Y-Axis Title";
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.YAxisTitleCode,GenericChartMgt.GetUserLanguage,
                               TempGenericChartSetup."Y-Axis Title");
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               TempGenericChartSetup."Y-Axis Title" :=
                                 GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.YAxisTitleCode);
                               UpdateChartDefinition;
                             END;
                              }

    { 52  ;2   ;Field     ;
                Name=Show Y-Axis Title;
                CaptionML=[ENU=Show Y-Axis Title;
                           NOR=Vis Y-aksetittel;
                           SVE=Visa rubrik pÜ Y-axel];
                ToolTipML=[ENU=Specifies if the value in the Y-Axis Title field is shown on the generic chart.;
                           NOR=Angir om verdien i feltet Y-aksetittel vises i det generiske diagrammet.;
                           SVE=Anger om vÑrdet i fÑltet Rubrik pÜ Y-axel ska visas i det allmÑnna diagrammet.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."Y-Axis Show Title";
                OnValidate=VAR
                             GenericChartMgt@1001 : Codeunit 9180;
                           BEGIN
                             GenericChartMgt.CheckSourceTypeID(TempGenericChartSetup,TRUE);
                             UpdateChartDefinition;
                           END;
                            }

    { 12  ;1   ;Group     ;
                Name=Dimensions;
                CaptionML=[ENU=Dimensions (X- and Z-Axes);
                           NOR=Dimensjoner (X- og Z-akser);
                           SVE=Dimensioner (X- och Z-axlar)];
                GroupType=Group }

    { 5   ;2   ;Field     ;
                Name=X-Axis Field;
                CaptionML=[ENU=X-Axis Field;
                           NOR=Feltet X-akse;
                           SVE=X-axelfÑlt];
                ToolTipML=[ENU=Specifies the field in the source object that is shown on the x-axis of the generic chart. The text is shown as a tooltip when you hover over the data element on the chart.;
                           NOR=Angir feltet i kildeobjektet som er vist pÜ x-aksen i det generiske diagrammet. Teksten vises som et verktõytips nÜr du holder pekeren over dataelementet i diagrammet.;
                           SVE=Anger fÑltet i kÑllobjektet som visas pÜ x-axeln i det allmÑnna diagrammet. Texten visas som en knappbeskrivning nÑr du hÜller pekaren îver dataelementet i diagrammet.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."X-Axis Field Name";
                OnValidate=BEGIN
                             ValidateDimension(1);
                           END;

                OnLookup=VAR
                           GenericChartMgt@1000 : Codeunit 9180;
                         BEGIN
                           WITH TempGenericChartSetup DO
                             GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,"X-Axis Field ID","X-Axis Field Name","X-Axis Title",0,FALSE);
                           TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.XAxisTitleCode,GenericChartMgt.GetUserLanguage,
                             TempGenericChartSetup."X-Axis Title");
                           ValidateDimension(1);
                         END;
                          }

    { 61  ;2   ;Field     ;
                Name=X-Axis Title;
                CaptionML=[ENU=X-Axis Title;
                           NOR=X-aksetittel;
                           SVE=Rubrik pÜ X-axel];
                ToolTipML=[ENU=Specifies the text that describes the data that is shown on the x-axis. The text is shown as a tooltip when you hover over the data element on the chart. To specify x-axis titles in different languages, choose the AssistEdit button to open the Generic Chart Text Editor window.;
                           NOR=Angir teksten som beskriver dataene som vises pÜ x-aksen. Teksten vises som et verktõytips nÜr du holder pekeren over dataelementet i diagrammet. Hvis du vil angi y-aksetitler pÜ ulike sprÜk, klikker du knappen AssistEdit for Ü Üpne vinduet Generisk diagram - tekstredigeringsprogram.;
                           SVE=Anger texten som beskriver informationen som visas pÜ x-axeln. Texten visas som en knappbeskrivning nÑr du hÜller pekaren îver dataelementet i diagrammet. Om du vill ange rubriker fîr x-axeln pÜ olika sprÜk vÑljer du knappen AssistEdit, sÜ îppnas fînstret Textredigerare fîr allmÑnt diagram.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."X-Axis Title";
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.XAxisTitleCode,GenericChartMgt.GetUserLanguage,
                               TempGenericChartSetup."X-Axis Title");
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               TempGenericChartSetup."X-Axis Title" :=
                                 GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.XAxisTitleCode);
                               UpdateChartDefinition;
                             END;
                              }

    { 42  ;2   ;Field     ;
                Name=Show X-Axis Title;
                CaptionML=[ENU=Show X-Axis Title;
                           NOR=Vis X-aksetittel;
                           SVE=Visa rubrik pÜ X-axel];
                ToolTipML=[ENU=Specifies if the value in the X-Axis Title field is shown on the generic chart.;
                           NOR=Angir om verdien i feltet X-aksetittel vises i det generiske diagrammet.;
                           SVE=Anger om vÑrdet i fÑltet Rubrik pÜ X-axel ska visas i det allmÑnna diagrammet.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."X-Axis Show Title";
                OnValidate=VAR
                             GenericChartMgt@1001 : Codeunit 9180;
                           BEGIN
                             GenericChartMgt.CheckSourceTypeID(TempGenericChartSetup,TRUE);
                             UpdateChartDefinition;
                           END;
                            }

    { 39  ;2   ;Field     ;
                Name=Data Point X Label;
                CaptionML=[ENU=Data Point X Label;
                           NOR=Datapunkt X-etikett;
                           SVE=Etikett fîr X-datapunkt];
                ToolTipML=[ENU=Specifies the text describes the selected x-axis value in a tooltip when you hover over a data point. The data point label is shown in front of the data value.;
                           NOR=Angir teksten som beskriver den valgte x-akseverdien i et verktõytips nÜr du holder pekeren over et datapunkt. Datapunktetiketten vises foran dataverdien.;
                           SVE=Anger den text som beskriver det markerade vÑrdet pÜ x-axeln i en knappbeskrivning nÑr du hÜller pekaren îver en datapunkt. Datapunktens etikett visas framfîr dess vÑrde.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."X-Axis Field Caption";
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.XAxisCaptionCode,GenericChartMgt.GetUserLanguage,
                               TempGenericChartSetup."X-Axis Field Caption");
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               TempGenericChartSetup."X-Axis Field Caption" :=
                                 GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.XAxisCaptionCode);
                               UpdateChartDefinition;
                             END;
                              }

    { 13  ;2   ;Field     ;
                Name=Z-Axis Field;
                CaptionML=[ENU=Z-Axis Field;
                           NOR=Feltet Z-akse;
                           SVE=Z-axelfÑlt];
                ToolTipML=[ENU=Specifies the field in the source object that is shown on the z-axis of the generic chart.;
                           NOR=Angir feltet i kildeobjektet som er vist pÜ z-aksen i det generiske diagrammet.;
                           SVE=Anger fÑltet i kÑllobjektet som visas pÜ z-axeln i det allmÑnna diagrammet.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."Z-Axis Field Name";
                Enabled=ZAxisEnabled;
                Editable=ZAxisEnabled;
                OnValidate=BEGIN
                             ValidateDimension(2);
                           END;

                OnLookup=VAR
                           GenericChartMgt@1000 : Codeunit 9180;
                         BEGIN
                           WITH TempGenericChartSetup DO
                             GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,"Z-Axis Field ID","Z-Axis Field Name","Z-Axis Title",0,FALSE);
                           ValidateDimension(2);
                         END;
                          }

    { 60  ;2   ;Field     ;
                Name=Data Point Z Label;
                CaptionML=[ENU=Data Point Z Label;
                           NOR=Datapunkt Z-etikett;
                           SVE=Etikett fîr Z-datapunkt];
                ToolTipML=[ENU=Specifies the text that describes the z-axis value in a tooltip when you hover over a data point. The data point label is shown in front of the data value.;
                           NOR=Angir teksten som beskriver z-akseverdien i et verktõytips nÜr du holder pekeren over et datapunkt. Datapunktetiketten vises foran dataverdien.;
                           SVE=Anger den text som beskriver z-axelvÑrdet i en knappbeskrivning nÑr du hÜller pekaren îver en datapunkt. Datapunktens etikett visas framfîr dess vÑrde.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."Z-Axis Field Caption";
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.ZAxisCaptionCode,GenericChartMgt.GetUserLanguage,
                               TempGenericChartSetup."Z-Axis Field Caption");
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               TempGenericChartSetup."Z-Axis Field Caption" :=
                                 GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.ZAxisCaptionCode);
                               UpdateChartDefinition;
                             END;
                              }

    { 44  ;1   ;Group     ;
                Name=Chart Description;
                CaptionML=[ENU=Chart Description;
                           NOR=Diagrambeskrivelse;
                           SVE=Diagrambeskrivning];
                GroupType=Group }

    { 36  ;2   ;Field     ;
                Name=Description;
                CaptionML=[ENU=Description;
                           NOR=Beskrivelse;
                           SVE=Beskrivning];
                ToolTipML=[ENU=Specifies a description of the generic chart.;
                           NOR=Angir en beskrivelse av det generiske diagrammet.;
                           SVE=Anger en beskrivning av det allmÑnna diagrammet.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ChartDescription;
                Editable=TitleEnabled;
                MultiLine=Yes;
                OnValidate=BEGIN
                             TempGenericChartMemoBuf.SetMemo(GenericChartMgt.DescriptionCode,GenericChartMgt.GetUserLanguage,ChartDescription);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               ChartDescription := GenericChartMgt.MemoMLAssistEdit(TempGenericChartMemoBuf,GenericChartMgt.DescriptionCode);
                               UpdateChartDefinition;
                             END;
                              }

    { 68  ;1   ;Part      ;
                Name=PreviewPart;
                CaptionML=[ENU=Preview Part;
                           NOR=ForhÜndsvisningsdel;
                           SVE=Fîrhandsgranska del];
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page9184;
                PartType=Page }

  }
  CODE
  {
    VAR
      TempGenericChartSetup@1004 : TEMPORARY Record 9180;
      TempGenericChartFilter@1020 : TEMPORARY Record 9181;
      TempGenericChartYAxis@1001 : TEMPORARY Record 9182;
      TempGenericChartCaptionsBuf@1029 : TEMPORARY Record 9185;
      TempGenericChartMemoBuf@1028 : TEMPORARY Record 9186;
      GenericChartMgt@1016 : Codeunit 9180;
      DataColumn@1013 : ARRAY [6] OF Text[50];
      MeasureCaption@1025 : ARRAY [6] OF Text[250];
      Aggregation@1014 : ARRAY [6] OF 'None,Count,Sum,Min,Max,Avg';
      ChartType@1015 : 'Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,Pie,Doughnut,Range,Radar,Funnel';
      ChartTypeReduced@1003 : ARRAY [6] OF 'Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range';
      ChartDescription@1011 : Text;
      xRecSourceType@1009 : ' ,Table,Query';
      xRecSourceID@1010 : Integer;
      DummyInt@1017 : Integer;
      DummyCaption@1030 : Text[50];
      Text001@1000 : TextConst 'ENU=All fields will be reset. Are you sure that you want to change the %1?;NOR=Alle felt vil bli tilbakestilt. Er du sikker pÜ at du vil endre %1?;SVE=Alla fÑlt kommer att ÜterstÑllas. Vill du Ñndra %1?';
      OptionalMeasuresEnabled@1005 : Boolean INDATASET;
      Text002@1006 : TextConst 'ENU=Field %1 is already assigned to a measure or dimension. Select a different field.;NOR=Feltet %1 er allerede tilordnet til et mÜl eller en dimensjon. Velg et annet felt.;SVE=FÑltet %1 har redan tilldelats ett mÜtt eller en dimension. VÑlj ett annat fÑlt.';
      Text003@1007 : TextConst '@@@=Do you want to replace the existing definition for Chart 36-06?;ENU=Do you want to replace the existing definition for %1 %2?;NOR=Vil du erstatte den eksisterende definisjonen for %1 %2?;SVE=Vill du ersÑtta den befintliga definitionen fîr %1 %2?';
      DataColumn1Enabled@1012 : Boolean INDATASET;
      DataColumn2Enabled@1022 : Boolean INDATASET;
      DataColumn3Enabled@1023 : Boolean INDATASET;
      DataColumn4Enabled@1024 : Boolean INDATASET;
      DataColumn5Enabled@1026 : Boolean INDATASET;
      DataColumn6Enabled@1027 : Boolean INDATASET;
      ZAxisEnabled@1008 : Boolean INDATASET;
      Text004@1018 : TextConst 'ENU=You can only specify one Measure with aggregation type Count.;NOR=Du kan bare angi ett mÜl med samlingstypen Count.;SVE=Du kan bara ange ett mÑtvÑrde med aggregeringstypen Antal.';
      Text005@1019 : TextConst 'ENU=If you select Aggregation Count, the Data Column will be cleared for this measure. Do you want to continue?;NOR=Hvis du velger samlingstypen Count, vil datakolonnen bli nullstilt for dette mÜlet. Vil du fortsette?;SVE=Om du vÑljer aggregeringsantal rensas datakolumnen fîr mÑtvÑrdet. Vill du fortsÑtta?';
      TitleEnabled@1002 : Boolean;

    LOCAL PROCEDURE SetFieldValues@6();
    BEGIN
      ClearAllVariables;
      GenericChartMgt.RetrieveXML(
        Rec,TempGenericChartSetup,TempGenericChartYAxis,TempGenericChartCaptionsBuf,TempGenericChartMemoBuf,TempGenericChartFilter);
      ChartDescription := TempGenericChartMemoBuf.GetMemo(GenericChartMgt.DescriptionCode,GenericChartMgt.GetUserLanguage);
      TempGenericChartSetup."Y-Axis Title" :=
        TempGenericChartCaptionsBuf.GetCaption(GenericChartMgt.YAxisTitleCode,GenericChartMgt.GetUserLanguage);
      TempGenericChartSetup."X-Axis Field Caption" :=
        TempGenericChartCaptionsBuf.GetCaption(GenericChartMgt.XAxisCaptionCode,GenericChartMgt.GetUserLanguage);
      TempGenericChartSetup."X-Axis Title" :=
        TempGenericChartCaptionsBuf.GetCaption(GenericChartMgt.XAxisTitleCode,GenericChartMgt.GetUserLanguage);
      TempGenericChartSetup."Z-Axis Field Caption" :=
        TempGenericChartCaptionsBuf.GetCaption(GenericChartMgt.ZAxisCaptionCode,GenericChartMgt.GetUserLanguage);
      TempGenericChartSetup.INSERT;
      StoreTempXRecValues;
      FillMatrixWhenOpenPage;
      UpdateTempGenericChartYAXis;
      RefreshPreview;
    END;

    LOCAL PROCEDURE ValidateDataColumn@13(Index@1000 : Integer);
    VAR
      FieldAlreadyExists@1002 : Boolean;
      i@1001 : Integer;
    BEGIN
      GenericChartMgt.CheckSourceTypeID(TempGenericChartSetup,TRUE);
      FOR i := 1 TO ARRAYLEN(DataColumn) DO BEGIN
        IF (DataColumn[i] <> '') AND (Index <> i) THEN
          FieldAlreadyExists := (DataColumn[Index] = DataColumn[i]) OR FieldAlreadyExists;
      END;

      IF FieldAlreadyExists THEN
        ERROR(Text002,DataColumn[Index]);

      GenericChartMgt.CheckDataTypeAggregationCompliance(TempGenericChartSetup,DataColumn[Index],Aggregation[Index]);
      GenericChartMgt.ValidateFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[Index],DummyCaption,2,FALSE,Aggregation[Index]);
      UpdateChartDefinition;
      EnableControls;
    END;

    LOCAL PROCEDURE ValidateDimension@14(Index@1000 : Integer);
    VAR
      DummyAggregation@1002 : 'None,Count,Sum,Min,Max,Avg';
    BEGIN
      GenericChartMgt.CheckSourceTypeID(TempGenericChartSetup,TRUE);
      WITH TempGenericChartSetup DO BEGIN
        IF ("X-Axis Field Name" <> '') AND ("Z-Axis Field Name" <> '') AND ("X-Axis Field Name" = "Z-Axis Field Name") THEN
          ERROR(Text002,DataColumn[Index]);
      END;
      WITH TempGenericChartSetup DO
        CASE Index OF
          1:
            GenericChartMgt.ValidateFieldColumn(
              TempGenericChartSetup,"X-Axis Field ID","X-Axis Field Name","X-Axis Title",0,FALSE,DummyAggregation);
          2:
            GenericChartMgt.ValidateFieldColumn(
              TempGenericChartSetup,"Z-Axis Field ID","Z-Axis Field Name","Z-Axis Title",0,FALSE,DummyAggregation);
        END;
      UpdateChartDefinition;
      EnableControls;
    END;

    LOCAL PROCEDURE UpdateTempGenericChartYAXis@2();
    VAR
      i@1000 : Integer;
      Count@1001 : Integer;
    BEGIN
      TempGenericChartYAxis.DELETEALL;

      IF ChartCapableOfOptionalMeasures THEN
        Count := ARRAYLEN(DataColumn)
      ELSE
        Count := 1;

      FOR i := 1 TO Count DO
        IF AddYAxisMeasure(i) THEN BEGIN
          CLEAR(TempGenericChartYAxis);
          TempGenericChartYAxis.ID := ID;
          TempGenericChartYAxis."Line No." := i * 10000;
          TempGenericChartYAxis."Y-Axis Measure Field Name" := DataColumn[i];
          GenericChartMgt.RetrieveFieldColumnIDFromName(
            TempGenericChartSetup."Source Type",TempGenericChartSetup."Source ID",TempGenericChartYAxis."Y-Axis Measure Field ID",
            DataColumn[i]);
          TempGenericChartYAxis."Y-Axis Measure Field Caption" := MeasureCaption[i];
          TempGenericChartYAxis.Aggregation := Aggregation[i];
          IF i = 1 THEN
            TempGenericChartYAxis."Chart Type" := ChartType
          ELSE
            TempGenericChartYAxis."Chart Type" := ChartTypeReduced[i];
          TempGenericChartYAxis.INSERT;
        END;
    END;

    LOCAL PROCEDURE FillMatrixWhenOpenPage@1();
    VAR
      i@1001 : Integer;
      CurrentCaptionCode@1002 : Code[10];
    BEGIN
      CLEAR(DataColumn);
      CLEAR(MeasureCaption);
      CLEAR(Aggregation);
      CLEAR(ChartType);

      i := 0;
      IF TempGenericChartYAxis.FINDSET THEN BEGIN
        CurrentCaptionCode := GenericChartMgt.RequiredMeasureCode;
        REPEAT
          i += 1;
          DataColumn[i] := TempGenericChartYAxis."Y-Axis Measure Field Name";
          MeasureCaption[i] := TempGenericChartCaptionsBuf.GetCaption(CurrentCaptionCode,GenericChartMgt.GetUserLanguage);
          Aggregation[i] := TempGenericChartYAxis.Aggregation;
          IF i = 1 THEN
            ChartType := TempGenericChartYAxis."Chart Type"
          ELSE
            ChartTypeReduced[i] := TempGenericChartYAxis."Chart Type";

          IF CurrentCaptionCode = GenericChartMgt.RequiredMeasureCode THEN
            CurrentCaptionCode := GenericChartMgt.OptionalMeasure1Code
          ELSE
            CurrentCaptionCode := INCSTR(CurrentCaptionCode)
        UNTIL TempGenericChartYAxis.NEXT = 0;
      END
    END;

    LOCAL PROCEDURE UpdateChartDefinition@5();
    BEGIN
      IF ChartDefinitionCreationIsPossible THEN BEGIN
        UpdateTempGenericChartYAXis;
        GenericChartMgt.SaveChanges(Rec,TempGenericChartSetup,TempGenericChartYAxis,TempGenericChartFilter,
          TempGenericChartCaptionsBuf,TempGenericChartMemoBuf);
      END;
      EnableControls;
      RefreshPreview;
    END;

    LOCAL PROCEDURE ChartDefinitionCreationIsPossible@4() : Boolean;
    BEGIN
      WITH TempGenericChartSetup DO
        EXIT(("Source Type" <> "Source Type"::" ") AND ("Source ID" <> 0));
    END;

    LOCAL PROCEDURE RefreshPreview@8();
    VAR
      chartBuilder@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartBuilder";
    BEGIN
      IF ChartDefinitionCreationIsPossible THEN BEGIN
        chartBuilder := chartBuilder.Empty;
        GenericChartMgt.FillChartHelper(chartBuilder,TempGenericChartSetup,TempGenericChartYAxis,TempGenericChartFilter,
          TempGenericChartCaptionsBuf,TempGenericChartMemoBuf);

        CurrPage.PreviewPart.PAGE.SetChartDefinition(chartBuilder);
      END;
    END;

    LOCAL PROCEDURE ShowChartFiltersPage@11();
    VAR
      TempGenericChartFilter2@1001 : TEMPORARY Record 9181;
      GenericChartFiltersPage@1000 : Page 9181;
      FilterText@1002 : Text[250];
    BEGIN
      GenericChartMgt.CheckSourceTypeID(TempGenericChartSetup,TRUE);
      GenericChartFiltersPage.SetTempGenericChart(TempGenericChartSetup);
      GenericChartFiltersPage.SetFilters(TempGenericChartFilter);
      GenericChartFiltersPage.SETTABLEVIEW(TempGenericChartFilter);
      COMMIT;
      GenericChartFiltersPage.RUNMODAL;
      TempGenericChartFilter.DELETEALL;
      CLEAR(FilterText);
      GenericChartFiltersPage.GetFilters(TempGenericChartFilter2);
      IF TempGenericChartFilter2.FINDSET THEN
        REPEAT
          TempGenericChartFilter := TempGenericChartFilter2;
          TempGenericChartFilter.INSERT;
          IF TempGenericChartFilter."Filter Value" <> '' THEN
            GenericChartMgt.BuildFilterText(FilterText,
              COPYSTR(
                TempGenericChartFilter."Filter Field Name" + ' : ' + TempGenericChartFilter."Filter Value",1,MAXSTRLEN(FilterText)));
        UNTIL TempGenericChartFilter2.NEXT = 0;
      GenericChartMgt.FinalizeFilterText(FilterText);
      TempGenericChartSetup."Filter Text" := FilterText;
      IF TempGenericChartSetup.MODIFY THEN;
      UpdateChartDefinition;
    END;

    LOCAL PROCEDURE ResetFields@7(CalledFrom@1000 : 'Source Type,Source ID');
    VAR
      ID@1001 : Code[20];
      SourceType@1002 : Option;
      SourceID@1003 : Integer;
    BEGIN
      ID := TempGenericChartSetup.ID;
      WITH TempGenericChartSetup DO BEGIN
        SourceType := "Source Type";
        SourceID := "Source ID";
        CASE CalledFrom OF
          CalledFrom::"Source Type":
            BEGIN
              IF "Source Type" = xRecSourceType THEN
                EXIT;
              IF xRecSourceType <> xRecSourceType::" " THEN
                IF NOT CONFIRM(Text001,TRUE,FIELDCAPTION("Source Type")) THEN
                  ERROR('');
            END;
          CalledFrom::"Source ID":
            BEGIN
              IF "Source ID" = xRecSourceID THEN
                EXIT;
              IF xRecSourceID <> 0 THEN
                IF NOT CONFIRM(Text001,TRUE,FIELDCAPTION("Source ID")) THEN
                  ERROR('');
            END;
        END;
      END;
      ClearAllVariables;
      TempGenericChartSetup.ID := ID;
      WITH TempGenericChartSetup DO BEGIN
        "Source Type" := SourceType;
        IF CalledFrom = CalledFrom::"Source ID" THEN
          "Source ID" := SourceID;
      END;
    END;

    LOCAL PROCEDURE ClearAllVariables@9();
    BEGIN
      TempGenericChartSetup.DELETEALL;
      TempGenericChartFilter.DELETEALL;
      TempGenericChartYAxis.DELETEALL;
      TempGenericChartCaptionsBuf.DELETEALL;
      TempGenericChartMemoBuf.DELETEALL;

      CLEAR(TempGenericChartFilter);
      CLEAR(TempGenericChartYAxis);
      CLEAR(TempGenericChartSetup);
      CLEAR(TempGenericChartCaptionsBuf);
      CLEAR(TempGenericChartMemoBuf);
      CLEAR(GenericChartMgt);
      CLEAR(DataColumn);
      CLEAR(MeasureCaption);
      CLEAR(Aggregation);
      CLEAR(ChartType);
      CLEAR(ChartTypeReduced);
      CLEAR(DummyInt);
      CLEAR(DummyCaption);
    END;

    LOCAL PROCEDURE ChartCapableOfOptionalMeasures@12() : Boolean;
    BEGIN
      EXIT(NOT (ChartType IN [ChartType::Pie,ChartType::Doughnut,ChartType::Funnel,ChartType::Radar]));
    END;

    LOCAL PROCEDURE StoreTempXRecValues@15();
    BEGIN
      xRecSourceType := TempGenericChartSetup."Source Type";
      xRecSourceID := TempGenericChartSetup."Source ID";
    END;

    LOCAL PROCEDURE ImportChartDefinition@3();
    VAR
      TempBLOB@1000 : Record 99008535;
      FileMgt@1001 : Codeunit 419;
    BEGIN
      IF FileMgt.BLOBImport(TempBLOB,'*.xml') = '' THEN
        EXIT;

      IF BLOB.HASVALUE THEN
        IF NOT CONFIRM(Text003,FALSE,TABLECAPTION,ID) THEN
          EXIT;

      BLOB := TempBLOB.Blob;
      CurrPage.SAVERECORD;
    END;

    LOCAL PROCEDURE ExportChartDefinition@10();
    VAR
      TempBlob@1000 : Record 99008535;
      FileMgt@1001 : Codeunit 419;
    BEGIN
      CALCFIELDS(BLOB);
      IF BLOB.HASVALUE THEN BEGIN
        TempBlob.Blob := BLOB;
        FileMgt.BLOBExport(TempBlob,'*.xml',TRUE);
      END;
    END;

    LOCAL PROCEDURE EnableControls@17();
    BEGIN
      OptionalMeasuresEnabled := ChartCapableOfOptionalMeasures AND (TempGenericChartSetup."Z-Axis Field Name" = '');
      ZAxisEnabled :=
        ChartCapableOfOptionalMeasures AND
        (DataColumn[2] = '') AND (DataColumn[3] = '') AND (DataColumn[4] = '') AND (DataColumn[5] = '') AND (DataColumn[6] = '');
      TitleEnabled := ChartDefinitionCreationIsPossible;
      DataColumn1Enabled := Aggregation[1] <> Aggregation[1]::Count;
      DataColumn2Enabled := Aggregation[2] <> Aggregation[2]::Count;
      DataColumn3Enabled := Aggregation[3] <> Aggregation[3]::Count;
      DataColumn4Enabled := Aggregation[4] <> Aggregation[4]::Count;
      DataColumn5Enabled := Aggregation[5] <> Aggregation[5]::Count;
      DataColumn6Enabled := Aggregation[6] <> Aggregation[6]::Count;
    END;

    LOCAL PROCEDURE AddYAxisMeasure@19(index@1000 : Integer) : Boolean;
    BEGIN
      IF Aggregation[index] = Aggregation[index]::Count THEN
        EXIT(TRUE);
      EXIT(DataColumn[index] <> '');
    END;

    LOCAL PROCEDURE CheckAggregation@30(index@1000 : Integer);
    VAR
      FieldOfTypeCountAlreadyExists@1002 : Boolean;
      i@1001 : Integer;
      CountColumnName@1003 : Text[50];
      ReplaceDataColumn@1004 : Boolean;
    BEGIN
      FOR i := 1 TO ARRAYLEN(Aggregation) DO BEGIN
        IF (Aggregation[i] = Aggregation[i]::Count) AND (index <> i) THEN
          FieldOfTypeCountAlreadyExists := (Aggregation[index] = Aggregation[i]) OR FieldOfTypeCountAlreadyExists;
      END;

      IF FieldOfTypeCountAlreadyExists THEN
        ERROR(Text004);

      GenericChartMgt.CheckDataTypeAggregationCompliance(TempGenericChartSetup,DataColumn[index],Aggregation[index]);
      IF Aggregation[index] = Aggregation[index]::Count THEN BEGIN
        CountColumnName := GenericChartMgt.GetQueryCountColumnName(TempGenericChartSetup);
        IF DataColumn[index] <> CountColumnName THEN BEGIN
          ReplaceDataColumn := TRUE;
          IF DataColumn[index] <> '' THEN
            ReplaceDataColumn := CONFIRM(Text005,FALSE);
          IF ReplaceDataColumn THEN
            DataColumn[index] := CountColumnName
          ELSE
            ERROR('');
        END;
      END;
    END;

    BEGIN
    END.
  }
}

