OBJECT Codeunit 11012859 BORG Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'DEU=Benutzer %1 ist kein BORG-Benutzer;ENU=User %1 is not a BORG User;NLD=Gebruiker %1 is geen BORG gebruiker;NOR=Bruker %1 er ikke en BORG-bruker';
      FPSLicenseManagement@1100527400 : Codeunit 11229289;

    PROCEDURE IsBorgUser@1100528602() : Boolean;
    VAR
      BORGEmployee@1100528601 : Record 11012212;
    BEGIN
      IF NOT HasBorgLicense THEN
        EXIT;
      IF BORGEmployee.GET(GetEmployeeNo) THEN
        EXIT(TRUE);
    END;

    PROCEDURE TestBORGUser@1100528600();
    BEGIN
      IF NOT IsBorgUser THEN
        ERROR(Text000, USERID);
    END;

    PROCEDURE TestBORGPassword@1100528604();
    VAR
      BORGEmployee@1100528601 : Record 11012212;
    BEGIN
      IF NOT BORGEmployee.GET(GetEmployeeNo) THEN
        EXIT;
      BORGEmployee.TESTFIELD(Password);
    END;

    PROCEDURE TestBORGPasswordTimeOut@1100528606();
    VAR
      ServiceSetup@1100528600 : Record 11012800;
    BEGIN
      ServiceSetup.GET;
      ServiceSetup.TESTFIELD("BORG Password Time Out");
    END;

    PROCEDURE GetEmployeeNo@1100528605() : Code[20];
    VAR
      UserSetup@1100528600 : Record 91;
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN
        EXIT;
      EXIT(UserSetup."Employee No.");
    END;

    PROCEDURE EncodeValue@1100528601(IValue@1100528600 : Text) OValue : Text;
    VAR
      i@1100528601 : Integer;
      c@1100528602 : Char;
      ci@1100528603 : Integer;
    BEGIN
      // Next loop needs to be replaced with a .NET version of encoding
      FOR i := 1 TO STRLEN(IValue) DO BEGIN
        ci := IValue[i] +i+9;
        WHILE ci > 255 DO
          ci -= 256;
        c := ci;
        OValue := OValue + FORMAT(c);
      END;
    END;

    PROCEDURE DecodeValue@1100528603(IValue@1100528600 : Text;IAskPasswordIfNecessary@1100528604 : Boolean;VAR ODecoded@1100528603 : Boolean) OValue : Text;
    VAR
      BORGUserManagement@1100528605 : Codeunit 11012861;
    BEGIN
      IF BORGUserManagement.IsBorgEmplTimedOut AND IAskPasswordIfNecessary THEN
        BORGUserManagement.AskBORGPassword;
      IF BORGUserManagement.IsBorgEmplTimedOut THEN BEGIN
        ODecoded := FALSE;
        EXIT('*****');
      END;

      OValue := DecodeValue2(IValue);
      ODecoded := TRUE;
      BORGUserManagement.UpdateBorgEmplTimeOut;
    END;

    PROCEDURE DecodeValue2@1100528001(IValue@1100528600 : Text) OValue : Text;
    VAR
      i@1100528601 : Integer;
      c@1100528602 : Char;
      ci@1100528603 : Integer;
    BEGIN
      // Next loop needs to be replaced with a .NET version of decoding
      FOR i := 1 TO STRLEN(IValue) DO BEGIN
        ci := IValue[i] -i-9;
        WHILE ci < 0 DO
          ci += 256;
        c := ci;
        OValue := OValue + FORMAT(c);
      END;
    END;

    PROCEDURE IsBORGPasswordOK@1100528607(IPassword@1100528600 : Text[80]) : Boolean;
    VAR
      BORGEmployee@1100528602 : Record 11012212;
    BEGIN
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(BORGEmployee) THEN
        EXIT;
      IF NOT BORGEmployee.GET(GetEmployeeNo) THEN
        EXIT;
      EXIT(EncryptPassword(IPassword) = BORGEmployee.Password);
    END;

    PROCEDURE EncryptPassword@1100528608(IPassword@1100528600 : Text[50]) : Text[80];
    VAR
      EncryptionMgt@1100528601 : Codeunit 11012367;
    BEGIN
      EXIT(EncryptionMgt.CalculateStringMD5(IPassword));
    END;

    PROCEDURE HasBorgLicense@1100528000() : Boolean;
    VAR
      BORGEmployee@1100528000 : Record 11012212;
    BEGIN
      EXIT(FPSLicenseManagement.LicenseAndReadPermissionForTable(BORGEmployee));
    END;

    BEGIN
    END.
  }
}

