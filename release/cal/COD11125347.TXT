OBJECT Codeunit 11125347 4PS Data Upgrade
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    Permissions=TableData 454=rimd,
                TableData 455=rimd,
                TableData 456=rimd,
                TableData 457=rimd;
    Subtype=Upgrade;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyDataUpgradeLog@1100525001 : Record 11229360;
      DatabaseDataUpgradeLog@1100525003 : Record 11229359;
      InstallationManagement@1100529204 : Codeunit 11012268;
      NewCompany@1100529203 : Boolean;
      NewDatabase@1100529201 : Boolean;
      TypeOfLog@1100525000 : 'Execute,No License Permission,New Company';
      StartDateTime@1100525002 : DateTime;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;

    [UpgradePerCompany]
    PROCEDURE UpgradeDataPerCompanyTables@1100529233();
    BEGIN
      GLOBALLANGUAGE(InstallationManagement.GetDataUpgradeLanguage(FALSE));

      ExecuteDataPerCompanyUpgrade;

      //fixme kz UpdateDspPerCompany;
      UpdateStandardMailTemplates;
    END;

    [UpgradePerDatabase]
    PROCEDURE UpgradeDataPerDatabaseTables@1100529220();
    VAR
      PermissionManager@1100529200 : Codeunit 9002;
    BEGIN
      GLOBALLANGUAGE(InstallationManagement.GetDataUpgradeLanguage(TRUE));

      ExecuteDataPerDatabaseUpgrade;

      IF NOT PermissionManager.SoftwareAsAService THEN
        InsertClientAddIns;
      InsertExtendedTableProperties;
      InsertPossibleDocLinks;
      InsertConvCentralMgtFields;
      IF NOT PermissionManager.SoftwareAsAService THEN
        InitAndCheckPossibleWebServices;
      InsertFsaAppFeatures;
      InsertAppFeatures;
      InsertGenChecklistPossibleLinks;
      DeleteApplicationAreaSetup;
      DeleteExperienceTierSetup;
    END;

    PROCEDURE ExecuteDataPerCompanyUpgrade@1100529202();
    VAR
      JobsSetup@1100529201 : Record 315;
      PermissionManager@1100529200 : Codeunit 9002;
    BEGIN
      IF NOT JobsSetup.GET THEN
        EXIT;

      NewCompany := (JobsSetup."Conversion Status" = 0);

      InsertCtrlSetup;

      // Starting point ADU = hotfix 016-02 (migration minimal)

      UpdateServicePrognosisLineLevelProgressMeasurement(4285);
      UpdateServicePreclosureResultLineLevelProgressMeasurement(4286);
      UpdateBaseServiceOrderNoInServiceOrderBudgetLine(4287);
      UpdateBaseServiceOrderNoInSUPRecordingLine(4288);
      UpdateOldPreclosureResultPresentServiceSetup(4289);
      UpdateJobLedgerEntryPostingGroup(4291);
      UpdateServiceLedgerEntryPostingGroup(4292);
      UpdatePurchOrderNosFSA(4294);
      UpdateOldPreclosureResultPresentProjectSetup(4298, JobsSetup);
      UpdateLastDateModifiedItemVendor(4299);
      UpdateLastDateModifiedItemRelation(4300);
      UpdateJobImagePicture(4301);
      UpdateVendorSubcontractor(4302);
      UpdatePriceBookSettlementMethod(4303);
      UpdateCustomerAndVendorWebserviceURL(4312);
      UpdatePurchasePayablesSetupSuperApprover(4304);
      UpdateJobsSetupSuperApprover(4305);
      UpdateApproverSuperApprover(4306);
      UpdateVendorEMailForPurchReceipt(4307);
      UpdateOrderAddressEMailForPurchReceipt(4308);
      // 4309 reserved kdovgalyova
      // 4310 reserved kdovgalyova
      UpdateGLNforVendor(4311);
      // 4312 reserved gotten
      UpdateReferencePointTypes(4313);
      // 4314 reserved nvdmeulen
      UpdateHourPortalTemplates(4315);

      // New BC upgrades starts with 4400
      UpdateDampingRatioProject(4400, JobsSetup);
      UpdateResReqReceivCompanyHourAccountingLine(4401);
      UpdateResReqReceivCompanySiteMngmntHoursLine(4402);
      UpdateResReqReceivCompanyPlantHoursRevenuesLine(4403);
      UpdateResReqReceivCompanyApprovalEntry(4404);
      UpdateSCControlByPeriodResultClosedRevenue(4405);
      UpdateRemainingBudgetPrognosisLine(4406);
      UpdatePurchaseRequisitionLine(4407);
      UpdateSProcessFAssignmCondition(4408);
      UpdateSCControlByPeriodSODescription(4409);
      UpdateHourConsentRuleFilterLangCode(4410);
      UpdatePlantMaintenanceSchemeTables(4411);
      UpdatePlantInspectionInspectorName(4412);
      InitAndUpdateMailTemplate(4413); // ERROR
      UpdateGlobalDim1CodeServicePrognosisLine(4414);
      UpdateGlobalDim1CodeServicePreclosureResultLine(4415);
      //UpdateGuidsForInspectionLines(4416);
      UpdateGuidsForInspectionLines(4417);
      MoveDocumentManagementFileshareSettings(4418);
      UpdateOptionSalesPriceExclVATBuyer(4419);
      UpdateOptionQuoteLineSalesPriceExclVATBuyer(4420);
      UpdateServiceUnitPriceMainPriceBookCode(4421);
      UpdateSignhostSigners(4422);
      UpdateEmployerDescriptionForSiteMngmntHoursEmployee(4423);
      UpdateServiceContractArrangementComment(4424);
      UpdateServiceOrderControlBudgetServiceLocation(4425);
      UpdateServiceOrderCtrlCostRevServiceLocation(4426);
      UpdatePlantNeedFromDepot(4427);
      UpdatePlantInventoryExpectedReturnDepot(4428);
      InsertDocumentViewerSetupIfNotExists(4429);
      UpdateShelfNoForSalesLine(4430);
      UpdateOptionMainGroup(4431);
      UpdateOptionGroup(4432);
      UpdateOptionSubGroup(4433);
      UpdateSCControlByPeriodResultComplCostsAndRev(4434);
      UpdateDeliveryCompaniesInSCABCompany(4435);
      InitAppSetup(4436);
      UpdateSiteManagerSetupLastWeekDay(4437); // controleer bij mergen of dit goed gaat komen!! Kies een vrij nummer.
      InsertFileStorageTypeSetup(4438);
      UpdateDocumentTemplates(4439);
      //IF NOT PermissionManager.SoftwareAsAService THEN
      //  UpdateDocumentProperties(4440);
      //4441 reserved gotten
      UpdateIssuedReminders(4442);
      UpdateGenJnlLineServiceCategory(4443);
      UpdateResultClosedRevenuePercentageSCControlByPeriod(4444);
      MigrateFSAUsersToGAP(4445);
      UpdateItemBlocked(4446);  //C059137

      JobsSetup."Conversion Status" := GetLastCompanyConversionStatus;
      JobsSetup.MODIFY;
    END;

    PROCEDURE ExecuteDataPerDatabaseUpgrade@1100529217();
    VAR
      DatabaseSetup@1100529202 : Record 11229358;
    BEGIN
      IF NOT DatabaseSetup.GET THEN BEGIN
        DatabaseSetup.INIT;
        DatabaseSetup."Language Code Data Upgrade" := InstallationManagement.GetDataUpgradeLanguage(TRUE);
        DatabaseSetup.INSERT;
      END;

      IF DatabaseSetup."Conversion Status" = 0 THEN
        NewDatabase := TRUE;

      // New BC upgrades starts with 4400

      DatabaseSetup."Conversion Status" := GetLastDatabaseConversionStatus;
      DatabaseSetup.MODIFY;
      COMMIT;
    END;

    LOCAL PROCEDURE "--- Upgrade Data Per Company Functions ---"@1100529403();
    BEGIN
    END;

    LOCAL PROCEDURE UpdateServicePrognosisLineLevelProgressMeasurement@1100529850(ConversionStatus@1100529200 : Integer);
    VAR
      ServiceContract@1100529850 : Record 11012812;
      ServicePrognosisLine@1100529851 : Record 11072310;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"Service Prognosis Line", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN
        IF ServiceContract.FINDSET THEN
          REPEAT
            IF ServiceContract."Level Progress Measurement" <> ServiceContract."Level Progress Measurement"::Period THEN BEGIN
              ServicePrognosisLine.SETRANGE("Service Contract No.", ServiceContract."No.");
              IF NOT ServicePrognosisLine.ISEMPTY THEN
                ServicePrognosisLine.MODIFYALL("Level Progress Measurement", ServiceContract."Level Progress Measurement");
            END;
          UNTIL ServiceContract.NEXT = 0;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateServicePreclosureResultLineLevelProgressMeasurement@1100529854(ConversionStatus@1100529200 : Integer);
    VAR
      ServiceContract@1100529850 : Record 11012812;
      ServicePreclosureResultLine@1100529851 : Record 11072313;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"Service Preclosure Result Line", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        ServicePreclosureResultLine.SETRANGE(Posted, FALSE);
        IF ServiceContract.FINDSET THEN
          REPEAT
            IF ServiceContract."Level Progress Measurement" <> ServiceContract."Level Progress Measurement"::Period THEN BEGIN
              ServicePreclosureResultLine.SETRANGE("Service Contract No.", ServiceContract."No.");
              IF NOT ServicePreclosureResultLine.ISEMPTY THEN
                ServicePreclosureResultLine.MODIFYALL("Level Progress Measurement", ServiceContract."Level Progress Measurement");
            END;
          UNTIL ServiceContract.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateBaseServiceOrderNoInServiceOrderBudgetLine@1100529601(ConversionStatus@1100529200 : Integer);
    VAR
      ServiceOrder@1100529850 : Record 11012823;
      ServiceOrderBudgetLine@1100529851 : Record 11012875;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"Service Order Budget Line", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        ServiceOrder.SETFILTER(Status, '<>%1', ServiceOrder.Status::Cancelled);
        IF ServiceOrder.FINDSET THEN
          REPEAT
            ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrder."No.");
            IF ServiceOrderBudgetLine.FINDSET THEN
              ServiceOrderBudgetLine.MODIFYALL("Base Service Order No.", ServiceOrder."Base Service Order No.");
          UNTIL ServiceOrder.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateBaseServiceOrderNoInSUPRecordingLine@1100529604(ConversionStatus@1100529200 : Integer);
    VAR
      ServiceOrder@1100529850 : Record 11012823;
      SUPRecordingLine@1100529851 : Record 11071772;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"SUP Recording Line", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        ServiceOrder.SETFILTER(Status, '<>%1', ServiceOrder.Status::Cancelled);
        IF ServiceOrder.FINDSET THEN
          REPEAT
            SUPRecordingLine.SETRANGE("Service Order No.", ServiceOrder."No.");
            IF SUPRecordingLine.FINDSET THEN
              SUPRecordingLine.MODIFYALL("Base Service Order No.", ServiceOrder."Base Service Order No.");
          UNTIL ServiceOrder.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateOldPreclosureResultPresentServiceSetup@1100529607(ConversionStatus@1100529200 : Integer);
    VAR
      ServiceSetup@1100529850 : Record 11012800;
      ServicePreclosureResultLine@1100529851 : Record 11072313;
      ServicePreclosureResultLine2@1100529600 : Record 11072313;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"Service Setup", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF ServiceSetup.GET THEN
          IF ServiceSetup."Service Control Method" = ServiceSetup."Service Control Method"::"Real-Time" THEN BEGIN
            ServicePreclosureResultLine.SETRANGE(Posted, TRUE);
            ServicePreclosureResultLine.SETRANGE("Service Contract WIP Processed", FALSE);
            IF NOT ServicePreclosureResultLine.ISEMPTY THEN BEGIN
              ServiceSetup."Old Preclosure Result Present" := TRUE;
              ServiceSetup.MODIFY;
            END;

            ServicePreclosureResultLine.SETRANGE("Service Contract WIP Processed", TRUE);
            ServicePreclosureResultLine.SETRANGE("Line Type", ServicePreclosureResultLine."Line Type"::Period);
            IF ServicePreclosureResultLine.FINDSET THEN BEGIN
              ServicePreclosureResultLine2.SETFILTER("Line Type", '>%1', ServicePreclosureResultLine2."Line Type"::Period);
              REPEAT
                ServicePreclosureResultLine2.SETRANGE("Posting Date", ServicePreclosureResultLine."Posting Date");
                ServicePreclosureResultLine2.SETRANGE("Seq. No.", ServicePreclosureResultLine."Seq. No.");
                ServicePreclosureResultLine2.SETRANGE("Service Contract No.", ServicePreclosureResultLine."Service Contract No.");
                ServicePreclosureResultLine2.SETRANGE("Control Period Code", ServicePreclosureResultLine."Control Period Code");
                ServicePreclosureResultLine2.MODIFYALL("Correction Posted", TRUE);
              UNTIL ServicePreclosureResultLine.NEXT = 0;
              ServicePreclosureResultLine.MODIFYALL("Correction Posted", TRUE);
            END;
          END;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateJobLedgerEntryPostingGroup@1100528209(ConversionStatus@1100529200 : Integer);
    VAR
      JobLedgerEntry@1100528200 : Record 11072005;
      Vendor@1100528201 : Record 23;
      Customer@1100528202 : Record 18;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Job Ledger Entry", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        WITH JobLedgerEntry DO BEGIN
          IF FINDSET(TRUE,FALSE) THEN
            REPEAT
              IF ("Vendor No."<>'') AND ("Vendor Posting Group" = '') AND ("Supplying Company" = '')THEN BEGIN
                IF Vendor.GET("Vendor No.") THEN BEGIN
                  "Vendor Posting Group" := Vendor."Vendor Posting Group";
                  IF "Vendor Posting Group" <> '' THEN
                    MODIFY;
                END;
              END;
              IF (Principal<>'') AND ("Customer Posting Group" = '') THEN BEGIN
                IF Customer.GET(Principal) THEN BEGIN
                  "Customer Posting Group" := Customer."Customer Posting Group";
                  IF "Customer Posting Group" <> '' THEN
                    MODIFY;
                END;
              END;
            UNTIL NEXT = 0;
        END;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateServiceLedgerEntryPostingGroup@1100528211(ConversionStatus@1100529200 : Integer);
    VAR
      ServiceLedgerEntry@1100528200 : Record 11012819;
      Vendor@1100528201 : Record 23;
      Customer@1100528202 : Record 18;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Service-Ledger Entry", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        WITH ServiceLedgerEntry DO BEGIN
          IF FINDSET(TRUE,FALSE) THEN
            REPEAT
              IF ("Vendor No."<>'') AND ("Vendor Posting Group" = '') AND ("Supplying Company" = '')THEN BEGIN
                IF Vendor.GET("Vendor No.") THEN BEGIN
                  "Vendor Posting Group" := Vendor."Vendor Posting Group";
                  IF "Vendor Posting Group" <> '' THEN
                    MODIFY;
                END;
              END;
              IF ("Customer No."<>'') AND ("Customer Posting Group" = '') THEN BEGIN
                IF Customer.GET("Customer No.") THEN BEGIN
                  "Customer Posting Group" := Customer."Customer Posting Group";
                  IF "Customer Posting Group" <> '' THEN
                    MODIFY;
                END;
              END;
            UNTIL NEXT = 0;
        END;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdatePurchasePayablesSetupSuperApprover@1100527362(ConversionStatus@1100529200 : Integer);
    VAR
      PurchasesPayablesSetup@1100528200 : Record 312;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Purchases & Payables Setup", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF PurchasesPayablesSetup.GET THEN BEGIN
          PurchasesPayablesSetup."Sup. Approver Den. Inv. Lines" := PurchasesPayablesSetup."Sup. Approver Den. Order Lines";
          PurchasesPayablesSetup.MODIFY;
        END;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateJobsSetupSuperApprover@1100527361(ConversionStatus@1100529200 : Integer);
    VAR
      PurchasesPayablesSetup@1100527350 : Record 312;
      HumanResourcesSetup@1100525000 : Record 5218;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Human Resources Setup", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF PurchasesPayablesSetup.GET AND HumanResourcesSetup.GET THEN BEGIN
          HumanResourcesSetup."Sup. Approver Den. Hour Lines" := PurchasesPayablesSetup."Sup. Approver Den. Order Lines";
          HumanResourcesSetup.MODIFY;
        END;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateApproverSuperApprover@1100527360(ConversionStatus@1100529200 : Integer);
    VAR
      Approver@1100527350 : Record 11012229;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::Approver, TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF Approver.FINDSET THEN
          REPEAT
            Approver."Sup. Approver Purch. Invoices" := Approver."Super Approver Purchase Orders";
            Approver."Super Approver Hours" := Approver."Super Approver Purchase Orders";
            Approver.MODIFY;
          UNTIL Approver.NEXT = 0;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdatePurchOrderNosFSA@1100528003(ConversionStatus@1100529200 : Integer);
    VAR
      PurchasesPayablesSetup@1100528000 : Record 312;
      FieldServiceAppSetup@1100528001 : Record 11126700;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Field Service App Setup", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF PurchasesPayablesSetup.GET THEN BEGIN
          IF FieldServiceAppSetup.GET THEN BEGIN
            FieldServiceAppSetup."Purchase Order Nos." := PurchasesPayablesSetup."Order Nos.";
            FieldServiceAppSetup.MODIFY;
          END;
        END;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateVendorSubcontractor@1100527450(ConversionStatus@1100527450 : Integer);
    VAR
      Vendor@1100527451 : Record 23;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::Vendor, TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF Vendor.FINDSET THEN
          REPEAT
            Vendor.Subcontractor := Vendor."Subcontractor Type" <> 0;
            Vendor.MODIFY;
          UNTIL Vendor.NEXT = 0;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdatePriceBookSettlementMethod@1100528614(ConversionStatus@1100529200 : Integer);
    VAR
      ServicePriceBook@1100528600 : Record 11071768;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Service Price Book", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF ServicePriceBook.FINDSET THEN
          REPEAT
            ServicePriceBook."Settlement Method" += 1;
            ServicePriceBook.MODIFY;
          UNTIL ServicePriceBook.NEXT = 0;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateLastDateModifiedItemVendor@1100526004(ConversionStatus@1100529200 : Integer);
    VAR
      ItemVendor@1100527001 : Record 99;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"Item Vendor", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF ItemVendor.FINDSET(TRUE, FALSE) THEN
          REPEAT
            IF ItemVendor."Last Date Modified" = 0D THEN BEGIN
              ItemVendor."Last Date Modified" := TODAY;
              ItemVendor.MODIFY;
            END;
          UNTIL ItemVendor.NEXT = 0;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateLastDateModifiedItemRelation@1100526003(ConversionStatus@1100529200 : Integer);
    VAR
      ItemRelation@1100527001 : Record 11012319;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"Item Relation", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF ItemRelation.FINDSET(TRUE, FALSE) THEN
          REPEAT
            IF ItemRelation."Last Date Modified" = 0D THEN BEGIN
              ItemRelation."Last Date Modified" := TODAY;
              ItemRelation.MODIFY;
            END;
          UNTIL ItemRelation.NEXT = 0;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateJobImagePicture@1100527400(ConversionStatus@1100529200 : Integer);
    VAR
      Job@1100528600 : Record 11072003;
      Stream@1100527400 : InStream;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::Job,TypeOfLog,StartDateTime,NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF Job.FINDSET(TRUE) THEN
        REPEAT
          Job.CALCFIELDS(Picture);
          IF Job.Picture.HASVALUE THEN BEGIN
            Job.Picture.CREATEINSTREAM(Stream);
            Job.Image.IMPORTSTREAM(Stream, '');
            CLEAR(Job.Picture);
            Job.MODIFY;
          END;
        UNTIL Job.NEXT = 0;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus,StartDateTime,TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateOldPreclosureResultPresentProjectSetup@1100529606(ConversionStatus@1100529200 : Integer;VAR VarProjectSetup@1100528501 : Record 315);
    VAR
      Project@1100529851 : Record 11072003;
      ProjectPreclosureResult@1100529600 : Record 11012093;
      ProjectType@1100528500 : Record 11012009;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"Jobs Setup", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        ProjectPreclosureResult.RESET;

        Project.SETFILTER("Project Status", '>=%1', Project."Project Status"::Finished);
        IF Project.FINDSET THEN
          REPEAT
            ProjectPreclosureResult.SETRANGE("Project No.", Project."No.");
            ProjectPreclosureResult.SETRANGE(Posted, TRUE);
            ProjectPreclosureResult.MODIFYALL("Correction Posted", TRUE);
            ProjectPreclosureResult.SETRANGE(Posted, FALSE);
            ProjectPreclosureResult.DELETEALL;
          UNTIL Project.NEXT = 0;

        Project.SETFILTER("Project Status", '<%1', Project."Project Status"::Finished);
        IF Project.FINDSET THEN
          REPEAT
            ProjectPreclosureResult.SETRANGE("Project No.", Project."No.");
            ProjectPreclosureResult.SETRANGE(Posted, FALSE);
            IF Project."Preclosure Result" = Project."Preclosure Result"::No THEN
              ProjectPreclosureResult.DELETEALL
            ELSE BEGIN
              ProjectPreclosureResult.SETRANGE("Result Type", ProjectPreclosureResult."Result Type"::"Provision Loss");
              ProjectPreclosureResult.DELETEALL;
              ProjectPreclosureResult.SETRANGE("Result Type");
              IF NOT ProjectPreclosureResult.ISEMPTY THEN BEGIN
                ProjectPreclosureResult.FINDSET;
                REPEAT
                  ProjectPreclosureResult."Actual Preclosure Result" := 0;
                  ProjectPreclosureResult."Actual Preclosure Revenue" := 0;
                  ProjectPreclosureResult."Actual Preclosure Cost" := 0;
                  ProjectPreclosureResult."Actual Revenue Accrual" := 0;
                  ProjectPreclosureResult."Actual Cost Accrual" := 0;
                  ProjectPreclosureResult."Actual Provision Loss" := 0;

                  IF (Project."Project Type" <> '') AND ProjectType.GET(Project."Project Type") THEN
                    ProjectPreclosureResult.VALIDATE("Progress % Actual")
                  ELSE BEGIN
                    ProjectPreclosureResult."Progress % Actual" := 0;
                    ProjectPreclosureResult."Calculated Preclosure Result" := 0;
                    ProjectPreclosureResult."Calculated Preclosure Revenue" := 0;
                    ProjectPreclosureResult."Calculated Preclosure Cost" := 0;
                    ProjectPreclosureResult."Calculated Revenue Accrual" := 0;
                    ProjectPreclosureResult."Calculated Cost Accrual" := 0;
                    ProjectPreclosureResult."Calculated Provision Loss" := 0;
                    ProjectPreclosureResult."Corrected Preclosure Result" := 0;
                    ProjectPreclosureResult."Corrected Preclosure Revenue" := 0;
                    ProjectPreclosureResult."Corrected Preclosure Cost" := 0;
                    ProjectPreclosureResult."Corrected Revenue Accrual" := 0;
                    ProjectPreclosureResult."Corrected Cost Accrual" := 0;
                    ProjectPreclosureResult."Corrected Provision Loss" := 0;
                  END;
                  ProjectPreclosureResult.MODIFY;
                UNTIL ProjectPreclosureResult.NEXT = 0;
              END;
            END;

            IF NOT VarProjectSetup."Old Preclosure Result Present" THEN BEGIN
              ProjectPreclosureResult.SETRANGE(Posted, TRUE);
              ProjectPreclosureResult.SETRANGE("Correction Posted", FALSE);
              IF NOT ProjectPreclosureResult.ISEMPTY THEN BEGIN
                VarProjectSetup."Old Preclosure Result Present" := TRUE;
                VarProjectSetup.MODIFY;
              END;
            END;
          UNTIL Project.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateVendorEMailForPurchReceipt@1100529609(ConversionStatus@1100527450 : Integer);
    VAR
      Vendor@1100527451 : Record 23;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::Vendor, TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF Vendor.FINDSET THEN
          REPEAT
            Vendor."E-Mail for Purch. Receipt" := Vendor."E-Mail for Purch. Order";
            Vendor."E-Mail Subject Purch. Receipt" := Vendor."E-Mail Subject";
            Vendor.MODIFY;
          UNTIL Vendor.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateOrderAddressEMailForPurchReceipt@1100529608(ConversionStatus@1100527450 : Integer);
    VAR
      OrderAddress@1100529600 : Record 224;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Order Address", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF OrderAddress.FINDSET THEN
          REPEAT
            OrderAddress."E-Mail for Purch. Receipt" := OrderAddress."E-Mail for Purch. Order";
            OrderAddress.MODIFY;
          UNTIL OrderAddress.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateReferencePointTypes@1100528507(ConversionStatus@1100529200 : Integer);
    VAR
      ProgressScheme@1100528501 : Record 11020250;
      ProgressPhase@1100528502 : Record 11020251;
      ReferencePoint@1100528503 : Record 11020271;
      ReferencePeriod@1100528504 : Record 11020272;
      DocumentReferencePoint@1100528505 : Record 11020296;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"Reference Point", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        DocumentReferencePoint.SETFILTER(Type,'2..');
        IF NOT DocumentReferencePoint.ISEMPTY THEN
          DocumentReferencePoint.DELETEALL;

        ProgressPhase.SETFILTER(Type,'4..');
        IF NOT ProgressPhase.ISEMPTY THEN
          ProgressPhase.DELETEALL;

        ProgressPhase.RESET;
        ProgressPhase.SETFILTER(Apply,'4..');
        IF NOT ProgressPhase.ISEMPTY THEN
          ProgressPhase.DELETEALL;

        ProgressScheme.SETFILTER(Apply,'4..');
        IF NOT ProgressScheme.ISEMPTY THEN
          ProgressScheme.DELETEALL;

        ReferencePeriod.SETFILTER(Type,'4..');
        IF NOT ReferencePeriod.ISEMPTY THEN
          ReferencePeriod.DELETEALL;

        ReferencePeriod.RESET;
        ReferencePeriod.SETFILTER(Apply,'4..');
        IF NOT ReferencePeriod.ISEMPTY THEN
          ReferencePeriod.DELETEALL;

        ReferencePoint.SETFILTER(Apply,'4..');
        IF NOT ReferencePoint.ISEMPTY THEN
          ReferencePoint.DELETEALL;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateDampingRatioProject@1100529602(ConversionStatus@1100529200 : Integer;VAR VarProjectSetup@1100528501 : Record 315);
    VAR
      DampingRatio@1100529600 : Record 11072601;
      DampingRatioProject@1100529601 : Record 11072019;
      DampingRatioProjectNew@1100529602 : Record 11072019;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"Damping Ratio Project", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        DampingRatioProject.SETRANGE("Damping Ratio Code", '');
        IF NOT DampingRatioProject.ISEMPTY THEN BEGIN
          DampingRatio.InitRecord;
          DampingRatio.INSERT;

          DampingRatioProject.FINDSET;
          REPEAT
            DampingRatioProjectNew := DampingRatioProject;
            DampingRatioProjectNew."Damping Ratio Code" := DampingRatio.Code;
            DampingRatioProjectNew.INSERT;
          UNTIL DampingRatioProject.NEXT = 0;
          DampingRatioProject.DELETEALL;

          IF VarProjectSetup."Damping Ratio Code" = '' THEN BEGIN
            VarProjectSetup."Damping Ratio Code" := DampingRatio.Code;
            VarProjectSetup.MODIFY;
          END;
        END;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateResReqReceivCompanyHourAccountingLine@1100529610(ConversionStatus@1100527450 : Integer);
    VAR
      HourAccountingLine@1100529601 : Record 11012039;
      PlantLocation@1100529600 : Record 11012554;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Hour Accounting Line", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF HourAccountingLine.FINDSET THEN
          REPEAT
            HourAccountingLine."Resource Req. Receiv. Company" := HourAccountingLine."Receiving Company";
            IF (HourAccountingLine.Type = HourAccountingLine.Type::Plant) AND
               (HourAccountingLine."Plant Location" <> '')
            THEN BEGIN
              PlantLocation.CHANGECOMPANY(HourAccountingLine."Receiving Company");
              IF PlantLocation.GET(HourAccountingLine."Plant Location") THEN
                IF PlantLocation."Company Name" <> '' THEN
                  HourAccountingLine."Resource Req. Receiv. Company" := PlantLocation."Company Name";
            END;
            IF HourAccountingLine."Resource Req. Receiv. Company" <> '' THEN
              HourAccountingLine.MODIFY;
          UNTIL HourAccountingLine.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateResReqReceivCompanySiteMngmntHoursLine@1100529611(ConversionStatus@1100527450 : Integer);
    VAR
      SiteMngmntHoursLine@1100529601 : Record 11012361;
      PlantLocation@1100529600 : Record 11012554;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Site Mngmnt. Hours Line", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF SiteMngmntHoursLine.FINDSET THEN
          REPEAT
            SiteMngmntHoursLine."Resource Req. Receiv. Company" := SiteMngmntHoursLine."Receiving Company";
            IF (SiteMngmntHoursLine.Type = SiteMngmntHoursLine.Type::Plant) AND
               (SiteMngmntHoursLine."Plant Location" <> '')
            THEN BEGIN
              PlantLocation.CHANGECOMPANY(SiteMngmntHoursLine."Receiving Company");
              IF PlantLocation.GET(SiteMngmntHoursLine."Plant Location") THEN
                IF PlantLocation."Company Name" <> '' THEN
                  SiteMngmntHoursLine."Resource Req. Receiv. Company" := PlantLocation."Company Name";
            END;
            IF SiteMngmntHoursLine."Resource Req. Receiv. Company" <> '' THEN
              SiteMngmntHoursLine.MODIFY;
          UNTIL SiteMngmntHoursLine.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateResReqReceivCompanyPlantHoursRevenuesLine@1100529613(ConversionStatus@1100527450 : Integer);
    VAR
      PlantHoursRevenuesLine@1100529601 : Record 11012574;
      PlantLocation@1100529600 : Record 11012554;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Plant Hours Revenues Line", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        PlantHoursRevenuesLine.SETFILTER("Plant Location", '<>%1', '');
        IF PlantHoursRevenuesLine.FINDSET THEN
          REPEAT
            IF PlantLocation.GET(PlantHoursRevenuesLine."Plant Location") THEN
              IF PlantLocation."Company Name" <> '' THEN BEGIN
                PlantHoursRevenuesLine."Resource Req. Receiv. Company" := PlantLocation."Company Name";
                PlantHoursRevenuesLine.MODIFY;
              END;
          UNTIL PlantHoursRevenuesLine.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateResReqReceivCompanyApprovalEntry@1100529612(ConversionStatus@1100527450 : Integer);
    VAR
      ApprovalEntry@1100529601 : Record 454;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Approval Entry", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        ApprovalEntry.SETFILTER("Receiving Company", '<>%1', '');
        ApprovalEntry.SETFILTER("Resource Request No.", '<>%1', '');
        IF ApprovalEntry.FINDSET THEN
          REPEAT
            ApprovalEntry."Resource Req. Receiv. Company" := ApprovalEntry."Receiving Company";
            ApprovalEntry.MODIFY;
          UNTIL ApprovalEntry.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateSCControlByPeriodResultClosedRevenue@1100527551(ConversionStatus@1100527551 : Integer);
    VAR
      SCControlbyPeriod@1100527550 : Record 11072311;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"SC Control by Period", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF SCControlbyPeriod.FINDFIRST THEN
          REPEAT
            IF SCControlbyPeriod."Closed Revenue" <> 0 THEN BEGIN
              SCControlbyPeriod."Result Compl. Costs and Rev." := SCControlbyPeriod."Result Compl. Costs and Rev." / SCControlbyPeriod."Closed Revenue" * 100;
              SCControlbyPeriod.MODIFY;
            END;
          UNTIL SCControlbyPeriod.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateRemainingBudgetPrognosisLine@1100529620(ConversionStatus@1100527450 : Integer);
    VAR
      PrognosisLine@1100529601 : Record 11012035;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Prognosis Line", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF PrognosisLine.FINDSET THEN
          REPEAT
            IF (PrognosisLine."Budget Amount" <> 0) OR (PrognosisLine."Purchase Budget" <> 0) THEN BEGIN
              PrognosisLine."Remaining Budget" := PrognosisLine."Budget Amount" - PrognosisLine."Purchase Budget";
              PrognosisLine.MODIFY;
            END;
          UNTIL PrognosisLine.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdatePurchaseRequisitionLine@1100527550(ConversionStatus@1100527551 : Integer);
    VAR
      PurchaseRequisitionLine@1100527550 : Record 11229331;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"Purchase Requisition Line", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        PurchaseRequisitionLine.SETRANGE("Purchase Requisition No.", '');
        PurchaseRequisitionLine.DELETEALL(TRUE);
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateSProcessFAssignmCondition@1100528400(ConversionStatus@1100527551 : Integer);
    VAR
      ServiceProcessFieldAssignm@1100528401 : Record 11072302;
      SProcessFAssignmCondition@1100528400 : Record 11072559;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"S.Process F.Assignm. Condition", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        ServiceProcessFieldAssignm.SETFILTER("Condition Table No. OLD", '>0');
        IF ServiceProcessFieldAssignm.FINDSET THEN
          REPEAT
            SProcessFAssignmCondition.Type := ServiceProcessFieldAssignm.Type;
            SProcessFAssignmCondition."Process Structure Code" := ServiceProcessFieldAssignm."Process Structure Code";
            SProcessFAssignmCondition."Field Assignm. Table No." := ServiceProcessFieldAssignm."Table No.";
            SProcessFAssignmCondition."Field Assignm. Seq. No." := ServiceProcessFieldAssignm."Seq. No.";
            SProcessFAssignmCondition."Line No." := 10000;
            SProcessFAssignmCondition."Table Type" := ServiceProcessFieldAssignm."Condition Table Type OLD";
            SProcessFAssignmCondition."Table No." := ServiceProcessFieldAssignm."Condition Table No. OLD";
            SProcessFAssignmCondition."Field No." := ServiceProcessFieldAssignm."Condition Field No. OLD";
            SProcessFAssignmCondition."Field Filter" := ServiceProcessFieldAssignm."Condition Field Filter OLD";
            SProcessFAssignmCondition."Field Filter (ENU)" := ServiceProcessFieldAssignm."Condition Field Filter ENU OLD";
            SProcessFAssignmCondition.INSERT;
            ServiceProcessFieldAssignm."Condition Table Type OLD" := ServiceProcessFieldAssignm."Condition Table Type OLD"::" ";
            ServiceProcessFieldAssignm."Condition Table No. OLD" := 0;
            ServiceProcessFieldAssignm."Condition Field No. OLD" := 0;
            ServiceProcessFieldAssignm."Condition Field Filter OLD" := '';
            ServiceProcessFieldAssignm."Condition Field Filter ENU OLD" := '';
            ServiceProcessFieldAssignm.MODIFY;
          UNTIL ServiceProcessFieldAssignm.NEXT = 0;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateSCControlByPeriodSODescription@1100527552(ConversionStatus@1100527550 : Integer);
    VAR
      SCControlbyPeriod@1100527551 : Record 11072311;
      ServiceOrder@1100527552 : Record 11012823;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"SC Control by Period", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN
        IF SCControlbyPeriod.FINDSET THEN
          REPEAT
            IF SCControlbyPeriod."Service Order No." <> '' THEN
              IF ServiceOrder.GET(SCControlbyPeriod."Service Order No.") THEN BEGIN
                SCControlbyPeriod."SO Description" := ServiceOrder.Description;
                SCControlbyPeriod.MODIFY;
              END;
          UNTIL SCControlbyPeriod.NEXT = 0;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateHourConsentRuleFilterLangCode@1100527650(ConversionStatus@1100527650 : Integer);
    VAR
      HourConsentRuleFilter@1100527651 : Record 11229806;
      Language@1100527658 : Record 8;
      RecRef@1100527653 : RecordRef;
      FieldRef@1100527654 : FieldRef;
      StartLangID@1100527655 : Integer;
      HoursConsentManagement@1100527656 : Codeunit 11012206;
      SkipOnOK@1100527657 : Boolean;
      Field@1100527652 : Record 2000000041;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Hour Consent Rule Filter", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        StartLangID := GLOBALLANGUAGE;
        HourConsentRuleFilter.SETRANGE("Filter Language Code", '');
        HourConsentRuleFilter.SETFILTER("Table No.", '<>0');
        HourConsentRuleFilter.SETFILTER("Field No.", '<>0');
        IF HourConsentRuleFilter.FINDSET THEN
          REPEAT
            IF Field.GET(HourConsentRuleFilter."Table No.", HourConsentRuleFilter."Field No.") THEN BEGIN
              RecRef.OPEN(HourConsentRuleFilter."Table No.");
              FieldRef := RecRef.FIELD(HourConsentRuleFilter."Field No.");
              IF FORMAT(FieldRef.TYPE) = 'Option' THEN BEGIN
                SkipOnOK := FALSE;

                Language.SETFILTER("Windows Language ID", '1031|1033|1043'); //DEU|ENU|NLD
                Language.ASCENDING(FALSE); //NLD|ENU|DEU
                IF Language.FINDSET THEN
                  REPEAT
                    GLOBALLANGUAGE(Language."Windows Language ID");
                    IF HoursConsentManagement.TrySetFilter(FieldRef, HourConsentRuleFilter.Filter) THEN BEGIN
                      SkipOnOK := TRUE;

                      HourConsentRuleFilter."Filter Language Code" := Language.Code;
                      HourConsentRuleFilter.MODIFY;
                    END;
                  UNTIL (Language.NEXT = 0) OR SkipOnOK;
              END;
              RecRef.CLOSE;
            END;
          UNTIL HourConsentRuleFilter.NEXT = 0;

        GLOBALLANGUAGE(StartLangID);
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdatePlantMaintenanceSchemeTables@1100529008(ConversionStatus@1100528500 : Integer);
    VAR
      PlantMaintSchemeVersion@1100528501 : Record 11072674;
      PlantMaintSchemeVersion2@1100529009 : Record 11072674;
      PlantMaintSchemeVerLine@1100528502 : Record 11072675;
      PlantMaintSchemeVerLine2@1100529008 : Record 11072675;
      CancelledPlantMaintSLine@1100529000 : Record 11072676;
      CancelledPlantMaintSLine2@1100529007 : Record 11072676;
      PlantInspectionVersion@1100529001 : Record 11072682;
      PlantInspectionVersion2@1100529006 : Record 11072682;
      PlantInspectionLine@1100529004 : Record 11072684;
      PlantInspectionLine2@1100529003 : Record 11072684;
      CancelledPlantInspLine@1100529002 : Record 11072683;
      CancelledPlantInspLine2@1100529005 : Record 11072683;
      DummyPlantNo@1100529010 : Code[20];
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Plant Maint. Scheme Version", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        WITH PlantMaintSchemeVersion DO BEGIN
          SETFILTER(Level, '%1|%2', Level::"Maintenance Scheme", Level::"Plant Type");
          IF FINDSET(TRUE, TRUE) THEN BEGIN
            REPEAT
              PlantMaintSchemeVersion2 := PlantMaintSchemeVersion;
              IF UpdatePlantMaintenanceSchemeTables_KeyPlantFields(Level, PlantMaintSchemeVersion2."Plant Type", PlantMaintSchemeVersion2."Plant No.") THEN BEGIN
                PlantMaintSchemeVersion2.INSERT;
                DELETE;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        WITH PlantMaintSchemeVerLine DO BEGIN
          SETFILTER(Level, '%1|%2', Level::"Maintenance Scheme", Level::"Plant Type");
          IF FINDSET(TRUE, TRUE) THEN BEGIN
            REPEAT
              PlantMaintSchemeVerLine2 := PlantMaintSchemeVerLine;
              IF UpdatePlantMaintenanceSchemeTables_KeyPlantFields(Level, PlantMaintSchemeVerLine2."Plant Type", PlantMaintSchemeVerLine2."Plant No.") THEN BEGIN
                PlantMaintSchemeVerLine2.INSERT;
                DELETE;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        WITH CancelledPlantMaintSLine DO BEGIN
          SETFILTER(Level, '%1|%2', Level::"Maintenance Scheme", Level::"Plant Type");
          IF FINDSET(TRUE, TRUE) THEN BEGIN
            REPEAT
              CancelledPlantMaintSLine2 := CancelledPlantMaintSLine;
              IF UpdatePlantMaintenanceSchemeTables_KeyPlantFields(Level, CancelledPlantMaintSLine2."Plant Type", CancelledPlantMaintSLine2."Plant No.") THEN BEGIN
                UpdatePlantMaintenanceSchemeTables_KeyPlantFields("Level (Cancelled)", CancelledPlantMaintSLine2."Plant Type (Cancelled)", DummyPlantNo);
                CancelledPlantMaintSLine2.INSERT;
                DELETE;
              END;
            UNTIL NEXT = 0;
          END;
          RESET;
          SETCURRENTKEY("Level (Cancelled)","Plant Type (Cancelled)","Maintenance Scheme (Cancelled)","Index Date (Cancelled)","Line No. (Cancelled)");
          SETRANGE("Level (Cancelled)", 2);  // Level::"Plant Number" (Old);
          DELETEALL;
          SETRANGE("Level (Cancelled)", "Level (Cancelled)"::"Maintenance Scheme");
          IF FINDSET(TRUE, TRUE) THEN BEGIN
            REPEAT
              CancelledPlantMaintSLine2 := CancelledPlantMaintSLine;
              IF UpdatePlantMaintenanceSchemeTables_KeyPlantFields("Level (Cancelled)", CancelledPlantMaintSLine2."Plant Type (Cancelled)", DummyPlantNo) THEN BEGIN
                CancelledPlantMaintSLine2.INSERT;
                DELETE;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        WITH PlantInspectionVersion DO BEGIN
          SETFILTER(Level, '%1|%2', Level::"Base Inspection List", Level::"Plant Type");
          IF FINDSET(TRUE, TRUE) THEN BEGIN
            REPEAT
              PlantInspectionVersion2 := PlantInspectionVersion;
              IF UpdatePlantMaintenanceSchemeTables_KeyPlantFields(Level, PlantInspectionVersion2."Plant Type", PlantInspectionVersion2."Plant No.") THEN BEGIN
                PlantInspectionVersion2.INSERT;
                DELETE;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        WITH PlantInspectionLine DO BEGIN
          SETFILTER(Level, '%1|%2', Level::"Base Inspection List", Level::"Plant Type");
          IF FINDSET(TRUE, TRUE) THEN BEGIN
            REPEAT
              PlantInspectionLine2 := PlantInspectionLine;
              IF UpdatePlantMaintenanceSchemeTables_KeyPlantFields(Level, PlantInspectionLine2."Plant Type", PlantInspectionLine2."Plant No.") THEN BEGIN
                PlantInspectionLine2.INSERT;
                DELETE;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        WITH CancelledPlantInspLine DO BEGIN
          SETFILTER(Level, '%1|%2', Level::"Base Inspection List", Level::"Plant Type");
          IF FINDSET(TRUE, TRUE) THEN BEGIN
            REPEAT
              CancelledPlantInspLine2 := CancelledPlantInspLine;
              IF UpdatePlantMaintenanceSchemeTables_KeyPlantFields("Level (Cancelled)", CancelledPlantInspLine2."Plant Type", CancelledPlantInspLine2."Plant No.") THEN BEGIN
                UpdatePlantMaintenanceSchemeTables_KeyPlantFields("Level (Cancelled)", CancelledPlantInspLine2."Plant Type (Cancelled)", DummyPlantNo);
                CancelledPlantInspLine2.INSERT;
                DELETE;
              END;
            UNTIL NEXT = 0;
          END;
          SETCURRENTKEY("Level (Cancelled)","Plant Type (Cancelled)","Maintenance Scheme (Cancelled)","Base Insp. List (Cancelled)","Line No. (Cancelled)");
          SETRANGE("Level (Cancelled)", 2);  // Level::"Plant Number" (Old);
          DELETEALL;
          SETRANGE("Level (Cancelled)", "Level (Cancelled)"::"Base Inspection List" );
          IF FINDSET(TRUE, TRUE) THEN BEGIN
            REPEAT
              CancelledPlantInspLine2 := CancelledPlantInspLine;
              IF UpdatePlantMaintenanceSchemeTables_KeyPlantFields("Level (Cancelled)", CancelledPlantInspLine2."Plant Type (Cancelled)", DummyPlantNo) THEN BEGIN
                CancelledPlantMaintSLine2.INSERT;
                DELETE;
              END;
            UNTIL NEXT = 0;
          END;
        END;
        UpdatePlantMaintenanceSchemeTables_BaseInspecList;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdatePlantMaintenanceSchemeTables_KeyPlantFields@1100529011(Level@1100529000 : Option;VAR PlantType@1100529001 : Code[20];VAR PlantNo@1100529002 : Code[20]) : Boolean;
    VAR
      OldPlantType@1100529003 : Code[20];
      OldPlantNo@1100529004 : Code[20];
    BEGIN
      OldPlantType := PlantType;
      OldPlantNo := PlantNo;
      CASE Level OF
        0: //Level: "Maintenance Scheme" or "Base Inspection List"
          BEGIN
            PlantType := '';
            PlantNo := '';
          END;
        1: //Level: "Plant Type"
          PlantNo := '';
      END;
      EXIT((PlantType <> OldPlantType) OR (PlantNo <> OldPlantNo));
    END;

    LOCAL PROCEDURE UpdatePlantMaintenanceSchemeTables_BaseInspecList@1100529012();
    VAR
      PlantMaintenanceScheme@1100529000 : Record 11072677;
      PlantMaintenanceScheme2@1100529001 : Record 11072677;
      PlantStndMaintenanceScheme@1100529002 : Record 11072673;
      BaseInspectionList@1100529003 : Code[20];
    BEGIN
      PlantMaintenanceScheme.SETRANGE("Base Inspection List", '');
      IF PlantMaintenanceScheme.FINDSET(TRUE,FALSE) THEN BEGIN
        REPEAT
          BaseInspectionList := '';
          IF PlantMaintenanceScheme."Plant No." <> '' THEN BEGIN
            IF PlantMaintenanceScheme2.GET(PlantMaintenanceScheme."Plant Type", '', PlantMaintenanceScheme."Maintenance Scheme") THEN
              BaseInspectionList := PlantMaintenanceScheme2."Base Inspection List";
          END;
          IF BaseInspectionList = '' THEN BEGIN
            IF PlantStndMaintenanceScheme.GET(PlantMaintenanceScheme."Maintenance Scheme") THEN
              BaseInspectionList := PlantMaintenanceScheme2."Base Inspection List";
          END;
          IF BaseInspectionList <> '' THEN BEGIN
            PlantMaintenanceScheme."Base Inspection List" := BaseInspectionList;
            PlantMaintenanceScheme.MODIFY;
          END;
        UNTIL PlantMaintenanceScheme.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdatePlantInspectionInspectorName@1100529009(ConversionStatus@1100528500 : Integer);
    VAR
      Inspection@1100528501 : Record 11012564;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::Inspection, TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        Inspection.SETFILTER("Inspected by", '<>%1', '');
        IF Inspection.FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            Inspection.FillInspectorName;
            Inspection.MODIFY;
          UNTIL Inspection.NEXT = 0;
        END;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateGlobalDim1CodeServicePrognosisLine@1100529600(ConversionStatus@1100527450 : Integer);
    VAR
      ServiceContract@1100529600 : Record 11012812;
      ServicePrognosisLine@1100529601 : Record 11072310;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Service Prognosis Line", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF ServiceContract.FINDSET THEN
          REPEAT
            ServicePrognosisLine.SETRANGE("Service Contract No.", ServiceContract."No.");
            IF NOT ServicePrognosisLine.ISEMPTY THEN
              ServicePrognosisLine.MODIFYALL("Global Dimension 1 Code", ServiceContract."Global Dimension 1 Code");
          UNTIL ServiceContract.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateGlobalDim1CodeServicePreclosureResultLine@1100529605(ConversionStatus@1100527450 : Integer);
    VAR
      ServiceContract@1100529600 : Record 11012812;
      ServicePreclosureResultLine@1100529601 : Record 11072313;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Service Preclosure Result Line", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF ServiceContract.FINDSET THEN
          REPEAT
            ServicePreclosureResultLine.SETRANGE("Service Contract No.", ServiceContract."No.");
            IF NOT ServicePreclosureResultLine.ISEMPTY THEN
              ServicePreclosureResultLine.MODIFYALL("Global Dimension 1 Code", ServiceContract."Global Dimension 1 Code");
          UNTIL ServiceContract.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateGuidsForInspectionLines@1100528700(ConversionStatus@1100528700 : Integer);
    VAR
      ServiceInspectionLine@1100528701 : Record 11071751;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Service Inspection Line", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF ServiceInspectionLine.FINDSET(TRUE) THEN BEGIN
          REPEAT
            IF ISNULLGUID(ServiceInspectionLine.Id) THEN BEGIN
              ServiceInspectionLine.VALIDATE(Id, CREATEGUID);
              ServiceInspectionLine.MODIFY;
            END;
          UNTIL ServiceInspectionLine.NEXT = 0;
        END;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateOptionSalesPriceExclVATBuyer@1100528401(ConversionStatus@1100529200 : Integer);
    VAR
      Option@1100528400 : Record 11012502;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::Option, TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN
        IF Option.FINDSET THEN
          REPEAT
            IF (Option."Sales Price excl. VAT" <> 0) AND
               (Option."Developers Discount Percentage" <> 100)
            THEN BEGIN
              Option."Sales Price excl. VAT (Buyer)" :=
                ROUND(Option."Sales Price excl. VAT" * Option.BuyerFactor);
              Option.MODIFY;
            END;
          UNTIL Option.NEXT = 0;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateOptionQuoteLineSalesPriceExclVATBuyer@1100528402(ConversionStatus@1100529200 : Integer);
    VAR
      OptionQuoteLine@1100528400 : Record 11012514;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::Option, TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN
        IF OptionQuoteLine.FINDSET THEN
          REPEAT
            IF (OptionQuoteLine."Sales Price excl. VAT" <> 0) AND
               (OptionQuoteLine."Developers Discount Percentage" <> 100)
            THEN BEGIN
              OptionQuoteLine."Sales Price excl. VAT (Buyer)" :=
                ROUND(OptionQuoteLine."Sales Price excl. VAT" * OptionQuoteLine.BuyerFactor);
              OptionQuoteLine.MODIFY;
            END;
          UNTIL OptionQuoteLine.NEXT = 0;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateSignhostSigners@1100525017(ConversionStatus@1100529200 : Integer);
    VAR
      SignhostDocument@1100525000 : Record 11229468;
      SignhostSigner@1100528400 : Record 11229467;
      SignhostSigner2@1100528401 : Record 11229467;
      SignhostSigner3@1100528402 : Record 11229467;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Signhost Signer", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        // Update Signhost Signers linked to a Signhost Document.
        IF SignhostDocument.FINDSET THEN
          REPEAT
            SignhostSigner.SETRANGE("Record ID", SignhostDocument."Record ID");
            SignhostSigner.SETRANGE("Word Document No.", '');
            SignhostSigner.SETRANGE("E-Mail", '');
            IF SignhostSigner.FINDSET THEN
              REPEAT
                SignhostSigner."E-Mail" := SignhostSigner.GetDefaultEMail;
                SignhostSigner2 := SignhostSigner;
                SignhostSigner2."Word Document No." := SignhostDocument."Sent Word Document No.";
                IF SignhostSigner2.INSERT THEN;
                SignhostSigner."Last Activity" := 0;
                SignhostSigner."Sign Url" := '';
                SignhostSigner."Sign Request Sent Date-Time" := 0DT;
                SignhostSigner."Signed Date-Time" := 0DT;
                SignhostSigner."Rejected Date-Time" := 0DT;
                SignhostSigner."Signed Document Sent Date-Time" := 0DT;
                SignhostSigner.MODIFY;
              UNTIL SignhostSigner.NEXT = 0;
          UNTIL SignhostDocument.NEXT = 0;
        // Update Signhost Signers not linked to a Signhost Document.
        SignhostSigner3.SETRANGE("Word Document No.", '');
        SignhostSigner3.SETRANGE("E-Mail", '');
        IF SignhostSigner3.FINDSET THEN
          REPEAT
            SignhostSigner3."E-Mail" := SignhostSigner3.GetDefaultEMail;
            SignhostSigner3.MODIFY;
          UNTIL SignhostSigner3.NEXT = 0;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateEmployerDescriptionForSiteMngmntHoursEmployee@1100527553(ConversionStatus@1100527550 : Integer);
    VAR
      SiteMngmntHoursEmployee@1100527551 : Record 11012357;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      IF NOT FPSLicenseManagement.LicenseAndReadPermissionForTable(SiteMngmntHoursEmployee) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Site Mngmnt. Hours Employee", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        SiteMngmntHoursEmployee.SETRANGE(Company, COMPANYNAME);
        IF SiteMngmntHoursEmployee.FINDSET(TRUE) THEN BEGIN
          REPEAT
              SiteMngmntHoursEmployee.VALIDATE(Employer);
              SiteMngmntHoursEmployee.MODIFY;
          UNTIL SiteMngmntHoursEmployee.NEXT = 0;
        END;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    PROCEDURE DeleteApplicationAreaSetup@1100529203();
    VAR
      ApplicationAreaSetup@1100529200 : Record 9178;
    BEGIN
      IF DatabaseDataUpgradeLog.GET(999998) THEN
        DatabaseDataUpgradeLog.DELETE;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"Application Area Setup",TypeOfLog,StartDateTime,NewCompany);

      ApplicationAreaSetup.DELETEALL;

      DatabaseDataUpgradeLog.InsertLog(999998,StartDateTime,TypeOfLog);
    END;

    PROCEDURE DeleteExperienceTierSetup@1100529208();
    VAR
      ExperienceTierSetup@1100529200 : Record 9176;
    BEGIN
      IF DatabaseDataUpgradeLog.GET(999999) THEN
        DatabaseDataUpgradeLog.DELETE;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"Experience Tier Setup",TypeOfLog,StartDateTime,NewCompany);

      ExperienceTierSetup.DELETEALL;

      DatabaseDataUpgradeLog.InsertLog(999999,StartDateTime,TypeOfLog);
    END;

    LOCAL PROCEDURE UpdateServiceContractArrangementComment@1100529603(ConversionStatus@1100528700 : Integer);
    VAR
      ServiceContractArrangement@1100529600 : Record 11071705;
      ServContrArrCommentLine@1100529601 : Record 11072560;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Service Contract Arrangement", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServiceContractArrangement) THEN
          IF ServiceContractArrangement.FINDSET THEN
            REPEAT
              IF ServiceContractArrangement."Comment OLD" <> '' THEN BEGIN
                ServContrArrCommentLine.INIT;
                ServContrArrCommentLine."Service Contract No." := ServiceContractArrangement."Service Contract No.";
                ServContrArrCommentLine."Object No." := ServiceContractArrangement."Object No.";
                ServContrArrCommentLine."Maintenance Scheme" := ServiceContractArrangement."Maintenance Scheme";
                ServContrArrCommentLine."Serv. Contr. Arrang. Line No." := ServiceContractArrangement."Line No.";
                ServContrArrCommentLine."Line No." := 10000;
                ServContrArrCommentLine.Comment := ServiceContractArrangement."Comment OLD";
                ServContrArrCommentLine.INSERT;

                ServiceContractArrangement."Comment OLD" := '';
                ServiceContractArrangement.MODIFY;
              END;
            UNTIL ServiceContractArrangement.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateServiceOrderControlBudgetServiceLocation@1100529614(ConversionStatus@1100528700 : Integer);
    VAR
      ServiceOrder@1100529602 : Record 11012823;
      ServiceOrderControlBudget@1100529603 : Record 11071757;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Service Order Control Budget", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServiceOrderControlBudget) THEN BEGIN
          ServiceOrder.SETFILTER("Service Location No.", '<>%1', '');
          IF ServiceOrder.FINDSET THEN
            REPEAT
              ServiceOrderControlBudget.SETRANGE("Service Order No.", ServiceOrder."No.");
              IF NOT ServiceOrderControlBudget.ISEMPTY THEN
                ServiceOrderControlBudget.MODIFYALL("Service Location No.", ServiceOrder."Service Location No.");
            UNTIL ServiceOrder.NEXT = 0;
        END;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateServiceOrderCtrlCostRevServiceLocation@1100529615(ConversionStatus@1100528700 : Integer);
    VAR
      ServiceOrder@1100529602 : Record 11012823;
      ServiceOrderCtrlCostRev@1100529603 : Record 11071756;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Service Order Ctrl. Cost/Rev.", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServiceOrderCtrlCostRev) THEN BEGIN
          ServiceOrder.SETFILTER("Service Location No.", '<>%1', '');
          IF ServiceOrder.FINDSET THEN
            REPEAT
              ServiceOrderCtrlCostRev.SETRANGE("Service Order No.", ServiceOrder."No.");
              IF NOT ServiceOrderCtrlCostRev.ISEMPTY THEN
                ServiceOrderCtrlCostRev.MODIFYALL("Service Location No.", ServiceOrder."Service Location No.");
            UNTIL ServiceOrder.NEXT = 0;
        END;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE InsertDocumentViewerSetupIfNotExists@1100528702(ConversionStatus@1100528700 : Integer);
    VAR
      DocumentViewerSetup@1100528701 : Record 11072461;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Document Viewer Setup", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(DocumentViewerSetup) THEN BEGIN
          IF NOT DocumentViewerSetup.GET THEN BEGIN
            DocumentViewerSetup.VALIDATE("Annotation Font Size", '12pt');
            DocumentViewerSetup.VALIDATE("Default Zoom Level", 0.3);
            DocumentViewerSetup.VALIDATE("Logging Level", DocumentViewerSetup."Logging Level"::None);
            DocumentViewerSetup.VALIDATE("Default Zoom Level Full Screen", 0.7);
            DocumentViewerSetup.INSERT(TRUE);
          END;
        END;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdatePlantNeedFromDepot@1100529000(ConversionStatus@1100528500 : Integer);
    VAR
      PlantLocation@1100528501 : Record 11012554;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Plant Need", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        PlantLocation.SETRANGE("From Depot (Plant Need)", '');
        IF PlantLocation.FINDSET(TRUE,FALSE) THEN BEGIN
          REPEAT
            PlantLocation.FillDefaultFromDepotPlantNeed;
            IF PlantLocation."From Depot (Plant Need)" <> '' THEN
              PlantLocation.MODIFY;
          UNTIL PlantLocation.NEXT = 0;
        END;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdatePlantInventoryExpectedReturnDepot@1100529001(ConversionStatus@1100528500 : Integer);
    VAR
      PlantSetup@1100529001 : Record 11012550;
      PlantLocation@1100528501 : Record 11012554;
      PlantDepot@1100529002 : Record 11012554;
      PlantInventory@1100529000 : Record 11012555;
      PlantOrder@1100529003 : Record 11012556;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Plant Inventory", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        PlantLocation.SETRANGE(Depot, FALSE);
        IF PlantLocation.FINDSET THEN BEGIN
          PlantSetup.GET;
          PlantInventory.SETRANGE(Removed, FALSE);
          PlantInventory.SETRANGE("Expected Return Depot", '');
          REPEAT
            PlantInventory.SETRANGE(Location, PlantLocation.Code);
            IF PlantInventory.FINDSET(TRUE,FALSE) THEN BEGIN
              REPEAT
                IF PlantInventory."Arrival Order Type" = PlantInventory."Arrival Order Type"::"Plant Order" THEN BEGIN
                  IF PlantOrder.GET(PlantInventory."Arrival Order") THEN BEGIN
                    IF PlantOrder.Type = PlantOrder.Type::Arrival THEN
                      PlantInventory."Expected Return Depot" := PlantOrder."From Location";
                  END;
                END;
                IF PlantInventory."Expected Return Depot" = '' THEN
                  PlantInventory."Expected Return Depot" := PlantSetup.GetRentalDepotForDepartmentCode(PlantLocation."Department Code");
                IF PlantInventory."Expected Return Depot" <> '' THEN BEGIN
                  IF PlantDepot.GET(PlantInventory."Expected Return Depot") THEN BEGIN
                    IF PlantDepot.Depot THEN
                      PlantInventory.MODIFY;
                  END;
                END;
              UNTIL PlantInventory.NEXT = 0;
            END;
          UNTIL PlantLocation.NEXT = 0;
        END;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateShelfNoForSalesLine@1100527302(ConversionStatus@1100527550 : Integer);
    VAR
      SalesLine@1100527300 : Record 37;
      StockkeepingUnit@1100527301 : Record 5700;
      Item@1100527302 : Record 27;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Sales Line", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        SalesLine.SETFILTER("Item No.", '<>%1', '');
        IF SalesLine.FINDSET THEN
          REPEAT
            IF Item.GET(SalesLine."Item No.") AND (Item."Shelf No." <> '') THEN
              SalesLine."Shelf No." := Item."Shelf No."
            ELSE BEGIN
              StockkeepingUnit.SETRANGE("Item No.", SalesLine."Item No.");
              StockkeepingUnit.SETRANGE("Location Code", SalesLine."Location Code");
              IF StockkeepingUnit.FINDFIRST THEN
                SalesLine."Shelf No." := StockkeepingUnit."Shelf No.";
            END;
            IF SalesLine."Shelf No." <> '' THEN
              SalesLine.MODIFY;
          UNTIL SalesLine.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateOptionMainGroup@1100528200(ConversionStatus@1100528200 : Integer);
    VAR
      Plot@1100528201 : Record 11012500;
      OptionMainGroup@1100528202 : Record 11012509;
      OptionMainGroup2@1100528203 : Record 11012509;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Option Main Group", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        Plot.SETFILTER("Project No.", '<>%1', '');
        Plot.SETFILTER("Plot No.", '<>%1', '');
        IF Plot.FINDSET THEN
          REPEAT
            OptionMainGroup.SETRANGE("Project No.", Plot."Project No.");
            OptionMainGroup.SETFILTER("Plot No.", '=%1', '');
            IF OptionMainGroup.FINDSET THEN
              REPEAT
                OptionMainGroup2 := OptionMainGroup;
                OptionMainGroup2."Plot No." := Plot."Plot No.";
                IF OptionMainGroup2.INSERT THEN;
              UNTIL OptionMainGroup.NEXT = 0;
          UNTIL Plot.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateOptionGroup@1100528201(ConversionStatus@1100528200 : Integer);
    VAR
      Plot@1100528201 : Record 11012500;
      OptionGroup@1100528202 : Record 11012504;
      OptionGroup2@1100528203 : Record 11012504;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Option Group", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        Plot.SETFILTER("Project No.", '<>%1', '');
        Plot.SETFILTER("Plot No.", '<>%1', '');
        IF Plot.FINDSET THEN
          REPEAT
            OptionGroup.SETRANGE("Project No.", Plot."Project No.");
            OptionGroup.SETFILTER("Plot No.", '=%1', '');
            IF OptionGroup.FINDSET THEN
              REPEAT
                OptionGroup2 := OptionGroup;
                OptionGroup2."Plot No." := Plot."Plot No.";
                IF OptionGroup2.INSERT THEN;
              UNTIL OptionGroup.NEXT = 0;
          UNTIL Plot.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateOptionSubGroup@1100528202(ConversionStatus@1100528200 : Integer);
    VAR
      Plot@1100528203 : Record 11012500;
      OptionSubGroup@1100528202 : Record 11012505;
      OptionSubGroup2@1100528201 : Record 11012505;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Option Sub Group", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        Plot.SETFILTER("Project No.", '<>%1', '');
        Plot.SETFILTER("Plot No.", '<>%1', '');
        IF Plot.FINDSET THEN
          REPEAT
            OptionSubGroup.SETRANGE("Project No.", Plot."Project No.");
            OptionSubGroup.SETFILTER("Plot No.", '=%1', '');
            IF OptionSubGroup.FINDSET THEN
              REPEAT
                OptionSubGroup2 := OptionSubGroup;
                OptionSubGroup2."Plot No." := Plot."Plot No.";
                IF OptionSubGroup2.INSERT THEN;
              UNTIL OptionSubGroup.NEXT = 0;
          UNTIL Plot.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateSCControlByPeriodResultComplCostsAndRev@1100527451(ConversionStatus@1100527450 : Integer);
    VAR
      SCControlbyPeriod@1100527451 : Record 11072311;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"SC Control by Period", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(SCControlbyPeriod) THEN BEGIN
          IF SCControlbyPeriod.FINDFIRST THEN
            REPEAT
              IF SCControlbyPeriod."Closed Revenue" <> 0 THEN BEGIN
                SCControlbyPeriod."Result Compl. Costs and Rev." := SCControlbyPeriod."Closed Revenue" - SCControlbyPeriod."Closed Cost";
                SCControlbyPeriod."Result closed revenue %" := SCControlbyPeriod."Result Compl. Costs and Rev." / SCControlbyPeriod."Closed Revenue" * 100;
                IF SCControlbyPeriod."Result closed revenue %" < 0 THEN
                  SCControlbyPeriod."Result closed revenue %" := 0;
                SCControlbyPeriod.MODIFY;
              END;
            UNTIL SCControlbyPeriod.NEXT = 0;
        END;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateDeliveryCompaniesInSCABCompany@1100530700(ConversionStatus@1100528700 : Integer);
    VAR
      HumanResourcesSetup@1100528701 : Record 5218;
      SCABCompany@1100530700 : Record 11012383;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"SCAB Company", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF HumanResourcesSetup.GET THEN
          IF HumanResourcesSetup."Delivering Company (SCAB)" <> '' THEN BEGIN
            IF SCABCompany.GET(HumanResourcesSetup."Delivering Company (SCAB)") THEN BEGIN
              SCABCompany."Delivery Company" := TRUE;
              SCABCompany.MODIFY;
            END ELSE BEGIN
              SCABCompany."Company No." := HumanResourcesSetup."Delivering Company (SCAB)";
              SCABCompany."Delivery Company" := TRUE;
              SCABCompany.INSERT;
            END;
            HumanResourcesSetup."Delivering Company (SCAB)" := '';
            HumanResourcesSetup.MODIFY;
          END;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateSiteManagerSetupLastWeekDay@1100528600(ConversionStatus@1100529200 : Integer);
    VAR
      SiteManagerFormSetup@1100528600 : Record 11125525;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"Site Manager Form Setup", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF SiteManagerFormSetup.GET THEN BEGIN
          SiteManagerFormSetup."Last Working Day of the Week" := SiteManagerFormSetup."Last Working Day of the Week"::Friday;
          SiteManagerFormSetup.MODIFY;
        END;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateIssuedReminders@1100527452(ConversionStatus@1100527450 : Integer);
    VAR
      CustomerCockpit@1100527451 : Record 11012395;
      IssuedReminderHeader@1100527452 : Record 297;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"Sales Comment Line", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(CustomerCockpit) AND FPSLicenseManagement.LicenseAndReadPermissionForTable(IssuedReminderHeader) THEN BEGIN
          IF IssuedReminderHeader.FINDSET THEN BEGIN
            REPEAT
              CustomerCockpit.UpdateIssuedReminder(IssuedReminderHeader);
            UNTIL IssuedReminderHeader.NEXT = 0;
          END;
        END;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateGenJnlLineServiceCategory@1100529616(ConversionStatus@1100528200 : Integer);
    VAR
      GenJournalLine@1100529600 : Record 81;
      ServiceOrder@1100529601 : Record 11012823;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Gen. Journal Line", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(ServiceOrder) THEN BEGIN
          GenJournalLine.SETFILTER("Service Order No.", '<>%1', '');
          IF GenJournalLine.FINDSET THEN
            REPEAT
              GenJournalLine.GetServiceCategory;
              GenJournalLine.MODIFY;
            UNTIL GenJournalLine.NEXT = 0;
        END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE MigrateFSAUsersToGAP@1100529300(ConversionStatus@1100527450 : Integer);
    VAR
      AppUserGAP@1100527451 : Record 11124975;
      FieldServiceAppSetup@1100529300 : Record 11126700;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"App User GAP", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(FieldServiceAppSetup) THEN
          FieldServiceAppSetup.MigrateUserData;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateItemBlocked@1100528900(ConversionStatus@1100527450 : Integer);
    VAR
      Item@1100528900 : Record 27;
    BEGIN
      //C059137
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::Item, TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF Item.FINDSET THEN
          REPEAT
            IF Item."Purchase Blocked OLD" THEN BEGIN
              Item."Purchasing Blocked" := Item."Purchase Blocked OLD";
              Item."Purchase Blocked OLD" := FALSE;
            END;
            IF Item."Sales Blocked OLD" THEN BEGIN
              Item."Sales Blocked" := Item."Sales Blocked OLD";
              Item."Sales Blocked OLD" := FALSE;
            END;
            //next fields are expired for years but never got extension OLD
            Item."Serviced Item" := FALSE;
            Item."AdvOrder allways Inventory OLD" := FALSE;
            Item.MODIFY;
          UNTIL Item.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateResultClosedRevenuePercentageSCControlByPeriod@1100527453(ConversionStatus@1100527450 : Integer);
    VAR
      SCControlbyPeriod@1100527451 : Record 11072311;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"SC Control by Period", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(SCControlbyPeriod) THEN BEGIN
          IF SCControlbyPeriod.FINDFIRST THEN
            REPEAT
              IF SCControlbyPeriod."Closed Revenue" <> 0 THEN BEGIN
                SCControlbyPeriod."Result closed revenue %" := SCControlbyPeriod."Result Compl. Costs and Rev." / SCControlbyPeriod."Closed Revenue" * 100;
                SCControlbyPeriod.MODIFY;
              END;
            UNTIL SCControlbyPeriod.NEXT = 0;
        END;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    PROCEDURE InsertCtrlSetup@1100529206();
    VAR
      CTRLSetup@1100529200 : Record 11125686;
      CTRLManagement@1100527801 : Codeunit 11012498;
    BEGIN
      IF InstallationManagement.NoLicensePermissionForTableData(DATABASE::"CTRL Setup") THEN
        EXIT;

      IF NOT CTRLSetup.GET THEN BEGIN
        CTRLSetup.INIT;
        CTRLSetup.INSERT;
      END;

      IF (CTRLSetup.Active) AND (CTRLSetup."Trigger Url" <> '') AND (CTRLSetup."Access Token" <> '') AND
        (CTRLSetup."Tenant Id" <> '')
      THEN
        CTRLManagement.BulkImportFeatureToggles;
    END;

    LOCAL PROCEDURE InsertExtendedTableProperties@1100525005();
    VAR
      UpdateExtTableProperties@1100525000 : Codeunit 11020226;
    BEGIN
      UpdateExtTableProperties.RUN;
    END;

    LOCAL PROCEDURE InsertPossibleDocLinks@1100525003();
    VAR
      PossibleDocLink@1199198000 : Record 11012748;
      DocumentLinkManagement@1100525000 : Codeunit 11012401;
    BEGIN
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(PossibleDocLink) THEN
        DocumentLinkManagement.GeneratePossibleDocLinks();
    END;

    LOCAL PROCEDURE InsertConvCentralMgtFields@1100525001();
    VAR
      CentralDataManagement@1100525000 : Codeunit 11012010;
    BEGIN
      CentralDataManagement.InitCentralMgtFieldsSetup;
    END;

    PROCEDURE InsertClientAddIns@8();
    VAR
      ClientAddIn@1000 : Record 2000000069;
      CompanyInitialize@1100529200 : Codeunit 2;
    BEGIN
      // Standard NAV
      CompanyInitialize.InsertClientAddIns;

      // 4PS Construct Addins
      InsertClientAddIn4PS(
        'Fps.Nav.Addin.BingMaps',
        GetPublicKeyToken(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.BingMaps\Fps.Nav.Addin.BingMaps.dll'),
        GetAssemblyVersion(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.BingMaps\Fps.Nav.Addin.BingMaps.dll'),
        ClientAddIn.Category::"JavaScript Control Add-in",
        GetAssemblyDescription(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.BingMaps\Fps.Nav.Addin.BingMaps.dll'),
        APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.BingMaps\Fps.Nav.Addin.BingMaps.zip');
      InsertClientAddIn4PS(
        'Fps.Nav.Addin.ColorPicker',
        GetPublicKeyToken(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.ColorPicker\Fps.Nav.Addin.ColorPicker.dll'),
        GetAssemblyVersion(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.ColorPicker\Fps.Nav.Addin.ColorPicker.dll'),
        ClientAddIn.Category::"JavaScript Control Add-in",
        GetAssemblyDescription(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.ColorPicker\Fps.Nav.Addin.ColorPicker.dll'),
        APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.ColorPicker\Fps.Nav.Addin.ColorPicker.zip');
      InsertClientAddIn4PS(
        'Fps.Nav.Addin.DateTimePicker',
        GetPublicKeyToken(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.DateTimePicker\Fps.Nav.Addin.DateTimePicker.dll'),
        GetAssemblyVersion(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.DateTimePicker\Fps.Nav.Addin.DateTimePicker.dll'),
        ClientAddIn.Category::"JavaScript Control Add-in",
        GetAssemblyDescription(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.DateTimePicker\Fps.Nav.Addin.DateTimePicker.dll'),
        APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.DateTimePicker\Fps.Nav.Addin.DateTimePicker.zip');
      InsertClientAddIn4PS(
        'Fps.Nav.Addin.DocumentViewer',
        GetPublicKeyToken(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.DocumentViewer\Fps.Nav.Addin.DocumentViewer.dll'),
        GetAssemblyVersion(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.DocumentViewer\Fps.Nav.Addin.DocumentViewer.dll'),
        ClientAddIn.Category::"JavaScript Control Add-in",
        GetAssemblyDescription(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.DocumentViewer\Fps.Nav.Addin.DocumentViewer.dll'),
        APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.DocumentViewer\Fps.Nav.Addin.DocumentViewer.zip');
      InsertClientAddIn4PS(
        'Fps.Nav.Addin.DropZone',
        GetPublicKeyToken(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.DropZone\Fps.Nav.Addin.DropZone.dll'),
        GetAssemblyVersion(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.DropZone\Fps.Nav.Addin.DropZone.dll'),
        ClientAddIn.Category::"JavaScript Control Add-in",
        GetAssemblyDescription(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.DropZone\Fps.Nav.Addin.DropZone.dll'),
        APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.DropZone\Fps.Nav.Addin.DropZone.zip');
      InsertClientAddIn4PS(
        'Fps.Nav.Addin.Scheduler',
        GetPublicKeyToken(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.Scheduler\Fps.Nav.Addin.Scheduler.dll'),
        GetAssemblyVersion(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.Scheduler\Fps.Nav.Addin.Scheduler.dll'),
        ClientAddIn.Category::"JavaScript Control Add-in",
        GetAssemblyDescription(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.Scheduler\Fps.Nav.Addin.Scheduler.dll'),
        APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.Scheduler\Fps.Nav.Addin.Scheduler.zip');
      InsertClientAddIn4PS(
        'Fps.Nav.Addin.UIComponents',
        GetPublicKeyToken(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.UIComponents\Fps.Nav.Addin.UIComponents.dll'),
        GetAssemblyVersion(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.UIComponents\Fps.Nav.Addin.UIComponents.dll'),
        ClientAddIn.Category::"JavaScript Control Add-in",
        GetAssemblyDescription(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.UIComponents\Fps.Nav.Addin.UIComponents.dll'),
        APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Addin.UIComponents\Fps.Nav.Addin.UIComponents.zip');
      InsertClientAddIn4PS(
        'Fps.Nav.Windows.Addin.DropZone',
        GetPublicKeyToken(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Windows.Addin.DropZone\Fps.Nav.Windows.Addin.DropZone.dll'),
        GetAssemblyVersion(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Windows.Addin.DropZone\Fps.Nav.Windows.Addin.DropZone.dll'),
        ClientAddIn.Category::"DotNet Control Add-in",
        GetAssemblyDescription(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Windows.Addin.DropZone\Fps.Nav.Windows.Addin.DropZone.dll'), '');
      InsertClientAddIn4PS(
        'Fps.Nav.Windows.Addin.LinkedInPictureViewer',
        GetPublicKeyToken(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Windows.Addin.LinkedInPictureViewer\Fps.Nav.Windows.Addin.LinkedInPictureViewer.dll'),
        GetAssemblyVersion(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Windows.Addin.LinkedInPictureViewer\Fps.Nav.Windows.Addin.LinkedInPictureViewer.dll'),
        ClientAddIn.Category::"DotNet Control Add-in",
        GetAssemblyDescription(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Windows.Addin.LinkedInPictureViewer\Fps.Nav.Windows.Addin.LinkedInPictureViewer.dll'), '');
      InsertClientAddIn4PS(
        'Fps.Nav.Windows.Addin.Bim.Addin',
        GetPublicKeyToken(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Windows.Addin.Bim\Fps.Nav.Windows.Addin.Bim.Addin.dll'),
        GetAssemblyVersion(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Windows.Addin.Bim\Fps.Nav.Windows.Addin.Bim.Addin.dll'),
        ClientAddIn.Category::"DotNet Control Add-in",
        GetAssemblyDescription(APPLICATIONPATH + 'Add-ins\NNC\Fps.Nav.Windows.Addin.Bim\Fps.Nav.Windows.Addin.Bim.Addin.dll'), '');
    END;

    LOCAL PROCEDURE InsertClientAddIn4PS@1100529200(ControlAddInName@1000 : Text[220];PublicKeyToken@1001 : Text[20];Version@1002 : Text[25];Category@1006 : Option;Description@1003 : Text[250];ResourceFilePath@1005 : Text[250]);
    VAR
      ClientAddIn@1004 : Record 2000000069;
      CompanyInitialize@1100529200 : Codeunit 2;
    BEGIN
      IF ClientAddIn.GET(ControlAddInName,PublicKeyToken,Version) THEN
        EXIT;

      ClientAddIn.SETRANGE("Add-in Name", ControlAddInName);
      IF ClientAddIn.FINDSET(TRUE) THEN
        REPEAT
          IF (ClientAddIn."Public Key Token" <> PublicKeyToken) OR (ClientAddIn.Version <> Version) THEN
            IF ClientAddIn.DELETE THEN;
        UNTIL ClientAddIn.NEXT = 0;
      ClientAddIn.RESET;

      CompanyInitialize.InsertClientAddIn(ControlAddInName,PublicKeyToken,Version,Category,Description,ResourceFilePath)
    END;

    LOCAL PROCEDURE GetAssemblyVersion@1100529201(Path@1100528700 : Text) : Text;
    VAR
      InstallationManagement@1100528701 : Codeunit 11012268;
    BEGIN
      EXIT(InstallationManagement.GetAssemblyVersion(Path));
    END;

    LOCAL PROCEDURE GetAssemblyDescription@1100528701(Path@1100528700 : Text) : Text;
    VAR
      InstallationManagement@1100528500 : Codeunit 11012268;
    BEGIN
      EXIT(InstallationManagement.GetAssemblyDescription(Path));
    END;

    LOCAL PROCEDURE GetPublicKeyToken@1100528703(Path@1100528700 : Text) : Text;
    VAR
      InstallationManagement@1100528500 : Codeunit 11012268;
    BEGIN
      EXIT(InstallationManagement.GetPublicKeyToken(Path));
    END;

    LOCAL PROCEDURE InsertAppFeatures@1100527800();
    VAR
      AppFeature@1100527800 : Record 11130030;
    BEGIN
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(AppFeature) THEN
        AppFeature.InitializeFeatures;
    END;

    LOCAL PROCEDURE InsertFsaAppFeatures@1100525006();
    VAR
      FieldServiceAppFeature@1000 : Record 11126697;
    BEGIN
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(FieldServiceAppFeature) THEN
        FieldServiceAppFeature.InitializeFeatures;
    END;

    LOCAL PROCEDURE InsertGenChecklistPossibleLinks@1100526007();
    VAR
      GenChecklistLinkMgt@1100526000 : Codeunit 11012688;
      GenChecklistPossibleLink@1100526001 : Record 11125906;
    BEGIN
      IF FPSLicenseManagement.LicenseAndReadPermissionForTable(GenChecklistPossibleLink) THEN
        GenChecklistLinkMgt.RUN;
    END;

    LOCAL PROCEDURE InitAndCheckPossibleWebServices@1100529207();
    VAR
      PossibleWebServiceMgt@1100525000 : Codeunit 11125354;
    BEGIN
      PossibleWebServiceMgt.RUN;
    END;

    LOCAL PROCEDURE UpdateDspPerCompany@1100528305();
    VAR
      DSPInitialize@1100528300 : Codeunit 11126718;
      InstallationManagement@1100528301 : Codeunit 11012268;
    BEGIN
      IF (InstallationManagement.LicensePermissionForCodeUnit(CODEUNIT::"DSP Initialize")) THEN BEGIN
        DSPInitialize.InitializeDatabase;
        DSPInitialize.InitializePerCompany;
      END;
    END;

    LOCAL PROCEDURE InitAndUpdateMailTemplate@1100528300(ConversionStatus@1100528300 : Integer);
    VAR
      MailTemplateDataMigration@1100528301 : Codeunit 11012635;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Mail Template", TypeOfLog, StartDateTime, NewCompany);

      MailTemplateDataMigration.RUN;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE MoveDocumentManagementFileshareSettings@1100525015(ConversionStatus@1100529200 : Integer);
    VAR
      DocumentMgtSetup@1100525000 : Record 11071831;
      FileSystemOnPremiseSetup@1100525001 : Record 11125739;
      DocumentServiceSetup4PS@1100525002 : Record 11071832;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"File System on Premise Setup", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF (DocumentMgtSetup.GET) THEN BEGIN
           FileSystemOnPremiseSetup.INIT;
           FileSystemOnPremiseSetup."Default Ext. Doc. Directory" := DocumentMgtSetup."Default Ext. Doc. Director OLD";
           FileSystemOnPremiseSetup."Default Source Dir.Ext.Doc" := DocumentMgtSetup."Default Source Dir.Ext.Doc OLD";
           FileSystemOnPremiseSetup."Dir. Document Parts"  := DocumentMgtSetup."Dir. Document Parts OLD";
           FileSystemOnPremiseSetup.INSERT;

          IF (DocumentServiceSetup4PS.GET) THEN BEGIN
            DocumentServiceSetup4PS."Default Ext. Doc. Subdir." := DocumentMgtSetup."Def. Doc. Srv. Ex. Doc. Su OLD";
            DocumentServiceSetup4PS.MODIFY;
          END;
          DocumentMgtSetup."Default Ext. Doc. Director OLD" := '';
          DocumentMgtSetup."Default Source Dir.Ext.Doc OLD" := '';
          DocumentMgtSetup."Dir. Document Parts OLD" := '';
          DocumentMgtSetup."Def. Doc. Srv. Ex. Doc. Su OLD" := '';
          DocumentMgtSetup."Modify Filen. to be Unique OLD" := FALSE;
          DocumentMgtSetup.MODIFY;
        END;

      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateServiceUnitPriceMainPriceBookCode@1100525016(ConversionStatus@1100529200 : Integer);
    VAR
      ServiceUnitPrice@1100525000 : Record 11071769;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Service Unit Price", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF ServiceUnitPrice.FINDSET THEN
          REPEAT
            ServiceUnitPrice.MODIFY(TRUE);
          UNTIL ServiceUnitPrice.NEXT = 0;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateStandardMailTemplates@1100528301();
    VAR
      MailTemplateManagement@1100528300 : Codeunit 11012622;
    BEGIN
      MailTemplateManagement.InitializeFunctionNames;
      MailTemplateManagement.InitializeMailTemplateNames;
    END;

    LOCAL PROCEDURE InitAppSetup@1100528705(ConversionStatus@1100529200 : Integer);
    VAR
      AppSetup@1100528700 : Record 11130033;
      FieldServiceAppSetup@1100528701 : Record 11126700;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"App Setup", TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF FPSLicenseManagement.LicenseAndReadPermissionForTable(FieldServiceAppSetup) THEN BEGIN
          IF FieldServiceAppSetup.GET THEN BEGIN
            IF NOT AppSetup.GET THEN
              AppSetup.INSERT;
            IF AppSetup."Max Photo Size In Mb" = 0 THEN
              AppSetup."Max Photo Size In Mb" := FieldServiceAppSetup."Max Photo Size in Mb OLD";
            IF AppSetup."Privacy Policy URL" = '' THEN
              AppSetup."Privacy Policy URL" := FieldServiceAppSetup."Privacy Policy URL OLD";
            AppSetup.MODIFY;
          END;
        END;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateHourPortalTemplates@1100527600(ConversionStatus@1100529200 : Integer);
    VAR
      HourPortalFieldsTemplate@1100527600 : Record 11012076;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(11012076, TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF HourPortalFieldsTemplate.FINDSET THEN
          REPEAT
            HourPortalFieldsTemplate.SetMandatoryFields;
          UNTIL HourPortalFieldsTemplate.NEXT = 0;
        END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE InsertFileStorageTypeSetup@1100528404(ConversionStatus@1100528700 : Integer);
    VAR
      FileStorageTypeSetup@1100528400 : Record 11128545;
      ActualFileStorageType@1100528401 : Integer;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"File Storage Type Setup", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN
        IF FileStorageTypeSetup.ISEMPTY THEN BEGIN
          FileStorageTypeSetup."File Storage Type" := FileStorageTypeSetup."File Storage Type"::"File System on Premise";
          FileStorageTypeSetup.INSERT;
          FileStorageTypeSetup."File Storage Type" := FileStorageTypeSetup."File Storage Type"::"SharePoint Online";
          FileStorageTypeSetup.INSERT;
          FileStorageTypeSetup."File Storage Type" := FileStorageTypeSetup."File Storage Type"::"Azure File Storage";
          FileStorageTypeSetup.INSERT;
          IF DocumentServiceIsUsed THEN
            ActualFileStorageType := FileStorageTypeSetup."File Storage Type"::"SharePoint Online"
          ELSE
            ActualFileStorageType := FileStorageTypeSetup."File Storage Type"::"File System on Premise";
          IF FileStorageTypeSetup.GET(ActualFileStorageType) THEN BEGIN
            FileStorageTypeSetup."Main Storage" := TRUE;
            FileStorageTypeSetup."Edit Storage" := TRUE;
            FileStorageTypeSetup.MODIFY;
          END;
        END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE DocumentServiceIsUsed@1100528407() : Boolean;
    VAR
      DocumentServiceSetup4PS@1100528401 : Record 11071832;
      DocumentGroup@1100528400 : Record 11012400;
    BEGIN
      IF NOT DocumentServiceSetup4PS.GET THEN
        EXIT(FALSE);

      IF (DocumentServiceSetup4PS."SharePoint Site URL" = '') OR
         (DocumentServiceSetup4PS."Document Library" = '') OR
         (DocumentServiceSetup4PS.Folder = '')
      THEN
        EXIT(FALSE);

      DocumentGroup.SETFILTER("Doc. Service Document Subdir.", '<>%1', '');
      IF DocumentGroup.ISEMPTY THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE UpdateDocumentTemplates@1100528403(ConversionStatus@1100528700 : Integer);
    VAR
      DocumentTemplate@1100528400 : Record 11012401;
      DocumentGroup@1100528401 : Record 11012400;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Document Template", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        DocumentTemplate.SETRANGE("Storage Type", 0);
        IF DocumentTemplate.FINDSET THEN
          REPEAT
            IF DocumentGroup.GET(DocumentTemplate."Document Group") THEN BEGIN
              IF DocumentGroup."Template Directory" <> '' THEN
                DocumentTemplate."Storage Type" := DocumentTemplate."Storage Type"::"File System on Premise"
              ELSE
                IF DocumentGroup."Doc. Service Template Subdir." <> '' THEN
                  DocumentTemplate."Storage Type" := DocumentTemplate."Storage Type"::"SharePoint Online";
              DocumentTemplate.MODIFY;
            END;
          UNTIL DocumentTemplate.NEXT = 0;
      END;

      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateDocumentProperties@1100528408(ConversionStatus@1100528700 : Integer);
    VAR
      DocumentProperties@1100528400 : Record 11012746;
      FileManagement@1100528402 : Codeunit 419;
      FullFileName@1100528401 : Text;
      DocumentPropertiesFileFoundInDatabase@1100528403 : Boolean;
      DocumentPropertiesFileFoundOnFileSystem@1100528404 : Boolean;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::"Document Properties", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        DocumentProperties.SETRANGE("Internal Company", COMPANYNAME);
        DocumentProperties.SETRANGE("Storage Type", 0);
        IF DocumentProperties.FINDSET THEN
          REPEAT
            CASE TRUE OF
              (DocumentProperties.File <> ''):
                BEGIN
                  DocumentPropertiesFileFoundInDatabase := TRUE;
                  FullFileName := GetFullFileNameOfDocumentProperties(DocumentProperties);
                  IF FileManagement.ClientFileExists(FullFileName) THEN BEGIN
                    DocumentPropertiesFileFoundOnFileSystem := TRUE;
                    IF STRLEN(FullFileName) <= MAXSTRLEN(DocumentProperties.File) THEN BEGIN
                      DocumentProperties."Storage Type" := DocumentProperties."Storage Type"::"File System on Premise";
                      DocumentProperties.File := FullFileName;
                    END;
                  END;
                END;
              (DocumentProperties."Document Service URL" <> ''):
                BEGIN
                  DocumentProperties."Storage Type" := DocumentProperties."Storage Type"::"SharePoint Online";
                END;
              (DocumentProperties."Web link" <> ''):
                CASE TRUE OF
                  DocumentProperties.IsDPTDUALDocument:
                    DocumentProperties."Storage Type" := DocumentProperties."Storage Type"::DPTDUAL;
                  DocumentProperties.IsPPTDocument:
                    DocumentProperties."Storage Type" := DocumentProperties."Storage Type"::PPT;
                  ELSE
                    DocumentProperties."Storage Type" := DocumentProperties."Storage Type"::CTB;
                END;
            END;
            DocumentProperties.MODIFY;
            COMMIT;
          UNTIL DocumentProperties.NEXT = 0;
      END;

      IF NOT DocumentPropertiesFileFoundInDatabase OR
         DocumentPropertiesFileFoundOnFileSystem
      THEN
        CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE GetFullFileNameOfDocumentProperties@1100528420(DocumentProperties@1100528400 : Record 11012746) : Text;
    VAR
      ExternalDocumentManagement@1100528401 : Codeunit 11012403;
      FileManagement@1100528402 : Codeunit 419;
      FullFileName@1100528403 : Text;
    BEGIN
      IF DocumentProperties."External Document" THEN
        EXIT(GetFolderOfExternalDocument(DocumentProperties) + DocumentProperties.File)
      ELSE BEGIN
        FullFileName := STRSUBSTNO('%1.%2', DocumentProperties.File, 'docx');
        IF FileManagement.ClientFileExists(FullFileName) THEN
          EXIT(FullFileName);
        FullFileName := STRSUBSTNO('%1.%2', DocumentProperties.File, 'docm');
        IF FileManagement.ClientFileExists(FullFileName) THEN
          EXIT(FullFileName);
        FullFileName := STRSUBSTNO('%1.%2', DocumentProperties.File, 'doc');
        IF FileManagement.ClientFileExists(FullFileName) THEN
          EXIT(FullFileName);
        FullFileName := STRSUBSTNO('%1.%2', DocumentProperties.File, 'pdf');
        IF FileManagement.ClientFileExists(FullFileName) THEN
          EXIT(FullFileName);
        FullFileName := DocumentProperties.File;
        EXIT(FullFileName);
      END;
    END;

    LOCAL PROCEDURE GetFolderOfExternalDocument@1100528425(DocumentProperties@1100528400 : Record 11012746) Folder : Text;
    VAR
      DocumentType@1100528401 : Record 11012405;
      FileSystemOnPremiseSetup@1100528402 : Record 11125739;
      DocumentMgtSetup@1100528403 : Record 11071831;
      FileManagement@1100528404 : Codeunit 419;
      StartingDateSubFolders@1100528407 : Date;
      CreationDate@1100528408 : Date;
      DateFolder@1100528405 : Text;
      UseDateSubfolders@1100528406 : Boolean;
    BEGIN
      IF NOT DocumentProperties."External Document" THEN
        EXIT;

      IF DocumentType.GET(DocumentProperties."Document Type") THEN
        IF DocumentType."Storage Directory Attachment" <> '' THEN
          Folder := DocumentType."Storage Directory Attachment";

      IF Folder = '' THEN
        IF FileSystemOnPremiseSetup.GET THEN
          IF FileSystemOnPremiseSetup."Default Ext. Doc. Directory" <> '' THEN
            Folder := FileSystemOnPremiseSetup."Default Ext. Doc. Directory";

      IF Folder = '' THEN
        IF DocumentMgtSetup.GET THEN
          IF DocumentMgtSetup."Default Ext. Doc. Director OLD" <> '' THEN
            Folder := DocumentMgtSetup."Default Ext. Doc. Director OLD";

      IF Folder <> '' THEN BEGIN
        FileManagement.AddBackSlashToDirectoryName(Folder);
        IF DocumentMgtSetup.GET THEN;
        UseDateSubfolders := DocumentMgtSetup."Use Date Subfolders";
        StartingDateSubFolders := DocumentMgtSetup."Starting Date Subfolders";
        CreationDate := DocumentProperties."Creation Date";
        IF CreationDate <> 0D THEN BEGIN
          DateFolder := STRSUBSTNO(
            '%1\%2\', DATE2DMY(CreationDate, 3), DATE2DMY(CreationDate, 2));
          IF (UseDateSubfolders AND (CreationDate >= StartingDateSubFolders)) THEN BEGIN
            IF FileManagement.ClientFileExists(Folder + DateFolder + DocumentProperties.File) OR
               NOT FileManagement.ClientFileExists(Folder + DocumentProperties.File)
            THEN
              Folder += DateFolder;
          END ELSE
            IF NOT FileManagement.ClientFileExists(Folder + DocumentProperties.File) THEN
              IF FileManagement.ClientFileExists(Folder + DateFolder + DocumentProperties.File) THEN
                Folder += DateFolder;
        END;
      END;
    END;

    LOCAL PROCEDURE "--- Upgrade Data Per Database Functions ---"@1100529404();
    BEGIN
    END;

    LOCAL PROCEDURE UpdateGLNforVendor@1100527700(ConversionStatus@1100529200 : Integer);
    VAR
      Vendor@1100528500 : Record 23;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      InstallationManagement.InitDataUpgradeLog(DATABASE::Vendor, TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        Vendor.SETFILTER("OLD GLN Code",'<>%1','');
        IF Vendor.FINDSET THEN
          REPEAT
            Vendor.GLN := COPYSTR(Vendor."OLD GLN Code", 1, 13);
            Vendor.MODIFY;
          UNTIL Vendor.NEXT = 0;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateCustomerAndVendorWebserviceURL@1100529901(ConversionStatus@1100529200 : Integer);
    VAR
      CustomerWebserviceURL@1100529900 : Record 11229341;
      VendorINSBOULogin@1100529901 : Record 11012132;
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      InstallationManagement.InitDataUpgradeLog(DATABASE::"Customer Webservice URL", TypeOfLog, StartDateTime, NewCompany);

      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        IF CustomerWebserviceURL.FINDSET THEN BEGIN
          REPEAT
            IF CustomerWebserviceURL.Type = CustomerWebserviceURL.Type::INVOIC THEN
              IF CustomerWebserviceURL."Version OLD" = '004' THEN
                CustomerWebserviceURL."Message Version" := CustomerWebserviceURL."Message Version"::"004"
              ELSE
                CustomerWebserviceURL."Message Version" := CustomerWebserviceURL."Message Version"::"003";
            IF CustomerWebserviceURL.Type = CustomerWebserviceURL.Type::MTNSTA THEN
              CustomerWebserviceURL."Message Version" := CustomerWebserviceURL."Message Version"::"005Beta";
            CustomerWebserviceURL.MODIFY;
          UNTIL CustomerWebserviceURL.NEXT = 0;
        END;
        IF VendorINSBOULogin.FINDSET THEN BEGIN
          REPEAT
            IF VendorINSBOULogin.Type = VendorINSBOULogin.Type::INVOIC THEN
              IF VendorINSBOULogin."Version OLD" = '004' THEN
                VendorINSBOULogin."Message Version" := VendorINSBOULogin."Message Version"::"004"
              ELSE
                VendorINSBOULogin."Message Version" := VendorINSBOULogin."Message Version"::"003";
            VendorINSBOULogin.MODIFY;
          UNTIL VendorINSBOULogin.NEXT = 0;
        END;
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateDataPerCompanyTableDummy@1100525009(ConversionStatus@1100529200 : Integer);
    BEGIN
      IF CompanyDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;
      //Activate line below and fill TableIDForLicenseCheck
      //InstallationManagement.InitDataUpgradeLog(TableIDForLicenseCheck, TypeOfLog, StartDateTime, NewCompany);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        //Write your ADU
      END;
      CompanyDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateDataPerDatabaseTableDummy@1100525002(ConversionStatus@1100529200 : Integer);
    BEGIN
      IF DatabaseDataUpgradeLog.LogExists(ConversionStatus) THEN
        EXIT;

      //Activate line below and fill TableIDForLicenseCheck
      //InstallationManagement.InitDataUpgradeLog(TableIDForLicenseCheck, TypeOfLog, StartDateTime, NewDatabase);
      IF TypeOfLog = TypeOfLog::Execute THEN BEGIN
        //Write your ADU
      END;
      DatabaseDataUpgradeLog.InsertLog(ConversionStatus, StartDateTime, TypeOfLog);
      COMMIT;
    END;

    LOCAL PROCEDURE "-"@1100529408();
    BEGIN
    END;

    PROCEDURE GetLastCompanyConversionStatus@1100529406() : Integer;
    VAR
      CompanyDataUpgradeLog@1100529400 : Record 11229360;
    BEGIN
      IF CompanyDataUpgradeLog.FINDLAST THEN
        EXIT(CompanyDataUpgradeLog."Entry No.");
    END;

    PROCEDURE GetLastDatabaseConversionStatus@1100529405() : Integer;
    VAR
      DatabaseDataUpgradeLog@1100529400 : Record 11229359;
    BEGIN
      IF DatabaseDataUpgradeLog.FINDLAST THEN
        EXIT(DatabaseDataUpgradeLog."Entry No.");
    END;

    BEGIN
    {
      Use these example functions (depending on Database or Company data conversion) to write
      your own data conversion:
        - UpdateDataPerCompanyTableDummy(ConversionStatus : Integer)
        - UpdateDataPerDatabaseTableDummy(ConversionStatus : Integer)
    }
    END.
  }
}

