OBJECT Codeunit 11012500 Buyers Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1210190010 : TextConst 'ENU=@1@@@@@@@@@@@@@@@@@@;NOR=@1@@@@@@@@@@@@@@@@@@;SVE=@1@@@@@@@@@@@@@@@@@@';
      Text002@1210190001 : TextConst 'ENU=''Project From'' may not be empty.;NOR=''Prosjekt fra'' kan ikke st† tom.;SVE=''Projekt fr†n'' f†r inte vara tomt.';
      Text003@1210190002 : TextConst 'ENU=''Project To'' may not be empty.;NOR=''Prosjekt til'' kan ikke st† tom.;SVE=''Projekt till'' f†r inte vara tomt.';
      Text004@1210190003 : TextConst 'ENU=''Plot To'' may not be empty.;NOR=''Tegning til'' kan ikke st† tom.;SVE=''Ritning till'' f†r inte l„mnas tomt.';
      Text005@1210190004 : TextConst 'ENU=''House Model to'' (%1) must be equal to the House Model (%2) of the Plot No. (%3 - %4).;NOR=Husmodell til'' (%1) m† v‘re like med husmodell (%2) for tegningnr (%3-%4).;SVE=''Husmodell till'' (%1) m†ste vara lika med husmodell (%2) f”r Ritningnr (%3-%4).';
      ProjSetupRec@1210190005 : Record 315;
      Text006@1210190006 : TextConst 'ENU=Option ''%1-%2-%3-%4''  is already present on the current quote (%5), line no. ''%6''. Do you want to add the option ?;NOR=Alternativ ''%1-%2-%3-%4'' finnes allerede p† det aktuelle tilbudet (%5), radnr ''%6''. Vil du legge til alternativet?;SVE=Alternativet ''%1-%2-%3-%4'' finns redan p† den aktuella offerten (%5), radnr ''%6''. Vill du l„gga till alternativet?';
      Text007@1210190007 : TextConst 'ENU=Option ''%1-%2-%3-%4''  is already present on another quote of the plot no., (f.i.) quote line no. ''%5-%6''. Do you want to add the option ?;NOR=Alternativ ''%1-%2-%3-%4'' finnes allerede p† et annet tilbud for tegningnr., f. eks. tilbudsradnr ''%5-%6''. Vil du legge til alternativet?;SVE=Alternativet ''%1-%2-%3-%4'' finns redan p† en annan offert f”r ritningsnumret, t.ex. offertradnr ''%5-%6''. Vill du l„gga till alternativet?';
      Text008@1210190008 : TextConst 'ENU=Option  #2##########;NOR=Alternativ  #2##########;SVE=Alternativ  #2##########';
      Text009@1100485000 : TextConst 'ENU=Option ''%1-%2-%3-%4'' without ''Quantities'' cannot be offered more than once.;NOR=Alternativ ''%1-%2-%3-%4'' uten ''Antall'' kan ikke tilbys mer enn ‚n gang.;SVE=Alternativet ''%1-%2-%3-%4'' utan ''Antal'' kan inte erbjudas mer „n en g†ng.';
      Text010@1100485001 : TextConst 'ENU=Option ''%1-%2-%3-%4''  is already present as option of the plot no., Do you want to add the option ?;NOR=Alternativ ''%1-%2-%3-%4'' finnes allerede som alternativ for tegningnummeret. Vil du legge til alternativet?;SVE=Alternativet ''%1-%2-%3-%4'' finns redan som alternativ f”r ritningsnumret. Vill du l„gga till alternativet?';
      Text011@1100485002 : TextConst 'ENU=Option ''%1-%2-%3-%4'' without ''Quantities'' already in ''Order''.;NOR=Alternativ ''%1-%2-%3-%4'' uten ''Antall'' finnes allerede i ''Ordre''.;SVE=Alternativet ''%1-%2-%3-%4'' utan ''Antal'' finns redan i ''Order''.';
      Text012@1100485003 : TextConst 'ENU=Do You want to recalculate the Plot Installment(s)?;NOR=Vil du rekalkulere tegningsavdraget(/ne)?;SVE=Vill du omber„kna Ritningsavbetalningen/-arna?';
      Text013@1100525000 : TextConst 'ENU=Project Element ''%1 - %2'' is niet present, %3  (project %4, plot %5, model %6, group/option %7) can not be copied.;NOR=Prosjektelementet ''%1 Í %2'' finnes ikke, %3 (prosjekt %4, tegning %5, modell %6, gruppe/alternativ %7) kan ikke kopieres.;SVE=Projektelementet ''%1 Í %2'' finns inte, %3 (projekt %4, ritning %5, modell %6, grupp/alternativ %7) kan inte kopieras.';
      Text014@1100528400 : TextConst 'ENU=%1 %2 already has lines. Copying not allowed.';
      Text015@1100528401 : TextConst 'ENU=Surcharge percentage between %1 and %2 cannot be calculated because more than %3 decimals are necessary.';

    PROCEDURE BmCalcSurchargesUpdateOption@3(IProjectNo@1210190014 : Code[20];IPlotNo@1210190012 : Code[10];IHouseModel@1210190010 : Code[20];IMainGroup@1210190008 : Code[20];IGroup@1210190006 : Code[20];ISubGroup@1210190004 : Code[20];IOption@1210190002 : Code[20];ICalledFromSurchRecBln@1210190009 : Boolean;VAR OOptionSurchRec@1210190007 : Record 11012512);
    VAR
      lvOptionSurchRec@1210190001 : Record 11012512;
      lvOptionRec@1210190003 : Record 11012502;
      lvBaseAmount@1210190005 : Decimal;
      lvSurchAmount@1210190000 : Decimal;
    BEGIN
      WITH lvOptionSurchRec DO BEGIN
        IF NOT lvOptionRec.GET(IProjectNo, IPlotNo, IHouseModel, IMainGroup, IGroup, ISubGroup, IOption) THEN
          EXIT;

        SETRANGE("Project No.", IProjectNo);
        SETRANGE("Plot No.", IPlotNo);
        SETRANGE("House Model", IHouseModel);
        SETRANGE("Main Group", IMainGroup);
        SETRANGE(Group, IGroup);
        SETRANGE("Sub Group", ISubGroup);
        SETRANGE(Option, IOption);
        IF FIND('-') THEN BEGIN
          ProjSetupRec.GET;
          CALCFIELDS("Budget Amount");
          lvBaseAmount := "Budget Amount";
          lvSurchAmount := 0;  //* Totaal toeslagen van vorige regels, maar met oorspr. toeslag (niet * -1 als basisbedrag neg.)
          REPEAT
            IF ("Fixed Amount") THEN BEGIN //kzwerver, 111013, sn, #28344
              //"Surcharge %" := ROUND((((lvSurchAmount + lvBaseAmount + "Surcharge Amount") /
              "Surcharge %" := 0; //kzwerver, 111127, c, #30951
              IF (lvBaseAmount <> 0) THEN
                "Surcharge %" := ROUND((((lvBaseAmount + "Surcharge Amount") /
                                       lvBaseAmount) * 100) - 100);
              //"Surcharge Amount" := OOptionSurchRec."Surcharge Amount";
            END ELSE //kzwerver, 111013, en, #28344
              "Surcharge Amount" := ROUND((lvBaseAmount + lvSurchAmount) * ("Surcharge %" / 100));
            lvSurchAmount := lvSurchAmount + "Surcharge Amount";  //Do not count the inverted surcharge amount!
            IF (lvBaseAmount < 0) AND ProjSetupRec."Invert neg. Ext. Option Surch." THEN
              "Surcharge Amount" := - "Surcharge Amount";
            VALIDATE("Surcharge Amount");
            MODIFY;
            IF ICalledFromSurchRecBln AND ("Line No." = OOptionSurchRec."Line No.") THEN BEGIN
              IF ("Fixed Amount") THEN //kzwerver, 111013, sn, #28344
                OOptionSurchRec."Surcharge %" := "Surcharge %"
              ELSE //kzwerver, 111013, en, #28344
                OOptionSurchRec."Surcharge Amount" := "Surcharge Amount";
            END;
          UNTIL NEXT = 0;
        END;

        BmCalculateSalesPrice(lvOptionRec);
        lvOptionRec."Modified by" := USERID;
        lvOptionRec."Last Date Modified" := TODAY;
        lvOptionRec.MODIFY;
      END;
    END;

    PROCEDURE BmCalculateSalesPrice@1210190002(VAR IOptionRec@1210190000 : Record 11012502);
    BEGIN
      WITH IOptionRec DO BEGIN
        CALCFIELDS("Unit Cost", Surcharges);
        "Net Price" := "Unit Cost" + Surcharges;
        "Net Amount" := Quantity * "Net Price";
        "Contract Amount - Net Amount" := "Contract Amount" - "Net Amount"; //Call 26393
        BmDetermineVAT(IOptionRec);
        BmDetermineSalesPrice(IOptionRec);
      END;
    END;

    PROCEDURE BmDetermineVAT@4(VAR IOptionRec@1210190000 : Record 11012502);
    BEGIN
      WITH IOptionRec DO BEGIN
        CALCFIELDS("VAT Percentage");
        "Computed VAT Amount" := ROUND("Net Price" * ("VAT Percentage" / 100));
        "Computed VAT Amount" := ROUND((100 - "Developers Discount Percentage") / 100 * "Computed VAT Amount");
      END;
    END;

    PROCEDURE BmDetermineVATOptQuote@1100525001(VAR IOptionQuoteRec@1210190000 : Record 11012514);
    BEGIN
      WITH IOptionQuoteRec DO BEGIN
        CALCFIELDS("VAT Percentage");
        "VAT Amount" := ROUND("Net Price" * ("VAT Percentage" / 100));
        "VAT Amount" := ROUND((100 - "Developers Discount Percentage") / 100 * "VAT Amount");
      END;
    END;

    PROCEDURE BmDetermineSalesPrice@6(VAR OptionRec@1210190000 : Record 11012502);
    BEGIN
      WITH OptionRec DO BEGIN
        "Computed Sales Price Incl. VAT" :=
          ROUND(((100 - "Developers Discount Percentage") / 100 * "Net Price") + "Computed VAT Amount");
        IF NOT "Fixed Sales Price" THEN BEGIN
          "Sales Price incl. VAT" := "Computed Sales Price Incl. VAT";
          "Sales Price incl. VAT (Buyer)" := ROUND("Sales Price incl. VAT" * BuyerFactor);
          "Sales Amount incl. VAT" := ROUND(Quantity * "Sales Price incl. VAT");
          BmCalculateVat(OptionRec);
          "Sales Price excl. VAT" := "Sales Price incl. VAT" - "VAT Amount";
          "Sales Price excl. VAT (Buyer)" := ROUND("Sales Price excl. VAT" * BuyerFactor);

          IF "Plot No." = '' THEN BEGIN
            "Contract Amount" := ROUND(Quantity * "Sales Price excl. VAT");
            "Offered Amount" := ROUND(Quantity * "Sales Price excl. VAT");
            "Contract Amount - Net Amount" := "Contract Amount" - "Net Amount";
          END ELSE BEGIN
            IF Status <> Status::Invoice THEN BEGIN
              "Contract Amount" := ROUND(Quantity * "Sales Price excl. VAT");
              "Offered Amount" := ROUND(Quantity * "Sales Price excl. VAT");
              "Contract Amount - Net Amount" := "Contract Amount" - "Net Amount";
            END;
          END;
        END;
      END;
    END;

    PROCEDURE BmDetermineSalesPriceOptQuote@1100525003(VAR OptionQuoteRec@1210190000 : Record 11012514);
    BEGIN
      WITH OptionQuoteRec DO BEGIN
        "Sales Price incl. VAT" :=
          ROUND(((100 - "Developers Discount Percentage") / 100 * "Net Price") + "VAT Amount");
        "Sales Price incl. VAT (Buyer)" := ROUND("Sales Price incl. VAT" * BuyerFactor);
        "Sales Amount incl. VAT" := ROUND(Quantity * "Sales Price incl. VAT");
        BmDetermineVATOptQuote(OptionQuoteRec);
        "Sales Price excl. VAT" := "Sales Price incl. VAT" - "VAT Amount";
        "Sales Price excl. VAT (Buyer)" := ROUND("Sales Price excl. VAT" * BuyerFactor);
      END;
    END;

    PROCEDURE BmCalculateVat@1210190003(VAR OptionRec@1210190000 : Record 11012502);
    BEGIN
      WITH OptionRec DO BEGIN
        CALCFIELDS("VAT Percentage");
        "VAT Amount" := ROUND("Sales Price incl. VAT" * "VAT Percentage" / (100 + "VAT Percentage"));
      END;
    END;

    PROCEDURE BmCalculateVatOptQuoteTMP@1100525000(VAR OptionQuoteRec@1210190000 : Record 11012514);
    BEGIN
      WITH OptionQuoteRec DO BEGIN
        CALCFIELDS("VAT Percentage");
        "VAT Amount" := ROUND("Sales Price incl. VAT" * "VAT Percentage" / (100 + "VAT Percentage"));
      END;
    END;

    PROCEDURE BmCopyStandardSurcharges@1210190004(IOptionRec@1210190000 : Record 11012502);
    VAR
      StandardSurchargeRec@1210190001 : Record 11012512;
      StandardSurcharge2Rec@1210190002 : Record 11012512;
    BEGIN
      WITH StandardSurchargeRec DO BEGIN
        SETRANGE("Project No.",'');
        SETRANGE("House Model",'');
        SETRANGE("Main Group",'');
        SETRANGE(Group,'');
        SETRANGE("Sub Group",'');
        SETRANGE("Plot No.",'');
        SETRANGE(Option,'');
        IF FIND('-') THEN BEGIN
          REPEAT
            StandardSurcharge2Rec.COPY(StandardSurchargeRec);
            StandardSurcharge2Rec."Project No." := IOptionRec."Project No.";
            StandardSurcharge2Rec."House Model" := IOptionRec."House Model";
            StandardSurcharge2Rec."Main Group" := IOptionRec."Main Group";
            StandardSurcharge2Rec.Group := IOptionRec.Group;
            StandardSurcharge2Rec."Sub Group" := IOptionRec."Sub Group";
            StandardSurcharge2Rec."Plot No."  := IOptionRec."Plot No.";
            StandardSurcharge2Rec.Option := IOptionRec.Option;
            StandardSurcharge2Rec.VALIDATE("Cost Type");
            StandardSurcharge2Rec.VALIDATE(Element);
            StandardSurcharge2Rec.INSERT;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE BmCopyOptions@1210190005(ILevelFrom@1210190025 : 'Standard,Project,Plot';ILevelTo@1210190026 : 'Standard,Project,Plot';IProjectFrom@1210190000 : Code[20];IProjectTo@1210190001 : Code[20];IPlotFilterFrom@1210190002 : Code[250];IPlotTo@1210190003 : Code[10];IHouseModelFilterFrom@1210190004 : Code[250];IHouseModelTo@1210190005 : Code[20];IMainGroupFilterFrom@1210190006 : Code[250];IMainGroupTo@1210190007 : Code[20];IGroupFilterFrom@1210190008 : Code[250];IGroupTo@1210190009 : Code[20];ISubGroupFilterFrom@1210190010 : Code[250];ISubGroupTo@1210190011 : Code[20];IOptionFilterFrom@1210190012 : Code[250];IOptionTo@1210190013 : Code[20];ICopyDocuments@1100527800 : Boolean);
    VAR
      lvOptionRec@1210190014 : Record 11012502;
      lvOptionRec2@1210190015 : Record 11012502;
      lvProjRec@1210190027 : Record 11072003;
      lvPlotRec@1210190028 : Record 11012500;
      lvPrincipalOptNoRec@1210190030 : Record 11012517;
      lvWindow@1210190029 : Dialog;
      lvNoOfLines@1210190016 : Integer;
      lvCounter@1210190017 : Integer;
      lvTempProjectTo@1210190024 : Code[20];
      lvTempPlotTo@1210190023 : Code[10];
      lvTempHouseModelTo@1210190022 : Code[20];
      lvTempMainGroupTo@1210190021 : Code[20];
      lvTempGroupTo@1210190020 : Code[20];
      lvTempSubGroupTo@1210190019 : Code[20];
      lvTempOptionTo@1210190018 : Code[20];
      DocumentManagement@1100527801 : Codeunit 11012406;
      FromRecordRef@1100527802 : RecordRef;
      ToRecordRef@1100527803 : RecordRef;
    BEGIN
      CASE ILevelFrom OF
        ILevelFrom::Standard:
          BEGIN
            IProjectFrom := '';
            IPlotFilterFrom := '';
          END;
        ILevelFrom::Project:
          BEGIN
            IF (IProjectFrom = '') THEN
              ERROR(Text002);
            IPlotFilterFrom := '';
          END;
        ILevelFrom::Plot:
          BEGIN
            IF (IProjectFrom = '') THEN
              ERROR(Text002);
          END;
        ELSE
          ERROR('');
      END;

      CASE ILevelTo OF
        ILevelTo::Standard:
          BEGIN
            IProjectTo := '';
            IPlotTo := '';
          END;
        ILevelTo::Project:
          BEGIN
            IF (IProjectTo = '') AND (ILevelFrom = ILevelFrom::Standard) THEN
              ERROR(Text003);
            IPlotTo := '';
          END;
        ILevelTo::Plot:
          BEGIN
            IF (IProjectTo = '') AND (ILevelFrom = ILevelFrom::Standard) THEN
              ERROR(Text003);
            IF (IPlotTo = '') AND (ILevelFrom <> ILevelFrom::Plot) THEN
              ERROR(Text004);
          END;
        ELSE
          ERROR('');
      END;

      //* Zet filter op 'Option' tabel (kopieren van)
      IF IProjectFrom <> '' THEN
        lvOptionRec.SETRANGE("Project No.", IProjectFrom)
      ELSE
        lvOptionRec.SETRANGE("Project No.", '');
      IF ILevelFrom <> ILevelFrom::Plot THEN
        lvOptionRec.SETRANGE("Plot No.", '')
      ELSE BEGIN
        IF IPlotFilterFrom <> '' THEN
          lvOptionRec.SETFILTER("Plot No.", IPlotFilterFrom);
      END;
      IF IHouseModelFilterFrom <> '' THEN
        lvOptionRec.SETFILTER("House Model", IHouseModelFilterFrom);
      IF IMainGroupFilterFrom <> '' THEN
        lvOptionRec.SETFILTER("Main Group", IMainGroupFilterFrom);
      IF IGroupFilterFrom <> '' THEN
        lvOptionRec.SETFILTER(Group, IGroupFilterFrom);
      IF ISubGroupFilterFrom <> '' THEN
        lvOptionRec.SETFILTER("Sub Group", ISubGroupFilterFrom);
      IF IOptionFilterFrom <> '' THEN
        lvOptionRec.SETFILTER(Option, IOptionFilterFrom);

      //* Doorlezen 'Option' tabel en kopieer opties met de daaraan gerelateerde gegevens: woningmodellen, groepen (3 soorten),
      //* teksten, optiebegroting en toeslagen.
      IF lvOptionRec.FINDSET(FALSE, FALSE) THEN BEGIN
        IF GUIALLOWED THEN BEGIN
          lvWindow.OPEN(Text000);
          lvWindow.UPDATE(1,0);
        END;
        lvNoOfLines := lvOptionRec.COUNT;
        REPEAT
          IF (ILevelTo <> ILevelFrom::Standard) THEN BEGIN
            IF IProjectTo = '' THEN
              lvTempProjectTo := lvOptionRec."Project No."
            ELSE
              lvTempProjectTo := IProjectTo;
            lvProjRec.GET(lvTempProjectTo);
            IF NOT lvProjRec."Maintenance And Renovation" THEN
              lvProjRec.TESTFIELD("Housebuilding Project", TRUE);
            lvProjRec.CheckProjectStatus(0);
          END;
          IF (ILevelTo = ILevelFrom::Plot) THEN BEGIN
            IF IPlotTo = '' THEN
              lvTempPlotTo := lvOptionRec."Plot No."
            ELSE
              lvTempPlotTo := IPlotTo;
            lvPlotRec.GET(lvTempProjectTo, lvTempPlotTo);
          END;
          IF IHouseModelTo = '' THEN
            lvTempHouseModelTo := lvOptionRec."House Model"
          ELSE
            lvTempHouseModelTo := IHouseModelTo;
          IF IMainGroupTo = '' THEN
            lvTempMainGroupTo := lvOptionRec."Main Group"
          ELSE
            lvTempMainGroupTo := IMainGroupTo;
          IF IGroupTo = '' THEN
            lvTempGroupTo := lvOptionRec.Group
          ELSE
            lvTempGroupTo := IGroupTo;
          IF ISubGroupTo = '' THEN
            lvTempSubGroupTo := lvOptionRec."Sub Group"
          ELSE
            lvTempSubGroupTo := ISubGroupTo;
          IF IOptionTo = '' THEN
            lvTempOptionTo := lvOptionRec.Option
          ELSE
            lvTempOptionTo := IOptionTo;

          IF NOT lvOptionRec2.GET(
            lvTempProjectTo, lvTempPlotTo, lvTempHouseModelTo,
            lvTempMainGroupTo, lvTempGroupTo, lvTempSubGroupTo, lvTempOptionTo)
          THEN BEGIN
            IF (ILevelTo = ILevelFrom::Plot) AND (lvPlotRec."House Model" <> lvTempHouseModelTo) THEN
              ERROR(Text005, lvTempHouseModelTo, lvPlotRec."House Model", lvPlotRec."Project No.", lvPlotRec."Plot No.");
            lvBmCheckCopyHouseModel(lvOptionRec, lvTempProjectTo, lvTempHouseModelTo);
            lvBmCheckCopyMainGroup(lvOptionRec, lvTempProjectTo, lvTempPlotTo, lvTempMainGroupTo);
            lvBmCheckCopyGroup(lvOptionRec, lvTempProjectTo, lvTempPlotTo, lvTempGroupTo);
            lvBmCheckCopySubGroup(lvOptionRec, lvTempProjectTo, lvTempPlotTo, lvTempSubGroupTo);

            lvOptionRec2.COPY(lvOptionRec);
            lvOptionRec2."Project No." := lvTempProjectTo;
            IF lvOptionRec2."Project No." <> '' THEN
              lvOptionRec2."Main Project No." := lvProjRec."Main Project"
            ELSE
              lvOptionRec2."Main Project No." := '';

            lvOptionRec2."Plot No." := lvTempPlotTo;

            IF lvTempPlotTo <> '' THEN
              lvOptionRec2.Principal := lvPlotRec."Principal Options"
            ELSE
              lvOptionRec2.Principal := '';

            lvOptionRec2."House Model" := lvTempHouseModelTo;
            lvOptionRec2."Main Group" := lvTempMainGroupTo;
            lvOptionRec2.Group := lvTempGroupTo;
            lvOptionRec2."Sub Group" := lvTempSubGroupTo;
            lvOptionRec2.Option := lvTempOptionTo;
            lvOptionRec2."Offering Date" := 0D;
            lvOptionRec2."Last Date Printed on Opt.List" := 0D;
            lvOptionRec2."Last Time Printed on Opt.List" := 0T;
            lvOptionRec2."Last Mod. Date Def.Option" := 0D;
            lvOptionRec2."Last Modification Time Option" := 0T;
            lvOptionRec2."(Re)Print Option List" := FALSE;
            lvOptionRec2."Expired was Order" := FALSE;
            lvOptionRec2."Budget Changed by Integration" := FALSE;
            lvOptionRec2."Transaction Date Out" := 0DT;
            lvOptionRec2."Transaction Date In" := 0DT;

            lvOptionRec2."Input by" := USERID;
            lvOptionRec2."Input Date" := TODAY;
            lvOptionRec2."Modified by" := '';
            lvOptionRec2."Last Date Modified" := 0D;
            lvOptionRec2."Version Date" := WORKDATE;
            lvOptionRec2.Status := 0;
            lvOptionRec2."Order Date" := 0D;
            lvOptionRec2."Contract Date" := 0D;
            lvOptionRec2."Installments Generated" := FALSE;
            lvOptionRec2."Generation Date" := 0D;
            lvOptionRec2.CheckUpdateOptionCrossList(lvOptionRec2);

            IF NOT lvOptionRec2.Quantities THEN BEGIN
              lvOptionRec2.Quantity := 1;
              lvOptionRec2.DetermineTotal(FALSE);
            END;
            IF (ILevelFrom = ILevelFrom::Standard) AND ((ILevelTo = ILevelTo::Project) OR (ILevelTo = ILevelTo::Plot)) THEN BEGIN
              lvOptionRec2."Option No. External" := '';
              //* Fill if 'Option From' has an extern option no. for the principal of the project
              IF lvPrincipalOptNoRec.GET(
                lvOptionRec."House Model", lvOptionRec."Main Group", lvOptionRec.Group,
                lvOptionRec."Sub Group", lvOptionRec.Option, lvProjRec."Bill-to Customer No.")
              THEN
                lvOptionRec2."Option No. External" := lvPrincipalOptNoRec."Option No. External";
            END;
            lvOptionRec2.INSERT;

            lvBmCopyText(
              4, lvOptionRec, lvTempProjectTo, lvTempPlotTo, lvTempHouseModelTo,
              lvTempMainGroupTo, lvTempGroupTo, lvTempSubGroupTo, lvTempOptionTo);
            BmCopyOptionBudget(
              lvOptionRec, lvTempProjectTo, lvTempPlotTo, lvTempHouseModelTo,
              lvTempMainGroupTo, lvTempGroupTo, lvTempSubGroupTo, lvTempOptionTo);
            BmCopyOptionSummarySheet(
              lvOptionRec, lvTempProjectTo, lvTempPlotTo, lvTempHouseModelTo,
              lvTempMainGroupTo, lvTempGroupTo, lvTempSubGroupTo, lvTempOptionTo);
            BmCopyOptionSurcharges(
              lvOptionRec, lvTempProjectTo, lvTempPlotTo, lvTempHouseModelTo,
              lvTempMainGroupTo, lvTempGroupTo, lvTempSubGroupTo, lvTempOptionTo);

            IF (ICopyDocuments) THEN BEGIN
              FromRecordRef.GET(lvOptionRec.RECORDID);
              ToRecordRef.GET(lvOptionRec2.RECORDID);

              IF (IProjectFrom <> IProjectTo) OR ((IProjectFrom = '') AND (IProjectTo = '')) THEN
                DocumentManagement.CopyDocumentsByRecordRef(FromRecordRef,ToRecordRef)
              ELSE
                DocumentManagement.CopyDocumentLinksByRecordRef(FromRecordRef,ToRecordRef);
            END;

          END;
          lvCounter := lvCounter + 1;
          IF GUIALLOWED THEN
            lvWindow.UPDATE(1,ROUND(lvCounter / lvNoOfLines * 10000,1));
        UNTIL lvOptionRec.NEXT = 0;
        IF GUIALLOWED THEN
          lvWindow.CLOSE;
      END;
    END;

    LOCAL PROCEDURE lvBmCheckCopyHouseModel@1210190006(IOptionFromRec@1210190000 : Record 11012502;IProjectTo@1210190006 : Code[20];IHouseModelTo@1210190004 : Code[20]);
    VAR
      lvHouseModelRec@1210190008 : Record 11012501;
      lvHouseModelRec2@1210190009 : Record 11012501;
    BEGIN
      WITH lvHouseModelRec DO BEGIN
        IF NOT GET(IProjectTo, IHouseModelTo) THEN BEGIN
          IF GET(IOptionFromRec."Project No.", IOptionFromRec."House Model") THEN BEGIN
            lvHouseModelRec2.COPY(lvHouseModelRec);
            lvHouseModelRec2.VALIDATE("Project No.",IProjectTo);
            lvHouseModelRec2.Model := IHouseModelTo;
            lvHouseModelRec2.INSERT;
            lvBmCopyText(0, IOptionFromRec, IProjectTo, '', IHouseModelTo, '', '', '', '');
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE lvBmCheckCopyMainGroup@1210190035(IOptionFromRec@1210190000 : Record 11012502;IProjectTo@1210190004 : Code[20];IPlotTo@1100528200 : Code[10];IMainGroupTo@1210190003 : Code[20]);
    VAR
      lvMainGroupRec@1210190002 : Record 11012509;
      lvMainGroupRec2@1210190001 : Record 11012509;
    BEGIN
      WITH lvMainGroupRec DO BEGIN
        IF NOT GET(IProjectTo, IPlotTo, IMainGroupTo) THEN BEGIN
          GET(IOptionFromRec."Project No.", IOptionFromRec."Plot No.", IOptionFromRec."Main Group");
          lvMainGroupRec2.COPY(lvMainGroupRec);
          lvMainGroupRec2."Project No." := IProjectTo;
          lvMainGroupRec2."Plot No." := IPlotTo;
          lvMainGroupRec2.Code := IMainGroupTo;
          lvMainGroupRec2.INSERT;
          lvBmCopyText(1, IOptionFromRec, IProjectTo, IPlotTo, '', IMainGroupTo, '', '', '');
        END;
      END;
    END;

    LOCAL PROCEDURE lvBmCheckCopyGroup@1210190036(IOptionFromRec@1210190002 : Record 11012502;IProjectTo@1210190001 : Code[20];IPlotTo@1100528200 : Code[10];IGroupTo@1210190000 : Code[20]);
    VAR
      lvGroupRec@1210190004 : Record 11012504;
      lvGroupRec2@1210190003 : Record 11012504;
    BEGIN
      WITH lvGroupRec DO BEGIN
        IF NOT GET(IProjectTo, IPlotTo, IGroupTo) THEN BEGIN
          GET(IOptionFromRec."Project No.", IOptionFromRec."Plot No.", IOptionFromRec.Group);
          lvGroupRec2.COPY(lvGroupRec);
          lvGroupRec2."Project No." := IProjectTo;
          lvGroupRec2."Plot No." := IPlotTo;
          lvGroupRec2.Code := IGroupTo;
          lvGroupRec2.INSERT;
          lvBmCopyText(2, IOptionFromRec, IProjectTo, IPlotTo, '', '', IGroupTo,'','');
        END;
      END;
    END;

    LOCAL PROCEDURE lvBmCheckCopySubGroup@1210190037(IOptionFromRec@1210190002 : Record 11012502;IProjectTo@1210190001 : Code[20];IPlotTo@1100528200 : Code[10];ISubGroupTo@1210190000 : Code[20]);
    VAR
      lvSubGroupRec@1210190004 : Record 11012505;
      lvSubGroupRec2@1210190003 : Record 11012505;
    BEGIN
      WITH lvSubGroupRec DO BEGIN
        IF NOT GET(IProjectTo, IPlotTo, ISubGroupTo) THEN BEGIN
          GET(IOptionFromRec."Project No.", IOptionFromRec."Plot No.", IOptionFromRec."Sub Group");
          lvSubGroupRec2.COPY(lvSubGroupRec);
          lvSubGroupRec2."Project No." := IProjectTo;
          lvSubGroupRec2."Plot No." := IPlotTo;
          lvSubGroupRec2.Code := ISubGroupTo;
          lvSubGroupRec2.INSERT;
          lvBmCopyText(3, IOptionFromRec, IProjectTo, IPlotTo, '', '', '', ISubGroupTo, '');
        END;
      END;
    END;

    PROCEDURE BmCopyOptionBudget@1210190019(IOptionFromRec@1210190000 : Record 11012502;IProjectTo@1210190007 : Code[20];IPlotTo@1210190006 : Code[10];IHouseModelTo@1210190005 : Code[20];IMainGroupTo@1210190004 : Code[20];IGroupTo@1210190003 : Code[20];ISubGroupTo@1210190002 : Code[20];IOptionTo@1210190001 : Code[20]);
    VAR
      lvOptionBudgetRec@1210190008 : Record 11012503;
      lvOptionBudgetRec2@1210190009 : Record 11012503;
    BEGIN
      WITH lvOptionBudgetRec DO BEGIN
        SETRANGE("Project No.", IOptionFromRec."Project No.");
        SETRANGE("House Model", IOptionFromRec."House Model");
        SETRANGE("Plot No.", IOptionFromRec."Plot No.");
        SETRANGE("Main Group", IOptionFromRec."Main Group");
        SETRANGE(Group, IOptionFromRec.Group);
        SETRANGE("Sub Group", IOptionFromRec."Sub Group");
        SETRANGE(Option, IOptionFromRec.Option);
        IF FINDSET THEN BEGIN
          REPEAT
            lvOptionBudgetRec2.COPY(lvOptionBudgetRec);
            lvOptionBudgetRec2."Project No." := IProjectTo;
            lvOptionBudgetRec2."Plot No." := IPlotTo;
            lvOptionBudgetRec2."House Model" := IHouseModelTo;
            lvOptionBudgetRec2."Main Group" := IMainGroupTo;
            lvOptionBudgetRec2.Group := IGroupTo;
            lvOptionBudgetRec2."Sub Group" := ISubGroupTo;
            lvOptionBudgetRec2.Option := IOptionTo;
      //      lvOptionBudgetRec2."Budget Line No." := 0;  veld is vervallen
            CheckProjectElement(lvOptionBudgetRec2."Project No.", lvOptionBudgetRec2.Element,
              TABLECAPTION, "Project No.", "Plot No.", "House Model", "Main Group", Group, "Sub Group", Option); //*C-019091.n
            IF lvOptionBudgetRec2.FIND THEN BEGIN
              lvOptionBudgetRec2.TRANSFERFIELDS(lvOptionBudgetRec, FALSE);
              lvOptionBudgetRec2.MODIFY;
            END ELSE
              lvOptionBudgetRec2.INSERT;
            //**Gebruik hier GEEN INSERT(TRUE) ivm automatisch toevoegen staartblad in nieuwe begroting
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE BmCopyOptionSummarySheet@1210190001(IOptionFromRec@1210190000 : Record 11012502;IProjectTo@1210190007 : Code[20];IPlotTo@1210190006 : Code[10];IHouseModelTo@1210190005 : Code[20];IMainGroupTo@1210190004 : Code[20];IGroupTo@1210190003 : Code[20];ISubGroupTo@1210190002 : Code[20];IOptionTo@1210190001 : Code[20]);
    VAR
      lvSummarySheetRec@1210190008 : Record 11012064;
      lvSummarySheetRec2@1210190009 : Record 11012064;
    BEGIN
      WITH lvSummarySheetRec DO BEGIN
        SETRANGE("Project No.", IOptionFromRec."Project No.");
        SETRANGE("Contract No.", '');
        SETRANGE("Plot No.", IOptionFromRec."Plot No.");
        SETRANGE("House Model", IOptionFromRec."House Model");
        SETRANGE("Main Group", IOptionFromRec."Main Group");
        SETRANGE(Group, IOptionFromRec.Group);
        SETRANGE("Sub Group", IOptionFromRec."Sub Group");
        SETRANGE(Option, IOptionFromRec.Option);
        IF FIND('-') THEN BEGIN
          REPEAT
            lvSummarySheetRec2.COPY(lvSummarySheetRec);
            lvSummarySheetRec2."Project No." := IProjectTo;
            lvSummarySheetRec2."Plot No." := IPlotTo;
            lvSummarySheetRec2."House Model" := IHouseModelTo;
            lvSummarySheetRec2."Main Group" := IMainGroupTo;
            lvSummarySheetRec2.Group := IGroupTo;
            lvSummarySheetRec2."Sub Group" := ISubGroupTo;
            lvSummarySheetRec2.Option := IOptionTo;
            CheckProjectElement(lvSummarySheetRec2."Project No.", lvSummarySheetRec2.Element,
              TABLECAPTION, "Project No.", "Plot No.", "House Model", "Main Group", Group, "Sub Group", Option); //*C-019091.n
            lvSummarySheetRec2.INSERT;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE BmCopyOptionSurcharges@1210190020(IOptionFromRec@1210190007 : Record 11012502;IProjectTo@1210190006 : Code[20];IPlotTo@1210190005 : Code[10];IHouseModelTo@1210190004 : Code[20];IMainGroupTo@1210190003 : Code[20];IGroupTo@1210190002 : Code[20];ISubGroupTo@1210190001 : Code[20];IOptionTo@1210190000 : Code[20]);
    VAR
      lvSurchRec@1210190008 : Record 11012512;
      lvSurchRec2@1210190009 : Record 11012512;
      lvInserted@1210190010 : Boolean;
    BEGIN
      WITH lvSurchRec DO BEGIN
        SETRANGE("Project No.", IOptionFromRec."Project No.");
        SETRANGE("House Model", IOptionFromRec."House Model");
        SETRANGE("Plot No.", IOptionFromRec."Plot No.");
        SETRANGE("Main Group", IOptionFromRec."Main Group");
        SETRANGE(Group, IOptionFromRec.Group);
        SETRANGE("Sub Group", IOptionFromRec."Sub Group");
        SETRANGE(Option, IOptionFromRec.Option);
        IF FIND('-') THEN BEGIN
          REPEAT
            lvSurchRec2.COPY(lvSurchRec);
            lvSurchRec2."Project No." := IProjectTo;
            lvSurchRec2."Plot No." := IPlotTo;
            lvSurchRec2."House Model" := IHouseModelTo;
            lvSurchRec2."Main Group" := IMainGroupTo;
            lvSurchRec2.Group := IGroupTo;
            lvSurchRec2."Sub Group" := ISubGroupTo;
            lvSurchRec2.Option := IOptionTo;
            lvSurchRec2.VALIDATE("Cost Type");
            lvSurchRec2.VALIDATE(Element);
            lvSurchRec2.INSERT;
            lvInserted := TRUE;
          UNTIL NEXT = 0;
        END;
      END;

      WITH lvSurchRec2 DO BEGIN
        IF lvInserted THEN BEGIN
          BmCalcSurchargesUpdateOption(
            "Project No.", "Plot No.", "House Model", "Main Group",
            Group, "Sub Group", Option, FALSE, lvSurchRec2);
        END;
      END;
    END;

    LOCAL PROCEDURE lvBmCopyText@1210190063(ITableOpt@1210190000 : 'House Type,Option Main Group,Option Group,Option Sub Group,Option';IOptionFromRec@1210190008 : Record 11012502;IProjectTo@1210190007 : Code[20];IPlotTo@1210190006 : Code[10];IHouseModelTo@1210190005 : Code[20];IMainGroupTo@1210190004 : Code[20];IGroupTo@1210190003 : Code[20];ISubGroupTo@1210190002 : Code[20];IOptionTo@1210190001 : Code[20]);
    VAR
      lvBuyerMgtTextRec@1210190009 : Record 11012511;
      lvBuyerMgtTextRec2@1210190010 : Record 11012511;
    BEGIN
      WITH lvBuyerMgtTextRec DO BEGIN
        SETRANGE(Table, ITableOpt);
        IF IOptionFromRec."Project No." <> '' THEN
          SETRANGE("Project No.", IOptionFromRec."Project No.")
        ELSE
          SETRANGE("Project No.", '');

        CASE ITableOpt OF
          ITableOpt::"House Type":
            SETRANGE("House Model", IOptionFromRec."House Model");
          ITableOpt::"Option Main Group":
            SETRANGE("Option Main Group", IOptionFromRec."Main Group");
          ITableOpt::"Option Group":
            SETRANGE("Option Group", IOptionFromRec.Group);
          ITableOpt::"Option Sub Group":
            SETRANGE("Option Sub Group", IOptionFromRec."Sub Group");
          ITableOpt::Option:
            BEGIN
              SETRANGE("House Model", IOptionFromRec."House Model");
              SETRANGE("Option Main Group", IOptionFromRec."Main Group");
              SETRANGE("Option Group", IOptionFromRec.Group);
              SETRANGE("Option Sub Group", IOptionFromRec."Sub Group");
              SETRANGE(Option, IOptionFromRec.Option);
              IF IOptionFromRec."Plot No." <> '' THEN
                SETRANGE("Plot No.", IOptionFromRec."Plot No.")
              ELSE
                SETRANGE("Plot No.", '');
            END;
        END;
        IF FIND('-') THEN BEGIN
          REPEAT
            lvBuyerMgtTextRec2.COPY(lvBuyerMgtTextRec);
            lvBuyerMgtTextRec2."Project No." := IProjectTo;
            lvBuyerMgtTextRec2."Plot No." := IPlotTo;
            lvBuyerMgtTextRec2."House Model" := IHouseModelTo;
            lvBuyerMgtTextRec2."Option Main Group" := IMainGroupTo;
            lvBuyerMgtTextRec2."Option Group" := IGroupTo;
            lvBuyerMgtTextRec2."Option Sub Group" := ISubGroupTo;
            lvBuyerMgtTextRec2.Option := IOptionTo;
            lvBuyerMgtTextRec2.INSERT;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE BmCheckOptionOnQuote@1210190012(IProjectTo@1210190004 : Code[20];IPlotTo@1210190006 : Code[10];IHouseModelTo@1210190005 : Code[20];IQuoteTo@1210190000 : Code[20];IOptionFromRec@1210190001 : Record 11012502;ICurrLineNo@1210190003 : Integer) : Boolean;
    VAR
      lvQuoteLinesRec@1210190002 : Record 11012514;
      lvOptionRec@1100485000 : Record 11012502;
    BEGIN
      WITH lvQuoteLinesRec DO BEGIN
        IF (IProjectTo <> '') AND (IPlotTo <> '') THEN BEGIN
          lvOptionRec.SETRANGE("Project No.", IProjectTo);
          lvOptionRec.SETRANGE("Plot No.", IPlotTo);
          lvOptionRec.SETRANGE("House Model", IHouseModelTo);
          lvOptionRec.SETRANGE("Main Group", IOptionFromRec."Main Group");
          lvOptionRec.SETRANGE(Group, IOptionFromRec.Group);
          lvOptionRec.SETRANGE("Sub Group", IOptionFromRec."Sub Group");
          lvOptionRec.SETRANGE(Option, IOptionFromRec.Option);
          lvOptionRec.SETRANGE(Status,lvOptionRec.Status::Order);
          IF lvOptionRec.FINDFIRST THEN BEGIN
            IF NOT lvOptionRec.Quantities THEN BEGIN
              MESSAGE(Text011, lvOptionRec."Main Group", lvOptionRec.Group, lvOptionRec."Sub Group", lvOptionRec.Option);
              EXIT(FALSE);
            END ELSE BEGIN
              IF NOT CONFIRM(Text010, FALSE,
               lvOptionRec."Main Group", lvOptionRec.Group, lvOptionRec."Sub Group", lvOptionRec.Option)
              THEN
                EXIT(FALSE);
            END;
          END;
        END;

        SETCURRENTKEY("Project No.", "Plot No.", "House Model", "Main Group", Group, "Sub Group", Option);
        SETRANGE("Project No.", IProjectTo);
        SETRANGE("Plot No.", IPlotTo);
        SETRANGE("House Model", IHouseModelTo);
        SETRANGE("Main Group", IOptionFromRec."Main Group");
        SETRANGE(Group, IOptionFromRec.Group);
        SETRANGE("Sub Group", IOptionFromRec."Sub Group");
        SETRANGE(Option, IOptionFromRec.Option);
        SETRANGE("Option Quote No.", IQuoteTo);
        IF ICurrLineNo >= 0 THEN
          SETFILTER("Line No.", '<>%1', ICurrLineNo);

        IF FIND('-') THEN BEGIN
          IF NOT CONFIRM(Text006, FALSE, "Main Group", Group, "Sub Group", Option, "Option Quote No.", "Line No.") THEN
            EXIT(FALSE);
        END ELSE BEGIN
          SETRANGE("Line No.");
          SETFILTER("Option Quote No.", '<>%1', IQuoteTo);
          SETFILTER(Status, '<>%1&<>%2', Status::Invoice, Status::Order);
          IF FIND('-') THEN BEGIN
            IF NOT lvQuoteLinesRec.Quantities THEN BEGIN
              MESSAGE(Text009, "Main Group", Group, "Sub Group", Option);
              EXIT(FALSE);
            END ELSE
              IF NOT CONFIRM(Text007, FALSE, "Main Group", Group, "Sub Group", Option, "Option Quote No.", "Line No.") THEN
                EXIT(FALSE);
          END;
        END;

        EXIT(TRUE);
      END;
    END;

    PROCEDURE BmCopyOptionsToQuote@1210190007(IProjectTo@1210190004 : Code[20];IPlotTo@1210190006 : Code[10];IHouseModelTo@1210190005 : Code[20];IQuoteTo@1210190000 : Code[20];IOptionFromRec@1210190001 : Record 11012502);
    VAR
      lvQuoteLinesRec@1210190002 : Record 11012514;
      lvBuyerMgtTextRec@1210190008 : Record 11012511;
      lvBuyerMgtTextRec2@1210190007 : Record 11012511;
      lvNextLineNo@1210190003 : Integer;
    BEGIN
      WITH lvQuoteLinesRec DO BEGIN
        SETRANGE("Option Quote No.", IQuoteTo);
        IF FIND('+') THEN
          lvNextLineNo := "Line No." + 10000
        ELSE
          lvNextLineNo := 10000;

        INIT;
        "Option Quote No." := IQuoteTo;
        "Line No." := lvNextLineNo;
        INSERT;

        "Project No." := IProjectTo;
        "Plot No." := IPlotTo;
        "House Model" := IHouseModelTo;
        "Main Group" := IOptionFromRec."Main Group";
        Group :=IOptionFromRec.Group;
        "Sub Group" := IOptionFromRec."Sub Group";
        Option := IOptionFromRec.Option;
        Description := IOptionFromRec.Description;
        VALIDATE(Quantity, IOptionFromRec.Quantity);
        "Net Price" := IOptionFromRec."Net Price";
        "VAT Prod. Posting Group" := IOptionFromRec."VAT Prod. Posting Group";
        "VAT Bus. Posting Group" := IOptionFromRec."VAT Bus. Posting Group";
        "Developers Discount Percentage" := IOptionFromRec."Developers Discount Percentage";
        "Contractor Surcharge %" := IOptionFromRec."Contractor Surcharge %";
        "Sales Price incl. VAT (Buyer)" := IOptionFromRec."Sales Price incl. VAT (Buyer)";
        "Sales Price excl. VAT (Buyer)" := IOptionFromRec."Sales Price excl. VAT (Buyer)";
        VALIDATE("Sales Price incl. VAT", IOptionFromRec."Sales Price incl. VAT");
        lvQuoteLinesRec.Quantities := IOptionFromRec.Quantities;
        "Unit of Measure Code" := IOptionFromRec."Unit of Measure Code";
        "Generate Installments" := IOptionFromRec."Generate Installments";
        "Installment Scheme" := IOptionFromRec."Installment Scheme";
        "Fixed Sales Price" := IOptionFromRec."Fixed Sales Price";
        "House Model from Option" := IOptionFromRec."House Model";
        MODIFY;

        lvBuyerMgtTextRec.SETRANGE(Table, lvBuyerMgtTextRec.Table::Option);
        lvBuyerMgtTextRec.SETRANGE("Project No.", IOptionFromRec."Project No.");
        lvBuyerMgtTextRec.SETRANGE("House Model", IOptionFromRec."House Model");
        lvBuyerMgtTextRec.SETRANGE("Option Main Group", IOptionFromRec."Main Group");
        lvBuyerMgtTextRec.SETRANGE("Option Sub Group", IOptionFromRec."Sub Group");
        lvBuyerMgtTextRec.SETRANGE("Option Group", IOptionFromRec.Group);
        lvBuyerMgtTextRec.SETRANGE("Plot No.", IOptionFromRec."Plot No.");
        lvBuyerMgtTextRec.SETRANGE(Option, IOptionFromRec.Option);
        IF lvBuyerMgtTextRec.FIND('-') THEN BEGIN
          REPEAT
            lvBuyerMgtTextRec2.INIT;
            lvBuyerMgtTextRec2.Table := lvBuyerMgtTextRec.Table::"Option Quote Line";
            lvBuyerMgtTextRec2."Text Type" := lvBuyerMgtTextRec."Text Type";
            lvBuyerMgtTextRec2."Project No." := '';
            lvBuyerMgtTextRec2."House Model" := '';
            lvBuyerMgtTextRec2."Option Main Group" := '';
            lvBuyerMgtTextRec2."Option Sub Group" := '';
            lvBuyerMgtTextRec2."Option Group" := '';
            lvBuyerMgtTextRec2."Plot No." := '';
            lvBuyerMgtTextRec2.Option := '';
            lvBuyerMgtTextRec2."Quote No." := IQuoteTo;
            lvBuyerMgtTextRec2."Quote Line No." := "Line No.";
            lvBuyerMgtTextRec2."Text Line No." := lvBuyerMgtTextRec."Text Line No.";
            lvBuyerMgtTextRec2.Text := lvBuyerMgtTextRec.Text;
            lvBuyerMgtTextRec2.INSERT;
          UNTIL lvBuyerMgtTextRec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE BmCalcQuoteLineTotal@1210190008(VAR QuoteLineRec@1210190000 : Record 11012514);
    BEGIN
      WITH QuoteLineRec DO BEGIN
        CALCFIELDS("VAT Percentage");
        "VAT Amount" := ROUND("Sales Price incl. VAT" * "VAT Percentage" / (100 + "VAT Percentage"));
        "Sales Price excl. VAT" := "Sales Price incl. VAT" - "VAT Amount";
        IF "Developers Discount Percentage" = 100 THEN BEGIN
          "Sales Price incl. VAT (Buyer)" := 0;
          "Sales Price excl. VAT (Buyer)" := 0;
        END ELSE BEGIN
          "Sales Price incl. VAT (Buyer)" := ROUND("Sales Price incl. VAT" * BuyerFactor);
          "Sales Price excl. VAT (Buyer)" := ROUND("Sales Price excl. VAT" * BuyerFactor);
        END;

        "Sales Amount excl. VAT" := ROUND("Sales Price excl. VAT" * Quantity);
        "Sales Amount incl. VAT" := ROUND("Sales Price incl. VAT" * Quantity);
        IF MODIFY THEN;
        CALCFIELDS("Quote Amount incl. VAT", "Quote Amount excl. VAT");
      END;
    END;

    PROCEDURE BmCopyQuoteLineTextToOption@1210190009(IOptQuoteFrom@1210190000 : Code[20];IOptQuoteLineFrom@1210190008 : Integer;IProjectTo@1210190007 : Code[20];IPlotTo@1210190006 : Code[10];IHouseModelTo@1210190005 : Code[20];IMainGroupTo@1210190004 : Code[20];IGroupTo@1210190003 : Code[20];ISubGroupTo@1210190002 : Code[20];IOptionTo@1210190001 : Code[20]);
    VAR
      lvBuyerMgtTextRec@1210190009 : Record 11012511;
      lvBuyerMgtTextRec2@1210190010 : Record 11012511;
      lvI@1210190013 : Integer;
    BEGIN
      WITH lvBuyerMgtTextRec DO BEGIN
        SETRANGE(Table, Table::"Option Quote Line");
        SETRANGE("Text Type", "Text Type"::Sales);
        SETRANGE("Quote No.", IOptQuoteFrom);
        SETRANGE("Quote Line No.", IOptQuoteLineFrom);
        FOR lvI := 1 TO 3 DO BEGIN
          IF lvI = 2 THEN
            SETRANGE("Text Type", "Text Type"::Technical);
          IF lvI = 3 THEN
            SETRANGE("Text Type", "Text Type"::Internal); //mg, 25-01-11: M23555
          IF FIND('-') THEN BEGIN
            lvBuyerMgtTextRec2.RESET;
            lvBuyerMgtTextRec2.SETRANGE(Table, Table::Option);
            lvBuyerMgtTextRec2.SETRANGE("Text Type", "Text Type");
            lvBuyerMgtTextRec2.SETRANGE("Project No.", IProjectTo);
            lvBuyerMgtTextRec2.SETRANGE("Plot No.", IPlotTo);
            lvBuyerMgtTextRec2.SETRANGE("House Model", IHouseModelTo);
            lvBuyerMgtTextRec2.SETRANGE("Option Main Group", IMainGroupTo);;
            lvBuyerMgtTextRec2.SETRANGE("Option Group", IGroupTo);
            lvBuyerMgtTextRec2.SETRANGE("Option Sub Group", ISubGroupTo);
            lvBuyerMgtTextRec2.SETRANGE(Option, IOptionTo);
            lvBuyerMgtTextRec2.DELETEALL;
            REPEAT
              lvBuyerMgtTextRec2.COPY(lvBuyerMgtTextRec);
              lvBuyerMgtTextRec2.Table := lvBuyerMgtTextRec.Table::Option;
              lvBuyerMgtTextRec2."Project No." := IProjectTo;
              lvBuyerMgtTextRec2."Plot No." := IPlotTo;
              lvBuyerMgtTextRec2."House Model" := IHouseModelTo;
              lvBuyerMgtTextRec2."Option Main Group" := IMainGroupTo;
              lvBuyerMgtTextRec2."Option Group" := IGroupTo;
              lvBuyerMgtTextRec2."Option Sub Group" := ISubGroupTo;
              lvBuyerMgtTextRec2.Option := IOptionTo;
              lvBuyerMgtTextRec2."Quote No." := '';
              lvBuyerMgtTextRec2."Quote Line No." := 0;
              lvBuyerMgtTextRec2.INSERT;
            UNTIL NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE BmCopyOptionsToCrossList@1210190015(IProjectNo@1210190000 : Code[20];IHouseModelFilterFrom@1210190004 : Code[250];IMainGroupFilterFrom@1210190006 : Code[250];IGroupFilterFrom@1210190008 : Code[250];ISubGroupFilterFrom@1210190010 : Code[250];IOptionFilterFrom@1210190012 : Code[250]);
    VAR
      lvOptionRec@1210190014 : Record 11012502;
      lvCrossListRec@1210190002 : Record 11012515;
      lvProjRec@1210190001 : Record 11072003;
      lvWindow@1210190029 : Dialog;
      lvNoOfLines@1210190016 : Integer;
      lvCounter@1210190017 : Integer;
    BEGIN
      //* Kopieren 'Project-opties' naar 'Optie-kruisjeslijst' (headers aanmaken).
      WITH lvOptionRec DO BEGIN
        IF (IProjectNo = '') THEN
          ERROR(Text003);

        lvProjRec.GET(IProjectNo);
        lvProjRec.TESTFIELD("Housebuilding Project", TRUE);

        SETRANGE("Project No.", IProjectNo);
        SETRANGE("Plot No.", '');
        IF IHouseModelFilterFrom <> '' THEN
          SETFILTER("House Model", IHouseModelFilterFrom);
        IF IMainGroupFilterFrom <> '' THEN
          SETFILTER("Main Group", IMainGroupFilterFrom);
        IF IGroupFilterFrom <> '' THEN
          SETFILTER(Group, IGroupFilterFrom);
        IF ISubGroupFilterFrom <> '' THEN
          SETFILTER("Sub Group", ISubGroupFilterFrom);
        IF IOptionFilterFrom <> '' THEN
          SETFILTER(Option, IOptionFilterFrom);
        IF FINDSET(FALSE, FALSE) THEN BEGIN
          lvWindow.OPEN(Text008 + '\ \ \' + Text000);
          lvNoOfLines := COUNT;
          REPEAT
            lvCounter := lvCounter + 1;
            lvWindow.UPDATE(1, ROUND(lvCounter / lvNoOfLines * 10000,1));
            lvWindow.UPDATE(2, Option);
            IF NOT lvCrossListRec.GET("Project No.", "House Model", "Main Group", Group, "Sub Group", Option) THEN BEGIN
              lvCrossListRec.INIT;
              lvCrossListRec."Project No." := "Project No.";
              lvCrossListRec."House Model" := "House Model";
              lvCrossListRec."Main Group" := "Main Group";
              lvCrossListRec.Group := Group;
              lvCrossListRec."Sub Group" := "Sub Group";
              lvCrossListRec.Option := Option;
              lvCrossListRec."Option No. External" := "Option No. External";
              lvCrossListRec.INSERT(TRUE);
            END ELSE BEGIN
              IF (lvCrossListRec."Option No. External" = '') AND ("Option No. External" <> '') THEN BEGIN
                lvCrossListRec."Option No. External" := "Option No. External";
                lvCrossListRec.MODIFY(TRUE);
              END;
              lvCrossListRec.CheckInsertCrossListLines(lvCrossListRec);
            END;
          UNTIL NEXT = 0;
          lvWindow.CLOSE;
        END;
      END;
    END;

    PROCEDURE CopyQuoteToQuote@1100528400(FromOptionQuoteHeader@1100528400 : Record 11012513;VAR ToOptionQuoteHeader@1100528401 : Record 11012513;IncludeHeader@1100528402 : Boolean);
    VAR
      ToOptionQuoteLine@1100528403 : Record 11012514;
    BEGIN
      ToOptionQuoteHeader.TESTFIELD(Status, ToOptionQuoteHeader.Status::Applied);
      IF FromOptionQuoteHeader."No." = ToOptionQuoteHeader."No." THEN
        FromOptionQuoteHeader.FIELDERROR("No.");
      ToOptionQuoteLine.SETRANGE("Option Quote No.", ToOptionQuoteHeader."No.");
      IF NOT ToOptionQuoteLine.ISEMPTY THEN
        ERROR(Text014, ToOptionQuoteHeader.TABLECAPTION, ToOptionQuoteHeader."No.");

      IF IncludeHeader THEN
        CopyQuoteHeader(FromOptionQuoteHeader, ToOptionQuoteHeader);
      CopyQuoteLines(FromOptionQuoteHeader, ToOptionQuoteHeader);
    END;

    LOCAL PROCEDURE CopyQuoteHeader@1100528401(FromOptionQuoteHeader@1100528401 : Record 11012513;VAR ToOptionQuoteHeader@1100528400 : Record 11012513);
    VAR
      OrigToOptionQuoteHeader@1100528402 : Record 11012513;
    BEGIN
      OrigToOptionQuoteHeader.COPY(ToOptionQuoteHeader);
      ToOptionQuoteHeader.TRANSFERFIELDS(FromOptionQuoteHeader, FALSE);
      ToOptionQuoteHeader."Project No." := OrigToOptionQuoteHeader."Project No.";
      ToOptionQuoteHeader."Plot No." := OrigToOptionQuoteHeader."Plot No.";
      ToOptionQuoteHeader."Due Date" := OrigToOptionQuoteHeader."Due Date";
      ToOptionQuoteHeader."Document Date" := OrigToOptionQuoteHeader."Document Date";
      ToOptionQuoteHeader."Print Date" := OrigToOptionQuoteHeader."Print Date";
      ToOptionQuoteHeader."Confirmation Date" := OrigToOptionQuoteHeader."Confirmation Date";
      ToOptionQuoteHeader."No. Series" := OrigToOptionQuoteHeader."No. Series";
      ToOptionQuoteHeader.Comment := OrigToOptionQuoteHeader.Comment;
      ToOptionQuoteHeader.Status := OrigToOptionQuoteHeader.Status;
      ToOptionQuoteHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CopyQuoteLines@1100528402(FromOptionQuoteHeader@1100528401 : Record 11012513;ToOptionQuoteHeader@1100528400 : Record 11012513);
    VAR
      FromOptionQuoteLine@1100528402 : Record 11012514;
    BEGIN
      FromOptionQuoteLine.SETRANGE("Option Quote No.", FromOptionQuoteHeader."No.");
      IF FromOptionQuoteLine.FINDSET THEN
        REPEAT
          CopyQuoteLine(FromOptionQuoteLine, ToOptionQuoteHeader);
        UNTIL FromOptionQuoteLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyQuoteLine@1100528410(FromOptionQuoteLine@1100528400 : Record 11012514;ToOptionQuoteHeader@1100528401 : Record 11012513);
    VAR
      ToOptionQuoteLine@1100528402 : Record 11012514;
      OptionMainGroup@1100528403 : Record 11012509;
      OptionGroup@1100528404 : Record 11012504;
      OptionSubGroup@1100528405 : Record 11012505;
    BEGIN
      ToOptionQuoteLine := FromOptionQuoteLine;
      ToOptionQuoteLine."Option Quote No." := ToOptionQuoteHeader."No.";
      ToOptionQuoteLine."Project No." := ToOptionQuoteHeader."Project No.";
      ToOptionQuoteLine."Plot No." := ToOptionQuoteHeader."Plot No.";
      ToOptionQuoteHeader.CALCFIELDS("House Model");
      ToOptionQuoteLine."House Model" := ToOptionQuoteHeader."House Model";

      OptionMainGroup.GET(ToOptionQuoteHeader."Project No.",ToOptionQuoteHeader."Plot No.", ToOptionQuoteLine."Main Group");
      OptionGroup.GET(ToOptionQuoteHeader."Project No.",ToOptionQuoteHeader."Plot No.", ToOptionQuoteLine.Group);
      OptionSubGroup.GET(ToOptionQuoteHeader."Project No.",ToOptionQuoteHeader."Plot No.", ToOptionQuoteLine."Sub Group");
      ToOptionQuoteLine.Status := ToOptionQuoteLine.Status::Applied;
      ToOptionQuoteLine.INSERT(TRUE);
    END;

    PROCEDURE EditOptionSurcharges@1210190013(IOptionRec@1210190001 : Record 11012502);
    VAR
      lvSurchargeRec@1210190000 : Record 11012512;
      lvSurchargesFrm@1100525000 : Page 11012539;
    BEGIN
      WITH IOptionRec DO BEGIN
        TESTFIELD(Option);
        lvSurchargeRec.FILTERGROUP(9);
        lvSurchargeRec.SETRANGE("Project No.", "Project No.");
        lvSurchargeRec.SETRANGE("Plot No.", "Plot No.");
        lvSurchargeRec.SETRANGE("House Model", "House Model");
        lvSurchargeRec.SETRANGE("Main Group", "Main Group");
        lvSurchargeRec.SETRANGE(Group, Group);
        lvSurchargeRec.SETRANGE("Sub Group", "Sub Group");
        lvSurchargeRec.SETRANGE(Option, Option);
        lvSurchargeRec.FILTERGROUP(0);
        lvSurchargesFrm.SETTABLEVIEW(lvSurchargeRec);
        IF ("Project No." <> '') AND ("Plot No." <> '') AND (Option <> '') AND (Status >= Status::Order) THEN
          lvSurchargesFrm.EDITABLE(FALSE);
        lvSurchargesFrm.RUNMODAL;
      END;
    END;

    PROCEDURE EditOptionBudget@1210190014(IOptionRec@1210190001 : Record 11012502;IStandardMode@1210190002 : Boolean);
    VAR
      lvOptionBudgetRec@1210190003 : Record 11012503;
    BEGIN
      WITH IOptionRec DO BEGIN
        TESTFIELD(Option);
        lvOptionBudgetRec.FILTERGROUP(9);
        lvOptionBudgetRec.SETRANGE("Project No.", "Project No.");
        lvOptionBudgetRec.SETRANGE("Plot No.", "Plot No.");
        lvOptionBudgetRec.FILTERGROUP(0);
        lvOptionBudgetRec.SETRANGE("House Model", "House Model");
        lvOptionBudgetRec.SETRANGE("Main Group", "Main Group");
        lvOptionBudgetRec.SETRANGE(Group, Group);
        lvOptionBudgetRec.SETRANGE("Sub Group", "Sub Group");
        lvOptionBudgetRec.SETRANGE(Option, Option);
      END;
      PAGE.RUNMODAL(PAGE::"Option Budget", lvOptionBudgetRec);
    END;

    PROCEDURE EditOptionBudgetSummarySheet@1210190000(IOptionRec@1210190001 : Record 11012502);
    VAR
      lvSummarySheetRec@1210190000 : Record 11012064;
    BEGIN
      WITH IOptionRec DO BEGIN
        TESTFIELD(Option);
        lvSummarySheetRec.FILTERGROUP(9);
        lvSummarySheetRec.SETRANGE("Project No.", "Project No.");
        lvSummarySheetRec.SETRANGE("Contract No.", '');
        lvSummarySheetRec.SETRANGE("Plot No.", "Plot No.");
        lvSummarySheetRec.SETRANGE("House Model", "House Model");
        lvSummarySheetRec.SETRANGE("Main Group", "Main Group");
        lvSummarySheetRec.SETRANGE(Group, Group);
        lvSummarySheetRec.SETRANGE("Sub Group", "Sub Group");
        lvSummarySheetRec.SETRANGE(Option, Option);
        lvSummarySheetRec.FILTERGROUP(0);

        lvSummarySheetRec."Project No." := "Project No.";
        lvSummarySheetRec."Contract No." := '';
        lvSummarySheetRec."Plot No." := "Plot No.";
        lvSummarySheetRec."House Model" := "House Model";
        lvSummarySheetRec."Main Group" := "Main Group";
        lvSummarySheetRec.Group := Group;
        lvSummarySheetRec."Sub Group" := "Sub Group";
        lvSummarySheetRec.Option := Option;
      END;
      PAGE.RUNMODAL(PAGE::"Option Budget Summary Sheet", lvSummarySheetRec)
    END;

    PROCEDURE EditOptionBuyerMgtText@1210190010(IOptionRec@1210190002 : Record 11012502;IType@1210190001 : Text[15]);
    VAR
      lvBuyerMgtTextRec@1210190000 : Record 11012511;
    BEGIN
      WITH IOptionRec DO BEGIN
        TESTFIELD(Option);
        lvBuyerMgtTextRec.FILTERGROUP(9);
        lvBuyerMgtTextRec.SETRANGE(Table, lvBuyerMgtTextRec.Table::Option);
        CASE IType OF
          'Sales':
            lvBuyerMgtTextRec.SETRANGE("Text Type", lvBuyerMgtTextRec."Text Type"::Sales);
          'Technical':
            lvBuyerMgtTextRec.SETRANGE("Text Type", lvBuyerMgtTextRec."Text Type"::Technical);
          'Internal':
            lvBuyerMgtTextRec.SETRANGE("Text Type", lvBuyerMgtTextRec."Text Type"::Internal);
          'Configuration':
            lvBuyerMgtTextRec.SETRANGE("Text Type", lvBuyerMgtTextRec."Text Type"::Configuration);
          'Instruction':
            lvBuyerMgtTextRec.SETRANGE("Text Type", lvBuyerMgtTextRec."Text Type"::Instruction);

          ELSE
            EXIT;
        END;
        lvBuyerMgtTextRec.SETRANGE("Project No.", "Project No.");
        lvBuyerMgtTextRec.SETRANGE("House Model", "House Model");
        lvBuyerMgtTextRec.SETRANGE("Option Main Group", "Main Group");
        lvBuyerMgtTextRec.SETRANGE("Option Group", Group);
        lvBuyerMgtTextRec.SETRANGE("Option Sub Group", "Sub Group");
        lvBuyerMgtTextRec.SETRANGE("Plot No.", "Plot No.");
        lvBuyerMgtTextRec.SETRANGE(Option, Option);
        lvBuyerMgtTextRec.FILTERGROUP(0);
      END;
      PAGE.RUNMODAL(PAGE::"Buyer Management Text", lvBuyerMgtTextRec);
    END;

    PROCEDURE RecalcPlotInstallments@1100485000(IProjectNo@1100485001 : Code[20];IPlotNo@1100485000 : Code[10]);
    VAR
      lProjInstallmRec@1100485002 : Record 11012018;
      lPlotInstallmRec@1100485003 : Record 11012510;
      lPlotRec@1100485004 : Record 11012500;
      lInstallmentRec@1100485005 : Record 11012017;
      lProjPrincipalRec@1100485006 : Record 11012005;
    BEGIN
      IF IProjectNo = '' THEN
        EXIT;

      lPlotInstallmRec.SETRANGE("Project No.", IProjectNo);
      IF IPlotNo <> '' THEN
        lPlotInstallmRec.SETRANGE("Plot No.", IPlotNo)
      ELSE
        lPlotInstallmRec.SETFILTER("Plot No.", '<>%1', '');
      lPlotInstallmRec.SETRANGE("Installment No.", '0');

      lProjInstallmRec.SETRANGE("Project No.", IProjectNo);
      IF IPlotNo <> '' THEN
        lProjInstallmRec.SETRANGE("Plot No.", IPlotNo)
      ELSE
        lProjInstallmRec.SETFILTER("Plot No.", '<>%1', '');
      lProjInstallmRec.SETRANGE("Installment No.", '0');

      IF NOT (lProjInstallmRec.FINDFIRST OR lPlotInstallmRec.FINDFIRST) THEN
        EXIT;

      IF NOT CONFIRM(Text012, TRUE, lProjInstallmRec.FIELDCAPTION("VAT Prod. Posting Group")) THEN
        EXIT;

      WITH lProjInstallmRec DO
        IF FINDSET(TRUE, FALSE) THEN
          REPEAT
            CALCFIELDS("Invoiced Price (LCY)", "Invoice in Process (LCY)");
            IF ("Invoiced Price (LCY)" = 0) AND ("Invoice in Process (LCY)" = 0) THEN BEGIN
              lPlotRec.GET(IProjectNo, "Plot No.");
              "VAT Prod. Posting Group" := lPlotRec.PlotVatProdPostingGroup;
              IF "VAT Prod. Posting Group" = '' THEN BEGIN
                IF lInstallmentRec.GET(lPlotRec."Installment Scheme", '0') THEN
                  "VAT Prod. Posting Group" := lInstallmentRec."VAT Prod. Posting Group";
                IF lProjPrincipalRec.GET("Project No.",Principal) THEN
                  IF lProjPrincipalRec."VAT Prod. Posting Group" <> '' THEN
                    "VAT Prod. Posting Group" := lProjPrincipalRec."VAT Prod. Posting Group";
              END;
              IF "VAT Prod. Posting Group" <> '' THEN
                MODIFY;
            END;
          UNTIL NEXT = 0;

      WITH lPlotInstallmRec DO
        IF FINDSET(TRUE, FALSE) THEN
          REPEAT
            lProjInstallmRec.SETRANGE("Project No.", IProjectNo);
            lProjInstallmRec.SETRANGE("Plot No.", "Plot No.");
            lProjInstallmRec.SETRANGE("Installment No.", '0');
            IF lProjInstallmRec.FINDFIRST THEN
              "VAT Prod. Posting Group" := lProjInstallmRec."VAT Prod. Posting Group"
            ELSE BEGIN
              lPlotRec.GET(IProjectNo, "Plot No.");
              "VAT Prod. Posting Group" := lPlotRec.PlotVatProdPostingGroup;
              IF "VAT Prod. Posting Group" = '' THEN
                IF lInstallmentRec.GET(lPlotRec."Installment Scheme", '0') THEN
                  "VAT Prod. Posting Group" := lInstallmentRec."VAT Prod. Posting Group";
            END;
            IF "VAT Prod. Posting Group" <> '' THEN
              MODIFY;
          UNTIL NEXT = 0;
    END;

    PROCEDURE CheckProjectElement@1100525002(ProjectNo@1100525001 : Code[20];Element@1100525002 : Code[20];TableCaptionName@1100525003 : Text[100];FromProject@1100525004 : Code[20];FromPlot@1100525005 : Code[20];FromModel@1100525006 : Code[20];FromMainGroup@1100525007 : Code[20];FromGroup@1100525008 : Code[20];FromSubGroup@1100525009 : Code[20];FromOption@1100525010 : Code[20]);
    VAR
      ProjElemRec@1100525000 : Record 11012010;
    BEGIN
      //*C-019091.n
      IF (ProjectNo = '') OR (Element = '') THEN
        EXIT;

      IF NOT ProjElemRec.GET(ProjectNo, Element) THEN
        ERROR(Text013, ProjectNo, Element, TableCaptionName,
          FromProject, FromPlot, FromModel, FromMainGroup+'-'+FromGroup+'-'+FromSubGroup+' / '+FromOption);
    END;

    PROCEDURE CalculateContractorSurchargePercentage@1100528403(SalesPrice@1100528400 : Decimal;SalesPriceBuyer@1100528401 : Decimal;MaxNoOfDecimals@1100528402 : Integer) ContractorSurchargePercentage : Decimal;
    VAR
      I@1100528403 : Integer;
      ContractorSurchargePercentageCalculated@1100528404 : Boolean;
    BEGIN
      FOR I := 1 TO MaxNoOfDecimals DO BEGIN
        IF NOT ContractorSurchargePercentageCalculated THEN BEGIN
          ContractorSurchargePercentage := ROUND(
            ((SalesPriceBuyer * 100) / SalesPrice) - 100, POWER(10, -I));
          // Assumption: prices in buyers management are rounded in 2 decimals.
          // Calculate the Contractor Surcharge % with the least possible no. of decimals
          // that yields the right Sales Price (Buyer) rounded to 2 decimals.
          IF ROUND((SalesPrice * (100 + ContractorSurchargePercentage) / 100)) = ROUND(SalesPriceBuyer) THEN
            ContractorSurchargePercentageCalculated := TRUE;
        END;
      END;

      IF NOT ContractorSurchargePercentageCalculated THEN
        ERROR(Text015, SalesPrice, SalesPriceBuyer, MaxNoOfDecimals);
    END;

    BEGIN
    END.
  }
}

