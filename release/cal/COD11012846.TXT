OBJECT Codeunit 11012846 Service Unit Price Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'ENU=This option is only allowed when %1 is %2.;NOR=Dette alternativet er kun tillatt n†r %1 er %2.;SVE=Det h„r alternativet „r endast till†tet n„r %1 „r %2.';
      Text002@1100528300 : TextConst 'ENU=%1 created.;NOR=%1 opprettet';
      Text003@1100528603 : TextConst 'ENU=This option is only allowed when %1 is not equal to %2.;NOR=Dette alternativet er kun tillatt n†r %1 ikke er lik %2;SVE=Det h„r alternativet „r endast till†tet n„r %1 inte „r lika med %2.';
      Text004@1100528604 : TextConst 'ENU=There are already %1s present, change %2 is not allowed.;NOR=Det finnes allerede %1(er), endring av %2 er ikke tillatt.;SVE=Det finns redan %1. Det „r inte till†tet att „ndra %2.';
      Text005@1100525000 : TextConst 'ENU=%1 created.;NOR=%1 opprettet';
      Text006@1100528601 : TextConst 'ENU=%1 Line(s) deleted';
      Text007@1100528602 : TextConst 'ENU=There are already %1s present, creating lines is not allowed.';
      Text008@1100528605 : TextConst 'ENU=%1 %2(s) created;NOR=%1 %2 er opprettet;SVE=%1 %2 har skapats';
      TmpServicePlanningSetLine@1100528606 : TEMPORARY Record 11072307;
      Text009@1100528607 : TextConst 'ENU=%1 already exists, copying not possible';
      Text010@1100528608 : TextConst 'ENU=No %1 lines available';
      Text011@1100528609 : TextConst 'ENU=%1 with %2 %3 already exists';
      Text012@1100528612 : TextConst 'ENU=There are already %1s present, only new Unit Price Budget Lines will be added, continue?';
      Text013@1100528611 : TextConst 'ENU=There are already %1s present, remove these?';

    PROCEDURE ShowInternalBudgetLineList@1100528600(IServiceUnitPrice@1100528600 : Record 11071769);
    VAR
      SUPInternalBudgetLine@1100528601 : Record 11071770;
    BEGIN
      SUPInternalBudgetLine.FILTERGROUP(9);
      SUPInternalBudgetLine.SETRANGE("Price Book Code", IServiceUnitPrice."Price Book Code");
      SUPInternalBudgetLine.SETRANGE("Index Date", IServiceUnitPrice."Index Date");
      SUPInternalBudgetLine.SETRANGE("Unit Price Code", IServiceUnitPrice.Code);
      SUPInternalBudgetLine.FILTERGROUP(0);
      PAGE.RUNMODAL(PAGE::"SUP Internal Budget Lines", SUPInternalBudgetLine);
    END;

    PROCEDURE ShowCustomerBudgetLineList@1100528601(IServiceUnitPrice@1100528600 : Record 11071769);
    VAR
      SUPCustomerBudgetLine@1100528601 : Record 11071771;
      ServicePriceBook@1100528602 : Record 11071768;
    BEGIN
      ServicePriceBook.Type := ServicePriceBook.Type::Customer; //used to show in the message
      IF IServiceUnitPrice."Price Book Type" <> IServiceUnitPrice."Price Book Type"::Customer THEN
        ERROR(Text000, IServiceUnitPrice.FIELDCAPTION("Price Book Type"), ServicePriceBook.Type);

      SUPCustomerBudgetLine.FILTERGROUP(9);
      SUPCustomerBudgetLine.SETRANGE("Price Book Code", IServiceUnitPrice."Price Book Code");
      SUPCustomerBudgetLine.SETRANGE("Index Date", IServiceUnitPrice."Index Date");
      SUPCustomerBudgetLine.SETRANGE("Unit Price Code", IServiceUnitPrice.Code);
      SUPCustomerBudgetLine.FILTERGROUP(0);
      PAGE.RUNMODAL(PAGE::"SUP Customer Budget Lines", SUPCustomerBudgetLine);
    END;

    PROCEDURE ShowSUPRecordingLines@1100528602(IServiceOrder@1100528600 : Record 11012823);
    VAR
      SUPRecordingLine@1100528601 : Record 11071772;
    BEGIN
      IF IServiceOrder."Price Book Type" = IServiceOrder."Price Book Type"::None THEN
        ERROR(Text003, IServiceOrder.FIELDCAPTION("Price Book Type"), IServiceOrder."Price Book Type");

      SUPRecordingLine.FILTERGROUP(9);
      SUPRecordingLine.SETRANGE("Service Order No.", IServiceOrder."No.");
      SUPRecordingLine.FILTERGROUP(0);
      PAGE.RUNMODAL(PAGE::"SUP Recording Lines", SUPRecordingLine);
    END;

    PROCEDURE ShowSUPProductionList@1100528606(ServiceOrderNo@1100528600 : Code[20]);
    VAR
      SUPProduction@1100528601 : Record 11071773;
      ServiceOrder@1100528602 : Record 11012823;
    BEGIN
      ServiceOrder.GET(ServiceOrderNo);
      IF (ServiceOrder."Price Book Type" = ServiceOrder."Price Book Type"::None) THEN
        ERROR(Text003, ServiceOrder.FIELDCAPTION("Price Book Type"), ServiceOrder."Price Book Type");

      SUPProduction.SETRANGE("Service Order No.", ServiceOrderNo);
      PAGE.RUNMODAL(PAGE::"SUP Production List", SUPProduction);
    END;

    PROCEDURE ShowSOSUPSets@1100528642(ServiceOrderNo@1100528601 : Code[20]);
    VAR
      ServiceOrderSUPSet@1100528600 : Record 11072291;
      ServiceOrder@1100528602 : Record 11012823;
    BEGIN
      ServiceOrder.GET(ServiceOrderNo);
      IF (ServiceOrder."Price Book Type" = ServiceOrder."Price Book Type"::None) THEN
        ERROR(Text003, ServiceOrder.FIELDCAPTION("Price Book Type"), ServiceOrder."Price Book Type");

      ServiceOrderSUPSet.SETRANGE("Service Order No.", ServiceOrderNo);
      PAGE.RUNMODAL(0, ServiceOrderSUPSet);
    END;

    PROCEDURE ProcessStatusPreRecording@1100528607(IServiceOrder@1100528602 : Record 11012823);
    VAR
      SUPRecordingLine@1100528600 : Record 11071772;
      ServiceOrderExtension@1100528601 : Record 11071727;
    BEGIN
      ServiceOrderExtension.GetServOrderExtension(IServiceOrder."No.");

      SUPRecordingLine.SETRANGE("Service Order No.", IServiceOrder."No.");
      SUPRecordingLine.SETRANGE("Price Book Type", IServiceOrder."Price Book Type");
      SUPRecordingLine.SETRANGE("Price Book Code", ServiceOrderExtension."Price Book Code");
      SUPRecordingLine.SETRANGE("Index Date", ServiceOrderExtension."Price Book Index Date");
      IF NOT SUPRecordingLine.FINDSET(TRUE) THEN
        EXIT;

      REPEAT
        SUPRecordingLine."Recording Quantity" := 0;
        SUPRecordingLine."Recording Amount" := 0;
        SUPRecordingLine."Production Recording Quantity" := 0;
        SUPRecordingLine."Production Recording Amount" := 0;
        SUPRecordingLine.MODIFY;
      UNTIL SUPRecordingLine.NEXT = 0;

      DeleteUnitPriceBudgetLines(IServiceOrder, TRUE);
    END;

    PROCEDURE ProcessStatusRecording@1100528608(ServiceOrder@1100528602 : Record 11012823);
    VAR
      SUPRecordingLine@1100528600 : Record 11071772;
      ServiceOrderExtension@1100528601 : Record 11071727;
    BEGIN
      ServiceOrderExtension.GetServOrderExtension(ServiceOrder."No.");

      SUPRecordingLine.SETRANGE("Service Order No.", ServiceOrder."No.");
      //UnitPriceServiceOrder.SETRANGE("Price Book Type", ServiceOrder."Price Book Type");
      //UnitPriceServiceOrder.SETRANGE("Price Book Code", ServiceOrderExtension."Price Book Code");
      //UnitPriceServiceOrder.SETRANGE("Index Date", ServiceOrderExtension."Unit Price Index Date");
      IF NOT SUPRecordingLine.FINDSET(TRUE) THEN
        EXIT;

      REPEAT
        SUPRecordingLine."Recording Quantity" := SUPRecordingLine."Pre-Recording Quantity";
        SUPRecordingLine."Recording Amount" := SUPRecordingLine."Pre-Recording Amount";
        SUPRecordingLine."Production Recording Quantity" := 0;
        SUPRecordingLine."Production Recording Amount" := 0;
        SUPRecordingLine.MODIFY;
      UNTIL SUPRecordingLine.NEXT = 0;

      DeleteUnitPriceBudgetLines(ServiceOrder, TRUE);
    END;

    PROCEDURE ProcessStatusRealization@1100528609(IServiceOrder@1100528603 : Record 11012823);
    BEGIN
      IF IServiceOrder."Settlement Method" IN
        [IServiceOrder."Settlement Method"::"Collective Installment Overview", IServiceOrder."Settlement Method"::"Installment Overview by Service Order"]
      THEN
        EXIT;

      CreateSOBudgetLines(IServiceOrder, FALSE);
    END;

    PROCEDURE CreateSOBudgetLines@1100528661(IServiceOrder@1100528604 : Record 11012823;ICheckRecordingLines@1100528605 : Boolean);
    VAR
      ServiceOrderBudgetLine@1100528603 : Record 11012875;
      SUPInternalBudgetLine@1100528602 : Record 11071770;
      SUPRecordingLine@1100528601 : Record 11071772;
      LastLineNo@1100528600 : Integer;
      NoOfLinesCreated@1100528606 : Integer;
    BEGIN
      SUPRecordingLine.SETRANGE("Service Order No.", IServiceOrder."No.");
      IF ICheckRecordingLines THEN BEGIN
        IF NOT SUPRecordingLine.FINDSET THEN
          IF GUIALLOWED THEN
            ERROR(Text010, SUPRecordingLine.TABLECAPTION)
          ELSE
            EXIT;
      END;

      ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", IServiceOrder."No.");
      IF NOT ServiceOrderBudgetLine.ISEMPTY THEN
        IF GUIALLOWED THEN
          IF NOT CONFIRM(Text012, TRUE, ServiceOrderBudgetLine.TABLECAPTION) THEN
            ERROR('');

      ServiceOrderBudgetLine.LOCKTABLE;
      ServiceOrderBudgetLine.SETCURRENTKEY("Budget Type", "Service Order No.", "Line No.");
      IF ServiceOrderBudgetLine.FINDLAST THEN
        LastLineNo := ServiceOrderBudgetLine."Line No.";
      IServiceOrder.MODIFY;
      REPEAT
        SUPInternalBudgetLine.SETRANGE("Price Book Type", SUPRecordingLine."Price Book Type");
        SUPInternalBudgetLine.SETRANGE("Price Book Code", SUPRecordingLine."Price Book Code");
        SUPInternalBudgetLine.SETRANGE("Index Date", SUPRecordingLine."Index Date");
        SUPInternalBudgetLine.SETRANGE("Unit Price Code", SUPRecordingLine."Unit Price Code");
        IF SUPInternalBudgetLine.FINDSET THEN BEGIN
          REPEAT
            ServiceOrderBudgetLine.SETRANGE("Recording Line No.", SUPRecordingLine."Line No.");
            ServiceOrderBudgetLine.SETRANGE("Unit Price Budget Line No.", SUPInternalBudgetLine."Line No.");
            IF ServiceOrderBudgetLine.ISEMPTY THEN BEGIN
              CreateSOBudgetLineByInternalBudgetLine(
                IServiceOrder."No.", IServiceOrder."Service Contract No.", SUPRecordingLine, SUPInternalBudgetLine, SUPRecordingLine.GetQuantity, LastLineNo);
              NoOfLinesCreated += 1;
            END;
          UNTIL SUPInternalBudgetLine.NEXT = 0;
        END;
      UNTIL SUPRecordingLine.NEXT = 0;
      IServiceOrder.GET(IServiceOrder."No.");
      IF NoOfLinesCreated > 0 THEN
        IServiceOrder.UpdateSOHours;

      IF GUIALLOWED THEN
        IF (IServiceOrder.Origin <> IServiceOrder.Origin::DSP) THEN
          MESSAGE(Text008, NoOfLinesCreated, ServiceOrderBudgetLine.TABLECAPTION);
    END;

    PROCEDURE CreateSOBudgetLineByInternalBudgetLine@1100528654(IServiceOrderNo@1100528600 : Code[20];IServiceContractNo@1100528601 : Code[20];ISUPRecordingLine@1100528605 : Record 11071772;ISUPInternalBudgetLine@1100528602 : Record 11071770;IQuantity@1100528606 : Decimal;VAR IOLastLineNo@1100528603 : Integer);
    VAR
      ServiceOrderBudgetLine@1100528604 : Record 11012875;
    BEGIN
      IOLastLineNo += 10000;

      ServiceOrderBudgetLine."Budget Type" := ServiceOrderBudgetLine."Budget Type"::Order;
      ServiceOrderBudgetLine."Service Order No." := IServiceOrderNo;
      ServiceOrderBudgetLine."Service Contract No." := IServiceContractNo;
      ServiceOrderBudgetLine."Object No." := '';
      ServiceOrderBudgetLine."Maintenance Scheme" := '';
      ServiceOrderBudgetLine."Line No." := IOLastLineNo;
      ServiceOrderBudgetLine.INSERT(TRUE);

      ServiceOrderBudgetLine."Unit Price Budget Line No." := ISUPInternalBudgetLine."Line No.";
      ServiceOrderBudgetLine."Recording Line No." := ISUPRecordingLine."Line No.";

      ServiceOrderBudgetLine.VALIDATE("Cost Type", ISUPInternalBudgetLine."Cost Type");
      ServiceOrderBudgetLine.VALIDATE("Cost Object", ISUPInternalBudgetLine."Cost Object");
      ServiceOrderBudgetLine.VALIDATE("Cost Component");
      IF ISUPInternalBudgetLine."Cost Component" <> '' THEN
        ServiceOrderBudgetLine."Cost Component" := ISUPInternalBudgetLine."Cost Component";
      //DP01676.sn
      ServiceOrderBudgetLine."Apply Obligation" := ISUPInternalBudgetLine."Apply Obligation";
      ServiceOrderBudgetLine."Quantity (Result Obligation)" := ISUPInternalBudgetLine."Quantity (Result Obligation)";
      //DP01676.en

      CASE ISUPInternalBudgetLine."Cost Type" OF
        ISUPInternalBudgetLine."Cost Type"::Material:
          BEGIN
            //DP01958a.sn
            IF (ISUPInternalBudgetLine."Trade Item" <> '') THEN BEGIN
              ServiceOrderBudgetLine."Vendor (Trade Item)" := ISUPInternalBudgetLine."Vendor (Trade Item)";
              ServiceOrderBudgetLine.VALIDATE("Trade Item", ISUPInternalBudgetLine."Trade Item");
            END ELSE BEGIN
              IF (ISUPInternalBudgetLine."Basic Item" <> '') THEN BEGIN
                ServiceOrderBudgetLine.Manufacturer := ISUPInternalBudgetLine.Manufacturer;
                ServiceOrderBudgetLine.VALIDATE("Basic Item", ISUPInternalBudgetLine."Basic Item");
              END ELSE BEGIN
                IF (ISUPInternalBudgetLine."Item No." <> '') THEN
                  ServiceOrderBudgetLine.VALIDATE("Item No.", ISUPInternalBudgetLine."Item No.");
              END;
            END;
            IF ISUPInternalBudgetLine."Cost Object" <> '' THEN
              ServiceOrderBudgetLine."Cost Object" := ISUPInternalBudgetLine."Cost Object";
            IF ISUPInternalBudgetLine."Cost Component" <> '' THEN
              ServiceOrderBudgetLine."Cost Component" := ISUPInternalBudgetLine."Cost Component";
            //DP01958a.en
            ServiceOrderBudgetLine.VALIDATE(Price, ISUPInternalBudgetLine."Cost Price");
          END;
        ISUPInternalBudgetLine."Cost Type"::Labor:
          BEGIN
            ServiceOrderBudgetLine.VALIDATE("Rate Code", ISUPInternalBudgetLine."Rate Code");
            ServiceOrderBudgetLine.VALIDATE(Rate, ISUPInternalBudgetLine.Rate);
            ServiceOrderBudgetLine.Norm := ISUPInternalBudgetLine.Norm;
            IF ISUPInternalBudgetLine."Production Rate" <> 0 THEN
              ServiceOrderBudgetLine.VALIDATE("Production Rate", ISUPInternalBudgetLine."Production Rate");  //DP01676
            ServiceOrderBudgetLine.Hours := ISUPInternalBudgetLine.Hours;
          END;
        ISUPInternalBudgetLine."Cost Type"::Subcontracting:
          BEGIN
            ServiceOrderBudgetLine."Subcontracting in Hours" := ISUPInternalBudgetLine."Subcontracting in Hours";  //C053751
            ServiceOrderBudgetLine."Subcontracting Activity" := ISUPInternalBudgetLine."Subcontracting Activity";
            ServiceOrderBudgetLine.VALIDATE(Vendor, ISUPInternalBudgetLine.Subcontractor);
            ServiceOrderBudgetLine.VALIDATE(Price, ISUPInternalBudgetLine."Cost Price");
            IF ISUPInternalBudgetLine."Production Rate" <> 0 THEN
              ServiceOrderBudgetLine.VALIDATE("Production Rate", ISUPInternalBudgetLine."Production Rate");  //DP01676
          END;
        ISUPInternalBudgetLine."Cost Type"::Plant:
          BEGIN
            ServiceOrderBudgetLine."Plant Company" := ISUPInternalBudgetLine."Plant Company";
            ServiceOrderBudgetLine."Plant Type" := ISUPInternalBudgetLine."Plant Type";
            ServiceOrderBudgetLine."Plant Rates in Hours" := ISUPInternalBudgetLine."Plant Rates in Hours";  //DP02115
            ServiceOrderBudgetLine.VALIDATE(Price, ISUPInternalBudgetLine."Cost Price");
            IF ISUPInternalBudgetLine."Production Rate" <> 0 THEN
              ServiceOrderBudgetLine.VALIDATE("Production Rate", ISUPInternalBudgetLine."Production Rate");  //DP01676
          END;
        ISUPInternalBudgetLine."Cost Type"::Sundry:
          ServiceOrderBudgetLine.VALIDATE(Price, ISUPInternalBudgetLine."Cost Price");
      END;

      ServiceOrderBudgetLine.Quantity := ISUPInternalBudgetLine.Quantity;
      IF IQuantity <> 0 THEN
        ServiceOrderBudgetLine.Quantity *= IQuantity;

      ServiceOrderBudgetLine.Description := ISUPInternalBudgetLine.Description;
      ServiceOrderBudgetLine."Unit of Measure" := ISUPInternalBudgetLine."Unit of Measure";
      ServiceOrderBudgetLine.VALIDATE("Discount %", ISUPInternalBudgetLine."Purchase Discount %");
      ServiceOrderBudgetLine.VALIDATE("Gross Price", ISUPInternalBudgetLine."Gross Price");
      ServiceOrderBudgetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DeleteUnitPriceBudgetLines@1100528610(ServiceOrder@1100528602 : Record 11012823;IAskBeforeDelete@1100528603 : Boolean);
    VAR
      ServiceOrderBudgetLine@1100528600 : Record 11012875;
      ServiceOrderExtension@1100528601 : Record 11071727;
      DeletionConfirmed@1100528604 : Boolean;
    BEGIN
      ServiceOrderExtension.GetServOrderExtension(ServiceOrder."No.");

      DeletionConfirmed := NOT IAskBeforeDelete;
      ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrder."No.");
      ServiceOrderBudgetLine.SETFILTER("Recording Line No.", '<>%1', 0);
      IF NOT ServiceOrderBudgetLine.ISEMPTY THEN BEGIN
        IF IAskBeforeDelete THEN
          DeletionConfirmed := CONFIRM(Text013, FALSE, ServiceOrderBudgetLine.TABLECAPTION);
        IF DeletionConfirmed THEN
          ServiceOrderBudgetLine.DELETEALL(TRUE);
      END;
    END;

    PROCEDURE GenerateCostPlusEntries@1100530000(VAR ISUPProduction@1100528600 : Record 11071773);
    VAR
      SUPProductionLine@1100528602 : Record 11071774;
      ServiceOrderCostPlusEntry@1100528603 : Record 11012825;
      GenericTempTableBreakdown@1100525001 : TEMPORARY Record 11020579;
      GenericTempTableVATLine@1100525000 : TEMPORARY Record 11020579;
      ServiceOrder@1100528601 : Record 11012823;
      QuantityToProcess@1100528604 : Decimal;
      CostPlusEntriesCreated@1100525002 : Boolean;
    BEGIN
      ServiceOrder.GET(ISUPProduction."Service Order No.");
      ServiceOrder.TESTFIELD("Settlement Method", ServiceOrder."Settlement Method"::"Cost Plus");

      ISUPProduction.TESTFIELD(Status, ISUPProduction.Status::Approved);

      SUPProductionLine.SETRANGE("Service Order No.", ISUPProduction."Service Order No.");
      SUPProductionLine.SETRANGE("Production Seq. No.", ISUPProduction."Seq. No.");
      SUPProductionLine.SETRANGE("Cost Plus Entries Created", FALSE);
      SUPProductionLine.SETFILTER(Production, '<>0');
      IF (ISUPProduction."Object No." <> '') THEN
        SUPProductionLine.SETRANGE("Object No.", ISUPProduction."Object No.");
      IF SUPProductionLine.FINDSET THEN
        REPEAT
          GenericTempTableBreakdown.RESET;
          GenericTempTableBreakdown.DELETEALL;
          GenericTempTableVATLine.RESET;
          GenericTempTableVATLine.DELETEALL;

          FillTempTableBudgetBreakdown(GenericTempTableBreakdown, ISUPProduction, SUPProductionLine);

          IF SUPProductionLine."Extension Production" <= 0 THEN BEGIN
            FillTempTableVATLine(GenericTempTableBreakdown, GenericTempTableVATLine,
              SUPProductionLine, SUPProductionLine.Production, FALSE);
          END ELSE BEGIN
            QuantityToProcess := SUPProductionLine.Production - SUPProductionLine."Extension Production";
            IF QuantityToProcess > 0 THEN BEGIN
              FillTempTableVATLine(GenericTempTableBreakdown, GenericTempTableVATLine,
                SUPProductionLine, QuantityToProcess, FALSE);
            END;
            FillTempTableVATLine(GenericTempTableBreakdown, GenericTempTableVATLine,
              SUPProductionLine, SUPProductionLine."Extension Production", TRUE);
          END;

          GenericTempTableVATLine.RESET;
          GenericTempTableVATLine.SETRANGE("Key Code1", 'VATLine');
          IF GenericTempTableVATLine.FINDSET THEN BEGIN
            REPEAT
              InsertCostPlusEntry(SUPProductionLine, GenericTempTableVATLine);
              CostPlusEntriesCreated := TRUE;
            UNTIL GenericTempTableVATLine.NEXT = 0;
          END;
        UNTIL SUPProductionLine.NEXT = 0;

      IF GUIALLOWED THEN
        IF CostPlusEntriesCreated THEN
          MESSAGE(Text002, ServiceOrderCostPlusEntry.TABLECAPTION)
        ELSE
          MESSAGE(Text005, ServiceOrderCostPlusEntry.TABLECAPTION);
    END;

    LOCAL PROCEDURE InsertCostPlusEntry@1100528603(VAR IOSUPProductionLine@1100528603 : Record 11071774;VAR GenericTempTable@1100525000 : Record 11020579);
    VAR
      ServiceOrder@1100528604 : Record 11012823;
      ServiceOrderCostPlusEntry@1100528600 : Record 11012825;
      SUPProduction@1100528300 : Record 11071773;
      ServiceCollectiveListMgt@1100528601 : Codeunit 11012850;
      LastLineNo@1100528602 : Integer;
      ServiceSetup@1100527350 : Record 11012800;
    BEGIN
      ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", IOSUPProductionLine."Service Order No.");
      IF (ServiceOrderCostPlusEntry.FINDLAST) THEN
        LastLineNo := ServiceOrderCostPlusEntry."Line No.";
      LastLineNo += 10000;

      IOSUPProductionLine.CALCFIELDS(
        "Recording Quantity", "Previous Prod Value Cumulative",
        "Previous Production Date", "Previous Production Date",
        "Production Value Cumulative", "Bill-to Customer No.");

      ServiceOrderCostPlusEntry.INIT;
      ServiceOrderCostPlusEntry.VALIDATE("Service Order No.", IOSUPProductionLine."Service Order No.");
      ServiceOrderCostPlusEntry."Line No." := LastLineNo;
      ServiceOrderCostPlusEntry.INSERT(TRUE);

      IF NOT ServiceOrder.GET(IOSUPProductionLine."Service Order No.") THEN
        ServiceOrder.INIT;

      IF IOSUPProductionLine."Bill-to Customer No." <> '' THEN BEGIN
        ServiceOrderCostPlusEntry."Bill-to Customer No." := IOSUPProductionLine."Bill-to Customer No.";
        ServiceOrderCostPlusEntry."Collective List No." :=
          ServiceCollectiveListMgt.FindCollectiveListNo(
            ServiceOrderCostPlusEntry."Customer No.", IOSUPProductionLine."Bill-to Customer No.",
            '', '', ServiceOrder."Service Location No.", ServiceOrder."Service Contract No.", IOSUPProductionLine."Service Order No.", FALSE);
      END;
      ServiceOrderCostPlusEntry.Description := IOSUPProductionLine.Description;
      ServiceOrderCostPlusEntry."Posting Date" := IOSUPProductionLine."Production Date";
      ServiceOrderCostPlusEntry."Unit of Measure" := IOSUPProductionLine."Unit of Measure";
      ServiceOrderCostPlusEntry."Cost Price (LCY)" := ServiceOrderCostPlusEntry.Quantity *
        ServiceOrderCostPlusEntry."Basic Price (LCY)";
      ServiceOrderCostPlusEntry."VAT Prod. Posting Group" := GenericTempTable."Key Code3";

      IF IOSUPProductionLine."Alternative Unit Price Code" <> IOSUPProductionLine."Unit Price Code" THEN BEGIN
        ServiceSetup.GET;
        IF ServiceSetup."Cost Obj. Alt. Unit Price Code" <> '' THEN
          ServiceOrderCostPlusEntry.VALIDATE("Cost Object", ServiceSetup."Cost Obj. Alt. Unit Price Code");
      END;

      ServiceOrderCostPlusEntry."Unit Price Extention" := GenericTempTable.Bool1; //IsExtensionLine;
      ServiceOrderCostPlusEntry.VALIDATE("Production Seq. No.", IOSUPProductionLine."Production Seq. No.");
      ServiceOrderCostPlusEntry.VALIDATE("Production Line No.", IOSUPProductionLine."Line No.");
      ServiceOrderCostPlusEntry.VALIDATE("Basic Price (LCY)", GenericTempTable.Dec1);
      ServiceOrderCostPlusEntry.VALIDATE(Quantity, GenericTempTable.Dec2); //QuantityToBook;
      ServiceOrderCostPlusEntry."Sub-part of (Unit Price Code)" := IOSUPProductionLine."Sub-part of";
      IF IOSUPProductionLine."Sub-part of" <> '' THEN
        ServiceOrderCostPlusEntry.Chargeable := FALSE;

      SUPProduction.GET(IOSUPProductionLine."Service Order No.", IOSUPProductionLine."Production Seq. No.");
      SUPProduction.CALCFIELDS("Dsp Assignment Id");
      ServiceOrderCostPlusEntry."Dsp Assignment Id" := SUPProduction."Dsp Assignment Id";
      IOSUPProductionLine.CALCFIELDS("Object No.");
      ServiceOrderCostPlusEntry."Service Order Object No." := IOSUPProductionLine."Object No.";
      ServiceOrderCostPlusEntry.Text := IOSUPProductionLine.Comment;

      ServiceOrderCostPlusEntry.MODIFY(TRUE);

      IOSUPProductionLine."Cost Plus Entries Created":= TRUE;
      IOSUPProductionLine."Creation Date Cost Plus Entry" := TODAY;
      IOSUPProductionLine."Cost Plus Line No." := ServiceOrderCostPlusEntry."Line No.";
      IOSUPProductionLine.MODIFY;
    END;

    PROCEDURE ValidateSOUnitPriceChange@1100528613(ServiceOrderNo@1100528600 : Code[20];FieldName@1100528604 : Text[100]);
    VAR
      ServiceOrderSUPSets@1100528606 : Record 11072291;
      SUPRecordingLine@1100528603 : Record 11071772;
      SUPProductionLine@1100528601 : Record 11071774;
      ServiceOrderBudgetLine@1100528602 : Record 11012875;
      ServiceOrderCostPlusEntry@1100528605 : Record 11012825;
    BEGIN
      ServiceOrderSUPSets.SETRANGE("Service Order No.", ServiceOrderNo);
      IF NOT ServiceOrderSUPSets.ISEMPTY THEN
        ERROR(Text004, ServiceOrderSUPSets.TABLECAPTION, FieldName);

      SUPRecordingLine.SETRANGE("Service Order No.", ServiceOrderNo);
      SUPRecordingLine.SETFILTER("Price Book Code", '<>%1', '');
      SUPRecordingLine.SETFILTER("Index Date", '<>%1', 0D);
      IF (SUPRecordingLine.FINDFIRST) THEN
        ERROR(Text004, SUPRecordingLine.TABLECAPTION, FieldName);

      SUPProductionLine.SETRANGE("Service Order No.", ServiceOrderNo);
      SUPProductionLine.SETFILTER("Price Book Code", '<>%1', '');
      IF (SUPProductionLine.FINDFIRST) THEN
        ERROR(Text004, SUPProductionLine.TABLECAPTION, FieldName);

      ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrderNo);
      ServiceOrderBudgetLine.SETFILTER("Recording Line No.", '<>%1', 0);
      IF NOT ServiceOrderBudgetLine.ISEMPTY THEN
        ERROR(Text004, ServiceOrderBudgetLine.TABLECAPTION, FieldName);

      //>> 190523 ORANGO.SB Support #24355
      // ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", ServiceOrderNo);
      // ServiceOrderCostPlusEntry.SETFILTER("Unit Price Code", '<>%1', '');
      // IF NOT ServiceOrderCostPlusEntry.ISEMPTY THEN
      //  ERROR(Text004, ServiceOrderCostPlusEntry.TABLECAPTION, FieldName);
      //<<

      DeleteServiceOrderUnitPrice(ServiceOrderNo);
    END;

    LOCAL PROCEDURE DeleteServiceOrderUnitPrice@1100528604(ServiceOrderNo@1100528600 : Code[20]);
    VAR
      SUPRecordingLine@1100528604 : Record 11071772;
      SUPProduction@1100528603 : Record 11071773;
      ServiceOrderBudgetLine@1100528601 : Record 11012875;
    BEGIN
      SUPRecordingLine.SETRANGE("Service Order No.", ServiceOrderNo);
      //SUPRecordingLine.SETFILTER("Price Book Code", '<>%1', '');
      //SUPRecordingLine.SETFILTER("Index Date", '<>%1', 0D);
      SUPRecordingLine.DELETEALL(TRUE);

      SUPProduction.SETRANGE("Service Order No.", ServiceOrderNo);
      SUPProduction.DELETEALL(TRUE);

      ServiceOrderBudgetLine.SETRANGE("Budget Type", ServiceOrderBudgetLine."Budget Type"::Order);
      ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrderNo);
      ServiceOrderBudgetLine.SETFILTER("Recording Line No.", '<>%1', 0);
      //ServiceOrderBudgetLine.SETFILTER("Unit Price Code OLD", '<>%1', '');
      //ServiceOrderBudgetLine.SETFILTER("Unit Price Index Date OLD", '<>%1', 0D);
      //ServiceOrderBudgetLine.SETFILTER("Unit Price Line Code OLD", '<>%1', '');
      ServiceOrderBudgetLine.DELETEALL(TRUE);
    END;

    PROCEDURE CopyUnitPrice@1210190000(FromType@1210190007 : ',Internal,Customer';FromCode@1210190006 : Code[20];FromIndexDate@1210190005 : Date;FromDescription@1210190004 : Text[50];ToType@1210190003 : ',Internal,Customer';ToCode@1210190002 : Code[20];ToIndexDate@1210190001 : Date;ToDescription@1210190000 : Text[50];UseExistingHeader@1100528600 : Boolean);
    VAR
      ServiceUnitPrice@1100528300 : Record 11071768;
      ToServiceUnitPrice@1100528307 : Record 11071768;
    BEGIN
      IF NOT UseExistingHeader THEN
        IF ServiceUnitPrice.GET(FromCode, FromIndexDate) THEN BEGIN
          ToServiceUnitPrice.COPY(ServiceUnitPrice);
          ToServiceUnitPrice.Type := ToType;
          ToServiceUnitPrice.Code := ToCode;
          ToServiceUnitPrice."Index Date" := ToIndexDate;
          ToServiceUnitPrice.Description := ToDescription;
          ToServiceUnitPrice."File Location" := '';
          ToServiceUnitPrice.INSERT;
        END;

      CopyUnitPriceLine(FromType, FromCode, FromIndexDate, ToType, ToCode, ToIndexDate);
      CopyUnitPriceBudgetInternal(FromType, FromCode, FromIndexDate, ToType, ToCode, ToIndexDate);
      IF ToType = ToType::Customer THEN
        CopyUnitPriceBudgetCustomer(FromCode, FromIndexDate, ToCode, ToIndexDate);
      CopyUnitPriceSet(FromCode, FromIndexDate, ToCode, ToIndexDate);
      CopySurchargeSets(FromCode, FromIndexDate, ToCode, ToIndexDate);
    END;

    LOCAL PROCEDURE CopyUnitPriceLine@1100528301(FromType@1210190007 : ',Internal,Customer';FromCode@1210190006 : Code[20];FromIndexDate@1210190005 : Date;ToType@1210190003 : ',Internal,Customer';ToCode@1210190002 : Code[20];ToIndexDate@1210190001 : Date);
    VAR
      ServiceUnitPrice@1100528301 : Record 11071769;
      ToServiceUnitPrice@1100528306 : Record 11071769;
    BEGIN
      ServiceUnitPrice.SETRANGE("Price Book Type", FromType);
      ServiceUnitPrice.SETRANGE("Price Book Code", FromCode);
      ServiceUnitPrice.SETRANGE("Index Date", FromIndexDate);
      IF ServiceUnitPrice.FINDSET THEN BEGIN
        REPEAT
          ToServiceUnitPrice.COPY(ServiceUnitPrice);
          ToServiceUnitPrice."Price Book Type" := ToType;
          ToServiceUnitPrice."Price Book Code" := ToCode;
          ToServiceUnitPrice."Index Date" := ToIndexDate;
          ToServiceUnitPrice.INSERT(TRUE);
        UNTIL ServiceUnitPrice.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyUnitPriceBudgetInternal@1100528302(FromType@1210190007 : ',Internal,Customer';FromCode@1210190006 : Code[20];FromIndexDate@1210190005 : Date;ToType@1210190003 : ',Internal,Customer';ToCode@1210190002 : Code[20];ToIndexDate@1210190001 : Date);
    VAR
      UnitPriceBudgetInternal@1100528302 : Record 11071770;
      ToUnitPriceBudgetInternal@1100528305 : Record 11071770;
    BEGIN
      UnitPriceBudgetInternal.SETRANGE("Price Book Type", FromType);
      UnitPriceBudgetInternal.SETRANGE("Price Book Code", FromCode);
      UnitPriceBudgetInternal.SETRANGE("Index Date", FromIndexDate);
      IF UnitPriceBudgetInternal.FINDSET THEN BEGIN
        REPEAT
          ToUnitPriceBudgetInternal.COPY(UnitPriceBudgetInternal);
          ToUnitPriceBudgetInternal."Price Book Type" := ToType;
          ToUnitPriceBudgetInternal."Price Book Code" := ToCode;
          ToUnitPriceBudgetInternal."Index Date" := ToIndexDate;
          ToUnitPriceBudgetInternal.INSERT(TRUE);
        UNTIL UnitPriceBudgetInternal.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyUnitPriceBudgetCustomer@1100528303(FromCode@1210190006 : Code[20];FromIndexDate@1210190005 : Date;ToCode@1210190002 : Code[20];ToIndexDate@1210190001 : Date);
    VAR
      UnitPriceBudgetCustomer@1100528303 : Record 11071771;
      ToUnitPriceBudgetCustomer@1100528304 : Record 11071771;
    BEGIN
      UnitPriceBudgetCustomer.SETRANGE("Price Book Code", FromCode);
      UnitPriceBudgetCustomer.SETRANGE("Index Date", FromIndexDate);
      IF UnitPriceBudgetCustomer.FINDSET THEN BEGIN
        REPEAT
          ToUnitPriceBudgetCustomer.COPY(UnitPriceBudgetCustomer);
          ToUnitPriceBudgetCustomer."Price Book Code" := ToCode;
          ToUnitPriceBudgetCustomer."Index Date" := ToIndexDate;
          ToUnitPriceBudgetCustomer.INSERT(TRUE);
        UNTIL UnitPriceBudgetCustomer.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyUnitPriceSet@1100528624(FromCode@1100528604 : Code[20];FromIndexDate@1100528603 : Date;ToCode@1100528601 : Code[20];ToIndexDate@1100528600 : Date);
    VAR
      ServiceUnitPriceSet@1100528606 : Record 11072284;
      ServiceUnitPriceSetLine@1100528607 : Record 11072285;
      ToServiceUnitPriceSet@1100528609 : Record 11072284;
      ToServiceUnitPriceSetLine@1100528608 : Record 11072285;
    BEGIN
      ServiceUnitPriceSet.SETRANGE("Price Book Code", FromCode);
      ServiceUnitPriceSet.SETRANGE("Price Book Index Date", FromIndexDate);
      IF ServiceUnitPriceSet.FINDSET THEN
        REPEAT
          ToServiceUnitPriceSet := ServiceUnitPriceSet;
          ToServiceUnitPriceSet."Price Book Code" := ToCode;
          ToServiceUnitPriceSet."Price Book Index Date" := ToIndexDate;
          ToServiceUnitPriceSet.INSERT(TRUE);
        UNTIL ServiceUnitPriceSet.NEXT = 0;

      ServiceUnitPriceSetLine.SETRANGE("Price Book Code", FromCode);
      ServiceUnitPriceSetLine.SETRANGE("Price Book Index Date", FromIndexDate);
      IF ServiceUnitPriceSetLine.FINDSET THEN
        REPEAT
          ToServiceUnitPriceSetLine := ServiceUnitPriceSetLine;
          ToServiceUnitPriceSetLine."Price Book Code" := ToCode;
          ToServiceUnitPriceSetLine."Price Book Index Date" := ToIndexDate;
          ToServiceUnitPriceSetLine.INSERT(TRUE);
        UNTIL ServiceUnitPriceSetLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FillTempTableBudgetBreakdown@1100528304(VAR GenericTempTableBreakdown@1100528300 : Record 11020579;UnitPriceProdRecording@1100528301 : Record 11071773;UnitPriceProdRecordingLine@1100528303 : Record 11071774);
    VAR
      UnitPriceBudgetInternal@1100528302 : Record 11071770;
      ServiceOrder@1100525000 : Record 11012823;
    BEGIN
      IF NOT ServiceOrder.GET(UnitPriceProdRecording."Service Order No.") THEN
        ServiceOrder.INIT;

      UnitPriceBudgetInternal.SETRANGE("Price Book Type", UnitPriceProdRecordingLine."Price Book Type");
      UnitPriceBudgetInternal.SETRANGE("Price Book Code", UnitPriceProdRecordingLine."Price Book Code");
      UnitPriceBudgetInternal.SETRANGE("Index Date", UnitPriceProdRecordingLine."Index Date");
      UnitPriceBudgetInternal.SETRANGE("Unit Price Code", UnitPriceProdRecordingLine."Unit Price Code");
      IF NOT UnitPriceBudgetInternal.FINDSET THEN BEGIN
        GenericTempTableBreakdown.INIT;
        GenericTempTableBreakdown."Key Code1" := 'Breakdown';
        GenericTempTableBreakdown."Key Code2" := UnitPriceProdRecordingLine."Price Book Code";
        GenericTempTableBreakdown."Key Code3" := FORMAT(UnitPriceProdRecordingLine."Index Date");
        GenericTempTableBreakdown."Key Code4" := UnitPriceProdRecordingLine."Unit Price Code";
        GenericTempTableBreakdown."Key Code5" := '10000';
        GenericTempTableBreakdown."Key Code6" := '';
        IF UnitPriceProdRecordingLine."VAT Prod. Posting Group" <> '' THEN
          GenericTempTableBreakdown.Code1 := UnitPriceProdRecordingLine."VAT Prod. Posting Group"
        ELSE
          GenericTempTableBreakdown.Code1 := ServiceOrder."VAT Prod. Posting Group";
        GenericTempTableBreakdown.Dec1 := 100;
        GenericTempTableBreakdown.INSERT;
      END ELSE BEGIN
        REPEAT
          UnitPriceBudgetInternal.CALCFIELDS(Total);

          GenericTempTableBreakdown.INIT;
          GenericTempTableBreakdown."Key Code1" := 'Breakdown';
          GenericTempTableBreakdown."Key Code2" := UnitPriceBudgetInternal."Price Book Code";
          GenericTempTableBreakdown."Key Code3" := FORMAT(UnitPriceBudgetInternal."Index Date");
          GenericTempTableBreakdown."Key Code4" := UnitPriceBudgetInternal."Unit Price Code";
          GenericTempTableBreakdown."Key Code5" := FORMAT(UnitPriceBudgetInternal."Line No.");
          GenericTempTableBreakdown."Key Code6" := '';
          IF UnitPriceBudgetInternal."VAT Prod. Posting Group" <> '' THEN
            GenericTempTableBreakdown.Code1 := UnitPriceBudgetInternal."VAT Prod. Posting Group"
          ELSE
            GenericTempTableBreakdown.Code1 := ServiceOrder."VAT Prod. Posting Group";
          IF UnitPriceBudgetInternal.Total <> 0 THEN
            GenericTempTableBreakdown.Dec1 := (UnitPriceBudgetInternal.Amount / UnitPriceBudgetInternal.Total) * 100;
          GenericTempTableBreakdown.INSERT;
        UNTIL (UnitPriceBudgetInternal.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE FillTempTableVATLine@1100528309(VAR GenericTempTableBreakdown@1100528300 : Record 11020579;VAR GenericTempTableVATLine@1100528301 : Record 11020579;SUPProductionLine@1100528302 : Record 11071774;Quantity@1100528303 : Decimal;ExtensionYN@1100528304 : Boolean);
    BEGIN
      GenericTempTableBreakdown.SETRANGE("Key Code1", 'Breakdown');
      IF (NOT GenericTempTableBreakdown.FINDSET) THEN
        EXIT;

      REPEAT
        IF NOT GenericTempTableVATLine.GET('VATLine',
             FORMAT(ExtensionYN),
             GenericTempTableBreakdown.Code1, //VAT Prod. Posting Group
             '', '', '')
        THEN BEGIN
          GenericTempTableVATLine.INIT;
          GenericTempTableVATLine."Key Code1" := 'VATLine';
          GenericTempTableVATLine."Key Code2" := FORMAT(ExtensionYN);
          GenericTempTableVATLine."Key Code3" := GenericTempTableBreakdown.Code1; //VAT Prod. Posting Group
          GenericTempTableVATLine."Key Code4" := '';
          GenericTempTableVATLine."Key Code5" := '';
          GenericTempTableVATLine."Key Code6" := '';
          GenericTempTableVATLine.INSERT;
        END;
        GenericTempTableVATLine.Dec1 += SUPProductionLine."Unit Price" * GenericTempTableBreakdown.Dec1 / 100;
        GenericTempTableVATLine.Dec2 := Quantity;
        GenericTempTableVATLine.Bool1 := ExtensionYN;
        GenericTempTableVATLine.MODIFY;
      UNTIL (GenericTempTableBreakdown.NEXT = 0);
    END;

    PROCEDURE CopyUnitPriceRoomVersion@1100528611(ISUPRoomRelation@1100528600 : Record 11071982;IIndexDate@1100528603 : Date;IIncludeVersionLines@1100528604 : Boolean;VAR OSUPRoomRelation@1100528605 : Record 11071982);
    VAR
      SUPRoomRelationLine@1100528606 : Record 11071983;
      ToSUPRoomRelationLine@1100528601 : Record 11071983;
    BEGIN
      OSUPRoomRelation := ISUPRoomRelation;
      OSUPRoomRelation."Index Date" := IIndexDate;
      OSUPRoomRelation.INSERT(TRUE);

      IF IIncludeVersionLines THEN BEGIN
        SUPRoomRelationLine.SETRANGE("Customer No.", ISUPRoomRelation."Customer No.");
        SUPRoomRelationLine.SETRANGE("Room Code", ISUPRoomRelation."Room Code");
        SUPRoomRelationLine.SETRANGE("Index Date", ISUPRoomRelation."Index Date");
        IF SUPRoomRelationLine.FINDSET THEN
          REPEAT
            ToSUPRoomRelationLine := SUPRoomRelationLine;
            ToSUPRoomRelationLine."Index Date" := IIndexDate;
            ToSUPRoomRelationLine.INSERT(TRUE);
          UNTIL SUPRoomRelationLine.NEXT = 0;
      END;
    END;

    PROCEDURE GetLatestPriceBookIndexDate@1210190031(Type@1210190003 : Option;Code@1210190001 : Code[20]) : Date;
    VAR
      ServicePriceBook@1210190000 : Record 11071768;
    BEGIN
      ServicePriceBook.SETRANGE(Type, Type);
      ServicePriceBook.SETRANGE(Code, Code);
      IF ServicePriceBook.FINDLAST THEN
        EXIT(ServicePriceBook."Index Date");
    END;

    PROCEDURE CopySurchargeSets@1100528653(IFromPriceBookCode@1100528600 : Code[20];IFromPriceBookIndexDate@1100528601 : Date;IToPriceBookCode@1100528603 : Code[20];IToPriceBookIndexDate@1100528604 : Date);
    VAR
      PriceBookSurchargeSet@1100528607 : Record 11072315;
    BEGIN
      PriceBookSurchargeSet.SETRANGE("Price Book Code", IFromPriceBookCode);
      PriceBookSurchargeSet.SETRANGE("Price Book Index Date", IFromPriceBookIndexDate);
      IF PriceBookSurchargeSet.FINDSET THEN
        REPEAT
          CopySurchargeSet(
            IFromPriceBookCode, IFromPriceBookIndexDate, PriceBookSurchargeSet.Code,
            IToPriceBookCode, IToPriceBookIndexDate, PriceBookSurchargeSet.Code, PriceBookSurchargeSet.Description);
        UNTIL PriceBookSurchargeSet.NEXT = 0;
    END;

    PROCEDURE CopySurchargeSet@1100528652(IFromPriceBookCode@1100528600 : Code[20];IFromPriceBookIndexDate@1100528601 : Date;IFromSurchargeSetCode@1100528602 : Code[10];IToPriceBookCode@1100528603 : Code[20];IToPriceBookIndexDate@1100528604 : Date;IToSurchargeSetCode@1100528605 : Code[10];IToSurchargeSetDescription@1100528606 : Text[50]);
    VAR
      FromPriceBookSurchargeSet@1100528607 : Record 11072315;
      FromPriceBookSurchargeSetLine@1100528609 : Record 11072316;
      ToPriceBookSurchargeSet@1100528608 : Record 11072315;
      ToPriceBookSurchargeSetLine@1100528610 : Record 11072316;
    BEGIN
      FromPriceBookSurchargeSet.GET(IFromPriceBookCode, IFromPriceBookIndexDate, IFromSurchargeSetCode);
      IF ToPriceBookSurchargeSet.GET(IToPriceBookCode, IToPriceBookIndexDate, IToSurchargeSetCode) THEN BEGIN
        ToPriceBookSurchargeSetLine.SETRANGE("Price Book Code", ToPriceBookSurchargeSet."Price Book Code");
        ToPriceBookSurchargeSetLine.SETRANGE("Price Book Index Date", ToPriceBookSurchargeSet."Price Book Index Date");
        ToPriceBookSurchargeSetLine.SETRANGE("Surcharge Set Code", ToPriceBookSurchargeSet.Code);
        IF NOT ToPriceBookSurchargeSetLine.ISEMPTY THEN
          ERROR(Text009, ToPriceBookSurchargeSetLine.TABLECAPTION);
      END ELSE BEGIN
        ToPriceBookSurchargeSet."Price Book Code" := IToPriceBookCode;
        ToPriceBookSurchargeSet."Price Book Index Date" := IToPriceBookIndexDate;
        ToPriceBookSurchargeSet.Code := IToSurchargeSetCode;
        ToPriceBookSurchargeSet.INSERT(TRUE);
      END;
      IF (IToSurchargeSetDescription <> '') AND (ToPriceBookSurchargeSet.Description <> IToSurchargeSetDescription) THEN BEGIN
        ToPriceBookSurchargeSet.Description := IToSurchargeSetDescription;
        ToPriceBookSurchargeSet.MODIFY(TRUE);
      END;
      FromPriceBookSurchargeSetLine.SETRANGE("Price Book Code", FromPriceBookSurchargeSet."Price Book Code");
      FromPriceBookSurchargeSetLine.SETRANGE("Price Book Index Date", FromPriceBookSurchargeSet."Price Book Index Date");
      FromPriceBookSurchargeSetLine.SETRANGE("Surcharge Set Code", FromPriceBookSurchargeSet.Code);
      IF FromPriceBookSurchargeSetLine.FINDSET THEN
        REPEAT
          ToPriceBookSurchargeSetLine.TRANSFERFIELDS(FromPriceBookSurchargeSetLine);
          ToPriceBookSurchargeSetLine."Price Book Code" := ToPriceBookSurchargeSet."Price Book Code";
          ToPriceBookSurchargeSetLine."Price Book Index Date" := ToPriceBookSurchargeSet."Price Book Index Date";
          ToPriceBookSurchargeSetLine."Surcharge Set Code" := ToPriceBookSurchargeSet.Code;
          ToPriceBookSurchargeSetLine.INSERT(TRUE);
        UNTIL FromPriceBookSurchargeSetLine.NEXT = 0;
    END;

    PROCEDURE "----"@1100528612();
    BEGIN
    END;

    LOCAL PROCEDURE GetRoomVersionLinesDS@1100528614(IServiceUnitPriceLine@1100528600 : Record 11071769;VAR OSUPRoomRelationLine@1100528602 : Record 11071983);
    BEGIN
      OSUPRoomRelationLine.RESET;
      OSUPRoomRelationLine.SETRANGE("Customer No.", IServiceUnitPriceLine."Price Book Code");
      OSUPRoomRelationLine.SETRANGE("Index Date", IServiceUnitPriceLine."Index Date");
      OSUPRoomRelationLine.SETRANGE("Price Book Type", IServiceUnitPriceLine."Price Book Type");
      OSUPRoomRelationLine.SETRANGE("Price Book Code", IServiceUnitPriceLine."Price Book Code");
      OSUPRoomRelationLine.SETRANGE("Unit Price Code", IServiceUnitPriceLine.Code);
    END;

    PROCEDURE GetNoOfRoomsOfSUPLine@1100528617(IServiceUnitPriceLine@1100528600 : Record 11071769) : Integer;
    VAR
      SUPRoomRelationLine@1100528601 : Record 11071983;
    BEGIN
      GetRoomVersionLinesDS(IServiceUnitPriceLine, SUPRoomRelationLine);
      EXIT(SUPRoomRelationLine.COUNT);
    END;

    PROCEDURE GetNoOfRoomsTextOfSUPLine@1100528615(IServiceUnitPriceLine@1100528600 : Record 11071769) : Text;
    VAR
      SUPRoomRelationLine@1100528601 : Record 11071983;
      NoOfLines@1100528602 : Integer;
    BEGIN
      GetRoomVersionLinesDS(IServiceUnitPriceLine, SUPRoomRelationLine);
      NoOfLines := SUPRoomRelationLine.COUNT;
      CASE NoOfLines OF
        0:
          EXIT;
        1:
          BEGIN
            SUPRoomRelationLine.FINDFIRST;
            EXIT(SUPRoomRelationLine."Room Code");
          END;
      ELSE
          EXIT(STRSUBSTNO('[%1]', NoOfLines));
      END;
    END;

    PROCEDURE ShowRoomsOfSupLine@1100528618(IServiceUnitPriceLine@1100528600 : Record 11071769);
    VAR
      SUPRoomRelationLine@1100528601 : Record 11071983;
      SUPRoom@1100528602 : Record 11071950;
    BEGIN
      GetRoomVersionLinesDS(IServiceUnitPriceLine, SUPRoomRelationLine);
      IF SUPRoomRelationLine.FINDSET THEN
        REPEAT
          SUPRoom."Customer No." := SUPRoomRelationLine."Customer No.";
          SUPRoom.Code := SUPRoomRelationLine."Room Code";
          SUPRoom.MARK(TRUE);
        UNTIL SUPRoomRelationLine.NEXT = 0;
      SUPRoom.MARKEDONLY(TRUE);
      PAGE.RUNMODAL(0, SUPRoom);
    END;

    PROCEDURE "-----"@1100528616();
    BEGIN
    END;

    PROCEDURE FillSUPVATCustomerRelation@1100528619(IPriceBookCode@1100528600 : Code[20];IPriceBookIndexDate@1100528601 : Date);
    VAR
      SUPCustomerBudgetLine@1100528602 : Record 11071771;
      SUPVATCustomerRelation@1100528603 : Record 11071992;
    BEGIN
      SUPCustomerBudgetLine.SETRANGE("Price Book Code", IPriceBookCode);
      SUPCustomerBudgetLine.SETRANGE("Index Date", IPriceBookIndexDate);
      IF SUPCustomerBudgetLine.FINDSET THEN
        REPEAT
          IF SUPCustomerBudgetLine."VAT Code Men Hours Customer" <> '' THEN
            IF NOT SUPVATCustomerRelation.GET(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."VAT Code Men Hours Customer") THEN
              AddSUPVATCustomerRelation(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."VAT Code Men Hours Customer");
          IF SUPCustomerBudgetLine."VAT Code Material Customer" <> '' THEN
            IF NOT SUPVATCustomerRelation.GET(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."VAT Code Material Customer") THEN
             AddSUPVATCustomerRelation(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."VAT Code Material Customer");
        UNTIL SUPCustomerBudgetLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AddSUPVATCustomerRelation@1100528621(IPriceBookCode@1100528602 : Code[20];IPriceBookIndexDate@1100528601 : Date;IVATCodeCustomer@1100528600 : Code[10]);
    VAR
      SUPVATCustomerRelation@1100528603 : Record 11071992;
    BEGIN
      SUPVATCustomerRelation."Price Book Code" := IPriceBookCode;
      SUPVATCustomerRelation."Index Date" := IPriceBookIndexDate;
      SUPVATCustomerRelation."VAT Code Customer" := IVATCodeCustomer;
      SUPVATCustomerRelation.INSERT;
    END;

    PROCEDURE FillSUPRateCustomerRelation@1100528620(IPriceBookCode@1100528601 : Code[20];IPriceBookIndexDate@1100528600 : Date);
    VAR
      SUPCustomerBudgetLine@1100528602 : Record 11071771;
    BEGIN
      SUPCustomerBudgetLine.SETRANGE("Price Book Code", IPriceBookCode);
      SUPCustomerBudgetLine.SETRANGE("Index Date", IPriceBookIndexDate);
      SUPCustomerBudgetLine.SETFILTER("Hour Rate", '<>%1', 0);
      IF SUPCustomerBudgetLine.FINDSET THEN
        REPEAT
          IF NOT SUPRateCustomerRelationExists(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."Hour Rate") THEN
            AddSUPRateCustomerRelation(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."Hour Rate");
        UNTIL SUPCustomerBudgetLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SUPRateCustomerRelationExists@1100528623(IPriceBookCode@1100528601 : Code[20];IPriceBookIndexDate@1100528600 : Date;IRate@1100528602 : Decimal) : Boolean;
    VAR
      SUPRateCustomerRelation@1100528603 : Record 11071993;
    BEGIN
      SUPRateCustomerRelation.SETRANGE("Price Book Code", IPriceBookCode);
      SUPRateCustomerRelation.SETRANGE("Index Date", IPriceBookIndexDate);
      SUPRateCustomerRelation.SETRANGE("Rate Customer", IRate);
      EXIT(NOT SUPRateCustomerRelation.ISEMPTY);
    END;

    LOCAL PROCEDURE AddSUPRateCustomerRelation@1100528622(IPriceBookCode@1100528601 : Code[20];IPriceBookIndexDate@1100528600 : Date;IRate@1100528602 : Decimal);
    VAR
      SUPRateCustomerRelation@1100528603 : Record 11071993;
    BEGIN
      SUPRateCustomerRelation.SETRANGE("Price Book Code", IPriceBookCode);
      SUPRateCustomerRelation.SETRANGE("Index Date", IPriceBookIndexDate);
      IF NOT SUPRateCustomerRelation.FINDLAST THEN
        SUPRateCustomerRelation.INIT;
      SUPRateCustomerRelation."Price Book Code" := IPriceBookCode;
      SUPRateCustomerRelation."Index Date" := IPriceBookIndexDate;
      SUPRateCustomerRelation."Entry No." += 10000;
      SUPRateCustomerRelation."Rate Customer" := IRate;
      SUPRateCustomerRelation.INSERT;
    END;

    PROCEDURE FillSUPUOMCustomerRelation@1100528627(IPriceBookCode@1100528601 : Code[20];IPriceBookIndexDate@1100528600 : Date);
    VAR
      SUPCustomerBudgetLine@1100528603 : Record 11071771;
      SUPUOMCustomerRelation@1100528602 : Record 11071994;
    BEGIN
      SUPCustomerBudgetLine.SETRANGE("Price Book Code", IPriceBookCode);
      SUPCustomerBudgetLine.SETRANGE("Index Date", IPriceBookIndexDate);
      SUPCustomerBudgetLine.SETFILTER("Unit of Measure", '<>%1', '');
      IF SUPCustomerBudgetLine.FINDSET THEN
        REPEAT
          IF NOT SUPUOMCustomerRelation.GET(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."Unit of Measure") THEN
            AddSUPUOMCustomerRelation(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."Unit of Measure");
        UNTIL SUPCustomerBudgetLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AddSUPUOMCustomerRelation@1100528628(IPriceBookCode@1100528602 : Code[20];IPriceBookIndexDate@1100528601 : Date;IUOMCustomer@1100528603 : Code[10]);
    VAR
      SUPUOMCustomerRelation@1100528600 : Record 11071994;
    BEGIN
      SUPUOMCustomerRelation."Price Book Code" := IPriceBookCode;
      SUPUOMCustomerRelation."Index Date" := IPriceBookIndexDate;
      SUPUOMCustomerRelation."Unit of Measure Customer" := IUOMCustomer;
      SUPUOMCustomerRelation.INSERT;
    END;

    PROCEDURE FillSUPCostObjectCustomerRelation@1100527001(IPriceBookCode@1100527001 : Code[20];IPriceBookIndexDate@1100527000 : Date);
    VAR
      SUPCustomerBudgetLine@1100527002 : Record 11071771;
      SUPCostObjectCustRelation@1100527003 : Record 11072323;
    BEGIN
      SUPCustomerBudgetLine.SETRANGE("Price Book Code", IPriceBookCode);
      SUPCustomerBudgetLine.SETRANGE("Index Date", IPriceBookIndexDate);
      SUPCustomerBudgetLine.SETFILTER("STABU Code", '<>%1', '');
      IF SUPCustomerBudgetLine.FINDSET THEN
        REPEAT
          IF NOT SUPCostObjectCustRelation.GET(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."STABU Code") THEN
            AddSUPCostObjectCustomerRelation(IPriceBookCode, IPriceBookIndexDate, SUPCustomerBudgetLine."STABU Code");
        UNTIL SUPCustomerBudgetLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AddSUPCostObjectCustomerRelation@1100527000(IPriceBookCode@1100527002 : Code[20];IPriceBookIndexDate@1100527001 : Date;ICostObjectCustomer@1100527000 : Code[20]);
    VAR
      SUPCostObjectCustRelation@1100527003 : Record 11072323;
    BEGIN
      SUPCostObjectCustRelation."Price Book Code" := IPriceBookCode;
      SUPCostObjectCustRelation."Index Date" := IPriceBookIndexDate;
      SUPCostObjectCustRelation."STABU Code Customer" := ICostObjectCustomer;
      SUPCostObjectCustRelation.INSERT;
    END;

    LOCAL PROCEDURE "------"@1100528824();
    BEGIN
    END;

    PROCEDURE CopyLocationTypeRelations@1100528625(IFromLocationType@1100528600 : Code[20];IFromCustomerNo@1100528601 : Code[20];IToCustomerNo@1100528602 : Code[20];ICopyRoom@1100528613 : Boolean;ICopyPart@1100528614 : Boolean;ICopyRoomParts@1100528605 : Boolean;ICopyPartProblemCodes@1100528606 : Boolean);
    VAR
      ServiceLocationTypeRoom@1100528603 : Record 11072281;
      ToServiceLocationTypeRoom@1100528604 : Record 11072281;
      SUPRoomPart@1100528607 : Record 11072282;
      ToSUPRoomPart@1100528608 : Record 11072282;
      SUPPartServiceAnalysis@1100528609 : Record 11072283;
      ToSUPPartServiceAnalysis@1100528610 : Record 11072283;
      SUPRoom@1100528611 : Record 11071950;
      SUPPart@1100528612 : Record 11071951;
    BEGIN
      ServiceLocationTypeRoom.SETRANGE("Service Location Type", IFromLocationType);
      ServiceLocationTypeRoom.SETRANGE("Customer No.", IFromCustomerNo);
      IF ServiceLocationTypeRoom.FINDSET THEN
        REPEAT
          IF ICopyRoom THEN
            IF NOT SUPRoom.GET(IToCustomerNo, ServiceLocationTypeRoom."Room (SUP)") THEN
              IF SUPRoom.GET(IFromCustomerNo, ServiceLocationTypeRoom."Room (SUP)") THEN BEGIN
                SUPRoom."Customer No." := IToCustomerNo;
                SUPRoom.INSERT(TRUE);
              END;
          IF SUPRoom.GET(IToCustomerNo, ServiceLocationTypeRoom."Room (SUP)") THEN BEGIN
            ToServiceLocationTypeRoom := ServiceLocationTypeRoom;
            ToServiceLocationTypeRoom."Customer No." := IToCustomerNo;
            IF ToServiceLocationTypeRoom.INSERT(TRUE) THEN;
          END;
        UNTIL ServiceLocationTypeRoom.NEXT = 0;

      IF ICopyRoomParts THEN BEGIN
        SUPRoomPart.SETRANGE("Customer No.", IFromCustomerNo);
        IF SUPRoomPart.FINDSET THEN
          REPEAT
            IF ICopyPart THEN
              IF NOT SUPPart.GET(IToCustomerNo, SUPRoomPart."Part (SUP)") THEN
                IF SUPPart.GET(IFromCustomerNo, SUPRoomPart."Part (SUP)") THEN BEGIN
                  SUPPart."Customer No." := IToCustomerNo;
                  SUPPart.INSERT(TRUE);
                END;

            IF SUPRoom.GET(IToCustomerNo, SUPRoomPart."Room (SUP)") AND
               SUPPart.GET(IToCustomerNo, SUPRoomPart."Part (SUP)")
            THEN BEGIN
              ToSUPRoomPart := SUPRoomPart;
              ToSUPRoomPart."Customer No." := IToCustomerNo;
              IF ToSUPRoomPart.INSERT(TRUE) THEN;
            END;
          UNTIL SUPRoomPart.NEXT = 0;
      END;

      IF ICopyPartProblemCodes THEN BEGIN
        SUPPartServiceAnalysis.SETRANGE("Customer No.", IFromCustomerNo);
        IF SUPPartServiceAnalysis.FINDSET THEN
          REPEAT
            IF SUPPart.GET(IToCustomerNo, SUPPartServiceAnalysis."Part (SUP)") THEN BEGIN
              ToSUPPartServiceAnalysis := SUPPartServiceAnalysis;
              ToSUPPartServiceAnalysis."Customer No." := IToCustomerNo;
              IF ToSUPPartServiceAnalysis.INSERT(TRUE) THEN;
            END;
          UNTIL SUPPartServiceAnalysis.NEXT = 0;
      END;
    END;

    PROCEDURE CustomerHasCustomizations@1100528632(ICustomerNo@1100528602 : Code[20]) : Boolean;
    VAR
      SUPRoom@1100528603 : Record 11071950;
    BEGIN
      SUPRoom.SETRANGE("Customer No.", ICustomerNo);
      EXIT(NOT SUPRoom.ISEMPTY);
    END;

    PROCEDURE ValidateRoom@1100528630(ICustomerNo@1100528601 : Code[20];IRoom@1100528600 : Code[20]);
    VAR
      SUPRoom@1100528602 : Record 11071950;
    BEGIN
      IF IRoom = '' THEN
       EXIT;
      IF NOT CustomerHasCustomizations(ICustomerNo) THEN
        ICustomerNo := '';
      SUPRoom.SETRANGE("Customer No.", ICustomerNo);
      SUPRoom.SETRANGE(Code, IRoom);
      SUPRoom.FINDFIRST;
    END;

    PROCEDURE GetRoomDS@1100528633(ICustomerNo@1100528600 : Code[20];IServiceLocationType@1100528601 : Code[20];VAR OSUPRoom@1100528602 : Record 11071950);
    VAR
      ServiceLocationTypeRoom@1100528604 : Record 11072281;
    BEGIN
      IF NOT CustomerHasCustomizations(ICustomerNo) THEN
        ICustomerNo := '';
      OSUPRoom.RESET;
      OSUPRoom.SETRANGE("Customer No.", ICustomerNo);
      IF IServiceLocationType <> '' THEN BEGIN
        ServiceLocationTypeRoom.SETRANGE("Service Location Type", IServiceLocationType);
        ServiceLocationTypeRoom.SETRANGE("Customer No.", ICustomerNo);
        IF ServiceLocationTypeRoom.FINDSET THEN BEGIN
          REPEAT
            OSUPRoom."Customer No." := ServiceLocationTypeRoom."Customer No.";
            OSUPRoom.Code := ServiceLocationTypeRoom."Room (SUP)";
            OSUPRoom.MARK(TRUE);
          UNTIL ServiceLocationTypeRoom.NEXT = 0;
          OSUPRoom.MARKEDONLY(TRUE);
        END;
      END;
    END;

    PROCEDURE LookupRoom@1100528626(ICustomerNo@1100528602 : Code[20];IServiceLocationType@1100528603 : Code[20];VAR ORoomCode@1100528600 : Code[20]) : Boolean;
    VAR
      SUPRoom@1100528601 : Record 11071950;
    BEGIN
      GetRoomDS(ICustomerNo, IServiceLocationType, SUPRoom);
      IF ORoomCode <> '' THEN BEGIN
        SUPRoom."Customer No." := ICustomerNo;
        SUPRoom.Code := ORoomCode;
      END;
      IF PAGE.RUNMODAL(0, SUPRoom) = ACTION::LookupOK THEN BEGIN
        ORoomCode := SUPRoom.Code;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE ValidatePart@1100528636(ICustomerNo@1100528600 : Code[20];IPartCode@1100528602 : Code[20]);
    VAR
      SUPPart@1100528603 : Record 11071951;
    BEGIN
      IF IPartCode = '' THEN
        EXIT;
      IF NOT CustomerHasCustomizations(ICustomerNo) THEN
        ICustomerNo := '';
      SUPPart.GET(ICustomerNo, IPartCode);
    END;

    PROCEDURE GetPartDS@1100528639(ICustomerNo@1100528600 : Code[20];IRoomCode@1100528601 : Code[20];VAR OSUPPart@1100528602 : Record 11071951);
    VAR
      SUPRoomPart@1100528603 : Record 11072282;
    BEGIN
      IF NOT CustomerHasCustomizations(ICustomerNo) THEN
        ICustomerNo := '';
      OSUPPart.SETRANGE("Customer No.", ICustomerNo);
      IF IRoomCode <> '' THEN BEGIN
        SUPRoomPart.SETRANGE("Customer No.", ICustomerNo);
        SUPRoomPart.SETRANGE("Room (SUP)", IRoomCode);
        IF SUPRoomPart.FINDSET THEN BEGIN
          REPEAT
            OSUPPart."Customer No." := SUPRoomPart."Customer No.";
            OSUPPart.Code := SUPRoomPart."Part (SUP)";
            OSUPPart.MARK(TRUE);
          UNTIL SUPRoomPart.NEXT = 0;
          OSUPPart.MARKEDONLY(TRUE);
        END;
      END;
    END;

    PROCEDURE LookupPart@1100528638(ICustomerNo@1100528600 : Code[20];IRoomCode@1100528601 : Code[20];VAR OPartCode@1100528602 : Code[20]) : Boolean;
    VAR
      SUPPart@1100528603 : Record 11071951;
    BEGIN
      GetPartDS(ICustomerNo, IRoomCode, SUPPart);
      IF PAGE.RUNMODAL(0, SUPPart) = ACTION::LookupOK THEN BEGIN
        OPartCode := SUPPart.Code;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE DetermineCustomerNo@1100528629(IPriceBookType@1100528600 : 'None,Internal,Customer';IPriceBookCode@1100528601 : Code[20]) : Code[20];
    BEGIN
      IF IPriceBookType = IPriceBookType::Customer THEN
        EXIT(IPriceBookCode);
    END;

    PROCEDURE GetServiceLocationTypeFromServiceOrder@1100528631(IServiceOrderNo@1100528600 : Code[20]) : Code[20];
    VAR
      ServiceOrder@1100528601 : Record 11012823;
    BEGIN
      IF ServiceOrder.GET(IServiceOrderNo) THEN
        EXIT(ServiceOrder."Service Location Type");
    END;

    PROCEDURE GetRoomDescription@1100525047(ICustomerNo@1100528602 : Code[20];IRoomCode@1100528603 : Code[20]) : Text[50];
    VAR
      SUPRoom@1100525000 : Record 11071950;
      ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
    BEGIN
      IF NOT ServiceUnitPriceManagement.CustomerHasCustomizations(ICustomerNo) THEN
        ICustomerNo := '';
      IF SUPRoom.GET(ICustomerNo, IRoomCode) THEN
        EXIT(SUPRoom.Description);
    END;

    PROCEDURE GetPartDescription@1100525048(ICustomerNo@1100528602 : Code[20];IPartCode@1100528603 : Code[20]) : Text[50];
    VAR
      SUPPart@1100525000 : Record 11071951;
      ServiceUnitPriceManagement@1100528600 : Codeunit 11012846;
    BEGIN
      IF NOT ServiceUnitPriceManagement.CustomerHasCustomizations(ICustomerNo) THEN
        ICustomerNo := '';
      IF SUPPart.GET(ICustomerNo, IPartCode) THEN
        EXIT(SUPPart.Description);
    END;

    PROCEDURE GetProblemsDS@1100528605(ICustomerNo@1100528603 : Code[20];IServiceLocationType@1100528607 : Code[20];IRoomCode@1100528600 : Code[20];IPartCode@1100528601 : Code[20];VAR OServiceAnalysis@1100528602 : Record 11012842);
    VAR
      ServiceLocationTypeRoom@1100528606 : Record 11072281;
      SUPRoom@1100529400 : Record 11071950;
      SUPPart@1100529401 : Record 11071951;
      SUPPartServiceAnalysis@1100528610 : Record 11072283;
      ServiceAnalysis2@1100528611 : Record 11012842;
      ServiceUnitPriceManagement@1100528605 : Codeunit 11012846;
      CustomerNo@1100528604 : Code[20];
      Skip@1100528609 : Boolean;
    BEGIN
      IF (IRoomCode = '') AND (IPartCode = '') THEN
        EXIT;
      CustomerNo := ICustomerNo;
      IF NOT ServiceUnitPriceManagement.CustomerHasCustomizations(CustomerNo) THEN
        CustomerNo := '';
      ServiceAnalysis2.COPY(OServiceAnalysis);
      ServiceLocationTypeRoom.SETRANGE("Customer No.", CustomerNo);
      IF IServiceLocationType <> '' THEN
        ServiceLocationTypeRoom.SETRANGE("Service Location Type", IServiceLocationType);

      SUPRoom.SETRANGE("Customer No.", CustomerNo);
      IF IRoomCode <> '' THEN
        SUPRoom.SETRANGE(Code, IRoomCode);
      IF SUPRoom.FINDSET THEN
        REPEAT
          GetPartDS(CustomerNo, SUPRoom.Code, SUPPart);
          IF IPartCode <> '' THEN
            SUPPart.SETRANGE(Code, IPartCode);
          IF SUPPart.FINDSET THEN
            REPEAT
              Skip := FALSE;
              IF IServiceLocationType <> '' THEN BEGIN
                ServiceLocationTypeRoom.SETRANGE("Room (SUP)", SUPRoom.Code);
                Skip := ServiceLocationTypeRoom.ISEMPTY;
              END;
              IF NOT Skip THEN BEGIN
                SUPPartServiceAnalysis.SETRANGE("Customer No.", CustomerNo);
                SUPPartServiceAnalysis.SETRANGE("Part (SUP)", SUPPart.Code);
                IF SUPPartServiceAnalysis.FINDSET THEN
                  REPEAT
                    OServiceAnalysis.SETRANGE("Analysis Type", SUPPartServiceAnalysis."Analysis Type");
                    OServiceAnalysis.SETRANGE(Code, SUPPartServiceAnalysis."Analysis Code");
                    IF NOT OServiceAnalysis.ISEMPTY THEN BEGIN // Already marked, mark also in second record
                      ServiceAnalysis2."Analysis Type" := SUPPartServiceAnalysis."Analysis Type";
                      ServiceAnalysis2.Code := SUPPartServiceAnalysis."Analysis Code";
                      ServiceAnalysis2.MARK(TRUE);
                    END;
                    OServiceAnalysis.SETRANGE("Analysis Type");
                    OServiceAnalysis.SETRANGE(Code);
                  UNTIL SUPPartServiceAnalysis.NEXT = 0;
              END;
            UNTIL SUPPart.NEXT = 0;
        UNTIL SUPRoom.NEXT = 0;
      OServiceAnalysis.COPY(ServiceAnalysis2);
      OServiceAnalysis.MARKEDONLY(TRUE);
    END;

    PROCEDURE LinkToWorkOrders@1100528634(VAR IServiceUnitPrice@1100528600 : Record 11071772);
    VAR
      ServiceUnitPrice@1100528601 : Record 11071772;
    BEGIN
      ServiceUnitPrice.COPY(IServiceUnitPrice);
      IF ServiceUnitPrice.FINDSET THEN
        REPEAT
          IF ServiceUnitPrice.LinkToWorkOrder THEN
            ServiceUnitPrice.MODIFY(TRUE);
        UNTIL ServiceUnitPrice.NEXT = 0;
    END;

    PROCEDURE DeleteZeroLines@1100528635(IServiceOrderNo@1100528600 : Code[20]);
    VAR
      SUPRecordingLine@1100528601 : Record 11071772;
      ServiceOrder@1100528602 : Record 11012823;
      NoOfLinesDeleted@1100528603 : Integer;
    BEGIN
      ServiceOrder.GET(IServiceOrderNo);
      IF NOT (ServiceOrder."Unit Price Status" IN [ServiceOrder."Unit Price Status"::"Pre-Recording", ServiceOrder."Unit Price Status"::Recording]) THEN
        ServiceOrder.FIELDERROR("Unit Price Status");
      SUPRecordingLine.SETRANGE("Service Order No.", ServiceOrder."No.");
      IF SUPRecordingLine.FINDSET THEN
        REPEAT
          SUPRecordingLine.CALCFIELDS("Production Recording Quantity");
          IF (SUPRecordingLine."Pre-Recording Quantity" = 0) AND (SUPRecordingLine."Recording Quantity" = 0) AND (SUPRecordingLine."Production Recording Quantity" = 0) AND
             (SUPRecordingLine.GetNoOfDocuments = 0)
          THEN BEGIN
            SUPRecordingLine.DELETE(TRUE);
            NoOfLinesDeleted += 1;
          END;
        UNTIL SUPRecordingLine.NEXT = 0;
      IF GUIALLOWED THEN
        MESSAGE(Text006, NoOfLinesDeleted);
    END;

    PROCEDURE GetPriceBookInfo@1100528637(IServiceOrderNo@1100528600 : Code[20];VAR OPriceBookType@1100528601 : Option;VAR OPriceBookCode@1100528602 : Code[20];VAR OPriceBookIndexDate@1100528606 : Date);
    VAR
      ServiceOrder@1100528603 : Record 11012823;
      ServiceOrderExtension@1100528604 : Record 11071727;
    BEGIN
      ServiceOrder.GET(IServiceOrderNo);
      ServiceOrderExtension.GetServOrderExtension(IServiceOrderNo);
      OPriceBookType := ServiceOrder."Price Book Type";
      OPriceBookCode := ServiceOrderExtension."Price Book Code";
      OPriceBookIndexDate := ServiceOrderExtension."Price Book Index Date";
    END;

    PROCEDURE GetPriceBookType@1100528644(IPriceBookCode@1100528601 : Code[20];IPriceBookIndexDate@1100528600 : Date) : Integer;
    VAR
      ServicePriceBook@1100528602 : Record 11071768;
    BEGIN
      IF ServicePriceBook.GET(IPriceBookCode, IPriceBookIndexDate) THEN
        EXIT(ServicePriceBook.Type);
    END;

    PROCEDURE CreateRecordingLinesBySets@1100528640(IServiceOrderNo@1100528600 : Code[20]);
    VAR
      ServiceOrderSUPSet@1100528601 : Record 11072291;
      SUPRecordingLine@1100528602 : Record 11071772;
      NoOfLinesCreated@1100528603 : Integer;
    BEGIN
      ServiceOrderSUPSet.SETRANGE("Service Order No.", IServiceOrderNo);
      IF ServiceOrderSUPSet.ISEMPTY THEN
        EXIT;
      SUPRecordingLine.SETRANGE("Service Order No.", IServiceOrderNo);
      IF NOT SUPRecordingLine.ISEMPTY THEN
        ERROR(Text007, SUPRecordingLine.TABLECAPTION);
      IF ServiceOrderSUPSet.FINDSET THEN
        REPEAT
          CreateRecordingLinesBySet(IServiceOrderNo, '', ServiceOrderSUPSet."Room Code", ServiceOrderSUPSet."Unit Price Set", NoOfLinesCreated);
        UNTIL ServiceOrderSUPSet.NEXT = 0;
      IF GUIALLOWED THEN
        MESSAGE(Text008, NoOfLinesCreated);
    END;

    LOCAL PROCEDURE CreateRecordingLinesBySet@1100528641(IServiceOrderNo@1100528600 : Code[20];IWorkOrderNo@1100528609 : Code[20];IRoomCode@1100528608 : Code[20];IServiceUnitPriceSetCode@1100528601 : Code[20];VAR ONoOfLinesCreated@1100528610 : Integer);
    VAR
      ServiceUnitPriceSetLine@1100528604 : Record 11072285;
      SUPRecordingLine@1100528603 : Record 11071772;
      PriceBookType@1100528605 : Option;
      PriceBookCode@1100528606 : Code[20];
      PriceBookIndexDate@1100528607 : Date;
      LineNo@1100528602 : Integer;
    BEGIN
      GetPriceBookInfo(IServiceOrderNo, PriceBookType, PriceBookCode, PriceBookIndexDate);
      SUPRecordingLine.SETRANGE("Service Order No.", IServiceOrderNo);
      IF SUPRecordingLine.FINDLAST THEN
        LineNo := SUPRecordingLine."Line No.";
      LineNo += 10000;
      ServiceUnitPriceSetLine.SETRANGE("Price Book Type", PriceBookType);
      ServiceUnitPriceSetLine.SETRANGE("Price Book Code", PriceBookCode);
      ServiceUnitPriceSetLine.SETRANGE("Price Book Index Date", PriceBookIndexDate);
      ServiceUnitPriceSetLine.SETRANGE("Set Code", IServiceUnitPriceSetCode);
      IF ServiceUnitPriceSetLine.FINDSET THEN
        REPEAT
          SUPRecordingLine.INIT;
          SUPRecordingLine.VALIDATE("Service Order No.", IServiceOrderNo);
          SUPRecordingLine."Line No." := LineNo;
          SUPRecordingLine.VALIDATE(Room, IRoomCode);
          SUPRecordingLine.VALIDATE("Unit Price Code", ServiceUnitPriceSetLine."Unit Price Code");
          SUPRecordingLine.CALCFIELDS("Unit Price Status");
          CASE SUPRecordingLine."Unit Price Status" OF
            SUPRecordingLine."Unit Price Status"::"Pre-Recording":
              SUPRecordingLine.VALIDATE("Pre-Recording Quantity", ServiceUnitPriceSetLine.Quantity);
            SUPRecordingLine."Unit Price Status"::Recording:
              SUPRecordingLine.VALIDATE("Recording Quantity", ServiceUnitPriceSetLine.Quantity);
          END;
          SUPRecordingLine.INSERT(TRUE);
          IF IWorkOrderNo <> '' THEN BEGIN
            SUPRecordingLine.VALIDATE("Work Order No.", IWorkOrderNo);
            SUPRecordingLine.MODIFY(TRUE);
          END;
          ONoOfLinesCreated += 1;
          LineNo += 10000;
        UNTIL ServiceUnitPriceSetLine.NEXT = 0;
    END;

    PROCEDURE GetUnitPriceHours@1100528643(IPriceBookCode@1100528601 : Code[20];IIndexDate@1100528602 : Date;IUnitPriceCode@1100528603 : Code[20]) : Decimal;
    VAR
      SUPInternalBudgetLine@1100528600 : Record 11071770;
    BEGIN
      SUPInternalBudgetLine.SETRANGE("Price Book Code", IPriceBookCode);
      SUPInternalBudgetLine.SETRANGE("Index Date", IIndexDate);
      SUPInternalBudgetLine.SETRANGE("Unit Price Code", IUnitPriceCode);
      SUPInternalBudgetLine.SETRANGE("Cost Type", SUPInternalBudgetLine."Cost Type"::Labor);
      SUPInternalBudgetLine.CALCSUMS(Hours);
      EXIT(SUPInternalBudgetLine.Hours);
    END;

    PROCEDURE GetProductionAmount@1100528662(IServiceOrderNo@1100528600 : Code[20]) ProductionAmount : Decimal;
    VAR
      SUPProductionLine@1100525000 : Record 11071774;
    BEGIN
      SUPProductionLine.SETRANGE("Service Order No.", IServiceOrderNo);
      SUPProductionLine.SETFILTER("SUP Production Status", '<>%1', SUPProductionLine."SUP Production Status"::Expired);
      IF SUPProductionLine.FINDSET THEN
        REPEAT
          ProductionAmount += SUPProductionLine."Production Value" ;
        UNTIL SUPProductionLine.NEXT = 0;
    END;

    PROCEDURE LookupProductionAmount@1100528663(IServiceOrderNo@1100528600 : Text);
    VAR
      SUPProductionLine@1100525000 : Record 11071774;
    BEGIN
      SUPProductionLine.FILTERGROUP(2);
      SUPProductionLine.SETRANGE("Service Order No.", IServiceOrderNo);
      SUPProductionLine.FILTERGROUP(0);
      SUPProductionLine.SETFILTER("SUP Production Status", '<>%1', SUPProductionLine."SUP Production Status"::Expired);
      PAGE.RUNMODAL(0, SUPProductionLine);
    END;

    LOCAL PROCEDURE "--------"@1100528646();
    BEGIN
    END;

    PROCEDURE ApplyPlanningSetToServiceOrder@1100528645(IServiceOrderNo@1100528600 : Code[20];IPlanningSetCode@1100528601 : Code[10]);
    VAR
      ServicePlanningSet@1100528602 : Record 11072306;
      ServiceOrder@1100528603 : Record 11012823;
      ServiceOrderExtension@1100528604 : Record 11071727;
    BEGIN
      TmpServicePlanningSetLine.RESET;
      TmpServicePlanningSetLine.DELETEALL;
      ServicePlanningSet.GET(IPlanningSetCode);
      ServicePlanningSet.CALCFIELDS("Price Book Type");
      ServiceOrder.GET(IServiceOrderNo);
      ServiceOrderExtension.GetServOrderExtension(ServiceOrder."No.");
      IF ((ServiceOrder."Price Book Type" = ServiceOrder."Price Book Type"::None) AND (ServicePlanningSet."Price Book Code" <> '')) OR
         ((ServiceOrder."Price Book Type" = ServicePlanningSet."Price Book Type") AND
          (ServiceOrderExtension."Price Book Code" = ServicePlanningSet."Price Book Code") AND
          (ServiceOrderExtension."Price Book Index Date" = ServicePlanningSet."Price Book Index Date"))
      THEN BEGIN
        IF ServicePlanningSet."Price Book Type" = ServicePlanningSet."Price Book Type"::Customer THEN
          ServiceOrder.VALIDATE("Customer No.", ServicePlanningSet."Price Book Code");
        ServiceOrder.VALIDATE("Price Book Type", ServicePlanningSet."Price Book Type");
        ServiceOrder.VALIDATE("Unit Price Status", ServicePlanningSet."Unit Price Status");
        ServiceOrder.MODIFY(TRUE);
        ServiceOrderExtension.VALIDATE("Price Book Code", ServicePlanningSet."Price Book Code");
        ServiceOrderExtension.VALIDATE("Price Book Index Date", ServicePlanningSet."Price Book Index Date");
        ServiceOrderExtension.UpdateServOrderExtension(ServiceOrder."No.");
      END;
      ApplyPlanningSetToWorkOrders(IServiceOrderNo, IPlanningSetCode);
    END;

    LOCAL PROCEDURE ApplyPlanningSetToWorkOrders@1100528647(IServiceOrderNo@1100528601 : Code[20];IPlanningSetCode@1100528600 : Code[10]);
    VAR
      ServicePlanningSetLine@1100528602 : Record 11072307;
      WorkOrder@1100528604 : Record 11229279;
      BudgetHours@1100528603 : Decimal;
    BEGIN
      ServicePlanningSetLine.SETRANGE("Set Code", IPlanningSetCode);
      IF ServicePlanningSetLine.FINDSET THEN
        REPEAT
          WorkOrder.INIT;
          WorkOrder."No." := '';
          WorkOrder.VALIDATE("Source Company", COMPANYNAME);
          WorkOrder.VALIDATE("Source Type", WorkOrder."Source Type"::ServiceOrder);
          WorkOrder.VALIDATE("Source No.", IServiceOrderNo);
          WorkOrder.INSERT(TRUE);
          WorkOrder.VALIDATE("Resource Type", ServicePlanningSetLine."Resource Type");
          WorkOrder.VALIDATE("Resource No.", ServicePlanningSetLine."Resource No.");
          WorkOrder.VALIDATE(Description, ServicePlanningSetLine.Description);
          WorkOrder.VALIDATE("Leading Resource", ServicePlanningSetLine."Leading Resource");
          WorkOrder.VALIDATE("Schedule Relation", ServicePlanningSetLine."Schedule Relation");
          WorkOrder.MODIFY(TRUE);
          TmpServicePlanningSetLine := ServicePlanningSetLine;
          TmpServicePlanningSetLine."Work Order No." := WorkOrder."No.";
          TmpServicePlanningSetLine.INSERT;
          ApplyPlanningSetToSUPRecordingLines(IServiceOrderNo, WorkOrder."No.", ServicePlanningSetLine."Set Code", ServicePlanningSetLine."Work Order Seq. No.");
          BudgetHours := ServicePlanningSetLine.GetBudgetHours;
          IF BudgetHours <> 0 THEN
            WorkOrder.VALIDATE("Expected Hours", BudgetHours)
          ELSE
            WorkOrder.VALIDATE("Expected Hours", ServicePlanningSetLine."Expected Hours");
          WorkOrder.VALIDATE("Duration Time", WorkOrder."Expected Hours");
          WorkOrder.MODIFY(TRUE);
        UNTIL ServicePlanningSetLine.NEXT = 0;
      UpdateWorkOrderRelatedTo;
    END;

    LOCAL PROCEDURE ApplyPlanningSetToSUPRecordingLines@1100528648(IServiceOrderNo@1100528601 : Code[20];IWorkOrderNo@1100528604 : Code[20];IPlanningSetCode@1100528600 : Code[10];IWorkOrderSeqNo@1100528603 : Integer);
    VAR
      ServicePlanningSetSUPLine@1100528602 : Record 11072308;
      SUPRecordingLine@1100528605 : Record 11071772;
      LineNo@1100528606 : Integer;
      NoOfLinesCreated@1100528607 : Integer;
    BEGIN
      ServicePlanningSetSUPLine.SETRANGE("Set Code", IPlanningSetCode);
      ServicePlanningSetSUPLine.SETRANGE("Work Order Seq. No.", IWorkOrderSeqNo);
      IF ServicePlanningSetSUPLine.FINDSET THEN
        REPEAT
          CASE ServicePlanningSetSUPLine."Unit Price Type" OF
            ServicePlanningSetSUPLine."Unit Price Type"::"Unit Price Set":
              CreateRecordingLinesBySet(IServiceOrderNo, IWorkOrderNo, ServicePlanningSetSUPLine."Room Code", ServicePlanningSetSUPLine.Code, NoOfLinesCreated);
            ServicePlanningSetSUPLine."Unit Price Type"::"Unit Price":
              BEGIN
                SUPRecordingLine.SETRANGE("Service Order No.", IServiceOrderNo);
                IF SUPRecordingLine.FINDLAST THEN
                  LineNo := SUPRecordingLine."Line No.";
                LineNo += 10000;
                SUPRecordingLine.INIT;
                SUPRecordingLine.VALIDATE("Service Order No.", IServiceOrderNo);
                SUPRecordingLine."Line No." := LineNo;
                SUPRecordingLine.VALIDATE(Room, ServicePlanningSetSUPLine."Room Code");
                SUPRecordingLine.VALIDATE(Part, ServicePlanningSetSUPLine."Part Code");
                SUPRecordingLine.VALIDATE("Unit Price Code", ServicePlanningSetSUPLine.Code);
                SUPRecordingLine.CALCFIELDS("Unit Price Status");
                CASE SUPRecordingLine."Unit Price Status" OF
                  SUPRecordingLine."Unit Price Status"::"Pre-Recording":
                    SUPRecordingLine.VALIDATE("Pre-Recording Quantity", ServicePlanningSetSUPLine.Quantity);
                  SUPRecordingLine."Unit Price Status"::Recording:
                    SUPRecordingLine.VALIDATE("Recording Quantity", ServicePlanningSetSUPLine.Quantity);
                END;
                SUPRecordingLine.INSERT(TRUE);
                SUPRecordingLine.VALIDATE("Work Order No.", IWorkOrderNo);
                SUPRecordingLine.MODIFY(TRUE);
              END;
          END;
        UNTIL ServicePlanningSetSUPLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateWorkOrderRelatedTo@1100528657();
    VAR
      TmpServicePlanningSetLine2@1100528600 : TEMPORARY Record 11072307;
      WorkOrder@1100528601 : Record 11229279;
    BEGIN
      TmpServicePlanningSetLine.RESET;
      TmpServicePlanningSetLine2.COPY(TmpServicePlanningSetLine, TRUE);

      TmpServicePlanningSetLine.SETFILTER("Related Work Order Seq. No.", '<>%1', 0);
      IF TmpServicePlanningSetLine.FINDSET THEN
        REPEAT
          IF TmpServicePlanningSetLine2.GET(TmpServicePlanningSetLine."Set Code", TmpServicePlanningSetLine."Related Work Order Seq. No.") THEN BEGIN
            WorkOrder.GET(TmpServicePlanningSetLine."Work Order No.");
            WorkOrder.VALIDATE("Related Work Order No.", TmpServicePlanningSetLine2."Work Order No.");
            WorkOrder.MODIFY(TRUE);
          END;
        UNTIL TmpServicePlanningSetLine.NEXT = 0;
    END;

    LOCAL PROCEDURE "-------"@1100528649();
    BEGIN
    END;

    PROCEDURE CopyRAWEstimateToPriceBook@1100528651(IPriceBookCode@1100528600 : Code[20];IPriceBookIndexDate@1100528604 : Date;ICompanyName@1100528607 : Text;IRAWEstimateNo@1100528601 : Code[20];Overwrite@1100527900 : Boolean;TransferZeroLines@1100525000 : Boolean);
    VAR
      ServicePriceBook@1100528602 : Record 11071768;
      Estimate@1100528603 : Record 11012151;
      EstimateElementRAW@1100528605 : Record 11125679;
      EstimateElementTextRAW@1100528608 : Record 11125679;
      EstimateLineRAW@1100528612 : Record 11125698;
      ServiceUnitPrice@1100528606 : Record 11071769;
      SUPInternalBudgetLine@1100528611 : Record 11071770;
      SUPText@1100528609 : Record 11071957;
      LineNo@1100528610 : Integer;
      LineInserted@1100527902 : Boolean;
      BudgetQuantity@1100528500 : Decimal;
    BEGIN
      IF ICompanyName <> '' THEN BEGIN
        Estimate.CHANGECOMPANY(ICompanyName);
        EstimateElementRAW.CHANGECOMPANY(ICompanyName);
      END;
      Estimate.GET(IRAWEstimateNo);
      Estimate.TESTFIELD("RAW Estimate");

      IF NOT ServicePriceBook.GET(IPriceBookCode, IPriceBookIndexDate) THEN BEGIN
        ServicePriceBook.Type := ServicePriceBook.Type::Customer;
        IF IPriceBookCode <> '' THEN
          ServicePriceBook.Code := IPriceBookCode
        ELSE BEGIN
          Estimate.TESTFIELD("Customer No.");
          ServicePriceBook.Code := Estimate."Customer No.";
        END;
        IF IPriceBookIndexDate <> 0D THEN
          ServicePriceBook."Index Date" := IPriceBookIndexDate
        ELSE BEGIN
          Estimate.TESTFIELD("Starting Date");
          ServicePriceBook."Index Date" := Estimate."Starting Date";
        END;
        ServicePriceBook.INSERT(TRUE);
      END;
      IF ServicePriceBook.Description = '' THEN
        ServicePriceBook.Description := Estimate.Description;
      ServicePriceBook.MODIFY(TRUE);

      EstimateElementRAW.SETRANGE("Estimate No.", Estimate."No.");
      EstimateElementRAW.SETRANGE("Construction Spec. Line No.", '00');
      IF EstimateElementRAW.FINDSET THEN
        REPEAT
          LineInserted := FALSE;
          IF NOT ServiceUnitPrice.GET(ServicePriceBook.Code,ServicePriceBook."Index Date",EstimateElementRAW."Tender Paragraph No.") THEN BEGIN
            ServiceUnitPrice.INIT;
            ServiceUnitPrice."Index Date" := ServicePriceBook."Index Date";
            ServiceUnitPrice.VALIDATE("Price Book Code", ServicePriceBook.Code);
            ServiceUnitPrice.Code := EstimateElementRAW."Tender Paragraph No.";
            ServiceUnitPrice.InitRecord;
            ServiceUnitPrice.INSERT(TRUE);
            LineInserted := TRUE;
          END;
          IF LineInserted OR Overwrite THEN BEGIN
            ServiceUnitPrice.Description := EstimateElementRAW.Text;
            ServiceUnitPrice."Description 2" := COPYSTR(GetRAWEstimateElementCommentText(EstimateElementRAW), 1, MAXSTRLEN(ServiceUnitPrice."Description 2"));
            ServiceUnitPrice.VALIDATE(Quantity, EstimateElementRAW."Actual Quantity");
            ServiceUnitPrice."Unit of Measure" := EstimateElementRAW."Internal Unit of Measure Code";
            ServiceUnitPrice."Unit Price" := EstimateElementRAW."Actual Unit Price";
            ServiceUnitPrice.MODIFY(TRUE);
          END;

          IF NOT LineInserted AND Overwrite THEN BEGIN
            SUPText.SETRANGE("Unit Price Type", ServiceUnitPrice."Price Book Type");
            SUPText.SETRANGE("Unit Price Code", ServiceUnitPrice."Price Book Code");
            SUPText.SETRANGE("Index Date", ServiceUnitPrice."Index Date");
            SUPText.SETRANGE(Code, ServiceUnitPrice.Code);
            SUPText.DELETEALL(TRUE);
            SUPText.RESET;
          END;
          IF LineInserted OR Overwrite THEN BEGIN
            EstimateElementTextRAW.SETRANGE("Estimate No.", EstimateElementRAW."Estimate No.");
            EstimateElementTextRAW.SETRANGE("Tender Paragraph No.", EstimateElementRAW."Tender Paragraph No.");
            IF EstimateElementTextRAW.FINDSET THEN BEGIN
              LineNo := 10000;
              REPEAT
                SUPText.INIT;
                SUPText."Unit Price Type" := ServiceUnitPrice."Price Book Type";
                SUPText."Unit Price Code" := ServiceUnitPrice."Price Book Code";
                SUPText."Index Date" := ServiceUnitPrice."Index Date";
                SUPText.Code := ServiceUnitPrice.Code;
                SUPText."Line No." := LineNo;
                SUPText.Comment := EstimateElementTextRAW.Text;
                SUPText.INSERT(TRUE);
                LineNo += 10000;
              UNTIL EstimateElementTextRAW.NEXT = 0;
            END;
          END;

          IF NOT LineInserted AND Overwrite THEN BEGIN
            SUPInternalBudgetLine.SETRANGE("Price Book Code", ServiceUnitPrice."Price Book Code");
            SUPInternalBudgetLine.SETRANGE("Index Date", ServiceUnitPrice."Index Date");
            SUPInternalBudgetLine.SETRANGE("Unit Price Code", ServiceUnitPrice.Code);
            SUPInternalBudgetLine.DELETEALL(TRUE);
            SUPInternalBudgetLine.RESET;
          END;
          IF LineInserted OR Overwrite THEN BEGIN
            EstimateLineRAW.SETRANGE("Estimate No.", EstimateElementRAW."Estimate No.");
            EstimateLineRAW.SETRANGE("Tender Paragraph No.", EstimateElementRAW."Tender Paragraph No.");
            IF EstimateLineRAW.FINDSET THEN BEGIN
              LineNo := 0;  //DP01958a
              REPEAT
                //C050205.sn
                BudgetQuantity := EstimateLineRAW."Cumulative Quantity";
                IF EstimateElementRAW."Actual Quantity" <> 0 THEN
                  BudgetQuantity := BudgetQuantity / EstimateElementRAW."Actual Quantity";
                //C050205.en
                 IF (EstimateLineRAW."Material Amount" <> 0) OR ((EstimateLineRAW."Cost Type" = EstimateLineRAW."Cost Type"::Material) AND TransferZeroLines) THEN BEGIN
                  InitBudgetLinePriceBook(ServiceUnitPrice, SUPInternalBudgetLine, LineNo, EstimateLineRAW);  //DP01958a
                  SUPInternalBudgetLine."Cost Type" := SUPInternalBudgetLine."Cost Type"::Material;
                  IF (EstimateLineRAW."Trade Item" <> '') THEN BEGIN
                    SUPInternalBudgetLine.VALIDATE("Vendor (Trade Item)", EstimateLineRAW."Vendor (Trade Item)");
                    SUPInternalBudgetLine.VALIDATE("Trade Item", EstimateLineRAW."Trade Item");
                  END ELSE BEGIN
                    IF (EstimateLineRAW."Basic Item" <> '') THEN BEGIN
                      SUPInternalBudgetLine.VALIDATE(Manufacturer, EstimateLineRAW.Manufacturer);
                      SUPInternalBudgetLine.VALIDATE("Basic Item", EstimateLineRAW."Basic Item");
                    END ELSE BEGIN
                      IF (EstimateLineRAW."Item No." <> '') THEN
                       SUPInternalBudgetLine.VALIDATE("Item No.", EstimateLineRAW."Item No.");
                    END;
                  END;
                  SUPInternalBudgetLine.VALIDATE("Cost Object", EstimateLineRAW."Cost Object");  //DP01676
                  SUPInternalBudgetLine."Gross Price" := EstimateLineRAW."Gross Price";
                  SUPInternalBudgetLine.VALIDATE("Cost Price", EstimateLineRAW."Net Cost Price");  //DP01676
                  SUPInternalBudgetLine.VALIDATE(Quantity, BudgetQuantity);  //C050205
                  SUPInternalBudgetLine."Unit of Measure" := EstimateLineRAW."Unit of Measure";
                  SUPInternalBudgetLine.MODIFY(TRUE);  //DP01958a
                END;
                IF (EstimateLineRAW."Labor Amount" <> 0) OR ((EstimateLineRAW."Cost Type" = EstimateLineRAW."Cost Type"::Labor) AND TransferZeroLines) THEN BEGIN
                  InitBudgetLinePriceBook(ServiceUnitPrice, SUPInternalBudgetLine, LineNo, EstimateLineRAW);  //DP01958a
                  SUPInternalBudgetLine."Cost Type" := SUPInternalBudgetLine."Cost Type"::Labor;
                  SUPInternalBudgetLine.VALIDATE("Cost Object", EstimateLineRAW."Cost Object");  //DP01676
                  SUPInternalBudgetLine.Norm := EstimateLineRAW.Norm;
                  IF EstimateLineRAW."Production Rate" <> 0 THEN
                    SUPInternalBudgetLine.VALIDATE("Production Rate", EstimateLineRAW."Production Rate");  //DP01676
                  SUPInternalBudgetLine.VALIDATE(Rate, EstimateLineRAW.Rate);
                  SUPInternalBudgetLine.VALIDATE(Quantity, BudgetQuantity);  //C050205
                  SUPInternalBudgetLine."Unit of Measure" := EstimateLineRAW."Unit of Measure";
                  SUPInternalBudgetLine.MODIFY(TRUE);  //DP01958a
                END;
                IF (EstimateLineRAW."Plant Amount" <> 0) OR ((EstimateLineRAW."Cost Type" =  EstimateLineRAW."Cost Type"::Plant) AND TransferZeroLines) THEN BEGIN
                  InitBudgetLinePriceBook(ServiceUnitPrice, SUPInternalBudgetLine, LineNo, EstimateLineRAW);  //DP01958a
                  SUPInternalBudgetLine."Cost Type" := SUPInternalBudgetLine."Cost Type"::Plant;
                  SUPInternalBudgetLine.VALIDATE("Cost Object", EstimateLineRAW."Cost Object");  //DP01676
                  IF EstimateLineRAW."Production Rate" <> 0 THEN
                    SUPInternalBudgetLine.VALIDATE("Production Rate", EstimateLineRAW."Production Rate");  //DP01676
                  SUPInternalBudgetLine."Gross Price" := EstimateLineRAW."Gross Price";
                  SUPInternalBudgetLine.VALIDATE("Cost Price", EstimateLineRAW."Net Cost Price");  //DP01676
                  SUPInternalBudgetLine.VALIDATE(Quantity, BudgetQuantity);  //C050205
                  SUPInternalBudgetLine."Unit of Measure" := EstimateLineRAW."Unit of Measure";
                  SUPInternalBudgetLine."Plant Company" := ICompanyName;
                  SUPInternalBudgetLine."Plant Type" := EstimateLineRAW."Plant Type";
                  SUPInternalBudgetLine."Plant Rates in Hours" := EstimateLineRAW."Plant Rates in Hours";  //DP02115
                  SUPInternalBudgetLine.MODIFY(TRUE);  //DP01958a
                END;
                IF (EstimateLineRAW."Subcontracting Amount" <> 0) OR ((EstimateLineRAW."Cost Type" = EstimateLineRAW."Cost Type"::Subcontracting) AND TransferZeroLines) THEN BEGIN
                  InitBudgetLinePriceBook(ServiceUnitPrice, SUPInternalBudgetLine, LineNo, EstimateLineRAW);  //DP01958a
                  SUPInternalBudgetLine."Cost Type" := SUPInternalBudgetLine."Cost Type"::Subcontracting;
                  SUPInternalBudgetLine.VALIDATE("Cost Object", EstimateLineRAW."Cost Object");  //DP01676
                  IF EstimateLineRAW."Production Rate" <> 0 THEN
                    SUPInternalBudgetLine.VALIDATE("Production Rate", EstimateLineRAW."Production Rate");  //DP01676
                  SUPInternalBudgetLine."Gross Price" := EstimateLineRAW."Gross Price";
                  SUPInternalBudgetLine.VALIDATE("Cost Price", EstimateLineRAW."Net Cost Price");  //DP01676
                  SUPInternalBudgetLine.VALIDATE(Quantity, BudgetQuantity);  //C050205
                  SUPInternalBudgetLine."Unit of Measure" := EstimateLineRAW."Unit of Measure";
                  SUPInternalBudgetLine."Subcontracting Activity" := EstimateLineRAW."Subcontracting Activity";
                  SUPInternalBudgetLine.Subcontractor := EstimateLineRAW.Subcontractor;
                  SUPInternalBudgetLine."Subcontracting in Hours" := EstimateLineRAW."Subcontracting in Hours";  //C053751
                  SUPInternalBudgetLine.MODIFY(TRUE);  //DP01958a
                END;
                IF (EstimateLineRAW."Sundry Amount" <> 0) OR ((EstimateLineRAW."Cost Type" = EstimateLineRAW."Cost Type"::Sundry) AND TransferZeroLines) THEN BEGIN
                  InitBudgetLinePriceBook(ServiceUnitPrice, SUPInternalBudgetLine, LineNo, EstimateLineRAW);  //DP01958a
                  SUPInternalBudgetLine."Cost Type" := SUPInternalBudgetLine."Cost Type"::Sundry;
                  SUPInternalBudgetLine.VALIDATE("Cost Object", EstimateLineRAW."Cost Object");  //DP01676
                  SUPInternalBudgetLine."Gross Price" := EstimateLineRAW."Gross Price";
                  SUPInternalBudgetLine.VALIDATE("Cost Price", EstimateLineRAW."Net Cost Price");  //DP01676
                  SUPInternalBudgetLine.VALIDATE(Quantity, BudgetQuantity);  //C050205
                  SUPInternalBudgetLine."Unit of Measure" := EstimateLineRAW."Unit of Measure";
                  SUPInternalBudgetLine.MODIFY(TRUE);  //DP01958a
                END;
              UNTIL EstimateLineRAW.NEXT = 0;
            END;
          END;
        UNTIL EstimateElementRAW.NEXT = 0;
    END;

    LOCAL PROCEDURE InitBudgetLinePriceBook@1100528900(ServiceUnitPrice@1100528901 : Record 11071769;VAR SUPInternalBudgetLine@1100528900 : Record 11071770;VAR LineNo@1100528902 : Integer;EstimateLineRAW@1100528904 : Record 11125698);
    VAR
      SUPInternalBudgetLine2@1100528903 : Record 11071770;
    BEGIN
      //DP01958a
      IF LineNo = 0 THEN BEGIN
        SUPInternalBudgetLine2.SETRANGE("Price Book Code", ServiceUnitPrice."Price Book Code");
        SUPInternalBudgetLine2.SETRANGE("Index Date", ServiceUnitPrice."Index Date");
        SUPInternalBudgetLine2.SETRANGE("Unit Price Code", ServiceUnitPrice.Code);
        IF SUPInternalBudgetLine2.FINDLAST THEN
          LineNo := SUPInternalBudgetLine2."Line No.";
      END;

      SUPInternalBudgetLine.INIT;
      SUPInternalBudgetLine."Price Book Type" := ServiceUnitPrice."Price Book Type";
      SUPInternalBudgetLine."Price Book Code" := ServiceUnitPrice."Price Book Code";
      SUPInternalBudgetLine."Index Date" := ServiceUnitPrice."Index Date";
      SUPInternalBudgetLine."Unit Price Code" := ServiceUnitPrice.Code;
      SUPInternalBudgetLine."Line No." := LineNo + 10000;
      LineNo := SUPInternalBudgetLine."Line No.";
      SUPInternalBudgetLine.INSERT(TRUE);

      SUPInternalBudgetLine.Description := COPYSTR(EstimateLineRAW.Description, 1, MAXSTRLEN(SUPInternalBudgetLine.Description));
      //DP01676.sn
      SUPInternalBudgetLine."Apply Obligation" := EstimateLineRAW."Apply Obligation";
      SUPInternalBudgetLine."Quantity (Result Obligation)" := EstimateLineRAW.ReadObligation;
      //DP01676.en
    END;

    LOCAL PROCEDURE GetRAWEstimateElementCommentText@1100528650(IEstimateElementRAW@1100528601 : Record 11125679) CommentText : Text;
    VAR
      CommentLineRAW@1100528600 : Record 11125684;
    BEGIN
      CommentLineRAW."Table No." := DATABASE::"Estimate Paragraph RAW";
      CommentLineRAW."Estimate No." := IEstimateElementRAW."Estimate No.";
      CommentLineRAW."Tender Paragraph No." := IEstimateElementRAW."Tender Paragraph No.";
      CommentLineRAW."Tender Paragraph Line" := IEstimateElementRAW."Line No.";
      CommentLineRAW.SetCommentLineFilters(CommentLineRAW);
      CommentLineRAW.SETFILTER(Comment, '<>%1', '');
      IF CommentLineRAW.FINDSET THEN
        REPEAT
          IF CommentText <> '' THEN
            CommentText := CommentText + ' ';
          CommentText := CommentText + CommentLineRAW.Comment;
        UNTIL CommentLineRAW.NEXT = 0;
    END;

    LOCAL PROCEDURE "---------"@1100528655();
    BEGIN
    END;

    PROCEDURE ApplySUPClusterToCostPlusEntries@1100528658(IServiceOrderNo@1100528600 : Code[20];IShowErrors@1100528603 : Boolean);
    VAR
      ServiceOrder@1100528601 : Record 11012823;
      SUPClusterSettings@1100528602 : Record 11072327;
      ReferencePointFilter@1100528604 : Text;
    BEGIN
      IF IServiceOrderNo = '' THEN
        EXIT;
      IF NOT ServiceOrder.GET(IServiceOrderNo) THEN
        EXIT;
      IF ServiceOrder.Status >= ServiceOrder.Status::"Administrative Finished" THEN
        IF IShowErrors THEN
          ServiceOrder.FIELDERROR(Status)
        ELSE
          EXIT;
      IF ServiceOrder."Settlement Method" <> ServiceOrder."Settlement Method"::"Cost Plus" THEN
        IF IShowErrors THEN
          ServiceOrder.FIELDERROR("Settlement Method")
        ELSE
          EXIT;
      IF ServiceOrder."Service Contract No." <> '' THEN BEGIN
        SUPClusterSettings.SETRANGE(Type, SUPClusterSettings.Type::"Service Contract");
        SUPClusterSettings.SETRANGE(Code, ServiceOrder."Service Contract No.");
      END;
      IF (ServiceOrder."Service Contract No." = '') OR (SUPClusterSettings.ISEMPTY) THEN BEGIN
        SUPClusterSettings.SETRANGE(Type, SUPClusterSettings.Type::Customer);
        IF ServiceOrder."Use Bill-To Cust. for Pr. Book" AND (ServiceOrder."Bill-to Customer No." <> '') THEN
          SUPClusterSettings.SETRANGE(Code, ServiceOrder."Bill-to Customer No.")
        ELSE
          SUPClusterSettings.SETRANGE(Code, ServiceOrder."Customer No.");
      END;
      IF SUPClusterSettings.ISEMPTY THEN
        IF IShowErrors THEN
          ERROR(Text010, SUPClusterSettings.TABLECAPTION)
        ELSE
          EXIT;
      SUPClusterSettings.SETFILTER("Source Type", '%1|%2', SUPClusterSettings."Source Type"::" ", ServiceOrder."Source Type" +1);
      SUPClusterSettings.SETFILTER("Order Kind", '%1|%2', '', ServiceOrder."Order Kind");
      SUPClusterSettings.SETFILTER("Order Type", '%1|%2', '', ServiceOrder."Order Type");
      SUPClusterSettings.SETFILTER(Problem, '%1|%2', '', ServiceOrder.Problem);
      SUPClusterSettings.SETFILTER(Cause, '%1|%2', '', ServiceOrder.Cause);
      SUPClusterSettings.SETFILTER(Solution, '%1|%2', '', ServiceOrder.Solution);
      ReferencePointFilter := GetReferencePointFilter(ServiceOrder."No.");
      IF ReferencePointFilter <> '' THEN
        SUPClusterSettings.SETFILTER("Reference Point", '%1|' + ReferencePointFilter, 0)
      ELSE
        SUPClusterSettings.SETRANGE("Reference Point", 0);
      SUPClusterSettings.SETFILTER("SUP Cluster", '<>%1', '');
      IF SUPClusterSettings.FINDFIRST THEN
        ApplySUPClusterSettingsToCostPlusEntries(ServiceOrder."No.", SUPClusterSettings, IShowErrors);
    END;

    LOCAL PROCEDURE ApplySUPClusterSettingsToCostPlusEntries@1100528665(IServiceOrderNo@1100528600 : Code[20];ISUPClusterSettings@1100528601 : Record 11072327;IShowErrors@1100528606 : Boolean);
    VAR
      SUPClusterLine@1100528602 : Record 11072326;
      ServiceOrderExtension@1100528603 : Record 11071727;
      ServiceUnitPriceSet@1100528604 : Record 11072284;
      ServiceUnitPrice@1100528605 : Record 11071769;
    BEGIN
      ServiceOrderExtension.GetServOrderExtension(IServiceOrderNo);
      SUPClusterLine.SETRANGE(Type, ISUPClusterSettings.Type);
      SUPClusterLine.SETRANGE(Code, ISUPClusterSettings.Code);
      SUPClusterLine.SETRANGE("SUP Cluster", ISUPClusterSettings."SUP Cluster");
      SUPClusterLine.SETFILTER("Unit Price Code", '<>%1', '');
      IF SUPClusterLine.FINDSET THEN
        REPEAT
          IF IShowErrors THEN
            ServiceOrderExtension.TESTFIELD("Price Book Code", SUPClusterLine."Price Book Code");
          IF (ServiceOrderExtension."Price Book Code" <> '') AND (ServiceOrderExtension."Price Book Index Date" <> 0D) THEN BEGIN
            IF SUPClusterLine."Unit Price Type" = SUPClusterLine."Unit Price Type"::"Unit Price Set" THEN BEGIN
              IF ServiceUnitPriceSet.GET(ServiceOrderExtension."Price Book Code", ServiceOrderExtension."Price Book Index Date", SUPClusterLine."Unit Price Code") THEN
                ApplySUPSetToCostPlusEntries(ServiceOrderExtension."Service Order No.", SUPClusterLine, ServiceUnitPriceSet, IShowErrors)
            END ELSE BEGIN
              IF ServiceUnitPrice.GET(ServiceOrderExtension."Price Book Code", ServiceOrderExtension."Price Book Index Date", SUPClusterLine."Unit Price Code") THEN
                ApplyUnitPriceToCostPlusEntry(IServiceOrderNo, SUPClusterLine, ServiceUnitPrice, SUPClusterLine.Quantity, IShowErrors);
            END;
          END;
        UNTIL SUPClusterLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ApplySUPSetToCostPlusEntries@1100528659(IServiceOrderNo@1100528600 : Code[20];ISUPClusterLine@1100528602 : Record 11072326;IServiceUnitPriceSet@1100528601 : Record 11072284;IShowErrors@1100528605 : Boolean);
    VAR
      ServiceUnitPriceSetLine@1100528603 : Record 11072285;
      ServiceUnitPrice@1100528604 : Record 11071769;
    BEGIN
      ServiceUnitPriceSetLine.SETRANGE("Price Book Code", IServiceUnitPriceSet."Price Book Code");
      ServiceUnitPriceSetLine.SETRANGE("Price Book Index Date", IServiceUnitPriceSet."Price Book Index Date");
      ServiceUnitPriceSetLine.SETRANGE("Set Code", IServiceUnitPriceSet.Code);
      ServiceUnitPriceSetLine.SETFILTER("Unit Price Code", '<>%1', '');
      IF ServiceUnitPriceSetLine.FINDSET THEN
        REPEAT
          ServiceUnitPrice.GET(ServiceUnitPriceSetLine."Price Book Code", ServiceUnitPriceSetLine."Price Book Index Date", ServiceUnitPriceSetLine."Unit Price Code");
          ApplyUnitPriceToCostPlusEntry(IServiceOrderNo, ISUPClusterLine, ServiceUnitPrice, ServiceUnitPriceSetLine.Quantity, IShowErrors);
        UNTIL ServiceUnitPriceSetLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ApplyUnitPriceToCostPlusEntry@1100528660(IServiceOrderNo@1100528601 : Code[20];ISUPClusterLine@1100528603 : Record 11072326;IServiceUnitPrice@1100528600 : Record 11071769;IQuantity@1100528604 : Decimal;IShowErrors@1100528605 : Boolean);
    VAR
      ServiceOrderCostPlusEntry@1100528602 : Record 11012825;
    BEGIN
      ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", IServiceOrderNo);
      ServiceOrderCostPlusEntry.SETRANGE("Unit Price Code", IServiceUnitPrice.Code);
      IF NOT ServiceOrderCostPlusEntry.ISEMPTY THEN
        IF IShowErrors THEN
          ERROR(Text011, ServiceOrderCostPlusEntry.TABLECAPTION, ServiceOrderCostPlusEntry.FIELDCAPTION("Unit Price Code"), IServiceUnitPrice.Code)
        ELSE
          EXIT;
      ServiceOrderCostPlusEntry.VALIDATE("Service Order No.", IServiceOrderNo);
      ServiceOrderCostPlusEntry.VALIDATE("Unit Price Code", IServiceUnitPrice.Code);
      IF ISUPClusterLine."Room Code" <> '' THEN
        ServiceOrderCostPlusEntry.VALIDATE("Unit Price Room", ISUPClusterLine."Room Code");
      IF IQuantity <> 0 THEN
        ServiceOrderCostPlusEntry.VALIDATE(Quantity, IQuantity);
      ServiceOrderCostPlusEntry.INSERT(TRUE);
    END;

    LOCAL PROCEDURE GetReferencePointFilter@1100528656(IServiceOrderNo@1100528600 : Code[20]) ReferencePointFilter : Text;
    VAR
      DocumentReferencePoint@1100528601 : Record 11020296;
      ReferencePoint@1100528602 : Record 11020271;
    BEGIN
      DocumentReferencePoint.SETRANGE(Type, DocumentReferencePoint.Type::ServOrder);
      DocumentReferencePoint.SETRANGE("Document No.", IServiceOrderNo);
      IF DocumentReferencePoint.FINDSET THEN
        REPEAT
          IF ReferencePoint.GET(DocumentReferencePoint."Reference Point") THEN
            ReferencePoint.MARK(TRUE);
        UNTIL DocumentReferencePoint.NEXT = 0;
      ReferencePoint.MARKEDONLY(TRUE);
      IF ReferencePoint.FINDSET THEN
        REPEAT
          IF ReferencePointFilter <> '' THEN
            ReferencePointFilter += '|';
          ReferencePointFilter += FORMAT(ReferencePoint."No.");
        UNTIL ReferencePoint.NEXT = 0;
    END;

    BEGIN
    {
      190523 ORANGO.SB Support #24355
    }
    END.
  }
}

