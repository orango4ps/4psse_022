OBJECT Codeunit 11012844 Service Inspection Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE CreateSOInspectionLines@1100528600(IServiceOrderNo@1100528600 : Code[20];IServiceContractNo@1100528601 : Code[20];IServiceObjectNo@1100528604 : Code[20];IMaintenanceSchemeCode@1100528607 : Code[20];ISourceCode@1100528701 : Code[20]);
    VAR
      TmpServiceInspectionLine@1100528602 : TEMPORARY Record 11071751;
      ContractObjectMaintenance@1100528603 : Record 11071692;
      ServiceOrder@1100528605 : Record 11012823;
      ObjectModificationLine@1100528703 : Record 11071701;
      InspectionType@1100528608 : Option;
      ServiceContractNo@1100528705 : Code[20];
      Code@1100528704 : Code[20];
      BelongsToScheme@1100528702 : Code[20];
      BelongstoInspectionList@1100528700 : Code[20];
      BaseInspectionList@1100528707 : Code[20];
      SeekDate@1100528706 : Date;
    BEGIN
      ServiceOrder.GET(IServiceOrderNo);
      CASE ServiceOrder."Source Type" OF
        ServiceOrder."Source Type"::Contract:
          BEGIN
            IF ContractObjectMaintenance.GET(IServiceContractNo, IServiceObjectNo, IMaintenanceSchemeCode) THEN
              BaseInspectionList := ContractObjectMaintenance.DetermineBaseInspectionList;
            InspectionType := TmpServiceInspectionLine."Inspection Type"::"Contract Object";
            ServiceContractNo := IServiceContractNo;
            Code := IServiceObjectNo;
            BelongsToScheme := IMaintenanceSchemeCode;
            BelongstoInspectionList := BaseInspectionList;
          END;
        ServiceOrder."Source Type"::Call:
          BEGIN
            InspectionType := TmpServiceInspectionLine."Inspection Type"::"Object (Calls)";
            ServiceContractNo := IServiceContractNo;
            Code := IServiceObjectNo;
            BelongsToScheme := IMaintenanceSchemeCode;
            BelongstoInspectionList := '';
          END;
        ServiceOrder."Source Type"::Modification:
          BEGIN
            IF ObjectModificationLine.GET(ISourceCode, IServiceObjectNo) THEN
              BaseInspectionList := ObjectModificationLine."Base Inspection List Code";
            InspectionType := TmpServiceInspectionLine."Inspection Type"::"Base Inspection List";
            ServiceContractNo := '';
            Code := BaseInspectionList;
            BelongsToScheme := '';
            BelongstoInspectionList := '';
          END;
      ELSE
        EXIT;
      END;
      SeekDate := ServiceOrder."Starting Date";
      IF SeekDate = 0D THEN
        SeekDate := ServiceOrder."Order Date";
      CollectTmpInspVersionLines(
        InspectionType,
        ServiceContractNo,
        Code,
        BelongsToScheme,
        BelongstoInspectionList,
        SeekDate,
        InspectionType,
        ServiceContractNo,
        Code,
        BelongsToScheme,
        BelongstoInspectionList,
        FALSE,
        TmpServiceInspectionLine);
      HandleTmpInspVersionLines(
        IServiceOrderNo, IServiceContractNo, IServiceObjectNo, IMaintenanceSchemeCode, TmpServiceInspectionLine);
    END;

    PROCEDURE DeleteSOInspectionLines@1100528603(IServiceOrderNo@1100528602 : Code[20];IServiceObjectNo@1100528601 : Code[20];IMaintenanceSchemeCode@1100528600 : Code[20]);
    VAR
      ServiceOrderInspectionLine@1100528603 : Record 11071753;
    BEGIN
      ServiceOrderInspectionLine.SETRANGE("Service Order No.", IServiceOrderNo);
      ServiceOrderInspectionLine.SETRANGE("Service Object No.", IServiceObjectNo);
      ServiceOrderInspectionLine.SETRANGE("Maintenance Scheme Code", IMaintenanceSchemeCode);
      ServiceOrderInspectionLine.DELETEALL(TRUE);
    END;

    PROCEDURE CollectTmpInspVersionLines@1100528606(IInspectionType@1100528607 : 'Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls)';IServiceContractNo@1100528606 : Code[20];ICode@1100528605 : Code[20];IBelongsToScheme@1100528604 : Code[20];IBelongstoInspectionList@1100528610 : Code[20];ISeekDate@1100528619 : Date;IOriginalInspectionType@1100528615 : 'Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls)';IOriginalServiceContractNo@1100528618 : Code[20];IOriginalCode@1100528617 : Code[20];IOriginalBelongsToScheme@1100528616 : Code[20];IOriginalIBelongstoInspList@1100528611 : Code[20];IIncludeCancelled@1100528602 : Boolean;VAR OTmpServiceInspectionLine@1100528614 : TEMPORARY Record 11071751);
    VAR
      ServiceInspectionVersion@1100528601 : Record 11071750;
      ServiceInspectionLine@1100528600 : Record 11071751;
      ServiceObject@1100528608 : Record 11071691;
      BaseInspectionList@1100528603 : Code[20];
      CancellationLevel@1100528609 : Option;
      DescriptionLevel@1100528612 : Option;
      Description@1100528613 : Text[50];
    BEGIN
      IF IInspectionType <> IInspectionType::"Contract Object" THEN
        IServiceContractNo := '';

      ServiceInspectionVersion.SETRANGE("Inspection Type", IInspectionType);
      ServiceInspectionVersion.SETRANGE("Service Contract No.", IServiceContractNo);
      ServiceInspectionVersion.SETRANGE(Code, ICode);
      ServiceInspectionVersion.SETRANGE("Belongs to Scheme", IBelongsToScheme);
      ServiceInspectionVersion.SETRANGE("Belongs to Base Insp. List", IBelongstoInspectionList);
      ServiceInspectionVersion.SETFILTER("Index Date", '<=%1', ISeekDate);
      IF ServiceInspectionVersion.FINDLAST THEN BEGIN
        ServiceInspectionLine.SETRANGE("Inspection Type", ServiceInspectionVersion."Inspection Type");
        ServiceInspectionLine.SETRANGE("Service Contract No.", ServiceInspectionVersion."Service Contract No.");
        ServiceInspectionLine.SETRANGE(Code, ServiceInspectionVersion.Code);
        ServiceInspectionLine.SETRANGE("Belongs to Scheme", ServiceInspectionVersion."Belongs to Scheme");
        ServiceInspectionLine.SETRANGE("Belongs to Base Insp. List", ServiceInspectionVersion."Belongs to Base Insp. List");
        ServiceInspectionLine.SETRANGE("Index Date", ServiceInspectionVersion."Index Date");
        IF ServiceInspectionLine.FINDSET THEN
          REPEAT
            IF (IIncludeCancelled OR
              NOT ServiceInspectionLine.IsCancelled(
                IOriginalInspectionType, IOriginalServiceContractNo, IOriginalCode,
                IOriginalBelongsToScheme, IOriginalIBelongstoInspList, ISeekDate, ISeekDate, CancellationLevel)) AND
              NOT TmpSOInspectionLineExists(ServiceInspectionLine, OTmpServiceInspectionLine)
            THEN BEGIN
              OTmpServiceInspectionLine := ServiceInspectionLine;
              IF ServiceInspectionLine.Type = ServiceInspectionLine.Type::Line THEN BEGIN
                OTmpServiceInspectionLine."Inspection Group Code" :=
                  ServiceInspectionLine.GetServiceInspectionGroupInfo(OTmpServiceInspectionLine."Inspection Group Description");
                OTmpServiceInspectionLine.Description :=
                  ServiceInspectionLine.GetDescription(
                    IOriginalInspectionType, IOriginalServiceContractNo, IOriginalCode,
                    IOriginalBelongsToScheme, IOriginalIBelongstoInspList, ISeekDate, ISeekDate, DescriptionLevel);
                OTmpServiceInspectionLine."Lower Value" :=
                  ServiceInspectionLine.GetLowerUpperValue(
                    IOriginalInspectionType, IOriginalServiceContractNo, IOriginalCode,
                      IOriginalBelongsToScheme, IOriginalIBelongstoInspList, ISeekDate, ISeekDate, 0, DescriptionLevel);
                OTmpServiceInspectionLine."Upper Value" :=
                  ServiceInspectionLine.GetLowerUpperValue(
                    IOriginalInspectionType, IOriginalServiceContractNo, IOriginalCode,
                      IOriginalBelongsToScheme, IOriginalIBelongstoInspList, ISeekDate, ISeekDate, 1, DescriptionLevel);
              END ELSE BEGIN
                OTmpServiceInspectionLine."Inspection Group Code" := ServiceInspectionLine."Inspection Code";
                OTmpServiceInspectionLine."Inspection Group Description" := ServiceInspectionLine.Description;
              END;
              OTmpServiceInspectionLine.INSERT;
            END;
          UNTIL ServiceInspectionLine.NEXT = 0;
      END;
      CASE IInspectionType OF
        IInspectionType::"Base Inspection List":;
        IInspectionType::"Standard Object":
          BEGIN
            BaseInspectionList := IOriginalIBelongstoInspList;
            IF BaseInspectionList = '' THEN
              BaseInspectionList :=
                DetermineBaseInspectionList(IOriginalInspectionType, IOriginalServiceContractNo, IOriginalCode, IOriginalBelongsToScheme);
            CollectTmpInspVersionLines(
              IInspectionType::"Base Inspection List", '', BaseInspectionList, '', '', ISeekDate,
              IOriginalInspectionType, IOriginalServiceContractNo, IOriginalCode, IOriginalBelongsToScheme, IOriginalIBelongstoInspList,
              IIncludeCancelled, OTmpServiceInspectionLine);
          END;
        IInspectionType::"Contract Object":
          BEGIN
            IF NOT ServiceObject.GET(ICode) THEN
              ServiceObject.INIT;
            CollectTmpInspVersionLines(
              IInspectionType::"Standard Object", '', ServiceObject."Standard Object No.", IBelongsToScheme, IBelongstoInspectionList, ISeekDate,
              IOriginalInspectionType, IOriginalServiceContractNo, IOriginalCode, IOriginalBelongsToScheme, IOriginalIBelongstoInspList,
              IIncludeCancelled, OTmpServiceInspectionLine);
          END;
        IInspectionType::"Standard Object (Calls)":;
        IInspectionType::"Object (Calls)":
          BEGIN
            IF NOT ServiceObject.GET(ICode) THEN
              ServiceObject.INIT;
            CollectTmpInspVersionLines(
              IInspectionType::"Standard Object (Calls)", '', ServiceObject."Standard Object No.", '', '', ISeekDate,
              IOriginalInspectionType, IOriginalServiceContractNo, IOriginalCode, IOriginalBelongsToScheme, IOriginalIBelongstoInspList,
              IIncludeCancelled, OTmpServiceInspectionLine);
          END;
       END;
      OTmpServiceInspectionLine.SETCURRENTKEY(OTmpServiceInspectionLine."Inspection Group Code");
    END;

    PROCEDURE ShowInspectionLines@1100528601(IServiceContractNo@1100528601 : Code[20];IServiceObjectNo@1100528602 : Code[20];IMaintenanceSchemeCode@1100528603 : Code[20];ISeekDate@1100528600 : Date);
    VAR
      ContractObjectMaintenance@1100528604 : Record 11071692;
      TmpServiceInspectionLine@1100528605 : TEMPORARY Record 11071751;
    BEGIN
      IF NOT ContractObjectMaintenance.GET(IServiceContractNo, IServiceObjectNo, IMaintenanceSchemeCode) THEN
        ContractObjectMaintenance.INIT;
      CollectTmpInspVersionLines(
        TmpServiceInspectionLine."Inspection Type"::"Contract Object",
        IServiceContractNo,
        IServiceObjectNo,
        IMaintenanceSchemeCode,
        ContractObjectMaintenance.DetermineBaseInspectionList,
        ISeekDate,
        TmpServiceInspectionLine."Inspection Type"::"Contract Object",
        IServiceContractNo,
        IServiceObjectNo,
        IMaintenanceSchemeCode,
        ContractObjectMaintenance.DetermineBaseInspectionList,
        FALSE,
        TmpServiceInspectionLine);
      PAGE.RUNMODAL(PAGE::"All Service Inspection Lines", TmpServiceInspectionLine);
    END;

    PROCEDURE DetermineBaseInspectionList@1100528607(IInspectionType@1100528603 : 'Base Inspection List,Standard Object,Contract Object,Standard Object (Calls),Object (Calls)';IServiceContractNo@1100528602 : Code[20];ICode@1100528601 : Code[20];IBelongsToScheme@1100528600 : Code[20]) BaseInspectionList : Code[20];
    VAR
      StdObjectMaintenanceScheme@1100528604 : Record 11071703;
      ContractObject@1100528605 : Record 11071702;
      MaintenanceScheme@1100528606 : Record 11071745;
    BEGIN
      CASE IInspectionType OF
        IInspectionType::"Base Inspection List":
          EXIT(ICode);
        IInspectionType::"Standard Object":
          BEGIN
            IF MaintenanceScheme.GET(IBelongsToScheme) THEN
              BaseInspectionList := MaintenanceScheme."Base Inspection List Code";
          END;
        IInspectionType::"Contract Object":
          BEGIN
            IF NOT ContractObject.GET(IServiceContractNo, ICode) THEN
              ContractObject.INIT;
            ContractObject.CALCFIELDS("Standard Object No.");
            IF StdObjectMaintenanceScheme.GET(
              ContractObject."Standard Object No.", ContractObject."Service Package", IBelongsToScheme)
            THEN
              BaseInspectionList := StdObjectMaintenanceScheme."Base Inspection List Code";
            IF BaseInspectionList = '' THEN
              IF MaintenanceScheme.GET(IBelongsToScheme) THEN
                BaseInspectionList := MaintenanceScheme."Base Inspection List Code";
          END;
      END;
    END;

    LOCAL PROCEDURE HandleTmpInspVersionLines@1100528604(IServiceOrderNo@1100528603 : Code[20];IServiceContractNo@1100528606 : Code[20];IServiceObjectNo@1100528604 : Code[20];IMaintenanceScheme@1100528605 : Code[20];VAR ITmpServiceInspectionLine@1100528602 : TEMPORARY Record 11071751);
    VAR
      ServiceOrder@1100528700 : Record 11012823;
      ServiceOrderInspectionLine@1100528600 : Record 11071753;
      ServiceOrderInspectionLineNo@1100528601 : Integer;
    BEGIN
      IF NOT ServiceOrder.GET(IServiceOrderNo) THEN EXIT;
      IF NOT ITmpServiceInspectionLine.FINDSET THEN EXIT;
      REPEAT
        ServiceOrderInspectionLine.INIT;
        ServiceOrderInspectionLine."Service Order No." := IServiceOrderNo;
        ServiceOrderInspectionLine."Service Object No." := IServiceObjectNo;
        ServiceOrderInspectionLine."Maintenance Scheme Code" := IMaintenanceScheme;
        ServiceOrderInspectionLineNo += 10000;
        ServiceOrderInspectionLine."Line No." := ServiceOrderInspectionLineNo;
        IF ServiceOrder."Source Type" = ServiceOrder."Source Type"::Modification THEN
          ServiceOrderInspectionLine."Inspection Type" := ServiceOrderInspectionLine."Inspection Type"::"Service Order Object"
        ELSE
          ServiceOrderInspectionLine."Inspection Type" := ITmpServiceInspectionLine."Inspection Type";
        ServiceOrderInspectionLine."Service Contract No." := ITmpServiceInspectionLine."Service Contract No.";
        ServiceOrderInspectionLine."Belongs to Scheme" := ITmpServiceInspectionLine."Belongs to Scheme";
        ServiceOrderInspectionLine."Belongs to Base Insp. List" := ITmpServiceInspectionLine."Belongs to Base Insp. List";
        ServiceOrderInspectionLine.Code := ITmpServiceInspectionLine.Code;
        ServiceOrderInspectionLine."Index Date" := ITmpServiceInspectionLine."Index Date";
        ServiceOrderInspectionLine."Inspection Line No." := ITmpServiceInspectionLine."Line No.";
        ServiceOrderInspectionLine.Type := ITmpServiceInspectionLine.Type;
        ServiceOrderInspectionLine."Inspection Code" := ITmpServiceInspectionLine."Inspection Code";
        ServiceOrderInspectionLine.Description := ITmpServiceInspectionLine.Description;
        ServiceOrderInspectionLine."Field Type" := ITmpServiceInspectionLine."Field Type";
        ServiceOrderInspectionLine."Unit Of Measure" := ITmpServiceInspectionLine."Unit Of Measure";
        ServiceOrderInspectionLine.Mandatory := ITmpServiceInspectionLine.Mandatory;
        ServiceOrderInspectionLine."Inspection Group Code" := ITmpServiceInspectionLine."Inspection Group Code";
        ServiceOrderInspectionLine."Lower Value" := ITmpServiceInspectionLine."Lower Value";
        ServiceOrderInspectionLine."Upper Value" := ITmpServiceInspectionLine."Upper Value";
        ServiceOrderInspectionLine.Id := ITmpServiceInspectionLine.Id;

        IF ServiceOrderInspectionLine."Depending on Id" <> '' THEN BEGIN
          ServiceOrderInspectionLine."Depending on Id" := LOWERCASE(ITmpServiceInspectionLine."Depending on Id");
          ServiceOrderInspectionLine."Depending Condition" := ITmpServiceInspectionLine."Depending Condition";
          ServiceOrderInspectionLine."Dependency Effect" := ITmpServiceInspectionLine."Dependency Effect";
          ServiceOrderInspectionLine."Dependency Condition Date 1" := ITmpServiceInspectionLine."Dependency Condition Date 1";
          ServiceOrderInspectionLine."Dependency Condition Date 2" := ITmpServiceInspectionLine."Dependency Condition Date 2";
          ServiceOrderInspectionLine."Dependency Condition Decimal 1" := ITmpServiceInspectionLine."Dependency Condition Decimal 1";
          ServiceOrderInspectionLine."Dependency Condition Decimal 2" := ITmpServiceInspectionLine."Dependency Condition Decimal 2";
          ServiceOrderInspectionLine."Dependency Condition Operation" := ITmpServiceInspectionLine."Dependency Condition Operation";
        END;

        ServiceOrderInspectionLine.INSERT(TRUE);
      UNTIL ITmpServiceInspectionLine.NEXT = 0;
    END;

    PROCEDURE TmpSOInspectionLineExists@1100528611(IServiceInspectionLine@1100528600 : Record 11071751;VAR ITmpServiceInspectionLine@1100528601 : TEMPORARY Record 11071751) : Boolean;
    VAR
      TmpServiceInspectionLine@1100528602 : TEMPORARY Record 11071751;
      ServiceInspectionGroupDescription@1100528603 : Text[50];
    BEGIN
      TmpServiceInspectionLine.COPY(ITmpServiceInspectionLine, TRUE);
      TmpServiceInspectionLine.SETRANGE(Type, IServiceInspectionLine.Type);
      TmpServiceInspectionLine.SETRANGE("Inspection Code", IServiceInspectionLine."Inspection Code");
      IF IServiceInspectionLine.Type = IServiceInspectionLine.Type::Line THEN BEGIN
        TmpServiceInspectionLine.SETRANGE("Inspection Group Code", IServiceInspectionLine.GetServiceInspectionGroupInfo(ServiceInspectionGroupDescription));
        TmpServiceInspectionLine.SETRANGE("Inspection Group Description", ServiceInspectionGroupDescription);
      END;
      TmpServiceInspectionLine.SETRANGE(Description, IServiceInspectionLine.Description);
      EXIT(NOT TmpServiceInspectionLine.ISEMPTY)
    END;

    PROCEDURE CopyBaseInspectionList@1100528624(IBaseInspectionListCode@1100528600 : Code[20];IIndexDate@1100528601 : Date;INewBaseInspectionListCode@1100528602 : Code[20];INewBaseInspectionListDescr@1100528611 : Text[50];INewIndexDate@1100528609 : Date);
    VAR
      BaseServiceInspectionList@1100528603 : Record 11071930;
      ToBaseServiceInspectionList@1100528604 : Record 11071930;
      ServiceInspectionVersion@1100528605 : Record 11071750;
      ToServiceInspectionVersion@1100528606 : Record 11071750;
      ServiceInspectionLine@1100528607 : Record 11071751;
      ToServiceInspectionLine@1100528608 : Record 11071751;
    BEGIN
      BaseServiceInspectionList.GET(IBaseInspectionListCode);
      IF NOT ToBaseServiceInspectionList.GET(INewBaseInspectionListCode) THEN BEGIN
        ToBaseServiceInspectionList := BaseServiceInspectionList;
        ToBaseServiceInspectionList.Code := INewBaseInspectionListCode;
        ToBaseServiceInspectionList.Description := INewBaseInspectionListDescr;
        ToBaseServiceInspectionList.INSERT(TRUE);
      END;

      ServiceInspectionVersion.SETRANGE("Inspection Type", ServiceInspectionVersion."Inspection Type"::"Base Inspection List");
      ServiceInspectionVersion.SETRANGE(Code, IBaseInspectionListCode);
      ServiceInspectionVersion.SETFILTER("Index Date", '<=%1', IIndexDate);
      ServiceInspectionVersion.SETRANGE("Belongs to Scheme", '');
      IF ServiceInspectionVersion.FINDLAST THEN BEGIN
        ToServiceInspectionVersion := ServiceInspectionVersion;
        ToServiceInspectionVersion.Code := INewBaseInspectionListCode;
        ToServiceInspectionVersion."Index Date" := INewIndexDate;
        ToServiceInspectionVersion.INSERT(TRUE);

        ServiceInspectionLine.SETRANGE("Inspection Type", ServiceInspectionVersion."Inspection Type");
        ServiceInspectionLine.SETRANGE(Code, ServiceInspectionVersion.Code);
        ServiceInspectionLine.SETRANGE("Index Date", ServiceInspectionVersion."Index Date");
        IF ServiceInspectionLine.FINDSET THEN
          REPEAT
            ToServiceInspectionLine := ServiceInspectionLine;
            ToServiceInspectionLine.Code := ToServiceInspectionVersion.Code;
            ToServiceInspectionLine."Index Date" := ToServiceInspectionVersion."Index Date";
            ToServiceInspectionLine.INSERT(TRUE);
          UNTIL ServiceInspectionLine.NEXT = 0;
      END;
    END;

    PROCEDURE CopyBaseInspectionListToSOInspectionLine@1100528701(IBaseInspectionListCode@1100528703 : Code[20];IIndexDate@1100528702 : Date;IToServiceOrderNo@1100528705 : Code[20];IToServiceObjectNo@1100528706 : Code[20]);
    VAR
      ServiceInspectionLine@1100528701 : Record 11071751;
      TempServiceInspectionLine@1100528704 : TEMPORARY Record 11071751;
      ServiceOrderInspectionLine@1100528700 : Record 11071753;
    BEGIN
      CollectTmpInspVersionLines(
        ServiceInspectionLine."Inspection Type"::"Base Inspection List", '', IBaseInspectionListCode, '', '', IIndexDate,
        ServiceInspectionLine."Inspection Type"::"Base Inspection List", '', IBaseInspectionListCode, '', '', FALSE, TempServiceInspectionLine);
      IF TempServiceInspectionLine.FINDSET THEN BEGIN
        REPEAT
          ServiceOrderInspectionLine.RESET;
          ServiceOrderInspectionLine.SETRANGE("Service Order No.", IToServiceOrderNo);
          ServiceOrderInspectionLine.SETRANGE("Service Object No.", IToServiceObjectNo);
          ServiceOrderInspectionLine.SETRANGE("Maintenance Scheme Code", '');
          ServiceOrderInspectionLine.SETRANGE("Inspection Type", ServiceOrderInspectionLine."Inspection Type"::"Service Order Object");
          ServiceOrderInspectionLine.SETRANGE(Type, TempServiceInspectionLine.Type);
          ServiceOrderInspectionLine.SETRANGE("Inspection Code", TempServiceInspectionLine."Inspection Code");
          ServiceOrderInspectionLine.SETRANGE("Inspection Group Code", TempServiceInspectionLine."Inspection Group Code");
          IF NOT ServiceOrderInspectionLine.FINDSET THEN BEGIN
            ServiceOrderInspectionLine.INIT;
            ServiceOrderInspectionLine."Service Order No." := IToServiceOrderNo;
            ServiceOrderInspectionLine."Service Object No." := IToServiceObjectNo;
            ServiceOrderInspectionLine."Maintenance Scheme Code" := '';
            ServiceOrderInspectionLine."Line No." := ServiceOrderInspectionLine.GetLastLineNo + 10000;
            ServiceOrderInspectionLine."Inspection Type" := ServiceOrderInspectionLine."Inspection Type"::"Service Order Object";
            ServiceOrderInspectionLine.Code := TempServiceInspectionLine.Code;
            ServiceOrderInspectionLine."Index Date" := TempServiceInspectionLine."Index Date";
            ServiceOrderInspectionLine."Inspection Line No." := TempServiceInspectionLine."Line No.";
            ServiceOrderInspectionLine.Type := TempServiceInspectionLine.Type;
            ServiceOrderInspectionLine."Inspection Code" := TempServiceInspectionLine."Inspection Code";
            ServiceOrderInspectionLine.Description := TempServiceInspectionLine.Description;
            ServiceOrderInspectionLine."Field Type" := TempServiceInspectionLine."Field Type";
            ServiceOrderInspectionLine."Unit Of Measure" := TempServiceInspectionLine."Unit Of Measure";
            ServiceOrderInspectionLine."Inspection Group Code" := TempServiceInspectionLine."Inspection Group Code";
            ServiceOrderInspectionLine.Mandatory := TempServiceInspectionLine.Mandatory;
            ServiceOrderInspectionLine."Lower Value" := TempServiceInspectionLine."Lower Value";
            ServiceOrderInspectionLine."Upper Value" := TempServiceInspectionLine."Upper Value";
            ServiceOrderInspectionLine.Id := TempServiceInspectionLine.Id;

            IF NOT ISNULLGUID(TempServiceInspectionLine."Depending on Id") THEN BEGIN
              ServiceOrderInspectionLine."Depending on Id" := LOWERCASE(TempServiceInspectionLine."Depending on Id");
              ServiceOrderInspectionLine."Depending Condition" := TempServiceInspectionLine."Depending Condition";
              ServiceOrderInspectionLine."Dependency Effect" := TempServiceInspectionLine."Dependency Effect";
              ServiceOrderInspectionLine."Dependency Condition Date 1" := TempServiceInspectionLine."Dependency Condition Date 1";
              ServiceOrderInspectionLine."Dependency Condition Date 2" := TempServiceInspectionLine."Dependency Condition Date 2";
              ServiceOrderInspectionLine."Dependency Condition Decimal 1" := TempServiceInspectionLine."Dependency Condition Decimal 1";
              ServiceOrderInspectionLine."Dependency Condition Decimal 2" := TempServiceInspectionLine."Dependency Condition Decimal 2";
              ServiceOrderInspectionLine."Dependency Condition Operation" := TempServiceInspectionLine."Dependency Condition Operation";
            END;

            ServiceOrderInspectionLine.INSERT;
          END;
        UNTIL TempServiceInspectionLine.NEXT = 0;
      END;
    END;

    PROCEDURE SelectAndCopyBaseInspectionListToInspectionVersion@1100528605(IToServiceInspectionVersion@1100528601 : Record 11071750);
    VAR
      ServiceInspectionVersion@1100528600 : Record 11071750;
    BEGIN
      IF IToServiceInspectionVersion."Inspection Type" = IToServiceInspectionVersion."Inspection Type"::"Base Inspection List" THEN
        IToServiceInspectionVersion.FIELDERROR("Inspection Type");
      ServiceInspectionVersion.SETRANGE("Inspection Type", ServiceInspectionVersion."Inspection Type"::"Base Inspection List");
      IF PAGE.RUNMODAL(0, ServiceInspectionVersion) = ACTION::LookupOK THEN
        CopyBaseInspectionListToInspectionVersion(ServiceInspectionVersion.Code, ServiceInspectionVersion."Index Date", IToServiceInspectionVersion);
    END;

    PROCEDURE CopyBaseInspectionListToInspectionVersion@1100528602(IBaseInspectionListCode@1100528601 : Code[20];IIndexDate@1100528600 : Date;IToServiceInspectionVersion@1100528602 : Record 11071750);
    VAR
      ServiceInspectionLine@1100528603 : Record 11071751;
      TempServiceInspectionLine@1100528604 : TEMPORARY Record 11071751;
      LineNo@1100528605 : Integer;
    BEGIN
      ServiceInspectionLine.SETRANGE("Inspection Type", IToServiceInspectionVersion."Inspection Type");
      ServiceInspectionLine.SETRANGE("Service Contract No.", IToServiceInspectionVersion."Service Contract No.");
      ServiceInspectionLine.SETRANGE(Code, IToServiceInspectionVersion.Code);
      ServiceInspectionLine.SETRANGE("Belongs to Scheme", IToServiceInspectionVersion."Belongs to Scheme");
      ServiceInspectionLine.SETRANGE("Belongs to Base Insp. List", IToServiceInspectionVersion."Belongs to Base Insp. List");
      ServiceInspectionLine.SETRANGE("Index Date", IToServiceInspectionVersion."Index Date");
      IF ServiceInspectionLine.FINDLAST THEN
        LineNo := ServiceInspectionLine."Line No.";
      LineNo += 10000;

      CollectTmpInspVersionLines(
        ServiceInspectionLine."Inspection Type"::"Base Inspection List", '', IBaseInspectionListCode, '', '', IIndexDate,
        ServiceInspectionLine."Inspection Type"::"Base Inspection List", '', IBaseInspectionListCode, '', '', FALSE, TempServiceInspectionLine);
      IF TempServiceInspectionLine.FINDSET THEN BEGIN
        REPEAT
          ServiceInspectionLine := TempServiceInspectionLine;
          ServiceInspectionLine."Inspection Type" := IToServiceInspectionVersion."Inspection Type";
          ServiceInspectionLine."Service Contract No." := IToServiceInspectionVersion."Service Contract No.";
          ServiceInspectionLine.Code := IToServiceInspectionVersion.Code;
          ServiceInspectionLine."Belongs to Scheme" := IToServiceInspectionVersion."Belongs to Scheme";
          ServiceInspectionLine."Belongs to Base Insp. List" := IToServiceInspectionVersion."Belongs to Base Insp. List";
          ServiceInspectionLine."Index Date" := IToServiceInspectionVersion."Index Date";
          ServiceInspectionLine."Line No." := LineNo;
          ServiceInspectionLine.INSERT(TRUE);
          LineNo += 10000;
        UNTIL TempServiceInspectionLine.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

