OBJECT Codeunit 1212 Pmt. Export Vend. Ledger Check
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW111.00,NAVDK;
  }
  PROPERTIES
  {
    TableNo=25;
    OnRun=BEGIN
            CheckDocumentType(Rec);
            CheckPaymentMethod(Rec);
            CheckSimultaneousPmtInfoCreditorNo(Rec);
            CheckSimultaneousPmtInfoGiroAcc(Rec);  //NAVDK
            CheckEmptyPmtInfo(Rec);
            CheckCreditorPaymentReference(Rec);  //NAVDK
            CheckGiroPaymentReference(Rec);  //NAVDK
            CheckBalAccountType(Rec);
            CheckBankAccount(Rec);
            CheckBalAccountNo(Rec);
            CheckTransferCurrencyCode(Rec);  //NAVDK
            CheckCreditorCurrencyCode(Rec);  //NAVDK
            CheckGiroCurrencyCode(Rec);  //NAVDK
            CheckTransferCountryRegionCode(Rec);  //NAVDK
            OnPmtExportVendorLedgerCheck(Rec);
          END;

  }
  CODE
  {
    VAR
      EmptyPaymentDetailsErr@1003 : TextConst '@@@="%1=Field;%2=Field";ENU=%1 or %2 must be used for payments.;NOR=%1 eller %2 m† brukes ved betaling.;SVE=%1 eller %2 m†ste anv„ndas f”r betalningar.';
      FieldIsNotEmptyErr@1060003 : TextConst 'ENU=%1 must have a value;SVE=%1 m†ste ha ett v„rde';
      SimultaneousPaymentDetailsErr@1000 : TextConst '@@@="%1=Field;%2=Field";ENU=%1 and %2 cannot be used simultaneously for payments.;NOR=%1 og %2 kan ikke brukes samtidig ved betaling.;SVE=%1 och %2 kan inte anv„ndas samtidigt f”r betalningar.';
      WrongCreditorCurrencyErr@1060001 : TextConst '@@@="%1=Field;%2=Table;%3=Value";ENU=%1 for one or more %2 is incorrect. You can only use %3.';
      WrongFieldValueErr@1001 : TextConst '@@@="%1=Field;%2=Table;%3=Value";ENU=%1 for one or more %2 is different from %3.;NOR=%1 er forskjellig fra %3 for ‚n eller flere forekomster av %2.;SVE=%1 f”r en eller flera %2 skiljer sig fr†n %3.';
      WrongTransferCurrencyErr@1060000 : TextConst '@@@="%1=Field;%2=Table;%3=Value;%4=Value";ENU=%1 for one or more %2 is incorrect. You can only use %3 or %4.';
      MissingPmtMethodErr@1002 : TextConst 'ENU=%1 must be used for payments.;NOR=%1 m† brukes ved betaling.;SVE=%1 m†ste anv„ndas f”r betalningar.';

    LOCAL PROCEDURE CheckDocumentType@5(VAR VendLedgEntry@1000 : Record 25);
    VAR
      VendLedgEntry2@1001 : Record 25;
    BEGIN
      VendLedgEntry2.COPY(VendLedgEntry);
      VendLedgEntry2.SETFILTER("Document Type",'<>%1',VendLedgEntry2."Document Type"::Payment);

      IF NOT VendLedgEntry2.ISEMPTY THEN
        ERROR(WrongFieldValueErr,
          VendLedgEntry2.FIELDCAPTION("Document Type"),VendLedgEntry2.TABLECAPTION,VendLedgEntry2."Document Type"::Payment);
    END;

    LOCAL PROCEDURE CheckPaymentMethod@4(VAR VendLedgEntry@1000 : Record 25);
    VAR
      VendLedgEntry2@1001 : Record 25;
    BEGIN
      VendLedgEntry2.COPY(VendLedgEntry);
      VendLedgEntry2.SETRANGE("Payment Method Code",'');

      IF NOT VendLedgEntry2.ISEMPTY THEN
        ERROR(MissingPmtMethodErr,VendLedgEntry2.FIELDCAPTION("Payment Method Code"));
    END;

    LOCAL PROCEDURE CheckSimultaneousPmtInfoCreditorNo@1(VAR VendLedgEntry@1000 : Record 25);
    VAR
      VendLedgEntry2@1001 : Record 25;
    BEGIN
      VendLedgEntry2.COPY(VendLedgEntry);
      VendLedgEntry2.SETFILTER("Recipient Bank Account",'<>%1','');
      VendLedgEntry2.SETFILTER("Creditor No.",'<>%1','');

      IF NOT VendLedgEntry2.ISEMPTY THEN
        ERROR(SimultaneousPaymentDetailsErr,
          VendLedgEntry2.FIELDCAPTION("Recipient Bank Account"),VendLedgEntry2.FIELDCAPTION("Creditor No."));
    END;

    LOCAL PROCEDURE CheckSimultaneousPmtInfoGiroAcc@1060003(VAR VendLedgEntry@1000 : Record 25);
    VAR
      VendLedgEntry2@1001 : Record 25;
    BEGIN
      //NAVDK
      VendLedgEntry2.COPY(VendLedgEntry);
      VendLedgEntry2.SETFILTER("Recipient Bank Account",'<>%1','');
      VendLedgEntry2.SETFILTER("Giro Acc. No.",'<>%1','');

      IF NOT VendLedgEntry2.ISEMPTY THEN
        ERROR(SimultaneousPaymentDetailsErr,
          VendLedgEntry2.FIELDCAPTION("Recipient Bank Account"),VendLedgEntry2.FIELDCAPTION("Giro Acc. No."));
    END;

    LOCAL PROCEDURE CheckEmptyPmtInfo@6(VAR VendLedgEntry@1000 : Record 25);
    VAR
      VendLedgEntry2@1001 : Record 25;
      Handled@1213 : Boolean;
    BEGIN
      VendLedgEntry2.COPY(VendLedgEntry);
      VendLedgEntry2.SETRANGE("Recipient Bank Account",'');
      VendLedgEntry2.SETRANGE("Creditor No.",'');
      VendLedgEntry2.SETRANGE("Giro Acc. No.",'');

      OnCheckEmptyPmtInfoVendorLedgerEntry(VendLedgEntry2,Handled);

      IF NOT Handled THEN
        IF NOT VendLedgEntry2.ISEMPTY THEN
          ERROR(EmptyPaymentDetailsErr,
          VendLedgEntry2.FIELDCAPTION("Recipient Bank Account"),VendLedgEntry2.FIELDCAPTION("Creditor No."),VendLedgEntry2.FIELDCAPTION("Giro Acc. No."));
    END;

    LOCAL PROCEDURE CheckCreditorPaymentReference@1060012(VAR VendLedgEntry@1060000 : Record 25);
    VAR
      PaymentMethod@1060002 : Record 289;
      VendLedgEntry2@1060001 : Record 25;
    BEGIN
      //NAVDK
      VendLedgEntry2.COPY(VendLedgEntry);

      REPEAT
        IF (VendLedgEntry2."Creditor No." <> '') AND (VendLedgEntry2."Payment Reference" = '') THEN BEGIN
          PaymentMethod.GET(VendLedgEntry2."Payment Method Code");
          IF PaymentMethod."Payment Type Validation" = PaymentMethod."Payment Type Validation"::"FIK 71" THEN
            ERROR(FieldIsNotEmptyErr,VendLedgEntry2.FIELDCAPTION("Payment Reference"));
        END;
      UNTIL VendLedgEntry2.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckGiroPaymentReference@1060004(VAR VendLedgEntry@1060000 : Record 25);
    VAR
      PaymentMethod@1060002 : Record 289;
      VendLedgEntry2@1060001 : Record 25;
    BEGIN
      //NAVDK
      VendLedgEntry2.COPY(VendLedgEntry);

      REPEAT
        IF (VendLedgEntry2."Giro Acc. No." <> '') AND (VendLedgEntry2."Payment Reference" = '') THEN BEGIN
          PaymentMethod.GET(VendLedgEntry2."Payment Method Code");
          IF PaymentMethod."Payment Type Validation" = PaymentMethod."Payment Type Validation"::"FIK 04" THEN
            ERROR(FieldIsNotEmptyErr,VendLedgEntry2.FIELDCAPTION("Payment Reference"));
        END;
      UNTIL VendLedgEntry2.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckBalAccountType@2(VAR VendLedgEntry@1000 : Record 25);
    VAR
      VendLedgEntry2@1001 : Record 25;
    BEGIN
      VendLedgEntry2.COPY(VendLedgEntry);
      VendLedgEntry2.SETFILTER("Bal. Account Type",'<>%1',VendLedgEntry2."Bal. Account Type"::"Bank Account");

      IF NOT VendLedgEntry2.ISEMPTY THEN
        ERROR(WrongFieldValueErr,VendLedgEntry2.FIELDCAPTION("Bal. Account Type"),
          VendLedgEntry2.TABLECAPTION,VendLedgEntry2."Bal. Account Type"::"Bank Account");
    END;

    LOCAL PROCEDURE CheckBalAccountNo@3(VAR VendLedgEntry@1000 : Record 25);
    VAR
      VendLedgEntry2@1001 : Record 25;
    BEGIN
      VendLedgEntry2.COPY(VendLedgEntry);
      VendLedgEntry2.SETRANGE("Bal. Account Type",VendLedgEntry2."Bal. Account Type"::"Bank Account");
      VendLedgEntry2.SETFILTER("Bal. Account No.",'<>%1',VendLedgEntry."Bal. Account No.");

      IF NOT VendLedgEntry2.ISEMPTY THEN
        ERROR(WrongFieldValueErr,VendLedgEntry2.FIELDCAPTION("Bal. Account No."),
          VendLedgEntry2.TABLECAPTION,VendLedgEntry."Bal. Account No.");
    END;

    LOCAL PROCEDURE CheckTransferCurrencyCode@1060000(VAR VendLedgEntry@1060000 : Record 25);
    VAR
      EuroCurrency@1060002 : Record 4;
      GeneralLedgerSetup@1060001 : Record 98;
      VendLedgEntry2@1060003 : Record 25;
    BEGIN
      //NAVDK
      GeneralLedgerSetup.GET;
      EuroCurrency.SETRANGE("EMU Currency",TRUE);
      EuroCurrency.FINDFIRST;

      VendLedgEntry2.COPY(VendLedgEntry);
      VendLedgEntry2.SETFILTER("Recipient Bank Account",'<>%1','');
      VendLedgEntry2.SETFILTER("Currency Code",'<>%1&<>%2','',EuroCurrency.Code);

      IF NOT VendLedgEntry2.ISEMPTY THEN
        ERROR(WrongTransferCurrencyErr,
          VendLedgEntry2.FIELDCAPTION("Currency Code"),VendLedgEntry2.TABLECAPTION,GeneralLedgerSetup."LCY Code",EuroCurrency.Code);
    END;

    LOCAL PROCEDURE CheckCreditorCurrencyCode@1060002(VAR VendLedgEntry@1060000 : Record 25);
    VAR
      GeneralLedgerSetup@1060001 : Record 98;
      VendLedgEntry2@1060003 : Record 25;
    BEGIN
      //NAVDK
      GeneralLedgerSetup.GET;

      VendLedgEntry2.COPY(VendLedgEntry);
      VendLedgEntry2.SETFILTER("Creditor No.",'<>%1','');
      VendLedgEntry2.SETFILTER("Currency Code",'<>%1','');

      IF NOT VendLedgEntry2.ISEMPTY THEN
        ERROR(WrongCreditorCurrencyErr,
          VendLedgEntry2.FIELDCAPTION("Currency Code"),VendLedgEntry2.TABLECAPTION,GeneralLedgerSetup."LCY Code");
    END;

    LOCAL PROCEDURE CheckGiroCurrencyCode@1060001(VAR VendLedgEntry@1060000 : Record 25);
    VAR
      GeneralLedgerSetup@1060001 : Record 98;
      VendLedgEntry2@1060003 : Record 25;
    BEGIN
      //NAVDK
      GeneralLedgerSetup.GET;

      VendLedgEntry2.COPY(VendLedgEntry);
      VendLedgEntry2.SETFILTER("Giro Acc. No.",'<>%1','');
      VendLedgEntry2.SETFILTER("Currency Code",'<>%1','');

      IF NOT VendLedgEntry2.ISEMPTY THEN
        ERROR(WrongCreditorCurrencyErr,
          VendLedgEntry2.FIELDCAPTION("Currency Code"),VendLedgEntry2.TABLECAPTION,GeneralLedgerSetup."LCY Code");
    END;

    LOCAL PROCEDURE CheckTransferCountryRegionCode@1060005(VAR VendLedgEntry@1060000 : Record 25);
    VAR
      BankAccount@1060004 : Record 270;
      PaymentMethod@1060003 : Record 289;
      VendBankAcc@1060002 : Record 288;
      VendLedgEntry2@1060001 : Record 25;
      PmtExportMgt@1060005 : Codeunit 1210;
    BEGIN
      //NAVDK
      VendLedgEntry2.COPY(VendLedgEntry);
      VendLedgEntry2.SETFILTER("Recipient Bank Account",'<>%1','');
      VendLedgEntry2.SETFILTER("Payment Method Code",'<>%1','');

      IF VendLedgEntry2.FINDSET THEN BEGIN
        REPEAT
          IF VendBankAcc.GET(VendLedgEntry2."Vendor No.",VendLedgEntry2."Recipient Bank Account") THEN BEGIN
            PaymentMethod.GET(VendLedgEntry2."Payment Method Code");
            BankAccount.GET(VendLedgEntry2."Bal. Account No.");
            PmtExportMgt.CheckBankTransferCountryRegion(BankAccount."Country/Region Code",VendBankAcc."Country/Region Code",PaymentMethod);
          END;
        UNTIL VendLedgEntry2.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckBankAccount@7(VAR VendLedgEntry@1000 : Record 25);
    VAR
      BankAccount@1001 : Record 270;
    BEGIN
      BankAccount.GET(VendLedgEntry."Bal. Account No.");
      BankAccount.TESTFIELD("Payment Export Format");
    END;

    [Integration]
    LOCAL PROCEDURE OnPmtExportVendorLedgerCheck@1213(VAR VendorLedgerEntry@1300 : Record 25);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCheckEmptyPmtInfoVendorLedgerEntry@1214(VAR VendorLedgerEntry@1213 : Record 25;VAR Handled@1214 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

