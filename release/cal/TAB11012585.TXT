OBJECT Table 11012585 Rate Component
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckRateCompResult();

               INSERT;
               UpdateSurcharges(Rec, TRUE);  //*19210
               DELETE;
             END;

    OnModify=BEGIN
               CheckRateCompResult();

               MODIFY;
               UpdateSurcharges(Rec, TRUE);  //*19210
             END;

    OnDelete=BEGIN
               DELETE;
               UpdateSurcharges(Rec, TRUE);  //*19210
               INSERT;
             END;

    OnRename=BEGIN
               ERROR(Text000);
             END;

    CaptionML=[ENU=Rate Component;
               NOR=Satskomponent;
               SVE=Avgiftskomponent];
    LookupPageID=Page11012618;
    DrillDownPageID=Page11012618;
  }
  FIELDS
  {
    { 5   ;   ;Rental Type         ;Option        ;CaptionML=[ENU=Rental Type;
                                                              NOR=Leietype;
                                                              SVE=Uthyrningstyp];
                                                   OptionCaptionML=[ENU=Rental,Sales / Buy Back,Plant Hours;
                                                                    NOR=Leie,Salg / Tilbakekj›p,Maskintimer;
                                                                    SVE=Uthyrning,F”rs„ljning/†terk”p,Maskintimmar];
                                                   OptionString=Rental,Sales / Buy Back,Plant Hours;
                                                   Editable=No }
    { 10  ;   ;Plant Type          ;Code20        ;TableRelation="Plant Type";
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Plant Unit of Measure");
                                                                CalcfieldRateUnit();
                                                              END;

                                                   CaptionML=[ENU=Plant Type;
                                                              NOR=Maskintype;
                                                              SVE=Maskintyp];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 15  ;   ;Plant No.           ;Code10        ;TableRelation="Plant Number".No. WHERE (Plant Type=FIELD(Plant Type));
                                                   CaptionML=[ENU=Plant No.;
                                                              NOR=Maskinnr.;
                                                              SVE=Maskinnr];
                                                   Editable=No }
    { 20  ;   ;Starting Date       ;Date          ;TableRelation="Rental Rate"."Starting Date" WHERE (Rental Type=FIELD(Rental Type),
                                                                                                      Plant Type=FIELD(Plant Type),
                                                                                                      Plant No.=FIELD(Plant No.));
                                                   CaptionML=[ENU=Starting Date;
                                                              NOR=Startdato;
                                                              SVE=Startdatum] }
    { 30  ;   ;Rental Rate Code    ;Code10        ;TableRelation="Standard Rate Component";
                                                   OnValidate=BEGIN
                                                                CheckRateCompResult();
                                                                CALCFIELDS(Description);
                                                                IF ("Rental Rate Code" <> xRec."Rental Rate Code") THEN
                                                                  InitRecord();
                                                              END;

                                                   CaptionML=[ENU=Rental Rate Code;
                                                              NOR=Leiesatsskode;
                                                              SVE=Uthyrning avgiftskod];
                                                   NotBlank=Yes }
    { 35  ;   ;Description         ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Standard Rate Component".Description WHERE (Code=FIELD(Rental Rate Code)));
                                                   CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning];
                                                   Editable=No }
    { 40  ;   ;Internal/External   ;Option        ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                IF IsSurcharge() THEN BEGIN
                                                                  GetDefaultBaseAmount();
                                                                  CalculateAmount();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Internal/External;
                                                              NOR=Internt/Eksternt;
                                                              SVE=Internt/externt];
                                                   OptionCaptionML=[ENU=Internal,External;
                                                                    NOR=Internt,Eksternt;
                                                                    SVE=Internt,Externt];
                                                   OptionString=Internal,External }
    { 50  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                //IF (Amount <> xRec.Amount) THEN  //*19210.o
                                                                //  CalculatePassOnPerc();
                                                                //*19210.n
                                                                IF (Amount <> xRec.Amount) THEN BEGIN
                                                                  IF NOT IsSurcharge() THEN
                                                                    CalculatePassOnPerc()
                                                                  ELSE
                                                                    CalculatePercentage();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              NOR=Bel›p;
                                                              SVE=Belopp];
                                                   AutoFormatType=2 }
    { 60  ;   ;Based on            ;Option        ;OnValidate=BEGIN
                                                                IF ("Based on" = "Based on"::None) THEN BEGIN
                                                                  "Base Amount" := 0;
                                                                  Percentage := 0;
                                                                  "Pass on Percentage" := 100;
                                                                END ELSE BEGIN
                                                                  IF ("Based on" <> xRec."Based on") THEN BEGIN
                                                                    //IF ("Pass on Percentage" = 0) THEN  //*19210.o
                                                                    IF ("Pass on Percentage" = 0) OR IsSurcharge() THEN  //*19210
                                                                      "Pass on Percentage" := 100;
                                                                    GetDefaultBaseAmount();
                                                                    CalculateAmount();
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Based on;
                                                              NOR=Basert p†;
                                                              SVE=Baserad p†];
                                                   OptionCaptionML=[ENU=" ,Depreciation,New Price,Base Amount,Average Investment Value,,,,,,,,,,,,,,,,,,,,,Surcharge";
                                                                    NOR=" ,Avskrivning,Ny Pris,Grunnbel›p,Gjennomsnittlig investeringsverdi,,,,,,,,,,,,,,,,,,,,,Tilleggsgebyr";
                                                                    SVE=" ,Avskrivning,Nytt pris,Grundbelopp,Genomsnittligt investeringsv„rde,,,,,,,,,,,,,,,,,,,,,Till„ggsavgift"];
                                                   OptionString=None,Depreciation,New Price,Base Amount,AverInvestValue,,,,,,,,,,,,,,,,,,,,,SurchargeL1;
                                                   Description=Option must be the same as in T11012584. Note: Surcharge(s) must be the last option(s). }
    { 70  ;   ;Pass on Percentage  ;Decimal       ;OnValidate=BEGIN
                                                                //IF ("Based on" = "Based on"::None) THEN  //*19210.o
                                                                IF ("Based on" = "Based on"::None) OR IsSurcharge() THEN  //*19210
                                                                  "Pass on Percentage" := 100
                                                                ELSE BEGIN
                                                                  IF ("Pass on Percentage" <> xRec."Pass on Percentage") THEN
                                                                    CalculateAmount();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Pass on percentage.;
                                                              NOR=Videresend Prosent.;
                                                              SVE=Vidarebefordra procent.];
                                                   MinValue=0 }
    { 80  ;   ;Base Amount         ;Decimal       ;OnValidate=BEGIN
                                                                IF IsSurcharge() THEN BEGIN  //*19210
                                                                  GetDefaultBaseAmount();  //* Only calculate BaseAmount allowed (not editable)
                                                                  CalculateAmount();
                                                                  EXIT;
                                                                END;
                                                                IF ("Based on" = "Based on"::None) THEN
                                                                  "Base Amount" := 0
                                                                ELSE BEGIN
                                                                  GLSetup.GET;
                                                                  "Base Amount" := ROUND("Base Amount", GLSetup."Amount Rounding Precision");
                                                                  IF ("Base Amount" <> xRec."Base Amount") THEN
                                                                    CalculateAmount();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Base Amount;
                                                              NOR=Grunnbel›p;
                                                              SVE=Basbelopp];
                                                   AutoFormatType=2 }
    { 90  ;   ;Percentage          ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Based on" = "Based on"::None) THEN
                                                                  Percentage := 0
                                                                ELSE BEGIN
                                                                  IF (Percentage <> xRec.Percentage) THEN
                                                                    CalculateAmount();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Percentage;
                                                              NOR=Prosent;
                                                              SVE=Procent] }
    { 100 ;   ;Internal Rate Components;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Rate Component".Amount WHERE (Rental Type=FIELD(Rental Type),
                                                                                                  Plant Type=FIELD(Plant Type),
                                                                                                  Plant No.=FIELD(Plant No.),
                                                                                                  Starting Date=FIELD(Starting Date),
                                                                                                  Internal/External=CONST(Internal)));
                                                   CaptionML=[ENU=Internal Rate Components;
                                                              NOR=Interne satskomponenter;
                                                              SVE=Interna avgiftskomponenter];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 110 ;   ;External Rate Components;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Rate Component".Amount WHERE (Rental Type=FIELD(Rental Type),
                                                                                                  Plant Type=FIELD(Plant Type),
                                                                                                  Plant No.=FIELD(Plant No.),
                                                                                                  Starting Date=FIELD(Starting Date)));
                                                   CaptionML=[ENU=External Rate Components;
                                                              NOR=Eksterne satskomponenter;
                                                              SVE=Externa avgiftskomponenter];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 120 ;   ;Plant Unit of Measure;Code10       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type"."Unit of Measure" WHERE (Code=FIELD(Plant Type)));
                                                   CaptionML=[ENU=Plant Unit of Measure;
                                                              NOR=Maskin M†leenhet;
                                                              SVE=Maskin m†ttenhet];
                                                   Editable=No }
    { 121 ;   ;Rate Unit of Measure;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Plant Type"."Rate Unit of Measure" WHERE (Code=FIELD(Plant Type)));
                                                   CaptionML=[ENU=Rate Unit of Measure;
                                                              NOR=M†leenhet for Avgift;
                                                              SVE=Avgiftsenhet];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Rental Type,Plant Type,Plant No.,Starting Date,Rental Rate Code;
                                                   Clustered=Yes }
    {    ;Rental Type,Plant Type,Plant No.,Starting Date,Internal/External;
                                                   SumIndexFields=Amount }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PlantSetupRec@1210190002 : Record 11012550;
      StandardRateCompRec@1210190003 : Record 11012584;
      GLSetup@1100485000 : Record 98;
      Text000@1100525000 : TextConst 'ENU=Rename not allowed.;NOR=Ikke tillatt † bytte navn.;SVE=Det „r inte till†tet att byta namn.';
      Text001@1100485001 : TextConst 'ENU=may not be %1 from the Plant Setup;NOR=kan ikke v‘re %1 fra maskininnstillinger;SVE=kan inte vara %1 fr†n Maskinsinst„llningar';

    PROCEDURE InitRecord@1210190007();
    BEGIN
      IF NOT StandardRateCompRec.GET("Rental Rate Code") THEN
        EXIT;

      "Based on" := StandardRateCompRec."Based on";
      Percentage := StandardRateCompRec.Percentage;
      "Pass on Percentage" := StandardRateCompRec."Pass on Percentage";
      "Internal/External" := StandardRateCompRec."Internal/External";
      GetDefaultBaseAmount();
      CalculateAmount();
    END;

    PROCEDURE GetDefaultBaseAmount@1210190003();
    VAR
      CurrentPrice@1100529002 : Decimal;
      NoOfDepreciationYears@1100529001 : Decimal;
      ScrapValue@1100529000 : Decimal;
    BEGIN
      GetValuesOnPlantLevel(CurrentPrice, NoOfDepreciationYears, ScrapValue);
      "Base Amount" := 0;
      CASE "Based on" OF
        "Based on"::Depreciation:
           "Base Amount" := (CurrentPrice - ScrapValue) *  GetQtyOfMeasure() / NoOfDepreciationYears;
        "Based on"::"New Price":
          "Base Amount" := CurrentPrice * GetQtyOfMeasure();
        "Based on"::AverInvestValue:  //*19210
          "Base Amount" := ((CurrentPrice + ScrapValue) / 2) * GetQtyOfMeasure();
        "Based on"::SurchargeL1:  //*19210
          BEGIN
            "Base Amount" := GetBaseAmountSurcharges(Rec);
            EXIT;  // Surcharges rounded according to "Unit-Amount Rounding Precision", so exit
          END;
      END;
      GLSetup.GET;
      "Base Amount" := ROUND("Base Amount", GLSetup."Amount Rounding Precision");
    END;

    LOCAL PROCEDURE GetValuesOnPlantLevel@1100529000(VAR CurrentPrice@1100529002 : Decimal;VAR NoOfDepreciationYears@1100529003 : Decimal;VAR ScrapValue@1100529004 : Decimal);
    VAR
      PlantType@1100529001 : Record 11012551;
      PlantNumber@1100529000 : Record 11012552;
    BEGIN
      PlantType.GET("Plant Type");
      IF "Plant No." <> '' THEN BEGIN
        IF PlantNumber.GET("Plant Type", "Plant No.") THEN BEGIN
          IF PlantNumber."Values on Plant No. Level" THEN BEGIN
            IF ("Based on" = "Based on"::Depreciation) THEN
              PlantNumber.TESTFIELD("No. of Depreciation Years");
            CurrentPrice := PlantNumber."Current Price";
            NoOfDepreciationYears := PlantNumber."No. of Depreciation Years";
            ScrapValue := PlantNumber."Scrap Value";
            EXIT;
          END;
        END;
      END;
      IF ("Based on" = "Based on"::Depreciation) THEN
        PlantType.TESTFIELD("No. of Depreciation Years");
      CurrentPrice := PlantType."Current Price";
      NoOfDepreciationYears := PlantType."No. of Depreciation Years";
      ScrapValue := PlantType."Scrap Value";
    END;

    PROCEDURE CalculateAmount@1210190000();
    BEGIN
      IF ("Based on" = "Based on"::None) THEN
        EXIT;
      IF IsSurcharge() THEN  //*19210
        Amount := "Base Amount" * (Percentage / 100)  //*19210  Note: For surcharge "Pass on Percentage" is 100
      ELSE BEGIN
        CheckAvailableDays();
        Amount := "Base Amount" * (Percentage / 100) / PlantSetupRec."Availabe Rental Days by Year" * ("Pass on Percentage" / 100);
        IF "Rental Type" = "Rental Type"::"Plant Hours" THEN
          Amount := Amount / 8;
      END;
      GLSetup.GET;
      Amount := ROUND(Amount, GLSetup."Unit-Amount Rounding Precision");
    END;

    PROCEDURE CalculatePassOnPerc@1210190001();
    VAR
      lvAmount@1210190000 : Decimal;
    BEGIN
      IF ("Based on" = "Based on"::None) OR IsSurcharge() THEN  //*19210
        EXIT;

      CheckAvailableDays();

      lvAmount := "Base Amount" * (Percentage / 100) / PlantSetupRec."Availabe Rental Days by Year";
      IF "Rental Type" = "Rental Type"::"Plant Hours" THEN
        lvAmount := lvAmount / 8;
      IF lvAmount <> 0 THEN
        "Pass on Percentage" := ROUND((Amount / lvAmount * 100), 0.01)
      ELSE
        "Pass on Percentage" := 0;
    END;

    PROCEDURE CalculatePercentage@1100525004();
    BEGIN
      //*19210     //Note: "Pass on Percentage" is always 100 for surcharges
      IF NOT IsSurcharge() THEN
        EXIT;

      IF "Base Amount" <> 0 THEN
        Percentage := ROUND((Amount / "Base Amount" * 100), 0.01)
      ELSE
        Percentage := 0;
    END;

    PROCEDURE CheckAvailableDays@1210190004();
    BEGIN
      PlantSetupRec.GET;
      PlantSetupRec.TESTFIELD("Availabe Rental Days by Year");
    END;

    PROCEDURE CalcfieldRateUnit@1100485000() : Code[10];
    BEGIN
      CALCFIELDS("Plant Unit of Measure", "Rate Unit of Measure");
      CASE "Rental Type" OF
        "Rental Type"::Rental:
          IF ("Rate Unit of Measure" = '') THEN
            "Rate Unit of Measure" := "Plant Unit of Measure";
        "Rental Type"::"Sales / Buy Back":
          "Rate Unit of Measure" := "Plant Unit of Measure";
        "Rental Type"::"Plant Hours":
          BEGIN
            PlantSetupRec.GET;
            "Rate Unit of Measure" := PlantSetupRec."Plant Hours Unit of Measure";
          END;
        ELSE
          "Rate Unit of Measure" := '';
      END;
      EXIT("Rate Unit of Measure");
    END;

    PROCEDURE GetQtyOfMeasure@1100485001() : Decimal;
    VAR
      lvPlantUnitRec@1100485000 : Record 11012599;
    BEGIN
      CalcfieldRateUnit();
      IF ("Rate Unit of Measure" = '') OR ("Rate Unit of Measure" = "Plant Unit of Measure") THEN
        EXIT(1);
      IF ("Rental Type" = "Rental Type"::"Plant Hours") THEN
        EXIT(1);

      lvPlantUnitRec.GET("Plant Type", "Rate Unit of Measure");
      lvPlantUnitRec.TESTFIELD("Qty. per Unit of Measure");

      EXIT(lvPlantUnitRec."Qty. per Unit of Measure");
    END;

    PROCEDURE CheckRateCompResult@1100485004();
    BEGIN
      IF "Rental Rate Code" <> '' THEN BEGIN
        PlantSetupRec.GET;
        IF ("Rental Rate Code" = PlantSetupRec."Rate Component Result") THEN
          FIELDERROR("Rental Rate Code", STRSUBSTNO(Text001, PlantSetupRec.FIELDCAPTION("Rate Component Result")));
      END;
    END;

    PROCEDURE IsSurcharge@1100525000() : Boolean;
    BEGIN
      //*19210
      CASE "Based on" OF
        "Based on"::SurchargeL1:
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetBaseAmountSurcharges@1100525001(CurrRateCompRec@1100525001 : Record 11012585) BaseAmount : Decimal;
    VAR
      RateCompRec@1100525000 : Record 11012585;
    BEGIN
      //*19210
      BaseAmount := 0;
      IF NOT CurrRateCompRec.IsSurcharge() THEN
        EXIT;

      RateCompRec.SETRANGE("Rental Type", CurrRateCompRec."Rental Type");
      RateCompRec.SETRANGE("Plant Type", CurrRateCompRec."Plant Type");
      RateCompRec.SETRANGE("Plant No.", CurrRateCompRec."Plant No.");
      RateCompRec.SETRANGE("Starting Date", CurrRateCompRec."Starting Date");
      // Not current record, old "Based On" can be not equal to Surcharge because maybe record in not updated yet.
      RateCompRec.SETFILTER("Rental Rate Code", '<>%1', CurrRateCompRec."Rental Rate Code");
      IF CurrRateCompRec."Internal/External" = CurrRateCompRec."Internal/External"::Internal THEN  // Count only internal
        RateCompRec.SETRANGE("Internal/External", RateCompRec."Internal/External"::Internal);      // (Note: external=int.+ext.)
      RateCompRec.SETFILTER("Based on", '<%1', CurrRateCompRec."Based on");
      IF RateCompRec.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          BaseAmount := BaseAmount + RateCompRec.Amount;
        UNTIL RateCompRec.NEXT = 0;
        GLSetup.GET;
        BaseAmount := ROUND(BaseAmount, GLSetup."Unit-Amount Rounding Precision");
      END;
    END;

    PROCEDURE UpdateSurcharges@1100525002(CurrRateCompRec@1100525001 : Record 11012585;OnUpdateMode@1100525003 : Boolean);
    VAR
      RateCompRec@1100525000 : Record 11012585;
      BaseAmount@1100525002 : Decimal;
    BEGIN
      //*19210
      RateCompRec.SETRANGE("Rental Type", CurrRateCompRec."Rental Type");
      RateCompRec.SETRANGE("Plant Type", CurrRateCompRec."Plant Type");
      RateCompRec.SETRANGE("Plant No.", CurrRateCompRec."Plant No.");
      RateCompRec.SETRANGE("Starting Date", CurrRateCompRec."Starting Date");
      IF OnUpdateMode THEN  // Not current record, do not modify the record that is updated on this moment.
        RateCompRec.SETFILTER("Rental Rate Code", '<>%1', CurrRateCompRec."Rental Rate Code");
      RateCompRec.SETRANGE("Based on", RateCompRec."Based on"::SurchargeL1);
      IF RateCompRec.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          BaseAmount := GetBaseAmountSurcharges(RateCompRec);
          IF BaseAmount <> RateCompRec."Base Amount" THEN BEGIN
            RateCompRec."Base Amount" := BaseAmount;
            RateCompRec.CalculateAmount();
            RateCompRec.MODIFY(FALSE);  //* False!
          END;
        UNTIL RateCompRec.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

