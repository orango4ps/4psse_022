OBJECT Report 11020505 Create Pl. Trans. Purch.Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Eink.-Best. Transp. erstellen;
               ENU=Create Purch.Order Transport;
               NLD=Inkooporder transport aanmaken;
               NOR=Opprette Innkj›psordre, Transport;
               SVE=Skapa ink”psorder, transport];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   PlantSetupRec.GET;
                   PlantSetupRec.TESTFIELD("Account Transport Cost");

                   CreatedPurchOrderNo := '';
                   MaxLenDescr1 := MAXSTRLEN(PurchOrderLineRec.Description);
                   MaxLenDescr2 := MAXSTRLEN(PurchOrderLineRec."Description 2");
                 END;

    OnPreReport=VAR
                  lvShippingAgentRec@1100485000 : Record 291;
                  lvFirstVendNo@1100485001 : Code[20];
                BEGIN
                  IF TransOrderTypes = 0 THEN
                    ERROR(Text001);

                  IF InclLoadUnload THEN
                    PlantSetupRec.TESTFIELD("Account Load/Unload Cost");

                  lvShippingAgentRec.COPY("Shipping Agent");
                  lvShippingAgentRec.SETCURRENTKEY("Vendor No.");
                  IF lvShippingAgentRec.FIND('-') THEN BEGIN
                    lvFirstVendNo := lvShippingAgentRec."Vendor No.";
                    lvShippingAgentRec.FIND('+');
                    IF lvShippingAgentRec."Vendor No." <> lvFirstVendNo THEN
                      ERROR(Text000);
                  END;

                  PurchOrderRec."No." := '';

                  IF gOnExistingPurchOrder THEN BEGIN
                    WITH PurchOrderRec DO BEGIN
                      "No." := gPurchOrderNo;
                      TESTFIELD("No.");
                      GET(PurchOrderRec."Document Type"::Order, gPurchOrderNo);
                      TESTFIELD(Status, PurchOrderRec.Status::Open);
                      TESTFIELD("Buy-from Vendor No.");
                    END;
                    WITH PurchOrderLineRec DO BEGIN
                      RESET;
                      SETRANGE("Document Type", "Document Type"::Order);
                      SETRANGE("Document No.", PurchOrderRec."No.");
                      IF FIND('+') THEN
                        NextLineNo := PurchOrderLineRec."Line No." + 10000
                      ELSE
                        NextLineNo := 10000;
                    END;
                  END;

                  TransDateFilter := "Shipping Agent".GETFILTER("Transport Date Filter");
                  MeansOfTransFilter := "Shipping Agent".GETFILTER("Means of Transport Filter");
                END;

  }
  DATASET
  {
    { 9736;    ;DataItem;                    ;
               DataItemTable=Table291;
               DataItemTableView=SORTING(Vendor No.)
                                 WHERE(Code=FILTER(<>''),
                                       External=CONST(Yes));
               OnAfterGetRecord=BEGIN
                                  TESTFIELD(External, TRUE);
                                  TESTFIELD("Vendor No.");
                                  IF gOnExistingPurchOrder THEN
                                    PurchOrderRec.TESTFIELD("Buy-from Vendor No.", "Vendor No.");
                                END;

               ReqFilterFields=Code,Vendor No.,Transport Date Filter,Means of Transport Filter }

    { 7451;1   ;DataItem;                    ;
               DataItemTable=Table11020505;
               DataItemTableView=SORTING(No.)
                                 WHERE(External Transport=CONST(Yes),
                                       Purchase Order=FILTER(''));
               OnPreDataItem=BEGIN
                               FILTERGROUP(9);
                               IF TransDateFilter <> '' THEN
                                 SETFILTER("Transport Date", TransDateFilter);
                               IF MeansOfTransFilter <> '' THEN
                                 SETFILTER("Means of Transport", MeansOfTransFilter);
                               FILTERGROUP(0);
                             END;

               OnAfterGetRecord=BEGIN
                                  TESTFIELD("Shipping Agent");
                                  TESTFIELD("Means of Transport");
                                  TESTFIELD("Transport Date");
                                  TESTFIELD("From Location");
                                  TESTFIELD("To Location");

                                  IF "Ride No." <> '' THEN BEGIN
                                    IF RideRec.GET("Ride No.") THEN BEGIN
                                      IF RideRec."Purchase Order" <> '' THEN
                                        ERROR(Text005, "No.", "Ride No.");
                                    END;
                                  END;

                                  OrderRec.TRANSFERFIELDS("Plant Transport Order");
                                  OrderRec.CALCFIELDS("Means of Transport Description");
                                END;

               ReqFilterFields=No.,Ride No.,Status;
               DataItemLink=Shipping Agent=FIELD(Code) }

    { 9609;2   ;DataItem;                    ;
               DataItemTable=Table11020506;
               DataItemTableView=SORTING(Transport Order No.,Line No.)
                                 WHERE(Type=FILTER(<>Text));
               OnPreDataItem=BEGIN
                               OrderLineInsertedForTransOrder := FALSE;
                               IF NOT (TransOrderTypes IN [TransOrderTypes::"TO", TransOrderTypes::Both]) THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=VAR
                                  lvTransOrderRec@1100485000 : Record 11020505;
                                BEGIN
                                  IF (NOT InclLoadUnload) AND (Type = Type::"Load/Unload") THEN
                                    CurrReport.SKIP;

                                  CostLineRec.TRANSFERFIELDS("Plant Transport Cost Line");

                                  IF PurchOrderRec."No." = '' THEN
                                    InsertPurchOrder();
                                  IF OrderRec."Purchase Order" = '' THEN BEGIN
                                    OrderRec."Purchase Order" := PurchOrderRec."No.";
                                    lvTransOrderRec.GET(OrderRec."No.");
                                    lvTransOrderRec."Purchase Order" := PurchOrderRec."No.";
                                    lvTransOrderRec.MODIFY;
                                  END;
                                  InsertPurchOrderLine();
                                END;

               OnPostDataItem=BEGIN
                                IF OrderLineInsertedForTransOrder THEN
                                 ReadLinkedTransOrders();
                              END;

               DataItemLink=Transport Order No.=FIELD(No.) }

    { 8514;1   ;DataItem;                    ;
               DataItemTable=Table11020507;
               DataItemTableView=SORTING(No.)
                                 WHERE(External Transport=CONST(Yes),
                                       Purchase Order=FILTER(''));
               OnPreDataItem=BEGIN
                               FILTERGROUP(9);
                               IF TransDateFilter <> '' THEN
                                 SETFILTER("Transport Date", TransDateFilter);
                               IF MeansOfTransFilter <> '' THEN
                                 SETFILTER("Means of Transport", MeansOfTransFilter);
                               FILTERGROUP(0);
                             END;

               OnAfterGetRecord=BEGIN
                                  TESTFIELD("Shipping Agent");
                                  TESTFIELD("Means of Transport");
                                  TESTFIELD("Transport Date");
                                  TESTFIELD("From Location");
                                  TESTFIELD("To Location");

                                  IF "Ride No." <> '' THEN BEGIN
                                    IF RideRec.GET("Ride No.") THEN BEGIN
                                      IF RideRec."Purchase Order" <> '' THEN
                                        ERROR(Text005, "No.", "Ride No.");
                                    END;
                                  END;

                                  OrderRec.TRANSFERFIELDS("Posted Plant Transport Order");
                                  OrderRec.CALCFIELDS("Means of Transport Description");
                                END;

               ReqFilterFields=No.,Ride No.;
               DataItemLink=Shipping Agent=FIELD(Code) }

    { 5287;2   ;DataItem;                    ;
               DataItemTable=Table11020508;
               DataItemTableView=SORTING(Transport Order No.,Line No.)
                                 WHERE(Type=FILTER(<>Text));
               OnPreDataItem=BEGIN
                               OrderLineInsertedForTransOrder := FALSE;
                               IF NOT (TransOrderTypes IN [TransOrderTypes::"Posted TO", TransOrderTypes::Both]) THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=VAR
                                  lvPostedTransOrderRec@1100485000 : Record 11020507;
                                BEGIN
                                  IF (NOT InclLoadUnload) AND (Type = Type::"Load/Unload") THEN
                                    CurrReport.SKIP;

                                  CostLineRec.TRANSFERFIELDS("Posted Pl. Transport Cost Line");

                                  IF PurchOrderRec."No." = '' THEN
                                    InsertPurchOrder();
                                  IF OrderRec."Purchase Order" = '' THEN BEGIN
                                    OrderRec."Purchase Order" := PurchOrderRec."No.";
                                    lvPostedTransOrderRec.GET(OrderRec."No.");
                                    lvPostedTransOrderRec."Purchase Order" := PurchOrderRec."No.";
                                    lvPostedTransOrderRec.MODIFY;
                                  END;
                                  InsertPurchOrderLine();
                                END;

               OnPostDataItem=BEGIN
                                IF OrderLineInsertedForTransOrder THEN
                                 ReadPostedLinkedTransOrders();
                              END;

               DataItemLink=Transport Order No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF (PlantSetupRec."Account Load/Unload Cost" = '') THEN
                     InclLoadUnload := FALSE;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1100485002;2;Field  ;
                  CaptionML=[DEU=Transportauftragsart;
                             ENU=Transport Order Type;
                             NLD=Transportordersoort;
                             NOR=Transportordretype;
                             SVE=Transportordertyp];
                  OptionCaptionML=[DEU=,Transportauftrag,Gebuchte Transportauftrag,Beide;
                                   ENU=,Transport Order,Posted Transport Order,Both;
                                   NLD=,Transportorder,Geboekte transportorder,Beide;
                                   NOR=,Transportordre,Bokf›rt Transportordre,Begge;
                                   SVE=,Transportorder,Bokf”rd transportorder,B†da];
                  NotBlank=Yes;
                  BlankZero=Yes;
                  SourceExpr=TransOrderTypes }

      { 1100485000;2;Field  ;
                  CaptionML=[DEU=Einschl. Verladen/Ausladen;
                             ENU=Incl. Load/Unload;
                             NLD=Incl. laden/lossen;
                             NOR=Inkludert laste/losse;
                             SVE=Inklusive lasta/lossa];
                  SourceExpr=InclLoadUnload;
                  OnValidate=BEGIN
                               IF InclLoadUnload THEN
                                 PlantSetupRec.TESTFIELD("Account Load/Unload Cost");
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      PlantSetupRec@1100485000 : Record 11012550;
      PurchOrderRec@1100485001 : Record 38;
      PurchOrderLineRec@1100485002 : Record 39;
      OrderRec@1100485004 : Record 11020507;
      CostLineRec@1100485005 : Record 11020508;
      LinkedTransOrderRec@1100485016 : Record 11020514;
      PostedLinkedTransOrderRec@1100485017 : Record 11020515;
      RideRec@1100525000 : Record 11020517;
      TransOrderTypes@1100485011 : ',TO,Posted TO,Both';
      gOnExistingPurchOrder@1100485007 : Boolean;
      InclLoadUnload@1100485008 : Boolean;
      OrderLineInsertedForTransOrder@1100485015 : Boolean;
      NextLineNo@1100485006 : Integer;
      MaxLenDescr1@1100485018 : Integer;
      MaxLenDescr2@1100485019 : Integer;
      gPurchOrderNo@1100485003 : Code[20];
      Text000@1100485009 : TextConst 'DEU="Es wurde mehr als ein Kreditor (Zusteller) ausgew„hlt; dies ist nicht zul„ssig.";ENU=More than one Vendor (Shipping Agent) selected, this is not allowed.;NLD=Meer dan 1 leveranciers (expediteurs) geselecteerd, dit is niet toegestaan.;NOR=Det er ikke tillatt † velge flere enn ‚n leverand›r (Transport›r).;SVE=Det „r inte till†tet att v„lja fler „n en leverant”r (spedit”r).';
      CreatedPurchOrderNo@1100485013 : Code[20];
      TransDateFilter@1100485010 : Text[1024];
      Text001@1100485012 : TextConst 'DEU=Transportauftragsart muss in Registerkart ''Optionen'' eingegeben werden.;ENU=Transport Order Type must be entered in Tab ''Options''.;NLD=Transportordersoort moet worden ingegeven in tabblad ''Opties''.;NOR=Transportordretype m† angis p† fanen ''Alternativer''.;SVE=Transportordertyp m†ste anges p† fliken ''Alternativ''.';
      MeansOfTransFilter@1100485014 : Text[1024];
      Text002@1100485020 : TextConst 'DEU=Verbundene Transportauftrag;ENU=Linked Transport Order;NLD=Gekoppelde transportorder;NOR=Linket Transportordre;SVE=L„nkad transportorder';
      Text003@1100485021 : TextConst 'DEU=Verbundene Transportauftr„ge;ENU=Linked Transport Orders;NLD=Gekoppelde transportorders;NOR=Koblede transportordre;SVE=L„nkade transportorder';
      Text004@1100485022 : TextConst 'DEU=(Fortsetzung);ENU=(continuation);NLD=(vervolg);NOR=(forlengelse);SVE=(forts„ttning)';
      Text005@1100525001 : TextConst 'DEU="Transportauftrag ''%1'' ist mit Fahrt ''%2'' verbunden; von dieser Fahrt ist bereits ein Einkaufsbestellung erstellt worden.";ENU=Transport order ''%'' is linked to ride ''%2'', of this ride is already a purchase order created.;NLD=Transportorder ''%1'' is gekoppeld aan rit ''%2'', van deze rit is al een inkooporder aangemaakt.;NOR=Transportordre ''%'' er linket til turen ''%2'', for denne turen har allerede en Innkj›psordre blitt opprettet.;SVE=Transportorder ''%'' „r l„nkad till k”rningen ''%2'', av denna k”rning har redan en ink”psorder skapats.';
      SelectedNoSeries@1100409000 : Code[20];

    PROCEDURE SetOnExistingPurchOrder@1100485005(IPurchOrderNo@1100485000 : Code[20]);
    BEGIN
      gOnExistingPurchOrder := TRUE;
      gPurchOrderNo := IPurchOrderNo;
    END;

    PROCEDURE GetCreatedPurchOrderNo@1100485000(VAR OCreatedPurchOrderNo@1100485000 : Code[20]);
    BEGIN
      OCreatedPurchOrderNo := CreatedPurchOrderNo;
    END;

    PROCEDURE InsertPurchOrder@1100485004();
    BEGIN
      IF gOnExistingPurchOrder THEN
        EXIT;

      WITH PurchOrderRec DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Order;
        "No." := '';
        //C021547.sn
        IF SelectedNoSeries = '' THEN
          CheckAskForNoSeries("Document Type"::Order,SelectedNoSeries);
        "No. Series" := SelectedNoSeries;
        GetNoForSelectedNoSeries(PurchOrderRec);
        //C021547.en
        INSERT(TRUE);
        TESTFIELD("No.");
        VALIDATE("Buy-from Vendor No.", "Shipping Agent"."Vendor No.");
        "Amounts only" := FALSE;
        MODIFY(TRUE);

        CreatedPurchOrderNo := "No.";  //* Wordt max. 1 inkooporder aangemaakt (max. 1 leverancier, zie test in 'OnBeforeReport')
        NextLineNo := 10000;
      END;
    END;

    PROCEDURE InsertPurchOrderLine@1100485008();
    VAR
      lvFactor@1100485000 : Integer;
    BEGIN
      WITH PurchOrderLineRec DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Order;
        "Document No." := PurchOrderRec."No.";
        InitRecord();
        "Line No." := NextLineNo;
        VALIDATE("Shortcut Dimension 1 Code", "Shipping Agent"."Cost Centre");
        VALIDATE("Shortcut Dimension 2 Code", CostLineRec."No.");
        Type := Type::"G/L Account";
        IF CostLineRec.Type <> CostLineRec.Type::"Load/Unload" THEN
          VALIDATE("No.", PlantSetupRec."Account Transport Cost")
        ELSE
          VALIDATE("No.", PlantSetupRec."Account Load/Unload Cost");
        Description := COPYSTR(CostLineRec.Description, 1, MaxLenDescr1);
        "Description 2" := COPYSTR(
          FORMAT(OrderRec."Transport Date") + ' ' + OrderRec."Means of Transport Description",
          1, MaxLenDescr2);
        "Plant Transport Order No." := OrderRec."No.";  //* Vullen voor Quantity ivm "Direct Receipt Pl. Transport" (inkoopinstelling)
        "Plant Order No." := CostLineRec."Plant Order No."; //* Mag alleen omdat Item en PlantType IO-regel hier altijd leeg
        "Plant Type" := '';                                 //* anders probleem in CU90.
        "Item No." := '';
        //* Op de inkooporderregel moeten 'Aantal' en 'Bedrag' beide positief of beide negatief zijn.
        //* Als dit niet het geval is dan corrigeren door 'Aantal' en 'Prijs' te vermenigvuldigen met -1.
        IF (CostLineRec.Price >= 0) OR (CostLineRec.Quantity = 0)THEN
          lvFactor := 1
        ELSE
          lvFactor := -1;
        VALIDATE(Quantity, lvFactor * CostLineRec.Quantity);
        VALIDATE("Unit of Measure Code", CostLineRec."Unit of Measure");
        VALIDATE("Direct Unit Cost", lvFactor * CostLineRec.Price);
        INSERT(TRUE);
        NextLineNo := NextLineNo + 10000;
        OrderLineInsertedForTransOrder := TRUE;
      END;
    END;

    PROCEDURE InsertPurchOrderTextLine@1100485002(IDescription1@1100485000 : Text[100];IDescription2@1100485001 : Text[100]);
    BEGIN
      WITH PurchOrderLineRec DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Order;
        "Document No." := PurchOrderRec."No.";
        InitRecord();
        "Line No." := NextLineNo;
        Type := Type::" ";
        Description := COPYSTR(IDescription1, 1, MaxLenDescr1);
        "Description 2" := COPYSTR(IDescription2, 1, MaxLenDescr2);
        "Plant Transport Order No." := OrderRec."No.";
        "Plant Order No." := CostLineRec."Plant Order No.";
        INSERT(TRUE);
        NextLineNo := NextLineNo + 10000;
        OrderLineInsertedForTransOrder := TRUE;
      END;
    END;

    PROCEDURE ReadLinkedTransOrders@1100485003();
    VAR
      lvDescription1@1100485001 : Text[100];
      lvDescription2@1100485000 : Text[100];
    BEGIN
      WITH LinkedTransOrderRec DO BEGIN
        SETRANGE("Transport Order No.", OrderRec."No.");
        SETFILTER("Linked Transport Order No.", '<>%1', '');
        IF COUNT = 1 THEN
          lvDescription1 := Text002
        ELSE
          lvDescription1 := Text003;

        IF FIND('-') THEN BEGIN
          REPEAT
            IF ((STRLEN(lvDescription2) + STRLEN("Linked Transport Order No.")) < MaxLenDescr2) THEN BEGIN
              IF (lvDescription2 <> '') THEN
                lvDescription2 := lvDescription2 + ' ';
              lvDescription2 := lvDescription2 + "Linked Transport Order No.";
            END ELSE BEGIN
              InsertPurchOrderTextLine(lvDescription1, lvDescription2);
              lvDescription1 := Text003 + ' ' + Text004;      //* Vervolgregel zal niet vaak voorkomen, meestal
              lvDescription2 := "Linked Transport Order No."; //* zijn er maar 1 of enkele gekoppelde TO's.
            END;
          UNTIL NEXT = 0;
          InsertPurchOrderTextLine(lvDescription1, lvDescription2);
        END;
      END;
    END;

    PROCEDURE ReadPostedLinkedTransOrders@1100485006();
    VAR
      lvDescription1@1100485001 : Text[100];
      lvDescription2@1100485000 : Text[100];
    BEGIN
      WITH PostedLinkedTransOrderRec DO BEGIN
        SETRANGE("Transport Order No.", OrderRec."No.");
        SETFILTER("Linked Transport Order No.", '<>%1', '');
        IF COUNT = 1 THEN
          lvDescription1 := Text002
        ELSE
          lvDescription1 := Text003;

        IF FIND('-') THEN BEGIN
          REPEAT
            IF ((STRLEN(lvDescription2) + STRLEN("Linked Transport Order No.")) < MaxLenDescr2) THEN BEGIN
              IF (lvDescription2 <> '') THEN
                lvDescription2 := lvDescription2 + ' ';
              lvDescription2 := lvDescription2 + "Linked Transport Order No.";
            END ELSE BEGIN
              InsertPurchOrderTextLine(lvDescription1, lvDescription2);
              lvDescription1 := Text003 + ' ' + Text004;      //* Vervolgregel zal niet vaak voorkomen, meestal
              lvDescription2 := "Linked Transport Order No."; //* zijn er maar 1 of enkele gekoppelde TO's.
            END;
          UNTIL NEXT = 0;
          InsertPurchOrderTextLine(lvDescription1, lvDescription2);
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

