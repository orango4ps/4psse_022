OBJECT Table 11012610 UAR Hour Accounting Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestStatusOpen;

               CheckSetupWorkedHours();
               HourAccFunctionsCU.CalculateHours(Rec, DummyHourAccPauseRec, 'HourLine');
               CalculateTravelHours();
             END;

    OnModify=BEGIN
               CheckSetupWorkedHours();
               HourAccFunctionsCU.CalculateHours(Rec, DummyHourAccPauseRec, 'HourLine');
               CalculateTravelHours();
             END;

    OnDelete=VAR
               lvBlockHoursRec@1210190000 : Record 11012612;
             BEGIN
               TestStatusOpen;

               DeletePause;

               lvBlockHoursRec.SETRANGE(Year,Year);
               lvBlockHoursRec.SETRANGE(Week,Week);
               lvBlockHoursRec.SETRANGE("Employee No.","Employee No.");
               lvBlockHoursRec.SETRANGE("Line No.","Line No.");
               lvBlockHoursRec.DELETEALL;
             END;

    CaptionML=[ENU=Hour Accounting Line (UAR);
               NOR=Timerapporteringsrad (UAR);
               SVE=Tidrapportsrad (UAR)];
  }
  FIELDS
  {
    { 10  ;   ;Year                ;Integer       ;CaptionML=[ENU=Year;
                                                              NOR=èr;
                                                              SVE=èr];
                                                   MinValue=2000;
                                                   NotBlank=Yes }
    { 20  ;   ;Week                ;Integer       ;TableRelation="UAR Week Table".Week WHERE (Year=FIELD(Year));
                                                   CaptionML=[ENU=Week;
                                                              NOR=Uke;
                                                              SVE=Vecka];
                                                   MinValue=1;
                                                   MaxValue=53;
                                                   NotBlank=Yes }
    { 30  ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   CaptionML=[ENU=Employee No.;
                                                              NOR=Ansattnr;
                                                              SVE=AnstÑllningsnr];
                                                   NotBlank=Yes }
    { 40  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              NOR=Linjenr.;
                                                              SVE=Radnr] }
    { 50  ;   ;Receiving Company   ;Text30        ;TableRelation=Company;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Receiving Company" = COMPANYNAME THEN
                                                                  ERROR(Text001);
                                                              END;

                                                   CaptionML=[ENU=Receiving Company;
                                                              NOR=Mottakselskap;
                                                              SVE=Mottagningsfîretag] }
    { 60  ;   ;Project No.         ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) Job;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                GetProjectData(TRUE);

                                                                IF "Project No." <> '' THEN BEGIN
                                                                  IF (ICProjSetupRec."Provisions at Closure") THEN
                                                                    ProjRec.CheckProjectStatus(-1)
                                                                  ELSE
                                                                    ProjRec.CheckProjectStatus(1);

                                                                  IF (Element <> '') THEN BEGIN
                                                                    IF NOT ProjElemRec.GET("Project No.",Element) THEN
                                                                      Element := '';
                                                                  END;

                                                                  IF (Element = '') OR ("Cost Component" = '') THEN BEGIN
                                                                    IF EmplRec.GET("Employee No.") THEN BEGIN
                                                                      IF (Element = '') AND (EmplRec.Element <> '') THEN BEGIN
                                                                        Element := EmplRec.Element;
                                                                        GetProjElementData(FALSE);
                                                                        Element := ProjElemRec.Element;
                                                                      END;
                                                                      IF ("Cost Component" = '') AND (EmplRec."Default Cost Component" <> '') THEN BEGIN
                                                                        "Cost Component" := EmplRec."Default Cost Component";
                                                                      END;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              OnLookupProjectNo();
                                                            END;

                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr.;
                                                              SVE=Projektnr] }
    { 70  ;   ;Element             ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                ElementFormat.FormatElem(Element,2,"Receiving Company");
                                                                GetProjElementData(TRUE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              OnLookupElement();
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Element;
                                                              NOR=Element;
                                                              SVE=Element] }
    { 80  ;   ;Cost Component      ;Code10        ;TableRelation="Cost Components by Employee"."Cost Component" WHERE (Employee No.=FIELD(Employee No.));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                CheckCostComponentAllowed();

                                                                CALCFIELDS("Cost Component Description");
                                                              END;

                                                   CaptionML=[ENU=Cost Component;
                                                              NOR=Kostnadskomponent;
                                                              SVE=Kostnadskomponent] }
    { 81  ;   ;Cost Component Description;Text30  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Cost Component".Description WHERE (Code=FIELD(Cost Component)));
                                                   CaptionML=[ENU=Cost Component Description;
                                                              NOR=Kostnadskomponent, Beskrivelse;
                                                              SVE=Kostnadsdel, beskrivning];
                                                   Editable=No }
    { 90  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  TestStatusOpen;
                                                                  CASE Type OF
                                                                    Type::Project:
                                                                      BEGIN
                                                                        "Service Order No." := '';
                                                                        "Service Location No." := '';
                                                                        "Service Contract No." := '';
                                                                      END;
                                                                    Type::Service:
                                                                      BEGIN
                                                                        "Project No." := '';
                                                                        Element := '';
                                                                      END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              NOR=Radtype;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Project,Service;
                                                                    NOR=Prosjekt,Service;
                                                                    SVE=Projekt,Service];
                                                   OptionString=Project,Service }
    { 100 ;   ;Service Order No.   ;Code20        ;TableRelation=IF (Receiving Company=FILTER('')) "Service Order".No.;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                IF "Service Order No." = '' THEN BEGIN
                                                                  "Service Location No." := '';
                                                                  "Service Contract No." := '';
                                                                  "Additional Cost (Service)" := FALSE;
                                                                END ELSE BEGIN
                                                                  TESTFIELD(Type, Type::Service);
                                                                  GetServOrderData(TRUE);

                                                                  ServOrderRec.CheckStatus(1);
                                                                  //ServOrderRec.TESTFIELD("Service Contract No.");  //db, 07-08-15: only relevant for old service module

                                                                  "Service Location No." := ServOrderRec."Service Location No.";
                                                                  "Service Contract No." := ServOrderRec."Service Contract No.";
                                                                  IF CurrFieldNo = FIELDNO("Service Order No.") THEN
                                                                    "Additional Cost (Service)" := ServOrderRec."Additional Cost";  //db, 09-11-07

                                                                  IF ("Cost Component" = '') THEN BEGIN
                                                                    IF EmplRec.GET("Employee No.") THEN BEGIN
                                                                      IF ("Cost Component" = '') AND (EmplRec."Default Cost Component" <> '') THEN
                                                                        "Cost Component" := EmplRec."Default Cost Component";
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              OnLookupServOrder();
                                                            END;

                                                   CaptionML=[ENU=Service Order No.;
                                                              NOR=Serviceordrenr;
                                                              SVE=Serviceordernr] }
    { 105 ;   ;Service Location No.;Code20        ;TableRelation="Service Location".No.;
                                                   CaptionML=[ENU=Service Location No.;
                                                              NOR=Servicelokasjon Nr.;
                                                              SVE=Serviceplatsnr];
                                                   Editable=No }
    { 106 ;   ;Service Contract No.;Code20        ;TableRelation=Service-Contract.No.;
                                                   CaptionML=[ENU=Service Contract No.;
                                                              NOR=Servicekontraktnr;
                                                              SVE=Servicekontraktnr];
                                                   Editable=No }
    { 130 ;   ;Additional Cost (Service);Boolean  ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Additional Cost (Service)" THEN BEGIN
                                                                  TESTFIELD(Type, Type::Service);
                                                                  TESTFIELD("Service Order No.");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Additional Cost (Service);
                                                              NOR=Tilleggskoster (service);
                                                              SVE=TillÑggskostnader (service)] }
    { 140 ;   ;ATM                 ;Boolean       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=WTM;
                                                              NOR=WTM;
                                                              SVE=WTM];
                                                   Description=NLD=ArbeidsTijd Management }
    { 210 ;   ;Monday Travel To    ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                CheckTravelTimeAllowed("Monday Travel To");
                                                                HourAccFunctionsCU.CheckOverlap(1, Rec);
                                                                WarningMaxTravelTime(1);
                                                              END;

                                                   CaptionML=[ENU=Monday Travel To;
                                                              NOR=Mandag Reise til;
                                                              SVE=MÜndag Resa till];
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 211 ;   ;Monday From         ;Time          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Monday From");
                                                                HourAccFunctionsCU.CheckOverlapFrom(1, Rec);
                                                              END;

                                                   CaptionML=[ENU=Monday From;
                                                              NOR=Mandag fra;
                                                              SVE=MÜndag frÜn] }
    { 212 ;   ;Monday To           ;Time          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Monday To");
                                                                HourAccFunctionsCU.CheckOverlap(1, Rec);
                                                              END;

                                                   CaptionML=[ENU=Monday To;
                                                              NOR=Mandag til;
                                                              SVE=MÜndag till] }
    { 213 ;   ;Monday Travel Back  ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                CheckTravelTimeAllowed("Monday Travel Back");
                                                                HourAccFunctionsCU.CheckOverlap(1, Rec);
                                                                WarningMaxTravelTime(1);
                                                              END;

                                                   CaptionML=[ENU=Monday Travel Back;
                                                              NOR=Mandag Reise tilbake;
                                                              SVE=MÜndag Resa frÜn];
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 215 ;   ;Hours Monday        ;Decimal       ;CaptionML=[ENU=Hours Monday;
                                                              NOR=Timer Mandag;
                                                              SVE=Timmar mÜndag];
                                                   Editable=No }
    { 216 ;   ;Monday Driver Hours ;Boolean       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Monday Driver Hours }
    { 217 ;   ;Monday Stand By Hours;Boolean      ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Monday Stand By Hours }
    { 218 ;   ;Monday Scheduled 12 Hr Shift;Boolean;
                                                   CaptionML=ENU=Monday Scheduled 12 Hour Shift }
    { 219 ;   ;Monday Call-Out Response;Boolean   ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Monday Call-Out Response }
    { 220 ;   ;Tuesday Travel To   ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                CheckTravelTimeAllowed("Tuesday Travel To");
                                                                HourAccFunctionsCU.CheckOverlap(2, Rec);
                                                                WarningMaxTravelTime(2);
                                                              END;

                                                   CaptionML=[ENU=Tuesday Travel To;
                                                              NOR=Tirsdag Reise til;
                                                              SVE=Tisdag Resa till];
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 221 ;   ;Tuesday From        ;Time          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Tuesday From");
                                                                HourAccFunctionsCU.CheckOverlapFrom(2, Rec);
                                                              END;

                                                   CaptionML=[ENU=Tuesday From;
                                                              NOR=Tirsdag fra;
                                                              SVE=Tisdag frÜn] }
    { 222 ;   ;Tuesday To          ;Time          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Tuesday To");
                                                                HourAccFunctionsCU.CheckOverlap(2, Rec);
                                                              END;

                                                   CaptionML=[ENU=Tuesday To;
                                                              NOR=Tirsdag til;
                                                              SVE=Tisdag till] }
    { 223 ;   ;Tuesday Travel Back ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                CheckTravelTimeAllowed("Tuesday Travel Back");
                                                                HourAccFunctionsCU.CheckOverlap(2, Rec);
                                                                WarningMaxTravelTime(2);
                                                              END;

                                                   CaptionML=[ENU=Tuesday Travel Back;
                                                              NOR=Tirsdag Reise tilbake;
                                                              SVE=Tisdag Resa frÜn];
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 225 ;   ;Hours Tuesday       ;Decimal       ;CaptionML=[ENU=Hours Tuesday;
                                                              NOR=Timer Tirsdag;
                                                              SVE=Timmar tisdag];
                                                   Editable=No }
    { 226 ;   ;Tuesday Driver Hours;Boolean       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Tuesday Driver Hours }
    { 227 ;   ;Tuesday Stand By Hours;Boolean     ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Tuesday Stand By Hours }
    { 228 ;   ;Tuesday Scheduled 12 Hr Shift;Boolean;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Tuesday Scheduled 12 Hour Shift }
    { 229 ;   ;Tuesday Call-Out Response;Boolean  ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Tuesday Call-Out Response }
    { 230 ;   ;Wednesday Travel To ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                CheckTravelTimeAllowed("Wednesday Travel To");
                                                                HourAccFunctionsCU.CheckOverlap(3, Rec);
                                                                WarningMaxTravelTime(3);
                                                              END;

                                                   CaptionML=[ENU=Wednesday Travel To;
                                                              NOR=Onsdag Reise til;
                                                              SVE=Onsdag Resa till];
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 231 ;   ;Wednesday From      ;Time          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Wednesday From");
                                                                HourAccFunctionsCU.CheckOverlapFrom(3, Rec);
                                                              END;

                                                   CaptionML=[ENU=Wednesday From;
                                                              NOR=Onsdag fra;
                                                              SVE=Onsdag frÜn] }
    { 232 ;   ;Wednesday To        ;Time          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Wednesday To");
                                                                HourAccFunctionsCU.CheckOverlap(3, Rec);
                                                              END;

                                                   CaptionML=[ENU=Wednesday To;
                                                              NOR=Onsdag til;
                                                              SVE=Onsdag till] }
    { 233 ;   ;Wednesday Travel Back;Decimal      ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                CheckTravelTimeAllowed("Wednesday Travel Back");
                                                                HourAccFunctionsCU.CheckOverlap(3, Rec);
                                                                WarningMaxTravelTime(3);
                                                              END;

                                                   CaptionML=[ENU=Wednesday Travel Back;
                                                              NOR=Onsdag Reise tilbake;
                                                              SVE=Onsdag Resa frÜn];
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 235 ;   ;Hours Wednesday     ;Decimal       ;CaptionML=[ENU=Hours Wednesday;
                                                              NOR=Timer Onsdag;
                                                              SVE=Timmar onsdag];
                                                   Editable=No }
    { 236 ;   ;Wednesday Driver Hours;Boolean     ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Wednesday Driver Hours }
    { 237 ;   ;Wednesday Stand By Hours;Boolean   ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Wednesday Stand By Hours }
    { 238 ;   ;Wednesday Scheduled 12 H Shift;Boolean;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Wednesday Scheduled 12 Hour Shift }
    { 239 ;   ;Wednesday Call-Out Response;Boolean;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Wednesday Call-Out Response }
    { 240 ;   ;Thursday Travel To  ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                CheckTravelTimeAllowed("Thursday Travel To");
                                                                HourAccFunctionsCU.CheckOverlap(4, Rec);
                                                                WarningMaxTravelTime(4);
                                                              END;

                                                   CaptionML=[ENU=Thursday Travel To;
                                                              NOR=Torsdag Reise til;
                                                              SVE=Torsdag Resa till];
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 241 ;   ;Thursday From       ;Time          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Thursday From");
                                                                HourAccFunctionsCU.CheckOverlapFrom(4, Rec);
                                                              END;

                                                   CaptionML=[ENU=Thursday From;
                                                              NOR=Torsdag fra;
                                                              SVE=Torsdag frÜn] }
    { 242 ;   ;Thursday To         ;Time          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Thursday To");
                                                                HourAccFunctionsCU.CheckOverlap(4, Rec);
                                                              END;

                                                   CaptionML=[ENU=Thursday To;
                                                              NOR=Torsdag til;
                                                              SVE=Torsdag till] }
    { 243 ;   ;Thursday Travel Back;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                CheckTravelTimeAllowed("Thursday Travel Back");
                                                                HourAccFunctionsCU.CheckOverlap(4, Rec);
                                                                WarningMaxTravelTime(4);
                                                              END;

                                                   CaptionML=[ENU=Thursday Travel Back;
                                                              NOR=Torsdag Reise tilbake;
                                                              SVE=Torsdag Resa frÜn];
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 245 ;   ;Hours Thursday      ;Decimal       ;CaptionML=[ENU=Hours Thursday;
                                                              NOR=Timer Torsdag;
                                                              SVE=Timmar torsdag];
                                                   Editable=No }
    { 246 ;   ;Thursday Driver Hours;Boolean      ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Thursday Driver Hours }
    { 247 ;   ;Thursday Stand By Hours;Boolean    ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Thursday Stand By Hours }
    { 248 ;   ;Thursday Scheduled 12 Hr Shift;Boolean;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Thursday Scheduled 12 Hour Shift }
    { 249 ;   ;Thursday Call-Out Response;Boolean ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Thursday Call-Out Response }
    { 250 ;   ;Friday Travel To    ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                CheckTravelTimeAllowed("Friday Travel To");
                                                                HourAccFunctionsCU.CheckOverlap(5, Rec);
                                                                WarningMaxTravelTime(5);
                                                              END;

                                                   CaptionML=[ENU=Friday Travel To;
                                                              NOR=Fredag Reise til;
                                                              SVE=Fredag Resa till];
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 251 ;   ;Friday From         ;Time          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Friday From");
                                                                HourAccFunctionsCU.CheckOverlapFrom(5, Rec);
                                                              END;

                                                   CaptionML=[ENU=Friday From;
                                                              NOR=Fredag fra;
                                                              SVE=Fredag frÜn] }
    { 252 ;   ;Friday To           ;Time          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Friday To");
                                                                HourAccFunctionsCU.CheckOverlap(5, Rec);
                                                              END;

                                                   CaptionML=[ENU=Friday To;
                                                              NOR=Fredag til;
                                                              SVE=Fredag till] }
    { 253 ;   ;Friday Travel Back  ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                CheckTravelTimeAllowed("Friday Travel Back");
                                                                HourAccFunctionsCU.CheckOverlap(5, Rec);
                                                                WarningMaxTravelTime(5);
                                                              END;

                                                   CaptionML=[ENU=Friday Travel Back;
                                                              NOR=Fredag Reise tilbake;
                                                              SVE=Fredag Resa frÜn];
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 255 ;   ;Hours Friday        ;Decimal       ;CaptionML=[ENU=Hours Friday;
                                                              NOR=Timer Fredag;
                                                              SVE=Timmar fredag];
                                                   Editable=No }
    { 256 ;   ;Friday Driver Hours ;Boolean       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Friday Driver Hours }
    { 257 ;   ;Friday Stand By Hours;Boolean      ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Friday Stand By Hours }
    { 258 ;   ;Friday Scheduled 12 Hr Shift;Boolean;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Friday Scheduled 12 Hour Shift }
    { 259 ;   ;Friday Call-Out Response;Boolean   ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Friday Call-Out Response }
    { 260 ;   ;Saturday Travel To  ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                CheckTravelTimeAllowed("Saturday Travel To");
                                                                HourAccFunctionsCU.CheckOverlap(6, Rec);
                                                                WarningMaxTravelTime(6);
                                                              END;

                                                   CaptionML=[ENU=Saturday Travel To;
                                                              NOR=Lõrdag Reise til;
                                                              SVE=Lîrdag Resa till];
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 261 ;   ;Saturday From       ;Time          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Saturday From");
                                                                HourAccFunctionsCU.CheckOverlapFrom(6, Rec);
                                                              END;

                                                   CaptionML=[ENU=Saturday From;
                                                              NOR=Lõrdag fra;
                                                              SVE=Lîrdag frÜn] }
    { 262 ;   ;Saturday To         ;Time          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Saturday To");
                                                                HourAccFunctionsCU.CheckOverlap(6, Rec);
                                                              END;

                                                   CaptionML=ENU=Saturday To }
    { 263 ;   ;Saturday Travel Back;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                CheckTravelTimeAllowed("Saturday Travel Back");
                                                                HourAccFunctionsCU.CheckOverlap(6, Rec);
                                                                WarningMaxTravelTime(6);
                                                              END;

                                                   CaptionML=ENU=Saturday Travel Back;
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 265 ;   ;Hours Saturday      ;Decimal       ;CaptionML=ENU=Hours Saturday;
                                                   Editable=No }
    { 266 ;   ;Saturday Driver Hours;Boolean      ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Saturday Driver Hours }
    { 267 ;   ;Saturday Stand By Hours;Boolean    ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Saturday Stand By Hours }
    { 268 ;   ;Saturday Scheduled 12 Hr Shift;Boolean;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Saturday Scheduled 12 Hour Shift }
    { 269 ;   ;Saturday Call-Out Response;Boolean ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Saturday Call-Out Response }
    { 270 ;   ;Sunday Travel To    ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                CheckTravelTimeAllowed("Sunday Travel To");
                                                                HourAccFunctionsCU.CheckOverlap(7, Rec);
                                                                WarningMaxTravelTime(7);
                                                              END;

                                                   CaptionML=[ENU=Sunday Travel To;
                                                              NOR=Sõndag Reise til;
                                                              SVE=Sîndag Resa till];
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 271 ;   ;Sunday From         ;Time          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Sunday From");
                                                                HourAccFunctionsCU.CheckOverlapFrom(7, Rec);
                                                              END;

                                                   CaptionML=[ENU=Sunday From;
                                                              NOR=Sõndag fra;
                                                              SVE=Sîndag frÜn] }
    { 272 ;   ;Sunday To           ;Time          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                HourAccFunctionsCU.TimeFormatHhMmCheck("Sunday To");
                                                                HourAccFunctionsCU.CheckOverlap(7, Rec);
                                                              END;

                                                   CaptionML=[ENU=Sunday To;
                                                              NOR=Sõndag til;
                                                              SVE=Sîndag till] }
    { 273 ;   ;Sunday Travel Back  ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                CheckTravelTimeAllowed("Sunday Travel Back");
                                                                HourAccFunctionsCU.CheckOverlap(7, Rec);
                                                                WarningMaxTravelTime(7);
                                                              END;

                                                   CaptionML=[ENU=Sunday Travel Back;
                                                              NOR=Sõndag Reise tilbake;
                                                              SVE=Sîndag Resa frÜn];
                                                   MaxValue=99,99;
                                                   BlankZero=Yes }
    { 275 ;   ;Hours Sunday        ;Decimal       ;CaptionML=[ENU=Hours Sunday;
                                                              NOR=Timer Sõndag;
                                                              SVE=Timmar sîndag];
                                                   Editable=No }
    { 276 ;   ;Sunday Driver Hours ;Boolean       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Sunday Driver Hours }
    { 277 ;   ;Sunday Stand By Hours;Boolean      ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Sunday Stand By Hours }
    { 278 ;   ;Sunday Scheduled 12 Hr Shift;Boolean;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Sunday Scheduled 12 Hour Shift }
    { 279 ;   ;Sunday Call-Out Response;Boolean   ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Sunday Call-Out Response }
    { 300 ;   ;Hours               ;Decimal       ;CaptionML=[ENU=Hours;
                                                              NOR="Timer ";
                                                              SVE=Timmar];
                                                   Description=Excl. Travel and not yet automatic pause deduction (see documentation trigger);
                                                   Editable=No }
    { 310 ;   ;Travel Hours        ;Decimal       ;CaptionML=[ENU=Travel Hours;
                                                              NOR=Reisetimer;
                                                              SVE=Restimmar];
                                                   Editable=No }
    { 320 ;   ;UAR Task Expense    ;Code10        ;TableRelation="UAR Task" WHERE (Expenses=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "UAR Task Expense" = '' THEN
                                                                  Quantity := 0;
                                                              END;

                                                   CaptionML=ENU=UAR Task Expense }
    { 330 ;   ;Quantity            ;Integer       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("UAR Task Expense");
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal] }
    { 340 ;   ;Comment             ;Text50        ;CaptionML=[ENU=Comment;
                                                              NOR=Merknad;
                                                              SVE=Kommentar] }
  }
  KEYS
  {
    {    ;Year,Week,Employee No.,Line No.         ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1210190000 : TextConst 'ENU=Fill Receiving Company only when it differs from Supplying Company;NOR=Fyll kun ut Mottakerselskap nÜr det skiller seg fra Leverende selskap;SVE=Fyll endast i mottagande fîretag nÑr det skiljer sig frÜn levererande fîretag';
      HrsSetupRec@1210190024 : Record 11012600;
      ICProjSetupRec@1210190007 : Record 315;
      ProjRec@1210190002 : Record 11072003;
      ProjElemRec@1210190001 : Record 11012010;
      EmplRec@1210190005 : Record 5200;
      ServOrderRec@1100485001 : Record 11012823;
      DummyHourAccPauseRec@1210190006 : Record 11012611;
      UARHourAccounting@1100529600 : Record 11012609;
      HourAccFunctionsCU@1210190030 : Codeunit 11012607;
      ElementFormat@1210190003 : Codeunit 11012022;
      Text002@1210190004 : TextConst 'ENU=Travel hours not allowed for UAR Task ''%1'' on project ''%2'', in week %3-%4, employee ''%5'' and line %6.;NOR=Reisetimer ikke tillatt for UAR-oppgave ''%1'' for prosjekt ''%2'', i uke %3-%4, ansatt ''%5'', og rad %6.;SVE=Restimmar inte tillÜtet fîr UAR-uppgift ''%1'' fîr projekt ''%2'', i veckan %3-%4, anstÑlld ''%5'', och rad %6.';
      Text003@1210190021 : TextConst 'ENU=may not be %1 ''%2'' from the %3;NOR=kan ikke vëre %1 ''%2'' fra %3;SVE=kan inte vara %1 ''%2'' frÜn %3';
      Text004@1210190025 : TextConst 'ENU=Number of travel hours of employee ''%1'' on %2 of week %3-%4 is greater than %5, in line %6.;NOR=Antall Reisetimer for Ansatt ''%1'' pÜ %2 i uken %3-%4 er stõrre enn %5, pÜ rad %6.;SVE=Antal restimmar fîr anstÑlld ''%1'' pÜ %2 i veckan %3-%4 Ñr stîrre Ñn %5, pÜ rad %6.';

    PROCEDURE EmptyLine@1210190009() : Boolean;
    BEGIN
      IF (((Type = Type::Project) AND ("Project No." = '') AND (Element = '')) OR
          ((Type = Type::Service) AND ("Service Order No." = '') )) AND
         ("Cost Component" = '') AND
         ("Monday From" = 0T) AND ("Monday To" = 0T) AND
         ("Tuesday From" = 0T) AND ("Tuesday To" = 0T) AND
         ("Wednesday From" = 0T) AND ("Wednesday To" = 0T) AND
         ("Thursday From" = 0T) AND ("Thursday To" = 0T) AND
         ("Friday From" = 0T) AND ("Friday To" = 0T) AND
         ("Saturday From" = 0T) AND ("Saturday To" = 0T) AND
         ("Sunday From" = 0T) AND ("Sunday To" = 0T)
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE CheckSetupWorkedHours@1210190004();
    BEGIN
      IF (Type = Type::Service) AND ("Project No." = '') THEN
        EXIT;

      GetProjectData(FALSE);

      IF (NOT ProjRec."UAR Task Travel Hours Allowed") THEN BEGIN
        "Monday Travel To" := 0;
        "Monday Travel Back" := 0;
        "Tuesday Travel To" := 0;
        "Tuesday Travel Back" := 0;
        "Wednesday Travel To" := 0;
        "Wednesday Travel Back" := 0;
        "Thursday Travel To" := 0;
        "Thursday Travel Back" := 0;
        "Friday Travel To" := 0;
        "Friday Travel Back" := 0;
        "Saturday Travel To" := 0;
        "Saturday Travel Back" := 0;
        "Sunday Travel To" := 0;
        "Sunday Travel Back" := 0;
      END;

      IF (NOT ProjRec."UAR Task Pause Allowed") THEN
        DeletePause();
    END;

    PROCEDURE CalculateTravelHours@1210190007();
    BEGIN
      "Travel Hours" :=
        "Monday Travel To" + "Monday Travel Back" +
        "Tuesday Travel To" + "Tuesday Travel Back" +
        "Wednesday Travel To" + "Wednesday Travel Back" +
        "Thursday Travel To" + "Thursday Travel Back" +
        "Friday Travel To" + "Friday Travel Back" +
        "Saturday Travel To" + "Saturday Travel Back" +
        "Sunday Travel To" + "Sunday Travel Back";
    END;

    PROCEDURE DeletePause@1210190005();
    VAR
      lvHourAccPauseRec@1210190000 : Record 11012611;
    BEGIN
      lvHourAccPauseRec.SETRANGE(Year,Year);
      lvHourAccPauseRec.SETRANGE(Week,Week);
      lvHourAccPauseRec.SETRANGE("Employee No.","Employee No.");
      lvHourAccPauseRec.SETRANGE("Hour Acc. Line No.","Line No.");
      lvHourAccPauseRec.DELETEALL;
    END;

    PROCEDURE CheckCompanyIC@32();
    BEGIN
      IF "Receiving Company" <> '' THEN BEGIN
        ICProjSetupRec.CHANGECOMPANY("Receiving Company");
        ProjRec.CHANGECOMPANY("Receiving Company");
        ProjElemRec.CHANGECOMPANY("Receiving Company");
        ServOrderRec.CHANGECOMPANY("Receiving Company");
      END ELSE BEGIN
        ICProjSetupRec.CHANGECOMPANY(COMPANYNAME);
        ProjRec.CHANGECOMPANY(COMPANYNAME);
        ProjElemRec.CHANGECOMPANY(COMPANYNAME);
        ServOrderRec.CHANGECOMPANY(COMPANYNAME);
      END;
      ICProjSetupRec.GET;
    END;

    PROCEDURE RefersToOtherCompany@1100525008() : Boolean;
    BEGIN
      EXIT(("Receiving Company" <> '') AND ("Receiving Company" <> COMPANYNAME));
    END;

    PROCEDURE GetProjectData@1210190001(ICheckMode@1210190000 : Boolean);
    BEGIN
      CheckCompanyIC;

      IF "Project No." = '' THEN BEGIN
        ProjRec.INIT;
        EXIT;
      END;

      IF ICheckMode THEN
        ProjRec.GET("Project No.")
      ELSE BEGIN
        IF NOT ProjRec.GET("Project No.") THEN
          ProjRec.INIT;
      END;

      ProjRec.CALCFIELDS("UAR Task Pause Allowed", "UAR Task Travel Hours Allowed");
    END;

    PROCEDURE GetProjectDescription@1210190002() : Text[100];
    BEGIN
      GetProjectData(FALSE);

      EXIT(ProjRec.Description);
    END;

    PROCEDURE GetProjElementData@1210190006(ICheckMode@1210190000 : Boolean);
    BEGIN
      CheckCompanyIC;

      IF ("Project No." = '') OR (Element = '') THEN BEGIN
        CLEAR(ProjElemRec);
        EXIT;
      END;

      IF ICheckMode THEN BEGIN
        ProjElemRec.GET("Project No.",Element);
        ProjElemRec.CheckProjectElementBlocked;
      END ELSE BEGIN
        IF NOT ProjElemRec.GET("Project No.",Element) THEN
          CLEAR(ProjElemRec);
      END;
    END;

    PROCEDURE GetProjElementDescription@1210190008() : Text[50];
    BEGIN
      GetProjElementData(FALSE);

      EXIT(ProjElemRec.Description);
    END;

    PROCEDURE GetServOrderData@1100485002(ICheckMode@1210190000 : Boolean);
    BEGIN
      CheckCompanyIC;

      IF "Service Order No." = '' THEN BEGIN
        ServOrderRec.INIT;
        EXIT;
      END;

      IF ICheckMode THEN
        ServOrderRec.GET("Service Order No.")
      ELSE BEGIN
        IF NOT ServOrderRec.GET("Service Order No.") THEN
          ServOrderRec.INIT;
      END;
    END;

    PROCEDURE GetServOrderDescription@1100485001() : Text[50];
    BEGIN
      GetServOrderData(FALSE);

      EXIT(ServOrderRec.Description);
    END;

    PROCEDURE OnLookupProjectNo@1210190000();
    VAR
      PageNo@1100525000 : Integer;
    BEGIN
      CheckCompanyIC;
      ProjRec."No." := "Project No.";
      IF RefersToOtherCompany THEN
        PageNo := PAGE::"Job List IC";
      IF (Type <> Type::Project) THEN
        PAGE.RUNMODAL(PageNo, ProjRec)
      ELSE
        IF PAGE.RUNMODAL(PageNo, ProjRec) = ACTION::LookupOK THEN
          VALIDATE("Project No.", ProjRec."No.");
    END;

    PROCEDURE OnLookupElement@1210190003();
    BEGIN
      CheckCompanyIC;
      ProjElemRec."Project No." := "Project No.";
      ProjElemRec.Element := Element;
      ProjElemRec.SETRANGE("Project No.", "Project No.");
      ProjElemRec.SETRANGE(Blocked, FALSE);
      IF ("Project No." = '') THEN
        PAGE.RUNMODAL(0, ProjElemRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, ProjElemRec) = ACTION::LookupOK THEN
          VALIDATE(Element, ProjElemRec.Element);
      END;
    END;

    PROCEDURE OnLookupServOrder@1100485007();
    BEGIN
      CheckCompanyIC;
      ServOrderRec."No." := "Service Order No.";
      IF (Type <> Type::Service) THEN
        PAGE.RUNMODAL(0, ServOrderRec)
      ELSE BEGIN
        IF PAGE.RUNMODAL(0, ServOrderRec) = ACTION::LookupOK THEN BEGIN
          IF (Type = Type::Service) AND ("Service Order No." <> ServOrderRec."No.") THEN
            VALIDATE("Service Order No.", ServOrderRec."No.");
        END;
      END;
    END;

    PROCEDURE CheckCostComponentAllowed@1210190011();
    BEGIN
      HrsSetupRec.GET;

      IF ("Cost Component" = HrsSetupRec."Cost Component Pause") THEN
        FIELDERROR("Cost Component", STRSUBSTNO(Text003, HrsSetupRec.FIELDCAPTION("Cost Component Pause"),
          HrsSetupRec."Cost Component Pause", HrsSetupRec.TABLECAPTION));
    END;

    PROCEDURE CheckTravelTimeAllowed@1210190012(ITravel@1210190000 : Decimal);
    BEGIN
      IF ITravel = 0 THEN
        EXIT;
      IF (Type = Type::Service) AND ("Project No." = '') THEN
        EXIT;

      GetProjectData(FALSE);
      IF (NOT ProjRec."UAR Task Travel Hours Allowed") THEN
        ERROR(Text002, ProjRec."UAR Task", "Project No.", Year, Week, "Employee No.", "Line No.");
    END;

    PROCEDURE WarningMaxTravelTime@1210190010(IDayNo@1210190000 : Integer);
    VAR
      lvGiveMess@1210190001 : Boolean;
    BEGIN
      HrsSetupRec.GET;
      IF HrsSetupRec."Max. Travel Hours" = 0 THEN
        EXIT;

      lvGiveMess := FALSE;

      CASE CurrFieldNo OF
        FIELDNO("Monday Travel To"):
            IF ("Monday Travel To" > 0) AND ("Monday Travel To" <> xRec."Monday Travel To") AND
               (("Monday Travel To" + "Monday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Monday Travel Back"):
            IF ("Monday Travel Back" > 0) AND ("Monday Travel Back" <> xRec."Monday Travel Back") AND
               (("Monday Travel To" + "Monday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Tuesday Travel To"):
            IF ("Tuesday Travel To" > 0) AND ("Tuesday Travel To" <> xRec."Tuesday Travel To") AND
               (("Tuesday Travel To" + "Tuesday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Tuesday Travel Back"):
            IF ("Tuesday Travel Back" > 0) AND ("Tuesday Travel Back" <> xRec."Tuesday Travel Back") AND
               (("Tuesday Travel To" + "Tuesday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Wednesday Travel To"):
            IF ("Wednesday Travel To" > 0) AND ("Wednesday Travel To" <> xRec."Wednesday Travel To") AND
               (("Wednesday Travel To" + "Wednesday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Wednesday Travel Back"):
            IF ("Wednesday Travel Back" > 0) AND ("Wednesday Travel Back" <> xRec."Wednesday Travel Back") AND
               (("Wednesday Travel To" + "Wednesday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Thursday Travel To"):
            IF ("Thursday Travel To" > 0) AND ("Thursday Travel To" <> xRec."Thursday Travel To") AND
               (("Thursday Travel To" + "Thursday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Thursday Travel Back"):
            IF ("Thursday Travel Back" > 0) AND ("Thursday Travel Back" <> xRec."Thursday Travel Back") AND
               (("Thursday Travel To" + "Thursday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Friday Travel To"):
            IF ("Friday Travel To" > 0) AND ("Friday Travel To" <> xRec."Friday Travel To") AND
               (("Friday Travel To" + "Friday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Friday Travel Back"):
            IF ("Friday Travel Back" > 0) AND ("Friday Travel Back" <> xRec."Friday Travel Back") AND
               (("Friday Travel To" + "Friday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Saturday Travel To"):
            IF ("Saturday Travel To" > 0) AND ("Saturday Travel To" <> xRec."Saturday Travel To") AND
               (("Saturday Travel To" + "Saturday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Saturday Travel Back"):
            IF ("Saturday Travel Back" > 0) AND ("Saturday Travel Back" <> xRec."Saturday Travel Back") AND
               (("Saturday Travel To" + "Saturday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Sunday Travel To"):
            IF ("Sunday Travel To" > 0) AND ("Sunday Travel To" <> xRec."Sunday Travel To") AND
               (("Sunday Travel To" + "Sunday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
        FIELDNO("Sunday Travel Back"):
            IF ("Sunday Travel Back" > 0) AND ("Sunday Travel Back" <> xRec."Sunday Travel Back") AND
               (("Sunday Travel To" + "Sunday Travel Back") > HrsSetupRec."Max. Travel Hours") THEN lvGiveMess := TRUE;
      END;

      IF lvGiveMess THEN
        MESSAGE(Text004,"Employee No.",HourAccFunctionsCU.GetDayText(IDayNo),Year,Week,HrsSetupRec."Max. Travel Hours","Line No.");
    END;

    LOCAL PROCEDURE TestStatusOpen@1100529600();
    BEGIN
      IF (UARHourAccounting.Year <> Year) OR
         (UARHourAccounting.Week <> Week) OR
         (UARHourAccounting."Employee No." <> "Employee No.")
      THEN
        UARHourAccounting.GET(Year, Week, "Employee No.");
      UARHourAccounting.TESTFIELD(Status, UARHourAccounting.Status::Open);
    END;

    BEGIN
    {
      For the amount of hours per day and for the total amount of hours per record, automatic pause dedication is not taken into account yet.
      Only at posting of the hours, the automatic pause deduction will be calculated for the amount of hours.
      With the amount of hours of non posted hour lines, nothing will be done.

      Note: in first instance, this was directly calculated, but at that time it was per line/per day. Now it is calculated for multiple lines.
      Calculating automatic pause dedication during mutations will be difficult then and will slow down the performance.
    }
    END.
  }
}

