OBJECT Codeunit 11012055 Replicate Data Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11020218;
    OnRun=BEGIN
            IF GUIALLOWED THEN
              IF NOT CONFIRM(Text001) THEN
                EXIT;

            ReplicateTableRec.COPY(Rec);

            ReplicateSetup.GET;
            ReplicateSetup.TESTFIELD("Source Company Name");
            ReplicateSetup.ValidateCompanies;

            LastUpdateTime := TIME;
            Window.OPEN(Text005 + Text006 + Text007);
            IF ReplicateTableRec.FIND('-') THEN
              REPEAT
                IF ReplicateToCompanyRec.FIND('-') THEN
                  REPEAT
                    Window.UPDATE(2,ReplicateToCompanyRec."Company Name");
                    Transfer(ReplicateTableRec."Table ID", TRUE, ReplicateSetup."Delete Not In Source Company");
                  UNTIL ReplicateToCompanyRec.NEXT = 0;
              UNTIL ReplicateTableRec.NEXT = 0;

            Window.CLOSE;
            IF GUIALLOWED THEN
              MESSAGE(Text003);
          END;

  }
  CODE
  {
    VAR
      ReplicateSetup@1210190000 : Record 11020217;
      ReplicateToCompanyRec@1210190001 : Record 11020219;
      ReplicateTableRec@1210190002 : Record 11020218;
      Text001@1210190003 : TextConst 'DEU=M”chten Sie die Daten kopieren?;ENU=Dou you want to Copy the Data ?;NLD=Wilt u de gegevens kopi‰ren?;NOR=Vil du kopiere dataene?;SVE=Vill du kopiera dessa data?';
      Text002@1210190004 : TextConst 'DEU=M”chten Sie die Tabelle %1 initialisieren?;ENU=Dou you want to initiate Table %1 ?;NLD=Wilt u de tabel %1 initialiseren?;NOR=Vil du initiere tabell %1?;SVE=Vill du initiera tabell %1?';
      Text003@1210190005 : TextConst 'DEU=Die Daten wurden kopiert.;ENU=Data is Copied;NLD=De gegevens zijn gekopieerd;NOR=Dataene er kopiert;SVE=Data har kopierats';
      Text004@1210190006 : TextConst 'DEU=Die zu kopierenden Tabellen wurden initialisiert;ENU=The Tables to be copied are initiated;NLD=De te kopi‰ren tabellen zijn ge‹nitialiseerd;NOR=Tabellene som skal kopieres er initiert;SVE=Tabellerna som ska kopieras har initierats';
      Window@1210190007 : Dialog;
      Text005@1210190008 : TextConst 'DEU=Tabelle     #1############################\;ENU=Table    #1############################\;NLD=Tabel       #1############################\;NOR=Tabell #1############################\;SVE=Tabell    #1############################\';
      Progress@1210190012 : Integer;
      NoOfRecords@1210190011 : Integer;
      Counter@1210190010 : Integer;
      LastUpdateTime@1210190009 : Time;
      Text006@1210190013 : TextConst 'DEU=Konzern    #2############################\;ENU=Company  #2############################\;NLD=Bedrijf     #2############################\;NOR=Firma #2############################\;SVE=F”retag  #2############################\';
      Text007@1210190014 : TextConst 'DEU=Kopiert  @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@;ENU=Copied   @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@;NLD=Gekopieerd  @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@;NOR=Kopiert @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@;SVE=Kopierat   @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@';

    [External]
    PROCEDURE InitReplicateTable@1210190002();
    VAR
      lObjectRec@1210190000 : Record 2000000038;
    BEGIN
      IF GUIALLOWED THEN
        IF NOT CONFIRM(Text002, FALSE, ReplicateTableRec.TABLECAPTION) THEN
          EXIT;

      WITH lObjectRec DO BEGIN
        SETRANGE("Object Type", "Object Type"::Table);
        IF FIND('-') THEN
        REPEAT
          IF GetFormID("Object ID") <> -1 THEN
            IF NOT ReplicateTableRec.GET("Object ID") THEN BEGIN
              ReplicateTableRec.VALIDATE("Table ID", "Object ID");
              ReplicateTableRec."Page ID" := GetFormID("Object ID");
              ReplicateTableRec.INSERT;
            END ELSE BEGIN
              ReplicateTableRec.VALIDATE("Table ID", "Object ID");
              ReplicateTableRec.MODIFY;
            END;
        UNTIL NEXT = 0;
      END;

      IF GUIALLOWED THEN
        MESSAGE(Text004);
    END;

    PROCEDURE GetFormID@11013000(TableID@11013001 : Integer) : Integer;
    BEGIN
      CASE TableID OF
        3: EXIT(4);
        4: EXIT(5);
        5: EXIT(6);
        6: EXIT(7);
        7: EXIT(8);
        8: EXIT(9);
        9: EXIT(10);
        10: EXIT(11);
        13: EXIT(14);
        14: EXIT(15);
        15: EXIT(18);
        19: EXIT(23);
        24: EXIT(28);
        42: EXIT(65);
        77: EXIT(0);
        78: EXIT(64);
        84: EXIT(103);
        85: EXIT(104);
        91: EXIT(119);
        92: EXIT(110);
        93: EXIT(111);
        94: EXIT(112);
        200: EXIT(208);
        204: EXIT(209);
        208: EXIT(211);
        220: EXIT(240);
        225: EXIT(367);
        230: EXIT(257);
        231: EXIT(259);
        250: EXIT(312);
        251: EXIT(313);
        252: EXIT(314);
        255: EXIT(319);
        256: EXIT(317);
        257: EXIT(320);
        258: EXIT(308);
        259: EXIT(309);
        260: EXIT(310);
        277: EXIT(373);
        282: EXIT(394);
        284: EXIT(405);
        285: EXIT(406);
        286: EXIT(429);
        289: EXIT(427);
        291: EXIT(428);
        292: EXIT(431);
        293: EXIT(432);
        294: EXIT(433);
        301: EXIT(433);
        318: EXIT(469);
        319: EXIT(464);
        320: EXIT(466);
        321: EXIT(467);
        322: EXIT(468);
        323: EXIT(470);
        324: EXIT(471);
        325: EXIT(472);
        330: EXIT(483);
        333: EXIT(488);
        334: EXIT(489);
        340: EXIT(512);
        341: EXIT(513);
        348: EXIT(548);
        349: EXIT(560);
        350: EXIT(538);
        351: EXIT(539);
        354: EXIT(543);
        363: EXIT(556);
        388: EXIT(536);
        403: EXIT(593);
        404: EXIT(593);
        5053: EXIT(5060);
        5055: EXIT(5063);
        5057: EXIT(5066);
        5059: EXIT(5069);
        5063: EXIT(5074);
        5066: EXIT(5080);
        5068: EXIT(5153);
        5069: EXIT(5153);
        5070: EXIT(5085);
        5073: EXIT(5090);
        5087: EXIT(5109);
        5088: EXIT(5149);
        5090: EXIT(5119);
        5091: EXIT(5073);
        5094: EXIT(5133);
        5095: EXIT(5138);
        5111: EXIT(5110);
        5202: EXIT(5205);
        5206: EXIT(5210);
        5209: EXIT(5213);
        5210: EXIT(5214);
        5211: EXIT(5217);
        5212: EXIT(5216);
        5213: EXIT(5218);
        5215: EXIT(5220);
        5217: EXIT(5215);
        5402: EXIT(5402);
        5606: EXIT(5613);
        5607: EXIT(5615);
        5608: EXIT(5616);
        5609: EXIT(5617);
        5611: EXIT(5611);
        5626: EXIT(5642);
        5628: EXIT(5645);
        5630: EXIT(5648);
        7004: EXIT(7004);
        7300: EXIT(7301);
        7303: EXIT(7307);
        7304: EXIT(7308);
        7354: EXIT(7303);
        11406: EXIT(11407);          // Call 28923, 02-05-2013
        11012000: EXIT(11012009);
        11012006: EXIT(11012022);
        11012007: EXIT(11012023);
        11012009: EXIT(11012018);
        11012012: EXIT(11012055);
        11012013: EXIT(11012064);
        11012014: EXIT(11012041);
        11012015: EXIT(11012040);
        11012016: EXIT(11012027);
        11012017: EXIT(11012026);
        11012022: EXIT(11012051);
        11012023: EXIT(11012052);    // Melding 18622, 24-08-2010
        11012025: EXIT(11012031);
        11012029: EXIT(11012062);
        11012030: EXIT(11012063);
        11012031: EXIT(11012056);
        11012060: EXIT(11012118);
        11012082: EXIT(11012263);
        11012083: EXIT(11012269);
        11012086: EXIT(11012286);
        11012087: EXIT(11012264);
        11012088: EXIT(11012273);
        11012089: EXIT(11012274);
        11012091: EXIT(11012282);
        11012157: EXIT(11012171);
        11012158: EXIT(11012170);
        11012161: EXIT(11012167);
        11012162: EXIT(11012168);
        11012163: EXIT(11012184);
        11012164: EXIT(11012177);
        11012165: EXIT(11012182);
        11012166: EXIT(11012178);
        11012167: EXIT(11012174);
        11012168: EXIT(11012174);
        11012169: EXIT(11012181);
        11012187: EXIT(0);
        11012284: EXIT(11012685);
        11012290: EXIT(11012295);
        11012291: EXIT(11012296);
        11012320: EXIT(11072673);  //db, 28-01-13: C005024
        11012321: EXIT(11012348);
        11012382: EXIT(11012379);
        11012390: EXIT(11012391);
        11012396: EXIT(11020375);
        11012400: EXIT(11012400);
        11012405: EXIT(11012411);
        11012451: EXIT(11012458);
        11012452: EXIT(11012451);
        11012562: EXIT(11012569);
        11012751: EXIT(11012755);
        11012752: EXIT(11012756);
        11012757: EXIT(11012762);
        11012759: EXIT(11012764);
        11012806: EXIT(11012857);
        11012811: EXIT(11012819);
        11012827: EXIT(11012835);
        11012829: EXIT(11012803);
        11012830: EXIT(11012845);
        11012831: EXIT(11012852);
        11012832: EXIT(11012853);
        11012833: EXIT(11012854);
        11012834: EXIT(11012854);
        11012842: EXIT(11012856);
        11012960: EXIT(11012960);
        11012961: EXIT(11012961);
        11012962: EXIT(11012962);
        11012963: EXIT(11012964);
        11012964: EXIT(11012966);
        11012965: EXIT(11012974);
        11012966: EXIT(11012975);
        11012967: EXIT(11012976);
        11020204: EXIT(11020211);
        11020209: EXIT(11020222);
        11020210: EXIT(11020223);
        11020211: EXIT(11020224);
        11020215: EXIT(11020229);
        11020236: EXIT(11020272);
        11020237: EXIT(11020272);
        11020241: EXIT(11012125);
        11020275: EXIT(11020330);
        11020280: EXIT(11020314);
        11020285: EXIT(11020341);
        11020286: EXIT(11020342);
        11012313: EXIT(11020425);
        11020334: EXIT(11072547); //call 30724
        11020336: EXIT(11072542);
        11020340: EXIT(0);
        11020580: EXIT(11125070);  //db, 14-02-17
        11020599: EXIT(11124927); //call 28923, 03-05-2013
        11020659: EXIT(11124851); //kzwerver, 110926, n, #28863
        11071778: EXIT(11126082);  //db, 22-09-14: C017650 (object spec.group)
        11071810: EXIT(11126116);
        11071890: EXIT(11071890); //W106964
        11071891: EXIT(11071891); //W106964
        11071911: EXIT(11071911); //W106964
        11071913: EXIT(11071913); //W106964
        11072076: EXIT(0);        //C033839
        99000750: EXIT(99000750);
        99000751: EXIT(99000751);
        99000754: EXIT(99000755);
        99000756: EXIT(99000758);
        99000758: EXIT(99000761);
        99000761: EXIT(99000779);
        99000762: EXIT(99000780);
        99000763: EXIT(99000764);
        99000764: EXIT(99000764);
        99000771: EXIT(99000787);
        99000772: EXIT(99000787);
        99000773: EXIT(99000791);
        99000774: EXIT(99000793);
        99000775: EXIT(99000796);
        99000776: EXIT(99000797);
        99000777: EXIT(99000798);
        99000778: EXIT(99000799);
        99000779: EXIT(99000800);
        99000780: EXIT(99000802);
        99000786: EXIT(99000808);
      ELSE
        EXIT(-1);
      END;
    END;

    PROCEDURE UpdateProgressWindow@9(NewProgress@11012000 : Integer);
    BEGIN
      IF NoOfRecords > 0 THEN BEGIN
        NewProgress := ROUND(NewProgress / NoOfRecords * 100,1);
        IF (NewProgress <> Progress) OR (TIME > LastUpdateTime + 5000) THEN BEGIN
          Window.UPDATE(3,100 * NewProgress);
          LastUpdateTime := TIME;
        END;
        Progress := NewProgress;
      END;
    END;

    [External]
    PROCEDURE Transfer@1100525001(TableID@1100525002 : Integer;CopyTable@1100525001 : Boolean;DeleteRemainders@1100525000 : Boolean);
    VAR
      SourceRecRef@1100525003 : RecordRef;
      TargetRecRef@1100525004 : RecordRef;
      OldTargetRecRef@1100528500 : RecordRef;
      SourceFieldRef@1100525005 : FieldRef;
      TargetFieldRef@1100525006 : FieldRef;
      SourceKeyRef@1100525010 : KeyRef;
      TargetKeyRef@1100525011 : KeyRef;
      i@1100525007 : Integer;
      NumberOfFields@1100525008 : Integer;
      NumberOfPrimKeyFields@1100525009 : Integer;
      RecordExists@1100525012 : Boolean;
      FPSLicenseManagement@1100527400 : Codeunit 11229289;
    BEGIN
      SourceRecRef.OPEN(TableID,FALSE,ReplicateSetup."Source Company Name");
      TargetRecRef.OPEN(TableID,FALSE,ReplicateToCompanyRec."Company Name");

      IF CopyTable AND FPSLicenseManagement.LicenseAndReadPermissionForTable(SourceRecRef) THEN BEGIN
        Window.UPDATE(1,SourceRecRef.NAME);
        NoOfRecords := SourceRecRef.COUNT;
        NumberOfFields := SourceRecRef.FIELDCOUNT;
        SourceKeyRef := SourceRecRef.KEYINDEX(1);
        TargetKeyRef := TargetRecRef.KEYINDEX(1);
        NumberOfPrimKeyFields := SourceKeyRef.FIELDCOUNT;
        Counter := 0;

        IF SourceRecRef.FINDSET THEN
          REPEAT
            Counter := Counter + 1;
            UpdateProgressWindow(Counter);

            FOR i := 1 TO NumberOfPrimKeyFields DO BEGIN
              SourceFieldRef := SourceKeyRef.FIELDINDEX(i);
              TargetFieldRef := TargetKeyRef.FIELDINDEX(i);
              TargetFieldRef.VALUE := SourceFieldRef.VALUE;
            END;

            RecordExists := TargetRecRef.FIND;
            IF RecordExists THEN
              OldTargetRecRef := TargetRecRef.DUPLICATE;
            FOR i := 1 TO NumberOfFields DO BEGIN
              SourceFieldRef := SourceRecRef.FIELDINDEX(i);
              IF FieldMustBeCopied(SourceRecRef, SourceFieldRef) THEN BEGIN
                TargetFieldRef := TargetRecRef.FIELDINDEX(i);
                TargetFieldRef.VALUE := SourceFieldRef.VALUE;
              END;
            END;
            IF RecordExists THEN BEGIN
              IF FORMAT(OldTargetRecRef) <> FORMAT(TargetRecRef) THEN
                TargetRecRef.MODIFY
            END ELSE
              TargetRecRef.INSERT;
          UNTIL SourceRecRef.NEXT = 0;

        IF DeleteRemainders THEN
          IF TargetRecRef.FINDSET THEN
            REPEAT
              FOR i := 1 TO NumberOfPrimKeyFields DO BEGIN
                SourceFieldRef := SourceKeyRef.FIELDINDEX(i);
                TargetFieldRef := TargetKeyRef.FIELDINDEX(i);
                SourceFieldRef.VALUE := TargetFieldRef.VALUE;
              END;
              IF NOT SourceRecRef.FIND THEN
                TargetRecRef.DELETE;
            UNTIL TargetRecRef.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FieldMustBeCopied@1100528400(RecRef@1100528400 : RecordRef;FieldRef@1100528401 : FieldRef) : Boolean;
    VAR
      ReplicateTableFieldSetup@1100528402 : Record 11229423;
    BEGIN
      IF NOT ReplicateTableFieldSetup.GET(RecRef.NUMBER, FieldRef.NUMBER) THEN
        EXIT(TRUE);

      IF ReplicateTableFieldSetup.Copy THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

