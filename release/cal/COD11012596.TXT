OBJECT Codeunit 11012596 Create Plant Maint. Proposal
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            PlantMaintenanceArrangement@1100529001 : Record 11126146;
            PlantType@1100529002 : Record 11012551;
            PlantNumber@1100529003 : Record 11012552;
            PlantLocation@1100529004 : Record 11012554;
            PlantInspection@1100529005 : Record 11012564;
            PlantMaintProposalHeader@1100529006 : Record 11126147;
            RecRef@1100529000 : RecordRef;
          BEGIN
            IF NOT gSourceTableRecord.ISRECORD THEN
              EXIT;
            CheckDateUntil(gDateUntil);
            RecRef.GETTABLE(gSourceTableRecord);
            CASE RecRef.NUMBER OF
              DATABASE::"Plant Maintenance Arrangement":
                BEGIN
                  gCreatedFrom := PlantMaintProposalHeader."Created from"::Arrangement;
                  RecRef.SETTABLE(PlantMaintenanceArrangement);
                  CreateMaintProposalFromArrangement(PlantMaintenanceArrangement);
                END;
              DATABASE::"Plant Number":
                BEGIN
                  gCreatedFrom := PlantMaintProposalHeader."Created from"::PlantNumber;
                  RecRef.SETTABLE(PlantNumber);
                  CreateMaintProposalFromPlantNumber(PlantNumber);
                END;
              DATABASE::"Plant Type":
                BEGIN
                  gCreatedFrom := PlantMaintProposalHeader."Created from"::PlantType;
                  RecRef.SETTABLE(PlantType);
                  CreateMaintProposalFromPlantType(PlantType);
                END;
              DATABASE::"Plant Location":
                BEGIN
                  gCreatedFrom := PlantMaintProposalHeader."Created from"::Location;
                  RecRef.SETTABLE(PlantLocation);
                  CreateMaintProposalFromPlantLocation(PlantLocation);
                END;
              DATABASE::Inspection:
                BEGIN
                  gCreatedFrom := PlantMaintProposalHeader."Created from"::Inspection;
                  RecRef.SETTABLE(PlantInspection);
                  CreateMaintProposalFromPlantInspection(PlantInspection);
                END;
            END;
          END;

  }
  CODE
  {
    VAR
      PlantSetup@1100529009 : Record 11012550;
      gSourceTableRecord@1100529003 : Variant;
      gCreatedFrom@1100529005 : Option;
      gDateUntil@1100529002 : Date;
      gPlanningHorzEndDate@1100529011 : Date;
      gCounter@1100529006 : Integer;
      gNextLineNo@1100529007 : Integer;
      gProposalCode@1100529001 : Code[20];
      gUsedFilters@1100529000 : Text;
      Text001@1100529004 : TextConst 'DEU=%1 darf nicht leer sein;ENU=%1 may not be empty;NLD=%1 mag niet leeg zijn';
      Text002@1100529008 : TextConst 'DEU=Z„hler #1########;ENU=Counter #1########;NLD=Teller #1########';
      Text003@1100529010 : TextConst 'DEU=Aktualisieren Vereinbarungen #1########;ENU=Update Agreements #1########;NLD=Bijwerken afspraken #1########';

    PROCEDURE InitProcess@1100529000();
    BEGIN
      PlantSetup.GET;
      PlantSetup.TESTFIELD("Service Company");
      gCounter := 0;
      gNextLineNo := 0;
      CLEAR(gSourceTableRecord);
      gDateUntil := 0D;
      gUsedFilters := '';
      gProposalCode := '';
      IF FORMAT(PlantSetup."Plan. Horz. Maint.Arrangements") = '' THEN
        gPlanningHorzEndDate := 0D
      ELSE
        gPlanningHorzEndDate := CALCDATE(PlantSetup."Plan. Horz. Maint.Arrangements", TODAY);
    END;

    PROCEDURE SetProcessInfoGlobalVars@1100528645(SourceTableRecord@1100528604 : Variant;DateUntil@1100528603 : Date;UsedFilters@1100528607 : Text;ProposalCode@1100528606 : Code[20]);
    VAR
      PlantMaintProposalHeader@1100529000 : Record 11126147;
    BEGIN
      gSourceTableRecord := SourceTableRecord;
      gDateUntil := DateUntil;
      gUsedFilters := COPYSTR(UsedFilters, 1, MAXSTRLEN(PlantMaintProposalHeader."Applied filter"));
      gProposalCode := ProposalCode;
    END;

    PROCEDURE CheckDateUntil@1100529002(DateUntil@1100529000 : Date);
    VAR
      PlantMaintProposalHeader@1100529001 : Record 11126147;
    BEGIN
      IF DateUntil = 0D THEN
        ERROR(Text001, PlantMaintProposalHeader.FIELDCAPTION("Until Date"));
    END;

    PROCEDURE GetCreatedProposalCode@1100528646(VAR ProposalCode@1100528600 : Code[20]);
    BEGIN
      ProposalCode := gProposalCode;
    END;

    LOCAL PROCEDURE CreateMaintProposalFromArrangement@1100528628(PlantMaintenanceArrangement2@1100528600 : Record 11126146);
    VAR
      PlantMaintenanceArrangement@1100528604 : Record 11126146;
      TmpPlantMaintProposalLine@1100529000 : TEMPORARY Record 11126148;
    BEGIN
      PlantMaintenanceArrangement2.TESTFIELD("Maintenance Date");
      // Do not update maintenance arrangement here. Called from page 'Plant Maintenance Arrangements' (via report) for
      // selected (marked) arrangements, so no update (delete/insert) allowed.
      PlantMaintenanceArrangement.SETRANGE("Plant Type", PlantMaintenanceArrangement2."Plant Type");
      PlantMaintenanceArrangement.SETRANGE("Plant No.", PlantMaintenanceArrangement2."Plant No.");
      PlantMaintenanceArrangement.SETRANGE("Maintenance Scheme", PlantMaintenanceArrangement2."Maintenance Scheme");
      PlantMaintenanceArrangement.SETRANGE("Line No.", PlantMaintenanceArrangement2."Line No.");
      CreateTempMaintProposalLines(PlantMaintenanceArrangement, TmpPlantMaintProposalLine);
      CreateMaintenanceProposal(TmpPlantMaintProposalLine)
    END;

    LOCAL PROCEDURE CreateMaintProposalFromPlantNumber@1100525000(PlantNumber@1100525000 : Record 11012552);
    VAR
      PlantMaintenanceArrangement@1100529000 : Record 11126146;
      TmpPlantMaintProposalLine@1100529001 : TEMPORARY Record 11126148;
    BEGIN
      PlantNumber.TESTFIELD(Blocked, FALSE);
      UpdateMaintenanceArrangements(PlantNumber."Plant Type", PlantNumber."No.", '');
      PlantMaintenanceArrangement.SETRANGE("Plant Type", PlantNumber."Plant Type");
      PlantMaintenanceArrangement.SETRANGE("Plant No.", PlantNumber."No.");
      CreateTempMaintProposalLines(PlantMaintenanceArrangement, TmpPlantMaintProposalLine);
      CreateMaintenanceProposal(TmpPlantMaintProposalLine)
    END;

    LOCAL PROCEDURE CreateMaintProposalFromPlantType@1100529001(PlantType@1100525000 : Record 11012551);
    VAR
      PlantMaintenanceArrangement@1100529000 : Record 11126146;
      TmpPlantMaintProposalLine@1100529001 : TEMPORARY Record 11126148;
    BEGIN
      PlantType.TESTFIELD(Blocked, FALSE);
      UpdateMaintenanceArrangements(PlantType.Code, '', '');
      PlantMaintenanceArrangement.SETRANGE("Plant Type", PlantType.Code);
      CreateTempMaintProposalLines(PlantMaintenanceArrangement, TmpPlantMaintProposalLine);
      CreateMaintenanceProposal(TmpPlantMaintProposalLine)
    END;

    LOCAL PROCEDURE CreateMaintProposalFromPlantLocation@1100529005(PlantLocation@1100525000 : Record 11012554);
    VAR
      PlantMaintenanceArrangement@1100529000 : Record 11126146;
      PlantInventory@1100529001 : Record 11012555;
      TmpPlantMaintProposalLine@1100529002 : TEMPORARY Record 11126148;
    BEGIN
      PlantLocation.TESTFIELD(Blocked, FALSE);
      IF PlantLocation.Status >= PlantLocation.Status::Finished THEN
        PlantLocation.FIELDERROR(Status);
      PlantInventory.SETRANGE(Removed, FALSE);
      PlantInventory.SETRANGE(Location, PlantLocation.Code);
      PlantInventory.SETRANGE(Bulk, FALSE);
      PlantInventory.SETFILTER(Quantity, '>%1', 0);
      PlantInventory.SETFILTER("Present from", '<=%1', gDateUntil);
      IF PlantInventory.FINDSET THEN BEGIN
        REPEAT
          UpdateMaintenanceArrangements(PlantInventory."Plant Type", PlantInventory."Plant No.", '');
        UNTIL PlantInventory.NEXT = 0;
      END;
      IF PlantInventory.FINDSET THEN BEGIN
        REPEAT
          PlantMaintenanceArrangement.RESET;
          PlantMaintenanceArrangement.SETRANGE("Plant Type", PlantInventory."Plant Type");
          PlantMaintenanceArrangement.SETRANGE("Plant No.", PlantInventory."Plant No.");
          PlantMaintenanceArrangement.SETRANGE("Current Location", PlantLocation.Code);
          CreateTempMaintProposalLines(PlantMaintenanceArrangement, TmpPlantMaintProposalLine);
        UNTIL PlantInventory.NEXT = 0;
      END;
      CreateMaintenanceProposal(TmpPlantMaintProposalLine)
    END;

    LOCAL PROCEDURE CreateMaintProposalFromPlantInspection@1100529006(PlantInspection@1100525000 : Record 11012564);
    VAR
      PlantMaintenanceArrangement@1100529000 : Record 11126146;
      TmpPlantMaintProposalLine@1100529001 : TEMPORARY Record 11126148;
    BEGIN
      PlantInspection.TESTFIELD("Maintenance Scheme");
      PlantInspection.TESTFIELD("Inspection Type");
      UpdateMaintenanceArrangements(PlantInspection."Plant Type", PlantInspection."Plant No.", PlantInspection."Maintenance Scheme");
      PlantMaintenanceArrangement.SETRANGE("Plant Type", PlantInspection."Plant Type");
      PlantMaintenanceArrangement.SETRANGE("Plant No.", PlantInspection."Plant No.");
      PlantMaintenanceArrangement.SETRANGE("Maintenance Scheme", PlantInspection."Maintenance Scheme");
      PlantMaintenanceArrangement.SETRANGE("Inspection Type", PlantInspection."Inspection Type");
      CreateTempMaintProposalLines(PlantMaintenanceArrangement, TmpPlantMaintProposalLine);
      CreateMaintenanceProposal(TmpPlantMaintProposalLine)
    END;

    LOCAL PROCEDURE UpdateMaintenanceArrangements@1100529004(PlantType@1100529000 : Code[20];PlantNo@1100529001 : Code[10];MaintScheme@1100529002 : Code[20]);
    VAR
      PlantMaintenanceScheme@1100529003 : Record 11072677;
      PlantMaintenanceManagement@1100529004 : Codeunit 11012872;
      StatusDialog@1100529005 : Dialog;
      EndingDate@1100529006 : Date;
    BEGIN
      IF PlantType = '' THEN
        EXIT;

      IF gPlanningHorzEndDate >= gDateUntil THEN
        EndingDate := gPlanningHorzEndDate
      ELSE
        EndingDate := gDateUntil;
      WITH PlantMaintenanceScheme DO BEGIN
        SETRANGE("Plant Type", PlantType);
        IF PlantNo <> '' THEN
          SETRANGE("Plant No.", PlantNo)
        ELSE
          SETFILTER("Plant No.", '<>%1', '');
        IF MaintScheme <> '' THEN
          SETRANGE("Maintenance Scheme", MaintScheme)
        ELSE
          SETFILTER("Maintenance Scheme", '<>%1', '');
        IF FINDSET THEN BEGIN
          IF GUIALLOWED THEN
            StatusDialog.OPEN(Text003);
          REPEAT
            IF GUIALLOWED THEN
              StatusDialog.UPDATE(1, STRSUBSTNO('%1-%2 %3', "Plant Type", "Plant No.", "Maintenance Scheme"));
            PlantMaintenanceManagement.UpdatePlantNoMaintSchemeArrangements(PlantMaintenanceScheme, EndingDate, FALSE, TRUE);
          UNTIL NEXT = 0;
          IF GUIALLOWED THEN
            StatusDialog.CLOSE;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateTempMaintProposalLines@1100525001(VAR PlantMaintenanceArrangement@1100529000 : Record 11126146;VAR TmpPlantMaintProposalLine@1100529001 : TEMPORARY Record 11126148);
    VAR
      StatusDialog@1100529002 : Dialog;
      Counter@1100529003 : Integer;
    BEGIN
      PlantMaintenanceArrangement.SETCURRENTKEY("Plant Type","Plant No.","Maintenance Scheme","Line No.");
      PlantMaintenanceArrangement.FILTERGROUP(11);
      PlantMaintenanceArrangement.SETFILTER("Maintenance Date", '<=%1&<>%2', gDateUntil, 0D);
      PlantMaintenanceArrangement.SETRANGE("Maintenance Proposal No.", '');
      PlantMaintenanceArrangement.SETRANGE("Service Order No.", '');
      PlantMaintenanceArrangement.SETRANGE(Cancelled, FALSE);
      PlantMaintenanceArrangement.SETRANGE("Blocked (Plant No.)", FALSE);
      PlantMaintenanceArrangement.SETRANGE("Blocked (Plant Type)", FALSE);
      PlantMaintenanceArrangement.FILTERGROUP(0);
      IF PlantMaintenanceArrangement.FINDSET THEN BEGIN
        IF GUIALLOWED THEN
          StatusDialog.OPEN(Text002);
        Counter := gCounter;
        REPEAT
          Counter += 1;
          IF GUIALLOWED THEN
            StatusDialog.UPDATE(1, Counter);
          InsertTempMaintProposalLine(PlantMaintenanceArrangement, TmpPlantMaintProposalLine);
        UNTIL PlantMaintenanceArrangement.NEXT = 0;
        IF GUIALLOWED THEN
          StatusDialog.CLOSE;
      END;
    END;

    LOCAL PROCEDURE InsertTempMaintProposalLine@1100525006(PlantMaintenanceArrangement@1100529000 : Record 11126146;VAR TmpPlantMaintProposalLine@1100529001 : TEMPORARY Record 11126148);
    BEGIN
      TmpPlantMaintProposalLine.INIT;
      TmpPlantMaintProposalLine."Maintenance Proposal No." := 'TMP';
      gNextLineNo += 10000;
      TmpPlantMaintProposalLine."Line No." := gNextLineNo;
      TmpPlantMaintProposalLine.VALIDATE("Plant Type", PlantMaintenanceArrangement."Plant Type");
      TmpPlantMaintProposalLine.VALIDATE("Plant No.", PlantMaintenanceArrangement."Plant No.");
      TmpPlantMaintProposalLine.VALIDATE("Maintenance Scheme", PlantMaintenanceArrangement."Maintenance Scheme");
      TmpPlantMaintProposalLine."Maint. Arrangement Line No." := PlantMaintenanceArrangement."Line No.";
      TmpPlantMaintProposalLine."Inspection Type" := PlantMaintenanceArrangement."Inspection Type";
      TmpPlantMaintProposalLine."Interval Maintenance" := PlantMaintenanceArrangement."Interval Maintenance";
      TmpPlantMaintProposalLine.Meter := PlantMaintenanceArrangement.Meter;
      TmpPlantMaintProposalLine."Meter Reading Type" := PlantMaintenanceArrangement."Meter Reading Type";
      TmpPlantMaintProposalLine."Interval Meter Reading" := PlantMaintenanceArrangement."Interval Meter Reading";
      TmpPlantMaintProposalLine."Specific Meter Reading" := PlantMaintenanceArrangement."Specific Meter Reading";
      TmpPlantMaintProposalLine."Total Meter Reading Maint." := PlantMaintenanceArrangement."Total Meter Reading Maint.";
      TmpPlantMaintProposalLine.VALIDATE("Starting Date Maintenance", PlantMaintenanceArrangement."Maintenance Date");
      TmpPlantMaintProposalLine."Theoretical Maintenance Date" := PlantMaintenanceArrangement."Theoretical Maintenance Date";
      TmpPlantMaintProposalLine."Maintenance Day" := PlantMaintenanceArrangement."Maintenance Day";
      TmpPlantMaintProposalLine."Firm Planned" := PlantMaintenanceArrangement."Firm Planned";
      TmpPlantMaintProposalLine.Comment := PlantMaintenanceArrangement.Comment;
      TmpPlantMaintProposalLine.INSERT(FALSE);
    END;

    LOCAL PROCEDURE CreateMaintenanceProposal@1100529003(VAR TmpPlantMaintProposalLine@1100529000 : TEMPORARY Record 11126148);
    VAR
      StatusDialog@1100529001 : Dialog;
    BEGIN
      TmpPlantMaintProposalLine.RESET;
      IF TmpPlantMaintProposalLine.FINDSET THEN BEGIN
        IF GUIALLOWED THEN
          StatusDialog.OPEN(Text002);
        IF gProposalCode = '' THEN
          InsertMaintProposalHeader;
        REPEAT
          gCounter += 1;
          IF GUIALLOWED THEN
            StatusDialog.UPDATE(1, gCounter);
          InsertMaintProposalLines(TmpPlantMaintProposalLine);
        UNTIL TmpPlantMaintProposalLine.NEXT = 0;
        IF GUIALLOWED THEN
          StatusDialog.OPEN(Text002);
      END;
    END;

    LOCAL PROCEDURE InsertMaintProposalHeader@1100525017();
    VAR
      PlantMaintProposalHeader@1100525002 : Record 11126147;
    BEGIN
      PlantMaintProposalHeader.INIT;
      PlantMaintProposalHeader."Created by" := USERID;
      PlantMaintProposalHeader."Created on" := CURRENTDATETIME;
      PlantMaintProposalHeader."Created from" := gCreatedFrom;
      PlantMaintProposalHeader."Applied filter" := gUsedFilters;
      IF PlantMaintProposalHeader."Created from" <> PlantMaintProposalHeader."Created from"::Arrangement THEN
        PlantMaintProposalHeader."Until Date" := gDateUntil;
      PlantMaintProposalHeader.INSERT(TRUE);
      PlantMaintProposalHeader.TESTFIELD("No.");
      gProposalCode := PlantMaintProposalHeader."No.";
    END;

    LOCAL PROCEDURE InsertMaintProposalLines@1100525018(TmpPlantMaintProposalLine@1100529000 : TEMPORARY Record 11126148);
    VAR
      PlantMaintProposalLine@1100525000 : Record 11126148;
    BEGIN
      PlantMaintProposalLine := TmpPlantMaintProposalLine;
      PlantMaintProposalLine."Maintenance Proposal No." := gProposalCode;
      PlantMaintProposalLine.INSERT(TRUE);
    END;

    BEGIN
    END.
  }
}

