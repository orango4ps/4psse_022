OBJECT Codeunit 11125822 BIM Viewer Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100529001 : TextConst 'DEU=IFC-Objekte werden aufgebaut.;ENU=Building IFC objects.;NLD=IFC objecten opbouwen';
      Text002@1100525003 : TextConst 'DEU=Kein IFC-Objekt gefunden;ENU=No IFC Object found;NLD=Geen IFC object gevonden';
      Text003@1100529002 : TextConst 'DEU=IFC-Objekt (%1) ist bereits verknÅpft mit %2 ''%3'', %4 ''%5'';ENU=Ifc Object (%1) is already linked to %2 ''%3'', %4 ''%5'';NLD=Ifc Object (%1) is al gekoppeld aan %2 ''%3'', %4 ''%5''';
      Text004@1100529400 : TextConst 'DEU=Bildposition;ENU=Picture Position;NLD=Afbeeldingpositie';
      Text005@1100529401 : TextConst 'DEU=Bild;ENU=Picture;NLD=Afbeelding;NOR=Bilde;SVE=Bild';

    PROCEDURE GetDefaultLinkNoOfLinkType@1100525000(BimModelNo@1100525000 : Code[20];LinkType@1100529000 : Option) LinkNo : Code[20];
    VAR
      BimModelLink@1100525001 : Record 11125824;
      BimModelUserDefaults@1100525002 : Record 11125825;
      LinkNo2@1100529001 : Code[20];
    BEGIN
      IF BimModelNo <> '' THEN BEGIN
        SetFilterOnBimModelLinkType(BimModelNo, LinkType, BimModelLink);
        IF BimModelLink.FINDFIRST THEN BEGIN
          LinkNo := BimModelLink."No.";
          IF BimModelLink.COUNT > 1 THEN BEGIN
            IF BimModelUserDefaults.GET(BimModelNo, USERID) THEN BEGIN
              IF LinkType = BimModelLink.Type::ServiceLocation THEN
                LinkNo2 := BimModelUserDefaults."Service Location No.";
              IF LinkType = BimModelLink.Type::Project THEN
                LinkNo2 := BimModelUserDefaults."Project No.";
              IF LinkType = BimModelLink.Type::PlantLocation THEN
                LinkNo2 := BimModelUserDefaults."Plant Location";
              IF LinkNo2 <> '' THEN BEGIN
                IF BimModelLink.GET(BimModelNo, LinkType, LinkNo2) THEN
                  LinkNo := LinkNo2;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE GetNoOfLinksOfLinkType@1100525001(BimModelNo@1100525000 : Code[20];LinkType@1100529000 : Option) : Integer;
    VAR
      BimModelLink@1100525001 : Record 11125824;
    BEGIN
      IF BimModelNo <> '' THEN BEGIN
        SetFilterOnBimModelLinkType(BimModelNo, LinkType, BimModelLink);
        EXIT(BimModelLink.COUNT);
      END;
      EXIT(0);
    END;

    PROCEDURE SetUserDefaultLinkNoOfLinkType@1100525005(BimModelNo@1100525001 : Code[20];LinkType@1100529000 : Option;LinkNo@1100525002 : Code[20]);
    VAR
      BimModelLink@1100525003 : Record 11125824;
      BimModelUserDefaults@1100525000 : Record 11125825;
    BEGIN
      IF (BimModelNo = '') OR (LinkNo = '') THEN
        EXIT;
      IF NOT BimModelLink.GET(BimModelNo, LinkType, LinkNo) THEN
        EXIT;

      IF NOT BimModelUserDefaults.GET(BimModelNo, USERID) THEN BEGIN
        BimModelUserDefaults.INIT;
        BimModelUserDefaults."BIM Model No." := BimModelNo;
        BimModelUserDefaults."User ID" := USERID;
        BimModelUserDefaults.INSERT;
      END;
      IF ((LinkType = BimModelLink.Type::ServiceLocation) AND (LinkNo <> BimModelUserDefaults."Service Location No.")) OR
         ((LinkType = BimModelLink.Type::Project) AND (LinkNo <> BimModelUserDefaults."Project No.")) OR
          ((LinkType = BimModelLink.Type::PlantLocation) AND (LinkNo <> BimModelUserDefaults."Plant Location"))
      THEN BEGIN
        IF LinkType = BimModelLink.Type::ServiceLocation THEN
          BimModelUserDefaults."Service Location No." := LinkNo;
        IF LinkType = BimModelLink.Type::Project THEN
          BimModelUserDefaults."Project No." := LinkNo;
        IF LinkType = BimModelLink.Type::PlantLocation THEN
          BimModelUserDefaults."Plant Location" := LinkNo;
        BimModelUserDefaults.MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE LookupBimModelLinkedServiceLocations@1100525004(BimModelNo@1100525002 : Code[20];VAR ServiceLocationNo@1100525003 : Code[20];ServiceLocationNoEditable@1100525004 : Boolean);
    VAR
      BimModelLink@1100525000 : Record 11125824;
      ServiceLocation@1100525005 : Record 11012801;
    BEGIN
      BimModelLink.FILTERGROUP(9);
      SetFilterOnBimModelLinkType(BimModelNo, BimModelLink.Type::ServiceLocation, BimModelLink);
      BimModelLink.FILTERGROUP(0);
      IF BimModelLink.FINDSET THEN BEGIN
        REPEAT
          IF ServiceLocation.GET(BimModelLink."No.") THEN
            ServiceLocation.MARK(TRUE);
        UNTIL BimModelLink.NEXT = 0;
        ServiceLocation.MARKEDONLY(TRUE);
        ServiceLocation."No." := ServiceLocationNo;
        IF NOT ServiceLocationNoEditable THEN
          PAGE.RUNMODAL(0, ServiceLocation)
        ELSE BEGIN
          IF PAGE.RUNMODAL(0, ServiceLocation) = ACTION::LookupOK THEN BEGIN
            IF ServiceLocation."No." <> '' THEN BEGIN
              IF BimModelLink.GET(BimModelNo, BimModelLink.Type::ServiceLocation, ServiceLocation."No.") THEN
                ServiceLocationNo := ServiceLocation."No.";
            END;
          END;
        END;
      END;
    END;

    PROCEDURE LookupBimModelLinkedProjects@1100529003(BimModelNo@1100525002 : Code[20];VAR ProjectNo@1100525003 : Code[20];ProjectNoEditable@1100525004 : Boolean);
    VAR
      BimModelLink@1100525000 : Record 11125824;
      Project@1100525005 : Record 11072003;
    BEGIN
      BimModelLink.FILTERGROUP(9);
      SetFilterOnBimModelLinkType(BimModelNo, BimModelLink.Type::Project, BimModelLink);
      BimModelLink.FILTERGROUP(0);
      IF BimModelLink.FINDSET THEN BEGIN
        REPEAT
          IF Project.GET(BimModelLink."No.") THEN
            Project.MARK(TRUE);
        UNTIL BimModelLink.NEXT = 0;
        Project.MARKEDONLY(TRUE);
        Project."No." := ProjectNo;
        IF NOT ProjectNoEditable THEN
          PAGE.RUNMODAL(0, Project)
        ELSE BEGIN
          IF PAGE.RUNMODAL(0, Project) = ACTION::LookupOK THEN BEGIN
            IF Project."No." <> '' THEN BEGIN
              IF BimModelLink.GET(BimModelNo, BimModelLink.Type::Project, Project."No.") THEN
                ProjectNo := Project."No.";
            END;
          END;
        END;
      END;
    END;

    PROCEDURE IfcObjectServiceObject@1100525006(BimModelNo@1100525003 : Code[20];IfcGuid@1100525000 : Text;VAR ServiceObject2@1100525004 : Record 11071691) ObjectFound : Boolean;
    VAR
      ServiceObject@1100525005 : Record 11071691;
    BEGIN
      IF (BimModelNo <> '') AND (IfcGuid <> '')  THEN BEGIN
        ServiceObject.SETCURRENTKEY("BIM Model No.", "IFC Object ID");
        ServiceObject.SETRANGE("BIM Model No.", BimModelNo);
        ServiceObject.SETRANGE("IFC Object ID", IfcGuid);
        ObjectFound := ServiceObject.FINDFIRST;
      END;
      IF ObjectFound THEN
        ServiceObject2 := ServiceObject
      ELSE BEGIN
        ServiceObject2."No." := '';
        ServiceObject2.INIT;
      END;
    END;

    PROCEDURE IfcObjectProjectObject@1100529002(BimModelNo@1100525003 : Code[20];IfcGuid@1100525000 : Text;VAR ProjectObject2@1100525004 : Record 11229311) ObjectFound : Boolean;
    VAR
      ProjectObject@1100525005 : Record 11229311;
    BEGIN
      IF (BimModelNo <> '') AND (IfcGuid <> '')  THEN BEGIN
        ProjectObject.SETCURRENTKEY("BIM Model No.", "IFC Object ID");
        ProjectObject.SETRANGE("BIM Model No.", BimModelNo);
        ProjectObject.SETRANGE("IFC Object ID", IfcGuid);
        ObjectFound := ProjectObject.FINDFIRST;
      END;
      IF ObjectFound THEN
        ProjectObject2 := ProjectObject
      ELSE BEGIN
        ProjectObject2."No." := '';
        ProjectObject2.INIT;
      END;
    END;

    PROCEDURE IfcObjectPlantObject@1100525017(BimModelNo@1100525003 : Code[20];IfcGuid@1100525000 : Text;VAR PlantObject2@1100525004 : Record 11125830) ObjectFound : Boolean;
    VAR
      PlantObject@1100525001 : Record 11125830;
    BEGIN
      IF (BimModelNo <> '') AND (IfcGuid <> '')  THEN BEGIN
        PlantObject.SETCURRENTKEY("BIM Model No.", "IFC Object ID");
        PlantObject.SETRANGE("BIM Model No.", BimModelNo);
        PlantObject.SETRANGE("IFC Object ID", IfcGuid);
        ObjectFound := PlantObject.FINDFIRST;
      END;
      IF ObjectFound THEN
        PlantObject2 := PlantObject
      ELSE BEGIN
        PlantObject2."No." := '';
        PlantObject2.INIT;
      END;
    END;

    PROCEDURE IfcObjectLinkedToServiceObject@1100525007(BimModelNo@1100525003 : Code[20];IfcGuid@1100525000 : Text) : Boolean;
    VAR
      ServiceObject@1100525005 : Record 11071691;
    BEGIN
      IF (BimModelNo <> '') AND (IfcGuid <> '')  THEN BEGIN
        ServiceObject.SETCURRENTKEY("BIM Model No.", "IFC Object ID");
        ServiceObject.SETRANGE("BIM Model No.", BimModelNo);
        ServiceObject.SETRANGE("IFC Object ID", IfcGuid);
        IF NOT ServiceObject.ISEMPTY THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE IfcObjectLinkedToProjectObject@1100529001(BimModelNo@1100525003 : Code[20];IfcGuid@1100525000 : Text) : Boolean;
    VAR
      ProjectObject@1100525005 : Record 11229311;
    BEGIN
      IF (BimModelNo <> '') AND (IfcGuid <> '') THEN BEGIN
        ProjectObject.SETCURRENTKEY("BIM Model No.", "IFC Object ID");
        ProjectObject.SETRANGE("BIM Model No.", BimModelNo);
        ProjectObject.SETRANGE("IFC Object ID", IfcGuid);
        IF NOT ProjectObject.ISEMPTY THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE IfcObjectLinkedToPlantObject@1100525016(BimModelNo@1100525003 : Code[20];IfcGuid@1100525000 : Text) : Boolean;
    VAR
      PlantObject@1100525001 : Record 11125830;
    BEGIN
      IF (BimModelNo <> '') AND (IfcGuid <> '')  THEN BEGIN
        PlantObject.SETCURRENTKEY("BIM Model No.", "IFC Object ID");
        PlantObject.SETRANGE("BIM Model No.", BimModelNo);
        PlantObject.SETRANGE("IFC Object ID", IfcGuid);
        IF NOT PlantObject.ISEMPTY THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE LinkServiceObjectToCurrIfcObject@1100529000(VAR ServiceObject@1100529000 : Record 11071691;BimModelNo@1100529003 : Code[20];IfcGuid@1100529001 : Text);
    VAR
      ServiceObject2@1100529002 : Record 11071691;
    BEGIN
      ServiceObject.TESTFIELD("No.");
      ServiceObject.TESTFIELD("IFC Object ID", '');
      IF IfcObjectServiceObject(BimModelNo, IfcGuid, ServiceObject2) THEN
        ERROR(Text003, IfcGuid,
          ServiceObject.TABLECAPTION, ServiceObject2."No.",
          ServiceObject.FIELDCAPTION("Service Location No."), ServiceObject2."Service Location No.");

      ServiceObject."BIM Model No." := BimModelNo;
      ServiceObject."IFC Object ID" := IfcGuid;
      ServiceObject.MODIFY;
    END;

    PROCEDURE LinkProjectObjectToCurrIfcObject@1100529006(VAR ProjectObject@1100529000 : Record 11229311;BimModelNo@1100529003 : Code[20];IfcGuid@1100529001 : Text);
    VAR
      ProjectObject2@1100529002 : Record 11229311;
    BEGIN
      ProjectObject.TESTFIELD("No.");
      ProjectObject.TESTFIELD("IFC Object ID", '');
      IF IfcObjectProjectObject(BimModelNo, IfcGuid, ProjectObject2) THEN
        ERROR(Text003, IfcGuid,
          ProjectObject.TABLECAPTION, ProjectObject2."No.",
          ProjectObject.FIELDCAPTION("Project No."), ProjectObject2."Project No.");

      ProjectObject."BIM Model No." := BimModelNo;
      ProjectObject."IFC Object ID" := IfcGuid;
      ProjectObject.MODIFY;
    END;

    PROCEDURE CopyIfcPropertiesToCurrObject@1100529009(VAR IfcObject@1100529000 : DotNet "'Fps.Nav.Windows.Addin.Bim.Interface, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Windows.Addin.Bim.Interface.Model.IIfcObject" RUNONCLIENT;ObjectNo@1100529001 : Code[20];TableNo@1100529002 : Integer);
    VAR
      TmpIfcObjectProperty@1100529003 : TEMPORARY Record 11020579;
    BEGIN
      BuildTmpTableIfcObjectProperties(IfcObject, TmpIfcObjectProperty, TableNo);

      TmpIfcObjectProperty.Bool4 := TRUE;
      TmpIfcObjectProperty.Bool5 := FALSE;
      TmpIfcObjectProperty.Int1 := TableNo;
      PAGE.RUNMODAL(PAGE::"IFC Object Properties", TmpIfcObjectProperty);
      InsertObjectProperties(ObjectNo, TableNo, TmpIfcObjectProperty);
    END;

    LOCAL PROCEDURE SetFilterOnBimModelLinkType@1100525002(BimModelNo@1100525001 : Code[20];LinkType@1100529000 : Option;VAR BimModelLink@1100525000 : Record 11125824);
    BEGIN
      BimModelLink.SETRANGE("BIM Model No.", BimModelNo);
      BimModelLink.SETRANGE(Type, LinkType);
      BimModelLink.SETFILTER("No.", '<>%1', '');
    END;

    PROCEDURE FillCurrentIfcObjectInfoTmpTable@1100525003(VAR IfcObject@1100525004 : DotNet "'Fps.Nav.Windows.Addin.Bim.Interface, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Windows.Addin.Bim.Interface.Model.IIfcObject" RUNONCLIENT;VAR TmpCurrIfcObjectInfo@1100525005 : TEMPORARY Record 11020579);
    VAR
      StringFunctions@1100525002 : Codeunit 11012273;
      InfoArray@1100525003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array" RUNONCLIENT;
      ArrayNo@1100525000 : Integer;
      SplittedArray@1100525001 : ARRAY [10] OF Text[250];
    BEGIN
      WITH TmpCurrIfcObjectInfo DO BEGIN  //Table must be Temporary in the calling process!
        RESET;
        DELETEALL;
        IF IfcObject.Guid = '' THEN
          EXIT;
        InfoArray :=IfcObject.GetInformation();
        FOR ArrayNo := 0 TO InfoArray.Length - 1 DO BEGIN
          INIT;
          "Key Code1" := FORMAT(ArrayNo+1);
          IF STRLEN("Key Code1") < 10 THEN
            "Key Code1" := COPYSTR('0000000000', 1, 10-STRLEN("Key Code1")) + "Key Code1";
          CLEAR(SplittedArray);
          StringFunctions.SplitString(InfoArray.GetValue(ArrayNo), ' = ', SplittedArray);
          Text1 := SplittedArray[1];
          Text2 := SplittedArray[2];
          IF (Text1 + Text2) <> '' THEN
            INSERT;
        END;
        IF NOT FINDFIRST THEN
          INIT;
      END;
    END;

    PROCEDURE FillSelectedBimIfcObjectTmpTable@1100525013(VAR IfcObjects@1100525002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array" RUNONCLIENT;BimModelNo@1100525006 : Code[20];LinkType@1100529001 : Option;SkipAlreadyLinked@1100525007 : Boolean;VAR TmpIfcObjectProperty@1100529005 : TEMPORARY Record 11020579;VAR TmpBimIfcObject@1100525000 : TEMPORARY Record 11125826;CreateObjectsForAll@1100527351 : Boolean;IfcObjectsTypeForAll@1100527352 : Text[50]);
    VAR
      BimModelLink@1100529002 : Record 11125824;
      ServiceObject@1100529003 : Record 11071691;
      ProjectObject@1100529004 : Record 11229311;
      TmpProperty@1100529006 : TEMPORARY Record 11020579;
      IfcObject@1100525003 : DotNet "'Fps.Nav.Windows.Addin.Bim.Interface, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Windows.Addin.Bim.Interface.Model.IIfcObject" RUNONCLIENT;
      Window@1100525005 : Dialog;
      SkipObject@1100525008 : Boolean;
      ArrayNo@1100525004 : Integer;
      ArrayLen@1100525001 : Integer;
      UpdatePerc@1100529000 : Integer;
      PlantObject@1100527350 : Record 11125830;
    BEGIN
      WITH TmpBimIfcObject DO BEGIN  //Table must be Temporary in the calling process!
        Window.OPEN(Text001 + ' @1@@@@@@@@@@@@@@@@@@@@');
        RESET;
        DELETEALL;
        TmpProperty.COPY(TmpIfcObjectProperty, TRUE);
        TmpProperty.RESET;
        TmpProperty.SETRANGE(Bool2, TRUE);  // Bool2 is indator for 'Filter on property'

        ArrayLen := IfcObjects.Length;
        FOR ArrayNo := 1 TO ArrayLen DO BEGIN
          IF UpdatePerc <> ROUND((ArrayNo / ArrayLen * 10000), 1) THEN BEGIN
            UpdatePerc := ROUND(ArrayNo / ArrayLen * 10000, 1);
            Window.UPDATE(1, UpdatePerc);
          END;
          IfcObject := IfcObjects.GetValue(ArrayNo-1);
          TmpBimIfcObject.INIT;
          TmpBimIfcObject."Entry No." := ArrayNo;
          TmpBimIfcObject.ID := IfcObject.Guid;
          SkipObject := FALSE;
          IF SkipAlreadyLinked THEN BEGIN
            IF LinkType = BimModelLink.Type::ServiceLocation THEN
              SkipObject := IfcObjectLinkedToServiceObject(BimModelNo, TmpBimIfcObject.ID);
            IF LinkType = BimModelLink.Type::Project THEN
              SkipObject := IfcObjectLinkedToProjectObject(BimModelNo, TmpBimIfcObject.ID);
            IF LinkType = BimModelLink.Type::PlantLocation THEN
              SkipObject := IfcObjectLinkedToPlantObject(BimModelNo, TmpBimIfcObject.ID);
          END;
          IF NOT SkipObject THEN BEGIN
            IF TmpProperty.FINDSET THEN BEGIN
              REPEAT
                IF TmpProperty.Text5 = '' THEN
                  TmpProperty.Bool3 := FALSE;
                SkipObject := (NOT IfcObject.CheckPropertyValue(TmpProperty.Text1, TmpProperty.Text5, TmpProperty.Bool3));
              UNTIL (TmpProperty.NEXT = 0) OR SkipObject;
            END;
          END;
          IF NOT SkipObject THEN BEGIN
            IF NOT (SkipAlreadyLinked AND (LinkType = BimModelLink.Type::ServiceLocation) )THEN
              IfcObjectServiceObject(BimModelNo, TmpBimIfcObject.ID, ServiceObject);
            IF NOT (SkipAlreadyLinked AND (LinkType = BimModelLink.Type::Project) )THEN
              IfcObjectProjectObject(BimModelNo, TmpBimIfcObject.ID, ProjectObject);
            IF NOT (SkipAlreadyLinked AND (LinkType = BimModelLink.Type::PlantLocation) )THEN
              IfcObjectPlantObject(BimModelNo, TmpBimIfcObject.ID, PlantObject);
            TmpBimIfcObject.Name := COPYSTR(IfcObject.Name, 1, MAXSTRLEN(TmpBimIfcObject.Name));
            IF CreateObjectsForAll = TRUE THEN
              TmpBimIfcObject."IFC Type" := IfcObjectsTypeForAll
            ELSE
              TmpBimIfcObject."IFC Type" := COPYSTR(IfcObject.DefiningIfcTypeName, 1, MAXSTRLEN(TmpBimIfcObject."IFC Type"));
            TmpBimIfcObject.Type := COPYSTR(IfcObject.TypeName, 1, MAXSTRLEN(TmpBimIfcObject.Type));
            TmpBimIfcObject.Site := GetIfcObjectInfoName(IfcObject, 1, MAXSTRLEN(TmpBimIfcObject.Site));
            TmpBimIfcObject.Building := GetIfcObjectInfoName(IfcObject, 2, MAXSTRLEN(TmpBimIfcObject.Building));
            TmpBimIfcObject.Floor := GetIfcObjectInfoName(IfcObject, 3, MAXSTRLEN(TmpBimIfcObject.Floor));
            TmpBimIfcObject.Space := GetIfcObjectInfoName(IfcObject, 4, MAXSTRLEN(TmpBimIfcObject.Space));
            TmpBimIfcObject."Service Object No." := ServiceObject."No.";
            TmpBimIfcObject."Project Object No." := ProjectObject."No.";
            TmpBimIfcObject."Plant Object No." := PlantObject."No.";
            TmpBimIfcObject.INSERT;
          END;
        END;
        Window.CLOSE;
        IF NOT FINDFIRST THEN
          ERROR(Text002);
      END;
    END;

    PROCEDURE ShowPropertiesCurrentIfcObject@1100529010(VAR IfcObject@1100529000 : DotNet "'Fps.Nav.Windows.Addin.Bim.Interface, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Windows.Addin.Bim.Interface.Model.IIfcObject" RUNONCLIENT;VAR TmpIfcObjectPropertyToCopy@1100529002 : TEMPORARY Record 11020579;TableNo@1100529003 : Integer);
    VAR
      TmpIfcObjectProperty@1100529001 : TEMPORARY Record 11020579;
    BEGIN
      BuildTmpTableIfcObjectProperties(IfcObject, TmpIfcObjectProperty, 0);
      IF NOT TmpIfcObjectProperty.ISEMPTY THEN BEGIN
        TmpIfcObjectPropertyToCopy.RESET;
        TmpIfcObjectPropertyToCopy.SETRANGE(Bool1, TRUE);
        IF TmpIfcObjectPropertyToCopy.FINDSET THEN BEGIN
          REPEAT
            IF TmpIfcObjectProperty.GET(TmpIfcObjectPropertyToCopy."Key Code1") THEN BEGIN
              TmpIfcObjectProperty.Bool1 := TRUE;
              TmpIfcObjectProperty.MODIFY;
            END;
          UNTIL TmpIfcObjectPropertyToCopy.NEXT = 0;
          TmpIfcObjectProperty.FINDFIRST;
        END;
      END;
      TmpIfcObjectProperty.Bool4 := FALSE;
      TmpIfcObjectProperty.Bool5 := FALSE;
      TmpIfcObjectProperty.Int1 := TableNo;
      PAGE.RUNMODAL(PAGE::"IFC Object Properties", TmpIfcObjectProperty);
    END;

    PROCEDURE FillCurrentBimIfcObjectTableFields@1100525015(VAR IfcObject@1100525001 : DotNet "'Fps.Nav.Windows.Addin.Bim.Interface, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Windows.Addin.Bim.Interface.Model.IIfcObject" RUNONCLIENT;VAR BimIfcObject@1100525000 : Record 11125826);
    BEGIN
      WITH BimIfcObject DO BEGIN
        BimIfcObject.INIT;
        BimIfcObject."Entry No." := 1;
        BimIfcObject.ID := IfcObject.Guid;
        BimIfcObject.Name := COPYSTR(IfcObject.Name, 1, MAXSTRLEN(BimIfcObject.Name));
        BimIfcObject."IFC Type" := COPYSTR(IfcObject.DefiningIfcTypeName, 1, MAXSTRLEN(BimIfcObject."IFC Type"));
        BimIfcObject.Type := COPYSTR(IfcObject.TypeName, 1, MAXSTRLEN(BimIfcObject.Type));
        BimIfcObject.Site := GetIfcObjectInfoName(IfcObject, 1, MAXSTRLEN(BimIfcObject.Site));
        BimIfcObject.Building := GetIfcObjectInfoName(IfcObject, 2, MAXSTRLEN(BimIfcObject.Building));
        BimIfcObject.Floor := GetIfcObjectInfoName(IfcObject, 3, MAXSTRLEN(BimIfcObject.Floor));
        BimIfcObject.Space := GetIfcObjectInfoName(IfcObject, 4, MAXSTRLEN(BimIfcObject.Space));
      END;
    END;

    PROCEDURE GetIfcObjectInfoName@1100525014(VAR IfcObject@1100525000 : DotNet "'Fps.Nav.Windows.Addin.Bim.Interface, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Windows.Addin.Bim.Interface.Model.IIfcObject" RUNONCLIENT;InfoType@1100525002 : Integer;MaxLen@1100525003 : Integer) Name : Text;
    VAR
      IfcObjectInfo@1100525001 : DotNet "'Fps.Nav.Windows.Addin.Bim.Interface, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Windows.Addin.Bim.Interface.Model.IIfcObject" RUNONCLIENT;
    BEGIN
      //InfoType: 1=Site, 2=Building, 3=Floor, 4=Space
      CASE InfoType OF
        1:
          BEGIN
            IF IfcObject.HasIfcSite() THEN BEGIN
              IfcObjectInfo := IfcObject.IfcSite();
              Name := IfcObjectInfo.Name;
            END;
          END;
        2:
          BEGIN
            IF IfcObject.HasIfcBuilding() THEN BEGIN
              IfcObjectInfo := IfcObject.IfcBuilding();
              Name := IfcObjectInfo.Name;
            END;
          END;
        3:
          BEGIN
            IF IfcObject.HasIfcBuildingStorey() THEN BEGIN
              IfcObjectInfo := IfcObject.IfcBuildingStorey();
              Name := IfcObjectInfo.Name;
            END;
          END;
        4:
          BEGIN
            IF IfcObject.HasIfcSpace() THEN BEGIN
              IfcObjectInfo := IfcObject.IfcSpace();
              Name := IfcObjectInfo.Name;
            END;
          END;
      END;
      IF MaxLen > 0 THEN
        Name := COPYSTR(Name, 1, MaxLen);
    END;

    PROCEDURE CreateServiceObjectsSelections@1100525011(VAR IfcObject@1100525011 : DotNet "'Fps.Nav.Windows.Addin.Bim.Interface, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Windows.Addin.Bim.Interface.Model.IIfcObject" RUNONCLIENT;BimModelNo@1100525007 : Code[20];ServiceLocationNo@1100525006 : Code[20];VAR CreateFor@1100525002 : Integer;VAR StandardObjectNo@1100525003 : Code[20];VAR PartOfIfcName@1100525001 : Text;VAR IfcDefType@1100525000 : Text;VAR PropertyName@1100529004 : Text;VAR PropertyValue@1100529003 : Text;VAR PicturePositions@1100529400 : Code[10];VAR TmpIfcObjectProperty@1100529002 : TEMPORARY Record 11020579);
    VAR
      BimModel@1100525009 : Record 11125823;
      BimModelLink@1100525008 : Record 11125824;
      ServiceLocation@1100525010 : Record 11012801;
      IfcObjectCreateServObjects@1100525005 : Report 11125365;
      CurrentLinked@1100529001 : Boolean;
    BEGIN
      BimModel.GET(BimModelNo);
      BimModel.TESTFIELD("No.");
      BimModelLink.GET(BimModelNo, BimModelLink.Type::ServiceLocation, ServiceLocationNo);
      BimModelLink.TESTFIELD("No.");
      ServiceLocation.GET(ServiceLocationNo);
      ServiceLocation.TESTFIELD(Blocked, FALSE);

      CurrentLinked := IfcObjectLinkedToServiceObject(BimModelNo, IfcObject.Guid);
      IfcDefType := IfcObject.DefiningIfcTypeName;
      BuildTmpTableIfcObjectProperties(IfcObject, TmpIfcObjectProperty, DATABASE::"Service-Object");
      IfcObjectCreateServObjects.SetSelection(IfcDefType, IfcObject.Name, ServiceLocationNo, CurrentLinked, TmpIfcObjectProperty);
      IfcObjectCreateServObjects.RUNMODAL;
      IfcObjectCreateServObjects.GetSelection(CreateFor, PartOfIfcName, StandardObjectNo, PropertyName, PropertyValue, PicturePositions);
      IfcObjectCreateServObjects.GetIfcObjectTypeForAll(IfcDefType);
      IF CreateFor < 1 THEN
        ERROR('');
    END;

    PROCEDURE CreateProjectObjectsSelections@1100529004(VAR IfcObject@1100525011 : DotNet "'Fps.Nav.Windows.Addin.Bim.Interface, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Windows.Addin.Bim.Interface.Model.IIfcObject" RUNONCLIENT;BimModelNo@1100525007 : Code[20];ProjectNo@1100525006 : Code[20];VAR CreateFor@1100525002 : Integer;VAR ItemNo@1100525003 : Code[20];VAR CostObject@1100529000 : Code[20];VAR PlotNo@1100529005 : Code[10];VAR PartOfIfcName@1100525001 : Text;VAR IfcDefType@1100525000 : Text;VAR PropertyName@1100529004 : Text;VAR PropertyValue@1100529003 : Text;VAR PicturePositions@1100529400 : Code[10];VAR TmpIfcObjectProperty@1100529002 : TEMPORARY Record 11020579);
    VAR
      BimModel@1100525009 : Record 11125823;
      BimModelLink@1100525008 : Record 11125824;
      IfcObjectCreateProjObjects@1100525005 : Report 11125366;
      CurrentLinked@1100529001 : Boolean;
    BEGIN
      BimModel.GET(BimModelNo);
      BimModel.TESTFIELD("No.");
      BimModelLink.GET(BimModelNo, BimModelLink.Type::Project, ProjectNo);
      BimModelLink.TESTFIELD("No.");

      CurrentLinked := IfcObjectLinkedToProjectObject(BimModelNo, IfcObject.Guid);
      IfcDefType := IfcObject.DefiningIfcTypeName;
      BuildTmpTableIfcObjectProperties(IfcObject, TmpIfcObjectProperty, DATABASE::"Project Object");
      IfcObjectCreateProjObjects.SetSelection(IfcDefType, IfcObject.Name, ProjectNo, CurrentLinked, TmpIfcObjectProperty);
      IfcObjectCreateProjObjects.RUNMODAL;
      IfcObjectCreateProjObjects.GetSelection(CreateFor, PartOfIfcName, ItemNo, CostObject, PlotNo, PropertyName, PropertyValue, PicturePositions);
      IfcObjectCreateProjObjects.GetIfcObjectTypeForAll(IfcDefType);
      IF CreateFor < 1 THEN
        ERROR('');
    END;

    PROCEDURE CreatePlantObjectsSelections@1100525009(VAR IfcObject@1100525011 : DotNet "'Fps.Nav.Windows.Addin.Bim.Interface, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Windows.Addin.Bim.Interface.Model.IIfcObject" RUNONCLIENT;BimModelNo@1100525007 : Code[20];PlantLocationNo@1100525006 : Code[20];VAR CreateFor@1100525002 : Integer;VAR PlantType@1100525003 : Code[20];VAR PartOfIfcName@1100525001 : Text;VAR IfcDefType@1100525000 : Text;VAR PropertyName@1100529004 : Text;VAR PropertyValue@1100529003 : Text;VAR PicturePositions@1100529400 : Code[10];VAR TmpIfcObjectProperty@1100529002 : TEMPORARY Record 11020579);
    VAR
      BimModel@1100525009 : Record 11125823;
      BimModelLink@1100525008 : Record 11125824;
      CurrentLinked@1100529001 : Boolean;
      IFCObjectCreatePlObjects@1100525004 : Report 11125368;
    BEGIN
      BimModel.GET(BimModelNo);
      BimModel.TESTFIELD("No.");
      BimModelLink.GET(BimModelNo, BimModelLink.Type::PlantLocation, PlantLocationNo);
      BimModelLink.TESTFIELD("No.");

      CurrentLinked := IfcObjectLinkedToPlantObject(BimModelNo, IfcObject.Guid);
      IfcDefType := IfcObject.DefiningIfcTypeName;
      BuildTmpTableIfcObjectProperties(IfcObject, TmpIfcObjectProperty, DATABASE::"Plant Object");
      IFCObjectCreatePlObjects.SetSelection(IfcDefType, IfcObject.Name, PlantLocationNo, CurrentLinked, TmpIfcObjectProperty);
      IFCObjectCreatePlObjects.RUNMODAL;
      IFCObjectCreatePlObjects.GetSelection(CreateFor, PartOfIfcName, PlantType, PropertyName, PropertyValue, PicturePositions);
      IFCObjectCreatePlObjects.GetIfcObjectTypeForAll(IfcDefType);
      IF CreateFor < 1 THEN
        ERROR('');
    END;

    PROCEDURE InsertServiceObjectFromBimIfcObject@1100525012(BimIfcObject@1100525000 : TEMPORARY Record 11125826;BimModelNo@1100525004 : Code[20];StandardObjectNo@1100525002 : Code[20];ServiceLocationNo@1100525003 : Code[20];VAR TmpIfcObjectProperty@1100529000 : TEMPORARY Record 11020579) : Code[20];
    VAR
      ServiceObject@1100525001 : Record 11071691;
      PhaseIfc@1100528500 : Text[30];
    BEGIN
      IF IfcObjectLinkedToServiceObject(BimModelNo, BimIfcObject.ID) THEN
        EXIT;
      WITH ServiceObject DO BEGIN
        "No." := '';
        INSERT(TRUE);
        TESTFIELD("No.");
        DetermineSpecsForServiceObjectLevel(DATABASE::"Service-Object", TmpIfcObjectProperty,PhaseIfc);
        IF StandardObjectNo <> '' THEN
          VALIDATE("Standard Object No.", StandardObjectNo);
        VALIDATE("Service Location No.", ServiceLocationNo);
        Description := COPYSTR(BimIfcObject.Name, 1, MAXSTRLEN(Description));
        "Description 2" := COPYSTR(BimIfcObject.Name, MAXSTRLEN(Description)+1, MAXSTRLEN("Description 2"));
        Building := COPYSTR(BimIfcObject.Building, 1, MAXSTRLEN(Building));
        Floor := COPYSTR(BimIfcObject.Floor, 1, MAXSTRLEN(Floor));
        Room := COPYSTR(BimIfcObject.Space, 1, MAXSTRLEN(Room));
        "BIM Model No." := BimModelNo;
        "IFC Object ID" := BimIfcObject.ID;
        Phase := PhaseIfc;
        MODIFY(TRUE);
        InsertObjectProperties("No.", DATABASE::"Service-Object", TmpIfcObjectProperty);
        EXIT("No.");
      END;
    END;

    PROCEDURE InsertProjectObjectFromBimIfcObject@1100529005(BimIfcObject@1100525000 : TEMPORARY Record 11125826;BimModelNo@1100525004 : Code[20];ItemNo@1100525002 : Code[20];CostObject@1100529000 : Code[20];ProjectNo@1100525003 : Code[20];PlotNo@1100529008 : Code[10];VAR TmpIfcObjectProperty@1100529001 : TEMPORARY Record 11020579) : Code[20];
    VAR
      ProjectObject@1100525001 : Record 11229311;
      ElementIfc@1100529002 : Code[20];
      ItemNoIfc@1100529006 : Code[20];
      ManufacturerIfc@1100529007 : Code[20];
      VendorTradeItemIfc@1100529005 : Code[20];
      TradeItemIfc@1100529004 : Code[20];
      GtinItemIfc@1100529003 : Code[20];
      QuantityIfc@1100528401 : Decimal;
      Description2Ifc@1100528400 : Text[50];
      UnitOfMeasure@1100528402 : Code[10];
      PhaseIfc@1100528500 : Text[30];
    BEGIN
      IF IfcObjectLinkedToProjectObject(BimModelNo, BimIfcObject.ID) THEN
        EXIT;
      WITH ProjectObject DO BEGIN
        "No." := '';
        INSERT(TRUE);
        TESTFIELD("No.");
        DetermineSpecsForProjectObjectLevel(
          DATABASE::"Project Object", TmpIfcObjectProperty, ElementIfc, ItemNoIfc, ManufacturerIfc,
          VendorTradeItemIfc, TradeItemIfc, GtinItemIfc, QuantityIfc, Description2Ifc, UnitOfMeasure,PhaseIfc);
        FillItemFields(ProjectNo, ItemNoIfc, ManufacturerIfc, VendorTradeItemIfc, TradeItemIfc, GtinItemIfc);
        IF ManufacturerIfc <> '' THEN
          VALIDATE(Manufacturer, ManufacturerIfc);
        IF VendorTradeItemIfc <> '' THEN
          VALIDATE("Vendor (Trade Item)", VendorTradeItemIfc);
        IF TradeItemIfc <> '' THEN BEGIN
          IF "Vendor (Trade Item)" <> '' THEN
            VALIDATE("Trade Item", TradeItemIfc)
          ELSE
            "Trade Item" := TradeItemIfc;
        END ELSE BEGIN
          IF ItemNoIfc = '' THEN
            ItemNoIfc := ItemNo;
          IF ItemNoIfc <> '' THEN
            VALIDATE("Item No.", ItemNoIfc);
        END;
        "GTIN Code (Item)" := GtinItemIfc;
        IF CostObject <> '' THEN
          VALIDATE("Cost Object", CostObject);
        VALIDATE("Project No.", ProjectNo);
        IF PlotNo <> '' THEN
          VALIDATE("Plot No.", PlotNo);
        IF ElementIfc <> '' THEN
          VALIDATE(Element, ElementIfc);
        IF BimIfcObject.Name <> '' THEN BEGIN
          Description := COPYSTR(BimIfcObject.Name, 1, MAXSTRLEN(Description));
          IF Description2Ifc = '' THEN
            "Description 2" := COPYSTR(BimIfcObject.Name, MAXSTRLEN(Description)+1, MAXSTRLEN("Description 2"))
          ELSE
            "Description 2" := Description2Ifc;
        END;
        //DP02375.sn
        IF QuantityIfc = 0 THEN
          "Quantity (External)" := 1
        ELSE
          "Quantity (External)" := QuantityIfc;
        "Unit of Measure (External)" := UnitOfMeasure;
        IF "Unit of Measure" = '' THEN BEGIN
          //Unit of Measure should be filled by validate Item data
          "Unit of Measure" := UnitOfMeasure;
        END;
        CheckUnitConversion;
        //DP02375.en
        Building := COPYSTR(BimIfcObject.Building, 1, MAXSTRLEN(Building));
        Floor := COPYSTR(BimIfcObject.Floor, 1, MAXSTRLEN(Floor));
        Room := COPYSTR(BimIfcObject.Space, 1, MAXSTRLEN(Room));
        "BIM Model No." := BimModelNo;
        "IFC Object ID" := BimIfcObject.ID;
        Phase := PhaseIfc;
        MODIFY(TRUE);
        InsertObjectProperties("No.", DATABASE::"Project Object", TmpIfcObjectProperty);
        EXIT("No.");
      END;
    END;

    PROCEDURE InsertPlantObjectFromBimIfcObject@1100525010(BimIfcObject@1100525000 : TEMPORARY Record 11125826;BimModelNo@1100525004 : Code[20];PlantTypeNo@1100525002 : Code[20];PlantLocationNo@1100525003 : Code[20];VAR TmpIfcObjectProperty@1100529001 : TEMPORARY Record 11020579) : Code[20];
    VAR
      PlantTypeNoifc@1100529002 : Code[20];
      QuantityIfc@1100528401 : Decimal;
      Description2Ifc@1100528400 : Text[50];
      UnitOfMeasure@1100528402 : Code[10];
      PlantObject@1100525005 : Record 11125830;
      PhaseIfc@1100528500 : Text[30];
    BEGIN
      IF IfcObjectLinkedToPlantObject(BimModelNo, BimIfcObject.ID) THEN
        EXIT;
      WITH PlantObject DO BEGIN
        "No." := '';
        INSERT(TRUE);
        TESTFIELD("No.");
        DetermineSpecsForPlantObjectLevel(
          DATABASE::"Plant Object", TmpIfcObjectProperty, PlantTypeNoifc, QuantityIfc, Description2Ifc, UnitOfMeasure,PhaseIfc);
        VALIDATE("Plant Type", PlantTypeNoifc);
        VALIDATE("Plant Location No.", PlantLocationNo);
        IF BimIfcObject.Name <> '' THEN BEGIN
          Description := COPYSTR(BimIfcObject.Name, 1, MAXSTRLEN(Description));
          IF Description2Ifc = '' THEN
            "Description 2" := COPYSTR(BimIfcObject.Name, MAXSTRLEN(Description)+1, MAXSTRLEN("Description 2"))
          ELSE
            "Description 2" := Description2Ifc;
        END;
        IF QuantityIfc = 0 THEN
          Quantity := 1
        ELSE
          Quantity := QuantityIfc;
        IF UnitOfMeasure <> '' THEN
          "Unit of Measure" := UnitOfMeasure;
        Building := COPYSTR(BimIfcObject.Building, 1, MAXSTRLEN(Building));
        Floor := COPYSTR(BimIfcObject.Floor, 1, MAXSTRLEN(Floor));
        Room := COPYSTR(BimIfcObject.Space, 1, MAXSTRLEN(Room));
        "BIM Model No." := BimModelNo;
        "IFC Object ID" := BimIfcObject.ID;
        Phase := PhaseIfc;
        MODIFY(TRUE);
        InsertObjectProperties("No.", DATABASE::"Plant Object", TmpIfcObjectProperty);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE DetermineSpecsForServiceObjectLevel@1100529012(TableNo@1100529001 : Integer;VAR TmpIfcObjectProperty@1100529000 : TEMPORARY Record 11020579;VAR PhaseIfc@1100528500 : Text[30]);
    VAR
      BaseIfcProperty@1100529003 : Record 11125828;
      TmpProperty@1100529002 : TEMPORARY Record 11020579;
      ServiceObject@1100528501 : Record 11071691;
    BEGIN
      EXIT; //No fields supported yet
      TmpProperty.COPY(TmpIfcObjectProperty, TRUE);
      TmpProperty.RESET;
      TmpProperty.SETRANGE(Bool1, TRUE);  //Bool1 indicator for 'Copy property'
      IF TmpProperty.FINDSET THEN BEGIN
        REPEAT
          IF NOT BaseIfcProperty.GET(TableNo, TmpProperty.Text1) THEN
            BaseIfcProperty.Level := BaseIfcProperty.Level::SpecificationLine;

          IF BaseIfcProperty.Level = BaseIfcProperty.Level::Object THEN BEGIN
            IF NOT SkipPropertyBasedOnCondition(TmpProperty.Text1, TmpIfcObjectProperty, TableNo, BaseIfcProperty."Field No.") THEN BEGIN
              CASE BaseIfcProperty."Field No." OF
                ServiceObject.FIELDNO(Phase):
                  IF STRLEN(TmpProperty.Text2) <= MAXSTRLEN(ServiceObject.Phase) THEN
                    PhaseIfc := TmpProperty.Text2;
              END;
            END;
          END;
        UNTIL TmpProperty.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE DetermineSpecsForProjectObjectLevel@1100529014(TableNo@1100529001 : Integer;VAR TmpIfcObjectProperty@1100529000 : TEMPORARY Record 11020579;VAR ElementIfc@1100529005 : Code[20];VAR ItemNoIfc@1100529006 : Code[20];VAR ManufacturerIfc@1100529010 : Code[20];VAR VendorTradeItemIfc@1100529007 : Code[20];VAR TradeItemIfc@1100529008 : Code[20];VAR GtinItemIfc@1100529009 : Code[20];VAR QuantityIfc@1100528400 : Decimal;VAR Description2Ifc@1100528401 : Text[50];VAR UnitOfMeasure@1100528403 : Code[10];VAR PhaseIfc@1100528500 : Text[30]);
    VAR
      ProjectObject@1100529004 : Record 11229311;
      BaseIfcProperty@1100529003 : Record 11125828;
      TmpProperty@1100529002 : TEMPORARY Record 11020579;
      Quantity@1100528402 : Decimal;
    BEGIN
      TmpProperty.COPY(TmpIfcObjectProperty, TRUE);
      TmpProperty.RESET;
      TmpProperty.SETRANGE(Bool1, TRUE);  //Bool1 indicator for 'Copy property'
      IF TmpProperty.FINDSET THEN BEGIN
        REPEAT
          IF NOT BaseIfcProperty.GET(TableNo, COPYSTR(TmpProperty.Text1, 1, MAXSTRLEN(BaseIfcProperty.Property))) THEN
            BaseIfcProperty.Level := BaseIfcProperty.Level::SpecificationLine;

          IF BaseIfcProperty.Level = BaseIfcProperty.Level::Object THEN BEGIN
            IF NOT SkipPropertyBasedOnCondition(TmpProperty.Text1, TmpIfcObjectProperty, TableNo, BaseIfcProperty."Field No.") THEN BEGIN
              CASE BaseIfcProperty."Field No." OF
                ProjectObject.FIELDNO(Element):
                  IF STRLEN(TmpProperty.Text2) <= MAXSTRLEN(ProjectObject.Element) THEN
                    ElementIfc := TmpProperty.Text2;
                ProjectObject.FIELDNO("Item No."):
                  IF STRLEN(TmpProperty.Text2) <= MAXSTRLEN(ProjectObject."Item No.") THEN
                    ItemNoIfc := TmpProperty.Text2;
                ProjectObject.FIELDNO(Manufacturer):
                  IF STRLEN(TmpProperty.Text2) <= MAXSTRLEN(ProjectObject.Manufacturer) THEN
                    ManufacturerIfc := TmpProperty.Text2;
                ProjectObject.FIELDNO("Vendor (Trade Item)"):
                  IF STRLEN(TmpProperty.Text2) <= MAXSTRLEN(ProjectObject."Vendor (Trade Item)") THEN
                    VendorTradeItemIfc := TmpProperty.Text2;
                ProjectObject.FIELDNO("Trade Item"):
                  IF STRLEN(TmpProperty.Text2) <= MAXSTRLEN(ProjectObject."Trade Item") THEN
                    TradeItemIfc := TmpProperty.Text2;
                ProjectObject.FIELDNO("GTIN Code (Item)"):
                  IF STRLEN(TmpProperty.Text2) <= MAXSTRLEN(ProjectObject."GTIN Code (Item)") THEN
                    GtinItemIfc := TmpProperty.Text2;
                ProjectObject.FIELDNO("Quantity (External)"):  //DP02375 (db, 07-10-19)
                  BEGIN
                    IF EVALUATE(Quantity, TmpProperty.Text2) THEN
                      QuantityIfc := Quantity;
                    UnitOfMeasure := BaseIfcProperty."Unit of Measure";
                  END;
                ProjectObject.FIELDNO("Description 2"):
                  IF STRLEN(TmpProperty.Text2) <= MAXSTRLEN(ProjectObject."Description 2") THEN
                    Description2Ifc := TmpProperty.Text2;
                ProjectObject.FIELDNO(Phase):
                  IF STRLEN(TmpProperty.Text2) <= MAXSTRLEN(ProjectObject.Phase) THEN
                    PhaseIfc := TmpProperty.Text2;
              END;
            END;
          END;
        UNTIL TmpProperty.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE DetermineSpecsForPlantObjectLevel@1100525019(TableNo@1100529001 : Integer;VAR TmpIfcObjectProperty@1100529000 : TEMPORARY Record 11020579;VAR PlantTypeNoIfc@1100529006 : Code[20];VAR QuantityIfc@1100528400 : Decimal;VAR Description2Ifc@1100528401 : Text[50];VAR UnitOfMeasure@1100528403 : Code[10];VAR PhaseIfc@1100528500 : Text[30]);
    VAR
      BaseIfcProperty@1100529003 : Record 11125828;
      TmpProperty@1100529002 : TEMPORARY Record 11020579;
      Quantity@1100528402 : Decimal;
      PlantObject@1100525000 : Record 11125830;
    BEGIN
      TmpProperty.COPY(TmpIfcObjectProperty, TRUE);
      TmpProperty.RESET;
      TmpProperty.SETRANGE(Bool1, TRUE);  //Bool1 indicator for 'Copy property'
      IF TmpProperty.FINDSET THEN BEGIN
        REPEAT

          IF NOT BaseIfcProperty.GET(TableNo, COPYSTR(TmpProperty.Text1, 1, MAXSTRLEN(BaseIfcProperty.Property))) THEN
            BaseIfcProperty.Level := BaseIfcProperty.Level::SpecificationLine;

          IF BaseIfcProperty.Level = BaseIfcProperty.Level::Object THEN BEGIN
            IF NOT SkipPropertyBasedOnCondition(TmpProperty.Text1, TmpIfcObjectProperty, TableNo, BaseIfcProperty."Field No.") THEN BEGIN
              CASE BaseIfcProperty."Field No." OF
                PlantObject.FIELDNO("Plant Type"):
                  IF STRLEN(TmpProperty.Text2) <= MAXSTRLEN(PlantObject."Plant Type") THEN
                    PlantTypeNoIfc := DELCHR(TmpProperty.Text2,'=',' ');
                PlantObject.FIELDNO(Quantity):
                  BEGIN
                    IF EVALUATE(Quantity, TmpProperty.Text2) THEN
                      QuantityIfc := Quantity;
                    UnitOfMeasure := BaseIfcProperty."Unit of Measure";
                  END;
                PlantObject.FIELDNO("Description 2"):
                  IF STRLEN(TmpProperty.Text2) <= MAXSTRLEN(PlantObject."Description 2") THEN
                    Description2Ifc := TmpProperty.Text2;
                PlantObject.FIELDNO(Phase):
                  IF STRLEN(TmpProperty.Text2) <= MAXSTRLEN(PlantObject.Phase) THEN
                    PhaseIfc := TmpProperty.Text2;
              END;
            END;
          END;
        UNTIL TmpProperty.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FillItemFields@1100529013(ProjectNo@1100529009 : Code[20];VAR ItemNoIfc@1100529000 : Code[20];VAR ManufacturerIfc@1100529005 : Code[20];VAR VendorTradeItemIfc@1100529003 : Code[20];VAR TradeItemNoIfc@1100529002 : Code[20];GtinItemIfc@1100529001 : Code[20]);
    VAR
      Proj@1100529010 : Record 11072003;
      TradeItem@1100529006 : Record 11012317;
      Vendor@1100529012 : Record 23;
      TradeItemFound@1100529008 : Boolean;
      VendorTradeItemProj@1100529011 : Code[20];
    BEGIN
      //First step/try to determine item fields from a IFC-file. Done for sitiation with GTIN-item and sometimes also GLN-vender.
      //In future there can/will be more situations (that can even conflict with each other).
      IF VendorTradeItemIfc = '' THEN BEGIN
        IF Proj.GET(ProjectNo) THEN BEGIN
          IF Proj."Project Supplier" <> '' THEN BEGIN
            IF Vendor.GET(Proj."Project Supplier") THEN
              VendorTradeItemProj := Vendor."Vendor (Trade Item)";
          END;
        END;
      END;

      IF TradeItemNoIfc <> '' THEN BEGIN
        IF (VendorTradeItemIfc = '') AND (VendorTradeItemProj <> '') THEN BEGIN
          IF TradeItem.GET(VendorTradeItemProj, TradeItemNoIfc) THEN
            VendorTradeItemIfc := TradeItem.Vendor;
        END;
        EXIT;
      END;

      IF (NOT TradeItemFound) AND (GtinItemIfc <> '') AND (ItemNoIfc = '') THEN BEGIN
        TradeItem.RESET;
        TradeItem.SETCURRENTKEY("GTIN Code (Item)");
        TradeItem.SETRANGE("GTIN Code (Item)", GtinItemIfc);
        IF VendorTradeItemIfc <> '' THEN
          TradeItem.SETRANGE(Vendor, VendorTradeItemIfc);
        IF ManufacturerIfc <> '' THEN
          TradeItem.SETRANGE(Manufacturer, ManufacturerIfc);
        IF TradeItem.FINDFIRST THEN BEGIN
          IF VendorTradeItemIfc <> '' THEN
            TradeItemFound := TRUE
          ELSE BEGIN
            IF TradeItem.NEXT = 0 THEN
              TradeItemFound := TRUE
            ELSE BEGIN
              IF VendorTradeItemProj <> '' THEN BEGIN
                TradeItem.SETRANGE(Vendor, VendorTradeItemProj);
                IF TradeItem.FINDFIRST THEN
                  TradeItemFound := (TradeItem.NEXT = 0);
              END;
            END;
          END;
        END;
      END;
      IF TradeItemFound THEN BEGIN
        VendorTradeItemIfc := TradeItem.Vendor;
        TradeItemNoIfc := TradeItem."Item Code";
      END;
    END;

    LOCAL PROCEDURE InsertObjectProperties@1100529008(ObjectNo@1100529001 : Code[20];TableNo@1100529002 : Integer;VAR TmpIfcObjectProperty@1100529000 : TEMPORARY Record 11020579);
    VAR
      ServiceObjectProperty@1100529004 : Record 11072287;
      ProjectObjectProperty@1100529005 : Record 11229314;
      BaseIfcProperty@1100529007 : Record 11125828;
      TmpProperty@1100529003 : TEMPORARY Record 11020579;
      PlantObjectProperty@1100525000 : Record 11125831;
    BEGIN
      TmpProperty.COPY(TmpIfcObjectProperty, TRUE);
      TmpProperty.RESET;
      TmpProperty.SETRANGE(Bool1, TRUE);  //Bool1 indicator for 'Copy property'
      IF TmpProperty.FINDSET THEN BEGIN
        REPEAT
          IF NOT BaseIfcProperty.GET(TableNo, COPYSTR(TmpProperty.Text1, 1, MAXSTRLEN(BaseIfcProperty.Property))) THEN
            BaseIfcProperty.Level := BaseIfcProperty.Level::SpecificationLine;
          IF BaseIfcProperty.Level = BaseIfcProperty.Level::SpecificationLine THEN BEGIN
            InsertStandardIfcProperty(TmpProperty.Text1);
            CASE TableNo OF
              DATABASE::"Service-Object":
                BEGIN
                  TmpProperty.Text1 := COPYSTR(TmpProperty.Text1, 1, MAXSTRLEN(ServiceObjectProperty.Property));
                  TmpProperty.Text2 := COPYSTR(TmpProperty.Text2, 1, MAXSTRLEN(ServiceObjectProperty.Value));
                  IF NOT ServiceObjectProperty.GET(ObjectNo, TmpProperty.Text1) THEN BEGIN
                    ServiceObjectProperty.INIT;
                    ServiceObjectProperty."Service Object No." := ObjectNo;
                    ServiceObjectProperty.Property := TmpProperty.Text1;
                    ServiceObjectProperty.Value := TmpProperty.Text2;
                    ServiceObjectProperty."Unit of Measure" := BaseIfcProperty."Unit of Measure";
                    ServiceObjectProperty.INSERT;
                  END ELSE BEGIN
                    ServiceObjectProperty.Value := TmpProperty.Text2;
                    ServiceObjectProperty."Unit of Measure" := BaseIfcProperty."Unit of Measure";
                    ServiceObjectProperty.MODIFY;
                  END;
                END;
              DATABASE::"Project Object":
                BEGIN
                  TmpProperty.Text1 := COPYSTR(TmpProperty.Text1, 1, MAXSTRLEN(ProjectObjectProperty.Property));
                  TmpProperty.Text2 := COPYSTR(TmpProperty.Text2, 1, MAXSTRLEN(ProjectObjectProperty.Value));
                  IF NOT ProjectObjectProperty.GET(ObjectNo, TmpProperty.Text1) THEN BEGIN
                    ProjectObjectProperty.INIT;
                    ProjectObjectProperty."Project Object No." := ObjectNo;
                    ProjectObjectProperty.Property := COPYSTR(TmpProperty.Text1, 1, MAXSTRLEN(ProjectObjectProperty.Property));
                    ProjectObjectProperty.Value := COPYSTR(TmpProperty.Text2, 1, MAXSTRLEN(ProjectObjectProperty.Value));
                    ProjectObjectProperty."Unit of Measure" := BaseIfcProperty."Unit of Measure";
                    ProjectObjectProperty.INSERT;
                  END ELSE BEGIN
                    ProjectObjectProperty.Value := TmpProperty.Text2;
                    ProjectObjectProperty."Unit of Measure" := BaseIfcProperty."Unit of Measure";
                    ProjectObjectProperty.MODIFY;
                  END;
                END;
              DATABASE::"Plant Object":
                BEGIN
                  TmpProperty.Text1 := COPYSTR(TmpProperty.Text1, 1, MAXSTRLEN(PlantObjectProperty.Property));
                  TmpProperty.Text2 := COPYSTR(TmpProperty.Text2, 1, MAXSTRLEN(PlantObjectProperty.Value));
                  IF NOT PlantObjectProperty.GET(ObjectNo, TmpProperty.Text1) THEN BEGIN
                    PlantObjectProperty.INIT;
                    PlantObjectProperty."Plant Object No." := ObjectNo;
                    PlantObjectProperty.Property := COPYSTR(TmpProperty.Text1, 1, MAXSTRLEN(PlantObjectProperty.Property));
                    PlantObjectProperty.Value := COPYSTR(TmpProperty.Text2, 1, MAXSTRLEN(PlantObjectProperty.Value));
                    PlantObjectProperty."Unit of Measure" := BaseIfcProperty."Unit of Measure";
                    PlantObjectProperty.INSERT;
                  END ELSE BEGIN
                    PlantObjectProperty.Value := TmpProperty.Text2;
                    PlantObjectProperty."Unit of Measure" := BaseIfcProperty."Unit of Measure";
                    PlantObjectProperty.MODIFY;
                  END;
                END;
            END;
          END;
        UNTIL TmpProperty.NEXT = 0;
      END;
    END;

    PROCEDURE InsertStandardIfcProperty@1100529011(IfcProperty@1100529000 : Text);
    VAR
      StandardIfcProperty@1100529001 : Record 11125829;
    BEGIN
      IfcProperty := COPYSTR(IfcProperty, 1, MAXSTRLEN(StandardIfcProperty.Property));
      IF NOT StandardIfcProperty.GET(IfcProperty) THEN BEGIN
        StandardIfcProperty.INIT;
        StandardIfcProperty.VALIDATE(Property, IfcProperty);
        StandardIfcProperty.INSERT;
      END;
    END;

    PROCEDURE BuildTmpTableIfcObjectProperties@1100529007(VAR IfcObject@1100525004 : DotNet "'Fps.Nav.Windows.Addin.Bim.Interface, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Windows.Addin.Bim.Interface.Model.IIfcObject" RUNONCLIENT;VAR TmpIfcObjectProperty@1100525005 : TEMPORARY Record 11020579;TableNo@1100529001 : Integer);
    VAR
      BaseIfcProperty@1100529002 : Record 11125828;
      InfoArray@1100529000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array" RUNONCLIENT;
      ArrayNo@1100525000 : Integer;
    BEGIN
      WITH TmpIfcObjectProperty DO BEGIN  //Table must be Temporary in the calling process!
        RESET;
        DELETEALL;
        IF IfcObject.Guid = '' THEN
          EXIT;
        InfoArray := IfcObject.GetPropertyNames();
        FOR ArrayNo := 0 TO InfoArray.Length - 1 DO BEGIN
          INIT;
          "Key Code1" := FORMAT(ArrayNo+1);
          IF STRLEN("Key Code1") < 10 THEN
            "Key Code1" := COPYSTR('0000000000', 1, 10-STRLEN("Key Code1")) + "Key Code1";
          Text1 := InfoArray.GetValue(ArrayNo);
          IF Text1 <> '' THEN BEGIN
            Text2 := IfcObject.GetPropertyValue(Text1, 100);
            IF TableNo <> 0 THEN BEGIN
              IF BaseIfcProperty.GET(TableNo, COPYSTR(Text1, 1, MAXSTRLEN(BaseIfcProperty.Property))) THEN
                Bool1 := TRUE;  // Bool1 is 'Copy property'
            END;
            INSERT;
          END;
        END;
        IF NOT FINDFIRST THEN
          INIT;
      END;
    END;

    PROCEDURE CreateObjectPictures@1100529400(VAR BimAddInControl@1100529407 : DotNet "'Fps.Nav.Windows.Addin.Bim.Interface, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Windows.Addin.Bim.Interface.UI.IBimControl" RUNONCLIENT;IfcGuid@1100529408 : Text;RecRef@1100529411 : RecordRef;Positions@1100529406 : Code[10]);
    VAR
      OperatingSystemMgt@1100529409 : Codeunit 11012364;
      ViewPositionsEnum@1100529401 : DotNet "'Fps.Nav.Windows.Addin.Bim.Interface, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Windows.Addin.Bim.Interface.UI.ModelViewPosition" RUNONCLIENT;
      ImageViewPositions@1100529400 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1" RUNONCLIENT;
      Images@1100529402 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1" RUNONCLIENT;
      Image@1100529404 : DotNet "'Fps.Nav.Windows.Addin.Bim.Interface, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Windows.Addin.Bim.Interface.UI.IEntityImage" RUNONCLIENT;
      ArrayNo@1100529403 : Integer;
      PathTmpFiles@1100529410 : Text;
      FileName@1100529405 : Text;
    BEGIN
      IF STRPOS(COPYSTR(Positions,1,6), '1') = 0 THEN
        EXIT;
      ImageViewPositions := ImageViewPositions.List;
      IF COPYSTR(Positions,1,1) = '1' THEN
        ImageViewPositions.Add(ViewPositionsEnum.Top);
      IF COPYSTR(Positions,2,1) = '1' THEN
        ImageViewPositions.Add(ViewPositionsEnum.Bottom);
      IF COPYSTR(Positions,3,1) = '1' THEN
        ImageViewPositions.Add(ViewPositionsEnum.Front);
      IF COPYSTR(Positions,4,1) = '1' THEN
        ImageViewPositions.Add(ViewPositionsEnum.Rear);
      IF COPYSTR(Positions,5,1) = '1' THEN
        ImageViewPositions.Add(ViewPositionsEnum.Left);
      IF COPYSTR(Positions,6,1) = '1' THEN
        ImageViewPositions.Add(ViewPositionsEnum.Right);

      PathTmpFiles := OperatingSystemMgt.ClientEnviron('TEMP');
      Images := BimAddInControl.GetImagesFromEntity(IfcGuid, ImageViewPositions);
      FOR ArrayNo := 0 TO Images.Count - 1 DO BEGIN
        Image := Images.Item(ArrayNo);
        FileName := Image.SaveAsPng(PathTmpFiles, ''); //ReturnValue: Directory+FileName, if empty then not created
        IF FileName <> '' THEN
          RegisterPictureFile(RecRef, FileName, IfcGuid, GetViewPositionCaption(FORMAT(Image.ModelViewPosition)));
      END;
    END;

    PROCEDURE CreateModelPicture@1100529401(VAR BimAddInControl@1100529407 : DotNet "'Fps.Nav.Windows.Addin.Bim.Interface, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Windows.Addin.Bim.Interface.UI.IBimControl" RUNONCLIENT;RecRef@1100529411 : RecordRef) : Boolean;
    VAR
      OperatingSystemMgt@1100529400 : Codeunit 11012364;
      Image@1100529404 : DotNet "'Fps.Nav.Windows.Addin.Bim.Interface, Version=1.0.0.0, Culture=neutral, PublicKeyToken=024bd013665211e9'.Fps.Nav.Windows.Addin.Bim.Interface.UI.IIfcImage" RUNONCLIENT;
      PathTmpFiles@1100529410 : Text;
      FileName@1100529405 : Text;
    BEGIN
      PathTmpFiles := OperatingSystemMgt.ClientEnviron('TEMP');
      Image := BimAddInControl.GetImageFromModel();
      FileName := Image.SaveAsPng(PathTmpFiles, ''); //ReturnValue: Directory+FileName, if empty then not created
      IF FileName <> '' THEN
        RegisterPictureFile(RecRef, FileName, '', '');
      EXIT(FileName <> '');
    END;

    LOCAL PROCEDURE RegisterPictureFile@1100529404(RecRef@1100529400 : RecordRef;PictureFileName@1100529401 : Text;IfcGuid@1100529413 : Text;ViewPositionCaption@1100529414 : Text);
    VAR
      BimSetup@1100529405 : Record 11125822;
      DocumentType@1100529407 : Record 11012405;
      DocumentProperties@1100529402 : Record 11012746;
      DocLinkRID@1100529404 : ARRAY [5] OF RecordID;
      DocumentLinkMgt@1100529403 : Codeunit 11012401;
      FileMgt@1100529410 : Codeunit 419;
      ExternalDocumentMgt@1100529409 : Codeunit 11012403;
      DocumentManagement@1100527800 : Codeunit 11012406;
      TargetFolderURI@1100528702 : Text;
      TargetFileURI@1100528701 : Text;
      DummyDirectory@1100529417 : Text;
      IfcFileName@1100529416 : Text;
      TargetStorageType@1100527801 : Option;
      ErrorMessage@1100527802 : Text;
    BEGIN
      BimSetup.GET;
      BimSetup.TESTFIELD("Document Type Picture");
      DocumentType.GET(BimSetup."Document Type Picture");

      WITH DocumentProperties DO BEGIN
        INIT;
        "No." := '';
        "External Document" := TRUE;
        VALIDATE("Document Type", BimSetup."Document Type Picture");
        "Document Date" := TODAY;
        CASE RecRef.NUMBER OF
          DATABASE::"Service-Object":
            BEGIN
              Description := COPYSTR(FORMAT(RecRef.FIELD(70)), 1, MAXSTRLEN(Description));
              Subject := Text004 + ' ' + ViewPositionCaption + ' ' + RecRef.CAPTION + ' ' + FORMAT(RecRef.FIELD(10));
              Reference := IfcGuid;
            END;
          DATABASE::"Project Object":
            BEGIN
              Description := COPYSTR(FORMAT(RecRef.FIELD(50)), 1, MAXSTRLEN(Description));
              Subject := Text004 + ' ' + ViewPositionCaption + ' ' + RecRef.CAPTION + ' ' + FORMAT(RecRef.FIELD(10));
              Reference := IfcGuid;
            END;
          DATABASE::"Plant Object":
            BEGIN
              Description := COPYSTR(FORMAT(RecRef.FIELD(50)), 1, MAXSTRLEN(Description));
              Subject := Text004 + ' ' + ViewPositionCaption + ' ' + RecRef.CAPTION + ' ' + FORMAT(RecRef.FIELD(10));
              Reference := IfcGuid;
            END;
          DATABASE::"BIM Model":
            BEGIN
              Description := COPYSTR(FORMAT(RecRef.FIELD(20)), 1, MAXSTRLEN(Description));
              Subject := Text005 + ' ' + RecRef.CAPTION + ' ' + FORMAT(RecRef.FIELD(10));
            END;
          DATABASE::"BIM Model IFC File":
            BEGIN
              FileMgt.SplitFileAbsPathName(FORMAT(RecRef.FIELD(30)), DummyDirectory, IfcFileName);
              Description := COPYSTR(FORMAT(RecRef.FIELD(90)), 1, MAXSTRLEN(Description));
              Subject := COPYSTR((Text005 + ' ' + RecRef.CAPTION + ' ' + IfcFileName), 1, MAXSTRLEN(Subject));
            END;
        END;
        DocumentProperties."Available for Field Service" := TRUE;
        Status := Status::Definite;
        INSERT(TRUE);
      END;

      DocLinkRID[1] := RecRef.RECORDID;
      DocumentLinkMgt.CreateDocumentLink(DocumentProperties, DocLinkRID);
      DocumentManagement.GetStorageLocation(
        DocumentProperties."Document Group", DocumentProperties."Document Template", DocumentProperties."Contact No.",
        DocumentProperties."Document Type", DocumentProperties."Creation Date", TargetFolderURI, TargetStorageType);
      DocumentManagement.CreateStorageLocationIfNotExists(TargetStorageType, TargetFolderURI);
      TargetFileURI := TargetFolderURI + FileMgt.GetFileName(PictureFileName);
      DocumentManagement.GetUniqueFileNameForStorageType(TargetStorageType,TargetFileURI);

      DocumentManagement.CopyStorageContent(DocumentProperties."Storage Type"::"File System on Premise",TargetStorageType,PictureFileName,TargetFileURI,ErrorMessage);
      DocumentProperties.ValidateStorageURI(TargetStorageType,TargetFileURI);
      DocumentProperties.MODIFY(FALSE);
    END;

    PROCEDURE GetViewPositionCaption@1100529402(EnumValue@1100529400 : Code[10]) : Text;
    VAR
      PositionTopCaption@1100529406 : TextConst 'DEU=Oben;ENU=Top;NLD=Boven';
      PositionBottomCaption@1100529405 : TextConst 'DEU=Unten;ENU=Bottom;NLD=Onder';
      PositionFrontCaption@1100529404 : TextConst 'DEU=Vorne;ENU=Front;NLD=Voor';
      PositionRearCaption@1100529403 : TextConst 'DEU=Hinten;ENU=Rear;NLD=Achter';
      PositionLeftCaption@1100529402 : TextConst 'DEU=Links;ENU=Left;NLD=Links';
      PositionRightCaption@1100529401 : TextConst 'DEU=Rechts;ENU=Right;NLD=Rechts';
    BEGIN
      CASE EnumValue OF
        '1','TOP': EXIT(PositionTopCaption);
        '2','BOTTOM': EXIT(PositionBottomCaption);
        '3','FRONT': EXIT(PositionFrontCaption);
        '4','REAR': EXIT(PositionRearCaption);
        '5','LEFT': EXIT(PositionLeftCaption);
        '6','RIGHT': EXIT(PositionRightCaption);
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE SkipPropertyBasedOnCondition@1100528004(PropertyName@1100528005 : Text;VAR TmpIfcObjectProperty@1100528000 : TEMPORARY Record 11020579;TableNo@1100528001 : Integer;FieldNo@1100528002 : Integer) : Boolean;
    VAR
      BaseIfcProperty@1100528003 : Record 11125828;
      ConditionMatches@1100528004 : Boolean;
    BEGIN
      BaseIfcProperty.SETRANGE("Table No.", TableNo);
      BaseIfcProperty.SETRANGE("Field No.", FieldNo);
      BaseIfcProperty.FINDSET;

      ConditionMatches := FALSE;

      REPEAT // check first if the Condition matches
        IF (BaseIfcProperty.Condition <> '') THEN BEGIN
          TmpIfcObjectProperty.RESET;
          TmpIfcObjectProperty.SETRANGE(Text1, BaseIfcProperty.Condition);
          IF TmpIfcObjectProperty.FINDFIRST AND (TmpIfcObjectProperty.Text2 = BaseIfcProperty."Condition Value") THEN BEGIN
            ConditionMatches := TRUE;
            BREAK;
            END;
        END;
      UNTIL BaseIfcProperty.NEXT = 0;

      IF NOT ConditionMatches THEN BEGIN // if the Condition doesn't match then revert back to the default field
        BaseIfcProperty.RESET;
        BaseIfcProperty.SETRANGE("Table No.", TableNo);
        BaseIfcProperty.SETRANGE("Field No.", FieldNo);
        BaseIfcProperty.SETRANGE(Condition, '');
        IF NOT BaseIfcProperty.FINDFIRST THEN
          EXIT(TRUE);
      END;

      EXIT (PropertyName <> BaseIfcProperty.Property);
    END;

    PROCEDURE LookupBimModelLinkedPlantLocations@1100525008(BimModelNo@1100525002 : Code[20];VAR PlantLocationNo@1100525003 : Code[20];PlantLocationNoEditable@1100525004 : Boolean);
    VAR
      BimModelLink@1100525000 : Record 11125824;
      PlantLocation@1100525001 : Record 11012554;
    BEGIN
      BimModelLink.FILTERGROUP(9);
      SetFilterOnBimModelLinkType(BimModelNo, BimModelLink.Type::PlantLocation, BimModelLink);
      BimModelLink.FILTERGROUP(0);
      IF BimModelLink.FINDSET THEN BEGIN
        REPEAT
          IF PlantLocation.GET(BimModelLink."No.") THEN
            PlantLocation.MARK(TRUE);
        UNTIL BimModelLink.NEXT = 0;
        PlantLocation.MARKEDONLY(TRUE);
        PlantLocation.Code := PlantLocationNo;
        IF NOT PlantLocationNoEditable THEN
          PAGE.RUNMODAL(0, PlantLocation)
        ELSE BEGIN
          IF PAGE.RUNMODAL(0, PlantLocation) = ACTION::LookupOK THEN BEGIN
            IF PlantLocation.Code <> '' THEN BEGIN
              IF BimModelLink.GET(BimModelNo, BimModelLink.Type::PlantLocation, PlantLocation.Code) THEN
                PlantLocationNo := PlantLocation.Code;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE LinkPlantObjectToCurrIfcObject@1100528501(VAR PlantObject@1100528500 : Record 11125830;BimModelNo@1100528501 : Code[20];IfcGuid@1100528502 : Text);
    VAR
      PlantObject2@1100528503 : Record 11125830;
    BEGIN
      PlantObject.TESTFIELD("No.");
      PlantObject.TESTFIELD("IFC Object ID", '');
      IF IfcObjectPlantObject(BimModelNo, IfcGuid, PlantObject2) THEN
        ERROR(Text003, IfcGuid,
          PlantObject.TABLECAPTION, PlantObject2."No.",
          PlantObject.FIELDCAPTION("No."), PlantObject2."No.");

      PlantObject."BIM Model No." := BimModelNo;
      PlantObject."IFC Object ID" := IfcGuid;
      PlantObject.MODIFY;
    END;

    BEGIN
    END.
  }
}

