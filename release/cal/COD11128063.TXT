OBJECT Codeunit 11128063 VP File PG Sweden
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=PE8.03 (12048860);
  }
  PROPERTIES
  {
    TableNo=11128079;
    OnRun=VAR
            GiroType@1100570003 : Record 11128061;
          BEGIN
            CLEAR(gTotalAmountLCY);
            CLEAR(gNoOfPayments);

            GiroType.GET(Rec."Giro Type Code");
            GiroType.TESTFIELD(Filename);
            gToFile := GiroType.Filename;
            GiroType.TESTFIELD("Plus Giro Customer No.");
            GiroType.TESTFIELD("Plus Giro No.");

            gPostGiroNo := gVPMnm.ClearText(GiroType."Plus Giro No.");
            gPostGiroCustNo := GiroType."Plus Giro Customer No.";

            IF NOT gVPMnm.SumCheck10Control(gPostGiroNo) THEN
              ERROR(STRSUBSTNO(PEB004, GiroType.FIELDCAPTION("Plus Giro No."),GiroType.TABLECAPTION));

            OpenFile;

            gVPMnm.SetGiroType(GiroType);

            // Check LCY Code SEK or EUR
            gVPMnm.CheckSEKEURCurrency(Rec,'<>SEK&<>EUR');

            // Get all invoices for Currency SEK
            CreateFilePGSweden(Rec,'SEK');

            // Get all invoices for Currency EUR
            CreateFilePGSweden(Rec,'EUR');

            CloseFile(Rec);
          END;

  }
  CODE
  {
    VAR
      gFile@1100570021 : File;
      gVPMnm@1100570002 : Codeunit 11128061;
      PEB001@1100570014 : TextConst 'ENU=Only 9 files per day can be sent to PG;NOR=Det g†r kun † sende 9 filer per dag til PG.;SVE=Det g†r endast att skicka 9 filer per dag till PG.';
      PEB002@1100570020 : TextConst 'ENU=The length for %1 is %2 long, %3 characters are maximum;NOR=Lengden p† %1 er %2 tegn. Maksimumslengden er %3 tegn;SVE=L„ngden p† %1 „r %2 tecken. Maximil„ngden „r %3 tecken';
      PEB003@1100570010 : TextConst 'ENU=%1 is not correct for Vendor %2 %3.;NOR=%1 er feilaktig for leverand›ren %2 %3.;SVE=%1 „r felaktigt f”r leverant”ren %2 %3.';
      PEB004@1100570017 : TextConst 'ENU=%1 is not correct in %2.;NOR=%1 er feilaktig i %2.;SVE=%1 „r felaktigt i %2.';
      PEB005@1100570007 : TextConst 'ENU=For payment in EUR use Plus Giro No. not blank for Vendor %1;NOR=Plusgironummeret ved betaling i EUR kan ikke v‘re tomt for leverand›ren %1;SVE=Plusgironumret vid betalning i EUR f†r inte vara tomt f”r leverant”ren %1';
      PEB006@1100570013 : TextConst 'ENU=%1 too long for vendor %2 %3, max 16 char.;NOR=%1 tegn for langt for leverand›ren %2 %3. Maksimal lengde er 16 tegn.;SVE=%1 tecken f”r l†ngt f”r leverant”ren %2 %3. Maximil„ngden „r 16 tecken.';
      PEB007@1100570012 : TextConst 'ENU=When %1 is used, it is not possible to make a Credit Memo, the problem is with Vendor %2 %3 and Document No. %4;NOR=N†r %1 er i bruk er det ikke mulig † opprette en kreditnota. Det er problem med leverand›ren %2 %3 og Dokumentnummer %4;SVE=N„r %1 anv„nds g†r det inte att skapa en kreditnota. Det „r problem med leverant”ren %2 %3 och dokumentnumret %4';
      gTotalAmountLCY@1100570000 : Decimal;
      gFromFile@1100570004 : Text;
      gToFile@1100570006 : Text;
      gPostGiroNo@1100570016 : Code[20];
      gPostGiroCustNo@1100570003 : Code[20];
      gNoOfPayments@12047958 : Integer;
      PEB008@12047959 : TextConst 'ENU=All payments are not included in the file, check the currency;SVE=Alla betalningar kom inte med i filen, kontrollera valutorna';

    PROCEDURE CreateFilePGSweden@1070008(pPack@1070000 : Record 11128079;pCurrencyCode@1070007 : Code[10]);
    VAR
      VendLedgerEntry@1070001 : Record 25;
      PmtType@1070002 : Text[1];
      VendNo@1070003 : Code[20];
      PayByAccountNo@1070004 : Code[20];
      DueDate@1070005 : Date;
      CreditMemoDueDate@1070006 : Date;
      TotalAmount@1100570000 : Decimal;
      NoOfLines@1100570001 : Integer;
      InitialLineExist@1100570002 : Boolean;
      CompanyInfo@1100570005 : Record 79;
      Vendor@1100570006 : Record 23;
      Currency@1100570007 : Record 4;
      VPSetup@1100570010 : Record 11128066;
      VPPackEntry@1100570009 : Record 11128063;
      VendorBankAccount@1100570008 : Record 288;
      AmountToPay@1100570012 : Decimal;
      AmountToPayLCY@1100570013 : Decimal;
      Pack2@1100570015 : Record 11128079;
    BEGIN
      IF pPack."No. per Date" = 0 THEN BEGIN
        Pack2.RESET;
        Pack2.SETRANGE("Plus Giro",TRUE);
        Pack2.SETRANGE(Date,TODAY);
        IF pPack."No. per Date" > 9 THEN
          ERROR(PEB001);
        pPack."No. per Date" := Pack2.COUNT + 1;
        pPack."Plus Giro" := TRUE;
        pPack.MODIFY;
      END;
      CompanyInfo.GET;
      CompanyInfo.TESTFIELD(Name);
      CompanyInfo.TESTFIELD("Phone No.");

      VPSetup.GET;

      WITH VendLedgerEntry DO BEGIN
        VPPackEntry.RESET;
        VPPackEntry.SETRANGE("Pack Entry No.",pPack."Entry No.");
        VPPackEntry.SETRANGE("Payment to Currency Code",pCurrencyCode);
        IF NOT VPPackEntry.FINDSET THEN
          EXIT;

        CLEAR(TotalAmount);
        CLEAR(NoOfLines);

        IF NOT InitialLineExist THEN BEGIN
          WriteFile(100,'0' +
            gVPMnm.TFR(gPostGiroCustNo,5) +
            gVPMnm.Date2Text(TODAY,6) +
            gVPMnm.Value1(pPack."No. per Date",1));
          InitialLineExist := TRUE;
        END;

        WriteFile(100,'2'+
          gVPMnm.TFR(gPostGiroCustNo,5)+
          gVPMnm.TFL(gPostGiroNo,10)+
          gVPMnm.BLK(2)+
          gVPMnm.TFR(CompanyInfo.Name,27)+
          gVPMnm.TFR(CompanyInfo."Phone No.",27)+
          gVPMnm.TFR(pCurrencyCode,3)+
          gVPMnm.TFR(pCurrencyCode,3));

        REPEAT
          gVPMnm.CheckCustomerPaymentAllowed(pPack,VPPackEntry);
          gNoOfPayments += 1;
          GET(VPPackEntry."Ledger Entry No.");  // Get Vendor Leadger Entry
          TESTFIELD(Open,TRUE);
          VendorBankAccount.GET(VPPackEntry."No.",VPPackEntry."Bank Account Code");

          CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
          Vendor.GET("Vendor No.");

          Currency.RESET;
          IF Currency.FIND('-') THEN BEGIN
            IF gVPMnm.IsEURCurr("Currency Code") THEN
              IF VendorBankAccount."Plus Giro No." = '' THEN
                ERROR(PEB005,"Vendor No.");
          END ELSE
            TESTFIELD("Currency Code",'');
          CLEAR(Currency);

          PmtType := '3';
          IF VendorBankAccount."Plus Giro No." <> '' THEN BEGIN
            VendNo := gVPMnm.ClearText(VendorBankAccount."Plus Giro No.");
            IF VendNo = '' THEN
              ERROR(PEB003,VendorBankAccount.FIELDCAPTION("Plus Giro No."),Vendor."No.", Vendor.Name);
            IF NOT gVPMnm.SumCheck10Control(VendNo) THEN
              ERROR(PEB003,VendorBankAccount.FIELDCAPTION("Plus Giro No."),Vendor."No.", Vendor.Name);
          END ELSE BEGIN
            VendNo := gVPMnm.GetVendGiroNo(Vendor,Currency);
            IF (VendorBankAccount."Bank Giro No." = '') AND
               (VendorBankAccount."Bank Account No." = '') THEN BEGIN
              PmtType := '5';
              WriteFile(100,'3'+
                gVPMnm.TFR(PmtType,1)+
                gVPMnm.BLK(5)+
                gVPMnm.TFL(VendNo,10)+
                gVPMnm.TFR(gVPMnm.ClearText(Vendor."Post Code"),5)+
                gVPMnm.TFR(Vendor.Name,33)+
                gVPMnm.TFR(gVPMnm.FillField(Vendor."Address 2",Vendor.Address),27)+
                gVPMnm.TFR(Vendor.City,13));
            END ELSE BEGIN
              IF VendorBankAccount."Bank Giro No." <> '' THEN BEGIN
                PayByAccountNo := gVPMnm.ClearText(VendorBankAccount."Bank Giro No.");
                IF NOT gVPMnm.SumCheck10Control(PayByAccountNo) THEN
                  ERROR(PEB003,Vendor."No.", Vendor.Name);
              END ELSE BEGIN
                PayByAccountNo := gVPMnm.ClearText(VendorBankAccount."Bank Account No.");
                IF "Remaining Amount" > 0 THEN
                  ERROR(PEB007,VendorBankAccount.FIELDCAPTION("Bank Account No."),Vendor."No.",Vendor.Name,"Document No.");
                IF STRLEN(PayByAccountNo) > 16 THEN
                  ERROR(PEB006,VendorBankAccount.FIELDCAPTION("Bank Account No."),Vendor."No.",Vendor.Name);
              END;
              PmtType := '4';
              WriteFile(100,'3'+
                gVPMnm.TFR(PmtType,1)+
                gVPMnm.BLK(5)+
                gVPMnm.TFL(VendNo,10)+
                gVPMnm.BLK(5)+
                gVPMnm.TFR(Vendor.Name,33)+
                gVPMnm.TFL(PayByAccountNo,16));
            END;
          END;

          IF "Due Date" < TODAY THEN BEGIN
            DueDate := TODAY;
            "Due Date" := TODAY;
          END ELSE
            DueDate := "Due Date";

          AmountToPay := gVPMnm.CalcVendAmountToPay(VendLedgerEntry);
          AmountToPayLCY := gVPMnm.CalcVendAmountToPayLCY(VendLedgerEntry);

          TotalAmount := TotalAmount + AmountToPay;
          gTotalAmountLCY += AmountToPayLCY;
          NoOfLines := NoOfLines + 1;

          IF "Remaining Amount" < 0  THEN // Invoice
            WriteFile(100,'5'+
              gVPMnm.TFR(PmtType,1)+
              gVPMnm.BLK(1)+
              gVPMnm.TFR(pCurrencyCode,3)+
              gVPMnm.BLK(1)+
              gVPMnm.TFL(VendNo,10)+
              gVPMnm.TFR("External Document No.",27)+
              gVPMnm.NFL(gVPMnm.Value100(AmountToPay,11),11)+
              gVPMnm.Date2Text(DueDate,6)+
              gVPMnm.TFR('Vernr: '+"Document No.",30))
          ELSE BEGIN                      // Credit Memo
            CreditMemoDueDate := DueDate;
            DueDate := TODAY;
            WriteFile(100,'6'+
              gVPMnm.TFR(PmtType,1)+
              gVPMnm.BLK(1)+
              gVPMnm.TFR(pCurrencyCode,3)+
              gVPMnm.BLK(1)+
              gVPMnm.TFL(VendNo,10)+
              gVPMnm.TFR("External Document No.",27)+
              gVPMnm.NFL(gVPMnm.Value100(AmountToPay,11),11)+
              gVPMnm.Date2Text(DueDate,6)+
              gVPMnm.Date2Text(CreditMemoDueDate,6)+
              gVPMnm.TFR('Vernr: '+"Document No.",30));
          END;
        UNTIL VPPackEntry.NEXT = 0;

        WriteFile(100,'7'+
          gVPMnm.TFR(gPostGiroCustNo,5)+
          gVPMnm.TFL(gPostGiroNo,10)+
          gVPMnm.BLK(2)+
          gVPMnm.NFL(gVPMnm.Value100(TotalAmount,12) + gVPMnm.NegativeSign(-TotalAmount),13)+
          gVPMnm.BLK(32)+
          gVPMnm.TFR(pCurrencyCode,3)+
          gVPMnm.TFR(pCurrencyCode,3));
      END;
    END;

    PROCEDURE WriteFile@1070040(pLength@1070000 : Integer;pText@1070001 : Text[250]);
    BEGIN
      IF STRLEN(pText) > pLength THEN
        ERROR(PEB002,pText,STRLEN(pText),pLength);
      gFile.WRITE(PADSTR(pText,pLength));
    END;

    PROCEDURE OpenFile@1070005();
    VAR
      FileMgt@1100570001 : Codeunit 419;
    BEGIN
      gFile.TEXTMODE(TRUE);
      gFile.WRITEMODE(TRUE);
      gFromFile := FileMgt.ServerTempFileName('.txt');
      gFile.CREATE(gFromFile);
    END;

    PROCEDURE CloseFile@1070009(pPack@1070000 : Record 11128079);
    VAR
      FileMgt@1100570000 : Codeunit 419;
      VPPackEntry@12047958 : Record 11128063;
      Handled@12047960 : Boolean;
    BEGIN
      VPPackEntry.RESET;
      VPPackEntry.SETRANGE("Pack Entry No.",pPack."Entry No.");
      IF VPPackEntry.COUNT <> gNoOfPayments THEN
        ERROR(PEB008);

      pPack.LOCKTABLE;
      pPack.FIND;
      pPack."Total Amount (LCY)" := -gTotalAmountLCY;
      pPack.MODIFY;
      gFile.CLOSE;

      OnBeforeSaveFile(pPack,gFromFile,Handled);

      IF NOT Handled THEN BEGIN
        IF NOT FileMgt.CanRunDotNetOnClient THEN
          FileMgt.DownloadHandler(gFromFile,'','','',gVPMnm.SetFileName(pPack,gToFile))
        ELSE
          FileMgt.DownloadToFile(gFromFile,gVPMnm.SetFileName(pPack,gToFile));
      END;

      IF EXISTS(gFromFile) THEN
        ERASE(gFromFile);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSaveFile@12047961(Pack@12047961 : Record 11128079;ServerFilename@12047958 : Text;VAR Handled@12047960 : Boolean);
    BEGIN
    END;

    BEGIN
    {
      PEB *** Begin ***
      PEB0091 Banking
      PEB
      PEB *** End ***
      190212 ORANGO.DL upgrade to PE8.08
    }
    END.
  }
}

