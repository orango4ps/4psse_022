OBJECT Codeunit 11071690 Settlement Quantity Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528202 : TextConst 'DEU=@1@@@@@@@@@@@@@@@@@@;ENU=@1@@@@@@@@@@@@@@@@@@;NLD=@1@@@@@@@@@@@@@@@@@@;NOR=@1@@@@@@@@@@@@@@@@@@;SVE=@1@@@@@@@@@@@@@@@@@@';
      Text003@1100528203 : TextConst 'DEU=Projektelement ''%1 - %2'' ist nicht vorhanden, %3 (Projekt %4, Abrechnungsmenge %5) kann nicht kopiert werden.;ENU=Project Element ''%1 - %2'' is not present, %3  (project %4, settlement quantity %5) can not be copied.;NLD=Project-element ''%1 - %2'' is niet aanwezig, %3 (project %4,  verrekenbare hoeveelheid  %5) kan niet gekopieerd worden.';
      JobsSetup@1100528204 : Record 315;
      gConversion@1100528200 : Boolean;

    PROCEDURE MMRCopySettlementQuantities@1210190005(IProjectFrom@1210190000 : Code[20];IProjectTo@1210190001 : Code[20];IHousModelFilterFrom@1100528202 : Code[250];IHouseModelTo@1100528201 : Code[20];ISettlQuanFilterFrom@1210190012 : Code[250]);
    VAR
      lvSettlementQuantityRec@1210190014 : Record 11072243;
      lvSettlementQuantityRec2@1210190015 : Record 11072243;
      lvProjRec@1210190027 : Record 11072003;
      lvHouseModel@1100528203 : Record 11012501;
      lvWindow@1210190029 : Dialog;
      lvNoOfLines@1210190016 : Integer;
      lvCounter@1210190017 : Integer;
      lvTempProjectTo@1210190024 : Code[20];
      lvTempHouseModelTo@1100528204 : Code[20];
      TmpSettlementQuantitySurcharge@1100528200 : TEMPORARY Record 11072247;
    BEGIN
      lvSettlementQuantityRec.SETRANGE("Project No.", IProjectFrom);
      lvSettlementQuantityRec.SETFILTER("House Model", IHousModelFilterFrom);
      lvSettlementQuantityRec.SETFILTER(Code, ISettlQuanFilterFrom);

      IF lvSettlementQuantityRec.FINDSET(FALSE, FALSE) THEN BEGIN
        IF GUIALLOWED THEN BEGIN
          lvWindow.OPEN(Text000);
          lvWindow.UPDATE(1,0);
        END;
        lvNoOfLines := lvSettlementQuantityRec.COUNT;
        REPEAT
          lvTempProjectTo := IProjectTo;
          IF lvTempProjectTo <> '' THEN BEGIN
            lvProjRec.GET(lvTempProjectTo);
            lvProjRec.TESTFIELD("Maintenance And Renovation", TRUE);
            lvProjRec.CheckProjectStatus(0);
          END;

          IF IHouseModelTo <> '' THEN BEGIN
            lvTempHouseModelTo := IHouseModelTo;
          END ELSE BEGIN
            lvTempHouseModelTo := lvSettlementQuantityRec."House Model";
          END;

          lvHouseModel.GET(lvTempProjectTo, lvTempHouseModelTo);

          IF NOT lvSettlementQuantityRec2.GET(lvTempProjectTo, lvTempHouseModelTo, lvSettlementQuantityRec.Code) THEN BEGIN

            lvSettlementQuantityRec2.COPY(lvSettlementQuantityRec);
            lvSettlementQuantityRec2."Project No." := lvTempProjectTo;
            lvSettlementQuantityRec2."House Model" := lvTempHouseModelTo;
            lvSettlementQuantityRec2."Version Date" := WORKDATE;
            //lvSettlementQuantityRec2."Settlement Price" := 0;
            lvSettlementQuantityRec2.VALIDATE("Quantity per Plot", 0);
            lvSettlementQuantityRec2.VALIDATE("Forecast Quantity", 0);
            lvSettlementQuantityRec2."Modified by" := USERID;
            lvSettlementQuantityRec2."Last Date Modified" := TODAY;
            lvSettlementQuantityRec2.INSERT;

      //      lvBmCopyText(  TODO??
      //        4, lvOptionRec, lvTempProjectTo, lvTempPlotTo, lvTempHouseModelTo,
      //        lvTempMainGroupTo, lvTempGroupTo, lvTempSubGroupTo, lvTempOptionTo);

            MMRCopySettlementQuantityBudget(lvSettlementQuantityRec,
              lvTempProjectTo, lvTempHouseModelTo, lvSettlementQuantityRec.Code);
            MMRCopySettlQuanSummarySheet(lvSettlementQuantityRec,
              lvTempProjectTo, lvTempHouseModelTo, lvSettlementQuantityRec.Code);
            MMRCopySettlQuanSurcharges(lvSettlementQuantityRec,
              lvTempProjectTo, lvTempHouseModelTo, lvSettlementQuantityRec.Code);
            MMRCalcSurchargesUpdateSettlQuan(
              lvTempProjectTo, lvTempHouseModelTo, lvSettlementQuantityRec.Code, FALSE, TmpSettlementQuantitySurcharge);

            lvSettlementQuantityRec2.CalcTotalQuantity(FALSE);
            lvSettlementQuantityRec2.MODIFY;

          END;
          lvCounter := lvCounter + 1;
          IF GUIALLOWED THEN
            lvWindow.UPDATE(1,ROUND(lvCounter / lvNoOfLines * 10000,1));
        UNTIL lvSettlementQuantityRec.NEXT = 0;
        IF GUIALLOWED THEN
          lvWindow.CLOSE;
      END;
    END;

    PROCEDURE MMRCopySettlementQuantityBudget@1210190019(ISettlementQuantityRec@1210190000 : Record 11072243;IProjectTo@1210190007 : Code[20];IHouseModelTo@1100528201 : Code[20];ISettlementQuantityCodeTo@1100528200 : Code[20]);
    VAR
      lvSettlementQuantityBudgetRec@1210190008 : Record 11072244;
      lvSettlementQuantityBudgetRec2@1210190009 : Record 11072244;
    BEGIN
      WITH lvSettlementQuantityBudgetRec DO BEGIN
        SETRANGE("Project No.", ISettlementQuantityRec."Project No.");
        SETRANGE("House Model", ISettlementQuantityRec."House Model");
        SETRANGE("Settlement Quantity Code", ISettlementQuantityRec.Code);
        IF FINDSET THEN BEGIN
          REPEAT
            lvSettlementQuantityBudgetRec2.COPY(lvSettlementQuantityBudgetRec);
            lvSettlementQuantityBudgetRec2."Project No." := IProjectTo;
            lvSettlementQuantityBudgetRec2."House Model" := IHouseModelTo;
            lvSettlementQuantityBudgetRec2."Settlement Quantity Code" := ISettlementQuantityCodeTo;
            CheckProjectElement(lvSettlementQuantityBudgetRec2."Project No.", lvSettlementQuantityBudgetRec2.Element,
              TABLECAPTION, "Project No.", "Settlement Quantity Code");
            IF lvSettlementQuantityBudgetRec2.FIND THEN BEGIN
              lvSettlementQuantityBudgetRec2.TRANSFERFIELDS(lvSettlementQuantityBudgetRec, FALSE);
              lvSettlementQuantityBudgetRec2.MODIFY;
            END ELSE
              lvSettlementQuantityBudgetRec2.INSERT;
            //**Do not use INSERT(TRUE) because of automatically adding summary in new budget
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE MMRCalcSurchargesUpdateSettlQuan@3(IProjectNo@1210190014 : Code[20];IHouseModel@1100528201 : Code[20];ISettlementQuantityCode@1210190002 : Code[20];ICalledFromSurchRecBln@1210190009 : Boolean;VAR OSettlementQuantitySurcharge@1210190007 : Record 11072247);
    VAR
      lvSettlementQuantitySurcharge@1210190001 : Record 11072247;
      lvSettlementQuantity@1100528200 : Record 11072243;
      lvBaseAmount@1210190005 : Decimal;
      lvSurchAmount@1210190000 : Decimal;
    BEGIN
      WITH lvSettlementQuantitySurcharge DO BEGIN
        IF NOT lvSettlementQuantity.GET(IProjectNo, IHouseModel, ISettlementQuantityCode) THEN
          EXIT;

        SETRANGE("Project No.", IProjectNo);
        SETRANGE("House Model", IHouseModel);
        SETRANGE("Settlement Quantity Code", ISettlementQuantityCode);
        IF FIND('-') THEN BEGIN
          JobsSetup.GET;
          CALCFIELDS("Budget Amount");
          lvBaseAmount := "Budget Amount";
          lvSurchAmount := 0;  //* Total surcharges of previous lines, but with original surcharge (not * -1 if base amount neg.)
          REPEAT
            IF ("Fixed Amount") THEN BEGIN
              "Surcharge %" := 0;
              IF (lvBaseAmount <> 0) THEN
                "Surcharge %" := ROUND((((lvBaseAmount + "Surcharge Amount") /
                                       lvBaseAmount) * 100) - 100);
            END ELSE
              "Surcharge Amount" := ROUND((lvBaseAmount + lvSurchAmount) * ("Surcharge %" / 100));
            lvSurchAmount := lvSurchAmount + "Surcharge Amount";  //Do not count the inverted surcharge amount!
            IF (lvBaseAmount < 0) AND JobsSetup."Invert neg. Ext. Option Surch." THEN
              "Surcharge Amount" := - "Surcharge Amount";
            VALIDATE("Surcharge Amount");
            MODIFY;
            IF ICalledFromSurchRecBln AND ("Line No." = OSettlementQuantitySurcharge."Line No.") THEN BEGIN
              IF ("Fixed Amount") THEN
                OSettlementQuantitySurcharge."Surcharge %" := "Surcharge %"
              ELSE
                OSettlementQuantitySurcharge."Surcharge Amount" := "Surcharge Amount";
            END;
          UNTIL NEXT = 0;
        END;

        MMRCalcTotals(lvSettlementQuantity);
        lvSettlementQuantity.SetModifiedByAndDate;
        lvSettlementQuantity.MODIFY;
      END;
    END;

    PROCEDURE MMRCalcTotals@1100528202(VAR IOSettlementQuantityRec@1100528201 : Record 11072243);
    BEGIN
      IOSettlementQuantityRec.CALCFIELDS(IOSettlementQuantityRec."Budget Price",IOSettlementQuantityRec.Surcharges);
      IOSettlementQuantityRec."Net Price" := IOSettlementQuantityRec."Budget Price" + IOSettlementQuantityRec.Surcharges;
      IOSettlementQuantityRec."Total Budget" := IOSettlementQuantityRec."Forecast Total Quantity" * IOSettlementQuantityRec."Budget Price";
      IOSettlementQuantityRec."Net Amount" := IOSettlementQuantityRec."Forecast Total Quantity" * IOSettlementQuantityRec."Net Price";
      IOSettlementQuantityRec."Settlement Amount" := IOSettlementQuantityRec."Forecast Total Quantity" * IOSettlementQuantityRec."Settlement Price";
    END;

    PROCEDURE MMREditSettlQuanBudget@1100528200(ISettlementQuantity@1210190001 : Record 11072243);
    VAR
      lvSettlementQuantityBudget@1210190000 : Record 11072244;
    BEGIN
      WITH ISettlementQuantity DO BEGIN
        TESTFIELD(Code);
        lvSettlementQuantityBudget.FILTERGROUP(9);
        lvSettlementQuantityBudget.SETRANGE("Project No.", "Project No.");
        lvSettlementQuantityBudget.SETRANGE("House Model", "House Model");
        lvSettlementQuantityBudget.SETRANGE("Settlement Quantity Code",Code);
        lvSettlementQuantityBudget.FILTERGROUP(0);

        lvSettlementQuantityBudget."Project No." := "Project No.";
        lvSettlementQuantityBudget."House Model" := "House Model";
        lvSettlementQuantityBudget."Settlement Quantity Code" := Code;
      END;
      PAGE.RUNMODAL(PAGE::"Settlement Quantity Budget", lvSettlementQuantityBudget);
    END;

    PROCEDURE MMREditSettlQuanSummarySheet@1210190000(ISettlementQuantity@1210190001 : Record 11072243);
    VAR
      lvSummarySheetRec@1210190000 : Record 11012064;
    BEGIN
      WITH ISettlementQuantity DO BEGIN
        TESTFIELD(Code);
        lvSummarySheetRec.FILTERGROUP(9);
        lvSummarySheetRec.SETRANGE("Project No.", "Project No.");
        lvSummarySheetRec.SETRANGE("House Model", "House Model");
        lvSummarySheetRec.SETRANGE("Contract No.", '');
        lvSummarySheetRec.SETRANGE(Option, '');
        lvSummarySheetRec.SETRANGE("Settlement Quantity Code",Code);
        lvSummarySheetRec.FILTERGROUP(0);

        lvSummarySheetRec."Project No." := "Project No.";
        lvSummarySheetRec."House Model" := "House Model";
        lvSummarySheetRec."Contract No." := '';
        lvSummarySheetRec."Plot No." := '';
        lvSummarySheetRec."Main Group" := '';
        lvSummarySheetRec.Group := '';
        lvSummarySheetRec."Sub Group" := '';
        lvSummarySheetRec.Option := '';
        lvSummarySheetRec."Settlement Quantity Code" := Code;
      END;
      PAGE.RUNMODAL(PAGE::"Settlement Quantity Summary Sh", lvSummarySheetRec)
    END;

    PROCEDURE MMRCopySettlQuanSummarySheet@1210190001(ISettlementQuantityRec@1100528202 : Record 11072243;IProjectTo@1100528201 : Code[20];IHouseModelTo@1100528203 : Code[20];ISettlementQuantityCodeTo@1100528200 : Code[20]);
    VAR
      lvSummarySheetRec@1210190008 : Record 11012064;
      lvSummarySheetRec2@1210190009 : Record 11012064;
    BEGIN
      WITH lvSummarySheetRec DO BEGIN
        SETRANGE("Project No.", ISettlementQuantityRec."Project No.");
        SETRANGE("House Model", ISettlementQuantityRec."House Model");
        SETRANGE("Contract No.", '');
        SETRANGE(Option, '');
        SETRANGE("Settlement Quantity Code", ISettlementQuantityRec.Code);
        IF FIND('-') THEN BEGIN
          REPEAT
            lvSummarySheetRec2.COPY(lvSummarySheetRec);
            lvSummarySheetRec2."Project No." := IProjectTo;
            lvSummarySheetRec2."House Model" := IHouseModelTo;
            lvSummarySheetRec2."Settlement Quantity Code" := ISettlementQuantityCodeTo;
            CheckProjectElement(lvSummarySheetRec2."Project No.", lvSummarySheetRec2.Element,
              TABLECAPTION, "Project No.", "Settlement Quantity Code");
            lvSummarySheetRec2.INSERT;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE MMRCopySettlQuanSurcharges@1210190020(ISettlementQuantityRec@1100528202 : Record 11072243;IProjectTo@1100528201 : Code[20];IHouseModelTo@1100528203 : Code[20];ISettlementQuantityCodeTo@1100528200 : Code[20]);
    VAR
      lvSurchRec@1210190008 : Record 11072247;
      lvSurchRec2@1210190009 : Record 11072247;
      lvInserted@1210190010 : Boolean;
    BEGIN
      WITH lvSurchRec DO BEGIN
        SETRANGE("Project No.", ISettlementQuantityRec."Project No.");
        SETRANGE("House Model", ISettlementQuantityRec."House Model");
        SETRANGE("Settlement Quantity Code", ISettlementQuantityRec.Code);
        IF FIND('-') THEN BEGIN
          REPEAT
            lvSurchRec2.COPY(lvSurchRec);
            lvSurchRec2."Project No." := IProjectTo;
            lvSurchRec2."House Model" := IHouseModelTo;
            lvSurchRec2."Settlement Quantity Code" := ISettlementQuantityCodeTo;
            lvSurchRec2.VALIDATE("Cost Type");
            lvSurchRec2.VALIDATE(Element);
            lvSurchRec2.INSERT;
            lvInserted := TRUE;
          UNTIL NEXT = 0;
        END;
      END;

      WITH lvSurchRec2 DO BEGIN
        IF lvInserted THEN BEGIN
          MMRCalcSurchargesUpdateSettlQuan(
            "Project No.", "House Model", "Settlement Quantity Code", FALSE, lvSurchRec2);
        END;
      END;
    END;

    PROCEDURE MMREditSettlQuanSurcharges@1210190013(ISettlementQuantity@1210190001 : Record 11072244);
    VAR
      lvSurchargeRec@1210190000 : Record 11072247;
      lvSurchargesFrm@1100525000 : Page 11229525;
    BEGIN
      WITH ISettlementQuantity DO BEGIN
        TESTFIELD("Settlement Quantity Code");
        lvSurchargeRec.FILTERGROUP(9);
        lvSurchargeRec.SETRANGE("Project No.", "Project No.");
        lvSurchargeRec.SETRANGE("House Model", "House Model");
        lvSurchargeRec.SETRANGE("Settlement Quantity Code", "Settlement Quantity Code");
        lvSurchargeRec.FILTERGROUP(0);
        lvSurchargesFrm.SETTABLEVIEW(lvSurchargeRec);
        //IF ("Project No." <> '') AND ("Plot No." <> '') AND (Option <> '') AND (Status >= Status::Order) THEN
        //  lvSurchargesFrm.EDITABLE(FALSE);  TODO check on which status???
        lvSurchargesFrm.RUNMODAL;
      END;
    END;

    PROCEDURE CheckProjectElement@1100525002(ProjectNo@1100525001 : Code[20];Element@1100525002 : Code[20];TableCaptionName@1100525003 : Text[100];FromProject@1100525004 : Code[20];FromSettlementQuantity@1100525005 : Code[20]);
    VAR
      ProjElemRec@1100525000 : Record 11012010;
    BEGIN
      IF (ProjectNo = '') OR (Element = '') THEN
        EXIT;

      IF NOT ProjElemRec.GET(ProjectNo, Element) THEN
        ERROR(Text003, ProjectNo, Element, TableCaptionName,
          FromProject, FromSettlementQuantity);
    END;

    PROCEDURE MMRCopyPlotRecordingCrossListToUnit@1100528201(VAR lvPlotRecordingCrossList@1100528200 : Record 11072253;UnitTo@1100528201 : Code[20]);
    VAR
      PlotRecordingCrossList2@1100528205 : Record 11072253;
      lvWindow@1100528204 : Dialog;
      lvNoOfLines@1100528203 : Integer;
      lvCounter@1100528202 : Integer;
      lvCounter2@1100528206 : Integer;
    BEGIN
      IF lvPlotRecordingCrossList.FINDSET(FALSE, FALSE) THEN BEGIN
        IF GUIALLOWED THEN BEGIN
          lvWindow.OPEN(Text000);
          lvWindow.UPDATE(1,0);
        END;
        lvNoOfLines := lvPlotRecordingCrossList.COUNT;
        PlotRecordingCrossList2.SETCURRENTKEY("Project No.", "House Model", Unit, Type, "Main Group", Group, "Sub Group", Code, "Line No.");
        REPEAT
          PlotRecordingCrossList2.SETRANGE("Project No.", lvPlotRecordingCrossList."Project No.");
          PlotRecordingCrossList2.SETRANGE("House Model", lvPlotRecordingCrossList."House Model");
          PlotRecordingCrossList2.SETRANGE(Unit, UnitTo);
          PlotRecordingCrossList2.SETRANGE(Type, lvPlotRecordingCrossList.Type);
          PlotRecordingCrossList2.SETRANGE("Main Group", lvPlotRecordingCrossList."Main Group");
          PlotRecordingCrossList2.SETRANGE(Group, lvPlotRecordingCrossList.Group);
          PlotRecordingCrossList2.SETRANGE("Sub Group", lvPlotRecordingCrossList."Sub Group");
          PlotRecordingCrossList2.SETRANGE(Code, lvPlotRecordingCrossList.Code);
          IF PlotRecordingCrossList2.ISEMPTY THEN BEGIN
            PlotRecordingCrossList2 := lvPlotRecordingCrossList;
            PlotRecordingCrossList2.Unit := UnitTo;
            IF NOT PlotRecordingCrossList2.INSERT(TRUE) THEN BEGIN
              lvCounter2 := 0;
              REPEAT
                lvCounter2 += 1;
                PlotRecordingCrossList2."Line No." := PlotRecordingCrossList2."Line No." + 500;
              UNTIL (PlotRecordingCrossList2.INSERT(TRUE)) OR (lvCounter2 > 20);
            END;
          END;
          lvCounter := lvCounter + 1;
          IF GUIALLOWED THEN
            lvWindow.UPDATE(1,ROUND(lvCounter / lvNoOfLines * 10000,1));
        UNTIL lvPlotRecordingCrossList.NEXT = 0;
        IF GUIALLOWED THEN
          lvWindow.CLOSE;
      END;
    END;

    PROCEDURE Recording_CalcQuantity@1100525000(PlotRecordingCrossList@1100528202 : Record 11072253;IplotNo@1100528201 : Code[20];IDateFilter@1100528203 : Date;IShowRecordingType@1100528204 : 'Cold Recording,Warm Recording,Production') : Decimal;
    VAR
      PlotSQRecordingLine@1100528200 : Record 11072252;
    BEGIN
      WITH PlotRecordingCrossList DO BEGIN
        PlotSQRecordingLine.SETCURRENTKEY("Project No.", "Plot No.", "House Model", Unit, Type, "Main Group", Group, "Sub Group", Code, "Line No.","Recording Date");
        PlotSQRecordingLine.SETRANGE("Project No.", "Project No.");
        PlotSQRecordingLine.SETRANGE("Plot No.",IplotNo);
        PlotSQRecordingLine.SETRANGE("House Model", "House Model" );
        PlotSQRecordingLine.SETRANGE(Unit, Unit);
        PlotSQRecordingLine.SETRANGE("Line No.","Line No.");
        PlotSQRecordingLine.SETRANGE("Recording Date", 0D, IDateFilter);
        IF PlotSQRecordingLine.FINDLAST THEN BEGIN
          PlotSQRecordingLine.SETRANGE("Date Filter", 0D, IDateFilter);
          CASE IShowRecordingType OF
            IShowRecordingType::"Cold Recording":
              BEGIN
                PlotSQRecordingLine.CALCFIELDS("Cold Recording Quantity");
                EXIT(PlotSQRecordingLine."Cold Recording Quantity");
              END;
            IShowRecordingType::"Warm Recording":
              BEGIN
                PlotSQRecordingLine.CALCFIELDS("Warm Recording Quantity");
                EXIT(PlotSQRecordingLine."Warm Recording Quantity");
              END;
            IShowRecordingType::Production:
              BEGIN
                PlotSQRecordingLine.CALCFIELDS("Production Recording Quantity");
                EXIT(PlotSQRecordingLine."Production Recording Quantity");
              END;
          END;
        END;
      END;

      EXIT(0);
    END;

    PROCEDURE Recording_UpdateQuantity@1100528203(PlotRecordingCrossList@1100528205 : Record 11072253;IplotNo@1100528204 : Code[20];IDateFilter@1100528203 : Date;IShowRecordingType@1100528201 : 'Cold Recording,Warm Recording,Production';NewQuantity@1100525000 : Decimal);
    VAR
      PlotSQRecording@1100528200 : Record 11072251;
      PlotSQRecordingLine@1100528202 : Record 11072252;
      OldQuantity@1100528206 : Decimal;
    BEGIN
      WITH PlotRecordingCrossList DO BEGIN
        PlotSQRecordingLine.SetConversionStatus(gConversion);
        PlotSQRecording.SETRANGE("Project No.", "Project No.");
        PlotSQRecording.SETFILTER("Plot No.", '%1', '');
        PlotSQRecording.SETRANGE(Phase, IShowRecordingType);
        PlotSQRecording.SETRANGE("Recording Date", IDateFilter);
        IF PlotSQRecording.FINDFIRST THEN BEGIN
          PlotSQRecordingLine.SETRANGE("Project No.", "Project No.");
          PlotSQRecordingLine.SETRANGE("Plot No.", IplotNo);
          PlotSQRecordingLine.SETRANGE("Recording Seq. No.", PlotSQRecording."Seq. No.");
          PlotSQRecordingLine.SETRANGE("House Model", "House Model" );
          PlotSQRecordingLine.SETRANGE(Unit, Unit);
          PlotSQRecordingLine.SETRANGE("Line No.","Line No.");
          IF PlotSQRecordingLine.FINDFIRST THEN BEGIN
            PlotSQRecordingLine."Recording Date" := PlotSQRecording."Recording Date";
            //Apparently the following fields are not allways filled correct. Corrected here.
            PlotSQRecordingLine.Type := Type;
            PlotSQRecordingLine."Main Group" := "Main Group";
            PlotSQRecordingLine.Group :=  Group;
            PlotSQRecordingLine."Sub Group" :=  "Sub Group";
            PlotSQRecordingLine.Code := Code;
            //
            OldQuantity := Recording_CalcQuantity(PlotRecordingCrossList, IplotNo, IDateFilter, IShowRecordingType) - PlotSQRecordingLine."Delta Recording Quantity";
            PlotSQRecordingLine.VALIDATE("Delta Recording Quantity", NewQuantity-OldQuantity);
            PlotSQRecordingLine.MODIFY(TRUE);
          END ELSE BEGIN
            PlotSQRecordingLine.INIT;
            PlotSQRecordingLine."Project No." := "Project No.";
            PlotSQRecordingLine."Plot No.":= IplotNo;
            PlotSQRecordingLine."Recording Seq. No." := PlotSQRecording."Seq. No.";
            PlotSQRecordingLine."House Model" := "House Model";
            PlotSQRecordingLine.Unit := Unit;
            PlotSQRecordingLine."Line No." := "Line No.";
            PlotSQRecordingLine.Type := Type;
            PlotSQRecordingLine."Main Group" := "Main Group";
            PlotSQRecordingLine.Group :=  Group;
            PlotSQRecordingLine."Sub Group" :=  "Sub Group";
            PlotSQRecordingLine.Code := Code;
            PlotSQRecordingLine.Phase := IShowRecordingType;
            PlotSQRecordingLine."Recording Date" := PlotSQRecording."Recording Date";
            OldQuantity := Recording_CalcQuantity(PlotRecordingCrossList, IplotNo, IDateFilter, IShowRecordingType) - PlotSQRecordingLine."Delta Recording Quantity";
            PlotSQRecordingLine.INSERT(TRUE);
            PlotSQRecordingLine.VALIDATE("Delta Recording Quantity", NewQuantity-OldQuantity);
            PlotSQRecordingLine.MODIFY(TRUE);
          END;
        END ELSE BEGIN
          PlotSQRecording.INIT;
          PlotSQRecording.VALIDATE("Project No.", "Project No.");
          PlotSQRecording."Seq. No." := 0; //numbering will be handled in OnInsert
          PlotSQRecording.VALIDATE("Recording Date", IDateFilter);
          PlotSQRecording.VALIDATE(Phase, IShowRecordingType);
          PlotSQRecording.INSERT(TRUE);

          PlotSQRecordingLine.INIT;
          PlotSQRecordingLine."Project No." := "Project No.";
          PlotSQRecordingLine."Plot No." := IplotNo;
          PlotSQRecordingLine."Recording Seq. No." := PlotSQRecording."Seq. No.";
          PlotSQRecordingLine."House Model" := "House Model";
          PlotSQRecordingLine."Line No." := "Line No.";
          PlotSQRecordingLine.Unit := Unit;
          PlotSQRecordingLine.Type := Type;
          PlotSQRecordingLine."Main Group" := "Main Group";
          PlotSQRecordingLine.Group :=  Group;
          PlotSQRecordingLine."Sub Group" :=  "Sub Group";
          PlotSQRecordingLine.Code := Code;
          PlotSQRecordingLine.Phase := IShowRecordingType;
          PlotSQRecordingLine."Recording Date" := PlotSQRecording."Recording Date";
          OldQuantity := Recording_CalcQuantity(PlotRecordingCrossList, IplotNo, IDateFilter, IShowRecordingType) - PlotSQRecordingLine."Delta Recording Quantity";
          PlotSQRecordingLine.INSERT(TRUE);
          PlotSQRecordingLine.VALIDATE("Delta Recording Quantity", NewQuantity-OldQuantity);
          PlotSQRecordingLine.MODIFY(TRUE);
        END;
        PlotSQRecordingLine.SetConversionStatus(FALSE);
      END;
    END;

    PROCEDURE SetConversionStatus@1100528204(Conversion@1100528200 : Boolean);
    BEGIN
      gConversion := Conversion;
    END;

    BEGIN
    END.
  }
}

