OBJECT Report 5854 Roll Up Standard Cost
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Mehrstuf. Einst.-Pr. berechnen;
               ENU=Roll Up Standard Cost;
               NLD=Vaste verrekenprijs berekenen;
               NOR=Oppruller standardkost;
               SVE=Uppsummerad standardkostnad];
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  StdCostWkshName@1000 : Record 5840;
                BEGIN
                  RolledUp := FALSE;

                  IF ToStdCostWkshName = '' THEN
                    ERROR(Text003);
                  StdCostWkshName.GET(ToStdCostWkshName);
                END;

  }
  DATASET
  {
    { 8129;    ;DataItem;                    ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               StdCostWksh.LOCKTABLE;
                               CLEAR(CalcStdCost);
                               CalcStdCost.SetProperties(CalculationDate,TRUE,FALSE,FALSE,ToStdCostWkshName,TRUE);
                               CalcStdCost.CalcItems(Item,TempItem);

                               TempItem.SETFILTER("Replenishment System",'%1|%2',
                                 TempItem."Replenishment System"::"Prod. Order",
                                 TempItem."Replenishment System"::Assembly);
                               IF TempItem.FIND('-') THEN
                                 REPEAT
                                   UpdateStdCostWksh;
                                   RolledUp := TRUE;
                                 UNTIL TempItem.NEXT = 0;
                             END;

               OnPostDataItem=BEGIN
                                IF NOT NoMessage THEN
                                  IF RolledUp THEN
                                    MESSAGE(Text000)
                                  ELSE
                                    MESSAGE(Text001);
                              END;

               ReqFilterFields=No.,Costing Method }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF CalculationDate = 0D THEN
                     CalculationDate := WORKDATE;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 15  ;2   ;Field     ;
                  Name=CalculationDate;
                  CaptionML=[DEU=Berechnungsdatum;
                             ENU=Calculation Date;
                             NLD=Berekeningsdatum;
                             NOR=Beregningsdato;
                             SVE=BerÑkningsdatum];
                  ToolTipML=[DEU=Gibt das Datum an, zu dem Kosten berechnet werden sollen.;
                             ENU=Specifies the date you want the cost shares to be calculated.;
                             NLD=Hiermee wordt de datum opgegeven waarop u de kostenaandelen wilt berekenen.;
                             NOR=Angir nÜr du vil at kostandelene skal beregnes.;
                             SVE=Anger fîr vilket datum kostnadsandelarna ska berÑknas.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CalculationDate;
                  OnValidate=BEGIN
                               IF CalculationDate = 0D THEN
                                 ERROR(Text002);
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      TempItem@1003 : TEMPORARY Record 27;
      StdCostWksh@1004 : Record 5841;
      CalcStdCost@1000 : Codeunit 5812;
      CalculationDate@1001 : Date;
      ToStdCostWkshName@1002 : Code[10];
      RolledUp@1006 : Boolean;
      Text000@1007 : TextConst 'DEU=Die mehrstufigen Einstandspreise wurden erfolgreich berechnet.;ENU=The standard costs have been rolled up successfully.;NLD=De vaste verrekenprijzen zijn met succes berekend.;NOR=Standardkostnadene er opprullert.';
      Text001@1008 : TextConst 'DEU=Es gibt nichts zu berechnen.;ENU=There is nothing to roll up.;NLD=Niets te berekenen.;NOR=Det finnes ingenting Ü opprullere.';
      Text002@1009 : TextConst 'DEU=Sie mÅssen ein Berechnungsdatum eingeben.;ENU=You must enter a calculation date.;NLD=U moet een berekeningsdatum opgeven.;NOR=Du mÜ angi en beregningsdato.';
      Text003@1010 : TextConst 'DEU=Sie mÅssen einen Vorschlagsnamen fÅr die mehrstufige Berechnung angeben.;ENU=You must specify a worksheet name to roll up to.;NLD=U moet een voorstelnaam voor de berekening opgeven.;NOR=Du mÜ angi hvilket forslagsnavn det skal opprulleres til.';
      NoMessage@1011 : Boolean;

    LOCAL PROCEDURE UpdateStdCostWksh@3();
    VAR
      Found@1000 : Boolean;
    BEGIN
      WITH StdCostWksh DO BEGIN
        Found := GET(ToStdCostWkshName,Type::Item,TempItem."No.");
        VALIDATE("Standard Cost Worksheet Name",ToStdCostWkshName);
        VALIDATE(Type,Type::Item);
        VALIDATE("No.",TempItem."No.");
        "New Standard Cost" := TempItem."Standard Cost";

        "New Single-Lvl Material Cost" := TempItem."Single-Level Material Cost";
        "New Single-Lvl Cap. Cost" := TempItem."Single-Level Capacity Cost";
        "New Single-Lvl Subcontrd Cost" := TempItem."Single-Level Subcontrd. Cost";
        "New Single-Lvl Cap. Ovhd Cost" := TempItem."Single-Level Cap. Ovhd Cost";
        "New Single-Lvl Mfg. Ovhd Cost" := TempItem."Single-Level Mfg. Ovhd Cost";

        "New Rolled-up Material Cost" := TempItem."Rolled-up Material Cost";
        "New Rolled-up Cap. Cost" := TempItem."Rolled-up Capacity Cost";
        "New Rolled-up Subcontrd Cost" := TempItem."Rolled-up Subcontracted Cost";
        "New Rolled-up Cap. Ovhd Cost" := TempItem."Rolled-up Cap. Overhead Cost";
        "New Rolled-up Mfg. Ovhd Cost" := TempItem."Rolled-up Mfg. Ovhd Cost";

        IF Found THEN
          MODIFY(TRUE)
        ELSE
          INSERT(TRUE);
      END;
    END;

    [External]
    PROCEDURE SetStdCostWksh@1(NewStdCostWkshName@1000 : Code[10]);
    BEGIN
      ToStdCostWkshName := NewStdCostWkshName;
    END;

    [External]
    PROCEDURE Initialize@2(StdCostWkshName2@1000 : Code[10];NoMessage2@1001 : Boolean);
    BEGIN
      ToStdCostWkshName := StdCostWkshName2;
      NoMessage := NoMessage2;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

