OBJECT Codeunit 11012325 Exp. Plant Order (Plant Mgt.)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            Contact@1100525003 : Record 5050;
            Contact2@1100525005 : Record 5050;
            PlantOrder@1100525000 : Record 11012556;
            PlantLocation@1100525007 : Record 11012554;
            ContBusRel@1100525004 : Record 5054;
            PlantOrders@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
            XMLDOMManagement4PS@1100525002 : Codeunit 11020220;
            LocationCode@1100525006 : Code[20];
          BEGIN
            IF GUIALLOWED THEN
              Window.OPEN(Text000);

            UtilityFunctions.CreateOutFolder;

            DOMDocument := DOMDocument.XmlDocument;

            AppendElement(DOMDocument, 'plantorders', '', PlantOrders);
            PlantOrders.SetAttribute('version', '1.0');
            PlantOrders.SetAttribute('exportdate', UtilityFunctions.FormatDateTime(CURRENTDATETIME));

            PlantOrder.SETFILTER("Posting Date", '%1..|%2', CALCDATE('<-6M>', WORKDATE), 0D);

            IF PlantOrder.FINDSET THEN
              REPEAT
                IF GUIALLOWED THEN
                  Window.UPDATE;

                CASE PlantOrder.Type OF
                   PlantOrder.Type::Arrival: LocationCode := PlantOrder."To Location";
                   PlantOrder.Type::Removal: LocationCode := PlantOrder."From Location";
                END;

                IF NOT PlantLocation.GET(LocationCode) THEN
                  PlantLocation.INIT;

                ContBusRel.SETCURRENTKEY("Link to Table", "No.");
                ContBusRel.SETRANGE("Link to Table", ContBusRel."Link to Table"::Customer);
                ContBusRel.SETRANGE("No.", PlantLocation."Customer No.");

                IF ContBusRel.FINDFIRST THEN BEGIN
                  Contact.GET(ContBusRel."Contact No.");
                  IF NOT Contact.Blocked THEN BEGIN
                    Contact2.SETCURRENTKEY("Company No.");
                    Contact2.SETRANGE("Company No.", Contact."Company No.");
                    Contact2.SETRANGE(Type, Contact2.Type::Person);
                    Contact2.SETRANGE(Blocked, FALSE);
                    Contact2.SETFILTER("Login ID", '<>%1', '');

                    IF NOT Contact2.ISEMPTY THEN
                      AppendPlantOrder(PlantOrders, PlantOrder);
                  END;
                END;
              UNTIL PlantOrder.NEXT = 0;

            IF GUIALLOWED THEN
              XMLDOMManagement4PS.SaveXMLToClientFile(DOMDocument, FileName)
            ELSE
              DOMDocument.Save(FileName);

            IF GUIALLOWED THEN
              Window.CLOSE;
          END;

  }
  CODE
  {
    VAR
      UtilityFunctions@1100525003 : Codeunit 11012318;
      DOMDocument@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Window@1100525000 : Dialog;
      Text000@1100525001 : TextConst 'DEU=Werkzeugauftr„ge exportieren...;ENU=Exporting Plant Orders...;NLD=Materieelorders exporteren...;SVE=Exporterar Maskinsorder ...';

    PROCEDURE AppendPlantOrder@1100525011(ParentNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";PlantOrder@1100525001 : Record 11012556);
    VAR
      PlantCommentLine@1100525004 : Record 11072666;
      PlantOrderLine@1100525007 : Record 11012557;
      PlantOrder2@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      CommentLine2@1100525005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      Dummy@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      AppendElement(ParentNode, 'plantorder', '', PlantOrder2);
      AppendElement(PlantOrder2, 'no', PlantOrder."No.", Dummy);
      AppendElement(PlantOrder2, 'type', UtilityFunctions.FormatOption(PlantOrder.Type,
        'Arrival,Removal,Other Transfers,Negative Inventory Correction'), Dummy);
      AppendElement(PlantOrder2, 'transferdate', UtilityFunctions.FormatDate(PlantOrder."Transfer Date"), Dummy);
      AppendElement(PlantOrder2, 'rentalstartdate',
        UtilityFunctions.FormatDate(PlantOrder."Rental Startdate (To Location)"), Dummy);
      AppendElement(PlantOrder2, 'rentalenddate',
        UtilityFunctions.FormatDate(PlantOrder."Rental Enddate (From Location)"), Dummy);
      AppendElement(PlantOrder2, 'fromlocation', PlantOrder."From Location", Dummy);
      AppendElement(PlantOrder2, 'tolocation', PlantOrder."To Location", Dummy);
      AppendElement(PlantOrder2, 'status', UtilityFunctions.FormatOption(PlantOrder.Status, 'Open,Printed,Released,Posted'), Dummy);
      AppendElement(PlantOrder2, 'createdby', PlantOrder."Created by", Dummy);
      AppendElement(PlantOrder2, 'plantrequestno', PlantOrder."Plant Request No.", Dummy);
      AppendElement(PlantOrder2, 'shippingcharges', UtilityFunctions.FormatOption(PlantOrder."Transport Cost for (Advice)",
        ' ,Internal,Project,Location,From Location,To Location'), Dummy);
      PlantOrder.CALCFIELDS("Web Site Code"); // jhoek
      AppendElement(PlantOrder2, 'websitecode', PlantOrder."Web Site Code", Dummy); // jhoek
      AppendElement(PlantOrder2, 'comment', '', Dummy);

      //DP00183.sc
      PlantCommentLine.SETRANGE("Table No.", DATABASE::"Plant Order");  //C005461.c
      PlantCommentLine.SETRANGE("No.", PlantOrder."No.");               //C005461.c
      IF PlantCommentLine.FINDSET THEN
        REPEAT
          AppendElement(Dummy, 'commentline', PlantCommentLine.Comment, CommentLine2);
          CommentLine2.SetAttribute('date', UtilityFunctions.FormatDate(PlantCommentLine.Date));
          CommentLine2.SetAttribute('createdby', PlantCommentLine."Created by");
        UNTIL PlantCommentLine.NEXT = 0;
      //DP00183.ec

      AppendElement(PlantOrder2, 'plantorderlines', '', Dummy);

      PlantOrderLine.SETRANGE("Plant Order No.", PlantOrder."No.");

      IF PlantOrderLine.FINDSET THEN
        REPEAT
          AppendPlantOrderLine(Dummy, PlantOrderLine);
        UNTIL PlantOrderLine.NEXT = 0;
    END;

    PROCEDURE AppendPlantOrderLine@1100525005(ParentNode@1100525001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";PlantOrderLine@1100525000 : Record 11012557);
    VAR
      PlantOrderLine2@1100525002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      Dummy@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      AppendElement(ParentNode, 'plantorderline', '', PlantOrderLine2);
      AppendElement(PlantOrderLine2, 'type', UtilityFunctions.FormatOption(PlantOrderLine.Type, 'Plant,Text,Item'), Dummy);
      AppendElement(PlantOrderLine2, 'description', PlantOrderLine.Description, Dummy);
      AppendElement(PlantOrderLine2, 'comment', PlantOrderLine."Comment CP Order", Dummy);
      AppendElement(PlantOrderLine2, 'planttype', PlantOrderLine."Plant Type", Dummy);
      AppendElement(PlantOrderLine2, 'expectedreturn', UtilityFunctions.FormatDate(PlantOrderLine."Expected return on"), Dummy);
      AppendElement(PlantOrderLine2, 'quantity', UtilityFunctions.FormatDecimal(PlantOrderLine.Quantity), Dummy);
      AppendElement(PlantOrderLine2, 'rentalstartdate',
        UtilityFunctions.FormatDate(PlantOrderLine."Rental Startdate (To Location)"), Dummy);
      AppendElement(PlantOrderLine2, 'rentalenddate',
        UtilityFunctions.FormatDate(PlantOrderLine."Rental Enddate (From Location)"), Dummy);
      AppendElement(PlantOrderLine2, 'plantrequestno', PlantOrderLine."Plant Request No.", Dummy);
      AppendElement(PlantOrderLine2, 'plantrequestlineno',
        UtilityFunctions.FormatInteger(PlantOrderLine."Plant Request Line No."), Dummy);
    END;

    PROCEDURE AppendElement@1100525003(ParentNode@1100525000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1100525001 : Text[80];Value@1100525002 : Text[1024];VAR NewElement@1100525003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      TextNode@1100525004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlText";
    BEGIN
      NewElement := DOMDocument.CreateElement(Name);

      IF Value <> '' THEN BEGIN
        TextNode := DOMDocument.CreateTextNode(Value);
        NewElement.AppendChild(TextNode);
      END;

      ParentNode.AppendChild(NewElement);
    END;

    PROCEDURE FileName@1100525002() : Text[260];
    VAR
      PlantMgtFileExchangeSetup@1100525000 : Record 11125655;
    BEGIN
      PlantMgtFileExchangeSetup.GET;
      PlantMgtFileExchangeSetup.TESTFIELD("Export Path");

      EXIT(
        STRSUBSTNO('%1\plantorders%2.xml', DELCHR(PlantMgtFileExchangeSetup."Export Path", '>', '\'),
        UtilityFunctions.FileNameDateTime));
    END;

    BEGIN
    END.
  }
}

