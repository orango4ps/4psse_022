OBJECT Page 5915 Service Tasks
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Service Tasks;
               NOR=Serviceoppgaver;
               SVE=Serviceuppgifter];
    ApplicationArea=#Service;
    SaveValues=Yes;
    InsertAllowed=No;
    SourceTable=Table5901;
    SourceTableView=SORTING(Response Date,Response Time,Priority);
    PageType=Worksheet;
    UsageCategory=Tasks;
    OnOpenPage=BEGIN
                 IF UserMgt.GetServiceFilter <> '' THEN BEGIN
                   FILTERGROUP(2);
                   SETRANGE("Responsibility Center",UserMgt.GetServiceFilter);
                   FILTERGROUP(0);
                 END;

                 SetAllFilters;

                 IF ISEMPTY THEN BEGIN
                   ServOrderFilter := '';
                   SetServOrderFilter;
                 END;
               END;

    OnAfterGetRecord=BEGIN
                       ServHeader.GET("Document Type","Document No.");

                       IF NOT Cust.GET(ServHeader."Customer No.") THEN
                         CLEAR(Cust);

                       CALCFIELDS("No. of Active/Finished Allocs");
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 51      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Service Tasks;
                                 NOR=&Serviceoppgaver;
                                 SVE=&Serviceuppgifter];
                      Image=ServiceTasks }
      { 53      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=[ENU=&Show Document;
                                 NOR=V&is dokument;
                                 SVE=&Visa dokument];
                      ToolTipML=[ENU=Open the document that the information on the line comes from.;
                                 NOR=èpne dokumentet som informasjonen pÜ linjen kommer fra.;
                                 SVE=ôppna dokumentet som informationen pÜ raden hÑmtas frÜn.];
                      ApplicationArea=#Service;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=View;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 PageManagement@1000 : Codeunit 700;
                               BEGIN
                                 IF ServHeader.GET("Document Type","Document No.") THEN BEGIN
                                   PageManagement.PageRunModal(ServHeader);

                                   IF ServOrderFilter <> '' THEN BEGIN
                                     ServItemLine.RESET;
                                     ServItemLine.COPYFILTERS(Rec);
                                     IF ServItemLine.GETRANGEMIN("Document No.") = ServItemLine.GETRANGEMAX("Document No.") THEN
                                       IF ServItemLine.ISEMPTY THEN BEGIN
                                         ServOrderFilter := '';
                                         SetServOrderFilter;
                                       END
                                   END;
                                 END;
                               END;
                                }
      { 54      ;2   ;Action    ;
                      CaptionML=[ENU=&Item Worksheet;
                                 NOR=&Arbeidsordre;
                                 SVE=&Artikelfîrslag];
                      ToolTipML=[ENU=View or edit information about service items, such as repair status, fault comments and codes, and cost. In this window, you can update information on the items such as repair status and fault and resolution codes. You can also enter new service lines for resource hours, for the use of spare parts and for specific service costs.;
                                 NOR=Vis eller rediger informasjon om servicevarer, for eksempel reparasjonsstatus, merknader til feil, feilkoder og kostnader. I dette vinduet kan du oppdatere opplysninger om varene, for eksempel reparasjonsstatus og feil- og lõsningskoder. Du kan dessuten angi nye servicelinjer for ressurstimer, for bruk av reservedeler og for spesifikke servicekostnader.;
                                 SVE=Visa eller redigera information om serviceartiklar, exempelvis reparationsstatus, felkommentarer, felkoder och kostnader. I det hÑr fînstret kan du uppdatera information om artiklarna, till exempel reparationsstatus, felkoder och ÜtgÑrdskoder. Du kan ocksÜ registrera nya servicerader fîr resurstid, fîr anvÑndning av reservdelar och fîr sÑrskilda servicekostnader.];
                      ApplicationArea=#Service;
                      RunObject=Page 5906;
                      RunPageLink=Document Type=FIELD(Document Type),
                                  Document No.=FIELD(Document No.),
                                  Line No.=FIELD(Line No.),
                                  Resource Filter=FIELD(Resource Filter);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ItemWorksheet;
                      PromotedCategory=Process }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 36      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Print;
                                 NOR=&Skriv ut;
                                 SVE=Skriv &ut];
                      Image=Print }
      { 37      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Service &Tasks;
                                 NOR=Service&oppgaver;
                                 SVE=Service&uppgifter];
                      ToolTipML=[ENU=View information about service items on service orders, for example, repair status, response time and service shelf number.;
                                 NOR=Vis informasjon om servicevarer i serviceordrer, for eksempel reparasjonsstatus, responstid og servicehyllenummer.;
                                 SVE=Visa information om serviceartiklar pÜ serviceorder, exempelvis reparationsstatus, svarstid och servicehyllenummer.];
                      ApplicationArea=#Service;
                      Image=ServiceTasks;
                      OnAction=BEGIN
                                 CLEAR(ServItemLine);
                                 FILTERGROUP(2);
                                 ServItemLine.SETVIEW(GETVIEW);
                                 FILTERGROUP(0);
                                 ServItemLine.SETRANGE("No. of Allocations");
                                 ServItemLine.SETRANGE("No. of Active/Finished Allocs");

                                 REPORT.RUN(REPORT::"Service Tasks",TRUE,TRUE,ServItemLine);
                               END;
                                }
      { 48      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Service Item &Worksheet;
                                 NOR=Arbeids&ordre;
                                 SVE=Service&artikeldokument];
                      ToolTipML=[ENU=Prepare to record service hours and spare parts used, repair status, fault comments, and cost.;
                                 NOR=Klargjõr for registrering av servicetimer og brukte reservedeler, reparasjonsstatus, merknader til feil og kostnader.;
                                 SVE=Fîrbered att registrera servicetimmar och reservdelar som anvÑnds, reparationsstatus, felkommentarer och kostnad.];
                      ApplicationArea=#Service;
                      Image=ServiceItemWorksheet;
                      OnAction=BEGIN
                                 CLEAR(ServItemLine);
                                 ServItemLine.SETRANGE("Document Type","Document Type");
                                 ServItemLine.SETRANGE("Document No.","Document No.");
                                 ServItemLine.SETRANGE("Line No.","Line No.");
                                 REPORT.RUN(REPORT::"Service Item Worksheet",TRUE,TRUE,ServItemLine);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 29  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           NOR=Generelt;
                           SVE=AllmÑnt] }

    { 42  ;2   ;Field     ;
                CaptionML=[ENU=Resource Filter;
                           NOR=Ressursfilter;
                           SVE=Resursfilter];
                ToolTipML=[ENU=Specifies the filter that displays service tasks corresponding to service item lines that a certain resource is allocated to.;
                           NOR=Angir filteret som viser serviceoppgaver som tilsvarer servicevarelinjene som en bestemt ressurs er tildelt.;
                           SVE=Anger filtret som visar serviceuppgifterna som motsvarar serviceartikelraderna som en viss resurs har fîrdelats till.];
                ApplicationArea=#Service;
                SourceExpr=ResourceFilter;
                OnValidate=BEGIN
                             FILTERGROUP(2);
                             TempTextFilter := GETFILTER("Resource Filter");
                             FILTERGROUP(0);
                             SetResourceFilter;
                             IF NOT TestFilter THEN BEGIN
                               ResourceFilter := TempTextFilter;
                               SetResourceFilter;
                               ERROR(Text000,TABLECAPTION);
                             END;
                             ResourceFilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           Res.RESET;
                           IF PAGE.RUNMODAL(0,Res) = ACTION::LookupOK THEN BEGIN
                             Text := Res."No.";
                             SetResourceFilter;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 63  ;2   ;Field     ;
                CaptionML=[ENU=Resource Group Filter;
                           NOR=Ressursgruppefilter;
                           SVE=Resursgruppfilter];
                ToolTipML=[ENU=Specifies the filter that displays service tasks corresponding to service item lines with the specified resource group allocated to each of them.;
                           NOR=Angir filteret som viser serviceoppgaver som tilsvarer servicevarelinjene med den angitte ressursgruppen som er tildelt hver av dem.;
                           SVE=Anger filtret som visar serviceuppgifterna som motsvarar serviceartikelraderna med den angivna resursgruppen fîrdelad till var och en.];
                ApplicationArea=#Service;
                SourceExpr=ResourceGroupFilter;
                OnValidate=BEGIN
                             FILTERGROUP(2);
                             TempTextFilter := GETFILTER("Resource Group Filter");
                             FILTERGROUP(0);
                             SetResourceGroupFilter;
                             IF NOT TestFilter THEN BEGIN
                               ResourceGroupFilter := TempTextFilter;
                               SetResourceGroupFilter;
                               ERROR(Text000,TABLECAPTION);
                             END;
                             ResourceGroupFilterOnAfterVali;
                           END;

                OnLookup=BEGIN
                           ResourceGroup.RESET;
                           IF PAGE.RUNMODAL(0,ResourceGroup) = ACTION::LookupOK THEN BEGIN
                             Text := ResourceGroup."No.";
                             SetResourceGroupFilter;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 32  ;2   ;Field     ;
                CaptionML=[ENU=Response Date Filter;
                           NOR=Responsdatofilter;
                           SVE=Svarsdatumfilter];
                ToolTipML=[ENU=Specifies the filter that displays service tasks corresponding to service item lines with the specified value in the Response Date field.;
                           NOR=Angir filteret som viser serviceoppgaver som tilsvarer servicevarelinjene med den angitte verdien i feltet Responsdato.;
                           SVE=Anger filtret som visar serviceuppgifterna som motsvarar serviceartikelraderna med det angivna vÑrdet i fÑltet Svarsdatum.];
                ApplicationArea=#Service;
                SourceExpr=RespDateFilter;
                OnValidate=BEGIN
                             FILTERGROUP(2);
                             TempTextFilter := GETFILTER("Response Date");
                             FILTERGROUP(0);
                             SetRespDateFilter;
                             IF NOT TestFilter THEN BEGIN
                               RespDateFilter := TempTextFilter;
                               SetRespDateFilter;
                               ERROR(Text000,TABLECAPTION);
                             END;
                             RespDateFilterOnAfterValidate;
                           END;
                            }

    { 39  ;2   ;Field     ;
                CaptionML=[ENU=Allocation Status Filter;
                           NOR=Filter for tildelingsstatus;
                           SVE=Fîrdelningsstatusfilter];
                ToolTipML=[ENU=Specifies the filter that displays the service tasks corresponding to service item lines with a certain value in the Status Code of Resource Allocations.;
                           NOR=Angir filteret som viser serviceoppgavene som tilsvarer servicevarelinjene med en bestemt verdi i statuskoden for ressurstildelinger.;
                           SVE=Anger filtret som visar serviceuppgifterna som motsvarar serviceartikelraderna med ett visst vÑrde i Statuskod i Resursfîrdelningar.];
                OptionCaptionML=[ENU=" ,Nonactive,Active,Finished,Canceled,Reallocation Needed";
                                 NOR=" ,Ikke-aktiv,Aktiv,Fullfõrt,Avbrutt,Ny tildeling nõdvendig";
                                 SVE=" ,Ej aktiv,Aktiv,Avslutad,Avbruten,Omfîrd. nîdvÑndig"];
                ApplicationArea=#Service;
                SourceExpr=AllocationStatus;
                OnValidate=BEGIN
                             TempAllocationStatus := "Allocation Status Filter";
                             SetAllocationFilter;
                             IF NOT TestFilter THEN BEGIN
                               AllocationStatus := TempAllocationStatus;
                               SetAllocationFilter;
                               ERROR(Text000,TABLECAPTION);
                             END;
                             AllocationStatusOnAfterValidat;
                           END;
                            }

    { 56  ;2   ;Field     ;
                CaptionML=[ENU=Document Filter;
                           NOR=Dokumentfilter;
                           SVE=Dokumentfilter];
                ToolTipML=[ENU=Specifies the filter that displays all service tasks corresponding to documents of the specified type.;
                           NOR=Angir filteret som viser alle serviceoppgaver som tilsvarer dokumenter for den angitte typen.;
                           SVE=Anger filtret som visar alla serviceuppgifter som motsvarar dokumenten av angiven typ.];
                OptionCaptionML=[ENU=Order,Quote,All;
                                 NOR=Ordre,Tilbud,Alle;
                                 SVE=Order,Offert,Alla];
                ApplicationArea=#Service;
                SourceExpr=DocFilter;
                OnValidate=BEGIN
                             ServOrderFilter := '';
                             SetServOrderFilter;
                             SetDocFilter;
                             DocFilterOnAfterValidate;
                           END;
                            }

    { 60  ;2   ;Field     ;
                CaptionML=[ENU=No. Filter;
                           NOR=Nr.filter;
                           SVE=Nummerfilter];
                ToolTipML=[ENU=Specifies the filter that displays service tasks corresponding to the service item lines within the specified document.;
                           NOR=Angir filteret som viser serviceoppgaver som tilsvarer servicevarelinjene i det angitte dokumentet.;
                           SVE=Anger filtret som visar serviceuppgifterna som motsvarar serviceartikelraderna inom det angivna dokumentet.];
                ApplicationArea=#Service;
                SourceExpr=ServOrderFilter;
                OnValidate=BEGIN
                             FILTERGROUP(2);
                             TempTextFilter := GETFILTER("Document No.");
                             FILTERGROUP(0);
                             SetServOrderFilter;
                             IF NOT TestFilter THEN BEGIN
                               ServOrderFilter := TempTextFilter;
                               SetServOrderFilter;
                               ERROR(Text000,TABLECAPTION);
                             END;
                             ServOrderFilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           ServHeader.RESET;
                           SetDocFilterHeader(ServHeader);
                           IF PAGE.RUNMODAL(0,ServHeader) = ACTION::LookupOK THEN BEGIN
                             Text := ServHeader."No.";
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 40  ;2   ;Field     ;
                CaptionML=[ENU=Repair Status Code Filter;
                           NOR=Filter for repar.statuskode;
                           SVE=Reparationsstatus kodfilter];
                ToolTipML=[ENU=Specifies the Repair Status Code filter to view service tasks corresponding to service item lines with the specified repair status code.;
                           NOR=Angir reparasjonsstatuskodefilteret for Ü vise serviceoppgaver som tilsvarer servicevarelinjene med den angitte reparasjonsstatuskoden.;
                           SVE=Anger ett reparationsstatuskodfilter som ska anvÑndas fîr att visa vilka serviceuppgifter som motsvarar serviceartikelraderna med angiven reparationsstatuskod.];
                ApplicationArea=#Service;
                SourceExpr=RepairStatusFilter;
                OnValidate=BEGIN
                             FILTERGROUP(2);
                             TempTextFilter := GETFILTER("Repair Status Code");
                             FILTERGROUP(0);
                             SetRepStatFilter;
                             IF NOT TestFilter THEN BEGIN
                               RepairStatusFilter := TempTextFilter;
                               SetRepStatFilter;
                               ERROR(Text000,TABLECAPTION);
                             END;
                             RepairStatusFilterOnAfterValid;
                           END;

                OnLookup=BEGIN
                           RepairStatus.RESET;
                           IF PAGE.RUNMODAL(0,RepairStatus) = ACTION::LookupOK THEN BEGIN
                             Text := RepairStatus.Code;
                             SetRepStatFilter;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 1   ;1   ;Group     ;
                Editable=FALSE;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the estimated date when service should start on this service item line.;
                           NOR=Angir den beregnede datoen tjenesten skal starte pÜ denne servicevarelinjen.;
                           SVE=Anger det datum dÜ service berÑknas starta pÜ den hÑr serviceartikelraden.];
                ApplicationArea=#Service;
                SourceExpr="Response Date" }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the estimated time when service should start on this service item.;
                           NOR=Angir det beregnede klokkeslettet tjenesten skal starte pÜ denne servicevarelinjen.;
                           SVE=Anger den tidpunkt dÜ service berÑknas starta fîr den hÑr serviceartikeln.];
                ApplicationArea=#Service;
                SourceExpr="Response Time" }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the service priority for this item.;
                           NOR=Angir serviceprioriteten for denne varen.;
                           SVE=Anger serviceprioriteten fîr artikeln.];
                ApplicationArea=#Service;
                SourceExpr=Priority }

    { 57  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether the service document is a service order or service quote.;
                           NOR=Angir om servicedokumentet er en serviceordre eller et servicetilbud.;
                           SVE=Anger om servicedokumentet Ñr en serviceorder eller serviceoffert.];
                ApplicationArea=#Service;
                SourceExpr="Document Type" }

    { 26  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the service order linked to this service item line.;
                           NOR=Angir nummeret pÜ serviceordren som er koblet til denne servicevarelinjen.;
                           SVE=Anger numret pÜ serviceordern som Ñr kopplad till den hÑr serviceartikelraden.];
                ApplicationArea=#Service;
                SourceExpr="Document No." }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the repair status of this service item.;
                           NOR=Angir reparasjonsstatusen for denne servicevaren.;
                           SVE=Anger reparationsstatus fîr serviceartikeln.];
                ApplicationArea=#Service;
                SourceExpr="Repair Status Code" }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the service item number registered in the Service Item table.;
                           NOR=Angir servicevarenummeret som er registrert i Servicevare-tabellen.;
                           SVE=Anger det serviceartikelnummer som Ñr registrerat i tabellen Serviceartikel.];
                ApplicationArea=#Service;
                SourceExpr="Service Item No." }

    { 49  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer number associated with the service contract.;
                           NOR=Angir kundenummeret som er knyttet til servicekontrakten.;
                           SVE=Anger kundnumret som servicekontraktet Ñr kopplat till.];
                ApplicationArea=#Service;
                SourceExpr="Customer No." }

    { 61  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a code for an alternate shipment address if you want to ship to another address than the one that has been entered automatically. This field is also used in case of drop shipment.;
                           NOR=Angir en kode for en alternativ leveringsadresse hvis du vil levere til en annen adresse enn den som er angitt automatisk. Dette feltet brukes ogsÜ ved direkte levering.;
                           SVE=Anger en kod fîr en alternativ leveransadress om du vill leverera till en annan adress Ñn den som har angetts automatiskt. Det hÑr fÑltet anvÑnds ocksÜ vid direktutleverans.];
                ApplicationArea=#Service;
                SourceExpr="Ship-to Code";
                Visible=FALSE }

    { 45  ;2   ;Field     ;
                CaptionML=[ENU=Customer Name;
                           NOR=Kundenavn;
                           SVE=Kundnamn];
                ToolTipML=[ENU=Specifies the name of the customer.;
                           NOR=Angir navnet pÜ kunden.;
                           SVE=Anger namnet pÜ denna kund.];
                ApplicationArea=#Service;
                SourceExpr=Cust.Name;
                Visible=FALSE }

    { 18  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the service shelf this item is stored on.;
                           NOR=Angir nummeret pÜ servicehyllen denne varen er lagret pÜ.;
                           SVE=Anger numret pÜ servicehyllan som den hÑr artikeln fîrvaras pÜ.];
                ApplicationArea=#Service;
                SourceExpr="Service Shelf No." }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the item number linked to this service item.;
                           NOR=Angir varenummeret som er koblet til denne servicevaren.;
                           SVE=Anger artikelnumret som Ñr kopplat till serviceartikeln.];
                ApplicationArea=#Service;
                SourceExpr="Item No." }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the service item group for this item.;
                           NOR=Angir koden til servicevaregruppen for denne varen.;
                           SVE=Anger koden fîr serviceartikelgruppen fîr den hÑr artikeln.];
                ApplicationArea=#Service;
                SourceExpr="Service Item Group Code" }

    { 38  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the variant of the item on the line.;
                           NOR=Angir varianten for varen pÜ linjen.;
                           SVE=Anger varianten av artikeln pÜ raden.];
                ApplicationArea=#Planning;
                SourceExpr="Variant Code";
                Visible=FALSE }

    { 16  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the serial number of this item.;
                           NOR=Angir serienummeret pÜ denne varen.;
                           SVE=Anger artikelns serienummer.];
                ApplicationArea=#ItemTracking;
                SourceExpr="Serial No.";
                OnAssistEdit=BEGIN
                               CLEAR(ItemLedgerEntry);
                               ItemLedgerEntry.SETRANGE("Item No.","Item No.");
                               ItemLedgerEntry.SETRANGE("Variant Code","Variant Code");
                               ItemLedgerEntry.SETRANGE("Serial No.","Serial No.");
                               PAGE.RUN(PAGE::"Item Ledger Entries",ItemLedgerEntry);
                             END;
                              }

    { 34  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a description of this service item.;
                           NOR=Angir en beskrivelse av denne servicevaren.;
                           SVE=Anger en beskrivning av serviceartikeln.];
                ApplicationArea=#Service;
                SourceExpr=Description;
                Visible=FALSE }

    { 20  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies that warranty on either parts or labor exists for this item.;
                           NOR=Angir at det finnes garanti pÜ begge deler eller arbeid for denne varen.;
                           SVE=Anger att det finns en garanti pÜ antingen reservdelar eller arbete fîr artikeln.];
                ApplicationArea=#Service;
                SourceExpr=Warranty }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the service contract associated with the item or service on the line.;
                           NOR=Angir nummeret pÜ servicekontrakten som er knyttet til varen eller tjenesten pÜ linjen.;
                           SVE=Anger numret pÜ servicekontraktet som Ñr kopplat till artikeln eller servicen pÜ raden.];
                ApplicationArea=#Service;
                SourceExpr="Contract No." }

    { 24  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of resource allocations with the allocation status specified in the Allocation Status Filter field.;
                           NOR=Angir antall ressurstildelinger med tildelingsstatusen angitt i feltet Filter for tildelingsstatus.;
                           SVE=Anger antalet resursfîrdelningar med den fîrdelningsstatus som har angetts i fÑltet Fîrdelningsstatusfilter.];
                ApplicationArea=#Service;
                SourceExpr="No. of Allocations" }

    { 44  ;1   ;Group      }

    { 31  ;2   ;Field     ;
                Name=Description2;
                ToolTipML=[ENU=Specifies a description of this service item.;
                           NOR=Angir en beskrivelse av denne servicevaren.;
                           SVE=Anger en beskrivning av serviceartikeln.];
                ApplicationArea=#Service;
                SourceExpr=Description;
                Editable=FALSE }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                ApplicationArea=#RecordLinks;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                ApplicationArea=#Notes;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      ItemLedgerEntry@1013 : Record 32;
      RepairStatus@1010 : Record 5927;
      Cust@1002 : Record 18;
      ServHeader@1000 : Record 5900;
      ServItemLine@1001 : Record 5901;
      Res@1011 : Record 156;
      ResourceGroup@1015 : Record 152;
      UserMgt@1003 : Codeunit 5700;
      RepairStatusFilter@1006 : Text;
      RespDateFilter@1007 : Text;
      ServOrderFilter@1008 : Text;
      ResourceFilter@1009 : Text;
      AllocationStatus@1005 : ' ,Nonactive,Active,Finished,Canceled,Reallocation Needed';
      DocFilter@1012 : 'Order,Quote,All';
      ResourceGroupFilter@1014 : Text;
      TempTextFilter@1016 : Text;
      Text000@1017 : TextConst 'ENU=There is no %1 within the filter.;NOR=Det finnes ingen %1 i filteret.;SVE=%1 saknas i filtret.';
      TempAllocationStatus@1018 : ' ,Nonactive,Active,Finished,Canceled,Reallocation Needed';

    [External]
    PROCEDURE SetAllFilters@5();
    BEGIN
      SetRepStatFilter;
      SetRespDateFilter;
      SetDocFilter;
      SetServOrderFilter;
      SetResourceFilter;
      SetResourceGroupFilter;
      SetAllocationFilter;
    END;

    [External]
    PROCEDURE SetRepStatFilter@4();
    BEGIN
      FILTERGROUP(2);
      SETFILTER("Repair Status Code",RepairStatusFilter);
      RepairStatusFilter := GETFILTER("Repair Status Code");
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetRespDateFilter@6();
    VAR
      TextManagement@1000 : Codeunit 41;
    BEGIN
      FILTERGROUP(2);
      TextManagement.MakeDateFilter(RespDateFilter);
      SETFILTER("Response Date",RespDateFilter);
      RespDateFilter := GETFILTER("Response Date");
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetDocFilter@8();
    BEGIN
      FILTERGROUP(2);
      CASE DocFilter OF
        DocFilter::Order:
          SETRANGE("Document Type","Document Type"::Order);
        DocFilter::Quote:
          SETRANGE("Document Type","Document Type"::Quote);
        DocFilter::All:
          SETRANGE("Document Type");
      END;
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetDocFilterHeader@2(VAR ServHeader@1000 : Record 5900);
    BEGIN
      WITH ServHeader DO BEGIN
        FILTERGROUP(2);
        CASE DocFilter OF
          DocFilter::Order:
            SETRANGE("Document Type","Document Type"::Order);
          DocFilter::Quote:
            SETRANGE("Document Type","Document Type"::Quote);
          DocFilter::All:
            SETRANGE("Document Type");
        END;
        FILTERGROUP(0);
      END;
    END;

    [External]
    PROCEDURE SetServOrderFilter@7();
    BEGIN
      FILTERGROUP(2);
      SETFILTER("Document No.",ServOrderFilter);
      ServOrderFilter := GETFILTER("Document No.");
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetResourceFilter@1();
    BEGIN
      FILTERGROUP(2);
      IF ResourceFilter <> '' THEN BEGIN
        SETFILTER("No. of Active/Finished Allocs",'>0');
        SETFILTER("Resource Filter",ResourceFilter);
        ResourceFilter := GETFILTER("Resource Filter");
      END ELSE BEGIN
        IF ResourceGroupFilter = '' THEN
          SETRANGE("No. of Active/Finished Allocs");
        SETRANGE("Resource Filter");
      END;
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetResourceGroupFilter@9();
    BEGIN
      FILTERGROUP(2);
      IF ResourceGroupFilter <> '' THEN BEGIN
        SETFILTER("No. of Active/Finished Allocs",'>0');
        SETFILTER("Resource Group Filter",ResourceGroupFilter);
        ResourceGroupFilter := GETFILTER("Resource Group Filter");
      END ELSE BEGIN
        IF ResourceFilter = '' THEN
          SETRANGE("No. of Active/Finished Allocs");
        SETRANGE("Resource Group Filter");
      END;
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetAllocationFilter@3();
    BEGIN
      FILTERGROUP(2);
      CASE AllocationStatus OF
        AllocationStatus::" ":
          BEGIN
            SETRANGE("Allocation Status Filter");
            SETRANGE("No. of Allocations");
          END;
        AllocationStatus::Nonactive:
          BEGIN
            SETRANGE("Allocation Status Filter","Allocation Status Filter"::Nonactive);
            SETFILTER("No. of Allocations",'>0');
          END;
        AllocationStatus::Active:
          BEGIN
            SETRANGE("Allocation Status Filter","Allocation Status Filter"::Active);
            SETFILTER("No. of Allocations",'>0');
          END;
        AllocationStatus::Finished:
          BEGIN
            SETRANGE("Allocation Status Filter","Allocation Status Filter"::Finished);
            SETFILTER("No. of Allocations",'>0');
          END;
        AllocationStatus::Canceled:
          BEGIN
            SETRANGE("Allocation Status Filter","Allocation Status Filter"::Canceled);
            SETFILTER("No. of Allocations",'>0');
          END;
        AllocationStatus::"Reallocation Needed":
          BEGIN
            SETRANGE("Allocation Status Filter","Allocation Status Filter"::"Reallocation Needed");
            SETFILTER("No. of Allocations",'>0');
          END;
      END;
      FILTERGROUP(0);
    END;

    LOCAL PROCEDURE TestFilter@10() : Boolean;
    BEGIN
      IF ServOrderFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        IF GETRANGEMIN("Document No.") = GETRANGEMAX("Document No.") THEN
          IF ISEMPTY THEN BEGIN
            FILTERGROUP(0);
            EXIT(FALSE);
          END;
        FILTERGROUP(0);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE RepairStatusFilterOnAfterValid@19075265();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ResourceFilterOnAfterValidate@19005532();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE AllocationStatusOnAfterValidat@19046183();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE DocFilterOnAfterValidate@19004301();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ServOrderFilterOnAfterValidate@19063213();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE RespDateFilterOnAfterValidate@19063229();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ResourceGroupFilterOnAfterVali@19056724();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    BEGIN
    END.
  }
}

