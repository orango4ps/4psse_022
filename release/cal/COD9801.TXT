OBJECT Codeunit 9801 Identity Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TenantManagementHelper@1005 : Codeunit 417;
      UserAccountHelper@1003 : DotNet "'Microsoft.Dynamics.Nav.NavUserAccount, Version=14.0.*.*, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.NavUserAccount.NavUserAccountHelper";
      NavTok@1000 : TextConst '@@@={Locked};ENU=NAV;NOR=NAV';
      InvoiceTok@1001 : TextConst '@@@={Locked};ENU=INV;NOR=INV';
      FinancialsTok@1002 : TextConst '@@@={Locked};ENU=FIN;NOR=FIN';
      C5Tok@1004 : TextConst '@@@={Locked};ENU=C5;NOR=C5';

    [Internal]
    PROCEDURE SetAuthenticationKey@1(UserSecurityID@1000 : GUID;Key@1001 : Text[80]);
    BEGIN
      IF NOT UserAccountHelper.TrySetAuthenticationKey(UserSecurityID,Key) THEN
        ERROR(GETLASTERRORTEXT);
    END;

    [Internal]
    PROCEDURE GetAuthenticationKey@14(UserSecurityID@1000 : GUID) Key : Text[80];
    BEGIN
      IF NOT UserAccountHelper.TryGetAuthenticationKey(UserSecurityID,Key) THEN
        Key := FORMAT(GETLASTERRORTEXT,80);
    END;

    [Internal]
    PROCEDURE GetNameIdentifier@2(UserSecurityID@1000 : GUID) NameID : Text[250];
    BEGIN
      IF NOT UserAccountHelper.TryGetNameIdentifier(UserSecurityID,NameID) THEN
        NameID := FORMAT(GETLASTERRORTEXT,250);
    END;

    [Internal]
    PROCEDURE GetObjectId@29(UserSecurityID@1000 : GUID) ObjectID : Text[250];
    BEGIN
      IF NOT UserAccountHelper.TryGetAuthenticationObjectId(UserSecurityID,ObjectID) THEN
        ObjectID := FORMAT(GETLASTERRORTEXT,250);
    END;

    [Internal]
    PROCEDURE CreateWebServicesKey@8(UserSecurityID@1000 : GUID;ExpiryDate@1001 : DateTime) Key : Text[80];
    BEGIN
      IF NOT UserAccountHelper.TryCreateWebServicesKey(UserSecurityID,ExpiryDate,Key) THEN
        ERROR(GETLASTERRORTEXT);
    END;

    [Internal]
    PROCEDURE GetPuid@23() : Text;
    BEGIN
      EXIT(UserAccountHelper.GetPuid);
    END;

    [Internal]
    PROCEDURE CreateWebServicesKeyNoExpiry@13(UserSecurityID@1000 : GUID) Key : Text[80];
    VAR
      ExpiryDate@1001 : DateTime;
    BEGIN
      IF NOT UserAccountHelper.TryCreateWebServicesKey(UserSecurityID,ExpiryDate,Key) THEN
        ERROR(GETLASTERRORTEXT);
    END;

    [Internal]
    PROCEDURE ClearWebServicesKey@22(UserSecurityID@1000 : GUID);
    BEGIN
      IF NOT UserAccountHelper.TryClearWebServicesKey(UserSecurityID) THEN
        ERROR(GETLASTERRORTEXT);
    END;

    [Internal]
    PROCEDURE GetWebServicesKey@4(UserSecurityID@1000 : GUID) Key : Text[80];
    VAR
      ExpiryDate@1001 : DateTime;
    BEGIN
      IF NOT UserAccountHelper.TryGetWebServicesKey(UserSecurityID,Key,ExpiryDate) THEN
        Key := FORMAT(GETLASTERRORTEXT,80);
    END;

    [Internal]
    PROCEDURE IsAzure@5() Ok : Boolean;
    BEGIN
      Ok := UserAccountHelper.IsAzure;
    END;

    [Internal]
    PROCEDURE GetWebServiceExpiryDate@6(UserSecurityID@1000 : GUID) ExpiryDate : DateTime;
    VAR
      Key@1001 : Text[80];
    BEGIN
      IF NOT UserAccountHelper.TryGetWebServicesKey(UserSecurityID,Key,ExpiryDate) THEN
        ExpiryDate := CURRENTDATETIME;
    END;

    [Internal]
    PROCEDURE GetACSStatus@7(UserSecurityID@1001 : GUID) ACSStatus : Integer;
    VAR
      ACSStatusOption@1000 : 'Disabled,Pending,Registered,Unknown';
      Key@1002 : Text[80];
      NameID@1003 : Text[250];
    BEGIN
      // Determines the status as follows:
      // If neither Nameidentifier, nor authentication key then Disabled
      // If authentiation key then Pending
      // If NameIdentifier then Registered
      // If no permission: Unknown

      IF NOT UserAccountHelper.TryGetAuthenticationKey(UserSecurityID,Key) THEN BEGIN
        ACSStatusOption := ACSStatusOption::Unknown;
        ACSStatus := ACSStatusOption;
        EXIT;
      END;

      IF NOT UserAccountHelper.TryGetNameIdentifier(UserSecurityID,NameID) THEN BEGIN
        ACSStatusOption := ACSStatusOption::Unknown;
        ACSStatus := ACSStatusOption;
        EXIT;
      END;

      IF NameID = '' THEN BEGIN
        IF Key = '' THEN
          ACSStatusOption := ACSStatusOption::Disabled
        ELSE
          ACSStatusOption := ACSStatusOption::Pending;
      END ELSE
        ACSStatusOption := ACSStatusOption::Registered;

      ACSStatus := ACSStatusOption;
    END;

    LOCAL PROCEDURE ValidateKeyStrength@9(Key@1001 : Text[250]) : Boolean;
    VAR
      i@1000 : Integer;
      KeyLen@1002 : Integer;
      HasUpper@1003 : Boolean;
      HasLower@1004 : Boolean;
      HasNumeric@1005 : Boolean;
      ValidationError@1007 : Boolean;
    BEGIN
      KeyLen := STRLEN(Key);

      IF KeyLen < 8 THEN
        EXIT(FALSE);

      OnAfterKeyLenCheck(KeyLen,ValidationError);
      IF ValidationError THEN
        EXIT(FALSE);

      FOR i := 1 TO STRLEN(Key) DO BEGIN
        CASE Key[i] OF
          'A'..'Z':
            HasUpper := TRUE;
          'a'..'z':
            HasLower := TRUE;
          '0'..'9':
            HasNumeric := TRUE;
        END;

        IF HasUpper AND HasLower AND HasNumeric THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE ValidatePasswordStrength@10(Password@1000 : Text[250]) IsValid : Boolean;
    BEGIN
      IsValid := ValidateKeyStrength(Password);
    END;

    [External]
    PROCEDURE ValidateAuthKeyStrength@11(AuthKey@1000 : Text[250]) IsValid : Boolean;
    BEGIN
      IsValid := ValidateKeyStrength(AuthKey);
    END;

    [Internal]
    PROCEDURE GetMaskedNavPassword@15(UserSecurityID@1000 : GUID) MaskedPassword : Text[80];
    BEGIN
      IF UserAccountHelper.IsPasswordSet(UserSecurityID) THEN
        MaskedPassword := '********'
      ELSE
        MaskedPassword := '';
    END;

    [Internal]
    PROCEDURE IsWindowsAuthentication@16() Ok : Boolean;
    BEGIN
      Ok := UserAccountHelper.IsWindowsAuthentication;
    END;

    [Internal]
    PROCEDURE IsUserNamePasswordAuthentication@17() Ok : Boolean;
    BEGIN
      Ok := UserAccountHelper.IsUserNamePasswordAuthentication;
    END;

    [Internal]
    PROCEDURE IsAccessControlServiceAuthentication@18() Ok : Boolean;
    BEGIN
      Ok := UserAccountHelper.IsAccessControlServiceAuthentication;
    END;

    [Internal]
    PROCEDURE UserName@19(Sid@1000 : Text) : Text[208];
    BEGIN
      IF Sid = '' THEN
        EXIT('');

      EXIT(UserAccountHelper.UserName(Sid));
    END;

    [Internal]
    PROCEDURE SetAuthenticationEmail@12(UserSecurityId@1000 : GUID;AuthenticationEmail@1001 : Text[250]);
    BEGIN
      CLEARLASTERROR;
      IF NOT UserAccountHelper.TrySetAuthenticationEmail(UserSecurityId,AuthenticationEmail) THEN
        ERROR(GETLASTERRORTEXT);
    END;

    [Internal]
    PROCEDURE GetAuthenticationStatus@21(UserSecurityId@1001 : GUID) O365AuthStatus : Integer;
    BEGIN
      O365AuthStatus := UserAccountHelper.GetAuthenticationStatus(UserSecurityId);
    END;

    [External]
    PROCEDURE GetAadTenantId@3() : Text;
    BEGIN
      EXIT(TenantManagementHelper.GetAadTenantId);
    END;

    [External]
    PROCEDURE IsInvAppId@20() : Boolean;
    VAR
      AppId@1000 : Text;
    BEGIN
      AppId := APPLICATIONIDENTIFIER;
      OnBeforeGetApplicationIdentifier(AppId);
      EXIT(AppId = InvoiceTok);
    END;

    [External]
    PROCEDURE IsFinAppId@24() : Boolean;
    VAR
      AppId@1000 : Text;
    BEGIN
      AppId := APPLICATIONIDENTIFIER;
      OnBeforeGetApplicationIdentifier(AppId);
      EXIT(AppId = FinancialsTok);
    END;

    [External]
    PROCEDURE IsNavAppId@25() : Boolean;
    VAR
      AppId@1000 : Text;
    BEGIN
      AppId := APPLICATIONIDENTIFIER;
      OnBeforeGetApplicationIdentifier(AppId);
      EXIT(AppId = NavTok);
    END;

    [External]
    PROCEDURE IsC5AppId@26() : Boolean;
    VAR
      AppId@1000 : Text;
    BEGIN
      AppId := APPLICATIONIDENTIFIER;
      OnBeforeGetApplicationIdentifier(AppId);
      EXIT(AppId = C5Tok);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterKeyLenCheck@28(KeyLen@1000 : Integer;VAR ValidationError@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnBeforeGetApplicationIdentifier@27(VAR AppId@1000 : Text);
    BEGIN
    END;

    BEGIN
    END.
  }
}

