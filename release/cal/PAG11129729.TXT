OBJECT Page 11129729 Bing Maps Employee
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Bing Maps Mitarbeiter;
               ENU=Bing Maps Employee;
               NLD=Bing maps werknemer];
    SourceTable=Table5200;
    OnInit=BEGIN
             DisplayMultipleLocations := FALSE;
           END;

  }
  CONTROLS
  {
    { 1100525000;;Container;
                Name=Container;
                CaptionML=[DEU=Container;
                           ENU=Container;
                           NLD=Container];
                ContainerType=ContentArea }

    { 1100525001;1;Field  ;
                Name=Map;
                CaptionML=[DEU=Karte;
                           ENU=Map;
                           NLD=Kaart];
                ControlAddIn=[Fps.Nav.Addin.BingMaps;PublicKeyToken=024bd013665211e9] }

  }
  CODE
  {
    VAR
      BingMapsHandler@1100525000 : Codeunit 11012485;
      Text000@1100525001 : TextConst 'DEU=Konfigurieren Sie Bing Maps.;ENU=Please configure Bing Maps.;NLD=Stel Bing Maps in.';
      Text001@1100525004 : TextConst 'DEU=Verschieben;ENU=Move;NLD=Verplaats';
      DisplayMultipleLocations@1100525005 : Boolean;
      Employee@1100525006 : Record 5200;
      EmployeeExtension@1100528100 : Record 11229470;

    PROCEDURE setLocation@1100525000(record@1100525000 : Record 5200);
    BEGIN
      Rec := record;
      Employee.COPY(record, FALSE);
    END;

    LOCAL PROCEDURE addEmployeeLocationToMap@1100525001(employee@1100525002 : Record 5200);
    VAR
      titleValue@1100525000 : Text;
      descriptionValue@1100525001 : Text;
      fieldID@1100525003 : Integer;
      ReturnType@1100525004 : 'NAV,FSA';
    BEGIN
      titleValue := BingMapsHandler.GetValueFromField(
        employee.RECORDID, DATABASE::Employee,
        BingMapsHandler.GetFieldIDForTitle(DATABASE::Employee, ReturnType::NAV));
      descriptionValue := BingMapsHandler.BuildDescription(
        employee.RECORDID, DATABASE::Employee, ReturnType::NAV);

      IF EmployeeExtension.GET(employee."No.") THEN BEGIN
        IF (EmployeeExtension.Latitude <> '') AND (EmployeeExtension.Longitude <> '') THEN
          CurrPage.Map.addPinToMapLatLng(
            EmployeeExtension."No.", titleValue, FORMAT(DATABASE::Employee), descriptionValue,
            '', EmployeeExtension.Latitude, EmployeeExtension.Longitude)
      END ELSE BEGIN
        CurrPage.Map.addPinToMapCode(
          employee."No.", titleValue, FORMAT(DATABASE::Employee), descriptionValue, '',
          STRSUBSTNO('%1 %2 %3', employee.City, employee.Address, employee."Post Code"));
      END;
    END;

    PROCEDURE setLocations@1100525003(record@1100525000 : Record 5200);
    BEGIN
      Rec := record;
      Employee.COPY(record, FALSE);
      DisplayMultipleLocations := TRUE;
    END;

    EVENT Map@-1100525001::ControlAddInReady@20();
    VAR
      BingMapsSetup@1100525000 : Page 11127140;
    BEGIN
      IF BingMapsHandler.SetupIsDoneAndEnabled THEN
        CurrPage.Map.setApiKey(
          BingMapsHandler.GetApiKey(CurrPage.OBJECTID(FALSE)))
      ELSE
        BEGIN
          MESSAGE(Text000);
          BingMapsSetup.RUN;
          CurrPage.CLOSE;
        END;
    END;

    EVENT Map@-1100525001::MapLoaded@21();
    BEGIN
      CurrPage.Map.allowEditFor(FORMAT(DATABASE::Employee), Text001);
      IF BingMapsHandler.DisplayAsPin(DATABASE::Employee) THEN
        CurrPage.Map.displayAsPin(FORMAT(DATABASE::Employee));
      IF DisplayMultipleLocations = TRUE THEN
        REPEAT
          addEmployeeLocationToMap(Employee);
        UNTIL Employee.NEXT = 0
      ELSE BEGIN
        addEmployeeLocationToMap(Employee);

        IF NOT EmployeeExtension.GET(Employee."No.") THEN
          EXIT;
        CurrPage.Map.setCenter(EmployeeExtension.Latitude, EmployeeExtension.Longitude);
      END;
    END;

    EVENT Map@-1100525001::PinAdded@22(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
      IF DisplayMultipleLocations = TRUE THEN
        CurrPage.Map.setBestView
      ELSE
        CurrPage.Map.setZoom(BingMapsHandler.GetZoomLevel);
    END;

    EVENT Map@-1100525001::AddLocationToSelection@23(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::RemoveLocationFromSelection@24(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::DirectionsReady@25(distance@1100525001 : Text;time@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::DirectionsError@26();
    BEGIN
    END;

    EVENT Map@-1100525001::LocationUpdated@27(no@1100525003 : Text;type@1100525002 : Text;lat@1100525001 : Text;lng@1100525000 : Text);
    VAR
      TableInteger@1100525004 : Integer;
    BEGIN
      EVALUATE(TableInteger, type);
      BingMapsHandler.UpdateLocation(no, TableInteger, lat, lng);
    END;

    EVENT Map@-1100525001::LocationAdded@28(no@1100525003 : Text;type@1100525002 : Text;lat@1100525001 : Text;lng@1100525000 : Text);
    VAR
      TableInteger@1100525004 : Integer;
    BEGIN
      EVALUATE(TableInteger, type);
      BingMapsHandler.UpdateLocation(no, TableInteger, lat, lng);
    END;

    EVENT Map@-1100525001::LocationRemoved@29(no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::ExtraAction@30(action@1100525002 : Text;no@1100525001 : Text;type@1100525000 : Text);
    BEGIN
    END;

    EVENT Map@-1100525001::ZoomLevel@31(level@1100525000 : Text);
    VAR
      levelInteger@1100525001 : Integer;
    BEGIN
      IF EVALUATE(levelInteger, level) THEN
        BingMapsHandler.SetZoomLevel(levelInteger);
    END;

    EVENT Map@-1100525001::RegisterEvent@32(no@1100528102 : Text;type@1100528101 : Text;eventname@1100528100 : Text);
    BEGIN
      BingMapsHandler.WriteToBingMapsLogUsingQuery(no, CurrPage.OBJECTID(FALSE), eventname, type);
    END;

    BEGIN
    END.
  }
}

