OBJECT Page 5528 Purchase Invoice Line Entity
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW111.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Purchase Invoice Line Entity;
               NOR=Enhet for kj›psfakturalinje;
               SVE=Enhet f”r ink”psfakturarad];
    SourceTable=Table5478;
    DelayedInsert=Yes;
    PageType=ListPart;
    SourceTableTemporary=Yes;
    OnFindRecord=VAR
                   PurchInvAggregator@1002 : Codeunit 5529;
                   DocumentIdFilter@1001 : Text;
                   FilterView@1000 : Text;
                 BEGIN
                   IF NOT LinesLoaded THEN BEGIN
                     FilterView := GETVIEW;
                     DocumentIdFilter := GETFILTER("Document Id");
                     PurchInvAggregator.LoadLines(Rec,DocumentIdFilter);
                     SETVIEW(FilterView);
                     IF NOT FINDFIRST THEN
                       EXIT(FALSE);
                     LinesLoaded := TRUE;
                   END;

                   EXIT(TRUE);
                 END;

    OnAfterGetRecord=BEGIN
                       SetCalculatedFields;
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                  VALIDATE(Type,Type::Item);
                  RegisterFieldSet(FIELDNO(Type));
                END;

    OnInsertRecord=VAR
                     PurchInvAggregator@1000 : Codeunit 5529;
                   BEGIN
                     IF InsertItem THEN
                       InsertItemOnTheFly;
                     PurchInvAggregator.PropagateInsertLine(Rec,TempFieldBuffer);
                   END;

    OnModifyRecord=VAR
                     PurchInvAggregator@1000 : Codeunit 5529;
                   BEGIN
                     IF InsertItem THEN
                       InsertItemOnTheFly;
                     PurchInvAggregator.PropagateModifyLine(Rec,TempFieldBuffer);
                   END;

    OnDeleteRecord=VAR
                     PurchInvAggregator@1000 : Codeunit 5529;
                   BEGIN
                     PurchInvAggregator.PropagateDeleteLine(Rec);
                   END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                Name=sequence;
                CaptionML=[@@@={Locked};
                           ENU=sequence;
                           NOR=sequence;
                           SVE=sequence];
                ApplicationArea=#All;
                SourceExpr="Line No.";
                OnValidate=BEGIN
                             IF (xRec."Line No." <> "Line No.") AND (xRec."Line No." <> 0) THEN
                               ERROR(CannotChangeLineNoErr);

                             RegisterFieldSet(FIELDNO("Line No."));
                           END;
                            }

    { 4   ;2   ;Field     ;
                Name=itemId;
                CaptionML=[@@@={Locked};
                           ENU=itemId;
                           NOR=itemId;
                           SVE=itemId];
                ApplicationArea=#All;
                SourceExpr="Item Id";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Type));
                             RegisterFieldSet(FIELDNO("No."));
                             RegisterFieldSet(FIELDNO("Item Id"));

                             Item.SETRANGE(Id,"Item Id");

                             IF NOT Item.FINDFIRST THEN BEGIN
                               InsertItem := TRUE;
                               CheckIntegrationIdInUse;

                               Item.Id := "Item Id";
                               RegisterFieldSet(Item.FIELDNO(Id));
                               EXIT;
                             END;

                             "No." := Item."No.";
                           END;
                            }

    { 5   ;2   ;Field     ;
                Name=accountId;
                CaptionML=[@@@={Locked};
                           ENU=accountId;
                           NOR=accountId;
                           SVE=accountId];
                ApplicationArea=#All;
                SourceExpr="Account Id";
                OnValidate=VAR
                             EmptyGuid@1000 : GUID;
                           BEGIN
                             IF "Account Id" <> EmptyGuid THEN
                               IF Item."No." <> '' THEN
                                 ERROR(BothItemIdAndAccountIdAreSpecifiedErr);
                             RegisterFieldSet(FIELDNO(Type));
                             RegisterFieldSet(FIELDNO("Account Id"));
                             RegisterFieldSet(FIELDNO("No."));
                           END;
                            }

    { 6   ;2   ;Field     ;
                Name=lineType;
                CaptionML=[@@@={Locked};
                           ENU=lineType;
                           NOR=lineType;
                           SVE=lineType];
                ApplicationArea=#All;
                SourceExpr="API Type";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Type));
                           END;
                            }

    { 23  ;2   ;Field     ;
                Name=lineDetails;
                CaptionML=[@@@={Locked};
                           ENU=lineDetails;
                           NOR=lineDetails;
                           SVE=lineDetails];
                ToolTipML=[ENU=Specifies details about the line.;
                           NOR=Angir detaljene for linjen.;
                           SVE=Anger information om raden.];
                ApplicationArea=#All;
                SourceExpr=LineObjectDetailsJSON;
                OnValidate=VAR
                             GraphMgtComplexTypes@1000 : Codeunit 5468;
                           BEGIN
                             IF NOT InsertItem THEN
                               EXIT;

                             GraphMgtComplexTypes.ParseDocumentLineObjectDetailsFromJSON(
                               LineObjectDetailsJSON,Item."No.",Item.Description,Item."Description 2");

                             IF Item."No." <> '' THEN
                               RegisterItemFieldSet(Item.FIELDNO("No."));

                             RegisterFieldSet(FIELDNO("No."));

                             IF Item.Description <> '' THEN
                               RegisterItemFieldSet(Item.FIELDNO(Description));

                             IF Description = '' THEN BEGIN
                               Description := Item.Description;
                               RegisterFieldSet(FIELDNO(Description));
                             END;

                             IF Item."Description 2" <> '' THEN BEGIN
                               "Description 2" := Item."Description 2";
                               RegisterItemFieldSet(Item.FIELDNO("Description 2"));
                               RegisterFieldSet(FIELDNO("Description 2"));
                             END;
                           END;

                ODataEDMType=DOCUMENTLINEOBJECTDETAILS }

    { 7   ;2   ;Field     ;
                Name=description;
                CaptionML=[ENU=description;
                           NOR=beskrivelse;
                           SVE=beskrivning];
                ToolTipML=[ENU=Specifies the description of the purchase invoice line.;
                           NOR=Angir beskrivelsen av kj›psfakturalinjen.;
                           SVE=Anger en beskrivning av ink”psfakturaraden.];
                ApplicationArea=#All;
                SourceExpr=Description;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Description));
                           END;
                            }

    { 24  ;2   ;Field     ;
                Name=unitOfMeasure;
                CaptionML=[@@@={Locked};
                           ENU=unitOfMeasure;
                           NOR=unitOfMeasure;
                           SVE=unitOfMeasure];
                ToolTipML=[ENU=Specifies Unit of Measure.;
                           NOR=Angir enhet.;
                           SVE=Anger enheten.];
                ApplicationArea=#All;
                SourceExpr=UnitOfMeasureJSON;
                OnValidate=VAR
                             TempUnitOfMeasure@1002 : TEMPORARY Record 204;
                             PurchInvAggregator@1000 : Codeunit 5529;
                             GraphCollectionMgtItem@1001 : Codeunit 5470;
                           BEGIN
                             PurchInvAggregator.VerifyCanUpdateUOM(Rec);
                             GraphCollectionMgtItem.ParseJSONToUnitOfMeasure(UnitOfMeasureJSON,TempUnitOfMeasure);
                             "Unit of Measure Code" := TempUnitOfMeasure.Code;
                             RegisterFieldSet(FIELDNO("Unit of Measure Code"));

                             IF InsertItem THEN
                               EXIT;

                             PurchInvAggregator.UpdateUnitOfMeasure(Item,UnitOfMeasureJSON);
                           END;

                ODataEDMType=ITEM-UOM }

    { 8   ;2   ;Field     ;
                Name=unitCost;
                CaptionML=[@@@={Locked};
                           ENU=directUnitCost;
                           NOR=directUnitCost;
                           SVE=directUnitCost];
                ApplicationArea=#All;
                SourceExpr="Direct Unit Cost";
                OnValidate=BEGIN
                             IF InsertItem THEN BEGIN
                               Item."Unit Cost" := "Direct Unit Cost";
                               RegisterFieldSet(Item.FIELDNO("Unit Cost"));
                             END;

                             RegisterFieldSet(FIELDNO("Direct Unit Cost"));
                           END;
                            }

    { 9   ;2   ;Field     ;
                Name=quantity;
                CaptionML=[@@@={Locked};
                           ENU=quantity;
                           NOR=quantity;
                           SVE=quantity];
                ApplicationArea=#All;
                SourceExpr=Quantity;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Quantity));
                           END;
                            }

    { 10  ;2   ;Field     ;
                Name=discountAmount;
                CaptionML=[@@@={Locked};
                           ENU=discountAmount;
                           NOR=discountAmount;
                           SVE=discountAmount];
                ApplicationArea=#All;
                SourceExpr="Line Discount Amount";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Line Discount Amount"));
                           END;
                            }

    { 11  ;2   ;Field     ;
                Name=discountPercent;
                CaptionML=[@@@={Locked};
                           ENU=discountPercent;
                           NOR=discountPercent;
                           SVE=discountPercent];
                ApplicationArea=#All;
                SourceExpr="Line Discount %";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Line Discount %"));
                           END;
                            }

    { 12  ;2   ;Field     ;
                Name=discountAppliedBeforeTax;
                CaptionML=[ENU=discountAppliedBeforeTax;
                           NOR=discountAppliedBeforeTax;
                           SVE=discountAppliedBeforeTax];
                ApplicationArea=#All;
                SourceExpr="Discount Applied Before Tax" }

    { 13  ;2   ;Field     ;
                Name=amountExcludingTax;
                CaptionML=[@@@={Locked};
                           ENU=amountExcludingTax;
                           NOR=amountExcludingTax;
                           SVE=amountExcludingTax];
                ApplicationArea=#All;
                SourceExpr="Line Amount Excluding Tax";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Amount));
                           END;
                            }

    { 14  ;2   ;Field     ;
                Name=taxCode;
                CaptionML=[@@@={Locked};
                           ENU=taxCode;
                           NOR=taxCode;
                           SVE=taxCode];
                ApplicationArea=#All;
                SourceExpr="Tax Code";
                OnValidate=VAR
                             GeneralLedgerSetup@1000 : Record 98;
                           BEGIN
                             IF InsertItem THEN BEGIN
                               IF GeneralLedgerSetup.UseVat THEN
                                 EXIT;

                               Item."Tax Group Code" := COPYSTR("Tax Code",1,MAXSTRLEN(Item."Tax Group Code"));
                               RegisterFieldSet(FIELDNO("Tax Code"));
                             END;
                           END;
                            }

    { 15  ;2   ;Field     ;
                Name=taxPercent;
                CaptionML=[@@@={Locked};
                           ENU=taxPercent;
                           NOR=taxPercent;
                           SVE=taxPercent];
                ApplicationArea=#All;
                SourceExpr="VAT %" }

    { 16  ;2   ;Field     ;
                Name=totalTaxAmount;
                CaptionML=[@@@={Locked};
                           ENU=totalTaxAmount;
                           NOR=totalTaxAmount;
                           SVE=totalTaxAmount];
                ApplicationArea=#All;
                SourceExpr="Line Tax Amount" }

    { 17  ;2   ;Field     ;
                Name=amountIncludingTax;
                CaptionML=[@@@={Locked};
                           ENU=amountIncludingTax;
                           NOR=amountIncludingTax;
                           SVE=amountIncludingTax];
                ApplicationArea=#All;
                SourceExpr="Line Amount Including Tax";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Amount Including VAT"));
                           END;
                            }

    { 18  ;2   ;Field     ;
                Name=invoiceDiscountAllocation;
                CaptionML=[@@@={Locked};
                           ENU=invoiceDiscountAllocation;
                           NOR=invoiceDiscountAllocation;
                           SVE=invoiceDiscountAllocation];
                ApplicationArea=#All;
                SourceExpr="Inv. Discount Amount Excl. VAT" }

    { 19  ;2   ;Field     ;
                Name=netAmount;
                CaptionML=[@@@={Locked};
                           ENU=netAmount;
                           NOR=netAmount;
                           SVE=netAmount];
                ApplicationArea=#All;
                SourceExpr=Amount }

    { 20  ;2   ;Field     ;
                Name=netTaxAmount;
                CaptionML=[@@@={Locked};
                           ENU=netTaxAmount;
                           NOR=netTaxAmount;
                           SVE=netTaxAmount];
                ApplicationArea=#All;
                SourceExpr="Tax Amount" }

    { 21  ;2   ;Field     ;
                Name=netAmountIncludingTax;
                CaptionML=[@@@={Locked};
                           ENU=netAmountIncludingTax;
                           NOR=netAmountIncludingTax;
                           SVE=netAmountIncludingTax];
                ApplicationArea=#All;
                SourceExpr="Amount Including VAT" }

    { 22  ;2   ;Field     ;
                Name=expectedReceiptDate;
                CaptionML=[@@@={Locked};
                           ENU=expectedReceiptDate;
                           NOR=expectedReceiptDate;
                           SVE=expectedReceiptDate];
                ApplicationArea=#All;
                SourceExpr="Expected Receipt Date";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Expected Receipt Date"));
                           END;
                            }

  }
  CODE
  {
    VAR
      TempFieldBuffer@1006 : TEMPORARY Record 8450;
      TempItemFieldSet@1005 : TEMPORARY Record 2000000041;
      Item@1004 : Record 27;
      UnitOfMeasureJSON@1003 : Text;
      LineObjectDetailsJSON@1002 : Text;
      LinesLoaded@1001 : Boolean;
      InsertItem@1000 : Boolean;
      CannotChangeLineNoErr@1009 : TextConst '@@@={Locked};ENU=The value for sequence cannot be modified. Delete and insert the line again.;NOR=The value for sequence cannot be modified. Delete and insert the line again.;SVE=The value for sequence cannot be modified. Delete and insert the line again.';
      ItemWasDeletedErr@1008 : TextConst '@@@={Locked};ENU=The item was deleted.;NOR=The item was deleted.;SVE=The item was deleted.';
      IdIsAlreadyUsedErr@1007 : TextConst '@@@={Locked};ENU=The id is already in use used.;NOR=The id is already in use used.;SVE=The id is already in use used.';
      BothItemIdAndAccountIdAreSpecifiedErr@1010 : TextConst 'ENU=Both itemId and accountId are specified. Specify only one of them.;NOR=B†de itemId og accountId er angitt. Angi bare ‚n av dem.;SVE=B†de ItemId och accountId anges. Ange endast en av dem.';

    LOCAL PROCEDURE RegisterFieldSet@1(FieldNo@1000 : Integer);
    VAR
      LastOrderNo@1001 : Integer;
    BEGIN
      LastOrderNo := 1;
      IF TempFieldBuffer.FINDLAST THEN
        LastOrderNo := TempFieldBuffer.Order + 1;

      CLEAR(TempFieldBuffer);
      TempFieldBuffer.Order := LastOrderNo;
      TempFieldBuffer."Table ID" := DATABASE::"Purch. Inv. Line Aggregate";
      TempFieldBuffer."Field ID" := FieldNo;
      TempFieldBuffer.INSERT;
    END;

    LOCAL PROCEDURE ClearCalculatedFields@2();
    BEGIN
      TempFieldBuffer.RESET;
      TempFieldBuffer.DELETEALL;
      TempItemFieldSet.RESET;
      TempItemFieldSet.DELETEALL;

      CLEAR(Item);
      CLEAR(UnitOfMeasureJSON);
      CLEAR(InsertItem);
      CLEAR(LineObjectDetailsJSON);
    END;

    LOCAL PROCEDURE SetCalculatedFields@3();
    VAR
      GraphMgtPurchInvLines@1001 : Codeunit 5528;
      GraphMgtComplexTypes@1002 : Codeunit 5468;
    BEGIN
      LineObjectDetailsJSON := GraphMgtComplexTypes.GetPurchaseLineDescriptionComplexType(Rec);
      UnitOfMeasureJSON := GraphMgtPurchInvLines.GetUnitOfMeasureJSON(Rec);
    END;

    LOCAL PROCEDURE RegisterItemFieldSet@11(FieldNo@1000 : Integer);
    BEGIN
      IF TempItemFieldSet.GET(DATABASE::Item,FieldNo) THEN
        EXIT;

      TempItemFieldSet.INIT;
      TempItemFieldSet.TableNo := DATABASE::Item;
      TempItemFieldSet.VALIDATE("No.",FieldNo);
      TempItemFieldSet.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CheckIntegrationIdInUse@8();
    VAR
      IntegrationRecord@1000 : Record 5151;
    BEGIN
      IF NOT IntegrationRecord.GET("Item Id") THEN
        EXIT;

      IF IntegrationRecord."Table ID" = DATABASE::Item THEN
        ERROR(ItemWasDeletedErr);

      ERROR(IdIsAlreadyUsedErr);
    END;

    LOCAL PROCEDURE InsertItemOnTheFly@16();
    VAR
      GraphCollectionMgtItem@1001 : Codeunit 5470;
    BEGIN
      GraphCollectionMgtItem.InsertItemFromSalesDocument(Item,TempItemFieldSet,UnitOfMeasureJSON);
      VALIDATE("No.",Item."No.");

      IF Description = '' THEN
        Description := Item.Description;
    END;

    BEGIN
    END.
  }
}

