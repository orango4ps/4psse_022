OBJECT Codeunit 11012268 Installation Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00,4PSSE;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE HasValue@10(FldRef@1000 : FieldRef) : Boolean;
    VAR
      Field@1102601000 : Record 2000000041;
      HasValue@1001 : Boolean;
      Int@1002 : Integer;
      Dec@1003 : Decimal;
      D@1007 : Date;
      T@1008 : Time;
      GID@1210190000 : GUID;
      EmptyGID@1210190001 : GUID;
    BEGIN
      EVALUATE(Field.Type,FORMAT(FldRef.TYPE));

      CASE Field.Type OF
        Field.Type::Boolean:
          HasValue := FldRef.VALUE;
        Field.Type::Option:
          BEGIN
            Int := FldRef.VALUE;
            HasValue := Int <> 0;
          END;
        Field.Type::Integer,Field.Type::BigInteger:
          BEGIN
            Int := FldRef.VALUE;
            HasValue := Int <> 0;
          END;
        Field.Type::Decimal:
          BEGIN
            Dec := FldRef.VALUE;
            HasValue := Dec <> 0;
          END;
        Field.Type::Date:
          BEGIN
            D := FldRef.VALUE;
            HasValue := D <> 0D;
          END;
        Field.Type::Time:
          BEGIN
            T := FldRef.VALUE;
            HasValue := T <> 0T;
          END;
        Field.Type::GUID:
          BEGIN
            GID := FldRef.VALUE;
            HasValue := GID <> EmptyGID;
          END;
         Field.Type::BLOB: HasValue := FORMAT(FldRef.VALUE) = '*';
        ELSE
          HasValue := FORMAT(FldRef.VALUE) <> '';
      END;

      EXIT(HasValue);
    END;

    [External]
    PROCEDURE NoLicensePermissionForTableData@1100525000(TableID@1100525001 : Integer) : Boolean;
    VAR
      LicensePermission@1100525000 : Record 2000000043;
    BEGIN
      IF LicensePermission.GET(LicensePermission."Object Type"::TableData,TableID) THEN
        EXIT(LicensePermission."Read Permission" = LicensePermission."Read Permission"::" ");
    END;

    [External]
    PROCEDURE LicensePermissionForTableData@1100525001(TableID@1100525001 : Integer) : Boolean;
    BEGIN
      EXIT(NOT NoLicensePermissionForTableData(TableID));
    END;

    [External]
    PROCEDURE NoLicensePermissionForCodeUnit@1100528601(CodeUnitID@1100525001 : Integer) : Boolean;
    VAR
      LicensePermission@1100525000 : Record 2000000043;
    BEGIN
      IF LicensePermission.GET(LicensePermission."Object Type"::Codeunit,CodeUnitID) THEN
        EXIT(LicensePermission."Execute Permission" = LicensePermission."Execute Permission"::" ");
    END;

    [External]
    PROCEDURE LicensePermissionForCodeUnit@1100528600(CodeUnitID@1100525001 : Integer) : Boolean;
    BEGIN
      EXIT(NOT NoLicensePermissionForCodeUnit(CodeUnitID));
    END;

    [External]
    PROCEDURE IsDataPerCompany@1100409000(TableNo@1100409000 : Integer) : Boolean;
    VAR
      TableInformation@1100409001 : Record 2000000028;
    BEGIN
      EXIT(TableInformation.GET(COMPANYNAME,TableNo));
    END;

    [External]
    PROCEDURE GetNoOfDatabaseRecords@15(TableID@1100529200 : Integer;CompanyName@1100529201 : Text[30]) : Integer;
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      IF TableID = 0 THEN
        EXIT(0);

      RecRef.OPEN(TableID,FALSE,CompanyName);
      EXIT(RecRef.COUNT);
    END;

    [External]
    PROCEDURE StoreNotLicensedTableInGenericTempTable@1100529200(CompanyName@1100529201 : Text[30];TableID@1100529202 : Integer);
    VAR
      GenericTempTable@1100529200 : Record 11020579;
    BEGIN
      GenericTempTable."Key Code1" := USERID;
      GenericTempTable."Key Code2" := 'NotLicensedTable';
      GenericTempTable."Key Code3" := CompanyName;
      GenericTempTable."Key Code4" := FORMAT(TableID);
      GenericTempTable.Text1 := CompanyName;
      GenericTempTable.Int1 := TableID;
      GenericTempTable.INSERT;
    END;

    [External]
    PROCEDURE DeleteStoredNotLicensedTableInGenericTempTable@1100529214();
    VAR
      GenericTempTable@1100529200 : Record 11020579;
    BEGIN
      GenericTempTable.SETRANGE("Key Code1",USERID);
      GenericTempTable.SETRANGE("Key Code2",'NotLicensedTable');
      GenericTempTable.DELETEALL;
    END;

    [External]
    PROCEDURE GetDataUpgradeLanguage@1100529201(DatabaseLevel@1100529203 : Boolean) : Integer;
    VAR
      CompanyInformation@1100529200 : Record 79;
      DatabaseSetup@1100529204 : Record 11229358;
    BEGIN
      IF DatabaseLevel THEN BEGIN
        IF DatabaseSetup.GET AND (DatabaseSetup."Language Code Data Upgrade" <> 0) THEN
          EXIT(DatabaseSetup."Language Code Data Upgrade")
      END ELSE BEGIN
        IF CompanyInformation.GET AND (CompanyInformation."Language Code Data Upgrade" <> 0) THEN
          EXIT(CompanyInformation."Language Code Data Upgrade")
      END;

      EXIT(GetDefaultWindowsLanguage);
    END;

    [External]
    PROCEDURE GetDefaultWindowsLanguage@1100529202() : Integer;
    VAR
      WinLanguage@1100529201 : Record 2000000045;
      LanguageManagement@1100529202 : Codeunit 43;
    BEGIN
      // Copied From CU40
      WinLanguage.SETRANGE("Localization Exist",TRUE);
      WinLanguage.SETRANGE("Globally Enabled",TRUE);
      WinLanguage."Language ID" := GLOBALLANGUAGE;
      IF NOT WinLanguage.FIND THEN BEGIN
        WinLanguage."Language ID" := WINDOWSLANGUAGE;
        IF NOT WinLanguage.FIND THEN
          WinLanguage."Language ID" := LanguageManagement.ApplicationLanguage;
      END;
      EXIT(WinLanguage."Language ID");
    END;

    [External]
    PROCEDURE InitDataUpgradeLog@1100529250(TableIDForLicenseCheck@1100529201 : Integer;VAR TypeOfLog@1100529200 : 'Execute,No License Permission,New Company';VAR StartDateTime@1100529203 : DateTime;NewCompany@1100529204 : Boolean);
    BEGIN
      TypeOfLog := TypeOfLog::Execute;

      IF NewCompany THEN
        TypeOfLog := TypeOfLog::"New Company"
      ELSE
        IF NoLicensePermissionForTableData(TableIDForLicenseCheck) THEN
          TypeOfLog := TypeOfLog::"No License Permission";

      StartDateTime := CURRENTDATETIME;
    END;

    [External]
    PROCEDURE GetAssemblyVersion@1100528500(Path@1100528700 : Text) : Text;
    VAR
      AssemblyName@1100528703 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.AssemblyName";
      FileManagement@1100528701 : Codeunit 419;
      Version@1100528702 : Text;
    BEGIN
      IF FileManagement.ServerFileExists(Path) THEN BEGIN
        AssemblyName := AssemblyName.GetAssemblyName(Path);
        Version := STRSUBSTNO('%1.%2.%3.%4', AssemblyName.Version.Major, AssemblyName.Version.Minor, AssemblyName.Version.Build, AssemblyName.Version.Revision);
      END;
      EXIT(Version);
    END;

    [External]
    PROCEDURE GetAssemblyDescription@1100528701(Path@1100528700 : Text) : Text;
    VAR
      FileVersionInfo@1100528704 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo";
      FileManagement@1100528701 : Codeunit 419;
    BEGIN
      IF FileManagement.ServerFileExists(Path) THEN
        EXIT(FileVersionInfo.GetVersionInfo(Path).Comments);
    END;

    [External]
    PROCEDURE GetPublicKeyToken@1100528703(Path@1100528700 : Text) : Text;
    VAR
      AssemblyName@1100528703 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.AssemblyName";
      PublicKeyToken@1100528704 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      String@1100528708 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      FileManagement@1100528701 : Codeunit 419;
      Token@1100528702 : Text;
      I@1100528705 : Integer;
    BEGIN
      IF FileManagement.ServerFileExists(Path) THEN BEGIN
        AssemblyName := AssemblyName.GetAssemblyName(Path);
        PublicKeyToken := AssemblyName.GetPublicKeyToken();
        FOR I := 0 TO PublicKeyToken.Length - 1 DO
          Token := Token + LOWERCASE(String.Format('{0:X2}', PublicKeyToken.GetValue(I)));
      END;
      EXIT(Token);
    END;

    [External]
    PROCEDURE GetObjectSubtype@1100525002(TableID@1100525000 : Integer) : Text;
    VAR
      ObjectMetadata@1100525001 : Record 2000000071;
    BEGIN
      IF ObjectMetadata.GET(ObjectMetadata."Object Type"::Table,TableID) THEN
        EXIT(ObjectMetadata."Object Subtype");
    END;

    [External]
    PROCEDURE CreateSetupXmlFile@1100529207(FileName@1100529204 : Text);
    VAR
      ExtendedTableProperty@1100529200 : Record 11020573;
      UpdateExtTableProperties@1100529202 : Codeunit 11020226;
      ExportDataToXMLFile@1100529203 : Codeunit 11012250;
    BEGIN
      DeleteXMLMigrationTables;

      IF ExtendedTableProperty.ISEMPTY THEN
        UpdateExtTableProperties.RUN;

      FillXMLMigrationTableWithAllSetupTables;
      ExportSetupDataToXmlFile(FileName);
    END;

    LOCAL PROCEDURE FillXMLMigrationTableWithAllSetupTables@1100529205();
    VAR
      ExtendedTableProperty@1100529200 : Record 11020573;
      XMLMigrationTable@1100529201 : Record 11020619;
    BEGIN
      IF ExtendedTableProperty.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          IF ExtendedTableProperty.IsXMLImportExportAllowed(ExtendedTableProperty."Table ID") THEN BEGIN
            XMLMigrationTable.INIT;
            XMLMigrationTable.VALIDATE("Table ID",ExtendedTableProperty."Table ID");
            XMLMigrationTable.INSERT(TRUE);
          END;
        UNTIL ExtendedTableProperty.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE DeleteXMLMigrationTables@1100529208();
    VAR
      XMLMigrationTable@1100529201 : Record 11020619;
    BEGIN
      XMLMigrationTable.DELETEALL(TRUE);
    END;

    [External]
    PROCEDURE ExportSetupDataToXmlFile@1100529240(FileName@1100529204 : Text);
    VAR
      ExtendedTableProperty@1100529200 : Record 11020573;
      XMLMigrationTable@1100529201 : Record 11020619;
      UpdateExtTableProperties@1100529202 : Codeunit 11020226;
      ExportDataToXMLFile@1100529203 : Codeunit 11012250;
    BEGIN
      ExportDataToXMLFile.ExportDemoData(XMLMigrationTable,FileName);
    END;

    [External]
    PROCEDURE ImportSetupDataFromXmlFile@1100529206(FileName@1100529200 : Text);
    VAR
      ImportDataFromXMLFile@1100529203 : Codeunit 11012251;
    BEGIN
      ImportDataFromXMLFile.ImportDemoData(FileName);
    END;

    [External]
    PROCEDURE ProductRelease@1100525003() : Text[80];
    BEGIN
      EXIT('022');
    END;

    [External]
    PROCEDURE ProductHotfix@1100529213() : Text[80];
    BEGIN
      EXIT('05');
    END;

    [External]
    PROCEDURE ProductExtension@1100529216() : Text[80];
    BEGIN
      //>>4PSSE
      EXIT('SE-00');  //180xxx
      //<<4PSSE
      EXIT('');
    END;

    [EventSubscriber(Codeunit,9015,OnAfterGetApplicationVersion,"",Skip)]
    LOCAL PROCEDURE OnAfterGetApplicationVersion@1100525004(VAR ApplicationVersion@1100525000 : Text[248]);
    VAR
      VersionManagement4PS@1100528500 : Codeunit 11012623;
    BEGIN
      IF ProductExtension <> '' THEN
        ApplicationVersion := (STRSUBSTNO('%1 %2-%3 %4',
          ApplicationVersion,
          ProductRelease,
          ProductHotfix,
          ProductExtension))
      ELSE
         ApplicationVersion := (STRSUBSTNO('%1 %2-%3',
          ApplicationVersion,
          ProductRelease,
          ProductHotfix));
      OnAfterGetApplicationVersionPublisher(ApplicationVersion);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetApplicationVersionPublisher@1100525007(VAR AppVersion@1100525000 : Text[80]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

