OBJECT Table 11012074 Purchase Quote Comparison Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Purchase Quote Comparison Line;
               NOR=Innkj›pstilbud Sammenligningsrad;
               SVE=Ink”psoffertj„mf”relserad];
  }
  FIELDS
  {
    { 10  ;   ;Project No.         ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=[ENU=Project No.;
                                                              NOR=Prosjektnr;
                                                              SVE=Projektnr] }
    { 15  ;   ;Estimate No.        ;Code20        ;TableRelation=Estimate;
                                                   CaptionML=[ENU=Estimate No.;
                                                              NOR=Kalkylenr;
                                                              SVE=Kalkylnr] }
    { 20  ;   ;Purchase Action     ;Code10        ;TableRelation=IF (Project No.=FILTER(<>'')) "Project Purchase Action".Code WHERE (Project No.=FIELD(Project No.))
                                                                 ELSE IF (Estimate No.=FILTER(<>'')) "Estimate Purchase Action".Code WHERE (Estimate No.=FIELD(Estimate No.),
                                                                                                                                            Code=FIELD(Purchase Action));
                                                   CaptionML=[ENU=Purchase Action;
                                                              NOR=Innkj›pshandling;
                                                              SVE=Ink”ps†tg„rd] }
    { 25  ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              NOR=Radtype;
                                                              SVE=Typ];
                                                   OptionCaptionML=[ENU=Cost Object,Total;
                                                                    NOR=Kostnadsobjekt,Total;
                                                                    SVE=Kostnadsobjekt,Total];
                                                   OptionString=Cost Object,Total }
    { 27  ;   ;Element             ;Code20        ;TableRelation="Project Element".Element WHERE (Project No.=FIELD(Project No.));
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Element;
                                                              NOR=Element;
                                                              SVE=Element] }
    { 30  ;   ;Cost Object         ;Code20        ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Project Filter=FIELD(Project No.));
                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              NOR=Kostnadsobjekt;
                                                              SVE=Kostnadsobjekt];
                                                   CaptionClass='1,1,2' }
    { 40  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              NOR=Beskrivelse;
                                                              SVE=Beskrivning] }
    { 50  ;   ;Quantity            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line".Quantity WHERE (Project No.=FIELD(Project No.),
                                                                                                 Purchase Action=FIELD(Purchase Action),
                                                                                                 Cost Object=FIELD(Cost Object),
                                                                                                 Unit of Measure=FIELD(Unit of Measure Code),
                                                                                                 Description=FIELD(Description),
                                                                                                 Element=FIELD(ElementFilter)));
                                                   CaptionML=[ENU=Quantity;
                                                              NOR=Antall;
                                                              SVE=Antal];
                                                   Editable=No }
    { 60  ;   ;Unit of Measure Code;Code10        ;TableRelation="Unit of Measure".Code;
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              NOR=Enhetskode;
                                                              SVE=Enhetskod] }
    { 65  ;   ;Unit of Measure     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Unit of Measure".Description WHERE (Code=FIELD(Unit of Measure Code)));
                                                   CaptionML=[ENU=Unit of Measure;
                                                              NOR=Enhet;
                                                              SVE=M†ttenhet];
                                                   Editable=No }
    { 70  ;   ;Budget              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line"."Amount (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                       Purchase Action=FIELD(Purchase Action),
                                                                                                       Cost Object=FIELD(Cost Object),
                                                                                                       Description=FIELD(Description),
                                                                                                       Unit of Measure=FIELD(Unit of Measure Code),
                                                                                                       Element=FIELD(ElementFilter)));
                                                   CaptionML=[ENU=Budget;
                                                              NOR=Budsjett;
                                                              SVE=Budget];
                                                   Editable=No }
    { 71  ;   ;Total Budget        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Budget Line"."Amount (LCY)" WHERE (Project No.=FIELD(Project No.),
                                                                                                       Purchase Action=FIELD(Purchase Action)));
                                                   CaptionML=[ENU=Total Budget;
                                                              NOR=Budsjett Total;
                                                              SVE=Total budget];
                                                   Editable=No }
    { 80  ;   ;Present in Actual Budget;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Budget Line" WHERE (Project No.=FIELD(Project No.),
                                                                                          Purchase Action=FIELD(Purchase Action),
                                                                                          Cost Object=FIELD(Cost Object),
                                                                                          Description=FIELD(Description),
                                                                                          Unit of Measure=FIELD(Unit of Measure)));
                                                   CaptionML=[ENU=Present in Actual Budget;
                                                              NOR=Finnes i Faktisk budsjett;
                                                              SVE=Finns i verklig budget];
                                                   Editable=No }
    { 90  ;   ;Present in Quote    ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purchase Line" WHERE (Document Type=CONST(Quote),
                                                                                            Job No.=FIELD(Project No.),
                                                                                            Purchase Action=FIELD(Purchase Action),
                                                                                            Shortcut Dimension 2 Code=FIELD(Cost Object),
                                                                                            Description=FIELD(Description),
                                                                                            Unit of Measure Code=FIELD(Unit of Measure Code)));
                                                   CaptionML=[ENU=Present in Quote;
                                                              NOR=Finnes i tilbudet;
                                                              SVE=Finns i offerten];
                                                   Editable=No }
    { 100 ;   ;Estimate Quantity   ;Decimal       ;CaptionML=[ENU=Estimate Quantity;
                                                              NOR=Kalkyle Í antall;
                                                              SVE=Kalkyl Í antal];
                                                   Editable=No }
    { 110 ;   ;Estimate Amount     ;Decimal       ;CaptionML=ENU=Estimate Amount;
                                                   Editable=No }
    { 120 ;   ;Element Description ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Project Element".Description WHERE (Project No.=FIELD(Project No.),
                                                                                                           Element=FIELD(Element)));
                                                   CaptionML=[ENU=Element Description;
                                                              NOR=Elementbeskrivelse;
                                                              SVE=Elementbeskrivning];
                                                   Editable=No }
    { 130 ;   ;ElementFilter       ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Element Filter;
                                                              SVE=Elementfilter] }
  }
  KEYS
  {
    {    ;Project No.,Estimate No.,Purchase Action,Type,Element,Cost Object,Description,Unit of Measure Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1210190000 : TextConst 'ENU=Total Quote;NOR=Totalt tilbud;SVE=Total offert';

    PROCEDURE CreateLines@1(VAR IOQuoteCompRec@1210190005 : Record 11012074;IProject@1210190000 : Code[20];IPurchAction@1210190001 : Code[10];ITotalMode@1210190006 : Boolean;IElementLevel@1100525000 : Boolean);
    VAR
      BudgetLine@1210190002 : Record 11012001;
      QuoteLine@1210190003 : Record 39;
      QuoteHeader@1210190004 : Record 38;
      lvElementCde@1100525001 : Code[20];
    BEGIN
      // Budget Lines
      lvElementCde := '';
      BudgetLine.SETCURRENTKEY("Project No.", "Purchase Action");
      BudgetLine.SETRANGE("Project No.",IProject);
      BudgetLine.SETRANGE("Purchase Action",IPurchAction);
      IF BudgetLine.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF IElementLevel THEN
            lvElementCde := BudgetLine.Element;
          IF NOT IOQuoteCompRec.GET(
                   IProject,
                   '',
                   IPurchAction,
                   IOQuoteCompRec.Type::"Cost Object",
                   lvElementCde,
                   BudgetLine."Cost Object",
                   BudgetLine.Description,
                   BudgetLine."Unit of Measure")
          THEN BEGIN
            IOQuoteCompRec.INIT;
            IOQuoteCompRec."Project No." := IProject;
            IOQuoteCompRec."Purchase Action" := IPurchAction;
            IOQuoteCompRec.Type := IOQuoteCompRec.Type::"Cost Object";
            IOQuoteCompRec.Element := lvElementCde;
            IOQuoteCompRec."Cost Object" := BudgetLine."Cost Object";
            IOQuoteCompRec.Description := BudgetLine.Description;
            IOQuoteCompRec."Unit of Measure Code" := BudgetLine."Unit of Measure";
            IOQuoteCompRec.INSERT;
          END;
        UNTIL BudgetLine.NEXT = 0;
      END;

      // Purchase Quote Lines
      QuoteLine.SETCURRENTKEY("Document Type", "Job No.");
      QuoteLine.SETRANGE("Document Type",QuoteHeader."Document Type"::Quote);
      QuoteLine.SETRANGE("Job No.",IProject);
      QuoteLine.SETRANGE("Purchase Action",IPurchAction);
      IF QuoteLine.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF IElementLevel THEN
            lvElementCde := QuoteLine.Element;
          IF NOT IOQuoteCompRec.GET(
                   IProject,
                   '',
                   IPurchAction,
                   IOQuoteCompRec.Type::"Cost Object",
                   lvElementCde,
                   QuoteLine."Shortcut Dimension 2 Code",
                   QuoteLine.Description,
                   QuoteLine."Unit of Measure Code")
          THEN BEGIN
            IOQuoteCompRec.INIT;
            IOQuoteCompRec."Project No." := IProject;
            IOQuoteCompRec."Purchase Action" := IPurchAction;
            IOQuoteCompRec.Type := IOQuoteCompRec.Type::"Cost Object";
            IOQuoteCompRec.Element := lvElementCde;
            IOQuoteCompRec."Cost Object" := QuoteLine."Shortcut Dimension 2 Code";
            IOQuoteCompRec.Description := QuoteLine.Description;
            IOQuoteCompRec."Unit of Measure Code" := QuoteLine."Unit of Measure Code";
            IOQuoteCompRec.INSERT;
          END;
        UNTIL QuoteLine.NEXT = 0;
      END;

      IF ITotalMode THEN BEGIN
        IOQuoteCompRec.INIT;
        IOQuoteCompRec."Project No." := IProject;
        IOQuoteCompRec."Purchase Action" := IPurchAction;
        IOQuoteCompRec.Type := IOQuoteCompRec.Type::Total;
        IOQuoteCompRec.Element := '';
        IOQuoteCompRec."Cost Object" := '';
        IOQuoteCompRec.Description := Text001;
        IOQuoteCompRec."Unit of Measure Code" := '';
        IOQuoteCompRec.INSERT;
      END;
    END;

    PROCEDURE DeleteLines@1210190000(IProject@1210190000 : Code[20];IEstimate@1100485000 : Code[20];IPurchAction@1210190001 : Code[10]);
    VAR
      lvQuoteCompRec@1210190005 : Record 11012074;
    BEGIN
      lvQuoteCompRec.SETRANGE("Project No.",IProject);
      lvQuoteCompRec.SETRANGE("Estimate No.",IEstimate);
      lvQuoteCompRec.SETRANGE("Purchase Action",IPurchAction);
      lvQuoteCompRec.DELETEALL;
    END;

    PROCEDURE CreateLinesfromEstimate@1100485001(VAR IOQuoteCompRec@1210190005 : Record 11012074;IEstimate@1210190000 : Code[20];IPurchAction@1210190001 : Code[10];ITotalMode@1210190006 : Boolean);
    VAR
      EstimateLine@1210190002 : Record 11072072;
      QuoteLine@1210190003 : Record 39;
      QuoteHeader@1210190004 : Record 38;
      EstimateRecipeLine@1100485003 : Record 11072075;
      CostObject@1100485001 : Code[20];
      EstimateLineTotal@1100525000 : Record 11072077;
      RecipeQuantity@1100528900 : Decimal;
      ParentQuantity@1100528901 : Decimal;
      Estimate@1100528500 : Record 11012151;
      EstimateLineRAW@1100528501 : Record 11125698;
    BEGIN
      Estimate.GET(IEstimate);

      IF Estimate."RAW Estimate" THEN BEGIN  //db, 19-03-19
        EstimateLineRAW.SETRANGE("Estimate No.",IEstimate);
        EstimateLineRAW.SETRANGE("Purchase Action",IPurchAction);
        IF EstimateLineRAW.FINDSET THEN BEGIN
          REPEAT
            CostObject := EstimateLineRAW."Cost Object";
            IF CostObject = '' THEN BEGIN
              CASE EstimateLineRAW."Cost Type" OF
                EstimateLineRAW."Cost Type"::Material:
                  CostObject := GetAdmiCodeCostobject(1, EstimateLineRAW.Admicode);
                EstimateLineRAW."Cost Type"::Subcontracting:
                  CostObject := GetAdmiCodeCostobject(2, EstimateLineRAW.Admicode);
                EstimateLineRAW."Cost Type"::Plant:
                  CostObject := GetAdmiCodeCostobject(3, EstimateLineRAW.Admicode);
                EstimateLineRAW."Cost Type"::Sundry:
                  CostObject := GetAdmiCodeCostobject(4, EstimateLineRAW.Admicode);
              END;
            END;
            IF EstimateLineRAW."Ignore Paragraph Quantity" THEN
              ParentQuantity := 1
            ELSE
              ParentQuantity := EstimateLineRAW."Part Quantity";
            IF CostObject <> '' THEN BEGIN
              IF NOT IOQuoteCompRec.GET(
                     '',
                     IEstimate,
                     IPurchAction,
                     IOQuoteCompRec.Type::"Cost Object",
                     '',
                     CostObject,
                     COPYSTR(EstimateLineRAW.Description,1,50),
                     EstimateLineRAW."Unit of Measure")
              THEN BEGIN
                IOQuoteCompRec.INIT;
                IOQuoteCompRec."Project No." := '';
                IOQuoteCompRec."Estimate No." := IEstimate;
                IOQuoteCompRec."Purchase Action" := IPurchAction;
                IOQuoteCompRec.Type := IOQuoteCompRec.Type::"Cost Object";
                IOQuoteCompRec."Cost Object" := CostObject;
                IOQuoteCompRec.Description := COPYSTR(EstimateLineRAW.Description,1,50);
                IOQuoteCompRec."Unit of Measure Code" := EstimateLineRAW."Unit of Measure";
                IOQuoteCompRec."Estimate Quantity" := EstimateLineRAW."Time Quantity" * EstimateLineRAW.Quantity * ParentQuantity;
                CASE EstimateLineRAW."Cost Type" OF
                  EstimateLineRAW."Cost Type"::Material:
                    IOQuoteCompRec."Estimate Amount" := EstimateLineRAW."Cumulative Material";
                  EstimateLineRAW."Cost Type"::Subcontracting:
                    IOQuoteCompRec."Estimate Amount" := EstimateLineRAW."Cumulative Subcontracting";
                  EstimateLineRAW."Cost Type"::Plant:
                    IOQuoteCompRec."Estimate Amount" := EstimateLineRAW."Cumulative Plant";
                  EstimateLineRAW."Cost Type"::Sundry:
                    IOQuoteCompRec."Estimate Amount" := EstimateLineRAW."Cumulative Sundry";
                END;
                IOQuoteCompRec.INSERT;
              END ELSE BEGIN
                IOQuoteCompRec."Estimate Quantity" += EstimateLineRAW."Time Quantity" * EstimateLineRAW.Quantity * ParentQuantity;
                CASE EstimateLineRAW."Cost Type" OF
                  EstimateLineRAW."Cost Type"::Material:
                    IOQuoteCompRec."Estimate Amount" += EstimateLineRAW."Cumulative Material";
                  EstimateLineRAW."Cost Type"::Subcontracting:
                    IOQuoteCompRec."Estimate Amount" += EstimateLineRAW."Cumulative Subcontracting";
                  EstimateLineRAW."Cost Type"::Plant:
                    IOQuoteCompRec."Estimate Amount" += EstimateLineRAW."Cumulative Plant";
                  EstimateLineRAW."Cost Type"::Sundry:
                    IOQuoteCompRec."Estimate Amount" += EstimateLineRAW."Cumulative Sundry";
                END;
                IOQuoteCompRec.MODIFY;
              END;
            END;
          UNTIL EstimateLineRAW.NEXT = 0;
        END;
      END ELSE BEGIN
        EstimateLine.SETRANGE("Estimate No.",IEstimate);
        EstimateLine.SETRANGE("Purchase Action",IPurchAction);
        IF EstimateLine.FINDSET THEN BEGIN
          REPEAT
            IF NOT EstimateLineTotal.GET(EstimateLine."Estimate No.", EstimateLine."Sub-Estimate No.", EstimateLine."Part Group", EstimateLine.Part, EstimateLine."Line No.") THEN
              EstimateLineTotal.INIT;  //db, 31-03-16: use tables of new estimate module
            CostObject := EstimateLine."Cost Object Price";
            IF CostObject = '' THEN BEGIN
              CASE EstimateLine."Cost Type (Price)" OF
                EstimateLine."Cost Type (Price)"::Material:
                  CostObject := GetAdmiCodeCostobject(1, EstimateLine.Admicode);
                EstimateLine."Cost Type (Price)"::Subcontracting:
                  CostObject := GetAdmiCodeCostobject(2, EstimateLine.Admicode);
                EstimateLine."Cost Type (Price)"::Plant:
                  CostObject := GetAdmiCodeCostobject(3, EstimateLine.Admicode);
                EstimateLine."Cost Type (Price)"::Sundry:
                  CostObject := GetAdmiCodeCostobject(4, EstimateLine.Admicode);
              END;
            END;
            IF EstimateLine."Ignore Part Quantity" THEN
              ParentQuantity := 1
            ELSE
              ParentQuantity := EstimateLine."Part Quantity";
            IF CostObject <> '' THEN BEGIN
              IF NOT IOQuoteCompRec.GET(
                     '',
                     IEstimate,
                     IPurchAction,
                     IOQuoteCompRec.Type::"Cost Object",
                     '',
                     CostObject,
                     COPYSTR(EstimateLine.Description,1,50),
                     EstimateLine."Unit of Measure")
              THEN BEGIN
                IOQuoteCompRec.INIT;
                IOQuoteCompRec."Project No." := '';
                IOQuoteCompRec."Estimate No." := IEstimate;
                IOQuoteCompRec."Purchase Action" := IPurchAction;
                IOQuoteCompRec.Type := IOQuoteCompRec.Type::"Cost Object";
                IOQuoteCompRec."Cost Object" := CostObject;
                IOQuoteCompRec.Description := COPYSTR(EstimateLine.Description,1,50);
                IOQuoteCompRec."Unit of Measure Code" := EstimateLine."Unit of Measure";
                IOQuoteCompRec."Estimate Quantity" := EstimateLine."Time Quantity" * EstimateLine.Quantity * ParentQuantity;
                CASE EstimateLine."Cost Type (Price)" OF
                  EstimateLine."Cost Type (Price)"::Material:
                    IOQuoteCompRec."Estimate Amount" := EstimateLineTotal."Cumulative Material";
                  EstimateLine."Cost Type (Price)"::Subcontracting:
                    IOQuoteCompRec."Estimate Amount" := EstimateLineTotal."Cumulative Subcontracting";
                  EstimateLine."Cost Type (Price)"::Plant:
                    IOQuoteCompRec."Estimate Amount" := EstimateLineTotal."Cumulative Plant";
                  EstimateLine."Cost Type (Price)"::Sundry:
                    IOQuoteCompRec."Estimate Amount" := EstimateLineTotal."Cumulative Sundry";
                END;
                IOQuoteCompRec.INSERT;
              END ELSE BEGIN
                IOQuoteCompRec."Estimate Quantity" += EstimateLine."Time Quantity" * EstimateLine.Quantity * ParentQuantity;
                CASE EstimateLine."Cost Type (Price)" OF
                  EstimateLine."Cost Type (Price)"::Material:
                    IOQuoteCompRec."Estimate Amount" += EstimateLineTotal."Cumulative Material";
                  EstimateLine."Cost Type (Price)"::Subcontracting:
                    IOQuoteCompRec."Estimate Amount" += EstimateLineTotal."Cumulative Subcontracting";
                  EstimateLine."Cost Type (Price)"::Plant:
                    IOQuoteCompRec."Estimate Amount" += EstimateLineTotal."Cumulative Plant";
                  EstimateLine."Cost Type (Price)"::Sundry:
                    IOQuoteCompRec."Estimate Amount" += EstimateLineTotal."Cumulative Sundry";
                END;
                IOQuoteCompRec.MODIFY;
              END;
            END;
          UNTIL EstimateLine.NEXT = 0;
        END;
        //
        EstimateRecipeLine.SETRANGE("Estimate No.",IEstimate);
        EstimateRecipeLine.SETRANGE("Purchase Action",IPurchAction);
        IF EstimateRecipeLine.FINDSET THEN BEGIN
          REPEAT
            CostObject := EstimateRecipeLine."Cost Object Price";
            IF CostObject = '' THEN BEGIN
              CASE EstimateRecipeLine."Cost Type (Price)" OF
                EstimateRecipeLine."Cost Type (Price)"::Material:
                  CostObject := GetAdmiCodeCostobject(1, EstimateRecipeLine.Admicode);
                EstimateRecipeLine."Cost Type (Price)"::Subcontracting:
                  CostObject := GetAdmiCodeCostobject(2, EstimateRecipeLine.Admicode);
                EstimateRecipeLine."Cost Type (Price)"::Plant:
                  CostObject := GetAdmiCodeCostobject(3, EstimateRecipeLine.Admicode);
                EstimateRecipeLine."Cost Type (Price)"::Sundry:
                  CostObject := GetAdmiCodeCostobject(4, EstimateRecipeLine.Admicode);
              END;
            END;
            EstimateLine.GET(EstimateRecipeLine."Estimate No.", EstimateRecipeLine."Sub-Estimate No.", EstimateRecipeLine."Part Group", EstimateRecipeLine.Part, EstimateRecipeLine."Estimate Line");
            RecipeQuantity := EstimateLine."Time Quantity" * EstimateLine.Quantity;
            IF RecipeQuantity = 0 THEN BEGIN
              ParentQuantity := 0;
            END ELSE BEGIN
              IF EstimateRecipeLine."Ignore Recipe Quantity" THEN
                ParentQuantity := EstimateLine."Part Quantity"
              ELSE
                ParentQuantity := EstimateLine."Part Quantity" * RecipeQuantity;
            END;
            IF CostObject <> '' THEN BEGIN
              IF NOT IOQuoteCompRec.GET(
                     '',
                     IEstimate,
                     IPurchAction,
                     IOQuoteCompRec.Type::"Cost Object",
                     '',
                     CostObject,
                     COPYSTR(EstimateRecipeLine.Description,1,50),
                     EstimateRecipeLine."Unit of Measure")
              THEN BEGIN
                IOQuoteCompRec.INIT;
                IOQuoteCompRec."Project No." := '';
                IOQuoteCompRec."Estimate No." := IEstimate;
                IOQuoteCompRec."Purchase Action" := IPurchAction;
                IOQuoteCompRec.Type := IOQuoteCompRec.Type::"Cost Object";
                IOQuoteCompRec."Cost Object" := CostObject;
                IOQuoteCompRec.Description := COPYSTR(EstimateRecipeLine.Description,1,50);
                IOQuoteCompRec."Unit of Measure Code" := EstimateRecipeLine."Unit of Measure";
                IOQuoteCompRec."Estimate Quantity" := EstimateRecipeLine."Time Quantity" * EstimateRecipeLine.Quantity * ParentQuantity;
                CASE EstimateRecipeLine."Cost Type (Price)" OF
                  EstimateRecipeLine."Cost Type (Price)"::Material:
                    IOQuoteCompRec."Estimate Amount" := EstimateRecipeLine."Cumulative Net Amount";
                  EstimateRecipeLine."Cost Type (Price)"::Subcontracting:
                    IOQuoteCompRec."Estimate Amount" := EstimateRecipeLine."Cumulative Net Amount";
                  EstimateRecipeLine."Cost Type (Price)"::Plant:
                    IOQuoteCompRec."Estimate Amount" := EstimateRecipeLine."Cumulative Net Amount";
                  EstimateRecipeLine."Cost Type (Price)"::Sundry:
                    IOQuoteCompRec."Estimate Amount" := EstimateRecipeLine."Cumulative Net Amount";
                END;
                IOQuoteCompRec.INSERT;
              END ELSE BEGIN
                IOQuoteCompRec."Estimate Quantity" += EstimateRecipeLine."Time Quantity" * EstimateRecipeLine.Quantity * ParentQuantity;
                CASE EstimateRecipeLine."Cost Type (Price)" OF
                  EstimateRecipeLine."Cost Type (Price)"::Material:
                    IOQuoteCompRec."Estimate Amount" += EstimateRecipeLine."Cumulative Net Amount";
                  EstimateRecipeLine."Cost Type (Price)"::Subcontracting:
                    IOQuoteCompRec."Estimate Amount" += EstimateRecipeLine."Cumulative Net Amount";
                  EstimateRecipeLine."Cost Type (Price)"::Plant:
                    IOQuoteCompRec."Estimate Amount" += EstimateRecipeLine."Cumulative Net Amount";
                  EstimateRecipeLine."Cost Type (Price)"::Sundry:
                    IOQuoteCompRec."Estimate Amount" += EstimateRecipeLine."Cumulative Net Amount";
                END;
                IOQuoteCompRec.MODIFY;
              END;
            END;
          UNTIL EstimateRecipeLine.NEXT = 0;
        END;
      END;

      //Purchase Quote Lines
      QuoteLine.SETCURRENTKEY("Document Type", "Job No.");
      QuoteLine.SETRANGE("Document Type",QuoteHeader."Document Type"::Quote);
      QuoteLine.SETRANGE("Estimate No.",IEstimate);
      QuoteLine.SETRANGE("Purchase Action",IPurchAction);
      IF QuoteLine.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF NOT IOQuoteCompRec.GET(
                   '',
                   IEstimate,
                   IPurchAction,
                   IOQuoteCompRec.Type::"Cost Object",
                   '',
                   QuoteLine."Shortcut Dimension 2 Code",
                   QuoteLine.Description,
                   QuoteLine."Unit of Measure Code")
          THEN BEGIN
            IOQuoteCompRec.INIT;
            IOQuoteCompRec."Project No." := '';
            IOQuoteCompRec."Estimate No." := IEstimate;
            IOQuoteCompRec."Purchase Action" := IPurchAction;
            IOQuoteCompRec.Type := IOQuoteCompRec.Type::"Cost Object";
            IOQuoteCompRec."Cost Object" := QuoteLine."Shortcut Dimension 2 Code";
            IOQuoteCompRec.Description := QuoteLine.Description;
            IOQuoteCompRec."Unit of Measure Code" := QuoteLine."Unit of Measure Code";
            IOQuoteCompRec.INSERT;
          END;
        UNTIL QuoteLine.NEXT = 0;
      END;

      IF ITotalMode THEN BEGIN
        IOQuoteCompRec.INIT;
        IOQuoteCompRec."Estimate No." := IEstimate;
        IOQuoteCompRec."Purchase Action" := IPurchAction;
        IOQuoteCompRec.Type := IOQuoteCompRec.Type::Total;
        IOQuoteCompRec."Cost Object" := '';
        IOQuoteCompRec.Description := Text001;
        IOQuoteCompRec."Unit of Measure Code" := '';
        IOQuoteCompRec.INSERT;
      END;
    END;

    PROCEDURE GetAdmiCodeCostobject@1100485002(iType@1100485000 : Integer;iAdmicode@1100485001 : Code[20]) CostObject : Code[20];
    VAR
      AdmiCode@1100485002 : Record 11012390;
    BEGIN
      CostObject := '';
      IF iAdmicode = '' THEN
        EXIT;

      IF AdmiCode.GET(iAdmicode) THEN BEGIN
        CASE iType OF
          1: CostObject := AdmiCode."Cost Object Material";
          2: CostObject := AdmiCode."Cost Object Subcontracting";
          3: CostObject := AdmiCode."Cost Object Plant";
          4: CostObject := AdmiCode."Cost Object Sundry";
        END;
      END;
    END;

    BEGIN
    END.
  }
}

