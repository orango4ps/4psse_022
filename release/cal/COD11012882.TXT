OBJECT Codeunit 11012882 Service Control SC Period Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100528600 : TextConst 'DEU=Angegebenes Datum liegt drei Jahre in der Zukunft, fortfahren?;ENU=Given date exceeds three years from now, continue?;NLD=Opgegeven datum ligt meer dan 3 jaar na vandaag, doorgaan?';

    PROCEDURE UpdateServiceContractPeriodsAndArrangements@1100528606(IServiceContractNo@1100528601 : Code[20];IUntilDate@1100528600 : Date);
    VAR
      ServiceContractCtrlPeriod@1100528602 : Record 11071746;
    BEGIN
      IF IUntilDate = 0D THEN
        EXIT;
      ServiceContractCtrlPeriod.UpdateControlPeriodsUntil(IServiceContractNo, IUntilDate, TRUE);
      UpdateSCArrangements(IServiceContractNo, IUntilDate);
    END;

    PROCEDURE UpdateServiceControlSCPeriods@1100528600(IServiceContractNo@1100528600 : Code[20];IReportingPeriodStartingDate@1100528604 : Date;IReportingPeriodEndingDate@1100528602 : Date);
    VAR
      ServiceControlSCPeriod@1100528601 : Record 11072292;
      ServiceContractCtrlPeriod@1100528603 : Record 11071746;
    BEGIN
      IF IReportingPeriodEndingDate > CALCDATE('<3Y>') THEN
        IF GUIALLOWED THEN
          IF NOT CONFIRM(Text000) THEN
            ERROR('');
      ServiceControlSCPeriod.SETRANGE("Report Period Filter", IReportingPeriodStartingDate, IReportingPeriodEndingDate);
      ServiceContractCtrlPeriod.SETRANGE("Service Contract No.", IServiceContractNo);
      ServiceContractCtrlPeriod.SETRANGE("Starting Date", 0D, IReportingPeriodEndingDate);
      IF ServiceContractCtrlPeriod.FINDSET THEN
        REPEAT
          IF ServiceControlSCPeriod.GET(ServiceContractCtrlPeriod."Service Contract No.", ServiceContractCtrlPeriod.Code) THEN BEGIN
            IF (ServiceContractCtrlPeriod."Ending Date" >= IReportingPeriodStartingDate) OR (ServiceContractCtrlPeriod."Date Finished" = 0D) THEN BEGIN
              ServiceControlSCPeriod.DetermineAmounts;
              ServiceControlSCPeriod.MODIFY;
            END ELSE
              ServiceControlSCPeriod.DELETE;
          END ELSE BEGIN
            IF (ServiceContractCtrlPeriod."Ending Date" >= IReportingPeriodStartingDate) OR (ServiceContractCtrlPeriod."Date Finished" = 0D) THEN BEGIN
              ServiceControlSCPeriod.INIT;
              ServiceControlSCPeriod."Service Contract No." := ServiceContractCtrlPeriod."Service Contract No.";
              ServiceControlSCPeriod."Control Period Code" := ServiceContractCtrlPeriod.Code;
              ServiceControlSCPeriod.INSERT(TRUE);
            END;
          END;
        UNTIL ServiceContractCtrlPeriod.NEXT = 0;
    END;

    PROCEDURE UpdateServiceControlBySourceType@1100528604(IServiceContractNo@1100528601 : Code[20];ISCControlPeriod@1100528602 : Code[10];IReportingPeriodStartingDate@1100528605 : Date;IReportingPeriodEndingDate@1100528600 : Date);
    VAR
      SControlSourceType@1100528603 : Record 11072293;
      SourceType@1100528604 : Integer;
    BEGIN
      FOR SourceType := SControlSourceType."Source Type"::Call TO SControlSourceType."Source Type"::Direct DO BEGIN
        IF SControlSourceType.GET(IServiceContractNo, ISCControlPeriod, SourceType) THEN BEGIN
          SControlSourceType.SETRANGE("Report Period Filter", IReportingPeriodStartingDate, IReportingPeriodEndingDate);
          SControlSourceType.DetermineAmounts;
          SControlSourceType.MODIFY;
        END ELSE BEGIN
          SControlSourceType.INIT;
          SControlSourceType."Service Contract No." := IServiceContractNo;
          SControlSourceType."Control Period Code" := ISCControlPeriod;
          SControlSourceType."Source Type" := SourceType;
          SControlSourceType.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE UpdateServiceControlByServiceCategory@1100528605(IServiceContractNo@1100528601 : Code[20];ISCControlPeriod@1100528602 : Code[10];IReportingPeriodStartingDate@1100528604 : Date;IReportingPeriodEndingDate@1100528600 : Date);
    VAR
      ServiceCategory@1100528605 : Record 11071985;
      SControlCategory@1100528603 : Record 11072294;
    BEGIN
      ServiceCategory.SETRANGE("Service Contract No.", IServiceContractNo);
      IF ServiceCategory.FINDSET THEN BEGIN
        REPEAT
          SControlCategory.SETRANGE("Report Period Filter", IReportingPeriodStartingDate, IReportingPeriodEndingDate);
          IF SControlCategory.GET(IServiceContractNo, ISCControlPeriod, ServiceCategory.Code) THEN BEGIN
            SControlCategory.DetermineAmounts;
            SControlCategory.MODIFY;
          END ELSE BEGIN
            SControlCategory.INIT;
            SControlCategory."Service Contract No." := IServiceContractNo;
            SControlCategory."Control Period Code" := ISCControlPeriod;
            SControlCategory."Service Category" := ServiceCategory.Code;
            SControlCategory.INSERT(TRUE);
          END;
        UNTIL ServiceCategory.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateServiceControlBySourceTypeCostType@1100528607(IServiceContractNo@1100528601 : Code[20];ISCControlPeriod@1100528602 : Code[10];IReportingPeriodStartingDate@1100528606 : Date;IReportingPeriodEndingDate@1100528600 : Date;ISourceType@1100528605 : Option);
    VAR
      SControlSourceCostType@1100528603 : Record 11072295;
      CostType@1100528604 : Option;
    BEGIN
      FOR CostType := SControlSourceCostType."Cost Type"::Labor TO SControlSourceCostType."Cost Type"::Revenues DO BEGIN
        SControlSourceCostType.SETRANGE("Report Period Filter", IReportingPeriodStartingDate, IReportingPeriodEndingDate);
        IF SControlSourceCostType.GET(IServiceContractNo, ISCControlPeriod, ISourceType, CostType) THEN BEGIN
          SControlSourceCostType.DetermineAmounts;
          SControlSourceCostType.MODIFY;
        END ELSE BEGIN
          SControlSourceCostType.INIT;
          SControlSourceCostType."Service Contract No." := IServiceContractNo;
          SControlSourceCostType."Control Period Code" := ISCControlPeriod;
          SControlSourceCostType."Source Type" := ISourceType;
          SControlSourceCostType."Cost Type" := CostType;
          SControlSourceCostType.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE UpdateServiceControlByServiceCategoryCostType@1100528610(IServiceContractNo@1100528601 : Code[20];ISCControlPeriod@1100528602 : Code[10];IReportingPeriodStartingDate@1100528605 : Date;IReportingPeriodEndingDate@1100528600 : Date;IServiceCategory@1100528606 : Code[10]);
    VAR
      SControlCategoryCostType@1100528603 : Record 11072296;
      CostType@1100528604 : Integer;
    BEGIN
      FOR CostType := SControlCategoryCostType."Cost Type"::Labor TO SControlCategoryCostType."Cost Type"::Revenues DO BEGIN
        SControlCategoryCostType.SETRANGE("Report Period Filter", IReportingPeriodStartingDate, IReportingPeriodEndingDate);
        IF SControlCategoryCostType.GET(IServiceContractNo, ISCControlPeriod, IServiceCategory, CostType) THEN BEGIN
          SControlCategoryCostType.DetermineAmounts;
          SControlCategoryCostType.MODIFY;
        END ELSE BEGIN
          SControlCategoryCostType.INIT;
          SControlCategoryCostType."Service Contract No." := IServiceContractNo;
          SControlCategoryCostType."Control Period Code" := ISCControlPeriod;
          SControlCategoryCostType."Service Category" := IServiceCategory;
          SControlCategoryCostType."Cost Type" := CostType;
          SControlCategoryCostType.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE UpdateSCArrangements@1100528602(IServiceContractNo@1100528602 : Code[20];IUntilDate@1100528601 : Date);
    VAR
      ContractObjectMaintenance@1100528600 : Record 11071692;
    BEGIN
      ContractObjectMaintenance.SETRANGE("Service Contract No.", IServiceContractNo);
      IF ContractObjectMaintenance.FINDSET THEN
        REPEAT
          ContractObjectMaintenance.UpdateServiceContractArr(IUntilDate, TRUE, FALSE, TRUE);
        UNTIL ContractObjectMaintenance.NEXT = 0;
    END;

    PROCEDURE DetermineBudget@1100528601(IServiceContractNo@1100528621 : Code[20];ISCControlPeriod@1100528622 : Code[10];ISourceType@1100528619 : ' ,Call,Contract,Direct,Estimate,,,Modification,Replacement';ICostType@1100528620 : ' ,Labor,Material,Subcontracting,Plant,Sundry';IServiceCategory@1100528618 : Code[10];IAdditionalCost@1100528617 : 'Both,Yes,No';VAR OAllowed@1100528616 : Decimal) TotalBudget : Decimal;
    VAR
      ServiceContract@1100528613 : Record 11012812;
    BEGIN
      ServiceContract.GET(IServiceContractNo);

      CASE ServiceContract."Budget Based on" OF
        ServiceContract."Budget Based on"::"Maintenance Scheme",
        ServiceContract."Budget Based on"::"Category + Maintenance Scheme":
          BEGIN
            GetBudgetFromMaintenanceSchemes(IServiceContractNo, ISCControlPeriod, ISourceType, ICostType, IServiceCategory, IAdditionalCost, TotalBudget, OAllowed);
            GetBudgetFromServiceOrders(IServiceContractNo, ISCControlPeriod, ISourceType, ICostType, IServiceCategory, IAdditionalCost, TotalBudget, OAllowed);
            GetBudgetFromCalls(IServiceContractNo, ISCControlPeriod, ISourceType, ICostType, IServiceCategory, TotalBudget, OAllowed);
          END;
        ServiceContract."Budget Based on"::Category:
          BEGIN
            GetBudgetFromCategories(IServiceContractNo, ISCControlPeriod, ISourceType, ICostType, IServiceCategory, TotalBudget, OAllowed);
            IF ISourceType = ISourceType::Direct THEN
              GetBudgetFromServiceOrders(IServiceContractNo, ISCControlPeriod, ISourceType, ICostType, IServiceCategory, IAdditionalCost, TotalBudget, OAllowed);
          END;
      END;
    END;

    LOCAL PROCEDURE GetBudgetFromMaintenanceSchemes@1100528603(IServiceContractNo@1100528622 : Code[20];ISCControlPeriod@1100528623 : Code[10];ISourceType@1100528620 : ' ,Call,Contract,Direct,Estimate,,,Modification,Replacement';ICostType@1100528621 : ' ,Labor,Material,Subcontracting,Plant,Sundry';IServiceCategory@1100528619 : Code[10];IAdditionalCost@1100528618 : 'Both,Yes,No';VAR OBudget@1100528600 : Decimal;VAR OAllowed@1100528601 : Decimal);
    VAR
      ServiceContractArrangement@1100528617 : Record 11071705;
      ServiceObject@1100528616 : Record 11071691;
      ServiceContract@1100528615 : Record 11012812;
      ServiceOrder@1100528614 : Record 11012823;
      ServiceContractCtrlPeriod@1100528624 : Record 11071746;
      MaintenanceManagement@1100528613 : Codeunit 11012829;
      LaborAmount@1100528611 : Decimal;
      Hours@1100528610 : Decimal;
      Material@1100528609 : Decimal;
      Subcontracting@1100528608 : Decimal;
      Sundry@1100528607 : Decimal;
      Plant@1100528606 : Decimal;
      TotalCost@1100528605 : Decimal;
      SurchargeAmount@1100528604 : Decimal;
      FinishedPercentage@1100528603 : Decimal;
      DepartmentCode@1100528602 : Code[20];
    BEGIN
      IF NOT (ISourceType IN [ISourceType::" ", ISourceType::Contract]) THEN
        EXIT;
      ServiceContract.GET(IServiceContractNo);
      IF NOT (ServiceContract."Budget Based on" IN [
        ServiceContract."Budget Based on"::"Maintenance Scheme", ServiceContract."Budget Based on"::"Category + Maintenance Scheme"])
      THEN
        EXIT;
      ServiceContractCtrlPeriod.GET(IServiceContractNo, ISCControlPeriod);
      //UpdateSCArrangements(IServiceContractNo, ServiceContractCtrlPeriod."Ending Date");
      ServiceContractArrangement.SETRANGE("Service Contract No.", IServiceContractNo);
      ServiceContractArrangement.SETRANGE("Theoretical Maintenance Date", ServiceContractCtrlPeriod."Starting Date", ServiceContractCtrlPeriod."Ending Date");
      ServiceContractArrangement.SETRANGE(Cancelled, FALSE);
      ServiceContractArrangement.SETRANGE("Service Order No.", '');
      IF IServiceCategory <> '' THEN
        ServiceContractArrangement.SETRANGE("Service Category", IServiceCategory);
      IF ServiceContractArrangement.FINDSET THEN
        REPEAT
          LaborAmount := 0;
          Hours := 0;
          Material := 0;
          Subcontracting := 0;
          Sundry := 0;
          Plant := 0;
          TotalCost := 0;
          SurchargeAmount := 0;
          FinishedPercentage := 0;

          ServiceContractArrangement.CALCFIELDS("Planned Maintenance Date", "Service Package", "Maintenance Proposal No.");
          ServiceObject.GET(ServiceContractArrangement."Object No.");
          DepartmentCode := ServiceObject.GetDepartmentCode(IServiceContractNo);

          MaintenanceManagement.CalcBudgetLines2(
            6, ServiceContractArrangement."Object No.", ServiceContractArrangement."Maintenance Scheme",
            ServiceContractArrangement."Service Contract No.",
            ServiceContractArrangement."Theoretical Maintenance Date", ServiceObject.Quantity, DepartmentCode, IAdditionalCost,
            ICostType, TRUE, ServiceOrder."Source Type"::Contract,
            LaborAmount, Hours, Material, Subcontracting, Plant, Sundry, TotalCost, SurchargeAmount);

          IF ServiceContractArrangement.Finished THEN
            FinishedPercentage := 100
          ELSE
            FinishedPercentage := 0;

          OBudget += TotalCost;
          OAllowed += TotalCost * FinishedPercentage;
        UNTIL ServiceContractArrangement.NEXT = 0;
    END;

    LOCAL PROCEDURE GetBudgetFromServiceOrders@1100528609(IServiceContractNo@1100528610 : Code[20];ISCControlPeriod@1100528609 : Code[10];ISourceType@1100528604 : ' ,Call,Contract,Direct,Estimate,,,Modification,Replacement';ICostType@1100528608 : ' ,Labor,Material,Subcontracting,Plant,Sundry';IServiceCategory@1100528605 : Code[10];IAdditionalCost@1100528606 : 'Both,Yes,No';VAR OBudget@1100528601 : Decimal;VAR OAllowed@1100528600 : Decimal);
    VAR
      ServiceContract@1100528607 : Record 11012812;
      ServiceOrder@1100528602 : Record 11012823;
      ServiceOrderBudgetLine@1100528603 : Record 11012875;
      ServiceContractCtrlPeriod@1100528611 : Record 11071746;
    BEGIN
      ServiceContract.GET(IServiceContractNo);
      ServiceContractCtrlPeriod.GET(IServiceContractNo, ISCControlPeriod);
      ServiceOrder.SETRANGE("Service Contract No.", IServiceContractNo);
      ServiceOrder.SETRANGE("Service Control Period Date", ServiceContractCtrlPeriod."Starting Date", ServiceContractCtrlPeriod."Ending Date");
      //ServiceOrder.SETFILTER(Status, '<%1', ServiceOrder.Status::Finished);
      IF ISourceType <> ISourceType::" " THEN
        ServiceOrder.SETRANGE("Source Type", ISourceType -1);
      IF IServiceCategory <> '' THEN
        ServiceOrder.SETRANGE("Service Category", IServiceCategory);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceOrderBudgetLine.RESET;
          ServiceOrderBudgetLine.SETRANGE("Service Order No.", ServiceOrder."No.");
          IF ISourceType > ISourceType::" " THEN
            ServiceOrderBudgetLine.SETRANGE("Source Type", ISourceType -1);
          CASE IAdditionalCost OF
            IAdditionalCost::Yes:
              ServiceOrderBudgetLine.SETRANGE("Additional Cost", TRUE);
            IAdditionalCost::No:
              ServiceOrderBudgetLine.SETRANGE("Additional Cost", FALSE);
          END;
          IF ICostType <> ICostType::" " THEN
            ServiceOrderBudgetLine.SETRANGE("Cost Type", ICostType -1);
          ServiceOrderBudgetLine.CALCSUMS(Amount);
          OBudget += ServiceOrderBudgetLine.Amount;
          ServiceOrderBudgetLine.SETRANGE(Finished, TRUE);
          ServiceOrderBudgetLine.CALCSUMS(Amount);
          OAllowed += ServiceOrderBudgetLine.Amount;
        UNTIL ServiceOrder.NEXT = 0;
    END;

    LOCAL PROCEDURE GetBudgetFromCategories@1100528633(IServiceContractNo@1100528613 : Code[20];ISCControlPeriod@1100528612 : Code[10];ISourceType@1100528607 : ' ,Call,Contract,Direct,Estimate,,,Modification,Replacement';ICostType@1100528611 : ' ,Labor,Material,Subcontracting,Plant,Sundry';IServiceCategory@1100528602 : Code[10];VAR OBudget@1100528600 : Decimal;VAR OAllowed@1100528601 : Decimal);
    VAR
      ServiceContract@1100528603 : Record 11012812;
      SCBudgetVersion@1100528606 : Record 11071990;
      ServiceContractCtrlPeriod@1100528614 : Record 11071746;
      MaintenanceSalesAndCostMgt@1100528604 : Codeunit 11012827;
      SCControlbyPeriodMgt@1100529600 : Codeunit 11012885;
      NoOfDaysPerYear@1100528605 : Integer;
      SurchargeAmount@1100528609 : Decimal;
      Factor@1100528610 : Decimal;
    BEGIN
      ServiceContract.GET(IServiceContractNo);
      IF ServiceContract."Budget Based on" <> ServiceContract."Budget Based on"::Category THEN
        EXIT;
      ServiceContractCtrlPeriod.GET(IServiceContractNo, ISCControlPeriod);
      NoOfDaysPerYear := MaintenanceSalesAndCostMgt.NoOfDaysPerYear(ServiceContractCtrlPeriod."Starting Date");

      SCBudgetVersion.SETRANGE("Service Contract No.", IServiceContractNo);
      CASE ISourceType OF
        ISourceType::Call:
          SCBudgetVersion.SETRANGE("Source Type", SCBudgetVersion."Source Type"::Call);
        ISourceType::Contract:
          SCBudgetVersion.SETRANGE("Source Type", SCBudgetVersion."Source Type"::Contract);
      ELSE
        EXIT;
      END;
      SCBudgetVersion.SETFILTER("Index Date", '<=%1', ServiceContractCtrlPeriod."Ending Date");
      IF NOT SCBudgetVersion.FINDLAST THEN
        EXIT;
      SCBudgetVersion.SETFILTER("Service Category Filter", IServiceCategory);
      CASE ICostType OF
        ICostType::" ":
          SCBudgetVersion.CALCFIELDS("Cost Amount", "Cost Amount (Material)", "Cost Amount (Labor)",
            "Cost Amount (Subcontr.)", "Cost Amount (Plant)", "Cost Amount (Sundry)");
        ICostType::Material:
          BEGIN
            SCBudgetVersion.CALCFIELDS("Cost Amount (Material)");
            SCBudgetVersion."Cost Amount" := SCBudgetVersion."Cost Amount (Material)";
          END;
        ICostType::Labor:
          BEGIN
            SCBudgetVersion.CALCFIELDS("Cost Amount (Labor)");
            SCBudgetVersion."Cost Amount" := SCBudgetVersion."Cost Amount (Labor)";
          END;
        ICostType::Subcontracting:
          BEGIN
            SCBudgetVersion.CALCFIELDS("Cost Amount (Subcontr.)");
            SCBudgetVersion."Cost Amount" := SCBudgetVersion."Cost Amount (Subcontr.)";
          END;
        ICostType::Plant:
          BEGIN
            SCBudgetVersion.CALCFIELDS("Cost Amount (Plant)");
            SCBudgetVersion."Cost Amount" := SCBudgetVersion."Cost Amount (Plant)";
          END;
        ICostType::Sundry:
          BEGIN
            SCBudgetVersion.CALCFIELDS("Cost Amount (Sundry)");
            SCBudgetVersion."Cost Amount" := SCBudgetVersion."Cost Amount (Sundry)";
          END;
      END;

      SurchargeAmount := SCControlbyPeriodMgt.GetSCBudgetVersionSurchargeAmount(
        SCBudgetVersion, ISourceType, ServiceContractCtrlPeriod."Ending Date",
        IServiceCategory, ICostType <> ICostType::" ", ICostType + 1, FALSE, '');

      Factor := MaintenanceSalesAndCostMgt.NoOfDaysInterval(ServiceContract, ServiceContractCtrlPeriod."Starting Date", ServiceContractCtrlPeriod."Ending Date") / NoOfDaysPerYear;

      OBudget += (SCBudgetVersion."Cost Amount" + SurchargeAmount) * Factor;
    END;

    LOCAL PROCEDURE GetBudgetFromCalls@1100528641(IServiceContractNo@1100528616 : Code[20];ISCControlPeriod@1100528615 : Code[10];ISourceType@1100528603 : ' ,Call,Contract,Direct,Estimate,,,Modification,Replacement';ICostType@1100528614 : ' ,Labor,Material,Subcontracting,Plant,Sundry';IServiceCategory@1100528602 : Code[10];VAR OBudget@1100528601 : Decimal;VAR OAllowed@1100528600 : Decimal);
    VAR
      ServiceContract@1100528604 : Record 11012812;
      SCBudgetVersionCalls@1100528608 : Record 11071928;
      SCBudgetCallsRelease@1100528609 : Record 11071699;
      ServiceOrder@1100528612 : Record 11012823;
      ServiceContractCtrlPeriod@1100528617 : Record 11071746;
      MaintenanceSalesAndCostMgt@1100528605 : Codeunit 11012827;
      ServiceSurchargeManagement@1100528611 : Codeunit 11012834;
      BudgetPercReleased@1100528606 : Decimal;
      NoOfDaysPerYear@1100528607 : Integer;
      SurchargeAmount@1100528610 : Decimal;
      Factor@1100528613 : Decimal;
    BEGIN
      IF NOT (ISourceType IN [ISourceType::" ", ISourceType::Call]) THEN
        EXIT;
      ServiceContract.GET(IServiceContractNo);
      IF NOT (ServiceContract."Budget Based on" IN [
        ServiceContract."Budget Based on"::"Maintenance Scheme", ServiceContract."Budget Based on"::"Category + Maintenance Scheme"])
      THEN
        EXIT;
      ServiceContractCtrlPeriod.GET(IServiceContractNo, ISCControlPeriod);
      BudgetPercReleased :=
        SCBudgetCallsRelease.CalcTotalReleasePerc(
          IServiceContractNo, ServiceContractCtrlPeriod."Starting Date", ServiceContractCtrlPeriod."Ending Date", ServiceContractCtrlPeriod."Ending Date");
      NoOfDaysPerYear := MaintenanceSalesAndCostMgt.NoOfDaysPerYear(ServiceContractCtrlPeriod."Starting Date");

      SCBudgetVersionCalls.SETRANGE("Service Contract No.", IServiceContractNo);
      SCBudgetVersionCalls.SETFILTER("Index Date", '<=%1', ServiceContractCtrlPeriod."Ending Date");
      IF NOT SCBudgetVersionCalls.FINDLAST THEN
        EXIT;
      CASE ICostType OF
        ICostType::" ":
          SCBudgetVersionCalls.CALCFIELDS("Cost Amount", "Cost Amount (Material)", "Cost Amount (Labor)",
            "Cost Amount (Subcontr.)", "Cost Amount (Plant)", "Cost Amount (Sundry)");
        ICostType::Material:
          BEGIN
            SCBudgetVersionCalls.CALCFIELDS("Cost Amount (Material)");
            SCBudgetVersionCalls."Cost Amount" := SCBudgetVersionCalls."Cost Amount (Material)";
          END;
        ICostType::Labor:
          BEGIN
            SCBudgetVersionCalls.CALCFIELDS("Cost Amount (Labor)");
            SCBudgetVersionCalls."Cost Amount" := SCBudgetVersionCalls."Cost Amount (Labor)";
          END;
        ICostType::Subcontracting:
          BEGIN
            SCBudgetVersionCalls.CALCFIELDS("Cost Amount (Subcontr.)");
            SCBudgetVersionCalls."Cost Amount" := SCBudgetVersionCalls."Cost Amount (Subcontr.)";
          END;
        ICostType::Plant:
          BEGIN
            SCBudgetVersionCalls.CALCFIELDS("Cost Amount (Plant)");
            SCBudgetVersionCalls."Cost Amount" := SCBudgetVersionCalls."Cost Amount (Plant)";
          END;
        ICostType::Sundry:
          BEGIN
            SCBudgetVersionCalls.CALCFIELDS("Cost Amount (Sundry)");
            SCBudgetVersionCalls."Cost Amount" := SCBudgetVersionCalls."Cost Amount (Sundry)";
          END;
      END;

      SurchargeAmount := ServiceSurchargeManagement.CalculateSCSurchargeAmount(
        IServiceContractNo, ServiceOrder."Source Type"::Call,
        ServiceContractCtrlPeriod."Ending Date",
        SCBudgetVersionCalls."Cost Amount (Labor)",
        SCBudgetVersionCalls."Cost Amount (Material)",
        SCBudgetVersionCalls."Cost Amount (Subcontr.)",
        SCBudgetVersionCalls."Cost Amount (Plant)",
        SCBudgetVersionCalls."Cost Amount (Sundry)",
        SCBudgetVersionCalls."Cost Amount");

      Factor := MaintenanceSalesAndCostMgt.NoOfDaysInterval(ServiceContract, ServiceContractCtrlPeriod."Starting Date", ServiceContractCtrlPeriod."Ending Date") / NoOfDaysPerYear;

      OBudget += (SCBudgetVersionCalls."Cost Amount" + SurchargeAmount) * Factor;
      OAllowed +=  (SCBudgetVersionCalls."Cost Amount" + SurchargeAmount) * Factor * BudgetPercReleased / 100;
    END;

    PROCEDURE GetBudgetRevenueFromServiceOrders@1100528611(IServiceContractNo@1100528607 : Code[20];ISCControlPeriod@1100528606 : Code[10];ISourceType@1100528605 : ' ,Call,Contract,Direct,Estimate,,,Modification,Replacement';ICostType@1100528604 : ' ,Labor,Material,Subcontracting,Plant,Sundry';IServiceCategory@1100528603 : Code[10];IAdditionalCost@1100528602 : 'Both,Yes,No';VAR OBudgetRevenue@1100528601 : Decimal);
    VAR
      ServiceOrder@1100528600 : Record 11012823;
      ServiceOrderCostPlusEntry@1100528608 : Record 11012825;
      ServiceContractCtrlPeriod@1100528609 : Record 11071746;
    BEGIN
      ServiceContractCtrlPeriod.GET(IServiceContractNo, ISCControlPeriod);

      ServiceOrder.SETCURRENTKEY("Service Contract No.");
      ServiceOrder.SETRANGE("Service Contract No.", IServiceContractNo);
      ServiceOrder.SETRANGE("Service Control Period Date", ServiceContractCtrlPeriod."Starting Date", ServiceContractCtrlPeriod."Ending Date");
      IF ISourceType > ISourceType::" " THEN
        ServiceOrder.SETRANGE("Source Type", ISourceType -1);
      IF IServiceCategory <> '' THEN
        ServiceOrder.SETRANGE("Service Category", IServiceCategory);
      ServiceOrder.SETFILTER(Status, '<%1', ServiceOrder.Status::Finished);
      IF ServiceOrder.FINDSET THEN
        REPEAT
          ServiceOrderCostPlusEntry.RESET;
          ServiceOrderCostPlusEntry.SETCURRENTKEY("Service Order No.", Invoiced, Chargeable, "Additional Cost");
          ServiceOrderCostPlusEntry.SETRANGE("Service Order No.", ServiceOrder."No.");
          CASE IAdditionalCost OF
            IAdditionalCost::Yes:
              ServiceOrderCostPlusEntry.SETRANGE("Additional Cost", TRUE);
            IAdditionalCost::No:
              ServiceOrderCostPlusEntry.SETRANGE("Additional Cost", FALSE);
          END;
          IF ICostType > ICostType::" " THEN
            ServiceOrderCostPlusEntry.SETRANGE("Cost Type", ICostType -1);
          ServiceOrderCostPlusEntry.SETRANGE(Invoiced, TRUE);
          ServiceOrderCostPlusEntry.CALCSUMS("Invoice Price (LCY)");
          OBudgetRevenue += ServiceOrderCostPlusEntry."Invoice Price (LCY)";

          ServiceOrderCostPlusEntry.SETRANGE(Invoiced, FALSE);
          ServiceOrderCostPlusEntry.SETRANGE(Chargeable, TRUE);
          ServiceOrderCostPlusEntry.CALCSUMS("Invoice Price (LCY)");
          OBudgetRevenue += ServiceOrderCostPlusEntry."Invoice Price (LCY)";
        UNTIL ServiceOrder.NEXT = 0;
    END;

    PROCEDURE GetPeriodFilterText@1100528608(IServiceContractNo@1100528600 : Code[20];ISCControlPeriod@1100528601 : Code[10]) : Text;
    VAR
      ServiceContractCtrlPeriod@1100528602 : Record 11071746;
    BEGIN
      IF ServiceContractCtrlPeriod.GET(IServiceContractNo, ISCControlPeriod) THEN
        EXIT(ServiceContractCtrlPeriod.GetPeriodFilterText);
    END;

    PROCEDURE GetDatesFromDateFilter@1100528612(IDateFilter@1100528600 : Text;VAR OStartingDate@1100528602 : Date;VAR OEndingDate@1100528603 : Date);
    VAR
      Date@1100528601 : Record 2000000007;
    BEGIN
      Date.SETFILTER("Period Start", IDateFilter);
      IF Date.GETFILTER(Date."Period Start") <> '' THEN BEGIN
        OStartingDate := Date.GETRANGEMIN("Period Start");
        OEndingDate := Date.GETRANGEMAX("Period Start");
      END ELSE BEGIN
        OStartingDate := 0D;
        OEndingDate := 0D;
      END;
    END;

    BEGIN
    END.
  }
}

