OBJECT Table 5093 Opportunity Entry
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW114.00,4PS14.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               Opp@1000 : Record 5092;
               SalesCycleStage@1001 : Record 11072043;
             BEGIN
               Opp.GET("Opportunity No.");
               CASE "Action Taken" OF
                 "Action Taken"::" ",
                 "Action Taken"::Next,
                 "Action Taken"::Previous,
                 "Action Taken"::Updated,
                 "Action Taken"::Jumped:
                   BEGIN
                     IF SalesCycleStage.GET("Sales Cycle Code","Sales Cycle Stage") THEN
                       "Sales Cycle Stage Description" := SalesCycleStage.Description;
                     IF Opp.Status <> Opp.Status::"In Progress" THEN BEGIN
                       Opp.Status := Opp.Status::"In Progress";
                       Opp.MODIFY;
                     END;
                   END;
                 "Action Taken"::Won:
                   BEGIN
                     TestCust;
                     IF Opp.Status <> Opp.Status::Won THEN BEGIN
                       Opp.Status := Opp.Status::Won;
                       Opp.Closed := TRUE;
                       Opp."Date Closed" := "Date of Change";
                       "Date Closed" := "Date of Change";
                       "Estimated Close Date" := "Date of Change";
                       Opp.MODIFY;
                     END;
                   END;
                 "Action Taken"::Lost:
                   IF Opp.Status <> Opp.Status::Lost THEN BEGIN
                     Opp.Status := Opp.Status::Lost;
                     Opp.Closed := TRUE;
                     Opp."Date Closed" := "Date of Change";
                     "Date Closed" := "Date of Change";
                     "Estimated Close Date" := "Date of Change";
                     Opp.MODIFY;
                   END;
               END;
             END;

    CaptionML=[ENU=Opportunity Entry;
               NOR=Salgsmulighetspost];
    LookupPageID=Page11072078;
    DrillDownPageID=Page11072078;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              NOR=L›penr.;
                                                              SVE=L”pnr] }
    { 2   ;   ;Opportunity No.     ;Code20        ;TableRelation=Opportunity;
                                                   OnValidate=VAR
                                                                OppEntry@1000 : Record 5093;
                                                              BEGIN
                                                                OppEntry.SETCURRENTKEY(Active,"Opportunity No.");
                                                                OppEntry.SETRANGE(Active,TRUE);
                                                                OppEntry.SETRANGE("Opportunity No.","Opportunity No.");
                                                                IF OppEntry.FINDFIRST THEN BEGIN
                                                                  "Estimated Value (LCY)" := OppEntry."Estimated Value (LCY)";
                                                                  "Chances of Success %" := OppEntry."Chances of Success %";
                                                                  "Date of Change" := OppEntry."Date of Change";
                                                                  IF OppEntry."Date of Change" > WORKDATE THEN
                                                                    "Date of Change" := OppEntry."Date of Change"
                                                                  ELSE
                                                                    "Date of Change" := WORKDATE;
                                                                  "Estimated Close Date" := OppEntry."Estimated Close Date";
                                                                  "Previous Sales Cycle Stage" := OppEntry."Sales Cycle Stage";
                                                                  "Action Taken" := OppEntry."Action Taken";
                                                                END ELSE
                                                                  "Date of Change" := WORKDATE;
                                                              END;

                                                   CaptionML=[ENU=Opportunity No.;
                                                              NOR=Salgsmulighetsnr.;
                                                              SVE=Aff„rsm”jlighetsnr] }
    { 3   ;   ;Sales Cycle Code    ;Code10        ;TableRelation="Sales Cycle";
                                                   CaptionML=[ENU=Sales Cycle Code;
                                                              NOR=Salgssykluskode;
                                                              SVE=F”rs.cykelkod] }
    { 4   ;   ;Sales Cycle Stage   ;Integer       ;TableRelation="Sales Cycle Stage".Stage WHERE (Sales Cycle Code=FIELD(Sales Cycle Code));
                                                   OnValidate=BEGIN
                                                                IF SalesCycleStage.GET("Sales Cycle Code","Sales Cycle Stage") THEN
                                                                  "Sales Cycle Stage Description" := SalesCycleStage.Description;
                                                              END;

                                                   CaptionML=[ENU=Sales Cycle Stage;
                                                              NOR=Salgssyklusfase;
                                                              SVE=F”rs.cykeletapp];
                                                   MinValue=1 }
    { 5   ;   ;Contact No.         ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Contact No.;
                                                              NOR=Kontaktnr.;
                                                              SVE=Kontaktnr] }
    { 6   ;   ;Contact Company No. ;Code20        ;TableRelation=Contact WHERE (Type=CONST(Company));
                                                   CaptionML=[ENU=Contact Company No.;
                                                              NOR=Kontaktselskapets nr.;
                                                              SVE=Kontaktf”retag nr] }
    { 7   ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Salesperson Code;
                                                              NOR=Selgerkode;
                                                              SVE=S„ljarkod] }
    { 8   ;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   CaptionML=[ENU=Campaign No.;
                                                              NOR=Kampanjenr.;
                                                              SVE=Kampanjnr] }
    { 9   ;   ;Date of Change      ;Date          ;CaptionML=[ENU=Date of Change;
                                                              NOR=Endret den;
                                                              SVE=Uppdateringsdatum] }
    { 10  ;   ;Active              ;Boolean       ;CaptionML=[ENU=Active;
                                                              NOR=Aktiv;
                                                              SVE=Aktiv] }
    { 11  ;   ;Date Closed         ;Date          ;CaptionML=[ENU=Date Closed;
                                                              NOR=Lukket den;
                                                              SVE=Avslutsdatum] }
    { 12  ;   ;Days Open           ;Decimal       ;CaptionML=[ENU=Days Open;
                                                              NOR=Dager †pen;
                                                              SVE=™ppen antal dagar];
                                                   DecimalPlaces=0:0;
                                                   MinValue=0 }
    { 13  ;   ;Action Taken        ;Option        ;OnValidate=BEGIN
                                                                IF "Action Taken" <> xRec."Action Taken" THEN
                                                                  CLEAR("Close Opportunity Code");
                                                              END;

                                                   CaptionML=[ENU=Action Taken;
                                                              NOR=Tiltak;
                                                              SVE=Vidtagen †tg„rd];
                                                   OptionCaptionML=[ENU=" ,Next,Previous,Updated,Jumped,Won,Lost";
                                                                    NOR=" ,Neste,Forrige,Oppdatert,Hoppet over,Vunnet,Tapt";
                                                                    SVE=" ,N„sta,F”reg†ende,Uppdaterad,™verhoppad,Vunnen,F”rlorad"];
                                                   OptionString=[ ,Next,Previous,Updated,Jumped,Won,Lost] }
    { 14  ;   ;Estimated Value (LCY);Decimal      ;CaptionML=[ENU=Estimated Value (LCY);
                                                              NOR=Ansl†tt verdi (NOK);
                                                              SVE=Uppskattat v„rde (BVA)];
                                                   AutoFormatType=1 }
    { 15  ;   ;Calcd. Current Value (LCY);Decimal ;CaptionML=[ENU=Calcd. Current Value (LCY);
                                                              NOR=Beregnet n†verdi (NOK);
                                                              SVE=Ber. aktuellt v„rde (BVA)];
                                                   AutoFormatType=1 }
    { 16  ;   ;Completed %         ;Decimal       ;CaptionML=[ENU=Completed %;
                                                              NOR=Fullf›rings-%;
                                                              SVE=Avslutad %];
                                                   DecimalPlaces=0:0 }
    { 17  ;   ;Chances of Success %;Decimal       ;CaptionML=[ENU=Chances of Success %;
                                                              NOR=Salgsutsikts-%];
                                                   DecimalPlaces=0:0;
                                                   MaxValue=100 }
    { 18  ;   ;Probability %       ;Decimal       ;CaptionML=[ENU=Probability %;
                                                              NOR=Sannsynlighets-%;
                                                              SVE=Sannolikhet %];
                                                   DecimalPlaces=0:0 }
    { 19  ;   ;Close Opportunity Code;Code10      ;TableRelation=IF (Action Taken=CONST(Won)) "Close Opportunity Code" WHERE (Type=CONST(Won))
                                                                 ELSE IF (Action Taken=CONST(Lost)) "Close Opportunity Code" WHERE (Type=CONST(Lost));
                                                   CaptionML=[ENU=Close Opportunity Code;
                                                              NOR=Lukk. av salgsmuligh. - kode;
                                                              SVE=Avslutskod aff„rsm”jlighet] }
    { 20  ;   ;Previous Sales Cycle Stage;Integer ;TableRelation="Sales Cycle Stage".Stage WHERE (Sales Cycle Code=FIELD(Sales Cycle Code));
                                                   CaptionML=[ENU=Previous Sales Cycle Stage;
                                                              NOR=Forrige salgssyklusfase] }
    { 21  ;   ;Estimated Close Date;Date          ;CaptionML=[ENU=Estimated Close Date;
                                                              NOR=Ansl†tt avslutningsdato;
                                                              SVE=Troligt avslutsdatum] }
    { 9501;   ;Wizard Step         ;Option        ;CaptionML=[ENU=Wizard Step;
                                                              NOR=Trinn i veiviser;
                                                              SVE=Guidesteg];
                                                   OptionCaptionML=[ENU=" ,1,2,3,4,5,6";
                                                                    NOR=" ,1,2,3,4,5,6";
                                                                    SVE=" ,1,2,3,4,5,6"];
                                                   OptionString=[ ,1,2,3,4,5,6];
                                                   Editable=No }
    { 9502;   ;Cancel Old To Do    ;Boolean       ;CaptionML=[ENU=Cancel Old Task;
                                                              NOR=Avbryt gammel oppgave] }
    { 9503;   ;Action Type         ;Option        ;CaptionML=[ENU=Action Type;
                                                              NOR=Handlingstype;
                                                              SVE=Aktionstyp];
                                                   OptionCaptionML=[ENU=" ,First,Next,Previous,Skip,Update,Jump";
                                                                    NOR=" ,F›rste,Neste,Forrige,Hopp over,Oppdater,Hopp"];
                                                   OptionString=[ ,First,Next,Previous,Skip,Update,Jump] }
    { 9504;   ;Sales Cycle Stage Description;Text100;
                                                   CaptionML=[ENU=Sales Cycle Stage Description;
                                                              NOR=Beskrivelse av salgssyklusfase] }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Opportunity No.                          }
    {    ;Contact Company No.,Contact No.,Active  ;SumIndexFields=Estimated Value (LCY),Calcd. Current Value (LCY) }
    {    ;Campaign No.,Active                     ;SumIndexFields=Estimated Value (LCY),Calcd. Current Value (LCY) }
    {    ;Active,Sales Cycle Code,Sales Cycle Stage,Estimated Close Date;
                                                   SumIndexFields=Estimated Value (LCY),Calcd. Current Value (LCY),Days Open }
    {    ;Active,Opportunity No.                  ;SumIndexFields=Estimated Value (LCY),Calcd. Current Value (LCY),Days Open }
    {    ;Active,Salesperson Code,Date of Change  ;SumIndexFields=Estimated Value (LCY),Calcd. Current Value (LCY) }
    {    ;Close Opportunity Code                   }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Entry No.,Opportunity No.,Active         }
    { 2   ;Brick               ;Opportunity No.,Sales Cycle Stage Description }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You can not create a Customer from contact %1 before you assign a Contact Company No. to the contact.;NOR=Du kan ikke opprette en kunde fra kontakten %1 f›r du tilordner et kontaktselskapsnummer til kontakten.';
      TempSalesCycleStageFirst@1010 : TEMPORARY Record 11072043;
      TempSalesCycleStageNext@1009 : TEMPORARY Record 11072043;
      TempSalesCycleStagePrevious@1008 : TEMPORARY Record 11072043;
      TempSalesCycleStageSkip@1007 : TEMPORARY Record 11072043;
      TempSalesCycleStageUpdate@1006 : TEMPORARY Record 11072043;
      TempSalesCycleStageJump@1005 : TEMPORARY Record 11072043;
      OppEntry@1011 : Record 5093;
      SalesCycleStage@1012 : Record 11072043;
      PreviousDateOfChange@1013 : Date;
      EntryExists@1014 : Boolean;
      Text005@1015 : TextConst 'ENU=You cannot go to this stage before you have assigned a sales quote.;NOR=Du kan ikke g† videre til denne fasen f›r du har tilordnet et tilbud.';
      Text006@1020 : TextConst 'ENU=There are no stages in sales cycle %1.;NOR=Det finnes ingen faser i salgssyklus %1.';
      Text007@1019 : TextConst 'ENU=The Date of Change has to be after last Date of change.;NOR=Endringsdatoen m† komme etter siste endringsdato.';
      Text008@1018 : TextConst 'ENU=%1 must be greater than 0.;NOR=%1 m† v‘re st›rre enn 0.;SVE=%1 m†ste vara st”rre „n noll.';
      Text009@1017 : TextConst 'ENU=The Estimated closing date has to be later than this change.;NOR=Den ansl†tte avslutningsdatoen m† v‘re senere enn denne endringen.';
      Text011@1023 : TextConst 'ENU=You must select either Won or Lost.;NOR=Du m† velge enten Vunnet eller Tapt.';
      Text012@1022 : TextConst 'ENU=Sales (LCY) must be greater than 0.;NOR=Salg (NOK) m† v‘re st›rre enn 0.';
      Text013@1021 : TextConst 'ENU=You must fill in the %1 field.;NOR=Du m† fylle ut feltet %1.;SVE=Du m†ste fylla i f„ltet %1.';

    [Internal]
    PROCEDURE InsertEntry@1(VAR OppEntry@1000 : Record 5093;CancelOldTask@1001 : Boolean;CreateNewTask@1002 : Boolean);
    VAR
      OppEntry2@1003 : Record 5093;
      EntryNo@1004 : Integer;
    BEGIN
      OppEntry2.RESET;
      IF OppEntry2.FINDLAST THEN
        EntryNo := OppEntry2."Entry No."
      ELSE
        EntryNo := 0;
      OppEntry2.SETCURRENTKEY(Active,"Opportunity No.");
      OppEntry2.SETRANGE(Active,TRUE);
      OppEntry2.SETRANGE("Opportunity No.",OppEntry."Opportunity No.");
      IF OppEntry2.FINDFIRST THEN BEGIN
        OppEntry2.Active := FALSE;
        OppEntry2."Days Open" := OppEntry."Date of Change" - OppEntry2."Date of Change";
        OppEntry2.MODIFY;
      END;

      OppEntry2 := OppEntry;
      OppEntry2."Entry No." := EntryNo + 1;
      OppEntry2.Active := TRUE;
      OppEntry2.CreateTask(CancelOldTask,CreateNewTask);
      OppEntry2.INSERT(TRUE);
      OppEntry := OppEntry2;
    END;

    [External]
    PROCEDURE UpdateEstimates@2();
    VAR
      SalesCycle@1000 : Record 11072042;
      SalesCycleStage@1001 : Record 11072043;
      Opp@1002 : Record 5092;
      SalesHeader@1003 : Record 36;
    BEGIN
      IF SalesCycleStage.GET("Sales Cycle Code","Sales Cycle Stage") THEN BEGIN
        SalesCycle.GET("Sales Cycle Code");
        IF ("Chances of Success %" = 0) AND (SalesCycleStage."Chances of Success %" <> 0) THEN
          "Chances of Success %" := SalesCycleStage."Chances of Success %";
        "Completed %" := SalesCycleStage."Completed %";
        CASE SalesCycle."Probability Calculation" OF
          SalesCycle."Probability Calculation"::Multiply:
            "Probability %" := "Chances of Success %" * "Completed %" / 100;
          SalesCycle."Probability Calculation"::Add:
            "Probability %" := ("Chances of Success %" + "Completed %") / 2;
          SalesCycle."Probability Calculation"::"Chances of Success %":
            "Probability %" := "Chances of Success %";
          SalesCycle."Probability Calculation"::"Completed %":
            "Probability %" := "Completed %";
        END;
        "Calcd. Current Value (LCY)" := "Estimated Value (LCY)" * "Probability %" / 100;
        IF ("Estimated Close Date" = "Date of Change") OR ("Estimated Close Date" = 0D) THEN
          "Estimated Close Date" := CALCDATE(SalesCycleStage."Date Formula","Date of Change");
      END;

      CASE "Action Taken" OF
        "Action Taken"::Won:
          BEGIN
            Opp.GET("Opportunity No.");
            IF SalesHeader.GET(SalesHeader."Document Type"::Quote,Opp."Sales Document No.") THEN
              "Calcd. Current Value (LCY)" := GetSalesDocValue(SalesHeader);

            "Completed %" := 100;
            "Chances of Success %" := 100;
            "Probability %" := 100;
          END;
        "Action Taken"::Lost:
          BEGIN
            "Calcd. Current Value (LCY)" := 0;
            "Completed %" := 100;
            "Chances of Success %" := 0;
            "Probability %" := 0;
          END;
      END;
      MODIFY;
    END;

    [Internal]
    PROCEDURE CreateTask@3(CancelOldTask@1000 : Boolean;CreateNewTask@1001 : Boolean);
    VAR
      SalesCycleStage@1002 : Record 11072043;
      Task@1003 : Record 5080;
      Opp@1004 : Record 5092;
      TempRMCommentLine@1005 : TEMPORARY Record 5061;
      TempAttendee@1008 : TEMPORARY Record 5199;
      TempTaskInteractionLanguage@1007 : TEMPORARY Record 5196;
      TempAttachment@1006 : TEMPORARY Record 11072030;
    BEGIN
      IF CancelOldTask THEN
        Task.CancelOpenTasks("Opportunity No.");

      IF CreateNewTask THEN
        IF SalesCycleStage.GET("Sales Cycle Code","Sales Cycle Stage") THEN
          IF SalesCycleStage."Activity Code" <> '' THEN BEGIN
            Opp.GET("Opportunity No.");
            Task."No." := '';
            Task."Campaign No." := "Campaign No.";
            Task."Segment No." := Opp."Segment No.";
            Task."Salesperson Code" := "Salesperson Code";
            Task.VALIDATE("Contact No.","Contact No.");
            Task."Opportunity No." := "Opportunity No.";
            Task."Opportunity Entry No." := "Entry No.";
            Task.Date := "Date of Change";
            Task.Duration := 1440 * 1000 * 60;
            Task.InsertTask(
              Task,TempRMCommentLine,TempAttendee,
              TempTaskInteractionLanguage,TempAttachment,
              SalesCycleStage."Activity Code",FALSE);
          END;
    END;

    [External]
    PROCEDURE GetSalesDocValue@4(SalesHeader@1000 : Record 36) : Decimal;
    VAR
      TotalSalesLine@1001 : Record 37;
      TotalSalesLineLCY@1002 : Record 37;
      SalesPost@1003 : Codeunit 80;
      VATAmount@1004 : Decimal;
      VATAmountText@1005 : Text[30];
      ProfitLCY@1006 : Decimal;
      ProfitPct@1007 : Decimal;
      TotalAdjCostLCY@1009 : Decimal;
    BEGIN
      SalesPost.SumSalesLines(
        SalesHeader,0,TotalSalesLine,TotalSalesLineLCY,
        VATAmount,VATAmountText,ProfitLCY,ProfitPct,TotalAdjCostLCY);
      EXIT(TotalSalesLineLCY.Amount);
    END;

    LOCAL PROCEDURE TestCust@5();
    VAR
      Cont@1000 : Record 5050;
      ContBusRel@1001 : Record 5054;
      MarketingSetup@1100527302 : Record 5079;
      LeadingCompany@1100527301 : Text[50];
      CompanyRelationsCentralMgt@1100527300 : Record 11012059;
    BEGIN
      Cont.GET("Contact No.");

      IF Cont.Type = Cont.Type::Person THEN
        IF NOT Cont.GET(Cont."Company No.") THEN
          ERROR(Text000,Cont."No.");

      //**4PS.sn
      MarketingSetup.GET;
      IF MarketingSetup."Central Management" THEN BEGIN
        LeadingCompany := CompanyRelationsCentralMgt.GetLeadingCompany(DATABASE::"Marketing Setup", TRUE);
        IF (LeadingCompany <> COMPANYNAME) AND NOT MarketingSetup."Allow Decentral Customers" THEN
          EXIT;
      END;
      //**4PS.en

      ContBusRel.SETRANGE("Contact No.",Cont."No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);

      IF NOT ContBusRel.FINDFIRST THEN
        Cont.CreateCustomer('');
    END;

    [External]
    PROCEDURE InitOpportunityEntry@6(Opp@1000 : Record 5092);
    BEGIN
      VALIDATE("Opportunity No.",Opp."No.");
      "Sales Cycle Code" := Opp."Sales Cycle Code";
      "Contact No." := Opp."Contact No.";
      "Contact Company No." := Opp."Contact Company No.";
      "Salesperson Code" := Opp."Salesperson Code";
      "Campaign No." := Opp."Campaign No.";
    END;

    [External]
    PROCEDURE CloseOppFromOpp@30(VAR Opp@1000 : Record 5092);
    BEGIN
      Opp.TESTFIELD(Closed,FALSE);
      DELETEALL;
      INIT;
      VALIDATE("Opportunity No.",Opp."No.");
      "Sales Cycle Code" := Opp."Sales Cycle Code";
      "Contact No." := Opp."Contact No.";
      "Contact Company No." := Opp."Contact Company No.";
      "Salesperson Code" := Opp."Salesperson Code";
      "Campaign No." := Opp."Campaign No.";

      StartWizard;
    END;

    LOCAL PROCEDURE StartWizard@15();
    BEGIN
      INSERT;
      IF PAGE.RUNMODAL(PAGE::"Close Opportunity",Rec) = ACTION::OK THEN;
    END;

    [External]
    PROCEDURE CheckStatus@16();
    BEGIN
      IF NOT ("Action Taken" IN ["Action Taken"::Won,"Action Taken"::Lost]) THEN
        ERROR(Text011);
      IF "Close Opportunity Code" = '' THEN
        ErrorMessage(FIELDCAPTION("Close Opportunity Code"));
      IF "Date of Change" = 0D THEN
        ErrorMessage(FIELDCAPTION("Date of Change"));
      IF "Action Taken" = "Action Taken"::Won THEN
        IF "Calcd. Current Value (LCY)" <= 0 THEN
          ERROR(Text012);
    END;

    [Internal]
    PROCEDURE FinishWizard@18();
    VAR
      OppEntry@1000 : Record 5093;
    BEGIN
      UpdateEstimates;
      OppEntry := Rec;
      InsertEntry(OppEntry,"Cancel Old To Do",FALSE);
      DELETE;
    END;

    LOCAL PROCEDURE ErrorMessage@10(FieldName@1000 : Text[1024]);
    BEGIN
      ERROR(Text013,FieldName);
    END;

    [External]
    PROCEDURE UpdateOppFromOpp@31(VAR Opp@1000 : Record 5092);
    BEGIN
      Opp.TESTFIELD(Closed,FALSE);
      DELETEALL;
      INIT;
      VALIDATE("Opportunity No.",Opp."No.");
      "Sales Cycle Code" := Opp."Sales Cycle Code";
      "Contact No." := Opp."Contact No.";
      "Contact Company No." := Opp."Contact Company No.";
      "Salesperson Code" := Opp."Salesperson Code";
      "Campaign No." := Opp."Campaign No.";

      StartWizard2;
    END;

    LOCAL PROCEDURE StartWizard2@20();
    BEGIN
      "Wizard Step" := "Wizard Step"::"1";
      CreateStageList;
      INSERT;
      IF PAGE.RUNMODAL(PAGE::"Update Opportunity",Rec) = ACTION::OK THEN;
    END;

    [External]
    PROCEDURE CheckStatus2@11();
    BEGIN
      IF "Action Type" = "Action Type"::" " THEN
        ERROR(Text006,"Sales Cycle Code");

      IF EntryExists THEN
        IF "Date of Change" < PreviousDateOfChange THEN
          ERROR(Text007);
      IF "Date of Change" = 0D THEN
        ErrorMessage(FIELDCAPTION("Date of Change"));

      ValidateStage;

      IF "Estimated Value (LCY)" <= 0 THEN
        ERROR(Text008,FIELDCAPTION("Estimated Value (LCY)"));
      IF "Chances of Success %" <= 0 THEN
        ERROR(Text008,FIELDCAPTION("Chances of Success %"));
      IF "Estimated Close Date" = 0D THEN
        ErrorMessage(FIELDCAPTION("Estimated Close Date"));
      IF "Estimated Close Date" < "Date of Change" THEN
        ERROR(Text009);
    END;

    [Internal]
    PROCEDURE FinishWizard2@8();
    VAR
      CreateNewTask@1000 : Boolean;
      CancelOldTask@1001 : Boolean;
    BEGIN
      CancelOldTask := "Cancel Old To Do";
      CreateNewTask := "Action Taken" <> "Action Taken"::Updated;
      "Wizard Step" := "Wizard Step"::" ";
      "Cancel Old To Do" := FALSE;
      UpdateEstimates;
      "Action Type" := "Action Type"::" ";
      "Sales Cycle Stage Description" := '';
      OppEntry := Rec;
      InsertEntry(OppEntry,CancelOldTask,CreateNewTask);
      DELETE;
    END;

    [External]
    PROCEDURE WizardActionTypeValidate2@32();
    VAR
      Task@1000 : Record 5080;
    BEGIN
      CASE "Action Type" OF
        "Action Type"::First:
          BEGIN
            TempSalesCycleStageFirst.FINDFIRST;
            "Sales Cycle Stage" := TempSalesCycleStageFirst.Stage;
            "Sales Cycle Stage Description" := TempSalesCycleStageFirst.Description;
            "Action Taken" := "Action Taken"::" ";
            "Cancel Old To Do" := FALSE;
          END;
        "Action Type"::Next:
          BEGIN
            TempSalesCycleStageNext.FINDFIRST;
            "Sales Cycle Stage" := TempSalesCycleStageNext.Stage;
            "Sales Cycle Stage Description" := TempSalesCycleStageNext.Description;
            "Action Taken" := "Action Taken"::Next;
          END;
        "Action Type"::Previous:
          BEGIN
            TempSalesCycleStagePrevious.FINDFIRST;
            "Sales Cycle Stage" := TempSalesCycleStagePrevious.Stage;
            "Sales Cycle Stage Description" := TempSalesCycleStagePrevious.Description;
            "Action Taken" := "Action Taken"::Previous;
          END;
        "Action Type"::Skip:
          BEGIN
            TempSalesCycleStageSkip.FINDFIRST;
            "Sales Cycle Stage" := TempSalesCycleStageSkip.Stage;
            "Sales Cycle Stage Description" := TempSalesCycleStageSkip.Description;
            "Action Taken" := "Action Taken"::Jumped;
          END;
        "Action Type"::Update:
          BEGIN
            TempSalesCycleStageUpdate.FINDFIRST;
            "Sales Cycle Stage" := TempSalesCycleStageUpdate.Stage;
            "Sales Cycle Stage Description" := TempSalesCycleStageUpdate.Description;
            "Action Taken" := "Action Taken"::Updated;
            "Cancel Old To Do" := FALSE;
          END;
        "Action Type"::Jump:
          BEGIN
            TempSalesCycleStageJump.FINDLAST;
            "Sales Cycle Stage" := TempSalesCycleStageJump.Stage;
            "Sales Cycle Stage Description" := TempSalesCycleStageJump.Description;
            "Action Taken" := "Action Taken"::Jumped;
          END;
      END;
      Task.RESET;
      Task.SETCURRENTKEY("Opportunity No.");
      Task.SETRANGE("Opportunity No.","Opportunity No.");
      IF Task.FINDFIRST THEN
        "Cancel Old To Do" := FALSE;
      MODIFY;
    END;

    [External]
    PROCEDURE WizardSalesCycleStageValidate2@12();
    BEGIN
      CASE "Action Type" OF
        "Action Type"::Skip:
          BEGIN
            IF TempSalesCycleStageNext.GET("Sales Cycle Code","Sales Cycle Stage")THEN
              "Action Taken" := "Action Taken"::Next;
            MODIFY;
          END;
        "Action Type"::Jump:
          BEGIN
            IF TempSalesCycleStagePrevious.GET("Sales Cycle Code","Sales Cycle Stage")THEN
              "Action Taken" := "Action Taken"::Previous;
            MODIFY;
          END;
      END;
      ValidateStage;
    END;

    [External]
    PROCEDURE CreateStageList@13();
    VAR
      Stop@1000 : Boolean;
    BEGIN
      TempSalesCycleStageFirst.DELETEALL;
      TempSalesCycleStageNext.DELETEALL;
      TempSalesCycleStagePrevious.DELETEALL;
      TempSalesCycleStageSkip.DELETEALL;
      TempSalesCycleStageUpdate.DELETEALL;
      TempSalesCycleStageJump.DELETEALL;

      OppEntry.RESET;
      OppEntry.SETCURRENTKEY(Active,"Opportunity No.");
      OppEntry.SETRANGE(Active,TRUE);
      OppEntry.SETRANGE("Opportunity No.","Opportunity No.");
      SalesCycleStage.RESET;
      SalesCycleStage.SETRANGE("Sales Cycle Code","Sales Cycle Code");

      IF OppEntry.FIND('-') THEN BEGIN
        PreviousDateOfChange := OppEntry."Date of Change";
        EntryExists := TRUE;
      END ELSE BEGIN
        PreviousDateOfChange := WORKDATE;
        EntryExists := FALSE;
      END;

      // Option 1 Activate first Stage
      IF NOT OppEntry.FIND('-') THEN
        IF SalesCycleStage.FIND('-') THEN BEGIN
          TempSalesCycleStageFirst := SalesCycleStage;
          TempSalesCycleStageFirst.INSERT;
        END;

      // Option 2 Goto next Stage
      IF OppEntry.FIND('-') THEN
        IF SalesCycleStage.FIND('-') THEN BEGIN
          SalesCycleStage.GET(OppEntry."Sales Cycle Code",OppEntry."Sales Cycle Stage");
          IF SalesCycleStage.FIND('>') THEN BEGIN
            TempSalesCycleStageNext := SalesCycleStage;
            TempSalesCycleStageNext.INSERT;
          END;
          "Sales Cycle Stage" := SalesCycleStage.Stage;
          "Action Taken" := "Action Taken"::Next;
        END;

      // Option 3 Goto Previous Stage
      IF OppEntry.FIND('-') THEN
        IF SalesCycleStage.FIND('-') THEN BEGIN
          SalesCycleStage.GET(OppEntry."Sales Cycle Code",OppEntry."Sales Cycle Stage");
          IF SalesCycleStage.FIND('<') THEN BEGIN
            TempSalesCycleStagePrevious := SalesCycleStage;
            TempSalesCycleStagePrevious.INSERT;
          END;
        END;

      // Option 4 Skip Stages
      IF OppEntry.FIND('-') THEN
        IF SalesCycleStage.FIND('-') THEN BEGIN
          SalesCycleStage.GET(OppEntry."Sales Cycle Code",OppEntry."Sales Cycle Stage");
          IF SalesCycleStage.FIND('>') THEN
            IF SalesCycleStage."Allow Skip" THEN BEGIN
              Stop := FALSE;
              REPEAT
                TempSalesCycleStageSkip := SalesCycleStage;
                TempSalesCycleStageSkip.INSERT;
                Stop := NOT SalesCycleStage."Allow Skip";
              UNTIL (SalesCycleStage.NEXT = 0) OR Stop;
            END;
        END ELSE
          IF SalesCycleStage.FIND('-') THEN
            IF SalesCycleStage."Allow Skip" THEN BEGIN
              Stop := FALSE;
              REPEAT
                TempSalesCycleStageSkip := SalesCycleStage;
                TempSalesCycleStageSkip.INSERT;
                Stop := NOT SalesCycleStage."Allow Skip";
              UNTIL (SalesCycleStage.NEXT = 0) OR Stop;
            END;

      // Option 5 Update Current
      IF OppEntry.FIND('-') THEN
        IF SalesCycleStage.FIND('-') THEN BEGIN
          SalesCycleStage.GET(OppEntry."Sales Cycle Code",OppEntry."Sales Cycle Stage");
          TempSalesCycleStageUpdate := SalesCycleStage;
          TempSalesCycleStageUpdate.INSERT;
        END;

      // Option 6 jump to Previous Stage
      IF OppEntry.FIND('-') THEN
        IF SalesCycleStage.FIND('-') THEN BEGIN
          Stop := FALSE;
          REPEAT
            TempSalesCycleStageJump := SalesCycleStage;
            IF TempSalesCycleStageJump.Stage <> OppEntry."Sales Cycle Stage" THEN
              TempSalesCycleStageJump.INSERT
            ELSE
              Stop := TRUE;
          UNTIL (SalesCycleStage.NEXT = 0) OR Stop;
        END;

      CASE TRUE OF
        NoOfSalesCyclesFirst > 0:
          "Action Type" := "Action Type"::First;
        NoOfSalesCyclesNext > 0:
          "Action Type" := "Action Type"::Next;
        NoOfSalesCyclesUpdate > 0:
          "Action Type" := "Action Type"::Update;
        NoOfSalesCyclesPrev > 0:
          "Action Type" := "Action Type"::Previous;
        NoOfSalesCyclesSkip > 1:
          "Action Type" := "Action Type"::Skip;
        NoOfSalesCyclesJump > 1:
          "Action Type" := "Action Type"::Jump;
      END;
    END;

    LOCAL PROCEDURE TestQuote@14();
    VAR
      Opp@1000 : Record 5092;
      SalesHeader@1001 : Record 36;
    BEGIN
      Opp.GET("Opportunity No.");
      IF NOT SalesHeader.GET(SalesHeader."Document Type"::Quote,Opp."Sales Document No.") THEN
        ERROR(Text005);
    END;

    [External]
    PROCEDURE ValidateStage@17();
    BEGIN
      CASE "Action Type" OF
        "Action Type"::First:
          TempSalesCycleStageFirst.GET("Sales Cycle Code","Sales Cycle Stage");
        "Action Type"::Next:
          BEGIN;
            TempSalesCycleStageNext.GET("Sales Cycle Code","Sales Cycle Stage");
            IF TempSalesCycleStageNext."Quote Required" THEN
              TestQuote;
          END;
        "Action Type"::Previous:
          TempSalesCycleStagePrevious.GET("Sales Cycle Code","Sales Cycle Stage");
        "Action Type"::Skip:
          BEGIN
            TempSalesCycleStageSkip.GET("Sales Cycle Code","Sales Cycle Stage");
            IF TempSalesCycleStageSkip."Quote Required" THEN
              TestQuote;
          END;
        "Action Type"::Update:
          TempSalesCycleStageUpdate.GET("Sales Cycle Code","Sales Cycle Stage");
        "Action Type"::Jump:
          TempSalesCycleStageJump.GET("Sales Cycle Code","Sales Cycle Stage");
      END;
    END;

    [External]
    PROCEDURE NoOfSalesCyclesFirst@22() : Integer;
    BEGIN
      EXIT(TempSalesCycleStageFirst.COUNT);
    END;

    [External]
    PROCEDURE NoOfSalesCyclesNext@23() : Integer;
    BEGIN
      EXIT(TempSalesCycleStageNext.COUNT);
    END;

    [External]
    PROCEDURE NoOfSalesCyclesPrev@24() : Integer;
    BEGIN
      EXIT(TempSalesCycleStagePrevious.COUNT);
    END;

    [External]
    PROCEDURE NoOfSalesCyclesSkip@25() : Integer;
    BEGIN
      EXIT(TempSalesCycleStageSkip.COUNT);
    END;

    [External]
    PROCEDURE NoOfSalesCyclesUpdate@26() : Integer;
    BEGIN
      EXIT(TempSalesCycleStageUpdate.COUNT);
    END;

    [External]
    PROCEDURE NoOfSalesCyclesJump@27() : Integer;
    BEGIN
      EXIT(TempSalesCycleStageJump.COUNT);
    END;

    [External]
    PROCEDURE ValidateSalesCycleStage@28();
    BEGIN
      CASE "Action Type" OF
        "Action Type"::First:
          TempSalesCycleStageFirst.GET("Sales Cycle Code","Sales Cycle Stage");
        "Action Type"::Next:
          BEGIN;
            TempSalesCycleStageNext.GET("Sales Cycle Code","Sales Cycle Stage");
            IF TempSalesCycleStageNext."Quote Required" THEN
              TestQuote;
          END;
        "Action Type"::Previous:
          TempSalesCycleStagePrevious.GET("Sales Cycle Code","Sales Cycle Stage");
        "Action Type"::Skip:
          BEGIN
            TempSalesCycleStageSkip.GET("Sales Cycle Code","Sales Cycle Stage");
            IF TempSalesCycleStageSkip."Quote Required" THEN
              TestQuote;
          END;
        "Action Type"::Update:
          TempSalesCycleStageUpdate.GET("Sales Cycle Code","Sales Cycle Stage");
        "Action Type"::Jump:
          TempSalesCycleStageJump.GET("Sales Cycle Code","Sales Cycle Stage");
      END;

      IF SalesCycleStage.GET("Sales Cycle Code","Sales Cycle Stage") THEN
        "Sales Cycle Stage Description" := SalesCycleStage.Description;
    END;

    [External]
    PROCEDURE LookupSalesCycleStage@29();
    BEGIN
      CASE "Action Type" OF
        "Action Type"::First:
          IF ACTION::LookupOK = PAGE.RUNMODAL(0,TempSalesCycleStageFirst) THEN
            "Sales Cycle Stage" := TempSalesCycleStageFirst.Stage;
        "Action Type"::Next:
          IF ACTION::LookupOK = PAGE.RUNMODAL(0,TempSalesCycleStageNext) THEN
            "Sales Cycle Stage" := TempSalesCycleStageNext.Stage;
        "Action Type"::Previous:
          IF ACTION::LookupOK = PAGE.RUNMODAL(0,TempSalesCycleStagePrevious) THEN
            "Sales Cycle Stage" := TempSalesCycleStagePrevious.Stage;
        "Action Type"::Skip:
          IF ACTION::LookupOK = PAGE.RUNMODAL(0,TempSalesCycleStageSkip) THEN
            "Sales Cycle Stage" := TempSalesCycleStageSkip.Stage;
        "Action Type"::Update:
          IF ACTION::LookupOK = PAGE.RUNMODAL(0,TempSalesCycleStageUpdate) THEN
            "Sales Cycle Stage" := TempSalesCycleStageUpdate.Stage;
        "Action Type"::Jump:
          IF ACTION::LookupOK = PAGE.RUNMODAL(0,TempSalesCycleStageJump) THEN
            "Sales Cycle Stage" := TempSalesCycleStageJump.Stage;
      END;
      VALIDATE("Sales Cycle Stage");
    END;

    BEGIN
    END.
  }
}

