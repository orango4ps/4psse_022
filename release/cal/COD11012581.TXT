OBJECT Codeunit 11012581 Plant Order Cost Line Mgt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PlantSetupRec@1100485000 : Record 11012550;
      PurchOrderRec@1100485001 : Record 38;
      TmpNewPurchOrderRec@1100485004 : TEMPORARY Record 38;
      NextPurchLineNo@1100485002 : Integer;
      Text002@1100485006 : TextConst 'DEU=Keine Werkzeugzeilen vorhanden, worfÅr Eingabe Standardwerkzeugkosten gestattet ist.;ENU=No Plant Order Lines present where insert Standard Plant Cost Lines is allowed for.;NLD=Geen materieelregels aanwezig waarvoor opvoeren standaard materieelkosten toegestaan is.;NOR="Det finnes ingen maskinordrerader hvor ''sett inn Standard maskin Kostrader'' er tillatt. ";SVE=Det finns inga Maskinsorderrader dÑr det gÜr att infoga standardkostnadslinjer fîr Maskin.';
      Text003@1100485005 : TextConst 'DEU=Standardkostenzeilen von Werkzeugart eingeben?;ENU=Insert Standard Cost Lines of the Plant Type?;NLD=Standaard kostenregels van de materieelsoort opvoeren?;NOR=Sette inn Standardkostrader for maskintype?;SVE=Infoga standardkostnadsrader fîr Maskinstyp?';
      Text004@1100485009 : TextConst 'DEU=Verbundene Kostenzeile(n) der Werkzeugauftragszeile kann/kînnen nicht (automatisch) %1 werden, denn hierfÅr ist bereits eine Bestellung erstellt.;ENU="Linked Cost Line(s) of the Plant Order Line can not be (automatically) %1 because there is already created a Purchase Order. ";NLD="Gekoppelde kostenregel(s) van de materieelorderregel kunnen niet (automatisch) %1 worden want hiervoor is al een inkooporder aangemaakt. ";NOR=Koblede kostrader for maskin Ordrerad kan ikke vëre (Automatisk) %1 fordi innkjõpsordre allerede er opprettet.;SVE="LÑnkade kostnadsrader fîr Maskinsorderrad fÜr inte vara (automatiskt) %1 dÑrfîr att inkîpsorder redan har skapats. "';
      Text005@1100485007 : TextConst 'DEU=gelîscht;ENU=deleted;NLD=verwijderd;NOR=slettet;SVE=borttaget';
      Text006@1100485010 : TextConst 'DEU=Aktualisiert;ENU=updated;NLD=bijgewerkt;NOR=Oppdatert;SVE=Uppdaterad';
      Text007@1100485008 : TextConst 'DEU=öberprÅfen Sie die Kostenzeil(en) ''%1'' von Werkzeugauftrag ''%2''.;ENU=Check the Cost Line(s) ''%1'' of Plant Order ''%2''.;NLD=Controleer de kostenregel(s) ''%1'' van materieelorder ''%2''.;NOR=KontrollÇr kostrad(r) ''%1'' for maskin Ordre ''%2''.;SVE=Kontrollera kostnadsrad(erna) ''%1'' fîr Maskinsorder ''%2''.';
      Text008@1100409000 : TextConst 'DEU=Auftrag wurde noch nicht freigegeben.\ \Sind Sie sich sicher, dass Sie bereits einen Kaufauftrag fÅr die Kostenzeilen erstellen mîchten?;ENU=Order is not released yet.\ \Are you sure you already want to create a purchase order for the cost lines?;NLD=Order is nog niet vrijgegeven. \Weet u zeker dat u al een inkooporder voor de kostenregels wilt aanmaken?;NOR=Ordre er enda ikke frigitt.\ \ Er du sikker pÜ at du allerede vil opprette en innkjõpsordre for kostradene?;SVE=Order har Ñnnu inte slÑppts.\ \ ér du sÑker pÜ att du redan vill skapa en inkîpsorder fîr kostnadsraderna?';
      Text009@1100529600 : TextConst 'DEU=Standardkosten hinzufÅgen?;ENU=Add standard costs?;NLD=Voeg standaard kosten toe?';
      ConfirmedCheckValues@1100529601 : ' ,Yes,No';

    PROCEDURE RunInsertPOStandardCostLines@1100485004(IPlantOrderRec@1100485003 : Record 11012556);
    VAR
      lvPlantOrderLineRec@1100485000 : Record 11012557;
      lvOrderCostLineRec@1100485002 : Record 11012558;
    BEGIN
      IPlantOrderRec.TESTFIELD(Posted, FALSE);
      IPlantOrderRec.TESTFIELD("No.");
      IF IPlantOrderRec.Type = IPlantOrderRec.Type::"Negative Inventory Correction" THEN
        IPlantOrderRec.FIELDERROR(Type);

      lvPlantOrderLineRec.SETRANGE("Plant Order No.", IPlantOrderRec."No.");
      lvPlantOrderLineRec.SETRANGE(Type, lvPlantOrderLineRec.Type::Plant);
      lvPlantOrderLineRec.SETFILTER("Plant Type", '<>%1', '');
      lvPlantOrderLineRec.SETRANGE(Bulk, TRUE);
      lvPlantOrderLineRec.SETFILTER(Quantity, '>%1', 0);
      IF lvPlantOrderLineRec.FINDFIRST THEN
        lvPlantOrderLineRec.SETRANGE(Bulk)  //* Reset Filter
      ELSE BEGIN
        lvPlantOrderLineRec.SETRANGE(Bulk, FALSE);
        lvPlantOrderLineRec.SETRANGE(Quantity, 1);
        IF NOT lvPlantOrderLineRec.FINDFIRST THEN
          ERROR(Text002);
      END;

      IF NOT CONFIRM(Text003) THEN
        EXIT;

      ConfirmedCheckValues := 0;
      REPEAT
        lvOrderCostLineRec.SETRANGE("Plant Order No.", lvPlantOrderLineRec."Plant Order No.");
        lvOrderCostLineRec.SETRANGE("Plant Order Line No.", lvPlantOrderLineRec."Line No.");
        lvOrderCostLineRec.SETFILTER(Type, '<>%1', lvOrderCostLineRec.Type::Damage);  //DP00241.n (C004697)
        IF NOT lvOrderCostLineRec.FINDFIRST THEN
          RunUpdatePOLineLinkedCostLine('I', IPlantOrderRec, lvPlantOrderLineRec);
      UNTIL lvPlantOrderLineRec.NEXT = 0;
    END;

    PROCEDURE RunUpdatePOLineLinkedCostLine@1100485003(IUpdateMode@1100485008 : Code[1];IPlantOrderRec@1100485000 : Record 11012556;IPlantOrderLineRec@1100485003 : Record 11012557);
    VAR
      lvPlantCostLineRec@1100485001 : Record 11012591;
      lvOrderCostLineRec@1100485002 : Record 11012558;
      lvPlantLocRec@1210190000 : Record 11012554;
      lvTmpOldCostLineRec@1100485010 : TEMPORARY Record 11012558;
      TmpCheckMinMaxCostLine@1100529602 : TEMPORARY Record 11012591;
      TmpCheckPlantOrderCostLine@1100529601 : TEMPORARY Record 11012558;
      lvFirstDeletedLineNo@1100485007 : Integer;
      lvNextLineNo@1100485004 : Integer;
      lvStep@1100485006 : Integer;
      lvLastLineNo@1100485011 : Integer;
      lvMessText1@1100485009 : Text[30];
      lvMessText2@1100485012 : Text[30];
    BEGIN
      //* Insert/update/delete cost lines (linked to PO-line) with standard cost of the plant type.
      //* Update Mode: I=Insert, M=Modify, D=Delete
      IF (IPlantOrderRec.Posted) OR (IPlantOrderLineRec."Line No." = 0) OR (NOT (IUpdateMode IN ['I','M','D'])) THEN
        EXIT;

      IF (IUpdateMode IN ['M','D']) THEN BEGIN
        IF POLineLinkedCostWithPurchOrder(IPlantOrderLineRec) THEN BEGIN
          lvOrderCostLineRec.SETRANGE("Plant Order No.", IPlantOrderLineRec."Plant Order No.");
          lvOrderCostLineRec.SETRANGE("Plant Order Line No.", IPlantOrderLineRec."Line No.");
          IF IUpdateMode = 'D' THEN BEGIN
            //* Delete linked cost lines with Purch. Order empty
            lvOrderCostLineRec.SETRANGE("Purchase Order No.", '');
            lvOrderCostLineRec.DELETEALL;
            lvOrderCostLineRec.SETRANGE("Purchase Order No.");  //* Reset filter
            //* Unlink cost lines with Purch. Order filled (PO-line is deleted, so doesn't exist anymore)
            lvOrderCostLineRec.MODIFYALL("Purchase Order Line No.", 0);
            lvMessText1 := Text005;
          END;
          IF IUpdateMode = 'M' THEN BEGIN
            //* No update must/may be dome, so also not cost lines with no Purch. Order No. filled
            lvMessText1 := Text006;
          END;
          lvOrderCostLineRec.FINDLAST;
          lvLastLineNo := lvOrderCostLineRec."Line No.";
          lvOrderCostLineRec.FINDFIRST;
          IF lvLastLineNo > lvOrderCostLineRec."Line No." THEN
            lvMessText2 := STRSUBSTNO('%1..%2', lvOrderCostLineRec."Line No.", lvLastLineNo)
          ELSE
            lvMessText2 := FORMAT(lvOrderCostLineRec."Line No.");
          MESSAGE(STRSUBSTNO(Text004, lvMessText1) + '\ \' + STRSUBSTNO(Text007, lvMessText2, lvOrderCostLineRec."Plant Order No."));
          //
          EXIT;  //* IF cost lines with Purch. Order filled present then always exit!
        END;
      END;

      lvOrderCostLineRec.RESET;
      lvOrderCostLineRec.SETRANGE("Plant Order No.", IPlantOrderLineRec."Plant Order No.");
      lvOrderCostLineRec.SETRANGE("Plant Order Line No.", IPlantOrderLineRec."Line No.");
      IF lvOrderCostLineRec.FINDFIRST THEN BEGIN
        lvFirstDeletedLineNo := lvOrderCostLineRec."Line No.";
        IF (IUpdateMode = 'M') THEN BEGIN
          lvOrderCostLineRec.SETFILTER(Type, '<>%1', lvOrderCostLineRec.Type::Damage);  //DP00241.n (C004697)
          REPEAT
            IF lvOrderCostLineRec."Plant Type" = IPlantOrderLineRec."Plant Type" THEN BEGIN
              lvTmpOldCostLineRec := lvOrderCostLineRec;
              lvTmpOldCostLineRec.INSERT;
            END;
          UNTIL lvOrderCostLineRec.NEXT = 0;
        END;
        lvOrderCostLineRec.DELETEALL;
      END;

      IF (IUpdateMode = 'D') THEN
        EXIT;

      IPlantOrderLineRec.CALCFIELDS(Bulk);

      IF (IPlantOrderRec.Type = IPlantOrderRec.Type::"Negative Inventory Correction") OR
         (IPlantOrderLineRec."Plant Order No." = '') OR
         (IPlantOrderLineRec.Type <> IPlantOrderLineRec.Type::Plant) OR
         (IPlantOrderLineRec."Plant Type" = '') OR
         ((IPlantOrderLineRec.Bulk) AND (IPlantOrderLineRec.Quantity <= 0)) OR
         ((NOT IPlantOrderLineRec.Bulk) AND (IPlantOrderLineRec.Quantity <> 1))
      THEN
        EXIT;

      lvPlantCostLineRec.SETRANGE("Cost Level", lvPlantCostLineRec."Cost Level"::PlantType);  //DP00671
      lvPlantCostLineRec.SETRANGE(Code, IPlantOrderLineRec."Plant Type");
      CASE IPlantOrderRec.Type OF
        //*C-025816.so
        //IPlantOrderRec.Type::Arrival,
        //IPlantOrderRec.Type::"Other Transfers":
        //  lvPlantCostLineRec.SETFILTER(
        //    "Type Cost", '%1|%2', lvPlantCostLineRec."Type Cost"::Arrival, lvPlantCostLineRec."Type Cost"::Both);
        //*C-025816.eo
        //*C-025816.sn
        IPlantOrderRec.Type::Arrival:
          lvPlantCostLineRec.SETFILTER(
            "Type Cost", '%1|%2', lvPlantCostLineRec."Type Cost"::Arrival, lvPlantCostLineRec."Type Cost"::Both);
        IPlantOrderRec.Type::"Other Transfers":
          BEGIN
            IF lvPlantLocRec.GET(IPlantOrderRec."To Location") THEN BEGIN  //28-06-2011.sn
              IF lvPlantLocRec.Depot THEN
                EXIT;
            END;  //28-06-2011.en
            lvPlantCostLineRec.SETFILTER(
              "Type Cost", '%1|%2', lvPlantCostLineRec."Type Cost"::Arrival, lvPlantCostLineRec."Type Cost"::Both);
            lvPlantCostLineRec.SETRANGE("Incl. Arrival Other Transfers", TRUE);
          END;
        //*C-025816.en
        IPlantOrderRec.Type::Removal:
          lvPlantCostLineRec.SETFILTER(
            "Type Cost", '%1|%2', lvPlantCostLineRec."Type Cost"::Removal, lvPlantCostLineRec."Type Cost"::Both);
        ELSE
          EXIT;
      END;
      PlantSetupRec.GET;
      IF PlantSetupRec."Transport Orders" THEN
        lvPlantCostLineRec.SETFILTER(Type, '<>%1', lvPlantCostLineRec.Type::Transport);

      //DP00241.n (C004697)
      lvPlantCostLineRec.FILTERGROUP(8);
      lvPlantCostLineRec.SETFILTER(Type, '<>%1', lvPlantCostLineRec.Type::Damage);
      lvPlantCostLineRec.FILTERGROUP(0);

      IF NOT lvPlantCostLineRec.FINDFIRST THEN
        EXIT;

      lvNextLineNo := DetermineFreeCostLineNo(
        IPlantOrderLineRec."Plant Order No.",IPlantOrderLineRec."Line No.",lvFirstDeletedLineNo,lvPlantCostLineRec.COUNT,lvStep);

      REPEAT
        lvOrderCostLineRec.INIT;
        lvOrderCostLineRec."Plant Order No." := IPlantOrderLineRec."Plant Order No.";
        lvOrderCostLineRec.InitRecord();  //* Eerst ordernummer vullen dan pas InitRecord
        lvOrderCostLineRec."Line No." := lvNextLineNo;
        lvOrderCostLineRec.VALIDATE(Type, lvPlantCostLineRec.Type);
        lvOrderCostLineRec.VALIDATE("No.", lvPlantCostLineRec."No.");
        lvOrderCostLineRec.Description := lvPlantCostLineRec.Description;
        lvOrderCostLineRec."Plant Type" := IPlantOrderLineRec."Plant Type";
        lvOrderCostLineRec."Plant No." := IPlantOrderLineRec."No.";
        lvOrderCostLineRec."Plant Group" := IPlantOrderLineRec."Plant Group";
        IF lvOrderCostLineRec."Plant No." = '0' THEN
          lvOrderCostLineRec."Plant No." := '';
        lvOrderCostLineRec."Plant Order Line No." := IPlantOrderLineRec."Line No.";
        lvOrderCostLineRec."Vendor No." := lvPlantCostLineRec."Vendor No.";
        IF lvOrderCostLineRec.Type <> lvOrderCostLineRec.Type::Text THEN BEGIN
          lvOrderCostLineRec.Element := IPlantOrderLineRec.Element;
          IF (NOT IPlantOrderLineRec.Bulk) THEN
            lvOrderCostLineRec.Quantity := lvPlantCostLineRec.Quantity
          ELSE
            lvOrderCostLineRec.Quantity := ROUND((lvPlantCostLineRec.Quantity * IPlantOrderLineRec.Quantity), 0.00001);
          lvOrderCostLineRec."Unit of Measure" := lvPlantCostLineRec."Unit of Measure";
          //lvOrderCostLineRec.VALIDATE(Price, lvPlantCostLineRec.Price);  //DP00241.o (16930)
          lvOrderCostLineRec.VALIDATE(Price,lvPlantCostLineRec.GetCostLinePrice(IPlantOrderRec."Transfer Date")); //DP00241.n (16930)
        END;
        IF (IUpdateMode = 'M') AND (lvOrderCostLineRec."No." <> '') THEN BEGIN
          lvTmpOldCostLineRec.SETRANGE("Plant Type", lvOrderCostLineRec."Plant Type");
          lvTmpOldCostLineRec.SETRANGE(Type, lvOrderCostLineRec.Type);
          lvTmpOldCostLineRec.SETRANGE("No.", lvOrderCostLineRec."No.");
          IF lvTmpOldCostLineRec.FINDFIRST THEN BEGIN
            lvOrderCostLineRec.Description := lvTmpOldCostLineRec.Description;
            lvOrderCostLineRec."Vendor No." := lvTmpOldCostLineRec."Vendor No.";
            IF lvOrderCostLineRec.Type <> lvOrderCostLineRec.Type::Text THEN BEGIN
              lvOrderCostLineRec."Unit of Measure" := lvTmpOldCostLineRec."Unit of Measure";
              lvOrderCostLineRec.VALIDATE(Price, lvTmpOldCostLineRec.Price);
            END;
            lvTmpOldCostLineRec.DELETE;
          END;
        END;
        GetMinAndMaxCheckLines(lvPlantCostLineRec, lvOrderCostLineRec, TmpCheckMinMaxCostLine, TmpCheckPlantOrderCostLine);
        lvOrderCostLineRec.INSERT;
        lvNextLineNo := lvNextLineNo + lvStep;
      UNTIL lvPlantCostLineRec.NEXT = 0;

      CheckMinAndMaxValues(TmpCheckMinMaxCostLine, TmpCheckPlantOrderCostLine, lvNextLineNo, lvStep);
    END;

    PROCEDURE RunUpdatePlantNoInCostLine@1100485009(IPlantOrderRec@1100485000 : Record 11012556;IPlantOrderLineRec@1100485003 : Record 11012557);
    VAR
      lvOrderCostLineRec@1100485002 : Record 11012558;
    BEGIN
      IF (IPlantOrderRec.Posted) OR
         (IPlantOrderLineRec."Plant Order No." = '') OR
         (IPlantOrderLineRec."Line No." = 0) OR
         (IPlantOrderLineRec."Plant Type" = '') OR
         (IPlantOrderLineRec.Type <> IPlantOrderLineRec.Type::Plant)
      THEN
        EXIT;

      lvOrderCostLineRec.SETRANGE("Plant Order No.", IPlantOrderLineRec."Plant Order No.");
      lvOrderCostLineRec.SETRANGE("Plant Order Line No.", IPlantOrderLineRec."Line No.");
      IF NOT lvOrderCostLineRec.FIND('-') THEN
        EXIT;

      REPEAT
        lvOrderCostLineRec."Plant No." := IPlantOrderLineRec."No.";
        IF lvOrderCostLineRec."Plant No." = '0' THEN
          lvOrderCostLineRec."Plant No." := '';
        lvOrderCostLineRec.MODIFY;
      UNTIL lvOrderCostLineRec.NEXT = 0;
    END;

    PROCEDURE RunInsertPOStandCostlinesSet@1100525000(IPlantOrderRec@1100525001 : Record 11012556;IPlantOrderLineRec@1100525000 : Record 11012557;ISetQuantity@1100525006 : Integer);
    VAR
      lvPlantCostLineRec@1100525003 : Record 11012591;
      lvOrderCostLineRec@1100525002 : Record 11012558;
      lvPlantLocRec@1210190000 : Record 11012554;
      lvNextLineNo@1100525004 : Integer;
    BEGIN
      //* Standard Cost Lines of a set are inserted when the set is exploded, and will never be update automatically afterwards.

      IF (IPlantOrderRec.Type = IPlantOrderRec.Type::"Negative Inventory Correction") OR
         (IPlantOrderLineRec."Set Code" = '') OR
         (IPlantOrderLineRec.Type <> IPlantOrderLineRec.Type::Plant) OR
         (ISetQuantity = 0)
      THEN
        EXIT;

      lvPlantCostLineRec.SETRANGE("Cost Level", lvPlantCostLineRec."Cost Level"::Set);  //DP00671
      lvPlantCostLineRec.SETRANGE(Code, IPlantOrderLineRec."Set Code");

      CASE IPlantOrderRec.Type OF
        //*C-025816.so
        //IPlantOrderRec.Type::Arrival,
        //IPlantOrderRec.Type::"Other Transfers":
        //  lvSetCostLineRec.SETFILTER(
        //    "Type Cost", '%1|%2', lvSetCostLineRec."Type Cost"::Arrival, lvSetCostLineRec."Type Cost"::Both);
        //*C-025816.eo
        //*C-025816.sn
        IPlantOrderRec.Type::Arrival:
          lvPlantCostLineRec.SETFILTER(
            "Type Cost", '%1|%2', lvPlantCostLineRec."Type Cost"::Arrival, lvPlantCostLineRec."Type Cost"::Both);
        IPlantOrderRec.Type::"Other Transfers":
          BEGIN
            IF lvPlantLocRec.GET(IPlantOrderRec."To Location") THEN BEGIN  //28-06-2011.sn
              IF lvPlantLocRec.Depot THEN
                EXIT;
            END;  //28-06-2011.en
            lvPlantCostLineRec.SETFILTER(
              "Type Cost", '%1|%2', lvPlantCostLineRec."Type Cost"::Arrival, lvPlantCostLineRec."Type Cost"::Both);
            lvPlantCostLineRec.SETRANGE("Incl. Arrival Other Transfers", TRUE);
          END;
        //*C-025816.en
        IPlantOrderRec.Type::Removal:
          lvPlantCostLineRec.SETFILTER(
            "Type Cost", '%1|%2', lvPlantCostLineRec."Type Cost"::Removal, lvPlantCostLineRec."Type Cost"::Both);
        ELSE
          EXIT;
      END;
      PlantSetupRec.GET;
      IF PlantSetupRec."Transport Orders" THEN
        lvPlantCostLineRec.SETFILTER(Type, '<>%1', lvPlantCostLineRec.Type::Transport);

      //DP00241.n (C004697)
      lvPlantCostLineRec.FILTERGROUP(8);
      lvPlantCostLineRec.SETFILTER(Type, '<>%1', lvPlantCostLineRec.Type::Damage);
      lvPlantCostLineRec.FILTERGROUP(0);

      IF NOT lvPlantCostLineRec.FINDFIRST THEN
        EXIT;

      lvOrderCostLineRec.SETRANGE("Plant Order No.", IPlantOrderLineRec."Plant Order No.");
      IF lvOrderCostLineRec.FINDLAST THEN
        lvNextLineNo := lvOrderCostLineRec."Line No." + 10000
      ELSE
        lvNextLineNo := 10000;

      REPEAT
        lvOrderCostLineRec.INIT;
        lvOrderCostLineRec."Plant Order No." := IPlantOrderLineRec."Plant Order No.";
        lvOrderCostLineRec.InitRecord();  //* Eerst ordernummer vullen dan pas InitRecord
        lvOrderCostLineRec."Line No." := lvNextLineNo;
        lvOrderCostLineRec.VALIDATE(Type, lvPlantCostLineRec.Type);
        lvOrderCostLineRec.VALIDATE("No.", lvPlantCostLineRec."No.");
        lvOrderCostLineRec.Description := lvPlantCostLineRec.Description;
        lvOrderCostLineRec."Vendor No." := lvPlantCostLineRec."Vendor No.";
        IF lvOrderCostLineRec.Type <> lvOrderCostLineRec.Type::Text THEN BEGIN
          lvOrderCostLineRec.Element := IPlantOrderLineRec.Element;
          lvOrderCostLineRec.Quantity := ROUND((lvPlantCostLineRec.Quantity * ISetQuantity), 0.00001);
          lvOrderCostLineRec."Unit of Measure" := lvPlantCostLineRec."Unit of Measure";
          //lvOrderCostLineRec.VALIDATE(Price, lvSetCostLineRec.Price);  //DP00241.o (16930)
          lvOrderCostLineRec.VALIDATE(Price,lvPlantCostLineRec.GetCostLinePrice(IPlantOrderRec."Transfer Date")); //DP00241.n (16930)
        END;
        lvOrderCostLineRec.INSERT;
        lvNextLineNo := lvNextLineNo + 10000;
      UNTIL lvPlantCostLineRec.NEXT = 0;
    END;

    PROCEDURE POLineLinkedCostWithPurchOrder@1100485001(IPlantOrderLineRec@1100485001 : Record 11012557) : Boolean;
    VAR
      lvOrderCostLineRec@1100485000 : Record 11012558;
    BEGIN
      WITH IPlantOrderLineRec DO BEGIN
        IF ("Line No." = 0) THEN
          EXIT(FALSE);
        lvOrderCostLineRec.SETRANGE("Plant Order No.", "Plant Order No.");
        lvOrderCostLineRec.SETRANGE("Plant Order Line No.", "Line No.");
        lvOrderCostLineRec.SETFILTER("Purchase Order No.", '<>%1', '');
        IF lvOrderCostLineRec.FINDFIRST THEN BEGIN
          EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE DetermineFreeCostLineNo@1100485002(IOrderNo@1100485000 : Code[20];IOrderLineNo@1100485001 : Integer;ICostLineNo@1100485002 : Integer;ILinesNeeded@1100485004 : Integer;VAR OStep@1100485003 : Integer) : Integer;
    VAR
      lvOrderCostLineRec@1100485005 : Record 11012558;
      lvGap@1100485006 : Integer;
      lvNextLineNo@1100485007 : Integer;
    BEGIN
      WITH lvOrderCostLineRec DO BEGIN
        SETRANGE("Plant Order No.", IOrderNo);
        SETFILTER("Line No.", '%1..', IOrderLineNo);
        IF FINDFIRST THEN
          lvGap := "Line No." - IOrderLineNo
        ELSE
          lvGap := 10000;
        lvNextLineNo := IOrderLineNo;

        IF (lvGap < ILinesNeeded) AND (ICostLineNo > 0) THEN BEGIN
          SETFILTER("Line No.", '%1..', ICostLineNo);
          IF FINDFIRST THEN
            lvGap := "Line No." - ICostLineNo
          ELSE
            lvGap := 10000;
          lvNextLineNo := ICostLineNo;
        END;

        IF (lvGap < ILinesNeeded) THEN BEGIN
          lvGap := 0;
          lvNextLineNo := 0;
          SETRANGE("Line No.");  //* Reset Filter
          IF FINDLAST THEN
            lvNextLineNo := "Line No." + 10000;
        END;

        IF (lvNextLineNo = 0) THEN
            lvNextLineNo := 10000;
        IF (lvGap = 0) OR (lvGap > 10000) THEN
          lvGap := 10000;

        OStep := lvGap DIV ILinesNeeded;
        IF (OStep <= 10) THEN
          OStep := 1
        ELSE
          OStep := 10;

        EXIT(lvNextLineNo);
      END;
    END;

    PROCEDURE RunInsertTOStndTransCostLines@1100525001(ITransOrderNo@1100525000 : Code[20];IPlantOrderNo@1100525001 : Code[20]);
    VAR
      lvPlantCostLineRec@1100525002 : Record 11012591;
      lvPlantOrderRec@1100525003 : Record 11012556;
      lvPlantOrderLineRec@1100525004 : Record 11012557;
      lvTransOrderRec@1100525007 : Record 11020505;
      lvTransOrderCostLineRec@1100525005 : Record 11020506;
      lvPlantLocRec@1210190000 : Record 11012554;
      lvNextLineNo@1100525006 : Integer;
      lvQuantity@1100525008 : Decimal;
      Price@1100529000 : Decimal;
    BEGIN
      //* Insert standard plant cost lines with type 'Transport' on the transportorder.
      //* For all plantorder lines with a plant type with standard transport cost lines the TO-costlines are added.
      //* Preconditions (according the design):
      //* - This is only done when a plantorder is added on a transportorder. So modification on the plantorder afterwards
      //*   are not update in the transportorder costlines
      //* - If a plantorder is put on 2 (or more) transportorder than the cost lines are add on each transportorder, it
      //*   is responsibility of the user to decide what to do.

      IF (ITransOrderNo = '') OR (IPlantOrderNo = '') THEN
        EXIT;
      IF NOT lvTransOrderRec.GET(ITransOrderNo) THEN
        EXIT;
      IF lvTransOrderRec."Invoice with Transport Order" <> '' THEN
        EXIT;
      IF NOT lvPlantOrderRec.GET(IPlantOrderNo) THEN
        EXIT;
      IF lvPlantOrderRec."Collect Order" THEN
        EXIT;

      CASE lvPlantOrderRec.Type OF
        //*C-025816.so
        //lvPlantOrderRec.Type::Arrival,
        //lvPlantOrderRec.Type::"Other Transfers":
        //  lvPlantCostLineRec.SETFILTER(
        //    "Type Cost", '%1|%2', lvPlantCostLineRec."Type Cost"::Arrival, lvPlantCostLineRec."Type Cost"::Both);
        //*C-025816.eo
        //*C-025816.sn
        lvPlantOrderRec.Type::Arrival:
          lvPlantCostLineRec.SETFILTER(
            "Type Cost", '%1|%2', lvPlantCostLineRec."Type Cost"::Arrival, lvPlantCostLineRec."Type Cost"::Both);
        lvPlantOrderRec.Type::"Other Transfers":
          BEGIN
            IF lvPlantLocRec.GET(lvPlantOrderRec."To Location") THEN BEGIN  //28-06-2011.sn
              IF lvPlantLocRec.Depot THEN
                EXIT;
            END;  //28-06-2011.en
            lvPlantCostLineRec.SETFILTER(
              "Type Cost", '%1|%2', lvPlantCostLineRec."Type Cost"::Arrival, lvPlantCostLineRec."Type Cost"::Both);
            lvPlantCostLineRec.SETRANGE("Incl. Arrival Other Transfers", TRUE);
          END;
        //*C-025816.en
        lvPlantOrderRec.Type::Removal:
          lvPlantCostLineRec.SETFILTER(
            "Type Cost", '%1|%2', lvPlantCostLineRec."Type Cost"::Removal, lvPlantCostLineRec."Type Cost"::Both);
        ELSE
          EXIT;
      END;
      lvPlantCostLineRec.SETRANGE(Type, lvPlantCostLineRec.Type::Transport);

      lvPlantOrderLineRec.SETRANGE("Plant Order No.", IPlantOrderNo);
      lvPlantOrderLineRec.SETRANGE(Type, lvPlantOrderLineRec.Type::Plant);
      lvPlantOrderLineRec.SETFILTER("Plant Type", '<>%1', '');
      IF lvPlantOrderLineRec.FINDSET(FALSE,FALSE) THEN BEGIN
        lvNextLineNo := 10000;
        lvTransOrderCostLineRec.SETRANGE("Transport Order No.", ITransOrderNo);
        IF lvTransOrderCostLineRec.FINDLAST THEN
          lvNextLineNo := lvNextLineNo + lvTransOrderCostLineRec."Line No.";
        REPEAT
          lvPlantCostLineRec.SETRANGE("Cost Level", lvPlantCostLineRec."Cost Level"::PlantType);  //DP00671
          lvPlantCostLineRec.SETRANGE(Code, lvPlantOrderLineRec."Plant Type");
          IF lvPlantCostLineRec.FINDFIRST THEN BEGIN
            REPEAT
              IF (lvPlantOrderLineRec.Quantity = 0) AND (lvPlantOrderLineRec."Asked Quantity" <> 0) AND
                 (lvPlantOrderRec.Type = lvPlantOrderRec.Type::Arrival) AND
                 (lvPlantOrderRec.Status < lvPlantOrderRec.Status::Released) AND (NOT lvPlantOrderRec.Posted)
              THEN
                lvQuantity := lvPlantCostLineRec.Quantity * lvPlantOrderLineRec."Asked Quantity"
              ELSE
                lvQuantity := lvPlantCostLineRec.Quantity * lvPlantOrderLineRec.Quantity;

              lvTransOrderCostLineRec.RESET;
              lvTransOrderCostLineRec.SETRANGE("Transport Order No.", ITransOrderNo);
              lvTransOrderCostLineRec.SETRANGE("Plant Order No.", IPlantOrderNo);
              lvTransOrderCostLineRec.SETRANGE("Plant Type", lvPlantCostLineRec.Code);
              lvTransOrderCostLineRec.SETRANGE(Type, lvTransOrderCostLineRec.Type::Transport);
              lvTransOrderCostLineRec.SETRANGE("No.", lvPlantCostLineRec."No.");
              lvTransOrderCostLineRec.SETRANGE(Description, lvPlantCostLineRec.Description);
              lvTransOrderCostLineRec.SETRANGE("Unit of Measure", lvPlantCostLineRec."Unit of Measure");
              IF NOT lvTransOrderCostLineRec.FINDFIRST THEN BEGIN
                lvTransOrderCostLineRec.INIT;
                lvTransOrderCostLineRec."Transport Order No." := ITransOrderNo;
                lvTransOrderCostLineRec."Line No." := lvNextLineNo;
                lvTransOrderCostLineRec."Plant Order No." := IPlantOrderNo;
                lvTransOrderCostLineRec."Plant Type" := lvPlantCostLineRec.Code;
                lvTransOrderCostLineRec.Type := lvTransOrderCostLineRec.Type::Transport;
                lvTransOrderCostLineRec."No." := lvPlantCostLineRec."No.";
                lvTransOrderCostLineRec.Description := lvPlantCostLineRec.Description;
                lvTransOrderCostLineRec.Quantity := ROUND(lvQuantity, 0.01);
                lvTransOrderCostLineRec."Unit of Measure" := lvPlantCostLineRec."Unit of Measure";
                //DP00241.so (16930)
                //IF lvPlantCostLineRec.Price <> 0 THEN  //* If price is not filled then transport rate
                //  lvTransOrderCostLineRec.Price := lvPlantCostLineRec.Price
                //DP00241.eo
                //DP00241.sn (16930)
                Price := lvPlantCostLineRec.GetCostLinePrice(lvPlantOrderRec."Transfer Date");
                IF Price <> 0 THEN  //* If price is not filled then transport rate
                  lvTransOrderCostLineRec.Price := Price
                //DP00241.en
                ELSE
                  lvTransOrderCostLineRec.Price := lvTransOrderCostLineRec.SearchTransportPrice(lvTransOrderRec);
                lvTransOrderCostLineRec.VALIDATE(Price);  //* Calculated amount
                lvTransOrderCostLineRec.INSERT;
                lvNextLineNo := lvNextLineNo + 10000;
              END ELSE BEGIN
                lvTransOrderCostLineRec.Quantity := ROUND(lvTransOrderCostLineRec.Quantity + lvQuantity, 0.01);
                lvTransOrderCostLineRec.VALIDATE(Price);  //* Calculated amount
                lvTransOrderCostLineRec.MODIFY;
              END;
            UNTIL lvPlantCostLineRec.NEXT = 0;
          END;
        UNTIL lvPlantOrderLineRec.NEXT = 0;
      END;
    END;

    PROCEDURE RunCreatePurchaseOrders@1100485000(IPlantOrderRec@1100485000 : Record 11012556;VAR IvPlantOrderCostLineRec@1100485001 : Record 11012558);
    VAR
      lvPlantOrderCostLineRec@1100485002 : Record 11012558;
    BEGIN
      TmpNewPurchOrderRec.RESET;
      TmpNewPurchOrderRec.DELETEALL;
      lvPlantOrderCostLineRec.COPY(IvPlantOrderCostLineRec);
      CreatePurchOrder(IPlantOrderRec, lvPlantOrderCostLineRec);
    END;

    PROCEDURE RunGetCreatedPurchaseOrders@1100485013(VAR OPurchOrderRec@1100485000 : Record 38);
    BEGIN
      //* Notes:
      //* - Always first execute 'RunCreatePurchaseOrders' before calling this function!
      //* - 'OPurchOrderRec' must be declared as 'Temporary' in the calling process!

      OPurchOrderRec.RESET;
      OPurchOrderRec.DELETEALL;

      TmpNewPurchOrderRec.RESET;
      TmpNewPurchOrderRec.SETRANGE("Document Type", TmpNewPurchOrderRec."Document Type"::Order);
      IF NOT TmpNewPurchOrderRec.FIND('-') THEN
        EXIT;

      REPEAT
        OPurchOrderRec."Document Type" := TmpNewPurchOrderRec."Document Type";
        OPurchOrderRec."No." := TmpNewPurchOrderRec."No.";
        OPurchOrderRec.INSERT;
      UNTIL TmpNewPurchOrderRec.NEXT = 0;
    END;

    PROCEDURE RunCreatPurLineOnPlantPurOrder@1100409000(PlantOrderCostLine@1100485001 : Record 11012558);
    BEGIN
      //*33352.n
      WITH PlantOrderCostLine DO BEGIN
        IF Type = Type::Text THEN
          TESTFIELD(Description)
         ELSE BEGIN
           TESTFIELD("No.");
           TESTFIELD(Quantity);
           TESTFIELD(Amount);
        END;
        PlantSetupRec.GET;
        PurchOrderRec.GET(PurchOrderRec."Document Type"::Order, "Purchase Order No.");
        NextPurchLineNo := PlantOrderCostLine."Purchase Order Line No.";
        InsertPurchOrderLine(PlantOrderCostLine);
      END;
    END;

    LOCAL PROCEDURE CreatePurchOrder@1100485005(IPlantOrderRec@1100485005 : Record 11012556;VAR IvPlantOrderCostLineRec@1100485000 : Record 11012558);
    VAR
      lvTmpVendRec@1100485002 : TEMPORARY Record 23;
    BEGIN
      PlantSetupRec.GET;

      WITH IPlantOrderRec DO BEGIN
        //*33352.so
        //IF PlantSetupRec."Extended Picking Procedure" THEN
        //  TESTFIELD(Status, Status::Released);
        //*33352.eo
        TESTFIELD(Posted,FALSE);
        IF Type = Type::"Negative Inventory Correction" THEN
          FIELDERROR(Type);
        TESTFIELD("Transfer Date");
        TESTFIELD("From Location");
        TESTFIELD("To Location");
        IF Type <> Type::Removal THEN
          CheckBlock("To Location",TRUE);
      END;

      WITH IvPlantOrderCostLineRec DO BEGIN
        MARKEDONLY(TRUE);
        IF NOT FINDFIRST THEN
          MARKEDONLY(FALSE);

        FILTERGROUP(9);
        SETRANGE("Purchase Order No.", '');
        SETFILTER("Vendor No.", '<>%1', '');
        FILTERGROUP(0);
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          //*33352.sn
          IF PlantSetupRec."Extended Picking Procedure" AND (IPlantOrderRec.Status < IPlantOrderRec.Status::Released) THEN BEGIN
            IF NOT CONFIRM(Text008, FALSE) THEN
              ERROR('');
          END;
          //*33352.en
          REPEAT
            IF Type = Type::Text THEN
              TESTFIELD(Description)  //* NB: Als alleen tekstregels van een leverancier, dan niet in tmp tabel toevoegen.
            ELSE BEGIN
              TESTFIELD("No.");
              TESTFIELD(Quantity);
              TESTFIELD(Amount);
              IF NOT lvTmpVendRec.GET("Vendor No.") THEN BEGIN
                lvTmpVendRec."No." := "Vendor No.";
                lvTmpVendRec.INSERT;
              END;
            END;
          UNTIL NEXT = 0;
        END;

        IF lvTmpVendRec.FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            FILTERGROUP(9);
            SETRANGE("Vendor No.", lvTmpVendRec."No.");
            FILTERGROUP(0);
            IF FINDSET(TRUE,FALSE) THEN BEGIN
              InsertPurchOrder("Vendor No.");
              NextPurchLineNo := 10000;
              REPEAT
                InsertPurchOrderLine(IvPlantOrderCostLineRec);
                "Purchase Order No." := PurchOrderRec."No.";
                "Purchase Order Line No." := NextPurchLineNo;
                MODIFY;
                NextPurchLineNo := NextPurchLineNo + 10000;
              UNTIL NEXT = 0;
              TmpNewPurchOrderRec := PurchOrderRec;
              TmpNewPurchOrderRec.INSERT;
            END;
          UNTIL lvTmpVendRec.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE InsertPurchOrder@1100485007(IVendorNo@1100485000 : Code[20]);
    BEGIN
      WITH PurchOrderRec DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Order;
        "No." := '';
        INSERT(TRUE);
        TESTFIELD("No.");
        VALIDATE("Buy-from Vendor No.", IVendorNo);
        "Amounts only" := FALSE;
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE InsertPurchOrderLine@1100485008(IPlantOrderCostLineRec@1100485000 : Record 11012558);
    VAR
      lvPurchOrderLineRec@1100485003 : Record 39;
    BEGIN
      WITH lvPurchOrderLineRec DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Order;
        "Document No." := PurchOrderRec."No.";
        "System-Created Entry" := TRUE;
        InitRecord();
        "Line No." := NextPurchLineNo;
        IF IPlantOrderCostLineRec.Type = IPlantOrderCostLineRec.Type::Text THEN BEGIN
          Type := Type::" ";
          Description := IPlantOrderCostLineRec.Description;
        END ELSE BEGIN
          Type := lvPurchOrderLineRec.Type::"G/L Account";
          CASE IPlantOrderCostLineRec.Type OF
            IPlantOrderCostLineRec.Type::Hours:
              BEGIN
                VALIDATE("No.", PlantSetupRec."Hours Account PO-Cst");
                VALIDATE("Gen. Prod. Posting Group", PlantSetupRec."Prod.P.Grp. Hours PO-Cst");
                VALIDATE("VAT Prod. Posting Group", PlantSetupRec."VAT-Prod.P.Grp. Hours PO-Cst");
              END;
            IPlantOrderCostLineRec.Type::Transport:
              BEGIN
                VALIDATE("No.", PlantSetupRec."Transport Account PO-Cst");
                VALIDATE("Gen. Prod. Posting Group", PlantSetupRec."Prod.P.Grp. Transp. PO-Cst");
                VALIDATE("VAT Prod. Posting Group", PlantSetupRec."VAT-Prod.P.Grp. Transp. PO-Cst");
              END;
            IPlantOrderCostLineRec.Type::"Sundry Costs":
              BEGIN
                VALIDATE("No.", PlantSetupRec."Miscellaneous Account PO-Cst");
                VALIDATE("Gen. Prod. Posting Group", PlantSetupRec."Prod.P.Grp. Miscel. PO-Cst");
                VALIDATE("VAT Prod. Posting Group", PlantSetupRec."VAT-Prod.P.Grp. Miscel. PO-Cst");
              END;
            IPlantOrderCostLineRec.Type::Damage:
              BEGIN
                VALIDATE("No.", PlantSetupRec."Damage Account PO-Cst");
                VALIDATE("Gen. Prod. Posting Group", PlantSetupRec."Prod.P.Grp. Damage PO-Cst");
                VALIDATE("VAT Prod. Posting Group", PlantSetupRec."VAT-Prod.P.Grp. Damage PO-Cst");
              END;
          END;
          VALIDATE("Shortcut Dimension 2 Code", IPlantOrderCostLineRec."No.");
          Description := IPlantOrderCostLineRec.Description;
          VALIDATE(Quantity, IPlantOrderCostLineRec.Quantity);
          VALIDATE("Unit of Measure Code", IPlantOrderCostLineRec."Unit of Measure");
          VALIDATE("Direct Unit Cost", IPlantOrderCostLineRec.Price);
          VALIDATE("Requested Receipt Date", IPlantOrderCostLineRec.Date);
          IF IPlantOrderCostLineRec.Description <> '' THEN
            Description := IPlantOrderCostLineRec.Description;
          "Plant Order No." := IPlantOrderCostLineRec."Plant Order No.";
        END;
        INSERT(TRUE);
      END;
    END;

    PROCEDURE InsertStdCostLinesDamagePOLine@1100529001(PlantOrderLine@1100529000 : Record 11012557;WithSelection@1100525000 : Boolean) : Boolean;
    VAR
      PlantCostLine@1100529001 : Record 11012591;
      OrderCostLine@1100529002 : Record 11012558;
      SelectDamageCostLines@1100525001 : Page 11125943;
      NextlineNo@1100529003 : Integer;
    BEGIN
      //DP00241 (C004697)
      IF (PlantOrderLine."Plant Type" = '') OR (PlantOrderLine."Quantity Damaged" <= 0) THEN
        EXIT;

      PlantCostLine.FILTERGROUP(7);  //C004697-2.n
      PlantCostLine.SETRANGE("Cost Level", PlantCostLine."Cost Level"::PlantType);  //DP00671
      PlantCostLine.SETRANGE(Code, PlantOrderLine."Plant Type");
      PlantCostLine.SETRANGE(Type,  PlantCostLine.Type::Damage);
      PlantCostLine.FILTERGROUP(0);  //C004697-2.n
      IF PlantCostLine.FINDSET THEN BEGIN
        //C004697-2.sn
        IF WithSelection THEN BEGIN
          IF PlantCostLine.COUNT > 1 THEN BEGIN
            COMMIT;
            SelectDamageCostLines.SETTABLEVIEW(PlantCostLine);
            SelectDamageCostLines.LOOKUPMODE(TRUE);
            SelectDamageCostLines.SetPOLine(PlantOrderLine);
            IF SelectDamageCostLines.RUNMODAL <> ACTION::LookupOK THEN
              EXIT(FALSE)
            ELSE BEGIN
              SelectDamageCostLines.GetSelectedLines(PlantCostLine);
              IF NOT PlantCostLine.FINDSET THEN
                EXIT(FALSE);
            END;
          END;
        END;
        //C004697-2.en
        OrderCostLine.SETRANGE("Plant Order No.", PlantOrderLine."Plant Order No.");
        IF OrderCostLine.FINDLAST THEN
          NextlineNo := OrderCostLine."Line No." + 10000
        ELSE
          NextlineNo := 10000;
        REPEAT
          OrderCostLine.INIT;
          OrderCostLine."Plant Order No." := PlantOrderLine."Plant Order No.";
          OrderCostLine.InitRecord();  //* First order number must be filled, here Date is filled with Transfer Date of Order
          OrderCostLine."Line No." := NextlineNo;
          OrderCostLine.VALIDATE(Type, PlantCostLine.Type);
          OrderCostLine.VALIDATE("No.", PlantCostLine."No.");
          OrderCostLine."Plant Type" := PlantOrderLine."Plant Type";
          IF (PlantOrderLine."No." <> '') AND (PlantOrderLine."No." <> '0') THEN
            OrderCostLine."Plant No." := PlantOrderLine."No.";
          IF PlantCostLine."Damage Code" <> '' THEN
            OrderCostLine.VALIDATE("Damage Code", PlantCostLine."Damage Code");
          IF (PlantCostLine.Description <> '') THEN
            OrderCostLine.Description := PlantCostLine.Description;
          OrderCostLine."Unit of Measure" := PlantCostLine."Unit of Measure";
          OrderCostLine.Quantity := 0;  // Do not fill quantity, must be done by the user for the concerning damage lines
          OrderCostLine.VALIDATE(Price, PlantCostLine.GetCostLinePrice(OrderCostLine.Date));
          OrderCostLine."Plant Order Line No." := PlantOrderLine."Line No.";
          OrderCostLine."Vendor No." := PlantCostLine."Vendor No.";
          OrderCostLine.Element := PlantOrderLine.Element;
          OrderCostLine.INSERT;
          NextlineNo := NextlineNo + 10000;
        UNTIL PlantCostLine.NEXT = 0;
        EXIT(TRUE);  //C004697-2.n
      END;
      EXIT(FALSE);  //C004697-2.n
    END;

    PROCEDURE RunUpdateLocRelatedStdCostLines@1100409001(PlantOrder@1100409000 : Record 11012556;xPlantOrder@1100409001 : Record 11012556);
    VAR
      PlantOrderCostLine@1100409003 : Record 11012558;
    BEGIN
      //DP00671
      IF (PlantOrder."No." = '') OR PlantOrder.Posted OR (PlantOrder.Status >= PlantOrder.Status::Released) THEN
        EXIT;
      IF PlantOrder.PlantOrderIsBackorder(PlantOrder."No.") THEN
        EXIT;
      IF (PlantOrder.Type <> xPlantOrder.Type) OR
         ((PlantOrder.Type = xPlantOrder.Type::Arrival) AND (PlantOrder."To Location" <> xPlantOrder."To Location")) OR
         ((PlantOrder.Type = xPlantOrder.Type::"Other Transfers") AND (PlantOrder."To Location" <> xPlantOrder."To Location")) OR
         ((PlantOrder.Type = xPlantOrder.Type::Removal) AND (PlantOrder."From Location" <> xPlantOrder."From Location"))
      THEN BEGIN
        PlantOrderCostLine.SETRANGE("Plant Order No.", PlantOrder."No.");
        PlantOrderCostLine.SETRANGE("Location Related", TRUE);
        PlantOrderCostLine.DELETEALL;
      END;

      IF ((PlantOrder.Type = PlantOrder.Type::Arrival) AND (PlantOrder."To Location" <> xPlantOrder."To Location")) OR
         ((PlantOrder.Type = PlantOrder.Type::"Other Transfers") AND (PlantOrder."To Location" <> xPlantOrder."To Location")) OR
         ((PlantOrder.Type = PlantOrder.Type::Removal) AND (PlantOrder."From Location" <> xPlantOrder."From Location"))
      THEN BEGIN
        CASE PlantOrder.Type OF
          PlantOrder.Type::Arrival,
          PlantOrder.Type::"Other Transfers":
            IF NOT InsertLocRelatedStdCostLines(PlantOrder, PlantOrder."To Location", 1) THEN
              InsertLocRelatedStdCostLines(PlantOrder, PlantOrder."To Location", 2);
          PlantOrder.Type::Removal:
            IF NOT InsertLocRelatedStdCostLines(PlantOrder, PlantOrder."From Location", 1) THEN
              InsertLocRelatedStdCostLines(PlantOrder, PlantOrder."From Location", 2);
        END;
      END;
    END;

    LOCAL PROCEDURE InsertLocRelatedStdCostLines@1100409002(PlantOrder@1100409000 : Record 11012556;Location@1100409001 : Code[20];Level@1100409002 : Integer) : Boolean;
    VAR
      PlantLoc@1100409003 : Record 11012554;
      Cust@1100409004 : Record 18;
      PlantCostLine@1100409006 : Record 11012591;
      PlantOrderCostLine@1100409005 : Record 11012558;
      Code@1100409007 : Code[20];
      CostLevel@1100409008 : Option;
      NextLineNo@1100409009 : Integer;
      Step@1100409010 : Integer;
    BEGIN
      //* Level: 1=Location, 2=Customer Price Group
      IF Location = '' THEN
        EXIT(FALSE);
      IF NOT PlantLoc.GET(Location) THEN
        EXIT(FALSE);
      IF PlantLoc.Depot THEN
        EXIT(FALSE);
      IF Level = 1 THEN BEGIN
        Code := Location;
        CostLevel := PlantCostLine."Cost Level"::Location;
      END;
      IF Level = 2 THEN BEGIN
        IF PlantLoc."Customer No." = '' THEN
          EXIT(FALSE);
        IF NOT Cust.GET(PlantLoc."Customer No.") THEN
          EXIT(FALSE);
        IF Cust."Customer Price Group" = '' THEN
          EXIT(FALSE);
        Code := Cust."Customer Price Group";
        CostLevel := PlantCostLine."Cost Level"::CustomerPriceGroup;
      END;

      PlantCostLine.SETRANGE("Cost Level", CostLevel);
      PlantCostLine.SETRANGE(Code, Code);
      PlantCostLine.SETFILTER(Type, '<>%1', PlantCostLine.Type::Damage);
      IF PlantCostLine.ISEMPTY THEN
        EXIT(FALSE);

      CASE PlantOrder.Type OF
        PlantOrder.Type::Arrival:
          PlantCostLine.SETFILTER("Type Cost", '%1|%2', PlantCostLine."Type Cost"::Arrival, PlantCostLine."Type Cost"::Both);
        PlantOrder.Type::"Other Transfers":
          BEGIN
            PlantCostLine.SETFILTER("Type Cost", '%1|%2', PlantCostLine."Type Cost"::Arrival, PlantCostLine."Type Cost"::Both);
            PlantCostLine.SETRANGE("Incl. Arrival Other Transfers", TRUE);
          END;
        PlantOrder.Type::Removal:
          PlantCostLine.SETFILTER("Type Cost", '%1|%2', PlantCostLine."Type Cost"::Removal, PlantCostLine."Type Cost"::Both);
      END;
      IF PlantCostLine.FINDSET THEN BEGIN
        NextLineNo := GetNextLineNoLocRelated(PlantOrder."No.", PlantCostLine.COUNT, Step);
        REPEAT
          PlantOrderCostLine.INIT;
          PlantOrderCostLine."Plant Order No." := PlantOrder."No.";
          PlantOrderCostLine.SetPlantOrderRecord(PlantOrder);
          PlantOrderCostLine.InitRecord();  //* Fill Order No. before calling this function
          PlantOrderCostLine."Line No." := NextLineNo;
          PlantOrderCostLine.VALIDATE(Type, PlantCostLine.Type);
          PlantOrderCostLine.VALIDATE("No.", PlantCostLine."No.");
          PlantOrderCostLine.Description := PlantCostLine.Description;
          PlantOrderCostLine."Plant Type" := '';
          PlantOrderCostLine."Plant No." := '';
          PlantOrderCostLine."Plant Order Line No." := 0;
          PlantOrderCostLine."Vendor No." := PlantCostLine."Vendor No.";
          IF PlantOrderCostLine.Type <> PlantOrderCostLine.Type::Text THEN BEGIN
            PlantOrderCostLine.Quantity := PlantCostLine.Quantity;
            PlantOrderCostLine."Unit of Measure" := PlantCostLine."Unit of Measure";
            PlantOrderCostLine.VALIDATE(Price, PlantCostLine.GetCostLinePrice(PlantOrder."Transfer Date"));
          END;
          PlantOrderCostLine."Location Related" := TRUE;
          PlantOrderCostLine.INSERT;
          NextLineNo := NextLineNo + Step;
        UNTIL PlantCostLine.NEXT = 0;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetNextLineNoLocRelated@1100409003(PlantOrderNo@1100485000 : Code[20];LinesNeeded@1100485004 : Integer;VAR Step@1100485003 : Integer) : Integer;
    VAR
      PlantOrderCostLine@1100485005 : Record 11012558;
      Gap@1100485006 : Integer;
    BEGIN
      WITH PlantOrderCostLine DO BEGIN
        SETRANGE("Plant Order No.", PlantOrderNo);
        IF NOT FINDFIRST THEN BEGIN
          Step := 10000;
          EXIT(10000);
        END;

        Gap := "Line No." - 1;
        IF (Gap < LinesNeeded) THEN BEGIN
          FINDLAST;
          Step := 10000;
          EXIT("Line No." + 10000);
        END;

        Step := Gap DIV (LinesNeeded + 1);
        IF Step <= 0 THEN
          Step := 1;
        IF Step > 10000 THEN
          Step := 10000;
        EXIT(Step);
      END;
    END;

    LOCAL PROCEDURE GetMinAndMaxCheckLines@1100529602(LocPlantCostLine@1100529601 : Record 11012591;LocPlantOrderCostLine@1100529600 : Record 11012558;VAR TmpCheckMinMaxCostLine@1100529602 : TEMPORARY Record 11012591;VAR TmpCheckPlantOrderCostLine@1100529604 : TEMPORARY Record 11012558);
    VAR
      CheckMinMaxCostLine@1100529603 : Record 11012591;
    BEGIN
      IF (LocPlantCostLine.Type = LocPlantCostLine.Type::Text) OR (ConfirmedCheckValues = ConfirmedCheckValues::No) THEN
        EXIT;
      IF (NOT TmpCheckMinMaxCostLine.ISTEMPORARY) OR (NOT TmpCheckPlantOrderCostLine.ISTEMPORARY) THEN
        EXIT;

      IF (LocPlantCostLine."Minimum Value" = 0) AND (LocPlantCostLine."Maximum Value" = 0) THEN BEGIN
        IF NOT LocPlantCostLine.GetStandardMinAndMaxLine(CheckMinMaxCostLine, '') THEN
          EXIT;
        IF NOT CheckMinMaxCostLine.GetStandardMinAndMaxLine(TmpCheckMinMaxCostLine, LocPlantOrderCostLine."Plant Type") THEN BEGIN
          TmpCheckMinMaxCostLine := CheckMinMaxCostLine;
          TmpCheckMinMaxCostLine.Code := LocPlantOrderCostLine."Plant Type";
          TmpCheckMinMaxCostLine.INSERT;
        END;
      END ELSE
        IF NOT LocPlantCostLine.GetStandardMinAndMaxLine(TmpCheckMinMaxCostLine, LocPlantOrderCostLine."Plant Type") THEN BEGIN
          TmpCheckMinMaxCostLine := LocPlantCostLine;
          TmpCheckMinMaxCostLine."Cost Level" := TmpCheckMinMaxCostLine."Cost Level"::"Standard Cost";
          TmpCheckMinMaxCostLine.Code := LocPlantOrderCostLine."Plant Type";
          TmpCheckMinMaxCostLine.INSERT;
        END;

      TmpCheckPlantOrderCostLine := LocPlantOrderCostLine;
      TmpCheckPlantOrderCostLine.INSERT;
    END;

    LOCAL PROCEDURE CheckMinAndMaxValues@1100529603(VAR TmpCheckMinMaxCostLine@1100529601 : TEMPORARY Record 11012591;VAR TmpCheckPlantOrderCostLine@1100529600 : TEMPORARY Record 11012558;LastLineNo@1100529605 : Integer;LineStep@1100529607 : Integer);
    VAR
      NewCheckPlantOrderCostLine@1100529602 : TEMPORARY Record 11012558;
      NewPlantOrderCostLine@1100529606 : Record 11012558;
      TotalAmount@1100529604 : Decimal;
      RemoveAmount@1100529603 : Decimal;
    BEGIN
      IF (NOT TmpCheckMinMaxCostLine.ISTEMPORARY) OR (NOT TmpCheckPlantOrderCostLine.ISTEMPORARY) THEN
        EXIT;
      TmpCheckMinMaxCostLine.RESET;
      TmpCheckPlantOrderCostLine.RESET;
      IF TmpCheckMinMaxCostLine.ISEMPTY OR TmpCheckPlantOrderCostLine.ISEMPTY THEN
        EXIT;

      IF ConfirmedCheckValues = ConfirmedCheckValues::" " THEN
        IF GUIALLOWED THEN
          IF CONFIRM(Text009) THEN
            ConfirmedCheckValues := ConfirmedCheckValues::Yes
          ELSE
            ConfirmedCheckValues := ConfirmedCheckValues::No
        ELSE
          ConfirmedCheckValues := ConfirmedCheckValues::Yes;
      IF ConfirmedCheckValues = ConfirmedCheckValues::No THEN
        EXIT;

      TmpCheckMinMaxCostLine.FINDSET;
      REPEAT
        TmpCheckPlantOrderCostLine.SETRANGE(Type, TmpCheckMinMaxCostLine.Type);
        TmpCheckPlantOrderCostLine.SETRANGE("Plant Type", TmpCheckMinMaxCostLine.Code);
        TmpCheckPlantOrderCostLine.SETRANGE("No.", TmpCheckMinMaxCostLine."No.");
        IF NOT TmpCheckPlantOrderCostLine.ISEMPTY THEN BEGIN
          TmpCheckPlantOrderCostLine.CALCSUMS(Amount);
          TotalAmount := TmpCheckPlantOrderCostLine.Amount;
          IF (TmpCheckMinMaxCostLine."Minimum Value" <> 0) AND (TmpCheckMinMaxCostLine."Minimum Value" > TotalAmount) THEN BEGIN
            TmpCheckPlantOrderCostLine.FINDFIRST;
            NewCheckPlantOrderCostLine := TmpCheckPlantOrderCostLine;
            NewCheckPlantOrderCostLine.Amount := TmpCheckMinMaxCostLine."Minimum Value" - TotalAmount;
            NewCheckPlantOrderCostLine."Location Related" := TRUE;
            NewCheckPlantOrderCostLine.INSERT;
          END;
          IF (TmpCheckMinMaxCostLine."Maximum Value" <> 0) AND (TmpCheckMinMaxCostLine."Maximum Value" < TotalAmount) THEN BEGIN
            RemoveAmount := TotalAmount - TmpCheckMinMaxCostLine."Maximum Value";
            TmpCheckPlantOrderCostLine.FINDSET;
            REPEAT
              NewCheckPlantOrderCostLine := TmpCheckPlantOrderCostLine;
              IF RemoveAmount > TmpCheckPlantOrderCostLine.Amount THEN BEGIN
                NewCheckPlantOrderCostLine.Amount := 0;
                RemoveAmount -= TmpCheckPlantOrderCostLine.Amount;
              END ELSE BEGIN
                NewCheckPlantOrderCostLine.Amount := TmpCheckPlantOrderCostLine.Amount - RemoveAmount;
                RemoveAmount := 0;
              END;
              NewCheckPlantOrderCostLine."Location Related" := FALSE;
              NewCheckPlantOrderCostLine.INSERT;
            UNTIL (TmpCheckPlantOrderCostLine.NEXT = 0) OR (RemoveAmount = 0);
          END;
        END;
      UNTIL TmpCheckMinMaxCostLine.NEXT = 0;

      IF NewCheckPlantOrderCostLine.ISEMPTY THEN
        EXIT;
      NewCheckPlantOrderCostLine.FINDSET;
      REPEAT
        IF NewCheckPlantOrderCostLine."Location Related" THEN BEGIN
          NewPlantOrderCostLine := NewCheckPlantOrderCostLine;
          NewPlantOrderCostLine."Line No." := LastLineNo;
          NewPlantOrderCostLine.INSERT;
          LastLineNo += LineStep;
        END ELSE
          NewPlantOrderCostLine.GET(NewCheckPlantOrderCostLine."Plant Order No.", NewCheckPlantOrderCostLine."Line No.");
        IF NewPlantOrderCostLine.Quantity <> 0 THEN
          NewPlantOrderCostLine.VALIDATE(Amount, NewCheckPlantOrderCostLine.Amount)
        ELSE BEGIN
          NewPlantOrderCostLine.Amount := NewCheckPlantOrderCostLine.Amount;
          NewPlantOrderCostLine.Price := NewCheckPlantOrderCostLine.Amount;
        END;
        NewPlantOrderCostLine.MODIFY;
      UNTIL NewCheckPlantOrderCostLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

