OBJECT Codeunit 11012217 Gen. Imp. Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TgtRecRef@1100525001 : RecordRef;
      TgtField@1100485004 : Record 2000000041;
      GenImpBatch@1100485013 : Record 11020483;
      GenImpMapping@1100485012 : Record 11020484;
      TempGenImpMapLine@1100485015 : TEMPORARY Record 11020485;
      TempGenImpErrorLog@1100485006 : ARRAY [2] OF TEMPORARY Record 11020486;
      GenImpRecValidate@1100485005 : Codeunit 11012218;
      Text000@1100485009 : TextConst 'DEU=Notwendiges Feld;ENU=Mandatory field;NLD=Verplicht veld;NOR=Obligatorisk felt';
      Text001@1100485008 : TextConst 'DEU=Text wurde abgeschnieden;ENU=Text truncated;NLD=Tekst afgekapt;NOR=Teksten er avkortet';
      Text002@1100485007 : TextConst 'DEU=Text ist zu lang;ENU=Text too long;NLD=Tekst is te lang;NOR=Teksten er for lang';
      Text003@1100485001 : TextConst 'DEU=Bewertung gescheitert;ENU=Evaluation failed;NLD=Evaluatie gefaald;NOR=Evalueringen mislyktes';
      Text005@1100485000 : TextConst 'DEU=Validation gescheitert;ENU=Validation failed;NLD=Validatie gefaald;NOR=Valideringen mislyktes';
      Text006@1100485016 : TextConst 'DEU=Validation ausgefÅhrt;ENU=Validation passed;NLD=Validatie uitgevoerd;NOR=Valideringen er vellykket';
      ErrLogThreshold@1100485033 : 'Message,Warning,Error,No Logging';
      Window@1100485024 : Dialog;
      Text013@1100485025 : TextConst 'DEU=Zeile #1###### van #2######\;ENU=Line #1###### of #2######\;NLD=Regel #1###### van #2######\;NOR=Rad #1###### of #2######\';
      Counter@1100485026 : Integer;
      MaxCounter@1100485027 : Integer;
      WindowLastUpdated@1100485028 : Time;
      Text014@1100485029 : TextConst 'DEU=öberprÅfen Zeilen @3@@@@@@@@@@@@@;ENU=Checking lines @3@@@@@@@@@@@@@;NLD=Controleren regels @3@@@@@@@@@@@@@;NOR=Kontroll rader @3@@@@@@@@@@@@@';
      Text015@1100485030 : TextConst 'DEU=öbertragen Zeilen @3@@@@@@@@@@@@@;ENU=Transferring lines @3@@@@@@@@@@@@@;NLD=Overzetten regels @3@@@@@@@@@@@@@;NOR=Overfõrer rader @3@@@@@@@@@@@@@';
      Text016@1100485031 : TextConst 'DEU=Lîschen Fehlerprotokoll @3@@@@@@@@@@@@@;ENU=Deleting error log @3@@@@@@@@@@@@@;NLD=Verwijderen foutenlog @3@@@@@@@@@@@@@;NOR=Sletter feillogg @3@@@@@@@@@@@@@';
      Text017@1100485032 : TextConst 'DEU=Schreiben Fehlerprotokoll @3@@@@@@@@@@@@@;ENU=Writing error log @3@@@@@@@@@@@@@;NLD=Schrijven foutenlog @3@@@@@@@@@@@@@;NOR=Skriver feillogg @3@@@@@@@@@@@@@';
      Text018@1100485034 : TextConst 'DEU=%1 DatensÑtze hinzugefÅgt;ENU=%1 record(s) inserted;NLD=%1 record(s) toegevoegd;NOR=%1 post(er) er satt inn';
      Text019@1100485035 : TextConst 'DEU=%1 DatensÑtze gelîscht;ENU=%1 record(s) modified;NLD=%1 record(s) gewijzigd;NOR=%1 post(er) er endret';
      Text020@1100485037 : TextConst 'DEU=%1 DatensÑtze nicht hinzugefÅgt wegen Feldfehler;ENU=%1 record(s) skipped for insert, field errors exist;NLD=%1 record(s) niet toegevoegd vanwege veldfouten;NOR=%1 post(er) er hoppet over for innsetting. Feil i felt finnes';
      Text021@1100485040 : TextConst 'DEU=%1 DatensÑtze nicht geÑndert wegen Feldfehler;ENU=%1 record(s) skipped for modify, field errors exist;NLD=%1 record(s) niet gewijzigd vanwege veldfouten;NOR=%1 post(er) hoppet over for endring. Feltfeil finnes.';
      Text022@1100485038 : TextConst 'DEU=%1 DatensÑtze konnten nicht hinzugefÅgt werden;ENU=%1 record(s) could not be inserted;NLD=%1 record(s) kon(den) niet worden toegevoegd;NOR=%1 post(er) kunne ikke settes inn';
      Text023@1100485039 : TextConst 'DEU=%1 DatensÑtze konnten nicht geÑndert werden;ENU=%1 record(s) could not be modified;NLD=%1 record(s) kon(den) niet worden gewijzigd;NOR=%1 post(er) kunne ikke endres';
      Text029@1100485044 : TextConst 'DEU=%1 DatensÑtze nicht hinzugefÅgt, %2 soll aktiviert sein;ENU="%1 record(s) not inserted, %2 should be active ";NLD=%1 record(s) niet toegevoegd, %2 moet geactiveerd zijn;NOR=%1 post(er) er ikke satt inn. %2 skal vëre aktiv.';
      Text030@1100485041 : TextConst 'DEU=%1 DatensÑtze nicht geÑndert, %2 soll aktiviert sein;ENU=%1 record(s) not modified, %2 should be active;NLD=%1 record(s) niet gewijzigd, %2 moet geactiveerd zijn;NOR=%1 post(er) er ikke endret. %2 skal vëre aktiv.';
      Text024@1100485042 : TextConst 'DEU=Keine Zeilen ausgewÑhlt.;ENU=No lines selected.;NLD=Geen regels geselecteerd.;NOR=Ingen rader er valgt.;SVE=Inga rader har valts.';
      ChangeType@1100485018 : ',Insert,Modify';
      ErrorType@1100485011 : ',FieldErrExist,AutoChangeFalse,ChangeFail,ChangeOK,ChangeValFail,ChangeValOK';
      Text025@1100485049 : TextConst 'DEU=%1 gescheitert wegen Feldfehler;ENU=%1 failed, field errors exist;NLD=%1 gefaald vanwege veldfouten;NOR=%1 mislyktes. Feltfeil foreligger.';
      Text026@1100485048 : TextConst 'DEU=%1 gescheitert, %2 muss aktiviert werden;ENU="%1 failed, %2 should be active ";NLD=%1 gefaald, %2 moet geactiveerd zijn;NOR=%1 mislyktes. %2 skal vëre aktiv.';
      Text027@1100485047 : TextConst 'DEU=%1 gescheitert;ENU=%1 failed;NLD=%1 gefaald;NOR=%1 mislyktes';
      Text028@1100485046 : TextConst 'DEU=%1 erfolgreich;ENU=%1 succeeded;NLD=%1 succesvol;NOR=%1 lyktes';
      ErrorsOccurredLine@1100525002 : Boolean;
      ErrorsOccurredBatch@1100525000 : Boolean;

    PROCEDURE ProcessSelectedJnlLns@1100485026(ProcessMode@1100485005 : 'Guarded Check,Unguarded Check,Transfer';VAR GenImpJnlLine@1100485000 : Record 11020481);
    VAR
      GenImpJnlLine2@1100485001 : Record 11020481;
      TgtRecRef2@1100485002 : RecordRef;
      ErrorCounters@1100485014 : ARRAY [2,6] OF Integer;
    BEGIN
      InitEnvironment(GenImpJnlLine,FALSE);
      GenImpJnlLine2.COPY(GenImpJnlLine);
      GenImpJnlLine2.SETRANGE("Batch Name",GenImpJnlLine."Batch Name");
      IF NOT GenImpJnlLine2.FINDSET THEN
        ERROR(Text024);

      IF ProcessMode <> ProcessMode::"Unguarded Check" THEN BEGIN
        DeleteErrorLogFromJnlLines(GenImpJnlLine2);
        DeleteErrorLogFromContext(GenImpJnlLine2);
        IF ProcessMode = ProcessMode::"Guarded Check" THEN
          COMMIT;
        MaxCounter := GenImpJnlLine2.COUNT;
        IF ProcessMode = ProcessMode::Transfer THEN
          OpenWindow(Text015,MaxCounter)
        ELSE
          OpenWindow(Text014,MaxCounter);
      END;

      TgtRecRef.INIT;
      AddContextToTarget(GenImpJnlLine2,(ProcessMode = ProcessMode::"Guarded Check"));
      TgtRecRef2 := TgtRecRef.DUPLICATE;

      REPEAT
        ErrorsOccurredLine := FALSE;
        IF ProcessMode <> ProcessMode::"Unguarded Check" THEN BEGIN
          Counter := Counter + 1;
          UpdateWindow;
        END;
        FillAndValidateAllJnlLnFields(GenImpJnlLine2,(ProcessMode = ProcessMode::"Guarded Check"));
        IF GenImpJnlLine2.Type = GenImpJnlLine2.Type::Data THEN
          WriteRecord(ProcessMode,GenImpJnlLine2,ErrorCounters);
        TgtRecRef.CLOSE; //not sure whether this is needed
        TgtRecRef := TgtRecRef2.DUPLICATE; //get original clean values, context, etc
      UNTIL GenImpJnlLine2.NEXT = 0;

      IF ProcessMode = ProcessMode::"Guarded Check" THEN BEGIN
        AppendErrorLogEntry(0,0,COPYSTR(STRSUBSTNO(Text018,ErrorCounters[ChangeType::Insert,ErrorType::ChangeOK]),1,80));
        AppendErrorLogEntry(0,0,COPYSTR(STRSUBSTNO(Text019,ErrorCounters[ChangeType::Modify,ErrorType::ChangeOK]),1,80));
        AppendErrorLogEntry(0,0,COPYSTR(STRSUBSTNO(Text020,ErrorCounters[ChangeType::Insert,ErrorType::FieldErrExist]),1,80));
        AppendErrorLogEntry(0,0,COPYSTR(STRSUBSTNO(Text021,ErrorCounters[ChangeType::Modify,ErrorType::FieldErrExist]),1,80));
        AppendErrorLogEntry(0,0,COPYSTR(STRSUBSTNO(Text022,ErrorCounters[ChangeType::Insert,ErrorType::ChangeFail]),1,80));
        AppendErrorLogEntry(0,0,COPYSTR(STRSUBSTNO(Text023,ErrorCounters[ChangeType::Modify,ErrorType::ChangeFail]),1,80));
        AppendErrorLogEntry(0,0,
          COPYSTR(
            STRSUBSTNO(Text029,
              ErrorCounters[ChangeType::Insert,ErrorType::AutoChangeFalse],
              GenImpMapping.FIELDCAPTION("Auto Save")),
            1,80));
        AppendErrorLogEntry(0,0,
          COPYSTR(
            STRSUBSTNO(Text030,
              ErrorCounters[ChangeType::Modify,ErrorType::AutoChangeFalse],
              GenImpMapping.FIELDCAPTION("Auto Replace")),
            1,80));

        GenImpJnlLine2.MODIFYALL(Status,GenImpJnlLine2.Status::Checked);
      END;

      IF ProcessMode <> ProcessMode::"Unguarded Check" THEN BEGIN
        Window.CLOSE;
        WriteErrorLogBuffer;
      END ELSE
        ERROR(Text006);
    END;

    PROCEDURE WriteRecord@1100485011(ProcessMode@1100485005 : 'Guarded Check,Unguarded Check,Transfer';VAR GenImpJnlLine@1100485000 : Record 11020481;VAR ErrorCounter@1100485009 : ARRAY [2,6] OF Integer);
    VAR
      ErrText@1100485008 : Text[80];
    BEGIN
      IF ErrorsOccurred() THEN BEGIN
        ErrorType := ErrorType::FieldErrExist;
        ErrText := COPYSTR(STRSUBSTNO(Text025,ChangeType) + ' <' + TgtRecRef.GETPOSITION + '>',1,80);
      END ELSE BEGIN
        IF ChangeType = ChangeType::Insert THEN BEGIN
          IF GenImpMapping."Auto Save" THEN BEGIN
            IF TryInsertTgtRecRef(GenImpJnlLine,GenImpMapping."Run OnInsert Trigger",ProcessMode) THEN BEGIN
              ErrorType := ErrorType::ChangeOK;
              ErrText := COPYSTR(STRSUBSTNO(Text028,ChangeType) + ' <' + TgtRecRef.GETPOSITION + '>',1,80);
            END ELSE BEGIN
              ErrorType := ErrorType::ChangeFail;
              ErrText := COPYSTR(STRSUBSTNO(Text027,ChangeType) + ' <' + TgtRecRef.GETPOSITION + '>',1,80);
            END;
          END ELSE BEGIN
            ErrorType := ErrorType::AutoChangeFalse;
            ErrText := COPYSTR(
              STRSUBSTNO(Text026,ChangeType,GenImpMapping.FIELDCAPTION(GenImpMapping."Auto Save")) +
              ' <' + TgtRecRef.GETPOSITION + '>',
              1,80);
          END;
        END ELSE BEGIN
          IF GenImpMapping."Auto Replace" THEN BEGIN
            IF TryModifyTgtRecRef(GenImpJnlLine,GenImpMapping."Run OnModify Trigger",ProcessMode) THEN BEGIN
              ErrorType := ErrorType::ChangeOK;
              ErrText := COPYSTR(STRSUBSTNO(Text028,ChangeType) + ' <' + TgtRecRef.GETPOSITION + '>',1,80);
            END ELSE BEGIN
              ErrorType := ErrorType::ChangeFail;
              ErrText := COPYSTR(STRSUBSTNO(Text027,ChangeType) + ' <' + TgtRecRef.GETPOSITION + '>',1,80);
            END;
          END ELSE BEGIN
            ErrorType := ErrorType::AutoChangeFalse;
            ErrText := COPYSTR(
              STRSUBSTNO(Text026,ChangeType,GenImpMapping.FIELDCAPTION(GenImpMapping."Auto Replace")) +
              ' <' + TgtRecRef.GETPOSITION + '>',
              1,80);
          END;
        END;
      END;

      ErrorCounter[ChangeType,ErrorType] := ErrorCounter[ChangeType,ErrorType] + 1;
      CASE ErrorType OF
        ErrorType::ChangeOK:
          AppendErrorLogEntry(GenImpJnlLine."Line No.",0,ErrText);
        ELSE
          AppendErrorLogEntry(GenImpJnlLine."Line No.",2,ErrText);
      END;
    END;

    PROCEDURE TryInsertTgtRecRef@1100485047(VAR GenImpJnlLine2@1100485002 : Record 11020481;RunTrigger@1100485001 : Boolean;ProcessMode@1100485003 : 'Guarded Check,Unguarded Check,Transfer') : Boolean;
    VAR
      ResultOK@1100485004 : Boolean;
    BEGIN
      IF ProcessMode = ProcessMode::"Guarded Check" THEN BEGIN
        GenImpRecValidate.SetVarsPreRecInsert(TgtRecRef,RunTrigger);
        IF GenImpRecValidate.RUN THEN;
        ResultOK := (GenImpRecValidate.GetValidationResult = GenImpRecValidate.IntResultRecInsOK);
      END ELSE
        ResultOK := TgtRecRef.INSERT(RunTrigger);

      IF ResultOK THEN
        IF (ProcessMode = ProcessMode::Transfer) THEN BEGIN
          GenImpJnlLine2.Status := GenImpJnlLine2.Status::"Transferred to DB";
          GenImpJnlLine2.MODIFY;
        END;

      EXIT(ResultOK);
    END;

    PROCEDURE TryModifyTgtRecRef@1100485050(VAR GenImpJnlLine2@1100485002 : Record 11020481;RunTrigger@1100485001 : Boolean;ProcessMode@1100485003 : 'Guarded Check,Unguarded Check,Transfer') : Boolean;
    VAR
      ResultOK@1100485004 : Boolean;
    BEGIN
      IF ProcessMode = ProcessMode::"Guarded Check" THEN BEGIN
        GenImpRecValidate.SetVarsPreRecModify(TgtRecRef,RunTrigger);
        IF GenImpRecValidate.RUN THEN;
        ResultOK := (GenImpRecValidate.GetValidationResult = GenImpRecValidate.IntResultRecModOK);
      END ELSE
        ResultOK := TgtRecRef.MODIFY(RunTrigger);

      IF ResultOK THEN
        IF (ProcessMode = ProcessMode::Transfer) THEN BEGIN
          GenImpJnlLine2.Status := GenImpJnlLine2.Status::"Transferred to DB";
          GenImpJnlLine2.MODIFY;
        END;

      EXIT(ResultOK);
    END;

    LOCAL PROCEDURE AddContextToTarget@1100485008(GenImpJnlLine@1100485002 : Record 11020481;GuardedValidate@1100485000 : Boolean);
    VAR
      TgtFldRef@1100525000 : FieldRef;
      GenImpContext@1100485001 : Record 11020482;
    BEGIN
      TempGenImpMapLine.INIT; //to make sure Context fields are not seen as mandatory in EvalVar
      GenImpContext.SETCURRENTKEY("Batch Name","Validation Order");
      GenImpContext.SETRANGE(GenImpContext."Batch Name",GenImpJnlLine."Batch Name");
      IF GenImpContext.FINDSET THEN BEGIN  //fill fields
        REPEAT
          TgtFldRef := TgtRecRef.FIELD(GenImpContext."Target Field No.");
          TgtField.GET(GenImpMapping."Target Table No.",GenImpContext."Target Field No.");
          FillAndValidateField(0,GenImpContext."Value Text",TgtField,0,GuardedValidate, TgtFldRef);//Validate Field=Never
        UNTIL GenImpContext.NEXT = 0;
        GenImpContext.SETRANGE(GenImpContext."Validate Field",TRUE);
        IF GenImpContext.FINDSET THEN  //validate fields
          REPEAT
            TgtFldRef := TgtRecRef.FIELD(GenImpContext."Target Field No.");
            TgtField.GET(GenImpMapping."Target Table No.",GenImpContext."Target Field No.");
            FillAndValidateField(0,GenImpContext."Value Text",TgtField,2,GuardedValidate, TgtFldRef);//Validate Field=Always
          UNTIL GenImpContext.NEXT = 0;
      END;
      TempGenImpMapLine.SETRANGE("NAV Field No.");
    END;

    PROCEDURE FilterSourceWithContext@1210190002(GenImpBatch@1100485002 : Record 11020483;VAR RecRef@1100485000 : RecordRef);
    VAR
      SrcFldRef@1100525000 : FieldRef;
      GenImpContext@1100485001 : Record 11020482;
    BEGIN
      GenImpBatch.CALCFIELDS("Target Table No.");
      RecRef.OPEN(GenImpBatch."Target Table No.");
      GenImpContext.SETCURRENTKEY("Batch Name");
      GenImpContext.SETRANGE(GenImpContext."Batch Name",GenImpBatch.Name);
      IF GenImpContext.FINDSET THEN BEGIN  //fill fields
        REPEAT
          SrcFldRef := RecRef.FIELD(GenImpContext."Target Field No.");
          SrcFldRef.SETFILTER(GenImpContext."Value Text");
        UNTIL GenImpContext.NEXT = 0;
      END;
    END;

    PROCEDURE FillAndValidateAllJnlLnFields@1100485001(GenImpJnlLine@1100485001 : Record 11020481;GuardedValidate@1100485002 : Boolean);
    VAR
      SrcRecRef@1100525002 : RecordRef;
      SrcFldRef@1100525001 : FieldRef;
      TgtFldRef@1100525000 : FieldRef;
      TgtRecRef2@1100485000 : RecordRef;
      TgtRecRef3@1100485003 : RecordRef;
      ErrLogThresholdOld@1100485004 : Option;
    BEGIN
      IF GenImpJnlLine.Type <> GenImpJnlLine.Type::Data THEN
        EXIT;

      //Try to fetch existing record from db
      TgtRecRef2 := TgtRecRef.DUPLICATE;
      TempGenImpMapLine.SETRANGE(TempGenImpMapLine."PK Field",TRUE);
      IF TempGenImpMapLine.FINDSET THEN
        REPEAT
          SrcRecRef.GETTABLE(GenImpJnlLine);
          SrcFldRef := SrcRecRef.FIELD(TempGenImpMapLine."Buffer Field No.");
          TgtFldRef := TgtRecRef.FIELD(TempGenImpMapLine."NAV Field No.");
          TgtField.GET(TempGenImpMapLine."NAV Table No.",TempGenImpMapLine."NAV Field No.");
          FillAndValidateField(GenImpJnlLine."Line No.",FORMAT(SrcFldRef.VALUE),TgtField,0,FALSE, TgtFldRef); //Validate Field=Never
        UNTIL TempGenImpMapLine.NEXT = 0;
      TgtRecRef3.OPEN(GenImpMapping."Target Table No.");
      TgtRecRef3.SETPOSITION(TgtRecRef.GETPOSITION);
      IF TgtRecRef3.GET(TgtRecRef3.RECORDID) THEN BEGIN
        ChangeType := ChangeType::Modify;
        IF GenImpMapping."Auto Update" THEN BEGIN
          TransferFieldsRecRef(TgtRecRef3,TgtRecRef);
          SetErrLogThreshold(ErrLogThresholdOld,ErrLogThreshold::"No Logging");
          AddContextToTarget(GenImpJnlLine,GuardedValidate);
          SetErrLogThreshold(ErrLogThresholdOld{old value dummy},ErrLogThresholdOld);
        END;
      END ELSE BEGIN
        ChangeType := ChangeType::Insert;
        TgtRecRef.CLOSE; //not sure whether this is needed
        TgtRecRef := TgtRecRef2.DUPLICATE;
      END;

      TempGenImpMapLine.SETRANGE("PK Field");
      TempGenImpMapLine.SETRANGE("NAV Field No.");

      //process import fields
      IF TempGenImpMapLine.FINDSET THEN
        REPEAT
          SrcRecRef.GETTABLE(GenImpJnlLine);
          SrcFldRef := SrcRecRef.FIELD(TempGenImpMapLine."Buffer Field No.");
          TgtFldRef := TgtRecRef.FIELD(TempGenImpMapLine."NAV Field No.");
          TgtField.GET(TempGenImpMapLine."NAV Table No.",TempGenImpMapLine."NAV Field No.");
          FillAndValidateField(
            GenImpJnlLine."Line No.",
            FORMAT(SrcFldRef.VALUE),
            TgtField,
            TempGenImpMapLine."Validate Field",
            GuardedValidate, TgtFldRef);
        UNTIL TempGenImpMapLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FillAndValidateField@1100485018(JnlLineNo@1100485004 : Integer;ValueText@1100485000 : Text[250];TgtField2@1100485001 : Record 2000000041;FieldValidate@1100485002 : 'Never,If Changed,Always';GuardValidate@1100485005 : Boolean;TgtFldRef@1100525000 : FieldRef);
    VAR
      hVariant@1100485003 : Variant;
      ValueTextOLD@1210190000 : Text[250];
    BEGIN
      IF EvalVar(JnlLineNo,hVariant,ValueText,TgtField2) THEN BEGIN
        ValueTextOLD := FORMAT(TgtFldRef.VALUE);
        IF (FieldValidate = FieldValidate::Never) OR
      //     ((FieldValidate = FieldValidate::"If Changed") AND (FORMAT(TgtFldRef) = FORMAT(hVariant)))
           ((FieldValidate = FieldValidate::"If Changed") AND (FORMAT(TgtFldRef.VALUE) = ValueText))
        THEN
          TgtFldRef.VALUE(hVariant)
        ELSE BEGIN
          TgtFldRef.VALUE(hVariant);
          GenImpRecValidate.SetVarsPreFldValidate(TgtRecRef,TgtField2."No.");
          IF GuardValidate THEN BEGIN
            IF GenImpRecValidate.RUN THEN;
            IF GenImpRecValidate.GetValidationResult = GenImpRecValidate.IntResultFldValOK THEN BEGIN
              GenImpRecValidate.GetRecPostValidate(TgtRecRef);
              AppendErrorLogEntry(JnlLineNo,0,COPYSTR('<' + TgtField2."Field Caption" + '> ' + Text006,1,80));
            END ELSE
              AppendErrorLogEntry(JnlLineNo,2,COPYSTR('<' + TgtField2."Field Caption" + '> ' + Text005,1,80));
          END ELSE
            TgtFldRef.VALIDATE;
        END;
      END;
    END;

    PROCEDURE ErrorsOccurred@1100485012() : Boolean;
    BEGIN
      EXIT(ErrorsOccurredLine OR ErrorsOccurredBatch);
    END;

    PROCEDURE MarkMappingPKFields@1100485017();
    VAR
      TgtKeyRef@1100485000 : KeyRef;
      i@1100485001 : Integer;
      KeyFldRef@1100485002 : FieldRef;
    BEGIN
      TempGenImpMapLine.SETRANGE("PK Field");
      TempGenImpMapLine.MODIFYALL("PK Field",FALSE);
      TgtKeyRef := TgtRecRef.KEYINDEX(1);
      FOR i := 1 TO TgtKeyRef.FIELDCOUNT DO BEGIN
        KeyFldRef := TgtKeyRef.FIELDINDEX(i);
        TempGenImpMapLine.SETRANGE("NAV Field No.",KeyFldRef.NUMBER);
        IF TempGenImpMapLine.FINDSET THEN
          TempGenImpMapLine.MODIFYALL("PK Field",TRUE);
        TempGenImpMapLine.SETRANGE("NAV Field No.");
      END;
    END;

    PROCEDURE MarkContextPKFields@1100485034(BatchName@1100485003 : Code[10]);
    VAR
      TgtKeyRef@1100485000 : KeyRef;
      i@1100485001 : Integer;
      KeyFldRef@1100485002 : FieldRef;
      GenImpContextLine@1100485004 : Record 11020482;
    BEGIN
      GenImpContextLine.SETRANGE("Batch Name",BatchName);
      GenImpContextLine.SETRANGE("PK Field");
      GenImpContextLine.MODIFYALL("PK Field",FALSE);
      TgtKeyRef := TgtRecRef.KEYINDEX(1);
      FOR i := 1 TO TgtKeyRef.FIELDCOUNT DO BEGIN
        KeyFldRef := TgtKeyRef.FIELDINDEX(i);
        GenImpContextLine.SETRANGE(GenImpContextLine."Target Field No.",KeyFldRef.NUMBER);
        IF GenImpContextLine.FINDSET(TRUE) THEN
          GenImpContextLine.MODIFYALL("PK Field",TRUE,TRUE);
        GenImpContextLine.SETRANGE(GenImpContextLine."Target Field No.");
      END;
    END;

    PROCEDURE TransferFieldsRecRef@1100485032(VAR FromRecRef@1100485000 : RecordRef;VAR ToRecRef@1100485001 : RecordRef);
    VAR
      i@1100485002 : Integer;
      FromFldRef@1100485003 : FieldRef;
      ToFldRef@1100485004 : FieldRef;
      Field2@1100485006 : Record 2000000041;
    BEGIN
      FOR i := 1 TO FromRecRef.FIELDCOUNT DO BEGIN
        FromFldRef := FromRecRef.FIELDINDEX(i);
        EVALUATE(Field2.Class,FORMAT(FromFldRef.CLASS));
        IF FromFldRef.ACTIVE AND (Field2.Class = Field2.Class::Normal) THEN BEGIN
          ToFldRef := ToRecRef.FIELDINDEX(i);
          ToFldRef.VALUE(FromFldRef.VALUE);
        END;
      END;
    END;

    PROCEDURE SetErrLogThreshold@1100485030(VAR OldThreshold@1100485001 : Option;Threshold@1100485000 : Option);
    BEGIN
      OldThreshold := ErrLogThreshold;
      ErrLogThreshold := Threshold;
    END;

    PROCEDURE DeleteErrorLogFromJnlLines@1100485024(VAR GenImpJnlLine2@1100485000 : Record 11020481);
    VAR
      GenImpErrLog2@1100485002 : Record 11020486;
      GenImpJnlLine3@1100485001 : Record 11020481;
    BEGIN
      GenImpJnlLine3.COPY(GenImpJnlLine2);
      IF GenImpJnlLine3.FINDSET THEN BEGIN
        GenImpErrLog2.SETCURRENTKEY("Batch Name","Batch Line No.");
        GenImpErrLog2.SETRANGE("Batch Name",GenImpJnlLine3."Batch Name");
        MaxCounter := GenImpJnlLine3.COUNT;
        OpenWindow(Text016,MaxCounter);
        REPEAT
          Counter := Counter + 1;
          UpdateWindow;
          GenImpErrLog2.SETRANGE("Batch Line No.",GenImpJnlLine3."Line No.");
          GenImpErrLog2.DELETEALL;
        UNTIL GenImpJnlLine3.NEXT = 0;
        Window.CLOSE;
      END;
    END;

    PROCEDURE DeleteErrorLogFromContext@1100485020(GenImpJnlLine@1100485000 : Record 11020481);
    VAR
      GenImpErrLog2@1100485002 : Record 11020486;
    BEGIN
      GenImpErrLog2.SETCURRENTKEY("Batch Name","Batch Line No.");
      GenImpErrLog2.SETRANGE("Batch Name",GenImpJnlLine."Batch Name");
      GenImpErrLog2.SETRANGE("Batch Line No.",0);
      GenImpErrLog2.DELETEALL;
    END;

    PROCEDURE AppendErrorLogEntry@1100485003(JnlLineNo@1100485001 : Integer;ErrorType@1100485000 : 'Message,Warning,Error';Description2@1100485002 : Text);
    BEGIN
      IF ErrorType < ErrLogThreshold THEN
        EXIT;
      IF (ErrorType = ErrorType::Error) THEN BEGIN
        IF JnlLineNo = 0 THEN BEGIN
          ErrorsOccurredBatch := TRUE;
        END ELSE BEGIN
          ErrorsOccurredLine := TRUE;
        END;
      END;
      TempGenImpErrorLog[1]."Error No." := TempGenImpErrorLog[1]."Error No." + 1;
      TempGenImpErrorLog[1]."Log Type" := ErrorType;
      TempGenImpErrorLog[1]."Batch Line No." := JnlLineNo;
      TempGenImpErrorLog[1].Description := COPYSTR(Description2,1,MAXSTRLEN(TempGenImpErrorLog[1].Description));
      TempGenImpErrorLog[1].INSERT;
    END;

    PROCEDURE WriteErrorLogBuffer@1100485009();
    VAR
      GenImportErrorLog@1100485002 : Record 11020486;
      SeqNo@1100485003 : Integer;
    BEGIN
      IF TempGenImpErrorLog[1].FINDSET THEN BEGIN
        GenImportErrorLog.SETCURRENTKEY("Batch Name","Error No.");
        GenImportErrorLog.SETRANGE("Batch Name",GenImpBatch.Name);
        IF GenImportErrorLog.FINDLAST THEN
          SeqNo := GenImportErrorLog."Error No.";

        MaxCounter := TempGenImpErrorLog[1].COUNT;
        OpenWindow(Text017,MaxCounter);
        REPEAT
          Counter := Counter + 1;
          UpdateWindow;
          SeqNo := SeqNo + 1;
          GenImportErrorLog := TempGenImpErrorLog[1];
          GenImportErrorLog."Error No." := SeqNo;
          GenImportErrorLog.INSERT;
        UNTIL TempGenImpErrorLog[1].NEXT = 0;
        TempGenImpErrorLog[1].DELETEALL;
        Window.CLOSE
      END;
    END;

    LOCAL PROCEDURE RaiseError@1100485010(JnlLineNo@1100485003 : Integer;Type@1100485000 : 'Message,Warning,Error';Field2@1100485001 : Record 2000000041;ErrorTxt@1100485002 : Text[80]) : Boolean;
    BEGIN
      AppendErrorLogEntry(JnlLineNo,Type,COPYSTR('<' + TgtField."Field Caption" + '> ' + ErrorTxt,1,80));
      EXIT(Type = Type::Error);
    END;

    PROCEDURE EvalVar@1100485013(JnlLineNo@1100485010 : Integer;VAR VariantValue@1100485000 : Variant;TextValue@1100485001 : Text[250];TgtField@1100485002 : Record 2000000041) : Boolean;
    VAR
      hBigInt@1100485003 : BigInteger;
      hDec@1100485004 : Decimal;
      hCod@1100485005 : Code[250];
      hDat@1100485007 : Date;
      hTim@1100485008 : Time;
      hDatTim@1100485009 : DateTime;
      hOpt@1100485011 : Option;
      hBool@1100485012 : Boolean;
      hDatFrml@1100525000 : DateFormula;
      ClrDatFrml@1100525001 : DateFormula;
    BEGIN
      CASE TgtField.Type OF
        TgtField.Type::Integer,TgtField.Type::BigInteger :
          BEGIN
            IF TextValue = '' THEN
              CLEAR(hBigInt)
            ELSE
              IF NOT EVALUATE(hBigInt,TextValue) THEN
                EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text003));
            IF TempGenImpMapLine.Mandatory THEN
              IF hBigInt = 0 THEN
                EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text000));
            VariantValue := hBigInt;
          END;
        TgtField.Type::Decimal :
          BEGIN
            IF TextValue = '' THEN
              CLEAR(hDec)
            ELSE
              IF NOT EVALUATE(hDec,TextValue) THEN
                EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text003));
            IF TempGenImpMapLine.Mandatory THEN
              IF hDec = 0 THEN
                EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text000));
            VariantValue := hDec;
          END;
        TgtField.Type::Date :
          BEGIN
            IF TextValue = '' THEN
              CLEAR(hDat)
            ELSE
              IF NOT EVALUATE(hDat,TextValue) THEN
                EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text003));
            IF TempGenImpMapLine.Mandatory THEN
              IF hDat = 0D THEN
                EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text000));
            VariantValue := hDat;
          END;
        TgtField.Type::DateTime :
          BEGIN
            IF TextValue = '' THEN
              CLEAR(hDatTim)
            ELSE
              IF NOT EVALUATE(hDatTim,TextValue) THEN
                EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text003));
            IF TempGenImpMapLine.Mandatory THEN
              IF hDatTim = 0DT THEN
                EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text000));
            VariantValue := hDatTim;
          END;
        TgtField.Type::Time :
          BEGIN
            IF TextValue = '' THEN
              CLEAR(hTim)
            ELSE
              IF NOT EVALUATE(hTim,TextValue) THEN
                EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text003));
            IF TempGenImpMapLine.Mandatory THEN
              IF hTim = 0T THEN
                EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text000));
            VariantValue := hTim;
          END;
        TgtField.Type::Boolean :
          BEGIN
            IF TextValue = '' THEN
              CLEAR(hBool)
            ELSE
              IF NOT EVALUATE(hBool,TextValue) THEN
                EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text003));
            IF TempGenImpMapLine.Mandatory THEN
              IF TextValue = '' THEN
                EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text000));
            VariantValue := hBool;
          END;
        TgtField.Type::Option :
          BEGIN
            IF NOT EvalOption(hOpt,TextValue,TgtField.TableNo,TgtField."No.") THEN
              EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text003));
            IF TempGenImpMapLine.Mandatory THEN
              IF TextValue = '' THEN
                EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text000));
            VariantValue := hOpt
          END;
        TgtField.Type::Code :
          IF TextLengthOK(JnlLineNo,TextValue,TgtField.Len,FALSE) THEN BEGIN
            IF NOT EVALUATE(hCod,TextValue) THEN
              EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text003));
            IF TempGenImpMapLine.Mandatory THEN
              IF hCod = '' THEN
                EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text000));
              VariantValue := hCod
          END ELSE
            EXIT(FALSE);
        TgtField.Type::Text :
          IF TextLengthOK(JnlLineNo,TextValue,TgtField.Len,TRUE) THEN BEGIN //truncate allowed
            IF TempGenImpMapLine.Mandatory THEN
              IF TextValue = '' THEN
                EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text000));
              VariantValue := TextValue
          END ELSE
            EXIT(FALSE);
        TgtField.Type::DateFormula :
          BEGIN
            CLEAR(ClrDatFrml);
            IF TextValue = '' THEN
              CLEAR(hDatFrml)
            ELSE
              IF NOT EVALUATE(hDatFrml,TextValue) THEN
                EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text003));
            IF TempGenImpMapLine.Mandatory THEN
              //~~IF TextValue = '' THEN
              IF hDatFrml = ClrDatFrml THEN
                EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text000));
            VariantValue := hDatFrml;
          END;
        //add other types here
        ELSE
          EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text003));
      END;
      EXIT(TRUE);
    END;

    PROCEDURE EvalOption@1100485015(VAR OptionNo@1100485000 : Option;TxtValue@1100485001 : Text[250];TableNo@1100485002 : Integer;FieldNo@1100485003 : Integer) : Boolean;
    VAR
      RecRef@1100485004 : RecordRef;
      FldRef@1100485005 : FieldRef;
      OptionStr@1100485006 : Text[1024];
      Pos@1100485007 : Integer;
    BEGIN
      RecRef.OPEN(TableNo,TRUE);
      FldRef := RecRef.FIELD(FieldNo);

      IF NOT EVALUATE(FldRef,TxtValue) THEN BEGIN
        TxtValue := ',' + UPPERCASE(TxtValue);
        OptionStr := UPPERCASE(',' + FldRef.OPTIONCAPTION);
        Pos := STRPOS(OptionStr,TxtValue);
        IF Pos = 0 THEN BEGIN
          OptionStr := UPPERCASE(',' + FldRef.OPTIONSTRING);
          Pos := STRPOS(OptionStr,TxtValue);
          IF Pos = 0 THEN
            EXIT(FALSE);
        END;
        TxtValue := COPYSTR(OptionStr,1,Pos-1);
        TxtValue := DELCHR(TxtValue,'=',DELCHR(TxtValue,'=',','));
        FldRef.VALUE(STRLEN(TxtValue));
      END;

      OptionNo := FldRef.VALUE;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE TextLengthOK@1100485002(JnlLineNo@1100485003 : Integer;VAR Txt@1100485001 : Text[250];TxtLength@1100485000 : Integer;TruncateAllowed@1100485002 : Boolean) : Boolean;
    BEGIN
      IF STRLEN(Txt) > TxtLength THEN BEGIN
        IF NOT TruncateAllowed THEN
          EXIT(NOT RaiseError(JnlLineNo,2,TgtField,Text002))
        ELSE BEGIN
          Txt := COPYSTR(Txt,1,TxtLength); //truncated, throw warning
          EXIT(NOT RaiseError(JnlLineNo,1,TgtField,Text001));
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE InitEnvironment@1100485016(GenImpJnlLine2@1100485000 : Record 11020481;TgtRecRefIsTemp@1100485002 : Boolean);
    VAR
      GenImpMappingLine@1100485001 : Record 11020485;
      GenImpMngmntAdv@1100485003 : Codeunit 11012220;
    BEGIN
      ErrorsOccurredBatch := FALSE;
      GenImpBatch.GET(GenImpJnlLine2."Batch Name");
      GenImpMapping.GET(GenImpBatch."Mapping Code");
      IF GenImpMapping.Status = GenImpMapping.Status::"Under Development" THEN
        GenImpMngmntAdv.CheckMappingStatusUnderDev(GenImpMapping)
      ELSE
        GenImpMapping.TESTFIELD(Status,GenImpMapping.Status::Certified);
      TgtRecRef.CLOSE;
      TgtRecRef.OPEN(GenImpMapping."Target Table No.",TgtRecRefIsTemp);
      TempGenImpErrorLog[1].DELETEALL;
      TempGenImpErrorLog[1]."Batch Name" := GenImpJnlLine2."Batch Name";

      //copy mapping lines to memory since they are read for each jnl. line
      TempGenImpMapLine.RESET;
      TempGenImpMapLine.DELETEALL;
      GenImpMappingLine.SETCURRENTKEY("Mapping Code","Validation Order");
      GenImpMappingLine.SETRANGE("Mapping Code",GenImpMapping.Code);
      GenImpMappingLine.SETFILTER("Imp/Exp",'<>%1',GenImpMappingLine."Imp/Exp"::Export);
      GenImpMappingLine.SETFILTER("NAV Field No.",'1..');
      IF GenImpMappingLine.FINDSET THEN
        REPEAT
          TempGenImpMapLine := GenImpMappingLine;
          TempGenImpMapLine.INSERT;
        UNTIL GenImpMappingLine.NEXT = 0;
      TempGenImpMapLine.SETCURRENTKEY("Mapping Code","Validation Order");

      MarkContextPKFields(GenImpJnlLine2."Batch Name");
      MarkMappingPKFields;
    END;

    PROCEDURE LookUpTableObject@1100485000(VAR TableNo@1100485000 : Integer);
    VAR
      AllObjWithCaption@1100485001 : Record 2000000058;
      AllObjWithCaptionManagement@1100529200 : Codeunit 11125358;
    BEGIN
      AllObjWithCaption.FILTERGROUP := 2;
      AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Table);
      AllObjWithCaption.SETRANGE("Object ID",1,1999999999);
      AllObjWithCaption.FILTERGROUP := 0;
      TableNo := AllObjWithCaptionManagement.SelectObjectFromList(AllObjWithCaption);
    END;

    PROCEDURE LookUpFieldNo@1100485021(TableNo2@1100485000 : Integer;VAR FieldNo@1100485002 : Integer);
    VAR
      Fld@1100485001 : Record 2000000041;
      FieldTableManagement@1100529200 : Codeunit 11012372;
    BEGIN
      Fld.FILTERGROUP := 2;
      Fld.SETRANGE(Fld.TableNo,TableNo2);
      Fld.SETRANGE(Fld.Class,Fld.Class::Normal);
      Fld.FILTERGROUP := 0;
      FieldTableManagement.SelectFieldFromList(TableNo2,FieldNo,Fld);
    END;

    PROCEDURE LookupBatchName@1100485004(VAR CurrentBatchName@1100485000 : Code[10];VAR GenImpBatchLine@1100485001 : Record 11020481) : Boolean;
    VAR
      GenImportBatch@1100485002 : Record 11020483;
    BEGIN
      COMMIT;
      GenImportBatch.Name := GenImpBatchLine.GETRANGEMAX("Batch Name");
      IF PAGE.RUNMODAL(0,GenImportBatch) = ACTION::LookupOK THEN BEGIN
        IF GenImportBatch.Name <> '' THEN
          CurrentBatchName := GenImportBatch.Name;
      END;
      SetBatchName(CurrentBatchName,GenImpBatchLine);
    END;

    PROCEDURE LookupBatchNameContext@1210190001(VAR CurrentBatchName@1100485000 : Code[10];VAR GenImpContextLine@1210190000 : Record 11020482) : Boolean;
    VAR
      GenImportBatch@1100485002 : Record 11020483;
    BEGIN
      COMMIT;
      GenImportBatch.Name := GenImpContextLine.GETRANGEMAX("Batch Name");
      IF PAGE.RUNMODAL(0,GenImportBatch) = ACTION::LookupOK THEN BEGIN
        IF GenImportBatch.Name <> '' THEN
          CurrentBatchName := GenImportBatch.Name;
      END;
      SetBatchNameContext(CurrentBatchName,GenImpContextLine);
    END;

    PROCEDURE SetBatchName@1100485005(CurrentBatchName@1100485001 : Code[10];VAR GenImpBatchLine@1100485000 : Record 11020481);
    BEGIN
      GenImpBatchLine.FILTERGROUP := 2;
      GenImpBatchLine.SETRANGE("Batch Name",CurrentBatchName);
      GenImpBatchLine.FILTERGROUP := 0;
    END;

    PROCEDURE SetBatchNameContext@1210190000(CurrentBatchName@1100485001 : Code[10];VAR GenImpContextLine@1100485000 : Record 11020482);
    BEGIN
      GenImpContextLine.FILTERGROUP := 2;
      GenImpContextLine.SETRANGE("Batch Name",CurrentBatchName);
      GenImpContextLine.FILTERGROUP := 0;
    END;

    PROCEDURE CheckBatchName@1100485006(CurrentBatchName@1100485001 : Code[10]);
    VAR
      GenImportBatch@1100485000 : Record 11020483;
    BEGIN
      GenImportBatch.GET(CurrentBatchName);
    END;

    PROCEDURE OpenWorksheetForm@1100485007(VAR CurrentBatchName@1100485000 : Code[10]);
    VAR
      GenImportBatch@1100485001 : Record 11020483;
    BEGIN
      IF NOT GenImportBatch.GET(CurrentBatchName) THEN BEGIN
        IF NOT GenImportBatch.FIND('-') THEN
          GenImportBatch.AddDefaultBatchRecord;
        CurrentBatchName := GenImportBatch.Name;
      END;
    END;

    PROCEDURE OpenWindow@1100485027(Txt@1100485000 : Text[80];VAR MaxCounter2@1100485001 : Integer);
    BEGIN
      Window.OPEN(Text013 + Txt);
      Counter := 0;
      Window.UPDATE(2,MaxCounter2);
      WindowLastUpdated := TIME;
    END;

    PROCEDURE UpdateWindow@1100485028();
    BEGIN
      IF TIME - WindowLastUpdated > 300 THEN BEGIN
        Window.UPDATE(1,Counter);
        Window.UPDATE(3,ROUND(Counter / MaxCounter * 10000,1));
        WindowLastUpdated := TIME;
      END;
    END;

    BEGIN
    END.
  }
}

