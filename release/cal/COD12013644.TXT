OBJECT Codeunit 12013644 Exflow-Calc Statistics
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=EXF512000,4PS;
  }
  PROPERTIES
  {
    OnRun=VAR
            PurchHeader2@1011 : Record 38;
            PurchLine@1100285002 : Record 39;
            ExFPurchDocLine@1100285000 : Record 12013588;
            Vend@1100285001 : Record 23;
            PurchSetup@1100285003 : Record 312;
            PurchDocWarning@1100285005 : Record 12013636;
            PerformCheck@1100285004 : Boolean;
          BEGIN
          END;

  }
  CODE
  {
    VAR
      Text021@1017 : TextConst 'ENU=VAT Amount;SVE=Momsbelopp';
      Text022@1018 : TextConst 'ENU=%1% VAT;SVE=%1% moms';
      ExFlowSetup@1100285001 : Record 12013601;
      ExfPurchDocHead@1040 : Record 12013587;
      ExfPurchDocLine@1041 : Record 12013588;
      TotalExfPurchDocLine@1043 : Record 12013588;
      TotalExfPurchDocLineLCY@1044 : Record 12013588;
      TempExfPurchDocLine@1046 : TEMPORARY Record 12013588;
      ExfPurchDocLineACY@1047 : Record 12013588;
      VendPostingGr@1064 : Record 93;
      Currency@1073 : Record 4;
      TempVATAmountLine@1083 : TEMPORARY Record 290;
      TempVATAmountLineRemainder@1084 : TEMPORARY Record 290;
      GenJnlCheckLine@1100285000 : Codeunit 11;
      ExDimMgt@1100285002 : Codeunit 12013605;
      Usedate@1104 : Date;
      RoundingLineNo@1112 : Integer;
      LastLineRetrieved@1119 : Boolean;
      RoundingLineInserted@1120 : Boolean;
      Text045@1155 : TextConst 'ENU=is not within your range of allowed posting dates.;SVE=„r inte i ditt till†tna intervall f”r bokf”ringsdatum.';

    LOCAL PROCEDURE GetCurrency@17();
    BEGIN
      WITH ExfPurchDocHead DO
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    LOCAL PROCEDURE DivideAmount@8(QtyType@1000 : 'General,Invoicing,Shipping';ExfPurchDocLineQty@1001 : Decimal);
    BEGIN
      IF RoundingLineInserted AND (RoundingLineNo = ExfPurchDocLine."Line No.") THEN
        EXIT;

      WITH ExfPurchDocLine DO
        IF ExfPurchDocLineQty = 0 THEN BEGIN
          "Line Amount" := 0;
          "Line Discount Amount" := 0;
          "Inv. Discount Amount" := 0;
          "VAT Base Amount" := 0;
          Amount := 0;
          "Amount Including VAT" := 0;
        END ELSE BEGIN
          TempVATAmountLine.GET(
            "VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax",
            "Line Amount" >= 0);
          IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN
            "VAT %" := TempVATAmountLine."VAT %";
          TempVATAmountLineRemainder := TempVATAmountLine;
          IF NOT TempVATAmountLineRemainder.FIND THEN BEGIN
            TempVATAmountLineRemainder.INIT;
            TempVATAmountLineRemainder.INSERT;
          END;
          "Line Amount" := ROUND(ExfPurchDocLineQty * "Direct Unit Cost",Currency."Amount Rounding Precision");
          IF ExfPurchDocLineQty <> Quantity THEN
            "Line Discount Amount" :=
              ROUND("Line Amount" * "Line Discount %" / 100,Currency."Amount Rounding Precision");
          "Line Amount" := "Line Amount" - "Line Discount Amount";

          IF "Allow Invoice Disc." AND (TempVATAmountLine."Inv. Disc. Base Amount" <> 0) THEN
            IF QtyType = QtyType::Invoicing THEN
              "Inv. Discount Amount" := "Inv. Disc. Amount to Invoice"
            ELSE BEGIN
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" +
                TempVATAmountLine."Invoice Discount Amount" * "Line Amount" /
                TempVATAmountLine."Inv. Disc. Base Amount";
              "Inv. Discount Amount" :=
                ROUND(
                  TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" - "Inv. Discount Amount";
            END;

          IF ExfPurchDocHead."Prices Including VAT" THEN BEGIN
            IF (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" = 0) OR
               ("Line Amount" = 0)
            THEN BEGIN
              TempVATAmountLineRemainder."VAT Amount" := 0;
              TempVATAmountLineRemainder."Amount Including VAT" := 0;
            END ELSE BEGIN
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" +
                TempVATAmountLine."VAT Amount" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
              TempVATAmountLineRemainder."Amount Including VAT" :=
                TempVATAmountLineRemainder."Amount Including VAT" +
                TempVATAmountLine."Amount Including VAT" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
            END;
            "Amount Including VAT" :=
              ROUND(TempVATAmountLineRemainder."Amount Including VAT",Currency."Amount Rounding Precision");
            Amount :=
              ROUND("Amount Including VAT",Currency."Amount Rounding Precision") -
              ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision");
            "VAT Base Amount" :=
              ROUND(
                Amount * (1 - ExfPurchDocHead."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
            TempVATAmountLineRemainder."Amount Including VAT" :=
              TempVATAmountLineRemainder."Amount Including VAT" - "Amount Including VAT";
            TempVATAmountLineRemainder."VAT Amount" :=
              TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
          END ELSE BEGIN
            IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
              "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount";
              Amount := 0;
              "VAT Base Amount" := 0;
            END ELSE BEGIN
              Amount := "Line Amount" - "Inv. Discount Amount";
              "VAT Base Amount" :=
                ROUND(
                  Amount * (1 - ExfPurchDocHead."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
              IF TempVATAmountLine."VAT Base" = 0 THEN
                TempVATAmountLineRemainder."VAT Amount" := 0
              ELSE
                TempVATAmountLineRemainder."VAT Amount" :=
                  TempVATAmountLineRemainder."VAT Amount" +
                  TempVATAmountLine."VAT Amount" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
              "Amount Including VAT" :=
                Amount + ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision");
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
            END;
          END;

          TempVATAmountLineRemainder.MODIFY;
        END;
    END;

    LOCAL PROCEDURE RoundAmount@9(ExfPurchDocLineQty@1000 : Decimal;ExfPurchDocLineQtyBase@1100285001 : Decimal);
    VAR
      CurrExchRate@1100285000 : Record 330;
      NoVAT@1001 : Boolean;
    BEGIN
      WITH ExfPurchDocLine DO BEGIN
        IncrAmount(TotalExfPurchDocLine);
        Increment(TotalExfPurchDocLine."Net Weight",ROUND(ExfPurchDocLineQty * "Net Weight",0.00001));
        Increment(TotalExfPurchDocLine."Gross Weight",ROUND(ExfPurchDocLineQty * "Gross Weight",0.00001));
        Increment(TotalExfPurchDocLine."Unit Volume",ROUND(ExfPurchDocLineQty * "Unit Volume",0.00001));
        Increment(TotalExfPurchDocLine.Quantity,ExfPurchDocLineQty);
        Increment(TotalExfPurchDocLine."Quantity (Base)",ExfPurchDocLineQtyBase);
        IF "Units per Parcel" > 0 THEN
          Increment(
            TotalExfPurchDocLine."Units per Parcel",
            ROUND(ExfPurchDocLineQty / "Units per Parcel",1,'>'));

        TempExfPurchDocLine := ExfPurchDocLine;
        ExfPurchDocLineACY := ExfPurchDocLine;
        IF ExfPurchDocHead."Currency Code" <> '' THEN BEGIN
          IF ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
             (ExfPurchDocHead."Posting Date" = 0D)
          THEN
            Usedate := WORKDATE
          ELSE
            Usedate := ExfPurchDocHead."Posting Date";

          NoVAT := Amount = "Amount Including VAT";
          "Amount Including VAT" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(0,"Job No.",
                Usedate,ExfPurchDocHead."Currency Code",
                TotalExfPurchDocLine."Amount Including VAT",ExfPurchDocHead."Currency Factor",FALSE)) - //4PS
                  TotalExfPurchDocLineLCY."Amount Including VAT";
          IF NoVAT THEN
            Amount := "Amount Including VAT"
          ELSE
            Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(0,"Job No.",
                  Usedate,ExfPurchDocHead."Currency Code",
                  TotalExfPurchDocLine.Amount,ExfPurchDocHead."Currency Factor",FALSE)) - //4PS
                    TotalExfPurchDocLineLCY.Amount;
          "Line Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(0,"Job No.",
                Usedate,ExfPurchDocHead."Currency Code",
                TotalExfPurchDocLine."Line Amount",ExfPurchDocHead."Currency Factor",FALSE)) - //4PS
                  TotalExfPurchDocLineLCY."Line Amount";
          "Line Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(0,"Job No.",
                Usedate,ExfPurchDocHead."Currency Code",
                TotalExfPurchDocLine."Line Discount Amount",ExfPurchDocHead."Currency Factor",FALSE)) - //4PS
                  TotalExfPurchDocLineLCY."Line Discount Amount";
          "Inv. Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(0,"Job No.",
                Usedate,ExfPurchDocHead."Currency Code",
                TotalExfPurchDocLine."Inv. Discount Amount",ExfPurchDocHead."Currency Factor",FALSE)) - //4PS
                  TotalExfPurchDocLineLCY."Inv. Discount Amount";
          "VAT Difference" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(0,"Job No.",
                Usedate,ExfPurchDocHead."Currency Code",
                TotalExfPurchDocLine."VAT Difference",ExfPurchDocHead."Currency Factor",FALSE)) - //4PS
                  TotalExfPurchDocLineLCY."VAT Difference";
        END;

        IncrAmount(TotalExfPurchDocLineLCY);
        Increment(TotalExfPurchDocLineLCY."Unit Cost (LCY)",ROUND(ExfPurchDocLineQty * "Unit Cost (LCY)"));
      END;
    END;

    LOCAL PROCEDURE InvoiceRounding@12(UseTempData@1000 : Boolean);
    VAR
      InvoiceRoundingAmount@1001 : Decimal;
      NextLineNo@1002 : Integer;
    BEGIN
      Currency.TESTFIELD("Invoice Rounding Precision");
      InvoiceRoundingAmount :=
        -ROUND(
          TotalExfPurchDocLine."Amount Including VAT" -
          ROUND(
            TotalExfPurchDocLine."Amount Including VAT",
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");
      IF InvoiceRoundingAmount <> 0 THEN BEGIN
        VendPostingGr.GET(ExfPurchDocHead."Vendor Posting Group");
        VendPostingGr.TESTFIELD("Invoice Rounding Account");
        WITH ExfPurchDocLine DO BEGIN
          INIT;
          NextLineNo := "Line No." + 10000;
          "System-Created Entry" := TRUE;
          IF UseTempData THEN BEGIN
            "Line No." := 0;
            Type := Type::"G/L Account";
          END ELSE BEGIN
            "Line No." := NextLineNo;
            VALIDATE(Type,Type::"G/L Account");
          END;
          VALIDATE("No.",VendPostingGr."Invoice Rounding Account");
          VALIDATE(Quantity,1);
          IF ExfPurchDocHead."Prices Including VAT" THEN
            VALIDATE("Direct Unit Cost",InvoiceRoundingAmount)
          ELSE
            VALIDATE(
              "Direct Unit Cost",
              ROUND(
                InvoiceRoundingAmount /
                (1 + (1 - ExfPurchDocHead."VAT Base Discount %" / 100) * "VAT %" / 100),
                Currency."Amount Rounding Precision"));
          VALIDATE("Amount Including VAT",InvoiceRoundingAmount);
          "Line No." := NextLineNo;

          LastLineRetrieved := FALSE;
          RoundingLineInserted := TRUE;
          RoundingLineNo := "Line No.";
        END;
      END;
    END;

    LOCAL PROCEDURE IncrAmount@13(VAR _TotalExfPurchDocLine@1000 : Record 12013588);
    BEGIN
      WITH ExfPurchDocLine DO BEGIN
        IF ExfPurchDocHead."Prices Including VAT" OR
           ("VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT")
        THEN
          Increment(_TotalExfPurchDocLine."Line Amount","Line Amount");
        Increment(_TotalExfPurchDocLine.Amount,Amount);
        Increment(_TotalExfPurchDocLine."VAT Base Amount","VAT Base Amount");
        Increment(_TotalExfPurchDocLine."VAT Difference","VAT Difference");
        Increment(_TotalExfPurchDocLine."Amount Including VAT","Amount Including VAT");
        Increment(_TotalExfPurchDocLine."Line Discount Amount","Line Discount Amount");
        Increment(_TotalExfPurchDocLine."Inv. Discount Amount","Inv. Discount Amount");
        Increment(_TotalExfPurchDocLine."Inv. Disc. Amount to Invoice","Inv. Disc. Amount to Invoice");
        Increment(_TotalExfPurchDocLine."Prepmt. Line Amount","Prepmt. Line Amount");
        Increment(_TotalExfPurchDocLine."Prepmt. Amt. Inv.","Prepmt. Amt. Inv.");
        Increment(_TotalExfPurchDocLine."Prepmt Amt to Deduct","Prepmt Amt to Deduct");
        Increment(_TotalExfPurchDocLine."Prepmt Amt Deducted","Prepmt Amt Deducted");
      END;
    END;

    LOCAL PROCEDURE Increment@14(VAR Number@1000 : Decimal;Number2@1001 : Decimal);
    BEGIN
      Number := Number + Number2;
    END;

    PROCEDURE GetExfPurchDocLines@16(VAR _NewExfPurchDocHead@1000 : Record 12013587;VAR _ExfPurchDocLine@1001 : Record 12013588;_QtyType@1002 : 'General,Invoicing,Shipping');
    VAR
      OldExfPurchDocLine@1003 : Record 12013588;
    BEGIN
      ExfPurchDocHead := _NewExfPurchDocHead;
      SumExfPurchDocLines2(_ExfPurchDocLine,OldExfPurchDocLine,_QtyType,TRUE);
    END;

    PROCEDURE SumExfPurchDocLinesTemp@24(VAR NewExfPurchDocHead@1000 : Record 12013587;VAR OldExfPurchDocLine@1001 : Record 12013588;QtyType@1002 : 'General,Invoicing,Shipping';VAR NewTotalExfPurchDocLine@1003 : Record 12013588;VAR NewTotalExfPurchDocLineLCY@1004 : Record 12013588;VAR VATAmount@1005 : Decimal;VAR VATAmountText@1006 : Text[30]);
    BEGIN
      WITH ExfPurchDocHead DO BEGIN
        ExfPurchDocHead := NewExfPurchDocHead;
        SumExfPurchDocLines2(ExfPurchDocLine,OldExfPurchDocLine,QtyType,FALSE);
        VATAmount := TotalExfPurchDocLine."Amount Including VAT" - TotalExfPurchDocLine.Amount;
        IF TotalExfPurchDocLine."VAT %" = 0 THEN
          VATAmountText := Text021
        ELSE
          VATAmountText := STRSUBSTNO(Text022,TotalExfPurchDocLine."VAT %");
        NewTotalExfPurchDocLine := TotalExfPurchDocLine;
        NewTotalExfPurchDocLineLCY := TotalExfPurchDocLineLCY;
      END;
    END;

    LOCAL PROCEDURE SumExfPurchDocLines2@11(VAR NewExfPurchDocLine@1000 : Record 12013588;VAR OldExfPurchDocLine@1001 : Record 12013588;QtyType@1002 : 'General,Invoicing,Shipping';InsertExfPurchDocLine@1003 : Boolean);
    VAR
      PurchSetup@1100285000 : Record 312;
      ExfPurchDocLineQty@1004 : Decimal;
      ExfPurchDocLineQtyBase@1100285001 : Decimal;
    BEGIN
      TempVATAmountLineRemainder.DELETEALL;
      OldExfPurchDocLine.CalcVATAmountLines(QtyType,ExfPurchDocHead,OldExfPurchDocLine,TempVATAmountLine);
      WITH ExfPurchDocHead DO BEGIN
        PurchSetup.GET;
        GetCurrency;
        OldExfPurchDocLine.SETRANGE("Document Type","Document Type");
        OldExfPurchDocLine.SETRANGE("Inbound Document No.", "Inbound Document No.");
        RoundingLineInserted := FALSE;
        IF OldExfPurchDocLine.FINDSET THEN
          REPEAT
            IF NOT RoundingLineInserted THEN
              ExfPurchDocLine := OldExfPurchDocLine;
            CASE QtyType OF
              QtyType::General:
                BEGIN
                  ExfPurchDocLineQty := ExfPurchDocLine.Quantity;
                  ExfPurchDocLineQtyBase := 0;
                  IF ExfPurchDocLine.Type = ExfPurchDocLine.Type::Item THEN
                    ExfPurchDocLineQtyBase := ExfPurchDocLine.Quantity;
                END;

              QtyType::Invoicing:
                BEGIN
                  ExfPurchDocLineQty := ExfPurchDocLine."Qty. to Invoice";
                  ExfPurchDocLineQtyBase := 0;
                  IF ExfPurchDocLine.Type = ExfPurchDocLine.Type::Item THEN
                    ExfPurchDocLineQtyBase := ExfPurchDocLine."Qty. to Invoice";
                END;
              QtyType::Shipping:
                BEGIN
                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                    ExfPurchDocLineQty := ExfPurchDocLine."Return Qty. to Ship";
                    ExfPurchDocLineQtyBase := 0;
                    IF ExfPurchDocLine.Type = ExfPurchDocLine.Type::Item THEN
                      ExfPurchDocLineQtyBase := ExfPurchDocLine."Return Qty. to Ship";
                  END ELSE BEGIN
                    ExfPurchDocLineQty := ExfPurchDocLine."Qty. to Receive";
                    ExfPurchDocLineQtyBase := 0;
                    IF ExfPurchDocLine.Type = ExfPurchDocLine.Type::Item THEN
                      ExfPurchDocLineQtyBase := ExfPurchDocLine."Qty. to Receive";
                  END;
                END;
            END;
            DivideAmount(QtyType,ExfPurchDocLineQty);
            ExfPurchDocLine.Quantity := ExfPurchDocLineQty;
            ExfPurchDocLine."Quantity (Base)" := ExfPurchDocLineQtyBase;
            IF ExfPurchDocLineQty <> 0 THEN BEGIN
              IF (ExfPurchDocLine.Amount <> 0) AND NOT RoundingLineInserted THEN
                IF TotalExfPurchDocLine.Amount = 0 THEN
                  TotalExfPurchDocLine."VAT %" := ExfPurchDocLine."VAT %"
                ELSE IF TotalExfPurchDocLine."VAT %" <> ExfPurchDocLine."VAT %" THEN
                  TotalExfPurchDocLine."VAT %" := 0;
              RoundAmount(ExfPurchDocLineQty,ExfPurchDocLineQtyBase);
              ExfPurchDocLine := TempExfPurchDocLine;
            END;
            IF InsertExfPurchDocLine THEN BEGIN
              NewExfPurchDocLine := ExfPurchDocLine;
              NewExfPurchDocLine.INSERT;
            END;
            IF RoundingLineInserted THEN
              LastLineRetrieved := TRUE
            ELSE BEGIN
              LastLineRetrieved := OldExfPurchDocLine.NEXT = 0;
              IF LastLineRetrieved AND PurchSetup."Invoice Rounding" THEN
                InvoiceRounding(TRUE);
            END;
          UNTIL LastLineRetrieved;
      END;
    END;

    BEGIN
    {
      4PS Currency Exchange adaption
    }
    END.
  }
}

