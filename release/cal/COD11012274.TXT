OBJECT Codeunit 11012274 Copy Prognosis From PrevSpec
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=4PS14.00;
  }
  PROPERTIES
  {
    TableNo=11012034;
    OnRun=VAR
            PreviousPrognosis@11136550 : Record 11012034;
          BEGIN
            ProjSetup.GET;
            FindPreviousPrognosis(Rec, PreviousPrognosis);

            CopyPrognosisLines(PreviousPrognosis, Rec);
            CopyPrognosisDetailLines(PreviousPrognosis, Rec);
            AddMissingPrognosisLines(Rec);
          END;

  }
  CODE
  {
    VAR
      ProjSetup@1100525000 : Record 315;

    LOCAL PROCEDURE FindPreviousPrognosis@11136554(Prognosis@11136550 : Record 11012034;VAR PreviousPrognosis@11136551 : Record 11012034);
    BEGIN
      PreviousPrognosis := Prognosis;
      PreviousPrognosis.SETRANGE("Project No.", PreviousPrognosis."Project No.");
      PreviousPrognosis.SETFILTER("Prognosis Date", '<%1', PreviousPrognosis."Prognosis Date");
      PreviousPrognosis.FINDLAST;
    END;

    LOCAL PROCEDURE CopyPrognosisLines@11136557(FromPrognosis@11136550 : Record 11012034;ToPrognosis@11136551 : Record 11012034);
    VAR
      FromPrognosisLine@11136552 : Record 11012035;
      ToPrognosisLine@11136554 : Record 11012035;
    BEGIN
      FromPrognosisLine.SETRANGE("Project No.", FromPrognosis."Project No.");
      FromPrognosisLine.SETRANGE("Prognosis Date", FromPrognosis."Prognosis Date");
      IF FromPrognosisLine.FINDSET THEN BEGIN
        REPEAT
          ToPrognosisLine := FromPrognosisLine;
          ToPrognosisLine."Project No." := ToPrognosis."Project No.";
          ToPrognosisLine.VALIDATE("Prognosis Date", ToPrognosis."Prognosis Date");
          ToPrognosisLine.Quantity := 0;
          ToPrognosisLine.Amount := 0;
          CalcValues(ToPrognosisLine, TRUE);
          ToPrognosisLine."Fix Prognosis Line" := ToPrognosis."Fix Prognosis Line";
          ToPrognosisLine.INSERT;
        UNTIL FromPrognosisLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyPrognosisDetailLines@11136552(FromPrognosis@11136551 : Record 11012034;ToPrognosis@11136550 : Record 11012034);
    VAR
      FromPrognosisDetailLine@11136553 : Record 11020687;
      ToPrognosisDetailLine@11136552 : Record 11020687;
      TempPrognosisLineSpecification@1100525000 : TEMPORARY Record 11020687;
    BEGIN
      IF NOT ProjSetup."Prognosis Specifications" THEN  //C004846.n
        EXIT;
      FromPrognosisDetailLine.SETRANGE("Project No.", FromPrognosis."Project No.");
      FromPrognosisDetailLine.SETRANGE("Prognosis Date", FromPrognosis."Prognosis Date");
      IF FromPrognosisDetailLine.FINDSET THEN BEGIN
        REPEAT
          //C040418.sn
          TempPrognosisLineSpecification.SETRANGE("Reference No.",FromPrognosisDetailLine."Reference No.");
          IF TempPrognosisLineSpecification.ISEMPTY THEN BEGIN
          //C040418.en
            ToPrognosisDetailLine := FromPrognosisDetailLine;
            ToPrognosisDetailLine."Project No." := ToPrognosis."Project No.";
            ToPrognosisDetailLine."Prognosis Date" := ToPrognosis."Prognosis Date";
          //ToPrognosisDetailLine."Line No." := 0;  //C040418 Speed up
            ToPrognosisDetailLine."Previous Prognosis Amount" := FromPrognosisDetailLine.Amount;
            ToPrognosisDetailLine.Quantity := 0;
            ToPrognosisDetailLine.Amount := 0;
            ToPrognosisDetailLine.INSERT(TRUE);
          //C040418.sn
            TempPrognosisLineSpecification := FromPrognosisDetailLine;
            TempPrognosisLineSpecification.INSERT;
          END;
          //C040418.en
        UNTIL FromPrognosisDetailLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AddMissingPrognosisLines@11136568(Prognosis@11136550 : Record 11012034);
    BEGIN
      //diekus: extra veld niet overnemen; eerst begroting controleren (op referentie), daarna kostenbewaking
      //CASE JobSetup."Create Prognosis Detail Lines" OF
      //  JobSetup."Create Prognosis Detail Lines"::"For each Budget Line":
          AddMissingBudgetLines(Prognosis);
      //  JobSetup."Create Prognosis Detail Lines"::"Only for New Cost Objects":
          AddMissingCostObjects(Prognosis);
      //END;
    END;

    LOCAL PROCEDURE AddMissingBudgetLines@11136551(Prognosis@11136550 : Record 11012034);
    VAR
      ProjRec@1210190002 : Record 11072003;
      BudgetLine@11136551 : Record 11012001;
      BudgetLine2@11136553 : Record 11012001;
      NullGUID@11136552 : GUID;
      PrognosisElement@1210190000 : Code[20];
    BEGIN
      ProjRec.GET(Prognosis."Project No.");  //db, 15-11-11

      BudgetLine.SETRANGE("Project No.", Prognosis."Project No.");
      BudgetLine.SETRANGE("Reference No.", NullGUID);
      IF BudgetLine.FINDSET THEN BEGIN
        REPEAT
          BudgetLine2 := BudgetLine;
          BudgetLine2."Reference No." := CREATEGUID;
          BudgetLine2.MODIFY(TRUE);

          //db.sn, 15-11-11
          IF ProjRec."Prognosis per Element" THEN
            PrognosisElement := BudgetLine.Element;
          InsertPrognosisLine(
            Prognosis."Project No.",
            Prognosis."Prognosis Date",
            BudgetLine."Cost Type",
            PrognosisElement,
            BudgetLine."Cost Object");
          InsertPrognosisDetailLine(
            Prognosis."Project No.",
            Prognosis."Prognosis Date",
            BudgetLine."Cost Type",
            PrognosisElement,
            BudgetLine."Cost Object",
            BudgetLine.Description,
            BudgetLine2."Reference No.",
            BudgetLine."Extension Contract",
            BudgetLine."Cost Component");
          //db.en, 15-11-11
        UNTIL BudgetLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AddMissingCostObjects@11136553(Prognosis@11136550 : Record 11012034);
    VAR
      ProjRec@1210190000 : Record 11072003;
      CostControlRec@1210190003 : Record 11012050;
      NullGUID@11136552 : GUID;
      PrognosisElement@1210190004 : Code[20];
      CreateCostObjContrElem@1210190002 : Codeunit 11012032;
    BEGIN
      //db.sn, 15-11-11
      ProjRec.GET(Prognosis."Project No.");
      IF ProjRec."Cost Control Up to Date" = FALSE THEN BEGIN
        ProjRec.BuildCostControl;
        CreateCostObjContrElem.RUN(ProjRec);
      END;

      CostControlRec.SETRANGE("Project No.", Prognosis."Project No.");
      IF CostControlRec.FINDSET(FALSE, FALSE) THEN BEGIN
        REPEAT
          IF ProjRec."Prognosis per Element" THEN
            PrognosisElement := CostControlRec.Element;
          IF InsertPrognosisLine(
            Prognosis."Project No.",
            Prognosis."Prognosis Date",
            CostControlRec."Cost Type",
            PrognosisElement,
            CostControlRec."Cost Object")
          THEN BEGIN
            CostControlRec.CALCFIELDS(Description);
            InsertPrognosisDetailLine(
              Prognosis."Project No.",
              Prognosis."Prognosis Date",
              CostControlRec."Cost Type",
              PrognosisElement,
              CostControlRec."Cost Object",
              CostControlRec.Description,
              NullGUID,
              '',
              CostControlRec."Cost Component");
          END;
        UNTIL CostControlRec.NEXT = 0;
      END;
      //db.en, 15-11-11
    END;

    LOCAL PROCEDURE InsertPrognosisLine@11136555(iProject@11136554 : Code[20];iPrognosisDate@11136553 : Date;iCostType@11136552 : Integer;iElement@11136551 : Code[20];iCostObject@11136550 : Code[20]) : Boolean;
    VAR
      PrognosisLine@11136555 : Record 11012035;
    BEGIN
      PrognosisLine.VALIDATE("Project No.", iProject);
      PrognosisLine.VALIDATE("Prognosis Date", iPrognosisDate);
      PrognosisLine.VALIDATE("Cost Type", iCostType);
      PrognosisLine.VALIDATE(Element, iElement);
      PrognosisLine.VALIDATE("Cost Object", iCostObject);
      EXIT(PrognosisLine.INSERT(TRUE));
    END;

    LOCAL PROCEDURE InsertPrognosisDetailLine@11136556(iProject@11136551 : Code[20];iPrognosisDate@11136552 : Date;iCostType@11136553 : Integer;iElement@11136554 : Code[20];iCostObject@11136555 : Code[20];iDescription@11136556 : Text[100];iReferenceNo@11136558 : GUID;iExtensionContract@11136559 : Code[10];iCostComponent@11136560 : Code[20]);
    VAR
      PrognosisDetailLine@11136550 : Record 11020687;
    BEGIN
      IF NOT ProjSetup."Prognosis Specifications" THEN  //C004846.n
        EXIT;
      PrognosisDetailLine.VALIDATE("Project No.", iProject);
      PrognosisDetailLine.VALIDATE("Prognosis Date", iPrognosisDate);
      PrognosisDetailLine.VALIDATE("Cost Type", iCostType);
      PrognosisDetailLine.VALIDATE(Element, iElement);
      PrognosisDetailLine.VALIDATE("Cost Object", iCostObject);
      PrognosisDetailLine.VALIDATE(Description, iDescription);
      PrognosisDetailLine.VALIDATE("Reference No.", iReferenceNo);
      PrognosisDetailLine.VALIDATE("Extension Contract", iExtensionContract);
      PrognosisDetailLine.VALIDATE("Cost Component", iCostComponent);
      PrognosisDetailLine.INSERT(TRUE);
    END;

    PROCEDURE CalcValues@11136558(VAR PrognosisLine@11136550 : Record 11012035;SaveValues@11136553 : Boolean);
    VAR
      PrognosisManagement@1100528400 : Codeunit 11020217;
    BEGIN
      PrognosisManagement.CalculateValues(PrognosisLine, SaveValues);
    END;

    BEGIN
    END.
  }
}

